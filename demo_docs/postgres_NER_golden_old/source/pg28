SQL Query Optimization — 5 SQL Tuning Tips - Database Management - Blogs - Quest Community Products View all products Free trials Buy online Product lines ApexSQL Change Auditor Enterprise Reporter
Foglight Database Monitoring Foglight Evolve KACE Metalogix Migration Manager NetVault Backup One Identity QoreStor Quest On Demand Rapid Recovery Recovery Manager RemoteScan SharePlex
Spotlight Stat Toad Featured products Cloud Management Cloud Access Manager Foglight for Virtualization, Enterprise Edition Identity Manager On Demand Migration for Email Quest On Demand Rapid Recovery Data Protection Foglight for Virtualization
NetVault NetVault for Office 365 QorePortal QoreStor Rapid Recovery vRanger Database Management Foglight for Databases Litespeed for SQL Server SharePlex Spotlight SQL Server Enterprise
Toad Data Point Toad DevOps Toolkit Toad Edge Toad for Oracle Toad for SQL Server Identity & Access Management Active Roles Defender Identity Manager Identity Manager Data Governance One Identity Safeguard
Password Manager Privileged Access Suite for Unix Starling Connect Starling Two-Factor Authentication syslog-ng Microsoft Platform Management Active Administrator Change Auditor Enterprise Reporter GPOADmin InTrust
Metalogix Migration Manager On Demand Migration for Email Quest On Demand Recovery Manager Performance Monitoring Foglight Capacity Director Foglight Hybrid Cloud Manager Foglight for Databases Foglight for Operating Systems
Foglight for Oracle Foglight for PostgreSQL Foglight for SQL Server Foglight for Storage Management Foglight for Virtualization Spotlight on SQL Server Unified Endpoint Management Desktop Authority Management Suite KACE Cloud Mobile Device Manager
KACE Desktop Authority KACE Privilege Manager KACE Systems Deployment Appliance KACE Systems Management Appliance RemoteScan Solutions View all Solutions Industries Education Energy Federal Government Financial Services
Healthcare State & Local Government Platforms Active Directory Cisco DB2 Exchange Google Hyper-v Lotus Notes OneDrive for Business Office 365 Oracle SAP/Sybase SharePoint
SQL Server Teams Unix/Linux VMware Windows Server Cloud Management Data Protection Overview Backup & Recovery Cloud Management Deduplication & Compression Disaster Recovery Office 365 Data Protection Virtualization Management
Database Management Overview Administration Cloud Migration Data Preparation and Provisioning Development DevOps Performance Monitoring Replication Supported Platforms IBM DB2 MySQL Oracle PostgreSQL
SAP Solutions SQL Server GDPR Compliance Identity & Access Management Overview Identity Administration Identity Governance Privileged Access Management AD Account Lifecycle Management Access Control Cloud Log Management
Microsoft Platform Management Overview Mergers & Acquisitions Migration & Consolidation Office 365 Migration & Management Security & Compliance Windows Backup & Recovery Supported Platforms Active Directory Cisco Exchange Google
Groupwise Lotus Notes Office 365 OneDrive for Business SharePoint SQL Server Teams Unix/Linux Windows Server Performance Monitoring Overview Database Performance Monitoring Operating System Monitoring Storage Performance & Utilization Management
Supported Platforms Active Directory DB2 Exchange Java Hyper-V .NET Oracle SAP/Sybase Storage SQL Server VMware Unified Endpoint Management Overview Endpoint Compliance
Endpoint Security Endpoint Visibility Industries Education Healthcare Supported Platforms Internet of things Microsoft® Windows MAC UNIX/LinuX Resources Blogs Blogs A to Z Data Protection
Database Management Microsoft Platform Management Performance Monitoring Unified Endpoint Management Customer Stories Documents Events Webcasts Technical Documentation Videos Whitepapers Trials Services Consulting Services Overview
Microsoft Platform Services Data Protection Services Unified Endpoint Management Performance Monitoring Services Database Management Services Educational Services Support Services Support Support Home By Product All Products AppAssure Archive Manager Change Auditor Desktop Authority
DR Series Foglight KACE Migration Manager NetVault Rapid Recovery SharePlex Toad vRanger Contact Support Overview Customer Service Licensing Assistance Renewal Assistance
Technical Support Download Software Knowledge Base My Account My Products My Service Requests My Licenses My Groups My Profile Policies & Procedures Consulting Services Microsoft Platform Management Data Protection
Unified Endpoint Management Performance Monitoring Database Management Technical Documentation Educational Services User Forums Video Tutorials Partners Overview Partner Circle Log In Become a Partner Find a Partner Partner Community Communities
Home Blogs Data Protection Database Management ITNinja Microsoft Platform Management Performance Monitoring Toad World Blog Unified Endpoint Management Forums All Product Forums Active Administrator Desktop Authority
Foglight ITNinja Migration Manager for Active Directory NetVault Rapid Recovery Toad World Forum Social Networks Facebook LinkedIn Twitter@Quest Twitter@QuestSupport YouTube 製品情報
すべての製品情報を見る Change Auditor Foglight KACE Metalogix Migration Manager Migrator for Notes to SharePoint NetVault Backup On Demand Migration for Email QoreStor Rapid Recovery
Recovery Manager SharePlex Spotlight Toad ソリューション すべてのプラットフォームを見る クラウド管理 GDPRコンプライアンス データ保護 クラウド管理 ディザスタリカバリ
バックアップとリカバリ Office 365 データ保護 仮想化管理 重複除外と複製 データベース管理 DevOps データの準備と分析 データベースのクラウド移行 データベースパフォーマンス監視 データベース管理 データベース複製ソフトウェアツール
統合エンドポイント管理 エンドポイントコンプライアンス エンドポイントセキュリティ エンドポイントの可視化 Microsoftプラットフォーム管理 ハイブリッドActive Directoryのセキュリティとガバナンス Microsoftプラットフォームの移行計画と統合 セキュリティとコンプライアンス 情報アーカイブおよびストレージ管理ソリューション Windowsのバックアップとリカバリ
Microsoft Serverのパフォーマンスと可用性 レポート作成機能 グループポリシーと権限 パフォーマンス監視 サービス コンサルティングサービス Microsoftプラットフォーム管理 データ保護 統合エンドポイント管理 パフォーマンス監視 データベース管理 トレーニングと認定資格
サポートサービス サポート サポートホーム 製品で検索 All Products AppAssure Archive Manager Change Auditor Desktop Authority DR Series Foglight KACE Migration Manager NetVault Rapid Recovery
SharePlex Toad vRanger お問い合わせ すべて カスタマサービス ライセンス アシスタンス 更新のアシスタンス 技術サポート コミュニティフォーラム ソフトウェアのダウンロード ナレッジベース マイアカウント
マイ プロダクト Myサービスリクエスト マイ ライセンス マイ グループ マイ プロファイル ポリシーおよび手順 コンサルティングサービス Microsoftプラットフォーム管理 データ保護 統合エンドポイント管理 パフォーマンス監視 データベース管理 リリースノートおよびガイド 教育サービス
ビデオチュートリアル トライアル パートナー Partner Circleへのログイン パートナーになる Find a Partner パートナーコミュニティ コミュニティ Quest Community Site Search
User Site Search User Blogs Database Management SQL Query Optimization — How to Determine When and If It’s Needed Data Protection Database Management Microsoft Platform Management Performance Monitoring Unified Endpoint Management
Quest More Cancel New SQL Query Optimization — How to Determine When and If It’s Needed Actions Subscribe by email Posts RSS More Cancel Tags Database Performance
SQL Server Janis Griffin Jun 24, 2020 It’s easy to start tinkering with the gears of SQL query optimization. You open up SQL Server Management Studio (SSMS), monitor wait time, review the execution plan, gather object information and begin optimizing SQL until you’re running a finely tuned machine.
If you’re good enough at it, you score a quick victory and get back to your regularly scheduled chaos. But if you adjust the wrong thing, or adjust the right thing in the wrong direction, well, there went your Wednesday. SQL query optimization? What makes you think you need it? Most of the time, it’s a spike in trouble tickets or user complaints. “Why is the system so slow?” your users complain. “It’s taking us forever to run our usual reports this week.”
That’s a pretty vague description, of course. It would be nice if they could tell you, “Things are slow because you’ve got an implicit conversion in line 62 of CurrentOrderQuery5.sql. The column is varchar and you’re passing in an integer.” But it’s not likely that your users can see that level of detail. At least trouble tickets and phone calls make for an active metric: easy to spot, easy to measure. When they start rolling in, you can be reasonably sure that it’s time for SQL tuning.
But there are other, passive metrics that make the need less clear. Things like slumping sales, which could be due to any number of factors. Is it because painfully slow queries in your online store are making your customers abandon their shopping carts? Is it because the economy is in bad shape? Or it could be things like sluggish SQL Server performance. Is it because a poorly written query is sending logical reads through the roof? Is it because the server is low on physical resources like memory and storage? In both scenarios, SQL query optimization can help with the first option, but not the second.
Why apply the right solution to the wrong problem? Before you go down the path of optimization, make sure that tuning is the right solution to the right problem.
Tuning SQL is a technical process, but every technical step has roots in good business sense. You could spend days trying to shorten execution time by a few milliseconds or reduce the number of logical reads by five percent, but is the reduction worth your time? It’s true that it’s important to meet the requirements of users, but every effort reaches the point of diminishing returns eventually. Consider these SQL query performance problems and the business context around them:
Acceptable performance — A query takes 10 minutes to run and the user wants it to run in one minute; that seems like a reasonable disparity and an achievable goal for optimization. However, if the query takes overnight and the user thinks it should run in one minute, then it may be more than a tuning problem. For one thing, you may have to educate the user about the amount of work the query is actually performing. For another, it may be a problem with the way the database was designed or the way the client application was written. Utility — Suppose you’re responsible for administering the financial database in a manufacturing company. At the end of every month, users complain about poor performance. You trace the problem to a series of month-end reports run by Accounting that take hours each and go straight into a filing cabinet unexamined by anybody. Instead of tuning, you explain the problem to the business managers and obtain permission to delete the reports.
Time shifting — Or, suppose those same reports are important for governance but not urgent for the business. If they are run once per week or per month, they can be scheduled for off-peak hours by pre-caching the data set and sending the results to a file. That removes the bottleneck on the other business users and frees the Accounting user from having to wait for the reports. When you factor business context into your decision to optimize, you can set priorities and buy yourself time. When you do optimize SQL queries, try SQL diagramming
SSMS and the tools built into SQL Server offer most of what you need for effective SQL query optimization. Combine the tools with a methodical approach around the following steps, as described in the e-book The Fundamental Guide to SQL Query Optimization: Monitor Wait Time Review the Execution Plan Gather Object Information Find the Driving Table Identify Performance Inhibitors
In step 4, your goal is to drive the query with the table that returns the least data. When you study joins and predicates, and filter earlier in the query rather than later, you reduce the number of logical reads. That’s a big step in SQL query optimization. SQL diagramming is a graphical technique for mapping the amount of data in the tables and finding which filter will return the fewest records. First, you determine which tables contain the detailed information and which tables are the master or lookup tables. Consider the simple example of this query against a university registration database:
The detail table is registration. It has two lookup tables, student and class. To diagram these tables, draw an upside-down tree connecting the detail table (at the top) with arrows (or links) to the lookup tables, like this: Now, calculate the relative number of records required for the join criteria (that is, the average ratio of rows related between the detail table and lookup tables). Write the numbers at each end of the arrow. In this example, for every student there are about 5 records in the registration table, and for every class there are about 30 records in registration. That means it should never be necessary to JOIN more than 150 (5×30) records to get a result for any single student or any single class.
That exercise is useful if your join columns are not indexed, or if you’re not sure that they’re indexed. Next, look at the filtering predicates to find which table to drive the query with. This query had two filters: one on registration cancelled = 'N' and the other on signup_date between two dates. To see how selective the filter is, run this query on registration:
select count(1) from registration where cancelled = 'N' AND   r.signup_date BETWEEN :beg_date AND :beg_date +1 It returns 4,344 records out of the 79,800 total records in registration. That is, 5.43 percent of the records will be read with that filter.
The other filter is on class: select count(1) from class where name = 'ENGLISH 101' It returns two records out of 1,000, or 0.2 percent, which represents a much more selective filter. Thus, class is the driving table, and the one on which to focus your SQL tuning first.
The voice of the user If you’re sure you need SQL tuning, The Fundamental Guide to SQL Query Optimization offers further insight. It walks you through five performance tuning tips with copy-and-paste queries and case studies, including the one described above.
You’ll probably find that the single most important SQL query optimization tool is the voice of the user. Why? Because that voice lets you know when to start optimizing and it tells you when you have optimized enough. It can ensure that you start tinkering with the gears when you need to and stop while you’re still ahead. The Fundamental Guide to SQL Query OptimizationSQL query optimization may be the best part of your job as a database professional. You roll up your sleeves, you get analytical, you poke around in code and you measure the impact of your changes.
This e-book walks you methodically through five basic steps in the SQL tuning process. Learn how and what to measure both before and after you’ve made changes so you’re not wasting effort on things that don’t matter. Discover how to find and correct common mistakes that eat into SQL query performance. Optimization tips? I’m in! Related Content Company About Us Buy Contact Us Careers News Resources Blogs Customer Stories Documents Events Videos
Support Professional Services Renew Support Technical Support Training & Certification Support Services Social Networks Facebook Instagram LinkedIn Twitter YouTube © 2021 Quest Software Inc. ALL RIGHTS RESERVED.
Legal Terms of Use Privacy Community Feedback & Support 会社名 会社情報 お問い合わせ 採用情報 ニュース リソース ブログ お客様の事例
ドキュメント イベント ビデオ サポート プロフェッショナルサービス サポートの更新 テクニカルサポート トレーニングと認定資格 サポートサービス ソーシャルネットワーク Facebook Instagram LinkedIn Twitter YouTube
