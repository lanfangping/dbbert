#FORMAT=WebAnno TSV 3.3


#Text=PostgreSQL: Documentation: 12: 25.3. Continuous Archiving and Point-in-Time Recovery (PITR) Home About Download Documentation Community Developers Support Donate
1-1	0-10	PostgreSQL	
1-2	10-11	:	
1-3	12-25	Documentation	
1-4	25-26	:	
1-5	27-29	12	
1-6	29-30	:	
1-7	31-35	25.3	
1-8	35-36	.	
1-9	36-37	 	
1-10	37-47	Continuous	
1-11	48-57	Archiving	
1-12	58-61	and	
1-13	62-75	Point-in-Time	
1-14	76-84	Recovery	
1-15	85-86	(	
1-16	86-90	PITR	
1-17	90-91	)	
1-18	92-96	Home	
1-19	97-102	About	
1-20	103-111	Download	
1-21	112-125	Documentation	
1-22	126-135	Community	
1-23	136-146	Developers	
1-24	147-154	Support	
1-25	155-161	Donate	

#Text=Your account 11th February 2021: PostgreSQL 13.2, 12.6, 11.11, 10.16, 9.6.21, & 9.5.25 Released! Documentation → PostgreSQL 12 Supported Versions:
2-1	162-166	Your	
2-2	167-174	account	
2-3	175-179	11th	
2-4	180-188	February	
2-5	189-193	2021	
2-6	193-194	:	
2-7	195-205	PostgreSQL	
2-8	206-210	13.2	
2-9	210-211	,	
2-10	212-216	12.6	
2-11	216-217	,	
2-12	218-223	11.11	
2-13	223-224	,	
2-14	225-230	10.16	
2-15	230-231	,	
2-16	232-238	9.6.21	
2-17	238-239	,	
2-18	240-241	&	
2-19	242-248	9.5.25	
2-20	249-257	Released	
2-21	257-258	!	
2-22	259-272	Documentation	
2-23	273-274	→	
2-24	275-285	PostgreSQL	
2-25	286-288	12	
2-26	289-298	Supported	
2-27	299-307	Versions	
2-28	307-308	:	

#Text=Current (13) 9.6 Development Versions: devel Unsupported versions: 9.5 9.4 9.3 9.2 9.1 9.0 8.4
3-1	309-316	Current	
3-2	317-318	(	
3-3	318-320	13	
3-4	320-321	)	
3-5	322-325	9.6	
3-6	326-337	Development	
3-7	338-346	Versions	
3-8	346-347	:	
3-9	348-353	devel	
3-10	354-365	Unsupported	
3-11	366-374	versions	
3-12	374-375	:	
3-13	376-379	9.5	
3-14	380-383	9.4	
3-15	384-387	9.3	
3-16	388-391	9.2	
3-17	392-395	9.1	
3-18	396-399	9.0	
3-19	400-403	8.4	

#Text=8.3 8.2 25.3. Continuous Archiving and Point-in-Time Recovery (PITR) Prev Chapter 25. Backup and Restore Home Next 25.3. Continuous Archiving and Point-in-Time Recovery (PITR)
4-1	404-407	8.3	
4-2	408-411	8.2	
4-3	412-416	25.3	
4-4	416-417	.	
4-5	417-418	 	
4-6	418-428	Continuous	
4-7	429-438	Archiving	
4-8	439-442	and	
4-9	443-456	Point-in-Time	
4-10	457-465	Recovery	
4-11	466-467	(	
4-12	467-471	PITR	
4-13	471-472	)	
4-14	473-477	Prev	
4-15	478-485	Chapter	
4-16	485-486	 	
4-17	486-488	25	
4-18	488-489	.	
4-19	489-490	 	
4-20	490-496	Backup	
4-21	497-500	and	
4-22	501-508	Restore	
4-23	509-513	Home	
4-24	514-518	Next	
4-25	519-523	25.3	
4-26	523-524	.	
4-27	524-525	 	
4-28	525-535	Continuous	
4-29	536-545	Archiving	
4-30	546-549	and	
4-31	550-563	Point-in-Time	
4-32	564-572	Recovery	
4-33	573-574	(	
4-34	574-578	PITR	
4-35	578-579	)	

#Text=25.3.1. Setting Up WAL Archiving 25.3.2. Making a Base Backup 25.3.3. Making a Base Backup Using the Low Level API 25.3.4. Recovering Using a Continuous Archive Backup 25.3.5. Timelines
5-1	580-586	25.3.1	
5-2	586-587	.	
5-3	588-595	Setting	
5-4	596-598	Up	
5-5	599-602	WAL	
5-6	603-612	Archiving	
5-7	613-619	25.3.2	
5-8	619-620	.	
5-9	621-627	Making	
5-10	628-629	a	
5-11	630-634	Base	
5-12	635-641	Backup	
5-13	642-648	25.3.3	
5-14	648-649	.	
5-15	650-656	Making	
5-16	657-658	a	
5-17	659-663	Base	
5-18	664-670	Backup	
5-19	671-676	Using	
5-20	677-680	the	
5-21	681-684	Low	
5-22	685-690	Level	
5-23	691-694	API	
5-24	695-701	25.3.4	
5-25	701-702	.	
5-26	703-713	Recovering	
5-27	714-719	Using	
5-28	720-721	a	
5-29	722-732	Continuous	
5-30	733-740	Archive	
5-31	741-747	Backup	
5-32	748-754	25.3.5	
5-33	754-755	.	
5-34	756-765	Timelines	

#Text=25.3.6. Tips and Examples 25.3.7. Caveats
6-1	766-772	25.3.6	
6-2	772-773	.	
6-3	774-778	Tips	
6-4	779-782	and	
6-5	783-791	Examples	
6-6	792-798	25.3.7	
6-7	798-799	.	
6-8	800-807	Caveats	

#Text=At all times, PostgreSQL maintains a write ahead log (WAL) in the pg_wal/ subdirectory of the cluster's data directory. The log records every change made to the database's data files. This log exists primarily for crash-safety purposes: if the system crashes, the database can be restored to consistency by “replaying” the log entries made since the last checkpoint. However, the existence of the log makes it possible to use a third strategy for backing up databases: we can combine a file-system-level backup with backup of the WAL files. If recovery is needed, we restore the file system backup and then replay from the backed-up WAL files to bring the system to a current state. This approach is more complex to administer than either of the previous approaches, but it has some significant benefits: We do not need a perfectly consistent file system backup as the starting point. Any internal inconsistency in the backup will be corrected by log replay (this is not significantly different from what happens during crash recovery). So we do not need a file system snapshot capability, just tar or a similar archiving tool.
7-1	808-810	At	
7-2	811-814	all	
7-3	815-820	times	
7-4	820-821	,	
7-5	822-832	PostgreSQL	
7-6	833-842	maintains	
7-7	843-844	a	
7-8	845-850	write	
7-9	851-856	ahead	
7-10	857-860	log	
7-11	861-862	(	
7-12	862-865	WAL	
7-13	865-866	)	
7-14	867-869	in	
7-15	870-873	the	
7-16	874-880	pg_wal	
7-17	880-881	/	
7-18	882-894	subdirectory	
7-19	895-897	of	
7-20	898-901	the	
7-21	902-911	cluster's	
7-22	912-916	data	
7-23	917-926	directory	
7-24	926-927	.	
7-25	928-931	The	
7-26	932-935	log	
7-27	936-943	records	
7-28	944-949	every	
7-29	950-956	change	
7-30	957-961	made	
7-31	962-964	to	
7-32	965-968	the	
7-33	969-979	database's	
7-34	980-984	data	
7-35	985-990	files	
7-36	990-991	.	
7-37	992-996	This	
7-38	997-1000	log	
7-39	1001-1007	exists	
7-40	1008-1017	primarily	
7-41	1018-1021	for	
7-42	1022-1034	crash-safety	
7-43	1035-1043	purposes	
7-44	1043-1044	:	
7-45	1045-1047	if	
7-46	1048-1051	the	
7-47	1052-1058	system	
7-48	1059-1066	crashes	
7-49	1066-1067	,	
7-50	1068-1071	the	
7-51	1072-1080	database	
7-52	1081-1084	can	
7-53	1085-1087	be	
7-54	1088-1096	restored	
7-55	1097-1099	to	
7-56	1100-1111	consistency	
7-57	1112-1114	by	
7-58	1115-1116	“	
7-59	1116-1125	replaying	
7-60	1125-1126	”	
7-61	1127-1130	the	
7-62	1131-1134	log	
7-63	1135-1142	entries	
7-64	1143-1147	made	
7-65	1148-1153	since	
7-66	1154-1157	the	
7-67	1158-1162	last	
7-68	1163-1173	checkpoint	
7-69	1173-1174	.	
7-70	1175-1182	However	
7-71	1182-1183	,	
7-72	1184-1187	the	
7-73	1188-1197	existence	
7-74	1198-1200	of	
7-75	1201-1204	the	
7-76	1205-1208	log	
7-77	1209-1214	makes	
7-78	1215-1217	it	
7-79	1218-1226	possible	
7-80	1227-1229	to	
7-81	1230-1233	use	
7-82	1234-1235	a	
7-83	1236-1241	third	
7-84	1242-1250	strategy	
7-85	1251-1254	for	
7-86	1255-1262	backing	
7-87	1263-1265	up	
7-88	1266-1275	databases	
7-89	1275-1276	:	
7-90	1277-1279	we	
7-91	1280-1283	can	
7-92	1284-1291	combine	
7-93	1292-1293	a	
7-94	1294-1311	file-system-level	
7-95	1312-1318	backup	
7-96	1319-1323	with	
7-97	1324-1330	backup	
7-98	1331-1333	of	
7-99	1334-1337	the	
7-100	1338-1341	WAL	
7-101	1342-1347	files	
7-102	1347-1348	.	
7-103	1349-1351	If	
7-104	1352-1360	recovery	
7-105	1361-1363	is	
7-106	1364-1370	needed	
7-107	1370-1371	,	
7-108	1372-1374	we	
7-109	1375-1382	restore	
7-110	1383-1386	the	
7-111	1387-1391	file	
7-112	1392-1398	system	
7-113	1399-1405	backup	
7-114	1406-1409	and	
7-115	1410-1414	then	
7-116	1415-1421	replay	
7-117	1422-1426	from	
7-118	1427-1430	the	
7-119	1431-1440	backed-up	
7-120	1441-1444	WAL	
7-121	1445-1450	files	
7-122	1451-1453	to	
7-123	1454-1459	bring	
7-124	1460-1463	the	
7-125	1464-1470	system	
7-126	1471-1473	to	
7-127	1474-1475	a	
7-128	1476-1483	current	
7-129	1484-1489	state	
7-130	1489-1490	.	
7-131	1491-1495	This	
7-132	1496-1504	approach	
7-133	1505-1507	is	
7-134	1508-1512	more	
7-135	1513-1520	complex	
7-136	1521-1523	to	
7-137	1524-1534	administer	
7-138	1535-1539	than	
7-139	1540-1546	either	
7-140	1547-1549	of	
7-141	1550-1553	the	
7-142	1554-1562	previous	
7-143	1563-1573	approaches	
7-144	1573-1574	,	
7-145	1575-1578	but	
7-146	1579-1581	it	
7-147	1582-1585	has	
7-148	1586-1590	some	
7-149	1591-1602	significant	
7-150	1603-1611	benefits	
7-151	1611-1612	:	
7-152	1613-1615	We	
7-153	1616-1618	do	
7-154	1619-1622	not	
7-155	1623-1627	need	
7-156	1628-1629	a	
7-157	1630-1639	perfectly	
7-158	1640-1650	consistent	
7-159	1651-1655	file	
7-160	1656-1662	system	
7-161	1663-1669	backup	
7-162	1670-1672	as	
7-163	1673-1676	the	
7-164	1677-1685	starting	
7-165	1686-1691	point	
7-166	1691-1692	.	
7-167	1693-1696	Any	
7-168	1697-1705	internal	
7-169	1706-1719	inconsistency	
7-170	1720-1722	in	
7-171	1723-1726	the	
7-172	1727-1733	backup	
7-173	1734-1738	will	
7-174	1739-1741	be	
7-175	1742-1751	corrected	
7-176	1752-1754	by	
7-177	1755-1758	log	
7-178	1759-1765	replay	
7-179	1766-1767	(	
7-180	1767-1771	this	
7-181	1772-1774	is	
7-182	1775-1778	not	
7-183	1779-1792	significantly	
7-184	1793-1802	different	
7-185	1803-1807	from	
7-186	1808-1812	what	
7-187	1813-1820	happens	
7-188	1821-1827	during	
7-189	1828-1833	crash	
7-190	1834-1842	recovery	
7-191	1842-1843	)	
7-192	1843-1844	.	
7-193	1845-1847	So	
7-194	1848-1850	we	
7-195	1851-1853	do	
7-196	1854-1857	not	
7-197	1858-1862	need	
7-198	1863-1864	a	
7-199	1865-1869	file	
7-200	1870-1876	system	
7-201	1877-1885	snapshot	
7-202	1886-1896	capability	
7-203	1896-1897	,	
7-204	1898-1902	just	
7-205	1903-1906	tar	
7-206	1907-1909	or	
7-207	1910-1911	a	
7-208	1912-1919	similar	
7-209	1920-1929	archiving	
7-210	1930-1934	tool	
7-211	1934-1935	.	

#Text=Since we can combine an indefinitely long sequence of WAL files for replay, continuous backup can be achieved simply by continuing to archive the WAL files. This is particularly valuable for large databases, where it might not be convenient to take a full backup frequently. It is not necessary to replay the WAL entries all the way to the end. We could stop the replay at any point and have a consistent snapshot of the database as it was at that time. Thus, this technique supports point-in-time recovery: it is possible to restore the database to its state at any time since your base backup was taken.
8-1	1936-1941	Since	
8-2	1942-1944	we	
8-3	1945-1948	can	
8-4	1949-1956	combine	
8-5	1957-1959	an	
8-6	1960-1972	indefinitely	
8-7	1973-1977	long	
8-8	1978-1986	sequence	
8-9	1987-1989	of	
8-10	1990-1993	WAL	
8-11	1994-1999	files	
8-12	2000-2003	for	
8-13	2004-2010	replay	
8-14	2010-2011	,	
8-15	2012-2022	continuous	
8-16	2023-2029	backup	
8-17	2030-2033	can	
8-18	2034-2036	be	
8-19	2037-2045	achieved	
8-20	2046-2052	simply	
8-21	2053-2055	by	
8-22	2056-2066	continuing	
8-23	2067-2069	to	
8-24	2070-2077	archive	
8-25	2078-2081	the	
8-26	2082-2085	WAL	
8-27	2086-2091	files	
8-28	2091-2092	.	
8-29	2093-2097	This	
8-30	2098-2100	is	
8-31	2101-2113	particularly	
8-32	2114-2122	valuable	
8-33	2123-2126	for	
8-34	2127-2132	large	
8-35	2133-2142	databases	
8-36	2142-2143	,	
8-37	2144-2149	where	
8-38	2150-2152	it	
8-39	2153-2158	might	
8-40	2159-2162	not	
8-41	2163-2165	be	
8-42	2166-2176	convenient	
8-43	2177-2179	to	
8-44	2180-2184	take	
8-45	2185-2186	a	
8-46	2187-2191	full	
8-47	2192-2198	backup	
8-48	2199-2209	frequently	
8-49	2209-2210	.	
8-50	2211-2213	It	
8-51	2214-2216	is	
8-52	2217-2220	not	
8-53	2221-2230	necessary	
8-54	2231-2233	to	
8-55	2234-2240	replay	
8-56	2241-2244	the	
8-57	2245-2248	WAL	
8-58	2249-2256	entries	
8-59	2257-2260	all	
8-60	2261-2264	the	
8-61	2265-2268	way	
8-62	2269-2271	to	
8-63	2272-2275	the	
8-64	2276-2279	end	
8-65	2279-2280	.	
8-66	2281-2283	We	
8-67	2284-2289	could	
8-68	2290-2294	stop	
8-69	2295-2298	the	
8-70	2299-2305	replay	
8-71	2306-2308	at	
8-72	2309-2312	any	
8-73	2313-2318	point	
8-74	2319-2322	and	
8-75	2323-2327	have	
8-76	2328-2329	a	
8-77	2330-2340	consistent	
8-78	2341-2349	snapshot	
8-79	2350-2352	of	
8-80	2353-2356	the	
8-81	2357-2365	database	
8-82	2366-2368	as	
8-83	2369-2371	it	
8-84	2372-2375	was	
8-85	2376-2378	at	
8-86	2379-2383	that	
8-87	2384-2388	time	
8-88	2388-2389	.	
8-89	2390-2394	Thus	
8-90	2394-2395	,	
8-91	2396-2400	this	
8-92	2401-2410	technique	
8-93	2411-2419	supports	
8-94	2420-2433	point-in-time	
8-95	2434-2442	recovery	
8-96	2442-2443	:	
8-97	2444-2446	it	
8-98	2447-2449	is	
8-99	2450-2458	possible	
8-100	2459-2461	to	
8-101	2462-2469	restore	
8-102	2470-2473	the	
8-103	2474-2482	database	
8-104	2483-2485	to	
8-105	2486-2489	its	
8-106	2490-2495	state	
8-107	2496-2498	at	
8-108	2499-2502	any	
8-109	2503-2507	time	
8-110	2508-2513	since	
8-111	2514-2518	your	
8-112	2519-2523	base	
8-113	2524-2530	backup	
8-114	2531-2534	was	
8-115	2535-2540	taken	
8-116	2540-2541	.	

#Text=If we continuously feed the series of WAL files to another machine that has been loaded with the same base backup file, we have a warm standby system: at any point we can bring up the second machine and it will have a nearly-current copy of the database. Note pg_dump and pg_dumpall do not produce file-system-level backups and cannot be used as part of a continuous-archiving solution. Such dumps are logical and do not contain enough information to be used by WAL replay.
9-1	2542-2544	If	
9-2	2545-2547	we	
9-3	2548-2560	continuously	
9-4	2561-2565	feed	
9-5	2566-2569	the	
9-6	2570-2576	series	
9-7	2577-2579	of	
9-8	2580-2583	WAL	
9-9	2584-2589	files	
9-10	2590-2592	to	
9-11	2593-2600	another	
9-12	2601-2608	machine	
9-13	2609-2613	that	
9-14	2614-2617	has	
9-15	2618-2622	been	
9-16	2623-2629	loaded	
9-17	2630-2634	with	
9-18	2635-2638	the	
9-19	2639-2643	same	
9-20	2644-2648	base	
9-21	2649-2655	backup	
9-22	2656-2660	file	
9-23	2660-2661	,	
9-24	2662-2664	we	
9-25	2665-2669	have	
9-26	2670-2671	a	
9-27	2672-2676	warm	
9-28	2677-2684	standby	
9-29	2685-2691	system	
9-30	2691-2692	:	
9-31	2693-2695	at	
9-32	2696-2699	any	
9-33	2700-2705	point	
9-34	2706-2708	we	
9-35	2709-2712	can	
9-36	2713-2718	bring	
9-37	2719-2721	up	
9-38	2722-2725	the	
9-39	2726-2732	second	
9-40	2733-2740	machine	
9-41	2741-2744	and	
9-42	2745-2747	it	
9-43	2748-2752	will	
9-44	2753-2757	have	
9-45	2758-2759	a	
9-46	2760-2774	nearly-current	
9-47	2775-2779	copy	
9-48	2780-2782	of	
9-49	2783-2786	the	
9-50	2787-2795	database	
9-51	2795-2796	.	
9-52	2797-2801	Note	
9-53	2802-2809	pg_dump	
9-54	2810-2813	and	
9-55	2814-2824	pg_dumpall	
9-56	2825-2827	do	
9-57	2828-2831	not	
9-58	2832-2839	produce	
9-59	2840-2857	file-system-level	
9-60	2858-2865	backups	
9-61	2866-2869	and	
9-62	2870-2876	cannot	
9-63	2877-2879	be	
9-64	2880-2884	used	
9-65	2885-2887	as	
9-66	2888-2892	part	
9-67	2893-2895	of	
9-68	2896-2897	a	
9-69	2898-2918	continuous-archiving	
9-70	2919-2927	solution	
9-71	2927-2928	.	
9-72	2929-2933	Such	
9-73	2934-2939	dumps	
9-74	2940-2943	are	
9-75	2944-2951	logical	
9-76	2952-2955	and	
9-77	2956-2958	do	
9-78	2959-2962	not	
9-79	2963-2970	contain	
9-80	2971-2977	enough	
9-81	2978-2989	information	
9-82	2990-2992	to	
9-83	2993-2995	be	
9-84	2996-3000	used	
9-85	3001-3003	by	
9-86	3004-3007	WAL	
9-87	3008-3014	replay	
9-88	3014-3015	.	

#Text=As with the plain file-system-backup technique, this method can only support restoration of an entire database cluster, not a subset. Also, it requires a lot of archival storage: the base backup might be bulky, and a busy system will generate many megabytes of WAL traffic that have to be archived. Still, it is the preferred backup technique in many situations where high reliability is needed. To recover successfully using continuous archiving (also called “online backup” by many database vendors), you need a continuous sequence of archived WAL files that extends back at least as far as the start time of your backup. So to get started, you should set up and test your procedure for archiving WAL files before you take your first base backup. Accordingly, we first discuss the mechanics of archiving WAL files.
10-1	3016-3018	As	
10-2	3019-3023	with	
10-3	3024-3027	the	
10-4	3028-3033	plain	
10-5	3034-3052	file-system-backup	
10-6	3053-3062	technique	
10-7	3062-3063	,	
10-8	3064-3068	this	
10-9	3069-3075	method	
10-10	3076-3079	can	
10-11	3080-3084	only	
10-12	3085-3092	support	
10-13	3093-3104	restoration	
10-14	3105-3107	of	
10-15	3108-3110	an	
10-16	3111-3117	entire	
10-17	3118-3126	database	
10-18	3127-3134	cluster	
10-19	3134-3135	,	
10-20	3136-3139	not	
10-21	3140-3141	a	
10-22	3142-3148	subset	
10-23	3148-3149	.	
10-24	3150-3154	Also	
10-25	3154-3155	,	
10-26	3156-3158	it	
10-27	3159-3167	requires	
10-28	3168-3169	a	
10-29	3170-3173	lot	
10-30	3174-3176	of	
10-31	3177-3185	archival	
10-32	3186-3193	storage	
10-33	3193-3194	:	
10-34	3195-3198	the	
10-35	3199-3203	base	
10-36	3204-3210	backup	
10-37	3211-3216	might	
10-38	3217-3219	be	
10-39	3220-3225	bulky	
10-40	3225-3226	,	
10-41	3227-3230	and	
10-42	3231-3232	a	
10-43	3233-3237	busy	
10-44	3238-3244	system	
10-45	3245-3249	will	
10-46	3250-3258	generate	
10-47	3259-3263	many	
10-48	3264-3273	megabytes	
10-49	3274-3276	of	
10-50	3277-3280	WAL	
10-51	3281-3288	traffic	
10-52	3289-3293	that	
10-53	3294-3298	have	
10-54	3299-3301	to	
10-55	3302-3304	be	
10-56	3305-3313	archived	
10-57	3313-3314	.	
10-58	3315-3320	Still	
10-59	3320-3321	,	
10-60	3322-3324	it	
10-61	3325-3327	is	
10-62	3328-3331	the	
10-63	3332-3341	preferred	
10-64	3342-3348	backup	
10-65	3349-3358	technique	
10-66	3359-3361	in	
10-67	3362-3366	many	
10-68	3367-3377	situations	
10-69	3378-3383	where	
10-70	3384-3388	high	
10-71	3389-3400	reliability	
10-72	3401-3403	is	
10-73	3404-3410	needed	
10-74	3410-3411	.	
10-75	3412-3414	To	
10-76	3415-3422	recover	
10-77	3423-3435	successfully	
10-78	3436-3441	using	
10-79	3442-3452	continuous	
10-80	3453-3462	archiving	
10-81	3463-3464	(	
10-82	3464-3468	also	
10-83	3469-3475	called	
10-84	3476-3477	“	
10-85	3477-3483	online	
10-86	3484-3490	backup	
10-87	3490-3491	”	
10-88	3492-3494	by	
10-89	3495-3499	many	
10-90	3500-3508	database	
10-91	3509-3516	vendors	
10-92	3516-3517	)	
10-93	3517-3518	,	
10-94	3519-3522	you	
10-95	3523-3527	need	
10-96	3528-3529	a	
10-97	3530-3540	continuous	
10-98	3541-3549	sequence	
10-99	3550-3552	of	
10-100	3553-3561	archived	
10-101	3562-3565	WAL	
10-102	3566-3571	files	
10-103	3572-3576	that	
10-104	3577-3584	extends	
10-105	3585-3589	back	
10-106	3590-3592	at	
10-107	3593-3598	least	
10-108	3599-3601	as	
10-109	3602-3605	far	
10-110	3606-3608	as	
10-111	3609-3612	the	
10-112	3613-3618	start	
10-113	3619-3623	time	
10-114	3624-3626	of	
10-115	3627-3631	your	
10-116	3632-3638	backup	
10-117	3638-3639	.	
10-118	3640-3642	So	
10-119	3643-3645	to	
10-120	3646-3649	get	
10-121	3650-3657	started	
10-122	3657-3658	,	
10-123	3659-3662	you	
10-124	3663-3669	should	
10-125	3670-3673	set	
10-126	3674-3676	up	
10-127	3677-3680	and	
10-128	3681-3685	test	
10-129	3686-3690	your	
10-130	3691-3700	procedure	
10-131	3701-3704	for	
10-132	3705-3714	archiving	
10-133	3715-3718	WAL	
10-134	3719-3724	files	
10-135	3725-3731	before	
10-136	3732-3735	you	
10-137	3736-3740	take	
10-138	3741-3745	your	
10-139	3746-3751	first	
10-140	3752-3756	base	
10-141	3757-3763	backup	
10-142	3763-3764	.	
10-143	3765-3776	Accordingly	
10-144	3776-3777	,	
10-145	3778-3780	we	
10-146	3781-3786	first	
10-147	3787-3794	discuss	
10-148	3795-3798	the	
10-149	3799-3808	mechanics	
10-150	3809-3811	of	
10-151	3812-3821	archiving	
10-152	3822-3825	WAL	
10-153	3826-3831	files	
10-154	3831-3832	.	

#Text=25.3.1. Setting Up WAL Archiving
11-1	3833-3839	25.3.1	
11-2	3839-3840	.	
11-3	3840-3841	 	
11-4	3841-3848	Setting	
11-5	3849-3851	Up	
11-6	3852-3855	WAL	
11-7	3856-3865	Archiving	

#Text=In an abstract sense, a running PostgreSQL system produces an indefinitely long sequence of WAL records. The system physically divides this sequence into WAL segment files, which are normally 16MB apiece (although the segment size can be altered during initdb). The segment files are given numeric names that reflect their position in the abstract WAL sequence. When not using WAL archiving, the system normally creates just a few segment files and then “recycles” them by renaming no-longer-needed segment files to higher segment numbers. It's assumed that segment files whose contents precede the last checkpoint are no longer of interest and can be recycled.
12-1	3866-3868	In	
12-2	3869-3871	an	
12-3	3872-3880	abstract	
12-4	3881-3886	sense	
12-5	3886-3887	,	
12-6	3888-3889	a	
12-7	3890-3897	running	
12-8	3898-3908	PostgreSQL	
12-9	3909-3915	system	
12-10	3916-3924	produces	
12-11	3925-3927	an	
12-12	3928-3940	indefinitely	
12-13	3941-3945	long	
12-14	3946-3954	sequence	
12-15	3955-3957	of	
12-16	3958-3961	WAL	
12-17	3962-3969	records	
12-18	3969-3970	.	
12-19	3971-3974	The	
12-20	3975-3981	system	
12-21	3982-3992	physically	
12-22	3993-4000	divides	
12-23	4001-4005	this	
12-24	4006-4014	sequence	
12-25	4015-4019	into	
12-26	4020-4023	WAL	
12-27	4024-4031	segment	
12-28	4032-4037	files	
12-29	4037-4038	,	
12-30	4039-4044	which	
12-31	4045-4048	are	
12-32	4049-4057	normally	
12-33	4058-4062	16MB	
12-34	4063-4069	apiece	
12-35	4070-4071	(	
12-36	4071-4079	although	
12-37	4080-4083	the	
12-38	4084-4091	segment	
12-39	4092-4096	size	
12-40	4097-4100	can	
12-41	4101-4103	be	
12-42	4104-4111	altered	
12-43	4112-4118	during	
12-44	4119-4125	initdb	
12-45	4125-4126	)	
12-46	4126-4127	.	
12-47	4128-4131	The	
12-48	4132-4139	segment	
12-49	4140-4145	files	
12-50	4146-4149	are	
12-51	4150-4155	given	
12-52	4156-4163	numeric	
12-53	4164-4169	names	
12-54	4170-4174	that	
12-55	4175-4182	reflect	
12-56	4183-4188	their	
12-57	4189-4197	position	
12-58	4198-4200	in	
12-59	4201-4204	the	
12-60	4205-4213	abstract	
12-61	4214-4217	WAL	
12-62	4218-4226	sequence	
12-63	4226-4227	.	
12-64	4228-4232	When	
12-65	4233-4236	not	
12-66	4237-4242	using	
12-67	4243-4246	WAL	
12-68	4247-4256	archiving	
12-69	4256-4257	,	
12-70	4258-4261	the	
12-71	4262-4268	system	
12-72	4269-4277	normally	
12-73	4278-4285	creates	
12-74	4286-4290	just	
12-75	4291-4292	a	
12-76	4293-4296	few	
12-77	4297-4304	segment	
12-78	4305-4310	files	
12-79	4311-4314	and	
12-80	4315-4319	then	
12-81	4320-4321	“	
12-82	4321-4329	recycles	
12-83	4329-4330	”	
12-84	4331-4335	them	
12-85	4336-4338	by	
12-86	4339-4347	renaming	
12-87	4348-4364	no-longer-needed	
12-88	4365-4372	segment	
12-89	4373-4378	files	
12-90	4379-4381	to	
12-91	4382-4388	higher	
12-92	4389-4396	segment	
12-93	4397-4404	numbers	
12-94	4404-4405	.	
12-95	4406-4410	It's	
12-96	4411-4418	assumed	
12-97	4419-4423	that	
12-98	4424-4431	segment	
12-99	4432-4437	files	
12-100	4438-4443	whose	
12-101	4444-4452	contents	
12-102	4453-4460	precede	
12-103	4461-4464	the	
12-104	4465-4469	last	
12-105	4470-4480	checkpoint	
12-106	4481-4484	are	
12-107	4485-4487	no	
12-108	4488-4494	longer	
12-109	4495-4497	of	
12-110	4498-4506	interest	
12-111	4507-4510	and	
12-112	4511-4514	can	
12-113	4515-4517	be	
12-114	4518-4526	recycled	
12-115	4526-4527	.	

#Text=When archiving WAL data, we need to capture the contents of each segment file once it is filled, and save that data somewhere before the segment file is recycled for reuse. Depending on the application and the available hardware, there could be many different ways of “saving the data somewhere”: we could copy the segment files to an NFS-mounted directory on another machine, write them onto a tape drive (ensuring that you have a way of identifying the original name of each file), or batch them together and burn them onto CDs, or something else entirely. To provide the database administrator with flexibility, PostgreSQL tries not to make any assumptions about how the archiving will be done. Instead, PostgreSQL lets the administrator specify a shell command to be executed to copy a completed segment file to wherever it needs to go. The command could be as simple as a cp, or it could invoke a complex shell script — it's all up to you.
13-1	4528-4532	When	
13-2	4533-4542	archiving	
13-3	4543-4546	WAL	
13-4	4547-4551	data	
13-5	4551-4552	,	
13-6	4553-4555	we	
13-7	4556-4560	need	
13-8	4561-4563	to	
13-9	4564-4571	capture	
13-10	4572-4575	the	
13-11	4576-4584	contents	
13-12	4585-4587	of	
13-13	4588-4592	each	
13-14	4593-4600	segment	
13-15	4601-4605	file	
13-16	4606-4610	once	
13-17	4611-4613	it	
13-18	4614-4616	is	
13-19	4617-4623	filled	
13-20	4623-4624	,	
13-21	4625-4628	and	
13-22	4629-4633	save	
13-23	4634-4638	that	
13-24	4639-4643	data	
13-25	4644-4653	somewhere	
13-26	4654-4660	before	
13-27	4661-4664	the	
13-28	4665-4672	segment	
13-29	4673-4677	file	
13-30	4678-4680	is	
13-31	4681-4689	recycled	
13-32	4690-4693	for	
13-33	4694-4699	reuse	
13-34	4699-4700	.	
13-35	4701-4710	Depending	
13-36	4711-4713	on	
13-37	4714-4717	the	
13-38	4718-4729	application	
13-39	4730-4733	and	
13-40	4734-4737	the	
13-41	4738-4747	available	
13-42	4748-4756	hardware	
13-43	4756-4757	,	
13-44	4758-4763	there	
13-45	4764-4769	could	
13-46	4770-4772	be	
13-47	4773-4777	many	
13-48	4778-4787	different	
13-49	4788-4792	ways	
13-50	4793-4795	of	
13-51	4796-4797	“	
13-52	4797-4803	saving	
13-53	4804-4807	the	
13-54	4808-4812	data	
13-55	4813-4822	somewhere	
13-56	4822-4823	”	
13-57	4823-4824	:	
13-58	4825-4827	we	
13-59	4828-4833	could	
13-60	4834-4838	copy	
13-61	4839-4842	the	
13-62	4843-4850	segment	
13-63	4851-4856	files	
13-64	4857-4859	to	
13-65	4860-4862	an	
13-66	4863-4874	NFS-mounted	
13-67	4875-4884	directory	
13-68	4885-4887	on	
13-69	4888-4895	another	
13-70	4896-4903	machine	
13-71	4903-4904	,	
13-72	4905-4910	write	
13-73	4911-4915	them	
13-74	4916-4920	onto	
13-75	4921-4922	a	
13-76	4923-4927	tape	
13-77	4928-4933	drive	
13-78	4934-4935	(	
13-79	4935-4943	ensuring	
13-80	4944-4948	that	
13-81	4949-4952	you	
13-82	4953-4957	have	
13-83	4958-4959	a	
13-84	4960-4963	way	
13-85	4964-4966	of	
13-86	4967-4978	identifying	
13-87	4979-4982	the	
13-88	4983-4991	original	
13-89	4992-4996	name	
13-90	4997-4999	of	
13-91	5000-5004	each	
13-92	5005-5009	file	
13-93	5009-5010	)	
13-94	5010-5011	,	
13-95	5012-5014	or	
13-96	5015-5020	batch	
13-97	5021-5025	them	
13-98	5026-5034	together	
13-99	5035-5038	and	
13-100	5039-5043	burn	
13-101	5044-5048	them	
13-102	5049-5053	onto	
13-103	5054-5057	CDs	
13-104	5057-5058	,	
13-105	5059-5061	or	
13-106	5062-5071	something	
13-107	5072-5076	else	
13-108	5077-5085	entirely	
13-109	5085-5086	.	
13-110	5087-5089	To	
13-111	5090-5097	provide	
13-112	5098-5101	the	
13-113	5102-5110	database	
13-114	5111-5124	administrator	
13-115	5125-5129	with	
13-116	5130-5141	flexibility	
13-117	5141-5142	,	
13-118	5143-5153	PostgreSQL	
13-119	5154-5159	tries	
13-120	5160-5163	not	
13-121	5164-5166	to	
13-122	5167-5171	make	
13-123	5172-5175	any	
13-124	5176-5187	assumptions	
13-125	5188-5193	about	
13-126	5194-5197	how	
13-127	5198-5201	the	
13-128	5202-5211	archiving	
13-129	5212-5216	will	
13-130	5217-5219	be	
13-131	5220-5224	done	
13-132	5224-5225	.	
13-133	5226-5233	Instead	
13-134	5233-5234	,	
13-135	5235-5245	PostgreSQL	
13-136	5246-5250	lets	
13-137	5251-5254	the	
13-138	5255-5268	administrator	
13-139	5269-5276	specify	
13-140	5277-5278	a	
13-141	5279-5284	shell	
13-142	5285-5292	command	
13-143	5293-5295	to	
13-144	5296-5298	be	
13-145	5299-5307	executed	
13-146	5308-5310	to	
13-147	5311-5315	copy	
13-148	5316-5317	a	
13-149	5318-5327	completed	
13-150	5328-5335	segment	
13-151	5336-5340	file	
13-152	5341-5343	to	
13-153	5344-5352	wherever	
13-154	5353-5355	it	
13-155	5356-5361	needs	
13-156	5362-5364	to	
13-157	5365-5367	go	
13-158	5367-5368	.	
13-159	5369-5372	The	
13-160	5373-5380	command	
13-161	5381-5386	could	
13-162	5387-5389	be	
13-163	5390-5392	as	
13-164	5393-5399	simple	
13-165	5400-5402	as	
13-166	5403-5404	a	
13-167	5405-5407	cp	
13-168	5407-5408	,	
13-169	5409-5411	or	
13-170	5412-5414	it	
13-171	5415-5420	could	
13-172	5421-5427	invoke	
13-173	5428-5429	a	
13-174	5430-5437	complex	
13-175	5438-5443	shell	
13-176	5444-5450	script	
13-177	5451-5452	—	
13-178	5453-5457	it's	
13-179	5458-5461	all	
13-180	5462-5464	up	
13-181	5465-5467	to	
13-182	5468-5471	you	
13-183	5471-5472	.	

#Text=To enable WAL archiving, set the wal_level configuration parameter to replica or higher, archive_mode to on, and specify the shell command to use in the archive_command configuration parameter. In practice these settings will always be placed in the postgresql.conf file. In archive_command, %p is replaced by the path name of the file to archive, while %f is replaced by only the file name. (The path name is relative to the current working directory, i.e., the cluster's data directory.) Use %% if you need to embed an actual % character in the command. The simplest useful command is something like: archive_command = 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f' # Unix archive_command = 'copy "%p" "C:\\\\server\\\\archivedir\\\\%f"'
14-1	5473-5475	To	
14-2	5476-5482	enable	
14-3	5483-5486	WAL	
14-4	5487-5496	archiving	
14-5	5496-5497	,	
14-6	5498-5501	set	
14-7	5502-5505	the	
14-8	5506-5515	wal_level	
14-9	5516-5529	configuration	
14-10	5530-5539	parameter	
14-11	5540-5542	to	
14-12	5543-5550	replica	
14-13	5551-5553	or	
14-14	5554-5560	higher	
14-15	5560-5561	,	
14-16	5562-5574	archive_mode	
14-17	5575-5577	to	
14-18	5578-5580	on	
14-19	5580-5581	,	
14-20	5582-5585	and	
14-21	5586-5593	specify	
14-22	5594-5597	the	
14-23	5598-5603	shell	
14-24	5604-5611	command	
14-25	5612-5614	to	
14-26	5615-5618	use	
14-27	5619-5621	in	
14-28	5622-5625	the	
14-29	5626-5641	archive_command	
14-30	5642-5655	configuration	
14-31	5656-5665	parameter	
14-32	5665-5666	.	
14-33	5667-5669	In	
14-34	5670-5678	practice	
14-35	5679-5684	these	
14-36	5685-5693	settings	
14-37	5694-5698	will	
14-38	5699-5705	always	
14-39	5706-5708	be	
14-40	5709-5715	placed	
14-41	5716-5718	in	
14-42	5719-5722	the	
14-43	5723-5738	postgresql.conf	
14-44	5739-5743	file	
14-45	5743-5744	.	
14-46	5745-5747	In	
14-47	5748-5763	archive_command	
14-48	5763-5764	,	
14-49	5765-5766	%	
14-50	5766-5767	p	
14-51	5768-5770	is	
14-52	5771-5779	replaced	
14-53	5780-5782	by	
14-54	5783-5786	the	
14-55	5787-5791	path	
14-56	5792-5796	name	
14-57	5797-5799	of	
14-58	5800-5803	the	
14-59	5804-5808	file	
14-60	5809-5811	to	
14-61	5812-5819	archive	
14-62	5819-5820	,	
14-63	5821-5826	while	
14-64	5827-5828	%	
14-65	5828-5829	f	
14-66	5830-5832	is	
14-67	5833-5841	replaced	
14-68	5842-5844	by	
14-69	5845-5849	only	
14-70	5850-5853	the	
14-71	5854-5858	file	
14-72	5859-5863	name	
14-73	5863-5864	.	
14-74	5865-5866	(	
14-75	5866-5869	The	
14-76	5870-5874	path	
14-77	5875-5879	name	
14-78	5880-5882	is	
14-79	5883-5891	relative	
14-80	5892-5894	to	
14-81	5895-5898	the	
14-82	5899-5906	current	
14-83	5907-5914	working	
14-84	5915-5924	directory	
14-85	5924-5925	,	
14-86	5926-5929	i.e	
14-87	5929-5930	.	
14-88	5930-5931	,	
14-89	5932-5935	the	
14-90	5936-5945	cluster's	
14-91	5946-5950	data	
14-92	5951-5960	directory	
14-93	5960-5961	.	
14-94	5961-5962	)	
14-95	5963-5966	Use	
14-96	5967-5968	%	
14-97	5968-5969	%	
14-98	5970-5972	if	
14-99	5973-5976	you	
14-100	5977-5981	need	
14-101	5982-5984	to	
14-102	5985-5990	embed	
14-103	5991-5993	an	
14-104	5994-6000	actual	
14-105	6001-6002	%	
14-106	6003-6012	character	
14-107	6013-6015	in	
14-108	6016-6019	the	
14-109	6020-6027	command	
14-110	6027-6028	.	
14-111	6029-6032	The	
14-112	6033-6041	simplest	
14-113	6042-6048	useful	
14-114	6049-6056	command	
14-115	6057-6059	is	
14-116	6060-6069	something	
14-117	6070-6074	like	
14-118	6074-6075	:	
14-119	6076-6091	archive_command	
14-120	6092-6093	=	
14-121	6094-6095	'	
14-122	6095-6099	test	
14-123	6100-6101	!	
14-124	6102-6103	-	
14-125	6103-6104	f	
14-126	6105-6106	/	
14-127	6106-6109	mnt	
14-128	6109-6110	/	
14-129	6110-6116	server	
14-130	6116-6117	/	
14-131	6117-6127	archivedir	
14-132	6127-6128	/	
14-133	6128-6129	%	
14-134	6129-6130	f	
14-135	6131-6132	&	
14-136	6132-6133	&	
14-137	6134-6136	cp	
14-138	6137-6138	%	
14-139	6138-6139	p	
14-140	6140-6141	/	
14-141	6141-6144	mnt	
14-142	6144-6145	/	
14-143	6145-6151	server	
14-144	6151-6152	/	
14-145	6152-6162	archivedir	
14-146	6162-6163	/	
14-147	6163-6164	%	
14-148	6164-6165	f	
14-149	6165-6166	'	
14-150	6167-6168	#	
14-151	6169-6173	Unix	
14-152	6174-6189	archive_command	
14-153	6190-6191	=	
14-154	6192-6193	'	
14-155	6193-6197	copy	
14-156	6198-6199	"	
14-157	6199-6200	%	
14-158	6200-6201	p	
14-159	6201-6202	"	
14-160	6203-6204	"	
14-161	6204-6205	C	
14-162	6205-6206	:	
14-163	6206-6207	\	
14-164	6207-6208	\	
14-165	6208-6214	server	
14-166	6214-6215	\	
14-167	6215-6216	\	
14-168	6216-6226	archivedir	
14-169	6226-6227	\	
14-170	6227-6228	\	
14-171	6228-6229	%	
14-172	6229-6230	f	
14-173	6230-6231	"	
14-174	6231-6232	'	

#Text=# Windows which will copy archivable WAL segments to the directory /mnt/server/archivedir. (This is an example, not a recommendation, and might not work on all platforms.) After the %p and %f parameters have been replaced, the actual command executed might look like this:
15-1	6233-6234	#	
15-2	6235-6242	Windows	
15-3	6243-6248	which	
15-4	6249-6253	will	
15-5	6254-6258	copy	
15-6	6259-6269	archivable	
15-7	6270-6273	WAL	
15-8	6274-6282	segments	
15-9	6283-6285	to	
15-10	6286-6289	the	
15-11	6290-6299	directory	
15-12	6300-6301	/	
15-13	6301-6304	mnt	
15-14	6304-6305	/	
15-15	6305-6311	server	
15-16	6311-6312	/	
15-17	6312-6322	archivedir	
15-18	6322-6323	.	
15-19	6324-6325	(	
15-20	6325-6329	This	
15-21	6330-6332	is	
15-22	6333-6335	an	
15-23	6336-6343	example	
15-24	6343-6344	,	
15-25	6345-6348	not	
15-26	6349-6350	a	
15-27	6351-6365	recommendation	
15-28	6365-6366	,	
15-29	6367-6370	and	
15-30	6371-6376	might	
15-31	6377-6380	not	
15-32	6381-6385	work	
15-33	6386-6388	on	
15-34	6389-6392	all	
15-35	6393-6402	platforms	
15-36	6402-6403	.	
15-37	6403-6404	)	
15-38	6405-6410	After	
15-39	6411-6414	the	
15-40	6415-6416	%	
15-41	6416-6417	p	
15-42	6418-6421	and	
15-43	6422-6423	%	
15-44	6423-6424	f	
15-45	6425-6435	parameters	
15-46	6436-6440	have	
15-47	6441-6445	been	
15-48	6446-6454	replaced	
15-49	6454-6455	,	
15-50	6456-6459	the	
15-51	6460-6466	actual	
15-52	6467-6474	command	
15-53	6475-6483	executed	
15-54	6484-6489	might	
15-55	6490-6494	look	
15-56	6495-6499	like	
15-57	6500-6504	this	
15-58	6504-6505	:	

#Text=test ! -f /mnt/server/archivedir/00000001000000A900000065 && cp pg_wal/00000001000000A900000065 /mnt/server/archivedir/00000001000000A900000065 A similar command will be generated for each new file to be archived. The archive command will be executed under the ownership of the same user that the PostgreSQL server is running as. Since the series of WAL files being archived contains effectively everything in your database, you will want to be sure that the archived data is protected from prying eyes; for example, archive into a directory that does not have group or world read access.
16-1	6506-6510	test	
16-2	6511-6512	!	
16-3	6513-6514	-	
16-4	6514-6515	f	
16-5	6516-6517	/	
16-6	6517-6520	mnt	
16-7	6520-6521	/	
16-8	6521-6527	server	
16-9	6527-6528	/	
16-10	6528-6538	archivedir	
16-11	6538-6539	/	
16-12	6539-6563	00000001000000A900000065	
16-13	6564-6565	&	
16-14	6565-6566	&	
16-15	6567-6569	cp	
16-16	6570-6576	pg_wal	
16-17	6576-6577	/	
16-18	6577-6601	00000001000000A900000065	
16-19	6602-6603	/	
16-20	6603-6606	mnt	
16-21	6606-6607	/	
16-22	6607-6613	server	
16-23	6613-6614	/	
16-24	6614-6624	archivedir	
16-25	6624-6625	/	
16-26	6625-6649	00000001000000A900000065	
16-27	6650-6651	A	
16-28	6652-6659	similar	
16-29	6660-6667	command	
16-30	6668-6672	will	
16-31	6673-6675	be	
16-32	6676-6685	generated	
16-33	6686-6689	for	
16-34	6690-6694	each	
16-35	6695-6698	new	
16-36	6699-6703	file	
16-37	6704-6706	to	
16-38	6707-6709	be	
16-39	6710-6718	archived	
16-40	6718-6719	.	
16-41	6720-6723	The	
16-42	6724-6731	archive	
16-43	6732-6739	command	
16-44	6740-6744	will	
16-45	6745-6747	be	
16-46	6748-6756	executed	
16-47	6757-6762	under	
16-48	6763-6766	the	
16-49	6767-6776	ownership	
16-50	6777-6779	of	
16-51	6780-6783	the	
16-52	6784-6788	same	
16-53	6789-6793	user	
16-54	6794-6798	that	
16-55	6799-6802	the	
16-56	6803-6813	PostgreSQL	
16-57	6814-6820	server	
16-58	6821-6823	is	
16-59	6824-6831	running	
16-60	6832-6834	as	
16-61	6834-6835	.	
16-62	6836-6841	Since	
16-63	6842-6845	the	
16-64	6846-6852	series	
16-65	6853-6855	of	
16-66	6856-6859	WAL	
16-67	6860-6865	files	
16-68	6866-6871	being	
16-69	6872-6880	archived	
16-70	6881-6889	contains	
16-71	6890-6901	effectively	
16-72	6902-6912	everything	
16-73	6913-6915	in	
16-74	6916-6920	your	
16-75	6921-6929	database	
16-76	6929-6930	,	
16-77	6931-6934	you	
16-78	6935-6939	will	
16-79	6940-6944	want	
16-80	6945-6947	to	
16-81	6948-6950	be	
16-82	6951-6955	sure	
16-83	6956-6960	that	
16-84	6961-6964	the	
16-85	6965-6973	archived	
16-86	6974-6978	data	
16-87	6979-6981	is	
16-88	6982-6991	protected	
16-89	6992-6996	from	
16-90	6997-7003	prying	
16-91	7004-7008	eyes	
16-92	7008-7009	;	
16-93	7010-7013	for	
16-94	7014-7021	example	
16-95	7021-7022	,	
16-96	7023-7030	archive	
16-97	7031-7035	into	
16-98	7036-7037	a	
16-99	7038-7047	directory	
16-100	7048-7052	that	
16-101	7053-7057	does	
16-102	7058-7061	not	
16-103	7062-7066	have	
16-104	7067-7072	group	
16-105	7073-7075	or	
16-106	7076-7081	world	
16-107	7082-7086	read	
16-108	7087-7093	access	
16-109	7093-7094	.	

#Text=It is important that the archive command return zero exit status if and only if it succeeds. Upon getting a zero result, PostgreSQL will assume that the file has been successfully archived, and will remove or recycle it. However, a nonzero status tells PostgreSQL that the file was not archived; it will try again periodically until it succeeds. The archive command should generally be designed to refuse to overwrite any pre-existing archive file. This is an important safety feature to preserve the integrity of your archive in case of administrator error (such as sending the output of two different servers to the same archive directory).
17-1	7095-7097	It	
17-2	7098-7100	is	
17-3	7101-7110	important	
17-4	7111-7115	that	
17-5	7116-7119	the	
17-6	7120-7127	archive	
17-7	7128-7135	command	
17-8	7136-7142	return	
17-9	7143-7147	zero	
17-10	7148-7152	exit	
17-11	7153-7159	status	
17-12	7160-7162	if	
17-13	7163-7166	and	
17-14	7167-7171	only	
17-15	7172-7174	if	
17-16	7175-7177	it	
17-17	7178-7186	succeeds	
17-18	7186-7187	.	
17-19	7188-7192	Upon	
17-20	7193-7200	getting	
17-21	7201-7202	a	
17-22	7203-7207	zero	
17-23	7208-7214	result	
17-24	7214-7215	,	
17-25	7216-7226	PostgreSQL	
17-26	7227-7231	will	
17-27	7232-7238	assume	
17-28	7239-7243	that	
17-29	7244-7247	the	
17-30	7248-7252	file	
17-31	7253-7256	has	
17-32	7257-7261	been	
17-33	7262-7274	successfully	
17-34	7275-7283	archived	
17-35	7283-7284	,	
17-36	7285-7288	and	
17-37	7289-7293	will	
17-38	7294-7300	remove	
17-39	7301-7303	or	
17-40	7304-7311	recycle	
17-41	7312-7314	it	
17-42	7314-7315	.	
17-43	7316-7323	However	
17-44	7323-7324	,	
17-45	7325-7326	a	
17-46	7327-7334	nonzero	
17-47	7335-7341	status	
17-48	7342-7347	tells	
17-49	7348-7358	PostgreSQL	
17-50	7359-7363	that	
17-51	7364-7367	the	
17-52	7368-7372	file	
17-53	7373-7376	was	
17-54	7377-7380	not	
17-55	7381-7389	archived	
17-56	7389-7390	;	
17-57	7391-7393	it	
17-58	7394-7398	will	
17-59	7399-7402	try	
17-60	7403-7408	again	
17-61	7409-7421	periodically	
17-62	7422-7427	until	
17-63	7428-7430	it	
17-64	7431-7439	succeeds	
17-65	7439-7440	.	
17-66	7441-7444	The	
17-67	7445-7452	archive	
17-68	7453-7460	command	
17-69	7461-7467	should	
17-70	7468-7477	generally	
17-71	7478-7480	be	
17-72	7481-7489	designed	
17-73	7490-7492	to	
17-74	7493-7499	refuse	
17-75	7500-7502	to	
17-76	7503-7512	overwrite	
17-77	7513-7516	any	
17-78	7517-7529	pre-existing	
17-79	7530-7537	archive	
17-80	7538-7542	file	
17-81	7542-7543	.	
17-82	7544-7548	This	
17-83	7549-7551	is	
17-84	7552-7554	an	
17-85	7555-7564	important	
17-86	7565-7571	safety	
17-87	7572-7579	feature	
17-88	7580-7582	to	
17-89	7583-7591	preserve	
17-90	7592-7595	the	
17-91	7596-7605	integrity	
17-92	7606-7608	of	
17-93	7609-7613	your	
17-94	7614-7621	archive	
17-95	7622-7624	in	
17-96	7625-7629	case	
17-97	7630-7632	of	
17-98	7633-7646	administrator	
17-99	7647-7652	error	
17-100	7653-7654	(	
17-101	7654-7658	such	
17-102	7659-7661	as	
17-103	7662-7669	sending	
17-104	7670-7673	the	
17-105	7674-7680	output	
17-106	7681-7683	of	
17-107	7684-7687	two	
17-108	7688-7697	different	
17-109	7698-7705	servers	
17-110	7706-7708	to	
17-111	7709-7712	the	
17-112	7713-7717	same	
17-113	7718-7725	archive	
17-114	7726-7735	directory	
17-115	7735-7736	)	
17-116	7736-7737	.	

#Text=It is advisable to test your proposed archive command to ensure that it indeed does not overwrite an existing file, and that it returns nonzero status in this case. The example command above for Unix ensures this by including a separate test step. On some Unix platforms, cp has switches such as -i that can be used to do the same thing less verbosely, but you should not rely on these without verifying that the right exit status is returned. (In particular, GNU cp will return status zero when -i is used and the target file already exists, which is not the desired behavior.)
18-1	7738-7740	It	
18-2	7741-7743	is	
18-3	7744-7753	advisable	
18-4	7754-7756	to	
18-5	7757-7761	test	
18-6	7762-7766	your	
18-7	7767-7775	proposed	
18-8	7776-7783	archive	
18-9	7784-7791	command	
18-10	7792-7794	to	
18-11	7795-7801	ensure	
18-12	7802-7806	that	
18-13	7807-7809	it	
18-14	7810-7816	indeed	
18-15	7817-7821	does	
18-16	7822-7825	not	
18-17	7826-7835	overwrite	
18-18	7836-7838	an	
18-19	7839-7847	existing	
18-20	7848-7852	file	
18-21	7852-7853	,	
18-22	7854-7857	and	
18-23	7858-7862	that	
18-24	7863-7865	it	
18-25	7866-7873	returns	
18-26	7874-7881	nonzero	
18-27	7882-7888	status	
18-28	7889-7891	in	
18-29	7892-7896	this	
18-30	7897-7901	case	
18-31	7901-7902	.	
18-32	7903-7906	The	
18-33	7907-7914	example	
18-34	7915-7922	command	
18-35	7923-7928	above	
18-36	7929-7932	for	
18-37	7933-7937	Unix	
18-38	7938-7945	ensures	
18-39	7946-7950	this	
18-40	7951-7953	by	
18-41	7954-7963	including	
18-42	7964-7965	a	
18-43	7966-7974	separate	
18-44	7975-7979	test	
18-45	7980-7984	step	
18-46	7984-7985	.	
18-47	7986-7988	On	
18-48	7989-7993	some	
18-49	7994-7998	Unix	
18-50	7999-8008	platforms	
18-51	8008-8009	,	
18-52	8010-8012	cp	
18-53	8013-8016	has	
18-54	8017-8025	switches	
18-55	8026-8030	such	
18-56	8031-8033	as	
18-57	8034-8035	-	
18-58	8035-8036	i	
18-59	8037-8041	that	
18-60	8042-8045	can	
18-61	8046-8048	be	
18-62	8049-8053	used	
18-63	8054-8056	to	
18-64	8057-8059	do	
18-65	8060-8063	the	
18-66	8064-8068	same	
18-67	8069-8074	thing	
18-68	8075-8079	less	
18-69	8080-8089	verbosely	
18-70	8089-8090	,	
18-71	8091-8094	but	
18-72	8095-8098	you	
18-73	8099-8105	should	
18-74	8106-8109	not	
18-75	8110-8114	rely	
18-76	8115-8117	on	
18-77	8118-8123	these	
18-78	8124-8131	without	
18-79	8132-8141	verifying	
18-80	8142-8146	that	
18-81	8147-8150	the	
18-82	8151-8156	right	
18-83	8157-8161	exit	
18-84	8162-8168	status	
18-85	8169-8171	is	
18-86	8172-8180	returned	
18-87	8180-8181	.	
18-88	8182-8183	(	
18-89	8183-8185	In	
18-90	8186-8196	particular	
18-91	8196-8197	,	
18-92	8198-8201	GNU	
18-93	8202-8204	cp	
18-94	8205-8209	will	
18-95	8210-8216	return	
18-96	8217-8223	status	
18-97	8224-8228	zero	
18-98	8229-8233	when	
18-99	8234-8235	-	
18-100	8235-8236	i	
18-101	8237-8239	is	
18-102	8240-8244	used	
18-103	8245-8248	and	
18-104	8249-8252	the	
18-105	8253-8259	target	
18-106	8260-8264	file	
18-107	8265-8272	already	
18-108	8273-8279	exists	
18-109	8279-8280	,	
18-110	8281-8286	which	
18-111	8287-8289	is	
18-112	8290-8293	not	
18-113	8294-8297	the	
18-114	8298-8305	desired	
18-115	8306-8314	behavior	
18-116	8314-8315	.	
18-117	8315-8316	)	

#Text=While designing your archiving setup, consider what will happen if the archive command fails repeatedly because some aspect requires operator intervention or the archive runs out of space. For example, this could occur if you write to tape without an autochanger; when the tape fills, nothing further can be archived until the tape is swapped. You should ensure that any error condition or request to a human operator is reported appropriately so that the situation can be resolved reasonably quickly. The pg_wal/ directory will continue to fill with WAL segment files until the situation is resolved. (If the file system containing pg_wal/ fills up, PostgreSQL will do a PANIC shutdown. No committed transactions will be lost, but the database will remain offline until you free some space.) The speed of the archiving command is unimportant as long as it can keep up with the average rate at which your server generates WAL data. Normal operation continues even if the archiving process falls a little behind. If archiving falls significantly behind, this will increase the amount of data that would be lost in the event of a disaster. It will also mean that the pg_wal/ directory will contain large numbers of not-yet-archived segment files, which could eventually exceed available disk space. You are advised to monitor the archiving process to ensure that it is working as you intend.
19-1	8317-8322	While	
19-2	8323-8332	designing	
19-3	8333-8337	your	
19-4	8338-8347	archiving	
19-5	8348-8353	setup	
19-6	8353-8354	,	
19-7	8355-8363	consider	
19-8	8364-8368	what	
19-9	8369-8373	will	
19-10	8374-8380	happen	
19-11	8381-8383	if	
19-12	8384-8387	the	
19-13	8388-8395	archive	
19-14	8396-8403	command	
19-15	8404-8409	fails	
19-16	8410-8420	repeatedly	
19-17	8421-8428	because	
19-18	8429-8433	some	
19-19	8434-8440	aspect	
19-20	8441-8449	requires	
19-21	8450-8458	operator	
19-22	8459-8471	intervention	
19-23	8472-8474	or	
19-24	8475-8478	the	
19-25	8479-8486	archive	
19-26	8487-8491	runs	
19-27	8492-8495	out	
19-28	8496-8498	of	
19-29	8499-8504	space	
19-30	8504-8505	.	
19-31	8506-8509	For	
19-32	8510-8517	example	
19-33	8517-8518	,	
19-34	8519-8523	this	
19-35	8524-8529	could	
19-36	8530-8535	occur	
19-37	8536-8538	if	
19-38	8539-8542	you	
19-39	8543-8548	write	
19-40	8549-8551	to	
19-41	8552-8556	tape	
19-42	8557-8564	without	
19-43	8565-8567	an	
19-44	8568-8579	autochanger	
19-45	8579-8580	;	
19-46	8581-8585	when	
19-47	8586-8589	the	
19-48	8590-8594	tape	
19-49	8595-8600	fills	
19-50	8600-8601	,	
19-51	8602-8609	nothing	
19-52	8610-8617	further	
19-53	8618-8621	can	
19-54	8622-8624	be	
19-55	8625-8633	archived	
19-56	8634-8639	until	
19-57	8640-8643	the	
19-58	8644-8648	tape	
19-59	8649-8651	is	
19-60	8652-8659	swapped	
19-61	8659-8660	.	
19-62	8661-8664	You	
19-63	8665-8671	should	
19-64	8672-8678	ensure	
19-65	8679-8683	that	
19-66	8684-8687	any	
19-67	8688-8693	error	
19-68	8694-8703	condition	
19-69	8704-8706	or	
19-70	8707-8714	request	
19-71	8715-8717	to	
19-72	8718-8719	a	
19-73	8720-8725	human	
19-74	8726-8734	operator	
19-75	8735-8737	is	
19-76	8738-8746	reported	
19-77	8747-8760	appropriately	
19-78	8761-8763	so	
19-79	8764-8768	that	
19-80	8769-8772	the	
19-81	8773-8782	situation	
19-82	8783-8786	can	
19-83	8787-8789	be	
19-84	8790-8798	resolved	
19-85	8799-8809	reasonably	
19-86	8810-8817	quickly	
19-87	8817-8818	.	
19-88	8819-8822	The	
19-89	8823-8829	pg_wal	
19-90	8829-8830	/	
19-91	8831-8840	directory	
19-92	8841-8845	will	
19-93	8846-8854	continue	
19-94	8855-8857	to	
19-95	8858-8862	fill	
19-96	8863-8867	with	
19-97	8868-8871	WAL	
19-98	8872-8879	segment	
19-99	8880-8885	files	
19-100	8886-8891	until	
19-101	8892-8895	the	
19-102	8896-8905	situation	
19-103	8906-8908	is	
19-104	8909-8917	resolved	
19-105	8917-8918	.	
19-106	8919-8920	(	
19-107	8920-8922	If	
19-108	8923-8926	the	
19-109	8927-8931	file	
19-110	8932-8938	system	
19-111	8939-8949	containing	
19-112	8950-8956	pg_wal	
19-113	8956-8957	/	
19-114	8958-8963	fills	
19-115	8964-8966	up	
19-116	8966-8967	,	
19-117	8968-8978	PostgreSQL	
19-118	8979-8983	will	
19-119	8984-8986	do	
19-120	8987-8988	a	
19-121	8989-8994	PANIC	
19-122	8995-9003	shutdown	
19-123	9003-9004	.	
19-124	9005-9007	No	
19-125	9008-9017	committed	
19-126	9018-9030	transactions	
19-127	9031-9035	will	
19-128	9036-9038	be	
19-129	9039-9043	lost	
19-130	9043-9044	,	
19-131	9045-9048	but	
19-132	9049-9052	the	
19-133	9053-9061	database	
19-134	9062-9066	will	
19-135	9067-9073	remain	
19-136	9074-9081	offline	
19-137	9082-9087	until	
19-138	9088-9091	you	
19-139	9092-9096	free	
19-140	9097-9101	some	
19-141	9102-9107	space	
19-142	9107-9108	.	
19-143	9108-9109	)	
19-144	9110-9113	The	
19-145	9114-9119	speed	
19-146	9120-9122	of	
19-147	9123-9126	the	
19-148	9127-9136	archiving	
19-149	9137-9144	command	
19-150	9145-9147	is	
19-151	9148-9159	unimportant	
19-152	9160-9162	as	
19-153	9163-9167	long	
19-154	9168-9170	as	
19-155	9171-9173	it	
19-156	9174-9177	can	
19-157	9178-9182	keep	
19-158	9183-9185	up	
19-159	9186-9190	with	
19-160	9191-9194	the	
19-161	9195-9202	average	
19-162	9203-9207	rate	
19-163	9208-9210	at	
19-164	9211-9216	which	
19-165	9217-9221	your	
19-166	9222-9228	server	
19-167	9229-9238	generates	
19-168	9239-9242	WAL	
19-169	9243-9247	data	
19-170	9247-9248	.	
19-171	9249-9255	Normal	
19-172	9256-9265	operation	
19-173	9266-9275	continues	
19-174	9276-9280	even	
19-175	9281-9283	if	
19-176	9284-9287	the	
19-177	9288-9297	archiving	
19-178	9298-9305	process	
19-179	9306-9311	falls	
19-180	9312-9313	a	
19-181	9314-9320	little	
19-182	9321-9327	behind	
19-183	9327-9328	.	
19-184	9329-9331	If	
19-185	9332-9341	archiving	
19-186	9342-9347	falls	
19-187	9348-9361	significantly	
19-188	9362-9368	behind	
19-189	9368-9369	,	
19-190	9370-9374	this	
19-191	9375-9379	will	
19-192	9380-9388	increase	
19-193	9389-9392	the	
19-194	9393-9399	amount	
19-195	9400-9402	of	
19-196	9403-9407	data	
19-197	9408-9412	that	
19-198	9413-9418	would	
19-199	9419-9421	be	
19-200	9422-9426	lost	
19-201	9427-9429	in	
19-202	9430-9433	the	
19-203	9434-9439	event	
19-204	9440-9442	of	
19-205	9443-9444	a	
19-206	9445-9453	disaster	
19-207	9453-9454	.	
19-208	9455-9457	It	
19-209	9458-9462	will	
19-210	9463-9467	also	
19-211	9468-9472	mean	
19-212	9473-9477	that	
19-213	9478-9481	the	
19-214	9482-9488	pg_wal	
19-215	9488-9489	/	
19-216	9490-9499	directory	
19-217	9500-9504	will	
19-218	9505-9512	contain	
19-219	9513-9518	large	
19-220	9519-9526	numbers	
19-221	9527-9529	of	
19-222	9530-9546	not-yet-archived	
19-223	9547-9554	segment	
19-224	9555-9560	files	
19-225	9560-9561	,	
19-226	9562-9567	which	
19-227	9568-9573	could	
19-228	9574-9584	eventually	
19-229	9585-9591	exceed	
19-230	9592-9601	available	
19-231	9602-9606	disk	
19-232	9607-9612	space	
19-233	9612-9613	.	
19-234	9614-9617	You	
19-235	9618-9621	are	
19-236	9622-9629	advised	
19-237	9630-9632	to	
19-238	9633-9640	monitor	
19-239	9641-9644	the	
19-240	9645-9654	archiving	
19-241	9655-9662	process	
19-242	9663-9665	to	
19-243	9666-9672	ensure	
19-244	9673-9677	that	
19-245	9678-9680	it	
19-246	9681-9683	is	
19-247	9684-9691	working	
19-248	9692-9694	as	
19-249	9695-9698	you	
19-250	9699-9705	intend	
19-251	9705-9706	.	

#Text=In writing your archive command, you should assume that the file names to be archived can be up to 64 characters long and can contain any combination of ASCII letters, digits, and dots. It is not necessary to preserve the original relative path (%p) but it is necessary to preserve the file name (%f). Note that although WAL archiving will allow you to restore any modifications made to the data in your PostgreSQL database, it will not restore changes made to configuration files (that is, postgresql.conf, pg_hba.conf and pg_ident.conf), since those are edited manually rather than through SQL operations. You might wish to keep the configuration files in a location that will be backed up by your regular file system backup procedures. See Section 19.2 for how to relocate the configuration files.
20-1	9707-9709	In	
20-2	9710-9717	writing	
20-3	9718-9722	your	
20-4	9723-9730	archive	
20-5	9731-9738	command	
20-6	9738-9739	,	
20-7	9740-9743	you	
20-8	9744-9750	should	
20-9	9751-9757	assume	
20-10	9758-9762	that	
20-11	9763-9766	the	
20-12	9767-9771	file	
20-13	9772-9777	names	
20-14	9778-9780	to	
20-15	9781-9783	be	
20-16	9784-9792	archived	
20-17	9793-9796	can	
20-18	9797-9799	be	
20-19	9800-9802	up	
20-20	9803-9805	to	
20-21	9806-9808	64	
20-22	9809-9819	characters	
20-23	9820-9824	long	
20-24	9825-9828	and	
20-25	9829-9832	can	
20-26	9833-9840	contain	
20-27	9841-9844	any	
20-28	9845-9856	combination	
20-29	9857-9859	of	
20-30	9860-9865	ASCII	
20-31	9866-9873	letters	
20-32	9873-9874	,	
20-33	9875-9881	digits	
20-34	9881-9882	,	
20-35	9883-9886	and	
20-36	9887-9891	dots	
20-37	9891-9892	.	
20-38	9893-9895	It	
20-39	9896-9898	is	
20-40	9899-9902	not	
20-41	9903-9912	necessary	
20-42	9913-9915	to	
20-43	9916-9924	preserve	
20-44	9925-9928	the	
20-45	9929-9937	original	
20-46	9938-9946	relative	
20-47	9947-9951	path	
20-48	9952-9953	(	
20-49	9953-9954	%	
20-50	9954-9955	p	
20-51	9955-9956	)	
20-52	9957-9960	but	
20-53	9961-9963	it	
20-54	9964-9966	is	
20-55	9967-9976	necessary	
20-56	9977-9979	to	
20-57	9980-9988	preserve	
20-58	9989-9992	the	
20-59	9993-9997	file	
20-60	9998-10002	name	
20-61	10003-10004	(	
20-62	10004-10005	%	
20-63	10005-10006	f	
20-64	10006-10007	)	
20-65	10007-10008	.	
20-66	10009-10013	Note	
20-67	10014-10018	that	
20-68	10019-10027	although	
20-69	10028-10031	WAL	
20-70	10032-10041	archiving	
20-71	10042-10046	will	
20-72	10047-10052	allow	
20-73	10053-10056	you	
20-74	10057-10059	to	
20-75	10060-10067	restore	
20-76	10068-10071	any	
20-77	10072-10085	modifications	
20-78	10086-10090	made	
20-79	10091-10093	to	
20-80	10094-10097	the	
20-81	10098-10102	data	
20-82	10103-10105	in	
20-83	10106-10110	your	
20-84	10111-10121	PostgreSQL	
20-85	10122-10130	database	
20-86	10130-10131	,	
20-87	10132-10134	it	
20-88	10135-10139	will	
20-89	10140-10143	not	
20-90	10144-10151	restore	
20-91	10152-10159	changes	
20-92	10160-10164	made	
20-93	10165-10167	to	
20-94	10168-10181	configuration	
20-95	10182-10187	files	
20-96	10188-10189	(	
20-97	10189-10193	that	
20-98	10194-10196	is	
20-99	10196-10197	,	
20-100	10198-10213	postgresql.conf	
20-101	10213-10214	,	
20-102	10215-10226	pg_hba.conf	
20-103	10227-10230	and	
20-104	10231-10244	pg_ident.conf	
20-105	10244-10245	)	
20-106	10245-10246	,	
20-107	10247-10252	since	
20-108	10253-10258	those	
20-109	10259-10262	are	
20-110	10263-10269	edited	
20-111	10270-10278	manually	
20-112	10279-10285	rather	
20-113	10286-10290	than	
20-114	10291-10298	through	
20-115	10299-10302	SQL	
20-116	10303-10313	operations	
20-117	10313-10314	.	
20-118	10315-10318	You	
20-119	10319-10324	might	
20-120	10325-10329	wish	
20-121	10330-10332	to	
20-122	10333-10337	keep	
20-123	10338-10341	the	
20-124	10342-10355	configuration	
20-125	10356-10361	files	
20-126	10362-10364	in	
20-127	10365-10366	a	
20-128	10367-10375	location	
20-129	10376-10380	that	
20-130	10381-10385	will	
20-131	10386-10388	be	
20-132	10389-10395	backed	
20-133	10396-10398	up	
20-134	10399-10401	by	
20-135	10402-10406	your	
20-136	10407-10414	regular	
20-137	10415-10419	file	
20-138	10420-10426	system	
20-139	10427-10433	backup	
20-140	10434-10444	procedures	
20-141	10444-10445	.	
20-142	10446-10449	See	
20-143	10450-10457	Section	
20-144	10457-10458	 	
20-145	10458-10462	19.2	
20-146	10463-10466	for	
20-147	10467-10470	how	
20-148	10471-10473	to	
20-149	10474-10482	relocate	
20-150	10483-10486	the	
20-151	10487-10500	configuration	
20-152	10501-10506	files	
20-153	10506-10507	.	

#Text=The archive command is only invoked on completed WAL segments. Hence, if your server generates only little WAL traffic (or has slack periods where it does so), there could be a long delay between the completion of a transaction and its safe recording in archive storage. To put a limit on how old unarchived data can be, you can set archive_timeout to force the server to switch to a new WAL segment file at least that often. Note that archived files that are archived early due to a forced switch are still the same length as completely full files. It is therefore unwise to set a very short archive_timeout — it will bloat your archive storage. archive_timeout settings of a minute or so are usually reasonable. Also, you can force a segment switch manually with pg_switch_wal if you want to ensure that a just-finished transaction is archived as soon as possible. Other utility functions related to WAL management are listed in Table 9.84.
21-1	10508-10511	The	
21-2	10512-10519	archive	
21-3	10520-10527	command	
21-4	10528-10530	is	
21-5	10531-10535	only	
21-6	10536-10543	invoked	
21-7	10544-10546	on	
21-8	10547-10556	completed	
21-9	10557-10560	WAL	
21-10	10561-10569	segments	
21-11	10569-10570	.	
21-12	10571-10576	Hence	
21-13	10576-10577	,	
21-14	10578-10580	if	
21-15	10581-10585	your	
21-16	10586-10592	server	
21-17	10593-10602	generates	
21-18	10603-10607	only	
21-19	10608-10614	little	
21-20	10615-10618	WAL	
21-21	10619-10626	traffic	
21-22	10627-10628	(	
21-23	10628-10630	or	
21-24	10631-10634	has	
21-25	10635-10640	slack	
21-26	10641-10648	periods	
21-27	10649-10654	where	
21-28	10655-10657	it	
21-29	10658-10662	does	
21-30	10663-10665	so	
21-31	10665-10666	)	
21-32	10666-10667	,	
21-33	10668-10673	there	
21-34	10674-10679	could	
21-35	10680-10682	be	
21-36	10683-10684	a	
21-37	10685-10689	long	
21-38	10690-10695	delay	
21-39	10696-10703	between	
21-40	10704-10707	the	
21-41	10708-10718	completion	
21-42	10719-10721	of	
21-43	10722-10723	a	
21-44	10724-10735	transaction	
21-45	10736-10739	and	
21-46	10740-10743	its	
21-47	10744-10748	safe	
21-48	10749-10758	recording	
21-49	10759-10761	in	
21-50	10762-10769	archive	
21-51	10770-10777	storage	
21-52	10777-10778	.	
21-53	10779-10781	To	
21-54	10782-10785	put	
21-55	10786-10787	a	
21-56	10788-10793	limit	
21-57	10794-10796	on	
21-58	10797-10800	how	
21-59	10801-10804	old	
21-60	10805-10815	unarchived	
21-61	10816-10820	data	
21-62	10821-10824	can	
21-63	10825-10827	be	
21-64	10827-10828	,	
21-65	10829-10832	you	
21-66	10833-10836	can	
21-67	10837-10840	set	
21-68	10841-10856	archive_timeout	
21-69	10857-10859	to	
21-70	10860-10865	force	
21-71	10866-10869	the	
21-72	10870-10876	server	
21-73	10877-10879	to	
21-74	10880-10886	switch	
21-75	10887-10889	to	
21-76	10890-10891	a	
21-77	10892-10895	new	
21-78	10896-10899	WAL	
21-79	10900-10907	segment	
21-80	10908-10912	file	
21-81	10913-10915	at	
21-82	10916-10921	least	
21-83	10922-10926	that	
21-84	10927-10932	often	
21-85	10932-10933	.	
21-86	10934-10938	Note	
21-87	10939-10943	that	
21-88	10944-10952	archived	
21-89	10953-10958	files	
21-90	10959-10963	that	
21-91	10964-10967	are	
21-92	10968-10976	archived	
21-93	10977-10982	early	
21-94	10983-10986	due	
21-95	10987-10989	to	
21-96	10990-10991	a	
21-97	10992-10998	forced	
21-98	10999-11005	switch	
21-99	11006-11009	are	
21-100	11010-11015	still	
21-101	11016-11019	the	
21-102	11020-11024	same	
21-103	11025-11031	length	
21-104	11032-11034	as	
21-105	11035-11045	completely	
21-106	11046-11050	full	
21-107	11051-11056	files	
21-108	11056-11057	.	
21-109	11058-11060	It	
21-110	11061-11063	is	
21-111	11064-11073	therefore	
21-112	11074-11080	unwise	
21-113	11081-11083	to	
21-114	11084-11087	set	
21-115	11088-11089	a	
21-116	11090-11094	very	
21-117	11095-11100	short	
21-118	11101-11116	archive_timeout	
21-119	11117-11118	—	
21-120	11119-11121	it	
21-121	11122-11126	will	
21-122	11127-11132	bloat	
21-123	11133-11137	your	
21-124	11138-11145	archive	
21-125	11146-11153	storage	
21-126	11153-11154	.	
21-127	11155-11170	archive_timeout	
21-128	11171-11179	settings	
21-129	11180-11182	of	
21-130	11183-11184	a	
21-131	11185-11191	minute	
21-132	11192-11194	or	
21-133	11195-11197	so	
21-134	11198-11201	are	
21-135	11202-11209	usually	
21-136	11210-11220	reasonable	
21-137	11220-11221	.	
21-138	11222-11226	Also	
21-139	11226-11227	,	
21-140	11228-11231	you	
21-141	11232-11235	can	
21-142	11236-11241	force	
21-143	11242-11243	a	
21-144	11244-11251	segment	
21-145	11252-11258	switch	
21-146	11259-11267	manually	
21-147	11268-11272	with	
21-148	11273-11286	pg_switch_wal	
21-149	11287-11289	if	
21-150	11290-11293	you	
21-151	11294-11298	want	
21-152	11299-11301	to	
21-153	11302-11308	ensure	
21-154	11309-11313	that	
21-155	11314-11315	a	
21-156	11316-11329	just-finished	
21-157	11330-11341	transaction	
21-158	11342-11344	is	
21-159	11345-11353	archived	
21-160	11354-11356	as	
21-161	11357-11361	soon	
21-162	11362-11364	as	
21-163	11365-11373	possible	
21-164	11373-11374	.	
21-165	11375-11380	Other	
21-166	11381-11388	utility	
21-167	11389-11398	functions	
21-168	11399-11406	related	
21-169	11407-11409	to	
21-170	11410-11413	WAL	
21-171	11414-11424	management	
21-172	11425-11428	are	
21-173	11429-11435	listed	
21-174	11436-11438	in	
21-175	11439-11444	Table	
21-176	11444-11445	 	
21-177	11445-11449	9.84	
21-178	11449-11450	.	

#Text=When wal_level is minimal some SQL commands are optimized to avoid WAL logging, as described in Section 14.4.7. If archiving or streaming replication were turned on during execution of one of these statements, WAL would not contain enough information for archive recovery. (Crash recovery is unaffected.) For this reason, wal_level can only be changed at server start. However, archive_command can be changed with a configuration file reload. If you wish to temporarily stop archiving, one way to do it is to set archive_command to the empty string (''). This will cause WAL files to accumulate in pg_wal/ until a working archive_command is re-established. 25.3.2. Making a Base Backup The easiest way to perform a base backup is to use the pg_basebackup tool. It can create a base backup either as regular files or as a tar archive. If more flexibility than pg_basebackup can provide is required, you can also make a base backup using the low level API (see Section 25.3.3).
22-1	11451-11455	When	
22-2	11456-11465	wal_level	
22-3	11466-11468	is	
22-4	11469-11476	minimal	
22-5	11477-11481	some	
22-6	11482-11485	SQL	
22-7	11486-11494	commands	
22-8	11495-11498	are	
22-9	11499-11508	optimized	
22-10	11509-11511	to	
22-11	11512-11517	avoid	
22-12	11518-11521	WAL	
22-13	11522-11529	logging	
22-14	11529-11530	,	
22-15	11531-11533	as	
22-16	11534-11543	described	
22-17	11544-11546	in	
22-18	11547-11554	Section	
22-19	11554-11555	 	
22-20	11555-11561	14.4.7	
22-21	11561-11562	.	
22-22	11563-11565	If	
22-23	11566-11575	archiving	
22-24	11576-11578	or	
22-25	11579-11588	streaming	
22-26	11589-11600	replication	
22-27	11601-11605	were	
22-28	11606-11612	turned	
22-29	11613-11615	on	
22-30	11616-11622	during	
22-31	11623-11632	execution	
22-32	11633-11635	of	
22-33	11636-11639	one	
22-34	11640-11642	of	
22-35	11643-11648	these	
22-36	11649-11659	statements	
22-37	11659-11660	,	
22-38	11661-11664	WAL	
22-39	11665-11670	would	
22-40	11671-11674	not	
22-41	11675-11682	contain	
22-42	11683-11689	enough	
22-43	11690-11701	information	
22-44	11702-11705	for	
22-45	11706-11713	archive	
22-46	11714-11722	recovery	
22-47	11722-11723	.	
22-48	11724-11725	(	
22-49	11725-11730	Crash	
22-50	11731-11739	recovery	
22-51	11740-11742	is	
22-52	11743-11753	unaffected	
22-53	11753-11754	.	
22-54	11754-11755	)	
22-55	11756-11759	For	
22-56	11760-11764	this	
22-57	11765-11771	reason	
22-58	11771-11772	,	
22-59	11773-11782	wal_level	
22-60	11783-11786	can	
22-61	11787-11791	only	
22-62	11792-11794	be	
22-63	11795-11802	changed	
22-64	11803-11805	at	
22-65	11806-11812	server	
22-66	11813-11818	start	
22-67	11818-11819	.	
22-68	11820-11827	However	
22-69	11827-11828	,	
22-70	11829-11844	archive_command	
22-71	11845-11848	can	
22-72	11849-11851	be	
22-73	11852-11859	changed	
22-74	11860-11864	with	
22-75	11865-11866	a	
22-76	11867-11880	configuration	
22-77	11881-11885	file	
22-78	11886-11892	reload	
22-79	11892-11893	.	
22-80	11894-11896	If	
22-81	11897-11900	you	
22-82	11901-11905	wish	
22-83	11906-11908	to	
22-84	11909-11920	temporarily	
22-85	11921-11925	stop	
22-86	11926-11935	archiving	
22-87	11935-11936	,	
22-88	11937-11940	one	
22-89	11941-11944	way	
22-90	11945-11947	to	
22-91	11948-11950	do	
22-92	11951-11953	it	
22-93	11954-11956	is	
22-94	11957-11959	to	
22-95	11960-11963	set	
22-96	11964-11979	archive_command	
22-97	11980-11982	to	
22-98	11983-11986	the	
22-99	11987-11992	empty	
22-100	11993-11999	string	
22-101	12000-12001	(	
22-102	12001-12002	'	
22-103	12002-12003	'	
22-104	12003-12004	)	
22-105	12004-12005	.	
22-106	12006-12010	This	
22-107	12011-12015	will	
22-108	12016-12021	cause	
22-109	12022-12025	WAL	
22-110	12026-12031	files	
22-111	12032-12034	to	
22-112	12035-12045	accumulate	
22-113	12046-12048	in	
22-114	12049-12055	pg_wal	
22-115	12055-12056	/	
22-116	12057-12062	until	
22-117	12063-12064	a	
22-118	12065-12072	working	
22-119	12073-12088	archive_command	
22-120	12089-12091	is	
22-121	12092-12106	re-established	
22-122	12106-12107	.	
22-123	12108-12114	25.3.2	
22-124	12114-12115	.	
22-125	12115-12116	 	
22-126	12116-12122	Making	
22-127	12123-12124	a	
22-128	12125-12129	Base	
22-129	12130-12136	Backup	
22-130	12137-12140	The	
22-131	12141-12148	easiest	
22-132	12149-12152	way	
22-133	12153-12155	to	
22-134	12156-12163	perform	
22-135	12164-12165	a	
22-136	12166-12170	base	
22-137	12171-12177	backup	
22-138	12178-12180	is	
22-139	12181-12183	to	
22-140	12184-12187	use	
22-141	12188-12191	the	
22-142	12192-12205	pg_basebackup	
22-143	12206-12210	tool	
22-144	12210-12211	.	
22-145	12212-12214	It	
22-146	12215-12218	can	
22-147	12219-12225	create	
22-148	12226-12227	a	
22-149	12228-12232	base	
22-150	12233-12239	backup	
22-151	12240-12246	either	
22-152	12247-12249	as	
22-153	12250-12257	regular	
22-154	12258-12263	files	
22-155	12264-12266	or	
22-156	12267-12269	as	
22-157	12270-12271	a	
22-158	12272-12275	tar	
22-159	12276-12283	archive	
22-160	12283-12284	.	
22-161	12285-12287	If	
22-162	12288-12292	more	
22-163	12293-12304	flexibility	
22-164	12305-12309	than	
22-165	12310-12323	pg_basebackup	
22-166	12324-12327	can	
22-167	12328-12335	provide	
22-168	12336-12338	is	
22-169	12339-12347	required	
22-170	12347-12348	,	
22-171	12349-12352	you	
22-172	12353-12356	can	
22-173	12357-12361	also	
22-174	12362-12366	make	
22-175	12367-12368	a	
22-176	12369-12373	base	
22-177	12374-12380	backup	
22-178	12381-12386	using	
22-179	12387-12390	the	
22-180	12391-12394	low	
22-181	12395-12400	level	
22-182	12401-12404	API	
22-183	12405-12406	(	
22-184	12406-12409	see	
22-185	12410-12417	Section	
22-186	12417-12418	 	
22-187	12418-12424	25.3.3	
22-188	12424-12425	)	
22-189	12425-12426	.	

#Text=It is not necessary to be concerned about the amount of time it takes to make a base backup. However, if you normally run the server with full_page_writes disabled, you might notice a drop in performance while the backup runs since full_page_writes is effectively forced on during backup mode.
23-1	12427-12429	It	
23-2	12430-12432	is	
23-3	12433-12436	not	
23-4	12437-12446	necessary	
23-5	12447-12449	to	
23-6	12450-12452	be	
23-7	12453-12462	concerned	
23-8	12463-12468	about	
23-9	12469-12472	the	
23-10	12473-12479	amount	
23-11	12480-12482	of	
23-12	12483-12487	time	
23-13	12488-12490	it	
23-14	12491-12496	takes	
23-15	12497-12499	to	
23-16	12500-12504	make	
23-17	12505-12506	a	
23-18	12507-12511	base	
23-19	12512-12518	backup	
23-20	12518-12519	.	
23-21	12520-12527	However	
23-22	12527-12528	,	
23-23	12529-12531	if	
23-24	12532-12535	you	
23-25	12536-12544	normally	
23-26	12545-12548	run	
23-27	12549-12552	the	
23-28	12553-12559	server	
23-29	12560-12564	with	
23-30	12565-12581	full_page_writes	
23-31	12582-12590	disabled	
23-32	12590-12591	,	
23-33	12592-12595	you	
23-34	12596-12601	might	
23-35	12602-12608	notice	
23-36	12609-12610	a	
23-37	12611-12615	drop	
23-38	12616-12618	in	
23-39	12619-12630	performance	
23-40	12631-12636	while	
23-41	12637-12640	the	
23-42	12641-12647	backup	
23-43	12648-12652	runs	
23-44	12653-12658	since	
23-45	12659-12675	full_page_writes	
23-46	12676-12678	is	
23-47	12679-12690	effectively	
23-48	12691-12697	forced	
23-49	12698-12700	on	
23-50	12701-12707	during	
23-51	12708-12714	backup	
23-52	12715-12719	mode	
23-53	12719-12720	.	

#Text=To make use of the backup, you will need to keep all the WAL segment files generated during and after the file system backup. To aid you in doing this, the base backup process creates a backup history file that is immediately stored into the WAL archive area. This file is named after the first WAL segment file that you need for the file system backup. For example, if the starting WAL file is 0000000100001234000055CD the backup history file will be named something like 0000000100001234000055CD.007C9330.backup. (The second part of the file name stands for an exact position within the WAL file, and can ordinarily be ignored.) Once you have safely archived the file system backup and the WAL segment files used during the backup (as specified in the backup history file), all archived WAL segments with names numerically less are no longer needed to recover the file system backup and can be deleted. However, you should consider keeping several backup sets to be absolutely certain that you can recover your data. The backup history file is just a small text file. It contains the label string you gave to pg_basebackup, as well as the starting and ending times and WAL segments of the backup. If you used the label to identify the associated dump file, then the archived history file is enough to tell you which dump file to restore.
24-1	12721-12723	To	
24-2	12724-12728	make	
24-3	12729-12732	use	
24-4	12733-12735	of	
24-5	12736-12739	the	
24-6	12740-12746	backup	
24-7	12746-12747	,	
24-8	12748-12751	you	
24-9	12752-12756	will	
24-10	12757-12761	need	
24-11	12762-12764	to	
24-12	12765-12769	keep	
24-13	12770-12773	all	
24-14	12774-12777	the	
24-15	12778-12781	WAL	
24-16	12782-12789	segment	
24-17	12790-12795	files	
24-18	12796-12805	generated	
24-19	12806-12812	during	
24-20	12813-12816	and	
24-21	12817-12822	after	
24-22	12823-12826	the	
24-23	12827-12831	file	
24-24	12832-12838	system	
24-25	12839-12845	backup	
24-26	12845-12846	.	
24-27	12847-12849	To	
24-28	12850-12853	aid	
24-29	12854-12857	you	
24-30	12858-12860	in	
24-31	12861-12866	doing	
24-32	12867-12871	this	
24-33	12871-12872	,	
24-34	12873-12876	the	
24-35	12877-12881	base	
24-36	12882-12888	backup	
24-37	12889-12896	process	
24-38	12897-12904	creates	
24-39	12905-12906	a	
24-40	12907-12913	backup	
24-41	12914-12921	history	
24-42	12922-12926	file	
24-43	12927-12931	that	
24-44	12932-12934	is	
24-45	12935-12946	immediately	
24-46	12947-12953	stored	
24-47	12954-12958	into	
24-48	12959-12962	the	
24-49	12963-12966	WAL	
24-50	12967-12974	archive	
24-51	12975-12979	area	
24-52	12979-12980	.	
24-53	12981-12985	This	
24-54	12986-12990	file	
24-55	12991-12993	is	
24-56	12994-12999	named	
24-57	13000-13005	after	
24-58	13006-13009	the	
24-59	13010-13015	first	
24-60	13016-13019	WAL	
24-61	13020-13027	segment	
24-62	13028-13032	file	
24-63	13033-13037	that	
24-64	13038-13041	you	
24-65	13042-13046	need	
24-66	13047-13050	for	
24-67	13051-13054	the	
24-68	13055-13059	file	
24-69	13060-13066	system	
24-70	13067-13073	backup	
24-71	13073-13074	.	
24-72	13075-13078	For	
24-73	13079-13086	example	
24-74	13086-13087	,	
24-75	13088-13090	if	
24-76	13091-13094	the	
24-77	13095-13103	starting	
24-78	13104-13107	WAL	
24-79	13108-13112	file	
24-80	13113-13115	is	
24-81	13116-13140	0000000100001234000055CD	
24-82	13141-13144	the	
24-83	13145-13151	backup	
24-84	13152-13159	history	
24-85	13160-13164	file	
24-86	13165-13169	will	
24-87	13170-13172	be	
24-88	13173-13178	named	
24-89	13179-13188	something	
24-90	13189-13193	like	
24-91	13194-13218	0000000100001234000055CD	
24-92	13218-13227	.007C9330	
24-93	13227-13228	.	
24-94	13228-13234	backup	
24-95	13234-13235	.	
24-96	13236-13237	(	
24-97	13237-13240	The	
24-98	13241-13247	second	
24-99	13248-13252	part	
24-100	13253-13255	of	
24-101	13256-13259	the	
24-102	13260-13264	file	
24-103	13265-13269	name	
24-104	13270-13276	stands	
24-105	13277-13280	for	
24-106	13281-13283	an	
24-107	13284-13289	exact	
24-108	13290-13298	position	
24-109	13299-13305	within	
24-110	13306-13309	the	
24-111	13310-13313	WAL	
24-112	13314-13318	file	
24-113	13318-13319	,	
24-114	13320-13323	and	
24-115	13324-13327	can	
24-116	13328-13338	ordinarily	
24-117	13339-13341	be	
24-118	13342-13349	ignored	
24-119	13349-13350	.	
24-120	13350-13351	)	
24-121	13352-13356	Once	
24-122	13357-13360	you	
24-123	13361-13365	have	
24-124	13366-13372	safely	
24-125	13373-13381	archived	
24-126	13382-13385	the	
24-127	13386-13390	file	
24-128	13391-13397	system	
24-129	13398-13404	backup	
24-130	13405-13408	and	
24-131	13409-13412	the	
24-132	13413-13416	WAL	
24-133	13417-13424	segment	
24-134	13425-13430	files	
24-135	13431-13435	used	
24-136	13436-13442	during	
24-137	13443-13446	the	
24-138	13447-13453	backup	
24-139	13454-13455	(	
24-140	13455-13457	as	
24-141	13458-13467	specified	
24-142	13468-13470	in	
24-143	13471-13474	the	
24-144	13475-13481	backup	
24-145	13482-13489	history	
24-146	13490-13494	file	
24-147	13494-13495	)	
24-148	13495-13496	,	
24-149	13497-13500	all	
24-150	13501-13509	archived	
24-151	13510-13513	WAL	
24-152	13514-13522	segments	
24-153	13523-13527	with	
24-154	13528-13533	names	
24-155	13534-13545	numerically	
24-156	13546-13550	less	
24-157	13551-13554	are	
24-158	13555-13557	no	
24-159	13558-13564	longer	
24-160	13565-13571	needed	
24-161	13572-13574	to	
24-162	13575-13582	recover	
24-163	13583-13586	the	
24-164	13587-13591	file	
24-165	13592-13598	system	
24-166	13599-13605	backup	
24-167	13606-13609	and	
24-168	13610-13613	can	
24-169	13614-13616	be	
24-170	13617-13624	deleted	
24-171	13624-13625	.	
24-172	13626-13633	However	
24-173	13633-13634	,	
24-174	13635-13638	you	
24-175	13639-13645	should	
24-176	13646-13654	consider	
24-177	13655-13662	keeping	
24-178	13663-13670	several	
24-179	13671-13677	backup	
24-180	13678-13682	sets	
24-181	13683-13685	to	
24-182	13686-13688	be	
24-183	13689-13699	absolutely	
24-184	13700-13707	certain	
24-185	13708-13712	that	
24-186	13713-13716	you	
24-187	13717-13720	can	
24-188	13721-13728	recover	
24-189	13729-13733	your	
24-190	13734-13738	data	
24-191	13738-13739	.	
24-192	13740-13743	The	
24-193	13744-13750	backup	
24-194	13751-13758	history	
24-195	13759-13763	file	
24-196	13764-13766	is	
24-197	13767-13771	just	
24-198	13772-13773	a	
24-199	13774-13779	small	
24-200	13780-13784	text	
24-201	13785-13789	file	
24-202	13789-13790	.	
24-203	13791-13793	It	
24-204	13794-13802	contains	
24-205	13803-13806	the	
24-206	13807-13812	label	
24-207	13813-13819	string	
24-208	13820-13823	you	
24-209	13824-13828	gave	
24-210	13829-13831	to	
24-211	13832-13845	pg_basebackup	
24-212	13845-13846	,	
24-213	13847-13849	as	
24-214	13850-13854	well	
24-215	13855-13857	as	
24-216	13858-13861	the	
24-217	13862-13870	starting	
24-218	13871-13874	and	
24-219	13875-13881	ending	
24-220	13882-13887	times	
24-221	13888-13891	and	
24-222	13892-13895	WAL	
24-223	13896-13904	segments	
24-224	13905-13907	of	
24-225	13908-13911	the	
24-226	13912-13918	backup	
24-227	13918-13919	.	
24-228	13920-13922	If	
24-229	13923-13926	you	
24-230	13927-13931	used	
24-231	13932-13935	the	
24-232	13936-13941	label	
24-233	13942-13944	to	
24-234	13945-13953	identify	
24-235	13954-13957	the	
24-236	13958-13968	associated	
24-237	13969-13973	dump	
24-238	13974-13978	file	
24-239	13978-13979	,	
24-240	13980-13984	then	
24-241	13985-13988	the	
24-242	13989-13997	archived	
24-243	13998-14005	history	
24-244	14006-14010	file	
24-245	14011-14013	is	
24-246	14014-14020	enough	
24-247	14021-14023	to	
24-248	14024-14028	tell	
24-249	14029-14032	you	
24-250	14033-14038	which	
24-251	14039-14043	dump	
24-252	14044-14048	file	
24-253	14049-14051	to	
24-254	14052-14059	restore	
24-255	14059-14060	.	

#Text=Since you have to keep around all the archived WAL files back to your last base backup, the interval between base backups should usually be chosen based on how much storage you want to expend on archived WAL files. You should also consider how long you are prepared to spend recovering, if recovery should be necessary — the system will have to replay all those WAL segments, and that could take awhile if it has been a long time since the last base backup. 25.3.3. Making a Base Backup Using the Low Level API The procedure for making a base backup using the low level APIs contains a few more steps than the pg_basebackup method, but is relatively simple. It is very important that these steps are executed in sequence, and that the success of a step is verified before proceeding to the next step.
25-1	14061-14066	Since	
25-2	14067-14070	you	
25-3	14071-14075	have	
25-4	14076-14078	to	
25-5	14079-14083	keep	
25-6	14084-14090	around	
25-7	14091-14094	all	
25-8	14095-14098	the	
25-9	14099-14107	archived	
25-10	14108-14111	WAL	
25-11	14112-14117	files	
25-12	14118-14122	back	
25-13	14123-14125	to	
25-14	14126-14130	your	
25-15	14131-14135	last	
25-16	14136-14140	base	
25-17	14141-14147	backup	
25-18	14147-14148	,	
25-19	14149-14152	the	
25-20	14153-14161	interval	
25-21	14162-14169	between	
25-22	14170-14174	base	
25-23	14175-14182	backups	
25-24	14183-14189	should	
25-25	14190-14197	usually	
25-26	14198-14200	be	
25-27	14201-14207	chosen	
25-28	14208-14213	based	
25-29	14214-14216	on	
25-30	14217-14220	how	
25-31	14221-14225	much	
25-32	14226-14233	storage	
25-33	14234-14237	you	
25-34	14238-14242	want	
25-35	14243-14245	to	
25-36	14246-14252	expend	
25-37	14253-14255	on	
25-38	14256-14264	archived	
25-39	14265-14268	WAL	
25-40	14269-14274	files	
25-41	14274-14275	.	
25-42	14276-14279	You	
25-43	14280-14286	should	
25-44	14287-14291	also	
25-45	14292-14300	consider	
25-46	14301-14304	how	
25-47	14305-14309	long	
25-48	14310-14313	you	
25-49	14314-14317	are	
25-50	14318-14326	prepared	
25-51	14327-14329	to	
25-52	14330-14335	spend	
25-53	14336-14346	recovering	
25-54	14346-14347	,	
25-55	14348-14350	if	
25-56	14351-14359	recovery	
25-57	14360-14366	should	
25-58	14367-14369	be	
25-59	14370-14379	necessary	
25-60	14380-14381	—	
25-61	14382-14385	the	
25-62	14386-14392	system	
25-63	14393-14397	will	
25-64	14398-14402	have	
25-65	14403-14405	to	
25-66	14406-14412	replay	
25-67	14413-14416	all	
25-68	14417-14422	those	
25-69	14423-14426	WAL	
25-70	14427-14435	segments	
25-71	14435-14436	,	
25-72	14437-14440	and	
25-73	14441-14445	that	
25-74	14446-14451	could	
25-75	14452-14456	take	
25-76	14457-14463	awhile	
25-77	14464-14466	if	
25-78	14467-14469	it	
25-79	14470-14473	has	
25-80	14474-14478	been	
25-81	14479-14480	a	
25-82	14481-14485	long	
25-83	14486-14490	time	
25-84	14491-14496	since	
25-85	14497-14500	the	
25-86	14501-14505	last	
25-87	14506-14510	base	
25-88	14511-14517	backup	
25-89	14517-14518	.	
25-90	14519-14525	25.3.3	
25-91	14525-14526	.	
25-92	14526-14527	 	
25-93	14527-14533	Making	
25-94	14534-14535	a	
25-95	14536-14540	Base	
25-96	14541-14547	Backup	
25-97	14548-14553	Using	
25-98	14554-14557	the	
25-99	14558-14561	Low	
25-100	14562-14567	Level	
25-101	14568-14571	API	
25-102	14572-14575	The	
25-103	14576-14585	procedure	
25-104	14586-14589	for	
25-105	14590-14596	making	
25-106	14597-14598	a	
25-107	14599-14603	base	
25-108	14604-14610	backup	
25-109	14611-14616	using	
25-110	14617-14620	the	
25-111	14621-14624	low	
25-112	14625-14630	level	
25-113	14631-14635	APIs	
25-114	14636-14644	contains	
25-115	14645-14646	a	
25-116	14647-14650	few	
25-117	14651-14655	more	
25-118	14656-14661	steps	
25-119	14662-14666	than	
25-120	14667-14670	the	
25-121	14671-14684	pg_basebackup	
25-122	14685-14691	method	
25-123	14691-14692	,	
25-124	14693-14696	but	
25-125	14697-14699	is	
25-126	14700-14710	relatively	
25-127	14711-14717	simple	
25-128	14717-14718	.	
25-129	14719-14721	It	
25-130	14722-14724	is	
25-131	14725-14729	very	
25-132	14730-14739	important	
25-133	14740-14744	that	
25-134	14745-14750	these	
25-135	14751-14756	steps	
25-136	14757-14760	are	
25-137	14761-14769	executed	
25-138	14770-14772	in	
25-139	14773-14781	sequence	
25-140	14781-14782	,	
25-141	14783-14786	and	
25-142	14787-14791	that	
25-143	14792-14795	the	
25-144	14796-14803	success	
25-145	14804-14806	of	
25-146	14807-14808	a	
25-147	14809-14813	step	
25-148	14814-14816	is	
25-149	14817-14825	verified	
25-150	14826-14832	before	
25-151	14833-14843	proceeding	
25-152	14844-14846	to	
25-153	14847-14850	the	
25-154	14851-14855	next	
25-155	14856-14860	step	
25-156	14860-14861	.	

#Text=Low level base backups can be made in a non-exclusive or an exclusive way. The non-exclusive method is recommended and the exclusive one is deprecated and will eventually be removed. 25.3.3.1. Making a Non-Exclusive Low-Level Backup A non-exclusive low level backup is one that allows other concurrent backups to be running (both those started using the same backup API and those started using pg_basebackup).
26-1	14862-14865	Low	
26-2	14866-14871	level	
26-3	14872-14876	base	
26-4	14877-14884	backups	
26-5	14885-14888	can	
26-6	14889-14891	be	
26-7	14892-14896	made	
26-8	14897-14899	in	
26-9	14900-14901	a	
26-10	14902-14915	non-exclusive	
26-11	14916-14918	or	
26-12	14919-14921	an	
26-13	14922-14931	exclusive	
26-14	14932-14935	way	
26-15	14935-14936	.	
26-16	14937-14940	The	
26-17	14941-14954	non-exclusive	
26-18	14955-14961	method	
26-19	14962-14964	is	
26-20	14965-14976	recommended	
26-21	14977-14980	and	
26-22	14981-14984	the	
26-23	14985-14994	exclusive	
26-24	14995-14998	one	
26-25	14999-15001	is	
26-26	15002-15012	deprecated	
26-27	15013-15016	and	
26-28	15017-15021	will	
26-29	15022-15032	eventually	
26-30	15033-15035	be	
26-31	15036-15043	removed	
26-32	15043-15044	.	
26-33	15045-15053	25.3.3.1	
26-34	15053-15054	.	
26-35	15054-15055	 	
26-36	15055-15061	Making	
26-37	15062-15063	a	
26-38	15064-15077	Non-Exclusive	
26-39	15078-15087	Low-Level	
26-40	15088-15094	Backup	
26-41	15095-15096	A	
26-42	15097-15110	non-exclusive	
26-43	15111-15114	low	
26-44	15115-15120	level	
26-45	15121-15127	backup	
26-46	15128-15130	is	
26-47	15131-15134	one	
26-48	15135-15139	that	
26-49	15140-15146	allows	
26-50	15147-15152	other	
26-51	15153-15163	concurrent	
26-52	15164-15171	backups	
26-53	15172-15174	to	
26-54	15175-15177	be	
26-55	15178-15185	running	
26-56	15186-15187	(	
26-57	15187-15191	both	
26-58	15192-15197	those	
26-59	15198-15205	started	
26-60	15206-15211	using	
26-61	15212-15215	the	
26-62	15216-15220	same	
26-63	15221-15227	backup	
26-64	15228-15231	API	
26-65	15232-15235	and	
26-66	15236-15241	those	
26-67	15242-15249	started	
26-68	15250-15255	using	
26-69	15256-15269	pg_basebackup	
26-70	15269-15270	)	
26-71	15270-15271	.	

#Text=Ensure that WAL archiving is enabled and working. Connect to the server (it does not matter which database) as a user with rights to run pg_start_backup (superuser, or a user who has been granted EXECUTE on the function) and issue the command: SELECT pg_start_backup('label', false, false);
27-1	15272-15278	Ensure	
27-2	15279-15283	that	
27-3	15284-15287	WAL	
27-4	15288-15297	archiving	
27-5	15298-15300	is	
27-6	15301-15308	enabled	
27-7	15309-15312	and	
27-8	15313-15320	working	
27-9	15320-15321	.	
27-10	15322-15329	Connect	
27-11	15330-15332	to	
27-12	15333-15336	the	
27-13	15337-15343	server	
27-14	15344-15345	(	
27-15	15345-15347	it	
27-16	15348-15352	does	
27-17	15353-15356	not	
27-18	15357-15363	matter	
27-19	15364-15369	which	
27-20	15370-15378	database	
27-21	15378-15379	)	
27-22	15380-15382	as	
27-23	15383-15384	a	
27-24	15385-15389	user	
27-25	15390-15394	with	
27-26	15395-15401	rights	
27-27	15402-15404	to	
27-28	15405-15408	run	
27-29	15409-15424	pg_start_backup	
27-30	15425-15426	(	
27-31	15426-15435	superuser	
27-32	15435-15436	,	
27-33	15437-15439	or	
27-34	15440-15441	a	
27-35	15442-15446	user	
27-36	15447-15450	who	
27-37	15451-15454	has	
27-38	15455-15459	been	
27-39	15460-15467	granted	
27-40	15468-15475	EXECUTE	
27-41	15476-15478	on	
27-42	15479-15482	the	
27-43	15483-15491	function	
27-44	15491-15492	)	
27-45	15493-15496	and	
27-46	15497-15502	issue	
27-47	15503-15506	the	
27-48	15507-15514	command	
27-49	15514-15515	:	
27-50	15516-15522	SELECT	
27-51	15523-15538	pg_start_backup	
27-52	15538-15539	(	
27-53	15539-15540	'	
27-54	15540-15545	label	
27-55	15545-15546	'	
27-56	15546-15547	,	
27-57	15548-15553	false	
27-58	15553-15554	,	
27-59	15555-15560	false	
27-60	15560-15561	)	
27-61	15561-15562	;	

#Text=where label is any string you want to use to uniquely identify this backup operation. The connection calling pg_start_backup must be maintained until the end of the backup, or the backup will be automatically aborted. By default, pg_start_backup can take a long time to finish. This is because it performs a checkpoint, and the I/O required for the checkpoint will be spread out over a significant period of time, by default half your inter-checkpoint interval (see the configuration parameter checkpoint_completion_target). This is usually what you want, because it minimizes the impact on query processing. If you want to start the backup as soon as possible, change the second parameter to true, which will issue an immediate checkpoint using as much I/O as available.
28-1	15563-15568	where	
28-2	15569-15574	label	
28-3	15575-15577	is	
28-4	15578-15581	any	
28-5	15582-15588	string	
28-6	15589-15592	you	
28-7	15593-15597	want	
28-8	15598-15600	to	
28-9	15601-15604	use	
28-10	15605-15607	to	
28-11	15608-15616	uniquely	
28-12	15617-15625	identify	
28-13	15626-15630	this	
28-14	15631-15637	backup	
28-15	15638-15647	operation	
28-16	15647-15648	.	
28-17	15649-15652	The	
28-18	15653-15663	connection	
28-19	15664-15671	calling	
28-20	15672-15687	pg_start_backup	
28-21	15688-15692	must	
28-22	15693-15695	be	
28-23	15696-15706	maintained	
28-24	15707-15712	until	
28-25	15713-15716	the	
28-26	15717-15720	end	
28-27	15721-15723	of	
28-28	15724-15727	the	
28-29	15728-15734	backup	
28-30	15734-15735	,	
28-31	15736-15738	or	
28-32	15739-15742	the	
28-33	15743-15749	backup	
28-34	15750-15754	will	
28-35	15755-15757	be	
28-36	15758-15771	automatically	
28-37	15772-15779	aborted	
28-38	15779-15780	.	
28-39	15781-15783	By	
28-40	15784-15791	default	
28-41	15791-15792	,	
28-42	15793-15808	pg_start_backup	
28-43	15809-15812	can	
28-44	15813-15817	take	
28-45	15818-15819	a	
28-46	15820-15824	long	
28-47	15825-15829	time	
28-48	15830-15832	to	
28-49	15833-15839	finish	
28-50	15839-15840	.	
28-51	15841-15845	This	
28-52	15846-15848	is	
28-53	15849-15856	because	
28-54	15857-15859	it	
28-55	15860-15868	performs	
28-56	15869-15870	a	
28-57	15871-15881	checkpoint	
28-58	15881-15882	,	
28-59	15883-15886	and	
28-60	15887-15890	the	
28-61	15891-15892	I	
28-62	15892-15893	/	
28-63	15893-15894	O	
28-64	15895-15903	required	
28-65	15904-15907	for	
28-66	15908-15911	the	
28-67	15912-15922	checkpoint	
28-68	15923-15927	will	
28-69	15928-15930	be	
28-70	15931-15937	spread	
28-71	15938-15941	out	
28-72	15942-15946	over	
28-73	15947-15948	a	
28-74	15949-15960	significant	
28-75	15961-15967	period	
28-76	15968-15970	of	
28-77	15971-15975	time	
28-78	15975-15976	,	
28-79	15977-15979	by	
28-80	15980-15987	default	
28-81	15988-15992	half	
28-82	15993-15997	your	
28-83	15998-16014	inter-checkpoint	
28-84	16015-16023	interval	
28-85	16024-16025	(	
28-86	16025-16028	see	
28-87	16029-16032	the	
28-88	16033-16046	configuration	
28-89	16047-16056	parameter	
28-90	16057-16085	checkpoint_completion_target	
28-91	16085-16086	)	
28-92	16086-16087	.	
28-93	16088-16092	This	
28-94	16093-16095	is	
28-95	16096-16103	usually	
28-96	16104-16108	what	
28-97	16109-16112	you	
28-98	16113-16117	want	
28-99	16117-16118	,	
28-100	16119-16126	because	
28-101	16127-16129	it	
28-102	16130-16139	minimizes	
28-103	16140-16143	the	
28-104	16144-16150	impact	
28-105	16151-16153	on	
28-106	16154-16159	query	
28-107	16160-16170	processing	
28-108	16170-16171	.	
28-109	16172-16174	If	
28-110	16175-16178	you	
28-111	16179-16183	want	
28-112	16184-16186	to	
28-113	16187-16192	start	
28-114	16193-16196	the	
28-115	16197-16203	backup	
28-116	16204-16206	as	
28-117	16207-16211	soon	
28-118	16212-16214	as	
28-119	16215-16223	possible	
28-120	16223-16224	,	
28-121	16225-16231	change	
28-122	16232-16235	the	
28-123	16236-16242	second	
28-124	16243-16252	parameter	
28-125	16253-16255	to	
28-126	16256-16260	true	
28-127	16260-16261	,	
28-128	16262-16267	which	
28-129	16268-16272	will	
28-130	16273-16278	issue	
28-131	16279-16281	an	
28-132	16282-16291	immediate	
28-133	16292-16302	checkpoint	
28-134	16303-16308	using	
28-135	16309-16311	as	
28-136	16312-16316	much	
28-137	16317-16318	I	
28-138	16318-16319	/	
28-139	16319-16320	O	
28-140	16321-16323	as	
28-141	16324-16333	available	
28-142	16333-16334	.	

#Text=The third parameter being false tells pg_start_backup to initiate a non-exclusive base backup. Perform the backup, using any convenient file-system-backup tool such as tar or cpio (not pg_dump or pg_dumpall). It is neither necessary nor desirable to stop normal operation of the database while you do this. See Section 25.3.3.3 for things to consider during this backup.
29-1	16335-16338	The	
29-2	16339-16344	third	
29-3	16345-16354	parameter	
29-4	16355-16360	being	
29-5	16361-16366	false	
29-6	16367-16372	tells	
29-7	16373-16388	pg_start_backup	
29-8	16389-16391	to	
29-9	16392-16400	initiate	
29-10	16401-16402	a	
29-11	16403-16416	non-exclusive	
29-12	16417-16421	base	
29-13	16422-16428	backup	
29-14	16428-16429	.	
29-15	16430-16437	Perform	
29-16	16438-16441	the	
29-17	16442-16448	backup	
29-18	16448-16449	,	
29-19	16450-16455	using	
29-20	16456-16459	any	
29-21	16460-16470	convenient	
29-22	16471-16489	file-system-backup	
29-23	16490-16494	tool	
29-24	16495-16499	such	
29-25	16500-16502	as	
29-26	16503-16506	tar	
29-27	16507-16509	or	
29-28	16510-16514	cpio	
29-29	16515-16516	(	
29-30	16516-16519	not	
29-31	16520-16527	pg_dump	
29-32	16528-16530	or	
29-33	16531-16541	pg_dumpall	
29-34	16541-16542	)	
29-35	16542-16543	.	
29-36	16544-16546	It	
29-37	16547-16549	is	
29-38	16550-16557	neither	
29-39	16558-16567	necessary	
29-40	16568-16571	nor	
29-41	16572-16581	desirable	
29-42	16582-16584	to	
29-43	16585-16589	stop	
29-44	16590-16596	normal	
29-45	16597-16606	operation	
29-46	16607-16609	of	
29-47	16610-16613	the	
29-48	16614-16622	database	
29-49	16623-16628	while	
29-50	16629-16632	you	
29-51	16633-16635	do	
29-52	16636-16640	this	
29-53	16640-16641	.	
29-54	16642-16645	See	
29-55	16646-16653	Section	
29-56	16653-16654	 	
29-57	16654-16662	25.3.3.3	
29-58	16663-16666	for	
29-59	16667-16673	things	
29-60	16674-16676	to	
29-61	16677-16685	consider	
29-62	16686-16692	during	
29-63	16693-16697	this	
29-64	16698-16704	backup	
29-65	16704-16705	.	

#Text=In the same connection as before, issue the command: SELECT * FROM pg_stop_backup(false, true);
30-1	16706-16708	In	
30-2	16709-16712	the	
30-3	16713-16717	same	
30-4	16718-16728	connection	
30-5	16729-16731	as	
30-6	16732-16738	before	
30-7	16738-16739	,	
30-8	16740-16745	issue	
30-9	16746-16749	the	
30-10	16750-16757	command	
30-11	16757-16758	:	
30-12	16759-16765	SELECT	
30-13	16766-16767	*	
30-14	16768-16772	FROM	
30-15	16773-16787	pg_stop_backup	
30-16	16787-16788	(	
30-17	16788-16793	false	
30-18	16793-16794	,	
30-19	16795-16799	true	
30-20	16799-16800	)	
30-21	16800-16801	;	

#Text=This terminates backup mode. On a primary, it also performs an automatic switch to the next WAL segment. On a standby, it is not possible to automatically switch WAL segments, so you may wish to run pg_switch_wal on the primary to perform a manual switch. The reason for the switch is to arrange for the last WAL segment file written during the backup interval to be ready to archive. The pg_stop_backup will return one row with three values. The second of these fields should be written to a file named backup_label in the root directory of the backup. The third field should be written to a file named tablespace_map unless the field is empty. These files are vital to the backup working, and must be written without modification.
31-1	16802-16806	This	
31-2	16807-16817	terminates	
31-3	16818-16824	backup	
31-4	16825-16829	mode	
31-5	16829-16830	.	
31-6	16831-16833	On	
31-7	16834-16835	a	
31-8	16836-16843	primary	
31-9	16843-16844	,	
31-10	16845-16847	it	
31-11	16848-16852	also	
31-12	16853-16861	performs	
31-13	16862-16864	an	
31-14	16865-16874	automatic	
31-15	16875-16881	switch	
31-16	16882-16884	to	
31-17	16885-16888	the	
31-18	16889-16893	next	
31-19	16894-16897	WAL	
31-20	16898-16905	segment	
31-21	16905-16906	.	
31-22	16907-16909	On	
31-23	16910-16911	a	
31-24	16912-16919	standby	
31-25	16919-16920	,	
31-26	16921-16923	it	
31-27	16924-16926	is	
31-28	16927-16930	not	
31-29	16931-16939	possible	
31-30	16940-16942	to	
31-31	16943-16956	automatically	
31-32	16957-16963	switch	
31-33	16964-16967	WAL	
31-34	16968-16976	segments	
31-35	16976-16977	,	
31-36	16978-16980	so	
31-37	16981-16984	you	
31-38	16985-16988	may	
31-39	16989-16993	wish	
31-40	16994-16996	to	
31-41	16997-17000	run	
31-42	17001-17014	pg_switch_wal	
31-43	17015-17017	on	
31-44	17018-17021	the	
31-45	17022-17029	primary	
31-46	17030-17032	to	
31-47	17033-17040	perform	
31-48	17041-17042	a	
31-49	17043-17049	manual	
31-50	17050-17056	switch	
31-51	17056-17057	.	
31-52	17058-17061	The	
31-53	17062-17068	reason	
31-54	17069-17072	for	
31-55	17073-17076	the	
31-56	17077-17083	switch	
31-57	17084-17086	is	
31-58	17087-17089	to	
31-59	17090-17097	arrange	
31-60	17098-17101	for	
31-61	17102-17105	the	
31-62	17106-17110	last	
31-63	17111-17114	WAL	
31-64	17115-17122	segment	
31-65	17123-17127	file	
31-66	17128-17135	written	
31-67	17136-17142	during	
31-68	17143-17146	the	
31-69	17147-17153	backup	
31-70	17154-17162	interval	
31-71	17163-17165	to	
31-72	17166-17168	be	
31-73	17169-17174	ready	
31-74	17175-17177	to	
31-75	17178-17185	archive	
31-76	17185-17186	.	
31-77	17187-17190	The	
31-78	17191-17205	pg_stop_backup	
31-79	17206-17210	will	
31-80	17211-17217	return	
31-81	17218-17221	one	
31-82	17222-17225	row	
31-83	17226-17230	with	
31-84	17231-17236	three	
31-85	17237-17243	values	
31-86	17243-17244	.	
31-87	17245-17248	The	
31-88	17249-17255	second	
31-89	17256-17258	of	
31-90	17259-17264	these	
31-91	17265-17271	fields	
31-92	17272-17278	should	
31-93	17279-17281	be	
31-94	17282-17289	written	
31-95	17290-17292	to	
31-96	17293-17294	a	
31-97	17295-17299	file	
31-98	17300-17305	named	
31-99	17306-17318	backup_label	
31-100	17319-17321	in	
31-101	17322-17325	the	
31-102	17326-17330	root	
31-103	17331-17340	directory	
31-104	17341-17343	of	
31-105	17344-17347	the	
31-106	17348-17354	backup	
31-107	17354-17355	.	
31-108	17356-17359	The	
31-109	17360-17365	third	
31-110	17366-17371	field	
31-111	17372-17378	should	
31-112	17379-17381	be	
31-113	17382-17389	written	
31-114	17390-17392	to	
31-115	17393-17394	a	
31-116	17395-17399	file	
31-117	17400-17405	named	
31-118	17406-17420	tablespace_map	
31-119	17421-17427	unless	
31-120	17428-17431	the	
31-121	17432-17437	field	
31-122	17438-17440	is	
31-123	17441-17446	empty	
31-124	17446-17447	.	
31-125	17448-17453	These	
31-126	17454-17459	files	
31-127	17460-17463	are	
31-128	17464-17469	vital	
31-129	17470-17472	to	
31-130	17473-17476	the	
31-131	17477-17483	backup	
31-132	17484-17491	working	
31-133	17491-17492	,	
31-134	17493-17496	and	
31-135	17497-17501	must	
31-136	17502-17504	be	
31-137	17505-17512	written	
31-138	17513-17520	without	
31-139	17521-17533	modification	
31-140	17533-17534	.	

#Text=Once the WAL segment files active during the backup are archived, you are done. The file identified by pg_stop_backup's first return value is the last segment that is required to form a complete set of backup files. On a primary, if archive_mode is enabled and the wait_for_archive parameter is true, pg_stop_backup does not return until the last segment has been archived. On a standby, archive_mode must be always in order for pg_stop_backup to wait. Archiving of these files happens automatically since you have already configured archive_command. In most cases this happens quickly, but you are advised to monitor your archive system to ensure there are no delays. If the archive process has fallen behind because of failures of the archive command, it will keep retrying until the archive succeeds and the backup is complete. If you wish to place a time limit on the execution of pg_stop_backup, set an appropriate statement_timeout value, but make note that if pg_stop_backup terminates because of this your backup may not be valid.
32-1	17535-17539	Once	
32-2	17540-17543	the	
32-3	17544-17547	WAL	
32-4	17548-17555	segment	
32-5	17556-17561	files	
32-6	17562-17568	active	
32-7	17569-17575	during	
32-8	17576-17579	the	
32-9	17580-17586	backup	
32-10	17587-17590	are	
32-11	17591-17599	archived	
32-12	17599-17600	,	
32-13	17601-17604	you	
32-14	17605-17608	are	
32-15	17609-17613	done	
32-16	17613-17614	.	
32-17	17615-17618	The	
32-18	17619-17623	file	
32-19	17624-17634	identified	
32-20	17635-17637	by	
32-21	17638-17654	pg_stop_backup's	
32-22	17655-17660	first	
32-23	17661-17667	return	
32-24	17668-17673	value	
32-25	17674-17676	is	
32-26	17677-17680	the	
32-27	17681-17685	last	
32-28	17686-17693	segment	
32-29	17694-17698	that	
32-30	17699-17701	is	
32-31	17702-17710	required	
32-32	17711-17713	to	
32-33	17714-17718	form	
32-34	17719-17720	a	
32-35	17721-17729	complete	
32-36	17730-17733	set	
32-37	17734-17736	of	
32-38	17737-17743	backup	
32-39	17744-17749	files	
32-40	17749-17750	.	
32-41	17751-17753	On	
32-42	17754-17755	a	
32-43	17756-17763	primary	
32-44	17763-17764	,	
32-45	17765-17767	if	
32-46	17768-17780	archive_mode	
32-47	17781-17783	is	
32-48	17784-17791	enabled	
32-49	17792-17795	and	
32-50	17796-17799	the	
32-51	17800-17816	wait_for_archive	
32-52	17817-17826	parameter	
32-53	17827-17829	is	
32-54	17830-17834	true	
32-55	17834-17835	,	
32-56	17836-17850	pg_stop_backup	
32-57	17851-17855	does	
32-58	17856-17859	not	
32-59	17860-17866	return	
32-60	17867-17872	until	
32-61	17873-17876	the	
32-62	17877-17881	last	
32-63	17882-17889	segment	
32-64	17890-17893	has	
32-65	17894-17898	been	
32-66	17899-17907	archived	
32-67	17907-17908	.	
32-68	17909-17911	On	
32-69	17912-17913	a	
32-70	17914-17921	standby	
32-71	17921-17922	,	
32-72	17923-17935	archive_mode	
32-73	17936-17940	must	
32-74	17941-17943	be	
32-75	17944-17950	always	
32-76	17951-17953	in	
32-77	17954-17959	order	
32-78	17960-17963	for	
32-79	17964-17978	pg_stop_backup	
32-80	17979-17981	to	
32-81	17982-17986	wait	
32-82	17986-17987	.	
32-83	17988-17997	Archiving	
32-84	17998-18000	of	
32-85	18001-18006	these	
32-86	18007-18012	files	
32-87	18013-18020	happens	
32-88	18021-18034	automatically	
32-89	18035-18040	since	
32-90	18041-18044	you	
32-91	18045-18049	have	
32-92	18050-18057	already	
32-93	18058-18068	configured	
32-94	18069-18084	archive_command	
32-95	18084-18085	.	
32-96	18086-18088	In	
32-97	18089-18093	most	
32-98	18094-18099	cases	
32-99	18100-18104	this	
32-100	18105-18112	happens	
32-101	18113-18120	quickly	
32-102	18120-18121	,	
32-103	18122-18125	but	
32-104	18126-18129	you	
32-105	18130-18133	are	
32-106	18134-18141	advised	
32-107	18142-18144	to	
32-108	18145-18152	monitor	
32-109	18153-18157	your	
32-110	18158-18165	archive	
32-111	18166-18172	system	
32-112	18173-18175	to	
32-113	18176-18182	ensure	
32-114	18183-18188	there	
32-115	18189-18192	are	
32-116	18193-18195	no	
32-117	18196-18202	delays	
32-118	18202-18203	.	
32-119	18204-18206	If	
32-120	18207-18210	the	
32-121	18211-18218	archive	
32-122	18219-18226	process	
32-123	18227-18230	has	
32-124	18231-18237	fallen	
32-125	18238-18244	behind	
32-126	18245-18252	because	
32-127	18253-18255	of	
32-128	18256-18264	failures	
32-129	18265-18267	of	
32-130	18268-18271	the	
32-131	18272-18279	archive	
32-132	18280-18287	command	
32-133	18287-18288	,	
32-134	18289-18291	it	
32-135	18292-18296	will	
32-136	18297-18301	keep	
32-137	18302-18310	retrying	
32-138	18311-18316	until	
32-139	18317-18320	the	
32-140	18321-18328	archive	
32-141	18329-18337	succeeds	
32-142	18338-18341	and	
32-143	18342-18345	the	
32-144	18346-18352	backup	
32-145	18353-18355	is	
32-146	18356-18364	complete	
32-147	18364-18365	.	
32-148	18366-18368	If	
32-149	18369-18372	you	
32-150	18373-18377	wish	
32-151	18378-18380	to	
32-152	18381-18386	place	
32-153	18387-18388	a	
32-154	18389-18393	time	
32-155	18394-18399	limit	
32-156	18400-18402	on	
32-157	18403-18406	the	
32-158	18407-18416	execution	
32-159	18417-18419	of	
32-160	18420-18434	pg_stop_backup	
32-161	18434-18435	,	
32-162	18436-18439	set	
32-163	18440-18442	an	
32-164	18443-18454	appropriate	
32-165	18455-18472	statement_timeout	
32-166	18473-18478	value	
32-167	18478-18479	,	
32-168	18480-18483	but	
32-169	18484-18488	make	
32-170	18489-18493	note	
32-171	18494-18498	that	
32-172	18499-18501	if	
32-173	18502-18516	pg_stop_backup	
32-174	18517-18527	terminates	
32-175	18528-18535	because	
32-176	18536-18538	of	
32-177	18539-18543	this	
32-178	18544-18548	your	
32-179	18549-18555	backup	
32-180	18556-18559	may	
32-181	18560-18563	not	
32-182	18564-18566	be	
32-183	18567-18572	valid	
32-184	18572-18573	.	

#Text=If the backup process monitors and ensures that all WAL segment files required for the backup are successfully archived then the wait_for_archive parameter (which defaults to true) can be set to false to have pg_stop_backup return as soon as the stop backup record is written to the WAL. By default, pg_stop_backup will wait until all WAL has been archived, which can take some time. This option must be used with caution: if WAL archiving is not monitored correctly then the backup might not include all of the WAL files and will therefore be incomplete and not able to be restored. 25.3.3.2. Making an Exclusive Low-Level Backup Note The exclusive backup method is deprecated and should be avoided. Prior to PostgreSQL 9.6, this was the only low-level method available, but it is now recommended that all users upgrade their scripts to use non-exclusive backups.
33-1	18574-18576	If	
33-2	18577-18580	the	
33-3	18581-18587	backup	
33-4	18588-18595	process	
33-5	18596-18604	monitors	
33-6	18605-18608	and	
33-7	18609-18616	ensures	
33-8	18617-18621	that	
33-9	18622-18625	all	
33-10	18626-18629	WAL	
33-11	18630-18637	segment	
33-12	18638-18643	files	
33-13	18644-18652	required	
33-14	18653-18656	for	
33-15	18657-18660	the	
33-16	18661-18667	backup	
33-17	18668-18671	are	
33-18	18672-18684	successfully	
33-19	18685-18693	archived	
33-20	18694-18698	then	
33-21	18699-18702	the	
33-22	18703-18719	wait_for_archive	
33-23	18720-18729	parameter	
33-24	18730-18731	(	
33-25	18731-18736	which	
33-26	18737-18745	defaults	
33-27	18746-18748	to	
33-28	18749-18753	true	
33-29	18753-18754	)	
33-30	18755-18758	can	
33-31	18759-18761	be	
33-32	18762-18765	set	
33-33	18766-18768	to	
33-34	18769-18774	false	
33-35	18775-18777	to	
33-36	18778-18782	have	
33-37	18783-18797	pg_stop_backup	
33-38	18798-18804	return	
33-39	18805-18807	as	
33-40	18808-18812	soon	
33-41	18813-18815	as	
33-42	18816-18819	the	
33-43	18820-18824	stop	
33-44	18825-18831	backup	
33-45	18832-18838	record	
33-46	18839-18841	is	
33-47	18842-18849	written	
33-48	18850-18852	to	
33-49	18853-18856	the	
33-50	18857-18860	WAL	
33-51	18860-18861	.	
33-52	18862-18864	By	
33-53	18865-18872	default	
33-54	18872-18873	,	
33-55	18874-18888	pg_stop_backup	
33-56	18889-18893	will	
33-57	18894-18898	wait	
33-58	18899-18904	until	
33-59	18905-18908	all	
33-60	18909-18912	WAL	
33-61	18913-18916	has	
33-62	18917-18921	been	
33-63	18922-18930	archived	
33-64	18930-18931	,	
33-65	18932-18937	which	
33-66	18938-18941	can	
33-67	18942-18946	take	
33-68	18947-18951	some	
33-69	18952-18956	time	
33-70	18956-18957	.	
33-71	18958-18962	This	
33-72	18963-18969	option	
33-73	18970-18974	must	
33-74	18975-18977	be	
33-75	18978-18982	used	
33-76	18983-18987	with	
33-77	18988-18995	caution	
33-78	18995-18996	:	
33-79	18997-18999	if	
33-80	19000-19003	WAL	
33-81	19004-19013	archiving	
33-82	19014-19016	is	
33-83	19017-19020	not	
33-84	19021-19030	monitored	
33-85	19031-19040	correctly	
33-86	19041-19045	then	
33-87	19046-19049	the	
33-88	19050-19056	backup	
33-89	19057-19062	might	
33-90	19063-19066	not	
33-91	19067-19074	include	
33-92	19075-19078	all	
33-93	19079-19081	of	
33-94	19082-19085	the	
33-95	19086-19089	WAL	
33-96	19090-19095	files	
33-97	19096-19099	and	
33-98	19100-19104	will	
33-99	19105-19114	therefore	
33-100	19115-19117	be	
33-101	19118-19128	incomplete	
33-102	19129-19132	and	
33-103	19133-19136	not	
33-104	19137-19141	able	
33-105	19142-19144	to	
33-106	19145-19147	be	
33-107	19148-19156	restored	
33-108	19156-19157	.	
33-109	19158-19166	25.3.3.2	
33-110	19166-19167	.	
33-111	19167-19168	 	
33-112	19168-19174	Making	
33-113	19175-19177	an	
33-114	19178-19187	Exclusive	
33-115	19188-19197	Low-Level	
33-116	19198-19204	Backup	
33-117	19205-19209	Note	
33-118	19210-19213	The	
33-119	19214-19223	exclusive	
33-120	19224-19230	backup	
33-121	19231-19237	method	
33-122	19238-19240	is	
33-123	19241-19251	deprecated	
33-124	19252-19255	and	
33-125	19256-19262	should	
33-126	19263-19265	be	
33-127	19266-19273	avoided	
33-128	19273-19274	.	
33-129	19275-19280	Prior	
33-130	19281-19283	to	
33-131	19284-19294	PostgreSQL	
33-132	19295-19298	9.6	
33-133	19298-19299	,	
33-134	19300-19304	this	
33-135	19305-19308	was	
33-136	19309-19312	the	
33-137	19313-19317	only	
33-138	19318-19327	low-level	
33-139	19328-19334	method	
33-140	19335-19344	available	
33-141	19344-19345	,	
33-142	19346-19349	but	
33-143	19350-19352	it	
33-144	19353-19355	is	
33-145	19356-19359	now	
33-146	19360-19371	recommended	
33-147	19372-19376	that	
33-148	19377-19380	all	
33-149	19381-19386	users	
33-150	19387-19394	upgrade	
33-151	19395-19400	their	
33-152	19401-19408	scripts	
33-153	19409-19411	to	
33-154	19412-19415	use	
33-155	19416-19429	non-exclusive	
33-156	19430-19437	backups	
33-157	19437-19438	.	

#Text=The process for an exclusive backup is mostly the same as for a non-exclusive one, but it differs in a few key steps. This type of backup can only be taken on a primary and does not allow concurrent backups. Moreover, because it creates a backup label file, as described below, it can block automatic restart of the master server after a crash. On the other hand, the erroneous removal of this file from a backup or standby is a common mistake, which can result in serious data corruption. If it is necessary to use this method, the following steps may be used. Ensure that WAL archiving is enabled and working. Connect to the server (it does not matter which database) as a user with rights to run pg_start_backup (superuser, or a user who has been granted EXECUTE on the function) and issue the command:
34-1	19439-19442	The	
34-2	19443-19450	process	
34-3	19451-19454	for	
34-4	19455-19457	an	
34-5	19458-19467	exclusive	
34-6	19468-19474	backup	
34-7	19475-19477	is	
34-8	19478-19484	mostly	
34-9	19485-19488	the	
34-10	19489-19493	same	
34-11	19494-19496	as	
34-12	19497-19500	for	
34-13	19501-19502	a	
34-14	19503-19516	non-exclusive	
34-15	19517-19520	one	
34-16	19520-19521	,	
34-17	19522-19525	but	
34-18	19526-19528	it	
34-19	19529-19536	differs	
34-20	19537-19539	in	
34-21	19540-19541	a	
34-22	19542-19545	few	
34-23	19546-19549	key	
34-24	19550-19555	steps	
34-25	19555-19556	.	
34-26	19557-19561	This	
34-27	19562-19566	type	
34-28	19567-19569	of	
34-29	19570-19576	backup	
34-30	19577-19580	can	
34-31	19581-19585	only	
34-32	19586-19588	be	
34-33	19589-19594	taken	
34-34	19595-19597	on	
34-35	19598-19599	a	
34-36	19600-19607	primary	
34-37	19608-19611	and	
34-38	19612-19616	does	
34-39	19617-19620	not	
34-40	19621-19626	allow	
34-41	19627-19637	concurrent	
34-42	19638-19645	backups	
34-43	19645-19646	.	
34-44	19647-19655	Moreover	
34-45	19655-19656	,	
34-46	19657-19664	because	
34-47	19665-19667	it	
34-48	19668-19675	creates	
34-49	19676-19677	a	
34-50	19678-19684	backup	
34-51	19685-19690	label	
34-52	19691-19695	file	
34-53	19695-19696	,	
34-54	19697-19699	as	
34-55	19700-19709	described	
34-56	19710-19715	below	
34-57	19715-19716	,	
34-58	19717-19719	it	
34-59	19720-19723	can	
34-60	19724-19729	block	
34-61	19730-19739	automatic	
34-62	19740-19747	restart	
34-63	19748-19750	of	
34-64	19751-19754	the	
34-65	19755-19761	master	
34-66	19762-19768	server	
34-67	19769-19774	after	
34-68	19775-19776	a	
34-69	19777-19782	crash	
34-70	19782-19783	.	
34-71	19784-19786	On	
34-72	19787-19790	the	
34-73	19791-19796	other	
34-74	19797-19801	hand	
34-75	19801-19802	,	
34-76	19803-19806	the	
34-77	19807-19816	erroneous	
34-78	19817-19824	removal	
34-79	19825-19827	of	
34-80	19828-19832	this	
34-81	19833-19837	file	
34-82	19838-19842	from	
34-83	19843-19844	a	
34-84	19845-19851	backup	
34-85	19852-19854	or	
34-86	19855-19862	standby	
34-87	19863-19865	is	
34-88	19866-19867	a	
34-89	19868-19874	common	
34-90	19875-19882	mistake	
34-91	19882-19883	,	
34-92	19884-19889	which	
34-93	19890-19893	can	
34-94	19894-19900	result	
34-95	19901-19903	in	
34-96	19904-19911	serious	
34-97	19912-19916	data	
34-98	19917-19927	corruption	
34-99	19927-19928	.	
34-100	19929-19931	If	
34-101	19932-19934	it	
34-102	19935-19937	is	
34-103	19938-19947	necessary	
34-104	19948-19950	to	
34-105	19951-19954	use	
34-106	19955-19959	this	
34-107	19960-19966	method	
34-108	19966-19967	,	
34-109	19968-19971	the	
34-110	19972-19981	following	
34-111	19982-19987	steps	
34-112	19988-19991	may	
34-113	19992-19994	be	
34-114	19995-19999	used	
34-115	19999-20000	.	
34-116	20001-20007	Ensure	
34-117	20008-20012	that	
34-118	20013-20016	WAL	
34-119	20017-20026	archiving	
34-120	20027-20029	is	
34-121	20030-20037	enabled	
34-122	20038-20041	and	
34-123	20042-20049	working	
34-124	20049-20050	.	
34-125	20051-20058	Connect	
34-126	20059-20061	to	
34-127	20062-20065	the	
34-128	20066-20072	server	
34-129	20073-20074	(	
34-130	20074-20076	it	
34-131	20077-20081	does	
34-132	20082-20085	not	
34-133	20086-20092	matter	
34-134	20093-20098	which	
34-135	20099-20107	database	
34-136	20107-20108	)	
34-137	20109-20111	as	
34-138	20112-20113	a	
34-139	20114-20118	user	
34-140	20119-20123	with	
34-141	20124-20130	rights	
34-142	20131-20133	to	
34-143	20134-20137	run	
34-144	20138-20153	pg_start_backup	
34-145	20154-20155	(	
34-146	20155-20164	superuser	
34-147	20164-20165	,	
34-148	20166-20168	or	
34-149	20169-20170	a	
34-150	20171-20175	user	
34-151	20176-20179	who	
34-152	20180-20183	has	
34-153	20184-20188	been	
34-154	20189-20196	granted	
34-155	20197-20204	EXECUTE	
34-156	20205-20207	on	
34-157	20208-20211	the	
34-158	20212-20220	function	
34-159	20220-20221	)	
34-160	20222-20225	and	
34-161	20226-20231	issue	
34-162	20232-20235	the	
34-163	20236-20243	command	
34-164	20243-20244	:	

#Text=SELECT pg_start_backup('label'); where label is any string you want to use to uniquely identify this backup operation. pg_start_backup creates a backup label file, called backup_label, in the cluster directory with information about your backup, including the start time and label string. The function also creates a tablespace map file, called tablespace_map, in the cluster directory with information about tablespace symbolic links in pg_tblspc/ if one or more such link is present. Both files are critical to the integrity of the backup, should you need to restore from it.
35-1	20245-20251	SELECT	
35-2	20252-20267	pg_start_backup	
35-3	20267-20268	(	
35-4	20268-20269	'	
35-5	20269-20274	label	
35-6	20274-20275	'	
35-7	20275-20276	)	
35-8	20276-20277	;	
35-9	20278-20283	where	
35-10	20284-20289	label	
35-11	20290-20292	is	
35-12	20293-20296	any	
35-13	20297-20303	string	
35-14	20304-20307	you	
35-15	20308-20312	want	
35-16	20313-20315	to	
35-17	20316-20319	use	
35-18	20320-20322	to	
35-19	20323-20331	uniquely	
35-20	20332-20340	identify	
35-21	20341-20345	this	
35-22	20346-20352	backup	
35-23	20353-20362	operation	
35-24	20362-20363	.	
35-25	20364-20379	pg_start_backup	
35-26	20380-20387	creates	
35-27	20388-20389	a	
35-28	20390-20396	backup	
35-29	20397-20402	label	
35-30	20403-20407	file	
35-31	20407-20408	,	
35-32	20409-20415	called	
35-33	20416-20428	backup_label	
35-34	20428-20429	,	
35-35	20430-20432	in	
35-36	20433-20436	the	
35-37	20437-20444	cluster	
35-38	20445-20454	directory	
35-39	20455-20459	with	
35-40	20460-20471	information	
35-41	20472-20477	about	
35-42	20478-20482	your	
35-43	20483-20489	backup	
35-44	20489-20490	,	
35-45	20491-20500	including	
35-46	20501-20504	the	
35-47	20505-20510	start	
35-48	20511-20515	time	
35-49	20516-20519	and	
35-50	20520-20525	label	
35-51	20526-20532	string	
35-52	20532-20533	.	
35-53	20534-20537	The	
35-54	20538-20546	function	
35-55	20547-20551	also	
35-56	20552-20559	creates	
35-57	20560-20561	a	
35-58	20562-20572	tablespace	
35-59	20573-20576	map	
35-60	20577-20581	file	
35-61	20581-20582	,	
35-62	20583-20589	called	
35-63	20590-20604	tablespace_map	
35-64	20604-20605	,	
35-65	20606-20608	in	
35-66	20609-20612	the	
35-67	20613-20620	cluster	
35-68	20621-20630	directory	
35-69	20631-20635	with	
35-70	20636-20647	information	
35-71	20648-20653	about	
35-72	20654-20664	tablespace	
35-73	20665-20673	symbolic	
35-74	20674-20679	links	
35-75	20680-20682	in	
35-76	20683-20692	pg_tblspc	
35-77	20692-20693	/	
35-78	20694-20696	if	
35-79	20697-20700	one	
35-80	20701-20703	or	
35-81	20704-20708	more	
35-82	20709-20713	such	
35-83	20714-20718	link	
35-84	20719-20721	is	
35-85	20722-20729	present	
35-86	20729-20730	.	
35-87	20731-20735	Both	
35-88	20736-20741	files	
35-89	20742-20745	are	
35-90	20746-20754	critical	
35-91	20755-20757	to	
35-92	20758-20761	the	
35-93	20762-20771	integrity	
35-94	20772-20774	of	
35-95	20775-20778	the	
35-96	20779-20785	backup	
35-97	20785-20786	,	
35-98	20787-20793	should	
35-99	20794-20797	you	
35-100	20798-20802	need	
35-101	20803-20805	to	
35-102	20806-20813	restore	
35-103	20814-20818	from	
35-104	20819-20821	it	
35-105	20821-20822	.	

#Text=By default, pg_start_backup can take a long time to finish. This is because it performs a checkpoint, and the I/O required for the checkpoint will be spread out over a significant period of time, by default half your inter-checkpoint interval (see the configuration parameter checkpoint_completion_target). This is usually what you want, because it minimizes the impact on query processing. If you want to start the backup as soon as possible, use: SELECT pg_start_backup('label', true); This forces the checkpoint to be done as quickly as possible.
36-1	20823-20825	By	
36-2	20826-20833	default	
36-3	20833-20834	,	
36-4	20835-20850	pg_start_backup	
36-5	20851-20854	can	
36-6	20855-20859	take	
36-7	20860-20861	a	
36-8	20862-20866	long	
36-9	20867-20871	time	
36-10	20872-20874	to	
36-11	20875-20881	finish	
36-12	20881-20882	.	
36-13	20883-20887	This	
36-14	20888-20890	is	
36-15	20891-20898	because	
36-16	20899-20901	it	
36-17	20902-20910	performs	
36-18	20911-20912	a	
36-19	20913-20923	checkpoint	
36-20	20923-20924	,	
36-21	20925-20928	and	
36-22	20929-20932	the	
36-23	20933-20934	I	
36-24	20934-20935	/	
36-25	20935-20936	O	
36-26	20937-20945	required	
36-27	20946-20949	for	
36-28	20950-20953	the	
36-29	20954-20964	checkpoint	
36-30	20965-20969	will	
36-31	20970-20972	be	
36-32	20973-20979	spread	
36-33	20980-20983	out	
36-34	20984-20988	over	
36-35	20989-20990	a	
36-36	20991-21002	significant	
36-37	21003-21009	period	
36-38	21010-21012	of	
36-39	21013-21017	time	
36-40	21017-21018	,	
36-41	21019-21021	by	
36-42	21022-21029	default	
36-43	21030-21034	half	
36-44	21035-21039	your	
36-45	21040-21056	inter-checkpoint	
36-46	21057-21065	interval	
36-47	21066-21067	(	
36-48	21067-21070	see	
36-49	21071-21074	the	
36-50	21075-21088	configuration	
36-51	21089-21098	parameter	
36-52	21099-21127	checkpoint_completion_target	
36-53	21127-21128	)	
36-54	21128-21129	.	
36-55	21130-21134	This	
36-56	21135-21137	is	
36-57	21138-21145	usually	
36-58	21146-21150	what	
36-59	21151-21154	you	
36-60	21155-21159	want	
36-61	21159-21160	,	
36-62	21161-21168	because	
36-63	21169-21171	it	
36-64	21172-21181	minimizes	
36-65	21182-21185	the	
36-66	21186-21192	impact	
36-67	21193-21195	on	
36-68	21196-21201	query	
36-69	21202-21212	processing	
36-70	21212-21213	.	
36-71	21214-21216	If	
36-72	21217-21220	you	
36-73	21221-21225	want	
36-74	21226-21228	to	
36-75	21229-21234	start	
36-76	21235-21238	the	
36-77	21239-21245	backup	
36-78	21246-21248	as	
36-79	21249-21253	soon	
36-80	21254-21256	as	
36-81	21257-21265	possible	
36-82	21265-21266	,	
36-83	21267-21270	use	
36-84	21270-21271	:	
36-85	21272-21278	SELECT	
36-86	21279-21294	pg_start_backup	
36-87	21294-21295	(	
36-88	21295-21296	'	
36-89	21296-21301	label	
36-90	21301-21302	'	
36-91	21302-21303	,	
36-92	21304-21308	true	
36-93	21308-21309	)	
36-94	21309-21310	;	
36-95	21311-21315	This	
36-96	21316-21322	forces	
36-97	21323-21326	the	
36-98	21327-21337	checkpoint	
36-99	21338-21340	to	
36-100	21341-21343	be	
36-101	21344-21348	done	
36-102	21349-21351	as	
36-103	21352-21359	quickly	
36-104	21360-21362	as	
36-105	21363-21371	possible	
36-106	21371-21372	.	

#Text=Perform the backup, using any convenient file-system-backup tool such as tar or cpio (not pg_dump or pg_dumpall). It is neither necessary nor desirable to stop normal operation of the database while you do this. See Section 25.3.3.3 for things to consider during this backup.
37-1	21373-21380	Perform	
37-2	21381-21384	the	
37-3	21385-21391	backup	
37-4	21391-21392	,	
37-5	21393-21398	using	
37-6	21399-21402	any	
37-7	21403-21413	convenient	
37-8	21414-21432	file-system-backup	
37-9	21433-21437	tool	
37-10	21438-21442	such	
37-11	21443-21445	as	
37-12	21446-21449	tar	
37-13	21450-21452	or	
37-14	21453-21457	cpio	
37-15	21458-21459	(	
37-16	21459-21462	not	
37-17	21463-21470	pg_dump	
37-18	21471-21473	or	
37-19	21474-21484	pg_dumpall	
37-20	21484-21485	)	
37-21	21485-21486	.	
37-22	21487-21489	It	
37-23	21490-21492	is	
37-24	21493-21500	neither	
37-25	21501-21510	necessary	
37-26	21511-21514	nor	
37-27	21515-21524	desirable	
37-28	21525-21527	to	
37-29	21528-21532	stop	
37-30	21533-21539	normal	
37-31	21540-21549	operation	
37-32	21550-21552	of	
37-33	21553-21556	the	
37-34	21557-21565	database	
37-35	21566-21571	while	
37-36	21572-21575	you	
37-37	21576-21578	do	
37-38	21579-21583	this	
37-39	21583-21584	.	
37-40	21585-21588	See	
37-41	21589-21596	Section	
37-42	21596-21597	 	
37-43	21597-21605	25.3.3.3	
37-44	21606-21609	for	
37-45	21610-21616	things	
37-46	21617-21619	to	
37-47	21620-21628	consider	
37-48	21629-21635	during	
37-49	21636-21640	this	
37-50	21641-21647	backup	
37-51	21647-21648	.	

#Text=As noted above, if the server crashes during the backup it may not be possible to restart until the backup_label file has been manually deleted from the PGDATA directory. Note that it is very important to never remove the backup_label file when restoring a backup, because this will result in corruption. Confusion about when it is appropriate to remove this file is a common cause of data corruption when using this method; be very certain that you remove the file only on an existing master and never when building a standby or restoring a backup, even if you are building a standby that will subsequently be promoted to a new master. Again connect to the database as a user with rights to run pg_stop_backup (superuser, or a user who has been granted EXECUTE on the function), and issue the command: SELECT pg_stop_backup();
38-1	21649-21651	As	
38-2	21652-21657	noted	
38-3	21658-21663	above	
38-4	21663-21664	,	
38-5	21665-21667	if	
38-6	21668-21671	the	
38-7	21672-21678	server	
38-8	21679-21686	crashes	
38-9	21687-21693	during	
38-10	21694-21697	the	
38-11	21698-21704	backup	
38-12	21705-21707	it	
38-13	21708-21711	may	
38-14	21712-21715	not	
38-15	21716-21718	be	
38-16	21719-21727	possible	
38-17	21728-21730	to	
38-18	21731-21738	restart	
38-19	21739-21744	until	
38-20	21745-21748	the	
38-21	21749-21761	backup_label	
38-22	21762-21766	file	
38-23	21767-21770	has	
38-24	21771-21775	been	
38-25	21776-21784	manually	
38-26	21785-21792	deleted	
38-27	21793-21797	from	
38-28	21798-21801	the	
38-29	21802-21808	PGDATA	
38-30	21809-21818	directory	
38-31	21818-21819	.	
38-32	21820-21824	Note	
38-33	21825-21829	that	
38-34	21830-21832	it	
38-35	21833-21835	is	
38-36	21836-21840	very	
38-37	21841-21850	important	
38-38	21851-21853	to	
38-39	21854-21859	never	
38-40	21860-21866	remove	
38-41	21867-21870	the	
38-42	21871-21883	backup_label	
38-43	21884-21888	file	
38-44	21889-21893	when	
38-45	21894-21903	restoring	
38-46	21904-21905	a	
38-47	21906-21912	backup	
38-48	21912-21913	,	
38-49	21914-21921	because	
38-50	21922-21926	this	
38-51	21927-21931	will	
38-52	21932-21938	result	
38-53	21939-21941	in	
38-54	21942-21952	corruption	
38-55	21952-21953	.	
38-56	21954-21963	Confusion	
38-57	21964-21969	about	
38-58	21970-21974	when	
38-59	21975-21977	it	
38-60	21978-21980	is	
38-61	21981-21992	appropriate	
38-62	21993-21995	to	
38-63	21996-22002	remove	
38-64	22003-22007	this	
38-65	22008-22012	file	
38-66	22013-22015	is	
38-67	22016-22017	a	
38-68	22018-22024	common	
38-69	22025-22030	cause	
38-70	22031-22033	of	
38-71	22034-22038	data	
38-72	22039-22049	corruption	
38-73	22050-22054	when	
38-74	22055-22060	using	
38-75	22061-22065	this	
38-76	22066-22072	method	
38-77	22072-22073	;	
38-78	22074-22076	be	
38-79	22077-22081	very	
38-80	22082-22089	certain	
38-81	22090-22094	that	
38-82	22095-22098	you	
38-83	22099-22105	remove	
38-84	22106-22109	the	
38-85	22110-22114	file	
38-86	22115-22119	only	
38-87	22120-22122	on	
38-88	22123-22125	an	
38-89	22126-22134	existing	
38-90	22135-22141	master	
38-91	22142-22145	and	
38-92	22146-22151	never	
38-93	22152-22156	when	
38-94	22157-22165	building	
38-95	22166-22167	a	
38-96	22168-22175	standby	
38-97	22176-22178	or	
38-98	22179-22188	restoring	
38-99	22189-22190	a	
38-100	22191-22197	backup	
38-101	22197-22198	,	
38-102	22199-22203	even	
38-103	22204-22206	if	
38-104	22207-22210	you	
38-105	22211-22214	are	
38-106	22215-22223	building	
38-107	22224-22225	a	
38-108	22226-22233	standby	
38-109	22234-22238	that	
38-110	22239-22243	will	
38-111	22244-22256	subsequently	
38-112	22257-22259	be	
38-113	22260-22268	promoted	
38-114	22269-22271	to	
38-115	22272-22273	a	
38-116	22274-22277	new	
38-117	22278-22284	master	
38-118	22284-22285	.	
38-119	22286-22291	Again	
38-120	22292-22299	connect	
38-121	22300-22302	to	
38-122	22303-22306	the	
38-123	22307-22315	database	
38-124	22316-22318	as	
38-125	22319-22320	a	
38-126	22321-22325	user	
38-127	22326-22330	with	
38-128	22331-22337	rights	
38-129	22338-22340	to	
38-130	22341-22344	run	
38-131	22345-22359	pg_stop_backup	
38-132	22360-22361	(	
38-133	22361-22370	superuser	
38-134	22370-22371	,	
38-135	22372-22374	or	
38-136	22375-22376	a	
38-137	22377-22381	user	
38-138	22382-22385	who	
38-139	22386-22389	has	
38-140	22390-22394	been	
38-141	22395-22402	granted	
38-142	22403-22410	EXECUTE	
38-143	22411-22413	on	
38-144	22414-22417	the	
38-145	22418-22426	function	
38-146	22426-22427	)	
38-147	22427-22428	,	
38-148	22429-22432	and	
38-149	22433-22438	issue	
38-150	22439-22442	the	
38-151	22443-22450	command	
38-152	22450-22451	:	
38-153	22452-22458	SELECT	
38-154	22459-22473	pg_stop_backup	
38-155	22473-22474	(	
38-156	22474-22475	)	
38-157	22475-22476	;	

#Text=This function terminates backup mode and performs an automatic switch to the next WAL segment. The reason for the switch is to arrange for the last WAL segment written during the backup interval to be ready to archive.
39-1	22477-22481	This	
39-2	22482-22490	function	
39-3	22491-22501	terminates	
39-4	22502-22508	backup	
39-5	22509-22513	mode	
39-6	22514-22517	and	
39-7	22518-22526	performs	
39-8	22527-22529	an	
39-9	22530-22539	automatic	
39-10	22540-22546	switch	
39-11	22547-22549	to	
39-12	22550-22553	the	
39-13	22554-22558	next	
39-14	22559-22562	WAL	
39-15	22563-22570	segment	
39-16	22570-22571	.	
39-17	22572-22575	The	
39-18	22576-22582	reason	
39-19	22583-22586	for	
39-20	22587-22590	the	
39-21	22591-22597	switch	
39-22	22598-22600	is	
39-23	22601-22603	to	
39-24	22604-22611	arrange	
39-25	22612-22615	for	
39-26	22616-22619	the	
39-27	22620-22624	last	
39-28	22625-22628	WAL	
39-29	22629-22636	segment	
39-30	22637-22644	written	
39-31	22645-22651	during	
39-32	22652-22655	the	
39-33	22656-22662	backup	
39-34	22663-22671	interval	
39-35	22672-22674	to	
39-36	22675-22677	be	
39-37	22678-22683	ready	
39-38	22684-22686	to	
39-39	22687-22694	archive	
39-40	22694-22695	.	

#Text=Once the WAL segment files active during the backup are archived, you are done. The file identified by pg_stop_backup's result is the last segment that is required to form a complete set of backup files. If archive_mode is enabled, pg_stop_backup does not return until the last segment has been archived. Archiving of these files happens automatically since you have already configured archive_command. In most cases this happens quickly, but you are advised to monitor your archive system to ensure there are no delays. If the archive process has fallen behind because of failures of the archive command, it will keep retrying until the archive succeeds and the backup is complete. When using exclusive backup mode, it is absolutely imperative to ensure that pg_stop_backup completes successfully at the end of the backup. Even if the backup itself fails, for example due to lack of disk space, failure to call pg_stop_backup will leave the server in backup mode indefinitely, causing future backups to fail and increasing the risk of a restart failure during the time that backup_label exists.
40-1	22696-22700	Once	
40-2	22701-22704	the	
40-3	22705-22708	WAL	
40-4	22709-22716	segment	
40-5	22717-22722	files	
40-6	22723-22729	active	
40-7	22730-22736	during	
40-8	22737-22740	the	
40-9	22741-22747	backup	
40-10	22748-22751	are	
40-11	22752-22760	archived	
40-12	22760-22761	,	
40-13	22762-22765	you	
40-14	22766-22769	are	
40-15	22770-22774	done	
40-16	22774-22775	.	
40-17	22776-22779	The	
40-18	22780-22784	file	
40-19	22785-22795	identified	
40-20	22796-22798	by	
40-21	22799-22815	pg_stop_backup's	
40-22	22816-22822	result	
40-23	22823-22825	is	
40-24	22826-22829	the	
40-25	22830-22834	last	
40-26	22835-22842	segment	
40-27	22843-22847	that	
40-28	22848-22850	is	
40-29	22851-22859	required	
40-30	22860-22862	to	
40-31	22863-22867	form	
40-32	22868-22869	a	
40-33	22870-22878	complete	
40-34	22879-22882	set	
40-35	22883-22885	of	
40-36	22886-22892	backup	
40-37	22893-22898	files	
40-38	22898-22899	.	
40-39	22900-22902	If	
40-40	22903-22915	archive_mode	
40-41	22916-22918	is	
40-42	22919-22926	enabled	
40-43	22926-22927	,	
40-44	22928-22942	pg_stop_backup	
40-45	22943-22947	does	
40-46	22948-22951	not	
40-47	22952-22958	return	
40-48	22959-22964	until	
40-49	22965-22968	the	
40-50	22969-22973	last	
40-51	22974-22981	segment	
40-52	22982-22985	has	
40-53	22986-22990	been	
40-54	22991-22999	archived	
40-55	22999-23000	.	
40-56	23001-23010	Archiving	
40-57	23011-23013	of	
40-58	23014-23019	these	
40-59	23020-23025	files	
40-60	23026-23033	happens	
40-61	23034-23047	automatically	
40-62	23048-23053	since	
40-63	23054-23057	you	
40-64	23058-23062	have	
40-65	23063-23070	already	
40-66	23071-23081	configured	
40-67	23082-23097	archive_command	
40-68	23097-23098	.	
40-69	23099-23101	In	
40-70	23102-23106	most	
40-71	23107-23112	cases	
40-72	23113-23117	this	
40-73	23118-23125	happens	
40-74	23126-23133	quickly	
40-75	23133-23134	,	
40-76	23135-23138	but	
40-77	23139-23142	you	
40-78	23143-23146	are	
40-79	23147-23154	advised	
40-80	23155-23157	to	
40-81	23158-23165	monitor	
40-82	23166-23170	your	
40-83	23171-23178	archive	
40-84	23179-23185	system	
40-85	23186-23188	to	
40-86	23189-23195	ensure	
40-87	23196-23201	there	
40-88	23202-23205	are	
40-89	23206-23208	no	
40-90	23209-23215	delays	
40-91	23215-23216	.	
40-92	23217-23219	If	
40-93	23220-23223	the	
40-94	23224-23231	archive	
40-95	23232-23239	process	
40-96	23240-23243	has	
40-97	23244-23250	fallen	
40-98	23251-23257	behind	
40-99	23258-23265	because	
40-100	23266-23268	of	
40-101	23269-23277	failures	
40-102	23278-23280	of	
40-103	23281-23284	the	
40-104	23285-23292	archive	
40-105	23293-23300	command	
40-106	23300-23301	,	
40-107	23302-23304	it	
40-108	23305-23309	will	
40-109	23310-23314	keep	
40-110	23315-23323	retrying	
40-111	23324-23329	until	
40-112	23330-23333	the	
40-113	23334-23341	archive	
40-114	23342-23350	succeeds	
40-115	23351-23354	and	
40-116	23355-23358	the	
40-117	23359-23365	backup	
40-118	23366-23368	is	
40-119	23369-23377	complete	
40-120	23377-23378	.	
40-121	23379-23383	When	
40-122	23384-23389	using	
40-123	23390-23399	exclusive	
40-124	23400-23406	backup	
40-125	23407-23411	mode	
40-126	23411-23412	,	
40-127	23413-23415	it	
40-128	23416-23418	is	
40-129	23419-23429	absolutely	
40-130	23430-23440	imperative	
40-131	23441-23443	to	
40-132	23444-23450	ensure	
40-133	23451-23455	that	
40-134	23456-23470	pg_stop_backup	
40-135	23471-23480	completes	
40-136	23481-23493	successfully	
40-137	23494-23496	at	
40-138	23497-23500	the	
40-139	23501-23504	end	
40-140	23505-23507	of	
40-141	23508-23511	the	
40-142	23512-23518	backup	
40-143	23518-23519	.	
40-144	23520-23524	Even	
40-145	23525-23527	if	
40-146	23528-23531	the	
40-147	23532-23538	backup	
40-148	23539-23545	itself	
40-149	23546-23551	fails	
40-150	23551-23552	,	
40-151	23553-23556	for	
40-152	23557-23564	example	
40-153	23565-23568	due	
40-154	23569-23571	to	
40-155	23572-23576	lack	
40-156	23577-23579	of	
40-157	23580-23584	disk	
40-158	23585-23590	space	
40-159	23590-23591	,	
40-160	23592-23599	failure	
40-161	23600-23602	to	
40-162	23603-23607	call	
40-163	23608-23622	pg_stop_backup	
40-164	23623-23627	will	
40-165	23628-23633	leave	
40-166	23634-23637	the	
40-167	23638-23644	server	
40-168	23645-23647	in	
40-169	23648-23654	backup	
40-170	23655-23659	mode	
40-171	23660-23672	indefinitely	
40-172	23672-23673	,	
40-173	23674-23681	causing	
40-174	23682-23688	future	
40-175	23689-23696	backups	
40-176	23697-23699	to	
40-177	23700-23704	fail	
40-178	23705-23708	and	
40-179	23709-23719	increasing	
40-180	23720-23723	the	
40-181	23724-23728	risk	
40-182	23729-23731	of	
40-183	23732-23733	a	
40-184	23734-23741	restart	
40-185	23742-23749	failure	
40-186	23750-23756	during	
40-187	23757-23760	the	
40-188	23761-23765	time	
40-189	23766-23770	that	
40-190	23771-23783	backup_label	
40-191	23784-23790	exists	
40-192	23790-23791	.	

#Text=25.3.3.3. Backing Up the Data Directory
41-1	23792-23800	25.3.3.3	
41-2	23800-23801	.	
41-3	23801-23802	 	
41-4	23802-23809	Backing	
41-5	23810-23812	Up	
41-6	23813-23816	the	
41-7	23817-23821	Data	
41-8	23822-23831	Directory	

#Text=Some file system backup tools emit warnings or errors if the files they are trying to copy change while the copy proceeds. When taking a base backup of an active database, this situation is normal and not an error. However, you need to ensure that you can distinguish complaints of this sort from real errors. For example, some versions of rsync return a separate exit code for “vanished source files”, and you can write a driver script to accept this exit code as a non-error case. Also, some versions of GNU tar return an error code indistinguishable from a fatal error if a file was truncated while tar was copying it. Fortunately, GNU tar versions 1.16 and later exit with 1 if a file was changed during the backup, and 2 for other errors. With GNU tar version 1.23 and later, you can use the warning options --warning=no-file-changed --warning=no-file-removed to hide the related warning messages. Be certain that your backup includes all of the files under the database cluster directory (e.g., /usr/local/pgsql/data). If you are using tablespaces that do not reside underneath this directory, be careful to include them as well (and be sure that your backup archives symbolic links as links, otherwise the restore will corrupt your tablespaces).
42-1	23832-23836	Some	
42-2	23837-23841	file	
42-3	23842-23848	system	
42-4	23849-23855	backup	
42-5	23856-23861	tools	
42-6	23862-23866	emit	
42-7	23867-23875	warnings	
42-8	23876-23878	or	
42-9	23879-23885	errors	
42-10	23886-23888	if	
42-11	23889-23892	the	
42-12	23893-23898	files	
42-13	23899-23903	they	
42-14	23904-23907	are	
42-15	23908-23914	trying	
42-16	23915-23917	to	
42-17	23918-23922	copy	
42-18	23923-23929	change	
42-19	23930-23935	while	
42-20	23936-23939	the	
42-21	23940-23944	copy	
42-22	23945-23953	proceeds	
42-23	23953-23954	.	
42-24	23955-23959	When	
42-25	23960-23966	taking	
42-26	23967-23968	a	
42-27	23969-23973	base	
42-28	23974-23980	backup	
42-29	23981-23983	of	
42-30	23984-23986	an	
42-31	23987-23993	active	
42-32	23994-24002	database	
42-33	24002-24003	,	
42-34	24004-24008	this	
42-35	24009-24018	situation	
42-36	24019-24021	is	
42-37	24022-24028	normal	
42-38	24029-24032	and	
42-39	24033-24036	not	
42-40	24037-24039	an	
42-41	24040-24045	error	
42-42	24045-24046	.	
42-43	24047-24054	However	
42-44	24054-24055	,	
42-45	24056-24059	you	
42-46	24060-24064	need	
42-47	24065-24067	to	
42-48	24068-24074	ensure	
42-49	24075-24079	that	
42-50	24080-24083	you	
42-51	24084-24087	can	
42-52	24088-24099	distinguish	
42-53	24100-24110	complaints	
42-54	24111-24113	of	
42-55	24114-24118	this	
42-56	24119-24123	sort	
42-57	24124-24128	from	
42-58	24129-24133	real	
42-59	24134-24140	errors	
42-60	24140-24141	.	
42-61	24142-24145	For	
42-62	24146-24153	example	
42-63	24153-24154	,	
42-64	24155-24159	some	
42-65	24160-24168	versions	
42-66	24169-24171	of	
42-67	24172-24177	rsync	
42-68	24178-24184	return	
42-69	24185-24186	a	
42-70	24187-24195	separate	
42-71	24196-24200	exit	
42-72	24201-24205	code	
42-73	24206-24209	for	
42-74	24210-24211	“	
42-75	24211-24219	vanished	
42-76	24220-24226	source	
42-77	24227-24232	files	
42-78	24232-24233	”	
42-79	24233-24234	,	
42-80	24235-24238	and	
42-81	24239-24242	you	
42-82	24243-24246	can	
42-83	24247-24252	write	
42-84	24253-24254	a	
42-85	24255-24261	driver	
42-86	24262-24268	script	
42-87	24269-24271	to	
42-88	24272-24278	accept	
42-89	24279-24283	this	
42-90	24284-24288	exit	
42-91	24289-24293	code	
42-92	24294-24296	as	
42-93	24297-24298	a	
42-94	24299-24308	non-error	
42-95	24309-24313	case	
42-96	24313-24314	.	
42-97	24315-24319	Also	
42-98	24319-24320	,	
42-99	24321-24325	some	
42-100	24326-24334	versions	
42-101	24335-24337	of	
42-102	24338-24341	GNU	
42-103	24342-24345	tar	
42-104	24346-24352	return	
42-105	24353-24355	an	
42-106	24356-24361	error	
42-107	24362-24366	code	
42-108	24367-24384	indistinguishable	
42-109	24385-24389	from	
42-110	24390-24391	a	
42-111	24392-24397	fatal	
42-112	24398-24403	error	
42-113	24404-24406	if	
42-114	24407-24408	a	
42-115	24409-24413	file	
42-116	24414-24417	was	
42-117	24418-24427	truncated	
42-118	24428-24433	while	
42-119	24434-24437	tar	
42-120	24438-24441	was	
42-121	24442-24449	copying	
42-122	24450-24452	it	
42-123	24452-24453	.	
42-124	24454-24465	Fortunately	
42-125	24465-24466	,	
42-126	24467-24470	GNU	
42-127	24471-24474	tar	
42-128	24475-24483	versions	
42-129	24484-24488	1.16	
42-130	24489-24492	and	
42-131	24493-24498	later	
42-132	24499-24503	exit	
42-133	24504-24508	with	
42-134	24509-24510	1	
42-135	24511-24513	if	
42-136	24514-24515	a	
42-137	24516-24520	file	
42-138	24521-24524	was	
42-139	24525-24532	changed	
42-140	24533-24539	during	
42-141	24540-24543	the	
42-142	24544-24550	backup	
42-143	24550-24551	,	
42-144	24552-24555	and	
42-145	24556-24557	2	
42-146	24558-24561	for	
42-147	24562-24567	other	
42-148	24568-24574	errors	
42-149	24574-24575	.	
42-150	24576-24580	With	
42-151	24581-24584	GNU	
42-152	24585-24588	tar	
42-153	24589-24596	version	
42-154	24597-24601	1.23	
42-155	24602-24605	and	
42-156	24606-24611	later	
42-157	24611-24612	,	
42-158	24613-24616	you	
42-159	24617-24620	can	
42-160	24621-24624	use	
42-161	24625-24628	the	
42-162	24629-24636	warning	
42-163	24637-24644	options	
42-164	24645-24646	-	
42-165	24646-24647	-	
42-166	24647-24654	warning	
42-167	24654-24655	=	
42-168	24655-24670	no-file-changed	
42-169	24671-24672	-	
42-170	24672-24673	-	
42-171	24673-24680	warning	
42-172	24680-24681	=	
42-173	24681-24696	no-file-removed	
42-174	24697-24699	to	
42-175	24700-24704	hide	
42-176	24705-24708	the	
42-177	24709-24716	related	
42-178	24717-24724	warning	
42-179	24725-24733	messages	
42-180	24733-24734	.	
42-181	24735-24737	Be	
42-182	24738-24745	certain	
42-183	24746-24750	that	
42-184	24751-24755	your	
42-185	24756-24762	backup	
42-186	24763-24771	includes	
42-187	24772-24775	all	
42-188	24776-24778	of	
42-189	24779-24782	the	
42-190	24783-24788	files	
42-191	24789-24794	under	
42-192	24795-24798	the	
42-193	24799-24807	database	
42-194	24808-24815	cluster	
42-195	24816-24825	directory	
42-196	24826-24827	(	
42-197	24827-24830	e.g	
42-198	24830-24831	.	
42-199	24831-24832	,	
42-200	24833-24834	/	
42-201	24834-24837	usr	
42-202	24837-24838	/	
42-203	24838-24843	local	
42-204	24843-24844	/	
42-205	24844-24849	pgsql	
42-206	24849-24850	/	
42-207	24850-24854	data	
42-208	24854-24855	)	
42-209	24855-24856	.	
42-210	24857-24859	If	
42-211	24860-24863	you	
42-212	24864-24867	are	
42-213	24868-24873	using	
42-214	24874-24885	tablespaces	
42-215	24886-24890	that	
42-216	24891-24893	do	
42-217	24894-24897	not	
42-218	24898-24904	reside	
42-219	24905-24915	underneath	
42-220	24916-24920	this	
42-221	24921-24930	directory	
42-222	24930-24931	,	
42-223	24932-24934	be	
42-224	24935-24942	careful	
42-225	24943-24945	to	
42-226	24946-24953	include	
42-227	24954-24958	them	
42-228	24959-24961	as	
42-229	24962-24966	well	
42-230	24967-24968	(	
42-231	24968-24971	and	
42-232	24972-24974	be	
42-233	24975-24979	sure	
42-234	24980-24984	that	
42-235	24985-24989	your	
42-236	24990-24996	backup	
42-237	24997-25005	archives	
42-238	25006-25014	symbolic	
42-239	25015-25020	links	
42-240	25021-25023	as	
42-241	25024-25029	links	
42-242	25029-25030	,	
42-243	25031-25040	otherwise	
42-244	25041-25044	the	
42-245	25045-25052	restore	
42-246	25053-25057	will	
42-247	25058-25065	corrupt	
42-248	25066-25070	your	
42-249	25071-25082	tablespaces	
42-250	25082-25083	)	
42-251	25083-25084	.	

#Text=You should, however, omit from the backup the files within the cluster's pg_wal/ subdirectory. This slight adjustment is worthwhile because it reduces the risk of mistakes when restoring. This is easy to arrange if pg_wal/ is a symbolic link pointing to someplace outside the cluster directory, which is a common setup anyway for performance reasons. You might also want to exclude postmaster.pid and postmaster.opts, which record information about the running postmaster, not about the postmaster which will eventually use this backup. (These files can confuse pg_ctl.)
43-1	25085-25088	You	
43-2	25089-25095	should	
43-3	25095-25096	,	
43-4	25097-25104	however	
43-5	25104-25105	,	
43-6	25106-25110	omit	
43-7	25111-25115	from	
43-8	25116-25119	the	
43-9	25120-25126	backup	
43-10	25127-25130	the	
43-11	25131-25136	files	
43-12	25137-25143	within	
43-13	25144-25147	the	
43-14	25148-25157	cluster's	
43-15	25158-25164	pg_wal	
43-16	25164-25165	/	
43-17	25166-25178	subdirectory	
43-18	25178-25179	.	
43-19	25180-25184	This	
43-20	25185-25191	slight	
43-21	25192-25202	adjustment	
43-22	25203-25205	is	
43-23	25206-25216	worthwhile	
43-24	25217-25224	because	
43-25	25225-25227	it	
43-26	25228-25235	reduces	
43-27	25236-25239	the	
43-28	25240-25244	risk	
43-29	25245-25247	of	
43-30	25248-25256	mistakes	
43-31	25257-25261	when	
43-32	25262-25271	restoring	
43-33	25271-25272	.	
43-34	25273-25277	This	
43-35	25278-25280	is	
43-36	25281-25285	easy	
43-37	25286-25288	to	
43-38	25289-25296	arrange	
43-39	25297-25299	if	
43-40	25300-25306	pg_wal	
43-41	25306-25307	/	
43-42	25308-25310	is	
43-43	25311-25312	a	
43-44	25313-25321	symbolic	
43-45	25322-25326	link	
43-46	25327-25335	pointing	
43-47	25336-25338	to	
43-48	25339-25348	someplace	
43-49	25349-25356	outside	
43-50	25357-25360	the	
43-51	25361-25368	cluster	
43-52	25369-25378	directory	
43-53	25378-25379	,	
43-54	25380-25385	which	
43-55	25386-25388	is	
43-56	25389-25390	a	
43-57	25391-25397	common	
43-58	25398-25403	setup	
43-59	25404-25410	anyway	
43-60	25411-25414	for	
43-61	25415-25426	performance	
43-62	25427-25434	reasons	
43-63	25434-25435	.	
43-64	25436-25439	You	
43-65	25440-25445	might	
43-66	25446-25450	also	
43-67	25451-25455	want	
43-68	25456-25458	to	
43-69	25459-25466	exclude	
43-70	25467-25481	postmaster.pid	
43-71	25482-25485	and	
43-72	25486-25501	postmaster.opts	
43-73	25501-25502	,	
43-74	25503-25508	which	
43-75	25509-25515	record	
43-76	25516-25527	information	
43-77	25528-25533	about	
43-78	25534-25537	the	
43-79	25538-25545	running	
43-80	25546-25556	postmaster	
43-81	25556-25557	,	
43-82	25558-25561	not	
43-83	25562-25567	about	
43-84	25568-25571	the	
43-85	25572-25582	postmaster	
43-86	25583-25588	which	
43-87	25589-25593	will	
43-88	25594-25604	eventually	
43-89	25605-25608	use	
43-90	25609-25613	this	
43-91	25614-25620	backup	
43-92	25620-25621	.	
43-93	25622-25623	(	
43-94	25623-25628	These	
43-95	25629-25634	files	
43-96	25635-25638	can	
43-97	25639-25646	confuse	
43-98	25647-25653	pg_ctl	
43-99	25653-25654	.	
43-100	25654-25655	)	

#Text=It is often a good idea to also omit from the backup the files within the cluster's pg_replslot/ directory, so that replication slots that exist on the master do not become part of the backup. Otherwise, the subsequent use of the backup to create a standby may result in indefinite retention of WAL files on the standby, and possibly bloat on the master if hot standby feedback is enabled, because the clients that are using those replication slots will still be connecting to and updating the slots on the master, not the standby. Even if the backup is only intended for use in creating a new master, copying the replication slots isn't expected to be particularly useful, since the contents of those slots will likely be badly out of date by the time the new master comes on line. The contents of the directories pg_dynshmem/, pg_notify/, pg_serial/, pg_snapshots/, pg_stat_tmp/, and pg_subtrans/ (but not the directories themselves) can be omitted from the backup as they will be initialized on postmaster startup. If stats_temp_directory is set and is under the data directory then the contents of that directory can also be omitted.
44-1	25656-25658	It	
44-2	25659-25661	is	
44-3	25662-25667	often	
44-4	25668-25669	a	
44-5	25670-25674	good	
44-6	25675-25679	idea	
44-7	25680-25682	to	
44-8	25683-25687	also	
44-9	25688-25692	omit	
44-10	25693-25697	from	
44-11	25698-25701	the	
44-12	25702-25708	backup	
44-13	25709-25712	the	
44-14	25713-25718	files	
44-15	25719-25725	within	
44-16	25726-25729	the	
44-17	25730-25739	cluster's	
44-18	25740-25751	pg_replslot	
44-19	25751-25752	/	
44-20	25753-25762	directory	
44-21	25762-25763	,	
44-22	25764-25766	so	
44-23	25767-25771	that	
44-24	25772-25783	replication	
44-25	25784-25789	slots	
44-26	25790-25794	that	
44-27	25795-25800	exist	
44-28	25801-25803	on	
44-29	25804-25807	the	
44-30	25808-25814	master	
44-31	25815-25817	do	
44-32	25818-25821	not	
44-33	25822-25828	become	
44-34	25829-25833	part	
44-35	25834-25836	of	
44-36	25837-25840	the	
44-37	25841-25847	backup	
44-38	25847-25848	.	
44-39	25849-25858	Otherwise	
44-40	25858-25859	,	
44-41	25860-25863	the	
44-42	25864-25874	subsequent	
44-43	25875-25878	use	
44-44	25879-25881	of	
44-45	25882-25885	the	
44-46	25886-25892	backup	
44-47	25893-25895	to	
44-48	25896-25902	create	
44-49	25903-25904	a	
44-50	25905-25912	standby	
44-51	25913-25916	may	
44-52	25917-25923	result	
44-53	25924-25926	in	
44-54	25927-25937	indefinite	
44-55	25938-25947	retention	
44-56	25948-25950	of	
44-57	25951-25954	WAL	
44-58	25955-25960	files	
44-59	25961-25963	on	
44-60	25964-25967	the	
44-61	25968-25975	standby	
44-62	25975-25976	,	
44-63	25977-25980	and	
44-64	25981-25989	possibly	
44-65	25990-25995	bloat	
44-66	25996-25998	on	
44-67	25999-26002	the	
44-68	26003-26009	master	
44-69	26010-26012	if	
44-70	26013-26016	hot	
44-71	26017-26024	standby	
44-72	26025-26033	feedback	
44-73	26034-26036	is	
44-74	26037-26044	enabled	
44-75	26044-26045	,	
44-76	26046-26053	because	
44-77	26054-26057	the	
44-78	26058-26065	clients	
44-79	26066-26070	that	
44-80	26071-26074	are	
44-81	26075-26080	using	
44-82	26081-26086	those	
44-83	26087-26098	replication	
44-84	26099-26104	slots	
44-85	26105-26109	will	
44-86	26110-26115	still	
44-87	26116-26118	be	
44-88	26119-26129	connecting	
44-89	26130-26132	to	
44-90	26133-26136	and	
44-91	26137-26145	updating	
44-92	26146-26149	the	
44-93	26150-26155	slots	
44-94	26156-26158	on	
44-95	26159-26162	the	
44-96	26163-26169	master	
44-97	26169-26170	,	
44-98	26171-26174	not	
44-99	26175-26178	the	
44-100	26179-26186	standby	
44-101	26186-26187	.	
44-102	26188-26192	Even	
44-103	26193-26195	if	
44-104	26196-26199	the	
44-105	26200-26206	backup	
44-106	26207-26209	is	
44-107	26210-26214	only	
44-108	26215-26223	intended	
44-109	26224-26227	for	
44-110	26228-26231	use	
44-111	26232-26234	in	
44-112	26235-26243	creating	
44-113	26244-26245	a	
44-114	26246-26249	new	
44-115	26250-26256	master	
44-116	26256-26257	,	
44-117	26258-26265	copying	
44-118	26266-26269	the	
44-119	26270-26281	replication	
44-120	26282-26287	slots	
44-121	26288-26293	isn't	
44-122	26294-26302	expected	
44-123	26303-26305	to	
44-124	26306-26308	be	
44-125	26309-26321	particularly	
44-126	26322-26328	useful	
44-127	26328-26329	,	
44-128	26330-26335	since	
44-129	26336-26339	the	
44-130	26340-26348	contents	
44-131	26349-26351	of	
44-132	26352-26357	those	
44-133	26358-26363	slots	
44-134	26364-26368	will	
44-135	26369-26375	likely	
44-136	26376-26378	be	
44-137	26379-26384	badly	
44-138	26385-26388	out	
44-139	26389-26391	of	
44-140	26392-26396	date	
44-141	26397-26399	by	
44-142	26400-26403	the	
44-143	26404-26408	time	
44-144	26409-26412	the	
44-145	26413-26416	new	
44-146	26417-26423	master	
44-147	26424-26429	comes	
44-148	26430-26432	on	
44-149	26433-26437	line	
44-150	26437-26438	.	
44-151	26439-26442	The	
44-152	26443-26451	contents	
44-153	26452-26454	of	
44-154	26455-26458	the	
44-155	26459-26470	directories	
44-156	26471-26482	pg_dynshmem	
44-157	26482-26483	/	
44-158	26483-26484	,	
44-159	26485-26494	pg_notify	
44-160	26494-26495	/	
44-161	26495-26496	,	
44-162	26497-26506	pg_serial	
44-163	26506-26507	/	
44-164	26507-26508	,	
44-165	26509-26521	pg_snapshots	
44-166	26521-26522	/	
44-167	26522-26523	,	
44-168	26524-26535	pg_stat_tmp	
44-169	26535-26536	/	
44-170	26536-26537	,	
44-171	26538-26541	and	
44-172	26542-26553	pg_subtrans	
44-173	26553-26554	/	
44-174	26555-26556	(	
44-175	26556-26559	but	
44-176	26560-26563	not	
44-177	26564-26567	the	
44-178	26568-26579	directories	
44-179	26580-26590	themselves	
44-180	26590-26591	)	
44-181	26592-26595	can	
44-182	26596-26598	be	
44-183	26599-26606	omitted	
44-184	26607-26611	from	
44-185	26612-26615	the	
44-186	26616-26622	backup	
44-187	26623-26625	as	
44-188	26626-26630	they	
44-189	26631-26635	will	
44-190	26636-26638	be	
44-191	26639-26650	initialized	
44-192	26651-26653	on	
44-193	26654-26664	postmaster	
44-194	26665-26672	startup	
44-195	26672-26673	.	
44-196	26674-26676	If	
44-197	26677-26697	stats_temp_directory	
44-198	26698-26700	is	
44-199	26701-26704	set	
44-200	26705-26708	and	
44-201	26709-26711	is	
44-202	26712-26717	under	
44-203	26718-26721	the	
44-204	26722-26726	data	
44-205	26727-26736	directory	
44-206	26737-26741	then	
44-207	26742-26745	the	
44-208	26746-26754	contents	
44-209	26755-26757	of	
44-210	26758-26762	that	
44-211	26763-26772	directory	
44-212	26773-26776	can	
44-213	26777-26781	also	
44-214	26782-26784	be	
44-215	26785-26792	omitted	
44-216	26792-26793	.	

#Text=Any file or directory beginning with pgsql_tmp can be omitted from the backup. These files are removed on postmaster start and the directories will be recreated as needed. pg_internal.init files can be omitted from the backup whenever a file of that name is found. These files contain relation cache data that is always rebuilt when recovering.
45-1	26794-26797	Any	
45-2	26798-26802	file	
45-3	26803-26805	or	
45-4	26806-26815	directory	
45-5	26816-26825	beginning	
45-6	26826-26830	with	
45-7	26831-26840	pgsql_tmp	
45-8	26841-26844	can	
45-9	26845-26847	be	
45-10	26848-26855	omitted	
45-11	26856-26860	from	
45-12	26861-26864	the	
45-13	26865-26871	backup	
45-14	26871-26872	.	
45-15	26873-26878	These	
45-16	26879-26884	files	
45-17	26885-26888	are	
45-18	26889-26896	removed	
45-19	26897-26899	on	
45-20	26900-26910	postmaster	
45-21	26911-26916	start	
45-22	26917-26920	and	
45-23	26921-26924	the	
45-24	26925-26936	directories	
45-25	26937-26941	will	
45-26	26942-26944	be	
45-27	26945-26954	recreated	
45-28	26955-26957	as	
45-29	26958-26964	needed	
45-30	26964-26965	.	
45-31	26966-26982	pg_internal.init	
45-32	26983-26988	files	
45-33	26989-26992	can	
45-34	26993-26995	be	
45-35	26996-27003	omitted	
45-36	27004-27008	from	
45-37	27009-27012	the	
45-38	27013-27019	backup	
45-39	27020-27028	whenever	
45-40	27029-27030	a	
45-41	27031-27035	file	
45-42	27036-27038	of	
45-43	27039-27043	that	
45-44	27044-27048	name	
45-45	27049-27051	is	
45-46	27052-27057	found	
45-47	27057-27058	.	
45-48	27059-27064	These	
45-49	27065-27070	files	
45-50	27071-27078	contain	
45-51	27079-27087	relation	
45-52	27088-27093	cache	
45-53	27094-27098	data	
45-54	27099-27103	that	
45-55	27104-27106	is	
45-56	27107-27113	always	
45-57	27114-27121	rebuilt	
45-58	27122-27126	when	
45-59	27127-27137	recovering	
45-60	27137-27138	.	

#Text=The backup label file includes the label string you gave to pg_start_backup, as well as the time at which pg_start_backup was run, and the name of the starting WAL file. In case of confusion it is therefore possible to look inside a backup file and determine exactly which backup session the dump file came from. The tablespace map file includes the symbolic link names as they exist in the directory pg_tblspc/ and the full path of each symbolic link. These files are not merely for your information; their presence and contents are critical to the proper operation of the system's recovery process. It is also possible to make a backup while the server is stopped. In this case, you obviously cannot use pg_start_backup or pg_stop_backup, and you will therefore be left to your own devices to keep track of which backup is which and how far back the associated WAL files go. It is generally better to follow the continuous archiving procedure above.
46-1	27139-27142	The	
46-2	27143-27149	backup	
46-3	27150-27155	label	
46-4	27156-27160	file	
46-5	27161-27169	includes	
46-6	27170-27173	the	
46-7	27174-27179	label	
46-8	27180-27186	string	
46-9	27187-27190	you	
46-10	27191-27195	gave	
46-11	27196-27198	to	
46-12	27199-27214	pg_start_backup	
46-13	27214-27215	,	
46-14	27216-27218	as	
46-15	27219-27223	well	
46-16	27224-27226	as	
46-17	27227-27230	the	
46-18	27231-27235	time	
46-19	27236-27238	at	
46-20	27239-27244	which	
46-21	27245-27260	pg_start_backup	
46-22	27261-27264	was	
46-23	27265-27268	run	
46-24	27268-27269	,	
46-25	27270-27273	and	
46-26	27274-27277	the	
46-27	27278-27282	name	
46-28	27283-27285	of	
46-29	27286-27289	the	
46-30	27290-27298	starting	
46-31	27299-27302	WAL	
46-32	27303-27307	file	
46-33	27307-27308	.	
46-34	27309-27311	In	
46-35	27312-27316	case	
46-36	27317-27319	of	
46-37	27320-27329	confusion	
46-38	27330-27332	it	
46-39	27333-27335	is	
46-40	27336-27345	therefore	
46-41	27346-27354	possible	
46-42	27355-27357	to	
46-43	27358-27362	look	
46-44	27363-27369	inside	
46-45	27370-27371	a	
46-46	27372-27378	backup	
46-47	27379-27383	file	
46-48	27384-27387	and	
46-49	27388-27397	determine	
46-50	27398-27405	exactly	
46-51	27406-27411	which	
46-52	27412-27418	backup	
46-53	27419-27426	session	
46-54	27427-27430	the	
46-55	27431-27435	dump	
46-56	27436-27440	file	
46-57	27441-27445	came	
46-58	27446-27450	from	
46-59	27450-27451	.	
46-60	27452-27455	The	
46-61	27456-27466	tablespace	
46-62	27467-27470	map	
46-63	27471-27475	file	
46-64	27476-27484	includes	
46-65	27485-27488	the	
46-66	27489-27497	symbolic	
46-67	27498-27502	link	
46-68	27503-27508	names	
46-69	27509-27511	as	
46-70	27512-27516	they	
46-71	27517-27522	exist	
46-72	27523-27525	in	
46-73	27526-27529	the	
46-74	27530-27539	directory	
46-75	27540-27549	pg_tblspc	
46-76	27549-27550	/	
46-77	27551-27554	and	
46-78	27555-27558	the	
46-79	27559-27563	full	
46-80	27564-27568	path	
46-81	27569-27571	of	
46-82	27572-27576	each	
46-83	27577-27585	symbolic	
46-84	27586-27590	link	
46-85	27590-27591	.	
46-86	27592-27597	These	
46-87	27598-27603	files	
46-88	27604-27607	are	
46-89	27608-27611	not	
46-90	27612-27618	merely	
46-91	27619-27622	for	
46-92	27623-27627	your	
46-93	27628-27639	information	
46-94	27639-27640	;	
46-95	27641-27646	their	
46-96	27647-27655	presence	
46-97	27656-27659	and	
46-98	27660-27668	contents	
46-99	27669-27672	are	
46-100	27673-27681	critical	
46-101	27682-27684	to	
46-102	27685-27688	the	
46-103	27689-27695	proper	
46-104	27696-27705	operation	
46-105	27706-27708	of	
46-106	27709-27712	the	
46-107	27713-27721	system's	
46-108	27722-27730	recovery	
46-109	27731-27738	process	
46-110	27738-27739	.	
46-111	27740-27742	It	
46-112	27743-27745	is	
46-113	27746-27750	also	
46-114	27751-27759	possible	
46-115	27760-27762	to	
46-116	27763-27767	make	
46-117	27768-27769	a	
46-118	27770-27776	backup	
46-119	27777-27782	while	
46-120	27783-27786	the	
46-121	27787-27793	server	
46-122	27794-27796	is	
46-123	27797-27804	stopped	
46-124	27804-27805	.	
46-125	27806-27808	In	
46-126	27809-27813	this	
46-127	27814-27818	case	
46-128	27818-27819	,	
46-129	27820-27823	you	
46-130	27824-27833	obviously	
46-131	27834-27840	cannot	
46-132	27841-27844	use	
46-133	27845-27860	pg_start_backup	
46-134	27861-27863	or	
46-135	27864-27878	pg_stop_backup	
46-136	27878-27879	,	
46-137	27880-27883	and	
46-138	27884-27887	you	
46-139	27888-27892	will	
46-140	27893-27902	therefore	
46-141	27903-27905	be	
46-142	27906-27910	left	
46-143	27911-27913	to	
46-144	27914-27918	your	
46-145	27919-27922	own	
46-146	27923-27930	devices	
46-147	27931-27933	to	
46-148	27934-27938	keep	
46-149	27939-27944	track	
46-150	27945-27947	of	
46-151	27948-27953	which	
46-152	27954-27960	backup	
46-153	27961-27963	is	
46-154	27964-27969	which	
46-155	27970-27973	and	
46-156	27974-27977	how	
46-157	27978-27981	far	
46-158	27982-27986	back	
46-159	27987-27990	the	
46-160	27991-28001	associated	
46-161	28002-28005	WAL	
46-162	28006-28011	files	
46-163	28012-28014	go	
46-164	28014-28015	.	
46-165	28016-28018	It	
46-166	28019-28021	is	
46-167	28022-28031	generally	
46-168	28032-28038	better	
46-169	28039-28041	to	
46-170	28042-28048	follow	
46-171	28049-28052	the	
46-172	28053-28063	continuous	
46-173	28064-28073	archiving	
46-174	28074-28083	procedure	
46-175	28084-28089	above	
46-176	28089-28090	.	

#Text=25.3.4. Recovering Using a Continuous Archive Backup Okay, the worst has happened and you need to recover from your backup. Here is the procedure: Stop the server, if it's running.
47-1	28091-28097	25.3.4	
47-2	28097-28098	.	
47-3	28098-28099	 	
47-4	28099-28109	Recovering	
47-5	28110-28115	Using	
47-6	28116-28117	a	
47-7	28118-28128	Continuous	
47-8	28129-28136	Archive	
47-9	28137-28143	Backup	
47-10	28144-28148	Okay	
47-11	28148-28149	,	
47-12	28150-28153	the	
47-13	28154-28159	worst	
47-14	28160-28163	has	
47-15	28164-28172	happened	
47-16	28173-28176	and	
47-17	28177-28180	you	
47-18	28181-28185	need	
47-19	28186-28188	to	
47-20	28189-28196	recover	
47-21	28197-28201	from	
47-22	28202-28206	your	
47-23	28207-28213	backup	
47-24	28213-28214	.	
47-25	28215-28219	Here	
47-26	28220-28222	is	
47-27	28223-28226	the	
47-28	28227-28236	procedure	
47-29	28236-28237	:	
47-30	28238-28242	Stop	
47-31	28243-28246	the	
47-32	28247-28253	server	
47-33	28253-28254	,	
47-34	28255-28257	if	
47-35	28258-28262	it's	
47-36	28263-28270	running	
47-37	28270-28271	.	

#Text=If you have the space to do so, copy the whole cluster data directory and any tablespaces to a temporary location in case you need them later. Note that this precaution will require that you have enough free space on your system to hold two copies of your existing database. If you do not have enough space, you should at least save the contents of the cluster's pg_wal subdirectory, as it might contain logs which were not archived before the system went down. Remove all existing files and subdirectories under the cluster data directory and under the root directories of any tablespaces you are using.
48-1	28272-28274	If	
48-2	28275-28278	you	
48-3	28279-28283	have	
48-4	28284-28287	the	
48-5	28288-28293	space	
48-6	28294-28296	to	
48-7	28297-28299	do	
48-8	28300-28302	so	
48-9	28302-28303	,	
48-10	28304-28308	copy	
48-11	28309-28312	the	
48-12	28313-28318	whole	
48-13	28319-28326	cluster	
48-14	28327-28331	data	
48-15	28332-28341	directory	
48-16	28342-28345	and	
48-17	28346-28349	any	
48-18	28350-28361	tablespaces	
48-19	28362-28364	to	
48-20	28365-28366	a	
48-21	28367-28376	temporary	
48-22	28377-28385	location	
48-23	28386-28388	in	
48-24	28389-28393	case	
48-25	28394-28397	you	
48-26	28398-28402	need	
48-27	28403-28407	them	
48-28	28408-28413	later	
48-29	28413-28414	.	
48-30	28415-28419	Note	
48-31	28420-28424	that	
48-32	28425-28429	this	
48-33	28430-28440	precaution	
48-34	28441-28445	will	
48-35	28446-28453	require	
48-36	28454-28458	that	
48-37	28459-28462	you	
48-38	28463-28467	have	
48-39	28468-28474	enough	
48-40	28475-28479	free	
48-41	28480-28485	space	
48-42	28486-28488	on	
48-43	28489-28493	your	
48-44	28494-28500	system	
48-45	28501-28503	to	
48-46	28504-28508	hold	
48-47	28509-28512	two	
48-48	28513-28519	copies	
48-49	28520-28522	of	
48-50	28523-28527	your	
48-51	28528-28536	existing	
48-52	28537-28545	database	
48-53	28545-28546	.	
48-54	28547-28549	If	
48-55	28550-28553	you	
48-56	28554-28556	do	
48-57	28557-28560	not	
48-58	28561-28565	have	
48-59	28566-28572	enough	
48-60	28573-28578	space	
48-61	28578-28579	,	
48-62	28580-28583	you	
48-63	28584-28590	should	
48-64	28591-28593	at	
48-65	28594-28599	least	
48-66	28600-28604	save	
48-67	28605-28608	the	
48-68	28609-28617	contents	
48-69	28618-28620	of	
48-70	28621-28624	the	
48-71	28625-28634	cluster's	
48-72	28635-28641	pg_wal	
48-73	28642-28654	subdirectory	
48-74	28654-28655	,	
48-75	28656-28658	as	
48-76	28659-28661	it	
48-77	28662-28667	might	
48-78	28668-28675	contain	
48-79	28676-28680	logs	
48-80	28681-28686	which	
48-81	28687-28691	were	
48-82	28692-28695	not	
48-83	28696-28704	archived	
48-84	28705-28711	before	
48-85	28712-28715	the	
48-86	28716-28722	system	
48-87	28723-28727	went	
48-88	28728-28732	down	
48-89	28732-28733	.	
48-90	28734-28740	Remove	
48-91	28741-28744	all	
48-92	28745-28753	existing	
48-93	28754-28759	files	
48-94	28760-28763	and	
48-95	28764-28778	subdirectories	
48-96	28779-28784	under	
48-97	28785-28788	the	
48-98	28789-28796	cluster	
48-99	28797-28801	data	
48-100	28802-28811	directory	
48-101	28812-28815	and	
48-102	28816-28821	under	
48-103	28822-28825	the	
48-104	28826-28830	root	
48-105	28831-28842	directories	
48-106	28843-28845	of	
48-107	28846-28849	any	
48-108	28850-28861	tablespaces	
48-109	28862-28865	you	
48-110	28866-28869	are	
48-111	28870-28875	using	
48-112	28875-28876	.	

#Text=Restore the database files from your file system backup. Be sure that they are restored with the right ownership (the database system user, not root!) and with the right permissions. If you are using tablespaces, you should verify that the symbolic links in pg_tblspc/ were correctly restored. Remove any files present in pg_wal/; these came from the file system backup and are therefore probably obsolete rather than current. If you didn't archive pg_wal/ at all, then recreate it with proper permissions, being careful to ensure that you re-establish it as a symbolic link if you had it set up that way before.
49-1	28877-28884	Restore	
49-2	28885-28888	the	
49-3	28889-28897	database	
49-4	28898-28903	files	
49-5	28904-28908	from	
49-6	28909-28913	your	
49-7	28914-28918	file	
49-8	28919-28925	system	
49-9	28926-28932	backup	
49-10	28932-28933	.	
49-11	28934-28936	Be	
49-12	28937-28941	sure	
49-13	28942-28946	that	
49-14	28947-28951	they	
49-15	28952-28955	are	
49-16	28956-28964	restored	
49-17	28965-28969	with	
49-18	28970-28973	the	
49-19	28974-28979	right	
49-20	28980-28989	ownership	
49-21	28990-28991	(	
49-22	28991-28994	the	
49-23	28995-29003	database	
49-24	29004-29010	system	
49-25	29011-29015	user	
49-26	29015-29016	,	
49-27	29017-29020	not	
49-28	29021-29025	root	
49-29	29025-29026	!	
49-30	29026-29027	)	
49-31	29028-29031	and	
49-32	29032-29036	with	
49-33	29037-29040	the	
49-34	29041-29046	right	
49-35	29047-29058	permissions	
49-36	29058-29059	.	
49-37	29060-29062	If	
49-38	29063-29066	you	
49-39	29067-29070	are	
49-40	29071-29076	using	
49-41	29077-29088	tablespaces	
49-42	29088-29089	,	
49-43	29090-29093	you	
49-44	29094-29100	should	
49-45	29101-29107	verify	
49-46	29108-29112	that	
49-47	29113-29116	the	
49-48	29117-29125	symbolic	
49-49	29126-29131	links	
49-50	29132-29134	in	
49-51	29135-29144	pg_tblspc	
49-52	29144-29145	/	
49-53	29146-29150	were	
49-54	29151-29160	correctly	
49-55	29161-29169	restored	
49-56	29169-29170	.	
49-57	29171-29177	Remove	
49-58	29178-29181	any	
49-59	29182-29187	files	
49-60	29188-29195	present	
49-61	29196-29198	in	
49-62	29199-29205	pg_wal	
49-63	29205-29206	/	
49-64	29206-29207	;	
49-65	29208-29213	these	
49-66	29214-29218	came	
49-67	29219-29223	from	
49-68	29224-29227	the	
49-69	29228-29232	file	
49-70	29233-29239	system	
49-71	29240-29246	backup	
49-72	29247-29250	and	
49-73	29251-29254	are	
49-74	29255-29264	therefore	
49-75	29265-29273	probably	
49-76	29274-29282	obsolete	
49-77	29283-29289	rather	
49-78	29290-29294	than	
49-79	29295-29302	current	
49-80	29302-29303	.	
49-81	29304-29306	If	
49-82	29307-29310	you	
49-83	29311-29317	didn't	
49-84	29318-29325	archive	
49-85	29326-29332	pg_wal	
49-86	29332-29333	/	
49-87	29334-29336	at	
49-88	29337-29340	all	
49-89	29340-29341	,	
49-90	29342-29346	then	
49-91	29347-29355	recreate	
49-92	29356-29358	it	
49-93	29359-29363	with	
49-94	29364-29370	proper	
49-95	29371-29382	permissions	
49-96	29382-29383	,	
49-97	29384-29389	being	
49-98	29390-29397	careful	
49-99	29398-29400	to	
49-100	29401-29407	ensure	
49-101	29408-29412	that	
49-102	29413-29416	you	
49-103	29417-29429	re-establish	
49-104	29430-29432	it	
49-105	29433-29435	as	
49-106	29436-29437	a	
49-107	29438-29446	symbolic	
49-108	29447-29451	link	
49-109	29452-29454	if	
49-110	29455-29458	you	
49-111	29459-29462	had	
49-112	29463-29465	it	
49-113	29466-29469	set	
49-114	29470-29472	up	
49-115	29473-29477	that	
49-116	29478-29481	way	
49-117	29482-29488	before	
49-118	29488-29489	.	

#Text=If you have unarchived WAL segment files that you saved in step 2, copy them into pg_wal/. (It is best to copy them, not move them, so you still have the unmodified files if a problem occurs and you have to start over.) Set recovery configuration settings in postgresql.conf (see Section 19.5.4) and create a file recovery.signal in the cluster data directory. You might also want to temporarily modify pg_hba.conf to prevent ordinary users from connecting until you are sure the recovery was successful.
50-1	29490-29492	If	
50-2	29493-29496	you	
50-3	29497-29501	have	
50-4	29502-29512	unarchived	
50-5	29513-29516	WAL	
50-6	29517-29524	segment	
50-7	29525-29530	files	
50-8	29531-29535	that	
50-9	29536-29539	you	
50-10	29540-29545	saved	
50-11	29546-29548	in	
50-12	29549-29553	step	
50-13	29554-29555	2	
50-14	29555-29556	,	
50-15	29557-29561	copy	
50-16	29562-29566	them	
50-17	29567-29571	into	
50-18	29572-29578	pg_wal	
50-19	29578-29579	/	
50-20	29579-29580	.	
50-21	29581-29582	(	
50-22	29582-29584	It	
50-23	29585-29587	is	
50-24	29588-29592	best	
50-25	29593-29595	to	
50-26	29596-29600	copy	
50-27	29601-29605	them	
50-28	29605-29606	,	
50-29	29607-29610	not	
50-30	29611-29615	move	
50-31	29616-29620	them	
50-32	29620-29621	,	
50-33	29622-29624	so	
50-34	29625-29628	you	
50-35	29629-29634	still	
50-36	29635-29639	have	
50-37	29640-29643	the	
50-38	29644-29654	unmodified	
50-39	29655-29660	files	
50-40	29661-29663	if	
50-41	29664-29665	a	
50-42	29666-29673	problem	
50-43	29674-29680	occurs	
50-44	29681-29684	and	
50-45	29685-29688	you	
50-46	29689-29693	have	
50-47	29694-29696	to	
50-48	29697-29702	start	
50-49	29703-29707	over	
50-50	29707-29708	.	
50-51	29708-29709	)	
50-52	29710-29713	Set	
50-53	29714-29722	recovery	
50-54	29723-29736	configuration	
50-55	29737-29745	settings	
50-56	29746-29748	in	
50-57	29749-29764	postgresql.conf	
50-58	29765-29766	(	
50-59	29766-29769	see	
50-60	29770-29777	Section	
50-61	29777-29778	 	
50-62	29778-29784	19.5.4	
50-63	29784-29785	)	
50-64	29786-29789	and	
50-65	29790-29796	create	
50-66	29797-29798	a	
50-67	29799-29803	file	
50-68	29804-29819	recovery.signal	
50-69	29820-29822	in	
50-70	29823-29826	the	
50-71	29827-29834	cluster	
50-72	29835-29839	data	
50-73	29840-29849	directory	
50-74	29849-29850	.	
50-75	29851-29854	You	
50-76	29855-29860	might	
50-77	29861-29865	also	
50-78	29866-29870	want	
50-79	29871-29873	to	
50-80	29874-29885	temporarily	
50-81	29886-29892	modify	
50-82	29893-29904	pg_hba.conf	
50-83	29905-29907	to	
50-84	29908-29915	prevent	
50-85	29916-29924	ordinary	
50-86	29925-29930	users	
50-87	29931-29935	from	
50-88	29936-29946	connecting	
50-89	29947-29952	until	
50-90	29953-29956	you	
50-91	29957-29960	are	
50-92	29961-29965	sure	
50-93	29966-29969	the	
50-94	29970-29978	recovery	
50-95	29979-29982	was	
50-96	29983-29993	successful	
50-97	29993-29994	.	

#Text=Start the server. The server will go into recovery mode and proceed to read through the archived WAL files it needs. Should the recovery be terminated because of an external error, the server can simply be restarted and it will continue recovery. Upon completion of the recovery process, the server will remove recovery.signal (to prevent accidentally re-entering recovery mode later) and then commence normal database operations. Inspect the contents of the database to ensure you have recovered to the desired state. If not, return to step 1. If all is well, allow your users to connect by restoring pg_hba.conf to normal.
51-1	29995-30000	Start	
51-2	30001-30004	the	
51-3	30005-30011	server	
51-4	30011-30012	.	
51-5	30013-30016	The	
51-6	30017-30023	server	
51-7	30024-30028	will	
51-8	30029-30031	go	
51-9	30032-30036	into	
51-10	30037-30045	recovery	
51-11	30046-30050	mode	
51-12	30051-30054	and	
51-13	30055-30062	proceed	
51-14	30063-30065	to	
51-15	30066-30070	read	
51-16	30071-30078	through	
51-17	30079-30082	the	
51-18	30083-30091	archived	
51-19	30092-30095	WAL	
51-20	30096-30101	files	
51-21	30102-30104	it	
51-22	30105-30110	needs	
51-23	30110-30111	.	
51-24	30112-30118	Should	
51-25	30119-30122	the	
51-26	30123-30131	recovery	
51-27	30132-30134	be	
51-28	30135-30145	terminated	
51-29	30146-30153	because	
51-30	30154-30156	of	
51-31	30157-30159	an	
51-32	30160-30168	external	
51-33	30169-30174	error	
51-34	30174-30175	,	
51-35	30176-30179	the	
51-36	30180-30186	server	
51-37	30187-30190	can	
51-38	30191-30197	simply	
51-39	30198-30200	be	
51-40	30201-30210	restarted	
51-41	30211-30214	and	
51-42	30215-30217	it	
51-43	30218-30222	will	
51-44	30223-30231	continue	
51-45	30232-30240	recovery	
51-46	30240-30241	.	
51-47	30242-30246	Upon	
51-48	30247-30257	completion	
51-49	30258-30260	of	
51-50	30261-30264	the	
51-51	30265-30273	recovery	
51-52	30274-30281	process	
51-53	30281-30282	,	
51-54	30283-30286	the	
51-55	30287-30293	server	
51-56	30294-30298	will	
51-57	30299-30305	remove	
51-58	30306-30321	recovery.signal	
51-59	30322-30323	(	
51-60	30323-30325	to	
51-61	30326-30333	prevent	
51-62	30334-30346	accidentally	
51-63	30347-30358	re-entering	
51-64	30359-30367	recovery	
51-65	30368-30372	mode	
51-66	30373-30378	later	
51-67	30378-30379	)	
51-68	30380-30383	and	
51-69	30384-30388	then	
51-70	30389-30397	commence	
51-71	30398-30404	normal	
51-72	30405-30413	database	
51-73	30414-30424	operations	
51-74	30424-30425	.	
51-75	30426-30433	Inspect	
51-76	30434-30437	the	
51-77	30438-30446	contents	
51-78	30447-30449	of	
51-79	30450-30453	the	
51-80	30454-30462	database	
51-81	30463-30465	to	
51-82	30466-30472	ensure	
51-83	30473-30476	you	
51-84	30477-30481	have	
51-85	30482-30491	recovered	
51-86	30492-30494	to	
51-87	30495-30498	the	
51-88	30499-30506	desired	
51-89	30507-30512	state	
51-90	30512-30513	.	
51-91	30514-30516	If	
51-92	30517-30520	not	
51-93	30520-30521	,	
51-94	30522-30528	return	
51-95	30529-30531	to	
51-96	30532-30536	step	
51-97	30537-30538	1	
51-98	30538-30539	.	
51-99	30540-30542	If	
51-100	30543-30546	all	
51-101	30547-30549	is	
51-102	30550-30554	well	
51-103	30554-30555	,	
51-104	30556-30561	allow	
51-105	30562-30566	your	
51-106	30567-30572	users	
51-107	30573-30575	to	
51-108	30576-30583	connect	
51-109	30584-30586	by	
51-110	30587-30596	restoring	
51-111	30597-30608	pg_hba.conf	
51-112	30609-30611	to	
51-113	30612-30618	normal	
51-114	30618-30619	.	

#Text=The key part of all this is to set up a recovery configuration that describes how you want to recover and how far the recovery should run. The one thing that you absolutely must specify is the restore_command, which tells PostgreSQL how to retrieve archived WAL file segments. Like the archive_command, this is a shell command string. It can contain %f, which is replaced by the name of the desired log file, and %p, which is replaced by the path name to copy the log file to. (The path name is relative to the current working directory, i.e., the cluster's data directory.) Write %% if you need to embed an actual % character in the command. The simplest useful command is something like: restore_command = 'cp /mnt/server/archivedir/%f %p' which will copy previously archived WAL segments from the directory /mnt/server/archivedir. Of course, you can use something much more complicated, perhaps even a shell script that requests the operator to mount an appropriate tape.
52-1	30620-30623	The	
52-2	30624-30627	key	
52-3	30628-30632	part	
52-4	30633-30635	of	
52-5	30636-30639	all	
52-6	30640-30644	this	
52-7	30645-30647	is	
52-8	30648-30650	to	
52-9	30651-30654	set	
52-10	30655-30657	up	
52-11	30658-30659	a	
52-12	30660-30668	recovery	
52-13	30669-30682	configuration	
52-14	30683-30687	that	
52-15	30688-30697	describes	
52-16	30698-30701	how	
52-17	30702-30705	you	
52-18	30706-30710	want	
52-19	30711-30713	to	
52-20	30714-30721	recover	
52-21	30722-30725	and	
52-22	30726-30729	how	
52-23	30730-30733	far	
52-24	30734-30737	the	
52-25	30738-30746	recovery	
52-26	30747-30753	should	
52-27	30754-30757	run	
52-28	30757-30758	.	
52-29	30759-30762	The	
52-30	30763-30766	one	
52-31	30767-30772	thing	
52-32	30773-30777	that	
52-33	30778-30781	you	
52-34	30782-30792	absolutely	
52-35	30793-30797	must	
52-36	30798-30805	specify	
52-37	30806-30808	is	
52-38	30809-30812	the	
52-39	30813-30828	restore_command	
52-40	30828-30829	,	
52-41	30830-30835	which	
52-42	30836-30841	tells	
52-43	30842-30852	PostgreSQL	
52-44	30853-30856	how	
52-45	30857-30859	to	
52-46	30860-30868	retrieve	
52-47	30869-30877	archived	
52-48	30878-30881	WAL	
52-49	30882-30886	file	
52-50	30887-30895	segments	
52-51	30895-30896	.	
52-52	30897-30901	Like	
52-53	30902-30905	the	
52-54	30906-30921	archive_command	
52-55	30921-30922	,	
52-56	30923-30927	this	
52-57	30928-30930	is	
52-58	30931-30932	a	
52-59	30933-30938	shell	
52-60	30939-30946	command	
52-61	30947-30953	string	
52-62	30953-30954	.	
52-63	30955-30957	It	
52-64	30958-30961	can	
52-65	30962-30969	contain	
52-66	30970-30971	%	
52-67	30971-30972	f	
52-68	30972-30973	,	
52-69	30974-30979	which	
52-70	30980-30982	is	
52-71	30983-30991	replaced	
52-72	30992-30994	by	
52-73	30995-30998	the	
52-74	30999-31003	name	
52-75	31004-31006	of	
52-76	31007-31010	the	
52-77	31011-31018	desired	
52-78	31019-31022	log	
52-79	31023-31027	file	
52-80	31027-31028	,	
52-81	31029-31032	and	
52-82	31033-31034	%	
52-83	31034-31035	p	
52-84	31035-31036	,	
52-85	31037-31042	which	
52-86	31043-31045	is	
52-87	31046-31054	replaced	
52-88	31055-31057	by	
52-89	31058-31061	the	
52-90	31062-31066	path	
52-91	31067-31071	name	
52-92	31072-31074	to	
52-93	31075-31079	copy	
52-94	31080-31083	the	
52-95	31084-31087	log	
52-96	31088-31092	file	
52-97	31093-31095	to	
52-98	31095-31096	.	
52-99	31097-31098	(	
52-100	31098-31101	The	
52-101	31102-31106	path	
52-102	31107-31111	name	
52-103	31112-31114	is	
52-104	31115-31123	relative	
52-105	31124-31126	to	
52-106	31127-31130	the	
52-107	31131-31138	current	
52-108	31139-31146	working	
52-109	31147-31156	directory	
52-110	31156-31157	,	
52-111	31158-31161	i.e	
52-112	31161-31162	.	
52-113	31162-31163	,	
52-114	31164-31167	the	
52-115	31168-31177	cluster's	
52-116	31178-31182	data	
52-117	31183-31192	directory	
52-118	31192-31193	.	
52-119	31193-31194	)	
52-120	31195-31200	Write	
52-121	31201-31202	%	
52-122	31202-31203	%	
52-123	31204-31206	if	
52-124	31207-31210	you	
52-125	31211-31215	need	
52-126	31216-31218	to	
52-127	31219-31224	embed	
52-128	31225-31227	an	
52-129	31228-31234	actual	
52-130	31235-31236	%	
52-131	31237-31246	character	
52-132	31247-31249	in	
52-133	31250-31253	the	
52-134	31254-31261	command	
52-135	31261-31262	.	
52-136	31263-31266	The	
52-137	31267-31275	simplest	
52-138	31276-31282	useful	
52-139	31283-31290	command	
52-140	31291-31293	is	
52-141	31294-31303	something	
52-142	31304-31308	like	
52-143	31308-31309	:	
52-144	31310-31325	restore_command	
52-145	31326-31327	=	
52-146	31328-31329	'	
52-147	31329-31331	cp	
52-148	31332-31333	/	
52-149	31333-31336	mnt	
52-150	31336-31337	/	
52-151	31337-31343	server	
52-152	31343-31344	/	
52-153	31344-31354	archivedir	
52-154	31354-31355	/	
52-155	31355-31356	%	
52-156	31356-31357	f	
52-157	31358-31359	%	
52-158	31359-31360	p	
52-159	31360-31361	'	
52-160	31362-31367	which	
52-161	31368-31372	will	
52-162	31373-31377	copy	
52-163	31378-31388	previously	
52-164	31389-31397	archived	
52-165	31398-31401	WAL	
52-166	31402-31410	segments	
52-167	31411-31415	from	
52-168	31416-31419	the	
52-169	31420-31429	directory	
52-170	31430-31431	/	
52-171	31431-31434	mnt	
52-172	31434-31435	/	
52-173	31435-31441	server	
52-174	31441-31442	/	
52-175	31442-31452	archivedir	
52-176	31452-31453	.	
52-177	31454-31456	Of	
52-178	31457-31463	course	
52-179	31463-31464	,	
52-180	31465-31468	you	
52-181	31469-31472	can	
52-182	31473-31476	use	
52-183	31477-31486	something	
52-184	31487-31491	much	
52-185	31492-31496	more	
52-186	31497-31508	complicated	
52-187	31508-31509	,	
52-188	31510-31517	perhaps	
52-189	31518-31522	even	
52-190	31523-31524	a	
52-191	31525-31530	shell	
52-192	31531-31537	script	
52-193	31538-31542	that	
52-194	31543-31551	requests	
52-195	31552-31555	the	
52-196	31556-31564	operator	
52-197	31565-31567	to	
52-198	31568-31573	mount	
52-199	31574-31576	an	
52-200	31577-31588	appropriate	
52-201	31589-31593	tape	
52-202	31593-31594	.	

#Text=It is important that the command return nonzero exit status on failure. The command will be called requesting files that are not present in the archive; it must return nonzero when so asked. This is not an error condition. An exception is that if the command was terminated by a signal (other than SIGTERM, which is used as part of a database server shutdown) or an error by the shell (such as command not found), then recovery will abort and the server will not start up. Not all of the requested files will be WAL segment files; you should also expect requests for files with a suffix of .history. Also be aware that the base name of the %p path will be different from %f; do not expect them to be interchangeable.
53-1	31595-31597	It	
53-2	31598-31600	is	
53-3	31601-31610	important	
53-4	31611-31615	that	
53-5	31616-31619	the	
53-6	31620-31627	command	
53-7	31628-31634	return	
53-8	31635-31642	nonzero	
53-9	31643-31647	exit	
53-10	31648-31654	status	
53-11	31655-31657	on	
53-12	31658-31665	failure	
53-13	31665-31666	.	
53-14	31667-31670	The	
53-15	31671-31678	command	
53-16	31679-31683	will	
53-17	31684-31686	be	
53-18	31687-31693	called	
53-19	31694-31704	requesting	
53-20	31705-31710	files	
53-21	31711-31715	that	
53-22	31716-31719	are	
53-23	31720-31723	not	
53-24	31724-31731	present	
53-25	31732-31734	in	
53-26	31735-31738	the	
53-27	31739-31746	archive	
53-28	31746-31747	;	
53-29	31748-31750	it	
53-30	31751-31755	must	
53-31	31756-31762	return	
53-32	31763-31770	nonzero	
53-33	31771-31775	when	
53-34	31776-31778	so	
53-35	31779-31784	asked	
53-36	31784-31785	.	
53-37	31786-31790	This	
53-38	31791-31793	is	
53-39	31794-31797	not	
53-40	31798-31800	an	
53-41	31801-31806	error	
53-42	31807-31816	condition	
53-43	31816-31817	.	
53-44	31818-31820	An	
53-45	31821-31830	exception	
53-46	31831-31833	is	
53-47	31834-31838	that	
53-48	31839-31841	if	
53-49	31842-31845	the	
53-50	31846-31853	command	
53-51	31854-31857	was	
53-52	31858-31868	terminated	
53-53	31869-31871	by	
53-54	31872-31873	a	
53-55	31874-31880	signal	
53-56	31881-31882	(	
53-57	31882-31887	other	
53-58	31888-31892	than	
53-59	31893-31900	SIGTERM	
53-60	31900-31901	,	
53-61	31902-31907	which	
53-62	31908-31910	is	
53-63	31911-31915	used	
53-64	31916-31918	as	
53-65	31919-31923	part	
53-66	31924-31926	of	
53-67	31927-31928	a	
53-68	31929-31937	database	
53-69	31938-31944	server	
53-70	31945-31953	shutdown	
53-71	31953-31954	)	
53-72	31955-31957	or	
53-73	31958-31960	an	
53-74	31961-31966	error	
53-75	31967-31969	by	
53-76	31970-31973	the	
53-77	31974-31979	shell	
53-78	31980-31981	(	
53-79	31981-31985	such	
53-80	31986-31988	as	
53-81	31989-31996	command	
53-82	31997-32000	not	
53-83	32001-32006	found	
53-84	32006-32007	)	
53-85	32007-32008	,	
53-86	32009-32013	then	
53-87	32014-32022	recovery	
53-88	32023-32027	will	
53-89	32028-32033	abort	
53-90	32034-32037	and	
53-91	32038-32041	the	
53-92	32042-32048	server	
53-93	32049-32053	will	
53-94	32054-32057	not	
53-95	32058-32063	start	
53-96	32064-32066	up	
53-97	32066-32067	.	
53-98	32068-32071	Not	
53-99	32072-32075	all	
53-100	32076-32078	of	
53-101	32079-32082	the	
53-102	32083-32092	requested	
53-103	32093-32098	files	
53-104	32099-32103	will	
53-105	32104-32106	be	
53-106	32107-32110	WAL	
53-107	32111-32118	segment	
53-108	32119-32124	files	
53-109	32124-32125	;	
53-110	32126-32129	you	
53-111	32130-32136	should	
53-112	32137-32141	also	
53-113	32142-32148	expect	
53-114	32149-32157	requests	
53-115	32158-32161	for	
53-116	32162-32167	files	
53-117	32168-32172	with	
53-118	32173-32174	a	
53-119	32175-32181	suffix	
53-120	32182-32184	of	
53-121	32185-32186	.	
53-122	32186-32193	history	
53-123	32193-32194	.	
53-124	32195-32199	Also	
53-125	32200-32202	be	
53-126	32203-32208	aware	
53-127	32209-32213	that	
53-128	32214-32217	the	
53-129	32218-32222	base	
53-130	32223-32227	name	
53-131	32228-32230	of	
53-132	32231-32234	the	
53-133	32235-32236	%	
53-134	32236-32237	p	
53-135	32238-32242	path	
53-136	32243-32247	will	
53-137	32248-32250	be	
53-138	32251-32260	different	
53-139	32261-32265	from	
53-140	32266-32267	%	
53-141	32267-32268	f	
53-142	32268-32269	;	
53-143	32270-32272	do	
53-144	32273-32276	not	
53-145	32277-32283	expect	
53-146	32284-32288	them	
53-147	32289-32291	to	
53-148	32292-32294	be	
53-149	32295-32310	interchangeable	
53-150	32310-32311	.	

#Text=WAL segments that cannot be found in the archive will be sought in pg_wal/; this allows use of recent un-archived segments. However, segments that are available from the archive will be used in preference to files in pg_wal/. Normally, recovery will proceed through all available WAL segments, thereby restoring the database to the current point in time (or as close as possible given the available WAL segments). Therefore, a normal recovery will end with a “file not found” message, the exact text of the error message depending upon your choice of restore_command. You may also see an error message at the start of recovery for a file named something like 00000001.history. This is also normal and does not indicate a problem in simple recovery situations; see Section 25.3.5 for discussion.
54-1	32312-32315	WAL	
54-2	32316-32324	segments	
54-3	32325-32329	that	
54-4	32330-32336	cannot	
54-5	32337-32339	be	
54-6	32340-32345	found	
54-7	32346-32348	in	
54-8	32349-32352	the	
54-9	32353-32360	archive	
54-10	32361-32365	will	
54-11	32366-32368	be	
54-12	32369-32375	sought	
54-13	32376-32378	in	
54-14	32379-32385	pg_wal	
54-15	32385-32386	/	
54-16	32386-32387	;	
54-17	32388-32392	this	
54-18	32393-32399	allows	
54-19	32400-32403	use	
54-20	32404-32406	of	
54-21	32407-32413	recent	
54-22	32414-32425	un-archived	
54-23	32426-32434	segments	
54-24	32434-32435	.	
54-25	32436-32443	However	
54-26	32443-32444	,	
54-27	32445-32453	segments	
54-28	32454-32458	that	
54-29	32459-32462	are	
54-30	32463-32472	available	
54-31	32473-32477	from	
54-32	32478-32481	the	
54-33	32482-32489	archive	
54-34	32490-32494	will	
54-35	32495-32497	be	
54-36	32498-32502	used	
54-37	32503-32505	in	
54-38	32506-32516	preference	
54-39	32517-32519	to	
54-40	32520-32525	files	
54-41	32526-32528	in	
54-42	32529-32535	pg_wal	
54-43	32535-32536	/	
54-44	32536-32537	.	
54-45	32538-32546	Normally	
54-46	32546-32547	,	
54-47	32548-32556	recovery	
54-48	32557-32561	will	
54-49	32562-32569	proceed	
54-50	32570-32577	through	
54-51	32578-32581	all	
54-52	32582-32591	available	
54-53	32592-32595	WAL	
54-54	32596-32604	segments	
54-55	32604-32605	,	
54-56	32606-32613	thereby	
54-57	32614-32623	restoring	
54-58	32624-32627	the	
54-59	32628-32636	database	
54-60	32637-32639	to	
54-61	32640-32643	the	
54-62	32644-32651	current	
54-63	32652-32657	point	
54-64	32658-32660	in	
54-65	32661-32665	time	
54-66	32666-32667	(	
54-67	32667-32669	or	
54-68	32670-32672	as	
54-69	32673-32678	close	
54-70	32679-32681	as	
54-71	32682-32690	possible	
54-72	32691-32696	given	
54-73	32697-32700	the	
54-74	32701-32710	available	
54-75	32711-32714	WAL	
54-76	32715-32723	segments	
54-77	32723-32724	)	
54-78	32724-32725	.	
54-79	32726-32735	Therefore	
54-80	32735-32736	,	
54-81	32737-32738	a	
54-82	32739-32745	normal	
54-83	32746-32754	recovery	
54-84	32755-32759	will	
54-85	32760-32763	end	
54-86	32764-32768	with	
54-87	32769-32770	a	
54-88	32771-32772	“	
54-89	32772-32776	file	
54-90	32777-32780	not	
54-91	32781-32786	found	
54-92	32786-32787	”	
54-93	32788-32795	message	
54-94	32795-32796	,	
54-95	32797-32800	the	
54-96	32801-32806	exact	
54-97	32807-32811	text	
54-98	32812-32814	of	
54-99	32815-32818	the	
54-100	32819-32824	error	
54-101	32825-32832	message	
54-102	32833-32842	depending	
54-103	32843-32847	upon	
54-104	32848-32852	your	
54-105	32853-32859	choice	
54-106	32860-32862	of	
54-107	32863-32878	restore_command	
54-108	32878-32879	.	
54-109	32880-32883	You	
54-110	32884-32887	may	
54-111	32888-32892	also	
54-112	32893-32896	see	
54-113	32897-32899	an	
54-114	32900-32905	error	
54-115	32906-32913	message	
54-116	32914-32916	at	
54-117	32917-32920	the	
54-118	32921-32926	start	
54-119	32927-32929	of	
54-120	32930-32938	recovery	
54-121	32939-32942	for	
54-122	32943-32944	a	
54-123	32945-32949	file	
54-124	32950-32955	named	
54-125	32956-32965	something	
54-126	32966-32970	like	
54-127	32971-32979	00000001	
54-128	32979-32980	.	
54-129	32980-32987	history	
54-130	32987-32988	.	
54-131	32989-32993	This	
54-132	32994-32996	is	
54-133	32997-33001	also	
54-134	33002-33008	normal	
54-135	33009-33012	and	
54-136	33013-33017	does	
54-137	33018-33021	not	
54-138	33022-33030	indicate	
54-139	33031-33032	a	
54-140	33033-33040	problem	
54-141	33041-33043	in	
54-142	33044-33050	simple	
54-143	33051-33059	recovery	
54-144	33060-33070	situations	
54-145	33070-33071	;	
54-146	33072-33075	see	
54-147	33076-33083	Section	
54-148	33083-33084	 	
54-149	33084-33090	25.3.5	
54-150	33091-33094	for	
54-151	33095-33105	discussion	
54-152	33105-33106	.	

#Text=If you want to recover to some previous point in time (say, right before the junior DBA dropped your main transaction table), just specify the required stopping point. You can specify the stop point, known as the “recovery target”, either by date/time, named restore point or by completion of a specific transaction ID. As of this writing only the date/time and named restore point options are very usable, since there are no tools to help you identify with any accuracy which transaction ID to use. Note The stop point must be after the ending time of the base backup, i.e., the end time of pg_stop_backup. You cannot use a base backup to recover to a time when that backup was in progress. (To recover to such a time, you must go back to your previous base backup and roll forward from there.)
55-1	33107-33109	If	
55-2	33110-33113	you	
55-3	33114-33118	want	
55-4	33119-33121	to	
55-5	33122-33129	recover	
55-6	33130-33132	to	
55-7	33133-33137	some	
55-8	33138-33146	previous	
55-9	33147-33152	point	
55-10	33153-33155	in	
55-11	33156-33160	time	
55-12	33161-33162	(	
55-13	33162-33165	say	
55-14	33165-33166	,	
55-15	33167-33172	right	
55-16	33173-33179	before	
55-17	33180-33183	the	
55-18	33184-33190	junior	
55-19	33191-33194	DBA	
55-20	33195-33202	dropped	
55-21	33203-33207	your	
55-22	33208-33212	main	
55-23	33213-33224	transaction	
55-24	33225-33230	table	
55-25	33230-33231	)	
55-26	33231-33232	,	
55-27	33233-33237	just	
55-28	33238-33245	specify	
55-29	33246-33249	the	
55-30	33250-33258	required	
55-31	33259-33267	stopping	
55-32	33268-33273	point	
55-33	33273-33274	.	
55-34	33275-33278	You	
55-35	33279-33282	can	
55-36	33283-33290	specify	
55-37	33291-33294	the	
55-38	33295-33299	stop	
55-39	33300-33305	point	
55-40	33305-33306	,	
55-41	33307-33312	known	
55-42	33313-33315	as	
55-43	33316-33319	the	
55-44	33320-33321	“	
55-45	33321-33329	recovery	
55-46	33330-33336	target	
55-47	33336-33337	”	
55-48	33337-33338	,	
55-49	33339-33345	either	
55-50	33346-33348	by	
55-51	33349-33353	date	
55-52	33353-33354	/	
55-53	33354-33358	time	
55-54	33358-33359	,	
55-55	33360-33365	named	
55-56	33366-33373	restore	
55-57	33374-33379	point	
55-58	33380-33382	or	
55-59	33383-33385	by	
55-60	33386-33396	completion	
55-61	33397-33399	of	
55-62	33400-33401	a	
55-63	33402-33410	specific	
55-64	33411-33422	transaction	
55-65	33423-33425	ID	
55-66	33425-33426	.	
55-67	33427-33429	As	
55-68	33430-33432	of	
55-69	33433-33437	this	
55-70	33438-33445	writing	
55-71	33446-33450	only	
55-72	33451-33454	the	
55-73	33455-33459	date	
55-74	33459-33460	/	
55-75	33460-33464	time	
55-76	33465-33468	and	
55-77	33469-33474	named	
55-78	33475-33482	restore	
55-79	33483-33488	point	
55-80	33489-33496	options	
55-81	33497-33500	are	
55-82	33501-33505	very	
55-83	33506-33512	usable	
55-84	33512-33513	,	
55-85	33514-33519	since	
55-86	33520-33525	there	
55-87	33526-33529	are	
55-88	33530-33532	no	
55-89	33533-33538	tools	
55-90	33539-33541	to	
55-91	33542-33546	help	
55-92	33547-33550	you	
55-93	33551-33559	identify	
55-94	33560-33564	with	
55-95	33565-33568	any	
55-96	33569-33577	accuracy	
55-97	33578-33583	which	
55-98	33584-33595	transaction	
55-99	33596-33598	ID	
55-100	33599-33601	to	
55-101	33602-33605	use	
55-102	33605-33606	.	
55-103	33607-33611	Note	
55-104	33612-33615	The	
55-105	33616-33620	stop	
55-106	33621-33626	point	
55-107	33627-33631	must	
55-108	33632-33634	be	
55-109	33635-33640	after	
55-110	33641-33644	the	
55-111	33645-33651	ending	
55-112	33652-33656	time	
55-113	33657-33659	of	
55-114	33660-33663	the	
55-115	33664-33668	base	
55-116	33669-33675	backup	
55-117	33675-33676	,	
55-118	33677-33680	i.e	
55-119	33680-33681	.	
55-120	33681-33682	,	
55-121	33683-33686	the	
55-122	33687-33690	end	
55-123	33691-33695	time	
55-124	33696-33698	of	
55-125	33699-33713	pg_stop_backup	
55-126	33713-33714	.	
55-127	33715-33718	You	
55-128	33719-33725	cannot	
55-129	33726-33729	use	
55-130	33730-33731	a	
55-131	33732-33736	base	
55-132	33737-33743	backup	
55-133	33744-33746	to	
55-134	33747-33754	recover	
55-135	33755-33757	to	
55-136	33758-33759	a	
55-137	33760-33764	time	
55-138	33765-33769	when	
55-139	33770-33774	that	
55-140	33775-33781	backup	
55-141	33782-33785	was	
55-142	33786-33788	in	
55-143	33789-33797	progress	
55-144	33797-33798	.	
55-145	33799-33800	(	
55-146	33800-33802	To	
55-147	33803-33810	recover	
55-148	33811-33813	to	
55-149	33814-33818	such	
55-150	33819-33820	a	
55-151	33821-33825	time	
55-152	33825-33826	,	
55-153	33827-33830	you	
55-154	33831-33835	must	
55-155	33836-33838	go	
55-156	33839-33843	back	
55-157	33844-33846	to	
55-158	33847-33851	your	
55-159	33852-33860	previous	
55-160	33861-33865	base	
55-161	33866-33872	backup	
55-162	33873-33876	and	
55-163	33877-33881	roll	
55-164	33882-33889	forward	
55-165	33890-33894	from	
55-166	33895-33900	there	
55-167	33900-33901	.	
55-168	33901-33902	)	

#Text=If recovery finds corrupted WAL data, recovery will halt at that point and the server will not start. In such a case the recovery process could be re-run from the beginning, specifying a “recovery target” before the point of corruption so that recovery can complete normally. If recovery fails for an external reason, such as a system crash or if the WAL archive has become inaccessible, then the recovery can simply be restarted and it will restart almost from where it failed. Recovery restart works much like checkpointing in normal operation: the server periodically forces all its state to disk, and then updates the pg_control file to indicate that the already-processed WAL data need not be scanned again. 25.3.5. Timelines
56-1	33903-33905	If	
56-2	33906-33914	recovery	
56-3	33915-33920	finds	
56-4	33921-33930	corrupted	
56-5	33931-33934	WAL	
56-6	33935-33939	data	
56-7	33939-33940	,	
56-8	33941-33949	recovery	
56-9	33950-33954	will	
56-10	33955-33959	halt	
56-11	33960-33962	at	
56-12	33963-33967	that	
56-13	33968-33973	point	
56-14	33974-33977	and	
56-15	33978-33981	the	
56-16	33982-33988	server	
56-17	33989-33993	will	
56-18	33994-33997	not	
56-19	33998-34003	start	
56-20	34003-34004	.	
56-21	34005-34007	In	
56-22	34008-34012	such	
56-23	34013-34014	a	
56-24	34015-34019	case	
56-25	34020-34023	the	
56-26	34024-34032	recovery	
56-27	34033-34040	process	
56-28	34041-34046	could	
56-29	34047-34049	be	
56-30	34050-34056	re-run	
56-31	34057-34061	from	
56-32	34062-34065	the	
56-33	34066-34075	beginning	
56-34	34075-34076	,	
56-35	34077-34087	specifying	
56-36	34088-34089	a	
56-37	34090-34091	“	
56-38	34091-34099	recovery	
56-39	34100-34106	target	
56-40	34106-34107	”	
56-41	34108-34114	before	
56-42	34115-34118	the	
56-43	34119-34124	point	
56-44	34125-34127	of	
56-45	34128-34138	corruption	
56-46	34139-34141	so	
56-47	34142-34146	that	
56-48	34147-34155	recovery	
56-49	34156-34159	can	
56-50	34160-34168	complete	
56-51	34169-34177	normally	
56-52	34177-34178	.	
56-53	34179-34181	If	
56-54	34182-34190	recovery	
56-55	34191-34196	fails	
56-56	34197-34200	for	
56-57	34201-34203	an	
56-58	34204-34212	external	
56-59	34213-34219	reason	
56-60	34219-34220	,	
56-61	34221-34225	such	
56-62	34226-34228	as	
56-63	34229-34230	a	
56-64	34231-34237	system	
56-65	34238-34243	crash	
56-66	34244-34246	or	
56-67	34247-34249	if	
56-68	34250-34253	the	
56-69	34254-34257	WAL	
56-70	34258-34265	archive	
56-71	34266-34269	has	
56-72	34270-34276	become	
56-73	34277-34289	inaccessible	
56-74	34289-34290	,	
56-75	34291-34295	then	
56-76	34296-34299	the	
56-77	34300-34308	recovery	
56-78	34309-34312	can	
56-79	34313-34319	simply	
56-80	34320-34322	be	
56-81	34323-34332	restarted	
56-82	34333-34336	and	
56-83	34337-34339	it	
56-84	34340-34344	will	
56-85	34345-34352	restart	
56-86	34353-34359	almost	
56-87	34360-34364	from	
56-88	34365-34370	where	
56-89	34371-34373	it	
56-90	34374-34380	failed	
56-91	34380-34381	.	
56-92	34382-34390	Recovery	
56-93	34391-34398	restart	
56-94	34399-34404	works	
56-95	34405-34409	much	
56-96	34410-34414	like	
56-97	34415-34428	checkpointing	
56-98	34429-34431	in	
56-99	34432-34438	normal	
56-100	34439-34448	operation	
56-101	34448-34449	:	
56-102	34450-34453	the	
56-103	34454-34460	server	
56-104	34461-34473	periodically	
56-105	34474-34480	forces	
56-106	34481-34484	all	
56-107	34485-34488	its	
56-108	34489-34494	state	
56-109	34495-34497	to	
56-110	34498-34502	disk	
56-111	34502-34503	,	
56-112	34504-34507	and	
56-113	34508-34512	then	
56-114	34513-34520	updates	
56-115	34521-34524	the	
56-116	34525-34535	pg_control	
56-117	34536-34540	file	
56-118	34541-34543	to	
56-119	34544-34552	indicate	
56-120	34553-34557	that	
56-121	34558-34561	the	
56-122	34562-34579	already-processed	
56-123	34580-34583	WAL	
56-124	34584-34588	data	
56-125	34589-34593	need	
56-126	34594-34597	not	
56-127	34598-34600	be	
56-128	34601-34608	scanned	
56-129	34609-34614	again	
56-130	34614-34615	.	
56-131	34616-34622	25.3.5	
56-132	34622-34623	.	
56-133	34623-34624	 	
56-134	34624-34633	Timelines	

#Text=The ability to restore the database to a previous point in time creates some complexities that are akin to science-fiction stories about time travel and parallel universes. For example, in the original history of the database, suppose you dropped a critical table at 5:15PM on Tuesday evening, but didn't realize your mistake until Wednesday noon. Unfazed, you get out your backup, restore to the point-in-time 5:14PM Tuesday evening, and are up and running. In this history of the database universe, you never dropped the table. But suppose you later realize this wasn't such a great idea, and would like to return to sometime Wednesday morning in the original history. You won't be able to if, while your database was up-and-running, it overwrote some of the WAL segment files that led up to the time you now wish you could get back to. Thus, to avoid this, you need to distinguish the series of WAL records generated after you've done a point-in-time recovery from those that were generated in the original database history.
57-1	34634-34637	The	
57-2	34638-34645	ability	
57-3	34646-34648	to	
57-4	34649-34656	restore	
57-5	34657-34660	the	
57-6	34661-34669	database	
57-7	34670-34672	to	
57-8	34673-34674	a	
57-9	34675-34683	previous	
57-10	34684-34689	point	
57-11	34690-34692	in	
57-12	34693-34697	time	
57-13	34698-34705	creates	
57-14	34706-34710	some	
57-15	34711-34723	complexities	
57-16	34724-34728	that	
57-17	34729-34732	are	
57-18	34733-34737	akin	
57-19	34738-34740	to	
57-20	34741-34756	science-fiction	
57-21	34757-34764	stories	
57-22	34765-34770	about	
57-23	34771-34775	time	
57-24	34776-34782	travel	
57-25	34783-34786	and	
57-26	34787-34795	parallel	
57-27	34796-34805	universes	
57-28	34805-34806	.	
57-29	34807-34810	For	
57-30	34811-34818	example	
57-31	34818-34819	,	
57-32	34820-34822	in	
57-33	34823-34826	the	
57-34	34827-34835	original	
57-35	34836-34843	history	
57-36	34844-34846	of	
57-37	34847-34850	the	
57-38	34851-34859	database	
57-39	34859-34860	,	
57-40	34861-34868	suppose	
57-41	34869-34872	you	
57-42	34873-34880	dropped	
57-43	34881-34882	a	
57-44	34883-34891	critical	
57-45	34892-34897	table	
57-46	34898-34900	at	
57-47	34901-34902	5	
57-48	34902-34903	:	
57-49	34903-34907	15PM	
57-50	34908-34910	on	
57-51	34911-34918	Tuesday	
57-52	34919-34926	evening	
57-53	34926-34927	,	
57-54	34928-34931	but	
57-55	34932-34938	didn't	
57-56	34939-34946	realize	
57-57	34947-34951	your	
57-58	34952-34959	mistake	
57-59	34960-34965	until	
57-60	34966-34975	Wednesday	
57-61	34976-34980	noon	
57-62	34980-34981	.	
57-63	34982-34989	Unfazed	
57-64	34989-34990	,	
57-65	34991-34994	you	
57-66	34995-34998	get	
57-67	34999-35002	out	
57-68	35003-35007	your	
57-69	35008-35014	backup	
57-70	35014-35015	,	
57-71	35016-35023	restore	
57-72	35024-35026	to	
57-73	35027-35030	the	
57-74	35031-35044	point-in-time	
57-75	35045-35046	5	
57-76	35046-35047	:	
57-77	35047-35051	14PM	
57-78	35052-35059	Tuesday	
57-79	35060-35067	evening	
57-80	35067-35068	,	
57-81	35069-35072	and	
57-82	35073-35076	are	
57-83	35077-35079	up	
57-84	35080-35083	and	
57-85	35084-35091	running	
57-86	35091-35092	.	
57-87	35093-35095	In	
57-88	35096-35100	this	
57-89	35101-35108	history	
57-90	35109-35111	of	
57-91	35112-35115	the	
57-92	35116-35124	database	
57-93	35125-35133	universe	
57-94	35133-35134	,	
57-95	35135-35138	you	
57-96	35139-35144	never	
57-97	35145-35152	dropped	
57-98	35153-35156	the	
57-99	35157-35162	table	
57-100	35162-35163	.	
57-101	35164-35167	But	
57-102	35168-35175	suppose	
57-103	35176-35179	you	
57-104	35180-35185	later	
57-105	35186-35193	realize	
57-106	35194-35198	this	
57-107	35199-35205	wasn't	
57-108	35206-35210	such	
57-109	35211-35212	a	
57-110	35213-35218	great	
57-111	35219-35223	idea	
57-112	35223-35224	,	
57-113	35225-35228	and	
57-114	35229-35234	would	
57-115	35235-35239	like	
57-116	35240-35242	to	
57-117	35243-35249	return	
57-118	35250-35252	to	
57-119	35253-35261	sometime	
57-120	35262-35271	Wednesday	
57-121	35272-35279	morning	
57-122	35280-35282	in	
57-123	35283-35286	the	
57-124	35287-35295	original	
57-125	35296-35303	history	
57-126	35303-35304	.	
57-127	35305-35308	You	
57-128	35309-35314	won't	
57-129	35315-35317	be	
57-130	35318-35322	able	
57-131	35323-35325	to	
57-132	35326-35328	if	
57-133	35328-35329	,	
57-134	35330-35335	while	
57-135	35336-35340	your	
57-136	35341-35349	database	
57-137	35350-35353	was	
57-138	35354-35368	up-and-running	
57-139	35368-35369	,	
57-140	35370-35372	it	
57-141	35373-35382	overwrote	
57-142	35383-35387	some	
57-143	35388-35390	of	
57-144	35391-35394	the	
57-145	35395-35398	WAL	
57-146	35399-35406	segment	
57-147	35407-35412	files	
57-148	35413-35417	that	
57-149	35418-35421	led	
57-150	35422-35424	up	
57-151	35425-35427	to	
57-152	35428-35431	the	
57-153	35432-35436	time	
57-154	35437-35440	you	
57-155	35441-35444	now	
57-156	35445-35449	wish	
57-157	35450-35453	you	
57-158	35454-35459	could	
57-159	35460-35463	get	
57-160	35464-35468	back	
57-161	35469-35471	to	
57-162	35471-35472	.	
57-163	35473-35477	Thus	
57-164	35477-35478	,	
57-165	35479-35481	to	
57-166	35482-35487	avoid	
57-167	35488-35492	this	
57-168	35492-35493	,	
57-169	35494-35497	you	
57-170	35498-35502	need	
57-171	35503-35505	to	
57-172	35506-35517	distinguish	
57-173	35518-35521	the	
57-174	35522-35528	series	
57-175	35529-35531	of	
57-176	35532-35535	WAL	
57-177	35536-35543	records	
57-178	35544-35553	generated	
57-179	35554-35559	after	
57-180	35560-35566	you've	
57-181	35567-35571	done	
57-182	35572-35573	a	
57-183	35574-35587	point-in-time	
57-184	35588-35596	recovery	
57-185	35597-35601	from	
57-186	35602-35607	those	
57-187	35608-35612	that	
57-188	35613-35617	were	
57-189	35618-35627	generated	
57-190	35628-35630	in	
57-191	35631-35634	the	
57-192	35635-35643	original	
57-193	35644-35652	database	
57-194	35653-35660	history	
57-195	35660-35661	.	

#Text=To deal with this problem, PostgreSQL has a notion of timelines. Whenever an archive recovery completes, a new timeline is created to identify the series of WAL records generated after that recovery. The timeline ID number is part of WAL segment file names so a new timeline does not overwrite the WAL data generated by previous timelines. It is in fact possible to archive many different timelines. While that might seem like a useless feature, it's often a lifesaver. Consider the situation where you aren't quite sure what point-in-time to recover to, and so have to do several point-in-time recoveries by trial and error until you find the best place to branch off from the old history. Without timelines this process would soon generate an unmanageable mess. With timelines, you can recover to any prior state, including states in timeline branches that you abandoned earlier.
58-1	35662-35664	To	
58-2	35665-35669	deal	
58-3	35670-35674	with	
58-4	35675-35679	this	
58-5	35680-35687	problem	
58-6	35687-35688	,	
58-7	35689-35699	PostgreSQL	
58-8	35700-35703	has	
58-9	35704-35705	a	
58-10	35706-35712	notion	
58-11	35713-35715	of	
58-12	35716-35725	timelines	
58-13	35725-35726	.	
58-14	35727-35735	Whenever	
58-15	35736-35738	an	
58-16	35739-35746	archive	
58-17	35747-35755	recovery	
58-18	35756-35765	completes	
58-19	35765-35766	,	
58-20	35767-35768	a	
58-21	35769-35772	new	
58-22	35773-35781	timeline	
58-23	35782-35784	is	
58-24	35785-35792	created	
58-25	35793-35795	to	
58-26	35796-35804	identify	
58-27	35805-35808	the	
58-28	35809-35815	series	
58-29	35816-35818	of	
58-30	35819-35822	WAL	
58-31	35823-35830	records	
58-32	35831-35840	generated	
58-33	35841-35846	after	
58-34	35847-35851	that	
58-35	35852-35860	recovery	
58-36	35860-35861	.	
58-37	35862-35865	The	
58-38	35866-35874	timeline	
58-39	35875-35877	ID	
58-40	35878-35884	number	
58-41	35885-35887	is	
58-42	35888-35892	part	
58-43	35893-35895	of	
58-44	35896-35899	WAL	
58-45	35900-35907	segment	
58-46	35908-35912	file	
58-47	35913-35918	names	
58-48	35919-35921	so	
58-49	35922-35923	a	
58-50	35924-35927	new	
58-51	35928-35936	timeline	
58-52	35937-35941	does	
58-53	35942-35945	not	
58-54	35946-35955	overwrite	
58-55	35956-35959	the	
58-56	35960-35963	WAL	
58-57	35964-35968	data	
58-58	35969-35978	generated	
58-59	35979-35981	by	
58-60	35982-35990	previous	
58-61	35991-36000	timelines	
58-62	36000-36001	.	
58-63	36002-36004	It	
58-64	36005-36007	is	
58-65	36008-36010	in	
58-66	36011-36015	fact	
58-67	36016-36024	possible	
58-68	36025-36027	to	
58-69	36028-36035	archive	
58-70	36036-36040	many	
58-71	36041-36050	different	
58-72	36051-36060	timelines	
58-73	36060-36061	.	
58-74	36062-36067	While	
58-75	36068-36072	that	
58-76	36073-36078	might	
58-77	36079-36083	seem	
58-78	36084-36088	like	
58-79	36089-36090	a	
58-80	36091-36098	useless	
58-81	36099-36106	feature	
58-82	36106-36107	,	
58-83	36108-36112	it's	
58-84	36113-36118	often	
58-85	36119-36120	a	
58-86	36121-36130	lifesaver	
58-87	36130-36131	.	
58-88	36132-36140	Consider	
58-89	36141-36144	the	
58-90	36145-36154	situation	
58-91	36155-36160	where	
58-92	36161-36164	you	
58-93	36165-36171	aren't	
58-94	36172-36177	quite	
58-95	36178-36182	sure	
58-96	36183-36187	what	
58-97	36188-36201	point-in-time	
58-98	36202-36204	to	
58-99	36205-36212	recover	
58-100	36213-36215	to	
58-101	36215-36216	,	
58-102	36217-36220	and	
58-103	36221-36223	so	
58-104	36224-36228	have	
58-105	36229-36231	to	
58-106	36232-36234	do	
58-107	36235-36242	several	
58-108	36243-36256	point-in-time	
58-109	36257-36267	recoveries	
58-110	36268-36270	by	
58-111	36271-36276	trial	
58-112	36277-36280	and	
58-113	36281-36286	error	
58-114	36287-36292	until	
58-115	36293-36296	you	
58-116	36297-36301	find	
58-117	36302-36305	the	
58-118	36306-36310	best	
58-119	36311-36316	place	
58-120	36317-36319	to	
58-121	36320-36326	branch	
58-122	36327-36330	off	
58-123	36331-36335	from	
58-124	36336-36339	the	
58-125	36340-36343	old	
58-126	36344-36351	history	
58-127	36351-36352	.	
58-128	36353-36360	Without	
58-129	36361-36370	timelines	
58-130	36371-36375	this	
58-131	36376-36383	process	
58-132	36384-36389	would	
58-133	36390-36394	soon	
58-134	36395-36403	generate	
58-135	36404-36406	an	
58-136	36407-36419	unmanageable	
58-137	36420-36424	mess	
58-138	36424-36425	.	
58-139	36426-36430	With	
58-140	36431-36440	timelines	
58-141	36440-36441	,	
58-142	36442-36445	you	
58-143	36446-36449	can	
58-144	36450-36457	recover	
58-145	36458-36460	to	
58-146	36461-36464	any	
58-147	36465-36470	prior	
58-148	36471-36476	state	
58-149	36476-36477	,	
58-150	36478-36487	including	
58-151	36488-36494	states	
58-152	36495-36497	in	
58-153	36498-36506	timeline	
58-154	36507-36515	branches	
58-155	36516-36520	that	
58-156	36521-36524	you	
58-157	36525-36534	abandoned	
58-158	36535-36542	earlier	
58-159	36542-36543	.	

#Text=Every time a new timeline is created, PostgreSQL creates a “timeline history” file that shows which timeline it branched off from and when. These history files are necessary to allow the system to pick the right WAL segment files when recovering from an archive that contains multiple timelines. Therefore, they are archived into the WAL archive area just like WAL segment files. The history files are just small text files, so it's cheap and appropriate to keep them around indefinitely (unlike the segment files which are large). You can, if you like, add comments to a history file to record your own notes about how and why this particular timeline was created. Such comments will be especially valuable when you have a thicket of different timelines as a result of experimentation. The default behavior of recovery is to recover to the latest timeline found in the archive. If you wish to recover to the timeline that was current when the base backup was taken or into a specific child timeline (that is, you want to return to some state that was itself generated after a recovery attempt), you need to specify current or the target timeline ID in recovery_target_timeline. You cannot recover into timelines that branched off earlier than the base backup.
59-1	36544-36549	Every	
59-2	36550-36554	time	
59-3	36555-36556	a	
59-4	36557-36560	new	
59-5	36561-36569	timeline	
59-6	36570-36572	is	
59-7	36573-36580	created	
59-8	36580-36581	,	
59-9	36582-36592	PostgreSQL	
59-10	36593-36600	creates	
59-11	36601-36602	a	
59-12	36603-36604	“	
59-13	36604-36612	timeline	
59-14	36613-36620	history	
59-15	36620-36621	”	
59-16	36622-36626	file	
59-17	36627-36631	that	
59-18	36632-36637	shows	
59-19	36638-36643	which	
59-20	36644-36652	timeline	
59-21	36653-36655	it	
59-22	36656-36664	branched	
59-23	36665-36668	off	
59-24	36669-36673	from	
59-25	36674-36677	and	
59-26	36678-36682	when	
59-27	36682-36683	.	
59-28	36684-36689	These	
59-29	36690-36697	history	
59-30	36698-36703	files	
59-31	36704-36707	are	
59-32	36708-36717	necessary	
59-33	36718-36720	to	
59-34	36721-36726	allow	
59-35	36727-36730	the	
59-36	36731-36737	system	
59-37	36738-36740	to	
59-38	36741-36745	pick	
59-39	36746-36749	the	
59-40	36750-36755	right	
59-41	36756-36759	WAL	
59-42	36760-36767	segment	
59-43	36768-36773	files	
59-44	36774-36778	when	
59-45	36779-36789	recovering	
59-46	36790-36794	from	
59-47	36795-36797	an	
59-48	36798-36805	archive	
59-49	36806-36810	that	
59-50	36811-36819	contains	
59-51	36820-36828	multiple	
59-52	36829-36838	timelines	
59-53	36838-36839	.	
59-54	36840-36849	Therefore	
59-55	36849-36850	,	
59-56	36851-36855	they	
59-57	36856-36859	are	
59-58	36860-36868	archived	
59-59	36869-36873	into	
59-60	36874-36877	the	
59-61	36878-36881	WAL	
59-62	36882-36889	archive	
59-63	36890-36894	area	
59-64	36895-36899	just	
59-65	36900-36904	like	
59-66	36905-36908	WAL	
59-67	36909-36916	segment	
59-68	36917-36922	files	
59-69	36922-36923	.	
59-70	36924-36927	The	
59-71	36928-36935	history	
59-72	36936-36941	files	
59-73	36942-36945	are	
59-74	36946-36950	just	
59-75	36951-36956	small	
59-76	36957-36961	text	
59-77	36962-36967	files	
59-78	36967-36968	,	
59-79	36969-36971	so	
59-80	36972-36976	it's	
59-81	36977-36982	cheap	
59-82	36983-36986	and	
59-83	36987-36998	appropriate	
59-84	36999-37001	to	
59-85	37002-37006	keep	
59-86	37007-37011	them	
59-87	37012-37018	around	
59-88	37019-37031	indefinitely	
59-89	37032-37033	(	
59-90	37033-37039	unlike	
59-91	37040-37043	the	
59-92	37044-37051	segment	
59-93	37052-37057	files	
59-94	37058-37063	which	
59-95	37064-37067	are	
59-96	37068-37073	large	
59-97	37073-37074	)	
59-98	37074-37075	.	
59-99	37076-37079	You	
59-100	37080-37083	can	
59-101	37083-37084	,	
59-102	37085-37087	if	
59-103	37088-37091	you	
59-104	37092-37096	like	
59-105	37096-37097	,	
59-106	37098-37101	add	
59-107	37102-37110	comments	
59-108	37111-37113	to	
59-109	37114-37115	a	
59-110	37116-37123	history	
59-111	37124-37128	file	
59-112	37129-37131	to	
59-113	37132-37138	record	
59-114	37139-37143	your	
59-115	37144-37147	own	
59-116	37148-37153	notes	
59-117	37154-37159	about	
59-118	37160-37163	how	
59-119	37164-37167	and	
59-120	37168-37171	why	
59-121	37172-37176	this	
59-122	37177-37187	particular	
59-123	37188-37196	timeline	
59-124	37197-37200	was	
59-125	37201-37208	created	
59-126	37208-37209	.	
59-127	37210-37214	Such	
59-128	37215-37223	comments	
59-129	37224-37228	will	
59-130	37229-37231	be	
59-131	37232-37242	especially	
59-132	37243-37251	valuable	
59-133	37252-37256	when	
59-134	37257-37260	you	
59-135	37261-37265	have	
59-136	37266-37267	a	
59-137	37268-37275	thicket	
59-138	37276-37278	of	
59-139	37279-37288	different	
59-140	37289-37298	timelines	
59-141	37299-37301	as	
59-142	37302-37303	a	
59-143	37304-37310	result	
59-144	37311-37313	of	
59-145	37314-37329	experimentation	
59-146	37329-37330	.	
59-147	37331-37334	The	
59-148	37335-37342	default	
59-149	37343-37351	behavior	
59-150	37352-37354	of	
59-151	37355-37363	recovery	
59-152	37364-37366	is	
59-153	37367-37369	to	
59-154	37370-37377	recover	
59-155	37378-37380	to	
59-156	37381-37384	the	
59-157	37385-37391	latest	
59-158	37392-37400	timeline	
59-159	37401-37406	found	
59-160	37407-37409	in	
59-161	37410-37413	the	
59-162	37414-37421	archive	
59-163	37421-37422	.	
59-164	37423-37425	If	
59-165	37426-37429	you	
59-166	37430-37434	wish	
59-167	37435-37437	to	
59-168	37438-37445	recover	
59-169	37446-37448	to	
59-170	37449-37452	the	
59-171	37453-37461	timeline	
59-172	37462-37466	that	
59-173	37467-37470	was	
59-174	37471-37478	current	
59-175	37479-37483	when	
59-176	37484-37487	the	
59-177	37488-37492	base	
59-178	37493-37499	backup	
59-179	37500-37503	was	
59-180	37504-37509	taken	
59-181	37510-37512	or	
59-182	37513-37517	into	
59-183	37518-37519	a	
59-184	37520-37528	specific	
59-185	37529-37534	child	
59-186	37535-37543	timeline	
59-187	37544-37545	(	
59-188	37545-37549	that	
59-189	37550-37552	is	
59-190	37552-37553	,	
59-191	37554-37557	you	
59-192	37558-37562	want	
59-193	37563-37565	to	
59-194	37566-37572	return	
59-195	37573-37575	to	
59-196	37576-37580	some	
59-197	37581-37586	state	
59-198	37587-37591	that	
59-199	37592-37595	was	
59-200	37596-37602	itself	
59-201	37603-37612	generated	
59-202	37613-37618	after	
59-203	37619-37620	a	
59-204	37621-37629	recovery	
59-205	37630-37637	attempt	
59-206	37637-37638	)	
59-207	37638-37639	,	
59-208	37640-37643	you	
59-209	37644-37648	need	
59-210	37649-37651	to	
59-211	37652-37659	specify	
59-212	37660-37667	current	
59-213	37668-37670	or	
59-214	37671-37674	the	
59-215	37675-37681	target	
59-216	37682-37690	timeline	
59-217	37691-37693	ID	
59-218	37694-37696	in	
59-219	37697-37721	recovery_target_timeline	
59-220	37721-37722	.	
59-221	37723-37726	You	
59-222	37727-37733	cannot	
59-223	37734-37741	recover	
59-224	37742-37746	into	
59-225	37747-37756	timelines	
59-226	37757-37761	that	
59-227	37762-37770	branched	
59-228	37771-37774	off	
59-229	37775-37782	earlier	
59-230	37783-37787	than	
59-231	37788-37791	the	
59-232	37792-37796	base	
59-233	37797-37803	backup	
59-234	37803-37804	.	

#Text=25.3.6. Tips and Examples Some tips for configuring continuous archiving are given here. 25.3.6.1. Standalone Hot Backups
60-1	37805-37811	25.3.6	
60-2	37811-37812	.	
60-3	37812-37813	 	
60-4	37813-37817	Tips	
60-5	37818-37821	and	
60-6	37822-37830	Examples	
60-7	37831-37835	Some	
60-8	37836-37840	tips	
60-9	37841-37844	for	
60-10	37845-37856	configuring	
60-11	37857-37867	continuous	
60-12	37868-37877	archiving	
60-13	37878-37881	are	
60-14	37882-37887	given	
60-15	37888-37892	here	
60-16	37892-37893	.	
60-17	37894-37902	25.3.6.1	
60-18	37902-37903	.	
60-19	37903-37904	 	
60-20	37904-37914	Standalone	
60-21	37915-37918	Hot	
60-22	37919-37926	Backups	

#Text=It is possible to use PostgreSQL's backup facilities to produce standalone hot backups. These are backups that cannot be used for point-in-time recovery, yet are typically much faster to backup and restore than pg_dump dumps. (They are also much larger than pg_dump dumps, so in some cases the speed advantage might be negated.) As with base backups, the easiest way to produce a standalone hot backup is to use the pg_basebackup tool. If you include the -X parameter when calling it, all the write-ahead log required to use the backup will be included in the backup automatically, and no special action is required to restore the backup.
61-1	37927-37929	It	
61-2	37930-37932	is	
61-3	37933-37941	possible	
61-4	37942-37944	to	
61-5	37945-37948	use	
61-6	37949-37961	PostgreSQL's	
61-7	37962-37968	backup	
61-8	37969-37979	facilities	
61-9	37980-37982	to	
61-10	37983-37990	produce	
61-11	37991-38001	standalone	
61-12	38002-38005	hot	
61-13	38006-38013	backups	
61-14	38013-38014	.	
61-15	38015-38020	These	
61-16	38021-38024	are	
61-17	38025-38032	backups	
61-18	38033-38037	that	
61-19	38038-38044	cannot	
61-20	38045-38047	be	
61-21	38048-38052	used	
61-22	38053-38056	for	
61-23	38057-38070	point-in-time	
61-24	38071-38079	recovery	
61-25	38079-38080	,	
61-26	38081-38084	yet	
61-27	38085-38088	are	
61-28	38089-38098	typically	
61-29	38099-38103	much	
61-30	38104-38110	faster	
61-31	38111-38113	to	
61-32	38114-38120	backup	
61-33	38121-38124	and	
61-34	38125-38132	restore	
61-35	38133-38137	than	
61-36	38138-38145	pg_dump	
61-37	38146-38151	dumps	
61-38	38151-38152	.	
61-39	38153-38154	(	
61-40	38154-38158	They	
61-41	38159-38162	are	
61-42	38163-38167	also	
61-43	38168-38172	much	
61-44	38173-38179	larger	
61-45	38180-38184	than	
61-46	38185-38192	pg_dump	
61-47	38193-38198	dumps	
61-48	38198-38199	,	
61-49	38200-38202	so	
61-50	38203-38205	in	
61-51	38206-38210	some	
61-52	38211-38216	cases	
61-53	38217-38220	the	
61-54	38221-38226	speed	
61-55	38227-38236	advantage	
61-56	38237-38242	might	
61-57	38243-38245	be	
61-58	38246-38253	negated	
61-59	38253-38254	.	
61-60	38254-38255	)	
61-61	38256-38258	As	
61-62	38259-38263	with	
61-63	38264-38268	base	
61-64	38269-38276	backups	
61-65	38276-38277	,	
61-66	38278-38281	the	
61-67	38282-38289	easiest	
61-68	38290-38293	way	
61-69	38294-38296	to	
61-70	38297-38304	produce	
61-71	38305-38306	a	
61-72	38307-38317	standalone	
61-73	38318-38321	hot	
61-74	38322-38328	backup	
61-75	38329-38331	is	
61-76	38332-38334	to	
61-77	38335-38338	use	
61-78	38339-38342	the	
61-79	38343-38356	pg_basebackup	
61-80	38357-38361	tool	
61-81	38361-38362	.	
61-82	38363-38365	If	
61-83	38366-38369	you	
61-84	38370-38377	include	
61-85	38378-38381	the	
61-86	38382-38383	-	
61-87	38383-38384	X	
61-88	38385-38394	parameter	
61-89	38395-38399	when	
61-90	38400-38407	calling	
61-91	38408-38410	it	
61-92	38410-38411	,	
61-93	38412-38415	all	
61-94	38416-38419	the	
61-95	38420-38431	write-ahead	
61-96	38432-38435	log	
61-97	38436-38444	required	
61-98	38445-38447	to	
61-99	38448-38451	use	
61-100	38452-38455	the	
61-101	38456-38462	backup	
61-102	38463-38467	will	
61-103	38468-38470	be	
61-104	38471-38479	included	
61-105	38480-38482	in	
61-106	38483-38486	the	
61-107	38487-38493	backup	
61-108	38494-38507	automatically	
61-109	38507-38508	,	
61-110	38509-38512	and	
61-111	38513-38515	no	
61-112	38516-38523	special	
61-113	38524-38530	action	
61-114	38531-38533	is	
61-115	38534-38542	required	
61-116	38543-38545	to	
61-117	38546-38553	restore	
61-118	38554-38557	the	
61-119	38558-38564	backup	
61-120	38564-38565	.	

#Text=If more flexibility in copying the backup files is needed, a lower level process can be used for standalone hot backups as well. To prepare for low level standalone hot backups, make sure wal_level is set to replica or higher, archive_mode to on, and set up an archive_command that performs archiving only when a switch file exists. For example: archive_command = 'test ! -f /var/lib/pgsql/backup_in_progress || (test ! -f /var/lib/pgsql/archive/%f && cp %p /var/lib/pgsql/archive/%f)'
62-1	38566-38568	If	
62-2	38569-38573	more	
62-3	38574-38585	flexibility	
62-4	38586-38588	in	
62-5	38589-38596	copying	
62-6	38597-38600	the	
62-7	38601-38607	backup	
62-8	38608-38613	files	
62-9	38614-38616	is	
62-10	38617-38623	needed	
62-11	38623-38624	,	
62-12	38625-38626	a	
62-13	38627-38632	lower	
62-14	38633-38638	level	
62-15	38639-38646	process	
62-16	38647-38650	can	
62-17	38651-38653	be	
62-18	38654-38658	used	
62-19	38659-38662	for	
62-20	38663-38673	standalone	
62-21	38674-38677	hot	
62-22	38678-38685	backups	
62-23	38686-38688	as	
62-24	38689-38693	well	
62-25	38693-38694	.	
62-26	38695-38697	To	
62-27	38698-38705	prepare	
62-28	38706-38709	for	
62-29	38710-38713	low	
62-30	38714-38719	level	
62-31	38720-38730	standalone	
62-32	38731-38734	hot	
62-33	38735-38742	backups	
62-34	38742-38743	,	
62-35	38744-38748	make	
62-36	38749-38753	sure	
62-37	38754-38763	wal_level	
62-38	38764-38766	is	
62-39	38767-38770	set	
62-40	38771-38773	to	
62-41	38774-38781	replica	
62-42	38782-38784	or	
62-43	38785-38791	higher	
62-44	38791-38792	,	
62-45	38793-38805	archive_mode	
62-46	38806-38808	to	
62-47	38809-38811	on	
62-48	38811-38812	,	
62-49	38813-38816	and	
62-50	38817-38820	set	
62-51	38821-38823	up	
62-52	38824-38826	an	
62-53	38827-38842	archive_command	
62-54	38843-38847	that	
62-55	38848-38856	performs	
62-56	38857-38866	archiving	
62-57	38867-38871	only	
62-58	38872-38876	when	
62-59	38877-38878	a	
62-60	38879-38885	switch	
62-61	38886-38890	file	
62-62	38891-38897	exists	
62-63	38897-38898	.	
62-64	38899-38902	For	
62-65	38903-38910	example	
62-66	38910-38911	:	
62-67	38912-38927	archive_command	
62-68	38928-38929	=	
62-69	38930-38931	'	
62-70	38931-38935	test	
62-71	38936-38937	!	
62-72	38938-38939	-	
62-73	38939-38940	f	
62-74	38941-38942	/	
62-75	38942-38945	var	
62-76	38945-38946	/	
62-77	38946-38949	lib	
62-78	38949-38950	/	
62-79	38950-38955	pgsql	
62-80	38955-38956	/	
62-81	38956-38974	backup_in_progress	
62-82	38975-38976	|	
62-83	38976-38977	|	
62-84	38978-38979	(	
62-85	38979-38983	test	
62-86	38984-38985	!	
62-87	38986-38987	-	
62-88	38987-38988	f	
62-89	38989-38990	/	
62-90	38990-38993	var	
62-91	38993-38994	/	
62-92	38994-38997	lib	
62-93	38997-38998	/	
62-94	38998-39003	pgsql	
62-95	39003-39004	/	
62-96	39004-39011	archive	
62-97	39011-39012	/	
62-98	39012-39013	%	
62-99	39013-39014	f	
62-100	39015-39016	&	
62-101	39016-39017	&	
62-102	39018-39020	cp	
62-103	39021-39022	%	
62-104	39022-39023	p	
62-105	39024-39025	/	
62-106	39025-39028	var	
62-107	39028-39029	/	
62-108	39029-39032	lib	
62-109	39032-39033	/	
62-110	39033-39038	pgsql	
62-111	39038-39039	/	
62-112	39039-39046	archive	
62-113	39046-39047	/	
62-114	39047-39048	%	
62-115	39048-39049	f	
62-116	39049-39050	)	
62-117	39050-39051	'	

#Text=This command will perform archiving when /var/lib/pgsql/backup_in_progress exists, and otherwise silently return zero exit status (allowing PostgreSQL to recycle the unwanted WAL file). With this preparation, a backup can be taken using a script like the following: touch /var/lib/pgsql/backup_in_progress psql -c "select pg_start_backup('hot_backup');"
63-1	39052-39056	This	
63-2	39057-39064	command	
63-3	39065-39069	will	
63-4	39070-39077	perform	
63-5	39078-39087	archiving	
63-6	39088-39092	when	
63-7	39093-39094	/	
63-8	39094-39097	var	
63-9	39097-39098	/	
63-10	39098-39101	lib	
63-11	39101-39102	/	
63-12	39102-39107	pgsql	
63-13	39107-39108	/	
63-14	39108-39126	backup_in_progress	
63-15	39127-39133	exists	
63-16	39133-39134	,	
63-17	39135-39138	and	
63-18	39139-39148	otherwise	
63-19	39149-39157	silently	
63-20	39158-39164	return	
63-21	39165-39169	zero	
63-22	39170-39174	exit	
63-23	39175-39181	status	
63-24	39182-39183	(	
63-25	39183-39191	allowing	
63-26	39192-39202	PostgreSQL	
63-27	39203-39205	to	
63-28	39206-39213	recycle	
63-29	39214-39217	the	
63-30	39218-39226	unwanted	
63-31	39227-39230	WAL	
63-32	39231-39235	file	
63-33	39235-39236	)	
63-34	39236-39237	.	
63-35	39238-39242	With	
63-36	39243-39247	this	
63-37	39248-39259	preparation	
63-38	39259-39260	,	
63-39	39261-39262	a	
63-40	39263-39269	backup	
63-41	39270-39273	can	
63-42	39274-39276	be	
63-43	39277-39282	taken	
63-44	39283-39288	using	
63-45	39289-39290	a	
63-46	39291-39297	script	
63-47	39298-39302	like	
63-48	39303-39306	the	
63-49	39307-39316	following	
63-50	39316-39317	:	
63-51	39318-39323	touch	
63-52	39324-39325	/	
63-53	39325-39328	var	
63-54	39328-39329	/	
63-55	39329-39332	lib	
63-56	39332-39333	/	
63-57	39333-39338	pgsql	
63-58	39338-39339	/	
63-59	39339-39357	backup_in_progress	
63-60	39358-39362	psql	
63-61	39363-39364	-	
63-62	39364-39365	c	
63-63	39366-39367	"	
63-64	39367-39373	select	
63-65	39374-39389	pg_start_backup	
63-66	39389-39390	(	
63-67	39390-39391	'	
63-68	39391-39401	hot_backup	
63-69	39401-39402	'	
63-70	39402-39403	)	
63-71	39403-39404	;	
63-72	39404-39405	"	

#Text=tar -cf /var/lib/pgsql/backup.tar /var/lib/pgsql/data/ psql -c "select pg_stop_backup();" rm /var/lib/pgsql/backup_in_progress tar -rf /var/lib/pgsql/backup.tar /var/lib/pgsql/archive/
64-1	39406-39409	tar	
64-2	39410-39411	-	
64-3	39411-39413	cf	
64-4	39414-39415	/	
64-5	39415-39418	var	
64-6	39418-39419	/	
64-7	39419-39422	lib	
64-8	39422-39423	/	
64-9	39423-39428	pgsql	
64-10	39428-39429	/	
64-11	39429-39439	backup.tar	
64-12	39440-39441	/	
64-13	39441-39444	var	
64-14	39444-39445	/	
64-15	39445-39448	lib	
64-16	39448-39449	/	
64-17	39449-39454	pgsql	
64-18	39454-39455	/	
64-19	39455-39459	data	
64-20	39459-39460	/	
64-21	39461-39465	psql	
64-22	39466-39467	-	
64-23	39467-39468	c	
64-24	39469-39470	"	
64-25	39470-39476	select	
64-26	39477-39491	pg_stop_backup	
64-27	39491-39492	(	
64-28	39492-39493	)	
64-29	39493-39494	;	
64-30	39494-39495	"	
64-31	39496-39498	rm	
64-32	39499-39500	/	
64-33	39500-39503	var	
64-34	39503-39504	/	
64-35	39504-39507	lib	
64-36	39507-39508	/	
64-37	39508-39513	pgsql	
64-38	39513-39514	/	
64-39	39514-39532	backup_in_progress	
64-40	39533-39536	tar	
64-41	39537-39538	-	
64-42	39538-39540	rf	
64-43	39541-39542	/	
64-44	39542-39545	var	
64-45	39545-39546	/	
64-46	39546-39549	lib	
64-47	39549-39550	/	
64-48	39550-39555	pgsql	
64-49	39555-39556	/	
64-50	39556-39566	backup.tar	
64-51	39567-39568	/	
64-52	39568-39571	var	
64-53	39571-39572	/	
64-54	39572-39575	lib	
64-55	39575-39576	/	
64-56	39576-39581	pgsql	
64-57	39581-39582	/	
64-58	39582-39589	archive	
64-59	39589-39590	/	

#Text=The switch file /var/lib/pgsql/backup_in_progress is created first, enabling archiving of completed WAL files to occur. After the backup the switch file is removed. Archived WAL files are then added to the backup so that both base backup and all required WAL files are part of the same tar file. Please remember to add error handling to your backup scripts. 25.3.6.2. Compressed Archive Logs If archive storage size is a concern, you can use gzip to compress the archive files: archive_command = 'gzip < %p > /var/lib/pgsql/archive/%f'
65-1	39591-39594	The	
65-2	39595-39601	switch	
65-3	39602-39606	file	
65-4	39607-39608	/	
65-5	39608-39611	var	
65-6	39611-39612	/	
65-7	39612-39615	lib	
65-8	39615-39616	/	
65-9	39616-39621	pgsql	
65-10	39621-39622	/	
65-11	39622-39640	backup_in_progress	
65-12	39641-39643	is	
65-13	39644-39651	created	
65-14	39652-39657	first	
65-15	39657-39658	,	
65-16	39659-39667	enabling	
65-17	39668-39677	archiving	
65-18	39678-39680	of	
65-19	39681-39690	completed	
65-20	39691-39694	WAL	
65-21	39695-39700	files	
65-22	39701-39703	to	
65-23	39704-39709	occur	
65-24	39709-39710	.	
65-25	39711-39716	After	
65-26	39717-39720	the	
65-27	39721-39727	backup	
65-28	39728-39731	the	
65-29	39732-39738	switch	
65-30	39739-39743	file	
65-31	39744-39746	is	
65-32	39747-39754	removed	
65-33	39754-39755	.	
65-34	39756-39764	Archived	
65-35	39765-39768	WAL	
65-36	39769-39774	files	
65-37	39775-39778	are	
65-38	39779-39783	then	
65-39	39784-39789	added	
65-40	39790-39792	to	
65-41	39793-39796	the	
65-42	39797-39803	backup	
65-43	39804-39806	so	
65-44	39807-39811	that	
65-45	39812-39816	both	
65-46	39817-39821	base	
65-47	39822-39828	backup	
65-48	39829-39832	and	
65-49	39833-39836	all	
65-50	39837-39845	required	
65-51	39846-39849	WAL	
65-52	39850-39855	files	
65-53	39856-39859	are	
65-54	39860-39864	part	
65-55	39865-39867	of	
65-56	39868-39871	the	
65-57	39872-39876	same	
65-58	39877-39880	tar	
65-59	39881-39885	file	
65-60	39885-39886	.	
65-61	39887-39893	Please	
65-62	39894-39902	remember	
65-63	39903-39905	to	
65-64	39906-39909	add	
65-65	39910-39915	error	
65-66	39916-39924	handling	
65-67	39925-39927	to	
65-68	39928-39932	your	
65-69	39933-39939	backup	
65-70	39940-39947	scripts	
65-71	39947-39948	.	
65-72	39949-39957	25.3.6.2	
65-73	39957-39958	.	
65-74	39958-39959	 	
65-75	39959-39969	Compressed	
65-76	39970-39977	Archive	
65-77	39978-39982	Logs	
65-78	39983-39985	If	
65-79	39986-39993	archive	
65-80	39994-40001	storage	
65-81	40002-40006	size	
65-82	40007-40009	is	
65-83	40010-40011	a	
65-84	40012-40019	concern	
65-85	40019-40020	,	
65-86	40021-40024	you	
65-87	40025-40028	can	
65-88	40029-40032	use	
65-89	40033-40037	gzip	
65-90	40038-40040	to	
65-91	40041-40049	compress	
65-92	40050-40053	the	
65-93	40054-40061	archive	
65-94	40062-40067	files	
65-95	40067-40068	:	
65-96	40069-40084	archive_command	
65-97	40085-40086	=	
65-98	40087-40088	'	
65-99	40088-40092	gzip	
65-100	40093-40094	<	
65-101	40095-40096	%	
65-102	40096-40097	p	
65-103	40098-40099	>	
65-104	40100-40101	/	
65-105	40101-40104	var	
65-106	40104-40105	/	
65-107	40105-40108	lib	
65-108	40108-40109	/	
65-109	40109-40114	pgsql	
65-110	40114-40115	/	
65-111	40115-40122	archive	
65-112	40122-40123	/	
65-113	40123-40124	%	
65-114	40124-40125	f	
65-115	40125-40126	'	

#Text=You will then need to use gunzip during recovery: restore_command = 'gunzip < /mnt/server/archivedir/%f > %p' 25.3.6.3. archive_command Scripts Many people choose to use scripts to define their archive_command, so that their postgresql.conf entry looks very simple:
66-1	40127-40130	You	
66-2	40131-40135	will	
66-3	40136-40140	then	
66-4	40141-40145	need	
66-5	40146-40148	to	
66-6	40149-40152	use	
66-7	40153-40159	gunzip	
66-8	40160-40166	during	
66-9	40167-40175	recovery	
66-10	40175-40176	:	
66-11	40177-40192	restore_command	
66-12	40193-40194	=	
66-13	40195-40196	'	
66-14	40196-40202	gunzip	
66-15	40203-40204	<	
66-16	40205-40206	/	
66-17	40206-40209	mnt	
66-18	40209-40210	/	
66-19	40210-40216	server	
66-20	40216-40217	/	
66-21	40217-40227	archivedir	
66-22	40227-40228	/	
66-23	40228-40229	%	
66-24	40229-40230	f	
66-25	40231-40232	>	
66-26	40233-40234	%	
66-27	40234-40235	p	
66-28	40235-40236	'	
66-29	40237-40245	25.3.6.3	
66-30	40245-40246	.	
66-31	40246-40247	 	
66-32	40247-40262	archive_command	
66-33	40263-40270	Scripts	
66-34	40271-40275	Many	
66-35	40276-40282	people	
66-36	40283-40289	choose	
66-37	40290-40292	to	
66-38	40293-40296	use	
66-39	40297-40304	scripts	
66-40	40305-40307	to	
66-41	40308-40314	define	
66-42	40315-40320	their	
66-43	40321-40336	archive_command	
66-44	40336-40337	,	
66-45	40338-40340	so	
66-46	40341-40345	that	
66-47	40346-40351	their	
66-48	40352-40367	postgresql.conf	
66-49	40368-40373	entry	
66-50	40374-40379	looks	
66-51	40380-40384	very	
66-52	40385-40391	simple	
66-53	40391-40392	:	

#Text=archive_command = 'local_backup_script.sh "%p" "%f"' Using a separate script file is advisable any time you want to use more than a single command in the archiving process. This allows all complexity to be managed within the script, which can be written in a popular scripting language such as bash or perl. Examples of requirements that might be solved within a script include:
67-1	40393-40408	archive_command	
67-2	40409-40410	=	
67-3	40411-40412	'	
67-4	40412-40434	local_backup_script.sh	
67-5	40435-40436	"	
67-6	40436-40437	%	
67-7	40437-40438	p	
67-8	40438-40439	"	
67-9	40440-40441	"	
67-10	40441-40442	%	
67-11	40442-40443	f	
67-12	40443-40444	"	
67-13	40444-40445	'	
67-14	40446-40451	Using	
67-15	40452-40453	a	
67-16	40454-40462	separate	
67-17	40463-40469	script	
67-18	40470-40474	file	
67-19	40475-40477	is	
67-20	40478-40487	advisable	
67-21	40488-40491	any	
67-22	40492-40496	time	
67-23	40497-40500	you	
67-24	40501-40505	want	
67-25	40506-40508	to	
67-26	40509-40512	use	
67-27	40513-40517	more	
67-28	40518-40522	than	
67-29	40523-40524	a	
67-30	40525-40531	single	
67-31	40532-40539	command	
67-32	40540-40542	in	
67-33	40543-40546	the	
67-34	40547-40556	archiving	
67-35	40557-40564	process	
67-36	40564-40565	.	
67-37	40566-40570	This	
67-38	40571-40577	allows	
67-39	40578-40581	all	
67-40	40582-40592	complexity	
67-41	40593-40595	to	
67-42	40596-40598	be	
67-43	40599-40606	managed	
67-44	40607-40613	within	
67-45	40614-40617	the	
67-46	40618-40624	script	
67-47	40624-40625	,	
67-48	40626-40631	which	
67-49	40632-40635	can	
67-50	40636-40638	be	
67-51	40639-40646	written	
67-52	40647-40649	in	
67-53	40650-40651	a	
67-54	40652-40659	popular	
67-55	40660-40669	scripting	
67-56	40670-40678	language	
67-57	40679-40683	such	
67-58	40684-40686	as	
67-59	40687-40691	bash	
67-60	40692-40694	or	
67-61	40695-40699	perl	
67-62	40699-40700	.	
67-63	40701-40709	Examples	
67-64	40710-40712	of	
67-65	40713-40725	requirements	
67-66	40726-40730	that	
67-67	40731-40736	might	
67-68	40737-40739	be	
67-69	40740-40746	solved	
67-70	40747-40753	within	
67-71	40754-40755	a	
67-72	40756-40762	script	
67-73	40763-40770	include	
67-74	40770-40771	:	

#Text=Copying data to secure off-site data storage Batching WAL files so that they are transferred every three hours, rather than one at a time Interfacing with other backup and recovery software Interfacing with monitoring software to report errors Tip
68-1	40772-40779	Copying	
68-2	40780-40784	data	
68-3	40785-40787	to	
68-4	40788-40794	secure	
68-5	40795-40803	off-site	
68-6	40804-40808	data	
68-7	40809-40816	storage	
68-8	40817-40825	Batching	
68-9	40826-40829	WAL	
68-10	40830-40835	files	
68-11	40836-40838	so	
68-12	40839-40843	that	
68-13	40844-40848	they	
68-14	40849-40852	are	
68-15	40853-40864	transferred	
68-16	40865-40870	every	
68-17	40871-40876	three	
68-18	40877-40882	hours	
68-19	40882-40883	,	
68-20	40884-40890	rather	
68-21	40891-40895	than	
68-22	40896-40899	one	
68-23	40900-40902	at	
68-24	40903-40904	a	
68-25	40905-40909	time	
68-26	40910-40921	Interfacing	
68-27	40922-40926	with	
68-28	40927-40932	other	
68-29	40933-40939	backup	
68-30	40940-40943	and	
68-31	40944-40952	recovery	
68-32	40953-40961	software	
68-33	40962-40973	Interfacing	
68-34	40974-40978	with	
68-35	40979-40989	monitoring	
68-36	40990-40998	software	
68-37	40999-41001	to	
68-38	41002-41008	report	
68-39	41009-41015	errors	
68-40	41016-41019	Tip	

#Text=When using an archive_command script, it's desirable to enable logging_collector. Any messages written to stderr from the script will then appear in the database server log, allowing complex configurations to be diagnosed easily if they fail. 25.3.7. Caveats At this writing, there are several limitations of the continuous archiving technique. These will probably be fixed in future releases:
69-1	41020-41024	When	
69-2	41025-41030	using	
69-3	41031-41033	an	
69-4	41034-41049	archive_command	
69-5	41050-41056	script	
69-6	41056-41057	,	
69-7	41058-41062	it's	
69-8	41063-41072	desirable	
69-9	41073-41075	to	
69-10	41076-41082	enable	
69-11	41083-41100	logging_collector	
69-12	41100-41101	.	
69-13	41102-41105	Any	
69-14	41106-41114	messages	
69-15	41115-41122	written	
69-16	41123-41125	to	
69-17	41126-41132	stderr	
69-18	41133-41137	from	
69-19	41138-41141	the	
69-20	41142-41148	script	
69-21	41149-41153	will	
69-22	41154-41158	then	
69-23	41159-41165	appear	
69-24	41166-41168	in	
69-25	41169-41172	the	
69-26	41173-41181	database	
69-27	41182-41188	server	
69-28	41189-41192	log	
69-29	41192-41193	,	
69-30	41194-41202	allowing	
69-31	41203-41210	complex	
69-32	41211-41225	configurations	
69-33	41226-41228	to	
69-34	41229-41231	be	
69-35	41232-41241	diagnosed	
69-36	41242-41248	easily	
69-37	41249-41251	if	
69-38	41252-41256	they	
69-39	41257-41261	fail	
69-40	41261-41262	.	
69-41	41263-41269	25.3.7	
69-42	41269-41270	.	
69-43	41270-41271	 	
69-44	41271-41278	Caveats	
69-45	41279-41281	At	
69-46	41282-41286	this	
69-47	41287-41294	writing	
69-48	41294-41295	,	
69-49	41296-41301	there	
69-50	41302-41305	are	
69-51	41306-41313	several	
69-52	41314-41325	limitations	
69-53	41326-41328	of	
69-54	41329-41332	the	
69-55	41333-41343	continuous	
69-56	41344-41353	archiving	
69-57	41354-41363	technique	
69-58	41363-41364	.	
69-59	41365-41370	These	
69-60	41371-41375	will	
69-61	41376-41384	probably	
69-62	41385-41387	be	
69-63	41388-41393	fixed	
69-64	41394-41396	in	
69-65	41397-41403	future	
69-66	41404-41412	releases	
69-67	41412-41413	:	

#Text=If a CREATE DATABASE command is executed while a base backup is being taken, and then the template database that the CREATE DATABASE copied is modified while the base backup is still in progress, it is possible that recovery will cause those modifications to be propagated into the created database as well. This is of course undesirable. To avoid this risk, it is best not to modify any template databases while taking a base backup. CREATE TABLESPACE commands are WAL-logged with the literal absolute path, and will therefore be replayed as tablespace creations with the same absolute path. This might be undesirable if the log is being replayed on a different machine. It can be dangerous even if the log is being replayed on the same machine, but into a new data directory: the replay will still overwrite the contents of the original tablespace. To avoid potential gotchas of this sort, the best practice is to take a new base backup after creating or dropping tablespaces.
70-1	41414-41416	If	
70-2	41417-41418	a	
70-3	41419-41425	CREATE	
70-4	41426-41434	DATABASE	
70-5	41435-41442	command	
70-6	41443-41445	is	
70-7	41446-41454	executed	
70-8	41455-41460	while	
70-9	41461-41462	a	
70-10	41463-41467	base	
70-11	41468-41474	backup	
70-12	41475-41477	is	
70-13	41478-41483	being	
70-14	41484-41489	taken	
70-15	41489-41490	,	
70-16	41491-41494	and	
70-17	41495-41499	then	
70-18	41500-41503	the	
70-19	41504-41512	template	
70-20	41513-41521	database	
70-21	41522-41526	that	
70-22	41527-41530	the	
70-23	41531-41537	CREATE	
70-24	41538-41546	DATABASE	
70-25	41547-41553	copied	
70-26	41554-41556	is	
70-27	41557-41565	modified	
70-28	41566-41571	while	
70-29	41572-41575	the	
70-30	41576-41580	base	
70-31	41581-41587	backup	
70-32	41588-41590	is	
70-33	41591-41596	still	
70-34	41597-41599	in	
70-35	41600-41608	progress	
70-36	41608-41609	,	
70-37	41610-41612	it	
70-38	41613-41615	is	
70-39	41616-41624	possible	
70-40	41625-41629	that	
70-41	41630-41638	recovery	
70-42	41639-41643	will	
70-43	41644-41649	cause	
70-44	41650-41655	those	
70-45	41656-41669	modifications	
70-46	41670-41672	to	
70-47	41673-41675	be	
70-48	41676-41686	propagated	
70-49	41687-41691	into	
70-50	41692-41695	the	
70-51	41696-41703	created	
70-52	41704-41712	database	
70-53	41713-41715	as	
70-54	41716-41720	well	
70-55	41720-41721	.	
70-56	41722-41726	This	
70-57	41727-41729	is	
70-58	41730-41732	of	
70-59	41733-41739	course	
70-60	41740-41751	undesirable	
70-61	41751-41752	.	
70-62	41753-41755	To	
70-63	41756-41761	avoid	
70-64	41762-41766	this	
70-65	41767-41771	risk	
70-66	41771-41772	,	
70-67	41773-41775	it	
70-68	41776-41778	is	
70-69	41779-41783	best	
70-70	41784-41787	not	
70-71	41788-41790	to	
70-72	41791-41797	modify	
70-73	41798-41801	any	
70-74	41802-41810	template	
70-75	41811-41820	databases	
70-76	41821-41826	while	
70-77	41827-41833	taking	
70-78	41834-41835	a	
70-79	41836-41840	base	
70-80	41841-41847	backup	
70-81	41847-41848	.	
70-82	41849-41855	CREATE	
70-83	41856-41866	TABLESPACE	
70-84	41867-41875	commands	
70-85	41876-41879	are	
70-86	41880-41890	WAL-logged	
70-87	41891-41895	with	
70-88	41896-41899	the	
70-89	41900-41907	literal	
70-90	41908-41916	absolute	
70-91	41917-41921	path	
70-92	41921-41922	,	
70-93	41923-41926	and	
70-94	41927-41931	will	
70-95	41932-41941	therefore	
70-96	41942-41944	be	
70-97	41945-41953	replayed	
70-98	41954-41956	as	
70-99	41957-41967	tablespace	
70-100	41968-41977	creations	
70-101	41978-41982	with	
70-102	41983-41986	the	
70-103	41987-41991	same	
70-104	41992-42000	absolute	
70-105	42001-42005	path	
70-106	42005-42006	.	
70-107	42007-42011	This	
70-108	42012-42017	might	
70-109	42018-42020	be	
70-110	42021-42032	undesirable	
70-111	42033-42035	if	
70-112	42036-42039	the	
70-113	42040-42043	log	
70-114	42044-42046	is	
70-115	42047-42052	being	
70-116	42053-42061	replayed	
70-117	42062-42064	on	
70-118	42065-42066	a	
70-119	42067-42076	different	
70-120	42077-42084	machine	
70-121	42084-42085	.	
70-122	42086-42088	It	
70-123	42089-42092	can	
70-124	42093-42095	be	
70-125	42096-42105	dangerous	
70-126	42106-42110	even	
70-127	42111-42113	if	
70-128	42114-42117	the	
70-129	42118-42121	log	
70-130	42122-42124	is	
70-131	42125-42130	being	
70-132	42131-42139	replayed	
70-133	42140-42142	on	
70-134	42143-42146	the	
70-135	42147-42151	same	
70-136	42152-42159	machine	
70-137	42159-42160	,	
70-138	42161-42164	but	
70-139	42165-42169	into	
70-140	42170-42171	a	
70-141	42172-42175	new	
70-142	42176-42180	data	
70-143	42181-42190	directory	
70-144	42190-42191	:	
70-145	42192-42195	the	
70-146	42196-42202	replay	
70-147	42203-42207	will	
70-148	42208-42213	still	
70-149	42214-42223	overwrite	
70-150	42224-42227	the	
70-151	42228-42236	contents	
70-152	42237-42239	of	
70-153	42240-42243	the	
70-154	42244-42252	original	
70-155	42253-42263	tablespace	
70-156	42263-42264	.	
70-157	42265-42267	To	
70-158	42268-42273	avoid	
70-159	42274-42283	potential	
70-160	42284-42291	gotchas	
70-161	42292-42294	of	
70-162	42295-42299	this	
70-163	42300-42304	sort	
70-164	42304-42305	,	
70-165	42306-42309	the	
70-166	42310-42314	best	
70-167	42315-42323	practice	
70-168	42324-42326	is	
70-169	42327-42329	to	
70-170	42330-42334	take	
70-171	42335-42336	a	
70-172	42337-42340	new	
70-173	42341-42345	base	
70-174	42346-42352	backup	
70-175	42353-42358	after	
70-176	42359-42367	creating	
70-177	42368-42370	or	
70-178	42371-42379	dropping	
70-179	42380-42391	tablespaces	
70-180	42391-42392	.	

#Text=It should also be noted that the default WAL format is fairly bulky since it includes many disk page snapshots. These page snapshots are designed to support crash recovery, since we might need to fix partially-written disk pages. Depending on your system hardware and software, the risk of partial writes might be small enough to ignore, in which case you can significantly reduce the total volume of archived logs by turning off page snapshots using the full_page_writes parameter. (Read the notes and warnings in Chapter 29 before you do so.) Turning off page snapshots does not prevent use of the logs for PITR operations. An area for future development is to compress archived WAL data by removing unnecessary page copies even when full_page_writes is on. In the meantime, administrators might wish to reduce the number of page snapshots included in WAL by increasing the checkpoint interval parameters as much as feasible. Prev Next 25.2. File System Level Backup Home Chapter 26. High Availability, Load Balancing, and Replication Submit correction If you see anything in the documentation that is not correct, does not match
71-1	42393-42395	It	
71-2	42396-42402	should	
71-3	42403-42407	also	
71-4	42408-42410	be	
71-5	42411-42416	noted	
71-6	42417-42421	that	
71-7	42422-42425	the	
71-8	42426-42433	default	
71-9	42434-42437	WAL	
71-10	42438-42444	format	
71-11	42445-42447	is	
71-12	42448-42454	fairly	
71-13	42455-42460	bulky	
71-14	42461-42466	since	
71-15	42467-42469	it	
71-16	42470-42478	includes	
71-17	42479-42483	many	
71-18	42484-42488	disk	
71-19	42489-42493	page	
71-20	42494-42503	snapshots	
71-21	42503-42504	.	
71-22	42505-42510	These	
71-23	42511-42515	page	
71-24	42516-42525	snapshots	
71-25	42526-42529	are	
71-26	42530-42538	designed	
71-27	42539-42541	to	
71-28	42542-42549	support	
71-29	42550-42555	crash	
71-30	42556-42564	recovery	
71-31	42564-42565	,	
71-32	42566-42571	since	
71-33	42572-42574	we	
71-34	42575-42580	might	
71-35	42581-42585	need	
71-36	42586-42588	to	
71-37	42589-42592	fix	
71-38	42593-42610	partially-written	
71-39	42611-42615	disk	
71-40	42616-42621	pages	
71-41	42621-42622	.	
71-42	42623-42632	Depending	
71-43	42633-42635	on	
71-44	42636-42640	your	
71-45	42641-42647	system	
71-46	42648-42656	hardware	
71-47	42657-42660	and	
71-48	42661-42669	software	
71-49	42669-42670	,	
71-50	42671-42674	the	
71-51	42675-42679	risk	
71-52	42680-42682	of	
71-53	42683-42690	partial	
71-54	42691-42697	writes	
71-55	42698-42703	might	
71-56	42704-42706	be	
71-57	42707-42712	small	
71-58	42713-42719	enough	
71-59	42720-42722	to	
71-60	42723-42729	ignore	
71-61	42729-42730	,	
71-62	42731-42733	in	
71-63	42734-42739	which	
71-64	42740-42744	case	
71-65	42745-42748	you	
71-66	42749-42752	can	
71-67	42753-42766	significantly	
71-68	42767-42773	reduce	
71-69	42774-42777	the	
71-70	42778-42783	total	
71-71	42784-42790	volume	
71-72	42791-42793	of	
71-73	42794-42802	archived	
71-74	42803-42807	logs	
71-75	42808-42810	by	
71-76	42811-42818	turning	
71-77	42819-42822	off	
71-78	42823-42827	page	
71-79	42828-42837	snapshots	
71-80	42838-42843	using	
71-81	42844-42847	the	
71-82	42848-42864	full_page_writes	
71-83	42865-42874	parameter	
71-84	42874-42875	.	
71-85	42876-42877	(	
71-86	42877-42881	Read	
71-87	42882-42885	the	
71-88	42886-42891	notes	
71-89	42892-42895	and	
71-90	42896-42904	warnings	
71-91	42905-42907	in	
71-92	42908-42915	Chapter	
71-93	42915-42916	 	
71-94	42916-42918	29	
71-95	42919-42925	before	
71-96	42926-42929	you	
71-97	42930-42932	do	
71-98	42933-42935	so	
71-99	42935-42936	.	
71-100	42936-42937	)	
71-101	42938-42945	Turning	
71-102	42946-42949	off	
71-103	42950-42954	page	
71-104	42955-42964	snapshots	
71-105	42965-42969	does	
71-106	42970-42973	not	
71-107	42974-42981	prevent	
71-108	42982-42985	use	
71-109	42986-42988	of	
71-110	42989-42992	the	
71-111	42993-42997	logs	
71-112	42998-43001	for	
71-113	43002-43006	PITR	
71-114	43007-43017	operations	
71-115	43017-43018	.	
71-116	43019-43021	An	
71-117	43022-43026	area	
71-118	43027-43030	for	
71-119	43031-43037	future	
71-120	43038-43049	development	
71-121	43050-43052	is	
71-122	43053-43055	to	
71-123	43056-43064	compress	
71-124	43065-43073	archived	
71-125	43074-43077	WAL	
71-126	43078-43082	data	
71-127	43083-43085	by	
71-128	43086-43094	removing	
71-129	43095-43106	unnecessary	
71-130	43107-43111	page	
71-131	43112-43118	copies	
71-132	43119-43123	even	
71-133	43124-43128	when	
71-134	43129-43145	full_page_writes	
71-135	43146-43148	is	
71-136	43149-43151	on	
71-137	43151-43152	.	
71-138	43153-43155	In	
71-139	43156-43159	the	
71-140	43160-43168	meantime	
71-141	43168-43169	,	
71-142	43170-43184	administrators	
71-143	43185-43190	might	
71-144	43191-43195	wish	
71-145	43196-43198	to	
71-146	43199-43205	reduce	
71-147	43206-43209	the	
71-148	43210-43216	number	
71-149	43217-43219	of	
71-150	43220-43224	page	
71-151	43225-43234	snapshots	
71-152	43235-43243	included	
71-153	43244-43246	in	
71-154	43247-43250	WAL	
71-155	43251-43253	by	
71-156	43254-43264	increasing	
71-157	43265-43268	the	
71-158	43269-43279	checkpoint	
71-159	43280-43288	interval	
71-160	43289-43299	parameters	
71-161	43300-43302	as	
71-162	43303-43307	much	
71-163	43308-43310	as	
71-164	43311-43319	feasible	
71-165	43319-43320	.	
71-166	43321-43325	Prev	
71-167	43326-43330	Next	
71-168	43331-43335	25.2	
71-169	43335-43336	.	
71-170	43336-43337	 	
71-171	43337-43341	File	
71-172	43342-43348	System	
71-173	43349-43354	Level	
71-174	43355-43361	Backup	
71-175	43362-43366	Home	
71-176	43367-43374	Chapter	
71-177	43374-43375	 	
71-178	43375-43377	26	
71-179	43377-43378	.	
71-180	43378-43379	 	
71-181	43379-43383	High	
71-182	43384-43396	Availability	
71-183	43396-43397	,	
71-184	43398-43402	Load	
71-185	43403-43412	Balancing	
71-186	43412-43413	,	
71-187	43414-43417	and	
71-188	43418-43429	Replication	
71-189	43430-43436	Submit	
71-190	43437-43447	correction	
71-191	43448-43450	If	
71-192	43451-43454	you	
71-193	43455-43458	see	
71-194	43459-43467	anything	
71-195	43468-43470	in	
71-196	43471-43474	the	
71-197	43475-43488	documentation	
71-198	43489-43493	that	
71-199	43494-43496	is	
71-200	43497-43500	not	
71-201	43501-43508	correct	
71-202	43508-43509	,	
71-203	43510-43514	does	
71-204	43515-43518	not	
71-205	43519-43524	match	
