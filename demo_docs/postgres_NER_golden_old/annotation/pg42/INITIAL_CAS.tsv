#FORMAT=WebAnno TSV 3.3


#Text=Improve database performance with connection pooling - Stack Overflow Blog Reduce distractions and boost developer productivity with Stack Overflow for Teams. Now available for free What is Teams? Essays, opinions, and advice on the act of computer programming from Stack Overflow.
1-1	0-7	Improve	
1-2	8-16	database	
1-3	17-28	performance	
1-4	29-33	with	
1-5	34-44	connection	
1-6	45-52	pooling	
1-7	53-54	-	
1-8	55-60	Stack	
1-9	61-69	Overflow	
1-10	70-74	Blog	
1-11	75-81	Reduce	
1-12	82-94	distractions	
1-13	95-98	and	
1-14	99-104	boost	
1-15	105-114	developer	
1-16	115-127	productivity	
1-17	128-132	with	
1-18	133-138	Stack	
1-19	139-147	Overflow	
1-20	148-151	for	
1-21	152-157	Teams	
1-22	157-158	.	
1-23	159-162	Now	
1-24	163-172	available	
1-25	173-176	for	
1-26	177-181	free	
1-27	182-186	What	
1-28	187-189	is	
1-29	190-195	Teams	
1-30	195-196	?	
1-31	197-203	Essays	
1-32	203-204	,	
1-33	205-213	opinions	
1-34	213-214	,	
1-35	215-218	and	
1-36	219-225	advice	
1-37	226-228	on	
1-38	229-232	the	
1-39	233-236	act	
1-40	237-239	of	
1-41	240-248	computer	
1-42	249-260	programming	
1-43	261-265	from	
1-44	266-271	Stack	
1-45	272-280	Overflow	
1-46	280-281	.	

#Text=Search for: Latest Newsletter Podcast Company code-for-a-living October 14, 2020 Improve database performance with connection pooling
2-1	282-288	Search	
2-2	289-292	for	
2-3	292-293	:	
2-4	294-300	Latest	
2-5	301-311	Newsletter	
2-6	312-319	Podcast	
2-7	320-327	Company	
2-8	328-345	code-for-a-living	
2-9	346-353	October	
2-10	354-356	14	
2-11	356-357	,	
2-12	358-362	2020	
2-13	363-370	Improve	
2-14	371-379	database	
2-15	380-391	performance	
2-16	392-396	with	
2-17	397-407	connection	
2-18	408-415	pooling	

#Text=We tend to rely on caching solutions to improve database performance. Caching frequently-accessed queries in memory or via a database can optimize write/read performance and reduce network latency, especially for heavy-workload applications, such as gaming services and Q&A portals. But you can further improve performance by pooling users’ connections to a database. Client users need… Michael Aboagye We tend to rely on caching solutions to improve database performance. Caching frequently-accessed queries in memory or via a database can optimize write/read performance and reduce network latency, especially for heavy-workload applications, such as gaming services and Q&A portals. But you can further improve performance by pooling users’ connections to a database.
3-1	416-418	We	
3-2	419-423	tend	
3-3	424-426	to	
3-4	427-431	rely	
3-5	432-434	on	
3-6	435-442	caching	
3-7	443-452	solutions	
3-8	453-455	to	
3-9	456-463	improve	
3-10	464-472	database	
3-11	473-484	performance	
3-12	484-485	.	
3-13	486-493	Caching	
3-14	494-513	frequently-accessed	
3-15	514-521	queries	
3-16	522-524	in	
3-17	525-531	memory	
3-18	532-534	or	
3-19	535-538	via	
3-20	539-540	a	
3-21	541-549	database	
3-22	550-553	can	
3-23	554-562	optimize	
3-24	563-568	write	
3-25	568-569	/	
3-26	569-573	read	
3-27	574-585	performance	
3-28	586-589	and	
3-29	590-596	reduce	
3-30	597-604	network	
3-31	605-612	latency	
3-32	612-613	,	
3-33	614-624	especially	
3-34	625-628	for	
3-35	629-643	heavy-workload	
3-36	644-656	applications	
3-37	656-657	,	
3-38	658-662	such	
3-39	663-665	as	
3-40	666-672	gaming	
3-41	673-681	services	
3-42	682-685	and	
3-43	686-687	Q	
3-44	687-688	&	
3-45	688-689	A	
3-46	690-697	portals	
3-47	697-698	.	
3-48	699-702	But	
3-49	703-706	you	
3-50	707-710	can	
3-51	711-718	further	
3-52	719-726	improve	
3-53	727-738	performance	
3-54	739-741	by	
3-55	742-749	pooling	
3-56	750-755	users	
3-57	755-756	’	
3-58	757-768	connections	
3-59	769-771	to	
3-60	772-773	a	
3-61	774-782	database	
3-62	782-783	.	
3-63	784-790	Client	
3-64	791-796	users	
3-65	797-801	need	
3-66	801-802	…	
3-67	803-810	Michael	
3-68	811-818	Aboagye	
3-69	819-821	We	
3-70	822-826	tend	
3-71	827-829	to	
3-72	830-834	rely	
3-73	835-837	on	
3-74	838-845	caching	
3-75	846-855	solutions	
3-76	856-858	to	
3-77	859-866	improve	
3-78	867-875	database	
3-79	876-887	performance	
3-80	887-888	.	
3-81	889-896	Caching	
3-82	897-916	frequently-accessed	
3-83	917-924	queries	
3-84	925-927	in	
3-85	928-934	memory	
3-86	935-937	or	
3-87	938-941	via	
3-88	942-943	a	
3-89	944-952	database	
3-90	953-956	can	
3-91	957-965	optimize	
3-92	966-971	write	
3-93	971-972	/	
3-94	972-976	read	
3-95	977-988	performance	
3-96	989-992	and	
3-97	993-999	reduce	
3-98	1000-1007	network	
3-99	1008-1015	latency	
3-100	1015-1016	,	
3-101	1017-1027	especially	
3-102	1028-1031	for	
3-103	1032-1046	heavy-workload	
3-104	1047-1059	applications	
3-105	1059-1060	,	
3-106	1061-1065	such	
3-107	1066-1068	as	
3-108	1069-1075	gaming	
3-109	1076-1084	services	
3-110	1085-1088	and	
3-111	1089-1090	Q	
3-112	1090-1091	&	
3-113	1091-1092	A	
3-114	1093-1100	portals	
3-115	1100-1101	.	
3-116	1102-1105	But	
3-117	1106-1109	you	
3-118	1110-1113	can	
3-119	1114-1121	further	
3-120	1122-1129	improve	
3-121	1130-1141	performance	
3-122	1142-1144	by	
3-123	1145-1152	pooling	
3-124	1153-1158	users	
3-125	1158-1159	’	
3-126	1160-1171	connections	
3-127	1172-1174	to	
3-128	1175-1176	a	
3-129	1177-1185	database	
3-130	1185-1186	.	

#Text=Client users need to create a connection to a web service before they can perform CRUD operations. Most web services are backed by relational database servers such as Postgres or MySQL. With PostgreSQL, each new connection can take up to 1.3MB in memory. In a production environment where we expect to receive thousands or millions of concurrent connections to the backend service, this can quickly exceed your memory resources (or if you have a scalable cloud, it can get very expensive very quickly). Because each time a client attempts to access a backend service, it requires OS resources to create, maintain, and close connections to the datastore. This creates a large amount of overhead causing database performance to deteriorate.
4-1	1187-1193	Client	
4-2	1194-1199	users	
4-3	1200-1204	need	
4-4	1205-1207	to	
4-5	1208-1214	create	
4-6	1215-1216	a	
4-7	1217-1227	connection	
4-8	1228-1230	to	
4-9	1231-1232	a	
4-10	1233-1236	web	
4-11	1237-1244	service	
4-12	1245-1251	before	
4-13	1252-1256	they	
4-14	1257-1260	can	
4-15	1261-1268	perform	
4-16	1269-1273	CRUD	
4-17	1274-1284	operations	
4-18	1284-1285	.	
4-19	1286-1290	Most	
4-20	1291-1294	web	
4-21	1295-1303	services	
4-22	1304-1307	are	
4-23	1308-1314	backed	
4-24	1315-1317	by	
4-25	1318-1328	relational	
4-26	1329-1337	database	
4-27	1338-1345	servers	
4-28	1346-1350	such	
4-29	1351-1353	as	
4-30	1354-1362	Postgres	
4-31	1363-1365	or	
4-32	1366-1371	MySQL	
4-33	1371-1372	.	
4-34	1373-1377	With	
4-35	1378-1388	PostgreSQL	
4-36	1388-1389	,	
4-37	1390-1394	each	
4-38	1395-1398	new	
4-39	1399-1409	connection	
4-40	1410-1413	can	
4-41	1414-1418	take	
4-42	1419-1421	up	
4-43	1422-1424	to	
4-44	1425-1430	1.3MB	
4-45	1431-1433	in	
4-46	1434-1440	memory	
4-47	1440-1441	.	
4-48	1442-1444	In	
4-49	1445-1446	a	
4-50	1447-1457	production	
4-51	1458-1469	environment	
4-52	1470-1475	where	
4-53	1476-1478	we	
4-54	1479-1485	expect	
4-55	1486-1488	to	
4-56	1489-1496	receive	
4-57	1497-1506	thousands	
4-58	1507-1509	or	
4-59	1510-1518	millions	
4-60	1519-1521	of	
4-61	1522-1532	concurrent	
4-62	1533-1544	connections	
4-63	1545-1547	to	
4-64	1548-1551	the	
4-65	1552-1559	backend	
4-66	1560-1567	service	
4-67	1567-1568	,	
4-68	1569-1573	this	
4-69	1574-1577	can	
4-70	1578-1585	quickly	
4-71	1586-1592	exceed	
4-72	1593-1597	your	
4-73	1598-1604	memory	
4-74	1605-1614	resources	
4-75	1615-1616	(	
4-76	1616-1618	or	
4-77	1619-1621	if	
4-78	1622-1625	you	
4-79	1626-1630	have	
4-80	1631-1632	a	
4-81	1633-1641	scalable	
4-82	1642-1647	cloud	
4-83	1647-1648	,	
4-84	1649-1651	it	
4-85	1652-1655	can	
4-86	1656-1659	get	
4-87	1660-1664	very	
4-88	1665-1674	expensive	
4-89	1675-1679	very	
4-90	1680-1687	quickly	
4-91	1687-1688	)	
4-92	1688-1689	.	
4-93	1690-1697	Because	
4-94	1698-1702	each	
4-95	1703-1707	time	
4-96	1708-1709	a	
4-97	1710-1716	client	
4-98	1717-1725	attempts	
4-99	1726-1728	to	
4-100	1729-1735	access	
4-101	1736-1737	a	
4-102	1738-1745	backend	
4-103	1746-1753	service	
4-104	1753-1754	,	
4-105	1755-1757	it	
4-106	1758-1766	requires	
4-107	1767-1769	OS	
4-108	1770-1779	resources	
4-109	1780-1782	to	
4-110	1783-1789	create	
4-111	1789-1790	,	
4-112	1791-1799	maintain	
4-113	1799-1800	,	
4-114	1801-1804	and	
4-115	1805-1810	close	
4-116	1811-1822	connections	
4-117	1823-1825	to	
4-118	1826-1829	the	
4-119	1830-1839	datastore	
4-120	1839-1840	.	
4-121	1841-1845	This	
4-122	1846-1853	creates	
4-123	1854-1855	a	
4-124	1856-1861	large	
4-125	1862-1868	amount	
4-126	1869-1871	of	
4-127	1872-1880	overhead	
4-128	1881-1888	causing	
4-129	1889-1897	database	
4-130	1898-1909	performance	
4-131	1910-1912	to	
4-132	1913-1924	deteriorate	
4-133	1924-1925	.	

#Text=Consumers of your service expect fast response times. If that performance deteriorates, it can lead to poor user experiences, revenue losses, and even unscheduled downtime. If you expose your backend service as an API, repeated slowdowns and failures could cause cascading problems and lose you customers. Instead of opening and closing connections for every request, connection pooling uses a cache of database connections that can be reused when future requests to the database are required. It lets your database scale effectively as the data stored there and the number of clients accessing it grow. Traffic is never constant, so pooling can better manage traffic peaks without causing outages. Your production database shouldn’t be your bottleneck.
5-1	1926-1935	Consumers	
5-2	1936-1938	of	
5-3	1939-1943	your	
5-4	1944-1951	service	
5-5	1952-1958	expect	
5-6	1959-1963	fast	
5-7	1964-1972	response	
5-8	1973-1978	times	
5-9	1978-1979	.	
5-10	1980-1982	If	
5-11	1983-1987	that	
5-12	1988-1999	performance	
5-13	2000-2012	deteriorates	
5-14	2012-2013	,	
5-15	2014-2016	it	
5-16	2017-2020	can	
5-17	2021-2025	lead	
5-18	2026-2028	to	
5-19	2029-2033	poor	
5-20	2034-2038	user	
5-21	2039-2050	experiences	
5-22	2050-2051	,	
5-23	2052-2059	revenue	
5-24	2060-2066	losses	
5-25	2066-2067	,	
5-26	2068-2071	and	
5-27	2072-2076	even	
5-28	2077-2088	unscheduled	
5-29	2089-2097	downtime	
5-30	2097-2098	.	
5-31	2099-2101	If	
5-32	2102-2105	you	
5-33	2106-2112	expose	
5-34	2113-2117	your	
5-35	2118-2125	backend	
5-36	2126-2133	service	
5-37	2134-2136	as	
5-38	2137-2139	an	
5-39	2140-2143	API	
5-40	2143-2144	,	
5-41	2145-2153	repeated	
5-42	2154-2163	slowdowns	
5-43	2164-2167	and	
5-44	2168-2176	failures	
5-45	2177-2182	could	
5-46	2183-2188	cause	
5-47	2189-2198	cascading	
5-48	2199-2207	problems	
5-49	2208-2211	and	
5-50	2212-2216	lose	
5-51	2217-2220	you	
5-52	2221-2230	customers	
5-53	2230-2231	.	
5-54	2232-2239	Instead	
5-55	2240-2242	of	
5-56	2243-2250	opening	
5-57	2251-2254	and	
5-58	2255-2262	closing	
5-59	2263-2274	connections	
5-60	2275-2278	for	
5-61	2279-2284	every	
5-62	2285-2292	request	
5-63	2292-2293	,	
5-64	2294-2304	connection	
5-65	2305-2312	pooling	
5-66	2313-2317	uses	
5-67	2318-2319	a	
5-68	2320-2325	cache	
5-69	2326-2328	of	
5-70	2329-2337	database	
5-71	2338-2349	connections	
5-72	2350-2354	that	
5-73	2355-2358	can	
5-74	2359-2361	be	
5-75	2362-2368	reused	
5-76	2369-2373	when	
5-77	2374-2380	future	
5-78	2381-2389	requests	
5-79	2390-2392	to	
5-80	2393-2396	the	
5-81	2397-2405	database	
5-82	2406-2409	are	
5-83	2410-2418	required	
5-84	2418-2419	.	
5-85	2420-2422	It	
5-86	2423-2427	lets	
5-87	2428-2432	your	
5-88	2433-2441	database	
5-89	2442-2447	scale	
5-90	2448-2459	effectively	
5-91	2460-2462	as	
5-92	2463-2466	the	
5-93	2467-2471	data	
5-94	2472-2478	stored	
5-95	2479-2484	there	
5-96	2485-2488	and	
5-97	2489-2492	the	
5-98	2493-2499	number	
5-99	2500-2502	of	
5-100	2503-2510	clients	
5-101	2511-2520	accessing	
5-102	2521-2523	it	
5-103	2524-2528	grow	
5-104	2528-2529	.	
5-105	2530-2537	Traffic	
5-106	2538-2540	is	
5-107	2541-2546	never	
5-108	2547-2555	constant	
5-109	2555-2556	,	
5-110	2557-2559	so	
5-111	2560-2567	pooling	
5-112	2568-2571	can	
5-113	2572-2578	better	
5-114	2579-2585	manage	
5-115	2586-2593	traffic	
5-116	2594-2599	peaks	
5-117	2600-2607	without	
5-118	2608-2615	causing	
5-119	2616-2623	outages	
5-120	2623-2624	.	
5-121	2625-2629	Your	
5-122	2630-2640	production	
5-123	2641-2649	database	
5-124	2650-2657	shouldn	
5-125	2657-2658	’	
5-126	2658-2659	t	
5-127	2660-2662	be	
5-128	2663-2667	your	
5-129	2668-2678	bottleneck	
5-130	2678-2679	.	

#Text=In this article, we will explore how we can use connection pooling middleware like pgpool and pgbouncer to reduce overhead and network latency. For illustration purposes, I will use pgpool-II and pgbouncer to explain concepts of connection pooling and compare which one is more effective in pooling connections because some connection poolers can even affect database performance. We will look at how to use pgbench to benchmark Postgres databases since it is the standard tool provided by PostgreSQL. Different hardware provides different benchmarking results based on the plan you set. For the  tests below, I’m using these specifications.
6-1	2680-2682	In	
6-2	2683-2687	this	
6-3	2688-2695	article	
6-4	2695-2696	,	
6-5	2697-2699	we	
6-6	2700-2704	will	
6-7	2705-2712	explore	
6-8	2713-2716	how	
6-9	2717-2719	we	
6-10	2720-2723	can	
6-11	2724-2727	use	
6-12	2728-2738	connection	
6-13	2739-2746	pooling	
6-14	2747-2757	middleware	
6-15	2758-2762	like	
6-16	2763-2769	pgpool	
6-17	2770-2773	and	
6-18	2774-2783	pgbouncer	
6-19	2784-2786	to	
6-20	2787-2793	reduce	
6-21	2794-2802	overhead	
6-22	2803-2806	and	
6-23	2807-2814	network	
6-24	2815-2822	latency	
6-25	2822-2823	.	
6-26	2824-2827	For	
6-27	2828-2840	illustration	
6-28	2841-2849	purposes	
6-29	2849-2850	,	
6-30	2851-2852	I	
6-31	2853-2857	will	
6-32	2858-2861	use	
6-33	2862-2871	pgpool-II	
6-34	2872-2875	and	
6-35	2876-2885	pgbouncer	
6-36	2886-2888	to	
6-37	2889-2896	explain	
6-38	2897-2905	concepts	
6-39	2906-2908	of	
6-40	2909-2919	connection	
6-41	2920-2927	pooling	
6-42	2928-2931	and	
6-43	2932-2939	compare	
6-44	2940-2945	which	
6-45	2946-2949	one	
6-46	2950-2952	is	
6-47	2953-2957	more	
6-48	2958-2967	effective	
6-49	2968-2970	in	
6-50	2971-2978	pooling	
6-51	2979-2990	connections	
6-52	2991-2998	because	
6-53	2999-3003	some	
6-54	3004-3014	connection	
6-55	3015-3022	poolers	
6-56	3023-3026	can	
6-57	3027-3031	even	
6-58	3032-3038	affect	
6-59	3039-3047	database	
6-60	3048-3059	performance	
6-61	3059-3060	.	
6-62	3061-3063	We	
6-63	3064-3068	will	
6-64	3069-3073	look	
6-65	3074-3076	at	
6-66	3077-3080	how	
6-67	3081-3083	to	
6-68	3084-3087	use	
6-69	3088-3095	pgbench	
6-70	3096-3098	to	
6-71	3099-3108	benchmark	
6-72	3109-3117	Postgres	
6-73	3118-3127	databases	
6-74	3128-3133	since	
6-75	3134-3136	it	
6-76	3137-3139	is	
6-77	3140-3143	the	
6-78	3144-3152	standard	
6-79	3153-3157	tool	
6-80	3158-3166	provided	
6-81	3167-3169	by	
6-82	3170-3180	PostgreSQL	
6-83	3180-3181	.	
6-84	3182-3191	Different	
6-85	3192-3200	hardware	
6-86	3201-3209	provides	
6-87	3210-3219	different	
6-88	3220-3232	benchmarking	
6-89	3233-3240	results	
6-90	3241-3246	based	
6-91	3247-3249	on	
6-92	3250-3253	the	
6-93	3254-3258	plan	
6-94	3259-3262	you	
6-95	3263-3266	set	
6-96	3266-3267	.	
6-97	3268-3271	For	
6-98	3272-3275	the	
6-99	3275-3276	 	
6-100	3277-3282	tests	
6-101	3283-3288	below	
6-102	3288-3289	,	
6-103	3290-3291	I	
6-104	3291-3292	’	
6-105	3292-3293	m	
6-106	3294-3299	using	
6-107	3300-3305	these	
6-108	3306-3320	specifications	
6-109	3320-3321	.	

#Text=Specs of my test machine: Linode Server: Ubuntu 16 – 64 bit ( Virtual Machine)  Postgres version 9.5Memory: 2GBDatabase size: 800MBStorage: 2GB
7-1	3322-3327	Specs	
7-2	3328-3330	of	
7-3	3331-3333	my	
7-4	3334-3338	test	
7-5	3339-3346	machine	
7-6	3346-3347	:	
7-7	3348-3354	Linode	
7-8	3355-3361	Server	
7-9	3361-3362	:	
7-10	3363-3369	Ubuntu	
7-11	3370-3372	16	
7-12	3373-3374	–	
7-13	3375-3377	64	
7-14	3378-3381	bit	
7-15	3382-3383	(	
7-16	3384-3391	Virtual	
7-17	3392-3399	Machine	
7-18	3399-3400	)	
7-19	3400-3402	  	
7-20	3402-3410	Postgres	
7-21	3411-3418	version	
7-22	3419-3428	9.5Memory	
7-23	3428-3429	:	
7-24	3430-3441	2GBDatabase	
7-25	3442-3446	size	
7-26	3446-3447	:	
7-27	3448-3460	800MBStorage	
7-28	3460-3461	:	
7-29	3462-3465	2GB	

#Text=Also it is important to isolate the Postgres database server from other frameworks like logstash shipper and other servers for collecting performance metrics because most of these components consume more memory and will affect the test results. Creating a pooled connection Connecting to a backend service is an expensive operation, as it consists of the following steps: Open a connection to the database using the database driver.Open a TCP socket for CRUD operations Perform CRUD operations over the socket.  Close the connection.Close the socket.
8-1	3466-3470	Also	
8-2	3471-3473	it	
8-3	3474-3476	is	
8-4	3477-3486	important	
8-5	3487-3489	to	
8-6	3490-3497	isolate	
8-7	3498-3501	the	
8-8	3502-3510	Postgres	
8-9	3511-3519	database	
8-10	3520-3526	server	
8-11	3527-3531	from	
8-12	3532-3537	other	
8-13	3538-3548	frameworks	
8-14	3549-3553	like	
8-15	3554-3562	logstash	
8-16	3563-3570	shipper	
8-17	3571-3574	and	
8-18	3575-3580	other	
8-19	3581-3588	servers	
8-20	3589-3592	for	
8-21	3593-3603	collecting	
8-22	3604-3615	performance	
8-23	3616-3623	metrics	
8-24	3624-3631	because	
8-25	3632-3636	most	
8-26	3637-3639	of	
8-27	3640-3645	these	
8-28	3646-3656	components	
8-29	3657-3664	consume	
8-30	3665-3669	more	
8-31	3670-3676	memory	
8-32	3677-3680	and	
8-33	3681-3685	will	
8-34	3686-3692	affect	
8-35	3693-3696	the	
8-36	3697-3701	test	
8-37	3702-3709	results	
8-38	3709-3710	.	
8-39	3711-3719	Creating	
8-40	3720-3721	a	
8-41	3722-3728	pooled	
8-42	3729-3739	connection	
8-43	3740-3750	Connecting	
8-44	3751-3753	to	
8-45	3754-3755	a	
8-46	3756-3763	backend	
8-47	3764-3771	service	
8-48	3772-3774	is	
8-49	3775-3777	an	
8-50	3778-3787	expensive	
8-51	3788-3797	operation	
8-52	3797-3798	,	
8-53	3799-3801	as	
8-54	3802-3804	it	
8-55	3805-3813	consists	
8-56	3814-3816	of	
8-57	3817-3820	the	
8-58	3821-3830	following	
8-59	3831-3836	steps	
8-60	3836-3837	:	
8-61	3838-3842	Open	
8-62	3843-3844	a	
8-63	3845-3855	connection	
8-64	3856-3858	to	
8-65	3859-3862	the	
8-66	3863-3871	database	
8-67	3872-3877	using	
8-68	3878-3881	the	
8-69	3882-3890	database	
8-70	3891-3902	driver.Open	
8-71	3903-3904	a	
8-72	3905-3908	TCP	
8-73	3909-3915	socket	
8-74	3916-3919	for	
8-75	3920-3924	CRUD	
8-76	3925-3935	operations	
8-77	3935-3936	 	
8-78	3936-3943	Perform	
8-79	3944-3948	CRUD	
8-80	3949-3959	operations	
8-81	3960-3964	over	
8-82	3965-3968	the	
8-83	3969-3975	socket	
8-84	3975-3976	.	
8-85	3976-3978	  	
8-86	3978-3983	Close	
8-87	3984-3987	the	
8-88	3988-4004	connection.Close	
8-89	4005-4008	the	
8-90	4009-4015	socket	
8-91	4015-4016	.	

#Text=In a production environment where we expect thousands of concurrent open and close connections from clients, doing the above steps for every single connection can cause the database to perform poorly. We can resolve this problem by pooling connections from clients. Instead of creating a new connection with every request, connection poolers reuse some existing connections. Thus there is no need to perform multiple expensive full database trips by opening and closing connections to backend service. It prevents the overhead of creating a new connection to the database every time there is a request for a database connection with the same properties (i.e name, database, protocol version).
9-1	4017-4019	In	
9-2	4020-4021	a	
9-3	4022-4032	production	
9-4	4033-4044	environment	
9-5	4045-4050	where	
9-6	4051-4053	we	
9-7	4054-4060	expect	
9-8	4061-4070	thousands	
9-9	4071-4073	of	
9-10	4074-4084	concurrent	
9-11	4085-4089	open	
9-12	4090-4093	and	
9-13	4094-4099	close	
9-14	4100-4111	connections	
9-15	4112-4116	from	
9-16	4117-4124	clients	
9-17	4124-4125	,	
9-18	4126-4131	doing	
9-19	4132-4135	the	
9-20	4136-4141	above	
9-21	4142-4147	steps	
9-22	4148-4151	for	
9-23	4152-4157	every	
9-24	4158-4164	single	
9-25	4165-4175	connection	
9-26	4176-4179	can	
9-27	4180-4185	cause	
9-28	4186-4189	the	
9-29	4190-4198	database	
9-30	4199-4201	to	
9-31	4202-4209	perform	
9-32	4210-4216	poorly	
9-33	4216-4217	.	
9-34	4218-4220	We	
9-35	4221-4224	can	
9-36	4225-4232	resolve	
9-37	4233-4237	this	
9-38	4238-4245	problem	
9-39	4246-4248	by	
9-40	4249-4256	pooling	
9-41	4257-4268	connections	
9-42	4269-4273	from	
9-43	4274-4281	clients	
9-44	4281-4282	.	
9-45	4283-4290	Instead	
9-46	4291-4293	of	
9-47	4294-4302	creating	
9-48	4303-4304	a	
9-49	4305-4308	new	
9-50	4309-4319	connection	
9-51	4320-4324	with	
9-52	4325-4330	every	
9-53	4331-4338	request	
9-54	4338-4339	,	
9-55	4340-4350	connection	
9-56	4351-4358	poolers	
9-57	4359-4364	reuse	
9-58	4365-4369	some	
9-59	4370-4378	existing	
9-60	4379-4390	connections	
9-61	4390-4391	.	
9-62	4392-4396	Thus	
9-63	4397-4402	there	
9-64	4403-4405	is	
9-65	4406-4408	no	
9-66	4409-4413	need	
9-67	4414-4416	to	
9-68	4417-4424	perform	
9-69	4425-4433	multiple	
9-70	4434-4443	expensive	
9-71	4444-4448	full	
9-72	4449-4457	database	
9-73	4458-4463	trips	
9-74	4464-4466	by	
9-75	4467-4474	opening	
9-76	4475-4478	and	
9-77	4479-4486	closing	
9-78	4487-4498	connections	
9-79	4499-4501	to	
9-80	4502-4509	backend	
9-81	4510-4517	service	
9-82	4517-4518	.	
9-83	4519-4521	It	
9-84	4522-4530	prevents	
9-85	4531-4534	the	
9-86	4535-4543	overhead	
9-87	4544-4546	of	
9-88	4547-4555	creating	
9-89	4556-4557	a	
9-90	4558-4561	new	
9-91	4562-4572	connection	
9-92	4573-4575	to	
9-93	4576-4579	the	
9-94	4580-4588	database	
9-95	4589-4594	every	
9-96	4595-4599	time	
9-97	4600-4605	there	
9-98	4606-4608	is	
9-99	4609-4610	a	
9-100	4611-4618	request	
9-101	4619-4622	for	
9-102	4623-4624	a	
9-103	4625-4633	database	
9-104	4634-4644	connection	
9-105	4645-4649	with	
9-106	4650-4653	the	
9-107	4654-4658	same	
9-108	4659-4669	properties	
9-109	4670-4671	(	
9-110	4671-4674	i.e	
9-111	4675-4679	name	
9-112	4679-4680	,	
9-113	4681-4689	database	
9-114	4689-4690	,	
9-115	4691-4699	protocol	
9-116	4700-4707	version	
9-117	4707-4708	)	
9-118	4708-4709	.	

#Text=Pooling middleware like pgbouncer comes with a pool manager. Usually, the connection pool manager maintains a pool of open database connections. You can not pool connections without a pool manager. A pool contains two types of connections: Active connection: In use by the application.Idle connection:  Available for use by the application.
10-1	4710-4717	Pooling	
10-2	4718-4728	middleware	
10-3	4729-4733	like	
10-4	4734-4743	pgbouncer	
10-5	4744-4749	comes	
10-6	4750-4754	with	
10-7	4755-4756	a	
10-8	4757-4761	pool	
10-9	4762-4769	manager	
10-10	4769-4770	.	
10-11	4771-4778	Usually	
10-12	4778-4779	,	
10-13	4780-4783	the	
10-14	4784-4794	connection	
10-15	4795-4799	pool	
10-16	4800-4807	manager	
10-17	4808-4817	maintains	
10-18	4818-4819	a	
10-19	4820-4824	pool	
10-20	4825-4827	of	
10-21	4828-4832	open	
10-22	4833-4841	database	
10-23	4842-4853	connections	
10-24	4853-4854	.	
10-25	4855-4858	You	
10-26	4859-4862	can	
10-27	4863-4866	not	
10-28	4867-4871	pool	
10-29	4872-4883	connections	
10-30	4884-4891	without	
10-31	4892-4893	a	
10-32	4894-4898	pool	
10-33	4899-4906	manager	
10-34	4906-4907	.	
10-35	4908-4909	A	
10-36	4910-4914	pool	
10-37	4915-4923	contains	
10-38	4924-4927	two	
10-39	4928-4933	types	
10-40	4934-4936	of	
10-41	4937-4948	connections	
10-42	4948-4949	:	
10-43	4950-4956	Active	
10-44	4957-4967	connection	
10-45	4967-4968	:	
10-46	4969-4971	In	
10-47	4972-4975	use	
10-48	4976-4978	by	
10-49	4979-4982	the	
10-50	4983-4999	application.Idle	
10-51	5000-5010	connection	
10-52	5010-5011	:	
10-53	5011-5012	 	
10-54	5013-5022	Available	
10-55	5023-5026	for	
10-56	5027-5030	use	
10-57	5031-5033	by	
10-58	5034-5037	the	
10-59	5038-5049	application	
10-60	5049-5050	.	

#Text=When a new request to access data from the backend service comes in, the pool manager checks if the pool contains any unused connection and returns one if available. If all the connections in the pool are active, then a new connection is created and added to the pool by the pool manager. When the pool reaches its maximum size, all new connections are queued until a connection in the pool becomes available. Although most databases do not have an in-built connection pooling system, there are middleware solutions that we can use to pool connections from clients. For a PostgreSQL database server, both pgbouncer and pgpool-II can serve as a pooling interface between a web service and a Postgres database. Both utilities use the same logic to pool connections from clients.
11-1	5051-5055	When	
11-2	5056-5057	a	
11-3	5058-5061	new	
11-4	5062-5069	request	
11-5	5070-5072	to	
11-6	5073-5079	access	
11-7	5080-5084	data	
11-8	5085-5089	from	
11-9	5090-5093	the	
11-10	5094-5101	backend	
11-11	5102-5109	service	
11-12	5110-5115	comes	
11-13	5116-5118	in	
11-14	5118-5119	,	
11-15	5120-5123	the	
11-16	5124-5128	pool	
11-17	5129-5136	manager	
11-18	5137-5143	checks	
11-19	5144-5146	if	
11-20	5147-5150	the	
11-21	5151-5155	pool	
11-22	5156-5164	contains	
11-23	5165-5168	any	
11-24	5169-5175	unused	
11-25	5176-5186	connection	
11-26	5187-5190	and	
11-27	5191-5198	returns	
11-28	5199-5202	one	
11-29	5203-5205	if	
11-30	5206-5215	available	
11-31	5215-5216	.	
11-32	5217-5219	If	
11-33	5220-5223	all	
11-34	5224-5227	the	
11-35	5228-5239	connections	
11-36	5240-5242	in	
11-37	5243-5246	the	
11-38	5247-5251	pool	
11-39	5252-5255	are	
11-40	5256-5262	active	
11-41	5262-5263	,	
11-42	5264-5268	then	
11-43	5269-5270	a	
11-44	5271-5274	new	
11-45	5275-5285	connection	
11-46	5286-5288	is	
11-47	5289-5296	created	
11-48	5297-5300	and	
11-49	5301-5306	added	
11-50	5307-5309	to	
11-51	5310-5313	the	
11-52	5314-5318	pool	
11-53	5319-5321	by	
11-54	5322-5325	the	
11-55	5326-5330	pool	
11-56	5331-5338	manager	
11-57	5338-5339	.	
11-58	5340-5344	When	
11-59	5345-5348	the	
11-60	5349-5353	pool	
11-61	5354-5361	reaches	
11-62	5362-5365	its	
11-63	5366-5373	maximum	
11-64	5374-5378	size	
11-65	5378-5379	,	
11-66	5380-5383	all	
11-67	5384-5387	new	
11-68	5388-5399	connections	
11-69	5400-5403	are	
11-70	5404-5410	queued	
11-71	5411-5416	until	
11-72	5417-5418	a	
11-73	5419-5429	connection	
11-74	5430-5432	in	
11-75	5433-5436	the	
11-76	5437-5441	pool	
11-77	5442-5449	becomes	
11-78	5450-5459	available	
11-79	5459-5460	.	
11-80	5461-5469	Although	
11-81	5470-5474	most	
11-82	5475-5484	databases	
11-83	5485-5487	do	
11-84	5488-5491	not	
11-85	5492-5496	have	
11-86	5497-5499	an	
11-87	5500-5508	in-built	
11-88	5509-5519	connection	
11-89	5520-5527	pooling	
11-90	5528-5534	system	
11-91	5534-5535	,	
11-92	5536-5541	there	
11-93	5542-5545	are	
11-94	5546-5556	middleware	
11-95	5557-5566	solutions	
11-96	5567-5571	that	
11-97	5572-5574	we	
11-98	5575-5578	can	
11-99	5579-5582	use	
11-100	5583-5585	to	
11-101	5586-5590	pool	
11-102	5591-5602	connections	
11-103	5603-5607	from	
11-104	5608-5615	clients	
11-105	5615-5616	.	
11-106	5617-5620	For	
11-107	5621-5622	a	
11-108	5623-5633	PostgreSQL	
11-109	5634-5642	database	
11-110	5643-5649	server	
11-111	5649-5650	,	
11-112	5651-5655	both	
11-113	5656-5665	pgbouncer	
11-114	5666-5669	and	
11-115	5670-5679	pgpool-II	
11-116	5680-5683	can	
11-117	5684-5689	serve	
11-118	5690-5692	as	
11-119	5693-5694	a	
11-120	5695-5702	pooling	
11-121	5703-5712	interface	
11-122	5713-5720	between	
11-123	5721-5722	a	
11-124	5723-5726	web	
11-125	5727-5734	service	
11-126	5735-5738	and	
11-127	5739-5740	a	
11-128	5741-5749	Postgres	
11-129	5750-5758	database	
11-130	5758-5759	.	
11-131	5760-5764	Both	
11-132	5765-5774	utilities	
11-133	5775-5778	use	
11-134	5779-5782	the	
11-135	5783-5787	same	
11-136	5788-5793	logic	
11-137	5794-5796	to	
11-138	5797-5801	pool	
11-139	5802-5813	connections	
11-140	5814-5818	from	
11-141	5819-5826	clients	
11-142	5826-5827	.	

#Text=pgpool-II offers more features beyond connection pooling, such as replication, load balancing, and parallel query features. How do you add connection pooling? Is it as simple as installing the utilities? Two ways to integrate a connection pooler There are two ways of implementing connection pooling for PostgreSQL application: As an external service or middleware such as pgbouncer
12-1	5828-5837	pgpool-II	
12-2	5838-5844	offers	
12-3	5845-5849	more	
12-4	5850-5858	features	
12-5	5859-5865	beyond	
12-6	5866-5876	connection	
12-7	5877-5884	pooling	
12-8	5884-5885	,	
12-9	5886-5890	such	
12-10	5891-5893	as	
12-11	5894-5905	replication	
12-12	5905-5906	,	
12-13	5907-5911	load	
12-14	5912-5921	balancing	
12-15	5921-5922	,	
12-16	5923-5926	and	
12-17	5927-5935	parallel	
12-18	5936-5941	query	
12-19	5942-5950	features	
12-20	5950-5951	.	
12-21	5952-5955	How	
12-22	5956-5958	do	
12-23	5959-5962	you	
12-24	5963-5966	add	
12-25	5967-5977	connection	
12-26	5978-5985	pooling	
12-27	5985-5986	?	
12-28	5987-5989	Is	
12-29	5990-5992	it	
12-30	5993-5995	as	
12-31	5996-6002	simple	
12-32	6003-6005	as	
12-33	6006-6016	installing	
12-34	6017-6020	the	
12-35	6021-6030	utilities	
12-36	6030-6031	?	
12-37	6032-6035	Two	
12-38	6036-6040	ways	
12-39	6041-6043	to	
12-40	6044-6053	integrate	
12-41	6054-6055	a	
12-42	6056-6066	connection	
12-43	6067-6073	pooler	
12-44	6074-6079	There	
12-45	6080-6083	are	
12-46	6084-6087	two	
12-47	6088-6092	ways	
12-48	6093-6095	of	
12-49	6096-6108	implementing	
12-50	6109-6119	connection	
12-51	6120-6127	pooling	
12-52	6128-6131	for	
12-53	6132-6142	PostgreSQL	
12-54	6143-6154	application	
12-55	6154-6155	:	
12-56	6156-6158	As	
12-57	6159-6161	an	
12-58	6162-6170	external	
12-59	6171-6178	service	
12-60	6179-6181	or	
12-61	6182-6192	middleware	
12-62	6193-6197	such	
12-63	6198-6200	as	
12-64	6201-6210	pgbouncer	

#Text=Connection poolers such as pgbouncer and pgpool-II can be used to pool connections from clients to a PostgreSQL database. The connection pooler sits in between the application and the database server. Pgbouncer or pgpool-II can be configured in a way to relay requests from the application to the database server. Client-side libraries such as c3p0 There exist libraries such as c3p0 which extend database driver functionality to include connection pooling support.
13-1	6211-6221	Connection	
13-2	6222-6229	poolers	
13-3	6230-6234	such	
13-4	6235-6237	as	
13-5	6238-6247	pgbouncer	
13-6	6248-6251	and	
13-7	6252-6261	pgpool-II	
13-8	6262-6265	can	
13-9	6266-6268	be	
13-10	6269-6273	used	
13-11	6274-6276	to	
13-12	6277-6281	pool	
13-13	6282-6293	connections	
13-14	6294-6298	from	
13-15	6299-6306	clients	
13-16	6307-6309	to	
13-17	6310-6311	a	
13-18	6312-6322	PostgreSQL	
13-19	6323-6331	database	
13-20	6331-6332	.	
13-21	6333-6336	The	
13-22	6337-6347	connection	
13-23	6348-6354	pooler	
13-24	6355-6359	sits	
13-25	6360-6362	in	
13-26	6363-6370	between	
13-27	6371-6374	the	
13-28	6375-6386	application	
13-29	6387-6390	and	
13-30	6391-6394	the	
13-31	6395-6403	database	
13-32	6404-6410	server	
13-33	6410-6411	.	
13-34	6412-6421	Pgbouncer	
13-35	6422-6424	or	
13-36	6425-6434	pgpool-II	
13-37	6435-6438	can	
13-38	6439-6441	be	
13-39	6442-6452	configured	
13-40	6453-6455	in	
13-41	6456-6457	a	
13-42	6458-6461	way	
13-43	6462-6464	to	
13-44	6465-6470	relay	
13-45	6471-6479	requests	
13-46	6480-6484	from	
13-47	6485-6488	the	
13-48	6489-6500	application	
13-49	6501-6503	to	
13-50	6504-6507	the	
13-51	6508-6516	database	
13-52	6517-6523	server	
13-53	6523-6524	.	
13-54	6525-6536	Client-side	
13-55	6537-6546	libraries	
13-56	6547-6551	such	
13-57	6552-6554	as	
13-58	6555-6559	c3p0	
13-59	6560-6565	There	
13-60	6566-6571	exist	
13-61	6572-6581	libraries	
13-62	6582-6586	such	
13-63	6587-6589	as	
13-64	6590-6594	c3p0	
13-65	6595-6600	which	
13-66	6601-6607	extend	
13-67	6608-6616	database	
13-68	6617-6623	driver	
13-69	6624-6637	functionality	
13-70	6638-6640	to	
13-71	6641-6648	include	
13-72	6649-6659	connection	
13-73	6660-6667	pooling	
13-74	6668-6675	support	
13-75	6675-6676	.	

#Text=However, the best way to implement connection pooling for applications is to make use of an external service or middleware since it is easier to set up and manage. In addition external middleware like pgpool2 provides other features such as load balancing apart from pooling connections. Now let’s take a deeper look at what happens when a backend service connects to a Postgres database, both with and without pooling. Scaling database performance without connection pooling
14-1	6677-6684	However	
14-2	6684-6685	,	
14-3	6686-6689	the	
14-4	6690-6694	best	
14-5	6695-6698	way	
14-6	6699-6701	to	
14-7	6702-6711	implement	
14-8	6712-6722	connection	
14-9	6723-6730	pooling	
14-10	6731-6734	for	
14-11	6735-6747	applications	
14-12	6748-6750	is	
14-13	6751-6753	to	
14-14	6754-6758	make	
14-15	6759-6762	use	
14-16	6763-6765	of	
14-17	6766-6768	an	
14-18	6769-6777	external	
14-19	6778-6785	service	
14-20	6786-6788	or	
14-21	6789-6799	middleware	
14-22	6800-6805	since	
14-23	6806-6808	it	
14-24	6809-6811	is	
14-25	6812-6818	easier	
14-26	6819-6821	to	
14-27	6822-6825	set	
14-28	6826-6828	up	
14-29	6829-6832	and	
14-30	6833-6839	manage	
14-31	6839-6840	.	
14-32	6841-6843	In	
14-33	6844-6852	addition	
14-34	6853-6861	external	
14-35	6862-6872	middleware	
14-36	6873-6877	like	
14-37	6878-6885	pgpool2	
14-38	6886-6894	provides	
14-39	6895-6900	other	
14-40	6901-6909	features	
14-41	6910-6914	such	
14-42	6915-6917	as	
14-43	6918-6922	load	
14-44	6923-6932	balancing	
14-45	6933-6938	apart	
14-46	6939-6943	from	
14-47	6944-6951	pooling	
14-48	6952-6963	connections	
14-49	6963-6964	.	
14-50	6965-6968	Now	
14-51	6969-6972	let	
14-52	6972-6973	’	
14-53	6973-6974	s	
14-54	6975-6979	take	
14-55	6980-6981	a	
14-56	6982-6988	deeper	
14-57	6989-6993	look	
14-58	6994-6996	at	
14-59	6997-7001	what	
14-60	7002-7009	happens	
14-61	7010-7014	when	
14-62	7015-7016	a	
14-63	7017-7024	backend	
14-64	7025-7032	service	
14-65	7033-7041	connects	
14-66	7042-7044	to	
14-67	7045-7046	a	
14-68	7047-7055	Postgres	
14-69	7056-7064	database	
14-70	7064-7065	,	
14-71	7066-7070	both	
14-72	7071-7075	with	
14-73	7076-7079	and	
14-74	7080-7087	without	
14-75	7088-7095	pooling	
14-76	7095-7096	.	
14-77	7097-7104	Scaling	
14-78	7105-7113	database	
14-79	7114-7125	performance	
14-80	7126-7133	without	
14-81	7134-7144	connection	
14-82	7145-7152	pooling	

#Text=We do not need a connection pooler to connect to a backend service. We can connect to a Postgres database directly. To examine how long it takes to execute concurrent connections to a database without a connection pooler, we will use pgbench to benchmark connections to the Postgres database. Pgbench is based on TPC-B. TPC-B measures throughput in terms of how many transactions per second a system can perform. Pgbench executes five SELECT, INSERT, and UPDATE commands per transaction.
15-1	7153-7155	We	
15-2	7156-7158	do	
15-3	7159-7162	not	
15-4	7163-7167	need	
15-5	7168-7169	a	
15-6	7170-7180	connection	
15-7	7181-7187	pooler	
15-8	7188-7190	to	
15-9	7191-7198	connect	
15-10	7199-7201	to	
15-11	7202-7203	a	
15-12	7204-7211	backend	
15-13	7212-7219	service	
15-14	7219-7220	.	
15-15	7221-7223	We	
15-16	7224-7227	can	
15-17	7228-7235	connect	
15-18	7236-7238	to	
15-19	7239-7240	a	
15-20	7241-7249	Postgres	
15-21	7250-7258	database	
15-22	7259-7267	directly	
15-23	7267-7268	.	
15-24	7269-7271	To	
15-25	7272-7279	examine	
15-26	7280-7283	how	
15-27	7284-7288	long	
15-28	7289-7291	it	
15-29	7292-7297	takes	
15-30	7298-7300	to	
15-31	7301-7308	execute	
15-32	7309-7319	concurrent	
15-33	7320-7331	connections	
15-34	7332-7334	to	
15-35	7335-7336	a	
15-36	7337-7345	database	
15-37	7346-7353	without	
15-38	7354-7355	a	
15-39	7356-7366	connection	
15-40	7367-7373	pooler	
15-41	7373-7374	,	
15-42	7375-7377	we	
15-43	7378-7382	will	
15-44	7383-7386	use	
15-45	7387-7394	pgbench	
15-46	7395-7397	to	
15-47	7398-7407	benchmark	
15-48	7408-7419	connections	
15-49	7420-7422	to	
15-50	7423-7426	the	
15-51	7427-7435	Postgres	
15-52	7436-7444	database	
15-53	7444-7445	.	
15-54	7446-7453	Pgbench	
15-55	7454-7456	is	
15-56	7457-7462	based	
15-57	7463-7465	on	
15-58	7466-7471	TPC-B	
15-59	7471-7472	.	
15-60	7473-7478	TPC-B	
15-61	7479-7487	measures	
15-62	7488-7498	throughput	
15-63	7499-7501	in	
15-64	7502-7507	terms	
15-65	7508-7510	of	
15-66	7511-7514	how	
15-67	7515-7519	many	
15-68	7520-7532	transactions	
15-69	7533-7536	per	
15-70	7537-7543	second	
15-71	7544-7545	a	
15-72	7546-7552	system	
15-73	7553-7556	can	
15-74	7557-7564	perform	
15-75	7564-7565	.	
15-76	7566-7573	Pgbench	
15-77	7574-7582	executes	
15-78	7583-7587	five	
15-79	7588-7594	SELECT	
15-80	7594-7595	,	
15-81	7596-7602	INSERT	
15-82	7602-7603	,	
15-83	7604-7607	and	
15-84	7608-7614	UPDATE	
15-85	7615-7623	commands	
15-86	7624-7627	per	
15-87	7628-7639	transaction	
15-88	7639-7640	.	

#Text=Based on TPC-B-like transactions, pgbench runs the same sequence of SQL commands repeatedly in multiple concurrent database sessions and calculates the average transaction rate. Before we run pgbench, we need to initialize it with the following command to create the pgbench_history, pgbench_branches, pgbench_tellers, and pgbench_accounts tables. Pgbench uses the following tables to run transactions for benchmarking.
16-1	7641-7646	Based	
16-2	7647-7649	on	
16-3	7650-7660	TPC-B-like	
16-4	7661-7673	transactions	
16-5	7673-7674	,	
16-6	7675-7682	pgbench	
16-7	7683-7687	runs	
16-8	7688-7691	the	
16-9	7692-7696	same	
16-10	7697-7705	sequence	
16-11	7706-7708	of	
16-12	7709-7712	SQL	
16-13	7713-7721	commands	
16-14	7722-7732	repeatedly	
16-15	7733-7735	in	
16-16	7736-7744	multiple	
16-17	7745-7755	concurrent	
16-18	7756-7764	database	
16-19	7765-7773	sessions	
16-20	7774-7777	and	
16-21	7778-7788	calculates	
16-22	7789-7792	the	
16-23	7793-7800	average	
16-24	7801-7812	transaction	
16-25	7813-7817	rate	
16-26	7817-7818	.	
16-27	7819-7825	Before	
16-28	7826-7828	we	
16-29	7829-7832	run	
16-30	7833-7840	pgbench	
16-31	7840-7841	,	
16-32	7842-7844	we	
16-33	7845-7849	need	
16-34	7850-7852	to	
16-35	7853-7863	initialize	
16-36	7864-7866	it	
16-37	7867-7871	with	
16-38	7872-7875	the	
16-39	7876-7885	following	
16-40	7886-7893	command	
16-41	7894-7896	to	
16-42	7897-7903	create	
16-43	7904-7907	the	
16-44	7908-7923	pgbench_history	
16-45	7923-7924	,	
16-46	7925-7941	pgbench_branches	
16-47	7941-7942	,	
16-48	7943-7958	pgbench_tellers	
16-49	7958-7959	,	
16-50	7960-7963	and	
16-51	7964-7980	pgbench_accounts	
16-52	7981-7987	tables	
16-53	7987-7988	.	
16-54	7989-7996	Pgbench	
16-55	7997-8001	uses	
16-56	8002-8005	the	
16-57	8006-8015	following	
16-58	8016-8022	tables	
16-59	8023-8025	to	
16-60	8026-8029	run	
16-61	8030-8042	transactions	
16-62	8043-8046	for	
16-63	8047-8059	benchmarking	
16-64	8059-8060	.	

#Text=pgbench  -i  -s 50  database_name Afterward, I executed the command below to test the database with 150 clients pgbench  -c 10  -j 2  -t  10000  database_name As you see, in our initial baseline test, I instructed pgbench to execute with ten different client sessions. Each client session will execute 10,000 transactions.
17-1	8061-8068	pgbench	
17-2	8068-8069	 	
17-3	8070-8071	-	
17-4	8071-8072	i	
17-5	8072-8073	 	
17-6	8074-8075	-	
17-7	8075-8076	s	
17-8	8077-8079	50	
17-9	8079-8080	 	
17-10	8081-8094	database_name	
17-11	8095-8104	Afterward	
17-12	8104-8105	,	
17-13	8106-8107	I	
17-14	8108-8116	executed	
17-15	8117-8120	the	
17-16	8121-8128	command	
17-17	8129-8134	below	
17-18	8135-8137	to	
17-19	8138-8142	test	
17-20	8143-8146	the	
17-21	8147-8155	database	
17-22	8156-8160	with	
17-23	8161-8164	150	
17-24	8165-8172	clients	
17-25	8173-8180	pgbench	
17-26	8180-8181	 	
17-27	8182-8183	-	
17-28	8183-8184	c	
17-29	8185-8187	10	
17-30	8187-8188	 	
17-31	8189-8190	-	
17-32	8190-8191	j	
17-33	8192-8193	2	
17-34	8193-8194	 	
17-35	8195-8196	-	
17-36	8196-8197	t	
17-37	8197-8198	 	
17-38	8199-8204	10000	
17-39	8204-8205	 	
17-40	8206-8219	database_name	
17-41	8220-8222	As	
17-42	8223-8226	you	
17-43	8227-8230	see	
17-44	8230-8231	,	
17-45	8232-8234	in	
17-46	8235-8238	our	
17-47	8239-8246	initial	
17-48	8247-8255	baseline	
17-49	8256-8260	test	
17-50	8260-8261	,	
17-51	8262-8263	I	
17-52	8264-8274	instructed	
17-53	8275-8282	pgbench	
17-54	8283-8285	to	
17-55	8286-8293	execute	
17-56	8294-8298	with	
17-57	8299-8302	ten	
17-58	8303-8312	different	
17-59	8313-8319	client	
17-60	8320-8328	sessions	
17-61	8328-8329	.	
17-62	8330-8334	Each	
17-63	8335-8341	client	
17-64	8342-8349	session	
17-65	8350-8354	will	
17-66	8355-8362	execute	
17-67	8363-8369	10,000	
17-68	8370-8382	transactions	
17-69	8382-8383	.	

#Text=From these results, it seems our initial baseline test is 486 transactions per second. Let’s see how we can make use of connection poolers like pgbouncer and pgpool to increase transaction throughput and avoid a ‘Sorry!, too many clients already’ error. Scaling database performance with pgbouncer
18-1	8384-8388	From	
18-2	8389-8394	these	
18-3	8395-8402	results	
18-4	8402-8403	,	
18-5	8404-8406	it	
18-6	8407-8412	seems	
18-7	8413-8416	our	
18-8	8417-8424	initial	
18-9	8425-8433	baseline	
18-10	8434-8438	test	
18-11	8439-8441	is	
18-12	8442-8445	486	
18-13	8446-8458	transactions	
18-14	8459-8462	per	
18-15	8463-8469	second	
18-16	8469-8470	.	
18-17	8471-8474	Let	
18-18	8474-8475	’	
18-19	8475-8476	s	
18-20	8477-8480	see	
18-21	8481-8484	how	
18-22	8485-8487	we	
18-23	8488-8491	can	
18-24	8492-8496	make	
18-25	8497-8500	use	
18-26	8501-8503	of	
18-27	8504-8514	connection	
18-28	8515-8522	poolers	
18-29	8523-8527	like	
18-30	8528-8537	pgbouncer	
18-31	8538-8541	and	
18-32	8542-8548	pgpool	
18-33	8549-8551	to	
18-34	8552-8560	increase	
18-35	8561-8572	transaction	
18-36	8573-8583	throughput	
18-37	8584-8587	and	
18-38	8588-8593	avoid	
18-39	8594-8595	a	
18-40	8596-8597	‘	
18-41	8597-8602	Sorry	
18-42	8602-8603	!	
18-43	8603-8604	,	
18-44	8605-8608	too	
18-45	8609-8613	many	
18-46	8614-8621	clients	
18-47	8622-8629	already	
18-48	8629-8630	’	
18-49	8631-8636	error	
18-50	8636-8637	.	
18-51	8638-8645	Scaling	
18-52	8646-8654	database	
18-53	8655-8666	performance	
18-54	8667-8671	with	
18-55	8672-8681	pgbouncer	

#Text=Let’s look at how we can use pgbouncer to increase transaction throughput. Pgbouncer can be installed on almost all Linux distributions. You can check here how to set up pgbouncer. Alternatively, you can install pgbouncer using package managers like apt-get or yum.
19-1	8682-8685	Let	
19-2	8685-8686	’	
19-3	8686-8687	s	
19-4	8688-8692	look	
19-5	8693-8695	at	
19-6	8696-8699	how	
19-7	8700-8702	we	
19-8	8703-8706	can	
19-9	8707-8710	use	
19-10	8711-8720	pgbouncer	
19-11	8721-8723	to	
19-12	8724-8732	increase	
19-13	8733-8744	transaction	
19-14	8745-8755	throughput	
19-15	8755-8756	.	
19-16	8757-8766	Pgbouncer	
19-17	8767-8770	can	
19-18	8771-8773	be	
19-19	8774-8783	installed	
19-20	8784-8786	on	
19-21	8787-8793	almost	
19-22	8794-8797	all	
19-23	8798-8803	Linux	
19-24	8804-8817	distributions	
19-25	8817-8818	.	
19-26	8819-8822	You	
19-27	8823-8826	can	
19-28	8827-8832	check	
19-29	8833-8837	here	
19-30	8838-8841	how	
19-31	8842-8844	to	
19-32	8845-8848	set	
19-33	8849-8851	up	
19-34	8852-8861	pgbouncer	
19-35	8861-8862	.	
19-36	8863-8876	Alternatively	
19-37	8876-8877	,	
19-38	8878-8881	you	
19-39	8882-8885	can	
19-40	8886-8893	install	
19-41	8894-8903	pgbouncer	
19-42	8904-8909	using	
19-43	8910-8917	package	
19-44	8918-8926	managers	
19-45	8927-8931	like	
19-46	8932-8939	apt-get	
19-47	8940-8942	or	
19-48	8943-8946	yum	
19-49	8946-8947	.	

#Text=If you find it difficult to authenticate clients with pgbouncer, you can check GitHub on how to do so. Pgbouncer comes with three types of pooling: Session pooling: One of the connections in the pool is assigned to a client until the timeout is reached.  Transaction pooling: Similar to session polling, it gets a connection from the pool. It keeps it until the transaction is done. If the same client wants to run another transaction, it has to wait until it gets another transaction assigned to it. Statement pooling: Connection is returned to the pool as soon as the first query is completed.
20-1	8948-8950	If	
20-2	8951-8954	you	
20-3	8955-8959	find	
20-4	8960-8962	it	
20-5	8963-8972	difficult	
20-6	8973-8975	to	
20-7	8976-8988	authenticate	
20-8	8989-8996	clients	
20-9	8997-9001	with	
20-10	9002-9011	pgbouncer	
20-11	9011-9012	,	
20-12	9013-9016	you	
20-13	9017-9020	can	
20-14	9021-9026	check	
20-15	9027-9033	GitHub	
20-16	9034-9036	on	
20-17	9037-9040	how	
20-18	9041-9043	to	
20-19	9044-9046	do	
20-20	9047-9049	so	
20-21	9049-9050	.	
20-22	9051-9060	Pgbouncer	
20-23	9061-9066	comes	
20-24	9067-9071	with	
20-25	9072-9077	three	
20-26	9078-9083	types	
20-27	9084-9086	of	
20-28	9087-9094	pooling	
20-29	9094-9095	:	
20-30	9096-9103	Session	
20-31	9104-9111	pooling	
20-32	9111-9112	:	
20-33	9113-9116	One	
20-34	9117-9119	of	
20-35	9120-9123	the	
20-36	9124-9135	connections	
20-37	9136-9138	in	
20-38	9139-9142	the	
20-39	9143-9147	pool	
20-40	9148-9150	is	
20-41	9151-9159	assigned	
20-42	9160-9162	to	
20-43	9163-9164	a	
20-44	9165-9171	client	
20-45	9172-9177	until	
20-46	9178-9181	the	
20-47	9182-9189	timeout	
20-48	9190-9192	is	
20-49	9193-9200	reached	
20-50	9200-9201	.	
20-51	9201-9203	  	
20-52	9203-9214	Transaction	
20-53	9215-9222	pooling	
20-54	9222-9223	:	
20-55	9224-9231	Similar	
20-56	9232-9234	to	
20-57	9235-9242	session	
20-58	9243-9250	polling	
20-59	9250-9251	,	
20-60	9252-9254	it	
20-61	9255-9259	gets	
20-62	9260-9261	a	
20-63	9262-9272	connection	
20-64	9273-9277	from	
20-65	9278-9281	the	
20-66	9282-9286	pool	
20-67	9286-9287	.	
20-68	9288-9290	It	
20-69	9291-9296	keeps	
20-70	9297-9299	it	
20-71	9300-9305	until	
20-72	9306-9309	the	
20-73	9310-9321	transaction	
20-74	9322-9324	is	
20-75	9325-9329	done	
20-76	9329-9330	.	
20-77	9331-9333	If	
20-78	9334-9337	the	
20-79	9338-9342	same	
20-80	9343-9349	client	
20-81	9350-9355	wants	
20-82	9356-9358	to	
20-83	9359-9362	run	
20-84	9363-9370	another	
20-85	9371-9382	transaction	
20-86	9382-9383	,	
20-87	9384-9386	it	
20-88	9387-9390	has	
20-89	9391-9393	to	
20-90	9394-9398	wait	
20-91	9399-9404	until	
20-92	9405-9407	it	
20-93	9408-9412	gets	
20-94	9413-9420	another	
20-95	9421-9432	transaction	
20-96	9433-9441	assigned	
20-97	9442-9444	to	
20-98	9445-9447	it	
20-99	9447-9448	.	
20-100	9448-9449	 	
20-101	9449-9458	Statement	
20-102	9459-9466	pooling	
20-103	9466-9467	:	
20-104	9468-9478	Connection	
20-105	9479-9481	is	
20-106	9482-9490	returned	
20-107	9491-9493	to	
20-108	9494-9497	the	
20-109	9498-9502	pool	
20-110	9503-9505	as	
20-111	9506-9510	soon	
20-112	9511-9513	as	
20-113	9514-9517	the	
20-114	9518-9523	first	
20-115	9524-9529	query	
20-116	9530-9532	is	
20-117	9533-9542	completed	
20-118	9542-9543	.	

#Text=We will make use of the transaction pooling mode. Inside the pgbouncer.ini file, I modified the following parameter: max_client_conn = 100 The max_client_conn parameter defines how many client connections to pgbouncer (instead of Postgres) are allowed. default_pool_size = 25 The default_pool_size parameter defines how many server connections to allow per user/database pair.
21-1	9544-9546	We	
21-2	9547-9551	will	
21-3	9552-9556	make	
21-4	9557-9560	use	
21-5	9561-9563	of	
21-6	9564-9567	the	
21-7	9568-9579	transaction	
21-8	9580-9587	pooling	
21-9	9588-9592	mode	
21-10	9592-9593	.	
21-11	9594-9600	Inside	
21-12	9601-9604	the	
21-13	9605-9618	pgbouncer.ini	
21-14	9619-9623	file	
21-15	9623-9624	,	
21-16	9625-9626	I	
21-17	9627-9635	modified	
21-18	9636-9639	the	
21-19	9640-9649	following	
21-20	9650-9659	parameter	
21-21	9659-9660	:	
21-22	9661-9676	max_client_conn	
21-23	9677-9678	=	
21-24	9679-9682	100	
21-25	9683-9686	The	
21-26	9687-9702	max_client_conn	
21-27	9703-9712	parameter	
21-28	9713-9720	defines	
21-29	9721-9724	how	
21-30	9725-9729	many	
21-31	9730-9736	client	
21-32	9737-9748	connections	
21-33	9749-9751	to	
21-34	9752-9761	pgbouncer	
21-35	9762-9763	(	
21-36	9763-9770	instead	
21-37	9771-9773	of	
21-38	9774-9782	Postgres	
21-39	9782-9783	)	
21-40	9784-9787	are	
21-41	9788-9795	allowed	
21-42	9795-9796	.	
21-43	9797-9814	default_pool_size	
21-44	9815-9816	=	
21-45	9817-9819	25	
21-46	9820-9823	The	
21-47	9824-9841	default_pool_size	
21-48	9842-9851	parameter	
21-49	9852-9859	defines	
21-50	9860-9863	how	
21-51	9864-9868	many	
21-52	9869-9875	server	
21-53	9876-9887	connections	
21-54	9888-9890	to	
21-55	9891-9896	allow	
21-56	9897-9900	per	
21-57	9901-9905	user	
21-58	9905-9906	/	
21-59	9906-9914	database	
21-60	9915-9919	pair	
21-61	9919-9920	.	

#Text=reserve_pool_size = 5 The reserve_pool_size parameter defines how many additional connections are allowed to the pool. As in the previous test I executed pgbench with ten different client sessions. Each client executes 1000 transactions as shown below. pgbench  -c 10  -p -j 2  -t 1000 database_name
22-1	9921-9938	reserve_pool_size	
22-2	9939-9940	=	
22-3	9941-9942	5	
22-4	9943-9946	The	
22-5	9947-9964	reserve_pool_size	
22-6	9965-9974	parameter	
22-7	9975-9982	defines	
22-8	9983-9986	how	
22-9	9987-9991	many	
22-10	9992-10002	additional	
22-11	10003-10014	connections	
22-12	10015-10018	are	
22-13	10019-10026	allowed	
22-14	10027-10029	to	
22-15	10030-10033	the	
22-16	10034-10038	pool	
22-17	10038-10039	.	
22-18	10040-10042	As	
22-19	10043-10045	in	
22-20	10046-10049	the	
22-21	10050-10058	previous	
22-22	10059-10063	test	
22-23	10064-10065	I	
22-24	10066-10074	executed	
22-25	10075-10082	pgbench	
22-26	10083-10087	with	
22-27	10088-10091	ten	
22-28	10092-10101	different	
22-29	10102-10108	client	
22-30	10109-10117	sessions	
22-31	10117-10118	.	
22-32	10119-10123	Each	
22-33	10124-10130	client	
22-34	10131-10139	executes	
22-35	10140-10144	1000	
22-36	10145-10157	transactions	
22-37	10158-10160	as	
22-38	10161-10166	shown	
22-39	10167-10172	below	
22-40	10172-10173	.	
22-41	10174-10181	pgbench	
22-42	10181-10182	 	
22-43	10183-10184	-	
22-44	10184-10185	c	
22-45	10186-10188	10	
22-46	10188-10189	 	
22-47	10190-10191	-	
22-48	10191-10192	p	
22-49	10193-10194	-	
22-50	10194-10195	j	
22-51	10196-10197	2	
22-52	10197-10198	 	
22-53	10199-10200	-	
22-54	10200-10201	t	
22-55	10202-10206	1000	
22-56	10207-10220	database_name	

#Text=As you see, transaction throughput increased from 486 transactions per second to 566 transactions per second. With the help of pgbouncer, transaction throughput improved by approximately 60%. Now let’s see how we can increase transaction throughput with pgpool-II since it comes with connection pooling features. Unlike pgbouncer, pgpool-II offers features beyond connection pooling. The documentation provides detailed information about pgpool-II features and how to set it up from source or via a package manager
23-1	10221-10223	As	
23-2	10224-10227	you	
23-3	10228-10231	see	
23-4	10231-10232	,	
23-5	10233-10244	transaction	
23-6	10245-10255	throughput	
23-7	10256-10265	increased	
23-8	10266-10270	from	
23-9	10271-10274	486	
23-10	10275-10287	transactions	
23-11	10288-10291	per	
23-12	10292-10298	second	
23-13	10299-10301	to	
23-14	10302-10305	566	
23-15	10306-10318	transactions	
23-16	10319-10322	per	
23-17	10323-10329	second	
23-18	10329-10330	.	
23-19	10331-10335	With	
23-20	10336-10339	the	
23-21	10340-10344	help	
23-22	10345-10347	of	
23-23	10348-10357	pgbouncer	
23-24	10357-10358	,	
23-25	10359-10370	transaction	
23-26	10371-10381	throughput	
23-27	10382-10390	improved	
23-28	10391-10393	by	
23-29	10394-10407	approximately	
23-30	10408-10411	60%	
23-31	10411-10412	.	
23-32	10413-10416	Now	
23-33	10417-10420	let	
23-34	10420-10421	’	
23-35	10421-10422	s	
23-36	10423-10426	see	
23-37	10427-10430	how	
23-38	10431-10433	we	
23-39	10434-10437	can	
23-40	10438-10446	increase	
23-41	10447-10458	transaction	
23-42	10459-10469	throughput	
23-43	10470-10474	with	
23-44	10475-10484	pgpool-II	
23-45	10485-10490	since	
23-46	10491-10493	it	
23-47	10494-10499	comes	
23-48	10500-10504	with	
23-49	10505-10515	connection	
23-50	10516-10523	pooling	
23-51	10524-10532	features	
23-52	10532-10533	.	
23-53	10534-10540	Unlike	
23-54	10541-10550	pgbouncer	
23-55	10550-10551	,	
23-56	10552-10561	pgpool-II	
23-57	10562-10568	offers	
23-58	10569-10577	features	
23-59	10578-10584	beyond	
23-60	10585-10595	connection	
23-61	10596-10603	pooling	
23-62	10603-10604	.	
23-63	10605-10608	The	
23-64	10609-10622	documentation	
23-65	10623-10631	provides	
23-66	10632-10640	detailed	
23-67	10641-10652	information	
23-68	10653-10658	about	
23-69	10659-10668	pgpool-II	
23-70	10669-10677	features	
23-71	10678-10681	and	
23-72	10682-10685	how	
23-73	10686-10688	to	
23-74	10689-10692	set	
23-75	10693-10695	it	
23-76	10696-10698	up	
23-77	10699-10703	from	
23-78	10704-10710	source	
23-79	10711-10713	or	
23-80	10714-10717	via	
23-81	10718-10719	a	
23-82	10720-10727	package	
23-83	10728-10735	manager	

#Text=I changed the following parameters in the pgpool.conf file to make it route clients connections from pgpool2 to Postgres database server. connection_cache  = on listen_addresses  = ‘postgres_database_name’’ port  = 5432 Setting the connection_cache parameter to on activates pgpool2 pooling capability.
24-1	10736-10737	I	
24-2	10738-10745	changed	
24-3	10746-10749	the	
24-4	10750-10759	following	
24-5	10760-10770	parameters	
24-6	10771-10773	in	
24-7	10774-10777	the	
24-8	10778-10789	pgpool.conf	
24-9	10790-10794	file	
24-10	10795-10797	to	
24-11	10798-10802	make	
24-12	10803-10805	it	
24-13	10806-10811	route	
24-14	10812-10819	clients	
24-15	10820-10831	connections	
24-16	10832-10836	from	
24-17	10837-10844	pgpool2	
24-18	10845-10847	to	
24-19	10848-10856	Postgres	
24-20	10857-10865	database	
24-21	10866-10872	server	
24-22	10872-10873	.	
24-23	10874-10890	connection_cache	
24-24	10890-10891	 	
24-25	10892-10893	=	
24-26	10894-10896	on	
24-27	10897-10913	listen_addresses	
24-28	10913-10914	 	
24-29	10915-10916	=	
24-30	10917-10918	‘	
24-31	10918-10940	postgres_database_name	
24-32	10940-10941	’	
24-33	10941-10942	’	
24-34	10943-10947	port	
24-35	10947-10948	 	
24-36	10949-10950	=	
24-37	10951-10955	5432	
24-38	10956-10963	Setting	
24-39	10964-10967	the	
24-40	10968-10984	connection_cache	
24-41	10985-10994	parameter	
24-42	10995-10997	to	
24-43	10998-11000	on	
24-44	11001-11010	activates	
24-45	11011-11018	pgpool2	
24-46	11019-11026	pooling	
24-47	11027-11037	capability	
24-48	11037-11038	.	

#Text=Like the previous test, pgbench executed ten different client sessions. Each client executes 1000 transactions to the Postgres database server. Thus we expect a total of 10,000 transactions from all clients. gbench  -p 9999  -c  10  -C  -t 1000  postgres_database In the same way we increased transaction throughput with pgbouncer, it seems pgpool2 also increased transaction throughput by 75% as compared to the initial test.
25-1	11039-11043	Like	
25-2	11044-11047	the	
25-3	11048-11056	previous	
25-4	11057-11061	test	
25-5	11061-11062	,	
25-6	11063-11070	pgbench	
25-7	11071-11079	executed	
25-8	11080-11083	ten	
25-9	11084-11093	different	
25-10	11094-11100	client	
25-11	11101-11109	sessions	
25-12	11109-11110	.	
25-13	11111-11115	Each	
25-14	11116-11122	client	
25-15	11123-11131	executes	
25-16	11132-11136	1000	
25-17	11137-11149	transactions	
25-18	11150-11152	to	
25-19	11153-11156	the	
25-20	11157-11165	Postgres	
25-21	11166-11174	database	
25-22	11175-11181	server	
25-23	11181-11182	.	
25-24	11183-11187	Thus	
25-25	11188-11190	we	
25-26	11191-11197	expect	
25-27	11198-11199	a	
25-28	11200-11205	total	
25-29	11206-11208	of	
25-30	11209-11215	10,000	
25-31	11216-11228	transactions	
25-32	11229-11233	from	
25-33	11234-11237	all	
25-34	11238-11245	clients	
25-35	11245-11246	.	
25-36	11247-11253	gbench	
25-37	11253-11254	 	
25-38	11255-11256	-	
25-39	11256-11257	p	
25-40	11258-11262	9999	
25-41	11262-11263	 	
25-42	11264-11265	-	
25-43	11265-11266	c	
25-44	11266-11267	 	
25-45	11268-11270	10	
25-46	11270-11271	 	
25-47	11272-11273	-	
25-48	11273-11274	C	
25-49	11274-11275	 	
25-50	11276-11277	-	
25-51	11277-11278	t	
25-52	11279-11283	1000	
25-53	11283-11284	 	
25-54	11285-11302	postgres_database	
25-55	11303-11305	In	
25-56	11306-11309	the	
25-57	11310-11314	same	
25-58	11315-11318	way	
25-59	11319-11321	we	
25-60	11322-11331	increased	
25-61	11332-11343	transaction	
25-62	11344-11354	throughput	
25-63	11355-11359	with	
25-64	11360-11369	pgbouncer	
25-65	11369-11370	,	
25-66	11371-11373	it	
25-67	11374-11379	seems	
25-68	11380-11387	pgpool2	
25-69	11388-11392	also	
25-70	11393-11402	increased	
25-71	11403-11414	transaction	
25-72	11415-11425	throughput	
25-73	11426-11428	by	
25-74	11429-11432	75%	
25-75	11433-11435	as	
25-76	11436-11444	compared	
25-77	11445-11447	to	
25-78	11448-11451	the	
25-79	11452-11459	initial	
25-80	11460-11464	test	
25-81	11464-11465	.	

#Text=Pgbouncer implements connection pooling ‘out of the box’ without the need to fine-tune parameters while pgpool2 allows you to fine-tune parameters to enhance connection pooling. Choosing a connection pooler: pgpool-II or pgbouncer? There are several factors to consider when choosing a connection pooler to use. Although pgbouncer and pgpool-II are great solutions for connection pooling, each tool has its strengths and weaknesses.
26-1	11466-11475	Pgbouncer	
26-2	11476-11486	implements	
26-3	11487-11497	connection	
26-4	11498-11505	pooling	
26-5	11506-11507	‘	
26-6	11507-11510	out	
26-7	11511-11513	of	
26-8	11514-11517	the	
26-9	11518-11521	box	
26-10	11521-11522	’	
26-11	11523-11530	without	
26-12	11531-11534	the	
26-13	11535-11539	need	
26-14	11540-11542	to	
26-15	11543-11552	fine-tune	
26-16	11553-11563	parameters	
26-17	11564-11569	while	
26-18	11570-11577	pgpool2	
26-19	11578-11584	allows	
26-20	11585-11588	you	
26-21	11589-11591	to	
26-22	11592-11601	fine-tune	
26-23	11602-11612	parameters	
26-24	11613-11615	to	
26-25	11616-11623	enhance	
26-26	11624-11634	connection	
26-27	11635-11642	pooling	
26-28	11642-11643	.	
26-29	11644-11652	Choosing	
26-30	11653-11654	a	
26-31	11655-11665	connection	
26-32	11666-11672	pooler	
26-33	11672-11673	:	
26-34	11674-11683	pgpool-II	
26-35	11684-11686	or	
26-36	11687-11696	pgbouncer	
26-37	11696-11697	?	
26-38	11698-11703	There	
26-39	11704-11707	are	
26-40	11708-11715	several	
26-41	11716-11723	factors	
26-42	11724-11726	to	
26-43	11727-11735	consider	
26-44	11736-11740	when	
26-45	11741-11749	choosing	
26-46	11750-11751	a	
26-47	11752-11762	connection	
26-48	11763-11769	pooler	
26-49	11770-11772	to	
26-50	11773-11776	use	
26-51	11776-11777	.	
26-52	11778-11786	Although	
26-53	11787-11796	pgbouncer	
26-54	11797-11800	and	
26-55	11801-11810	pgpool-II	
26-56	11811-11814	are	
26-57	11815-11820	great	
26-58	11821-11830	solutions	
26-59	11831-11834	for	
26-60	11835-11845	connection	
26-61	11846-11853	pooling	
26-62	11853-11854	,	
26-63	11855-11859	each	
26-64	11860-11864	tool	
26-65	11865-11868	has	
26-66	11869-11872	its	
26-67	11873-11882	strengths	
26-68	11883-11886	and	
26-69	11887-11897	weaknesses	
26-70	11897-11898	.	

#Text=Memory/resource consumption If you are interested in a lightweight connection pooler for your backend service, then pgbouncer is the right tool for you. Unlike pgpool-II, which by default allows 32 child processes to be forked, pgbouncer uses only one process. Thus pgbouncer consumes less memory than pgpool2.
27-1	11899-11905	Memory	
27-2	11905-11906	/	
27-3	11906-11914	resource	
27-4	11915-11926	consumption	
27-5	11927-11929	If	
27-6	11930-11933	you	
27-7	11934-11937	are	
27-8	11938-11948	interested	
27-9	11949-11951	in	
27-10	11952-11953	a	
27-11	11954-11965	lightweight	
27-12	11966-11976	connection	
27-13	11977-11983	pooler	
27-14	11984-11987	for	
27-15	11988-11992	your	
27-16	11993-12000	backend	
27-17	12001-12008	service	
27-18	12008-12009	,	
27-19	12010-12014	then	
27-20	12015-12024	pgbouncer	
27-21	12025-12027	is	
27-22	12028-12031	the	
27-23	12032-12037	right	
27-24	12038-12042	tool	
27-25	12043-12046	for	
27-26	12047-12050	you	
27-27	12050-12051	.	
27-28	12052-12058	Unlike	
27-29	12059-12068	pgpool-II	
27-30	12068-12069	,	
27-31	12070-12075	which	
27-32	12076-12078	by	
27-33	12079-12086	default	
27-34	12087-12093	allows	
27-35	12094-12096	32	
27-36	12097-12102	child	
27-37	12103-12112	processes	
27-38	12113-12115	to	
27-39	12116-12118	be	
27-40	12119-12125	forked	
27-41	12125-12126	,	
27-42	12127-12136	pgbouncer	
27-43	12137-12141	uses	
27-44	12142-12146	only	
27-45	12147-12150	one	
27-46	12151-12158	process	
27-47	12158-12159	.	
27-48	12160-12164	Thus	
27-49	12165-12174	pgbouncer	
27-50	12175-12183	consumes	
27-51	12184-12188	less	
27-52	12189-12195	memory	
27-53	12196-12200	than	
27-54	12201-12208	pgpool2	
27-55	12208-12209	.	

#Text=Streaming Replication Apart from pooling connections, you can also manage your Postgres cluster with streaming replication using pgpool-II.  Streaming replication copies data from a primary node to a secondary node. Pgpool-II supports Postgres streaming replication, while pgbouncer does not. It is the best way to achieve high availability and prevent data loss.
28-1	12210-12219	Streaming	
28-2	12220-12231	Replication	
28-3	12232-12237	Apart	
28-4	12238-12242	from	
28-5	12243-12250	pooling	
28-6	12251-12262	connections	
28-7	12262-12263	,	
28-8	12264-12267	you	
28-9	12268-12271	can	
28-10	12272-12276	also	
28-11	12277-12283	manage	
28-12	12284-12288	your	
28-13	12289-12297	Postgres	
28-14	12298-12305	cluster	
28-15	12306-12310	with	
28-16	12311-12320	streaming	
28-17	12321-12332	replication	
28-18	12333-12338	using	
28-19	12339-12348	pgpool-II	
28-20	12348-12349	.	
28-21	12349-12350	 	
28-22	12351-12360	Streaming	
28-23	12361-12372	replication	
28-24	12373-12379	copies	
28-25	12380-12384	data	
28-26	12385-12389	from	
28-27	12390-12391	a	
28-28	12392-12399	primary	
28-29	12400-12404	node	
28-30	12405-12407	to	
28-31	12408-12409	a	
28-32	12410-12419	secondary	
28-33	12420-12424	node	
28-34	12424-12425	.	
28-35	12426-12435	Pgpool-II	
28-36	12436-12444	supports	
28-37	12445-12453	Postgres	
28-38	12454-12463	streaming	
28-39	12464-12475	replication	
28-40	12475-12476	,	
28-41	12477-12482	while	
28-42	12483-12492	pgbouncer	
28-43	12493-12497	does	
28-44	12498-12501	not	
28-45	12501-12502	.	
28-46	12503-12505	It	
28-47	12506-12508	is	
28-48	12509-12512	the	
28-49	12513-12517	best	
28-50	12518-12521	way	
28-51	12522-12524	to	
28-52	12525-12532	achieve	
28-53	12533-12537	high	
28-54	12538-12550	availability	
28-55	12551-12554	and	
28-56	12555-12562	prevent	
28-57	12563-12567	data	
28-58	12568-12572	loss	
28-59	12572-12573	.	

#Text=Centralized password management In a production environment where you expect many clients/applications to connect to the database through a connection pooler concurrently, it is necessary to use a centralized password management system to manage clients’ credentials.
29-1	12574-12585	Centralized	
29-2	12586-12594	password	
29-3	12595-12605	management	
29-4	12606-12608	In	
29-5	12609-12610	a	
29-6	12611-12621	production	
29-7	12622-12633	environment	
29-8	12634-12639	where	
29-9	12640-12643	you	
29-10	12644-12650	expect	
29-11	12651-12655	many	
29-12	12656-12663	clients	
29-13	12663-12664	/	
29-14	12664-12676	applications	
29-15	12677-12679	to	
29-16	12680-12687	connect	
29-17	12688-12690	to	
29-18	12691-12694	the	
29-19	12695-12703	database	
29-20	12704-12711	through	
29-21	12712-12713	a	
29-22	12714-12724	connection	
29-23	12725-12731	pooler	
29-24	12732-12744	concurrently	
29-25	12744-12745	,	
29-26	12746-12748	it	
29-27	12749-12751	is	
29-28	12752-12761	necessary	
29-29	12762-12764	to	
29-30	12765-12768	use	
29-31	12769-12770	a	
29-32	12771-12782	centralized	
29-33	12783-12791	password	
29-34	12792-12802	management	
29-35	12803-12809	system	
29-36	12810-12812	to	
29-37	12813-12819	manage	
29-38	12820-12827	clients	
29-39	12827-12828	’	
29-40	12829-12840	credentials	
29-41	12840-12841	.	

#Text=You can make use of auth_query in pgbouncer to load clients’ credentials from the database instead of storing clients’ credentials in a userlist.txt file and comparing credentials from the connection string against the userlist.txt file. Load balancing and high availability Finally, if you want to add load balancing and high availability to your pooled connections, then pgpool2 is the right tool to use. pgpool2 supports Postgres high availability through the in-built watchdog processes. This pgpool2 sub-process monitors the health of pgpool2 nodes participating in the watchdog cluster as well as coordinating between multiple pgpool2 nodes.
30-1	12842-12845	You	
30-2	12846-12849	can	
30-3	12850-12854	make	
30-4	12855-12858	use	
30-5	12859-12861	of	
30-6	12862-12872	auth_query	
30-7	12873-12875	in	
30-8	12876-12885	pgbouncer	
30-9	12886-12888	to	
30-10	12889-12893	load	
30-11	12894-12901	clients	
30-12	12901-12902	’	
30-13	12903-12914	credentials	
30-14	12915-12919	from	
30-15	12920-12923	the	
30-16	12924-12932	database	
30-17	12933-12940	instead	
30-18	12941-12943	of	
30-19	12944-12951	storing	
30-20	12952-12959	clients	
30-21	12959-12960	’	
30-22	12961-12972	credentials	
30-23	12973-12975	in	
30-24	12976-12977	a	
30-25	12978-12990	userlist.txt	
30-26	12991-12995	file	
30-27	12996-12999	and	
30-28	13000-13009	comparing	
30-29	13010-13021	credentials	
30-30	13022-13026	from	
30-31	13027-13030	the	
30-32	13031-13041	connection	
30-33	13042-13048	string	
30-34	13049-13056	against	
30-35	13057-13060	the	
30-36	13061-13073	userlist.txt	
30-37	13074-13078	file	
30-38	13078-13079	.	
30-39	13080-13084	Load	
30-40	13085-13094	balancing	
30-41	13095-13098	and	
30-42	13099-13103	high	
30-43	13104-13116	availability	
30-44	13117-13124	Finally	
30-45	13124-13125	,	
30-46	13126-13128	if	
30-47	13129-13132	you	
30-48	13133-13137	want	
30-49	13138-13140	to	
30-50	13141-13144	add	
30-51	13145-13149	load	
30-52	13150-13159	balancing	
30-53	13160-13163	and	
30-54	13164-13168	high	
30-55	13169-13181	availability	
30-56	13182-13184	to	
30-57	13185-13189	your	
30-58	13190-13196	pooled	
30-59	13197-13208	connections	
30-60	13208-13209	,	
30-61	13210-13214	then	
30-62	13215-13222	pgpool2	
30-63	13223-13225	is	
30-64	13226-13229	the	
30-65	13230-13235	right	
30-66	13236-13240	tool	
30-67	13241-13243	to	
30-68	13244-13247	use	
30-69	13247-13248	.	
30-70	13249-13256	pgpool2	
30-71	13257-13265	supports	
30-72	13266-13274	Postgres	
30-73	13275-13279	high	
30-74	13280-13292	availability	
30-75	13293-13300	through	
30-76	13301-13304	the	
30-77	13305-13313	in-built	
30-78	13314-13322	watchdog	
30-79	13323-13332	processes	
30-80	13332-13333	.	
30-81	13334-13338	This	
30-82	13339-13346	pgpool2	
30-83	13347-13358	sub-process	
30-84	13359-13367	monitors	
30-85	13368-13371	the	
30-86	13372-13378	health	
30-87	13379-13381	of	
30-88	13382-13389	pgpool2	
30-89	13390-13395	nodes	
30-90	13396-13409	participating	
30-91	13410-13412	in	
30-92	13413-13416	the	
30-93	13417-13425	watchdog	
30-94	13426-13433	cluster	
30-95	13434-13436	as	
30-96	13437-13441	well	
30-97	13442-13444	as	
30-98	13445-13457	coordinating	
30-99	13458-13465	between	
30-100	13466-13474	multiple	
30-101	13475-13482	pgpool2	
30-102	13483-13488	nodes	
30-103	13488-13489	.	

#Text=Conclusion Database performance can be improved beyond connection pooling. Replication, load balancing, and in-memory caching can contribute to efficient database performance.
31-1	13490-13500	Conclusion	
31-2	13501-13509	Database	
31-3	13510-13521	performance	
31-4	13522-13525	can	
31-5	13526-13528	be	
31-6	13529-13537	improved	
31-7	13538-13544	beyond	
31-8	13545-13555	connection	
31-9	13556-13563	pooling	
31-10	13563-13564	.	
31-11	13565-13576	Replication	
31-12	13576-13577	,	
31-13	13578-13582	load	
31-14	13583-13592	balancing	
31-15	13592-13593	,	
31-16	13594-13597	and	
31-17	13598-13607	in-memory	
31-18	13608-13615	caching	
31-19	13616-13619	can	
31-20	13620-13630	contribute	
31-21	13631-13633	to	
31-22	13634-13643	efficient	
31-23	13644-13652	database	
31-24	13653-13664	performance	
31-25	13664-13665	.	

#Text=If a web service is designed to make a lot of read and write queries to a database, then you have multiple instances of a Postgres database in place to take care of write queries from clients through a load balancer such as pgpool-II while in-memory caching can be used to optimize read queries. Despite the pgpool-II ability to function as a loader balancer and connection pooler, pgbouncer is the preferred middleware solution for connection pooling because it is easy to set up, not too difficult to manage, and primarily serves as a connection pooler without any other functions.
32-1	13666-13668	If	
32-2	13669-13670	a	
32-3	13671-13674	web	
32-4	13675-13682	service	
32-5	13683-13685	is	
32-6	13686-13694	designed	
32-7	13695-13697	to	
32-8	13698-13702	make	
32-9	13703-13704	a	
32-10	13705-13708	lot	
32-11	13709-13711	of	
32-12	13712-13716	read	
32-13	13717-13720	and	
32-14	13721-13726	write	
32-15	13727-13734	queries	
32-16	13735-13737	to	
32-17	13738-13739	a	
32-18	13740-13748	database	
32-19	13748-13749	,	
32-20	13750-13754	then	
32-21	13755-13758	you	
32-22	13759-13763	have	
32-23	13764-13772	multiple	
32-24	13773-13782	instances	
32-25	13783-13785	of	
32-26	13786-13787	a	
32-27	13788-13796	Postgres	
32-28	13797-13805	database	
32-29	13806-13808	in	
32-30	13809-13814	place	
32-31	13815-13817	to	
32-32	13818-13822	take	
32-33	13823-13827	care	
32-34	13828-13830	of	
32-35	13831-13836	write	
32-36	13837-13844	queries	
32-37	13845-13849	from	
32-38	13850-13857	clients	
32-39	13858-13865	through	
32-40	13866-13867	a	
32-41	13868-13872	load	
32-42	13873-13881	balancer	
32-43	13882-13886	such	
32-44	13887-13889	as	
32-45	13890-13899	pgpool-II	
32-46	13900-13905	while	
32-47	13906-13915	in-memory	
32-48	13916-13923	caching	
32-49	13924-13927	can	
32-50	13928-13930	be	
32-51	13931-13935	used	
32-52	13936-13938	to	
32-53	13939-13947	optimize	
32-54	13948-13952	read	
32-55	13953-13960	queries	
32-56	13960-13961	.	
32-57	13962-13969	Despite	
32-58	13970-13973	the	
32-59	13974-13983	pgpool-II	
32-60	13984-13991	ability	
32-61	13992-13994	to	
32-62	13995-14003	function	
32-63	14004-14006	as	
32-64	14007-14008	a	
32-65	14009-14015	loader	
32-66	14016-14024	balancer	
32-67	14025-14028	and	
32-68	14029-14039	connection	
32-69	14040-14046	pooler	
32-70	14046-14047	,	
32-71	14048-14057	pgbouncer	
32-72	14058-14060	is	
32-73	14061-14064	the	
32-74	14065-14074	preferred	
32-75	14075-14085	middleware	
32-76	14086-14094	solution	
32-77	14095-14098	for	
32-78	14099-14109	connection	
32-79	14110-14117	pooling	
32-80	14118-14125	because	
32-81	14126-14128	it	
32-82	14129-14131	is	
32-83	14132-14136	easy	
32-84	14137-14139	to	
32-85	14140-14143	set	
32-86	14144-14146	up	
32-87	14146-14147	,	
32-88	14148-14151	not	
32-89	14152-14155	too	
32-90	14156-14165	difficult	
32-91	14166-14168	to	
32-92	14169-14175	manage	
32-93	14175-14176	,	
32-94	14177-14180	and	
32-95	14181-14190	primarily	
32-96	14191-14197	serves	
32-97	14198-14200	as	
32-98	14201-14202	a	
32-99	14203-14213	connection	
32-100	14214-14220	pooler	
32-101	14221-14228	without	
32-102	14229-14232	any	
32-103	14233-14238	other	
32-104	14239-14248	functions	
32-105	14248-14249	.	

#Text=Tags: connection pooling, databases, pgbouncer, postgreSQL The Stack Overflow Podcast is a weekly conversation about working in software development, learning to code, and the art and culture of computer programming. Related newsletter October 23, 2020 The Overflow #44: Machine learning in production
33-1	14250-14254	Tags	
33-2	14254-14255	:	
33-3	14256-14266	connection	
33-4	14267-14274	pooling	
33-5	14274-14275	,	
33-6	14276-14285	databases	
33-7	14285-14286	,	
33-8	14287-14296	pgbouncer	
33-9	14296-14297	,	
33-10	14298-14308	postgreSQL	
33-11	14309-14312	The	
33-12	14313-14318	Stack	
33-13	14319-14327	Overflow	
33-14	14328-14335	Podcast	
33-15	14336-14338	is	
33-16	14339-14340	a	
33-17	14341-14347	weekly	
33-18	14348-14360	conversation	
33-19	14361-14366	about	
33-20	14367-14374	working	
33-21	14375-14377	in	
33-22	14378-14386	software	
33-23	14387-14398	development	
33-24	14398-14399	,	
33-25	14400-14408	learning	
33-26	14409-14411	to	
33-27	14412-14416	code	
33-28	14416-14417	,	
33-29	14418-14421	and	
33-30	14422-14425	the	
33-31	14426-14429	art	
33-32	14430-14433	and	
33-33	14434-14441	culture	
33-34	14442-14444	of	
33-35	14445-14453	computer	
33-36	14454-14465	programming	
33-37	14465-14466	.	
33-38	14467-14474	Related	
33-39	14475-14485	newsletter	
33-40	14486-14493	October	
33-41	14494-14496	23	
33-42	14496-14497	,	
33-43	14498-14502	2020	
33-44	14503-14506	The	
33-45	14507-14515	Overflow	
33-46	14516-14519	#44	
33-47	14519-14520	:	
33-48	14521-14528	Machine	
33-49	14529-14537	learning	
33-50	14538-14540	in	
33-51	14541-14551	production	

#Text=Welcome to ISSUE #44 of the Overflow! This newsletter is by developers, for developers, written and curated by the Stack Overflow team and Cassidy Williams at Netlify. This week, get in the fast lane and start pooling your database connections, make a CPU out of electronic components drawn by hand on paper, and learn to toggle multiple property… Medi Madelen Gwosdz Content Strategist code-for-a-living January 14, 2021 Have the tables turned on NoSQL?
34-1	14552-14559	Welcome	
34-2	14560-14562	to	
34-3	14563-14568	ISSUE	
34-4	14569-14572	#44	
34-5	14573-14575	of	
34-6	14576-14579	the	
34-7	14580-14588	Overflow	
34-8	14588-14589	!	
34-9	14590-14594	This	
34-10	14595-14605	newsletter	
34-11	14606-14608	is	
34-12	14609-14611	by	
34-13	14612-14622	developers	
34-14	14622-14623	,	
34-15	14624-14627	for	
34-16	14628-14638	developers	
34-17	14638-14639	,	
34-18	14640-14647	written	
34-19	14648-14651	and	
34-20	14652-14659	curated	
34-21	14660-14662	by	
34-22	14663-14666	the	
34-23	14667-14672	Stack	
34-24	14673-14681	Overflow	
34-25	14682-14686	team	
34-26	14687-14690	and	
34-27	14690-14691	 	
34-28	14691-14698	Cassidy	
34-29	14699-14707	Williams	
34-30	14707-14708	 	
34-31	14708-14710	at	
34-32	14710-14711	 	
34-33	14711-14718	Netlify	
34-34	14718-14719	.	
34-35	14720-14724	This	
34-36	14725-14729	week	
34-37	14729-14730	,	
34-38	14731-14734	get	
34-39	14735-14737	in	
34-40	14738-14741	the	
34-41	14742-14746	fast	
34-42	14747-14751	lane	
34-43	14752-14755	and	
34-44	14756-14761	start	
34-45	14762-14769	pooling	
34-46	14770-14774	your	
34-47	14775-14783	database	
34-48	14784-14795	connections	
34-49	14795-14796	,	
34-50	14797-14801	make	
34-51	14802-14803	a	
34-52	14804-14807	CPU	
34-53	14808-14811	out	
34-54	14812-14814	of	
34-55	14815-14825	electronic	
34-56	14826-14836	components	
34-57	14837-14842	drawn	
34-58	14843-14845	by	
34-59	14846-14850	hand	
34-60	14851-14853	on	
34-61	14854-14859	paper	
34-62	14859-14860	,	
34-63	14861-14864	and	
34-64	14865-14870	learn	
34-65	14871-14873	to	
34-66	14874-14880	toggle	
34-67	14881-14889	multiple	
34-68	14890-14898	property	
34-69	14898-14899	…	
34-70	14900-14904	Medi	
34-71	14905-14912	Madelen	
34-72	14913-14919	Gwosdz	
34-73	14920-14927	Content	
34-74	14928-14938	Strategist	
34-75	14939-14956	code-for-a-living	
34-76	14957-14964	January	
34-77	14965-14967	14	
34-78	14967-14968	,	
34-79	14969-14973	2021	
34-80	14974-14978	Have	
34-81	14979-14982	the	
34-82	14983-14989	tables	
34-83	14990-14996	turned	
34-84	14997-14999	on	
34-85	15000-15005	NoSQL	
34-86	15005-15006	?	

#Text=NoSQL was the next big thing in system architecture in 2011, but overall interest in it has plateaued recently. What is NoSQL, what does it have to do with modern development, and is it worth implementing in your project? John Biggs and Ryan Donovan code-for-a-living March 3, 2021 Best practices can slow your application down In order to get the most performant site possible when building the codebase for our public Stack Overflow site, we didn’t always follow best practices.
35-1	15007-15012	NoSQL	
35-2	15013-15016	was	
35-3	15017-15020	the	
35-4	15021-15025	next	
35-5	15026-15029	big	
35-6	15030-15035	thing	
35-7	15036-15038	in	
35-8	15039-15045	system	
35-9	15046-15058	architecture	
35-10	15059-15061	in	
35-11	15062-15066	2011	
35-12	15066-15067	,	
35-13	15068-15071	but	
35-14	15072-15079	overall	
35-15	15080-15088	interest	
35-16	15089-15091	in	
35-17	15092-15094	it	
35-18	15095-15098	has	
35-19	15099-15108	plateaued	
35-20	15109-15117	recently	
35-21	15117-15118	.	
35-22	15119-15123	What	
35-23	15124-15126	is	
35-24	15127-15132	NoSQL	
35-25	15132-15133	,	
35-26	15134-15138	what	
35-27	15139-15143	does	
35-28	15144-15146	it	
35-29	15147-15151	have	
35-30	15152-15154	to	
35-31	15155-15157	do	
35-32	15158-15162	with	
35-33	15163-15169	modern	
35-34	15170-15181	development	
35-35	15181-15182	,	
35-36	15183-15186	and	
35-37	15187-15189	is	
35-38	15190-15192	it	
35-39	15193-15198	worth	
35-40	15199-15211	implementing	
35-41	15212-15214	in	
35-42	15215-15219	your	
35-43	15220-15227	project	
35-44	15227-15228	?	
35-45	15229-15233	John	
35-46	15234-15239	Biggs	
35-47	15240-15243	and	
35-48	15244-15248	Ryan	
35-49	15249-15256	Donovan	
35-50	15257-15274	code-for-a-living	
35-51	15275-15280	March	
35-52	15281-15282	3	
35-53	15282-15283	,	
35-54	15284-15288	2021	
35-55	15289-15293	Best	
35-56	15294-15303	practices	
35-57	15304-15307	can	
35-58	15308-15312	slow	
35-59	15313-15317	your	
35-60	15318-15329	application	
35-61	15330-15334	down	
35-62	15335-15337	In	
35-63	15338-15343	order	
35-64	15344-15346	to	
35-65	15347-15350	get	
35-66	15351-15354	the	
35-67	15355-15359	most	
35-68	15360-15370	performant	
35-69	15371-15375	site	
35-70	15376-15384	possible	
35-71	15385-15389	when	
35-72	15390-15398	building	
35-73	15399-15402	the	
35-74	15403-15411	codebase	
35-75	15412-15415	for	
35-76	15416-15419	our	
35-77	15420-15426	public	
35-78	15427-15432	Stack	
35-79	15433-15441	Overflow	
35-80	15442-15446	site	
35-81	15446-15447	,	
35-82	15448-15450	we	
35-83	15451-15455	didn	
35-84	15455-15456	’	
35-85	15456-15457	t	
35-86	15458-15464	always	
35-87	15465-15471	follow	
35-88	15472-15476	best	
35-89	15477-15486	practices	
35-90	15486-15487	.	

#Text=Roberta Arcoverde and Ryan Donovan code-for-a-living February 24, 2021 What I wish I had known about single page applications Single page apps are all the rage today, but they don't always operate the same as traditional web pages. Michael Pratt 11 Comments
36-1	15488-15495	Roberta	
36-2	15496-15505	Arcoverde	
36-3	15506-15509	and	
36-4	15510-15514	Ryan	
36-5	15515-15522	Donovan	
36-6	15523-15540	code-for-a-living	
36-7	15541-15549	February	
36-8	15550-15552	24	
36-9	15552-15553	,	
36-10	15554-15558	2021	
36-11	15559-15563	What	
36-12	15564-15565	I	
36-13	15566-15570	wish	
36-14	15571-15572	I	
36-15	15573-15576	had	
36-16	15577-15582	known	
36-17	15583-15588	about	
36-18	15589-15595	single	
36-19	15596-15600	page	
36-20	15601-15613	applications	
36-21	15614-15620	Single	
36-22	15621-15625	page	
36-23	15626-15630	apps	
36-24	15631-15634	are	
36-25	15635-15638	all	
36-26	15639-15642	the	
36-27	15643-15647	rage	
36-28	15648-15653	today	
36-29	15653-15654	,	
36-30	15655-15658	but	
36-31	15659-15663	they	
36-32	15664-15669	don't	
36-33	15670-15676	always	
36-34	15677-15684	operate	
36-35	15685-15688	the	
36-36	15689-15693	same	
36-37	15694-15696	as	
36-38	15697-15708	traditional	
36-39	15709-15712	web	
36-40	15713-15718	pages	
36-41	15718-15719	.	
36-42	15720-15727	Michael	
36-43	15728-15733	Pratt	
36-44	15734-15736	11	
36-45	15737-15745	Comments	

#Text=Iwouldliketonotprovidemyname says: 14 Oct 20 at 11:20 As you see, transaction throughput increased from 486 transactions per second to 566 transactions per second. With the help of pgbouncer, transaction throughput improved by approximately 60%.
37-1	15746-15774	Iwouldliketonotprovidemyname	
37-2	15775-15779	says	
37-3	15779-15780	:	
37-4	15781-15783	14	
37-5	15784-15787	Oct	
37-6	15788-15790	20	
37-7	15791-15793	at	
37-8	15794-15796	11	
37-9	15796-15797	:	
37-10	15797-15799	20	
37-11	15800-15802	As	
37-12	15803-15806	you	
37-13	15807-15810	see	
37-14	15810-15811	,	
37-15	15812-15823	transaction	
37-16	15824-15834	throughput	
37-17	15835-15844	increased	
37-18	15845-15849	from	
37-19	15850-15853	486	
37-20	15854-15866	transactions	
37-21	15867-15870	per	
37-22	15871-15877	second	
37-23	15878-15880	to	
37-24	15881-15884	566	
37-25	15885-15897	transactions	
37-26	15898-15901	per	
37-27	15902-15908	second	
37-28	15908-15909	.	
37-29	15910-15914	With	
37-30	15915-15918	the	
37-31	15919-15923	help	
37-32	15924-15926	of	
37-33	15927-15936	pgbouncer	
37-34	15936-15937	,	
37-35	15938-15949	transaction	
37-36	15950-15960	throughput	
37-37	15961-15969	improved	
37-38	15970-15972	by	
37-39	15973-15986	approximately	
37-40	15987-15990	60%	
37-41	15990-15991	.	

#Text=That 60% is a bit huge. The increase of 80 TPS is more like 16% of the initial 486 TPS. The 75% increase for pgpool-II is also a bit large. Reply Tien Do says: 21 Oct 20 at 6:35 Yeah, how is it 60% and 75%? Reply CanadianLuke says: 22 Oct 20 at 6:55 A week with no reply to simple math… Not looking good…
38-1	15992-15996	That	
38-2	15997-16000	60%	
38-3	16001-16003	is	
38-4	16004-16005	a	
38-5	16006-16009	bit	
38-6	16010-16014	huge	
38-7	16014-16015	.	
38-8	16016-16019	The	
38-9	16020-16028	increase	
38-10	16029-16031	of	
38-11	16032-16034	80	
38-12	16035-16038	TPS	
38-13	16039-16041	is	
38-14	16042-16046	more	
38-15	16047-16051	like	
38-16	16052-16055	16%	
38-17	16056-16058	of	
38-18	16059-16062	the	
38-19	16063-16070	initial	
38-20	16071-16074	486	
38-21	16075-16078	TPS	
38-22	16078-16079	.	
38-23	16080-16083	The	
38-24	16084-16087	75%	
38-25	16088-16096	increase	
38-26	16097-16100	for	
38-27	16101-16110	pgpool-II	
38-28	16111-16113	is	
38-29	16114-16118	also	
38-30	16119-16120	a	
38-31	16121-16124	bit	
38-32	16125-16130	large	
38-33	16130-16131	.	
38-34	16132-16137	Reply	
38-35	16138-16142	Tien	
38-36	16143-16145	Do	
38-37	16146-16150	says	
38-38	16150-16151	:	
38-39	16152-16154	21	
38-40	16155-16158	Oct	
38-41	16159-16161	20	
38-42	16162-16164	at	
38-43	16165-16166	6	
38-44	16166-16167	:	
38-45	16167-16169	35	
38-46	16170-16174	Yeah	
38-47	16174-16175	,	
38-48	16176-16179	how	
38-49	16180-16182	is	
38-50	16183-16185	it	
38-51	16186-16189	60%	
38-52	16190-16193	and	
38-53	16194-16197	75%	
38-54	16197-16198	?	
38-55	16199-16204	Reply	
38-56	16205-16217	CanadianLuke	
38-57	16218-16222	says	
38-58	16222-16223	:	
38-59	16224-16226	22	
38-60	16227-16230	Oct	
38-61	16231-16233	20	
38-62	16234-16236	at	
38-63	16237-16238	6	
38-64	16238-16239	:	
38-65	16239-16241	55	
38-66	16242-16243	A	
38-67	16244-16248	week	
38-68	16249-16253	with	
38-69	16254-16256	no	
38-70	16257-16262	reply	
38-71	16263-16265	to	
38-72	16266-16272	simple	
38-73	16273-16277	math	
38-74	16277-16278	…	
38-75	16279-16282	Not	
38-76	16283-16290	looking	
38-77	16291-16295	good	
38-78	16295-16296	…	

#Text=Reply Travis says: 14 Oct 20 at 3:49
39-1	16297-16302	Reply	
39-2	16303-16309	Travis	
39-3	16310-16314	says	
39-4	16314-16315	:	
39-5	16316-16318	14	
39-6	16319-16322	Oct	
39-7	16323-16325	20	
39-8	16326-16328	at	
39-9	16329-16330	3	
39-10	16330-16331	:	
39-11	16331-16333	49	

#Text=It is certainly an interesting technique, although there are a whole host of unintended consequences associated with this approach that would be well to mention. Pooling transactions to memory prior to pushing them to the database has very serious implications with regards to data integrity, as one main example. This approach also will require a very large amount of server memory to be used; in instances where memory is shared across multiple nodes, this can be problematic if there is a node failure. So, while it may be the case that more transactions per second occur, the risk seems to outweigh any gains. Reply Michael Aboagye says: 19 Oct 20 at 7:23 @Travis, please I referred to pooling connection in this article. But do you know pgpool supports postgres stream replication? In addition, the presence of transaction log ensures data integrity is maintained.
40-1	16334-16336	It	
40-2	16337-16339	is	
40-3	16340-16349	certainly	
40-4	16350-16352	an	
40-5	16353-16364	interesting	
40-6	16365-16374	technique	
40-7	16374-16375	,	
40-8	16376-16384	although	
40-9	16385-16390	there	
40-10	16391-16394	are	
40-11	16395-16396	a	
40-12	16397-16402	whole	
40-13	16403-16407	host	
40-14	16408-16410	of	
40-15	16411-16421	unintended	
40-16	16422-16434	consequences	
40-17	16435-16445	associated	
40-18	16446-16450	with	
40-19	16451-16455	this	
40-20	16456-16464	approach	
40-21	16465-16469	that	
40-22	16470-16475	would	
40-23	16476-16478	be	
40-24	16479-16483	well	
40-25	16484-16486	to	
40-26	16487-16494	mention	
40-27	16494-16495	.	
40-28	16496-16503	Pooling	
40-29	16504-16516	transactions	
40-30	16517-16519	to	
40-31	16520-16526	memory	
40-32	16527-16532	prior	
40-33	16533-16535	to	
40-34	16536-16543	pushing	
40-35	16544-16548	them	
40-36	16549-16551	to	
40-37	16552-16555	the	
40-38	16556-16564	database	
40-39	16565-16568	has	
40-40	16569-16573	very	
40-41	16574-16581	serious	
40-42	16582-16594	implications	
40-43	16595-16599	with	
40-44	16600-16607	regards	
40-45	16608-16610	to	
40-46	16611-16615	data	
40-47	16616-16625	integrity	
40-48	16625-16626	,	
40-49	16627-16629	as	
40-50	16630-16633	one	
40-51	16634-16638	main	
40-52	16639-16646	example	
40-53	16646-16647	.	
40-54	16648-16652	This	
40-55	16653-16661	approach	
40-56	16662-16666	also	
40-57	16667-16671	will	
40-58	16672-16679	require	
40-59	16680-16681	a	
40-60	16682-16686	very	
40-61	16687-16692	large	
40-62	16693-16699	amount	
40-63	16700-16702	of	
40-64	16703-16709	server	
40-65	16710-16716	memory	
40-66	16717-16719	to	
40-67	16720-16722	be	
40-68	16723-16727	used	
40-69	16727-16728	;	
40-70	16729-16731	in	
40-71	16732-16741	instances	
40-72	16742-16747	where	
40-73	16748-16754	memory	
40-74	16755-16757	is	
40-75	16758-16764	shared	
40-76	16765-16771	across	
40-77	16772-16780	multiple	
40-78	16781-16786	nodes	
40-79	16786-16787	,	
40-80	16788-16792	this	
40-81	16793-16796	can	
40-82	16797-16799	be	
40-83	16800-16811	problematic	
40-84	16812-16814	if	
40-85	16815-16820	there	
40-86	16821-16823	is	
40-87	16824-16825	a	
40-88	16826-16830	node	
40-89	16831-16838	failure	
40-90	16838-16839	.	
40-91	16840-16842	So	
40-92	16842-16843	,	
40-93	16844-16849	while	
40-94	16850-16852	it	
40-95	16853-16856	may	
40-96	16857-16859	be	
40-97	16860-16863	the	
40-98	16864-16868	case	
40-99	16869-16873	that	
40-100	16874-16878	more	
40-101	16879-16891	transactions	
40-102	16892-16895	per	
40-103	16896-16902	second	
40-104	16903-16908	occur	
40-105	16908-16909	,	
40-106	16910-16913	the	
40-107	16914-16918	risk	
40-108	16919-16924	seems	
40-109	16925-16927	to	
40-110	16928-16936	outweigh	
40-111	16937-16940	any	
40-112	16941-16946	gains	
40-113	16946-16947	.	
40-114	16948-16953	Reply	
40-115	16954-16961	Michael	
40-116	16962-16969	Aboagye	
40-117	16970-16974	says	
40-118	16974-16975	:	
40-119	16976-16978	19	
40-120	16979-16982	Oct	
40-121	16983-16985	20	
40-122	16986-16988	at	
40-123	16989-16990	7	
40-124	16990-16991	:	
40-125	16991-16993	23	
40-126	16994-16995	@	
40-127	16995-17001	Travis	
40-128	17001-17002	,	
40-129	17003-17009	please	
40-130	17010-17011	I	
40-131	17012-17020	referred	
40-132	17021-17023	to	
40-133	17024-17031	pooling	
40-134	17032-17042	connection	
40-135	17043-17045	in	
40-136	17046-17050	this	
40-137	17051-17058	article	
40-138	17058-17059	.	
40-139	17060-17063	But	
40-140	17064-17066	do	
40-141	17067-17070	you	
40-142	17071-17075	know	
40-143	17076-17082	pgpool	
40-144	17083-17091	supports	
40-145	17092-17100	postgres	
40-146	17101-17107	stream	
40-147	17108-17119	replication	
40-148	17119-17120	?	
40-149	17121-17123	In	
40-150	17124-17132	addition	
40-151	17132-17133	,	
40-152	17134-17137	the	
40-153	17138-17146	presence	
40-154	17147-17149	of	
40-155	17150-17161	transaction	
40-156	17162-17165	log	
40-157	17166-17173	ensures	
40-158	17174-17178	data	
40-159	17179-17188	integrity	
40-160	17189-17191	is	
40-161	17192-17202	maintained	
40-162	17202-17203	.	

#Text=Even without in the absence of pgpool cluster, postgres supports replication concepts such as synchronous and asynchronous replication to prevent data loss. Reply Galletto says: 22 Oct 20 at 9:54
41-1	17204-17208	Even	
41-2	17209-17216	without	
41-3	17217-17219	in	
41-4	17220-17223	the	
41-5	17224-17231	absence	
41-6	17232-17234	of	
41-7	17235-17241	pgpool	
41-8	17242-17249	cluster	
41-9	17249-17250	,	
41-10	17251-17259	postgres	
41-11	17260-17268	supports	
41-12	17269-17280	replication	
41-13	17281-17289	concepts	
41-14	17290-17294	such	
41-15	17295-17297	as	
41-16	17298-17309	synchronous	
41-17	17310-17313	and	
41-18	17314-17326	asynchronous	
41-19	17327-17338	replication	
41-20	17339-17341	to	
41-21	17342-17349	prevent	
41-22	17350-17354	data	
41-23	17355-17359	loss	
41-24	17359-17360	.	
41-25	17361-17366	Reply	
41-26	17367-17375	Galletto	
41-27	17376-17380	says	
41-28	17380-17381	:	
41-29	17382-17384	22	
41-30	17385-17388	Oct	
41-31	17389-17391	20	
41-32	17392-17394	at	
41-33	17395-17396	9	
41-34	17396-17397	:	
41-35	17397-17399	54	

#Text=Maybe I’m missing something entirely, but I thought connection pooling has been the default in .NET for many years… Correct? Reply Nilesh says: 16 Oct 20 at 11:19 @Travis — The article talks about pooling connections but mentions no such thing as pooling transactions in memory .
42-1	17400-17405	Maybe	
42-2	17406-17407	I	
42-3	17407-17408	’	
42-4	17408-17409	m	
42-5	17410-17417	missing	
42-6	17418-17427	something	
42-7	17428-17436	entirely	
42-8	17436-17437	,	
42-9	17438-17441	but	
42-10	17442-17443	I	
42-11	17444-17451	thought	
42-12	17452-17462	connection	
42-13	17463-17470	pooling	
42-14	17471-17474	has	
42-15	17475-17479	been	
42-16	17480-17483	the	
42-17	17484-17491	default	
42-18	17492-17494	in	
42-19	17495-17496	.	
42-20	17496-17499	NET	
42-21	17500-17503	for	
42-22	17504-17508	many	
42-23	17509-17514	years	
42-24	17514-17515	…	
42-25	17516-17523	Correct	
42-26	17523-17524	?	
42-27	17525-17530	Reply	
42-28	17531-17537	Nilesh	
42-29	17538-17542	says	
42-30	17542-17543	:	
42-31	17544-17546	16	
42-32	17547-17550	Oct	
42-33	17551-17553	20	
42-34	17554-17556	at	
42-35	17557-17559	11	
42-36	17559-17560	:	
42-37	17560-17562	19	
42-38	17563-17564	@	
42-39	17564-17570	Travis	
42-40	17571-17572	—	
42-41	17573-17576	The	
42-42	17577-17584	article	
42-43	17585-17590	talks	
42-44	17591-17596	about	
42-45	17597-17604	pooling	
42-46	17605-17616	connections	
42-47	17617-17620	but	
42-48	17621-17629	mentions	
42-49	17630-17632	no	
42-50	17633-17637	such	
42-51	17638-17643	thing	
42-52	17644-17646	as	
42-53	17647-17654	pooling	
42-54	17655-17667	transactions	
42-55	17668-17670	in	
42-56	17671-17677	memory	
42-57	17678-17679	.	

#Text=I understand the static memory footprint that postgres has on the server would increase but I can’t see how this would lead to data integrity issues. Am I missing anything ? Reply Michael Aboagye says: 19 Oct 20 at 7:24 Thanks for your comments, Nilesh. Reply Jeff Dafoe says: 22 Oct 20 at 5:21
43-1	17680-17681	I	
43-2	17682-17692	understand	
43-3	17693-17696	the	
43-4	17697-17703	static	
43-5	17704-17710	memory	
43-6	17711-17720	footprint	
43-7	17721-17725	that	
43-8	17726-17734	postgres	
43-9	17735-17738	has	
43-10	17739-17741	on	
43-11	17742-17745	the	
43-12	17746-17752	server	
43-13	17753-17758	would	
43-14	17759-17767	increase	
43-15	17768-17771	but	
43-16	17772-17773	I	
43-17	17774-17777	can	
43-18	17777-17778	’	
43-19	17778-17779	t	
43-20	17780-17783	see	
43-21	17784-17787	how	
43-22	17788-17792	this	
43-23	17793-17798	would	
43-24	17799-17803	lead	
43-25	17804-17806	to	
43-26	17807-17811	data	
43-27	17812-17821	integrity	
43-28	17822-17828	issues	
43-29	17828-17829	.	
43-30	17830-17832	Am	
43-31	17833-17834	I	
43-32	17835-17842	missing	
43-33	17843-17851	anything	
43-34	17852-17853	?	
43-35	17854-17859	Reply	
43-36	17860-17867	Michael	
43-37	17868-17875	Aboagye	
43-38	17876-17880	says	
43-39	17880-17881	:	
43-40	17882-17884	19	
43-41	17885-17888	Oct	
43-42	17889-17891	20	
43-43	17892-17894	at	
43-44	17895-17896	7	
43-45	17896-17897	:	
43-46	17897-17899	24	
43-47	17900-17906	Thanks	
43-48	17907-17910	for	
43-49	17911-17915	your	
43-50	17916-17924	comments	
43-51	17924-17925	,	
43-52	17926-17932	Nilesh	
43-53	17932-17933	.	
43-54	17934-17939	Reply	
43-55	17940-17944	Jeff	
43-56	17945-17950	Dafoe	
43-57	17951-17955	says	
43-58	17955-17956	:	
43-59	17957-17959	22	
43-60	17960-17963	Oct	
43-61	17964-17966	20	
43-62	17967-17969	at	
43-63	17970-17971	5	
43-64	17971-17972	:	
43-65	17972-17974	21	

#Text=One thing to be aware of with connection pooling, particularly under PG, is that a reused pool connection may not be in the same initial state as a brand new connection from the backend. Session variables persist across shared connections, data may not be cleared from temp tables, and some types of errors are not cleared until the backend is recycled. It’s important that the code that is establishing the connection be written with this in mind, it must perform initialization that would not be necessary if the backend were fresh and it should also test the connection to make sure it can actually be queried from. Reply Matthew E says: 26 Oct 20 at 3:23 right on, Nilesh and Dafoe. Others: #include Reply Emmanuel Casas says: 21 Jan 21 at 5:48
44-1	17975-17978	One	
44-2	17979-17984	thing	
44-3	17985-17987	to	
44-4	17988-17990	be	
44-5	17991-17996	aware	
44-6	17997-17999	of	
44-7	18000-18004	with	
44-8	18005-18015	connection	
44-9	18016-18023	pooling	
44-10	18023-18024	,	
44-11	18025-18037	particularly	
44-12	18038-18043	under	
44-13	18044-18046	PG	
44-14	18046-18047	,	
44-15	18048-18050	is	
44-16	18051-18055	that	
44-17	18056-18057	a	
44-18	18058-18064	reused	
44-19	18065-18069	pool	
44-20	18070-18080	connection	
44-21	18081-18084	may	
44-22	18085-18088	not	
44-23	18089-18091	be	
44-24	18092-18094	in	
44-25	18095-18098	the	
44-26	18099-18103	same	
44-27	18104-18111	initial	
44-28	18112-18117	state	
44-29	18118-18120	as	
44-30	18121-18122	a	
44-31	18123-18128	brand	
44-32	18129-18132	new	
44-33	18133-18143	connection	
44-34	18144-18148	from	
44-35	18149-18152	the	
44-36	18153-18160	backend	
44-37	18160-18161	.	
44-38	18162-18169	Session	
44-39	18170-18179	variables	
44-40	18180-18187	persist	
44-41	18188-18194	across	
44-42	18195-18201	shared	
44-43	18202-18213	connections	
44-44	18213-18214	,	
44-45	18215-18219	data	
44-46	18220-18223	may	
44-47	18224-18227	not	
44-48	18228-18230	be	
44-49	18231-18238	cleared	
44-50	18239-18243	from	
44-51	18244-18248	temp	
44-52	18249-18255	tables	
44-53	18255-18256	,	
44-54	18257-18260	and	
44-55	18261-18265	some	
44-56	18266-18271	types	
44-57	18272-18274	of	
44-58	18275-18281	errors	
44-59	18282-18285	are	
44-60	18286-18289	not	
44-61	18290-18297	cleared	
44-62	18298-18303	until	
44-63	18304-18307	the	
44-64	18308-18315	backend	
44-65	18316-18318	is	
44-66	18319-18327	recycled	
44-67	18327-18328	.	
44-68	18329-18331	It	
44-69	18331-18332	’	
44-70	18332-18333	s	
44-71	18334-18343	important	
44-72	18344-18348	that	
44-73	18349-18352	the	
44-74	18353-18357	code	
44-75	18358-18362	that	
44-76	18363-18365	is	
44-77	18366-18378	establishing	
44-78	18379-18382	the	
44-79	18383-18393	connection	
44-80	18394-18396	be	
44-81	18397-18404	written	
44-82	18405-18409	with	
44-83	18410-18414	this	
44-84	18415-18417	in	
44-85	18418-18422	mind	
44-86	18422-18423	,	
44-87	18424-18426	it	
44-88	18427-18431	must	
44-89	18432-18439	perform	
44-90	18440-18454	initialization	
44-91	18455-18459	that	
44-92	18460-18465	would	
44-93	18466-18469	not	
44-94	18470-18472	be	
44-95	18473-18482	necessary	
44-96	18483-18485	if	
44-97	18486-18489	the	
44-98	18490-18497	backend	
44-99	18498-18502	were	
44-100	18503-18508	fresh	
44-101	18509-18512	and	
44-102	18513-18515	it	
44-103	18516-18522	should	
44-104	18523-18527	also	
44-105	18528-18532	test	
44-106	18533-18536	the	
44-107	18537-18547	connection	
44-108	18548-18550	to	
44-109	18551-18555	make	
44-110	18556-18560	sure	
44-111	18561-18563	it	
44-112	18564-18567	can	
44-113	18568-18576	actually	
44-114	18577-18579	be	
44-115	18580-18587	queried	
44-116	18588-18592	from	
44-117	18592-18593	.	
44-118	18594-18599	Reply	
44-119	18600-18607	Matthew	
44-120	18608-18609	E	
44-121	18610-18614	says	
44-122	18614-18615	:	
44-123	18616-18618	26	
44-124	18619-18622	Oct	
44-125	18623-18625	20	
44-126	18626-18628	at	
44-127	18629-18630	3	
44-128	18630-18631	:	
44-129	18631-18633	23	
44-130	18634-18639	right	
44-131	18640-18642	on	
44-132	18642-18643	,	
44-133	18644-18650	Nilesh	
44-134	18651-18654	and	
44-135	18655-18660	Dafoe	
44-136	18660-18661	.	
44-137	18662-18668	Others	
44-138	18668-18669	:	
44-139	18670-18671	#	
44-140	18671-18678	include	
44-141	18679-18684	Reply	
44-142	18685-18693	Emmanuel	
44-143	18694-18699	Casas	
44-144	18700-18704	says	
44-145	18704-18705	:	
44-146	18706-18708	21	
44-147	18709-18712	Jan	
44-148	18713-18715	21	
44-149	18716-18718	at	
44-150	18719-18720	5	
44-151	18720-18721	:	
44-152	18721-18723	48	

#Text=Im concern about the fact PGBENCH is based on http://www.tpc.org/tpcb/ which is obsolete, maybe im missing something here, any thoughts about this guys ? Is there a better way to measure the TPS in postgresql ? Reply Leave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment Name * Email * Website Save my name, email, and website in this browser for the next time I comment.
45-1	18724-18726	Im	
45-2	18727-18734	concern	
45-3	18735-18740	about	
45-4	18741-18744	the	
45-5	18745-18749	fact	
45-6	18750-18757	PGBENCH	
45-7	18758-18760	is	
45-8	18761-18766	based	
45-9	18767-18769	on	
45-10	18770-18774	http	
45-11	18774-18775	:	
45-12	18775-18776	/	
45-13	18776-18777	/	
45-14	18777-18788	www.tpc.org	
45-15	18788-18789	/	
45-16	18789-18793	tpcb	
45-17	18793-18794	/	
45-18	18795-18800	which	
45-19	18801-18803	is	
45-20	18804-18812	obsolete	
45-21	18812-18813	,	
45-22	18814-18819	maybe	
45-23	18820-18822	im	
45-24	18823-18830	missing	
45-25	18831-18840	something	
45-26	18841-18845	here	
45-27	18845-18846	,	
45-28	18847-18850	any	
45-29	18851-18859	thoughts	
45-30	18860-18865	about	
45-31	18866-18870	this	
45-32	18871-18875	guys	
45-33	18876-18877	?	
45-34	18878-18880	Is	
45-35	18881-18886	there	
45-36	18887-18888	a	
45-37	18889-18895	better	
45-38	18896-18899	way	
45-39	18900-18902	to	
45-40	18903-18910	measure	
45-41	18911-18914	the	
45-42	18915-18918	TPS	
45-43	18919-18921	in	
45-44	18922-18932	postgresql	
45-45	18933-18934	?	
45-46	18935-18940	Reply	
45-47	18941-18946	Leave	
45-48	18947-18948	a	
45-49	18949-18954	Reply	
45-50	18955-18961	Cancel	
45-51	18962-18971	replyYour	
45-52	18972-18977	email	
45-53	18978-18985	address	
45-54	18986-18990	will	
45-55	18991-18994	not	
45-56	18995-18997	be	
45-57	18998-19007	published	
45-58	19007-19008	.	
45-59	19009-19017	Required	
45-60	19018-19024	fields	
45-61	19025-19028	are	
45-62	19029-19035	marked	
45-63	19036-19037	*	
45-64	19037-19044	Comment	
45-65	19045-19049	Name	
45-66	19050-19051	*	
45-67	19052-19057	Email	
45-68	19058-19059	*	
45-69	19060-19067	Website	
45-70	19068-19072	Save	
45-71	19073-19075	my	
45-72	19076-19080	name	
45-73	19080-19081	,	
45-74	19082-19087	email	
45-75	19087-19088	,	
45-76	19089-19092	and	
45-77	19093-19100	website	
45-78	19101-19103	in	
45-79	19104-19108	this	
45-80	19109-19116	browser	
45-81	19117-19120	for	
45-82	19121-19124	the	
45-83	19125-19129	next	
45-84	19130-19134	time	
45-85	19135-19136	I	
45-86	19137-19144	comment	
45-87	19144-19145	.	

#Text=This site uses Akismet to reduce spam. Learn how your comment data is processed. © 2021 All Rights Reserved. Proudly powered by Wordpress Stack Overflow Questions Jobs Developer Jobs Directory Salary Calculator Products Teams Talent Advertising Enterprise Company
46-1	19146-19150	This	
46-2	19151-19155	site	
46-3	19156-19160	uses	
46-4	19161-19168	Akismet	
46-5	19169-19171	to	
46-6	19172-19178	reduce	
46-7	19179-19183	spam	
46-8	19183-19184	.	
46-9	19185-19190	Learn	
46-10	19191-19194	how	
46-11	19195-19199	your	
46-12	19200-19207	comment	
46-13	19208-19212	data	
46-14	19213-19215	is	
46-15	19216-19225	processed	
46-16	19225-19226	.	
46-17	19227-19228	©	
46-18	19229-19233	2021	
46-19	19234-19237	All	
46-20	19238-19244	Rights	
46-21	19245-19253	Reserved	
46-22	19253-19254	.	
46-23	19255-19262	Proudly	
46-24	19263-19270	powered	
46-25	19271-19273	by	
46-26	19274-19283	Wordpress	
46-27	19284-19289	Stack	
46-28	19290-19298	Overflow	
46-29	19299-19308	Questions	
46-30	19309-19313	Jobs	
46-31	19314-19323	Developer	
46-32	19324-19328	Jobs	
46-33	19329-19338	Directory	
46-34	19339-19345	Salary	
46-35	19346-19356	Calculator	
46-36	19357-19365	Products	
46-37	19366-19371	Teams	
46-38	19372-19378	Talent	
46-39	19379-19390	Advertising	
46-40	19391-19401	Enterprise	
46-41	19402-19409	Company	
