#FORMAT=WebAnno TSV 3.3


#Text=13 Tips to Improve PostgreSQL Insert Performance - DZone Database Database Zone Thanks for visiting DZone today, Edit Profile Manage Email Subscriptions How to Post to DZone Sign Out
1-1	0-2	13	
1-2	3-7	Tips	
1-3	8-10	to	
1-4	11-18	Improve	
1-5	19-29	PostgreSQL	
1-6	30-36	Insert	
1-7	37-48	Performance	
1-8	49-50	-	
1-9	51-56	DZone	
1-10	57-65	Database	
1-11	66-74	Database	
1-12	75-79	Zone	
1-13	80-86	Thanks	
1-14	87-90	for	
1-15	91-99	visiting	
1-16	100-105	DZone	
1-17	106-111	today	
1-18	111-112	,	
1-19	113-117	Edit	
1-20	118-125	Profile	
1-21	126-132	Manage	
1-22	133-138	Email	
1-23	139-152	Subscriptions	
1-24	153-156	How	
1-25	157-159	to	
1-26	160-164	Post	
1-27	165-167	to	
1-28	168-173	DZone	
1-29	174-178	Sign	
1-30	179-182	Out	

#Text=View Profile Post Over 2 million developers have joined DZone. Log In Join Refcardz Research Webinars Zones Agile Big Data Cloud Database DevOps Integration
2-1	183-187	View	
2-2	188-195	Profile	
2-3	196-200	Post	
2-4	201-205	Over	
2-5	206-207	2	
2-6	208-215	million	
2-7	216-226	developers	
2-8	227-231	have	
2-9	232-238	joined	
2-10	239-244	DZone	
2-11	244-245	.	
2-12	246-249	Log	
2-13	250-252	In	
2-14	253-257	Join	
2-15	258-266	Refcardz	
2-16	267-275	Research	
2-17	276-284	Webinars	
2-18	285-290	Zones	
2-19	291-296	Agile	
2-20	297-300	Big	
2-21	301-305	Data	
2-22	306-311	Cloud	
2-23	312-320	Database	
2-24	321-327	DevOps	
2-25	328-339	Integration	

#Text=IoT Java Microservices Open Source Performance Security Web Dev DZone Database Zone 13 Tips to Improve PostgreSQL Insert Performance 13 Tips to Improve PostgreSQL Insert Performance
3-1	340-343	IoT	
3-2	344-348	Java	
3-3	349-362	Microservices	
3-4	363-367	Open	
3-5	368-374	Source	
3-6	375-386	Performance	
3-7	387-395	Security	
3-8	396-399	Web	
3-9	400-403	Dev	
3-10	404-409	DZone	
3-11	410-418	Database	
3-12	419-423	Zone	
3-13	424-426	13	
3-14	427-431	Tips	
3-15	432-434	to	
3-16	435-442	Improve	
3-17	443-453	PostgreSQL	
3-18	454-460	Insert	
3-19	461-472	Performance	
3-20	473-475	13	
3-21	476-480	Tips	
3-22	481-483	to	
3-23	484-491	Improve	
3-24	492-502	PostgreSQL	
3-25	503-509	Insert	
3-26	510-521	Performance	

#Text=Get a cheatsheet full of ways to improve your database ingest (INSERT) performance and speed up your time-series queries using PostgreSQL. Mike Freedman Jul. 08, 20 Database Zone Tutorial Like (2) Comment Save Tweet 11.98K Views Join the DZone community and get the full member experience.
4-1	522-525	Get	
4-2	526-527	a	
4-3	528-538	cheatsheet	
4-4	539-543	full	
4-5	544-546	of	
4-6	547-551	ways	
4-7	552-554	to	
4-8	555-562	improve	
4-9	563-567	your	
4-10	568-576	database	
4-11	577-583	ingest	
4-12	584-585	(	
4-13	585-591	INSERT	
4-14	591-592	)	
4-15	593-604	performance	
4-16	605-608	and	
4-17	609-614	speed	
4-18	615-617	up	
4-19	618-622	your	
4-20	623-634	time-series	
4-21	635-642	queries	
4-22	643-648	using	
4-23	649-659	PostgreSQL	
4-24	659-660	.	
4-25	661-665	Mike	
4-26	666-674	Freedman	
4-27	675-678	Jul	
4-28	678-679	.	
4-29	680-682	08	
4-30	682-683	,	
4-31	684-686	20	
4-32	687-695	Database	
4-33	696-700	Zone	
4-34	701-709	Tutorial	
4-35	710-714	Like	
4-36	715-716	(	
4-37	716-717	2	
4-38	717-718	)	
4-39	719-726	Comment	
4-40	727-731	Save	
4-41	732-737	Tweet	
4-42	738-744	11.98K	
4-43	745-750	Views	
4-44	751-755	Join	
4-45	756-759	the	
4-46	760-765	DZone	
4-47	766-775	community	
4-48	776-779	and	
4-49	780-783	get	
4-50	784-787	the	
4-51	788-792	full	
4-52	793-799	member	
4-53	800-810	experience	
4-54	810-811	.	

#Text=Join For Free Ingest performance is critical for many common PostgreSQL use cases, including application monitoring, application analytics, IoT monitoring, and more. While databases have long had time fields, there's a key difference in the type of data these use cases collect: unlike standard relational "business" data, changes are treated as inserts, not overwrites (in other words, every new value becomes a new row in the database, instead of replacing the row's prior value with the latest one).
5-1	812-816	Join	
5-2	817-820	For	
5-3	821-825	Free	
5-4	826-832	Ingest	
5-5	833-844	performance	
5-6	845-847	is	
5-7	848-856	critical	
5-8	857-860	for	
5-9	861-865	many	
5-10	866-872	common	
5-11	873-883	PostgreSQL	
5-12	884-887	use	
5-13	888-893	cases	
5-14	893-894	,	
5-15	895-904	including	
5-16	905-916	application	
5-17	917-927	monitoring	
5-18	927-928	,	
5-19	929-940	application	
5-20	941-950	analytics	
5-21	950-951	,	
5-22	952-955	IoT	
5-23	956-966	monitoring	
5-24	966-967	,	
5-25	968-971	and	
5-26	972-976	more	
5-27	976-977	.	
5-28	978-983	While	
5-29	984-993	databases	
5-30	994-998	have	
5-31	999-1003	long	
5-32	1004-1007	had	
5-33	1008-1012	time	
5-34	1013-1019	fields	
5-35	1019-1020	,	
5-36	1021-1028	there's	
5-37	1029-1030	a	
5-38	1031-1034	key	
5-39	1035-1045	difference	
5-40	1046-1048	in	
5-41	1049-1052	the	
5-42	1053-1057	type	
5-43	1058-1060	of	
5-44	1061-1065	data	
5-45	1066-1071	these	
5-46	1072-1075	use	
5-47	1076-1081	cases	
5-48	1082-1089	collect	
5-49	1089-1090	:	
5-50	1091-1097	unlike	
5-51	1098-1106	standard	
5-52	1107-1117	relational	
5-53	1118-1119	"	
5-54	1119-1127	business	
5-55	1127-1128	"	
5-56	1129-1133	data	
5-57	1133-1134	,	
5-58	1135-1142	changes	
5-59	1143-1146	are	
5-60	1147-1154	treated	
5-61	1155-1157	as	
5-62	1158-1165	inserts	
5-63	1165-1166	,	
5-64	1167-1170	not	
5-65	1171-1181	overwrites	
5-66	1182-1183	(	
5-67	1183-1185	in	
5-68	1186-1191	other	
5-69	1192-1197	words	
5-70	1197-1198	,	
5-71	1199-1204	every	
5-72	1205-1208	new	
5-73	1209-1214	value	
5-74	1215-1222	becomes	
5-75	1223-1224	a	
5-76	1225-1228	new	
5-77	1228-1229	 	
5-78	1229-1232	row	
5-79	1233-1235	in	
5-80	1236-1239	the	
5-81	1240-1248	database	
5-82	1248-1249	,	
5-83	1250-1257	instead	
5-84	1258-1260	of	
5-85	1261-1270	replacing	
5-86	1271-1274	the	
5-87	1275-1280	row's	
5-88	1281-1286	prior	
5-89	1287-1292	value	
5-90	1293-1297	with	
5-91	1298-1301	the	
5-92	1302-1308	latest	
5-93	1309-1312	one	
5-94	1312-1313	)	
5-95	1313-1314	.	

#Text=If you're operating in a scenario where you need to retain all data v. overwriting past values, optimizing the speed in which your database can ingest new data becomes essential. We have a lot of experience optimizing performance for ourselves and our community members, and we’ve broken our top tips into two categories. First, we’ve outlined a few tips that are useful for improving PostgreSQL in general. After that, we’ve outlined a few that are specific to TimescaleDB.
6-1	1315-1317	If	
6-2	1318-1324	you're	
6-3	1325-1334	operating	
6-4	1335-1337	in	
6-5	1338-1339	a	
6-6	1340-1348	scenario	
6-7	1349-1354	where	
6-8	1355-1358	you	
6-9	1359-1363	need	
6-10	1364-1366	to	
6-11	1367-1373	retain	
6-12	1374-1377	all	
6-13	1378-1382	data	
6-14	1383-1384	v	
6-15	1384-1385	.	
6-16	1386-1397	overwriting	
6-17	1398-1402	past	
6-18	1403-1409	values	
6-19	1409-1410	,	
6-20	1411-1421	optimizing	
6-21	1422-1425	the	
6-22	1426-1431	speed	
6-23	1432-1434	in	
6-24	1435-1440	which	
6-25	1441-1445	your	
6-26	1446-1454	database	
6-27	1455-1458	can	
6-28	1459-1465	ingest	
6-29	1466-1469	new	
6-30	1470-1474	data	
6-31	1475-1482	becomes	
6-32	1483-1492	essential	
6-33	1492-1493	.	
6-34	1494-1496	We	
6-35	1497-1501	have	
6-36	1502-1503	a	
6-37	1504-1507	lot	
6-38	1508-1510	of	
6-39	1511-1521	experience	
6-40	1522-1532	optimizing	
6-41	1533-1544	performance	
6-42	1545-1548	for	
6-43	1549-1558	ourselves	
6-44	1559-1562	and	
6-45	1563-1566	our	
6-46	1567-1576	community	
6-47	1577-1584	members	
6-48	1584-1585	,	
6-49	1586-1589	and	
6-50	1590-1592	we	
6-51	1592-1593	’	
6-52	1593-1595	ve	
6-53	1596-1602	broken	
6-54	1603-1606	our	
6-55	1607-1610	top	
6-56	1611-1615	tips	
6-57	1616-1620	into	
6-58	1621-1624	two	
6-59	1625-1635	categories	
6-60	1635-1636	.	
6-61	1637-1642	First	
6-62	1642-1643	,	
6-63	1644-1646	we	
6-64	1646-1647	’	
6-65	1647-1649	ve	
6-66	1650-1658	outlined	
6-67	1659-1660	a	
6-68	1661-1664	few	
6-69	1665-1669	tips	
6-70	1670-1674	that	
6-71	1675-1678	are	
6-72	1679-1685	useful	
6-73	1686-1689	for	
6-74	1690-1699	improving	
6-75	1700-1710	PostgreSQL	
6-76	1711-1713	in	
6-77	1714-1721	general	
6-78	1721-1722	.	
6-79	1722-1723	 	
6-80	1723-1728	After	
6-81	1729-1733	that	
6-82	1733-1734	,	
6-83	1735-1737	we	
6-84	1737-1738	’	
6-85	1738-1740	ve	
6-86	1741-1749	outlined	
6-87	1750-1751	a	
6-88	1752-1755	few	
6-89	1756-1760	that	
6-90	1761-1764	are	
6-91	1765-1773	specific	
6-92	1774-1776	to	
6-93	1777-1788	TimescaleDB	
6-94	1788-1789	.	

#Text=Improve PostgreSQL Performance Here are some best practices for improving ingest performance in vanilla PostgreSQL: 1. Use Indexes in Moderation
7-1	1790-1797	Improve	
7-2	1798-1808	PostgreSQL	
7-3	1809-1820	Performance	
7-4	1821-1825	Here	
7-5	1826-1829	are	
7-6	1830-1834	some	
7-7	1835-1839	best	
7-8	1840-1849	practices	
7-9	1850-1853	for	
7-10	1854-1863	improving	
7-11	1864-1870	ingest	
7-12	1871-1882	performance	
7-13	1883-1885	in	
7-14	1886-1893	vanilla	
7-15	1894-1904	PostgreSQL	
7-16	1904-1905	:	
7-17	1906-1907	1	
7-18	1907-1908	.	
7-19	1909-1912	Use	
7-20	1913-1920	Indexes	
7-21	1921-1923	in	
7-22	1924-1934	Moderation	

#Text=Having the right indexes can speed up your queries, but they’re not a silver bullet. Incrementally maintaining indexes with each new row requires additional work. Check the number of indexes you’ve defined on your table (use the psql command \\d table_name), and determine whether their potential query benefits outweigh the storage and insert overhead. Since every system is different, there aren’t any hard and fast rules or “magic number” of indexes – just be reasonable. 2. Reconsider Foreign Key Constraints Sometimes it's necessary to build foreign keys (FK) from one table to other relational tables. When you have an FK constraint, every INSERT will typically then need to read from your referenced table, which can degrade performance. Consider if you can denormalize your data – we sometimes see pretty extreme use of FK constraints, done from a sense of “elegance” rather than engineering tradeoffs.
8-1	1935-1941	Having	
8-2	1942-1945	the	
8-3	1946-1951	right	
8-4	1952-1959	indexes	
8-5	1960-1963	can	
8-6	1964-1969	speed	
8-7	1970-1972	up	
8-8	1973-1977	your	
8-9	1978-1985	queries	
8-10	1985-1986	,	
8-11	1987-1990	but	
8-12	1991-1995	they	
8-13	1995-1996	’	
8-14	1996-1998	re	
8-15	1999-2002	not	
8-16	2003-2004	a	
8-17	2005-2011	silver	
8-18	2012-2018	bullet	
8-19	2018-2019	.	
8-20	2020-2033	Incrementally	
8-21	2034-2045	maintaining	
8-22	2046-2053	indexes	
8-23	2054-2058	with	
8-24	2059-2063	each	
8-25	2064-2067	new	
8-26	2068-2071	row	
8-27	2072-2080	requires	
8-28	2081-2091	additional	
8-29	2092-2096	work	
8-30	2096-2097	.	
8-31	2098-2103	Check	
8-32	2104-2107	the	
8-33	2108-2114	number	
8-34	2115-2117	of	
8-35	2118-2125	indexes	
8-36	2126-2129	you	
8-37	2129-2130	’	
8-38	2130-2132	ve	
8-39	2133-2140	defined	
8-40	2141-2143	on	
8-41	2144-2148	your	
8-42	2149-2154	table	
8-43	2155-2156	(	
8-44	2156-2159	use	
8-45	2160-2163	the	
8-46	2164-2168	psql	
8-47	2169-2176	command	
8-48	2177-2178	\	
8-49	2178-2179	d	
8-50	2180-2190	table_name	
8-51	2190-2191	)	
8-52	2191-2192	,	
8-53	2193-2196	and	
8-54	2197-2206	determine	
8-55	2207-2214	whether	
8-56	2215-2220	their	
8-57	2221-2230	potential	
8-58	2231-2236	query	
8-59	2237-2245	benefits	
8-60	2246-2254	outweigh	
8-61	2255-2258	the	
8-62	2259-2266	storage	
8-63	2267-2270	and	
8-64	2271-2277	insert	
8-65	2278-2286	overhead	
8-66	2286-2287	.	
8-67	2288-2293	Since	
8-68	2294-2299	every	
8-69	2300-2306	system	
8-70	2307-2309	is	
8-71	2310-2319	different	
8-72	2319-2320	,	
8-73	2321-2326	there	
8-74	2327-2331	aren	
8-75	2331-2332	’	
8-76	2332-2333	t	
8-77	2334-2337	any	
8-78	2338-2342	hard	
8-79	2343-2346	and	
8-80	2347-2351	fast	
8-81	2352-2357	rules	
8-82	2358-2360	or	
8-83	2361-2362	“	
8-84	2362-2367	magic	
8-85	2368-2374	number	
8-86	2374-2375	”	
8-87	2376-2378	of	
8-88	2379-2386	indexes	
8-89	2387-2388	–	
8-90	2389-2393	just	
8-91	2394-2396	be	
8-92	2397-2407	reasonable	
8-93	2407-2408	.	
8-94	2409-2410	2	
8-95	2410-2411	.	
8-96	2412-2422	Reconsider	
8-97	2423-2430	Foreign	
8-98	2431-2434	Key	
8-99	2435-2446	Constraints	
8-100	2447-2456	Sometimes	
8-101	2457-2461	it's	
8-102	2462-2471	necessary	
8-103	2472-2474	to	
8-104	2475-2480	build	
8-105	2481-2488	foreign	
8-106	2489-2493	keys	
8-107	2494-2495	(	
8-108	2495-2497	FK	
8-109	2497-2498	)	
8-110	2499-2503	from	
8-111	2504-2507	one	
8-112	2508-2513	table	
8-113	2514-2516	to	
8-114	2517-2522	other	
8-115	2523-2533	relational	
8-116	2534-2540	tables	
8-117	2540-2541	.	
8-118	2542-2546	When	
8-119	2547-2550	you	
8-120	2551-2555	have	
8-121	2556-2558	an	
8-122	2559-2561	FK	
8-123	2562-2572	constraint	
8-124	2572-2573	,	
8-125	2574-2579	every	
8-126	2580-2586	INSERT	
8-127	2587-2591	will	
8-128	2592-2601	typically	
8-129	2602-2606	then	
8-130	2607-2611	need	
8-131	2612-2614	to	
8-132	2615-2619	read	
8-133	2620-2624	from	
8-134	2625-2629	your	
8-135	2630-2640	referenced	
8-136	2641-2646	table	
8-137	2646-2647	,	
8-138	2648-2653	which	
8-139	2654-2657	can	
8-140	2658-2665	degrade	
8-141	2666-2677	performance	
8-142	2677-2678	.	
8-143	2679-2687	Consider	
8-144	2688-2690	if	
8-145	2691-2694	you	
8-146	2695-2698	can	
8-147	2699-2710	denormalize	
8-148	2711-2715	your	
8-149	2716-2720	data	
8-150	2721-2722	–	
8-151	2723-2725	we	
8-152	2726-2735	sometimes	
8-153	2736-2739	see	
8-154	2740-2746	pretty	
8-155	2747-2754	extreme	
8-156	2755-2758	use	
8-157	2759-2761	of	
8-158	2762-2764	FK	
8-159	2765-2776	constraints	
8-160	2776-2777	,	
8-161	2778-2782	done	
8-162	2783-2787	from	
8-163	2788-2789	a	
8-164	2790-2795	sense	
8-165	2796-2798	of	
8-166	2799-2800	“	
8-167	2800-2808	elegance	
8-168	2808-2809	”	
8-169	2810-2816	rather	
8-170	2817-2821	than	
8-171	2822-2833	engineering	
8-172	2834-2843	tradeoffs	
8-173	2843-2844	.	

#Text=3. Avoid Unnecessary UNIQUE Keys Developers are often trained to specify primary keys in database tables, and many ORMs love them. Yet, many use cases – including common monitoring or time-series applications – don’t require them, as each event or sensor reading can simply be logged as a separate event by inserting it at the tail of a hypertable's current chunk during write time.
9-1	2845-2846	3	
9-2	2846-2847	.	
9-3	2848-2853	Avoid	
9-4	2854-2865	Unnecessary	
9-5	2866-2872	UNIQUE	
9-6	2873-2877	Keys	
9-7	2878-2888	Developers	
9-8	2889-2892	are	
9-9	2893-2898	often	
9-10	2899-2906	trained	
9-11	2907-2909	to	
9-12	2910-2917	specify	
9-13	2918-2925	primary	
9-14	2926-2930	keys	
9-15	2931-2933	in	
9-16	2934-2942	database	
9-17	2943-2949	tables	
9-18	2949-2950	,	
9-19	2951-2954	and	
9-20	2955-2959	many	
9-21	2960-2964	ORMs	
9-22	2965-2969	love	
9-23	2970-2974	them	
9-24	2974-2975	.	
9-25	2976-2979	Yet	
9-26	2979-2980	,	
9-27	2981-2985	many	
9-28	2986-2989	use	
9-29	2990-2995	cases	
9-30	2996-2997	–	
9-31	2998-3007	including	
9-32	3008-3014	common	
9-33	3015-3025	monitoring	
9-34	3026-3028	or	
9-35	3029-3040	time-series	
9-36	3041-3053	applications	
9-37	3054-3055	–	
9-38	3056-3059	don	
9-39	3059-3060	’	
9-40	3060-3061	t	
9-41	3062-3069	require	
9-42	3070-3074	them	
9-43	3074-3075	,	
9-44	3076-3078	as	
9-45	3079-3083	each	
9-46	3084-3089	event	
9-47	3090-3092	or	
9-48	3093-3099	sensor	
9-49	3100-3107	reading	
9-50	3108-3111	can	
9-51	3112-3118	simply	
9-52	3119-3121	be	
9-53	3122-3128	logged	
9-54	3129-3131	as	
9-55	3132-3133	a	
9-56	3134-3142	separate	
9-57	3143-3148	event	
9-58	3149-3151	by	
9-59	3152-3161	inserting	
9-60	3162-3164	it	
9-61	3165-3167	at	
9-62	3168-3171	the	
9-63	3172-3176	tail	
9-64	3177-3179	of	
9-65	3180-3181	a	
9-66	3182-3194	hypertable's	
9-67	3195-3202	current	
9-68	3203-3208	chunk	
9-69	3209-3215	during	
9-70	3216-3221	write	
9-71	3222-3226	time	
9-72	3226-3227	.	

#Text=If a UNIQUE constraint is otherwise defined, that insert can necessitate an index lookup to determine if the row already exists, which will adversely impact the speed of your INSERT. 4. Use Separate Disks for WAL and Data While this is a more advanced optimization that isn't always needed, if your disk becomes a bottleneck, you can further increase throughput by using a separate disk (tablespace) for the database's write-ahead log (WAL) and data.
10-1	3228-3230	If	
10-2	3231-3232	a	
10-3	3233-3239	UNIQUE	
10-4	3240-3250	constraint	
10-5	3251-3253	is	
10-6	3254-3263	otherwise	
10-7	3264-3271	defined	
10-8	3271-3272	,	
10-9	3273-3277	that	
10-10	3278-3284	insert	
10-11	3285-3288	can	
10-12	3289-3300	necessitate	
10-13	3301-3303	an	
10-14	3304-3309	index	
10-15	3310-3316	lookup	
10-16	3317-3319	to	
10-17	3320-3329	determine	
10-18	3330-3332	if	
10-19	3333-3336	the	
10-20	3337-3340	row	
10-21	3341-3348	already	
10-22	3349-3355	exists	
10-23	3355-3356	,	
10-24	3357-3362	which	
10-25	3363-3367	will	
10-26	3368-3377	adversely	
10-27	3378-3384	impact	
10-28	3385-3388	the	
10-29	3389-3394	speed	
10-30	3395-3397	of	
10-31	3398-3402	your	
10-32	3403-3409	INSERT	
10-33	3409-3410	.	
10-34	3411-3412	4	
10-35	3412-3413	.	
10-36	3414-3417	Use	
10-37	3418-3426	Separate	
10-38	3427-3432	Disks	
10-39	3433-3436	for	
10-40	3437-3440	WAL	
10-41	3441-3444	and	
10-42	3445-3449	Data	
10-43	3450-3455	While	
10-44	3456-3460	this	
10-45	3461-3463	is	
10-46	3464-3465	a	
10-47	3466-3470	more	
10-48	3471-3479	advanced	
10-49	3480-3492	optimization	
10-50	3493-3497	that	
10-51	3498-3503	isn't	
10-52	3504-3510	always	
10-53	3511-3517	needed	
10-54	3517-3518	,	
10-55	3519-3521	if	
10-56	3522-3526	your	
10-57	3527-3531	disk	
10-58	3532-3539	becomes	
10-59	3540-3541	a	
10-60	3542-3552	bottleneck	
10-61	3552-3553	,	
10-62	3554-3557	you	
10-63	3558-3561	can	
10-64	3562-3569	further	
10-65	3570-3578	increase	
10-66	3579-3589	throughput	
10-67	3590-3592	by	
10-68	3593-3598	using	
10-69	3599-3600	a	
10-70	3601-3609	separate	
10-71	3610-3614	disk	
10-72	3615-3616	(	
10-73	3616-3626	tablespace	
10-74	3626-3627	)	
10-75	3628-3631	for	
10-76	3632-3635	the	
10-77	3636-3646	database's	
10-78	3647-3658	write-ahead	
10-79	3659-3662	log	
10-80	3663-3664	(	
10-81	3664-3667	WAL	
10-82	3667-3668	)	
10-83	3669-3672	and	
10-84	3673-3677	data	
10-85	3677-3678	.	

#Text=5. Use Performant Disks Sometimes developers deploy their database in environments with slower disks, whether due to poorly-performing HDD, remote SANs, or other types of configurations. And because when you are inserting rows, the data is durably stored to the write-ahead log (WAL) before the transaction completes, slow disks can impact insert performance. One thing to do is check your disk IOPS using the ioping command.Read test:
11-1	3679-3680	5	
11-2	3680-3681	.	
11-3	3682-3685	Use	
11-4	3686-3696	Performant	
11-5	3697-3702	Disks	
11-6	3703-3712	Sometimes	
11-7	3713-3723	developers	
11-8	3724-3730	deploy	
11-9	3731-3736	their	
11-10	3737-3745	database	
11-11	3746-3748	in	
11-12	3749-3761	environments	
11-13	3762-3766	with	
11-14	3767-3773	slower	
11-15	3774-3779	disks	
11-16	3779-3780	,	
11-17	3781-3788	whether	
11-18	3789-3792	due	
11-19	3793-3795	to	
11-20	3796-3813	poorly-performing	
11-21	3814-3817	HDD	
11-22	3817-3818	,	
11-23	3819-3825	remote	
11-24	3826-3830	SANs	
11-25	3830-3831	,	
11-26	3832-3834	or	
11-27	3835-3840	other	
11-28	3841-3846	types	
11-29	3847-3849	of	
11-30	3850-3864	configurations	
11-31	3864-3865	.	
11-32	3866-3869	And	
11-33	3870-3877	because	
11-34	3878-3882	when	
11-35	3883-3886	you	
11-36	3887-3890	are	
11-37	3891-3900	inserting	
11-38	3901-3905	rows	
11-39	3905-3906	,	
11-40	3907-3910	the	
11-41	3911-3915	data	
11-42	3916-3918	is	
11-43	3919-3926	durably	
11-44	3927-3933	stored	
11-45	3934-3936	to	
11-46	3937-3940	the	
11-47	3941-3952	write-ahead	
11-48	3953-3956	log	
11-49	3957-3958	(	
11-50	3958-3961	WAL	
11-51	3961-3962	)	
11-52	3963-3969	before	
11-53	3970-3973	the	
11-54	3974-3985	transaction	
11-55	3986-3995	completes	
11-56	3995-3996	,	
11-57	3997-4001	slow	
11-58	4002-4007	disks	
11-59	4008-4011	can	
11-60	4012-4018	impact	
11-61	4019-4025	insert	
11-62	4026-4037	performance	
11-63	4037-4038	.	
11-64	4039-4042	One	
11-65	4043-4048	thing	
11-66	4049-4051	to	
11-67	4052-4054	do	
11-68	4055-4057	is	
11-69	4058-4063	check	
11-70	4064-4068	your	
11-71	4069-4073	disk	
11-72	4074-4078	IOPS	
11-73	4079-4084	using	
11-74	4085-4088	the	
11-75	4089-4095	ioping	
11-76	4096-4108	command.Read	
11-77	4109-4113	test	
11-78	4113-4114	:	

#Text=SQL $ ioping -q -c 10 -s 8k . --- . (hfs /dev/disk1 930.7 GiB) ioping statistics --- 9 requests completed in 208 us, 72 KiB read, 43.3 k iops, 338.0 MiB/s
12-1	4115-4118	SQL	
12-2	4119-4120	$	
12-3	4121-4127	ioping	
12-4	4128-4129	-	
12-5	4129-4130	q	
12-6	4131-4132	-	
12-7	4132-4133	c	
12-8	4134-4136	10	
12-9	4137-4138	-	
12-10	4138-4139	s	
12-11	4140-4142	8k	
12-12	4143-4144	.	
12-13	4145-4146	-	
12-14	4146-4147	-	
12-15	4147-4148	-	
12-16	4149-4150	.	
12-17	4151-4152	(	
12-18	4152-4155	hfs	
12-19	4156-4157	/	
12-20	4157-4160	dev	
12-21	4160-4161	/	
12-22	4161-4166	disk1	
12-23	4167-4172	930.7	
12-24	4173-4176	GiB	
12-25	4176-4177	)	
12-26	4178-4184	ioping	
12-27	4185-4195	statistics	
12-28	4196-4197	-	
12-29	4197-4198	-	
12-30	4198-4199	-	
12-31	4200-4201	9	
12-32	4202-4210	requests	
12-33	4211-4220	completed	
12-34	4221-4223	in	
12-35	4224-4227	208	
12-36	4228-4230	us	
12-37	4230-4231	,	
12-38	4232-4234	72	
12-39	4235-4238	KiB	
12-40	4239-4243	read	
12-41	4243-4244	,	
12-42	4245-4249	43.3	
12-43	4250-4251	k	
12-44	4252-4256	iops	
12-45	4256-4257	,	
12-46	4258-4263	338.0	
12-47	4264-4267	MiB	
12-48	4267-4268	/	
12-49	4268-4269	s	

#Text=generated 10 requests in 9.00 s, 80 KiB, 1 iops, 8.88 KiB/s min/avg/max/mdev = 18 us / 23.1 us / 35 us / 6.17 us Write test: Java xxxxxxxxxx $ ioping -q -c 10 -s 8k -W .
13-1	4270-4279	generated	
13-2	4280-4282	10	
13-3	4283-4291	requests	
13-4	4292-4294	in	
13-5	4295-4299	9.00	
13-6	4300-4301	s	
13-7	4301-4302	,	
13-8	4303-4305	80	
13-9	4306-4309	KiB	
13-10	4309-4310	,	
13-11	4311-4312	1	
13-12	4313-4317	iops	
13-13	4317-4318	,	
13-14	4319-4323	8.88	
13-15	4324-4327	KiB	
13-16	4327-4328	/	
13-17	4328-4329	s	
13-18	4330-4333	min	
13-19	4333-4334	/	
13-20	4334-4337	avg	
13-21	4337-4338	/	
13-22	4338-4341	max	
13-23	4341-4342	/	
13-24	4342-4346	mdev	
13-25	4347-4348	=	
13-26	4349-4351	18	
13-27	4352-4354	us	
13-28	4355-4356	/	
13-29	4357-4361	23.1	
13-30	4362-4364	us	
13-31	4365-4366	/	
13-32	4367-4369	35	
13-33	4370-4372	us	
13-34	4373-4374	/	
13-35	4375-4379	6.17	
13-36	4380-4382	us	
13-37	4383-4388	Write	
13-38	4389-4393	test	
13-39	4393-4394	:	
13-40	4395-4399	Java	
13-41	4400-4410	xxxxxxxxxx	
13-42	4411-4412	$	
13-43	4413-4419	ioping	
13-44	4420-4421	-	
13-45	4421-4422	q	
13-46	4423-4424	-	
13-47	4424-4425	c	
13-48	4426-4428	10	
13-49	4429-4430	-	
13-50	4430-4431	s	
13-51	4432-4434	8k	
13-52	4435-4436	-	
13-53	4436-4437	W	
13-54	4438-4439	.	

#Text=--- . (hfs /dev/disk1 930.7 GiB) ioping statistics --- 9 requests completed in 10.8 ms, 72 KiB written, 830 iops, 6.49 MiB/s generated 10 requests in 9.00 s, 80 KiB, 1 iops, 8.89 KiB/s
14-1	4440-4441	-	
14-2	4441-4442	-	
14-3	4442-4443	-	
14-4	4444-4445	.	
14-5	4446-4447	(	
14-6	4447-4450	hfs	
14-7	4451-4452	/	
14-8	4452-4455	dev	
14-9	4455-4456	/	
14-10	4456-4461	disk1	
14-11	4462-4467	930.7	
14-12	4468-4471	GiB	
14-13	4471-4472	)	
14-14	4473-4479	ioping	
14-15	4480-4490	statistics	
14-16	4491-4492	-	
14-17	4492-4493	-	
14-18	4493-4494	-	
14-19	4495-4496	9	
14-20	4497-4505	requests	
14-21	4506-4515	completed	
14-22	4516-4518	in	
14-23	4519-4523	10.8	
14-24	4524-4526	ms	
14-25	4526-4527	,	
14-26	4528-4530	72	
14-27	4531-4534	KiB	
14-28	4535-4542	written	
14-29	4542-4543	,	
14-30	4544-4547	830	
14-31	4548-4552	iops	
14-32	4552-4553	,	
14-33	4554-4558	6.49	
14-34	4559-4562	MiB	
14-35	4562-4563	/	
14-36	4563-4564	s	
14-37	4565-4574	generated	
14-38	4575-4577	10	
14-39	4578-4586	requests	
14-40	4587-4589	in	
14-41	4590-4594	9.00	
14-42	4595-4596	s	
14-43	4596-4597	,	
14-44	4598-4600	80	
14-45	4601-4604	KiB	
14-46	4604-4605	,	
14-47	4606-4607	1	
14-48	4608-4612	iops	
14-49	4612-4613	,	
14-50	4614-4618	8.89	
14-51	4619-4622	KiB	
14-52	4622-4623	/	
14-53	4623-4624	s	

#Text=min/avg/max/mdev = 99 us / 1.20 ms / 2.23 ms / 919.3 us You should see at least 1000s of read IOPS and many 100s of write IOPS.  If you are seeing far fewer, your INSERT performance is likely to be impacted by your disk hardware.  See if alternative storage configurations are feasible. Choose and Configure TimescaleDB for Better Ingest Performance
15-1	4625-4628	min	
15-2	4628-4629	/	
15-3	4629-4632	avg	
15-4	4632-4633	/	
15-5	4633-4636	max	
15-6	4636-4637	/	
15-7	4637-4641	mdev	
15-8	4642-4643	=	
15-9	4644-4646	99	
15-10	4647-4649	us	
15-11	4650-4651	/	
15-12	4652-4656	1.20	
15-13	4657-4659	ms	
15-14	4660-4661	/	
15-15	4662-4666	2.23	
15-16	4667-4669	ms	
15-17	4670-4671	/	
15-18	4672-4677	919.3	
15-19	4678-4680	us	
15-20	4681-4684	You	
15-21	4685-4691	should	
15-22	4692-4695	see	
15-23	4696-4698	at	
15-24	4699-4704	least	
15-25	4705-4710	1000s	
15-26	4711-4713	of	
15-27	4714-4718	read	
15-28	4719-4723	IOPS	
15-29	4724-4727	and	
15-30	4728-4732	many	
15-31	4733-4737	100s	
15-32	4738-4740	of	
15-33	4741-4746	write	
15-34	4747-4751	IOPS	
15-35	4751-4752	.	
15-36	4753-4754	 	
15-37	4754-4756	If	
15-38	4757-4760	you	
15-39	4761-4764	are	
15-40	4765-4771	seeing	
15-41	4772-4775	far	
15-42	4776-4781	fewer	
15-43	4781-4782	,	
15-44	4783-4787	your	
15-45	4788-4794	INSERT	
15-46	4795-4806	performance	
15-47	4807-4809	is	
15-48	4810-4816	likely	
15-49	4817-4819	to	
15-50	4820-4822	be	
15-51	4823-4831	impacted	
15-52	4832-4834	by	
15-53	4835-4839	your	
15-54	4840-4844	disk	
15-55	4845-4853	hardware	
15-56	4853-4854	.	
15-57	4855-4856	 	
15-58	4856-4859	See	
15-59	4860-4862	if	
15-60	4863-4874	alternative	
15-61	4875-4882	storage	
15-62	4883-4897	configurations	
15-63	4898-4901	are	
15-64	4902-4910	feasible	
15-65	4910-4911	.	
15-66	4912-4918	Choose	
15-67	4919-4922	and	
15-68	4923-4932	Configure	
15-69	4933-4944	TimescaleDB	
15-70	4945-4948	for	
15-71	4949-4955	Better	
15-72	4956-4962	Ingest	
15-73	4963-4974	Performance	

#Text=TimescaleDB is tuned to improve ingest performance. The most common uses for TimescaleDB involve storing massive amounts of data for cloud infrastructure metrics, product analytics, web analytics, IoT devices, and many other time-series use cases. As is typical with time-series data, these scenarios are time-centric, almost solely append-only (lots of INSERTs), and require fast ingestion of large amounts of data within small time windows. TimescaleDB is packaged as an extension to PostgreSQL and is purpose-built for time-series use cases. So, if getting faster ingest performance out of PostgreSQL is necessary for your applications or systems, consider using TimescaleDB (available fully-managed via Timescale Cloud – our database-as-a-service offering, or self-managed via our free Community Edition).
16-1	4975-4986	TimescaleDB	
16-2	4987-4989	is	
16-3	4990-4995	tuned	
16-4	4996-4998	to	
16-5	4999-5006	improve	
16-6	5007-5013	ingest	
16-7	5014-5025	performance	
16-8	5025-5026	.	
16-9	5027-5030	The	
16-10	5031-5035	most	
16-11	5036-5042	common	
16-12	5043-5047	uses	
16-13	5048-5051	for	
16-14	5052-5063	TimescaleDB	
16-15	5064-5071	involve	
16-16	5072-5079	storing	
16-17	5080-5087	massive	
16-18	5088-5095	amounts	
16-19	5096-5098	of	
16-20	5099-5103	data	
16-21	5104-5107	for	
16-22	5108-5113	cloud	
16-23	5114-5128	infrastructure	
16-24	5129-5136	metrics	
16-25	5136-5137	,	
16-26	5138-5145	product	
16-27	5146-5155	analytics	
16-28	5155-5156	,	
16-29	5157-5160	web	
16-30	5161-5170	analytics	
16-31	5170-5171	,	
16-32	5172-5175	IoT	
16-33	5176-5183	devices	
16-34	5183-5184	,	
16-35	5185-5188	and	
16-36	5189-5193	many	
16-37	5194-5199	other	
16-38	5200-5211	time-series	
16-39	5212-5215	use	
16-40	5216-5221	cases	
16-41	5221-5222	.	
16-42	5223-5225	As	
16-43	5226-5228	is	
16-44	5229-5236	typical	
16-45	5237-5241	with	
16-46	5242-5253	time-series	
16-47	5254-5258	data	
16-48	5258-5259	,	
16-49	5260-5265	these	
16-50	5266-5275	scenarios	
16-51	5276-5279	are	
16-52	5280-5292	time-centric	
16-53	5292-5293	,	
16-54	5294-5300	almost	
16-55	5301-5307	solely	
16-56	5308-5319	append-only	
16-57	5320-5321	(	
16-58	5321-5325	lots	
16-59	5326-5328	of	
16-60	5329-5336	INSERTs	
16-61	5336-5337	)	
16-62	5337-5338	,	
16-63	5339-5342	and	
16-64	5343-5350	require	
16-65	5351-5355	fast	
16-66	5356-5365	ingestion	
16-67	5366-5368	of	
16-68	5369-5374	large	
16-69	5375-5382	amounts	
16-70	5383-5385	of	
16-71	5386-5390	data	
16-72	5391-5397	within	
16-73	5398-5403	small	
16-74	5404-5408	time	
16-75	5409-5416	windows	
16-76	5416-5417	.	
16-77	5418-5429	TimescaleDB	
16-78	5430-5432	is	
16-79	5433-5441	packaged	
16-80	5442-5444	as	
16-81	5445-5447	an	
16-82	5448-5457	extension	
16-83	5458-5460	to	
16-84	5461-5471	PostgreSQL	
16-85	5472-5475	and	
16-86	5476-5478	is	
16-87	5479-5492	purpose-built	
16-88	5493-5496	for	
16-89	5497-5508	time-series	
16-90	5509-5512	use	
16-91	5513-5518	cases	
16-92	5518-5519	.	
16-93	5520-5522	So	
16-94	5522-5523	,	
16-95	5524-5526	if	
16-96	5527-5534	getting	
16-97	5535-5541	faster	
16-98	5542-5548	ingest	
16-99	5549-5560	performance	
16-100	5561-5564	out	
16-101	5565-5567	of	
16-102	5568-5578	PostgreSQL	
16-103	5579-5581	is	
16-104	5582-5591	necessary	
16-105	5592-5595	for	
16-106	5596-5600	your	
16-107	5601-5613	applications	
16-108	5614-5616	or	
16-109	5617-5624	systems	
16-110	5624-5625	,	
16-111	5626-5634	consider	
16-112	5635-5640	using	
16-113	5641-5652	TimescaleDB	
16-114	5653-5654	(	
16-115	5654-5663	available	
16-116	5664-5677	fully-managed	
16-117	5678-5681	via	
16-118	5682-5691	Timescale	
16-119	5692-5697	Cloud	
16-120	5698-5699	–	
16-121	5700-5703	our	
16-122	5704-5725	database-as-a-service	
16-123	5726-5734	offering	
16-124	5734-5735	,	
16-125	5736-5738	or	
16-126	5739-5751	self-managed	
16-127	5752-5755	via	
16-128	5756-5759	our	
16-129	5760-5764	free	
16-130	5765-5774	Community	
16-131	5775-5782	Edition	
16-132	5782-5783	)	
16-133	5783-5784	.	

#Text=...and here are 8 more techniques for improving ingest performance with TimescaleDB: 6. Use Parallel Writes Each INSERT or COPY command to TimescaleDB (as in PostgreSQL) is executed as a single transaction and thus runs in a single-threaded fashion. To achieve higher ingest, you should execute multiple INSERTS or COPY commands in parallel.
17-1	5785-5786	.	
17-2	5786-5787	.	
17-3	5787-5788	.	
17-4	5788-5791	and	
17-5	5792-5796	here	
17-6	5797-5800	are	
17-7	5801-5802	8	
17-8	5803-5807	more	
17-9	5808-5818	techniques	
17-10	5819-5822	for	
17-11	5823-5832	improving	
17-12	5833-5839	ingest	
17-13	5840-5851	performance	
17-14	5852-5856	with	
17-15	5857-5868	TimescaleDB	
17-16	5868-5869	:	
17-17	5870-5871	6	
17-18	5871-5872	.	
17-19	5873-5876	Use	
17-20	5877-5885	Parallel	
17-21	5886-5892	Writes	
17-22	5893-5897	Each	
17-23	5898-5904	INSERT	
17-24	5905-5907	or	
17-25	5908-5912	COPY	
17-26	5913-5920	command	
17-27	5921-5923	to	
17-28	5924-5935	TimescaleDB	
17-29	5936-5937	(	
17-30	5937-5939	as	
17-31	5940-5942	in	
17-32	5943-5953	PostgreSQL	
17-33	5953-5954	)	
17-34	5955-5957	is	
17-35	5958-5966	executed	
17-36	5967-5969	as	
17-37	5970-5971	a	
17-38	5972-5978	single	
17-39	5979-5990	transaction	
17-40	5991-5994	and	
17-41	5995-5999	thus	
17-42	6000-6004	runs	
17-43	6005-6007	in	
17-44	6008-6009	a	
17-45	6010-6025	single-threaded	
17-46	6026-6033	fashion	
17-47	6033-6034	.	
17-48	6035-6037	To	
17-49	6038-6045	achieve	
17-50	6046-6052	higher	
17-51	6053-6059	ingest	
17-52	6059-6060	,	
17-53	6061-6064	you	
17-54	6065-6071	should	
17-55	6072-6079	execute	
17-56	6080-6088	multiple	
17-57	6089-6096	INSERTS	
17-58	6097-6099	or	
17-59	6100-6104	COPY	
17-60	6105-6113	commands	
17-61	6114-6116	in	
17-62	6117-6125	parallel	
17-63	6125-6126	.	

#Text=For help with bulk loading large CSV files in parallel, check out  TimescaleDB's parallel copy command. Pro tip: make sure your client machine has enough cores to execute this parallelism (running 32 client workers on a 2 vCPU machine doesn’t help much – the workers won’t actually be executed in parallel). 7. Insert Rows in Batches
18-1	6127-6130	For	
18-2	6131-6135	help	
18-3	6136-6140	with	
18-4	6141-6145	bulk	
18-5	6146-6153	loading	
18-6	6154-6159	large	
18-7	6160-6163	CSV	
18-8	6164-6169	files	
18-9	6170-6172	in	
18-10	6173-6181	parallel	
18-11	6181-6182	,	
18-12	6183-6188	check	
18-13	6189-6192	out	
18-14	6193-6194	 	
18-15	6194-6207	TimescaleDB's	
18-16	6208-6216	parallel	
18-17	6217-6221	copy	
18-18	6222-6229	command	
18-19	6229-6230	.	
18-20	6231-6234	Pro	
18-21	6235-6238	tip	
18-22	6238-6239	:	
18-23	6240-6244	make	
18-24	6245-6249	sure	
18-25	6250-6254	your	
18-26	6255-6261	client	
18-27	6262-6269	machine	
18-28	6270-6273	has	
18-29	6274-6280	enough	
18-30	6281-6286	cores	
18-31	6287-6289	to	
18-32	6290-6297	execute	
18-33	6298-6302	this	
18-34	6303-6314	parallelism	
18-35	6315-6316	(	
18-36	6316-6323	running	
18-37	6324-6326	32	
18-38	6327-6333	client	
18-39	6334-6341	workers	
18-40	6342-6344	on	
18-41	6345-6346	a	
18-42	6347-6348	2	
18-43	6349-6353	vCPU	
18-44	6354-6361	machine	
18-45	6362-6367	doesn	
18-46	6367-6368	’	
18-47	6368-6369	t	
18-48	6370-6374	help	
18-49	6375-6379	much	
18-50	6380-6381	–	
18-51	6382-6385	the	
18-52	6386-6393	workers	
18-53	6394-6397	won	
18-54	6397-6398	’	
18-55	6398-6399	t	
18-56	6400-6408	actually	
18-57	6409-6411	be	
18-58	6412-6420	executed	
18-59	6421-6423	in	
18-60	6424-6432	parallel	
18-61	6432-6433	)	
18-62	6433-6434	.	
18-63	6435-6436	7	
18-64	6436-6437	.	
18-65	6438-6444	Insert	
18-66	6445-6449	Rows	
18-67	6450-6452	in	
18-68	6453-6460	Batches	

#Text=In order to achieve higher ingest rates, you should insert your data with many rows in each INSERT call (or else use some bulk insert command, like COPY or our parallel copy tool). Don't insert your data row-by-row – instead, try at least hundreds (or thousands) of rows per INSERT. This allows the database to spend less time on connection management, transaction overhead, SQL parsing, etc., and more time on data processing.
19-1	6461-6463	In	
19-2	6464-6469	order	
19-3	6470-6472	to	
19-4	6473-6480	achieve	
19-5	6481-6487	higher	
19-6	6488-6494	ingest	
19-7	6495-6500	rates	
19-8	6500-6501	,	
19-9	6502-6505	you	
19-10	6506-6512	should	
19-11	6513-6519	insert	
19-12	6520-6524	your	
19-13	6525-6529	data	
19-14	6530-6534	with	
19-15	6535-6539	many	
19-16	6540-6544	rows	
19-17	6545-6547	in	
19-18	6548-6552	each	
19-19	6553-6559	INSERT	
19-20	6560-6564	call	
19-21	6565-6566	(	
19-22	6566-6568	or	
19-23	6569-6573	else	
19-24	6574-6577	use	
19-25	6578-6582	some	
19-26	6583-6587	bulk	
19-27	6588-6594	insert	
19-28	6595-6602	command	
19-29	6602-6603	,	
19-30	6604-6608	like	
19-31	6609-6613	COPY	
19-32	6614-6616	or	
19-33	6617-6620	our	
19-34	6621-6629	parallel	
19-35	6630-6634	copy	
19-36	6635-6639	tool	
19-37	6639-6640	)	
19-38	6640-6641	.	
19-39	6642-6647	Don't	
19-40	6648-6654	insert	
19-41	6655-6659	your	
19-42	6660-6664	data	
19-43	6665-6675	row-by-row	
19-44	6676-6677	–	
19-45	6678-6685	instead	
19-46	6685-6686	,	
19-47	6687-6690	try	
19-48	6691-6693	at	
19-49	6694-6699	least	
19-50	6700-6708	hundreds	
19-51	6709-6710	(	
19-52	6710-6712	or	
19-53	6713-6722	thousands	
19-54	6722-6723	)	
19-55	6724-6726	of	
19-56	6727-6731	rows	
19-57	6732-6735	per	
19-58	6736-6742	INSERT	
19-59	6742-6743	.	
19-60	6744-6748	This	
19-61	6749-6755	allows	
19-62	6756-6759	the	
19-63	6760-6768	database	
19-64	6769-6771	to	
19-65	6772-6777	spend	
19-66	6778-6782	less	
19-67	6783-6787	time	
19-68	6788-6790	on	
19-69	6791-6801	connection	
19-70	6802-6812	management	
19-71	6812-6813	,	
19-72	6814-6825	transaction	
19-73	6826-6834	overhead	
19-74	6834-6835	,	
19-75	6836-6839	SQL	
19-76	6840-6847	parsing	
19-77	6847-6848	,	
19-78	6849-6852	etc	
19-79	6852-6853	.	
19-80	6853-6854	,	
19-81	6855-6858	and	
19-82	6859-6863	more	
19-83	6864-6868	time	
19-84	6869-6871	on	
19-85	6872-6876	data	
19-86	6877-6887	processing	
19-87	6887-6888	.	

#Text=8. Properly Configure shared_buffers We typically recommend 25% of available RAM. If you install TimescaleDB via a method that runs timescaledb-tune, it should automatically configure shared_buffers to something well-suited to your hardware specs.
20-1	6889-6890	8	
20-2	6890-6891	.	
20-3	6892-6900	Properly	
20-4	6901-6910	Configure	
20-5	6911-6925	shared_buffers	
20-6	6926-6928	We	
20-7	6929-6938	typically	
20-8	6939-6948	recommend	
20-9	6949-6952	25%	
20-10	6953-6955	of	
20-11	6956-6965	available	
20-12	6966-6969	RAM	
20-13	6969-6970	.	
20-14	6971-6973	If	
20-15	6974-6977	you	
20-16	6978-6985	install	
20-17	6986-6997	TimescaleDB	
20-18	6998-7001	via	
20-19	7002-7003	a	
20-20	7004-7010	method	
20-21	7011-7015	that	
20-22	7016-7020	runs	
20-23	7021-7037	timescaledb-tune	
20-24	7037-7038	,	
20-25	7039-7041	it	
20-26	7042-7048	should	
20-27	7049-7062	automatically	
20-28	7063-7072	configure	
20-29	7073-7087	shared_buffers	
20-30	7088-7090	to	
20-31	7091-7100	something	
20-32	7101-7112	well-suited	
20-33	7113-7115	to	
20-34	7116-7120	your	
20-35	7121-7129	hardware	
20-36	7130-7135	specs	
20-37	7135-7136	.	

#Text=Note: in some cases, typically with virtualization and constrained cgroups memory allocation, these automatically-configured settings may not be ideal. To check that your shared_buffers are set to within the 25% range,  run SHOW shared_buffers from your psql connection. 9. Run our Docker Images on Linux Hosts If you are running a TimescaleDB Docker container (which runs Linux) on top of another Linux operating system, you're in great shape. The container is basically providing process isolation, and the overhead is extremely minimal.
21-1	7137-7141	Note	
21-2	7141-7142	:	
21-3	7143-7145	in	
21-4	7146-7150	some	
21-5	7151-7156	cases	
21-6	7156-7157	,	
21-7	7158-7167	typically	
21-8	7168-7172	with	
21-9	7173-7187	virtualization	
21-10	7188-7191	and	
21-11	7192-7203	constrained	
21-12	7204-7211	cgroups	
21-13	7212-7218	memory	
21-14	7219-7229	allocation	
21-15	7229-7230	,	
21-16	7231-7236	these	
21-17	7237-7261	automatically-configured	
21-18	7262-7270	settings	
21-19	7271-7274	may	
21-20	7275-7278	not	
21-21	7279-7281	be	
21-22	7282-7287	ideal	
21-23	7287-7288	.	
21-24	7289-7291	To	
21-25	7292-7297	check	
21-26	7298-7302	that	
21-27	7303-7307	your	
21-28	7308-7322	shared_buffers	
21-29	7323-7326	are	
21-30	7327-7330	set	
21-31	7331-7333	to	
21-32	7334-7340	within	
21-33	7341-7344	the	
21-34	7345-7348	25%	
21-35	7349-7354	range	
21-36	7354-7355	,	
21-37	7356-7357	 	
21-38	7357-7360	run	
21-39	7361-7365	SHOW	
21-40	7366-7380	shared_buffers	
21-41	7381-7385	from	
21-42	7386-7390	your	
21-43	7391-7395	psql	
21-44	7396-7406	connection	
21-45	7406-7407	.	
21-46	7408-7409	9	
21-47	7409-7410	.	
21-48	7411-7414	Run	
21-49	7415-7418	our	
21-50	7419-7425	Docker	
21-51	7426-7432	Images	
21-52	7433-7435	on	
21-53	7436-7441	Linux	
21-54	7442-7447	Hosts	
21-55	7448-7450	If	
21-56	7451-7454	you	
21-57	7455-7458	are	
21-58	7458-7459	 	
21-59	7459-7466	running	
21-60	7467-7468	a	
21-61	7469-7480	TimescaleDB	
21-62	7481-7487	Docker	
21-63	7488-7497	container	
21-64	7498-7499	(	
21-65	7499-7504	which	
21-66	7505-7509	runs	
21-67	7510-7515	Linux	
21-68	7515-7516	)	
21-69	7516-7517	 	
21-70	7517-7519	on	
21-71	7520-7523	top	
21-72	7524-7526	of	
21-73	7527-7534	another	
21-74	7535-7540	Linux	
21-75	7541-7550	operating	
21-76	7551-7557	system	
21-77	7557-7558	,	
21-78	7559-7565	you're	
21-79	7566-7568	in	
21-80	7569-7574	great	
21-81	7575-7580	shape	
21-82	7580-7581	.	
21-83	7582-7585	The	
21-84	7586-7595	container	
21-85	7596-7598	is	
21-86	7599-7608	basically	
21-87	7609-7618	providing	
21-88	7619-7626	process	
21-89	7627-7636	isolation	
21-90	7636-7637	,	
21-91	7638-7641	and	
21-92	7642-7645	the	
21-93	7646-7654	overhead	
21-94	7655-7657	is	
21-95	7658-7667	extremely	
21-96	7668-7675	minimal	
21-97	7675-7676	.	

#Text=If you're running the container on a Mac or Windows machine, you'll see some performance hits for the OS virtualization, including for I/O. Instead, if you need to run on Mac or Windows, we recommend installing directly instead of using a Docker image. 10. Write Data in Loose Time Order
22-1	7677-7679	If	
22-2	7680-7686	you're	
22-3	7687-7694	running	
22-4	7695-7698	the	
22-5	7699-7708	container	
22-6	7709-7711	on	
22-7	7712-7713	a	
22-8	7714-7717	Mac	
22-9	7718-7720	or	
22-10	7721-7728	Windows	
22-11	7729-7736	machine	
22-12	7736-7737	,	
22-13	7738-7744	you'll	
22-14	7745-7748	see	
22-15	7749-7753	some	
22-16	7754-7765	performance	
22-17	7766-7770	hits	
22-18	7771-7774	for	
22-19	7775-7778	the	
22-20	7779-7781	OS	
22-21	7782-7796	virtualization	
22-22	7796-7797	,	
22-23	7798-7807	including	
22-24	7808-7811	for	
22-25	7812-7813	I	
22-26	7813-7814	/	
22-27	7814-7815	O	
22-28	7815-7816	.	
22-29	7817-7824	Instead	
22-30	7824-7825	,	
22-31	7826-7828	if	
22-32	7829-7832	you	
22-33	7833-7837	need	
22-34	7838-7840	to	
22-35	7841-7844	run	
22-36	7845-7847	on	
22-37	7848-7851	Mac	
22-38	7852-7854	or	
22-39	7855-7862	Windows	
22-40	7862-7863	,	
22-41	7864-7866	we	
22-42	7867-7876	recommend	
22-43	7877-7887	installing	
22-44	7888-7896	directly	
22-45	7897-7904	instead	
22-46	7905-7907	of	
22-47	7908-7913	using	
22-48	7914-7915	a	
22-49	7916-7922	Docker	
22-50	7923-7928	image	
22-51	7928-7929	.	
22-52	7930-7932	10	
22-53	7932-7933	.	
22-54	7934-7939	Write	
22-55	7940-7944	Data	
22-56	7945-7947	in	
22-57	7948-7953	Loose	
22-58	7954-7958	Time	
22-59	7959-7964	Order	

#Text=When chunks are sized appropriately (see #11 and #12), the latest chunk(s) and their associated indexes are naturally maintained in memory. New rows inserted with recent timestamps will be written to these chunks and indexes already in memory. If a row with a sufficiently older timestamp is inserted – i.e., it's an out-of-order or backfilled write – the disk pages corresponding to the older chunk (and its indexes) will need to be read in from disk. This will significantly increase write latency and lower insert throughput.
23-1	7965-7969	When	
23-2	7970-7976	chunks	
23-3	7977-7980	are	
23-4	7981-7986	sized	
23-5	7987-8000	appropriately	
23-6	8001-8002	(	
23-7	8002-8005	see	
23-8	8006-8009	#11	
23-9	8010-8013	and	
23-10	8014-8017	#12	
23-11	8017-8018	)	
23-12	8018-8019	,	
23-13	8020-8023	the	
23-14	8024-8030	latest	
23-15	8031-8036	chunk	
23-16	8036-8037	(	
23-17	8037-8038	s	
23-18	8038-8039	)	
23-19	8040-8043	and	
23-20	8044-8049	their	
23-21	8050-8060	associated	
23-22	8061-8068	indexes	
23-23	8069-8072	are	
23-24	8073-8082	naturally	
23-25	8083-8093	maintained	
23-26	8094-8096	in	
23-27	8097-8103	memory	
23-28	8103-8104	.	
23-29	8105-8108	New	
23-30	8109-8113	rows	
23-31	8114-8122	inserted	
23-32	8123-8127	with	
23-33	8128-8134	recent	
23-34	8135-8145	timestamps	
23-35	8146-8150	will	
23-36	8151-8153	be	
23-37	8154-8161	written	
23-38	8162-8164	to	
23-39	8165-8170	these	
23-40	8171-8177	chunks	
23-41	8178-8181	and	
23-42	8182-8189	indexes	
23-43	8190-8197	already	
23-44	8198-8200	in	
23-45	8201-8207	memory	
23-46	8207-8208	.	
23-47	8209-8211	If	
23-48	8212-8213	a	
23-49	8214-8217	row	
23-50	8218-8222	with	
23-51	8223-8224	a	
23-52	8225-8237	sufficiently	
23-53	8238-8243	older	
23-54	8244-8253	timestamp	
23-55	8254-8256	is	
23-56	8257-8265	inserted	
23-57	8266-8267	–	
23-58	8268-8271	i.e	
23-59	8271-8272	.	
23-60	8272-8273	,	
23-61	8274-8278	it's	
23-62	8279-8281	an	
23-63	8282-8294	out-of-order	
23-64	8295-8297	or	
23-65	8298-8308	backfilled	
23-66	8309-8314	write	
23-67	8315-8316	–	
23-68	8317-8320	the	
23-69	8321-8325	disk	
23-70	8326-8331	pages	
23-71	8332-8345	corresponding	
23-72	8346-8348	to	
23-73	8349-8352	the	
23-74	8353-8358	older	
23-75	8359-8364	chunk	
23-76	8365-8366	(	
23-77	8366-8369	and	
23-78	8370-8373	its	
23-79	8374-8381	indexes	
23-80	8381-8382	)	
23-81	8383-8387	will	
23-82	8388-8392	need	
23-83	8393-8395	to	
23-84	8396-8398	be	
23-85	8399-8403	read	
23-86	8404-8406	in	
23-87	8407-8411	from	
23-88	8412-8416	disk	
23-89	8416-8417	.	
23-90	8418-8422	This	
23-91	8423-8427	will	
23-92	8428-8441	significantly	
23-93	8442-8450	increase	
23-94	8451-8456	write	
23-95	8457-8464	latency	
23-96	8465-8468	and	
23-97	8469-8474	lower	
23-98	8475-8481	insert	
23-99	8482-8492	throughput	
23-100	8492-8493	.	

#Text=Particularly, when you are loading data for the first time, try to load data in sorted, increasing timestamp order. Be careful if you're bulk loading data about many different servers, devices, and so forth: Do not bulk insert data sequentially by server  (i.e., all data for server A, then server B, then C, and so forth). This will cause disk thrashing as loading each server will walk through all chunks before starting anew.
24-1	8494-8506	Particularly	
24-2	8506-8507	,	
24-3	8508-8512	when	
24-4	8513-8516	you	
24-5	8517-8520	are	
24-6	8521-8528	loading	
24-7	8529-8533	data	
24-8	8534-8537	for	
24-9	8538-8541	the	
24-10	8542-8547	first	
24-11	8548-8552	time	
24-12	8552-8553	,	
24-13	8554-8557	try	
24-14	8558-8560	to	
24-15	8561-8565	load	
24-16	8566-8570	data	
24-17	8571-8573	in	
24-18	8574-8580	sorted	
24-19	8580-8581	,	
24-20	8582-8592	increasing	
24-21	8593-8602	timestamp	
24-22	8603-8608	order	
24-23	8608-8609	.	
24-24	8610-8612	Be	
24-25	8613-8620	careful	
24-26	8621-8623	if	
24-27	8624-8630	you're	
24-28	8631-8635	bulk	
24-29	8636-8643	loading	
24-30	8644-8648	data	
24-31	8649-8654	about	
24-32	8655-8659	many	
24-33	8660-8669	different	
24-34	8670-8677	servers	
24-35	8677-8678	,	
24-36	8679-8686	devices	
24-37	8686-8687	,	
24-38	8688-8691	and	
24-39	8692-8694	so	
24-40	8695-8700	forth	
24-41	8700-8701	:	
24-42	8702-8704	Do	
24-43	8705-8708	not	
24-44	8709-8713	bulk	
24-45	8714-8720	insert	
24-46	8721-8725	data	
24-47	8726-8738	sequentially	
24-48	8739-8741	by	
24-49	8742-8748	server	
24-50	8749-8750	 	
24-51	8750-8751	(	
24-52	8751-8754	i.e	
24-53	8754-8755	.	
24-54	8755-8756	,	
24-55	8757-8760	all	
24-56	8761-8765	data	
24-57	8766-8769	for	
24-58	8770-8776	server	
24-59	8777-8778	A	
24-60	8778-8779	,	
24-61	8780-8784	then	
24-62	8785-8791	server	
24-63	8792-8793	B	
24-64	8793-8794	,	
24-65	8795-8799	then	
24-66	8800-8801	C	
24-67	8801-8802	,	
24-68	8803-8806	and	
24-69	8807-8809	so	
24-70	8810-8815	forth	
24-71	8815-8816	)	
24-72	8816-8817	.	
24-73	8818-8822	This	
24-74	8823-8827	will	
24-75	8828-8833	cause	
24-76	8834-8838	disk	
24-77	8839-8848	thrashing	
24-78	8849-8851	as	
24-79	8852-8859	loading	
24-80	8860-8864	each	
24-81	8865-8871	server	
24-82	8872-8876	will	
24-83	8877-8881	walk	
24-84	8882-8889	through	
24-85	8890-8893	all	
24-86	8894-8900	chunks	
24-87	8901-8907	before	
24-88	8908-8916	starting	
24-89	8917-8921	anew	
24-90	8921-8922	.	

#Text=Instead, arrange your bulk load so that data from all servers are inserted in loose timestamp order (e.g., day 1 across all servers in parallel, then day 2 across all servers in parallel, etc.) 11. Avoid “Too Large” Chunks To maintain higher ingest rates, you want your latest chunk, as well as all its associated indexes, to stay in memory, so that writes to the chunk and index updates merely update memory. (The write is still durable, as inserts are written to the WAL on disk before the database pages are updated.)
25-1	8923-8930	Instead	
25-2	8930-8931	,	
25-3	8932-8939	arrange	
25-4	8940-8944	your	
25-5	8945-8949	bulk	
25-6	8950-8954	load	
25-7	8955-8957	so	
25-8	8958-8962	that	
25-9	8963-8967	data	
25-10	8968-8972	from	
25-11	8973-8976	all	
25-12	8977-8984	servers	
25-13	8985-8988	are	
25-14	8989-8997	inserted	
25-15	8998-9000	in	
25-16	9001-9006	loose	
25-17	9007-9016	timestamp	
25-18	9017-9022	order	
25-19	9023-9024	(	
25-20	9024-9027	e.g	
25-21	9027-9028	.	
25-22	9028-9029	,	
25-23	9030-9033	day	
25-24	9034-9035	1	
25-25	9036-9042	across	
25-26	9043-9046	all	
25-27	9047-9054	servers	
25-28	9055-9057	in	
25-29	9058-9066	parallel	
25-30	9066-9067	,	
25-31	9068-9072	then	
25-32	9073-9076	day	
25-33	9077-9078	2	
25-34	9079-9085	across	
25-35	9086-9089	all	
25-36	9090-9097	servers	
25-37	9098-9100	in	
25-38	9101-9109	parallel	
25-39	9109-9110	,	
25-40	9111-9114	etc	
25-41	9114-9115	.	
25-42	9115-9116	)	
25-43	9117-9119	11	
25-44	9119-9120	.	
25-45	9121-9126	Avoid	
25-46	9127-9128	“	
25-47	9128-9131	Too	
25-48	9132-9137	Large	
25-49	9137-9138	”	
25-50	9139-9145	Chunks	
25-51	9146-9148	To	
25-52	9149-9157	maintain	
25-53	9158-9164	higher	
25-54	9165-9171	ingest	
25-55	9172-9177	rates	
25-56	9177-9178	,	
25-57	9179-9182	you	
25-58	9183-9187	want	
25-59	9188-9192	your	
25-60	9193-9199	latest	
25-61	9200-9205	chunk	
25-62	9205-9206	,	
25-63	9207-9209	as	
25-64	9210-9214	well	
25-65	9215-9217	as	
25-66	9218-9221	all	
25-67	9222-9225	its	
25-68	9226-9236	associated	
25-69	9237-9244	indexes	
25-70	9244-9245	,	
25-71	9246-9248	to	
25-72	9249-9253	stay	
25-73	9254-9256	in	
25-74	9257-9263	memory	
25-75	9263-9264	,	
25-76	9265-9267	so	
25-77	9268-9272	that	
25-78	9273-9279	writes	
25-79	9280-9282	to	
25-80	9283-9286	the	
25-81	9287-9292	chunk	
25-82	9293-9296	and	
25-83	9297-9302	index	
25-84	9303-9310	updates	
25-85	9311-9317	merely	
25-86	9318-9324	update	
25-87	9325-9331	memory	
25-88	9331-9332	.	
25-89	9333-9334	(	
25-90	9334-9337	The	
25-91	9338-9343	write	
25-92	9344-9346	is	
25-93	9347-9352	still	
25-94	9353-9360	durable	
25-95	9360-9361	,	
25-96	9362-9364	as	
25-97	9365-9372	inserts	
25-98	9373-9376	are	
25-99	9377-9384	written	
25-100	9385-9387	to	
25-101	9388-9391	the	
25-102	9392-9395	WAL	
25-103	9396-9398	on	
25-104	9399-9403	disk	
25-105	9404-9410	before	
25-106	9411-9414	the	
25-107	9415-9423	database	
25-108	9424-9429	pages	
25-109	9430-9433	are	
25-110	9434-9441	updated	
25-111	9441-9442	.	
25-112	9442-9443	)	

#Text=If your chunks are too large, then writes to even the latest chunk will start swapping to disk. As a rule-of-thumb, we recommend that the latest chunks and all their indexes fit comfortably within the database's shared_buffers. You can check your chunk sizes via the chunk_relation_size_pretty SQL command. SQL xxxxxxxxxx
26-1	9444-9446	If	
26-2	9447-9451	your	
26-3	9452-9458	chunks	
26-4	9459-9462	are	
26-5	9463-9466	too	
26-6	9467-9472	large	
26-7	9472-9473	,	
26-8	9474-9478	then	
26-9	9479-9485	writes	
26-10	9486-9488	to	
26-11	9489-9493	even	
26-12	9494-9497	the	
26-13	9498-9504	latest	
26-14	9505-9510	chunk	
26-15	9511-9515	will	
26-16	9516-9521	start	
26-17	9522-9530	swapping	
26-18	9531-9533	to	
26-19	9534-9538	disk	
26-20	9538-9539	.	
26-21	9540-9542	As	
26-22	9543-9544	a	
26-23	9545-9558	rule-of-thumb	
26-24	9558-9559	,	
26-25	9560-9562	we	
26-26	9563-9572	recommend	
26-27	9573-9577	that	
26-28	9578-9581	the	
26-29	9582-9588	latest	
26-30	9589-9595	chunks	
26-31	9596-9599	and	
26-32	9600-9603	all	
26-33	9604-9609	their	
26-34	9610-9617	indexes	
26-35	9618-9621	fit	
26-36	9622-9633	comfortably	
26-37	9634-9640	within	
26-38	9641-9644	the	
26-39	9645-9655	database's	
26-40	9656-9670	shared_buffers	
26-41	9670-9671	.	
26-42	9672-9675	You	
26-43	9676-9679	can	
26-44	9680-9685	check	
26-45	9686-9690	your	
26-46	9691-9696	chunk	
26-47	9697-9702	sizes	
26-48	9703-9706	via	
26-49	9707-9710	the	
26-50	9711-9737	chunk_relation_size_pretty	
26-51	9738-9741	SQL	
26-52	9742-9749	command	
26-53	9749-9750	.	
26-54	9751-9754	SQL	
26-55	9755-9765	xxxxxxxxxx	

#Text==> SELECT chunk_table, table_size, index_size, toast_size, total_sizeFROM chunk_relation_size_pretty('hypertable_name')ORDER BY ranges DESC LIMIT 4; chunk_table                             | table_size | index_size | toast_size | total_size
27-1	9766-9767	=	
27-2	9767-9768	>	
27-3	9769-9775	SELECT	
27-4	9776-9787	chunk_table	
27-5	9787-9788	,	
27-6	9789-9799	table_size	
27-7	9799-9800	,	
27-8	9801-9811	index_size	
27-9	9811-9812	,	
27-10	9813-9823	toast_size	
27-11	9823-9824	,	
27-12	9825-9839	total_sizeFROM	
27-13	9840-9866	chunk_relation_size_pretty	
27-14	9866-9867	(	
27-15	9867-9868	'	
27-16	9868-9883	hypertable_name	
27-17	9883-9884	'	
27-18	9884-9885	)	
27-19	9885-9890	ORDER	
27-20	9891-9893	BY	
27-21	9894-9900	ranges	
27-22	9901-9905	DESC	
27-23	9906-9911	LIMIT	
27-24	9912-9913	4	
27-25	9913-9914	;	
27-26	9915-9926	chunk_table	
27-27	9927-9954	                           	
27-28	9955-9956	|	
27-29	9957-9967	table_size	
27-30	9968-9969	|	
27-31	9970-9980	index_size	
27-32	9981-9982	|	
27-33	9983-9993	toast_size	
27-34	9994-9995	|	
27-35	9996-10006	total_size	

#Text=-----------------------------------------+------------+------------+------------+------------ _timescaledb_internal._hyper_1_96_chunk | 200 MB     | 64 MB | 8192 bytes | 272 MB _timescaledb_internal._hyper_1_95_chunk | 388 MB     | 108 MB     | 8192 bytes | 500 MB
28-1	10007-10008	-	
28-2	10008-10009	-	
28-3	10009-10010	-	
28-4	10010-10011	-	
28-5	10011-10012	-	
28-6	10012-10013	-	
28-7	10013-10014	-	
28-8	10014-10015	-	
28-9	10015-10016	-	
28-10	10016-10017	-	
28-11	10017-10018	-	
28-12	10018-10019	-	
28-13	10019-10020	-	
28-14	10020-10021	-	
28-15	10021-10022	-	
28-16	10022-10023	-	
28-17	10023-10024	-	
28-18	10024-10025	-	
28-19	10025-10026	-	
28-20	10026-10027	-	
28-21	10027-10028	-	
28-22	10028-10029	-	
28-23	10029-10030	-	
28-24	10030-10031	-	
28-25	10031-10032	-	
28-26	10032-10033	-	
28-27	10033-10034	-	
28-28	10034-10035	-	
28-29	10035-10036	-	
28-30	10036-10037	-	
28-31	10037-10038	-	
28-32	10038-10039	-	
28-33	10039-10040	-	
28-34	10040-10041	-	
28-35	10041-10042	-	
28-36	10042-10043	-	
28-37	10043-10044	-	
28-38	10044-10045	-	
28-39	10045-10046	-	
28-40	10046-10047	-	
28-41	10047-10048	-	
28-42	10048-10049	+	
28-43	10049-10050	-	
28-44	10050-10051	-	
28-45	10051-10052	-	
28-46	10052-10053	-	
28-47	10053-10054	-	
28-48	10054-10055	-	
28-49	10055-10056	-	
28-50	10056-10057	-	
28-51	10057-10058	-	
28-52	10058-10059	-	
28-53	10059-10060	-	
28-54	10060-10061	-	
28-55	10061-10062	+	
28-56	10062-10063	-	
28-57	10063-10064	-	
28-58	10064-10065	-	
28-59	10065-10066	-	
28-60	10066-10067	-	
28-61	10067-10068	-	
28-62	10068-10069	-	
28-63	10069-10070	-	
28-64	10070-10071	-	
28-65	10071-10072	-	
28-66	10072-10073	-	
28-67	10073-10074	-	
28-68	10074-10075	+	
28-69	10075-10076	-	
28-70	10076-10077	-	
28-71	10077-10078	-	
28-72	10078-10079	-	
28-73	10079-10080	-	
28-74	10080-10081	-	
28-75	10081-10082	-	
28-76	10082-10083	-	
28-77	10083-10084	-	
28-78	10084-10085	-	
28-79	10085-10086	-	
28-80	10086-10087	-	
28-81	10087-10088	+	
28-82	10088-10089	-	
28-83	10089-10090	-	
28-84	10090-10091	-	
28-85	10091-10092	-	
28-86	10092-10093	-	
28-87	10093-10094	-	
28-88	10094-10095	-	
28-89	10095-10096	-	
28-90	10096-10097	-	
28-91	10097-10098	-	
28-92	10098-10099	-	
28-93	10099-10100	-	
28-94	10101-10102	_	
28-95	10102-10122	timescaledb_internal	
28-96	10122-10123	.	
28-97	10123-10124	_	
28-98	10124-10129	hyper	
28-99	10129-10130	_	
28-100	10130-10131	1	
28-101	10131-10132	_	
28-102	10132-10134	96	
28-103	10134-10135	_	
28-104	10135-10140	chunk	
28-105	10141-10142	|	
28-106	10143-10146	200	
28-107	10147-10149	MB	
28-108	10150-10153	   	
28-109	10154-10155	|	
28-110	10156-10158	64	
28-111	10159-10161	MB	
28-112	10162-10163	|	
28-113	10164-10168	8192	
28-114	10169-10174	bytes	
28-115	10175-10176	|	
28-116	10177-10180	272	
28-117	10181-10183	MB	
28-118	10184-10185	_	
28-119	10185-10205	timescaledb_internal	
28-120	10205-10206	.	
28-121	10206-10207	_	
28-122	10207-10212	hyper	
28-123	10212-10213	_	
28-124	10213-10214	1	
28-125	10214-10215	_	
28-126	10215-10217	95	
28-127	10217-10218	_	
28-128	10218-10223	chunk	
28-129	10224-10225	|	
28-130	10226-10229	388	
28-131	10230-10232	MB	
28-132	10233-10236	   	
28-133	10237-10238	|	
28-134	10239-10242	108	
28-135	10243-10245	MB	
28-136	10246-10249	   	
28-137	10250-10251	|	
28-138	10252-10256	8192	
28-139	10257-10262	bytes	
28-140	10263-10264	|	
28-141	10265-10268	500	
28-142	10269-10271	MB	

#Text=_timescaledb_internal._hyper_1_94_chunk | 388 MB     | 108 MB     | 8192 bytes | 500 MB _timescaledb_internal._hyper_1_93_chunk | 388 MB     | 108 MB     | 8192 bytes | 500 MB
29-1	10272-10273	_	
29-2	10273-10293	timescaledb_internal	
29-3	10293-10294	.	
29-4	10294-10295	_	
29-5	10295-10300	hyper	
29-6	10300-10301	_	
29-7	10301-10302	1	
29-8	10302-10303	_	
29-9	10303-10305	94	
29-10	10305-10306	_	
29-11	10306-10311	chunk	
29-12	10312-10313	|	
29-13	10314-10317	388	
29-14	10318-10320	MB	
29-15	10321-10324	   	
29-16	10325-10326	|	
29-17	10327-10330	108	
29-18	10331-10333	MB	
29-19	10334-10337	   	
29-20	10338-10339	|	
29-21	10340-10344	8192	
29-22	10345-10350	bytes	
29-23	10351-10352	|	
29-24	10353-10356	500	
29-25	10357-10359	MB	
29-26	10360-10361	_	
29-27	10361-10381	timescaledb_internal	
29-28	10381-10382	.	
29-29	10382-10383	_	
29-30	10383-10388	hyper	
29-31	10388-10389	_	
29-32	10389-10390	1	
29-33	10390-10391	_	
29-34	10391-10393	93	
29-35	10393-10394	_	
29-36	10394-10399	chunk	
29-37	10400-10401	|	
29-38	10402-10405	388	
29-39	10406-10408	MB	
29-40	10409-10412	   	
29-41	10413-10414	|	
29-42	10415-10418	108	
29-43	10419-10421	MB	
29-44	10422-10425	   	
29-45	10426-10427	|	
29-46	10428-10432	8192	
29-47	10433-10438	bytes	
29-48	10439-10440	|	
29-49	10441-10444	500	
29-50	10445-10447	MB	

#Text=If your chunks are too large, you can update the range for future chunks via the set_chunk_time_interval command. However, this does not modify the range of existing chunks (e.g., by rewriting large chunks into multiple small chunks). For configurations where individual chunks are much larger than your available memory, we recommend dumping and reloading your hypertable data to properly sized chunks. Keeping the latest chunk applies to all active hypertables; if you are actively writing to two hypertables, the latest chunks from both should fit within shared_buffers.
30-1	10448-10450	If	
30-2	10451-10455	your	
30-3	10456-10462	chunks	
30-4	10463-10466	are	
30-5	10467-10470	too	
30-6	10471-10476	large	
30-7	10476-10477	,	
30-8	10478-10481	you	
30-9	10482-10485	can	
30-10	10486-10492	update	
30-11	10493-10496	the	
30-12	10497-10502	range	
30-13	10503-10506	for	
30-14	10507-10513	future	
30-15	10514-10520	chunks	
30-16	10521-10524	via	
30-17	10525-10528	the	
30-18	10529-10552	set_chunk_time_interval	
30-19	10553-10560	command	
30-20	10560-10561	.	
30-21	10562-10569	However	
30-22	10569-10570	,	
30-23	10571-10575	this	
30-24	10576-10580	does	
30-25	10581-10584	not	
30-26	10585-10591	modify	
30-27	10592-10595	the	
30-28	10596-10601	range	
30-29	10602-10604	of	
30-30	10605-10613	existing	
30-31	10614-10620	chunks	
30-32	10621-10622	(	
30-33	10622-10625	e.g	
30-34	10625-10626	.	
30-35	10626-10627	,	
30-36	10628-10630	by	
30-37	10631-10640	rewriting	
30-38	10641-10646	large	
30-39	10647-10653	chunks	
30-40	10654-10658	into	
30-41	10659-10667	multiple	
30-42	10668-10673	small	
30-43	10674-10680	chunks	
30-44	10680-10681	)	
30-45	10681-10682	.	
30-46	10683-10686	For	
30-47	10687-10701	configurations	
30-48	10702-10707	where	
30-49	10708-10718	individual	
30-50	10719-10725	chunks	
30-51	10726-10729	are	
30-52	10730-10734	much	
30-53	10735-10741	larger	
30-54	10742-10746	than	
30-55	10747-10751	your	
30-56	10752-10761	available	
30-57	10762-10768	memory	
30-58	10768-10769	,	
30-59	10770-10772	we	
30-60	10773-10782	recommend	
30-61	10783-10790	dumping	
30-62	10791-10794	and	
30-63	10795-10804	reloading	
30-64	10805-10809	your	
30-65	10810-10820	hypertable	
30-66	10821-10825	data	
30-67	10826-10828	to	
30-68	10829-10837	properly	
30-69	10838-10843	sized	
30-70	10844-10850	chunks	
30-71	10850-10851	.	
30-72	10852-10859	Keeping	
30-73	10860-10863	the	
30-74	10864-10870	latest	
30-75	10871-10876	chunk	
30-76	10877-10884	applies	
30-77	10885-10887	to	
30-78	10888-10891	all	
30-79	10892-10898	active	
30-80	10899-10910	hypertables	
30-81	10910-10911	;	
30-82	10912-10914	if	
30-83	10915-10918	you	
30-84	10919-10922	are	
30-85	10923-10931	actively	
30-86	10932-10939	writing	
30-87	10940-10942	to	
30-88	10943-10946	two	
30-89	10947-10958	hypertables	
30-90	10958-10959	,	
30-91	10960-10963	the	
30-92	10964-10970	latest	
30-93	10971-10977	chunks	
30-94	10978-10982	from	
30-95	10983-10987	both	
30-96	10988-10994	should	
30-97	10995-10998	fit	
30-98	10999-11005	within	
30-99	11006-11020	shared_buffers	
30-100	11020-11021	.	

#Text=12. Avoid Too Many or Too Small Chunks Unless you're running multi-node TimescaleDB, we don't currently recommend using space partitioning. And if you do, remember that this number of chunks is created for every time interval.
31-1	11022-11024	12	
31-2	11024-11025	.	
31-3	11026-11031	Avoid	
31-4	11032-11035	Too	
31-5	11036-11040	Many	
31-6	11041-11043	or	
31-7	11044-11047	Too	
31-8	11048-11053	Small	
31-9	11054-11060	Chunks	
31-10	11061-11067	Unless	
31-11	11068-11074	you're	
31-12	11075-11082	running	
31-13	11083-11093	multi-node	
31-14	11094-11105	TimescaleDB	
31-15	11105-11106	,	
31-16	11107-11109	we	
31-17	11110-11115	don't	
31-18	11116-11125	currently	
31-19	11126-11135	recommend	
31-20	11136-11141	using	
31-21	11142-11147	space	
31-22	11148-11160	partitioning	
31-23	11160-11161	.	
31-24	11162-11165	And	
31-25	11166-11168	if	
31-26	11169-11172	you	
31-27	11173-11175	do	
31-28	11175-11176	,	
31-29	11177-11185	remember	
31-30	11186-11190	that	
31-31	11191-11195	this	
31-32	11196-11202	number	
31-33	11203-11205	of	
31-34	11206-11212	chunks	
31-35	11213-11215	is	
31-36	11216-11223	created	
31-37	11224-11227	for	
31-38	11228-11233	every	
31-39	11234-11238	time	
31-40	11239-11247	interval	
31-41	11247-11248	.	

#Text=So, if you create 64 space partitions and daily chunks, you'll have 24,640 chunks per year. This may lead to a bigger performance hit during query time (due to planning overhead) compared to insert time, but something to consider nonetheless.Another thing to avoid: using an incorrect integer value when you specify the time interval range in create_hypertable. Pro tip: If your time column uses a native timestamp type, then any integer value should be in terms of microseconds (so one day = 86400000000). We recommend using interval types ('1 day') to avoid potential for any confusion.
32-1	11249-11251	So	
32-2	11251-11252	,	
32-3	11253-11255	if	
32-4	11256-11259	you	
32-5	11260-11266	create	
32-6	11267-11269	64	
32-7	11270-11275	space	
32-8	11276-11286	partitions	
32-9	11287-11290	and	
32-10	11291-11296	daily	
32-11	11297-11303	chunks	
32-12	11303-11304	,	
32-13	11305-11311	you'll	
32-14	11312-11316	have	
32-15	11317-11323	24,640	
32-16	11324-11330	chunks	
32-17	11331-11334	per	
32-18	11335-11339	year	
32-19	11339-11340	.	
32-20	11341-11345	This	
32-21	11346-11349	may	
32-22	11350-11354	lead	
32-23	11355-11357	to	
32-24	11358-11359	a	
32-25	11360-11366	bigger	
32-26	11367-11378	performance	
32-27	11379-11382	hit	
32-28	11383-11389	during	
32-29	11390-11395	query	
32-30	11396-11400	time	
32-31	11401-11402	(	
32-32	11402-11405	due	
32-33	11406-11408	to	
32-34	11409-11417	planning	
32-35	11418-11426	overhead	
32-36	11426-11427	)	
32-37	11428-11436	compared	
32-38	11437-11439	to	
32-39	11440-11446	insert	
32-40	11447-11451	time	
32-41	11451-11452	,	
32-42	11453-11456	but	
32-43	11457-11466	something	
32-44	11467-11469	to	
32-45	11470-11478	consider	
32-46	11479-11498	nonetheless.Another	
32-47	11499-11504	thing	
32-48	11505-11507	to	
32-49	11508-11513	avoid	
32-50	11513-11514	:	
32-51	11515-11520	using	
32-52	11521-11523	an	
32-53	11524-11533	incorrect	
32-54	11534-11541	integer	
32-55	11542-11547	value	
32-56	11548-11552	when	
32-57	11553-11556	you	
32-58	11557-11564	specify	
32-59	11565-11568	the	
32-60	11569-11573	time	
32-61	11574-11582	interval	
32-62	11583-11588	range	
32-63	11589-11591	in	
32-64	11592-11609	create_hypertable	
32-65	11609-11610	.	
32-66	11611-11614	Pro	
32-67	11615-11618	tip	
32-68	11618-11619	:	
32-69	11620-11622	If	
32-70	11623-11627	your	
32-71	11628-11632	time	
32-72	11633-11639	column	
32-73	11640-11644	uses	
32-74	11645-11646	a	
32-75	11647-11653	native	
32-76	11654-11663	timestamp	
32-77	11664-11668	type	
32-78	11668-11669	,	
32-79	11670-11674	then	
32-80	11675-11678	any	
32-81	11679-11686	integer	
32-82	11687-11692	value	
32-83	11693-11699	should	
32-84	11700-11702	be	
32-85	11703-11705	in	
32-86	11706-11711	terms	
32-87	11712-11714	of	
32-88	11715-11727	microseconds	
32-89	11728-11729	(	
32-90	11729-11731	so	
32-91	11732-11735	one	
32-92	11736-11739	day	
32-93	11740-11741	=	
32-94	11742-11753	86400000000	
32-95	11753-11754	)	
32-96	11754-11755	.	
32-97	11756-11758	We	
32-98	11759-11768	recommend	
32-99	11769-11774	using	
32-100	11775-11783	interval	
32-101	11784-11789	types	
32-102	11790-11791	(	
32-103	11791-11792	'	
32-104	11792-11793	1	
32-105	11794-11797	day	
32-106	11797-11798	'	
32-107	11798-11799	)	
32-108	11800-11802	to	
32-109	11803-11808	avoid	
32-110	11809-11818	potential	
32-111	11819-11822	for	
32-112	11823-11826	any	
32-113	11827-11836	confusion	
32-114	11836-11837	.	

#Text=If your time column is an integer or bigint itself,  use the appropriate range: if the integer timestamp is in seconds, use 86400; if the bigint timestamp is in nanoseconds, use 86400000000000.In both cases, you can use chunk_relation_size_pretty to make sure your chunk sizes or partition ranges seem reasonable: SQL xxxxxxxxxx => SELECT chunk_table, ranges, total_size FROM chunk_relation_size_pretty('hypertable_name') ORDER BY ranges DESC LIMIT 4;
33-1	11838-11840	If	
33-2	11841-11845	your	
33-3	11846-11850	time	
33-4	11851-11857	column	
33-5	11858-11860	is	
33-6	11861-11863	an	
33-7	11864-11871	integer	
33-8	11872-11874	or	
33-9	11875-11881	bigint	
33-10	11882-11888	itself	
33-11	11888-11889	,	
33-12	11890-11891	 	
33-13	11891-11894	use	
33-14	11895-11898	the	
33-15	11899-11910	appropriate	
33-16	11911-11916	range	
33-17	11916-11917	:	
33-18	11918-11920	if	
33-19	11921-11924	the	
33-20	11925-11932	integer	
33-21	11933-11942	timestamp	
33-22	11943-11945	is	
33-23	11946-11948	in	
33-24	11949-11956	seconds	
33-25	11956-11957	,	
33-26	11958-11961	use	
33-27	11962-11967	86400	
33-28	11967-11968	;	
33-29	11969-11971	if	
33-30	11972-11975	the	
33-31	11976-11982	bigint	
33-32	11983-11992	timestamp	
33-33	11993-11995	is	
33-34	11996-11998	in	
33-35	11999-12010	nanoseconds	
33-36	12010-12011	,	
33-37	12012-12015	use	
33-38	12016-12030	86400000000000	
33-39	12030-12031	.	
33-40	12031-12033	In	
33-41	12034-12038	both	
33-42	12039-12044	cases	
33-43	12044-12045	,	
33-44	12046-12049	you	
33-45	12050-12053	can	
33-46	12054-12057	use	
33-47	12058-12084	chunk_relation_size_pretty	
33-48	12085-12087	to	
33-49	12088-12092	make	
33-50	12093-12097	sure	
33-51	12098-12102	your	
33-52	12103-12108	chunk	
33-53	12109-12114	sizes	
33-54	12115-12117	or	
33-55	12118-12127	partition	
33-56	12128-12134	ranges	
33-57	12135-12139	seem	
33-58	12140-12150	reasonable	
33-59	12150-12151	:	
33-60	12152-12155	SQL	
33-61	12156-12166	xxxxxxxxxx	
33-62	12167-12168	=	
33-63	12168-12169	>	
33-64	12170-12176	SELECT	
33-65	12177-12188	chunk_table	
33-66	12188-12189	,	
33-67	12190-12196	ranges	
33-68	12196-12197	,	
33-69	12198-12208	total_size	
33-70	12209-12213	FROM	
33-71	12214-12240	chunk_relation_size_pretty	
33-72	12240-12241	(	
33-73	12241-12242	'	
33-74	12242-12257	hypertable_name	
33-75	12257-12258	'	
33-76	12258-12259	)	
33-77	12260-12265	ORDER	
33-78	12266-12268	BY	
33-79	12269-12275	ranges	
33-80	12276-12280	DESC	
33-81	12281-12286	LIMIT	
33-82	12287-12288	4	
33-83	12288-12289	;	

#Text=chunk_table                             |                         ranges | total_size -----------------------------------------+---------------------------------------------------------+------------
34-1	12290-12301	chunk_table	
34-2	12302-12329	                           	
34-3	12330-12331	|	
34-4	12332-12355	                       	
34-5	12356-12362	ranges	
34-6	12363-12364	|	
34-7	12365-12375	total_size	
34-8	12376-12377	-	
34-9	12377-12378	-	
34-10	12378-12379	-	
34-11	12379-12380	-	
34-12	12380-12381	-	
34-13	12381-12382	-	
34-14	12382-12383	-	
34-15	12383-12384	-	
34-16	12384-12385	-	
34-17	12385-12386	-	
34-18	12386-12387	-	
34-19	12387-12388	-	
34-20	12388-12389	-	
34-21	12389-12390	-	
34-22	12390-12391	-	
34-23	12391-12392	-	
34-24	12392-12393	-	
34-25	12393-12394	-	
34-26	12394-12395	-	
34-27	12395-12396	-	
34-28	12396-12397	-	
34-29	12397-12398	-	
34-30	12398-12399	-	
34-31	12399-12400	-	
34-32	12400-12401	-	
34-33	12401-12402	-	
34-34	12402-12403	-	
34-35	12403-12404	-	
34-36	12404-12405	-	
34-37	12405-12406	-	
34-38	12406-12407	-	
34-39	12407-12408	-	
34-40	12408-12409	-	
34-41	12409-12410	-	
34-42	12410-12411	-	
34-43	12411-12412	-	
34-44	12412-12413	-	
34-45	12413-12414	-	
34-46	12414-12415	-	
34-47	12415-12416	-	
34-48	12416-12417	-	
34-49	12417-12418	+	
34-50	12418-12419	-	
34-51	12419-12420	-	
34-52	12420-12421	-	
34-53	12421-12422	-	
34-54	12422-12423	-	
34-55	12423-12424	-	
34-56	12424-12425	-	
34-57	12425-12426	-	
34-58	12426-12427	-	
34-59	12427-12428	-	
34-60	12428-12429	-	
34-61	12429-12430	-	
34-62	12430-12431	-	
34-63	12431-12432	-	
34-64	12432-12433	-	
34-65	12433-12434	-	
34-66	12434-12435	-	
34-67	12435-12436	-	
34-68	12436-12437	-	
34-69	12437-12438	-	
34-70	12438-12439	-	
34-71	12439-12440	-	
34-72	12440-12441	-	
34-73	12441-12442	-	
34-74	12442-12443	-	
34-75	12443-12444	-	
34-76	12444-12445	-	
34-77	12445-12446	-	
34-78	12446-12447	-	
34-79	12447-12448	-	
34-80	12448-12449	-	
34-81	12449-12450	-	
34-82	12450-12451	-	
34-83	12451-12452	-	
34-84	12452-12453	-	
34-85	12453-12454	-	
34-86	12454-12455	-	
34-87	12455-12456	-	
34-88	12456-12457	-	
34-89	12457-12458	-	
34-90	12458-12459	-	
34-91	12459-12460	-	
34-92	12460-12461	-	
34-93	12461-12462	-	
34-94	12462-12463	-	
34-95	12463-12464	-	
34-96	12464-12465	-	
34-97	12465-12466	-	
34-98	12466-12467	-	
34-99	12467-12468	-	
34-100	12468-12469	-	
34-101	12469-12470	-	
34-102	12470-12471	-	
34-103	12471-12472	-	
34-104	12472-12473	-	
34-105	12473-12474	-	
34-106	12474-12475	-	
34-107	12475-12476	+	
34-108	12476-12477	-	
34-109	12477-12478	-	
34-110	12478-12479	-	
34-111	12479-12480	-	
34-112	12480-12481	-	
34-113	12481-12482	-	
34-114	12482-12483	-	
34-115	12483-12484	-	
34-116	12484-12485	-	
34-117	12485-12486	-	
34-118	12486-12487	-	
34-119	12487-12488	-	

#Text=_timescaledb_internal._hyper_1_96_chunk | {"['2020-02-13 23:00:00+00','2020-02-14 00:00:00+00')"} | 272 MB _timescaledb_internal._hyper_1_95_chunk | {"['2020-02-13 22:00:00+00','2020-02-13 23:00:00+00')"} | 500 MB
35-1	12489-12490	_	
35-2	12490-12510	timescaledb_internal	
35-3	12510-12511	.	
35-4	12511-12512	_	
35-5	12512-12517	hyper	
35-6	12517-12518	_	
35-7	12518-12519	1	
35-8	12519-12520	_	
35-9	12520-12522	96	
35-10	12522-12523	_	
35-11	12523-12528	chunk	
35-12	12529-12530	|	
35-13	12531-12532	{	
35-14	12532-12533	"	
35-15	12533-12534	[	
35-16	12534-12535	'	
35-17	12535-12539	2020	
35-18	12539-12540	-	
35-19	12540-12542	02	
35-20	12542-12543	-	
35-21	12543-12545	13	
35-22	12546-12548	23	
35-23	12548-12549	:	
35-24	12549-12551	00	
35-25	12551-12552	:	
35-26	12552-12554	00	
35-27	12554-12555	+	
35-28	12555-12557	00	
35-29	12557-12558	'	
35-30	12558-12559	,	
35-31	12559-12560	'	
35-32	12560-12564	2020	
35-33	12564-12565	-	
35-34	12565-12567	02	
35-35	12567-12568	-	
35-36	12568-12570	14	
35-37	12571-12573	00	
35-38	12573-12574	:	
35-39	12574-12576	00	
35-40	12576-12577	:	
35-41	12577-12579	00	
35-42	12579-12580	+	
35-43	12580-12582	00	
35-44	12582-12583	'	
35-45	12583-12584	)	
35-46	12584-12585	"	
35-47	12585-12586	}	
35-48	12587-12588	|	
35-49	12589-12592	272	
35-50	12593-12595	MB	
35-51	12596-12597	_	
35-52	12597-12617	timescaledb_internal	
35-53	12617-12618	.	
35-54	12618-12619	_	
35-55	12619-12624	hyper	
35-56	12624-12625	_	
35-57	12625-12626	1	
35-58	12626-12627	_	
35-59	12627-12629	95	
35-60	12629-12630	_	
35-61	12630-12635	chunk	
35-62	12636-12637	|	
35-63	12638-12639	{	
35-64	12639-12640	"	
35-65	12640-12641	[	
35-66	12641-12642	'	
35-67	12642-12646	2020	
35-68	12646-12647	-	
35-69	12647-12649	02	
35-70	12649-12650	-	
35-71	12650-12652	13	
35-72	12653-12655	22	
35-73	12655-12656	:	
35-74	12656-12658	00	
35-75	12658-12659	:	
35-76	12659-12661	00	
35-77	12661-12662	+	
35-78	12662-12664	00	
35-79	12664-12665	'	
35-80	12665-12666	,	
35-81	12666-12667	'	
35-82	12667-12671	2020	
35-83	12671-12672	-	
35-84	12672-12674	02	
35-85	12674-12675	-	
35-86	12675-12677	13	
35-87	12678-12680	23	
35-88	12680-12681	:	
35-89	12681-12683	00	
35-90	12683-12684	:	
35-91	12684-12686	00	
35-92	12686-12687	+	
35-93	12687-12689	00	
35-94	12689-12690	'	
35-95	12690-12691	)	
35-96	12691-12692	"	
35-97	12692-12693	}	
35-98	12694-12695	|	
35-99	12696-12699	500	
35-100	12700-12702	MB	

#Text=_timescaledb_internal._hyper_1_94_chunk | {"['2020-02-13 21:30:00+00','2020-02-13 22:00:00+00')"} | 500 MB _timescaledb_internal._hyper_1_93_chunk | {"['2020-02-13 20:00:00+00','2020-02-13 21:00:00+00')"} | 500 MB 13. Watch Row Width
36-1	12703-12704	_	
36-2	12704-12724	timescaledb_internal	
36-3	12724-12725	.	
36-4	12725-12726	_	
36-5	12726-12731	hyper	
36-6	12731-12732	_	
36-7	12732-12733	1	
36-8	12733-12734	_	
36-9	12734-12736	94	
36-10	12736-12737	_	
36-11	12737-12742	chunk	
36-12	12743-12744	|	
36-13	12745-12746	{	
36-14	12746-12747	"	
36-15	12747-12748	[	
36-16	12748-12749	'	
36-17	12749-12753	2020	
36-18	12753-12754	-	
36-19	12754-12756	02	
36-20	12756-12757	-	
36-21	12757-12759	13	
36-22	12760-12762	21	
36-23	12762-12763	:	
36-24	12763-12765	30	
36-25	12765-12766	:	
36-26	12766-12768	00	
36-27	12768-12769	+	
36-28	12769-12771	00	
36-29	12771-12772	'	
36-30	12772-12773	,	
36-31	12773-12774	'	
36-32	12774-12778	2020	
36-33	12778-12779	-	
36-34	12779-12781	02	
36-35	12781-12782	-	
36-36	12782-12784	13	
36-37	12785-12787	22	
36-38	12787-12788	:	
36-39	12788-12790	00	
36-40	12790-12791	:	
36-41	12791-12793	00	
36-42	12793-12794	+	
36-43	12794-12796	00	
36-44	12796-12797	'	
36-45	12797-12798	)	
36-46	12798-12799	"	
36-47	12799-12800	}	
36-48	12801-12802	|	
36-49	12803-12806	500	
36-50	12807-12809	MB	
36-51	12810-12811	_	
36-52	12811-12831	timescaledb_internal	
36-53	12831-12832	.	
36-54	12832-12833	_	
36-55	12833-12838	hyper	
36-56	12838-12839	_	
36-57	12839-12840	1	
36-58	12840-12841	_	
36-59	12841-12843	93	
36-60	12843-12844	_	
36-61	12844-12849	chunk	
36-62	12850-12851	|	
36-63	12852-12853	{	
36-64	12853-12854	"	
36-65	12854-12855	[	
36-66	12855-12856	'	
36-67	12856-12860	2020	
36-68	12860-12861	-	
36-69	12861-12863	02	
36-70	12863-12864	-	
36-71	12864-12866	13	
36-72	12867-12869	20	
36-73	12869-12870	:	
36-74	12870-12872	00	
36-75	12872-12873	:	
36-76	12873-12875	00	
36-77	12875-12876	+	
36-78	12876-12878	00	
36-79	12878-12879	'	
36-80	12879-12880	,	
36-81	12880-12881	'	
36-82	12881-12885	2020	
36-83	12885-12886	-	
36-84	12886-12888	02	
36-85	12888-12889	-	
36-86	12889-12891	13	
36-87	12892-12894	21	
36-88	12894-12895	:	
36-89	12895-12897	00	
36-90	12897-12898	:	
36-91	12898-12900	00	
36-92	12900-12901	+	
36-93	12901-12903	00	
36-94	12903-12904	'	
36-95	12904-12905	)	
36-96	12905-12906	"	
36-97	12906-12907	}	
36-98	12908-12909	|	
36-99	12910-12913	500	
36-100	12914-12916	MB	
36-101	12917-12919	13	
36-102	12919-12920	.	
36-103	12921-12926	Watch	
36-104	12927-12930	Row	
36-105	12931-12936	Width	

#Text=The overhead from inserting a wide row (say, 50, 100, 250 columns) is going to be much higher than inserting a narrower row (more network I/O, more parsing and data processing, larger writes to WAL, etc.). Most of our published benchmarks are using TSBS, which uses 12 columns per row. So you'll correspondingly see lower insert rates if you have very wide rows. If you are considering very wide rows because you have different types of records, and each type has a disjoint set of columns, you might want to try using multiple hypertables (one per record type) – particularly if you don't often query across these types.
37-1	12937-12940	The	
37-2	12941-12949	overhead	
37-3	12950-12954	from	
37-4	12955-12964	inserting	
37-5	12965-12966	a	
37-6	12967-12971	wide	
37-7	12972-12975	row	
37-8	12976-12977	(	
37-9	12977-12980	say	
37-10	12980-12981	,	
37-11	12982-12984	50	
37-12	12984-12985	,	
37-13	12986-12989	100	
37-14	12989-12990	,	
37-15	12991-12994	250	
37-16	12995-13002	columns	
37-17	13002-13003	)	
37-18	13004-13006	is	
37-19	13007-13012	going	
37-20	13013-13015	to	
37-21	13016-13018	be	
37-22	13019-13023	much	
37-23	13024-13030	higher	
37-24	13031-13035	than	
37-25	13036-13045	inserting	
37-26	13046-13047	a	
37-27	13048-13056	narrower	
37-28	13057-13060	row	
37-29	13061-13062	(	
37-30	13062-13066	more	
37-31	13067-13074	network	
37-32	13075-13076	I	
37-33	13076-13077	/	
37-34	13077-13078	O	
37-35	13078-13079	,	
37-36	13080-13084	more	
37-37	13085-13092	parsing	
37-38	13093-13096	and	
37-39	13097-13101	data	
37-40	13102-13112	processing	
37-41	13112-13113	,	
37-42	13114-13120	larger	
37-43	13121-13127	writes	
37-44	13128-13130	to	
37-45	13131-13134	WAL	
37-46	13134-13135	,	
37-47	13136-13139	etc	
37-48	13139-13140	.	
37-49	13140-13141	)	
37-50	13141-13142	.	
37-51	13143-13147	Most	
37-52	13148-13150	of	
37-53	13151-13154	our	
37-54	13155-13164	published	
37-55	13165-13175	benchmarks	
37-56	13176-13179	are	
37-57	13180-13185	using	
37-58	13186-13190	TSBS	
37-59	13190-13191	,	
37-60	13192-13197	which	
37-61	13198-13202	uses	
37-62	13203-13205	12	
37-63	13206-13213	columns	
37-64	13214-13217	per	
37-65	13218-13221	row	
37-66	13221-13222	.	
37-67	13223-13225	So	
37-68	13226-13232	you'll	
37-69	13233-13248	correspondingly	
37-70	13249-13252	see	
37-71	13253-13258	lower	
37-72	13259-13265	insert	
37-73	13266-13271	rates	
37-74	13272-13274	if	
37-75	13275-13278	you	
37-76	13279-13283	have	
37-77	13284-13288	very	
37-78	13289-13293	wide	
37-79	13294-13298	rows	
37-80	13298-13299	.	
37-81	13300-13302	If	
37-82	13303-13306	you	
37-83	13307-13310	are	
37-84	13311-13322	considering	
37-85	13323-13327	very	
37-86	13328-13332	wide	
37-87	13333-13337	rows	
37-88	13338-13345	because	
37-89	13346-13349	you	
37-90	13350-13354	have	
37-91	13355-13364	different	
37-92	13365-13370	types	
37-93	13371-13373	of	
37-94	13374-13381	records	
37-95	13381-13382	,	
37-96	13383-13386	and	
37-97	13387-13391	each	
37-98	13392-13396	type	
37-99	13397-13400	has	
37-100	13401-13402	a	
37-101	13403-13411	disjoint	
37-102	13412-13415	set	
37-103	13416-13418	of	
37-104	13419-13426	columns	
37-105	13426-13427	,	
37-106	13428-13431	you	
37-107	13432-13437	might	
37-108	13438-13442	want	
37-109	13443-13445	to	
37-110	13446-13449	try	
37-111	13450-13455	using	
37-112	13456-13464	multiple	
37-113	13465-13476	hypertables	
37-114	13477-13478	(	
37-115	13478-13481	one	
37-116	13482-13485	per	
37-117	13486-13492	record	
37-118	13493-13497	type	
37-119	13497-13498	)	
37-120	13499-13500	–	
37-121	13501-13513	particularly	
37-122	13514-13516	if	
37-123	13517-13520	you	
37-124	13521-13526	don't	
37-125	13527-13532	often	
37-126	13533-13538	query	
37-127	13539-13545	across	
37-128	13546-13551	these	
37-129	13552-13557	types	
37-130	13557-13558	.	

#Text=Additionally, JSONB records are another good option if virtually all columns are sparse. That said, if you're using sparse wide rows, use NULLs for missing records whenever possible, not default values, for the most performance gains (NULLs are much cheaper to store and query). Finally, the cost of wide rows are actually much less once you compress rows using TimescaleDB’s native compression.  Rows are converted into more columnar compressed form, sparse columns compress extremely well, and compressed columns aren’t read from disk for queries that don’t fetch individual columns.
38-1	13559-13571	Additionally	
38-2	13571-13572	,	
38-3	13573-13578	JSONB	
38-4	13579-13586	records	
38-5	13587-13590	are	
38-6	13591-13598	another	
38-7	13599-13603	good	
38-8	13604-13610	option	
38-9	13611-13613	if	
38-10	13614-13623	virtually	
38-11	13624-13627	all	
38-12	13628-13635	columns	
38-13	13636-13639	are	
38-14	13640-13646	sparse	
38-15	13646-13647	.	
38-16	13648-13652	That	
38-17	13653-13657	said	
38-18	13657-13658	,	
38-19	13659-13661	if	
38-20	13662-13668	you're	
38-21	13669-13674	using	
38-22	13675-13681	sparse	
38-23	13682-13686	wide	
38-24	13687-13691	rows	
38-25	13691-13692	,	
38-26	13693-13696	use	
38-27	13697-13702	NULLs	
38-28	13703-13706	for	
38-29	13707-13714	missing	
38-30	13715-13722	records	
38-31	13723-13731	whenever	
38-32	13732-13740	possible	
38-33	13740-13741	,	
38-34	13742-13745	not	
38-35	13746-13753	default	
38-36	13754-13760	values	
38-37	13760-13761	,	
38-38	13762-13765	for	
38-39	13766-13769	the	
38-40	13770-13774	most	
38-41	13775-13786	performance	
38-42	13787-13792	gains	
38-43	13793-13794	(	
38-44	13794-13799	NULLs	
38-45	13800-13803	are	
38-46	13804-13808	much	
38-47	13809-13816	cheaper	
38-48	13817-13819	to	
38-49	13820-13825	store	
38-50	13826-13829	and	
38-51	13830-13835	query	
38-52	13835-13836	)	
38-53	13836-13837	.	
38-54	13838-13845	Finally	
38-55	13845-13846	,	
38-56	13847-13850	the	
38-57	13851-13855	cost	
38-58	13856-13858	of	
38-59	13859-13863	wide	
38-60	13864-13868	rows	
38-61	13869-13872	are	
38-62	13873-13881	actually	
38-63	13882-13886	much	
38-64	13887-13891	less	
38-65	13892-13896	once	
38-66	13897-13900	you	
38-67	13901-13909	compress	
38-68	13910-13914	rows	
38-69	13915-13920	using	
38-70	13921-13932	TimescaleDB	
38-71	13932-13933	’	
38-72	13933-13934	s	
38-73	13935-13941	native	
38-74	13942-13953	compression	
38-75	13953-13954	.	
38-76	13955-13956	 	
38-77	13956-13960	Rows	
38-78	13961-13964	are	
38-79	13965-13974	converted	
38-80	13975-13979	into	
38-81	13980-13984	more	
38-82	13985-13993	columnar	
38-83	13994-14004	compressed	
38-84	14005-14009	form	
38-85	14009-14010	,	
38-86	14011-14017	sparse	
38-87	14018-14025	columns	
38-88	14026-14034	compress	
38-89	14035-14044	extremely	
38-90	14045-14049	well	
38-91	14049-14050	,	
38-92	14051-14054	and	
38-93	14055-14065	compressed	
38-94	14066-14073	columns	
38-95	14074-14078	aren	
38-96	14078-14079	’	
38-97	14079-14080	t	
38-98	14081-14085	read	
38-99	14086-14090	from	
38-100	14091-14095	disk	
38-101	14096-14099	for	
38-102	14100-14107	queries	
38-103	14108-14112	that	
38-104	14113-14116	don	
38-105	14116-14117	’	
38-106	14117-14118	t	
38-107	14119-14124	fetch	
38-108	14125-14135	individual	
38-109	14136-14143	columns	
38-110	14143-14144	.	

#Text=Summary If ingest performance is critical to your use case, consider using TimescaleDB. You can get started with Timescale Cloud for free today, or download TimescaleDB to your own machine or cloud instance for free.
39-1	14145-14152	Summary	
39-2	14153-14155	If	
39-3	14156-14162	ingest	
39-4	14163-14174	performance	
39-5	14175-14177	is	
39-6	14178-14186	critical	
39-7	14187-14189	to	
39-8	14190-14194	your	
39-9	14195-14198	use	
39-10	14199-14203	case	
39-11	14203-14204	,	
39-12	14205-14213	consider	
39-13	14214-14219	using	
39-14	14220-14231	TimescaleDB	
39-15	14231-14232	.	
39-16	14233-14236	You	
39-17	14237-14240	can	
39-18	14241-14244	get	
39-19	14245-14252	started	
39-20	14253-14257	with	
39-21	14258-14267	Timescale	
39-22	14268-14273	Cloud	
39-23	14274-14277	for	
39-24	14278-14282	free	
39-25	14283-14288	today	
39-26	14288-14289	,	
39-27	14290-14292	or	
39-28	14293-14301	download	
39-29	14302-14313	TimescaleDB	
39-30	14314-14316	to	
39-31	14317-14321	your	
39-32	14322-14325	own	
39-33	14326-14333	machine	
39-34	14334-14336	or	
39-35	14337-14342	cloud	
39-36	14343-14351	instance	
39-37	14352-14355	for	
39-38	14356-14360	free	
39-39	14360-14361	.	

#Text=Our approach to support is to address your whole solution, so we're here to help help you achieve your desired performance results (see more details about our Customer Care team and ethos). Lastly, our Slack community is a great place to connect with 4K+ other developers with similar use cases, as well as myself, Timescale engineers, product team members, and Developer Advocates. Topics: postgresql, database performance,
40-1	14362-14365	Our	
40-2	14366-14374	approach	
40-3	14375-14377	to	
40-4	14378-14385	support	
40-5	14386-14388	is	
40-6	14389-14391	to	
40-7	14392-14399	address	
40-8	14400-14404	your	
40-9	14405-14410	whole	
40-10	14411-14419	solution	
40-11	14419-14420	,	
40-12	14421-14423	so	
40-13	14424-14429	we're	
40-14	14430-14434	here	
40-15	14435-14437	to	
40-16	14438-14442	help	
40-17	14443-14447	help	
40-18	14448-14451	you	
40-19	14452-14459	achieve	
40-20	14460-14464	your	
40-21	14465-14472	desired	
40-22	14473-14484	performance	
40-23	14485-14492	results	
40-24	14493-14494	(	
40-25	14494-14497	see	
40-26	14498-14502	more	
40-27	14503-14510	details	
40-28	14511-14516	about	
40-29	14517-14520	our	
40-30	14521-14529	Customer	
40-31	14530-14534	Care	
40-32	14535-14539	team	
40-33	14540-14543	and	
40-34	14544-14549	ethos	
40-35	14549-14550	)	
40-36	14550-14551	.	
40-37	14552-14558	Lastly	
40-38	14558-14559	,	
40-39	14560-14563	our	
40-40	14564-14569	Slack	
40-41	14570-14579	community	
40-42	14580-14582	is	
40-43	14583-14584	a	
40-44	14585-14590	great	
40-45	14591-14596	place	
40-46	14597-14599	to	
40-47	14600-14607	connect	
40-48	14608-14612	with	
40-49	14613-14615	4K	
40-50	14615-14616	+	
40-51	14617-14622	other	
40-52	14623-14633	developers	
40-53	14634-14638	with	
40-54	14639-14646	similar	
40-55	14647-14650	use	
40-56	14651-14656	cases	
40-57	14656-14657	,	
40-58	14658-14660	as	
40-59	14661-14665	well	
40-60	14666-14668	as	
40-61	14669-14675	myself	
40-62	14675-14676	,	
40-63	14677-14686	Timescale	
40-64	14687-14696	engineers	
40-65	14696-14697	,	
40-66	14698-14705	product	
40-67	14706-14710	team	
40-68	14711-14718	members	
40-69	14718-14719	,	
40-70	14720-14723	and	
40-71	14724-14733	Developer	
40-72	14734-14743	Advocates	
40-73	14743-14744	.	
40-74	14745-14751	Topics	
40-75	14751-14752	:	
40-76	14753-14763	postgresql	
40-77	14763-14764	,	
40-78	14765-14773	database	
40-79	14774-14785	performance	
40-80	14785-14786	,	

#Text=time-series data, sql (structured query language), database, performance Published at DZone with permission of Mike Freedman. See the original article here. Opinions expressed by DZone contributors are their own. Popular on DZone
41-1	14787-14798	time-series	
41-2	14799-14803	data	
41-3	14803-14804	,	
41-4	14805-14808	sql	
41-5	14809-14810	(	
41-6	14810-14820	structured	
41-7	14821-14826	query	
41-8	14827-14835	language	
41-9	14835-14836	)	
41-10	14836-14837	,	
41-11	14838-14846	database	
41-12	14846-14847	,	
41-13	14848-14859	performance	
41-14	14860-14869	Published	
41-15	14870-14872	at	
41-16	14873-14878	DZone	
41-17	14879-14883	with	
41-18	14884-14894	permission	
41-19	14895-14897	of	
41-20	14898-14902	Mike	
41-21	14903-14911	Freedman	
41-22	14911-14912	.	
41-23	14913-14916	See	
41-24	14917-14920	the	
41-25	14921-14929	original	
41-26	14930-14937	article	
41-27	14938-14942	here	
41-28	14942-14943	.	
41-29	14944-14952	Opinions	
41-30	14953-14962	expressed	
41-31	14963-14965	by	
41-32	14966-14971	DZone	
41-33	14972-14984	contributors	
41-34	14985-14988	are	
41-35	14989-14994	their	
41-36	14995-14998	own	
41-37	14998-14999	.	
41-38	15000-15007	Popular	
41-39	15008-15010	on	
41-40	15011-15016	DZone	

#Text=The State of Serverless Computing 2021 Top 20 Dockerfile Best Practices Predicting Housing Prices Using Google AutoML Tables An Examination of Open Source Comments Database Partner Resources ABOUT US About DZone Send feedback Careers
42-1	15017-15020	The	
42-2	15021-15026	State	
42-3	15027-15029	of	
42-4	15030-15040	Serverless	
42-5	15041-15050	Computing	
42-6	15051-15055	2021	
42-7	15056-15059	Top	
42-8	15060-15062	20	
42-9	15063-15073	Dockerfile	
42-10	15074-15078	Best	
42-11	15079-15088	Practices	
42-12	15089-15099	Predicting	
42-13	15100-15107	Housing	
42-14	15108-15114	Prices	
42-15	15115-15120	Using	
42-16	15121-15127	Google	
42-17	15128-15134	AutoML	
42-18	15135-15141	Tables	
42-19	15142-15144	An	
42-20	15145-15156	Examination	
42-21	15157-15159	of	
42-22	15160-15164	Open	
42-23	15165-15171	Source	
42-24	15172-15180	Comments	
42-25	15181-15189	Database	
42-26	15190-15197	Partner	
42-27	15198-15207	Resources	
42-28	15208-15213	ABOUT	
42-29	15214-15216	US	
42-30	15217-15222	About	
42-31	15223-15228	DZone	
42-32	15229-15233	Send	
42-33	15234-15242	feedback	
42-34	15243-15250	Careers	

#Text=ADVERTISE Developer Marketing Blog Advertise with DZone +1 (919) 238-7100 CONTRIBUTE ON DZONE MVB Program Become a Contributor Visit the Writers' Zone
43-1	15251-15260	ADVERTISE	
43-2	15261-15270	Developer	
43-3	15271-15280	Marketing	
43-4	15281-15285	Blog	
43-5	15286-15295	Advertise	
43-6	15296-15300	with	
43-7	15301-15306	DZone	
43-8	15307-15308	+	
43-9	15308-15309	1	
43-10	15310-15311	(	
43-11	15311-15314	919	
43-12	15314-15315	)	
43-13	15316-15319	238	
43-14	15319-15320	-	
43-15	15320-15324	7100	
43-16	15325-15335	CONTRIBUTE	
43-17	15336-15338	ON	
43-18	15339-15344	DZONE	
43-19	15345-15348	MVB	
43-20	15349-15356	Program	
43-21	15357-15363	Become	
43-22	15364-15365	a	
43-23	15366-15377	Contributor	
43-24	15378-15383	Visit	
43-25	15384-15387	the	
43-26	15388-15395	Writers	
43-27	15395-15396	'	
43-28	15397-15401	Zone	

#Text=LEGAL Terms of Service Privacy Policy CONTACT US 600 Park Offices Drive Suite 150 Research Triangle Park, NC 27709 support@dzone.com +1 (919) 678-0300
44-1	15402-15407	LEGAL	
44-2	15408-15413	Terms	
44-3	15414-15416	of	
44-4	15417-15424	Service	
44-5	15425-15432	Privacy	
44-6	15433-15439	Policy	
44-7	15440-15447	CONTACT	
44-8	15448-15450	US	
44-9	15451-15454	600	
44-10	15455-15459	Park	
44-11	15460-15467	Offices	
44-12	15468-15473	Drive	
44-13	15474-15479	Suite	
44-14	15480-15483	150	
44-15	15484-15492	Research	
44-16	15493-15501	Triangle	
44-17	15502-15506	Park	
44-18	15506-15507	,	
44-19	15508-15510	NC	
44-20	15511-15516	27709	
44-21	15517-15524	support	
44-22	15524-15525	@	
44-23	15525-15534	dzone.com	
44-24	15535-15536	+	
44-25	15536-15537	1	
44-26	15538-15539	(	
44-27	15539-15542	919	
44-28	15542-15543	)	
44-29	15544-15547	678	
44-30	15547-15548	-	
44-31	15548-15552	0300	
