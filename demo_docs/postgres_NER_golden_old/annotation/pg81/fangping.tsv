#FORMAT=WebAnno TSV 3.3


#Text=Tips for Java Developers | Cloud Foundry Docs Cloud Foundry Documentation Get Involved Doc Index General Information Contributing Documentation Cloud Foundry Concepts Cloud Foundry Overview
1-1	0-4	Tips	
1-2	5-8	for	
1-3	9-13	Java	
1-4	14-24	Developers	
1-5	25-26	|	
1-6	27-32	Cloud	
1-7	33-40	Foundry	
1-8	41-45	Docs	
1-9	46-51	Cloud	
1-10	52-59	Foundry	
1-11	60-73	Documentation	
1-12	74-77	Get	
1-13	78-86	Involved	
1-14	87-90	Doc	
1-15	91-96	Index	
1-16	97-104	General	
1-17	105-116	Information	
1-18	117-129	Contributing	
1-19	130-143	Documentation	
1-20	144-149	Cloud	
1-21	150-157	Foundry	
1-22	158-166	Concepts	
1-23	167-172	Cloud	
1-24	173-180	Foundry	
1-25	181-189	Overview	

#Text=Security and Networking Cloud Foundry Security Container Security Container-to-Container Networking Orgs, Spaces, Roles, and Permissions Planning Orgs and Spaces App Security Groups App SSH Components and Processes
2-1	190-198	Security	
2-2	199-202	and	
2-3	203-213	Networking	
2-4	214-219	Cloud	
2-5	220-227	Foundry	
2-6	228-236	Security	
2-7	237-246	Container	
2-8	247-255	Security	
2-9	256-278	Container-to-Container	
2-10	279-289	Networking	
2-11	290-294	Orgs	
2-12	294-295	,	
2-13	296-302	Spaces	
2-14	302-303	,	
2-15	304-309	Roles	
2-16	309-310	,	
2-17	311-314	and	
2-18	315-326	Permissions	
2-19	327-335	Planning	
2-20	336-340	Orgs	
2-21	341-344	and	
2-22	345-351	Spaces	
2-23	352-355	App	
2-24	356-364	Security	
2-25	365-371	Groups	
2-26	372-375	App	
2-27	376-379	SSH	
2-28	380-390	Components	
2-29	391-394	and	
2-30	395-404	Processes	

#Text=High Availability High Availability in Cloud Foundry How Cloud Foundry Maintains High Availability How Cloud Foundry Manages Apps How Apps Are Staged App Container Lifecycle How the Diego Auction Allocates Jobs
3-1	405-409	High	
3-2	410-422	Availability	
3-3	423-427	High	
3-4	428-440	Availability	
3-5	441-443	in	
3-6	444-449	Cloud	
3-7	450-457	Foundry	
3-8	458-461	How	
3-9	462-467	Cloud	
3-10	468-475	Foundry	
3-11	476-485	Maintains	
3-12	486-490	High	
3-13	491-503	Availability	
3-14	504-507	How	
3-15	508-513	Cloud	
3-16	514-521	Foundry	
3-17	522-529	Manages	
3-18	530-534	Apps	
3-19	535-538	How	
3-20	539-543	Apps	
3-21	544-547	Are	
3-22	548-554	Staged	
3-23	555-558	App	
3-24	559-568	Container	
3-25	569-578	Lifecycle	
3-26	579-582	How	
3-27	583-586	the	
3-28	587-592	Diego	
3-29	593-600	Auction	
3-30	601-610	Allocates	
3-31	611-615	Jobs	

#Text=Cloud Foundry Components Diego Architecture Cloud Foundry Routing Architecture Cloud Controller Cloud Controller Blobstore User Account and Authentication (UAA) Server Garden GrootFS Disk Usage HTTP Routing
4-1	616-621	Cloud	
4-2	622-629	Foundry	
4-3	630-640	Components	
4-4	641-646	Diego	
4-5	647-659	Architecture	
4-6	660-665	Cloud	
4-7	666-673	Foundry	
4-8	674-681	Routing	
4-9	682-694	Architecture	
4-10	695-700	Cloud	
4-11	701-711	Controller	
4-12	712-717	Cloud	
4-13	718-728	Controller	
4-14	729-738	Blobstore	
4-15	739-743	User	
4-16	744-751	Account	
4-17	752-755	and	
4-18	756-770	Authentication	
4-19	771-772	(	
4-20	772-775	UAA	
4-21	775-776	)	
4-22	777-783	Server	
4-23	784-790	Garden	
4-24	791-798	GrootFS	
4-25	799-803	Disk	
4-26	804-809	Usage	
4-27	810-814	HTTP	
4-28	815-822	Routing	

#Text=Cloud Foundry Command Line Interface (cf CLI) Installing the cf CLI Upgrading to cf CLI v7 Getting Started with the cf CLI Using the cf CLI with a Proxy Server Using the cf CLI with a Self-Signed Certificate
5-1	823-828	Cloud	
5-2	829-836	Foundry	
5-3	837-844	Command	
5-4	845-849	Line	
5-5	850-859	Interface	
5-6	860-861	(	
5-7	861-863	cf	
5-8	864-867	CLI	
5-9	867-868	)	
5-10	869-879	Installing	
5-11	880-883	the	
5-12	884-886	cf	
5-13	887-890	CLI	
5-14	891-900	Upgrading	
5-15	901-903	to	
5-16	904-906	cf	
5-17	907-910	CLI	
5-18	911-913	v7	
5-19	914-921	Getting	
5-20	922-929	Started	
5-21	930-934	with	
5-22	935-938	the	
5-23	939-941	cf	
5-24	942-945	CLI	
5-25	946-951	Using	
5-26	952-955	the	
5-27	956-958	cf	
5-28	959-962	CLI	
5-29	963-967	with	
5-30	968-969	a	
5-31	970-975	Proxy	
5-32	976-982	Server	
5-33	983-988	Using	
5-34	989-992	the	
5-35	993-995	cf	
5-36	996-999	CLI	
5-37	1000-1004	with	
5-38	1005-1006	a	
5-39	1007-1018	Self-Signed	
5-40	1019-1030	Certificate	

#Text=Using cf CLI Plugins Developing cf CLI Plugins cf CLI v6 Reference Guide cf CLI v7 Reference Guide Using Experimental cf CLI Commands Information for Operators Deploying Cloud Foundry
6-1	1031-1036	Using	
6-2	1037-1039	cf	
6-3	1040-1043	CLI	
6-4	1044-1051	Plugins	
6-5	1052-1062	Developing	
6-6	1063-1065	cf	
6-7	1066-1069	CLI	
6-8	1070-1077	Plugins	
6-9	1078-1080	cf	
6-10	1081-1084	CLI	
6-11	1085-1087	v6	
6-12	1088-1097	Reference	
6-13	1098-1103	Guide	
6-14	1104-1106	cf	
6-15	1107-1110	CLI	
6-16	1111-1113	v7	
6-17	1114-1123	Reference	
6-18	1124-1129	Guide	
6-19	1130-1135	Using	
6-20	1136-1148	Experimental	
6-21	1149-1151	cf	
6-22	1152-1155	CLI	
6-23	1156-1164	Commands	
6-24	1165-1176	Information	
6-25	1177-1180	for	
6-26	1181-1190	Operators	
6-27	1191-1200	Deploying	
6-28	1201-1206	Cloud	
6-29	1207-1214	Foundry	

#Text=Setting Up DNS for Your Environment Deploying Cloud Foundry with cf-deployment Deploying BOSH on AWS Deploying BOSH on GCP Deploying Cloud Foundry Migrating from cf-release to cf-deployment
7-1	1215-1222	Setting	
7-2	1223-1225	Up	
7-3	1226-1229	DNS	
7-4	1230-1233	for	
7-5	1234-1238	Your	
7-6	1239-1250	Environment	
7-7	1251-1260	Deploying	
7-8	1261-1266	Cloud	
7-9	1267-1274	Foundry	
7-10	1275-1279	with	
7-11	1280-1293	cf-deployment	
7-12	1294-1303	Deploying	
7-13	1304-1308	BOSH	
7-14	1309-1311	on	
7-15	1312-1315	AWS	
7-16	1316-1325	Deploying	
7-17	1326-1330	BOSH	
7-18	1331-1333	on	
7-19	1334-1337	GCP	
7-20	1338-1347	Deploying	
7-21	1348-1353	Cloud	
7-22	1354-1361	Foundry	
7-23	1362-1371	Migrating	
7-24	1372-1376	from	
7-25	1377-1387	cf-release	
7-26	1388-1390	to	
7-27	1391-1404	cf-deployment	

#Text=Configuring Your Cloud Foundry for BOSH Backup and Restore Backup and Restore for External Blobstores Additional Configuration High Availability in Cloud Foundry How Cloud Foundry Maintains High Availability Cloud Controller Blobstore Configuration Administering Cloud Foundry
8-1	1405-1416	Configuring	
8-2	1417-1421	Your	
8-3	1422-1427	Cloud	
8-4	1428-1435	Foundry	
8-5	1436-1439	for	
8-6	1440-1444	BOSH	
8-7	1445-1451	Backup	
8-8	1452-1455	and	
8-9	1456-1463	Restore	
8-10	1464-1470	Backup	
8-11	1471-1474	and	
8-12	1475-1482	Restore	
8-13	1483-1486	for	
8-14	1487-1495	External	
8-15	1496-1506	Blobstores	
8-16	1507-1517	Additional	
8-17	1518-1531	Configuration	
8-18	1532-1536	High	
8-19	1537-1549	Availability	
8-20	1550-1552	in	
8-21	1553-1558	Cloud	
8-22	1559-1566	Foundry	
8-23	1567-1570	How	
8-24	1571-1576	Cloud	
8-25	1577-1584	Foundry	
8-26	1585-1594	Maintains	
8-27	1595-1599	High	
8-28	1600-1612	Availability	
8-29	1613-1618	Cloud	
8-30	1619-1629	Controller	
8-31	1630-1639	Blobstore	
8-32	1640-1653	Configuration	
8-33	1654-1667	Administering	
8-34	1668-1673	Cloud	
8-35	1674-1681	Foundry	

#Text=Managing the Runtime Stopping and Starting Virtual Machines Creating and Modifying Quota Plans Using Feature Flags Examining GrootFS Disk Usage Using Metadata Managing Custom Buildpacks Using Docker in Cloud Foundry
9-1	1682-1690	Managing	
9-2	1691-1694	the	
9-3	1695-1702	Runtime	
9-4	1703-1711	Stopping	
9-5	1712-1715	and	
9-6	1716-1724	Starting	
9-7	1725-1732	Virtual	
9-8	1733-1741	Machines	
9-9	1742-1750	Creating	
9-10	1751-1754	and	
9-11	1755-1764	Modifying	
9-12	1765-1770	Quota	
9-13	1771-1776	Plans	
9-14	1777-1782	Using	
9-15	1783-1790	Feature	
9-16	1791-1796	Flags	
9-17	1797-1806	Examining	
9-18	1807-1814	GrootFS	
9-19	1815-1819	Disk	
9-20	1820-1825	Usage	
9-21	1826-1831	Using	
9-22	1832-1840	Metadata	
9-23	1841-1849	Managing	
9-24	1850-1856	Custom	
9-25	1857-1867	Buildpacks	
9-26	1868-1873	Using	
9-27	1874-1880	Docker	
9-28	1881-1883	in	
9-29	1884-1889	Cloud	
9-30	1890-1897	Foundry	

#Text=User Accounts and Communications Creating and Managing Users with the cf CLI Creating and Managing Users with the UAA CLI (UAAC) Getting Started with the Notifications Service Routing Enabling IPv6 for Hosted Apps
10-1	1898-1902	User	
10-2	1903-1911	Accounts	
10-3	1912-1915	and	
10-4	1916-1930	Communications	
10-5	1931-1939	Creating	
10-6	1940-1943	and	
10-7	1944-1952	Managing	
10-8	1953-1958	Users	
10-9	1959-1963	with	
10-10	1964-1967	the	
10-11	1968-1970	cf	
10-12	1971-1974	CLI	
10-13	1975-1983	Creating	
10-14	1984-1987	and	
10-15	1988-1996	Managing	
10-16	1997-2002	Users	
10-17	2003-2007	with	
10-18	2008-2011	the	
10-19	2012-2015	UAA	
10-20	2016-2019	CLI	
10-21	2020-2021	(	
10-22	2021-2025	UAAC	
10-23	2025-2026	)	
10-24	2027-2034	Getting	
10-25	2035-2042	Started	
10-26	2043-2047	with	
10-27	2048-2051	the	
10-28	2052-2065	Notifications	
10-29	2066-2073	Service	
10-30	2074-2081	Routing	
10-31	2082-2090	Enabling	
10-32	2091-2095	IPv6	
10-33	2096-2099	for	
10-34	2100-2106	Hosted	
10-35	2107-2111	Apps	

#Text=Supporting WebSockets Configuring Load Balancer Health Checks for CF Routers Securing Traffic into CF Enabling TCP Routing Isolation Segments Managing Isolation Segments Routing for Isolation Segments
11-1	2112-2122	Supporting	
11-2	2123-2133	WebSockets	
11-3	2134-2145	Configuring	
11-4	2146-2150	Load	
11-5	2151-2159	Balancer	
11-6	2160-2166	Health	
11-7	2167-2173	Checks	
11-8	2174-2177	for	
11-9	2178-2180	CF	
11-10	2181-2188	Routers	
11-11	2189-2197	Securing	
11-12	2198-2205	Traffic	
11-13	2206-2210	into	
11-14	2211-2213	CF	
11-15	2214-2222	Enabling	
11-16	2223-2226	TCP	
11-17	2227-2234	Routing	
11-18	2235-2244	Isolation	
11-19	2245-2253	Segments	
11-20	2254-2262	Managing	
11-21	2263-2272	Isolation	
11-22	2273-2281	Segments	
11-23	2282-2289	Routing	
11-24	2290-2293	for	
11-25	2294-2303	Isolation	
11-26	2304-2312	Segments	

#Text=Running and Troubleshooting Cloud Foundry Cloud Foundry Logging Configuring System Logging Configuring Diego for Upgrades Audit Events UAA Audit Requirements Usage Events and Billing Configuring SSH Access for Cloud Foundry
12-1	2313-2320	Running	
12-2	2321-2324	and	
12-3	2325-2340	Troubleshooting	
12-4	2341-2346	Cloud	
12-5	2347-2354	Foundry	
12-6	2355-2360	Cloud	
12-7	2361-2368	Foundry	
12-8	2369-2376	Logging	
12-9	2377-2388	Configuring	
12-10	2389-2395	System	
12-11	2396-2403	Logging	
12-12	2404-2415	Configuring	
12-13	2416-2421	Diego	
12-14	2422-2425	for	
12-15	2426-2434	Upgrades	
12-16	2435-2440	Audit	
12-17	2441-2447	Events	
12-18	2448-2451	UAA	
12-19	2452-2457	Audit	
12-20	2458-2470	Requirements	
12-21	2471-2476	Usage	
12-22	2477-2483	Events	
12-23	2484-2487	and	
12-24	2488-2495	Billing	
12-25	2496-2507	Configuring	
12-26	2508-2511	SSH	
12-27	2512-2518	Access	
12-28	2519-2522	for	
12-29	2523-2528	Cloud	
12-30	2529-2536	Foundry	

#Text=Configuring Diego Cell Disk Cleanup Scheduling Configuring Health Monitor Notifications Monitoring and Testing Diego Components Troubleshooting Cloud Foundry UAA Performance UAA Performance Metrics Scaling Cloud Controller Scaling Cloud Controller (cf-for-k8s)
13-1	2537-2548	Configuring	
13-2	2549-2554	Diego	
13-3	2555-2559	Cell	
13-4	2560-2564	Disk	
13-5	2565-2572	Cleanup	
13-6	2573-2583	Scheduling	
13-7	2584-2595	Configuring	
13-8	2596-2602	Health	
13-9	2603-2610	Monitor	
13-10	2611-2624	Notifications	
13-11	2625-2635	Monitoring	
13-12	2636-2639	and	
13-13	2640-2647	Testing	
13-14	2648-2653	Diego	
13-15	2654-2664	Components	
13-16	2665-2680	Troubleshooting	
13-17	2681-2686	Cloud	
13-18	2687-2694	Foundry	
13-19	2695-2698	UAA	
13-20	2699-2710	Performance	
13-21	2711-2714	UAA	
13-22	2715-2726	Performance	
13-23	2727-2734	Metrics	
13-24	2735-2742	Scaling	
13-25	2743-2748	Cloud	
13-26	2749-2759	Controller	
13-27	2760-2767	Scaling	
13-28	2768-2773	Cloud	
13-29	2774-2784	Controller	
13-30	2785-2786	(	
13-31	2786-2796	cf-for-k8s	
13-32	2796-2797	)	

#Text=Logging and Metrics in Cloud Foundry Loggregator Architecture Installing the Loggregator Plugin for cf CLI Security Event Logging Cloud Foundry Component Metrics Container Metrics Loggregator Guide for CF Operators
14-1	2798-2805	Logging	
14-2	2806-2809	and	
14-3	2810-2817	Metrics	
14-4	2818-2820	in	
14-5	2821-2826	Cloud	
14-6	2827-2834	Foundry	
14-7	2835-2846	Loggregator	
14-8	2847-2859	Architecture	
14-9	2860-2870	Installing	
14-10	2871-2874	the	
14-11	2875-2886	Loggregator	
14-12	2887-2893	Plugin	
14-13	2894-2897	for	
14-14	2898-2900	cf	
14-15	2901-2904	CLI	
14-16	2905-2913	Security	
14-17	2914-2919	Event	
14-18	2920-2927	Logging	
14-19	2928-2933	Cloud	
14-20	2934-2941	Foundry	
14-21	2942-2951	Component	
14-22	2952-2959	Metrics	
14-23	2960-2969	Container	
14-24	2970-2977	Metrics	
14-25	2978-2989	Loggregator	
14-26	2990-2995	Guide	
14-27	2996-2999	for	
14-28	3000-3002	CF	
14-29	3003-3012	Operators	

#Text=Overview of Logging and Metrics Deploying a Nozzle to the Loggregator Firehose BOSH Documentation BOSH Backup and Restore Installing BBR Release Notes for BBR Backing Up with BBR Restoring with BBR
15-1	3013-3021	Overview	
15-2	3022-3024	of	
15-3	3025-3032	Logging	
15-4	3033-3036	and	
15-5	3037-3044	Metrics	
15-6	3045-3054	Deploying	
15-7	3055-3056	a	
15-8	3057-3063	Nozzle	
15-9	3064-3066	to	
15-10	3067-3070	the	
15-11	3071-3082	Loggregator	
15-12	3083-3091	Firehose	
15-13	3092-3096	BOSH	
15-14	3097-3110	Documentation	
15-15	3111-3115	BOSH	
15-16	3116-3122	Backup	
15-17	3123-3126	and	
15-18	3127-3134	Restore	
15-19	3135-3145	Installing	
15-20	3146-3149	BBR	
15-21	3150-3157	Release	
15-22	3158-3163	Notes	
15-23	3164-3167	for	
15-24	3168-3171	BBR	
15-25	3172-3179	Backing	
15-26	3180-3182	Up	
15-27	3183-3187	with	
15-28	3188-3191	BBR	
15-29	3192-3201	Restoring	
15-30	3202-3206	with	
15-31	3207-3210	BBR	

#Text=BBR Logging Experimental Features BBR Developer's Guide Information for Developers Developing and Managing Apps cf push Pushing an App Deploying with App Manifests App Manifest Attribute Reference
16-1	3211-3214	BBR	
16-2	3215-3222	Logging	
16-3	3223-3235	Experimental	
16-4	3236-3244	Features	
16-5	3245-3248	BBR	
16-6	3249-3260	Developer's	
16-7	3261-3266	Guide	
16-8	3267-3278	Information	
16-9	3279-3282	for	
16-10	3283-3293	Developers	
16-11	3294-3304	Developing	
16-12	3305-3308	and	
16-13	3309-3317	Managing	
16-14	3318-3322	Apps	
16-15	3323-3325	cf	
16-16	3326-3330	push	
16-17	3331-3338	Pushing	
16-18	3339-3341	an	
16-19	3342-3345	App	
16-20	3346-3355	Deploying	
16-21	3356-3360	with	
16-22	3361-3364	App	
16-23	3365-3374	Manifests	
16-24	3375-3378	App	
16-25	3379-3387	Manifest	
16-26	3388-3397	Attribute	
16-27	3398-3407	Reference	

#Text=Deploying an App with Docker Deploying a Large App Starting, Restarting, and Restaging Apps Pushing an App with Multiple Processes Running cf push Sub-Step Commands Rolling App Deployments Pushing Apps with Sidecar Processes
17-1	3408-3417	Deploying	
17-2	3418-3420	an	
17-3	3421-3424	App	
17-4	3425-3429	with	
17-5	3430-3436	Docker	
17-6	3437-3446	Deploying	
17-7	3447-3448	a	
17-8	3449-3454	Large	
17-9	3455-3458	App	
17-10	3459-3467	Starting	
17-11	3467-3468	,	
17-12	3469-3479	Restarting	
17-13	3479-3480	,	
17-14	3481-3484	and	
17-15	3485-3494	Restaging	
17-16	3495-3499	Apps	
17-17	3500-3507	Pushing	
17-18	3508-3510	an	
17-19	3511-3514	App	
17-20	3515-3519	with	
17-21	3520-3528	Multiple	
17-22	3529-3538	Processes	
17-23	3539-3546	Running	
17-24	3547-3549	cf	
17-25	3550-3554	push	
17-26	3555-3563	Sub-Step	
17-27	3564-3572	Commands	
17-28	3573-3580	Rolling	
17-29	3581-3584	App	
17-30	3585-3596	Deployments	
17-31	3597-3604	Pushing	
17-32	3605-3609	Apps	
17-33	3610-3614	with	
17-34	3615-3622	Sidecar	
17-35	3623-3632	Processes	

#Text=Using Blue-Green Deployment to Reduce Downtime and Risk Troubleshooting App Deployment and Health SSH for Apps and Services App SSH Overview Accessing Apps with SSH Accessing Services with SSH Routes and Domains Configuring Routes and Domains
18-1	3633-3638	Using	
18-2	3639-3649	Blue-Green	
18-3	3650-3660	Deployment	
18-4	3661-3663	to	
18-5	3664-3670	Reduce	
18-6	3671-3679	Downtime	
18-7	3680-3683	and	
18-8	3684-3688	Risk	
18-9	3689-3704	Troubleshooting	
18-10	3705-3708	App	
18-11	3709-3719	Deployment	
18-12	3720-3723	and	
18-13	3724-3730	Health	
18-14	3731-3734	SSH	
18-15	3735-3738	for	
18-16	3739-3743	Apps	
18-17	3744-3747	and	
18-18	3748-3756	Services	
18-19	3757-3760	App	
18-20	3761-3764	SSH	
18-21	3765-3773	Overview	
18-22	3774-3783	Accessing	
18-23	3784-3788	Apps	
18-24	3789-3793	with	
18-25	3794-3797	SSH	
18-26	3798-3807	Accessing	
18-27	3808-3816	Services	
18-28	3817-3821	with	
18-29	3822-3825	SSH	
18-30	3826-3832	Routes	
18-31	3833-3836	and	
18-32	3837-3844	Domains	
18-33	3845-3856	Configuring	
18-34	3857-3863	Routes	
18-35	3864-3867	and	
18-36	3868-3875	Domains	

#Text=Configuring CF to Route Traffic to Apps on Custom Ports Managing Services Services Overview Managing Service Instances Sharing Service Instances Delivering Service Credentials to an App Managing Service Keys Configuring Play Framework Service Connections Using an External File System (Volume Services)
19-1	3876-3887	Configuring	
19-2	3888-3890	CF	
19-3	3891-3893	to	
19-4	3894-3899	Route	
19-5	3900-3907	Traffic	
19-6	3908-3910	to	
19-7	3911-3915	Apps	
19-8	3916-3918	on	
19-9	3919-3925	Custom	
19-10	3926-3931	Ports	
19-11	3932-3940	Managing	
19-12	3941-3949	Services	
19-13	3950-3958	Services	
19-14	3959-3967	Overview	
19-15	3968-3976	Managing	
19-16	3977-3984	Service	
19-17	3985-3994	Instances	
19-18	3995-4002	Sharing	
19-19	4003-4010	Service	
19-20	4011-4020	Instances	
19-21	4021-4031	Delivering	
19-22	4032-4039	Service	
19-23	4040-4051	Credentials	
19-24	4052-4054	to	
19-25	4055-4057	an	
19-26	4058-4061	App	
19-27	4062-4070	Managing	
19-28	4071-4078	Service	
19-29	4079-4083	Keys	
19-30	4084-4095	Configuring	
19-31	4096-4100	Play	
19-32	4101-4110	Framework	
19-33	4111-4118	Service	
19-34	4119-4130	Connections	
19-35	4131-4136	Using	
19-36	4137-4139	an	
19-37	4140-4148	External	
19-38	4149-4153	File	
19-39	4154-4160	System	
19-40	4161-4162	(	
19-41	4162-4168	Volume	
19-42	4169-4177	Services	
19-43	4177-4178	)	

#Text=User-Provided Service Instances Streaming App Logs Streaming App Logs to Log Management Services Service-Specific Instructions for Streaming App Logs Streaming App Logs to Splunk Streaming App Logs with Fluentd
20-1	4179-4192	User-Provided	
20-2	4193-4200	Service	
20-3	4201-4210	Instances	
20-4	4211-4220	Streaming	
20-5	4221-4224	App	
20-6	4225-4229	Logs	
20-7	4230-4239	Streaming	
20-8	4240-4243	App	
20-9	4244-4248	Logs	
20-10	4249-4251	to	
20-11	4252-4255	Log	
20-12	4256-4266	Management	
20-13	4267-4275	Services	
20-14	4276-4292	Service-Specific	
20-15	4293-4305	Instructions	
20-16	4306-4309	for	
20-17	4310-4319	Streaming	
20-18	4320-4323	App	
20-19	4324-4328	Logs	
20-20	4329-4338	Streaming	
20-21	4339-4342	App	
20-22	4343-4347	Logs	
20-23	4348-4350	to	
20-24	4351-4357	Splunk	
20-25	4358-4367	Streaming	
20-26	4368-4371	App	
20-27	4372-4376	Logs	
20-28	4377-4381	with	
20-29	4382-4389	Fluentd	

#Text=Streaming App Logs to Azure OMS Log Analytics Managing Apps with the cf CLI Running Tasks Scaling an App Using cf scale Using App Health Checks Configuring Container-to-Container Networking CF Environment Variables Cloud Controller API Client Libraries
21-1	4390-4399	Streaming	
21-2	4400-4403	App	
21-3	4404-4408	Logs	
21-4	4409-4411	to	
21-5	4412-4417	Azure	
21-6	4418-4421	OMS	
21-7	4422-4425	Log	
21-8	4426-4435	Analytics	
21-9	4436-4444	Managing	
21-10	4445-4449	Apps	
21-11	4450-4454	with	
21-12	4455-4458	the	
21-13	4459-4461	cf	
21-14	4462-4465	CLI	
21-15	4466-4473	Running	
21-16	4474-4479	Tasks	
21-17	4480-4487	Scaling	
21-18	4488-4490	an	
21-19	4491-4494	App	
21-20	4495-4500	Using	
21-21	4501-4503	cf	
21-22	4504-4509	scale	
21-23	4510-4515	Using	
21-24	4516-4519	App	
21-25	4520-4526	Health	
21-26	4527-4533	Checks	
21-27	4534-4545	Configuring	
21-28	4546-4568	Container-to-Container	
21-29	4569-4579	Networking	
21-30	4580-4582	CF	
21-31	4583-4594	Environment	
21-32	4595-4604	Variables	
21-33	4605-4610	Cloud	
21-34	4611-4621	Controller	
21-35	4622-4625	API	
21-36	4626-4632	Client	
21-37	4633-4642	Libraries	

#Text=Considerations for Designing and Running an App in the Cloud App Revisions Buildpacks About Buildpacks How Buildpacks Work Stack Association Pushing an App with Multiple Buildpacks Using a Proxy Supported Binary Dependencies
22-1	4643-4657	Considerations	
22-2	4658-4661	for	
22-3	4662-4671	Designing	
22-4	4672-4675	and	
22-5	4676-4683	Running	
22-6	4684-4686	an	
22-7	4687-4690	App	
22-8	4691-4693	in	
22-9	4694-4697	the	
22-10	4698-4703	Cloud	
22-11	4704-4707	App	
22-12	4708-4717	Revisions	
22-13	4718-4728	Buildpacks	
22-14	4729-4734	About	
22-15	4735-4745	Buildpacks	
22-16	4746-4749	How	
22-17	4750-4760	Buildpacks	
22-18	4761-4765	Work	
22-19	4766-4771	Stack	
22-20	4772-4783	Association	
22-21	4784-4791	Pushing	
22-22	4792-4794	an	
22-23	4795-4798	App	
22-24	4799-4803	with	
22-25	4804-4812	Multiple	
22-26	4813-4823	Buildpacks	
22-27	4824-4829	Using	
22-28	4830-4831	a	
22-29	4832-4837	Proxy	
22-30	4838-4847	Supported	
22-31	4848-4854	Binary	
22-32	4855-4867	Dependencies	

#Text=Production Server Configuration Binary HWC Java Tips for Java Developers Getting Started Deploying Apps Grails Ratpack Spring Configuring Service Connections Grails Play Spring
23-1	4868-4878	Production	
23-2	4879-4885	Server	
23-3	4886-4899	Configuration	
23-4	4900-4906	Binary	
23-5	4907-4910	HWC	
23-6	4911-4915	Java	
23-7	4916-4920	Tips	
23-8	4921-4924	for	
23-9	4925-4929	Java	
23-10	4930-4940	Developers	
23-11	4941-4948	Getting	
23-12	4949-4956	Started	
23-13	4957-4966	Deploying	
23-14	4967-4971	Apps	
23-15	4972-4978	Grails	
23-16	4979-4986	Ratpack	
23-17	4987-4993	Spring	
23-18	4994-5005	Configuring	
23-19	5006-5013	Service	
23-20	5014-5025	Connections	
23-21	5026-5032	Grails	
23-22	5033-5037	Play	
23-23	5038-5044	Spring	

#Text=Cloud Foundry Java Client Library .NET Core NGINX Buildpack Node.js Tips for Node.js Developers Environment Variables Defined by the Node Buildpack Configuring Service Connections for Node.js
24-1	5045-5050	Cloud	
24-2	5051-5058	Foundry	
24-3	5059-5063	Java	
24-4	5064-5070	Client	
24-5	5071-5078	Library	
24-6	5079-5080	.	
24-7	5080-5083	NET	
24-8	5084-5088	Core	
24-9	5089-5094	NGINX	
24-10	5095-5104	Buildpack	
24-11	5105-5112	Node.js	
24-12	5113-5117	Tips	
24-13	5118-5121	for	
24-14	5122-5129	Node.js	
24-15	5130-5140	Developers	
24-16	5141-5152	Environment	
24-17	5153-5162	Variables	
24-18	5163-5170	Defined	
24-19	5171-5173	by	
24-20	5174-5177	the	
24-21	5178-5182	Node	
24-22	5183-5192	Buildpack	
24-23	5193-5204	Configuring	
24-24	5205-5212	Service	
24-25	5213-5224	Connections	
24-26	5225-5228	for	
24-27	5229-5236	Node.js	

#Text=PHP Tips for PHP Developers Getting Started Deploying PHP Apps PHP Buildpack Configuration Composer Sessions New Relic Python Ruby Tips for Ruby Developers
25-1	5237-5240	PHP	
25-2	5241-5245	Tips	
25-3	5246-5249	for	
25-4	5250-5253	PHP	
25-5	5254-5264	Developers	
25-6	5265-5272	Getting	
25-7	5273-5280	Started	
25-8	5281-5290	Deploying	
25-9	5291-5294	PHP	
25-10	5295-5299	Apps	
25-11	5300-5303	PHP	
25-12	5304-5313	Buildpack	
25-13	5314-5327	Configuration	
25-14	5328-5336	Composer	
25-15	5337-5345	Sessions	
25-16	5346-5349	New	
25-17	5350-5355	Relic	
25-18	5356-5362	Python	
25-19	5363-5367	Ruby	
25-20	5368-5372	Tips	
25-21	5373-5376	for	
25-22	5377-5381	Ruby	
25-23	5382-5392	Developers	

#Text=Getting Started Deploying Apps Ruby Ruby on Rails Configure Rake Tasks for Deployed Apps Environment Variables Defined by the Ruby Buildpack Configure Service Connections for Ruby Support for Windows Gemfiles Staticfile
26-1	5393-5400	Getting	
26-2	5401-5408	Started	
26-3	5409-5418	Deploying	
26-4	5419-5423	Apps	
26-5	5424-5428	Ruby	
26-6	5429-5433	Ruby	
26-7	5434-5436	on	
26-8	5437-5442	Rails	
26-9	5443-5452	Configure	
26-10	5453-5457	Rake	
26-11	5458-5463	Tasks	
26-12	5464-5467	for	
26-13	5468-5476	Deployed	
26-14	5477-5481	Apps	
26-15	5482-5493	Environment	
26-16	5494-5503	Variables	
26-17	5504-5511	Defined	
26-18	5512-5514	by	
26-19	5515-5518	the	
26-20	5519-5523	Ruby	
26-21	5524-5533	Buildpack	
26-22	5534-5543	Configure	
26-23	5544-5551	Service	
26-24	5552-5563	Connections	
26-25	5564-5567	for	
26-26	5568-5572	Ruby	
26-27	5573-5580	Support	
26-28	5581-5584	for	
26-29	5585-5592	Windows	
26-30	5593-5601	Gemfiles	
26-31	5602-5612	Staticfile	

#Text=Customizing and Developing Buildpacks Creating Custom Buildpacks Packaging Dependencies for Offline Buildpacks Merging from Upstream Buildpacks Upgrading Dependency Versions Using CI for Buildpacks Releasing a New Buildpack Version
27-1	5613-5624	Customizing	
27-2	5625-5628	and	
27-3	5629-5639	Developing	
27-4	5640-5650	Buildpacks	
27-5	5651-5659	Creating	
27-6	5660-5666	Custom	
27-7	5667-5677	Buildpacks	
27-8	5678-5687	Packaging	
27-9	5688-5700	Dependencies	
27-10	5701-5704	for	
27-11	5705-5712	Offline	
27-12	5713-5723	Buildpacks	
27-13	5724-5731	Merging	
27-14	5732-5736	from	
27-15	5737-5745	Upstream	
27-16	5746-5756	Buildpacks	
27-17	5757-5766	Upgrading	
27-18	5767-5777	Dependency	
27-19	5778-5786	Versions	
27-20	5787-5792	Using	
27-21	5793-5795	CI	
27-22	5796-5799	for	
27-23	5800-5810	Buildpacks	
27-24	5811-5820	Releasing	
27-25	5821-5822	a	
27-26	5823-5826	New	
27-27	5827-5836	Buildpack	
27-28	5837-5844	Version	

#Text=Updating Buildpack-Related Gems Information for Managed Service Authors Services Overview Service Broker API Open Service Broker API Platform Profiles Catalog Metadata Volume Services Release Notes Managing Service Brokers Access Control
28-1	5845-5853	Updating	
28-2	5854-5871	Buildpack-Related	
28-3	5872-5876	Gems	
28-4	5877-5888	Information	
28-5	5889-5892	for	
28-6	5893-5900	Managed	
28-7	5901-5908	Service	
28-8	5909-5916	Authors	
28-9	5917-5925	Services	
28-10	5926-5934	Overview	
28-11	5935-5942	Service	
28-12	5943-5949	Broker	
28-13	5950-5953	API	
28-14	5954-5958	Open	
28-15	5959-5966	Service	
28-16	5967-5973	Broker	
28-17	5974-5977	API	
28-18	5978-5986	Platform	
28-19	5987-5995	Profiles	
28-20	5996-6003	Catalog	
28-21	6004-6012	Metadata	
28-22	6013-6019	Volume	
28-23	6020-6028	Services	
28-24	6029-6036	Release	
28-25	6037-6042	Notes	
28-26	6043-6051	Managing	
28-27	6052-6059	Service	
28-28	6060-6067	Brokers	
28-29	6068-6074	Access	
28-30	6075-6082	Control	

#Text=Binding Credentials CredHub Setting Up and Deploying CredHub with BOSH Configuring a Hardware Security Module Using a Key Management Service with CredHub CredHub Credential Types
29-1	6083-6090	Binding	
29-2	6091-6102	Credentials	
29-3	6103-6110	CredHub	
29-4	6111-6118	Setting	
29-5	6119-6121	Up	
29-6	6122-6125	and	
29-7	6126-6135	Deploying	
29-8	6136-6143	CredHub	
29-9	6144-6148	with	
29-10	6149-6153	BOSH	
29-11	6154-6165	Configuring	
29-12	6166-6167	a	
29-13	6168-6176	Hardware	
29-14	6177-6185	Security	
29-15	6186-6192	Module	
29-16	6193-6198	Using	
29-17	6199-6200	a	
29-18	6201-6204	Key	
29-19	6205-6215	Management	
29-20	6216-6223	Service	
29-21	6224-6228	with	
29-22	6229-6236	CredHub	
29-23	6237-6244	CredHub	
29-24	6245-6255	Credential	
29-25	6256-6261	Types	

#Text=Backing Up and Restoring CredHub Instances Troubleshooting CredHub Dashboard Single Sign-On Enabling Service Instance Sharing Example Service Brokers App Log Streaming Route Services Supporting Multiple CF Instances API Reference UAA API
30-1	6262-6269	Backing	
30-2	6270-6272	Up	
30-3	6273-6276	and	
30-4	6277-6286	Restoring	
30-5	6287-6294	CredHub	
30-6	6295-6304	Instances	
30-7	6305-6320	Troubleshooting	
30-8	6321-6328	CredHub	
30-9	6329-6338	Dashboard	
30-10	6339-6345	Single	
30-11	6346-6353	Sign-On	
30-12	6354-6362	Enabling	
30-13	6363-6370	Service	
30-14	6371-6379	Instance	
30-15	6380-6387	Sharing	
30-16	6388-6395	Example	
30-17	6396-6403	Service	
30-18	6404-6411	Brokers	
30-19	6412-6415	App	
30-20	6416-6419	Log	
30-21	6420-6429	Streaming	
30-22	6430-6435	Route	
30-23	6436-6444	Services	
30-24	6445-6455	Supporting	
30-25	6456-6464	Multiple	
30-26	6465-6467	CF	
30-27	6468-6477	Instances	
30-28	6478-6481	API	
30-29	6482-6491	Reference	
30-30	6492-6495	UAA	
30-31	6496-6499	API	

#Text=CAPI API Client Libraries Rate Limit Information Returned by the Cloud Controller API CAPI V2 CAPI V3 Tips for Java Developers Java Buildpack Design Configuration Java Client Library Grails
31-1	6500-6504	CAPI	
31-2	6505-6508	API	
31-3	6509-6515	Client	
31-4	6516-6525	Libraries	
31-5	6526-6530	Rate	
31-6	6531-6536	Limit	
31-7	6537-6548	Information	
31-8	6549-6557	Returned	
31-9	6558-6560	by	
31-10	6561-6564	the	
31-11	6565-6570	Cloud	
31-12	6571-6581	Controller	
31-13	6582-6585	API	
31-14	6586-6590	CAPI	
31-15	6591-6593	V2	
31-16	6594-6598	CAPI	
31-17	6599-6601	V3	
31-18	6602-6606	Tips	
31-19	6607-6610	for	
31-20	6611-6615	Java	
31-21	6616-6626	Developers	
31-22	6627-6631	Java	
31-23	6632-6641	Buildpack	
31-24	6642-6648	Design	
31-25	6649-6662	Configuration	
31-26	6663-6667	Java	
31-27	6668-6674	Client	
31-28	6675-6682	Library	
31-29	6683-6689	Grails	

#Text=Groovy Ratpack Raw Groovy Java Main Maven Gradle Play Framework Spring Boot CLI Servlet Maven Gradle Binding to Services Java and Grails Best Practices
32-1	6690-6696	Groovy	
32-2	6697-6704	Ratpack	
32-3	6705-6708	Raw	
32-4	6709-6715	Groovy	
32-5	6716-6720	Java	
32-6	6721-6725	Main	
32-7	6726-6731	Maven	
32-8	6732-6738	Gradle	
32-9	6739-6743	Play	
32-10	6744-6753	Framework	
32-11	6754-6760	Spring	
32-12	6761-6765	Boot	
32-13	6766-6769	CLI	
32-14	6770-6777	Servlet	
32-15	6778-6783	Maven	
32-16	6784-6790	Gradle	
32-17	6791-6798	Binding	
32-18	6799-6801	to	
32-19	6802-6810	Services	
32-20	6811-6815	Java	
32-21	6816-6819	and	
32-22	6820-6826	Grails	
32-23	6827-6831	Best	
32-24	6832-6841	Practices	

#Text=Provide a JDBC Driver Allocate Sufficient Memory Troubleshoot Out of Memory Troubleshoot Failed Upload Debug Java Apps on Cloud Foundry Slow Starting Java or Grails Apps Extension Environment Variables Page last updated:
33-1	6842-6849	Provide	
33-2	6850-6851	a	
33-3	6852-6856	JDBC	
33-4	6857-6863	Driver	
33-5	6864-6872	Allocate	
33-6	6873-6883	Sufficient	
33-7	6884-6890	Memory	
33-8	6891-6903	Troubleshoot	
33-9	6904-6907	Out	
33-10	6908-6910	of	
33-11	6911-6917	Memory	
33-12	6918-6930	Troubleshoot	
33-13	6931-6937	Failed	
33-14	6938-6944	Upload	
33-15	6945-6950	Debug	
33-16	6951-6955	Java	
33-17	6956-6960	Apps	
33-18	6961-6963	on	
33-19	6964-6969	Cloud	
33-20	6970-6977	Foundry	
33-21	6978-6982	Slow	
33-22	6983-6991	Starting	
33-23	6992-6996	Java	
33-24	6997-6999	or	
33-25	7000-7006	Grails	
33-26	7007-7011	Apps	
33-27	7012-7021	Extension	
33-28	7022-7033	Environment	
33-29	7034-7043	Variables	
33-30	7044-7048	Page	
33-31	7049-7053	last	
33-32	7054-7061	updated	
33-33	7061-7062	:	

#Text=Cloud Foundry can deploy a number of different JVM-based artifact types. For a more detailed explanation of what it supports, see Additional Documentation in the Cloud Foundry Java Buildpack repository on GitHub. Java Buildpack For information about using, configuring, and extending the Cloud Foundry Java buildpack, see the Cloud Foundry Java Buildpack repository on GitHub. Design
34-1	7063-7068	Cloud	
34-2	7069-7076	Foundry	
34-3	7077-7080	can	
34-4	7081-7087	deploy	
34-5	7088-7089	a	
34-6	7090-7096	number	
34-7	7097-7099	of	
34-8	7100-7109	different	
34-9	7110-7119	JVM-based	
34-10	7120-7128	artifact	
34-11	7129-7134	types	
34-12	7134-7135	.	
34-13	7136-7139	For	
34-14	7140-7141	a	
34-15	7142-7146	more	
34-16	7147-7155	detailed	
34-17	7156-7167	explanation	
34-18	7168-7170	of	
34-19	7171-7175	what	
34-20	7176-7178	it	
34-21	7179-7187	supports	
34-22	7187-7188	,	
34-23	7189-7192	see	
34-24	7193-7203	Additional	
34-25	7204-7217	Documentation	
34-26	7218-7220	in	
34-27	7221-7224	the	
34-28	7225-7230	Cloud	
34-29	7231-7238	Foundry	
34-30	7239-7243	Java	
34-31	7244-7253	Buildpack	
34-32	7254-7264	repository	
34-33	7265-7267	on	
34-34	7268-7274	GitHub	
34-35	7274-7275	.	
34-36	7276-7280	Java	
34-37	7281-7290	Buildpack	
34-38	7291-7294	For	
34-39	7295-7306	information	
34-40	7307-7312	about	
34-41	7313-7318	using	
34-42	7318-7319	,	
34-43	7320-7331	configuring	
34-44	7331-7332	,	
34-45	7333-7336	and	
34-46	7337-7346	extending	
34-47	7347-7350	the	
34-48	7351-7356	Cloud	
34-49	7357-7364	Foundry	
34-50	7365-7369	Java	
34-51	7370-7379	buildpack	
34-52	7379-7380	,	
34-53	7381-7384	see	
34-54	7385-7388	the	
34-55	7389-7394	Cloud	
34-56	7395-7402	Foundry	
34-57	7403-7407	Java	
34-58	7408-7417	Buildpack	
34-59	7418-7428	repository	
34-60	7429-7431	on	
34-61	7432-7438	GitHub	
34-62	7438-7439	.	
34-63	7440-7446	Design	

#Text=The Java buildpack is designed to convert artifacts that run on the JVM into executable apps. It does this by identifying one of the supported artifact types (Grails, Groovy, Java, Play Framework, Spring Boot, and Servlet) and downloading all additional dependencies needed to run. It also analyzes the collection of services bound to the app and downloads any dependencies related to those services. As an example, pushing a WAR file that is bound to a PostgreSQL database and New Relic for performance monitoring results in the following: Initialized empty Git repository in /tmp/buildpacks/java-buildpack/.git/
35-1	7447-7450	The	
35-2	7451-7455	Java	
35-3	7456-7465	buildpack	
35-4	7466-7468	is	
35-5	7469-7477	designed	
35-6	7478-7480	to	
35-7	7481-7488	convert	
35-8	7489-7498	artifacts	
35-9	7499-7503	that	
35-10	7504-7507	run	
35-11	7508-7510	on	
35-12	7511-7514	the	
35-13	7515-7518	JVM	
35-14	7519-7523	into	
35-15	7524-7534	executable	
35-16	7535-7539	apps	
35-17	7539-7540	.	
35-18	7541-7543	It	
35-19	7544-7548	does	
35-20	7549-7553	this	
35-21	7554-7556	by	
35-22	7557-7568	identifying	
35-23	7569-7572	one	
35-24	7573-7575	of	
35-25	7576-7579	the	
35-26	7580-7589	supported	
35-27	7590-7598	artifact	
35-28	7599-7604	types	
35-29	7605-7606	(	
35-30	7606-7612	Grails	
35-31	7612-7613	,	
35-32	7614-7620	Groovy	
35-33	7620-7621	,	
35-34	7622-7626	Java	
35-35	7626-7627	,	
35-36	7628-7632	Play	
35-37	7633-7642	Framework	
35-38	7642-7643	,	
35-39	7644-7650	Spring	
35-40	7651-7655	Boot	
35-41	7655-7656	,	
35-42	7657-7660	and	
35-43	7661-7668	Servlet	
35-44	7668-7669	)	
35-45	7670-7673	and	
35-46	7674-7685	downloading	
35-47	7686-7689	all	
35-48	7690-7700	additional	
35-49	7701-7713	dependencies	
35-50	7714-7720	needed	
35-51	7721-7723	to	
35-52	7724-7727	run	
35-53	7727-7728	.	
35-54	7729-7731	It	
35-55	7732-7736	also	
35-56	7737-7745	analyzes	
35-57	7746-7749	the	
35-58	7750-7760	collection	
35-59	7761-7763	of	
35-60	7764-7772	services	
35-61	7773-7778	bound	
35-62	7779-7781	to	
35-63	7782-7785	the	
35-64	7786-7789	app	
35-65	7790-7793	and	
35-66	7794-7803	downloads	
35-67	7804-7807	any	
35-68	7808-7820	dependencies	
35-69	7821-7828	related	
35-70	7829-7831	to	
35-71	7832-7837	those	
35-72	7838-7846	services	
35-73	7846-7847	.	
35-74	7848-7850	As	
35-75	7851-7853	an	
35-76	7854-7861	example	
35-77	7861-7862	,	
35-78	7863-7870	pushing	
35-79	7871-7872	a	
35-80	7873-7876	WAR	
35-81	7877-7881	file	
35-82	7882-7886	that	
35-83	7887-7889	is	
35-84	7890-7895	bound	
35-85	7896-7898	to	
35-86	7899-7900	a	
35-87	7901-7911	PostgreSQL	
35-88	7912-7920	database	
35-89	7921-7924	and	
35-90	7925-7928	New	
35-91	7929-7934	Relic	
35-92	7935-7938	for	
35-93	7939-7950	performance	
35-94	7951-7961	monitoring	
35-95	7962-7969	results	
35-96	7970-7972	in	
35-97	7973-7976	the	
35-98	7977-7986	following	
35-99	7986-7987	:	
35-100	7988-7999	Initialized	
35-101	8000-8005	empty	
35-102	8006-8009	Git	
35-103	8010-8020	repository	
35-104	8021-8023	in	
35-105	8024-8025	/	
35-106	8025-8028	tmp	
35-107	8028-8029	/	
35-108	8029-8039	buildpacks	
35-109	8039-8040	/	
35-110	8040-8054	java-buildpack	
35-111	8054-8055	/	
35-112	8055-8056	.	
35-113	8056-8059	git	
35-114	8059-8060	/	

#Text=--> Java Buildpack source: https://github.com/cloudfoundry/java-buildpack#0928916a2dd78e9faf9469c558046eef09f60e5d --> Downloading Open Jdk JRE 1.7.0_51 from http://.../openjdk/lucid/x86_64/openjdk-1.7.0_51.tar.gz (0.0s)
36-1	8061-8062	-	
36-2	8062-8063	-	
36-3	8063-8064	>	
36-4	8065-8069	Java	
36-5	8070-8079	Buildpack	
36-6	8080-8086	source	
36-7	8086-8087	:	
36-8	8088-8093	https	
36-9	8093-8094	:	
36-10	8094-8095	/	
36-11	8095-8096	/	
36-12	8096-8106	github.com	
36-13	8106-8107	/	
36-14	8107-8119	cloudfoundry	
36-15	8119-8120	/	
36-16	8120-8134	java-buildpack	
36-17	8134-8175	#0928916a2dd78e9faf9469c558046eef09f60e5d	
36-18	8176-8177	-	
36-19	8177-8178	-	
36-20	8178-8179	>	
36-21	8180-8191	Downloading	
36-22	8192-8196	Open	
36-23	8197-8200	Jdk	
36-24	8201-8204	JRE	
36-25	8205-8210	1.7.0	
36-26	8210-8211	_	
36-27	8211-8213	51	
36-28	8214-8218	from	
36-29	8219-8223	http	
36-30	8223-8224	:	
36-31	8224-8225	/	
36-32	8225-8226	/	
36-33	8226-8227	.	
36-34	8227-8228	.	
36-35	8228-8229	.	
36-36	8229-8230	/	
36-37	8230-8237	openjdk	
36-38	8237-8238	/	
36-39	8238-8243	lucid	
36-40	8243-8244	/	
36-41	8244-8247	x86	
36-42	8247-8248	_	
36-43	8248-8250	64	
36-44	8250-8251	/	
36-45	8251-8258	openjdk	
36-46	8258-8259	-	
36-47	8259-8264	1.7.0	
36-48	8264-8265	_	
36-49	8265-8267	51	
36-50	8267-8268	.	
36-51	8268-8274	tar.gz	
36-52	8275-8276	(	
36-53	8276-8280	0.0s	
36-54	8280-8281	)	

#Text=Expanding Open Jdk JRE to .java-buildpack/open_jdk_jre (1.9s) --> Downloading New Relic Agent 3.4.1 from http://.../new-relic/new-relic-3.4.1.jar (0.4s) --> Downloading Postgresql JDBC 9.3.1100 from
37-1	8282-8291	Expanding	
37-2	8292-8296	Open	
37-3	8297-8300	Jdk	
37-4	8301-8304	JRE	
37-5	8305-8307	to	
37-6	8308-8309	.	
37-7	8309-8323	java-buildpack	
37-8	8323-8324	/	
37-9	8324-8336	open_jdk_jre	
37-10	8337-8338	(	
37-11	8338-8342	1.9s	
37-12	8342-8343	)	
37-13	8344-8345	-	
37-14	8345-8346	-	
37-15	8346-8347	>	
37-16	8348-8359	Downloading	
37-17	8360-8363	New	
37-18	8364-8369	Relic	
37-19	8370-8375	Agent	
37-20	8376-8381	3.4.1	
37-21	8382-8386	from	
37-22	8387-8391	http	
37-23	8391-8392	:	
37-24	8392-8393	/	
37-25	8393-8394	/	
37-26	8394-8395	.	
37-27	8395-8396	.	
37-28	8396-8397	.	
37-29	8397-8398	/	
37-30	8398-8407	new-relic	
37-31	8407-8408	/	
37-32	8408-8417	new-relic	
37-33	8417-8418	-	
37-34	8418-8423	3.4.1	
37-35	8423-8424	.	
37-36	8424-8427	jar	
37-37	8428-8429	(	
37-38	8429-8433	0.4s	
37-39	8433-8434	)	
37-40	8435-8436	-	
37-41	8436-8437	-	
37-42	8437-8438	>	
37-43	8439-8450	Downloading	
37-44	8451-8461	Postgresql	
37-45	8462-8466	JDBC	
37-46	8467-8475	9.3.1100	
37-47	8476-8480	from	

#Text=http://.../postgresql-jdbc/postgresql-jdbc-9.3.1100.jar (0.0s) --> Downloading Spring Auto Reconfiguration 0.8.7 from http://.../auto-reconfiguration/auto-reconfiguration-0.8.7.jar (0.0s)
38-1	8481-8485	http	
38-2	8485-8486	:	
38-3	8486-8487	/	
38-4	8487-8488	/	
38-5	8488-8489	.	
38-6	8489-8490	.	
38-7	8490-8491	.	
38-8	8491-8492	/	
38-9	8492-8507	postgresql-jdbc	
38-10	8507-8508	/	
38-11	8508-8523	postgresql-jdbc	
38-12	8523-8524	-	
38-13	8524-8532	9.3.1100	
38-14	8532-8533	.	
38-15	8533-8536	jar	
38-16	8537-8538	(	
38-17	8538-8542	0.0s	
38-18	8542-8543	)	
38-19	8544-8545	-	
38-20	8545-8546	-	
38-21	8546-8547	>	
38-22	8548-8559	Downloading	
38-23	8560-8566	Spring	
38-24	8567-8571	Auto	
38-25	8572-8587	Reconfiguration	
38-26	8588-8593	0.8.7	
38-27	8594-8598	from	
38-28	8599-8603	http	
38-29	8603-8604	:	
38-30	8604-8605	/	
38-31	8605-8606	/	
38-32	8606-8607	.	
38-33	8607-8608	.	
38-34	8608-8609	.	
38-35	8609-8610	/	
38-36	8610-8630	auto-reconfiguration	
38-37	8630-8631	/	
38-38	8631-8651	auto-reconfiguration	
38-39	8651-8652	-	
38-40	8652-8657	0.8.7	
38-41	8657-8658	.	
38-42	8658-8661	jar	
38-43	8662-8663	(	
38-44	8663-8667	0.0s	
38-45	8667-8668	)	

#Text=Modifying /WEB-INF/web.xml for Auto Reconfiguration --> Downloading Tomcat 7.0.50 from http://.../tomcat/tomcat-7.0.50.tar.gz (0.0s) Expanding Tomcat to .java-buildpack/tomcat (0.1s)
39-1	8669-8678	Modifying	
39-2	8679-8680	/	
39-3	8680-8687	WEB-INF	
39-4	8687-8688	/	
39-5	8688-8695	web.xml	
39-6	8696-8699	for	
39-7	8700-8704	Auto	
39-8	8705-8720	Reconfiguration	
39-9	8721-8722	-	
39-10	8722-8723	-	
39-11	8723-8724	>	
39-12	8725-8736	Downloading	
39-13	8737-8743	Tomcat	
39-14	8744-8750	7.0.50	
39-15	8751-8755	from	
39-16	8756-8760	http	
39-17	8760-8761	:	
39-18	8761-8762	/	
39-19	8762-8763	/	
39-20	8763-8764	.	
39-21	8764-8765	.	
39-22	8765-8766	.	
39-23	8766-8767	/	
39-24	8767-8773	tomcat	
39-25	8773-8774	/	
39-26	8774-8780	tomcat	
39-27	8780-8781	-	
39-28	8781-8787	7.0.50	
39-29	8787-8788	.	
39-30	8788-8794	tar.gz	
39-31	8795-8796	(	
39-32	8796-8800	0.0s	
39-33	8800-8801	)	
39-34	8802-8811	Expanding	
39-35	8812-8818	Tomcat	
39-36	8819-8821	to	
39-37	8822-8823	.	
39-38	8823-8837	java-buildpack	
39-39	8837-8838	/	
39-40	8838-8844	tomcat	
39-41	8845-8846	(	
39-42	8846-8850	0.1s	
39-43	8850-8851	)	

#Text=--> Downloading Buildpack Tomcat Support 1.1.1 from http://.../tomcat-buildpack-support/tomcat-buildpack-support-1.1.1.jar (0.1s) --> Uploading droplet (57M) Configuration
40-1	8852-8853	-	
40-2	8853-8854	-	
40-3	8854-8855	>	
40-4	8856-8867	Downloading	
40-5	8868-8877	Buildpack	
40-6	8878-8884	Tomcat	
40-7	8885-8892	Support	
40-8	8893-8898	1.1.1	
40-9	8899-8903	from	
40-10	8904-8908	http	
40-11	8908-8909	:	
40-12	8909-8910	/	
40-13	8910-8911	/	
40-14	8911-8912	.	
40-15	8912-8913	.	
40-16	8913-8914	.	
40-17	8914-8915	/	
40-18	8915-8939	tomcat-buildpack-support	
40-19	8939-8940	/	
40-20	8940-8964	tomcat-buildpack-support	
40-21	8964-8965	-	
40-22	8965-8970	1.1.1	
40-23	8970-8971	.	
40-24	8971-8974	jar	
40-25	8975-8976	(	
40-26	8976-8980	0.1s	
40-27	8980-8981	)	
40-28	8982-8983	-	
40-29	8983-8984	-	
40-30	8984-8985	>	
40-31	8986-8995	Uploading	
40-32	8996-9003	droplet	
40-33	9004-9005	(	
40-34	9005-9008	57M	
40-35	9008-9009	)	
40-36	9010-9023	Configuration	

#Text=In most cases, the buildpack should work without any configuration. If you are new to Cloud Foundry, Cloud Foundry recommends that you make your first attempts without modifying the buildpack configuration. If the buildpack requires some configuration, use a fork of the buildpack. For more information, see Configuration and Extension in the Cloud Foundry Java Buildpack repository on GitHub. Java Client Library The Cloud Foundry Client Library provides a Java API for interacting with a Cloud Foundry instance. This library, cloudfoundry-client-lib, is used by the Cloud Foundry Maven plugin, the Cloud Foundry Gradle plugin, and other Java-based tools.
41-1	9024-9026	In	
41-2	9027-9031	most	
41-3	9032-9037	cases	
41-4	9037-9038	,	
41-5	9039-9042	the	
41-6	9043-9052	buildpack	
41-7	9053-9059	should	
41-8	9060-9064	work	
41-9	9065-9072	without	
41-10	9073-9076	any	
41-11	9077-9090	configuration	
41-12	9090-9091	.	
41-13	9092-9094	If	
41-14	9095-9098	you	
41-15	9099-9102	are	
41-16	9103-9106	new	
41-17	9107-9109	to	
41-18	9110-9115	Cloud	
41-19	9116-9123	Foundry	
41-20	9123-9124	,	
41-21	9125-9130	Cloud	
41-22	9131-9138	Foundry	
41-23	9139-9149	recommends	
41-24	9150-9154	that	
41-25	9155-9158	you	
41-26	9159-9163	make	
41-27	9164-9168	your	
41-28	9169-9174	first	
41-29	9175-9183	attempts	
41-30	9184-9191	without	
41-31	9192-9201	modifying	
41-32	9202-9205	the	
41-33	9206-9215	buildpack	
41-34	9216-9229	configuration	
41-35	9229-9230	.	
41-36	9231-9233	If	
41-37	9234-9237	the	
41-38	9238-9247	buildpack	
41-39	9248-9256	requires	
41-40	9257-9261	some	
41-41	9262-9275	configuration	
41-42	9275-9276	,	
41-43	9277-9280	use	
41-44	9281-9282	a	
41-45	9283-9287	fork	
41-46	9288-9290	of	
41-47	9291-9294	the	
41-48	9295-9304	buildpack	
41-49	9304-9305	.	
41-50	9306-9309	For	
41-51	9310-9314	more	
41-52	9315-9326	information	
41-53	9326-9327	,	
41-54	9328-9331	see	
41-55	9332-9345	Configuration	
41-56	9346-9349	and	
41-57	9350-9359	Extension	
41-58	9360-9362	in	
41-59	9363-9366	the	
41-60	9367-9372	Cloud	
41-61	9373-9380	Foundry	
41-62	9381-9385	Java	
41-63	9386-9395	Buildpack	
41-64	9396-9406	repository	
41-65	9407-9409	on	
41-66	9410-9416	GitHub	
41-67	9416-9417	.	
41-68	9418-9422	Java	
41-69	9423-9429	Client	
41-70	9430-9437	Library	
41-71	9438-9441	The	
41-72	9442-9447	Cloud	
41-73	9448-9455	Foundry	
41-74	9456-9462	Client	
41-75	9463-9470	Library	
41-76	9471-9479	provides	
41-77	9480-9481	a	
41-78	9482-9486	Java	
41-79	9487-9490	API	
41-80	9491-9494	for	
41-81	9495-9506	interacting	
41-82	9507-9511	with	
41-83	9512-9513	a	
41-84	9514-9519	Cloud	
41-85	9520-9527	Foundry	
41-86	9528-9536	instance	
41-87	9536-9537	.	
41-88	9538-9542	This	
41-89	9543-9550	library	
41-90	9550-9551	,	
41-91	9552-9575	cloudfoundry-client-lib	
41-92	9575-9576	,	
41-93	9577-9579	is	
41-94	9580-9584	used	
41-95	9585-9587	by	
41-96	9588-9591	the	
41-97	9592-9597	Cloud	
41-98	9598-9605	Foundry	
41-99	9606-9611	Maven	
41-100	9612-9618	plugin	
41-101	9618-9619	,	
41-102	9620-9623	the	
41-103	9624-9629	Cloud	
41-104	9630-9637	Foundry	
41-105	9638-9644	Gradle	
41-106	9645-9651	plugin	
41-107	9651-9652	,	
41-108	9653-9656	and	
41-109	9657-9662	other	
41-110	9663-9673	Java-based	
41-111	9674-9679	tools	
41-112	9679-9680	.	

#Text=For information about using this library, see Java Cloud Foundry Library. Grails Grails packages apps into WAR files for deployment into a Servlet container. To build the WAR file and deploy it, run: grails prod war cf push YOUR-APP -p target/YOUR-APP-VERSION.war
42-1	9681-9684	For	
42-2	9685-9696	information	
42-3	9697-9702	about	
42-4	9703-9708	using	
42-5	9709-9713	this	
42-6	9714-9721	library	
42-7	9721-9722	,	
42-8	9723-9726	see	
42-9	9727-9731	Java	
42-10	9732-9737	Cloud	
42-11	9738-9745	Foundry	
42-12	9746-9753	Library	
42-13	9753-9754	.	
42-14	9755-9761	Grails	
42-15	9762-9768	Grails	
42-16	9769-9777	packages	
42-17	9778-9782	apps	
42-18	9783-9787	into	
42-19	9788-9791	WAR	
42-20	9792-9797	files	
42-21	9798-9801	for	
42-22	9802-9812	deployment	
42-23	9813-9817	into	
42-24	9818-9819	a	
42-25	9820-9827	Servlet	
42-26	9828-9837	container	
42-27	9837-9838	.	
42-28	9839-9841	To	
42-29	9842-9847	build	
42-30	9848-9851	the	
42-31	9852-9855	WAR	
42-32	9856-9860	file	
42-33	9861-9864	and	
42-34	9865-9871	deploy	
42-35	9872-9874	it	
42-36	9874-9875	,	
42-37	9876-9879	run	
42-38	9879-9880	:	
42-39	9881-9887	grails	
42-40	9888-9892	prod	
42-41	9893-9896	war	
42-42	9897-9899	cf	
42-43	9900-9904	push	
42-44	9905-9913	YOUR-APP	
42-45	9914-9915	-	
42-46	9915-9916	p	
42-47	9917-9923	target	
42-48	9923-9924	/	
42-49	9924-9944	YOUR-APP-VERSION.war	

#Text=Where: YOUR-APP is the name of your app. YOUR-APP-VERSION is the name of the WAR file you want to build and deploy. Groovy Cloud Foundry supports Groovy apps based on both Ratpack and a simple collection of files.
43-1	9945-9950	Where	
43-2	9950-9951	:	
43-3	9952-9960	YOUR-APP	
43-4	9961-9963	is	
43-5	9964-9967	the	
43-6	9968-9972	name	
43-7	9973-9975	of	
43-8	9976-9980	your	
43-9	9981-9984	app	
43-10	9984-9985	.	
43-11	9986-10002	YOUR-APP-VERSION	
43-12	10003-10005	is	
43-13	10006-10009	the	
43-14	10010-10014	name	
43-15	10015-10017	of	
43-16	10018-10021	the	
43-17	10022-10025	WAR	
43-18	10026-10030	file	
43-19	10031-10034	you	
43-20	10035-10039	want	
43-21	10040-10042	to	
43-22	10043-10048	build	
43-23	10049-10052	and	
43-24	10053-10059	deploy	
43-25	10059-10060	.	
43-26	10061-10067	Groovy	
43-27	10068-10073	Cloud	
43-28	10074-10081	Foundry	
43-29	10082-10090	supports	
43-30	10091-10097	Groovy	
43-31	10098-10102	apps	
43-32	10103-10108	based	
43-33	10109-10111	on	
43-34	10112-10116	both	
43-35	10117-10124	Ratpack	
43-36	10125-10128	and	
43-37	10129-10130	a	
43-38	10131-10137	simple	
43-39	10138-10148	collection	
43-40	10149-10151	of	
43-41	10152-10157	files	
43-42	10157-10158	.	

#Text=Ratpack Ratpack packages apps into two different styles. Cloud Foundry supports the distZip style. To build the ZIP file and deploy it, run: gradle distZip cf push YOUR-APP -p build/distributions/YOUR-ZIP-FILE.zip
44-1	10159-10166	Ratpack	
44-2	10167-10174	Ratpack	
44-3	10175-10183	packages	
44-4	10184-10188	apps	
44-5	10189-10193	into	
44-6	10194-10197	two	
44-7	10198-10207	different	
44-8	10208-10214	styles	
44-9	10214-10215	.	
44-10	10216-10221	Cloud	
44-11	10222-10229	Foundry	
44-12	10230-10238	supports	
44-13	10239-10242	the	
44-14	10243-10250	distZip	
44-15	10251-10256	style	
44-16	10256-10257	.	
44-17	10258-10260	To	
44-18	10261-10266	build	
44-19	10267-10270	the	
44-20	10271-10274	ZIP	
44-21	10275-10279	file	
44-22	10280-10283	and	
44-23	10284-10290	deploy	
44-24	10291-10293	it	
44-25	10293-10294	,	
44-26	10295-10298	run	
44-27	10298-10299	:	
44-28	10300-10306	gradle	
44-29	10307-10314	distZip	
44-30	10315-10317	cf	
44-31	10318-10322	push	
44-32	10323-10331	YOUR-APP	
44-33	10332-10333	-	
44-34	10333-10334	p	
44-35	10335-10340	build	
44-36	10340-10341	/	
44-37	10341-10354	distributions	
44-38	10354-10355	/	
44-39	10355-10372	YOUR-ZIP-FILE.zip	

#Text=Where: YOUR-APP is the name of your app. YOUR-ZIP-FILE is the name of the ZIP file you want to build and deploy. For more information, see the Ratpack website. Raw Groovy
45-1	10373-10378	Where	
45-2	10378-10379	:	
45-3	10380-10388	YOUR-APP	
45-4	10389-10391	is	
45-5	10392-10395	the	
45-6	10396-10400	name	
45-7	10401-10403	of	
45-8	10404-10408	your	
45-9	10409-10412	app	
45-10	10412-10413	.	
45-11	10414-10427	YOUR-ZIP-FILE	
45-12	10428-10430	is	
45-13	10431-10434	the	
45-14	10435-10439	name	
45-15	10440-10442	of	
45-16	10443-10446	the	
45-17	10447-10450	ZIP	
45-18	10451-10455	file	
45-19	10456-10459	you	
45-20	10460-10464	want	
45-21	10465-10467	to	
45-22	10468-10473	build	
45-23	10474-10477	and	
45-24	10478-10484	deploy	
45-25	10484-10485	.	
45-26	10486-10489	For	
45-27	10490-10494	more	
45-28	10495-10506	information	
45-29	10506-10507	,	
45-30	10508-10511	see	
45-31	10512-10515	the	
45-32	10516-10523	Ratpack	
45-33	10524-10531	website	
45-34	10531-10532	.	
45-35	10533-10536	Raw	
45-36	10537-10543	Groovy	

#Text=You can run Groovy apps that are made up of a single entry point and any supporting files without any other work. To deploy them, run: cf push YOUR-APP Where YOUR-APP is the name of your app. For more information, see Groovy Container in the Cloud Foundry Java Buildpack repository on GitHub. Java Main
46-1	10544-10547	You	
46-2	10548-10551	can	
46-3	10552-10555	run	
46-4	10556-10562	Groovy	
46-5	10563-10567	apps	
46-6	10568-10572	that	
46-7	10573-10576	are	
46-8	10577-10581	made	
46-9	10582-10584	up	
46-10	10585-10587	of	
46-11	10588-10589	a	
46-12	10590-10596	single	
46-13	10597-10602	entry	
46-14	10603-10608	point	
46-15	10609-10612	and	
46-16	10613-10616	any	
46-17	10617-10627	supporting	
46-18	10628-10633	files	
46-19	10634-10641	without	
46-20	10642-10645	any	
46-21	10646-10651	other	
46-22	10652-10656	work	
46-23	10656-10657	.	
46-24	10658-10660	To	
46-25	10661-10667	deploy	
46-26	10668-10672	them	
46-27	10672-10673	,	
46-28	10674-10677	run	
46-29	10677-10678	:	
46-30	10679-10681	cf	
46-31	10682-10686	push	
46-32	10687-10695	YOUR-APP	
46-33	10696-10701	Where	
46-34	10702-10710	YOUR-APP	
46-35	10711-10713	is	
46-36	10714-10717	the	
46-37	10718-10722	name	
46-38	10723-10725	of	
46-39	10726-10730	your	
46-40	10731-10734	app	
46-41	10734-10735	.	
46-42	10736-10739	For	
46-43	10740-10744	more	
46-44	10745-10756	information	
46-45	10756-10757	,	
46-46	10758-10761	see	
46-47	10762-10768	Groovy	
46-48	10769-10778	Container	
46-49	10779-10781	in	
46-50	10782-10785	the	
46-51	10786-10791	Cloud	
46-52	10792-10799	Foundry	
46-53	10800-10804	Java	
46-54	10805-10814	Buildpack	
46-55	10815-10825	repository	
46-56	10826-10828	on	
46-57	10829-10835	GitHub	
46-58	10835-10836	.	
46-59	10837-10841	Java	
46-60	10842-10846	Main	

#Text=Java apps with a main() method can be run provided that they are packaged as self-executable JARs. For more information, see Java Main Container in the Cloud Foundry Java Buildpack repository on GitHub. Note: If your app is not web-enabled, you must suppress route creation to avoid a failed to start accepting connections error. To suppress route creation, add no-route: true to the app manifest or use the --no-route flag with the cf push command. For more information about the no-route attribute, see Deploying with App Manifests.
47-1	10847-10851	Java	
47-2	10852-10856	apps	
47-3	10857-10861	with	
47-4	10862-10863	a	
47-5	10864-10868	main	
47-6	10868-10869	(	
47-7	10869-10870	)	
47-8	10871-10877	method	
47-9	10878-10881	can	
47-10	10882-10884	be	
47-11	10885-10888	run	
47-12	10889-10897	provided	
47-13	10898-10902	that	
47-14	10903-10907	they	
47-15	10908-10911	are	
47-16	10912-10920	packaged	
47-17	10921-10923	as	
47-18	10924-10939	self-executable	
47-19	10940-10944	JARs	
47-20	10944-10945	.	
47-21	10946-10949	For	
47-22	10950-10954	more	
47-23	10955-10966	information	
47-24	10966-10967	,	
47-25	10968-10971	see	
47-26	10972-10976	Java	
47-27	10977-10981	Main	
47-28	10982-10991	Container	
47-29	10992-10994	in	
47-30	10995-10998	the	
47-31	10999-11004	Cloud	
47-32	11005-11012	Foundry	
47-33	11013-11017	Java	
47-34	11018-11027	Buildpack	
47-35	11028-11038	repository	
47-36	11039-11041	on	
47-37	11042-11048	GitHub	
47-38	11048-11049	.	
47-39	11050-11054	Note	
47-40	11054-11055	:	
47-41	11056-11058	If	
47-42	11059-11063	your	
47-43	11064-11067	app	
47-44	11068-11070	is	
47-45	11071-11074	not	
47-46	11075-11086	web-enabled	
47-47	11086-11087	,	
47-48	11088-11091	you	
47-49	11092-11096	must	
47-50	11097-11105	suppress	
47-51	11106-11111	route	
47-52	11112-11120	creation	
47-53	11121-11123	to	
47-54	11124-11129	avoid	
47-55	11130-11131	a	
47-56	11132-11138	failed	
47-57	11139-11141	to	
47-58	11142-11147	start	
47-59	11148-11157	accepting	
47-60	11158-11169	connections	
47-61	11170-11175	error	
47-62	11175-11176	.	
47-63	11177-11179	To	
47-64	11180-11188	suppress	
47-65	11189-11194	route	
47-66	11195-11203	creation	
47-67	11203-11204	,	
47-68	11205-11208	add	
47-69	11209-11217	no-route	
47-70	11217-11218	:	
47-71	11219-11223	true	
47-72	11224-11226	to	
47-73	11227-11230	the	
47-74	11231-11234	app	
47-75	11235-11243	manifest	
47-76	11244-11246	or	
47-77	11247-11250	use	
47-78	11251-11254	the	
47-79	11255-11256	-	
47-80	11256-11257	-	
47-81	11257-11265	no-route	
47-82	11266-11270	flag	
47-83	11271-11275	with	
47-84	11276-11279	the	
47-85	11280-11282	cf	
47-86	11283-11287	push	
47-87	11288-11295	command	
47-88	11295-11296	.	
47-89	11297-11300	For	
47-90	11301-11305	more	
47-91	11306-11317	information	
47-92	11318-11323	about	
47-93	11324-11327	the	
47-94	11328-11336	no-route	
47-95	11337-11346	attribute	
47-96	11346-11347	,	
47-97	11348-11351	see	
47-98	11352-11361	Deploying	
47-99	11362-11366	with	
47-100	11367-11370	App	
47-101	11371-11380	Manifests	
47-102	11380-11381	.	

#Text=Maven A Maven build can create a self-executable JAR. To build and deploy the JAR, run: mvn package cf push YOUR-APP -p target/YOUR-APP-VERSION.jar Where:
48-1	11382-11387	Maven	
48-2	11388-11389	A	
48-3	11390-11395	Maven	
48-4	11396-11401	build	
48-5	11402-11405	can	
48-6	11406-11412	create	
48-7	11413-11414	a	
48-8	11415-11430	self-executable	
48-9	11431-11434	JAR	
48-10	11434-11435	.	
48-11	11436-11438	To	
48-12	11439-11444	build	
48-13	11445-11448	and	
48-14	11449-11455	deploy	
48-15	11456-11459	the	
48-16	11460-11463	JAR	
48-17	11463-11464	,	
48-18	11465-11468	run	
48-19	11468-11469	:	
48-20	11470-11473	mvn	
48-21	11474-11481	package	
48-22	11482-11484	cf	
48-23	11485-11489	push	
48-24	11490-11498	YOUR-APP	
48-25	11499-11500	-	
48-26	11500-11501	p	
48-27	11502-11508	target	
48-28	11508-11509	/	
48-29	11509-11529	YOUR-APP-VERSION.jar	
48-30	11530-11535	Where	
48-31	11535-11536	:	

#Text=YOUR-APP is the name of your app. YOUR-APP-VERSION is the name of the JAR you want to build and deploy. Gradle A Gradle build can create a self-executable JAR. To build and deploy the JAR, run: gradle build
49-1	11537-11545	YOUR-APP	
49-2	11546-11548	is	
49-3	11549-11552	the	
49-4	11553-11557	name	
49-5	11558-11560	of	
49-6	11561-11565	your	
49-7	11566-11569	app	
49-8	11569-11570	.	
49-9	11571-11587	YOUR-APP-VERSION	
49-10	11588-11590	is	
49-11	11591-11594	the	
49-12	11595-11599	name	
49-13	11600-11602	of	
49-14	11603-11606	the	
49-15	11607-11610	JAR	
49-16	11611-11614	you	
49-17	11615-11619	want	
49-18	11620-11622	to	
49-19	11623-11628	build	
49-20	11629-11632	and	
49-21	11633-11639	deploy	
49-22	11639-11640	.	
49-23	11641-11647	Gradle	
49-24	11648-11649	A	
49-25	11650-11656	Gradle	
49-26	11657-11662	build	
49-27	11663-11666	can	
49-28	11667-11673	create	
49-29	11674-11675	a	
49-30	11676-11691	self-executable	
49-31	11692-11695	JAR	
49-32	11695-11696	.	
49-33	11697-11699	To	
49-34	11700-11705	build	
49-35	11706-11709	and	
49-36	11710-11716	deploy	
49-37	11717-11720	the	
49-38	11721-11724	JAR	
49-39	11724-11725	,	
49-40	11726-11729	run	
49-41	11729-11730	:	
49-42	11731-11737	gradle	
49-43	11738-11743	build	

#Text=cf push YOUR-APP -p build/libs/YOUR-APP-VERSION.jar Where: YOUR-APP is the name of your app. YOUR-APP-VERSION is the name of the JAR you want to build and deploy. Play Framework
50-1	11744-11746	cf	
50-2	11747-11751	push	
50-3	11752-11760	YOUR-APP	
50-4	11761-11762	-	
50-5	11762-11763	p	
50-6	11764-11769	build	
50-7	11769-11770	/	
50-8	11770-11774	libs	
50-9	11774-11775	/	
50-10	11775-11795	YOUR-APP-VERSION.jar	
50-11	11796-11801	Where	
50-12	11801-11802	:	
50-13	11803-11811	YOUR-APP	
50-14	11812-11814	is	
50-15	11815-11818	the	
50-16	11819-11823	name	
50-17	11824-11826	of	
50-18	11827-11831	your	
50-19	11832-11835	app	
50-20	11835-11836	.	
50-21	11837-11853	YOUR-APP-VERSION	
50-22	11854-11856	is	
50-23	11857-11860	the	
50-24	11861-11865	name	
50-25	11866-11868	of	
50-26	11869-11872	the	
50-27	11873-11876	JAR	
50-28	11877-11880	you	
50-29	11881-11885	want	
50-30	11886-11888	to	
50-31	11889-11894	build	
50-32	11895-11898	and	
50-33	11899-11905	deploy	
50-34	11905-11906	.	
50-35	11907-11911	Play	
50-36	11912-11921	Framework	

#Text=The Play Framework packages apps into two different styles. Cloud Foundry supports both the staged and dist styles. To build the dist style and deploy it, run: play dist cf push YOUR-APP -p target/universal/YOUR-APP-VERSION.zip Where: YOUR-APP is the name of your app.
51-1	11922-11925	The	
51-2	11926-11930	Play	
51-3	11931-11940	Framework	
51-4	11941-11949	packages	
51-5	11950-11954	apps	
51-6	11955-11959	into	
51-7	11960-11963	two	
51-8	11964-11973	different	
51-9	11974-11980	styles	
51-10	11980-11981	.	
51-11	11982-11987	Cloud	
51-12	11988-11995	Foundry	
51-13	11996-12004	supports	
51-14	12005-12009	both	
51-15	12010-12013	the	
51-16	12014-12020	staged	
51-17	12021-12024	and	
51-18	12025-12029	dist	
51-19	12030-12036	styles	
51-20	12036-12037	.	
51-21	12038-12040	To	
51-22	12041-12046	build	
51-23	12047-12050	the	
51-24	12051-12055	dist	
51-25	12056-12061	style	
51-26	12062-12065	and	
51-27	12066-12072	deploy	
51-28	12073-12075	it	
51-29	12075-12076	,	
51-30	12077-12080	run	
51-31	12080-12081	:	
51-32	12082-12086	play	
51-33	12087-12091	dist	
51-34	12092-12094	cf	
51-35	12095-12099	push	
51-36	12100-12108	YOUR-APP	
51-37	12109-12110	-	
51-38	12110-12111	p	
51-39	12112-12118	target	
51-40	12118-12119	/	
51-41	12119-12128	universal	
51-42	12128-12129	/	
51-43	12129-12149	YOUR-APP-VERSION.zip	
51-44	12150-12155	Where	
51-45	12155-12156	:	
51-46	12157-12165	YOUR-APP	
51-47	12166-12168	is	
51-48	12169-12172	the	
51-49	12173-12177	name	
51-50	12178-12180	of	
51-51	12181-12185	your	
51-52	12186-12189	app	
51-53	12189-12190	.	

#Text=YOUR-APP-VERSION is the name of the dist style ZIP you want to build and deploy. For more information, see the Play Framework website. Spring Boot CLI Spring Boot can run apps comprised entirely of POGOs. To deploy them, run: spring grab *.groovy cf push YOUR-APP
52-1	12191-12207	YOUR-APP-VERSION	
52-2	12208-12210	is	
52-3	12211-12214	the	
52-4	12215-12219	name	
52-5	12220-12222	of	
52-6	12223-12226	the	
52-7	12227-12231	dist	
52-8	12232-12237	style	
52-9	12238-12241	ZIP	
52-10	12242-12245	you	
52-11	12246-12250	want	
52-12	12251-12253	to	
52-13	12254-12259	build	
52-14	12260-12263	and	
52-15	12264-12270	deploy	
52-16	12270-12271	.	
52-17	12272-12275	For	
52-18	12276-12280	more	
52-19	12281-12292	information	
52-20	12292-12293	,	
52-21	12294-12297	see	
52-22	12298-12301	the	
52-23	12302-12306	Play	
52-24	12307-12316	Framework	
52-25	12317-12324	website	
52-26	12324-12325	.	
52-27	12326-12332	Spring	
52-28	12333-12337	Boot	
52-29	12338-12341	CLI	
52-30	12342-12348	Spring	
52-31	12349-12353	Boot	
52-32	12354-12357	can	
52-33	12358-12361	run	
52-34	12362-12366	apps	
52-35	12367-12376	comprised	
52-36	12377-12385	entirely	
52-37	12386-12388	of	
52-38	12389-12394	POGOs	
52-39	12394-12395	.	
52-40	12396-12398	To	
52-41	12399-12405	deploy	
52-42	12406-12410	them	
52-43	12410-12411	,	
52-44	12412-12415	run	
52-45	12415-12416	:	
52-46	12417-12423	spring	
52-47	12424-12428	grab	
52-48	12429-12430	*	
52-49	12430-12431	.	
52-50	12431-12437	groovy	
52-51	12438-12440	cf	
52-52	12441-12445	push	
52-53	12446-12454	YOUR-APP	

#Text=Where YOUR-APP is the name of your app. For more information, see Spring Boot on the Spring website and Spring Boot CLI Container in the Cloud Foundry Java Buildpack repository on GitHub. Servlet Java apps can be packaged as Servlet apps. Maven
53-1	12455-12460	Where	
53-2	12461-12469	YOUR-APP	
53-3	12470-12472	is	
53-4	12473-12476	the	
53-5	12477-12481	name	
53-6	12482-12484	of	
53-7	12485-12489	your	
53-8	12490-12493	app	
53-9	12493-12494	.	
53-10	12495-12498	For	
53-11	12499-12503	more	
53-12	12504-12515	information	
53-13	12515-12516	,	
53-14	12517-12520	see	
53-15	12521-12527	Spring	
53-16	12528-12532	Boot	
53-17	12533-12535	on	
53-18	12536-12539	the	
53-19	12540-12546	Spring	
53-20	12547-12554	website	
53-21	12555-12558	and	
53-22	12559-12565	Spring	
53-23	12566-12570	Boot	
53-24	12571-12574	CLI	
53-25	12575-12584	Container	
53-26	12585-12587	in	
53-27	12588-12591	the	
53-28	12592-12597	Cloud	
53-29	12598-12605	Foundry	
53-30	12606-12610	Java	
53-31	12611-12620	Buildpack	
53-32	12621-12631	repository	
53-33	12632-12634	on	
53-34	12635-12641	GitHub	
53-35	12641-12642	.	
53-36	12643-12650	Servlet	
53-37	12651-12655	Java	
53-38	12656-12660	apps	
53-39	12661-12664	can	
53-40	12665-12667	be	
53-41	12668-12676	packaged	
53-42	12677-12679	as	
53-43	12680-12687	Servlet	
53-44	12688-12692	apps	
53-45	12692-12693	.	
53-46	12694-12699	Maven	

#Text=A Maven build can create a Servlet WAR. To build and deploy the WAR, run: mvn package cf push YOUR-APP -p target/YOUR-APP-VERSION.war Where: YOUR-APP is the name of your app. YOUR-APP-VERSION is the name of the WAR you want to build and deploy.
54-1	12700-12701	A	
54-2	12702-12707	Maven	
54-3	12708-12713	build	
54-4	12714-12717	can	
54-5	12718-12724	create	
54-6	12725-12726	a	
54-7	12727-12734	Servlet	
54-8	12735-12738	WAR	
54-9	12738-12739	.	
54-10	12740-12742	To	
54-11	12743-12748	build	
54-12	12749-12752	and	
54-13	12753-12759	deploy	
54-14	12760-12763	the	
54-15	12764-12767	WAR	
54-16	12767-12768	,	
54-17	12769-12772	run	
54-18	12772-12773	:	
54-19	12774-12777	mvn	
54-20	12778-12785	package	
54-21	12786-12788	cf	
54-22	12789-12793	push	
54-23	12794-12802	YOUR-APP	
54-24	12803-12804	-	
54-25	12804-12805	p	
54-26	12806-12812	target	
54-27	12812-12813	/	
54-28	12813-12833	YOUR-APP-VERSION.war	
54-29	12834-12839	Where	
54-30	12839-12840	:	
54-31	12841-12849	YOUR-APP	
54-32	12850-12852	is	
54-33	12853-12856	the	
54-34	12857-12861	name	
54-35	12862-12864	of	
54-36	12865-12869	your	
54-37	12870-12873	app	
54-38	12873-12874	.	
54-39	12875-12891	YOUR-APP-VERSION	
54-40	12892-12894	is	
54-41	12895-12898	the	
54-42	12899-12903	name	
54-43	12904-12906	of	
54-44	12907-12910	the	
54-45	12911-12914	WAR	
54-46	12915-12918	you	
54-47	12919-12923	want	
54-48	12924-12926	to	
54-49	12927-12932	build	
54-50	12933-12936	and	
54-51	12937-12943	deploy	
54-52	12943-12944	.	

#Text=Gradle A Gradle build can create a Servlet WAR. To build and deploy the WAR, run: gradle build cf push YOUR-APP -p build/libs/YOUR-APP-VERSION.war Where:
55-1	12945-12951	Gradle	
55-2	12952-12953	A	
55-3	12954-12960	Gradle	
55-4	12961-12966	build	
55-5	12967-12970	can	
55-6	12971-12977	create	
55-7	12978-12979	a	
55-8	12980-12987	Servlet	
55-9	12988-12991	WAR	
55-10	12991-12992	.	
55-11	12993-12995	To	
55-12	12996-13001	build	
55-13	13002-13005	and	
55-14	13006-13012	deploy	
55-15	13013-13016	the	
55-16	13017-13020	WAR	
55-17	13020-13021	,	
55-18	13022-13025	run	
55-19	13025-13026	:	
55-20	13027-13033	gradle	
55-21	13034-13039	build	
55-22	13040-13042	cf	
55-23	13043-13047	push	
55-24	13048-13056	YOUR-APP	
55-25	13057-13058	-	
55-26	13058-13059	p	
55-27	13060-13065	build	
55-28	13065-13066	/	
55-29	13066-13070	libs	
55-30	13070-13071	/	
55-31	13071-13091	YOUR-APP-VERSION.war	
55-32	13092-13097	Where	
55-33	13097-13098	:	

#Text=YOUR-APP is the name of your app. YOUR-APP-VERSION is the name of the WAR you want to build and deploy. Binding to Services For more information about binding apps to services, see: Configuring Service Connections for Grails Configuring Service Connections for Play Framework
56-1	13099-13107	YOUR-APP	
56-2	13108-13110	is	
56-3	13111-13114	the	
56-4	13115-13119	name	
56-5	13120-13122	of	
56-6	13123-13127	your	
56-7	13128-13131	app	
56-8	13131-13132	.	
56-9	13133-13149	YOUR-APP-VERSION	
56-10	13150-13152	is	
56-11	13153-13156	the	
56-12	13157-13161	name	
56-13	13162-13164	of	
56-14	13165-13168	the	
56-15	13169-13172	WAR	
56-16	13173-13176	you	
56-17	13177-13181	want	
56-18	13182-13184	to	
56-19	13185-13190	build	
56-20	13191-13194	and	
56-21	13195-13201	deploy	
56-22	13201-13202	.	
56-23	13203-13210	Binding	
56-24	13211-13213	to	
56-25	13214-13222	Services	
56-26	13223-13226	For	
56-27	13227-13231	more	
56-28	13232-13243	information	
56-29	13244-13249	about	
56-30	13250-13257	binding	
56-31	13258-13262	apps	
56-32	13263-13265	to	
56-33	13266-13274	services	
56-34	13274-13275	,	
56-35	13276-13279	see	
56-36	13279-13280	:	
56-37	13281-13292	Configuring	
56-38	13293-13300	Service	
56-39	13301-13312	Connections	
56-40	13313-13316	for	
56-41	13317-13323	Grails	
56-42	13324-13335	Configuring	
56-43	13336-13343	Service	
56-44	13344-13355	Connections	
56-45	13356-13359	for	
56-46	13360-13364	Play	
56-47	13365-13374	Framework	

#Text=Configuring Service Connections for Spring Java and Grails Best Practices Provide a JDBC Driver The Java buildpack does not bundle a JDBC driver with your app. If you want your app to access a SQL RDBMS, include the appropriate driver in your app.
57-1	13375-13386	Configuring	
57-2	13387-13394	Service	
57-3	13395-13406	Connections	
57-4	13407-13410	for	
57-5	13411-13417	Spring	
57-6	13418-13422	Java	
57-7	13423-13426	and	
57-8	13427-13433	Grails	
57-9	13434-13438	Best	
57-10	13439-13448	Practices	
57-11	13449-13456	Provide	
57-12	13457-13458	a	
57-13	13459-13463	JDBC	
57-14	13464-13470	Driver	
57-15	13471-13474	The	
57-16	13475-13479	Java	
57-17	13480-13489	buildpack	
57-18	13490-13494	does	
57-19	13495-13498	not	
57-20	13499-13505	bundle	
57-21	13506-13507	a	
57-22	13508-13512	JDBC	
57-23	13513-13519	driver	
57-24	13520-13524	with	
57-25	13525-13529	your	
57-26	13530-13533	app	
57-27	13533-13534	.	
57-28	13535-13537	If	
57-29	13538-13541	you	
57-30	13542-13546	want	
57-31	13547-13551	your	
57-32	13552-13555	app	
57-33	13556-13558	to	
57-34	13559-13565	access	
57-35	13566-13567	a	
57-36	13568-13571	SQL	
57-37	13572-13577	RDBMS	
57-38	13577-13578	,	
57-39	13579-13586	include	
57-40	13587-13590	the	
57-41	13591-13602	appropriate	
57-42	13603-13609	driver	
57-43	13610-13612	in	
57-44	13613-13617	your	
57-45	13618-13621	app	
57-46	13621-13622	.	

#Text=Allocate Sufficient Memory If you do not allocate sufficient memory to a Java app when you deploy it, it may fail to start, or Cloud Foundry may terminate it. You must allocate enough memory to allow for: Java heap Metaspace, if using Java 8
58-1	13623-13631	Allocate	
58-2	13632-13642	Sufficient	
58-3	13643-13649	Memory	
58-4	13650-13652	If	
58-5	13653-13656	you	
58-6	13657-13659	do	
58-7	13660-13663	not	
58-8	13664-13672	allocate	
58-9	13673-13683	sufficient	
58-10	13684-13690	memory	
58-11	13691-13693	to	
58-12	13694-13695	a	
58-13	13696-13700	Java	
58-14	13701-13704	app	
58-15	13705-13709	when	
58-16	13710-13713	you	
58-17	13714-13720	deploy	
58-18	13721-13723	it	
58-19	13723-13724	,	
58-20	13725-13727	it	
58-21	13728-13731	may	
58-22	13732-13736	fail	
58-23	13737-13739	to	
58-24	13740-13745	start	
58-25	13745-13746	,	
58-26	13747-13749	or	
58-27	13750-13755	Cloud	
58-28	13756-13763	Foundry	
58-29	13764-13767	may	
58-30	13768-13777	terminate	
58-31	13778-13780	it	
58-32	13780-13781	.	
58-33	13782-13785	You	
58-34	13786-13790	must	
58-35	13791-13799	allocate	
58-36	13800-13806	enough	
58-37	13807-13813	memory	
58-38	13814-13816	to	
58-39	13817-13822	allow	
58-40	13823-13826	for	
58-41	13826-13827	:	
58-42	13828-13832	Java	
58-43	13833-13837	heap	
58-44	13838-13847	Metaspace	
58-45	13847-13848	,	
58-46	13849-13851	if	
58-47	13852-13857	using	
58-48	13858-13862	Java	
58-49	13863-13864	8	

#Text=PermGen, if using Java 7 or earlier Stack size per Thread JVM overhead The config/open_jdk_jre.yml file of the Java buildpack contains default memory size and weighting settings for the JRE. For an explanation of JRE memory sizes and weightings and how the Java buildpack calculates and allocates memory to the JRE for your app, see Open JDK JRE in the Cloud Foundry Java Buildpack on GitHub.
59-1	13865-13872	PermGen	
59-2	13872-13873	,	
59-3	13874-13876	if	
59-4	13877-13882	using	
59-5	13883-13887	Java	
59-6	13888-13889	7	
59-7	13890-13892	or	
59-8	13893-13900	earlier	
59-9	13901-13906	Stack	
59-10	13907-13911	size	
59-11	13912-13915	per	
59-12	13916-13922	Thread	
59-13	13923-13926	JVM	
59-14	13927-13935	overhead	
59-15	13936-13939	The	
59-16	13940-13946	config	
59-17	13946-13947	/	
59-18	13947-13963	open_jdk_jre.yml	
59-19	13964-13968	file	
59-20	13969-13971	of	
59-21	13972-13975	the	
59-22	13976-13980	Java	
59-23	13981-13990	buildpack	
59-24	13991-13999	contains	
59-25	14000-14007	default	
59-26	14008-14014	memory	
59-27	14015-14019	size	
59-28	14020-14023	and	
59-29	14024-14033	weighting	
59-30	14034-14042	settings	
59-31	14043-14046	for	
59-32	14047-14050	the	
59-33	14051-14054	JRE	
59-34	14054-14055	.	
59-35	14056-14059	For	
59-36	14060-14062	an	
59-37	14063-14074	explanation	
59-38	14075-14077	of	
59-39	14078-14081	JRE	
59-40	14082-14088	memory	
59-41	14089-14094	sizes	
59-42	14095-14098	and	
59-43	14099-14109	weightings	
59-44	14110-14113	and	
59-45	14114-14117	how	
59-46	14118-14121	the	
59-47	14122-14126	Java	
59-48	14127-14136	buildpack	
59-49	14137-14147	calculates	
59-50	14148-14151	and	
59-51	14152-14161	allocates	
59-52	14162-14168	memory	
59-53	14169-14171	to	
59-54	14172-14175	the	
59-55	14176-14179	JRE	
59-56	14180-14183	for	
59-57	14184-14188	your	
59-58	14189-14192	app	
59-59	14192-14193	,	
59-60	14194-14197	see	
59-61	14198-14202	Open	
59-62	14203-14206	JDK	
59-63	14207-14210	JRE	
59-64	14211-14213	in	
59-65	14214-14217	the	
59-66	14218-14223	Cloud	
59-67	14224-14231	Foundry	
59-68	14232-14236	Java	
59-69	14237-14246	Buildpack	
59-70	14247-14249	on	
59-71	14250-14256	GitHub	
59-72	14256-14257	.	

#Text=To configure memory-related JRE options for your app, either create a custom buildpack and specify this buildpack in your deployment manifest, or override the default memory settings of your buildpack as described in Configuration and Extension with the properties listed in the Open JDK JRE README in the Cloud Foundry Java Buildpack on GitHub. For more information about configuring custom buildpacks and manifests, see Custom Buildpacks and Deploying with App Manifests. To see memory utilization when your app is running, run: cf app YOUR-APP Where YOUR-APP is the name of your app. Troubleshoot Out of Memory
60-1	14258-14260	To	
60-2	14261-14270	configure	
60-3	14271-14285	memory-related	
60-4	14286-14289	JRE	
60-5	14290-14297	options	
60-6	14298-14301	for	
60-7	14302-14306	your	
60-8	14307-14310	app	
60-9	14310-14311	,	
60-10	14312-14318	either	
60-11	14319-14325	create	
60-12	14326-14327	a	
60-13	14328-14334	custom	
60-14	14335-14344	buildpack	
60-15	14345-14348	and	
60-16	14349-14356	specify	
60-17	14357-14361	this	
60-18	14362-14371	buildpack	
60-19	14372-14374	in	
60-20	14375-14379	your	
60-21	14380-14390	deployment	
60-22	14391-14399	manifest	
60-23	14399-14400	,	
60-24	14401-14403	or	
60-25	14404-14412	override	
60-26	14413-14416	the	
60-27	14417-14424	default	
60-28	14425-14431	memory	
60-29	14432-14440	settings	
60-30	14441-14443	of	
60-31	14444-14448	your	
60-32	14449-14458	buildpack	
60-33	14459-14461	as	
60-34	14462-14471	described	
60-35	14472-14474	in	
60-36	14475-14488	Configuration	
60-37	14489-14492	and	
60-38	14493-14502	Extension	
60-39	14503-14507	with	
60-40	14508-14511	the	
60-41	14512-14522	properties	
60-42	14523-14529	listed	
60-43	14530-14532	in	
60-44	14533-14536	the	
60-45	14537-14541	Open	
60-46	14542-14545	JDK	
60-47	14546-14549	JRE	
60-48	14550-14556	README	
60-49	14557-14559	in	
60-50	14560-14563	the	
60-51	14564-14569	Cloud	
60-52	14570-14577	Foundry	
60-53	14578-14582	Java	
60-54	14583-14592	Buildpack	
60-55	14593-14595	on	
60-56	14596-14602	GitHub	
60-57	14602-14603	.	
60-58	14604-14607	For	
60-59	14608-14612	more	
60-60	14613-14624	information	
60-61	14625-14630	about	
60-62	14631-14642	configuring	
60-63	14643-14649	custom	
60-64	14650-14660	buildpacks	
60-65	14661-14664	and	
60-66	14665-14674	manifests	
60-67	14674-14675	,	
60-68	14676-14679	see	
60-69	14680-14686	Custom	
60-70	14687-14697	Buildpacks	
60-71	14698-14701	and	
60-72	14702-14711	Deploying	
60-73	14712-14716	with	
60-74	14717-14720	App	
60-75	14721-14730	Manifests	
60-76	14730-14731	.	
60-77	14732-14734	To	
60-78	14735-14738	see	
60-79	14739-14745	memory	
60-80	14746-14757	utilization	
60-81	14758-14762	when	
60-82	14763-14767	your	
60-83	14768-14771	app	
60-84	14772-14774	is	
60-85	14775-14782	running	
60-86	14782-14783	,	
60-87	14784-14787	run	
60-88	14787-14788	:	
60-89	14789-14791	cf	
60-90	14792-14795	app	
60-91	14796-14804	YOUR-APP	
60-92	14805-14810	Where	
60-93	14811-14819	YOUR-APP	
60-94	14820-14822	is	
60-95	14823-14826	the	
60-96	14827-14831	name	
60-97	14832-14834	of	
60-98	14835-14839	your	
60-99	14840-14843	app	
60-100	14843-14844	.	
60-101	14845-14857	Troubleshoot	
60-102	14858-14861	Out	
60-103	14862-14864	of	
60-104	14865-14871	Memory	

#Text=A Java app may crash because of insufficient memory on the Garden container or the JVM on which it runs. The sections below provide guidance for help diagnosing and resolving such issues. JVM Error: java.lang.OutOfMemoryError. For example: $ cf logs YOUR-APP --recent
61-1	14872-14873	A	
61-2	14874-14878	Java	
61-3	14879-14882	app	
61-4	14883-14886	may	
61-5	14887-14892	crash	
61-6	14893-14900	because	
61-7	14901-14903	of	
61-8	14904-14916	insufficient	
61-9	14917-14923	memory	
61-10	14924-14926	on	
61-11	14927-14930	the	
61-12	14931-14937	Garden	
61-13	14938-14947	container	
61-14	14948-14950	or	
61-15	14951-14954	the	
61-16	14955-14958	JVM	
61-17	14959-14961	on	
61-18	14962-14967	which	
61-19	14968-14970	it	
61-20	14971-14975	runs	
61-21	14975-14976	.	
61-22	14977-14980	The	
61-23	14981-14989	sections	
61-24	14990-14995	below	
61-25	14996-15003	provide	
61-26	15004-15012	guidance	
61-27	15013-15016	for	
61-28	15017-15021	help	
61-29	15022-15032	diagnosing	
61-30	15033-15036	and	
61-31	15037-15046	resolving	
61-32	15047-15051	such	
61-33	15052-15058	issues	
61-34	15058-15059	.	
61-35	15060-15063	JVM	
61-36	15064-15069	Error	
61-37	15069-15070	:	
61-38	15071-15097	java.lang.OutOfMemoryError	
61-39	15097-15098	.	
61-40	15099-15102	For	
61-41	15103-15110	example	
61-42	15110-15111	:	
61-43	15112-15113	$	
61-44	15114-15116	cf	
61-45	15117-15121	logs	
61-46	15122-15130	YOUR-APP	
61-47	15131-15132	-	
61-48	15132-15133	-	
61-49	15133-15139	recent	

#Text=2016-06-20T09:18:51.00+0100 [APP/0] OUT java.lang.OutOfMemoryError: Metaspace Where YOUR-APP is the name of your app. Cause: If the JVM cannot garbage-collect enough space to ensure the allocation of a data-structure, it fails with java.lang.OutOfMemoryError. In the example above, JVM has an under-sized metaspace. You may see failures in other memory pools, such as heap.
62-1	15140-15144	2016	
62-2	15144-15145	-	
62-3	15145-15147	06	
62-4	15147-15148	-	
62-5	15148-15153	20T09	
62-6	15153-15154	:	
62-7	15154-15156	18	
62-8	15156-15157	:	
62-9	15157-15162	51.00	
62-10	15162-15163	+	
62-11	15163-15167	0100	
62-12	15168-15169	[	
62-13	15169-15172	APP	
62-14	15172-15173	/	
62-15	15173-15174	0	
62-16	15174-15175	]	
62-17	15176-15179	OUT	
62-18	15180-15206	java.lang.OutOfMemoryError	
62-19	15206-15207	:	
62-20	15208-15217	Metaspace	
62-21	15218-15223	Where	
62-22	15224-15232	YOUR-APP	
62-23	15233-15235	is	
62-24	15236-15239	the	
62-25	15240-15244	name	
62-26	15245-15247	of	
62-27	15248-15252	your	
62-28	15253-15256	app	
62-29	15256-15257	.	
62-30	15258-15263	Cause	
62-31	15263-15264	:	
62-32	15265-15267	If	
62-33	15268-15271	the	
62-34	15272-15275	JVM	
62-35	15276-15282	cannot	
62-36	15283-15298	garbage-collect	
62-37	15299-15305	enough	
62-38	15306-15311	space	
62-39	15312-15314	to	
62-40	15315-15321	ensure	
62-41	15322-15325	the	
62-42	15326-15336	allocation	
62-43	15337-15339	of	
62-44	15340-15341	a	
62-45	15342-15356	data-structure	
62-46	15356-15357	,	
62-47	15358-15360	it	
62-48	15361-15366	fails	
62-49	15367-15371	with	
62-50	15372-15398	java.lang.OutOfMemoryError	
62-51	15398-15399	.	
62-52	15400-15402	In	
62-53	15403-15406	the	
62-54	15407-15414	example	
62-55	15415-15420	above	
62-56	15420-15421	,	
62-57	15422-15425	JVM	
62-58	15426-15429	has	
62-59	15430-15432	an	
62-60	15433-15444	under-sized	
62-61	15445-15454	metaspace	
62-62	15454-15455	.	
62-63	15456-15459	You	
62-64	15460-15463	may	
62-65	15464-15467	see	
62-66	15468-15476	failures	
62-67	15477-15479	in	
62-68	15480-15485	other	
62-69	15486-15492	memory	
62-70	15493-15498	pools	
62-71	15498-15499	,	
62-72	15500-15504	such	
62-73	15505-15507	as	
62-74	15508-15512	heap	
62-75	15512-15513	.	

#Text=Solution: Configure the JVM correctly for your app. For more information, see Allocate Sufficient Memory. Garden Container Note: The solutions in this section require configuring the memory calculator, which is a sub-project of the Java buildpack that calculates suitable memory settings for Java apps when you push them. For more information, see the java-buildpack-memory-calculator repository on GitHub. If you have questions about the memory calculator, you can ask them in the #java-buildpack channel of the Cloud Foundry Slack organization.
63-1	15514-15522	Solution	
63-2	15522-15523	:	
63-3	15524-15533	Configure	
63-4	15534-15537	the	
63-5	15538-15541	JVM	
63-6	15542-15551	correctly	
63-7	15552-15555	for	
63-8	15556-15560	your	
63-9	15561-15564	app	
63-10	15564-15565	.	
63-11	15566-15569	For	
63-12	15570-15574	more	
63-13	15575-15586	information	
63-14	15586-15587	,	
63-15	15588-15591	see	
63-16	15592-15600	Allocate	
63-17	15601-15611	Sufficient	
63-18	15612-15618	Memory	
63-19	15618-15619	.	
63-20	15620-15626	Garden	
63-21	15627-15636	Container	
63-22	15637-15641	Note	
63-23	15641-15642	:	
63-24	15643-15646	The	
63-25	15647-15656	solutions	
63-26	15657-15659	in	
63-27	15660-15664	this	
63-28	15665-15672	section	
63-29	15673-15680	require	
63-30	15681-15692	configuring	
63-31	15693-15696	the	
63-32	15697-15703	memory	
63-33	15704-15714	calculator	
63-34	15714-15715	,	
63-35	15716-15721	which	
63-36	15722-15724	is	
63-37	15725-15726	a	
63-38	15727-15738	sub-project	
63-39	15739-15741	of	
63-40	15742-15745	the	
63-41	15746-15750	Java	
63-42	15751-15760	buildpack	
63-43	15761-15765	that	
63-44	15766-15776	calculates	
63-45	15777-15785	suitable	
63-46	15786-15792	memory	
63-47	15793-15801	settings	
63-48	15802-15805	for	
63-49	15806-15810	Java	
63-50	15811-15815	apps	
63-51	15816-15820	when	
63-52	15821-15824	you	
63-53	15825-15829	push	
63-54	15830-15834	them	
63-55	15834-15835	.	
63-56	15836-15839	For	
63-57	15840-15844	more	
63-58	15845-15856	information	
63-59	15856-15857	,	
63-60	15858-15861	see	
63-61	15862-15865	the	
63-62	15866-15898	java-buildpack-memory-calculator	
63-63	15899-15909	repository	
63-64	15910-15912	on	
63-65	15913-15919	GitHub	
63-66	15919-15920	.	
63-67	15921-15923	If	
63-68	15924-15927	you	
63-69	15928-15932	have	
63-70	15933-15942	questions	
63-71	15943-15948	about	
63-72	15949-15952	the	
63-73	15953-15959	memory	
63-74	15960-15970	calculator	
63-75	15970-15971	,	
63-76	15972-15975	you	
63-77	15976-15979	can	
63-78	15980-15983	ask	
63-79	15984-15988	them	
63-80	15989-15991	in	
63-81	15992-15995	the	
63-82	15996-15997	#	
63-83	15997-16011	java-buildpack	
63-84	16012-16019	channel	
63-85	16020-16022	of	
63-86	16023-16026	the	
63-87	16027-16032	Cloud	
63-88	16033-16040	Foundry	
63-89	16041-16046	Slack	
63-90	16047-16059	organization	
63-91	16059-16060	.	

#Text=Error: The Garden container terminates the Java process with the out of memory event. For example: $ cf events YOUR-APP time event actor description 2016-06-20T09:18:51.00+0100 app.crash app-name
64-1	16061-16066	Error	
64-2	16066-16067	:	
64-3	16068-16071	The	
64-4	16072-16078	Garden	
64-5	16079-16088	container	
64-6	16089-16099	terminates	
64-7	16100-16103	the	
64-8	16104-16108	Java	
64-9	16109-16116	process	
64-10	16117-16121	with	
64-11	16122-16125	the	
64-12	16126-16129	out	
64-13	16130-16132	of	
64-14	16133-16139	memory	
64-15	16140-16145	event	
64-16	16145-16146	.	
64-17	16147-16150	For	
64-18	16151-16158	example	
64-19	16158-16159	:	
64-20	16160-16161	$	
64-21	16162-16164	cf	
64-22	16165-16171	events	
64-23	16172-16180	YOUR-APP	
64-24	16181-16185	time	
64-25	16186-16191	event	
64-26	16192-16197	actor	
64-27	16198-16209	description	
64-28	16210-16214	2016	
64-29	16214-16215	-	
64-30	16215-16217	06	
64-31	16217-16218	-	
64-32	16218-16223	20T09	
64-33	16223-16224	:	
64-34	16224-16226	18	
64-35	16226-16227	:	
64-36	16227-16232	51.00	
64-37	16232-16233	+	
64-38	16233-16237	0100	
64-39	16238-16247	app.crash	
64-40	16248-16256	app-name	

#Text=index: 0, reason: CRASHED, exit_description: out of memory, exit_status: 255 Where YOUR-APP is the name of your app. This error appears when the JVM allocates more OS-level memory than the quota requested by the app, such as through the manifest.
65-1	16257-16262	index	
65-2	16262-16263	:	
65-3	16264-16265	0	
65-4	16265-16266	,	
65-5	16267-16273	reason	
65-6	16273-16274	:	
65-7	16275-16282	CRASHED	
65-8	16282-16283	,	
65-9	16284-16300	exit_description	
65-10	16300-16301	:	
65-11	16302-16305	out	
65-12	16306-16308	of	
65-13	16309-16315	memory	
65-14	16315-16316	,	
65-15	16317-16328	exit_status	
65-16	16328-16329	:	
65-17	16330-16333	255	
65-18	16334-16339	Where	
65-19	16340-16348	YOUR-APP	
65-20	16349-16351	is	
65-21	16352-16355	the	
65-22	16356-16360	name	
65-23	16361-16363	of	
65-24	16364-16368	your	
65-25	16369-16372	app	
65-26	16372-16373	.	
65-27	16374-16378	This	
65-28	16379-16384	error	
65-29	16385-16392	appears	
65-30	16393-16397	when	
65-31	16398-16401	the	
65-32	16402-16405	JVM	
65-33	16406-16415	allocates	
65-34	16416-16420	more	
65-35	16421-16429	OS-level	
65-36	16430-16436	memory	
65-37	16437-16441	than	
65-38	16442-16445	the	
65-39	16446-16451	quota	
65-40	16452-16461	requested	
65-41	16462-16464	by	
65-42	16465-16468	the	
65-43	16469-16472	app	
65-44	16472-16473	,	
65-45	16474-16478	such	
65-46	16479-16481	as	
65-47	16482-16489	through	
65-48	16490-16493	the	
65-49	16494-16502	manifest	
65-50	16502-16503	.	

#Text=Cause 1 - Insufficient native memory: This error commonly means that the JVM requires more native memory. In the scope of the Java buildpack and the memory calculator, the term native means the memory required for the JVM to work, along with forms of memory not covered in the other classifications of the memory calculator. This includes the memory footprint of OS-level threads, direct NIO buffers, code cache, program counters, and others. Solution 1: Determine how much native memory a Java app needs by measuring it with realistic workloads and fine-tuning it accordingly. You can then configure the Java buildpack using the native setting of the memory calculator, as in the example below: ---
66-1	16504-16509	Cause	
66-2	16510-16511	1	
66-3	16512-16513	-	
66-4	16514-16526	Insufficient	
66-5	16527-16533	native	
66-6	16534-16540	memory	
66-7	16540-16541	:	
66-8	16542-16546	This	
66-9	16547-16552	error	
66-10	16553-16561	commonly	
66-11	16562-16567	means	
66-12	16568-16572	that	
66-13	16573-16576	the	
66-14	16577-16580	JVM	
66-15	16581-16589	requires	
66-16	16590-16594	more	
66-17	16595-16601	native	
66-18	16602-16608	memory	
66-19	16608-16609	.	
66-20	16610-16612	In	
66-21	16613-16616	the	
66-22	16617-16622	scope	
66-23	16623-16625	of	
66-24	16626-16629	the	
66-25	16630-16634	Java	
66-26	16635-16644	buildpack	
66-27	16645-16648	and	
66-28	16649-16652	the	
66-29	16653-16659	memory	
66-30	16660-16670	calculator	
66-31	16670-16671	,	
66-32	16672-16675	the	
66-33	16676-16680	term	
66-34	16681-16687	native	
66-35	16688-16693	means	
66-36	16694-16697	the	
66-37	16698-16704	memory	
66-38	16705-16713	required	
66-39	16714-16717	for	
66-40	16718-16721	the	
66-41	16722-16725	JVM	
66-42	16726-16728	to	
66-43	16729-16733	work	
66-44	16733-16734	,	
66-45	16735-16740	along	
66-46	16741-16745	with	
66-47	16746-16751	forms	
66-48	16752-16754	of	
66-49	16755-16761	memory	
66-50	16762-16765	not	
66-51	16766-16773	covered	
66-52	16774-16776	in	
66-53	16777-16780	the	
66-54	16781-16786	other	
66-55	16787-16802	classifications	
66-56	16803-16805	of	
66-57	16806-16809	the	
66-58	16810-16816	memory	
66-59	16817-16827	calculator	
66-60	16827-16828	.	
66-61	16829-16833	This	
66-62	16834-16842	includes	
66-63	16843-16846	the	
66-64	16847-16853	memory	
66-65	16854-16863	footprint	
66-66	16864-16866	of	
66-67	16867-16875	OS-level	
66-68	16876-16883	threads	
66-69	16883-16884	,	
66-70	16885-16891	direct	
66-71	16892-16895	NIO	
66-72	16896-16903	buffers	
66-73	16903-16904	,	
66-74	16905-16909	code	
66-75	16910-16915	cache	
66-76	16915-16916	,	
66-77	16917-16924	program	
66-78	16925-16933	counters	
66-79	16933-16934	,	
66-80	16935-16938	and	
66-81	16939-16945	others	
66-82	16945-16946	.	
66-83	16947-16955	Solution	
66-84	16956-16957	1	
66-85	16957-16958	:	
66-86	16959-16968	Determine	
66-87	16969-16972	how	
66-88	16973-16977	much	
66-89	16978-16984	native	
66-90	16985-16991	memory	
66-91	16992-16993	a	
66-92	16994-16998	Java	
66-93	16999-17002	app	
66-94	17003-17008	needs	
66-95	17009-17011	by	
66-96	17012-17021	measuring	
66-97	17022-17024	it	
66-98	17025-17029	with	
66-99	17030-17039	realistic	
66-100	17040-17049	workloads	
66-101	17050-17053	and	
66-102	17054-17065	fine-tuning	
66-103	17066-17068	it	
66-104	17069-17080	accordingly	
66-105	17080-17081	.	
66-106	17082-17085	You	
66-107	17086-17089	can	
66-108	17090-17094	then	
66-109	17095-17104	configure	
66-110	17105-17108	the	
66-111	17109-17113	Java	
66-112	17114-17123	buildpack	
66-113	17124-17129	using	
66-114	17130-17133	the	
66-115	17134-17140	native	
66-116	17141-17148	setting	
66-117	17149-17151	of	
66-118	17152-17155	the	
66-119	17156-17162	memory	
66-120	17163-17173	calculator	
66-121	17173-17174	,	
66-122	17175-17177	as	
66-123	17178-17180	in	
66-124	17181-17184	the	
66-125	17185-17192	example	
66-126	17193-17198	below	
66-127	17198-17199	:	
66-128	17200-17201	-	
66-129	17201-17202	-	
66-130	17202-17203	-	

#Text=applications: - name: YOUR-APP memory: 1G env: JBP_CONFIG_OPEN_JDK_JRE: '[memory_calculator: {memory_sizes: {native: 150m}}]'
67-1	17204-17216	applications	
67-2	17216-17217	:	
67-3	17218-17219	-	
67-4	17220-17224	name	
67-5	17224-17225	:	
67-6	17226-17234	YOUR-APP	
67-7	17235-17241	memory	
67-8	17241-17242	:	
67-9	17243-17245	1G	
67-10	17246-17249	env	
67-11	17249-17250	:	
67-12	17251-17274	JBP_CONFIG_OPEN_JDK_JRE	
67-13	17274-17275	:	
67-14	17276-17277	'	
67-15	17277-17278	[	
67-16	17278-17295	memory_calculator	
67-17	17295-17296	:	
67-18	17297-17298	{	
67-19	17298-17310	memory_sizes	
67-20	17310-17311	:	
67-21	17312-17313	{	
67-22	17313-17319	native	
67-23	17319-17320	:	
67-24	17321-17325	150m	
67-25	17325-17326	}	
67-26	17326-17327	}	
67-27	17327-17328	]	
67-28	17328-17329	'	

#Text=Where YOUR-APP is the name of your app. This example shows that 150m of the overall available 1G is reserved for anything that is not heap, metaspace, or permgen. In less common cases, this may come from companion processes started by the JVM, such as the Process API.
68-1	17330-17335	Where	
68-2	17336-17344	YOUR-APP	
68-3	17345-17347	is	
68-4	17348-17351	the	
68-5	17352-17356	name	
68-6	17357-17359	of	
68-7	17360-17364	your	
68-8	17365-17368	app	
68-9	17368-17369	.	
68-10	17370-17374	This	
68-11	17375-17382	example	
68-12	17383-17388	shows	
68-13	17389-17393	that	
68-14	17394-17398	150m	
68-15	17399-17401	of	
68-16	17402-17405	the	
68-17	17406-17413	overall	
68-18	17414-17423	available	
68-19	17424-17426	1G	
68-20	17427-17429	is	
68-21	17430-17438	reserved	
68-22	17439-17442	for	
68-23	17443-17451	anything	
68-24	17452-17456	that	
68-25	17457-17459	is	
68-26	17460-17463	not	
68-27	17464-17468	heap	
68-28	17468-17469	,	
68-29	17470-17479	metaspace	
68-30	17479-17480	,	
68-31	17481-17483	or	
68-32	17484-17491	permgen	
68-33	17491-17492	.	
68-34	17493-17495	In	
68-35	17496-17500	less	
68-36	17501-17507	common	
68-37	17508-17513	cases	
68-38	17513-17514	,	
68-39	17515-17519	this	
68-40	17520-17523	may	
68-41	17524-17528	come	
68-42	17529-17533	from	
68-43	17534-17543	companion	
68-44	17544-17553	processes	
68-45	17554-17561	started	
68-46	17562-17564	by	
68-47	17565-17568	the	
68-48	17569-17572	JVM	
68-49	17572-17573	,	
68-50	17574-17578	such	
68-51	17579-17581	as	
68-52	17582-17585	the	
68-53	17586-17593	Process	
68-54	17594-17597	API	
68-55	17597-17598	.	

#Text=For more information about measuring how much native memory a Java app needs, see Native Memory Tracking in the Java documentation. For more information about configuring the Java buildpack using the native setting, see OpenJDK JRE in the Cloud Foundry Java Buildpack on GitHub. For more information about the Process API, see Class Process in the Java documentation. Cause 2 - High thread count: Java threads in the JVM can cause memory errors at the Garden level. When an app is under heavy load, it uses a high number of threads and consumes a significant amount of memory. Solution 2: Set the reserved memory for stack traces to the correct value for your app.
69-1	17599-17602	For	
69-2	17603-17607	more	
69-3	17608-17619	information	
69-4	17620-17625	about	
69-5	17626-17635	measuring	
69-6	17636-17639	how	
69-7	17640-17644	much	
69-8	17645-17651	native	
69-9	17652-17658	memory	
69-10	17659-17660	a	
69-11	17661-17665	Java	
69-12	17666-17669	app	
69-13	17670-17675	needs	
69-14	17675-17676	,	
69-15	17677-17680	see	
69-16	17681-17687	Native	
69-17	17688-17694	Memory	
69-18	17695-17703	Tracking	
69-19	17704-17706	in	
69-20	17707-17710	the	
69-21	17711-17715	Java	
69-22	17716-17729	documentation	
69-23	17729-17730	.	
69-24	17731-17734	For	
69-25	17735-17739	more	
69-26	17740-17751	information	
69-27	17752-17757	about	
69-28	17758-17769	configuring	
69-29	17770-17773	the	
69-30	17774-17778	Java	
69-31	17779-17788	buildpack	
69-32	17789-17794	using	
69-33	17795-17798	the	
69-34	17799-17805	native	
69-35	17806-17813	setting	
69-36	17813-17814	,	
69-37	17815-17818	see	
69-38	17819-17826	OpenJDK	
69-39	17827-17830	JRE	
69-40	17831-17833	in	
69-41	17834-17837	the	
69-42	17838-17843	Cloud	
69-43	17844-17851	Foundry	
69-44	17852-17856	Java	
69-45	17857-17866	Buildpack	
69-46	17867-17869	on	
69-47	17870-17876	GitHub	
69-48	17876-17877	.	
69-49	17878-17881	For	
69-50	17882-17886	more	
69-51	17887-17898	information	
69-52	17899-17904	about	
69-53	17905-17908	the	
69-54	17909-17916	Process	
69-55	17917-17920	API	
69-56	17920-17921	,	
69-57	17922-17925	see	
69-58	17926-17931	Class	
69-59	17932-17939	Process	
69-60	17940-17942	in	
69-61	17943-17946	the	
69-62	17947-17951	Java	
69-63	17952-17965	documentation	
69-64	17965-17966	.	
69-65	17967-17972	Cause	
69-66	17973-17974	2	
69-67	17975-17976	-	
69-68	17977-17981	High	
69-69	17982-17988	thread	
69-70	17989-17994	count	
69-71	17994-17995	:	
69-72	17996-18000	Java	
69-73	18001-18008	threads	
69-74	18009-18011	in	
69-75	18012-18015	the	
69-76	18016-18019	JVM	
69-77	18020-18023	can	
69-78	18024-18029	cause	
69-79	18030-18036	memory	
69-80	18037-18043	errors	
69-81	18044-18046	at	
69-82	18047-18050	the	
69-83	18051-18057	Garden	
69-84	18058-18063	level	
69-85	18063-18064	.	
69-86	18065-18069	When	
69-87	18070-18072	an	
69-88	18073-18076	app	
69-89	18077-18079	is	
69-90	18080-18085	under	
69-91	18086-18091	heavy	
69-92	18092-18096	load	
69-93	18096-18097	,	
69-94	18098-18100	it	
69-95	18101-18105	uses	
69-96	18106-18107	a	
69-97	18108-18112	high	
69-98	18113-18119	number	
69-99	18120-18122	of	
69-100	18123-18130	threads	
69-101	18131-18134	and	
69-102	18135-18143	consumes	
69-103	18144-18145	a	
69-104	18146-18157	significant	
69-105	18158-18164	amount	
69-106	18165-18167	of	
69-107	18168-18174	memory	
69-108	18174-18175	.	
69-109	18176-18184	Solution	
69-110	18185-18186	2	
69-111	18186-18187	:	
69-112	18188-18191	Set	
69-113	18192-18195	the	
69-114	18196-18204	reserved	
69-115	18205-18211	memory	
69-116	18212-18215	for	
69-117	18216-18221	stack	
69-118	18222-18228	traces	
69-119	18229-18231	to	
69-120	18232-18235	the	
69-121	18236-18243	correct	
69-122	18244-18249	value	
69-123	18250-18253	for	
69-124	18254-18258	your	
69-125	18259-18262	app	
69-126	18262-18263	.	

#Text=You can use the stack setting of the memory calculator to configure the amount of space the JVM reserves for each Java thread. You must multiply this value by the number of threads your app requires. Specify the number of threads in the stack_threads setting of the memory calculator. For example, if you estimate the max thread count for an app at 800 and the amount of memory needed to represent the deepest stacktrace of a Java thread is 512KB, configure the memory calculator as follows: --- applications: - name: YOUR-APP memory: 1G env: JBP_CONFIG_OPEN_JDK_JRE: '[memory_calculator: {stack_threads: 800, memory_sizes: {stack: 512k}}]'
70-1	18264-18267	You	
70-2	18268-18271	can	
70-3	18272-18275	use	
70-4	18276-18279	the	
70-5	18280-18285	stack	
70-6	18286-18293	setting	
70-7	18294-18296	of	
70-8	18297-18300	the	
70-9	18301-18307	memory	
70-10	18308-18318	calculator	
70-11	18319-18321	to	
70-12	18322-18331	configure	
70-13	18332-18335	the	
70-14	18336-18342	amount	
70-15	18343-18345	of	
70-16	18346-18351	space	
70-17	18352-18355	the	
70-18	18356-18359	JVM	
70-19	18360-18368	reserves	
70-20	18369-18372	for	
70-21	18373-18377	each	
70-22	18378-18382	Java	
70-23	18383-18389	thread	
70-24	18389-18390	.	
70-25	18391-18394	You	
70-26	18395-18399	must	
70-27	18400-18408	multiply	
70-28	18409-18413	this	
70-29	18414-18419	value	
70-30	18420-18422	by	
70-31	18423-18426	the	
70-32	18427-18433	number	
70-33	18434-18436	of	
70-34	18437-18444	threads	
70-35	18445-18449	your	
70-36	18450-18453	app	
70-37	18454-18462	requires	
70-38	18462-18463	.	
70-39	18464-18471	Specify	
70-40	18472-18475	the	
70-41	18476-18482	number	
70-42	18483-18485	of	
70-43	18486-18493	threads	
70-44	18494-18496	in	
70-45	18497-18500	the	
70-46	18501-18514	stack_threads	
70-47	18515-18522	setting	
70-48	18523-18525	of	
70-49	18526-18529	the	
70-50	18530-18536	memory	
70-51	18537-18547	calculator	
70-52	18547-18548	.	
70-53	18549-18552	For	
70-54	18553-18560	example	
70-55	18560-18561	,	
70-56	18562-18564	if	
70-57	18565-18568	you	
70-58	18569-18577	estimate	
70-59	18578-18581	the	
70-60	18582-18585	max	
70-61	18586-18592	thread	
70-62	18593-18598	count	
70-63	18599-18602	for	
70-64	18603-18605	an	
70-65	18606-18609	app	
70-66	18610-18612	at	
70-67	18613-18616	800	
70-68	18617-18620	and	
70-69	18621-18624	the	
70-70	18625-18631	amount	
70-71	18632-18634	of	
70-72	18635-18641	memory	
70-73	18642-18648	needed	
70-74	18649-18651	to	
70-75	18652-18661	represent	
70-76	18662-18665	the	
70-77	18666-18673	deepest	
70-78	18674-18684	stacktrace	
70-79	18685-18687	of	
70-80	18688-18689	a	
70-81	18690-18694	Java	
70-82	18695-18701	thread	
70-83	18702-18704	is	
70-84	18705-18710	512KB	
70-85	18710-18711	,	
70-86	18712-18721	configure	
70-87	18722-18725	the	
70-88	18726-18732	memory	
70-89	18733-18743	calculator	
70-90	18744-18746	as	
70-91	18747-18754	follows	
70-92	18754-18755	:	
70-93	18756-18757	-	
70-94	18757-18758	-	
70-95	18758-18759	-	
70-96	18760-18772	applications	
70-97	18772-18773	:	
70-98	18774-18775	-	
70-99	18776-18780	name	
70-100	18780-18781	:	
70-101	18782-18790	YOUR-APP	
70-102	18791-18797	memory	
70-103	18797-18798	:	
70-104	18799-18801	1G	
70-105	18802-18805	env	
70-106	18805-18806	:	
70-107	18807-18830	JBP_CONFIG_OPEN_JDK_JRE	
70-108	18830-18831	:	
70-109	18832-18833	'	
70-110	18833-18834	[	
70-111	18834-18851	memory_calculator	
70-112	18851-18852	:	
70-113	18853-18854	{	
70-114	18854-18867	stack_threads	
70-115	18867-18868	:	
70-116	18869-18872	800	
70-117	18872-18873	,	
70-118	18874-18886	memory_sizes	
70-119	18886-18887	:	
70-120	18888-18889	{	
70-121	18889-18894	stack	
70-122	18894-18895	:	
70-123	18896-18900	512k	
70-124	18900-18901	}	
70-125	18901-18902	}	
70-126	18902-18903	]	
70-127	18903-18904	'	

#Text=Where YOUR-APP is the name of your app. In this example, the overall memory amount reserved by the JVM for representing the stacks of Java threads is 800 * 512k = 400m.
71-1	18905-18910	Where	
71-2	18911-18919	YOUR-APP	
71-3	18920-18922	is	
71-4	18923-18926	the	
71-5	18927-18931	name	
71-6	18932-18934	of	
71-7	18935-18939	your	
71-8	18940-18943	app	
71-9	18943-18944	.	
71-10	18945-18947	In	
71-11	18948-18952	this	
71-12	18953-18960	example	
71-13	18960-18961	,	
71-14	18962-18965	the	
71-15	18966-18973	overall	
71-16	18974-18980	memory	
71-17	18981-18987	amount	
71-18	18988-18996	reserved	
71-19	18997-18999	by	
71-20	19000-19003	the	
71-21	19004-19007	JVM	
71-22	19008-19011	for	
71-23	19012-19024	representing	
71-24	19025-19028	the	
71-25	19029-19035	stacks	
71-26	19036-19038	of	
71-27	19039-19043	Java	
71-28	19044-19051	threads	
71-29	19052-19054	is	
71-30	19055-19058	800	
71-31	19059-19060	*	
71-32	19061-19065	512k	
71-33	19066-19067	=	
71-34	19068-19072	400m	
71-35	19072-19073	.	

#Text=The correct settings for stack and stack_threads depend on your app code, including the libraries it uses. Your app may technically have no upper limit, such as in the case of cavalier usage of CachedThreadPool executors. However, you still must calculate the depth of the thread stacks and the amount of space the JVM should reserve for each of them. For more information, see Executors.newCachedThreadPool() considered harmful on the Bizo website and the newCachedThreadPool section of the Class Executors topic in the Java documentation. Troubleshoot Failed Upload If your app fails to upload when you push it to Cloud Foundry, it may be for one of the following reasons:
72-1	19074-19077	The	
72-2	19078-19085	correct	
72-3	19086-19094	settings	
72-4	19095-19098	for	
72-5	19099-19104	stack	
72-6	19105-19108	and	
72-7	19109-19122	stack_threads	
72-8	19123-19129	depend	
72-9	19130-19132	on	
72-10	19133-19137	your	
72-11	19138-19141	app	
72-12	19142-19146	code	
72-13	19146-19147	,	
72-14	19148-19157	including	
72-15	19158-19161	the	
72-16	19162-19171	libraries	
72-17	19172-19174	it	
72-18	19175-19179	uses	
72-19	19179-19180	.	
72-20	19181-19185	Your	
72-21	19186-19189	app	
72-22	19190-19193	may	
72-23	19194-19205	technically	
72-24	19206-19210	have	
72-25	19211-19213	no	
72-26	19214-19219	upper	
72-27	19220-19225	limit	
72-28	19225-19226	,	
72-29	19227-19231	such	
72-30	19232-19234	as	
72-31	19235-19237	in	
72-32	19238-19241	the	
72-33	19242-19246	case	
72-34	19247-19249	of	
72-35	19250-19258	cavalier	
72-36	19259-19264	usage	
72-37	19265-19267	of	
72-38	19268-19284	CachedThreadPool	
72-39	19285-19294	executors	
72-40	19294-19295	.	
72-41	19296-19303	However	
72-42	19303-19304	,	
72-43	19305-19308	you	
72-44	19309-19314	still	
72-45	19315-19319	must	
72-46	19320-19329	calculate	
72-47	19330-19333	the	
72-48	19334-19339	depth	
72-49	19340-19342	of	
72-50	19343-19346	the	
72-51	19347-19353	thread	
72-52	19354-19360	stacks	
72-53	19361-19364	and	
72-54	19365-19368	the	
72-55	19369-19375	amount	
72-56	19376-19378	of	
72-57	19379-19384	space	
72-58	19385-19388	the	
72-59	19389-19392	JVM	
72-60	19393-19399	should	
72-61	19400-19407	reserve	
72-62	19408-19411	for	
72-63	19412-19416	each	
72-64	19417-19419	of	
72-65	19420-19424	them	
72-66	19424-19425	.	
72-67	19426-19429	For	
72-68	19430-19434	more	
72-69	19435-19446	information	
72-70	19446-19447	,	
72-71	19448-19451	see	
72-72	19452-19481	Executors.newCachedThreadPool	
72-73	19481-19482	(	
72-74	19482-19483	)	
72-75	19484-19494	considered	
72-76	19495-19502	harmful	
72-77	19503-19505	on	
72-78	19506-19509	the	
72-79	19510-19514	Bizo	
72-80	19515-19522	website	
72-81	19523-19526	and	
72-82	19527-19530	the	
72-83	19531-19550	newCachedThreadPool	
72-84	19551-19558	section	
72-85	19559-19561	of	
72-86	19562-19565	the	
72-87	19566-19571	Class	
72-88	19572-19581	Executors	
72-89	19582-19587	topic	
72-90	19588-19590	in	
72-91	19591-19594	the	
72-92	19595-19599	Java	
72-93	19600-19613	documentation	
72-94	19613-19614	.	
72-95	19615-19627	Troubleshoot	
72-96	19628-19634	Failed	
72-97	19635-19641	Upload	
72-98	19642-19644	If	
72-99	19645-19649	your	
72-100	19650-19653	app	
72-101	19654-19659	fails	
72-102	19660-19662	to	
72-103	19663-19669	upload	
72-104	19670-19674	when	
72-105	19675-19678	you	
72-106	19679-19683	push	
72-107	19684-19686	it	
72-108	19687-19689	to	
72-109	19690-19695	Cloud	
72-110	19696-19703	Foundry	
72-111	19703-19704	,	
72-112	19705-19707	it	
72-113	19708-19711	may	
72-114	19712-19714	be	
72-115	19715-19718	for	
72-116	19719-19722	one	
72-117	19723-19725	of	
72-118	19726-19729	the	
72-119	19730-19739	following	
72-120	19740-19747	reasons	
72-121	19747-19748	:	

#Text=WAR is too large: An upload may fail due to the size of the WAR file. Cloud Foundry testing indicates WAR files as large as 250 MB upload successfully. If a WAR file larger than that fails to upload, it may be a result of the file size. Connection issues: App uploads can fail if you have a slow Internet connection, or if you upload from a location that is very remote from the target Cloud Foundry instance. If an app upload takes a long time, your authorization token can expire before the upload completes. A workaround is to copy the WAR to a server that is closer to the Cloud Foundry instance, and then push it from there.
73-1	19749-19752	WAR	
73-2	19753-19755	is	
73-3	19756-19759	too	
73-4	19760-19765	large	
73-5	19765-19766	:	
73-6	19767-19769	An	
73-7	19770-19776	upload	
73-8	19777-19780	may	
73-9	19781-19785	fail	
73-10	19786-19789	due	
73-11	19790-19792	to	
73-12	19793-19796	the	
73-13	19797-19801	size	
73-14	19802-19804	of	
73-15	19805-19808	the	
73-16	19809-19812	WAR	
73-17	19813-19817	file	
73-18	19817-19818	.	
73-19	19819-19824	Cloud	
73-20	19825-19832	Foundry	
73-21	19833-19840	testing	
73-22	19841-19850	indicates	
73-23	19851-19854	WAR	
73-24	19855-19860	files	
73-25	19861-19863	as	
73-26	19864-19869	large	
73-27	19870-19872	as	
73-28	19873-19876	250	
73-29	19876-19877	 	
73-30	19877-19879	MB	
73-31	19880-19886	upload	
73-32	19887-19899	successfully	
73-33	19899-19900	.	
73-34	19901-19903	If	
73-35	19904-19905	a	
73-36	19906-19909	WAR	
73-37	19910-19914	file	
73-38	19915-19921	larger	
73-39	19922-19926	than	
73-40	19927-19931	that	
73-41	19932-19937	fails	
73-42	19938-19940	to	
73-43	19941-19947	upload	
73-44	19947-19948	,	
73-45	19949-19951	it	
73-46	19952-19955	may	
73-47	19956-19958	be	
73-48	19959-19960	a	
73-49	19961-19967	result	
73-50	19968-19970	of	
73-51	19971-19974	the	
73-52	19975-19979	file	
73-53	19980-19984	size	
73-54	19984-19985	.	
73-55	19986-19996	Connection	
73-56	19997-20003	issues	
73-57	20003-20004	:	
73-58	20005-20008	App	
73-59	20009-20016	uploads	
73-60	20017-20020	can	
73-61	20021-20025	fail	
73-62	20026-20028	if	
73-63	20029-20032	you	
73-64	20033-20037	have	
73-65	20038-20039	a	
73-66	20040-20044	slow	
73-67	20045-20053	Internet	
73-68	20054-20064	connection	
73-69	20064-20065	,	
73-70	20066-20068	or	
73-71	20069-20071	if	
73-72	20072-20075	you	
73-73	20076-20082	upload	
73-74	20083-20087	from	
73-75	20088-20089	a	
73-76	20090-20098	location	
73-77	20099-20103	that	
73-78	20104-20106	is	
73-79	20107-20111	very	
73-80	20112-20118	remote	
73-81	20119-20123	from	
73-82	20124-20127	the	
73-83	20128-20134	target	
73-84	20135-20140	Cloud	
73-85	20141-20148	Foundry	
73-86	20149-20157	instance	
73-87	20157-20158	.	
73-88	20159-20161	If	
73-89	20162-20164	an	
73-90	20165-20168	app	
73-91	20169-20175	upload	
73-92	20176-20181	takes	
73-93	20182-20183	a	
73-94	20184-20188	long	
73-95	20189-20193	time	
73-96	20193-20194	,	
73-97	20195-20199	your	
73-98	20200-20213	authorization	
73-99	20214-20219	token	
73-100	20220-20223	can	
73-101	20224-20230	expire	
73-102	20231-20237	before	
73-103	20238-20241	the	
73-104	20242-20248	upload	
73-105	20249-20258	completes	
73-106	20258-20259	.	
73-107	20260-20261	A	
73-108	20262-20272	workaround	
73-109	20273-20275	is	
73-110	20276-20278	to	
73-111	20279-20283	copy	
73-112	20284-20287	the	
73-113	20288-20291	WAR	
73-114	20292-20294	to	
73-115	20295-20296	a	
73-116	20297-20303	server	
73-117	20304-20308	that	
73-118	20309-20311	is	
73-119	20312-20318	closer	
73-120	20319-20321	to	
73-121	20322-20325	the	
73-122	20326-20331	Cloud	
73-123	20332-20339	Foundry	
73-124	20340-20348	instance	
73-125	20348-20349	,	
73-126	20350-20353	and	
73-127	20354-20358	then	
73-128	20359-20363	push	
73-129	20364-20366	it	
73-130	20367-20371	from	
73-131	20372-20377	there	
73-132	20377-20378	.	

#Text=Out-of-date Cloud Foundry Command-Line Interface (cf CLI) client: Upload of a large WAR is faster and hence less likely to fail if you are using a recent version of the cf CLI. If you are using an older version of the cf CLI client to upload a large WAR, and having problems, try updating to the latest version of the cf CLI. Incorrect WAR targeting: By default, cf push uploads everything in the current directory. For a Java app, cf push with no option flags uploads source code and other unnecessary files, in addition to the WAR. When you push a Java app, specify the path to the WAR by running:
74-1	20379-20390	Out-of-date	
74-2	20391-20396	Cloud	
74-3	20397-20404	Foundry	
74-4	20405-20417	Command-Line	
74-5	20418-20427	Interface	
74-6	20428-20429	(	
74-7	20429-20431	cf	
74-8	20432-20435	CLI	
74-9	20435-20436	)	
74-10	20437-20443	client	
74-11	20443-20444	:	
74-12	20445-20451	Upload	
74-13	20452-20454	of	
74-14	20455-20456	a	
74-15	20457-20462	large	
74-16	20463-20466	WAR	
74-17	20467-20469	is	
74-18	20470-20476	faster	
74-19	20477-20480	and	
74-20	20481-20486	hence	
74-21	20487-20491	less	
74-22	20492-20498	likely	
74-23	20499-20501	to	
74-24	20502-20506	fail	
74-25	20507-20509	if	
74-26	20510-20513	you	
74-27	20514-20517	are	
74-28	20518-20523	using	
74-29	20524-20525	a	
74-30	20526-20532	recent	
74-31	20533-20540	version	
74-32	20541-20543	of	
74-33	20544-20547	the	
74-34	20548-20550	cf	
74-35	20551-20554	CLI	
74-36	20554-20555	.	
74-37	20556-20558	If	
74-38	20559-20562	you	
74-39	20563-20566	are	
74-40	20567-20572	using	
74-41	20573-20575	an	
74-42	20576-20581	older	
74-43	20582-20589	version	
74-44	20590-20592	of	
74-45	20593-20596	the	
74-46	20597-20599	cf	
74-47	20600-20603	CLI	
74-48	20604-20610	client	
74-49	20611-20613	to	
74-50	20614-20620	upload	
74-51	20621-20622	a	
74-52	20623-20628	large	
74-53	20629-20632	WAR	
74-54	20632-20633	,	
74-55	20634-20637	and	
74-56	20638-20644	having	
74-57	20645-20653	problems	
74-58	20653-20654	,	
74-59	20655-20658	try	
74-60	20659-20667	updating	
74-61	20668-20670	to	
74-62	20671-20674	the	
74-63	20675-20681	latest	
74-64	20682-20689	version	
74-65	20690-20692	of	
74-66	20693-20696	the	
74-67	20697-20699	cf	
74-68	20700-20703	CLI	
74-69	20703-20704	.	
74-70	20705-20714	Incorrect	
74-71	20715-20718	WAR	
74-72	20719-20728	targeting	
74-73	20728-20729	:	
74-74	20730-20732	By	
74-75	20733-20740	default	
74-76	20740-20741	,	
74-77	20742-20744	cf	
74-78	20745-20749	push	
74-79	20750-20757	uploads	
74-80	20758-20768	everything	
74-81	20769-20771	in	
74-82	20772-20775	the	
74-83	20776-20783	current	
74-84	20784-20793	directory	
74-85	20793-20794	.	
74-86	20795-20798	For	
74-87	20799-20800	a	
74-88	20801-20805	Java	
74-89	20806-20809	app	
74-90	20809-20810	,	
74-91	20811-20813	cf	
74-92	20814-20818	push	
74-93	20819-20823	with	
74-94	20824-20826	no	
74-95	20827-20833	option	
74-96	20834-20839	flags	
74-97	20840-20847	uploads	
74-98	20848-20854	source	
74-99	20855-20859	code	
74-100	20860-20863	and	
74-101	20864-20869	other	
74-102	20870-20881	unnecessary	
74-103	20882-20887	files	
74-104	20887-20888	,	
74-105	20889-20891	in	
74-106	20892-20900	addition	
74-107	20901-20903	to	
74-108	20904-20907	the	
74-109	20908-20911	WAR	
74-110	20911-20912	.	
74-111	20913-20917	When	
74-112	20918-20921	you	
74-113	20922-20926	push	
74-114	20927-20928	a	
74-115	20929-20933	Java	
74-116	20934-20937	app	
74-117	20937-20938	,	
74-118	20939-20946	specify	
74-119	20947-20950	the	
74-120	20951-20955	path	
74-121	20956-20958	to	
74-122	20959-20962	the	
74-123	20963-20966	WAR	
74-124	20967-20969	by	
74-125	20970-20977	running	
74-126	20977-20978	:	

#Text=cf push YOUR-APP -p PATH/TO/WAR-FILE Where: YOUR-APP is the name of your app. PATH/TO/WAR-FILE is the path to the WAR. You can determine whether or not the path was specified for a previously pushed app by examining the app deployment manifest, manifest.yml. If the path attribute specifies the current directory, the manifest includes a line like:
75-1	20979-20981	cf	
75-2	20982-20986	push	
75-3	20987-20995	YOUR-APP	
75-4	20996-20997	-	
75-5	20997-20998	p	
75-6	20999-21003	PATH	
75-7	21003-21004	/	
75-8	21004-21006	TO	
75-9	21006-21007	/	
75-10	21007-21015	WAR-FILE	
75-11	21016-21021	Where	
75-12	21021-21022	:	
75-13	21023-21031	YOUR-APP	
75-14	21032-21034	is	
75-15	21035-21038	the	
75-16	21039-21043	name	
75-17	21044-21046	of	
75-18	21047-21051	your	
75-19	21052-21055	app	
75-20	21055-21056	.	
75-21	21057-21061	PATH	
75-22	21061-21062	/	
75-23	21062-21064	TO	
75-24	21064-21065	/	
75-25	21065-21073	WAR-FILE	
75-26	21074-21076	is	
75-27	21077-21080	the	
75-28	21081-21085	path	
75-29	21086-21088	to	
75-30	21089-21092	the	
75-31	21093-21096	WAR	
75-32	21096-21097	.	
75-33	21098-21101	You	
75-34	21102-21105	can	
75-35	21106-21115	determine	
75-36	21116-21123	whether	
75-37	21124-21126	or	
75-38	21127-21130	not	
75-39	21131-21134	the	
75-40	21135-21139	path	
75-41	21140-21143	was	
75-42	21144-21153	specified	
75-43	21154-21157	for	
75-44	21158-21159	a	
75-45	21160-21170	previously	
75-46	21171-21177	pushed	
75-47	21178-21181	app	
75-48	21182-21184	by	
75-49	21185-21194	examining	
75-50	21195-21198	the	
75-51	21199-21202	app	
75-52	21203-21213	deployment	
75-53	21214-21222	manifest	
75-54	21222-21223	,	
75-55	21224-21236	manifest.yml	
75-56	21236-21237	.	
75-57	21238-21240	If	
75-58	21241-21244	the	
75-59	21245-21249	path	
75-60	21250-21259	attribute	
75-61	21260-21269	specifies	
75-62	21270-21273	the	
75-63	21274-21281	current	
75-64	21282-21291	directory	
75-65	21291-21292	,	
75-66	21293-21296	the	
75-67	21297-21305	manifest	
75-68	21306-21314	includes	
75-69	21315-21316	a	
75-70	21317-21321	line	
75-71	21322-21326	like	
75-72	21326-21327	:	

#Text=path: . To re-push just the WAR, either: Delete manifest.yml and run cf push again, specifying the location of the WAR using the -p flag. Edit the path argument in manifest.yml to point to the WAR, and re-push the app.
76-1	21328-21332	path	
76-2	21332-21333	:	
76-3	21334-21335	.	
76-4	21336-21338	To	
76-5	21339-21346	re-push	
76-6	21347-21351	just	
76-7	21352-21355	the	
76-8	21356-21359	WAR	
76-9	21359-21360	,	
76-10	21361-21367	either	
76-11	21367-21368	:	
76-12	21369-21375	Delete	
76-13	21376-21388	manifest.yml	
76-14	21389-21392	and	
76-15	21393-21396	run	
76-16	21397-21399	cf	
76-17	21400-21404	push	
76-18	21405-21410	again	
76-19	21410-21411	,	
76-20	21412-21422	specifying	
76-21	21423-21426	the	
76-22	21427-21435	location	
76-23	21436-21438	of	
76-24	21439-21442	the	
76-25	21443-21446	WAR	
76-26	21447-21452	using	
76-27	21453-21456	the	
76-28	21457-21458	-	
76-29	21458-21459	p	
76-30	21460-21464	flag	
76-31	21464-21465	.	
76-32	21466-21470	Edit	
76-33	21471-21474	the	
76-34	21475-21479	path	
76-35	21480-21488	argument	
76-36	21489-21491	in	
76-37	21492-21504	manifest.yml	
76-38	21505-21507	to	
76-39	21508-21513	point	
76-40	21514-21516	to	
76-41	21517-21520	the	
76-42	21521-21524	WAR	
76-43	21524-21525	,	
76-44	21526-21529	and	
76-45	21530-21537	re-push	
76-46	21538-21541	the	
76-47	21542-21545	app	
76-48	21545-21546	.	

#Text=Debug Java Apps on Cloud Foundry Because of the way that Cloud Foundry deploys your apps and isolates them, it is not possible to connect to your app with the remote Java debugger. Instead, instruct the app to connect to the Java debugger on your local machine.
77-1	21547-21552	Debug	
77-2	21553-21557	Java	
77-3	21558-21562	Apps	
77-4	21563-21565	on	
77-5	21566-21571	Cloud	
77-6	21572-21579	Foundry	
77-7	21580-21587	Because	
77-8	21588-21590	of	
77-9	21591-21594	the	
77-10	21595-21598	way	
77-11	21599-21603	that	
77-12	21604-21609	Cloud	
77-13	21610-21617	Foundry	
77-14	21618-21625	deploys	
77-15	21626-21630	your	
77-16	21631-21635	apps	
77-17	21636-21639	and	
77-18	21640-21648	isolates	
77-19	21649-21653	them	
77-20	21653-21654	,	
77-21	21655-21657	it	
77-22	21658-21660	is	
77-23	21661-21664	not	
77-24	21665-21673	possible	
77-25	21674-21676	to	
77-26	21677-21684	connect	
77-27	21685-21687	to	
77-28	21688-21692	your	
77-29	21693-21696	app	
77-30	21697-21701	with	
77-31	21702-21705	the	
77-32	21706-21712	remote	
77-33	21713-21717	Java	
77-34	21718-21726	debugger	
77-35	21726-21727	.	
77-36	21728-21735	Instead	
77-37	21735-21736	,	
77-38	21737-21745	instruct	
77-39	21746-21749	the	
77-40	21750-21753	app	
77-41	21754-21756	to	
77-42	21757-21764	connect	
77-43	21765-21767	to	
77-44	21768-21771	the	
77-45	21772-21776	Java	
77-46	21777-21785	debugger	
77-47	21786-21788	on	
77-48	21789-21793	your	
77-49	21794-21799	local	
77-50	21800-21807	machine	
77-51	21807-21808	.	

#Text=To set up remote debugging when using BOSH Lite or a Cloud Foundry installation: Open your project in Eclipse. Right-click on your project, go to Debug as and pick Debug Configurations. Create a new Remote Java Application.
78-1	21809-21811	To	
78-2	21812-21815	set	
78-3	21816-21818	up	
78-4	21819-21825	remote	
78-5	21826-21835	debugging	
78-6	21836-21840	when	
78-7	21841-21846	using	
78-8	21847-21851	BOSH	
78-9	21852-21856	Lite	
78-10	21857-21859	or	
78-11	21860-21861	a	
78-12	21862-21867	Cloud	
78-13	21868-21875	Foundry	
78-14	21876-21888	installation	
78-15	21888-21889	:	
78-16	21890-21894	Open	
78-17	21895-21899	your	
78-18	21900-21907	project	
78-19	21908-21910	in	
78-20	21911-21918	Eclipse	
78-21	21918-21919	.	
78-22	21920-21931	Right-click	
78-23	21932-21934	on	
78-24	21935-21939	your	
78-25	21940-21947	project	
78-26	21947-21948	,	
78-27	21949-21951	go	
78-28	21952-21954	to	
78-29	21955-21960	Debug	
78-30	21961-21963	as	
78-31	21964-21967	and	
78-32	21968-21972	pick	
78-33	21973-21978	Debug	
78-34	21979-21993	Configurations	
78-35	21993-21994	.	
78-36	21995-22001	Create	
78-37	22002-22003	a	
78-38	22004-22007	new	
78-39	22008-22014	Remote	
78-40	22015-22019	Java	
78-41	22020-22031	Application	
78-42	22031-22032	.	

#Text=Make sure your project is selected, pick Standard (Socket Listen) from the Connection Type drop down and set a port. Make sure this port is open if you are running a firewall. Click Debug. The debugger should now be running. If you switch to the Debug perspective, you should see your app listed in the Debug panel, and it should say Waiting for vm to connect at port.
79-1	22033-22037	Make	
79-2	22038-22042	sure	
79-3	22043-22047	your	
79-4	22048-22055	project	
79-5	22056-22058	is	
79-6	22059-22067	selected	
79-7	22067-22068	,	
79-8	22069-22073	pick	
79-9	22074-22082	Standard	
79-10	22083-22084	(	
79-11	22084-22090	Socket	
79-12	22091-22097	Listen	
79-13	22097-22098	)	
79-14	22099-22103	from	
79-15	22104-22107	the	
79-16	22108-22118	Connection	
79-17	22119-22123	Type	
79-18	22124-22128	drop	
79-19	22129-22133	down	
79-20	22134-22137	and	
79-21	22138-22141	set	
79-22	22142-22143	a	
79-23	22144-22148	port	
79-24	22148-22149	.	
79-25	22150-22154	Make	
79-26	22155-22159	sure	
79-27	22160-22164	this	
79-28	22165-22169	port	
79-29	22170-22172	is	
79-30	22173-22177	open	
79-31	22178-22180	if	
79-32	22181-22184	you	
79-33	22185-22188	are	
79-34	22189-22196	running	
79-35	22197-22198	a	
79-36	22199-22207	firewall	
79-37	22207-22208	.	
79-38	22209-22214	Click	
79-39	22215-22220	Debug	
79-40	22220-22221	.	
79-41	22222-22225	The	
79-42	22226-22234	debugger	
79-43	22235-22241	should	
79-44	22242-22245	now	
79-45	22246-22248	be	
79-46	22249-22256	running	
79-47	22256-22257	.	
79-48	22258-22260	If	
79-49	22261-22264	you	
79-50	22265-22271	switch	
79-51	22272-22274	to	
79-52	22275-22278	the	
79-53	22279-22284	Debug	
79-54	22285-22296	perspective	
79-55	22296-22297	,	
79-56	22298-22301	you	
79-57	22302-22308	should	
79-58	22309-22312	see	
79-59	22313-22317	your	
79-60	22318-22321	app	
79-61	22322-22328	listed	
79-62	22329-22331	in	
79-63	22332-22335	the	
79-64	22336-22341	Debug	
79-65	22342-22347	panel	
79-66	22347-22348	,	
79-67	22349-22352	and	
79-68	22353-22355	it	
79-69	22356-22362	should	
79-70	22363-22366	say	
79-71	22367-22374	Waiting	
79-72	22375-22378	for	
79-73	22379-22381	vm	
79-74	22382-22384	to	
79-75	22385-22392	connect	
79-76	22393-22395	at	
79-77	22396-22400	port	
79-78	22400-22401	.	

#Text=Next, to push your app to Cloud Foundry and instruct Cloud Foundry to connect to the debugger running on your local machine: Edit your manifest.yml file. Set the instances count to 1. If you set this greater than one, multiple apps try to connect to your debugger. Also in manifest.yml, add an env block and create a variable named JAVA_OPTS. For more information about the env block, see Deploying with App Manifests.
80-1	22402-22406	Next	
80-2	22406-22407	,	
80-3	22408-22410	to	
80-4	22411-22415	push	
80-5	22416-22420	your	
80-6	22421-22424	app	
80-7	22425-22427	to	
80-8	22428-22433	Cloud	
80-9	22434-22441	Foundry	
80-10	22442-22445	and	
80-11	22446-22454	instruct	
80-12	22455-22460	Cloud	
80-13	22461-22468	Foundry	
80-14	22469-22471	to	
80-15	22472-22479	connect	
80-16	22480-22482	to	
80-17	22483-22486	the	
80-18	22487-22495	debugger	
80-19	22496-22503	running	
80-20	22504-22506	on	
80-21	22507-22511	your	
80-22	22512-22517	local	
80-23	22518-22525	machine	
80-24	22525-22526	:	
80-25	22527-22531	Edit	
80-26	22532-22536	your	
80-27	22537-22549	manifest.yml	
80-28	22550-22554	file	
80-29	22554-22555	.	
80-30	22556-22559	Set	
80-31	22560-22563	the	
80-32	22564-22573	instances	
80-33	22574-22579	count	
80-34	22580-22582	to	
80-35	22583-22584	1	
80-36	22584-22585	.	
80-37	22586-22588	If	
80-38	22589-22592	you	
80-39	22593-22596	set	
80-40	22597-22601	this	
80-41	22602-22609	greater	
80-42	22610-22614	than	
80-43	22615-22618	one	
80-44	22618-22619	,	
80-45	22620-22628	multiple	
80-46	22629-22633	apps	
80-47	22634-22637	try	
80-48	22638-22640	to	
80-49	22641-22648	connect	
80-50	22649-22651	to	
80-51	22652-22656	your	
80-52	22657-22665	debugger	
80-53	22665-22666	.	
80-54	22667-22671	Also	
80-55	22672-22674	in	
80-56	22675-22687	manifest.yml	
80-57	22687-22688	,	
80-58	22689-22692	add	
80-59	22693-22695	an	
80-60	22696-22699	env	
80-61	22700-22705	block	
80-62	22706-22709	and	
80-63	22710-22716	create	
80-64	22717-22718	a	
80-65	22719-22727	variable	
80-66	22728-22733	named	
80-67	22734-22743	JAVA_OPTS	
80-68	22743-22744	.	
80-69	22745-22748	For	
80-70	22749-22753	more	
80-71	22754-22765	information	
80-72	22766-22771	about	
80-73	22772-22775	the	
80-74	22776-22779	env	
80-75	22780-22785	block	
80-76	22785-22786	,	
80-77	22787-22790	see	
80-78	22791-22800	Deploying	
80-79	22801-22805	with	
80-80	22806-22809	App	
80-81	22810-22819	Manifests	
80-82	22819-22820	.	

#Text=Add the remote debugger configuration to the JAVA_OPTS variable: -agentlib:jdwp=transport=dt_socket,address=YOUR-IP-ADDRESS:YOUR-PORT. Save the manifest.yml file. Run: cf push Upon completion, you should see that your app has started and is now connected to the debugger running in your IDE. You can now add breakpoints and interrogate the app just as you would if it were running locally.
81-1	22821-22824	Add	
81-2	22825-22828	the	
81-3	22829-22835	remote	
81-4	22836-22844	debugger	
81-5	22845-22858	configuration	
81-6	22859-22861	to	
81-7	22862-22865	the	
81-8	22866-22875	JAVA_OPTS	
81-9	22876-22884	variable	
81-10	22884-22885	:	
81-11	22886-22887	-	
81-12	22887-22895	agentlib	
81-13	22895-22896	:	
81-14	22896-22900	jdwp	
81-15	22900-22901	=	
81-16	22901-22910	transport	
81-17	22910-22911	=	
81-18	22911-22920	dt_socket	
81-19	22920-22921	,	
81-20	22921-22928	address	
81-21	22928-22929	=	
81-22	22929-22944	YOUR-IP-ADDRESS	
81-23	22944-22945	:	
81-24	22945-22954	YOUR-PORT	
81-25	22954-22955	.	
81-26	22956-22960	Save	
81-27	22961-22964	the	
81-28	22965-22977	manifest.yml	
81-29	22978-22982	file	
81-30	22982-22983	.	
81-31	22984-22987	Run	
81-32	22987-22988	:	
81-33	22989-22991	cf	
81-34	22992-22996	push	
81-35	22997-23001	Upon	
81-36	23002-23012	completion	
81-37	23012-23013	,	
81-38	23014-23017	you	
81-39	23018-23024	should	
81-40	23025-23028	see	
81-41	23029-23033	that	
81-42	23034-23038	your	
81-43	23039-23042	app	
81-44	23043-23046	has	
81-45	23047-23054	started	
81-46	23055-23058	and	
81-47	23059-23061	is	
81-48	23062-23065	now	
81-49	23066-23075	connected	
81-50	23076-23078	to	
81-51	23079-23082	the	
81-52	23083-23091	debugger	
81-53	23092-23099	running	
81-54	23100-23102	in	
81-55	23103-23107	your	
81-56	23108-23111	IDE	
81-57	23111-23112	.	
81-58	23113-23116	You	
81-59	23117-23120	can	
81-60	23121-23124	now	
81-61	23125-23128	add	
81-62	23129-23140	breakpoints	
81-63	23141-23144	and	
81-64	23145-23156	interrogate	
81-65	23157-23160	the	
81-66	23161-23164	app	
81-67	23165-23169	just	
81-68	23170-23172	as	
81-69	23173-23176	you	
81-70	23177-23182	would	
81-71	23183-23185	if	
81-72	23186-23188	it	
81-73	23189-23193	were	
81-74	23194-23201	running	
81-75	23202-23209	locally	
81-76	23209-23210	.	

#Text=Slow Starting Java or Grails Apps Some Java and Grails apps do not start quickly, and the health check for an app can fail if an app starts too slowly. The current Java buildpack implementation sets the Tomcat bindOnInit property to false. This prevents Tomcat from listening for HTTP requests until an app has fully deployed.
82-1	23211-23215	Slow	
82-2	23216-23224	Starting	
82-3	23225-23229	Java	
82-4	23230-23232	or	
82-5	23233-23239	Grails	
82-6	23240-23244	Apps	
82-7	23245-23249	Some	
82-8	23250-23254	Java	
82-9	23255-23258	and	
82-10	23259-23265	Grails	
82-11	23266-23270	apps	
82-12	23271-23273	do	
82-13	23274-23277	not	
82-14	23278-23283	start	
82-15	23284-23291	quickly	
82-16	23291-23292	,	
82-17	23293-23296	and	
82-18	23297-23300	the	
82-19	23301-23307	health	
82-20	23308-23313	check	
82-21	23314-23317	for	
82-22	23318-23320	an	
82-23	23321-23324	app	
82-24	23325-23328	can	
82-25	23329-23333	fail	
82-26	23334-23336	if	
82-27	23337-23339	an	
82-28	23340-23343	app	
82-29	23344-23350	starts	
82-30	23351-23354	too	
82-31	23355-23361	slowly	
82-32	23361-23362	.	
82-33	23363-23366	The	
82-34	23367-23374	current	
82-35	23375-23379	Java	
82-36	23380-23389	buildpack	
82-37	23390-23404	implementation	
82-38	23405-23409	sets	
82-39	23410-23413	the	
82-40	23414-23420	Tomcat	
82-41	23421-23431	bindOnInit	
82-42	23432-23440	property	
82-43	23441-23443	to	
82-44	23444-23449	false	
82-45	23449-23450	.	
82-46	23451-23455	This	
82-47	23456-23464	prevents	
82-48	23465-23471	Tomcat	
82-49	23472-23476	from	
82-50	23477-23486	listening	
82-51	23487-23490	for	
82-52	23491-23495	HTTP	
82-53	23496-23504	requests	
82-54	23505-23510	until	
82-55	23511-23513	an	
82-56	23514-23517	app	
82-57	23518-23521	has	
82-58	23522-23527	fully	
82-59	23528-23536	deployed	
82-60	23536-23537	.	

#Text=If your app does not start quickly, the health check may fail because it checks the health of the app before the app can accept requests. By default, the health check fails after a timeout threshold of 60 seconds. To resolve this issue, run cf push with the -t TIMEOUT-THRESHOLD option to increase the timeout threshold. Run: $ cf push YOUR-APP -t TIMEOUT-THRESHOLD
83-1	23538-23540	If	
83-2	23541-23545	your	
83-3	23546-23549	app	
83-4	23550-23554	does	
83-5	23555-23558	not	
83-6	23559-23564	start	
83-7	23565-23572	quickly	
83-8	23572-23573	,	
83-9	23574-23577	the	
83-10	23578-23584	health	
83-11	23585-23590	check	
83-12	23591-23594	may	
83-13	23595-23599	fail	
83-14	23600-23607	because	
83-15	23608-23610	it	
83-16	23611-23617	checks	
83-17	23618-23621	the	
83-18	23622-23628	health	
83-19	23629-23631	of	
83-20	23632-23635	the	
83-21	23636-23639	app	
83-22	23640-23646	before	
83-23	23647-23650	the	
83-24	23651-23654	app	
83-25	23655-23658	can	
83-26	23659-23665	accept	
83-27	23666-23674	requests	
83-28	23674-23675	.	
83-29	23676-23678	By	
83-30	23679-23686	default	
83-31	23686-23687	,	
83-32	23688-23691	the	
83-33	23692-23698	health	
83-34	23699-23704	check	
83-35	23705-23710	fails	
83-36	23711-23716	after	
83-37	23717-23718	a	
83-38	23719-23726	timeout	
83-39	23727-23736	threshold	
83-40	23737-23739	of	
83-41	23740-23742	60	
83-42	23743-23750	seconds	
83-43	23750-23751	.	
83-44	23752-23754	To	
83-45	23755-23762	resolve	
83-46	23763-23767	this	
83-47	23768-23773	issue	
83-48	23773-23774	,	
83-49	23775-23778	run	
83-50	23779-23781	cf	
83-51	23782-23786	push	
83-52	23787-23791	with	
83-53	23792-23795	the	
83-54	23796-23797	-	
83-55	23797-23798	t	
83-56	23799-23816	TIMEOUT-THRESHOLD	
83-57	23817-23823	option	
83-58	23824-23826	to	
83-59	23827-23835	increase	
83-60	23836-23839	the	
83-61	23840-23847	timeout	
83-62	23848-23857	threshold	
83-63	23857-23858	.	
83-64	23859-23862	Run	
83-65	23862-23863	:	
83-66	23864-23865	$	
83-67	23866-23868	cf	
83-68	23869-23873	push	
83-69	23874-23882	YOUR-APP	
83-70	23883-23884	-	
83-71	23884-23885	t	
83-72	23886-23903	TIMEOUT-THRESHOLD	

#Text=Where: YOUR-APP is the name of your app. TIMEOUT-THRESHOLD is the number of seconds to which you want to increase the timeout threshold.
84-1	23904-23909	Where	
84-2	23909-23910	:	
84-3	23911-23919	YOUR-APP	
84-4	23920-23922	is	
84-5	23923-23926	the	
84-6	23927-23931	name	
84-7	23932-23934	of	
84-8	23935-23939	your	
84-9	23940-23943	app	
84-10	23943-23944	.	
84-11	23945-23962	TIMEOUT-THRESHOLD	
84-12	23963-23965	is	
84-13	23966-23969	the	
84-14	23970-23976	number	
84-15	23977-23979	of	
84-16	23980-23987	seconds	
84-17	23988-23990	to	
84-18	23991-23996	which	
84-19	23997-24000	you	
84-20	24001-24005	want	
84-21	24006-24008	to	
84-22	24009-24017	increase	
84-23	24018-24021	the	
84-24	24022-24029	timeout	
84-25	24030-24039	threshold	
84-26	24039-24040	.	

#Text=Note: The timeout threshold cannot exceed 180 seconds. Specifying a timeout threshold greater than 180 seconds results in the following error: Server error, status code: 400, error code: 100001, message: The app is invalid: health_check_timeout maximum_exceeded Extension The Java buildpack is also designed to be easily extended. It creates abstractions for three types of components (containers, frameworks, and JREs) in order to allow users to easily add functionality. In addition to these abstractions, there are a number of utility classes for simplifying typical buildpack behaviors.
85-1	24041-24045	Note	
85-2	24045-24046	:	
85-3	24047-24050	The	
85-4	24051-24058	timeout	
85-5	24059-24068	threshold	
85-6	24069-24075	cannot	
85-7	24076-24082	exceed	
85-8	24083-24086	180	
85-9	24087-24094	seconds	
85-10	24094-24095	.	
85-11	24096-24106	Specifying	
85-12	24107-24108	a	
85-13	24109-24116	timeout	
85-14	24117-24126	threshold	
85-15	24127-24134	greater	
85-16	24135-24139	than	
85-17	24140-24143	180	
85-18	24144-24151	seconds	
85-19	24152-24159	results	
85-20	24160-24162	in	
85-21	24163-24166	the	
85-22	24167-24176	following	
85-23	24177-24182	error	
85-24	24182-24183	:	
85-25	24184-24190	Server	
85-26	24191-24196	error	
85-27	24196-24197	,	
85-28	24198-24204	status	
85-29	24205-24209	code	
85-30	24209-24210	:	
85-31	24211-24214	400	
85-32	24214-24215	,	
85-33	24216-24221	error	
85-34	24222-24226	code	
85-35	24226-24227	:	
85-36	24228-24234	100001	
85-37	24234-24235	,	
85-38	24236-24243	message	
85-39	24243-24244	:	
85-40	24245-24248	The	
85-41	24249-24252	app	
85-42	24253-24255	is	
85-43	24256-24263	invalid	
85-44	24263-24264	:	
85-45	24265-24285	health_check_timeout	
85-46	24286-24302	maximum_exceeded	
85-47	24303-24312	Extension	
85-48	24313-24316	The	
85-49	24317-24321	Java	
85-50	24322-24331	buildpack	
85-51	24332-24334	is	
85-52	24335-24339	also	
85-53	24340-24348	designed	
85-54	24349-24351	to	
85-55	24352-24354	be	
85-56	24355-24361	easily	
85-57	24362-24370	extended	
85-58	24370-24371	.	
85-59	24372-24374	It	
85-60	24375-24382	creates	
85-61	24383-24395	abstractions	
85-62	24396-24399	for	
85-63	24400-24405	three	
85-64	24406-24411	types	
85-65	24412-24414	of	
85-66	24415-24425	components	
85-67	24426-24427	(	
85-68	24427-24437	containers	
85-69	24437-24438	,	
85-70	24439-24449	frameworks	
85-71	24449-24450	,	
85-72	24451-24454	and	
85-73	24455-24459	JREs	
85-74	24459-24460	)	
85-75	24461-24463	in	
85-76	24464-24469	order	
85-77	24470-24472	to	
85-78	24473-24478	allow	
85-79	24479-24484	users	
85-80	24485-24487	to	
85-81	24488-24494	easily	
85-82	24495-24498	add	
85-83	24499-24512	functionality	
85-84	24512-24513	.	
85-85	24514-24516	In	
85-86	24517-24525	addition	
85-87	24526-24528	to	
85-88	24529-24534	these	
85-89	24535-24547	abstractions	
85-90	24547-24548	,	
85-91	24549-24554	there	
85-92	24555-24558	are	
85-93	24559-24560	a	
85-94	24561-24567	number	
85-95	24568-24570	of	
85-96	24571-24578	utility	
85-97	24579-24586	classes	
85-98	24587-24590	for	
85-99	24591-24602	simplifying	
85-100	24603-24610	typical	
85-101	24611-24620	buildpack	
85-102	24621-24630	behaviors	
85-103	24630-24631	.	

#Text=As an example, the New Relic framework looks like the below: class NewRelicAgent < JavaBuildpack::Component::VersionedDependencyComponent # @macro base_component_compile def compile FileUtils.mkdir_p logs_dir
86-1	24632-24634	As	
86-2	24635-24637	an	
86-3	24638-24645	example	
86-4	24645-24646	,	
86-5	24647-24650	the	
86-6	24651-24654	New	
86-7	24655-24660	Relic	
86-8	24661-24670	framework	
86-9	24671-24676	looks	
86-10	24677-24681	like	
86-11	24682-24685	the	
86-12	24686-24691	below	
86-13	24691-24692	:	
86-14	24693-24698	class	
86-15	24699-24712	NewRelicAgent	
86-16	24713-24714	<	
86-17	24715-24728	JavaBuildpack	
86-18	24728-24729	:	
86-19	24729-24730	:	
86-20	24730-24739	Component	
86-21	24739-24740	:	
86-22	24740-24741	:	
86-23	24741-24769	VersionedDependencyComponent	
86-24	24770-24771	#	
86-25	24772-24773	@	
86-26	24773-24778	macro	
86-27	24779-24801	base_component_compile	
86-28	24802-24805	def	
86-29	24806-24813	compile	
86-30	24814-24831	FileUtils.mkdir_p	
86-31	24832-24840	logs_dir	

#Text=download_jar @droplet.copy_resources end # @macro base_component_release def release @droplet.java_opts .add_javaagent(@droplet.sandbox + jar_name)
87-1	24841-24853	download_jar	
87-2	24854-24855	@	
87-3	24855-24877	droplet.copy_resources	
87-4	24878-24881	end	
87-5	24882-24883	#	
87-6	24884-24885	@	
87-7	24885-24890	macro	
87-8	24891-24913	base_component_release	
87-9	24914-24917	def	
87-10	24918-24925	release	
87-11	24926-24927	@	
87-12	24927-24944	droplet.java_opts	
87-13	24945-24946	.	
87-14	24946-24959	add_javaagent	
87-15	24959-24960	(	
87-16	24960-24961	@	
87-17	24961-24976	droplet.sandbox	
87-18	24977-24978	+	
87-19	24979-24987	jar_name	
87-20	24987-24988	)	

#Text=.add_system_property('newrelic.home', @droplet.sandbox) .add_system_property('newrelic.config.license_key', license_key) .add_system_property('newrelic.config.app_name', "'#{application_name}'")
88-1	24989-24990	.	
88-2	24990-25009	add_system_property	
88-3	25009-25010	(	
88-4	25010-25011	'	
88-5	25011-25024	newrelic.home	
88-6	25024-25025	'	
88-7	25025-25026	,	
88-8	25027-25028	@	
88-9	25028-25043	droplet.sandbox	
88-10	25043-25044	)	
88-11	25045-25046	.	
88-12	25046-25065	add_system_property	
88-13	25065-25066	(	
88-14	25066-25067	'	
88-15	25067-25094	newrelic.config.license_key	
88-16	25094-25095	'	
88-17	25095-25096	,	
88-18	25097-25108	license_key	
88-19	25108-25109	)	
88-20	25110-25111	.	
88-21	25111-25130	add_system_property	
88-22	25130-25131	(	
88-23	25131-25132	'	
88-24	25132-25156	newrelic.config.app_name	
88-25	25156-25157	'	
88-26	25157-25158	,	
88-27	25159-25160	"	
88-28	25160-25161	'	
88-29	25161-25162	#	
88-30	25162-25163	{	
88-31	25163-25179	application_name	
88-32	25179-25180	}	
88-33	25180-25181	'	
88-34	25181-25182	"	
88-35	25182-25183	)	

#Text=.add_system_property('newrelic.config.log_file_path', logs_dir) end protected # @macro versioned_dependency_component_supports def supports? @application.services.one_service? FILTER, 'licenseKey' end private FILTER = /newrelic/.freeze
89-1	25184-25185	.	
89-2	25185-25204	add_system_property	
89-3	25204-25205	(	
89-4	25205-25206	'	
89-5	25206-25235	newrelic.config.log_file_path	
89-6	25235-25236	'	
89-7	25236-25237	,	
89-8	25238-25246	logs_dir	
89-9	25246-25247	)	
89-10	25248-25251	end	
89-11	25252-25261	protected	
89-12	25262-25263	#	
89-13	25264-25265	@	
89-14	25265-25270	macro	
89-15	25271-25310	versioned_dependency_component_supports	
89-16	25311-25314	def	
89-17	25315-25323	supports	
89-18	25323-25324	?	
89-19	25325-25326	@	
89-20	25326-25358	application.services.one_service	
89-21	25358-25359	?	
89-22	25360-25366	FILTER	
89-23	25366-25367	,	
89-24	25368-25369	'	
89-25	25369-25379	licenseKey	
89-26	25379-25380	'	
89-27	25381-25384	end	
89-28	25385-25392	private	
89-29	25393-25399	FILTER	
89-30	25400-25401	=	
89-31	25402-25403	/	
89-32	25403-25411	newrelic	
89-33	25411-25412	/	
89-34	25412-25413	.	
89-35	25413-25419	freeze	

#Text=def application_name @application.details['application_name'] end def license_key @application.services.find_service(FILTER)['credentials']['licenseKey'] end def logs_dir
90-1	25420-25423	def	
90-2	25424-25440	application_name	
90-3	25441-25442	@	
90-4	25442-25461	application.details	
90-5	25461-25462	[	
90-6	25462-25463	'	
90-7	25463-25479	application_name	
90-8	25479-25480	'	
90-9	25480-25481	]	
90-10	25482-25485	end	
90-11	25486-25489	def	
90-12	25490-25501	license_key	
90-13	25502-25503	@	
90-14	25503-25536	application.services.find_service	
90-15	25536-25537	(	
90-16	25537-25543	FILTER	
90-17	25543-25544	)	
90-18	25544-25545	[	
90-19	25545-25546	'	
90-20	25546-25557	credentials	
90-21	25557-25558	'	
90-22	25558-25559	]	
90-23	25559-25560	[	
90-24	25560-25561	'	
90-25	25561-25571	licenseKey	
90-26	25571-25572	'	
90-27	25572-25573	]	
90-28	25574-25577	end	
90-29	25578-25581	def	
90-30	25582-25590	logs_dir	

#Text=@droplet.sandbox + 'logs' end end For more information, see Design, Extending, and Configuration and Extension in the Cloud Foundry Java Buildpack repository on GitHub. Environment Variables You can access environments variable programmatically.
91-1	25591-25592	@	
91-2	25592-25607	droplet.sandbox	
91-3	25608-25609	+	
91-4	25610-25611	'	
91-5	25611-25615	logs	
91-6	25615-25616	'	
91-7	25617-25620	end	
91-8	25621-25624	end	
91-9	25625-25628	For	
91-10	25629-25633	more	
91-11	25634-25645	information	
91-12	25645-25646	,	
91-13	25647-25650	see	
91-14	25651-25657	Design	
91-15	25657-25658	,	
91-16	25659-25668	Extending	
91-17	25668-25669	,	
91-18	25670-25673	and	
91-19	25674-25687	Configuration	
91-20	25688-25691	and	
91-21	25692-25701	Extension	
91-22	25702-25704	in	
91-23	25705-25708	the	
91-24	25709-25714	Cloud	
91-25	25715-25722	Foundry	
91-26	25723-25727	Java	
91-27	25728-25737	Buildpack	
91-28	25738-25748	repository	
91-29	25749-25751	on	
91-30	25752-25758	GitHub	
91-31	25758-25759	.	
91-32	25760-25771	Environment	
91-33	25772-25781	Variables	
91-34	25782-25785	You	
91-35	25786-25789	can	
91-36	25790-25796	access	
91-37	25797-25809	environments	
91-38	25810-25818	variable	
91-39	25819-25835	programmatically	
91-40	25835-25836	.	

#Text=For example, you can obtain VCAP_SERVICES by running: System.getenv("VCAP_SERVICES"); For more information, see CF Environment Variables. Create a pull request or raise an issue on the source for this page in GitHub Cloud Foundry Documentation
92-1	25837-25840	For	
92-2	25841-25848	example	
92-3	25848-25849	,	
92-4	25850-25853	you	
92-5	25854-25857	can	
92-6	25858-25864	obtain	
92-7	25865-25878	VCAP_SERVICES	
92-8	25879-25881	by	
92-9	25882-25889	running	
92-10	25889-25890	:	
92-11	25891-25904	System.getenv	
92-12	25904-25905	(	
92-13	25905-25906	"	
92-14	25906-25919	VCAP_SERVICES	
92-15	25919-25920	"	
92-16	25920-25921	)	
92-17	25921-25922	;	
92-18	25923-25926	For	
92-19	25927-25931	more	
92-20	25932-25943	information	
92-21	25943-25944	,	
92-22	25945-25948	see	
92-23	25949-25951	CF	
92-24	25952-25963	Environment	
92-25	25964-25973	Variables	
92-26	25973-25974	.	
92-27	25975-25981	Create	
92-28	25982-25983	a	
92-29	25984-25988	pull	
92-30	25989-25996	request	
92-31	25997-25999	or	
92-32	26000-26005	raise	
92-33	26006-26008	an	
92-34	26009-26014	issue	
92-35	26015-26017	on	
92-36	26018-26021	the	
92-37	26022-26028	source	
92-38	26029-26032	for	
92-39	26033-26037	this	
92-40	26038-26042	page	
92-41	26043-26045	in	
92-42	26046-26052	GitHub	
92-43	26053-26058	Cloud	
92-44	26059-26066	Foundry	
92-45	26067-26080	Documentation	
