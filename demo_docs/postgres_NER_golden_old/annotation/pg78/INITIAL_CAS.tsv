#FORMAT=WebAnno TSV 3.3


#Text=Lab3: Query Plan Management :: Amazon Aurora Labs for PostgreSQL Amazon Aurora Labs for PostgreSQL Overview of Labs Prerequisites I am in a workshop using Event Engine Signing in to the AWS console using Event Engine
1-1	0-4	Lab3	
1-2	4-5	:	
1-3	6-11	Query	
1-4	12-16	Plan	
1-5	17-27	Management	
1-6	28-29	:	
1-7	29-30	:	
1-8	31-37	Amazon	
1-9	38-44	Aurora	
1-10	45-49	Labs	
1-11	50-53	for	
1-12	54-64	PostgreSQL	
1-13	65-71	Amazon	
1-14	72-78	Aurora	
1-15	79-83	Labs	
1-16	84-87	for	
1-17	88-98	PostgreSQL	
1-18	99-107	Overview	
1-19	108-110	of	
1-20	111-115	Labs	
1-21	116-129	Prerequisites	
1-22	130-131	I	
1-23	132-134	am	
1-24	135-137	in	
1-25	138-139	a	
1-26	140-148	workshop	
1-27	149-154	using	
1-28	155-160	Event	
1-29	161-167	Engine	
1-30	168-175	Signing	
1-31	176-178	in	
1-32	179-181	to	
1-33	182-185	the	
1-34	186-189	AWS	
1-35	190-197	console	
1-36	198-203	using	
1-37	204-209	Event	
1-38	210-216	Engine	

#Text=I need to deploy lab environment manually Getting started Signing in to the AWS Console Setup Lab Environment with Aurora cluster Setup the Lab without Aurora cluster Lab1: Creating a New Aurora Cluster Manually Configure Cloud9 and Initialize Database
2-1	217-218	I	
2-2	219-223	need	
2-3	224-226	to	
2-4	227-233	deploy	
2-5	234-237	lab	
2-6	238-249	environment	
2-7	250-258	manually	
2-8	259-266	Getting	
2-9	267-274	started	
2-10	275-282	Signing	
2-11	283-285	in	
2-12	286-288	to	
2-13	289-292	the	
2-14	293-296	AWS	
2-15	297-304	Console	
2-16	305-310	Setup	
2-17	311-314	Lab	
2-18	315-326	Environment	
2-19	327-331	with	
2-20	332-338	Aurora	
2-21	339-346	cluster	
2-22	347-352	Setup	
2-23	353-356	the	
2-24	357-360	Lab	
2-25	361-368	without	
2-26	369-375	Aurora	
2-27	376-383	cluster	
2-28	384-388	Lab1	
2-29	388-389	:	
2-30	390-398	Creating	
2-31	399-400	a	
2-32	401-404	New	
2-33	405-411	Aurora	
2-34	412-419	Cluster	
2-35	420-428	Manually	
2-36	429-438	Configure	
2-37	439-445	Cloud9	
2-38	446-449	and	
2-39	450-460	Initialize	
2-40	461-469	Database	

#Text=Configure the Cloud9 workstation Connect, Verify and Initialize DB Instance Lab2: Fast Cloning Lab3: Query Plan Management Lab4: Cluster Cache Management 4.1 Setup cluster cache management 4.2 Benchmarking with Cluster Cache management
3-1	470-479	Configure	
3-2	480-483	the	
3-3	484-490	Cloud9	
3-4	491-502	workstation	
3-5	503-510	Connect	
3-6	510-511	,	
3-7	512-518	Verify	
3-8	519-522	and	
3-9	523-533	Initialize	
3-10	534-536	DB	
3-11	537-545	Instance	
3-12	546-550	Lab2	
3-13	550-551	:	
3-14	552-556	Fast	
3-15	557-564	Cloning	
3-16	565-569	Lab3	
3-17	569-570	:	
3-18	571-576	Query	
3-19	577-581	Plan	
3-20	582-592	Management	
3-21	593-597	Lab4	
3-22	597-598	:	
3-23	599-606	Cluster	
3-24	607-612	Cache	
3-25	613-623	Management	
3-26	624-627	4.1	
3-27	628-633	Setup	
3-28	634-641	cluster	
3-29	642-647	cache	
3-30	648-658	management	
3-31	659-662	4.2	
3-32	663-675	Benchmarking	
3-33	676-680	with	
3-34	681-688	Cluster	
3-35	689-694	Cache	
3-36	695-705	management	

#Text=Lab5: Database Activity Streaming 5.1: Setup KMS for Database Activity Streaming 5.2: Database Activity Streams in action Lab6: RDS Performance Insights Lab7: Create dataset and Auto Scale Lab8: Test Fault Tolerance
4-1	706-710	Lab5	
4-2	710-711	:	
4-3	712-720	Database	
4-4	721-729	Activity	
4-5	730-739	Streaming	
4-6	740-743	5.1	
4-7	743-744	:	
4-8	745-750	Setup	
4-9	751-754	KMS	
4-10	755-758	for	
4-11	759-767	Database	
4-12	768-776	Activity	
4-13	777-786	Streaming	
4-14	787-790	5.2	
4-15	790-791	:	
4-16	792-800	Database	
4-17	801-809	Activity	
4-18	810-817	Streams	
4-19	818-820	in	
4-20	821-827	action	
4-21	828-832	Lab6	
4-22	832-833	:	
4-23	834-837	RDS	
4-24	838-849	Performance	
4-25	850-858	Insights	
4-26	859-863	Lab7	
4-27	863-864	:	
4-28	865-871	Create	
4-29	872-879	dataset	
4-30	880-883	and	
4-31	884-888	Auto	
4-32	889-894	Scale	
4-33	895-899	Lab8	
4-34	899-900	:	
4-35	901-905	Test	
4-36	906-911	Fault	
4-37	912-921	Tolerance	

#Text=Lab9: Aurora Global Database 9.0: Prerequisites 9.1: Establish Global Database 9.2: Monitor a Global Database 9.3: Failover: Promote a Region Failback: Optional Lab Lab10: Aurora Serverless
5-1	922-926	Lab9	
5-2	926-927	:	
5-3	928-934	Aurora	
5-4	935-941	Global	
5-5	942-950	Database	
5-6	951-954	9.0	
5-7	954-955	:	
5-8	956-969	Prerequisites	
5-9	970-973	9.1	
5-10	973-974	:	
5-11	975-984	Establish	
5-12	985-991	Global	
5-13	992-1000	Database	
5-14	1001-1004	9.2	
5-15	1004-1005	:	
5-16	1006-1013	Monitor	
5-17	1014-1015	a	
5-18	1016-1022	Global	
5-19	1023-1031	Database	
5-20	1032-1035	9.3	
5-21	1035-1036	:	
5-22	1037-1045	Failover	
5-23	1045-1046	:	
5-24	1047-1054	Promote	
5-25	1055-1056	a	
5-26	1057-1063	Region	
5-27	1064-1072	Failback	
5-28	1072-1073	:	
5-29	1074-1082	Optional	
5-30	1083-1086	Lab	
5-31	1087-1092	Lab10	
5-32	1092-1093	:	
5-33	1094-1100	Aurora	
5-34	1101-1111	Serverless	

#Text=Create an Aurora Serverless DB Cluster Use Aurora Serverless with AWS Lambda and RDS Data API Lab11: Aurora Machine Learning Clean Up Contributors & Revision History More Resources Privacy | Site Terms | © 2021, Amazon Web Services, Inc. or its affiliates. All rights reserved.
6-1	1112-1118	Create	
6-2	1119-1121	an	
6-3	1122-1128	Aurora	
6-4	1129-1139	Serverless	
6-5	1140-1142	DB	
6-6	1143-1150	Cluster	
6-7	1151-1154	Use	
6-8	1155-1161	Aurora	
6-9	1162-1172	Serverless	
6-10	1173-1177	with	
6-11	1178-1181	AWS	
6-12	1182-1188	Lambda	
6-13	1189-1192	and	
6-14	1193-1196	RDS	
6-15	1197-1201	Data	
6-16	1202-1205	API	
6-17	1206-1211	Lab11	
6-18	1211-1212	:	
6-19	1213-1219	Aurora	
6-20	1220-1227	Machine	
6-21	1228-1236	Learning	
6-22	1237-1242	Clean	
6-23	1243-1245	Up	
6-24	1246-1258	Contributors	
6-25	1259-1260	&	
6-26	1261-1269	Revision	
6-27	1270-1277	History	
6-28	1278-1282	More	
6-29	1283-1292	Resources	
6-30	1293-1300	Privacy	
6-31	1301-1302	|	
6-32	1303-1307	Site	
6-33	1308-1313	Terms	
6-34	1314-1315	|	
6-35	1316-1317	©	
6-36	1318-1322	2021	
6-37	1322-1323	,	
6-38	1324-1330	Amazon	
6-39	1331-1334	Web	
6-40	1335-1343	Services	
6-41	1343-1344	,	
6-42	1345-1348	Inc	
6-43	1348-1349	.	
6-44	1350-1352	or	
6-45	1353-1356	its	
6-46	1357-1367	affiliates	
6-47	1367-1368	.	
6-48	1369-1372	All	
6-49	1373-1379	rights	
6-50	1380-1388	reserved	
6-51	1388-1389	.	

#Text=Edit this page Amazon Aurora Labs for PostgreSQL > Lab3: Query Plan Management Lab3: Query Plan Management With query plan management (QPM), you can control execution plans for a set of statements that you want to manage. You can do the following:
7-1	1390-1394	Edit	
7-2	1395-1399	this	
7-3	1400-1404	page	
7-4	1405-1411	Amazon	
7-5	1412-1418	Aurora	
7-6	1419-1423	Labs	
7-7	1424-1427	for	
7-8	1428-1438	PostgreSQL	
7-9	1439-1440	>	
7-10	1441-1445	Lab3	
7-11	1445-1446	:	
7-12	1447-1452	Query	
7-13	1453-1457	Plan	
7-14	1458-1468	Management	
7-15	1469-1473	Lab3	
7-16	1473-1474	:	
7-17	1475-1480	Query	
7-18	1481-1485	Plan	
7-19	1486-1496	Management	
7-20	1497-1501	With	
7-21	1502-1507	query	
7-22	1508-1512	plan	
7-23	1513-1523	management	
7-24	1524-1525	(	
7-25	1525-1528	QPM	
7-26	1528-1529	)	
7-27	1529-1530	,	
7-28	1531-1534	you	
7-29	1535-1538	can	
7-30	1539-1546	control	
7-31	1547-1556	execution	
7-32	1557-1562	plans	
7-33	1563-1566	for	
7-34	1567-1568	a	
7-35	1569-1572	set	
7-36	1573-1575	of	
7-37	1576-1586	statements	
7-38	1587-1591	that	
7-39	1592-1595	you	
7-40	1596-1600	want	
7-41	1601-1603	to	
7-42	1604-1610	manage	
7-43	1610-1611	.	
7-44	1612-1615	You	
7-45	1616-1619	can	
7-46	1620-1622	do	
7-47	1623-1626	the	
7-48	1627-1636	following	
7-49	1636-1637	:	

#Text=Improve plan stability by forcing the optimizer to choose from a small number of known, good plans. Optimize plans centrally and then distribute the best plans globally. Identify indexes that aren’t used and assess the impact of creating or dropping an index. Automatically detect a new minimum-cost plan discovered by the optimizer.
8-1	1638-1645	Improve	
8-2	1646-1650	plan	
8-3	1651-1660	stability	
8-4	1661-1663	by	
8-5	1664-1671	forcing	
8-6	1672-1675	the	
8-7	1676-1685	optimizer	
8-8	1686-1688	to	
8-9	1689-1695	choose	
8-10	1696-1700	from	
8-11	1701-1702	a	
8-12	1703-1708	small	
8-13	1709-1715	number	
8-14	1716-1718	of	
8-15	1719-1724	known	
8-16	1724-1725	,	
8-17	1726-1730	good	
8-18	1731-1736	plans	
8-19	1736-1737	.	
8-20	1738-1746	Optimize	
8-21	1747-1752	plans	
8-22	1753-1762	centrally	
8-23	1763-1766	and	
8-24	1767-1771	then	
8-25	1772-1782	distribute	
8-26	1783-1786	the	
8-27	1787-1791	best	
8-28	1792-1797	plans	
8-29	1798-1806	globally	
8-30	1806-1807	.	
8-31	1808-1816	Identify	
8-32	1817-1824	indexes	
8-33	1825-1829	that	
8-34	1830-1834	aren	
8-35	1834-1835	’	
8-36	1835-1836	t	
8-37	1837-1841	used	
8-38	1842-1845	and	
8-39	1846-1852	assess	
8-40	1853-1856	the	
8-41	1857-1863	impact	
8-42	1864-1866	of	
8-43	1867-1875	creating	
8-44	1876-1878	or	
8-45	1879-1887	dropping	
8-46	1888-1890	an	
8-47	1891-1896	index	
8-48	1896-1897	.	
8-49	1898-1911	Automatically	
8-50	1912-1918	detect	
8-51	1919-1920	a	
8-52	1921-1924	new	
8-53	1925-1937	minimum-cost	
8-54	1938-1942	plan	
8-55	1943-1953	discovered	
8-56	1954-1956	by	
8-57	1957-1960	the	
8-58	1961-1970	optimizer	
8-59	1970-1971	.	

#Text=Try new optimizer features with less risk, because you can choose to approve only the plan changes that improve performance. For additional details on the Query Plan Management please refer official documentation Managing Query Execution Plans for Aurora PostgreSQL.
9-1	1972-1975	Try	
9-2	1976-1979	new	
9-3	1980-1989	optimizer	
9-4	1990-1998	features	
9-5	1999-2003	with	
9-6	2004-2008	less	
9-7	2009-2013	risk	
9-8	2013-2014	,	
9-9	2015-2022	because	
9-10	2023-2026	you	
9-11	2027-2030	can	
9-12	2031-2037	choose	
9-13	2038-2040	to	
9-14	2041-2048	approve	
9-15	2049-2053	only	
9-16	2054-2057	the	
9-17	2058-2062	plan	
9-18	2063-2070	changes	
9-19	2071-2075	that	
9-20	2076-2083	improve	
9-21	2084-2095	performance	
9-22	2095-2096	.	
9-23	2097-2100	For	
9-24	2101-2111	additional	
9-25	2112-2119	details	
9-26	2120-2122	on	
9-27	2123-2126	the	
9-28	2127-2132	Query	
9-29	2133-2137	Plan	
9-30	2138-2148	Management	
9-31	2149-2155	please	
9-32	2156-2161	refer	
9-33	2162-2170	official	
9-34	2171-2184	documentation	
9-35	2185-2193	Managing	
9-36	2194-2199	Query	
9-37	2200-2209	Execution	
9-38	2210-2215	Plans	
9-39	2216-2219	for	
9-40	2220-2226	Aurora	
9-41	2227-2237	PostgreSQL	
9-42	2237-2238	.	

#Text=Query plan management is available with Amazon Aurora PostgreSQL version 10.5-compatible (Aurora 2.1.0) and later, or Amazon Aurora PostgreSQL version 9.6.11-compatible (Aurora 1.4.0) and later. The quickest way to enable QPM is to use the automatic plan capture, which enables the plan capture for all SQL statements that run at least two times. In this lab, we will walk through the process of enabling QPM with automatic plan capture, evolving captured query plans to manually accept them and fixing query plans by using optimizer hints. Prerequisites This lab requires the following lab modules to be completed first:
10-1	2239-2244	Query	
10-2	2245-2249	plan	
10-3	2250-2260	management	
10-4	2261-2263	is	
10-5	2264-2273	available	
10-6	2274-2278	with	
10-7	2279-2285	Amazon	
10-8	2286-2292	Aurora	
10-9	2293-2303	PostgreSQL	
10-10	2304-2311	version	
10-11	2312-2316	10.5	
10-12	2316-2317	-	
10-13	2317-2327	compatible	
10-14	2328-2329	(	
10-15	2329-2335	Aurora	
10-16	2336-2341	2.1.0	
10-17	2341-2342	)	
10-18	2343-2346	and	
10-19	2347-2352	later	
10-20	2352-2353	,	
10-21	2354-2356	or	
10-22	2357-2363	Amazon	
10-23	2364-2370	Aurora	
10-24	2371-2381	PostgreSQL	
10-25	2382-2389	version	
10-26	2390-2396	9.6.11	
10-27	2396-2397	-	
10-28	2397-2407	compatible	
10-29	2408-2409	(	
10-30	2409-2415	Aurora	
10-31	2416-2421	1.4.0	
10-32	2421-2422	)	
10-33	2423-2426	and	
10-34	2427-2432	later	
10-35	2432-2433	.	
10-36	2434-2437	The	
10-37	2438-2446	quickest	
10-38	2447-2450	way	
10-39	2451-2453	to	
10-40	2454-2460	enable	
10-41	2461-2464	QPM	
10-42	2465-2467	is	
10-43	2468-2470	to	
10-44	2471-2474	use	
10-45	2475-2478	the	
10-46	2479-2488	automatic	
10-47	2489-2493	plan	
10-48	2494-2501	capture	
10-49	2501-2502	,	
10-50	2503-2508	which	
10-51	2509-2516	enables	
10-52	2517-2520	the	
10-53	2521-2525	plan	
10-54	2526-2533	capture	
10-55	2534-2537	for	
10-56	2538-2541	all	
10-57	2542-2545	SQL	
10-58	2546-2556	statements	
10-59	2557-2561	that	
10-60	2562-2565	run	
10-61	2566-2568	at	
10-62	2569-2574	least	
10-63	2575-2578	two	
10-64	2579-2584	times	
10-65	2584-2585	.	
10-66	2586-2588	In	
10-67	2589-2593	this	
10-68	2594-2597	lab	
10-69	2597-2598	,	
10-70	2599-2601	we	
10-71	2602-2606	will	
10-72	2607-2611	walk	
10-73	2612-2619	through	
10-74	2620-2623	the	
10-75	2624-2631	process	
10-76	2632-2634	of	
10-77	2635-2643	enabling	
10-78	2644-2647	QPM	
10-79	2648-2652	with	
10-80	2653-2662	automatic	
10-81	2663-2667	plan	
10-82	2668-2675	capture	
10-83	2675-2676	,	
10-84	2677-2685	evolving	
10-85	2686-2694	captured	
10-86	2695-2700	query	
10-87	2701-2706	plans	
10-88	2707-2709	to	
10-89	2710-2718	manually	
10-90	2719-2725	accept	
10-91	2726-2730	them	
10-92	2731-2734	and	
10-93	2735-2741	fixing	
10-94	2742-2747	query	
10-95	2748-2753	plans	
10-96	2754-2756	by	
10-97	2757-2762	using	
10-98	2763-2772	optimizer	
10-99	2773-2778	hints	
10-100	2778-2779	.	
10-101	2780-2793	Prerequisites	
10-102	2794-2798	This	
10-103	2799-2802	lab	
10-104	2803-2811	requires	
10-105	2812-2815	the	
10-106	2816-2825	following	
10-107	2826-2829	lab	
10-108	2830-2837	modules	
10-109	2838-2840	to	
10-110	2841-2843	be	
10-111	2844-2853	completed	
10-112	2854-2859	first	
10-113	2859-2860	:	

#Text=Prerequisites Creating a New Aurora Cluster (optional, if creating a cluster manually) Configure Cloud9 and Initialize Database 1. Quick start guide on using QPM with automatic capture
11-1	2861-2874	Prerequisites	
11-2	2875-2883	Creating	
11-3	2884-2885	a	
11-4	2886-2889	New	
11-5	2890-2896	Aurora	
11-6	2897-2904	Cluster	
11-7	2905-2906	(	
11-8	2906-2914	optional	
11-9	2914-2915	,	
11-10	2916-2918	if	
11-11	2919-2927	creating	
11-12	2928-2929	a	
11-13	2930-2937	cluster	
11-14	2938-2946	manually	
11-15	2946-2947	)	
11-16	2948-2957	Configure	
11-17	2958-2964	Cloud9	
11-18	2965-2968	and	
11-19	2969-2979	Initialize	
11-20	2980-2988	Database	
11-21	2989-2990	1	
11-22	2990-2991	.	
11-23	2992-2997	Quick	
11-24	2998-3003	start	
11-25	3004-3009	guide	
11-26	3010-3012	on	
11-27	3013-3018	using	
11-28	3019-3022	QPM	
11-29	3023-3027	with	
11-30	3028-3037	automatic	
11-31	3038-3045	capture	

#Text=Here are the steps to configure and enable QPM on your Aurora PostgreSQL cluster to automatically capture and control execution plans for a set of SQL statements. 1.1 Modify the Amazon Aurora DB Cluster Parameters related to the QPM. a. Open the Amazon RDS service console Parameters group section.
12-1	3046-3050	Here	
12-2	3051-3054	are	
12-3	3055-3058	the	
12-4	3059-3064	steps	
12-5	3065-3067	to	
12-6	3068-3077	configure	
12-7	3078-3081	and	
12-8	3082-3088	enable	
12-9	3089-3092	QPM	
12-10	3093-3095	on	
12-11	3096-3100	your	
12-12	3101-3107	Aurora	
12-13	3108-3118	PostgreSQL	
12-14	3119-3126	cluster	
12-15	3127-3129	to	
12-16	3130-3143	automatically	
12-17	3144-3151	capture	
12-18	3152-3155	and	
12-19	3156-3163	control	
12-20	3164-3173	execution	
12-21	3174-3179	plans	
12-22	3180-3183	for	
12-23	3184-3185	a	
12-24	3186-3189	set	
12-25	3190-3192	of	
12-26	3193-3196	SQL	
12-27	3197-3207	statements	
12-28	3207-3208	.	
12-29	3209-3212	1.1	
12-30	3213-3219	Modify	
12-31	3220-3223	the	
12-32	3224-3230	Amazon	
12-33	3231-3237	Aurora	
12-34	3238-3240	DB	
12-35	3241-3248	Cluster	
12-36	3249-3259	Parameters	
12-37	3260-3267	related	
12-38	3268-3270	to	
12-39	3271-3274	the	
12-40	3275-3278	QPM	
12-41	3278-3279	.	
12-42	3280-3281	a	
12-43	3281-3282	.	
12-44	3283-3287	Open	
12-45	3288-3291	the	
12-46	3292-3298	Amazon	
12-47	3299-3302	RDS	
12-48	3303-3310	service	
12-49	3311-3318	console	
12-50	3319-3329	Parameters	
12-51	3330-3335	group	
12-52	3336-3343	section	
12-53	3343-3344	.	

#Text=b. In the list, choose the parameter group for your Aurora PostgreSQL DB cluster. You can find the DB Cluster parameter group name by selecting the CloudFormation Stack with description “Amazon Aurora PostgreSQL Labs Stackset” in the Cloudformation Console and referring to the Value for key apgcustomclusterparamgroup in the Outputs tab.The DB cluster must use a parameter group other than the default, because you can’t change values in a default parameter group. For more information, see Creating a DB Cluster Parameter Group. c. Click on the DB cluster parameter group name selected above and then click on Edit Parameters. In Parameter Filter field, enter rds.enable_plan_management to reveal the filtered parameter. Set value of rds.enable_plan_management to 1 and click on Save changes.
13-1	3345-3346	b	
13-2	3346-3347	.	
13-3	3348-3350	In	
13-4	3351-3354	the	
13-5	3355-3359	list	
13-6	3359-3360	,	
13-7	3361-3367	choose	
13-8	3368-3371	the	
13-9	3372-3381	parameter	
13-10	3382-3387	group	
13-11	3388-3391	for	
13-12	3392-3396	your	
13-13	3397-3403	Aurora	
13-14	3404-3414	PostgreSQL	
13-15	3415-3417	DB	
13-16	3418-3425	cluster	
13-17	3425-3426	.	
13-18	3427-3430	You	
13-19	3431-3434	can	
13-20	3435-3439	find	
13-21	3440-3443	the	
13-22	3444-3446	DB	
13-23	3447-3454	Cluster	
13-24	3455-3464	parameter	
13-25	3465-3470	group	
13-26	3471-3475	name	
13-27	3476-3478	by	
13-28	3479-3488	selecting	
13-29	3489-3492	the	
13-30	3493-3507	CloudFormation	
13-31	3508-3513	Stack	
13-32	3514-3518	with	
13-33	3519-3530	description	
13-34	3531-3532	“	
13-35	3532-3538	Amazon	
13-36	3539-3545	Aurora	
13-37	3546-3556	PostgreSQL	
13-38	3557-3561	Labs	
13-39	3562-3570	Stackset	
13-40	3570-3571	”	
13-41	3572-3574	in	
13-42	3575-3578	the	
13-43	3579-3593	Cloudformation	
13-44	3594-3601	Console	
13-45	3602-3605	and	
13-46	3606-3615	referring	
13-47	3616-3618	to	
13-48	3619-3622	the	
13-49	3623-3628	Value	
13-50	3629-3632	for	
13-51	3633-3636	key	
13-52	3637-3663	apgcustomclusterparamgroup	
13-53	3664-3666	in	
13-54	3667-3670	the	
13-55	3671-3678	Outputs	
13-56	3679-3686	tab.The	
13-57	3687-3689	DB	
13-58	3690-3697	cluster	
13-59	3698-3702	must	
13-60	3703-3706	use	
13-61	3707-3708	a	
13-62	3709-3718	parameter	
13-63	3719-3724	group	
13-64	3725-3730	other	
13-65	3731-3735	than	
13-66	3736-3739	the	
13-67	3740-3747	default	
13-68	3747-3748	,	
13-69	3749-3756	because	
13-70	3757-3760	you	
13-71	3761-3764	can	
13-72	3764-3765	’	
13-73	3765-3766	t	
13-74	3767-3773	change	
13-75	3774-3780	values	
13-76	3781-3783	in	
13-77	3784-3785	a	
13-78	3786-3793	default	
13-79	3794-3803	parameter	
13-80	3804-3809	group	
13-81	3809-3810	.	
13-82	3811-3814	For	
13-83	3815-3819	more	
13-84	3820-3831	information	
13-85	3831-3832	,	
13-86	3833-3836	see	
13-87	3837-3845	Creating	
13-88	3846-3847	a	
13-89	3848-3850	DB	
13-90	3851-3858	Cluster	
13-91	3859-3868	Parameter	
13-92	3869-3874	Group	
13-93	3874-3875	.	
13-94	3876-3877	c	
13-95	3877-3878	.	
13-96	3879-3884	Click	
13-97	3885-3887	on	
13-98	3888-3891	the	
13-99	3892-3894	DB	
13-100	3895-3902	cluster	
13-101	3903-3912	parameter	
13-102	3913-3918	group	
13-103	3919-3923	name	
13-104	3924-3932	selected	
13-105	3933-3938	above	
13-106	3939-3942	and	
13-107	3943-3947	then	
13-108	3948-3953	click	
13-109	3954-3956	on	
13-110	3957-3961	Edit	
13-111	3962-3972	Parameters	
13-112	3972-3973	.	
13-113	3974-3976	In	
13-114	3977-3986	Parameter	
13-115	3987-3993	Filter	
13-116	3994-3999	field	
13-117	3999-4000	,	
13-118	4001-4006	enter	
13-119	4007-4033	rds.enable_plan_management	
13-120	4034-4036	to	
13-121	4037-4043	reveal	
13-122	4044-4047	the	
13-123	4048-4056	filtered	
13-124	4057-4066	parameter	
13-125	4066-4067	.	
13-126	4068-4071	Set	
13-127	4072-4077	value	
13-128	4078-4080	of	
13-129	4081-4107	rds.enable_plan_management	
13-130	4108-4110	to	
13-131	4111-4112	1	
13-132	4113-4116	and	
13-133	4117-4122	click	
13-134	4123-4125	on	
13-135	4126-4130	Save	
13-136	4131-4138	changes	
13-137	4138-4139	.	

#Text=e. Click on the database parameter group name and click on Edit Parameters. f. We need to change two paramaters Modify the value for apg_plan_mgmt.capture_plan_baselines parameter to automatic Modify the value for apg_plan_mgmt.use_plan_baselines to true.
14-1	4140-4141	e	
14-2	4141-4142	.	
14-3	4143-4148	Click	
14-4	4149-4151	on	
14-5	4152-4155	the	
14-6	4156-4164	database	
14-7	4165-4174	parameter	
14-8	4175-4180	group	
14-9	4181-4185	name	
14-10	4186-4189	and	
14-11	4190-4195	click	
14-12	4196-4198	on	
14-13	4199-4203	Edit	
14-14	4204-4214	Parameters	
14-15	4214-4215	.	
14-16	4216-4217	f	
14-17	4217-4218	.	
14-18	4219-4221	We	
14-19	4222-4226	need	
14-20	4227-4229	to	
14-21	4230-4236	change	
14-22	4237-4240	two	
14-23	4241-4251	paramaters	
14-24	4252-4258	Modify	
14-25	4259-4262	the	
14-26	4263-4268	value	
14-27	4269-4272	for	
14-28	4273-4309	apg_plan_mgmt.capture_plan_baselines	
14-29	4310-4319	parameter	
14-30	4320-4322	to	
14-31	4323-4332	automatic	
14-32	4333-4339	Modify	
14-33	4340-4343	the	
14-34	4344-4349	value	
14-35	4350-4353	for	
14-36	4354-4386	apg_plan_mgmt.use_plan_baselines	
14-37	4387-4389	to	
14-38	4390-4394	true	
14-39	4394-4395	.	

#Text=g. Click on the Preview changes to verify the changes and click Save changes. h. Click Databases on the left navigation panel and wait for the status of the instance to change to available. The parameter changes will take effect after an DB instance reboot as suggested on the configuration tab of the Aurora writer and reader instances.
15-1	4396-4397	g	
15-2	4397-4398	.	
15-3	4399-4404	Click	
15-4	4405-4407	on	
15-5	4408-4411	the	
15-6	4412-4419	Preview	
15-7	4420-4427	changes	
15-8	4428-4430	to	
15-9	4431-4437	verify	
15-10	4438-4441	the	
15-11	4442-4449	changes	
15-12	4450-4453	and	
15-13	4454-4459	click	
15-14	4460-4464	Save	
15-15	4465-4472	changes	
15-16	4472-4473	.	
15-17	4474-4475	h	
15-18	4475-4476	.	
15-19	4477-4482	Click	
15-20	4483-4492	Databases	
15-21	4493-4495	on	
15-22	4496-4499	the	
15-23	4500-4504	left	
15-24	4505-4515	navigation	
15-25	4516-4521	panel	
15-26	4522-4525	and	
15-27	4526-4530	wait	
15-28	4531-4534	for	
15-29	4535-4538	the	
15-30	4539-4545	status	
15-31	4546-4548	of	
15-32	4549-4552	the	
15-33	4553-4561	instance	
15-34	4562-4564	to	
15-35	4565-4571	change	
15-36	4572-4574	to	
15-37	4575-4584	available	
15-38	4584-4585	.	
15-39	4586-4589	The	
15-40	4590-4599	parameter	
15-41	4600-4607	changes	
15-42	4608-4612	will	
15-43	4613-4617	take	
15-44	4618-4624	effect	
15-45	4625-4630	after	
15-46	4631-4633	an	
15-47	4634-4636	DB	
15-48	4637-4645	instance	
15-49	4646-4652	reboot	
15-50	4653-4655	as	
15-51	4656-4665	suggested	
15-52	4666-4668	on	
15-53	4669-4672	the	
15-54	4673-4686	configuration	
15-55	4687-4690	tab	
15-56	4691-4693	of	
15-57	4694-4697	the	
15-58	4698-4704	Aurora	
15-59	4705-4711	writer	
15-60	4712-4715	and	
15-61	4716-4722	reader	
15-62	4723-4732	instances	
15-63	4732-4733	.	

#Text=i. Reboot the writer node by selecting it and going to the Actions menu. The reader will automatically be rebooted after the writer reboots. j. Wait for the Status of Writer and Reader nodes to become Available. 1.2 Create and verify the apg_plan_mgmt extension for your DB instance. a. Open a Cloud9 terminal window and create the apg_plan_mgmt extension for your DB instance.
16-1	4734-4735	i	
16-2	4735-4736	.	
16-3	4737-4743	Reboot	
16-4	4744-4747	the	
16-5	4748-4754	writer	
16-6	4755-4759	node	
16-7	4760-4762	by	
16-8	4763-4772	selecting	
16-9	4773-4775	it	
16-10	4776-4779	and	
16-11	4780-4785	going	
16-12	4786-4788	to	
16-13	4789-4792	the	
16-14	4793-4800	Actions	
16-15	4801-4805	menu	
16-16	4805-4806	.	
16-17	4807-4810	The	
16-18	4811-4817	reader	
16-19	4818-4822	will	
16-20	4823-4836	automatically	
16-21	4837-4839	be	
16-22	4840-4848	rebooted	
16-23	4849-4854	after	
16-24	4855-4858	the	
16-25	4859-4865	writer	
16-26	4866-4873	reboots	
16-27	4873-4874	.	
16-28	4875-4876	j	
16-29	4876-4877	.	
16-30	4878-4882	Wait	
16-31	4883-4886	for	
16-32	4887-4890	the	
16-33	4891-4897	Status	
16-34	4898-4900	of	
16-35	4901-4907	Writer	
16-36	4908-4911	and	
16-37	4912-4918	Reader	
16-38	4919-4924	nodes	
16-39	4925-4927	to	
16-40	4928-4934	become	
16-41	4935-4944	Available	
16-42	4944-4945	.	
16-43	4946-4949	1.2	
16-44	4950-4956	Create	
16-45	4957-4960	and	
16-46	4961-4967	verify	
16-47	4968-4971	the	
16-48	4972-4985	apg_plan_mgmt	
16-49	4986-4995	extension	
16-50	4996-4999	for	
16-51	5000-5004	your	
16-52	5005-5007	DB	
16-53	5008-5016	instance	
16-54	5016-5017	.	
16-55	5018-5019	a	
16-56	5019-5020	.	
16-57	5021-5025	Open	
16-58	5026-5027	a	
16-59	5028-5034	Cloud9	
16-60	5035-5043	terminal	
16-61	5044-5050	window	
16-62	5051-5054	and	
16-63	5055-5061	create	
16-64	5062-5065	the	
16-65	5066-5079	apg_plan_mgmt	
16-66	5080-5089	extension	
16-67	5090-5093	for	
16-68	5094-5098	your	
16-69	5099-5101	DB	
16-70	5102-5110	instance	
16-71	5110-5111	.	

#Text=psql CREATE EXTENSION apg_plan_mgmt; select extname,extversion from pg_extension where extname='apg_plan_mgmt';
17-1	5112-5116	psql	
17-2	5117-5123	CREATE	
17-3	5124-5133	EXTENSION	
17-4	5134-5147	apg_plan_mgmt	
17-5	5147-5148	;	
17-6	5149-5155	select	
17-7	5156-5163	extname	
17-8	5163-5164	,	
17-9	5164-5174	extversion	
17-10	5175-5179	from	
17-11	5180-5192	pg_extension	
17-12	5193-5198	where	
17-13	5199-5206	extname	
17-14	5206-5207	=	
17-15	5207-5208	'	
17-16	5208-5221	apg_plan_mgmt	
17-17	5221-5222	'	
17-18	5222-5223	;	

#Text=You should see output similar to the following. The extension version will vary depending on the Aurora PostgreSQL version. b. Review all QPM related parameters are modified to the appropriate value by pasting the following queries. show rds.enable_plan_management; show apg_plan_mgmt.capture_plan_baselines;
18-1	5224-5227	You	
18-2	5228-5234	should	
18-3	5235-5238	see	
18-4	5239-5245	output	
18-5	5246-5253	similar	
18-6	5254-5256	to	
18-7	5257-5260	the	
18-8	5261-5270	following	
18-9	5270-5271	.	
18-10	5272-5275	The	
18-11	5276-5285	extension	
18-12	5286-5293	version	
18-13	5294-5298	will	
18-14	5299-5303	vary	
18-15	5304-5313	depending	
18-16	5314-5316	on	
18-17	5317-5320	the	
18-18	5321-5327	Aurora	
18-19	5328-5338	PostgreSQL	
18-20	5339-5346	version	
18-21	5346-5347	.	
18-22	5348-5349	b	
18-23	5349-5350	.	
18-24	5351-5357	Review	
18-25	5358-5361	all	
18-26	5362-5365	QPM	
18-27	5366-5373	related	
18-28	5374-5384	parameters	
18-29	5385-5388	are	
18-30	5389-5397	modified	
18-31	5398-5400	to	
18-32	5401-5404	the	
18-33	5405-5416	appropriate	
18-34	5417-5422	value	
18-35	5423-5425	by	
18-36	5426-5433	pasting	
18-37	5434-5437	the	
18-38	5438-5447	following	
18-39	5448-5455	queries	
18-40	5455-5456	.	
18-41	5457-5461	show	
18-42	5462-5488	rds.enable_plan_management	
18-43	5488-5489	;	
18-44	5490-5494	show	
18-45	5495-5531	apg_plan_mgmt.capture_plan_baselines	
18-46	5531-5532	;	

#Text=show apg_plan_mgmt.use_plan_baselines; The output should be: rds.enable_plan_management ---------------------------- apg_plan_mgmt.capture_plan_baselines
19-1	5533-5537	show	
19-2	5538-5570	apg_plan_mgmt.use_plan_baselines	
19-3	5570-5571	;	
19-4	5572-5575	The	
19-5	5576-5582	output	
19-6	5583-5589	should	
19-7	5590-5592	be	
19-8	5592-5593	:	
19-9	5594-5620	rds.enable_plan_management	
19-10	5621-5622	-	
19-11	5622-5623	-	
19-12	5623-5624	-	
19-13	5624-5625	-	
19-14	5625-5626	-	
19-15	5626-5627	-	
19-16	5627-5628	-	
19-17	5628-5629	-	
19-18	5629-5630	-	
19-19	5630-5631	-	
19-20	5631-5632	-	
19-21	5632-5633	-	
19-22	5633-5634	-	
19-23	5634-5635	-	
19-24	5635-5636	-	
19-25	5636-5637	-	
19-26	5637-5638	-	
19-27	5638-5639	-	
19-28	5639-5640	-	
19-29	5640-5641	-	
19-30	5641-5642	-	
19-31	5642-5643	-	
19-32	5643-5644	-	
19-33	5644-5645	-	
19-34	5645-5646	-	
19-35	5646-5647	-	
19-36	5647-5648	-	
19-37	5648-5649	-	
19-38	5650-5686	apg_plan_mgmt.capture_plan_baselines	

#Text=-------------------------------------- automatic apg_plan_mgmt.use_plan_baselines ----------------------------------
20-1	5687-5688	-	
20-2	5688-5689	-	
20-3	5689-5690	-	
20-4	5690-5691	-	
20-5	5691-5692	-	
20-6	5692-5693	-	
20-7	5693-5694	-	
20-8	5694-5695	-	
20-9	5695-5696	-	
20-10	5696-5697	-	
20-11	5697-5698	-	
20-12	5698-5699	-	
20-13	5699-5700	-	
20-14	5700-5701	-	
20-15	5701-5702	-	
20-16	5702-5703	-	
20-17	5703-5704	-	
20-18	5704-5705	-	
20-19	5705-5706	-	
20-20	5706-5707	-	
20-21	5707-5708	-	
20-22	5708-5709	-	
20-23	5709-5710	-	
20-24	5710-5711	-	
20-25	5711-5712	-	
20-26	5712-5713	-	
20-27	5713-5714	-	
20-28	5714-5715	-	
20-29	5715-5716	-	
20-30	5716-5717	-	
20-31	5717-5718	-	
20-32	5718-5719	-	
20-33	5719-5720	-	
20-34	5720-5721	-	
20-35	5721-5722	-	
20-36	5722-5723	-	
20-37	5723-5724	-	
20-38	5724-5725	-	
20-39	5726-5735	automatic	
20-40	5736-5768	apg_plan_mgmt.use_plan_baselines	
20-41	5769-5770	-	
20-42	5770-5771	-	
20-43	5771-5772	-	
20-44	5772-5773	-	
20-45	5773-5774	-	
20-46	5774-5775	-	
20-47	5775-5776	-	
20-48	5776-5777	-	
20-49	5777-5778	-	
20-50	5778-5779	-	
20-51	5779-5780	-	
20-52	5780-5781	-	
20-53	5781-5782	-	
20-54	5782-5783	-	
20-55	5783-5784	-	
20-56	5784-5785	-	
20-57	5785-5786	-	
20-58	5786-5787	-	
20-59	5787-5788	-	
20-60	5788-5789	-	
20-61	5789-5790	-	
20-62	5790-5791	-	
20-63	5791-5792	-	
20-64	5792-5793	-	
20-65	5793-5794	-	
20-66	5794-5795	-	
20-67	5795-5796	-	
20-68	5796-5797	-	
20-69	5797-5798	-	
20-70	5798-5799	-	
20-71	5799-5800	-	
20-72	5800-5801	-	
20-73	5801-5802	-	
20-74	5802-5803	-	

#Text=c. exit the psql command line by pressing Ctrl+d or typing \\q and pressing Enter. 1.3 Run synthetic workload with automatic capture. a. Open a terminal window in Cloud9 and run pgbench (a PostgreSQL benchmarking tool) to generate a simulated workload, which runs same queries for a specified period. With automatic capture enabled, QPM captures plans for each query that runs at least twice.
21-1	5804-5805	c	
21-2	5805-5806	.	
21-3	5807-5811	exit	
21-4	5812-5815	the	
21-5	5816-5820	psql	
21-6	5821-5828	command	
21-7	5829-5833	line	
21-8	5834-5836	by	
21-9	5837-5845	pressing	
21-10	5846-5850	Ctrl	
21-11	5850-5851	+	
21-12	5851-5852	d	
21-13	5853-5855	or	
21-14	5856-5862	typing	
21-15	5863-5864	\	
21-16	5864-5865	q	
21-17	5866-5869	and	
21-18	5870-5878	pressing	
21-19	5879-5884	Enter	
21-20	5884-5885	.	
21-21	5886-5889	1.3	
21-22	5890-5893	Run	
21-23	5894-5903	synthetic	
21-24	5904-5912	workload	
21-25	5913-5917	with	
21-26	5918-5927	automatic	
21-27	5928-5935	capture	
21-28	5935-5936	.	
21-29	5937-5938	a	
21-30	5938-5939	.	
21-31	5940-5944	Open	
21-32	5945-5946	a	
21-33	5947-5955	terminal	
21-34	5956-5962	window	
21-35	5963-5965	in	
21-36	5966-5972	Cloud9	
21-37	5973-5976	and	
21-38	5977-5980	run	
21-39	5981-5988	pgbench	
21-40	5989-5990	(	
21-41	5990-5991	a	
21-42	5992-6002	PostgreSQL	
21-43	6003-6015	benchmarking	
21-44	6016-6020	tool	
21-45	6020-6021	)	
21-46	6022-6024	to	
21-47	6025-6033	generate	
21-48	6034-6035	a	
21-49	6036-6045	simulated	
21-50	6046-6054	workload	
21-51	6054-6055	,	
21-52	6056-6061	which	
21-53	6062-6066	runs	
21-54	6067-6071	same	
21-55	6072-6079	queries	
21-56	6080-6083	for	
21-57	6084-6085	a	
21-58	6086-6095	specified	
21-59	6096-6102	period	
21-60	6102-6103	.	
21-61	6104-6108	With	
21-62	6109-6118	automatic	
21-63	6119-6126	capture	
21-64	6127-6134	enabled	
21-65	6134-6135	,	
21-66	6136-6139	QPM	
21-67	6140-6148	captures	
21-68	6149-6154	plans	
21-69	6155-6158	for	
21-70	6159-6163	each	
21-71	6164-6169	query	
21-72	6170-6174	that	
21-73	6175-6179	runs	
21-74	6180-6182	at	
21-75	6183-6188	least	
21-76	6189-6194	twice	
21-77	6194-6195	.	

#Text=pgbench --progress-timestamp -M prepared -n -T 100 -P 1 -c 500 -j 500 -b tpcb-like@1 -b select-only@20 b. Open another terminal window on Cloud9 to query apg_plan_mgmt.dba_plans table to view the managed statements and the execution plans for the SQL statements started with the pgbench tool.
22-1	6196-6203	pgbench	
22-2	6204-6205	-	
22-3	6205-6206	-	
22-4	6206-6224	progress-timestamp	
22-5	6225-6226	-	
22-6	6226-6227	M	
22-7	6228-6236	prepared	
22-8	6237-6238	-	
22-9	6238-6239	n	
22-10	6240-6241	-	
22-11	6241-6242	T	
22-12	6243-6246	100	
22-13	6247-6248	-	
22-14	6248-6249	P	
22-15	6250-6251	1	
22-16	6252-6253	-	
22-17	6253-6254	c	
22-18	6255-6258	500	
22-19	6259-6260	-	
22-20	6260-6261	j	
22-21	6262-6265	500	
22-22	6266-6267	-	
22-23	6267-6268	b	
22-24	6269-6278	tpcb-like	
22-25	6278-6279	@	
22-26	6279-6280	1	
22-27	6281-6282	-	
22-28	6282-6283	b	
22-29	6284-6295	select-only	
22-30	6295-6296	@	
22-31	6296-6298	20	
22-32	6299-6300	b	
22-33	6300-6301	.	
22-34	6302-6306	Open	
22-35	6307-6314	another	
22-36	6315-6323	terminal	
22-37	6324-6330	window	
22-38	6331-6333	on	
22-39	6334-6340	Cloud9	
22-40	6341-6343	to	
22-41	6344-6349	query	
22-42	6350-6373	apg_plan_mgmt.dba_plans	
22-43	6374-6379	table	
22-44	6380-6382	to	
22-45	6383-6387	view	
22-46	6388-6391	the	
22-47	6392-6399	managed	
22-48	6400-6410	statements	
22-49	6411-6414	and	
22-50	6415-6418	the	
22-51	6419-6428	execution	
22-52	6429-6434	plans	
22-53	6435-6438	for	
22-54	6439-6442	the	
22-55	6443-6446	SQL	
22-56	6447-6457	statements	
22-57	6458-6465	started	
22-58	6466-6470	with	
22-59	6471-6474	the	
22-60	6475-6482	pgbench	
22-61	6483-6487	tool	
22-62	6487-6488	.	

#Text=Then run the following commands: psql SELECT sql_hash, plan_hash, status, enabled, sql_text FROM apg_plan_mgmt.dba_plans; sql_hash
23-1	6489-6493	Then	
23-2	6494-6497	run	
23-3	6498-6501	the	
23-4	6502-6511	following	
23-5	6512-6520	commands	
23-6	6520-6521	:	
23-7	6522-6526	psql	
23-8	6527-6533	SELECT	
23-9	6534-6542	sql_hash	
23-10	6542-6543	,	
23-11	6544-6553	plan_hash	
23-12	6553-6554	,	
23-13	6555-6561	status	
23-14	6561-6562	,	
23-15	6563-6570	enabled	
23-16	6570-6571	,	
23-17	6572-6580	sql_text	
23-18	6581-6585	FROM	
23-19	6586-6609	apg_plan_mgmt.dba_plans	
23-20	6609-6610	;	
23-21	6611-6619	sql_hash	

#Text=plan_hash status | enabled | sql_text -------------+-------------+----------+---------+-------------
24-1	6620-6629	plan_hash	
24-2	6630-6636	status	
24-3	6637-6638	|	
24-4	6639-6646	enabled	
24-5	6647-6648	|	
24-6	6649-6657	sql_text	
24-7	6658-6659	-	
24-8	6659-6660	-	
24-9	6660-6661	-	
24-10	6661-6662	-	
24-11	6662-6663	-	
24-12	6663-6664	-	
24-13	6664-6665	-	
24-14	6665-6666	-	
24-15	6666-6667	-	
24-16	6667-6668	-	
24-17	6668-6669	-	
24-18	6669-6670	-	
24-19	6670-6671	-	
24-20	6671-6672	+	
24-21	6672-6673	-	
24-22	6673-6674	-	
24-23	6674-6675	-	
24-24	6675-6676	-	
24-25	6676-6677	-	
24-26	6677-6678	-	
24-27	6678-6679	-	
24-28	6679-6680	-	
24-29	6680-6681	-	
24-30	6681-6682	-	
24-31	6682-6683	-	
24-32	6683-6684	-	
24-33	6684-6685	-	
24-34	6685-6686	+	
24-35	6686-6687	-	
24-36	6687-6688	-	
24-37	6688-6689	-	
24-38	6689-6690	-	
24-39	6690-6691	-	
24-40	6691-6692	-	
24-41	6692-6693	-	
24-42	6693-6694	-	
24-43	6694-6695	-	
24-44	6695-6696	-	
24-45	6696-6697	+	
24-46	6697-6698	-	
24-47	6698-6699	-	
24-48	6699-6700	-	
24-49	6700-6701	-	
24-50	6701-6702	-	
24-51	6702-6703	-	
24-52	6703-6704	-	
24-53	6704-6705	-	
24-54	6705-6706	-	
24-55	6706-6707	+	
24-56	6707-6708	-	
24-57	6708-6709	-	
24-58	6709-6710	-	
24-59	6710-6711	-	
24-60	6711-6712	-	
24-61	6712-6713	-	
24-62	6713-6714	-	
24-63	6714-6715	-	
24-64	6715-6716	-	
24-65	6716-6717	-	
24-66	6717-6718	-	
24-67	6718-6719	-	
24-68	6719-6720	-	

#Text=474705734 | 695325866 | Approved | t | SELECT abalance FROM pgbench_accounts WHERE aid = $1; -2033469270 | -1987991358 | Approved | t
25-1	6721-6730	474705734	
25-2	6731-6732	|	
25-3	6733-6742	695325866	
25-4	6743-6744	|	
25-5	6745-6753	Approved	
25-6	6754-6755	|	
25-7	6756-6757	t	
25-8	6758-6759	|	
25-9	6760-6766	SELECT	
25-10	6767-6775	abalance	
25-11	6776-6780	FROM	
25-12	6781-6797	pgbench_accounts	
25-13	6798-6803	WHERE	
25-14	6804-6807	aid	
25-15	6808-6809	=	
25-16	6810-6812	$1	
25-17	6812-6813	;	
25-18	6814-6815	-	
25-19	6815-6825	2033469270	
25-20	6826-6827	|	
25-21	6828-6829	-	
25-22	6829-6839	1987991358	
25-23	6840-6841	|	
25-24	6842-6850	Approved	
25-25	6851-6852	|	
25-26	6853-6854	t	

#Text=| UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2; -1677381765 | -225188843 | Approved | t | UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2; (3 rows)
26-1	6855-6856	|	
26-2	6857-6863	UPDATE	
26-3	6864-6879	pgbench_tellers	
26-4	6880-6883	SET	
26-5	6884-6892	tbalance	
26-6	6893-6894	=	
26-7	6895-6903	tbalance	
26-8	6904-6905	+	
26-9	6906-6908	$1	
26-10	6909-6914	WHERE	
26-11	6915-6918	tid	
26-12	6919-6920	=	
26-13	6921-6923	$2	
26-14	6923-6924	;	
26-15	6925-6926	-	
26-16	6926-6936	1677381765	
26-17	6937-6938	|	
26-18	6939-6940	-	
26-19	6940-6949	225188843	
26-20	6950-6951	|	
26-21	6952-6960	Approved	
26-22	6961-6962	|	
26-23	6963-6964	t	
26-24	6965-6966	|	
26-25	6967-6973	UPDATE	
26-26	6974-6990	pgbench_branches	
26-27	6991-6994	SET	
26-28	6995-7003	bbalance	
26-29	7004-7005	=	
26-30	7006-7014	bbalance	
26-31	7015-7016	+	
26-32	7017-7019	$1	
26-33	7020-7025	WHERE	
26-34	7026-7029	bid	
26-35	7030-7031	=	
26-36	7032-7034	$2	
26-37	7034-7035	;	
26-38	7036-7037	(	
26-39	7037-7038	3	
26-40	7039-7043	rows	
26-41	7043-7044	)	

#Text=c. Turn off automatic capture of query plans. Capturing all plans with automatic capture has little runtime overhead and can be enabled in production. We are turning off the automatic capture to make sure that we don’t capture SQL statements outside the pgbench workload. This can be turned off by setting the apg_plan_mgmt.capture_plan_baselines parameter to off from the DB parameter group.
27-1	7045-7046	c	
27-2	7046-7047	.	
27-3	7048-7052	Turn	
27-4	7053-7056	off	
27-5	7057-7066	automatic	
27-6	7067-7074	capture	
27-7	7075-7077	of	
27-8	7078-7083	query	
27-9	7084-7089	plans	
27-10	7089-7090	.	
27-11	7091-7100	Capturing	
27-12	7101-7104	all	
27-13	7105-7110	plans	
27-14	7111-7115	with	
27-15	7116-7125	automatic	
27-16	7126-7133	capture	
27-17	7134-7137	has	
27-18	7138-7144	little	
27-19	7145-7152	runtime	
27-20	7153-7161	overhead	
27-21	7162-7165	and	
27-22	7166-7169	can	
27-23	7170-7172	be	
27-24	7173-7180	enabled	
27-25	7181-7183	in	
27-26	7184-7194	production	
27-27	7194-7195	.	
27-28	7196-7198	We	
27-29	7199-7202	are	
27-30	7203-7210	turning	
27-31	7211-7214	off	
27-32	7215-7218	the	
27-33	7219-7228	automatic	
27-34	7229-7236	capture	
27-35	7237-7239	to	
27-36	7240-7244	make	
27-37	7245-7249	sure	
27-38	7250-7254	that	
27-39	7255-7257	we	
27-40	7258-7261	don	
27-41	7261-7262	’	
27-42	7262-7263	t	
27-43	7264-7271	capture	
27-44	7272-7275	SQL	
27-45	7276-7286	statements	
27-46	7287-7294	outside	
27-47	7295-7298	the	
27-48	7299-7306	pgbench	
27-49	7307-7315	workload	
27-50	7315-7316	.	
27-51	7317-7321	This	
27-52	7322-7325	can	
27-53	7326-7328	be	
27-54	7329-7335	turned	
27-55	7336-7339	off	
27-56	7340-7342	by	
27-57	7343-7350	setting	
27-58	7351-7354	the	
27-59	7355-7391	apg_plan_mgmt.capture_plan_baselines	
27-60	7392-7401	parameter	
27-61	7402-7404	to	
27-62	7405-7408	off	
27-63	7409-7413	from	
27-64	7414-7417	the	
27-65	7418-7420	DB	
27-66	7421-7430	parameter	
27-67	7431-7436	group	
27-68	7436-7437	.	

#Text=Verify parameter settings using PSQL. show apg_plan_mgmt.capture_plan_baselines; apg_plan_mgmt.capture_plan_baselines --------------------------------------
28-1	7438-7444	Verify	
28-2	7445-7454	parameter	
28-3	7455-7463	settings	
28-4	7464-7469	using	
28-5	7470-7474	PSQL	
28-6	7474-7475	.	
28-7	7476-7480	show	
28-8	7481-7517	apg_plan_mgmt.capture_plan_baselines	
28-9	7517-7518	;	
28-10	7519-7555	apg_plan_mgmt.capture_plan_baselines	
28-11	7556-7557	-	
28-12	7557-7558	-	
28-13	7558-7559	-	
28-14	7559-7560	-	
28-15	7560-7561	-	
28-16	7561-7562	-	
28-17	7562-7563	-	
28-18	7563-7564	-	
28-19	7564-7565	-	
28-20	7565-7566	-	
28-21	7566-7567	-	
28-22	7567-7568	-	
28-23	7568-7569	-	
28-24	7569-7570	-	
28-25	7570-7571	-	
28-26	7571-7572	-	
28-27	7572-7573	-	
28-28	7573-7574	-	
28-29	7574-7575	-	
28-30	7575-7576	-	
28-31	7576-7577	-	
28-32	7577-7578	-	
28-33	7578-7579	-	
28-34	7579-7580	-	
28-35	7580-7581	-	
28-36	7581-7582	-	
28-37	7582-7583	-	
28-38	7583-7584	-	
28-39	7584-7585	-	
28-40	7585-7586	-	
28-41	7586-7587	-	
28-42	7587-7588	-	
28-43	7588-7589	-	
28-44	7589-7590	-	
28-45	7590-7591	-	
28-46	7591-7592	-	
28-47	7592-7593	-	
28-48	7593-7594	-	

#Text=Off d. Let’s verify that the execution plan for one of the managed statements is same as the plan captured by QPM. Execute explain plan on one of the managed statements. The explain plan output shows that the SQL hash and the plan hash matches with the QPM approved plan for that statement.
29-1	7595-7598	Off	
29-2	7599-7600	d	
29-3	7600-7601	.	
29-4	7602-7605	Let	
29-5	7605-7606	’	
29-6	7606-7607	s	
29-7	7608-7614	verify	
29-8	7615-7619	that	
29-9	7620-7623	the	
29-10	7624-7633	execution	
29-11	7634-7638	plan	
29-12	7639-7642	for	
29-13	7643-7646	one	
29-14	7647-7649	of	
29-15	7650-7653	the	
29-16	7654-7661	managed	
29-17	7662-7672	statements	
29-18	7673-7675	is	
29-19	7676-7680	same	
29-20	7681-7683	as	
29-21	7684-7687	the	
29-22	7688-7692	plan	
29-23	7693-7701	captured	
29-24	7702-7704	by	
29-25	7705-7708	QPM	
29-26	7708-7709	.	
29-27	7710-7717	Execute	
29-28	7718-7725	explain	
29-29	7726-7730	plan	
29-30	7731-7733	on	
29-31	7734-7737	one	
29-32	7738-7740	of	
29-33	7741-7744	the	
29-34	7745-7752	managed	
29-35	7753-7763	statements	
29-36	7763-7764	.	
29-37	7765-7768	The	
29-38	7769-7776	explain	
29-39	7777-7781	plan	
29-40	7782-7788	output	
29-41	7789-7794	shows	
29-42	7795-7799	that	
29-43	7800-7803	the	
29-44	7804-7807	SQL	
29-45	7808-7812	hash	
29-46	7813-7816	and	
29-47	7817-7820	the	
29-48	7821-7825	plan	
29-49	7826-7830	hash	
29-50	7831-7838	matches	
29-51	7839-7843	with	
29-52	7844-7847	the	
29-53	7848-7851	QPM	
29-54	7852-7860	approved	
29-55	7861-7865	plan	
29-56	7866-7869	for	
29-57	7870-7874	that	
29-58	7875-7884	statement	
29-59	7884-7885	.	

#Text=explain (hashes true) UPDATE pgbench_tellers SET tbalance = tbalance + 100 WHERE tid = 200; Output: QUERY PLAN ----------------------------------------------------------------------
30-1	7886-7893	explain	
30-2	7894-7895	(	
30-3	7895-7901	hashes	
30-4	7902-7906	true	
30-5	7906-7907	)	
30-6	7908-7914	UPDATE	
30-7	7915-7930	pgbench_tellers	
30-8	7931-7934	SET	
30-9	7935-7943	tbalance	
30-10	7944-7945	=	
30-11	7946-7954	tbalance	
30-12	7955-7956	+	
30-13	7957-7960	100	
30-14	7961-7966	WHERE	
30-15	7967-7970	tid	
30-16	7971-7972	=	
30-17	7973-7976	200	
30-18	7976-7977	;	
30-19	7978-7984	Output	
30-20	7984-7985	:	
30-21	7986-7991	QUERY	
30-22	7992-7996	PLAN	
30-23	7997-7998	-	
30-24	7998-7999	-	
30-25	7999-8000	-	
30-26	8000-8001	-	
30-27	8001-8002	-	
30-28	8002-8003	-	
30-29	8003-8004	-	
30-30	8004-8005	-	
30-31	8005-8006	-	
30-32	8006-8007	-	
30-33	8007-8008	-	
30-34	8008-8009	-	
30-35	8009-8010	-	
30-36	8010-8011	-	
30-37	8011-8012	-	
30-38	8012-8013	-	
30-39	8013-8014	-	
30-40	8014-8015	-	
30-41	8015-8016	-	
30-42	8016-8017	-	
30-43	8017-8018	-	
30-44	8018-8019	-	
30-45	8019-8020	-	
30-46	8020-8021	-	
30-47	8021-8022	-	
30-48	8022-8023	-	
30-49	8023-8024	-	
30-50	8024-8025	-	
30-51	8025-8026	-	
30-52	8026-8027	-	
30-53	8027-8028	-	
30-54	8028-8029	-	
30-55	8029-8030	-	
30-56	8030-8031	-	
30-57	8031-8032	-	
30-58	8032-8033	-	
30-59	8033-8034	-	
30-60	8034-8035	-	
30-61	8035-8036	-	
30-62	8036-8037	-	
30-63	8037-8038	-	
30-64	8038-8039	-	
30-65	8039-8040	-	
30-66	8040-8041	-	
30-67	8041-8042	-	
30-68	8042-8043	-	
30-69	8043-8044	-	
30-70	8044-8045	-	
30-71	8045-8046	-	
30-72	8046-8047	-	
30-73	8047-8048	-	
30-74	8048-8049	-	
30-75	8049-8050	-	
30-76	8050-8051	-	
30-77	8051-8052	-	
30-78	8052-8053	-	
30-79	8053-8054	-	
30-80	8054-8055	-	
30-81	8055-8056	-	
30-82	8056-8057	-	
30-83	8057-8058	-	
30-84	8058-8059	-	
30-85	8059-8060	-	
30-86	8060-8061	-	
30-87	8061-8062	-	
30-88	8062-8063	-	
30-89	8063-8064	-	
30-90	8064-8065	-	
30-91	8065-8066	-	
30-92	8066-8067	-	

#Text=Update on pgbench_tellers (cost=0.14..8.16 rows=1 width=358) Index Scan using pgbench_tellers_pkey on pgbench_tellers (cost=0.14..8.16 rows=1 width=358)
31-1	8068-8074	Update	
31-2	8075-8077	on	
31-3	8078-8093	pgbench_tellers	
31-4	8094-8095	(	
31-5	8095-8099	cost	
31-6	8099-8100	=	
31-7	8100-8104	0.14	
31-8	8104-8105	.	
31-9	8105-8110	.8.16	
31-10	8111-8115	rows	
31-11	8115-8116	=	
31-12	8116-8117	1	
31-13	8118-8123	width	
31-14	8123-8124	=	
31-15	8124-8127	358	
31-16	8127-8128	)	
31-17	8129-8134	Index	
31-18	8135-8139	Scan	
31-19	8140-8145	using	
31-20	8146-8166	pgbench_tellers_pkey	
31-21	8167-8169	on	
31-22	8170-8185	pgbench_tellers	
31-23	8186-8187	(	
31-24	8187-8191	cost	
31-25	8191-8192	=	
31-26	8192-8196	0.14	
31-27	8196-8197	.	
31-28	8197-8202	.8.16	
31-29	8203-8207	rows	
31-30	8207-8208	=	
31-31	8208-8209	1	
31-32	8210-8215	width	
31-33	8215-8216	=	
31-34	8216-8219	358	
31-35	8219-8220	)	

#Text=Index Cond: (tid = 200) SQL Hash: -2033469270, Plan Hash: -1987991358 SQL Hash and Plan Hash values could vary during your lab runs, so please note your specific values for later use in lab.
32-1	8221-8226	Index	
32-2	8227-8231	Cond	
32-3	8231-8232	:	
32-4	8233-8234	(	
32-5	8234-8237	tid	
32-6	8238-8239	=	
32-7	8240-8243	200	
32-8	8243-8244	)	
32-9	8245-8248	SQL	
32-10	8249-8253	Hash	
32-11	8253-8254	:	
32-12	8255-8256	-	
32-13	8256-8266	2033469270	
32-14	8266-8267	,	
32-15	8268-8272	Plan	
32-16	8273-8277	Hash	
32-17	8277-8278	:	
32-18	8279-8280	-	
32-19	8280-8290	1987991358	
32-20	8291-8294	SQL	
32-21	8295-8299	Hash	
32-22	8300-8303	and	
32-23	8304-8308	Plan	
32-24	8309-8313	Hash	
32-25	8314-8320	values	
32-26	8321-8326	could	
32-27	8327-8331	vary	
32-28	8332-8338	during	
32-29	8339-8343	your	
32-30	8344-8347	lab	
32-31	8348-8352	runs	
32-32	8352-8353	,	
32-33	8354-8356	so	
32-34	8357-8363	please	
32-35	8364-8368	note	
32-36	8369-8373	your	
32-37	8374-8382	specific	
32-38	8383-8389	values	
32-39	8390-8393	for	
32-40	8394-8399	later	
32-41	8400-8403	use	
32-42	8404-8406	in	
32-43	8407-8410	lab	
32-44	8410-8411	.	

#Text=In addition to automatic plan capture, QPM has manual plan capture capability, which offers a mechanism to capture execution plans for known problematic queries. Capturing the plans automatically is recommended generally. However, there are situations where capturing plans manually would be the best option, such as: You don’t want to enable plan management at the Database level, but you do want to control a few critical SQL statements only. You want to save the plan for a specific set of literals or parameter values that are causing a performance problem. 2. QPM Plan adaptability with plan evolution mechanism
33-1	8412-8414	In	
33-2	8415-8423	addition	
33-3	8424-8426	to	
33-4	8427-8436	automatic	
33-5	8437-8441	plan	
33-6	8442-8449	capture	
33-7	8449-8450	,	
33-8	8451-8454	QPM	
33-9	8455-8458	has	
33-10	8459-8465	manual	
33-11	8466-8470	plan	
33-12	8471-8478	capture	
33-13	8479-8489	capability	
33-14	8489-8490	,	
33-15	8491-8496	which	
33-16	8497-8503	offers	
33-17	8504-8505	a	
33-18	8506-8515	mechanism	
33-19	8516-8518	to	
33-20	8519-8526	capture	
33-21	8527-8536	execution	
33-22	8537-8542	plans	
33-23	8543-8546	for	
33-24	8547-8552	known	
33-25	8553-8564	problematic	
33-26	8565-8572	queries	
33-27	8572-8573	.	
33-28	8574-8583	Capturing	
33-29	8584-8587	the	
33-30	8588-8593	plans	
33-31	8594-8607	automatically	
33-32	8608-8610	is	
33-33	8611-8622	recommended	
33-34	8623-8632	generally	
33-35	8632-8633	.	
33-36	8634-8641	However	
33-37	8641-8642	,	
33-38	8643-8648	there	
33-39	8649-8652	are	
33-40	8653-8663	situations	
33-41	8664-8669	where	
33-42	8670-8679	capturing	
33-43	8680-8685	plans	
33-44	8686-8694	manually	
33-45	8695-8700	would	
33-46	8701-8703	be	
33-47	8704-8707	the	
33-48	8708-8712	best	
33-49	8713-8719	option	
33-50	8719-8720	,	
33-51	8721-8725	such	
33-52	8726-8728	as	
33-53	8728-8729	:	
33-54	8730-8733	You	
33-55	8734-8737	don	
33-56	8737-8738	’	
33-57	8738-8739	t	
33-58	8740-8744	want	
33-59	8745-8747	to	
33-60	8748-8754	enable	
33-61	8755-8759	plan	
33-62	8760-8770	management	
33-63	8771-8773	at	
33-64	8774-8777	the	
33-65	8778-8786	Database	
33-66	8787-8792	level	
33-67	8792-8793	,	
33-68	8794-8797	but	
33-69	8798-8801	you	
33-70	8802-8804	do	
33-71	8805-8809	want	
33-72	8810-8812	to	
33-73	8813-8820	control	
33-74	8821-8822	a	
33-75	8823-8826	few	
33-76	8827-8835	critical	
33-77	8836-8839	SQL	
33-78	8840-8850	statements	
33-79	8851-8855	only	
33-80	8855-8856	.	
33-81	8857-8860	You	
33-82	8861-8865	want	
33-83	8866-8868	to	
33-84	8869-8873	save	
33-85	8874-8877	the	
33-86	8878-8882	plan	
33-87	8883-8886	for	
33-88	8887-8888	a	
33-89	8889-8897	specific	
33-90	8898-8901	set	
33-91	8902-8904	of	
33-92	8905-8913	literals	
33-93	8914-8916	or	
33-94	8917-8926	parameter	
33-95	8927-8933	values	
33-96	8934-8938	that	
33-97	8939-8942	are	
33-98	8943-8950	causing	
33-99	8951-8952	a	
33-100	8953-8964	performance	
33-101	8965-8972	problem	
33-102	8972-8973	.	
33-103	8974-8975	2	
33-104	8975-8976	.	
33-105	8977-8980	QPM	
33-106	8981-8985	Plan	
33-107	8986-8998	adaptability	
33-108	8999-9003	with	
33-109	9004-9008	plan	
33-110	9009-9018	evolution	
33-111	9019-9028	mechanism	

#Text=If the optimizer’s generated plan is not a stored plan, the optimizer captures and stores it as a new unapproved plan to preserve stability for the QPM-managed SQL statements. Query plan management provides techniques and functions to add, maintain, and improve execution plans and thus provides Plan adaptability. Users can instruct QPM on demand or periodically to evolve all the stored plans to see if there is a better minimum cost plan available than any of the approved plans.
34-1	9029-9031	If	
34-2	9032-9035	the	
34-3	9036-9045	optimizer	
34-4	9045-9046	’	
34-5	9046-9047	s	
34-6	9048-9057	generated	
34-7	9058-9062	plan	
34-8	9063-9065	is	
34-9	9066-9069	not	
34-10	9070-9071	a	
34-11	9072-9078	stored	
34-12	9079-9083	plan	
34-13	9083-9084	,	
34-14	9085-9088	the	
34-15	9089-9098	optimizer	
34-16	9099-9107	captures	
34-17	9108-9111	and	
34-18	9112-9118	stores	
34-19	9119-9121	it	
34-20	9122-9124	as	
34-21	9125-9126	a	
34-22	9127-9130	new	
34-23	9131-9141	unapproved	
34-24	9142-9146	plan	
34-25	9147-9149	to	
34-26	9150-9158	preserve	
34-27	9159-9168	stability	
34-28	9169-9172	for	
34-29	9173-9176	the	
34-30	9177-9188	QPM-managed	
34-31	9189-9192	SQL	
34-32	9193-9203	statements	
34-33	9203-9204	.	
34-34	9205-9210	Query	
34-35	9211-9215	plan	
34-36	9216-9226	management	
34-37	9227-9235	provides	
34-38	9236-9246	techniques	
34-39	9247-9250	and	
34-40	9251-9260	functions	
34-41	9261-9263	to	
34-42	9264-9267	add	
34-43	9267-9268	,	
34-44	9269-9277	maintain	
34-45	9277-9278	,	
34-46	9279-9282	and	
34-47	9283-9290	improve	
34-48	9291-9300	execution	
34-49	9301-9306	plans	
34-50	9307-9310	and	
34-51	9311-9315	thus	
34-52	9316-9324	provides	
34-53	9325-9329	Plan	
34-54	9330-9342	adaptability	
34-55	9342-9343	.	
34-56	9344-9349	Users	
34-57	9350-9353	can	
34-58	9354-9362	instruct	
34-59	9363-9366	QPM	
34-60	9367-9369	on	
34-61	9370-9376	demand	
34-62	9377-9379	or	
34-63	9380-9392	periodically	
34-64	9393-9395	to	
34-65	9396-9402	evolve	
34-66	9403-9406	all	
34-67	9407-9410	the	
34-68	9411-9417	stored	
34-69	9418-9423	plans	
34-70	9424-9426	to	
34-71	9427-9430	see	
34-72	9431-9433	if	
34-73	9434-9439	there	
34-74	9440-9442	is	
34-75	9443-9444	a	
34-76	9445-9451	better	
34-77	9452-9459	minimum	
34-78	9460-9464	cost	
34-79	9465-9469	plan	
34-80	9470-9479	available	
34-81	9480-9484	than	
34-82	9485-9488	any	
34-83	9489-9491	of	
34-84	9492-9495	the	
34-85	9496-9504	approved	
34-86	9505-9510	plans	
34-87	9510-9511	.	

#Text=QPM provides apg_plan_mgmt.evolve_plan_baselines function to compare plans based on their actual performance. Depending on the outcome of your performance experiments, you can change a plan’s status from unapproved to either approved or rejected. You can instead decide to use the apg_plan_mgmt.evolve_plan_baselines function to temporarily disable a plan if it does not meet your requirements. For additional details about the QPM Plan evolution, see Evaluating Plan Performance. For the first use case, we’ll walk through an example on how QPM helps ensure plan stability where various changes can result in plan regression.
35-1	9512-9515	QPM	
35-2	9516-9524	provides	
35-3	9525-9560	apg_plan_mgmt.evolve_plan_baselines	
35-4	9561-9569	function	
35-5	9570-9572	to	
35-6	9573-9580	compare	
35-7	9581-9586	plans	
35-8	9587-9592	based	
35-9	9593-9595	on	
35-10	9596-9601	their	
35-11	9602-9608	actual	
35-12	9609-9620	performance	
35-13	9620-9621	.	
35-14	9622-9631	Depending	
35-15	9632-9634	on	
35-16	9635-9638	the	
35-17	9639-9646	outcome	
35-18	9647-9649	of	
35-19	9650-9654	your	
35-20	9655-9666	performance	
35-21	9667-9678	experiments	
35-22	9678-9679	,	
35-23	9680-9683	you	
35-24	9684-9687	can	
35-25	9688-9694	change	
35-26	9695-9696	a	
35-27	9697-9701	plan	
35-28	9701-9702	’	
35-29	9702-9703	s	
35-30	9704-9710	status	
35-31	9711-9715	from	
35-32	9716-9726	unapproved	
35-33	9727-9729	to	
35-34	9730-9736	either	
35-35	9737-9745	approved	
35-36	9746-9748	or	
35-37	9749-9757	rejected	
35-38	9757-9758	.	
35-39	9759-9762	You	
35-40	9763-9766	can	
35-41	9767-9774	instead	
35-42	9775-9781	decide	
35-43	9782-9784	to	
35-44	9785-9788	use	
35-45	9789-9792	the	
35-46	9793-9828	apg_plan_mgmt.evolve_plan_baselines	
35-47	9829-9837	function	
35-48	9838-9840	to	
35-49	9841-9852	temporarily	
35-50	9853-9860	disable	
35-51	9861-9862	a	
35-52	9863-9867	plan	
35-53	9868-9870	if	
35-54	9871-9873	it	
35-55	9874-9878	does	
35-56	9879-9882	not	
35-57	9883-9887	meet	
35-58	9888-9892	your	
35-59	9893-9905	requirements	
35-60	9905-9906	.	
35-61	9907-9910	For	
35-62	9911-9921	additional	
35-63	9922-9929	details	
35-64	9930-9935	about	
35-65	9936-9939	the	
35-66	9940-9943	QPM	
35-67	9944-9948	Plan	
35-68	9949-9958	evolution	
35-69	9958-9959	,	
35-70	9960-9963	see	
35-71	9964-9974	Evaluating	
35-72	9975-9979	Plan	
35-73	9980-9991	Performance	
35-74	9991-9992	.	
35-75	9993-9996	For	
35-76	9997-10000	the	
35-77	10001-10006	first	
35-78	10007-10010	use	
35-79	10011-10015	case	
35-80	10015-10016	,	
35-81	10017-10019	we	
35-82	10019-10020	’	
35-83	10020-10022	ll	
35-84	10023-10027	walk	
35-85	10028-10035	through	
35-86	10036-10038	an	
35-87	10039-10046	example	
35-88	10047-10049	on	
35-89	10050-10053	how	
35-90	10054-10057	QPM	
35-91	10058-10063	helps	
35-92	10064-10070	ensure	
35-93	10071-10075	plan	
35-94	10076-10085	stability	
35-95	10086-10091	where	
35-96	10092-10099	various	
35-97	10100-10107	changes	
35-98	10108-10111	can	
35-99	10112-10118	result	
35-100	10119-10121	in	
35-101	10122-10126	plan	
35-102	10127-10137	regression	
35-103	10137-10138	.	

#Text=In most cases, you set up QPM to use automatic plan capture so that plans are captured for all statements that run two or more times. However, you can also capture plans for a specific set of statements that you specify manually. To do this, you set apg_plan_mgmt.capture_plan_baselines = off in the DB parameter group (which is the default) and apg_plan_mgmt.capture_plan_baselines = manual at the session level.
36-1	10139-10141	In	
36-2	10142-10146	most	
36-3	10147-10152	cases	
36-4	10152-10153	,	
36-5	10154-10157	you	
36-6	10158-10161	set	
36-7	10162-10164	up	
36-8	10165-10168	QPM	
36-9	10169-10171	to	
36-10	10172-10175	use	
36-11	10176-10185	automatic	
36-12	10186-10190	plan	
36-13	10191-10198	capture	
36-14	10199-10201	so	
36-15	10202-10206	that	
36-16	10207-10212	plans	
36-17	10213-10216	are	
36-18	10217-10225	captured	
36-19	10226-10229	for	
36-20	10230-10233	all	
36-21	10234-10244	statements	
36-22	10245-10249	that	
36-23	10250-10253	run	
36-24	10254-10257	two	
36-25	10258-10260	or	
36-26	10261-10265	more	
36-27	10266-10271	times	
36-28	10271-10272	.	
36-29	10273-10280	However	
36-30	10280-10281	,	
36-31	10282-10285	you	
36-32	10286-10289	can	
36-33	10290-10294	also	
36-34	10295-10302	capture	
36-35	10303-10308	plans	
36-36	10309-10312	for	
36-37	10313-10314	a	
36-38	10315-10323	specific	
36-39	10324-10327	set	
36-40	10328-10330	of	
36-41	10331-10341	statements	
36-42	10342-10346	that	
36-43	10347-10350	you	
36-44	10351-10358	specify	
36-45	10359-10367	manually	
36-46	10367-10368	.	
36-47	10369-10371	To	
36-48	10372-10374	do	
36-49	10375-10379	this	
36-50	10379-10380	,	
36-51	10381-10384	you	
36-52	10385-10388	set	
36-53	10389-10425	apg_plan_mgmt.capture_plan_baselines	
36-54	10426-10427	=	
36-55	10428-10431	off	
36-56	10432-10434	in	
36-57	10435-10438	the	
36-58	10439-10441	DB	
36-59	10442-10451	parameter	
36-60	10452-10457	group	
36-61	10458-10459	(	
36-62	10459-10464	which	
36-63	10465-10467	is	
36-64	10468-10471	the	
36-65	10472-10479	default	
36-66	10479-10480	)	
36-67	10481-10484	and	
36-68	10485-10521	apg_plan_mgmt.capture_plan_baselines	
36-69	10522-10523	=	
36-70	10524-10530	manual	
36-71	10531-10533	at	
36-72	10534-10537	the	
36-73	10538-10545	session	
36-74	10546-10551	level	
36-75	10551-10552	.	

#Text=a. Enable manual plan capture to instruct QPM to capture the execution plan of the desired SQL statements manually. SET apg_plan_mgmt.capture_plan_baselines = manual; b. Run explain plan for a specific query so that QPM can capture the execution plan (the following output for the explain plan is truncated for brevity). explain (hashes true)
37-1	10553-10554	a	
37-2	10554-10555	.	
37-3	10556-10562	Enable	
37-4	10563-10569	manual	
37-5	10570-10574	plan	
37-6	10575-10582	capture	
37-7	10583-10585	to	
37-8	10586-10594	instruct	
37-9	10595-10598	QPM	
37-10	10599-10601	to	
37-11	10602-10609	capture	
37-12	10610-10613	the	
37-13	10614-10623	execution	
37-14	10624-10628	plan	
37-15	10629-10631	of	
37-16	10632-10635	the	
37-17	10636-10643	desired	
37-18	10644-10647	SQL	
37-19	10648-10658	statements	
37-20	10659-10667	manually	
37-21	10667-10668	.	
37-22	10669-10672	SET	
37-23	10673-10709	apg_plan_mgmt.capture_plan_baselines	
37-24	10710-10711	=	
37-25	10712-10718	manual	
37-26	10718-10719	;	
37-27	10720-10721	b	
37-28	10721-10722	.	
37-29	10723-10726	Run	
37-30	10727-10734	explain	
37-31	10735-10739	plan	
37-32	10740-10743	for	
37-33	10744-10745	a	
37-34	10746-10754	specific	
37-35	10755-10760	query	
37-36	10761-10763	so	
37-37	10764-10768	that	
37-38	10769-10772	QPM	
37-39	10773-10776	can	
37-40	10777-10784	capture	
37-41	10785-10788	the	
37-42	10789-10798	execution	
37-43	10799-10803	plan	
37-44	10804-10805	(	
37-45	10805-10808	the	
37-46	10809-10818	following	
37-47	10819-10825	output	
37-48	10826-10829	for	
37-49	10830-10833	the	
37-50	10834-10841	explain	
37-51	10842-10846	plan	
37-52	10847-10849	is	
37-53	10850-10859	truncated	
37-54	10860-10863	for	
37-55	10864-10871	brevity	
37-56	10871-10872	)	
37-57	10872-10873	.	
37-58	10874-10881	explain	
37-59	10882-10883	(	
37-60	10883-10889	hashes	
37-61	10890-10894	true	
37-62	10894-10895	)	

#Text=SELECT Sum(delta), Sum(bbalance) FROM pgbench_history h, pgbench_branches b WHERE b.bid = h.bid AND b.bid IN ( 1, 2, 3 )
38-1	10896-10902	SELECT	
38-2	10903-10906	Sum	
38-3	10906-10907	(	
38-4	10907-10912	delta	
38-5	10912-10913	)	
38-6	10913-10914	,	
38-7	10915-10918	Sum	
38-8	10918-10919	(	
38-9	10919-10927	bbalance	
38-10	10927-10928	)	
38-11	10929-10933	FROM	
38-12	10934-10949	pgbench_history	
38-13	10950-10951	h	
38-14	10951-10952	,	
38-15	10953-10969	pgbench_branches	
38-16	10970-10971	b	
38-17	10972-10977	WHERE	
38-18	10978-10983	b.bid	
38-19	10984-10985	=	
38-20	10986-10991	h.bid	
38-21	10992-10995	AND	
38-22	10996-11001	b.bid	
38-23	11002-11004	IN	
38-24	11005-11006	(	
38-25	11007-11008	1	
38-26	11008-11009	,	
38-27	11010-11011	2	
38-28	11011-11012	,	
38-29	11013-11014	3	
38-30	11015-11016	)	

#Text=AND mtime BETWEEN (SELECT Min(mtime) FROM pgbench_history mn) AND (SELECT Max(mtime) FROM pgbench_history mx); Output: QUERY PLAN
39-1	11017-11020	AND	
39-2	11021-11026	mtime	
39-3	11027-11034	BETWEEN	
39-4	11035-11036	(	
39-5	11036-11042	SELECT	
39-6	11043-11046	Min	
39-7	11046-11047	(	
39-8	11047-11052	mtime	
39-9	11052-11053	)	
39-10	11054-11058	FROM	
39-11	11059-11074	pgbench_history	
39-12	11075-11077	mn	
39-13	11077-11078	)	
39-14	11079-11082	AND	
39-15	11083-11084	(	
39-16	11084-11090	SELECT	
39-17	11091-11094	Max	
39-18	11094-11095	(	
39-19	11095-11100	mtime	
39-20	11100-11101	)	
39-21	11102-11106	FROM	
39-22	11107-11122	pgbench_history	
39-23	11123-11125	mx	
39-24	11125-11126	)	
39-25	11126-11127	;	
39-26	11128-11134	Output	
39-27	11134-11135	:	
39-28	11136-11141	QUERY	
39-29	11142-11146	PLAN	

#Text=---------------------------------------------------------------------- Aggregate (cost=23228.13..23228.14 rows=1 width=16) InitPlan 1 (returns $1) Finalize Aggregate (cost=6966.00..6966.01 rows=1 width=8)
40-1	11147-11148	-	
40-2	11148-11149	-	
40-3	11149-11150	-	
40-4	11150-11151	-	
40-5	11151-11152	-	
40-6	11152-11153	-	
40-7	11153-11154	-	
40-8	11154-11155	-	
40-9	11155-11156	-	
40-10	11156-11157	-	
40-11	11157-11158	-	
40-12	11158-11159	-	
40-13	11159-11160	-	
40-14	11160-11161	-	
40-15	11161-11162	-	
40-16	11162-11163	-	
40-17	11163-11164	-	
40-18	11164-11165	-	
40-19	11165-11166	-	
40-20	11166-11167	-	
40-21	11167-11168	-	
40-22	11168-11169	-	
40-23	11169-11170	-	
40-24	11170-11171	-	
40-25	11171-11172	-	
40-26	11172-11173	-	
40-27	11173-11174	-	
40-28	11174-11175	-	
40-29	11175-11176	-	
40-30	11176-11177	-	
40-31	11177-11178	-	
40-32	11178-11179	-	
40-33	11179-11180	-	
40-34	11180-11181	-	
40-35	11181-11182	-	
40-36	11182-11183	-	
40-37	11183-11184	-	
40-38	11184-11185	-	
40-39	11185-11186	-	
40-40	11186-11187	-	
40-41	11187-11188	-	
40-42	11188-11189	-	
40-43	11189-11190	-	
40-44	11190-11191	-	
40-45	11191-11192	-	
40-46	11192-11193	-	
40-47	11193-11194	-	
40-48	11194-11195	-	
40-49	11195-11196	-	
40-50	11196-11197	-	
40-51	11197-11198	-	
40-52	11198-11199	-	
40-53	11199-11200	-	
40-54	11200-11201	-	
40-55	11201-11202	-	
40-56	11202-11203	-	
40-57	11203-11204	-	
40-58	11204-11205	-	
40-59	11205-11206	-	
40-60	11206-11207	-	
40-61	11207-11208	-	
40-62	11208-11209	-	
40-63	11209-11210	-	
40-64	11210-11211	-	
40-65	11211-11212	-	
40-66	11212-11213	-	
40-67	11213-11214	-	
40-68	11214-11215	-	
40-69	11215-11216	-	
40-70	11216-11217	-	
40-71	11218-11227	Aggregate	
40-72	11228-11229	(	
40-73	11229-11233	cost	
40-74	11233-11234	=	
40-75	11234-11242	23228.13	
40-76	11242-11243	.	
40-77	11243-11252	.23228.14	
40-78	11253-11257	rows	
40-79	11257-11258	=	
40-80	11258-11259	1	
40-81	11260-11265	width	
40-82	11265-11266	=	
40-83	11266-11268	16	
40-84	11268-11269	)	
40-85	11270-11278	InitPlan	
40-86	11279-11280	1	
40-87	11281-11282	(	
40-88	11282-11289	returns	
40-89	11290-11292	$1	
40-90	11292-11293	)	
40-91	11294-11302	Finalize	
40-92	11303-11312	Aggregate	
40-93	11313-11314	(	
40-94	11314-11318	cost	
40-95	11318-11319	=	
40-96	11319-11326	6966.00	
40-97	11326-11327	.	
40-98	11327-11335	.6966.01	
40-99	11336-11340	rows	
40-100	11340-11341	=	
40-101	11341-11342	1	
40-102	11343-11348	width	
40-103	11348-11349	=	
40-104	11349-11350	8	
40-105	11350-11351	)	

#Text=Gather (cost=6965.89..6966.00 rows=1 width=8) Workers Planned: 1 Partial Aggregate (cost=5965.89..5965.90 rows=1 width=8)
41-1	11352-11358	Gather	
41-2	11359-11360	(	
41-3	11360-11364	cost	
41-4	11364-11365	=	
41-5	11365-11372	6965.89	
41-6	11372-11373	.	
41-7	11373-11381	.6966.00	
41-8	11382-11386	rows	
41-9	11386-11387	=	
41-10	11387-11388	1	
41-11	11389-11394	width	
41-12	11394-11395	=	
41-13	11395-11396	8	
41-14	11396-11397	)	
41-15	11398-11405	Workers	
41-16	11406-11413	Planned	
41-17	11413-11414	:	
41-18	11415-11416	1	
41-19	11417-11424	Partial	
41-20	11425-11434	Aggregate	
41-21	11435-11436	(	
41-22	11436-11440	cost	
41-23	11440-11441	=	
41-24	11441-11448	5965.89	
41-25	11448-11449	.	
41-26	11449-11457	.5965.90	
41-27	11458-11462	rows	
41-28	11462-11463	=	
41-29	11463-11464	1	
41-30	11465-11470	width	
41-31	11470-11471	=	
41-32	11471-11472	8	
41-33	11472-11473	)	

#Text=Parallel Seq Scan on pgbench_history mn (cost=0.00..5346.11 rows=247911 width=8) InitPlan 2 (returns $3) Finalize Aggregate (cost=6966.00..6966.01 rows=1 width=8)
42-1	11474-11482	Parallel	
42-2	11483-11486	Seq	
42-3	11487-11491	Scan	
42-4	11492-11494	on	
42-5	11495-11510	pgbench_history	
42-6	11511-11513	mn	
42-7	11514-11515	(	
42-8	11515-11519	cost	
42-9	11519-11520	=	
42-10	11520-11524	0.00	
42-11	11524-11525	.	
42-12	11525-11533	.5346.11	
42-13	11534-11538	rows	
42-14	11538-11539	=	
42-15	11539-11545	247911	
42-16	11546-11551	width	
42-17	11551-11552	=	
42-18	11552-11553	8	
42-19	11553-11554	)	
42-20	11555-11563	InitPlan	
42-21	11564-11565	2	
42-22	11566-11567	(	
42-23	11567-11574	returns	
42-24	11575-11577	$3	
42-25	11577-11578	)	
42-26	11579-11587	Finalize	
42-27	11588-11597	Aggregate	
42-28	11598-11599	(	
42-29	11599-11603	cost	
42-30	11603-11604	=	
42-31	11604-11611	6966.00	
42-32	11611-11612	.	
42-33	11612-11620	.6966.01	
42-34	11621-11625	rows	
42-35	11625-11626	=	
42-36	11626-11627	1	
42-37	11628-11633	width	
42-38	11633-11634	=	
42-39	11634-11635	8	
42-40	11635-11636	)	

#Text=Gather (cost=6965.89..6966.00 rows=1 width=8) Workers Planned: 1 Partial Aggregate (cost=5965.89..5965.90 rows=1 width=8)
43-1	11637-11643	Gather	
43-2	11644-11645	(	
43-3	11645-11649	cost	
43-4	11649-11650	=	
43-5	11650-11657	6965.89	
43-6	11657-11658	.	
43-7	11658-11666	.6966.00	
43-8	11667-11671	rows	
43-9	11671-11672	=	
43-10	11672-11673	1	
43-11	11674-11679	width	
43-12	11679-11680	=	
43-13	11680-11681	8	
43-14	11681-11682	)	
43-15	11683-11690	Workers	
43-16	11691-11698	Planned	
43-17	11698-11699	:	
43-18	11700-11701	1	
43-19	11702-11709	Partial	
43-20	11710-11719	Aggregate	
43-21	11720-11721	(	
43-22	11721-11725	cost	
43-23	11725-11726	=	
43-24	11726-11733	5965.89	
43-25	11733-11734	.	
43-26	11734-11742	.5965.90	
43-27	11743-11747	rows	
43-28	11747-11748	=	
43-29	11748-11749	1	
43-30	11750-11755	width	
43-31	11755-11756	=	
43-32	11756-11757	8	
43-33	11757-11758	)	

#Text=Parallel Seq Scan on pgbench_history mx (cost=0.00..5346.11 rows=247911 width=8) Nested Loop (cost=0.00..9292.95 rows=632 width=8) Join Filter: (h.bid = b.bid)
44-1	11759-11767	Parallel	
44-2	11768-11771	Seq	
44-3	11772-11776	Scan	
44-4	11777-11779	on	
44-5	11780-11795	pgbench_history	
44-6	11796-11798	mx	
44-7	11799-11800	(	
44-8	11800-11804	cost	
44-9	11804-11805	=	
44-10	11805-11809	0.00	
44-11	11809-11810	.	
44-12	11810-11818	.5346.11	
44-13	11819-11823	rows	
44-14	11823-11824	=	
44-15	11824-11830	247911	
44-16	11831-11836	width	
44-17	11836-11837	=	
44-18	11837-11838	8	
44-19	11838-11839	)	
44-20	11840-11846	Nested	
44-21	11847-11851	Loop	
44-22	11852-11853	(	
44-23	11853-11857	cost	
44-24	11857-11858	=	
44-25	11858-11862	0.00	
44-26	11862-11863	.	
44-27	11863-11871	.9292.95	
44-28	11872-11876	rows	
44-29	11876-11877	=	
44-30	11877-11880	632	
44-31	11881-11886	width	
44-32	11886-11887	=	
44-33	11887-11888	8	
44-34	11888-11889	)	
44-35	11890-11894	Join	
44-36	11895-11901	Filter	
44-37	11901-11902	:	
44-38	11903-11904	(	
44-39	11904-11909	h.bid	
44-40	11910-11911	=	
44-41	11912-11917	b.bid	
44-42	11917-11918	)	

#Text=Seq Scan on pgbench_history h (cost=0.00..9188.74 rows=2107 width=8) Filter: ((mtime >= $1) AND (mtime <= $3)) Materialize (cost=0.00..14.15 rows=3 width=8)
45-1	11919-11922	Seq	
45-2	11923-11927	Scan	
45-3	11928-11930	on	
45-4	11931-11946	pgbench_history	
45-5	11947-11948	h	
45-6	11949-11950	(	
45-7	11950-11954	cost	
45-8	11954-11955	=	
45-9	11955-11959	0.00	
45-10	11959-11960	.	
45-11	11960-11968	.9188.74	
45-12	11969-11973	rows	
45-13	11973-11974	=	
45-14	11974-11978	2107	
45-15	11979-11984	width	
45-16	11984-11985	=	
45-17	11985-11986	8	
45-18	11986-11987	)	
45-19	11988-11994	Filter	
45-20	11994-11995	:	
45-21	11996-11997	(	
45-22	11997-11998	(	
45-23	11998-12003	mtime	
45-24	12004-12005	>	
45-25	12005-12006	=	
45-26	12007-12009	$1	
45-27	12009-12010	)	
45-28	12011-12014	AND	
45-29	12015-12016	(	
45-30	12016-12021	mtime	
45-31	12022-12023	<	
45-32	12023-12024	=	
45-33	12025-12027	$3	
45-34	12027-12028	)	
45-35	12028-12029	)	
45-36	12030-12041	Materialize	
45-37	12042-12043	(	
45-38	12043-12047	cost	
45-39	12047-12048	=	
45-40	12048-12052	0.00	
45-41	12052-12053	.	
45-42	12053-12059	.14.15	
45-43	12060-12064	rows	
45-44	12064-12065	=	
45-45	12065-12066	3	
45-46	12067-12072	width	
45-47	12072-12073	=	
45-48	12073-12074	8	
45-49	12074-12075	)	

#Text=Seq Scan on pgbench_branches b (cost=0.00..14.14 rows=3 width=8) Filter: (bid = ANY ('{1,2,3}'::integer[])) ………………………………………………………………………..
46-1	12076-12079	Seq	
46-2	12080-12084	Scan	
46-3	12085-12087	on	
46-4	12088-12104	pgbench_branches	
46-5	12105-12106	b	
46-6	12107-12108	(	
46-7	12108-12112	cost	
46-8	12112-12113	=	
46-9	12113-12117	0.00	
46-10	12117-12118	.	
46-11	12118-12124	.14.14	
46-12	12125-12129	rows	
46-13	12129-12130	=	
46-14	12130-12131	3	
46-15	12132-12137	width	
46-16	12137-12138	=	
46-17	12138-12139	8	
46-18	12139-12140	)	
46-19	12141-12147	Filter	
46-20	12147-12148	:	
46-21	12149-12150	(	
46-22	12150-12153	bid	
46-23	12154-12155	=	
46-24	12156-12159	ANY	
46-25	12160-12161	(	
46-26	12161-12162	'	
46-27	12162-12163	{	
46-28	12163-12168	1,2,3	
46-29	12168-12169	}	
46-30	12169-12170	'	
46-31	12170-12171	:	
46-32	12171-12172	:	
46-33	12172-12179	integer	
46-34	12179-12180	[	
46-35	12180-12181	]	
46-36	12181-12182	)	
46-37	12182-12183	)	
46-38	12184-12185	…	
46-39	12185-12186	…	
46-40	12186-12187	…	
46-41	12187-12188	…	
46-42	12188-12189	…	
46-43	12189-12190	…	
46-44	12190-12191	…	
46-45	12191-12192	…	
46-46	12192-12193	…	
46-47	12193-12194	…	
46-48	12194-12195	…	
46-49	12195-12196	…	
46-50	12196-12197	…	
46-51	12197-12198	…	
46-52	12198-12199	…	
46-53	12199-12200	…	
46-54	12200-12201	…	
46-55	12201-12202	…	
46-56	12202-12203	…	
46-57	12203-12204	…	
46-58	12204-12205	…	
46-59	12205-12206	…	
46-60	12206-12207	…	
46-61	12207-12208	…	
46-62	12208-12209	…	
46-63	12209-12210	…	
46-64	12210-12211	…	
46-65	12211-12212	.	
46-66	12212-12213	.	

#Text=SQL Hash: 1561242727, Plan Hash: -1990695905 c. Disable manual capture of the plan after you capture the execution plan for the desired SQL statement. SET apg_plan_mgmt.capture_plan_baselines = off;
47-1	12214-12217	SQL	
47-2	12218-12222	Hash	
47-3	12222-12223	:	
47-4	12224-12234	1561242727	
47-5	12234-12235	,	
47-6	12236-12240	Plan	
47-7	12241-12245	Hash	
47-8	12245-12246	:	
47-9	12247-12248	-	
47-10	12248-12258	1990695905	
47-11	12259-12260	c	
47-12	12260-12261	.	
47-13	12262-12269	Disable	
47-14	12270-12276	manual	
47-15	12277-12284	capture	
47-16	12285-12287	of	
47-17	12288-12291	the	
47-18	12292-12296	plan	
47-19	12297-12302	after	
47-20	12303-12306	you	
47-21	12307-12314	capture	
47-22	12315-12318	the	
47-23	12319-12328	execution	
47-24	12329-12333	plan	
47-25	12334-12337	for	
47-26	12338-12341	the	
47-27	12342-12349	desired	
47-28	12350-12353	SQL	
47-29	12354-12363	statement	
47-30	12363-12364	.	
47-31	12365-12368	SET	
47-32	12369-12405	apg_plan_mgmt.capture_plan_baselines	
47-33	12406-12407	=	
47-34	12408-12411	off	
47-35	12411-12412	;	

#Text=d. View captured query plan for the specific query that you ran previously. The plan_outline column in the table apg_plan_mgmt.dba_plans shows the entire plan for the SQL. For brevity, the plan_outline isn’t shown here. Instead, plan_hash_value from the explain plan preceding is compared with plan_hash from the output of the apg_plan_mgmt.dba_plans query. SELECT sql_hash, plan_hash, status, estimated_total_cost "cost", sql_text FROM apg_plan_mgmt.dba_plans; Output:
48-1	12413-12414	d	
48-2	12414-12415	.	
48-3	12416-12420	View	
48-4	12421-12429	captured	
48-5	12430-12435	query	
48-6	12436-12440	plan	
48-7	12441-12444	for	
48-8	12445-12448	the	
48-9	12449-12457	specific	
48-10	12458-12463	query	
48-11	12464-12468	that	
48-12	12469-12472	you	
48-13	12473-12476	ran	
48-14	12477-12487	previously	
48-15	12487-12488	.	
48-16	12489-12492	The	
48-17	12493-12505	plan_outline	
48-18	12506-12512	column	
48-19	12513-12515	in	
48-20	12516-12519	the	
48-21	12520-12525	table	
48-22	12526-12549	apg_plan_mgmt.dba_plans	
48-23	12550-12555	shows	
48-24	12556-12559	the	
48-25	12560-12566	entire	
48-26	12567-12571	plan	
48-27	12572-12575	for	
48-28	12576-12579	the	
48-29	12580-12583	SQL	
48-30	12583-12584	.	
48-31	12585-12588	For	
48-32	12589-12596	brevity	
48-33	12596-12597	,	
48-34	12598-12601	the	
48-35	12602-12614	plan_outline	
48-36	12615-12618	isn	
48-37	12618-12619	’	
48-38	12619-12620	t	
48-39	12621-12626	shown	
48-40	12627-12631	here	
48-41	12631-12632	.	
48-42	12633-12640	Instead	
48-43	12640-12641	,	
48-44	12642-12657	plan_hash_value	
48-45	12658-12662	from	
48-46	12663-12666	the	
48-47	12667-12674	explain	
48-48	12675-12679	plan	
48-49	12680-12689	preceding	
48-50	12690-12692	is	
48-51	12693-12701	compared	
48-52	12702-12706	with	
48-53	12707-12716	plan_hash	
48-54	12717-12721	from	
48-55	12722-12725	the	
48-56	12726-12732	output	
48-57	12733-12735	of	
48-58	12736-12739	the	
48-59	12740-12763	apg_plan_mgmt.dba_plans	
48-60	12764-12769	query	
48-61	12769-12770	.	
48-62	12771-12777	SELECT	
48-63	12778-12786	sql_hash	
48-64	12786-12787	,	
48-65	12788-12797	plan_hash	
48-66	12797-12798	,	
48-67	12799-12805	status	
48-68	12805-12806	,	
48-69	12807-12827	estimated_total_cost	
48-70	12828-12829	"	
48-71	12829-12833	cost	
48-72	12833-12834	"	
48-73	12834-12835	,	
48-74	12836-12844	sql_text	
48-75	12845-12849	FROM	
48-76	12850-12873	apg_plan_mgmt.dba_plans	
48-77	12873-12874	;	
48-78	12875-12881	Output	
48-79	12881-12882	:	

#Text=sql_hash plan_hash status | cost | sql_text ------------+-------------+----------+---------+-----------------------------
49-1	12883-12891	sql_hash	
49-2	12892-12901	plan_hash	
49-3	12902-12908	status	
49-4	12909-12910	|	
49-5	12911-12915	cost	
49-6	12916-12917	|	
49-7	12918-12926	sql_text	
49-8	12927-12928	-	
49-9	12928-12929	-	
49-10	12929-12930	-	
49-11	12930-12931	-	
49-12	12931-12932	-	
49-13	12932-12933	-	
49-14	12933-12934	-	
49-15	12934-12935	-	
49-16	12935-12936	-	
49-17	12936-12937	-	
49-18	12937-12938	-	
49-19	12938-12939	-	
49-20	12939-12940	+	
49-21	12940-12941	-	
49-22	12941-12942	-	
49-23	12942-12943	-	
49-24	12943-12944	-	
49-25	12944-12945	-	
49-26	12945-12946	-	
49-27	12946-12947	-	
49-28	12947-12948	-	
49-29	12948-12949	-	
49-30	12949-12950	-	
49-31	12950-12951	-	
49-32	12951-12952	-	
49-33	12952-12953	-	
49-34	12953-12954	+	
49-35	12954-12955	-	
49-36	12955-12956	-	
49-37	12956-12957	-	
49-38	12957-12958	-	
49-39	12958-12959	-	
49-40	12959-12960	-	
49-41	12960-12961	-	
49-42	12961-12962	-	
49-43	12962-12963	-	
49-44	12963-12964	-	
49-45	12964-12965	+	
49-46	12965-12966	-	
49-47	12966-12967	-	
49-48	12967-12968	-	
49-49	12968-12969	-	
49-50	12969-12970	-	
49-51	12970-12971	-	
49-52	12971-12972	-	
49-53	12972-12973	-	
49-54	12973-12974	-	
49-55	12974-12975	+	
49-56	12975-12976	-	
49-57	12976-12977	-	
49-58	12977-12978	-	
49-59	12978-12979	-	
49-60	12979-12980	-	
49-61	12980-12981	-	
49-62	12981-12982	-	
49-63	12982-12983	-	
49-64	12983-12984	-	
49-65	12984-12985	-	
49-66	12985-12986	-	
49-67	12986-12987	-	
49-68	12987-12988	-	
49-69	12988-12989	-	
49-70	12989-12990	-	
49-71	12990-12991	-	
49-72	12991-12992	-	
49-73	12992-12993	-	
49-74	12993-12994	-	
49-75	12994-12995	-	
49-76	12995-12996	-	
49-77	12996-12997	-	
49-78	12997-12998	-	
49-79	12998-12999	-	
49-80	12999-13000	-	
49-81	13000-13001	-	
49-82	13001-13002	-	
49-83	13002-13003	-	
49-84	13003-13004	-	

#Text=1561242727\t-1990695905\t Approved \t 23228.14 select sum(delta),sum(bbalance) from pgbench_history h, pgbench_branches b where b.bid=h.bid and b.bid in (1,2,3) and mtime between (select min(mtime) from pgbench_history mn) and (select max(mtime) from pgbench_history mx);
50-1	13005-13015	1561242727	
50-2	13016-13017	-	
50-3	13017-13027	1990695905	
50-4	13029-13037	Approved	
50-5	13040-13048	23228.14	
50-6	13049-13055	select	
50-7	13056-13059	sum	
50-8	13059-13060	(	
50-9	13060-13065	delta	
50-10	13065-13066	)	
50-11	13066-13067	,	
50-12	13067-13070	sum	
50-13	13070-13071	(	
50-14	13071-13079	bbalance	
50-15	13079-13080	)	
50-16	13081-13085	from	
50-17	13086-13101	pgbench_history	
50-18	13102-13103	h	
50-19	13103-13104	,	
50-20	13105-13121	pgbench_branches	
50-21	13122-13123	b	
50-22	13124-13129	where	
50-23	13130-13135	b.bid	
50-24	13135-13136	=	
50-25	13136-13141	h.bid	
50-26	13142-13145	and	
50-27	13146-13151	b.bid	
50-28	13152-13154	in	
50-29	13155-13156	(	
50-30	13156-13161	1,2,3	
50-31	13161-13162	)	
50-32	13163-13166	and	
50-33	13167-13172	mtime	
50-34	13173-13180	between	
50-35	13181-13182	(	
50-36	13182-13188	select	
50-37	13189-13192	min	
50-38	13192-13193	(	
50-39	13193-13198	mtime	
50-40	13198-13199	)	
50-41	13200-13204	from	
50-42	13205-13220	pgbench_history	
50-43	13221-13223	mn	
50-44	13223-13224	)	
50-45	13225-13228	and	
50-46	13229-13230	(	
50-47	13230-13236	select	
50-48	13237-13240	max	
50-49	13240-13241	(	
50-50	13241-13246	mtime	
50-51	13246-13247	)	
50-52	13248-13252	from	
50-53	13253-13268	pgbench_history	
50-54	13269-13271	mx	
50-55	13271-13272	)	
50-56	13272-13273	;	

#Text=e. To instruct the query optimizer to use the approved or preferred captured plans for your managed statements, set the parameter apg_plan_mgmt.use_plan_baselines to true. SET apg_plan_mgmt.use_plan_baselines = true; f. View the explain plan output to see that the QPM approved plan is used by the query optimizer. explain (hashes true)
51-1	13274-13275	e	
51-2	13275-13276	.	
51-3	13277-13279	To	
51-4	13280-13288	instruct	
51-5	13289-13292	the	
51-6	13293-13298	query	
51-7	13299-13308	optimizer	
51-8	13309-13311	to	
51-9	13312-13315	use	
51-10	13316-13319	the	
51-11	13320-13328	approved	
51-12	13329-13331	or	
51-13	13332-13341	preferred	
51-14	13342-13350	captured	
51-15	13351-13356	plans	
51-16	13357-13360	for	
51-17	13361-13365	your	
51-18	13366-13373	managed	
51-19	13374-13384	statements	
51-20	13384-13385	,	
51-21	13386-13389	set	
51-22	13390-13393	the	
51-23	13394-13403	parameter	
51-24	13404-13436	apg_plan_mgmt.use_plan_baselines	
51-25	13437-13439	to	
51-26	13440-13444	true	
51-27	13444-13445	.	
51-28	13446-13449	SET	
51-29	13450-13482	apg_plan_mgmt.use_plan_baselines	
51-30	13483-13484	=	
51-31	13485-13489	true	
51-32	13489-13490	;	
51-33	13491-13492	f	
51-34	13492-13493	.	
51-35	13494-13498	View	
51-36	13499-13502	the	
51-37	13503-13510	explain	
51-38	13511-13515	plan	
51-39	13516-13522	output	
51-40	13523-13525	to	
51-41	13526-13529	see	
51-42	13530-13534	that	
51-43	13535-13538	the	
51-44	13539-13542	QPM	
51-45	13543-13551	approved	
51-46	13552-13556	plan	
51-47	13557-13559	is	
51-48	13560-13564	used	
51-49	13565-13567	by	
51-50	13568-13571	the	
51-51	13572-13577	query	
51-52	13578-13587	optimizer	
51-53	13587-13588	.	
51-54	13589-13596	explain	
51-55	13597-13598	(	
51-56	13598-13604	hashes	
51-57	13605-13609	true	
51-58	13609-13610	)	

#Text=SELECT Sum(delta), Sum(bbalance) FROM pgbench_history h, pgbench_branches b WHERE b.bid = h.bid AND b.bid IN ( 1, 2, 3 )
52-1	13611-13617	SELECT	
52-2	13618-13621	Sum	
52-3	13621-13622	(	
52-4	13622-13627	delta	
52-5	13627-13628	)	
52-6	13628-13629	,	
52-7	13630-13633	Sum	
52-8	13633-13634	(	
52-9	13634-13642	bbalance	
52-10	13642-13643	)	
52-11	13644-13648	FROM	
52-12	13649-13664	pgbench_history	
52-13	13665-13666	h	
52-14	13666-13667	,	
52-15	13668-13684	pgbench_branches	
52-16	13685-13686	b	
52-17	13687-13692	WHERE	
52-18	13693-13698	b.bid	
52-19	13699-13700	=	
52-20	13701-13706	h.bid	
52-21	13707-13710	AND	
52-22	13711-13716	b.bid	
52-23	13717-13719	IN	
52-24	13720-13721	(	
52-25	13722-13723	1	
52-26	13723-13724	,	
52-27	13725-13726	2	
52-28	13726-13727	,	
52-29	13728-13729	3	
52-30	13730-13731	)	

#Text=AND mtime BETWEEN (SELECT Min(mtime) FROM pgbench_history mn) AND (SELECT Max(mtime) FROM pgbench_history mx); QUERY PLAN
53-1	13732-13735	AND	
53-2	13736-13741	mtime	
53-3	13742-13749	BETWEEN	
53-4	13750-13751	(	
53-5	13751-13757	SELECT	
53-6	13758-13761	Min	
53-7	13761-13762	(	
53-8	13762-13767	mtime	
53-9	13767-13768	)	
53-10	13769-13773	FROM	
53-11	13774-13789	pgbench_history	
53-12	13790-13792	mn	
53-13	13792-13793	)	
53-14	13794-13797	AND	
53-15	13798-13799	(	
53-16	13799-13805	SELECT	
53-17	13806-13809	Max	
53-18	13809-13810	(	
53-19	13810-13815	mtime	
53-20	13815-13816	)	
53-21	13817-13821	FROM	
53-22	13822-13837	pgbench_history	
53-23	13838-13840	mx	
53-24	13840-13841	)	
53-25	13841-13842	;	
53-26	13843-13848	QUERY	
53-27	13849-13853	PLAN	

#Text=--------------------------------------------------------------------------------------------------- Aggregate (cost=33986.68..33986.69 rows=1 width=16) InitPlan 1 (returns $1) Finalize Aggregate (cost=9404.57..9404.58 rows=1 width=8)
54-1	13854-13855	-	
54-2	13855-13856	-	
54-3	13856-13857	-	
54-4	13857-13858	-	
54-5	13858-13859	-	
54-6	13859-13860	-	
54-7	13860-13861	-	
54-8	13861-13862	-	
54-9	13862-13863	-	
54-10	13863-13864	-	
54-11	13864-13865	-	
54-12	13865-13866	-	
54-13	13866-13867	-	
54-14	13867-13868	-	
54-15	13868-13869	-	
54-16	13869-13870	-	
54-17	13870-13871	-	
54-18	13871-13872	-	
54-19	13872-13873	-	
54-20	13873-13874	-	
54-21	13874-13875	-	
54-22	13875-13876	-	
54-23	13876-13877	-	
54-24	13877-13878	-	
54-25	13878-13879	-	
54-26	13879-13880	-	
54-27	13880-13881	-	
54-28	13881-13882	-	
54-29	13882-13883	-	
54-30	13883-13884	-	
54-31	13884-13885	-	
54-32	13885-13886	-	
54-33	13886-13887	-	
54-34	13887-13888	-	
54-35	13888-13889	-	
54-36	13889-13890	-	
54-37	13890-13891	-	
54-38	13891-13892	-	
54-39	13892-13893	-	
54-40	13893-13894	-	
54-41	13894-13895	-	
54-42	13895-13896	-	
54-43	13896-13897	-	
54-44	13897-13898	-	
54-45	13898-13899	-	
54-46	13899-13900	-	
54-47	13900-13901	-	
54-48	13901-13902	-	
54-49	13902-13903	-	
54-50	13903-13904	-	
54-51	13904-13905	-	
54-52	13905-13906	-	
54-53	13906-13907	-	
54-54	13907-13908	-	
54-55	13908-13909	-	
54-56	13909-13910	-	
54-57	13910-13911	-	
54-58	13911-13912	-	
54-59	13912-13913	-	
54-60	13913-13914	-	
54-61	13914-13915	-	
54-62	13915-13916	-	
54-63	13916-13917	-	
54-64	13917-13918	-	
54-65	13918-13919	-	
54-66	13919-13920	-	
54-67	13920-13921	-	
54-68	13921-13922	-	
54-69	13922-13923	-	
54-70	13923-13924	-	
54-71	13924-13925	-	
54-72	13925-13926	-	
54-73	13926-13927	-	
54-74	13927-13928	-	
54-75	13928-13929	-	
54-76	13929-13930	-	
54-77	13930-13931	-	
54-78	13931-13932	-	
54-79	13932-13933	-	
54-80	13933-13934	-	
54-81	13934-13935	-	
54-82	13935-13936	-	
54-83	13936-13937	-	
54-84	13937-13938	-	
54-85	13938-13939	-	
54-86	13939-13940	-	
54-87	13940-13941	-	
54-88	13941-13942	-	
54-89	13942-13943	-	
54-90	13943-13944	-	
54-91	13944-13945	-	
54-92	13945-13946	-	
54-93	13946-13947	-	
54-94	13947-13948	-	
54-95	13948-13949	-	
54-96	13949-13950	-	
54-97	13950-13951	-	
54-98	13951-13952	-	
54-99	13952-13953	-	
54-100	13954-13963	Aggregate	
54-101	13964-13965	(	
54-102	13965-13969	cost	
54-103	13969-13970	=	
54-104	13970-13978	33986.68	
54-105	13978-13979	.	
54-106	13979-13988	.33986.69	
54-107	13989-13993	rows	
54-108	13993-13994	=	
54-109	13994-13995	1	
54-110	13996-14001	width	
54-111	14001-14002	=	
54-112	14002-14004	16	
54-113	14004-14005	)	
54-114	14006-14014	InitPlan	
54-115	14015-14016	1	
54-116	14017-14018	(	
54-117	14018-14025	returns	
54-118	14026-14028	$1	
54-119	14028-14029	)	
54-120	14030-14038	Finalize	
54-121	14039-14048	Aggregate	
54-122	14049-14050	(	
54-123	14050-14054	cost	
54-124	14054-14055	=	
54-125	14055-14062	9404.57	
54-126	14062-14063	.	
54-127	14063-14071	.9404.58	
54-128	14072-14076	rows	
54-129	14076-14077	=	
54-130	14077-14078	1	
54-131	14079-14084	width	
54-132	14084-14085	=	
54-133	14085-14086	8	
54-134	14086-14087	)	

#Text=Gather (cost=9404.35..9404.56 rows=2 width=8) Workers Planned: 2 Partial Aggregate (cost=8404.35..8404.36 rows=1 width=8)
55-1	14088-14094	Gather	
55-2	14095-14096	(	
55-3	14096-14100	cost	
55-4	14100-14101	=	
55-5	14101-14108	9404.35	
55-6	14108-14109	.	
55-7	14109-14117	.9404.56	
55-8	14118-14122	rows	
55-9	14122-14123	=	
55-10	14123-14124	2	
55-11	14125-14130	width	
55-12	14130-14131	=	
55-13	14131-14132	8	
55-14	14132-14133	)	
55-15	14134-14141	Workers	
55-16	14142-14149	Planned	
55-17	14149-14150	:	
55-18	14151-14152	2	
55-19	14153-14160	Partial	
55-20	14161-14170	Aggregate	
55-21	14171-14172	(	
55-22	14172-14176	cost	
55-23	14176-14177	=	
55-24	14177-14184	8404.35	
55-25	14184-14185	.	
55-26	14185-14193	.8404.36	
55-27	14194-14198	rows	
55-28	14198-14199	=	
55-29	14199-14200	1	
55-30	14201-14206	width	
55-31	14206-14207	=	
55-32	14207-14208	8	
55-33	14208-14209	)	

#Text=Parallel Seq Scan on pgbench_history mn (cost=0.00..7703.48 rows=280348 width=8) InitPlan 2 (returns $3) Finalize Aggregate (cost=9404.57..9404.58 rows=1 width=8)
56-1	14210-14218	Parallel	
56-2	14219-14222	Seq	
56-3	14223-14227	Scan	
56-4	14228-14230	on	
56-5	14231-14246	pgbench_history	
56-6	14247-14249	mn	
56-7	14250-14251	(	
56-8	14251-14255	cost	
56-9	14255-14256	=	
56-10	14256-14260	0.00	
56-11	14260-14261	.	
56-12	14261-14269	.7703.48	
56-13	14270-14274	rows	
56-14	14274-14275	=	
56-15	14275-14281	280348	
56-16	14282-14287	width	
56-17	14287-14288	=	
56-18	14288-14289	8	
56-19	14289-14290	)	
56-20	14291-14299	InitPlan	
56-21	14300-14301	2	
56-22	14302-14303	(	
56-23	14303-14310	returns	
56-24	14311-14313	$3	
56-25	14313-14314	)	
56-26	14315-14323	Finalize	
56-27	14324-14333	Aggregate	
56-28	14334-14335	(	
56-29	14335-14339	cost	
56-30	14339-14340	=	
56-31	14340-14347	9404.57	
56-32	14347-14348	.	
56-33	14348-14356	.9404.58	
56-34	14357-14361	rows	
56-35	14361-14362	=	
56-36	14362-14363	1	
56-37	14364-14369	width	
56-38	14369-14370	=	
56-39	14370-14371	8	
56-40	14371-14372	)	

#Text=Gather (cost=9404.35..9404.56 rows=2 width=8) Workers Planned: 2 Partial Aggregate (cost=8404.35..8404.36 rows=1 width=8)
57-1	14373-14379	Gather	
57-2	14380-14381	(	
57-3	14381-14385	cost	
57-4	14385-14386	=	
57-5	14386-14393	9404.35	
57-6	14393-14394	.	
57-7	14394-14402	.9404.56	
57-8	14403-14407	rows	
57-9	14407-14408	=	
57-10	14408-14409	2	
57-11	14410-14415	width	
57-12	14415-14416	=	
57-13	14416-14417	8	
57-14	14417-14418	)	
57-15	14419-14426	Workers	
57-16	14427-14434	Planned	
57-17	14434-14435	:	
57-18	14436-14437	2	
57-19	14438-14445	Partial	
57-20	14446-14455	Aggregate	
57-21	14456-14457	(	
57-22	14457-14461	cost	
57-23	14461-14462	=	
57-24	14462-14469	8404.35	
57-25	14469-14470	.	
57-26	14470-14478	.8404.36	
57-27	14479-14483	rows	
57-28	14483-14484	=	
57-29	14484-14485	1	
57-30	14486-14491	width	
57-31	14491-14492	=	
57-32	14492-14493	8	
57-33	14493-14494	)	

#Text=Parallel Seq Scan on pgbench_history mx (cost=0.00..7703.48 rows=280348 width=8) Nested Loop (cost=0.27..15177.06 rows=93 width=8) Join Filter: (h.bid = b.bid)
58-1	14495-14503	Parallel	
58-2	14504-14507	Seq	
58-3	14508-14512	Scan	
58-4	14513-14515	on	
58-5	14516-14531	pgbench_history	
58-6	14532-14534	mx	
58-7	14535-14536	(	
58-8	14536-14540	cost	
58-9	14540-14541	=	
58-10	14541-14545	0.00	
58-11	14545-14546	.	
58-12	14546-14554	.7703.48	
58-13	14555-14559	rows	
58-14	14559-14560	=	
58-15	14560-14566	280348	
58-16	14567-14572	width	
58-17	14572-14573	=	
58-18	14573-14574	8	
58-19	14574-14575	)	
58-20	14576-14582	Nested	
58-21	14583-14587	Loop	
58-22	14588-14589	(	
58-23	14589-14593	cost	
58-24	14593-14594	=	
58-25	14594-14598	0.27	
58-26	14598-14599	.	
58-27	14599-14608	.15177.06	
58-28	14609-14613	rows	
58-29	14613-14614	=	
58-30	14614-14616	93	
58-31	14617-14622	width	
58-32	14622-14623	=	
58-33	14623-14624	8	
58-34	14624-14625	)	
58-35	14626-14630	Join	
58-36	14631-14637	Filter	
58-37	14637-14638	:	
58-38	14639-14640	(	
58-39	14640-14645	h.bid	
58-40	14646-14647	=	
58-41	14648-14653	b.bid	
58-42	14653-14654	)	

#Text=Index Scan using pgbench_branches_pkey on pgbench_branches b (cost=0.27..24.73 rows=3 width=8) Index Cond: (bid = ANY ('{1,2,3}'::integer[])) Materialize (cost=0.00..15009.36 rows=3364 width=8)
59-1	14655-14660	Index	
59-2	14661-14665	Scan	
59-3	14666-14671	using	
59-4	14672-14693	pgbench_branches_pkey	
59-5	14694-14696	on	
59-6	14697-14713	pgbench_branches	
59-7	14714-14715	b	
59-8	14716-14717	(	
59-9	14717-14721	cost	
59-10	14721-14722	=	
59-11	14722-14726	0.27	
59-12	14726-14727	.	
59-13	14727-14733	.24.73	
59-14	14734-14738	rows	
59-15	14738-14739	=	
59-16	14739-14740	3	
59-17	14741-14746	width	
59-18	14746-14747	=	
59-19	14747-14748	8	
59-20	14748-14749	)	
59-21	14750-14755	Index	
59-22	14756-14760	Cond	
59-23	14760-14761	:	
59-24	14762-14763	(	
59-25	14763-14766	bid	
59-26	14767-14768	=	
59-27	14769-14772	ANY	
59-28	14773-14774	(	
59-29	14774-14775	'	
59-30	14775-14776	{	
59-31	14776-14781	1,2,3	
59-32	14781-14782	}	
59-33	14782-14783	'	
59-34	14783-14784	:	
59-35	14784-14785	:	
59-36	14785-14792	integer	
59-37	14792-14793	[	
59-38	14793-14794	]	
59-39	14794-14795	)	
59-40	14795-14796	)	
59-41	14797-14808	Materialize	
59-42	14809-14810	(	
59-43	14810-14814	cost	
59-44	14814-14815	=	
59-45	14815-14819	0.00	
59-46	14819-14820	.	
59-47	14820-14829	.15009.36	
59-48	14830-14834	rows	
59-49	14834-14835	=	
59-50	14835-14839	3364	
59-51	14840-14845	width	
59-52	14845-14846	=	
59-53	14846-14847	8	
59-54	14847-14848	)	

#Text=Seq Scan on pgbench_history h (cost=0.00..14992.54 rows=3364 width=8) Filter: ((mtime >= $1) AND (mtime <= $3)) SQL Hash: 1561242727, Plan Hash: -1990695905
60-1	14849-14852	Seq	
60-2	14853-14857	Scan	
60-3	14858-14860	on	
60-4	14861-14876	pgbench_history	
60-5	14877-14878	h	
60-6	14879-14880	(	
60-7	14880-14884	cost	
60-8	14884-14885	=	
60-9	14885-14889	0.00	
60-10	14889-14890	.	
60-11	14890-14899	.14992.54	
60-12	14900-14904	rows	
60-13	14904-14905	=	
60-14	14905-14909	3364	
60-15	14910-14915	width	
60-16	14915-14916	=	
60-17	14916-14917	8	
60-18	14917-14918	)	
60-19	14919-14925	Filter	
60-20	14925-14926	:	
60-21	14927-14928	(	
60-22	14928-14929	(	
60-23	14929-14934	mtime	
60-24	14935-14936	>	
60-25	14936-14937	=	
60-26	14938-14940	$1	
60-27	14940-14941	)	
60-28	14942-14945	AND	
60-29	14946-14947	(	
60-30	14947-14952	mtime	
60-31	14953-14954	<	
60-32	14954-14955	=	
60-33	14956-14958	$3	
60-34	14958-14959	)	
60-35	14959-14960	)	
60-36	14961-14964	SQL	
60-37	14965-14969	Hash	
60-38	14969-14970	:	
60-39	14971-14981	1561242727	
60-40	14981-14982	,	
60-41	14983-14987	Plan	
60-42	14988-14992	Hash	
60-43	14992-14993	:	
60-44	14994-14995	-	
60-45	14995-15005	1990695905	

#Text=g. Create a new index on the pgbench_history table column “mtime” to change the planner configuration and force the query optimizer to generate a new plan. create index pgbench_hist_mtime on pgbench_history(mtime); h. View the explain plan output to see that QPM detects a new plan but still uses the approved plan and maintains the plan stability. explain (hashes true)
61-1	15006-15007	g	
61-2	15007-15008	.	
61-3	15009-15015	Create	
61-4	15016-15017	a	
61-5	15018-15021	new	
61-6	15022-15027	index	
61-7	15028-15030	on	
61-8	15031-15034	the	
61-9	15035-15050	pgbench_history	
61-10	15051-15056	table	
61-11	15057-15063	column	
61-12	15064-15065	“	
61-13	15065-15070	mtime	
61-14	15070-15071	”	
61-15	15072-15074	to	
61-16	15075-15081	change	
61-17	15082-15085	the	
61-18	15086-15093	planner	
61-19	15094-15107	configuration	
61-20	15108-15111	and	
61-21	15112-15117	force	
61-22	15118-15121	the	
61-23	15122-15127	query	
61-24	15128-15137	optimizer	
61-25	15138-15140	to	
61-26	15141-15149	generate	
61-27	15150-15151	a	
61-28	15152-15155	new	
61-29	15156-15160	plan	
61-30	15160-15161	.	
61-31	15162-15168	create	
61-32	15169-15174	index	
61-33	15175-15193	pgbench_hist_mtime	
61-34	15194-15196	on	
61-35	15197-15212	pgbench_history	
61-36	15212-15213	(	
61-37	15213-15218	mtime	
61-38	15218-15219	)	
61-39	15219-15220	;	
61-40	15221-15222	h	
61-41	15222-15223	.	
61-42	15224-15228	View	
61-43	15229-15232	the	
61-44	15233-15240	explain	
61-45	15241-15245	plan	
61-46	15246-15252	output	
61-47	15253-15255	to	
61-48	15256-15259	see	
61-49	15260-15264	that	
61-50	15265-15268	QPM	
61-51	15269-15276	detects	
61-52	15277-15278	a	
61-53	15279-15282	new	
61-54	15283-15287	plan	
61-55	15288-15291	but	
61-56	15292-15297	still	
61-57	15298-15302	uses	
61-58	15303-15306	the	
61-59	15307-15315	approved	
61-60	15316-15320	plan	
61-61	15321-15324	and	
61-62	15325-15334	maintains	
61-63	15335-15338	the	
61-64	15339-15343	plan	
61-65	15344-15353	stability	
61-66	15353-15354	.	
61-67	15355-15362	explain	
61-68	15363-15364	(	
61-69	15364-15370	hashes	
61-70	15371-15375	true	
61-71	15375-15376	)	

#Text=SELECT Sum(delta), Sum(bbalance) FROM pgbench_history h, pgbench_branches b WHERE b.bid = h.bid AND b.bid IN ( 1, 2, 3 )
62-1	15377-15383	SELECT	
62-2	15384-15387	Sum	
62-3	15387-15388	(	
62-4	15388-15393	delta	
62-5	15393-15394	)	
62-6	15394-15395	,	
62-7	15396-15399	Sum	
62-8	15399-15400	(	
62-9	15400-15408	bbalance	
62-10	15408-15409	)	
62-11	15410-15414	FROM	
62-12	15415-15430	pgbench_history	
62-13	15431-15432	h	
62-14	15432-15433	,	
62-15	15434-15450	pgbench_branches	
62-16	15451-15452	b	
62-17	15453-15458	WHERE	
62-18	15459-15464	b.bid	
62-19	15465-15466	=	
62-20	15467-15472	h.bid	
62-21	15473-15476	AND	
62-22	15477-15482	b.bid	
62-23	15483-15485	IN	
62-24	15486-15487	(	
62-25	15488-15489	1	
62-26	15489-15490	,	
62-27	15491-15492	2	
62-28	15492-15493	,	
62-29	15494-15495	3	
62-30	15496-15497	)	

#Text=AND mtime BETWEEN (SELECT Min(mtime) FROM pgbench_history mn) AND (SELECT Max(mtime) FROM pgbench_history mx); Output: QUERY PLAN
63-1	15498-15501	AND	
63-2	15502-15507	mtime	
63-3	15508-15515	BETWEEN	
63-4	15516-15517	(	
63-5	15517-15523	SELECT	
63-6	15524-15527	Min	
63-7	15527-15528	(	
63-8	15528-15533	mtime	
63-9	15533-15534	)	
63-10	15535-15539	FROM	
63-11	15540-15555	pgbench_history	
63-12	15556-15558	mn	
63-13	15558-15559	)	
63-14	15560-15563	AND	
63-15	15564-15565	(	
63-16	15565-15571	SELECT	
63-17	15572-15575	Max	
63-18	15575-15576	(	
63-19	15576-15581	mtime	
63-20	15581-15582	)	
63-21	15583-15587	FROM	
63-22	15588-15603	pgbench_history	
63-23	15604-15606	mx	
63-24	15606-15607	)	
63-25	15607-15608	;	
63-26	15609-15615	Output	
63-27	15615-15616	:	
63-28	15617-15622	QUERY	
63-29	15623-15627	PLAN	

#Text=------------------------------------------------------------------------------------------ Aggregate (cost=33101.22..33101.23 rows=1 width=16) InitPlan 1 (returns $2) Finalize Aggregate (cost=9224.80..9224.81 rows=1 width=8)
64-1	15628-15629	-	
64-2	15629-15630	-	
64-3	15630-15631	-	
64-4	15631-15632	-	
64-5	15632-15633	-	
64-6	15633-15634	-	
64-7	15634-15635	-	
64-8	15635-15636	-	
64-9	15636-15637	-	
64-10	15637-15638	-	
64-11	15638-15639	-	
64-12	15639-15640	-	
64-13	15640-15641	-	
64-14	15641-15642	-	
64-15	15642-15643	-	
64-16	15643-15644	-	
64-17	15644-15645	-	
64-18	15645-15646	-	
64-19	15646-15647	-	
64-20	15647-15648	-	
64-21	15648-15649	-	
64-22	15649-15650	-	
64-23	15650-15651	-	
64-24	15651-15652	-	
64-25	15652-15653	-	
64-26	15653-15654	-	
64-27	15654-15655	-	
64-28	15655-15656	-	
64-29	15656-15657	-	
64-30	15657-15658	-	
64-31	15658-15659	-	
64-32	15659-15660	-	
64-33	15660-15661	-	
64-34	15661-15662	-	
64-35	15662-15663	-	
64-36	15663-15664	-	
64-37	15664-15665	-	
64-38	15665-15666	-	
64-39	15666-15667	-	
64-40	15667-15668	-	
64-41	15668-15669	-	
64-42	15669-15670	-	
64-43	15670-15671	-	
64-44	15671-15672	-	
64-45	15672-15673	-	
64-46	15673-15674	-	
64-47	15674-15675	-	
64-48	15675-15676	-	
64-49	15676-15677	-	
64-50	15677-15678	-	
64-51	15678-15679	-	
64-52	15679-15680	-	
64-53	15680-15681	-	
64-54	15681-15682	-	
64-55	15682-15683	-	
64-56	15683-15684	-	
64-57	15684-15685	-	
64-58	15685-15686	-	
64-59	15686-15687	-	
64-60	15687-15688	-	
64-61	15688-15689	-	
64-62	15689-15690	-	
64-63	15690-15691	-	
64-64	15691-15692	-	
64-65	15692-15693	-	
64-66	15693-15694	-	
64-67	15694-15695	-	
64-68	15695-15696	-	
64-69	15696-15697	-	
64-70	15697-15698	-	
64-71	15698-15699	-	
64-72	15699-15700	-	
64-73	15700-15701	-	
64-74	15701-15702	-	
64-75	15702-15703	-	
64-76	15703-15704	-	
64-77	15704-15705	-	
64-78	15705-15706	-	
64-79	15706-15707	-	
64-80	15707-15708	-	
64-81	15708-15709	-	
64-82	15709-15710	-	
64-83	15710-15711	-	
64-84	15711-15712	-	
64-85	15712-15713	-	
64-86	15713-15714	-	
64-87	15714-15715	-	
64-88	15715-15716	-	
64-89	15716-15717	-	
64-90	15717-15718	-	
64-91	15719-15728	Aggregate	
64-92	15729-15730	(	
64-93	15730-15734	cost	
64-94	15734-15735	=	
64-95	15735-15743	33101.22	
64-96	15743-15744	.	
64-97	15744-15753	.33101.23	
64-98	15754-15758	rows	
64-99	15758-15759	=	
64-100	15759-15760	1	
64-101	15761-15766	width	
64-102	15766-15767	=	
64-103	15767-15769	16	
64-104	15769-15770	)	
64-105	15771-15779	InitPlan	
64-106	15780-15781	1	
64-107	15782-15783	(	
64-108	15783-15790	returns	
64-109	15791-15793	$2	
64-110	15793-15794	)	
64-111	15795-15803	Finalize	
64-112	15804-15813	Aggregate	
64-113	15814-15815	(	
64-114	15815-15819	cost	
64-115	15819-15820	=	
64-116	15820-15827	9224.80	
64-117	15827-15828	.	
64-118	15828-15836	.9224.81	
64-119	15837-15841	rows	
64-120	15841-15842	=	
64-121	15842-15843	1	
64-122	15844-15849	width	
64-123	15849-15850	=	
64-124	15850-15851	8	
64-125	15851-15852	)	

#Text=Gather (cost=9224.58..9224.79 rows=2 width=8) Workers Planned: 2 Partial Aggregate (cost=8224.58..8224.59 rows=1 width=8)
65-1	15853-15859	Gather	
65-2	15860-15861	(	
65-3	15861-15865	cost	
65-4	15865-15866	=	
65-5	15866-15873	9224.58	
65-6	15873-15874	.	
65-7	15874-15882	.9224.79	
65-8	15883-15887	rows	
65-9	15887-15888	=	
65-10	15888-15889	2	
65-11	15890-15895	width	
65-12	15895-15896	=	
65-13	15896-15897	8	
65-14	15897-15898	)	
65-15	15899-15906	Workers	
65-16	15907-15914	Planned	
65-17	15914-15915	:	
65-18	15916-15917	2	
65-19	15918-15925	Partial	
65-20	15926-15935	Aggregate	
65-21	15936-15937	(	
65-22	15937-15941	cost	
65-23	15941-15942	=	
65-24	15942-15949	8224.58	
65-25	15949-15950	.	
65-26	15950-15958	.8224.59	
65-27	15959-15963	rows	
65-28	15963-15964	=	
65-29	15964-15965	1	
65-30	15966-15971	width	
65-31	15971-15972	=	
65-32	15972-15973	8	
65-33	15973-15974	)	

#Text=Parallel Seq Scan on pgbench_history mn (cost=0.00..7559.67 rows=265967 width=8) InitPlan 2 (returns $5) Finalize Aggregate (cost=9224.80..9224.81 rows=1 width=8)
66-1	15975-15983	Parallel	
66-2	15984-15987	Seq	
66-3	15988-15992	Scan	
66-4	15993-15995	on	
66-5	15996-16011	pgbench_history	
66-6	16012-16014	mn	
66-7	16015-16016	(	
66-8	16016-16020	cost	
66-9	16020-16021	=	
66-10	16021-16025	0.00	
66-11	16025-16026	.	
66-12	16026-16034	.7559.67	
66-13	16035-16039	rows	
66-14	16039-16040	=	
66-15	16040-16046	265967	
66-16	16047-16052	width	
66-17	16052-16053	=	
66-18	16053-16054	8	
66-19	16054-16055	)	
66-20	16056-16064	InitPlan	
66-21	16065-16066	2	
66-22	16067-16068	(	
66-23	16068-16075	returns	
66-24	16076-16078	$5	
66-25	16078-16079	)	
66-26	16080-16088	Finalize	
66-27	16089-16098	Aggregate	
66-28	16099-16100	(	
66-29	16100-16104	cost	
66-30	16104-16105	=	
66-31	16105-16112	9224.80	
66-32	16112-16113	.	
66-33	16113-16121	.9224.81	
66-34	16122-16126	rows	
66-35	16126-16127	=	
66-36	16127-16128	1	
66-37	16129-16134	width	
66-38	16134-16135	=	
66-39	16135-16136	8	
66-40	16136-16137	)	

#Text=Gather (cost=9224.58..9224.79 rows=2 width=8) Workers Planned: 2 Partial Aggregate (cost=8224.58..8224.59 rows=1 width=8)
67-1	16138-16144	Gather	
67-2	16145-16146	(	
67-3	16146-16150	cost	
67-4	16150-16151	=	
67-5	16151-16158	9224.58	
67-6	16158-16159	.	
67-7	16159-16167	.9224.79	
67-8	16168-16172	rows	
67-9	16172-16173	=	
67-10	16173-16174	2	
67-11	16175-16180	width	
67-12	16180-16181	=	
67-13	16181-16182	8	
67-14	16182-16183	)	
67-15	16184-16191	Workers	
67-16	16192-16199	Planned	
67-17	16199-16200	:	
67-18	16201-16202	2	
67-19	16203-16210	Partial	
67-20	16211-16220	Aggregate	
67-21	16221-16222	(	
67-22	16222-16226	cost	
67-23	16226-16227	=	
67-24	16227-16234	8224.58	
67-25	16234-16235	.	
67-26	16235-16243	.8224.59	
67-27	16244-16248	rows	
67-28	16248-16249	=	
67-29	16249-16250	1	
67-30	16251-16256	width	
67-31	16256-16257	=	
67-32	16257-16258	8	
67-33	16258-16259	)	

#Text=Parallel Seq Scan on pgbench_history mx (cost=0.00..7559.67 rows=265967 width=8) Nested Loop (cost=0.27..14651.15 rows=89 width=8) Join Filter: (h.bid = b.bid)
68-1	16260-16268	Parallel	
68-2	16269-16272	Seq	
68-3	16273-16277	Scan	
68-4	16278-16280	on	
68-5	16281-16296	pgbench_history	
68-6	16297-16299	mx	
68-7	16300-16301	(	
68-8	16301-16305	cost	
68-9	16305-16306	=	
68-10	16306-16310	0.00	
68-11	16310-16311	.	
68-12	16311-16319	.7559.67	
68-13	16320-16324	rows	
68-14	16324-16325	=	
68-15	16325-16331	265967	
68-16	16332-16337	width	
68-17	16337-16338	=	
68-18	16338-16339	8	
68-19	16339-16340	)	
68-20	16341-16347	Nested	
68-21	16348-16352	Loop	
68-22	16353-16354	(	
68-23	16354-16358	cost	
68-24	16358-16359	=	
68-25	16359-16363	0.27	
68-26	16363-16364	.	
68-27	16364-16373	.14651.15	
68-28	16374-16378	rows	
68-29	16378-16379	=	
68-30	16379-16381	89	
68-31	16382-16387	width	
68-32	16387-16388	=	
68-33	16388-16389	8	
68-34	16389-16390	)	
68-35	16391-16395	Join	
68-36	16396-16402	Filter	
68-37	16402-16403	:	
68-38	16404-16405	(	
68-39	16405-16410	h.bid	
68-40	16411-16412	=	
68-41	16413-16418	b.bid	
68-42	16418-16419	)	

#Text=Index Scan using pgbench_branches_pkey on pgbench_branches b (cost=0.27..24.73 rows=3 width=8) Index Cond: (bid = ANY ('{1,2,3}'::integer[])) Materialize (cost=0.00..14490.76 rows=3192 width=8)
69-1	16420-16425	Index	
69-2	16426-16430	Scan	
69-3	16431-16436	using	
69-4	16437-16458	pgbench_branches_pkey	
69-5	16459-16461	on	
69-6	16462-16478	pgbench_branches	
69-7	16479-16480	b	
69-8	16481-16482	(	
69-9	16482-16486	cost	
69-10	16486-16487	=	
69-11	16487-16491	0.27	
69-12	16491-16492	.	
69-13	16492-16498	.24.73	
69-14	16499-16503	rows	
69-15	16503-16504	=	
69-16	16504-16505	3	
69-17	16506-16511	width	
69-18	16511-16512	=	
69-19	16512-16513	8	
69-20	16513-16514	)	
69-21	16515-16520	Index	
69-22	16521-16525	Cond	
69-23	16525-16526	:	
69-24	16527-16528	(	
69-25	16528-16531	bid	
69-26	16532-16533	=	
69-27	16534-16537	ANY	
69-28	16538-16539	(	
69-29	16539-16540	'	
69-30	16540-16541	{	
69-31	16541-16546	1,2,3	
69-32	16546-16547	}	
69-33	16547-16548	'	
69-34	16548-16549	:	
69-35	16549-16550	:	
69-36	16550-16557	integer	
69-37	16557-16558	[	
69-38	16558-16559	]	
69-39	16559-16560	)	
69-40	16560-16561	)	
69-41	16562-16573	Materialize	
69-42	16574-16575	(	
69-43	16575-16579	cost	
69-44	16579-16580	=	
69-45	16580-16584	0.00	
69-46	16584-16585	.	
69-47	16585-16594	.14490.76	
69-48	16595-16599	rows	
69-49	16599-16600	=	
69-50	16600-16604	3192	
69-51	16605-16610	width	
69-52	16610-16611	=	
69-53	16611-16612	8	
69-54	16612-16613	)	

#Text=Seq Scan on pgbench_history h (cost=0.00..14474.80 rows=3192 width=8) Filter: ((mtime >= $2) AND (mtime <= $5)) Note: An Approved plan was used instead of the minimum cost plan.
70-1	16614-16617	Seq	
70-2	16618-16622	Scan	
70-3	16623-16625	on	
70-4	16626-16641	pgbench_history	
70-5	16642-16643	h	
70-6	16644-16645	(	
70-7	16645-16649	cost	
70-8	16649-16650	=	
70-9	16650-16654	0.00	
70-10	16654-16655	.	
70-11	16655-16664	.14474.80	
70-12	16665-16669	rows	
70-13	16669-16670	=	
70-14	16670-16674	3192	
70-15	16675-16680	width	
70-16	16680-16681	=	
70-17	16681-16682	8	
70-18	16682-16683	)	
70-19	16684-16690	Filter	
70-20	16690-16691	:	
70-21	16692-16693	(	
70-22	16693-16694	(	
70-23	16694-16699	mtime	
70-24	16700-16701	>	
70-25	16701-16702	=	
70-26	16703-16705	$2	
70-27	16705-16706	)	
70-28	16707-16710	AND	
70-29	16711-16712	(	
70-30	16712-16717	mtime	
70-31	16718-16719	<	
70-32	16719-16720	=	
70-33	16721-16723	$5	
70-34	16723-16724	)	
70-35	16724-16725	)	
70-36	16726-16730	Note	
70-37	16730-16731	:	
70-38	16732-16734	An	
70-39	16735-16743	Approved	
70-40	16744-16748	plan	
70-41	16749-16752	was	
70-42	16753-16757	used	
70-43	16758-16765	instead	
70-44	16766-16768	of	
70-45	16769-16772	the	
70-46	16773-16780	minimum	
70-47	16781-16785	cost	
70-48	16786-16790	plan	
70-49	16790-16791	.	

#Text=SQL Hash: 1561242727, Plan Hash: -1990695905, Minimum Cost Plan Hash: -794604077 (22 rows) i. Run the following SQL query to view the new plan and status of the plan. To ensure plan stability, QPM stores all the newly generated plans for a managed query in QPM as unapproved plans.
71-1	16792-16795	SQL	
71-2	16796-16800	Hash	
71-3	16800-16801	:	
71-4	16802-16812	1561242727	
71-5	16812-16813	,	
71-6	16814-16818	Plan	
71-7	16819-16823	Hash	
71-8	16823-16824	:	
71-9	16825-16826	-	
71-10	16826-16836	1990695905	
71-11	16836-16837	,	
71-12	16838-16845	Minimum	
71-13	16846-16850	Cost	
71-14	16851-16855	Plan	
71-15	16856-16860	Hash	
71-16	16860-16861	:	
71-17	16862-16863	-	
71-18	16863-16872	794604077	
71-19	16873-16874	(	
71-20	16874-16876	22	
71-21	16877-16881	rows	
71-22	16881-16882	)	
71-23	16883-16884	i	
71-24	16884-16885	.	
71-25	16886-16889	Run	
71-26	16890-16893	the	
71-27	16894-16903	following	
71-28	16904-16907	SQL	
71-29	16908-16913	query	
71-30	16914-16916	to	
71-31	16917-16921	view	
71-32	16922-16925	the	
71-33	16926-16929	new	
71-34	16930-16934	plan	
71-35	16935-16938	and	
71-36	16939-16945	status	
71-37	16946-16948	of	
71-38	16949-16952	the	
71-39	16953-16957	plan	
71-40	16957-16958	.	
71-41	16959-16961	To	
71-42	16962-16968	ensure	
71-43	16969-16973	plan	
71-44	16974-16983	stability	
71-45	16983-16984	,	
71-46	16985-16988	QPM	
71-47	16989-16995	stores	
71-48	16996-16999	all	
71-49	17000-17003	the	
71-50	17004-17009	newly	
71-51	17010-17019	generated	
71-52	17020-17025	plans	
71-53	17026-17029	for	
71-54	17030-17031	a	
71-55	17032-17039	managed	
71-56	17040-17045	query	
71-57	17046-17048	in	
71-58	17049-17052	QPM	
71-59	17053-17055	as	
71-60	17056-17066	unapproved	
71-61	17067-17072	plans	
71-62	17072-17073	.	

#Text=The following output shows that there are two different execution plans stored for the same managed statement, as shown by the two different plan_hash values. Although the new execution plan has the minimum cost (lower than the approved plan), QPM continues to ignore the unapproved plans to maintain plan stability. The plan_outline column in the table apg_plan_mgmt.dba_plans shows the entire plan for the SQL. For brevity, the plan_outline is not shown here. Instead, plan_hash_value from the explain plan preceding is compared with plan_hash from the output of the apg_plan_mgmt.dba_plans query.
72-1	17074-17077	The	
72-2	17078-17087	following	
72-3	17088-17094	output	
72-4	17095-17100	shows	
72-5	17101-17105	that	
72-6	17106-17111	there	
72-7	17112-17115	are	
72-8	17116-17119	two	
72-9	17120-17129	different	
72-10	17130-17139	execution	
72-11	17140-17145	plans	
72-12	17146-17152	stored	
72-13	17153-17156	for	
72-14	17157-17160	the	
72-15	17161-17165	same	
72-16	17166-17173	managed	
72-17	17174-17183	statement	
72-18	17183-17184	,	
72-19	17185-17187	as	
72-20	17188-17193	shown	
72-21	17194-17196	by	
72-22	17197-17200	the	
72-23	17201-17204	two	
72-24	17205-17214	different	
72-25	17215-17224	plan_hash	
72-26	17225-17231	values	
72-27	17231-17232	.	
72-28	17233-17241	Although	
72-29	17242-17245	the	
72-30	17246-17249	new	
72-31	17250-17259	execution	
72-32	17260-17264	plan	
72-33	17265-17268	has	
72-34	17269-17272	the	
72-35	17273-17280	minimum	
72-36	17281-17285	cost	
72-37	17286-17287	(	
72-38	17287-17292	lower	
72-39	17293-17297	than	
72-40	17298-17301	the	
72-41	17302-17310	approved	
72-42	17311-17315	plan	
72-43	17315-17316	)	
72-44	17316-17317	,	
72-45	17318-17321	QPM	
72-46	17322-17331	continues	
72-47	17332-17334	to	
72-48	17335-17341	ignore	
72-49	17342-17345	the	
72-50	17346-17356	unapproved	
72-51	17357-17362	plans	
72-52	17363-17365	to	
72-53	17366-17374	maintain	
72-54	17375-17379	plan	
72-55	17380-17389	stability	
72-56	17389-17390	.	
72-57	17391-17394	The	
72-58	17395-17407	plan_outline	
72-59	17408-17414	column	
72-60	17415-17417	in	
72-61	17418-17421	the	
72-62	17422-17427	table	
72-63	17428-17451	apg_plan_mgmt.dba_plans	
72-64	17452-17457	shows	
72-65	17458-17461	the	
72-66	17462-17468	entire	
72-67	17469-17473	plan	
72-68	17474-17477	for	
72-69	17478-17481	the	
72-70	17482-17485	SQL	
72-71	17485-17486	.	
72-72	17487-17490	For	
72-73	17491-17498	brevity	
72-74	17498-17499	,	
72-75	17500-17503	the	
72-76	17504-17516	plan_outline	
72-77	17517-17519	is	
72-78	17520-17523	not	
72-79	17524-17529	shown	
72-80	17530-17534	here	
72-81	17534-17535	.	
72-82	17536-17543	Instead	
72-83	17543-17544	,	
72-84	17545-17560	plan_hash_value	
72-85	17561-17565	from	
72-86	17566-17569	the	
72-87	17570-17577	explain	
72-88	17578-17582	plan	
72-89	17583-17592	preceding	
72-90	17593-17595	is	
72-91	17596-17604	compared	
72-92	17605-17609	with	
72-93	17610-17619	plan_hash	
72-94	17620-17624	from	
72-95	17625-17628	the	
72-96	17629-17635	output	
72-97	17636-17638	of	
72-98	17639-17642	the	
72-99	17643-17666	apg_plan_mgmt.dba_plans	
72-100	17667-17672	query	
72-101	17672-17673	.	

#Text=SELECT sql_hash, plan_hash, status, estimated_total_cost "cost", sql_text FROM apg_plan_mgmt.dba_plans; Output: sql_hash plan_hash
73-1	17674-17680	SELECT	
73-2	17681-17689	sql_hash	
73-3	17689-17690	,	
73-4	17691-17700	plan_hash	
73-5	17700-17701	,	
73-6	17702-17708	status	
73-7	17708-17709	,	
73-8	17710-17730	estimated_total_cost	
73-9	17731-17732	"	
73-10	17732-17736	cost	
73-11	17736-17737	"	
73-12	17737-17738	,	
73-13	17739-17747	sql_text	
73-14	17748-17752	FROM	
73-15	17753-17776	apg_plan_mgmt.dba_plans	
73-16	17776-17777	;	
73-17	17778-17784	Output	
73-18	17784-17785	:	
73-19	17786-17794	sql_hash	
73-20	17795-17804	plan_hash	

#Text=status | cost \t| sql_text ------------+-------------+----------+---------+----------------------------
74-1	17805-17811	status	
74-2	17812-17813	|	
74-3	17814-17818	cost	
74-4	17820-17821	|	
74-5	17822-17830	sql_text	
74-6	17831-17832	-	
74-7	17832-17833	-	
74-8	17833-17834	-	
74-9	17834-17835	-	
74-10	17835-17836	-	
74-11	17836-17837	-	
74-12	17837-17838	-	
74-13	17838-17839	-	
74-14	17839-17840	-	
74-15	17840-17841	-	
74-16	17841-17842	-	
74-17	17842-17843	-	
74-18	17843-17844	+	
74-19	17844-17845	-	
74-20	17845-17846	-	
74-21	17846-17847	-	
74-22	17847-17848	-	
74-23	17848-17849	-	
74-24	17849-17850	-	
74-25	17850-17851	-	
74-26	17851-17852	-	
74-27	17852-17853	-	
74-28	17853-17854	-	
74-29	17854-17855	-	
74-30	17855-17856	-	
74-31	17856-17857	-	
74-32	17857-17858	+	
74-33	17858-17859	-	
74-34	17859-17860	-	
74-35	17860-17861	-	
74-36	17861-17862	-	
74-37	17862-17863	-	
74-38	17863-17864	-	
74-39	17864-17865	-	
74-40	17865-17866	-	
74-41	17866-17867	-	
74-42	17867-17868	-	
74-43	17868-17869	+	
74-44	17869-17870	-	
74-45	17870-17871	-	
74-46	17871-17872	-	
74-47	17872-17873	-	
74-48	17873-17874	-	
74-49	17874-17875	-	
74-50	17875-17876	-	
74-51	17876-17877	-	
74-52	17877-17878	-	
74-53	17878-17879	+	
74-54	17879-17880	-	
74-55	17880-17881	-	
74-56	17881-17882	-	
74-57	17882-17883	-	
74-58	17883-17884	-	
74-59	17884-17885	-	
74-60	17885-17886	-	
74-61	17886-17887	-	
74-62	17887-17888	-	
74-63	17888-17889	-	
74-64	17889-17890	-	
74-65	17890-17891	-	
74-66	17891-17892	-	
74-67	17892-17893	-	
74-68	17893-17894	-	
74-69	17894-17895	-	
74-70	17895-17896	-	
74-71	17896-17897	-	
74-72	17897-17898	-	
74-73	17898-17899	-	
74-74	17899-17900	-	
74-75	17900-17901	-	
74-76	17901-17902	-	
74-77	17902-17903	-	
74-78	17903-17904	-	
74-79	17904-17905	-	
74-80	17905-17906	-	
74-81	17906-17907	-	

#Text=1561242727\t-1990695905\t Approved \t 23228.14 select sum(delta),sum(bbalance) from pgbench_history h, pgbench_branches b where b.bid=h.bid and b.bid in (1,2,3) and mtime between (select min(mtime) from pgbench_history mn) and (select max(mtime) from pgbench_history mx);
75-1	17908-17918	1561242727	
75-2	17919-17920	-	
75-3	17920-17930	1990695905	
75-4	17932-17940	Approved	
75-5	17943-17951	23228.14	
75-6	17952-17958	select	
75-7	17959-17962	sum	
75-8	17962-17963	(	
75-9	17963-17968	delta	
75-10	17968-17969	)	
75-11	17969-17970	,	
75-12	17970-17973	sum	
75-13	17973-17974	(	
75-14	17974-17982	bbalance	
75-15	17982-17983	)	
75-16	17984-17988	from	
75-17	17989-18004	pgbench_history	
75-18	18005-18006	h	
75-19	18006-18007	,	
75-20	18008-18024	pgbench_branches	
75-21	18025-18026	b	
75-22	18027-18032	where	
75-23	18033-18038	b.bid	
75-24	18038-18039	=	
75-25	18039-18044	h.bid	
75-26	18045-18048	and	
75-27	18049-18054	b.bid	
75-28	18055-18057	in	
75-29	18058-18059	(	
75-30	18059-18064	1,2,3	
75-31	18064-18065	)	
75-32	18066-18069	and	
75-33	18070-18075	mtime	
75-34	18076-18083	between	
75-35	18084-18085	(	
75-36	18085-18091	select	
75-37	18092-18095	min	
75-38	18095-18096	(	
75-39	18096-18101	mtime	
75-40	18101-18102	)	
75-41	18103-18107	from	
75-42	18108-18123	pgbench_history	
75-43	18124-18126	mn	
75-44	18126-18127	)	
75-45	18128-18131	and	
75-46	18132-18133	(	
75-47	18133-18139	select	
75-48	18140-18143	max	
75-49	18143-18144	(	
75-50	18144-18149	mtime	
75-51	18149-18150	)	
75-52	18151-18155	from	
75-53	18156-18171	pgbench_history	
75-54	18172-18174	mx	
75-55	18174-18175	)	
75-56	18175-18176	;	

#Text=1561242727\t-794604077\t UnApproved \t 111.17 select sum(delta),sum(bbalance) from pgbench_history h, pgbench_branches b where b.bid=h.bid and b.bid in (1,2,3) and mtime between (select min(mtime) from pgbench_history mn) and (select max(mtime) from pgbench_history mx);
76-1	18177-18187	1561242727	
76-2	18188-18189	-	
76-3	18189-18198	794604077	
76-4	18200-18210	UnApproved	
76-5	18213-18219	111.17	
76-6	18220-18226	select	
76-7	18227-18230	sum	
76-8	18230-18231	(	
76-9	18231-18236	delta	
76-10	18236-18237	)	
76-11	18237-18238	,	
76-12	18238-18241	sum	
76-13	18241-18242	(	
76-14	18242-18250	bbalance	
76-15	18250-18251	)	
76-16	18252-18256	from	
76-17	18257-18272	pgbench_history	
76-18	18273-18274	h	
76-19	18274-18275	,	
76-20	18276-18292	pgbench_branches	
76-21	18293-18294	b	
76-22	18295-18300	where	
76-23	18301-18306	b.bid	
76-24	18306-18307	=	
76-25	18307-18312	h.bid	
76-26	18313-18316	and	
76-27	18317-18322	b.bid	
76-28	18323-18325	in	
76-29	18326-18327	(	
76-30	18327-18332	1,2,3	
76-31	18332-18333	)	
76-32	18334-18337	and	
76-33	18338-18343	mtime	
76-34	18344-18351	between	
76-35	18352-18353	(	
76-36	18353-18359	select	
76-37	18360-18363	min	
76-38	18363-18364	(	
76-39	18364-18369	mtime	
76-40	18369-18370	)	
76-41	18371-18375	from	
76-42	18376-18391	pgbench_history	
76-43	18392-18394	mn	
76-44	18394-18395	)	
76-45	18396-18399	and	
76-46	18400-18401	(	
76-47	18401-18407	select	
76-48	18408-18411	max	
76-49	18411-18412	(	
76-50	18412-18417	mtime	
76-51	18417-18418	)	
76-52	18419-18423	from	
76-53	18424-18439	pgbench_history	
76-54	18440-18442	mx	
76-55	18442-18443	)	
76-56	18443-18444	;	

#Text=The following is an example of plan adaptability with QPM. This example evaluates the unapproved plan based on the minimum speedup factor. It approves any captured unapproved plan that is faster by at least 10 percent than the best approved plan for the statement. For additional details, see Evaluating Plan Performance in the Aurora documentation. SELECT apg_plan_mgmt.Evolve_plan_baselines (sql_hash, plan_hash, 1.1,'approve') FROM apg_plan_mgmt.dba_plans
77-1	18445-18448	The	
77-2	18449-18458	following	
77-3	18459-18461	is	
77-4	18462-18464	an	
77-5	18465-18472	example	
77-6	18473-18475	of	
77-7	18476-18480	plan	
77-8	18481-18493	adaptability	
77-9	18494-18498	with	
77-10	18499-18502	QPM	
77-11	18502-18503	.	
77-12	18504-18508	This	
77-13	18509-18516	example	
77-14	18517-18526	evaluates	
77-15	18527-18530	the	
77-16	18531-18541	unapproved	
77-17	18542-18546	plan	
77-18	18547-18552	based	
77-19	18553-18555	on	
77-20	18556-18559	the	
77-21	18560-18567	minimum	
77-22	18568-18575	speedup	
77-23	18576-18582	factor	
77-24	18582-18583	.	
77-25	18584-18586	It	
77-26	18587-18595	approves	
77-27	18596-18599	any	
77-28	18600-18608	captured	
77-29	18609-18619	unapproved	
77-30	18620-18624	plan	
77-31	18625-18629	that	
77-32	18630-18632	is	
77-33	18633-18639	faster	
77-34	18640-18642	by	
77-35	18643-18645	at	
77-36	18646-18651	least	
77-37	18652-18654	10	
77-38	18655-18662	percent	
77-39	18663-18667	than	
77-40	18668-18671	the	
77-41	18672-18676	best	
77-42	18677-18685	approved	
77-43	18686-18690	plan	
77-44	18691-18694	for	
77-45	18695-18698	the	
77-46	18699-18708	statement	
77-47	18708-18709	.	
77-48	18710-18713	For	
77-49	18714-18724	additional	
77-50	18725-18732	details	
77-51	18732-18733	,	
77-52	18734-18737	see	
77-53	18738-18748	Evaluating	
77-54	18749-18753	Plan	
77-55	18754-18765	Performance	
77-56	18766-18768	in	
77-57	18769-18772	the	
77-58	18773-18779	Aurora	
77-59	18780-18793	documentation	
77-60	18793-18794	.	
77-61	18795-18801	SELECT	
77-62	18802-18837	apg_plan_mgmt.Evolve_plan_baselines	
77-63	18838-18839	(	
77-64	18839-18847	sql_hash	
77-65	18847-18848	,	
77-66	18849-18858	plan_hash	
77-67	18858-18859	,	
77-68	18860-18863	1.1	
77-69	18863-18864	,	
77-70	18864-18865	'	
77-71	18865-18872	approve	
77-72	18872-18873	'	
77-73	18873-18874	)	
77-74	18875-18879	FROM	
77-75	18880-18903	apg_plan_mgmt.dba_plans	

#Text=WHERE status = 'Unapproved'; Output: NOTICE: [Unapproved] SQL Hash: 1561242727, Plan Hash: -794604077, SELECT sum(delta),sum(bbalance) from pgbench_history h, pgbench_branches b where ...
78-1	18904-18909	WHERE	
78-2	18910-18916	status	
78-3	18917-18918	=	
78-4	18919-18920	'	
78-5	18920-18930	Unapproved	
78-6	18930-18931	'	
78-7	18931-18932	;	
78-8	18933-18939	Output	
78-9	18939-18940	:	
78-10	18941-18947	NOTICE	
78-11	18947-18948	:	
78-12	18949-18950	[	
78-13	18950-18960	Unapproved	
78-14	18960-18961	]	
78-15	18962-18965	SQL	
78-16	18966-18970	Hash	
78-17	18970-18971	:	
78-18	18972-18982	1561242727	
78-19	18982-18983	,	
78-20	18984-18988	Plan	
78-21	18989-18993	Hash	
78-22	18993-18994	:	
78-23	18995-18996	-	
78-24	18996-19005	794604077	
78-25	19005-19006	,	
78-26	19007-19013	SELECT	
78-27	19014-19017	sum	
78-28	19017-19018	(	
78-29	19018-19023	delta	
78-30	19023-19024	)	
78-31	19024-19025	,	
78-32	19025-19028	sum	
78-33	19028-19029	(	
78-34	19029-19037	bbalance	
78-35	19037-19038	)	
78-36	19039-19043	from	
78-37	19044-19059	pgbench_history	
78-38	19060-19061	h	
78-39	19061-19062	,	
78-40	19063-19079	pgbench_branches	
78-41	19080-19081	b	
78-42	19082-19087	where	
78-43	19088-19089	.	
78-44	19089-19090	.	
78-45	19090-19091	.	

#Text=NOTICE: Baseline [Planning time 0.693 ms, Execution time 316.644 ms] NOTICE: Baseline+1 [Planning time 0.695 ms, Execution time 213.919 ms] NOTICE:
79-1	19092-19098	NOTICE	
79-2	19098-19099	:	
79-3	19100-19108	Baseline	
79-4	19109-19110	[	
79-5	19110-19118	Planning	
79-6	19119-19123	time	
79-7	19124-19129	0.693	
79-8	19130-19132	ms	
79-9	19132-19133	,	
79-10	19134-19143	Execution	
79-11	19144-19148	time	
79-12	19149-19156	316.644	
79-13	19157-19159	ms	
79-14	19159-19160	]	
79-15	19161-19167	NOTICE	
79-16	19167-19168	:	
79-17	19169-19177	Baseline	
79-18	19177-19178	+	
79-19	19178-19179	1	
79-20	19180-19181	[	
79-21	19181-19189	Planning	
79-22	19190-19194	time	
79-23	19195-19200	0.695	
79-24	19201-19203	ms	
79-25	19203-19204	,	
79-26	19205-19214	Execution	
79-27	19215-19219	time	
79-28	19220-19227	213.919	
79-29	19228-19230	ms	
79-30	19230-19231	]	
79-31	19232-19238	NOTICE	
79-32	19238-19239	:	

#Text=Total time benefit: 102.723 ms, Execution time benefit: 102.725 ms, Avg Log Cardinality Error: 3.53418, Cost = 111.16..111.17 NOTICE: Unapproved -> Approved After QPM evaluates the plan based on the speed factor, the plan status changes from unapproved to approved. At this point, the optimizer can choose the newly approved lower cost plan for that managed statement.
80-1	19240-19245	Total	
80-2	19246-19250	time	
80-3	19251-19258	benefit	
80-4	19258-19259	:	
80-5	19260-19267	102.723	
80-6	19268-19270	ms	
80-7	19270-19271	,	
80-8	19272-19281	Execution	
80-9	19282-19286	time	
80-10	19287-19294	benefit	
80-11	19294-19295	:	
80-12	19296-19303	102.725	
80-13	19304-19306	ms	
80-14	19306-19307	,	
80-15	19308-19311	Avg	
80-16	19312-19315	Log	
80-17	19316-19327	Cardinality	
80-18	19328-19333	Error	
80-19	19333-19334	:	
80-20	19335-19342	3.53418	
80-21	19342-19343	,	
80-22	19344-19348	Cost	
80-23	19349-19350	=	
80-24	19351-19357	111.16	
80-25	19357-19358	.	
80-26	19358-19365	.111.17	
80-27	19366-19372	NOTICE	
80-28	19372-19373	:	
80-29	19374-19384	Unapproved	
80-30	19385-19386	-	
80-31	19386-19387	>	
80-32	19388-19396	Approved	
80-33	19397-19402	After	
80-34	19403-19406	QPM	
80-35	19407-19416	evaluates	
80-36	19417-19420	the	
80-37	19421-19425	plan	
80-38	19426-19431	based	
80-39	19432-19434	on	
80-40	19435-19438	the	
80-41	19439-19444	speed	
80-42	19445-19451	factor	
80-43	19451-19452	,	
80-44	19453-19456	the	
80-45	19457-19461	plan	
80-46	19462-19468	status	
80-47	19469-19476	changes	
80-48	19477-19481	from	
80-49	19482-19492	unapproved	
80-50	19493-19495	to	
80-51	19496-19504	approved	
80-52	19504-19505	.	
80-53	19506-19508	At	
80-54	19509-19513	this	
80-55	19514-19519	point	
80-56	19519-19520	,	
80-57	19521-19524	the	
80-58	19525-19534	optimizer	
80-59	19535-19538	can	
80-60	19539-19545	choose	
80-61	19546-19549	the	
80-62	19550-19555	newly	
80-63	19556-19564	approved	
80-64	19565-19570	lower	
80-65	19571-19575	cost	
80-66	19576-19580	plan	
80-67	19581-19584	for	
80-68	19585-19589	that	
80-69	19590-19597	managed	
80-70	19598-19607	statement	
80-71	19607-19608	.	

#Text=SELECT sql_hash, plan_hash, status, estimated_total_cost "cost", sql_text FROM apg_plan_mgmt.dba_plans; Output: sql_hash plan_hash
81-1	19609-19615	SELECT	
81-2	19616-19624	sql_hash	
81-3	19624-19625	,	
81-4	19626-19635	plan_hash	
81-5	19635-19636	,	
81-6	19637-19643	status	
81-7	19643-19644	,	
81-8	19645-19665	estimated_total_cost	
81-9	19666-19667	"	
81-10	19667-19671	cost	
81-11	19671-19672	"	
81-12	19672-19673	,	
81-13	19674-19682	sql_text	
81-14	19683-19687	FROM	
81-15	19688-19711	apg_plan_mgmt.dba_plans	
81-16	19711-19712	;	
81-17	19713-19719	Output	
81-18	19719-19720	:	
81-19	19721-19729	sql_hash	
81-20	19730-19739	plan_hash	

#Text=status cost | sql_text ------------+-------------+----------+---------+-----------------------------------------
82-1	19740-19746	status	
82-2	19747-19751	cost	
82-3	19752-19753	|	
82-4	19754-19762	sql_text	
82-5	19763-19764	-	
82-6	19764-19765	-	
82-7	19765-19766	-	
82-8	19766-19767	-	
82-9	19767-19768	-	
82-10	19768-19769	-	
82-11	19769-19770	-	
82-12	19770-19771	-	
82-13	19771-19772	-	
82-14	19772-19773	-	
82-15	19773-19774	-	
82-16	19774-19775	-	
82-17	19775-19776	+	
82-18	19776-19777	-	
82-19	19777-19778	-	
82-20	19778-19779	-	
82-21	19779-19780	-	
82-22	19780-19781	-	
82-23	19781-19782	-	
82-24	19782-19783	-	
82-25	19783-19784	-	
82-26	19784-19785	-	
82-27	19785-19786	-	
82-28	19786-19787	-	
82-29	19787-19788	-	
82-30	19788-19789	-	
82-31	19789-19790	+	
82-32	19790-19791	-	
82-33	19791-19792	-	
82-34	19792-19793	-	
82-35	19793-19794	-	
82-36	19794-19795	-	
82-37	19795-19796	-	
82-38	19796-19797	-	
82-39	19797-19798	-	
82-40	19798-19799	-	
82-41	19799-19800	-	
82-42	19800-19801	+	
82-43	19801-19802	-	
82-44	19802-19803	-	
82-45	19803-19804	-	
82-46	19804-19805	-	
82-47	19805-19806	-	
82-48	19806-19807	-	
82-49	19807-19808	-	
82-50	19808-19809	-	
82-51	19809-19810	-	
82-52	19810-19811	+	
82-53	19811-19812	-	
82-54	19812-19813	-	
82-55	19813-19814	-	
82-56	19814-19815	-	
82-57	19815-19816	-	
82-58	19816-19817	-	
82-59	19817-19818	-	
82-60	19818-19819	-	
82-61	19819-19820	-	
82-62	19820-19821	-	
82-63	19821-19822	-	
82-64	19822-19823	-	
82-65	19823-19824	-	
82-66	19824-19825	-	
82-67	19825-19826	-	
82-68	19826-19827	-	
82-69	19827-19828	-	
82-70	19828-19829	-	
82-71	19829-19830	-	
82-72	19830-19831	-	
82-73	19831-19832	-	
82-74	19832-19833	-	
82-75	19833-19834	-	
82-76	19834-19835	-	
82-77	19835-19836	-	
82-78	19836-19837	-	
82-79	19837-19838	-	
82-80	19838-19839	-	
82-81	19839-19840	-	
82-82	19840-19841	-	
82-83	19841-19842	-	
82-84	19842-19843	-	
82-85	19843-19844	-	
82-86	19844-19845	-	
82-87	19845-19846	-	
82-88	19846-19847	-	
82-89	19847-19848	-	
82-90	19848-19849	-	
82-91	19849-19850	-	
82-92	19850-19851	-	
82-93	19851-19852	-	

#Text=1561242727\t-1990695905\t Approved \t 23228.14 select sum(delta),sum(bbalance) from pgbench_history h, pgbench_branches b where b.bid=h.bid and b.bid in (1,2,3) and mtime between (select min(mtime) from pgbench_history mn) and (select max(mtime) from pgbench_history mx);
83-1	19853-19863	1561242727	
83-2	19864-19865	-	
83-3	19865-19875	1990695905	
83-4	19877-19885	Approved	
83-5	19888-19896	23228.14	
83-6	19897-19903	select	
83-7	19904-19907	sum	
83-8	19907-19908	(	
83-9	19908-19913	delta	
83-10	19913-19914	)	
83-11	19914-19915	,	
83-12	19915-19918	sum	
83-13	19918-19919	(	
83-14	19919-19927	bbalance	
83-15	19927-19928	)	
83-16	19929-19933	from	
83-17	19934-19949	pgbench_history	
83-18	19950-19951	h	
83-19	19951-19952	,	
83-20	19953-19969	pgbench_branches	
83-21	19970-19971	b	
83-22	19972-19977	where	
83-23	19978-19983	b.bid	
83-24	19983-19984	=	
83-25	19984-19989	h.bid	
83-26	19990-19993	and	
83-27	19994-19999	b.bid	
83-28	20000-20002	in	
83-29	20003-20004	(	
83-30	20004-20009	1,2,3	
83-31	20009-20010	)	
83-32	20011-20014	and	
83-33	20015-20020	mtime	
83-34	20021-20028	between	
83-35	20029-20030	(	
83-36	20030-20036	select	
83-37	20037-20040	min	
83-38	20040-20041	(	
83-39	20041-20046	mtime	
83-40	20046-20047	)	
83-41	20048-20052	from	
83-42	20053-20068	pgbench_history	
83-43	20069-20071	mn	
83-44	20071-20072	)	
83-45	20073-20076	and	
83-46	20077-20078	(	
83-47	20078-20084	select	
83-48	20085-20088	max	
83-49	20088-20089	(	
83-50	20089-20094	mtime	
83-51	20094-20095	)	
83-52	20096-20100	from	
83-53	20101-20116	pgbench_history	
83-54	20117-20119	mx	
83-55	20119-20120	)	
83-56	20120-20121	;	

#Text=1561242727\t-794604077\t Approved \t 111.17 select sum(delta),sum(bbalance) from pgbench_history h, pgbench_branches b where b.bid=h.bid and b.bid in (1,2,3) and mtime between (select min(mtime) from pgbench_history mn) and (select max(mtime) from pgbench_history mx);
84-1	20122-20132	1561242727	
84-2	20133-20134	-	
84-3	20134-20143	794604077	
84-4	20145-20153	Approved	
84-5	20156-20162	111.17	
84-6	20163-20169	select	
84-7	20170-20173	sum	
84-8	20173-20174	(	
84-9	20174-20179	delta	
84-10	20179-20180	)	
84-11	20180-20181	,	
84-12	20181-20184	sum	
84-13	20184-20185	(	
84-14	20185-20193	bbalance	
84-15	20193-20194	)	
84-16	20195-20199	from	
84-17	20200-20215	pgbench_history	
84-18	20216-20217	h	
84-19	20217-20218	,	
84-20	20219-20235	pgbench_branches	
84-21	20236-20237	b	
84-22	20238-20243	where	
84-23	20244-20249	b.bid	
84-24	20249-20250	=	
84-25	20250-20255	h.bid	
84-26	20256-20259	and	
84-27	20260-20265	b.bid	
84-28	20266-20268	in	
84-29	20269-20270	(	
84-30	20270-20275	1,2,3	
84-31	20275-20276	)	
84-32	20277-20280	and	
84-33	20281-20286	mtime	
84-34	20287-20294	between	
84-35	20295-20296	(	
84-36	20296-20302	select	
84-37	20303-20306	min	
84-38	20306-20307	(	
84-39	20307-20312	mtime	
84-40	20312-20313	)	
84-41	20314-20318	from	
84-42	20319-20334	pgbench_history	
84-43	20335-20337	mn	
84-44	20337-20338	)	
84-45	20339-20342	and	
84-46	20343-20344	(	
84-47	20344-20350	select	
84-48	20351-20354	max	
84-49	20354-20355	(	
84-50	20355-20360	mtime	
84-51	20360-20361	)	
84-52	20362-20366	from	
84-53	20367-20382	pgbench_history	
84-54	20383-20385	mx	
84-55	20385-20386	)	
84-56	20386-20387	;	

#Text=j. View the explain plan output to see whether the query is using the newly approved minimum cost plan. explain (hashes true) SELECT Sum(delta), Sum(bbalance) FROM pgbench_history h, pgbench_branches b WHERE b.bid = h.bid
85-1	20388-20389	j	
85-2	20389-20390	.	
85-3	20391-20395	View	
85-4	20396-20399	the	
85-5	20400-20407	explain	
85-6	20408-20412	plan	
85-7	20413-20419	output	
85-8	20420-20422	to	
85-9	20423-20426	see	
85-10	20427-20434	whether	
85-11	20435-20438	the	
85-12	20439-20444	query	
85-13	20445-20447	is	
85-14	20448-20453	using	
85-15	20454-20457	the	
85-16	20458-20463	newly	
85-17	20464-20472	approved	
85-18	20473-20480	minimum	
85-19	20481-20485	cost	
85-20	20486-20490	plan	
85-21	20490-20491	.	
85-22	20492-20499	explain	
85-23	20500-20501	(	
85-24	20501-20507	hashes	
85-25	20508-20512	true	
85-26	20512-20513	)	
85-27	20514-20520	SELECT	
85-28	20521-20524	Sum	
85-29	20524-20525	(	
85-30	20525-20530	delta	
85-31	20530-20531	)	
85-32	20531-20532	,	
85-33	20533-20536	Sum	
85-34	20536-20537	(	
85-35	20537-20545	bbalance	
85-36	20545-20546	)	
85-37	20547-20551	FROM	
85-38	20552-20567	pgbench_history	
85-39	20568-20569	h	
85-40	20569-20570	,	
85-41	20571-20587	pgbench_branches	
85-42	20588-20589	b	
85-43	20590-20595	WHERE	
85-44	20596-20601	b.bid	
85-45	20602-20603	=	
85-46	20604-20609	h.bid	

#Text=AND b.bid IN ( 1, 2, 3 ) AND mtime BETWEEN (SELECT Min(mtime) FROM pgbench_history mn) AND (SELECT Max(mtime) FROM pgbench_history mx);
86-1	20610-20613	AND	
86-2	20614-20619	b.bid	
86-3	20620-20622	IN	
86-4	20623-20624	(	
86-5	20625-20626	1	
86-6	20626-20627	,	
86-7	20628-20629	2	
86-8	20629-20630	,	
86-9	20631-20632	3	
86-10	20633-20634	)	
86-11	20635-20638	AND	
86-12	20639-20644	mtime	
86-13	20645-20652	BETWEEN	
86-14	20653-20654	(	
86-15	20654-20660	SELECT	
86-16	20661-20664	Min	
86-17	20664-20665	(	
86-18	20665-20670	mtime	
86-19	20670-20671	)	
86-20	20672-20676	FROM	
86-21	20677-20692	pgbench_history	
86-22	20693-20695	mn	
86-23	20695-20696	)	
86-24	20697-20700	AND	
86-25	20701-20702	(	
86-26	20702-20708	SELECT	
86-27	20709-20712	Max	
86-28	20712-20713	(	
86-29	20713-20718	mtime	
86-30	20718-20719	)	
86-31	20720-20724	FROM	
86-32	20725-20740	pgbench_history	
86-33	20741-20743	mx	
86-34	20743-20744	)	
86-35	20744-20745	;	

#Text=Output: QUERY PLAN
87-1	20746-20752	Output	
87-2	20752-20753	:	
87-3	20754-20759	QUERY	
87-4	20760-20764	PLAN	

#Text=----------------------------------------------------------------------------------------------------------------- Aggregate (cost=163.22..163.23 rows=1 width=16) InitPlan 2 (returns $1) Result (cost=0.46..0.47 rows=1 width=8)
88-1	20765-20766	-	
88-2	20766-20767	-	
88-3	20767-20768	-	
88-4	20768-20769	-	
88-5	20769-20770	-	
88-6	20770-20771	-	
88-7	20771-20772	-	
88-8	20772-20773	-	
88-9	20773-20774	-	
88-10	20774-20775	-	
88-11	20775-20776	-	
88-12	20776-20777	-	
88-13	20777-20778	-	
88-14	20778-20779	-	
88-15	20779-20780	-	
88-16	20780-20781	-	
88-17	20781-20782	-	
88-18	20782-20783	-	
88-19	20783-20784	-	
88-20	20784-20785	-	
88-21	20785-20786	-	
88-22	20786-20787	-	
88-23	20787-20788	-	
88-24	20788-20789	-	
88-25	20789-20790	-	
88-26	20790-20791	-	
88-27	20791-20792	-	
88-28	20792-20793	-	
88-29	20793-20794	-	
88-30	20794-20795	-	
88-31	20795-20796	-	
88-32	20796-20797	-	
88-33	20797-20798	-	
88-34	20798-20799	-	
88-35	20799-20800	-	
88-36	20800-20801	-	
88-37	20801-20802	-	
88-38	20802-20803	-	
88-39	20803-20804	-	
88-40	20804-20805	-	
88-41	20805-20806	-	
88-42	20806-20807	-	
88-43	20807-20808	-	
88-44	20808-20809	-	
88-45	20809-20810	-	
88-46	20810-20811	-	
88-47	20811-20812	-	
88-48	20812-20813	-	
88-49	20813-20814	-	
88-50	20814-20815	-	
88-51	20815-20816	-	
88-52	20816-20817	-	
88-53	20817-20818	-	
88-54	20818-20819	-	
88-55	20819-20820	-	
88-56	20820-20821	-	
88-57	20821-20822	-	
88-58	20822-20823	-	
88-59	20823-20824	-	
88-60	20824-20825	-	
88-61	20825-20826	-	
88-62	20826-20827	-	
88-63	20827-20828	-	
88-64	20828-20829	-	
88-65	20829-20830	-	
88-66	20830-20831	-	
88-67	20831-20832	-	
88-68	20832-20833	-	
88-69	20833-20834	-	
88-70	20834-20835	-	
88-71	20835-20836	-	
88-72	20836-20837	-	
88-73	20837-20838	-	
88-74	20838-20839	-	
88-75	20839-20840	-	
88-76	20840-20841	-	
88-77	20841-20842	-	
88-78	20842-20843	-	
88-79	20843-20844	-	
88-80	20844-20845	-	
88-81	20845-20846	-	
88-82	20846-20847	-	
88-83	20847-20848	-	
88-84	20848-20849	-	
88-85	20849-20850	-	
88-86	20850-20851	-	
88-87	20851-20852	-	
88-88	20852-20853	-	
88-89	20853-20854	-	
88-90	20854-20855	-	
88-91	20855-20856	-	
88-92	20856-20857	-	
88-93	20857-20858	-	
88-94	20858-20859	-	
88-95	20859-20860	-	
88-96	20860-20861	-	
88-97	20861-20862	-	
88-98	20862-20863	-	
88-99	20863-20864	-	
88-100	20864-20865	-	
88-101	20865-20866	-	
88-102	20866-20867	-	
88-103	20867-20868	-	
88-104	20868-20869	-	
88-105	20869-20870	-	
88-106	20870-20871	-	
88-107	20871-20872	-	
88-108	20872-20873	-	
88-109	20873-20874	-	
88-110	20874-20875	-	
88-111	20875-20876	-	
88-112	20876-20877	-	
88-113	20877-20878	-	
88-114	20879-20888	Aggregate	
88-115	20889-20890	(	
88-116	20890-20894	cost	
88-117	20894-20895	=	
88-118	20895-20901	163.22	
88-119	20901-20902	.	
88-120	20902-20909	.163.23	
88-121	20910-20914	rows	
88-122	20914-20915	=	
88-123	20915-20916	1	
88-124	20917-20922	width	
88-125	20922-20923	=	
88-126	20923-20925	16	
88-127	20925-20926	)	
88-128	20927-20935	InitPlan	
88-129	20936-20937	2	
88-130	20938-20939	(	
88-131	20939-20946	returns	
88-132	20947-20949	$1	
88-133	20949-20950	)	
88-134	20951-20957	Result	
88-135	20958-20959	(	
88-136	20959-20963	cost	
88-137	20963-20964	=	
88-138	20964-20968	0.46	
88-139	20968-20969	.	
88-140	20969-20974	.0.47	
88-141	20975-20979	rows	
88-142	20979-20980	=	
88-143	20980-20981	1	
88-144	20982-20987	width	
88-145	20987-20988	=	
88-146	20988-20989	8	
88-147	20989-20990	)	

#Text=InitPlan 1 (returns $0) Limit (cost=0.42..0.46 rows=1 width=8) Index Only Scan using pgbench_hist_mtime on pgbench_history mn (cost=0.42..23092.45 rows=638320 width=8)
89-1	20991-20999	InitPlan	
89-2	21000-21001	1	
89-3	21002-21003	(	
89-4	21003-21010	returns	
89-5	21011-21013	$0	
89-6	21013-21014	)	
89-7	21015-21020	Limit	
89-8	21021-21022	(	
89-9	21022-21026	cost	
89-10	21026-21027	=	
89-11	21027-21031	0.42	
89-12	21031-21032	.	
89-13	21032-21037	.0.46	
89-14	21038-21042	rows	
89-15	21042-21043	=	
89-16	21043-21044	1	
89-17	21045-21050	width	
89-18	21050-21051	=	
89-19	21051-21052	8	
89-20	21052-21053	)	
89-21	21054-21059	Index	
89-22	21060-21064	Only	
89-23	21065-21069	Scan	
89-24	21070-21075	using	
89-25	21076-21094	pgbench_hist_mtime	
89-26	21095-21097	on	
89-27	21098-21113	pgbench_history	
89-28	21114-21116	mn	
89-29	21117-21118	(	
89-30	21118-21122	cost	
89-31	21122-21123	=	
89-32	21123-21127	0.42	
89-33	21127-21128	.	
89-34	21128-21137	.23092.45	
89-35	21138-21142	rows	
89-36	21142-21143	=	
89-37	21143-21149	638320	
89-38	21150-21155	width	
89-39	21155-21156	=	
89-40	21156-21157	8	
89-41	21157-21158	)	

#Text=Index Cond: (mtime IS NOT NULL) InitPlan 4 (returns $3) Result (cost=0.46..0.47 rows=1 width=8) InitPlan 3 (returns $2) Limit (cost=0.42..0.46 rows=1 width=8)
90-1	21159-21164	Index	
90-2	21165-21169	Cond	
90-3	21169-21170	:	
90-4	21171-21172	(	
90-5	21172-21177	mtime	
90-6	21178-21180	IS	
90-7	21181-21184	NOT	
90-8	21185-21189	NULL	
90-9	21189-21190	)	
90-10	21191-21199	InitPlan	
90-11	21200-21201	4	
90-12	21202-21203	(	
90-13	21203-21210	returns	
90-14	21211-21213	$3	
90-15	21213-21214	)	
90-16	21215-21221	Result	
90-17	21222-21223	(	
90-18	21223-21227	cost	
90-19	21227-21228	=	
90-20	21228-21232	0.46	
90-21	21232-21233	.	
90-22	21233-21238	.0.47	
90-23	21239-21243	rows	
90-24	21243-21244	=	
90-25	21244-21245	1	
90-26	21246-21251	width	
90-27	21251-21252	=	
90-28	21252-21253	8	
90-29	21253-21254	)	
90-30	21255-21263	InitPlan	
90-31	21264-21265	3	
90-32	21266-21267	(	
90-33	21267-21274	returns	
90-34	21275-21277	$2	
90-35	21277-21278	)	
90-36	21279-21284	Limit	
90-37	21285-21286	(	
90-38	21286-21290	cost	
90-39	21290-21291	=	
90-40	21291-21295	0.42	
90-41	21295-21296	.	
90-42	21296-21301	.0.46	
90-43	21302-21306	rows	
90-44	21306-21307	=	
90-45	21307-21308	1	
90-46	21309-21314	width	
90-47	21314-21315	=	
90-48	21315-21316	8	
90-49	21316-21317	)	

#Text=Index Only Scan Backward using pgbench_hist_mtime on pgbench_history mx (cost=0.42..23092.45 rows=638320 width=8) Index Cond: (mtime IS NOT NULL) Hash Join (cost=23.70..161.83 rows=89 width=8)
91-1	21318-21323	Index	
91-2	21324-21328	Only	
91-3	21329-21333	Scan	
91-4	21334-21342	Backward	
91-5	21343-21348	using	
91-6	21349-21367	pgbench_hist_mtime	
91-7	21368-21370	on	
91-8	21371-21386	pgbench_history	
91-9	21387-21389	mx	
91-10	21390-21391	(	
91-11	21391-21395	cost	
91-12	21395-21396	=	
91-13	21396-21400	0.42	
91-14	21400-21401	.	
91-15	21401-21410	.23092.45	
91-16	21411-21415	rows	
91-17	21415-21416	=	
91-18	21416-21422	638320	
91-19	21423-21428	width	
91-20	21428-21429	=	
91-21	21429-21430	8	
91-22	21430-21431	)	
91-23	21432-21437	Index	
91-24	21438-21442	Cond	
91-25	21442-21443	:	
91-26	21444-21445	(	
91-27	21445-21450	mtime	
91-28	21451-21453	IS	
91-29	21454-21457	NOT	
91-30	21458-21462	NULL	
91-31	21462-21463	)	
91-32	21464-21468	Hash	
91-33	21469-21473	Join	
91-34	21474-21475	(	
91-35	21475-21479	cost	
91-36	21479-21480	=	
91-37	21480-21485	23.70	
91-38	21485-21486	.	
91-39	21486-21493	.161.83	
91-40	21494-21498	rows	
91-41	21498-21499	=	
91-42	21499-21501	89	
91-43	21502-21507	width	
91-44	21507-21508	=	
91-45	21508-21509	8	
91-46	21509-21510	)	

#Text=Hash Cond: (h.bid = b.bid) Index Scan using pgbench_hist_mtime on pgbench_history h (cost=0.42..129.85 rows=3192 width=8) Index Cond: ((mtime >= $1) AND (mtime <= $3))
92-1	21511-21515	Hash	
92-2	21516-21520	Cond	
92-3	21520-21521	:	
92-4	21522-21523	(	
92-5	21523-21528	h.bid	
92-6	21529-21530	=	
92-7	21531-21536	b.bid	
92-8	21536-21537	)	
92-9	21538-21543	Index	
92-10	21544-21548	Scan	
92-11	21549-21554	using	
92-12	21555-21573	pgbench_hist_mtime	
92-13	21574-21576	on	
92-14	21577-21592	pgbench_history	
92-15	21593-21594	h	
92-16	21595-21596	(	
92-17	21596-21600	cost	
92-18	21600-21601	=	
92-19	21601-21605	0.42	
92-20	21605-21606	.	
92-21	21606-21613	.129.85	
92-22	21614-21618	rows	
92-23	21618-21619	=	
92-24	21619-21623	3192	
92-25	21624-21629	width	
92-26	21629-21630	=	
92-27	21630-21631	8	
92-28	21631-21632	)	
92-29	21633-21638	Index	
92-30	21639-21643	Cond	
92-31	21643-21644	:	
92-32	21645-21646	(	
92-33	21646-21647	(	
92-34	21647-21652	mtime	
92-35	21653-21654	>	
92-36	21654-21655	=	
92-37	21656-21658	$1	
92-38	21658-21659	)	
92-39	21660-21663	AND	
92-40	21664-21665	(	
92-41	21665-21670	mtime	
92-42	21671-21672	<	
92-43	21672-21673	=	
92-44	21674-21676	$3	
92-45	21676-21677	)	
92-46	21677-21678	)	

#Text=Hash (cost=23.23..23.23 rows=3 width=8) Bitmap Heap Scan on pgbench_branches b (cost=12.83..23.23 rows=3 width=8)
93-1	21679-21683	Hash	
93-2	21684-21685	(	
93-3	21685-21689	cost	
93-4	21689-21690	=	
93-5	21690-21695	23.23	
93-6	21695-21696	.	
93-7	21696-21702	.23.23	
93-8	21703-21707	rows	
93-9	21707-21708	=	
93-10	21708-21709	3	
93-11	21710-21715	width	
93-12	21715-21716	=	
93-13	21716-21717	8	
93-14	21717-21718	)	
93-15	21719-21725	Bitmap	
93-16	21726-21730	Heap	
93-17	21731-21735	Scan	
93-18	21736-21738	on	
93-19	21739-21755	pgbench_branches	
93-20	21756-21757	b	
93-21	21758-21759	(	
93-22	21759-21763	cost	
93-23	21763-21764	=	
93-24	21764-21769	12.83	
93-25	21769-21770	.	
93-26	21770-21776	.23.23	
93-27	21777-21781	rows	
93-28	21781-21782	=	
93-29	21782-21783	3	
93-30	21784-21789	width	
93-31	21789-21790	=	
93-32	21790-21791	8	
93-33	21791-21792	)	

#Text=Recheck Cond: (bid = ANY ('{1,2,3}'::integer[])) Bitmap Index Scan on pgbench_branches_pkey (cost=0.00..12.83 rows=3 width=0) Index Cond: (bid = ANY ('{1,2,3}'::integer[]))
94-1	21793-21800	Recheck	
94-2	21801-21805	Cond	
94-3	21805-21806	:	
94-4	21807-21808	(	
94-5	21808-21811	bid	
94-6	21812-21813	=	
94-7	21814-21817	ANY	
94-8	21818-21819	(	
94-9	21819-21820	'	
94-10	21820-21821	{	
94-11	21821-21826	1,2,3	
94-12	21826-21827	}	
94-13	21827-21828	'	
94-14	21828-21829	:	
94-15	21829-21830	:	
94-16	21830-21837	integer	
94-17	21837-21838	[	
94-18	21838-21839	]	
94-19	21839-21840	)	
94-20	21840-21841	)	
94-21	21842-21848	Bitmap	
94-22	21849-21854	Index	
94-23	21855-21859	Scan	
94-24	21860-21862	on	
94-25	21863-21884	pgbench_branches_pkey	
94-26	21885-21886	(	
94-27	21886-21890	cost	
94-28	21890-21891	=	
94-29	21891-21895	0.00	
94-30	21895-21896	.	
94-31	21896-21902	.12.83	
94-32	21903-21907	rows	
94-33	21907-21908	=	
94-34	21908-21909	3	
94-35	21910-21915	width	
94-36	21915-21916	=	
94-37	21916-21917	0	
94-38	21917-21918	)	
94-39	21919-21924	Index	
94-40	21925-21929	Cond	
94-41	21929-21930	:	
94-42	21931-21932	(	
94-43	21932-21935	bid	
94-44	21936-21937	=	
94-45	21938-21941	ANY	
94-46	21942-21943	(	
94-47	21943-21944	'	
94-48	21944-21945	{	
94-49	21945-21950	1,2,3	
94-50	21950-21951	}	
94-51	21951-21952	'	
94-52	21952-21953	:	
94-53	21953-21954	:	
94-54	21954-21961	integer	
94-55	21961-21962	[	
94-56	21962-21963	]	
94-57	21963-21964	)	
94-58	21964-21965	)	

#Text=SQL Hash: 1561242727, Plan Hash: -794604077 3. Fixing plans with QPM using pg_hint_plan
95-1	21966-21969	SQL	
95-2	21970-21974	Hash	
95-3	21974-21975	:	
95-4	21976-21986	1561242727	
95-5	21986-21987	,	
95-6	21988-21992	Plan	
95-7	21993-21997	Hash	
95-8	21997-21998	:	
95-9	21999-22000	-	
95-10	22000-22009	794604077	
95-11	22010-22011	3	
95-12	22011-22012	.	
95-13	22013-22019	Fixing	
95-14	22020-22025	plans	
95-15	22026-22030	with	
95-16	22031-22034	QPM	
95-17	22035-22040	using	
95-18	22041-22053	pg_hint_plan	

#Text=In some cases, the query optimizer doesn’t generate the best execution plan for the query. One approach to fixing this problem is to put query hints into your application code, but this approach is widely discouraged because it makes applications more brittle and harder to maintain, and in some cases, you can’t hint the SQL because it is generated by a 3rd party application. What we will show is how to use hints to control the query optimizer, but then to remove the hints and allow QPM to enforce the desired plan, without adding hints to the application code. For this purpose, PostgreSQL users can use the pg_hint_plan extension to provide directives such as “scan method”, “join method”, “join order”, or “row number correction” to the optimizer.
96-1	22054-22056	In	
96-2	22057-22061	some	
96-3	22062-22067	cases	
96-4	22067-22068	,	
96-5	22069-22072	the	
96-6	22073-22078	query	
96-7	22079-22088	optimizer	
96-8	22089-22094	doesn	
96-9	22094-22095	’	
96-10	22095-22096	t	
96-11	22097-22105	generate	
96-12	22106-22109	the	
96-13	22110-22114	best	
96-14	22115-22124	execution	
96-15	22125-22129	plan	
96-16	22130-22133	for	
96-17	22134-22137	the	
96-18	22138-22143	query	
96-19	22143-22144	.	
96-20	22145-22148	One	
96-21	22149-22157	approach	
96-22	22158-22160	to	
96-23	22161-22167	fixing	
96-24	22168-22172	this	
96-25	22173-22180	problem	
96-26	22181-22183	is	
96-27	22184-22186	to	
96-28	22187-22190	put	
96-29	22191-22196	query	
96-30	22197-22202	hints	
96-31	22203-22207	into	
96-32	22208-22212	your	
96-33	22213-22224	application	
96-34	22225-22229	code	
96-35	22229-22230	,	
96-36	22231-22234	but	
96-37	22235-22239	this	
96-38	22240-22248	approach	
96-39	22249-22251	is	
96-40	22252-22258	widely	
96-41	22259-22270	discouraged	
96-42	22271-22278	because	
96-43	22279-22281	it	
96-44	22282-22287	makes	
96-45	22288-22300	applications	
96-46	22301-22305	more	
96-47	22306-22313	brittle	
96-48	22314-22317	and	
96-49	22318-22324	harder	
96-50	22325-22327	to	
96-51	22328-22336	maintain	
96-52	22336-22337	,	
96-53	22338-22341	and	
96-54	22342-22344	in	
96-55	22345-22349	some	
96-56	22350-22355	cases	
96-57	22355-22356	,	
96-58	22357-22360	you	
96-59	22361-22364	can	
96-60	22364-22365	’	
96-61	22365-22366	t	
96-62	22367-22371	hint	
96-63	22372-22375	the	
96-64	22376-22379	SQL	
96-65	22380-22387	because	
96-66	22388-22390	it	
96-67	22391-22393	is	
96-68	22394-22403	generated	
96-69	22404-22406	by	
96-70	22407-22408	a	
96-71	22409-22412	3rd	
96-72	22413-22418	party	
96-73	22419-22430	application	
96-74	22430-22431	.	
96-75	22432-22436	What	
96-76	22437-22439	we	
96-77	22440-22444	will	
96-78	22445-22449	show	
96-79	22450-22452	is	
96-80	22453-22456	how	
96-81	22457-22459	to	
96-82	22460-22463	use	
96-83	22464-22469	hints	
96-84	22470-22472	to	
96-85	22473-22480	control	
96-86	22481-22484	the	
96-87	22485-22490	query	
96-88	22491-22500	optimizer	
96-89	22500-22501	,	
96-90	22502-22505	but	
96-91	22506-22510	then	
96-92	22511-22513	to	
96-93	22514-22520	remove	
96-94	22521-22524	the	
96-95	22525-22530	hints	
96-96	22531-22534	and	
96-97	22535-22540	allow	
96-98	22541-22544	QPM	
96-99	22545-22547	to	
96-100	22548-22555	enforce	
96-101	22556-22559	the	
96-102	22560-22567	desired	
96-103	22568-22572	plan	
96-104	22572-22573	,	
96-105	22574-22581	without	
96-106	22582-22588	adding	
96-107	22589-22594	hints	
96-108	22595-22597	to	
96-109	22598-22601	the	
96-110	22602-22613	application	
96-111	22614-22618	code	
96-112	22618-22619	.	
96-113	22620-22623	For	
96-114	22624-22628	this	
96-115	22629-22636	purpose	
96-116	22636-22637	,	
96-117	22638-22648	PostgreSQL	
96-118	22649-22654	users	
96-119	22655-22658	can	
96-120	22659-22662	use	
96-121	22663-22666	the	
96-122	22667-22679	pg_hint_plan	
96-123	22680-22689	extension	
96-124	22690-22692	to	
96-125	22693-22700	provide	
96-126	22701-22711	directives	
96-127	22712-22716	such	
96-128	22717-22719	as	
96-129	22720-22721	“	
96-130	22721-22725	scan	
96-131	22726-22732	method	
96-132	22732-22733	”	
96-133	22733-22734	,	
96-134	22735-22736	“	
96-135	22736-22740	join	
96-136	22741-22747	method	
96-137	22747-22748	”	
96-138	22748-22749	,	
96-139	22750-22751	“	
96-140	22751-22755	join	
96-141	22756-22761	order	
96-142	22761-22762	”	
96-143	22762-22763	,	
96-144	22764-22766	or	
96-145	22767-22768	“	
96-146	22768-22771	row	
96-147	22772-22778	number	
96-148	22779-22789	correction	
96-149	22789-22790	”	
96-150	22791-22793	to	
96-151	22794-22797	the	
96-152	22798-22807	optimizer	
96-153	22807-22808	.	

#Text=The resulting plan will be saved by QPM, along with any GUC parameters you choose to override (such as work_mem). QPM remembers any GUC parameter overrides and uses them when it needs to recreate the plan. To install and learn more about how to use the pg_hint_plan extension, see the pg_hint_plan documentation. QPM steps to fix the plan generated by using hints Working with pg_hint_plan is incredibly useful for cases where the query can’t be modified to add hints. In this example, you’ll use a sample query to generate an execution plan that you want to modify by adding hints. Then you’ll associate the new execution plan with the original unmodified statement.
97-1	22809-22812	The	
97-2	22813-22822	resulting	
97-3	22823-22827	plan	
97-4	22828-22832	will	
97-5	22833-22835	be	
97-6	22836-22841	saved	
97-7	22842-22844	by	
97-8	22845-22848	QPM	
97-9	22848-22849	,	
97-10	22850-22855	along	
97-11	22856-22860	with	
97-12	22861-22864	any	
97-13	22865-22868	GUC	
97-14	22869-22879	parameters	
97-15	22880-22883	you	
97-16	22884-22890	choose	
97-17	22891-22893	to	
97-18	22894-22902	override	
97-19	22903-22904	(	
97-20	22904-22908	such	
97-21	22909-22911	as	
97-22	22912-22920	work_mem	
97-23	22920-22921	)	
97-24	22921-22922	.	
97-25	22923-22926	QPM	
97-26	22927-22936	remembers	
97-27	22937-22940	any	
97-28	22941-22944	GUC	
97-29	22945-22954	parameter	
97-30	22955-22964	overrides	
97-31	22965-22968	and	
97-32	22969-22973	uses	
97-33	22974-22978	them	
97-34	22979-22983	when	
97-35	22984-22986	it	
97-36	22987-22992	needs	
97-37	22993-22995	to	
97-38	22996-23004	recreate	
97-39	23005-23008	the	
97-40	23009-23013	plan	
97-41	23013-23014	.	
97-42	23015-23017	To	
97-43	23018-23025	install	
97-44	23026-23029	and	
97-45	23030-23035	learn	
97-46	23036-23040	more	
97-47	23041-23046	about	
97-48	23047-23050	how	
97-49	23051-23053	to	
97-50	23054-23057	use	
97-51	23058-23061	the	
97-52	23062-23074	pg_hint_plan	
97-53	23075-23084	extension	
97-54	23084-23085	,	
97-55	23086-23089	see	
97-56	23090-23093	the	
97-57	23094-23106	pg_hint_plan	
97-58	23107-23120	documentation	
97-59	23120-23121	.	
97-60	23122-23125	QPM	
97-61	23126-23131	steps	
97-62	23132-23134	to	
97-63	23135-23138	fix	
97-64	23139-23142	the	
97-65	23143-23147	plan	
97-66	23148-23157	generated	
97-67	23158-23160	by	
97-68	23161-23166	using	
97-69	23167-23172	hints	
97-70	23173-23180	Working	
97-71	23181-23185	with	
97-72	23186-23198	pg_hint_plan	
97-73	23199-23201	is	
97-74	23202-23212	incredibly	
97-75	23213-23219	useful	
97-76	23220-23223	for	
97-77	23224-23229	cases	
97-78	23230-23235	where	
97-79	23236-23239	the	
97-80	23240-23245	query	
97-81	23246-23249	can	
97-82	23249-23250	’	
97-83	23250-23251	t	
97-84	23252-23254	be	
97-85	23255-23263	modified	
97-86	23264-23266	to	
97-87	23267-23270	add	
97-88	23271-23276	hints	
97-89	23276-23277	.	
97-90	23278-23280	In	
97-91	23281-23285	this	
97-92	23286-23293	example	
97-93	23293-23294	,	
97-94	23295-23298	you	
97-95	23298-23299	’	
97-96	23299-23301	ll	
97-97	23302-23305	use	
97-98	23306-23307	a	
97-99	23308-23314	sample	
97-100	23315-23320	query	
97-101	23321-23323	to	
97-102	23324-23332	generate	
97-103	23333-23335	an	
97-104	23336-23345	execution	
97-105	23346-23350	plan	
97-106	23351-23355	that	
97-107	23356-23359	you	
97-108	23360-23364	want	
97-109	23365-23367	to	
97-110	23368-23374	modify	
97-111	23375-23377	by	
97-112	23378-23384	adding	
97-113	23385-23390	hints	
97-114	23390-23391	.	
97-115	23392-23396	Then	
97-116	23397-23400	you	
97-117	23400-23401	’	
97-118	23401-23403	ll	
97-119	23404-23413	associate	
97-120	23414-23417	the	
97-121	23418-23421	new	
97-122	23422-23431	execution	
97-123	23432-23436	plan	
97-124	23437-23441	with	
97-125	23442-23445	the	
97-126	23446-23454	original	
97-127	23455-23465	unmodified	
97-128	23466-23475	statement	
97-129	23475-23476	.	

#Text=Here are the detailed steps: a. Check if the plan capture is disabled show apg_plan_mgmt.capture_plan_baselines; Output: apg_plan_mgmt.capture_plan_baselines
98-1	23477-23481	Here	
98-2	23482-23485	are	
98-3	23486-23489	the	
98-4	23490-23498	detailed	
98-5	23499-23504	steps	
98-6	23504-23505	:	
98-7	23506-23507	a	
98-8	23507-23508	.	
98-9	23509-23514	Check	
98-10	23515-23517	if	
98-11	23518-23521	the	
98-12	23522-23526	plan	
98-13	23527-23534	capture	
98-14	23535-23537	is	
98-15	23538-23546	disabled	
98-16	23547-23551	show	
98-17	23552-23588	apg_plan_mgmt.capture_plan_baselines	
98-18	23588-23589	;	
98-19	23590-23596	Output	
98-20	23596-23597	:	
98-21	23598-23634	apg_plan_mgmt.capture_plan_baselines	

#Text=-------------------------------------- off (1 row) b. Run explain plan for the original query without any hints to see the execution plan optimizer generates. The original plan of the query without hints is as follows. EXPLAIN (hashes true)
99-1	23635-23636	-	
99-2	23636-23637	-	
99-3	23637-23638	-	
99-4	23638-23639	-	
99-5	23639-23640	-	
99-6	23640-23641	-	
99-7	23641-23642	-	
99-8	23642-23643	-	
99-9	23643-23644	-	
99-10	23644-23645	-	
99-11	23645-23646	-	
99-12	23646-23647	-	
99-13	23647-23648	-	
99-14	23648-23649	-	
99-15	23649-23650	-	
99-16	23650-23651	-	
99-17	23651-23652	-	
99-18	23652-23653	-	
99-19	23653-23654	-	
99-20	23654-23655	-	
99-21	23655-23656	-	
99-22	23656-23657	-	
99-23	23657-23658	-	
99-24	23658-23659	-	
99-25	23659-23660	-	
99-26	23660-23661	-	
99-27	23661-23662	-	
99-28	23662-23663	-	
99-29	23663-23664	-	
99-30	23664-23665	-	
99-31	23665-23666	-	
99-32	23666-23667	-	
99-33	23667-23668	-	
99-34	23668-23669	-	
99-35	23669-23670	-	
99-36	23670-23671	-	
99-37	23671-23672	-	
99-38	23672-23673	-	
99-39	23674-23677	off	
99-40	23678-23679	(	
99-41	23679-23680	1	
99-42	23681-23684	row	
99-43	23684-23685	)	
99-44	23686-23687	b	
99-45	23687-23688	.	
99-46	23689-23692	Run	
99-47	23693-23700	explain	
99-48	23701-23705	plan	
99-49	23706-23709	for	
99-50	23710-23713	the	
99-51	23714-23722	original	
99-52	23723-23728	query	
99-53	23729-23736	without	
99-54	23737-23740	any	
99-55	23741-23746	hints	
99-56	23747-23749	to	
99-57	23750-23753	see	
99-58	23754-23757	the	
99-59	23758-23767	execution	
99-60	23768-23772	plan	
99-61	23773-23782	optimizer	
99-62	23783-23792	generates	
99-63	23792-23793	.	
99-64	23794-23797	The	
99-65	23798-23806	original	
99-66	23807-23811	plan	
99-67	23812-23814	of	
99-68	23815-23818	the	
99-69	23819-23824	query	
99-70	23825-23832	without	
99-71	23833-23838	hints	
99-72	23839-23841	is	
99-73	23842-23844	as	
99-74	23845-23852	follows	
99-75	23852-23853	.	
99-76	23854-23861	EXPLAIN	
99-77	23862-23863	(	
99-78	23863-23869	hashes	
99-79	23870-23874	true	
99-80	23874-23875	)	

#Text=SELECT FROM pgbench_branches b JOIN pgbench_accounts a ON b.bid = a.bid ORDER BY a.aid; Output: QUERY PLAN
100-1	23876-23882	SELECT	
100-2	23883-23887	FROM	
100-3	23888-23904	pgbench_branches	
100-4	23905-23906	b	
100-5	23907-23911	JOIN	
100-6	23912-23928	pgbench_accounts	
100-7	23929-23930	a	
100-8	23931-23933	ON	
100-9	23934-23939	b.bid	
100-10	23940-23941	=	
100-11	23942-23947	a.bid	
100-12	23948-23953	ORDER	
100-13	23954-23956	BY	
100-14	23957-23962	a.aid	
100-15	23962-23963	;	
100-16	23964-23970	Output	
100-17	23970-23971	:	
100-18	23972-23977	QUERY	
100-19	23978-23982	PLAN	

#Text=----------------------------------------------------------------------------------------- Gather Merge (cost=1000.73..2760454.51 rows=10052747 width=465) Workers Planned: 2 Nested Loop (cost=0.70..1599118.05 rows=4188645 width=461)
101-1	23983-23984	-	
101-2	23984-23985	-	
101-3	23985-23986	-	
101-4	23986-23987	-	
101-5	23987-23988	-	
101-6	23988-23989	-	
101-7	23989-23990	-	
101-8	23990-23991	-	
101-9	23991-23992	-	
101-10	23992-23993	-	
101-11	23993-23994	-	
101-12	23994-23995	-	
101-13	23995-23996	-	
101-14	23996-23997	-	
101-15	23997-23998	-	
101-16	23998-23999	-	
101-17	23999-24000	-	
101-18	24000-24001	-	
101-19	24001-24002	-	
101-20	24002-24003	-	
101-21	24003-24004	-	
101-22	24004-24005	-	
101-23	24005-24006	-	
101-24	24006-24007	-	
101-25	24007-24008	-	
101-26	24008-24009	-	
101-27	24009-24010	-	
101-28	24010-24011	-	
101-29	24011-24012	-	
101-30	24012-24013	-	
101-31	24013-24014	-	
101-32	24014-24015	-	
101-33	24015-24016	-	
101-34	24016-24017	-	
101-35	24017-24018	-	
101-36	24018-24019	-	
101-37	24019-24020	-	
101-38	24020-24021	-	
101-39	24021-24022	-	
101-40	24022-24023	-	
101-41	24023-24024	-	
101-42	24024-24025	-	
101-43	24025-24026	-	
101-44	24026-24027	-	
101-45	24027-24028	-	
101-46	24028-24029	-	
101-47	24029-24030	-	
101-48	24030-24031	-	
101-49	24031-24032	-	
101-50	24032-24033	-	
101-51	24033-24034	-	
101-52	24034-24035	-	
101-53	24035-24036	-	
101-54	24036-24037	-	
101-55	24037-24038	-	
101-56	24038-24039	-	
101-57	24039-24040	-	
101-58	24040-24041	-	
101-59	24041-24042	-	
101-60	24042-24043	-	
101-61	24043-24044	-	
101-62	24044-24045	-	
101-63	24045-24046	-	
101-64	24046-24047	-	
101-65	24047-24048	-	
101-66	24048-24049	-	
101-67	24049-24050	-	
101-68	24050-24051	-	
101-69	24051-24052	-	
101-70	24052-24053	-	
101-71	24053-24054	-	
101-72	24054-24055	-	
101-73	24055-24056	-	
101-74	24056-24057	-	
101-75	24057-24058	-	
101-76	24058-24059	-	
101-77	24059-24060	-	
101-78	24060-24061	-	
101-79	24061-24062	-	
101-80	24062-24063	-	
101-81	24063-24064	-	
101-82	24064-24065	-	
101-83	24065-24066	-	
101-84	24066-24067	-	
101-85	24067-24068	-	
101-86	24068-24069	-	
101-87	24069-24070	-	
101-88	24070-24071	-	
101-89	24071-24072	-	
101-90	24073-24079	Gather	
101-91	24080-24085	Merge	
101-92	24086-24087	(	
101-93	24087-24091	cost	
101-94	24091-24092	=	
101-95	24092-24099	1000.73	
101-96	24099-24100	.	
101-97	24100-24111	.2760454.51	
101-98	24112-24116	rows	
101-99	24116-24117	=	
101-100	24117-24125	10052747	
101-101	24126-24131	width	
101-102	24131-24132	=	
101-103	24132-24135	465	
101-104	24135-24136	)	
101-105	24137-24144	Workers	
101-106	24145-24152	Planned	
101-107	24152-24153	:	
101-108	24154-24155	2	
101-109	24156-24162	Nested	
101-110	24163-24167	Loop	
101-111	24168-24169	(	
101-112	24169-24173	cost	
101-113	24173-24174	=	
101-114	24174-24178	0.70	
101-115	24178-24179	.	
101-116	24179-24190	.1599118.05	
101-117	24191-24195	rows	
101-118	24195-24196	=	
101-119	24196-24203	4188645	
101-120	24204-24209	width	
101-121	24209-24210	=	
101-122	24210-24213	461	
101-123	24213-24214	)	

#Text=Parallel Index Scan using pgbench_accounts_pkey on pgbench_accounts a (cost=0.43..405754.08 rows=4188645 width=97) Index Scan using pgbench_branches_pkey on pgbench_branches b (cost=0.27..0.29 rows=1 width=364)
102-1	24215-24223	Parallel	
102-2	24224-24229	Index	
102-3	24230-24234	Scan	
102-4	24235-24240	using	
102-5	24241-24262	pgbench_accounts_pkey	
102-6	24263-24265	on	
102-7	24266-24282	pgbench_accounts	
102-8	24283-24284	a	
102-9	24285-24286	(	
102-10	24286-24290	cost	
102-11	24290-24291	=	
102-12	24291-24295	0.43	
102-13	24295-24296	.	
102-14	24296-24306	.405754.08	
102-15	24307-24311	rows	
102-16	24311-24312	=	
102-17	24312-24319	4188645	
102-18	24320-24325	width	
102-19	24325-24326	=	
102-20	24326-24328	97	
102-21	24328-24329	)	
102-22	24330-24335	Index	
102-23	24336-24340	Scan	
102-24	24341-24346	using	
102-25	24347-24368	pgbench_branches_pkey	
102-26	24369-24371	on	
102-27	24372-24388	pgbench_branches	
102-28	24389-24390	b	
102-29	24391-24392	(	
102-30	24392-24396	cost	
102-31	24396-24397	=	
102-32	24397-24401	0.27	
102-33	24401-24402	.	
102-34	24402-24407	.0.29	
102-35	24408-24412	rows	
102-36	24412-24413	=	
102-37	24413-24414	1	
102-38	24415-24420	width	
102-39	24420-24421	=	
102-40	24421-24424	364	
102-41	24424-24425	)	

#Text=Index Cond: (bid = a.bid) SQL Hash: 356104612, Plan Hash: 1425407480 c. Enable pg_hint_plan and QPM manual plan capture: SET pg_hint_plan.enable_hint = true;
103-1	24426-24431	Index	
103-2	24432-24436	Cond	
103-3	24436-24437	:	
103-4	24438-24439	(	
103-5	24439-24442	bid	
103-6	24443-24444	=	
103-7	24445-24450	a.bid	
103-8	24450-24451	)	
103-9	24452-24455	SQL	
103-10	24456-24460	Hash	
103-11	24460-24461	:	
103-12	24462-24471	356104612	
103-13	24471-24472	,	
103-14	24473-24477	Plan	
103-15	24478-24482	Hash	
103-16	24482-24483	:	
103-17	24484-24494	1425407480	
103-18	24495-24496	c	
103-19	24496-24497	.	
103-20	24498-24504	Enable	
103-21	24505-24517	pg_hint_plan	
103-22	24518-24521	and	
103-23	24522-24525	QPM	
103-24	24526-24532	manual	
103-25	24533-24537	plan	
103-26	24538-24545	capture	
103-27	24545-24546	:	
103-28	24547-24550	SET	
103-29	24551-24575	pg_hint_plan.enable_hint	
103-30	24576-24577	=	
103-31	24578-24582	true	
103-32	24582-24583	;	

#Text=SET apg_plan_mgmt.capture_plan_baselines = manual; d. Now, EXPLAIN the query with the hints you want to use. In the following example, we are using the HashJoin (a, b) hint, which is a directive for the optimizer to use a hash join algorithm to join table a and table b:
104-1	24584-24587	SET	
104-2	24588-24624	apg_plan_mgmt.capture_plan_baselines	
104-3	24625-24626	=	
104-4	24627-24633	manual	
104-5	24633-24634	;	
104-6	24635-24636	d	
104-7	24636-24637	.	
104-8	24638-24641	Now	
104-9	24641-24642	,	
104-10	24643-24650	EXPLAIN	
104-11	24651-24654	the	
104-12	24655-24660	query	
104-13	24661-24665	with	
104-14	24666-24669	the	
104-15	24670-24675	hints	
104-16	24676-24679	you	
104-17	24680-24684	want	
104-18	24685-24687	to	
104-19	24688-24691	use	
104-20	24691-24692	.	
104-21	24693-24695	In	
104-22	24696-24699	the	
104-23	24700-24709	following	
104-24	24710-24717	example	
104-25	24717-24718	,	
104-26	24719-24721	we	
104-27	24722-24725	are	
104-28	24726-24731	using	
104-29	24732-24735	the	
104-30	24736-24744	HashJoin	
104-31	24745-24746	(	
104-32	24746-24747	a	
104-33	24747-24748	,	
104-34	24749-24750	b	
104-35	24750-24751	)	
104-36	24752-24756	hint	
104-37	24756-24757	,	
104-38	24758-24763	which	
104-39	24764-24766	is	
104-40	24767-24768	a	
104-41	24769-24778	directive	
104-42	24779-24782	for	
104-43	24783-24786	the	
104-44	24787-24796	optimizer	
104-45	24797-24799	to	
104-46	24800-24803	use	
104-47	24804-24805	a	
104-48	24806-24810	hash	
104-49	24811-24815	join	
104-50	24816-24825	algorithm	
104-51	24826-24828	to	
104-52	24829-24833	join	
104-53	24834-24839	table	
104-54	24840-24841	a	
104-55	24842-24845	and	
104-56	24846-24851	table	
104-57	24852-24853	b	
104-58	24853-24854	:	

#Text=The plan that you want with a hash join is as follows. /*+ HashJoin(a b) */ EXPLAIN (hashes true) SELECT FROM pgbench_branches b JOIN pgbench_accounts a
105-1	24855-24858	The	
105-2	24859-24863	plan	
105-3	24864-24868	that	
105-4	24869-24872	you	
105-5	24873-24877	want	
105-6	24878-24882	with	
105-7	24883-24884	a	
105-8	24885-24889	hash	
105-9	24890-24894	join	
105-10	24895-24897	is	
105-11	24898-24900	as	
105-12	24901-24908	follows	
105-13	24908-24909	.	
105-14	24910-24911	/	
105-15	24911-24912	*	
105-16	24912-24913	+	
105-17	24914-24922	HashJoin	
105-18	24922-24923	(	
105-19	24923-24924	a	
105-20	24925-24926	b	
105-21	24926-24927	)	
105-22	24928-24929	*	
105-23	24929-24930	/	
105-24	24931-24938	EXPLAIN	
105-25	24939-24940	(	
105-26	24940-24946	hashes	
105-27	24947-24951	true	
105-28	24951-24952	)	
105-29	24953-24959	SELECT	
105-30	24960-24964	FROM	
105-31	24965-24981	pgbench_branches	
105-32	24982-24983	b	
105-33	24984-24988	JOIN	
105-34	24989-25005	pgbench_accounts	
105-35	25006-25007	a	

#Text=ON b.bid = a.bid ORDER BY a.aid; Output: QUERY PLAN
106-1	25008-25010	ON	
106-2	25011-25016	b.bid	
106-3	25017-25018	=	
106-4	25019-25024	a.bid	
106-5	25025-25030	ORDER	
106-6	25031-25033	BY	
106-7	25034-25039	a.aid	
106-8	25039-25040	;	
106-9	25041-25047	Output	
106-10	25047-25048	:	
106-11	25049-25054	QUERY	
106-12	25055-25059	PLAN	

#Text=-------------------------------------------------------------------------- Gather Merge (cost=3345991.72..3443795.01 rows=8377290 width=465) Workers Planned: 2 Sort
107-1	25060-25061	-	
107-2	25061-25062	-	
107-3	25062-25063	-	
107-4	25063-25064	-	
107-5	25064-25065	-	
107-6	25065-25066	-	
107-7	25066-25067	-	
107-8	25067-25068	-	
107-9	25068-25069	-	
107-10	25069-25070	-	
107-11	25070-25071	-	
107-12	25071-25072	-	
107-13	25072-25073	-	
107-14	25073-25074	-	
107-15	25074-25075	-	
107-16	25075-25076	-	
107-17	25076-25077	-	
107-18	25077-25078	-	
107-19	25078-25079	-	
107-20	25079-25080	-	
107-21	25080-25081	-	
107-22	25081-25082	-	
107-23	25082-25083	-	
107-24	25083-25084	-	
107-25	25084-25085	-	
107-26	25085-25086	-	
107-27	25086-25087	-	
107-28	25087-25088	-	
107-29	25088-25089	-	
107-30	25089-25090	-	
107-31	25090-25091	-	
107-32	25091-25092	-	
107-33	25092-25093	-	
107-34	25093-25094	-	
107-35	25094-25095	-	
107-36	25095-25096	-	
107-37	25096-25097	-	
107-38	25097-25098	-	
107-39	25098-25099	-	
107-40	25099-25100	-	
107-41	25100-25101	-	
107-42	25101-25102	-	
107-43	25102-25103	-	
107-44	25103-25104	-	
107-45	25104-25105	-	
107-46	25105-25106	-	
107-47	25106-25107	-	
107-48	25107-25108	-	
107-49	25108-25109	-	
107-50	25109-25110	-	
107-51	25110-25111	-	
107-52	25111-25112	-	
107-53	25112-25113	-	
107-54	25113-25114	-	
107-55	25114-25115	-	
107-56	25115-25116	-	
107-57	25116-25117	-	
107-58	25117-25118	-	
107-59	25118-25119	-	
107-60	25119-25120	-	
107-61	25120-25121	-	
107-62	25121-25122	-	
107-63	25122-25123	-	
107-64	25123-25124	-	
107-65	25124-25125	-	
107-66	25125-25126	-	
107-67	25126-25127	-	
107-68	25127-25128	-	
107-69	25128-25129	-	
107-70	25129-25130	-	
107-71	25130-25131	-	
107-72	25131-25132	-	
107-73	25132-25133	-	
107-74	25133-25134	-	
107-75	25135-25141	Gather	
107-76	25142-25147	Merge	
107-77	25148-25149	(	
107-78	25149-25153	cost	
107-79	25153-25154	=	
107-80	25154-25164	3345991.72	
107-81	25164-25165	.	
107-82	25165-25176	.3443795.01	
107-83	25177-25181	rows	
107-84	25181-25182	=	
107-85	25182-25189	8377290	
107-86	25190-25195	width	
107-87	25195-25196	=	
107-88	25196-25199	465	
107-89	25199-25200	)	
107-90	25201-25208	Workers	
107-91	25209-25216	Planned	
107-92	25216-25217	:	
107-93	25218-25219	2	
107-94	25220-25224	Sort	

#Text=(cost=3344991.70..3355463.31 rows=4188645 width=465) Sort Key: a.aid Hash Join (cost=93.43..221376.54 rows=4188645 width=465) Hash Cond: (a.bid = b.bid)
108-1	25225-25226	(	
108-2	25226-25230	cost	
108-3	25230-25231	=	
108-4	25231-25241	3344991.70	
108-5	25241-25242	.	
108-6	25242-25253	.3355463.31	
108-7	25254-25258	rows	
108-8	25258-25259	=	
108-9	25259-25266	4188645	
108-10	25267-25272	width	
108-11	25272-25273	=	
108-12	25273-25276	465	
108-13	25276-25277	)	
108-14	25278-25282	Sort	
108-15	25283-25286	Key	
108-16	25286-25287	:	
108-17	25288-25293	a.aid	
108-18	25294-25298	Hash	
108-19	25299-25303	Join	
108-20	25304-25305	(	
108-21	25305-25309	cost	
108-22	25309-25310	=	
108-23	25310-25315	93.43	
108-24	25315-25316	.	
108-25	25316-25326	.221376.54	
108-26	25327-25331	rows	
108-27	25331-25332	=	
108-28	25332-25339	4188645	
108-29	25340-25345	width	
108-30	25345-25346	=	
108-31	25346-25349	465	
108-32	25349-25350	)	
108-33	25351-25355	Hash	
108-34	25356-25360	Cond	
108-35	25360-25361	:	
108-36	25362-25363	(	
108-37	25363-25368	a.bid	
108-38	25369-25370	=	
108-39	25371-25376	b.bid	
108-40	25376-25377	)	

#Text=Parallel Seq Scan on pgbench_accounts a (cost=0.00..209856.45 rows=4188645 width=97) Hash (cost=92.08..92.08 rows=108 width=364) Seq Scan on pgbench_branches b
109-1	25378-25386	Parallel	
109-2	25387-25390	Seq	
109-3	25391-25395	Scan	
109-4	25396-25398	on	
109-5	25399-25415	pgbench_accounts	
109-6	25416-25417	a	
109-7	25418-25419	(	
109-8	25419-25423	cost	
109-9	25423-25424	=	
109-10	25424-25428	0.00	
109-11	25428-25429	.	
109-12	25429-25439	.209856.45	
109-13	25440-25444	rows	
109-14	25444-25445	=	
109-15	25445-25452	4188645	
109-16	25453-25458	width	
109-17	25458-25459	=	
109-18	25459-25461	97	
109-19	25461-25462	)	
109-20	25463-25467	Hash	
109-21	25468-25469	(	
109-22	25469-25473	cost	
109-23	25473-25474	=	
109-24	25474-25479	92.08	
109-25	25479-25480	.	
109-26	25480-25486	.92.08	
109-27	25487-25491	rows	
109-28	25491-25492	=	
109-29	25492-25495	108	
109-30	25496-25501	width	
109-31	25501-25502	=	
109-32	25502-25505	364	
109-33	25505-25506	)	
109-34	25507-25510	Seq	
109-35	25511-25515	Scan	
109-36	25516-25518	on	
109-37	25519-25535	pgbench_branches	
109-38	25536-25537	b	

#Text=(cost=0.00..92.08 rows=108 width=364) SQL Hash: 356104612, Plan Hash: -58126597 e. Verify that plan -58126597 was captured, and note the status of the plan.
110-1	25538-25539	(	
110-2	25539-25543	cost	
110-3	25543-25544	=	
110-4	25544-25548	0.00	
110-5	25548-25549	.	
110-6	25549-25555	.92.08	
110-7	25556-25560	rows	
110-8	25560-25561	=	
110-9	25561-25564	108	
110-10	25565-25570	width	
110-11	25570-25571	=	
110-12	25571-25574	364	
110-13	25574-25575	)	
110-14	25576-25579	SQL	
110-15	25580-25584	Hash	
110-16	25584-25585	:	
110-17	25586-25595	356104612	
110-18	25595-25596	,	
110-19	25597-25601	Plan	
110-20	25602-25606	Hash	
110-21	25606-25607	:	
110-22	25608-25609	-	
110-23	25609-25617	58126597	
110-24	25618-25619	e	
110-25	25619-25620	.	
110-26	25621-25627	Verify	
110-27	25628-25632	that	
110-28	25633-25637	plan	
110-29	25638-25639	-	
110-30	25639-25647	58126597	
110-31	25648-25651	was	
110-32	25652-25660	captured	
110-33	25660-25661	,	
110-34	25662-25665	and	
110-35	25666-25670	note	
110-36	25671-25674	the	
110-37	25675-25681	status	
110-38	25682-25684	of	
110-39	25685-25688	the	
110-40	25689-25693	plan	
110-41	25693-25694	.	

#Text=In your case, query plan Hash might be different. Capture the Plan hash value from output of the previous step (e.g. “-58126597”) to use it later in queries. Also note the SQL hash value (e.g. “356104612”) because you’ll use that later in apg_plan_mgmt.set_plan_status command. SELECT sql_hash, plan_hash, status, enabled, sql_text FROM apg_plan_mgmt.dba_plans Where plan_hash=-58126597;
111-1	25695-25697	In	
111-2	25698-25702	your	
111-3	25703-25707	case	
111-4	25707-25708	,	
111-5	25709-25714	query	
111-6	25715-25719	plan	
111-7	25720-25724	Hash	
111-8	25725-25730	might	
111-9	25731-25733	be	
111-10	25734-25743	different	
111-11	25743-25744	.	
111-12	25745-25752	Capture	
111-13	25753-25756	the	
111-14	25757-25761	Plan	
111-15	25762-25766	hash	
111-16	25767-25772	value	
111-17	25773-25777	from	
111-18	25778-25784	output	
111-19	25785-25787	of	
111-20	25788-25791	the	
111-21	25792-25800	previous	
111-22	25801-25805	step	
111-23	25806-25807	(	
111-24	25807-25810	e.g	
111-25	25810-25811	.	
111-26	25812-25813	“	
111-27	25813-25814	-	
111-28	25814-25822	58126597	
111-29	25822-25823	”	
111-30	25823-25824	)	
111-31	25825-25827	to	
111-32	25828-25831	use	
111-33	25832-25834	it	
111-34	25835-25840	later	
111-35	25841-25843	in	
111-36	25844-25851	queries	
111-37	25851-25852	.	
111-38	25853-25857	Also	
111-39	25858-25862	note	
111-40	25863-25866	the	
111-41	25867-25870	SQL	
111-42	25871-25875	hash	
111-43	25876-25881	value	
111-44	25882-25883	(	
111-45	25883-25886	e.g	
111-46	25886-25887	.	
111-47	25888-25889	“	
111-48	25889-25898	356104612	
111-49	25898-25899	”	
111-50	25899-25900	)	
111-51	25901-25908	because	
111-52	25909-25912	you	
111-53	25912-25913	’	
111-54	25913-25915	ll	
111-55	25916-25919	use	
111-56	25920-25924	that	
111-57	25925-25930	later	
111-58	25931-25933	in	
111-59	25934-25963	apg_plan_mgmt.set_plan_status	
111-60	25964-25971	command	
111-61	25971-25972	.	
111-62	25973-25979	SELECT	
111-63	25980-25988	sql_hash	
111-64	25988-25989	,	
111-65	25990-25999	plan_hash	
111-66	25999-26000	,	
111-67	26001-26007	status	
111-68	26007-26008	,	
111-69	26009-26016	enabled	
111-70	26016-26017	,	
111-71	26018-26026	sql_text	
111-72	26027-26031	FROM	
111-73	26032-26055	apg_plan_mgmt.dba_plans	
111-74	26056-26061	Where	
111-75	26062-26071	plan_hash	
111-76	26071-26072	=	
111-77	26072-26073	-	
111-78	26073-26081	58126597	
111-79	26081-26082	;	

#Text=Output: sql_hash | plan_hash | status | enabled | sql_text
112-1	26083-26089	Output	
112-2	26089-26090	:	
112-3	26091-26099	sql_hash	
112-4	26100-26101	|	
112-5	26102-26111	plan_hash	
112-6	26112-26113	|	
112-7	26114-26120	status	
112-8	26121-26122	|	
112-9	26123-26130	enabled	
112-10	26131-26132	|	
112-11	26133-26141	sql_text	

#Text=-----------+-----------+----------+---------+--------------------------- 356104612 | -58126597 | Approved | t | SELECT | FROM pgbench_branches b JOIN pgbench_accounts a + ON b.bid = a.bid
113-1	26142-26143	-	
113-2	26143-26144	-	
113-3	26144-26145	-	
113-4	26145-26146	-	
113-5	26146-26147	-	
113-6	26147-26148	-	
113-7	26148-26149	-	
113-8	26149-26150	-	
113-9	26150-26151	-	
113-10	26151-26152	-	
113-11	26152-26153	-	
113-12	26153-26154	+	
113-13	26154-26155	-	
113-14	26155-26156	-	
113-15	26156-26157	-	
113-16	26157-26158	-	
113-17	26158-26159	-	
113-18	26159-26160	-	
113-19	26160-26161	-	
113-20	26161-26162	-	
113-21	26162-26163	-	
113-22	26163-26164	-	
113-23	26164-26165	-	
113-24	26165-26166	+	
113-25	26166-26167	-	
113-26	26167-26168	-	
113-27	26168-26169	-	
113-28	26169-26170	-	
113-29	26170-26171	-	
113-30	26171-26172	-	
113-31	26172-26173	-	
113-32	26173-26174	-	
113-33	26174-26175	-	
113-34	26175-26176	-	
113-35	26176-26177	+	
113-36	26177-26178	-	
113-37	26178-26179	-	
113-38	26179-26180	-	
113-39	26180-26181	-	
113-40	26181-26182	-	
113-41	26182-26183	-	
113-42	26183-26184	-	
113-43	26184-26185	-	
113-44	26185-26186	-	
113-45	26186-26187	+	
113-46	26187-26188	-	
113-47	26188-26189	-	
113-48	26189-26190	-	
113-49	26190-26191	-	
113-50	26191-26192	-	
113-51	26192-26193	-	
113-52	26193-26194	-	
113-53	26194-26195	-	
113-54	26195-26196	-	
113-55	26196-26197	-	
113-56	26197-26198	-	
113-57	26198-26199	-	
113-58	26199-26200	-	
113-59	26200-26201	-	
113-60	26201-26202	-	
113-61	26202-26203	-	
113-62	26203-26204	-	
113-63	26204-26205	-	
113-64	26205-26206	-	
113-65	26206-26207	-	
113-66	26207-26208	-	
113-67	26208-26209	-	
113-68	26209-26210	-	
113-69	26210-26211	-	
113-70	26211-26212	-	
113-71	26212-26213	-	
113-72	26213-26214	-	
113-73	26215-26224	356104612	
113-74	26225-26226	|	
113-75	26227-26228	-	
113-76	26228-26236	58126597	
113-77	26237-26238	|	
113-78	26239-26247	Approved	
113-79	26248-26249	|	
113-80	26250-26251	t	
113-81	26252-26253	|	
113-82	26254-26260	SELECT	
113-83	26261-26262	|	
113-84	26263-26267	FROM	
113-85	26268-26284	pgbench_branches	
113-86	26285-26286	b	
113-87	26287-26291	JOIN	
113-88	26292-26308	pgbench_accounts	
113-89	26309-26310	a	
113-90	26311-26312	+	
113-91	26313-26315	ON	
113-92	26316-26321	b.bid	
113-93	26322-26323	=	
113-94	26324-26329	a.bid	

#Text=| ORDER BY a.aid;
114-1	26330-26331	|	
114-2	26332-26337	ORDER	
114-3	26338-26340	BY	
114-4	26341-26346	a.aid	
114-5	26346-26347	;	

#Text=f. If necessary, Approve the plan. In this case, this is the first and only plan saved for the statement with SQL Hash=356104612 (in your case it could be different). So it was saved as an Approved plan. If this statement already had a baseline of approved plans, then this plan would have been saved as an Unapproved plan. In general, to Reject all existing plans for a statement and then Approve one specific plan, you could call apg_plan_mgmt.set_plan_status twice, like this: -- please replace "356104612"-> your SQL Hash value; -58126597 -> your Plan Hash value
115-1	26348-26349	f	
115-2	26349-26350	.	
115-3	26351-26353	If	
115-4	26354-26363	necessary	
115-5	26363-26364	,	
115-6	26365-26372	Approve	
115-7	26373-26376	the	
115-8	26377-26381	plan	
115-9	26381-26382	.	
115-10	26383-26385	In	
115-11	26386-26390	this	
115-12	26391-26395	case	
115-13	26395-26396	,	
115-14	26397-26401	this	
115-15	26402-26404	is	
115-16	26405-26408	the	
115-17	26409-26414	first	
115-18	26415-26418	and	
115-19	26419-26423	only	
115-20	26424-26428	plan	
115-21	26429-26434	saved	
115-22	26435-26438	for	
115-23	26439-26442	the	
115-24	26443-26452	statement	
115-25	26453-26457	with	
115-26	26458-26461	SQL	
115-27	26462-26466	Hash	
115-28	26466-26467	=	
115-29	26467-26476	356104612	
115-30	26477-26478	(	
115-31	26478-26480	in	
115-32	26481-26485	your	
115-33	26486-26490	case	
115-34	26491-26493	it	
115-35	26494-26499	could	
115-36	26500-26502	be	
115-37	26503-26512	different	
115-38	26512-26513	)	
115-39	26513-26514	.	
115-40	26515-26517	So	
115-41	26518-26520	it	
115-42	26521-26524	was	
115-43	26525-26530	saved	
115-44	26531-26533	as	
115-45	26534-26536	an	
115-46	26537-26545	Approved	
115-47	26546-26550	plan	
115-48	26550-26551	.	
115-49	26552-26554	If	
115-50	26555-26559	this	
115-51	26560-26569	statement	
115-52	26570-26577	already	
115-53	26578-26581	had	
115-54	26582-26583	a	
115-55	26584-26592	baseline	
115-56	26593-26595	of	
115-57	26596-26604	approved	
115-58	26605-26610	plans	
115-59	26610-26611	,	
115-60	26612-26616	then	
115-61	26617-26621	this	
115-62	26622-26626	plan	
115-63	26627-26632	would	
115-64	26633-26637	have	
115-65	26638-26642	been	
115-66	26643-26648	saved	
115-67	26649-26651	as	
115-68	26652-26654	an	
115-69	26655-26665	Unapproved	
115-70	26666-26670	plan	
115-71	26670-26671	.	
115-72	26672-26674	In	
115-73	26675-26682	general	
115-74	26682-26683	,	
115-75	26684-26686	to	
115-76	26687-26693	Reject	
115-77	26694-26697	all	
115-78	26698-26706	existing	
115-79	26707-26712	plans	
115-80	26713-26716	for	
115-81	26717-26718	a	
115-82	26719-26728	statement	
115-83	26729-26732	and	
115-84	26733-26737	then	
115-85	26738-26745	Approve	
115-86	26746-26749	one	
115-87	26750-26758	specific	
115-88	26759-26763	plan	
115-89	26763-26764	,	
115-90	26765-26768	you	
115-91	26769-26774	could	
115-92	26775-26779	call	
115-93	26780-26809	apg_plan_mgmt.set_plan_status	
115-94	26810-26815	twice	
115-95	26815-26816	,	
115-96	26817-26821	like	
115-97	26822-26826	this	
115-98	26826-26827	:	
115-99	26828-26829	-	
115-100	26829-26830	-	
115-101	26831-26837	please	
115-102	26838-26845	replace	
115-103	26846-26847	"	
115-104	26847-26856	356104612	
115-105	26856-26857	"	
115-106	26857-26858	-	
115-107	26858-26859	>	
115-108	26860-26864	your	
115-109	26865-26868	SQL	
115-110	26869-26873	Hash	
115-111	26874-26879	value	
115-112	26879-26880	;	
115-113	26881-26882	-	
115-114	26882-26890	58126597	
115-115	26891-26892	-	
115-116	26892-26893	>	
115-117	26894-26898	your	
115-118	26899-26903	Plan	
115-119	26904-26908	Hash	
115-120	26909-26914	value	

#Text=SELECT apg_plan_mgmt.set_plan_status (sql_hash, plan_hash, 'Rejected') from apg_plan_mgmt.dba_plans where sql_hash = 356104612; SELECT apg_plan_mgmt.set_plan_status (356104612, -58126597, 'Approved'); g. Next, remove the optimizer hint from the SQL, set capture_plan_baselines parameter to off to disable plan capturing and
116-1	26915-26921	SELECT	
116-2	26922-26951	apg_plan_mgmt.set_plan_status	
116-3	26952-26953	(	
116-4	26953-26961	sql_hash	
116-5	26961-26962	,	
116-6	26963-26972	plan_hash	
116-7	26972-26973	,	
116-8	26974-26975	'	
116-9	26975-26983	Rejected	
116-10	26983-26984	'	
116-11	26984-26985	)	
116-12	26986-26990	from	
116-13	26991-27014	apg_plan_mgmt.dba_plans	
116-14	27015-27020	where	
116-15	27021-27029	sql_hash	
116-16	27030-27031	=	
116-17	27032-27041	356104612	
116-18	27041-27042	;	
116-19	27043-27049	SELECT	
116-20	27050-27079	apg_plan_mgmt.set_plan_status	
116-21	27080-27081	(	
116-22	27081-27090	356104612	
116-23	27090-27091	,	
116-24	27092-27093	-	
116-25	27093-27101	58126597	
116-26	27101-27102	,	
116-27	27103-27104	'	
116-28	27104-27112	Approved	
116-29	27112-27113	'	
116-30	27113-27114	)	
116-31	27114-27115	;	
116-32	27116-27117	g	
116-33	27117-27118	.	
116-34	27119-27123	Next	
116-35	27123-27124	,	
116-36	27125-27131	remove	
116-37	27132-27135	the	
116-38	27136-27145	optimizer	
116-39	27146-27150	hint	
116-40	27151-27155	from	
116-41	27156-27159	the	
116-42	27160-27163	SQL	
116-43	27163-27164	,	
116-44	27165-27168	set	
116-45	27169-27191	capture_plan_baselines	
116-46	27192-27201	parameter	
116-47	27202-27204	to	
116-48	27205-27208	off	
116-49	27209-27211	to	
116-50	27212-27219	disable	
116-51	27220-27224	plan	
116-52	27225-27234	capturing	
116-53	27235-27238	and	

#Text=turn on use_plan_baselines parameter. As you will notice below even after the hint removal, optimizer choose to use the same SQL plan with hash value -58126597 (this might be different in your case). SET apg_plan_mgmt.capture_plan_baselines = off; SET apg_plan_mgmt.use_plan_baselines = true; EXPLAIN (hashes true) SELECT
117-1	27239-27243	turn	
117-2	27244-27246	on	
117-3	27247-27265	use_plan_baselines	
117-4	27266-27275	parameter	
117-5	27275-27276	.	
117-6	27277-27279	As	
117-7	27280-27283	you	
117-8	27284-27288	will	
117-9	27289-27295	notice	
117-10	27296-27301	below	
117-11	27302-27306	even	
117-12	27307-27312	after	
117-13	27313-27316	the	
117-14	27317-27321	hint	
117-15	27322-27329	removal	
117-16	27329-27330	,	
117-17	27331-27340	optimizer	
117-18	27341-27347	choose	
117-19	27348-27350	to	
117-20	27351-27354	use	
117-21	27355-27358	the	
117-22	27359-27363	same	
117-23	27364-27367	SQL	
117-24	27368-27372	plan	
117-25	27373-27377	with	
117-26	27378-27382	hash	
117-27	27383-27388	value	
117-28	27389-27390	-	
117-29	27390-27398	58126597	
117-30	27399-27400	(	
117-31	27400-27404	this	
117-32	27405-27410	might	
117-33	27411-27413	be	
117-34	27414-27423	different	
117-35	27424-27426	in	
117-36	27427-27431	your	
117-37	27432-27436	case	
117-38	27436-27437	)	
117-39	27437-27438	.	
117-40	27439-27442	SET	
117-41	27443-27479	apg_plan_mgmt.capture_plan_baselines	
117-42	27480-27481	=	
117-43	27482-27485	off	
117-44	27485-27486	;	
117-45	27487-27490	SET	
117-46	27491-27523	apg_plan_mgmt.use_plan_baselines	
117-47	27524-27525	=	
117-48	27526-27530	true	
117-49	27530-27531	;	
117-50	27532-27539	EXPLAIN	
117-51	27540-27541	(	
117-52	27541-27547	hashes	
117-53	27548-27552	true	
117-54	27552-27553	)	
117-55	27554-27560	SELECT	

#Text=FROM pgbench_branches b JOIN pgbench_accounts a ON b.bid = a.bid ORDER BY a.aid; Output: QUERY PLAN
118-1	27561-27565	FROM	
118-2	27566-27582	pgbench_branches	
118-3	27583-27584	b	
118-4	27585-27589	JOIN	
118-5	27590-27606	pgbench_accounts	
118-6	27607-27608	a	
118-7	27609-27611	ON	
118-8	27612-27617	b.bid	
118-9	27618-27619	=	
118-10	27620-27625	a.bid	
118-11	27626-27631	ORDER	
118-12	27632-27634	BY	
118-13	27635-27640	a.aid	
118-14	27640-27641	;	
118-15	27642-27648	Output	
118-16	27648-27649	:	
118-17	27650-27655	QUERY	
118-18	27656-27660	PLAN	

#Text=----------------------------------------------------------------------------- Gather Merge (cost=3345991.72..4323410.46 rows=8377290 width=465) Workers Planned: 2 Sort
119-1	27661-27662	-	
119-2	27662-27663	-	
119-3	27663-27664	-	
119-4	27664-27665	-	
119-5	27665-27666	-	
119-6	27666-27667	-	
119-7	27667-27668	-	
119-8	27668-27669	-	
119-9	27669-27670	-	
119-10	27670-27671	-	
119-11	27671-27672	-	
119-12	27672-27673	-	
119-13	27673-27674	-	
119-14	27674-27675	-	
119-15	27675-27676	-	
119-16	27676-27677	-	
119-17	27677-27678	-	
119-18	27678-27679	-	
119-19	27679-27680	-	
119-20	27680-27681	-	
119-21	27681-27682	-	
119-22	27682-27683	-	
119-23	27683-27684	-	
119-24	27684-27685	-	
119-25	27685-27686	-	
119-26	27686-27687	-	
119-27	27687-27688	-	
119-28	27688-27689	-	
119-29	27689-27690	-	
119-30	27690-27691	-	
119-31	27691-27692	-	
119-32	27692-27693	-	
119-33	27693-27694	-	
119-34	27694-27695	-	
119-35	27695-27696	-	
119-36	27696-27697	-	
119-37	27697-27698	-	
119-38	27698-27699	-	
119-39	27699-27700	-	
119-40	27700-27701	-	
119-41	27701-27702	-	
119-42	27702-27703	-	
119-43	27703-27704	-	
119-44	27704-27705	-	
119-45	27705-27706	-	
119-46	27706-27707	-	
119-47	27707-27708	-	
119-48	27708-27709	-	
119-49	27709-27710	-	
119-50	27710-27711	-	
119-51	27711-27712	-	
119-52	27712-27713	-	
119-53	27713-27714	-	
119-54	27714-27715	-	
119-55	27715-27716	-	
119-56	27716-27717	-	
119-57	27717-27718	-	
119-58	27718-27719	-	
119-59	27719-27720	-	
119-60	27720-27721	-	
119-61	27721-27722	-	
119-62	27722-27723	-	
119-63	27723-27724	-	
119-64	27724-27725	-	
119-65	27725-27726	-	
119-66	27726-27727	-	
119-67	27727-27728	-	
119-68	27728-27729	-	
119-69	27729-27730	-	
119-70	27730-27731	-	
119-71	27731-27732	-	
119-72	27732-27733	-	
119-73	27733-27734	-	
119-74	27734-27735	-	
119-75	27735-27736	-	
119-76	27736-27737	-	
119-77	27737-27738	-	
119-78	27739-27745	Gather	
119-79	27746-27751	Merge	
119-80	27752-27753	(	
119-81	27753-27757	cost	
119-82	27757-27758	=	
119-83	27758-27768	3345991.72	
119-84	27768-27769	.	
119-85	27769-27780	.4323410.46	
119-86	27781-27785	rows	
119-87	27785-27786	=	
119-88	27786-27793	8377290	
119-89	27794-27799	width	
119-90	27799-27800	=	
119-91	27800-27803	465	
119-92	27803-27804	)	
119-93	27805-27812	Workers	
119-94	27813-27820	Planned	
119-95	27820-27821	:	
119-96	27822-27823	2	
119-97	27824-27828	Sort	

#Text=(cost=3344991.70..3355463.31 rows=4188645 width=465) Sort Key: a.aid Hash Join (cost=93.43..221376.54 rows=4188645 width=465) Hash Cond: (a.bid = b.bid)
120-1	27829-27830	(	
120-2	27830-27834	cost	
120-3	27834-27835	=	
120-4	27835-27845	3344991.70	
120-5	27845-27846	.	
120-6	27846-27857	.3355463.31	
120-7	27858-27862	rows	
120-8	27862-27863	=	
120-9	27863-27870	4188645	
120-10	27871-27876	width	
120-11	27876-27877	=	
120-12	27877-27880	465	
120-13	27880-27881	)	
120-14	27882-27886	Sort	
120-15	27887-27890	Key	
120-16	27890-27891	:	
120-17	27892-27897	a.aid	
120-18	27898-27902	Hash	
120-19	27903-27907	Join	
120-20	27908-27909	(	
120-21	27909-27913	cost	
120-22	27913-27914	=	
120-23	27914-27919	93.43	
120-24	27919-27920	.	
120-25	27920-27930	.221376.54	
120-26	27931-27935	rows	
120-27	27935-27936	=	
120-28	27936-27943	4188645	
120-29	27944-27949	width	
120-30	27949-27950	=	
120-31	27950-27953	465	
120-32	27953-27954	)	
120-33	27955-27959	Hash	
120-34	27960-27964	Cond	
120-35	27964-27965	:	
120-36	27966-27967	(	
120-37	27967-27972	a.bid	
120-38	27973-27974	=	
120-39	27975-27980	b.bid	
120-40	27980-27981	)	

#Text=Parallel Seq Scan on pgbench_accounts a (cost=0.00..209856.45 rows=4188645 width=97) Hash (cost=92.08..92.08 rows=108 width=364) Seq Scan on pgbench_branches b
121-1	27982-27990	Parallel	
121-2	27991-27994	Seq	
121-3	27995-27999	Scan	
121-4	28000-28002	on	
121-5	28003-28019	pgbench_accounts	
121-6	28020-28021	a	
121-7	28022-28023	(	
121-8	28023-28027	cost	
121-9	28027-28028	=	
121-10	28028-28032	0.00	
121-11	28032-28033	.	
121-12	28033-28043	.209856.45	
121-13	28044-28048	rows	
121-14	28048-28049	=	
121-15	28049-28056	4188645	
121-16	28057-28062	width	
121-17	28062-28063	=	
121-18	28063-28065	97	
121-19	28065-28066	)	
121-20	28067-28071	Hash	
121-21	28072-28073	(	
121-22	28073-28077	cost	
121-23	28077-28078	=	
121-24	28078-28083	92.08	
121-25	28083-28084	.	
121-26	28084-28090	.92.08	
121-27	28091-28095	rows	
121-28	28095-28096	=	
121-29	28096-28099	108	
121-30	28100-28105	width	
121-31	28105-28106	=	
121-32	28106-28109	364	
121-33	28109-28110	)	
121-34	28111-28114	Seq	
121-35	28115-28119	Scan	
121-36	28120-28122	on	
121-37	28123-28139	pgbench_branches	
121-38	28140-28141	b	

#Text=(cost=0.00..92.08 rows=108 width=364) Note: An Approved plan was used instead of the minimum cost plan. SQL Hash: 356104612, Plan Hash: -58126597, Minimum Cost Plan Hash: 1425407480
122-1	28142-28143	(	
122-2	28143-28147	cost	
122-3	28147-28148	=	
122-4	28148-28152	0.00	
122-5	28152-28153	.	
122-6	28153-28159	.92.08	
122-7	28160-28164	rows	
122-8	28164-28165	=	
122-9	28165-28168	108	
122-10	28169-28174	width	
122-11	28174-28175	=	
122-12	28175-28178	364	
122-13	28178-28179	)	
122-14	28180-28184	Note	
122-15	28184-28185	:	
122-16	28186-28188	An	
122-17	28189-28197	Approved	
122-18	28198-28202	plan	
122-19	28203-28206	was	
122-20	28207-28211	used	
122-21	28212-28219	instead	
122-22	28220-28222	of	
122-23	28223-28226	the	
122-24	28227-28234	minimum	
122-25	28235-28239	cost	
122-26	28240-28244	plan	
122-27	28244-28245	.	
122-28	28246-28249	SQL	
122-29	28250-28254	Hash	
122-30	28254-28255	:	
122-31	28256-28265	356104612	
122-32	28265-28266	,	
122-33	28267-28271	Plan	
122-34	28272-28276	Hash	
122-35	28276-28277	:	
122-36	28278-28279	-	
122-37	28279-28287	58126597	
122-38	28287-28288	,	
122-39	28289-28296	Minimum	
122-40	28297-28301	Cost	
122-41	28302-28306	Plan	
122-42	28307-28311	Hash	
122-43	28311-28312	:	
122-44	28313-28323	1425407480	

#Text=As you can observe, the optimizer choose the plan with hash value -58126597 (with hash join between the tables) even though a minimum cost plan with hash value 1425407480 exists. For this specific example, we approved a slightly costly plan with hash join because it returns the results faster compared to an index scan, which you might have do do sometimes in your production environment depending on your use case. 4. Deploying QPM-managed plans globally using export and import (no lab) Large enterprise customers often have applications and databases deployed globally. They also often maintain several environments (Dev, QA, Staging, UAT, Preprod, and Prod) for each application database. However, managing the execution plans manually in each of the database environments can be cumbersome and time-consuming.
123-1	28324-28326	As	
123-2	28327-28330	you	
123-3	28331-28334	can	
123-4	28335-28342	observe	
123-5	28342-28343	,	
123-6	28344-28347	the	
123-7	28348-28357	optimizer	
123-8	28358-28364	choose	
123-9	28365-28368	the	
123-10	28369-28373	plan	
123-11	28374-28378	with	
123-12	28379-28383	hash	
123-13	28384-28389	value	
123-14	28390-28391	-	
123-15	28391-28399	58126597	
123-16	28400-28401	(	
123-17	28401-28405	with	
123-18	28406-28410	hash	
123-19	28411-28415	join	
123-20	28416-28423	between	
123-21	28424-28427	the	
123-22	28428-28434	tables	
123-23	28434-28435	)	
123-24	28436-28440	even	
123-25	28441-28447	though	
123-26	28448-28449	a	
123-27	28450-28457	minimum	
123-28	28458-28462	cost	
123-29	28463-28467	plan	
123-30	28468-28472	with	
123-31	28473-28477	hash	
123-32	28478-28483	value	
123-33	28484-28494	1425407480	
123-34	28495-28501	exists	
123-35	28501-28502	.	
123-36	28503-28506	For	
123-37	28507-28511	this	
123-38	28512-28520	specific	
123-39	28521-28528	example	
123-40	28528-28529	,	
123-41	28530-28532	we	
123-42	28533-28541	approved	
123-43	28542-28543	a	
123-44	28544-28552	slightly	
123-45	28553-28559	costly	
123-46	28560-28564	plan	
123-47	28565-28569	with	
123-48	28570-28574	hash	
123-49	28575-28579	join	
123-50	28580-28587	because	
123-51	28588-28590	it	
123-52	28591-28598	returns	
123-53	28599-28602	the	
123-54	28603-28610	results	
123-55	28611-28617	faster	
123-56	28618-28626	compared	
123-57	28627-28629	to	
123-58	28630-28632	an	
123-59	28633-28638	index	
123-60	28639-28643	scan	
123-61	28643-28644	,	
123-62	28645-28650	which	
123-63	28651-28654	you	
123-64	28655-28660	might	
123-65	28661-28665	have	
123-66	28666-28668	do	
123-67	28669-28671	do	
123-68	28672-28681	sometimes	
123-69	28682-28684	in	
123-70	28685-28689	your	
123-71	28690-28700	production	
123-72	28701-28712	environment	
123-73	28713-28722	depending	
123-74	28723-28725	on	
123-75	28726-28730	your	
123-76	28731-28734	use	
123-77	28735-28739	case	
123-78	28739-28740	.	
123-79	28741-28742	4	
123-80	28742-28743	.	
123-81	28744-28753	Deploying	
123-82	28754-28765	QPM-managed	
123-83	28766-28771	plans	
123-84	28772-28780	globally	
123-85	28781-28786	using	
123-86	28787-28793	export	
123-87	28794-28797	and	
123-88	28798-28804	import	
123-89	28805-28806	(	
123-90	28806-28808	no	
123-91	28809-28812	lab	
123-92	28812-28813	)	
123-93	28814-28819	Large	
123-94	28820-28830	enterprise	
123-95	28831-28840	customers	
123-96	28841-28846	often	
123-97	28847-28851	have	
123-98	28852-28864	applications	
123-99	28865-28868	and	
123-100	28869-28878	databases	
123-101	28879-28887	deployed	
123-102	28888-28896	globally	
123-103	28896-28897	.	
123-104	28898-28902	They	
123-105	28903-28907	also	
123-106	28908-28913	often	
123-107	28914-28922	maintain	
123-108	28923-28930	several	
123-109	28931-28943	environments	
123-110	28944-28945	(	
123-111	28945-28948	Dev	
123-112	28948-28949	,	
123-113	28950-28952	QA	
123-114	28952-28953	,	
123-115	28954-28961	Staging	
123-116	28961-28962	,	
123-117	28963-28966	UAT	
123-118	28966-28967	,	
123-119	28968-28975	Preprod	
123-120	28975-28976	,	
123-121	28977-28980	and	
123-122	28981-28985	Prod	
123-123	28985-28986	)	
123-124	28987-28990	for	
123-125	28991-28995	each	
123-126	28996-29007	application	
123-127	29008-29016	database	
123-128	29016-29017	.	
123-129	29018-29025	However	
123-130	29025-29026	,	
123-131	29027-29035	managing	
123-132	29036-29039	the	
123-133	29040-29049	execution	
123-134	29050-29055	plans	
123-135	29056-29064	manually	
123-136	29065-29067	in	
123-137	29068-29072	each	
123-138	29073-29075	of	
123-139	29076-29079	the	
123-140	29080-29088	database	
123-141	29089-29101	environments	
123-142	29102-29105	can	
123-143	29106-29108	be	
123-144	29109-29119	cumbersome	
123-145	29120-29123	and	
123-146	29124-29138	time-consuming	
123-147	29138-29139	.	

#Text=QPM provides an option to export and import QPM-managed plans from one database to another database. With this option, you can manage the query execution plans centrally and deploy them to databases globally. This feature is useful for the scenarios where you investigate a set of plans on a preprod database, verify that they perform well, and then load them into a production database. For additional details, see Exporting and Importing Plans in the Aurora documentation. 5. Disabling QPM and deleting plans manually To disable QPM feature, open your cluster-level parameter group and set the rds.enable_plan_management parameter to 0.
124-1	29140-29143	QPM	
124-2	29144-29152	provides	
124-3	29153-29155	an	
124-4	29156-29162	option	
124-5	29163-29165	to	
124-6	29166-29172	export	
124-7	29173-29176	and	
124-8	29177-29183	import	
124-9	29184-29195	QPM-managed	
124-10	29196-29201	plans	
124-11	29202-29206	from	
124-12	29207-29210	one	
124-13	29211-29219	database	
124-14	29220-29222	to	
124-15	29223-29230	another	
124-16	29231-29239	database	
124-17	29239-29240	.	
124-18	29241-29245	With	
124-19	29246-29250	this	
124-20	29251-29257	option	
124-21	29257-29258	,	
124-22	29259-29262	you	
124-23	29263-29266	can	
124-24	29267-29273	manage	
124-25	29274-29277	the	
124-26	29278-29283	query	
124-27	29284-29293	execution	
124-28	29294-29299	plans	
124-29	29300-29309	centrally	
124-30	29310-29313	and	
124-31	29314-29320	deploy	
124-32	29321-29325	them	
124-33	29326-29328	to	
124-34	29329-29338	databases	
124-35	29339-29347	globally	
124-36	29347-29348	.	
124-37	29349-29353	This	
124-38	29354-29361	feature	
124-39	29362-29364	is	
124-40	29365-29371	useful	
124-41	29372-29375	for	
124-42	29376-29379	the	
124-43	29380-29389	scenarios	
124-44	29390-29395	where	
124-45	29396-29399	you	
124-46	29400-29411	investigate	
124-47	29412-29413	a	
124-48	29414-29417	set	
124-49	29418-29420	of	
124-50	29421-29426	plans	
124-51	29427-29429	on	
124-52	29430-29431	a	
124-53	29432-29439	preprod	
124-54	29440-29448	database	
124-55	29448-29449	,	
124-56	29450-29456	verify	
124-57	29457-29461	that	
124-58	29462-29466	they	
124-59	29467-29474	perform	
124-60	29475-29479	well	
124-61	29479-29480	,	
124-62	29481-29484	and	
124-63	29485-29489	then	
124-64	29490-29494	load	
124-65	29495-29499	them	
124-66	29500-29504	into	
124-67	29505-29506	a	
124-68	29507-29517	production	
124-69	29518-29526	database	
124-70	29526-29527	.	
124-71	29528-29531	For	
124-72	29532-29542	additional	
124-73	29543-29550	details	
124-74	29550-29551	,	
124-75	29552-29555	see	
124-76	29556-29565	Exporting	
124-77	29566-29569	and	
124-78	29570-29579	Importing	
124-79	29580-29585	Plans	
124-80	29586-29588	in	
124-81	29589-29592	the	
124-82	29593-29599	Aurora	
124-83	29600-29613	documentation	
124-84	29613-29614	.	
124-85	29615-29616	5	
124-86	29616-29617	.	
124-87	29618-29627	Disabling	
124-88	29628-29631	QPM	
124-89	29632-29635	and	
124-90	29636-29644	deleting	
124-91	29645-29650	plans	
124-92	29651-29659	manually	
124-93	29660-29662	To	
124-94	29663-29670	disable	
124-95	29671-29674	QPM	
124-96	29675-29682	feature	
124-97	29682-29683	,	
124-98	29684-29688	open	
124-99	29689-29693	your	
124-100	29694-29707	cluster-level	
124-101	29708-29717	parameter	
124-102	29718-29723	group	
124-103	29724-29727	and	
124-104	29728-29731	set	
124-105	29732-29735	the	
124-106	29736-29762	rds.enable_plan_management	
124-107	29763-29772	parameter	
124-108	29773-29775	to	
124-109	29776-29777	0	
124-110	29777-29778	.	

#Text=Delete all the captured plans by running the following in PSQL: SELECT SUM(apg_plan_mgmt.delete_plan(sql_hash, plan_hash)) FROM apg_plan_mgmt.dba_plans; Verify that no captured plans exist by running the following:
125-1	29779-29785	Delete	
125-2	29786-29789	all	
125-3	29790-29793	the	
125-4	29794-29802	captured	
125-5	29803-29808	plans	
125-6	29809-29811	by	
125-7	29812-29819	running	
125-8	29820-29823	the	
125-9	29824-29833	following	
125-10	29834-29836	in	
125-11	29837-29841	PSQL	
125-12	29841-29842	:	
125-13	29843-29849	SELECT	
125-14	29850-29853	SUM	
125-15	29853-29854	(	
125-16	29854-29879	apg_plan_mgmt.delete_plan	
125-17	29879-29880	(	
125-18	29880-29888	sql_hash	
125-19	29888-29889	,	
125-20	29890-29899	plan_hash	
125-21	29899-29900	)	
125-22	29900-29901	)	
125-23	29902-29906	FROM	
125-24	29907-29930	apg_plan_mgmt.dba_plans	
125-25	29930-29931	;	
125-26	29932-29938	Verify	
125-27	29939-29943	that	
125-28	29944-29946	no	
125-29	29947-29955	captured	
125-30	29956-29961	plans	
125-31	29962-29967	exist	
125-32	29968-29970	by	
125-33	29971-29978	running	
125-34	29979-29982	the	
125-35	29983-29992	following	
125-36	29992-29993	:	
