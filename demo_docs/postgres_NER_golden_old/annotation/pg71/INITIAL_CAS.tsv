#FORMAT=WebAnno TSV 3.3


#Text=JSONB PostgreSQL: How to Store & Index JSON Data in Postgres Toggle navigation Products Managed MySQL Overview AWS Azure DigitalOcean Google Cloud
1-1	0-5	JSONB	
1-2	6-16	PostgreSQL	
1-3	16-17	:	
1-4	18-21	How	
1-5	22-24	to	
1-6	25-30	Store	
1-7	31-32	&	
1-8	33-38	Index	
1-9	39-43	JSON	
1-10	44-48	Data	
1-11	49-51	in	
1-12	52-60	Postgres	
1-13	61-67	Toggle	
1-14	68-78	navigation	
1-15	79-87	Products	
1-16	88-95	Managed	
1-17	96-101	MySQL	
1-18	102-110	Overview	
1-19	111-114	AWS	
1-20	115-120	Azure	
1-21	121-133	DigitalOcean	
1-22	134-140	Google	
1-23	141-146	Cloud	

#Text=Managed PostgreSQL Overview AWS Azure DigitalOcean Google Cloud Managed Redis™ Overview AWS Azure DigitalOcean Google Cloud Managed MongoDB® Overview AWS
2-1	147-154	Managed	
2-2	155-165	PostgreSQL	
2-3	166-174	Overview	
2-4	175-178	AWS	
2-5	179-184	Azure	
2-6	185-197	DigitalOcean	
2-7	198-204	Google	
2-8	205-210	Cloud	
2-9	211-218	Managed	
2-10	219-224	Redis	
2-11	224-225	™	
2-12	226-234	Overview	
2-13	235-238	AWS	
2-14	239-244	Azure	
2-15	245-257	DigitalOcean	
2-16	258-264	Google	
2-17	265-270	Cloud	
2-18	271-278	Managed	
2-19	279-286	MongoDB	
2-20	286-287	®	
2-21	288-296	Overview	
2-22	297-300	AWS	

#Text=Azure DigitalOcean Private/On-Prem Pricing Enterprise Blog Login Sign Up Using JSONB in PostgreSQL: How to Effectively Store & Index JSON Data in PostgreSQL
3-1	301-306	Azure	
3-2	307-319	DigitalOcean	
3-3	320-327	Private	
3-4	327-328	/	
3-5	328-335	On-Prem	
3-6	336-343	Pricing	
3-7	344-354	Enterprise	
3-8	355-359	Blog	
3-9	360-365	Login	
3-10	366-370	Sign	
3-11	371-373	Up	
3-12	374-379	Using	
3-13	380-385	JSONB	
3-14	386-388	in	
3-15	389-399	PostgreSQL	
3-16	399-400	:	
3-17	401-404	How	
3-18	405-407	to	
3-19	408-419	Effectively	
3-20	420-425	Store	
3-21	426-427	&	
3-22	428-433	Index	
3-23	434-438	JSON	
3-24	439-443	Data	
3-25	444-446	in	
3-26	447-457	PostgreSQL	

#Text=Posted: July 17, 2020 +1 Tweet Share Share PinShares 0JSON stands for JavaScript Object Notation. It is an open standard format which organizes data into key/value pairs and arrays detailed in RFC 7159. JSON is the most common format used by web services to exchange data, store documents, unstructured data, etc. In this post, we are going to show you tips and techniques on how to effectively store and index JSON data in PostgreSQL.
4-1	458-464	Posted	
4-2	464-465	:	
4-3	466-470	July	
4-4	471-473	17	
4-5	473-474	,	
4-6	475-479	2020	
4-7	480-481	+	
4-8	481-482	1	
4-9	483-488	Tweet	
4-10	489-494	Share	
4-11	495-500	Share	
4-12	501-510	PinShares	
4-13	511-516	0JSON	
4-14	517-523	stands	
4-15	524-527	for	
4-16	528-538	JavaScript	
4-17	539-545	Object	
4-18	546-554	Notation	
4-19	554-555	.	
4-20	556-558	It	
4-21	559-561	is	
4-22	562-564	an	
4-23	565-569	open	
4-24	570-578	standard	
4-25	579-585	format	
4-26	586-591	which	
4-27	592-601	organizes	
4-28	602-606	data	
4-29	607-611	into	
4-30	612-615	key	
4-31	615-616	/	
4-32	616-621	value	
4-33	622-627	pairs	
4-34	628-631	and	
4-35	632-638	arrays	
4-36	639-647	detailed	
4-37	648-650	in	
4-38	651-654	RFC	
4-39	655-659	7159	
4-40	659-660	.	
4-41	661-665	JSON	
4-42	666-668	is	
4-43	669-672	the	
4-44	673-677	most	
4-45	678-684	common	
4-46	685-691	format	
4-47	692-696	used	
4-48	697-699	by	
4-49	700-703	web	
4-50	704-712	services	
4-51	713-715	to	
4-52	716-724	exchange	
4-53	725-729	data	
4-54	729-730	,	
4-55	731-736	store	
4-56	737-746	documents	
4-57	746-747	,	
4-58	748-760	unstructured	
4-59	761-765	data	
4-60	765-766	,	
4-61	767-770	etc	
4-62	770-771	.	
4-63	772-774	In	
4-64	775-779	this	
4-65	780-784	post	
4-66	784-785	,	
4-67	786-788	we	
4-68	789-792	are	
4-69	793-798	going	
4-70	799-801	to	
4-71	802-806	show	
4-72	807-810	you	
4-73	811-815	tips	
4-74	816-819	and	
4-75	820-830	techniques	
4-76	831-833	on	
4-77	834-837	how	
4-78	838-840	to	
4-79	841-852	effectively	
4-80	853-858	store	
4-81	859-862	and	
4-82	863-868	index	
4-83	869-873	JSON	
4-84	874-878	data	
4-85	879-881	in	
4-86	882-892	PostgreSQL	
4-87	892-893	.	

#Text=You can also check out our Working with JSON Data in PostgreSQL vs. MongoDB webinar in partnership with PostgresConf to learn more on the topic, and check out our SlideShare page to download the slides. What’s in this article? Why Store JSON in PostgreSQL? Timeline of JSON Support in PostgreSQL JSONB Patterns & Antipatterns JSONB Data Structures
5-1	894-897	You	
5-2	898-901	can	
5-3	902-906	also	
5-4	907-912	check	
5-5	913-916	out	
5-6	917-920	our	
5-7	921-928	Working	
5-8	929-933	with	
5-9	934-938	JSON	
5-10	939-943	Data	
5-11	944-946	in	
5-12	947-957	PostgreSQL	
5-13	958-960	vs	
5-14	960-961	.	
5-15	962-969	MongoDB	
5-16	970-977	webinar	
5-17	978-980	in	
5-18	981-992	partnership	
5-19	993-997	with	
5-20	998-1010	PostgresConf	
5-21	1011-1013	to	
5-22	1014-1019	learn	
5-23	1020-1024	more	
5-24	1025-1027	on	
5-25	1028-1031	the	
5-26	1032-1037	topic	
5-27	1037-1038	,	
5-28	1039-1042	and	
5-29	1043-1048	check	
5-30	1049-1052	out	
5-31	1053-1056	our	
5-32	1057-1067	SlideShare	
5-33	1068-1072	page	
5-34	1073-1075	to	
5-35	1076-1084	download	
5-36	1085-1088	the	
5-37	1089-1095	slides	
5-38	1095-1096	.	
5-39	1097-1101	What	
5-40	1101-1102	’	
5-41	1102-1103	s	
5-42	1104-1106	in	
5-43	1107-1111	this	
5-44	1112-1119	article	
5-45	1119-1120	?	
5-46	1121-1124	Why	
5-47	1125-1130	Store	
5-48	1131-1135	JSON	
5-49	1136-1138	in	
5-50	1139-1149	PostgreSQL	
5-51	1149-1150	?	
5-52	1151-1159	Timeline	
5-53	1160-1162	of	
5-54	1163-1167	JSON	
5-55	1168-1175	Support	
5-56	1176-1178	in	
5-57	1179-1189	PostgreSQL	
5-58	1190-1195	JSONB	
5-59	1196-1204	Patterns	
5-60	1205-1206	&	
5-61	1207-1219	Antipatterns	
5-62	1220-1225	JSONB	
5-63	1226-1230	Data	
5-64	1231-1241	Structures	

#Text=JSONB Operators & Functions JSONB Indexes SQL/JSON & JSONPath Why Store JSON in PostgreSQL? Why should a relational database even care about unstructured data? It turns out that there are a few scenarios where it is useful.
6-1	1242-1247	JSONB	
6-2	1248-1257	Operators	
6-3	1258-1259	&	
6-4	1260-1269	Functions	
6-5	1270-1275	JSONB	
6-6	1276-1283	Indexes	
6-7	1284-1287	SQL	
6-8	1287-1288	/	
6-9	1288-1292	JSON	
6-10	1293-1294	&	
6-11	1295-1303	JSONPath	
6-12	1304-1307	Why	
6-13	1308-1313	Store	
6-14	1314-1318	JSON	
6-15	1319-1321	in	
6-16	1322-1332	PostgreSQL	
6-17	1332-1333	?	
6-18	1334-1337	Why	
6-19	1338-1344	should	
6-20	1345-1346	a	
6-21	1347-1357	relational	
6-22	1358-1366	database	
6-23	1367-1371	even	
6-24	1372-1376	care	
6-25	1377-1382	about	
6-26	1383-1395	unstructured	
6-27	1396-1400	data	
6-28	1400-1401	?	
6-29	1402-1404	It	
6-30	1405-1410	turns	
6-31	1411-1414	out	
6-32	1415-1419	that	
6-33	1420-1425	there	
6-34	1426-1429	are	
6-35	1430-1431	a	
6-36	1432-1435	few	
6-37	1436-1445	scenarios	
6-38	1446-1451	where	
6-39	1452-1454	it	
6-40	1455-1457	is	
6-41	1458-1464	useful	
6-42	1464-1465	.	

#Text=Schema flexibility
7-1	1466-1472	Schema	
7-2	1473-1484	flexibility	

#Text=One of the main reasons to store data using the JSON format is schema flexibility. Storing your data in JSON is useful when your schema is fluid and is changing frequently. If you store each of the keys as columns, it will result in frequent DML operations – this can be difficult when your data set is large - for example, event tracking, analytics, tags, etc. Note: If a particular key is always present in your document, it might make sense to store it as a first class column. We discuss more about this approach in section “JSON Patterns & Antipatterns” below. Nested objects If your data set has nested objects (single or multi-level), in some cases, it is easier to handle them in JSON instead of denormalizing the data into columns or multiple tables. Syncing with external data sources
8-1	1485-1488	One	
8-2	1489-1491	of	
8-3	1492-1495	the	
8-4	1496-1500	main	
8-5	1501-1508	reasons	
8-6	1509-1511	to	
8-7	1512-1517	store	
8-8	1518-1522	data	
8-9	1523-1528	using	
8-10	1529-1532	the	
8-11	1533-1537	JSON	
8-12	1538-1544	format	
8-13	1545-1547	is	
8-14	1548-1554	schema	
8-15	1555-1566	flexibility	
8-16	1566-1567	.	
8-17	1568-1575	Storing	
8-18	1576-1580	your	
8-19	1581-1585	data	
8-20	1586-1588	in	
8-21	1589-1593	JSON	
8-22	1594-1596	is	
8-23	1597-1603	useful	
8-24	1604-1608	when	
8-25	1609-1613	your	
8-26	1614-1620	schema	
8-27	1621-1623	is	
8-28	1624-1629	fluid	
8-29	1630-1633	and	
8-30	1634-1636	is	
8-31	1637-1645	changing	
8-32	1646-1656	frequently	
8-33	1656-1657	.	
8-34	1658-1660	If	
8-35	1661-1664	you	
8-36	1665-1670	store	
8-37	1671-1675	each	
8-38	1676-1678	of	
8-39	1679-1682	the	
8-40	1683-1687	keys	
8-41	1688-1690	as	
8-42	1691-1698	columns	
8-43	1698-1699	,	
8-44	1700-1702	it	
8-45	1703-1707	will	
8-46	1708-1714	result	
8-47	1715-1717	in	
8-48	1718-1726	frequent	
8-49	1727-1730	DML	
8-50	1731-1741	operations	
8-51	1742-1743	–	
8-52	1744-1748	this	
8-53	1749-1752	can	
8-54	1753-1755	be	
8-55	1756-1765	difficult	
8-56	1766-1770	when	
8-57	1771-1775	your	
8-58	1776-1780	data	
8-59	1781-1784	set	
8-60	1785-1787	is	
8-61	1788-1793	large	
8-62	1793-1794	 	
8-63	1794-1795	-	
8-64	1796-1799	for	
8-65	1800-1807	example	
8-66	1807-1808	,	
8-67	1809-1814	event	
8-68	1815-1823	tracking	
8-69	1823-1824	,	
8-70	1825-1834	analytics	
8-71	1834-1835	,	
8-72	1836-1840	tags	
8-73	1840-1841	,	
8-74	1842-1845	etc	
8-75	1845-1846	.	
8-76	1847-1851	Note	
8-77	1851-1852	:	
8-78	1853-1855	If	
8-79	1856-1857	a	
8-80	1858-1868	particular	
8-81	1869-1872	key	
8-82	1873-1875	is	
8-83	1876-1882	always	
8-84	1883-1890	present	
8-85	1891-1893	in	
8-86	1894-1898	your	
8-87	1899-1907	document	
8-88	1907-1908	,	
8-89	1909-1911	it	
8-90	1912-1917	might	
8-91	1918-1922	make	
8-92	1923-1928	sense	
8-93	1929-1931	to	
8-94	1932-1937	store	
8-95	1938-1940	it	
8-96	1941-1943	as	
8-97	1944-1945	a	
8-98	1946-1951	first	
8-99	1952-1957	class	
8-100	1958-1964	column	
8-101	1964-1965	.	
8-102	1966-1968	We	
8-103	1969-1976	discuss	
8-104	1977-1981	more	
8-105	1982-1987	about	
8-106	1988-1992	this	
8-107	1993-2001	approach	
8-108	2002-2004	in	
8-109	2005-2012	section	
8-110	2013-2014	“	
8-111	2014-2018	JSON	
8-112	2019-2027	Patterns	
8-113	2028-2029	&	
8-114	2030-2042	Antipatterns	
8-115	2042-2043	”	
8-116	2044-2049	below	
8-117	2049-2050	.	
8-118	2051-2057	Nested	
8-119	2058-2065	objects	
8-120	2066-2068	If	
8-121	2069-2073	your	
8-122	2074-2078	data	
8-123	2079-2082	set	
8-124	2083-2086	has	
8-125	2087-2093	nested	
8-126	2094-2101	objects	
8-127	2102-2103	(	
8-128	2103-2109	single	
8-129	2110-2112	or	
8-130	2113-2124	multi-level	
8-131	2124-2125	)	
8-132	2125-2126	,	
8-133	2127-2129	in	
8-134	2130-2134	some	
8-135	2135-2140	cases	
8-136	2140-2141	,	
8-137	2142-2144	it	
8-138	2145-2147	is	
8-139	2148-2154	easier	
8-140	2155-2157	to	
8-141	2158-2164	handle	
8-142	2165-2169	them	
8-143	2170-2172	in	
8-144	2173-2177	JSON	
8-145	2178-2185	instead	
8-146	2186-2188	of	
8-147	2189-2202	denormalizing	
8-148	2203-2206	the	
8-149	2207-2211	data	
8-150	2212-2216	into	
8-151	2217-2224	columns	
8-152	2225-2227	or	
8-153	2228-2236	multiple	
8-154	2237-2243	tables	
8-155	2243-2244	.	
8-156	2245-2252	Syncing	
8-157	2253-2257	with	
8-158	2258-2266	external	
8-159	2267-2271	data	
8-160	2272-2279	sources	

#Text=Often times an external system is providing data as JSON, so it might be a temporary store before data is ingested into other parts of the system. For example, Stripe transactions. Timeline of JSON Support in PostgreSQL JSON support in PostgreSQL was introduced in 9.2 and has steadily improved in every release going forward. Wave 1: PostgreSQL 9.2  (2012) added support for JSON data type
9-1	2280-2285	Often	
9-2	2286-2291	times	
9-3	2292-2294	an	
9-4	2295-2303	external	
9-5	2304-2310	system	
9-6	2311-2313	is	
9-7	2314-2323	providing	
9-8	2324-2328	data	
9-9	2329-2331	as	
9-10	2332-2336	JSON	
9-11	2336-2337	,	
9-12	2338-2340	so	
9-13	2341-2343	it	
9-14	2344-2349	might	
9-15	2350-2352	be	
9-16	2353-2354	a	
9-17	2355-2364	temporary	
9-18	2365-2370	store	
9-19	2371-2377	before	
9-20	2378-2382	data	
9-21	2383-2385	is	
9-22	2386-2394	ingested	
9-23	2395-2399	into	
9-24	2400-2405	other	
9-25	2406-2411	parts	
9-26	2412-2414	of	
9-27	2415-2418	the	
9-28	2419-2425	system	
9-29	2425-2426	.	
9-30	2426-2427	 	
9-31	2427-2430	For	
9-32	2431-2438	example	
9-33	2438-2439	,	
9-34	2440-2446	Stripe	
9-35	2447-2459	transactions	
9-36	2459-2460	.	
9-37	2461-2469	Timeline	
9-38	2470-2472	of	
9-39	2473-2477	JSON	
9-40	2478-2485	Support	
9-41	2486-2488	in	
9-42	2489-2499	PostgreSQL	
9-43	2500-2504	JSON	
9-44	2505-2512	support	
9-45	2513-2515	in	
9-46	2516-2526	PostgreSQL	
9-47	2527-2530	was	
9-48	2531-2541	introduced	
9-49	2542-2544	in	
9-50	2545-2548	9.2	
9-51	2549-2552	and	
9-52	2553-2556	has	
9-53	2557-2565	steadily	
9-54	2566-2574	improved	
9-55	2575-2577	in	
9-56	2578-2583	every	
9-57	2584-2591	release	
9-58	2592-2597	going	
9-59	2598-2605	forward	
9-60	2605-2606	.	
9-61	2607-2611	Wave	
9-62	2612-2613	1	
9-63	2613-2614	:	
9-64	2615-2625	PostgreSQL	
9-65	2626-2629	9.2	
9-66	2629-2630	 	
9-67	2631-2632	(	
9-68	2632-2636	2012	
9-69	2636-2637	)	
9-70	2638-2643	added	
9-71	2644-2651	support	
9-72	2652-2655	for	
9-73	2656-2660	JSON	
9-74	2661-2665	data	
9-75	2666-2670	type	

#Text=JSON database in 9.2 was fairly limited (and probably overhyped at that point) – basically a glorified string with some JSON validation thrown in. It is useful to validate incoming JSON and store in the database. More details are provided below. Wave 2: PostgreSQL 9.4 (2014) added support for JSONB data type
10-1	2671-2675	JSON	
10-2	2675-2676	 	
10-3	2676-2684	database	
10-4	2685-2687	in	
10-5	2688-2691	9.2	
10-6	2692-2695	was	
10-7	2696-2702	fairly	
10-8	2703-2710	limited	
10-9	2711-2712	(	
10-10	2712-2715	and	
10-11	2716-2724	probably	
10-12	2725-2734	overhyped	
10-13	2735-2737	at	
10-14	2738-2742	that	
10-15	2743-2748	point	
10-16	2748-2749	)	
10-17	2750-2751	–	
10-18	2752-2761	basically	
10-19	2762-2763	a	
10-20	2764-2773	glorified	
10-21	2774-2780	string	
10-22	2781-2785	with	
10-23	2786-2790	some	
10-24	2791-2795	JSON	
10-25	2796-2806	validation	
10-26	2807-2813	thrown	
10-27	2814-2816	in	
10-28	2816-2817	.	
10-29	2818-2820	It	
10-30	2821-2823	is	
10-31	2824-2830	useful	
10-32	2831-2833	to	
10-33	2834-2842	validate	
10-34	2843-2851	incoming	
10-35	2852-2856	JSON	
10-36	2857-2860	and	
10-37	2861-2866	store	
10-38	2867-2869	in	
10-39	2870-2873	the	
10-40	2874-2882	database	
10-41	2882-2883	.	
10-42	2884-2888	More	
10-43	2889-2896	details	
10-44	2897-2900	are	
10-45	2901-2909	provided	
10-46	2910-2915	below	
10-47	2915-2916	.	
10-48	2917-2921	Wave	
10-49	2922-2923	2	
10-50	2923-2924	:	
10-51	2925-2935	PostgreSQL	
10-52	2936-2939	9.4	
10-53	2940-2941	(	
10-54	2941-2945	2014	
10-55	2945-2946	)	
10-56	2947-2952	added	
10-57	2953-2960	support	
10-58	2961-2964	for	
10-59	2965-2970	JSONB	
10-60	2971-2975	data	
10-61	2976-2980	type	

#Text=JSONB stands for “JSON Binary” or “JSON better” depending on whom you ask. It is a decomposed binary format to store JSON. JSONB supports indexing the JSON data, and is very efficient at parsing and querying the JSON data. In most cases, when you work with JSON in PostgreSQL, you should be using JSONB. Wave 3: PostgreSQL 12 (2019) added support for SQL/JSON standard and JSONPATH queries JSONPath brings a powerful JSON query engine to PostgreSQL. When Should You Use JSON vs. JSONB?
11-1	2981-2986	JSONB	
11-2	2987-2993	stands	
11-3	2994-2997	for	
11-4	2998-2999	“	
11-5	2999-3003	JSON	
11-6	3004-3010	Binary	
11-7	3010-3011	”	
11-8	3012-3014	or	
11-9	3015-3016	“	
11-10	3016-3020	JSON	
11-11	3021-3027	better	
11-12	3027-3028	”	
11-13	3029-3038	depending	
11-14	3039-3041	on	
11-15	3042-3046	whom	
11-16	3047-3050	you	
11-17	3051-3054	ask	
11-18	3054-3055	.	
11-19	3056-3058	It	
11-20	3059-3061	is	
11-21	3062-3063	a	
11-22	3064-3074	decomposed	
11-23	3075-3081	binary	
11-24	3082-3088	format	
11-25	3089-3091	to	
11-26	3092-3097	store	
11-27	3098-3102	JSON	
11-28	3102-3103	.	
11-29	3103-3104	 	
11-30	3104-3109	JSONB	
11-31	3110-3118	supports	
11-32	3119-3127	indexing	
11-33	3128-3131	the	
11-34	3132-3136	JSON	
11-35	3137-3141	data	
11-36	3141-3142	,	
11-37	3143-3146	and	
11-38	3147-3149	is	
11-39	3150-3154	very	
11-40	3155-3164	efficient	
11-41	3165-3167	at	
11-42	3168-3175	parsing	
11-43	3176-3179	and	
11-44	3180-3188	querying	
11-45	3189-3192	the	
11-46	3193-3197	JSON	
11-47	3198-3202	data	
11-48	3202-3203	.	
11-49	3204-3206	In	
11-50	3207-3211	most	
11-51	3212-3217	cases	
11-52	3217-3218	,	
11-53	3219-3223	when	
11-54	3224-3227	you	
11-55	3228-3232	work	
11-56	3233-3237	with	
11-57	3238-3242	JSON	
11-58	3243-3245	in	
11-59	3246-3256	PostgreSQL	
11-60	3256-3257	,	
11-61	3258-3261	you	
11-62	3262-3268	should	
11-63	3269-3271	be	
11-64	3272-3277	using	
11-65	3278-3283	JSONB	
11-66	3283-3284	.	
11-67	3285-3289	Wave	
11-68	3290-3291	3	
11-69	3291-3292	:	
11-70	3293-3303	PostgreSQL	
11-71	3304-3306	12	
11-72	3307-3308	(	
11-73	3308-3312	2019	
11-74	3312-3313	)	
11-75	3314-3319	added	
11-76	3320-3327	support	
11-77	3328-3331	for	
11-78	3332-3335	SQL	
11-79	3335-3336	/	
11-80	3336-3340	JSON	
11-81	3341-3349	standard	
11-82	3350-3353	and	
11-83	3354-3362	JSONPATH	
11-84	3363-3370	queries	
11-85	3371-3379	JSONPath	
11-86	3380-3386	brings	
11-87	3387-3388	a	
11-88	3389-3397	powerful	
11-89	3398-3402	JSON	
11-90	3403-3408	query	
11-91	3409-3415	engine	
11-92	3416-3418	to	
11-93	3419-3429	PostgreSQL	
11-94	3429-3430	.	
11-95	3431-3435	When	
11-96	3436-3442	Should	
11-97	3443-3446	You	
11-98	3447-3450	Use	
11-99	3451-3455	JSON	
11-100	3456-3458	vs	
11-101	3458-3459	.	
11-102	3460-3465	JSONB	
11-103	3465-3466	?	

#Text=In most cases, JSONB is what you should be using. However, there are some specific cases where JSON works better: JSON preserves the original formatting (a.k.a whitespace) and ordering of the keys. JSON preserves duplicate keys. JSON is faster to ingest vs. JSONB – however, if you do any further processing, JSONB will be faster.
12-1	3467-3469	In	
12-2	3470-3474	most	
12-3	3475-3480	cases	
12-4	3480-3481	,	
12-5	3482-3487	JSONB	
12-6	3488-3490	is	
12-7	3491-3495	what	
12-8	3496-3499	you	
12-9	3500-3506	should	
12-10	3507-3509	be	
12-11	3510-3515	using	
12-12	3515-3516	.	
12-13	3517-3524	However	
12-14	3524-3525	,	
12-15	3526-3531	there	
12-16	3532-3535	are	
12-17	3536-3540	some	
12-18	3541-3549	specific	
12-19	3550-3555	cases	
12-20	3556-3561	where	
12-21	3562-3566	JSON	
12-22	3567-3572	works	
12-23	3573-3579	better	
12-24	3579-3580	:	
12-25	3581-3585	JSON	
12-26	3586-3595	preserves	
12-27	3596-3599	the	
12-28	3600-3608	original	
12-29	3609-3619	formatting	
12-30	3620-3621	(	
12-31	3621-3626	a.k.a	
12-32	3627-3637	whitespace	
12-33	3637-3638	)	
12-34	3639-3642	and	
12-35	3643-3651	ordering	
12-36	3652-3654	of	
12-37	3655-3658	the	
12-38	3659-3663	keys	
12-39	3663-3664	.	
12-40	3665-3669	JSON	
12-41	3670-3679	preserves	
12-42	3680-3689	duplicate	
12-43	3690-3694	keys	
12-44	3694-3695	.	
12-45	3696-3700	JSON	
12-46	3701-3703	is	
12-47	3704-3710	faster	
12-48	3711-3713	to	
12-49	3714-3720	ingest	
12-50	3721-3723	vs	
12-51	3723-3724	.	
12-52	3725-3730	JSONB	
12-53	3731-3732	–	
12-54	3733-3740	however	
12-55	3740-3741	,	
12-56	3742-3744	if	
12-57	3745-3748	you	
12-58	3749-3751	do	
12-59	3752-3755	any	
12-60	3756-3763	further	
12-61	3764-3774	processing	
12-62	3774-3775	,	
12-63	3776-3781	JSONB	
12-64	3782-3786	will	
12-65	3787-3789	be	
12-66	3790-3796	faster	
12-67	3796-3797	.	

#Text=For example, if you’re just ingesting JSON logs and not querying them in any way, then JSON might be a better option for you. For the purposes of this blog, when we refer to JSON support in PostgreSQL, we will refer to JSONB going forward. Using JSONB in PostgreSQL: How to Effectively Store & Index JSON Data in PostgreSQLClick To Tweet JSONB Patterns & Antipatterns
13-1	3798-3801	For	
13-2	3802-3809	example	
13-3	3809-3810	,	
13-4	3811-3813	if	
13-5	3814-3817	you	
13-6	3817-3818	’	
13-7	3818-3820	re	
13-8	3821-3825	just	
13-9	3826-3835	ingesting	
13-10	3836-3840	JSON	
13-11	3841-3845	logs	
13-12	3846-3849	and	
13-13	3850-3853	not	
13-14	3854-3862	querying	
13-15	3863-3867	them	
13-16	3868-3870	in	
13-17	3871-3874	any	
13-18	3875-3878	way	
13-19	3878-3879	,	
13-20	3880-3884	then	
13-21	3885-3889	JSON	
13-22	3890-3895	might	
13-23	3896-3898	be	
13-24	3899-3900	a	
13-25	3901-3907	better	
13-26	3908-3914	option	
13-27	3915-3918	for	
13-28	3919-3922	you	
13-29	3922-3923	.	
13-30	3924-3927	For	
13-31	3928-3931	the	
13-32	3932-3940	purposes	
13-33	3941-3943	of	
13-34	3944-3948	this	
13-35	3949-3953	blog	
13-36	3953-3954	,	
13-37	3955-3959	when	
13-38	3960-3962	we	
13-39	3963-3968	refer	
13-40	3969-3971	to	
13-41	3972-3976	JSON	
13-42	3977-3984	support	
13-43	3985-3987	in	
13-44	3988-3998	PostgreSQL	
13-45	3998-3999	,	
13-46	4000-4002	we	
13-47	4003-4007	will	
13-48	4008-4013	refer	
13-49	4014-4016	to	
13-50	4017-4022	JSONB	
13-51	4023-4028	going	
13-52	4029-4036	forward	
13-53	4036-4037	.	
13-54	4038-4043	Using	
13-55	4044-4049	JSONB	
13-56	4050-4052	in	
13-57	4053-4063	PostgreSQL	
13-58	4063-4064	:	
13-59	4065-4068	How	
13-60	4069-4071	to	
13-61	4072-4083	Effectively	
13-62	4084-4089	Store	
13-63	4090-4091	&	
13-64	4092-4097	Index	
13-65	4098-4102	JSON	
13-66	4103-4107	Data	
13-67	4108-4110	in	
13-68	4111-4126	PostgreSQLClick	
13-69	4127-4129	To	
13-70	4130-4135	Tweet	
13-71	4136-4141	JSONB	
13-72	4142-4150	Patterns	
13-73	4151-4152	&	
13-74	4153-4165	Antipatterns	

#Text=If PostgreSQL has great support for JSONB, why do we need columns anymore? Why not just create a table with a JSONB blob and get rid of all columns like the schema below: CREATE TABLE test(id int, data JSONB, PRIMARY KEY (id)); At the end of the day, columns are still the most efficient technique to work with your data. JSONB storage has some drawbacks vs. traditional columns:
14-1	4166-4168	If	
14-2	4169-4179	PostgreSQL	
14-3	4180-4183	has	
14-4	4184-4189	great	
14-5	4190-4197	support	
14-6	4198-4201	for	
14-7	4202-4207	JSONB	
14-8	4207-4208	,	
14-9	4209-4212	why	
14-10	4213-4215	do	
14-11	4216-4218	we	
14-12	4219-4223	need	
14-13	4224-4231	columns	
14-14	4232-4239	anymore	
14-15	4239-4240	?	
14-16	4241-4244	Why	
14-17	4245-4248	not	
14-18	4249-4253	just	
14-19	4254-4260	create	
14-20	4261-4262	a	
14-21	4263-4268	table	
14-22	4269-4273	with	
14-23	4274-4275	a	
14-24	4276-4281	JSONB	
14-25	4282-4286	blob	
14-26	4287-4290	and	
14-27	4291-4294	get	
14-28	4295-4298	rid	
14-29	4299-4301	of	
14-30	4302-4305	all	
14-31	4306-4313	columns	
14-32	4314-4318	like	
14-33	4319-4322	the	
14-34	4323-4329	schema	
14-35	4330-4335	below	
14-36	4335-4336	:	
14-37	4337-4343	CREATE	
14-38	4344-4349	TABLE	
14-39	4350-4354	test	
14-40	4354-4355	(	
14-41	4355-4357	id	
14-42	4358-4361	int	
14-43	4361-4362	,	
14-44	4363-4367	data	
14-45	4368-4373	JSONB	
14-46	4373-4374	,	
14-47	4375-4382	PRIMARY	
14-48	4383-4386	KEY	
14-49	4387-4388	(	
14-50	4388-4390	id	
14-51	4390-4391	)	
14-52	4391-4392	)	
14-53	4392-4393	;	
14-54	4394-4396	At	
14-55	4397-4400	the	
14-56	4401-4404	end	
14-57	4405-4407	of	
14-58	4408-4411	the	
14-59	4412-4415	day	
14-60	4415-4416	,	
14-61	4417-4424	columns	
14-62	4425-4428	are	
14-63	4429-4434	still	
14-64	4435-4438	the	
14-65	4439-4443	most	
14-66	4444-4453	efficient	
14-67	4454-4463	technique	
14-68	4464-4466	to	
14-69	4467-4471	work	
14-70	4472-4476	with	
14-71	4477-4481	your	
14-72	4482-4486	data	
14-73	4486-4487	.	
14-74	4488-4493	JSONB	
14-75	4494-4501	storage	
14-76	4502-4505	has	
14-77	4506-4510	some	
14-78	4511-4520	drawbacks	
14-79	4521-4523	vs	
14-80	4523-4524	.	
14-81	4525-4536	traditional	
14-82	4537-4544	columns	
14-83	4544-4545	:	

#Text=PostreSQL does not store column statistics for JSONB columns
15-1	4546-4555	PostreSQL	
15-2	4556-4560	does	
15-3	4561-4564	not	
15-4	4565-4570	store	
15-5	4571-4577	column	
15-6	4578-4588	statistics	
15-7	4589-4592	for	
15-8	4593-4598	JSONB	
15-9	4599-4606	columns	

#Text=PostgreSQL maintains statistics about the distributions of values in each column of the table - most common values (MCV), NULL entries, histogram of distribution. Based on this data, the PostgreSQL query planner makes smart decisions on the plan to use for the query. At this point, PostgreSQL does not store any stats for JSONB columns or keys. This can sometimes result in poor choices like using nested loop joins vs. hash joins, etc. A more detailed example of this is provided in this blog post – When To Avoid JSONB In A PostgreSQL Schema. JSONB storage results in a larger storage footprint
16-1	4607-4617	PostgreSQL	
16-2	4618-4627	maintains	
16-3	4628-4638	statistics	
16-4	4639-4644	about	
16-5	4645-4648	the	
16-6	4649-4662	distributions	
16-7	4663-4665	of	
16-8	4666-4672	values	
16-9	4673-4675	in	
16-10	4676-4680	each	
16-11	4681-4687	column	
16-12	4688-4690	of	
16-13	4691-4694	the	
16-14	4695-4700	table	
16-15	4701-4702	-	
16-16	4702-4703	 	
16-17	4703-4707	most	
16-18	4708-4714	common	
16-19	4715-4721	values	
16-20	4722-4723	(	
16-21	4723-4726	MCV	
16-22	4726-4727	)	
16-23	4727-4728	,	
16-24	4729-4733	NULL	
16-25	4734-4741	entries	
16-26	4741-4742	,	
16-27	4743-4752	histogram	
16-28	4753-4755	of	
16-29	4756-4768	distribution	
16-30	4768-4769	.	
16-31	4770-4775	Based	
16-32	4776-4778	on	
16-33	4779-4783	this	
16-34	4784-4788	data	
16-35	4788-4789	,	
16-36	4790-4793	the	
16-37	4794-4804	PostgreSQL	
16-38	4805-4810	query	
16-39	4811-4818	planner	
16-40	4819-4824	makes	
16-41	4825-4830	smart	
16-42	4831-4840	decisions	
16-43	4841-4843	on	
16-44	4844-4847	the	
16-45	4848-4852	plan	
16-46	4853-4855	to	
16-47	4856-4859	use	
16-48	4860-4863	for	
16-49	4864-4867	the	
16-50	4868-4873	query	
16-51	4873-4874	.	
16-52	4875-4877	At	
16-53	4878-4882	this	
16-54	4883-4888	point	
16-55	4888-4889	,	
16-56	4890-4900	PostgreSQL	
16-57	4901-4905	does	
16-58	4906-4909	not	
16-59	4910-4915	store	
16-60	4916-4919	any	
16-61	4920-4925	stats	
16-62	4926-4929	for	
16-63	4930-4935	JSONB	
16-64	4936-4943	columns	
16-65	4944-4946	or	
16-66	4947-4951	keys	
16-67	4951-4952	.	
16-68	4953-4957	This	
16-69	4958-4961	can	
16-70	4962-4971	sometimes	
16-71	4972-4978	result	
16-72	4979-4981	in	
16-73	4982-4986	poor	
16-74	4987-4994	choices	
16-75	4995-4999	like	
16-76	5000-5005	using	
16-77	5006-5012	nested	
16-78	5013-5017	loop	
16-79	5018-5023	joins	
16-80	5024-5026	vs	
16-81	5026-5027	.	
16-82	5028-5032	hash	
16-83	5033-5038	joins	
16-84	5038-5039	,	
16-85	5040-5043	etc	
16-86	5043-5044	.	
16-87	5045-5046	A	
16-88	5047-5051	more	
16-89	5052-5060	detailed	
16-90	5061-5068	example	
16-91	5069-5071	of	
16-92	5072-5076	this	
16-93	5077-5079	is	
16-94	5080-5088	provided	
16-95	5089-5091	in	
16-96	5092-5096	this	
16-97	5097-5101	blog	
16-98	5102-5106	post	
16-99	5107-5108	–	
16-100	5109-5113	When	
16-101	5114-5116	To	
16-102	5117-5122	Avoid	
16-103	5123-5128	JSONB	
16-104	5129-5131	In	
16-105	5132-5133	A	
16-106	5134-5144	PostgreSQL	
16-107	5145-5151	Schema	
16-108	5151-5152	.	
16-109	5153-5158	JSONB	
16-110	5159-5166	storage	
16-111	5167-5174	results	
16-112	5175-5177	in	
16-113	5178-5179	a	
16-114	5180-5186	larger	
16-115	5187-5194	storage	
16-116	5195-5204	footprint	

#Text=JSONB storage does not deduplicate the key names in the JSON. This can result in considerably larger storage footprint compared to MongoDB BSON on WiredTiger or traditional column storage. I ran a simple test with the below JSONB model storing about 10 million rows of data, and here are the results – In some ways this is similar to the MongoDB MMAPV1 storage model where the keys in JSONB were stored as-is without any compression. One long-term fix is to move the key names to a table level dictionary and refer this dictionary instead of storing the key names repeatedly. Until then, the workaround might be to use more compact names (unix-style) instead of more descriptive names. For example, if you’re storing millions of instances of a particular key, it would be better storage-wise to name it “pb” instead of “publisherName”. The most efficient way to leverage JSONB in PostgreSQL is to combine columns and JSONB. If a key appears very frequently in your JSONB blobs, it is probably better off being stored as a column. Use JSONB as a “catch all” to handle the variable parts of your schema while leveraging traditional columns for fields that are more stable.
17-1	5205-5210	JSONB	
17-2	5211-5218	storage	
17-3	5219-5223	does	
17-4	5224-5227	not	
17-5	5228-5239	deduplicate	
17-6	5240-5243	the	
17-7	5244-5247	key	
17-8	5248-5253	names	
17-9	5254-5256	in	
17-10	5257-5260	the	
17-11	5261-5265	JSON	
17-12	5265-5266	.	
17-13	5267-5271	This	
17-14	5272-5275	can	
17-15	5276-5282	result	
17-16	5283-5285	in	
17-17	5286-5298	considerably	
17-18	5299-5305	larger	
17-19	5306-5313	storage	
17-20	5314-5323	footprint	
17-21	5324-5332	compared	
17-22	5333-5335	to	
17-23	5336-5343	MongoDB	
17-24	5344-5348	BSON	
17-25	5349-5351	on	
17-26	5352-5362	WiredTiger	
17-27	5363-5365	or	
17-28	5366-5377	traditional	
17-29	5378-5384	column	
17-30	5385-5392	storage	
17-31	5392-5393	.	
17-32	5394-5395	I	
17-33	5396-5399	ran	
17-34	5400-5401	a	
17-35	5402-5408	simple	
17-36	5409-5413	test	
17-37	5414-5418	with	
17-38	5419-5422	the	
17-39	5423-5428	below	
17-40	5429-5434	JSONB	
17-41	5435-5440	model	
17-42	5441-5448	storing	
17-43	5449-5454	about	
17-44	5455-5457	10	
17-45	5458-5465	million	
17-46	5466-5470	rows	
17-47	5471-5473	of	
17-48	5474-5478	data	
17-49	5478-5479	,	
17-50	5480-5483	and	
17-51	5484-5488	here	
17-52	5489-5492	are	
17-53	5493-5496	the	
17-54	5497-5504	results	
17-55	5505-5506	–	
17-56	5507-5509	In	
17-57	5510-5514	some	
17-58	5515-5519	ways	
17-59	5520-5524	this	
17-60	5525-5527	is	
17-61	5528-5535	similar	
17-62	5536-5538	to	
17-63	5539-5542	the	
17-64	5543-5550	MongoDB	
17-65	5551-5557	MMAPV1	
17-66	5558-5565	storage	
17-67	5566-5571	model	
17-68	5572-5577	where	
17-69	5578-5581	the	
17-70	5582-5586	keys	
17-71	5587-5589	in	
17-72	5590-5595	JSONB	
17-73	5596-5600	were	
17-74	5601-5607	stored	
17-75	5608-5613	as-is	
17-76	5614-5621	without	
17-77	5622-5625	any	
17-78	5626-5637	compression	
17-79	5637-5638	.	
17-80	5639-5642	One	
17-81	5643-5652	long-term	
17-82	5653-5656	fix	
17-83	5657-5659	is	
17-84	5660-5662	to	
17-85	5663-5667	move	
17-86	5668-5671	the	
17-87	5672-5675	key	
17-88	5676-5681	names	
17-89	5682-5684	to	
17-90	5685-5686	a	
17-91	5687-5692	table	
17-92	5693-5698	level	
17-93	5699-5709	dictionary	
17-94	5710-5713	and	
17-95	5714-5719	refer	
17-96	5720-5724	this	
17-97	5725-5735	dictionary	
17-98	5736-5743	instead	
17-99	5744-5746	of	
17-100	5747-5754	storing	
17-101	5755-5758	the	
17-102	5759-5762	key	
17-103	5763-5768	names	
17-104	5769-5779	repeatedly	
17-105	5779-5780	.	
17-106	5780-5781	 	
17-107	5781-5786	Until	
17-108	5787-5791	then	
17-109	5791-5792	,	
17-110	5793-5796	the	
17-111	5797-5807	workaround	
17-112	5808-5813	might	
17-113	5814-5816	be	
17-114	5817-5819	to	
17-115	5820-5823	use	
17-116	5824-5828	more	
17-117	5829-5836	compact	
17-118	5837-5842	names	
17-119	5843-5844	(	
17-120	5844-5854	unix-style	
17-121	5854-5855	)	
17-122	5856-5863	instead	
17-123	5864-5866	of	
17-124	5867-5871	more	
17-125	5872-5883	descriptive	
17-126	5884-5889	names	
17-127	5889-5890	.	
17-128	5890-5891	 	
17-129	5891-5894	For	
17-130	5895-5902	example	
17-131	5902-5903	,	
17-132	5903-5904	 	
17-133	5904-5906	if	
17-134	5907-5910	you	
17-135	5910-5911	’	
17-136	5911-5913	re	
17-137	5914-5921	storing	
17-138	5922-5930	millions	
17-139	5931-5933	of	
17-140	5934-5943	instances	
17-141	5944-5946	of	
17-142	5947-5948	a	
17-143	5949-5959	particular	
17-144	5960-5963	key	
17-145	5963-5964	,	
17-146	5965-5967	it	
17-147	5968-5973	would	
17-148	5974-5976	be	
17-149	5977-5983	better	
17-150	5984-5996	storage-wise	
17-151	5997-5999	to	
17-152	6000-6004	name	
17-153	6005-6007	it	
17-154	6008-6009	“	
17-155	6009-6011	pb	
17-156	6011-6012	”	
17-157	6013-6020	instead	
17-158	6021-6023	of	
17-159	6024-6025	“	
17-160	6025-6038	publisherName	
17-161	6038-6039	”	
17-162	6039-6040	.	
17-163	6041-6044	The	
17-164	6045-6049	most	
17-165	6050-6059	efficient	
17-166	6060-6063	way	
17-167	6064-6066	to	
17-168	6067-6075	leverage	
17-169	6076-6081	JSONB	
17-170	6082-6084	in	
17-171	6085-6095	PostgreSQL	
17-172	6096-6098	is	
17-173	6099-6101	to	
17-174	6102-6109	combine	
17-175	6110-6117	columns	
17-176	6118-6121	and	
17-177	6122-6127	JSONB	
17-178	6127-6128	.	
17-179	6129-6131	If	
17-180	6132-6133	a	
17-181	6134-6137	key	
17-182	6138-6145	appears	
17-183	6145-6146	 	
17-184	6146-6150	very	
17-185	6151-6161	frequently	
17-186	6162-6164	in	
17-187	6165-6169	your	
17-188	6170-6175	JSONB	
17-189	6176-6181	blobs	
17-190	6181-6182	,	
17-191	6183-6185	it	
17-192	6186-6188	is	
17-193	6189-6197	probably	
17-194	6198-6204	better	
17-195	6205-6208	off	
17-196	6209-6214	being	
17-197	6215-6221	stored	
17-198	6222-6224	as	
17-199	6225-6226	a	
17-200	6227-6233	column	
17-201	6233-6234	.	
17-202	6235-6238	Use	
17-203	6239-6244	JSONB	
17-204	6245-6247	as	
17-205	6248-6249	a	
17-206	6250-6251	“	
17-207	6251-6256	catch	
17-208	6257-6260	all	
17-209	6260-6261	”	
17-210	6262-6264	to	
17-211	6265-6271	handle	
17-212	6272-6275	the	
17-213	6276-6284	variable	
17-214	6285-6290	parts	
17-215	6291-6293	of	
17-216	6294-6298	your	
17-217	6299-6305	schema	
17-218	6306-6311	while	
17-219	6312-6322	leveraging	
17-220	6323-6334	traditional	
17-221	6335-6342	columns	
17-222	6343-6346	for	
17-223	6347-6353	fields	
17-224	6354-6358	that	
17-225	6359-6362	are	
17-226	6363-6367	more	
17-227	6368-6374	stable	
17-228	6374-6375	.	

#Text=JSONB Data Structures Both JSONB and MongoDB BSON are essentially tree structures, using multi-level nodes to store the parsed JSONB data. MongoDB BSON has a very similar structure. Images source JSONB & TOAST
18-1	6376-6381	JSONB	
18-2	6382-6386	Data	
18-3	6387-6397	Structures	
18-4	6398-6402	Both	
18-5	6403-6408	JSONB	
18-6	6408-6409	 	
18-7	6409-6412	and	
18-8	6413-6420	MongoDB	
18-9	6421-6425	BSON	
18-10	6426-6429	are	
18-11	6430-6441	essentially	
18-12	6442-6446	tree	
18-13	6447-6457	structures	
18-14	6457-6458	,	
18-15	6459-6464	using	
18-16	6465-6476	multi-level	
18-17	6477-6482	nodes	
18-18	6483-6485	to	
18-19	6486-6491	store	
18-20	6492-6495	the	
18-21	6496-6502	parsed	
18-22	6503-6508	JSONB	
18-23	6509-6513	data	
18-24	6513-6514	.	
18-25	6515-6522	MongoDB	
18-26	6523-6527	BSON	
18-27	6528-6531	has	
18-28	6532-6533	a	
18-29	6534-6538	very	
18-30	6539-6546	similar	
18-31	6547-6556	structure	
18-32	6556-6557	.	
18-33	6558-6564	Images	
18-34	6565-6571	source	
18-35	6572-6577	JSONB	
18-36	6578-6579	&	
18-37	6580-6585	TOAST	

#Text=Another important consideration for storage is how JSONB interacts with TOAST (The Oversize Attribute Storage Technique). Typically, when the size of your column exceeds the TOAST_TUPLE_THRESHOLD (2kb default), PostgreSQL will attempt to compress the data and fit in 2kb. If that doesn’t work, the data is moved to out-of-line storage. This is what they call “TOASTing” the data. When the data is fetched, the reverse process “deTOASTting” needs to happen. You can also control the TOAST storage strategy: Extended – Allows for out-of-line storage and compression (using pglz). This is the default option. External – Allows for out-of-line storage, but not compression.
19-1	6586-6593	Another	
19-2	6594-6603	important	
19-3	6604-6617	consideration	
19-4	6618-6621	for	
19-5	6622-6629	storage	
19-6	6630-6632	is	
19-7	6633-6636	how	
19-8	6637-6642	JSONB	
19-9	6643-6652	interacts	
19-10	6653-6657	with	
19-11	6658-6663	TOAST	
19-12	6664-6665	(	
19-13	6665-6668	The	
19-14	6669-6677	Oversize	
19-15	6678-6687	Attribute	
19-16	6688-6695	Storage	
19-17	6696-6705	Technique	
19-18	6705-6706	)	
19-19	6706-6707	.	
19-20	6708-6717	Typically	
19-21	6717-6718	,	
19-22	6719-6723	when	
19-23	6724-6727	the	
19-24	6728-6732	size	
19-25	6733-6735	of	
19-26	6736-6740	your	
19-27	6741-6747	column	
19-28	6748-6755	exceeds	
19-29	6756-6759	the	
19-30	6760-6781	TOAST_TUPLE_THRESHOLD	
19-31	6782-6783	(	
19-32	6783-6786	2kb	
19-33	6787-6794	default	
19-34	6794-6795	)	
19-35	6795-6796	,	
19-36	6797-6807	PostgreSQL	
19-37	6808-6812	will	
19-38	6813-6820	attempt	
19-39	6821-6823	to	
19-40	6824-6832	compress	
19-41	6833-6836	the	
19-42	6837-6841	data	
19-43	6842-6845	and	
19-44	6846-6849	fit	
19-45	6850-6852	in	
19-46	6853-6856	2kb	
19-47	6856-6857	.	
19-48	6858-6860	If	
19-49	6861-6865	that	
19-50	6866-6871	doesn	
19-51	6871-6872	’	
19-52	6872-6873	t	
19-53	6874-6878	work	
19-54	6878-6879	,	
19-55	6880-6883	the	
19-56	6884-6888	data	
19-57	6889-6891	is	
19-58	6892-6897	moved	
19-59	6898-6900	to	
19-60	6901-6912	out-of-line	
19-61	6913-6920	storage	
19-62	6920-6921	.	
19-63	6922-6926	This	
19-64	6927-6929	is	
19-65	6930-6934	what	
19-66	6934-6935	 	
19-67	6935-6939	they	
19-68	6940-6944	call	
19-69	6945-6946	“	
19-70	6946-6954	TOASTing	
19-71	6954-6955	”	
19-72	6956-6959	the	
19-73	6960-6964	data	
19-74	6964-6965	.	
19-75	6966-6970	When	
19-76	6971-6974	the	
19-77	6975-6979	data	
19-78	6980-6982	is	
19-79	6983-6990	fetched	
19-80	6990-6991	,	
19-81	6992-6995	the	
19-82	6996-7003	reverse	
19-83	7004-7011	process	
19-84	7012-7013	“	
19-85	7013-7024	deTOASTting	
19-86	7024-7025	”	
19-87	7026-7031	needs	
19-88	7032-7034	to	
19-89	7035-7041	happen	
19-90	7041-7042	.	
19-91	7043-7046	You	
19-92	7047-7050	can	
19-93	7051-7055	also	
19-94	7056-7063	control	
19-95	7064-7067	the	
19-96	7068-7073	TOAST	
19-97	7074-7081	storage	
19-98	7082-7090	strategy	
19-99	7090-7091	:	
19-100	7092-7100	Extended	
19-101	7101-7102	–	
19-102	7103-7109	Allows	
19-103	7110-7113	for	
19-104	7114-7125	out-of-line	
19-105	7126-7133	storage	
19-106	7134-7137	and	
19-107	7138-7149	compression	
19-108	7150-7151	(	
19-109	7151-7156	using	
19-110	7157-7161	pglz	
19-111	7161-7162	)	
19-112	7162-7163	.	
19-113	7164-7168	This	
19-114	7169-7171	is	
19-115	7172-7175	the	
19-116	7176-7183	default	
19-117	7184-7190	option	
19-118	7190-7191	.	
19-119	7192-7200	External	
19-120	7201-7202	–	
19-121	7203-7209	Allows	
19-122	7210-7213	for	
19-123	7214-7225	out-of-line	
19-124	7226-7233	storage	
19-125	7233-7234	,	
19-126	7235-7238	but	
19-127	7239-7242	not	
19-128	7243-7254	compression	
19-129	7254-7255	.	

#Text=If you’re experiencing delays due to the TOAST compression or decompression, one option is to proactively set the column storage to ‘EXTENDED’. For all of the details, please refer to this PostgreSQL doc. JSONB Operators & Functions PostgreSQL provides a variety of operators to work on JSONB. From the docs: Operator Description Get JSON array element (indexed from zero, negative integers count from the end)
20-1	7256-7258	If	
20-2	7259-7262	you	
20-3	7262-7263	’	
20-4	7263-7265	re	
20-5	7266-7278	experiencing	
20-6	7279-7285	delays	
20-7	7286-7289	due	
20-8	7290-7292	to	
20-9	7293-7296	the	
20-10	7297-7302	TOAST	
20-11	7303-7314	compression	
20-12	7314-7315	 	
20-13	7315-7317	or	
20-14	7318-7331	decompression	
20-15	7331-7332	,	
20-16	7333-7336	one	
20-17	7337-7343	option	
20-18	7344-7346	is	
20-19	7347-7349	to	
20-20	7350-7361	proactively	
20-21	7362-7365	set	
20-22	7366-7369	the	
20-23	7370-7376	column	
20-24	7377-7384	storage	
20-25	7385-7387	to	
20-26	7388-7389	‘	
20-27	7389-7397	EXTENDED	
20-28	7397-7398	’	
20-29	7398-7399	.	
20-30	7400-7403	For	
20-31	7404-7407	all	
20-32	7408-7410	of	
20-33	7411-7414	the	
20-34	7415-7422	details	
20-35	7422-7423	,	
20-36	7424-7430	please	
20-37	7431-7436	refer	
20-38	7437-7439	to	
20-39	7440-7444	this	
20-40	7444-7445	 	
20-41	7445-7455	PostgreSQL	
20-42	7456-7459	doc	
20-43	7459-7460	.	
20-44	7461-7466	JSONB	
20-45	7467-7476	Operators	
20-46	7477-7478	&	
20-47	7479-7488	Functions	
20-48	7489-7499	PostgreSQL	
20-49	7500-7508	provides	
20-50	7509-7510	a	
20-51	7511-7518	variety	
20-52	7519-7521	of	
20-53	7522-7531	operators	
20-54	7532-7534	to	
20-55	7535-7539	work	
20-56	7540-7542	on	
20-57	7543-7548	JSONB	
20-58	7548-7549	.	
20-59	7550-7554	From	
20-60	7555-7558	the	
20-61	7559-7563	docs	
20-62	7563-7564	:	
20-63	7565-7573	Operator	
20-64	7574-7585	Description	
20-65	7586-7589	Get	
20-66	7590-7594	JSON	
20-67	7595-7600	array	
20-68	7601-7608	element	
20-69	7609-7610	(	
20-70	7610-7617	indexed	
20-71	7618-7622	from	
20-72	7623-7627	zero	
20-73	7627-7628	,	
20-74	7629-7637	negative	
20-75	7638-7646	integers	
20-76	7647-7652	count	
20-77	7653-7657	from	
20-78	7658-7661	the	
20-79	7662-7665	end	
20-80	7665-7666	)	

#Text=Get JSON object field by key ->> Get JSON array element as text ->> Get JSON object field as text Get JSON object at the specified path #>> Get JSON object at the specified path as text
21-1	7667-7670	Get	
21-2	7671-7675	JSON	
21-3	7676-7682	object	
21-4	7683-7688	field	
21-5	7689-7691	by	
21-6	7692-7695	key	
21-7	7696-7697	-	
21-8	7697-7698	>	
21-9	7698-7699	>	
21-10	7700-7703	Get	
21-11	7704-7708	JSON	
21-12	7709-7714	array	
21-13	7715-7722	element	
21-14	7723-7725	as	
21-15	7726-7730	text	
21-16	7731-7732	-	
21-17	7732-7733	>	
21-18	7733-7734	>	
21-19	7735-7738	Get	
21-20	7739-7743	JSON	
21-21	7744-7750	object	
21-22	7751-7756	field	
21-23	7757-7759	as	
21-24	7760-7764	text	
21-25	7765-7768	Get	
21-26	7769-7773	JSON	
21-27	7774-7780	object	
21-28	7781-7783	at	
21-29	7784-7787	the	
21-30	7788-7797	specified	
21-31	7798-7802	path	
21-32	7803-7804	#	
21-33	7804-7805	>	
21-34	7805-7806	>	
21-35	7807-7810	Get	
21-36	7811-7815	JSON	
21-37	7816-7822	object	
21-38	7823-7825	at	
21-39	7826-7829	the	
21-40	7830-7839	specified	
21-41	7840-7844	path	
21-42	7845-7847	as	
21-43	7848-7852	text	

#Text=Does the left JSON value contain the right JSON path/value entries at the top level? Are the left JSON path/value entries contained at the top level within the right JSON value? Does the string exist as a top-level key within the JSON value? Do any of these array strings exist as top-level keys?
22-1	7853-7857	Does	
22-2	7858-7861	the	
22-3	7862-7866	left	
22-4	7867-7871	JSON	
22-5	7872-7877	value	
22-6	7878-7885	contain	
22-7	7886-7889	the	
22-8	7890-7895	right	
22-9	7896-7900	JSON	
22-10	7901-7905	path	
22-11	7905-7906	/	
22-12	7906-7911	value	
22-13	7912-7919	entries	
22-14	7920-7922	at	
22-15	7923-7926	the	
22-16	7927-7930	top	
22-17	7931-7936	level	
22-18	7936-7937	?	
22-19	7938-7941	Are	
22-20	7942-7945	the	
22-21	7946-7950	left	
22-22	7951-7955	JSON	
22-23	7956-7960	path	
22-24	7960-7961	/	
22-25	7961-7966	value	
22-26	7967-7974	entries	
22-27	7975-7984	contained	
22-28	7985-7987	at	
22-29	7988-7991	the	
22-30	7992-7995	top	
22-31	7996-8001	level	
22-32	8002-8008	within	
22-33	8009-8012	the	
22-34	8013-8018	right	
22-35	8019-8023	JSON	
22-36	8024-8029	value	
22-37	8029-8030	?	
22-38	8031-8035	Does	
22-39	8036-8039	the	
22-40	8040-8046	string	
22-41	8047-8052	exist	
22-42	8053-8055	as	
22-43	8056-8057	a	
22-44	8058-8067	top-level	
22-45	8068-8071	key	
22-46	8072-8078	within	
22-47	8079-8082	the	
22-48	8083-8087	JSON	
22-49	8088-8093	value	
22-50	8093-8094	?	
22-51	8095-8097	Do	
22-52	8098-8101	any	
22-53	8102-8104	of	
22-54	8105-8110	these	
22-55	8111-8116	array	
22-56	8117-8124	strings	
22-57	8125-8130	exist	
22-58	8131-8133	as	
22-59	8134-8143	top-level	
22-60	8144-8148	keys	
22-61	8148-8149	?	

#Text=Do all of these array strings exist as top-level keys? Concatenate two jsonb values into a new jsonb value Delete key/value pair or string element from left operand. Key/value pairs are matched based on their key value. Delete multiple key/value pairs or string elements from left operand. Key/value pairs are matched based on their key value.
23-1	8150-8152	Do	
23-2	8153-8156	all	
23-3	8157-8159	of	
23-4	8160-8165	these	
23-5	8166-8171	array	
23-6	8172-8179	strings	
23-7	8180-8185	exist	
23-8	8186-8188	as	
23-9	8189-8198	top-level	
23-10	8199-8203	keys	
23-11	8203-8204	?	
23-12	8205-8216	Concatenate	
23-13	8217-8220	two	
23-14	8221-8226	jsonb	
23-15	8227-8233	values	
23-16	8234-8238	into	
23-17	8239-8240	a	
23-18	8241-8244	new	
23-19	8245-8250	jsonb	
23-20	8251-8256	value	
23-21	8257-8263	Delete	
23-22	8264-8267	key	
23-23	8267-8268	/	
23-24	8268-8273	value	
23-25	8274-8278	pair	
23-26	8279-8281	or	
23-27	8282-8288	string	
23-28	8289-8296	element	
23-29	8297-8301	from	
23-30	8302-8306	left	
23-31	8307-8314	operand	
23-32	8314-8315	.	
23-33	8316-8319	Key	
23-34	8319-8320	/	
23-35	8320-8325	value	
23-36	8326-8331	pairs	
23-37	8332-8335	are	
23-38	8336-8343	matched	
23-39	8344-8349	based	
23-40	8350-8352	on	
23-41	8353-8358	their	
23-42	8359-8362	key	
23-43	8363-8368	value	
23-44	8368-8369	.	
23-45	8370-8376	Delete	
23-46	8377-8385	multiple	
23-47	8386-8389	key	
23-48	8389-8390	/	
23-49	8390-8395	value	
23-50	8396-8401	pairs	
23-51	8402-8404	or	
23-52	8405-8411	string	
23-53	8412-8420	elements	
23-54	8421-8425	from	
23-55	8426-8430	left	
23-56	8431-8438	operand	
23-57	8438-8439	.	
23-58	8440-8443	Key	
23-59	8443-8444	/	
23-60	8444-8449	value	
23-61	8450-8455	pairs	
23-62	8456-8459	are	
23-63	8460-8467	matched	
23-64	8468-8473	based	
23-65	8474-8476	on	
23-66	8477-8482	their	
23-67	8483-8486	key	
23-68	8487-8492	value	
23-69	8492-8493	.	

#Text=Delete the array element with specified index (Negative integers count from the end). Throws an error if top level container is not an array. Delete the field or element with specified path (for JSON arrays, negative integers count from the end) Does JSON path return any item for the specified JSON value?
24-1	8494-8500	Delete	
24-2	8501-8504	the	
24-3	8505-8510	array	
24-4	8511-8518	element	
24-5	8519-8523	with	
24-6	8524-8533	specified	
24-7	8534-8539	index	
24-8	8540-8541	(	
24-9	8541-8549	Negative	
24-10	8550-8558	integers	
24-11	8559-8564	count	
24-12	8565-8569	from	
24-13	8570-8573	the	
24-14	8574-8577	end	
24-15	8577-8578	)	
24-16	8578-8579	.	
24-17	8580-8586	Throws	
24-18	8587-8589	an	
24-19	8590-8595	error	
24-20	8596-8598	if	
24-21	8599-8602	top	
24-22	8603-8608	level	
24-23	8609-8618	container	
24-24	8619-8621	is	
24-25	8622-8625	not	
24-26	8626-8628	an	
24-27	8629-8634	array	
24-28	8634-8635	.	
24-29	8636-8642	Delete	
24-30	8643-8646	the	
24-31	8647-8652	field	
24-32	8653-8655	or	
24-33	8656-8663	element	
24-34	8664-8668	with	
24-35	8669-8678	specified	
24-36	8679-8683	path	
24-37	8684-8685	(	
24-38	8685-8688	for	
24-39	8689-8693	JSON	
24-40	8694-8700	arrays	
24-41	8700-8701	,	
24-42	8702-8710	negative	
24-43	8711-8719	integers	
24-44	8720-8725	count	
24-45	8726-8730	from	
24-46	8731-8734	the	
24-47	8735-8738	end	
24-48	8738-8739	)	
24-49	8740-8744	Does	
24-50	8745-8749	JSON	
24-51	8750-8754	path	
24-52	8755-8761	return	
24-53	8762-8765	any	
24-54	8766-8770	item	
24-55	8771-8774	for	
24-56	8775-8778	the	
24-57	8779-8788	specified	
24-58	8789-8793	JSON	
24-59	8794-8799	value	
24-60	8799-8800	?	

#Text=Returns the result of JSON path predicate check for the specified JSON value. Only the first item of the result is taken into account. If the result is not Boolean, then null is returned. PostgreSQL also provides a variety of Creation Functions and Processing Functions to work with the JSONB data. JSONB Indexes
25-1	8801-8808	Returns	
25-2	8809-8812	the	
25-3	8813-8819	result	
25-4	8820-8822	of	
25-5	8823-8827	JSON	
25-6	8828-8832	path	
25-7	8833-8842	predicate	
25-8	8843-8848	check	
25-9	8849-8852	for	
25-10	8853-8856	the	
25-11	8857-8866	specified	
25-12	8867-8871	JSON	
25-13	8872-8877	value	
25-14	8877-8878	.	
25-15	8879-8883	Only	
25-16	8884-8887	the	
25-17	8888-8893	first	
25-18	8894-8898	item	
25-19	8899-8901	of	
25-20	8902-8905	the	
25-21	8906-8912	result	
25-22	8913-8915	is	
25-23	8916-8921	taken	
25-24	8922-8926	into	
25-25	8927-8934	account	
25-26	8934-8935	.	
25-27	8936-8938	If	
25-28	8939-8942	the	
25-29	8943-8949	result	
25-30	8950-8952	is	
25-31	8953-8956	not	
25-32	8957-8964	Boolean	
25-33	8964-8965	,	
25-34	8966-8970	then	
25-35	8971-8975	null	
25-36	8976-8978	is	
25-37	8979-8987	returned	
25-38	8987-8988	.	
25-39	8989-8999	PostgreSQL	
25-40	9000-9004	also	
25-41	9005-9013	provides	
25-42	9014-9015	a	
25-43	9016-9023	variety	
25-44	9024-9026	of	
25-45	9027-9035	Creation	
25-46	9036-9045	Functions	
25-47	9046-9049	and	
25-48	9050-9060	Processing	
25-49	9061-9070	Functions	
25-50	9071-9073	to	
25-51	9074-9078	work	
25-52	9079-9083	with	
25-53	9084-9087	the	
25-54	9088-9093	JSONB	
25-55	9094-9098	data	
25-56	9098-9099	.	
25-57	9100-9105	JSONB	
25-58	9106-9113	Indexes	

#Text=JSONB provides a wide array of options to index your JSON data. At a high-level, we are going to dig into 3 different types of indexes – GIN, BTREE and HASH. Not all index types support all operator classes, so planning is needed to design your indexes based on the type of operators and queries that you plan on using. GIN Indexes GIN stands for “Generalized Inverted indexes”. From the docs: “GIN is designed for handling cases where the items to be indexed are composite values, and the queries to be handled by the index need to search for element values that appear within the composite items. For example, the items could be documents, and the queries could be searches for documents containing specific words.”
26-1	9114-9119	JSONB	
26-2	9120-9128	provides	
26-3	9129-9130	a	
26-4	9131-9135	wide	
26-5	9136-9141	array	
26-6	9142-9144	of	
26-7	9145-9152	options	
26-8	9153-9155	to	
26-9	9156-9161	index	
26-10	9162-9166	your	
26-11	9167-9171	JSON	
26-12	9172-9176	data	
26-13	9176-9177	.	
26-14	9178-9180	At	
26-15	9181-9182	a	
26-16	9183-9193	high-level	
26-17	9193-9194	,	
26-18	9195-9197	we	
26-19	9198-9201	are	
26-20	9202-9207	going	
26-21	9208-9210	to	
26-22	9211-9214	dig	
26-23	9215-9219	into	
26-24	9220-9221	3	
26-25	9222-9231	different	
26-26	9232-9237	types	
26-27	9238-9240	of	
26-28	9241-9248	indexes	
26-29	9249-9250	–	
26-30	9251-9254	GIN	
26-31	9254-9255	,	
26-32	9256-9261	BTREE	
26-33	9261-9262	 	
26-34	9262-9265	and	
26-35	9266-9270	HASH	
26-36	9270-9271	.	
26-37	9272-9275	Not	
26-38	9276-9279	all	
26-39	9280-9285	index	
26-40	9286-9291	types	
26-41	9292-9299	support	
26-42	9300-9303	all	
26-43	9304-9312	operator	
26-44	9313-9320	classes	
26-45	9320-9321	,	
26-46	9322-9324	so	
26-47	9325-9333	planning	
26-48	9334-9336	is	
26-49	9337-9343	needed	
26-50	9344-9346	to	
26-51	9347-9353	design	
26-52	9354-9358	your	
26-53	9359-9366	indexes	
26-54	9367-9372	based	
26-55	9373-9375	on	
26-56	9376-9379	the	
26-57	9380-9384	type	
26-58	9385-9387	of	
26-59	9388-9397	operators	
26-60	9398-9401	and	
26-61	9402-9409	queries	
26-62	9410-9414	that	
26-63	9415-9418	you	
26-64	9419-9423	plan	
26-65	9424-9426	on	
26-66	9427-9432	using	
26-67	9432-9433	.	
26-68	9434-9437	GIN	
26-69	9438-9445	Indexes	
26-70	9446-9449	GIN	
26-71	9450-9456	stands	
26-72	9457-9460	for	
26-73	9461-9462	“	
26-74	9462-9473	Generalized	
26-75	9474-9482	Inverted	
26-76	9483-9490	indexes	
26-77	9490-9491	”	
26-78	9491-9492	.	
26-79	9493-9497	From	
26-80	9498-9501	the	
26-81	9502-9506	docs	
26-82	9506-9507	:	
26-83	9508-9509	“	
26-84	9509-9512	GIN	
26-85	9513-9515	is	
26-86	9516-9524	designed	
26-87	9525-9528	for	
26-88	9529-9537	handling	
26-89	9538-9543	cases	
26-90	9544-9549	where	
26-91	9550-9553	the	
26-92	9554-9559	items	
26-93	9560-9562	to	
26-94	9563-9565	be	
26-95	9566-9573	indexed	
26-96	9574-9577	are	
26-97	9578-9587	composite	
26-98	9588-9594	values	
26-99	9594-9595	,	
26-100	9596-9599	and	
26-101	9600-9603	the	
26-102	9604-9611	queries	
26-103	9612-9614	to	
26-104	9615-9617	be	
26-105	9618-9625	handled	
26-106	9626-9628	by	
26-107	9629-9632	the	
26-108	9633-9638	index	
26-109	9639-9643	need	
26-110	9644-9646	to	
26-111	9647-9653	search	
26-112	9654-9657	for	
26-113	9658-9665	element	
26-114	9666-9672	values	
26-115	9673-9677	that	
26-116	9678-9684	appear	
26-117	9685-9691	within	
26-118	9692-9695	the	
26-119	9696-9705	composite	
26-120	9706-9711	items	
26-121	9711-9712	.	
26-122	9713-9716	For	
26-123	9717-9724	example	
26-124	9724-9725	,	
26-125	9726-9729	the	
26-126	9730-9735	items	
26-127	9736-9741	could	
26-128	9742-9744	be	
26-129	9745-9754	documents	
26-130	9754-9755	,	
26-131	9756-9759	and	
26-132	9760-9763	the	
26-133	9764-9771	queries	
26-134	9772-9777	could	
26-135	9778-9780	be	
26-136	9781-9789	searches	
26-137	9790-9793	for	
26-138	9794-9803	documents	
26-139	9804-9814	containing	
26-140	9815-9823	specific	
26-141	9824-9829	words	
26-142	9829-9830	.	
26-143	9830-9831	”	

#Text=GIN supports two operator classes: jsonb_ops (default) – ?, ?|, ?&, @>, @@, @? [Index each key and value in the JSONB element] jsonb_pathops – @>, @@, @? [Index only the values in the JSONB element]
27-1	9832-9835	GIN	
27-2	9836-9844	supports	
27-3	9845-9848	two	
27-4	9849-9857	operator	
27-5	9858-9865	classes	
27-6	9865-9866	:	
27-7	9867-9876	jsonb_ops	
27-8	9877-9878	(	
27-9	9878-9885	default	
27-10	9885-9886	)	
27-11	9887-9888	–	
27-12	9889-9890	?	
27-13	9890-9891	,	
27-14	9892-9893	?	
27-15	9893-9894	|	
27-16	9894-9895	,	
27-17	9896-9897	?	
27-18	9897-9898	&	
27-19	9898-9899	,	
27-20	9900-9901	@	
27-21	9901-9902	>	
27-22	9902-9903	,	
27-23	9904-9905	@	
27-24	9905-9906	@	
27-25	9906-9907	,	
27-26	9908-9909	@	
27-27	9909-9910	?	
27-28	9911-9912	[	
27-29	9912-9917	Index	
27-30	9918-9922	each	
27-31	9923-9926	key	
27-32	9927-9930	and	
27-33	9931-9936	value	
27-34	9937-9939	in	
27-35	9940-9943	the	
27-36	9944-9949	JSONB	
27-37	9950-9957	element	
27-38	9957-9958	]	
27-39	9959-9972	jsonb_pathops	
27-40	9973-9974	–	
27-41	9975-9976	@	
27-42	9976-9977	>	
27-43	9977-9978	,	
27-44	9979-9980	@	
27-45	9980-9981	@	
27-46	9981-9982	,	
27-47	9983-9984	@	
27-48	9984-9985	?	
27-49	9986-9987	[	
27-50	9987-9992	Index	
27-51	9993-9997	only	
27-52	9998-10001	the	
27-53	10002-10008	values	
27-54	10009-10011	in	
27-55	10012-10015	the	
27-56	10016-10021	JSONB	
27-57	10022-10029	element	
27-58	10029-10030	]	

#Text=CREATE INDEX datagin ON books USING gin (data); Existence Operators (?, ?|, ?& ) These operators can be used to check for the existence of top-level keys in the JSONB. Let’s create a GIN index on the data JSONB column. For example, find all books that are available in braille. The JSON looks something like this:
28-1	10031-10037	CREATE	
28-2	10038-10043	INDEX	
28-3	10044-10051	datagin	
28-4	10052-10054	ON	
28-5	10055-10060	books	
28-6	10061-10066	USING	
28-7	10067-10070	gin	
28-8	10071-10072	(	
28-9	10072-10076	data	
28-10	10076-10077	)	
28-11	10077-10078	;	
28-12	10079-10088	Existence	
28-13	10089-10098	Operators	
28-14	10099-10100	(	
28-15	10100-10101	?	
28-16	10101-10102	,	
28-17	10103-10104	?	
28-18	10104-10105	|	
28-19	10105-10106	,	
28-20	10107-10108	?	
28-21	10108-10109	&	
28-22	10110-10111	)	
28-23	10112-10117	These	
28-24	10118-10127	operators	
28-25	10128-10131	can	
28-26	10132-10134	be	
28-27	10135-10139	used	
28-28	10140-10142	to	
28-29	10143-10148	check	
28-30	10149-10152	for	
28-31	10153-10156	the	
28-32	10157-10166	existence	
28-33	10167-10169	of	
28-34	10170-10179	top-level	
28-35	10180-10184	keys	
28-36	10185-10187	in	
28-37	10188-10191	the	
28-38	10192-10197	JSONB	
28-39	10197-10198	.	
28-40	10199-10202	Let	
28-41	10202-10203	’	
28-42	10203-10204	s	
28-43	10205-10211	create	
28-44	10212-10213	a	
28-45	10214-10217	GIN	
28-46	10218-10223	index	
28-47	10224-10226	on	
28-48	10227-10230	the	
28-49	10231-10235	data	
28-50	10236-10241	JSONB	
28-51	10242-10248	column	
28-52	10248-10249	.	
28-53	10250-10253	For	
28-54	10254-10261	example	
28-55	10261-10262	,	
28-56	10263-10267	find	
28-57	10268-10271	all	
28-58	10272-10277	books	
28-59	10278-10282	that	
28-60	10283-10286	are	
28-61	10287-10296	available	
28-62	10297-10299	in	
28-63	10300-10307	braille	
28-64	10307-10308	.	
28-65	10309-10312	The	
28-66	10313-10317	JSON	
28-67	10318-10323	looks	
28-68	10324-10333	something	
28-69	10334-10338	like	
28-70	10339-10343	this	
28-71	10343-10344	:	

#Text="{"tags": {"nk594127": {"ik71786": "iv678771"}}, "braille": false, "keywords": ["abc", "kef", "keh"], "hardcover": true, "publisher": "EfgdxUdvB0", "criticrating": 1} demo=# select * from books where data ? 'braille'; id | author | isbn | rating | data
29-1	10345-10346	"	
29-2	10346-10347	{	
29-3	10347-10348	"	
29-4	10348-10352	tags	
29-5	10352-10353	"	
29-6	10353-10354	:	
29-7	10355-10356	{	
29-8	10356-10357	"	
29-9	10357-10365	nk594127	
29-10	10365-10366	"	
29-11	10366-10367	:	
29-12	10368-10369	{	
29-13	10369-10370	"	
29-14	10370-10377	ik71786	
29-15	10377-10378	"	
29-16	10378-10379	:	
29-17	10380-10381	"	
29-18	10381-10389	iv678771	
29-19	10389-10390	"	
29-20	10390-10391	}	
29-21	10391-10392	}	
29-22	10392-10393	,	
29-23	10394-10395	"	
29-24	10395-10402	braille	
29-25	10402-10403	"	
29-26	10403-10404	:	
29-27	10405-10410	false	
29-28	10410-10411	,	
29-29	10412-10413	"	
29-30	10413-10421	keywords	
29-31	10421-10422	"	
29-32	10422-10423	:	
29-33	10424-10425	[	
29-34	10425-10426	"	
29-35	10426-10429	abc	
29-36	10429-10430	"	
29-37	10430-10431	,	
29-38	10432-10433	"	
29-39	10433-10436	kef	
29-40	10436-10437	"	
29-41	10437-10438	,	
29-42	10439-10440	"	
29-43	10440-10443	keh	
29-44	10443-10444	"	
29-45	10444-10445	]	
29-46	10445-10446	,	
29-47	10447-10448	"	
29-48	10448-10457	hardcover	
29-49	10457-10458	"	
29-50	10458-10459	:	
29-51	10460-10464	true	
29-52	10464-10465	,	
29-53	10466-10467	"	
29-54	10467-10476	publisher	
29-55	10476-10477	"	
29-56	10477-10478	:	
29-57	10479-10480	"	
29-58	10480-10490	EfgdxUdvB0	
29-59	10490-10491	"	
29-60	10491-10492	,	
29-61	10493-10494	"	
29-62	10494-10506	criticrating	
29-63	10506-10507	"	
29-64	10507-10508	:	
29-65	10509-10510	1	
29-66	10510-10511	}	
29-67	10512-10516	demo	
29-68	10516-10517	=	
29-69	10517-10518	#	
29-70	10519-10525	select	
29-71	10526-10527	*	
29-72	10528-10532	from	
29-73	10533-10538	books	
29-74	10539-10544	where	
29-75	10545-10549	data	
29-76	10550-10551	?	
29-77	10552-10553	'	
29-78	10553-10560	braille	
29-79	10560-10561	'	
29-80	10561-10562	;	
29-81	10563-10565	id	
29-82	10566-10567	|	
29-83	10568-10574	author	
29-84	10575-10576	|	
29-85	10577-10581	isbn	
29-86	10582-10583	|	
29-87	10584-10590	rating	
29-88	10591-10592	|	
29-89	10593-10597	data	

#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------ ------------------
30-1	10598-10599	-	
30-2	10599-10600	-	
30-3	10600-10601	-	
30-4	10601-10602	-	
30-5	10602-10603	-	
30-6	10603-10604	-	
30-7	10604-10605	-	
30-8	10605-10606	-	
30-9	10606-10607	-	
30-10	10607-10608	+	
30-11	10608-10609	-	
30-12	10609-10610	-	
30-13	10610-10611	-	
30-14	10611-10612	-	
30-15	10612-10613	-	
30-16	10613-10614	-	
30-17	10614-10615	-	
30-18	10615-10616	-	
30-19	10616-10617	-	
30-20	10617-10618	-	
30-21	10618-10619	-	
30-22	10619-10620	-	
30-23	10620-10621	-	
30-24	10621-10622	-	
30-25	10622-10623	-	
30-26	10623-10624	-	
30-27	10624-10625	-	
30-28	10625-10626	+	
30-29	10626-10627	-	
30-30	10627-10628	-	
30-31	10628-10629	-	
30-32	10629-10630	-	
30-33	10630-10631	-	
30-34	10631-10632	-	
30-35	10632-10633	-	
30-36	10633-10634	-	
30-37	10634-10635	-	
30-38	10635-10636	-	
30-39	10636-10637	-	
30-40	10637-10638	-	
30-41	10638-10639	+	
30-42	10639-10640	-	
30-43	10640-10641	-	
30-44	10641-10642	-	
30-45	10642-10643	-	
30-46	10643-10644	-	
30-47	10644-10645	-	
30-48	10645-10646	-	
30-49	10646-10647	-	
30-50	10647-10648	+	
30-51	10648-10649	-	
30-52	10649-10650	-	
30-53	10650-10651	-	
30-54	10651-10652	-	
30-55	10652-10653	-	
30-56	10653-10654	-	
30-57	10654-10655	-	
30-58	10655-10656	-	
30-59	10656-10657	-	
30-60	10657-10658	-	
30-61	10658-10659	-	
30-62	10659-10660	-	
30-63	10660-10661	-	
30-64	10661-10662	-	
30-65	10662-10663	-	
30-66	10663-10664	-	
30-67	10664-10665	-	
30-68	10665-10666	-	
30-69	10666-10667	-	
30-70	10667-10668	-	
30-71	10668-10669	-	
30-72	10669-10670	-	
30-73	10670-10671	-	
30-74	10671-10672	-	
30-75	10672-10673	-	
30-76	10673-10674	-	
30-77	10674-10675	-	
30-78	10675-10676	-	
30-79	10676-10677	-	
30-80	10677-10678	-	
30-81	10678-10679	-	
30-82	10679-10680	-	
30-83	10680-10681	-	
30-84	10681-10682	-	
30-85	10682-10683	-	
30-86	10683-10684	-	
30-87	10684-10685	-	
30-88	10685-10686	-	
30-89	10686-10687	-	
30-90	10687-10688	-	
30-91	10688-10689	-	
30-92	10689-10690	-	
30-93	10690-10691	-	
30-94	10691-10692	-	
30-95	10692-10693	-	
30-96	10693-10694	-	
30-97	10694-10695	-	
30-98	10695-10696	-	
30-99	10696-10697	-	
30-100	10697-10698	-	
30-101	10698-10699	-	
30-102	10699-10700	-	
30-103	10700-10701	-	
30-104	10701-10702	-	
30-105	10702-10703	-	
30-106	10703-10704	-	
30-107	10704-10705	-	
30-108	10705-10706	-	
30-109	10706-10707	-	
30-110	10707-10708	-	
30-111	10708-10709	-	
30-112	10709-10710	-	
30-113	10710-10711	-	
30-114	10711-10712	-	
30-115	10712-10713	-	
30-116	10713-10714	-	
30-117	10714-10715	-	
30-118	10715-10716	-	
30-119	10716-10717	-	
30-120	10717-10718	-	
30-121	10718-10719	-	
30-122	10719-10720	-	
30-123	10720-10721	-	
30-124	10721-10722	-	
30-125	10722-10723	-	
30-126	10723-10724	-	
30-127	10724-10725	-	
30-128	10725-10726	-	
30-129	10726-10727	-	
30-130	10727-10728	-	
30-131	10728-10729	-	
30-132	10729-10730	-	
30-133	10730-10731	-	
30-134	10731-10732	-	
30-135	10732-10733	-	
30-136	10733-10734	-	
30-137	10734-10735	-	
30-138	10735-10736	-	
30-139	10736-10737	-	
30-140	10737-10738	-	
30-141	10738-10739	-	
30-142	10739-10740	-	
30-143	10740-10741	-	
30-144	10741-10742	-	
30-145	10742-10743	-	
30-146	10743-10744	-	
30-147	10744-10745	-	
30-148	10745-10746	-	
30-149	10746-10747	-	
30-150	10747-10748	-	
30-151	10748-10749	-	
30-152	10749-10750	-	
30-153	10750-10751	-	
30-154	10751-10752	-	
30-155	10752-10753	-	
30-156	10753-10754	-	
30-157	10754-10755	-	
30-158	10755-10756	-	
30-159	10756-10757	-	
30-160	10757-10758	-	
30-161	10758-10759	-	
30-162	10759-10760	-	
30-163	10760-10761	-	
30-164	10761-10762	-	
30-165	10762-10763	-	
30-166	10763-10764	-	
30-167	10764-10765	-	
30-168	10765-10766	-	
30-169	10766-10767	-	
30-170	10767-10768	-	
30-171	10768-10769	-	
30-172	10769-10770	-	
30-173	10770-10771	-	
30-174	10771-10772	-	
30-175	10772-10773	-	
30-176	10773-10774	-	
30-177	10774-10775	-	
30-178	10775-10776	-	
30-179	10776-10777	-	
30-180	10777-10778	-	
30-181	10778-10779	-	
30-182	10779-10780	-	
30-183	10780-10781	-	
30-184	10781-10782	-	
30-185	10782-10783	-	
30-186	10783-10784	-	
30-187	10784-10785	-	
30-188	10785-10786	-	
30-189	10786-10787	-	
30-190	10787-10788	-	
30-191	10788-10789	-	
30-192	10789-10790	-	
30-193	10790-10791	-	
30-194	10791-10792	-	
30-195	10792-10793	-	
30-196	10793-10794	-	
30-197	10794-10795	-	
30-198	10795-10796	-	
30-199	10796-10797	-	
30-200	10797-10798	-	
30-201	10799-10800	-	
30-202	10800-10801	-	
30-203	10801-10802	-	
30-204	10802-10803	-	
30-205	10803-10804	-	
30-206	10804-10805	-	
30-207	10805-10806	-	
30-208	10806-10807	-	
30-209	10807-10808	-	
30-210	10808-10809	-	
30-211	10809-10810	-	
30-212	10810-10811	-	
30-213	10811-10812	-	
30-214	10812-10813	-	
30-215	10813-10814	-	
30-216	10814-10815	-	
30-217	10815-10816	-	
30-218	10816-10817	-	

#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", " criticrating": 4} ..... demo=# explain analyze select * from books where data ? 'braille'; QUERY PLAN
31-1	10818-10825	1000005	
31-2	10826-10827	|	
31-3	10828-10843	XEI7xShT8bPu6H7	
31-4	10844-10845	|	
31-5	10846-10856	2kD5XJDZUF	
31-6	10857-10858	|	
31-7	10859-10860	0	
31-8	10861-10862	|	
31-9	10863-10864	{	
31-10	10864-10865	"	
31-11	10865-10869	tags	
31-12	10869-10870	"	
31-13	10870-10871	:	
31-14	10872-10873	{	
31-15	10873-10874	"	
31-16	10874-10882	nk455671	
31-17	10882-10883	"	
31-18	10883-10884	:	
31-19	10885-10886	{	
31-20	10886-10887	"	
31-21	10887-10895	ik937456	
31-22	10895-10896	"	
31-23	10896-10897	:	
31-24	10898-10899	"	
31-25	10899-10907	iv506075	
31-26	10907-10908	"	
31-27	10908-10909	}	
31-28	10909-10910	}	
31-29	10910-10911	,	
31-30	10912-10913	"	
31-31	10913-10920	braille	
31-32	10920-10921	"	
31-33	10921-10922	:	
31-34	10923-10927	true	
31-35	10927-10928	,	
31-36	10929-10930	"	
31-37	10930-10938	keywords	
31-38	10938-10939	"	
31-39	10939-10940	:	
31-40	10941-10942	[	
31-41	10942-10943	"	
31-42	10943-10946	abc	
31-43	10946-10947	"	
31-44	10947-10948	,	
31-45	10949-10950	"	
31-46	10950-10953	kef	
31-47	10953-10954	"	
31-48	10954-10955	,	
31-49	10956-10957	"	
31-50	10957-10960	keh	
31-51	10960-10961	"	
31-52	10961-10962	]	
31-53	10962-10963	,	
31-54	10964-10965	"	
31-55	10965-10974	hardcover	
31-56	10974-10975	"	
31-57	10975-10976	:	
31-58	10977-10982	false	
31-59	10982-10983	,	
31-60	10984-10985	"	
31-61	10985-10994	publisher	
31-62	10994-10995	"	
31-63	10995-10996	:	
31-64	10997-10998	"	
31-65	10998-11008	zSfZIAjGGs	
31-66	11008-11009	"	
31-67	11009-11010	,	
31-68	11011-11012	"	
31-69	11013-11025	criticrating	
31-70	11025-11026	"	
31-71	11026-11027	:	
31-72	11028-11029	4	
31-73	11029-11030	}	
31-74	11031-11032	.	
31-75	11032-11033	.	
31-76	11033-11034	.	
31-77	11034-11035	.	
31-78	11035-11036	.	
31-79	11037-11041	demo	
31-80	11041-11042	=	
31-81	11042-11043	#	
31-82	11044-11051	explain	
31-83	11052-11059	analyze	
31-84	11060-11066	select	
31-85	11067-11068	*	
31-86	11069-11073	from	
31-87	11074-11079	books	
31-88	11080-11085	where	
31-89	11086-11090	data	
31-90	11091-11092	?	
31-91	11093-11094	'	
31-92	11094-11101	braille	
31-93	11101-11102	'	
31-94	11102-11103	;	
31-95	11104-11109	QUERY	
31-96	11110-11114	PLAN	

#Text=--------------------------------------------------------------------------------------------------------------------- Bitmap Heap Scan on books (cost=12.75..1005.25 rows=1000 width=158) (actual time=0.033..0.039 rows=15 loops=1) Recheck Cond: (data ? 'braille'::text)
32-1	11115-11116	-	
32-2	11116-11117	-	
32-3	11117-11118	-	
32-4	11118-11119	-	
32-5	11119-11120	-	
32-6	11120-11121	-	
32-7	11121-11122	-	
32-8	11122-11123	-	
32-9	11123-11124	-	
32-10	11124-11125	-	
32-11	11125-11126	-	
32-12	11126-11127	-	
32-13	11127-11128	-	
32-14	11128-11129	-	
32-15	11129-11130	-	
32-16	11130-11131	-	
32-17	11131-11132	-	
32-18	11132-11133	-	
32-19	11133-11134	-	
32-20	11134-11135	-	
32-21	11135-11136	-	
32-22	11136-11137	-	
32-23	11137-11138	-	
32-24	11138-11139	-	
32-25	11139-11140	-	
32-26	11140-11141	-	
32-27	11141-11142	-	
32-28	11142-11143	-	
32-29	11143-11144	-	
32-30	11144-11145	-	
32-31	11145-11146	-	
32-32	11146-11147	-	
32-33	11147-11148	-	
32-34	11148-11149	-	
32-35	11149-11150	-	
32-36	11150-11151	-	
32-37	11151-11152	-	
32-38	11152-11153	-	
32-39	11153-11154	-	
32-40	11154-11155	-	
32-41	11155-11156	-	
32-42	11156-11157	-	
32-43	11157-11158	-	
32-44	11158-11159	-	
32-45	11159-11160	-	
32-46	11160-11161	-	
32-47	11161-11162	-	
32-48	11162-11163	-	
32-49	11163-11164	-	
32-50	11164-11165	-	
32-51	11165-11166	-	
32-52	11166-11167	-	
32-53	11167-11168	-	
32-54	11168-11169	-	
32-55	11169-11170	-	
32-56	11170-11171	-	
32-57	11171-11172	-	
32-58	11172-11173	-	
32-59	11173-11174	-	
32-60	11174-11175	-	
32-61	11175-11176	-	
32-62	11176-11177	-	
32-63	11177-11178	-	
32-64	11178-11179	-	
32-65	11179-11180	-	
32-66	11180-11181	-	
32-67	11181-11182	-	
32-68	11182-11183	-	
32-69	11183-11184	-	
32-70	11184-11185	-	
32-71	11185-11186	-	
32-72	11186-11187	-	
32-73	11187-11188	-	
32-74	11188-11189	-	
32-75	11189-11190	-	
32-76	11190-11191	-	
32-77	11191-11192	-	
32-78	11192-11193	-	
32-79	11193-11194	-	
32-80	11194-11195	-	
32-81	11195-11196	-	
32-82	11196-11197	-	
32-83	11197-11198	-	
32-84	11198-11199	-	
32-85	11199-11200	-	
32-86	11200-11201	-	
32-87	11201-11202	-	
32-88	11202-11203	-	
32-89	11203-11204	-	
32-90	11204-11205	-	
32-91	11205-11206	-	
32-92	11206-11207	-	
32-93	11207-11208	-	
32-94	11208-11209	-	
32-95	11209-11210	-	
32-96	11210-11211	-	
32-97	11211-11212	-	
32-98	11212-11213	-	
32-99	11213-11214	-	
32-100	11214-11215	-	
32-101	11215-11216	-	
32-102	11216-11217	-	
32-103	11217-11218	-	
32-104	11218-11219	-	
32-105	11219-11220	-	
32-106	11220-11221	-	
32-107	11221-11222	-	
32-108	11222-11223	-	
32-109	11223-11224	-	
32-110	11224-11225	-	
32-111	11225-11226	-	
32-112	11226-11227	-	
32-113	11227-11228	-	
32-114	11228-11229	-	
32-115	11229-11230	-	
32-116	11230-11231	-	
32-117	11231-11232	-	
32-118	11233-11239	Bitmap	
32-119	11240-11244	Heap	
32-120	11245-11249	Scan	
32-121	11250-11252	on	
32-122	11253-11258	books	
32-123	11259-11260	(	
32-124	11260-11264	cost	
32-125	11264-11265	=	
32-126	11265-11270	12.75	
32-127	11270-11271	.	
32-128	11271-11279	.1005.25	
32-129	11280-11284	rows	
32-130	11284-11285	=	
32-131	11285-11289	1000	
32-132	11290-11295	width	
32-133	11295-11296	=	
32-134	11296-11299	158	
32-135	11299-11300	)	
32-136	11301-11302	(	
32-137	11302-11308	actual	
32-138	11309-11313	time	
32-139	11313-11314	=	
32-140	11314-11319	0.033	
32-141	11319-11320	.	
32-142	11320-11326	.0.039	
32-143	11327-11331	rows	
32-144	11331-11332	=	
32-145	11332-11334	15	
32-146	11335-11340	loops	
32-147	11340-11341	=	
32-148	11341-11342	1	
32-149	11342-11343	)	
32-150	11344-11351	Recheck	
32-151	11352-11356	Cond	
32-152	11356-11357	:	
32-153	11358-11359	(	
32-154	11359-11363	data	
32-155	11364-11365	?	
32-156	11366-11367	'	
32-157	11367-11374	braille	
32-158	11374-11375	'	
32-159	11375-11376	:	
32-160	11376-11377	:	
32-161	11377-11381	text	
32-162	11381-11382	)	

#Text=Heap Blocks: exact=2 -> Bitmap Index Scan on datagin (cost=0.00..12.50 rows=1000 width=0) (actual time=0.022..0.022 rows=15 loops=1) Index Cond: (data ? 'braille'::text)
33-1	11383-11387	Heap	
33-2	11388-11394	Blocks	
33-3	11394-11395	:	
33-4	11396-11401	exact	
33-5	11401-11402	=	
33-6	11402-11403	2	
33-7	11404-11405	-	
33-8	11405-11406	>	
33-9	11407-11413	Bitmap	
33-10	11414-11419	Index	
33-11	11420-11424	Scan	
33-12	11425-11427	on	
33-13	11428-11435	datagin	
33-14	11436-11437	(	
33-15	11437-11441	cost	
33-16	11441-11442	=	
33-17	11442-11446	0.00	
33-18	11446-11447	.	
33-19	11447-11453	.12.50	
33-20	11454-11458	rows	
33-21	11458-11459	=	
33-22	11459-11463	1000	
33-23	11464-11469	width	
33-24	11469-11470	=	
33-25	11470-11471	0	
33-26	11471-11472	)	
33-27	11473-11474	(	
33-28	11474-11480	actual	
33-29	11481-11485	time	
33-30	11485-11486	=	
33-31	11486-11491	0.022	
33-32	11491-11492	.	
33-33	11492-11498	.0.022	
33-34	11499-11503	rows	
33-35	11503-11504	=	
33-36	11504-11506	15	
33-37	11507-11512	loops	
33-38	11512-11513	=	
33-39	11513-11514	1	
33-40	11514-11515	)	
33-41	11516-11521	Index	
33-42	11522-11526	Cond	
33-43	11526-11527	:	
33-44	11528-11529	(	
33-45	11529-11533	data	
33-46	11534-11535	?	
33-47	11536-11537	'	
33-48	11537-11544	braille	
33-49	11544-11545	'	
33-50	11545-11546	:	
33-51	11546-11547	:	
33-52	11547-11551	text	
33-53	11551-11552	)	

#Text=Planning Time: 0.102 ms Execution Time: 0.067 ms (7 rows) As you can see from the explain output, the GIN index that we created is being used for the search. What if we wanted to find books that were in braille or in hardcover?
34-1	11553-11561	Planning	
34-2	11562-11566	Time	
34-3	11566-11567	:	
34-4	11568-11573	0.102	
34-5	11574-11576	ms	
34-6	11577-11586	Execution	
34-7	11587-11591	Time	
34-8	11591-11592	:	
34-9	11593-11598	0.067	
34-10	11599-11601	ms	
34-11	11602-11603	(	
34-12	11603-11604	7	
34-13	11605-11609	rows	
34-14	11609-11610	)	
34-15	11611-11613	As	
34-16	11614-11617	you	
34-17	11618-11621	can	
34-18	11622-11625	see	
34-19	11626-11630	from	
34-20	11631-11634	the	
34-21	11635-11642	explain	
34-22	11643-11649	output	
34-23	11649-11650	,	
34-24	11651-11654	the	
34-25	11655-11658	GIN	
34-26	11659-11664	index	
34-27	11665-11669	that	
34-28	11670-11672	we	
34-29	11673-11680	created	
34-30	11681-11683	is	
34-31	11684-11689	being	
34-32	11690-11694	used	
34-33	11695-11698	for	
34-34	11699-11702	the	
34-35	11703-11709	search	
34-36	11709-11710	.	
34-37	11711-11715	What	
34-38	11716-11718	if	
34-39	11719-11721	we	
34-40	11722-11728	wanted	
34-41	11729-11731	to	
34-42	11732-11736	find	
34-43	11737-11742	books	
34-44	11743-11747	that	
34-45	11748-11752	were	
34-46	11753-11755	in	
34-47	11756-11763	braille	
34-48	11764-11766	or	
34-49	11767-11769	in	
34-50	11770-11779	hardcover	
34-51	11779-11780	?	

#Text=demo=# explain analyze select * from books where data ?| array['braille','hardcover']; QUERY PLAN
35-1	11781-11785	demo	
35-2	11785-11786	=	
35-3	11786-11787	#	
35-4	11788-11795	explain	
35-5	11796-11803	analyze	
35-6	11804-11810	select	
35-7	11811-11812	*	
35-8	11813-11817	from	
35-9	11818-11823	books	
35-10	11824-11829	where	
35-11	11830-11834	data	
35-12	11835-11836	?	
35-13	11836-11837	|	
35-14	11838-11843	array	
35-15	11843-11844	[	
35-16	11844-11845	'	
35-17	11845-11852	braille	
35-18	11852-11853	'	
35-19	11853-11854	,	
35-20	11854-11855	'	
35-21	11855-11864	hardcover	
35-22	11864-11865	'	
35-23	11865-11866	]	
35-24	11866-11867	;	
35-25	11868-11873	QUERY	
35-26	11874-11878	PLAN	

#Text=--------------------------------------------------------------------------------------------------------------------- Bitmap Heap Scan on books (cost=16.75..1009.25 rows=1000 width=158) (actual time=0.029..0.035 rows=15 loops=1) Recheck Cond: (data ?| '{braille,hardcover}'::text[])
36-1	11879-11880	-	
36-2	11880-11881	-	
36-3	11881-11882	-	
36-4	11882-11883	-	
36-5	11883-11884	-	
36-6	11884-11885	-	
36-7	11885-11886	-	
36-8	11886-11887	-	
36-9	11887-11888	-	
36-10	11888-11889	-	
36-11	11889-11890	-	
36-12	11890-11891	-	
36-13	11891-11892	-	
36-14	11892-11893	-	
36-15	11893-11894	-	
36-16	11894-11895	-	
36-17	11895-11896	-	
36-18	11896-11897	-	
36-19	11897-11898	-	
36-20	11898-11899	-	
36-21	11899-11900	-	
36-22	11900-11901	-	
36-23	11901-11902	-	
36-24	11902-11903	-	
36-25	11903-11904	-	
36-26	11904-11905	-	
36-27	11905-11906	-	
36-28	11906-11907	-	
36-29	11907-11908	-	
36-30	11908-11909	-	
36-31	11909-11910	-	
36-32	11910-11911	-	
36-33	11911-11912	-	
36-34	11912-11913	-	
36-35	11913-11914	-	
36-36	11914-11915	-	
36-37	11915-11916	-	
36-38	11916-11917	-	
36-39	11917-11918	-	
36-40	11918-11919	-	
36-41	11919-11920	-	
36-42	11920-11921	-	
36-43	11921-11922	-	
36-44	11922-11923	-	
36-45	11923-11924	-	
36-46	11924-11925	-	
36-47	11925-11926	-	
36-48	11926-11927	-	
36-49	11927-11928	-	
36-50	11928-11929	-	
36-51	11929-11930	-	
36-52	11930-11931	-	
36-53	11931-11932	-	
36-54	11932-11933	-	
36-55	11933-11934	-	
36-56	11934-11935	-	
36-57	11935-11936	-	
36-58	11936-11937	-	
36-59	11937-11938	-	
36-60	11938-11939	-	
36-61	11939-11940	-	
36-62	11940-11941	-	
36-63	11941-11942	-	
36-64	11942-11943	-	
36-65	11943-11944	-	
36-66	11944-11945	-	
36-67	11945-11946	-	
36-68	11946-11947	-	
36-69	11947-11948	-	
36-70	11948-11949	-	
36-71	11949-11950	-	
36-72	11950-11951	-	
36-73	11951-11952	-	
36-74	11952-11953	-	
36-75	11953-11954	-	
36-76	11954-11955	-	
36-77	11955-11956	-	
36-78	11956-11957	-	
36-79	11957-11958	-	
36-80	11958-11959	-	
36-81	11959-11960	-	
36-82	11960-11961	-	
36-83	11961-11962	-	
36-84	11962-11963	-	
36-85	11963-11964	-	
36-86	11964-11965	-	
36-87	11965-11966	-	
36-88	11966-11967	-	
36-89	11967-11968	-	
36-90	11968-11969	-	
36-91	11969-11970	-	
36-92	11970-11971	-	
36-93	11971-11972	-	
36-94	11972-11973	-	
36-95	11973-11974	-	
36-96	11974-11975	-	
36-97	11975-11976	-	
36-98	11976-11977	-	
36-99	11977-11978	-	
36-100	11978-11979	-	
36-101	11979-11980	-	
36-102	11980-11981	-	
36-103	11981-11982	-	
36-104	11982-11983	-	
36-105	11983-11984	-	
36-106	11984-11985	-	
36-107	11985-11986	-	
36-108	11986-11987	-	
36-109	11987-11988	-	
36-110	11988-11989	-	
36-111	11989-11990	-	
36-112	11990-11991	-	
36-113	11991-11992	-	
36-114	11992-11993	-	
36-115	11993-11994	-	
36-116	11994-11995	-	
36-117	11995-11996	-	
36-118	11997-12003	Bitmap	
36-119	12004-12008	Heap	
36-120	12009-12013	Scan	
36-121	12014-12016	on	
36-122	12017-12022	books	
36-123	12023-12024	(	
36-124	12024-12028	cost	
36-125	12028-12029	=	
36-126	12029-12034	16.75	
36-127	12034-12035	.	
36-128	12035-12043	.1009.25	
36-129	12044-12048	rows	
36-130	12048-12049	=	
36-131	12049-12053	1000	
36-132	12054-12059	width	
36-133	12059-12060	=	
36-134	12060-12063	158	
36-135	12063-12064	)	
36-136	12065-12066	(	
36-137	12066-12072	actual	
36-138	12073-12077	time	
36-139	12077-12078	=	
36-140	12078-12083	0.029	
36-141	12083-12084	.	
36-142	12084-12090	.0.035	
36-143	12091-12095	rows	
36-144	12095-12096	=	
36-145	12096-12098	15	
36-146	12099-12104	loops	
36-147	12104-12105	=	
36-148	12105-12106	1	
36-149	12106-12107	)	
36-150	12108-12115	Recheck	
36-151	12116-12120	Cond	
36-152	12120-12121	:	
36-153	12122-12123	(	
36-154	12123-12127	data	
36-155	12128-12129	?	
36-156	12129-12130	|	
36-157	12131-12132	'	
36-158	12132-12133	{	
36-159	12133-12140	braille	
36-160	12140-12141	,	
36-161	12141-12150	hardcover	
36-162	12150-12151	}	
36-163	12151-12152	'	
36-164	12152-12153	:	
36-165	12153-12154	:	
36-166	12154-12158	text	
36-167	12158-12159	[	
36-168	12159-12160	]	
36-169	12160-12161	)	

#Text=Heap Blocks: exact=2 -> Bitmap Index Scan on datagin (cost=0.00..16.50 rows=1000 width=0) (actual time=0.023..0.023 rows=15 loops=1) Index Cond: (data ?| '{braille,hardcover}'::text[])
37-1	12162-12166	Heap	
37-2	12167-12173	Blocks	
37-3	12173-12174	:	
37-4	12175-12180	exact	
37-5	12180-12181	=	
37-6	12181-12182	2	
37-7	12183-12184	-	
37-8	12184-12185	>	
37-9	12186-12192	Bitmap	
37-10	12193-12198	Index	
37-11	12199-12203	Scan	
37-12	12204-12206	on	
37-13	12207-12214	datagin	
37-14	12215-12216	(	
37-15	12216-12220	cost	
37-16	12220-12221	=	
37-17	12221-12225	0.00	
37-18	12225-12226	.	
37-19	12226-12232	.16.50	
37-20	12233-12237	rows	
37-21	12237-12238	=	
37-22	12238-12242	1000	
37-23	12243-12248	width	
37-24	12248-12249	=	
37-25	12249-12250	0	
37-26	12250-12251	)	
37-27	12252-12253	(	
37-28	12253-12259	actual	
37-29	12260-12264	time	
37-30	12264-12265	=	
37-31	12265-12270	0.023	
37-32	12270-12271	.	
37-33	12271-12277	.0.023	
37-34	12278-12282	rows	
37-35	12282-12283	=	
37-36	12283-12285	15	
37-37	12286-12291	loops	
37-38	12291-12292	=	
37-39	12292-12293	1	
37-40	12293-12294	)	
37-41	12295-12300	Index	
37-42	12301-12305	Cond	
37-43	12305-12306	:	
37-44	12307-12308	(	
37-45	12308-12312	data	
37-46	12313-12314	?	
37-47	12314-12315	|	
37-48	12316-12317	'	
37-49	12317-12318	{	
37-50	12318-12325	braille	
37-51	12325-12326	,	
37-52	12326-12335	hardcover	
37-53	12335-12336	}	
37-54	12336-12337	'	
37-55	12337-12338	:	
37-56	12338-12339	:	
37-57	12339-12343	text	
37-58	12343-12344	[	
37-59	12344-12345	]	
37-60	12345-12346	)	

#Text=Planning Time: 0.138 ms Execution Time: 0.057 ms (7 rows) The GIN index supports the “existence” operators only on “top-level” keys. If the key is not at the top level, then the index will not be used. It will result in a sequential scan:
38-1	12347-12355	Planning	
38-2	12356-12360	Time	
38-3	12360-12361	:	
38-4	12362-12367	0.138	
38-5	12368-12370	ms	
38-6	12371-12380	Execution	
38-7	12381-12385	Time	
38-8	12385-12386	:	
38-9	12387-12392	0.057	
38-10	12393-12395	ms	
38-11	12396-12397	(	
38-12	12397-12398	7	
38-13	12399-12403	rows	
38-14	12403-12404	)	
38-15	12405-12408	The	
38-16	12409-12412	GIN	
38-17	12413-12418	index	
38-18	12419-12427	supports	
38-19	12428-12431	the	
38-20	12432-12433	“	
38-21	12433-12442	existence	
38-22	12442-12443	”	
38-23	12444-12453	operators	
38-24	12454-12458	only	
38-25	12459-12461	on	
38-26	12462-12463	“	
38-27	12463-12472	top-level	
38-28	12472-12473	”	
38-29	12474-12478	keys	
38-30	12478-12479	.	
38-31	12480-12482	If	
38-32	12483-12486	the	
38-33	12487-12490	key	
38-34	12491-12493	is	
38-35	12494-12497	not	
38-36	12498-12500	at	
38-37	12501-12504	the	
38-38	12505-12508	top	
38-39	12509-12514	level	
38-40	12514-12515	,	
38-41	12516-12520	then	
38-42	12521-12524	the	
38-43	12525-12530	index	
38-44	12531-12535	will	
38-45	12536-12539	not	
38-46	12540-12542	be	
38-47	12543-12547	used	
38-48	12547-12548	.	
38-49	12549-12551	It	
38-50	12552-12556	will	
38-51	12557-12563	result	
38-52	12564-12566	in	
38-53	12567-12568	a	
38-54	12569-12579	sequential	
38-55	12580-12584	scan	
38-56	12584-12585	:	

#Text=demo=# select * from books where data->'tags' ? 'nk455671'; id | author | isbn | rating | data
39-1	12586-12590	demo	
39-2	12590-12591	=	
39-3	12591-12592	#	
39-4	12593-12599	select	
39-5	12600-12601	*	
39-6	12602-12606	from	
39-7	12607-12612	books	
39-8	12613-12618	where	
39-9	12619-12623	data	
39-10	12623-12624	-	
39-11	12624-12625	>	
39-12	12625-12626	'	
39-13	12626-12630	tags	
39-14	12630-12631	'	
39-15	12632-12633	?	
39-16	12634-12635	'	
39-17	12635-12643	nk455671	
39-18	12643-12644	'	
39-19	12644-12645	;	
39-20	12646-12648	id	
39-21	12649-12650	|	
39-22	12651-12657	author	
39-23	12658-12659	|	
39-24	12660-12664	isbn	
39-25	12665-12666	|	
39-26	12667-12673	rating	
39-27	12674-12675	|	
39-28	12676-12680	data	

#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------ ------------------
40-1	12681-12682	-	
40-2	12682-12683	-	
40-3	12683-12684	-	
40-4	12684-12685	-	
40-5	12685-12686	-	
40-6	12686-12687	-	
40-7	12687-12688	-	
40-8	12688-12689	-	
40-9	12689-12690	-	
40-10	12690-12691	+	
40-11	12691-12692	-	
40-12	12692-12693	-	
40-13	12693-12694	-	
40-14	12694-12695	-	
40-15	12695-12696	-	
40-16	12696-12697	-	
40-17	12697-12698	-	
40-18	12698-12699	-	
40-19	12699-12700	-	
40-20	12700-12701	-	
40-21	12701-12702	-	
40-22	12702-12703	-	
40-23	12703-12704	-	
40-24	12704-12705	-	
40-25	12705-12706	-	
40-26	12706-12707	-	
40-27	12707-12708	-	
40-28	12708-12709	+	
40-29	12709-12710	-	
40-30	12710-12711	-	
40-31	12711-12712	-	
40-32	12712-12713	-	
40-33	12713-12714	-	
40-34	12714-12715	-	
40-35	12715-12716	-	
40-36	12716-12717	-	
40-37	12717-12718	-	
40-38	12718-12719	-	
40-39	12719-12720	-	
40-40	12720-12721	-	
40-41	12721-12722	+	
40-42	12722-12723	-	
40-43	12723-12724	-	
40-44	12724-12725	-	
40-45	12725-12726	-	
40-46	12726-12727	-	
40-47	12727-12728	-	
40-48	12728-12729	-	
40-49	12729-12730	-	
40-50	12730-12731	+	
40-51	12731-12732	-	
40-52	12732-12733	-	
40-53	12733-12734	-	
40-54	12734-12735	-	
40-55	12735-12736	-	
40-56	12736-12737	-	
40-57	12737-12738	-	
40-58	12738-12739	-	
40-59	12739-12740	-	
40-60	12740-12741	-	
40-61	12741-12742	-	
40-62	12742-12743	-	
40-63	12743-12744	-	
40-64	12744-12745	-	
40-65	12745-12746	-	
40-66	12746-12747	-	
40-67	12747-12748	-	
40-68	12748-12749	-	
40-69	12749-12750	-	
40-70	12750-12751	-	
40-71	12751-12752	-	
40-72	12752-12753	-	
40-73	12753-12754	-	
40-74	12754-12755	-	
40-75	12755-12756	-	
40-76	12756-12757	-	
40-77	12757-12758	-	
40-78	12758-12759	-	
40-79	12759-12760	-	
40-80	12760-12761	-	
40-81	12761-12762	-	
40-82	12762-12763	-	
40-83	12763-12764	-	
40-84	12764-12765	-	
40-85	12765-12766	-	
40-86	12766-12767	-	
40-87	12767-12768	-	
40-88	12768-12769	-	
40-89	12769-12770	-	
40-90	12770-12771	-	
40-91	12771-12772	-	
40-92	12772-12773	-	
40-93	12773-12774	-	
40-94	12774-12775	-	
40-95	12775-12776	-	
40-96	12776-12777	-	
40-97	12777-12778	-	
40-98	12778-12779	-	
40-99	12779-12780	-	
40-100	12780-12781	-	
40-101	12781-12782	-	
40-102	12782-12783	-	
40-103	12783-12784	-	
40-104	12784-12785	-	
40-105	12785-12786	-	
40-106	12786-12787	-	
40-107	12787-12788	-	
40-108	12788-12789	-	
40-109	12789-12790	-	
40-110	12790-12791	-	
40-111	12791-12792	-	
40-112	12792-12793	-	
40-113	12793-12794	-	
40-114	12794-12795	-	
40-115	12795-12796	-	
40-116	12796-12797	-	
40-117	12797-12798	-	
40-118	12798-12799	-	
40-119	12799-12800	-	
40-120	12800-12801	-	
40-121	12801-12802	-	
40-122	12802-12803	-	
40-123	12803-12804	-	
40-124	12804-12805	-	
40-125	12805-12806	-	
40-126	12806-12807	-	
40-127	12807-12808	-	
40-128	12808-12809	-	
40-129	12809-12810	-	
40-130	12810-12811	-	
40-131	12811-12812	-	
40-132	12812-12813	-	
40-133	12813-12814	-	
40-134	12814-12815	-	
40-135	12815-12816	-	
40-136	12816-12817	-	
40-137	12817-12818	-	
40-138	12818-12819	-	
40-139	12819-12820	-	
40-140	12820-12821	-	
40-141	12821-12822	-	
40-142	12822-12823	-	
40-143	12823-12824	-	
40-144	12824-12825	-	
40-145	12825-12826	-	
40-146	12826-12827	-	
40-147	12827-12828	-	
40-148	12828-12829	-	
40-149	12829-12830	-	
40-150	12830-12831	-	
40-151	12831-12832	-	
40-152	12832-12833	-	
40-153	12833-12834	-	
40-154	12834-12835	-	
40-155	12835-12836	-	
40-156	12836-12837	-	
40-157	12837-12838	-	
40-158	12838-12839	-	
40-159	12839-12840	-	
40-160	12840-12841	-	
40-161	12841-12842	-	
40-162	12842-12843	-	
40-163	12843-12844	-	
40-164	12844-12845	-	
40-165	12845-12846	-	
40-166	12846-12847	-	
40-167	12847-12848	-	
40-168	12848-12849	-	
40-169	12849-12850	-	
40-170	12850-12851	-	
40-171	12851-12852	-	
40-172	12852-12853	-	
40-173	12853-12854	-	
40-174	12854-12855	-	
40-175	12855-12856	-	
40-176	12856-12857	-	
40-177	12857-12858	-	
40-178	12858-12859	-	
40-179	12859-12860	-	
40-180	12860-12861	-	
40-181	12861-12862	-	
40-182	12862-12863	-	
40-183	12863-12864	-	
40-184	12864-12865	-	
40-185	12865-12866	-	
40-186	12866-12867	-	
40-187	12867-12868	-	
40-188	12868-12869	-	
40-189	12869-12870	-	
40-190	12870-12871	-	
40-191	12871-12872	-	
40-192	12872-12873	-	
40-193	12873-12874	-	
40-194	12874-12875	-	
40-195	12875-12876	-	
40-196	12876-12877	-	
40-197	12877-12878	-	
40-198	12878-12879	-	
40-199	12879-12880	-	
40-200	12880-12881	-	
40-201	12882-12883	-	
40-202	12883-12884	-	
40-203	12884-12885	-	
40-204	12885-12886	-	
40-205	12886-12887	-	
40-206	12887-12888	-	
40-207	12888-12889	-	
40-208	12889-12890	-	
40-209	12890-12891	-	
40-210	12891-12892	-	
40-211	12892-12893	-	
40-212	12893-12894	-	
40-213	12894-12895	-	
40-214	12895-12896	-	
40-215	12896-12897	-	
40-216	12897-12898	-	
40-217	12898-12899	-	
40-218	12899-12900	-	

#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", " criticrating": 4} 685122 | GWfuvKfQ1PCe1IL | jnyhYYcF66 | 3 | {"tags": {"nk455671": {"ik615925": "iv253423"}}, "publisher": "b2NwVg7VY3", "criticrating": 0}
41-1	12901-12908	1000005	
41-2	12909-12910	|	
41-3	12911-12926	XEI7xShT8bPu6H7	
41-4	12927-12928	|	
41-5	12929-12939	2kD5XJDZUF	
41-6	12940-12941	|	
41-7	12942-12943	0	
41-8	12944-12945	|	
41-9	12946-12947	{	
41-10	12947-12948	"	
41-11	12948-12952	tags	
41-12	12952-12953	"	
41-13	12953-12954	:	
41-14	12955-12956	{	
41-15	12956-12957	"	
41-16	12957-12965	nk455671	
41-17	12965-12966	"	
41-18	12966-12967	:	
41-19	12968-12969	{	
41-20	12969-12970	"	
41-21	12970-12978	ik937456	
41-22	12978-12979	"	
41-23	12979-12980	:	
41-24	12981-12982	"	
41-25	12982-12990	iv506075	
41-26	12990-12991	"	
41-27	12991-12992	}	
41-28	12992-12993	}	
41-29	12993-12994	,	
41-30	12995-12996	"	
41-31	12996-13003	braille	
41-32	13003-13004	"	
41-33	13004-13005	:	
41-34	13006-13010	true	
41-35	13010-13011	,	
41-36	13012-13013	"	
41-37	13013-13021	keywords	
41-38	13021-13022	"	
41-39	13022-13023	:	
41-40	13024-13025	[	
41-41	13025-13026	"	
41-42	13026-13029	abc	
41-43	13029-13030	"	
41-44	13030-13031	,	
41-45	13032-13033	"	
41-46	13033-13036	kef	
41-47	13036-13037	"	
41-48	13037-13038	,	
41-49	13039-13040	"	
41-50	13040-13043	keh	
41-51	13043-13044	"	
41-52	13044-13045	]	
41-53	13045-13046	,	
41-54	13047-13048	"	
41-55	13048-13057	hardcover	
41-56	13057-13058	"	
41-57	13058-13059	:	
41-58	13060-13065	false	
41-59	13065-13066	,	
41-60	13067-13068	"	
41-61	13068-13077	publisher	
41-62	13077-13078	"	
41-63	13078-13079	:	
41-64	13080-13081	"	
41-65	13081-13091	zSfZIAjGGs	
41-66	13091-13092	"	
41-67	13092-13093	,	
41-68	13094-13095	"	
41-69	13096-13108	criticrating	
41-70	13108-13109	"	
41-71	13109-13110	:	
41-72	13111-13112	4	
41-73	13112-13113	}	
41-74	13114-13120	685122	
41-75	13121-13122	|	
41-76	13123-13138	GWfuvKfQ1PCe1IL	
41-77	13139-13140	|	
41-78	13141-13151	jnyhYYcF66	
41-79	13152-13153	|	
41-80	13154-13155	3	
41-81	13156-13157	|	
41-82	13158-13159	{	
41-83	13159-13160	"	
41-84	13160-13164	tags	
41-85	13164-13165	"	
41-86	13165-13166	:	
41-87	13167-13168	{	
41-88	13168-13169	"	
41-89	13169-13177	nk455671	
41-90	13177-13178	"	
41-91	13178-13179	:	
41-92	13180-13181	{	
41-93	13181-13182	"	
41-94	13182-13190	ik615925	
41-95	13190-13191	"	
41-96	13191-13192	:	
41-97	13193-13194	"	
41-98	13194-13202	iv253423	
41-99	13202-13203	"	
41-100	13203-13204	}	
41-101	13204-13205	}	
41-102	13205-13206	,	
41-103	13207-13208	"	
41-104	13208-13217	publisher	
41-105	13217-13218	"	
41-106	13218-13219	:	
41-107	13220-13221	"	
41-108	13221-13231	b2NwVg7VY3	
41-109	13231-13232	"	
41-110	13232-13233	,	
41-111	13234-13235	"	
41-112	13235-13247	criticrating	
41-113	13247-13248	"	
41-114	13248-13249	:	
41-115	13250-13251	0	
41-116	13251-13252	}	

#Text=(2 rows) demo=# explain analyze select * from books where data->'tags' ? 'nk455671'; QUERY PLAN
42-1	13253-13254	(	
42-2	13254-13255	2	
42-3	13256-13260	rows	
42-4	13260-13261	)	
42-5	13262-13266	demo	
42-6	13266-13267	=	
42-7	13267-13268	#	
42-8	13269-13276	explain	
42-9	13277-13284	analyze	
42-10	13285-13291	select	
42-11	13292-13293	*	
42-12	13294-13298	from	
42-13	13299-13304	books	
42-14	13305-13310	where	
42-15	13311-13315	data	
42-16	13315-13316	-	
42-17	13316-13317	>	
42-18	13317-13318	'	
42-19	13318-13322	tags	
42-20	13322-13323	'	
42-21	13324-13325	?	
42-22	13326-13327	'	
42-23	13327-13335	nk455671	
42-24	13335-13336	'	
42-25	13336-13337	;	
42-26	13338-13343	QUERY	
42-27	13344-13348	PLAN	

#Text=---------------------------------------------------------------------------------------------------------- Seq Scan on books (cost=0.00..38807.29 rows=1000 width=158) (actual time=0.018..270.641 rows=2 loops=1)
43-1	13349-13350	-	
43-2	13350-13351	-	
43-3	13351-13352	-	
43-4	13352-13353	-	
43-5	13353-13354	-	
43-6	13354-13355	-	
43-7	13355-13356	-	
43-8	13356-13357	-	
43-9	13357-13358	-	
43-10	13358-13359	-	
43-11	13359-13360	-	
43-12	13360-13361	-	
43-13	13361-13362	-	
43-14	13362-13363	-	
43-15	13363-13364	-	
43-16	13364-13365	-	
43-17	13365-13366	-	
43-18	13366-13367	-	
43-19	13367-13368	-	
43-20	13368-13369	-	
43-21	13369-13370	-	
43-22	13370-13371	-	
43-23	13371-13372	-	
43-24	13372-13373	-	
43-25	13373-13374	-	
43-26	13374-13375	-	
43-27	13375-13376	-	
43-28	13376-13377	-	
43-29	13377-13378	-	
43-30	13378-13379	-	
43-31	13379-13380	-	
43-32	13380-13381	-	
43-33	13381-13382	-	
43-34	13382-13383	-	
43-35	13383-13384	-	
43-36	13384-13385	-	
43-37	13385-13386	-	
43-38	13386-13387	-	
43-39	13387-13388	-	
43-40	13388-13389	-	
43-41	13389-13390	-	
43-42	13390-13391	-	
43-43	13391-13392	-	
43-44	13392-13393	-	
43-45	13393-13394	-	
43-46	13394-13395	-	
43-47	13395-13396	-	
43-48	13396-13397	-	
43-49	13397-13398	-	
43-50	13398-13399	-	
43-51	13399-13400	-	
43-52	13400-13401	-	
43-53	13401-13402	-	
43-54	13402-13403	-	
43-55	13403-13404	-	
43-56	13404-13405	-	
43-57	13405-13406	-	
43-58	13406-13407	-	
43-59	13407-13408	-	
43-60	13408-13409	-	
43-61	13409-13410	-	
43-62	13410-13411	-	
43-63	13411-13412	-	
43-64	13412-13413	-	
43-65	13413-13414	-	
43-66	13414-13415	-	
43-67	13415-13416	-	
43-68	13416-13417	-	
43-69	13417-13418	-	
43-70	13418-13419	-	
43-71	13419-13420	-	
43-72	13420-13421	-	
43-73	13421-13422	-	
43-74	13422-13423	-	
43-75	13423-13424	-	
43-76	13424-13425	-	
43-77	13425-13426	-	
43-78	13426-13427	-	
43-79	13427-13428	-	
43-80	13428-13429	-	
43-81	13429-13430	-	
43-82	13430-13431	-	
43-83	13431-13432	-	
43-84	13432-13433	-	
43-85	13433-13434	-	
43-86	13434-13435	-	
43-87	13435-13436	-	
43-88	13436-13437	-	
43-89	13437-13438	-	
43-90	13438-13439	-	
43-91	13439-13440	-	
43-92	13440-13441	-	
43-93	13441-13442	-	
43-94	13442-13443	-	
43-95	13443-13444	-	
43-96	13444-13445	-	
43-97	13445-13446	-	
43-98	13446-13447	-	
43-99	13447-13448	-	
43-100	13448-13449	-	
43-101	13449-13450	-	
43-102	13450-13451	-	
43-103	13451-13452	-	
43-104	13452-13453	-	
43-105	13453-13454	-	
43-106	13454-13455	-	
43-107	13456-13459	Seq	
43-108	13460-13464	Scan	
43-109	13465-13467	on	
43-110	13468-13473	books	
43-111	13474-13475	(	
43-112	13475-13479	cost	
43-113	13479-13480	=	
43-114	13480-13484	0.00	
43-115	13484-13485	.	
43-116	13485-13494	.38807.29	
43-117	13495-13499	rows	
43-118	13499-13500	=	
43-119	13500-13504	1000	
43-120	13505-13510	width	
43-121	13510-13511	=	
43-122	13511-13514	158	
43-123	13514-13515	)	
43-124	13516-13517	(	
43-125	13517-13523	actual	
43-126	13524-13528	time	
43-127	13528-13529	=	
43-128	13529-13534	0.018	
43-129	13534-13535	.	
43-130	13535-13543	.270.641	
43-131	13544-13548	rows	
43-132	13548-13549	=	
43-133	13549-13550	2	
43-134	13551-13556	loops	
43-135	13556-13557	=	
43-136	13557-13558	1	
43-137	13558-13559	)	

#Text=Filter: ((data -> 'tags'::text) ? 'nk455671'::text) Rows Removed by Filter: 1000017 Planning Time: 0.078 ms Execution Time: 270.728 ms (5 rows) The way to check for existence in nested docs is to use “expression indexes”. Let’s create an index on data->tags:
44-1	13560-13566	Filter	
44-2	13566-13567	:	
44-3	13568-13569	(	
44-4	13569-13570	(	
44-5	13570-13574	data	
44-6	13575-13576	-	
44-7	13576-13577	>	
44-8	13578-13579	'	
44-9	13579-13583	tags	
44-10	13583-13584	'	
44-11	13584-13585	:	
44-12	13585-13586	:	
44-13	13586-13590	text	
44-14	13590-13591	)	
44-15	13592-13593	?	
44-16	13594-13595	'	
44-17	13595-13603	nk455671	
44-18	13603-13604	'	
44-19	13604-13605	:	
44-20	13605-13606	:	
44-21	13606-13610	text	
44-22	13610-13611	)	
44-23	13612-13616	Rows	
44-24	13617-13624	Removed	
44-25	13625-13627	by	
44-26	13628-13634	Filter	
44-27	13634-13635	:	
44-28	13636-13643	1000017	
44-29	13644-13652	Planning	
44-30	13653-13657	Time	
44-31	13657-13658	:	
44-32	13659-13664	0.078	
44-33	13665-13667	ms	
44-34	13668-13677	Execution	
44-35	13678-13682	Time	
44-36	13682-13683	:	
44-37	13684-13691	270.728	
44-38	13692-13694	ms	
44-39	13695-13696	(	
44-40	13696-13697	5	
44-41	13698-13702	rows	
44-42	13702-13703	)	
44-43	13704-13707	The	
44-44	13708-13711	way	
44-45	13712-13714	to	
44-46	13715-13720	check	
44-47	13721-13724	for	
44-48	13725-13734	existence	
44-49	13735-13737	in	
44-50	13738-13744	nested	
44-51	13745-13749	docs	
44-52	13750-13752	is	
44-53	13753-13755	to	
44-54	13756-13759	use	
44-55	13760-13761	“	
44-56	13761-13771	expression	
44-57	13772-13779	indexes	
44-58	13779-13780	”	
44-59	13780-13781	.	
44-60	13782-13785	Let	
44-61	13785-13786	’	
44-62	13786-13787	s	
44-63	13788-13794	create	
44-64	13795-13797	an	
44-65	13798-13803	index	
44-66	13804-13806	on	
44-67	13807-13811	data	
44-68	13811-13812	-	
44-69	13812-13813	>	
44-70	13813-13817	tags	
44-71	13817-13818	:	

#Text=CREATE INDEX datatagsgin ON books USING gin (data->'tags'); demo=# select * from books where data->'tags' ? 'nk455671'; id | author | isbn | rating | data
45-1	13819-13825	CREATE	
45-2	13826-13831	INDEX	
45-3	13832-13843	datatagsgin	
45-4	13844-13846	ON	
45-5	13847-13852	books	
45-6	13853-13858	USING	
45-7	13859-13862	gin	
45-8	13863-13864	(	
45-9	13864-13868	data	
45-10	13868-13869	-	
45-11	13869-13870	>	
45-12	13870-13871	'	
45-13	13871-13875	tags	
45-14	13875-13876	'	
45-15	13876-13877	)	
45-16	13877-13878	;	
45-17	13879-13883	demo	
45-18	13883-13884	=	
45-19	13884-13885	#	
45-20	13886-13892	select	
45-21	13893-13894	*	
45-22	13895-13899	from	
45-23	13900-13905	books	
45-24	13906-13911	where	
45-25	13912-13916	data	
45-26	13916-13917	-	
45-27	13917-13918	>	
45-28	13918-13919	'	
45-29	13919-13923	tags	
45-30	13923-13924	'	
45-31	13925-13926	?	
45-32	13927-13928	'	
45-33	13928-13936	nk455671	
45-34	13936-13937	'	
45-35	13937-13938	;	
45-36	13939-13941	id	
45-37	13942-13943	|	
45-38	13944-13950	author	
45-39	13951-13952	|	
45-40	13953-13957	isbn	
45-41	13958-13959	|	
45-42	13960-13966	rating	
45-43	13967-13968	|	
45-44	13969-13973	data	

#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------ ------------------
46-1	13974-13975	-	
46-2	13975-13976	-	
46-3	13976-13977	-	
46-4	13977-13978	-	
46-5	13978-13979	-	
46-6	13979-13980	-	
46-7	13980-13981	-	
46-8	13981-13982	-	
46-9	13982-13983	-	
46-10	13983-13984	+	
46-11	13984-13985	-	
46-12	13985-13986	-	
46-13	13986-13987	-	
46-14	13987-13988	-	
46-15	13988-13989	-	
46-16	13989-13990	-	
46-17	13990-13991	-	
46-18	13991-13992	-	
46-19	13992-13993	-	
46-20	13993-13994	-	
46-21	13994-13995	-	
46-22	13995-13996	-	
46-23	13996-13997	-	
46-24	13997-13998	-	
46-25	13998-13999	-	
46-26	13999-14000	-	
46-27	14000-14001	-	
46-28	14001-14002	+	
46-29	14002-14003	-	
46-30	14003-14004	-	
46-31	14004-14005	-	
46-32	14005-14006	-	
46-33	14006-14007	-	
46-34	14007-14008	-	
46-35	14008-14009	-	
46-36	14009-14010	-	
46-37	14010-14011	-	
46-38	14011-14012	-	
46-39	14012-14013	-	
46-40	14013-14014	-	
46-41	14014-14015	+	
46-42	14015-14016	-	
46-43	14016-14017	-	
46-44	14017-14018	-	
46-45	14018-14019	-	
46-46	14019-14020	-	
46-47	14020-14021	-	
46-48	14021-14022	-	
46-49	14022-14023	-	
46-50	14023-14024	+	
46-51	14024-14025	-	
46-52	14025-14026	-	
46-53	14026-14027	-	
46-54	14027-14028	-	
46-55	14028-14029	-	
46-56	14029-14030	-	
46-57	14030-14031	-	
46-58	14031-14032	-	
46-59	14032-14033	-	
46-60	14033-14034	-	
46-61	14034-14035	-	
46-62	14035-14036	-	
46-63	14036-14037	-	
46-64	14037-14038	-	
46-65	14038-14039	-	
46-66	14039-14040	-	
46-67	14040-14041	-	
46-68	14041-14042	-	
46-69	14042-14043	-	
46-70	14043-14044	-	
46-71	14044-14045	-	
46-72	14045-14046	-	
46-73	14046-14047	-	
46-74	14047-14048	-	
46-75	14048-14049	-	
46-76	14049-14050	-	
46-77	14050-14051	-	
46-78	14051-14052	-	
46-79	14052-14053	-	
46-80	14053-14054	-	
46-81	14054-14055	-	
46-82	14055-14056	-	
46-83	14056-14057	-	
46-84	14057-14058	-	
46-85	14058-14059	-	
46-86	14059-14060	-	
46-87	14060-14061	-	
46-88	14061-14062	-	
46-89	14062-14063	-	
46-90	14063-14064	-	
46-91	14064-14065	-	
46-92	14065-14066	-	
46-93	14066-14067	-	
46-94	14067-14068	-	
46-95	14068-14069	-	
46-96	14069-14070	-	
46-97	14070-14071	-	
46-98	14071-14072	-	
46-99	14072-14073	-	
46-100	14073-14074	-	
46-101	14074-14075	-	
46-102	14075-14076	-	
46-103	14076-14077	-	
46-104	14077-14078	-	
46-105	14078-14079	-	
46-106	14079-14080	-	
46-107	14080-14081	-	
46-108	14081-14082	-	
46-109	14082-14083	-	
46-110	14083-14084	-	
46-111	14084-14085	-	
46-112	14085-14086	-	
46-113	14086-14087	-	
46-114	14087-14088	-	
46-115	14088-14089	-	
46-116	14089-14090	-	
46-117	14090-14091	-	
46-118	14091-14092	-	
46-119	14092-14093	-	
46-120	14093-14094	-	
46-121	14094-14095	-	
46-122	14095-14096	-	
46-123	14096-14097	-	
46-124	14097-14098	-	
46-125	14098-14099	-	
46-126	14099-14100	-	
46-127	14100-14101	-	
46-128	14101-14102	-	
46-129	14102-14103	-	
46-130	14103-14104	-	
46-131	14104-14105	-	
46-132	14105-14106	-	
46-133	14106-14107	-	
46-134	14107-14108	-	
46-135	14108-14109	-	
46-136	14109-14110	-	
46-137	14110-14111	-	
46-138	14111-14112	-	
46-139	14112-14113	-	
46-140	14113-14114	-	
46-141	14114-14115	-	
46-142	14115-14116	-	
46-143	14116-14117	-	
46-144	14117-14118	-	
46-145	14118-14119	-	
46-146	14119-14120	-	
46-147	14120-14121	-	
46-148	14121-14122	-	
46-149	14122-14123	-	
46-150	14123-14124	-	
46-151	14124-14125	-	
46-152	14125-14126	-	
46-153	14126-14127	-	
46-154	14127-14128	-	
46-155	14128-14129	-	
46-156	14129-14130	-	
46-157	14130-14131	-	
46-158	14131-14132	-	
46-159	14132-14133	-	
46-160	14133-14134	-	
46-161	14134-14135	-	
46-162	14135-14136	-	
46-163	14136-14137	-	
46-164	14137-14138	-	
46-165	14138-14139	-	
46-166	14139-14140	-	
46-167	14140-14141	-	
46-168	14141-14142	-	
46-169	14142-14143	-	
46-170	14143-14144	-	
46-171	14144-14145	-	
46-172	14145-14146	-	
46-173	14146-14147	-	
46-174	14147-14148	-	
46-175	14148-14149	-	
46-176	14149-14150	-	
46-177	14150-14151	-	
46-178	14151-14152	-	
46-179	14152-14153	-	
46-180	14153-14154	-	
46-181	14154-14155	-	
46-182	14155-14156	-	
46-183	14156-14157	-	
46-184	14157-14158	-	
46-185	14158-14159	-	
46-186	14159-14160	-	
46-187	14160-14161	-	
46-188	14161-14162	-	
46-189	14162-14163	-	
46-190	14163-14164	-	
46-191	14164-14165	-	
46-192	14165-14166	-	
46-193	14166-14167	-	
46-194	14167-14168	-	
46-195	14168-14169	-	
46-196	14169-14170	-	
46-197	14170-14171	-	
46-198	14171-14172	-	
46-199	14172-14173	-	
46-200	14173-14174	-	
46-201	14175-14176	-	
46-202	14176-14177	-	
46-203	14177-14178	-	
46-204	14178-14179	-	
46-205	14179-14180	-	
46-206	14180-14181	-	
46-207	14181-14182	-	
46-208	14182-14183	-	
46-209	14183-14184	-	
46-210	14184-14185	-	
46-211	14185-14186	-	
46-212	14186-14187	-	
46-213	14187-14188	-	
46-214	14188-14189	-	
46-215	14189-14190	-	
46-216	14190-14191	-	
46-217	14191-14192	-	
46-218	14192-14193	-	

#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", " criticrating": 4} 685122 | GWfuvKfQ1PCe1IL | jnyhYYcF66 | 3 | {"tags": {"nk455671": {"ik615925": "iv253423"}}, "publisher": "b2NwVg7VY3", "criticrating": 0}
47-1	14194-14201	1000005	
47-2	14202-14203	|	
47-3	14204-14219	XEI7xShT8bPu6H7	
47-4	14220-14221	|	
47-5	14222-14232	2kD5XJDZUF	
47-6	14233-14234	|	
47-7	14235-14236	0	
47-8	14237-14238	|	
47-9	14239-14240	{	
47-10	14240-14241	"	
47-11	14241-14245	tags	
47-12	14245-14246	"	
47-13	14246-14247	:	
47-14	14248-14249	{	
47-15	14249-14250	"	
47-16	14250-14258	nk455671	
47-17	14258-14259	"	
47-18	14259-14260	:	
47-19	14261-14262	{	
47-20	14262-14263	"	
47-21	14263-14271	ik937456	
47-22	14271-14272	"	
47-23	14272-14273	:	
47-24	14274-14275	"	
47-25	14275-14283	iv506075	
47-26	14283-14284	"	
47-27	14284-14285	}	
47-28	14285-14286	}	
47-29	14286-14287	,	
47-30	14288-14289	"	
47-31	14289-14296	braille	
47-32	14296-14297	"	
47-33	14297-14298	:	
47-34	14299-14303	true	
47-35	14303-14304	,	
47-36	14305-14306	"	
47-37	14306-14314	keywords	
47-38	14314-14315	"	
47-39	14315-14316	:	
47-40	14317-14318	[	
47-41	14318-14319	"	
47-42	14319-14322	abc	
47-43	14322-14323	"	
47-44	14323-14324	,	
47-45	14325-14326	"	
47-46	14326-14329	kef	
47-47	14329-14330	"	
47-48	14330-14331	,	
47-49	14332-14333	"	
47-50	14333-14336	keh	
47-51	14336-14337	"	
47-52	14337-14338	]	
47-53	14338-14339	,	
47-54	14340-14341	"	
47-55	14341-14350	hardcover	
47-56	14350-14351	"	
47-57	14351-14352	:	
47-58	14353-14358	false	
47-59	14358-14359	,	
47-60	14360-14361	"	
47-61	14361-14370	publisher	
47-62	14370-14371	"	
47-63	14371-14372	:	
47-64	14373-14374	"	
47-65	14374-14384	zSfZIAjGGs	
47-66	14384-14385	"	
47-67	14385-14386	,	
47-68	14387-14388	"	
47-69	14389-14401	criticrating	
47-70	14401-14402	"	
47-71	14402-14403	:	
47-72	14404-14405	4	
47-73	14405-14406	}	
47-74	14407-14413	685122	
47-75	14414-14415	|	
47-76	14416-14431	GWfuvKfQ1PCe1IL	
47-77	14432-14433	|	
47-78	14434-14444	jnyhYYcF66	
47-79	14445-14446	|	
47-80	14447-14448	3	
47-81	14449-14450	|	
47-82	14451-14452	{	
47-83	14452-14453	"	
47-84	14453-14457	tags	
47-85	14457-14458	"	
47-86	14458-14459	:	
47-87	14460-14461	{	
47-88	14461-14462	"	
47-89	14462-14470	nk455671	
47-90	14470-14471	"	
47-91	14471-14472	:	
47-92	14473-14474	{	
47-93	14474-14475	"	
47-94	14475-14483	ik615925	
47-95	14483-14484	"	
47-96	14484-14485	:	
47-97	14486-14487	"	
47-98	14487-14495	iv253423	
47-99	14495-14496	"	
47-100	14496-14497	}	
47-101	14497-14498	}	
47-102	14498-14499	,	
47-103	14500-14501	"	
47-104	14501-14510	publisher	
47-105	14510-14511	"	
47-106	14511-14512	:	
47-107	14513-14514	"	
47-108	14514-14524	b2NwVg7VY3	
47-109	14524-14525	"	
47-110	14525-14526	,	
47-111	14527-14528	"	
47-112	14528-14540	criticrating	
47-113	14540-14541	"	
47-114	14541-14542	:	
47-115	14543-14544	0	
47-116	14544-14545	}	

#Text=(2 rows) demo=# explain analyze select * from books where data->'tags' ? 'nk455671'; QUERY PLAN
48-1	14546-14547	(	
48-2	14547-14548	2	
48-3	14549-14553	rows	
48-4	14553-14554	)	
48-5	14555-14559	demo	
48-6	14559-14560	=	
48-7	14560-14561	#	
48-8	14562-14569	explain	
48-9	14570-14577	analyze	
48-10	14578-14584	select	
48-11	14585-14586	*	
48-12	14587-14591	from	
48-13	14592-14597	books	
48-14	14598-14603	where	
48-15	14604-14608	data	
48-16	14608-14609	-	
48-17	14609-14610	>	
48-18	14610-14611	'	
48-19	14611-14615	tags	
48-20	14615-14616	'	
48-21	14617-14618	?	
48-22	14619-14620	'	
48-23	14620-14628	nk455671	
48-24	14628-14629	'	
48-25	14629-14630	;	
48-26	14631-14636	QUERY	
48-27	14637-14641	PLAN	

#Text=------------------------------------------------------------------------------------------------------------------------ Bitmap Heap Scan on books (cost=12.75..1007.75 rows=1000 width=158) (actual time=0.031..0.035 rows=2 loops=1)
49-1	14642-14643	-	
49-2	14643-14644	-	
49-3	14644-14645	-	
49-4	14645-14646	-	
49-5	14646-14647	-	
49-6	14647-14648	-	
49-7	14648-14649	-	
49-8	14649-14650	-	
49-9	14650-14651	-	
49-10	14651-14652	-	
49-11	14652-14653	-	
49-12	14653-14654	-	
49-13	14654-14655	-	
49-14	14655-14656	-	
49-15	14656-14657	-	
49-16	14657-14658	-	
49-17	14658-14659	-	
49-18	14659-14660	-	
49-19	14660-14661	-	
49-20	14661-14662	-	
49-21	14662-14663	-	
49-22	14663-14664	-	
49-23	14664-14665	-	
49-24	14665-14666	-	
49-25	14666-14667	-	
49-26	14667-14668	-	
49-27	14668-14669	-	
49-28	14669-14670	-	
49-29	14670-14671	-	
49-30	14671-14672	-	
49-31	14672-14673	-	
49-32	14673-14674	-	
49-33	14674-14675	-	
49-34	14675-14676	-	
49-35	14676-14677	-	
49-36	14677-14678	-	
49-37	14678-14679	-	
49-38	14679-14680	-	
49-39	14680-14681	-	
49-40	14681-14682	-	
49-41	14682-14683	-	
49-42	14683-14684	-	
49-43	14684-14685	-	
49-44	14685-14686	-	
49-45	14686-14687	-	
49-46	14687-14688	-	
49-47	14688-14689	-	
49-48	14689-14690	-	
49-49	14690-14691	-	
49-50	14691-14692	-	
49-51	14692-14693	-	
49-52	14693-14694	-	
49-53	14694-14695	-	
49-54	14695-14696	-	
49-55	14696-14697	-	
49-56	14697-14698	-	
49-57	14698-14699	-	
49-58	14699-14700	-	
49-59	14700-14701	-	
49-60	14701-14702	-	
49-61	14702-14703	-	
49-62	14703-14704	-	
49-63	14704-14705	-	
49-64	14705-14706	-	
49-65	14706-14707	-	
49-66	14707-14708	-	
49-67	14708-14709	-	
49-68	14709-14710	-	
49-69	14710-14711	-	
49-70	14711-14712	-	
49-71	14712-14713	-	
49-72	14713-14714	-	
49-73	14714-14715	-	
49-74	14715-14716	-	
49-75	14716-14717	-	
49-76	14717-14718	-	
49-77	14718-14719	-	
49-78	14719-14720	-	
49-79	14720-14721	-	
49-80	14721-14722	-	
49-81	14722-14723	-	
49-82	14723-14724	-	
49-83	14724-14725	-	
49-84	14725-14726	-	
49-85	14726-14727	-	
49-86	14727-14728	-	
49-87	14728-14729	-	
49-88	14729-14730	-	
49-89	14730-14731	-	
49-90	14731-14732	-	
49-91	14732-14733	-	
49-92	14733-14734	-	
49-93	14734-14735	-	
49-94	14735-14736	-	
49-95	14736-14737	-	
49-96	14737-14738	-	
49-97	14738-14739	-	
49-98	14739-14740	-	
49-99	14740-14741	-	
49-100	14741-14742	-	
49-101	14742-14743	-	
49-102	14743-14744	-	
49-103	14744-14745	-	
49-104	14745-14746	-	
49-105	14746-14747	-	
49-106	14747-14748	-	
49-107	14748-14749	-	
49-108	14749-14750	-	
49-109	14750-14751	-	
49-110	14751-14752	-	
49-111	14752-14753	-	
49-112	14753-14754	-	
49-113	14754-14755	-	
49-114	14755-14756	-	
49-115	14756-14757	-	
49-116	14757-14758	-	
49-117	14758-14759	-	
49-118	14759-14760	-	
49-119	14760-14761	-	
49-120	14761-14762	-	
49-121	14763-14769	Bitmap	
49-122	14770-14774	Heap	
49-123	14775-14779	Scan	
49-124	14780-14782	on	
49-125	14783-14788	books	
49-126	14789-14790	(	
49-127	14790-14794	cost	
49-128	14794-14795	=	
49-129	14795-14800	12.75	
49-130	14800-14801	.	
49-131	14801-14809	.1007.75	
49-132	14810-14814	rows	
49-133	14814-14815	=	
49-134	14815-14819	1000	
49-135	14820-14825	width	
49-136	14825-14826	=	
49-137	14826-14829	158	
49-138	14829-14830	)	
49-139	14831-14832	(	
49-140	14832-14838	actual	
49-141	14839-14843	time	
49-142	14843-14844	=	
49-143	14844-14849	0.031	
49-144	14849-14850	.	
49-145	14850-14856	.0.035	
49-146	14857-14861	rows	
49-147	14861-14862	=	
49-148	14862-14863	2	
49-149	14864-14869	loops	
49-150	14869-14870	=	
49-151	14870-14871	1	
49-152	14871-14872	)	

#Text=Recheck Cond: ((data ->'tags'::text) ? 'nk455671'::text) Heap Blocks: exact=2 -> Bitmap Index Scan on datatagsgin (cost=0.00..12.50 rows=1000 width=0) (actual time=0.021..0.021 rows=2 loops=1)
50-1	14873-14880	Recheck	
50-2	14881-14885	Cond	
50-3	14885-14886	:	
50-4	14887-14888	(	
50-5	14888-14889	(	
50-6	14889-14893	data	
50-7	14894-14895	-	
50-8	14895-14896	>	
50-9	14896-14897	'	
50-10	14897-14901	tags	
50-11	14901-14902	'	
50-12	14902-14903	:	
50-13	14903-14904	:	
50-14	14904-14908	text	
50-15	14908-14909	)	
50-16	14910-14911	?	
50-17	14912-14913	'	
50-18	14913-14921	nk455671	
50-19	14921-14922	'	
50-20	14922-14923	:	
50-21	14923-14924	:	
50-22	14924-14928	text	
50-23	14928-14929	)	
50-24	14930-14934	Heap	
50-25	14935-14941	Blocks	
50-26	14941-14942	:	
50-27	14943-14948	exact	
50-28	14948-14949	=	
50-29	14949-14950	2	
50-30	14951-14952	-	
50-31	14952-14953	>	
50-32	14954-14960	Bitmap	
50-33	14961-14966	Index	
50-34	14967-14971	Scan	
50-35	14972-14974	on	
50-36	14975-14986	datatagsgin	
50-37	14987-14988	(	
50-38	14988-14992	cost	
50-39	14992-14993	=	
50-40	14993-14997	0.00	
50-41	14997-14998	.	
50-42	14998-15004	.12.50	
50-43	15005-15009	rows	
50-44	15009-15010	=	
50-45	15010-15014	1000	
50-46	15015-15020	width	
50-47	15020-15021	=	
50-48	15021-15022	0	
50-49	15022-15023	)	
50-50	15024-15025	(	
50-51	15025-15031	actual	
50-52	15032-15036	time	
50-53	15036-15037	=	
50-54	15037-15042	0.021	
50-55	15042-15043	.	
50-56	15043-15049	.0.021	
50-57	15050-15054	rows	
50-58	15054-15055	=	
50-59	15055-15056	2	
50-60	15057-15062	loops	
50-61	15062-15063	=	
50-62	15063-15064	1	
50-63	15064-15065	)	

#Text=Index Cond: ((data ->'tags'::text) ? 'nk455671'::text) Planning Time: 0.098 ms Execution Time: 0.061 ms (7 rows) Note: An alternative here is to use the @> operator: select * from books where data @> '{"tags":{"nk455671":{}}}'::jsonb;
51-1	15066-15071	Index	
51-2	15072-15076	Cond	
51-3	15076-15077	:	
51-4	15078-15079	(	
51-5	15079-15080	(	
51-6	15080-15084	data	
51-7	15085-15086	-	
51-8	15086-15087	>	
51-9	15087-15088	'	
51-10	15088-15092	tags	
51-11	15092-15093	'	
51-12	15093-15094	:	
51-13	15094-15095	:	
51-14	15095-15099	text	
51-15	15099-15100	)	
51-16	15101-15102	?	
51-17	15103-15104	'	
51-18	15104-15112	nk455671	
51-19	15112-15113	'	
51-20	15113-15114	:	
51-21	15114-15115	:	
51-22	15115-15119	text	
51-23	15119-15120	)	
51-24	15121-15129	Planning	
51-25	15130-15134	Time	
51-26	15134-15135	:	
51-27	15136-15141	0.098	
51-28	15142-15144	ms	
51-29	15145-15154	Execution	
51-30	15155-15159	Time	
51-31	15159-15160	:	
51-32	15161-15166	0.061	
51-33	15167-15169	ms	
51-34	15170-15171	(	
51-35	15171-15172	7	
51-36	15173-15177	rows	
51-37	15177-15178	)	
51-38	15179-15183	Note	
51-39	15183-15184	:	
51-40	15185-15187	An	
51-41	15188-15199	alternative	
51-42	15200-15204	here	
51-43	15205-15207	is	
51-44	15208-15210	to	
51-45	15211-15214	use	
51-46	15215-15218	the	
51-47	15219-15220	@	
51-48	15220-15221	>	
51-49	15222-15230	operator	
51-50	15230-15231	:	
51-51	15232-15238	select	
51-52	15239-15240	*	
51-53	15241-15245	from	
51-54	15246-15251	books	
51-55	15252-15257	where	
51-56	15258-15262	data	
51-57	15263-15264	@	
51-58	15264-15265	>	
51-59	15266-15267	'	
51-60	15267-15268	{	
51-61	15268-15269	"	
51-62	15269-15273	tags	
51-63	15273-15274	"	
51-64	15274-15275	:	
51-65	15275-15276	{	
51-66	15276-15277	"	
51-67	15277-15285	nk455671	
51-68	15285-15286	"	
51-69	15286-15287	:	
51-70	15287-15288	{	
51-71	15288-15289	}	
51-72	15289-15290	}	
51-73	15290-15291	}	
51-74	15291-15292	'	
51-75	15292-15293	:	
51-76	15293-15294	:	
51-77	15294-15299	jsonb	
51-78	15299-15300	;	

#Text=However, this only works if the value is an object. So, if you’re unsure if the value is an object or a primitive value, it could lead to incorrect results. Path Operators @>, <@ The “path” operator can be used for multi-level queries of your JSONB data. Let’s use it similar to the ? operator above: select * from books where data @> '{"braille":true}'::jsonb;
52-1	15301-15308	However	
52-2	15308-15309	,	
52-3	15310-15314	this	
52-4	15315-15319	only	
52-5	15320-15325	works	
52-6	15326-15328	if	
52-7	15329-15332	the	
52-8	15333-15338	value	
52-9	15339-15341	is	
52-10	15342-15344	an	
52-11	15345-15351	object	
52-12	15351-15352	.	
52-13	15353-15355	So	
52-14	15355-15356	,	
52-15	15357-15359	if	
52-16	15360-15363	you	
52-17	15363-15364	’	
52-18	15364-15366	re	
52-19	15367-15373	unsure	
52-20	15374-15376	if	
52-21	15377-15380	the	
52-22	15381-15386	value	
52-23	15387-15389	is	
52-24	15390-15392	an	
52-25	15393-15399	object	
52-26	15400-15402	or	
52-27	15403-15404	a	
52-28	15405-15414	primitive	
52-29	15415-15420	value	
52-30	15420-15421	,	
52-31	15422-15424	it	
52-32	15425-15430	could	
52-33	15431-15435	lead	
52-34	15436-15438	to	
52-35	15439-15448	incorrect	
52-36	15449-15456	results	
52-37	15456-15457	.	
52-38	15458-15462	Path	
52-39	15463-15472	Operators	
52-40	15473-15474	@	
52-41	15474-15475	>	
52-42	15475-15476	,	
52-43	15477-15478	<	
52-44	15478-15479	@	
52-45	15480-15483	The	
52-46	15484-15485	“	
52-47	15485-15489	path	
52-48	15489-15490	”	
52-49	15491-15499	operator	
52-50	15500-15503	can	
52-51	15504-15506	be	
52-52	15507-15511	used	
52-53	15512-15515	for	
52-54	15516-15527	multi-level	
52-55	15528-15535	queries	
52-56	15536-15538	of	
52-57	15539-15543	your	
52-58	15544-15549	JSONB	
52-59	15550-15554	data	
52-60	15554-15555	.	
52-61	15556-15559	Let	
52-62	15559-15560	’	
52-63	15560-15561	s	
52-64	15562-15565	use	
52-65	15566-15568	it	
52-66	15569-15576	similar	
52-67	15577-15579	to	
52-68	15580-15583	the	
52-69	15584-15585	?	
52-70	15586-15594	operator	
52-71	15595-15600	above	
52-72	15600-15601	:	
52-73	15602-15608	select	
52-74	15609-15610	*	
52-75	15611-15615	from	
52-76	15616-15621	books	
52-77	15622-15627	where	
52-78	15628-15632	data	
52-79	15633-15634	@	
52-80	15634-15635	>	
52-81	15636-15637	'	
52-82	15637-15638	{	
52-83	15638-15639	"	
52-84	15639-15646	braille	
52-85	15646-15647	"	
52-86	15647-15648	:	
52-87	15648-15652	true	
52-88	15652-15653	}	
52-89	15653-15654	'	
52-90	15654-15655	:	
52-91	15655-15656	:	
52-92	15656-15661	jsonb	
52-93	15661-15662	;	

#Text=demo=# explain analyze select * from books where data @> '{"braille":true}'::jsonb; QUERY PLAN
53-1	15663-15667	demo	
53-2	15667-15668	=	
53-3	15668-15669	#	
53-4	15670-15677	explain	
53-5	15678-15685	analyze	
53-6	15686-15692	select	
53-7	15693-15694	*	
53-8	15695-15699	from	
53-9	15700-15705	books	
53-10	15706-15711	where	
53-11	15712-15716	data	
53-12	15717-15718	@	
53-13	15718-15719	>	
53-14	15720-15721	'	
53-15	15721-15722	{	
53-16	15722-15723	"	
53-17	15723-15730	braille	
53-18	15730-15731	"	
53-19	15731-15732	:	
53-20	15732-15736	true	
53-21	15736-15737	}	
53-22	15737-15738	'	
53-23	15738-15739	:	
53-24	15739-15740	:	
53-25	15740-15745	jsonb	
53-26	15745-15746	;	
53-27	15747-15752	QUERY	
53-28	15753-15757	PLAN	

#Text=--------------------------------------------------------------------------------------------------------------------- Bitmap Heap Scan on books (cost=16.75..1009.25 rows=1000 width=158) (actual time=0.040..0.048 rows=6 loops=1)
54-1	15758-15759	-	
54-2	15759-15760	-	
54-3	15760-15761	-	
54-4	15761-15762	-	
54-5	15762-15763	-	
54-6	15763-15764	-	
54-7	15764-15765	-	
54-8	15765-15766	-	
54-9	15766-15767	-	
54-10	15767-15768	-	
54-11	15768-15769	-	
54-12	15769-15770	-	
54-13	15770-15771	-	
54-14	15771-15772	-	
54-15	15772-15773	-	
54-16	15773-15774	-	
54-17	15774-15775	-	
54-18	15775-15776	-	
54-19	15776-15777	-	
54-20	15777-15778	-	
54-21	15778-15779	-	
54-22	15779-15780	-	
54-23	15780-15781	-	
54-24	15781-15782	-	
54-25	15782-15783	-	
54-26	15783-15784	-	
54-27	15784-15785	-	
54-28	15785-15786	-	
54-29	15786-15787	-	
54-30	15787-15788	-	
54-31	15788-15789	-	
54-32	15789-15790	-	
54-33	15790-15791	-	
54-34	15791-15792	-	
54-35	15792-15793	-	
54-36	15793-15794	-	
54-37	15794-15795	-	
54-38	15795-15796	-	
54-39	15796-15797	-	
54-40	15797-15798	-	
54-41	15798-15799	-	
54-42	15799-15800	-	
54-43	15800-15801	-	
54-44	15801-15802	-	
54-45	15802-15803	-	
54-46	15803-15804	-	
54-47	15804-15805	-	
54-48	15805-15806	-	
54-49	15806-15807	-	
54-50	15807-15808	-	
54-51	15808-15809	-	
54-52	15809-15810	-	
54-53	15810-15811	-	
54-54	15811-15812	-	
54-55	15812-15813	-	
54-56	15813-15814	-	
54-57	15814-15815	-	
54-58	15815-15816	-	
54-59	15816-15817	-	
54-60	15817-15818	-	
54-61	15818-15819	-	
54-62	15819-15820	-	
54-63	15820-15821	-	
54-64	15821-15822	-	
54-65	15822-15823	-	
54-66	15823-15824	-	
54-67	15824-15825	-	
54-68	15825-15826	-	
54-69	15826-15827	-	
54-70	15827-15828	-	
54-71	15828-15829	-	
54-72	15829-15830	-	
54-73	15830-15831	-	
54-74	15831-15832	-	
54-75	15832-15833	-	
54-76	15833-15834	-	
54-77	15834-15835	-	
54-78	15835-15836	-	
54-79	15836-15837	-	
54-80	15837-15838	-	
54-81	15838-15839	-	
54-82	15839-15840	-	
54-83	15840-15841	-	
54-84	15841-15842	-	
54-85	15842-15843	-	
54-86	15843-15844	-	
54-87	15844-15845	-	
54-88	15845-15846	-	
54-89	15846-15847	-	
54-90	15847-15848	-	
54-91	15848-15849	-	
54-92	15849-15850	-	
54-93	15850-15851	-	
54-94	15851-15852	-	
54-95	15852-15853	-	
54-96	15853-15854	-	
54-97	15854-15855	-	
54-98	15855-15856	-	
54-99	15856-15857	-	
54-100	15857-15858	-	
54-101	15858-15859	-	
54-102	15859-15860	-	
54-103	15860-15861	-	
54-104	15861-15862	-	
54-105	15862-15863	-	
54-106	15863-15864	-	
54-107	15864-15865	-	
54-108	15865-15866	-	
54-109	15866-15867	-	
54-110	15867-15868	-	
54-111	15868-15869	-	
54-112	15869-15870	-	
54-113	15870-15871	-	
54-114	15871-15872	-	
54-115	15872-15873	-	
54-116	15873-15874	-	
54-117	15874-15875	-	
54-118	15876-15882	Bitmap	
54-119	15883-15887	Heap	
54-120	15888-15892	Scan	
54-121	15893-15895	on	
54-122	15896-15901	books	
54-123	15902-15903	(	
54-124	15903-15907	cost	
54-125	15907-15908	=	
54-126	15908-15913	16.75	
54-127	15913-15914	.	
54-128	15914-15922	.1009.25	
54-129	15923-15927	rows	
54-130	15927-15928	=	
54-131	15928-15932	1000	
54-132	15933-15938	width	
54-133	15938-15939	=	
54-134	15939-15942	158	
54-135	15942-15943	)	
54-136	15944-15945	(	
54-137	15945-15951	actual	
54-138	15952-15956	time	
54-139	15956-15957	=	
54-140	15957-15962	0.040	
54-141	15962-15963	.	
54-142	15963-15969	.0.048	
54-143	15970-15974	rows	
54-144	15974-15975	=	
54-145	15975-15976	6	
54-146	15977-15982	loops	
54-147	15982-15983	=	
54-148	15983-15984	1	
54-149	15984-15985	)	

#Text=Recheck Cond: (data @> '{"braille": true}'::jsonb) Rows Removed by Index Recheck: 9 Heap Blocks: exact=2 -> Bitmap Index Scan on datagin (cost=0.00..16.50 rows=1000 width=0) (actual time=0.030..0.030 rows=15 loops=1)
55-1	15986-15993	Recheck	
55-2	15994-15998	Cond	
55-3	15998-15999	:	
55-4	16000-16001	(	
55-5	16001-16005	data	
55-6	16006-16007	@	
55-7	16007-16008	>	
55-8	16009-16010	'	
55-9	16010-16011	{	
55-10	16011-16012	"	
55-11	16012-16019	braille	
55-12	16019-16020	"	
55-13	16020-16021	:	
55-14	16022-16026	true	
55-15	16026-16027	}	
55-16	16027-16028	'	
55-17	16028-16029	:	
55-18	16029-16030	:	
55-19	16030-16035	jsonb	
55-20	16035-16036	)	
55-21	16037-16041	Rows	
55-22	16042-16049	Removed	
55-23	16050-16052	by	
55-24	16053-16058	Index	
55-25	16059-16066	Recheck	
55-26	16066-16067	:	
55-27	16068-16069	9	
55-28	16070-16074	Heap	
55-29	16075-16081	Blocks	
55-30	16081-16082	:	
55-31	16083-16088	exact	
55-32	16088-16089	=	
55-33	16089-16090	2	
55-34	16091-16092	-	
55-35	16092-16093	>	
55-36	16094-16100	Bitmap	
55-37	16101-16106	Index	
55-38	16107-16111	Scan	
55-39	16112-16114	on	
55-40	16115-16122	datagin	
55-41	16123-16124	(	
55-42	16124-16128	cost	
55-43	16128-16129	=	
55-44	16129-16133	0.00	
55-45	16133-16134	.	
55-46	16134-16140	.16.50	
55-47	16141-16145	rows	
55-48	16145-16146	=	
55-49	16146-16150	1000	
55-50	16151-16156	width	
55-51	16156-16157	=	
55-52	16157-16158	0	
55-53	16158-16159	)	
55-54	16160-16161	(	
55-55	16161-16167	actual	
55-56	16168-16172	time	
55-57	16172-16173	=	
55-58	16173-16178	0.030	
55-59	16178-16179	.	
55-60	16179-16185	.0.030	
55-61	16186-16190	rows	
55-62	16190-16191	=	
55-63	16191-16193	15	
55-64	16194-16199	loops	
55-65	16199-16200	=	
55-66	16200-16201	1	
55-67	16201-16202	)	

#Text=Index Cond: (data @> '{"braille": true}'::jsonb) Planning Time: 0.100 ms Execution Time: 0.076 ms (8 rows) The path operators support querying nested objects or top-level objects:
56-1	16203-16208	Index	
56-2	16209-16213	Cond	
56-3	16213-16214	:	
56-4	16215-16216	(	
56-5	16216-16220	data	
56-6	16221-16222	@	
56-7	16222-16223	>	
56-8	16224-16225	'	
56-9	16225-16226	{	
56-10	16226-16227	"	
56-11	16227-16234	braille	
56-12	16234-16235	"	
56-13	16235-16236	:	
56-14	16237-16241	true	
56-15	16241-16242	}	
56-16	16242-16243	'	
56-17	16243-16244	:	
56-18	16244-16245	:	
56-19	16245-16250	jsonb	
56-20	16250-16251	)	
56-21	16252-16260	Planning	
56-22	16261-16265	Time	
56-23	16265-16266	:	
56-24	16267-16272	0.100	
56-25	16273-16275	ms	
56-26	16276-16285	Execution	
56-27	16286-16290	Time	
56-28	16290-16291	:	
56-29	16292-16297	0.076	
56-30	16298-16300	ms	
56-31	16301-16302	(	
56-32	16302-16303	8	
56-33	16304-16308	rows	
56-34	16308-16309	)	
56-35	16310-16313	The	
56-36	16314-16318	path	
56-37	16319-16328	operators	
56-38	16329-16336	support	
56-39	16337-16345	querying	
56-40	16346-16352	nested	
56-41	16353-16360	objects	
56-42	16361-16363	or	
56-43	16364-16373	top-level	
56-44	16374-16381	objects	
56-45	16381-16382	:	

#Text=demo=# select * from books where data @> '{"publisher":"XlekfkLOtL"}'::jsonb; id | author | isbn | rating | data
57-1	16383-16387	demo	
57-2	16387-16388	=	
57-3	16388-16389	#	
57-4	16390-16396	select	
57-5	16397-16398	*	
57-6	16399-16403	from	
57-7	16404-16409	books	
57-8	16410-16415	where	
57-9	16416-16420	data	
57-10	16421-16422	@	
57-11	16422-16423	>	
57-12	16424-16425	'	
57-13	16425-16426	{	
57-14	16426-16427	"	
57-15	16427-16436	publisher	
57-16	16436-16437	"	
57-17	16437-16438	:	
57-18	16438-16439	"	
57-19	16439-16449	XlekfkLOtL	
57-20	16449-16450	"	
57-21	16450-16451	}	
57-22	16451-16452	'	
57-23	16452-16453	:	
57-24	16453-16454	:	
57-25	16454-16459	jsonb	
57-26	16459-16460	;	
57-27	16461-16463	id	
57-28	16464-16465	|	
57-29	16466-16472	author	
57-30	16473-16474	|	
57-31	16475-16479	isbn	
57-32	16480-16481	|	
57-33	16482-16488	rating	
57-34	16489-16490	|	
57-35	16491-16495	data	

#Text=-----+-----------------+------------+--------+------------------------------------------------------------------------------------- 346 | uD3QOvHfJdxq2ez | KiAaIRu8QE | 1 | {"tags": {"nk88": {"ik37": "iv161"}}, "publisher": "XlekfkLOtL", "criticrating": 3}
58-1	16496-16497	-	
58-2	16497-16498	-	
58-3	16498-16499	-	
58-4	16499-16500	-	
58-5	16500-16501	-	
58-6	16501-16502	+	
58-7	16502-16503	-	
58-8	16503-16504	-	
58-9	16504-16505	-	
58-10	16505-16506	-	
58-11	16506-16507	-	
58-12	16507-16508	-	
58-13	16508-16509	-	
58-14	16509-16510	-	
58-15	16510-16511	-	
58-16	16511-16512	-	
58-17	16512-16513	-	
58-18	16513-16514	-	
58-19	16514-16515	-	
58-20	16515-16516	-	
58-21	16516-16517	-	
58-22	16517-16518	-	
58-23	16518-16519	-	
58-24	16519-16520	+	
58-25	16520-16521	-	
58-26	16521-16522	-	
58-27	16522-16523	-	
58-28	16523-16524	-	
58-29	16524-16525	-	
58-30	16525-16526	-	
58-31	16526-16527	-	
58-32	16527-16528	-	
58-33	16528-16529	-	
58-34	16529-16530	-	
58-35	16530-16531	-	
58-36	16531-16532	-	
58-37	16532-16533	+	
58-38	16533-16534	-	
58-39	16534-16535	-	
58-40	16535-16536	-	
58-41	16536-16537	-	
58-42	16537-16538	-	
58-43	16538-16539	-	
58-44	16539-16540	-	
58-45	16540-16541	-	
58-46	16541-16542	+	
58-47	16542-16543	-	
58-48	16543-16544	-	
58-49	16544-16545	-	
58-50	16545-16546	-	
58-51	16546-16547	-	
58-52	16547-16548	-	
58-53	16548-16549	-	
58-54	16549-16550	-	
58-55	16550-16551	-	
58-56	16551-16552	-	
58-57	16552-16553	-	
58-58	16553-16554	-	
58-59	16554-16555	-	
58-60	16555-16556	-	
58-61	16556-16557	-	
58-62	16557-16558	-	
58-63	16558-16559	-	
58-64	16559-16560	-	
58-65	16560-16561	-	
58-66	16561-16562	-	
58-67	16562-16563	-	
58-68	16563-16564	-	
58-69	16564-16565	-	
58-70	16565-16566	-	
58-71	16566-16567	-	
58-72	16567-16568	-	
58-73	16568-16569	-	
58-74	16569-16570	-	
58-75	16570-16571	-	
58-76	16571-16572	-	
58-77	16572-16573	-	
58-78	16573-16574	-	
58-79	16574-16575	-	
58-80	16575-16576	-	
58-81	16576-16577	-	
58-82	16577-16578	-	
58-83	16578-16579	-	
58-84	16579-16580	-	
58-85	16580-16581	-	
58-86	16581-16582	-	
58-87	16582-16583	-	
58-88	16583-16584	-	
58-89	16584-16585	-	
58-90	16585-16586	-	
58-91	16586-16587	-	
58-92	16587-16588	-	
58-93	16588-16589	-	
58-94	16589-16590	-	
58-95	16590-16591	-	
58-96	16591-16592	-	
58-97	16592-16593	-	
58-98	16593-16594	-	
58-99	16594-16595	-	
58-100	16595-16596	-	
58-101	16596-16597	-	
58-102	16597-16598	-	
58-103	16598-16599	-	
58-104	16599-16600	-	
58-105	16600-16601	-	
58-106	16601-16602	-	
58-107	16602-16603	-	
58-108	16603-16604	-	
58-109	16604-16605	-	
58-110	16605-16606	-	
58-111	16606-16607	-	
58-112	16607-16608	-	
58-113	16608-16609	-	
58-114	16609-16610	-	
58-115	16610-16611	-	
58-116	16611-16612	-	
58-117	16612-16613	-	
58-118	16613-16614	-	
58-119	16614-16615	-	
58-120	16615-16616	-	
58-121	16616-16617	-	
58-122	16617-16618	-	
58-123	16618-16619	-	
58-124	16619-16620	-	
58-125	16620-16621	-	
58-126	16621-16622	-	
58-127	16622-16623	-	
58-128	16623-16624	-	
58-129	16624-16625	-	
58-130	16625-16626	-	
58-131	16626-16627	-	
58-132	16628-16631	346	
58-133	16632-16633	|	
58-134	16634-16649	uD3QOvHfJdxq2ez	
58-135	16650-16651	|	
58-136	16652-16662	KiAaIRu8QE	
58-137	16663-16664	|	
58-138	16665-16666	1	
58-139	16667-16668	|	
58-140	16669-16670	{	
58-141	16670-16671	"	
58-142	16671-16675	tags	
58-143	16675-16676	"	
58-144	16676-16677	:	
58-145	16678-16679	{	
58-146	16679-16680	"	
58-147	16680-16684	nk88	
58-148	16684-16685	"	
58-149	16685-16686	:	
58-150	16687-16688	{	
58-151	16688-16689	"	
58-152	16689-16693	ik37	
58-153	16693-16694	"	
58-154	16694-16695	:	
58-155	16696-16697	"	
58-156	16697-16702	iv161	
58-157	16702-16703	"	
58-158	16703-16704	}	
58-159	16704-16705	}	
58-160	16705-16706	,	
58-161	16707-16708	"	
58-162	16708-16717	publisher	
58-163	16717-16718	"	
58-164	16718-16719	:	
58-165	16720-16721	"	
58-166	16721-16731	XlekfkLOtL	
58-167	16731-16732	"	
58-168	16732-16733	,	
58-169	16734-16735	"	
58-170	16735-16747	criticrating	
58-171	16747-16748	"	
58-172	16748-16749	:	
58-173	16750-16751	3	
58-174	16751-16752	}	

#Text=(1 row) demo=# explain analyze select * from books where data @> '{"publisher":"XlekfkLOtL"}'::jsonb; QUERY PLAN
59-1	16753-16754	(	
59-2	16754-16755	1	
59-3	16756-16759	row	
59-4	16759-16760	)	
59-5	16761-16765	demo	
59-6	16765-16766	=	
59-7	16766-16767	#	
59-8	16768-16775	explain	
59-9	16776-16783	analyze	
59-10	16784-16790	select	
59-11	16791-16792	*	
59-12	16793-16797	from	
59-13	16798-16803	books	
59-14	16804-16809	where	
59-15	16810-16814	data	
59-16	16815-16816	@	
59-17	16816-16817	>	
59-18	16818-16819	'	
59-19	16819-16820	{	
59-20	16820-16821	"	
59-21	16821-16830	publisher	
59-22	16830-16831	"	
59-23	16831-16832	:	
59-24	16832-16833	"	
59-25	16833-16843	XlekfkLOtL	
59-26	16843-16844	"	
59-27	16844-16845	}	
59-28	16845-16846	'	
59-29	16846-16847	:	
59-30	16847-16848	:	
59-31	16848-16853	jsonb	
59-32	16853-16854	;	
59-33	16855-16860	QUERY	
59-34	16861-16865	PLAN	

#Text=-------------------------------------------------------------------------------------------------------------------- Bitmap Heap Scan on books (cost=16.75..1009.25 rows=1000 width=158) (actual time=0.491..0.492 rows=1 loops=1)
60-1	16866-16867	-	
60-2	16867-16868	-	
60-3	16868-16869	-	
60-4	16869-16870	-	
60-5	16870-16871	-	
60-6	16871-16872	-	
60-7	16872-16873	-	
60-8	16873-16874	-	
60-9	16874-16875	-	
60-10	16875-16876	-	
60-11	16876-16877	-	
60-12	16877-16878	-	
60-13	16878-16879	-	
60-14	16879-16880	-	
60-15	16880-16881	-	
60-16	16881-16882	-	
60-17	16882-16883	-	
60-18	16883-16884	-	
60-19	16884-16885	-	
60-20	16885-16886	-	
60-21	16886-16887	-	
60-22	16887-16888	-	
60-23	16888-16889	-	
60-24	16889-16890	-	
60-25	16890-16891	-	
60-26	16891-16892	-	
60-27	16892-16893	-	
60-28	16893-16894	-	
60-29	16894-16895	-	
60-30	16895-16896	-	
60-31	16896-16897	-	
60-32	16897-16898	-	
60-33	16898-16899	-	
60-34	16899-16900	-	
60-35	16900-16901	-	
60-36	16901-16902	-	
60-37	16902-16903	-	
60-38	16903-16904	-	
60-39	16904-16905	-	
60-40	16905-16906	-	
60-41	16906-16907	-	
60-42	16907-16908	-	
60-43	16908-16909	-	
60-44	16909-16910	-	
60-45	16910-16911	-	
60-46	16911-16912	-	
60-47	16912-16913	-	
60-48	16913-16914	-	
60-49	16914-16915	-	
60-50	16915-16916	-	
60-51	16916-16917	-	
60-52	16917-16918	-	
60-53	16918-16919	-	
60-54	16919-16920	-	
60-55	16920-16921	-	
60-56	16921-16922	-	
60-57	16922-16923	-	
60-58	16923-16924	-	
60-59	16924-16925	-	
60-60	16925-16926	-	
60-61	16926-16927	-	
60-62	16927-16928	-	
60-63	16928-16929	-	
60-64	16929-16930	-	
60-65	16930-16931	-	
60-66	16931-16932	-	
60-67	16932-16933	-	
60-68	16933-16934	-	
60-69	16934-16935	-	
60-70	16935-16936	-	
60-71	16936-16937	-	
60-72	16937-16938	-	
60-73	16938-16939	-	
60-74	16939-16940	-	
60-75	16940-16941	-	
60-76	16941-16942	-	
60-77	16942-16943	-	
60-78	16943-16944	-	
60-79	16944-16945	-	
60-80	16945-16946	-	
60-81	16946-16947	-	
60-82	16947-16948	-	
60-83	16948-16949	-	
60-84	16949-16950	-	
60-85	16950-16951	-	
60-86	16951-16952	-	
60-87	16952-16953	-	
60-88	16953-16954	-	
60-89	16954-16955	-	
60-90	16955-16956	-	
60-91	16956-16957	-	
60-92	16957-16958	-	
60-93	16958-16959	-	
60-94	16959-16960	-	
60-95	16960-16961	-	
60-96	16961-16962	-	
60-97	16962-16963	-	
60-98	16963-16964	-	
60-99	16964-16965	-	
60-100	16965-16966	-	
60-101	16966-16967	-	
60-102	16967-16968	-	
60-103	16968-16969	-	
60-104	16969-16970	-	
60-105	16970-16971	-	
60-106	16971-16972	-	
60-107	16972-16973	-	
60-108	16973-16974	-	
60-109	16974-16975	-	
60-110	16975-16976	-	
60-111	16976-16977	-	
60-112	16977-16978	-	
60-113	16978-16979	-	
60-114	16979-16980	-	
60-115	16980-16981	-	
60-116	16981-16982	-	
60-117	16983-16989	Bitmap	
60-118	16990-16994	Heap	
60-119	16995-16999	Scan	
60-120	17000-17002	on	
60-121	17003-17008	books	
60-122	17009-17010	(	
60-123	17010-17014	cost	
60-124	17014-17015	=	
60-125	17015-17020	16.75	
60-126	17020-17021	.	
60-127	17021-17029	.1009.25	
60-128	17030-17034	rows	
60-129	17034-17035	=	
60-130	17035-17039	1000	
60-131	17040-17045	width	
60-132	17045-17046	=	
60-133	17046-17049	158	
60-134	17049-17050	)	
60-135	17051-17052	(	
60-136	17052-17058	actual	
60-137	17059-17063	time	
60-138	17063-17064	=	
60-139	17064-17069	0.491	
60-140	17069-17070	.	
60-141	17070-17076	.0.492	
60-142	17077-17081	rows	
60-143	17081-17082	=	
60-144	17082-17083	1	
60-145	17084-17089	loops	
60-146	17089-17090	=	
60-147	17090-17091	1	
60-148	17091-17092	)	

#Text=Recheck Cond: (data @> '{"publisher": "XlekfkLOtL"}'::jsonb) Heap Blocks: exact=1 -> Bitmap Index Scan on datagin (cost=0.00..16.50 rows=1000 width=0) (actual time=0.092..0.092 rows=1 loops=1)
61-1	17093-17100	Recheck	
61-2	17101-17105	Cond	
61-3	17105-17106	:	
61-4	17107-17108	(	
61-5	17108-17112	data	
61-6	17113-17114	@	
61-7	17114-17115	>	
61-8	17116-17117	'	
61-9	17117-17118	{	
61-10	17118-17119	"	
61-11	17119-17128	publisher	
61-12	17128-17129	"	
61-13	17129-17130	:	
61-14	17131-17132	"	
61-15	17132-17142	XlekfkLOtL	
61-16	17142-17143	"	
61-17	17143-17144	}	
61-18	17144-17145	'	
61-19	17145-17146	:	
61-20	17146-17147	:	
61-21	17147-17152	jsonb	
61-22	17152-17153	)	
61-23	17154-17158	Heap	
61-24	17159-17165	Blocks	
61-25	17165-17166	:	
61-26	17167-17172	exact	
61-27	17172-17173	=	
61-28	17173-17174	1	
61-29	17175-17176	-	
61-30	17176-17177	>	
61-31	17178-17184	Bitmap	
61-32	17185-17190	Index	
61-33	17191-17195	Scan	
61-34	17196-17198	on	
61-35	17199-17206	datagin	
61-36	17207-17208	(	
61-37	17208-17212	cost	
61-38	17212-17213	=	
61-39	17213-17217	0.00	
61-40	17217-17218	.	
61-41	17218-17224	.16.50	
61-42	17225-17229	rows	
61-43	17229-17230	=	
61-44	17230-17234	1000	
61-45	17235-17240	width	
61-46	17240-17241	=	
61-47	17241-17242	0	
61-48	17242-17243	)	
61-49	17244-17245	(	
61-50	17245-17251	actual	
61-51	17252-17256	time	
61-52	17256-17257	=	
61-53	17257-17262	0.092	
61-54	17262-17263	.	
61-55	17263-17269	.0.092	
61-56	17270-17274	rows	
61-57	17274-17275	=	
61-58	17275-17276	1	
61-59	17277-17282	loops	
61-60	17282-17283	=	
61-61	17283-17284	1	
61-62	17284-17285	)	

#Text=Index Cond: (data @> '{"publisher": "XlekfkLOtL"}'::jsonb) Planning Time: 0.090 ms Execution Time: 0.523 ms The queries can be multi-level as well:
62-1	17286-17291	Index	
62-2	17292-17296	Cond	
62-3	17296-17297	:	
62-4	17298-17299	(	
62-5	17299-17303	data	
62-6	17304-17305	@	
62-7	17305-17306	>	
62-8	17307-17308	'	
62-9	17308-17309	{	
62-10	17309-17310	"	
62-11	17310-17319	publisher	
62-12	17319-17320	"	
62-13	17320-17321	:	
62-14	17322-17323	"	
62-15	17323-17333	XlekfkLOtL	
62-16	17333-17334	"	
62-17	17334-17335	}	
62-18	17335-17336	'	
62-19	17336-17337	:	
62-20	17337-17338	:	
62-21	17338-17343	jsonb	
62-22	17343-17344	)	
62-23	17345-17353	Planning	
62-24	17354-17358	Time	
62-25	17358-17359	:	
62-26	17360-17365	0.090	
62-27	17366-17368	ms	
62-28	17369-17378	Execution	
62-29	17379-17383	Time	
62-30	17383-17384	:	
62-31	17385-17390	0.523	
62-32	17391-17393	ms	
62-33	17394-17397	The	
62-34	17398-17405	queries	
62-35	17406-17409	can	
62-36	17410-17412	be	
62-37	17413-17424	multi-level	
62-38	17425-17427	as	
62-39	17428-17432	well	
62-40	17432-17433	:	

#Text=demo=# select * from books where data @> '{"tags":{"nk455671":{"ik937456":"iv506075"}}}'::jsonb; id | author | isbn | rating | data
63-1	17434-17438	demo	
63-2	17438-17439	=	
63-3	17439-17440	#	
63-4	17441-17447	select	
63-5	17448-17449	*	
63-6	17450-17454	from	
63-7	17455-17460	books	
63-8	17461-17466	where	
63-9	17467-17471	data	
63-10	17472-17473	@	
63-11	17473-17474	>	
63-12	17475-17476	'	
63-13	17476-17477	{	
63-14	17477-17478	"	
63-15	17478-17482	tags	
63-16	17482-17483	"	
63-17	17483-17484	:	
63-18	17484-17485	{	
63-19	17485-17486	"	
63-20	17486-17494	nk455671	
63-21	17494-17495	"	
63-22	17495-17496	:	
63-23	17496-17497	{	
63-24	17497-17498	"	
63-25	17498-17506	ik937456	
63-26	17506-17507	"	
63-27	17507-17508	:	
63-28	17508-17509	"	
63-29	17509-17517	iv506075	
63-30	17517-17518	"	
63-31	17518-17519	}	
63-32	17519-17520	}	
63-33	17520-17521	}	
63-34	17521-17522	'	
63-35	17522-17523	:	
63-36	17523-17524	:	
63-37	17524-17529	jsonb	
63-38	17529-17530	;	
63-39	17531-17533	id	
63-40	17534-17535	|	
63-41	17536-17542	author	
63-42	17543-17544	|	
63-43	17545-17549	isbn	
63-44	17550-17551	|	
63-45	17552-17558	rating	
63-46	17559-17560	|	
63-47	17561-17565	data	

#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------ ------------------
64-1	17566-17567	-	
64-2	17567-17568	-	
64-3	17568-17569	-	
64-4	17569-17570	-	
64-5	17570-17571	-	
64-6	17571-17572	-	
64-7	17572-17573	-	
64-8	17573-17574	-	
64-9	17574-17575	-	
64-10	17575-17576	+	
64-11	17576-17577	-	
64-12	17577-17578	-	
64-13	17578-17579	-	
64-14	17579-17580	-	
64-15	17580-17581	-	
64-16	17581-17582	-	
64-17	17582-17583	-	
64-18	17583-17584	-	
64-19	17584-17585	-	
64-20	17585-17586	-	
64-21	17586-17587	-	
64-22	17587-17588	-	
64-23	17588-17589	-	
64-24	17589-17590	-	
64-25	17590-17591	-	
64-26	17591-17592	-	
64-27	17592-17593	-	
64-28	17593-17594	+	
64-29	17594-17595	-	
64-30	17595-17596	-	
64-31	17596-17597	-	
64-32	17597-17598	-	
64-33	17598-17599	-	
64-34	17599-17600	-	
64-35	17600-17601	-	
64-36	17601-17602	-	
64-37	17602-17603	-	
64-38	17603-17604	-	
64-39	17604-17605	-	
64-40	17605-17606	-	
64-41	17606-17607	+	
64-42	17607-17608	-	
64-43	17608-17609	-	
64-44	17609-17610	-	
64-45	17610-17611	-	
64-46	17611-17612	-	
64-47	17612-17613	-	
64-48	17613-17614	-	
64-49	17614-17615	-	
64-50	17615-17616	+	
64-51	17616-17617	-	
64-52	17617-17618	-	
64-53	17618-17619	-	
64-54	17619-17620	-	
64-55	17620-17621	-	
64-56	17621-17622	-	
64-57	17622-17623	-	
64-58	17623-17624	-	
64-59	17624-17625	-	
64-60	17625-17626	-	
64-61	17626-17627	-	
64-62	17627-17628	-	
64-63	17628-17629	-	
64-64	17629-17630	-	
64-65	17630-17631	-	
64-66	17631-17632	-	
64-67	17632-17633	-	
64-68	17633-17634	-	
64-69	17634-17635	-	
64-70	17635-17636	-	
64-71	17636-17637	-	
64-72	17637-17638	-	
64-73	17638-17639	-	
64-74	17639-17640	-	
64-75	17640-17641	-	
64-76	17641-17642	-	
64-77	17642-17643	-	
64-78	17643-17644	-	
64-79	17644-17645	-	
64-80	17645-17646	-	
64-81	17646-17647	-	
64-82	17647-17648	-	
64-83	17648-17649	-	
64-84	17649-17650	-	
64-85	17650-17651	-	
64-86	17651-17652	-	
64-87	17652-17653	-	
64-88	17653-17654	-	
64-89	17654-17655	-	
64-90	17655-17656	-	
64-91	17656-17657	-	
64-92	17657-17658	-	
64-93	17658-17659	-	
64-94	17659-17660	-	
64-95	17660-17661	-	
64-96	17661-17662	-	
64-97	17662-17663	-	
64-98	17663-17664	-	
64-99	17664-17665	-	
64-100	17665-17666	-	
64-101	17666-17667	-	
64-102	17667-17668	-	
64-103	17668-17669	-	
64-104	17669-17670	-	
64-105	17670-17671	-	
64-106	17671-17672	-	
64-107	17672-17673	-	
64-108	17673-17674	-	
64-109	17674-17675	-	
64-110	17675-17676	-	
64-111	17676-17677	-	
64-112	17677-17678	-	
64-113	17678-17679	-	
64-114	17679-17680	-	
64-115	17680-17681	-	
64-116	17681-17682	-	
64-117	17682-17683	-	
64-118	17683-17684	-	
64-119	17684-17685	-	
64-120	17685-17686	-	
64-121	17686-17687	-	
64-122	17687-17688	-	
64-123	17688-17689	-	
64-124	17689-17690	-	
64-125	17690-17691	-	
64-126	17691-17692	-	
64-127	17692-17693	-	
64-128	17693-17694	-	
64-129	17694-17695	-	
64-130	17695-17696	-	
64-131	17696-17697	-	
64-132	17697-17698	-	
64-133	17698-17699	-	
64-134	17699-17700	-	
64-135	17700-17701	-	
64-136	17701-17702	-	
64-137	17702-17703	-	
64-138	17703-17704	-	
64-139	17704-17705	-	
64-140	17705-17706	-	
64-141	17706-17707	-	
64-142	17707-17708	-	
64-143	17708-17709	-	
64-144	17709-17710	-	
64-145	17710-17711	-	
64-146	17711-17712	-	
64-147	17712-17713	-	
64-148	17713-17714	-	
64-149	17714-17715	-	
64-150	17715-17716	-	
64-151	17716-17717	-	
64-152	17717-17718	-	
64-153	17718-17719	-	
64-154	17719-17720	-	
64-155	17720-17721	-	
64-156	17721-17722	-	
64-157	17722-17723	-	
64-158	17723-17724	-	
64-159	17724-17725	-	
64-160	17725-17726	-	
64-161	17726-17727	-	
64-162	17727-17728	-	
64-163	17728-17729	-	
64-164	17729-17730	-	
64-165	17730-17731	-	
64-166	17731-17732	-	
64-167	17732-17733	-	
64-168	17733-17734	-	
64-169	17734-17735	-	
64-170	17735-17736	-	
64-171	17736-17737	-	
64-172	17737-17738	-	
64-173	17738-17739	-	
64-174	17739-17740	-	
64-175	17740-17741	-	
64-176	17741-17742	-	
64-177	17742-17743	-	
64-178	17743-17744	-	
64-179	17744-17745	-	
64-180	17745-17746	-	
64-181	17746-17747	-	
64-182	17747-17748	-	
64-183	17748-17749	-	
64-184	17749-17750	-	
64-185	17750-17751	-	
64-186	17751-17752	-	
64-187	17752-17753	-	
64-188	17753-17754	-	
64-189	17754-17755	-	
64-190	17755-17756	-	
64-191	17756-17757	-	
64-192	17757-17758	-	
64-193	17758-17759	-	
64-194	17759-17760	-	
64-195	17760-17761	-	
64-196	17761-17762	-	
64-197	17762-17763	-	
64-198	17763-17764	-	
64-199	17764-17765	-	
64-200	17765-17766	-	
64-201	17767-17768	-	
64-202	17768-17769	-	
64-203	17769-17770	-	
64-204	17770-17771	-	
64-205	17771-17772	-	
64-206	17772-17773	-	
64-207	17773-17774	-	
64-208	17774-17775	-	
64-209	17775-17776	-	
64-210	17776-17777	-	
64-211	17777-17778	-	
64-212	17778-17779	-	
64-213	17779-17780	-	
64-214	17780-17781	-	
64-215	17781-17782	-	
64-216	17782-17783	-	
64-217	17783-17784	-	
64-218	17784-17785	-	

#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", " criticrating": 4} (1 row) GIN Index “pathops” Operator Class GIN also supports a “pathops” option to reduce the size of the GIN index. When you use the pathops option, the only operator support is the “@>” so you need to be careful with your queries. From the docs:
65-1	17786-17793	1000005	
65-2	17794-17795	|	
65-3	17796-17811	XEI7xShT8bPu6H7	
65-4	17812-17813	|	
65-5	17814-17824	2kD5XJDZUF	
65-6	17825-17826	|	
65-7	17827-17828	0	
65-8	17829-17830	|	
65-9	17831-17832	{	
65-10	17832-17833	"	
65-11	17833-17837	tags	
65-12	17837-17838	"	
65-13	17838-17839	:	
65-14	17840-17841	{	
65-15	17841-17842	"	
65-16	17842-17850	nk455671	
65-17	17850-17851	"	
65-18	17851-17852	:	
65-19	17853-17854	{	
65-20	17854-17855	"	
65-21	17855-17863	ik937456	
65-22	17863-17864	"	
65-23	17864-17865	:	
65-24	17866-17867	"	
65-25	17867-17875	iv506075	
65-26	17875-17876	"	
65-27	17876-17877	}	
65-28	17877-17878	}	
65-29	17878-17879	,	
65-30	17880-17881	"	
65-31	17881-17888	braille	
65-32	17888-17889	"	
65-33	17889-17890	:	
65-34	17891-17895	true	
65-35	17895-17896	,	
65-36	17897-17898	"	
65-37	17898-17906	keywords	
65-38	17906-17907	"	
65-39	17907-17908	:	
65-40	17909-17910	[	
65-41	17910-17911	"	
65-42	17911-17914	abc	
65-43	17914-17915	"	
65-44	17915-17916	,	
65-45	17917-17918	"	
65-46	17918-17921	kef	
65-47	17921-17922	"	
65-48	17922-17923	,	
65-49	17924-17925	"	
65-50	17925-17928	keh	
65-51	17928-17929	"	
65-52	17929-17930	]	
65-53	17930-17931	,	
65-54	17932-17933	"	
65-55	17933-17942	hardcover	
65-56	17942-17943	"	
65-57	17943-17944	:	
65-58	17945-17950	false	
65-59	17950-17951	,	
65-60	17952-17953	"	
65-61	17953-17962	publisher	
65-62	17962-17963	"	
65-63	17963-17964	:	
65-64	17965-17966	"	
65-65	17966-17976	zSfZIAjGGs	
65-66	17976-17977	"	
65-67	17977-17978	,	
65-68	17979-17980	"	
65-69	17981-17993	criticrating	
65-70	17993-17994	"	
65-71	17994-17995	:	
65-72	17996-17997	4	
65-73	17997-17998	}	
65-74	17999-18000	(	
65-75	18000-18001	1	
65-76	18002-18005	row	
65-77	18005-18006	)	
65-78	18007-18010	GIN	
65-79	18010-18011	 	
65-80	18011-18016	Index	
65-81	18017-18018	“	
65-82	18018-18025	pathops	
65-83	18025-18026	”	
65-84	18027-18035	Operator	
65-85	18036-18041	Class	
65-86	18042-18045	GIN	
65-87	18046-18050	also	
65-88	18051-18059	supports	
65-89	18060-18061	a	
65-90	18062-18063	“	
65-91	18063-18070	pathops	
65-92	18070-18071	”	
65-93	18072-18078	option	
65-94	18079-18081	to	
65-95	18082-18088	reduce	
65-96	18089-18092	the	
65-97	18093-18097	size	
65-98	18098-18100	of	
65-99	18101-18104	the	
65-100	18105-18108	GIN	
65-101	18109-18114	index	
65-102	18114-18115	.	
65-103	18116-18120	When	
65-104	18121-18124	you	
65-105	18125-18128	use	
65-106	18129-18132	the	
65-107	18133-18140	pathops	
65-108	18141-18147	option	
65-109	18147-18148	,	
65-110	18149-18152	the	
65-111	18153-18157	only	
65-112	18158-18166	operator	
65-113	18167-18174	support	
65-114	18175-18177	is	
65-115	18178-18181	the	
65-116	18182-18183	“	
65-117	18183-18184	@	
65-118	18184-18185	>	
65-119	18185-18186	”	
65-120	18187-18189	so	
65-121	18190-18193	you	
65-122	18194-18198	need	
65-123	18199-18201	to	
65-124	18202-18204	be	
65-125	18205-18212	careful	
65-126	18213-18217	with	
65-127	18218-18222	your	
65-128	18223-18230	queries	
65-129	18230-18231	.	
65-130	18232-18236	From	
65-131	18237-18240	the	
65-132	18241-18245	docs	
65-133	18245-18246	:	

#Text=“The technical difference between a jsonb_ops and a jsonb_path_ops GIN index is that the former creates independent index items for each key and value in the data, while the latter creates index items only for each value in the data” You can create a GIN pathops index as follows: CREATE INDEX dataginpathops ON books USING gin (data jsonb_path_ops); On my small dataset of 1 million books, you can see that the pathops GIN index is smaller – you should test with your dataset to understand the savings:
66-1	18247-18248	“	
66-2	18248-18251	The	
66-3	18252-18261	technical	
66-4	18262-18272	difference	
66-5	18273-18280	between	
66-6	18281-18282	a	
66-7	18283-18292	jsonb_ops	
66-8	18293-18296	and	
66-9	18297-18298	a	
66-10	18299-18313	jsonb_path_ops	
66-11	18314-18317	GIN	
66-12	18318-18323	index	
66-13	18324-18326	is	
66-14	18327-18331	that	
66-15	18332-18335	the	
66-16	18336-18342	former	
66-17	18343-18350	creates	
66-18	18351-18362	independent	
66-19	18363-18368	index	
66-20	18369-18374	items	
66-21	18375-18378	for	
66-22	18379-18383	each	
66-23	18384-18387	key	
66-24	18388-18391	and	
66-25	18392-18397	value	
66-26	18398-18400	in	
66-27	18401-18404	the	
66-28	18405-18409	data	
66-29	18409-18410	,	
66-30	18411-18416	while	
66-31	18417-18420	the	
66-32	18421-18427	latter	
66-33	18428-18435	creates	
66-34	18436-18441	index	
66-35	18442-18447	items	
66-36	18448-18452	only	
66-37	18453-18456	for	
66-38	18457-18461	each	
66-39	18462-18467	value	
66-40	18468-18470	in	
66-41	18471-18474	the	
66-42	18475-18479	data	
66-43	18479-18480	”	
66-44	18481-18484	You	
66-45	18485-18488	can	
66-46	18489-18495	create	
66-47	18496-18497	a	
66-48	18498-18501	GIN	
66-49	18502-18509	pathops	
66-50	18510-18515	index	
66-51	18516-18518	as	
66-52	18519-18526	follows	
66-53	18526-18527	:	
66-54	18528-18534	CREATE	
66-55	18535-18540	INDEX	
66-56	18541-18555	dataginpathops	
66-57	18556-18558	ON	
66-58	18559-18564	books	
66-59	18565-18570	USING	
66-60	18571-18574	gin	
66-61	18575-18576	(	
66-62	18576-18580	data	
66-63	18581-18595	jsonb_path_ops	
66-64	18595-18596	)	
66-65	18596-18597	;	
66-66	18598-18600	On	
66-67	18601-18603	my	
66-68	18604-18609	small	
66-69	18610-18617	dataset	
66-70	18618-18620	of	
66-71	18621-18622	1	
66-72	18622-18623	 	
66-73	18623-18630	million	
66-74	18631-18636	books	
66-75	18636-18637	,	
66-76	18638-18641	you	
66-77	18642-18645	can	
66-78	18646-18649	see	
66-79	18650-18654	that	
66-80	18655-18658	the	
66-81	18659-18666	pathops	
66-82	18667-18670	GIN	
66-83	18671-18676	index	
66-84	18677-18679	is	
66-85	18680-18687	smaller	
66-86	18688-18689	–	
66-87	18690-18693	you	
66-88	18694-18700	should	
66-89	18701-18705	test	
66-90	18706-18710	with	
66-91	18711-18715	your	
66-92	18716-18723	dataset	
66-93	18724-18726	to	
66-94	18727-18737	understand	
66-95	18738-18741	the	
66-96	18742-18749	savings	
66-97	18749-18750	:	

#Text=public | dataginpathops | index | sgpostgres | books | 67 MB | public | datatagsgin | index | sgpostgres | books | 84 MB | Let’s rerun our query from before with the pathops index:
67-1	18751-18757	public	
67-2	18758-18759	|	
67-3	18760-18774	dataginpathops	
67-4	18775-18776	|	
67-5	18777-18782	index	
67-6	18783-18784	|	
67-7	18785-18795	sgpostgres	
67-8	18796-18797	|	
67-9	18798-18803	books	
67-10	18804-18805	|	
67-11	18806-18808	67	
67-12	18809-18811	MB	
67-13	18812-18813	|	
67-14	18814-18820	public	
67-15	18821-18822	|	
67-16	18823-18834	datatagsgin	
67-17	18835-18836	|	
67-18	18837-18842	index	
67-19	18843-18844	|	
67-20	18845-18855	sgpostgres	
67-21	18856-18857	|	
67-22	18858-18863	books	
67-23	18864-18865	|	
67-24	18866-18868	84	
67-25	18869-18871	MB	
67-26	18872-18873	|	
67-27	18874-18877	Let	
67-28	18877-18878	’	
67-29	18878-18879	s	
67-30	18880-18885	rerun	
67-31	18886-18889	our	
67-32	18890-18895	query	
67-33	18896-18900	from	
67-34	18901-18907	before	
67-35	18908-18912	with	
67-36	18913-18916	the	
67-37	18917-18924	pathops	
67-38	18925-18930	index	
67-39	18930-18931	:	

#Text=demo=# select * from books where data @> '{"tags":{"nk455671":{"ik937456":"iv506075"}}}'::jsonb; id | author | isbn | rating | data
68-1	18932-18936	demo	
68-2	18936-18937	=	
68-3	18937-18938	#	
68-4	18939-18945	select	
68-5	18946-18947	*	
68-6	18948-18952	from	
68-7	18953-18958	books	
68-8	18959-18964	where	
68-9	18965-18969	data	
68-10	18970-18971	@	
68-11	18971-18972	>	
68-12	18973-18974	'	
68-13	18974-18975	{	
68-14	18975-18976	"	
68-15	18976-18980	tags	
68-16	18980-18981	"	
68-17	18981-18982	:	
68-18	18982-18983	{	
68-19	18983-18984	"	
68-20	18984-18992	nk455671	
68-21	18992-18993	"	
68-22	18993-18994	:	
68-23	18994-18995	{	
68-24	18995-18996	"	
68-25	18996-19004	ik937456	
68-26	19004-19005	"	
68-27	19005-19006	:	
68-28	19006-19007	"	
68-29	19007-19015	iv506075	
68-30	19015-19016	"	
68-31	19016-19017	}	
68-32	19017-19018	}	
68-33	19018-19019	}	
68-34	19019-19020	'	
68-35	19020-19021	:	
68-36	19021-19022	:	
68-37	19022-19027	jsonb	
68-38	19027-19028	;	
68-39	19029-19031	id	
68-40	19032-19033	|	
68-41	19034-19040	author	
68-42	19041-19042	|	
68-43	19043-19047	isbn	
68-44	19048-19049	|	
68-45	19050-19056	rating	
68-46	19057-19058	|	
68-47	19059-19063	data	

#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------ ------------------
69-1	19064-19065	-	
69-2	19065-19066	-	
69-3	19066-19067	-	
69-4	19067-19068	-	
69-5	19068-19069	-	
69-6	19069-19070	-	
69-7	19070-19071	-	
69-8	19071-19072	-	
69-9	19072-19073	-	
69-10	19073-19074	+	
69-11	19074-19075	-	
69-12	19075-19076	-	
69-13	19076-19077	-	
69-14	19077-19078	-	
69-15	19078-19079	-	
69-16	19079-19080	-	
69-17	19080-19081	-	
69-18	19081-19082	-	
69-19	19082-19083	-	
69-20	19083-19084	-	
69-21	19084-19085	-	
69-22	19085-19086	-	
69-23	19086-19087	-	
69-24	19087-19088	-	
69-25	19088-19089	-	
69-26	19089-19090	-	
69-27	19090-19091	-	
69-28	19091-19092	+	
69-29	19092-19093	-	
69-30	19093-19094	-	
69-31	19094-19095	-	
69-32	19095-19096	-	
69-33	19096-19097	-	
69-34	19097-19098	-	
69-35	19098-19099	-	
69-36	19099-19100	-	
69-37	19100-19101	-	
69-38	19101-19102	-	
69-39	19102-19103	-	
69-40	19103-19104	-	
69-41	19104-19105	+	
69-42	19105-19106	-	
69-43	19106-19107	-	
69-44	19107-19108	-	
69-45	19108-19109	-	
69-46	19109-19110	-	
69-47	19110-19111	-	
69-48	19111-19112	-	
69-49	19112-19113	-	
69-50	19113-19114	+	
69-51	19114-19115	-	
69-52	19115-19116	-	
69-53	19116-19117	-	
69-54	19117-19118	-	
69-55	19118-19119	-	
69-56	19119-19120	-	
69-57	19120-19121	-	
69-58	19121-19122	-	
69-59	19122-19123	-	
69-60	19123-19124	-	
69-61	19124-19125	-	
69-62	19125-19126	-	
69-63	19126-19127	-	
69-64	19127-19128	-	
69-65	19128-19129	-	
69-66	19129-19130	-	
69-67	19130-19131	-	
69-68	19131-19132	-	
69-69	19132-19133	-	
69-70	19133-19134	-	
69-71	19134-19135	-	
69-72	19135-19136	-	
69-73	19136-19137	-	
69-74	19137-19138	-	
69-75	19138-19139	-	
69-76	19139-19140	-	
69-77	19140-19141	-	
69-78	19141-19142	-	
69-79	19142-19143	-	
69-80	19143-19144	-	
69-81	19144-19145	-	
69-82	19145-19146	-	
69-83	19146-19147	-	
69-84	19147-19148	-	
69-85	19148-19149	-	
69-86	19149-19150	-	
69-87	19150-19151	-	
69-88	19151-19152	-	
69-89	19152-19153	-	
69-90	19153-19154	-	
69-91	19154-19155	-	
69-92	19155-19156	-	
69-93	19156-19157	-	
69-94	19157-19158	-	
69-95	19158-19159	-	
69-96	19159-19160	-	
69-97	19160-19161	-	
69-98	19161-19162	-	
69-99	19162-19163	-	
69-100	19163-19164	-	
69-101	19164-19165	-	
69-102	19165-19166	-	
69-103	19166-19167	-	
69-104	19167-19168	-	
69-105	19168-19169	-	
69-106	19169-19170	-	
69-107	19170-19171	-	
69-108	19171-19172	-	
69-109	19172-19173	-	
69-110	19173-19174	-	
69-111	19174-19175	-	
69-112	19175-19176	-	
69-113	19176-19177	-	
69-114	19177-19178	-	
69-115	19178-19179	-	
69-116	19179-19180	-	
69-117	19180-19181	-	
69-118	19181-19182	-	
69-119	19182-19183	-	
69-120	19183-19184	-	
69-121	19184-19185	-	
69-122	19185-19186	-	
69-123	19186-19187	-	
69-124	19187-19188	-	
69-125	19188-19189	-	
69-126	19189-19190	-	
69-127	19190-19191	-	
69-128	19191-19192	-	
69-129	19192-19193	-	
69-130	19193-19194	-	
69-131	19194-19195	-	
69-132	19195-19196	-	
69-133	19196-19197	-	
69-134	19197-19198	-	
69-135	19198-19199	-	
69-136	19199-19200	-	
69-137	19200-19201	-	
69-138	19201-19202	-	
69-139	19202-19203	-	
69-140	19203-19204	-	
69-141	19204-19205	-	
69-142	19205-19206	-	
69-143	19206-19207	-	
69-144	19207-19208	-	
69-145	19208-19209	-	
69-146	19209-19210	-	
69-147	19210-19211	-	
69-148	19211-19212	-	
69-149	19212-19213	-	
69-150	19213-19214	-	
69-151	19214-19215	-	
69-152	19215-19216	-	
69-153	19216-19217	-	
69-154	19217-19218	-	
69-155	19218-19219	-	
69-156	19219-19220	-	
69-157	19220-19221	-	
69-158	19221-19222	-	
69-159	19222-19223	-	
69-160	19223-19224	-	
69-161	19224-19225	-	
69-162	19225-19226	-	
69-163	19226-19227	-	
69-164	19227-19228	-	
69-165	19228-19229	-	
69-166	19229-19230	-	
69-167	19230-19231	-	
69-168	19231-19232	-	
69-169	19232-19233	-	
69-170	19233-19234	-	
69-171	19234-19235	-	
69-172	19235-19236	-	
69-173	19236-19237	-	
69-174	19237-19238	-	
69-175	19238-19239	-	
69-176	19239-19240	-	
69-177	19240-19241	-	
69-178	19241-19242	-	
69-179	19242-19243	-	
69-180	19243-19244	-	
69-181	19244-19245	-	
69-182	19245-19246	-	
69-183	19246-19247	-	
69-184	19247-19248	-	
69-185	19248-19249	-	
69-186	19249-19250	-	
69-187	19250-19251	-	
69-188	19251-19252	-	
69-189	19252-19253	-	
69-190	19253-19254	-	
69-191	19254-19255	-	
69-192	19255-19256	-	
69-193	19256-19257	-	
69-194	19257-19258	-	
69-195	19258-19259	-	
69-196	19259-19260	-	
69-197	19260-19261	-	
69-198	19261-19262	-	
69-199	19262-19263	-	
69-200	19263-19264	-	
69-201	19265-19266	-	
69-202	19266-19267	-	
69-203	19267-19268	-	
69-204	19268-19269	-	
69-205	19269-19270	-	
69-206	19270-19271	-	
69-207	19271-19272	-	
69-208	19272-19273	-	
69-209	19273-19274	-	
69-210	19274-19275	-	
69-211	19275-19276	-	
69-212	19276-19277	-	
69-213	19277-19278	-	
69-214	19278-19279	-	
69-215	19279-19280	-	
69-216	19280-19281	-	
69-217	19281-19282	-	
69-218	19282-19283	-	

#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", " criticrating": 4} (1 row) demo=# explain select * from books where data @> '{"tags":{"nk455671":{"ik937456":"iv506075"}}}'::jsonb;
70-1	19284-19291	1000005	
70-2	19292-19293	|	
70-3	19294-19309	XEI7xShT8bPu6H7	
70-4	19310-19311	|	
70-5	19312-19322	2kD5XJDZUF	
70-6	19323-19324	|	
70-7	19325-19326	0	
70-8	19327-19328	|	
70-9	19329-19330	{	
70-10	19330-19331	"	
70-11	19331-19335	tags	
70-12	19335-19336	"	
70-13	19336-19337	:	
70-14	19338-19339	{	
70-15	19339-19340	"	
70-16	19340-19348	nk455671	
70-17	19348-19349	"	
70-18	19349-19350	:	
70-19	19351-19352	{	
70-20	19352-19353	"	
70-21	19353-19361	ik937456	
70-22	19361-19362	"	
70-23	19362-19363	:	
70-24	19364-19365	"	
70-25	19365-19373	iv506075	
70-26	19373-19374	"	
70-27	19374-19375	}	
70-28	19375-19376	}	
70-29	19376-19377	,	
70-30	19378-19379	"	
70-31	19379-19386	braille	
70-32	19386-19387	"	
70-33	19387-19388	:	
70-34	19389-19393	true	
70-35	19393-19394	,	
70-36	19395-19396	"	
70-37	19396-19404	keywords	
70-38	19404-19405	"	
70-39	19405-19406	:	
70-40	19407-19408	[	
70-41	19408-19409	"	
70-42	19409-19412	abc	
70-43	19412-19413	"	
70-44	19413-19414	,	
70-45	19415-19416	"	
70-46	19416-19419	kef	
70-47	19419-19420	"	
70-48	19420-19421	,	
70-49	19422-19423	"	
70-50	19423-19426	keh	
70-51	19426-19427	"	
70-52	19427-19428	]	
70-53	19428-19429	,	
70-54	19430-19431	"	
70-55	19431-19440	hardcover	
70-56	19440-19441	"	
70-57	19441-19442	:	
70-58	19443-19448	false	
70-59	19448-19449	,	
70-60	19450-19451	"	
70-61	19451-19460	publisher	
70-62	19460-19461	"	
70-63	19461-19462	:	
70-64	19463-19464	"	
70-65	19464-19474	zSfZIAjGGs	
70-66	19474-19475	"	
70-67	19475-19476	,	
70-68	19477-19478	"	
70-69	19479-19491	criticrating	
70-70	19491-19492	"	
70-71	19492-19493	:	
70-72	19494-19495	4	
70-73	19495-19496	}	
70-74	19497-19498	(	
70-75	19498-19499	1	
70-76	19500-19503	row	
70-77	19503-19504	)	
70-78	19505-19509	demo	
70-79	19509-19510	=	
70-80	19510-19511	#	
70-81	19512-19519	explain	
70-82	19520-19526	select	
70-83	19527-19528	*	
70-84	19529-19533	from	
70-85	19534-19539	books	
70-86	19540-19545	where	
70-87	19546-19550	data	
70-88	19551-19552	@	
70-89	19552-19553	>	
70-90	19554-19555	'	
70-91	19555-19556	{	
70-92	19556-19557	"	
70-93	19557-19561	tags	
70-94	19561-19562	"	
70-95	19562-19563	:	
70-96	19563-19564	{	
70-97	19564-19565	"	
70-98	19565-19573	nk455671	
70-99	19573-19574	"	
70-100	19574-19575	:	
70-101	19575-19576	{	
70-102	19576-19577	"	
70-103	19577-19585	ik937456	
70-104	19585-19586	"	
70-105	19586-19587	:	
70-106	19587-19588	"	
70-107	19588-19596	iv506075	
70-108	19596-19597	"	
70-109	19597-19598	}	
70-110	19598-19599	}	
70-111	19599-19600	}	
70-112	19600-19601	'	
70-113	19601-19602	:	
70-114	19602-19603	:	
70-115	19603-19608	jsonb	
70-116	19608-19609	;	

#Text=QUERY PLAN -----------------------------------------------------------------------------------------
71-1	19610-19615	QUERY	
71-2	19616-19620	PLAN	
71-3	19621-19622	-	
71-4	19622-19623	-	
71-5	19623-19624	-	
71-6	19624-19625	-	
71-7	19625-19626	-	
71-8	19626-19627	-	
71-9	19627-19628	-	
71-10	19628-19629	-	
71-11	19629-19630	-	
71-12	19630-19631	-	
71-13	19631-19632	-	
71-14	19632-19633	-	
71-15	19633-19634	-	
71-16	19634-19635	-	
71-17	19635-19636	-	
71-18	19636-19637	-	
71-19	19637-19638	-	
71-20	19638-19639	-	
71-21	19639-19640	-	
71-22	19640-19641	-	
71-23	19641-19642	-	
71-24	19642-19643	-	
71-25	19643-19644	-	
71-26	19644-19645	-	
71-27	19645-19646	-	
71-28	19646-19647	-	
71-29	19647-19648	-	
71-30	19648-19649	-	
71-31	19649-19650	-	
71-32	19650-19651	-	
71-33	19651-19652	-	
71-34	19652-19653	-	
71-35	19653-19654	-	
71-36	19654-19655	-	
71-37	19655-19656	-	
71-38	19656-19657	-	
71-39	19657-19658	-	
71-40	19658-19659	-	
71-41	19659-19660	-	
71-42	19660-19661	-	
71-43	19661-19662	-	
71-44	19662-19663	-	
71-45	19663-19664	-	
71-46	19664-19665	-	
71-47	19665-19666	-	
71-48	19666-19667	-	
71-49	19667-19668	-	
71-50	19668-19669	-	
71-51	19669-19670	-	
71-52	19670-19671	-	
71-53	19671-19672	-	
71-54	19672-19673	-	
71-55	19673-19674	-	
71-56	19674-19675	-	
71-57	19675-19676	-	
71-58	19676-19677	-	
71-59	19677-19678	-	
71-60	19678-19679	-	
71-61	19679-19680	-	
71-62	19680-19681	-	
71-63	19681-19682	-	
71-64	19682-19683	-	
71-65	19683-19684	-	
71-66	19684-19685	-	
71-67	19685-19686	-	
71-68	19686-19687	-	
71-69	19687-19688	-	
71-70	19688-19689	-	
71-71	19689-19690	-	
71-72	19690-19691	-	
71-73	19691-19692	-	
71-74	19692-19693	-	
71-75	19693-19694	-	
71-76	19694-19695	-	
71-77	19695-19696	-	
71-78	19696-19697	-	
71-79	19697-19698	-	
71-80	19698-19699	-	
71-81	19699-19700	-	
71-82	19700-19701	-	
71-83	19701-19702	-	
71-84	19702-19703	-	
71-85	19703-19704	-	
71-86	19704-19705	-	
71-87	19705-19706	-	
71-88	19706-19707	-	
71-89	19707-19708	-	
71-90	19708-19709	-	
71-91	19709-19710	-	

#Text=Bitmap Heap Scan on books (cost=12.75..1005.25 rows=1000 width=158) Recheck Cond: (data @> '{"tags": {"nk455671": {"ik937456": "iv506075"}}}'::jsonb)
72-1	19711-19717	Bitmap	
72-2	19718-19722	Heap	
72-3	19723-19727	Scan	
72-4	19728-19730	on	
72-5	19731-19736	books	
72-6	19737-19738	(	
72-7	19738-19742	cost	
72-8	19742-19743	=	
72-9	19743-19748	12.75	
72-10	19748-19749	.	
72-11	19749-19757	.1005.25	
72-12	19758-19762	rows	
72-13	19762-19763	=	
72-14	19763-19767	1000	
72-15	19768-19773	width	
72-16	19773-19774	=	
72-17	19774-19777	158	
72-18	19777-19778	)	
72-19	19779-19786	Recheck	
72-20	19787-19791	Cond	
72-21	19791-19792	:	
72-22	19793-19794	(	
72-23	19794-19798	data	
72-24	19799-19800	@	
72-25	19800-19801	>	
72-26	19802-19803	'	
72-27	19803-19804	{	
72-28	19804-19805	"	
72-29	19805-19809	tags	
72-30	19809-19810	"	
72-31	19810-19811	:	
72-32	19812-19813	{	
72-33	19813-19814	"	
72-34	19814-19822	nk455671	
72-35	19822-19823	"	
72-36	19823-19824	:	
72-37	19825-19826	{	
72-38	19826-19827	"	
72-39	19827-19835	ik937456	
72-40	19835-19836	"	
72-41	19836-19837	:	
72-42	19838-19839	"	
72-43	19839-19847	iv506075	
72-44	19847-19848	"	
72-45	19848-19849	}	
72-46	19849-19850	}	
72-47	19850-19851	}	
72-48	19851-19852	'	
72-49	19852-19853	:	
72-50	19853-19854	:	
72-51	19854-19859	jsonb	
72-52	19859-19860	)	

#Text=-> Bitmap Index Scan on dataginpathops (cost=0.00..12.50 rows=1000 width=0) Index Cond: (data @> '{"tags": {"nk455671": {"ik937456": "iv506075"}}}'::jsonb) (4 rows)
73-1	19861-19862	-	
73-2	19862-19863	>	
73-3	19864-19870	Bitmap	
73-4	19871-19876	Index	
73-5	19877-19881	Scan	
73-6	19882-19884	on	
73-7	19885-19899	dataginpathops	
73-8	19900-19901	(	
73-9	19901-19905	cost	
73-10	19905-19906	=	
73-11	19906-19910	0.00	
73-12	19910-19911	.	
73-13	19911-19917	.12.50	
73-14	19918-19922	rows	
73-15	19922-19923	=	
73-16	19923-19927	1000	
73-17	19928-19933	width	
73-18	19933-19934	=	
73-19	19934-19935	0	
73-20	19935-19936	)	
73-21	19937-19942	Index	
73-22	19943-19947	Cond	
73-23	19947-19948	:	
73-24	19949-19950	(	
73-25	19950-19954	data	
73-26	19955-19956	@	
73-27	19956-19957	>	
73-28	19958-19959	'	
73-29	19959-19960	{	
73-30	19960-19961	"	
73-31	19961-19965	tags	
73-32	19965-19966	"	
73-33	19966-19967	:	
73-34	19968-19969	{	
73-35	19969-19970	"	
73-36	19970-19978	nk455671	
73-37	19978-19979	"	
73-38	19979-19980	:	
73-39	19981-19982	{	
73-40	19982-19983	"	
73-41	19983-19991	ik937456	
73-42	19991-19992	"	
73-43	19992-19993	:	
73-44	19994-19995	"	
73-45	19995-20003	iv506075	
73-46	20003-20004	"	
73-47	20004-20005	}	
73-48	20005-20006	}	
73-49	20006-20007	}	
73-50	20007-20008	'	
73-51	20008-20009	:	
73-52	20009-20010	:	
73-53	20010-20015	jsonb	
73-54	20015-20016	)	
73-55	20017-20018	(	
73-56	20018-20019	4	
73-57	20020-20024	rows	
73-58	20024-20025	)	

#Text=However, as mentioned above, the “pathops” option does not support all of the scenarios that the default operator class supports. With a “pathops” GIN index, all these queries are not able to leverage the GIN index. To summarize, you have a smaller index but it supports a more limited use case. select * from books where data ? 'tags'; => Sequential scan select * from books where data @> '{"tags" :{}}'; => Sequential scan select * from books where data @> '{"tags" :{"k7888":{}}}' => Sequential scan
74-1	20026-20033	However	
74-2	20033-20034	,	
74-3	20035-20037	as	
74-4	20038-20047	mentioned	
74-5	20048-20053	above	
74-6	20053-20054	,	
74-7	20055-20058	the	
74-8	20059-20060	“	
74-9	20060-20067	pathops	
74-10	20067-20068	”	
74-11	20069-20075	option	
74-12	20076-20080	does	
74-13	20081-20084	not	
74-14	20085-20092	support	
74-15	20093-20096	all	
74-16	20097-20099	of	
74-17	20100-20103	the	
74-18	20104-20113	scenarios	
74-19	20114-20118	that	
74-20	20119-20122	the	
74-21	20123-20130	default	
74-22	20131-20139	operator	
74-23	20140-20145	class	
74-24	20146-20154	supports	
74-25	20154-20155	.	
74-26	20156-20160	With	
74-27	20161-20162	a	
74-28	20163-20164	“	
74-29	20164-20171	pathops	
74-30	20171-20172	”	
74-31	20173-20176	GIN	
74-32	20177-20182	index	
74-33	20182-20183	,	
74-34	20184-20187	all	
74-35	20188-20193	these	
74-36	20194-20201	queries	
74-37	20202-20205	are	
74-38	20206-20209	not	
74-39	20210-20214	able	
74-40	20215-20217	to	
74-41	20218-20226	leverage	
74-42	20227-20230	the	
74-43	20231-20234	GIN	
74-44	20235-20240	index	
74-45	20240-20241	.	
74-46	20242-20244	To	
74-47	20245-20254	summarize	
74-48	20254-20255	,	
74-49	20256-20259	you	
74-50	20260-20264	have	
74-51	20265-20266	a	
74-52	20267-20274	smaller	
74-53	20275-20280	index	
74-54	20281-20284	but	
74-55	20285-20287	it	
74-56	20288-20296	supports	
74-57	20297-20298	a	
74-58	20299-20303	more	
74-59	20304-20311	limited	
74-60	20312-20315	use	
74-61	20316-20320	case	
74-62	20320-20321	.	
74-63	20322-20328	select	
74-64	20329-20330	*	
74-65	20331-20335	from	
74-66	20336-20341	books	
74-67	20342-20347	where	
74-68	20348-20352	data	
74-69	20353-20354	?	
74-70	20355-20356	'	
74-71	20356-20360	tags	
74-72	20360-20361	'	
74-73	20361-20362	;	
74-74	20363-20364	=	
74-75	20364-20365	>	
74-76	20366-20376	Sequential	
74-77	20377-20381	scan	
74-78	20382-20388	select	
74-79	20389-20390	*	
74-80	20391-20395	from	
74-81	20396-20401	books	
74-82	20402-20407	where	
74-83	20408-20412	data	
74-84	20413-20414	@	
74-85	20414-20415	>	
74-86	20416-20417	'	
74-87	20417-20418	{	
74-88	20418-20419	"	
74-89	20419-20423	tags	
74-90	20423-20424	"	
74-91	20425-20426	:	
74-92	20426-20427	{	
74-93	20427-20428	}	
74-94	20428-20429	}	
74-95	20429-20430	'	
74-96	20430-20431	;	
74-97	20432-20433	=	
74-98	20433-20434	>	
74-99	20435-20445	Sequential	
74-100	20446-20450	scan	
74-101	20451-20457	select	
74-102	20458-20459	*	
74-103	20460-20464	from	
74-104	20465-20470	books	
74-105	20471-20476	where	
74-106	20477-20481	data	
74-107	20482-20483	@	
74-108	20483-20484	>	
74-109	20485-20486	'	
74-110	20486-20487	{	
74-111	20487-20488	"	
74-112	20488-20492	tags	
74-113	20492-20493	"	
74-114	20494-20495	:	
74-115	20495-20496	{	
74-116	20496-20497	"	
74-117	20497-20502	k7888	
74-118	20502-20503	"	
74-119	20503-20504	:	
74-120	20504-20505	{	
74-121	20505-20506	}	
74-122	20506-20507	}	
74-123	20507-20508	}	
74-124	20508-20509	'	
74-125	20510-20511	=	
74-126	20511-20512	>	
74-127	20513-20523	Sequential	
74-128	20524-20528	scan	

#Text=B-Tree indexes B-tree indexes are the most common index type in relational databases. However, if you index an entire JSONB column with a B-tree index, the only useful operators are “=”, <, <=, >, >=. Essentially, this can only be used for whole object comparisons, which has a very limited use case.
75-1	20529-20535	B-Tree	
75-2	20536-20543	indexes	
75-3	20544-20550	B-tree	
75-4	20551-20558	indexes	
75-5	20559-20562	are	
75-6	20563-20566	the	
75-7	20567-20571	most	
75-8	20572-20578	common	
75-9	20579-20584	index	
75-10	20585-20589	type	
75-11	20590-20592	in	
75-12	20593-20603	relational	
75-13	20604-20613	databases	
75-14	20613-20614	.	
75-15	20615-20622	However	
75-16	20622-20623	,	
75-17	20624-20626	if	
75-18	20627-20630	you	
75-19	20631-20636	index	
75-20	20637-20639	an	
75-21	20640-20646	entire	
75-22	20647-20652	JSONB	
75-23	20653-20659	column	
75-24	20660-20664	with	
75-25	20665-20666	a	
75-26	20666-20667	 	
75-27	20667-20673	B-tree	
75-28	20674-20679	index	
75-29	20679-20680	,	
75-30	20681-20684	the	
75-31	20685-20689	only	
75-32	20690-20696	useful	
75-33	20697-20706	operators	
75-34	20707-20710	are	
75-35	20711-20712	“	
75-36	20712-20713	=	
75-37	20713-20714	”	
75-38	20714-20715	,	
75-39	20716-20717	<	
75-40	20717-20718	,	
75-41	20719-20720	<	
75-42	20720-20721	=	
75-43	20721-20722	,	
75-44	20723-20724	>	
75-45	20724-20725	,	
75-46	20726-20727	>	
75-47	20727-20728	=	
75-48	20728-20729	.	
75-49	20730-20741	Essentially	
75-50	20741-20742	,	
75-51	20743-20747	this	
75-52	20748-20751	can	
75-53	20752-20756	only	
75-54	20757-20759	be	
75-55	20760-20764	used	
75-56	20765-20768	for	
75-57	20769-20774	whole	
75-58	20775-20781	object	
75-59	20782-20793	comparisons	
75-60	20793-20794	,	
75-61	20795-20800	which	
75-62	20801-20804	has	
75-63	20805-20806	a	
75-64	20807-20811	very	
75-65	20812-20819	limited	
75-66	20820-20823	use	
75-67	20824-20828	case	
75-68	20828-20829	.	

#Text=A more common scenario is to use B-tree “expression indexes”. For a primer, refer here – Indexes on Expressions. B-tree expression indexes can support the common comparison operators ‘=’, ‘<’, ‘>’, ‘>=’, ‘<=’. As you might recall, GIN indexes don’t support these operators. Let’s consider the case when we want to retrieve all books with a data->criticrating > 4. So, you would build a query something like this: demo=# select * from books where data->'criticrating' > 4; ERROR: operator does not exist: jsonb >= integer LINE 1: select * from books where data->'criticrating' >= 4;
76-1	20830-20831	A	
76-2	20832-20836	more	
76-3	20837-20843	common	
76-4	20844-20852	scenario	
76-5	20853-20855	is	
76-6	20856-20858	to	
76-7	20859-20862	use	
76-8	20862-20863	 	
76-9	20863-20869	B-tree	
76-10	20870-20871	“	
76-11	20871-20881	expression	
76-12	20882-20889	indexes	
76-13	20889-20890	”	
76-14	20890-20891	.	
76-15	20892-20895	For	
76-16	20896-20897	a	
76-17	20898-20904	primer	
76-18	20904-20905	,	
76-19	20906-20911	refer	
76-20	20912-20916	here	
76-21	20917-20918	–	
76-22	20919-20926	Indexes	
76-23	20927-20929	on	
76-24	20930-20941	Expressions	
76-25	20941-20942	.	
76-26	20942-20943	 	
76-27	20943-20949	B-tree	
76-28	20950-20960	expression	
76-29	20961-20968	indexes	
76-30	20969-20972	can	
76-31	20973-20980	support	
76-32	20981-20984	the	
76-33	20985-20991	common	
76-34	20992-21002	comparison	
76-35	21003-21012	operators	
76-36	21013-21014	‘	
76-37	21014-21015	=	
76-38	21015-21016	’	
76-39	21016-21017	,	
76-40	21018-21019	‘	
76-41	21019-21020	<	
76-42	21020-21021	’	
76-43	21021-21022	,	
76-44	21023-21024	‘	
76-45	21024-21025	>	
76-46	21025-21026	’	
76-47	21026-21027	,	
76-48	21028-21029	‘	
76-49	21029-21030	>	
76-50	21030-21031	=	
76-51	21031-21032	’	
76-52	21032-21033	,	
76-53	21034-21035	‘	
76-54	21035-21036	<	
76-55	21036-21037	=	
76-56	21037-21038	’	
76-57	21038-21039	.	
76-58	21040-21042	As	
76-59	21043-21046	you	
76-60	21047-21052	might	
76-61	21053-21059	recall	
76-62	21059-21060	,	
76-63	21061-21064	GIN	
76-64	21065-21072	indexes	
76-65	21073-21076	don	
76-66	21076-21077	’	
76-67	21077-21078	t	
76-68	21079-21086	support	
76-69	21087-21092	these	
76-70	21093-21102	operators	
76-71	21102-21103	.	
76-72	21104-21107	Let	
76-73	21107-21108	’	
76-74	21108-21109	s	
76-75	21110-21118	consider	
76-76	21119-21122	the	
76-77	21123-21127	case	
76-78	21128-21132	when	
76-79	21133-21135	we	
76-80	21136-21140	want	
76-81	21141-21143	to	
76-82	21144-21152	retrieve	
76-83	21153-21156	all	
76-84	21157-21162	books	
76-85	21163-21167	with	
76-86	21168-21169	a	
76-87	21170-21174	data	
76-88	21174-21175	-	
76-89	21175-21176	>	
76-90	21176-21188	criticrating	
76-91	21189-21190	>	
76-92	21191-21192	4	
76-93	21192-21193	.	
76-94	21194-21196	So	
76-95	21196-21197	,	
76-96	21198-21201	you	
76-97	21202-21207	would	
76-98	21208-21213	build	
76-99	21214-21215	a	
76-100	21216-21221	query	
76-101	21222-21231	something	
76-102	21232-21236	like	
76-103	21237-21241	this	
76-104	21241-21242	:	
76-105	21243-21247	demo	
76-106	21247-21248	=	
76-107	21248-21249	#	
76-108	21250-21256	select	
76-109	21257-21258	*	
76-110	21259-21263	from	
76-111	21264-21269	books	
76-112	21270-21275	where	
76-113	21276-21280	data	
76-114	21280-21281	-	
76-115	21281-21282	>	
76-116	21282-21283	'	
76-117	21283-21295	criticrating	
76-118	21295-21296	'	
76-119	21297-21298	>	
76-120	21299-21300	4	
76-121	21300-21301	;	
76-122	21302-21307	ERROR	
76-123	21307-21308	:	
76-124	21309-21317	operator	
76-125	21318-21322	does	
76-126	21323-21326	not	
76-127	21327-21332	exist	
76-128	21332-21333	:	
76-129	21334-21339	jsonb	
76-130	21340-21341	>	
76-131	21341-21342	=	
76-132	21343-21350	integer	
76-133	21351-21355	LINE	
76-134	21356-21357	1	
76-135	21357-21358	:	
76-136	21359-21365	select	
76-137	21366-21367	*	
76-138	21368-21372	from	
76-139	21373-21378	books	
76-140	21379-21384	where	
76-141	21385-21389	data	
76-142	21389-21390	-	
76-143	21390-21391	>	
76-144	21391-21392	'	
76-145	21392-21404	criticrating	
76-146	21404-21405	'	
76-147	21406-21407	>	
76-148	21407-21408	=	
76-149	21409-21410	4	
76-150	21410-21411	;	

#Text=HINT: No operator matches the given name and argument types. You might need to add explicit type casts. Well, that doesn’t work since the ‘->’ operator returns a JSONB type. So we need to use something like this: demo=# select * from books where (data->'criticrating')::int4 > 4;
77-1	21412-21416	HINT	
77-2	21416-21417	:	
77-3	21418-21420	No	
77-4	21421-21429	operator	
77-5	21430-21437	matches	
77-6	21438-21441	the	
77-7	21442-21447	given	
77-8	21448-21452	name	
77-9	21453-21456	and	
77-10	21457-21465	argument	
77-11	21466-21471	types	
77-12	21471-21472	.	
77-13	21473-21476	You	
77-14	21477-21482	might	
77-15	21483-21487	need	
77-16	21488-21490	to	
77-17	21491-21494	add	
77-18	21495-21503	explicit	
77-19	21504-21508	type	
77-20	21509-21514	casts	
77-21	21514-21515	.	
77-22	21516-21520	Well	
77-23	21520-21521	,	
77-24	21522-21526	that	
77-25	21527-21532	doesn	
77-26	21532-21533	’	
77-27	21533-21534	t	
77-28	21535-21539	work	
77-29	21540-21545	since	
77-30	21546-21549	the	
77-31	21550-21551	‘	
77-32	21551-21552	-	
77-33	21552-21553	>	
77-34	21553-21554	’	
77-35	21555-21563	operator	
77-36	21564-21571	returns	
77-37	21572-21573	a	
77-38	21573-21574	 	
77-39	21574-21579	JSONB	
77-40	21580-21584	type	
77-41	21584-21585	.	
77-42	21586-21588	So	
77-43	21589-21591	we	
77-44	21592-21596	need	
77-45	21597-21599	to	
77-46	21600-21603	use	
77-47	21604-21613	something	
77-48	21614-21618	like	
77-49	21619-21623	this	
77-50	21623-21624	:	
77-51	21625-21629	demo	
77-52	21629-21630	=	
77-53	21630-21631	#	
77-54	21632-21638	select	
77-55	21639-21640	*	
77-56	21641-21645	from	
77-57	21646-21651	books	
77-58	21652-21657	where	
77-59	21658-21659	(	
77-60	21659-21663	data	
77-61	21663-21664	-	
77-62	21664-21665	>	
77-63	21665-21666	'	
77-64	21666-21678	criticrating	
77-65	21678-21679	'	
77-66	21679-21680	)	
77-67	21680-21681	:	
77-68	21681-21682	:	
77-69	21682-21686	int4	
77-70	21687-21688	>	
77-71	21689-21690	4	
77-72	21690-21691	;	

#Text=If you’re using a version prior to PostgreSQL 11, it gets more ugly. You need to first query as text and then cast it to integer: demo=# select * from books where (data->'criticrating')::int4 > 4; For expression indexes, the index needs to be an exact match with the query expression. So, our index would look something like this:
78-1	21692-21694	If	
78-2	21695-21698	you	
78-3	21698-21699	’	
78-4	21699-21701	re	
78-5	21702-21707	using	
78-6	21708-21709	a	
78-7	21710-21717	version	
78-8	21718-21723	prior	
78-9	21724-21726	to	
78-10	21727-21737	PostgreSQL	
78-11	21738-21740	11	
78-12	21740-21741	,	
78-13	21742-21744	it	
78-14	21745-21749	gets	
78-15	21750-21754	more	
78-16	21755-21759	ugly	
78-17	21759-21760	.	
78-18	21761-21764	You	
78-19	21765-21769	need	
78-20	21770-21772	to	
78-21	21773-21778	first	
78-22	21779-21784	query	
78-23	21785-21787	as	
78-24	21788-21792	text	
78-25	21793-21796	and	
78-26	21797-21801	then	
78-27	21802-21806	cast	
78-28	21807-21809	it	
78-29	21810-21812	to	
78-30	21813-21820	integer	
78-31	21820-21821	:	
78-32	21822-21826	demo	
78-33	21826-21827	=	
78-34	21827-21828	#	
78-35	21829-21835	select	
78-36	21836-21837	*	
78-37	21838-21842	from	
78-38	21843-21848	books	
78-39	21849-21854	where	
78-40	21855-21856	(	
78-41	21856-21860	data	
78-42	21860-21861	-	
78-43	21861-21862	>	
78-44	21862-21863	'	
78-45	21863-21875	criticrating	
78-46	21875-21876	'	
78-47	21876-21877	)	
78-48	21877-21878	:	
78-49	21878-21879	:	
78-50	21879-21883	int4	
78-51	21884-21885	>	
78-52	21886-21887	4	
78-53	21887-21888	;	
78-54	21889-21892	For	
78-55	21893-21903	expression	
78-56	21904-21911	indexes	
78-57	21911-21912	,	
78-58	21913-21916	the	
78-59	21917-21922	index	
78-60	21923-21928	needs	
78-61	21929-21931	to	
78-62	21932-21934	be	
78-63	21935-21937	an	
78-64	21938-21943	exact	
78-65	21944-21949	match	
78-66	21950-21954	with	
78-67	21955-21958	the	
78-68	21959-21964	query	
78-69	21965-21975	expression	
78-70	21975-21976	.	
78-71	21977-21979	So	
78-72	21979-21980	,	
78-73	21981-21984	our	
78-74	21985-21990	index	
78-75	21991-21996	would	
78-76	21997-22001	look	
78-77	22002-22011	something	
78-78	22012-22016	like	
78-79	22017-22021	this	
78-80	22021-22022	:	

#Text=demo=# CREATE INDEX criticrating ON books USING BTREE (((data->'criticrating')::int4)); CREATE INDEX demo=# explain analyze select * from books where (data->'criticrating')::int4 = 3; QUERY PLAN
79-1	22023-22027	demo	
79-2	22027-22028	=	
79-3	22028-22029	#	
79-4	22030-22036	CREATE	
79-5	22037-22042	INDEX	
79-6	22043-22055	criticrating	
79-7	22056-22058	ON	
79-8	22059-22064	books	
79-9	22065-22070	USING	
79-10	22071-22076	BTREE	
79-11	22077-22078	(	
79-12	22078-22079	(	
79-13	22079-22080	(	
79-14	22080-22084	data	
79-15	22084-22085	-	
79-16	22085-22086	>	
79-17	22086-22087	'	
79-18	22087-22099	criticrating	
79-19	22099-22100	'	
79-20	22100-22101	)	
79-21	22101-22102	:	
79-22	22102-22103	:	
79-23	22103-22107	int4	
79-24	22107-22108	)	
79-25	22108-22109	)	
79-26	22109-22110	;	
79-27	22111-22117	CREATE	
79-28	22118-22123	INDEX	
79-29	22124-22128	demo	
79-30	22128-22129	=	
79-31	22129-22130	#	
79-32	22131-22138	explain	
79-33	22139-22146	analyze	
79-34	22147-22153	select	
79-35	22154-22155	*	
79-36	22156-22160	from	
79-37	22161-22166	books	
79-38	22167-22172	where	
79-39	22173-22174	(	
79-40	22174-22178	data	
79-41	22178-22179	-	
79-42	22179-22180	>	
79-43	22180-22181	'	
79-44	22181-22193	criticrating	
79-45	22193-22194	'	
79-46	22194-22195	)	
79-47	22195-22196	:	
79-48	22196-22197	:	
79-49	22197-22201	int4	
79-50	22202-22203	=	
79-51	22204-22205	3	
79-52	22205-22206	;	
79-53	22207-22212	QUERY	
79-54	22213-22217	PLAN	

#Text=---------------------------------------------------------------------------------------------------------------------------------- Index Scan using criticrating on books (cost=0.42..4626.93 rows=5000 width=158) (actual time=0.069..70.221 rows=199883 loops=1)
80-1	22218-22219	-	
80-2	22219-22220	-	
80-3	22220-22221	-	
80-4	22221-22222	-	
80-5	22222-22223	-	
80-6	22223-22224	-	
80-7	22224-22225	-	
80-8	22225-22226	-	
80-9	22226-22227	-	
80-10	22227-22228	-	
80-11	22228-22229	-	
80-12	22229-22230	-	
80-13	22230-22231	-	
80-14	22231-22232	-	
80-15	22232-22233	-	
80-16	22233-22234	-	
80-17	22234-22235	-	
80-18	22235-22236	-	
80-19	22236-22237	-	
80-20	22237-22238	-	
80-21	22238-22239	-	
80-22	22239-22240	-	
80-23	22240-22241	-	
80-24	22241-22242	-	
80-25	22242-22243	-	
80-26	22243-22244	-	
80-27	22244-22245	-	
80-28	22245-22246	-	
80-29	22246-22247	-	
80-30	22247-22248	-	
80-31	22248-22249	-	
80-32	22249-22250	-	
80-33	22250-22251	-	
80-34	22251-22252	-	
80-35	22252-22253	-	
80-36	22253-22254	-	
80-37	22254-22255	-	
80-38	22255-22256	-	
80-39	22256-22257	-	
80-40	22257-22258	-	
80-41	22258-22259	-	
80-42	22259-22260	-	
80-43	22260-22261	-	
80-44	22261-22262	-	
80-45	22262-22263	-	
80-46	22263-22264	-	
80-47	22264-22265	-	
80-48	22265-22266	-	
80-49	22266-22267	-	
80-50	22267-22268	-	
80-51	22268-22269	-	
80-52	22269-22270	-	
80-53	22270-22271	-	
80-54	22271-22272	-	
80-55	22272-22273	-	
80-56	22273-22274	-	
80-57	22274-22275	-	
80-58	22275-22276	-	
80-59	22276-22277	-	
80-60	22277-22278	-	
80-61	22278-22279	-	
80-62	22279-22280	-	
80-63	22280-22281	-	
80-64	22281-22282	-	
80-65	22282-22283	-	
80-66	22283-22284	-	
80-67	22284-22285	-	
80-68	22285-22286	-	
80-69	22286-22287	-	
80-70	22287-22288	-	
80-71	22288-22289	-	
80-72	22289-22290	-	
80-73	22290-22291	-	
80-74	22291-22292	-	
80-75	22292-22293	-	
80-76	22293-22294	-	
80-77	22294-22295	-	
80-78	22295-22296	-	
80-79	22296-22297	-	
80-80	22297-22298	-	
80-81	22298-22299	-	
80-82	22299-22300	-	
80-83	22300-22301	-	
80-84	22301-22302	-	
80-85	22302-22303	-	
80-86	22303-22304	-	
80-87	22304-22305	-	
80-88	22305-22306	-	
80-89	22306-22307	-	
80-90	22307-22308	-	
80-91	22308-22309	-	
80-92	22309-22310	-	
80-93	22310-22311	-	
80-94	22311-22312	-	
80-95	22312-22313	-	
80-96	22313-22314	-	
80-97	22314-22315	-	
80-98	22315-22316	-	
80-99	22316-22317	-	
80-100	22317-22318	-	
80-101	22318-22319	-	
80-102	22319-22320	-	
80-103	22320-22321	-	
80-104	22321-22322	-	
80-105	22322-22323	-	
80-106	22323-22324	-	
80-107	22324-22325	-	
80-108	22325-22326	-	
80-109	22326-22327	-	
80-110	22327-22328	-	
80-111	22328-22329	-	
80-112	22329-22330	-	
80-113	22330-22331	-	
80-114	22331-22332	-	
80-115	22332-22333	-	
80-116	22333-22334	-	
80-117	22334-22335	-	
80-118	22335-22336	-	
80-119	22336-22337	-	
80-120	22337-22338	-	
80-121	22338-22339	-	
80-122	22339-22340	-	
80-123	22340-22341	-	
80-124	22341-22342	-	
80-125	22342-22343	-	
80-126	22343-22344	-	
80-127	22344-22345	-	
80-128	22345-22346	-	
80-129	22346-22347	-	
80-130	22347-22348	-	
80-131	22349-22354	Index	
80-132	22355-22359	Scan	
80-133	22360-22365	using	
80-134	22366-22378	criticrating	
80-135	22379-22381	on	
80-136	22382-22387	books	
80-137	22388-22389	(	
80-138	22389-22393	cost	
80-139	22393-22394	=	
80-140	22394-22398	0.42	
80-141	22398-22399	.	
80-142	22399-22407	.4626.93	
80-143	22408-22412	rows	
80-144	22412-22413	=	
80-145	22413-22417	5000	
80-146	22418-22423	width	
80-147	22423-22424	=	
80-148	22424-22427	158	
80-149	22427-22428	)	
80-150	22429-22430	(	
80-151	22430-22436	actual	
80-152	22437-22441	time	
80-153	22441-22442	=	
80-154	22442-22447	0.069	
80-155	22447-22448	.	
80-156	22448-22455	.70.221	
80-157	22456-22460	rows	
80-158	22460-22461	=	
80-159	22461-22467	199883	
80-160	22468-22473	loops	
80-161	22473-22474	=	
80-162	22474-22475	1	
80-163	22475-22476	)	

#Text=Index Cond: (((data -> 'criticrating'::text))::integer = 3) Planning Time: 0.103 ms Execution Time: 79.019 ms (4 rows) demo=# explain analyze select * from books where (data->'criticrating')::int4 = 3; QUERY PLAN
81-1	22477-22482	Index	
81-2	22483-22487	Cond	
81-3	22487-22488	:	
81-4	22489-22490	(	
81-5	22490-22491	(	
81-6	22491-22492	(	
81-7	22492-22496	data	
81-8	22497-22498	-	
81-9	22498-22499	>	
81-10	22500-22501	'	
81-11	22501-22513	criticrating	
81-12	22513-22514	'	
81-13	22514-22515	:	
81-14	22515-22516	:	
81-15	22516-22520	text	
81-16	22520-22521	)	
81-17	22521-22522	)	
81-18	22522-22523	:	
81-19	22523-22524	:	
81-20	22524-22531	integer	
81-21	22532-22533	=	
81-22	22534-22535	3	
81-23	22535-22536	)	
81-24	22537-22545	Planning	
81-25	22546-22550	Time	
81-26	22550-22551	:	
81-27	22552-22557	0.103	
81-28	22558-22560	ms	
81-29	22561-22570	Execution	
81-30	22571-22575	Time	
81-31	22575-22576	:	
81-32	22577-22583	79.019	
81-33	22584-22586	ms	
81-34	22587-22588	(	
81-35	22588-22589	4	
81-36	22590-22594	rows	
81-37	22594-22595	)	
81-38	22596-22600	demo	
81-39	22600-22601	=	
81-40	22601-22602	#	
81-41	22603-22610	explain	
81-42	22611-22618	analyze	
81-43	22619-22625	select	
81-44	22626-22627	*	
81-45	22628-22632	from	
81-46	22633-22638	books	
81-47	22639-22644	where	
81-48	22645-22646	(	
81-49	22646-22650	data	
81-50	22650-22651	-	
81-51	22651-22652	>	
81-52	22652-22653	'	
81-53	22653-22665	criticrating	
81-54	22665-22666	'	
81-55	22666-22667	)	
81-56	22667-22668	:	
81-57	22668-22669	:	
81-58	22669-22673	int4	
81-59	22674-22675	=	
81-60	22676-22677	3	
81-61	22677-22678	;	
81-62	22679-22684	QUERY	
81-63	22685-22689	PLAN	

#Text=---------------------------------------------------------------------------------------------------------------------------------- Index Scan using criticrating on books (cost=0.42..4626.93 rows=5000 width=158) (actual time=0.069..70.221 rows=199883 loops=1)
82-1	22690-22691	-	
82-2	22691-22692	-	
82-3	22692-22693	-	
82-4	22693-22694	-	
82-5	22694-22695	-	
82-6	22695-22696	-	
82-7	22696-22697	-	
82-8	22697-22698	-	
82-9	22698-22699	-	
82-10	22699-22700	-	
82-11	22700-22701	-	
82-12	22701-22702	-	
82-13	22702-22703	-	
82-14	22703-22704	-	
82-15	22704-22705	-	
82-16	22705-22706	-	
82-17	22706-22707	-	
82-18	22707-22708	-	
82-19	22708-22709	-	
82-20	22709-22710	-	
82-21	22710-22711	-	
82-22	22711-22712	-	
82-23	22712-22713	-	
82-24	22713-22714	-	
82-25	22714-22715	-	
82-26	22715-22716	-	
82-27	22716-22717	-	
82-28	22717-22718	-	
82-29	22718-22719	-	
82-30	22719-22720	-	
82-31	22720-22721	-	
82-32	22721-22722	-	
82-33	22722-22723	-	
82-34	22723-22724	-	
82-35	22724-22725	-	
82-36	22725-22726	-	
82-37	22726-22727	-	
82-38	22727-22728	-	
82-39	22728-22729	-	
82-40	22729-22730	-	
82-41	22730-22731	-	
82-42	22731-22732	-	
82-43	22732-22733	-	
82-44	22733-22734	-	
82-45	22734-22735	-	
82-46	22735-22736	-	
82-47	22736-22737	-	
82-48	22737-22738	-	
82-49	22738-22739	-	
82-50	22739-22740	-	
82-51	22740-22741	-	
82-52	22741-22742	-	
82-53	22742-22743	-	
82-54	22743-22744	-	
82-55	22744-22745	-	
82-56	22745-22746	-	
82-57	22746-22747	-	
82-58	22747-22748	-	
82-59	22748-22749	-	
82-60	22749-22750	-	
82-61	22750-22751	-	
82-62	22751-22752	-	
82-63	22752-22753	-	
82-64	22753-22754	-	
82-65	22754-22755	-	
82-66	22755-22756	-	
82-67	22756-22757	-	
82-68	22757-22758	-	
82-69	22758-22759	-	
82-70	22759-22760	-	
82-71	22760-22761	-	
82-72	22761-22762	-	
82-73	22762-22763	-	
82-74	22763-22764	-	
82-75	22764-22765	-	
82-76	22765-22766	-	
82-77	22766-22767	-	
82-78	22767-22768	-	
82-79	22768-22769	-	
82-80	22769-22770	-	
82-81	22770-22771	-	
82-82	22771-22772	-	
82-83	22772-22773	-	
82-84	22773-22774	-	
82-85	22774-22775	-	
82-86	22775-22776	-	
82-87	22776-22777	-	
82-88	22777-22778	-	
82-89	22778-22779	-	
82-90	22779-22780	-	
82-91	22780-22781	-	
82-92	22781-22782	-	
82-93	22782-22783	-	
82-94	22783-22784	-	
82-95	22784-22785	-	
82-96	22785-22786	-	
82-97	22786-22787	-	
82-98	22787-22788	-	
82-99	22788-22789	-	
82-100	22789-22790	-	
82-101	22790-22791	-	
82-102	22791-22792	-	
82-103	22792-22793	-	
82-104	22793-22794	-	
82-105	22794-22795	-	
82-106	22795-22796	-	
82-107	22796-22797	-	
82-108	22797-22798	-	
82-109	22798-22799	-	
82-110	22799-22800	-	
82-111	22800-22801	-	
82-112	22801-22802	-	
82-113	22802-22803	-	
82-114	22803-22804	-	
82-115	22804-22805	-	
82-116	22805-22806	-	
82-117	22806-22807	-	
82-118	22807-22808	-	
82-119	22808-22809	-	
82-120	22809-22810	-	
82-121	22810-22811	-	
82-122	22811-22812	-	
82-123	22812-22813	-	
82-124	22813-22814	-	
82-125	22814-22815	-	
82-126	22815-22816	-	
82-127	22816-22817	-	
82-128	22817-22818	-	
82-129	22818-22819	-	
82-130	22819-22820	-	
82-131	22821-22826	Index	
82-132	22827-22831	Scan	
82-133	22832-22837	using	
82-134	22838-22850	criticrating	
82-135	22851-22853	on	
82-136	22854-22859	books	
82-137	22860-22861	(	
82-138	22861-22865	cost	
82-139	22865-22866	=	
82-140	22866-22870	0.42	
82-141	22870-22871	.	
82-142	22871-22879	.4626.93	
82-143	22880-22884	rows	
82-144	22884-22885	=	
82-145	22885-22889	5000	
82-146	22890-22895	width	
82-147	22895-22896	=	
82-148	22896-22899	158	
82-149	22899-22900	)	
82-150	22901-22902	(	
82-151	22902-22908	actual	
82-152	22909-22913	time	
82-153	22913-22914	=	
82-154	22914-22919	0.069	
82-155	22919-22920	.	
82-156	22920-22927	.70.221	
82-157	22928-22932	rows	
82-158	22932-22933	=	
82-159	22933-22939	199883	
82-160	22940-22945	loops	
82-161	22945-22946	=	
82-162	22946-22947	1	
82-163	22947-22948	)	

#Text=Index Cond: (((data -> 'criticrating'::text))::integer = 3) Planning Time: 0.103 ms Execution Time: 79.019 ms (4 rows) From above we can see that the BTREE index is being used as expected. Hash Indexes
83-1	22949-22954	Index	
83-2	22955-22959	Cond	
83-3	22959-22960	:	
83-4	22961-22962	(	
83-5	22962-22963	(	
83-6	22963-22964	(	
83-7	22964-22968	data	
83-8	22969-22970	-	
83-9	22970-22971	>	
83-10	22972-22973	'	
83-11	22973-22985	criticrating	
83-12	22985-22986	'	
83-13	22986-22987	:	
83-14	22987-22988	:	
83-15	22988-22992	text	
83-16	22992-22993	)	
83-17	22993-22994	)	
83-18	22994-22995	:	
83-19	22995-22996	:	
83-20	22996-23003	integer	
83-21	23004-23005	=	
83-22	23006-23007	3	
83-23	23007-23008	)	
83-24	23009-23017	Planning	
83-25	23018-23022	Time	
83-26	23022-23023	:	
83-27	23024-23029	0.103	
83-28	23030-23032	ms	
83-29	23033-23042	Execution	
83-30	23043-23047	Time	
83-31	23047-23048	:	
83-32	23049-23055	79.019	
83-33	23056-23058	ms	
83-34	23059-23060	(	
83-35	23060-23061	4	
83-36	23062-23066	rows	
83-37	23066-23067	)	
83-38	23068-23072	From	
83-39	23073-23078	above	
83-40	23079-23081	we	
83-41	23082-23085	can	
83-42	23086-23089	see	
83-43	23090-23094	that	
83-44	23095-23098	the	
83-45	23099-23104	BTREE	
83-46	23105-23110	index	
83-47	23111-23113	is	
83-48	23114-23119	being	
83-49	23120-23124	used	
83-50	23125-23127	as	
83-51	23128-23136	expected	
83-52	23136-23137	.	
83-53	23138-23142	Hash	
83-54	23143-23150	Indexes	

#Text=If you are only interested in the "=" operator, then Hash indexes become interesting. For example, consider the case when we are looking for a particular tag on a book. The element to be indexed can be a top level element or deeply nested. E.g. tags->publisher = XlekfkLOtL CREATE INDEX publisherhash ON books USING HASH ((data->'publisher'));
84-1	23151-23153	If	
84-2	23154-23157	you	
84-3	23158-23161	are	
84-4	23162-23166	only	
84-5	23167-23177	interested	
84-6	23178-23180	in	
84-7	23181-23184	the	
84-8	23185-23186	"	
84-9	23186-23187	=	
84-10	23187-23188	"	
84-11	23189-23197	operator	
84-12	23197-23198	,	
84-13	23199-23203	then	
84-14	23204-23208	Hash	
84-15	23209-23216	indexes	
84-16	23217-23223	become	
84-17	23224-23235	interesting	
84-18	23235-23236	.	
84-19	23237-23240	For	
84-20	23241-23248	example	
84-21	23248-23249	,	
84-22	23250-23258	consider	
84-23	23259-23262	the	
84-24	23263-23267	case	
84-25	23268-23272	when	
84-26	23273-23275	we	
84-27	23276-23279	are	
84-28	23280-23287	looking	
84-29	23288-23291	for	
84-30	23292-23293	a	
84-31	23294-23304	particular	
84-32	23305-23308	tag	
84-33	23309-23311	on	
84-34	23312-23313	a	
84-35	23314-23318	book	
84-36	23318-23319	.	
84-37	23320-23323	The	
84-38	23324-23331	element	
84-39	23332-23334	to	
84-40	23335-23337	be	
84-41	23338-23345	indexed	
84-42	23346-23349	can	
84-43	23350-23352	be	
84-44	23353-23354	a	
84-45	23355-23358	top	
84-46	23359-23364	level	
84-47	23365-23372	element	
84-48	23373-23375	or	
84-49	23376-23382	deeply	
84-50	23383-23389	nested	
84-51	23389-23390	.	
84-52	23391-23394	E.g	
84-53	23394-23395	.	
84-54	23396-23400	tags	
84-55	23400-23401	-	
84-56	23401-23402	>	
84-57	23402-23411	publisher	
84-58	23412-23413	=	
84-59	23414-23424	XlekfkLOtL	
84-60	23425-23431	CREATE	
84-61	23432-23437	INDEX	
84-62	23438-23451	publisherhash	
84-63	23452-23454	ON	
84-64	23455-23460	books	
84-65	23461-23466	USING	
84-66	23467-23471	HASH	
84-67	23472-23473	(	
84-68	23473-23474	(	
84-69	23474-23478	data	
84-70	23478-23479	-	
84-71	23479-23480	>	
84-72	23480-23481	'	
84-73	23481-23490	publisher	
84-74	23490-23491	'	
84-75	23491-23492	)	
84-76	23492-23493	)	
84-77	23493-23494	;	

#Text=Hash indexes also tend to be smaller in size than B-tree or GIN indexes. Of course, this ultimately depends on your data set. demo=# select * from books where data->'publisher' = 'XlekfkLOtL' demo-# ; id | author | isbn | rating | data
85-1	23495-23499	Hash	
85-2	23500-23507	indexes	
85-3	23508-23512	also	
85-4	23513-23517	tend	
85-5	23518-23520	to	
85-6	23521-23523	be	
85-7	23524-23531	smaller	
85-8	23532-23534	in	
85-9	23535-23539	size	
85-10	23540-23544	than	
85-11	23544-23545	 	
85-12	23545-23551	B-tree	
85-13	23552-23554	or	
85-14	23555-23558	GIN	
85-15	23559-23566	indexes	
85-16	23566-23567	.	
85-17	23568-23570	Of	
85-18	23571-23577	course	
85-19	23577-23578	,	
85-20	23579-23583	this	
85-21	23584-23594	ultimately	
85-22	23595-23602	depends	
85-23	23603-23605	on	
85-24	23606-23610	your	
85-25	23611-23615	data	
85-26	23616-23619	set	
85-27	23619-23620	.	
85-28	23621-23625	demo	
85-29	23625-23626	=	
85-30	23626-23627	#	
85-31	23628-23634	select	
85-32	23635-23636	*	
85-33	23637-23641	from	
85-34	23642-23647	books	
85-35	23648-23653	where	
85-36	23654-23658	data	
85-37	23658-23659	-	
85-38	23659-23660	>	
85-39	23660-23661	'	
85-40	23661-23670	publisher	
85-41	23670-23671	'	
85-42	23672-23673	=	
85-43	23674-23675	'	
85-44	23675-23685	XlekfkLOtL	
85-45	23685-23686	'	
85-46	23687-23691	demo	
85-47	23691-23692	-	
85-48	23692-23693	#	
85-49	23694-23695	;	
85-50	23696-23698	id	
85-51	23699-23700	|	
85-52	23701-23707	author	
85-53	23708-23709	|	
85-54	23710-23714	isbn	
85-55	23715-23716	|	
85-56	23717-23723	rating	
85-57	23724-23725	|	
85-58	23726-23730	data	

#Text=-----+-----------------+------------+--------+------------------------------------------------------------------------------------- 346 | uD3QOvHfJdxq2ez | KiAaIRu8QE | 1 | {"tags": {"nk88": {"ik37": "iv161"}}, "publisher": "XlekfkLOtL", "criticrating": 3}
86-1	23731-23732	-	
86-2	23732-23733	-	
86-3	23733-23734	-	
86-4	23734-23735	-	
86-5	23735-23736	-	
86-6	23736-23737	+	
86-7	23737-23738	-	
86-8	23738-23739	-	
86-9	23739-23740	-	
86-10	23740-23741	-	
86-11	23741-23742	-	
86-12	23742-23743	-	
86-13	23743-23744	-	
86-14	23744-23745	-	
86-15	23745-23746	-	
86-16	23746-23747	-	
86-17	23747-23748	-	
86-18	23748-23749	-	
86-19	23749-23750	-	
86-20	23750-23751	-	
86-21	23751-23752	-	
86-22	23752-23753	-	
86-23	23753-23754	-	
86-24	23754-23755	+	
86-25	23755-23756	-	
86-26	23756-23757	-	
86-27	23757-23758	-	
86-28	23758-23759	-	
86-29	23759-23760	-	
86-30	23760-23761	-	
86-31	23761-23762	-	
86-32	23762-23763	-	
86-33	23763-23764	-	
86-34	23764-23765	-	
86-35	23765-23766	-	
86-36	23766-23767	-	
86-37	23767-23768	+	
86-38	23768-23769	-	
86-39	23769-23770	-	
86-40	23770-23771	-	
86-41	23771-23772	-	
86-42	23772-23773	-	
86-43	23773-23774	-	
86-44	23774-23775	-	
86-45	23775-23776	-	
86-46	23776-23777	+	
86-47	23777-23778	-	
86-48	23778-23779	-	
86-49	23779-23780	-	
86-50	23780-23781	-	
86-51	23781-23782	-	
86-52	23782-23783	-	
86-53	23783-23784	-	
86-54	23784-23785	-	
86-55	23785-23786	-	
86-56	23786-23787	-	
86-57	23787-23788	-	
86-58	23788-23789	-	
86-59	23789-23790	-	
86-60	23790-23791	-	
86-61	23791-23792	-	
86-62	23792-23793	-	
86-63	23793-23794	-	
86-64	23794-23795	-	
86-65	23795-23796	-	
86-66	23796-23797	-	
86-67	23797-23798	-	
86-68	23798-23799	-	
86-69	23799-23800	-	
86-70	23800-23801	-	
86-71	23801-23802	-	
86-72	23802-23803	-	
86-73	23803-23804	-	
86-74	23804-23805	-	
86-75	23805-23806	-	
86-76	23806-23807	-	
86-77	23807-23808	-	
86-78	23808-23809	-	
86-79	23809-23810	-	
86-80	23810-23811	-	
86-81	23811-23812	-	
86-82	23812-23813	-	
86-83	23813-23814	-	
86-84	23814-23815	-	
86-85	23815-23816	-	
86-86	23816-23817	-	
86-87	23817-23818	-	
86-88	23818-23819	-	
86-89	23819-23820	-	
86-90	23820-23821	-	
86-91	23821-23822	-	
86-92	23822-23823	-	
86-93	23823-23824	-	
86-94	23824-23825	-	
86-95	23825-23826	-	
86-96	23826-23827	-	
86-97	23827-23828	-	
86-98	23828-23829	-	
86-99	23829-23830	-	
86-100	23830-23831	-	
86-101	23831-23832	-	
86-102	23832-23833	-	
86-103	23833-23834	-	
86-104	23834-23835	-	
86-105	23835-23836	-	
86-106	23836-23837	-	
86-107	23837-23838	-	
86-108	23838-23839	-	
86-109	23839-23840	-	
86-110	23840-23841	-	
86-111	23841-23842	-	
86-112	23842-23843	-	
86-113	23843-23844	-	
86-114	23844-23845	-	
86-115	23845-23846	-	
86-116	23846-23847	-	
86-117	23847-23848	-	
86-118	23848-23849	-	
86-119	23849-23850	-	
86-120	23850-23851	-	
86-121	23851-23852	-	
86-122	23852-23853	-	
86-123	23853-23854	-	
86-124	23854-23855	-	
86-125	23855-23856	-	
86-126	23856-23857	-	
86-127	23857-23858	-	
86-128	23858-23859	-	
86-129	23859-23860	-	
86-130	23860-23861	-	
86-131	23861-23862	-	
86-132	23863-23866	346	
86-133	23867-23868	|	
86-134	23869-23884	uD3QOvHfJdxq2ez	
86-135	23885-23886	|	
86-136	23887-23897	KiAaIRu8QE	
86-137	23898-23899	|	
86-138	23900-23901	1	
86-139	23902-23903	|	
86-140	23904-23905	{	
86-141	23905-23906	"	
86-142	23906-23910	tags	
86-143	23910-23911	"	
86-144	23911-23912	:	
86-145	23913-23914	{	
86-146	23914-23915	"	
86-147	23915-23919	nk88	
86-148	23919-23920	"	
86-149	23920-23921	:	
86-150	23922-23923	{	
86-151	23923-23924	"	
86-152	23924-23928	ik37	
86-153	23928-23929	"	
86-154	23929-23930	:	
86-155	23931-23932	"	
86-156	23932-23937	iv161	
86-157	23937-23938	"	
86-158	23938-23939	}	
86-159	23939-23940	}	
86-160	23940-23941	,	
86-161	23942-23943	"	
86-162	23943-23952	publisher	
86-163	23952-23953	"	
86-164	23953-23954	:	
86-165	23955-23956	"	
86-166	23956-23966	XlekfkLOtL	
86-167	23966-23967	"	
86-168	23967-23968	,	
86-169	23969-23970	"	
86-170	23970-23982	criticrating	
86-171	23982-23983	"	
86-172	23983-23984	:	
86-173	23985-23986	3	
86-174	23986-23987	}	

#Text=(1 row) demo=# explain analyze select * from books where data->'publisher' = 'XlekfkLOtL'; QUERY PLAN
87-1	23988-23989	(	
87-2	23989-23990	1	
87-3	23991-23994	row	
87-4	23994-23995	)	
87-5	23996-24000	demo	
87-6	24000-24001	=	
87-7	24001-24002	#	
87-8	24003-24010	explain	
87-9	24011-24018	analyze	
87-10	24019-24025	select	
87-11	24026-24027	*	
87-12	24028-24032	from	
87-13	24033-24038	books	
87-14	24039-24044	where	
87-15	24045-24049	data	
87-16	24049-24050	-	
87-17	24050-24051	>	
87-18	24051-24052	'	
87-19	24052-24061	publisher	
87-20	24061-24062	'	
87-21	24063-24064	=	
87-22	24065-24066	'	
87-23	24066-24076	XlekfkLOtL	
87-24	24076-24077	'	
87-25	24077-24078	;	
87-26	24079-24084	QUERY	
87-27	24085-24089	PLAN	

#Text=----------------------------------------------------------------------------------------------------------------------- Index Scan using publisherhash on books (cost=0.00..2.02 rows=1 width=158) (actual time=0.016..0.017 rows=1 loops=1)
88-1	24090-24091	-	
88-2	24091-24092	-	
88-3	24092-24093	-	
88-4	24093-24094	-	
88-5	24094-24095	-	
88-6	24095-24096	-	
88-7	24096-24097	-	
88-8	24097-24098	-	
88-9	24098-24099	-	
88-10	24099-24100	-	
88-11	24100-24101	-	
88-12	24101-24102	-	
88-13	24102-24103	-	
88-14	24103-24104	-	
88-15	24104-24105	-	
88-16	24105-24106	-	
88-17	24106-24107	-	
88-18	24107-24108	-	
88-19	24108-24109	-	
88-20	24109-24110	-	
88-21	24110-24111	-	
88-22	24111-24112	-	
88-23	24112-24113	-	
88-24	24113-24114	-	
88-25	24114-24115	-	
88-26	24115-24116	-	
88-27	24116-24117	-	
88-28	24117-24118	-	
88-29	24118-24119	-	
88-30	24119-24120	-	
88-31	24120-24121	-	
88-32	24121-24122	-	
88-33	24122-24123	-	
88-34	24123-24124	-	
88-35	24124-24125	-	
88-36	24125-24126	-	
88-37	24126-24127	-	
88-38	24127-24128	-	
88-39	24128-24129	-	
88-40	24129-24130	-	
88-41	24130-24131	-	
88-42	24131-24132	-	
88-43	24132-24133	-	
88-44	24133-24134	-	
88-45	24134-24135	-	
88-46	24135-24136	-	
88-47	24136-24137	-	
88-48	24137-24138	-	
88-49	24138-24139	-	
88-50	24139-24140	-	
88-51	24140-24141	-	
88-52	24141-24142	-	
88-53	24142-24143	-	
88-54	24143-24144	-	
88-55	24144-24145	-	
88-56	24145-24146	-	
88-57	24146-24147	-	
88-58	24147-24148	-	
88-59	24148-24149	-	
88-60	24149-24150	-	
88-61	24150-24151	-	
88-62	24151-24152	-	
88-63	24152-24153	-	
88-64	24153-24154	-	
88-65	24154-24155	-	
88-66	24155-24156	-	
88-67	24156-24157	-	
88-68	24157-24158	-	
88-69	24158-24159	-	
88-70	24159-24160	-	
88-71	24160-24161	-	
88-72	24161-24162	-	
88-73	24162-24163	-	
88-74	24163-24164	-	
88-75	24164-24165	-	
88-76	24165-24166	-	
88-77	24166-24167	-	
88-78	24167-24168	-	
88-79	24168-24169	-	
88-80	24169-24170	-	
88-81	24170-24171	-	
88-82	24171-24172	-	
88-83	24172-24173	-	
88-84	24173-24174	-	
88-85	24174-24175	-	
88-86	24175-24176	-	
88-87	24176-24177	-	
88-88	24177-24178	-	
88-89	24178-24179	-	
88-90	24179-24180	-	
88-91	24180-24181	-	
88-92	24181-24182	-	
88-93	24182-24183	-	
88-94	24183-24184	-	
88-95	24184-24185	-	
88-96	24185-24186	-	
88-97	24186-24187	-	
88-98	24187-24188	-	
88-99	24188-24189	-	
88-100	24189-24190	-	
88-101	24190-24191	-	
88-102	24191-24192	-	
88-103	24192-24193	-	
88-104	24193-24194	-	
88-105	24194-24195	-	
88-106	24195-24196	-	
88-107	24196-24197	-	
88-108	24197-24198	-	
88-109	24198-24199	-	
88-110	24199-24200	-	
88-111	24200-24201	-	
88-112	24201-24202	-	
88-113	24202-24203	-	
88-114	24203-24204	-	
88-115	24204-24205	-	
88-116	24205-24206	-	
88-117	24206-24207	-	
88-118	24207-24208	-	
88-119	24208-24209	-	
88-120	24210-24215	Index	
88-121	24216-24220	Scan	
88-122	24221-24226	using	
88-123	24227-24240	publisherhash	
88-124	24241-24243	on	
88-125	24244-24249	books	
88-126	24250-24251	(	
88-127	24251-24255	cost	
88-128	24255-24256	=	
88-129	24256-24260	0.00	
88-130	24260-24261	.	
88-131	24261-24266	.2.02	
88-132	24267-24271	rows	
88-133	24271-24272	=	
88-134	24272-24273	1	
88-135	24274-24279	width	
88-136	24279-24280	=	
88-137	24280-24283	158	
88-138	24283-24284	)	
88-139	24285-24286	(	
88-140	24286-24292	actual	
88-141	24293-24297	time	
88-142	24297-24298	=	
88-143	24298-24303	0.016	
88-144	24303-24304	.	
88-145	24304-24310	.0.017	
88-146	24311-24315	rows	
88-147	24315-24316	=	
88-148	24316-24317	1	
88-149	24318-24323	loops	
88-150	24323-24324	=	
88-151	24324-24325	1	
88-152	24325-24326	)	

#Text=Index Cond: ((data -> 'publisher'::text) = 'XlekfkLOtL'::text) Planning Time: 0.080 ms Execution Time: 0.035 ms (4 rows) Special Mention: GIN Trigram Indexes
89-1	24327-24332	Index	
89-2	24333-24337	Cond	
89-3	24337-24338	:	
89-4	24339-24340	(	
89-5	24340-24341	(	
89-6	24341-24345	data	
89-7	24346-24347	-	
89-8	24347-24348	>	
89-9	24349-24350	'	
89-10	24350-24359	publisher	
89-11	24359-24360	'	
89-12	24360-24361	:	
89-13	24361-24362	:	
89-14	24362-24366	text	
89-15	24366-24367	)	
89-16	24368-24369	=	
89-17	24370-24371	'	
89-18	24371-24381	XlekfkLOtL	
89-19	24381-24382	'	
89-20	24382-24383	:	
89-21	24383-24384	:	
89-22	24384-24388	text	
89-23	24388-24389	)	
89-24	24390-24398	Planning	
89-25	24399-24403	Time	
89-26	24403-24404	:	
89-27	24405-24410	0.080	
89-28	24411-24413	ms	
89-29	24414-24423	Execution	
89-30	24424-24428	Time	
89-31	24428-24429	:	
89-32	24430-24435	0.035	
89-33	24436-24438	ms	
89-34	24439-24440	(	
89-35	24440-24441	4	
89-36	24442-24446	rows	
89-37	24446-24447	)	
89-38	24448-24455	Special	
89-39	24456-24463	Mention	
89-40	24463-24464	:	
89-41	24465-24468	GIN	
89-42	24469-24476	Trigram	
89-43	24477-24484	Indexes	

#Text=PostgreSQL supports string matching using trigram indexes. Trigram indexes work by breaking up text into trigrams. Trigrams are basically words broken up into sequences of 3 letters. More information can be found in the documentation. GIN indexes support the “gin_trgm_ops” class that can be used to index the data in JSONB. You can choose to use expression indexes to build the trigram index on a particular column. CREATE EXTENSION pg_trgm; CREATE INDEX publisher ON books USING GIN ((data->'publisher') gin_trgm_ops);
90-1	24485-24495	PostgreSQL	
90-2	24496-24504	supports	
90-3	24505-24511	string	
90-4	24512-24520	matching	
90-5	24521-24526	using	
90-6	24527-24534	trigram	
90-7	24535-24542	indexes	
90-8	24542-24543	.	
90-9	24544-24551	Trigram	
90-10	24552-24559	indexes	
90-11	24560-24564	work	
90-12	24565-24567	by	
90-13	24568-24576	breaking	
90-14	24577-24579	up	
90-15	24580-24584	text	
90-16	24585-24589	into	
90-17	24590-24598	trigrams	
90-18	24598-24599	.	
90-19	24600-24608	Trigrams	
90-20	24609-24612	are	
90-21	24613-24622	basically	
90-22	24623-24628	words	
90-23	24629-24635	broken	
90-24	24636-24638	up	
90-25	24639-24643	into	
90-26	24644-24653	sequences	
90-27	24654-24656	of	
90-28	24657-24658	3	
90-29	24659-24666	letters	
90-30	24666-24667	.	
90-31	24668-24672	More	
90-32	24673-24684	information	
90-33	24685-24688	can	
90-34	24689-24691	be	
90-35	24692-24697	found	
90-36	24698-24700	in	
90-37	24701-24704	the	
90-38	24705-24718	documentation	
90-39	24718-24719	.	
90-40	24720-24723	GIN	
90-41	24724-24731	indexes	
90-42	24732-24739	support	
90-43	24740-24743	the	
90-44	24744-24745	“	
90-45	24745-24757	gin_trgm_ops	
90-46	24757-24758	”	
90-47	24759-24764	class	
90-48	24765-24769	that	
90-49	24770-24773	can	
90-50	24774-24776	be	
90-51	24777-24781	used	
90-52	24782-24784	to	
90-53	24785-24790	index	
90-54	24791-24794	the	
90-55	24795-24799	data	
90-56	24800-24802	in	
90-57	24803-24808	JSONB	
90-58	24808-24809	.	
90-59	24810-24813	You	
90-60	24814-24817	can	
90-61	24818-24824	choose	
90-62	24825-24827	to	
90-63	24828-24831	use	
90-64	24832-24842	expression	
90-65	24843-24850	indexes	
90-66	24851-24853	to	
90-67	24854-24859	build	
90-68	24860-24863	the	
90-69	24864-24871	trigram	
90-70	24872-24877	index	
90-71	24878-24880	on	
90-72	24881-24882	a	
90-73	24883-24893	particular	
90-74	24894-24900	column	
90-75	24900-24901	.	
90-76	24902-24908	CREATE	
90-77	24909-24918	EXTENSION	
90-78	24919-24926	pg_trgm	
90-79	24926-24927	;	
90-80	24928-24934	CREATE	
90-81	24935-24940	INDEX	
90-82	24941-24950	publisher	
90-83	24951-24953	ON	
90-84	24954-24959	books	
90-85	24960-24965	USING	
90-86	24966-24969	GIN	
90-87	24970-24971	(	
90-88	24971-24972	(	
90-89	24972-24976	data	
90-90	24976-24977	-	
90-91	24977-24978	>	
90-92	24978-24979	'	
90-93	24979-24988	publisher	
90-94	24988-24989	'	
90-95	24989-24990	)	
90-96	24991-25003	gin_trgm_ops	
90-97	25003-25004	)	
90-98	25004-25005	;	

#Text=demo=# select * from books where data->'publisher' LIKE '%I0UB%'; id | author isbn | rating | data
91-1	25006-25010	demo	
91-2	25010-25011	=	
91-3	25011-25012	#	
91-4	25013-25019	select	
91-5	25020-25021	*	
91-6	25022-25026	from	
91-7	25027-25032	books	
91-8	25033-25038	where	
91-9	25039-25043	data	
91-10	25043-25044	-	
91-11	25044-25045	>	
91-12	25045-25046	'	
91-13	25046-25055	publisher	
91-14	25055-25056	'	
91-15	25057-25061	LIKE	
91-16	25062-25063	'	
91-17	25063-25064	%	
91-18	25064-25068	I0UB	
91-19	25068-25069	%	
91-20	25069-25070	'	
91-21	25070-25071	;	
91-22	25072-25074	id	
91-23	25075-25076	|	
91-24	25077-25083	author	
91-25	25084-25088	isbn	
91-26	25089-25090	|	
91-27	25091-25097	rating	
91-28	25098-25099	|	
91-29	25100-25104	data	

#Text=----+-----------------+------------+--------+--------------------------------------------------------------------------------- 4 | KiEk3xjqvTpmZeS | EYqXO9Nwmm | 0 | {"tags": {"nk3": {"ik1": "iv1"}}, "publisher": "MI0UBqZJDt", "criticrating": 1}
92-1	25105-25106	-	
92-2	25106-25107	-	
92-3	25107-25108	-	
92-4	25108-25109	-	
92-5	25109-25110	+	
92-6	25110-25111	-	
92-7	25111-25112	-	
92-8	25112-25113	-	
92-9	25113-25114	-	
92-10	25114-25115	-	
92-11	25115-25116	-	
92-12	25116-25117	-	
92-13	25117-25118	-	
92-14	25118-25119	-	
92-15	25119-25120	-	
92-16	25120-25121	-	
92-17	25121-25122	-	
92-18	25122-25123	-	
92-19	25123-25124	-	
92-20	25124-25125	-	
92-21	25125-25126	-	
92-22	25126-25127	-	
92-23	25127-25128	+	
92-24	25128-25129	-	
92-25	25129-25130	-	
92-26	25130-25131	-	
92-27	25131-25132	-	
92-28	25132-25133	-	
92-29	25133-25134	-	
92-30	25134-25135	-	
92-31	25135-25136	-	
92-32	25136-25137	-	
92-33	25137-25138	-	
92-34	25138-25139	-	
92-35	25139-25140	-	
92-36	25140-25141	+	
92-37	25141-25142	-	
92-38	25142-25143	-	
92-39	25143-25144	-	
92-40	25144-25145	-	
92-41	25145-25146	-	
92-42	25146-25147	-	
92-43	25147-25148	-	
92-44	25148-25149	-	
92-45	25149-25150	+	
92-46	25150-25151	-	
92-47	25151-25152	-	
92-48	25152-25153	-	
92-49	25153-25154	-	
92-50	25154-25155	-	
92-51	25155-25156	-	
92-52	25156-25157	-	
92-53	25157-25158	-	
92-54	25158-25159	-	
92-55	25159-25160	-	
92-56	25160-25161	-	
92-57	25161-25162	-	
92-58	25162-25163	-	
92-59	25163-25164	-	
92-60	25164-25165	-	
92-61	25165-25166	-	
92-62	25166-25167	-	
92-63	25167-25168	-	
92-64	25168-25169	-	
92-65	25169-25170	-	
92-66	25170-25171	-	
92-67	25171-25172	-	
92-68	25172-25173	-	
92-69	25173-25174	-	
92-70	25174-25175	-	
92-71	25175-25176	-	
92-72	25176-25177	-	
92-73	25177-25178	-	
92-74	25178-25179	-	
92-75	25179-25180	-	
92-76	25180-25181	-	
92-77	25181-25182	-	
92-78	25182-25183	-	
92-79	25183-25184	-	
92-80	25184-25185	-	
92-81	25185-25186	-	
92-82	25186-25187	-	
92-83	25187-25188	-	
92-84	25188-25189	-	
92-85	25189-25190	-	
92-86	25190-25191	-	
92-87	25191-25192	-	
92-88	25192-25193	-	
92-89	25193-25194	-	
92-90	25194-25195	-	
92-91	25195-25196	-	
92-92	25196-25197	-	
92-93	25197-25198	-	
92-94	25198-25199	-	
92-95	25199-25200	-	
92-96	25200-25201	-	
92-97	25201-25202	-	
92-98	25202-25203	-	
92-99	25203-25204	-	
92-100	25204-25205	-	
92-101	25205-25206	-	
92-102	25206-25207	-	
92-103	25207-25208	-	
92-104	25208-25209	-	
92-105	25209-25210	-	
92-106	25210-25211	-	
92-107	25211-25212	-	
92-108	25212-25213	-	
92-109	25213-25214	-	
92-110	25214-25215	-	
92-111	25215-25216	-	
92-112	25216-25217	-	
92-113	25217-25218	-	
92-114	25218-25219	-	
92-115	25219-25220	-	
92-116	25220-25221	-	
92-117	25221-25222	-	
92-118	25222-25223	-	
92-119	25223-25224	-	
92-120	25224-25225	-	
92-121	25225-25226	-	
92-122	25226-25227	-	
92-123	25227-25228	-	
92-124	25228-25229	-	
92-125	25229-25230	-	
92-126	25230-25231	-	
92-127	25232-25233	4	
92-128	25234-25235	|	
92-129	25236-25251	KiEk3xjqvTpmZeS	
92-130	25252-25253	|	
92-131	25254-25264	EYqXO9Nwmm	
92-132	25265-25266	|	
92-133	25267-25268	0	
92-134	25269-25270	|	
92-135	25271-25272	{	
92-136	25272-25273	"	
92-137	25273-25277	tags	
92-138	25277-25278	"	
92-139	25278-25279	:	
92-140	25280-25281	{	
92-141	25281-25282	"	
92-142	25282-25285	nk3	
92-143	25285-25286	"	
92-144	25286-25287	:	
92-145	25288-25289	{	
92-146	25289-25290	"	
92-147	25290-25293	ik1	
92-148	25293-25294	"	
92-149	25294-25295	:	
92-150	25296-25297	"	
92-151	25297-25300	iv1	
92-152	25300-25301	"	
92-153	25301-25302	}	
92-154	25302-25303	}	
92-155	25303-25304	,	
92-156	25305-25306	"	
92-157	25306-25315	publisher	
92-158	25315-25316	"	
92-159	25316-25317	:	
92-160	25318-25319	"	
92-161	25319-25329	MI0UBqZJDt	
92-162	25329-25330	"	
92-163	25330-25331	,	
92-164	25332-25333	"	
92-165	25333-25345	criticrating	
92-166	25345-25346	"	
92-167	25346-25347	:	
92-168	25348-25349	1	
92-169	25349-25350	}	

#Text=(1 row) As you can see in the query above, we can search for any arbitrary string occurring at any potion. Unlike the B-tree indexes, we are not restricted to left anchored expressions. demo=# explain analyze select * from books where data->'publisher' LIKE '%I0UB%';
93-1	25351-25352	(	
93-2	25352-25353	1	
93-3	25354-25357	row	
93-4	25357-25358	)	
93-5	25359-25361	As	
93-6	25362-25365	you	
93-7	25366-25369	can	
93-8	25370-25373	see	
93-9	25374-25376	in	
93-10	25377-25380	the	
93-11	25381-25386	query	
93-12	25387-25392	above	
93-13	25392-25393	,	
93-14	25394-25396	we	
93-15	25397-25400	can	
93-16	25401-25407	search	
93-17	25408-25411	for	
93-18	25412-25415	any	
93-19	25416-25425	arbitrary	
93-20	25426-25432	string	
93-21	25433-25442	occurring	
93-22	25443-25445	at	
93-23	25446-25449	any	
93-24	25450-25456	potion	
93-25	25456-25457	.	
93-26	25458-25464	Unlike	
93-27	25465-25468	the	
93-28	25468-25469	 	
93-29	25469-25475	B-tree	
93-30	25476-25483	indexes	
93-31	25483-25484	,	
93-32	25485-25487	we	
93-33	25488-25491	are	
93-34	25492-25495	not	
93-35	25496-25506	restricted	
93-36	25507-25509	to	
93-37	25510-25514	left	
93-38	25515-25523	anchored	
93-39	25524-25535	expressions	
93-40	25535-25536	.	
93-41	25537-25541	demo	
93-42	25541-25542	=	
93-43	25542-25543	#	
93-44	25544-25551	explain	
93-45	25552-25559	analyze	
93-46	25560-25566	select	
93-47	25567-25568	*	
93-48	25569-25573	from	
93-49	25574-25579	books	
93-50	25580-25585	where	
93-51	25586-25590	data	
93-52	25590-25591	-	
93-53	25591-25592	>	
93-54	25592-25593	'	
93-55	25593-25602	publisher	
93-56	25602-25603	'	
93-57	25604-25608	LIKE	
93-58	25609-25610	'	
93-59	25610-25611	%	
93-60	25611-25615	I0UB	
93-61	25615-25616	%	
93-62	25616-25617	'	
93-63	25617-25618	;	

#Text=QUERY PLAN --------------------------------------------------------------------------------------------------------------------
94-1	25619-25624	QUERY	
94-2	25625-25629	PLAN	
94-3	25630-25631	-	
94-4	25631-25632	-	
94-5	25632-25633	-	
94-6	25633-25634	-	
94-7	25634-25635	-	
94-8	25635-25636	-	
94-9	25636-25637	-	
94-10	25637-25638	-	
94-11	25638-25639	-	
94-12	25639-25640	-	
94-13	25640-25641	-	
94-14	25641-25642	-	
94-15	25642-25643	-	
94-16	25643-25644	-	
94-17	25644-25645	-	
94-18	25645-25646	-	
94-19	25646-25647	-	
94-20	25647-25648	-	
94-21	25648-25649	-	
94-22	25649-25650	-	
94-23	25650-25651	-	
94-24	25651-25652	-	
94-25	25652-25653	-	
94-26	25653-25654	-	
94-27	25654-25655	-	
94-28	25655-25656	-	
94-29	25656-25657	-	
94-30	25657-25658	-	
94-31	25658-25659	-	
94-32	25659-25660	-	
94-33	25660-25661	-	
94-34	25661-25662	-	
94-35	25662-25663	-	
94-36	25663-25664	-	
94-37	25664-25665	-	
94-38	25665-25666	-	
94-39	25666-25667	-	
94-40	25667-25668	-	
94-41	25668-25669	-	
94-42	25669-25670	-	
94-43	25670-25671	-	
94-44	25671-25672	-	
94-45	25672-25673	-	
94-46	25673-25674	-	
94-47	25674-25675	-	
94-48	25675-25676	-	
94-49	25676-25677	-	
94-50	25677-25678	-	
94-51	25678-25679	-	
94-52	25679-25680	-	
94-53	25680-25681	-	
94-54	25681-25682	-	
94-55	25682-25683	-	
94-56	25683-25684	-	
94-57	25684-25685	-	
94-58	25685-25686	-	
94-59	25686-25687	-	
94-60	25687-25688	-	
94-61	25688-25689	-	
94-62	25689-25690	-	
94-63	25690-25691	-	
94-64	25691-25692	-	
94-65	25692-25693	-	
94-66	25693-25694	-	
94-67	25694-25695	-	
94-68	25695-25696	-	
94-69	25696-25697	-	
94-70	25697-25698	-	
94-71	25698-25699	-	
94-72	25699-25700	-	
94-73	25700-25701	-	
94-74	25701-25702	-	
94-75	25702-25703	-	
94-76	25703-25704	-	
94-77	25704-25705	-	
94-78	25705-25706	-	
94-79	25706-25707	-	
94-80	25707-25708	-	
94-81	25708-25709	-	
94-82	25709-25710	-	
94-83	25710-25711	-	
94-84	25711-25712	-	
94-85	25712-25713	-	
94-86	25713-25714	-	
94-87	25714-25715	-	
94-88	25715-25716	-	
94-89	25716-25717	-	
94-90	25717-25718	-	
94-91	25718-25719	-	
94-92	25719-25720	-	
94-93	25720-25721	-	
94-94	25721-25722	-	
94-95	25722-25723	-	
94-96	25723-25724	-	
94-97	25724-25725	-	
94-98	25725-25726	-	
94-99	25726-25727	-	
94-100	25727-25728	-	
94-101	25728-25729	-	
94-102	25729-25730	-	
94-103	25730-25731	-	
94-104	25731-25732	-	
94-105	25732-25733	-	
94-106	25733-25734	-	
94-107	25734-25735	-	
94-108	25735-25736	-	
94-109	25736-25737	-	
94-110	25737-25738	-	
94-111	25738-25739	-	
94-112	25739-25740	-	
94-113	25740-25741	-	
94-114	25741-25742	-	
94-115	25742-25743	-	
94-116	25743-25744	-	
94-117	25744-25745	-	
94-118	25745-25746	-	

#Text=Bitmap Heap Scan on books (cost=9.78..111.28 rows=100 width=158) (actual time=0.033..0.033 rows=1 loops=1) Recheck Cond: ((data -> 'publisher'::text) ~~ '%I0UB%'::text)
95-1	25747-25753	Bitmap	
95-2	25754-25758	Heap	
95-3	25759-25763	Scan	
95-4	25764-25766	on	
95-5	25767-25772	books	
95-6	25773-25774	(	
95-7	25774-25778	cost	
95-8	25778-25779	=	
95-9	25779-25783	9.78	
95-10	25783-25784	.	
95-11	25784-25791	.111.28	
95-12	25792-25796	rows	
95-13	25796-25797	=	
95-14	25797-25800	100	
95-15	25801-25806	width	
95-16	25806-25807	=	
95-17	25807-25810	158	
95-18	25810-25811	)	
95-19	25812-25813	(	
95-20	25813-25819	actual	
95-21	25820-25824	time	
95-22	25824-25825	=	
95-23	25825-25830	0.033	
95-24	25830-25831	.	
95-25	25831-25837	.0.033	
95-26	25838-25842	rows	
95-27	25842-25843	=	
95-28	25843-25844	1	
95-29	25845-25850	loops	
95-30	25850-25851	=	
95-31	25851-25852	1	
95-32	25852-25853	)	
95-33	25854-25861	Recheck	
95-34	25862-25866	Cond	
95-35	25866-25867	:	
95-36	25868-25869	(	
95-37	25869-25870	(	
95-38	25870-25874	data	
95-39	25875-25876	-	
95-40	25876-25877	>	
95-41	25878-25879	'	
95-42	25879-25888	publisher	
95-43	25888-25889	'	
95-44	25889-25890	:	
95-45	25890-25891	:	
95-46	25891-25895	text	
95-47	25895-25896	)	
95-48	25897-25898	~	
95-49	25898-25899	~	
95-50	25900-25901	'	
95-51	25901-25902	%	
95-52	25902-25906	I0UB	
95-53	25906-25907	%	
95-54	25907-25908	'	
95-55	25908-25909	:	
95-56	25909-25910	:	
95-57	25910-25914	text	
95-58	25914-25915	)	

#Text=Heap Blocks: exact=1 Bitmap Index Scan on publisher (cost=0.00..9.75 rows=100 width=0) (actual time=0.025..0.025 rows=1 loops=1)
96-1	25916-25920	Heap	
96-2	25921-25927	Blocks	
96-3	25927-25928	:	
96-4	25929-25934	exact	
96-5	25934-25935	=	
96-6	25935-25936	1	
96-7	25937-25943	Bitmap	
96-8	25944-25949	Index	
96-9	25950-25954	Scan	
96-10	25955-25957	on	
96-11	25958-25967	publisher	
96-12	25968-25969	(	
96-13	25969-25973	cost	
96-14	25973-25974	=	
96-15	25974-25978	0.00	
96-16	25978-25979	.	
96-17	25979-25984	.9.75	
96-18	25985-25989	rows	
96-19	25989-25990	=	
96-20	25990-25993	100	
96-21	25994-25999	width	
96-22	25999-26000	=	
96-23	26000-26001	0	
96-24	26001-26002	)	
96-25	26003-26004	(	
96-26	26004-26010	actual	
96-27	26011-26015	time	
96-28	26015-26016	=	
96-29	26016-26021	0.025	
96-30	26021-26022	.	
96-31	26022-26028	.0.025	
96-32	26029-26033	rows	
96-33	26033-26034	=	
96-34	26034-26035	1	
96-35	26036-26041	loops	
96-36	26041-26042	=	
96-37	26042-26043	1	
96-38	26043-26044	)	

#Text=Index Cond: ((data -> 'publisher'::text) ~~ '%I0UB%'::text) Planning Time: 0.213 ms Execution Time: 0.058 ms (7 rows) Special Mention: GIN Array Indexes
97-1	26045-26050	Index	
97-2	26051-26055	Cond	
97-3	26055-26056	:	
97-4	26057-26058	(	
97-5	26058-26059	(	
97-6	26059-26063	data	
97-7	26064-26065	-	
97-8	26065-26066	>	
97-9	26067-26068	'	
97-10	26068-26077	publisher	
97-11	26077-26078	'	
97-12	26078-26079	:	
97-13	26079-26080	:	
97-14	26080-26084	text	
97-15	26084-26085	)	
97-16	26086-26087	~	
97-17	26087-26088	~	
97-18	26089-26090	'	
97-19	26090-26091	%	
97-20	26091-26095	I0UB	
97-21	26095-26096	%	
97-22	26096-26097	'	
97-23	26097-26098	:	
97-24	26098-26099	:	
97-25	26099-26103	text	
97-26	26103-26104	)	
97-27	26105-26113	Planning	
97-28	26114-26118	Time	
97-29	26118-26119	:	
97-30	26120-26125	0.213	
97-31	26126-26128	ms	
97-32	26129-26138	Execution	
97-33	26139-26143	Time	
97-34	26143-26144	:	
97-35	26145-26150	0.058	
97-36	26151-26153	ms	
97-37	26154-26155	(	
97-38	26155-26156	7	
97-39	26157-26161	rows	
97-40	26161-26162	)	
97-41	26163-26170	Special	
97-42	26171-26178	Mention	
97-43	26178-26179	:	
97-44	26180-26183	GIN	
97-45	26184-26189	Array	
97-46	26190-26197	Indexes	

#Text=JSONB has great built-in support for indexing arrays. Let's consider an example of indexing an array of strings using a GIN index in the case when our JSONB data contains a "keyword" element and we would like to find rows with particular keywords: {"tags": {"nk780341": {"ik397357": "iv632731"}}, "keywords": ["abc", "kef", "keh"], "publisher": "fqaJuAdjP5", "criticrating": 2}
98-1	26198-26203	JSONB	
98-2	26204-26207	has	
98-3	26208-26213	great	
98-4	26214-26222	built-in	
98-5	26223-26230	support	
98-6	26231-26234	for	
98-7	26235-26243	indexing	
98-8	26244-26250	arrays	
98-9	26250-26251	.	
98-10	26252-26257	Let's	
98-11	26258-26266	consider	
98-12	26267-26269	an	
98-13	26270-26277	example	
98-14	26278-26280	of	
98-15	26281-26289	indexing	
98-16	26290-26292	an	
98-17	26293-26298	array	
98-18	26299-26301	of	
98-19	26302-26309	strings	
98-20	26310-26315	using	
98-21	26316-26317	a	
98-22	26318-26321	GIN	
98-23	26322-26327	index	
98-24	26327-26328	 	
98-25	26328-26330	in	
98-26	26330-26331	 	
98-27	26331-26334	the	
98-28	26335-26339	case	
98-29	26340-26344	when	
98-30	26345-26348	our	
98-31	26348-26349	 	
98-32	26349-26354	JSONB	
98-33	26355-26359	data	
98-34	26360-26368	contains	
98-35	26369-26370	a	
98-36	26371-26372	"	
98-37	26372-26379	keyword	
98-38	26379-26380	"	
98-39	26381-26388	element	
98-40	26389-26392	and	
98-41	26393-26395	we	
98-42	26396-26401	would	
98-43	26402-26406	like	
98-44	26407-26409	to	
98-45	26410-26414	find	
98-46	26415-26419	rows	
98-47	26420-26424	with	
98-48	26425-26435	particular	
98-49	26436-26444	keywords	
98-50	26444-26445	:	
98-51	26446-26447	{	
98-52	26447-26448	"	
98-53	26448-26452	tags	
98-54	26452-26453	"	
98-55	26453-26454	:	
98-56	26455-26456	{	
98-57	26456-26457	"	
98-58	26457-26465	nk780341	
98-59	26465-26466	"	
98-60	26466-26467	:	
98-61	26468-26469	{	
98-62	26469-26470	"	
98-63	26470-26478	ik397357	
98-64	26478-26479	"	
98-65	26479-26480	:	
98-66	26481-26482	"	
98-67	26482-26490	iv632731	
98-68	26490-26491	"	
98-69	26491-26492	}	
98-70	26492-26493	}	
98-71	26493-26494	,	
98-72	26495-26496	"	
98-73	26496-26504	keywords	
98-74	26504-26505	"	
98-75	26505-26506	:	
98-76	26507-26508	[	
98-77	26508-26509	"	
98-78	26509-26512	abc	
98-79	26512-26513	"	
98-80	26513-26514	,	
98-81	26515-26516	"	
98-82	26516-26519	kef	
98-83	26519-26520	"	
98-84	26520-26521	,	
98-85	26522-26523	"	
98-86	26523-26526	keh	
98-87	26526-26527	"	
98-88	26527-26528	]	
98-89	26528-26529	,	
98-90	26530-26531	"	
98-91	26531-26540	publisher	
98-92	26540-26541	"	
98-93	26541-26542	:	
98-94	26543-26544	"	
98-95	26544-26554	fqaJuAdjP5	
98-96	26554-26555	"	
98-97	26555-26556	,	
98-98	26557-26558	"	
98-99	26558-26570	criticrating	
98-100	26570-26571	"	
98-101	26571-26572	:	
98-102	26573-26574	2	
98-103	26574-26575	}	

#Text=CREATE INDEX keywords ON books USING GIN ((data->'keywords') jsonb_path_ops); demo=# select * from books where data->'keywords' @> '["abc", "keh"]'::jsonb; author isbn | rating | data
99-1	26576-26582	CREATE	
99-2	26583-26588	INDEX	
99-3	26589-26597	keywords	
99-4	26598-26600	ON	
99-5	26601-26606	books	
99-6	26607-26612	USING	
99-7	26613-26616	GIN	
99-8	26617-26618	(	
99-9	26618-26619	(	
99-10	26619-26623	data	
99-11	26623-26624	-	
99-12	26624-26625	>	
99-13	26625-26626	'	
99-14	26626-26634	keywords	
99-15	26634-26635	'	
99-16	26635-26636	)	
99-17	26637-26651	jsonb_path_ops	
99-18	26651-26652	)	
99-19	26652-26653	;	
99-20	26654-26658	demo	
99-21	26658-26659	=	
99-22	26659-26660	#	
99-23	26661-26667	select	
99-24	26668-26669	*	
99-25	26670-26674	from	
99-26	26675-26680	books	
99-27	26681-26686	where	
99-28	26687-26691	data	
99-29	26691-26692	-	
99-30	26692-26693	>	
99-31	26693-26694	'	
99-32	26694-26702	keywords	
99-33	26702-26703	'	
99-34	26704-26705	@	
99-35	26705-26706	>	
99-36	26707-26708	'	
99-37	26708-26709	[	
99-38	26709-26710	"	
99-39	26710-26713	abc	
99-40	26713-26714	"	
99-41	26714-26715	,	
99-42	26716-26717	"	
99-43	26717-26720	keh	
99-44	26720-26721	"	
99-45	26721-26722	]	
99-46	26722-26723	'	
99-47	26723-26724	:	
99-48	26724-26725	:	
99-49	26725-26730	jsonb	
99-50	26730-26731	;	
99-51	26732-26738	author	
99-52	26739-26743	isbn	
99-53	26744-26745	|	
99-54	26746-26752	rating	
99-55	26753-26754	|	
99-56	26755-26759	data	

#Text=---------+-----------------+------------+--------+----------------------------------------------------------------------------------------------------------------------------------- 1000003 | zEG406sLKQ2IU8O | viPdlu3DZm |
100-1	26760-26761	-	
100-2	26761-26762	-	
100-3	26762-26763	-	
100-4	26763-26764	-	
100-5	26764-26765	-	
100-6	26765-26766	-	
100-7	26766-26767	-	
100-8	26767-26768	-	
100-9	26768-26769	-	
100-10	26769-26770	+	
100-11	26770-26771	-	
100-12	26771-26772	-	
100-13	26772-26773	-	
100-14	26773-26774	-	
100-15	26774-26775	-	
100-16	26775-26776	-	
100-17	26776-26777	-	
100-18	26777-26778	-	
100-19	26778-26779	-	
100-20	26779-26780	-	
100-21	26780-26781	-	
100-22	26781-26782	-	
100-23	26782-26783	-	
100-24	26783-26784	-	
100-25	26784-26785	-	
100-26	26785-26786	-	
100-27	26786-26787	-	
100-28	26787-26788	+	
100-29	26788-26789	-	
100-30	26789-26790	-	
100-31	26790-26791	-	
100-32	26791-26792	-	
100-33	26792-26793	-	
100-34	26793-26794	-	
100-35	26794-26795	-	
100-36	26795-26796	-	
100-37	26796-26797	-	
100-38	26797-26798	-	
100-39	26798-26799	-	
100-40	26799-26800	-	
100-41	26800-26801	+	
100-42	26801-26802	-	
100-43	26802-26803	-	
100-44	26803-26804	-	
100-45	26804-26805	-	
100-46	26805-26806	-	
100-47	26806-26807	-	
100-48	26807-26808	-	
100-49	26808-26809	-	
100-50	26809-26810	+	
100-51	26810-26811	-	
100-52	26811-26812	-	
100-53	26812-26813	-	
100-54	26813-26814	-	
100-55	26814-26815	-	
100-56	26815-26816	-	
100-57	26816-26817	-	
100-58	26817-26818	-	
100-59	26818-26819	-	
100-60	26819-26820	-	
100-61	26820-26821	-	
100-62	26821-26822	-	
100-63	26822-26823	-	
100-64	26823-26824	-	
100-65	26824-26825	-	
100-66	26825-26826	-	
100-67	26826-26827	-	
100-68	26827-26828	-	
100-69	26828-26829	-	
100-70	26829-26830	-	
100-71	26830-26831	-	
100-72	26831-26832	-	
100-73	26832-26833	-	
100-74	26833-26834	-	
100-75	26834-26835	-	
100-76	26835-26836	-	
100-77	26836-26837	-	
100-78	26837-26838	-	
100-79	26838-26839	-	
100-80	26839-26840	-	
100-81	26840-26841	-	
100-82	26841-26842	-	
100-83	26842-26843	-	
100-84	26843-26844	-	
100-85	26844-26845	-	
100-86	26845-26846	-	
100-87	26846-26847	-	
100-88	26847-26848	-	
100-89	26848-26849	-	
100-90	26849-26850	-	
100-91	26850-26851	-	
100-92	26851-26852	-	
100-93	26852-26853	-	
100-94	26853-26854	-	
100-95	26854-26855	-	
100-96	26855-26856	-	
100-97	26856-26857	-	
100-98	26857-26858	-	
100-99	26858-26859	-	
100-100	26859-26860	-	
100-101	26860-26861	-	
100-102	26861-26862	-	
100-103	26862-26863	-	
100-104	26863-26864	-	
100-105	26864-26865	-	
100-106	26865-26866	-	
100-107	26866-26867	-	
100-108	26867-26868	-	
100-109	26868-26869	-	
100-110	26869-26870	-	
100-111	26870-26871	-	
100-112	26871-26872	-	
100-113	26872-26873	-	
100-114	26873-26874	-	
100-115	26874-26875	-	
100-116	26875-26876	-	
100-117	26876-26877	-	
100-118	26877-26878	-	
100-119	26878-26879	-	
100-120	26879-26880	-	
100-121	26880-26881	-	
100-122	26881-26882	-	
100-123	26882-26883	-	
100-124	26883-26884	-	
100-125	26884-26885	-	
100-126	26885-26886	-	
100-127	26886-26887	-	
100-128	26887-26888	-	
100-129	26888-26889	-	
100-130	26889-26890	-	
100-131	26890-26891	-	
100-132	26891-26892	-	
100-133	26892-26893	-	
100-134	26893-26894	-	
100-135	26894-26895	-	
100-136	26895-26896	-	
100-137	26896-26897	-	
100-138	26897-26898	-	
100-139	26898-26899	-	
100-140	26899-26900	-	
100-141	26900-26901	-	
100-142	26901-26902	-	
100-143	26902-26903	-	
100-144	26903-26904	-	
100-145	26904-26905	-	
100-146	26905-26906	-	
100-147	26906-26907	-	
100-148	26907-26908	-	
100-149	26908-26909	-	
100-150	26909-26910	-	
100-151	26910-26911	-	
100-152	26911-26912	-	
100-153	26912-26913	-	
100-154	26913-26914	-	
100-155	26914-26915	-	
100-156	26915-26916	-	
100-157	26916-26917	-	
100-158	26917-26918	-	
100-159	26918-26919	-	
100-160	26919-26920	-	
100-161	26920-26921	-	
100-162	26921-26922	-	
100-163	26922-26923	-	
100-164	26923-26924	-	
100-165	26924-26925	-	
100-166	26925-26926	-	
100-167	26926-26927	-	
100-168	26927-26928	-	
100-169	26928-26929	-	
100-170	26929-26930	-	
100-171	26930-26931	-	
100-172	26931-26932	-	
100-173	26932-26933	-	
100-174	26933-26934	-	
100-175	26934-26935	-	
100-176	26935-26936	-	
100-177	26936-26937	-	
100-178	26937-26938	-	
100-179	26938-26939	-	
100-180	26939-26940	-	
100-181	26940-26941	-	
100-182	26942-26949	1000003	
100-183	26950-26951	|	
100-184	26952-26967	zEG406sLKQ2IU8O	
100-185	26968-26969	|	
100-186	26970-26980	viPdlu3DZm	
100-187	26981-26982	|	

#Text=4 | {"tags": {"nk263020": {"ik203820": "iv817928"}}, "keywords": ["abc", "kef", "keh"], "publisher": "7NClevxuTM", "criticrating": 2} 1000004 | GCe9NypHYKDH4rD | so6TQDYzZ3 |
101-1	26983-26984	4	
101-2	26985-26986	|	
101-3	26987-26988	{	
101-4	26988-26989	"	
101-5	26989-26993	tags	
101-6	26993-26994	"	
101-7	26994-26995	:	
101-8	26996-26997	{	
101-9	26997-26998	"	
101-10	26998-27006	nk263020	
101-11	27006-27007	"	
101-12	27007-27008	:	
101-13	27009-27010	{	
101-14	27010-27011	"	
101-15	27011-27019	ik203820	
101-16	27019-27020	"	
101-17	27020-27021	:	
101-18	27022-27023	"	
101-19	27023-27031	iv817928	
101-20	27031-27032	"	
101-21	27032-27033	}	
101-22	27033-27034	}	
101-23	27034-27035	,	
101-24	27036-27037	"	
101-25	27037-27045	keywords	
101-26	27045-27046	"	
101-27	27046-27047	:	
101-28	27048-27049	[	
101-29	27049-27050	"	
101-30	27050-27053	abc	
101-31	27053-27054	"	
101-32	27054-27055	,	
101-33	27056-27057	"	
101-34	27057-27060	kef	
101-35	27060-27061	"	
101-36	27061-27062	,	
101-37	27063-27064	"	
101-38	27064-27067	keh	
101-39	27067-27068	"	
101-40	27068-27069	]	
101-41	27069-27070	,	
101-42	27071-27072	"	
101-43	27072-27081	publisher	
101-44	27081-27082	"	
101-45	27082-27083	:	
101-46	27084-27085	"	
101-47	27085-27095	7NClevxuTM	
101-48	27095-27096	"	
101-49	27096-27097	,	
101-50	27098-27099	"	
101-51	27099-27111	criticrating	
101-52	27111-27112	"	
101-53	27112-27113	:	
101-54	27114-27115	2	
101-55	27115-27116	}	
101-56	27117-27124	1000004	
101-57	27125-27126	|	
101-58	27127-27142	GCe9NypHYKDH4rD	
101-59	27143-27144	|	
101-60	27145-27155	so6TQDYzZ3	
101-61	27156-27157	|	

#Text=4 | {"tags": {"nk780341": {"ik397357": "iv632731"}}, "keywords": ["abc", "kef", "keh"], "publisher": "fqaJuAdjP5", "criticrating": 2} (2 rows) demo=# explain analyze select * from books where data->'keywords' @> '["abc", "keh"]'::jsonb; QUERY PLAN
102-1	27158-27159	4	
102-2	27160-27161	|	
102-3	27162-27163	{	
102-4	27163-27164	"	
102-5	27164-27168	tags	
102-6	27168-27169	"	
102-7	27169-27170	:	
102-8	27171-27172	{	
102-9	27172-27173	"	
102-10	27173-27181	nk780341	
102-11	27181-27182	"	
102-12	27182-27183	:	
102-13	27184-27185	{	
102-14	27185-27186	"	
102-15	27186-27194	ik397357	
102-16	27194-27195	"	
102-17	27195-27196	:	
102-18	27197-27198	"	
102-19	27198-27206	iv632731	
102-20	27206-27207	"	
102-21	27207-27208	}	
102-22	27208-27209	}	
102-23	27209-27210	,	
102-24	27211-27212	"	
102-25	27212-27220	keywords	
102-26	27220-27221	"	
102-27	27221-27222	:	
102-28	27223-27224	[	
102-29	27224-27225	"	
102-30	27225-27228	abc	
102-31	27228-27229	"	
102-32	27229-27230	,	
102-33	27231-27232	"	
102-34	27232-27235	kef	
102-35	27235-27236	"	
102-36	27236-27237	,	
102-37	27238-27239	"	
102-38	27239-27242	keh	
102-39	27242-27243	"	
102-40	27243-27244	]	
102-41	27244-27245	,	
102-42	27246-27247	"	
102-43	27247-27256	publisher	
102-44	27256-27257	"	
102-45	27257-27258	:	
102-46	27259-27260	"	
102-47	27260-27270	fqaJuAdjP5	
102-48	27270-27271	"	
102-49	27271-27272	,	
102-50	27273-27274	"	
102-51	27274-27286	criticrating	
102-52	27286-27287	"	
102-53	27287-27288	:	
102-54	27289-27290	2	
102-55	27290-27291	}	
102-56	27292-27293	(	
102-57	27293-27294	2	
102-58	27295-27299	rows	
102-59	27299-27300	)	
102-60	27301-27305	demo	
102-61	27305-27306	=	
102-62	27306-27307	#	
102-63	27308-27315	explain	
102-64	27316-27323	analyze	
102-65	27324-27330	select	
102-66	27331-27332	*	
102-67	27333-27337	from	
102-68	27338-27343	books	
102-69	27344-27349	where	
102-70	27350-27354	data	
102-71	27354-27355	-	
102-72	27355-27356	>	
102-73	27356-27357	'	
102-74	27357-27365	keywords	
102-75	27365-27366	'	
102-76	27367-27368	@	
102-77	27368-27369	>	
102-78	27370-27371	'	
102-79	27371-27372	[	
102-80	27372-27373	"	
102-81	27373-27376	abc	
102-82	27376-27377	"	
102-83	27377-27378	,	
102-84	27379-27380	"	
102-85	27380-27383	keh	
102-86	27383-27384	"	
102-87	27384-27385	]	
102-88	27385-27386	'	
102-89	27386-27387	:	
102-90	27387-27388	:	
102-91	27388-27393	jsonb	
102-92	27393-27394	;	
102-93	27395-27400	QUERY	
102-94	27401-27405	PLAN	

#Text=--------------------------------------------------------------------------------------------------------------------- Bitmap Heap Scan on books (cost=54.75..1049.75 rows=1000 width=158) (actual time=0.026..0.028 rows=2 loops=1)
103-1	27406-27407	-	
103-2	27407-27408	-	
103-3	27408-27409	-	
103-4	27409-27410	-	
103-5	27410-27411	-	
103-6	27411-27412	-	
103-7	27412-27413	-	
103-8	27413-27414	-	
103-9	27414-27415	-	
103-10	27415-27416	-	
103-11	27416-27417	-	
103-12	27417-27418	-	
103-13	27418-27419	-	
103-14	27419-27420	-	
103-15	27420-27421	-	
103-16	27421-27422	-	
103-17	27422-27423	-	
103-18	27423-27424	-	
103-19	27424-27425	-	
103-20	27425-27426	-	
103-21	27426-27427	-	
103-22	27427-27428	-	
103-23	27428-27429	-	
103-24	27429-27430	-	
103-25	27430-27431	-	
103-26	27431-27432	-	
103-27	27432-27433	-	
103-28	27433-27434	-	
103-29	27434-27435	-	
103-30	27435-27436	-	
103-31	27436-27437	-	
103-32	27437-27438	-	
103-33	27438-27439	-	
103-34	27439-27440	-	
103-35	27440-27441	-	
103-36	27441-27442	-	
103-37	27442-27443	-	
103-38	27443-27444	-	
103-39	27444-27445	-	
103-40	27445-27446	-	
103-41	27446-27447	-	
103-42	27447-27448	-	
103-43	27448-27449	-	
103-44	27449-27450	-	
103-45	27450-27451	-	
103-46	27451-27452	-	
103-47	27452-27453	-	
103-48	27453-27454	-	
103-49	27454-27455	-	
103-50	27455-27456	-	
103-51	27456-27457	-	
103-52	27457-27458	-	
103-53	27458-27459	-	
103-54	27459-27460	-	
103-55	27460-27461	-	
103-56	27461-27462	-	
103-57	27462-27463	-	
103-58	27463-27464	-	
103-59	27464-27465	-	
103-60	27465-27466	-	
103-61	27466-27467	-	
103-62	27467-27468	-	
103-63	27468-27469	-	
103-64	27469-27470	-	
103-65	27470-27471	-	
103-66	27471-27472	-	
103-67	27472-27473	-	
103-68	27473-27474	-	
103-69	27474-27475	-	
103-70	27475-27476	-	
103-71	27476-27477	-	
103-72	27477-27478	-	
103-73	27478-27479	-	
103-74	27479-27480	-	
103-75	27480-27481	-	
103-76	27481-27482	-	
103-77	27482-27483	-	
103-78	27483-27484	-	
103-79	27484-27485	-	
103-80	27485-27486	-	
103-81	27486-27487	-	
103-82	27487-27488	-	
103-83	27488-27489	-	
103-84	27489-27490	-	
103-85	27490-27491	-	
103-86	27491-27492	-	
103-87	27492-27493	-	
103-88	27493-27494	-	
103-89	27494-27495	-	
103-90	27495-27496	-	
103-91	27496-27497	-	
103-92	27497-27498	-	
103-93	27498-27499	-	
103-94	27499-27500	-	
103-95	27500-27501	-	
103-96	27501-27502	-	
103-97	27502-27503	-	
103-98	27503-27504	-	
103-99	27504-27505	-	
103-100	27505-27506	-	
103-101	27506-27507	-	
103-102	27507-27508	-	
103-103	27508-27509	-	
103-104	27509-27510	-	
103-105	27510-27511	-	
103-106	27511-27512	-	
103-107	27512-27513	-	
103-108	27513-27514	-	
103-109	27514-27515	-	
103-110	27515-27516	-	
103-111	27516-27517	-	
103-112	27517-27518	-	
103-113	27518-27519	-	
103-114	27519-27520	-	
103-115	27520-27521	-	
103-116	27521-27522	-	
103-117	27522-27523	-	
103-118	27524-27530	Bitmap	
103-119	27531-27535	Heap	
103-120	27536-27540	Scan	
103-121	27541-27543	on	
103-122	27544-27549	books	
103-123	27550-27551	(	
103-124	27551-27555	cost	
103-125	27555-27556	=	
103-126	27556-27561	54.75	
103-127	27561-27562	.	
103-128	27562-27570	.1049.75	
103-129	27571-27575	rows	
103-130	27575-27576	=	
103-131	27576-27580	1000	
103-132	27581-27586	width	
103-133	27586-27587	=	
103-134	27587-27590	158	
103-135	27590-27591	)	
103-136	27592-27593	(	
103-137	27593-27599	actual	
103-138	27600-27604	time	
103-139	27604-27605	=	
103-140	27605-27610	0.026	
103-141	27610-27611	.	
103-142	27611-27617	.0.028	
103-143	27618-27622	rows	
103-144	27622-27623	=	
103-145	27623-27624	2	
103-146	27625-27630	loops	
103-147	27630-27631	=	
103-148	27631-27632	1	
103-149	27632-27633	)	

#Text=Recheck Cond: ((data -> 'keywords'::text) @> '["abc", "keh"]'::jsonb) Heap Blocks: exact=1 Bitmap Index Scan on keywords (cost=0.00..54.50 rows=1000 width=0) (actual time=0.014..0.014 rows=2 loops=1)
104-1	27634-27641	Recheck	
104-2	27642-27646	Cond	
104-3	27646-27647	:	
104-4	27648-27649	(	
104-5	27649-27650	(	
104-6	27650-27654	data	
104-7	27655-27656	-	
104-8	27656-27657	>	
104-9	27658-27659	'	
104-10	27659-27667	keywords	
104-11	27667-27668	'	
104-12	27668-27669	:	
104-13	27669-27670	:	
104-14	27670-27674	text	
104-15	27674-27675	)	
104-16	27676-27677	@	
104-17	27677-27678	>	
104-18	27679-27680	'	
104-19	27680-27681	[	
104-20	27681-27682	"	
104-21	27682-27685	abc	
104-22	27685-27686	"	
104-23	27686-27687	,	
104-24	27688-27689	"	
104-25	27689-27692	keh	
104-26	27692-27693	"	
104-27	27693-27694	]	
104-28	27694-27695	'	
104-29	27695-27696	:	
104-30	27696-27697	:	
104-31	27697-27702	jsonb	
104-32	27702-27703	)	
104-33	27704-27708	Heap	
104-34	27709-27715	Blocks	
104-35	27715-27716	:	
104-36	27717-27722	exact	
104-37	27722-27723	=	
104-38	27723-27724	1	
104-39	27725-27731	Bitmap	
104-40	27732-27737	Index	
104-41	27738-27742	Scan	
104-42	27743-27745	on	
104-43	27746-27754	keywords	
104-44	27755-27756	(	
104-45	27756-27760	cost	
104-46	27760-27761	=	
104-47	27761-27765	0.00	
104-48	27765-27766	.	
104-49	27766-27772	.54.50	
104-50	27773-27777	rows	
104-51	27777-27778	=	
104-52	27778-27782	1000	
104-53	27783-27788	width	
104-54	27788-27789	=	
104-55	27789-27790	0	
104-56	27790-27791	)	
104-57	27792-27793	(	
104-58	27793-27799	actual	
104-59	27800-27804	time	
104-60	27804-27805	=	
104-61	27805-27810	0.014	
104-62	27810-27811	.	
104-63	27811-27817	.0.014	
104-64	27818-27822	rows	
104-65	27822-27823	=	
104-66	27823-27824	2	
104-67	27825-27830	loops	
104-68	27830-27831	=	
104-69	27831-27832	1	
104-70	27832-27833	)	

#Text=Index Cond: ((data -> 'keywords'::text) @&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; '["abc", "keh"]'::jsonb) Planning Time: 0.131 ms Execution Time: 0.063 ms (7 rows) The order of the items in the array on the right does not matter. For example, the following query would return the same result as the previous:
105-1	27834-27839	Index	
105-2	27840-27844	Cond	
105-3	27844-27845	:	
105-4	27846-27847	(	
105-5	27847-27848	(	
105-6	27848-27852	data	
105-7	27853-27854	-	
105-8	27854-27855	>	
105-9	27856-27857	'	
105-10	27857-27865	keywords	
105-11	27865-27866	'	
105-12	27866-27867	:	
105-13	27867-27868	:	
105-14	27868-27872	text	
105-15	27872-27873	)	
105-16	27874-27875	@	
105-17	27875-27876	&	
105-18	27876-27879	amp	
105-19	27879-27880	;	
105-20	27880-27883	amp	
105-21	27883-27884	;	
105-22	27884-27887	amp	
105-23	27887-27888	;	
105-24	27888-27891	amp	
105-25	27891-27892	;	
105-26	27892-27895	amp	
105-27	27895-27896	;	
105-28	27896-27899	amp	
105-29	27899-27900	;	
105-30	27900-27903	amp	
105-31	27903-27904	;	
105-32	27904-27907	amp	
105-33	27907-27908	;	
105-34	27908-27911	amp	
105-35	27911-27912	;	
105-36	27912-27915	amp	
105-37	27915-27916	;	
105-38	27916-27918	gt	
105-39	27918-27919	;	
105-40	27920-27921	'	
105-41	27921-27922	[	
105-42	27922-27923	"	
105-43	27923-27926	abc	
105-44	27926-27927	"	
105-45	27927-27928	,	
105-46	27929-27930	"	
105-47	27930-27933	keh	
105-48	27933-27934	"	
105-49	27934-27935	]	
105-50	27935-27936	'	
105-51	27936-27937	:	
105-52	27937-27938	:	
105-53	27938-27943	jsonb	
105-54	27943-27944	)	
105-55	27945-27953	Planning	
105-56	27954-27958	Time	
105-57	27958-27959	:	
105-58	27960-27965	0.131	
105-59	27966-27968	ms	
105-60	27969-27978	Execution	
105-61	27979-27983	Time	
105-62	27983-27984	:	
105-63	27985-27990	0.063	
105-64	27991-27993	ms	
105-65	27994-27995	(	
105-66	27995-27996	7	
105-67	27997-28001	rows	
105-68	28001-28002	)	
105-69	28003-28006	The	
105-70	28007-28012	order	
105-71	28013-28015	of	
105-72	28016-28019	the	
105-73	28020-28025	items	
105-74	28026-28028	in	
105-75	28029-28032	the	
105-76	28033-28038	array	
105-77	28039-28041	on	
105-78	28042-28045	the	
105-79	28046-28051	right	
105-80	28052-28056	does	
105-81	28057-28060	not	
105-82	28061-28067	matter	
105-83	28067-28068	.	
105-84	28069-28072	For	
105-85	28073-28080	example	
105-86	28080-28081	,	
105-87	28082-28085	the	
105-88	28086-28095	following	
105-89	28096-28101	query	
105-90	28102-28107	would	
105-91	28108-28114	return	
105-92	28115-28118	the	
105-93	28119-28123	same	
105-94	28124-28130	result	
105-95	28131-28133	as	
105-96	28134-28137	the	
105-97	28138-28146	previous	
105-98	28146-28147	:	

#Text=demo=# explain analyze select * from books where data->'keywords' @> '["keh","abc"]'::jsonb; All elements in the right side array of the containment operator need to be present - basically like an "AND" operator. If you want "OR" behavior, you can construct it in the WHERE clause:
106-1	28148-28152	demo	
106-2	28152-28153	=	
106-3	28153-28154	#	
106-4	28155-28162	explain	
106-5	28163-28170	analyze	
106-6	28171-28177	select	
106-7	28178-28179	*	
106-8	28180-28184	from	
106-9	28185-28190	books	
106-10	28191-28196	where	
106-11	28197-28201	data	
106-12	28201-28202	-	
106-13	28202-28203	>	
106-14	28203-28204	'	
106-15	28204-28212	keywords	
106-16	28212-28213	'	
106-17	28214-28215	@	
106-18	28215-28216	>	
106-19	28217-28218	'	
106-20	28218-28219	[	
106-21	28219-28220	"	
106-22	28220-28223	keh	
106-23	28223-28224	"	
106-24	28224-28225	,	
106-25	28225-28226	"	
106-26	28226-28229	abc	
106-27	28229-28230	"	
106-28	28230-28231	]	
106-29	28231-28232	'	
106-30	28232-28233	:	
106-31	28233-28234	:	
106-32	28234-28239	jsonb	
106-33	28239-28240	;	
106-34	28241-28244	All	
106-35	28245-28253	elements	
106-36	28254-28256	in	
106-37	28257-28260	the	
106-38	28261-28266	right	
106-39	28267-28271	side	
106-40	28272-28277	array	
106-41	28278-28280	of	
106-42	28281-28284	the	
106-43	28285-28296	containment	
106-44	28297-28305	operator	
106-45	28306-28310	need	
106-46	28311-28313	to	
106-47	28314-28316	be	
106-48	28317-28324	present	
106-49	28325-28326	-	
106-50	28327-28336	basically	
106-51	28337-28341	like	
106-52	28342-28344	an	
106-53	28345-28346	"	
106-54	28346-28349	AND	
106-55	28349-28350	"	
106-56	28351-28359	operator	
106-57	28359-28360	.	
106-58	28361-28363	If	
106-59	28364-28367	you	
106-60	28368-28372	want	
106-61	28373-28374	"	
106-62	28374-28376	OR	
106-63	28376-28377	"	
106-64	28378-28386	behavior	
106-65	28386-28387	,	
106-66	28388-28391	you	
106-67	28392-28395	can	
106-68	28396-28405	construct	
106-69	28406-28408	it	
106-70	28409-28411	in	
106-71	28412-28415	the	
106-72	28416-28421	WHERE	
106-73	28422-28428	clause	
106-74	28428-28429	:	

#Text=demo=# explain analyze select * from books where (data->'keywords' @> '["abc"]'::jsonb OR data->'keywords' @> '["keh"]'::jsonb); More details on the behavior of the containment operators with arrays can be found in the documentation. SQL/JSON & JSONPath
107-1	28430-28434	demo	
107-2	28434-28435	=	
107-3	28435-28436	#	
107-4	28437-28444	explain	
107-5	28445-28452	analyze	
107-6	28453-28459	select	
107-7	28460-28461	*	
107-8	28462-28466	from	
107-9	28467-28472	books	
107-10	28473-28478	where	
107-11	28479-28480	(	
107-12	28480-28484	data	
107-13	28484-28485	-	
107-14	28485-28486	>	
107-15	28486-28487	'	
107-16	28487-28495	keywords	
107-17	28495-28496	'	
107-18	28497-28498	@	
107-19	28498-28499	>	
107-20	28500-28501	'	
107-21	28501-28502	[	
107-22	28502-28503	"	
107-23	28503-28506	abc	
107-24	28506-28507	"	
107-25	28507-28508	]	
107-26	28508-28509	'	
107-27	28509-28510	:	
107-28	28510-28511	:	
107-29	28511-28516	jsonb	
107-30	28517-28519	OR	
107-31	28520-28524	data	
107-32	28524-28525	-	
107-33	28525-28526	>	
107-34	28526-28527	'	
107-35	28527-28535	keywords	
107-36	28535-28536	'	
107-37	28537-28538	@	
107-38	28538-28539	>	
107-39	28540-28541	'	
107-40	28541-28542	[	
107-41	28542-28543	"	
107-42	28543-28546	keh	
107-43	28546-28547	"	
107-44	28547-28548	]	
107-45	28548-28549	'	
107-46	28549-28550	:	
107-47	28550-28551	:	
107-48	28551-28556	jsonb	
107-49	28556-28557	)	
107-50	28557-28558	;	
107-51	28559-28563	More	
107-52	28564-28571	details	
107-53	28572-28574	on	
107-54	28575-28578	the	
107-55	28579-28587	behavior	
107-56	28588-28590	of	
107-57	28591-28594	the	
107-58	28595-28606	containment	
107-59	28607-28616	operators	
107-60	28617-28621	with	
107-61	28622-28628	arrays	
107-62	28629-28632	can	
107-63	28633-28635	be	
107-64	28636-28641	found	
107-65	28642-28644	in	
107-66	28645-28648	the	
107-67	28649-28662	documentation	
107-68	28662-28663	.	
107-69	28664-28667	SQL	
107-70	28667-28668	/	
107-71	28668-28672	JSON	
107-72	28673-28674	&	
107-73	28675-28683	JSONPath	

#Text=SQL standard added support for JSON  in SQL - SQL/JSON Standard-2016. With the PostgreSQL 12/13 releases, PostgreSQL has one of the best implementations of the SQL/JSON standard. For more details refer to the PostgreSQL 12 announcement. One of the core features of SQL/JSON is support for the JSONPath language to query JSONB data. JSONPath allows you to specify an expression (using a syntax similar to the property access notation in Javascript) to query your JSONB data. This makes it simple and intuitive, but is also very powerful to query your JSONB data. Think of  JSONPath as the logical equivalent of XPath for XML.
108-1	28684-28687	SQL	
108-2	28688-28696	standard	
108-3	28697-28702	added	
108-4	28703-28710	support	
108-5	28711-28714	for	
108-6	28715-28719	JSON	
108-7	28719-28720	 	
108-8	28721-28723	in	
108-9	28724-28727	SQL	
108-10	28728-28729	-	
108-11	28730-28733	SQL	
108-12	28733-28734	/	
108-13	28734-28738	JSON	
108-14	28739-28747	Standard	
108-15	28747-28748	-	
108-16	28748-28752	2016	
108-17	28752-28753	.	
108-18	28754-28758	With	
108-19	28758-28759	 	
108-20	28759-28762	the	
108-21	28763-28773	PostgreSQL	
108-22	28773-28774	 	
108-23	28774-28776	12	
108-24	28776-28777	/	
108-25	28777-28779	13	
108-26	28780-28788	releases	
108-27	28788-28789	,	
108-28	28790-28800	PostgreSQL	
108-29	28801-28804	has	
108-30	28805-28808	one	
108-31	28809-28811	of	
108-32	28812-28815	the	
108-33	28816-28820	best	
108-34	28821-28836	implementations	
108-35	28837-28839	of	
108-36	28840-28843	the	
108-37	28844-28847	SQL	
108-38	28847-28848	/	
108-39	28848-28852	JSON	
108-40	28853-28861	standard	
108-41	28861-28862	.	
108-42	28863-28866	For	
108-43	28867-28871	more	
108-44	28872-28879	details	
108-45	28880-28885	refer	
108-46	28886-28888	to	
108-47	28889-28892	the	
108-48	28893-28903	PostgreSQL	
108-49	28904-28906	12	
108-50	28907-28919	announcement	
108-51	28919-28920	.	
108-52	28921-28924	One	
108-53	28925-28927	of	
108-54	28928-28931	the	
108-55	28932-28936	core	
108-56	28937-28945	features	
108-57	28946-28948	of	
108-58	28949-28952	SQL	
108-59	28952-28953	/	
108-60	28953-28957	JSON	
108-61	28958-28960	is	
108-62	28961-28968	support	
108-63	28969-28972	for	
108-64	28973-28976	the	
108-65	28977-28985	JSONPath	
108-66	28986-28994	language	
108-67	28995-28997	to	
108-68	28998-29003	query	
108-69	29004-29009	JSONB	
108-70	29010-29014	data	
108-71	29014-29015	.	
108-72	29016-29024	JSONPath	
108-73	29025-29031	allows	
108-74	29032-29035	you	
108-75	29036-29038	to	
108-76	29039-29046	specify	
108-77	29047-29049	an	
108-78	29050-29060	expression	
108-79	29061-29062	(	
108-80	29062-29067	using	
108-81	29068-29069	a	
108-82	29070-29076	syntax	
108-83	29077-29084	similar	
108-84	29085-29087	to	
108-85	29088-29091	the	
108-86	29092-29100	property	
108-87	29101-29107	access	
108-88	29108-29116	notation	
108-89	29117-29119	in	
108-90	29120-29130	Javascript	
108-91	29130-29131	)	
108-92	29132-29134	to	
108-93	29135-29140	query	
108-94	29141-29145	your	
108-95	29146-29151	JSONB	
108-96	29152-29156	data	
108-97	29156-29157	.	
108-98	29158-29162	This	
108-99	29163-29168	makes	
108-100	29169-29171	it	
108-101	29172-29178	simple	
108-102	29178-29179	 	
108-103	29179-29182	and	
108-104	29183-29192	intuitive	
108-105	29192-29193	,	
108-106	29194-29197	but	
108-107	29198-29200	is	
108-108	29201-29205	also	
108-109	29206-29210	very	
108-110	29211-29219	powerful	
108-111	29220-29222	to	
108-112	29223-29228	query	
108-113	29229-29233	your	
108-114	29234-29239	JSONB	
108-115	29240-29244	data	
108-116	29244-29245	.	
108-117	29246-29251	Think	
108-118	29252-29254	of	
108-119	29254-29255	 	
108-120	29256-29264	JSONPath	
108-121	29265-29267	as	
108-122	29268-29271	the	
108-123	29272-29279	logical	
108-124	29280-29290	equivalent	
108-125	29291-29293	of	
108-126	29294-29299	XPath	
108-127	29300-29303	for	
108-128	29304-29307	XML	
108-129	29307-29308	.	

#Text=.key Returns an object member with the specified key. [*] Wildcard array element accessor that returns all array elements. Wildcard member accessor that returns the values of all members located at the top level of the current object. .**
109-1	29309-29310	.	
109-2	29310-29313	key	
109-3	29314-29321	Returns	
109-4	29322-29324	an	
109-5	29325-29331	object	
109-6	29332-29338	member	
109-7	29339-29343	with	
109-8	29344-29347	the	
109-9	29348-29357	specified	
109-10	29358-29361	key	
109-11	29361-29362	.	
109-12	29363-29364	[	
109-13	29364-29365	*	
109-14	29365-29366	]	
109-15	29367-29375	Wildcard	
109-16	29376-29381	array	
109-17	29382-29389	element	
109-18	29390-29398	accessor	
109-19	29399-29403	that	
109-20	29404-29411	returns	
109-21	29412-29415	all	
109-22	29416-29421	array	
109-23	29422-29430	elements	
109-24	29430-29431	.	
109-25	29432-29440	Wildcard	
109-26	29441-29447	member	
109-27	29448-29456	accessor	
109-28	29457-29461	that	
109-29	29462-29469	returns	
109-30	29470-29473	the	
109-31	29474-29480	values	
109-32	29481-29483	of	
109-33	29484-29487	all	
109-34	29488-29495	members	
109-35	29496-29503	located	
109-36	29504-29506	at	
109-37	29507-29510	the	
109-38	29511-29514	top	
109-39	29515-29520	level	
109-40	29521-29523	of	
109-41	29524-29527	the	
109-42	29528-29535	current	
109-43	29536-29542	object	
109-44	29542-29543	.	
109-45	29544-29545	.	
109-46	29545-29546	*	
109-47	29546-29547	*	

#Text=Recursive wildcard member accessor that processes all levels of the JSON hierarchy of the current object and returns all the member values, regardless of their nesting level. Refer to JSONPath documentation for the full list of operators. JSONPath also supports a variety of filter expressions. JSONPath Functions PostgreSQL 12 provides several functions to use JSONPath to query your JSONB data. From the docs:
110-1	29548-29557	Recursive	
110-2	29558-29566	wildcard	
110-3	29567-29573	member	
110-4	29574-29582	accessor	
110-5	29583-29587	that	
110-6	29588-29597	processes	
110-7	29598-29601	all	
110-8	29602-29608	levels	
110-9	29609-29611	of	
110-10	29612-29615	the	
110-11	29616-29620	JSON	
110-12	29621-29630	hierarchy	
110-13	29631-29633	of	
110-14	29634-29637	the	
110-15	29638-29645	current	
110-16	29646-29652	object	
110-17	29653-29656	and	
110-18	29657-29664	returns	
110-19	29665-29668	all	
110-20	29669-29672	the	
110-21	29673-29679	member	
110-22	29680-29686	values	
110-23	29686-29687	,	
110-24	29688-29698	regardless	
110-25	29699-29701	of	
110-26	29702-29707	their	
110-27	29708-29715	nesting	
110-28	29716-29721	level	
110-29	29721-29722	.	
110-30	29723-29728	Refer	
110-31	29729-29731	to	
110-32	29732-29740	JSONPath	
110-33	29741-29754	documentation	
110-34	29755-29758	for	
110-35	29759-29762	the	
110-36	29763-29767	full	
110-37	29768-29772	list	
110-38	29773-29775	of	
110-39	29776-29785	operators	
110-40	29785-29786	.	
110-41	29787-29795	JSONPath	
110-42	29796-29800	also	
110-43	29801-29809	supports	
110-44	29810-29811	a	
110-45	29812-29819	variety	
110-46	29820-29822	of	
110-47	29823-29829	filter	
110-48	29830-29841	expressions	
110-49	29841-29842	.	
110-50	29843-29851	JSONPath	
110-51	29852-29861	Functions	
110-52	29862-29872	PostgreSQL	
110-53	29873-29875	12	
110-54	29876-29884	provides	
110-55	29885-29892	several	
110-56	29893-29902	functions	
110-57	29903-29905	to	
110-58	29906-29909	use	
110-59	29910-29918	JSONPath	
110-60	29919-29921	to	
110-61	29922-29927	query	
110-62	29928-29932	your	
110-63	29933-29938	JSONB	
110-64	29939-29943	data	
110-65	29943-29944	.	
110-66	29945-29949	From	
110-67	29950-29953	the	
110-68	29954-29958	docs	
110-69	29958-29959	:	

#Text=jsonb_path_exists - Checks whether JSONB path returns any item for the specified JSON value. jsonb_path_match - Returns the result of JSONB path predicate check for the specified JSONB value. Only the first item of the result is taken into account. If the result is not Boolean, then null is returned.
111-1	29960-29977	jsonb_path_exists	
111-2	29978-29979	-	
111-3	29980-29986	Checks	
111-4	29987-29994	whether	
111-5	29995-30000	JSONB	
111-6	30001-30005	path	
111-7	30006-30013	returns	
111-8	30014-30017	any	
111-9	30018-30022	item	
111-10	30023-30026	for	
111-11	30027-30030	the	
111-12	30031-30040	specified	
111-13	30041-30045	JSON	
111-14	30046-30051	value	
111-15	30051-30052	.	
111-16	30053-30069	jsonb_path_match	
111-17	30070-30071	-	
111-18	30072-30079	Returns	
111-19	30080-30083	the	
111-20	30084-30090	result	
111-21	30091-30093	of	
111-22	30094-30099	JSONB	
111-23	30100-30104	path	
111-24	30105-30114	predicate	
111-25	30115-30120	check	
111-26	30121-30124	for	
111-27	30125-30128	the	
111-28	30129-30138	specified	
111-29	30139-30144	JSONB	
111-30	30145-30150	value	
111-31	30150-30151	.	
111-32	30152-30156	Only	
111-33	30157-30160	the	
111-34	30161-30166	first	
111-35	30167-30171	item	
111-36	30172-30174	of	
111-37	30175-30178	the	
111-38	30179-30185	result	
111-39	30186-30188	is	
111-40	30189-30194	taken	
111-41	30195-30199	into	
111-42	30200-30207	account	
111-43	30207-30208	.	
111-44	30209-30211	If	
111-45	30212-30215	the	
111-46	30216-30222	result	
111-47	30223-30225	is	
111-48	30226-30229	not	
111-49	30230-30237	Boolean	
111-50	30237-30238	,	
111-51	30239-30243	then	
111-52	30244-30248	null	
111-53	30249-30251	is	
111-54	30252-30260	returned	
111-55	30260-30261	.	

#Text=jsonb_path_query - Gets all JSONB items returned by JSONB path for the specified JSONB value. There are also a couple of other variants of this function that handle arrays of objects. Let's start with a simple query - finding books by publisher: demo=# select * from books where data @@ '$.publisher == "ktjKEZ1tvq"'; id | author | isbn | rating | data
112-1	30262-30278	jsonb_path_query	
112-2	30279-30280	-	
112-3	30281-30285	Gets	
112-4	30286-30289	all	
112-5	30290-30295	JSONB	
112-6	30296-30301	items	
112-7	30302-30310	returned	
112-8	30311-30313	by	
112-9	30314-30319	JSONB	
112-10	30320-30324	path	
112-11	30325-30328	for	
112-12	30329-30332	the	
112-13	30333-30342	specified	
112-14	30343-30348	JSONB	
112-15	30349-30354	value	
112-16	30354-30355	.	
112-17	30356-30361	There	
112-18	30362-30365	are	
112-19	30366-30370	also	
112-20	30371-30372	a	
112-21	30373-30379	couple	
112-22	30380-30382	of	
112-23	30383-30388	other	
112-24	30389-30397	variants	
112-25	30398-30400	of	
112-26	30401-30405	this	
112-27	30406-30414	function	
112-28	30415-30419	that	
112-29	30420-30426	handle	
112-30	30427-30433	arrays	
112-31	30434-30436	of	
112-32	30437-30444	objects	
112-33	30444-30445	.	
112-34	30446-30451	Let's	
112-35	30452-30457	start	
112-36	30458-30462	with	
112-37	30463-30464	a	
112-38	30465-30471	simple	
112-39	30472-30477	query	
112-40	30478-30479	-	
112-41	30480-30487	finding	
112-42	30488-30493	books	
112-43	30494-30496	by	
112-44	30497-30506	publisher	
112-45	30506-30507	:	
112-46	30508-30512	demo	
112-47	30512-30513	=	
112-48	30513-30514	#	
112-49	30515-30521	select	
112-50	30522-30523	*	
112-51	30524-30528	from	
112-52	30529-30534	books	
112-53	30535-30540	where	
112-54	30541-30545	data	
112-55	30546-30547	@	
112-56	30547-30548	@	
112-57	30549-30550	'	
112-58	30550-30551	$	
112-59	30551-30552	.	
112-60	30552-30561	publisher	
112-61	30562-30563	=	
112-62	30563-30564	=	
112-63	30565-30566	"	
112-64	30566-30576	ktjKEZ1tvq	
112-65	30576-30577	"	
112-66	30577-30578	'	
112-67	30578-30579	;	
112-68	30580-30582	id	
112-69	30583-30584	|	
112-70	30585-30591	author	
112-71	30592-30593	|	
112-72	30594-30598	isbn	
112-73	30599-30600	|	
112-74	30601-30607	rating	
112-75	30608-30609	|	
112-76	30610-30614	data	

#Text=---------+-----------------+------------+--------+---------------------------------------------------------------------------------------------------------------------------------- 1000001 | 4RNsovI2haTgU7l | GwSoX67gLS | 2 | {"tags": {"nk542369": {"ik55240": "iv305393"}}, "keywords": ["abc", "def", "geh"], "publisher": "ktjKEZ1tvq", "criticrating": 0}
113-1	30615-30616	-	
113-2	30616-30617	-	
113-3	30617-30618	-	
113-4	30618-30619	-	
113-5	30619-30620	-	
113-6	30620-30621	-	
113-7	30621-30622	-	
113-8	30622-30623	-	
113-9	30623-30624	-	
113-10	30624-30625	+	
113-11	30625-30626	-	
113-12	30626-30627	-	
113-13	30627-30628	-	
113-14	30628-30629	-	
113-15	30629-30630	-	
113-16	30630-30631	-	
113-17	30631-30632	-	
113-18	30632-30633	-	
113-19	30633-30634	-	
113-20	30634-30635	-	
113-21	30635-30636	-	
113-22	30636-30637	-	
113-23	30637-30638	-	
113-24	30638-30639	-	
113-25	30639-30640	-	
113-26	30640-30641	-	
113-27	30641-30642	-	
113-28	30642-30643	+	
113-29	30643-30644	-	
113-30	30644-30645	-	
113-31	30645-30646	-	
113-32	30646-30647	-	
113-33	30647-30648	-	
113-34	30648-30649	-	
113-35	30649-30650	-	
113-36	30650-30651	-	
113-37	30651-30652	-	
113-38	30652-30653	-	
113-39	30653-30654	-	
113-40	30654-30655	-	
113-41	30655-30656	+	
113-42	30656-30657	-	
113-43	30657-30658	-	
113-44	30658-30659	-	
113-45	30659-30660	-	
113-46	30660-30661	-	
113-47	30661-30662	-	
113-48	30662-30663	-	
113-49	30663-30664	-	
113-50	30664-30665	+	
113-51	30665-30666	-	
113-52	30666-30667	-	
113-53	30667-30668	-	
113-54	30668-30669	-	
113-55	30669-30670	-	
113-56	30670-30671	-	
113-57	30671-30672	-	
113-58	30672-30673	-	
113-59	30673-30674	-	
113-60	30674-30675	-	
113-61	30675-30676	-	
113-62	30676-30677	-	
113-63	30677-30678	-	
113-64	30678-30679	-	
113-65	30679-30680	-	
113-66	30680-30681	-	
113-67	30681-30682	-	
113-68	30682-30683	-	
113-69	30683-30684	-	
113-70	30684-30685	-	
113-71	30685-30686	-	
113-72	30686-30687	-	
113-73	30687-30688	-	
113-74	30688-30689	-	
113-75	30689-30690	-	
113-76	30690-30691	-	
113-77	30691-30692	-	
113-78	30692-30693	-	
113-79	30693-30694	-	
113-80	30694-30695	-	
113-81	30695-30696	-	
113-82	30696-30697	-	
113-83	30697-30698	-	
113-84	30698-30699	-	
113-85	30699-30700	-	
113-86	30700-30701	-	
113-87	30701-30702	-	
113-88	30702-30703	-	
113-89	30703-30704	-	
113-90	30704-30705	-	
113-91	30705-30706	-	
113-92	30706-30707	-	
113-93	30707-30708	-	
113-94	30708-30709	-	
113-95	30709-30710	-	
113-96	30710-30711	-	
113-97	30711-30712	-	
113-98	30712-30713	-	
113-99	30713-30714	-	
113-100	30714-30715	-	
113-101	30715-30716	-	
113-102	30716-30717	-	
113-103	30717-30718	-	
113-104	30718-30719	-	
113-105	30719-30720	-	
113-106	30720-30721	-	
113-107	30721-30722	-	
113-108	30722-30723	-	
113-109	30723-30724	-	
113-110	30724-30725	-	
113-111	30725-30726	-	
113-112	30726-30727	-	
113-113	30727-30728	-	
113-114	30728-30729	-	
113-115	30729-30730	-	
113-116	30730-30731	-	
113-117	30731-30732	-	
113-118	30732-30733	-	
113-119	30733-30734	-	
113-120	30734-30735	-	
113-121	30735-30736	-	
113-122	30736-30737	-	
113-123	30737-30738	-	
113-124	30738-30739	-	
113-125	30739-30740	-	
113-126	30740-30741	-	
113-127	30741-30742	-	
113-128	30742-30743	-	
113-129	30743-30744	-	
113-130	30744-30745	-	
113-131	30745-30746	-	
113-132	30746-30747	-	
113-133	30747-30748	-	
113-134	30748-30749	-	
113-135	30749-30750	-	
113-136	30750-30751	-	
113-137	30751-30752	-	
113-138	30752-30753	-	
113-139	30753-30754	-	
113-140	30754-30755	-	
113-141	30755-30756	-	
113-142	30756-30757	-	
113-143	30757-30758	-	
113-144	30758-30759	-	
113-145	30759-30760	-	
113-146	30760-30761	-	
113-147	30761-30762	-	
113-148	30762-30763	-	
113-149	30763-30764	-	
113-150	30764-30765	-	
113-151	30765-30766	-	
113-152	30766-30767	-	
113-153	30767-30768	-	
113-154	30768-30769	-	
113-155	30769-30770	-	
113-156	30770-30771	-	
113-157	30771-30772	-	
113-158	30772-30773	-	
113-159	30773-30774	-	
113-160	30774-30775	-	
113-161	30775-30776	-	
113-162	30776-30777	-	
113-163	30777-30778	-	
113-164	30778-30779	-	
113-165	30779-30780	-	
113-166	30780-30781	-	
113-167	30781-30782	-	
113-168	30782-30783	-	
113-169	30783-30784	-	
113-170	30784-30785	-	
113-171	30785-30786	-	
113-172	30786-30787	-	
113-173	30787-30788	-	
113-174	30788-30789	-	
113-175	30789-30790	-	
113-176	30790-30791	-	
113-177	30791-30792	-	
113-178	30792-30793	-	
113-179	30793-30794	-	
113-180	30794-30795	-	
113-181	30796-30803	1000001	
113-182	30804-30805	|	
113-183	30806-30821	4RNsovI2haTgU7l	
113-184	30822-30823	|	
113-185	30824-30834	GwSoX67gLS	
113-186	30835-30836	|	
113-187	30837-30838	2	
113-188	30839-30840	|	
113-189	30841-30842	{	
113-190	30842-30843	"	
113-191	30843-30847	tags	
113-192	30847-30848	"	
113-193	30848-30849	:	
113-194	30850-30851	{	
113-195	30851-30852	"	
113-196	30852-30860	nk542369	
113-197	30860-30861	"	
113-198	30861-30862	:	
113-199	30863-30864	{	
113-200	30864-30865	"	
113-201	30865-30872	ik55240	
113-202	30872-30873	"	
113-203	30873-30874	:	
113-204	30875-30876	"	
113-205	30876-30884	iv305393	
113-206	30884-30885	"	
113-207	30885-30886	}	
113-208	30886-30887	}	
113-209	30887-30888	,	
113-210	30889-30890	"	
113-211	30890-30898	keywords	
113-212	30898-30899	"	
113-213	30899-30900	:	
113-214	30901-30902	[	
113-215	30902-30903	"	
113-216	30903-30906	abc	
113-217	30906-30907	"	
113-218	30907-30908	,	
113-219	30909-30910	"	
113-220	30910-30913	def	
113-221	30913-30914	"	
113-222	30914-30915	,	
113-223	30916-30917	"	
113-224	30917-30920	geh	
113-225	30920-30921	"	
113-226	30921-30922	]	
113-227	30922-30923	,	
113-228	30924-30925	"	
113-229	30925-30934	publisher	
113-230	30934-30935	"	
113-231	30935-30936	:	
113-232	30937-30938	"	
113-233	30938-30948	ktjKEZ1tvq	
113-234	30948-30949	"	
113-235	30949-30950	,	
113-236	30951-30952	"	
113-237	30952-30964	criticrating	
113-238	30964-30965	"	
113-239	30965-30966	:	
113-240	30967-30968	0	
113-241	30968-30969	}	

#Text=(1 row) demo=# explain analyze select * from books where data @@ '$.publisher == "ktjKEZ1tvq"'; QUERY PLAN
114-1	30970-30971	(	
114-2	30971-30972	1	
114-3	30973-30976	row	
114-4	30976-30977	)	
114-5	30978-30982	demo	
114-6	30982-30983	=	
114-7	30983-30984	#	
114-8	30985-30992	explain	
114-9	30993-31000	analyze	
114-10	31001-31007	select	
114-11	31008-31009	*	
114-12	31010-31014	from	
114-13	31015-31020	books	
114-14	31021-31026	where	
114-15	31027-31031	data	
114-16	31032-31033	@	
114-17	31033-31034	@	
114-18	31035-31036	'	
114-19	31036-31037	$	
114-20	31037-31038	.	
114-21	31038-31047	publisher	
114-22	31048-31049	=	
114-23	31049-31050	=	
114-24	31051-31052	"	
114-25	31052-31062	ktjKEZ1tvq	
114-26	31062-31063	"	
114-27	31063-31064	'	
114-28	31064-31065	;	
114-29	31066-31071	QUERY	
114-30	31072-31076	PLAN	

#Text=-------------------------------------------------------------------------------------------------------------------- Bitmap Heap Scan on books (cost=21.75..1014.25 rows=1000 width=158) (actual time=0.123..0.124 rows=1 loops=1)
115-1	31077-31078	-	
115-2	31078-31079	-	
115-3	31079-31080	-	
115-4	31080-31081	-	
115-5	31081-31082	-	
115-6	31082-31083	-	
115-7	31083-31084	-	
115-8	31084-31085	-	
115-9	31085-31086	-	
115-10	31086-31087	-	
115-11	31087-31088	-	
115-12	31088-31089	-	
115-13	31089-31090	-	
115-14	31090-31091	-	
115-15	31091-31092	-	
115-16	31092-31093	-	
115-17	31093-31094	-	
115-18	31094-31095	-	
115-19	31095-31096	-	
115-20	31096-31097	-	
115-21	31097-31098	-	
115-22	31098-31099	-	
115-23	31099-31100	-	
115-24	31100-31101	-	
115-25	31101-31102	-	
115-26	31102-31103	-	
115-27	31103-31104	-	
115-28	31104-31105	-	
115-29	31105-31106	-	
115-30	31106-31107	-	
115-31	31107-31108	-	
115-32	31108-31109	-	
115-33	31109-31110	-	
115-34	31110-31111	-	
115-35	31111-31112	-	
115-36	31112-31113	-	
115-37	31113-31114	-	
115-38	31114-31115	-	
115-39	31115-31116	-	
115-40	31116-31117	-	
115-41	31117-31118	-	
115-42	31118-31119	-	
115-43	31119-31120	-	
115-44	31120-31121	-	
115-45	31121-31122	-	
115-46	31122-31123	-	
115-47	31123-31124	-	
115-48	31124-31125	-	
115-49	31125-31126	-	
115-50	31126-31127	-	
115-51	31127-31128	-	
115-52	31128-31129	-	
115-53	31129-31130	-	
115-54	31130-31131	-	
115-55	31131-31132	-	
115-56	31132-31133	-	
115-57	31133-31134	-	
115-58	31134-31135	-	
115-59	31135-31136	-	
115-60	31136-31137	-	
115-61	31137-31138	-	
115-62	31138-31139	-	
115-63	31139-31140	-	
115-64	31140-31141	-	
115-65	31141-31142	-	
115-66	31142-31143	-	
115-67	31143-31144	-	
115-68	31144-31145	-	
115-69	31145-31146	-	
115-70	31146-31147	-	
115-71	31147-31148	-	
115-72	31148-31149	-	
115-73	31149-31150	-	
115-74	31150-31151	-	
115-75	31151-31152	-	
115-76	31152-31153	-	
115-77	31153-31154	-	
115-78	31154-31155	-	
115-79	31155-31156	-	
115-80	31156-31157	-	
115-81	31157-31158	-	
115-82	31158-31159	-	
115-83	31159-31160	-	
115-84	31160-31161	-	
115-85	31161-31162	-	
115-86	31162-31163	-	
115-87	31163-31164	-	
115-88	31164-31165	-	
115-89	31165-31166	-	
115-90	31166-31167	-	
115-91	31167-31168	-	
115-92	31168-31169	-	
115-93	31169-31170	-	
115-94	31170-31171	-	
115-95	31171-31172	-	
115-96	31172-31173	-	
115-97	31173-31174	-	
115-98	31174-31175	-	
115-99	31175-31176	-	
115-100	31176-31177	-	
115-101	31177-31178	-	
115-102	31178-31179	-	
115-103	31179-31180	-	
115-104	31180-31181	-	
115-105	31181-31182	-	
115-106	31182-31183	-	
115-107	31183-31184	-	
115-108	31184-31185	-	
115-109	31185-31186	-	
115-110	31186-31187	-	
115-111	31187-31188	-	
115-112	31188-31189	-	
115-113	31189-31190	-	
115-114	31190-31191	-	
115-115	31191-31192	-	
115-116	31192-31193	-	
115-117	31194-31200	Bitmap	
115-118	31201-31205	Heap	
115-119	31206-31210	Scan	
115-120	31211-31213	on	
115-121	31214-31219	books	
115-122	31220-31221	(	
115-123	31221-31225	cost	
115-124	31225-31226	=	
115-125	31226-31231	21.75	
115-126	31231-31232	.	
115-127	31232-31240	.1014.25	
115-128	31241-31245	rows	
115-129	31245-31246	=	
115-130	31246-31250	1000	
115-131	31251-31256	width	
115-132	31256-31257	=	
115-133	31257-31260	158	
115-134	31260-31261	)	
115-135	31262-31263	(	
115-136	31263-31269	actual	
115-137	31270-31274	time	
115-138	31274-31275	=	
115-139	31275-31280	0.123	
115-140	31280-31281	.	
115-141	31281-31287	.0.124	
115-142	31288-31292	rows	
115-143	31292-31293	=	
115-144	31293-31294	1	
115-145	31295-31300	loops	
115-146	31300-31301	=	
115-147	31301-31302	1	
115-148	31302-31303	)	

#Text=Recheck Cond: (data @@ '($."publisher" == "ktjKEZ1tvq")'::jsonpath) Heap Blocks: exact=1 -> Bitmap Index Scan on datagin (cost=0.00..21.50 rows=1000 width=0) (actual time=0.110..0.110 rows=1 loops=1)
116-1	31304-31311	Recheck	
116-2	31312-31316	Cond	
116-3	31316-31317	:	
116-4	31318-31319	(	
116-5	31319-31323	data	
116-6	31324-31325	@	
116-7	31325-31326	@	
116-8	31327-31328	'	
116-9	31328-31329	(	
116-10	31329-31330	$	
116-11	31330-31331	.	
116-12	31331-31332	"	
116-13	31332-31341	publisher	
116-14	31341-31342	"	
116-15	31343-31344	=	
116-16	31344-31345	=	
116-17	31346-31347	"	
116-18	31347-31357	ktjKEZ1tvq	
116-19	31357-31358	"	
116-20	31358-31359	)	
116-21	31359-31360	'	
116-22	31360-31361	:	
116-23	31361-31362	:	
116-24	31362-31370	jsonpath	
116-25	31370-31371	)	
116-26	31372-31376	Heap	
116-27	31377-31383	Blocks	
116-28	31383-31384	:	
116-29	31385-31390	exact	
116-30	31390-31391	=	
116-31	31391-31392	1	
116-32	31393-31394	-	
116-33	31394-31395	>	
116-34	31396-31402	Bitmap	
116-35	31403-31408	Index	
116-36	31409-31413	Scan	
116-37	31414-31416	on	
116-38	31417-31424	datagin	
116-39	31425-31426	(	
116-40	31426-31430	cost	
116-41	31430-31431	=	
116-42	31431-31435	0.00	
116-43	31435-31436	.	
116-44	31436-31442	.21.50	
116-45	31443-31447	rows	
116-46	31447-31448	=	
116-47	31448-31452	1000	
116-48	31453-31458	width	
116-49	31458-31459	=	
116-50	31459-31460	0	
116-51	31460-31461	)	
116-52	31462-31463	(	
116-53	31463-31469	actual	
116-54	31470-31474	time	
116-55	31474-31475	=	
116-56	31475-31480	0.110	
116-57	31480-31481	.	
116-58	31481-31487	.0.110	
116-59	31488-31492	rows	
116-60	31492-31493	=	
116-61	31493-31494	1	
116-62	31495-31500	loops	
116-63	31500-31501	=	
116-64	31501-31502	1	
116-65	31502-31503	)	

#Text=Index Cond: (data @@ '($."publisher" == "ktjKEZ1tvq")'::jsonpath) Planning Time: 0.137 ms Execution Time: 0.194 ms (7 rows) You can rewrite this expression as a JSONPath filter:
117-1	31504-31509	Index	
117-2	31510-31514	Cond	
117-3	31514-31515	:	
117-4	31516-31517	(	
117-5	31517-31521	data	
117-6	31522-31523	@	
117-7	31523-31524	@	
117-8	31525-31526	'	
117-9	31526-31527	(	
117-10	31527-31528	$	
117-11	31528-31529	.	
117-12	31529-31530	"	
117-13	31530-31539	publisher	
117-14	31539-31540	"	
117-15	31541-31542	=	
117-16	31542-31543	=	
117-17	31544-31545	"	
117-18	31545-31555	ktjKEZ1tvq	
117-19	31555-31556	"	
117-20	31556-31557	)	
117-21	31557-31558	'	
117-22	31558-31559	:	
117-23	31559-31560	:	
117-24	31560-31568	jsonpath	
117-25	31568-31569	)	
117-26	31570-31578	Planning	
117-27	31579-31583	Time	
117-28	31583-31584	:	
117-29	31585-31590	0.137	
117-30	31591-31593	ms	
117-31	31594-31603	Execution	
117-32	31604-31608	Time	
117-33	31608-31609	:	
117-34	31610-31615	0.194	
117-35	31616-31618	ms	
117-36	31619-31620	(	
117-37	31620-31621	7	
117-38	31622-31626	rows	
117-39	31626-31627	)	
117-40	31628-31631	You	
117-41	31632-31635	can	
117-42	31636-31643	rewrite	
117-43	31644-31648	this	
117-44	31649-31659	expression	
117-45	31660-31662	as	
117-46	31663-31664	a	
117-47	31665-31673	JSONPath	
117-48	31674-31680	filter	
117-49	31680-31681	:	

#Text=demo=# select * from books where jsonb_path_exists(data,'$.publisher ?(@ == "ktjKEZ1tvq")'); You can also use very complex query expressions. For example, let's select books where print style = hardcover and price = 100:
118-1	31682-31686	demo	
118-2	31686-31687	=	
118-3	31687-31688	#	
118-4	31689-31695	select	
118-5	31696-31697	*	
118-6	31698-31702	from	
118-7	31703-31708	books	
118-8	31709-31714	where	
118-9	31715-31732	jsonb_path_exists	
118-10	31732-31733	(	
118-11	31733-31737	data	
118-12	31737-31738	,	
118-13	31738-31739	'	
118-14	31739-31740	$	
118-15	31740-31741	.	
118-16	31741-31750	publisher	
118-17	31751-31752	?	
118-18	31752-31753	(	
118-19	31753-31754	@	
118-20	31755-31756	=	
118-21	31756-31757	=	
118-22	31758-31759	"	
118-23	31759-31769	ktjKEZ1tvq	
118-24	31769-31770	"	
118-25	31770-31771	)	
118-26	31771-31772	'	
118-27	31772-31773	)	
118-28	31773-31774	;	
118-29	31775-31778	You	
118-30	31779-31782	can	
118-31	31783-31787	also	
118-32	31788-31791	use	
118-33	31792-31796	very	
118-34	31797-31804	complex	
118-35	31805-31810	query	
118-36	31811-31822	expressions	
118-37	31822-31823	.	
118-38	31823-31824	 	
118-39	31824-31827	For	
118-40	31828-31835	example	
118-41	31835-31836	,	
118-42	31837-31842	let's	
118-43	31842-31843	 	
118-44	31843-31849	select	
118-45	31850-31855	books	
118-46	31856-31861	where	
118-47	31862-31867	print	
118-48	31868-31873	style	
118-49	31874-31875	=	
118-50	31876-31885	hardcover	
118-51	31886-31889	and	
118-52	31890-31895	price	
118-53	31896-31897	=	
118-54	31898-31901	100	
118-55	31901-31902	:	

#Text=select * from books where jsonb_path_exists(data, '$.prints[*] ?(@.style=="hc" &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; @.price == 100)'); However, index support for JSONPath is very limited at this point - this makes it dangerous to use JSONPath in the where clause. JSONPath support for indexes will be improved in subsequent releases.
119-1	31903-31909	select	
119-2	31910-31911	*	
119-3	31912-31916	from	
119-4	31917-31922	books	
119-5	31923-31928	where	
119-6	31929-31946	jsonb_path_exists	
119-7	31946-31947	(	
119-8	31947-31951	data	
119-9	31951-31952	,	
119-10	31953-31954	'	
119-11	31954-31955	$	
119-12	31955-31956	.	
119-13	31956-31962	prints	
119-14	31962-31963	[	
119-15	31963-31964	*	
119-16	31964-31965	]	
119-17	31966-31967	?	
119-18	31967-31968	(	
119-19	31968-31969	@	
119-20	31969-31970	.	
119-21	31970-31975	style	
119-22	31975-31976	=	
119-23	31976-31977	=	
119-24	31977-31978	"	
119-25	31978-31980	hc	
119-26	31980-31981	"	
119-27	31982-31983	&	
119-28	31983-31986	amp	
119-29	31986-31987	;	
119-30	31987-31990	amp	
119-31	31990-31991	;	
119-32	31991-31994	amp	
119-33	31994-31995	;	
119-34	31995-31998	amp	
119-35	31998-31999	;	
119-36	31999-32002	amp	
119-37	32002-32003	;	
119-38	32003-32004	&	
119-39	32004-32007	amp	
119-40	32007-32008	;	
119-41	32008-32011	amp	
119-42	32011-32012	;	
119-43	32012-32015	amp	
119-44	32015-32016	;	
119-45	32016-32019	amp	
119-46	32019-32020	;	
119-47	32020-32023	amp	
119-48	32023-32024	;	
119-49	32025-32026	@	
119-50	32026-32027	.	
119-51	32027-32032	price	
119-52	32033-32034	=	
119-53	32034-32035	=	
119-54	32036-32039	100	
119-55	32039-32040	)	
119-56	32040-32041	'	
119-57	32041-32042	)	
119-58	32042-32043	;	
119-59	32044-32051	However	
119-60	32051-32052	,	
119-61	32053-32058	index	
119-62	32059-32066	support	
119-63	32067-32070	for	
119-64	32071-32079	JSONPath	
119-65	32080-32082	is	
119-66	32083-32087	very	
119-67	32088-32095	limited	
119-68	32096-32098	at	
119-69	32099-32103	this	
119-70	32104-32109	point	
119-71	32110-32111	-	
119-72	32112-32116	this	
119-73	32117-32122	makes	
119-74	32123-32125	it	
119-75	32125-32126	 	
119-76	32126-32135	dangerous	
119-77	32136-32138	to	
119-78	32139-32142	use	
119-79	32143-32151	JSONPath	
119-80	32152-32154	in	
119-81	32155-32158	the	
119-82	32159-32164	where	
119-83	32165-32171	clause	
119-84	32171-32172	.	
119-85	32173-32181	JSONPath	
119-86	32182-32189	support	
119-87	32190-32193	for	
119-88	32194-32201	indexes	
119-89	32202-32206	will	
119-90	32207-32209	be	
119-91	32210-32218	improved	
119-92	32219-32221	in	
119-93	32222-32232	subsequent	
119-94	32233-32241	releases	
119-95	32241-32242	.	

#Text=demo=# explain analyze select * from books where jsonb_path_exists(data,'$.publisher ?(@ == "ktjKEZ1tvq")'); QUERY PLAN ------------------------------------------------------------------------------------------------------------
120-1	32243-32247	demo	
120-2	32247-32248	=	
120-3	32248-32249	#	
120-4	32250-32257	explain	
120-5	32258-32265	analyze	
120-6	32266-32272	select	
120-7	32273-32274	*	
120-8	32275-32279	from	
120-9	32280-32285	books	
120-10	32286-32291	where	
120-11	32292-32309	jsonb_path_exists	
120-12	32309-32310	(	
120-13	32310-32314	data	
120-14	32314-32315	,	
120-15	32315-32316	'	
120-16	32316-32317	$	
120-17	32317-32318	.	
120-18	32318-32327	publisher	
120-19	32328-32329	?	
120-20	32329-32330	(	
120-21	32330-32331	@	
120-22	32332-32333	=	
120-23	32333-32334	=	
120-24	32335-32336	"	
120-25	32336-32346	ktjKEZ1tvq	
120-26	32346-32347	"	
120-27	32347-32348	)	
120-28	32348-32349	'	
120-29	32349-32350	)	
120-30	32350-32351	;	
120-31	32352-32357	QUERY	
120-32	32358-32362	PLAN	
120-33	32363-32364	-	
120-34	32364-32365	-	
120-35	32365-32366	-	
120-36	32366-32367	-	
120-37	32367-32368	-	
120-38	32368-32369	-	
120-39	32369-32370	-	
120-40	32370-32371	-	
120-41	32371-32372	-	
120-42	32372-32373	-	
120-43	32373-32374	-	
120-44	32374-32375	-	
120-45	32375-32376	-	
120-46	32376-32377	-	
120-47	32377-32378	-	
120-48	32378-32379	-	
120-49	32379-32380	-	
120-50	32380-32381	-	
120-51	32381-32382	-	
120-52	32382-32383	-	
120-53	32383-32384	-	
120-54	32384-32385	-	
120-55	32385-32386	-	
120-56	32386-32387	-	
120-57	32387-32388	-	
120-58	32388-32389	-	
120-59	32389-32390	-	
120-60	32390-32391	-	
120-61	32391-32392	-	
120-62	32392-32393	-	
120-63	32393-32394	-	
120-64	32394-32395	-	
120-65	32395-32396	-	
120-66	32396-32397	-	
120-67	32397-32398	-	
120-68	32398-32399	-	
120-69	32399-32400	-	
120-70	32400-32401	-	
120-71	32401-32402	-	
120-72	32402-32403	-	
120-73	32403-32404	-	
120-74	32404-32405	-	
120-75	32405-32406	-	
120-76	32406-32407	-	
120-77	32407-32408	-	
120-78	32408-32409	-	
120-79	32409-32410	-	
120-80	32410-32411	-	
120-81	32411-32412	-	
120-82	32412-32413	-	
120-83	32413-32414	-	
120-84	32414-32415	-	
120-85	32415-32416	-	
120-86	32416-32417	-	
120-87	32417-32418	-	
120-88	32418-32419	-	
120-89	32419-32420	-	
120-90	32420-32421	-	
120-91	32421-32422	-	
120-92	32422-32423	-	
120-93	32423-32424	-	
120-94	32424-32425	-	
120-95	32425-32426	-	
120-96	32426-32427	-	
120-97	32427-32428	-	
120-98	32428-32429	-	
120-99	32429-32430	-	
120-100	32430-32431	-	
120-101	32431-32432	-	
120-102	32432-32433	-	
120-103	32433-32434	-	
120-104	32434-32435	-	
120-105	32435-32436	-	
120-106	32436-32437	-	
120-107	32437-32438	-	
120-108	32438-32439	-	
120-109	32439-32440	-	
120-110	32440-32441	-	
120-111	32441-32442	-	
120-112	32442-32443	-	
120-113	32443-32444	-	
120-114	32444-32445	-	
120-115	32445-32446	-	
120-116	32446-32447	-	
120-117	32447-32448	-	
120-118	32448-32449	-	
120-119	32449-32450	-	
120-120	32450-32451	-	
120-121	32451-32452	-	
120-122	32452-32453	-	
120-123	32453-32454	-	
120-124	32454-32455	-	
120-125	32455-32456	-	
120-126	32456-32457	-	
120-127	32457-32458	-	
120-128	32458-32459	-	
120-129	32459-32460	-	
120-130	32460-32461	-	
120-131	32461-32462	-	
120-132	32462-32463	-	
120-133	32463-32464	-	
120-134	32464-32465	-	
120-135	32465-32466	-	
120-136	32466-32467	-	
120-137	32467-32468	-	
120-138	32468-32469	-	
120-139	32469-32470	-	
120-140	32470-32471	-	

#Text=Seq Scan on books (cost=0.00..36307.24 rows=333340 width=158) (actual time=0.019..480.268 rows=1 loops=1) Filter: jsonb_path_exists(data, '$."publisher"?(@ == "ktjKEZ1tvq")'::jsonpath, '{}'::jsonb, false) Rows Removed by Filter: 1000028
121-1	32472-32475	Seq	
121-2	32476-32480	Scan	
121-3	32481-32483	on	
121-4	32484-32489	books	
121-5	32490-32491	(	
121-6	32491-32495	cost	
121-7	32495-32496	=	
121-8	32496-32500	0.00	
121-9	32500-32501	.	
121-10	32501-32510	.36307.24	
121-11	32511-32515	rows	
121-12	32515-32516	=	
121-13	32516-32522	333340	
121-14	32523-32528	width	
121-15	32528-32529	=	
121-16	32529-32532	158	
121-17	32532-32533	)	
121-18	32534-32535	(	
121-19	32535-32541	actual	
121-20	32542-32546	time	
121-21	32546-32547	=	
121-22	32547-32552	0.019	
121-23	32552-32553	.	
121-24	32553-32561	.480.268	
121-25	32562-32566	rows	
121-26	32566-32567	=	
121-27	32567-32568	1	
121-28	32569-32574	loops	
121-29	32574-32575	=	
121-30	32575-32576	1	
121-31	32576-32577	)	
121-32	32578-32584	Filter	
121-33	32584-32585	:	
121-34	32586-32603	jsonb_path_exists	
121-35	32603-32604	(	
121-36	32604-32608	data	
121-37	32608-32609	,	
121-38	32610-32611	'	
121-39	32611-32612	$	
121-40	32612-32613	.	
121-41	32613-32614	"	
121-42	32614-32623	publisher	
121-43	32623-32624	"	
121-44	32624-32625	?	
121-45	32625-32626	(	
121-46	32626-32627	@	
121-47	32628-32629	=	
121-48	32629-32630	=	
121-49	32631-32632	"	
121-50	32632-32642	ktjKEZ1tvq	
121-51	32642-32643	"	
121-52	32643-32644	)	
121-53	32644-32645	'	
121-54	32645-32646	:	
121-55	32646-32647	:	
121-56	32647-32655	jsonpath	
121-57	32655-32656	,	
121-58	32657-32658	'	
121-59	32658-32659	{	
121-60	32659-32660	}	
121-61	32660-32661	'	
121-62	32661-32662	:	
121-63	32662-32663	:	
121-64	32663-32668	jsonb	
121-65	32668-32669	,	
121-66	32670-32675	false	
121-67	32675-32676	)	
121-68	32677-32681	Rows	
121-69	32682-32689	Removed	
121-70	32690-32692	by	
121-71	32693-32699	Filter	
121-72	32699-32700	:	
121-73	32701-32708	1000028	

#Text=Planning Time: 0.095 ms Execution Time: 480.348 ms (5 rows) Projecting Partial JSON Another great use case for JSONPath is projecting partial JSONB from the row that matches. Consider the following sample JSONB:
122-1	32709-32717	Planning	
122-2	32718-32722	Time	
122-3	32722-32723	:	
122-4	32724-32729	0.095	
122-5	32730-32732	ms	
122-6	32733-32742	Execution	
122-7	32743-32747	Time	
122-8	32747-32748	:	
122-9	32749-32756	480.348	
122-10	32757-32759	ms	
122-11	32760-32761	(	
122-12	32761-32762	5	
122-13	32763-32767	rows	
122-14	32767-32768	)	
122-15	32769-32779	Projecting	
122-16	32780-32787	Partial	
122-17	32788-32792	JSON	
122-18	32793-32800	Another	
122-19	32801-32806	great	
122-20	32807-32810	use	
122-21	32811-32815	case	
122-22	32816-32819	for	
122-23	32820-32828	JSONPath	
122-24	32829-32831	is	
122-25	32832-32842	projecting	
122-26	32843-32850	partial	
122-27	32850-32851	 	
122-28	32851-32856	JSONB	
122-29	32857-32861	from	
122-30	32862-32865	the	
122-31	32866-32869	row	
122-32	32870-32874	that	
122-33	32875-32882	matches	
122-34	32882-32883	.	
122-35	32884-32892	Consider	
122-36	32893-32896	the	
122-37	32897-32906	following	
122-38	32907-32913	sample	
122-39	32913-32914	 	
122-40	32914-32919	JSONB	
122-41	32919-32920	:	

#Text=demo=# select jsonb_pretty(data) from books where id = 1000029; jsonb_pretty ----------------------------------- "tags": { "nk678947": {
123-1	32921-32925	demo	
123-2	32925-32926	=	
123-3	32926-32927	#	
123-4	32928-32934	select	
123-5	32935-32947	jsonb_pretty	
123-6	32947-32948	(	
123-7	32948-32952	data	
123-8	32952-32953	)	
123-9	32954-32958	from	
123-10	32959-32964	books	
123-11	32965-32970	where	
123-12	32971-32973	id	
123-13	32974-32975	=	
123-14	32976-32983	1000029	
123-15	32983-32984	;	
123-16	32985-32997	jsonb_pretty	
123-17	32998-32999	-	
123-18	32999-33000	-	
123-19	33000-33001	-	
123-20	33001-33002	-	
123-21	33002-33003	-	
123-22	33003-33004	-	
123-23	33004-33005	-	
123-24	33005-33006	-	
123-25	33006-33007	-	
123-26	33007-33008	-	
123-27	33008-33009	-	
123-28	33009-33010	-	
123-29	33010-33011	-	
123-30	33011-33012	-	
123-31	33012-33013	-	
123-32	33013-33014	-	
123-33	33014-33015	-	
123-34	33015-33016	-	
123-35	33016-33017	-	
123-36	33017-33018	-	
123-37	33018-33019	-	
123-38	33019-33020	-	
123-39	33020-33021	-	
123-40	33021-33022	-	
123-41	33022-33023	-	
123-42	33023-33024	-	
123-43	33024-33025	-	
123-44	33025-33026	-	
123-45	33026-33027	-	
123-46	33027-33028	-	
123-47	33028-33029	-	
123-48	33029-33030	-	
123-49	33030-33031	-	
123-50	33031-33032	-	
123-51	33032-33033	-	
123-52	33034-33035	"	
123-53	33035-33039	tags	
123-54	33039-33040	"	
123-55	33040-33041	:	
123-56	33042-33043	{	
123-57	33044-33045	"	
123-58	33045-33053	nk678947	
123-59	33053-33054	"	
123-60	33054-33055	:	
123-61	33056-33057	{	

#Text="ik159670": "iv32358 "prints": [ "price": 100, "style": "hc" "price": 50, "style": "pb" "braille": false, "keywords": [ "abc",
124-1	33058-33059	"	
124-2	33059-33067	ik159670	
124-3	33067-33068	"	
124-4	33068-33069	:	
124-5	33070-33071	"	
124-6	33071-33078	iv32358	
124-7	33079-33080	"	
124-8	33080-33086	prints	
124-9	33086-33087	"	
124-10	33087-33088	:	
124-11	33089-33090	[	
124-12	33091-33092	"	
124-13	33092-33097	price	
124-14	33097-33098	"	
124-15	33098-33099	:	
124-16	33100-33103	100	
124-17	33103-33104	,	
124-18	33105-33106	"	
124-19	33106-33111	style	
124-20	33111-33112	"	
124-21	33112-33113	:	
124-22	33114-33115	"	
124-23	33115-33117	hc	
124-24	33117-33118	"	
124-25	33119-33120	"	
124-26	33120-33125	price	
124-27	33125-33126	"	
124-28	33126-33127	:	
124-29	33128-33130	50	
124-30	33130-33131	,	
124-31	33132-33133	"	
124-32	33133-33138	style	
124-33	33138-33139	"	
124-34	33139-33140	:	
124-35	33141-33142	"	
124-36	33142-33144	pb	
124-37	33144-33145	"	
124-38	33146-33147	"	
124-39	33147-33154	braille	
124-40	33154-33155	"	
124-41	33155-33156	:	
124-42	33157-33162	false	
124-43	33162-33163	,	
124-44	33164-33165	"	
124-45	33165-33173	keywords	
124-46	33173-33174	"	
124-47	33174-33175	:	
124-48	33176-33177	[	
124-49	33178-33179	"	
124-50	33179-33182	abc	
124-51	33182-33183	"	
124-52	33183-33184	,	

#Text="kef", "keh" "hardcover": true, "publisher": "ppc3YXL8kK", "criticrating": 3 Select only the publisher field: demo=# select jsonb_path_query(data, '$.publisher') from books where id = 1000029;
125-1	33185-33186	"	
125-2	33186-33189	kef	
125-3	33189-33190	"	
125-4	33190-33191	,	
125-5	33192-33193	"	
125-6	33193-33196	keh	
125-7	33196-33197	"	
125-8	33198-33199	"	
125-9	33199-33208	hardcover	
125-10	33208-33209	"	
125-11	33209-33210	:	
125-12	33211-33215	true	
125-13	33215-33216	,	
125-14	33217-33218	"	
125-15	33218-33227	publisher	
125-16	33227-33228	"	
125-17	33228-33229	:	
125-18	33230-33231	"	
125-19	33231-33241	ppc3YXL8kK	
125-20	33241-33242	"	
125-21	33242-33243	,	
125-22	33244-33245	"	
125-23	33245-33257	criticrating	
125-24	33257-33258	"	
125-25	33258-33259	:	
125-26	33260-33261	3	
125-27	33262-33268	Select	
125-28	33269-33273	only	
125-29	33274-33277	the	
125-30	33278-33287	publisher	
125-31	33288-33293	field	
125-32	33293-33294	:	
125-33	33295-33299	demo	
125-34	33299-33300	=	
125-35	33300-33301	#	
125-36	33302-33308	select	
125-37	33309-33325	jsonb_path_query	
125-38	33325-33326	(	
125-39	33326-33330	data	
125-40	33330-33331	,	
125-41	33332-33333	'	
125-42	33333-33334	$	
125-43	33334-33335	.	
125-44	33335-33344	publisher	
125-45	33344-33345	'	
125-46	33345-33346	)	
125-47	33347-33351	from	
125-48	33352-33357	books	
125-49	33358-33363	where	
125-50	33364-33366	id	
125-51	33367-33368	=	
125-52	33369-33376	1000029	
125-53	33376-33377	;	

#Text=jsonb_path_query ------------------ "ppc3YXL8kK" (1 row) Select the prints field (which is an array of objects):
126-1	33378-33394	jsonb_path_query	
126-2	33395-33396	-	
126-3	33396-33397	-	
126-4	33397-33398	-	
126-5	33398-33399	-	
126-6	33399-33400	-	
126-7	33400-33401	-	
126-8	33401-33402	-	
126-9	33402-33403	-	
126-10	33403-33404	-	
126-11	33404-33405	-	
126-12	33405-33406	-	
126-13	33406-33407	-	
126-14	33407-33408	-	
126-15	33408-33409	-	
126-16	33409-33410	-	
126-17	33410-33411	-	
126-18	33411-33412	-	
126-19	33412-33413	-	
126-20	33414-33415	"	
126-21	33415-33425	ppc3YXL8kK	
126-22	33425-33426	"	
126-23	33427-33428	(	
126-24	33428-33429	1	
126-25	33430-33433	row	
126-26	33433-33434	)	
126-27	33435-33441	Select	
126-28	33442-33445	the	
126-29	33446-33452	prints	
126-30	33453-33458	field	
126-31	33459-33460	(	
126-32	33460-33465	which	
126-33	33466-33468	is	
126-34	33469-33471	an	
126-35	33472-33477	array	
126-36	33478-33480	of	
126-37	33481-33488	objects	
126-38	33488-33489	)	
126-39	33489-33490	:	

#Text=demo=# select jsonb_path_query(data, '$.prints') from books where id = 1000029; jsonb_path_query ---------------------------------------------------------------
127-1	33491-33495	demo	
127-2	33495-33496	=	
127-3	33496-33497	#	
127-4	33498-33504	select	
127-5	33505-33521	jsonb_path_query	
127-6	33521-33522	(	
127-7	33522-33526	data	
127-8	33526-33527	,	
127-9	33528-33529	'	
127-10	33529-33530	$	
127-11	33530-33531	.	
127-12	33531-33537	prints	
127-13	33537-33538	'	
127-14	33538-33539	)	
127-15	33540-33544	from	
127-16	33545-33550	books	
127-17	33551-33556	where	
127-18	33557-33559	id	
127-19	33560-33561	=	
127-20	33562-33569	1000029	
127-21	33569-33570	;	
127-22	33571-33587	jsonb_path_query	
127-23	33588-33589	-	
127-24	33589-33590	-	
127-25	33590-33591	-	
127-26	33591-33592	-	
127-27	33592-33593	-	
127-28	33593-33594	-	
127-29	33594-33595	-	
127-30	33595-33596	-	
127-31	33596-33597	-	
127-32	33597-33598	-	
127-33	33598-33599	-	
127-34	33599-33600	-	
127-35	33600-33601	-	
127-36	33601-33602	-	
127-37	33602-33603	-	
127-38	33603-33604	-	
127-39	33604-33605	-	
127-40	33605-33606	-	
127-41	33606-33607	-	
127-42	33607-33608	-	
127-43	33608-33609	-	
127-44	33609-33610	-	
127-45	33610-33611	-	
127-46	33611-33612	-	
127-47	33612-33613	-	
127-48	33613-33614	-	
127-49	33614-33615	-	
127-50	33615-33616	-	
127-51	33616-33617	-	
127-52	33617-33618	-	
127-53	33618-33619	-	
127-54	33619-33620	-	
127-55	33620-33621	-	
127-56	33621-33622	-	
127-57	33622-33623	-	
127-58	33623-33624	-	
127-59	33624-33625	-	
127-60	33625-33626	-	
127-61	33626-33627	-	
127-62	33627-33628	-	
127-63	33628-33629	-	
127-64	33629-33630	-	
127-65	33630-33631	-	
127-66	33631-33632	-	
127-67	33632-33633	-	
127-68	33633-33634	-	
127-69	33634-33635	-	
127-70	33635-33636	-	
127-71	33636-33637	-	
127-72	33637-33638	-	
127-73	33638-33639	-	
127-74	33639-33640	-	
127-75	33640-33641	-	
127-76	33641-33642	-	
127-77	33642-33643	-	
127-78	33643-33644	-	
127-79	33644-33645	-	
127-80	33645-33646	-	
127-81	33646-33647	-	
127-82	33647-33648	-	
127-83	33648-33649	-	
127-84	33649-33650	-	
127-85	33650-33651	-	

#Text=[{"price": 100, "style": "hc"}, {"price": 50, "style": "pb"}] (1 row) Select the first element in the array prints: demo=# select jsonb_path_query(data, '$.prints[0]') from books where id = 1000029; jsonb_path_query
128-1	33652-33653	[	
128-2	33653-33654	{	
128-3	33654-33655	"	
128-4	33655-33660	price	
128-5	33660-33661	"	
128-6	33661-33662	:	
128-7	33663-33666	100	
128-8	33666-33667	,	
128-9	33668-33669	"	
128-10	33669-33674	style	
128-11	33674-33675	"	
128-12	33675-33676	:	
128-13	33677-33678	"	
128-14	33678-33680	hc	
128-15	33680-33681	"	
128-16	33681-33682	}	
128-17	33682-33683	,	
128-18	33684-33685	{	
128-19	33685-33686	"	
128-20	33686-33691	price	
128-21	33691-33692	"	
128-22	33692-33693	:	
128-23	33694-33696	50	
128-24	33696-33697	,	
128-25	33698-33699	"	
128-26	33699-33704	style	
128-27	33704-33705	"	
128-28	33705-33706	:	
128-29	33707-33708	"	
128-30	33708-33710	pb	
128-31	33710-33711	"	
128-32	33711-33712	}	
128-33	33712-33713	]	
128-34	33714-33715	(	
128-35	33715-33716	1	
128-36	33717-33720	row	
128-37	33720-33721	)	
128-38	33722-33728	Select	
128-39	33729-33732	the	
128-40	33733-33738	first	
128-41	33739-33746	element	
128-42	33747-33749	in	
128-43	33750-33753	the	
128-44	33754-33759	array	
128-45	33760-33766	prints	
128-46	33766-33767	:	
128-47	33768-33772	demo	
128-48	33772-33773	=	
128-49	33773-33774	#	
128-50	33775-33781	select	
128-51	33782-33798	jsonb_path_query	
128-52	33798-33799	(	
128-53	33799-33803	data	
128-54	33803-33804	,	
128-55	33805-33806	'	
128-56	33806-33807	$	
128-57	33807-33808	.	
128-58	33808-33814	prints	
128-59	33814-33815	[	
128-60	33815-33816	0	
128-61	33816-33817	]	
128-62	33817-33818	'	
128-63	33818-33819	)	
128-64	33820-33824	from	
128-65	33825-33830	books	
128-66	33831-33836	where	
128-67	33837-33839	id	
128-68	33840-33841	=	
128-69	33842-33849	1000029	
128-70	33849-33850	;	
128-71	33851-33867	jsonb_path_query	

#Text=------------------------------- {"price": 100, "style": "hc"} (1 row) Select the last element in the array prints: demo=# select jsonb_path_query(data, '$.prints[$.size()]') from books where id = 1000029;
129-1	33868-33869	-	
129-2	33869-33870	-	
129-3	33870-33871	-	
129-4	33871-33872	-	
129-5	33872-33873	-	
129-6	33873-33874	-	
129-7	33874-33875	-	
129-8	33875-33876	-	
129-9	33876-33877	-	
129-10	33877-33878	-	
129-11	33878-33879	-	
129-12	33879-33880	-	
129-13	33880-33881	-	
129-14	33881-33882	-	
129-15	33882-33883	-	
129-16	33883-33884	-	
129-17	33884-33885	-	
129-18	33885-33886	-	
129-19	33886-33887	-	
129-20	33887-33888	-	
129-21	33888-33889	-	
129-22	33889-33890	-	
129-23	33890-33891	-	
129-24	33891-33892	-	
129-25	33892-33893	-	
129-26	33893-33894	-	
129-27	33894-33895	-	
129-28	33895-33896	-	
129-29	33896-33897	-	
129-30	33897-33898	-	
129-31	33898-33899	-	
129-32	33900-33901	{	
129-33	33901-33902	"	
129-34	33902-33907	price	
129-35	33907-33908	"	
129-36	33908-33909	:	
129-37	33910-33913	100	
129-38	33913-33914	,	
129-39	33915-33916	"	
129-40	33916-33921	style	
129-41	33921-33922	"	
129-42	33922-33923	:	
129-43	33924-33925	"	
129-44	33925-33927	hc	
129-45	33927-33928	"	
129-46	33928-33929	}	
129-47	33930-33931	(	
129-48	33931-33932	1	
129-49	33933-33936	row	
129-50	33936-33937	)	
129-51	33938-33944	Select	
129-52	33945-33948	the	
129-53	33949-33953	last	
129-54	33954-33961	element	
129-55	33962-33964	in	
129-56	33965-33968	the	
129-57	33969-33974	array	
129-58	33975-33981	prints	
129-59	33981-33982	:	
129-60	33983-33987	demo	
129-61	33987-33988	=	
129-62	33988-33989	#	
129-63	33990-33996	select	
129-64	33997-34013	jsonb_path_query	
129-65	34013-34014	(	
129-66	34014-34018	data	
129-67	34018-34019	,	
129-68	34020-34021	'	
129-69	34021-34022	$	
129-70	34022-34023	.	
129-71	34023-34029	prints	
129-72	34029-34030	[	
129-73	34030-34031	$	
129-74	34031-34032	.	
129-75	34032-34036	size	
129-76	34036-34037	(	
129-77	34037-34038	)	
129-78	34038-34039	]	
129-79	34039-34040	'	
129-80	34040-34041	)	
129-81	34042-34046	from	
129-82	34047-34052	books	
129-83	34053-34058	where	
129-84	34059-34061	id	
129-85	34062-34063	=	
129-86	34064-34071	1000029	
129-87	34071-34072	;	

#Text=jsonb_path_query ------------------------------ {"price": 50, "style": "pb"} (1 row) Select only the hardcover prints from the array:
130-1	34073-34089	jsonb_path_query	
130-2	34090-34091	-	
130-3	34091-34092	-	
130-4	34092-34093	-	
130-5	34093-34094	-	
130-6	34094-34095	-	
130-7	34095-34096	-	
130-8	34096-34097	-	
130-9	34097-34098	-	
130-10	34098-34099	-	
130-11	34099-34100	-	
130-12	34100-34101	-	
130-13	34101-34102	-	
130-14	34102-34103	-	
130-15	34103-34104	-	
130-16	34104-34105	-	
130-17	34105-34106	-	
130-18	34106-34107	-	
130-19	34107-34108	-	
130-20	34108-34109	-	
130-21	34109-34110	-	
130-22	34110-34111	-	
130-23	34111-34112	-	
130-24	34112-34113	-	
130-25	34113-34114	-	
130-26	34114-34115	-	
130-27	34115-34116	-	
130-28	34116-34117	-	
130-29	34117-34118	-	
130-30	34118-34119	-	
130-31	34119-34120	-	
130-32	34121-34122	{	
130-33	34122-34123	"	
130-34	34123-34128	price	
130-35	34128-34129	"	
130-36	34129-34130	:	
130-37	34131-34133	50	
130-38	34133-34134	,	
130-39	34135-34136	"	
130-40	34136-34141	style	
130-41	34141-34142	"	
130-42	34142-34143	:	
130-43	34144-34145	"	
130-44	34145-34147	pb	
130-45	34147-34148	"	
130-46	34148-34149	}	
130-47	34150-34151	(	
130-48	34151-34152	1	
130-49	34153-34156	row	
130-50	34156-34157	)	
130-51	34158-34164	Select	
130-52	34165-34169	only	
130-53	34170-34173	the	
130-54	34174-34183	hardcover	
130-55	34184-34190	prints	
130-56	34191-34195	from	
130-57	34196-34199	the	
130-58	34200-34205	array	
130-59	34205-34206	:	

#Text=demo=# select jsonb_path_query(data, '$.prints[*] ?(@.style=="hc")') from books where id = 1000029; jsonb_path_query ------------------------------- {"price": 100, "style": "hc"} (1 row)
131-1	34207-34211	demo	
131-2	34211-34212	=	
131-3	34212-34213	#	
131-4	34214-34220	select	
131-5	34221-34237	jsonb_path_query	
131-6	34237-34238	(	
131-7	34238-34242	data	
131-8	34242-34243	,	
131-9	34244-34245	'	
131-10	34245-34246	$	
131-11	34246-34247	.	
131-12	34247-34253	prints	
131-13	34253-34254	[	
131-14	34254-34255	*	
131-15	34255-34256	]	
131-16	34257-34258	?	
131-17	34258-34259	(	
131-18	34259-34260	@	
131-19	34260-34261	.	
131-20	34261-34266	style	
131-21	34266-34267	=	
131-22	34267-34268	=	
131-23	34268-34269	"	
131-24	34269-34271	hc	
131-25	34271-34272	"	
131-26	34272-34273	)	
131-27	34273-34274	'	
131-28	34274-34275	)	
131-29	34276-34280	from	
131-30	34281-34286	books	
131-31	34287-34292	where	
131-32	34293-34295	id	
131-33	34296-34297	=	
131-34	34298-34305	1000029	
131-35	34305-34306	;	
131-36	34307-34323	jsonb_path_query	
131-37	34324-34325	-	
131-38	34325-34326	-	
131-39	34326-34327	-	
131-40	34327-34328	-	
131-41	34328-34329	-	
131-42	34329-34330	-	
131-43	34330-34331	-	
131-44	34331-34332	-	
131-45	34332-34333	-	
131-46	34333-34334	-	
131-47	34334-34335	-	
131-48	34335-34336	-	
131-49	34336-34337	-	
131-50	34337-34338	-	
131-51	34338-34339	-	
131-52	34339-34340	-	
131-53	34340-34341	-	
131-54	34341-34342	-	
131-55	34342-34343	-	
131-56	34343-34344	-	
131-57	34344-34345	-	
131-58	34345-34346	-	
131-59	34346-34347	-	
131-60	34347-34348	-	
131-61	34348-34349	-	
131-62	34349-34350	-	
131-63	34350-34351	-	
131-64	34351-34352	-	
131-65	34352-34353	-	
131-66	34353-34354	-	
131-67	34354-34355	-	
131-68	34356-34357	{	
131-69	34357-34358	"	
131-70	34358-34363	price	
131-71	34363-34364	"	
131-72	34364-34365	:	
131-73	34366-34369	100	
131-74	34369-34370	,	
131-75	34371-34372	"	
131-76	34372-34377	style	
131-77	34377-34378	"	
131-78	34378-34379	:	
131-79	34380-34381	"	
131-80	34381-34383	hc	
131-81	34383-34384	"	
131-82	34384-34385	}	
131-83	34386-34387	(	
131-84	34387-34388	1	
131-85	34389-34392	row	
131-86	34392-34393	)	

#Text=We can also chain the filters: demo=# select jsonb_path_query(data, '$.prints[*] ?(@.style=="hc") ?(@.price ==100)') from books where id = 1000029; jsonb_path_query
132-1	34394-34396	We	
132-2	34397-34400	can	
132-3	34401-34405	also	
132-4	34406-34411	chain	
132-5	34412-34415	the	
132-6	34416-34423	filters	
132-7	34423-34424	:	
132-8	34425-34429	demo	
132-9	34429-34430	=	
132-10	34430-34431	#	
132-11	34432-34438	select	
132-12	34439-34455	jsonb_path_query	
132-13	34455-34456	(	
132-14	34456-34460	data	
132-15	34460-34461	,	
132-16	34462-34463	'	
132-17	34463-34464	$	
132-18	34464-34465	.	
132-19	34465-34471	prints	
132-20	34471-34472	[	
132-21	34472-34473	*	
132-22	34473-34474	]	
132-23	34475-34476	?	
132-24	34476-34477	(	
132-25	34477-34478	@	
132-26	34478-34479	.	
132-27	34479-34484	style	
132-28	34484-34485	=	
132-29	34485-34486	=	
132-30	34486-34487	"	
132-31	34487-34489	hc	
132-32	34489-34490	"	
132-33	34490-34491	)	
132-34	34492-34493	?	
132-35	34493-34494	(	
132-36	34494-34495	@	
132-37	34495-34496	.	
132-38	34496-34501	price	
132-39	34502-34503	=	
132-40	34503-34504	=	
132-41	34504-34507	100	
132-42	34507-34508	)	
132-43	34508-34509	'	
132-44	34509-34510	)	
132-45	34511-34515	from	
132-46	34516-34521	books	
132-47	34522-34527	where	
132-48	34528-34530	id	
132-49	34531-34532	=	
132-50	34533-34540	1000029	
132-51	34540-34541	;	
132-52	34542-34558	jsonb_path_query	

#Text=------------------------------- {"price": 100, "style": "hc"} (1 row) In summary, PostgreSQL provides a powerful and versatile platform to store and process JSON data. There are several gotcha's that you need to be aware of, but we are optimistic that it will be fixed in future releases.
133-1	34559-34560	-	
133-2	34560-34561	-	
133-3	34561-34562	-	
133-4	34562-34563	-	
133-5	34563-34564	-	
133-6	34564-34565	-	
133-7	34565-34566	-	
133-8	34566-34567	-	
133-9	34567-34568	-	
133-10	34568-34569	-	
133-11	34569-34570	-	
133-12	34570-34571	-	
133-13	34571-34572	-	
133-14	34572-34573	-	
133-15	34573-34574	-	
133-16	34574-34575	-	
133-17	34575-34576	-	
133-18	34576-34577	-	
133-19	34577-34578	-	
133-20	34578-34579	-	
133-21	34579-34580	-	
133-22	34580-34581	-	
133-23	34581-34582	-	
133-24	34582-34583	-	
133-25	34583-34584	-	
133-26	34584-34585	-	
133-27	34585-34586	-	
133-28	34586-34587	-	
133-29	34587-34588	-	
133-30	34588-34589	-	
133-31	34589-34590	-	
133-32	34591-34592	{	
133-33	34592-34593	"	
133-34	34593-34598	price	
133-35	34598-34599	"	
133-36	34599-34600	:	
133-37	34601-34604	100	
133-38	34604-34605	,	
133-39	34606-34607	"	
133-40	34607-34612	style	
133-41	34612-34613	"	
133-42	34613-34614	:	
133-43	34615-34616	"	
133-44	34616-34618	hc	
133-45	34618-34619	"	
133-46	34619-34620	}	
133-47	34621-34622	(	
133-48	34622-34623	1	
133-49	34624-34627	row	
133-50	34627-34628	)	
133-51	34629-34631	In	
133-52	34632-34639	summary	
133-53	34639-34640	,	
133-54	34641-34651	PostgreSQL	
133-55	34652-34660	provides	
133-56	34661-34662	a	
133-57	34663-34671	powerful	
133-58	34672-34675	and	
133-59	34676-34685	versatile	
133-60	34686-34694	platform	
133-61	34695-34697	to	
133-62	34697-34698	 	
133-63	34698-34703	store	
133-64	34704-34707	and	
133-65	34708-34715	process	
133-66	34715-34716	 	
133-67	34716-34720	JSON	
133-68	34721-34725	data	
133-69	34725-34726	.	
133-70	34727-34732	There	
133-71	34733-34736	are	
133-72	34737-34744	several	
133-73	34745-34753	gotcha's	
133-74	34754-34758	that	
133-75	34759-34762	you	
133-76	34763-34767	need	
133-77	34768-34770	to	
133-78	34771-34773	be	
133-79	34774-34779	aware	
133-80	34780-34782	of	
133-81	34782-34783	,	
133-82	34784-34787	but	
133-83	34788-34790	we	
133-84	34791-34794	are	
133-85	34795-34805	optimistic	
133-86	34806-34810	that	
133-87	34811-34813	it	
133-88	34814-34818	will	
133-89	34819-34821	be	
133-90	34822-34827	fixed	
133-91	34828-34830	in	
133-92	34831-34837	future	
133-93	34838-34846	releases	
133-94	34846-34847	.	

#Text=More tips for you Which Is the Best PostgreSQL GUI? PostgreSQL graphical user interface (GUI) tools help these open source database users to manage, manipulate, and visualize their data. In this post, we discuss the top 5 GUI tools for administering your PostgreSQL deployments. Learn more
134-1	34848-34852	More	
134-2	34853-34857	tips	
134-3	34858-34861	for	
134-4	34862-34865	you	
134-5	34866-34871	Which	
134-6	34872-34874	Is	
134-7	34875-34878	the	
134-8	34879-34883	Best	
134-9	34884-34894	PostgreSQL	
134-10	34895-34898	GUI	
134-11	34898-34899	?	
134-12	34900-34910	PostgreSQL	
134-13	34911-34920	graphical	
134-14	34921-34925	user	
134-15	34926-34935	interface	
134-16	34936-34937	(	
134-17	34937-34940	GUI	
134-18	34940-34941	)	
134-19	34942-34947	tools	
134-20	34948-34952	help	
134-21	34953-34958	these	
134-22	34959-34963	open	
134-23	34964-34970	source	
134-24	34971-34979	database	
134-25	34980-34985	users	
134-26	34986-34988	to	
134-27	34989-34995	manage	
134-28	34995-34996	,	
134-29	34997-35007	manipulate	
134-30	35007-35008	,	
134-31	35009-35012	and	
134-32	35013-35022	visualize	
134-33	35023-35028	their	
134-34	35029-35033	data	
134-35	35033-35034	.	
134-36	35035-35037	In	
134-37	35038-35042	this	
134-38	35043-35047	post	
134-39	35047-35048	,	
134-40	35049-35051	we	
134-41	35052-35059	discuss	
134-42	35060-35063	the	
134-43	35064-35067	top	
134-44	35068-35069	5	
134-45	35070-35073	GUI	
134-46	35074-35079	tools	
134-47	35080-35083	for	
134-48	35084-35097	administering	
134-49	35098-35102	your	
134-50	35103-35113	PostgreSQL	
134-51	35114-35125	deployments	
134-52	35125-35126	.	
134-53	35127-35132	Learn	
134-54	35133-35137	more	

#Text=Managing High Availability in PostgreSQL Managing high availability in your PostgreSQL hosting is very important to ensuring your clusters maintain exceptional uptime and strong operational performance so your data is always available to your application. Learn more PostgreSQL Connection Pooling: Part 1 – Pros & Cons
135-1	35138-35146	Managing	
135-2	35147-35151	High	
135-3	35152-35164	Availability	
135-4	35165-35167	in	
135-5	35168-35178	PostgreSQL	
135-6	35179-35187	Managing	
135-7	35188-35192	high	
135-8	35193-35205	availability	
135-9	35206-35208	in	
135-10	35209-35213	your	
135-11	35214-35224	PostgreSQL	
135-12	35225-35232	hosting	
135-13	35233-35235	is	
135-14	35236-35240	very	
135-15	35241-35250	important	
135-16	35251-35253	to	
135-17	35254-35262	ensuring	
135-18	35263-35267	your	
135-19	35268-35276	clusters	
135-20	35277-35285	maintain	
135-21	35286-35297	exceptional	
135-22	35298-35304	uptime	
135-23	35305-35308	and	
135-24	35309-35315	strong	
135-25	35316-35327	operational	
135-26	35328-35339	performance	
135-27	35340-35342	so	
135-28	35343-35347	your	
135-29	35348-35352	data	
135-30	35353-35355	is	
135-31	35356-35362	always	
135-32	35363-35372	available	
135-33	35373-35375	to	
135-34	35376-35380	your	
135-35	35381-35392	application	
135-36	35392-35393	.	
135-37	35394-35399	Learn	
135-38	35400-35404	more	
135-39	35405-35415	PostgreSQL	
135-40	35416-35426	Connection	
135-41	35427-35434	Pooling	
135-42	35434-35435	:	
135-43	35436-35440	Part	
135-44	35441-35442	1	
135-45	35443-35444	–	
135-46	35445-35449	Pros	
135-47	35450-35451	&	
135-48	35452-35456	Cons	

#Text=In modern apps, clients open a lot of connections. Developers are discouraged from holding a database connection while other operations take place. “Open a connection as late as possible, close as soon as possible”. Learn more +1 Tweet Share Share PinShares 0 Join the ScaleGrid Newsletter and never miss out!
136-1	35457-35459	In	
136-2	35460-35466	modern	
136-3	35467-35471	apps	
136-4	35471-35472	,	
136-5	35473-35480	clients	
136-6	35481-35485	open	
136-7	35486-35487	a	
136-8	35488-35491	lot	
136-9	35492-35494	of	
136-10	35495-35506	connections	
136-11	35506-35507	.	
136-12	35508-35518	Developers	
136-13	35519-35522	are	
136-14	35523-35534	discouraged	
136-15	35535-35539	from	
136-16	35540-35547	holding	
136-17	35548-35549	a	
136-18	35550-35558	database	
136-19	35559-35569	connection	
136-20	35570-35575	while	
136-21	35576-35581	other	
136-22	35582-35592	operations	
136-23	35593-35597	take	
136-24	35598-35603	place	
136-25	35603-35604	.	
136-26	35605-35606	“	
136-27	35606-35610	Open	
136-28	35611-35612	a	
136-29	35613-35623	connection	
136-30	35624-35626	as	
136-31	35627-35631	late	
136-32	35632-35634	as	
136-33	35635-35643	possible	
136-34	35643-35644	,	
136-35	35645-35650	close	
136-36	35651-35653	as	
136-37	35654-35658	soon	
136-38	35659-35661	as	
136-39	35662-35670	possible	
136-40	35670-35671	”	
136-41	35671-35672	.	
136-42	35673-35678	Learn	
136-43	35679-35683	more	
136-44	35684-35685	+	
136-45	35685-35686	1	
136-46	35687-35692	Tweet	
136-47	35693-35698	Share	
136-48	35699-35704	Share	
136-49	35705-35714	PinShares	
136-50	35715-35716	0	
136-51	35717-35721	Join	
136-52	35722-35725	the	
136-53	35726-35735	ScaleGrid	
136-54	35736-35746	Newsletter	
136-55	35747-35750	and	
136-56	35751-35756	never	
136-57	35757-35761	miss	
136-58	35762-35765	out	
136-59	35765-35766	!	

#Text=Check out Related PostsWhich Is The Best PostgreSQL GUI? 2021 ComparisonPostgreSQL graphical user interface (GUI) tools help open source database users to manage, manipulat...Read Full ArticleScaleGrid DigitalOcean Support for MySQL, PostgreSQL and Redis™ Now Av...PALO ALTO, Calif., June 9, 2020 – ScaleGrid, a leading Database-as-a-Service (DBaaS) provider, has j...Read Full ArticlePostgreSQL Connection Pooling: Part 1 - Pros & ConsA long time ago, in a galaxy far far away, ‘threads’ were a programming novelty rarely used and seld...Read Full Article Dharshan is the founder of ScaleGrid.io (formerly MongoDirector.com). He is an experienced MongoDB developer and administrator. He can be reached for further comment at @dharshanrg Start Your Free 30 Day Trial ASDFADSF FDASFDA
137-1	35767-35772	Check	
137-2	35773-35776	out	
137-3	35777-35784	Related	
137-4	35785-35795	PostsWhich	
137-5	35796-35798	Is	
137-6	35799-35802	The	
137-7	35803-35807	Best	
137-8	35808-35818	PostgreSQL	
137-9	35819-35822	GUI	
137-10	35822-35823	?	
137-11	35824-35828	2021	
137-12	35829-35849	ComparisonPostgreSQL	
137-13	35850-35859	graphical	
137-14	35860-35864	user	
137-15	35865-35874	interface	
137-16	35875-35876	(	
137-17	35876-35879	GUI	
137-18	35879-35880	)	
137-19	35881-35886	tools	
137-20	35887-35891	help	
137-21	35892-35896	open	
137-22	35897-35903	source	
137-23	35904-35912	database	
137-24	35913-35918	users	
137-25	35919-35921	to	
137-26	35922-35928	manage	
137-27	35928-35929	,	
137-28	35930-35939	manipulat	
137-29	35939-35940	.	
137-30	35940-35941	.	
137-31	35941-35942	.	
137-32	35942-35946	Read	
137-33	35947-35951	Full	
137-34	35952-35968	ArticleScaleGrid	
137-35	35969-35981	DigitalOcean	
137-36	35982-35989	Support	
137-37	35990-35993	for	
137-38	35994-35999	MySQL	
137-39	35999-36000	,	
137-40	36001-36011	PostgreSQL	
137-41	36012-36015	and	
137-42	36016-36021	Redis	
137-43	36021-36022	™	
137-44	36023-36026	Now	
137-45	36027-36029	Av	
137-46	36029-36030	.	
137-47	36030-36031	.	
137-48	36031-36032	.	
137-49	36032-36036	PALO	
137-50	36037-36041	ALTO	
137-51	36041-36042	,	
137-52	36043-36048	Calif	
137-53	36048-36049	.	
137-54	36049-36050	,	
137-55	36051-36055	June	
137-56	36056-36057	9	
137-57	36057-36058	,	
137-58	36059-36063	2020	
137-59	36064-36065	–	
137-60	36066-36075	ScaleGrid	
137-61	36075-36076	,	
137-62	36077-36078	a	
137-63	36079-36086	leading	
137-64	36087-36108	Database-as-a-Service	
137-65	36109-36110	(	
137-66	36110-36115	DBaaS	
137-67	36115-36116	)	
137-68	36117-36125	provider	
137-69	36125-36126	,	
137-70	36127-36130	has	
137-71	36131-36132	j	
137-72	36132-36133	.	
137-73	36133-36134	.	
137-74	36134-36135	.	
137-75	36135-36139	Read	
137-76	36140-36144	Full	
137-77	36145-36162	ArticlePostgreSQL	
137-78	36163-36173	Connection	
137-79	36174-36181	Pooling	
137-80	36181-36182	:	
137-81	36183-36187	Part	
137-82	36188-36189	1	
137-83	36190-36191	-	
137-84	36192-36196	Pros	
137-85	36197-36198	&	
137-86	36199-36204	ConsA	
137-87	36205-36209	long	
137-88	36210-36214	time	
137-89	36215-36218	ago	
137-90	36218-36219	,	
137-91	36220-36222	in	
137-92	36223-36224	a	
137-93	36225-36231	galaxy	
137-94	36232-36235	far	
137-95	36236-36239	far	
137-96	36240-36244	away	
137-97	36244-36245	,	
137-98	36246-36247	‘	
137-99	36247-36254	threads	
137-100	36254-36255	’	
137-101	36256-36260	were	
137-102	36261-36262	a	
137-103	36263-36274	programming	
137-104	36275-36282	novelty	
137-105	36283-36289	rarely	
137-106	36290-36294	used	
137-107	36295-36298	and	
137-108	36299-36303	seld	
137-109	36303-36304	.	
137-110	36304-36305	.	
137-111	36305-36306	.	
137-112	36306-36310	Read	
137-113	36311-36315	Full	
137-114	36316-36323	Article	
137-115	36324-36332	Dharshan	
137-116	36333-36335	is	
137-117	36336-36339	the	
137-118	36340-36347	founder	
137-119	36348-36350	of	
137-120	36351-36363	ScaleGrid.io	
137-121	36364-36365	(	
137-122	36365-36373	formerly	
137-123	36374-36391	MongoDirector.com	
137-124	36391-36392	)	
137-125	36392-36393	.	
137-126	36394-36396	He	
137-127	36397-36399	is	
137-128	36400-36402	an	
137-129	36403-36414	experienced	
137-130	36415-36422	MongoDB	
137-131	36423-36432	developer	
137-132	36433-36436	and	
137-133	36437-36450	administrator	
137-134	36450-36451	.	
137-135	36452-36454	He	
137-136	36455-36458	can	
137-137	36459-36461	be	
137-138	36462-36469	reached	
137-139	36470-36473	for	
137-140	36474-36481	further	
137-141	36482-36489	comment	
137-142	36490-36492	at	
137-143	36493-36494	@	
137-144	36494-36504	dharshanrg	
137-145	36505-36510	Start	
137-146	36511-36515	Your	
137-147	36516-36520	Free	
137-148	36521-36523	30	
137-149	36524-36527	Day	
137-150	36528-36533	Trial	
137-151	36534-36542	ASDFADSF	
137-152	36543-36550	FDASFDA	

#Text=Syntax error at CREATE INDEX datatagsgin ON books USING gin (data->’tags’); should be CREATE INDEX datatagsgin ON books USING gin ((data->’tags’)); machty
138-1	36551-36557	Syntax	
138-2	36558-36563	error	
138-3	36564-36566	at	
138-4	36567-36573	CREATE	
138-5	36574-36579	INDEX	
138-6	36580-36591	datatagsgin	
138-7	36592-36594	ON	
138-8	36595-36600	books	
138-9	36601-36606	USING	
138-10	36607-36610	gin	
138-11	36611-36612	(	
138-12	36612-36616	data	
138-13	36616-36617	-	
138-14	36617-36618	>	
138-15	36618-36619	’	
138-16	36619-36623	tags	
138-17	36623-36624	’	
138-18	36624-36625	)	
138-19	36625-36626	;	
138-20	36627-36633	should	
138-21	36634-36636	be	
138-22	36637-36643	CREATE	
138-23	36644-36649	INDEX	
138-24	36650-36661	datatagsgin	
138-25	36662-36664	ON	
138-26	36665-36670	books	
138-27	36671-36676	USING	
138-28	36677-36680	gin	
138-29	36681-36682	(	
138-30	36682-36683	(	
138-31	36683-36687	data	
138-32	36687-36688	-	
138-33	36688-36689	>	
138-34	36689-36690	’	
138-35	36690-36694	tags	
138-36	36694-36695	’	
138-37	36695-36696	)	
138-38	36696-36697	)	
138-39	36697-36698	;	
138-40	36699-36705	machty	

#Text=It’s pretty hard to follow some of the examples when you’re using machine-y sample data like `”{“tags”: {“nk594127″: {“ik71786″: “iv678771″}}`. Search: About us: ScaleGrid is a fully managed database hosting service for MongoDB® , Redis™, MySQL, and PostgreSQL on public and private clouds. You may also be interested in
139-1	36706-36708	It	
139-2	36708-36709	’	
139-3	36709-36710	s	
139-4	36711-36717	pretty	
139-5	36718-36722	hard	
139-6	36723-36725	to	
139-7	36726-36732	follow	
139-8	36733-36737	some	
139-9	36738-36740	of	
139-10	36741-36744	the	
139-11	36745-36753	examples	
139-12	36754-36758	when	
139-13	36759-36762	you	
139-14	36762-36763	’	
139-15	36763-36765	re	
139-16	36766-36771	using	
139-17	36772-36781	machine-y	
139-18	36782-36788	sample	
139-19	36789-36793	data	
139-20	36794-36798	like	
139-21	36799-36800	`	
139-22	36800-36801	”	
139-23	36801-36802	{	
139-24	36802-36803	“	
139-25	36803-36807	tags	
139-26	36807-36808	”	
139-27	36808-36809	:	
139-28	36810-36811	{	
139-29	36811-36812	“	
139-30	36812-36820	nk594127	
139-31	36820-36821	″	
139-32	36821-36822	:	
139-33	36823-36824	{	
139-34	36824-36825	“	
139-35	36825-36832	ik71786	
139-36	36832-36833	″	
139-37	36833-36834	:	
139-38	36835-36836	“	
139-39	36836-36844	iv678771	
139-40	36844-36845	″	
139-41	36845-36846	}	
139-42	36846-36847	}	
139-43	36847-36848	`	
139-44	36848-36849	.	
139-45	36850-36856	Search	
139-46	36856-36857	:	
139-47	36858-36863	About	
139-48	36864-36866	us	
139-49	36866-36867	:	
139-50	36868-36877	ScaleGrid	
139-51	36878-36880	is	
139-52	36881-36882	a	
139-53	36883-36888	fully	
139-54	36889-36896	managed	
139-55	36897-36905	database	
139-56	36906-36913	hosting	
139-57	36914-36921	service	
139-58	36922-36925	for	
139-59	36926-36933	MongoDB	
139-60	36933-36934	®	
139-61	36935-36936	,	
139-62	36937-36942	Redis	
139-63	36942-36943	™	
139-64	36943-36944	,	
139-65	36945-36950	MySQL	
139-66	36950-36951	,	
139-67	36952-36955	and	
139-68	36956-36966	PostgreSQL	
139-69	36967-36969	on	
139-70	36970-36976	public	
139-71	36977-36980	and	
139-72	36981-36988	private	
139-73	36989-36995	clouds	
139-74	36995-36996	.	
139-75	36997-37000	You	
139-76	37001-37004	may	
139-77	37005-37009	also	
139-78	37010-37012	be	
139-79	37013-37023	interested	
139-80	37024-37026	in	

#Text=mysqldump Best Practices: Part 2 – Migrations Guide ScaleGrid Adds Oracle Cloud for Managed Database Hosting Which Is The Best PostgreSQL GUI? 2021 Comparison Oracle Cloud Breakdown – Database Hosting Costs on OCI How To Set Up MySQL on DigitalOcean
140-1	37027-37036	mysqldump	
140-2	37037-37041	Best	
140-3	37042-37051	Practices	
140-4	37051-37052	:	
140-5	37053-37057	Part	
140-6	37058-37059	2	
140-7	37060-37061	–	
140-8	37062-37072	Migrations	
140-9	37073-37078	Guide	
140-10	37079-37088	ScaleGrid	
140-11	37089-37093	Adds	
140-12	37094-37100	Oracle	
140-13	37101-37106	Cloud	
140-14	37107-37110	for	
140-15	37111-37118	Managed	
140-16	37119-37127	Database	
140-17	37128-37135	Hosting	
140-18	37136-37141	Which	
140-19	37142-37144	Is	
140-20	37145-37148	The	
140-21	37149-37153	Best	
140-22	37154-37164	PostgreSQL	
140-23	37165-37168	GUI	
140-24	37168-37169	?	
140-25	37170-37174	2021	
140-26	37175-37185	Comparison	
140-27	37186-37192	Oracle	
140-28	37193-37198	Cloud	
140-29	37199-37208	Breakdown	
140-30	37209-37210	–	
140-31	37211-37219	Database	
140-32	37220-37227	Hosting	
140-33	37228-37233	Costs	
140-34	37234-37236	on	
140-35	37237-37240	OCI	
140-36	37241-37244	How	
140-37	37245-37247	To	
140-38	37248-37251	Set	
140-39	37252-37254	Up	
140-40	37255-37260	MySQL	
140-41	37261-37263	on	
140-42	37264-37276	DigitalOcean	

#Text=0 Shares +1 Tweet Share Share Pin ScaleGrid provides a fully managed Database-as-a-Service (DBaaS) solution used by thousands of developers, startups, and enterprise customers including UPS, Polaris, and Adobe. The ScaleGrid platform supports MongoDB® Database, Redis™, MySQL, and PostgreSQL on both public and private clouds, including Amazon AWS, Microsoft Azure, Google Cloud Platform, DigitalOcean, and VMware, and automates your time-consuming tasks at any scale so you can focus on your product instead of operations.
141-1	37277-37278	0	
141-2	37279-37285	Shares	
141-3	37286-37287	+	
141-4	37287-37288	1	
141-5	37289-37294	Tweet	
141-6	37295-37300	Share	
141-7	37301-37306	Share	
141-8	37307-37310	Pin	
141-9	37311-37320	ScaleGrid	
141-10	37321-37329	provides	
141-11	37330-37331	a	
141-12	37332-37337	fully	
141-13	37338-37345	managed	
141-14	37346-37367	Database-as-a-Service	
141-15	37368-37369	(	
141-16	37369-37374	DBaaS	
141-17	37374-37375	)	
141-18	37376-37384	solution	
141-19	37385-37389	used	
141-20	37390-37392	by	
141-21	37393-37402	thousands	
141-22	37403-37405	of	
141-23	37406-37416	developers	
141-24	37416-37417	,	
141-25	37418-37426	startups	
141-26	37426-37427	,	
141-27	37428-37431	and	
141-28	37432-37442	enterprise	
141-29	37443-37452	customers	
141-30	37453-37462	including	
141-31	37463-37466	UPS	
141-32	37466-37467	,	
141-33	37468-37475	Polaris	
141-34	37475-37476	,	
141-35	37477-37480	and	
141-36	37481-37486	Adobe	
141-37	37486-37487	.	
141-38	37488-37491	The	
141-39	37492-37501	ScaleGrid	
141-40	37502-37510	platform	
141-41	37511-37519	supports	
141-42	37520-37527	MongoDB	
141-43	37527-37528	®	
141-44	37529-37537	Database	
141-45	37537-37538	,	
141-46	37539-37544	Redis	
141-47	37544-37545	™	
141-48	37545-37546	,	
141-49	37547-37552	MySQL	
141-50	37552-37553	,	
141-51	37554-37557	and	
141-52	37558-37568	PostgreSQL	
141-53	37569-37571	on	
141-54	37572-37576	both	
141-55	37577-37583	public	
141-56	37584-37587	and	
141-57	37588-37595	private	
141-58	37596-37602	clouds	
141-59	37602-37603	,	
141-60	37604-37613	including	
141-61	37614-37620	Amazon	
141-62	37621-37624	AWS	
141-63	37624-37625	,	
141-64	37626-37635	Microsoft	
141-65	37636-37641	Azure	
141-66	37641-37642	,	
141-67	37643-37649	Google	
141-68	37650-37655	Cloud	
141-69	37656-37664	Platform	
141-70	37664-37665	,	
141-71	37666-37678	DigitalOcean	
141-72	37678-37679	,	
141-73	37680-37683	and	
141-74	37684-37690	VMware	
141-75	37690-37691	,	
141-76	37692-37695	and	
141-77	37696-37705	automates	
141-78	37706-37710	your	
141-79	37711-37725	time-consuming	
141-80	37726-37731	tasks	
141-81	37732-37734	at	
141-82	37735-37738	any	
141-83	37739-37744	scale	
141-84	37745-37747	so	
141-85	37748-37751	you	
141-86	37752-37755	can	
141-87	37756-37761	focus	
141-88	37762-37764	on	
141-89	37765-37769	your	
141-90	37770-37777	product	
141-91	37778-37785	instead	
141-92	37786-37788	of	
141-93	37789-37799	operations	
141-94	37799-37800	.	

#Text=Start a FREE 30-Day Trial MongoDB Compare MongoDB DBaaS AWS Azure DigitalOcean Redis™ Compare Redis™ DBaaS AWS Azure DigitalOcean Google Cloud Platform MySQL
142-1	37801-37806	Start	
142-2	37807-37808	a	
142-3	37809-37813	FREE	
142-4	37814-37816	30	
142-5	37816-37817	-	
142-6	37817-37820	Day	
142-7	37821-37826	Trial	
142-8	37827-37834	MongoDB	
142-9	37835-37842	Compare	
142-10	37843-37850	MongoDB	
142-11	37851-37856	DBaaS	
142-12	37857-37860	AWS	
142-13	37861-37866	Azure	
142-14	37867-37879	DigitalOcean	
142-15	37880-37885	Redis	
142-16	37885-37886	™	
142-17	37887-37894	Compare	
142-18	37895-37900	Redis	
142-19	37900-37901	™	
142-20	37902-37907	DBaaS	
142-21	37908-37911	AWS	
142-22	37912-37917	Azure	
142-23	37918-37930	DigitalOcean	
142-24	37931-37937	Google	
142-25	37938-37943	Cloud	
142-26	37944-37952	Platform	
142-27	37953-37958	MySQL	

#Text=Compare MySQL DBaaS AWS Azure DigitalOcean Google Cloud Platform PostgreSQL Compare PostgreSQL DBaaS AWS Azure DigitalOcean Google Cloud Platform Pricing Startup Program Switching Providers
143-1	37959-37966	Compare	
143-2	37967-37972	MySQL	
143-3	37973-37978	DBaaS	
143-4	37979-37982	AWS	
143-5	37983-37988	Azure	
143-6	37989-38001	DigitalOcean	
143-7	38002-38008	Google	
143-8	38009-38014	Cloud	
143-9	38015-38023	Platform	
143-10	38024-38034	PostgreSQL	
143-11	38035-38042	Compare	
143-12	38043-38053	PostgreSQL	
143-13	38054-38059	DBaaS	
143-14	38060-38063	AWS	
143-15	38064-38069	Azure	
143-16	38070-38082	DigitalOcean	
143-17	38083-38089	Google	
143-18	38090-38095	Cloud	
143-19	38096-38104	Platform	
143-20	38105-38112	Pricing	
143-21	38113-38120	Startup	
143-22	38121-38128	Program	
143-23	38129-38138	Switching	
143-24	38139-38148	Providers	

#Text=About Us Customer Stories Press Contact Email support@scalegrid.io Resources Blog Documentation Support Status API Reference Terms of Service GDPR DPA CCPA DPA
144-1	38149-38154	About	
144-2	38155-38157	Us	
144-3	38158-38166	Customer	
144-4	38167-38174	Stories	
144-5	38175-38180	Press	
144-6	38181-38188	Contact	
144-7	38189-38194	Email	
144-8	38195-38202	support	
144-9	38202-38203	@	
144-10	38203-38215	scalegrid.io	
144-11	38216-38225	Resources	
144-12	38226-38230	Blog	
144-13	38231-38244	Documentation	
144-14	38245-38252	Support	
144-15	38253-38259	Status	
144-16	38260-38263	API	
144-17	38264-38273	Reference	
144-18	38274-38279	Terms	
144-19	38280-38282	of	
144-20	38283-38290	Service	
144-21	38291-38295	GDPR	
144-22	38296-38299	DPA	
144-23	38300-38304	CCPA	
144-24	38305-38308	DPA	
