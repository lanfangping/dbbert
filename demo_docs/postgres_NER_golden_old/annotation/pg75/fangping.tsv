#FORMAT=WebAnno TSV 3.3


#Text=Tips February 2021 Java Performance Tuning Java(TM) - see bottom of page |home |services |training |newsletter |tuning tips |tool reports |articles |resources |about us
1-1	0-4	Tips	
1-2	5-13	February	
1-3	14-18	2021	
1-4	19-23	Java	
1-5	24-35	Performance	
1-6	36-42	Tuning	
1-7	43-47	Java	
1-8	47-48	(	
1-9	48-50	TM	
1-10	50-51	)	
1-11	52-53	-	
1-12	54-57	see	
1-13	58-64	bottom	
1-14	65-67	of	
1-15	68-72	page	
1-16	73-74	|	
1-17	74-78	home	
1-18	79-80	|	
1-19	80-88	services	
1-20	89-90	|	
1-21	90-98	training	
1-22	99-100	|	
1-23	100-110	newsletter	
1-24	111-112	|	
1-25	112-118	tuning	
1-26	118-119	 	
1-27	119-123	tips	
1-28	124-125	|	
1-29	125-129	tool	
1-30	129-130	 	
1-31	130-137	reports	
1-32	138-139	|	
1-33	139-147	articles	
1-34	148-149	|	
1-35	149-158	resources	
1-36	159-160	|	
1-37	160-165	about	
1-38	165-166	 	
1-39	166-168	us	

#Text=|site map |contact us Tools: | GC log analysers| Multi-tenancy tools| Books| SizeOf| Thread analysers| Heap dump analysers| Our valued sponsors who help make this site possible
2-1	169-170	|	
2-2	170-174	site	
2-3	174-175	 	
2-4	175-178	map	
2-5	179-180	|	
2-6	180-187	contact	
2-7	187-188	 	
2-8	188-190	us	
2-9	191-196	Tools	
2-10	196-197	:	
2-11	197-198	 	
2-12	198-199	|	
2-13	200-202	GC	
2-14	202-203	 	
2-15	203-206	log	
2-16	206-207	 	
2-17	207-216	analysers	
2-18	216-217	|	
2-19	218-231	Multi-tenancy	
2-20	231-232	 	
2-21	232-237	tools	
2-22	237-238	|	
2-23	239-244	Books	
2-24	244-245	|	
2-25	246-252	SizeOf	
2-26	252-253	|	
2-27	254-260	Thread	
2-28	260-261	 	
2-29	261-270	analysers	
2-30	270-271	|	
2-31	272-276	Heap	
2-32	276-277	 	
2-33	277-281	dump	
2-34	281-282	 	
2-35	282-291	analysers	
2-36	291-292	|	
2-37	293-296	Our	
2-38	297-303	valued	
2-39	304-312	sponsors	
2-40	313-316	who	
2-41	317-321	help	
2-42	322-326	make	
2-43	327-331	this	
2-44	332-336	site	
2-45	337-345	possible	

#Text=JProfiler: Get rid of your performance problems and memory leaks! Training online: Concurrency, Threading, GC, Advanced Java and more ... Tips February 2021 JProfiler Get rid of your performance problems and memory leaks! Modern Garbage Collection Tuning
3-1	346-355	JProfiler	
3-2	355-356	:	
3-3	357-360	Get	
3-4	361-364	rid	
3-5	365-367	of	
3-6	368-372	your	
3-7	373-384	performance	
3-8	385-393	problems	
3-9	394-397	and	
3-10	398-404	memory	
3-11	405-410	leaks	
3-12	410-411	!	
3-13	412-420	Training	
3-14	421-427	online	
3-15	427-428	:	
3-16	429-440	Concurrency	
3-17	440-441	,	
3-18	442-451	Threading	
3-19	451-452	,	
3-20	453-455	GC	
3-21	455-456	,	
3-22	457-465	Advanced	
3-23	466-470	Java	
3-24	471-474	and	
3-25	475-479	more	
3-26	480-481	.	
3-27	481-482	.	
3-28	482-483	.	
3-29	484-488	Tips	
3-30	489-497	February	
3-31	498-502	2021	
3-32	503-512	JProfiler	
3-33	513-516	Get	
3-34	517-520	rid	
3-35	521-523	of	
3-36	524-528	your	
3-37	529-540	performance	
3-38	541-549	problems	
3-39	550-553	and	
3-40	554-560	memory	
3-41	561-566	leaks	
3-42	566-567	!	
3-43	568-574	Modern	
3-44	575-582	Garbage	
3-45	583-593	Collection	
3-46	594-600	Tuning	

#Text=Java Performance Training Courses COURSES AVAILABLE NOW. We can provide training courses to handle all your Java performance needs Java Performance Tuning, 2nd ed The classic and most comprehensive book on tuning Java Java Performance Tuning Newsletter Your source of Java performance news. Subscribe now!
4-1	601-605	Java	
4-2	606-617	Performance	
4-3	618-626	Training	
4-4	627-634	Courses	
4-5	635-642	COURSES	
4-6	643-652	AVAILABLE	
4-7	653-656	NOW	
4-8	656-657	.	
4-9	658-660	We	
4-10	661-664	can	
4-11	665-672	provide	
4-12	673-681	training	
4-13	682-689	courses	
4-14	690-692	to	
4-15	693-699	handle	
4-16	700-703	all	
4-17	704-708	your	
4-18	709-713	Java	
4-19	714-725	performance	
4-20	726-731	needs	
4-21	732-736	Java	
4-22	737-748	Performance	
4-23	749-755	Tuning	
4-24	755-756	,	
4-25	757-760	2nd	
4-26	761-763	ed	
4-27	764-767	The	
4-28	768-775	classic	
4-29	776-779	and	
4-30	780-784	most	
4-31	785-798	comprehensive	
4-32	799-803	book	
4-33	804-806	on	
4-34	807-813	tuning	
4-35	814-818	Java	
4-36	819-823	Java	
4-37	824-835	Performance	
4-38	836-842	Tuning	
4-39	843-853	Newsletter	
4-40	854-858	Your	
4-41	859-865	source	
4-42	866-868	of	
4-43	869-873	Java	
4-44	874-885	performance	
4-45	886-890	news	
4-46	890-891	.	
4-47	892-901	Subscribe	
4-48	902-905	now	
4-49	905-906	!	

#Text=Enter email: Training online Threading Essentials course JProfiler Get rid of your performance problems and memory leaks! Back to newsletter 243 contents https://lkorinth.github.io/posts/2020-11-27-metaspace.html
5-1	907-912	Enter	
5-2	913-918	email	
5-3	918-919	:	
5-4	920-928	Training	
5-5	929-935	online	
5-6	936-945	Threading	
5-7	946-956	Essentials	
5-8	957-963	course	
5-9	964-973	JProfiler	
5-10	974-977	Get	
5-11	978-981	rid	
5-12	982-984	of	
5-13	985-989	your	
5-14	990-1001	performance	
5-15	1002-1010	problems	
5-16	1011-1014	and	
5-17	1015-1021	memory	
5-18	1022-1027	leaks	
5-19	1027-1028	!	
5-20	1029-1033	Back	
5-21	1034-1036	to	
5-22	1037-1047	newsletter	
5-23	1048-1051	243	
5-24	1052-1060	contents	
5-25	1061-1066	https	
5-26	1066-1067	:	
5-27	1067-1068	/	
5-28	1068-1069	/	
5-29	1069-1087	lkorinth.github.io	
5-30	1087-1088	/	
5-31	1088-1093	posts	
5-32	1093-1094	/	
5-33	1094-1098	2020	
5-34	1098-1099	-	
5-35	1099-1101	11	
5-36	1101-1102	-	
5-37	1102-1104	27	
5-38	1104-1105	-	
5-39	1105-1119	metaspace.html	

#Text=Metaspace in OpenJDK 16 (Page last updated November 2020, Added 2021-02-25, Author Leo Korinth, Publisher lkorinth). Tips: For small class loaders small class loaders huge savings can be made in Metaspace with JDK 16+. Metaspace allocates memory outside the Java heap.
6-1	1120-1129	Metaspace	
6-2	1130-1132	in	
6-3	1133-1140	OpenJDK	
6-4	1141-1143	16	
6-5	1144-1145	(	
6-6	1145-1149	Page	
6-7	1150-1154	last	
6-8	1155-1162	updated	
6-9	1163-1171	November	
6-10	1172-1176	2020	
6-11	1176-1177	,	
6-12	1178-1183	Added	
6-13	1184-1188	2021	
6-14	1188-1189	-	
6-15	1189-1191	02	
6-16	1191-1192	-	
6-17	1192-1194	25	
6-18	1194-1195	,	
6-19	1196-1202	Author	
6-20	1203-1206	Leo	
6-21	1207-1214	Korinth	
6-22	1214-1215	,	
6-23	1216-1225	Publisher	
6-24	1226-1234	lkorinth	
6-25	1234-1235	)	
6-26	1235-1236	.	
6-27	1237-1241	Tips	
6-28	1241-1242	:	
6-29	1243-1246	For	
6-30	1247-1252	small	
6-31	1253-1258	class	
6-32	1259-1266	loaders	
6-33	1267-1272	small	
6-34	1273-1278	class	
6-35	1279-1286	loaders	
6-36	1287-1291	huge	
6-37	1292-1299	savings	
6-38	1300-1303	can	
6-39	1304-1306	be	
6-40	1307-1311	made	
6-41	1312-1314	in	
6-42	1315-1324	Metaspace	
6-43	1325-1329	with	
6-44	1330-1333	JDK	
6-45	1334-1336	16	
6-46	1336-1337	+	
6-47	1337-1338	.	
6-48	1339-1348	Metaspace	
6-49	1349-1358	allocates	
6-50	1359-1365	memory	
6-51	1366-1373	outside	
6-52	1374-1377	the	
6-53	1378-1382	Java	
6-54	1383-1387	heap	
6-55	1387-1388	.	

#Text=Metaspace can allocate memory within a specified address space, allowing class headers to us 32-bit indexes on 64-bit machines. Related flags are -XX:CompressedClassSpaceSize, -XX:+UseCompressedClassPointers and -XX:+UseCompressedOops. https://www.morling.dev/blog/talking-to-postgres-through-java-16-unix-domain-socket-channels/
7-1	1389-1398	Metaspace	
7-2	1399-1402	can	
7-3	1403-1411	allocate	
7-4	1412-1418	memory	
7-5	1419-1425	within	
7-6	1426-1427	a	
7-7	1428-1437	specified	
7-8	1438-1445	address	
7-9	1446-1451	space	
7-10	1451-1452	,	
7-11	1453-1461	allowing	
7-12	1462-1467	class	
7-13	1468-1475	headers	
7-14	1476-1478	to	
7-15	1479-1481	us	
7-16	1482-1484	32	
7-17	1484-1485	-	
7-18	1485-1488	bit	
7-19	1489-1496	indexes	
7-20	1497-1499	on	
7-21	1500-1502	64	
7-22	1502-1503	-	
7-23	1503-1506	bit	
7-24	1507-1515	machines	
7-25	1515-1516	.	
7-26	1517-1524	Related	
7-27	1525-1530	flags	
7-28	1531-1534	are	
7-29	1535-1536	-	
7-30	1536-1538	XX	
7-31	1538-1539	:	
7-32	1539-1563	CompressedClassSpaceSize	
7-33	1563-1564	,	
7-34	1565-1566	-	
7-35	1566-1568	XX	
7-36	1568-1569	:	
7-37	1569-1570	+	
7-38	1570-1596	UseCompressedClassPointers	
7-39	1597-1600	and	
7-40	1601-1602	-	
7-41	1602-1604	XX	
7-42	1604-1605	:	
7-43	1605-1606	+	
7-44	1606-1623	UseCompressedOops	
7-45	1623-1624	.	
7-46	1625-1630	https	
7-47	1630-1631	:	
7-48	1631-1632	/	
7-49	1632-1633	/	
7-50	1633-1648	www.morling.dev	
7-51	1648-1649	/	
7-52	1649-1653	blog	
7-53	1653-1654	/	
7-54	1654-1686	talking-to-postgres-through-java	
7-55	1686-1687	-	
7-56	1687-1689	16	
7-57	1689-1690	-	
7-58	1690-1717	unix-domain-socket-channels	
7-59	1717-1718	/	

#Text=Talking to Postgres Through Java 16 Unix-Domain Socket Channels (Page last updated February 2021, Added 2021-02-25, Author Gunnar Morling, Publisher morling). Tips: Unix domain sockets are both more secure and also more efficient than TCP/IP loopback connections. A really interesting feature of Unix domain sockets is the ability to transfer open file descriptors from one process to another.
8-1	1719-1726	Talking	
8-2	1727-1729	to	
8-3	1730-1738	Postgres	
8-4	1739-1746	Through	
8-5	1747-1751	Java	
8-6	1752-1754	16	
8-7	1755-1766	Unix-Domain	
8-8	1767-1773	Socket	
8-9	1774-1782	Channels	
8-10	1783-1784	(	
8-11	1784-1788	Page	
8-12	1789-1793	last	
8-13	1794-1801	updated	
8-14	1802-1810	February	
8-15	1811-1815	2021	
8-16	1815-1816	,	
8-17	1817-1822	Added	
8-18	1823-1827	2021	
8-19	1827-1828	-	
8-20	1828-1830	02	
8-21	1830-1831	-	
8-22	1831-1833	25	
8-23	1833-1834	,	
8-24	1835-1841	Author	
8-25	1842-1848	Gunnar	
8-26	1849-1856	Morling	
8-27	1856-1857	,	
8-28	1858-1867	Publisher	
8-29	1868-1875	morling	
8-30	1875-1876	)	
8-31	1876-1877	.	
8-32	1878-1882	Tips	
8-33	1882-1883	:	
8-34	1884-1888	Unix	
8-35	1889-1895	domain	
8-36	1896-1903	sockets	
8-37	1904-1907	are	
8-38	1908-1912	both	
8-39	1913-1917	more	
8-40	1918-1924	secure	
8-41	1925-1928	and	
8-42	1929-1933	also	
8-43	1934-1938	more	
8-44	1939-1948	efficient	
8-45	1949-1953	than	
8-46	1954-1957	TCP	
8-47	1957-1958	/	
8-48	1958-1960	IP	
8-49	1961-1969	loopback	
8-50	1970-1981	connections	
8-51	1981-1982	.	
8-52	1983-1984	A	
8-53	1985-1991	really	
8-54	1992-2003	interesting	
8-55	2004-2011	feature	
8-56	2012-2014	of	
8-57	2015-2019	Unix	
8-58	2020-2026	domain	
8-59	2027-2034	sockets	
8-60	2035-2037	is	
8-61	2038-2041	the	
8-62	2042-2049	ability	
8-63	2050-2052	to	
8-64	2053-2061	transfer	
8-65	2062-2066	open	
8-66	2067-2071	file	
8-67	2072-2083	descriptors	
8-68	2084-2088	from	
8-69	2089-2092	one	
8-70	2093-2100	process	
8-71	2101-2103	to	
8-72	2104-2111	another	
8-73	2111-2112	.	

#Text=https://inside.java/2021/02/03/jep380-unix-domain-sockets-channels/ JEP-380: Unix domain socket channels (Page last updated February 2021, Added 2021-02-25, Author Michael McMahon, Publisher Inside Java). Tips: Unix domain sockets bypasses the TCP/IP stack with consequential improvements in latency and CPU usage.
9-1	2113-2118	https	
9-2	2118-2119	:	
9-3	2119-2120	/	
9-4	2120-2121	/	
9-5	2121-2132	inside.java	
9-6	2132-2133	/	
9-7	2133-2137	2021	
9-8	2137-2138	/	
9-9	2138-2140	02	
9-10	2140-2141	/	
9-11	2141-2143	03	
9-12	2143-2144	/	
9-13	2144-2150	jep380	
9-14	2150-2151	-	
9-15	2151-2179	unix-domain-sockets-channels	
9-16	2179-2180	/	
9-17	2181-2184	JEP	
9-18	2184-2185	-	
9-19	2185-2188	380	
9-20	2188-2189	:	
9-21	2190-2194	Unix	
9-22	2195-2201	domain	
9-23	2202-2208	socket	
9-24	2209-2217	channels	
9-25	2218-2219	(	
9-26	2219-2223	Page	
9-27	2224-2228	last	
9-28	2229-2236	updated	
9-29	2237-2245	February	
9-30	2246-2250	2021	
9-31	2250-2251	,	
9-32	2252-2257	Added	
9-33	2258-2262	2021	
9-34	2262-2263	-	
9-35	2263-2265	02	
9-36	2265-2266	-	
9-37	2266-2268	25	
9-38	2268-2269	,	
9-39	2270-2276	Author	
9-40	2277-2284	Michael	
9-41	2285-2292	McMahon	
9-42	2292-2293	,	
9-43	2294-2303	Publisher	
9-44	2304-2310	Inside	
9-45	2311-2315	Java	
9-46	2315-2316	)	
9-47	2316-2317	.	
9-48	2318-2322	Tips	
9-49	2322-2323	:	
9-50	2324-2328	Unix	
9-51	2329-2335	domain	
9-52	2336-2343	sockets	
9-53	2344-2352	bypasses	
9-54	2353-2356	the	
9-55	2357-2360	TCP	
9-56	2360-2361	/	
9-57	2361-2363	IP	
9-58	2364-2369	stack	
9-59	2370-2374	with	
9-60	2375-2388	consequential	
9-61	2389-2401	improvements	
9-62	2402-2404	in	
9-63	2405-2412	latency	
9-64	2413-2416	and	
9-65	2417-2420	CPU	
9-66	2421-2426	usage	
9-67	2426-2427	.	

#Text=Server instance is ServerSocketChannel.open(StandardProtocolFamily.UNIX).bind(UnixDomainSocketAddress.of("/foo/bar.socket")), a client instance SocketChannel.open(StandardProtocolFamily.UNIX).bind(UnixDomainSocketAddress.of("/foo/bar.socket")). It is good practice when cleaning up after a Unix domain server socket shuts down to ensure that its socket file gets deleted, as the file is otherwise persisted. https://nipafx.dev/java-unix-domain-sockets/
10-1	2428-2434	Server	
10-2	2435-2443	instance	
10-3	2444-2446	is	
10-4	2447-2471	ServerSocketChannel.open	
10-5	2471-2472	(	
10-6	2472-2499	StandardProtocolFamily.UNIX	
10-7	2499-2500	)	
10-8	2500-2501	.	
10-9	2501-2505	bind	
10-10	2505-2506	(	
10-11	2506-2532	UnixDomainSocketAddress.of	
10-12	2532-2533	(	
10-13	2533-2534	"	
10-14	2534-2535	/	
10-15	2535-2538	foo	
10-16	2538-2539	/	
10-17	2539-2549	bar.socket	
10-18	2549-2550	"	
10-19	2550-2551	)	
10-20	2551-2552	)	
10-21	2552-2553	,	
10-22	2554-2555	a	
10-23	2556-2562	client	
10-24	2563-2571	instance	
10-25	2572-2590	SocketChannel.open	
10-26	2590-2591	(	
10-27	2591-2618	StandardProtocolFamily.UNIX	
10-28	2618-2619	)	
10-29	2619-2620	.	
10-30	2620-2624	bind	
10-31	2624-2625	(	
10-32	2625-2651	UnixDomainSocketAddress.of	
10-33	2651-2652	(	
10-34	2652-2653	"	
10-35	2653-2654	/	
10-36	2654-2657	foo	
10-37	2657-2658	/	
10-38	2658-2668	bar.socket	
10-39	2668-2669	"	
10-40	2669-2670	)	
10-41	2670-2671	)	
10-42	2671-2672	.	
10-43	2673-2675	It	
10-44	2676-2678	is	
10-45	2679-2683	good	
10-46	2684-2692	practice	
10-47	2693-2697	when	
10-48	2698-2706	cleaning	
10-49	2707-2709	up	
10-50	2710-2715	after	
10-51	2716-2717	a	
10-52	2718-2722	Unix	
10-53	2723-2729	domain	
10-54	2730-2736	server	
10-55	2737-2743	socket	
10-56	2744-2749	shuts	
10-57	2750-2754	down	
10-58	2755-2757	to	
10-59	2758-2764	ensure	
10-60	2765-2769	that	
10-61	2770-2773	its	
10-62	2774-2780	socket	
10-63	2781-2785	file	
10-64	2786-2790	gets	
10-65	2791-2798	deleted	
10-66	2798-2799	,	
10-67	2800-2802	as	
10-68	2803-2806	the	
10-69	2807-2811	file	
10-70	2812-2814	is	
10-71	2815-2824	otherwise	
10-72	2825-2834	persisted	
10-73	2834-2835	.	
10-74	2836-2841	https	
10-75	2841-2842	:	
10-76	2842-2843	/	
10-77	2843-2844	/	
10-78	2844-2854	nipafx.dev	
10-79	2854-2855	/	
10-80	2855-2879	java-unix-domain-sockets	
10-81	2879-2880	/	

#Text=Code-First Unix Domain Socket Tutorial (Page last updated March 2021, Added 2021-03-29, Author Nicolai Parlog, Publisher nipafx.dev). Tips: Java's socket channel / server-socket channel API can use Unix domain sockets (since Java 16) for faster and more secure inter-process communication on the same host The Unix domain socket file needs to have the correct permissions for the program for all instances of the program (ie for all users who launch the program).
11-1	2881-2891	Code-First	
11-2	2892-2896	Unix	
11-3	2897-2903	Domain	
11-4	2904-2910	Socket	
11-5	2911-2919	Tutorial	
11-6	2920-2921	(	
11-7	2921-2925	Page	
11-8	2926-2930	last	
11-9	2931-2938	updated	
11-10	2939-2944	March	
11-11	2945-2949	2021	
11-12	2949-2950	,	
11-13	2951-2956	Added	
11-14	2957-2961	2021	
11-15	2961-2962	-	
11-16	2962-2964	03	
11-17	2964-2965	-	
11-18	2965-2967	29	
11-19	2967-2968	,	
11-20	2969-2975	Author	
11-21	2976-2983	Nicolai	
11-22	2984-2990	Parlog	
11-23	2990-2991	,	
11-24	2992-3001	Publisher	
11-25	3002-3012	nipafx.dev	
11-26	3012-3013	)	
11-27	3013-3014	.	
11-28	3015-3019	Tips	
11-29	3019-3020	:	
11-30	3021-3027	Java's	
11-31	3028-3034	socket	
11-32	3035-3042	channel	
11-33	3043-3044	/	
11-34	3045-3058	server-socket	
11-35	3059-3066	channel	
11-36	3067-3070	API	
11-37	3071-3074	can	
11-38	3075-3078	use	
11-39	3079-3083	Unix	
11-40	3084-3090	domain	
11-41	3091-3098	sockets	
11-42	3099-3100	(	
11-43	3100-3105	since	
11-44	3106-3110	Java	
11-45	3111-3113	16	
11-46	3113-3114	)	
11-47	3115-3118	for	
11-48	3119-3125	faster	
11-49	3126-3129	and	
11-50	3130-3134	more	
11-51	3135-3141	secure	
11-52	3142-3155	inter-process	
11-53	3156-3169	communication	
11-54	3170-3172	on	
11-55	3173-3176	the	
11-56	3177-3181	same	
11-57	3182-3186	host	
11-58	3187-3190	The	
11-59	3191-3195	Unix	
11-60	3196-3202	domain	
11-61	3203-3209	socket	
11-62	3210-3214	file	
11-63	3215-3220	needs	
11-64	3221-3223	to	
11-65	3224-3228	have	
11-66	3229-3232	the	
11-67	3233-3240	correct	
11-68	3241-3252	permissions	
11-69	3253-3256	for	
11-70	3257-3260	the	
11-71	3261-3268	program	
11-72	3269-3272	for	
11-73	3273-3276	all	
11-74	3277-3286	instances	
11-75	3287-3289	of	
11-76	3290-3293	the	
11-77	3294-3301	program	
11-78	3302-3303	(	
11-79	3303-3305	ie	
11-80	3306-3309	for	
11-81	3310-3313	all	
11-82	3314-3319	users	
11-83	3320-3323	who	
11-84	3324-3330	launch	
11-85	3331-3334	the	
11-86	3335-3342	program	
11-87	3342-3343	)	
11-88	3343-3344	.	

#Text=Obtain a UnixDomainSocketAddress (eg using the static of() method), and open using ServerSocketChannel/SocketChannel.open(StandardProtocolFamily.UNIX) then bind() to the address. Finally the server should ServerSocketChannel.accept() and the client should SocketChannel.connect(). The resulting IO is executed the same way as for other sockets. Unix domain sockets have faster setup times and higher data throughput than TCP/IP loopback connections. They also have better security (because standard file-based access control is used). Jack Shirazi Back to newsletter 243 contents Last Updated: 2021-03-29
12-1	3345-3351	Obtain	
12-2	3352-3353	a	
12-3	3354-3377	UnixDomainSocketAddress	
12-4	3378-3379	(	
12-5	3379-3381	eg	
12-6	3382-3387	using	
12-7	3388-3391	the	
12-8	3392-3398	static	
12-9	3399-3401	of	
12-10	3401-3402	(	
12-11	3402-3403	)	
12-12	3404-3410	method	
12-13	3410-3411	)	
12-14	3411-3412	,	
12-15	3413-3416	and	
12-16	3417-3421	open	
12-17	3422-3427	using	
12-18	3428-3447	ServerSocketChannel	
12-19	3447-3448	/	
12-20	3448-3466	SocketChannel.open	
12-21	3466-3467	(	
12-22	3467-3494	StandardProtocolFamily.UNIX	
12-23	3494-3495	)	
12-24	3496-3500	then	
12-25	3501-3505	bind	
12-26	3505-3506	(	
12-27	3506-3507	)	
12-28	3508-3510	to	
12-29	3511-3514	the	
12-30	3515-3522	address	
12-31	3522-3523	.	
12-32	3524-3531	Finally	
12-33	3532-3535	the	
12-34	3536-3542	server	
12-35	3543-3549	should	
12-36	3550-3576	ServerSocketChannel.accept	
12-37	3576-3577	(	
12-38	3577-3578	)	
12-39	3579-3582	and	
12-40	3583-3586	the	
12-41	3587-3593	client	
12-42	3594-3600	should	
12-43	3601-3622	SocketChannel.connect	
12-44	3622-3623	(	
12-45	3623-3624	)	
12-46	3624-3625	.	
12-47	3626-3629	The	
12-48	3630-3639	resulting	
12-49	3640-3642	IO	
12-50	3643-3645	is	
12-51	3646-3654	executed	
12-52	3655-3658	the	
12-53	3659-3663	same	
12-54	3664-3667	way	
12-55	3668-3670	as	
12-56	3671-3674	for	
12-57	3675-3680	other	
12-58	3681-3688	sockets	
12-59	3688-3689	.	
12-60	3690-3694	Unix	
12-61	3695-3701	domain	
12-62	3702-3709	sockets	
12-63	3710-3714	have	
12-64	3715-3721	faster	
12-65	3722-3727	setup	
12-66	3728-3733	times	
12-67	3734-3737	and	
12-68	3738-3744	higher	
12-69	3745-3749	data	
12-70	3750-3760	throughput	
12-71	3761-3765	than	
12-72	3766-3769	TCP	
12-73	3769-3770	/	
12-74	3770-3772	IP	
12-75	3773-3781	loopback	
12-76	3782-3793	connections	
12-77	3793-3794	.	
12-78	3795-3799	They	
12-79	3800-3804	also	
12-80	3805-3809	have	
12-81	3810-3816	better	
12-82	3817-3825	security	
12-83	3826-3827	(	
12-84	3827-3834	because	
12-85	3835-3843	standard	
12-86	3844-3854	file-based	
12-87	3855-3861	access	
12-88	3862-3869	control	
12-89	3870-3872	is	
12-90	3873-3877	used	
12-91	3877-3878	)	
12-92	3878-3879	.	
12-93	3880-3884	Jack	
12-94	3885-3892	Shirazi	
12-95	3893-3897	Back	
12-96	3898-3900	to	
12-97	3901-3911	newsletter	
12-98	3912-3915	243	
12-99	3916-3924	contents	
12-100	3925-3929	Last	
12-101	3930-3937	Updated	
12-102	3937-3938	:	
12-103	3939-3943	2021	
12-104	3943-3944	-	
12-105	3944-3946	03	
12-106	3946-3947	-	
12-107	3947-3949	29	

#Text=Copyright © 2000-2021 Fasterj.com. All Rights Reserved. All trademarks and registered trademarks appearing on JavaPerformanceTuning.com are the property of their respective owners. Java is a trademark or registered trademark of Oracle Corporation in the United States and other countries. JavaPerformanceTuning.com is not connected to Oracle Corporation and is not sponsored by Oracle Corporation.
13-1	3950-3959	Copyright	
13-2	3960-3961	©	
13-3	3962-3966	2000	
13-4	3966-3967	-	
13-5	3967-3971	2021	
13-6	3972-3983	Fasterj.com	
13-7	3983-3984	.	
13-8	3985-3988	All	
13-9	3989-3995	Rights	
13-10	3996-4004	Reserved	
13-11	4004-4005	.	
13-12	4006-4009	All	
13-13	4010-4020	trademarks	
13-14	4021-4024	and	
13-15	4025-4035	registered	
13-16	4036-4046	trademarks	
13-17	4047-4056	appearing	
13-18	4057-4059	on	
13-19	4060-4085	JavaPerformanceTuning.com	
13-20	4086-4089	are	
13-21	4090-4093	the	
13-22	4094-4102	property	
13-23	4103-4105	of	
13-24	4106-4111	their	
13-25	4112-4122	respective	
13-26	4123-4129	owners	
13-27	4129-4130	.	
13-28	4131-4135	Java	
13-29	4136-4138	is	
13-30	4139-4140	a	
13-31	4141-4150	trademark	
13-32	4151-4153	or	
13-33	4154-4164	registered	
13-34	4165-4174	trademark	
13-35	4175-4177	of	
13-36	4178-4184	Oracle	
13-37	4185-4196	Corporation	
13-38	4197-4199	in	
13-39	4200-4203	the	
13-40	4204-4210	United	
13-41	4211-4217	States	
13-42	4218-4221	and	
13-43	4222-4227	other	
13-44	4228-4237	countries	
13-45	4237-4238	.	
13-46	4239-4264	JavaPerformanceTuning.com	
13-47	4265-4267	is	
13-48	4268-4271	not	
13-49	4272-4281	connected	
13-50	4282-4284	to	
13-51	4285-4291	Oracle	
13-52	4292-4303	Corporation	
13-53	4304-4307	and	
13-54	4308-4310	is	
13-55	4311-4314	not	
13-56	4315-4324	sponsored	
13-57	4325-4327	by	
13-58	4328-4334	Oracle	
13-59	4335-4346	Corporation	
13-60	4346-4347	.	
