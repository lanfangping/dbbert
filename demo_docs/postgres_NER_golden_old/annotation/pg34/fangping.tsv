#FORMAT=WebAnno TSV 3.3


#Text=Range join optimization | Databricks on AWS Support Feedback Try Databricks Help Center Documentation Knowledge Base Amazon Web Services Microsoft Azure Google Cloud Platform Documentation for Databricks on AWS
1-1	0-5	Range	
1-2	6-10	join	
1-3	11-23	optimization	
1-4	24-25	|	
1-5	26-36	Databricks	
1-6	37-39	on	
1-7	40-43	AWS	
1-8	44-51	Support	
1-9	52-60	Feedback	
1-10	61-64	Try	
1-11	65-75	Databricks	
1-12	76-80	Help	
1-13	81-87	Center	
1-14	88-101	Documentation	
1-15	102-111	Knowledge	
1-16	112-116	Base	
1-17	117-123	Amazon	
1-18	124-127	Web	
1-19	128-136	Services	
1-20	137-146	Microsoft	
1-21	147-152	Azure	
1-22	153-159	Google	
1-23	160-165	Cloud	
1-24	166-174	Platform	
1-25	175-188	Documentation	
1-26	189-192	for	
1-27	193-203	Databricks	
1-28	204-206	on	
1-29	207-210	AWS	

#Text=Getting started with Databricks Databricks SQL Analytics guide Databricks Workspace guide Get started with Databricks Workspace Language roadmaps User guide Data guide Delta Lake and Delta Engine guide Introduction Delta Lake quickstart
2-1	211-218	Getting	
2-2	219-226	started	
2-3	227-231	with	
2-4	232-242	Databricks	
2-5	243-253	Databricks	
2-6	254-257	SQL	
2-7	258-267	Analytics	
2-8	268-273	guide	
2-9	274-284	Databricks	
2-10	285-294	Workspace	
2-11	295-300	guide	
2-12	301-304	Get	
2-13	305-312	started	
2-14	313-317	with	
2-15	318-328	Databricks	
2-16	329-338	Workspace	
2-17	339-347	Language	
2-18	348-356	roadmaps	
2-19	357-361	User	
2-20	362-367	guide	
2-21	368-372	Data	
2-22	373-378	guide	
2-23	379-384	Delta	
2-24	385-389	Lake	
2-25	390-393	and	
2-26	394-399	Delta	
2-27	400-406	Engine	
2-28	407-412	guide	
2-29	413-425	Introduction	
2-30	426-431	Delta	
2-31	432-436	Lake	
2-32	437-447	quickstart	

#Text=Introductory notebooks Ingest data into Delta Lake Table batch reads and writes Table streaming reads and writes Table deletes, updates, and merges Table utility commands Constraints Table versioning Delta Lake API reference Concurrency control
3-1	448-460	Introductory	
3-2	461-470	notebooks	
3-3	471-477	Ingest	
3-4	478-482	data	
3-5	483-487	into	
3-6	488-493	Delta	
3-7	494-498	Lake	
3-8	499-504	Table	
3-9	505-510	batch	
3-10	511-516	reads	
3-11	517-520	and	
3-12	521-527	writes	
3-13	528-533	Table	
3-14	534-543	streaming	
3-15	544-549	reads	
3-16	550-553	and	
3-17	554-560	writes	
3-18	561-566	Table	
3-19	567-574	deletes	
3-20	574-575	,	
3-21	576-583	updates	
3-22	583-584	,	
3-23	585-588	and	
3-24	589-595	merges	
3-25	596-601	Table	
3-26	602-609	utility	
3-27	610-618	commands	
3-28	619-630	Constraints	
3-29	631-636	Table	
3-30	637-647	versioning	
3-31	648-653	Delta	
3-32	654-658	Lake	
3-33	659-662	API	
3-34	663-672	reference	
3-35	673-684	Concurrency	
3-36	685-692	control	

#Text=Integrations Migration guide Best practices Frequently asked questions (FAQ) Delta Lake resources Delta Engine Optimize performance with file management Auto Optimize Optimize performance with caching Dynamic file pruning
4-1	693-705	Integrations	
4-2	706-715	Migration	
4-3	716-721	guide	
4-4	722-726	Best	
4-5	727-736	practices	
4-6	737-747	Frequently	
4-7	748-753	asked	
4-8	754-763	questions	
4-9	764-765	(	
4-10	765-768	FAQ	
4-11	768-769	)	
4-12	770-775	Delta	
4-13	776-780	Lake	
4-14	781-790	resources	
4-15	791-796	Delta	
4-16	797-803	Engine	
4-17	804-812	Optimize	
4-18	813-824	performance	
4-19	825-829	with	
4-20	830-834	file	
4-21	835-845	management	
4-22	846-850	Auto	
4-23	851-859	Optimize	
4-24	860-868	Optimize	
4-25	869-880	performance	
4-26	881-885	with	
4-27	886-893	caching	
4-28	894-901	Dynamic	
4-29	902-906	file	
4-30	907-914	pruning	

#Text=Isolation levels Bloom filter indexes Optimize join performance Range join optimization Skew join optimization Optimized data transformation Machine learning and deep learning guide MLflow guide Genomics guide Administration guide API reference Release notes
5-1	915-924	Isolation	
5-2	925-931	levels	
5-3	932-937	Bloom	
5-4	938-944	filter	
5-5	945-952	indexes	
5-6	953-961	Optimize	
5-7	962-966	join	
5-8	967-978	performance	
5-9	979-984	Range	
5-10	985-989	join	
5-11	990-1002	optimization	
5-12	1003-1007	Skew	
5-13	1008-1012	join	
5-14	1013-1025	optimization	
5-15	1026-1035	Optimized	
5-16	1036-1040	data	
5-17	1041-1055	transformation	
5-18	1056-1063	Machine	
5-19	1064-1072	learning	
5-20	1073-1076	and	
5-21	1077-1081	deep	
5-22	1082-1090	learning	
5-23	1091-1096	guide	
5-24	1097-1103	MLflow	
5-25	1104-1109	guide	
5-26	1110-1118	Genomics	
5-27	1119-1124	guide	
5-28	1125-1139	Administration	
5-29	1140-1145	guide	
5-30	1146-1149	API	
5-31	1150-1159	reference	
5-32	1160-1167	Release	
5-33	1168-1173	notes	

#Text=Resources Updated Apr 09, 2021 Send us feedback Documentation Databricks Workspace guide Delta Lake and Delta Engine guide Delta Engine Optimize join performance Range join optimization Range join optimization
6-1	1174-1183	Resources	
6-2	1184-1191	Updated	
6-3	1192-1195	Apr	
6-4	1196-1198	09	
6-5	1198-1199	,	
6-6	1200-1204	2021	
6-7	1205-1209	Send	
6-8	1210-1212	us	
6-9	1213-1221	feedback	
6-10	1222-1235	Documentation	
6-11	1236-1246	Databricks	
6-12	1247-1256	Workspace	
6-13	1257-1262	guide	
6-14	1263-1268	Delta	
6-15	1269-1273	Lake	
6-16	1274-1277	and	
6-17	1278-1283	Delta	
6-18	1284-1290	Engine	
6-19	1291-1296	guide	
6-20	1297-1302	Delta	
6-21	1303-1309	Engine	
6-22	1310-1318	Optimize	
6-23	1319-1323	join	
6-24	1324-1335	performance	
6-25	1336-1341	Range	
6-26	1342-1346	join	
6-27	1347-1359	optimization	
6-28	1360-1365	Range	
6-29	1366-1370	join	
6-30	1371-1383	optimization	

#Text=A range join occurs when two relations are joined using a point in interval or interval overlap condition. The range join optimization support in Databricks Runtime can bring orders of magnitude improvement in query performance, but requires careful manual tuning. Point in interval range join A point in interval range join is a join in which the condition contains predicates specifying that a value from one relation is between two values from the other relation. For example:
7-1	1384-1385	A	
7-2	1386-1391	range	
7-3	1392-1396	join	
7-4	1397-1403	occurs	
7-5	1404-1408	when	
7-6	1409-1412	two	
7-7	1413-1422	relations	
7-8	1423-1426	are	
7-9	1427-1433	joined	
7-10	1434-1439	using	
7-11	1440-1441	a	
7-12	1442-1447	point	
7-13	1448-1450	in	
7-14	1451-1459	interval	
7-15	1460-1462	or	
7-16	1463-1471	interval	
7-17	1472-1479	overlap	
7-18	1480-1489	condition	
7-19	1489-1490	.	
7-20	1491-1494	The	
7-21	1495-1500	range	
7-22	1501-1505	join	
7-23	1506-1518	optimization	
7-24	1519-1526	support	
7-25	1527-1529	in	
7-26	1530-1540	Databricks	
7-27	1541-1548	Runtime	
7-28	1549-1552	can	
7-29	1553-1558	bring	
7-30	1559-1565	orders	
7-31	1566-1568	of	
7-32	1569-1578	magnitude	
7-33	1579-1590	improvement	
7-34	1591-1593	in	
7-35	1594-1599	query	
7-36	1600-1611	performance	
7-37	1611-1612	,	
7-38	1613-1616	but	
7-39	1617-1625	requires	
7-40	1626-1633	careful	
7-41	1634-1640	manual	
7-42	1641-1647	tuning	
7-43	1647-1648	.	
7-44	1649-1654	Point	
7-45	1655-1657	in	
7-46	1658-1666	interval	
7-47	1667-1672	range	
7-48	1673-1677	join	
7-49	1678-1679	A	
7-50	1680-1685	point	
7-51	1686-1688	in	
7-52	1689-1697	interval	
7-53	1698-1703	range	
7-54	1704-1708	join	
7-55	1709-1711	is	
7-56	1712-1713	a	
7-57	1714-1718	join	
7-58	1719-1721	in	
7-59	1722-1727	which	
7-60	1728-1731	the	
7-61	1732-1741	condition	
7-62	1742-1750	contains	
7-63	1751-1761	predicates	
7-64	1762-1772	specifying	
7-65	1773-1777	that	
7-66	1778-1779	a	
7-67	1780-1785	value	
7-68	1786-1790	from	
7-69	1791-1794	one	
7-70	1795-1803	relation	
7-71	1804-1806	is	
7-72	1807-1814	between	
7-73	1815-1818	two	
7-74	1819-1825	values	
7-75	1826-1830	from	
7-76	1831-1834	the	
7-77	1835-1840	other	
7-78	1841-1849	relation	
7-79	1849-1850	.	
7-80	1851-1854	For	
7-81	1855-1862	example	
7-82	1862-1863	:	

#Text=-- using BETWEEN expressions SELECT * FROM points JOIN ranges ON points.p BETWEEN ranges.start and ranges.end; -- using inequality expressions SELECT * FROM points JOIN ranges ON points.p >= ranges.start AND points.p < ranges.end;
8-1	1864-1865	-	
8-2	1865-1866	-	
8-3	1867-1872	using	
8-4	1873-1880	BETWEEN	
8-5	1881-1892	expressions	
8-6	1893-1899	SELECT	
8-7	1900-1901	*	
8-8	1902-1906	FROM	
8-9	1907-1913	points	
8-10	1914-1918	JOIN	
8-11	1919-1925	ranges	
8-12	1926-1928	ON	
8-13	1929-1937	points.p	
8-14	1938-1945	BETWEEN	
8-15	1946-1958	ranges.start	
8-16	1959-1962	and	
8-17	1963-1973	ranges.end	
8-18	1973-1974	;	
8-19	1975-1976	-	
8-20	1976-1977	-	
8-21	1978-1983	using	
8-22	1984-1994	inequality	
8-23	1995-2006	expressions	
8-24	2007-2013	SELECT	
8-25	2014-2015	*	
8-26	2016-2020	FROM	
8-27	2021-2027	points	
8-28	2028-2032	JOIN	
8-29	2033-2039	ranges	
8-30	2040-2042	ON	
8-31	2043-2051	points.p	
8-32	2052-2053	>	
8-33	2053-2054	=	
8-34	2055-2067	ranges.start	
8-35	2068-2071	AND	
8-36	2072-2080	points.p	
8-37	2081-2082	<	
8-38	2083-2093	ranges.end	
8-39	2093-2094	;	

#Text=-- with fixed length interval SELECT * FROM points JOIN ranges ON points.p >= ranges.start AND points.p < ranges.start + 100; -- join two sets of point values within a fixed distance from each other SELECT *
9-1	2095-2096	-	
9-2	2096-2097	-	
9-3	2098-2102	with	
9-4	2103-2108	fixed	
9-5	2109-2115	length	
9-6	2116-2124	interval	
9-7	2125-2131	SELECT	
9-8	2132-2133	*	
9-9	2134-2138	FROM	
9-10	2139-2145	points	
9-11	2146-2150	JOIN	
9-12	2151-2157	ranges	
9-13	2158-2160	ON	
9-14	2161-2169	points.p	
9-15	2170-2171	>	
9-16	2171-2172	=	
9-17	2173-2185	ranges.start	
9-18	2186-2189	AND	
9-19	2190-2198	points.p	
9-20	2199-2200	<	
9-21	2201-2213	ranges.start	
9-22	2214-2215	+	
9-23	2216-2219	100	
9-24	2219-2220	;	
9-25	2221-2222	-	
9-26	2222-2223	-	
9-27	2224-2228	join	
9-28	2229-2232	two	
9-29	2233-2237	sets	
9-30	2238-2240	of	
9-31	2241-2246	point	
9-32	2247-2253	values	
9-33	2254-2260	within	
9-34	2261-2262	a	
9-35	2263-2268	fixed	
9-36	2269-2277	distance	
9-37	2278-2282	from	
9-38	2283-2287	each	
9-39	2288-2293	other	
9-40	2294-2300	SELECT	
9-41	2301-2302	*	

#Text=FROM points1 p1 JOIN points2 p2 ON p1.p >= p2.p - 10 AND p1.p <= p2.p + 10; -- a range condition together with other join conditions SELECT * FROM points, ranges WHERE points.symbol = ranges.symbol AND points.p >= ranges.start AND points.p < ranges.end;
10-1	2303-2307	FROM	
10-2	2308-2315	points1	
10-3	2316-2318	p1	
10-4	2319-2323	JOIN	
10-5	2324-2331	points2	
10-6	2332-2334	p2	
10-7	2335-2337	ON	
10-8	2338-2340	p1	
10-9	2340-2341	.	
10-10	2341-2342	p	
10-11	2343-2344	>	
10-12	2344-2345	=	
10-13	2346-2348	p2	
10-14	2348-2349	.	
10-15	2349-2350	p	
10-16	2351-2352	-	
10-17	2353-2355	10	
10-18	2356-2359	AND	
10-19	2360-2362	p1	
10-20	2362-2363	.	
10-21	2363-2364	p	
10-22	2365-2366	<	
10-23	2366-2367	=	
10-24	2368-2370	p2	
10-25	2370-2371	.	
10-26	2371-2372	p	
10-27	2373-2374	+	
10-28	2375-2377	10	
10-29	2377-2378	;	
10-30	2379-2380	-	
10-31	2380-2381	-	
10-32	2382-2383	a	
10-33	2384-2389	range	
10-34	2390-2399	condition	
10-35	2400-2408	together	
10-36	2409-2413	with	
10-37	2414-2419	other	
10-38	2420-2424	join	
10-39	2425-2435	conditions	
10-40	2436-2442	SELECT	
10-41	2443-2444	*	
10-42	2445-2449	FROM	
10-43	2450-2456	points	
10-44	2456-2457	,	
10-45	2458-2464	ranges	
10-46	2465-2470	WHERE	
10-47	2471-2484	points.symbol	
10-48	2485-2486	=	
10-49	2487-2500	ranges.symbol	
10-50	2501-2504	AND	
10-51	2505-2513	points.p	
10-52	2514-2515	>	
10-53	2515-2516	=	
10-54	2517-2529	ranges.start	
10-55	2530-2533	AND	
10-56	2534-2542	points.p	
10-57	2543-2544	<	
10-58	2545-2555	ranges.end	
10-59	2555-2556	;	

#Text=Interval overlap range join An interval overlap range join is a join in which the condition contains predicates specifying an overlap of intervals between two values from each relation. For example: -- overlap of [r1.start, r1.end] with [r2.start, r2.end]
11-1	2557-2565	Interval	
11-2	2566-2573	overlap	
11-3	2574-2579	range	
11-4	2580-2584	join	
11-5	2585-2587	An	
11-6	2588-2596	interval	
11-7	2597-2604	overlap	
11-8	2605-2610	range	
11-9	2611-2615	join	
11-10	2616-2618	is	
11-11	2619-2620	a	
11-12	2621-2625	join	
11-13	2626-2628	in	
11-14	2629-2634	which	
11-15	2635-2638	the	
11-16	2639-2648	condition	
11-17	2649-2657	contains	
11-18	2658-2668	predicates	
11-19	2669-2679	specifying	
11-20	2680-2682	an	
11-21	2683-2690	overlap	
11-22	2691-2693	of	
11-23	2694-2703	intervals	
11-24	2704-2711	between	
11-25	2712-2715	two	
11-26	2716-2722	values	
11-27	2723-2727	from	
11-28	2728-2732	each	
11-29	2733-2741	relation	
11-30	2741-2742	.	
11-31	2743-2746	For	
11-32	2747-2754	example	
11-33	2754-2755	:	
11-34	2756-2757	-	
11-35	2757-2758	-	
11-36	2759-2766	overlap	
11-37	2767-2769	of	
11-38	2770-2771	[	
11-39	2771-2773	r1	
11-40	2773-2774	.	
11-41	2774-2779	start	
11-42	2779-2780	,	
11-43	2781-2783	r1	
11-44	2783-2784	.	
11-45	2784-2787	end	
11-46	2787-2788	]	
11-47	2789-2793	with	
11-48	2794-2795	[	
11-49	2795-2797	r2	
11-50	2797-2798	.	
11-51	2798-2803	start	
11-52	2803-2804	,	
11-53	2805-2807	r2	
11-54	2807-2808	.	
11-55	2808-2811	end	
11-56	2811-2812	]	

#Text=SELECT * FROM r1 JOIN r2 ON r1.start < r2.end AND r2.start < r1.end; -- overlap of fixed length intervals SELECT *
12-1	2813-2819	SELECT	
12-2	2820-2821	*	
12-3	2822-2826	FROM	
12-4	2827-2829	r1	
12-5	2830-2834	JOIN	
12-6	2835-2837	r2	
12-7	2838-2840	ON	
12-8	2841-2843	r1	
12-9	2843-2844	.	
12-10	2844-2849	start	
12-11	2850-2851	<	
12-12	2852-2854	r2	
12-13	2854-2855	.	
12-14	2855-2858	end	
12-15	2859-2862	AND	
12-16	2863-2865	r2	
12-17	2865-2866	.	
12-18	2866-2871	start	
12-19	2872-2873	<	
12-20	2874-2876	r1	
12-21	2876-2877	.	
12-22	2877-2880	end	
12-23	2880-2881	;	
12-24	2882-2883	-	
12-25	2883-2884	-	
12-26	2885-2892	overlap	
12-27	2893-2895	of	
12-28	2896-2901	fixed	
12-29	2902-2908	length	
12-30	2909-2918	intervals	
12-31	2919-2925	SELECT	
12-32	2926-2927	*	

#Text=FROM r1 JOIN r2 ON r1.start < r2.start + 100 AND r2.start < r1.start + 100; -- a range condition together with other join conditions SELECT * FROM r1 JOIN r2 ON r1.symbol = r2.symbol AND r1.start <= r2.end AND r1.end >= r2.start;
13-1	2928-2932	FROM	
13-2	2933-2935	r1	
13-3	2936-2940	JOIN	
13-4	2941-2943	r2	
13-5	2944-2946	ON	
13-6	2947-2949	r1	
13-7	2949-2950	.	
13-8	2950-2955	start	
13-9	2956-2957	<	
13-10	2958-2960	r2	
13-11	2960-2961	.	
13-12	2961-2966	start	
13-13	2967-2968	+	
13-14	2969-2972	100	
13-15	2973-2976	AND	
13-16	2977-2979	r2	
13-17	2979-2980	.	
13-18	2980-2985	start	
13-19	2986-2987	<	
13-20	2988-2990	r1	
13-21	2990-2991	.	
13-22	2991-2996	start	
13-23	2997-2998	+	
13-24	2999-3002	100	
13-25	3002-3003	;	
13-26	3004-3005	-	
13-27	3005-3006	-	
13-28	3007-3008	a	
13-29	3009-3014	range	
13-30	3015-3024	condition	
13-31	3025-3033	together	
13-32	3034-3038	with	
13-33	3039-3044	other	
13-34	3045-3049	join	
13-35	3050-3060	conditions	
13-36	3061-3067	SELECT	
13-37	3068-3069	*	
13-38	3070-3074	FROM	
13-39	3075-3077	r1	
13-40	3078-3082	JOIN	
13-41	3083-3085	r2	
13-42	3086-3088	ON	
13-43	3089-3091	r1	
13-44	3091-3092	.	
13-45	3092-3098	symbol	
13-46	3099-3100	=	
13-47	3101-3103	r2	
13-48	3103-3104	.	
13-49	3104-3110	symbol	
13-50	3111-3114	AND	
13-51	3115-3117	r1	
13-52	3117-3118	.	
13-53	3118-3123	start	
13-54	3124-3125	<	
13-55	3125-3126	=	
13-56	3127-3129	r2	
13-57	3129-3130	.	
13-58	3130-3133	end	
13-59	3134-3137	AND	
13-60	3138-3140	r1	
13-61	3140-3141	.	
13-62	3141-3144	end	
13-63	3145-3146	>	
13-64	3146-3147	=	
13-65	3148-3150	r2	
13-66	3150-3151	.	
13-67	3151-3156	start	
13-68	3156-3157	;	

#Text=Range join optimization The range join optimization is performed for joins that: Have a condition that can be interpreted as a point in interval or interval overlap range join. All values involved in the range join condition are of a numeric type (integral, floating point, decimal), DATE, or TIMESTAMP.
14-1	3158-3163	Range	
14-2	3164-3168	join	
14-3	3169-3181	optimization	
14-4	3182-3185	The	
14-5	3186-3191	range	
14-6	3192-3196	join	
14-7	3197-3209	optimization	
14-8	3210-3212	is	
14-9	3213-3222	performed	
14-10	3223-3226	for	
14-11	3227-3232	joins	
14-12	3233-3237	that	
14-13	3237-3238	:	
14-14	3239-3243	Have	
14-15	3244-3245	a	
14-16	3246-3255	condition	
14-17	3256-3260	that	
14-18	3261-3264	can	
14-19	3265-3267	be	
14-20	3268-3279	interpreted	
14-21	3280-3282	as	
14-22	3283-3284	a	
14-23	3285-3290	point	
14-24	3291-3293	in	
14-25	3294-3302	interval	
14-26	3303-3305	or	
14-27	3306-3314	interval	
14-28	3315-3322	overlap	
14-29	3323-3328	range	
14-30	3329-3333	join	
14-31	3333-3334	.	
14-32	3335-3338	All	
14-33	3339-3345	values	
14-34	3346-3354	involved	
14-35	3355-3357	in	
14-36	3358-3361	the	
14-37	3362-3367	range	
14-38	3368-3372	join	
14-39	3373-3382	condition	
14-40	3383-3386	are	
14-41	3387-3389	of	
14-42	3390-3391	a	
14-43	3392-3399	numeric	
14-44	3400-3404	type	
14-45	3405-3406	(	
14-46	3406-3414	integral	
14-47	3414-3415	,	
14-48	3416-3424	floating	
14-49	3425-3430	point	
14-50	3430-3431	,	
14-51	3432-3439	decimal	
14-52	3439-3440	)	
14-53	3440-3441	,	
14-54	3442-3446	DATE	
14-55	3446-3447	,	
14-56	3448-3450	or	
14-57	3451-3460	TIMESTAMP	
14-58	3460-3461	.	

#Text=All values involved in the range join condition are of the same type. In the case of the decimal type, the values also need to be of the same scale and precision. It is an INNER JOIN, or in case of point in interval range join, a LEFT OUTER JOIN with point value on the left side, or RIGHT OUTER JOIN with point value on the right side. Have a bin size tuning parameter.
15-1	3462-3465	All	
15-2	3466-3472	values	
15-3	3473-3481	involved	
15-4	3482-3484	in	
15-5	3485-3488	the	
15-6	3489-3494	range	
15-7	3495-3499	join	
15-8	3500-3509	condition	
15-9	3510-3513	are	
15-10	3514-3516	of	
15-11	3517-3520	the	
15-12	3521-3525	same	
15-13	3526-3530	type	
15-14	3530-3531	.	
15-15	3532-3534	In	
15-16	3535-3538	the	
15-17	3539-3543	case	
15-18	3544-3546	of	
15-19	3547-3550	the	
15-20	3551-3558	decimal	
15-21	3559-3563	type	
15-22	3563-3564	,	
15-23	3565-3568	the	
15-24	3569-3575	values	
15-25	3576-3580	also	
15-26	3581-3585	need	
15-27	3586-3588	to	
15-28	3589-3591	be	
15-29	3592-3594	of	
15-30	3595-3598	the	
15-31	3599-3603	same	
15-32	3604-3609	scale	
15-33	3610-3613	and	
15-34	3614-3623	precision	
15-35	3623-3624	.	
15-36	3625-3627	It	
15-37	3628-3630	is	
15-38	3631-3633	an	
15-39	3634-3639	INNER	
15-40	3640-3644	JOIN	
15-41	3644-3645	,	
15-42	3646-3648	or	
15-43	3649-3651	in	
15-44	3652-3656	case	
15-45	3657-3659	of	
15-46	3660-3665	point	
15-47	3666-3668	in	
15-48	3669-3677	interval	
15-49	3678-3683	range	
15-50	3684-3688	join	
15-51	3688-3689	,	
15-52	3690-3691	a	
15-53	3692-3696	LEFT	
15-54	3697-3702	OUTER	
15-55	3703-3707	JOIN	
15-56	3708-3712	with	
15-57	3713-3718	point	
15-58	3719-3724	value	
15-59	3725-3727	on	
15-60	3728-3731	the	
15-61	3732-3736	left	
15-62	3737-3741	side	
15-63	3741-3742	,	
15-64	3743-3745	or	
15-65	3746-3751	RIGHT	
15-66	3752-3757	OUTER	
15-67	3758-3762	JOIN	
15-68	3763-3767	with	
15-69	3768-3773	point	
15-70	3774-3779	value	
15-71	3780-3782	on	
15-72	3783-3786	the	
15-73	3787-3792	right	
15-74	3793-3797	side	
15-75	3797-3798	.	
15-76	3799-3803	Have	
15-77	3804-3805	a	
15-78	3806-3809	bin	
15-79	3810-3814	size	
15-80	3815-3821	tuning	
15-81	3822-3831	parameter	
15-82	3831-3832	.	

#Text=Bin size The bin size is a numeric tuning parameter that splits the values domain of the range condition into multiple bins of equal size. For example, with a bin size of 10, the optimization splits the domain into bins that are intervals of length 10.
16-1	3833-3836	Bin	
16-2	3837-3841	size	
16-3	3842-3845	The	
16-4	3846-3849	bin	
16-5	3850-3854	size	
16-6	3855-3857	is	
16-7	3858-3859	a	
16-8	3860-3867	numeric	
16-9	3868-3874	tuning	
16-10	3875-3884	parameter	
16-11	3885-3889	that	
16-12	3890-3896	splits	
16-13	3897-3900	the	
16-14	3901-3907	values	
16-15	3908-3914	domain	
16-16	3915-3917	of	
16-17	3918-3921	the	
16-18	3922-3927	range	
16-19	3928-3937	condition	
16-20	3938-3942	into	
16-21	3943-3951	multiple	
16-22	3952-3956	bins	
16-23	3957-3959	of	
16-24	3960-3965	equal	
16-25	3966-3970	size	
16-26	3970-3971	.	
16-27	3972-3975	For	
16-28	3976-3983	example	
16-29	3983-3984	,	
16-30	3985-3989	with	
16-31	3990-3991	a	
16-32	3992-3995	bin	
16-33	3996-4000	size	
16-34	4001-4003	of	
16-35	4004-4006	10	
16-36	4006-4007	,	
16-37	4008-4011	the	
16-38	4012-4024	optimization	
16-39	4025-4031	splits	
16-40	4032-4035	the	
16-41	4036-4042	domain	
16-42	4043-4047	into	
16-43	4048-4052	bins	
16-44	4053-4057	that	
16-45	4058-4061	are	
16-46	4062-4071	intervals	
16-47	4072-4074	of	
16-48	4075-4081	length	
16-49	4082-4084	10	
16-50	4084-4085	.	

#Text=If you have a point in range condition of p BETWEEN start AND end, and start is 8 and end is 22, this value interval overlaps with three bins of length 10 – the first bin from 0 to 10, the second bin from 10 to 20, and the third bin from 20 to 30. Only the points that fall within the same three bins need to be considered as possible join matches for that interval. For example, if p is 32, it can be ruled out as falling between start of 8 and end of 22, because it falls in the bin from 30 to 40. Note For DATE values, the value of the bin size is interpreted as days. For example, a bin size value of 7 represents a week.
17-1	4086-4088	If	
17-2	4089-4092	you	
17-3	4093-4097	have	
17-4	4098-4099	a	
17-5	4100-4105	point	
17-6	4106-4108	in	
17-7	4109-4114	range	
17-8	4115-4124	condition	
17-9	4125-4127	of	
17-10	4128-4129	p	
17-11	4130-4137	BETWEEN	
17-12	4138-4143	start	
17-13	4144-4147	AND	
17-14	4148-4151	end	
17-15	4151-4152	,	
17-16	4153-4156	and	
17-17	4157-4162	start	
17-18	4163-4165	is	
17-19	4166-4167	8	
17-20	4168-4171	and	
17-21	4172-4175	end	
17-22	4176-4178	is	
17-23	4179-4181	22	
17-24	4181-4182	,	
17-25	4183-4187	this	
17-26	4188-4193	value	
17-27	4194-4202	interval	
17-28	4203-4211	overlaps	
17-29	4212-4216	with	
17-30	4217-4222	three	
17-31	4223-4227	bins	
17-32	4228-4230	of	
17-33	4231-4237	length	
17-34	4238-4240	10	
17-35	4241-4242	–	
17-36	4243-4246	the	
17-37	4247-4252	first	
17-38	4253-4256	bin	
17-39	4257-4261	from	
17-40	4262-4263	0	
17-41	4264-4266	to	
17-42	4267-4269	10	
17-43	4269-4270	,	
17-44	4271-4274	the	
17-45	4275-4281	second	
17-46	4282-4285	bin	
17-47	4286-4290	from	
17-48	4291-4293	10	
17-49	4294-4296	to	
17-50	4297-4299	20	
17-51	4299-4300	,	
17-52	4301-4304	and	
17-53	4305-4308	the	
17-54	4309-4314	third	
17-55	4315-4318	bin	
17-56	4319-4323	from	
17-57	4324-4326	20	
17-58	4327-4329	to	
17-59	4330-4332	30	
17-60	4332-4333	.	
17-61	4334-4338	Only	
17-62	4339-4342	the	
17-63	4343-4349	points	
17-64	4350-4354	that	
17-65	4355-4359	fall	
17-66	4360-4366	within	
17-67	4367-4370	the	
17-68	4371-4375	same	
17-69	4376-4381	three	
17-70	4382-4386	bins	
17-71	4387-4391	need	
17-72	4392-4394	to	
17-73	4395-4397	be	
17-74	4398-4408	considered	
17-75	4409-4411	as	
17-76	4412-4420	possible	
17-77	4421-4425	join	
17-78	4426-4433	matches	
17-79	4434-4437	for	
17-80	4438-4442	that	
17-81	4443-4451	interval	
17-82	4451-4452	.	
17-83	4453-4456	For	
17-84	4457-4464	example	
17-85	4464-4465	,	
17-86	4466-4468	if	
17-87	4469-4470	p	
17-88	4471-4473	is	
17-89	4474-4476	32	
17-90	4476-4477	,	
17-91	4478-4480	it	
17-92	4481-4484	can	
17-93	4485-4487	be	
17-94	4488-4493	ruled	
17-95	4494-4497	out	
17-96	4498-4500	as	
17-97	4501-4508	falling	
17-98	4509-4516	between	
17-99	4517-4522	start	
17-100	4523-4525	of	
17-101	4526-4527	8	
17-102	4528-4531	and	
17-103	4532-4535	end	
17-104	4536-4538	of	
17-105	4539-4541	22	
17-106	4541-4542	,	
17-107	4543-4550	because	
17-108	4551-4553	it	
17-109	4554-4559	falls	
17-110	4560-4562	in	
17-111	4563-4566	the	
17-112	4567-4570	bin	
17-113	4571-4575	from	
17-114	4576-4578	30	
17-115	4579-4581	to	
17-116	4582-4584	40	
17-117	4584-4585	.	
17-118	4586-4590	Note	
17-119	4591-4594	For	
17-120	4595-4599	DATE	
17-121	4600-4606	values	
17-122	4606-4607	,	
17-123	4608-4611	the	
17-124	4612-4617	value	
17-125	4618-4620	of	
17-126	4621-4624	the	
17-127	4625-4628	bin	
17-128	4629-4633	size	
17-129	4634-4636	is	
17-130	4637-4648	interpreted	
17-131	4649-4651	as	
17-132	4652-4656	days	
17-133	4656-4657	.	
17-134	4658-4661	For	
17-135	4662-4669	example	
17-136	4669-4670	,	
17-137	4671-4672	a	
17-138	4673-4676	bin	
17-139	4677-4681	size	
17-140	4682-4687	value	
17-141	4688-4690	of	
17-142	4691-4692	7	
17-143	4693-4703	represents	
17-144	4704-4705	a	
17-145	4706-4710	week	
17-146	4710-4711	.	

#Text=For TIMESTAMP values, the value of the bin size is interpreted as seconds. If a sub-second value is required, fractional values can be used. For example, a bin size value of 60 represents a minute, and a bin size value of 0.1 represents 100 milliseconds. You can specify the bin size either by using a range join hint in the query or by setting a session configuration parameter. The range join optimization is applied only if you manually specify the bin size. Section Choose the bin size describes how to choose an optimal bin size.
18-1	4712-4715	For	
18-2	4716-4725	TIMESTAMP	
18-3	4726-4732	values	
18-4	4732-4733	,	
18-5	4734-4737	the	
18-6	4738-4743	value	
18-7	4744-4746	of	
18-8	4747-4750	the	
18-9	4751-4754	bin	
18-10	4755-4759	size	
18-11	4760-4762	is	
18-12	4763-4774	interpreted	
18-13	4775-4777	as	
18-14	4778-4785	seconds	
18-15	4785-4786	.	
18-16	4787-4789	If	
18-17	4790-4791	a	
18-18	4792-4802	sub-second	
18-19	4803-4808	value	
18-20	4809-4811	is	
18-21	4812-4820	required	
18-22	4820-4821	,	
18-23	4822-4832	fractional	
18-24	4833-4839	values	
18-25	4840-4843	can	
18-26	4844-4846	be	
18-27	4847-4851	used	
18-28	4851-4852	.	
18-29	4853-4856	For	
18-30	4857-4864	example	
18-31	4864-4865	,	
18-32	4866-4867	a	
18-33	4868-4871	bin	
18-34	4872-4876	size	
18-35	4877-4882	value	
18-36	4883-4885	of	
18-37	4886-4888	60	
18-38	4889-4899	represents	
18-39	4900-4901	a	
18-40	4902-4908	minute	
18-41	4908-4909	,	
18-42	4910-4913	and	
18-43	4914-4915	a	
18-44	4916-4919	bin	
18-45	4920-4924	size	
18-46	4925-4930	value	
18-47	4931-4933	of	
18-48	4934-4937	0.1	
18-49	4938-4948	represents	
18-50	4949-4952	100	
18-51	4953-4965	milliseconds	
18-52	4965-4966	.	
18-53	4967-4970	You	
18-54	4971-4974	can	
18-55	4975-4982	specify	
18-56	4983-4986	the	
18-57	4987-4990	bin	
18-58	4991-4995	size	
18-59	4996-5002	either	
18-60	5003-5005	by	
18-61	5006-5011	using	
18-62	5012-5013	a	
18-63	5014-5019	range	
18-64	5020-5024	join	
18-65	5025-5029	hint	
18-66	5030-5032	in	
18-67	5033-5036	the	
18-68	5037-5042	query	
18-69	5043-5045	or	
18-70	5046-5048	by	
18-71	5049-5056	setting	
18-72	5057-5058	a	
18-73	5059-5066	session	
18-74	5067-5080	configuration	
18-75	5081-5090	parameter	
18-76	5090-5091	.	
18-77	5092-5095	The	
18-78	5096-5101	range	
18-79	5102-5106	join	
18-80	5107-5119	optimization	
18-81	5120-5122	is	
18-82	5123-5130	applied	
18-83	5131-5135	only	
18-84	5136-5138	if	
18-85	5139-5142	you	
18-86	5143-5151	manually	
18-87	5152-5159	specify	
18-88	5160-5163	the	
18-89	5164-5167	bin	
18-90	5168-5172	size	
18-91	5172-5173	.	
18-92	5174-5181	Section	
18-93	5182-5188	Choose	
18-94	5189-5192	the	
18-95	5193-5196	bin	
18-96	5197-5201	size	
18-97	5202-5211	describes	
18-98	5212-5215	how	
18-99	5216-5218	to	
18-100	5219-5225	choose	
18-101	5226-5228	an	
18-102	5229-5236	optimal	
18-103	5237-5240	bin	
18-104	5241-5245	size	
18-105	5245-5246	.	

#Text=Enable range join using a range join hint To enable the range join optimization in a SQL query, you can use a range join hint to specify the bin size. The hint must contain the relation name of one of the joined relations and the numeric bin size parameter. The relation name can be a table, a view, or a subquery.
19-1	5247-5253	Enable	
19-2	5254-5259	range	
19-3	5260-5264	join	
19-4	5265-5270	using	
19-5	5271-5272	a	
19-6	5273-5278	range	
19-7	5279-5283	join	
19-8	5284-5288	hint	
19-9	5289-5291	To	
19-10	5292-5298	enable	
19-11	5299-5302	the	
19-12	5303-5308	range	
19-13	5309-5313	join	
19-14	5314-5326	optimization	
19-15	5327-5329	in	
19-16	5330-5331	a	
19-17	5332-5335	SQL	
19-18	5336-5341	query	
19-19	5341-5342	,	
19-20	5343-5346	you	
19-21	5347-5350	can	
19-22	5351-5354	use	
19-23	5355-5356	a	
19-24	5357-5362	range	
19-25	5363-5367	join	
19-26	5368-5372	hint	
19-27	5373-5375	to	
19-28	5376-5383	specify	
19-29	5384-5387	the	
19-30	5388-5391	bin	
19-31	5392-5396	size	
19-32	5396-5397	.	
19-33	5398-5401	The	
19-34	5402-5406	hint	
19-35	5407-5411	must	
19-36	5412-5419	contain	
19-37	5420-5423	the	
19-38	5424-5432	relation	
19-39	5433-5437	name	
19-40	5438-5440	of	
19-41	5441-5444	one	
19-42	5445-5447	of	
19-43	5448-5451	the	
19-44	5452-5458	joined	
19-45	5459-5468	relations	
19-46	5469-5472	and	
19-47	5473-5476	the	
19-48	5477-5484	numeric	
19-49	5485-5488	bin	
19-50	5489-5493	size	
19-51	5494-5503	parameter	
19-52	5503-5504	.	
19-53	5505-5508	The	
19-54	5509-5517	relation	
19-55	5518-5522	name	
19-56	5523-5526	can	
19-57	5527-5529	be	
19-58	5530-5531	a	
19-59	5532-5537	table	
19-60	5537-5538	,	
19-61	5539-5540	a	
19-62	5541-5545	view	
19-63	5545-5546	,	
19-64	5547-5549	or	
19-65	5550-5551	a	
19-66	5552-5560	subquery	
19-67	5560-5561	.	

#Text=SELECT /*+ RANGE_JOIN(points, 10) */ * FROM points JOIN ranges ON points.p >= ranges.start AND points.p < ranges.end; SELECT /*+ RANGE_JOIN(r1, 0.1) */ *
20-1	5562-5568	SELECT	
20-2	5569-5570	/	
20-3	5570-5571	*	
20-4	5571-5572	+	
20-5	5573-5583	RANGE_JOIN	
20-6	5583-5584	(	
20-7	5584-5590	points	
20-8	5590-5591	,	
20-9	5592-5594	10	
20-10	5594-5595	)	
20-11	5596-5597	*	
20-12	5597-5598	/	
20-13	5599-5600	*	
20-14	5601-5605	FROM	
20-15	5606-5612	points	
20-16	5613-5617	JOIN	
20-17	5618-5624	ranges	
20-18	5625-5627	ON	
20-19	5628-5636	points.p	
20-20	5637-5638	>	
20-21	5638-5639	=	
20-22	5640-5652	ranges.start	
20-23	5653-5656	AND	
20-24	5657-5665	points.p	
20-25	5666-5667	<	
20-26	5668-5678	ranges.end	
20-27	5678-5679	;	
20-28	5680-5686	SELECT	
20-29	5687-5688	/	
20-30	5688-5689	*	
20-31	5689-5690	+	
20-32	5691-5701	RANGE_JOIN	
20-33	5701-5702	(	
20-34	5702-5704	r1	
20-35	5704-5705	,	
20-36	5706-5709	0.1	
20-37	5709-5710	)	
20-38	5711-5712	*	
20-39	5712-5713	/	
20-40	5714-5715	*	

#Text=FROM (SELECT * FROM ranges WHERE ranges.amount < 100) r1, ranges r2 WHERE r1.start < r2.start + 100 AND r2.start < r1.start + 100; SELECT /*+ RANGE_JOIN(c, 500) */ * FROM a
21-1	5716-5720	FROM	
21-2	5721-5722	(	
21-3	5722-5728	SELECT	
21-4	5729-5730	*	
21-5	5731-5735	FROM	
21-6	5736-5742	ranges	
21-7	5743-5748	WHERE	
21-8	5749-5762	ranges.amount	
21-9	5763-5764	<	
21-10	5765-5768	100	
21-11	5768-5769	)	
21-12	5770-5772	r1	
21-13	5772-5773	,	
21-14	5774-5780	ranges	
21-15	5781-5783	r2	
21-16	5784-5789	WHERE	
21-17	5790-5792	r1	
21-18	5792-5793	.	
21-19	5793-5798	start	
21-20	5799-5800	<	
21-21	5801-5803	r2	
21-22	5803-5804	.	
21-23	5804-5809	start	
21-24	5810-5811	+	
21-25	5812-5815	100	
21-26	5816-5819	AND	
21-27	5820-5822	r2	
21-28	5822-5823	.	
21-29	5823-5828	start	
21-30	5829-5830	<	
21-31	5831-5833	r1	
21-32	5833-5834	.	
21-33	5834-5839	start	
21-34	5840-5841	+	
21-35	5842-5845	100	
21-36	5845-5846	;	
21-37	5847-5853	SELECT	
21-38	5854-5855	/	
21-39	5855-5856	*	
21-40	5856-5857	+	
21-41	5858-5868	RANGE_JOIN	
21-42	5868-5869	(	
21-43	5869-5870	c	
21-44	5870-5871	,	
21-45	5872-5875	500	
21-46	5875-5876	)	
21-47	5877-5878	*	
21-48	5878-5879	/	
21-49	5880-5881	*	
21-50	5882-5886	FROM	
21-51	5887-5888	a	

#Text=JOIN b ON (a.b_key = b.id) JOIN c ON (a.ts BETWEEN c.start_time AND c.end_time) Note In the third example, you must place the hint on c. This is because joins are left associative, so the query is interpreted as (a JOIN b) JOIN c,
22-1	5889-5893	JOIN	
22-2	5894-5895	b	
22-3	5896-5898	ON	
22-4	5899-5900	(	
22-5	5900-5907	a.b_key	
22-6	5908-5909	=	
22-7	5910-5914	b.id	
22-8	5914-5915	)	
22-9	5916-5920	JOIN	
22-10	5921-5922	c	
22-11	5923-5925	ON	
22-12	5926-5927	(	
22-13	5927-5931	a.ts	
22-14	5932-5939	BETWEEN	
22-15	5940-5952	c.start_time	
22-16	5953-5956	AND	
22-17	5957-5967	c.end_time	
22-18	5967-5968	)	
22-19	5969-5973	Note	
22-20	5974-5976	In	
22-21	5977-5980	the	
22-22	5981-5986	third	
22-23	5987-5994	example	
22-24	5994-5995	,	
22-25	5996-5999	you	
22-26	6000-6004	must	
22-27	6005-6010	place	
22-28	6011-6014	the	
22-29	6015-6019	hint	
22-30	6020-6022	on	
22-31	6023-6024	c	
22-32	6024-6025	.	
22-33	6026-6030	This	
22-34	6031-6033	is	
22-35	6034-6041	because	
22-36	6042-6047	joins	
22-37	6048-6051	are	
22-38	6052-6056	left	
22-39	6057-6068	associative	
22-40	6068-6069	,	
22-41	6070-6072	so	
22-42	6073-6076	the	
22-43	6077-6082	query	
22-44	6083-6085	is	
22-45	6086-6097	interpreted	
22-46	6098-6100	as	
22-47	6101-6102	(	
22-48	6102-6103	a	
22-49	6104-6108	JOIN	
22-50	6109-6110	b	
22-51	6110-6111	)	
22-52	6112-6116	JOIN	
22-53	6117-6118	c	
22-54	6118-6119	,	

#Text=and the hint on a applies to the join of a with b and not the join with c. You can also place a range join hint on one of the joined DataFrames. In that case, the hint contains just the numeric bin size parameter. val df1 = spark.table("ranges").as("left")
23-1	6120-6123	and	
23-2	6124-6127	the	
23-3	6128-6132	hint	
23-4	6133-6135	on	
23-5	6136-6137	a	
23-6	6138-6145	applies	
23-7	6146-6148	to	
23-8	6149-6152	the	
23-9	6153-6157	join	
23-10	6158-6160	of	
23-11	6161-6162	a	
23-12	6163-6167	with	
23-13	6168-6169	b	
23-14	6170-6173	and	
23-15	6174-6177	not	
23-16	6178-6181	the	
23-17	6182-6186	join	
23-18	6187-6191	with	
23-19	6192-6193	c	
23-20	6193-6194	.	
23-21	6195-6198	You	
23-22	6199-6202	can	
23-23	6203-6207	also	
23-24	6208-6213	place	
23-25	6214-6215	a	
23-26	6216-6221	range	
23-27	6222-6226	join	
23-28	6227-6231	hint	
23-29	6232-6234	on	
23-30	6235-6238	one	
23-31	6239-6241	of	
23-32	6242-6245	the	
23-33	6246-6252	joined	
23-34	6253-6263	DataFrames	
23-35	6263-6264	.	
23-36	6265-6267	In	
23-37	6268-6272	that	
23-38	6273-6277	case	
23-39	6277-6278	,	
23-40	6279-6282	the	
23-41	6283-6287	hint	
23-42	6288-6296	contains	
23-43	6297-6301	just	
23-44	6302-6305	the	
23-45	6306-6313	numeric	
23-46	6314-6317	bin	
23-47	6318-6322	size	
23-48	6323-6332	parameter	
23-49	6332-6333	.	
23-50	6334-6337	val	
23-51	6338-6341	df1	
23-52	6342-6343	=	
23-53	6344-6355	spark.table	
23-54	6355-6356	(	
23-55	6356-6357	"	
23-56	6357-6363	ranges	
23-57	6363-6364	"	
23-58	6364-6365	)	
23-59	6365-6366	.	
23-60	6366-6368	as	
23-61	6368-6369	(	
23-62	6369-6370	"	
23-63	6370-6374	left	
23-64	6374-6375	"	
23-65	6375-6376	)	

#Text=val df2 = spark.table("ranges").as("right") val joined = df1.hint("range_join", 10) .join(df2, $"left.type" === $"right.type" && $"left.end" > $"right.start" &&
24-1	6377-6380	val	
24-2	6381-6384	df2	
24-3	6385-6386	=	
24-4	6387-6398	spark.table	
24-5	6398-6399	(	
24-6	6399-6400	"	
24-7	6400-6406	ranges	
24-8	6406-6407	"	
24-9	6407-6408	)	
24-10	6408-6409	.	
24-11	6409-6411	as	
24-12	6411-6412	(	
24-13	6412-6413	"	
24-14	6413-6418	right	
24-15	6418-6419	"	
24-16	6419-6420	)	
24-17	6421-6424	val	
24-18	6425-6431	joined	
24-19	6432-6433	=	
24-20	6434-6437	df1	
24-21	6437-6438	.	
24-22	6438-6442	hint	
24-23	6442-6443	(	
24-24	6443-6444	"	
24-25	6444-6454	range_join	
24-26	6454-6455	"	
24-27	6455-6456	,	
24-28	6457-6459	10	
24-29	6459-6460	)	
24-30	6461-6462	.	
24-31	6462-6466	join	
24-32	6466-6467	(	
24-33	6467-6470	df2	
24-34	6470-6471	,	
24-35	6472-6473	$	
24-36	6473-6474	"	
24-37	6474-6483	left.type	
24-38	6483-6484	"	
24-39	6485-6486	=	
24-40	6486-6487	=	
24-41	6487-6488	=	
24-42	6489-6490	$	
24-43	6490-6491	"	
24-44	6491-6501	right.type	
24-45	6501-6502	"	
24-46	6503-6504	&	
24-47	6504-6505	&	
24-48	6506-6507	$	
24-49	6507-6508	"	
24-50	6508-6516	left.end	
24-51	6516-6517	"	
24-52	6518-6519	>	
24-53	6520-6521	$	
24-54	6521-6522	"	
24-55	6522-6533	right.start	
24-56	6533-6534	"	
24-57	6535-6536	&	
24-58	6536-6537	&	

#Text=$"left.start" < $"right.end") val joined2 = df1 .join(df2.hint("range_join", 0.5), $"left.type" === $"right.type" && $"left.end" > $"right.start" &&
25-1	6538-6539	$	
25-2	6539-6540	"	
25-3	6540-6550	left.start	
25-4	6550-6551	"	
25-5	6552-6553	<	
25-6	6554-6555	$	
25-7	6555-6556	"	
25-8	6556-6565	right.end	
25-9	6565-6566	"	
25-10	6566-6567	)	
25-11	6568-6571	val	
25-12	6572-6579	joined2	
25-13	6580-6581	=	
25-14	6582-6585	df1	
25-15	6586-6587	.	
25-16	6587-6591	join	
25-17	6591-6592	(	
25-18	6592-6595	df2	
25-19	6595-6596	.	
25-20	6596-6600	hint	
25-21	6600-6601	(	
25-22	6601-6602	"	
25-23	6602-6612	range_join	
25-24	6612-6613	"	
25-25	6613-6614	,	
25-26	6615-6618	0.5	
25-27	6618-6619	)	
25-28	6619-6620	,	
25-29	6621-6622	$	
25-30	6622-6623	"	
25-31	6623-6632	left.type	
25-32	6632-6633	"	
25-33	6634-6635	=	
25-34	6635-6636	=	
25-35	6636-6637	=	
25-36	6638-6639	$	
25-37	6639-6640	"	
25-38	6640-6650	right.type	
25-39	6650-6651	"	
25-40	6652-6653	&	
25-41	6653-6654	&	
25-42	6655-6656	$	
25-43	6656-6657	"	
25-44	6657-6665	left.end	
25-45	6665-6666	"	
25-46	6667-6668	>	
25-47	6669-6670	$	
25-48	6670-6671	"	
25-49	6671-6682	right.start	
25-50	6682-6683	"	
25-51	6684-6685	&	
25-52	6685-6686	&	

#Text=$"left.start" < $"right.end") Enable range join using session configuration If you don’t want to modify the query, you can specify the bin size as a configuration parameter. SET spark.databricks.optimizer.rangeJoin.binSize=5
26-1	6687-6688	$	
26-2	6688-6689	"	
26-3	6689-6699	left.start	
26-4	6699-6700	"	
26-5	6701-6702	<	
26-6	6703-6704	$	
26-7	6704-6705	"	
26-8	6705-6714	right.end	
26-9	6714-6715	"	
26-10	6715-6716	)	
26-11	6717-6723	Enable	
26-12	6724-6729	range	
26-13	6730-6734	join	
26-14	6735-6740	using	
26-15	6741-6748	session	
26-16	6749-6762	configuration	
26-17	6763-6765	If	
26-18	6766-6769	you	
26-19	6770-6773	don	
26-20	6773-6774	’	
26-21	6774-6775	t	
26-22	6776-6780	want	
26-23	6781-6783	to	
26-24	6784-6790	modify	
26-25	6791-6794	the	
26-26	6795-6800	query	
26-27	6800-6801	,	
26-28	6802-6805	you	
26-29	6806-6809	can	
26-30	6810-6817	specify	
26-31	6818-6821	the	
26-32	6822-6825	bin	
26-33	6826-6830	size	
26-34	6831-6833	as	
26-35	6834-6835	a	
26-36	6836-6849	configuration	
26-37	6850-6859	parameter	
26-38	6859-6860	.	
26-39	6861-6864	SET	
26-40	6865-6909	spark.databricks.optimizer.rangeJoin.binSize	
26-41	6909-6910	=	
26-42	6910-6911	5	

#Text=This configuration parameter applies to any join with a range condition. However, a different bin size set through a range join hint always overrides the one set through the parameter. Choose the bin size The effectiveness of the range join optimization depends on choosing the appropriate bin size. A small bin size results in a larger number of bins, which helps in filtering the potential matches.
27-1	6912-6916	This	
27-2	6917-6930	configuration	
27-3	6931-6940	parameter	
27-4	6941-6948	applies	
27-5	6949-6951	to	
27-6	6952-6955	any	
27-7	6956-6960	join	
27-8	6961-6965	with	
27-9	6966-6967	a	
27-10	6968-6973	range	
27-11	6974-6983	condition	
27-12	6983-6984	.	
27-13	6985-6992	However	
27-14	6992-6993	,	
27-15	6994-6995	a	
27-16	6996-7005	different	
27-17	7006-7009	bin	
27-18	7010-7014	size	
27-19	7015-7018	set	
27-20	7019-7026	through	
27-21	7027-7028	a	
27-22	7029-7034	range	
27-23	7035-7039	join	
27-24	7040-7044	hint	
27-25	7045-7051	always	
27-26	7052-7061	overrides	
27-27	7062-7065	the	
27-28	7066-7069	one	
27-29	7070-7073	set	
27-30	7074-7081	through	
27-31	7082-7085	the	
27-32	7086-7095	parameter	
27-33	7095-7096	.	
27-34	7097-7103	Choose	
27-35	7104-7107	the	
27-36	7108-7111	bin	
27-37	7112-7116	size	
27-38	7117-7120	The	
27-39	7121-7134	effectiveness	
27-40	7135-7137	of	
27-41	7138-7141	the	
27-42	7142-7147	range	
27-43	7148-7152	join	
27-44	7153-7165	optimization	
27-45	7166-7173	depends	
27-46	7174-7176	on	
27-47	7177-7185	choosing	
27-48	7186-7189	the	
27-49	7190-7201	appropriate	
27-50	7202-7205	bin	
27-51	7206-7210	size	
27-52	7210-7211	.	
27-53	7212-7213	A	
27-54	7214-7219	small	
27-55	7220-7223	bin	
27-56	7224-7228	size	
27-57	7229-7236	results	
27-58	7237-7239	in	
27-59	7240-7241	a	
27-60	7242-7248	larger	
27-61	7249-7255	number	
27-62	7256-7258	of	
27-63	7259-7263	bins	
27-64	7263-7264	,	
27-65	7265-7270	which	
27-66	7271-7276	helps	
27-67	7277-7279	in	
27-68	7280-7289	filtering	
27-69	7290-7293	the	
27-70	7294-7303	potential	
27-71	7304-7311	matches	
27-72	7311-7312	.	

#Text=However, it becomes inefficient if the bin size is significantly smaller than the encountered value intervals, and the value intervals overlap multiple bin intervals. For example, with a condition p BETWEEN start AND end, where start is 1,000,000 and end is 1,999,999, and a bin size of 10, the value interval overlaps with 100,000 bins. If the length of the interval is fairly uniform and known, we recommend that you set the bin size to the typical expected length of the value interval. However, if the length of the interval is varying and skewed, a balance must be found to set a bin size that filters the short intervals efficiently, while preventing the long intervals from overlapping too many bins. Assuming a table ranges, with intervals that are between columns start and end, you can determine different percentiles of the skewed interval length value with the following query:
28-1	7313-7320	However	
28-2	7320-7321	,	
28-3	7322-7324	it	
28-4	7325-7332	becomes	
28-5	7333-7344	inefficient	
28-6	7345-7347	if	
28-7	7348-7351	the	
28-8	7352-7355	bin	
28-9	7356-7360	size	
28-10	7361-7363	is	
28-11	7364-7377	significantly	
28-12	7378-7385	smaller	
28-13	7386-7390	than	
28-14	7391-7394	the	
28-15	7395-7406	encountered	
28-16	7407-7412	value	
28-17	7413-7422	intervals	
28-18	7422-7423	,	
28-19	7424-7427	and	
28-20	7428-7431	the	
28-21	7432-7437	value	
28-22	7438-7447	intervals	
28-23	7448-7455	overlap	
28-24	7456-7464	multiple	
28-25	7465-7468	bin	
28-26	7469-7478	intervals	
28-27	7478-7479	.	
28-28	7480-7483	For	
28-29	7484-7491	example	
28-30	7491-7492	,	
28-31	7493-7497	with	
28-32	7498-7499	a	
28-33	7500-7509	condition	
28-34	7510-7511	p	
28-35	7512-7519	BETWEEN	
28-36	7520-7525	start	
28-37	7526-7529	AND	
28-38	7530-7533	end	
28-39	7533-7534	,	
28-40	7535-7540	where	
28-41	7541-7546	start	
28-42	7547-7549	is	
28-43	7550-7559	1,000,000	
28-44	7560-7563	and	
28-45	7564-7567	end	
28-46	7568-7570	is	
28-47	7571-7580	1,999,999	
28-48	7580-7581	,	
28-49	7582-7585	and	
28-50	7586-7587	a	
28-51	7588-7591	bin	
28-52	7592-7596	size	
28-53	7597-7599	of	
28-54	7600-7602	10	
28-55	7602-7603	,	
28-56	7604-7607	the	
28-57	7608-7613	value	
28-58	7614-7622	interval	
28-59	7623-7631	overlaps	
28-60	7632-7636	with	
28-61	7637-7644	100,000	
28-62	7645-7649	bins	
28-63	7649-7650	.	
28-64	7651-7653	If	
28-65	7654-7657	the	
28-66	7658-7664	length	
28-67	7665-7667	of	
28-68	7668-7671	the	
28-69	7672-7680	interval	
28-70	7681-7683	is	
28-71	7684-7690	fairly	
28-72	7691-7698	uniform	
28-73	7699-7702	and	
28-74	7703-7708	known	
28-75	7708-7709	,	
28-76	7710-7712	we	
28-77	7713-7722	recommend	
28-78	7723-7727	that	
28-79	7728-7731	you	
28-80	7732-7735	set	
28-81	7736-7739	the	
28-82	7740-7743	bin	
28-83	7744-7748	size	
28-84	7749-7751	to	
28-85	7752-7755	the	
28-86	7756-7763	typical	
28-87	7764-7772	expected	
28-88	7773-7779	length	
28-89	7780-7782	of	
28-90	7783-7786	the	
28-91	7787-7792	value	
28-92	7793-7801	interval	
28-93	7801-7802	.	
28-94	7803-7810	However	
28-95	7810-7811	,	
28-96	7812-7814	if	
28-97	7815-7818	the	
28-98	7819-7825	length	
28-99	7826-7828	of	
28-100	7829-7832	the	
28-101	7833-7841	interval	
28-102	7842-7844	is	
28-103	7845-7852	varying	
28-104	7853-7856	and	
28-105	7857-7863	skewed	
28-106	7863-7864	,	
28-107	7865-7866	a	
28-108	7867-7874	balance	
28-109	7875-7879	must	
28-110	7880-7882	be	
28-111	7883-7888	found	
28-112	7889-7891	to	
28-113	7892-7895	set	
28-114	7896-7897	a	
28-115	7898-7901	bin	
28-116	7902-7906	size	
28-117	7907-7911	that	
28-118	7912-7919	filters	
28-119	7920-7923	the	
28-120	7924-7929	short	
28-121	7930-7939	intervals	
28-122	7940-7951	efficiently	
28-123	7951-7952	,	
28-124	7953-7958	while	
28-125	7959-7969	preventing	
28-126	7970-7973	the	
28-127	7974-7978	long	
28-128	7979-7988	intervals	
28-129	7989-7993	from	
28-130	7994-8005	overlapping	
28-131	8006-8009	too	
28-132	8010-8014	many	
28-133	8015-8019	bins	
28-134	8019-8020	.	
28-135	8021-8029	Assuming	
28-136	8030-8031	a	
28-137	8032-8037	table	
28-138	8038-8044	ranges	
28-139	8044-8045	,	
28-140	8046-8050	with	
28-141	8051-8060	intervals	
28-142	8061-8065	that	
28-143	8066-8069	are	
28-144	8070-8077	between	
28-145	8078-8085	columns	
28-146	8086-8091	start	
28-147	8092-8095	and	
28-148	8096-8099	end	
28-149	8099-8100	,	
28-150	8101-8104	you	
28-151	8105-8108	can	
28-152	8109-8118	determine	
28-153	8119-8128	different	
28-154	8129-8140	percentiles	
28-155	8141-8143	of	
28-156	8144-8147	the	
28-157	8148-8154	skewed	
28-158	8155-8163	interval	
28-159	8164-8170	length	
28-160	8171-8176	value	
28-161	8177-8181	with	
28-162	8182-8185	the	
28-163	8186-8195	following	
28-164	8196-8201	query	
28-165	8201-8202	:	

#Text=SELECT APPROX_PERCENTILE(CAST(end - start AS DOUBLE), ARRAY(0.5, 0.9, 0.99, 0.999, 0.9999)) FROM ranges A recommended setting of bin size would be the maximum of the value at the 90th percentile, or the value at the 99th percentile divided by 10, or the value at the 99.9th percentile divided by 100 and so on. The rationale is:
29-1	8203-8209	SELECT	
29-2	8210-8227	APPROX_PERCENTILE	
29-3	8227-8228	(	
29-4	8228-8232	CAST	
29-5	8232-8233	(	
29-6	8233-8236	end	
29-7	8237-8238	-	
29-8	8239-8244	start	
29-9	8245-8247	AS	
29-10	8248-8254	DOUBLE	
29-11	8254-8255	)	
29-12	8255-8256	,	
29-13	8257-8262	ARRAY	
29-14	8262-8263	(	
29-15	8263-8266	0.5	
29-16	8266-8267	,	
29-17	8268-8271	0.9	
29-18	8271-8272	,	
29-19	8273-8277	0.99	
29-20	8277-8278	,	
29-21	8279-8284	0.999	
29-22	8284-8285	,	
29-23	8286-8292	0.9999	
29-24	8292-8293	)	
29-25	8293-8294	)	
29-26	8295-8299	FROM	
29-27	8300-8306	ranges	
29-28	8307-8308	A	
29-29	8309-8320	recommended	
29-30	8321-8328	setting	
29-31	8329-8331	of	
29-32	8332-8335	bin	
29-33	8336-8340	size	
29-34	8341-8346	would	
29-35	8347-8349	be	
29-36	8350-8353	the	
29-37	8354-8361	maximum	
29-38	8362-8364	of	
29-39	8365-8368	the	
29-40	8369-8374	value	
29-41	8375-8377	at	
29-42	8378-8381	the	
29-43	8382-8386	90th	
29-44	8387-8397	percentile	
29-45	8397-8398	,	
29-46	8399-8401	or	
29-47	8402-8405	the	
29-48	8406-8411	value	
29-49	8412-8414	at	
29-50	8415-8418	the	
29-51	8419-8423	99th	
29-52	8424-8434	percentile	
29-53	8435-8442	divided	
29-54	8443-8445	by	
29-55	8446-8448	10	
29-56	8448-8449	,	
29-57	8450-8452	or	
29-58	8453-8456	the	
29-59	8457-8462	value	
29-60	8463-8465	at	
29-61	8466-8469	the	
29-62	8470-8476	99.9th	
29-63	8477-8487	percentile	
29-64	8488-8495	divided	
29-65	8496-8498	by	
29-66	8499-8502	100	
29-67	8503-8506	and	
29-68	8507-8509	so	
29-69	8510-8512	on	
29-70	8512-8513	.	
29-71	8514-8517	The	
29-72	8518-8527	rationale	
29-73	8528-8530	is	
29-74	8530-8531	:	

#Text=If the value at the 90th percentile is the bin size, only 10% of the value interval lengths are longer than the bin interval, so span more than 2 adjacent bin intervals. If the value at the 99th percentile is the bin size, only 1% of the value interval lengths span more than 11 adjacent bin intervals. If the value at the 99.9th percentile is the bin size, only 0.1% of the value interval lengths span more than 101 adjacent bin intervals.
30-1	8532-8534	If	
30-2	8535-8538	the	
30-3	8539-8544	value	
30-4	8545-8547	at	
30-5	8548-8551	the	
30-6	8552-8556	90th	
30-7	8557-8567	percentile	
30-8	8568-8570	is	
30-9	8571-8574	the	
30-10	8575-8578	bin	
30-11	8579-8583	size	
30-12	8583-8584	,	
30-13	8585-8589	only	
30-14	8590-8593	10%	
30-15	8594-8596	of	
30-16	8597-8600	the	
30-17	8601-8606	value	
30-18	8607-8615	interval	
30-19	8616-8623	lengths	
30-20	8624-8627	are	
30-21	8628-8634	longer	
30-22	8635-8639	than	
30-23	8640-8643	the	
30-24	8644-8647	bin	
30-25	8648-8656	interval	
30-26	8656-8657	,	
30-27	8658-8660	so	
30-28	8661-8665	span	
30-29	8666-8670	more	
30-30	8671-8675	than	
30-31	8676-8677	2	
30-32	8678-8686	adjacent	
30-33	8687-8690	bin	
30-34	8691-8700	intervals	
30-35	8700-8701	.	
30-36	8702-8704	If	
30-37	8705-8708	the	
30-38	8709-8714	value	
30-39	8715-8717	at	
30-40	8718-8721	the	
30-41	8722-8726	99th	
30-42	8727-8737	percentile	
30-43	8738-8740	is	
30-44	8741-8744	the	
30-45	8745-8748	bin	
30-46	8749-8753	size	
30-47	8753-8754	,	
30-48	8755-8759	only	
30-49	8760-8762	1%	
30-50	8763-8765	of	
30-51	8766-8769	the	
30-52	8770-8775	value	
30-53	8776-8784	interval	
30-54	8785-8792	lengths	
30-55	8793-8797	span	
30-56	8798-8802	more	
30-57	8803-8807	than	
30-58	8808-8810	11	
30-59	8811-8819	adjacent	
30-60	8820-8823	bin	
30-61	8824-8833	intervals	
30-62	8833-8834	.	
30-63	8835-8837	If	
30-64	8838-8841	the	
30-65	8842-8847	value	
30-66	8848-8850	at	
30-67	8851-8854	the	
30-68	8855-8861	99.9th	
30-69	8862-8872	percentile	
30-70	8873-8875	is	
30-71	8876-8879	the	
30-72	8880-8883	bin	
30-73	8884-8888	size	
30-74	8888-8889	,	
30-75	8890-8894	only	
30-76	8895-8899	0.1%	
30-77	8900-8902	of	
30-78	8903-8906	the	
30-79	8907-8912	value	
30-80	8913-8921	interval	
30-81	8922-8929	lengths	
30-82	8930-8934	span	
30-83	8935-8939	more	
30-84	8940-8944	than	
30-85	8945-8948	101	
30-86	8949-8957	adjacent	
30-87	8958-8961	bin	
30-88	8962-8971	intervals	
30-89	8971-8972	.	

#Text=The same can be repeated for the values at the 99.99th, the 99.999th percentile, and so on if needed. The described method limits the amount of skewed long value intervals that overlap multiple bin intervals. The bin size value obtained this way is only a starting point for fine tuning; actual results may depend on the specific workload.
31-1	8973-8976	The	
31-2	8977-8981	same	
31-3	8982-8985	can	
31-4	8986-8988	be	
31-5	8989-8997	repeated	
31-6	8998-9001	for	
31-7	9002-9005	the	
31-8	9006-9012	values	
31-9	9013-9015	at	
31-10	9016-9019	the	
31-11	9020-9027	99.99th	
31-12	9027-9028	,	
31-13	9029-9032	the	
31-14	9033-9041	99.999th	
31-15	9042-9052	percentile	
31-16	9052-9053	,	
31-17	9054-9057	and	
31-18	9058-9060	so	
31-19	9061-9063	on	
31-20	9064-9066	if	
31-21	9067-9073	needed	
31-22	9073-9074	.	
31-23	9075-9078	The	
31-24	9079-9088	described	
31-25	9089-9095	method	
31-26	9096-9102	limits	
31-27	9103-9106	the	
31-28	9107-9113	amount	
31-29	9114-9116	of	
31-30	9117-9123	skewed	
31-31	9124-9128	long	
31-32	9129-9134	value	
31-33	9135-9144	intervals	
31-34	9145-9149	that	
31-35	9150-9157	overlap	
31-36	9158-9166	multiple	
31-37	9167-9170	bin	
31-38	9171-9180	intervals	
31-39	9180-9181	.	
31-40	9182-9185	The	
31-41	9186-9189	bin	
31-42	9190-9194	size	
31-43	9195-9200	value	
31-44	9201-9209	obtained	
31-45	9210-9214	this	
31-46	9215-9218	way	
31-47	9219-9221	is	
31-48	9222-9226	only	
31-49	9227-9228	a	
31-50	9229-9237	starting	
31-51	9238-9243	point	
31-52	9244-9247	for	
31-53	9248-9252	fine	
31-54	9253-9259	tuning	
31-55	9259-9260	;	
31-56	9261-9267	actual	
31-57	9268-9275	results	
31-58	9276-9279	may	
31-59	9280-9286	depend	
31-60	9287-9289	on	
31-61	9290-9293	the	
31-62	9294-9302	specific	
31-63	9303-9311	workload	
31-64	9311-9312	.	
