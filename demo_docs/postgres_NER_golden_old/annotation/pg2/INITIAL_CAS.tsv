#FORMAT=WebAnno TSV 3.3


#Text=Tips for PostgreSQL Query Optimization: Improve Performance with EXPLAIN ANALYZE | EnterpriseDB Skip to main content Barrio main menu Why EDB? EDB Supercharges PostgreSQL
1-1	0-4	Tips	
1-2	5-8	for	
1-3	9-19	PostgreSQL	
1-4	20-25	Query	
1-5	26-38	Optimization	
1-6	38-39	:	
1-7	40-47	Improve	
1-8	48-59	Performance	
1-9	60-64	with	
1-10	65-72	EXPLAIN	
1-11	73-80	ANALYZE	
1-12	81-82	|	
1-13	83-95	EnterpriseDB	
1-14	96-100	Skip	
1-15	101-103	to	
1-16	104-108	main	
1-17	109-116	content	
1-18	117-123	Barrio	
1-19	124-128	main	
1-20	129-133	menu	
1-21	134-137	Why	
1-22	138-141	EDB	
1-23	141-142	?	
1-24	143-146	EDB	
1-25	147-159	Supercharges	
1-26	160-170	PostgreSQL	

#Text=wrapper Use Cases Oracle Migration Hybrid Cloud High Availability Solutions for IT Professionals Database Architects Developers Database Admins Products Products Overview wrapper Databases EDB Postgres Advanced Server
2-1	171-178	wrapper	
2-2	179-182	Use	
2-3	183-188	Cases	
2-4	189-195	Oracle	
2-5	196-205	Migration	
2-6	206-212	Hybrid	
2-7	213-218	Cloud	
2-8	219-223	High	
2-9	224-236	Availability	
2-10	237-246	Solutions	
2-11	247-250	for	
2-12	251-253	IT	
2-13	254-267	Professionals	
2-14	268-276	Database	
2-15	277-287	Architects	
2-16	288-298	Developers	
2-17	299-307	Database	
2-18	308-314	Admins	
2-19	315-323	Products	
2-20	324-332	Products	
2-21	333-341	Overview	
2-22	342-349	wrapper	
2-23	350-359	Databases	
2-24	360-363	EDB	
2-25	364-372	Postgres	
2-26	373-381	Advanced	
2-27	382-388	Server	

#Text=PostgreSQL wrapper Tools Postgres Enterprise Manager Backup and Recovery Failover Manager Open Source Projects Cloud Native PostgreSQL Migration Portal Migration Toolkit Replication Services Services Overview
3-1	389-399	PostgreSQL	
3-2	400-407	wrapper	
3-3	408-413	Tools	
3-4	414-422	Postgres	
3-5	423-433	Enterprise	
3-6	434-441	Manager	
3-7	442-448	Backup	
3-8	449-452	and	
3-9	453-461	Recovery	
3-10	462-470	Failover	
3-11	471-478	Manager	
3-12	479-483	Open	
3-13	484-490	Source	
3-14	491-499	Projects	
3-15	500-505	Cloud	
3-16	506-512	Native	
3-17	513-523	PostgreSQL	
3-18	524-533	Migration	
3-19	534-540	Portal	
3-20	541-550	Migration	
3-21	551-558	Toolkit	
3-22	559-570	Replication	
3-23	571-579	Services	
3-24	580-588	Services	
3-25	589-597	Overview	

#Text=Training Getting Started PostgreSQL Optimization Enterprise Strategy Custom Services Support Customer Support Portal Support Overview PostgreSQL Technical Support Remote DBA Service Cloud DBA Service Technical Account Management
4-1	598-606	Training	
4-2	607-614	Getting	
4-3	615-622	Started	
4-4	623-633	PostgreSQL	
4-5	634-646	Optimization	
4-6	647-657	Enterprise	
4-7	658-666	Strategy	
4-8	667-673	Custom	
4-9	674-682	Services	
4-10	683-690	Support	
4-11	691-699	Customer	
4-12	700-707	Support	
4-13	708-714	Portal	
4-14	715-722	Support	
4-15	723-731	Overview	
4-16	732-742	PostgreSQL	
4-17	743-752	Technical	
4-18	753-760	Support	
4-19	761-767	Remote	
4-20	768-771	DBA	
4-21	772-779	Service	
4-22	780-785	Cloud	
4-23	786-789	DBA	
4-24	790-797	Service	
4-25	798-807	Technical	
4-26	808-815	Account	
4-27	816-826	Management	

#Text=Resources Docs wrapper Blog Webinars PostgreSQL Tutorials Training Partners White Papers Customer Stories Product Compatibility Plans Barrio utility menu Contact Dashboard
5-1	827-836	Resources	
5-2	837-841	Docs	
5-3	842-849	wrapper	
5-4	850-854	Blog	
5-5	855-863	Webinars	
5-6	864-874	PostgreSQL	
5-7	875-884	Tutorials	
5-8	885-893	Training	
5-9	894-902	Partners	
5-10	903-908	White	
5-11	909-915	Papers	
5-12	916-924	Customer	
5-13	925-932	Stories	
5-14	933-940	Product	
5-15	941-954	Compatibility	
5-16	955-960	Plans	
5-17	961-967	Barrio	
5-18	968-975	utility	
5-19	976-980	menu	
5-20	981-988	Contact	
5-21	989-998	Dashboard	

#Text=Sign In Downloads Barrio Mobile Menu Why EDB? EDB Supercharges PostgreSQL Use Cases Oracle Migration Hybrid Cloud High Availability Solutions for IT Professionals Database Architects
6-1	999-1003	Sign	
6-2	1004-1006	In	
6-3	1007-1016	Downloads	
6-4	1017-1023	Barrio	
6-5	1024-1030	Mobile	
6-6	1031-1035	Menu	
6-7	1036-1039	Why	
6-8	1040-1043	EDB	
6-9	1043-1044	?	
6-10	1045-1048	EDB	
6-11	1049-1061	Supercharges	
6-12	1062-1072	PostgreSQL	
6-13	1073-1076	Use	
6-14	1077-1082	Cases	
6-15	1083-1089	Oracle	
6-16	1090-1099	Migration	
6-17	1100-1106	Hybrid	
6-18	1107-1112	Cloud	
6-19	1113-1117	High	
6-20	1118-1130	Availability	
6-21	1131-1140	Solutions	
6-22	1141-1144	for	
6-23	1145-1147	IT	
6-24	1148-1161	Professionals	
6-25	1162-1170	Database	
6-26	1171-1181	Architects	

#Text=Developers Database Admins Products Products Overview Databases EDB Postgres Advanced Server PostgreSQL Tools Postgres Enterprise Manager Backup and Recovery Failover Manager Open Source Projects
7-1	1182-1192	Developers	
7-2	1193-1201	Database	
7-3	1202-1208	Admins	
7-4	1209-1217	Products	
7-5	1218-1226	Products	
7-6	1227-1235	Overview	
7-7	1236-1245	Databases	
7-8	1246-1249	EDB	
7-9	1250-1258	Postgres	
7-10	1259-1267	Advanced	
7-11	1268-1274	Server	
7-12	1275-1285	PostgreSQL	
7-13	1286-1291	Tools	
7-14	1292-1300	Postgres	
7-15	1301-1311	Enterprise	
7-16	1312-1319	Manager	
7-17	1320-1326	Backup	
7-18	1327-1330	and	
7-19	1331-1339	Recovery	
7-20	1340-1348	Failover	
7-21	1349-1356	Manager	
7-22	1357-1361	Open	
7-23	1362-1368	Source	
7-24	1369-1377	Projects	

#Text=Cloud Native PostgreSQL Migration Portal Migration Toolkit Replication Services Services Overview Training Getting Started Postgres Optimization Enterprise Strategy Custom Services Support Support Overview PostgreSQL Technical Support
8-1	1378-1383	Cloud	
8-2	1384-1390	Native	
8-3	1391-1401	PostgreSQL	
8-4	1402-1411	Migration	
8-5	1412-1418	Portal	
8-6	1419-1428	Migration	
8-7	1429-1436	Toolkit	
8-8	1437-1448	Replication	
8-9	1449-1457	Services	
8-10	1458-1466	Services	
8-11	1467-1475	Overview	
8-12	1476-1484	Training	
8-13	1485-1492	Getting	
8-14	1493-1500	Started	
8-15	1501-1509	Postgres	
8-16	1510-1522	Optimization	
8-17	1523-1533	Enterprise	
8-18	1534-1542	Strategy	
8-19	1543-1549	Custom	
8-20	1550-1558	Services	
8-21	1559-1566	Support	
8-22	1567-1574	Support	
8-23	1575-1583	Overview	
8-24	1584-1594	PostgreSQL	
8-25	1595-1604	Technical	
8-26	1605-1612	Support	

#Text=Remote DBA Service Cloud DBA Service Technical Account Management Resources Docs Blog Webinars Postgres Tutorials Training Partners White Papers Customer Stories Product Compatibility Plans
9-1	1613-1619	Remote	
9-2	1620-1623	DBA	
9-3	1624-1631	Service	
9-4	1632-1637	Cloud	
9-5	1638-1641	DBA	
9-6	1642-1649	Service	
9-7	1650-1659	Technical	
9-8	1660-1667	Account	
9-9	1668-1678	Management	
9-10	1679-1688	Resources	
9-11	1689-1693	Docs	
9-12	1694-1698	Blog	
9-13	1699-1707	Webinars	
9-14	1708-1716	Postgres	
9-15	1717-1726	Tutorials	
9-16	1727-1735	Training	
9-17	1736-1744	Partners	
9-18	1745-1750	White	
9-19	1751-1757	Papers	
9-20	1758-1766	Customer	
9-21	1767-1774	Stories	
9-22	1775-1782	Product	
9-23	1783-1796	Compatibility	
9-24	1797-1802	Plans	

#Text=Downloads Contact Sign In Dashboard The EDB Blog Back How to Use EXPLAIN ANALYZE for Planning and Optimizing Query Performance in PostgreSQL PostgreSQL
10-1	1803-1812	Downloads	
10-2	1813-1820	Contact	
10-3	1821-1825	Sign	
10-4	1826-1828	In	
10-5	1829-1838	Dashboard	
10-6	1839-1842	The	
10-7	1843-1846	EDB	
10-8	1847-1851	Blog	
10-9	1852-1856	Back	
10-10	1857-1860	How	
10-11	1861-1863	to	
10-12	1864-1867	Use	
10-13	1868-1875	EXPLAIN	
10-14	1876-1883	ANALYZE	
10-15	1884-1887	for	
10-16	1888-1896	Planning	
10-17	1897-1900	and	
10-18	1901-1911	Optimizing	
10-19	1912-1917	Query	
10-20	1918-1929	Performance	
10-21	1930-1932	in	
10-22	1933-1943	PostgreSQL	
10-23	1944-1954	PostgreSQL	

#Text=With many people working from home these days because of the coronavirus pandemic, it can be a little challenging to get help from a colleague remotely. Sure, there’s Slack and all manner of collaboration tools, but it’s not quite the same as walking up to someone’s cubicle and getting a second pair of eyes to look at a problem, not to mention that our co-workers might be busy trying to juggle deadlines and unruly kids in the home. When it comes to dealing with poor database and query performance, it’s a daunting task to venture into the dark cavern of query planning and optimization, but fear not! EXPLAIN is our friend in those dark and lonely places. We recently received a request from one of our customers, concerned about a slow query on one of their JSON columns. They were seeing a slow performance in their development environments and were understandably worried about the impact that they’d see if they went to production with poor query performance. We got right to work to help them out, and our first stone to turn over was to have them send us their EXPLAIN ANALYZE output for the query, which yielded:
11-1	1955-1959	With	
11-2	1960-1964	many	
11-3	1965-1971	people	
11-4	1972-1979	working	
11-5	1980-1984	from	
11-6	1985-1989	home	
11-7	1990-1995	these	
11-8	1996-2000	days	
11-9	2001-2008	because	
11-10	2009-2011	of	
11-11	2012-2015	the	
11-12	2016-2027	coronavirus	
11-13	2028-2036	pandemic	
11-14	2036-2037	,	
11-15	2038-2040	it	
11-16	2041-2044	can	
11-17	2045-2047	be	
11-18	2048-2049	a	
11-19	2050-2056	little	
11-20	2057-2068	challenging	
11-21	2069-2071	to	
11-22	2072-2075	get	
11-23	2076-2080	help	
11-24	2081-2085	from	
11-25	2086-2087	a	
11-26	2088-2097	colleague	
11-27	2098-2106	remotely	
11-28	2106-2107	.	
11-29	2108-2112	Sure	
11-30	2112-2113	,	
11-31	2114-2119	there	
11-32	2119-2120	’	
11-33	2120-2121	s	
11-34	2122-2127	Slack	
11-35	2128-2131	and	
11-36	2132-2135	all	
11-37	2136-2142	manner	
11-38	2143-2145	of	
11-39	2146-2159	collaboration	
11-40	2160-2165	tools	
11-41	2165-2166	,	
11-42	2167-2170	but	
11-43	2171-2173	it	
11-44	2173-2174	’	
11-45	2174-2175	s	
11-46	2176-2179	not	
11-47	2180-2185	quite	
11-48	2186-2189	the	
11-49	2190-2194	same	
11-50	2195-2197	as	
11-51	2198-2205	walking	
11-52	2206-2208	up	
11-53	2209-2211	to	
11-54	2212-2219	someone	
11-55	2219-2220	’	
11-56	2220-2221	s	
11-57	2222-2229	cubicle	
11-58	2230-2233	and	
11-59	2234-2241	getting	
11-60	2242-2243	a	
11-61	2244-2250	second	
11-62	2251-2255	pair	
11-63	2256-2258	of	
11-64	2259-2263	eyes	
11-65	2264-2266	to	
11-66	2267-2271	look	
11-67	2272-2274	at	
11-68	2275-2276	a	
11-69	2277-2284	problem	
11-70	2284-2285	,	
11-71	2286-2289	not	
11-72	2290-2292	to	
11-73	2293-2300	mention	
11-74	2301-2305	that	
11-75	2306-2309	our	
11-76	2310-2320	co-workers	
11-77	2321-2326	might	
11-78	2327-2329	be	
11-79	2330-2334	busy	
11-80	2335-2341	trying	
11-81	2342-2344	to	
11-82	2345-2351	juggle	
11-83	2352-2361	deadlines	
11-84	2362-2365	and	
11-85	2366-2372	unruly	
11-86	2373-2377	kids	
11-87	2378-2380	in	
11-88	2381-2384	the	
11-89	2385-2389	home	
11-90	2389-2390	.	
11-91	2391-2395	When	
11-92	2396-2398	it	
11-93	2399-2404	comes	
11-94	2405-2407	to	
11-95	2408-2415	dealing	
11-96	2416-2420	with	
11-97	2421-2425	poor	
11-98	2426-2434	database	
11-99	2435-2438	and	
11-100	2439-2444	query	
11-101	2445-2456	performance	
11-102	2456-2457	,	
11-103	2458-2460	it	
11-104	2460-2461	’	
11-105	2461-2462	s	
11-106	2463-2464	a	
11-107	2465-2473	daunting	
11-108	2474-2478	task	
11-109	2479-2481	to	
11-110	2482-2489	venture	
11-111	2490-2494	into	
11-112	2495-2498	the	
11-113	2499-2503	dark	
11-114	2504-2510	cavern	
11-115	2511-2513	of	
11-116	2514-2519	query	
11-117	2520-2528	planning	
11-118	2529-2532	and	
11-119	2533-2545	optimization	
11-120	2545-2546	,	
11-121	2547-2550	but	
11-122	2551-2555	fear	
11-123	2556-2559	not	
11-124	2559-2560	!	
11-125	2561-2568	EXPLAIN	
11-126	2569-2571	is	
11-127	2572-2575	our	
11-128	2576-2582	friend	
11-129	2583-2585	in	
11-130	2586-2591	those	
11-131	2592-2596	dark	
11-132	2597-2600	and	
11-133	2601-2607	lonely	
11-134	2608-2614	places	
11-135	2614-2615	.	
11-136	2616-2618	We	
11-137	2619-2627	recently	
11-138	2628-2636	received	
11-139	2637-2638	a	
11-140	2639-2646	request	
11-141	2647-2651	from	
11-142	2652-2655	one	
11-143	2656-2658	of	
11-144	2659-2662	our	
11-145	2663-2672	customers	
11-146	2672-2673	,	
11-147	2674-2683	concerned	
11-148	2684-2689	about	
11-149	2690-2691	a	
11-150	2692-2696	slow	
11-151	2697-2702	query	
11-152	2703-2705	on	
11-153	2706-2709	one	
11-154	2710-2712	of	
11-155	2713-2718	their	
11-156	2719-2723	JSON	
11-157	2724-2731	columns	
11-158	2731-2732	.	
11-159	2733-2737	They	
11-160	2738-2742	were	
11-161	2743-2749	seeing	
11-162	2750-2751	a	
11-163	2752-2756	slow	
11-164	2757-2768	performance	
11-165	2769-2771	in	
11-166	2772-2777	their	
11-167	2778-2789	development	
11-168	2790-2802	environments	
11-169	2803-2806	and	
11-170	2807-2811	were	
11-171	2812-2826	understandably	
11-172	2827-2834	worried	
11-173	2835-2840	about	
11-174	2841-2844	the	
11-175	2845-2851	impact	
11-176	2852-2856	that	
11-177	2857-2861	they	
11-178	2861-2862	’	
11-179	2862-2863	d	
11-180	2864-2867	see	
11-181	2868-2870	if	
11-182	2871-2875	they	
11-183	2876-2880	went	
11-184	2881-2883	to	
11-185	2884-2894	production	
11-186	2895-2899	with	
11-187	2900-2904	poor	
11-188	2905-2910	query	
11-189	2911-2922	performance	
11-190	2922-2923	.	
11-191	2924-2926	We	
11-192	2927-2930	got	
11-193	2931-2936	right	
11-194	2937-2939	to	
11-195	2940-2944	work	
11-196	2945-2947	to	
11-197	2948-2952	help	
11-198	2953-2957	them	
11-199	2958-2961	out	
11-200	2961-2962	,	
11-201	2963-2966	and	
11-202	2967-2970	our	
11-203	2971-2976	first	
11-204	2977-2982	stone	
11-205	2983-2985	to	
11-206	2986-2990	turn	
11-207	2991-2995	over	
11-208	2996-2999	was	
11-209	3000-3002	to	
11-210	3003-3007	have	
11-211	3008-3012	them	
11-212	3013-3017	send	
11-213	3018-3020	us	
11-214	3021-3026	their	
11-215	3027-3034	EXPLAIN	
11-216	3035-3042	ANALYZE	
11-217	3043-3049	output	
11-218	3050-3053	for	
11-219	3054-3057	the	
11-220	3058-3063	query	
11-221	3063-3064	,	
11-222	3065-3070	which	
11-223	3071-3078	yielded	
11-224	3078-3079	:	

#Text=postgres=# explain SELECT * FROM org where 'aa'::text IN (SELECT jsonb_array_elements(info -> 'dept') ->> 'name'); QUERY PLAN -------------------------------------------------------------------------
12-1	3080-3088	postgres	
12-2	3088-3089	=	
12-3	3089-3090	#	
12-4	3091-3098	explain	
12-5	3099-3105	SELECT	
12-6	3106-3107	*	
12-7	3108-3112	FROM	
12-8	3113-3116	org	
12-9	3117-3122	where	
12-10	3123-3124	'	
12-11	3124-3126	aa	
12-12	3126-3127	'	
12-13	3127-3128	:	
12-14	3128-3129	:	
12-15	3129-3133	text	
12-16	3134-3136	IN	
12-17	3137-3138	(	
12-18	3138-3144	SELECT	
12-19	3145-3165	jsonb_array_elements	
12-20	3165-3166	(	
12-21	3166-3170	info	
12-22	3171-3172	-	
12-23	3172-3173	>	
12-24	3174-3175	'	
12-25	3175-3179	dept	
12-26	3179-3180	'	
12-27	3180-3181	)	
12-28	3182-3183	-	
12-29	3183-3184	>	
12-30	3184-3185	>	
12-31	3186-3187	'	
12-32	3187-3191	name	
12-33	3191-3192	'	
12-34	3192-3193	)	
12-35	3193-3194	;	
12-36	3195-3200	QUERY	
12-37	3201-3205	PLAN	
12-38	3206-3207	-	
12-39	3207-3208	-	
12-40	3208-3209	-	
12-41	3209-3210	-	
12-42	3210-3211	-	
12-43	3211-3212	-	
12-44	3212-3213	-	
12-45	3213-3214	-	
12-46	3214-3215	-	
12-47	3215-3216	-	
12-48	3216-3217	-	
12-49	3217-3218	-	
12-50	3218-3219	-	
12-51	3219-3220	-	
12-52	3220-3221	-	
12-53	3221-3222	-	
12-54	3222-3223	-	
12-55	3223-3224	-	
12-56	3224-3225	-	
12-57	3225-3226	-	
12-58	3226-3227	-	
12-59	3227-3228	-	
12-60	3228-3229	-	
12-61	3229-3230	-	
12-62	3230-3231	-	
12-63	3231-3232	-	
12-64	3232-3233	-	
12-65	3233-3234	-	
12-66	3234-3235	-	
12-67	3235-3236	-	
12-68	3236-3237	-	
12-69	3237-3238	-	
12-70	3238-3239	-	
12-71	3239-3240	-	
12-72	3240-3241	-	
12-73	3241-3242	-	
12-74	3242-3243	-	
12-75	3243-3244	-	
12-76	3244-3245	-	
12-77	3245-3246	-	
12-78	3246-3247	-	
12-79	3247-3248	-	
12-80	3248-3249	-	
12-81	3249-3250	-	
12-82	3250-3251	-	
12-83	3251-3252	-	
12-84	3252-3253	-	
12-85	3253-3254	-	
12-86	3254-3255	-	
12-87	3255-3256	-	
12-88	3256-3257	-	
12-89	3257-3258	-	
12-90	3258-3259	-	
12-91	3259-3260	-	
12-92	3260-3261	-	
12-93	3261-3262	-	
12-94	3262-3263	-	
12-95	3263-3264	-	
12-96	3264-3265	-	
12-97	3265-3266	-	
12-98	3266-3267	-	
12-99	3267-3268	-	
12-100	3268-3269	-	
12-101	3269-3270	-	
12-102	3270-3271	-	
12-103	3271-3272	-	
12-104	3272-3273	-	
12-105	3273-3274	-	
12-106	3274-3275	-	
12-107	3275-3276	-	
12-108	3276-3277	-	
12-109	3277-3278	-	
12-110	3278-3279	-	

#Text=Seq Scan on org (cost=0.00..719572.55 rows=249996 width=1169) Filter: (SubPlan 1) SubPlan 1 Result (cost=0.00..2.27 rows=100 width=32)
13-1	3280-3283	Seq	
13-2	3284-3288	Scan	
13-3	3289-3291	on	
13-4	3292-3295	org	
13-5	3296-3297	(	
13-6	3297-3301	cost	
13-7	3301-3302	=	
13-8	3302-3306	0.00	
13-9	3306-3307	.	
13-10	3307-3317	.719572.55	
13-11	3318-3322	rows	
13-12	3322-3323	=	
13-13	3323-3329	249996	
13-14	3330-3335	width	
13-15	3335-3336	=	
13-16	3336-3340	1169	
13-17	3340-3341	)	
13-18	3342-3348	Filter	
13-19	3348-3349	:	
13-20	3350-3351	(	
13-21	3351-3358	SubPlan	
13-22	3359-3360	1	
13-23	3360-3361	)	
13-24	3362-3369	SubPlan	
13-25	3370-3371	1	
13-26	3372-3378	Result	
13-27	3379-3380	(	
13-28	3380-3384	cost	
13-29	3384-3385	=	
13-30	3385-3389	0.00	
13-31	3389-3390	.	
13-32	3390-3395	.2.27	
13-33	3396-3400	rows	
13-34	3400-3401	=	
13-35	3401-3404	100	
13-36	3405-3410	width	
13-37	3410-3411	=	
13-38	3411-3413	32	
13-39	3413-3414	)	

#Text=ProjectSet (cost=0.00..0.52 rows=100 width=32) Result (cost=0.00..0.01 rows=1 width=0)
14-1	3415-3425	ProjectSet	
14-2	3426-3427	(	
14-3	3427-3431	cost	
14-4	3431-3432	=	
14-5	3432-3436	0.00	
14-6	3436-3437	.	
14-7	3437-3442	.0.52	
14-8	3443-3447	rows	
14-9	3447-3448	=	
14-10	3448-3451	100	
14-11	3452-3457	width	
14-12	3457-3458	=	
14-13	3458-3460	32	
14-14	3460-3461	)	
14-15	3462-3468	Result	
14-16	3469-3470	(	
14-17	3470-3474	cost	
14-18	3474-3475	=	
14-19	3475-3479	0.00	
14-20	3479-3480	.	
14-21	3480-3485	.0.01	
14-22	3486-3490	rows	
14-23	3490-3491	=	
14-24	3491-3492	1	
14-25	3493-3498	width	
14-26	3498-3499	=	
14-27	3499-3500	0	
14-28	3500-3501	)	

#Text=They knew they had created an index, and were curious as to why the index was not being used. Our next data point to gather was information about the index itself, and it turned out that they had created their index like so:
15-1	3502-3506	They	
15-2	3507-3511	knew	
15-3	3512-3516	they	
15-4	3517-3520	had	
15-5	3521-3528	created	
15-6	3529-3531	an	
15-7	3532-3537	index	
15-8	3537-3538	,	
15-9	3539-3542	and	
15-10	3543-3547	were	
15-11	3548-3555	curious	
15-12	3556-3558	as	
15-13	3559-3561	to	
15-14	3562-3565	why	
15-15	3566-3569	the	
15-16	3570-3575	index	
15-17	3576-3579	was	
15-18	3580-3583	not	
15-19	3584-3589	being	
15-20	3590-3594	used	
15-21	3594-3595	.	
15-22	3595-3596	 	
15-23	3596-3599	Our	
15-24	3600-3604	next	
15-25	3605-3609	data	
15-26	3610-3615	point	
15-27	3616-3618	to	
15-28	3619-3625	gather	
15-29	3626-3629	was	
15-30	3630-3641	information	
15-31	3642-3647	about	
15-32	3648-3651	the	
15-33	3652-3657	index	
15-34	3658-3664	itself	
15-35	3664-3665	,	
15-36	3666-3669	and	
15-37	3670-3672	it	
15-38	3673-3679	turned	
15-39	3680-3683	out	
15-40	3684-3688	that	
15-41	3689-3693	they	
15-42	3694-3697	had	
15-43	3698-3705	created	
15-44	3706-3711	their	
15-45	3712-3717	index	
15-46	3718-3722	like	
15-47	3723-3725	so	
15-48	3725-3726	:	

#Text=CREATE INDEX idx_org_dept ON org ((info -> 'dept'::text) ->> 'name'::text));Notice anything? Their query was wrapping info -> 'dept' in a function called jsonb_array_elements(), which led the query planner to think that it shouldn’t use the index. The fix was simple, and we were able to get the customer back on their way after a rather quick adjustment to their query. Once the customer changed their query to the following, the Index started getting scanned: postgres=# SELECT * FROM org where 'aa'::text IN (info -> 'dept' ->> 'name'); postgres=# explain SELECT * FROM organization where 'aa'::text IN (info -> 'dept' ->> 'name');
16-1	3727-3733	CREATE	
16-2	3734-3739	INDEX	
16-3	3740-3752	idx_org_dept	
16-4	3753-3755	ON	
16-5	3756-3759	org	
16-6	3760-3761	(	
16-7	3761-3762	(	
16-8	3762-3766	info	
16-9	3767-3768	-	
16-10	3768-3769	>	
16-11	3770-3771	'	
16-12	3771-3775	dept	
16-13	3775-3776	'	
16-14	3776-3777	:	
16-15	3777-3778	:	
16-16	3778-3782	text	
16-17	3782-3783	)	
16-18	3784-3785	-	
16-19	3785-3786	>	
16-20	3786-3787	>	
16-21	3788-3789	'	
16-22	3789-3793	name	
16-23	3793-3794	'	
16-24	3794-3795	:	
16-25	3795-3796	:	
16-26	3796-3800	text	
16-27	3800-3801	)	
16-28	3801-3802	)	
16-29	3802-3803	;	
16-30	3803-3809	Notice	
16-31	3810-3818	anything	
16-32	3818-3819	?	
16-33	3820-3825	Their	
16-34	3826-3831	query	
16-35	3832-3835	was	
16-36	3836-3844	wrapping	
16-37	3845-3849	info	
16-38	3850-3851	-	
16-39	3851-3852	>	
16-40	3853-3854	'	
16-41	3854-3858	dept	
16-42	3858-3859	'	
16-43	3860-3862	in	
16-44	3863-3864	a	
16-45	3865-3873	function	
16-46	3874-3880	called	
16-47	3881-3901	jsonb_array_elements	
16-48	3901-3902	(	
16-49	3902-3903	)	
16-50	3903-3904	,	
16-51	3905-3910	which	
16-52	3911-3914	led	
16-53	3915-3918	the	
16-54	3919-3924	query	
16-55	3925-3932	planner	
16-56	3933-3935	to	
16-57	3936-3941	think	
16-58	3942-3946	that	
16-59	3947-3949	it	
16-60	3950-3957	shouldn	
16-61	3957-3958	’	
16-62	3958-3959	t	
16-63	3960-3963	use	
16-64	3964-3967	the	
16-65	3968-3973	index	
16-66	3973-3974	.	
16-67	3975-3978	The	
16-68	3979-3982	fix	
16-69	3983-3986	was	
16-70	3987-3993	simple	
16-71	3993-3994	,	
16-72	3995-3998	and	
16-73	3999-4001	we	
16-74	4002-4006	were	
16-75	4007-4011	able	
16-76	4012-4014	to	
16-77	4015-4018	get	
16-78	4019-4022	the	
16-79	4023-4031	customer	
16-80	4032-4036	back	
16-81	4037-4039	on	
16-82	4040-4045	their	
16-83	4046-4049	way	
16-84	4050-4055	after	
16-85	4056-4057	a	
16-86	4058-4064	rather	
16-87	4065-4070	quick	
16-88	4071-4081	adjustment	
16-89	4082-4084	to	
16-90	4085-4090	their	
16-91	4091-4096	query	
16-92	4096-4097	.	
16-93	4098-4102	Once	
16-94	4103-4106	the	
16-95	4107-4115	customer	
16-96	4116-4123	changed	
16-97	4124-4129	their	
16-98	4130-4135	query	
16-99	4136-4138	to	
16-100	4139-4142	the	
16-101	4143-4152	following	
16-102	4152-4153	,	
16-103	4154-4157	the	
16-104	4158-4163	Index	
16-105	4164-4171	started	
16-106	4172-4179	getting	
16-107	4180-4187	scanned	
16-108	4187-4188	:	
16-109	4189-4197	postgres	
16-110	4197-4198	=	
16-111	4198-4199	#	
16-112	4200-4206	SELECT	
16-113	4207-4208	*	
16-114	4209-4213	FROM	
16-115	4214-4217	org	
16-116	4218-4223	where	
16-117	4224-4225	'	
16-118	4225-4227	aa	
16-119	4227-4228	'	
16-120	4228-4229	:	
16-121	4229-4230	:	
16-122	4230-4234	text	
16-123	4235-4237	IN	
16-124	4238-4239	(	
16-125	4239-4243	info	
16-126	4244-4245	-	
16-127	4245-4246	>	
16-128	4247-4248	'	
16-129	4248-4252	dept	
16-130	4252-4253	'	
16-131	4254-4255	-	
16-132	4255-4256	>	
16-133	4256-4257	>	
16-134	4258-4259	'	
16-135	4259-4263	name	
16-136	4263-4264	'	
16-137	4264-4265	)	
16-138	4265-4266	;	
16-139	4267-4275	postgres	
16-140	4275-4276	=	
16-141	4276-4277	#	
16-142	4278-4285	explain	
16-143	4286-4292	SELECT	
16-144	4293-4294	*	
16-145	4295-4299	FROM	
16-146	4300-4312	organization	
16-147	4313-4318	where	
16-148	4319-4320	'	
16-149	4320-4322	aa	
16-150	4322-4323	'	
16-151	4323-4324	:	
16-152	4324-4325	:	
16-153	4325-4329	text	
16-154	4330-4332	IN	
16-155	4333-4334	(	
16-156	4334-4338	info	
16-157	4339-4340	-	
16-158	4340-4341	>	
16-159	4342-4343	'	
16-160	4343-4347	dept	
16-161	4347-4348	'	
16-162	4349-4350	-	
16-163	4350-4351	>	
16-164	4351-4352	>	
16-165	4353-4354	'	
16-166	4354-4358	name	
16-167	4358-4359	'	
16-168	4359-4360	)	
16-169	4360-4361	;	

#Text=QUERY PLAN ----------------------------------------------------------------------------------------------
17-1	4362-4367	QUERY	
17-2	4368-4372	PLAN	
17-3	4373-4374	-	
17-4	4374-4375	-	
17-5	4375-4376	-	
17-6	4376-4377	-	
17-7	4377-4378	-	
17-8	4378-4379	-	
17-9	4379-4380	-	
17-10	4380-4381	-	
17-11	4381-4382	-	
17-12	4382-4383	-	
17-13	4383-4384	-	
17-14	4384-4385	-	
17-15	4385-4386	-	
17-16	4386-4387	-	
17-17	4387-4388	-	
17-18	4388-4389	-	
17-19	4389-4390	-	
17-20	4390-4391	-	
17-21	4391-4392	-	
17-22	4392-4393	-	
17-23	4393-4394	-	
17-24	4394-4395	-	
17-25	4395-4396	-	
17-26	4396-4397	-	
17-27	4397-4398	-	
17-28	4398-4399	-	
17-29	4399-4400	-	
17-30	4400-4401	-	
17-31	4401-4402	-	
17-32	4402-4403	-	
17-33	4403-4404	-	
17-34	4404-4405	-	
17-35	4405-4406	-	
17-36	4406-4407	-	
17-37	4407-4408	-	
17-38	4408-4409	-	
17-39	4409-4410	-	
17-40	4410-4411	-	
17-41	4411-4412	-	
17-42	4412-4413	-	
17-43	4413-4414	-	
17-44	4414-4415	-	
17-45	4415-4416	-	
17-46	4416-4417	-	
17-47	4417-4418	-	
17-48	4418-4419	-	
17-49	4419-4420	-	
17-50	4420-4421	-	
17-51	4421-4422	-	
17-52	4422-4423	-	
17-53	4423-4424	-	
17-54	4424-4425	-	
17-55	4425-4426	-	
17-56	4426-4427	-	
17-57	4427-4428	-	
17-58	4428-4429	-	
17-59	4429-4430	-	
17-60	4430-4431	-	
17-61	4431-4432	-	
17-62	4432-4433	-	
17-63	4433-4434	-	
17-64	4434-4435	-	
17-65	4435-4436	-	
17-66	4436-4437	-	
17-67	4437-4438	-	
17-68	4438-4439	-	
17-69	4439-4440	-	
17-70	4440-4441	-	
17-71	4441-4442	-	
17-72	4442-4443	-	
17-73	4443-4444	-	
17-74	4444-4445	-	
17-75	4445-4446	-	
17-76	4446-4447	-	
17-77	4447-4448	-	
17-78	4448-4449	-	
17-79	4449-4450	-	
17-80	4450-4451	-	
17-81	4451-4452	-	
17-82	4452-4453	-	
17-83	4453-4454	-	
17-84	4454-4455	-	
17-85	4455-4456	-	
17-86	4456-4457	-	
17-87	4457-4458	-	
17-88	4458-4459	-	
17-89	4459-4460	-	
17-90	4460-4461	-	
17-91	4461-4462	-	
17-92	4462-4463	-	
17-93	4463-4464	-	
17-94	4464-4465	-	
17-95	4465-4466	-	
17-96	4466-4467	-	

#Text=Index Scan using idx_org_dept on org (cost=0.42..8.44 rows=1 width=1169) Index Cond: ('aa'::text = ((info -> 'dept'::text) ->> 'name'::text))
18-1	4468-4473	Index	
18-2	4474-4478	Scan	
18-3	4479-4484	using	
18-4	4485-4497	idx_org_dept	
18-5	4498-4500	on	
18-6	4501-4504	org	
18-7	4505-4506	(	
18-8	4506-4510	cost	
18-9	4510-4511	=	
18-10	4511-4515	0.42	
18-11	4515-4516	.	
18-12	4516-4521	.8.44	
18-13	4522-4526	rows	
18-14	4526-4527	=	
18-15	4527-4528	1	
18-16	4529-4534	width	
18-17	4534-4535	=	
18-18	4535-4539	1169	
18-19	4539-4540	)	
18-20	4541-4546	Index	
18-21	4547-4551	Cond	
18-22	4551-4552	:	
18-23	4553-4554	(	
18-24	4554-4555	'	
18-25	4555-4557	aa	
18-26	4557-4558	'	
18-27	4558-4559	:	
18-28	4559-4560	:	
18-29	4560-4564	text	
18-30	4565-4566	=	
18-31	4567-4568	(	
18-32	4568-4569	(	
18-33	4569-4573	info	
18-34	4574-4575	-	
18-35	4575-4576	>	
18-36	4577-4578	'	
18-37	4578-4582	dept	
18-38	4582-4583	'	
18-39	4583-4584	:	
18-40	4584-4585	:	
18-41	4585-4589	text	
18-42	4589-4590	)	
18-43	4591-4592	-	
18-44	4592-4593	>	
18-45	4593-4594	>	
18-46	4595-4596	'	
18-47	4596-4600	name	
18-48	4600-4601	'	
18-49	4601-4602	:	
18-50	4602-4603	:	
18-51	4603-4607	text	
18-52	4607-4608	)	
18-53	4608-4609	)	

#Text=(2 rows)As we can see, having and using EXPLAIN in your troubleshooting arsenal can be invaluable. What is Explain?
19-1	4610-4611	(	
19-2	4611-4612	2	
19-3	4613-4617	rows	
19-4	4617-4618	)	
19-5	4618-4620	As	
19-6	4621-4623	we	
19-7	4624-4627	can	
19-8	4628-4631	see	
19-9	4631-4632	,	
19-10	4633-4639	having	
19-11	4640-4643	and	
19-12	4644-4649	using	
19-13	4650-4657	EXPLAIN	
19-14	4658-4660	in	
19-15	4661-4665	your	
19-16	4666-4681	troubleshooting	
19-17	4682-4689	arsenal	
19-18	4690-4693	can	
19-19	4694-4696	be	
19-20	4697-4707	invaluable	
19-21	4707-4708	.	
19-22	4709-4713	What	
19-23	4714-4716	is	
19-24	4717-4724	Explain	
19-25	4724-4725	?	

#Text=EXPLAIN is a keyword that gets prepended to a query to show a user how the query planner plans to execute the given query.  Depending on the complexity of the query, it will show the join strategy, method of extracting data from tables, estimated rows involved in executing the query, and a number of other bits of useful information.  Used with ANALYZE, EXPLAIN will also show the time spent on executing the query, sorts, and merges that couldn’t be done in-memory, and more.  This information is invaluable when it comes to identifying query performance bottlenecks and opportunities, and helps us understand what information the query planner is working with as it makes its decisions for us. A Cost-Based Approach
20-1	4726-4733	EXPLAIN	
20-2	4734-4736	is	
20-3	4737-4738	a	
20-4	4739-4746	keyword	
20-5	4747-4751	that	
20-6	4752-4756	gets	
20-7	4757-4766	prepended	
20-8	4767-4769	to	
20-9	4770-4771	a	
20-10	4772-4777	query	
20-11	4778-4780	to	
20-12	4781-4785	show	
20-13	4786-4787	a	
20-14	4788-4792	user	
20-15	4793-4796	how	
20-16	4797-4800	the	
20-17	4801-4806	query	
20-18	4807-4814	planner	
20-19	4815-4820	plans	
20-20	4821-4823	to	
20-21	4824-4831	execute	
20-22	4832-4835	the	
20-23	4836-4841	given	
20-24	4842-4847	query	
20-25	4847-4848	.	
20-26	4849-4850	 	
20-27	4850-4859	Depending	
20-28	4860-4862	on	
20-29	4863-4866	the	
20-30	4867-4877	complexity	
20-31	4878-4880	of	
20-32	4881-4884	the	
20-33	4885-4890	query	
20-34	4890-4891	,	
20-35	4892-4894	it	
20-36	4895-4899	will	
20-37	4900-4904	show	
20-38	4905-4908	the	
20-39	4909-4913	join	
20-40	4914-4922	strategy	
20-41	4922-4923	,	
20-42	4924-4930	method	
20-43	4931-4933	of	
20-44	4934-4944	extracting	
20-45	4945-4949	data	
20-46	4950-4954	from	
20-47	4955-4961	tables	
20-48	4961-4962	,	
20-49	4963-4972	estimated	
20-50	4973-4977	rows	
20-51	4978-4986	involved	
20-52	4987-4989	in	
20-53	4990-4999	executing	
20-54	5000-5003	the	
20-55	5004-5009	query	
20-56	5009-5010	,	
20-57	5011-5014	and	
20-58	5015-5016	a	
20-59	5017-5023	number	
20-60	5024-5026	of	
20-61	5027-5032	other	
20-62	5033-5037	bits	
20-63	5038-5040	of	
20-64	5041-5047	useful	
20-65	5048-5059	information	
20-66	5059-5060	.	
20-67	5061-5062	 	
20-68	5062-5066	Used	
20-69	5067-5071	with	
20-70	5072-5079	ANALYZE	
20-71	5079-5080	,	
20-72	5081-5088	EXPLAIN	
20-73	5089-5093	will	
20-74	5094-5098	also	
20-75	5099-5103	show	
20-76	5104-5107	the	
20-77	5108-5112	time	
20-78	5113-5118	spent	
20-79	5119-5121	on	
20-80	5122-5131	executing	
20-81	5132-5135	the	
20-82	5136-5141	query	
20-83	5141-5142	,	
20-84	5143-5148	sorts	
20-85	5148-5149	,	
20-86	5150-5153	and	
20-87	5154-5160	merges	
20-88	5161-5165	that	
20-89	5166-5172	couldn	
20-90	5172-5173	’	
20-91	5173-5174	t	
20-92	5175-5177	be	
20-93	5178-5182	done	
20-94	5183-5192	in-memory	
20-95	5192-5193	,	
20-96	5194-5197	and	
20-97	5198-5202	more	
20-98	5202-5203	.	
20-99	5204-5205	 	
20-100	5205-5209	This	
20-101	5210-5221	information	
20-102	5222-5224	is	
20-103	5225-5235	invaluable	
20-104	5236-5240	when	
20-105	5241-5243	it	
20-106	5244-5249	comes	
20-107	5250-5252	to	
20-108	5253-5264	identifying	
20-109	5265-5270	query	
20-110	5271-5282	performance	
20-111	5283-5294	bottlenecks	
20-112	5295-5298	and	
20-113	5299-5312	opportunities	
20-114	5312-5313	,	
20-115	5314-5317	and	
20-116	5318-5323	helps	
20-117	5324-5326	us	
20-118	5327-5337	understand	
20-119	5338-5342	what	
20-120	5343-5354	information	
20-121	5355-5358	the	
20-122	5359-5364	query	
20-123	5365-5372	planner	
20-124	5373-5375	is	
20-125	5376-5383	working	
20-126	5384-5388	with	
20-127	5389-5391	as	
20-128	5392-5394	it	
20-129	5395-5400	makes	
20-130	5401-5404	its	
20-131	5405-5414	decisions	
20-132	5415-5418	for	
20-133	5419-5421	us	
20-134	5421-5422	.	
20-135	5423-5424	A	
20-136	5425-5435	Cost-Based	
20-137	5436-5444	Approach	

#Text=To the query planner, all the data on disk is basically the same.  To determine the fastest way to reach a particular piece of data requires some estimation of the amount of time it takes to do a full table scan, a merge of two tables, and other operations to get data back to the user.  PostgreSQL accomplishes this by assigning costs to each execution task, and these values are derived from the postgresql.conf file (see parameters ending in *_cost or beginning with enable_*).  When a query is sent to the database, the query planner calculates the cumulative costs for different execution strategies and selects the most optimal plan (which may not necessarily be the one with the lowest cost). bash $ pgbench -i && psql <...> postgres=# EXPLAIN SELECT * FROM pgbench_accounts a JOIN pgbench_branches b ON (a.bid=b.bid) WHERE a.aid < 100000;
21-1	5445-5447	To	
21-2	5448-5451	the	
21-3	5452-5457	query	
21-4	5458-5465	planner	
21-5	5465-5466	,	
21-6	5467-5470	all	
21-7	5471-5474	the	
21-8	5475-5479	data	
21-9	5480-5482	on	
21-10	5483-5487	disk	
21-11	5488-5490	is	
21-12	5491-5500	basically	
21-13	5501-5504	the	
21-14	5505-5509	same	
21-15	5509-5510	.	
21-16	5511-5512	 	
21-17	5512-5514	To	
21-18	5515-5524	determine	
21-19	5525-5528	the	
21-20	5529-5536	fastest	
21-21	5537-5540	way	
21-22	5541-5543	to	
21-23	5544-5549	reach	
21-24	5550-5551	a	
21-25	5552-5562	particular	
21-26	5563-5568	piece	
21-27	5569-5571	of	
21-28	5572-5576	data	
21-29	5577-5585	requires	
21-30	5586-5590	some	
21-31	5591-5601	estimation	
21-32	5602-5604	of	
21-33	5605-5608	the	
21-34	5609-5615	amount	
21-35	5616-5618	of	
21-36	5619-5623	time	
21-37	5624-5626	it	
21-38	5627-5632	takes	
21-39	5633-5635	to	
21-40	5636-5638	do	
21-41	5639-5640	a	
21-42	5641-5645	full	
21-43	5646-5651	table	
21-44	5652-5656	scan	
21-45	5656-5657	,	
21-46	5658-5659	a	
21-47	5660-5665	merge	
21-48	5666-5668	of	
21-49	5669-5672	two	
21-50	5673-5679	tables	
21-51	5679-5680	,	
21-52	5681-5684	and	
21-53	5685-5690	other	
21-54	5691-5701	operations	
21-55	5702-5704	to	
21-56	5705-5708	get	
21-57	5709-5713	data	
21-58	5714-5718	back	
21-59	5719-5721	to	
21-60	5722-5725	the	
21-61	5726-5730	user	
21-62	5730-5731	.	
21-63	5732-5733	 	
21-64	5733-5743	PostgreSQL	
21-65	5744-5756	accomplishes	
21-66	5757-5761	this	
21-67	5762-5764	by	
21-68	5765-5774	assigning	
21-69	5775-5780	costs	
21-70	5781-5783	to	
21-71	5784-5788	each	
21-72	5789-5798	execution	
21-73	5799-5803	task	
21-74	5803-5804	,	
21-75	5805-5808	and	
21-76	5809-5814	these	
21-77	5815-5821	values	
21-78	5822-5825	are	
21-79	5826-5833	derived	
21-80	5834-5838	from	
21-81	5839-5842	the	
21-82	5843-5858	postgresql.conf	
21-83	5859-5863	file	
21-84	5864-5865	(	
21-85	5865-5868	see	
21-86	5869-5879	parameters	
21-87	5880-5886	ending	
21-88	5887-5889	in	
21-89	5890-5891	*	
21-90	5891-5892	_	
21-91	5892-5896	cost	
21-92	5897-5899	or	
21-93	5900-5909	beginning	
21-94	5910-5914	with	
21-95	5915-5921	enable	
21-96	5921-5922	_	
21-97	5922-5923	*	
21-98	5923-5924	)	
21-99	5924-5925	.	
21-100	5926-5927	 	
21-101	5927-5931	When	
21-102	5932-5933	a	
21-103	5934-5939	query	
21-104	5940-5942	is	
21-105	5943-5947	sent	
21-106	5948-5950	to	
21-107	5951-5954	the	
21-108	5955-5963	database	
21-109	5963-5964	,	
21-110	5965-5968	the	
21-111	5969-5974	query	
21-112	5975-5982	planner	
21-113	5983-5993	calculates	
21-114	5994-5997	the	
21-115	5998-6008	cumulative	
21-116	6009-6014	costs	
21-117	6015-6018	for	
21-118	6019-6028	different	
21-119	6029-6038	execution	
21-120	6039-6049	strategies	
21-121	6050-6053	and	
21-122	6054-6061	selects	
21-123	6062-6065	the	
21-124	6066-6070	most	
21-125	6071-6078	optimal	
21-126	6079-6083	plan	
21-127	6084-6085	(	
21-128	6085-6090	which	
21-129	6091-6094	may	
21-130	6095-6098	not	
21-131	6099-6110	necessarily	
21-132	6111-6113	be	
21-133	6114-6117	the	
21-134	6118-6121	one	
21-135	6122-6126	with	
21-136	6127-6130	the	
21-137	6131-6137	lowest	
21-138	6138-6142	cost	
21-139	6142-6143	)	
21-140	6143-6144	.	
21-141	6145-6149	bash	
21-142	6150-6151	$	
21-143	6152-6159	pgbench	
21-144	6160-6161	-	
21-145	6161-6162	i	
21-146	6163-6164	&	
21-147	6164-6165	&	
21-148	6166-6170	psql	
21-149	6171-6172	<	
21-150	6172-6173	.	
21-151	6173-6174	.	
21-152	6174-6175	.	
21-153	6175-6176	>	
21-154	6177-6185	postgres	
21-155	6185-6186	=	
21-156	6186-6187	#	
21-157	6188-6195	EXPLAIN	
21-158	6196-6202	SELECT	
21-159	6203-6204	*	
21-160	6205-6209	FROM	
21-161	6210-6226	pgbench_accounts	
21-162	6227-6228	a	
21-163	6229-6233	JOIN	
21-164	6234-6250	pgbench_branches	
21-165	6251-6252	b	
21-166	6253-6255	ON	
21-167	6256-6257	(	
21-168	6257-6262	a.bid	
21-169	6262-6263	=	
21-170	6263-6268	b.bid	
21-171	6268-6269	)	
21-172	6270-6275	WHERE	
21-173	6276-6281	a.aid	
21-174	6282-6283	<	
21-175	6284-6290	100000	
21-176	6290-6291	;	

#Text=QUERY PLAN --------------------------------------------------------------------------------
22-1	6292-6297	QUERY	
22-2	6298-6302	PLAN	
22-3	6303-6304	-	
22-4	6304-6305	-	
22-5	6305-6306	-	
22-6	6306-6307	-	
22-7	6307-6308	-	
22-8	6308-6309	-	
22-9	6309-6310	-	
22-10	6310-6311	-	
22-11	6311-6312	-	
22-12	6312-6313	-	
22-13	6313-6314	-	
22-14	6314-6315	-	
22-15	6315-6316	-	
22-16	6316-6317	-	
22-17	6317-6318	-	
22-18	6318-6319	-	
22-19	6319-6320	-	
22-20	6320-6321	-	
22-21	6321-6322	-	
22-22	6322-6323	-	
22-23	6323-6324	-	
22-24	6324-6325	-	
22-25	6325-6326	-	
22-26	6326-6327	-	
22-27	6327-6328	-	
22-28	6328-6329	-	
22-29	6329-6330	-	
22-30	6330-6331	-	
22-31	6331-6332	-	
22-32	6332-6333	-	
22-33	6333-6334	-	
22-34	6334-6335	-	
22-35	6335-6336	-	
22-36	6336-6337	-	
22-37	6337-6338	-	
22-38	6338-6339	-	
22-39	6339-6340	-	
22-40	6340-6341	-	
22-41	6341-6342	-	
22-42	6342-6343	-	
22-43	6343-6344	-	
22-44	6344-6345	-	
22-45	6345-6346	-	
22-46	6346-6347	-	
22-47	6347-6348	-	
22-48	6348-6349	-	
22-49	6349-6350	-	
22-50	6350-6351	-	
22-51	6351-6352	-	
22-52	6352-6353	-	
22-53	6353-6354	-	
22-54	6354-6355	-	
22-55	6355-6356	-	
22-56	6356-6357	-	
22-57	6357-6358	-	
22-58	6358-6359	-	
22-59	6359-6360	-	
22-60	6360-6361	-	
22-61	6361-6362	-	
22-62	6362-6363	-	
22-63	6363-6364	-	
22-64	6364-6365	-	
22-65	6365-6366	-	
22-66	6366-6367	-	
22-67	6367-6368	-	
22-68	6368-6369	-	
22-69	6369-6370	-	
22-70	6370-6371	-	
22-71	6371-6372	-	
22-72	6372-6373	-	
22-73	6373-6374	-	
22-74	6374-6375	-	
22-75	6375-6376	-	
22-76	6376-6377	-	
22-77	6377-6378	-	
22-78	6378-6379	-	
22-79	6379-6380	-	
22-80	6380-6381	-	
22-81	6381-6382	-	
22-82	6382-6383	-	

#Text=Nested Loop (cost=0.00..4141.00 rows=99999 width=461) Join Filter: (a.bid = b.bid) Seq Scan on pgbench_branches b
23-1	6384-6390	Nested	
23-2	6391-6395	Loop	
23-3	6396-6397	(	
23-4	6397-6401	cost	
23-5	6401-6402	=	
23-6	6402-6406	0.00	
23-7	6406-6407	.	
23-8	6407-6415	.4141.00	
23-9	6416-6420	rows	
23-10	6420-6421	=	
23-11	6421-6426	99999	
23-12	6427-6432	width	
23-13	6432-6433	=	
23-14	6433-6436	461	
23-15	6436-6437	)	
23-16	6438-6442	Join	
23-17	6443-6449	Filter	
23-18	6449-6450	:	
23-19	6451-6452	(	
23-20	6452-6457	a.bid	
23-21	6458-6459	=	
23-22	6460-6465	b.bid	
23-23	6465-6466	)	
23-24	6467-6470	Seq	
23-25	6471-6475	Scan	
23-26	6476-6478	on	
23-27	6479-6495	pgbench_branches	
23-28	6496-6497	b	

#Text=(cost=0.00..1.01 rows=1 width=364) Seq Scan on pgbench_accounts a (cost=0.00..2890.00 rows=99999 width=97) Filter: (aid < 100000)
24-1	6498-6499	(	
24-2	6499-6503	cost	
24-3	6503-6504	=	
24-4	6504-6508	0.00	
24-5	6508-6509	.	
24-6	6509-6514	.1.01	
24-7	6515-6519	rows	
24-8	6519-6520	=	
24-9	6520-6521	1	
24-10	6522-6527	width	
24-11	6527-6528	=	
24-12	6528-6531	364	
24-13	6531-6532	)	
24-14	6533-6536	Seq	
24-15	6537-6541	Scan	
24-16	6542-6544	on	
24-17	6545-6561	pgbench_accounts	
24-18	6562-6563	a	
24-19	6564-6565	(	
24-20	6565-6569	cost	
24-21	6569-6570	=	
24-22	6570-6574	0.00	
24-23	6574-6575	.	
24-24	6575-6583	.2890.00	
24-25	6584-6588	rows	
24-26	6588-6589	=	
24-27	6589-6594	99999	
24-28	6595-6600	width	
24-29	6600-6601	=	
24-30	6601-6603	97	
24-31	6603-6604	)	
24-32	6605-6611	Filter	
24-33	6611-6612	:	
24-34	6613-6614	(	
24-35	6614-6617	aid	
24-36	6618-6619	<	
24-37	6620-6626	100000	
24-38	6626-6627	)	

#Text=(5 rows)Here, we see that the Seq Scan on pgbench_accounts has cost 2890 to execute the task.  Where does this value come from?  If we look at some settings and do the calculations, we find: cost = ( #blocks * seq_page_cost ) + ( #records * cpu_tuple_cost ) + ( #records * cpu_filter_cost ) postgres=# select pg_relation_size('pgbench_accounts');
25-1	6628-6629	(	
25-2	6629-6630	5	
25-3	6631-6635	rows	
25-4	6635-6636	)	
25-5	6636-6640	Here	
25-6	6640-6641	,	
25-7	6642-6644	we	
25-8	6645-6648	see	
25-9	6649-6653	that	
25-10	6654-6657	the	
25-11	6658-6661	Seq	
25-12	6662-6666	Scan	
25-13	6667-6669	on	
25-14	6670-6686	pgbench_accounts	
25-15	6687-6690	has	
25-16	6691-6695	cost	
25-17	6696-6700	2890	
25-18	6701-6703	to	
25-19	6704-6711	execute	
25-20	6712-6715	the	
25-21	6716-6720	task	
25-22	6720-6721	.	
25-23	6722-6723	 	
25-24	6723-6728	Where	
25-25	6729-6733	does	
25-26	6734-6738	this	
25-27	6739-6744	value	
25-28	6745-6749	come	
25-29	6750-6754	from	
25-30	6754-6755	?	
25-31	6756-6757	 	
25-32	6757-6759	If	
25-33	6760-6762	we	
25-34	6763-6767	look	
25-35	6768-6770	at	
25-36	6771-6775	some	
25-37	6776-6784	settings	
25-38	6785-6788	and	
25-39	6789-6791	do	
25-40	6792-6795	the	
25-41	6796-6808	calculations	
25-42	6808-6809	,	
25-43	6810-6812	we	
25-44	6813-6817	find	
25-45	6817-6818	:	
25-46	6819-6823	cost	
25-47	6824-6825	=	
25-48	6826-6827	(	
25-49	6828-6829	#	
25-50	6829-6835	blocks	
25-51	6836-6837	*	
25-52	6838-6851	seq_page_cost	
25-53	6852-6853	)	
25-54	6854-6855	+	
25-55	6856-6857	(	
25-56	6858-6859	#	
25-57	6859-6866	records	
25-58	6867-6868	*	
25-59	6869-6883	cpu_tuple_cost	
25-60	6884-6885	)	
25-61	6886-6887	+	
25-62	6888-6889	(	
25-63	6890-6891	#	
25-64	6891-6898	records	
25-65	6899-6900	*	
25-66	6901-6916	cpu_filter_cost	
25-67	6917-6918	)	
25-68	6919-6927	postgres	
25-69	6927-6928	=	
25-70	6928-6929	#	
25-71	6930-6936	select	
25-72	6937-6953	pg_relation_size	
25-73	6953-6954	(	
25-74	6954-6955	'	
25-75	6955-6971	pgbench_accounts	
25-76	6971-6972	'	
25-77	6972-6973	)	
25-78	6973-6974	;	

#Text=pg_relation_size ------------------ 13434880 block_size = 8192 (8kB, typical OS) #blocks = 1640 (relation_size / block_size)
26-1	6975-6991	pg_relation_size	
26-2	6992-6993	-	
26-3	6993-6994	-	
26-4	6994-6995	-	
26-5	6995-6996	-	
26-6	6996-6997	-	
26-7	6997-6998	-	
26-8	6998-6999	-	
26-9	6999-7000	-	
26-10	7000-7001	-	
26-11	7001-7002	-	
26-12	7002-7003	-	
26-13	7003-7004	-	
26-14	7004-7005	-	
26-15	7005-7006	-	
26-16	7006-7007	-	
26-17	7007-7008	-	
26-18	7008-7009	-	
26-19	7009-7010	-	
26-20	7011-7019	13434880	
26-21	7020-7030	block_size	
26-22	7031-7032	=	
26-23	7033-7037	8192	
26-24	7038-7039	(	
26-25	7039-7042	8kB	
26-26	7042-7043	,	
26-27	7044-7051	typical	
26-28	7052-7054	OS	
26-29	7054-7055	)	
26-30	7056-7057	#	
26-31	7057-7063	blocks	
26-32	7064-7065	=	
26-33	7066-7070	1640	
26-34	7071-7072	(	
26-35	7072-7085	relation_size	
26-36	7086-7087	/	
26-37	7088-7098	block_size	
26-38	7098-7099	)	

#Text=#records = 100000 seq_page_cost = 1 (default) cpu_tuple_cost = 0.01 (default) cpu_filter_cost = 0.0025 (default)
27-1	7100-7101	#	
27-2	7101-7108	records	
27-3	7109-7110	=	
27-4	7111-7117	100000	
27-5	7118-7131	seq_page_cost	
27-6	7132-7133	=	
27-7	7134-7135	1	
27-8	7136-7137	(	
27-9	7137-7144	default	
27-10	7144-7145	)	
27-11	7146-7160	cpu_tuple_cost	
27-12	7161-7162	=	
27-13	7163-7167	0.01	
27-14	7168-7169	(	
27-15	7169-7176	default	
27-16	7176-7177	)	
27-17	7178-7193	cpu_filter_cost	
27-18	7194-7195	=	
27-19	7196-7202	0.0025	
27-20	7203-7204	(	
27-21	7204-7211	default	
27-22	7211-7212	)	

#Text=cost = ( 1640 * 1 ) + ( 100000 * 0.01 ) + ( 100000 * 0.0025 ) = 2890 As we can see, the costs are directly based on some internal statistics that the query planner can work with. A Note About Statistics
28-1	7213-7217	cost	
28-2	7218-7219	=	
28-3	7220-7221	(	
28-4	7222-7226	1640	
28-5	7227-7228	*	
28-6	7229-7230	1	
28-7	7231-7232	)	
28-8	7233-7234	+	
28-9	7235-7236	(	
28-10	7237-7243	100000	
28-11	7244-7245	*	
28-12	7246-7250	0.01	
28-13	7251-7252	)	
28-14	7253-7254	+	
28-15	7255-7256	(	
28-16	7257-7263	100000	
28-17	7264-7265	*	
28-18	7266-7272	0.0025	
28-19	7273-7274	)	
28-20	7275-7276	=	
28-21	7277-7281	2890	
28-22	7282-7284	As	
28-23	7285-7287	we	
28-24	7288-7291	can	
28-25	7292-7295	see	
28-26	7295-7296	,	
28-27	7297-7300	the	
28-28	7301-7306	costs	
28-29	7307-7310	are	
28-30	7311-7319	directly	
28-31	7320-7325	based	
28-32	7326-7328	on	
28-33	7329-7333	some	
28-34	7334-7342	internal	
28-35	7343-7353	statistics	
28-36	7354-7358	that	
28-37	7359-7362	the	
28-38	7363-7368	query	
28-39	7369-7376	planner	
28-40	7377-7380	can	
28-41	7381-7385	work	
28-42	7386-7390	with	
28-43	7390-7391	.	
28-44	7392-7393	A	
28-45	7394-7398	Note	
28-46	7399-7404	About	
28-47	7405-7415	Statistics	

#Text=The query planner calculates costs based on statistics stored in pg_statistic (don’t look there--there’s nothing human-readable in there.  If you want to get visibility into the table and row statistics, try looking at pg_stats).  If any of these internal statistics are off (i.e., a bloated table or too many joins that cause the Genetic Query Optimizer to kick in), a sub-optimal plan may be selected, leading to poor query performance.  Having bad statistics isn’t necessarily a problem--the statistics aren’t always updated in real-time, and much of it depends on PostgreSQL’s internal maintenance.  As such, it’s imperative that database maintenance is conducted regularly--this means frequent VACUUM-ing and ANALYZE-ing.  Without good statistics, you could end up with something like this: postgres=# EXPLAIN SELECT * FROM pgbench_history WHERE aid < 100; QUERY PLAN
29-1	7416-7419	The	
29-2	7420-7425	query	
29-3	7426-7433	planner	
29-4	7434-7444	calculates	
29-5	7445-7450	costs	
29-6	7451-7456	based	
29-7	7457-7459	on	
29-8	7460-7470	statistics	
29-9	7471-7477	stored	
29-10	7478-7480	in	
29-11	7481-7493	pg_statistic	
29-12	7494-7495	(	
29-13	7495-7498	don	
29-14	7498-7499	’	
29-15	7499-7500	t	
29-16	7501-7505	look	
29-17	7506-7511	there	
29-18	7511-7512	-	
29-19	7512-7513	-	
29-20	7513-7518	there	
29-21	7518-7519	’	
29-22	7519-7520	s	
29-23	7521-7528	nothing	
29-24	7529-7543	human-readable	
29-25	7544-7546	in	
29-26	7547-7552	there	
29-27	7552-7553	.	
29-28	7554-7555	 	
29-29	7555-7557	If	
29-30	7558-7561	you	
29-31	7562-7566	want	
29-32	7567-7569	to	
29-33	7570-7573	get	
29-34	7574-7584	visibility	
29-35	7585-7589	into	
29-36	7590-7593	the	
29-37	7594-7599	table	
29-38	7600-7603	and	
29-39	7604-7607	row	
29-40	7608-7618	statistics	
29-41	7618-7619	,	
29-42	7620-7623	try	
29-43	7624-7631	looking	
29-44	7632-7634	at	
29-45	7635-7643	pg_stats	
29-46	7643-7644	)	
29-47	7644-7645	.	
29-48	7646-7647	 	
29-49	7647-7649	If	
29-50	7650-7653	any	
29-51	7654-7656	of	
29-52	7657-7662	these	
29-53	7663-7671	internal	
29-54	7672-7682	statistics	
29-55	7683-7686	are	
29-56	7687-7690	off	
29-57	7691-7692	(	
29-58	7692-7695	i.e	
29-59	7695-7696	.	
29-60	7696-7697	,	
29-61	7698-7699	a	
29-62	7700-7707	bloated	
29-63	7708-7713	table	
29-64	7714-7716	or	
29-65	7717-7720	too	
29-66	7721-7725	many	
29-67	7726-7731	joins	
29-68	7732-7736	that	
29-69	7737-7742	cause	
29-70	7743-7746	the	
29-71	7747-7754	Genetic	
29-72	7755-7760	Query	
29-73	7761-7770	Optimizer	
29-74	7771-7773	to	
29-75	7774-7778	kick	
29-76	7779-7781	in	
29-77	7781-7782	)	
29-78	7782-7783	,	
29-79	7784-7785	a	
29-80	7786-7797	sub-optimal	
29-81	7798-7802	plan	
29-82	7803-7806	may	
29-83	7807-7809	be	
29-84	7810-7818	selected	
29-85	7818-7819	,	
29-86	7820-7827	leading	
29-87	7828-7830	to	
29-88	7831-7835	poor	
29-89	7836-7841	query	
29-90	7842-7853	performance	
29-91	7853-7854	.	
29-92	7855-7856	 	
29-93	7856-7862	Having	
29-94	7863-7866	bad	
29-95	7867-7877	statistics	
29-96	7878-7881	isn	
29-97	7881-7882	’	
29-98	7882-7883	t	
29-99	7884-7895	necessarily	
29-100	7896-7897	a	
29-101	7898-7905	problem	
29-102	7905-7906	-	
29-103	7906-7907	-	
29-104	7907-7910	the	
29-105	7911-7921	statistics	
29-106	7922-7926	aren	
29-107	7926-7927	’	
29-108	7927-7928	t	
29-109	7929-7935	always	
29-110	7936-7943	updated	
29-111	7944-7946	in	
29-112	7947-7956	real-time	
29-113	7956-7957	,	
29-114	7958-7961	and	
29-115	7962-7966	much	
29-116	7967-7969	of	
29-117	7970-7972	it	
29-118	7973-7980	depends	
29-119	7981-7983	on	
29-120	7984-7994	PostgreSQL	
29-121	7994-7995	’	
29-122	7995-7996	s	
29-123	7997-8005	internal	
29-124	8006-8017	maintenance	
29-125	8017-8018	.	
29-126	8019-8020	 	
29-127	8020-8022	As	
29-128	8023-8027	such	
29-129	8027-8028	,	
29-130	8029-8031	it	
29-131	8031-8032	’	
29-132	8032-8033	s	
29-133	8034-8044	imperative	
29-134	8045-8049	that	
29-135	8050-8058	database	
29-136	8059-8070	maintenance	
29-137	8071-8073	is	
29-138	8074-8083	conducted	
29-139	8084-8093	regularly	
29-140	8093-8094	-	
29-141	8094-8095	-	
29-142	8095-8099	this	
29-143	8100-8105	means	
29-144	8106-8114	frequent	
29-145	8115-8125	VACUUM-ing	
29-146	8126-8129	and	
29-147	8130-8141	ANALYZE-ing	
29-148	8141-8142	.	
29-149	8143-8144	 	
29-150	8144-8151	Without	
29-151	8152-8156	good	
29-152	8157-8167	statistics	
29-153	8167-8168	,	
29-154	8169-8172	you	
29-155	8173-8178	could	
29-156	8179-8182	end	
29-157	8183-8185	up	
29-158	8186-8190	with	
29-159	8191-8200	something	
29-160	8201-8205	like	
29-161	8206-8210	this	
29-162	8210-8211	:	
29-163	8212-8220	postgres	
29-164	8220-8221	=	
29-165	8221-8222	#	
29-166	8223-8230	EXPLAIN	
29-167	8231-8237	SELECT	
29-168	8238-8239	*	
29-169	8240-8244	FROM	
29-170	8245-8260	pgbench_history	
29-171	8261-8266	WHERE	
29-172	8267-8270	aid	
29-173	8271-8272	<	
29-174	8273-8276	100	
29-175	8276-8277	;	
29-176	8278-8283	QUERY	
29-177	8284-8288	PLAN	

#Text=----------------------------------------------------------------------- Seq Scan on pgbench_history (cost=0.00..2346.00 rows=35360 width=50)
30-1	8289-8290	-	
30-2	8290-8291	-	
30-3	8291-8292	-	
30-4	8292-8293	-	
30-5	8293-8294	-	
30-6	8294-8295	-	
30-7	8295-8296	-	
30-8	8296-8297	-	
30-9	8297-8298	-	
30-10	8298-8299	-	
30-11	8299-8300	-	
30-12	8300-8301	-	
30-13	8301-8302	-	
30-14	8302-8303	-	
30-15	8303-8304	-	
30-16	8304-8305	-	
30-17	8305-8306	-	
30-18	8306-8307	-	
30-19	8307-8308	-	
30-20	8308-8309	-	
30-21	8309-8310	-	
30-22	8310-8311	-	
30-23	8311-8312	-	
30-24	8312-8313	-	
30-25	8313-8314	-	
30-26	8314-8315	-	
30-27	8315-8316	-	
30-28	8316-8317	-	
30-29	8317-8318	-	
30-30	8318-8319	-	
30-31	8319-8320	-	
30-32	8320-8321	-	
30-33	8321-8322	-	
30-34	8322-8323	-	
30-35	8323-8324	-	
30-36	8324-8325	-	
30-37	8325-8326	-	
30-38	8326-8327	-	
30-39	8327-8328	-	
30-40	8328-8329	-	
30-41	8329-8330	-	
30-42	8330-8331	-	
30-43	8331-8332	-	
30-44	8332-8333	-	
30-45	8333-8334	-	
30-46	8334-8335	-	
30-47	8335-8336	-	
30-48	8336-8337	-	
30-49	8337-8338	-	
30-50	8338-8339	-	
30-51	8339-8340	-	
30-52	8340-8341	-	
30-53	8341-8342	-	
30-54	8342-8343	-	
30-55	8343-8344	-	
30-56	8344-8345	-	
30-57	8345-8346	-	
30-58	8346-8347	-	
30-59	8347-8348	-	
30-60	8348-8349	-	
30-61	8349-8350	-	
30-62	8350-8351	-	
30-63	8351-8352	-	
30-64	8352-8353	-	
30-65	8353-8354	-	
30-66	8354-8355	-	
30-67	8355-8356	-	
30-68	8356-8357	-	
30-69	8357-8358	-	
30-70	8358-8359	-	
30-71	8359-8360	-	
30-72	8361-8364	Seq	
30-73	8365-8369	Scan	
30-74	8370-8372	on	
30-75	8373-8388	pgbench_history	
30-76	8389-8390	(	
30-77	8390-8394	cost	
30-78	8394-8395	=	
30-79	8395-8399	0.00	
30-80	8399-8400	.	
30-81	8400-8408	.2346.00	
30-82	8409-8413	rows	
30-83	8413-8414	=	
30-84	8414-8419	35360	
30-85	8420-8425	width	
30-86	8425-8426	=	
30-87	8426-8428	50	
30-88	8428-8429	)	

#Text=Filter: (aid < 100)In the example above, the database had gone through a fair amount of activity, and the statistics were inaccurate.  With an ANALYZE (not VACUUM ANALYZE or EXPLAIN ANALYZE, but just a plain ANALYZE), the statistics are fixed, and the query planner now chooses an Index Scan: postgres=# EXPLAIN SELECT * FROM pgbench_history WHERE aid < 100; QUERY PLAN
31-1	8430-8436	Filter	
31-2	8436-8437	:	
31-3	8438-8439	(	
31-4	8439-8442	aid	
31-5	8443-8444	<	
31-6	8445-8448	100	
31-7	8448-8449	)	
31-8	8449-8451	In	
31-9	8452-8455	the	
31-10	8456-8463	example	
31-11	8464-8469	above	
31-12	8469-8470	,	
31-13	8471-8474	the	
31-14	8475-8483	database	
31-15	8484-8487	had	
31-16	8488-8492	gone	
31-17	8493-8500	through	
31-18	8501-8502	a	
31-19	8503-8507	fair	
31-20	8508-8514	amount	
31-21	8515-8517	of	
31-22	8518-8526	activity	
31-23	8526-8527	,	
31-24	8528-8531	and	
31-25	8532-8535	the	
31-26	8536-8546	statistics	
31-27	8547-8551	were	
31-28	8552-8562	inaccurate	
31-29	8562-8563	.	
31-30	8564-8565	 	
31-31	8565-8569	With	
31-32	8570-8572	an	
31-33	8573-8580	ANALYZE	
31-34	8581-8582	(	
31-35	8582-8585	not	
31-36	8586-8592	VACUUM	
31-37	8593-8600	ANALYZE	
31-38	8601-8603	or	
31-39	8604-8611	EXPLAIN	
31-40	8612-8619	ANALYZE	
31-41	8619-8620	,	
31-42	8621-8624	but	
31-43	8625-8629	just	
31-44	8630-8631	a	
31-45	8632-8637	plain	
31-46	8638-8645	ANALYZE	
31-47	8645-8646	)	
31-48	8646-8647	,	
31-49	8648-8651	the	
31-50	8652-8662	statistics	
31-51	8663-8666	are	
31-52	8667-8672	fixed	
31-53	8672-8673	,	
31-54	8674-8677	and	
31-55	8678-8681	the	
31-56	8682-8687	query	
31-57	8688-8695	planner	
31-58	8696-8699	now	
31-59	8700-8707	chooses	
31-60	8708-8710	an	
31-61	8711-8716	Index	
31-62	8717-8721	Scan	
31-63	8721-8722	:	
31-64	8723-8731	postgres	
31-65	8731-8732	=	
31-66	8732-8733	#	
31-67	8734-8741	EXPLAIN	
31-68	8742-8748	SELECT	
31-69	8749-8750	*	
31-70	8751-8755	FROM	
31-71	8756-8771	pgbench_history	
31-72	8772-8777	WHERE	
31-73	8778-8781	aid	
31-74	8782-8783	<	
31-75	8784-8787	100	
31-76	8787-8788	;	
31-77	8789-8794	QUERY	
31-78	8795-8799	PLAN	

#Text=---------------------------------------------------------------------- Index Scan using foo on pgbench_history (cost=0.42..579.09 rows=153 width=50) Index Cond: (aid < 100) How Does EXPLAIN ANALYZE Help?
32-1	8800-8801	-	
32-2	8801-8802	-	
32-3	8802-8803	-	
32-4	8803-8804	-	
32-5	8804-8805	-	
32-6	8805-8806	-	
32-7	8806-8807	-	
32-8	8807-8808	-	
32-9	8808-8809	-	
32-10	8809-8810	-	
32-11	8810-8811	-	
32-12	8811-8812	-	
32-13	8812-8813	-	
32-14	8813-8814	-	
32-15	8814-8815	-	
32-16	8815-8816	-	
32-17	8816-8817	-	
32-18	8817-8818	-	
32-19	8818-8819	-	
32-20	8819-8820	-	
32-21	8820-8821	-	
32-22	8821-8822	-	
32-23	8822-8823	-	
32-24	8823-8824	-	
32-25	8824-8825	-	
32-26	8825-8826	-	
32-27	8826-8827	-	
32-28	8827-8828	-	
32-29	8828-8829	-	
32-30	8829-8830	-	
32-31	8830-8831	-	
32-32	8831-8832	-	
32-33	8832-8833	-	
32-34	8833-8834	-	
32-35	8834-8835	-	
32-36	8835-8836	-	
32-37	8836-8837	-	
32-38	8837-8838	-	
32-39	8838-8839	-	
32-40	8839-8840	-	
32-41	8840-8841	-	
32-42	8841-8842	-	
32-43	8842-8843	-	
32-44	8843-8844	-	
32-45	8844-8845	-	
32-46	8845-8846	-	
32-47	8846-8847	-	
32-48	8847-8848	-	
32-49	8848-8849	-	
32-50	8849-8850	-	
32-51	8850-8851	-	
32-52	8851-8852	-	
32-53	8852-8853	-	
32-54	8853-8854	-	
32-55	8854-8855	-	
32-56	8855-8856	-	
32-57	8856-8857	-	
32-58	8857-8858	-	
32-59	8858-8859	-	
32-60	8859-8860	-	
32-61	8860-8861	-	
32-62	8861-8862	-	
32-63	8862-8863	-	
32-64	8863-8864	-	
32-65	8864-8865	-	
32-66	8865-8866	-	
32-67	8866-8867	-	
32-68	8867-8868	-	
32-69	8868-8869	-	
32-70	8869-8870	-	
32-71	8871-8876	Index	
32-72	8877-8881	Scan	
32-73	8882-8887	using	
32-74	8888-8891	foo	
32-75	8892-8894	on	
32-76	8895-8910	pgbench_history	
32-77	8911-8912	(	
32-78	8912-8916	cost	
32-79	8916-8917	=	
32-80	8917-8921	0.42	
32-81	8921-8922	.	
32-82	8922-8929	.579.09	
32-83	8930-8934	rows	
32-84	8934-8935	=	
32-85	8935-8938	153	
32-86	8939-8944	width	
32-87	8944-8945	=	
32-88	8945-8947	50	
32-89	8947-8948	)	
32-90	8949-8954	Index	
32-91	8955-8959	Cond	
32-92	8959-8960	:	
32-93	8961-8962	(	
32-94	8962-8965	aid	
32-95	8966-8967	<	
32-96	8968-8971	100	
32-97	8971-8972	)	
32-98	8973-8976	How	
32-99	8977-8981	Does	
32-100	8982-8989	EXPLAIN	
32-101	8990-8997	ANALYZE	
32-102	8998-9002	Help	
32-103	9002-9003	?	

#Text=When an EXPLAIN is prepended to a query, the query plan gets printed, but the query does not get run.  We won’t know whether the statistics stored in the database were correct or not, and we won’t know if some operations required expensive I/O instead of fully running in memory.  When used with ANALYZE, the query is actually run and the query plan, along with some under-the-hood activity is printed out. If we look at the first query above and run EXPLAIN ANALYZE instead of a plain EXPLAIN, we get:
33-1	9004-9008	When	
33-2	9009-9011	an	
33-3	9012-9019	EXPLAIN	
33-4	9020-9022	is	
33-5	9023-9032	prepended	
33-6	9033-9035	to	
33-7	9036-9037	a	
33-8	9038-9043	query	
33-9	9043-9044	,	
33-10	9045-9048	the	
33-11	9049-9054	query	
33-12	9055-9059	plan	
33-13	9060-9064	gets	
33-14	9065-9072	printed	
33-15	9072-9073	,	
33-16	9074-9077	but	
33-17	9078-9081	the	
33-18	9082-9087	query	
33-19	9088-9092	does	
33-20	9093-9096	not	
33-21	9097-9100	get	
33-22	9101-9104	run	
33-23	9104-9105	.	
33-24	9106-9107	 	
33-25	9107-9109	We	
33-26	9110-9113	won	
33-27	9113-9114	’	
33-28	9114-9115	t	
33-29	9116-9120	know	
33-30	9121-9128	whether	
33-31	9129-9132	the	
33-32	9133-9143	statistics	
33-33	9144-9150	stored	
33-34	9151-9153	in	
33-35	9154-9157	the	
33-36	9158-9166	database	
33-37	9167-9171	were	
33-38	9172-9179	correct	
33-39	9180-9182	or	
33-40	9183-9186	not	
33-41	9186-9187	,	
33-42	9188-9191	and	
33-43	9192-9194	we	
33-44	9195-9198	won	
33-45	9198-9199	’	
33-46	9199-9200	t	
33-47	9201-9205	know	
33-48	9206-9208	if	
33-49	9209-9213	some	
33-50	9214-9224	operations	
33-51	9225-9233	required	
33-52	9234-9243	expensive	
33-53	9244-9245	I	
33-54	9245-9246	/	
33-55	9246-9247	O	
33-56	9248-9255	instead	
33-57	9256-9258	of	
33-58	9259-9264	fully	
33-59	9265-9272	running	
33-60	9273-9275	in	
33-61	9276-9282	memory	
33-62	9282-9283	.	
33-63	9284-9285	 	
33-64	9285-9289	When	
33-65	9290-9294	used	
33-66	9295-9299	with	
33-67	9300-9307	ANALYZE	
33-68	9307-9308	,	
33-69	9309-9312	the	
33-70	9313-9318	query	
33-71	9319-9321	is	
33-72	9322-9330	actually	
33-73	9331-9334	run	
33-74	9335-9338	and	
33-75	9339-9342	the	
33-76	9343-9348	query	
33-77	9349-9353	plan	
33-78	9353-9354	,	
33-79	9355-9360	along	
33-80	9361-9365	with	
33-81	9366-9370	some	
33-82	9371-9385	under-the-hood	
33-83	9386-9394	activity	
33-84	9395-9397	is	
33-85	9398-9405	printed	
33-86	9406-9409	out	
33-87	9409-9410	.	
33-88	9411-9413	If	
33-89	9414-9416	we	
33-90	9417-9421	look	
33-91	9422-9424	at	
33-92	9425-9428	the	
33-93	9429-9434	first	
33-94	9435-9440	query	
33-95	9441-9446	above	
33-96	9447-9450	and	
33-97	9451-9454	run	
33-98	9455-9462	EXPLAIN	
33-99	9463-9470	ANALYZE	
33-100	9471-9478	instead	
33-101	9479-9481	of	
33-102	9482-9483	a	
33-103	9484-9489	plain	
33-104	9490-9497	EXPLAIN	
33-105	9497-9498	,	
33-106	9499-9501	we	
33-107	9502-9505	get	
33-108	9505-9506	:	

#Text=postgres=# EXPLAIN ANALYZE SELECT * FROM pgbench_accounts a JOIN pgbench_branches b ON (a.bid=b.bid) WHERE a.aid < 100000; QUERY PLAN
34-1	9507-9515	postgres	
34-2	9515-9516	=	
34-3	9516-9517	#	
34-4	9518-9525	EXPLAIN	
34-5	9526-9533	ANALYZE	
34-6	9534-9540	SELECT	
34-7	9541-9542	*	
34-8	9543-9547	FROM	
34-9	9548-9564	pgbench_accounts	
34-10	9565-9566	a	
34-11	9567-9571	JOIN	
34-12	9572-9588	pgbench_branches	
34-13	9589-9590	b	
34-14	9591-9593	ON	
34-15	9594-9595	(	
34-16	9595-9600	a.bid	
34-17	9600-9601	=	
34-18	9601-9606	b.bid	
34-19	9606-9607	)	
34-20	9608-9613	WHERE	
34-21	9614-9619	a.aid	
34-22	9620-9621	<	
34-23	9622-9628	100000	
34-24	9628-9629	;	
34-25	9630-9635	QUERY	
34-26	9636-9640	PLAN	

#Text=------------------------------------------------------------------------------------------------------------- Nested Loop (cost=0.00..4141.00 rows=99999 width=461) (actual time=0.039..56.582 rows=99999 loops=1) Join Filter: (a.bid = b.bid)
35-1	9641-9642	-	
35-2	9642-9643	-	
35-3	9643-9644	-	
35-4	9644-9645	-	
35-5	9645-9646	-	
35-6	9646-9647	-	
35-7	9647-9648	-	
35-8	9648-9649	-	
35-9	9649-9650	-	
35-10	9650-9651	-	
35-11	9651-9652	-	
35-12	9652-9653	-	
35-13	9653-9654	-	
35-14	9654-9655	-	
35-15	9655-9656	-	
35-16	9656-9657	-	
35-17	9657-9658	-	
35-18	9658-9659	-	
35-19	9659-9660	-	
35-20	9660-9661	-	
35-21	9661-9662	-	
35-22	9662-9663	-	
35-23	9663-9664	-	
35-24	9664-9665	-	
35-25	9665-9666	-	
35-26	9666-9667	-	
35-27	9667-9668	-	
35-28	9668-9669	-	
35-29	9669-9670	-	
35-30	9670-9671	-	
35-31	9671-9672	-	
35-32	9672-9673	-	
35-33	9673-9674	-	
35-34	9674-9675	-	
35-35	9675-9676	-	
35-36	9676-9677	-	
35-37	9677-9678	-	
35-38	9678-9679	-	
35-39	9679-9680	-	
35-40	9680-9681	-	
35-41	9681-9682	-	
35-42	9682-9683	-	
35-43	9683-9684	-	
35-44	9684-9685	-	
35-45	9685-9686	-	
35-46	9686-9687	-	
35-47	9687-9688	-	
35-48	9688-9689	-	
35-49	9689-9690	-	
35-50	9690-9691	-	
35-51	9691-9692	-	
35-52	9692-9693	-	
35-53	9693-9694	-	
35-54	9694-9695	-	
35-55	9695-9696	-	
35-56	9696-9697	-	
35-57	9697-9698	-	
35-58	9698-9699	-	
35-59	9699-9700	-	
35-60	9700-9701	-	
35-61	9701-9702	-	
35-62	9702-9703	-	
35-63	9703-9704	-	
35-64	9704-9705	-	
35-65	9705-9706	-	
35-66	9706-9707	-	
35-67	9707-9708	-	
35-68	9708-9709	-	
35-69	9709-9710	-	
35-70	9710-9711	-	
35-71	9711-9712	-	
35-72	9712-9713	-	
35-73	9713-9714	-	
35-74	9714-9715	-	
35-75	9715-9716	-	
35-76	9716-9717	-	
35-77	9717-9718	-	
35-78	9718-9719	-	
35-79	9719-9720	-	
35-80	9720-9721	-	
35-81	9721-9722	-	
35-82	9722-9723	-	
35-83	9723-9724	-	
35-84	9724-9725	-	
35-85	9725-9726	-	
35-86	9726-9727	-	
35-87	9727-9728	-	
35-88	9728-9729	-	
35-89	9729-9730	-	
35-90	9730-9731	-	
35-91	9731-9732	-	
35-92	9732-9733	-	
35-93	9733-9734	-	
35-94	9734-9735	-	
35-95	9735-9736	-	
35-96	9736-9737	-	
35-97	9737-9738	-	
35-98	9738-9739	-	
35-99	9739-9740	-	
35-100	9740-9741	-	
35-101	9741-9742	-	
35-102	9742-9743	-	
35-103	9743-9744	-	
35-104	9744-9745	-	
35-105	9745-9746	-	
35-106	9746-9747	-	
35-107	9747-9748	-	
35-108	9748-9749	-	
35-109	9749-9750	-	
35-110	9751-9757	Nested	
35-111	9758-9762	Loop	
35-112	9763-9764	(	
35-113	9764-9768	cost	
35-114	9768-9769	=	
35-115	9769-9773	0.00	
35-116	9773-9774	.	
35-117	9774-9782	.4141.00	
35-118	9783-9787	rows	
35-119	9787-9788	=	
35-120	9788-9793	99999	
35-121	9794-9799	width	
35-122	9799-9800	=	
35-123	9800-9803	461	
35-124	9803-9804	)	
35-125	9805-9806	(	
35-126	9806-9812	actual	
35-127	9813-9817	time	
35-128	9817-9818	=	
35-129	9818-9823	0.039	
35-130	9823-9824	.	
35-131	9824-9831	.56.582	
35-132	9832-9836	rows	
35-133	9836-9837	=	
35-134	9837-9842	99999	
35-135	9843-9848	loops	
35-136	9848-9849	=	
35-137	9849-9850	1	
35-138	9850-9851	)	
35-139	9852-9856	Join	
35-140	9857-9863	Filter	
35-141	9863-9864	:	
35-142	9865-9866	(	
35-143	9866-9871	a.bid	
35-144	9872-9873	=	
35-145	9874-9879	b.bid	
35-146	9879-9880	)	

#Text=Seq Scan on pgbench_branches b (cost=0.00..1.01 rows=1 width=364) (actual time=0.025..0.026 rows=1 loops=1) Seq Scan on pgbench_accounts a
36-1	9881-9884	Seq	
36-2	9885-9889	Scan	
36-3	9890-9892	on	
36-4	9893-9909	pgbench_branches	
36-5	9910-9911	b	
36-6	9912-9913	(	
36-7	9913-9917	cost	
36-8	9917-9918	=	
36-9	9918-9922	0.00	
36-10	9922-9923	.	
36-11	9923-9928	.1.01	
36-12	9929-9933	rows	
36-13	9933-9934	=	
36-14	9934-9935	1	
36-15	9936-9941	width	
36-16	9941-9942	=	
36-17	9942-9945	364	
36-18	9945-9946	)	
36-19	9947-9948	(	
36-20	9948-9954	actual	
36-21	9955-9959	time	
36-22	9959-9960	=	
36-23	9960-9965	0.025	
36-24	9965-9966	.	
36-25	9966-9972	.0.026	
36-26	9973-9977	rows	
36-27	9977-9978	=	
36-28	9978-9979	1	
36-29	9980-9985	loops	
36-30	9985-9986	=	
36-31	9986-9987	1	
36-32	9987-9988	)	
36-33	9989-9992	Seq	
36-34	9993-9997	Scan	
36-35	9998-10000	on	
36-36	10001-10017	pgbench_accounts	
36-37	10018-10019	a	

#Text=(cost=0.00..2890.00 rows=99999 width=97) (actual time=0.008..25.752 rows=99999 loops=1) Filter: (aid < 100000) Rows Removed by Filter: 1 Planning Time: 0.306 ms Execution Time: 61.031 ms
37-1	10020-10021	(	
37-2	10021-10025	cost	
37-3	10025-10026	=	
37-4	10026-10030	0.00	
37-5	10030-10031	.	
37-6	10031-10039	.2890.00	
37-7	10040-10044	rows	
37-8	10044-10045	=	
37-9	10045-10050	99999	
37-10	10051-10056	width	
37-11	10056-10057	=	
37-12	10057-10059	97	
37-13	10059-10060	)	
37-14	10061-10062	(	
37-15	10062-10068	actual	
37-16	10069-10073	time	
37-17	10073-10074	=	
37-18	10074-10079	0.008	
37-19	10079-10080	.	
37-20	10080-10087	.25.752	
37-21	10088-10092	rows	
37-22	10092-10093	=	
37-23	10093-10098	99999	
37-24	10099-10104	loops	
37-25	10104-10105	=	
37-26	10105-10106	1	
37-27	10106-10107	)	
37-28	10108-10114	Filter	
37-29	10114-10115	:	
37-30	10116-10117	(	
37-31	10117-10120	aid	
37-32	10121-10122	<	
37-33	10123-10129	100000	
37-34	10129-10130	)	
37-35	10131-10135	Rows	
37-36	10136-10143	Removed	
37-37	10144-10146	by	
37-38	10147-10153	Filter	
37-39	10153-10154	:	
37-40	10155-10156	1	
37-41	10157-10165	Planning	
37-42	10166-10170	Time	
37-43	10170-10171	:	
37-44	10172-10177	0.306	
37-45	10178-10180	ms	
37-46	10181-10190	Execution	
37-47	10191-10195	Time	
37-48	10195-10196	:	
37-49	10197-10203	61.031	
37-50	10204-10206	ms	

#Text=(8 rows)You’ll notice here that there’s more information -- actual time and rows, as well as planning and execution times.  If we add BUFFERS, like EXPLAIN (ANALYZE, BUFFERS), we’ll even get cache hit/miss statistics in the output: postgres=# EXPLAIN (BUFFERS, ANALYZE) SELECT * FROM pgbench_accounts a JOIN pgbench_branches b ON (a.bid=b.bid) WHERE a.aid < 100000;
38-1	10207-10208	(	
38-2	10208-10209	8	
38-3	10210-10214	rows	
38-4	10214-10215	)	
38-5	10215-10218	You	
38-6	10218-10219	’	
38-7	10219-10221	ll	
38-8	10222-10228	notice	
38-9	10229-10233	here	
38-10	10234-10238	that	
38-11	10239-10244	there	
38-12	10244-10245	’	
38-13	10245-10246	s	
38-14	10247-10251	more	
38-15	10252-10263	information	
38-16	10264-10265	-	
38-17	10265-10266	-	
38-18	10267-10273	actual	
38-19	10274-10278	time	
38-20	10279-10282	and	
38-21	10283-10287	rows	
38-22	10287-10288	,	
38-23	10289-10291	as	
38-24	10292-10296	well	
38-25	10297-10299	as	
38-26	10300-10308	planning	
38-27	10309-10312	and	
38-28	10313-10322	execution	
38-29	10323-10328	times	
38-30	10328-10329	.	
38-31	10330-10331	 	
38-32	10331-10333	If	
38-33	10334-10336	we	
38-34	10337-10340	add	
38-35	10341-10348	BUFFERS	
38-36	10348-10349	,	
38-37	10350-10354	like	
38-38	10355-10362	EXPLAIN	
38-39	10363-10364	(	
38-40	10364-10371	ANALYZE	
38-41	10371-10372	,	
38-42	10373-10380	BUFFERS	
38-43	10380-10381	)	
38-44	10381-10382	,	
38-45	10383-10385	we	
38-46	10385-10386	’	
38-47	10386-10388	ll	
38-48	10389-10393	even	
38-49	10394-10397	get	
38-50	10398-10403	cache	
38-51	10404-10407	hit	
38-52	10407-10408	/	
38-53	10408-10412	miss	
38-54	10413-10423	statistics	
38-55	10424-10426	in	
38-56	10427-10430	the	
38-57	10431-10437	output	
38-58	10437-10438	:	
38-59	10439-10447	postgres	
38-60	10447-10448	=	
38-61	10448-10449	#	
38-62	10450-10457	EXPLAIN	
38-63	10458-10459	(	
38-64	10459-10466	BUFFERS	
38-65	10466-10467	,	
38-66	10468-10475	ANALYZE	
38-67	10475-10476	)	
38-68	10477-10483	SELECT	
38-69	10484-10485	*	
38-70	10486-10490	FROM	
38-71	10491-10507	pgbench_accounts	
38-72	10508-10509	a	
38-73	10510-10514	JOIN	
38-74	10515-10531	pgbench_branches	
38-75	10532-10533	b	
38-76	10534-10536	ON	
38-77	10537-10538	(	
38-78	10538-10543	a.bid	
38-79	10543-10544	=	
38-80	10544-10549	b.bid	
38-81	10549-10550	)	
38-82	10551-10556	WHERE	
38-83	10557-10562	a.aid	
38-84	10563-10564	<	
38-85	10565-10571	100000	
38-86	10571-10572	;	

#Text=QUERY PLAN -------------------------------------------------------------------------------------------------------------
39-1	10573-10578	QUERY	
39-2	10579-10583	PLAN	
39-3	10584-10585	-	
39-4	10585-10586	-	
39-5	10586-10587	-	
39-6	10587-10588	-	
39-7	10588-10589	-	
39-8	10589-10590	-	
39-9	10590-10591	-	
39-10	10591-10592	-	
39-11	10592-10593	-	
39-12	10593-10594	-	
39-13	10594-10595	-	
39-14	10595-10596	-	
39-15	10596-10597	-	
39-16	10597-10598	-	
39-17	10598-10599	-	
39-18	10599-10600	-	
39-19	10600-10601	-	
39-20	10601-10602	-	
39-21	10602-10603	-	
39-22	10603-10604	-	
39-23	10604-10605	-	
39-24	10605-10606	-	
39-25	10606-10607	-	
39-26	10607-10608	-	
39-27	10608-10609	-	
39-28	10609-10610	-	
39-29	10610-10611	-	
39-30	10611-10612	-	
39-31	10612-10613	-	
39-32	10613-10614	-	
39-33	10614-10615	-	
39-34	10615-10616	-	
39-35	10616-10617	-	
39-36	10617-10618	-	
39-37	10618-10619	-	
39-38	10619-10620	-	
39-39	10620-10621	-	
39-40	10621-10622	-	
39-41	10622-10623	-	
39-42	10623-10624	-	
39-43	10624-10625	-	
39-44	10625-10626	-	
39-45	10626-10627	-	
39-46	10627-10628	-	
39-47	10628-10629	-	
39-48	10629-10630	-	
39-49	10630-10631	-	
39-50	10631-10632	-	
39-51	10632-10633	-	
39-52	10633-10634	-	
39-53	10634-10635	-	
39-54	10635-10636	-	
39-55	10636-10637	-	
39-56	10637-10638	-	
39-57	10638-10639	-	
39-58	10639-10640	-	
39-59	10640-10641	-	
39-60	10641-10642	-	
39-61	10642-10643	-	
39-62	10643-10644	-	
39-63	10644-10645	-	
39-64	10645-10646	-	
39-65	10646-10647	-	
39-66	10647-10648	-	
39-67	10648-10649	-	
39-68	10649-10650	-	
39-69	10650-10651	-	
39-70	10651-10652	-	
39-71	10652-10653	-	
39-72	10653-10654	-	
39-73	10654-10655	-	
39-74	10655-10656	-	
39-75	10656-10657	-	
39-76	10657-10658	-	
39-77	10658-10659	-	
39-78	10659-10660	-	
39-79	10660-10661	-	
39-80	10661-10662	-	
39-81	10662-10663	-	
39-82	10663-10664	-	
39-83	10664-10665	-	
39-84	10665-10666	-	
39-85	10666-10667	-	
39-86	10667-10668	-	
39-87	10668-10669	-	
39-88	10669-10670	-	
39-89	10670-10671	-	
39-90	10671-10672	-	
39-91	10672-10673	-	
39-92	10673-10674	-	
39-93	10674-10675	-	
39-94	10675-10676	-	
39-95	10676-10677	-	
39-96	10677-10678	-	
39-97	10678-10679	-	
39-98	10679-10680	-	
39-99	10680-10681	-	
39-100	10681-10682	-	
39-101	10682-10683	-	
39-102	10683-10684	-	
39-103	10684-10685	-	
39-104	10685-10686	-	
39-105	10686-10687	-	
39-106	10687-10688	-	
39-107	10688-10689	-	
39-108	10689-10690	-	
39-109	10690-10691	-	
39-110	10691-10692	-	
39-111	10692-10693	-	

#Text=Nested Loop (cost=0.00..4141.00 rows=99999 width=461) (actual time=0.039..56.582 rows=99999 loops=1) Join Filter: (a.bid = b.bid)
40-1	10694-10700	Nested	
40-2	10701-10705	Loop	
40-3	10706-10707	(	
40-4	10707-10711	cost	
40-5	10711-10712	=	
40-6	10712-10716	0.00	
40-7	10716-10717	.	
40-8	10717-10725	.4141.00	
40-9	10726-10730	rows	
40-10	10730-10731	=	
40-11	10731-10736	99999	
40-12	10737-10742	width	
40-13	10742-10743	=	
40-14	10743-10746	461	
40-15	10746-10747	)	
40-16	10748-10749	(	
40-17	10749-10755	actual	
40-18	10756-10760	time	
40-19	10760-10761	=	
40-20	10761-10766	0.039	
40-21	10766-10767	.	
40-22	10767-10774	.56.582	
40-23	10775-10779	rows	
40-24	10779-10780	=	
40-25	10780-10785	99999	
40-26	10786-10791	loops	
40-27	10791-10792	=	
40-28	10792-10793	1	
40-29	10793-10794	)	
40-30	10795-10799	Join	
40-31	10800-10806	Filter	
40-32	10806-10807	:	
40-33	10808-10809	(	
40-34	10809-10814	a.bid	
40-35	10815-10816	=	
40-36	10817-10822	b.bid	
40-37	10822-10823	)	

#Text=Buffers: shared hit=3 read=1638 Seq Scan on pgbench_branches b (cost=0.00..1.01 rows=1 width=364) (actual time=0.025..0.026 rows=1 loops=1) Buffers: shared hit=1
41-1	10824-10831	Buffers	
41-2	10831-10832	:	
41-3	10833-10839	shared	
41-4	10840-10843	hit	
41-5	10843-10844	=	
41-6	10844-10845	3	
41-7	10846-10850	read	
41-8	10850-10851	=	
41-9	10851-10855	1638	
41-10	10856-10859	Seq	
41-11	10860-10864	Scan	
41-12	10865-10867	on	
41-13	10868-10884	pgbench_branches	
41-14	10885-10886	b	
41-15	10887-10888	(	
41-16	10888-10892	cost	
41-17	10892-10893	=	
41-18	10893-10897	0.00	
41-19	10897-10898	.	
41-20	10898-10903	.1.01	
41-21	10904-10908	rows	
41-22	10908-10909	=	
41-23	10909-10910	1	
41-24	10911-10916	width	
41-25	10916-10917	=	
41-26	10917-10920	364	
41-27	10920-10921	)	
41-28	10922-10923	(	
41-29	10923-10929	actual	
41-30	10930-10934	time	
41-31	10934-10935	=	
41-32	10935-10940	0.025	
41-33	10940-10941	.	
41-34	10941-10947	.0.026	
41-35	10948-10952	rows	
41-36	10952-10953	=	
41-37	10953-10954	1	
41-38	10955-10960	loops	
41-39	10960-10961	=	
41-40	10961-10962	1	
41-41	10962-10963	)	
41-42	10964-10971	Buffers	
41-43	10971-10972	:	
41-44	10973-10979	shared	
41-45	10980-10983	hit	
41-46	10983-10984	=	
41-47	10984-10985	1	

#Text=Seq Scan on pgbench_accounts a (cost=0.00..2890.00 rows=99999 width=97) (actual time=0.008..25.752 rows=99999 loops=1) Filter: (aid < 100000)
42-1	10986-10989	Seq	
42-2	10990-10994	Scan	
42-3	10995-10997	on	
42-4	10998-11014	pgbench_accounts	
42-5	11015-11016	a	
42-6	11017-11018	(	
42-7	11018-11022	cost	
42-8	11022-11023	=	
42-9	11023-11027	0.00	
42-10	11027-11028	.	
42-11	11028-11036	.2890.00	
42-12	11037-11041	rows	
42-13	11041-11042	=	
42-14	11042-11047	99999	
42-15	11048-11053	width	
42-16	11053-11054	=	
42-17	11054-11056	97	
42-18	11056-11057	)	
42-19	11058-11059	(	
42-20	11059-11065	actual	
42-21	11066-11070	time	
42-22	11070-11071	=	
42-23	11071-11076	0.008	
42-24	11076-11077	.	
42-25	11077-11084	.25.752	
42-26	11085-11089	rows	
42-27	11089-11090	=	
42-28	11090-11095	99999	
42-29	11096-11101	loops	
42-30	11101-11102	=	
42-31	11102-11103	1	
42-32	11103-11104	)	
42-33	11105-11111	Filter	
42-34	11111-11112	:	
42-35	11113-11114	(	
42-36	11114-11117	aid	
42-37	11118-11119	<	
42-38	11120-11126	100000	
42-39	11126-11127	)	

#Text=Rows Removed by Filter: 1 Buffers: shared hit=2 read=1638 Planning Time: 0.306 ms Execution Time: 61.031 ms (8 rows) Very quickly, you can see that EXPLAIN can be a useful tool for people looking to understand their database performance behaviors.
43-1	11128-11132	Rows	
43-2	11133-11140	Removed	
43-3	11141-11143	by	
43-4	11144-11150	Filter	
43-5	11150-11151	:	
43-6	11152-11153	1	
43-7	11154-11161	Buffers	
43-8	11161-11162	:	
43-9	11163-11169	shared	
43-10	11170-11173	hit	
43-11	11173-11174	=	
43-12	11174-11175	2	
43-13	11176-11180	read	
43-14	11180-11181	=	
43-15	11181-11185	1638	
43-16	11186-11194	Planning	
43-17	11195-11199	Time	
43-18	11199-11200	:	
43-19	11201-11206	0.306	
43-20	11207-11209	ms	
43-21	11210-11219	Execution	
43-22	11220-11224	Time	
43-23	11224-11225	:	
43-24	11226-11232	61.031	
43-25	11233-11235	ms	
43-26	11236-11237	(	
43-27	11237-11238	8	
43-28	11239-11243	rows	
43-29	11243-11244	)	
43-30	11245-11249	Very	
43-31	11250-11257	quickly	
43-32	11257-11258	,	
43-33	11259-11262	you	
43-34	11263-11266	can	
43-35	11267-11270	see	
43-36	11271-11275	that	
43-37	11276-11283	EXPLAIN	
43-38	11284-11287	can	
43-39	11288-11290	be	
43-40	11291-11292	a	
43-41	11293-11299	useful	
43-42	11300-11304	tool	
43-43	11305-11308	for	
43-44	11309-11315	people	
43-45	11316-11323	looking	
43-46	11324-11326	to	
43-47	11327-11337	understand	
43-48	11338-11343	their	
43-49	11344-11352	database	
43-50	11353-11364	performance	
43-51	11365-11374	behaviors	
43-52	11374-11375	.	

#Text=A Quick Review of Scan Types and Joins
44-1	11376-11377	A	
44-2	11378-11383	Quick	
44-3	11384-11390	Review	
44-4	11391-11393	of	
44-5	11394-11398	Scan	
44-6	11399-11404	Types	
44-7	11405-11408	and	
44-8	11409-11414	Joins	

#Text=It’s important to know that every join type and scan type have their time and place.  Some people look for the word “Sequential” scan and immediately jump back in fear, not considering whether it would be worthwhile to access data another.  Take, for example, a table with 2 rows -- it would not make sense to the query planner to scan the index, then go back and retrieve data from the disk when it could just quickly scan the table and pull data out without touching the index.  In this case, and in the case of most other small-ish tables, it would be more efficient to do a sequential scan.  To quickly review the join and scan types that PostgreSQL works with: Scan Types Sequential Scan Basically a brute-force retrieval from disk Scans the whole table Fast for small tables Index Scan Scan all/some rows in an index; look up rows in heap
45-1	11415-11417	It	
45-2	11417-11418	’	
45-3	11418-11419	s	
45-4	11420-11429	important	
45-5	11430-11432	to	
45-6	11433-11437	know	
45-7	11438-11442	that	
45-8	11443-11448	every	
45-9	11449-11453	join	
45-10	11454-11458	type	
45-11	11459-11462	and	
45-12	11463-11467	scan	
45-13	11468-11472	type	
45-14	11473-11477	have	
45-15	11478-11483	their	
45-16	11484-11488	time	
45-17	11489-11492	and	
45-18	11493-11498	place	
45-19	11498-11499	.	
45-20	11500-11501	 	
45-21	11501-11505	Some	
45-22	11506-11512	people	
45-23	11513-11517	look	
45-24	11518-11521	for	
45-25	11522-11525	the	
45-26	11526-11530	word	
45-27	11531-11532	“	
45-28	11532-11542	Sequential	
45-29	11542-11543	”	
45-30	11544-11548	scan	
45-31	11549-11552	and	
45-32	11553-11564	immediately	
45-33	11565-11569	jump	
45-34	11570-11574	back	
45-35	11575-11577	in	
45-36	11578-11582	fear	
45-37	11582-11583	,	
45-38	11584-11587	not	
45-39	11588-11599	considering	
45-40	11600-11607	whether	
45-41	11608-11610	it	
45-42	11611-11616	would	
45-43	11617-11619	be	
45-44	11620-11630	worthwhile	
45-45	11631-11633	to	
45-46	11634-11640	access	
45-47	11641-11645	data	
45-48	11646-11653	another	
45-49	11653-11654	.	
45-50	11655-11656	 	
45-51	11656-11660	Take	
45-52	11660-11661	,	
45-53	11662-11665	for	
45-54	11666-11673	example	
45-55	11673-11674	,	
45-56	11675-11676	a	
45-57	11677-11682	table	
45-58	11683-11687	with	
45-59	11688-11689	2	
45-60	11690-11694	rows	
45-61	11695-11696	-	
45-62	11696-11697	-	
45-63	11698-11700	it	
45-64	11701-11706	would	
45-65	11707-11710	not	
45-66	11711-11715	make	
45-67	11716-11721	sense	
45-68	11722-11724	to	
45-69	11725-11728	the	
45-70	11729-11734	query	
45-71	11735-11742	planner	
45-72	11743-11745	to	
45-73	11746-11750	scan	
45-74	11751-11754	the	
45-75	11755-11760	index	
45-76	11760-11761	,	
45-77	11762-11766	then	
45-78	11767-11769	go	
45-79	11770-11774	back	
45-80	11775-11778	and	
45-81	11779-11787	retrieve	
45-82	11788-11792	data	
45-83	11793-11797	from	
45-84	11798-11801	the	
45-85	11802-11806	disk	
45-86	11807-11811	when	
45-87	11812-11814	it	
45-88	11815-11820	could	
45-89	11821-11825	just	
45-90	11826-11833	quickly	
45-91	11834-11838	scan	
45-92	11839-11842	the	
45-93	11843-11848	table	
45-94	11849-11852	and	
45-95	11853-11857	pull	
45-96	11858-11862	data	
45-97	11863-11866	out	
45-98	11867-11874	without	
45-99	11875-11883	touching	
45-100	11884-11887	the	
45-101	11888-11893	index	
45-102	11893-11894	.	
45-103	11895-11896	 	
45-104	11896-11898	In	
45-105	11899-11903	this	
45-106	11904-11908	case	
45-107	11908-11909	,	
45-108	11910-11913	and	
45-109	11914-11916	in	
45-110	11917-11920	the	
45-111	11921-11925	case	
45-112	11926-11928	of	
45-113	11929-11933	most	
45-114	11934-11939	other	
45-115	11940-11949	small-ish	
45-116	11950-11956	tables	
45-117	11956-11957	,	
45-118	11958-11960	it	
45-119	11961-11966	would	
45-120	11967-11969	be	
45-121	11970-11974	more	
45-122	11975-11984	efficient	
45-123	11985-11987	to	
45-124	11988-11990	do	
45-125	11991-11992	a	
45-126	11993-12003	sequential	
45-127	12004-12008	scan	
45-128	12008-12009	.	
45-129	12010-12011	 	
45-130	12011-12013	To	
45-131	12014-12021	quickly	
45-132	12022-12028	review	
45-133	12029-12032	the	
45-134	12033-12037	join	
45-135	12038-12041	and	
45-136	12042-12046	scan	
45-137	12047-12052	types	
45-138	12053-12057	that	
45-139	12058-12068	PostgreSQL	
45-140	12069-12074	works	
45-141	12075-12079	with	
45-142	12079-12080	:	
45-143	12081-12085	Scan	
45-144	12086-12091	Types	
45-145	12092-12102	Sequential	
45-146	12103-12107	Scan	
45-147	12108-12117	Basically	
45-148	12118-12119	a	
45-149	12120-12131	brute-force	
45-150	12132-12141	retrieval	
45-151	12142-12146	from	
45-152	12147-12151	disk	
45-153	12152-12157	Scans	
45-154	12158-12161	the	
45-155	12162-12167	whole	
45-156	12168-12173	table	
45-157	12174-12178	Fast	
45-158	12179-12182	for	
45-159	12183-12188	small	
45-160	12189-12195	tables	
45-161	12196-12201	Index	
45-162	12202-12206	Scan	
45-163	12207-12211	Scan	
45-164	12212-12215	all	
45-165	12215-12216	/	
45-166	12216-12220	some	
45-167	12221-12225	rows	
45-168	12226-12228	in	
45-169	12229-12231	an	
45-170	12232-12237	index	
45-171	12237-12238	;	
45-172	12239-12243	look	
45-173	12244-12246	up	
45-174	12247-12251	rows	
45-175	12252-12254	in	
45-176	12255-12259	heap	

#Text=Causes random seek, which can be costly for old-school spindle-based disks Faster than a Sequential Scan when extracting a small number of rows for large tables Index Only Scan Scan all/some rows in index No need to lookup rows in the table because the values we want are already stored in the index itself
46-1	12260-12266	Causes	
46-2	12267-12273	random	
46-3	12274-12278	seek	
46-4	12278-12279	,	
46-5	12280-12285	which	
46-6	12286-12289	can	
46-7	12290-12292	be	
46-8	12293-12299	costly	
46-9	12300-12303	for	
46-10	12304-12314	old-school	
46-11	12315-12328	spindle-based	
46-12	12329-12334	disks	
46-13	12335-12341	Faster	
46-14	12342-12346	than	
46-15	12347-12348	a	
46-16	12349-12359	Sequential	
46-17	12360-12364	Scan	
46-18	12365-12369	when	
46-19	12370-12380	extracting	
46-20	12381-12382	a	
46-21	12383-12388	small	
46-22	12389-12395	number	
46-23	12396-12398	of	
46-24	12399-12403	rows	
46-25	12404-12407	for	
46-26	12408-12413	large	
46-27	12414-12420	tables	
46-28	12421-12426	Index	
46-29	12427-12431	Only	
46-30	12432-12436	Scan	
46-31	12437-12441	Scan	
46-32	12442-12445	all	
46-33	12445-12446	/	
46-34	12446-12450	some	
46-35	12451-12455	rows	
46-36	12456-12458	in	
46-37	12459-12464	index	
46-38	12465-12467	No	
46-39	12468-12472	need	
46-40	12473-12475	to	
46-41	12476-12482	lookup	
46-42	12483-12487	rows	
46-43	12488-12490	in	
46-44	12491-12494	the	
46-45	12495-12500	table	
46-46	12501-12508	because	
46-47	12509-12512	the	
46-48	12513-12519	values	
46-49	12520-12522	we	
46-50	12523-12527	want	
46-51	12528-12531	are	
46-52	12532-12539	already	
46-53	12540-12546	stored	
46-54	12547-12549	in	
46-55	12550-12553	the	
46-56	12554-12559	index	
46-57	12560-12566	itself	

#Text=Bitmap Heap Scan Scan index, building a bitmap of pages to visit Then, look up only relevant pages in the table for desired rows Join Types Nested Loops For each row in the outer table, scan for matching rows in the inner table
47-1	12567-12573	Bitmap	
47-2	12574-12578	Heap	
47-3	12579-12583	Scan	
47-4	12584-12588	Scan	
47-5	12589-12594	index	
47-6	12594-12595	,	
47-7	12596-12604	building	
47-8	12605-12606	a	
47-9	12607-12613	bitmap	
47-10	12614-12616	of	
47-11	12617-12622	pages	
47-12	12623-12625	to	
47-13	12626-12631	visit	
47-14	12632-12636	Then	
47-15	12636-12637	,	
47-16	12638-12642	look	
47-17	12643-12645	up	
47-18	12646-12650	only	
47-19	12651-12659	relevant	
47-20	12660-12665	pages	
47-21	12666-12668	in	
47-22	12669-12672	the	
47-23	12673-12678	table	
47-24	12679-12682	for	
47-25	12683-12690	desired	
47-26	12691-12695	rows	
47-27	12696-12700	Join	
47-28	12701-12706	Types	
47-29	12707-12713	Nested	
47-30	12714-12719	Loops	
47-31	12720-12723	For	
47-32	12724-12728	each	
47-33	12729-12732	row	
47-34	12733-12735	in	
47-35	12736-12739	the	
47-36	12740-12745	outer	
47-37	12746-12751	table	
47-38	12751-12752	,	
47-39	12753-12757	scan	
47-40	12758-12761	for	
47-41	12762-12770	matching	
47-42	12771-12775	rows	
47-43	12776-12778	in	
47-44	12779-12782	the	
47-45	12783-12788	inner	
47-46	12789-12794	table	

#Text=Fast to start, best for small tables Merge Join Zipper-operation on _sorted_ data sets Good for large tables High startup cost if an additional sort is required Hash Join Build hash of inner table values, scan outer table for matches Only usable for equality conditions
48-1	12795-12799	Fast	
48-2	12800-12802	to	
48-3	12803-12808	start	
48-4	12808-12809	,	
48-5	12810-12814	best	
48-6	12815-12818	for	
48-7	12819-12824	small	
48-8	12825-12831	tables	
48-9	12832-12837	Merge	
48-10	12838-12842	Join	
48-11	12843-12859	Zipper-operation	
48-12	12860-12862	on	
48-13	12863-12864	_	
48-14	12864-12870	sorted	
48-15	12870-12871	_	
48-16	12872-12876	data	
48-17	12877-12881	sets	
48-18	12882-12886	Good	
48-19	12887-12890	for	
48-20	12891-12896	large	
48-21	12897-12903	tables	
48-22	12904-12908	High	
48-23	12909-12916	startup	
48-24	12917-12921	cost	
48-25	12922-12924	if	
48-26	12925-12927	an	
48-27	12928-12938	additional	
48-28	12939-12943	sort	
48-29	12944-12946	is	
48-30	12947-12955	required	
48-31	12956-12960	Hash	
48-32	12961-12965	Join	
48-33	12966-12971	Build	
48-34	12972-12976	hash	
48-35	12977-12979	of	
48-36	12980-12985	inner	
48-37	12986-12991	table	
48-38	12992-12998	values	
48-39	12998-12999	,	
48-40	13000-13004	scan	
48-41	13005-13010	outer	
48-42	13011-13016	table	
48-43	13017-13020	for	
48-44	13021-13028	matches	
48-45	13029-13033	Only	
48-46	13034-13040	usable	
48-47	13041-13044	for	
48-48	13045-13053	equality	
48-49	13054-13064	conditions	

#Text=High startup cost, but fast execution As we can see, every scan type and join type has its place.  What’s most important is that the query planner has good statistics to work with, as mentioned earlier.
49-1	13065-13069	High	
49-2	13070-13077	startup	
49-3	13078-13082	cost	
49-4	13082-13083	,	
49-5	13084-13087	but	
49-6	13088-13092	fast	
49-7	13093-13102	execution	
49-8	13103-13105	As	
49-9	13106-13108	we	
49-10	13109-13112	can	
49-11	13113-13116	see	
49-12	13116-13117	,	
49-13	13118-13123	every	
49-14	13124-13128	scan	
49-15	13129-13133	type	
49-16	13134-13137	and	
49-17	13138-13142	join	
49-18	13143-13147	type	
49-19	13148-13151	has	
49-20	13152-13155	its	
49-21	13156-13161	place	
49-22	13161-13162	.	
49-23	13163-13164	 	
49-24	13164-13168	What	
49-25	13168-13169	’	
49-26	13169-13170	s	
49-27	13171-13175	most	
49-28	13176-13185	important	
49-29	13186-13188	is	
49-30	13189-13193	that	
49-31	13194-13197	the	
49-32	13198-13203	query	
49-33	13204-13211	planner	
49-34	13212-13215	has	
49-35	13216-13220	good	
49-36	13221-13231	statistics	
49-37	13232-13234	to	
49-38	13235-13239	work	
49-39	13240-13244	with	
49-40	13244-13245	,	
49-41	13246-13248	as	
49-42	13249-13258	mentioned	
49-43	13259-13266	earlier	
49-44	13266-13267	.	

#Text=We’ve only talked about one instance where EXPLAIN helped identify a problem and give an idea of how to solve it.  At EDB Support, we’ve seen many situations where EXPLAIN could help identify things like: Inaccurate statistics leading to poor join/scan choices Maintenance activity (VACUUM and ANALYZE) not aggressive enough Corrupted indexes requiring a REINDEX Index definition v. query mismatch
50-1	13268-13270	We	
50-2	13270-13271	’	
50-3	13271-13273	ve	
50-4	13274-13278	only	
50-5	13279-13285	talked	
50-6	13286-13291	about	
50-7	13292-13295	one	
50-8	13296-13304	instance	
50-9	13305-13310	where	
50-10	13311-13318	EXPLAIN	
50-11	13319-13325	helped	
50-12	13326-13334	identify	
50-13	13335-13336	a	
50-14	13337-13344	problem	
50-15	13345-13348	and	
50-16	13349-13353	give	
50-17	13354-13356	an	
50-18	13357-13361	idea	
50-19	13362-13364	of	
50-20	13365-13368	how	
50-21	13369-13371	to	
50-22	13372-13377	solve	
50-23	13378-13380	it	
50-24	13380-13381	.	
50-25	13382-13383	 	
50-26	13383-13385	At	
50-27	13386-13389	EDB	
50-28	13390-13397	Support	
50-29	13397-13398	,	
50-30	13399-13401	we	
50-31	13401-13402	’	
50-32	13402-13404	ve	
50-33	13405-13409	seen	
50-34	13410-13414	many	
50-35	13415-13425	situations	
50-36	13426-13431	where	
50-37	13432-13439	EXPLAIN	
50-38	13440-13445	could	
50-39	13446-13450	help	
50-40	13451-13459	identify	
50-41	13460-13466	things	
50-42	13467-13471	like	
50-43	13471-13472	:	
50-44	13473-13483	Inaccurate	
50-45	13484-13494	statistics	
50-46	13495-13502	leading	
50-47	13503-13505	to	
50-48	13506-13510	poor	
50-49	13511-13515	join	
50-50	13515-13516	/	
50-51	13516-13520	scan	
50-52	13521-13528	choices	
50-53	13529-13540	Maintenance	
50-54	13541-13549	activity	
50-55	13550-13551	(	
50-56	13551-13557	VACUUM	
50-57	13558-13561	and	
50-58	13562-13569	ANALYZE	
50-59	13569-13570	)	
50-60	13571-13574	not	
50-61	13575-13585	aggressive	
50-62	13586-13592	enough	
50-63	13593-13602	Corrupted	
50-64	13603-13610	indexes	
50-65	13611-13620	requiring	
50-66	13621-13622	a	
50-67	13623-13630	REINDEX	
50-68	13631-13636	Index	
50-69	13637-13647	definition	
50-70	13648-13649	v	
50-71	13649-13650	.	
50-72	13651-13656	query	
50-73	13657-13665	mismatch	

#Text=work_mem being set too low, preventing in-memory sorts and joins Poor performance due to join order listing when writing a query Improper ORM configuration EXPLAIN is certainly one of the most invaluable tools for anyone working with PostgreSQL, and using it well will save you lots of time!
51-1	13666-13674	work_mem	
51-2	13675-13680	being	
51-3	13681-13684	set	
51-4	13685-13688	too	
51-5	13689-13692	low	
51-6	13692-13693	,	
51-7	13694-13704	preventing	
51-8	13705-13714	in-memory	
51-9	13715-13720	sorts	
51-10	13721-13724	and	
51-11	13725-13730	joins	
51-12	13731-13735	Poor	
51-13	13736-13747	performance	
51-14	13748-13751	due	
51-15	13752-13754	to	
51-16	13755-13759	join	
51-17	13760-13765	order	
51-18	13766-13773	listing	
51-19	13774-13778	when	
51-20	13779-13786	writing	
51-21	13787-13788	a	
51-22	13789-13794	query	
51-23	13795-13803	Improper	
51-24	13804-13807	ORM	
51-25	13808-13821	configuration	
51-26	13822-13829	EXPLAIN	
51-27	13830-13832	is	
51-28	13833-13842	certainly	
51-29	13843-13846	one	
51-30	13847-13849	of	
51-31	13850-13853	the	
51-32	13854-13858	most	
51-33	13859-13869	invaluable	
51-34	13870-13875	tools	
51-35	13876-13879	for	
51-36	13880-13886	anyone	
51-37	13887-13894	working	
51-38	13895-13899	with	
51-39	13900-13910	PostgreSQL	
51-40	13910-13911	,	
51-41	13912-13915	and	
51-42	13916-13921	using	
51-43	13922-13924	it	
51-44	13925-13929	well	
51-45	13930-13934	will	
51-46	13935-13939	save	
51-47	13940-13943	you	
51-48	13944-13948	lots	
51-49	13949-13951	of	
51-50	13952-13956	time	
51-51	13956-13957	!	

#Text=Join Postgres Pulse Live! We make use of the problems we solve and the conversations we have in helping people with Postgres, and this was another example of that effort in motion.  EXPLAIN and the query planner doesn’t start and stop with what we’ve outlined here, so if you have other questions, we’re here for you.  You can find all of our blog and YouTube series here, and you can always join us for our next session.
52-1	13958-13962	Join	
52-2	13963-13971	Postgres	
52-3	13972-13977	Pulse	
52-4	13978-13982	Live	
52-5	13982-13983	!	
52-6	13984-13986	We	
52-7	13987-13991	make	
52-8	13992-13995	use	
52-9	13996-13998	of	
52-10	13999-14002	the	
52-11	14003-14011	problems	
52-12	14012-14014	we	
52-13	14015-14020	solve	
52-14	14021-14024	and	
52-15	14025-14028	the	
52-16	14029-14042	conversations	
52-17	14043-14045	we	
52-18	14046-14050	have	
52-19	14051-14053	in	
52-20	14054-14061	helping	
52-21	14062-14068	people	
52-22	14069-14073	with	
52-23	14074-14082	Postgres	
52-24	14082-14083	,	
52-25	14084-14087	and	
52-26	14088-14092	this	
52-27	14093-14096	was	
52-28	14097-14104	another	
52-29	14105-14112	example	
52-30	14113-14115	of	
52-31	14116-14120	that	
52-32	14121-14127	effort	
52-33	14128-14130	in	
52-34	14131-14137	motion	
52-35	14137-14138	.	
52-36	14139-14140	 	
52-37	14140-14147	EXPLAIN	
52-38	14148-14151	and	
52-39	14152-14155	the	
52-40	14156-14161	query	
52-41	14162-14169	planner	
52-42	14170-14175	doesn	
52-43	14175-14176	’	
52-44	14176-14177	t	
52-45	14178-14183	start	
52-46	14184-14187	and	
52-47	14188-14192	stop	
52-48	14193-14197	with	
52-49	14198-14202	what	
52-50	14203-14205	we	
52-51	14205-14206	’	
52-52	14206-14208	ve	
52-53	14209-14217	outlined	
52-54	14218-14222	here	
52-55	14222-14223	,	
52-56	14224-14226	so	
52-57	14227-14229	if	
52-58	14230-14233	you	
52-59	14234-14238	have	
52-60	14239-14244	other	
52-61	14245-14254	questions	
52-62	14254-14255	,	
52-63	14256-14258	we	
52-64	14258-14259	’	
52-65	14259-14261	re	
52-66	14262-14266	here	
52-67	14267-14270	for	
52-68	14271-14274	you	
52-69	14274-14275	.	
52-70	14276-14277	 	
52-71	14277-14280	You	
52-72	14281-14284	can	
52-73	14285-14289	find	
52-74	14290-14293	all	
52-75	14294-14296	of	
52-76	14297-14300	our	
52-77	14301-14305	blog	
52-78	14306-14309	and	
52-79	14310-14317	YouTube	
52-80	14318-14324	series	
52-81	14325-14329	here	
52-82	14329-14330	,	
52-83	14331-14334	and	
52-84	14335-14338	you	
52-85	14339-14342	can	
52-86	14343-14349	always	
52-87	14350-14354	join	
52-88	14355-14357	us	
52-89	14358-14361	for	
52-90	14362-14365	our	
52-91	14366-14370	next	
52-92	14371-14378	session	
52-93	14378-14379	.	

#Text=Join us on Monday, May 4th, for our next Pulse Live Session!  We’ll dive into this week’s questions and quagmires around EXPLAIN use, as well as take questions from anyone who participates.  You can ask your questions via email at postgrespulse@enterprisedb.com, hashtag on Twitter, or live during the event right here. Richard Yen Richard is a Senior Support Engineer at EnterpriseDB and supports the entire suite of EnterpriseDB's products. Prior to joining EnterpriseDB, Richard worked as a database engineer and web developer, functioning primarily in operations with a focus on scalability, performance, and rec ...
53-1	14380-14384	Join	
53-2	14385-14387	us	
53-3	14388-14390	on	
53-4	14391-14397	Monday	
53-5	14397-14398	,	
53-6	14399-14402	May	
53-7	14403-14406	4th	
53-8	14406-14407	,	
53-9	14408-14411	for	
53-10	14412-14415	our	
53-11	14416-14420	next	
53-12	14421-14426	Pulse	
53-13	14427-14431	Live	
53-14	14432-14439	Session	
53-15	14439-14440	!	
53-16	14441-14442	 	
53-17	14442-14444	We	
53-18	14444-14445	’	
53-19	14445-14447	ll	
53-20	14448-14452	dive	
53-21	14453-14457	into	
53-22	14458-14462	this	
53-23	14463-14467	week	
53-24	14467-14468	’	
53-25	14468-14469	s	
53-26	14470-14479	questions	
53-27	14480-14483	and	
53-28	14484-14493	quagmires	
53-29	14494-14500	around	
53-30	14501-14508	EXPLAIN	
53-31	14509-14512	use	
53-32	14512-14513	,	
53-33	14514-14516	as	
53-34	14517-14521	well	
53-35	14522-14524	as	
53-36	14525-14529	take	
53-37	14530-14539	questions	
53-38	14540-14544	from	
53-39	14545-14551	anyone	
53-40	14552-14555	who	
53-41	14556-14568	participates	
53-42	14568-14569	.	
53-43	14570-14571	 	
53-44	14571-14574	You	
53-45	14575-14578	can	
53-46	14579-14582	ask	
53-47	14583-14587	your	
53-48	14588-14597	questions	
53-49	14598-14601	via	
53-50	14602-14607	email	
53-51	14608-14610	at	
53-52	14611-14624	postgrespulse	
53-53	14624-14625	@	
53-54	14625-14641	enterprisedb.com	
53-55	14641-14642	,	
53-56	14643-14650	hashtag	
53-57	14651-14653	on	
53-58	14654-14661	Twitter	
53-59	14661-14662	,	
53-60	14663-14665	or	
53-61	14666-14670	live	
53-62	14671-14677	during	
53-63	14678-14681	the	
53-64	14682-14687	event	
53-65	14688-14693	right	
53-66	14694-14698	here	
53-67	14698-14699	.	
53-68	14700-14707	Richard	
53-69	14708-14711	Yen	
53-70	14712-14719	Richard	
53-71	14720-14722	is	
53-72	14723-14724	a	
53-73	14725-14731	Senior	
53-74	14732-14739	Support	
53-75	14740-14748	Engineer	
53-76	14749-14751	at	
53-77	14752-14764	EnterpriseDB	
53-78	14765-14768	and	
53-79	14769-14777	supports	
53-80	14778-14781	the	
53-81	14782-14788	entire	
53-82	14789-14794	suite	
53-83	14795-14797	of	
53-84	14798-14812	EnterpriseDB's	
53-85	14813-14821	products	
53-86	14821-14822	.	
53-87	14822-14823	 	
53-88	14823-14828	Prior	
53-89	14829-14831	to	
53-90	14832-14839	joining	
53-91	14840-14852	EnterpriseDB	
53-92	14852-14853	,	
53-93	14854-14861	Richard	
53-94	14862-14868	worked	
53-95	14869-14871	as	
53-96	14872-14873	a	
53-97	14874-14882	database	
53-98	14883-14891	engineer	
53-99	14892-14895	and	
53-100	14896-14899	web	
53-101	14900-14909	developer	
53-102	14909-14910	,	
53-103	14911-14922	functioning	
53-104	14923-14932	primarily	
53-105	14933-14935	in	
53-106	14936-14946	operations	
53-107	14947-14951	with	
53-108	14952-14953	a	
53-109	14954-14959	focus	
53-110	14960-14962	on	
53-111	14963-14974	scalability	
53-112	14974-14975	,	
53-113	14976-14987	performance	
53-114	14987-14988	,	
53-115	14989-14992	and	
53-116	14993-14996	rec	
53-117	14997-14998	.	
53-118	14998-14999	.	
53-119	14999-15000	.	

#Text=Popular Posts Connecting PostgreSQL using psql and pgAdmin How to use PostgreSQL with Django Microsoft SQL Server (MSSQL) vs. PostgreSQL Comparison in Details - What are the Differences? [2020]
54-1	15001-15008	Popular	
54-2	15009-15014	Posts	
54-3	15015-15025	Connecting	
54-4	15026-15036	PostgreSQL	
54-5	15037-15042	using	
54-6	15043-15047	psql	
54-7	15048-15051	and	
54-8	15052-15059	pgAdmin	
54-9	15060-15063	How	
54-10	15064-15066	to	
54-11	15067-15070	use	
54-12	15071-15081	PostgreSQL	
54-13	15082-15086	with	
54-14	15087-15093	Django	
54-15	15094-15103	Microsoft	
54-16	15104-15107	SQL	
54-17	15108-15114	Server	
54-18	15115-15116	(	
54-19	15116-15121	MSSQL	
54-20	15121-15122	)	
54-21	15123-15125	vs	
54-22	15125-15126	.	
54-23	15127-15137	PostgreSQL	
54-24	15138-15148	Comparison	
54-25	15149-15151	in	
54-26	15152-15159	Details	
54-27	15160-15161	-	
54-28	15162-15166	What	
54-29	15167-15170	are	
54-30	15171-15174	the	
54-31	15175-15186	Differences	
54-32	15186-15187	?	
54-33	15188-15189	[	
54-34	15189-15193	2020	
54-35	15193-15194	]	

#Text=10 Examples of PostgreSQL Stored Procedures How to Install Postgres on Docker Ready to take the next step with PostgreSQL? Contact Us Barrio main menu Why EDB? Use Cases Oracle Migration Hybrid Cloud High Availability
55-1	15195-15197	10	
55-2	15198-15206	Examples	
55-3	15207-15209	of	
55-4	15210-15220	PostgreSQL	
55-5	15221-15227	Stored	
55-6	15228-15238	Procedures	
55-7	15239-15242	How	
55-8	15243-15245	to	
55-9	15246-15253	Install	
55-10	15254-15262	Postgres	
55-11	15263-15265	on	
55-12	15266-15272	Docker	
55-13	15273-15278	Ready	
55-14	15279-15281	to	
55-15	15282-15286	take	
55-16	15287-15290	the	
55-17	15291-15295	next	
55-18	15296-15300	step	
55-19	15301-15305	with	
55-20	15306-15316	PostgreSQL	
55-21	15316-15317	?	
55-22	15318-15325	Contact	
55-23	15326-15328	Us	
55-24	15329-15335	Barrio	
55-25	15336-15340	main	
55-26	15341-15345	menu	
55-27	15346-15349	Why	
55-28	15350-15353	EDB	
55-29	15353-15354	?	
55-30	15355-15358	Use	
55-31	15359-15364	Cases	
55-32	15365-15371	Oracle	
55-33	15372-15381	Migration	
55-34	15382-15388	Hybrid	
55-35	15389-15394	Cloud	
55-36	15395-15399	High	
55-37	15400-15412	Availability	

#Text=Solutions for IT Professionals Database Architects Developers Database Admins Products Databases EDB Postgres Advanced Server PostgreSQL Tools Postgres Enterprise Manager Backup and Recovery Failover Manager
56-1	15413-15422	Solutions	
56-2	15423-15426	for	
56-3	15427-15429	IT	
56-4	15430-15443	Professionals	
56-5	15444-15452	Database	
56-6	15453-15463	Architects	
56-7	15464-15474	Developers	
56-8	15475-15483	Database	
56-9	15484-15490	Admins	
56-10	15491-15499	Products	
56-11	15500-15509	Databases	
56-12	15510-15513	EDB	
56-13	15514-15522	Postgres	
56-14	15523-15531	Advanced	
56-15	15532-15538	Server	
56-16	15539-15549	PostgreSQL	
56-17	15550-15555	Tools	
56-18	15556-15564	Postgres	
56-19	15565-15575	Enterprise	
56-20	15576-15583	Manager	
56-21	15584-15590	Backup	
56-22	15591-15594	and	
56-23	15595-15603	Recovery	
56-24	15604-15612	Failover	
56-25	15613-15620	Manager	

#Text=Open Source Projects Cloud Native PostgreSQL Migration Portal Migration Toolkit Replication Services Services Overview Training Getting Started PostgreSQL Optimization Enterprise Strategy Custom Services Support
57-1	15621-15625	Open	
57-2	15626-15632	Source	
57-3	15633-15641	Projects	
57-4	15642-15647	Cloud	
57-5	15648-15654	Native	
57-6	15655-15665	PostgreSQL	
57-7	15666-15675	Migration	
57-8	15676-15682	Portal	
57-9	15683-15692	Migration	
57-10	15693-15700	Toolkit	
57-11	15701-15712	Replication	
57-12	15713-15721	Services	
57-13	15722-15730	Services	
57-14	15731-15739	Overview	
57-15	15740-15748	Training	
57-16	15749-15756	Getting	
57-17	15757-15764	Started	
57-18	15765-15775	PostgreSQL	
57-19	15776-15788	Optimization	
57-20	15789-15799	Enterprise	
57-21	15800-15808	Strategy	
57-22	15809-15815	Custom	
57-23	15816-15824	Services	
57-24	15825-15832	Support	

#Text=Customer Support Portal Support Overview PostgreSQL Technical Support Remote DBA Service Cloud DBA Service Technical Account Management Resources Docs Blog Webinars PostgreSQL Tutorials Training
58-1	15833-15841	Customer	
58-2	15842-15849	Support	
58-3	15850-15856	Portal	
58-4	15857-15864	Support	
58-5	15865-15873	Overview	
58-6	15874-15884	PostgreSQL	
58-7	15885-15894	Technical	
58-8	15895-15902	Support	
58-9	15903-15909	Remote	
58-10	15910-15913	DBA	
58-11	15914-15921	Service	
58-12	15922-15927	Cloud	
58-13	15928-15931	DBA	
58-14	15932-15939	Service	
58-15	15940-15949	Technical	
58-16	15950-15957	Account	
58-17	15958-15968	Management	
58-18	15969-15978	Resources	
58-19	15979-15983	Docs	
58-20	15984-15988	Blog	
58-21	15989-15997	Webinars	
58-22	15998-16008	PostgreSQL	
58-23	16009-16018	Tutorials	
58-24	16019-16027	Training	

#Text=Partners White Papers Customer Stories Product Compatibility Plans Company About EDB PostgreSQL Contributions Careers Events Press Releases Media Coverage Customers Follow Us
59-1	16028-16036	Partners	
59-2	16037-16042	White	
59-3	16043-16049	Papers	
59-4	16050-16058	Customer	
59-5	16059-16066	Stories	
59-6	16067-16074	Product	
59-7	16075-16088	Compatibility	
59-8	16089-16094	Plans	
59-9	16095-16102	Company	
59-10	16103-16108	About	
59-11	16109-16112	EDB	
59-12	16113-16123	PostgreSQL	
59-13	16124-16137	Contributions	
59-14	16138-16145	Careers	
59-15	16146-16152	Events	
59-16	16153-16158	Press	
59-17	16159-16167	Releases	
59-18	16168-16173	Media	
59-19	16174-16182	Coverage	
59-20	16183-16192	Customers	
59-21	16193-16199	Follow	
59-22	16200-16202	Us	

#Text=Twitter LinkedIn Facebook YouTube Barrio Footer Secondary Menu © 2020 EDB GDPR Privacy Policy Terms of Use Trademarks
60-1	16203-16210	Twitter	
60-2	16211-16219	LinkedIn	
60-3	16220-16228	Facebook	
60-4	16229-16236	YouTube	
60-5	16237-16243	Barrio	
60-6	16244-16250	Footer	
60-7	16251-16260	Secondary	
60-8	16261-16265	Menu	
60-9	16266-16267	©	
60-10	16268-16272	2020	
60-11	16273-16276	EDB	
60-12	16277-16281	GDPR	
60-13	16282-16289	Privacy	
60-14	16290-16296	Policy	
60-15	16297-16302	Terms	
60-16	16303-16305	of	
60-17	16306-16309	Use	
60-18	16310-16320	Trademarks	
