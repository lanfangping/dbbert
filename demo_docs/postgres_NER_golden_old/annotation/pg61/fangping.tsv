#FORMAT=WebAnno TSV 3.3


#Text=Performance Guidelines | GitLab GitLab Docs GitLab.com (13.11-pre) GitLab.com (13.11-pre) 13.10 13.9 13.8
1-1	0-11	Performance	
1-2	12-22	Guidelines	
1-3	23-24	|	
1-4	25-31	GitLab	
1-5	32-38	GitLab	
1-6	39-43	Docs	
1-7	44-54	GitLab.com	
1-8	55-56	(	
1-9	56-61	13.11	
1-10	61-62	-	
1-11	62-65	pre	
1-12	65-66	)	
1-13	67-77	GitLab.com	
1-14	78-79	(	
1-15	79-84	13.11	
1-16	84-85	-	
1-17	85-88	pre	
1-18	88-89	)	
1-19	90-95	13.10	
1-20	96-100	13.9	
1-21	101-105	13.8	

#Text=12.10 11.11 Archives Get free trial GitLab Docs Subscriptions GitLab.com subscriptions Storage usage quota Self-managed subscriptions Activate Enterprise Edition Features available to Starter and Bronze subscribers
2-1	106-111	12.10	
2-2	112-117	11.11	
2-3	118-126	Archives	
2-4	127-130	Get	
2-5	131-135	free	
2-6	136-141	trial	
2-7	142-148	GitLab	
2-8	149-153	Docs	
2-9	154-167	Subscriptions	
2-10	168-178	GitLab.com	
2-11	179-192	subscriptions	
2-12	193-200	Storage	
2-13	201-206	usage	
2-14	207-212	quota	
2-15	213-225	Self-managed	
2-16	226-239	subscriptions	
2-17	240-248	Activate	
2-18	249-259	Enterprise	
2-19	260-267	Edition	
2-20	268-276	Features	
2-21	277-286	available	
2-22	287-289	to	
2-23	290-297	Starter	
2-24	298-301	and	
2-25	302-308	Bronze	
2-26	309-320	subscribers	

#Text=Installation Requirements Omnibus packages Kubernetes Docker From source Azure Google Cloud Platform (GCP) Amazon Web Services (AWS) Administration Reference Architectures Up to 1,000 users
3-1	321-333	Installation	
3-2	334-346	Requirements	
3-3	347-354	Omnibus	
3-4	355-363	packages	
3-5	364-374	Kubernetes	
3-6	375-381	Docker	
3-7	382-386	From	
3-8	387-393	source	
3-9	394-399	Azure	
3-10	400-406	Google	
3-11	407-412	Cloud	
3-12	413-421	Platform	
3-13	422-423	(	
3-14	423-426	GCP	
3-15	426-427	)	
3-16	428-434	Amazon	
3-17	435-438	Web	
3-18	439-447	Services	
3-19	448-449	(	
3-20	449-452	AWS	
3-21	452-453	)	
3-22	454-468	Administration	
3-23	469-478	Reference	
3-24	479-492	Architectures	
3-25	493-495	Up	
3-26	496-498	to	
3-27	499-504	1,000	
3-28	505-510	users	

#Text=Up to 2,000 users Up to 3,000 users Up to 5,000 users Up to 10,000 users Up to 25,000 users Up to 50,000 users Troubleshooting Authentication and authorization Atlassian Crowd Atlassian
4-1	511-513	Up	
4-2	514-516	to	
4-3	517-522	2,000	
4-4	523-528	users	
4-5	529-531	Up	
4-6	532-534	to	
4-7	535-540	3,000	
4-8	541-546	users	
4-9	547-549	Up	
4-10	550-552	to	
4-11	553-558	5,000	
4-12	559-564	users	
4-13	565-567	Up	
4-14	568-570	to	
4-15	571-577	10,000	
4-16	578-583	users	
4-17	584-586	Up	
4-18	587-589	to	
4-19	590-596	25,000	
4-20	597-602	users	
4-21	603-605	Up	
4-22	606-608	to	
4-23	609-615	50,000	
4-24	616-621	users	
4-25	622-637	Troubleshooting	
4-26	638-652	Authentication	
4-27	653-656	and	
4-28	657-670	authorization	
4-29	671-680	Atlassian	
4-30	681-686	Crowd	
4-31	687-696	Atlassian	

#Text=Auth0 Authentiq AWS Cognito Azure Bitbucket Cloud CAS Facebook Generic OAuth2 GitHub GitLab.com Google JWT Kerberos
5-1	697-702	Auth0	
5-2	703-712	Authentiq	
5-3	713-716	AWS	
5-4	717-724	Cognito	
5-5	725-730	Azure	
5-6	731-740	Bitbucket	
5-7	741-746	Cloud	
5-8	747-750	CAS	
5-9	751-759	Facebook	
5-10	760-767	Generic	
5-11	768-774	OAuth2	
5-12	775-781	GitHub	
5-13	782-792	GitLab.com	
5-14	793-799	Google	
5-15	800-803	JWT	
5-16	804-812	Kerberos	

#Text=LDAP LDAP (Google Secure) LDAP Troubleshooting OAuth service provider Okta OmniAuth OpenID Connect OmniAuth OpenID Connect identity Salesforce SAML
6-1	813-817	LDAP	
6-2	818-822	LDAP	
6-3	823-824	(	
6-4	824-830	Google	
6-5	831-837	Secure	
6-6	837-838	)	
6-7	839-843	LDAP	
6-8	844-859	Troubleshooting	
6-9	860-865	OAuth	
6-10	866-873	service	
6-11	874-882	provider	
6-12	883-887	Okta	
6-13	888-896	OmniAuth	
6-14	897-903	OpenID	
6-15	904-911	Connect	
6-16	912-920	OmniAuth	
6-17	921-927	OpenID	
6-18	928-935	Connect	
6-19	936-944	identity	
6-20	945-955	Salesforce	
6-21	956-960	SAML	

#Text=Smartcard Twitter Vault Configuration and Admin Area Admin Area settings Appearance Authentication CI/CD Custom instance-level project templates Diff limits Email External pipeline validation Feature flags
7-1	961-970	Smartcard	
7-2	971-978	Twitter	
7-3	979-984	Vault	
7-4	985-998	Configuration	
7-5	999-1002	and	
7-6	1003-1008	Admin	
7-7	1009-1013	Area	
7-8	1014-1019	Admin	
7-9	1020-1024	Area	
7-10	1025-1033	settings	
7-11	1034-1044	Appearance	
7-12	1045-1059	Authentication	
7-13	1060-1062	CI	
7-14	1062-1063	/	
7-15	1063-1065	CD	
7-16	1066-1072	Custom	
7-17	1073-1087	instance-level	
7-18	1088-1095	project	
7-19	1096-1105	templates	
7-20	1106-1110	Diff	
7-21	1111-1117	limits	
7-22	1118-1123	Email	
7-23	1124-1132	External	
7-24	1133-1141	pipeline	
7-25	1142-1152	validation	
7-26	1153-1160	Feature	
7-27	1161-1166	flags	

#Text=Geo nodes Git LFS administration GitLab Pages Health Check Incoming email Job artifacts Job logs Labels Log system Maintenance Mode Rate limits on issue creation Rate limits on note creation Reply by email
8-1	1167-1170	Geo	
8-2	1171-1176	nodes	
8-3	1177-1180	Git	
8-4	1181-1184	LFS	
8-5	1185-1199	administration	
8-6	1200-1206	GitLab	
8-7	1207-1212	Pages	
8-8	1213-1219	Health	
8-9	1220-1225	Check	
8-10	1226-1234	Incoming	
8-11	1235-1240	email	
8-12	1241-1244	Job	
8-13	1245-1254	artifacts	
8-14	1255-1258	Job	
8-15	1259-1263	logs	
8-16	1264-1270	Labels	
8-17	1271-1274	Log	
8-18	1275-1281	system	
8-19	1282-1293	Maintenance	
8-20	1294-1298	Mode	
8-21	1299-1303	Rate	
8-22	1304-1310	limits	
8-23	1311-1313	on	
8-24	1314-1319	issue	
8-25	1320-1328	creation	
8-26	1329-1333	Rate	
8-27	1334-1340	limits	
8-28	1341-1343	on	
8-29	1344-1348	note	
8-30	1349-1357	creation	
8-31	1358-1363	Reply	
8-32	1364-1366	by	
8-33	1367-1372	email	

#Text=Repository checks Repository size Sign-in restrictions Sign-up restrictions System Hooks Timezone Uploads User Cohorts Security Password storage Custom password length limits Generated passwords and integrated authentication
9-1	1373-1383	Repository	
9-2	1384-1390	checks	
9-3	1391-1401	Repository	
9-4	1402-1406	size	
9-5	1407-1414	Sign-in	
9-6	1415-1427	restrictions	
9-7	1428-1435	Sign-up	
9-8	1436-1448	restrictions	
9-9	1449-1455	System	
9-10	1456-1461	Hooks	
9-11	1462-1470	Timezone	
9-12	1471-1478	Uploads	
9-13	1479-1483	User	
9-14	1484-1491	Cohorts	
9-15	1492-1500	Security	
9-16	1501-1509	Password	
9-17	1510-1517	storage	
9-18	1518-1524	Custom	
9-19	1525-1533	password	
9-20	1534-1540	length	
9-21	1541-1547	limits	
9-22	1548-1557	Generated	
9-23	1558-1567	passwords	
9-24	1568-1571	and	
9-25	1572-1582	integrated	
9-26	1583-1597	authentication	

#Text=Credentials inventory Limits on SSH keys Rate limits Webhooks Information exclusivity Reset user password Unlock a user Unknown sign-ins, email notification Users pending approval User file uploads
10-1	1598-1609	Credentials	
10-2	1610-1619	inventory	
10-3	1620-1626	Limits	
10-4	1627-1629	on	
10-5	1630-1633	SSH	
10-6	1634-1638	keys	
10-7	1639-1643	Rate	
10-8	1644-1650	limits	
10-9	1651-1659	Webhooks	
10-10	1660-1671	Information	
10-11	1672-1683	exclusivity	
10-12	1684-1689	Reset	
10-13	1690-1694	user	
10-14	1695-1703	password	
10-15	1704-1710	Unlock	
10-16	1711-1712	a	
10-17	1713-1717	user	
10-18	1718-1725	Unknown	
10-19	1726-1734	sign-ins	
10-20	1734-1735	,	
10-21	1736-1741	email	
10-22	1742-1754	notification	
10-23	1755-1760	Users	
10-24	1761-1768	pending	
10-25	1769-1777	approval	
10-26	1778-1782	User	
10-27	1783-1787	file	
10-28	1788-1795	uploads	

#Text=Manage the CRIME vulnerability Enforce two-factor authentication (2FA) User email confirmation Security of running jobs Proxying assets CI/CD variables Token overview Abuse reports Activate and deactivate users Create users
11-1	1796-1802	Manage	
11-2	1803-1806	the	
11-3	1807-1812	CRIME	
11-4	1813-1826	vulnerability	
11-5	1827-1834	Enforce	
11-6	1835-1845	two-factor	
11-7	1846-1860	authentication	
11-8	1861-1862	(	
11-9	1862-1865	2FA	
11-10	1865-1866	)	
11-11	1867-1871	User	
11-12	1872-1877	email	
11-13	1878-1890	confirmation	
11-14	1891-1899	Security	
11-15	1900-1902	of	
11-16	1903-1910	running	
11-17	1911-1915	jobs	
11-18	1916-1924	Proxying	
11-19	1925-1931	assets	
11-20	1932-1934	CI	
11-21	1934-1935	/	
11-22	1935-1937	CD	
11-23	1938-1947	variables	
11-24	1948-1953	Token	
11-25	1954-1962	overview	
11-26	1963-1968	Abuse	
11-27	1969-1976	reports	
11-28	1977-1985	Activate	
11-29	1986-1989	and	
11-30	1990-2000	deactivate	
11-31	2001-2006	users	
11-32	2007-2013	Create	
11-33	2014-2019	users	

#Text=Analytics Audit events Audit reports Block and unblock users Broadcast messages Consul Compliance features Email from GitLab Global user settings Instance Review Invalidate Markdown cache Issue closing pattern
12-1	2020-2029	Analytics	
12-2	2030-2035	Audit	
12-3	2036-2042	events	
12-4	2043-2048	Audit	
12-5	2049-2056	reports	
12-6	2057-2062	Block	
12-7	2063-2066	and	
12-8	2067-2074	unblock	
12-9	2075-2080	users	
12-10	2081-2090	Broadcast	
12-11	2091-2099	messages	
12-12	2100-2106	Consul	
12-13	2107-2117	Compliance	
12-14	2118-2126	features	
12-15	2127-2132	Email	
12-16	2133-2137	from	
12-17	2138-2144	GitLab	
12-18	2145-2151	Global	
12-19	2152-2156	user	
12-20	2157-2165	settings	
12-21	2166-2174	Instance	
12-22	2175-2181	Review	
12-23	2182-2192	Invalidate	
12-24	2193-2201	Markdown	
12-25	2202-2207	cache	
12-26	2208-2213	Issue	
12-27	2214-2221	closing	
12-28	2222-2229	pattern	

#Text=PostgreSQL PgBouncer Replication and failover External database service Load balancer NFS Redis Sidekiq Kubernetes Agent Server Repository storage Repository storage types
13-1	2230-2240	PostgreSQL	
13-2	2241-2250	PgBouncer	
13-3	2251-2262	Replication	
13-4	2263-2266	and	
13-5	2267-2275	failover	
13-6	2276-2284	External	
13-7	2285-2293	database	
13-8	2294-2301	service	
13-9	2302-2306	Load	
13-10	2307-2315	balancer	
13-11	2316-2319	NFS	
13-12	2320-2325	Redis	
13-13	2326-2333	Sidekiq	
13-14	2334-2344	Kubernetes	
13-15	2345-2350	Agent	
13-16	2351-2357	Server	
13-17	2358-2368	Repository	
13-18	2369-2376	storage	
13-19	2377-2387	Repository	
13-20	2388-2395	storage	
13-21	2396-2401	types	

#Text=Gitaly and Gitaly Cluster Configure Gitaly Configure Gitaly Cluster Gitaly reference Gitaly timeouts Metrics Configure GitLab Configure Grafana GitHub imports
14-1	2402-2408	Gitaly	
14-2	2409-2412	and	
14-3	2413-2419	Gitaly	
14-4	2420-2427	Cluster	
14-5	2428-2437	Configure	
14-6	2438-2444	Gitaly	
14-7	2445-2454	Configure	
14-8	2455-2461	Gitaly	
14-9	2462-2469	Cluster	
14-10	2470-2476	Gitaly	
14-11	2477-2486	reference	
14-12	2487-2493	Gitaly	
14-13	2494-2502	timeouts	
14-14	2503-2510	Metrics	
14-15	2511-2520	Configure	
14-16	2521-2527	GitLab	
14-17	2528-2537	Configure	
14-18	2538-2545	Grafana	
14-19	2546-2552	GitHub	
14-20	2553-2560	imports	

#Text=GitLab exporter GitLab Prometheus metrics GitLab self monitoring project IP allowlist endpoints Node exporter PGBouncer exporter PostgreSQL server exporter Prometheus Performance bar Performance monitoring
15-1	2561-2567	GitLab	
15-2	2568-2576	exporter	
15-3	2577-2583	GitLab	
15-4	2584-2594	Prometheus	
15-5	2595-2602	metrics	
15-6	2603-2609	GitLab	
15-7	2610-2614	self	
15-8	2615-2625	monitoring	
15-9	2626-2633	project	
15-10	2634-2636	IP	
15-11	2637-2646	allowlist	
15-12	2647-2656	endpoints	
15-13	2657-2661	Node	
15-14	2662-2670	exporter	
15-15	2671-2680	PGBouncer	
15-16	2681-2689	exporter	
15-17	2690-2700	PostgreSQL	
15-18	2701-2707	server	
15-19	2708-2716	exporter	
15-20	2717-2727	Prometheus	
15-21	2728-2739	Performance	
15-22	2740-2743	bar	
15-23	2744-2755	Performance	
15-24	2756-2766	monitoring	

#Text=Redis exporter Registry exporter Request profiling Usage statistics Object storage Operations Clean up Redis sessions Fast SSH key lookup Filesystem benchmarking Move repositories Multiple Sidekiq processes
16-1	2767-2772	Redis	
16-2	2773-2781	exporter	
16-3	2782-2790	Registry	
16-4	2791-2799	exporter	
16-5	2800-2807	Request	
16-6	2808-2817	profiling	
16-7	2818-2823	Usage	
16-8	2824-2834	statistics	
16-9	2835-2841	Object	
16-10	2842-2849	storage	
16-11	2850-2860	Operations	
16-12	2861-2866	Clean	
16-13	2867-2869	up	
16-14	2870-2875	Redis	
16-15	2876-2884	sessions	
16-16	2885-2889	Fast	
16-17	2890-2893	SSH	
16-18	2894-2897	key	
16-19	2898-2904	lookup	
16-20	2905-2915	Filesystem	
16-21	2916-2928	benchmarking	
16-22	2929-2933	Move	
16-23	2934-2946	repositories	
16-24	2947-2955	Multiple	
16-25	2956-2963	Sidekiq	
16-26	2964-2973	processes	

#Text=Rails console Sidekiq MemoryKiller Switch to Puma Unicorn Use SSH certificates Packages Container Registry Dependency Proxy Geo Setting up Geo Database replication
17-1	2974-2979	Rails	
17-2	2980-2987	console	
17-3	2988-2995	Sidekiq	
17-4	2996-3008	MemoryKiller	
17-5	3009-3015	Switch	
17-6	3016-3018	to	
17-7	3019-3023	Puma	
17-8	3024-3031	Unicorn	
17-9	3032-3035	Use	
17-10	3036-3039	SSH	
17-11	3040-3052	certificates	
17-12	3053-3061	Packages	
17-13	3062-3071	Container	
17-14	3072-3080	Registry	
17-15	3081-3091	Dependency	
17-16	3092-3097	Proxy	
17-17	3098-3101	Geo	
17-18	3102-3109	Setting	
17-19	3110-3112	up	
17-20	3113-3116	Geo	
17-21	3117-3125	Database	
17-22	3126-3137	replication	

#Text=External PostgreSQL instances Configuration Using a Geo site Updating Geo nodes Using object storage Using Docker Registry Geo for multiple servers Geo security review Location-aware Git remote URLs Tuning Geo
18-1	3138-3146	External	
18-2	3147-3157	PostgreSQL	
18-3	3158-3167	instances	
18-4	3168-3181	Configuration	
18-5	3182-3187	Using	
18-6	3188-3189	a	
18-7	3190-3193	Geo	
18-8	3194-3198	site	
18-9	3199-3207	Updating	
18-10	3208-3211	Geo	
18-11	3212-3217	nodes	
18-12	3218-3223	Using	
18-13	3224-3230	object	
18-14	3231-3238	storage	
18-15	3239-3244	Using	
18-16	3245-3251	Docker	
18-17	3252-3260	Registry	
18-18	3261-3264	Geo	
18-19	3265-3268	for	
18-20	3269-3277	multiple	
18-21	3278-3285	servers	
18-22	3286-3289	Geo	
18-23	3290-3298	security	
18-24	3299-3305	review	
18-25	3306-3320	Location-aware	
18-26	3321-3324	Git	
18-27	3325-3331	remote	
18-28	3332-3336	URLs	
18-29	3337-3343	Tuning	
18-30	3344-3347	Geo	

#Text=Disable Geo Removing a Geo site Supported data types Frequently asked questions Troubleshooting Validation tests Geo Glossary Disaster recovery (Geo) Planned failover Bring primary back Automatic background verification
19-1	3348-3355	Disable	
19-2	3356-3359	Geo	
19-3	3360-3368	Removing	
19-4	3369-3370	a	
19-5	3371-3374	Geo	
19-6	3375-3379	site	
19-7	3380-3389	Supported	
19-8	3390-3394	data	
19-9	3395-3400	types	
19-10	3401-3411	Frequently	
19-11	3412-3417	asked	
19-12	3418-3427	questions	
19-13	3428-3443	Troubleshooting	
19-14	3444-3454	Validation	
19-15	3455-3460	tests	
19-16	3461-3464	Geo	
19-17	3465-3473	Glossary	
19-18	3474-3482	Disaster	
19-19	3483-3491	recovery	
19-20	3492-3493	(	
19-21	3493-3496	Geo	
19-22	3496-3497	)	
19-23	3498-3505	Planned	
19-24	3506-3514	failover	
19-25	3515-3520	Bring	
19-26	3521-3528	primary	
19-27	3529-3533	back	
19-28	3534-3543	Automatic	
19-29	3544-3554	background	
19-30	3555-3567	verification	

#Text=Rake tasks Backup and restore Clean up Enable namespaces General maintenance Geo tasks GitHub import Import repositories Integrity check LDAP maintenance List repositories
20-1	3568-3572	Rake	
20-2	3573-3578	tasks	
20-3	3579-3585	Backup	
20-4	3586-3589	and	
20-5	3590-3597	restore	
20-6	3598-3603	Clean	
20-7	3604-3606	up	
20-8	3607-3613	Enable	
20-9	3614-3624	namespaces	
20-10	3625-3632	General	
20-11	3633-3644	maintenance	
20-12	3645-3648	Geo	
20-13	3649-3654	tasks	
20-14	3655-3661	GitHub	
20-15	3662-3668	import	
20-16	3669-3675	Import	
20-17	3676-3688	repositories	
20-18	3689-3698	Integrity	
20-19	3699-3704	check	
20-20	3705-3709	LDAP	
20-21	3710-3721	maintenance	
20-22	3722-3726	List	
20-23	3727-3739	repositories	

#Text=Praefect tasks Project import and export Repository storage Sample Prometheus data Uploads migration Uploads sanitization User management Webhooks administration X509 signatures Server hooks Static objects external storage
21-1	3740-3748	Praefect	
21-2	3749-3754	tasks	
21-3	3755-3762	Project	
21-4	3763-3769	import	
21-5	3770-3773	and	
21-6	3774-3780	export	
21-7	3781-3791	Repository	
21-8	3792-3799	storage	
21-9	3800-3806	Sample	
21-10	3807-3817	Prometheus	
21-11	3818-3822	data	
21-12	3823-3830	Uploads	
21-13	3831-3840	migration	
21-14	3841-3848	Uploads	
21-15	3849-3861	sanitization	
21-16	3862-3866	User	
21-17	3867-3877	management	
21-18	3878-3886	Webhooks	
21-19	3887-3901	administration	
21-20	3902-3906	X509	
21-21	3907-3917	signatures	
21-22	3918-3924	Server	
21-23	3925-3930	hooks	
21-24	3931-3937	Static	
21-25	3938-3945	objects	
21-26	3946-3954	external	
21-27	3955-3962	storage	

#Text=Terraform state Update Releases and maintenance Analytics Instance-level DevOps Report Usage Trends Group-level Contribution DevOps Adoption Insights Issue Productivity
22-1	3963-3972	Terraform	
22-2	3973-3978	state	
22-3	3979-3985	Update	
22-4	3986-3994	Releases	
22-5	3995-3998	and	
22-6	3999-4010	maintenance	
22-7	4011-4020	Analytics	
22-8	4021-4035	Instance-level	
22-9	4036-4042	DevOps	
22-10	4043-4049	Report	
22-11	4050-4055	Usage	
22-12	4056-4062	Trends	
22-13	4063-4074	Group-level	
22-14	4075-4087	Contribution	
22-15	4088-4094	DevOps	
22-16	4095-4103	Adoption	
22-17	4104-4112	Insights	
22-18	4113-4118	Issue	
22-19	4119-4131	Productivity	

#Text=Repository Value Stream Project-level CI/CD Code Review Insights Issue Merge Request Repository Value Stream Projects Working with projects Badges Bulk editing (project)
23-1	4132-4142	Repository	
23-2	4143-4148	Value	
23-3	4149-4155	Stream	
23-4	4156-4169	Project-level	
23-5	4170-4172	CI	
23-6	4172-4173	/	
23-7	4173-4175	CD	
23-8	4176-4180	Code	
23-9	4181-4187	Review	
23-10	4188-4196	Insights	
23-11	4197-4202	Issue	
23-12	4203-4208	Merge	
23-13	4209-4216	Request	
23-14	4217-4227	Repository	
23-15	4228-4233	Value	
23-16	4234-4240	Stream	
23-17	4241-4249	Projects	
23-18	4250-4257	Working	
23-19	4258-4262	with	
23-20	4263-4271	projects	
23-21	4272-4278	Badges	
23-22	4279-4283	Bulk	
23-23	4284-4291	editing	
23-24	4292-4293	(	
23-25	4293-4300	project	
23-26	4300-4301	)	

#Text=Code intelligence Code owners Compliance License Compliance Compliance Dashboard Description templates Deploy keys Deploy tokens File finder GitLab Pages Getting started
24-1	4302-4306	Code	
24-2	4307-4319	intelligence	
24-3	4320-4324	Code	
24-4	4325-4331	owners	
24-5	4332-4342	Compliance	
24-6	4343-4350	License	
24-7	4351-4361	Compliance	
24-8	4362-4372	Compliance	
24-9	4373-4382	Dashboard	
24-10	4383-4394	Description	
24-11	4395-4404	templates	
24-12	4405-4411	Deploy	
24-13	4412-4416	keys	
24-14	4417-4423	Deploy	
24-15	4424-4430	tokens	
24-16	4431-4435	File	
24-17	4436-4442	finder	
24-18	4443-4449	GitLab	
24-19	4450-4455	Pages	
24-20	4456-4463	Getting	
24-21	4464-4471	started	

#Text=Default domains, URLs, and baseurls CI/CD for GitLab Pages Custom domains and SSL/TLS certificates Let's Encrypt integration Access control Redirects Exploring GitLab Pages Insights Members
25-1	4472-4479	Default	
25-2	4480-4487	domains	
25-3	4487-4488	,	
25-4	4489-4493	URLs	
25-5	4493-4494	,	
25-6	4495-4498	and	
25-7	4499-4507	baseurls	
25-8	4508-4510	CI	
25-9	4510-4511	/	
25-10	4511-4513	CD	
25-11	4514-4517	for	
25-12	4518-4524	GitLab	
25-13	4525-4530	Pages	
25-14	4531-4537	Custom	
25-15	4538-4545	domains	
25-16	4546-4549	and	
25-17	4550-4553	SSL	
25-18	4553-4554	/	
25-19	4554-4557	TLS	
25-20	4558-4570	certificates	
25-21	4571-4576	Let's	
25-22	4577-4584	Encrypt	
25-23	4585-4596	integration	
25-24	4597-4603	Access	
25-25	4604-4611	control	
25-26	4612-4621	Redirects	
25-27	4622-4631	Exploring	
25-28	4632-4638	GitLab	
25-29	4639-4644	Pages	
25-30	4645-4653	Insights	
25-31	4654-4661	Members	

#Text=Migrating projects Bitbucket Cloud Bitbucket Server ClearCase CVS FogBugz Gemnasium GitHub GitLab.com Gitea Jira Perforce Helix
26-1	4662-4671	Migrating	
26-2	4672-4680	projects	
26-3	4681-4690	Bitbucket	
26-4	4691-4696	Cloud	
26-5	4697-4706	Bitbucket	
26-6	4707-4713	Server	
26-7	4714-4723	ClearCase	
26-8	4724-4727	CVS	
26-9	4728-4735	FogBugz	
26-10	4736-4745	Gemnasium	
26-11	4746-4752	GitHub	
26-12	4753-4763	GitLab.com	
26-13	4764-4769	Gitea	
26-14	4770-4774	Jira	
26-15	4775-4783	Perforce	
26-16	4784-4789	Helix	

#Text=Phabricator Repo by manifest file Repo by URL SVN TFVC Push options Releases Repositories Branches Default branch Git attributes Git LFS Locked files
27-1	4790-4801	Phabricator	
27-2	4802-4806	Repo	
27-3	4807-4809	by	
27-4	4810-4818	manifest	
27-5	4819-4823	file	
27-6	4824-4828	Repo	
27-7	4829-4831	by	
27-8	4832-4835	URL	
27-9	4836-4839	SVN	
27-10	4840-4844	TFVC	
27-11	4845-4849	Push	
27-12	4850-4857	options	
27-13	4858-4866	Releases	
27-14	4867-4879	Repositories	
27-15	4880-4888	Branches	
27-16	4889-4896	Default	
27-17	4897-4903	branch	
27-18	4904-4907	Git	
27-19	4908-4918	attributes	
27-20	4919-4922	Git	
27-21	4923-4926	LFS	
27-22	4927-4933	Locked	
27-23	4934-4939	files	

#Text=File Blame File History Mirroring Protected branches Protected tags Push rules Reduce repository size Signed Commits Syntax highlighting Web Editor Web IDE Requirements Settings
28-1	4940-4944	File	
28-2	4945-4950	Blame	
28-3	4951-4955	File	
28-4	4956-4963	History	
28-5	4964-4973	Mirroring	
28-6	4974-4983	Protected	
28-7	4984-4992	branches	
28-8	4993-5002	Protected	
28-9	5003-5007	tags	
28-10	5008-5012	Push	
28-11	5013-5018	rules	
28-12	5019-5025	Reduce	
28-13	5026-5036	repository	
28-14	5037-5041	size	
28-15	5042-5048	Signed	
28-16	5049-5056	Commits	
28-17	5057-5063	Syntax	
28-18	5064-5076	highlighting	
28-19	5077-5080	Web	
28-20	5081-5087	Editor	
28-21	5088-5091	Web	
28-22	5092-5095	IDE	
28-23	5096-5108	Requirements	
28-24	5109-5117	Settings	

#Text=Project Import/Export Project/Group Import/Export rate limits Project access tokens Share projects Snippets Static Site Editor Wikis Groups Bulk editing (group) Contribution analytics
29-1	5118-5125	Project	
29-2	5126-5132	Import	
29-3	5132-5133	/	
29-4	5133-5139	Export	
29-5	5140-5147	Project	
29-6	5147-5148	/	
29-7	5148-5153	Group	
29-8	5154-5160	Import	
29-9	5160-5161	/	
29-10	5161-5167	Export	
29-11	5168-5172	rate	
29-12	5173-5179	limits	
29-13	5180-5187	Project	
29-14	5188-5194	access	
29-15	5195-5201	tokens	
29-16	5202-5207	Share	
29-17	5208-5216	projects	
29-18	5217-5225	Snippets	
29-19	5226-5232	Static	
29-20	5233-5237	Site	
29-21	5238-5244	Editor	
29-22	5245-5250	Wikis	
29-23	5251-5257	Groups	
29-24	5258-5262	Bulk	
29-25	5263-5270	editing	
29-26	5271-5272	(	
29-27	5272-5277	group	
29-28	5277-5278	)	
29-29	5279-5291	Contribution	
29-30	5292-5301	analytics	

#Text=Custom group-level project templates Epics Epic boards Manage epics Group Import/Export Insights Issue analytics Iterations Migrating groups Public access Roadmaps Repositories Analytics
30-1	5302-5308	Custom	
30-2	5309-5320	group-level	
30-3	5321-5328	project	
30-4	5329-5338	templates	
30-5	5339-5344	Epics	
30-6	5345-5349	Epic	
30-7	5350-5356	boards	
30-8	5357-5363	Manage	
30-9	5364-5369	epics	
30-10	5370-5375	Group	
30-11	5376-5382	Import	
30-12	5382-5383	/	
30-13	5383-5389	Export	
30-14	5390-5398	Insights	
30-15	5399-5404	Issue	
30-16	5405-5414	analytics	
30-17	5415-5425	Iterations	
30-18	5426-5435	Migrating	
30-19	5436-5442	groups	
30-20	5443-5449	Public	
30-21	5450-5456	access	
30-22	5457-5465	Roadmaps	
30-23	5466-5478	Repositories	
30-24	5479-5488	Analytics	

#Text=SAML SSO for GitLab.com groups Group Managed Accounts (Closed Beta) SCIM provisioning Troubleshooting Group SAML and SCIM Subgroups User Abuse reports Account Active sessions Delete account Permissions
31-1	5489-5493	SAML	
31-2	5494-5497	SSO	
31-3	5498-5501	for	
31-4	5502-5512	GitLab.com	
31-5	5513-5519	groups	
31-6	5520-5525	Group	
31-7	5526-5533	Managed	
31-8	5534-5542	Accounts	
31-9	5543-5544	(	
31-10	5544-5550	Closed	
31-11	5551-5555	Beta	
31-12	5555-5556	)	
31-13	5557-5561	SCIM	
31-14	5562-5574	provisioning	
31-15	5575-5590	Troubleshooting	
31-16	5591-5596	Group	
31-17	5597-5601	SAML	
31-18	5602-5605	and	
31-19	5606-5610	SCIM	
31-20	5611-5620	Subgroups	
31-21	5621-5625	User	
31-22	5626-5631	Abuse	
31-23	5632-5639	reports	
31-24	5640-5647	Account	
31-25	5648-5654	Active	
31-26	5655-5663	sessions	
31-27	5664-5670	Delete	
31-28	5671-5678	account	
31-29	5679-5690	Permissions	

#Text=Personal access tokens Profile preferences Two-factor authentication Discussions Git Partial clone Troubleshooting Git Useful commands GitLab.com settings Keyboard shortcuts Markdown AsciiDoc
32-1	5691-5699	Personal	
32-2	5700-5706	access	
32-3	5707-5713	tokens	
32-4	5714-5721	Profile	
32-5	5722-5733	preferences	
32-6	5734-5744	Two-factor	
32-7	5745-5759	authentication	
32-8	5760-5771	Discussions	
32-9	5772-5775	Git	
32-10	5776-5783	Partial	
32-11	5784-5789	clone	
32-12	5790-5805	Troubleshooting	
32-13	5806-5809	Git	
32-14	5810-5816	Useful	
32-15	5817-5825	commands	
32-16	5826-5836	GitLab.com	
32-17	5837-5845	settings	
32-18	5846-5854	Keyboard	
32-19	5855-5864	shortcuts	
32-20	5865-5873	Markdown	
32-21	5874-5882	AsciiDoc	

#Text=Notification emails Quick actions Autocomplete characters Reserved project and group names Search Advanced Search SSH Time tracking To-Do lists Issues Award emoji Confidential issues Crosslinking issues
33-1	5883-5895	Notification	
33-2	5896-5902	emails	
33-3	5903-5908	Quick	
33-4	5909-5916	actions	
33-5	5917-5929	Autocomplete	
33-6	5930-5940	characters	
33-7	5941-5949	Reserved	
33-8	5950-5957	project	
33-9	5958-5961	and	
33-10	5962-5967	group	
33-11	5968-5973	names	
33-12	5974-5980	Search	
33-13	5981-5989	Advanced	
33-14	5990-5996	Search	
33-15	5997-6000	SSH	
33-16	6001-6005	Time	
33-17	6006-6014	tracking	
33-18	6015-6020	To-Do	
33-19	6021-6026	lists	
33-20	6027-6033	Issues	
33-21	6034-6039	Award	
33-22	6040-6045	emoji	
33-23	6046-6058	Confidential	
33-24	6059-6065	issues	
33-25	6066-6078	Crosslinking	
33-26	6079-6085	issues	

#Text=CSV export CSV import Design management Due dates Issue Boards Issue data and actions Labels Managing issues Milestones Burndown and burnup charts Multiple assignees Linked issues Service Desk Sorting and ordering issue lists
34-1	6086-6089	CSV	
34-2	6090-6096	export	
34-3	6097-6100	CSV	
34-4	6101-6107	import	
34-5	6108-6114	Design	
34-6	6115-6125	management	
34-7	6126-6129	Due	
34-8	6130-6135	dates	
34-9	6136-6141	Issue	
34-10	6142-6148	Boards	
34-11	6149-6154	Issue	
34-12	6155-6159	data	
34-13	6160-6163	and	
34-14	6164-6171	actions	
34-15	6172-6178	Labels	
34-16	6179-6187	Managing	
34-17	6188-6194	issues	
34-18	6195-6205	Milestones	
34-19	6206-6214	Burndown	
34-20	6215-6218	and	
34-21	6219-6225	burnup	
34-22	6226-6232	charts	
34-23	6233-6241	Multiple	
34-24	6242-6251	assignees	
34-25	6252-6258	Linked	
34-26	6259-6265	issues	
34-27	6266-6273	Service	
34-28	6274-6278	Desk	
34-29	6279-6286	Sorting	
34-30	6287-6290	and	
34-31	6291-6299	ordering	
34-32	6300-6305	issue	
34-33	6306-6311	lists	

#Text=Weight Zoom meetings in issues Merge requests Allow collaboration Approvals Creating merge requests Cherry pick changes Drafts Export Merge Requests to CSV Getting started Merge request dependencies Fast forward
35-1	6312-6318	Weight	
35-2	6319-6323	Zoom	
35-3	6324-6332	meetings	
35-4	6333-6335	in	
35-5	6336-6342	issues	
35-6	6343-6348	Merge	
35-7	6349-6357	requests	
35-8	6358-6363	Allow	
35-9	6364-6377	collaboration	
35-10	6378-6387	Approvals	
35-11	6388-6396	Creating	
35-12	6397-6402	merge	
35-13	6403-6411	requests	
35-14	6412-6418	Cherry	
35-15	6419-6423	pick	
35-16	6424-6431	changes	
35-17	6432-6438	Drafts	
35-18	6439-6445	Export	
35-19	6446-6451	Merge	
35-20	6452-6460	Requests	
35-21	6461-6463	to	
35-22	6464-6467	CSV	
35-23	6468-6475	Getting	
35-24	6476-6483	started	
35-25	6484-6489	Merge	
35-26	6490-6497	request	
35-27	6498-6510	dependencies	
35-28	6511-6515	Fast	
35-29	6516-6523	forward	

#Text=Merge when pipeline succeeds Resolve conflicts Reverting changes Reviewing and managing merge requests Squash and merge Versions Workflows Draft merge requests Operations Metrics dashboard Set up alerts for metrics
36-1	6524-6529	Merge	
36-2	6530-6534	when	
36-3	6535-6543	pipeline	
36-4	6544-6552	succeeds	
36-5	6553-6560	Resolve	
36-6	6561-6570	conflicts	
36-7	6571-6580	Reverting	
36-8	6581-6588	changes	
36-9	6589-6598	Reviewing	
36-10	6599-6602	and	
36-11	6603-6611	managing	
36-12	6612-6617	merge	
36-13	6618-6626	requests	
36-14	6627-6633	Squash	
36-15	6634-6637	and	
36-16	6638-6643	merge	
36-17	6644-6652	Versions	
36-18	6653-6662	Workflows	
36-19	6663-6668	Draft	
36-20	6669-6674	merge	
36-21	6675-6683	requests	
36-22	6684-6694	Operations	
36-23	6695-6702	Metrics	
36-24	6703-6712	dashboard	
36-25	6713-6716	Set	
36-26	6717-6719	up	
36-27	6720-6726	alerts	
36-28	6727-6730	for	
36-29	6731-6738	metrics	

#Text=Embedding metrics in Markdown Embedding metrics in Grafana Custom dashboards GitLab-defined metrics dashboards Dashboard YAML properties Dashboard settings Panel types for dashboards Using variables Templates for custom dashboards
37-1	6739-6748	Embedding	
37-2	6749-6756	metrics	
37-3	6757-6759	in	
37-4	6760-6768	Markdown	
37-5	6769-6778	Embedding	
37-6	6779-6786	metrics	
37-7	6787-6789	in	
37-8	6790-6797	Grafana	
37-9	6798-6804	Custom	
37-10	6805-6815	dashboards	
37-11	6816-6830	GitLab-defined	
37-12	6831-6838	metrics	
37-13	6839-6849	dashboards	
37-14	6850-6859	Dashboard	
37-15	6860-6864	YAML	
37-16	6865-6875	properties	
37-17	6876-6885	Dashboard	
37-18	6886-6894	settings	
37-19	6895-6900	Panel	
37-20	6901-6906	types	
37-21	6907-6910	for	
37-22	6911-6921	dashboards	
37-23	6922-6927	Using	
37-24	6928-6937	variables	
37-25	6938-6947	Templates	
37-26	6948-6951	for	
37-27	6952-6958	custom	
37-28	6959-6969	dashboards	

#Text=Templating variables for dashboards Metrics library Monitoring AWS resources HAProxy Kubernetes NGINX NGINX Ingress NGINX Ingress VTS Error Tracking Tracing
38-1	6970-6980	Templating	
38-2	6981-6990	variables	
38-3	6991-6994	for	
38-4	6995-7005	dashboards	
38-5	7006-7013	Metrics	
38-6	7014-7021	library	
38-7	7022-7032	Monitoring	
38-8	7033-7036	AWS	
38-9	7037-7046	resources	
38-10	7047-7054	HAProxy	
38-11	7055-7065	Kubernetes	
38-12	7066-7071	NGINX	
38-13	7072-7077	NGINX	
38-14	7078-7085	Ingress	
38-15	7086-7091	NGINX	
38-16	7092-7099	Ingress	
38-17	7100-7103	VTS	
38-18	7104-7109	Error	
38-19	7110-7118	Tracking	
38-20	7119-7126	Tracing	

#Text=Incident management Alerts Paging and notifications Incidents Integrations Status page On-call schedules Feature Flags Product analytics CI/CD Get started CI/CD concepts Migrate from CircleCI
39-1	7127-7135	Incident	
39-2	7136-7146	management	
39-3	7147-7153	Alerts	
39-4	7154-7160	Paging	
39-5	7161-7164	and	
39-6	7165-7178	notifications	
39-7	7179-7188	Incidents	
39-8	7189-7201	Integrations	
39-9	7202-7208	Status	
39-10	7209-7213	page	
39-11	7214-7221	On-call	
39-12	7222-7231	schedules	
39-13	7232-7239	Feature	
39-14	7240-7245	Flags	
39-15	7246-7253	Product	
39-16	7254-7263	analytics	
39-17	7264-7266	CI	
39-18	7266-7267	/	
39-19	7267-7269	CD	
39-20	7270-7273	Get	
39-21	7274-7281	started	
39-22	7282-7284	CI	
39-23	7284-7285	/	
39-24	7285-7287	CD	
39-25	7288-7296	concepts	
39-26	7297-7304	Migrate	
39-27	7305-7309	from	
39-28	7310-7318	CircleCI	

#Text=Migrate from Jenkins Enable or disable CI/CD Pipelines Schedule a pipeline Trigger a pipeline Pipeline settings Pipeline architectures Pipeline efficiency Directed acyclic graph (DAG) Multi-project pipelines
40-1	7319-7326	Migrate	
40-2	7327-7331	from	
40-3	7332-7339	Jenkins	
40-4	7340-7346	Enable	
40-5	7347-7349	or	
40-6	7350-7357	disable	
40-7	7358-7360	CI	
40-8	7360-7361	/	
40-9	7361-7363	CD	
40-10	7364-7373	Pipelines	
40-11	7374-7382	Schedule	
40-12	7383-7384	a	
40-13	7385-7393	pipeline	
40-14	7394-7401	Trigger	
40-15	7402-7403	a	
40-16	7404-7412	pipeline	
40-17	7413-7421	Pipeline	
40-18	7422-7430	settings	
40-19	7431-7439	Pipeline	
40-20	7440-7453	architectures	
40-21	7454-7462	Pipeline	
40-22	7463-7473	efficiency	
40-23	7474-7482	Directed	
40-24	7483-7490	acyclic	
40-25	7491-7496	graph	
40-26	7497-7498	(	
40-27	7498-7501	DAG	
40-28	7501-7502	)	
40-29	7503-7516	Multi-project	
40-30	7517-7526	pipelines	

#Text=Parent-child pipelines Pipelines for merge requests Pipelines for merged results Merge trains Jobs Access a terminal for a running job Format scripts and job logs Git submodules Variables Predefined variables
41-1	7527-7539	Parent-child	
41-2	7540-7549	pipelines	
41-3	7550-7559	Pipelines	
41-4	7560-7563	for	
41-5	7564-7569	merge	
41-6	7570-7578	requests	
41-7	7579-7588	Pipelines	
41-8	7589-7592	for	
41-9	7593-7599	merged	
41-10	7600-7607	results	
41-11	7608-7613	Merge	
41-12	7614-7620	trains	
41-13	7621-7625	Jobs	
41-14	7626-7632	Access	
41-15	7633-7634	a	
41-16	7635-7643	terminal	
41-17	7644-7647	for	
41-18	7648-7649	a	
41-19	7650-7657	running	
41-20	7658-7661	job	
41-21	7662-7668	Format	
41-22	7669-7676	scripts	
41-23	7677-7680	and	
41-24	7681-7684	job	
41-25	7685-7689	logs	
41-26	7690-7693	Git	
41-27	7694-7704	submodules	
41-28	7705-7714	Variables	
41-29	7715-7725	Predefined	
41-30	7726-7735	variables	

#Text=Where variables can be used Environments and deployments Environments Dashboard Protected environments Deployment safety Roll out an application incrementally Deploy to AWS Review Apps Runners Best practices for large repositories Cache and artifacts
42-1	7736-7741	Where	
42-2	7742-7751	variables	
42-3	7752-7755	can	
42-4	7756-7758	be	
42-5	7759-7763	used	
42-6	7764-7776	Environments	
42-7	7777-7780	and	
42-8	7781-7792	deployments	
42-9	7793-7805	Environments	
42-10	7806-7815	Dashboard	
42-11	7816-7825	Protected	
42-12	7826-7838	environments	
42-13	7839-7849	Deployment	
42-14	7850-7856	safety	
42-15	7857-7861	Roll	
42-16	7862-7865	out	
42-17	7866-7868	an	
42-18	7869-7880	application	
42-19	7881-7894	incrementally	
42-20	7895-7901	Deploy	
42-21	7902-7904	to	
42-22	7905-7908	AWS	
42-23	7909-7915	Review	
42-24	7916-7920	Apps	
42-25	7921-7928	Runners	
42-26	7929-7933	Best	
42-27	7934-7943	practices	
42-28	7944-7947	for	
42-29	7948-7953	large	
42-30	7954-7966	repositories	
42-31	7967-7972	Cache	
42-32	7973-7976	and	
42-33	7977-7986	artifacts	

#Text=Job artifacts Pipeline artifacts .gitlab-ci.yml .gitlab-ci.yml reference Validate syntax Pipeline Editor Include examples Docker Run CI/CD jobs in Docker containers
43-1	7987-7990	Job	
43-2	7991-8000	artifacts	
43-3	8001-8009	Pipeline	
43-4	8010-8019	artifacts	
43-5	8020-8021	.	
43-6	8021-8034	gitlab-ci.yml	
43-7	8035-8036	.	
43-8	8036-8049	gitlab-ci.yml	
43-9	8050-8059	reference	
43-10	8060-8068	Validate	
43-11	8069-8075	syntax	
43-12	8076-8084	Pipeline	
43-13	8085-8091	Editor	
43-14	8092-8099	Include	
43-15	8100-8108	examples	
43-16	8109-8115	Docker	
43-17	8116-8119	Run	
43-18	8120-8122	CI	
43-19	8122-8123	/	
43-20	8123-8125	CD	
43-21	8126-8130	jobs	
43-22	8131-8133	in	
43-23	8134-8140	Docker	
43-24	8141-8151	containers	

#Text=Use Docker to build Docker images Use kaniko to build Docker images Services MySQL Service PostgreSQL Service Redis Service Auto DevOps Get started Requirements Stages Customize Upgrade PostgreSQL
44-1	8152-8155	Use	
44-2	8156-8162	Docker	
44-3	8163-8165	to	
44-4	8166-8171	build	
44-5	8172-8178	Docker	
44-6	8179-8185	images	
44-7	8186-8189	Use	
44-8	8190-8196	kaniko	
44-9	8197-8199	to	
44-10	8200-8205	build	
44-11	8206-8212	Docker	
44-12	8213-8219	images	
44-13	8220-8228	Services	
44-14	8229-8234	MySQL	
44-15	8235-8242	Service	
44-16	8243-8253	PostgreSQL	
44-17	8254-8261	Service	
44-18	8262-8267	Redis	
44-19	8268-8275	Service	
44-20	8276-8280	Auto	
44-21	8281-8287	DevOps	
44-22	8288-8291	Get	
44-23	8292-8299	started	
44-24	8300-8312	Requirements	
44-25	8313-8319	Stages	
44-26	8320-8329	Customize	
44-27	8330-8337	Upgrade	
44-28	8338-8348	PostgreSQL	

#Text=Upgrade Auto Deploy dependencies Troubleshooting Testing Accessibility testing Browser performance testing Code quality Load performance testing Metrics reports Test cases External integrations SSH keys Bitbucket Cloud GitHub
45-1	8349-8356	Upgrade	
45-2	8357-8361	Auto	
45-3	8362-8368	Deploy	
45-4	8369-8381	dependencies	
45-5	8382-8397	Troubleshooting	
45-6	8398-8405	Testing	
45-7	8406-8419	Accessibility	
45-8	8420-8427	testing	
45-9	8428-8435	Browser	
45-10	8436-8447	performance	
45-11	8448-8455	testing	
45-12	8456-8460	Code	
45-13	8461-8468	quality	
45-14	8469-8473	Load	
45-15	8474-8485	performance	
45-16	8486-8493	testing	
45-17	8494-8501	Metrics	
45-18	8502-8509	reports	
45-19	8510-8514	Test	
45-20	8515-8520	cases	
45-21	8521-8529	External	
45-22	8530-8542	integrations	
45-23	8543-8546	SSH	
45-24	8547-8551	keys	
45-25	8552-8561	Bitbucket	
45-26	8562-8567	Cloud	
45-27	8568-8574	GitHub	

#Text=Slack CI/CD examples Deployment with Dpl End-to-end testing NPM with semantic-release PHP with PHPunit and atoum PHP with NPM and SCP PHP with Laravel and Envoy
46-1	8575-8580	Slack	
46-2	8581-8583	CI	
46-3	8583-8584	/	
46-4	8584-8586	CD	
46-5	8587-8595	examples	
46-6	8596-8606	Deployment	
46-7	8607-8611	with	
46-8	8612-8615	Dpl	
46-9	8616-8626	End-to-end	
46-10	8627-8634	testing	
46-11	8635-8638	NPM	
46-12	8639-8643	with	
46-13	8644-8660	semantic-release	
46-14	8661-8664	PHP	
46-15	8665-8669	with	
46-16	8670-8677	PHPunit	
46-17	8678-8681	and	
46-18	8682-8687	atoum	
46-19	8688-8691	PHP	
46-20	8692-8696	with	
46-21	8697-8700	NPM	
46-22	8701-8704	and	
46-23	8705-8708	SCP	
46-24	8709-8712	PHP	
46-25	8713-8717	with	
46-26	8718-8725	Laravel	
46-27	8726-8729	and	
46-28	8730-8735	Envoy	

#Text=Troubleshooting CI/CD Application security Security Configuration Container Scanning Threat Monitoring Dependency Scanning Dependency Scanning Analyzers Dependency List Static Application Security Testing
47-1	8736-8751	Troubleshooting	
47-2	8752-8754	CI	
47-3	8754-8755	/	
47-4	8755-8757	CD	
47-5	8758-8769	Application	
47-6	8770-8778	security	
47-7	8779-8787	Security	
47-8	8788-8801	Configuration	
47-9	8802-8811	Container	
47-10	8812-8820	Scanning	
47-11	8821-8827	Threat	
47-12	8828-8838	Monitoring	
47-13	8839-8849	Dependency	
47-14	8850-8858	Scanning	
47-15	8859-8869	Dependency	
47-16	8870-8878	Scanning	
47-17	8879-8888	Analyzers	
47-18	8889-8899	Dependency	
47-19	8900-8904	List	
47-20	8905-8911	Static	
47-21	8912-8923	Application	
47-22	8924-8932	Security	
47-23	8933-8940	Testing	

#Text=SAST Analyzers Secret Detection Dynamic Application Security Testing (DAST) DAST Troubleshooting API Fuzzing Coverage Fuzzing Security Dashboard Offline Environments Vulnerability Reports Vulnerability Pages
48-1	8941-8945	SAST	
48-2	8946-8955	Analyzers	
48-3	8956-8962	Secret	
48-4	8963-8972	Detection	
48-5	8973-8980	Dynamic	
48-6	8981-8992	Application	
48-7	8993-9001	Security	
48-8	9002-9009	Testing	
48-9	9010-9011	(	
48-10	9011-9015	DAST	
48-11	9015-9016	)	
48-12	9017-9021	DAST	
48-13	9022-9037	Troubleshooting	
48-14	9038-9041	API	
48-15	9042-9049	Fuzzing	
48-16	9050-9058	Coverage	
48-17	9059-9066	Fuzzing	
48-18	9067-9075	Security	
48-19	9076-9085	Dashboard	
48-20	9086-9093	Offline	
48-21	9094-9106	Environments	
48-22	9107-9120	Vulnerability	
48-23	9121-9128	Reports	
48-24	9129-9142	Vulnerability	
48-25	9143-9148	Pages	

#Text=Scan Policies Security scanner integration Secure and Protect Terminology Packages & Registries Package Registry Composer Conan Go Proxy Maven npm NuGet PyPI Ruby gems
49-1	9149-9153	Scan	
49-2	9154-9162	Policies	
49-3	9163-9171	Security	
49-4	9172-9179	scanner	
49-5	9180-9191	integration	
49-6	9192-9198	Secure	
49-7	9199-9202	and	
49-8	9203-9210	Protect	
49-9	9211-9222	Terminology	
49-10	9223-9231	Packages	
49-11	9232-9233	&	
49-12	9234-9244	Registries	
49-13	9245-9252	Package	
49-14	9253-9261	Registry	
49-15	9262-9270	Composer	
49-16	9271-9276	Conan	
49-17	9277-9279	Go	
49-18	9280-9285	Proxy	
49-19	9286-9291	Maven	
49-20	9292-9295	npm	
49-21	9296-9301	NuGet	
49-22	9302-9306	PyPI	
49-23	9307-9311	Ruby	
49-24	9312-9316	gems	

#Text=Generic Store all packages in one project Container Registry Dependency Proxy Infrastructure Adding and removing clusters Add EKS clusters Add GKE clusters Group-level clusters Instance-level clusters Canary deployments
50-1	9317-9324	Generic	
50-2	9325-9330	Store	
50-3	9331-9334	all	
50-4	9335-9343	packages	
50-5	9344-9346	in	
50-6	9347-9350	one	
50-7	9351-9358	project	
50-8	9359-9368	Container	
50-9	9369-9377	Registry	
50-10	9378-9388	Dependency	
50-11	9389-9394	Proxy	
50-12	9395-9409	Infrastructure	
50-13	9410-9416	Adding	
50-14	9417-9420	and	
50-15	9421-9429	removing	
50-16	9430-9438	clusters	
50-17	9439-9442	Add	
50-18	9443-9446	EKS	
50-19	9447-9455	clusters	
50-20	9456-9459	Add	
50-21	9460-9463	GKE	
50-22	9464-9472	clusters	
50-23	9473-9484	Group-level	
50-24	9485-9493	clusters	
50-25	9494-9508	Instance-level	
50-26	9509-9517	clusters	
50-27	9518-9524	Canary	
50-28	9525-9536	deployments	

#Text=Cluster environments Cluster cost management Deploy boards GitLab Managed Apps Configuring Crossplane Infrastructure as code GitLab managed Terraform state Terraform integration in merge requests Kubernetes Agent Agent configuration repository
51-1	9537-9544	Cluster	
51-2	9545-9557	environments	
51-3	9558-9565	Cluster	
51-4	9566-9570	cost	
51-5	9571-9581	management	
51-6	9582-9588	Deploy	
51-7	9589-9595	boards	
51-8	9596-9602	GitLab	
51-9	9603-9610	Managed	
51-10	9611-9615	Apps	
51-11	9616-9627	Configuring	
51-12	9628-9638	Crossplane	
51-13	9639-9653	Infrastructure	
51-14	9654-9656	as	
51-15	9657-9661	code	
51-16	9662-9668	GitLab	
51-17	9669-9676	managed	
51-18	9677-9686	Terraform	
51-19	9687-9692	state	
51-20	9693-9702	Terraform	
51-21	9703-9714	integration	
51-22	9715-9717	in	
51-23	9718-9723	merge	
51-24	9724-9732	requests	
51-25	9733-9743	Kubernetes	
51-26	9744-9749	Agent	
51-27	9750-9755	Agent	
51-28	9756-9769	configuration	
51-29	9770-9780	repository	

#Text=Management project Pod logs Runbooks Serverless Deploying AWS Lambda functions Securing your deployed applications Web Application Firewall Container Network Security Container Host Security Integrations Akismet Elasticsearch
52-1	9781-9791	Management	
52-2	9792-9799	project	
52-3	9800-9803	Pod	
52-4	9804-9808	logs	
52-5	9809-9817	Runbooks	
52-6	9818-9828	Serverless	
52-7	9829-9838	Deploying	
52-8	9839-9842	AWS	
52-9	9843-9849	Lambda	
52-10	9850-9859	functions	
52-11	9860-9868	Securing	
52-12	9869-9873	your	
52-13	9874-9882	deployed	
52-14	9883-9895	applications	
52-15	9896-9899	Web	
52-16	9900-9911	Application	
52-17	9912-9920	Firewall	
52-18	9921-9930	Container	
52-19	9931-9938	Network	
52-20	9939-9947	Security	
52-21	9948-9957	Container	
52-22	9958-9962	Host	
52-23	9963-9971	Security	
52-24	9972-9984	Integrations	
52-25	9985-9992	Akismet	
52-26	9993-10006	Elasticsearch	

#Text=Gitpod Jira integrations Jira GitLab for Jira app Jira DVCS connector Jira Development Panel Create Jira Server user Create Jira Cloud API token Kroki diagrams PlantUML
53-1	10007-10013	Gitpod	
53-2	10014-10018	Jira	
53-3	10019-10031	integrations	
53-4	10032-10036	Jira	
53-5	10037-10043	GitLab	
53-6	10044-10047	for	
53-7	10048-10052	Jira	
53-8	10053-10056	app	
53-9	10057-10061	Jira	
53-10	10062-10066	DVCS	
53-11	10067-10076	connector	
53-12	10077-10081	Jira	
53-13	10082-10093	Development	
53-14	10094-10099	Panel	
53-15	10100-10106	Create	
53-16	10107-10111	Jira	
53-17	10112-10118	Server	
53-18	10119-10123	user	
53-19	10124-10130	Create	
53-20	10131-10135	Jira	
53-21	10136-10141	Cloud	
53-22	10142-10145	API	
53-23	10146-10151	token	
53-24	10152-10157	Kroki	
53-25	10158-10166	diagrams	
53-26	10167-10175	PlantUML	

#Text=Project integration management Project integrations Overview Asana Bamboo CI Discord Emails on push GitHub Hangouts Chat Irker Jenkins Mattermost notifications Mattermost slash commands Microsoft Teams
54-1	10176-10183	Project	
54-2	10184-10195	integration	
54-3	10196-10206	management	
54-4	10207-10214	Project	
54-5	10215-10227	integrations	
54-6	10228-10236	Overview	
54-7	10237-10242	Asana	
54-8	10243-10249	Bamboo	
54-9	10250-10252	CI	
54-10	10253-10260	Discord	
54-11	10261-10267	Emails	
54-12	10268-10270	on	
54-13	10271-10275	push	
54-14	10276-10282	GitHub	
54-15	10283-10291	Hangouts	
54-16	10292-10296	Chat	
54-17	10297-10302	Irker	
54-18	10303-10310	Jenkins	
54-19	10311-10321	Mattermost	
54-20	10322-10335	notifications	
54-21	10336-10346	Mattermost	
54-22	10347-10352	slash	
54-23	10353-10361	commands	
54-24	10362-10371	Microsoft	
54-25	10372-10377	Teams	

#Text=Mock CI Prometheus Service templates Slack notifications Slack slash commands Slack application Unify Circuit Webex Teams Webhooks External issue tracker Bugzilla Custom issue tracker
55-1	10378-10382	Mock	
55-2	10383-10385	CI	
55-3	10386-10396	Prometheus	
55-4	10397-10404	Service	
55-5	10405-10414	templates	
55-6	10415-10420	Slack	
55-7	10421-10434	notifications	
55-8	10435-10440	Slack	
55-9	10441-10446	slash	
55-10	10447-10455	commands	
55-11	10456-10461	Slack	
55-12	10462-10473	application	
55-13	10474-10479	Unify	
55-14	10480-10487	Circuit	
55-15	10488-10493	Webex	
55-16	10494-10499	Teams	
55-17	10500-10508	Webhooks	
55-18	10509-10517	External	
55-19	10518-10523	issue	
55-20	10524-10531	tracker	
55-21	10532-10540	Bugzilla	
55-22	10541-10547	Custom	
55-23	10548-10553	issue	
55-24	10554-10561	tracker	

#Text=IBM Engineering Workflow Management Redmine YouTrack Gmail actions buttons reCAPTCHA Security partners Sourcegraph Trello API Resources .gitignore (templates) .gitlab-ci.yml (templates)
56-1	10562-10565	IBM	
56-2	10566-10577	Engineering	
56-3	10578-10586	Workflow	
56-4	10587-10597	Management	
56-5	10598-10605	Redmine	
56-6	10606-10614	YouTrack	
56-7	10615-10620	Gmail	
56-8	10621-10628	actions	
56-9	10629-10636	buttons	
56-10	10637-10646	reCAPTCHA	
56-11	10647-10655	Security	
56-12	10656-10664	partners	
56-13	10665-10676	Sourcegraph	
56-14	10677-10683	Trello	
56-15	10684-10687	API	
56-16	10688-10697	Resources	
56-17	10698-10699	.	
56-18	10699-10708	gitignore	
56-19	10709-10710	(	
56-20	10710-10719	templates	
56-21	10719-10720	)	
56-22	10721-10722	.	
56-23	10722-10735	gitlab-ci.yml	
56-24	10736-10737	(	
56-25	10737-10746	templates	
56-26	10746-10747	)	

#Text=Access requests Appearance (application) Applications Audit events Avatar Award emoji Badges (project) Badges (group) Branches Broadcast messages Clusters (project) Clusters (group)
57-1	10748-10754	Access	
57-2	10755-10763	requests	
57-3	10764-10774	Appearance	
57-4	10775-10776	(	
57-5	10776-10787	application	
57-6	10787-10788	)	
57-7	10789-10801	Applications	
57-8	10802-10807	Audit	
57-9	10808-10814	events	
57-10	10815-10821	Avatar	
57-11	10822-10827	Award	
57-12	10828-10833	emoji	
57-13	10834-10840	Badges	
57-14	10841-10842	(	
57-15	10842-10849	project	
57-16	10849-10850	)	
57-17	10851-10857	Badges	
57-18	10858-10859	(	
57-19	10859-10864	group	
57-20	10864-10865	)	
57-21	10866-10874	Branches	
57-22	10875-10884	Broadcast	
57-23	10885-10893	messages	
57-24	10894-10902	Clusters	
57-25	10903-10904	(	
57-26	10904-10911	project	
57-27	10911-10912	)	
57-28	10913-10921	Clusters	
57-29	10922-10923	(	
57-30	10923-10928	group	
57-31	10928-10929	)	

#Text=Clusters (instance) Commits Composer Conan Container Registry Custom attributes Dashboard annotations Dependencies Dependency Proxy Deploy keys Deploy tokens Deployments
58-1	10930-10938	Clusters	
58-2	10939-10940	(	
58-3	10940-10948	instance	
58-4	10948-10949	)	
58-5	10950-10957	Commits	
58-6	10958-10966	Composer	
58-7	10967-10972	Conan	
58-8	10973-10982	Container	
58-9	10983-10991	Registry	
58-10	10992-10998	Custom	
58-11	10999-11009	attributes	
58-12	11010-11019	Dashboard	
58-13	11020-11031	annotations	
58-14	11032-11044	Dependencies	
58-15	11045-11055	Dependency	
58-16	11056-11061	Proxy	
58-17	11062-11068	Deploy	
58-18	11069-11073	keys	
58-19	11074-11080	Deploy	
58-20	11081-11087	tokens	
58-21	11088-11099	Deployments	

#Text=Discussions Dockerfile (templates) DORA4 metrics DORA4 project analytics DORA4 group analytics Environments Epics Error tracking Events Experiments Features flags
59-1	11100-11111	Discussions	
59-2	11112-11122	Dockerfile	
59-3	11123-11124	(	
59-4	11124-11133	templates	
59-5	11133-11134	)	
59-6	11135-11140	DORA4	
59-7	11141-11148	metrics	
59-8	11149-11154	DORA4	
59-9	11155-11162	project	
59-10	11163-11172	analytics	
59-11	11173-11178	DORA4	
59-12	11179-11184	group	
59-13	11185-11194	analytics	
59-14	11195-11207	Environments	
59-15	11208-11213	Epics	
59-16	11214-11219	Error	
59-17	11220-11228	tracking	
59-18	11229-11235	Events	
59-19	11236-11247	Experiments	
59-20	11248-11256	Features	
59-21	11257-11262	flags	

#Text=Feature flag user lists Freeze periods Geo nodes GitLab Pages Group activity analytics Group Import/Export Group repository storage moves Group wikis Groups Import Instance-level CI/CD variables
60-1	11263-11270	Feature	
60-2	11271-11275	flag	
60-3	11276-11280	user	
60-4	11281-11286	lists	
60-5	11287-11293	Freeze	
60-6	11294-11301	periods	
60-7	11302-11305	Geo	
60-8	11306-11311	nodes	
60-9	11312-11318	GitLab	
60-10	11319-11324	Pages	
60-11	11325-11330	Group	
60-12	11331-11339	activity	
60-13	11340-11349	analytics	
60-14	11350-11355	Group	
60-15	11356-11362	Import	
60-16	11362-11363	/	
60-17	11363-11369	Export	
60-18	11370-11375	Group	
60-19	11376-11386	repository	
60-20	11387-11394	storage	
60-21	11395-11400	moves	
60-22	11401-11406	Group	
60-23	11407-11412	wikis	
60-24	11413-11419	Groups	
60-25	11420-11426	Import	
60-26	11427-11441	Instance-level	
60-27	11442-11444	CI	
60-28	11444-11445	/	
60-29	11445-11447	CD	
60-30	11448-11457	variables	

#Text=Invitations Issue boards (project) Issue boards (group) Issues Issues (epic) Issues statistics Iterations (project) Iterations (group) Jobs Job artifacts Keys Labels (project)
61-1	11458-11469	Invitations	
61-2	11470-11475	Issue	
61-3	11476-11482	boards	
61-4	11483-11484	(	
61-5	11484-11491	project	
61-6	11491-11492	)	
61-7	11493-11498	Issue	
61-8	11499-11505	boards	
61-9	11506-11507	(	
61-10	11507-11512	group	
61-11	11512-11513	)	
61-12	11514-11520	Issues	
61-13	11521-11527	Issues	
61-14	11528-11529	(	
61-15	11529-11533	epic	
61-16	11533-11534	)	
61-17	11535-11541	Issues	
61-18	11542-11552	statistics	
61-19	11553-11563	Iterations	
61-20	11564-11565	(	
61-21	11565-11572	project	
61-22	11572-11573	)	
61-23	11574-11584	Iterations	
61-24	11585-11586	(	
61-25	11586-11591	group	
61-26	11591-11592	)	
61-27	11593-11597	Jobs	
61-28	11598-11601	Job	
61-29	11602-11611	artifacts	
61-30	11612-11616	Keys	
61-31	11617-11623	Labels	
61-32	11624-11625	(	
61-33	11625-11632	project	
61-34	11632-11633	)	

#Text=Labels (group) License Licenses (templates) Links (issue) Links (epic) Managed licenses Markdown Maven Members Merge request approvals Merge request context commits Merge requests Merge trains
62-1	11634-11640	Labels	
62-2	11641-11642	(	
62-3	11642-11647	group	
62-4	11647-11648	)	
62-5	11649-11656	License	
62-6	11657-11665	Licenses	
62-7	11666-11667	(	
62-8	11667-11676	templates	
62-9	11676-11677	)	
62-10	11678-11683	Links	
62-11	11684-11685	(	
62-12	11685-11690	issue	
62-13	11690-11691	)	
62-14	11692-11697	Links	
62-15	11698-11699	(	
62-16	11699-11703	epic	
62-17	11703-11704	)	
62-18	11705-11712	Managed	
62-19	11713-11721	licenses	
62-20	11722-11730	Markdown	
62-21	11731-11736	Maven	
62-22	11737-11744	Members	
62-23	11745-11750	Merge	
62-24	11751-11758	request	
62-25	11759-11768	approvals	
62-26	11769-11774	Merge	
62-27	11775-11782	request	
62-28	11783-11790	context	
62-29	11791-11798	commits	
62-30	11799-11804	Merge	
62-31	11805-11813	requests	
62-32	11814-11819	Merge	
62-33	11820-11826	trains	

#Text=Milestones (project) Milestones (group) Namespaces Notes (comments) Notification settings NuGet Packages Pages domains Personal access tokens Pipelines schedules Pipeline triggers Pipelines Plan limits
63-1	11827-11837	Milestones	
63-2	11838-11839	(	
63-3	11839-11846	project	
63-4	11846-11847	)	
63-5	11848-11858	Milestones	
63-6	11859-11860	(	
63-7	11860-11865	group	
63-8	11865-11866	)	
63-9	11867-11877	Namespaces	
63-10	11878-11883	Notes	
63-11	11884-11885	(	
63-12	11885-11893	comments	
63-13	11893-11894	)	
63-14	11895-11907	Notification	
63-15	11908-11916	settings	
63-16	11917-11922	NuGet	
63-17	11923-11931	Packages	
63-18	11932-11937	Pages	
63-19	11938-11945	domains	
63-20	11946-11954	Personal	
63-21	11955-11961	access	
63-22	11962-11968	tokens	
63-23	11969-11978	Pipelines	
63-24	11979-11988	schedules	
63-25	11989-11997	Pipeline	
63-26	11998-12006	triggers	
63-27	12007-12016	Pipelines	
63-28	12017-12021	Plan	
63-29	12022-12028	limits	

#Text=Project access tokens Project aliases Project import/export Project remote mirrors Project repository storage moves Project statistics Project templates Project vulnerabilities Projects Protected branches Protected environments Protected tags PyPI Releases
64-1	12029-12036	Project	
64-2	12037-12043	access	
64-3	12044-12050	tokens	
64-4	12051-12058	Project	
64-5	12059-12066	aliases	
64-6	12067-12074	Project	
64-7	12075-12081	import	
64-8	12081-12082	/	
64-9	12082-12088	export	
64-10	12089-12096	Project	
64-11	12097-12103	remote	
64-12	12104-12111	mirrors	
64-13	12112-12119	Project	
64-14	12120-12130	repository	
64-15	12131-12138	storage	
64-16	12139-12144	moves	
64-17	12145-12152	Project	
64-18	12153-12163	statistics	
64-19	12164-12171	Project	
64-20	12172-12181	templates	
64-21	12182-12189	Project	
64-22	12190-12205	vulnerabilities	
64-23	12206-12214	Projects	
64-24	12215-12224	Protected	
64-25	12225-12233	branches	
64-26	12234-12243	Protected	
64-27	12244-12256	environments	
64-28	12257-12266	Protected	
64-29	12267-12271	tags	
64-30	12272-12276	PyPI	
64-31	12277-12285	Releases	

#Text=Release links Repositories Repository files Repository submodules Resource iteration events Resource label events Resource milestone events Resource state events Resource weight events Ruby gems Runners SCIM Search
65-1	12286-12293	Release	
65-2	12294-12299	links	
65-3	12300-12312	Repositories	
65-4	12313-12323	Repository	
65-5	12324-12329	files	
65-6	12330-12340	Repository	
65-7	12341-12351	submodules	
65-8	12352-12360	Resource	
65-9	12361-12370	iteration	
65-10	12371-12377	events	
65-11	12378-12386	Resource	
65-12	12387-12392	label	
65-13	12393-12399	events	
65-14	12400-12408	Resource	
65-15	12409-12418	milestone	
65-16	12419-12425	events	
65-17	12426-12434	Resource	
65-18	12435-12440	state	
65-19	12441-12447	events	
65-20	12448-12456	Resource	
65-21	12457-12463	weight	
65-22	12464-12470	events	
65-23	12471-12475	Ruby	
65-24	12476-12480	gems	
65-25	12481-12488	Runners	
65-26	12489-12493	SCIM	
65-27	12494-12500	Search	

#Text=Services Settings (application) Sidekiq metrics Sidekiq queues Snippet repository storage moves Snippets Snippets (project) Statistics (application) Suggestions System hooks
66-1	12501-12509	Services	
66-2	12510-12518	Settings	
66-3	12519-12520	(	
66-4	12520-12531	application	
66-5	12531-12532	)	
66-6	12533-12540	Sidekiq	
66-7	12541-12548	metrics	
66-8	12549-12556	Sidekiq	
66-9	12557-12563	queues	
66-10	12564-12571	Snippet	
66-11	12572-12582	repository	
66-12	12583-12590	storage	
66-13	12591-12596	moves	
66-14	12597-12605	Snippets	
66-15	12606-12614	Snippets	
66-16	12615-12616	(	
66-17	12616-12623	project	
66-18	12623-12624	)	
66-19	12625-12635	Statistics	
66-20	12636-12637	(	
66-21	12637-12648	application	
66-22	12648-12649	)	
66-23	12650-12661	Suggestions	
66-24	12662-12668	System	
66-25	12669-12674	hooks	

#Text=Tags To-Do lists Users User-starred metrics dashboards Variables (project) Variables (group) Version Visual Review discussions Vulnerabilities Vulnerability export Vulnerability Findings
67-1	12675-12679	Tags	
67-2	12680-12685	To-Do	
67-3	12686-12691	lists	
67-4	12692-12697	Users	
67-5	12698-12710	User-starred	
67-6	12711-12718	metrics	
67-7	12719-12729	dashboards	
67-8	12730-12739	Variables	
67-9	12740-12741	(	
67-10	12741-12748	project	
67-11	12748-12749	)	
67-12	12750-12759	Variables	
67-13	12760-12761	(	
67-14	12761-12766	group	
67-15	12766-12767	)	
67-16	12768-12775	Version	
67-17	12776-12782	Visual	
67-18	12783-12789	Review	
67-19	12790-12801	discussions	
67-20	12802-12817	Vulnerabilities	
67-21	12818-12831	Vulnerability	
67-22	12832-12838	export	
67-23	12839-12852	Vulnerability	
67-24	12853-12861	Findings	

#Text=Wikis GraphQL Getting started GraphQL reference Create audit report (example) Identify issue boards (example) Removed items v3 to v4 Lint .gitlab-ci.yml
68-1	12862-12867	Wikis	
68-2	12868-12875	GraphQL	
68-3	12876-12883	Getting	
68-4	12884-12891	started	
68-5	12892-12899	GraphQL	
68-6	12900-12909	reference	
68-7	12910-12916	Create	
68-8	12917-12922	audit	
68-9	12923-12929	report	
68-10	12930-12931	(	
68-11	12931-12938	example	
68-12	12938-12939	)	
68-13	12940-12948	Identify	
68-14	12949-12954	issue	
68-15	12955-12961	boards	
68-16	12962-12963	(	
68-17	12963-12970	example	
68-18	12970-12971	)	
68-19	12972-12979	Removed	
68-20	12980-12985	items	
68-21	12986-12988	v3	
68-22	12989-12991	to	
68-23	12992-12994	v4	
68-24	12995-12999	Lint	
68-25	13000-13001	.	
68-26	13001-13014	gitlab-ci.yml	

#Text=GitLab as an OAuth2 provider Omnibus GitLab Architecture Omnibus packages and images Package information Package defaults Package licensing Package signatures Installation Container Registry Deprecation policy
69-1	13015-13021	GitLab	
69-2	13022-13024	as	
69-3	13025-13027	an	
69-4	13028-13034	OAuth2	
69-5	13035-13043	provider	
69-6	13044-13051	Omnibus	
69-7	13052-13058	GitLab	
69-8	13059-13071	Architecture	
69-9	13072-13079	Omnibus	
69-10	13080-13088	packages	
69-11	13089-13092	and	
69-12	13093-13099	images	
69-13	13100-13107	Package	
69-14	13108-13119	information	
69-15	13120-13127	Package	
69-16	13128-13136	defaults	
69-17	13137-13144	Package	
69-18	13145-13154	licensing	
69-19	13155-13162	Package	
69-20	13163-13173	signatures	
69-21	13174-13186	Installation	
69-22	13187-13196	Container	
69-23	13197-13205	Registry	
69-24	13206-13217	Deprecation	
69-25	13218-13224	policy	

#Text=Deprecated OSes Docker images Manual installation Install JiHu Edition Configure Custom environment variables Backups Database GitLab Mattermost Grafana High availability roles LDAP Logs
70-1	13225-13235	Deprecated	
70-2	13236-13240	OSes	
70-3	13241-13247	Docker	
70-4	13248-13254	images	
70-5	13255-13261	Manual	
70-6	13262-13274	installation	
70-7	13275-13282	Install	
70-8	13283-13287	JiHu	
70-9	13288-13295	Edition	
70-10	13296-13305	Configure	
70-11	13306-13312	Custom	
70-12	13313-13324	environment	
70-13	13325-13334	variables	
70-14	13335-13342	Backups	
70-15	13343-13351	Database	
70-16	13352-13358	GitLab	
70-17	13359-13369	Mattermost	
70-18	13370-13377	Grafana	
70-19	13378-13382	High	
70-20	13383-13395	availability	
70-21	13396-13401	roles	
70-22	13402-13406	LDAP	
70-23	13407-13411	Logs	

#Text=NGINX Gitaly Cluster Prometheus Puma Raspberry Pi Redis SMTP SSL DNS Unicorn Image scaling Memory-constrained environments Release process OpenShift release process
71-1	13412-13417	NGINX	
71-2	13418-13424	Gitaly	
71-3	13425-13432	Cluster	
71-4	13433-13443	Prometheus	
71-5	13444-13448	Puma	
71-6	13449-13458	Raspberry	
71-7	13459-13461	Pi	
71-8	13462-13467	Redis	
71-9	13468-13472	SMTP	
71-10	13473-13476	SSL	
71-11	13477-13480	DNS	
71-12	13481-13488	Unicorn	
71-13	13489-13494	Image	
71-14	13495-13502	scaling	
71-15	13503-13521	Memory-constrained	
71-16	13522-13534	environments	
71-17	13535-13542	Release	
71-18	13543-13550	process	
71-19	13551-13560	OpenShift	
71-20	13561-13568	release	
71-21	13569-13576	process	

#Text=Update Convert to Omnibus Package signatures GitLab 13 changes GitLab 12 changes GitLab 11 changes GitLab 10 changes Maintain Troubleshoot GitLab Runner
72-1	13577-13583	Update	
72-2	13584-13591	Convert	
72-3	13592-13594	to	
72-4	13595-13602	Omnibus	
72-5	13603-13610	Package	
72-6	13611-13621	signatures	
72-7	13622-13628	GitLab	
72-8	13629-13631	13	
72-9	13632-13639	changes	
72-10	13640-13646	GitLab	
72-11	13647-13649	12	
72-12	13650-13657	changes	
72-13	13658-13664	GitLab	
72-14	13665-13667	11	
72-15	13668-13675	changes	
72-16	13676-13682	GitLab	
72-17	13683-13685	10	
72-18	13686-13693	changes	
72-19	13694-13702	Maintain	
72-20	13703-13715	Troubleshoot	
72-21	13716-13722	GitLab	
72-22	13723-13729	Runner	

#Text=Install Docker FreeBSD Kubernetes (Helm Chart) Kubernetes (Agent) Linux macOS OpenShift Windows Bleeding edge releases Official Linux packages Old GitLab Runner URLs
73-1	13730-13737	Install	
73-2	13738-13744	Docker	
73-3	13745-13752	FreeBSD	
73-4	13753-13763	Kubernetes	
73-5	13764-13765	(	
73-6	13765-13769	Helm	
73-7	13770-13775	Chart	
73-8	13775-13776	)	
73-9	13777-13787	Kubernetes	
73-10	13788-13789	(	
73-11	13789-13794	Agent	
73-12	13794-13795	)	
73-13	13796-13801	Linux	
73-14	13802-13807	macOS	
73-15	13808-13817	OpenShift	
73-16	13818-13825	Windows	
73-17	13826-13834	Bleeding	
73-18	13835-13839	edge	
73-19	13840-13848	releases	
73-20	13849-13857	Official	
73-21	13858-13863	Linux	
73-22	13864-13872	packages	
73-23	13873-13876	Old	
73-24	13877-13883	GitLab	
73-25	13884-13890	Runner	
73-26	13891-13895	URLs	

#Text=Configure Advanced config Autoscale config Autoscale on AWS EC2 Autoscale on AWS Fargate Commands Feature flags OpenShift Running behind a proxy Rate limited requests Self-signed certificates
74-1	13896-13905	Configure	
74-2	13906-13914	Advanced	
74-3	13915-13921	config	
74-4	13922-13931	Autoscale	
74-5	13932-13938	config	
74-6	13939-13948	Autoscale	
74-7	13949-13951	on	
74-8	13952-13955	AWS	
74-9	13956-13959	EC2	
74-10	13960-13969	Autoscale	
74-11	13970-13972	on	
74-12	13973-13976	AWS	
74-13	13977-13984	Fargate	
74-14	13985-13993	Commands	
74-15	13994-14001	Feature	
74-16	14002-14007	flags	
74-17	14008-14017	OpenShift	
74-18	14018-14025	Running	
74-19	14026-14032	behind	
74-20	14033-14034	a	
74-21	14035-14040	proxy	
74-22	14041-14045	Rate	
74-23	14046-14053	limited	
74-24	14054-14062	requests	
74-25	14063-14074	Self-signed	
74-26	14075-14087	certificates	

#Text=System services Speed up job execution Register Examples Executors Custom libvirt LXD Docker Docker Machine Kubernetes Shell SSH Parallels Virtual Box
75-1	14088-14094	System	
75-2	14095-14103	services	
75-3	14104-14109	Speed	
75-4	14110-14112	up	
75-5	14113-14116	job	
75-6	14117-14126	execution	
75-7	14127-14135	Register	
75-8	14136-14144	Examples	
75-9	14145-14154	Executors	
75-10	14155-14161	Custom	
75-11	14162-14169	libvirt	
75-12	14170-14173	LXD	
75-13	14174-14180	Docker	
75-14	14181-14187	Docker	
75-15	14188-14195	Machine	
75-16	14196-14206	Kubernetes	
75-17	14207-14212	Shell	
75-18	14213-14216	SSH	
75-19	14217-14226	Parallels	
75-20	14227-14234	Virtual	
75-21	14235-14238	Box	

#Text=Monitor Security Shells Troubleshoot Best Practices GitLab Helm Charts Install Required tools Cloud cluster preparation AKS EKS GKE OpenShift Deploy
76-1	14239-14246	Monitor	
76-2	14247-14255	Security	
76-3	14256-14262	Shells	
76-4	14263-14275	Troubleshoot	
76-5	14276-14280	Best	
76-6	14281-14290	Practices	
76-7	14291-14297	GitLab	
76-8	14298-14302	Helm	
76-9	14303-14309	Charts	
76-10	14310-14317	Install	
76-11	14318-14326	Required	
76-12	14327-14332	tools	
76-13	14333-14338	Cloud	
76-14	14339-14346	cluster	
76-15	14347-14358	preparation	
76-16	14359-14362	AKS	
76-17	14363-14366	EKS	
76-18	14367-14370	GKE	
76-19	14371-14380	OpenShift	
76-20	14381-14387	Deploy	

#Text=Upgrade Backup and Restore Backup Restore Migrate from Omnibus Version mappings Configure Globals GitLab sub-charts Gitaly chart GitLab Exporter chart
77-1	14388-14395	Upgrade	
77-2	14396-14402	Backup	
77-3	14403-14406	and	
77-4	14407-14414	Restore	
77-5	14415-14421	Backup	
77-6	14422-14429	Restore	
77-7	14430-14437	Migrate	
77-8	14438-14442	from	
77-9	14443-14450	Omnibus	
77-10	14451-14458	Version	
77-11	14459-14467	mappings	
77-12	14468-14477	Configure	
77-13	14478-14485	Globals	
77-14	14486-14492	GitLab	
77-15	14493-14503	sub-charts	
77-16	14504-14510	Gitaly	
77-17	14511-14516	chart	
77-18	14517-14523	GitLab	
77-19	14524-14532	Exporter	
77-20	14533-14538	chart	

#Text=GitLab Grafana chart GitLab Pages chart GitLab Runner chart GitLab Shell chart KAS chart Migrations chart Praefect chart Sidekiq chart Task Runner chart Webservice chart Minio chart
78-1	14539-14545	GitLab	
78-2	14546-14553	Grafana	
78-3	14554-14559	chart	
78-4	14560-14566	GitLab	
78-5	14567-14572	Pages	
78-6	14573-14578	chart	
78-7	14579-14585	GitLab	
78-8	14586-14592	Runner	
78-9	14593-14598	chart	
78-10	14599-14605	GitLab	
78-11	14606-14611	Shell	
78-12	14612-14617	chart	
78-13	14618-14621	KAS	
78-14	14622-14627	chart	
78-15	14628-14638	Migrations	
78-16	14639-14644	chart	
78-17	14645-14653	Praefect	
78-18	14654-14659	chart	
78-19	14660-14667	Sidekiq	
78-20	14668-14673	chart	
78-21	14674-14678	Task	
78-22	14679-14685	Runner	
78-23	14686-14691	chart	
78-24	14692-14702	Webservice	
78-25	14703-14708	chart	
78-26	14709-14714	Minio	
78-27	14715-14720	chart	

#Text=Nginx chart Redis chart Redis HA chart Registry chart Advanced External database External Gitaly External Mattermost External Nginx External object storage External Redis Persistent volumes Troubleshoot
79-1	14721-14726	Nginx	
79-2	14727-14732	chart	
79-3	14733-14738	Redis	
79-4	14739-14744	chart	
79-5	14745-14750	Redis	
79-6	14751-14753	HA	
79-7	14754-14759	chart	
79-8	14760-14768	Registry	
79-9	14769-14774	chart	
79-10	14775-14783	Advanced	
79-11	14784-14792	External	
79-12	14793-14801	database	
79-13	14802-14810	External	
79-14	14811-14817	Gitaly	
79-15	14818-14826	External	
79-16	14827-14837	Mattermost	
79-17	14838-14846	External	
79-18	14847-14852	Nginx	
79-19	14853-14861	External	
79-20	14862-14868	object	
79-21	14869-14876	storage	
79-22	14877-14885	External	
79-23	14886-14891	Redis	
79-24	14892-14902	Persistent	
79-25	14903-14910	volumes	
79-26	14911-14923	Troubleshoot	

#Text=Contribute to GitLab Get started Changelog entries Community roles Design and UI GitLab Development Kit Issues workflow Merge request workflow Code review guidelines Style guides Architecture CI/CD development CI/CD template development
80-1	14924-14934	Contribute	
80-2	14935-14937	to	
80-3	14938-14944	GitLab	
80-4	14945-14948	Get	
80-5	14949-14956	started	
80-6	14957-14966	Changelog	
80-7	14967-14974	entries	
80-8	14975-14984	Community	
80-9	14985-14990	roles	
80-10	14991-14997	Design	
80-11	14998-15001	and	
80-12	15002-15004	UI	
80-13	15005-15011	GitLab	
80-14	15012-15023	Development	
80-15	15024-15027	Kit	
80-16	15028-15034	Issues	
80-17	15035-15043	workflow	
80-18	15044-15049	Merge	
80-19	15050-15057	request	
80-20	15058-15066	workflow	
80-21	15067-15071	Code	
80-22	15072-15078	review	
80-23	15079-15089	guidelines	
80-24	15090-15095	Style	
80-25	15096-15102	guides	
80-26	15103-15115	Architecture	
80-27	15116-15118	CI	
80-28	15118-15119	/	
80-29	15119-15121	CD	
80-30	15122-15133	development	
80-31	15134-15136	CI	
80-32	15136-15137	/	
80-33	15137-15139	CD	
80-34	15140-15148	template	
80-35	15149-15160	development	

#Text=Auto DevOps development Code intelligence Danger bot Database development Case study - filtering by label Case study - namespaces storage statistics Database review guidelines Migrations style guide SQL guidelines Understanding EXPLAIN plans Avoiding downtime in migrations
81-1	15161-15165	Auto	
81-2	15166-15172	DevOps	
81-3	15173-15184	development	
81-4	15185-15189	Code	
81-5	15190-15202	intelligence	
81-6	15203-15209	Danger	
81-7	15210-15213	bot	
81-8	15214-15222	Database	
81-9	15223-15234	development	
81-10	15235-15239	Case	
81-11	15240-15245	study	
81-12	15246-15247	-	
81-13	15248-15257	filtering	
81-14	15258-15260	by	
81-15	15261-15266	label	
81-16	15267-15271	Case	
81-17	15272-15277	study	
81-18	15278-15279	-	
81-19	15280-15290	namespaces	
81-20	15291-15298	storage	
81-21	15299-15309	statistics	
81-22	15310-15318	Database	
81-23	15319-15325	review	
81-24	15326-15336	guidelines	
81-25	15337-15347	Migrations	
81-26	15348-15353	style	
81-27	15354-15359	guide	
81-28	15360-15363	SQL	
81-29	15364-15374	guidelines	
81-30	15375-15388	Understanding	
81-31	15389-15396	EXPLAIN	
81-32	15397-15402	plans	
81-33	15403-15411	Avoiding	
81-34	15412-15420	downtime	
81-35	15421-15423	in	
81-36	15424-15434	migrations	

#Text=Developer guide to logging Development Rake tasks Mass insert Rails models Documentation Style guide GraphQL style guide RESTful API style guide Topic types Process Testing Site architecture Global navigation Deployment process
82-1	15435-15444	Developer	
82-2	15445-15450	guide	
82-3	15451-15453	to	
82-4	15454-15461	logging	
82-5	15462-15473	Development	
82-6	15474-15478	Rake	
82-7	15479-15484	tasks	
82-8	15485-15489	Mass	
82-9	15490-15496	insert	
82-10	15497-15502	Rails	
82-11	15503-15509	models	
82-12	15510-15523	Documentation	
82-13	15524-15529	Style	
82-14	15530-15535	guide	
82-15	15536-15543	GraphQL	
82-16	15544-15549	style	
82-17	15550-15555	guide	
82-18	15556-15563	RESTful	
82-19	15564-15567	API	
82-20	15568-15573	style	
82-21	15574-15579	guide	
82-22	15580-15585	Topic	
82-23	15586-15591	types	
82-24	15592-15599	Process	
82-25	15600-15607	Testing	
82-26	15608-15612	Site	
82-27	15613-15625	architecture	
82-28	15626-15632	Global	
82-29	15633-15643	navigation	
82-30	15644-15654	Deployment	
82-31	15655-15662	process	

#Text=Release process Distributed tracing Experiments Experimentation module GLEX Feature flags for GitLab development Controlling feature flags Documenting feature flags Framework - DeclarativePolicy Frontend development Accessibility
83-1	15663-15670	Release	
83-2	15671-15678	process	
83-3	15679-15690	Distributed	
83-4	15691-15698	tracing	
83-5	15699-15710	Experiments	
83-6	15711-15726	Experimentation	
83-7	15727-15733	module	
83-8	15734-15738	GLEX	
83-9	15739-15746	Feature	
83-10	15747-15752	flags	
83-11	15753-15756	for	
83-12	15757-15763	GitLab	
83-13	15764-15775	development	
83-14	15776-15787	Controlling	
83-15	15788-15795	feature	
83-16	15796-15801	flags	
83-17	15802-15813	Documenting	
83-18	15814-15821	feature	
83-19	15822-15827	flags	
83-20	15828-15837	Framework	
83-21	15838-15839	-	
83-22	15840-15857	DeclarativePolicy	
83-23	15858-15866	Frontend	
83-24	15867-15878	development	
83-25	15879-15892	Accessibility	

#Text=Architecture Axios Dark mode Design patterns Development process Droplab Emojis Filter Frontend FAQ GraphQL Icons and SVG illustrations InputSetter Performance
84-1	15893-15905	Architecture	
84-2	15906-15911	Axios	
84-3	15912-15916	Dark	
84-4	15917-15921	mode	
84-5	15922-15928	Design	
84-6	15929-15937	patterns	
84-7	15938-15949	Development	
84-8	15950-15957	process	
84-9	15958-15965	Droplab	
84-10	15966-15972	Emojis	
84-11	15973-15979	Filter	
84-12	15980-15988	Frontend	
84-13	15989-15992	FAQ	
84-14	15993-16000	GraphQL	
84-15	16001-16006	Icons	
84-16	16007-16010	and	
84-17	16011-16014	SVG	
84-18	16015-16028	illustrations	
84-19	16029-16040	InputSetter	
84-20	16041-16052	Performance	

#Text=Principles Security Tooling Vuex Vue Widgets GitLab Pages development Geo development Geo framework Gitaly development GitLab Design System GitLab development style guides
85-1	16053-16063	Principles	
85-2	16064-16072	Security	
85-3	16073-16080	Tooling	
85-4	16081-16085	Vuex	
85-5	16086-16089	Vue	
85-6	16090-16097	Widgets	
85-7	16098-16104	GitLab	
85-8	16105-16110	Pages	
85-9	16111-16122	development	
85-10	16123-16126	Geo	
85-11	16127-16138	development	
85-12	16139-16142	Geo	
85-13	16143-16152	framework	
85-14	16153-16159	Gitaly	
85-15	16160-16171	development	
85-16	16172-16178	GitLab	
85-17	16179-16185	Design	
85-18	16186-16192	System	
85-19	16193-16199	GitLab	
85-20	16200-16211	development	
85-21	16212-16217	style	
85-22	16218-16224	guides	

#Text=API style guide Go standards and style guidelines GraphQL API style guide Guidelines for shell commands HTML style guide JavaScript style guide Newlines style guide Python development guidelines SCSS style guide Shell scripting standards and style guidelines
86-1	16225-16228	API	
86-2	16229-16234	style	
86-3	16235-16240	guide	
86-4	16241-16243	Go	
86-5	16244-16253	standards	
86-6	16254-16257	and	
86-7	16258-16263	style	
86-8	16264-16274	guidelines	
86-9	16275-16282	GraphQL	
86-10	16283-16286	API	
86-11	16287-16292	style	
86-12	16293-16298	guide	
86-13	16299-16309	Guidelines	
86-14	16310-16313	for	
86-15	16314-16319	shell	
86-16	16320-16328	commands	
86-17	16329-16333	HTML	
86-18	16334-16339	style	
86-19	16340-16345	guide	
86-20	16346-16356	JavaScript	
86-21	16357-16362	style	
86-22	16363-16368	guide	
86-23	16369-16377	Newlines	
86-24	16378-16383	style	
86-25	16384-16389	guide	
86-26	16390-16396	Python	
86-27	16397-16408	development	
86-28	16409-16419	guidelines	
86-29	16420-16424	SCSS	
86-30	16425-16430	style	
86-31	16431-16436	guide	
86-32	16437-16442	Shell	
86-33	16443-16452	scripting	
86-34	16453-16462	standards	
86-35	16463-16466	and	
86-36	16467-16472	style	
86-37	16473-16483	guidelines	

#Text=Sidekiq debugging Sidekiq style guide Vue style guide GitLab group migration GitLab project pipelines GitLab Runner Review GitLab Runner Add new Windows version support for Docker executor GraphQL development
87-1	16484-16491	Sidekiq	
87-2	16492-16501	debugging	
87-3	16502-16509	Sidekiq	
87-4	16510-16515	style	
87-5	16516-16521	guide	
87-6	16522-16525	Vue	
87-7	16526-16531	style	
87-8	16532-16537	guide	
87-9	16538-16544	GitLab	
87-10	16545-16550	group	
87-11	16551-16560	migration	
87-12	16561-16567	GitLab	
87-13	16568-16575	project	
87-14	16576-16585	pipelines	
87-15	16586-16592	GitLab	
87-16	16593-16599	Runner	
87-17	16600-16606	Review	
87-18	16607-16613	GitLab	
87-19	16614-16620	Runner	
87-20	16621-16624	Add	
87-21	16625-16628	new	
87-22	16629-16636	Windows	
87-23	16637-16644	version	
87-24	16645-16652	support	
87-25	16653-16656	for	
87-26	16657-16663	Docker	
87-27	16664-16672	executor	
87-28	16673-16680	GraphQL	
87-29	16681-16692	development	

#Text=GraphQL BatchLoader GraphQL pagination GraphQL Pro Helm Charts Architecture of Cloud native GitLab Helm charts Backup and Restore Goals Architecture Design Decisions Resource Usage Environment setup Style guide
88-1	16693-16700	GraphQL	
88-2	16701-16712	BatchLoader	
88-3	16713-16720	GraphQL	
88-4	16721-16731	pagination	
88-5	16732-16739	GraphQL	
88-6	16740-16743	Pro	
88-7	16744-16748	Helm	
88-8	16749-16755	Charts	
88-9	16756-16768	Architecture	
88-10	16769-16771	of	
88-11	16772-16777	Cloud	
88-12	16778-16784	native	
88-13	16785-16791	GitLab	
88-14	16792-16796	Helm	
88-15	16797-16803	charts	
88-16	16804-16810	Backup	
88-17	16811-16814	and	
88-18	16815-16822	Restore	
88-19	16823-16828	Goals	
88-20	16829-16841	Architecture	
88-21	16842-16848	Design	
88-22	16849-16858	Decisions	
88-23	16859-16867	Resource	
88-24	16868-16873	Usage	
88-25	16874-16885	Environment	
88-26	16886-16891	setup	
88-27	16892-16897	Style	
88-28	16898-16903	guide	

#Text=Versioning and release Import/Export Instrumenting Ruby code Issuable-like Rails models utilities Issue types Kubernetes Agent Routing kas requests Repository overview Identity and authentication User stories
89-1	16904-16914	Versioning	
89-2	16915-16918	and	
89-3	16919-16926	release	
89-4	16927-16933	Import	
89-5	16933-16934	/	
89-6	16934-16940	Export	
89-7	16941-16954	Instrumenting	
89-8	16955-16959	Ruby	
89-9	16960-16964	code	
89-10	16965-16978	Issuable-like	
89-11	16979-16984	Rails	
89-12	16985-16991	models	
89-13	16992-17001	utilities	
89-14	17002-17007	Issue	
89-15	17008-17013	types	
89-16	17014-17024	Kubernetes	
89-17	17025-17030	Agent	
89-18	17031-17038	Routing	
89-19	17039-17042	kas	
89-20	17043-17051	requests	
89-21	17052-17062	Repository	
89-22	17063-17071	overview	
89-23	17072-17080	Identity	
89-24	17081-17084	and	
89-25	17085-17099	authentication	
89-26	17100-17104	User	
89-27	17105-17112	stories	

#Text=GitOps with the Kubernetes Agent Running locally Kubernetes integration Omnibus GitLab Build locally Build Omnibus GitLab package Build all-in-one Docker image Information for GitLab team members
90-1	17113-17119	GitOps	
90-2	17120-17124	with	
90-3	17125-17128	the	
90-4	17129-17139	Kubernetes	
90-5	17140-17145	Agent	
90-6	17146-17153	Running	
90-7	17154-17161	locally	
90-8	17162-17172	Kubernetes	
90-9	17173-17184	integration	
90-10	17185-17192	Omnibus	
90-11	17193-17199	GitLab	
90-12	17200-17205	Build	
90-13	17206-17213	locally	
90-14	17214-17219	Build	
90-15	17220-17227	Omnibus	
90-16	17228-17234	GitLab	
90-17	17235-17242	package	
90-18	17243-17248	Build	
90-19	17249-17259	all-in-one	
90-20	17260-17266	Docker	
90-21	17267-17272	image	
90-22	17273-17284	Information	
90-23	17285-17288	for	
90-24	17289-17295	GitLab	
90-25	17296-17300	team	
90-26	17301-17308	members	

#Text=Set up a development environment Config options Changing YAML config options Adding deprecation messages Adding new gitlab-ctl commands Adding new services Adding new software definitions Creating patches Installing OpenShift
91-1	17309-17312	Set	
91-2	17313-17315	up	
91-3	17316-17317	a	
91-4	17318-17329	development	
91-5	17330-17341	environment	
91-6	17342-17348	Config	
91-7	17349-17356	options	
91-8	17357-17365	Changing	
91-9	17366-17370	YAML	
91-10	17371-17377	config	
91-11	17378-17385	options	
91-12	17386-17392	Adding	
91-13	17393-17404	deprecation	
91-14	17405-17413	messages	
91-15	17414-17420	Adding	
91-16	17421-17424	new	
91-17	17425-17435	gitlab-ctl	
91-18	17436-17444	commands	
91-19	17445-17451	Adding	
91-20	17452-17455	new	
91-21	17456-17464	services	
91-22	17465-17471	Adding	
91-23	17472-17475	new	
91-24	17476-17484	software	
91-25	17485-17496	definitions	
91-26	17497-17505	Creating	
91-27	17506-17513	patches	
91-28	17514-17524	Installing	
91-29	17525-17534	OpenShift	

#Text=Managing PostgreSQL versions Working with public_attributes.json Package development Permissions guide Testing standards and styles Flaky tests Frontend testing standards and style guidelines GitLab tests in CI context Review apps Smoke tests Testing best practices
92-1	17535-17543	Managing	
92-2	17544-17554	PostgreSQL	
92-3	17555-17563	versions	
92-4	17564-17571	Working	
92-5	17572-17576	with	
92-6	17577-17599	public_attributes.json	
92-7	17600-17607	Package	
92-8	17608-17619	development	
92-9	17620-17631	Permissions	
92-10	17632-17637	guide	
92-11	17638-17645	Testing	
92-12	17646-17655	standards	
92-13	17656-17659	and	
92-14	17660-17666	styles	
92-15	17667-17672	Flaky	
92-16	17673-17678	tests	
92-17	17679-17687	Frontend	
92-18	17688-17695	testing	
92-19	17696-17705	standards	
92-20	17706-17709	and	
92-21	17710-17715	style	
92-22	17716-17726	guidelines	
92-23	17727-17733	GitLab	
92-24	17734-17739	tests	
92-25	17740-17742	in	
92-26	17743-17745	CI	
92-27	17746-17753	context	
92-28	17754-17760	Review	
92-29	17761-17765	apps	
92-30	17766-17771	Smoke	
92-31	17772-17777	tests	
92-32	17778-17785	Testing	
92-33	17786-17790	best	
92-34	17791-17800	practices	

#Text=Testing levels Testing Rails migrations Testing Rake tasks Testing (end to end) Beginner's guide to writing end-to-end tests Best practices when writing end-to-end tests Dynamic element validation Flows in GitLab QA
93-1	17801-17808	Testing	
93-2	17809-17815	levels	
93-3	17816-17823	Testing	
93-4	17824-17829	Rails	
93-5	17830-17840	migrations	
93-6	17841-17848	Testing	
93-7	17849-17853	Rake	
93-8	17854-17859	tasks	
93-9	17860-17867	Testing	
93-10	17868-17869	(	
93-11	17869-17872	end	
93-12	17873-17875	to	
93-13	17876-17879	end	
93-14	17879-17880	)	
93-15	17881-17891	Beginner's	
93-16	17892-17897	guide	
93-17	17898-17900	to	
93-18	17901-17908	writing	
93-19	17909-17919	end-to-end	
93-20	17920-17925	tests	
93-21	17926-17930	Best	
93-22	17931-17940	practices	
93-23	17941-17945	when	
93-24	17946-17953	writing	
93-25	17954-17964	end-to-end	
93-26	17965-17970	tests	
93-27	17971-17978	Dynamic	
93-28	17979-17986	element	
93-29	17987-17997	validation	
93-30	17998-18003	Flows	
93-31	18004-18006	in	
93-32	18007-18013	GitLab	
93-33	18014-18016	QA	

#Text=Page objects in GitLab QA Resource class in GitLab QA Style guide for writing end-to-end tests Testing with feature flags Translate GitLab Externalization Translation Proofreading Merging Snowplow guide Usage Ping guide
94-1	18017-18021	Page	
94-2	18022-18029	objects	
94-3	18030-18032	in	
94-4	18033-18039	GitLab	
94-5	18040-18042	QA	
94-6	18043-18051	Resource	
94-7	18052-18057	class	
94-8	18058-18060	in	
94-9	18061-18067	GitLab	
94-10	18068-18070	QA	
94-11	18071-18076	Style	
94-12	18077-18082	guide	
94-13	18083-18086	for	
94-14	18087-18094	writing	
94-15	18095-18105	end-to-end	
94-16	18106-18111	tests	
94-17	18112-18119	Testing	
94-18	18120-18124	with	
94-19	18125-18132	feature	
94-20	18133-18138	flags	
94-21	18139-18148	Translate	
94-22	18149-18155	GitLab	
94-23	18156-18171	Externalization	
94-24	18172-18183	Translation	
94-25	18184-18196	Proofreading	
94-26	18197-18204	Merging	
94-27	18205-18213	Snowplow	
94-28	18214-18219	guide	
94-29	18220-18225	Usage	
94-30	18226-18230	Ping	
94-31	18231-18236	guide	

#Text=Metrics dictionary guide Metrics dictionary Value Stream Analytics Working with Prometheus metrics GitLab Docs Contributor and Development Docs Performance Guidelines Workflow Tooling Benchmarks Profiling Development
95-1	18237-18244	Metrics	
95-2	18245-18255	dictionary	
95-3	18256-18261	guide	
95-4	18262-18269	Metrics	
95-5	18270-18280	dictionary	
95-6	18281-18286	Value	
95-7	18287-18293	Stream	
95-8	18294-18303	Analytics	
95-9	18304-18311	Working	
95-10	18312-18316	with	
95-11	18317-18327	Prometheus	
95-12	18328-18335	metrics	
95-13	18336-18342	GitLab	
95-14	18343-18347	Docs	
95-15	18348-18359	Contributor	
95-16	18360-18363	and	
95-17	18364-18375	Development	
95-18	18376-18380	Docs	
95-19	18381-18392	Performance	
95-20	18393-18403	Guidelines	
95-21	18404-18412	Workflow	
95-22	18413-18420	Tooling	
95-23	18421-18431	Benchmarks	
95-24	18432-18441	Profiling	
95-25	18442-18453	Development	

#Text=Production RSpec profiling Memory optimization Memory allocations Checking memory pressure of own code Different types of allocations Using Memory Profiler Rbtrace Importance of Changes Slow Operations & Sidekiq Git Operations
96-1	18454-18464	Production	
96-2	18465-18470	RSpec	
96-3	18471-18480	profiling	
96-4	18481-18487	Memory	
96-5	18488-18500	optimization	
96-6	18501-18507	Memory	
96-7	18508-18519	allocations	
96-8	18520-18528	Checking	
96-9	18529-18535	memory	
96-10	18536-18544	pressure	
96-11	18545-18547	of	
96-12	18548-18551	own	
96-13	18552-18556	code	
96-14	18557-18566	Different	
96-15	18567-18572	types	
96-16	18573-18575	of	
96-17	18576-18587	allocations	
96-18	18588-18593	Using	
96-19	18594-18600	Memory	
96-20	18601-18609	Profiler	
96-21	18610-18617	Rbtrace	
96-22	18618-18628	Importance	
96-23	18629-18631	of	
96-24	18632-18639	Changes	
96-25	18640-18644	Slow	
96-26	18645-18655	Operations	
96-27	18656-18657	&	
96-28	18658-18665	Sidekiq	
96-29	18666-18669	Git	
96-30	18670-18680	Operations	

#Text=Caching String Freezing Banzai pipelines and filters Reading from files and other data sources Recommendations Anti-Patterns Moving Allocations to Constants How to seed a database with millions of rows Examples Performance Guidelines
97-1	18681-18688	Caching	
97-2	18689-18695	String	
97-3	18696-18704	Freezing	
97-4	18705-18711	Banzai	
97-5	18712-18721	pipelines	
97-6	18722-18725	and	
97-7	18726-18733	filters	
97-8	18734-18741	Reading	
97-9	18742-18746	from	
97-10	18747-18752	files	
97-11	18753-18756	and	
97-12	18757-18762	other	
97-13	18763-18767	data	
97-14	18768-18775	sources	
97-15	18776-18791	Recommendations	
97-16	18792-18805	Anti-Patterns	
97-17	18806-18812	Moving	
97-18	18813-18824	Allocations	
97-19	18825-18827	to	
97-20	18828-18837	Constants	
97-21	18838-18841	How	
97-22	18842-18844	to	
97-23	18845-18849	seed	
97-24	18850-18851	a	
97-25	18852-18860	database	
97-26	18861-18865	with	
97-27	18866-18874	millions	
97-28	18875-18877	of	
97-29	18878-18882	rows	
97-30	18883-18891	Examples	
97-31	18892-18903	Performance	
97-32	18904-18914	Guidelines	

#Text=This document describes various guidelines to follow to ensure good and consistent performance of GitLab. Workflow The process of solving performance problems is roughly as follows: Make sure there’s an issue open somewhere (for example, on the GitLab CE issue tracker), and create one if there is not. See #15607 for an example.
98-1	18915-18919	This	
98-2	18920-18928	document	
98-3	18929-18938	describes	
98-4	18939-18946	various	
98-5	18947-18957	guidelines	
98-6	18958-18960	to	
98-7	18961-18967	follow	
98-8	18968-18970	to	
98-9	18971-18977	ensure	
98-10	18978-18982	good	
98-11	18983-18986	and	
98-12	18987-18997	consistent	
98-13	18998-19009	performance	
98-14	19010-19012	of	
98-15	19013-19019	GitLab	
98-16	19019-19020	.	
98-17	19021-19029	Workflow	
98-18	19030-19033	The	
98-19	19034-19041	process	
98-20	19042-19044	of	
98-21	19045-19052	solving	
98-22	19053-19064	performance	
98-23	19065-19073	problems	
98-24	19074-19076	is	
98-25	19077-19084	roughly	
98-26	19085-19087	as	
98-27	19088-19095	follows	
98-28	19095-19096	:	
98-29	19097-19101	Make	
98-30	19102-19106	sure	
98-31	19107-19112	there	
98-32	19112-19113	’	
98-33	19113-19114	s	
98-34	19115-19117	an	
98-35	19118-19123	issue	
98-36	19124-19128	open	
98-37	19129-19138	somewhere	
98-38	19139-19140	(	
98-39	19140-19143	for	
98-40	19144-19151	example	
98-41	19151-19152	,	
98-42	19153-19155	on	
98-43	19156-19159	the	
98-44	19160-19166	GitLab	
98-45	19167-19169	CE	
98-46	19170-19175	issue	
98-47	19176-19183	tracker	
98-48	19183-19184	)	
98-49	19184-19185	,	
98-50	19186-19189	and	
98-51	19190-19196	create	
98-52	19197-19200	one	
98-53	19201-19203	if	
98-54	19204-19209	there	
98-55	19210-19212	is	
98-56	19213-19216	not	
98-57	19216-19217	.	
98-58	19218-19221	See	
98-59	19222-19228	#15607	
98-60	19229-19232	for	
98-61	19233-19235	an	
98-62	19236-19243	example	
98-63	19243-19244	.	

#Text=Measure the performance of the code in a production environment such as GitLab.com (see the Tooling section below). Performance should be measured over a period of at least 24 hours. Add your findings based on the measurement period (screenshots of graphs, timings, etc) to the issue mentioned in step 1.
99-1	19245-19252	Measure	
99-2	19253-19256	the	
99-3	19257-19268	performance	
99-4	19269-19271	of	
99-5	19272-19275	the	
99-6	19276-19280	code	
99-7	19281-19283	in	
99-8	19284-19285	a	
99-9	19286-19296	production	
99-10	19297-19308	environment	
99-11	19309-19313	such	
99-12	19314-19316	as	
99-13	19317-19327	GitLab.com	
99-14	19328-19329	(	
99-15	19329-19332	see	
99-16	19333-19336	the	
99-17	19337-19344	Tooling	
99-18	19345-19352	section	
99-19	19353-19358	below	
99-20	19358-19359	)	
99-21	19359-19360	.	
99-22	19361-19372	Performance	
99-23	19373-19379	should	
99-24	19380-19382	be	
99-25	19383-19391	measured	
99-26	19392-19396	over	
99-27	19397-19398	a	
99-28	19399-19405	period	
99-29	19406-19408	of	
99-30	19409-19411	at	
99-31	19412-19417	least	
99-32	19418-19420	24	
99-33	19421-19426	hours	
99-34	19426-19427	.	
99-35	19428-19431	Add	
99-36	19432-19436	your	
99-37	19437-19445	findings	
99-38	19446-19451	based	
99-39	19452-19454	on	
99-40	19455-19458	the	
99-41	19459-19470	measurement	
99-42	19471-19477	period	
99-43	19478-19479	(	
99-44	19479-19490	screenshots	
99-45	19491-19493	of	
99-46	19494-19500	graphs	
99-47	19500-19501	,	
99-48	19502-19509	timings	
99-49	19509-19510	,	
99-50	19511-19514	etc	
99-51	19514-19515	)	
99-52	19516-19518	to	
99-53	19519-19522	the	
99-54	19523-19528	issue	
99-55	19529-19538	mentioned	
99-56	19539-19541	in	
99-57	19542-19546	step	
99-58	19547-19548	1	
99-59	19548-19549	.	

#Text=Solve the problem. Create a merge request, assign the “Performance” label and follow the performance review process. Once a change has been deployed make sure to again measure for at least 24 hours to see if your changes have any impact on the production environment. Repeat until you’re done.
100-1	19550-19555	Solve	
100-2	19556-19559	the	
100-3	19560-19567	problem	
100-4	19567-19568	.	
100-5	19569-19575	Create	
100-6	19576-19577	a	
100-7	19578-19583	merge	
100-8	19584-19591	request	
100-9	19591-19592	,	
100-10	19593-19599	assign	
100-11	19600-19603	the	
100-12	19604-19605	“	
100-13	19605-19616	Performance	
100-14	19616-19617	”	
100-15	19618-19623	label	
100-16	19624-19627	and	
100-17	19628-19634	follow	
100-18	19635-19638	the	
100-19	19639-19650	performance	
100-20	19651-19657	review	
100-21	19658-19665	process	
100-22	19665-19666	.	
100-23	19667-19671	Once	
100-24	19672-19673	a	
100-25	19674-19680	change	
100-26	19681-19684	has	
100-27	19685-19689	been	
100-28	19690-19698	deployed	
100-29	19699-19703	make	
100-30	19704-19708	sure	
100-31	19709-19711	to	
100-32	19712-19717	again	
100-33	19718-19725	measure	
100-34	19726-19729	for	
100-35	19730-19732	at	
100-36	19733-19738	least	
100-37	19739-19741	24	
100-38	19742-19747	hours	
100-39	19748-19750	to	
100-40	19751-19754	see	
100-41	19755-19757	if	
100-42	19758-19762	your	
100-43	19763-19770	changes	
100-44	19771-19775	have	
100-45	19776-19779	any	
100-46	19780-19786	impact	
100-47	19787-19789	on	
100-48	19790-19793	the	
100-49	19794-19804	production	
100-50	19805-19816	environment	
100-51	19816-19817	.	
100-52	19818-19824	Repeat	
100-53	19825-19830	until	
100-54	19831-19834	you	
100-55	19834-19835	’	
100-56	19835-19837	re	
100-57	19838-19842	done	
100-58	19842-19843	.	

#Text=When providing timings make sure to provide: The 95th percentile The 99th percentile The mean When providing screenshots of graphs, make sure that both the X and Y axes and the legend are clearly visible. If you happen to have access to GitLab.com’s own
101-1	19844-19848	When	
101-2	19849-19858	providing	
101-3	19859-19866	timings	
101-4	19867-19871	make	
101-5	19872-19876	sure	
101-6	19877-19879	to	
101-7	19880-19887	provide	
101-8	19887-19888	:	
101-9	19889-19892	The	
101-10	19893-19897	95th	
101-11	19898-19908	percentile	
101-12	19909-19912	The	
101-13	19913-19917	99th	
101-14	19918-19928	percentile	
101-15	19929-19932	The	
101-16	19933-19937	mean	
101-17	19938-19942	When	
101-18	19943-19952	providing	
101-19	19953-19964	screenshots	
101-20	19965-19967	of	
101-21	19968-19974	graphs	
101-22	19974-19975	,	
101-23	19976-19980	make	
101-24	19981-19985	sure	
101-25	19986-19990	that	
101-26	19991-19995	both	
101-27	19996-19999	the	
101-28	20000-20001	X	
101-29	20002-20005	and	
101-30	20006-20007	Y	
101-31	20008-20012	axes	
101-32	20013-20016	and	
101-33	20017-20020	the	
101-34	20021-20027	legend	
101-35	20028-20031	are	
101-36	20032-20039	clearly	
101-37	20040-20047	visible	
101-38	20047-20048	.	
101-39	20049-20051	If	
101-40	20052-20055	you	
101-41	20056-20062	happen	
101-42	20063-20065	to	
101-43	20066-20070	have	
101-44	20071-20077	access	
101-45	20078-20080	to	
101-46	20081-20091	GitLab.com	
101-47	20091-20092	’	
101-48	20092-20093	s	
101-49	20094-20097	own	

#Text=monitoring tools you should also provide a link to any relevant graphs/dashboards. Tooling GitLab provides built-in tools to help improve performance and availability: Profiling. Distributed Tracing GitLab Performance Monitoring. Request Profiling.
102-1	20098-20108	monitoring	
102-2	20109-20114	tools	
102-3	20115-20118	you	
102-4	20119-20125	should	
102-5	20126-20130	also	
102-6	20131-20138	provide	
102-7	20139-20140	a	
102-8	20141-20145	link	
102-9	20146-20148	to	
102-10	20149-20152	any	
102-11	20153-20161	relevant	
102-12	20162-20168	graphs	
102-13	20168-20169	/	
102-14	20169-20179	dashboards	
102-15	20179-20180	.	
102-16	20181-20188	Tooling	
102-17	20189-20195	GitLab	
102-18	20196-20204	provides	
102-19	20205-20213	built-in	
102-20	20214-20219	tools	
102-21	20220-20222	to	
102-22	20223-20227	help	
102-23	20228-20235	improve	
102-24	20236-20247	performance	
102-25	20248-20251	and	
102-26	20252-20264	availability	
102-27	20264-20265	:	
102-28	20266-20275	Profiling	
102-29	20275-20276	.	
102-30	20277-20288	Distributed	
102-31	20289-20296	Tracing	
102-32	20297-20303	GitLab	
102-33	20304-20315	Performance	
102-34	20316-20326	Monitoring	
102-35	20326-20327	.	
102-36	20328-20335	Request	
102-37	20336-20345	Profiling	
102-38	20345-20346	.	

#Text=QueryRecoder for preventing N+1 regressions. Chaos endpoints for testing failure scenarios. Intended mainly for testing availability. Service measurement for measuring and logging service execution. GitLab team members can use GitLab.com’s performance monitoring systems located at dashboards.gitlab.net, this requires you to log in using your
103-1	20347-20359	QueryRecoder	
103-2	20360-20363	for	
103-3	20364-20374	preventing	
103-4	20375-20376	N	
103-5	20376-20377	+	
103-6	20377-20378	1	
103-7	20379-20390	regressions	
103-8	20390-20391	.	
103-9	20392-20397	Chaos	
103-10	20398-20407	endpoints	
103-11	20408-20411	for	
103-12	20412-20419	testing	
103-13	20420-20427	failure	
103-14	20428-20437	scenarios	
103-15	20437-20438	.	
103-16	20439-20447	Intended	
103-17	20448-20454	mainly	
103-18	20455-20458	for	
103-19	20459-20466	testing	
103-20	20467-20479	availability	
103-21	20479-20480	.	
103-22	20481-20488	Service	
103-23	20489-20500	measurement	
103-24	20501-20504	for	
103-25	20505-20514	measuring	
103-26	20515-20518	and	
103-27	20519-20526	logging	
103-28	20527-20534	service	
103-29	20535-20544	execution	
103-30	20544-20545	.	
103-31	20546-20552	GitLab	
103-32	20553-20557	team	
103-33	20558-20565	members	
103-34	20566-20569	can	
103-35	20570-20573	use	
103-36	20574-20584	GitLab.com	
103-37	20584-20585	’	
103-38	20585-20586	s	
103-39	20587-20598	performance	
103-40	20599-20609	monitoring	
103-41	20610-20617	systems	
103-42	20618-20625	located	
103-43	20626-20628	at	
103-44	20629-20650	dashboards.gitlab.net	
103-45	20650-20651	,	
103-46	20652-20656	this	
103-47	20657-20665	requires	
103-48	20666-20669	you	
103-49	20670-20672	to	
103-50	20673-20676	log	
103-51	20677-20679	in	
103-52	20680-20685	using	
103-53	20686-20690	your	

#Text=@gitlab.com email address. Non-GitLab team-members are advised to set up their own Prometheus and Grafana stack. Benchmarks Benchmarks are almost always useless. Benchmarks usually only test small bits of code in isolation and often only measure the best case scenario. On top of that,
104-1	20691-20692	@	
104-2	20692-20702	gitlab.com	
104-3	20703-20708	email	
104-4	20709-20716	address	
104-5	20716-20717	.	
104-6	20718-20728	Non-GitLab	
104-7	20729-20741	team-members	
104-8	20742-20745	are	
104-9	20746-20753	advised	
104-10	20754-20756	to	
104-11	20757-20760	set	
104-12	20761-20763	up	
104-13	20764-20769	their	
104-14	20770-20773	own	
104-15	20774-20784	Prometheus	
104-16	20785-20788	and	
104-17	20789-20796	Grafana	
104-18	20797-20802	stack	
104-19	20802-20803	.	
104-20	20804-20814	Benchmarks	
104-21	20815-20825	Benchmarks	
104-22	20826-20829	are	
104-23	20830-20836	almost	
104-24	20837-20843	always	
104-25	20844-20851	useless	
104-26	20851-20852	.	
104-27	20853-20863	Benchmarks	
104-28	20864-20871	usually	
104-29	20872-20876	only	
104-30	20877-20881	test	
104-31	20882-20887	small	
104-32	20888-20892	bits	
104-33	20893-20895	of	
104-34	20896-20900	code	
104-35	20901-20903	in	
104-36	20904-20913	isolation	
104-37	20914-20917	and	
104-38	20918-20923	often	
104-39	20924-20928	only	
104-40	20929-20936	measure	
104-41	20937-20940	the	
104-42	20941-20945	best	
104-43	20946-20950	case	
104-44	20951-20959	scenario	
104-45	20959-20960	.	
104-46	20961-20963	On	
104-47	20964-20967	top	
104-48	20968-20970	of	
104-49	20971-20975	that	
104-50	20975-20976	,	

#Text=benchmarks for libraries (such as a Gem) tend to be biased in favour of the library. After all there’s little benefit to an author publishing a benchmark that shows they perform worse than their competitors. Benchmarks are only really useful when you need a rough (emphasis on “rough”) understanding of the impact of your changes. For example, if a certain method is
105-1	20977-20987	benchmarks	
105-2	20988-20991	for	
105-3	20992-21001	libraries	
105-4	21002-21003	(	
105-5	21003-21007	such	
105-6	21008-21010	as	
105-7	21011-21012	a	
105-8	21013-21016	Gem	
105-9	21016-21017	)	
105-10	21018-21022	tend	
105-11	21023-21025	to	
105-12	21026-21028	be	
105-13	21029-21035	biased	
105-14	21036-21038	in	
105-15	21039-21045	favour	
105-16	21046-21048	of	
105-17	21049-21052	the	
105-18	21053-21060	library	
105-19	21060-21061	.	
105-20	21062-21067	After	
105-21	21068-21071	all	
105-22	21072-21077	there	
105-23	21077-21078	’	
105-24	21078-21079	s	
105-25	21080-21086	little	
105-26	21087-21094	benefit	
105-27	21095-21097	to	
105-28	21098-21100	an	
105-29	21101-21107	author	
105-30	21108-21118	publishing	
105-31	21119-21120	a	
105-32	21121-21130	benchmark	
105-33	21131-21135	that	
105-34	21136-21141	shows	
105-35	21142-21146	they	
105-36	21147-21154	perform	
105-37	21155-21160	worse	
105-38	21161-21165	than	
105-39	21166-21171	their	
105-40	21172-21183	competitors	
105-41	21183-21184	.	
105-42	21185-21195	Benchmarks	
105-43	21196-21199	are	
105-44	21200-21204	only	
105-45	21205-21211	really	
105-46	21212-21218	useful	
105-47	21219-21223	when	
105-48	21224-21227	you	
105-49	21228-21232	need	
105-50	21233-21234	a	
105-51	21235-21240	rough	
105-52	21241-21242	(	
105-53	21242-21250	emphasis	
105-54	21251-21253	on	
105-55	21254-21255	“	
105-56	21255-21260	rough	
105-57	21260-21261	”	
105-58	21261-21262	)	
105-59	21263-21276	understanding	
105-60	21277-21279	of	
105-61	21280-21283	the	
105-62	21284-21290	impact	
105-63	21291-21293	of	
105-64	21294-21298	your	
105-65	21299-21306	changes	
105-66	21306-21307	.	
105-67	21308-21311	For	
105-68	21312-21319	example	
105-69	21319-21320	,	
105-70	21321-21323	if	
105-71	21324-21325	a	
105-72	21326-21333	certain	
105-73	21334-21340	method	
105-74	21341-21343	is	

#Text=slow a benchmark can be used to see if the changes you’re making have any impact on the method’s performance. However, even when a benchmark shows your changes improve performance there’s no guarantee the performance also improves in a production environment. When writing benchmarks you should almost always use benchmark-ips. Ruby’s Benchmark
106-1	21344-21348	slow	
106-2	21349-21350	a	
106-3	21351-21360	benchmark	
106-4	21361-21364	can	
106-5	21365-21367	be	
106-6	21368-21372	used	
106-7	21373-21375	to	
106-8	21376-21379	see	
106-9	21380-21382	if	
106-10	21383-21386	the	
106-11	21387-21394	changes	
106-12	21395-21398	you	
106-13	21398-21399	’	
106-14	21399-21401	re	
106-15	21402-21408	making	
106-16	21409-21413	have	
106-17	21414-21417	any	
106-18	21418-21424	impact	
106-19	21425-21427	on	
106-20	21428-21431	the	
106-21	21432-21438	method	
106-22	21438-21439	’	
106-23	21439-21440	s	
106-24	21441-21452	performance	
106-25	21452-21453	.	
106-26	21454-21461	However	
106-27	21461-21462	,	
106-28	21463-21467	even	
106-29	21468-21472	when	
106-30	21473-21474	a	
106-31	21475-21484	benchmark	
106-32	21485-21490	shows	
106-33	21491-21495	your	
106-34	21496-21503	changes	
106-35	21504-21511	improve	
106-36	21512-21523	performance	
106-37	21524-21529	there	
106-38	21529-21530	’	
106-39	21530-21531	s	
106-40	21532-21534	no	
106-41	21535-21544	guarantee	
106-42	21545-21548	the	
106-43	21549-21560	performance	
106-44	21561-21565	also	
106-45	21566-21574	improves	
106-46	21575-21577	in	
106-47	21578-21579	a	
106-48	21580-21590	production	
106-49	21591-21602	environment	
106-50	21602-21603	.	
106-51	21604-21608	When	
106-52	21609-21616	writing	
106-53	21617-21627	benchmarks	
106-54	21628-21631	you	
106-55	21632-21638	should	
106-56	21639-21645	almost	
106-57	21646-21652	always	
106-58	21653-21656	use	
106-59	21657-21670	benchmark-ips	
106-60	21670-21671	.	
106-61	21672-21676	Ruby	
106-62	21676-21677	’	
106-63	21677-21678	s	
106-64	21679-21688	Benchmark	

#Text=module that comes with the standard library is rarely useful as it runs either a single iteration (when using Benchmark.bm) or two iterations (when using Benchmark.bmbm). Running this few iterations means external factors, such as a video streaming in the background, can very easily skew the benchmark
107-1	21689-21695	module	
107-2	21696-21700	that	
107-3	21701-21706	comes	
107-4	21707-21711	with	
107-5	21712-21715	the	
107-6	21716-21724	standard	
107-7	21725-21732	library	
107-8	21733-21735	is	
107-9	21736-21742	rarely	
107-10	21743-21749	useful	
107-11	21750-21752	as	
107-12	21753-21755	it	
107-13	21756-21760	runs	
107-14	21761-21767	either	
107-15	21768-21769	a	
107-16	21770-21776	single	
107-17	21777-21786	iteration	
107-18	21787-21788	(	
107-19	21788-21792	when	
107-20	21793-21798	using	
107-21	21799-21811	Benchmark.bm	
107-22	21811-21812	)	
107-23	21813-21815	or	
107-24	21816-21819	two	
107-25	21820-21830	iterations	
107-26	21831-21832	(	
107-27	21832-21836	when	
107-28	21837-21842	using	
107-29	21843-21857	Benchmark.bmbm	
107-30	21857-21858	)	
107-31	21858-21859	.	
107-32	21860-21867	Running	
107-33	21868-21872	this	
107-34	21873-21876	few	
107-35	21877-21887	iterations	
107-36	21888-21893	means	
107-37	21894-21902	external	
107-38	21903-21910	factors	
107-39	21910-21911	,	
107-40	21912-21916	such	
107-41	21917-21919	as	
107-42	21920-21921	a	
107-43	21922-21927	video	
107-44	21928-21937	streaming	
107-45	21938-21940	in	
107-46	21941-21944	the	
107-47	21945-21955	background	
107-48	21955-21956	,	
107-49	21957-21960	can	
107-50	21961-21965	very	
107-51	21966-21972	easily	
107-52	21973-21977	skew	
107-53	21978-21981	the	
107-54	21982-21991	benchmark	

#Text=statistics. Another problem with the Benchmark module is that it displays timings, not iterations. This means that if a piece of code completes in a very short period of time it can be very difficult to compare the timings before and after a
108-1	21992-22002	statistics	
108-2	22002-22003	.	
108-3	22004-22011	Another	
108-4	22012-22019	problem	
108-5	22020-22024	with	
108-6	22025-22028	the	
108-7	22029-22038	Benchmark	
108-8	22039-22045	module	
108-9	22046-22048	is	
108-10	22049-22053	that	
108-11	22054-22056	it	
108-12	22057-22065	displays	
108-13	22066-22073	timings	
108-14	22073-22074	,	
108-15	22075-22078	not	
108-16	22079-22089	iterations	
108-17	22089-22090	.	
108-18	22091-22095	This	
108-19	22096-22101	means	
108-20	22102-22106	that	
108-21	22107-22109	if	
108-22	22110-22111	a	
108-23	22112-22117	piece	
108-24	22118-22120	of	
108-25	22121-22125	code	
108-26	22126-22135	completes	
108-27	22136-22138	in	
108-28	22139-22140	a	
108-29	22141-22145	very	
108-30	22146-22151	short	
108-31	22152-22158	period	
108-32	22159-22161	of	
108-33	22162-22166	time	
108-34	22167-22169	it	
108-35	22170-22173	can	
108-36	22174-22176	be	
108-37	22177-22181	very	
108-38	22182-22191	difficult	
108-39	22192-22194	to	
108-40	22195-22202	compare	
108-41	22203-22206	the	
108-42	22207-22214	timings	
108-43	22215-22221	before	
108-44	22222-22225	and	
108-45	22226-22231	after	
108-46	22232-22233	a	

#Text=certain change. This in turn leads to patterns such as the following: Benchmark.bmbm(10) do |bench| bench.report 'do something' do 100.times do ... work here ... end end end This however leads to the question: how many iterations should we run to get
109-1	22234-22241	certain	
109-2	22242-22248	change	
109-3	22248-22249	.	
109-4	22250-22254	This	
109-5	22255-22257	in	
109-6	22258-22262	turn	
109-7	22263-22268	leads	
109-8	22269-22271	to	
109-9	22272-22280	patterns	
109-10	22281-22285	such	
109-11	22286-22288	as	
109-12	22289-22292	the	
109-13	22293-22302	following	
109-14	22302-22303	:	
109-15	22304-22318	Benchmark.bmbm	
109-16	22318-22319	(	
109-17	22319-22321	10	
109-18	22321-22322	)	
109-19	22323-22325	do	
109-20	22326-22327	|	
109-21	22327-22332	bench	
109-22	22332-22333	|	
109-23	22334-22346	bench.report	
109-24	22347-22348	'	
109-25	22348-22350	do	
109-26	22351-22360	something	
109-27	22360-22361	'	
109-28	22362-22364	do	
109-29	22365-22368	100	
109-30	22368-22369	.	
109-31	22369-22374	times	
109-32	22375-22377	do	
109-33	22378-22379	.	
109-34	22379-22380	.	
109-35	22380-22381	.	
109-36	22382-22386	work	
109-37	22387-22391	here	
109-38	22392-22393	.	
109-39	22393-22394	.	
109-40	22394-22395	.	
109-41	22396-22399	end	
109-42	22400-22403	end	
109-43	22404-22407	end	
109-44	22408-22412	This	
109-45	22413-22420	however	
109-46	22421-22426	leads	
109-47	22427-22429	to	
109-48	22430-22433	the	
109-49	22434-22442	question	
109-50	22442-22443	:	
109-51	22444-22447	how	
109-52	22448-22452	many	
109-53	22453-22463	iterations	
109-54	22464-22470	should	
109-55	22471-22473	we	
109-56	22474-22477	run	
109-57	22478-22480	to	
109-58	22481-22484	get	

#Text=meaningful statistics? The benchmark-ips Gem basically takes care of all this and much more, and as a result of this should be used instead of the Benchmark module. In short: Don’t trust benchmarks you find on the internet.
110-1	22485-22495	meaningful	
110-2	22496-22506	statistics	
110-3	22506-22507	?	
110-4	22508-22511	The	
110-5	22512-22525	benchmark-ips	
110-6	22526-22529	Gem	
110-7	22530-22539	basically	
110-8	22540-22545	takes	
110-9	22546-22550	care	
110-10	22551-22553	of	
110-11	22554-22557	all	
110-12	22558-22562	this	
110-13	22563-22566	and	
110-14	22567-22571	much	
110-15	22572-22576	more	
110-16	22576-22577	,	
110-17	22578-22581	and	
110-18	22582-22584	as	
110-19	22585-22586	a	
110-20	22587-22593	result	
110-21	22594-22596	of	
110-22	22597-22601	this	
110-23	22602-22608	should	
110-24	22609-22611	be	
110-25	22612-22616	used	
110-26	22617-22624	instead	
110-27	22625-22627	of	
110-28	22628-22631	the	
110-29	22632-22641	Benchmark	
110-30	22642-22648	module	
110-31	22648-22649	.	
110-32	22650-22652	In	
110-33	22653-22658	short	
110-34	22658-22659	:	
110-35	22660-22663	Don	
110-36	22663-22664	’	
110-37	22664-22665	t	
110-38	22666-22671	trust	
110-39	22672-22682	benchmarks	
110-40	22683-22686	you	
110-41	22687-22691	find	
110-42	22692-22694	on	
110-43	22695-22698	the	
110-44	22699-22707	internet	
110-45	22707-22708	.	

#Text=Never make claims based on just benchmarks, always measure in production to confirm your findings. X being N times faster than Y is meaningless if you don’t know what impact it has on your production environment. A production environment is the only benchmark that always tells the truth (unless your performance monitoring systems are not set up correctly).
111-1	22709-22714	Never	
111-2	22715-22719	make	
111-3	22720-22726	claims	
111-4	22727-22732	based	
111-5	22733-22735	on	
111-6	22736-22740	just	
111-7	22741-22751	benchmarks	
111-8	22751-22752	,	
111-9	22753-22759	always	
111-10	22760-22767	measure	
111-11	22768-22770	in	
111-12	22771-22781	production	
111-13	22782-22784	to	
111-14	22785-22792	confirm	
111-15	22793-22797	your	
111-16	22798-22806	findings	
111-17	22806-22807	.	
111-18	22808-22809	X	
111-19	22810-22815	being	
111-20	22816-22817	N	
111-21	22818-22823	times	
111-22	22824-22830	faster	
111-23	22831-22835	than	
111-24	22836-22837	Y	
111-25	22838-22840	is	
111-26	22841-22852	meaningless	
111-27	22853-22855	if	
111-28	22856-22859	you	
111-29	22860-22863	don	
111-30	22863-22864	’	
111-31	22864-22865	t	
111-32	22866-22870	know	
111-33	22871-22875	what	
111-34	22876-22882	impact	
111-35	22883-22885	it	
111-36	22886-22889	has	
111-37	22890-22892	on	
111-38	22893-22897	your	
111-39	22898-22908	production	
111-40	22909-22920	environment	
111-41	22920-22921	.	
111-42	22922-22923	A	
111-43	22924-22934	production	
111-44	22935-22946	environment	
111-45	22947-22949	is	
111-46	22950-22953	the	
111-47	22954-22958	only	
111-48	22959-22968	benchmark	
111-49	22969-22973	that	
111-50	22974-22980	always	
111-51	22981-22986	tells	
111-52	22987-22990	the	
111-53	22991-22996	truth	
111-54	22997-22998	(	
111-55	22998-23004	unless	
111-56	23005-23009	your	
111-57	23010-23021	performance	
111-58	23022-23032	monitoring	
111-59	23033-23040	systems	
111-60	23041-23044	are	
111-61	23045-23048	not	
111-62	23049-23052	set	
111-63	23053-23055	up	
111-64	23056-23065	correctly	
111-65	23065-23066	)	
111-66	23066-23067	.	

#Text=If you must write a benchmark use the benchmark-ips Gem instead of Ruby’s Benchmark module. Profiling By collecting snapshots of process state at regular intervals, profiling allows you to see where time is spent in a process. The Stackprof gem is included in GitLab,
112-1	23068-23070	If	
112-2	23071-23074	you	
112-3	23075-23079	must	
112-4	23080-23085	write	
112-5	23086-23087	a	
112-6	23088-23097	benchmark	
112-7	23098-23101	use	
112-8	23102-23105	the	
112-9	23106-23119	benchmark-ips	
112-10	23120-23123	Gem	
112-11	23124-23131	instead	
112-12	23132-23134	of	
112-13	23135-23139	Ruby	
112-14	23139-23140	’	
112-15	23140-23141	s	
112-16	23142-23151	Benchmark	
112-17	23152-23158	module	
112-18	23158-23159	.	
112-19	23160-23169	Profiling	
112-20	23170-23172	By	
112-21	23173-23183	collecting	
112-22	23184-23193	snapshots	
112-23	23194-23196	of	
112-24	23197-23204	process	
112-25	23205-23210	state	
112-26	23211-23213	at	
112-27	23214-23221	regular	
112-28	23222-23231	intervals	
112-29	23231-23232	,	
112-30	23233-23242	profiling	
112-31	23243-23249	allows	
112-32	23250-23253	you	
112-33	23254-23256	to	
112-34	23257-23260	see	
112-35	23261-23266	where	
112-36	23267-23271	time	
112-37	23272-23274	is	
112-38	23275-23280	spent	
112-39	23281-23283	in	
112-40	23284-23285	a	
112-41	23286-23293	process	
112-42	23293-23294	.	
112-43	23295-23298	The	
112-44	23299-23308	Stackprof	
112-45	23309-23312	gem	
112-46	23313-23315	is	
112-47	23316-23324	included	
112-48	23325-23327	in	
112-49	23328-23334	GitLab	
112-50	23334-23335	,	

#Text=allowing you to profile which code is running on CPU in detail. It’s important to note that profiling an application alters its performance. Different profiling strategies have different overheads. Stackprof is a sampling profiler. It samples stack traces from running threads at a configurable
113-1	23336-23344	allowing	
113-2	23345-23348	you	
113-3	23349-23351	to	
113-4	23352-23359	profile	
113-5	23360-23365	which	
113-6	23366-23370	code	
113-7	23371-23373	is	
113-8	23374-23381	running	
113-9	23382-23384	on	
113-10	23385-23388	CPU	
113-11	23389-23391	in	
113-12	23392-23398	detail	
113-13	23398-23399	.	
113-14	23400-23402	It	
113-15	23402-23403	’	
113-16	23403-23404	s	
113-17	23405-23414	important	
113-18	23415-23417	to	
113-19	23418-23422	note	
113-20	23423-23427	that	
113-21	23428-23437	profiling	
113-22	23438-23440	an	
113-23	23441-23452	application	
113-24	23453-23459	alters	
113-25	23460-23463	its	
113-26	23464-23475	performance	
113-27	23475-23476	.	
113-28	23477-23486	Different	
113-29	23487-23496	profiling	
113-30	23497-23507	strategies	
113-31	23508-23512	have	
113-32	23513-23522	different	
113-33	23523-23532	overheads	
113-34	23532-23533	.	
113-35	23534-23543	Stackprof	
113-36	23544-23546	is	
113-37	23547-23548	a	
113-38	23549-23557	sampling	
113-39	23558-23566	profiler	
113-40	23566-23567	.	
113-41	23568-23570	It	
113-42	23571-23578	samples	
113-43	23579-23584	stack	
113-44	23585-23591	traces	
113-45	23592-23596	from	
113-46	23597-23604	running	
113-47	23605-23612	threads	
113-48	23613-23615	at	
113-49	23616-23617	a	
113-50	23618-23630	configurable	

#Text=frequency (e.g. 100hz, that is 100 stacks per second). This type of profiling has quite a low (albeit non-zero) overhead and is generally considered to be safe for production. Development A profiler can be a very useful tool during development, even if it does run in an unrepresentative environment. In particular, a method is not necessarily
114-1	23631-23640	frequency	
114-2	23641-23642	(	
114-3	23642-23645	e.g	
114-4	23645-23646	.	
114-5	23647-23652	100hz	
114-6	23652-23653	,	
114-7	23654-23658	that	
114-8	23659-23661	is	
114-9	23662-23665	100	
114-10	23666-23672	stacks	
114-11	23673-23676	per	
114-12	23677-23683	second	
114-13	23683-23684	)	
114-14	23684-23685	.	
114-15	23686-23690	This	
114-16	23691-23695	type	
114-17	23696-23698	of	
114-18	23699-23708	profiling	
114-19	23709-23712	has	
114-20	23713-23718	quite	
114-21	23719-23720	a	
114-22	23721-23724	low	
114-23	23725-23726	(	
114-24	23726-23732	albeit	
114-25	23733-23741	non-zero	
114-26	23741-23742	)	
114-27	23743-23751	overhead	
114-28	23752-23755	and	
114-29	23756-23758	is	
114-30	23759-23768	generally	
114-31	23769-23779	considered	
114-32	23780-23782	to	
114-33	23783-23785	be	
114-34	23786-23790	safe	
114-35	23791-23794	for	
114-36	23795-23805	production	
114-37	23805-23806	.	
114-38	23807-23818	Development	
114-39	23819-23820	A	
114-40	23821-23829	profiler	
114-41	23830-23833	can	
114-42	23834-23836	be	
114-43	23837-23838	a	
114-44	23839-23843	very	
114-45	23844-23850	useful	
114-46	23851-23855	tool	
114-47	23856-23862	during	
114-48	23863-23874	development	
114-49	23874-23875	,	
114-50	23876-23880	even	
114-51	23881-23883	if	
114-52	23884-23886	it	
114-53	23887-23891	does	
114-54	23892-23895	run	
114-55	23896-23898	in	
114-56	23899-23901	an	
114-57	23902-23918	unrepresentative	
114-58	23919-23930	environment	
114-59	23930-23931	.	
114-60	23932-23934	In	
114-61	23935-23945	particular	
114-62	23945-23946	,	
114-63	23947-23948	a	
114-64	23949-23955	method	
114-65	23956-23958	is	
114-66	23959-23962	not	
114-67	23963-23974	necessarily	

#Text=troublesome just because it’s executed many times, or takes a long time to execute. Profiles are tools you can use to better understand what is happening in an application - using that information wisely is up to you! Keeping that in mind, to create a profile, identify (or create) a spec that
115-1	23975-23986	troublesome	
115-2	23987-23991	just	
115-3	23992-23999	because	
115-4	24000-24002	it	
115-5	24002-24003	’	
115-6	24003-24004	s	
115-7	24005-24013	executed	
115-8	24014-24018	many	
115-9	24019-24024	times	
115-10	24024-24025	,	
115-11	24026-24028	or	
115-12	24029-24034	takes	
115-13	24035-24036	a	
115-14	24037-24041	long	
115-15	24042-24046	time	
115-16	24047-24049	to	
115-17	24050-24057	execute	
115-18	24057-24058	.	
115-19	24059-24067	Profiles	
115-20	24068-24071	are	
115-21	24072-24077	tools	
115-22	24078-24081	you	
115-23	24082-24085	can	
115-24	24086-24089	use	
115-25	24090-24092	to	
115-26	24093-24099	better	
115-27	24100-24110	understand	
115-28	24111-24115	what	
115-29	24116-24118	is	
115-30	24119-24128	happening	
115-31	24129-24131	in	
115-32	24132-24134	an	
115-33	24135-24146	application	
115-34	24147-24148	-	
115-35	24149-24154	using	
115-36	24155-24159	that	
115-37	24160-24171	information	
115-38	24172-24178	wisely	
115-39	24179-24181	is	
115-40	24182-24184	up	
115-41	24185-24187	to	
115-42	24188-24191	you	
115-43	24191-24192	!	
115-44	24193-24200	Keeping	
115-45	24201-24205	that	
115-46	24206-24208	in	
115-47	24209-24213	mind	
115-48	24213-24214	,	
115-49	24215-24217	to	
115-50	24218-24224	create	
115-51	24225-24226	a	
115-52	24227-24234	profile	
115-53	24234-24235	,	
115-54	24236-24244	identify	
115-55	24245-24246	(	
115-56	24246-24248	or	
115-57	24249-24255	create	
115-58	24255-24256	)	
115-59	24257-24258	a	
115-60	24259-24263	spec	
115-61	24264-24268	that	

#Text=exercises the troublesome code path, then run it using the bin/rspec-stackprof helper, for example: $ LIMIT=10 bin/rspec-stackprof spec/policies/project_policy_spec.rb 8/8 |====== 100 ======>| Time: 00:00:18
116-1	24269-24278	exercises	
116-2	24279-24282	the	
116-3	24283-24294	troublesome	
116-4	24295-24299	code	
116-5	24300-24304	path	
116-6	24304-24305	,	
116-7	24306-24310	then	
116-8	24311-24314	run	
116-9	24315-24317	it	
116-10	24318-24323	using	
116-11	24324-24327	the	
116-12	24328-24331	bin	
116-13	24331-24332	/	
116-14	24332-24347	rspec-stackprof	
116-15	24348-24354	helper	
116-16	24354-24355	,	
116-17	24356-24359	for	
116-18	24360-24367	example	
116-19	24367-24368	:	
116-20	24369-24370	$	
116-21	24371-24376	LIMIT	
116-22	24376-24377	=	
116-23	24377-24379	10	
116-24	24380-24383	bin	
116-25	24383-24384	/	
116-26	24384-24399	rspec-stackprof	
116-27	24400-24404	spec	
116-28	24404-24405	/	
116-29	24405-24413	policies	
116-30	24413-24414	/	
116-31	24414-24436	project_policy_spec.rb	
116-32	24437-24438	8	
116-33	24438-24439	/	
116-34	24439-24440	8	
116-35	24441-24442	|	
116-36	24442-24443	=	
116-37	24443-24444	=	
116-38	24444-24445	=	
116-39	24445-24446	=	
116-40	24446-24447	=	
116-41	24447-24448	=	
116-42	24449-24452	100	
116-43	24453-24454	=	
116-44	24454-24455	=	
116-45	24455-24456	=	
116-46	24456-24457	=	
116-47	24457-24458	=	
116-48	24458-24459	=	
116-49	24459-24460	>	
116-50	24460-24461	|	
116-51	24462-24466	Time	
116-52	24466-24467	:	
116-53	24468-24470	00	
116-54	24470-24471	:	
116-55	24471-24473	00	
116-56	24473-24474	:	
116-57	24474-24476	18	

#Text=Finished in 18.19 seconds (files took 4.8 seconds to load) 8 examples, 0 failures ================================== Mode: wall(1000) Samples: 17033 (5.59% miss rate)
117-1	24477-24485	Finished	
117-2	24486-24488	in	
117-3	24489-24494	18.19	
117-4	24495-24502	seconds	
117-5	24503-24504	(	
117-6	24504-24509	files	
117-7	24510-24514	took	
117-8	24515-24518	4.8	
117-9	24519-24526	seconds	
117-10	24527-24529	to	
117-11	24530-24534	load	
117-12	24534-24535	)	
117-13	24536-24537	8	
117-14	24538-24546	examples	
117-15	24546-24547	,	
117-16	24548-24549	0	
117-17	24550-24558	failures	
117-18	24559-24560	=	
117-19	24560-24561	=	
117-20	24561-24562	=	
117-21	24562-24563	=	
117-22	24563-24564	=	
117-23	24564-24565	=	
117-24	24565-24566	=	
117-25	24566-24567	=	
117-26	24567-24568	=	
117-27	24568-24569	=	
117-28	24569-24570	=	
117-29	24570-24571	=	
117-30	24571-24572	=	
117-31	24572-24573	=	
117-32	24573-24574	=	
117-33	24574-24575	=	
117-34	24575-24576	=	
117-35	24576-24577	=	
117-36	24577-24578	=	
117-37	24578-24579	=	
117-38	24579-24580	=	
117-39	24580-24581	=	
117-40	24581-24582	=	
117-41	24582-24583	=	
117-42	24583-24584	=	
117-43	24584-24585	=	
117-44	24585-24586	=	
117-45	24586-24587	=	
117-46	24587-24588	=	
117-47	24588-24589	=	
117-48	24589-24590	=	
117-49	24590-24591	=	
117-50	24591-24592	=	
117-51	24592-24593	=	
117-52	24594-24598	Mode	
117-53	24598-24599	:	
117-54	24600-24604	wall	
117-55	24604-24605	(	
117-56	24605-24609	1000	
117-57	24609-24610	)	
117-58	24611-24618	Samples	
117-59	24618-24619	:	
117-60	24620-24625	17033	
117-61	24626-24627	(	
117-62	24627-24632	5.59%	
117-63	24633-24637	miss	
117-64	24638-24642	rate	
117-65	24642-24643	)	

#Text=GC: 1901 (11.16%) ================================== TOTAL (pct) SAMPLES (pct) FRAME
118-1	24644-24646	GC	
118-2	24646-24647	:	
118-3	24648-24652	1901	
118-4	24653-24654	(	
118-5	24654-24660	11.16%	
118-6	24660-24661	)	
118-7	24662-24663	=	
118-8	24663-24664	=	
118-9	24664-24665	=	
118-10	24665-24666	=	
118-11	24666-24667	=	
118-12	24667-24668	=	
118-13	24668-24669	=	
118-14	24669-24670	=	
118-15	24670-24671	=	
118-16	24671-24672	=	
118-17	24672-24673	=	
118-18	24673-24674	=	
118-19	24674-24675	=	
118-20	24675-24676	=	
118-21	24676-24677	=	
118-22	24677-24678	=	
118-23	24678-24679	=	
118-24	24679-24680	=	
118-25	24680-24681	=	
118-26	24681-24682	=	
118-27	24682-24683	=	
118-28	24683-24684	=	
118-29	24684-24685	=	
118-30	24685-24686	=	
118-31	24686-24687	=	
118-32	24687-24688	=	
118-33	24688-24689	=	
118-34	24689-24690	=	
118-35	24690-24691	=	
118-36	24691-24692	=	
118-37	24692-24693	=	
118-38	24693-24694	=	
118-39	24694-24695	=	
118-40	24695-24696	=	
118-41	24697-24702	TOTAL	
118-42	24703-24704	(	
118-43	24704-24707	pct	
118-44	24707-24708	)	
118-45	24709-24716	SAMPLES	
118-46	24717-24718	(	
118-47	24718-24721	pct	
118-48	24721-24722	)	
118-49	24723-24728	FRAME	

#Text=6000 (35.2%) 2566 (15.1%) Sprockets::Cache::FileStore#get 2018 (11.8%) 888 (5.2%)
119-1	24729-24733	6000	
119-2	24734-24735	(	
119-3	24735-24740	35.2%	
119-4	24740-24741	)	
119-5	24742-24746	2566	
119-6	24747-24748	(	
119-7	24748-24753	15.1%	
119-8	24753-24754	)	
119-9	24755-24764	Sprockets	
119-10	24764-24765	:	
119-11	24765-24766	:	
119-12	24766-24771	Cache	
119-13	24771-24772	:	
119-14	24772-24773	:	
119-15	24773-24782	FileStore	
119-16	24782-24783	#	
119-17	24783-24786	get	
119-18	24787-24791	2018	
119-19	24792-24793	(	
119-20	24793-24798	11.8%	
119-21	24798-24799	)	
119-22	24800-24803	888	
119-23	24804-24805	(	
119-24	24805-24809	5.2%	
119-25	24809-24810	)	

#Text=ActiveRecord::ConnectionAdapters::PostgreSQLAdapter#exec_no_cache 1338 (7.9%) 640 (3.8%) ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements#execute 3125 (18.3%)
120-1	24811-24823	ActiveRecord	
120-2	24823-24824	:	
120-3	24824-24825	:	
120-4	24825-24843	ConnectionAdapters	
120-5	24843-24844	:	
120-6	24844-24845	:	
120-7	24845-24862	PostgreSQLAdapter	
120-8	24862-24863	#	
120-9	24863-24876	exec_no_cache	
120-10	24877-24881	1338	
120-11	24882-24883	(	
120-12	24883-24887	7.9%	
120-13	24887-24888	)	
120-14	24889-24892	640	
120-15	24893-24894	(	
120-16	24894-24898	3.8%	
120-17	24898-24899	)	
120-18	24900-24912	ActiveRecord	
120-19	24912-24913	:	
120-20	24913-24914	:	
120-21	24914-24932	ConnectionAdapters	
120-22	24932-24933	:	
120-23	24933-24934	:	
120-24	24934-24944	PostgreSQL	
120-25	24944-24945	:	
120-26	24945-24946	:	
120-27	24946-24964	DatabaseStatements	
120-28	24964-24965	#	
120-29	24965-24972	execute	
120-30	24973-24977	3125	
120-31	24978-24979	(	
120-32	24979-24984	18.3%	
120-33	24984-24985	)	

#Text=394 (2.3%) Sprockets::Cache::FileStore#safe_open 913 (5.4%) 301 (1.8%)
121-1	24986-24989	394	
121-2	24990-24991	(	
121-3	24991-24995	2.3%	
121-4	24995-24996	)	
121-5	24997-25006	Sprockets	
121-6	25006-25007	:	
121-7	25007-25008	:	
121-8	25008-25013	Cache	
121-9	25013-25014	:	
121-10	25014-25015	:	
121-11	25015-25024	FileStore	
121-12	25024-25025	#	
121-13	25025-25034	safe_open	
121-14	25035-25038	913	
121-15	25039-25040	(	
121-16	25040-25044	5.4%	
121-17	25044-25045	)	
121-18	25046-25049	301	
121-19	25050-25051	(	
121-20	25051-25055	1.8%	
121-21	25055-25056	)	

#Text=ActiveRecord::ConnectionAdapters::PostgreSQLAdapter#exec_cache 288 (1.7%) 288 (1.7%) ActiveRecord::Attribute#initialize 246 (1.4%) 246 (1.4%)
122-1	25057-25069	ActiveRecord	
122-2	25069-25070	:	
122-3	25070-25071	:	
122-4	25071-25089	ConnectionAdapters	
122-5	25089-25090	:	
122-6	25090-25091	:	
122-7	25091-25108	PostgreSQLAdapter	
122-8	25108-25109	#	
122-9	25109-25119	exec_cache	
122-10	25120-25123	288	
122-11	25124-25125	(	
122-12	25125-25129	1.7%	
122-13	25129-25130	)	
122-14	25131-25134	288	
122-15	25135-25136	(	
122-16	25136-25140	1.7%	
122-17	25140-25141	)	
122-18	25142-25154	ActiveRecord	
122-19	25154-25155	:	
122-20	25155-25156	:	
122-21	25156-25165	Attribute	
122-22	25165-25166	#	
122-23	25166-25176	initialize	
122-24	25177-25180	246	
122-25	25181-25182	(	
122-26	25182-25186	1.4%	
122-27	25186-25187	)	
122-28	25188-25191	246	
122-29	25192-25193	(	
122-30	25193-25197	1.4%	
122-31	25197-25198	)	

#Text=Sprockets::Cache::FileStore#safe_stat 295 (1.7%) 193 (1.1%) block (2 levels) in class_attribute 187 (1.1%) 187 (1.1%) block (4 levels) in class_attribute
123-1	25199-25208	Sprockets	
123-2	25208-25209	:	
123-3	25209-25210	:	
123-4	25210-25215	Cache	
123-5	25215-25216	:	
123-6	25216-25217	:	
123-7	25217-25226	FileStore	
123-8	25226-25227	#	
123-9	25227-25236	safe_stat	
123-10	25237-25240	295	
123-11	25241-25242	(	
123-12	25242-25246	1.7%	
123-13	25246-25247	)	
123-14	25248-25251	193	
123-15	25252-25253	(	
123-16	25253-25257	1.1%	
123-17	25257-25258	)	
123-18	25259-25264	block	
123-19	25265-25266	(	
123-20	25266-25267	2	
123-21	25268-25274	levels	
123-22	25274-25275	)	
123-23	25276-25278	in	
123-24	25279-25294	class_attribute	
123-25	25295-25298	187	
123-26	25299-25300	(	
123-27	25300-25304	1.1%	
123-28	25304-25305	)	
123-29	25306-25309	187	
123-30	25310-25311	(	
123-31	25311-25315	1.1%	
123-32	25315-25316	)	
123-33	25317-25322	block	
123-34	25323-25324	(	
123-35	25324-25325	4	
123-36	25326-25332	levels	
123-37	25332-25333	)	
123-38	25334-25336	in	
123-39	25337-25352	class_attribute	

#Text=You can limit the specs that are run by passing any arguments rspec would normally take. The output is sorted by the Samples column by default. This is the number of samples taken where the method is the one currently being executed. The Total column shows the number of samples taken where the method, or any of the methods it calls, were being executed.
124-1	25353-25356	You	
124-2	25357-25360	can	
124-3	25361-25366	limit	
124-4	25367-25370	the	
124-5	25371-25376	specs	
124-6	25377-25381	that	
124-7	25382-25385	are	
124-8	25386-25389	run	
124-9	25390-25392	by	
124-10	25393-25400	passing	
124-11	25401-25404	any	
124-12	25405-25414	arguments	
124-13	25415-25420	rspec	
124-14	25421-25426	would	
124-15	25427-25435	normally	
124-16	25436-25440	take	
124-17	25440-25441	.	
124-18	25442-25445	The	
124-19	25446-25452	output	
124-20	25453-25455	is	
124-21	25456-25462	sorted	
124-22	25463-25465	by	
124-23	25466-25469	the	
124-24	25470-25477	Samples	
124-25	25478-25484	column	
124-26	25485-25487	by	
124-27	25488-25495	default	
124-28	25495-25496	.	
124-29	25497-25501	This	
124-30	25502-25504	is	
124-31	25505-25508	the	
124-32	25509-25515	number	
124-33	25516-25518	of	
124-34	25519-25526	samples	
124-35	25527-25532	taken	
124-36	25533-25538	where	
124-37	25539-25542	the	
124-38	25543-25549	method	
124-39	25550-25552	is	
124-40	25553-25556	the	
124-41	25557-25560	one	
124-42	25561-25570	currently	
124-43	25571-25576	being	
124-44	25577-25585	executed	
124-45	25585-25586	.	
124-46	25587-25590	The	
124-47	25591-25596	Total	
124-48	25597-25603	column	
124-49	25604-25609	shows	
124-50	25610-25613	the	
124-51	25614-25620	number	
124-52	25621-25623	of	
124-53	25624-25631	samples	
124-54	25632-25637	taken	
124-55	25638-25643	where	
124-56	25644-25647	the	
124-57	25648-25654	method	
124-58	25654-25655	,	
124-59	25656-25658	or	
124-60	25659-25662	any	
124-61	25663-25665	of	
124-62	25666-25669	the	
124-63	25670-25677	methods	
124-64	25678-25680	it	
124-65	25681-25686	calls	
124-66	25686-25687	,	
124-67	25688-25692	were	
124-68	25693-25698	being	
124-69	25699-25707	executed	
124-70	25707-25708	.	

#Text=To create a graphical view of the call stack: stackprof tmp/project_policy_spec.rb.dump --graphviz > project_policy_spec.dot dot -Tsvg project_policy_spec.dot > project_policy_spec.svg
125-1	25709-25711	To	
125-2	25712-25718	create	
125-3	25719-25720	a	
125-4	25721-25730	graphical	
125-5	25731-25735	view	
125-6	25736-25738	of	
125-7	25739-25742	the	
125-8	25743-25747	call	
125-9	25748-25753	stack	
125-10	25753-25754	:	
125-11	25755-25764	stackprof	
125-12	25765-25768	tmp	
125-13	25768-25769	/	
125-14	25769-25796	project_policy_spec.rb.dump	
125-15	25797-25798	-	
125-16	25798-25799	-	
125-17	25799-25807	graphviz	
125-18	25808-25809	>	
125-19	25810-25833	project_policy_spec.dot	
125-20	25834-25837	dot	
125-21	25838-25839	-	
125-22	25839-25843	Tsvg	
125-23	25844-25867	project_policy_spec.dot	
125-24	25868-25869	>	
125-25	25870-25893	project_policy_spec.svg	

#Text=To load the profile in KCachegrind: stackprof tmp/project_policy_spec.rb.dump --callgrind > project_policy_spec.callgrind kcachegrind project_policy_spec.callgrind # Linux
126-1	25894-25896	To	
126-2	25897-25901	load	
126-3	25902-25905	the	
126-4	25906-25913	profile	
126-5	25914-25916	in	
126-6	25917-25928	KCachegrind	
126-7	25928-25929	:	
126-8	25930-25939	stackprof	
126-9	25940-25943	tmp	
126-10	25943-25944	/	
126-11	25944-25971	project_policy_spec.rb.dump	
126-12	25972-25973	-	
126-13	25973-25974	-	
126-14	25974-25983	callgrind	
126-15	25984-25985	>	
126-16	25986-26015	project_policy_spec.callgrind	
126-17	26016-26027	kcachegrind	
126-18	26028-26057	project_policy_spec.callgrind	
126-19	26058-26059	#	
126-20	26060-26065	Linux	

#Text=qcachegrind project_policy_spec.callgrind # Mac For flame graphs, enable raw collection first. Note that raw collection can generate a very large file, so increase the INTERVAL, or run on a smaller number of specs for smaller file size:
127-1	26066-26077	qcachegrind	
127-2	26078-26107	project_policy_spec.callgrind	
127-3	26108-26109	#	
127-4	26110-26113	Mac	
127-5	26114-26117	For	
127-6	26118-26123	flame	
127-7	26124-26130	graphs	
127-8	26130-26131	,	
127-9	26132-26138	enable	
127-10	26139-26142	raw	
127-11	26143-26153	collection	
127-12	26154-26159	first	
127-13	26159-26160	.	
127-14	26161-26165	Note	
127-15	26166-26170	that	
127-16	26171-26174	raw	
127-17	26175-26185	collection	
127-18	26186-26189	can	
127-19	26190-26198	generate	
127-20	26199-26200	a	
127-21	26201-26205	very	
127-22	26206-26211	large	
127-23	26212-26216	file	
127-24	26216-26217	,	
127-25	26218-26220	so	
127-26	26221-26229	increase	
127-27	26230-26233	the	
127-28	26234-26242	INTERVAL	
127-29	26242-26243	,	
127-30	26244-26246	or	
127-31	26247-26250	run	
127-32	26251-26253	on	
127-33	26254-26255	a	
127-34	26256-26263	smaller	
127-35	26264-26270	number	
127-36	26271-26273	of	
127-37	26274-26279	specs	
127-38	26280-26283	for	
127-39	26284-26291	smaller	
127-40	26292-26296	file	
127-41	26297-26301	size	
127-42	26301-26302	:	

#Text=RAW=true bin/rspec-stackprof spec/policies/group_member_policy_spec.rb You can then generate, and view the resultant flame graph. It might take a while to generate based on the output file size: # Generate stackprof --flamegraph tmp/group_member_policy_spec.rb.dump > group_member_policy_spec.flame
128-1	26303-26306	RAW	
128-2	26306-26307	=	
128-3	26307-26311	true	
128-4	26312-26315	bin	
128-5	26315-26316	/	
128-6	26316-26331	rspec-stackprof	
128-7	26332-26336	spec	
128-8	26336-26337	/	
128-9	26337-26345	policies	
128-10	26345-26346	/	
128-11	26346-26373	group_member_policy_spec.rb	
128-12	26374-26377	You	
128-13	26378-26381	can	
128-14	26382-26386	then	
128-15	26387-26395	generate	
128-16	26395-26396	,	
128-17	26397-26400	and	
128-18	26401-26405	view	
128-19	26406-26409	the	
128-20	26410-26419	resultant	
128-21	26420-26425	flame	
128-22	26426-26431	graph	
128-23	26431-26432	.	
128-24	26433-26435	It	
128-25	26436-26441	might	
128-26	26442-26446	take	
128-27	26447-26448	a	
128-28	26449-26454	while	
128-29	26455-26457	to	
128-30	26458-26466	generate	
128-31	26467-26472	based	
128-32	26473-26475	on	
128-33	26476-26479	the	
128-34	26480-26486	output	
128-35	26487-26491	file	
128-36	26492-26496	size	
128-37	26496-26497	:	
128-38	26498-26499	#	
128-39	26500-26508	Generate	
128-40	26509-26518	stackprof	
128-41	26519-26520	-	
128-42	26520-26521	-	
128-43	26521-26531	flamegraph	
128-44	26532-26535	tmp	
128-45	26535-26536	/	
128-46	26536-26568	group_member_policy_spec.rb.dump	
128-47	26569-26570	>	
128-48	26571-26601	group_member_policy_spec.flame	

#Text=# View stackprof --flamegraph-viewer=group_member_policy_spec.flame It may be useful to zoom in on a specific method, for example: $ stackprof tmp/project_policy_spec.rb.dump --method warm_asset_cache
129-1	26602-26603	#	
129-2	26604-26608	View	
129-3	26609-26618	stackprof	
129-4	26619-26620	-	
129-5	26620-26621	-	
129-6	26621-26638	flamegraph-viewer	
129-7	26638-26639	=	
129-8	26639-26669	group_member_policy_spec.flame	
129-9	26670-26672	It	
129-10	26673-26676	may	
129-11	26677-26679	be	
129-12	26680-26686	useful	
129-13	26687-26689	to	
129-14	26690-26694	zoom	
129-15	26695-26697	in	
129-16	26698-26700	on	
129-17	26701-26702	a	
129-18	26703-26711	specific	
129-19	26712-26718	method	
129-20	26718-26719	,	
129-21	26720-26723	for	
129-22	26724-26731	example	
129-23	26731-26732	:	
129-24	26733-26734	$	
129-25	26735-26744	stackprof	
129-26	26745-26748	tmp	
129-27	26748-26749	/	
129-28	26749-26776	project_policy_spec.rb.dump	
129-29	26777-26778	-	
129-30	26778-26779	-	
129-31	26779-26785	method	
129-32	26786-26802	warm_asset_cache	

#Text=TestEnv#warm_asset_cache (/Users/lupine/dev/gitlab.com/gitlab-org/gitlab-development-kit/gitlab/spec/support/test_env.rb:164) samples: 0 self (0.0%) 6288 total (36.9%) callers: 6288 100.0%) block (2 levels) in <top (required)> callees (6288 total):
130-1	26803-26810	TestEnv	
130-2	26810-26811	#	
130-3	26811-26827	warm_asset_cache	
130-4	26828-26829	(	
130-5	26829-26830	/	
130-6	26830-26835	Users	
130-7	26835-26836	/	
130-8	26836-26842	lupine	
130-9	26842-26843	/	
130-10	26843-26846	dev	
130-11	26846-26847	/	
130-12	26847-26857	gitlab.com	
130-13	26857-26858	/	
130-14	26858-26868	gitlab-org	
130-15	26868-26869	/	
130-16	26869-26891	gitlab-development-kit	
130-17	26891-26892	/	
130-18	26892-26898	gitlab	
130-19	26898-26899	/	
130-20	26899-26903	spec	
130-21	26903-26904	/	
130-22	26904-26911	support	
130-23	26911-26912	/	
130-24	26912-26923	test_env.rb	
130-25	26923-26924	:	
130-26	26924-26927	164	
130-27	26927-26928	)	
130-28	26929-26936	samples	
130-29	26936-26937	:	
130-30	26938-26939	0	
130-31	26940-26944	self	
130-32	26945-26946	(	
130-33	26946-26950	0.0%	
130-34	26950-26951	)	
130-35	26952-26956	6288	
130-36	26957-26962	total	
130-37	26963-26964	(	
130-38	26964-26969	36.9%	
130-39	26969-26970	)	
130-40	26971-26978	callers	
130-41	26978-26979	:	
130-42	26980-26984	6288	
130-43	26985-26991	100.0%	
130-44	26991-26992	)	
130-45	26993-26998	block	
130-46	26999-27000	(	
130-47	27000-27001	2	
130-48	27002-27008	levels	
130-49	27008-27009	)	
130-50	27010-27012	in	
130-51	27013-27014	<	
130-52	27014-27017	top	
130-53	27018-27019	(	
130-54	27019-27027	required	
130-55	27027-27028	)	
130-56	27028-27029	>	
130-57	27030-27037	callees	
130-58	27038-27039	(	
130-59	27039-27043	6288	
130-60	27044-27049	total	
130-61	27049-27050	)	
130-62	27050-27051	:	

#Text=6288 100.0%) Capybara::RackTest::Driver#visit code: 164 def warm_asset_cache 165 return if warm_asset_cache? 166 return unless defined?(Capybara)
131-1	27052-27056	6288	
131-2	27057-27063	100.0%	
131-3	27063-27064	)	
131-4	27065-27073	Capybara	
131-5	27073-27074	:	
131-6	27074-27075	:	
131-7	27075-27083	RackTest	
131-8	27083-27084	:	
131-9	27084-27085	:	
131-10	27085-27091	Driver	
131-11	27091-27092	#	
131-12	27092-27097	visit	
131-13	27098-27102	code	
131-14	27102-27103	:	
131-15	27104-27107	164	
131-16	27108-27111	def	
131-17	27112-27128	warm_asset_cache	
131-18	27129-27132	165	
131-19	27133-27139	return	
131-20	27140-27142	if	
131-21	27143-27159	warm_asset_cache	
131-22	27159-27160	?	
131-23	27161-27164	166	
131-24	27165-27171	return	
131-25	27172-27178	unless	
131-26	27179-27186	defined	
131-27	27186-27187	?	
131-28	27187-27188	(	
131-29	27188-27196	Capybara	
131-30	27196-27197	)	

#Text=167 6288 (36.9%) 168 Capybara.current_session.driver.visit '/' 169 end $ stackprof tmp/project_policy_spec.rb.dump --method BasePolicy#abilities
132-1	27198-27201	167	
132-2	27202-27206	6288	
132-3	27207-27208	(	
132-4	27208-27213	36.9%	
132-5	27213-27214	)	
132-6	27215-27218	168	
132-7	27219-27256	Capybara.current_session.driver.visit	
132-8	27257-27258	'	
132-9	27258-27259	/	
132-10	27259-27260	'	
132-11	27261-27264	169	
132-12	27265-27268	end	
132-13	27269-27270	$	
132-14	27271-27280	stackprof	
132-15	27281-27284	tmp	
132-16	27284-27285	/	
132-17	27285-27312	project_policy_spec.rb.dump	
132-18	27313-27314	-	
132-19	27314-27315	-	
132-20	27315-27321	method	
132-21	27322-27332	BasePolicy	
132-22	27332-27333	#	
132-23	27333-27342	abilities	

#Text=BasePolicy#abilities (/Users/lupine/dev/gitlab.com/gitlab-org/gitlab-development-kit/gitlab/app/policies/base_policy.rb:79) samples: 0 self (0.0%) 50 total (0.3%) callers: 50.0%) BasePolicy.abilities 50.0%) BasePolicy#collect_rules
133-1	27343-27353	BasePolicy	
133-2	27353-27354	#	
133-3	27354-27363	abilities	
133-4	27364-27365	(	
133-5	27365-27366	/	
133-6	27366-27371	Users	
133-7	27371-27372	/	
133-8	27372-27378	lupine	
133-9	27378-27379	/	
133-10	27379-27382	dev	
133-11	27382-27383	/	
133-12	27383-27393	gitlab.com	
133-13	27393-27394	/	
133-14	27394-27404	gitlab-org	
133-15	27404-27405	/	
133-16	27405-27427	gitlab-development-kit	
133-17	27427-27428	/	
133-18	27428-27434	gitlab	
133-19	27434-27435	/	
133-20	27435-27438	app	
133-21	27438-27439	/	
133-22	27439-27447	policies	
133-23	27447-27448	/	
133-24	27448-27462	base_policy.rb	
133-25	27462-27463	:	
133-26	27463-27465	79	
133-27	27465-27466	)	
133-28	27467-27474	samples	
133-29	27474-27475	:	
133-30	27476-27477	0	
133-31	27478-27482	self	
133-32	27483-27484	(	
133-33	27484-27488	0.0%	
133-34	27488-27489	)	
133-35	27490-27492	50	
133-36	27493-27498	total	
133-37	27499-27500	(	
133-38	27500-27504	0.3%	
133-39	27504-27505	)	
133-40	27506-27513	callers	
133-41	27513-27514	:	
133-42	27515-27520	50.0%	
133-43	27520-27521	)	
133-44	27522-27542	BasePolicy.abilities	
133-45	27543-27548	50.0%	
133-46	27548-27549	)	
133-47	27550-27560	BasePolicy	
133-48	27560-27561	#	
133-49	27561-27574	collect_rules	

#Text=callees (50 total): 50.0%) ProjectPolicy#rules 50.0%) BasePolicy#collect_rules code: def abilities return RuleSet.empty if @user && @user.blocked?
134-1	27575-27582	callees	
134-2	27583-27584	(	
134-3	27584-27586	50	
134-4	27587-27592	total	
134-5	27592-27593	)	
134-6	27593-27594	:	
134-7	27595-27600	50.0%	
134-8	27600-27601	)	
134-9	27602-27615	ProjectPolicy	
134-10	27615-27616	#	
134-11	27616-27621	rules	
134-12	27622-27627	50.0%	
134-13	27627-27628	)	
134-14	27629-27639	BasePolicy	
134-15	27639-27640	#	
134-16	27640-27653	collect_rules	
134-17	27654-27658	code	
134-18	27658-27659	:	
134-19	27660-27663	def	
134-20	27664-27673	abilities	
134-21	27674-27680	return	
134-22	27681-27694	RuleSet.empty	
134-23	27695-27697	if	
134-24	27698-27699	@	
134-25	27699-27703	user	
134-26	27704-27705	&	
134-27	27705-27706	&	
134-28	27707-27708	@	
134-29	27708-27720	user.blocked	
134-30	27720-27721	?	

#Text=return anonymous_abilities if @user.nil? (0.3%) collect_rules { rules } end Since the profile includes the work done by the test suite as well as the application code, these profiles can be used to investigate slow tests as well. However, for smaller runs (like this example), this means that the cost of
135-1	27722-27728	return	
135-2	27729-27748	anonymous_abilities	
135-3	27749-27751	if	
135-4	27752-27753	@	
135-5	27753-27761	user.nil	
135-6	27761-27762	?	
135-7	27763-27764	(	
135-8	27764-27768	0.3%	
135-9	27768-27769	)	
135-10	27770-27783	collect_rules	
135-11	27784-27785	{	
135-12	27786-27791	rules	
135-13	27792-27793	}	
135-14	27794-27797	end	
135-15	27798-27803	Since	
135-16	27804-27807	the	
135-17	27808-27815	profile	
135-18	27816-27824	includes	
135-19	27825-27828	the	
135-20	27829-27833	work	
135-21	27834-27838	done	
135-22	27839-27841	by	
135-23	27842-27845	the	
135-24	27846-27850	test	
135-25	27851-27856	suite	
135-26	27857-27859	as	
135-27	27860-27864	well	
135-28	27865-27867	as	
135-29	27868-27871	the	
135-30	27872-27883	application	
135-31	27884-27888	code	
135-32	27888-27889	,	
135-33	27890-27895	these	
135-34	27896-27904	profiles	
135-35	27905-27908	can	
135-36	27909-27911	be	
135-37	27912-27916	used	
135-38	27917-27919	to	
135-39	27920-27931	investigate	
135-40	27932-27936	slow	
135-41	27937-27942	tests	
135-42	27943-27945	as	
135-43	27946-27950	well	
135-44	27950-27951	.	
135-45	27952-27959	However	
135-46	27959-27960	,	
135-47	27961-27964	for	
135-48	27965-27972	smaller	
135-49	27973-27977	runs	
135-50	27978-27979	(	
135-51	27979-27983	like	
135-52	27984-27988	this	
135-53	27989-27996	example	
135-54	27996-27997	)	
135-55	27997-27998	,	
135-56	27999-28003	this	
135-57	28004-28009	means	
135-58	28010-28014	that	
135-59	28015-28018	the	
135-60	28019-28023	cost	
135-61	28024-28026	of	

#Text=setting up the test suite tends to dominate. Production Stackprof can also be used to profile production workloads. In order to enable production profiling for Ruby processes, you can set the STACKPROF_ENABLED environment variable to true. The following configuration options can be configured:
136-1	28027-28034	setting	
136-2	28035-28037	up	
136-3	28038-28041	the	
136-4	28042-28046	test	
136-5	28047-28052	suite	
136-6	28053-28058	tends	
136-7	28059-28061	to	
136-8	28062-28070	dominate	
136-9	28070-28071	.	
136-10	28072-28082	Production	
136-11	28083-28092	Stackprof	
136-12	28093-28096	can	
136-13	28097-28101	also	
136-14	28102-28104	be	
136-15	28105-28109	used	
136-16	28110-28112	to	
136-17	28113-28120	profile	
136-18	28121-28131	production	
136-19	28132-28141	workloads	
136-20	28141-28142	.	
136-21	28143-28145	In	
136-22	28146-28151	order	
136-23	28152-28154	to	
136-24	28155-28161	enable	
136-25	28162-28172	production	
136-26	28173-28182	profiling	
136-27	28183-28186	for	
136-28	28187-28191	Ruby	
136-29	28192-28201	processes	
136-30	28201-28202	,	
136-31	28203-28206	you	
136-32	28207-28210	can	
136-33	28211-28214	set	
136-34	28215-28218	the	
136-35	28219-28236	STACKPROF_ENABLED	
136-36	28237-28248	environment	
136-37	28249-28257	variable	
136-38	28258-28260	to	
136-39	28261-28265	true	
136-40	28265-28266	.	
136-41	28267-28270	The	
136-42	28271-28280	following	
136-43	28281-28294	configuration	
136-44	28295-28302	options	
136-45	28303-28306	can	
136-46	28307-28309	be	
136-47	28310-28320	configured	
136-48	28320-28321	:	

#Text=STACKPROF_ENABLED: Enables Stackprof signal handler on SIGUSR2 signal. Defaults to false. STACKPROF_MODE: See sampling modes. Defaults to cpu. STACKPROF_INTERVAL: Sampling interval. Unit semantics depend on STACKPROF_MODE.
137-1	28322-28339	STACKPROF_ENABLED	
137-2	28339-28340	:	
137-3	28341-28348	Enables	
137-4	28349-28358	Stackprof	
137-5	28359-28365	signal	
137-6	28366-28373	handler	
137-7	28374-28376	on	
137-8	28377-28384	SIGUSR2	
137-9	28385-28391	signal	
137-10	28391-28392	.	
137-11	28393-28401	Defaults	
137-12	28402-28404	to	
137-13	28405-28410	false	
137-14	28410-28411	.	
137-15	28412-28426	STACKPROF_MODE	
137-16	28426-28427	:	
137-17	28428-28431	See	
137-18	28432-28440	sampling	
137-19	28441-28446	modes	
137-20	28446-28447	.	
137-21	28448-28456	Defaults	
137-22	28457-28459	to	
137-23	28460-28463	cpu	
137-24	28463-28464	.	
137-25	28465-28483	STACKPROF_INTERVAL	
137-26	28483-28484	:	
137-27	28485-28493	Sampling	
137-28	28494-28502	interval	
137-29	28502-28503	.	
137-30	28504-28508	Unit	
137-31	28509-28518	semantics	
137-32	28519-28525	depend	
137-33	28526-28528	on	
137-34	28529-28543	STACKPROF_MODE	
137-35	28543-28544	.	

#Text=For object mode this is a per-event interval (every nth event is sampled) and defaults to 1000. For other modes such as cpu this is a frequency and defaults to 10000 μs (100hz). STACKPROF_FILE_PREFIX: File path prefix where profiles are stored. Defaults
138-1	28545-28548	For	
138-2	28549-28555	object	
138-3	28556-28560	mode	
138-4	28561-28565	this	
138-5	28566-28568	is	
138-6	28569-28570	a	
138-7	28571-28580	per-event	
138-8	28581-28589	interval	
138-9	28590-28591	(	
138-10	28591-28596	every	
138-11	28597-28600	nth	
138-12	28601-28606	event	
138-13	28607-28609	is	
138-14	28610-28617	sampled	
138-15	28617-28618	)	
138-16	28619-28622	and	
138-17	28623-28631	defaults	
138-18	28632-28634	to	
138-19	28635-28639	1000	
138-20	28639-28640	.	
138-21	28641-28644	For	
138-22	28645-28650	other	
138-23	28651-28656	modes	
138-24	28657-28661	such	
138-25	28662-28664	as	
138-26	28665-28668	cpu	
138-27	28669-28673	this	
138-28	28674-28676	is	
138-29	28677-28678	a	
138-30	28679-28688	frequency	
138-31	28689-28692	and	
138-32	28693-28701	defaults	
138-33	28702-28704	to	
138-34	28705-28710	10000	
138-35	28711-28713	μs	
138-36	28714-28715	(	
138-37	28715-28720	100hz	
138-38	28720-28721	)	
138-39	28721-28722	.	
138-40	28723-28744	STACKPROF_FILE_PREFIX	
138-41	28744-28745	:	
138-42	28746-28750	File	
138-43	28751-28755	path	
138-44	28756-28762	prefix	
138-45	28763-28768	where	
138-46	28769-28777	profiles	
138-47	28778-28781	are	
138-48	28782-28788	stored	
138-49	28788-28789	.	
138-50	28790-28798	Defaults	

#Text=to $TMPDIR (often corresponds to /tmp). STACKPROF_TIMEOUT_S: Profiling timeout in seconds. Profiling will automatically stop after this time has elapsed. Defaults to 30. STACKPROF_RAW: Whether to collect raw samples or only aggregates. Raw
139-1	28799-28801	to	
139-2	28802-28803	$	
139-3	28803-28809	TMPDIR	
139-4	28810-28811	(	
139-5	28811-28816	often	
139-6	28817-28828	corresponds	
139-7	28829-28831	to	
139-8	28832-28833	/	
139-9	28833-28836	tmp	
139-10	28836-28837	)	
139-11	28837-28838	.	
139-12	28839-28858	STACKPROF_TIMEOUT_S	
139-13	28858-28859	:	
139-14	28860-28869	Profiling	
139-15	28870-28877	timeout	
139-16	28878-28880	in	
139-17	28881-28888	seconds	
139-18	28888-28889	.	
139-19	28890-28899	Profiling	
139-20	28900-28904	will	
139-21	28905-28918	automatically	
139-22	28919-28923	stop	
139-23	28924-28929	after	
139-24	28930-28934	this	
139-25	28935-28939	time	
139-26	28940-28943	has	
139-27	28944-28951	elapsed	
139-28	28951-28952	.	
139-29	28953-28961	Defaults	
139-30	28962-28964	to	
139-31	28965-28967	30	
139-32	28967-28968	.	
139-33	28969-28982	STACKPROF_RAW	
139-34	28982-28983	:	
139-35	28984-28991	Whether	
139-36	28992-28994	to	
139-37	28995-29002	collect	
139-38	29003-29006	raw	
139-39	29007-29014	samples	
139-40	29015-29017	or	
139-41	29018-29022	only	
139-42	29023-29033	aggregates	
139-43	29033-29034	.	
139-44	29035-29038	Raw	

#Text=samples are needed to generate flame graphs, but they do have a higher memory and disk overhead. Defaults to true. Once enabled, profiling can be triggered by sending a SIGUSR2 signal to the Ruby process. The process begins sampling stacks. Profiling can be stopped by sending another SIGUSR2. Alternatively, it stops automatically after
140-1	29039-29046	samples	
140-2	29047-29050	are	
140-3	29051-29057	needed	
140-4	29058-29060	to	
140-5	29061-29069	generate	
140-6	29070-29075	flame	
140-7	29076-29082	graphs	
140-8	29082-29083	,	
140-9	29084-29087	but	
140-10	29088-29092	they	
140-11	29093-29095	do	
140-12	29096-29100	have	
140-13	29101-29102	a	
140-14	29103-29109	higher	
140-15	29110-29116	memory	
140-16	29117-29120	and	
140-17	29121-29125	disk	
140-18	29126-29134	overhead	
140-19	29134-29135	.	
140-20	29136-29144	Defaults	
140-21	29145-29147	to	
140-22	29148-29152	true	
140-23	29152-29153	.	
140-24	29154-29158	Once	
140-25	29159-29166	enabled	
140-26	29166-29167	,	
140-27	29168-29177	profiling	
140-28	29178-29181	can	
140-29	29182-29184	be	
140-30	29185-29194	triggered	
140-31	29195-29197	by	
140-32	29198-29205	sending	
140-33	29206-29207	a	
140-34	29208-29215	SIGUSR2	
140-35	29216-29222	signal	
140-36	29223-29225	to	
140-37	29226-29229	the	
140-38	29230-29234	Ruby	
140-39	29235-29242	process	
140-40	29242-29243	.	
140-41	29244-29247	The	
140-42	29248-29255	process	
140-43	29256-29262	begins	
140-44	29263-29271	sampling	
140-45	29272-29278	stacks	
140-46	29278-29279	.	
140-47	29280-29289	Profiling	
140-48	29290-29293	can	
140-49	29294-29296	be	
140-50	29297-29304	stopped	
140-51	29305-29307	by	
140-52	29308-29315	sending	
140-53	29316-29323	another	
140-54	29324-29331	SIGUSR2	
140-55	29331-29332	.	
140-56	29333-29346	Alternatively	
140-57	29346-29347	,	
140-58	29348-29350	it	
140-59	29351-29356	stops	
140-60	29357-29370	automatically	
140-61	29371-29376	after	

#Text=the timeout. Once profiling stops, the profile is written out to disk at $STACKPROF_FILE_PREFIX/stackprof.$PID.$RAND.profile. It can then be inspected further via the stackprof command line tool, as described in the previous
141-1	29377-29380	the	
141-2	29381-29388	timeout	
141-3	29388-29389	.	
141-4	29390-29394	Once	
141-5	29395-29404	profiling	
141-6	29405-29410	stops	
141-7	29410-29411	,	
141-8	29412-29415	the	
141-9	29416-29423	profile	
141-10	29424-29426	is	
141-11	29427-29434	written	
141-12	29435-29438	out	
141-13	29439-29441	to	
141-14	29442-29446	disk	
141-15	29447-29449	at	
141-16	29450-29451	$	
141-17	29451-29472	STACKPROF_FILE_PREFIX	
141-18	29472-29473	/	
141-19	29473-29482	stackprof	
141-20	29482-29483	.	
141-21	29483-29484	$	
141-22	29484-29487	PID	
141-23	29487-29488	.	
141-24	29488-29489	$	
141-25	29489-29501	RAND.profile	
141-26	29501-29502	.	
141-27	29503-29505	It	
141-28	29506-29509	can	
141-29	29510-29514	then	
141-30	29515-29517	be	
141-31	29518-29527	inspected	
141-32	29528-29535	further	
141-33	29536-29539	via	
141-34	29540-29543	the	
141-35	29544-29553	stackprof	
141-36	29554-29561	command	
141-37	29562-29566	line	
141-38	29567-29571	tool	
141-39	29571-29572	,	
141-40	29573-29575	as	
141-41	29576-29585	described	
141-42	29586-29588	in	
141-43	29589-29592	the	
141-44	29593-29601	previous	

#Text=section. Currently supported profiling targets are: Puma worker Sidekiq noteThe Puma master process is not supported. Neither is Unicorn. Sending SIGUSR2 to either of those triggers restarts. In the case of Puma,
142-1	29602-29609	section	
142-2	29609-29610	.	
142-3	29611-29620	Currently	
142-4	29621-29630	supported	
142-5	29631-29640	profiling	
142-6	29641-29648	targets	
142-7	29649-29652	are	
142-8	29652-29653	:	
142-9	29654-29658	Puma	
142-10	29659-29665	worker	
142-11	29666-29673	Sidekiq	
142-12	29674-29681	noteThe	
142-13	29682-29686	Puma	
142-14	29687-29693	master	
142-15	29694-29701	process	
142-16	29702-29704	is	
142-17	29705-29708	not	
142-18	29709-29718	supported	
142-19	29718-29719	.	
142-20	29720-29727	Neither	
142-21	29728-29730	is	
142-22	29731-29738	Unicorn	
142-23	29738-29739	.	
142-24	29740-29747	Sending	
142-25	29748-29755	SIGUSR2	
142-26	29756-29758	to	
142-27	29759-29765	either	
142-28	29766-29768	of	
142-29	29769-29774	those	
142-30	29775-29783	triggers	
142-31	29784-29792	restarts	
142-32	29792-29793	.	
142-33	29794-29796	In	
142-34	29797-29800	the	
142-35	29801-29805	case	
142-36	29806-29808	of	
142-37	29809-29813	Puma	
142-38	29813-29814	,	

#Text=take care to only send the signal to Puma workers. This can be done via pkill -USR2 puma:. The : distinguishes between puma 4.3.3.gitlab.2 ... (the master process) from puma: cluster worker 0: ... (the worker processes), selecting the latter.
143-1	29815-29819	take	
143-2	29820-29824	care	
143-3	29825-29827	to	
143-4	29828-29832	only	
143-5	29833-29837	send	
143-6	29838-29841	the	
143-7	29842-29848	signal	
143-8	29849-29851	to	
143-9	29852-29856	Puma	
143-10	29857-29864	workers	
143-11	29864-29865	.	
143-12	29866-29870	This	
143-13	29871-29874	can	
143-14	29875-29877	be	
143-15	29878-29882	done	
143-16	29883-29886	via	
143-17	29887-29892	pkill	
143-18	29893-29894	-	
143-19	29894-29898	USR2	
143-20	29899-29903	puma	
143-21	29903-29904	:	
143-22	29904-29905	.	
143-23	29906-29909	The	
143-24	29910-29911	:	
143-25	29912-29925	distinguishes	
143-26	29926-29933	between	
143-27	29934-29938	puma	
143-28	29939-29944	4.3.3	
143-29	29944-29945	.	
143-30	29945-29951	gitlab	
143-31	29951-29953	.2	
143-32	29954-29955	.	
143-33	29955-29956	.	
143-34	29956-29957	.	
143-35	29958-29959	(	
143-36	29959-29962	the	
143-37	29963-29969	master	
143-38	29970-29977	process	
143-39	29977-29978	)	
143-40	29979-29983	from	
143-41	29984-29988	puma	
143-42	29988-29989	:	
143-43	29990-29997	cluster	
143-44	29998-30004	worker	
143-45	30005-30006	0	
143-46	30006-30007	:	
143-47	30008-30009	.	
143-48	30009-30010	.	
143-49	30010-30011	.	
143-50	30012-30013	(	
143-51	30013-30016	the	
143-52	30017-30023	worker	
143-53	30024-30033	processes	
143-54	30033-30034	)	
143-55	30034-30035	,	
143-56	30036-30045	selecting	
143-57	30046-30049	the	
143-58	30050-30056	latter	
143-59	30056-30057	.	

#Text=For Sidekiq, the signal can be sent to the sidekiq-cluster process via pkill -USR2 bin/sidekiq-cluster, which forwards the signal to all Sidekiq children. Alternatively, you can also select a specific PID of interest. Production profiles can be especially noisy. It can be helpful to visualize them as a flame graph. This can be done
144-1	30058-30061	For	
144-2	30062-30069	Sidekiq	
144-3	30069-30070	,	
144-4	30071-30074	the	
144-5	30075-30081	signal	
144-6	30082-30085	can	
144-7	30086-30088	be	
144-8	30089-30093	sent	
144-9	30094-30096	to	
144-10	30097-30100	the	
144-11	30101-30116	sidekiq-cluster	
144-12	30117-30124	process	
144-13	30125-30128	via	
144-14	30129-30134	pkill	
144-15	30135-30136	-	
144-16	30136-30140	USR2	
144-17	30141-30144	bin	
144-18	30144-30145	/	
144-19	30145-30160	sidekiq-cluster	
144-20	30160-30161	,	
144-21	30162-30167	which	
144-22	30168-30176	forwards	
144-23	30177-30180	the	
144-24	30181-30187	signal	
144-25	30188-30190	to	
144-26	30191-30194	all	
144-27	30195-30202	Sidekiq	
144-28	30203-30211	children	
144-29	30211-30212	.	
144-30	30213-30226	Alternatively	
144-31	30226-30227	,	
144-32	30228-30231	you	
144-33	30232-30235	can	
144-34	30236-30240	also	
144-35	30241-30247	select	
144-36	30248-30249	a	
144-37	30250-30258	specific	
144-38	30259-30262	PID	
144-39	30263-30265	of	
144-40	30266-30274	interest	
144-41	30274-30275	.	
144-42	30276-30286	Production	
144-43	30287-30295	profiles	
144-44	30296-30299	can	
144-45	30300-30302	be	
144-46	30303-30313	especially	
144-47	30314-30319	noisy	
144-48	30319-30320	.	
144-49	30321-30323	It	
144-50	30324-30327	can	
144-51	30328-30330	be	
144-52	30331-30338	helpful	
144-53	30339-30341	to	
144-54	30342-30351	visualize	
144-55	30352-30356	them	
144-56	30357-30359	as	
144-57	30360-30361	a	
144-58	30362-30367	flame	
144-59	30368-30373	graph	
144-60	30373-30374	.	
144-61	30375-30379	This	
144-62	30380-30383	can	
144-63	30384-30386	be	
144-64	30387-30391	done	

#Text=via: bundle exec stackprof --stackcollapse /tmp/stackprof.55769.c6c3906452.profile | flamegraph.pl > flamegraph.svg RSpec profiling
145-1	30392-30395	via	
145-2	30395-30396	:	
145-3	30397-30403	bundle	
145-4	30404-30408	exec	
145-5	30409-30418	stackprof	
145-6	30419-30420	-	
145-7	30420-30421	-	
145-8	30421-30434	stackcollapse	
145-9	30435-30436	/	
145-10	30436-30439	tmp	
145-11	30439-30440	/	
145-12	30440-30449	stackprof	
145-13	30449-30455	.55769	
145-14	30455-30456	.	
145-15	30456-30466	c6c3906452	
145-16	30466-30467	.	
145-17	30467-30474	profile	
145-18	30475-30476	|	
145-19	30477-30490	flamegraph.pl	
145-20	30491-30492	>	
145-21	30493-30507	flamegraph.svg	
145-22	30508-30513	RSpec	
145-23	30514-30523	profiling	

#Text=The GitLab development environment also includes the rspec_profiling gem, which is used to collect data on spec execution times. This is useful for analyzing the performance of the test suite itself, or seeing how the performance of a spec may have changed over time.
146-1	30524-30527	The	
146-2	30528-30534	GitLab	
146-3	30535-30546	development	
146-4	30547-30558	environment	
146-5	30559-30563	also	
146-6	30564-30572	includes	
146-7	30573-30576	the	
146-8	30577-30592	rspec_profiling	
146-9	30593-30596	gem	
146-10	30596-30597	,	
146-11	30598-30603	which	
146-12	30604-30606	is	
146-13	30607-30611	used	
146-14	30612-30614	to	
146-15	30615-30622	collect	
146-16	30623-30627	data	
146-17	30628-30630	on	
146-18	30631-30635	spec	
146-19	30636-30645	execution	
146-20	30646-30651	times	
146-21	30651-30652	.	
146-22	30653-30657	This	
146-23	30658-30660	is	
146-24	30661-30667	useful	
146-25	30668-30671	for	
146-26	30672-30681	analyzing	
146-27	30682-30685	the	
146-28	30686-30697	performance	
146-29	30698-30700	of	
146-30	30701-30704	the	
146-31	30705-30709	test	
146-32	30710-30715	suite	
146-33	30716-30722	itself	
146-34	30722-30723	,	
146-35	30724-30726	or	
146-36	30727-30733	seeing	
146-37	30734-30737	how	
146-38	30738-30741	the	
146-39	30742-30753	performance	
146-40	30754-30756	of	
146-41	30757-30758	a	
146-42	30759-30763	spec	
146-43	30764-30767	may	
146-44	30768-30772	have	
146-45	30773-30780	changed	
146-46	30781-30785	over	
146-47	30786-30790	time	
146-48	30790-30791	.	

#Text=To activate profiling in your local environment, run the following: export RSPEC_PROFILING=yes rake rspec_profiling:install This creates an SQLite3 database in tmp/rspec_profiling, into which statistics are saved every time you run specs with the RSPEC_PROFILING environment
147-1	30792-30794	To	
147-2	30795-30803	activate	
147-3	30804-30813	profiling	
147-4	30814-30816	in	
147-5	30817-30821	your	
147-6	30822-30827	local	
147-7	30828-30839	environment	
147-8	30839-30840	,	
147-9	30841-30844	run	
147-10	30845-30848	the	
147-11	30849-30858	following	
147-12	30858-30859	:	
147-13	30860-30866	export	
147-14	30867-30882	RSPEC_PROFILING	
147-15	30882-30883	=	
147-16	30883-30886	yes	
147-17	30887-30891	rake	
147-18	30892-30907	rspec_profiling	
147-19	30907-30908	:	
147-20	30908-30915	install	
147-21	30916-30920	This	
147-22	30921-30928	creates	
147-23	30929-30931	an	
147-24	30932-30939	SQLite3	
147-25	30940-30948	database	
147-26	30949-30951	in	
147-27	30952-30955	tmp	
147-28	30955-30956	/	
147-29	30956-30971	rspec_profiling	
147-30	30971-30972	,	
147-31	30973-30977	into	
147-32	30978-30983	which	
147-33	30984-30994	statistics	
147-34	30995-30998	are	
147-35	30999-31004	saved	
147-36	31005-31010	every	
147-37	31011-31015	time	
147-38	31016-31019	you	
147-39	31020-31023	run	
147-40	31024-31029	specs	
147-41	31030-31034	with	
147-42	31035-31038	the	
147-43	31039-31054	RSPEC_PROFILING	
147-44	31055-31066	environment	

#Text=variable set. Ad-hoc investigation of the collected results can be performed in an interactive shell: $ rake rspec_profiling:console irb(main):001:0> results.count => 231
148-1	31067-31075	variable	
148-2	31076-31079	set	
148-3	31079-31080	.	
148-4	31081-31087	Ad-hoc	
148-5	31088-31101	investigation	
148-6	31102-31104	of	
148-7	31105-31108	the	
148-8	31109-31118	collected	
148-9	31119-31126	results	
148-10	31127-31130	can	
148-11	31131-31133	be	
148-12	31134-31143	performed	
148-13	31144-31146	in	
148-14	31147-31149	an	
148-15	31150-31161	interactive	
148-16	31162-31167	shell	
148-17	31167-31168	:	
148-18	31169-31170	$	
148-19	31171-31175	rake	
148-20	31176-31191	rspec_profiling	
148-21	31191-31192	:	
148-22	31192-31199	console	
148-23	31200-31203	irb	
148-24	31203-31204	(	
148-25	31204-31208	main	
148-26	31208-31209	)	
148-27	31209-31210	:	
148-28	31210-31213	001	
148-29	31213-31214	:	
148-30	31214-31215	0	
148-31	31215-31216	>	
148-32	31217-31230	results.count	
148-33	31231-31232	=	
148-34	31232-31233	>	
148-35	31234-31237	231	

#Text=irb(main):002:0> results.last.attributes.keys => ["id", "commit", "date", "file", "line_number", "description", "time", "status", "exception", "query_count", "query_time", "request_count", "request_time", "created_at", "updated_at"]
149-1	31238-31241	irb	
149-2	31241-31242	(	
149-3	31242-31246	main	
149-4	31246-31247	)	
149-5	31247-31248	:	
149-6	31248-31251	002	
149-7	31251-31252	:	
149-8	31252-31253	0	
149-9	31253-31254	>	
149-10	31255-31283	results.last.attributes.keys	
149-11	31284-31285	=	
149-12	31285-31286	>	
149-13	31287-31288	[	
149-14	31288-31289	"	
149-15	31289-31291	id	
149-16	31291-31292	"	
149-17	31292-31293	,	
149-18	31294-31295	"	
149-19	31295-31301	commit	
149-20	31301-31302	"	
149-21	31302-31303	,	
149-22	31304-31305	"	
149-23	31305-31309	date	
149-24	31309-31310	"	
149-25	31310-31311	,	
149-26	31312-31313	"	
149-27	31313-31317	file	
149-28	31317-31318	"	
149-29	31318-31319	,	
149-30	31320-31321	"	
149-31	31321-31332	line_number	
149-32	31332-31333	"	
149-33	31333-31334	,	
149-34	31335-31336	"	
149-35	31336-31347	description	
149-36	31347-31348	"	
149-37	31348-31349	,	
149-38	31350-31351	"	
149-39	31351-31355	time	
149-40	31355-31356	"	
149-41	31356-31357	,	
149-42	31358-31359	"	
149-43	31359-31365	status	
149-44	31365-31366	"	
149-45	31366-31367	,	
149-46	31368-31369	"	
149-47	31369-31378	exception	
149-48	31378-31379	"	
149-49	31379-31380	,	
149-50	31381-31382	"	
149-51	31382-31393	query_count	
149-52	31393-31394	"	
149-53	31394-31395	,	
149-54	31396-31397	"	
149-55	31397-31407	query_time	
149-56	31407-31408	"	
149-57	31408-31409	,	
149-58	31410-31411	"	
149-59	31411-31424	request_count	
149-60	31424-31425	"	
149-61	31425-31426	,	
149-62	31427-31428	"	
149-63	31428-31440	request_time	
149-64	31440-31441	"	
149-65	31441-31442	,	
149-66	31443-31444	"	
149-67	31444-31454	created_at	
149-68	31454-31455	"	
149-69	31455-31456	,	
149-70	31457-31458	"	
149-71	31458-31468	updated_at	
149-72	31468-31469	"	
149-73	31469-31470	]	

#Text=irb(main):003:0> results.where(status: "passed").average(:time).to_s => "0.211340155844156" These results can also be placed into a PostgreSQL database by setting the RSPEC_PROFILING_POSTGRES_URL variable. This is used to profile the test suite
150-1	31471-31474	irb	
150-2	31474-31475	(	
150-3	31475-31479	main	
150-4	31479-31480	)	
150-5	31480-31481	:	
150-6	31481-31484	003	
150-7	31484-31485	:	
150-8	31485-31486	0	
150-9	31486-31487	>	
150-10	31488-31501	results.where	
150-11	31501-31502	(	
150-12	31502-31508	status	
150-13	31508-31509	:	
150-14	31510-31511	"	
150-15	31511-31517	passed	
150-16	31517-31518	"	
150-17	31518-31519	)	
150-18	31519-31520	.	
150-19	31520-31527	average	
150-20	31527-31528	(	
150-21	31528-31529	:	
150-22	31529-31533	time	
150-23	31533-31534	)	
150-24	31534-31535	.	
150-25	31535-31539	to_s	
150-26	31540-31541	=	
150-27	31541-31542	>	
150-28	31543-31544	"	
150-29	31544-31561	0.211340155844156	
150-30	31561-31562	"	
150-31	31563-31568	These	
150-32	31569-31576	results	
150-33	31577-31580	can	
150-34	31581-31585	also	
150-35	31586-31588	be	
150-36	31589-31595	placed	
150-37	31596-31600	into	
150-38	31601-31602	a	
150-39	31603-31613	PostgreSQL	
150-40	31614-31622	database	
150-41	31623-31625	by	
150-42	31626-31633	setting	
150-43	31634-31637	the	
150-44	31638-31666	RSPEC_PROFILING_POSTGRES_URL	
150-45	31667-31675	variable	
150-46	31675-31676	.	
150-47	31677-31681	This	
150-48	31682-31684	is	
150-49	31685-31689	used	
150-50	31690-31692	to	
150-51	31693-31700	profile	
150-52	31701-31704	the	
150-53	31705-31709	test	
150-54	31710-31715	suite	

#Text=when running in the CI environment. We store these results also when running nightly scheduled CI jobs on the default branch on gitlab.com. Statistics of these profiling data are available online. For example, you can find which tests take longest to run or which execute the most
151-1	31716-31720	when	
151-2	31721-31728	running	
151-3	31729-31731	in	
151-4	31732-31735	the	
151-5	31736-31738	CI	
151-6	31739-31750	environment	
151-7	31750-31751	.	
151-8	31752-31754	We	
151-9	31755-31760	store	
151-10	31761-31766	these	
151-11	31767-31774	results	
151-12	31775-31779	also	
151-13	31780-31784	when	
151-14	31785-31792	running	
151-15	31793-31800	nightly	
151-16	31801-31810	scheduled	
151-17	31811-31813	CI	
151-18	31814-31818	jobs	
151-19	31819-31821	on	
151-20	31822-31825	the	
151-21	31826-31833	default	
151-22	31834-31840	branch	
151-23	31841-31843	on	
151-24	31844-31854	gitlab.com	
151-25	31854-31855	.	
151-26	31856-31866	Statistics	
151-27	31867-31869	of	
151-28	31870-31875	these	
151-29	31876-31885	profiling	
151-30	31886-31890	data	
151-31	31891-31894	are	
151-32	31895-31904	available	
151-33	31905-31911	online	
151-34	31911-31912	.	
151-35	31913-31916	For	
151-36	31917-31924	example	
151-37	31924-31925	,	
151-38	31926-31929	you	
151-39	31930-31933	can	
151-40	31934-31938	find	
151-41	31939-31944	which	
151-42	31945-31950	tests	
151-43	31951-31955	take	
151-44	31956-31963	longest	
151-45	31964-31966	to	
151-46	31967-31970	run	
151-47	31971-31973	or	
151-48	31974-31979	which	
151-49	31980-31987	execute	
151-50	31988-31991	the	
151-51	31992-31996	most	

#Text=queries. This can be handy for optimizing our tests or identifying performance issues in our code. Memory optimization We can use a set of different techniques, often in combination, to track down memory issues: Leaving the code intact and wrapping a profiler around it. Use memory allocation counters for requests and services.
152-1	31997-32004	queries	
152-2	32004-32005	.	
152-3	32006-32010	This	
152-4	32011-32014	can	
152-5	32015-32017	be	
152-6	32018-32023	handy	
152-7	32024-32027	for	
152-8	32028-32038	optimizing	
152-9	32039-32042	our	
152-10	32043-32048	tests	
152-11	32049-32051	or	
152-12	32052-32063	identifying	
152-13	32064-32075	performance	
152-14	32076-32082	issues	
152-15	32083-32085	in	
152-16	32086-32089	our	
152-17	32090-32094	code	
152-18	32094-32095	.	
152-19	32096-32102	Memory	
152-20	32103-32115	optimization	
152-21	32116-32118	We	
152-22	32119-32122	can	
152-23	32123-32126	use	
152-24	32127-32128	a	
152-25	32129-32132	set	
152-26	32133-32135	of	
152-27	32136-32145	different	
152-28	32146-32156	techniques	
152-29	32156-32157	,	
152-30	32158-32163	often	
152-31	32164-32166	in	
152-32	32167-32178	combination	
152-33	32178-32179	,	
152-34	32180-32182	to	
152-35	32183-32188	track	
152-36	32189-32193	down	
152-37	32194-32200	memory	
152-38	32201-32207	issues	
152-39	32207-32208	:	
152-40	32209-32216	Leaving	
152-41	32217-32220	the	
152-42	32221-32225	code	
152-43	32226-32232	intact	
152-44	32233-32236	and	
152-45	32237-32245	wrapping	
152-46	32246-32247	a	
152-47	32248-32256	profiler	
152-48	32257-32263	around	
152-49	32264-32266	it	
152-50	32266-32267	.	
152-51	32268-32271	Use	
152-52	32272-32278	memory	
152-53	32279-32289	allocation	
152-54	32290-32298	counters	
152-55	32299-32302	for	
152-56	32303-32311	requests	
152-57	32312-32315	and	
152-58	32316-32324	services	
152-59	32324-32325	.	

#Text=Monitor memory usage of the process while disabling/enabling different parts of the code we suspect could be problematic. Memory allocations Ruby shipped with GitLab includes a special patch to allow tracing memory allocations. This patch is available by default for Omnibus, CNG, GitLab CI, GCK
153-1	32326-32333	Monitor	
153-2	32334-32340	memory	
153-3	32341-32346	usage	
153-4	32347-32349	of	
153-5	32350-32353	the	
153-6	32354-32361	process	
153-7	32362-32367	while	
153-8	32368-32377	disabling	
153-9	32377-32378	/	
153-10	32378-32386	enabling	
153-11	32387-32396	different	
153-12	32397-32402	parts	
153-13	32403-32405	of	
153-14	32406-32409	the	
153-15	32410-32414	code	
153-16	32415-32417	we	
153-17	32418-32425	suspect	
153-18	32426-32431	could	
153-19	32432-32434	be	
153-20	32435-32446	problematic	
153-21	32446-32447	.	
153-22	32448-32454	Memory	
153-23	32455-32466	allocations	
153-24	32467-32471	Ruby	
153-25	32472-32479	shipped	
153-26	32480-32484	with	
153-27	32485-32491	GitLab	
153-28	32492-32500	includes	
153-29	32501-32502	a	
153-30	32503-32510	special	
153-31	32511-32516	patch	
153-32	32517-32519	to	
153-33	32520-32525	allow	
153-34	32526-32533	tracing	
153-35	32534-32540	memory	
153-36	32541-32552	allocations	
153-37	32552-32553	.	
153-38	32554-32558	This	
153-39	32559-32564	patch	
153-40	32565-32567	is	
153-41	32568-32577	available	
153-42	32578-32580	by	
153-43	32581-32588	default	
153-44	32589-32592	for	
153-45	32593-32600	Omnibus	
153-46	32600-32601	,	
153-47	32602-32605	CNG	
153-48	32605-32606	,	
153-49	32607-32613	GitLab	
153-50	32614-32616	CI	
153-51	32616-32617	,	
153-52	32618-32621	GCK	

#Text=and can additionally be enabled for GDK. This patch provides a set of 3 metrics that makes it easier to understand efficiency of memory usage for a given codepath: mem_objects: the number of objects allocated. mem_bytes: the number of bytes allocated by malloc.
154-1	32622-32625	and	
154-2	32626-32629	can	
154-3	32630-32642	additionally	
154-4	32643-32645	be	
154-5	32646-32653	enabled	
154-6	32654-32657	for	
154-7	32658-32661	GDK	
154-8	32661-32662	.	
154-9	32663-32667	This	
154-10	32668-32673	patch	
154-11	32674-32682	provides	
154-12	32683-32684	a	
154-13	32685-32688	set	
154-14	32689-32691	of	
154-15	32692-32693	3	
154-16	32694-32701	metrics	
154-17	32702-32706	that	
154-18	32707-32712	makes	
154-19	32713-32715	it	
154-20	32716-32722	easier	
154-21	32723-32725	to	
154-22	32726-32736	understand	
154-23	32737-32747	efficiency	
154-24	32748-32750	of	
154-25	32751-32757	memory	
154-26	32758-32763	usage	
154-27	32764-32767	for	
154-28	32768-32769	a	
154-29	32770-32775	given	
154-30	32776-32784	codepath	
154-31	32784-32785	:	
154-32	32786-32797	mem_objects	
154-33	32797-32798	:	
154-34	32799-32802	the	
154-35	32803-32809	number	
154-36	32810-32812	of	
154-37	32813-32820	objects	
154-38	32821-32830	allocated	
154-39	32830-32831	.	
154-40	32832-32841	mem_bytes	
154-41	32841-32842	:	
154-42	32843-32846	the	
154-43	32847-32853	number	
154-44	32854-32856	of	
154-45	32857-32862	bytes	
154-46	32863-32872	allocated	
154-47	32873-32875	by	
154-48	32876-32882	malloc	
154-49	32882-32883	.	

#Text=mem_mallocs: the number of malloc allocations. The number of objects and bytes allocated impact how often GC cycles happen. Fewer objects allocations result in a significantly more responsive application. It is advised that web server requests do not allocate more than 100k mem_objects
155-1	32884-32895	mem_mallocs	
155-2	32895-32896	:	
155-3	32897-32900	the	
155-4	32901-32907	number	
155-5	32908-32910	of	
155-6	32911-32917	malloc	
155-7	32918-32929	allocations	
155-8	32929-32930	.	
155-9	32931-32934	The	
155-10	32935-32941	number	
155-11	32942-32944	of	
155-12	32945-32952	objects	
155-13	32953-32956	and	
155-14	32957-32962	bytes	
155-15	32963-32972	allocated	
155-16	32973-32979	impact	
155-17	32980-32983	how	
155-18	32984-32989	often	
155-19	32990-32992	GC	
155-20	32993-32999	cycles	
155-21	33000-33006	happen	
155-22	33006-33007	.	
155-23	33008-33013	Fewer	
155-24	33014-33021	objects	
155-25	33022-33033	allocations	
155-26	33034-33040	result	
155-27	33041-33043	in	
155-28	33044-33045	a	
155-29	33046-33059	significantly	
155-30	33060-33064	more	
155-31	33065-33075	responsive	
155-32	33076-33087	application	
155-33	33087-33088	.	
155-34	33089-33091	It	
155-35	33092-33094	is	
155-36	33095-33102	advised	
155-37	33103-33107	that	
155-38	33108-33111	web	
155-39	33112-33118	server	
155-40	33119-33127	requests	
155-41	33128-33130	do	
155-42	33131-33134	not	
155-43	33135-33143	allocate	
155-44	33144-33148	more	
155-45	33149-33153	than	
155-46	33154-33158	100k	
155-47	33159-33170	mem_objects	

#Text=and 100M mem_bytes. You can view the current usage on GitLab.com. Checking memory pressure of own code There are two ways of measuring your own code: Review api_json.log, development_json.log, sidekiq.log that includes memory allocation counters.
156-1	33171-33174	and	
156-2	33175-33179	100M	
156-3	33180-33189	mem_bytes	
156-4	33189-33190	.	
156-5	33191-33194	You	
156-6	33195-33198	can	
156-7	33199-33203	view	
156-8	33204-33207	the	
156-9	33208-33215	current	
156-10	33216-33221	usage	
156-11	33222-33224	on	
156-12	33225-33235	GitLab.com	
156-13	33235-33236	.	
156-14	33237-33245	Checking	
156-15	33246-33252	memory	
156-16	33253-33261	pressure	
156-17	33262-33264	of	
156-18	33265-33268	own	
156-19	33269-33273	code	
156-20	33274-33279	There	
156-21	33280-33283	are	
156-22	33284-33287	two	
156-23	33288-33292	ways	
156-24	33293-33295	of	
156-25	33296-33305	measuring	
156-26	33306-33310	your	
156-27	33311-33314	own	
156-28	33315-33319	code	
156-29	33319-33320	:	
156-30	33321-33327	Review	
156-31	33328-33340	api_json.log	
156-32	33340-33341	,	
156-33	33342-33362	development_json.log	
156-34	33362-33363	,	
156-35	33364-33375	sidekiq.log	
156-36	33376-33380	that	
156-37	33381-33389	includes	
156-38	33390-33396	memory	
156-39	33397-33407	allocation	
156-40	33408-33416	counters	
156-41	33416-33417	.	

#Text=Use Gitlab::Memory::Instrumentation.with_memory_allocations for a given codeblock and log it. Use Measuring module
157-1	33418-33421	Use	
157-2	33422-33428	Gitlab	
157-3	33428-33429	:	
157-4	33429-33430	:	
157-5	33430-33436	Memory	
157-6	33436-33437	:	
157-7	33437-33438	:	
157-8	33438-33477	Instrumentation.with_memory_allocations	
157-9	33478-33481	for	
157-10	33482-33483	a	
157-11	33484-33489	given	
157-12	33490-33499	codeblock	
157-13	33500-33503	and	
157-14	33504-33507	log	
157-15	33508-33510	it	
157-16	33510-33511	.	
157-17	33512-33515	Use	
157-18	33516-33525	Measuring	
157-19	33526-33532	module	

#Text={"time":"2021-02-15T11:20:40.821Z","severity":"INFO","duration_s":0.27412,"db_duration_s":0.05755,"view_duration_s":0.21657,"status":201,"method":"POST","path":"/api/v4/projects/user/1","mem_objects":86705,"mem_bytes":4277179,"mem_mallocs":22693,"correlation_id":"...} Different types of allocations The mem_* values represent different aspects of how objects and memory are allocated in Ruby: The following example will create around of 1000 of mem_objects since strings can be frozen, and while the underlying string object remains the same, we still need to allocate 1000 references to this string:
158-1	33533-33534	{	
158-2	33534-33535	"	
158-3	33535-33539	time	
158-4	33539-33540	"	
158-5	33540-33541	:	
158-6	33541-33542	"	
158-7	33542-33546	2021	
158-8	33546-33547	-	
158-9	33547-33549	02	
158-10	33549-33550	-	
158-11	33550-33555	15T11	
158-12	33555-33556	:	
158-13	33556-33558	20	
158-14	33558-33559	:	
158-15	33559-33566	40.821Z	
158-16	33566-33567	"	
158-17	33567-33568	,	
158-18	33568-33569	"	
158-19	33569-33577	severity	
158-20	33577-33578	"	
158-21	33578-33579	:	
158-22	33579-33580	"	
158-23	33580-33584	INFO	
158-24	33584-33585	"	
158-25	33585-33586	,	
158-26	33586-33587	"	
158-27	33587-33597	duration_s	
158-28	33597-33598	"	
158-29	33598-33599	:	
158-30	33599-33606	0.27412	
158-31	33606-33607	,	
158-32	33607-33608	"	
158-33	33608-33621	db_duration_s	
158-34	33621-33622	"	
158-35	33622-33623	:	
158-36	33623-33630	0.05755	
158-37	33630-33631	,	
158-38	33631-33632	"	
158-39	33632-33647	view_duration_s	
158-40	33647-33648	"	
158-41	33648-33649	:	
158-42	33649-33656	0.21657	
158-43	33656-33657	,	
158-44	33657-33658	"	
158-45	33658-33664	status	
158-46	33664-33665	"	
158-47	33665-33666	:	
158-48	33666-33669	201	
158-49	33669-33670	,	
158-50	33670-33671	"	
158-51	33671-33677	method	
158-52	33677-33678	"	
158-53	33678-33679	:	
158-54	33679-33680	"	
158-55	33680-33684	POST	
158-56	33684-33685	"	
158-57	33685-33686	,	
158-58	33686-33687	"	
158-59	33687-33691	path	
158-60	33691-33692	"	
158-61	33692-33693	:	
158-62	33693-33694	"	
158-63	33694-33695	/	
158-64	33695-33698	api	
158-65	33698-33699	/	
158-66	33699-33701	v4	
158-67	33701-33702	/	
158-68	33702-33710	projects	
158-69	33710-33711	/	
158-70	33711-33715	user	
158-71	33715-33716	/	
158-72	33716-33717	1	
158-73	33717-33718	"	
158-74	33718-33719	,	
158-75	33719-33720	"	
158-76	33720-33731	mem_objects	
158-77	33731-33732	"	
158-78	33732-33733	:	
158-79	33733-33738	86705	
158-80	33738-33739	,	
158-81	33739-33740	"	
158-82	33740-33749	mem_bytes	
158-83	33749-33750	"	
158-84	33750-33751	:	
158-85	33751-33758	4277179	
158-86	33758-33759	,	
158-87	33759-33760	"	
158-88	33760-33771	mem_mallocs	
158-89	33771-33772	"	
158-90	33772-33773	:	
158-91	33773-33778	22693	
158-92	33778-33779	,	
158-93	33779-33780	"	
158-94	33780-33794	correlation_id	
158-95	33794-33795	"	
158-96	33795-33796	:	
158-97	33796-33797	"	
158-98	33797-33798	.	
158-99	33798-33799	.	
158-100	33799-33800	.	
158-101	33800-33801	}	
158-102	33802-33811	Different	
158-103	33812-33817	types	
158-104	33818-33820	of	
158-105	33821-33832	allocations	
158-106	33833-33836	The	
158-107	33837-33840	mem	
158-108	33840-33841	_	
158-109	33841-33842	*	
158-110	33843-33849	values	
158-111	33850-33859	represent	
158-112	33860-33869	different	
158-113	33870-33877	aspects	
158-114	33878-33880	of	
158-115	33881-33884	how	
158-116	33885-33892	objects	
158-117	33893-33896	and	
158-118	33897-33903	memory	
158-119	33904-33907	are	
158-120	33908-33917	allocated	
158-121	33918-33920	in	
158-122	33921-33925	Ruby	
158-123	33925-33926	:	
158-124	33927-33930	The	
158-125	33931-33940	following	
158-126	33941-33948	example	
158-127	33949-33953	will	
158-128	33954-33960	create	
158-129	33961-33967	around	
158-130	33968-33970	of	
158-131	33971-33975	1000	
158-132	33976-33978	of	
158-133	33979-33990	mem_objects	
158-134	33991-33996	since	
158-135	33997-34004	strings	
158-136	34005-34008	can	
158-137	34009-34011	be	
158-138	34012-34018	frozen	
158-139	34018-34019	,	
158-140	34020-34023	and	
158-141	34024-34029	while	
158-142	34030-34033	the	
158-143	34034-34044	underlying	
158-144	34045-34051	string	
158-145	34052-34058	object	
158-146	34059-34066	remains	
158-147	34067-34070	the	
158-148	34071-34075	same	
158-149	34075-34076	,	
158-150	34077-34079	we	
158-151	34080-34085	still	
158-152	34086-34090	need	
158-153	34091-34093	to	
158-154	34094-34102	allocate	
158-155	34103-34107	1000	
158-156	34108-34118	references	
158-157	34119-34121	to	
158-158	34122-34126	this	
158-159	34127-34133	string	
158-160	34133-34134	:	

#Text=Gitlab::Memory::Instrumentation.with_memory_allocations do 1_000.times { '0123456789' } end => {:mem_objects=>1001, :mem_bytes=>0, :mem_mallocs=>0}
159-1	34135-34141	Gitlab	
159-2	34141-34142	:	
159-3	34142-34143	:	
159-4	34143-34149	Memory	
159-5	34149-34150	:	
159-6	34150-34151	:	
159-7	34151-34190	Instrumentation.with_memory_allocations	
159-8	34191-34193	do	
159-9	34194-34195	1	
159-10	34195-34196	_	
159-11	34196-34199	000	
159-12	34199-34200	.	
159-13	34200-34205	times	
159-14	34206-34207	{	
159-15	34208-34209	'	
159-16	34209-34219	0123456789	
159-17	34219-34220	'	
159-18	34221-34222	}	
159-19	34223-34226	end	
159-20	34227-34228	=	
159-21	34228-34229	>	
159-22	34230-34231	{	
159-23	34231-34232	:	
159-24	34232-34243	mem_objects	
159-25	34243-34244	=	
159-26	34244-34245	>	
159-27	34245-34249	1001	
159-28	34249-34250	,	
159-29	34251-34252	:	
159-30	34252-34261	mem_bytes	
159-31	34261-34262	=	
159-32	34262-34263	>	
159-33	34263-34264	0	
159-34	34264-34265	,	
159-35	34266-34267	:	
159-36	34267-34278	mem_mallocs	
159-37	34278-34279	=	
159-38	34279-34280	>	
159-39	34280-34281	0	
159-40	34281-34282	}	

#Text=The following example will create around of 1000 of mem_objects, as strings are created dynamically. Each of them will not allocate additional memory, as they fit into Ruby slot of 40 bytes: Gitlab::Memory::Instrumentation.with_memory_allocations do s = '0' 1_000.times { s * 23 }
160-1	34283-34286	The	
160-2	34287-34296	following	
160-3	34297-34304	example	
160-4	34305-34309	will	
160-5	34310-34316	create	
160-6	34317-34323	around	
160-7	34324-34326	of	
160-8	34327-34331	1000	
160-9	34332-34334	of	
160-10	34335-34346	mem_objects	
160-11	34346-34347	,	
160-12	34348-34350	as	
160-13	34351-34358	strings	
160-14	34359-34362	are	
160-15	34363-34370	created	
160-16	34371-34382	dynamically	
160-17	34382-34383	.	
160-18	34384-34388	Each	
160-19	34389-34391	of	
160-20	34392-34396	them	
160-21	34397-34401	will	
160-22	34402-34405	not	
160-23	34406-34414	allocate	
160-24	34415-34425	additional	
160-25	34426-34432	memory	
160-26	34432-34433	,	
160-27	34434-34436	as	
160-28	34437-34441	they	
160-29	34442-34445	fit	
160-30	34446-34450	into	
160-31	34451-34455	Ruby	
160-32	34456-34460	slot	
160-33	34461-34463	of	
160-34	34464-34466	40	
160-35	34467-34472	bytes	
160-36	34472-34473	:	
160-37	34474-34480	Gitlab	
160-38	34480-34481	:	
160-39	34481-34482	:	
160-40	34482-34488	Memory	
160-41	34488-34489	:	
160-42	34489-34490	:	
160-43	34490-34529	Instrumentation.with_memory_allocations	
160-44	34530-34532	do	
160-45	34533-34534	s	
160-46	34535-34536	=	
160-47	34537-34538	'	
160-48	34538-34539	0	
160-49	34539-34540	'	
160-50	34541-34542	1	
160-51	34542-34543	_	
160-52	34543-34546	000	
160-53	34546-34547	.	
160-54	34547-34552	times	
160-55	34553-34554	{	
160-56	34555-34556	s	
160-57	34557-34558	*	
160-58	34559-34561	23	
160-59	34562-34563	}	

#Text=end => {:mem_objects=>1002, :mem_bytes=>0, :mem_mallocs=>0} The following example will create around of 1000 of mem_objects, as strings are created dynamically.
161-1	34564-34567	end	
161-2	34568-34569	=	
161-3	34569-34570	>	
161-4	34571-34572	{	
161-5	34572-34573	:	
161-6	34573-34584	mem_objects	
161-7	34584-34585	=	
161-8	34585-34586	>	
161-9	34586-34590	1002	
161-10	34590-34591	,	
161-11	34592-34593	:	
161-12	34593-34602	mem_bytes	
161-13	34602-34603	=	
161-14	34603-34604	>	
161-15	34604-34605	0	
161-16	34605-34606	,	
161-17	34607-34608	:	
161-18	34608-34619	mem_mallocs	
161-19	34619-34620	=	
161-20	34620-34621	>	
161-21	34621-34622	0	
161-22	34622-34623	}	
161-23	34624-34627	The	
161-24	34628-34637	following	
161-25	34638-34645	example	
161-26	34646-34650	will	
161-27	34651-34657	create	
161-28	34658-34664	around	
161-29	34665-34667	of	
161-30	34668-34672	1000	
161-31	34673-34675	of	
161-32	34676-34687	mem_objects	
161-33	34687-34688	,	
161-34	34689-34691	as	
161-35	34692-34699	strings	
161-36	34700-34703	are	
161-37	34704-34711	created	
161-38	34712-34723	dynamically	
161-39	34723-34724	.	

#Text=Each of them will allocate additional memory as strings are larger than Ruby slot of 40 bytes: Gitlab::Memory::Instrumentation.with_memory_allocations do s = '0' 1_000.times { s * 24 } end => {:mem_objects=>1002, :mem_bytes=>32000, :mem_mallocs=>1000}
162-1	34725-34729	Each	
162-2	34730-34732	of	
162-3	34733-34737	them	
162-4	34738-34742	will	
162-5	34743-34751	allocate	
162-6	34752-34762	additional	
162-7	34763-34769	memory	
162-8	34770-34772	as	
162-9	34773-34780	strings	
162-10	34781-34784	are	
162-11	34785-34791	larger	
162-12	34792-34796	than	
162-13	34797-34801	Ruby	
162-14	34802-34806	slot	
162-15	34807-34809	of	
162-16	34810-34812	40	
162-17	34813-34818	bytes	
162-18	34818-34819	:	
162-19	34820-34826	Gitlab	
162-20	34826-34827	:	
162-21	34827-34828	:	
162-22	34828-34834	Memory	
162-23	34834-34835	:	
162-24	34835-34836	:	
162-25	34836-34875	Instrumentation.with_memory_allocations	
162-26	34876-34878	do	
162-27	34879-34880	s	
162-28	34881-34882	=	
162-29	34883-34884	'	
162-30	34884-34885	0	
162-31	34885-34886	'	
162-32	34887-34888	1	
162-33	34888-34889	_	
162-34	34889-34892	000	
162-35	34892-34893	.	
162-36	34893-34898	times	
162-37	34899-34900	{	
162-38	34901-34902	s	
162-39	34903-34904	*	
162-40	34905-34907	24	
162-41	34908-34909	}	
162-42	34910-34913	end	
162-43	34914-34915	=	
162-44	34915-34916	>	
162-45	34917-34918	{	
162-46	34918-34919	:	
162-47	34919-34930	mem_objects	
162-48	34930-34931	=	
162-49	34931-34932	>	
162-50	34932-34936	1002	
162-51	34936-34937	,	
162-52	34938-34939	:	
162-53	34939-34948	mem_bytes	
162-54	34948-34949	=	
162-55	34949-34950	>	
162-56	34950-34955	32000	
162-57	34955-34956	,	
162-58	34957-34958	:	
162-59	34958-34969	mem_mallocs	
162-60	34969-34970	=	
162-61	34970-34971	>	
162-62	34971-34975	1000	
162-63	34975-34976	}	

#Text=The following example will allocate over 40kB of data, and perform only a single memory allocation. The existing object will be reallocated/resized on subsequent iterations: Gitlab::Memory::Instrumentation.with_memory_allocations do str = ''
163-1	34977-34980	The	
163-2	34981-34990	following	
163-3	34991-34998	example	
163-4	34999-35003	will	
163-5	35004-35012	allocate	
163-6	35013-35017	over	
163-7	35018-35022	40kB	
163-8	35023-35025	of	
163-9	35026-35030	data	
163-10	35030-35031	,	
163-11	35032-35035	and	
163-12	35036-35043	perform	
163-13	35044-35048	only	
163-14	35049-35050	a	
163-15	35051-35057	single	
163-16	35058-35064	memory	
163-17	35065-35075	allocation	
163-18	35075-35076	.	
163-19	35077-35080	The	
163-20	35081-35089	existing	
163-21	35090-35096	object	
163-22	35097-35101	will	
163-23	35102-35104	be	
163-24	35105-35116	reallocated	
163-25	35116-35117	/	
163-26	35117-35124	resized	
163-27	35125-35127	on	
163-28	35128-35138	subsequent	
163-29	35139-35149	iterations	
163-30	35149-35150	:	
163-31	35151-35157	Gitlab	
163-32	35157-35158	:	
163-33	35158-35159	:	
163-34	35159-35165	Memory	
163-35	35165-35166	:	
163-36	35166-35167	:	
163-37	35167-35206	Instrumentation.with_memory_allocations	
163-38	35207-35209	do	
163-39	35210-35213	str	
163-40	35214-35215	=	
163-41	35216-35217	'	
163-42	35217-35218	'	

#Text=append = '0123456789012345678901234567890123456789' # 40 bytes 1_000.times { str.concat(append) } end => {:mem_objects=>3, :mem_bytes=>49152, :mem_mallocs=>1}
164-1	35219-35225	append	
164-2	35226-35227	=	
164-3	35228-35229	'	
164-4	35229-35269	0123456789012345678901234567890123456789	
164-5	35269-35270	'	
164-6	35271-35272	#	
164-7	35273-35275	40	
164-8	35276-35281	bytes	
164-9	35282-35283	1	
164-10	35283-35284	_	
164-11	35284-35287	000	
164-12	35287-35288	.	
164-13	35288-35293	times	
164-14	35294-35295	{	
164-15	35296-35306	str.concat	
164-16	35306-35307	(	
164-17	35307-35313	append	
164-18	35313-35314	)	
164-19	35315-35316	}	
164-20	35317-35320	end	
164-21	35321-35322	=	
164-22	35322-35323	>	
164-23	35324-35325	{	
164-24	35325-35326	:	
164-25	35326-35337	mem_objects	
164-26	35337-35338	=	
164-27	35338-35339	>	
164-28	35339-35340	3	
164-29	35340-35341	,	
164-30	35342-35343	:	
164-31	35343-35352	mem_bytes	
164-32	35352-35353	=	
164-33	35353-35354	>	
164-34	35354-35359	49152	
164-35	35359-35360	,	
164-36	35361-35362	:	
164-37	35362-35373	mem_mallocs	
164-38	35373-35374	=	
164-39	35374-35375	>	
164-40	35375-35376	1	
164-41	35376-35377	}	

#Text=The following example will create over 1k of objects, perform over 1k of allocations, each time mutating the object. This does result in copying a lot of data and perform a lot of memory allocations (as represented by mem_bytes counter) indicating very inefficient method of appending string: Gitlab::Memory::Instrumentation.with_memory_allocations do
165-1	35378-35381	The	
165-2	35382-35391	following	
165-3	35392-35399	example	
165-4	35400-35404	will	
165-5	35405-35411	create	
165-6	35412-35416	over	
165-7	35417-35419	1k	
165-8	35420-35422	of	
165-9	35423-35430	objects	
165-10	35430-35431	,	
165-11	35432-35439	perform	
165-12	35440-35444	over	
165-13	35445-35447	1k	
165-14	35448-35450	of	
165-15	35451-35462	allocations	
165-16	35462-35463	,	
165-17	35464-35468	each	
165-18	35469-35473	time	
165-19	35474-35482	mutating	
165-20	35483-35486	the	
165-21	35487-35493	object	
165-22	35493-35494	.	
165-23	35495-35499	This	
165-24	35500-35504	does	
165-25	35505-35511	result	
165-26	35512-35514	in	
165-27	35515-35522	copying	
165-28	35523-35524	a	
165-29	35525-35528	lot	
165-30	35529-35531	of	
165-31	35532-35536	data	
165-32	35537-35540	and	
165-33	35541-35548	perform	
165-34	35549-35550	a	
165-35	35551-35554	lot	
165-36	35555-35557	of	
165-37	35558-35564	memory	
165-38	35565-35576	allocations	
165-39	35577-35578	(	
165-40	35578-35580	as	
165-41	35581-35592	represented	
165-42	35593-35595	by	
165-43	35596-35605	mem_bytes	
165-44	35606-35613	counter	
165-45	35613-35614	)	
165-46	35615-35625	indicating	
165-47	35626-35630	very	
165-48	35631-35642	inefficient	
165-49	35643-35649	method	
165-50	35650-35652	of	
165-51	35653-35662	appending	
165-52	35663-35669	string	
165-53	35669-35670	:	
165-54	35671-35677	Gitlab	
165-55	35677-35678	:	
165-56	35678-35679	:	
165-57	35679-35685	Memory	
165-58	35685-35686	:	
165-59	35686-35687	:	
165-60	35687-35726	Instrumentation.with_memory_allocations	
165-61	35727-35729	do	

#Text=str = '' append = '0123456789012345678901234567890123456789' # 40 bytes 1_000.times { str += append } end
166-1	35730-35733	str	
166-2	35734-35735	=	
166-3	35736-35737	'	
166-4	35737-35738	'	
166-5	35739-35745	append	
166-6	35746-35747	=	
166-7	35748-35749	'	
166-8	35749-35789	0123456789012345678901234567890123456789	
166-9	35789-35790	'	
166-10	35791-35792	#	
166-11	35793-35795	40	
166-12	35796-35801	bytes	
166-13	35802-35803	1	
166-14	35803-35804	_	
166-15	35804-35807	000	
166-16	35807-35808	.	
166-17	35808-35813	times	
166-18	35814-35815	{	
166-19	35816-35819	str	
166-20	35820-35821	+	
166-21	35821-35822	=	
166-22	35823-35829	append	
166-23	35830-35831	}	
166-24	35832-35835	end	

#Text==> {:mem_objects=>1003, :mem_bytes=>21968752, :mem_mallocs=>1000} Using Memory Profiler We can use memory_profiler for profiling. The memory_profiler gem is already present in the GitLab Gemfile, you just need to require it: require 'sidekiq/testing'
167-1	35836-35837	=	
167-2	35837-35838	>	
167-3	35839-35840	{	
167-4	35840-35841	:	
167-5	35841-35852	mem_objects	
167-6	35852-35853	=	
167-7	35853-35854	>	
167-8	35854-35858	1003	
167-9	35858-35859	,	
167-10	35860-35861	:	
167-11	35861-35870	mem_bytes	
167-12	35870-35871	=	
167-13	35871-35872	>	
167-14	35872-35880	21968752	
167-15	35880-35881	,	
167-16	35882-35883	:	
167-17	35883-35894	mem_mallocs	
167-18	35894-35895	=	
167-19	35895-35896	>	
167-20	35896-35900	1000	
167-21	35900-35901	}	
167-22	35902-35907	Using	
167-23	35908-35914	Memory	
167-24	35915-35923	Profiler	
167-25	35924-35926	We	
167-26	35927-35930	can	
167-27	35931-35934	use	
167-28	35935-35950	memory_profiler	
167-29	35951-35954	for	
167-30	35955-35964	profiling	
167-31	35964-35965	.	
167-32	35966-35969	The	
167-33	35970-35985	memory_profiler	
167-34	35986-35989	gem	
167-35	35990-35992	is	
167-36	35993-36000	already	
167-37	36001-36008	present	
167-38	36009-36011	in	
167-39	36012-36015	the	
167-40	36016-36022	GitLab	
167-41	36023-36030	Gemfile	
167-42	36030-36031	,	
167-43	36032-36035	you	
167-44	36036-36040	just	
167-45	36041-36045	need	
167-46	36046-36048	to	
167-47	36049-36056	require	
167-48	36057-36059	it	
167-49	36059-36060	:	
167-50	36061-36068	require	
167-51	36069-36070	'	
167-52	36070-36077	sidekiq	
167-53	36077-36078	/	
167-54	36078-36085	testing	
167-55	36085-36086	'	

#Text=report = MemoryProfiler.report do # Code you want to profile end output = File.open('/tmp/profile.txt','w') report.pretty_print(output) The report breaks down 2 key concepts:
168-1	36087-36093	report	
168-2	36094-36095	=	
168-3	36096-36117	MemoryProfiler.report	
168-4	36118-36120	do	
168-5	36121-36122	#	
168-6	36123-36127	Code	
168-7	36128-36131	you	
168-8	36132-36136	want	
168-9	36137-36139	to	
168-10	36140-36147	profile	
168-11	36148-36151	end	
168-12	36152-36158	output	
168-13	36159-36160	=	
168-14	36161-36170	File.open	
168-15	36170-36171	(	
168-16	36171-36172	'	
168-17	36172-36173	/	
168-18	36173-36176	tmp	
168-19	36176-36177	/	
168-20	36177-36188	profile.txt	
168-21	36188-36189	'	
168-22	36189-36190	,	
168-23	36190-36191	'	
168-24	36191-36192	w	
168-25	36192-36193	'	
168-26	36193-36194	)	
168-27	36195-36214	report.pretty_print	
168-28	36214-36215	(	
168-29	36215-36221	output	
168-30	36221-36222	)	
168-31	36223-36226	The	
168-32	36227-36233	report	
168-33	36234-36240	breaks	
168-34	36241-36245	down	
168-35	36246-36247	2	
168-36	36248-36251	key	
168-37	36252-36260	concepts	
168-38	36260-36261	:	

#Text=Retained: long lived memory use and object count retained due to the execution of the code block. Allocated: all object allocation and memory allocation during code block. As a general rule, retained is always smaller than or equal to allocated. The actual RSS cost is always slightly higher as MRI heaps are not squashed to size and memory fragments. Rbtrace
169-1	36262-36270	Retained	
169-2	36270-36271	:	
169-3	36272-36276	long	
169-4	36277-36282	lived	
169-5	36283-36289	memory	
169-6	36290-36293	use	
169-7	36294-36297	and	
169-8	36298-36304	object	
169-9	36305-36310	count	
169-10	36311-36319	retained	
169-11	36320-36323	due	
169-12	36324-36326	to	
169-13	36327-36330	the	
169-14	36331-36340	execution	
169-15	36341-36343	of	
169-16	36344-36347	the	
169-17	36348-36352	code	
169-18	36353-36358	block	
169-19	36358-36359	.	
169-20	36360-36369	Allocated	
169-21	36369-36370	:	
169-22	36371-36374	all	
169-23	36375-36381	object	
169-24	36382-36392	allocation	
169-25	36393-36396	and	
169-26	36397-36403	memory	
169-27	36404-36414	allocation	
169-28	36415-36421	during	
169-29	36422-36426	code	
169-30	36427-36432	block	
169-31	36432-36433	.	
169-32	36434-36436	As	
169-33	36437-36438	a	
169-34	36439-36446	general	
169-35	36447-36451	rule	
169-36	36451-36452	,	
169-37	36453-36461	retained	
169-38	36462-36464	is	
169-39	36465-36471	always	
169-40	36472-36479	smaller	
169-41	36480-36484	than	
169-42	36485-36487	or	
169-43	36488-36493	equal	
169-44	36494-36496	to	
169-45	36497-36506	allocated	
169-46	36506-36507	.	
169-47	36508-36511	The	
169-48	36512-36518	actual	
169-49	36519-36522	RSS	
169-50	36523-36527	cost	
169-51	36528-36530	is	
169-52	36531-36537	always	
169-53	36538-36546	slightly	
169-54	36547-36553	higher	
169-55	36554-36556	as	
169-56	36557-36560	MRI	
169-57	36561-36566	heaps	
169-58	36567-36570	are	
169-59	36571-36574	not	
169-60	36575-36583	squashed	
169-61	36584-36586	to	
169-62	36587-36591	size	
169-63	36592-36595	and	
169-64	36596-36602	memory	
169-65	36603-36612	fragments	
169-66	36612-36613	.	
169-67	36614-36621	Rbtrace	

#Text=One of the reasons of the increased memory footprint could be Ruby memory fragmentation. To diagnose it, you can visualize Ruby heap as described in this post by Aaron Patterson. To start, you want to dump the heap of the process you’re investigating to a JSON file. You need to run the command inside the process you’re exploring, you may do that with rbtrace.
170-1	36622-36625	One	
170-2	36626-36628	of	
170-3	36629-36632	the	
170-4	36633-36640	reasons	
170-5	36641-36643	of	
170-6	36644-36647	the	
170-7	36648-36657	increased	
170-8	36658-36664	memory	
170-9	36665-36674	footprint	
170-10	36675-36680	could	
170-11	36681-36683	be	
170-12	36684-36688	Ruby	
170-13	36689-36695	memory	
170-14	36696-36709	fragmentation	
170-15	36709-36710	.	
170-16	36711-36713	To	
170-17	36714-36722	diagnose	
170-18	36723-36725	it	
170-19	36725-36726	,	
170-20	36727-36730	you	
170-21	36731-36734	can	
170-22	36735-36744	visualize	
170-23	36745-36749	Ruby	
170-24	36750-36754	heap	
170-25	36755-36757	as	
170-26	36758-36767	described	
170-27	36768-36770	in	
170-28	36771-36775	this	
170-29	36776-36780	post	
170-30	36781-36783	by	
170-31	36784-36789	Aaron	
170-32	36790-36799	Patterson	
170-33	36799-36800	.	
170-34	36801-36803	To	
170-35	36804-36809	start	
170-36	36809-36810	,	
170-37	36811-36814	you	
170-38	36815-36819	want	
170-39	36820-36822	to	
170-40	36823-36827	dump	
170-41	36828-36831	the	
170-42	36832-36836	heap	
170-43	36837-36839	of	
170-44	36840-36843	the	
170-45	36844-36851	process	
170-46	36852-36855	you	
170-47	36855-36856	’	
170-48	36856-36858	re	
170-49	36859-36872	investigating	
170-50	36873-36875	to	
170-51	36876-36877	a	
170-52	36878-36882	JSON	
170-53	36883-36887	file	
170-54	36887-36888	.	
170-55	36889-36892	You	
170-56	36893-36897	need	
170-57	36898-36900	to	
170-58	36901-36904	run	
170-59	36905-36908	the	
170-60	36909-36916	command	
170-61	36917-36923	inside	
170-62	36924-36927	the	
170-63	36928-36935	process	
170-64	36936-36939	you	
170-65	36939-36940	’	
170-66	36940-36942	re	
170-67	36943-36952	exploring	
170-68	36952-36953	,	
170-69	36954-36957	you	
170-70	36958-36961	may	
170-71	36962-36964	do	
170-72	36965-36969	that	
170-73	36970-36974	with	
170-74	36975-36982	rbtrace	
170-75	36982-36983	.	

#Text=rbtrace is already present in GitLab Gemfile, you just need to require it. It could be achieved running webserver or Sidekiq with the environment variable set to ENABLE_RBTRACE=1. To get the heap dump:
171-1	36984-36991	rbtrace	
171-2	36992-36994	is	
171-3	36995-37002	already	
171-4	37003-37010	present	
171-5	37011-37013	in	
171-6	37014-37020	GitLab	
171-7	37021-37028	Gemfile	
171-8	37028-37029	,	
171-9	37030-37033	you	
171-10	37034-37038	just	
171-11	37039-37043	need	
171-12	37044-37046	to	
171-13	37047-37054	require	
171-14	37055-37057	it	
171-15	37057-37058	.	
171-16	37059-37061	It	
171-17	37062-37067	could	
171-18	37068-37070	be	
171-19	37071-37079	achieved	
171-20	37080-37087	running	
171-21	37088-37097	webserver	
171-22	37098-37100	or	
171-23	37101-37108	Sidekiq	
171-24	37109-37113	with	
171-25	37114-37117	the	
171-26	37118-37129	environment	
171-27	37130-37138	variable	
171-28	37139-37142	set	
171-29	37143-37145	to	
171-30	37146-37160	ENABLE_RBTRACE	
171-31	37160-37161	=	
171-32	37161-37162	1	
171-33	37162-37163	.	
171-34	37164-37166	To	
171-35	37167-37170	get	
171-36	37171-37174	the	
171-37	37175-37179	heap	
171-38	37180-37184	dump	
171-39	37184-37185	:	

#Text=bundle exec rbtrace -p <PID> -e 'File.open("heap.json", "wb") { |t| ObjectSpace.dump_all(output: t) }' Having the JSON, you finally could render a picture using the script provided by Aaron or similar: ruby heapviz.rb heap.json Fragmented Ruby heap snapshot could look like this:
172-1	37186-37192	bundle	
172-2	37193-37197	exec	
172-3	37198-37205	rbtrace	
172-4	37206-37207	-	
172-5	37207-37208	p	
172-6	37209-37210	<	
172-7	37210-37213	PID	
172-8	37213-37214	>	
172-9	37215-37216	-	
172-10	37216-37217	e	
172-11	37218-37219	'	
172-12	37219-37228	File.open	
172-13	37228-37229	(	
172-14	37229-37230	"	
172-15	37230-37239	heap.json	
172-16	37239-37240	"	
172-17	37240-37241	,	
172-18	37242-37243	"	
172-19	37243-37245	wb	
172-20	37245-37246	"	
172-21	37246-37247	)	
172-22	37248-37249	{	
172-23	37250-37251	|	
172-24	37251-37252	t	
172-25	37252-37253	|	
172-26	37254-37274	ObjectSpace.dump_all	
172-27	37274-37275	(	
172-28	37275-37281	output	
172-29	37281-37282	:	
172-30	37283-37284	t	
172-31	37284-37285	)	
172-32	37286-37287	}	
172-33	37287-37288	'	
172-34	37289-37295	Having	
172-35	37296-37299	the	
172-36	37300-37304	JSON	
172-37	37304-37305	,	
172-38	37306-37309	you	
172-39	37310-37317	finally	
172-40	37318-37323	could	
172-41	37324-37330	render	
172-42	37331-37332	a	
172-43	37333-37340	picture	
172-44	37341-37346	using	
172-45	37347-37350	the	
172-46	37351-37357	script	
172-47	37358-37366	provided	
172-48	37367-37369	by	
172-49	37370-37375	Aaron	
172-50	37376-37378	or	
172-51	37379-37386	similar	
172-52	37386-37387	:	
172-53	37388-37392	ruby	
172-54	37393-37403	heapviz.rb	
172-55	37404-37413	heap.json	
172-56	37414-37424	Fragmented	
172-57	37425-37429	Ruby	
172-58	37430-37434	heap	
172-59	37435-37443	snapshot	
172-60	37444-37449	could	
172-61	37450-37454	look	
172-62	37455-37459	like	
172-63	37460-37464	this	
172-64	37464-37465	:	

#Text=Memory fragmentation could be reduced by tuning GC parameters as described in this post. This should be considered as a tradeoff, as it may affect overall performance of memory allocation and GC cycles. Importance of Changes When working on performance improvements, it’s important to always ask yourself the question “How important is it to improve the performance of this piece of code?”. Not every piece of code is equally important and it would be a waste to
173-1	37466-37472	Memory	
173-2	37473-37486	fragmentation	
173-3	37487-37492	could	
173-4	37493-37495	be	
173-5	37496-37503	reduced	
173-6	37504-37506	by	
173-7	37507-37513	tuning	
173-8	37514-37516	GC	
173-9	37517-37527	parameters	
173-10	37528-37530	as	
173-11	37531-37540	described	
173-12	37541-37543	in	
173-13	37544-37548	this	
173-14	37549-37553	post	
173-15	37553-37554	.	
173-16	37555-37559	This	
173-17	37560-37566	should	
173-18	37567-37569	be	
173-19	37570-37580	considered	
173-20	37581-37583	as	
173-21	37584-37585	a	
173-22	37586-37594	tradeoff	
173-23	37594-37595	,	
173-24	37596-37598	as	
173-25	37599-37601	it	
173-26	37602-37605	may	
173-27	37606-37612	affect	
173-28	37613-37620	overall	
173-29	37621-37632	performance	
173-30	37633-37635	of	
173-31	37636-37642	memory	
173-32	37643-37653	allocation	
173-33	37654-37657	and	
173-34	37658-37660	GC	
173-35	37661-37667	cycles	
173-36	37667-37668	.	
173-37	37669-37679	Importance	
173-38	37680-37682	of	
173-39	37683-37690	Changes	
173-40	37691-37695	When	
173-41	37696-37703	working	
173-42	37704-37706	on	
173-43	37707-37718	performance	
173-44	37719-37731	improvements	
173-45	37731-37732	,	
173-46	37733-37735	it	
173-47	37735-37736	’	
173-48	37736-37737	s	
173-49	37738-37747	important	
173-50	37748-37750	to	
173-51	37751-37757	always	
173-52	37758-37761	ask	
173-53	37762-37770	yourself	
173-54	37771-37774	the	
173-55	37775-37783	question	
173-56	37784-37785	“	
173-57	37785-37788	How	
173-58	37789-37798	important	
173-59	37799-37801	is	
173-60	37802-37804	it	
173-61	37805-37807	to	
173-62	37808-37815	improve	
173-63	37816-37819	the	
173-64	37820-37831	performance	
173-65	37832-37834	of	
173-66	37835-37839	this	
173-67	37840-37845	piece	
173-68	37846-37848	of	
173-69	37849-37853	code	
173-70	37853-37854	?	
173-71	37854-37855	”	
173-72	37855-37856	.	
173-73	37857-37860	Not	
173-74	37861-37866	every	
173-75	37867-37872	piece	
173-76	37873-37875	of	
173-77	37876-37880	code	
173-78	37881-37883	is	
173-79	37884-37891	equally	
173-80	37892-37901	important	
173-81	37902-37905	and	
173-82	37906-37908	it	
173-83	37909-37914	would	
173-84	37915-37917	be	
173-85	37918-37919	a	
173-86	37920-37925	waste	
173-87	37926-37928	to	

#Text=spend a week trying to improve something that only impacts a tiny fraction of our users. For example, spending a week trying to squeeze 10 milliseconds out of a method is a waste of time when you could have spent a week squeezing out 10 seconds elsewhere. There is no clear set of steps that you can follow to determine if a certain
174-1	37929-37934	spend	
174-2	37935-37936	a	
174-3	37937-37941	week	
174-4	37942-37948	trying	
174-5	37949-37951	to	
174-6	37952-37959	improve	
174-7	37960-37969	something	
174-8	37970-37974	that	
174-9	37975-37979	only	
174-10	37980-37987	impacts	
174-11	37988-37989	a	
174-12	37990-37994	tiny	
174-13	37995-38003	fraction	
174-14	38004-38006	of	
174-15	38007-38010	our	
174-16	38011-38016	users	
174-17	38016-38017	.	
174-18	38018-38021	For	
174-19	38022-38029	example	
174-20	38029-38030	,	
174-21	38031-38039	spending	
174-22	38040-38041	a	
174-23	38042-38046	week	
174-24	38047-38053	trying	
174-25	38054-38056	to	
174-26	38057-38064	squeeze	
174-27	38065-38067	10	
174-28	38068-38080	milliseconds	
174-29	38081-38084	out	
174-30	38085-38087	of	
174-31	38088-38089	a	
174-32	38090-38096	method	
174-33	38097-38099	is	
174-34	38100-38101	a	
174-35	38102-38107	waste	
174-36	38108-38110	of	
174-37	38111-38115	time	
174-38	38116-38120	when	
174-39	38121-38124	you	
174-40	38125-38130	could	
174-41	38131-38135	have	
174-42	38136-38141	spent	
174-43	38142-38143	a	
174-44	38144-38148	week	
174-45	38149-38158	squeezing	
174-46	38159-38162	out	
174-47	38163-38165	10	
174-48	38166-38173	seconds	
174-49	38174-38183	elsewhere	
174-50	38183-38184	.	
174-51	38185-38190	There	
174-52	38191-38193	is	
174-53	38194-38196	no	
174-54	38197-38202	clear	
174-55	38203-38206	set	
174-56	38207-38209	of	
174-57	38210-38215	steps	
174-58	38216-38220	that	
174-59	38221-38224	you	
174-60	38225-38228	can	
174-61	38229-38235	follow	
174-62	38236-38238	to	
174-63	38239-38248	determine	
174-64	38249-38251	if	
174-65	38252-38253	a	
174-66	38254-38261	certain	

#Text=piece of code is worth optimizing. The only two things you can do are: Think about what the code does, how it’s used, how many times it’s called and how much time is spent in it relative to the total execution time (for example, the total time spent in a web request). Ask others (preferably in the form of an issue).
175-1	38262-38267	piece	
175-2	38268-38270	of	
175-3	38271-38275	code	
175-4	38276-38278	is	
175-5	38279-38284	worth	
175-6	38285-38295	optimizing	
175-7	38295-38296	.	
175-8	38297-38300	The	
175-9	38301-38305	only	
175-10	38306-38309	two	
175-11	38310-38316	things	
175-12	38317-38320	you	
175-13	38321-38324	can	
175-14	38325-38327	do	
175-15	38328-38331	are	
175-16	38331-38332	:	
175-17	38333-38338	Think	
175-18	38339-38344	about	
175-19	38345-38349	what	
175-20	38350-38353	the	
175-21	38354-38358	code	
175-22	38359-38363	does	
175-23	38363-38364	,	
175-24	38365-38368	how	
175-25	38369-38371	it	
175-26	38371-38372	’	
175-27	38372-38373	s	
175-28	38374-38378	used	
175-29	38378-38379	,	
175-30	38380-38383	how	
175-31	38384-38388	many	
175-32	38389-38394	times	
175-33	38395-38397	it	
175-34	38397-38398	’	
175-35	38398-38399	s	
175-36	38400-38406	called	
175-37	38407-38410	and	
175-38	38411-38414	how	
175-39	38415-38419	much	
175-40	38420-38424	time	
175-41	38425-38427	is	
175-42	38428-38433	spent	
175-43	38434-38436	in	
175-44	38437-38439	it	
175-45	38440-38448	relative	
175-46	38449-38451	to	
175-47	38452-38455	the	
175-48	38456-38461	total	
175-49	38462-38471	execution	
175-50	38472-38476	time	
175-51	38477-38478	(	
175-52	38478-38481	for	
175-53	38482-38489	example	
175-54	38489-38490	,	
175-55	38491-38494	the	
175-56	38495-38500	total	
175-57	38501-38505	time	
175-58	38506-38511	spent	
175-59	38512-38514	in	
175-60	38515-38516	a	
175-61	38517-38520	web	
175-62	38521-38528	request	
175-63	38528-38529	)	
175-64	38529-38530	.	
175-65	38531-38534	Ask	
175-66	38535-38541	others	
175-67	38542-38543	(	
175-68	38543-38553	preferably	
175-69	38554-38556	in	
175-70	38557-38560	the	
175-71	38561-38565	form	
175-72	38566-38568	of	
175-73	38569-38571	an	
175-74	38572-38577	issue	
175-75	38577-38578	)	
175-76	38578-38579	.	

#Text=Some examples of changes that are not really important/worth the effort: Replacing double quotes with single quotes. Replacing usage of Array with Set when the list of values is very small. Replacing library A with library B when both only take up 0.1% of the total execution time. Calling freeze on every string (see String Freezing).
176-1	38580-38584	Some	
176-2	38585-38593	examples	
176-3	38594-38596	of	
176-4	38597-38604	changes	
176-5	38605-38609	that	
176-6	38610-38613	are	
176-7	38614-38617	not	
176-8	38618-38624	really	
176-9	38625-38634	important	
176-10	38634-38635	/	
176-11	38635-38640	worth	
176-12	38641-38644	the	
176-13	38645-38651	effort	
176-14	38651-38652	:	
176-15	38653-38662	Replacing	
176-16	38663-38669	double	
176-17	38670-38676	quotes	
176-18	38677-38681	with	
176-19	38682-38688	single	
176-20	38689-38695	quotes	
176-21	38695-38696	.	
176-22	38697-38706	Replacing	
176-23	38707-38712	usage	
176-24	38713-38715	of	
176-25	38716-38721	Array	
176-26	38722-38726	with	
176-27	38727-38730	Set	
176-28	38731-38735	when	
176-29	38736-38739	the	
176-30	38740-38744	list	
176-31	38745-38747	of	
176-32	38748-38754	values	
176-33	38755-38757	is	
176-34	38758-38762	very	
176-35	38763-38768	small	
176-36	38768-38769	.	
176-37	38770-38779	Replacing	
176-38	38780-38787	library	
176-39	38788-38789	A	
176-40	38790-38794	with	
176-41	38795-38802	library	
176-42	38803-38804	B	
176-43	38805-38809	when	
176-44	38810-38814	both	
176-45	38815-38819	only	
176-46	38820-38824	take	
176-47	38825-38827	up	
176-48	38828-38832	0.1%	
176-49	38833-38835	of	
176-50	38836-38839	the	
176-51	38840-38845	total	
176-52	38846-38855	execution	
176-53	38856-38860	time	
176-54	38860-38861	.	
176-55	38862-38869	Calling	
176-56	38870-38876	freeze	
176-57	38877-38879	on	
176-58	38880-38885	every	
176-59	38886-38892	string	
176-60	38893-38894	(	
176-61	38894-38897	see	
176-62	38898-38904	String	
176-63	38905-38913	Freezing	
176-64	38913-38914	)	
176-65	38914-38915	.	

#Text=Slow Operations & Sidekiq Slow operations, like merging branches, or operations that are prone to errors (using external APIs) should be performed in a Sidekiq worker instead of directly in a web request as much as possible. This has numerous benefits such as: An error doesn’t prevent the request from completing.
177-1	38916-38920	Slow	
177-2	38921-38931	Operations	
177-3	38932-38933	&	
177-4	38934-38941	Sidekiq	
177-5	38942-38946	Slow	
177-6	38947-38957	operations	
177-7	38957-38958	,	
177-8	38959-38963	like	
177-9	38964-38971	merging	
177-10	38972-38980	branches	
177-11	38980-38981	,	
177-12	38982-38984	or	
177-13	38985-38995	operations	
177-14	38996-39000	that	
177-15	39001-39004	are	
177-16	39005-39010	prone	
177-17	39011-39013	to	
177-18	39014-39020	errors	
177-19	39021-39022	(	
177-20	39022-39027	using	
177-21	39028-39036	external	
177-22	39037-39041	APIs	
177-23	39041-39042	)	
177-24	39043-39049	should	
177-25	39050-39052	be	
177-26	39053-39062	performed	
177-27	39063-39065	in	
177-28	39066-39067	a	
177-29	39068-39075	Sidekiq	
177-30	39076-39082	worker	
177-31	39083-39090	instead	
177-32	39091-39093	of	
177-33	39094-39102	directly	
177-34	39103-39105	in	
177-35	39106-39107	a	
177-36	39108-39111	web	
177-37	39112-39119	request	
177-38	39120-39122	as	
177-39	39123-39127	much	
177-40	39128-39130	as	
177-41	39131-39139	possible	
177-42	39139-39140	.	
177-43	39141-39145	This	
177-44	39146-39149	has	
177-45	39150-39158	numerous	
177-46	39159-39167	benefits	
177-47	39168-39172	such	
177-48	39173-39175	as	
177-49	39175-39176	:	
177-50	39177-39179	An	
177-51	39180-39185	error	
177-52	39186-39191	doesn	
177-53	39191-39192	’	
177-54	39192-39193	t	
177-55	39194-39201	prevent	
177-56	39202-39205	the	
177-57	39206-39213	request	
177-58	39214-39218	from	
177-59	39219-39229	completing	
177-60	39229-39230	.	

#Text=The process being slow doesn’t affect the loading time of a page. In case of a failure you can retry the process (Sidekiq takes care of this automatically). By isolating the code from a web request it should be easier to test and maintain. It’s especially important to use Sidekiq as much as possible when dealing with
178-1	39231-39234	The	
178-2	39235-39242	process	
178-3	39243-39248	being	
178-4	39249-39253	slow	
178-5	39254-39259	doesn	
178-6	39259-39260	’	
178-7	39260-39261	t	
178-8	39262-39268	affect	
178-9	39269-39272	the	
178-10	39273-39280	loading	
178-11	39281-39285	time	
178-12	39286-39288	of	
178-13	39289-39290	a	
178-14	39291-39295	page	
178-15	39295-39296	.	
178-16	39297-39299	In	
178-17	39300-39304	case	
178-18	39305-39307	of	
178-19	39308-39309	a	
178-20	39310-39317	failure	
178-21	39318-39321	you	
178-22	39322-39325	can	
178-23	39326-39331	retry	
178-24	39332-39335	the	
178-25	39336-39343	process	
178-26	39344-39345	(	
178-27	39345-39352	Sidekiq	
178-28	39353-39358	takes	
178-29	39359-39363	care	
178-30	39364-39366	of	
178-31	39367-39371	this	
178-32	39372-39385	automatically	
178-33	39385-39386	)	
178-34	39386-39387	.	
178-35	39388-39390	By	
178-36	39391-39400	isolating	
178-37	39401-39404	the	
178-38	39405-39409	code	
178-39	39410-39414	from	
178-40	39415-39416	a	
178-41	39417-39420	web	
178-42	39421-39428	request	
178-43	39429-39431	it	
178-44	39432-39438	should	
178-45	39439-39441	be	
178-46	39442-39448	easier	
178-47	39449-39451	to	
178-48	39452-39456	test	
178-49	39457-39460	and	
178-50	39461-39469	maintain	
178-51	39469-39470	.	
178-52	39471-39473	It	
178-53	39473-39474	’	
178-54	39474-39475	s	
178-55	39476-39486	especially	
178-56	39487-39496	important	
178-57	39497-39499	to	
178-58	39500-39503	use	
178-59	39504-39511	Sidekiq	
178-60	39512-39514	as	
178-61	39515-39519	much	
178-62	39520-39522	as	
178-63	39523-39531	possible	
178-64	39532-39536	when	
178-65	39537-39544	dealing	
178-66	39545-39549	with	

#Text=Git operations as these operations can take quite some time to complete depending on the performance of the underlying storage system. Git Operations Care should be taken to not run unnecessary Git operations. For example, retrieving the list of branch names using Repository#branch_names can be done
179-1	39550-39553	Git	
179-2	39554-39564	operations	
179-3	39565-39567	as	
179-4	39568-39573	these	
179-5	39574-39584	operations	
179-6	39585-39588	can	
179-7	39589-39593	take	
179-8	39594-39599	quite	
179-9	39600-39604	some	
179-10	39605-39609	time	
179-11	39610-39612	to	
179-12	39613-39621	complete	
179-13	39622-39631	depending	
179-14	39632-39634	on	
179-15	39635-39638	the	
179-16	39639-39650	performance	
179-17	39651-39653	of	
179-18	39654-39657	the	
179-19	39658-39668	underlying	
179-20	39669-39676	storage	
179-21	39677-39683	system	
179-22	39683-39684	.	
179-23	39685-39688	Git	
179-24	39689-39699	Operations	
179-25	39700-39704	Care	
179-26	39705-39711	should	
179-27	39712-39714	be	
179-28	39715-39720	taken	
179-29	39721-39723	to	
179-30	39724-39727	not	
179-31	39728-39731	run	
179-32	39732-39743	unnecessary	
179-33	39744-39747	Git	
179-34	39748-39758	operations	
179-35	39758-39759	.	
179-36	39760-39763	For	
179-37	39764-39771	example	
179-38	39771-39772	,	
179-39	39773-39783	retrieving	
179-40	39784-39787	the	
179-41	39788-39792	list	
179-42	39793-39795	of	
179-43	39796-39802	branch	
179-44	39803-39808	names	
179-45	39809-39814	using	
179-46	39815-39825	Repository	
179-47	39825-39826	#	
179-48	39826-39838	branch_names	
179-49	39839-39842	can	
179-50	39843-39845	be	
179-51	39846-39850	done	

#Text=without an explicit check if a repository exists or not. In other words, instead of this: if repository.exists? repository.branch_names.each do |name| ... end end You can just write: repository.branch_names.each do |name| ...
180-1	39851-39858	without	
180-2	39859-39861	an	
180-3	39862-39870	explicit	
180-4	39871-39876	check	
180-5	39877-39879	if	
180-6	39880-39881	a	
180-7	39882-39892	repository	
180-8	39893-39899	exists	
180-9	39900-39902	or	
180-10	39903-39906	not	
180-11	39906-39907	.	
180-12	39908-39910	In	
180-13	39911-39916	other	
180-14	39917-39922	words	
180-15	39922-39923	,	
180-16	39924-39931	instead	
180-17	39932-39934	of	
180-18	39935-39939	this	
180-19	39939-39940	:	
180-20	39941-39943	if	
180-21	39944-39961	repository.exists	
180-22	39961-39962	?	
180-23	39963-39991	repository.branch_names.each	
180-24	39992-39994	do	
180-25	39995-39996	|	
180-26	39996-40000	name	
180-27	40000-40001	|	
180-28	40002-40003	.	
180-29	40003-40004	.	
180-30	40004-40005	.	
180-31	40006-40009	end	
180-32	40010-40013	end	
180-33	40014-40017	You	
180-34	40018-40021	can	
180-35	40022-40026	just	
180-36	40027-40032	write	
180-37	40032-40033	:	
180-38	40034-40062	repository.branch_names.each	
180-39	40063-40065	do	
180-40	40066-40067	|	
180-41	40067-40071	name	
180-42	40071-40072	|	
180-43	40073-40074	.	
180-44	40074-40075	.	
180-45	40075-40076	.	

#Text=end Caching Operations that often return the same result should be cached using Redis, in particular Git operations. When caching data in Redis, make sure the cache is flushed whenever needed. For example, a cache for the list of tags should be
181-1	40077-40080	end	
181-2	40081-40088	Caching	
181-3	40089-40099	Operations	
181-4	40100-40104	that	
181-5	40105-40110	often	
181-6	40111-40117	return	
181-7	40118-40121	the	
181-8	40122-40126	same	
181-9	40127-40133	result	
181-10	40134-40140	should	
181-11	40141-40143	be	
181-12	40144-40150	cached	
181-13	40151-40156	using	
181-14	40157-40162	Redis	
181-15	40162-40163	,	
181-16	40164-40166	in	
181-17	40167-40177	particular	
181-18	40178-40181	Git	
181-19	40182-40192	operations	
181-20	40192-40193	.	
181-21	40194-40198	When	
181-22	40199-40206	caching	
181-23	40207-40211	data	
181-24	40212-40214	in	
181-25	40215-40220	Redis	
181-26	40220-40221	,	
181-27	40222-40226	make	
181-28	40227-40231	sure	
181-29	40232-40235	the	
181-30	40236-40241	cache	
181-31	40242-40244	is	
181-32	40245-40252	flushed	
181-33	40253-40261	whenever	
181-34	40262-40268	needed	
181-35	40268-40269	.	
181-36	40270-40273	For	
181-37	40274-40281	example	
181-38	40281-40282	,	
181-39	40283-40284	a	
181-40	40285-40290	cache	
181-41	40291-40294	for	
181-42	40295-40298	the	
181-43	40299-40303	list	
181-44	40304-40306	of	
181-45	40307-40311	tags	
181-46	40312-40318	should	
181-47	40319-40321	be	

#Text=flushed whenever a new tag is pushed or a tag is removed. When adding cache expiration code for repositories, this code should be placed in one of the before/after hooks residing in the Repository class. For example, if a cache should be flushed after importing a repository this code should be
182-1	40322-40329	flushed	
182-2	40330-40338	whenever	
182-3	40339-40340	a	
182-4	40341-40344	new	
182-5	40345-40348	tag	
182-6	40349-40351	is	
182-7	40352-40358	pushed	
182-8	40359-40361	or	
182-9	40362-40363	a	
182-10	40364-40367	tag	
182-11	40368-40370	is	
182-12	40371-40378	removed	
182-13	40378-40379	.	
182-14	40380-40384	When	
182-15	40385-40391	adding	
182-16	40392-40397	cache	
182-17	40398-40408	expiration	
182-18	40409-40413	code	
182-19	40414-40417	for	
182-20	40418-40430	repositories	
182-21	40430-40431	,	
182-22	40432-40436	this	
182-23	40437-40441	code	
182-24	40442-40448	should	
182-25	40449-40451	be	
182-26	40452-40458	placed	
182-27	40459-40461	in	
182-28	40462-40465	one	
182-29	40466-40468	of	
182-30	40469-40472	the	
182-31	40473-40479	before	
182-32	40479-40480	/	
182-33	40480-40485	after	
182-34	40486-40491	hooks	
182-35	40492-40500	residing	
182-36	40501-40503	in	
182-37	40504-40507	the	
182-38	40508-40518	Repository	
182-39	40519-40524	class	
182-40	40524-40525	.	
182-41	40526-40529	For	
182-42	40530-40537	example	
182-43	40537-40538	,	
182-44	40539-40541	if	
182-45	40542-40543	a	
182-46	40544-40549	cache	
182-47	40550-40556	should	
182-48	40557-40559	be	
182-49	40560-40567	flushed	
182-50	40568-40573	after	
182-51	40574-40583	importing	
182-52	40584-40585	a	
182-53	40586-40596	repository	
182-54	40597-40601	this	
182-55	40602-40606	code	
182-56	40607-40613	should	
182-57	40614-40616	be	

#Text=added to Repository#after_import. This ensures the cache logic stays within the Repository class instead of leaking into other classes. When caching data, make sure to also memoize the result in an instance variable. While retrieving data from Redis is much faster than raw Git operations, it still
183-1	40617-40622	added	
183-2	40623-40625	to	
183-3	40626-40636	Repository	
183-4	40636-40637	#	
183-5	40637-40649	after_import	
183-6	40649-40650	.	
183-7	40651-40655	This	
183-8	40656-40663	ensures	
183-9	40664-40667	the	
183-10	40668-40673	cache	
183-11	40674-40679	logic	
183-12	40680-40685	stays	
183-13	40686-40692	within	
183-14	40693-40696	the	
183-15	40697-40707	Repository	
183-16	40708-40713	class	
183-17	40714-40721	instead	
183-18	40722-40724	of	
183-19	40725-40732	leaking	
183-20	40733-40737	into	
183-21	40738-40743	other	
183-22	40744-40751	classes	
183-23	40751-40752	.	
183-24	40753-40757	When	
183-25	40758-40765	caching	
183-26	40766-40770	data	
183-27	40770-40771	,	
183-28	40772-40776	make	
183-29	40777-40781	sure	
183-30	40782-40784	to	
183-31	40785-40789	also	
183-32	40790-40797	memoize	
183-33	40798-40801	the	
183-34	40802-40808	result	
183-35	40809-40811	in	
183-36	40812-40814	an	
183-37	40815-40823	instance	
183-38	40824-40832	variable	
183-39	40832-40833	.	
183-40	40834-40839	While	
183-41	40840-40850	retrieving	
183-42	40851-40855	data	
183-43	40856-40860	from	
183-44	40861-40866	Redis	
183-45	40867-40869	is	
183-46	40870-40874	much	
183-47	40875-40881	faster	
183-48	40882-40886	than	
183-49	40887-40890	raw	
183-50	40891-40894	Git	
183-51	40895-40905	operations	
183-52	40905-40906	,	
183-53	40907-40909	it	
183-54	40910-40915	still	

#Text=has overhead. By caching the result in an instance variable, repeated calls to the same method don’t retrieve data from Redis upon every call. When memoizing cached data in an instance variable, make sure to also reset the instance variable when flushing the cache. An example: def first_branch
184-1	40916-40919	has	
184-2	40920-40928	overhead	
184-3	40928-40929	.	
184-4	40930-40932	By	
184-5	40933-40940	caching	
184-6	40941-40944	the	
184-7	40945-40951	result	
184-8	40952-40954	in	
184-9	40955-40957	an	
184-10	40958-40966	instance	
184-11	40967-40975	variable	
184-12	40975-40976	,	
184-13	40977-40985	repeated	
184-14	40986-40991	calls	
184-15	40992-40994	to	
184-16	40995-40998	the	
184-17	40999-41003	same	
184-18	41004-41010	method	
184-19	41011-41014	don	
184-20	41014-41015	’	
184-21	41015-41016	t	
184-22	41017-41025	retrieve	
184-23	41026-41030	data	
184-24	41031-41035	from	
184-25	41036-41041	Redis	
184-26	41042-41046	upon	
184-27	41047-41052	every	
184-28	41053-41057	call	
184-29	41057-41058	.	
184-30	41059-41063	When	
184-31	41064-41073	memoizing	
184-32	41074-41080	cached	
184-33	41081-41085	data	
184-34	41086-41088	in	
184-35	41089-41091	an	
184-36	41092-41100	instance	
184-37	41101-41109	variable	
184-38	41109-41110	,	
184-39	41111-41115	make	
184-40	41116-41120	sure	
184-41	41121-41123	to	
184-42	41124-41128	also	
184-43	41129-41134	reset	
184-44	41135-41138	the	
184-45	41139-41147	instance	
184-46	41148-41156	variable	
184-47	41157-41161	when	
184-48	41162-41170	flushing	
184-49	41171-41174	the	
184-50	41175-41180	cache	
184-51	41180-41181	.	
184-52	41182-41184	An	
184-53	41185-41192	example	
184-54	41192-41193	:	
184-55	41194-41197	def	
184-56	41198-41210	first_branch	

#Text=@first_branch ||= cache.fetch(:first_branch) { branches.first } end def expire_first_branch_cache cache.expire(:first_branch) @first_branch = nil end String Freezing In recent Ruby versions calling freeze on a String leads to it being allocated
185-1	41211-41212	@	
185-2	41212-41224	first_branch	
185-3	41225-41226	|	
185-4	41226-41227	|	
185-5	41227-41228	=	
185-6	41229-41240	cache.fetch	
185-7	41240-41241	(	
185-8	41241-41242	:	
185-9	41242-41254	first_branch	
185-10	41254-41255	)	
185-11	41256-41257	{	
185-12	41258-41272	branches.first	
185-13	41273-41274	}	
185-14	41275-41278	end	
185-15	41279-41282	def	
185-16	41283-41308	expire_first_branch_cache	
185-17	41309-41321	cache.expire	
185-18	41321-41322	(	
185-19	41322-41323	:	
185-20	41323-41335	first_branch	
185-21	41335-41336	)	
185-22	41337-41338	@	
185-23	41338-41350	first_branch	
185-24	41351-41352	=	
185-25	41353-41356	nil	
185-26	41357-41360	end	
185-27	41361-41367	String	
185-28	41368-41376	Freezing	
185-29	41377-41379	In	
185-30	41380-41386	recent	
185-31	41387-41391	Ruby	
185-32	41392-41400	versions	
185-33	41401-41408	calling	
185-34	41409-41415	freeze	
185-35	41416-41418	on	
185-36	41419-41420	a	
185-37	41421-41427	String	
185-38	41428-41433	leads	
185-39	41434-41436	to	
185-40	41437-41439	it	
185-41	41440-41445	being	
185-42	41446-41455	allocated	

#Text=only once and re-used. For example, on Ruby 2.3 or later this only allocates the “foo” String once: 10.times do 'foo'.freeze end Depending on the size of the String and how frequently it would be allocated (before the .freeze call was added), this may make things faster, but
186-1	41456-41460	only	
186-2	41461-41465	once	
186-3	41466-41469	and	
186-4	41470-41477	re-used	
186-5	41477-41478	.	
186-6	41479-41482	For	
186-7	41483-41490	example	
186-8	41490-41491	,	
186-9	41492-41494	on	
186-10	41495-41499	Ruby	
186-11	41500-41503	2.3	
186-12	41504-41506	or	
186-13	41507-41512	later	
186-14	41513-41517	this	
186-15	41518-41522	only	
186-16	41523-41532	allocates	
186-17	41533-41536	the	
186-18	41537-41538	“	
186-19	41538-41541	foo	
186-20	41541-41542	”	
186-21	41543-41549	String	
186-22	41550-41554	once	
186-23	41554-41555	:	
186-24	41556-41558	10	
186-25	41558-41559	.	
186-26	41559-41564	times	
186-27	41565-41567	do	
186-28	41568-41569	'	
186-29	41569-41572	foo	
186-30	41572-41573	'	
186-31	41573-41574	.	
186-32	41574-41580	freeze	
186-33	41581-41584	end	
186-34	41585-41594	Depending	
186-35	41595-41597	on	
186-36	41598-41601	the	
186-37	41602-41606	size	
186-38	41607-41609	of	
186-39	41610-41613	the	
186-40	41614-41620	String	
186-41	41621-41624	and	
186-42	41625-41628	how	
186-43	41629-41639	frequently	
186-44	41640-41642	it	
186-45	41643-41648	would	
186-46	41649-41651	be	
186-47	41652-41661	allocated	
186-48	41662-41663	(	
186-49	41663-41669	before	
186-50	41670-41673	the	
186-51	41674-41675	.	
186-52	41675-41681	freeze	
186-53	41682-41686	call	
186-54	41687-41690	was	
186-55	41691-41696	added	
186-56	41696-41697	)	
186-57	41697-41698	,	
186-58	41699-41703	this	
186-59	41704-41707	may	
186-60	41708-41712	make	
186-61	41713-41719	things	
186-62	41720-41726	faster	
186-63	41726-41727	,	
186-64	41728-41731	but	

#Text=this isn’t guaranteed. Strings are frozen by default in Ruby 3.0. To prepare our codebase for this eventuality, we are adding the following header to all Ruby files: # frozen_string_literal: true This may cause test failures in the code that expects to be able to manipulate
187-1	41732-41736	this	
187-2	41737-41740	isn	
187-3	41740-41741	’	
187-4	41741-41742	t	
187-5	41743-41753	guaranteed	
187-6	41753-41754	.	
187-7	41755-41762	Strings	
187-8	41763-41766	are	
187-9	41767-41773	frozen	
187-10	41774-41776	by	
187-11	41777-41784	default	
187-12	41785-41787	in	
187-13	41788-41792	Ruby	
187-14	41793-41796	3.0	
187-15	41796-41797	.	
187-16	41798-41800	To	
187-17	41801-41808	prepare	
187-18	41809-41812	our	
187-19	41813-41821	codebase	
187-20	41822-41825	for	
187-21	41826-41830	this	
187-22	41831-41842	eventuality	
187-23	41842-41843	,	
187-24	41844-41846	we	
187-25	41847-41850	are	
187-26	41851-41857	adding	
187-27	41858-41861	the	
187-28	41862-41871	following	
187-29	41872-41878	header	
187-30	41879-41881	to	
187-31	41882-41885	all	
187-32	41886-41890	Ruby	
187-33	41891-41896	files	
187-34	41896-41897	:	
187-35	41898-41899	#	
187-36	41900-41921	frozen_string_literal	
187-37	41921-41922	:	
187-38	41923-41927	true	
187-39	41928-41932	This	
187-40	41933-41936	may	
187-41	41937-41942	cause	
187-42	41943-41947	test	
187-43	41948-41956	failures	
187-44	41957-41959	in	
187-45	41960-41963	the	
187-46	41964-41968	code	
187-47	41969-41973	that	
187-48	41974-41981	expects	
187-49	41982-41984	to	
187-50	41985-41987	be	
187-51	41988-41992	able	
187-52	41993-41995	to	
187-53	41996-42006	manipulate	

#Text=strings. Instead of using dup, use the unary plus to get an unfrozen string: test = +"hello" test += " world" When adding new Ruby files, please check that you can add the above header, as omitting it may lead to style check failures. Banzai pipelines and filters When writing or updating Banzai filters and pipelines,
188-1	42007-42014	strings	
188-2	42014-42015	.	
188-3	42016-42023	Instead	
188-4	42024-42026	of	
188-5	42027-42032	using	
188-6	42033-42036	dup	
188-7	42036-42037	,	
188-8	42038-42041	use	
188-9	42042-42045	the	
188-10	42046-42051	unary	
188-11	42052-42056	plus	
188-12	42057-42059	to	
188-13	42060-42063	get	
188-14	42064-42066	an	
188-15	42067-42075	unfrozen	
188-16	42076-42082	string	
188-17	42082-42083	:	
188-18	42084-42088	test	
188-19	42089-42090	=	
188-20	42091-42092	+	
188-21	42092-42093	"	
188-22	42093-42098	hello	
188-23	42098-42099	"	
188-24	42100-42104	test	
188-25	42105-42106	+	
188-26	42106-42107	=	
188-27	42108-42109	"	
188-28	42110-42115	world	
188-29	42115-42116	"	
188-30	42117-42121	When	
188-31	42122-42128	adding	
188-32	42129-42132	new	
188-33	42133-42137	Ruby	
188-34	42138-42143	files	
188-35	42143-42144	,	
188-36	42145-42151	please	
188-37	42152-42157	check	
188-38	42158-42162	that	
188-39	42163-42166	you	
188-40	42167-42170	can	
188-41	42171-42174	add	
188-42	42175-42178	the	
188-43	42179-42184	above	
188-44	42185-42191	header	
188-45	42191-42192	,	
188-46	42193-42195	as	
188-47	42196-42204	omitting	
188-48	42205-42207	it	
188-49	42208-42211	may	
188-50	42212-42216	lead	
188-51	42217-42219	to	
188-52	42220-42225	style	
188-53	42226-42231	check	
188-54	42232-42240	failures	
188-55	42240-42241	.	
188-56	42242-42248	Banzai	
188-57	42249-42258	pipelines	
188-58	42259-42262	and	
188-59	42263-42270	filters	
188-60	42271-42275	When	
188-61	42276-42283	writing	
188-62	42284-42286	or	
188-63	42287-42295	updating	
188-64	42296-42302	Banzai	
188-65	42303-42310	filters	
188-66	42311-42314	and	
188-67	42315-42324	pipelines	
188-68	42324-42325	,	

#Text=it can be difficult to understand what the performance of the filter is, and what effect it might have on the overall pipeline performance. To perform benchmarks run: bin/rake benchmark:banzai This command generates output like this: --> Benchmarking Full, Wiki, and Plain pipelines
189-1	42326-42328	it	
189-2	42329-42332	can	
189-3	42333-42335	be	
189-4	42336-42345	difficult	
189-5	42346-42348	to	
189-6	42349-42359	understand	
189-7	42360-42364	what	
189-8	42365-42368	the	
189-9	42369-42380	performance	
189-10	42381-42383	of	
189-11	42384-42387	the	
189-12	42388-42394	filter	
189-13	42395-42397	is	
189-14	42397-42398	,	
189-15	42399-42402	and	
189-16	42403-42407	what	
189-17	42408-42414	effect	
189-18	42415-42417	it	
189-19	42418-42423	might	
189-20	42424-42428	have	
189-21	42429-42431	on	
189-22	42432-42435	the	
189-23	42436-42443	overall	
189-24	42444-42452	pipeline	
189-25	42453-42464	performance	
189-26	42464-42465	.	
189-27	42466-42468	To	
189-28	42469-42476	perform	
189-29	42477-42487	benchmarks	
189-30	42488-42491	run	
189-31	42491-42492	:	
189-32	42493-42496	bin	
189-33	42496-42497	/	
189-34	42497-42501	rake	
189-35	42502-42511	benchmark	
189-36	42511-42512	:	
189-37	42512-42518	banzai	
189-38	42519-42523	This	
189-39	42524-42531	command	
189-40	42532-42541	generates	
189-41	42542-42548	output	
189-42	42549-42553	like	
189-43	42554-42558	this	
189-44	42558-42559	:	
189-45	42560-42561	-	
189-46	42561-42562	-	
189-47	42562-42563	>	
189-48	42564-42576	Benchmarking	
189-49	42577-42581	Full	
189-50	42581-42582	,	
189-51	42583-42587	Wiki	
189-52	42587-42588	,	
189-53	42589-42592	and	
189-54	42593-42598	Plain	
189-55	42599-42608	pipelines	

#Text=Calculating ------------------------------------- Full pipeline 1.000 i/100ms Wiki pipeline 1.000 i/100ms Plain pipeline 1.000 i/100ms
190-1	42609-42620	Calculating	
190-2	42621-42622	-	
190-3	42622-42623	-	
190-4	42623-42624	-	
190-5	42624-42625	-	
190-6	42625-42626	-	
190-7	42626-42627	-	
190-8	42627-42628	-	
190-9	42628-42629	-	
190-10	42629-42630	-	
190-11	42630-42631	-	
190-12	42631-42632	-	
190-13	42632-42633	-	
190-14	42633-42634	-	
190-15	42634-42635	-	
190-16	42635-42636	-	
190-17	42636-42637	-	
190-18	42637-42638	-	
190-19	42638-42639	-	
190-20	42639-42640	-	
190-21	42640-42641	-	
190-22	42641-42642	-	
190-23	42642-42643	-	
190-24	42643-42644	-	
190-25	42644-42645	-	
190-26	42645-42646	-	
190-27	42646-42647	-	
190-28	42647-42648	-	
190-29	42648-42649	-	
190-30	42649-42650	-	
190-31	42650-42651	-	
190-32	42651-42652	-	
190-33	42652-42653	-	
190-34	42653-42654	-	
190-35	42654-42655	-	
190-36	42655-42656	-	
190-37	42656-42657	-	
190-38	42657-42658	-	
190-39	42659-42663	Full	
190-40	42664-42672	pipeline	
190-41	42673-42678	1.000	
190-42	42679-42680	i	
190-43	42680-42681	/	
190-44	42681-42686	100ms	
190-45	42687-42691	Wiki	
190-46	42692-42700	pipeline	
190-47	42701-42706	1.000	
190-48	42707-42708	i	
190-49	42708-42709	/	
190-50	42709-42714	100ms	
190-51	42715-42720	Plain	
190-52	42721-42729	pipeline	
190-53	42730-42735	1.000	
190-54	42736-42737	i	
190-55	42737-42738	/	
190-56	42738-42743	100ms	

#Text=------------------------------------------------- Full pipeline 3.357 (±29.8%) i/s - 31.000 Wiki pipeline 2.893 (±34.6%) i/s - 25.000 10.677014s
191-1	42744-42745	-	
191-2	42745-42746	-	
191-3	42746-42747	-	
191-4	42747-42748	-	
191-5	42748-42749	-	
191-6	42749-42750	-	
191-7	42750-42751	-	
191-8	42751-42752	-	
191-9	42752-42753	-	
191-10	42753-42754	-	
191-11	42754-42755	-	
191-12	42755-42756	-	
191-13	42756-42757	-	
191-14	42757-42758	-	
191-15	42758-42759	-	
191-16	42759-42760	-	
191-17	42760-42761	-	
191-18	42761-42762	-	
191-19	42762-42763	-	
191-20	42763-42764	-	
191-21	42764-42765	-	
191-22	42765-42766	-	
191-23	42766-42767	-	
191-24	42767-42768	-	
191-25	42768-42769	-	
191-26	42769-42770	-	
191-27	42770-42771	-	
191-28	42771-42772	-	
191-29	42772-42773	-	
191-30	42773-42774	-	
191-31	42774-42775	-	
191-32	42775-42776	-	
191-33	42776-42777	-	
191-34	42777-42778	-	
191-35	42778-42779	-	
191-36	42779-42780	-	
191-37	42780-42781	-	
191-38	42781-42782	-	
191-39	42782-42783	-	
191-40	42783-42784	-	
191-41	42784-42785	-	
191-42	42785-42786	-	
191-43	42786-42787	-	
191-44	42787-42788	-	
191-45	42788-42789	-	
191-46	42789-42790	-	
191-47	42790-42791	-	
191-48	42791-42792	-	
191-49	42792-42793	-	
191-50	42794-42798	Full	
191-51	42799-42807	pipeline	
191-52	42808-42813	3.357	
191-53	42814-42815	(	
191-54	42815-42816	±	
191-55	42816-42821	29.8%	
191-56	42821-42822	)	
191-57	42823-42824	i	
191-58	42824-42825	/	
191-59	42825-42826	s	
191-60	42827-42828	-	
191-61	42829-42835	31.000	
191-62	42836-42840	Wiki	
191-63	42841-42849	pipeline	
191-64	42850-42855	2.893	
191-65	42856-42857	(	
191-66	42857-42858	±	
191-67	42858-42863	34.6%	
191-68	42863-42864	)	
191-69	42865-42866	i	
191-70	42866-42867	/	
191-71	42867-42868	s	
191-72	42869-42870	-	
191-73	42871-42877	25.000	
191-74	42878-42888	10.677014s	

#Text=Plain pipeline 15.447 (±32.4%) i/s - 119.000 Comparison: Plain pipeline: 15.4 i/s Full pipeline: 3.4 i/s - 4.60x slower
192-1	42889-42894	Plain	
192-2	42895-42903	pipeline	
192-3	42904-42910	15.447	
192-4	42911-42912	(	
192-5	42912-42913	±	
192-6	42913-42918	32.4%	
192-7	42918-42919	)	
192-8	42920-42921	i	
192-9	42921-42922	/	
192-10	42922-42923	s	
192-11	42924-42925	-	
192-12	42926-42933	119.000	
192-13	42934-42944	Comparison	
192-14	42944-42945	:	
192-15	42946-42951	Plain	
192-16	42952-42960	pipeline	
192-17	42960-42961	:	
192-18	42962-42966	15.4	
192-19	42967-42968	i	
192-20	42968-42969	/	
192-21	42969-42970	s	
192-22	42971-42975	Full	
192-23	42976-42984	pipeline	
192-24	42984-42985	:	
192-25	42986-42989	3.4	
192-26	42990-42991	i	
192-27	42991-42992	/	
192-28	42992-42993	s	
192-29	42994-42995	-	
192-30	42996-43001	4.60x	
192-31	43002-43008	slower	

#Text=Wiki pipeline: 2.9 i/s - 5.34x slower --> Benchmarking FullPipeline filters Calculating -------------------------------------
193-1	43009-43013	Wiki	
193-2	43014-43022	pipeline	
193-3	43022-43023	:	
193-4	43024-43027	2.9	
193-5	43028-43029	i	
193-6	43029-43030	/	
193-7	43030-43031	s	
193-8	43032-43033	-	
193-9	43034-43039	5.34x	
193-10	43040-43046	slower	
193-11	43047-43048	-	
193-12	43048-43049	-	
193-13	43049-43050	>	
193-14	43051-43063	Benchmarking	
193-15	43064-43076	FullPipeline	
193-16	43077-43084	filters	
193-17	43085-43096	Calculating	
193-18	43097-43098	-	
193-19	43098-43099	-	
193-20	43099-43100	-	
193-21	43100-43101	-	
193-22	43101-43102	-	
193-23	43102-43103	-	
193-24	43103-43104	-	
193-25	43104-43105	-	
193-26	43105-43106	-	
193-27	43106-43107	-	
193-28	43107-43108	-	
193-29	43108-43109	-	
193-30	43109-43110	-	
193-31	43110-43111	-	
193-32	43111-43112	-	
193-33	43112-43113	-	
193-34	43113-43114	-	
193-35	43114-43115	-	
193-36	43115-43116	-	
193-37	43116-43117	-	
193-38	43117-43118	-	
193-39	43118-43119	-	
193-40	43119-43120	-	
193-41	43120-43121	-	
193-42	43121-43122	-	
193-43	43122-43123	-	
193-44	43123-43124	-	
193-45	43124-43125	-	
193-46	43125-43126	-	
193-47	43126-43127	-	
193-48	43127-43128	-	
193-49	43128-43129	-	
193-50	43129-43130	-	
193-51	43130-43131	-	
193-52	43131-43132	-	
193-53	43132-43133	-	
193-54	43133-43134	-	

#Text=Markdown 24.000 i/100ms Plantuml 8.000 i/100ms SpacedLink 22.000 i/100ms ... TaskList 49.000 i/100ms
194-1	43135-43143	Markdown	
194-2	43144-43150	24.000	
194-3	43151-43152	i	
194-4	43152-43153	/	
194-5	43153-43158	100ms	
194-6	43159-43167	Plantuml	
194-7	43168-43173	8.000	
194-8	43174-43175	i	
194-9	43175-43176	/	
194-10	43176-43181	100ms	
194-11	43182-43192	SpacedLink	
194-12	43193-43199	22.000	
194-13	43200-43201	i	
194-14	43201-43202	/	
194-15	43202-43207	100ms	
194-16	43208-43209	.	
194-17	43209-43210	.	
194-18	43210-43211	.	
194-19	43212-43220	TaskList	
194-20	43221-43227	49.000	
194-21	43228-43229	i	
194-22	43229-43230	/	
194-23	43230-43235	100ms	

#Text=InlineDiff 9.000 i/100ms SetDirection 369.000 i/100ms -------------------------------------------------
195-1	43236-43246	InlineDiff	
195-2	43247-43252	9.000	
195-3	43253-43254	i	
195-4	43254-43255	/	
195-5	43255-43260	100ms	
195-6	43261-43273	SetDirection	
195-7	43274-43281	369.000	
195-8	43282-43283	i	
195-9	43283-43284	/	
195-10	43284-43289	100ms	
195-11	43290-43291	-	
195-12	43291-43292	-	
195-13	43292-43293	-	
195-14	43293-43294	-	
195-15	43294-43295	-	
195-16	43295-43296	-	
195-17	43296-43297	-	
195-18	43297-43298	-	
195-19	43298-43299	-	
195-20	43299-43300	-	
195-21	43300-43301	-	
195-22	43301-43302	-	
195-23	43302-43303	-	
195-24	43303-43304	-	
195-25	43304-43305	-	
195-26	43305-43306	-	
195-27	43306-43307	-	
195-28	43307-43308	-	
195-29	43308-43309	-	
195-30	43309-43310	-	
195-31	43310-43311	-	
195-32	43311-43312	-	
195-33	43312-43313	-	
195-34	43313-43314	-	
195-35	43314-43315	-	
195-36	43315-43316	-	
195-37	43316-43317	-	
195-38	43317-43318	-	
195-39	43318-43319	-	
195-40	43319-43320	-	
195-41	43320-43321	-	
195-42	43321-43322	-	
195-43	43322-43323	-	
195-44	43323-43324	-	
195-45	43324-43325	-	
195-46	43325-43326	-	
195-47	43326-43327	-	
195-48	43327-43328	-	
195-49	43328-43329	-	
195-50	43329-43330	-	
195-51	43330-43331	-	
195-52	43331-43332	-	
195-53	43332-43333	-	
195-54	43333-43334	-	
195-55	43334-43335	-	
195-56	43335-43336	-	
195-57	43336-43337	-	
195-58	43337-43338	-	
195-59	43338-43339	-	

#Text=Markdown 237.796 (±16.4%) i/s - 2.304k Plantuml 80.415 (±36.1%) i/s - 520.000 SpacedLink 168.188
196-1	43340-43348	Markdown	
196-2	43349-43356	237.796	
196-3	43357-43358	(	
196-4	43358-43359	±	
196-5	43359-43364	16.4%	
196-6	43364-43365	)	
196-7	43366-43367	i	
196-8	43367-43368	/	
196-9	43368-43369	s	
196-10	43370-43371	-	
196-11	43372-43378	2.304k	
196-12	43379-43387	Plantuml	
196-13	43388-43394	80.415	
196-14	43395-43396	(	
196-15	43396-43397	±	
196-16	43397-43402	36.1%	
196-17	43402-43403	)	
196-18	43404-43405	i	
196-19	43405-43406	/	
196-20	43406-43407	s	
196-21	43408-43409	-	
196-22	43410-43417	520.000	
196-23	43418-43428	SpacedLink	
196-24	43429-43436	168.188	

#Text=(±10.1%) i/s - 1.672k ... TaskList 101.145 (± 6.9%) i/s - 1.029k InlineDiff 52.925 (±15.1%) i/s -
197-1	43437-43438	(	
197-2	43438-43439	±	
197-3	43439-43444	10.1%	
197-4	43444-43445	)	
197-5	43446-43447	i	
197-6	43447-43448	/	
197-7	43448-43449	s	
197-8	43450-43451	-	
197-9	43452-43458	1.672k	
197-10	43459-43460	.	
197-11	43460-43461	.	
197-12	43461-43462	.	
197-13	43463-43471	TaskList	
197-14	43472-43479	101.145	
197-15	43480-43481	(	
197-16	43481-43482	±	
197-17	43483-43487	6.9%	
197-18	43487-43488	)	
197-19	43489-43490	i	
197-20	43490-43491	/	
197-21	43491-43492	s	
197-22	43493-43494	-	
197-23	43495-43501	1.029k	
197-24	43502-43512	InlineDiff	
197-25	43513-43519	52.925	
197-26	43520-43521	(	
197-27	43521-43522	±	
197-28	43522-43527	15.1%	
197-29	43527-43528	)	
197-30	43529-43530	i	
197-31	43530-43531	/	
197-32	43531-43532	s	
197-33	43533-43534	-	

#Text=522.000 SetDirection 3.728k (±17.2%) i/s - 34.317k in 10.617882s Comparison: Suggestion: 739616.9 i/s
198-1	43535-43542	522.000	
198-2	43543-43555	SetDirection	
198-3	43556-43562	3.728k	
198-4	43563-43564	(	
198-5	43564-43565	±	
198-6	43565-43570	17.2%	
198-7	43570-43571	)	
198-8	43572-43573	i	
198-9	43573-43574	/	
198-10	43574-43575	s	
198-11	43576-43577	-	
198-12	43578-43585	34.317k	
198-13	43586-43588	in	
198-14	43589-43599	10.617882s	
198-15	43600-43610	Comparison	
198-16	43610-43611	:	
198-17	43612-43622	Suggestion	
198-18	43622-43623	:	
198-19	43624-43632	739616.9	
198-20	43633-43634	i	
198-21	43634-43635	/	
198-22	43635-43636	s	

#Text=Kroki: 306449.0 i/s - 2.41x slower InlineGrafanaMetrics: 156535.6 i/s - 4.72x slower SetDirection: 3728.3 i/s - 198.38x slower
199-1	43637-43642	Kroki	
199-2	43642-43643	:	
199-3	43644-43652	306449.0	
199-4	43653-43654	i	
199-5	43654-43655	/	
199-6	43655-43656	s	
199-7	43657-43658	-	
199-8	43659-43664	2.41x	
199-9	43665-43671	slower	
199-10	43672-43692	InlineGrafanaMetrics	
199-11	43692-43693	:	
199-12	43694-43702	156535.6	
199-13	43703-43704	i	
199-14	43704-43705	/	
199-15	43705-43706	s	
199-16	43707-43708	-	
199-17	43709-43714	4.72x	
199-18	43715-43721	slower	
199-19	43722-43734	SetDirection	
199-20	43734-43735	:	
199-21	43736-43742	3728.3	
199-22	43743-43744	i	
199-23	43744-43745	/	
199-24	43745-43746	s	
199-25	43747-43748	-	
199-26	43749-43756	198.38x	
199-27	43757-43763	slower	

#Text=... UserReference: 2.1 i/s - 360365.80x slower ExternalLink: 1.6 i/s - 470400.67x slower ProjectReference: 0.7 i/s - 1128756.09x slower
200-1	43764-43765	.	
200-2	43765-43766	.	
200-3	43766-43767	.	
200-4	43768-43781	UserReference	
200-5	43781-43782	:	
200-6	43783-43786	2.1	
200-7	43787-43788	i	
200-8	43788-43789	/	
200-9	43789-43790	s	
200-10	43791-43792	-	
200-11	43793-43803	360365.80x	
200-12	43804-43810	slower	
200-13	43811-43823	ExternalLink	
200-14	43823-43824	:	
200-15	43825-43828	1.6	
200-16	43829-43830	i	
200-17	43830-43831	/	
200-18	43831-43832	s	
200-19	43833-43834	-	
200-20	43835-43845	470400.67x	
200-21	43846-43852	slower	
200-22	43853-43869	ProjectReference	
200-23	43869-43870	:	
200-24	43871-43874	0.7	
200-25	43875-43876	i	
200-26	43876-43877	/	
200-27	43877-43878	s	
200-28	43879-43880	-	
200-29	43881-43892	1128756.09x	
200-30	43893-43899	slower	

#Text=--> Benchmarking PlainMarkdownPipeline filters Calculating ------------------------------------- Markdown 19.000 i/100ms
201-1	43900-43901	-	
201-2	43901-43902	-	
201-3	43902-43903	>	
201-4	43904-43916	Benchmarking	
201-5	43917-43938	PlainMarkdownPipeline	
201-6	43939-43946	filters	
201-7	43947-43958	Calculating	
201-8	43959-43960	-	
201-9	43960-43961	-	
201-10	43961-43962	-	
201-11	43962-43963	-	
201-12	43963-43964	-	
201-13	43964-43965	-	
201-14	43965-43966	-	
201-15	43966-43967	-	
201-16	43967-43968	-	
201-17	43968-43969	-	
201-18	43969-43970	-	
201-19	43970-43971	-	
201-20	43971-43972	-	
201-21	43972-43973	-	
201-22	43973-43974	-	
201-23	43974-43975	-	
201-24	43975-43976	-	
201-25	43976-43977	-	
201-26	43977-43978	-	
201-27	43978-43979	-	
201-28	43979-43980	-	
201-29	43980-43981	-	
201-30	43981-43982	-	
201-31	43982-43983	-	
201-32	43983-43984	-	
201-33	43984-43985	-	
201-34	43985-43986	-	
201-35	43986-43987	-	
201-36	43987-43988	-	
201-37	43988-43989	-	
201-38	43989-43990	-	
201-39	43990-43991	-	
201-40	43991-43992	-	
201-41	43992-43993	-	
201-42	43993-43994	-	
201-43	43994-43995	-	
201-44	43995-43996	-	
201-45	43997-44005	Markdown	
201-46	44006-44012	19.000	
201-47	44013-44014	i	
201-48	44014-44015	/	
201-49	44015-44020	100ms	

#Text=------------------------------------------------- Markdown 241.476 (±15.3%) i/s - 2.356k This can give you an idea how various filters perform, and which ones might be performing the slowest.
202-1	44021-44022	-	
202-2	44022-44023	-	
202-3	44023-44024	-	
202-4	44024-44025	-	
202-5	44025-44026	-	
202-6	44026-44027	-	
202-7	44027-44028	-	
202-8	44028-44029	-	
202-9	44029-44030	-	
202-10	44030-44031	-	
202-11	44031-44032	-	
202-12	44032-44033	-	
202-13	44033-44034	-	
202-14	44034-44035	-	
202-15	44035-44036	-	
202-16	44036-44037	-	
202-17	44037-44038	-	
202-18	44038-44039	-	
202-19	44039-44040	-	
202-20	44040-44041	-	
202-21	44041-44042	-	
202-22	44042-44043	-	
202-23	44043-44044	-	
202-24	44044-44045	-	
202-25	44045-44046	-	
202-26	44046-44047	-	
202-27	44047-44048	-	
202-28	44048-44049	-	
202-29	44049-44050	-	
202-30	44050-44051	-	
202-31	44051-44052	-	
202-32	44052-44053	-	
202-33	44053-44054	-	
202-34	44054-44055	-	
202-35	44055-44056	-	
202-36	44056-44057	-	
202-37	44057-44058	-	
202-38	44058-44059	-	
202-39	44059-44060	-	
202-40	44060-44061	-	
202-41	44061-44062	-	
202-42	44062-44063	-	
202-43	44063-44064	-	
202-44	44064-44065	-	
202-45	44065-44066	-	
202-46	44066-44067	-	
202-47	44067-44068	-	
202-48	44068-44069	-	
202-49	44069-44070	-	
202-50	44071-44079	Markdown	
202-51	44080-44087	241.476	
202-52	44088-44089	(	
202-53	44089-44090	±	
202-54	44090-44095	15.3%	
202-55	44095-44096	)	
202-56	44097-44098	i	
202-57	44098-44099	/	
202-58	44099-44100	s	
202-59	44101-44102	-	
202-60	44103-44109	2.356k	
202-61	44110-44114	This	
202-62	44115-44118	can	
202-63	44119-44123	give	
202-64	44124-44127	you	
202-65	44128-44130	an	
202-66	44131-44135	idea	
202-67	44136-44139	how	
202-68	44140-44147	various	
202-69	44148-44155	filters	
202-70	44156-44163	perform	
202-71	44163-44164	,	
202-72	44165-44168	and	
202-73	44169-44174	which	
202-74	44175-44179	ones	
202-75	44180-44185	might	
202-76	44186-44188	be	
202-77	44189-44199	performing	
202-78	44200-44203	the	
202-79	44204-44211	slowest	
202-80	44211-44212	.	

#Text=The test data has a lot to do with how well a filter performs. If there is nothing in the test data that specifically triggers the filter, it might look like it’s running incredibly fast. Make sure that you have relevant test data for your filter in the spec/fixtures/markdown.md.erb file. Reading from files and other data sources
203-1	44213-44216	The	
203-2	44217-44221	test	
203-3	44222-44226	data	
203-4	44227-44230	has	
203-5	44231-44232	a	
203-6	44233-44236	lot	
203-7	44237-44239	to	
203-8	44240-44242	do	
203-9	44243-44247	with	
203-10	44248-44251	how	
203-11	44252-44256	well	
203-12	44257-44258	a	
203-13	44259-44265	filter	
203-14	44266-44274	performs	
203-15	44274-44275	.	
203-16	44276-44278	If	
203-17	44279-44284	there	
203-18	44285-44287	is	
203-19	44288-44295	nothing	
203-20	44296-44298	in	
203-21	44299-44302	the	
203-22	44303-44307	test	
203-23	44308-44312	data	
203-24	44313-44317	that	
203-25	44318-44330	specifically	
203-26	44331-44339	triggers	
203-27	44340-44343	the	
203-28	44344-44350	filter	
203-29	44350-44351	,	
203-30	44352-44354	it	
203-31	44355-44360	might	
203-32	44361-44365	look	
203-33	44366-44370	like	
203-34	44371-44373	it	
203-35	44373-44374	’	
203-36	44374-44375	s	
203-37	44376-44383	running	
203-38	44384-44394	incredibly	
203-39	44395-44399	fast	
203-40	44399-44400	.	
203-41	44401-44405	Make	
203-42	44406-44410	sure	
203-43	44411-44415	that	
203-44	44416-44419	you	
203-45	44420-44424	have	
203-46	44425-44433	relevant	
203-47	44434-44438	test	
203-48	44439-44443	data	
203-49	44444-44447	for	
203-50	44448-44452	your	
203-51	44453-44459	filter	
203-52	44460-44462	in	
203-53	44463-44466	the	
203-54	44467-44471	spec	
203-55	44471-44472	/	
203-56	44472-44480	fixtures	
203-57	44480-44481	/	
203-58	44481-44496	markdown.md.erb	
203-59	44497-44501	file	
203-60	44501-44502	.	
203-61	44503-44510	Reading	
203-62	44511-44515	from	
203-63	44516-44521	files	
203-64	44522-44525	and	
203-65	44526-44531	other	
203-66	44532-44536	data	
203-67	44537-44544	sources	

#Text=Ruby offers several convenience functions that deal with file contents specifically or I/O streams in general. Functions such as IO.read and IO.readlines make it easy to read data into memory, but they can be inefficient when the data grows large. Because these functions read the entire contents of a data
204-1	44545-44549	Ruby	
204-2	44550-44556	offers	
204-3	44557-44564	several	
204-4	44565-44576	convenience	
204-5	44577-44586	functions	
204-6	44587-44591	that	
204-7	44592-44596	deal	
204-8	44597-44601	with	
204-9	44602-44606	file	
204-10	44607-44615	contents	
204-11	44616-44628	specifically	
204-12	44629-44631	or	
204-13	44632-44633	I	
204-14	44633-44634	/	
204-15	44634-44635	O	
204-16	44636-44643	streams	
204-17	44644-44646	in	
204-18	44647-44654	general	
204-19	44654-44655	.	
204-20	44656-44665	Functions	
204-21	44666-44670	such	
204-22	44671-44673	as	
204-23	44674-44681	IO.read	
204-24	44682-44685	and	
204-25	44686-44698	IO.readlines	
204-26	44699-44703	make	
204-27	44704-44706	it	
204-28	44707-44711	easy	
204-29	44712-44714	to	
204-30	44715-44719	read	
204-31	44720-44724	data	
204-32	44725-44729	into	
204-33	44730-44736	memory	
204-34	44736-44737	,	
204-35	44738-44741	but	
204-36	44742-44746	they	
204-37	44747-44750	can	
204-38	44751-44753	be	
204-39	44754-44765	inefficient	
204-40	44766-44770	when	
204-41	44771-44774	the	
204-42	44775-44779	data	
204-43	44780-44785	grows	
204-44	44786-44791	large	
204-45	44791-44792	.	
204-46	44793-44800	Because	
204-47	44801-44806	these	
204-48	44807-44816	functions	
204-49	44817-44821	read	
204-50	44822-44825	the	
204-51	44826-44832	entire	
204-52	44833-44841	contents	
204-53	44842-44844	of	
204-54	44845-44846	a	
204-55	44847-44851	data	

#Text=source into memory, memory use grows by at least the size of the data source. In the case of readlines, it grows even further, due to extra bookkeeping the Ruby VM has to perform to represent each line. Consider the following program, which reads a text file that is 750MB on disk: File.readlines('large_file.txt').each do |line|
205-1	44852-44858	source	
205-2	44859-44863	into	
205-3	44864-44870	memory	
205-4	44870-44871	,	
205-5	44872-44878	memory	
205-6	44879-44882	use	
205-7	44883-44888	grows	
205-8	44889-44891	by	
205-9	44892-44894	at	
205-10	44895-44900	least	
205-11	44901-44904	the	
205-12	44905-44909	size	
205-13	44910-44912	of	
205-14	44913-44916	the	
205-15	44917-44921	data	
205-16	44922-44928	source	
205-17	44928-44929	.	
205-18	44930-44932	In	
205-19	44933-44936	the	
205-20	44937-44941	case	
205-21	44942-44944	of	
205-22	44945-44954	readlines	
205-23	44954-44955	,	
205-24	44956-44958	it	
205-25	44959-44964	grows	
205-26	44965-44969	even	
205-27	44970-44977	further	
205-28	44977-44978	,	
205-29	44979-44982	due	
205-30	44983-44985	to	
205-31	44986-44991	extra	
205-32	44992-45003	bookkeeping	
205-33	45004-45007	the	
205-34	45008-45012	Ruby	
205-35	45013-45015	VM	
205-36	45016-45019	has	
205-37	45020-45022	to	
205-38	45023-45030	perform	
205-39	45031-45033	to	
205-40	45034-45043	represent	
205-41	45044-45048	each	
205-42	45049-45053	line	
205-43	45053-45054	.	
205-44	45055-45063	Consider	
205-45	45064-45067	the	
205-46	45068-45077	following	
205-47	45078-45085	program	
205-48	45085-45086	,	
205-49	45087-45092	which	
205-50	45093-45098	reads	
205-51	45099-45100	a	
205-52	45101-45105	text	
205-53	45106-45110	file	
205-54	45111-45115	that	
205-55	45116-45118	is	
205-56	45119-45124	750MB	
205-57	45125-45127	on	
205-58	45128-45132	disk	
205-59	45132-45133	:	
205-60	45134-45148	File.readlines	
205-61	45148-45149	(	
205-62	45149-45150	'	
205-63	45150-45164	large_file.txt	
205-64	45164-45165	'	
205-65	45165-45166	)	
205-66	45166-45167	.	
205-67	45167-45171	each	
205-68	45172-45174	do	
205-69	45175-45176	|	
205-70	45176-45180	line	
205-71	45180-45181	|	

#Text=puts line end Here is a process memory reading from while the program was running, showing how we indeed kept the entire file in memory (RSS reported in kilobytes): $ ps -o rss -p <pid> RSS 783436
206-1	45182-45186	puts	
206-2	45187-45191	line	
206-3	45192-45195	end	
206-4	45196-45200	Here	
206-5	45201-45203	is	
206-6	45204-45205	a	
206-7	45206-45213	process	
206-8	45214-45220	memory	
206-9	45221-45228	reading	
206-10	45229-45233	from	
206-11	45234-45239	while	
206-12	45240-45243	the	
206-13	45244-45251	program	
206-14	45252-45255	was	
206-15	45256-45263	running	
206-16	45263-45264	,	
206-17	45265-45272	showing	
206-18	45273-45276	how	
206-19	45277-45279	we	
206-20	45280-45286	indeed	
206-21	45287-45291	kept	
206-22	45292-45295	the	
206-23	45296-45302	entire	
206-24	45303-45307	file	
206-25	45308-45310	in	
206-26	45311-45317	memory	
206-27	45318-45319	(	
206-28	45319-45322	RSS	
206-29	45323-45331	reported	
206-30	45332-45334	in	
206-31	45335-45344	kilobytes	
206-32	45344-45345	)	
206-33	45345-45346	:	
206-34	45347-45348	$	
206-35	45349-45351	ps	
206-36	45352-45353	-	
206-37	45353-45354	o	
206-38	45355-45358	rss	
206-39	45359-45360	-	
206-40	45360-45361	p	
206-41	45362-45363	<	
206-42	45363-45366	pid	
206-43	45366-45367	>	
206-44	45368-45371	RSS	
206-45	45372-45378	783436	

#Text=And here is an excerpt of what the garbage collector was doing: pp GC.stat :heap_live_slots=>2346848, :malloc_increase_bytes=>30895288, ... We can see that heap_live_slots (the number of reachable objects) jumped to ~2.3M,
207-1	45379-45382	And	
207-2	45383-45387	here	
207-3	45388-45390	is	
207-4	45391-45393	an	
207-5	45394-45401	excerpt	
207-6	45402-45404	of	
207-7	45405-45409	what	
207-8	45410-45413	the	
207-9	45414-45421	garbage	
207-10	45422-45431	collector	
207-11	45432-45435	was	
207-12	45436-45441	doing	
207-13	45441-45442	:	
207-14	45443-45445	pp	
207-15	45446-45453	GC.stat	
207-16	45454-45455	:	
207-17	45455-45470	heap_live_slots	
207-18	45470-45471	=	
207-19	45471-45472	>	
207-20	45472-45479	2346848	
207-21	45479-45480	,	
207-22	45481-45482	:	
207-23	45482-45503	malloc_increase_bytes	
207-24	45503-45504	=	
207-25	45504-45505	>	
207-26	45505-45513	30895288	
207-27	45513-45514	,	
207-28	45515-45516	.	
207-29	45516-45517	.	
207-30	45517-45518	.	
207-31	45519-45521	We	
207-32	45522-45525	can	
207-33	45526-45529	see	
207-34	45530-45534	that	
207-35	45535-45550	heap_live_slots	
207-36	45551-45552	(	
207-37	45552-45555	the	
207-38	45556-45562	number	
207-39	45563-45565	of	
207-40	45566-45575	reachable	
207-41	45576-45583	objects	
207-42	45583-45584	)	
207-43	45585-45591	jumped	
207-44	45592-45594	to	
207-45	45595-45596	~	
207-46	45596-45600	2.3M	
207-47	45600-45601	,	

#Text=which is roughly two orders of magnitude more compared to reading the file line by line instead. It was not just the raw memory usage that increased, but also how the garbage collector (GC) responded to this change in anticipation of future memory use. We can see that malloc_increase_bytes jumped
208-1	45602-45607	which	
208-2	45608-45610	is	
208-3	45611-45618	roughly	
208-4	45619-45622	two	
208-5	45623-45629	orders	
208-6	45630-45632	of	
208-7	45633-45642	magnitude	
208-8	45643-45647	more	
208-9	45648-45656	compared	
208-10	45657-45659	to	
208-11	45660-45667	reading	
208-12	45668-45671	the	
208-13	45672-45676	file	
208-14	45677-45681	line	
208-15	45682-45684	by	
208-16	45685-45689	line	
208-17	45690-45697	instead	
208-18	45697-45698	.	
208-19	45699-45701	It	
208-20	45702-45705	was	
208-21	45706-45709	not	
208-22	45710-45714	just	
208-23	45715-45718	the	
208-24	45719-45722	raw	
208-25	45723-45729	memory	
208-26	45730-45735	usage	
208-27	45736-45740	that	
208-28	45741-45750	increased	
208-29	45750-45751	,	
208-30	45752-45755	but	
208-31	45756-45760	also	
208-32	45761-45764	how	
208-33	45765-45768	the	
208-34	45769-45776	garbage	
208-35	45777-45786	collector	
208-36	45787-45788	(	
208-37	45788-45790	GC	
208-38	45790-45791	)	
208-39	45792-45801	responded	
208-40	45802-45804	to	
208-41	45805-45809	this	
208-42	45810-45816	change	
208-43	45817-45819	in	
208-44	45820-45832	anticipation	
208-45	45833-45835	of	
208-46	45836-45842	future	
208-47	45843-45849	memory	
208-48	45850-45853	use	
208-49	45853-45854	.	
208-50	45855-45857	We	
208-51	45858-45861	can	
208-52	45862-45865	see	
208-53	45866-45870	that	
208-54	45871-45892	malloc_increase_bytes	
208-55	45893-45899	jumped	

#Text=to ~30MB, which compares to just ~4kB for a “fresh” Ruby program. This figure specifies how much additional heap space the Ruby GC claims from the operating system next time it runs out of memory. Not only did we occupy more memory, we also changed the behavior of the application to increase memory use at a faster rate. The IO.read function exhibits similar behavior, with the difference that no extra memory is
209-1	45900-45902	to	
209-2	45903-45904	~	
209-3	45904-45908	30MB	
209-4	45908-45909	,	
209-5	45910-45915	which	
209-6	45916-45924	compares	
209-7	45925-45927	to	
209-8	45928-45932	just	
209-9	45933-45934	~	
209-10	45934-45937	4kB	
209-11	45938-45941	for	
209-12	45942-45943	a	
209-13	45944-45945	“	
209-14	45945-45950	fresh	
209-15	45950-45951	”	
209-16	45952-45956	Ruby	
209-17	45957-45964	program	
209-18	45964-45965	.	
209-19	45966-45970	This	
209-20	45971-45977	figure	
209-21	45978-45987	specifies	
209-22	45988-45991	how	
209-23	45992-45996	much	
209-24	45997-46007	additional	
209-25	46008-46012	heap	
209-26	46013-46018	space	
209-27	46019-46022	the	
209-28	46023-46027	Ruby	
209-29	46028-46030	GC	
209-30	46031-46037	claims	
209-31	46038-46042	from	
209-32	46043-46046	the	
209-33	46047-46056	operating	
209-34	46057-46063	system	
209-35	46064-46068	next	
209-36	46069-46073	time	
209-37	46074-46076	it	
209-38	46077-46081	runs	
209-39	46082-46085	out	
209-40	46086-46088	of	
209-41	46089-46095	memory	
209-42	46095-46096	.	
209-43	46097-46100	Not	
209-44	46101-46105	only	
209-45	46106-46109	did	
209-46	46110-46112	we	
209-47	46113-46119	occupy	
209-48	46120-46124	more	
209-49	46125-46131	memory	
209-50	46131-46132	,	
209-51	46133-46135	we	
209-52	46136-46140	also	
209-53	46141-46148	changed	
209-54	46149-46152	the	
209-55	46153-46161	behavior	
209-56	46162-46164	of	
209-57	46165-46168	the	
209-58	46169-46180	application	
209-59	46181-46183	to	
209-60	46184-46192	increase	
209-61	46193-46199	memory	
209-62	46200-46203	use	
209-63	46204-46206	at	
209-64	46207-46208	a	
209-65	46209-46215	faster	
209-66	46216-46220	rate	
209-67	46220-46221	.	
209-68	46222-46225	The	
209-69	46226-46233	IO.read	
209-70	46234-46242	function	
209-71	46243-46251	exhibits	
209-72	46252-46259	similar	
209-73	46260-46268	behavior	
209-74	46268-46269	,	
209-75	46270-46274	with	
209-76	46275-46278	the	
209-77	46279-46289	difference	
209-78	46290-46294	that	
209-79	46295-46297	no	
209-80	46298-46303	extra	
209-81	46304-46310	memory	
209-82	46311-46313	is	

#Text=allocated for each line object. Recommendations Instead of reading data sources into memory in full, it is better to read them line by line instead. This is not always an option, for instance when you need to convert a YAML file into a Ruby Hash, but whenever you have data where each row represents some entity that
210-1	46314-46323	allocated	
210-2	46324-46327	for	
210-3	46328-46332	each	
210-4	46333-46337	line	
210-5	46338-46344	object	
210-6	46344-46345	.	
210-7	46346-46361	Recommendations	
210-8	46362-46369	Instead	
210-9	46370-46372	of	
210-10	46373-46380	reading	
210-11	46381-46385	data	
210-12	46386-46393	sources	
210-13	46394-46398	into	
210-14	46399-46405	memory	
210-15	46406-46408	in	
210-16	46409-46413	full	
210-17	46413-46414	,	
210-18	46415-46417	it	
210-19	46418-46420	is	
210-20	46421-46427	better	
210-21	46428-46430	to	
210-22	46431-46435	read	
210-23	46436-46440	them	
210-24	46441-46445	line	
210-25	46446-46448	by	
210-26	46449-46453	line	
210-27	46454-46461	instead	
210-28	46461-46462	.	
210-29	46463-46467	This	
210-30	46468-46470	is	
210-31	46471-46474	not	
210-32	46475-46481	always	
210-33	46482-46484	an	
210-34	46485-46491	option	
210-35	46491-46492	,	
210-36	46493-46496	for	
210-37	46497-46505	instance	
210-38	46506-46510	when	
210-39	46511-46514	you	
210-40	46515-46519	need	
210-41	46520-46522	to	
210-42	46523-46530	convert	
210-43	46531-46532	a	
210-44	46533-46537	YAML	
210-45	46538-46542	file	
210-46	46543-46547	into	
210-47	46548-46549	a	
210-48	46550-46554	Ruby	
210-49	46555-46559	Hash	
210-50	46559-46560	,	
210-51	46561-46564	but	
210-52	46565-46573	whenever	
210-53	46574-46577	you	
210-54	46578-46582	have	
210-55	46583-46587	data	
210-56	46588-46593	where	
210-57	46594-46598	each	
210-58	46599-46602	row	
210-59	46603-46613	represents	
210-60	46614-46618	some	
210-61	46619-46625	entity	
210-62	46626-46630	that	

#Text=can be processed and then discarded, you can use the following approaches. First, replace calls to readlines.each with either each or each_line. The each_line and each functions read the data source line by line without keeping already visited lines in memory: File.new('file').each { |line| puts line }
211-1	46631-46634	can	
211-2	46635-46637	be	
211-3	46638-46647	processed	
211-4	46648-46651	and	
211-5	46652-46656	then	
211-6	46657-46666	discarded	
211-7	46666-46667	,	
211-8	46668-46671	you	
211-9	46672-46675	can	
211-10	46676-46679	use	
211-11	46680-46683	the	
211-12	46684-46693	following	
211-13	46694-46704	approaches	
211-14	46704-46705	.	
211-15	46706-46711	First	
211-16	46711-46712	,	
211-17	46713-46720	replace	
211-18	46721-46726	calls	
211-19	46727-46729	to	
211-20	46730-46744	readlines.each	
211-21	46745-46749	with	
211-22	46750-46756	either	
211-23	46757-46761	each	
211-24	46762-46764	or	
211-25	46765-46774	each_line	
211-26	46774-46775	.	
211-27	46776-46779	The	
211-28	46780-46789	each_line	
211-29	46790-46793	and	
211-30	46794-46798	each	
211-31	46799-46808	functions	
211-32	46809-46813	read	
211-33	46814-46817	the	
211-34	46818-46822	data	
211-35	46823-46829	source	
211-36	46830-46834	line	
211-37	46835-46837	by	
211-38	46838-46842	line	
211-39	46843-46850	without	
211-40	46851-46858	keeping	
211-41	46859-46866	already	
211-42	46867-46874	visited	
211-43	46875-46880	lines	
211-44	46881-46883	in	
211-45	46884-46890	memory	
211-46	46890-46891	:	
211-47	46892-46900	File.new	
211-48	46900-46901	(	
211-49	46901-46902	'	
211-50	46902-46906	file	
211-51	46906-46907	'	
211-52	46907-46908	)	
211-53	46908-46909	.	
211-54	46909-46913	each	
211-55	46914-46915	{	
211-56	46916-46917	|	
211-57	46917-46921	line	
211-58	46921-46922	|	
211-59	46923-46927	puts	
211-60	46928-46932	line	
211-61	46933-46934	}	

#Text=Alternatively, you can read individual lines explicitly using IO.readline or IO.gets functions: while line = file.readline # process line end This might be preferable if there is a condition that allows exiting the loop early, saving not just memory but also unnecessary time spent in CPU and I/O for processing lines you’re not interested in.
212-1	46935-46948	Alternatively	
212-2	46948-46949	,	
212-3	46950-46953	you	
212-4	46954-46957	can	
212-5	46958-46962	read	
212-6	46963-46973	individual	
212-7	46974-46979	lines	
212-8	46980-46990	explicitly	
212-9	46991-46996	using	
212-10	46997-47008	IO.readline	
212-11	47009-47011	or	
212-12	47012-47019	IO.gets	
212-13	47020-47029	functions	
212-14	47029-47030	:	
212-15	47031-47036	while	
212-16	47037-47041	line	
212-17	47042-47043	=	
212-18	47044-47057	file.readline	
212-19	47058-47059	#	
212-20	47060-47067	process	
212-21	47068-47072	line	
212-22	47073-47076	end	
212-23	47077-47081	This	
212-24	47082-47087	might	
212-25	47088-47090	be	
212-26	47091-47101	preferable	
212-27	47102-47104	if	
212-28	47105-47110	there	
212-29	47111-47113	is	
212-30	47114-47115	a	
212-31	47116-47125	condition	
212-32	47126-47130	that	
212-33	47131-47137	allows	
212-34	47138-47145	exiting	
212-35	47146-47149	the	
212-36	47150-47154	loop	
212-37	47155-47160	early	
212-38	47160-47161	,	
212-39	47162-47168	saving	
212-40	47169-47172	not	
212-41	47173-47177	just	
212-42	47178-47184	memory	
212-43	47185-47188	but	
212-44	47189-47193	also	
212-45	47194-47205	unnecessary	
212-46	47206-47210	time	
212-47	47211-47216	spent	
212-48	47217-47219	in	
212-49	47220-47223	CPU	
212-50	47224-47227	and	
212-51	47228-47229	I	
212-52	47229-47230	/	
212-53	47230-47231	O	
212-54	47232-47235	for	
212-55	47236-47246	processing	
212-56	47247-47252	lines	
212-57	47253-47256	you	
212-58	47256-47257	’	
212-59	47257-47259	re	
212-60	47260-47263	not	
212-61	47264-47274	interested	
212-62	47275-47277	in	
212-63	47277-47278	.	

#Text=Anti-Patterns This is a collection of anti-patterns that should be avoided unless these changes have a measurable, significant, and positive impact on production environments. Moving Allocations to Constants Storing an object as a constant so you only allocate it once may improve
213-1	47279-47292	Anti-Patterns	
213-2	47293-47297	This	
213-3	47298-47300	is	
213-4	47301-47302	a	
213-5	47303-47313	collection	
213-6	47314-47316	of	
213-7	47317-47330	anti-patterns	
213-8	47331-47335	that	
213-9	47336-47342	should	
213-10	47343-47345	be	
213-11	47346-47353	avoided	
213-12	47354-47360	unless	
213-13	47361-47366	these	
213-14	47367-47374	changes	
213-15	47375-47379	have	
213-16	47380-47381	a	
213-17	47382-47392	measurable	
213-18	47392-47393	,	
213-19	47394-47405	significant	
213-20	47405-47406	,	
213-21	47407-47410	and	
213-22	47411-47419	positive	
213-23	47420-47426	impact	
213-24	47427-47429	on	
213-25	47430-47440	production	
213-26	47441-47453	environments	
213-27	47453-47454	.	
213-28	47455-47461	Moving	
213-29	47462-47473	Allocations	
213-30	47474-47476	to	
213-31	47477-47486	Constants	
213-32	47487-47494	Storing	
213-33	47495-47497	an	
213-34	47498-47504	object	
213-35	47505-47507	as	
213-36	47508-47509	a	
213-37	47510-47518	constant	
213-38	47519-47521	so	
213-39	47522-47525	you	
213-40	47526-47530	only	
213-41	47531-47539	allocate	
213-42	47540-47542	it	
213-43	47543-47547	once	
213-44	47548-47551	may	
213-45	47552-47559	improve	

#Text=performance, but this is not guaranteed. Looking up constants has an impact on runtime performance, and as such, using a constant instead of referencing an object directly may even slow code down. For example: SOME_CONSTANT = 'foo'.freeze 9000.times do SOME_CONSTANT
214-1	47560-47571	performance	
214-2	47571-47572	,	
214-3	47573-47576	but	
214-4	47577-47581	this	
214-5	47582-47584	is	
214-6	47585-47588	not	
214-7	47589-47599	guaranteed	
214-8	47599-47600	.	
214-9	47601-47608	Looking	
214-10	47609-47611	up	
214-11	47612-47621	constants	
214-12	47622-47625	has	
214-13	47626-47628	an	
214-14	47629-47635	impact	
214-15	47636-47638	on	
214-16	47639-47646	runtime	
214-17	47647-47658	performance	
214-18	47658-47659	,	
214-19	47660-47663	and	
214-20	47664-47666	as	
214-21	47667-47671	such	
214-22	47671-47672	,	
214-23	47673-47678	using	
214-24	47679-47680	a	
214-25	47681-47689	constant	
214-26	47690-47697	instead	
214-27	47698-47700	of	
214-28	47701-47712	referencing	
214-29	47713-47715	an	
214-30	47716-47722	object	
214-31	47723-47731	directly	
214-32	47732-47735	may	
214-33	47736-47740	even	
214-34	47741-47745	slow	
214-35	47746-47750	code	
214-36	47751-47755	down	
214-37	47755-47756	.	
214-38	47757-47760	For	
214-39	47761-47768	example	
214-40	47768-47769	:	
214-41	47770-47783	SOME_CONSTANT	
214-42	47784-47785	=	
214-43	47786-47787	'	
214-44	47787-47790	foo	
214-45	47790-47791	'	
214-46	47791-47792	.	
214-47	47792-47798	freeze	
214-48	47799-47803	9000	
214-49	47803-47804	.	
214-50	47804-47809	times	
214-51	47810-47812	do	
214-52	47813-47826	SOME_CONSTANT	

#Text=end The only reason you should be doing this is to prevent somebody from mutating the global String. However, since you can just re-assign constants in Ruby there’s nothing stopping somebody from doing this elsewhere in the code: SOME_CONSTANT = 'bar'
215-1	47827-47830	end	
215-2	47831-47834	The	
215-3	47835-47839	only	
215-4	47840-47846	reason	
215-5	47847-47850	you	
215-6	47851-47857	should	
215-7	47858-47860	be	
215-8	47861-47866	doing	
215-9	47867-47871	this	
215-10	47872-47874	is	
215-11	47875-47877	to	
215-12	47878-47885	prevent	
215-13	47886-47894	somebody	
215-14	47895-47899	from	
215-15	47900-47908	mutating	
215-16	47909-47912	the	
215-17	47913-47919	global	
215-18	47920-47926	String	
215-19	47926-47927	.	
215-20	47928-47935	However	
215-21	47935-47936	,	
215-22	47937-47942	since	
215-23	47943-47946	you	
215-24	47947-47950	can	
215-25	47951-47955	just	
215-26	47956-47965	re-assign	
215-27	47966-47975	constants	
215-28	47976-47978	in	
215-29	47979-47983	Ruby	
215-30	47984-47989	there	
215-31	47989-47990	’	
215-32	47990-47991	s	
215-33	47992-47999	nothing	
215-34	48000-48008	stopping	
215-35	48009-48017	somebody	
215-36	48018-48022	from	
215-37	48023-48028	doing	
215-38	48029-48033	this	
215-39	48034-48043	elsewhere	
215-40	48044-48046	in	
215-41	48047-48050	the	
215-42	48051-48055	code	
215-43	48055-48056	:	
215-44	48057-48070	SOME_CONSTANT	
215-45	48071-48072	=	
215-46	48073-48074	'	
215-47	48074-48077	bar	
215-48	48077-48078	'	

#Text=How to seed a database with millions of rows You might want millions of project rows in your local database, for example, in order to compare relative query performance, or to reproduce a bug. You could do this by hand with SQL commands or using Mass Inserting Rails Models functionality.
216-1	48079-48082	How	
216-2	48083-48085	to	
216-3	48086-48090	seed	
216-4	48091-48092	a	
216-5	48093-48101	database	
216-6	48102-48106	with	
216-7	48107-48115	millions	
216-8	48116-48118	of	
216-9	48119-48123	rows	
216-10	48124-48127	You	
216-11	48128-48133	might	
216-12	48134-48138	want	
216-13	48139-48147	millions	
216-14	48148-48150	of	
216-15	48151-48158	project	
216-16	48159-48163	rows	
216-17	48164-48166	in	
216-18	48167-48171	your	
216-19	48172-48177	local	
216-20	48178-48186	database	
216-21	48186-48187	,	
216-22	48188-48191	for	
216-23	48192-48199	example	
216-24	48199-48200	,	
216-25	48201-48203	in	
216-26	48204-48209	order	
216-27	48210-48212	to	
216-28	48213-48220	compare	
216-29	48221-48229	relative	
216-30	48230-48235	query	
216-31	48236-48247	performance	
216-32	48247-48248	,	
216-33	48249-48251	or	
216-34	48252-48254	to	
216-35	48255-48264	reproduce	
216-36	48265-48266	a	
216-37	48267-48270	bug	
216-38	48270-48271	.	
216-39	48272-48275	You	
216-40	48276-48281	could	
216-41	48282-48284	do	
216-42	48285-48289	this	
216-43	48290-48292	by	
216-44	48293-48297	hand	
216-45	48298-48302	with	
216-46	48303-48306	SQL	
216-47	48307-48315	commands	
216-48	48316-48318	or	
216-49	48319-48324	using	
216-50	48325-48329	Mass	
216-51	48330-48339	Inserting	
216-52	48340-48345	Rails	
216-53	48346-48352	Models	
216-54	48353-48366	functionality	
216-55	48366-48367	.	

#Text=Assuming you are working with ActiveRecord models, you might also find these links helpful: Insert records in batches BulkInsert gem ActiveRecord::PgGenerateSeries gem Examples You may find some useful examples in this snippet. Help & feedback Docs
217-1	48368-48376	Assuming	
217-2	48377-48380	you	
217-3	48381-48384	are	
217-4	48385-48392	working	
217-5	48393-48397	with	
217-6	48398-48410	ActiveRecord	
217-7	48411-48417	models	
217-8	48417-48418	,	
217-9	48419-48422	you	
217-10	48423-48428	might	
217-11	48429-48433	also	
217-12	48434-48438	find	
217-13	48439-48444	these	
217-14	48445-48450	links	
217-15	48451-48458	helpful	
217-16	48458-48459	:	
217-17	48460-48466	Insert	
217-18	48467-48474	records	
217-19	48475-48477	in	
217-20	48478-48485	batches	
217-21	48486-48496	BulkInsert	
217-22	48497-48500	gem	
217-23	48501-48513	ActiveRecord	
217-24	48513-48514	:	
217-25	48514-48515	:	
217-26	48515-48531	PgGenerateSeries	
217-27	48532-48535	gem	
217-28	48536-48544	Examples	
217-29	48545-48548	You	
217-30	48549-48552	may	
217-31	48553-48557	find	
217-32	48558-48562	some	
217-33	48563-48569	useful	
217-34	48570-48578	examples	
217-35	48579-48581	in	
217-36	48582-48586	this	
217-37	48587-48594	snippet	
217-38	48594-48595	.	
217-39	48596-48600	Help	
217-40	48601-48602	&	
217-41	48603-48611	feedback	
217-42	48612-48616	Docs	

#Text=Edit this page to fix an error or add an improvement in a merge request. Create an issue to suggest an improvement to this page. Show and post comments to review and give feedback about this page. Product Create an issue
218-1	48617-48621	Edit	
218-2	48622-48626	this	
218-3	48627-48631	page	
218-4	48632-48634	to	
218-5	48635-48638	fix	
218-6	48639-48641	an	
218-7	48642-48647	error	
218-8	48648-48650	or	
218-9	48651-48654	add	
218-10	48655-48657	an	
218-11	48658-48669	improvement	
218-12	48670-48672	in	
218-13	48673-48674	a	
218-14	48675-48680	merge	
218-15	48681-48688	request	
218-16	48688-48689	.	
218-17	48690-48696	Create	
218-18	48697-48699	an	
218-19	48700-48705	issue	
218-20	48706-48708	to	
218-21	48709-48716	suggest	
218-22	48717-48719	an	
218-23	48720-48731	improvement	
218-24	48732-48734	to	
218-25	48735-48739	this	
218-26	48740-48744	page	
218-27	48744-48745	.	
218-28	48746-48750	Show	
218-29	48751-48754	and	
218-30	48755-48759	post	
218-31	48760-48768	comments	
218-32	48769-48771	to	
218-33	48772-48778	review	
218-34	48779-48782	and	
218-35	48783-48787	give	
218-36	48788-48796	feedback	
218-37	48797-48802	about	
218-38	48803-48807	this	
218-39	48808-48812	page	
218-40	48812-48813	.	
218-41	48814-48821	Product	
218-42	48822-48828	Create	
218-43	48829-48831	an	
218-44	48832-48837	issue	

#Text=if there's something you don't like about this feature. Propose functionality by submitting a feature request. Join First Look to help shape new features. Feature availability and product trials View pricing to see all GitLab tiers and features, or to upgrade. Try GitLab for free
219-1	48838-48840	if	
219-2	48841-48848	there's	
219-3	48849-48858	something	
219-4	48859-48862	you	
219-5	48863-48868	don't	
219-6	48869-48873	like	
219-7	48874-48879	about	
219-8	48880-48884	this	
219-9	48885-48892	feature	
219-10	48892-48893	.	
219-11	48894-48901	Propose	
219-12	48902-48915	functionality	
219-13	48916-48918	by	
219-14	48919-48929	submitting	
219-15	48930-48931	a	
219-16	48932-48939	feature	
219-17	48940-48947	request	
219-18	48947-48948	.	
219-19	48949-48953	Join	
219-20	48954-48959	First	
219-21	48960-48964	Look	
219-22	48965-48967	to	
219-23	48968-48972	help	
219-24	48973-48978	shape	
219-25	48979-48982	new	
219-26	48983-48991	features	
219-27	48991-48992	.	
219-28	48993-49000	Feature	
219-29	49001-49013	availability	
219-30	49014-49017	and	
219-31	49018-49025	product	
219-32	49026-49032	trials	
219-33	49033-49037	View	
219-34	49038-49045	pricing	
219-35	49046-49048	to	
219-36	49049-49052	see	
219-37	49053-49056	all	
219-38	49057-49063	GitLab	
219-39	49064-49069	tiers	
219-40	49070-49073	and	
219-41	49074-49082	features	
219-42	49082-49083	,	
219-43	49084-49086	or	
219-44	49087-49089	to	
219-45	49090-49097	upgrade	
219-46	49097-49098	.	
219-47	49099-49102	Try	
219-48	49103-49109	GitLab	
219-49	49110-49113	for	
219-50	49114-49118	free	

#Text=with access to all features for 30 days. Get Help If you didn't find what you were looking for, search the docs. If you want help with something specific and could use community support, post on the GitLab forum. For problems setting up or using this feature (depending on your GitLab
220-1	49119-49123	with	
220-2	49124-49130	access	
220-3	49131-49133	to	
220-4	49134-49137	all	
220-5	49138-49146	features	
220-6	49147-49150	for	
220-7	49151-49153	30	
220-8	49154-49158	days	
220-9	49158-49159	.	
220-10	49160-49163	Get	
220-11	49164-49168	Help	
220-12	49169-49171	If	
220-13	49172-49175	you	
220-14	49176-49182	didn't	
220-15	49183-49187	find	
220-16	49188-49192	what	
220-17	49193-49196	you	
220-18	49197-49201	were	
220-19	49202-49209	looking	
220-20	49210-49213	for	
220-21	49213-49214	,	
220-22	49215-49221	search	
220-23	49222-49225	the	
220-24	49226-49230	docs	
220-25	49230-49231	.	
220-26	49232-49234	If	
220-27	49235-49238	you	
220-28	49239-49243	want	
220-29	49244-49248	help	
220-30	49249-49253	with	
220-31	49254-49263	something	
220-32	49264-49272	specific	
220-33	49273-49276	and	
220-34	49277-49282	could	
220-35	49283-49286	use	
220-36	49287-49296	community	
220-37	49297-49304	support	
220-38	49304-49305	,	
220-39	49306-49310	post	
220-40	49311-49313	on	
220-41	49314-49317	the	
220-42	49318-49324	GitLab	
220-43	49325-49330	forum	
220-44	49330-49331	.	
220-45	49332-49335	For	
220-46	49336-49344	problems	
220-47	49345-49352	setting	
220-48	49353-49355	up	
220-49	49356-49358	or	
220-50	49359-49364	using	
220-51	49365-49369	this	
220-52	49370-49377	feature	
220-53	49378-49379	(	
220-54	49379-49388	depending	
220-55	49389-49391	on	
220-56	49392-49396	your	
220-57	49397-49403	GitLab	

#Text=subscription). Request support Please enable JavaScript to view the comments powered by Disqus. Twitter Facebook YouTube LinkedIn Docs Repo About GitLab Terms Privacy Policy
221-1	49404-49416	subscription	
221-2	49416-49417	)	
221-3	49417-49418	.	
221-4	49419-49426	Request	
221-5	49427-49434	support	
221-6	49435-49441	Please	
221-7	49442-49448	enable	
221-8	49449-49459	JavaScript	
221-9	49460-49462	to	
221-10	49463-49467	view	
221-11	49468-49471	the	
221-12	49472-49480	comments	
221-13	49481-49488	powered	
221-14	49489-49491	by	
221-15	49492-49498	Disqus	
221-16	49498-49499	.	
221-17	49500-49507	Twitter	
221-18	49508-49516	Facebook	
221-19	49517-49524	YouTube	
221-20	49525-49533	LinkedIn	
221-21	49534-49538	Docs	
221-22	49539-49543	Repo	
221-23	49544-49549	About	
221-24	49550-49556	GitLab	
221-25	49557-49562	Terms	
221-26	49563-49570	Privacy	
221-27	49571-49577	Policy	
