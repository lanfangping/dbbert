#FORMAT=WebAnno TSV 3.3


#Text=Tuning Your Postgres Database for High Write Loads Home Cloud Crunchy Bridge Overview Crunchy Bridge delivers a fully managed cloud Postgres service available on multiple clouds so you can focus on your application, not your database. Documentation
1-1	0-6	Tuning	
1-2	7-11	Your	
1-3	12-20	Postgres	
1-4	21-29	Database	
1-5	30-33	for	
1-6	34-38	High	
1-7	39-44	Write	
1-8	45-50	Loads	
1-9	51-55	Home	
1-10	56-61	Cloud	
1-11	62-69	Crunchy	
1-12	70-76	Bridge	
1-13	77-85	Overview	
1-14	86-93	Crunchy	
1-15	94-100	Bridge	
1-16	101-109	delivers	
1-17	110-111	a	
1-18	112-117	fully	
1-19	118-125	managed	
1-20	126-131	cloud	
1-21	132-140	Postgres	
1-22	141-148	service	
1-23	149-158	available	
1-24	159-161	on	
1-25	162-170	multiple	
1-26	171-177	clouds	
1-27	178-180	so	
1-28	181-184	you	
1-29	185-188	can	
1-30	189-194	focus	
1-31	195-197	on	
1-32	198-202	your	
1-33	203-214	application	
1-34	214-215	,	
1-35	216-219	not	
1-36	220-224	your	
1-37	225-233	database	
1-38	233-234	.	
1-39	235-248	Documentation	

#Text=Read up on the capabilities provided by Crunchy Bridge, including supported extensions, pricing, and features. Get Started Get started with Crunchy Bridge by creating your account and provision your production ready database on the cloud of your choice. Products Featured Products Crunchy Bridge A fully managed cloud Postgres service that allows you to focus on your application, not your database.
2-1	249-253	Read	
2-2	254-256	up	
2-3	257-259	on	
2-4	260-263	the	
2-5	264-276	capabilities	
2-6	277-285	provided	
2-7	286-288	by	
2-8	289-296	Crunchy	
2-9	297-303	Bridge	
2-10	303-304	,	
2-11	305-314	including	
2-12	315-324	supported	
2-13	325-335	extensions	
2-14	335-336	,	
2-15	337-344	pricing	
2-16	344-345	,	
2-17	346-349	and	
2-18	350-358	features	
2-19	358-359	.	
2-20	360-363	Get	
2-21	364-371	Started	
2-22	372-375	Get	
2-23	376-383	started	
2-24	384-388	with	
2-25	389-396	Crunchy	
2-26	397-403	Bridge	
2-27	404-406	by	
2-28	407-415	creating	
2-29	416-420	your	
2-30	421-428	account	
2-31	429-432	and	
2-32	433-442	provision	
2-33	443-447	your	
2-34	448-458	production	
2-35	459-464	ready	
2-36	465-473	database	
2-37	474-476	on	
2-38	477-480	the	
2-39	481-486	cloud	
2-40	487-489	of	
2-41	490-494	your	
2-42	495-501	choice	
2-43	501-502	.	
2-44	503-511	Products	
2-45	512-520	Featured	
2-46	521-529	Products	
2-47	530-537	Crunchy	
2-48	538-544	Bridge	
2-49	545-546	A	
2-50	547-552	fully	
2-51	553-560	managed	
2-52	561-566	cloud	
2-53	567-575	Postgres	
2-54	576-583	service	
2-55	584-588	that	
2-56	589-595	allows	
2-57	596-599	you	
2-58	600-602	to	
2-59	603-608	focus	
2-60	609-611	on	
2-61	612-616	your	
2-62	617-628	application	
2-63	628-629	,	
2-64	630-633	not	
2-65	634-638	your	
2-66	639-647	database	
2-67	647-648	.	

#Text=Crunchy PostgreSQL for Kubernetes Kubernetes-Native, containerized PostgreSQL-as-a-Service for your choice of public, private, or hybrid cloud. Crunchy High Availability PostgreSQL Integrated high-availability PostgreSQL solution for enterprises with "always on" data requirements.
3-1	649-656	Crunchy	
3-2	657-667	PostgreSQL	
3-3	668-671	for	
3-4	672-682	Kubernetes	
3-5	683-700	Kubernetes-Native	
3-6	700-701	,	
3-7	702-715	containerized	
3-8	716-739	PostgreSQL-as-a-Service	
3-9	740-743	for	
3-10	744-748	your	
3-11	749-755	choice	
3-12	756-758	of	
3-13	759-765	public	
3-14	765-766	,	
3-15	767-774	private	
3-16	774-775	,	
3-17	776-778	or	
3-18	779-785	hybrid	
3-19	786-791	cloud	
3-20	791-792	.	
3-21	793-800	Crunchy	
3-22	801-805	High	
3-23	806-818	Availability	
3-24	819-829	PostgreSQL	
3-25	830-840	Integrated	
3-26	841-858	high-availability	
3-27	859-869	PostgreSQL	
3-28	870-878	solution	
3-29	879-882	for	
3-30	883-894	enterprises	
3-31	895-899	with	
3-32	900-901	"	
3-33	901-907	always	
3-34	908-910	on	
3-35	910-911	"	
3-36	912-916	data	
3-37	917-929	requirements	
3-38	929-930	.	

#Text=All Crunchy Products Crunchy Bridge Crunchy PostgreSQL for Kubernetes Crunchy High Availability PostgreSQL Crunchy Certified PostgreSQL Crunchy PostgreSQL for Cloud Foundry
4-1	931-934	All	
4-2	935-942	Crunchy	
4-3	943-951	Products	
4-4	952-959	Crunchy	
4-5	960-966	Bridge	
4-6	967-974	Crunchy	
4-7	975-985	PostgreSQL	
4-8	986-989	for	
4-9	990-1000	Kubernetes	
4-10	1001-1008	Crunchy	
4-11	1009-1013	High	
4-12	1014-1026	Availability	
4-13	1027-1037	PostgreSQL	
4-14	1038-1045	Crunchy	
4-15	1046-1055	Certified	
4-16	1056-1066	PostgreSQL	
4-17	1067-1074	Crunchy	
4-18	1075-1085	PostgreSQL	
4-19	1086-1089	for	
4-20	1090-1095	Cloud	
4-21	1096-1103	Foundry	

#Text=Crunchy MLS PostgreSQL Crunchy Spatial Services & Support Learn News Press Releases Read up on the latest product launches and company news from Crunchy Data. Tutorials Katacoda Learning Portal Learn PostgreSQL by example with interactive courses designed by our experts.
5-1	1104-1111	Crunchy	
5-2	1112-1115	MLS	
5-3	1116-1126	PostgreSQL	
5-4	1127-1134	Crunchy	
5-5	1135-1142	Spatial	
5-6	1143-1151	Services	
5-7	1152-1153	&	
5-8	1154-1161	Support	
5-9	1162-1167	Learn	
5-10	1168-1172	News	
5-11	1173-1178	Press	
5-12	1179-1187	Releases	
5-13	1188-1192	Read	
5-14	1193-1195	up	
5-15	1196-1198	on	
5-16	1199-1202	the	
5-17	1203-1209	latest	
5-18	1210-1217	product	
5-19	1218-1226	launches	
5-20	1227-1230	and	
5-21	1231-1238	company	
5-22	1239-1243	news	
5-23	1244-1248	from	
5-24	1249-1256	Crunchy	
5-25	1257-1261	Data	
5-26	1261-1262	.	
5-27	1263-1272	Tutorials	
5-28	1273-1281	Katacoda	
5-29	1282-1290	Learning	
5-30	1291-1297	Portal	
5-31	1298-1303	Learn	
5-32	1304-1314	PostgreSQL	
5-33	1315-1317	by	
5-34	1318-1325	example	
5-35	1326-1330	with	
5-36	1331-1342	interactive	
5-37	1343-1350	courses	
5-38	1351-1359	designed	
5-39	1360-1362	by	
5-40	1363-1366	our	
5-41	1367-1374	experts	
5-42	1374-1375	.	

#Text=Documentation Software Documentation Full product documentation of your favorite PostgreSQL tools. Contact Us Blog Download Login Tuning Your Postgres Database for High Write Loads October 14, 2020 Tom Swartz
6-1	1376-1389	Documentation	
6-2	1390-1398	Software	
6-3	1399-1412	Documentation	
6-4	1413-1417	Full	
6-5	1418-1425	product	
6-6	1426-1439	documentation	
6-7	1440-1442	of	
6-8	1443-1447	your	
6-9	1448-1456	favorite	
6-10	1457-1467	PostgreSQL	
6-11	1468-1473	tools	
6-12	1473-1474	.	
6-13	1475-1482	Contact	
6-14	1483-1485	Us	
6-15	1486-1490	Blog	
6-16	1491-1499	Download	
6-17	1500-1505	Login	
6-18	1506-1512	Tuning	
6-19	1513-1517	Your	
6-20	1518-1526	Postgres	
6-21	1527-1535	Database	
6-22	1536-1539	for	
6-23	1540-1544	High	
6-24	1545-1550	Write	
6-25	1551-1556	Loads	
6-26	1557-1564	October	
6-27	1565-1567	14	
6-28	1567-1568	,	
6-29	1569-1573	2020	
6-30	1574-1577	Tom	
6-31	1578-1584	Swartz	

#Text=Performance As a database grows and scales up from a proof of concept to a full-fledged production instance, there are always a variety of growing pains that database administrators and systems administrators will run into.
7-1	1585-1596	Performance	
7-2	1597-1599	As	
7-3	1600-1601	a	
7-4	1602-1610	database	
7-5	1611-1616	grows	
7-6	1617-1620	and	
7-7	1621-1627	scales	
7-8	1628-1630	up	
7-9	1631-1635	from	
7-10	1636-1637	a	
7-11	1638-1643	proof	
7-12	1644-1646	of	
7-13	1647-1654	concept	
7-14	1655-1657	to	
7-15	1658-1659	a	
7-16	1660-1672	full-fledged	
7-17	1673-1683	production	
7-18	1684-1692	instance	
7-19	1692-1693	,	
7-20	1694-1699	there	
7-21	1700-1703	are	
7-22	1704-1710	always	
7-23	1711-1712	a	
7-24	1713-1720	variety	
7-25	1721-1723	of	
7-26	1724-1731	growing	
7-27	1732-1737	pains	
7-28	1738-1742	that	
7-29	1743-1751	database	
7-30	1752-1766	administrators	
7-31	1767-1770	and	
7-32	1771-1778	systems	
7-33	1779-1793	administrators	
7-34	1794-1798	will	
7-35	1799-1802	run	
7-36	1803-1807	into	
7-37	1807-1808	.	

#Text=Very often, the engineers on the Crunchy Data support team help support enterprise projects which start out as small, proof of concept systems, and are then promoted to large scale production uses.  As these systems receive increased traffic load beyond their original proof-of-concept sizes, one issue may be observed in the Postgres logs as the following: LOG: checkpoints are occurring too frequently (9 seconds apart) HINT: Consider increasing the configuration parameter "max_wal_size". LOG: checkpoints are occurring too frequently (2 seconds apart) HINT:
8-1	1809-1813	Very	
8-2	1814-1819	often	
8-3	1819-1820	,	
8-4	1821-1824	the	
8-5	1825-1834	engineers	
8-6	1835-1837	on	
8-7	1838-1841	the	
8-8	1842-1849	Crunchy	
8-9	1850-1854	Data	
8-10	1855-1862	support	
8-11	1863-1867	team	
8-12	1868-1872	help	
8-13	1873-1880	support	
8-14	1881-1891	enterprise	
8-15	1892-1900	projects	
8-16	1901-1906	which	
8-17	1907-1912	start	
8-18	1913-1916	out	
8-19	1917-1919	as	
8-20	1920-1925	small	
8-21	1925-1926	,	
8-22	1927-1932	proof	
8-23	1933-1935	of	
8-24	1936-1943	concept	
8-25	1944-1951	systems	
8-26	1951-1952	,	
8-27	1953-1956	and	
8-28	1957-1960	are	
8-29	1961-1965	then	
8-30	1966-1974	promoted	
8-31	1975-1977	to	
8-32	1978-1983	large	
8-33	1984-1989	scale	
8-34	1990-2000	production	
8-35	2001-2005	uses	
8-36	2005-2006	.	
8-37	2006-2007	 	
8-38	2008-2010	As	
8-39	2011-2016	these	
8-40	2017-2024	systems	
8-41	2025-2032	receive	
8-42	2033-2042	increased	
8-43	2043-2050	traffic	
8-44	2051-2055	load	
8-45	2056-2062	beyond	
8-46	2063-2068	their	
8-47	2069-2077	original	
8-48	2078-2094	proof-of-concept	
8-49	2095-2100	sizes	
8-50	2100-2101	,	
8-51	2102-2105	one	
8-52	2106-2111	issue	
8-53	2112-2115	may	
8-54	2116-2118	be	
8-55	2119-2127	observed	
8-56	2128-2130	in	
8-57	2131-2134	the	
8-58	2135-2143	Postgres	
8-59	2144-2148	logs	
8-60	2149-2151	as	
8-61	2152-2155	the	
8-62	2156-2165	following	
8-63	2165-2166	:	
8-64	2167-2170	LOG	
8-65	2170-2171	:	
8-66	2172-2183	checkpoints	
8-67	2184-2187	are	
8-68	2188-2197	occurring	
8-69	2198-2201	too	
8-70	2202-2212	frequently	
8-71	2213-2214	(	
8-72	2214-2215	9	
8-73	2216-2223	seconds	
8-74	2224-2229	apart	
8-75	2229-2230	)	
8-76	2231-2235	HINT	
8-77	2235-2236	:	
8-78	2237-2245	Consider	
8-79	2246-2256	increasing	
8-80	2257-2260	the	
8-81	2261-2274	configuration	
8-82	2275-2284	parameter	
8-83	2285-2286	"	
8-84	2286-2298	max_wal_size	
8-85	2298-2299	"	
8-86	2299-2300	.	
8-87	2301-2304	LOG	
8-88	2304-2305	:	
8-89	2306-2317	checkpoints	
8-90	2318-2321	are	
8-91	2322-2331	occurring	
8-92	2332-2335	too	
8-93	2336-2346	frequently	
8-94	2347-2348	(	
8-95	2348-2349	2	
8-96	2350-2357	seconds	
8-97	2358-2363	apart	
8-98	2363-2364	)	
8-99	2365-2369	HINT	
8-100	2369-2370	:	

#Text=Consider increasing the configuration parameter "max_wal_size". This is a classic example of a database which has not been properly tuned for a high write load. In this post, we'll discuss what this means, some possible causes for this error, and some relatively simple ways to resolve the issue. Systems Settings
9-1	2371-2379	Consider	
9-2	2380-2390	increasing	
9-3	2391-2394	the	
9-4	2395-2408	configuration	
9-5	2409-2418	parameter	
9-6	2419-2420	"	
9-7	2420-2432	max_wal_size	
9-8	2432-2433	"	
9-9	2433-2434	.	
9-10	2435-2439	This	
9-11	2440-2442	is	
9-12	2443-2444	a	
9-13	2445-2452	classic	
9-14	2453-2460	example	
9-15	2461-2463	of	
9-16	2464-2465	a	
9-17	2466-2474	database	
9-18	2475-2480	which	
9-19	2481-2484	has	
9-20	2485-2488	not	
9-21	2489-2493	been	
9-22	2494-2502	properly	
9-23	2503-2508	tuned	
9-24	2509-2512	for	
9-25	2513-2514	a	
9-26	2515-2519	high	
9-27	2520-2525	write	
9-28	2526-2530	load	
9-29	2530-2531	.	
9-30	2532-2534	In	
9-31	2535-2539	this	
9-32	2540-2544	post	
9-33	2544-2545	,	
9-34	2546-2551	we'll	
9-35	2552-2559	discuss	
9-36	2560-2564	what	
9-37	2565-2569	this	
9-38	2570-2575	means	
9-39	2575-2576	,	
9-40	2577-2581	some	
9-41	2582-2590	possible	
9-42	2591-2597	causes	
9-43	2598-2601	for	
9-44	2602-2606	this	
9-45	2607-2612	error	
9-46	2612-2613	,	
9-47	2614-2617	and	
9-48	2618-2622	some	
9-49	2623-2633	relatively	
9-50	2634-2640	simple	
9-51	2641-2645	ways	
9-52	2646-2648	to	
9-53	2649-2656	resolve	
9-54	2657-2660	the	
9-55	2661-2666	issue	
9-56	2666-2667	.	
9-57	2668-2675	Systems	
9-58	2676-2684	Settings	

#Text=First, a look at the system settings and a brief discussion about what this error means. The Postgres logs mentioned two specific things, checkpoints and max_wal_size. Investigating the Postgres instance to observe any settings related to these two items, we see the following:
10-1	2685-2690	First	
10-2	2690-2691	,	
10-3	2692-2693	a	
10-4	2694-2698	look	
10-5	2699-2701	at	
10-6	2702-2705	the	
10-7	2706-2712	system	
10-8	2713-2721	settings	
10-9	2722-2725	and	
10-10	2726-2727	a	
10-11	2728-2733	brief	
10-12	2734-2744	discussion	
10-13	2745-2750	about	
10-14	2751-2755	what	
10-15	2756-2760	this	
10-16	2761-2766	error	
10-17	2767-2772	means	
10-18	2772-2773	.	
10-19	2774-2777	The	
10-20	2778-2786	Postgres	
10-21	2787-2791	logs	
10-22	2792-2801	mentioned	
10-23	2802-2805	two	
10-24	2806-2814	specific	
10-25	2815-2821	things	
10-26	2821-2822	,	
10-27	2823-2834	checkpoints	
10-28	2835-2838	and	
10-29	2839-2851	max_wal_size	
10-30	2851-2852	.	
10-31	2853-2866	Investigating	
10-32	2867-2870	the	
10-33	2871-2879	Postgres	
10-34	2880-2888	instance	
10-35	2889-2891	to	
10-36	2892-2899	observe	
10-37	2900-2903	any	
10-38	2904-2912	settings	
10-39	2913-2920	related	
10-40	2921-2923	to	
10-41	2924-2929	these	
10-42	2930-2933	two	
10-43	2934-2939	items	
10-44	2939-2940	,	
10-45	2941-2943	we	
10-46	2944-2947	see	
10-47	2948-2951	the	
10-48	2952-2961	following	
10-49	2961-2962	:	

#Text=[local]:5433 user@exampledb=# select name, setting from pg_settings where name like '%wal_size%' or name like '%checkpoint%' order by name; name setting ------------------------------+----------- checkpoint_completion_target | 0.9
11-1	2963-2964	[	
11-2	2964-2969	local	
11-3	2969-2970	]	
11-4	2970-2971	:	
11-5	2971-2975	5433	
11-6	2976-2980	user	
11-7	2980-2981	@	
11-8	2981-2990	exampledb	
11-9	2990-2991	=	
11-10	2991-2992	#	
11-11	2993-2999	select	
11-12	3000-3004	name	
11-13	3004-3005	,	
11-14	3006-3013	setting	
11-15	3014-3018	from	
11-16	3019-3030	pg_settings	
11-17	3031-3036	where	
11-18	3037-3041	name	
11-19	3042-3046	like	
11-20	3047-3048	'	
11-21	3048-3049	%	
11-22	3049-3057	wal_size	
11-23	3057-3058	%	
11-24	3058-3059	'	
11-25	3060-3062	or	
11-26	3063-3067	name	
11-27	3068-3072	like	
11-28	3073-3074	'	
11-29	3074-3075	%	
11-30	3075-3085	checkpoint	
11-31	3085-3086	%	
11-32	3086-3087	'	
11-33	3088-3093	order	
11-34	3094-3096	by	
11-35	3097-3101	name	
11-36	3101-3102	;	
11-37	3103-3107	name	
11-38	3108-3115	setting	
11-39	3116-3117	-	
11-40	3117-3118	-	
11-41	3118-3119	-	
11-42	3119-3120	-	
11-43	3120-3121	-	
11-44	3121-3122	-	
11-45	3122-3123	-	
11-46	3123-3124	-	
11-47	3124-3125	-	
11-48	3125-3126	-	
11-49	3126-3127	-	
11-50	3127-3128	-	
11-51	3128-3129	-	
11-52	3129-3130	-	
11-53	3130-3131	-	
11-54	3131-3132	-	
11-55	3132-3133	-	
11-56	3133-3134	-	
11-57	3134-3135	-	
11-58	3135-3136	-	
11-59	3136-3137	-	
11-60	3137-3138	-	
11-61	3138-3139	-	
11-62	3139-3140	-	
11-63	3140-3141	-	
11-64	3141-3142	-	
11-65	3142-3143	-	
11-66	3143-3144	-	
11-67	3144-3145	-	
11-68	3145-3146	-	
11-69	3146-3147	+	
11-70	3147-3148	-	
11-71	3148-3149	-	
11-72	3149-3150	-	
11-73	3150-3151	-	
11-74	3151-3152	-	
11-75	3152-3153	-	
11-76	3153-3154	-	
11-77	3154-3155	-	
11-78	3155-3156	-	
11-79	3156-3157	-	
11-80	3157-3158	-	
11-81	3159-3187	checkpoint_completion_target	
11-82	3188-3189	|	
11-83	3190-3193	0.9	

#Text=checkpoint_flush_after | 32 checkpoint_timeout | 300 checkpoint_warning | 30 log_checkpoints | off max_wal_size | 1024 min_wal_size | 80 (7 rows)
12-1	3194-3216	checkpoint_flush_after	
12-2	3217-3218	|	
12-3	3219-3221	32	
12-4	3222-3240	checkpoint_timeout	
12-5	3241-3242	|	
12-6	3243-3246	300	
12-7	3247-3265	checkpoint_warning	
12-8	3266-3267	|	
12-9	3268-3270	30	
12-10	3271-3286	log_checkpoints	
12-11	3287-3288	|	
12-12	3289-3292	off	
12-13	3293-3305	max_wal_size	
12-14	3306-3307	|	
12-15	3308-3312	1024	
12-16	3313-3325	min_wal_size	
12-17	3326-3327	|	
12-18	3328-3330	80	
12-19	3331-3332	(	
12-20	3332-3333	7	
12-21	3334-3338	rows	
12-22	3338-3339	)	

#Text=max_wal_size sets the maximum amount of Write-Ahead-Logging (WAL) to grow between automatic checkpoints. This is a soft limit; WAL size can exceed max_wal_size under special circumstances, such as heavy load, a failing archive_command, or a high wal_keep_segments setting. It should also be noted that increasing this parameter can increase the amount of time needed for crash recovery. The default value is 1GB (1024 MB).
13-1	3340-3352	max_wal_size	
13-2	3353-3357	sets	
13-3	3358-3361	the	
13-4	3362-3369	maximum	
13-5	3370-3376	amount	
13-6	3377-3379	of	
13-7	3380-3399	Write-Ahead-Logging	
13-8	3400-3401	(	
13-9	3401-3404	WAL	
13-10	3404-3405	)	
13-11	3406-3408	to	
13-12	3409-3413	grow	
13-13	3414-3421	between	
13-14	3422-3431	automatic	
13-15	3432-3443	checkpoints	
13-16	3443-3444	.	
13-17	3445-3449	This	
13-18	3450-3452	is	
13-19	3453-3454	a	
13-20	3455-3459	soft	
13-21	3460-3465	limit	
13-22	3465-3466	;	
13-23	3467-3470	WAL	
13-24	3471-3475	size	
13-25	3476-3479	can	
13-26	3480-3486	exceed	
13-27	3487-3499	max_wal_size	
13-28	3500-3505	under	
13-29	3506-3513	special	
13-30	3514-3527	circumstances	
13-31	3527-3528	,	
13-32	3529-3533	such	
13-33	3534-3536	as	
13-34	3537-3542	heavy	
13-35	3543-3547	load	
13-36	3547-3548	,	
13-37	3549-3550	a	
13-38	3551-3558	failing	
13-39	3559-3574	archive_command	
13-40	3574-3575	,	
13-41	3576-3578	or	
13-42	3579-3580	a	
13-43	3581-3585	high	
13-44	3586-3603	wal_keep_segments	
13-45	3604-3611	setting	
13-46	3611-3612	.	
13-47	3613-3615	It	
13-48	3616-3622	should	
13-49	3623-3627	also	
13-50	3628-3630	be	
13-51	3631-3636	noted	
13-52	3637-3641	that	
13-53	3642-3652	increasing	
13-54	3653-3657	this	
13-55	3658-3667	parameter	
13-56	3668-3671	can	
13-57	3672-3680	increase	
13-58	3681-3684	the	
13-59	3685-3691	amount	
13-60	3692-3694	of	
13-61	3695-3699	time	
13-62	3700-3706	needed	
13-63	3707-3710	for	
13-64	3711-3716	crash	
13-65	3717-3725	recovery	
13-66	3725-3726	.	
13-67	3726-3727	 	
13-68	3727-3730	The	
13-69	3731-3738	default	
13-70	3739-3744	value	
13-71	3745-3747	is	
13-72	3748-3751	1GB	
13-73	3752-3753	(	
13-74	3753-3757	1024	
13-75	3758-3760	MB	
13-76	3760-3761	)	
13-77	3761-3762	.	

#Text=As discussed in previous posts, the default configuration values for PostgreSQL are typically conservative, so as to work equally well on a large server as it would on a small, resource-constrained development machine. Because of this, it's likely that the default value observed here for max_wal_size is too low for the system generating the error messages we've seen. Identifying the Issue Next, let's look at why this low value for max_wal_size might be the related to the cause of the issue.
14-1	3763-3765	As	
14-2	3766-3775	discussed	
14-3	3776-3778	in	
14-4	3779-3787	previous	
14-5	3788-3793	posts	
14-6	3793-3794	,	
14-7	3795-3798	the	
14-8	3799-3806	default	
14-9	3807-3820	configuration	
14-10	3821-3827	values	
14-11	3828-3831	for	
14-12	3832-3842	PostgreSQL	
14-13	3843-3846	are	
14-14	3847-3856	typically	
14-15	3857-3869	conservative	
14-16	3869-3870	,	
14-17	3871-3873	so	
14-18	3874-3876	as	
14-19	3877-3879	to	
14-20	3880-3884	work	
14-21	3885-3892	equally	
14-22	3893-3897	well	
14-23	3898-3900	on	
14-24	3901-3902	a	
14-25	3903-3908	large	
14-26	3909-3915	server	
14-27	3916-3918	as	
14-28	3919-3921	it	
14-29	3922-3927	would	
14-30	3928-3930	on	
14-31	3931-3932	a	
14-32	3933-3938	small	
14-33	3938-3939	,	
14-34	3940-3960	resource-constrained	
14-35	3961-3972	development	
14-36	3973-3980	machine	
14-37	3980-3981	.	
14-38	3982-3989	Because	
14-39	3990-3992	of	
14-40	3993-3997	this	
14-41	3997-3998	,	
14-42	3999-4003	it's	
14-43	4004-4010	likely	
14-44	4011-4015	that	
14-45	4016-4019	the	
14-46	4020-4027	default	
14-47	4028-4033	value	
14-48	4034-4042	observed	
14-49	4043-4047	here	
14-50	4048-4051	for	
14-51	4052-4064	max_wal_size	
14-52	4065-4067	is	
14-53	4068-4071	too	
14-54	4072-4075	low	
14-55	4076-4079	for	
14-56	4080-4083	the	
14-57	4084-4090	system	
14-58	4091-4101	generating	
14-59	4102-4105	the	
14-60	4106-4111	error	
14-61	4112-4120	messages	
14-62	4121-4126	we've	
14-63	4127-4131	seen	
14-64	4131-4132	.	
14-65	4133-4144	Identifying	
14-66	4145-4148	the	
14-67	4149-4154	Issue	
14-68	4155-4159	Next	
14-69	4159-4160	,	
14-70	4161-4166	let's	
14-71	4167-4171	look	
14-72	4172-4174	at	
14-73	4175-4178	why	
14-74	4179-4183	this	
14-75	4184-4187	low	
14-76	4188-4193	value	
14-77	4194-4197	for	
14-78	4198-4210	max_wal_size	
14-79	4211-4216	might	
14-80	4217-4219	be	
14-81	4220-4223	the	
14-82	4224-4231	related	
14-83	4232-4234	to	
14-84	4235-4238	the	
14-85	4239-4244	cause	
14-86	4245-4247	of	
14-87	4248-4251	the	
14-88	4252-4257	issue	
14-89	4257-4258	.	

#Text=Obviously, the exact cause for this issue will vary from one situation to another, but generally speaking, when max_wal_size is low, and the database has a high number of updates or inserts happening quickly, it will tend to generate WAL faster than it can be archived, and faster than standard checkpoint processes can keep up. As a result, if you have disk usage monitoring on your Postgres instance (you should!) you may also observe that the pg_wal directory increases in size dramatically as these WAL files are retained. A brief aside:
15-1	4259-4268	Obviously	
15-2	4268-4269	,	
15-3	4270-4273	the	
15-4	4274-4279	exact	
15-5	4280-4285	cause	
15-6	4286-4289	for	
15-7	4290-4294	this	
15-8	4295-4300	issue	
15-9	4301-4305	will	
15-10	4306-4310	vary	
15-11	4311-4315	from	
15-12	4316-4319	one	
15-13	4320-4329	situation	
15-14	4330-4332	to	
15-15	4333-4340	another	
15-16	4340-4341	,	
15-17	4342-4345	but	
15-18	4346-4355	generally	
15-19	4356-4364	speaking	
15-20	4364-4365	,	
15-21	4366-4370	when	
15-22	4371-4383	max_wal_size	
15-23	4384-4386	is	
15-24	4387-4390	low	
15-25	4390-4391	,	
15-26	4392-4395	and	
15-27	4396-4399	the	
15-28	4400-4408	database	
15-29	4409-4412	has	
15-30	4413-4414	a	
15-31	4415-4419	high	
15-32	4420-4426	number	
15-33	4427-4429	of	
15-34	4430-4437	updates	
15-35	4438-4440	or	
15-36	4441-4448	inserts	
15-37	4449-4458	happening	
15-38	4459-4466	quickly	
15-39	4466-4467	,	
15-40	4468-4470	it	
15-41	4471-4475	will	
15-42	4476-4480	tend	
15-43	4481-4483	to	
15-44	4484-4492	generate	
15-45	4493-4496	WAL	
15-46	4497-4503	faster	
15-47	4504-4508	than	
15-48	4509-4511	it	
15-49	4512-4515	can	
15-50	4516-4518	be	
15-51	4519-4527	archived	
15-52	4527-4528	,	
15-53	4529-4532	and	
15-54	4533-4539	faster	
15-55	4540-4544	than	
15-56	4545-4553	standard	
15-57	4554-4564	checkpoint	
15-58	4565-4574	processes	
15-59	4575-4578	can	
15-60	4579-4583	keep	
15-61	4584-4586	up	
15-62	4586-4587	.	
15-63	4588-4590	As	
15-64	4591-4592	a	
15-65	4593-4599	result	
15-66	4599-4600	,	
15-67	4601-4603	if	
15-68	4604-4607	you	
15-69	4608-4612	have	
15-70	4613-4617	disk	
15-71	4618-4623	usage	
15-72	4624-4634	monitoring	
15-73	4635-4637	on	
15-74	4638-4642	your	
15-75	4643-4651	Postgres	
15-76	4652-4660	instance	
15-77	4661-4662	(	
15-78	4662-4665	you	
15-79	4666-4672	should	
15-80	4672-4673	!	
15-81	4673-4674	)	
15-82	4675-4678	you	
15-83	4679-4682	may	
15-84	4683-4687	also	
15-85	4688-4695	observe	
15-86	4696-4700	that	
15-87	4701-4704	the	
15-88	4705-4711	pg_wal	
15-89	4712-4721	directory	
15-90	4722-4731	increases	
15-91	4732-4734	in	
15-92	4735-4739	size	
15-93	4740-4752	dramatically	
15-94	4753-4755	as	
15-95	4756-4761	these	
15-96	4762-4765	WAL	
15-97	4766-4771	files	
15-98	4772-4775	are	
15-99	4776-4784	retained	
15-100	4784-4785	.	
15-101	4786-4787	A	
15-102	4788-4793	brief	
15-103	4794-4799	aside	
15-104	4799-4800	:	

#Text=There's a partner parameter for max_wal_size, which is it's opposite: min_wal_size. The parameter for min_wal_size defines the minimum size to shrink the WAL. As long as WAL disk usage stays below this setting while archiving, old WAL files are always recycled for future use at a checkpoint, rather than removed. This is useful to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. The default value for this is 80 MB. How to Resolve PostgreSQL helpfully informs us in the log file specifically what should be done: Increase the max_wal_size. So, as suggested, edit the instance configuration files to increase the max_wal_size value to match the system's work load.
16-1	4801-4808	There's	
16-2	4809-4810	a	
16-3	4811-4818	partner	
16-4	4819-4828	parameter	
16-5	4829-4832	for	
16-6	4833-4845	max_wal_size	
16-7	4845-4846	,	
16-8	4847-4852	which	
16-9	4853-4855	is	
16-10	4856-4860	it's	
16-11	4861-4869	opposite	
16-12	4869-4870	:	
16-13	4871-4883	min_wal_size	
16-14	4883-4884	.	
16-15	4885-4888	The	
16-16	4889-4898	parameter	
16-17	4899-4902	for	
16-18	4903-4915	min_wal_size	
16-19	4916-4923	defines	
16-20	4924-4927	the	
16-21	4928-4935	minimum	
16-22	4936-4940	size	
16-23	4941-4943	to	
16-24	4944-4950	shrink	
16-25	4951-4954	the	
16-26	4955-4958	WAL	
16-27	4958-4959	.	
16-28	4960-4962	As	
16-29	4963-4967	long	
16-30	4968-4970	as	
16-31	4971-4974	WAL	
16-32	4975-4979	disk	
16-33	4980-4985	usage	
16-34	4986-4991	stays	
16-35	4992-4997	below	
16-36	4998-5002	this	
16-37	5003-5010	setting	
16-38	5011-5016	while	
16-39	5017-5026	archiving	
16-40	5026-5027	,	
16-41	5028-5031	old	
16-42	5032-5035	WAL	
16-43	5036-5041	files	
16-44	5042-5045	are	
16-45	5046-5052	always	
16-46	5053-5061	recycled	
16-47	5062-5065	for	
16-48	5066-5072	future	
16-49	5073-5076	use	
16-50	5077-5079	at	
16-51	5080-5081	a	
16-52	5082-5092	checkpoint	
16-53	5092-5093	,	
16-54	5094-5100	rather	
16-55	5101-5105	than	
16-56	5106-5113	removed	
16-57	5113-5114	.	
16-58	5115-5119	This	
16-59	5120-5122	is	
16-60	5123-5129	useful	
16-61	5130-5132	to	
16-62	5133-5139	ensure	
16-63	5140-5144	that	
16-64	5145-5151	enough	
16-65	5152-5155	WAL	
16-66	5156-5161	space	
16-67	5162-5164	is	
16-68	5165-5173	reserved	
16-69	5174-5176	to	
16-70	5177-5183	handle	
16-71	5184-5190	spikes	
16-72	5191-5193	in	
16-73	5194-5197	WAL	
16-74	5198-5203	usage	
16-75	5203-5204	,	
16-76	5205-5208	for	
16-77	5209-5216	example	
16-78	5217-5221	when	
16-79	5222-5229	running	
16-80	5230-5235	large	
16-81	5236-5241	batch	
16-82	5242-5246	jobs	
16-83	5246-5247	.	
16-84	5248-5251	The	
16-85	5252-5259	default	
16-86	5260-5265	value	
16-87	5266-5269	for	
16-88	5270-5274	this	
16-89	5275-5277	is	
16-90	5278-5280	80	
16-91	5281-5283	MB	
16-92	5283-5284	.	
16-93	5285-5288	How	
16-94	5289-5291	to	
16-95	5292-5299	Resolve	
16-96	5300-5310	PostgreSQL	
16-97	5311-5320	helpfully	
16-98	5321-5328	informs	
16-99	5329-5331	us	
16-100	5332-5334	in	
16-101	5335-5338	the	
16-102	5339-5342	log	
16-103	5343-5347	file	
16-104	5348-5360	specifically	
16-105	5361-5365	what	
16-106	5366-5372	should	
16-107	5373-5375	be	
16-108	5376-5380	done	
16-109	5380-5381	:	
16-110	5382-5390	Increase	
16-111	5391-5394	the	
16-112	5395-5407	max_wal_size	
16-113	5407-5408	.	
16-114	5409-5411	So	
16-115	5411-5412	,	
16-116	5413-5415	as	
16-117	5416-5425	suggested	
16-118	5425-5426	,	
16-119	5427-5431	edit	
16-120	5432-5435	the	
16-121	5436-5444	instance	
16-122	5445-5458	configuration	
16-123	5459-5464	files	
16-124	5465-5467	to	
16-125	5468-5476	increase	
16-126	5477-5480	the	
16-127	5481-5493	max_wal_size	
16-128	5494-5499	value	
16-129	5500-5502	to	
16-130	5503-5508	match	
16-131	5509-5512	the	
16-132	5513-5521	system's	
16-133	5522-5526	work	
16-134	5527-5531	load	
16-135	5531-5532	.	

#Text=The ideal value, for most use cases, is to increase the value for max_wal_size such that it can hold at least one hour's worth of logs. The caveat here, however, is that you do not want to set this value extremely high, as it can increase the amount of time needed for crash recovery. If desired, the min_wal_size can also be increased, so that the system can handle spikes in WAL usage during batch jobs and other unusual circumstances. After making the appropriate configuration changes, and reloading Postgres, we can validate that the new settings are applied, as we expect: name setting ------------------------------+----------- checkpoint_completion_target | 0.9
17-1	5533-5536	The	
17-2	5537-5542	ideal	
17-3	5543-5548	value	
17-4	5548-5549	,	
17-5	5550-5553	for	
17-6	5554-5558	most	
17-7	5559-5562	use	
17-8	5563-5568	cases	
17-9	5568-5569	,	
17-10	5570-5572	is	
17-11	5573-5575	to	
17-12	5576-5584	increase	
17-13	5585-5588	the	
17-14	5589-5594	value	
17-15	5595-5598	for	
17-16	5599-5611	max_wal_size	
17-17	5612-5616	such	
17-18	5617-5621	that	
17-19	5622-5624	it	
17-20	5625-5628	can	
17-21	5629-5633	hold	
17-22	5634-5636	at	
17-23	5637-5642	least	
17-24	5643-5646	one	
17-25	5647-5653	hour's	
17-26	5654-5659	worth	
17-27	5660-5662	of	
17-28	5663-5667	logs	
17-29	5667-5668	.	
17-30	5669-5672	The	
17-31	5673-5679	caveat	
17-32	5680-5684	here	
17-33	5684-5685	,	
17-34	5686-5693	however	
17-35	5693-5694	,	
17-36	5695-5697	is	
17-37	5698-5702	that	
17-38	5703-5706	you	
17-39	5707-5709	do	
17-40	5710-5713	not	
17-41	5714-5718	want	
17-42	5719-5721	to	
17-43	5722-5725	set	
17-44	5726-5730	this	
17-45	5731-5736	value	
17-46	5737-5746	extremely	
17-47	5747-5751	high	
17-48	5751-5752	,	
17-49	5753-5755	as	
17-50	5756-5758	it	
17-51	5759-5762	can	
17-52	5763-5771	increase	
17-53	5772-5775	the	
17-54	5776-5782	amount	
17-55	5783-5785	of	
17-56	5786-5790	time	
17-57	5791-5797	needed	
17-58	5798-5801	for	
17-59	5802-5807	crash	
17-60	5808-5816	recovery	
17-61	5816-5817	.	
17-62	5818-5820	If	
17-63	5821-5828	desired	
17-64	5828-5829	,	
17-65	5830-5833	the	
17-66	5834-5846	min_wal_size	
17-67	5847-5850	can	
17-68	5851-5855	also	
17-69	5856-5858	be	
17-70	5859-5868	increased	
17-71	5868-5869	,	
17-72	5870-5872	so	
17-73	5873-5877	that	
17-74	5878-5881	the	
17-75	5882-5888	system	
17-76	5889-5892	can	
17-77	5893-5899	handle	
17-78	5900-5906	spikes	
17-79	5907-5909	in	
17-80	5910-5913	WAL	
17-81	5914-5919	usage	
17-82	5920-5926	during	
17-83	5927-5932	batch	
17-84	5933-5937	jobs	
17-85	5938-5941	and	
17-86	5942-5947	other	
17-87	5948-5955	unusual	
17-88	5956-5969	circumstances	
17-89	5969-5970	.	
17-90	5971-5976	After	
17-91	5977-5983	making	
17-92	5984-5987	the	
17-93	5988-5999	appropriate	
17-94	6000-6013	configuration	
17-95	6014-6021	changes	
17-96	6021-6022	,	
17-97	6023-6026	and	
17-98	6027-6036	reloading	
17-99	6037-6045	Postgres	
17-100	6045-6046	,	
17-101	6047-6049	we	
17-102	6050-6053	can	
17-103	6054-6062	validate	
17-104	6063-6067	that	
17-105	6068-6071	the	
17-106	6072-6075	new	
17-107	6076-6084	settings	
17-108	6085-6088	are	
17-109	6089-6096	applied	
17-110	6096-6097	,	
17-111	6098-6100	as	
17-112	6101-6103	we	
17-113	6104-6110	expect	
17-114	6110-6111	:	
17-115	6112-6116	name	
17-116	6117-6124	setting	
17-117	6125-6126	-	
17-118	6126-6127	-	
17-119	6127-6128	-	
17-120	6128-6129	-	
17-121	6129-6130	-	
17-122	6130-6131	-	
17-123	6131-6132	-	
17-124	6132-6133	-	
17-125	6133-6134	-	
17-126	6134-6135	-	
17-127	6135-6136	-	
17-128	6136-6137	-	
17-129	6137-6138	-	
17-130	6138-6139	-	
17-131	6139-6140	-	
17-132	6140-6141	-	
17-133	6141-6142	-	
17-134	6142-6143	-	
17-135	6143-6144	-	
17-136	6144-6145	-	
17-137	6145-6146	-	
17-138	6146-6147	-	
17-139	6147-6148	-	
17-140	6148-6149	-	
17-141	6149-6150	-	
17-142	6150-6151	-	
17-143	6151-6152	-	
17-144	6152-6153	-	
17-145	6153-6154	-	
17-146	6154-6155	-	
17-147	6155-6156	+	
17-148	6156-6157	-	
17-149	6157-6158	-	
17-150	6158-6159	-	
17-151	6159-6160	-	
17-152	6160-6161	-	
17-153	6161-6162	-	
17-154	6162-6163	-	
17-155	6163-6164	-	
17-156	6164-6165	-	
17-157	6165-6166	-	
17-158	6166-6167	-	
17-159	6168-6196	checkpoint_completion_target	
17-160	6197-6198	|	
17-161	6199-6202	0.9	

#Text=checkpoint_flush_after | 32 checkpoint_timeout | 300 checkpoint_warning | 30 log_checkpoints | off max_wal_size | 16384 min_wal_size | 4096
18-1	6203-6225	checkpoint_flush_after	
18-2	6226-6227	|	
18-3	6228-6230	32	
18-4	6231-6249	checkpoint_timeout	
18-5	6250-6251	|	
18-6	6252-6255	300	
18-7	6256-6274	checkpoint_warning	
18-8	6275-6276	|	
18-9	6277-6279	30	
18-10	6280-6295	log_checkpoints	
18-11	6296-6297	|	
18-12	6298-6301	off	
18-13	6302-6314	max_wal_size	
18-14	6315-6316	|	
18-15	6317-6322	16384	
18-16	6323-6335	min_wal_size	
18-17	6336-6337	|	
18-18	6338-6342	4096	

#Text=(7 rows) With these new settings in place, and with careful monitoring of the log files and system usage, the growing pains of scaling a system such as this up from a development device to a full-fledged production instance will be all but a distant memory.
19-1	6343-6344	(	
19-2	6344-6345	7	
19-3	6346-6350	rows	
19-4	6350-6351	)	
19-5	6352-6356	With	
19-6	6357-6362	these	
19-7	6363-6366	new	
19-8	6367-6375	settings	
19-9	6376-6378	in	
19-10	6379-6384	place	
19-11	6384-6385	,	
19-12	6386-6389	and	
19-13	6390-6394	with	
19-14	6395-6402	careful	
19-15	6403-6413	monitoring	
19-16	6414-6416	of	
19-17	6417-6420	the	
19-18	6421-6424	log	
19-19	6425-6430	files	
19-20	6431-6434	and	
19-21	6435-6441	system	
19-22	6442-6447	usage	
19-23	6447-6448	,	
19-24	6449-6452	the	
19-25	6453-6460	growing	
19-26	6461-6466	pains	
19-27	6467-6469	of	
19-28	6470-6477	scaling	
19-29	6478-6479	a	
19-30	6480-6486	system	
19-31	6487-6491	such	
19-32	6492-6494	as	
19-33	6495-6499	this	
19-34	6500-6502	up	
19-35	6503-6507	from	
19-36	6508-6509	a	
19-37	6510-6521	development	
19-38	6522-6528	device	
19-39	6529-6531	to	
19-40	6532-6533	a	
19-41	6534-6546	full-fledged	
19-42	6547-6557	production	
19-43	6558-6566	instance	
19-44	6567-6571	will	
19-45	6572-6574	be	
19-46	6575-6578	all	
19-47	6579-6582	but	
19-48	6583-6584	a	
19-49	6585-6592	distant	
19-50	6593-6599	memory	
19-51	6599-6600	.	

#Text=For more information, and some interactive workshops on configuring PostgreSQL settings, please visit the Crunchy Postgres Developer Portal. Tweet PostgreSQL Monitoring for App Developers: Alerts & Troubleshooting Online Upgrades in Postgres Like what you're reading? Stay informed by subscribing for our newsletter! Newsletter
20-1	6601-6604	For	
20-2	6605-6609	more	
20-3	6610-6621	information	
20-4	6621-6622	,	
20-5	6623-6626	and	
20-6	6627-6631	some	
20-7	6632-6643	interactive	
20-8	6644-6653	workshops	
20-9	6654-6656	on	
20-10	6657-6668	configuring	
20-11	6669-6679	PostgreSQL	
20-12	6680-6688	settings	
20-13	6688-6689	,	
20-14	6690-6696	please	
20-15	6697-6702	visit	
20-16	6703-6706	the	
20-17	6707-6714	Crunchy	
20-18	6715-6723	Postgres	
20-19	6724-6733	Developer	
20-20	6734-6740	Portal	
20-21	6740-6741	.	
20-22	6742-6747	Tweet	
20-23	6748-6758	PostgreSQL	
20-24	6759-6769	Monitoring	
20-25	6770-6773	for	
20-26	6774-6777	App	
20-27	6778-6788	Developers	
20-28	6788-6789	:	
20-29	6790-6796	Alerts	
20-30	6797-6798	&	
20-31	6799-6814	Troubleshooting	
20-32	6815-6821	Online	
20-33	6822-6830	Upgrades	
20-34	6831-6833	in	
20-35	6834-6842	Postgres	
20-36	6843-6847	Like	
20-37	6848-6852	what	
20-38	6853-6859	you're	
20-39	6860-6867	reading	
20-40	6867-6868	?	
20-41	6869-6873	Stay	
20-42	6874-6882	informed	
20-43	6883-6885	by	
20-44	6886-6897	subscribing	
20-45	6898-6901	for	
20-46	6902-6905	our	
20-47	6906-6916	newsletter	
20-48	6916-6917	!	
20-49	6918-6928	Newsletter	

#Text=Like what you're reading? Stay informed by subscribing for our newsletter! Read More Crunchy News Privacy Policy © 2018-2021 Crunchy Data Solutions, Inc. Products Crunchy Bridge Crunchy PostgreSQL for Kubernetes Crunchy High Availability PostgreSQL
21-1	6929-6933	Like	
21-2	6934-6938	what	
21-3	6939-6945	you're	
21-4	6946-6953	reading	
21-5	6953-6954	?	
21-6	6955-6959	Stay	
21-7	6960-6968	informed	
21-8	6969-6971	by	
21-9	6972-6983	subscribing	
21-10	6984-6987	for	
21-11	6988-6991	our	
21-12	6992-7002	newsletter	
21-13	7002-7003	!	
21-14	7004-7008	Read	
21-15	7009-7013	More	
21-16	7014-7021	Crunchy	
21-17	7022-7026	News	
21-18	7027-7034	Privacy	
21-19	7035-7041	Policy	
21-20	7042-7043	©	
21-21	7044-7048	2018	
21-22	7048-7049	-	
21-23	7049-7053	2021	
21-24	7054-7061	Crunchy	
21-25	7062-7066	Data	
21-26	7067-7076	Solutions	
21-27	7076-7077	,	
21-28	7078-7081	Inc	
21-29	7081-7082	.	
21-30	7083-7091	Products	
21-31	7092-7099	Crunchy	
21-32	7100-7106	Bridge	
21-33	7107-7114	Crunchy	
21-34	7115-7125	PostgreSQL	
21-35	7126-7129	for	
21-36	7130-7140	Kubernetes	
21-37	7141-7148	Crunchy	
21-38	7149-7153	High	
21-39	7154-7166	Availability	
21-40	7167-7177	PostgreSQL	

#Text=Crunchy Certified PostgreSQL Crunchy PostgreSQL for Cloud Foundry Crunchy MLS PostgreSQL Crunchy Spatial Services & Support Enterprise PostgreSQL Support Red Hat Partner Trusted PostgreSQL Crunchy Data Subscription
22-1	7178-7185	Crunchy	
22-2	7186-7195	Certified	
22-3	7196-7206	PostgreSQL	
22-4	7207-7214	Crunchy	
22-5	7215-7225	PostgreSQL	
22-6	7226-7229	for	
22-7	7230-7235	Cloud	
22-8	7236-7243	Foundry	
22-9	7244-7251	Crunchy	
22-10	7252-7255	MLS	
22-11	7256-7266	PostgreSQL	
22-12	7267-7274	Crunchy	
22-13	7275-7282	Spatial	
22-14	7283-7291	Services	
22-15	7292-7293	&	
22-16	7294-7301	Support	
22-17	7302-7312	Enterprise	
22-18	7313-7323	PostgreSQL	
22-19	7324-7331	Support	
22-20	7332-7335	Red	
22-21	7336-7339	Hat	
22-22	7340-7347	Partner	
22-23	7348-7355	Trusted	
22-24	7356-7366	PostgreSQL	
22-25	7367-7374	Crunchy	
22-26	7375-7379	Data	
22-27	7380-7392	Subscription	

#Text=Resources Customer Portal Software Documentation Blog Events Videos DISA STIG for PostgreSQL CIS Benchmark for PostgreSQL Company About Crunchy Data News Careers
23-1	7393-7402	Resources	
23-2	7403-7411	Customer	
23-3	7412-7418	Portal	
23-4	7419-7427	Software	
23-5	7428-7441	Documentation	
23-6	7442-7446	Blog	
23-7	7447-7453	Events	
23-8	7454-7460	Videos	
23-9	7461-7465	DISA	
23-10	7466-7470	STIG	
23-11	7471-7474	for	
23-12	7475-7485	PostgreSQL	
23-13	7486-7489	CIS	
23-14	7490-7499	Benchmark	
23-15	7500-7503	for	
23-16	7504-7514	PostgreSQL	
23-17	7515-7522	Company	
23-18	7523-7528	About	
23-19	7529-7536	Crunchy	
23-20	7537-7541	Data	
23-21	7542-7546	News	
23-22	7547-7554	Careers	
