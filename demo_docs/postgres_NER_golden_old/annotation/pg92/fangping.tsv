#FORMAT=WebAnno TSV 3.3
#T_SP=custom.Span|label
#T_RL=custom.Relation|label|BT_custom.Span


#Text=WAL in PostgreSQL: 4. Setup and Tuning / Postgres Professional corporate blog / Habr How to become an author All streams Development Administrating Design Management Marketing PopSci
1-1	0-3	WAL	_	_	_	
1-2	4-6	in	_	_	_	
1-3	7-17	PostgreSQL	_	_	_	
1-4	17-18	:	_	_	_	
1-5	19-20	4	_	_	_	
1-6	20-21	.	_	_	_	
1-7	22-27	Setup	_	_	_	
1-8	28-31	and	_	_	_	
1-9	32-38	Tuning	_	_	_	
1-10	39-40	/	_	_	_	
1-11	41-49	Postgres	_	_	_	
1-12	50-62	Professional	_	_	_	
1-13	63-72	corporate	_	_	_	
1-14	73-77	blog	_	_	_	
1-15	78-79	/	_	_	_	
1-16	80-84	Habr	_	_	_	
1-17	85-88	How	_	_	_	
1-18	89-91	to	_	_	_	
1-19	92-98	become	_	_	_	
1-20	99-101	an	_	_	_	
1-21	102-108	author	_	_	_	
1-22	109-112	All	_	_	_	
1-23	113-120	streams	_	_	_	
1-24	121-132	Development	_	_	_	
1-25	133-147	Administrating	_	_	_	
1-26	148-154	Design	_	_	_	
1-27	155-165	Management	_	_	_	
1-28	166-175	Marketing	_	_	_	
1-29	176-182	PopSci	_	_	_	

#Text=Log in Sign up 135.40 Rating Postgres Professional Разработчик СУБД Postgres Pro erogov April 16, 2020 at 03:05 PM
2-1	183-186	Log	_	_	_	
2-2	187-189	in	_	_	_	
2-3	190-194	Sign	_	_	_	
2-4	195-197	up	_	_	_	
2-5	198-204	135.40	_	_	_	
2-6	205-211	Rating	_	_	_	
2-7	212-220	Postgres	_	_	_	
2-8	221-233	Professional	_	_	_	
2-9	234-245	Разработчик	_	_	_	
2-10	246-250	СУБД	_	_	_	
2-11	251-259	Postgres	_	_	_	
2-12	260-263	Pro	_	_	_	
2-13	264-270	erogov	_	_	_	
2-14	271-276	April	_	_	_	
2-15	277-279	16	_	_	_	
2-16	279-280	,	_	_	_	
2-17	281-285	2020	_	_	_	
2-18	286-288	at	_	_	_	
2-19	289-291	03	_	_	_	
2-20	291-292	:	_	_	_	
2-21	292-294	05	_	_	_	
2-22	295-297	PM	_	_	_	

#Text=WAL in PostgreSQL: 4. Setup and Tuning Original author: Egor Rogov Postgres Professional corporate blog, PostgreSQL, SQL Translation
3-1	298-301	WAL	_	_	_	
3-2	302-304	in	_	_	_	
3-3	305-315	PostgreSQL	_	_	_	
3-4	315-316	:	_	_	_	
3-5	317-318	4	_	_	_	
3-6	318-319	.	_	_	_	
3-7	320-325	Setup	_	_	_	
3-8	326-329	and	_	_	_	
3-9	330-336	Tuning	_	_	_	
3-10	337-345	Original	_	_	_	
3-11	346-352	author	_	_	_	
3-12	352-353	:	_	_	_	
3-13	354-358	Egor	_	_	_	
3-14	359-364	Rogov	_	_	_	
3-15	365-373	Postgres	_	_	_	
3-16	374-386	Professional	_	_	_	
3-17	387-396	corporate	_	_	_	
3-18	397-401	blog	_	_	_	
3-19	401-402	,	_	_	_	
3-20	403-413	PostgreSQL	_	_	_	
3-21	413-414	,	_	_	_	
3-22	415-418	SQL	_	_	_	
3-23	419-430	Translation	_	_	_	

#Text=So, we got acquainted with the structure of the buffer cache and in this context concluded that if all the RAM contents got lost due to failure, the write-ahead log (WAL) was required to recover. The size of the necessary WAL files and the recovery time are limited thanks to the checkpoint performed from time to time. In the previous articles we already reviewed quite a few important settings that anyway relate to WAL. In this article (being the last in this series) we will discuss problems of WAL setup that are unaddressed yet: WAL levels and their purpose, as well as the reliability and performance of write-ahead logging.
4-1	431-433	So	_	_	_	
4-2	433-434	,	_	_	_	
4-3	435-437	we	_	_	_	
4-4	438-441	got	_	_	_	
4-5	442-452	acquainted	_	_	_	
4-6	453-457	with	_	_	_	
4-7	458-461	the	_	_	_	
4-8	462-471	structure	_	_	_	
4-9	472-474	of	_	_	_	
4-10	475-478	the	_	_	_	
4-11	479-485	buffer	_	_	_	
4-12	486-491	cache	_	_	_	
4-13	492-495	and	_	_	_	
4-14	496-498	in	_	_	_	
4-15	499-503	this	_	_	_	
4-16	504-511	context	_	_	_	
4-17	512-521	concluded	_	_	_	
4-18	522-526	that	_	_	_	
4-19	527-529	if	_	_	_	
4-20	530-533	all	_	_	_	
4-21	534-537	the	_	_	_	
4-22	538-541	RAM	_	_	_	
4-23	542-550	contents	_	_	_	
4-24	551-554	got	_	_	_	
4-25	555-559	lost	_	_	_	
4-26	560-563	due	_	_	_	
4-27	564-566	to	_	_	_	
4-28	567-574	failure	_	_	_	
4-29	574-575	,	_	_	_	
4-30	576-579	the	_	_	_	
4-31	580-591	write-ahead	_	_	_	
4-32	592-595	log	_	_	_	
4-33	596-597	(	_	_	_	
4-34	597-600	WAL	_	_	_	
4-35	600-601	)	_	_	_	
4-36	602-605	was	_	_	_	
4-37	606-614	required	_	_	_	
4-38	615-617	to	_	_	_	
4-39	618-625	recover	_	_	_	
4-40	625-626	.	_	_	_	
4-41	627-630	The	_	_	_	
4-42	631-635	size	_	_	_	
4-43	636-638	of	_	_	_	
4-44	639-642	the	_	_	_	
4-45	643-652	necessary	_	_	_	
4-46	653-656	WAL	_	_	_	
4-47	657-662	files	_	_	_	
4-48	663-666	and	_	_	_	
4-49	667-670	the	_	_	_	
4-50	671-679	recovery	_	_	_	
4-51	680-684	time	_	_	_	
4-52	685-688	are	_	_	_	
4-53	689-696	limited	_	_	_	
4-54	697-703	thanks	_	_	_	
4-55	704-706	to	_	_	_	
4-56	707-710	the	_	_	_	
4-57	711-721	checkpoint	_	_	_	
4-58	722-731	performed	_	_	_	
4-59	732-736	from	_	_	_	
4-60	737-741	time	_	_	_	
4-61	742-744	to	_	_	_	
4-62	745-749	time	_	_	_	
4-63	749-750	.	_	_	_	
4-64	751-753	In	_	_	_	
4-65	754-757	the	_	_	_	
4-66	758-766	previous	_	_	_	
4-67	767-775	articles	_	_	_	
4-68	776-778	we	_	_	_	
4-69	779-786	already	_	_	_	
4-70	787-795	reviewed	_	_	_	
4-71	796-801	quite	_	_	_	
4-72	802-803	a	_	_	_	
4-73	804-807	few	_	_	_	
4-74	808-817	important	_	_	_	
4-75	818-826	settings	_	_	_	
4-76	827-831	that	_	_	_	
4-77	832-838	anyway	_	_	_	
4-78	839-845	relate	_	_	_	
4-79	846-848	to	_	_	_	
4-80	849-852	WAL	_	_	_	
4-81	852-853	.	_	_	_	
4-82	854-856	In	_	_	_	
4-83	857-861	this	_	_	_	
4-84	862-869	article	_	_	_	
4-85	870-871	(	_	_	_	
4-86	871-876	being	_	_	_	
4-87	877-880	the	_	_	_	
4-88	881-885	last	_	_	_	
4-89	886-888	in	_	_	_	
4-90	889-893	this	_	_	_	
4-91	894-900	series	_	_	_	
4-92	900-901	)	_	_	_	
4-93	902-904	we	_	_	_	
4-94	905-909	will	_	_	_	
4-95	910-917	discuss	_	_	_	
4-96	918-926	problems	_	_	_	
4-97	927-929	of	_	_	_	
4-98	930-933	WAL	_	_	_	
4-99	934-939	setup	_	_	_	
4-100	940-944	that	_	_	_	
4-101	945-948	are	_	_	_	
4-102	949-960	unaddressed	_	_	_	
4-103	961-964	yet	_	_	_	
4-104	964-965	:	_	_	_	
4-105	966-969	WAL	_	_	_	
4-106	970-976	levels	_	_	_	
4-107	977-980	and	_	_	_	
4-108	981-986	their	_	_	_	
4-109	987-994	purpose	_	_	_	
4-110	994-995	,	_	_	_	
4-111	996-998	as	_	_	_	
4-112	999-1003	well	_	_	_	
4-113	1004-1006	as	_	_	_	
4-114	1007-1010	the	_	_	_	
4-115	1011-1022	reliability	_	_	_	
4-116	1023-1026	and	_	_	_	
4-117	1027-1038	performance	_	_	_	
4-118	1039-1041	of	_	_	_	
4-119	1042-1053	write-ahead	_	_	_	
4-120	1054-1061	logging	_	_	_	
4-121	1061-1062	.	_	_	_	

#Text=WAL levels The main WAL task is to ensure recovery after a failure. But once we have to maintain the log anyway, we can also adapt it to other tasks by adding some more information to it. There are several logging levels. The wal_level parameter specifies the level, and each next level includes everything that gets into WAL of the preceding level plus something new.
5-1	1063-1066	WAL	_	_	_	
5-2	1067-1073	levels	_	_	_	
5-3	1074-1077	The	_	_	_	
5-4	1078-1082	main	_	_	_	
5-5	1083-1086	WAL	_	_	_	
5-6	1087-1091	task	_	_	_	
5-7	1092-1094	is	_	_	_	
5-8	1095-1097	to	_	_	_	
5-9	1098-1104	ensure	_	_	_	
5-10	1105-1113	recovery	_	_	_	
5-11	1114-1119	after	_	_	_	
5-12	1120-1121	a	_	_	_	
5-13	1122-1129	failure	_	_	_	
5-14	1129-1130	.	_	_	_	
5-15	1131-1134	But	_	_	_	
5-16	1135-1139	once	_	_	_	
5-17	1140-1142	we	_	_	_	
5-18	1143-1147	have	_	_	_	
5-19	1148-1150	to	_	_	_	
5-20	1151-1159	maintain	_	_	_	
5-21	1160-1163	the	_	_	_	
5-22	1164-1167	log	_	_	_	
5-23	1168-1174	anyway	_	_	_	
5-24	1174-1175	,	_	_	_	
5-25	1176-1178	we	_	_	_	
5-26	1179-1182	can	_	_	_	
5-27	1183-1187	also	_	_	_	
5-28	1188-1193	adapt	_	_	_	
5-29	1194-1196	it	_	_	_	
5-30	1197-1199	to	_	_	_	
5-31	1200-1205	other	_	_	_	
5-32	1206-1211	tasks	_	_	_	
5-33	1212-1214	by	_	_	_	
5-34	1215-1221	adding	_	_	_	
5-35	1222-1226	some	_	_	_	
5-36	1227-1231	more	_	_	_	
5-37	1232-1243	information	_	_	_	
5-38	1244-1246	to	_	_	_	
5-39	1247-1249	it	_	_	_	
5-40	1249-1250	.	_	_	_	
5-41	1251-1256	There	_	_	_	
5-42	1257-1260	are	_	_	_	
5-43	1261-1268	several	_	_	_	
5-44	1269-1276	logging	_	_	_	
5-45	1277-1283	levels	_	_	_	
5-46	1283-1284	.	_	_	_	
5-47	1285-1288	The	_	_	_	
5-48	1289-1298	wal_level	_	_	_	
5-49	1299-1308	parameter	_	_	_	
5-50	1309-1318	specifies	_	_	_	
5-51	1319-1322	the	_	_	_	
5-52	1323-1328	level	_	_	_	
5-53	1328-1329	,	_	_	_	
5-54	1330-1333	and	_	_	_	
5-55	1334-1338	each	_	_	_	
5-56	1339-1343	next	_	_	_	
5-57	1344-1349	level	_	_	_	
5-58	1350-1358	includes	_	_	_	
5-59	1359-1369	everything	_	_	_	
5-60	1370-1374	that	_	_	_	
5-61	1375-1379	gets	_	_	_	
5-62	1380-1384	into	_	_	_	
5-63	1385-1388	WAL	_	_	_	
5-64	1389-1391	of	_	_	_	
5-65	1392-1395	the	_	_	_	
5-66	1396-1405	preceding	_	_	_	
5-67	1406-1411	level	_	_	_	
5-68	1412-1416	plus	_	_	_	
5-69	1417-1426	something	_	_	_	
5-70	1427-1430	new	_	_	_	
5-71	1430-1431	.	_	_	_	

#Text=Minimal
6-1	1432-1439	Minimal	_	_	_	

#Text=The minimum possible level is set by the value of wal_level = minimal and ensures only recovery after a failure. To save space, the operations related to bulk data processing (such as CREATE TABLE AS SELECT or CREATE INDEX) are not WAL-logged. Instead, the data needed are immediately written to disk, and a new object is added to the system catalog and becomes visible at the transaction commit. If a failure occurs while the operation is performed, the data that are already written remain invisible and do not violate the consistency rules. And if a failure occurs after completion of the operation, everything needed is already on disk and does not need logging. Let's take a look. First we'll set the necessary level (to this end, we will also need to change another parameter — max_wal_senders). => ALTER SYSTEM SET wal_level = minimal;
7-1	1440-1443	The	_	_	_	
7-2	1444-1451	minimum	_	_	_	
7-3	1452-1460	possible	_	_	_	
7-4	1461-1466	level	_	_	_	
7-5	1467-1469	is	_	_	_	
7-6	1470-1473	set	_	_	_	
7-7	1474-1476	by	_	_	_	
7-8	1477-1480	the	_	_	_	
7-9	1481-1486	value	_	_	_	
7-10	1487-1489	of	_	_	_	
7-11	1490-1499	wal_level	_	_	_	
7-12	1500-1501	=	_	_	_	
7-13	1502-1509	minimal	_	_	_	
7-14	1510-1513	and	_	_	_	
7-15	1514-1521	ensures	_	_	_	
7-16	1522-1526	only	_	_	_	
7-17	1527-1535	recovery	_	_	_	
7-18	1536-1541	after	_	_	_	
7-19	1542-1543	a	_	_	_	
7-20	1544-1551	failure	_	_	_	
7-21	1551-1552	.	_	_	_	
7-22	1553-1555	To	_	_	_	
7-23	1556-1560	save	_	_	_	
7-24	1561-1566	space	_	_	_	
7-25	1566-1567	,	_	_	_	
7-26	1568-1571	the	_	_	_	
7-27	1572-1582	operations	_	_	_	
7-28	1583-1590	related	_	_	_	
7-29	1591-1593	to	_	_	_	
7-30	1594-1598	bulk	_	_	_	
7-31	1599-1603	data	_	_	_	
7-32	1604-1614	processing	_	_	_	
7-33	1615-1616	(	_	_	_	
7-34	1616-1620	such	_	_	_	
7-35	1621-1623	as	_	_	_	
7-36	1624-1630	CREATE	_	_	_	
7-37	1631-1636	TABLE	_	_	_	
7-38	1637-1639	AS	_	_	_	
7-39	1640-1646	SELECT	_	_	_	
7-40	1647-1649	or	_	_	_	
7-41	1650-1656	CREATE	_	_	_	
7-42	1657-1662	INDEX	_	_	_	
7-43	1662-1663	)	_	_	_	
7-44	1664-1667	are	_	_	_	
7-45	1668-1671	not	_	_	_	
7-46	1672-1682	WAL-logged	_	_	_	
7-47	1682-1683	.	_	_	_	
7-48	1684-1691	Instead	_	_	_	
7-49	1691-1692	,	_	_	_	
7-50	1693-1696	the	_	_	_	
7-51	1697-1701	data	_	_	_	
7-52	1702-1708	needed	_	_	_	
7-53	1709-1712	are	_	_	_	
7-54	1713-1724	immediately	_	_	_	
7-55	1725-1732	written	_	_	_	
7-56	1733-1735	to	_	_	_	
7-57	1736-1740	disk	_	_	_	
7-58	1740-1741	,	_	_	_	
7-59	1742-1745	and	_	_	_	
7-60	1746-1747	a	_	_	_	
7-61	1748-1751	new	_	_	_	
7-62	1752-1758	object	_	_	_	
7-63	1759-1761	is	_	_	_	
7-64	1762-1767	added	_	_	_	
7-65	1768-1770	to	_	_	_	
7-66	1771-1774	the	_	_	_	
7-67	1775-1781	system	_	_	_	
7-68	1782-1789	catalog	_	_	_	
7-69	1790-1793	and	_	_	_	
7-70	1794-1801	becomes	_	_	_	
7-71	1802-1809	visible	_	_	_	
7-72	1810-1812	at	_	_	_	
7-73	1813-1816	the	_	_	_	
7-74	1817-1828	transaction	_	_	_	
7-75	1829-1835	commit	_	_	_	
7-76	1835-1836	.	_	_	_	
7-77	1837-1839	If	_	_	_	
7-78	1840-1841	a	_	_	_	
7-79	1842-1849	failure	_	_	_	
7-80	1850-1856	occurs	_	_	_	
7-81	1857-1862	while	_	_	_	
7-82	1863-1866	the	_	_	_	
7-83	1867-1876	operation	_	_	_	
7-84	1877-1879	is	_	_	_	
7-85	1880-1889	performed	_	_	_	
7-86	1889-1890	,	_	_	_	
7-87	1891-1894	the	_	_	_	
7-88	1895-1899	data	_	_	_	
7-89	1900-1904	that	_	_	_	
7-90	1905-1908	are	_	_	_	
7-91	1909-1916	already	_	_	_	
7-92	1917-1924	written	_	_	_	
7-93	1925-1931	remain	_	_	_	
7-94	1932-1941	invisible	_	_	_	
7-95	1942-1945	and	_	_	_	
7-96	1946-1948	do	_	_	_	
7-97	1949-1952	not	_	_	_	
7-98	1953-1960	violate	_	_	_	
7-99	1961-1964	the	_	_	_	
7-100	1965-1976	consistency	_	_	_	
7-101	1977-1982	rules	_	_	_	
7-102	1982-1983	.	_	_	_	
7-103	1984-1987	And	_	_	_	
7-104	1988-1990	if	_	_	_	
7-105	1991-1992	a	_	_	_	
7-106	1993-2000	failure	_	_	_	
7-107	2001-2007	occurs	_	_	_	
7-108	2008-2013	after	_	_	_	
7-109	2014-2024	completion	_	_	_	
7-110	2025-2027	of	_	_	_	
7-111	2028-2031	the	_	_	_	
7-112	2032-2041	operation	_	_	_	
7-113	2041-2042	,	_	_	_	
7-114	2043-2053	everything	_	_	_	
7-115	2054-2060	needed	_	_	_	
7-116	2061-2063	is	_	_	_	
7-117	2064-2071	already	_	_	_	
7-118	2072-2074	on	_	_	_	
7-119	2075-2079	disk	_	_	_	
7-120	2080-2083	and	_	_	_	
7-121	2084-2088	does	_	_	_	
7-122	2089-2092	not	_	_	_	
7-123	2093-2097	need	_	_	_	
7-124	2098-2105	logging	_	_	_	
7-125	2105-2106	.	_	_	_	
7-126	2107-2112	Let's	_	_	_	
7-127	2113-2117	take	_	_	_	
7-128	2118-2119	a	_	_	_	
7-129	2120-2124	look	_	_	_	
7-130	2124-2125	.	_	_	_	
7-131	2126-2131	First	_	_	_	
7-132	2132-2137	we'll	_	_	_	
7-133	2138-2141	set	_	_	_	
7-134	2142-2145	the	_	_	_	
7-135	2146-2155	necessary	_	_	_	
7-136	2156-2161	level	_	_	_	
7-137	2162-2163	(	_	_	_	
7-138	2163-2165	to	_	_	_	
7-139	2166-2170	this	_	_	_	
7-140	2171-2174	end	_	_	_	
7-141	2174-2175	,	_	_	_	
7-142	2176-2178	we	_	_	_	
7-143	2179-2183	will	_	_	_	
7-144	2184-2188	also	_	_	_	
7-145	2189-2193	need	_	_	_	
7-146	2194-2196	to	_	_	_	
7-147	2197-2203	change	_	_	_	
7-148	2204-2211	another	_	_	_	
7-149	2212-2221	parameter	_	_	_	
7-150	2221-2222	 	_	_	_	
7-151	2222-2223	—	_	_	_	
7-152	2224-2239	max_wal_senders	_	_	_	
7-153	2239-2240	)	_	_	_	
7-154	2240-2241	.	_	_	_	
7-155	2242-2243	=	_	_	_	
7-156	2243-2244	>	_	_	_	
7-157	2245-2250	ALTER	_	_	_	
7-158	2251-2257	SYSTEM	_	_	_	
7-159	2258-2261	SET	_	_	_	
7-160	2262-2271	wal_level	_	_	_	
7-161	2272-2273	=	_	_	_	
7-162	2274-2281	minimal	_	_	_	
7-163	2281-2282	;	_	_	_	

#Text==> ALTER SYSTEM SET max_wal_senders = 0; student$ sudo pg_ctlcluster 11 main restart Note that the change of the level requires restarting the server. Let's remember the current WAL location: => SELECT pg_current_wal_insert_lsn();
8-1	2283-2284	=	_	_	_	
8-2	2284-2285	>	_	_	_	
8-3	2286-2291	ALTER	_	_	_	
8-4	2292-2298	SYSTEM	_	_	_	
8-5	2299-2302	SET	_	_	_	
8-6	2303-2318	max_wal_senders	PARAM	_	_	
8-7	2319-2320	=	_	_	_	
8-8	2321-2322	0	VALUE	Equal to	8-6	
8-9	2322-2323	;	_	_	_	
8-10	2324-2331	student	_	_	_	
8-11	2331-2332	$	_	_	_	
8-12	2333-2337	sudo	_	_	_	
8-13	2338-2351	pg_ctlcluster	_	_	_	
8-14	2352-2354	11	_	_	_	
8-15	2355-2359	main	_	_	_	
8-16	2360-2367	restart	_	_	_	
8-17	2368-2372	Note	_	_	_	
8-18	2373-2377	that	_	_	_	
8-19	2378-2381	the	_	_	_	
8-20	2382-2388	change	_	_	_	
8-21	2389-2391	of	_	_	_	
8-22	2392-2395	the	_	_	_	
8-23	2396-2401	level	_	_	_	
8-24	2402-2410	requires	_	_	_	
8-25	2411-2421	restarting	_	_	_	
8-26	2422-2425	the	_	_	_	
8-27	2426-2432	server	_	_	_	
8-28	2432-2433	.	_	_	_	
8-29	2434-2439	Let's	_	_	_	
8-30	2440-2448	remember	_	_	_	
8-31	2449-2452	the	_	_	_	
8-32	2453-2460	current	_	_	_	
8-33	2461-2464	WAL	_	_	_	
8-34	2465-2473	location	_	_	_	
8-35	2473-2474	:	_	_	_	
8-36	2475-2476	=	_	_	_	
8-37	2476-2477	>	_	_	_	
8-38	2478-2484	SELECT	_	_	_	
8-39	2485-2510	pg_current_wal_insert_lsn	_	_	_	
8-40	2510-2511	(	_	_	_	
8-41	2511-2512	)	_	_	_	
8-42	2512-2513	;	_	_	_	

#Text=pg_current_wal_insert_lsn --------------------------- 0/353927BC (1 row)
9-1	2514-2539	pg_current_wal_insert_lsn	_	_	_	
9-2	2540-2541	-	_	_	_	
9-3	2541-2542	-	_	_	_	
9-4	2542-2543	-	_	_	_	
9-5	2543-2544	-	_	_	_	
9-6	2544-2545	-	_	_	_	
9-7	2545-2546	-	_	_	_	
9-8	2546-2547	-	_	_	_	
9-9	2547-2548	-	_	_	_	
9-10	2548-2549	-	_	_	_	
9-11	2549-2550	-	_	_	_	
9-12	2550-2551	-	_	_	_	
9-13	2551-2552	-	_	_	_	
9-14	2552-2553	-	_	_	_	
9-15	2553-2554	-	_	_	_	
9-16	2554-2555	-	_	_	_	
9-17	2555-2556	-	_	_	_	
9-18	2556-2557	-	_	_	_	
9-19	2557-2558	-	_	_	_	
9-20	2558-2559	-	_	_	_	
9-21	2559-2560	-	_	_	_	
9-22	2560-2561	-	_	_	_	
9-23	2561-2562	-	_	_	_	
9-24	2562-2563	-	_	_	_	
9-25	2563-2564	-	_	_	_	
9-26	2564-2565	-	_	_	_	
9-27	2565-2566	-	_	_	_	
9-28	2566-2567	-	_	_	_	
9-29	2568-2569	0	_	_	_	
9-30	2569-2570	/	_	_	_	
9-31	2570-2578	353927BC	_	_	_	
9-32	2579-2580	(	_	_	_	
9-33	2580-2581	1	_	_	_	
9-34	2582-2585	row	_	_	_	
9-35	2585-2586	)	_	_	_	

#Text=Now let's perform creation of a table (CREATE TABLE AS SELECT) and remember the WAL location again. The amount of data retrieved by the SELECT operator does not matter at all in this case, so one row is enough. => CREATE TABLE wallevel AS SELECT 1 AS n; => SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn
10-1	2587-2590	Now	_	_	_	
10-2	2591-2596	let's	_	_	_	
10-3	2597-2604	perform	_	_	_	
10-4	2605-2613	creation	_	_	_	
10-5	2614-2616	of	_	_	_	
10-6	2617-2618	a	_	_	_	
10-7	2619-2624	table	_	_	_	
10-8	2625-2626	(	_	_	_	
10-9	2626-2632	CREATE	_	_	_	
10-10	2633-2638	TABLE	_	_	_	
10-11	2639-2641	AS	_	_	_	
10-12	2642-2648	SELECT	_	_	_	
10-13	2648-2649	)	_	_	_	
10-14	2650-2653	and	_	_	_	
10-15	2654-2662	remember	_	_	_	
10-16	2663-2666	the	_	_	_	
10-17	2667-2670	WAL	_	_	_	
10-18	2671-2679	location	_	_	_	
10-19	2680-2685	again	_	_	_	
10-20	2685-2686	.	_	_	_	
10-21	2687-2690	The	_	_	_	
10-22	2691-2697	amount	_	_	_	
10-23	2698-2700	of	_	_	_	
10-24	2701-2705	data	_	_	_	
10-25	2706-2715	retrieved	_	_	_	
10-26	2716-2718	by	_	_	_	
10-27	2719-2722	the	_	_	_	
10-28	2723-2729	SELECT	_	_	_	
10-29	2730-2738	operator	_	_	_	
10-30	2739-2743	does	_	_	_	
10-31	2744-2747	not	_	_	_	
10-32	2748-2754	matter	_	_	_	
10-33	2755-2757	at	_	_	_	
10-34	2758-2761	all	_	_	_	
10-35	2762-2764	in	_	_	_	
10-36	2765-2769	this	_	_	_	
10-37	2770-2774	case	_	_	_	
10-38	2774-2775	,	_	_	_	
10-39	2776-2778	so	_	_	_	
10-40	2779-2782	one	_	_	_	
10-41	2783-2786	row	_	_	_	
10-42	2787-2789	is	_	_	_	
10-43	2790-2796	enough	_	_	_	
10-44	2796-2797	.	_	_	_	
10-45	2798-2799	=	_	_	_	
10-46	2799-2800	>	_	_	_	
10-47	2801-2807	CREATE	_	_	_	
10-48	2808-2813	TABLE	_	_	_	
10-49	2814-2822	wallevel	_	_	_	
10-50	2823-2825	AS	_	_	_	
10-51	2826-2832	SELECT	_	_	_	
10-52	2833-2834	1	_	_	_	
10-53	2835-2837	AS	_	_	_	
10-54	2838-2839	n	_	_	_	
10-55	2839-2840	;	_	_	_	
10-56	2841-2842	=	_	_	_	
10-57	2842-2843	>	_	_	_	
10-58	2844-2850	SELECT	_	_	_	
10-59	2851-2876	pg_current_wal_insert_lsn	_	_	_	
10-60	2876-2877	(	_	_	_	
10-61	2877-2878	)	_	_	_	
10-62	2878-2879	;	_	_	_	
10-63	2880-2905	pg_current_wal_insert_lsn	_	_	_	

#Text=--------------------------- 0/353A7DFC (1 row) Let's look at WAL records using the familiar pg_waldump utility.
11-1	2906-2907	-	_	_	_	
11-2	2907-2908	-	_	_	_	
11-3	2908-2909	-	_	_	_	
11-4	2909-2910	-	_	_	_	
11-5	2910-2911	-	_	_	_	
11-6	2911-2912	-	_	_	_	
11-7	2912-2913	-	_	_	_	
11-8	2913-2914	-	_	_	_	
11-9	2914-2915	-	_	_	_	
11-10	2915-2916	-	_	_	_	
11-11	2916-2917	-	_	_	_	
11-12	2917-2918	-	_	_	_	
11-13	2918-2919	-	_	_	_	
11-14	2919-2920	-	_	_	_	
11-15	2920-2921	-	_	_	_	
11-16	2921-2922	-	_	_	_	
11-17	2922-2923	-	_	_	_	
11-18	2923-2924	-	_	_	_	
11-19	2924-2925	-	_	_	_	
11-20	2925-2926	-	_	_	_	
11-21	2926-2927	-	_	_	_	
11-22	2927-2928	-	_	_	_	
11-23	2928-2929	-	_	_	_	
11-24	2929-2930	-	_	_	_	
11-25	2930-2931	-	_	_	_	
11-26	2931-2932	-	_	_	_	
11-27	2932-2933	-	_	_	_	
11-28	2934-2935	0	_	_	_	
11-29	2935-2936	/	_	_	_	
11-30	2936-2944	353A7DFC	_	_	_	
11-31	2945-2946	(	_	_	_	
11-32	2946-2947	1	_	_	_	
11-33	2948-2951	row	_	_	_	
11-34	2951-2952	)	_	_	_	
11-35	2953-2958	Let's	_	_	_	
11-36	2959-2963	look	_	_	_	
11-37	2964-2966	at	_	_	_	
11-38	2967-2970	WAL	_	_	_	
11-39	2971-2978	records	_	_	_	
11-40	2979-2984	using	_	_	_	
11-41	2985-2988	the	_	_	_	
11-42	2989-2997	familiar	_	_	_	
11-43	2998-3008	pg_waldump	_	_	_	
11-44	3009-3016	utility	_	_	_	
11-45	3016-3017	.	_	_	_	

#Text=postgres$ /usr/lib/postgresql/11/bin/pg_waldump -p /var/lib/postgresql/11/main/pg_wal -s 0/353927BC -e 0/353A7DFC Certainly, some details can differ from one launch to another, but in this case we get the following. The record of the Heap2 manager relates to vacuuming, here it is in-page vacuum of a table from the system catalog (system objects are easily distinguished with a naked eye by a small number in rel):
12-1	3018-3026	postgres	_	_	_	
12-2	3026-3027	$	_	_	_	
12-3	3028-3029	/	_	_	_	
12-4	3029-3032	usr	_	_	_	
12-5	3032-3033	/	_	_	_	
12-6	3033-3036	lib	_	_	_	
12-7	3036-3037	/	_	_	_	
12-8	3037-3047	postgresql	_	_	_	
12-9	3047-3048	/	_	_	_	
12-10	3048-3050	11	_	_	_	
12-11	3050-3051	/	_	_	_	
12-12	3051-3054	bin	_	_	_	
12-13	3054-3055	/	_	_	_	
12-14	3055-3065	pg_waldump	_	_	_	
12-15	3066-3067	-	_	_	_	
12-16	3067-3068	p	_	_	_	
12-17	3069-3070	/	_	_	_	
12-18	3070-3073	var	_	_	_	
12-19	3073-3074	/	_	_	_	
12-20	3074-3077	lib	_	_	_	
12-21	3077-3078	/	_	_	_	
12-22	3078-3088	postgresql	_	_	_	
12-23	3088-3089	/	_	_	_	
12-24	3089-3091	11	_	_	_	
12-25	3091-3092	/	_	_	_	
12-26	3092-3096	main	_	_	_	
12-27	3096-3097	/	_	_	_	
12-28	3097-3103	pg_wal	_	_	_	
12-29	3104-3105	-	_	_	_	
12-30	3105-3106	s	_	_	_	
12-31	3107-3108	0	_	_	_	
12-32	3108-3109	/	_	_	_	
12-33	3109-3117	353927BC	_	_	_	
12-34	3118-3119	-	_	_	_	
12-35	3119-3120	e	_	_	_	
12-36	3121-3122	0	_	_	_	
12-37	3122-3123	/	_	_	_	
12-38	3123-3131	353A7DFC	_	_	_	
12-39	3132-3141	Certainly	_	_	_	
12-40	3141-3142	,	_	_	_	
12-41	3143-3147	some	_	_	_	
12-42	3148-3155	details	_	_	_	
12-43	3156-3159	can	_	_	_	
12-44	3160-3166	differ	_	_	_	
12-45	3167-3171	from	_	_	_	
12-46	3172-3175	one	_	_	_	
12-47	3176-3182	launch	_	_	_	
12-48	3183-3185	to	_	_	_	
12-49	3186-3193	another	_	_	_	
12-50	3193-3194	,	_	_	_	
12-51	3195-3198	but	_	_	_	
12-52	3199-3201	in	_	_	_	
12-53	3202-3206	this	_	_	_	
12-54	3207-3211	case	_	_	_	
12-55	3212-3214	we	_	_	_	
12-56	3215-3218	get	_	_	_	
12-57	3219-3222	the	_	_	_	
12-58	3223-3232	following	_	_	_	
12-59	3232-3233	.	_	_	_	
12-60	3234-3237	The	_	_	_	
12-61	3238-3244	record	_	_	_	
12-62	3245-3247	of	_	_	_	
12-63	3248-3251	the	_	_	_	
12-64	3252-3257	Heap2	_	_	_	
12-65	3258-3265	manager	_	_	_	
12-66	3266-3273	relates	_	_	_	
12-67	3274-3276	to	_	_	_	
12-68	3277-3286	vacuuming	_	_	_	
12-69	3286-3287	,	_	_	_	
12-70	3288-3292	here	_	_	_	
12-71	3293-3295	it	_	_	_	
12-72	3296-3298	is	_	_	_	
12-73	3299-3306	in-page	_	_	_	
12-74	3307-3313	vacuum	_	_	_	
12-75	3314-3316	of	_	_	_	
12-76	3317-3318	a	_	_	_	
12-77	3319-3324	table	_	_	_	
12-78	3325-3329	from	_	_	_	
12-79	3330-3333	the	_	_	_	
12-80	3334-3340	system	_	_	_	
12-81	3341-3348	catalog	_	_	_	
12-82	3349-3350	(	_	_	_	
12-83	3350-3356	system	_	_	_	
12-84	3357-3364	objects	_	_	_	
12-85	3365-3368	are	_	_	_	
12-86	3369-3375	easily	_	_	_	
12-87	3376-3389	distinguished	_	_	_	
12-88	3390-3394	with	_	_	_	
12-89	3395-3396	a	_	_	_	
12-90	3397-3402	naked	_	_	_	
12-91	3403-3406	eye	_	_	_	
12-92	3407-3409	by	_	_	_	
12-93	3410-3411	a	_	_	_	
12-94	3412-3417	small	_	_	_	
12-95	3418-3424	number	_	_	_	
12-96	3425-3427	in	_	_	_	
12-97	3428-3431	rel	_	_	_	
12-98	3431-3432	)	_	_	_	
12-99	3432-3433	:	_	_	_	

#Text=rmgr: Heap2 len (rec/tot): 59/ 7587, tx: 0, lsn: 0/353927BC, prev 0/35392788, desc: CLEAN remxid 101126, blkref #0: rel 1663/16386/1247 blk 8 FPW
13-1	3434-3438	rmgr	_	_	_	
13-2	3438-3439	:	_	_	_	
13-3	3440-3445	Heap2	_	_	_	
13-4	3446-3449	len	_	_	_	
13-5	3450-3451	(	_	_	_	
13-6	3451-3454	rec	_	_	_	
13-7	3454-3455	/	_	_	_	
13-8	3455-3458	tot	_	_	_	
13-9	3458-3459	)	_	_	_	
13-10	3459-3460	:	_	_	_	
13-11	3461-3463	59	_	_	_	
13-12	3463-3464	/	_	_	_	
13-13	3465-3469	7587	_	_	_	
13-14	3469-3470	,	_	_	_	
13-15	3471-3473	tx	_	_	_	
13-16	3473-3474	:	_	_	_	
13-17	3475-3476	0	_	_	_	
13-18	3476-3477	,	_	_	_	
13-19	3478-3481	lsn	_	_	_	
13-20	3481-3482	:	_	_	_	
13-21	3483-3484	0	_	_	_	
13-22	3484-3485	/	_	_	_	
13-23	3485-3493	353927BC	_	_	_	
13-24	3493-3494	,	_	_	_	
13-25	3495-3499	prev	_	_	_	
13-26	3500-3501	0	_	_	_	
13-27	3501-3502	/	_	_	_	
13-28	3502-3510	35392788	_	_	_	
13-29	3510-3511	,	_	_	_	
13-30	3512-3516	desc	_	_	_	
13-31	3516-3517	:	_	_	_	
13-32	3518-3523	CLEAN	_	_	_	
13-33	3524-3530	remxid	_	_	_	
13-34	3531-3537	101126	_	_	_	
13-35	3537-3538	,	_	_	_	
13-36	3539-3545	blkref	_	_	_	
13-37	3546-3548	#0	_	_	_	
13-38	3548-3549	:	_	_	_	
13-39	3550-3553	rel	_	_	_	
13-40	3554-3558	1663	_	_	_	
13-41	3558-3559	/	_	_	_	
13-42	3559-3564	16386	_	_	_	
13-43	3564-3565	/	_	_	_	
13-44	3565-3569	1247	_	_	_	
13-45	3570-3573	blk	_	_	_	
13-46	3574-3575	8	_	_	_	
13-47	3576-3579	FPW	_	_	_	

#Text=The record of getting the next OID for the table to be created follows: rmgr: XLOG len (rec/tot): 30/ 30, tx: 0, lsn: 0/35394574, prev 0/353927BC, desc: NEXTOID 82295
14-1	3580-3583	The	_	_	_	
14-2	3584-3590	record	_	_	_	
14-3	3591-3593	of	_	_	_	
14-4	3594-3601	getting	_	_	_	
14-5	3602-3605	the	_	_	_	
14-6	3606-3610	next	_	_	_	
14-7	3611-3614	OID	_	_	_	
14-8	3615-3618	for	_	_	_	
14-9	3619-3622	the	_	_	_	
14-10	3623-3628	table	_	_	_	
14-11	3629-3631	to	_	_	_	
14-12	3632-3634	be	_	_	_	
14-13	3635-3642	created	_	_	_	
14-14	3643-3650	follows	_	_	_	
14-15	3650-3651	:	_	_	_	
14-16	3652-3656	rmgr	_	_	_	
14-17	3656-3657	:	_	_	_	
14-18	3658-3662	XLOG	_	_	_	
14-19	3663-3666	len	_	_	_	
14-20	3667-3668	(	_	_	_	
14-21	3668-3671	rec	_	_	_	
14-22	3671-3672	/	_	_	_	
14-23	3672-3675	tot	_	_	_	
14-24	3675-3676	)	_	_	_	
14-25	3676-3677	:	_	_	_	
14-26	3678-3680	30	_	_	_	
14-27	3680-3681	/	_	_	_	
14-28	3682-3684	30	_	_	_	
14-29	3684-3685	,	_	_	_	
14-30	3686-3688	tx	_	_	_	
14-31	3688-3689	:	_	_	_	
14-32	3690-3691	0	_	_	_	
14-33	3691-3692	,	_	_	_	
14-34	3693-3696	lsn	_	_	_	
14-35	3696-3697	:	_	_	_	
14-36	3698-3699	0	_	_	_	
14-37	3699-3700	/	_	_	_	
14-38	3700-3708	35394574	_	_	_	
14-39	3708-3709	,	_	_	_	
14-40	3710-3714	prev	_	_	_	
14-41	3715-3716	0	_	_	_	
14-42	3716-3717	/	_	_	_	
14-43	3717-3725	353927BC	_	_	_	
14-44	3725-3726	,	_	_	_	
14-45	3727-3731	desc	_	_	_	
14-46	3731-3732	:	_	_	_	
14-47	3733-3740	NEXTOID	_	_	_	
14-48	3741-3746	82295	_	_	_	

#Text=And this is pure creation of the table: rmgr: Storage len (rec/tot): 42/ 42, tx: 0, lsn: 0/35394594, prev 0/35394574, desc: CREATE base/16386/74103
15-1	3747-3750	And	_	_	_	
15-2	3751-3755	this	_	_	_	
15-3	3756-3758	is	_	_	_	
15-4	3759-3763	pure	_	_	_	
15-5	3764-3772	creation	_	_	_	
15-6	3773-3775	of	_	_	_	
15-7	3776-3779	the	_	_	_	
15-8	3780-3785	table	_	_	_	
15-9	3785-3786	:	_	_	_	
15-10	3787-3791	rmgr	_	_	_	
15-11	3791-3792	:	_	_	_	
15-12	3793-3800	Storage	_	_	_	
15-13	3801-3804	len	_	_	_	
15-14	3805-3806	(	_	_	_	
15-15	3806-3809	rec	_	_	_	
15-16	3809-3810	/	_	_	_	
15-17	3810-3813	tot	_	_	_	
15-18	3813-3814	)	_	_	_	
15-19	3814-3815	:	_	_	_	
15-20	3816-3818	42	_	_	_	
15-21	3818-3819	/	_	_	_	
15-22	3820-3822	42	_	_	_	
15-23	3822-3823	,	_	_	_	
15-24	3824-3826	tx	_	_	_	
15-25	3826-3827	:	_	_	_	
15-26	3828-3829	0	_	_	_	
15-27	3829-3830	,	_	_	_	
15-28	3831-3834	lsn	_	_	_	
15-29	3834-3835	:	_	_	_	
15-30	3836-3837	0	_	_	_	
15-31	3837-3838	/	_	_	_	
15-32	3838-3846	35394594	_	_	_	
15-33	3846-3847	,	_	_	_	
15-34	3848-3852	prev	_	_	_	
15-35	3853-3854	0	_	_	_	
15-36	3854-3855	/	_	_	_	
15-37	3855-3863	35394574	_	_	_	
15-38	3863-3864	,	_	_	_	
15-39	3865-3869	desc	_	_	_	
15-40	3869-3870	:	_	_	_	
15-41	3871-3877	CREATE	_	_	_	
15-42	3878-3882	base	_	_	_	
15-43	3882-3883	/	_	_	_	
15-44	3883-3888	16386	_	_	_	
15-45	3888-3889	/	_	_	_	
15-46	3889-3894	74103	_	_	_	

#Text=But the insert of data into the table is not WAL-logged. Multiple records follow on row inserts into different tables and indexes — this way PostgreSQL writes the information on the created table to the system catalog (provided in a shorthand form): rmgr: Heap len (rec/tot): 203/ 203, tx: 101127, lsn: 0/353945C0, prev 0/35394594, desc: INSERT off 71, blkref #0: rel 1663/16386/1247 blk 8
16-1	3895-3898	But	_	_	_	
16-2	3899-3902	the	_	_	_	
16-3	3903-3909	insert	_	_	_	
16-4	3910-3912	of	_	_	_	
16-5	3913-3917	data	_	_	_	
16-6	3918-3922	into	_	_	_	
16-7	3923-3926	the	_	_	_	
16-8	3927-3932	table	_	_	_	
16-9	3933-3935	is	_	_	_	
16-10	3936-3939	not	_	_	_	
16-11	3940-3950	WAL-logged	_	_	_	
16-12	3950-3951	.	_	_	_	
16-13	3952-3960	Multiple	_	_	_	
16-14	3961-3968	records	_	_	_	
16-15	3969-3975	follow	_	_	_	
16-16	3976-3978	on	_	_	_	
16-17	3979-3982	row	_	_	_	
16-18	3983-3990	inserts	_	_	_	
16-19	3991-3995	into	_	_	_	
16-20	3996-4005	different	_	_	_	
16-21	4006-4012	tables	_	_	_	
16-22	4013-4016	and	_	_	_	
16-23	4017-4024	indexes	_	_	_	
16-24	4024-4025	 	_	_	_	
16-25	4025-4026	—	_	_	_	
16-26	4027-4031	this	_	_	_	
16-27	4032-4035	way	_	_	_	
16-28	4036-4046	PostgreSQL	_	_	_	
16-29	4047-4053	writes	_	_	_	
16-30	4054-4057	the	_	_	_	
16-31	4058-4069	information	_	_	_	
16-32	4070-4072	on	_	_	_	
16-33	4073-4076	the	_	_	_	
16-34	4077-4084	created	_	_	_	
16-35	4085-4090	table	_	_	_	
16-36	4091-4093	to	_	_	_	
16-37	4094-4097	the	_	_	_	
16-38	4098-4104	system	_	_	_	
16-39	4105-4112	catalog	_	_	_	
16-40	4113-4114	(	_	_	_	
16-41	4114-4122	provided	_	_	_	
16-42	4123-4125	in	_	_	_	
16-43	4126-4127	a	_	_	_	
16-44	4128-4137	shorthand	_	_	_	
16-45	4138-4142	form	_	_	_	
16-46	4142-4143	)	_	_	_	
16-47	4143-4144	:	_	_	_	
16-48	4145-4149	rmgr	_	_	_	
16-49	4149-4150	:	_	_	_	
16-50	4151-4155	Heap	_	_	_	
16-51	4156-4159	len	_	_	_	
16-52	4160-4161	(	_	_	_	
16-53	4161-4164	rec	_	_	_	
16-54	4164-4165	/	_	_	_	
16-55	4165-4168	tot	_	_	_	
16-56	4168-4169	)	_	_	_	
16-57	4169-4170	:	_	_	_	
16-58	4171-4174	203	_	_	_	
16-59	4174-4175	/	_	_	_	
16-60	4176-4179	203	_	_	_	
16-61	4179-4180	,	_	_	_	
16-62	4181-4183	tx	_	_	_	
16-63	4183-4184	:	_	_	_	
16-64	4185-4191	101127	_	_	_	
16-65	4191-4192	,	_	_	_	
16-66	4193-4196	lsn	_	_	_	
16-67	4196-4197	:	_	_	_	
16-68	4198-4199	0	_	_	_	
16-69	4199-4200	/	_	_	_	
16-70	4200-4208	353945C0	_	_	_	
16-71	4208-4209	,	_	_	_	
16-72	4210-4214	prev	_	_	_	
16-73	4215-4216	0	_	_	_	
16-74	4216-4217	/	_	_	_	
16-75	4217-4225	35394594	_	_	_	
16-76	4225-4226	,	_	_	_	
16-77	4227-4231	desc	_	_	_	
16-78	4231-4232	:	_	_	_	
16-79	4233-4239	INSERT	_	_	_	
16-80	4240-4243	off	_	_	_	
16-81	4244-4246	71	_	_	_	
16-82	4246-4247	,	_	_	_	
16-83	4248-4254	blkref	_	_	_	
16-84	4255-4257	#0	_	_	_	
16-85	4257-4258	:	_	_	_	
16-86	4259-4262	rel	_	_	_	
16-87	4263-4267	1663	_	_	_	
16-88	4267-4268	/	_	_	_	
16-89	4268-4273	16386	_	_	_	
16-90	4273-4274	/	_	_	_	
16-91	4274-4278	1247	_	_	_	
16-92	4279-4282	blk	_	_	_	
16-93	4283-4284	8	_	_	_	

#Text=rmgr: Btree len (rec/tot): 53/ 685, tx: 101127, lsn: 0/3539468C, prev 0/353945C0, desc: INSERT_LEAF off 37, blkref #0: rel 1663/16386/2703 blk 2 FPW
17-1	4285-4289	rmgr	_	_	_	
17-2	4289-4290	:	_	_	_	
17-3	4291-4296	Btree	_	_	_	
17-4	4297-4300	len	_	_	_	
17-5	4301-4302	(	_	_	_	
17-6	4302-4305	rec	_	_	_	
17-7	4305-4306	/	_	_	_	
17-8	4306-4309	tot	_	_	_	
17-9	4309-4310	)	_	_	_	
17-10	4310-4311	:	_	_	_	
17-11	4312-4314	53	_	_	_	
17-12	4314-4315	/	_	_	_	
17-13	4316-4319	685	_	_	_	
17-14	4319-4320	,	_	_	_	
17-15	4321-4323	tx	_	_	_	
17-16	4323-4324	:	_	_	_	
17-17	4325-4331	101127	_	_	_	
17-18	4331-4332	,	_	_	_	
17-19	4333-4336	lsn	_	_	_	
17-20	4336-4337	:	_	_	_	
17-21	4338-4339	0	_	_	_	
17-22	4339-4340	/	_	_	_	
17-23	4340-4348	3539468C	_	_	_	
17-24	4348-4349	,	_	_	_	
17-25	4350-4354	prev	_	_	_	
17-26	4355-4356	0	_	_	_	
17-27	4356-4357	/	_	_	_	
17-28	4357-4365	353945C0	_	_	_	
17-29	4365-4366	,	_	_	_	
17-30	4367-4371	desc	_	_	_	
17-31	4371-4372	:	_	_	_	
17-32	4373-4384	INSERT_LEAF	_	_	_	
17-33	4385-4388	off	_	_	_	
17-34	4389-4391	37	_	_	_	
17-35	4391-4392	,	_	_	_	
17-36	4393-4399	blkref	_	_	_	
17-37	4400-4402	#0	_	_	_	
17-38	4402-4403	:	_	_	_	
17-39	4404-4407	rel	_	_	_	
17-40	4408-4412	1663	_	_	_	
17-41	4412-4413	/	_	_	_	
17-42	4413-4418	16386	_	_	_	
17-43	4418-4419	/	_	_	_	
17-44	4419-4423	2703	_	_	_	
17-45	4424-4427	blk	_	_	_	
17-46	4428-4429	2	_	_	_	
17-47	4430-4433	FPW	_	_	_	

#Text=... rmgr: Btree len (rec/tot): 53/ 2393, tx:
18-1	4434-4435	.	_	_	_	
18-2	4435-4436	.	_	_	_	
18-3	4436-4437	.	_	_	_	
18-4	4438-4442	rmgr	_	_	_	
18-5	4442-4443	:	_	_	_	
18-6	4444-4449	Btree	_	_	_	
18-7	4450-4453	len	_	_	_	
18-8	4454-4455	(	_	_	_	
18-9	4455-4458	rec	_	_	_	
18-10	4458-4459	/	_	_	_	
18-11	4459-4462	tot	_	_	_	
18-12	4462-4463	)	_	_	_	
18-13	4463-4464	:	_	_	_	
18-14	4465-4467	53	_	_	_	
18-15	4467-4468	/	_	_	_	
18-16	4469-4473	2393	_	_	_	
18-17	4473-4474	,	_	_	_	
18-18	4475-4477	tx	_	_	_	
18-19	4477-4478	:	_	_	_	

#Text=101127, lsn: 0/353A747C, prev 0/353A6788, desc: INSERT_LEAF off 10, blkref #0: rel 1664/0/1233 blk 1 FPW And finally the transaction commit: rmgr: Transaction len (rec/tot): 34/ 34, tx:
19-1	4479-4485	101127	_	_	_	
19-2	4485-4486	,	_	_	_	
19-3	4487-4490	lsn	_	_	_	
19-4	4490-4491	:	_	_	_	
19-5	4492-4493	0	_	_	_	
19-6	4493-4494	/	_	_	_	
19-7	4494-4502	353A747C	_	_	_	
19-8	4502-4503	,	_	_	_	
19-9	4504-4508	prev	_	_	_	
19-10	4509-4510	0	_	_	_	
19-11	4510-4511	/	_	_	_	
19-12	4511-4519	353A6788	_	_	_	
19-13	4519-4520	,	_	_	_	
19-14	4521-4525	desc	_	_	_	
19-15	4525-4526	:	_	_	_	
19-16	4527-4538	INSERT_LEAF	_	_	_	
19-17	4539-4542	off	_	_	_	
19-18	4543-4545	10	_	_	_	
19-19	4545-4546	,	_	_	_	
19-20	4547-4553	blkref	_	_	_	
19-21	4554-4556	#0	_	_	_	
19-22	4556-4557	:	_	_	_	
19-23	4558-4561	rel	_	_	_	
19-24	4562-4566	1664	_	_	_	
19-25	4566-4567	/	_	_	_	
19-26	4567-4568	0	_	_	_	
19-27	4568-4569	/	_	_	_	
19-28	4569-4573	1233	_	_	_	
19-29	4574-4577	blk	_	_	_	
19-30	4578-4579	1	_	_	_	
19-31	4580-4583	FPW	_	_	_	
19-32	4584-4587	And	_	_	_	
19-33	4588-4595	finally	_	_	_	
19-34	4596-4599	the	_	_	_	
19-35	4600-4611	transaction	_	_	_	
19-36	4612-4618	commit	_	_	_	
19-37	4618-4619	:	_	_	_	
19-38	4620-4624	rmgr	_	_	_	
19-39	4624-4625	:	_	_	_	
19-40	4626-4637	Transaction	_	_	_	
19-41	4638-4641	len	_	_	_	
19-42	4642-4643	(	_	_	_	
19-43	4643-4646	rec	_	_	_	
19-44	4646-4647	/	_	_	_	
19-45	4647-4650	tot	_	_	_	
19-46	4650-4651	)	_	_	_	
19-47	4651-4652	:	_	_	_	
19-48	4653-4655	34	_	_	_	
19-49	4655-4656	/	_	_	_	
19-50	4657-4659	34	_	_	_	
19-51	4659-4660	,	_	_	_	
19-52	4661-4663	tx	_	_	_	
19-53	4663-4664	:	_	_	_	

#Text=101127, lsn: 0/353A7DD8, prev 0/353A747C, desc: COMMIT 2019-07-23 18:59:34.923124 MSK Replica
20-1	4665-4671	101127	_	_	_	
20-2	4671-4672	,	_	_	_	
20-3	4673-4676	lsn	_	_	_	
20-4	4676-4677	:	_	_	_	
20-5	4678-4679	0	_	_	_	
20-6	4679-4680	/	_	_	_	
20-7	4680-4688	353A7DD8	_	_	_	
20-8	4688-4689	,	_	_	_	
20-9	4690-4694	prev	_	_	_	
20-10	4695-4696	0	_	_	_	
20-11	4696-4697	/	_	_	_	
20-12	4697-4705	353A747C	_	_	_	
20-13	4705-4706	,	_	_	_	
20-14	4707-4711	desc	_	_	_	
20-15	4711-4712	:	_	_	_	
20-16	4713-4719	COMMIT	_	_	_	
20-17	4720-4724	2019	_	_	_	
20-18	4724-4725	-	_	_	_	
20-19	4725-4727	07	_	_	_	
20-20	4727-4728	-	_	_	_	
20-21	4728-4730	23	_	_	_	
20-22	4731-4733	18	_	_	_	
20-23	4733-4734	:	_	_	_	
20-24	4734-4736	59	_	_	_	
20-25	4736-4737	:	_	_	_	
20-26	4737-4746	34.923124	_	_	_	
20-27	4747-4750	MSK	_	_	_	
20-28	4751-4758	Replica	_	_	_	

#Text=When we restore a PostgreSQL instance from backup, we start with some state of the file system and gradually bring the data to the target point of the recovery by playing back the archived WAL records. The number of such records can be pretty large (for example, records for several days), that is, the recovery period will span many checkpoints rather than one. So, it is clear that the minimum logging level is insufficient — if an operation is not logged, we will be unaware of whether we need to redo it. To support restoring from backup, all the operations must be WAL-logged. The same is true for the replication: everything that is not logged will not be sent to the replica and will not be replayed. And a wish to run queries on a replica complicates the situation even more.
21-1	4759-4763	When	_	_	_	
21-2	4764-4766	we	_	_	_	
21-3	4767-4774	restore	_	_	_	
21-4	4775-4776	a	_	_	_	
21-5	4777-4787	PostgreSQL	_	_	_	
21-6	4788-4796	instance	_	_	_	
21-7	4797-4801	from	_	_	_	
21-8	4802-4808	backup	_	_	_	
21-9	4808-4809	,	_	_	_	
21-10	4810-4812	we	_	_	_	
21-11	4813-4818	start	_	_	_	
21-12	4819-4823	with	_	_	_	
21-13	4824-4828	some	_	_	_	
21-14	4829-4834	state	_	_	_	
21-15	4835-4837	of	_	_	_	
21-16	4838-4841	the	_	_	_	
21-17	4842-4846	file	_	_	_	
21-18	4847-4853	system	_	_	_	
21-19	4854-4857	and	_	_	_	
21-20	4858-4867	gradually	_	_	_	
21-21	4868-4873	bring	_	_	_	
21-22	4874-4877	the	_	_	_	
21-23	4878-4882	data	_	_	_	
21-24	4883-4885	to	_	_	_	
21-25	4886-4889	the	_	_	_	
21-26	4890-4896	target	_	_	_	
21-27	4897-4902	point	_	_	_	
21-28	4903-4905	of	_	_	_	
21-29	4906-4909	the	_	_	_	
21-30	4910-4918	recovery	_	_	_	
21-31	4919-4921	by	_	_	_	
21-32	4922-4929	playing	_	_	_	
21-33	4930-4934	back	_	_	_	
21-34	4935-4938	the	_	_	_	
21-35	4939-4947	archived	_	_	_	
21-36	4948-4951	WAL	_	_	_	
21-37	4952-4959	records	_	_	_	
21-38	4959-4960	.	_	_	_	
21-39	4961-4964	The	_	_	_	
21-40	4965-4971	number	_	_	_	
21-41	4972-4974	of	_	_	_	
21-42	4975-4979	such	_	_	_	
21-43	4980-4987	records	_	_	_	
21-44	4988-4991	can	_	_	_	
21-45	4992-4994	be	_	_	_	
21-46	4995-5001	pretty	_	_	_	
21-47	5002-5007	large	_	_	_	
21-48	5008-5009	(	_	_	_	
21-49	5009-5012	for	_	_	_	
21-50	5013-5020	example	_	_	_	
21-51	5020-5021	,	_	_	_	
21-52	5022-5029	records	_	_	_	
21-53	5030-5033	for	_	_	_	
21-54	5034-5041	several	_	_	_	
21-55	5042-5046	days	_	_	_	
21-56	5046-5047	)	_	_	_	
21-57	5047-5048	,	_	_	_	
21-58	5049-5053	that	_	_	_	
21-59	5054-5056	is	_	_	_	
21-60	5056-5057	,	_	_	_	
21-61	5058-5061	the	_	_	_	
21-62	5062-5070	recovery	_	_	_	
21-63	5071-5077	period	_	_	_	
21-64	5078-5082	will	_	_	_	
21-65	5083-5087	span	_	_	_	
21-66	5088-5092	many	_	_	_	
21-67	5093-5104	checkpoints	_	_	_	
21-68	5105-5111	rather	_	_	_	
21-69	5112-5116	than	_	_	_	
21-70	5117-5120	one	_	_	_	
21-71	5120-5121	.	_	_	_	
21-72	5122-5124	So	_	_	_	
21-73	5124-5125	,	_	_	_	
21-74	5126-5128	it	_	_	_	
21-75	5129-5131	is	_	_	_	
21-76	5132-5137	clear	_	_	_	
21-77	5138-5142	that	_	_	_	
21-78	5143-5146	the	_	_	_	
21-79	5147-5154	minimum	_	_	_	
21-80	5155-5162	logging	_	_	_	
21-81	5163-5168	level	_	_	_	
21-82	5169-5171	is	_	_	_	
21-83	5172-5184	insufficient	_	_	_	
21-84	5184-5185	 	_	_	_	
21-85	5185-5186	—	_	_	_	
21-86	5187-5189	if	_	_	_	
21-87	5190-5192	an	_	_	_	
21-88	5193-5202	operation	_	_	_	
21-89	5203-5205	is	_	_	_	
21-90	5206-5209	not	_	_	_	
21-91	5210-5216	logged	_	_	_	
21-92	5216-5217	,	_	_	_	
21-93	5218-5220	we	_	_	_	
21-94	5221-5225	will	_	_	_	
21-95	5226-5228	be	_	_	_	
21-96	5229-5236	unaware	_	_	_	
21-97	5237-5239	of	_	_	_	
21-98	5240-5247	whether	_	_	_	
21-99	5248-5250	we	_	_	_	
21-100	5251-5255	need	_	_	_	
21-101	5256-5258	to	_	_	_	
21-102	5259-5263	redo	_	_	_	
21-103	5264-5266	it	_	_	_	
21-104	5266-5267	.	_	_	_	
21-105	5268-5270	To	_	_	_	
21-106	5271-5278	support	_	_	_	
21-107	5279-5288	restoring	_	_	_	
21-108	5289-5293	from	_	_	_	
21-109	5294-5300	backup	_	_	_	
21-110	5300-5301	,	_	_	_	
21-111	5302-5305	all	_	_	_	
21-112	5306-5309	the	_	_	_	
21-113	5310-5320	operations	_	_	_	
21-114	5321-5325	must	_	_	_	
21-115	5326-5328	be	_	_	_	
21-116	5329-5339	WAL-logged	_	_	_	
21-117	5339-5340	.	_	_	_	
21-118	5341-5344	The	_	_	_	
21-119	5345-5349	same	_	_	_	
21-120	5350-5352	is	_	_	_	
21-121	5353-5357	true	_	_	_	
21-122	5358-5361	for	_	_	_	
21-123	5362-5365	the	_	_	_	
21-124	5366-5377	replication	_	_	_	
21-125	5377-5378	:	_	_	_	
21-126	5379-5389	everything	_	_	_	
21-127	5390-5394	that	_	_	_	
21-128	5395-5397	is	_	_	_	
21-129	5398-5401	not	_	_	_	
21-130	5402-5408	logged	_	_	_	
21-131	5409-5413	will	_	_	_	
21-132	5414-5417	not	_	_	_	
21-133	5418-5420	be	_	_	_	
21-134	5421-5425	sent	_	_	_	
21-135	5426-5428	to	_	_	_	
21-136	5429-5432	the	_	_	_	
21-137	5433-5440	replica	_	_	_	
21-138	5441-5444	and	_	_	_	
21-139	5445-5449	will	_	_	_	
21-140	5450-5453	not	_	_	_	
21-141	5454-5456	be	_	_	_	
21-142	5457-5465	replayed	_	_	_	
21-143	5465-5466	.	_	_	_	
21-144	5467-5470	And	_	_	_	
21-145	5471-5472	a	_	_	_	
21-146	5473-5477	wish	_	_	_	
21-147	5478-5480	to	_	_	_	
21-148	5481-5484	run	_	_	_	
21-149	5485-5492	queries	_	_	_	
21-150	5493-5495	on	_	_	_	
21-151	5496-5497	a	_	_	_	
21-152	5498-5505	replica	_	_	_	
21-153	5506-5517	complicates	_	_	_	
21-154	5518-5521	the	_	_	_	
21-155	5522-5531	situation	_	_	_	
21-156	5532-5536	even	_	_	_	
21-157	5537-5541	more	_	_	_	
21-158	5541-5542	.	_	_	_	

#Text=First, we need information on exclusive advisory locks that occur on the main server since they can conflict the queries on the replica. Such locks are WAL-logged and then the startup process applies them on the replica. Second, we need to create data snapshots, and to do this, as we remember, information on the transactions being executed is needed. In the case of a replica, not only local transactions are meant, but also transactions on the main server. The only way to provide this information is to WAL-log it from time to time (this happens once every 15 seconds).
22-1	5543-5548	First	_	_	_	
22-2	5548-5549	,	_	_	_	
22-3	5550-5552	we	_	_	_	
22-4	5553-5557	need	_	_	_	
22-5	5558-5569	information	_	_	_	
22-6	5570-5572	on	_	_	_	
22-7	5573-5582	exclusive	_	_	_	
22-8	5583-5591	advisory	_	_	_	
22-9	5592-5597	locks	_	_	_	
22-10	5598-5602	that	_	_	_	
22-11	5603-5608	occur	_	_	_	
22-12	5609-5611	on	_	_	_	
22-13	5612-5615	the	_	_	_	
22-14	5616-5620	main	_	_	_	
22-15	5621-5627	server	_	_	_	
22-16	5628-5633	since	_	_	_	
22-17	5634-5638	they	_	_	_	
22-18	5639-5642	can	_	_	_	
22-19	5643-5651	conflict	_	_	_	
22-20	5652-5655	the	_	_	_	
22-21	5656-5663	queries	_	_	_	
22-22	5664-5666	on	_	_	_	
22-23	5667-5670	the	_	_	_	
22-24	5671-5678	replica	_	_	_	
22-25	5678-5679	.	_	_	_	
22-26	5680-5684	Such	_	_	_	
22-27	5685-5690	locks	_	_	_	
22-28	5691-5694	are	_	_	_	
22-29	5695-5705	WAL-logged	_	_	_	
22-30	5706-5709	and	_	_	_	
22-31	5710-5714	then	_	_	_	
22-32	5715-5718	the	_	_	_	
22-33	5719-5726	startup	_	_	_	
22-34	5727-5734	process	_	_	_	
22-35	5735-5742	applies	_	_	_	
22-36	5743-5747	them	_	_	_	
22-37	5748-5750	on	_	_	_	
22-38	5751-5754	the	_	_	_	
22-39	5755-5762	replica	_	_	_	
22-40	5762-5763	.	_	_	_	
22-41	5764-5770	Second	_	_	_	
22-42	5770-5771	,	_	_	_	
22-43	5772-5774	we	_	_	_	
22-44	5775-5779	need	_	_	_	
22-45	5780-5782	to	_	_	_	
22-46	5783-5789	create	_	_	_	
22-47	5790-5794	data	_	_	_	
22-48	5795-5804	snapshots	_	_	_	
22-49	5804-5805	,	_	_	_	
22-50	5806-5809	and	_	_	_	
22-51	5810-5812	to	_	_	_	
22-52	5813-5815	do	_	_	_	
22-53	5816-5820	this	_	_	_	
22-54	5820-5821	,	_	_	_	
22-55	5822-5824	as	_	_	_	
22-56	5825-5827	we	_	_	_	
22-57	5828-5836	remember	_	_	_	
22-58	5836-5837	,	_	_	_	
22-59	5838-5849	information	_	_	_	
22-60	5850-5852	on	_	_	_	
22-61	5853-5856	the	_	_	_	
22-62	5857-5869	transactions	_	_	_	
22-63	5870-5875	being	_	_	_	
22-64	5876-5884	executed	_	_	_	
22-65	5885-5887	is	_	_	_	
22-66	5888-5894	needed	_	_	_	
22-67	5894-5895	.	_	_	_	
22-68	5896-5898	In	_	_	_	
22-69	5899-5902	the	_	_	_	
22-70	5903-5907	case	_	_	_	
22-71	5908-5910	of	_	_	_	
22-72	5911-5912	a	_	_	_	
22-73	5913-5920	replica	_	_	_	
22-74	5920-5921	,	_	_	_	
22-75	5922-5925	not	_	_	_	
22-76	5926-5930	only	_	_	_	
22-77	5931-5936	local	_	_	_	
22-78	5937-5949	transactions	_	_	_	
22-79	5950-5953	are	_	_	_	
22-80	5954-5959	meant	_	_	_	
22-81	5959-5960	,	_	_	_	
22-82	5961-5964	but	_	_	_	
22-83	5965-5969	also	_	_	_	
22-84	5970-5982	transactions	_	_	_	
22-85	5983-5985	on	_	_	_	
22-86	5986-5989	the	_	_	_	
22-87	5990-5994	main	_	_	_	
22-88	5995-6001	server	_	_	_	
22-89	6001-6002	.	_	_	_	
22-90	6003-6006	The	_	_	_	
22-91	6007-6011	only	_	_	_	
22-92	6012-6015	way	_	_	_	
22-93	6016-6018	to	_	_	_	
22-94	6019-6026	provide	_	_	_	
22-95	6027-6031	this	_	_	_	
22-96	6032-6043	information	_	_	_	
22-97	6044-6046	is	_	_	_	
22-98	6047-6049	to	_	_	_	
22-99	6050-6057	WAL-log	_	_	_	
22-100	6058-6060	it	_	_	_	
22-101	6061-6065	from	_	_	_	
22-102	6066-6070	time	_	_	_	
22-103	6071-6073	to	_	_	_	
22-104	6074-6078	time	_	_	_	
22-105	6079-6080	(	_	_	_	
22-106	6080-6084	this	_	_	_	
22-107	6085-6092	happens	_	_	_	
22-108	6093-6097	once	_	_	_	
22-109	6098-6103	every	_	_	_	
22-110	6104-6106	15	_	_	_	
22-111	6106-6107	 	_	_	_	
22-112	6107-6114	seconds	_	_	_	
22-113	6114-6115	)	_	_	_	
22-114	6115-6116	.	_	_	_	

#Text=The level of WAL that ensures both restoring from backup and a possibility of physical replication is set by the value of wal_level = replica. (Before version 9.6, two separate levels were available — archive and hot_standby — but later they were combined.) It's this level that is used by default starting with PostgreSQL 10 (while earlier it was minimal). So let's just restore the parameters to their default values: => ALTER SYSTEM RESET wal_level;
23-1	6117-6120	The	_	_	_	
23-2	6121-6126	level	_	_	_	
23-3	6127-6129	of	_	_	_	
23-4	6130-6133	WAL	_	_	_	
23-5	6134-6138	that	_	_	_	
23-6	6139-6146	ensures	_	_	_	
23-7	6147-6151	both	_	_	_	
23-8	6152-6161	restoring	_	_	_	
23-9	6162-6166	from	_	_	_	
23-10	6167-6173	backup	_	_	_	
23-11	6174-6177	and	_	_	_	
23-12	6178-6179	a	_	_	_	
23-13	6180-6191	possibility	_	_	_	
23-14	6192-6194	of	_	_	_	
23-15	6195-6203	physical	_	_	_	
23-16	6204-6215	replication	_	_	_	
23-17	6216-6218	is	_	_	_	
23-18	6219-6222	set	_	_	_	
23-19	6223-6225	by	_	_	_	
23-20	6226-6229	the	_	_	_	
23-21	6230-6235	value	_	_	_	
23-22	6236-6238	of	_	_	_	
23-23	6239-6248	wal_level	_	_	_	
23-24	6249-6250	=	_	_	_	
23-25	6251-6258	replica	_	_	_	
23-26	6258-6259	.	_	_	_	
23-27	6260-6261	(	_	_	_	
23-28	6261-6267	Before	_	_	_	
23-29	6268-6275	version	_	_	_	
23-30	6275-6276	 	_	_	_	
23-31	6276-6279	9.6	_	_	_	
23-32	6279-6280	,	_	_	_	
23-33	6281-6284	two	_	_	_	
23-34	6285-6293	separate	_	_	_	
23-35	6294-6300	levels	_	_	_	
23-36	6301-6305	were	_	_	_	
23-37	6306-6315	available	_	_	_	
23-38	6315-6316	 	_	_	_	
23-39	6316-6317	—	_	_	_	
23-40	6318-6325	archive	_	_	_	
23-41	6326-6329	and	_	_	_	
23-42	6330-6341	hot_standby	_	_	_	
23-43	6341-6342	 	_	_	_	
23-44	6342-6343	—	_	_	_	
23-45	6344-6347	but	_	_	_	
23-46	6348-6353	later	_	_	_	
23-47	6354-6358	they	_	_	_	
23-48	6359-6363	were	_	_	_	
23-49	6364-6372	combined	_	_	_	
23-50	6372-6373	.	_	_	_	
23-51	6373-6374	)	_	_	_	
23-52	6375-6379	It's	_	_	_	
23-53	6380-6384	this	_	_	_	
23-54	6385-6390	level	_	_	_	
23-55	6391-6395	that	_	_	_	
23-56	6396-6398	is	_	_	_	
23-57	6399-6403	used	_	_	_	
23-58	6404-6406	by	_	_	_	
23-59	6407-6414	default	_	_	_	
23-60	6415-6423	starting	_	_	_	
23-61	6424-6428	with	_	_	_	
23-62	6429-6439	PostgreSQL	_	_	_	
23-63	6439-6440	 	_	_	_	
23-64	6440-6442	10	_	_	_	
23-65	6443-6444	(	_	_	_	
23-66	6444-6449	while	_	_	_	
23-67	6450-6457	earlier	_	_	_	
23-68	6458-6460	it	_	_	_	
23-69	6461-6464	was	_	_	_	
23-70	6465-6472	minimal	_	_	_	
23-71	6472-6473	)	_	_	_	
23-72	6473-6474	.	_	_	_	
23-73	6475-6477	So	_	_	_	
23-74	6478-6483	let's	_	_	_	
23-75	6484-6488	just	_	_	_	
23-76	6489-6496	restore	_	_	_	
23-77	6497-6500	the	_	_	_	
23-78	6501-6511	parameters	_	_	_	
23-79	6512-6514	to	_	_	_	
23-80	6515-6520	their	_	_	_	
23-81	6521-6528	default	_	_	_	
23-82	6529-6535	values	_	_	_	
23-83	6535-6536	:	_	_	_	
23-84	6537-6538	=	_	_	_	
23-85	6538-6539	>	_	_	_	
23-86	6540-6545	ALTER	_	_	_	
23-87	6546-6552	SYSTEM	_	_	_	
23-88	6553-6558	RESET	_	_	_	
23-89	6559-6568	wal_level	_	_	_	
23-90	6568-6569	;	_	_	_	

#Text==> ALTER SYSTEM RESET max_wal_senders; student$ sudo pg_ctlcluster 11 main restart Deleting the table and redoing exactly the same sequence of steps as last time: => DROP TABLE wallevel; => SELECT pg_current_wal_insert_lsn();
24-1	6570-6571	=	_	_	_	
24-2	6571-6572	>	_	_	_	
24-3	6573-6578	ALTER	_	_	_	
24-4	6579-6585	SYSTEM	_	_	_	
24-5	6586-6591	RESET	_	_	_	
24-6	6592-6607	max_wal_senders	_	_	_	
24-7	6607-6608	;	_	_	_	
24-8	6609-6616	student	_	_	_	
24-9	6616-6617	$	_	_	_	
24-10	6618-6622	sudo	_	_	_	
24-11	6623-6636	pg_ctlcluster	_	_	_	
24-12	6637-6639	11	_	_	_	
24-13	6640-6644	main	_	_	_	
24-14	6645-6652	restart	_	_	_	
24-15	6653-6661	Deleting	_	_	_	
24-16	6662-6665	the	_	_	_	
24-17	6666-6671	table	_	_	_	
24-18	6672-6675	and	_	_	_	
24-19	6676-6683	redoing	_	_	_	
24-20	6684-6691	exactly	_	_	_	
24-21	6692-6695	the	_	_	_	
24-22	6696-6700	same	_	_	_	
24-23	6701-6709	sequence	_	_	_	
24-24	6710-6712	of	_	_	_	
24-25	6713-6718	steps	_	_	_	
24-26	6719-6721	as	_	_	_	
24-27	6722-6726	last	_	_	_	
24-28	6727-6731	time	_	_	_	
24-29	6731-6732	:	_	_	_	
24-30	6733-6734	=	_	_	_	
24-31	6734-6735	>	_	_	_	
24-32	6736-6740	DROP	_	_	_	
24-33	6741-6746	TABLE	_	_	_	
24-34	6747-6755	wallevel	_	_	_	
24-35	6755-6756	;	_	_	_	
24-36	6757-6758	=	_	_	_	
24-37	6758-6759	>	_	_	_	
24-38	6760-6766	SELECT	_	_	_	
24-39	6767-6792	pg_current_wal_insert_lsn	_	_	_	
24-40	6792-6793	(	_	_	_	
24-41	6793-6794	)	_	_	_	
24-42	6794-6795	;	_	_	_	

#Text=pg_current_wal_insert_lsn --------------------------- 0/353AF21C (1 row) => CREATE TABLE wallevel AS SELECT 1 AS n;
25-1	6796-6821	pg_current_wal_insert_lsn	_	_	_	
25-2	6822-6823	-	_	_	_	
25-3	6823-6824	-	_	_	_	
25-4	6824-6825	-	_	_	_	
25-5	6825-6826	-	_	_	_	
25-6	6826-6827	-	_	_	_	
25-7	6827-6828	-	_	_	_	
25-8	6828-6829	-	_	_	_	
25-9	6829-6830	-	_	_	_	
25-10	6830-6831	-	_	_	_	
25-11	6831-6832	-	_	_	_	
25-12	6832-6833	-	_	_	_	
25-13	6833-6834	-	_	_	_	
25-14	6834-6835	-	_	_	_	
25-15	6835-6836	-	_	_	_	
25-16	6836-6837	-	_	_	_	
25-17	6837-6838	-	_	_	_	
25-18	6838-6839	-	_	_	_	
25-19	6839-6840	-	_	_	_	
25-20	6840-6841	-	_	_	_	
25-21	6841-6842	-	_	_	_	
25-22	6842-6843	-	_	_	_	
25-23	6843-6844	-	_	_	_	
25-24	6844-6845	-	_	_	_	
25-25	6845-6846	-	_	_	_	
25-26	6846-6847	-	_	_	_	
25-27	6847-6848	-	_	_	_	
25-28	6848-6849	-	_	_	_	
25-29	6850-6851	0	_	_	_	
25-30	6851-6852	/	_	_	_	
25-31	6852-6860	353AF21C	_	_	_	
25-32	6861-6862	(	_	_	_	
25-33	6862-6863	1	_	_	_	
25-34	6864-6867	row	_	_	_	
25-35	6867-6868	)	_	_	_	
25-36	6869-6870	=	_	_	_	
25-37	6870-6871	>	_	_	_	
25-38	6872-6878	CREATE	_	_	_	
25-39	6879-6884	TABLE	_	_	_	
25-40	6885-6893	wallevel	_	_	_	
25-41	6894-6896	AS	_	_	_	
25-42	6897-6903	SELECT	_	_	_	
25-43	6904-6905	1	_	_	_	
25-44	6906-6908	AS	_	_	_	
25-45	6909-6910	n	_	_	_	
25-46	6910-6911	;	_	_	_	

#Text==> SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn --------------------------- 0/353BE51C (1 row)
26-1	6912-6913	=	_	_	_	
26-2	6913-6914	>	_	_	_	
26-3	6915-6921	SELECT	_	_	_	
26-4	6922-6947	pg_current_wal_insert_lsn	_	_	_	
26-5	6947-6948	(	_	_	_	
26-6	6948-6949	)	_	_	_	
26-7	6949-6950	;	_	_	_	
26-8	6951-6976	pg_current_wal_insert_lsn	_	_	_	
26-9	6977-6978	-	_	_	_	
26-10	6978-6979	-	_	_	_	
26-11	6979-6980	-	_	_	_	
26-12	6980-6981	-	_	_	_	
26-13	6981-6982	-	_	_	_	
26-14	6982-6983	-	_	_	_	
26-15	6983-6984	-	_	_	_	
26-16	6984-6985	-	_	_	_	
26-17	6985-6986	-	_	_	_	
26-18	6986-6987	-	_	_	_	
26-19	6987-6988	-	_	_	_	
26-20	6988-6989	-	_	_	_	
26-21	6989-6990	-	_	_	_	
26-22	6990-6991	-	_	_	_	
26-23	6991-6992	-	_	_	_	
26-24	6992-6993	-	_	_	_	
26-25	6993-6994	-	_	_	_	
26-26	6994-6995	-	_	_	_	
26-27	6995-6996	-	_	_	_	
26-28	6996-6997	-	_	_	_	
26-29	6997-6998	-	_	_	_	
26-30	6998-6999	-	_	_	_	
26-31	6999-7000	-	_	_	_	
26-32	7000-7001	-	_	_	_	
26-33	7001-7002	-	_	_	_	
26-34	7002-7003	-	_	_	_	
26-35	7003-7004	-	_	_	_	
26-36	7005-7006	0	_	_	_	
26-37	7006-7007	/	_	_	_	
26-38	7007-7015	353BE51C	_	_	_	
26-39	7016-7017	(	_	_	_	
26-40	7017-7018	1	_	_	_	
26-41	7019-7022	row	_	_	_	
26-42	7022-7023	)	_	_	_	

#Text=Now let's check WAL records. postgres$ /usr/lib/postgresql/11/bin/pg_waldump -p /var/lib/postgresql/11/main/pg_wal -s 0/353AF21C -e 0/353BE51C
27-1	7024-7027	Now	_	_	_	
27-2	7028-7033	let's	_	_	_	
27-3	7034-7039	check	_	_	_	
27-4	7040-7043	WAL	_	_	_	
27-5	7044-7051	records	_	_	_	
27-6	7051-7052	.	_	_	_	
27-7	7053-7061	postgres	_	_	_	
27-8	7061-7062	$	_	_	_	
27-9	7063-7064	/	_	_	_	
27-10	7064-7067	usr	_	_	_	
27-11	7067-7068	/	_	_	_	
27-12	7068-7071	lib	_	_	_	
27-13	7071-7072	/	_	_	_	
27-14	7072-7082	postgresql	_	_	_	
27-15	7082-7083	/	_	_	_	
27-16	7083-7085	11	_	_	_	
27-17	7085-7086	/	_	_	_	
27-18	7086-7089	bin	_	_	_	
27-19	7089-7090	/	_	_	_	
27-20	7090-7100	pg_waldump	_	_	_	
27-21	7101-7102	-	_	_	_	
27-22	7102-7103	p	_	_	_	
27-23	7104-7105	/	_	_	_	
27-24	7105-7108	var	_	_	_	
27-25	7108-7109	/	_	_	_	
27-26	7109-7112	lib	_	_	_	
27-27	7112-7113	/	_	_	_	
27-28	7113-7123	postgresql	_	_	_	
27-29	7123-7124	/	_	_	_	
27-30	7124-7126	11	_	_	_	
27-31	7126-7127	/	_	_	_	
27-32	7127-7131	main	_	_	_	
27-33	7131-7132	/	_	_	_	
27-34	7132-7138	pg_wal	_	_	_	
27-35	7139-7140	-	_	_	_	
27-36	7140-7141	s	_	_	_	
27-37	7142-7143	0	_	_	_	
27-38	7143-7144	/	_	_	_	
27-39	7144-7152	353AF21C	_	_	_	
27-40	7153-7154	-	_	_	_	
27-41	7154-7155	e	_	_	_	
27-42	7156-7157	0	_	_	_	
27-43	7157-7158	/	_	_	_	
27-44	7158-7166	353BE51C	_	_	_	

#Text=Vacuuming, getting the OID, creation of the table and registration in the system catalog — same as before so far: rmgr: Heap2 len (rec/tot): 58/ 58, tx: 0, lsn: 0/353AF21C, prev 0/353AF044, desc: CLEAN remxid 101128, blkref #0: rel 1663/16386/1247 blk 8
28-1	7167-7176	Vacuuming	_	_	_	
28-2	7176-7177	,	_	_	_	
28-3	7178-7185	getting	_	_	_	
28-4	7186-7189	the	_	_	_	
28-5	7190-7193	OID	_	_	_	
28-6	7193-7194	,	_	_	_	
28-7	7195-7203	creation	_	_	_	
28-8	7204-7206	of	_	_	_	
28-9	7207-7210	the	_	_	_	
28-10	7211-7216	table	_	_	_	
28-11	7217-7220	and	_	_	_	
28-12	7221-7233	registration	_	_	_	
28-13	7234-7236	in	_	_	_	
28-14	7237-7240	the	_	_	_	
28-15	7241-7247	system	_	_	_	
28-16	7248-7255	catalog	_	_	_	
28-17	7255-7256	 	_	_	_	
28-18	7256-7257	—	_	_	_	
28-19	7258-7262	same	_	_	_	
28-20	7263-7265	as	_	_	_	
28-21	7266-7272	before	_	_	_	
28-22	7273-7275	so	_	_	_	
28-23	7276-7279	far	_	_	_	
28-24	7279-7280	:	_	_	_	
28-25	7281-7285	rmgr	_	_	_	
28-26	7285-7286	:	_	_	_	
28-27	7287-7292	Heap2	_	_	_	
28-28	7293-7296	len	_	_	_	
28-29	7297-7298	(	_	_	_	
28-30	7298-7301	rec	_	_	_	
28-31	7301-7302	/	_	_	_	
28-32	7302-7305	tot	_	_	_	
28-33	7305-7306	)	_	_	_	
28-34	7306-7307	:	_	_	_	
28-35	7308-7310	58	_	_	_	
28-36	7310-7311	/	_	_	_	
28-37	7312-7314	58	_	_	_	
28-38	7314-7315	,	_	_	_	
28-39	7316-7318	tx	_	_	_	
28-40	7318-7319	:	_	_	_	
28-41	7320-7321	0	_	_	_	
28-42	7321-7322	,	_	_	_	
28-43	7323-7326	lsn	_	_	_	
28-44	7326-7327	:	_	_	_	
28-45	7328-7329	0	_	_	_	
28-46	7329-7330	/	_	_	_	
28-47	7330-7338	353AF21C	_	_	_	
28-48	7338-7339	,	_	_	_	
28-49	7340-7344	prev	_	_	_	
28-50	7345-7346	0	_	_	_	
28-51	7346-7347	/	_	_	_	
28-52	7347-7355	353AF044	_	_	_	
28-53	7355-7356	,	_	_	_	
28-54	7357-7361	desc	_	_	_	
28-55	7361-7362	:	_	_	_	
28-56	7363-7368	CLEAN	_	_	_	
28-57	7369-7375	remxid	_	_	_	
28-58	7376-7382	101128	_	_	_	
28-59	7382-7383	,	_	_	_	
28-60	7384-7390	blkref	_	_	_	
28-61	7391-7393	#0	_	_	_	
28-62	7393-7394	:	_	_	_	
28-63	7395-7398	rel	_	_	_	
28-64	7399-7403	1663	_	_	_	
28-65	7403-7404	/	_	_	_	
28-66	7404-7409	16386	_	_	_	
28-67	7409-7410	/	_	_	_	
28-68	7410-7414	1247	_	_	_	
28-69	7415-7418	blk	_	_	_	
28-70	7419-7420	8	_	_	_	

#Text=rmgr: XLOG len (rec/tot): 30/ 30, tx: 0, lsn: 0/353AF258, prev 0/353AF21C, desc: NEXTOID 82298 rmgr: Storage
29-1	7421-7425	rmgr	_	_	_	
29-2	7425-7426	:	_	_	_	
29-3	7427-7431	XLOG	_	_	_	
29-4	7432-7435	len	_	_	_	
29-5	7436-7437	(	_	_	_	
29-6	7437-7440	rec	_	_	_	
29-7	7440-7441	/	_	_	_	
29-8	7441-7444	tot	_	_	_	
29-9	7444-7445	)	_	_	_	
29-10	7445-7446	:	_	_	_	
29-11	7447-7449	30	_	_	_	
29-12	7449-7450	/	_	_	_	
29-13	7451-7453	30	_	_	_	
29-14	7453-7454	,	_	_	_	
29-15	7455-7457	tx	_	_	_	
29-16	7457-7458	:	_	_	_	
29-17	7459-7460	0	_	_	_	
29-18	7460-7461	,	_	_	_	
29-19	7462-7465	lsn	_	_	_	
29-20	7465-7466	:	_	_	_	
29-21	7467-7468	0	_	_	_	
29-22	7468-7469	/	_	_	_	
29-23	7469-7477	353AF258	_	_	_	
29-24	7477-7478	,	_	_	_	
29-25	7479-7483	prev	_	_	_	
29-26	7484-7485	0	_	_	_	
29-27	7485-7486	/	_	_	_	
29-28	7486-7494	353AF21C	_	_	_	
29-29	7494-7495	,	_	_	_	
29-30	7496-7500	desc	_	_	_	
29-31	7500-7501	:	_	_	_	
29-32	7502-7509	NEXTOID	_	_	_	
29-33	7510-7515	82298	_	_	_	
29-34	7516-7520	rmgr	_	_	_	
29-35	7520-7521	:	_	_	_	
29-36	7522-7529	Storage	_	_	_	

#Text=len (rec/tot): 42/ 42, tx: 0, lsn: 0/353AF278, prev 0/353AF258, desc: CREATE base/16386/74106 rmgr: Heap
30-1	7530-7533	len	_	_	_	
30-2	7534-7535	(	_	_	_	
30-3	7535-7538	rec	_	_	_	
30-4	7538-7539	/	_	_	_	
30-5	7539-7542	tot	_	_	_	
30-6	7542-7543	)	_	_	_	
30-7	7543-7544	:	_	_	_	
30-8	7545-7547	42	_	_	_	
30-9	7547-7548	/	_	_	_	
30-10	7549-7551	42	_	_	_	
30-11	7551-7552	,	_	_	_	
30-12	7553-7555	tx	_	_	_	
30-13	7555-7556	:	_	_	_	
30-14	7557-7558	0	_	_	_	
30-15	7558-7559	,	_	_	_	
30-16	7560-7563	lsn	_	_	_	
30-17	7563-7564	:	_	_	_	
30-18	7565-7566	0	_	_	_	
30-19	7566-7567	/	_	_	_	
30-20	7567-7575	353AF278	_	_	_	
30-21	7575-7576	,	_	_	_	
30-22	7577-7581	prev	_	_	_	
30-23	7582-7583	0	_	_	_	
30-24	7583-7584	/	_	_	_	
30-25	7584-7592	353AF258	_	_	_	
30-26	7592-7593	,	_	_	_	
30-27	7594-7598	desc	_	_	_	
30-28	7598-7599	:	_	_	_	
30-29	7600-7606	CREATE	_	_	_	
30-30	7607-7611	base	_	_	_	
30-31	7611-7612	/	_	_	_	
30-32	7612-7617	16386	_	_	_	
30-33	7617-7618	/	_	_	_	
30-34	7618-7623	74106	_	_	_	
30-35	7624-7628	rmgr	_	_	_	
30-36	7628-7629	:	_	_	_	
30-37	7630-7634	Heap	_	_	_	

#Text=len (rec/tot): 203/ 203, tx: 101129, lsn: 0/353AF2A4, prev 0/353AF278, desc: INSERT off 73, blkref #0: rel 1663/16386/1247 blk 8
31-1	7635-7638	len	_	_	_	
31-2	7639-7640	(	_	_	_	
31-3	7640-7643	rec	_	_	_	
31-4	7643-7644	/	_	_	_	
31-5	7644-7647	tot	_	_	_	
31-6	7647-7648	)	_	_	_	
31-7	7648-7649	:	_	_	_	
31-8	7650-7653	203	_	_	_	
31-9	7653-7654	/	_	_	_	
31-10	7655-7658	203	_	_	_	
31-11	7658-7659	,	_	_	_	
31-12	7660-7662	tx	_	_	_	
31-13	7662-7663	:	_	_	_	
31-14	7664-7670	101129	_	_	_	
31-15	7670-7671	,	_	_	_	
31-16	7672-7675	lsn	_	_	_	
31-17	7675-7676	:	_	_	_	
31-18	7677-7678	0	_	_	_	
31-19	7678-7679	/	_	_	_	
31-20	7679-7687	353AF2A4	_	_	_	
31-21	7687-7688	,	_	_	_	
31-22	7689-7693	prev	_	_	_	
31-23	7694-7695	0	_	_	_	
31-24	7695-7696	/	_	_	_	
31-25	7696-7704	353AF278	_	_	_	
31-26	7704-7705	,	_	_	_	
31-27	7706-7710	desc	_	_	_	
31-28	7710-7711	:	_	_	_	
31-29	7712-7718	INSERT	_	_	_	
31-30	7719-7722	off	_	_	_	
31-31	7723-7725	73	_	_	_	
31-32	7725-7726	,	_	_	_	
31-33	7727-7733	blkref	_	_	_	
31-34	7734-7736	#0	_	_	_	
31-35	7736-7737	:	_	_	_	
31-36	7738-7741	rel	_	_	_	
31-37	7742-7746	1663	_	_	_	
31-38	7746-7747	/	_	_	_	
31-39	7747-7752	16386	_	_	_	
31-40	7752-7753	/	_	_	_	
31-41	7753-7757	1247	_	_	_	
31-42	7758-7761	blk	_	_	_	
31-43	7762-7763	8	_	_	_	

#Text=rmgr: Btree len (rec/tot): 53/ 717, tx: 101129, lsn: 0/353AF370, prev 0/353AF2A4, … rmgr: Btree
32-1	7764-7768	rmgr	_	_	_	
32-2	7768-7769	:	_	_	_	
32-3	7770-7775	Btree	_	_	_	
32-4	7776-7779	len	_	_	_	
32-5	7780-7781	(	_	_	_	
32-6	7781-7784	rec	_	_	_	
32-7	7784-7785	/	_	_	_	
32-8	7785-7788	tot	_	_	_	
32-9	7788-7789	)	_	_	_	
32-10	7789-7790	:	_	_	_	
32-11	7791-7793	53	_	_	_	
32-12	7793-7794	/	_	_	_	
32-13	7795-7798	717	_	_	_	
32-14	7798-7799	,	_	_	_	
32-15	7800-7802	tx	_	_	_	
32-16	7802-7803	:	_	_	_	
32-17	7804-7810	101129	_	_	_	
32-18	7810-7811	,	_	_	_	
32-19	7812-7815	lsn	_	_	_	
32-20	7815-7816	:	_	_	_	
32-21	7817-7818	0	_	_	_	
32-22	7818-7819	/	_	_	_	
32-23	7819-7827	353AF370	_	_	_	
32-24	7827-7828	,	_	_	_	
32-25	7829-7833	prev	_	_	_	
32-26	7834-7835	0	_	_	_	
32-27	7835-7836	/	_	_	_	
32-28	7836-7844	353AF2A4	_	_	_	
32-29	7844-7845	,	_	_	_	
32-30	7846-7847	…	_	_	_	
32-31	7848-7852	rmgr	_	_	_	
32-32	7852-7853	:	_	_	_	
32-33	7854-7859	Btree	_	_	_	

#Text=len (rec/tot): 53/ 2413, tx: 101129, lsn: 0/353BD954, prev 0/353BCC44, desc: INSERT_LEAF off 10, blkref #0: rel 1664/0/1233 blk 1 FPW
33-1	7860-7863	len	_	_	_	
33-2	7864-7865	(	_	_	_	
33-3	7865-7868	rec	_	_	_	
33-4	7868-7869	/	_	_	_	
33-5	7869-7872	tot	_	_	_	
33-6	7872-7873	)	_	_	_	
33-7	7873-7874	:	_	_	_	
33-8	7875-7877	53	_	_	_	
33-9	7877-7878	/	_	_	_	
33-10	7879-7883	2413	_	_	_	
33-11	7883-7884	,	_	_	_	
33-12	7885-7887	tx	_	_	_	
33-13	7887-7888	:	_	_	_	
33-14	7889-7895	101129	_	_	_	
33-15	7895-7896	,	_	_	_	
33-16	7897-7900	lsn	_	_	_	
33-17	7900-7901	:	_	_	_	
33-18	7902-7903	0	_	_	_	
33-19	7903-7904	/	_	_	_	
33-20	7904-7912	353BD954	_	_	_	
33-21	7912-7913	,	_	_	_	
33-22	7914-7918	prev	_	_	_	
33-23	7919-7920	0	_	_	_	
33-24	7920-7921	/	_	_	_	
33-25	7921-7929	353BCC44	_	_	_	
33-26	7929-7930	,	_	_	_	
33-27	7931-7935	desc	_	_	_	
33-28	7935-7936	:	_	_	_	
33-29	7937-7948	INSERT_LEAF	_	_	_	
33-30	7949-7952	off	_	_	_	
33-31	7953-7955	10	_	_	_	
33-32	7955-7956	,	_	_	_	
33-33	7957-7963	blkref	_	_	_	
33-34	7964-7966	#0	_	_	_	
33-35	7966-7967	:	_	_	_	
33-36	7968-7971	rel	_	_	_	
33-37	7972-7976	1664	_	_	_	
33-38	7976-7977	/	_	_	_	
33-39	7977-7978	0	_	_	_	
33-40	7978-7979	/	_	_	_	
33-41	7979-7983	1233	_	_	_	
33-42	7984-7987	blk	_	_	_	
33-43	7988-7989	1	_	_	_	
33-44	7990-7993	FPW	_	_	_	

#Text=And this is something new. The record of the exclusive lock, related to the Standby manager — here it is the lock on the transaction ID (we will discuss why it is needed in the next series of articles): rmgr: Standby len (rec/tot): 42/ 42, tx: 101129, lsn: 0/353BE2D8, prev 0/353BD954, desc: LOCK xid 101129 db 16386 rel 74106
34-1	7994-7997	And	_	_	_	
34-2	7998-8002	this	_	_	_	
34-3	8003-8005	is	_	_	_	
34-4	8006-8015	something	_	_	_	
34-5	8016-8019	new	_	_	_	
34-6	8019-8020	.	_	_	_	
34-7	8021-8024	The	_	_	_	
34-8	8025-8031	record	_	_	_	
34-9	8032-8034	of	_	_	_	
34-10	8035-8038	the	_	_	_	
34-11	8039-8048	exclusive	_	_	_	
34-12	8049-8053	lock	_	_	_	
34-13	8053-8054	,	_	_	_	
34-14	8055-8062	related	_	_	_	
34-15	8063-8065	to	_	_	_	
34-16	8066-8069	the	_	_	_	
34-17	8070-8077	Standby	_	_	_	
34-18	8078-8085	manager	_	_	_	
34-19	8085-8086	 	_	_	_	
34-20	8086-8087	—	_	_	_	
34-21	8088-8092	here	_	_	_	
34-22	8093-8095	it	_	_	_	
34-23	8096-8098	is	_	_	_	
34-24	8099-8102	the	_	_	_	
34-25	8103-8107	lock	_	_	_	
34-26	8108-8110	on	_	_	_	
34-27	8111-8114	the	_	_	_	
34-28	8115-8126	transaction	_	_	_	
34-29	8127-8129	ID	_	_	_	
34-30	8130-8131	(	_	_	_	
34-31	8131-8133	we	_	_	_	
34-32	8134-8138	will	_	_	_	
34-33	8139-8146	discuss	_	_	_	
34-34	8147-8150	why	_	_	_	
34-35	8151-8153	it	_	_	_	
34-36	8154-8156	is	_	_	_	
34-37	8157-8163	needed	_	_	_	
34-38	8164-8166	in	_	_	_	
34-39	8167-8170	the	_	_	_	
34-40	8171-8175	next	_	_	_	
34-41	8176-8182	series	_	_	_	
34-42	8183-8185	of	_	_	_	
34-43	8186-8194	articles	_	_	_	
34-44	8194-8195	)	_	_	_	
34-45	8195-8196	:	_	_	_	
34-46	8197-8201	rmgr	_	_	_	
34-47	8201-8202	:	_	_	_	
34-48	8203-8210	Standby	_	_	_	
34-49	8211-8214	len	_	_	_	
34-50	8215-8216	(	_	_	_	
34-51	8216-8219	rec	_	_	_	
34-52	8219-8220	/	_	_	_	
34-53	8220-8223	tot	_	_	_	
34-54	8223-8224	)	_	_	_	
34-55	8224-8225	:	_	_	_	
34-56	8226-8228	42	_	_	_	
34-57	8228-8229	/	_	_	_	
34-58	8230-8232	42	_	_	_	
34-59	8232-8233	,	_	_	_	
34-60	8234-8236	tx	_	_	_	
34-61	8236-8237	:	_	_	_	
34-62	8238-8244	101129	_	_	_	
34-63	8244-8245	,	_	_	_	
34-64	8246-8249	lsn	_	_	_	
34-65	8249-8250	:	_	_	_	
34-66	8251-8252	0	_	_	_	
34-67	8252-8253	/	_	_	_	
34-68	8253-8261	353BE2D8	_	_	_	
34-69	8261-8262	,	_	_	_	
34-70	8263-8267	prev	_	_	_	
34-71	8268-8269	0	_	_	_	
34-72	8269-8270	/	_	_	_	
34-73	8270-8278	353BD954	_	_	_	
34-74	8278-8279	,	_	_	_	
34-75	8280-8284	desc	_	_	_	
34-76	8284-8285	:	_	_	_	
34-77	8286-8290	LOCK	_	_	_	
34-78	8291-8294	xid	_	_	_	
34-79	8295-8301	101129	_	_	_	
34-80	8302-8304	db	_	_	_	
34-81	8305-8310	16386	_	_	_	
34-82	8311-8314	rel	_	_	_	
34-83	8315-8320	74106	_	_	_	

#Text=And this is the record of row inserts in our table (compare the file number rel with the one in the CREATE record): rmgr: Heap len (rec/tot): 59/ 59, tx: 101129, lsn: 0/353BE304, prev 0/353BE2D8, desc: INSERT+INIT off 1, blkref #0: rel 1663/16386/74106 blk 0
35-1	8321-8324	And	_	_	_	
35-2	8325-8329	this	_	_	_	
35-3	8330-8332	is	_	_	_	
35-4	8333-8336	the	_	_	_	
35-5	8337-8343	record	_	_	_	
35-6	8344-8346	of	_	_	_	
35-7	8347-8350	row	_	_	_	
35-8	8351-8358	inserts	_	_	_	
35-9	8359-8361	in	_	_	_	
35-10	8362-8365	our	_	_	_	
35-11	8366-8371	table	_	_	_	
35-12	8372-8373	(	_	_	_	
35-13	8373-8380	compare	_	_	_	
35-14	8381-8384	the	_	_	_	
35-15	8385-8389	file	_	_	_	
35-16	8390-8396	number	_	_	_	
35-17	8397-8400	rel	_	_	_	
35-18	8401-8405	with	_	_	_	
35-19	8406-8409	the	_	_	_	
35-20	8410-8413	one	_	_	_	
35-21	8414-8416	in	_	_	_	
35-22	8417-8420	the	_	_	_	
35-23	8421-8427	CREATE	_	_	_	
35-24	8428-8434	record	_	_	_	
35-25	8434-8435	)	_	_	_	
35-26	8435-8436	:	_	_	_	
35-27	8437-8441	rmgr	_	_	_	
35-28	8441-8442	:	_	_	_	
35-29	8443-8447	Heap	_	_	_	
35-30	8448-8451	len	_	_	_	
35-31	8452-8453	(	_	_	_	
35-32	8453-8456	rec	_	_	_	
35-33	8456-8457	/	_	_	_	
35-34	8457-8460	tot	_	_	_	
35-35	8460-8461	)	_	_	_	
35-36	8461-8462	:	_	_	_	
35-37	8463-8465	59	_	_	_	
35-38	8465-8466	/	_	_	_	
35-39	8467-8469	59	_	_	_	
35-40	8469-8470	,	_	_	_	
35-41	8471-8473	tx	_	_	_	
35-42	8473-8474	:	_	_	_	
35-43	8475-8481	101129	_	_	_	
35-44	8481-8482	,	_	_	_	
35-45	8483-8486	lsn	_	_	_	
35-46	8486-8487	:	_	_	_	
35-47	8488-8489	0	_	_	_	
35-48	8489-8490	/	_	_	_	
35-49	8490-8498	353BE304	_	_	_	
35-50	8498-8499	,	_	_	_	
35-51	8500-8504	prev	_	_	_	
35-52	8505-8506	0	_	_	_	
35-53	8506-8507	/	_	_	_	
35-54	8507-8515	353BE2D8	_	_	_	
35-55	8515-8516	,	_	_	_	
35-56	8517-8521	desc	_	_	_	
35-57	8521-8522	:	_	_	_	
35-58	8523-8529	INSERT	_	_	_	
35-59	8529-8530	+	_	_	_	
35-60	8530-8534	INIT	_	_	_	
35-61	8535-8538	off	_	_	_	
35-62	8539-8540	1	_	_	_	
35-63	8540-8541	,	_	_	_	
35-64	8542-8548	blkref	_	_	_	
35-65	8549-8551	#0	_	_	_	
35-66	8551-8552	:	_	_	_	
35-67	8553-8556	rel	_	_	_	
35-68	8557-8561	1663	_	_	_	
35-69	8561-8562	/	_	_	_	
35-70	8562-8567	16386	_	_	_	
35-71	8567-8568	/	_	_	_	
35-72	8568-8573	74106	_	_	_	
35-73	8574-8577	blk	_	_	_	
35-74	8578-8579	0	_	_	_	

#Text=This is the commit record: rmgr: Transaction len (rec/tot): 421/ 421, tx:
36-1	8580-8584	This	_	_	_	
36-2	8585-8587	is	_	_	_	
36-3	8588-8591	the	_	_	_	
36-4	8592-8598	commit	_	_	_	
36-5	8599-8605	record	_	_	_	
36-6	8605-8606	:	_	_	_	
36-7	8607-8611	rmgr	_	_	_	
36-8	8611-8612	:	_	_	_	
36-9	8613-8624	Transaction	_	_	_	
36-10	8625-8628	len	_	_	_	
36-11	8629-8630	(	_	_	_	
36-12	8630-8633	rec	_	_	_	
36-13	8633-8634	/	_	_	_	
36-14	8634-8637	tot	_	_	_	
36-15	8637-8638	)	_	_	_	
36-16	8638-8639	:	_	_	_	
36-17	8640-8643	421	_	_	_	
36-18	8643-8644	/	_	_	_	
36-19	8645-8648	421	_	_	_	
36-20	8648-8649	,	_	_	_	
36-21	8650-8652	tx	_	_	_	
36-22	8652-8653	:	_	_	_	

#Text=101129, lsn: 0/353BE340, prev 0/353BE304, desc: COMMIT 2019-07-23 18:59:37.870333 MSK; inval msgs: catcache 74 catcache 73 catcache 74 catcache 73 catcache 50 catcache 49 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 snapshot 2608 relcache 74106 snapshot 1214 And there is one more record, which occurs from time to time and is not tied to the completed transaction, relates to the Standby manager and informs of the transactions being executed at this point in time: rmgr: Standby len (rec/tot):
37-1	8654-8660	101129	_	_	_	
37-2	8660-8661	,	_	_	_	
37-3	8662-8665	lsn	_	_	_	
37-4	8665-8666	:	_	_	_	
37-5	8667-8668	0	_	_	_	
37-6	8668-8669	/	_	_	_	
37-7	8669-8677	353BE340	_	_	_	
37-8	8677-8678	,	_	_	_	
37-9	8679-8683	prev	_	_	_	
37-10	8684-8685	0	_	_	_	
37-11	8685-8686	/	_	_	_	
37-12	8686-8694	353BE304	_	_	_	
37-13	8694-8695	,	_	_	_	
37-14	8696-8700	desc	_	_	_	
37-15	8700-8701	:	_	_	_	
37-16	8702-8708	COMMIT	_	_	_	
37-17	8709-8713	2019	_	_	_	
37-18	8713-8714	-	_	_	_	
37-19	8714-8716	07	_	_	_	
37-20	8716-8717	-	_	_	_	
37-21	8717-8719	23	_	_	_	
37-22	8720-8722	18	_	_	_	
37-23	8722-8723	:	_	_	_	
37-24	8723-8725	59	_	_	_	
37-25	8725-8726	:	_	_	_	
37-26	8726-8735	37.870333	_	_	_	
37-27	8736-8739	MSK	_	_	_	
37-28	8739-8740	;	_	_	_	
37-29	8741-8746	inval	_	_	_	
37-30	8747-8751	msgs	_	_	_	
37-31	8751-8752	:	_	_	_	
37-32	8753-8761	catcache	_	_	_	
37-33	8762-8764	74	_	_	_	
37-34	8765-8773	catcache	_	_	_	
37-35	8774-8776	73	_	_	_	
37-36	8777-8785	catcache	_	_	_	
37-37	8786-8788	74	_	_	_	
37-38	8789-8797	catcache	_	_	_	
37-39	8798-8800	73	_	_	_	
37-40	8801-8809	catcache	_	_	_	
37-41	8810-8812	50	_	_	_	
37-42	8813-8821	catcache	_	_	_	
37-43	8822-8824	49	_	_	_	
37-44	8825-8833	catcache	_	_	_	
37-45	8834-8835	7	_	_	_	
37-46	8836-8844	catcache	_	_	_	
37-47	8845-8846	6	_	_	_	
37-48	8847-8855	catcache	_	_	_	
37-49	8856-8857	7	_	_	_	
37-50	8858-8866	catcache	_	_	_	
37-51	8867-8868	6	_	_	_	
37-52	8869-8877	catcache	_	_	_	
37-53	8878-8879	7	_	_	_	
37-54	8880-8888	catcache	_	_	_	
37-55	8889-8890	6	_	_	_	
37-56	8891-8899	catcache	_	_	_	
37-57	8900-8901	7	_	_	_	
37-58	8902-8910	catcache	_	_	_	
37-59	8911-8912	6	_	_	_	
37-60	8913-8921	catcache	_	_	_	
37-61	8922-8923	7	_	_	_	
37-62	8924-8932	catcache	_	_	_	
37-63	8933-8934	6	_	_	_	
37-64	8935-8943	catcache	_	_	_	
37-65	8944-8945	7	_	_	_	
37-66	8946-8954	catcache	_	_	_	
37-67	8955-8956	6	_	_	_	
37-68	8957-8965	catcache	_	_	_	
37-69	8966-8967	7	_	_	_	
37-70	8968-8976	catcache	_	_	_	
37-71	8977-8978	6	_	_	_	
37-72	8979-8987	snapshot	_	_	_	
37-73	8988-8992	2608	_	_	_	
37-74	8993-9001	relcache	_	_	_	
37-75	9002-9007	74106	_	_	_	
37-76	9008-9016	snapshot	_	_	_	
37-77	9017-9021	1214	_	_	_	
37-78	9022-9025	And	_	_	_	
37-79	9026-9031	there	_	_	_	
37-80	9032-9034	is	_	_	_	
37-81	9035-9038	one	_	_	_	
37-82	9039-9043	more	_	_	_	
37-83	9044-9050	record	_	_	_	
37-84	9050-9051	,	_	_	_	
37-85	9052-9057	which	_	_	_	
37-86	9058-9064	occurs	_	_	_	
37-87	9065-9069	from	_	_	_	
37-88	9070-9074	time	_	_	_	
37-89	9075-9077	to	_	_	_	
37-90	9078-9082	time	_	_	_	
37-91	9083-9086	and	_	_	_	
37-92	9087-9089	is	_	_	_	
37-93	9090-9093	not	_	_	_	
37-94	9094-9098	tied	_	_	_	
37-95	9099-9101	to	_	_	_	
37-96	9102-9105	the	_	_	_	
37-97	9106-9115	completed	_	_	_	
37-98	9116-9127	transaction	_	_	_	
37-99	9127-9128	,	_	_	_	
37-100	9129-9136	relates	_	_	_	
37-101	9137-9139	to	_	_	_	
37-102	9140-9143	the	_	_	_	
37-103	9144-9151	Standby	_	_	_	
37-104	9152-9159	manager	_	_	_	
37-105	9160-9163	and	_	_	_	
37-106	9164-9171	informs	_	_	_	
37-107	9172-9174	of	_	_	_	
37-108	9175-9178	the	_	_	_	
37-109	9179-9191	transactions	_	_	_	
37-110	9192-9197	being	_	_	_	
37-111	9198-9206	executed	_	_	_	
37-112	9207-9209	at	_	_	_	
37-113	9210-9214	this	_	_	_	
37-114	9215-9220	point	_	_	_	
37-115	9221-9223	in	_	_	_	
37-116	9224-9228	time	_	_	_	
37-117	9228-9229	:	_	_	_	
37-118	9230-9234	rmgr	_	_	_	
37-119	9234-9235	:	_	_	_	
37-120	9236-9243	Standby	_	_	_	
37-121	9244-9247	len	_	_	_	
37-122	9248-9249	(	_	_	_	
37-123	9249-9252	rec	_	_	_	
37-124	9252-9253	/	_	_	_	
37-125	9253-9256	tot	_	_	_	
37-126	9256-9257	)	_	_	_	
37-127	9257-9258	:	_	_	_	

#Text=50/ 50, tx: 0, lsn: 0/353BE4E8, prev 0/353BE340, desc: RUNNING_XACTS nextXid 101130 latestCompletedXid 101129 oldestRunningXid 101130
38-1	9259-9261	50	_	_	_	
38-2	9261-9262	/	_	_	_	
38-3	9263-9265	50	_	_	_	
38-4	9265-9266	,	_	_	_	
38-5	9267-9269	tx	_	_	_	
38-6	9269-9270	:	_	_	_	
38-7	9271-9272	0	_	_	_	
38-8	9272-9273	,	_	_	_	
38-9	9274-9277	lsn	_	_	_	
38-10	9277-9278	:	_	_	_	
38-11	9279-9280	0	_	_	_	
38-12	9280-9281	/	_	_	_	
38-13	9281-9289	353BE4E8	_	_	_	
38-14	9289-9290	,	_	_	_	
38-15	9291-9295	prev	_	_	_	
38-16	9296-9297	0	_	_	_	
38-17	9297-9298	/	_	_	_	
38-18	9298-9306	353BE340	_	_	_	
38-19	9306-9307	,	_	_	_	
38-20	9308-9312	desc	_	_	_	
38-21	9312-9313	:	_	_	_	
38-22	9314-9327	RUNNING_XACTS	_	_	_	
38-23	9328-9335	nextXid	_	_	_	
38-24	9336-9342	101130	_	_	_	
38-25	9343-9361	latestCompletedXid	_	_	_	
38-26	9362-9368	101129	_	_	_	
38-27	9369-9385	oldestRunningXid	_	_	_	
38-28	9386-9392	101130	_	_	_	

#Text=Logical And finally, the last level is specified by the value of wal_level = logical and provides for logical decoding and logical replication. It must be turned on for the publishing server.
39-1	9393-9400	Logical	_	_	_	
39-2	9401-9404	And	_	_	_	
39-3	9405-9412	finally	_	_	_	
39-4	9412-9413	,	_	_	_	
39-5	9414-9417	the	_	_	_	
39-6	9418-9422	last	_	_	_	
39-7	9423-9428	level	_	_	_	
39-8	9429-9431	is	_	_	_	
39-9	9432-9441	specified	_	_	_	
39-10	9442-9444	by	_	_	_	
39-11	9445-9448	the	_	_	_	
39-12	9449-9454	value	_	_	_	
39-13	9455-9457	of	_	_	_	
39-14	9458-9467	wal_level	_	_	_	
39-15	9468-9469	=	_	_	_	
39-16	9470-9477	logical	_	_	_	
39-17	9478-9481	and	_	_	_	
39-18	9482-9490	provides	_	_	_	
39-19	9491-9494	for	_	_	_	
39-20	9495-9502	logical	_	_	_	
39-21	9503-9511	decoding	_	_	_	
39-22	9512-9515	and	_	_	_	
39-23	9516-9523	logical	_	_	_	
39-24	9524-9535	replication	_	_	_	
39-25	9535-9536	.	_	_	_	
39-26	9537-9539	It	_	_	_	
39-27	9540-9544	must	_	_	_	
39-28	9545-9547	be	_	_	_	
39-29	9548-9554	turned	_	_	_	
39-30	9555-9557	on	_	_	_	
39-31	9558-9561	for	_	_	_	
39-32	9562-9565	the	_	_	_	
39-33	9566-9576	publishing	_	_	_	
39-34	9577-9583	server	_	_	_	
39-35	9583-9584	.	_	_	_	

#Text=From the perspective of WAL records, this level is virtually the same as replica: records are added that relate to replication origins, as well as arbitrary logical records that applications can add to WAL. But logical decoding mainly depends on the information on the transactions being executed since it is needed to create the data snapshot to track changes to the system catalog. We will not go into details of backup and replication now since this is a topic for a separate series of articles. Reliability of writing It's clear that a logging technique must be reliable and ensure recovery whatever the circumstances (certainly, not related to corruption of the data storage media). Many things affect reliability, of which we will discuss caching, corruption of data and atomicity of writing.
40-1	9585-9589	From	_	_	_	
40-2	9590-9593	the	_	_	_	
40-3	9594-9605	perspective	_	_	_	
40-4	9606-9608	of	_	_	_	
40-5	9609-9612	WAL	_	_	_	
40-6	9613-9620	records	_	_	_	
40-7	9620-9621	,	_	_	_	
40-8	9622-9626	this	_	_	_	
40-9	9627-9632	level	_	_	_	
40-10	9633-9635	is	_	_	_	
40-11	9636-9645	virtually	_	_	_	
40-12	9646-9649	the	_	_	_	
40-13	9650-9654	same	_	_	_	
40-14	9655-9657	as	_	_	_	
40-15	9658-9665	replica	_	_	_	
40-16	9665-9666	:	_	_	_	
40-17	9667-9674	records	_	_	_	
40-18	9675-9678	are	_	_	_	
40-19	9679-9684	added	_	_	_	
40-20	9685-9689	that	_	_	_	
40-21	9690-9696	relate	_	_	_	
40-22	9697-9699	to	_	_	_	
40-23	9700-9711	replication	_	_	_	
40-24	9712-9719	origins	_	_	_	
40-25	9719-9720	,	_	_	_	
40-26	9721-9723	as	_	_	_	
40-27	9724-9728	well	_	_	_	
40-28	9729-9731	as	_	_	_	
40-29	9732-9741	arbitrary	_	_	_	
40-30	9742-9749	logical	_	_	_	
40-31	9750-9757	records	_	_	_	
40-32	9758-9762	that	_	_	_	
40-33	9763-9775	applications	_	_	_	
40-34	9776-9779	can	_	_	_	
40-35	9780-9783	add	_	_	_	
40-36	9784-9786	to	_	_	_	
40-37	9787-9790	WAL	_	_	_	
40-38	9790-9791	.	_	_	_	
40-39	9792-9795	But	_	_	_	
40-40	9796-9803	logical	_	_	_	
40-41	9804-9812	decoding	_	_	_	
40-42	9813-9819	mainly	_	_	_	
40-43	9820-9827	depends	_	_	_	
40-44	9828-9830	on	_	_	_	
40-45	9831-9834	the	_	_	_	
40-46	9835-9846	information	_	_	_	
40-47	9847-9849	on	_	_	_	
40-48	9850-9853	the	_	_	_	
40-49	9854-9866	transactions	_	_	_	
40-50	9867-9872	being	_	_	_	
40-51	9873-9881	executed	_	_	_	
40-52	9882-9887	since	_	_	_	
40-53	9888-9890	it	_	_	_	
40-54	9891-9893	is	_	_	_	
40-55	9894-9900	needed	_	_	_	
40-56	9901-9903	to	_	_	_	
40-57	9904-9910	create	_	_	_	
40-58	9911-9914	the	_	_	_	
40-59	9915-9919	data	_	_	_	
40-60	9920-9928	snapshot	_	_	_	
40-61	9929-9931	to	_	_	_	
40-62	9932-9937	track	_	_	_	
40-63	9938-9945	changes	_	_	_	
40-64	9946-9948	to	_	_	_	
40-65	9949-9952	the	_	_	_	
40-66	9953-9959	system	_	_	_	
40-67	9960-9967	catalog	_	_	_	
40-68	9967-9968	.	_	_	_	
40-69	9969-9971	We	_	_	_	
40-70	9972-9976	will	_	_	_	
40-71	9977-9980	not	_	_	_	
40-72	9981-9983	go	_	_	_	
40-73	9984-9988	into	_	_	_	
40-74	9989-9996	details	_	_	_	
40-75	9997-9999	of	_	_	_	
40-76	10000-10006	backup	_	_	_	
40-77	10007-10010	and	_	_	_	
40-78	10011-10022	replication	_	_	_	
40-79	10023-10026	now	_	_	_	
40-80	10027-10032	since	_	_	_	
40-81	10033-10037	this	_	_	_	
40-82	10038-10040	is	_	_	_	
40-83	10041-10042	a	_	_	_	
40-84	10043-10048	topic	_	_	_	
40-85	10049-10052	for	_	_	_	
40-86	10053-10054	a	_	_	_	
40-87	10055-10063	separate	_	_	_	
40-88	10064-10070	series	_	_	_	
40-89	10071-10073	of	_	_	_	
40-90	10074-10082	articles	_	_	_	
40-91	10082-10083	.	_	_	_	
40-92	10084-10095	Reliability	_	_	_	
40-93	10096-10098	of	_	_	_	
40-94	10099-10106	writing	_	_	_	
40-95	10107-10111	It's	_	_	_	
40-96	10112-10117	clear	_	_	_	
40-97	10118-10122	that	_	_	_	
40-98	10123-10124	a	_	_	_	
40-99	10125-10132	logging	_	_	_	
40-100	10133-10142	technique	_	_	_	
40-101	10143-10147	must	_	_	_	
40-102	10148-10150	be	_	_	_	
40-103	10151-10159	reliable	_	_	_	
40-104	10160-10163	and	_	_	_	
40-105	10164-10170	ensure	_	_	_	
40-106	10171-10179	recovery	_	_	_	
40-107	10180-10188	whatever	_	_	_	
40-108	10189-10192	the	_	_	_	
40-109	10193-10206	circumstances	_	_	_	
40-110	10207-10208	(	_	_	_	
40-111	10208-10217	certainly	_	_	_	
40-112	10217-10218	,	_	_	_	
40-113	10219-10222	not	_	_	_	
40-114	10223-10230	related	_	_	_	
40-115	10231-10233	to	_	_	_	
40-116	10234-10244	corruption	_	_	_	
40-117	10245-10247	of	_	_	_	
40-118	10248-10251	the	_	_	_	
40-119	10252-10256	data	_	_	_	
40-120	10257-10264	storage	_	_	_	
40-121	10265-10270	media	_	_	_	
40-122	10270-10271	)	_	_	_	
40-123	10271-10272	.	_	_	_	
40-124	10273-10277	Many	_	_	_	
40-125	10278-10284	things	_	_	_	
40-126	10285-10291	affect	_	_	_	
40-127	10292-10303	reliability	_	_	_	
40-128	10303-10304	,	_	_	_	
40-129	10305-10307	of	_	_	_	
40-130	10308-10313	which	_	_	_	
40-131	10314-10316	we	_	_	_	
40-132	10317-10321	will	_	_	_	
40-133	10322-10329	discuss	_	_	_	
40-134	10330-10337	caching	_	_	_	
40-135	10337-10338	,	_	_	_	
40-136	10339-10349	corruption	_	_	_	
40-137	10350-10352	of	_	_	_	
40-138	10353-10357	data	_	_	_	
40-139	10358-10361	and	_	_	_	
40-140	10362-10371	atomicity	_	_	_	
40-141	10372-10374	of	_	_	_	
40-142	10375-10382	writing	_	_	_	
40-143	10382-10383	.	_	_	_	

#Text=Caching Multiple caches stand in the way of data to a nonvolatile storage (such as a hard disk drive platter). If a program (any, but PostgreSQL in this case) asks the operating system (OS) to write something on disk, the OS transfers the data to its RAM cache. Writing actually happens asynchronously, depending on the settings of I/O scheduler of the OS.
41-1	10384-10391	Caching	_	_	_	
41-2	10392-10400	Multiple	_	_	_	
41-3	10401-10407	caches	_	_	_	
41-4	10408-10413	stand	_	_	_	
41-5	10414-10416	in	_	_	_	
41-6	10417-10420	the	_	_	_	
41-7	10421-10424	way	_	_	_	
41-8	10425-10427	of	_	_	_	
41-9	10428-10432	data	_	_	_	
41-10	10433-10435	to	_	_	_	
41-11	10436-10437	a	_	_	_	
41-12	10438-10449	nonvolatile	_	_	_	
41-13	10450-10457	storage	_	_	_	
41-14	10458-10459	(	_	_	_	
41-15	10459-10463	such	_	_	_	
41-16	10464-10466	as	_	_	_	
41-17	10467-10468	a	_	_	_	
41-18	10469-10473	hard	_	_	_	
41-19	10474-10478	disk	_	_	_	
41-20	10479-10484	drive	_	_	_	
41-21	10485-10492	platter	_	_	_	
41-22	10492-10493	)	_	_	_	
41-23	10493-10494	.	_	_	_	
41-24	10495-10497	If	_	_	_	
41-25	10498-10499	a	_	_	_	
41-26	10500-10507	program	_	_	_	
41-27	10508-10509	(	_	_	_	
41-28	10509-10512	any	_	_	_	
41-29	10512-10513	,	_	_	_	
41-30	10514-10517	but	_	_	_	
41-31	10518-10528	PostgreSQL	_	_	_	
41-32	10529-10531	in	_	_	_	
41-33	10532-10536	this	_	_	_	
41-34	10537-10541	case	_	_	_	
41-35	10541-10542	)	_	_	_	
41-36	10543-10547	asks	_	_	_	
41-37	10548-10551	the	_	_	_	
41-38	10552-10561	operating	_	_	_	
41-39	10562-10568	system	_	_	_	
41-40	10569-10570	(	_	_	_	
41-41	10570-10572	OS	_	_	_	
41-42	10572-10573	)	_	_	_	
41-43	10574-10576	to	_	_	_	
41-44	10577-10582	write	_	_	_	
41-45	10583-10592	something	_	_	_	
41-46	10593-10595	on	_	_	_	
41-47	10596-10600	disk	_	_	_	
41-48	10600-10601	,	_	_	_	
41-49	10602-10605	the	_	_	_	
41-50	10606-10608	OS	_	_	_	
41-51	10609-10618	transfers	_	_	_	
41-52	10619-10622	the	_	_	_	
41-53	10623-10627	data	_	_	_	
41-54	10628-10630	to	_	_	_	
41-55	10631-10634	its	_	_	_	
41-56	10635-10638	RAM	_	_	_	
41-57	10639-10644	cache	_	_	_	
41-58	10644-10645	.	_	_	_	
41-59	10646-10653	Writing	_	_	_	
41-60	10654-10662	actually	_	_	_	
41-61	10663-10670	happens	_	_	_	
41-62	10671-10685	asynchronously	_	_	_	
41-63	10685-10686	,	_	_	_	
41-64	10687-10696	depending	_	_	_	
41-65	10697-10699	on	_	_	_	
41-66	10700-10703	the	_	_	_	
41-67	10704-10712	settings	_	_	_	
41-68	10713-10715	of	_	_	_	
41-69	10716-10717	I	_	_	_	
41-70	10717-10718	/	_	_	_	
41-71	10718-10719	O	_	_	_	
41-72	10720-10729	scheduler	_	_	_	
41-73	10730-10732	of	_	_	_	
41-74	10733-10736	the	_	_	_	
41-75	10737-10739	OS	_	_	_	
41-76	10739-10740	.	_	_	_	

#Text=When the OS decides to write the data, they get into the cache of the storage (hard disk). Electronics of the storage can also postpone writing, for example, by grouping data that are more efficient to be written together. And if a RAID controller is used, one more caching level is added between the OS and disk. So, without taking special measures, it is absolutely unclear when the data is actually saved in a reliable manner. And usually it makes no difference, but there are critical areas where PostgreSQL must be sure that the data are written with due reliability. This is, primarily, logging (if a WAL record did not reach disk, it will be lost along with the rest of the RAM contents) and a checkpoint (we must be sure that dirty pages are really written to disk). But there are other situations, such as performing unlogged operations at the level of minimal and so on.
42-1	10741-10745	When	_	_	_	
42-2	10746-10749	the	_	_	_	
42-3	10750-10752	OS	_	_	_	
42-4	10753-10760	decides	_	_	_	
42-5	10761-10763	to	_	_	_	
42-6	10764-10769	write	_	_	_	
42-7	10770-10773	the	_	_	_	
42-8	10774-10778	data	_	_	_	
42-9	10778-10779	,	_	_	_	
42-10	10780-10784	they	_	_	_	
42-11	10785-10788	get	_	_	_	
42-12	10789-10793	into	_	_	_	
42-13	10794-10797	the	_	_	_	
42-14	10798-10803	cache	_	_	_	
42-15	10804-10806	of	_	_	_	
42-16	10807-10810	the	_	_	_	
42-17	10811-10818	storage	_	_	_	
42-18	10819-10820	(	_	_	_	
42-19	10820-10824	hard	_	_	_	
42-20	10825-10829	disk	_	_	_	
42-21	10829-10830	)	_	_	_	
42-22	10830-10831	.	_	_	_	
42-23	10832-10843	Electronics	_	_	_	
42-24	10844-10846	of	_	_	_	
42-25	10847-10850	the	_	_	_	
42-26	10851-10858	storage	_	_	_	
42-27	10859-10862	can	_	_	_	
42-28	10863-10867	also	_	_	_	
42-29	10868-10876	postpone	_	_	_	
42-30	10877-10884	writing	_	_	_	
42-31	10884-10885	,	_	_	_	
42-32	10886-10889	for	_	_	_	
42-33	10890-10897	example	_	_	_	
42-34	10897-10898	,	_	_	_	
42-35	10899-10901	by	_	_	_	
42-36	10902-10910	grouping	_	_	_	
42-37	10911-10915	data	_	_	_	
42-38	10916-10920	that	_	_	_	
42-39	10921-10924	are	_	_	_	
42-40	10925-10929	more	_	_	_	
42-41	10930-10939	efficient	_	_	_	
42-42	10940-10942	to	_	_	_	
42-43	10943-10945	be	_	_	_	
42-44	10946-10953	written	_	_	_	
42-45	10954-10962	together	_	_	_	
42-46	10962-10963	.	_	_	_	
42-47	10964-10967	And	_	_	_	
42-48	10968-10970	if	_	_	_	
42-49	10971-10972	a	_	_	_	
42-50	10973-10977	RAID	_	_	_	
42-51	10978-10988	controller	_	_	_	
42-52	10989-10991	is	_	_	_	
42-53	10992-10996	used	_	_	_	
42-54	10996-10997	,	_	_	_	
42-55	10998-11001	one	_	_	_	
42-56	11002-11006	more	_	_	_	
42-57	11007-11014	caching	_	_	_	
42-58	11015-11020	level	_	_	_	
42-59	11021-11023	is	_	_	_	
42-60	11024-11029	added	_	_	_	
42-61	11030-11037	between	_	_	_	
42-62	11038-11041	the	_	_	_	
42-63	11042-11044	OS	_	_	_	
42-64	11045-11048	and	_	_	_	
42-65	11049-11053	disk	_	_	_	
42-66	11053-11054	.	_	_	_	
42-67	11055-11057	So	_	_	_	
42-68	11057-11058	,	_	_	_	
42-69	11059-11066	without	_	_	_	
42-70	11067-11073	taking	_	_	_	
42-71	11074-11081	special	_	_	_	
42-72	11082-11090	measures	_	_	_	
42-73	11090-11091	,	_	_	_	
42-74	11092-11094	it	_	_	_	
42-75	11095-11097	is	_	_	_	
42-76	11098-11108	absolutely	_	_	_	
42-77	11109-11116	unclear	_	_	_	
42-78	11117-11121	when	_	_	_	
42-79	11122-11125	the	_	_	_	
42-80	11126-11130	data	_	_	_	
42-81	11131-11133	is	_	_	_	
42-82	11134-11142	actually	_	_	_	
42-83	11143-11148	saved	_	_	_	
42-84	11149-11151	in	_	_	_	
42-85	11152-11153	a	_	_	_	
42-86	11154-11162	reliable	_	_	_	
42-87	11163-11169	manner	_	_	_	
42-88	11169-11170	.	_	_	_	
42-89	11171-11174	And	_	_	_	
42-90	11175-11182	usually	_	_	_	
42-91	11183-11185	it	_	_	_	
42-92	11186-11191	makes	_	_	_	
42-93	11192-11194	no	_	_	_	
42-94	11195-11205	difference	_	_	_	
42-95	11205-11206	,	_	_	_	
42-96	11207-11210	but	_	_	_	
42-97	11211-11216	there	_	_	_	
42-98	11217-11220	are	_	_	_	
42-99	11221-11229	critical	_	_	_	
42-100	11230-11235	areas	_	_	_	
42-101	11236-11241	where	_	_	_	
42-102	11242-11252	PostgreSQL	_	_	_	
42-103	11253-11257	must	_	_	_	
42-104	11258-11260	be	_	_	_	
42-105	11261-11265	sure	_	_	_	
42-106	11266-11270	that	_	_	_	
42-107	11271-11274	the	_	_	_	
42-108	11275-11279	data	_	_	_	
42-109	11280-11283	are	_	_	_	
42-110	11284-11291	written	_	_	_	
42-111	11292-11296	with	_	_	_	
42-112	11297-11300	due	_	_	_	
42-113	11301-11312	reliability	_	_	_	
42-114	11312-11313	.	_	_	_	
42-115	11314-11318	This	_	_	_	
42-116	11319-11321	is	_	_	_	
42-117	11321-11322	,	_	_	_	
42-118	11323-11332	primarily	_	_	_	
42-119	11332-11333	,	_	_	_	
42-120	11334-11341	logging	_	_	_	
42-121	11342-11343	(	_	_	_	
42-122	11343-11345	if	_	_	_	
42-123	11346-11347	a	_	_	_	
42-124	11348-11351	WAL	_	_	_	
42-125	11352-11358	record	_	_	_	
42-126	11359-11362	did	_	_	_	
42-127	11363-11366	not	_	_	_	
42-128	11367-11372	reach	_	_	_	
42-129	11373-11377	disk	_	_	_	
42-130	11377-11378	,	_	_	_	
42-131	11379-11381	it	_	_	_	
42-132	11382-11386	will	_	_	_	
42-133	11387-11389	be	_	_	_	
42-134	11390-11394	lost	_	_	_	
42-135	11395-11400	along	_	_	_	
42-136	11401-11405	with	_	_	_	
42-137	11406-11409	the	_	_	_	
42-138	11410-11414	rest	_	_	_	
42-139	11415-11417	of	_	_	_	
42-140	11418-11421	the	_	_	_	
42-141	11422-11425	RAM	_	_	_	
42-142	11426-11434	contents	_	_	_	
42-143	11434-11435	)	_	_	_	
42-144	11436-11439	and	_	_	_	
42-145	11440-11441	a	_	_	_	
42-146	11442-11452	checkpoint	_	_	_	
42-147	11453-11454	(	_	_	_	
42-148	11454-11456	we	_	_	_	
42-149	11457-11461	must	_	_	_	
42-150	11462-11464	be	_	_	_	
42-151	11465-11469	sure	_	_	_	
42-152	11470-11474	that	_	_	_	
42-153	11475-11480	dirty	_	_	_	
42-154	11481-11486	pages	_	_	_	
42-155	11487-11490	are	_	_	_	
42-156	11491-11497	really	_	_	_	
42-157	11498-11505	written	_	_	_	
42-158	11506-11508	to	_	_	_	
42-159	11509-11513	disk	_	_	_	
42-160	11513-11514	)	_	_	_	
42-161	11514-11515	.	_	_	_	
42-162	11516-11519	But	_	_	_	
42-163	11520-11525	there	_	_	_	
42-164	11526-11529	are	_	_	_	
42-165	11530-11535	other	_	_	_	
42-166	11536-11546	situations	_	_	_	
42-167	11546-11547	,	_	_	_	
42-168	11548-11552	such	_	_	_	
42-169	11553-11555	as	_	_	_	
42-170	11556-11566	performing	_	_	_	
42-171	11567-11575	unlogged	_	_	_	
42-172	11576-11586	operations	_	_	_	
42-173	11587-11589	at	_	_	_	
42-174	11590-11593	the	_	_	_	
42-175	11594-11599	level	_	_	_	
42-176	11600-11602	of	_	_	_	
42-177	11603-11610	minimal	_	_	_	
42-178	11611-11614	and	_	_	_	
42-179	11615-11617	so	_	_	_	
42-180	11618-11620	on	_	_	_	
42-181	11620-11621	.	_	_	_	

#Text=The OS provides capabilities to ensure immediate writing of the data to nonvolatile memory. There are a few options, but they reduce to the two main: either after a write, the synchronization call is performed (fsync, fdatasync) or after opening a file (or writing to it) a special flag is set to indicate a need for synchronization or even for a direct write bypassing the OS cache. As for WAL, the pg_test_fsync utility allows us to choose a method that best suits a particular OS and a particular file system, and this method is specified in the wal_sync_method parameter. Normal files are synchronized using fsync.
43-1	11622-11625	The	_	_	_	
43-2	11626-11628	OS	_	_	_	
43-3	11629-11637	provides	_	_	_	
43-4	11638-11650	capabilities	_	_	_	
43-5	11651-11653	to	_	_	_	
43-6	11654-11660	ensure	_	_	_	
43-7	11661-11670	immediate	_	_	_	
43-8	11671-11678	writing	_	_	_	
43-9	11679-11681	of	_	_	_	
43-10	11682-11685	the	_	_	_	
43-11	11686-11690	data	_	_	_	
43-12	11691-11693	to	_	_	_	
43-13	11694-11705	nonvolatile	_	_	_	
43-14	11706-11712	memory	_	_	_	
43-15	11712-11713	.	_	_	_	
43-16	11714-11719	There	_	_	_	
43-17	11720-11723	are	_	_	_	
43-18	11724-11725	a	_	_	_	
43-19	11726-11729	few	_	_	_	
43-20	11730-11737	options	_	_	_	
43-21	11737-11738	,	_	_	_	
43-22	11739-11742	but	_	_	_	
43-23	11743-11747	they	_	_	_	
43-24	11748-11754	reduce	_	_	_	
43-25	11755-11757	to	_	_	_	
43-26	11758-11761	the	_	_	_	
43-27	11762-11765	two	_	_	_	
43-28	11766-11770	main	_	_	_	
43-29	11770-11771	:	_	_	_	
43-30	11772-11778	either	_	_	_	
43-31	11779-11784	after	_	_	_	
43-32	11785-11786	a	_	_	_	
43-33	11787-11792	write	_	_	_	
43-34	11792-11793	,	_	_	_	
43-35	11794-11797	the	_	_	_	
43-36	11798-11813	synchronization	_	_	_	
43-37	11814-11818	call	_	_	_	
43-38	11819-11821	is	_	_	_	
43-39	11822-11831	performed	_	_	_	
43-40	11832-11833	(	_	_	_	
43-41	11833-11838	fsync	_	_	_	
43-42	11838-11839	,	_	_	_	
43-43	11840-11849	fdatasync	_	_	_	
43-44	11849-11850	)	_	_	_	
43-45	11851-11853	or	_	_	_	
43-46	11854-11859	after	_	_	_	
43-47	11860-11867	opening	_	_	_	
43-48	11868-11869	a	_	_	_	
43-49	11870-11874	file	_	_	_	
43-50	11875-11876	(	_	_	_	
43-51	11876-11878	or	_	_	_	
43-52	11879-11886	writing	_	_	_	
43-53	11887-11889	to	_	_	_	
43-54	11890-11892	it	_	_	_	
43-55	11892-11893	)	_	_	_	
43-56	11894-11895	a	_	_	_	
43-57	11896-11903	special	_	_	_	
43-58	11904-11908	flag	_	_	_	
43-59	11909-11911	is	_	_	_	
43-60	11912-11915	set	_	_	_	
43-61	11916-11918	to	_	_	_	
43-62	11919-11927	indicate	_	_	_	
43-63	11928-11929	a	_	_	_	
43-64	11930-11934	need	_	_	_	
43-65	11935-11938	for	_	_	_	
43-66	11939-11954	synchronization	_	_	_	
43-67	11955-11957	or	_	_	_	
43-68	11958-11962	even	_	_	_	
43-69	11963-11966	for	_	_	_	
43-70	11967-11968	a	_	_	_	
43-71	11969-11975	direct	_	_	_	
43-72	11976-11981	write	_	_	_	
43-73	11982-11991	bypassing	_	_	_	
43-74	11992-11995	the	_	_	_	
43-75	11996-11998	OS	_	_	_	
43-76	11999-12004	cache	_	_	_	
43-77	12004-12005	.	_	_	_	
43-78	12006-12008	As	_	_	_	
43-79	12009-12012	for	_	_	_	
43-80	12013-12016	WAL	_	_	_	
43-81	12016-12017	,	_	_	_	
43-82	12018-12021	the	_	_	_	
43-83	12022-12035	pg_test_fsync	_	_	_	
43-84	12036-12043	utility	_	_	_	
43-85	12044-12050	allows	_	_	_	
43-86	12051-12053	us	_	_	_	
43-87	12054-12056	to	_	_	_	
43-88	12057-12063	choose	_	_	_	
43-89	12064-12065	a	_	_	_	
43-90	12066-12072	method	_	_	_	
43-91	12073-12077	that	_	_	_	
43-92	12078-12082	best	_	_	_	
43-93	12083-12088	suits	_	_	_	
43-94	12089-12090	a	_	_	_	
43-95	12091-12101	particular	_	_	_	
43-96	12102-12104	OS	_	_	_	
43-97	12105-12108	and	_	_	_	
43-98	12109-12110	a	_	_	_	
43-99	12111-12121	particular	_	_	_	
43-100	12122-12126	file	_	_	_	
43-101	12127-12133	system	_	_	_	
43-102	12133-12134	,	_	_	_	
43-103	12135-12138	and	_	_	_	
43-104	12139-12143	this	_	_	_	
43-105	12144-12150	method	_	_	_	
43-106	12151-12153	is	_	_	_	
43-107	12154-12163	specified	_	_	_	
43-108	12164-12166	in	_	_	_	
43-109	12167-12170	the	_	_	_	
43-110	12171-12186	wal_sync_method	_	_	_	
43-111	12187-12196	parameter	_	_	_	
43-112	12196-12197	.	_	_	_	
43-113	12198-12204	Normal	_	_	_	
43-114	12205-12210	files	_	_	_	
43-115	12211-12214	are	_	_	_	
43-116	12215-12227	synchronized	_	_	_	
43-117	12228-12233	using	_	_	_	
43-118	12234-12239	fsync	_	_	_	
43-119	12239-12240	.	_	_	_	

#Text=A subtle point is that to choose the method, we need to take into account hardware characteristics. For example: if a controller employing a battery-backup unit (BBU) is used, there is no reason why we should avoid using the cache of the controller since the BBU enables saving the data in case of power outage. The documentation provides a lot of context on this. In any case, synchronization is expensive and performed at most as often as absolutely necessary (we will get back to this a bit later, when we discuss the performance).
44-1	12241-12242	A	_	_	_	
44-2	12243-12249	subtle	_	_	_	
44-3	12250-12255	point	_	_	_	
44-4	12256-12258	is	_	_	_	
44-5	12259-12263	that	_	_	_	
44-6	12264-12266	to	_	_	_	
44-7	12267-12273	choose	_	_	_	
44-8	12274-12277	the	_	_	_	
44-9	12278-12284	method	_	_	_	
44-10	12284-12285	,	_	_	_	
44-11	12286-12288	we	_	_	_	
44-12	12289-12293	need	_	_	_	
44-13	12294-12296	to	_	_	_	
44-14	12297-12301	take	_	_	_	
44-15	12302-12306	into	_	_	_	
44-16	12307-12314	account	_	_	_	
44-17	12315-12323	hardware	_	_	_	
44-18	12324-12339	characteristics	_	_	_	
44-19	12339-12340	.	_	_	_	
44-20	12341-12344	For	_	_	_	
44-21	12345-12352	example	_	_	_	
44-22	12352-12353	:	_	_	_	
44-23	12354-12356	if	_	_	_	
44-24	12357-12358	a	_	_	_	
44-25	12359-12369	controller	_	_	_	
44-26	12370-12379	employing	_	_	_	
44-27	12380-12381	a	_	_	_	
44-28	12382-12396	battery-backup	_	_	_	
44-29	12397-12401	unit	_	_	_	
44-30	12402-12403	(	_	_	_	
44-31	12403-12406	BBU	_	_	_	
44-32	12406-12407	)	_	_	_	
44-33	12408-12410	is	_	_	_	
44-34	12411-12415	used	_	_	_	
44-35	12415-12416	,	_	_	_	
44-36	12417-12422	there	_	_	_	
44-37	12423-12425	is	_	_	_	
44-38	12426-12428	no	_	_	_	
44-39	12429-12435	reason	_	_	_	
44-40	12436-12439	why	_	_	_	
44-41	12440-12442	we	_	_	_	
44-42	12443-12449	should	_	_	_	
44-43	12450-12455	avoid	_	_	_	
44-44	12456-12461	using	_	_	_	
44-45	12462-12465	the	_	_	_	
44-46	12466-12471	cache	_	_	_	
44-47	12472-12474	of	_	_	_	
44-48	12475-12478	the	_	_	_	
44-49	12479-12489	controller	_	_	_	
44-50	12490-12495	since	_	_	_	
44-51	12496-12499	the	_	_	_	
44-52	12500-12503	BBU	_	_	_	
44-53	12504-12511	enables	_	_	_	
44-54	12512-12518	saving	_	_	_	
44-55	12519-12522	the	_	_	_	
44-56	12523-12527	data	_	_	_	
44-57	12528-12530	in	_	_	_	
44-58	12531-12535	case	_	_	_	
44-59	12536-12538	of	_	_	_	
44-60	12539-12544	power	_	_	_	
44-61	12545-12551	outage	_	_	_	
44-62	12551-12552	.	_	_	_	
44-63	12553-12556	The	_	_	_	
44-64	12557-12570	documentation	_	_	_	
44-65	12571-12579	provides	_	_	_	
44-66	12580-12581	a	_	_	_	
44-67	12582-12585	lot	_	_	_	
44-68	12586-12588	of	_	_	_	
44-69	12589-12596	context	_	_	_	
44-70	12597-12599	on	_	_	_	
44-71	12600-12604	this	_	_	_	
44-72	12604-12605	.	_	_	_	
44-73	12606-12608	In	_	_	_	
44-74	12609-12612	any	_	_	_	
44-75	12613-12617	case	_	_	_	
44-76	12617-12618	,	_	_	_	
44-77	12619-12634	synchronization	_	_	_	
44-78	12635-12637	is	_	_	_	
44-79	12638-12647	expensive	_	_	_	
44-80	12648-12651	and	_	_	_	
44-81	12652-12661	performed	_	_	_	
44-82	12662-12664	at	_	_	_	
44-83	12665-12669	most	_	_	_	
44-84	12670-12672	as	_	_	_	
44-85	12673-12678	often	_	_	_	
44-86	12679-12681	as	_	_	_	
44-87	12682-12692	absolutely	_	_	_	
44-88	12693-12702	necessary	_	_	_	
44-89	12703-12704	(	_	_	_	
44-90	12704-12706	we	_	_	_	
44-91	12707-12711	will	_	_	_	
44-92	12712-12715	get	_	_	_	
44-93	12716-12720	back	_	_	_	
44-94	12721-12723	to	_	_	_	
44-95	12724-12728	this	_	_	_	
44-96	12729-12730	a	_	_	_	
44-97	12731-12734	bit	_	_	_	
44-98	12735-12740	later	_	_	_	
44-99	12740-12741	,	_	_	_	
44-100	12742-12746	when	_	_	_	
44-101	12747-12749	we	_	_	_	
44-102	12750-12757	discuss	_	_	_	
44-103	12758-12761	the	_	_	_	
44-104	12762-12773	performance	_	_	_	
44-105	12773-12774	)	_	_	_	
44-106	12774-12775	.	_	_	_	

#Text=In general, you can turn off the synchronization (the fsync parameter is responsible for this), but in this case, you have to forget about the reliability of storage. By turning fsync off you agree that the data can be irreversibly lost at any time. Probably, the only reasonable use case for this parameter is a temporary increase of the performance when the data can be easily restored from a different source (like at the initial migration). Data corruption Hardware is imperfect and the data can be corrupted in the storage when transmitted over interface cables, and so on. Some of such errors are handled at the hardware level, but the others are not. For quick detection of an issue, checksums are provided in WAL records.
45-1	12776-12778	In	_	_	_	
45-2	12779-12786	general	_	_	_	
45-3	12786-12787	,	_	_	_	
45-4	12788-12791	you	_	_	_	
45-5	12792-12795	can	_	_	_	
45-6	12796-12800	turn	_	_	_	
45-7	12801-12804	off	_	_	_	
45-8	12805-12808	the	_	_	_	
45-9	12809-12824	synchronization	_	_	_	
45-10	12825-12826	(	_	_	_	
45-11	12826-12829	the	_	_	_	
45-12	12830-12835	fsync	_	_	_	
45-13	12836-12845	parameter	_	_	_	
45-14	12846-12848	is	_	_	_	
45-15	12849-12860	responsible	_	_	_	
45-16	12861-12864	for	_	_	_	
45-17	12865-12869	this	_	_	_	
45-18	12869-12870	)	_	_	_	
45-19	12870-12871	,	_	_	_	
45-20	12872-12875	but	_	_	_	
45-21	12876-12878	in	_	_	_	
45-22	12879-12883	this	_	_	_	
45-23	12884-12888	case	_	_	_	
45-24	12888-12889	,	_	_	_	
45-25	12890-12893	you	_	_	_	
45-26	12894-12898	have	_	_	_	
45-27	12899-12901	to	_	_	_	
45-28	12902-12908	forget	_	_	_	
45-29	12909-12914	about	_	_	_	
45-30	12915-12918	the	_	_	_	
45-31	12919-12930	reliability	_	_	_	
45-32	12931-12933	of	_	_	_	
45-33	12934-12941	storage	_	_	_	
45-34	12941-12942	.	_	_	_	
45-35	12943-12945	By	_	_	_	
45-36	12946-12953	turning	_	_	_	
45-37	12954-12959	fsync	_	_	_	
45-38	12960-12963	off	_	_	_	
45-39	12964-12967	you	_	_	_	
45-40	12968-12973	agree	_	_	_	
45-41	12974-12978	that	_	_	_	
45-42	12979-12982	the	_	_	_	
45-43	12983-12987	data	_	_	_	
45-44	12988-12991	can	_	_	_	
45-45	12992-12994	be	_	_	_	
45-46	12995-13007	irreversibly	_	_	_	
45-47	13008-13012	lost	_	_	_	
45-48	13013-13015	at	_	_	_	
45-49	13016-13019	any	_	_	_	
45-50	13020-13024	time	_	_	_	
45-51	13024-13025	.	_	_	_	
45-52	13026-13034	Probably	_	_	_	
45-53	13034-13035	,	_	_	_	
45-54	13036-13039	the	_	_	_	
45-55	13040-13044	only	_	_	_	
45-56	13045-13055	reasonable	_	_	_	
45-57	13056-13059	use	_	_	_	
45-58	13060-13064	case	_	_	_	
45-59	13065-13068	for	_	_	_	
45-60	13069-13073	this	_	_	_	
45-61	13074-13083	parameter	_	_	_	
45-62	13084-13086	is	_	_	_	
45-63	13087-13088	a	_	_	_	
45-64	13089-13098	temporary	_	_	_	
45-65	13099-13107	increase	_	_	_	
45-66	13108-13110	of	_	_	_	
45-67	13111-13114	the	_	_	_	
45-68	13115-13126	performance	_	_	_	
45-69	13127-13131	when	_	_	_	
45-70	13132-13135	the	_	_	_	
45-71	13136-13140	data	_	_	_	
45-72	13141-13144	can	_	_	_	
45-73	13145-13147	be	_	_	_	
45-74	13148-13154	easily	_	_	_	
45-75	13155-13163	restored	_	_	_	
45-76	13164-13168	from	_	_	_	
45-77	13169-13170	a	_	_	_	
45-78	13171-13180	different	_	_	_	
45-79	13181-13187	source	_	_	_	
45-80	13188-13189	(	_	_	_	
45-81	13189-13193	like	_	_	_	
45-82	13194-13196	at	_	_	_	
45-83	13197-13200	the	_	_	_	
45-84	13201-13208	initial	_	_	_	
45-85	13209-13218	migration	_	_	_	
45-86	13218-13219	)	_	_	_	
45-87	13219-13220	.	_	_	_	
45-88	13221-13225	Data	_	_	_	
45-89	13226-13236	corruption	_	_	_	
45-90	13237-13245	Hardware	_	_	_	
45-91	13246-13248	is	_	_	_	
45-92	13249-13258	imperfect	_	_	_	
45-93	13259-13262	and	_	_	_	
45-94	13263-13266	the	_	_	_	
45-95	13267-13271	data	_	_	_	
45-96	13272-13275	can	_	_	_	
45-97	13276-13278	be	_	_	_	
45-98	13279-13288	corrupted	_	_	_	
45-99	13289-13291	in	_	_	_	
45-100	13292-13295	the	_	_	_	
45-101	13296-13303	storage	_	_	_	
45-102	13304-13308	when	_	_	_	
45-103	13309-13320	transmitted	_	_	_	
45-104	13321-13325	over	_	_	_	
45-105	13326-13335	interface	_	_	_	
45-106	13336-13342	cables	_	_	_	
45-107	13342-13343	,	_	_	_	
45-108	13344-13347	and	_	_	_	
45-109	13348-13350	so	_	_	_	
45-110	13351-13353	on	_	_	_	
45-111	13353-13354	.	_	_	_	
45-112	13355-13359	Some	_	_	_	
45-113	13360-13362	of	_	_	_	
45-114	13363-13367	such	_	_	_	
45-115	13368-13374	errors	_	_	_	
45-116	13375-13378	are	_	_	_	
45-117	13379-13386	handled	_	_	_	
45-118	13387-13389	at	_	_	_	
45-119	13390-13393	the	_	_	_	
45-120	13394-13402	hardware	_	_	_	
45-121	13403-13408	level	_	_	_	
45-122	13408-13409	,	_	_	_	
45-123	13410-13413	but	_	_	_	
45-124	13414-13417	the	_	_	_	
45-125	13418-13424	others	_	_	_	
45-126	13425-13428	are	_	_	_	
45-127	13429-13432	not	_	_	_	
45-128	13432-13433	.	_	_	_	
45-129	13434-13437	For	_	_	_	
45-130	13438-13443	quick	_	_	_	
45-131	13444-13453	detection	_	_	_	
45-132	13454-13456	of	_	_	_	
45-133	13457-13459	an	_	_	_	
45-134	13460-13465	issue	_	_	_	
45-135	13465-13466	,	_	_	_	
45-136	13467-13476	checksums	_	_	_	
45-137	13477-13480	are	_	_	_	
45-138	13481-13489	provided	_	_	_	
45-139	13490-13492	in	_	_	_	
45-140	13493-13496	WAL	_	_	_	
45-141	13497-13504	records	_	_	_	
45-142	13504-13505	.	_	_	_	

#Text=Data pages can also be protected by checksums. Earlier this could be done only at the cluster initialization, but in PostgreSQL 12 it is possible to turn the checksums on and off by means of the pg_checksums utility (but only when the server is shut down rather than «on the fly» so far). In a production environment, checksums must be obligatory turned on regardless of the overhead costs of computing and verifying them. This reduces the probability of not detecting the corruption duly. It reduces, but not eliminates the probability.
46-1	13506-13510	Data	_	_	_	
46-2	13511-13516	pages	_	_	_	
46-3	13517-13520	can	_	_	_	
46-4	13521-13525	also	_	_	_	
46-5	13526-13528	be	_	_	_	
46-6	13529-13538	protected	_	_	_	
46-7	13539-13541	by	_	_	_	
46-8	13542-13551	checksums	_	_	_	
46-9	13551-13552	.	_	_	_	
46-10	13553-13560	Earlier	_	_	_	
46-11	13561-13565	this	_	_	_	
46-12	13566-13571	could	_	_	_	
46-13	13572-13574	be	_	_	_	
46-14	13575-13579	done	_	_	_	
46-15	13580-13584	only	_	_	_	
46-16	13585-13587	at	_	_	_	
46-17	13588-13591	the	_	_	_	
46-18	13592-13599	cluster	_	_	_	
46-19	13600-13614	initialization	_	_	_	
46-20	13614-13615	,	_	_	_	
46-21	13616-13619	but	_	_	_	
46-22	13620-13622	in	_	_	_	
46-23	13623-13633	PostgreSQL	_	_	_	
46-24	13633-13634	 	_	_	_	
46-25	13634-13636	12	_	_	_	
46-26	13637-13639	it	_	_	_	
46-27	13640-13642	is	_	_	_	
46-28	13643-13651	possible	_	_	_	
46-29	13652-13654	to	_	_	_	
46-30	13655-13659	turn	_	_	_	
46-31	13660-13663	the	_	_	_	
46-32	13664-13673	checksums	_	_	_	
46-33	13674-13676	on	_	_	_	
46-34	13677-13680	and	_	_	_	
46-35	13681-13684	off	_	_	_	
46-36	13685-13687	by	_	_	_	
46-37	13688-13693	means	_	_	_	
46-38	13694-13696	of	_	_	_	
46-39	13697-13700	the	_	_	_	
46-40	13701-13713	pg_checksums	_	_	_	
46-41	13714-13721	utility	_	_	_	
46-42	13722-13723	(	_	_	_	
46-43	13723-13726	but	_	_	_	
46-44	13727-13731	only	_	_	_	
46-45	13732-13736	when	_	_	_	
46-46	13737-13740	the	_	_	_	
46-47	13741-13747	server	_	_	_	
46-48	13748-13750	is	_	_	_	
46-49	13751-13755	shut	_	_	_	
46-50	13756-13760	down	_	_	_	
46-51	13761-13767	rather	_	_	_	
46-52	13768-13772	than	_	_	_	
46-53	13773-13774	«	_	_	_	
46-54	13774-13776	on	_	_	_	
46-55	13777-13780	the	_	_	_	
46-56	13781-13784	fly	_	_	_	
46-57	13784-13785	»	_	_	_	
46-58	13786-13788	so	_	_	_	
46-59	13789-13792	far	_	_	_	
46-60	13792-13793	)	_	_	_	
46-61	13793-13794	.	_	_	_	
46-62	13795-13797	In	_	_	_	
46-63	13798-13799	a	_	_	_	
46-64	13800-13810	production	_	_	_	
46-65	13811-13822	environment	_	_	_	
46-66	13822-13823	,	_	_	_	
46-67	13824-13833	checksums	_	_	_	
46-68	13834-13838	must	_	_	_	
46-69	13839-13841	be	_	_	_	
46-70	13842-13852	obligatory	_	_	_	
46-71	13853-13859	turned	_	_	_	
46-72	13860-13862	on	_	_	_	
46-73	13863-13873	regardless	_	_	_	
46-74	13874-13876	of	_	_	_	
46-75	13877-13880	the	_	_	_	
46-76	13881-13889	overhead	_	_	_	
46-77	13890-13895	costs	_	_	_	
46-78	13896-13898	of	_	_	_	
46-79	13899-13908	computing	_	_	_	
46-80	13909-13912	and	_	_	_	
46-81	13913-13922	verifying	_	_	_	
46-82	13923-13927	them	_	_	_	
46-83	13927-13928	.	_	_	_	
46-84	13929-13933	This	_	_	_	
46-85	13934-13941	reduces	_	_	_	
46-86	13942-13945	the	_	_	_	
46-87	13946-13957	probability	_	_	_	
46-88	13958-13960	of	_	_	_	
46-89	13961-13964	not	_	_	_	
46-90	13965-13974	detecting	_	_	_	
46-91	13975-13978	the	_	_	_	
46-92	13979-13989	corruption	_	_	_	
46-93	13990-13994	duly	_	_	_	
46-94	13994-13995	.	_	_	_	
46-95	13996-13998	It	_	_	_	
46-96	13999-14006	reduces	_	_	_	
46-97	14006-14007	,	_	_	_	
46-98	14008-14011	but	_	_	_	
46-99	14012-14015	not	_	_	_	
46-100	14016-14026	eliminates	_	_	_	
46-101	14027-14030	the	_	_	_	
46-102	14031-14042	probability	_	_	_	
46-103	14042-14043	.	_	_	_	

#Text=First, checksums are verified only when the page is accessed; therefore, the corruption may escape detection until the moment when it gets into all backups. It's for this reason that pg_probackup verifies the checksums of all the cluster pages during the data backup. Second, a page filled with zeros is regarded as correct, so if the file system mistakenly «nullifies» a file, this can escape detection. Third, checksums protect only the main fork of the data. The other forks and the rest of files (for instance, transaction statuses XACT) are not protected at all.
47-1	14044-14049	First	_	_	_	
47-2	14049-14050	,	_	_	_	
47-3	14051-14060	checksums	_	_	_	
47-4	14061-14064	are	_	_	_	
47-5	14065-14073	verified	_	_	_	
47-6	14074-14078	only	_	_	_	
47-7	14079-14083	when	_	_	_	
47-8	14084-14087	the	_	_	_	
47-9	14088-14092	page	_	_	_	
47-10	14093-14095	is	_	_	_	
47-11	14096-14104	accessed	_	_	_	
47-12	14104-14105	;	_	_	_	
47-13	14106-14115	therefore	_	_	_	
47-14	14115-14116	,	_	_	_	
47-15	14117-14120	the	_	_	_	
47-16	14121-14131	corruption	_	_	_	
47-17	14132-14135	may	_	_	_	
47-18	14136-14142	escape	_	_	_	
47-19	14143-14152	detection	_	_	_	
47-20	14153-14158	until	_	_	_	
47-21	14159-14162	the	_	_	_	
47-22	14163-14169	moment	_	_	_	
47-23	14170-14174	when	_	_	_	
47-24	14175-14177	it	_	_	_	
47-25	14178-14182	gets	_	_	_	
47-26	14183-14187	into	_	_	_	
47-27	14188-14191	all	_	_	_	
47-28	14192-14199	backups	_	_	_	
47-29	14199-14200	.	_	_	_	
47-30	14201-14205	It's	_	_	_	
47-31	14206-14209	for	_	_	_	
47-32	14210-14214	this	_	_	_	
47-33	14215-14221	reason	_	_	_	
47-34	14222-14226	that	_	_	_	
47-35	14227-14239	pg_probackup	_	_	_	
47-36	14240-14248	verifies	_	_	_	
47-37	14249-14252	the	_	_	_	
47-38	14253-14262	checksums	_	_	_	
47-39	14263-14265	of	_	_	_	
47-40	14266-14269	all	_	_	_	
47-41	14270-14273	the	_	_	_	
47-42	14274-14281	cluster	_	_	_	
47-43	14282-14287	pages	_	_	_	
47-44	14288-14294	during	_	_	_	
47-45	14295-14298	the	_	_	_	
47-46	14299-14303	data	_	_	_	
47-47	14304-14310	backup	_	_	_	
47-48	14310-14311	.	_	_	_	
47-49	14312-14318	Second	_	_	_	
47-50	14318-14319	,	_	_	_	
47-51	14320-14321	a	_	_	_	
47-52	14322-14326	page	_	_	_	
47-53	14327-14333	filled	_	_	_	
47-54	14334-14338	with	_	_	_	
47-55	14339-14344	zeros	_	_	_	
47-56	14345-14347	is	_	_	_	
47-57	14348-14356	regarded	_	_	_	
47-58	14357-14359	as	_	_	_	
47-59	14360-14367	correct	_	_	_	
47-60	14367-14368	,	_	_	_	
47-61	14369-14371	so	_	_	_	
47-62	14372-14374	if	_	_	_	
47-63	14375-14378	the	_	_	_	
47-64	14379-14383	file	_	_	_	
47-65	14384-14390	system	_	_	_	
47-66	14391-14401	mistakenly	_	_	_	
47-67	14402-14403	«	_	_	_	
47-68	14403-14412	nullifies	_	_	_	
47-69	14412-14413	»	_	_	_	
47-70	14414-14415	a	_	_	_	
47-71	14416-14420	file	_	_	_	
47-72	14420-14421	,	_	_	_	
47-73	14422-14426	this	_	_	_	
47-74	14427-14430	can	_	_	_	
47-75	14431-14437	escape	_	_	_	
47-76	14438-14447	detection	_	_	_	
47-77	14447-14448	.	_	_	_	
47-78	14449-14454	Third	_	_	_	
47-79	14454-14455	,	_	_	_	
47-80	14456-14465	checksums	_	_	_	
47-81	14466-14473	protect	_	_	_	
47-82	14474-14478	only	_	_	_	
47-83	14479-14482	the	_	_	_	
47-84	14483-14487	main	_	_	_	
47-85	14488-14492	fork	_	_	_	
47-86	14493-14495	of	_	_	_	
47-87	14496-14499	the	_	_	_	
47-88	14500-14504	data	_	_	_	
47-89	14504-14505	.	_	_	_	
47-90	14506-14509	The	_	_	_	
47-91	14510-14515	other	_	_	_	
47-92	14516-14521	forks	_	_	_	
47-93	14522-14525	and	_	_	_	
47-94	14526-14529	the	_	_	_	
47-95	14530-14534	rest	_	_	_	
47-96	14535-14537	of	_	_	_	
47-97	14538-14543	files	_	_	_	
47-98	14544-14545	(	_	_	_	
47-99	14545-14548	for	_	_	_	
47-100	14549-14557	instance	_	_	_	
47-101	14557-14558	,	_	_	_	
47-102	14559-14570	transaction	_	_	_	
47-103	14571-14579	statuses	_	_	_	
47-104	14580-14584	XACT	_	_	_	
47-105	14584-14585	)	_	_	_	
47-106	14586-14589	are	_	_	_	
47-107	14590-14593	not	_	_	_	
47-108	14594-14603	protected	_	_	_	
47-109	14604-14606	at	_	_	_	
47-110	14607-14610	all	_	_	_	
47-111	14610-14611	.	_	_	_	

#Text=Alas. Let's see how it works. First we make sure that checksums are turned on (note that in a package installed on Debian-like systems this is not the case by default): => SHOW data_checksums; data_checksums
48-1	14612-14616	Alas	_	_	_	
48-2	14616-14617	.	_	_	_	
48-3	14618-14623	Let's	_	_	_	
48-4	14624-14627	see	_	_	_	
48-5	14628-14631	how	_	_	_	
48-6	14632-14634	it	_	_	_	
48-7	14635-14640	works	_	_	_	
48-8	14640-14641	.	_	_	_	
48-9	14642-14647	First	_	_	_	
48-10	14648-14650	we	_	_	_	
48-11	14651-14655	make	_	_	_	
48-12	14656-14660	sure	_	_	_	
48-13	14661-14665	that	_	_	_	
48-14	14666-14675	checksums	_	_	_	
48-15	14676-14679	are	_	_	_	
48-16	14680-14686	turned	_	_	_	
48-17	14687-14689	on	_	_	_	
48-18	14690-14691	(	_	_	_	
48-19	14691-14695	note	_	_	_	
48-20	14696-14700	that	_	_	_	
48-21	14701-14703	in	_	_	_	
48-22	14704-14705	a	_	_	_	
48-23	14706-14713	package	_	_	_	
48-24	14714-14723	installed	_	_	_	
48-25	14724-14726	on	_	_	_	
48-26	14727-14738	Debian-like	_	_	_	
48-27	14739-14746	systems	_	_	_	
48-28	14747-14751	this	_	_	_	
48-29	14752-14754	is	_	_	_	
48-30	14755-14758	not	_	_	_	
48-31	14759-14762	the	_	_	_	
48-32	14763-14767	case	_	_	_	
48-33	14768-14770	by	_	_	_	
48-34	14771-14778	default	_	_	_	
48-35	14778-14779	)	_	_	_	
48-36	14779-14780	:	_	_	_	
48-37	14781-14782	=	_	_	_	
48-38	14782-14783	>	_	_	_	
48-39	14784-14788	SHOW	_	_	_	
48-40	14789-14803	data_checksums	_	_	_	
48-41	14803-14804	;	_	_	_	
48-42	14805-14819	data_checksums	_	_	_	

#Text=---------------- (1 row) The data_checksums parameter is read-only. This is the file where our table is located: => SELECT pg_relation_filepath('wallevel'); pg_relation_filepath
49-1	14820-14821	-	_	_	_	
49-2	14821-14822	-	_	_	_	
49-3	14822-14823	-	_	_	_	
49-4	14823-14824	-	_	_	_	
49-5	14824-14825	-	_	_	_	
49-6	14825-14826	-	_	_	_	
49-7	14826-14827	-	_	_	_	
49-8	14827-14828	-	_	_	_	
49-9	14828-14829	-	_	_	_	
49-10	14829-14830	-	_	_	_	
49-11	14830-14831	-	_	_	_	
49-12	14831-14832	-	_	_	_	
49-13	14832-14833	-	_	_	_	
49-14	14833-14834	-	_	_	_	
49-15	14834-14835	-	_	_	_	
49-16	14835-14836	-	_	_	_	
49-17	14837-14838	(	_	_	_	
49-18	14838-14839	1	_	_	_	
49-19	14840-14843	row	_	_	_	
49-20	14843-14844	)	_	_	_	
49-21	14845-14848	The	_	_	_	
49-22	14849-14863	data_checksums	_	_	_	
49-23	14864-14873	parameter	_	_	_	
49-24	14874-14876	is	_	_	_	
49-25	14877-14886	read-only	_	_	_	
49-26	14886-14887	.	_	_	_	
49-27	14888-14892	This	_	_	_	
49-28	14893-14895	is	_	_	_	
49-29	14896-14899	the	_	_	_	
49-30	14900-14904	file	_	_	_	
49-31	14905-14910	where	_	_	_	
49-32	14911-14914	our	_	_	_	
49-33	14915-14920	table	_	_	_	
49-34	14921-14923	is	_	_	_	
49-35	14924-14931	located	_	_	_	
49-36	14931-14932	:	_	_	_	
49-37	14933-14934	=	_	_	_	
49-38	14934-14935	>	_	_	_	
49-39	14936-14942	SELECT	_	_	_	
49-40	14943-14963	pg_relation_filepath	_	_	_	
49-41	14963-14964	(	_	_	_	
49-42	14964-14965	'	_	_	_	
49-43	14965-14973	wallevel	_	_	_	
49-44	14973-14974	'	_	_	_	
49-45	14974-14975	)	_	_	_	
49-46	14975-14976	;	_	_	_	
49-47	14977-14997	pg_relation_filepath	_	_	_	

#Text=---------------------- base/16386/24890 (1 row) Let's shut down the server and change a few bytes on the zero page, for example: erase LSN of the last WAL record from the header. student$ sudo pg_ctlcluster 11 main stop
50-1	14998-14999	-	_	_	_	
50-2	14999-15000	-	_	_	_	
50-3	15000-15001	-	_	_	_	
50-4	15001-15002	-	_	_	_	
50-5	15002-15003	-	_	_	_	
50-6	15003-15004	-	_	_	_	
50-7	15004-15005	-	_	_	_	
50-8	15005-15006	-	_	_	_	
50-9	15006-15007	-	_	_	_	
50-10	15007-15008	-	_	_	_	
50-11	15008-15009	-	_	_	_	
50-12	15009-15010	-	_	_	_	
50-13	15010-15011	-	_	_	_	
50-14	15011-15012	-	_	_	_	
50-15	15012-15013	-	_	_	_	
50-16	15013-15014	-	_	_	_	
50-17	15014-15015	-	_	_	_	
50-18	15015-15016	-	_	_	_	
50-19	15016-15017	-	_	_	_	
50-20	15017-15018	-	_	_	_	
50-21	15018-15019	-	_	_	_	
50-22	15019-15020	-	_	_	_	
50-23	15021-15025	base	_	_	_	
50-24	15025-15026	/	_	_	_	
50-25	15026-15031	16386	_	_	_	
50-26	15031-15032	/	_	_	_	
50-27	15032-15037	24890	_	_	_	
50-28	15038-15039	(	_	_	_	
50-29	15039-15040	1	_	_	_	
50-30	15041-15044	row	_	_	_	
50-31	15044-15045	)	_	_	_	
50-32	15046-15051	Let's	_	_	_	
50-33	15052-15056	shut	_	_	_	
50-34	15057-15061	down	_	_	_	
50-35	15062-15065	the	_	_	_	
50-36	15066-15072	server	_	_	_	
50-37	15073-15076	and	_	_	_	
50-38	15077-15083	change	_	_	_	
50-39	15084-15085	a	_	_	_	
50-40	15086-15089	few	_	_	_	
50-41	15090-15095	bytes	_	_	_	
50-42	15096-15098	on	_	_	_	
50-43	15099-15102	the	_	_	_	
50-44	15103-15107	zero	_	_	_	
50-45	15108-15112	page	_	_	_	
50-46	15112-15113	,	_	_	_	
50-47	15114-15117	for	_	_	_	
50-48	15118-15125	example	_	_	_	
50-49	15125-15126	:	_	_	_	
50-50	15127-15132	erase	_	_	_	
50-51	15133-15136	LSN	_	_	_	
50-52	15137-15139	of	_	_	_	
50-53	15140-15143	the	_	_	_	
50-54	15144-15148	last	_	_	_	
50-55	15149-15152	WAL	_	_	_	
50-56	15153-15159	record	_	_	_	
50-57	15160-15164	from	_	_	_	
50-58	15165-15168	the	_	_	_	
50-59	15169-15175	header	_	_	_	
50-60	15175-15176	.	_	_	_	
50-61	15177-15184	student	_	_	_	
50-62	15184-15185	$	_	_	_	
50-63	15186-15190	sudo	_	_	_	
50-64	15191-15204	pg_ctlcluster	_	_	_	
50-65	15205-15207	11	_	_	_	
50-66	15208-15212	main	_	_	_	
50-67	15213-15217	stop	_	_	_	

#Text=postgres$ dd if=/dev/zero of=/var/lib/postgresql/11/main/base/16386/24890 oflag=dsync conv=notrunc bs=1 count=8 8+0 records in 8+0 records out 8 bytes copied, 0,0083022 s, 1,0 kB/s In general, it was not needed to shut down the server. It is sufficient that the page is flushed to disk and evicted from the cache (otherwise, the server would continue working with the page in the cache). But this scenario is more complicated to reproduce.
51-1	15218-15226	postgres	_	_	_	
51-2	15226-15227	$	_	_	_	
51-3	15228-15230	dd	_	_	_	
51-4	15231-15233	if	_	_	_	
51-5	15233-15234	=	_	_	_	
51-6	15234-15235	/	_	_	_	
51-7	15235-15238	dev	_	_	_	
51-8	15238-15239	/	_	_	_	
51-9	15239-15243	zero	_	_	_	
51-10	15244-15246	of	_	_	_	
51-11	15246-15247	=	_	_	_	
51-12	15247-15248	/	_	_	_	
51-13	15248-15251	var	_	_	_	
51-14	15251-15252	/	_	_	_	
51-15	15252-15255	lib	_	_	_	
51-16	15255-15256	/	_	_	_	
51-17	15256-15266	postgresql	_	_	_	
51-18	15266-15267	/	_	_	_	
51-19	15267-15269	11	_	_	_	
51-20	15269-15270	/	_	_	_	
51-21	15270-15274	main	_	_	_	
51-22	15274-15275	/	_	_	_	
51-23	15275-15279	base	_	_	_	
51-24	15279-15280	/	_	_	_	
51-25	15280-15285	16386	_	_	_	
51-26	15285-15286	/	_	_	_	
51-27	15286-15291	24890	_	_	_	
51-28	15292-15297	oflag	_	_	_	
51-29	15297-15298	=	_	_	_	
51-30	15298-15303	dsync	_	_	_	
51-31	15304-15308	conv	_	_	_	
51-32	15308-15309	=	_	_	_	
51-33	15309-15316	notrunc	_	_	_	
51-34	15317-15319	bs	_	_	_	
51-35	15319-15320	=	_	_	_	
51-36	15320-15321	1	_	_	_	
51-37	15322-15327	count	_	_	_	
51-38	15327-15328	=	_	_	_	
51-39	15328-15329	8	_	_	_	
51-40	15330-15331	8	_	_	_	
51-41	15331-15332	+	_	_	_	
51-42	15332-15333	0	_	_	_	
51-43	15334-15341	records	_	_	_	
51-44	15342-15344	in	_	_	_	
51-45	15345-15346	8	_	_	_	
51-46	15346-15347	+	_	_	_	
51-47	15347-15348	0	_	_	_	
51-48	15349-15356	records	_	_	_	
51-49	15357-15360	out	_	_	_	
51-50	15361-15362	8	_	_	_	
51-51	15363-15368	bytes	_	_	_	
51-52	15369-15375	copied	_	_	_	
51-53	15375-15376	,	_	_	_	
51-54	15377-15386	0,0083022	_	_	_	
51-55	15387-15388	s	_	_	_	
51-56	15388-15389	,	_	_	_	
51-57	15390-15393	1,0	_	_	_	
51-58	15394-15396	kB	_	_	_	
51-59	15396-15397	/	_	_	_	
51-60	15397-15398	s	_	_	_	
51-61	15399-15401	In	_	_	_	
51-62	15402-15409	general	_	_	_	
51-63	15409-15410	,	_	_	_	
51-64	15411-15413	it	_	_	_	
51-65	15414-15417	was	_	_	_	
51-66	15418-15421	not	_	_	_	
51-67	15422-15428	needed	_	_	_	
51-68	15429-15431	to	_	_	_	
51-69	15432-15436	shut	_	_	_	
51-70	15437-15441	down	_	_	_	
51-71	15442-15445	the	_	_	_	
51-72	15446-15452	server	_	_	_	
51-73	15452-15453	.	_	_	_	
51-74	15454-15456	It	_	_	_	
51-75	15457-15459	is	_	_	_	
51-76	15460-15470	sufficient	_	_	_	
51-77	15471-15475	that	_	_	_	
51-78	15476-15479	the	_	_	_	
51-79	15480-15484	page	_	_	_	
51-80	15485-15487	is	_	_	_	
51-81	15488-15495	flushed	_	_	_	
51-82	15496-15498	to	_	_	_	
51-83	15499-15503	disk	_	_	_	
51-84	15504-15507	and	_	_	_	
51-85	15508-15515	evicted	_	_	_	
51-86	15516-15520	from	_	_	_	
51-87	15521-15524	the	_	_	_	
51-88	15525-15530	cache	_	_	_	
51-89	15531-15532	(	_	_	_	
51-90	15532-15541	otherwise	_	_	_	
51-91	15541-15542	,	_	_	_	
51-92	15543-15546	the	_	_	_	
51-93	15547-15553	server	_	_	_	
51-94	15554-15559	would	_	_	_	
51-95	15560-15568	continue	_	_	_	
51-96	15569-15576	working	_	_	_	
51-97	15577-15581	with	_	_	_	
51-98	15582-15585	the	_	_	_	
51-99	15586-15590	page	_	_	_	
51-100	15591-15593	in	_	_	_	
51-101	15594-15597	the	_	_	_	
51-102	15598-15603	cache	_	_	_	
51-103	15603-15604	)	_	_	_	
51-104	15604-15605	.	_	_	_	
51-105	15606-15609	But	_	_	_	
51-106	15610-15614	this	_	_	_	
51-107	15615-15623	scenario	_	_	_	
51-108	15624-15626	is	_	_	_	
51-109	15627-15631	more	_	_	_	
51-110	15632-15643	complicated	_	_	_	
51-111	15644-15646	to	_	_	_	
51-112	15647-15656	reproduce	_	_	_	
51-113	15656-15657	.	_	_	_	

#Text=Now we start the server and try to read the table. student$ sudo pg_ctlcluster 11 main start => SELECT * FROM wallevel; WARNING: page verification failed, calculated checksum 23222 but expected 50884 ERROR:
52-1	15658-15661	Now	_	_	_	
52-2	15662-15664	we	_	_	_	
52-3	15665-15670	start	_	_	_	
52-4	15671-15674	the	_	_	_	
52-5	15675-15681	server	_	_	_	
52-6	15682-15685	and	_	_	_	
52-7	15686-15689	try	_	_	_	
52-8	15690-15692	to	_	_	_	
52-9	15693-15697	read	_	_	_	
52-10	15698-15701	the	_	_	_	
52-11	15702-15707	table	_	_	_	
52-12	15707-15708	.	_	_	_	
52-13	15709-15716	student	_	_	_	
52-14	15716-15717	$	_	_	_	
52-15	15718-15722	sudo	_	_	_	
52-16	15723-15736	pg_ctlcluster	_	_	_	
52-17	15737-15739	11	_	_	_	
52-18	15740-15744	main	_	_	_	
52-19	15745-15750	start	_	_	_	
52-20	15751-15752	=	_	_	_	
52-21	15752-15753	>	_	_	_	
52-22	15754-15760	SELECT	_	_	_	
52-23	15761-15762	*	_	_	_	
52-24	15763-15767	FROM	_	_	_	
52-25	15768-15776	wallevel	_	_	_	
52-26	15776-15777	;	_	_	_	
52-27	15778-15785	WARNING	_	_	_	
52-28	15785-15786	:	_	_	_	
52-29	15787-15791	page	_	_	_	
52-30	15792-15804	verification	_	_	_	
52-31	15805-15811	failed	_	_	_	
52-32	15811-15812	,	_	_	_	
52-33	15813-15823	calculated	_	_	_	
52-34	15824-15832	checksum	_	_	_	
52-35	15833-15838	23222	_	_	_	
52-36	15839-15842	but	_	_	_	
52-37	15843-15851	expected	_	_	_	
52-38	15852-15857	50884	_	_	_	
52-39	15858-15863	ERROR	_	_	_	
52-40	15863-15864	:	_	_	_	

#Text=invalid page in block 0 of relation base/16386/24890 But what shall we do if it is impossible to restore the data from backup? The ignore_checksum_failure parameter enables trying to read the table, of course, with a risk of getting corrupted data. => SET ignore_checksum_failure = on;
53-1	15865-15872	invalid	_	_	_	
53-2	15873-15877	page	_	_	_	
53-3	15878-15880	in	_	_	_	
53-4	15881-15886	block	_	_	_	
53-5	15887-15888	0	_	_	_	
53-6	15889-15891	of	_	_	_	
53-7	15892-15900	relation	_	_	_	
53-8	15901-15905	base	_	_	_	
53-9	15905-15906	/	_	_	_	
53-10	15906-15911	16386	_	_	_	
53-11	15911-15912	/	_	_	_	
53-12	15912-15917	24890	_	_	_	
53-13	15918-15921	But	_	_	_	
53-14	15922-15926	what	_	_	_	
53-15	15927-15932	shall	_	_	_	
53-16	15933-15935	we	_	_	_	
53-17	15936-15938	do	_	_	_	
53-18	15939-15941	if	_	_	_	
53-19	15942-15944	it	_	_	_	
53-20	15945-15947	is	_	_	_	
53-21	15948-15958	impossible	_	_	_	
53-22	15959-15961	to	_	_	_	
53-23	15962-15969	restore	_	_	_	
53-24	15970-15973	the	_	_	_	
53-25	15974-15978	data	_	_	_	
53-26	15979-15983	from	_	_	_	
53-27	15984-15990	backup	_	_	_	
53-28	15990-15991	?	_	_	_	
53-29	15992-15995	The	_	_	_	
53-30	15996-16019	ignore_checksum_failure	_	_	_	
53-31	16020-16029	parameter	_	_	_	
53-32	16030-16037	enables	_	_	_	
53-33	16038-16044	trying	_	_	_	
53-34	16045-16047	to	_	_	_	
53-35	16048-16052	read	_	_	_	
53-36	16053-16056	the	_	_	_	
53-37	16057-16062	table	_	_	_	
53-38	16062-16063	,	_	_	_	
53-39	16064-16066	of	_	_	_	
53-40	16067-16073	course	_	_	_	
53-41	16073-16074	,	_	_	_	
53-42	16075-16079	with	_	_	_	
53-43	16080-16081	a	_	_	_	
53-44	16082-16086	risk	_	_	_	
53-45	16087-16089	of	_	_	_	
53-46	16090-16097	getting	_	_	_	
53-47	16098-16107	corrupted	_	_	_	
53-48	16108-16112	data	_	_	_	
53-49	16112-16113	.	_	_	_	
53-50	16114-16115	=	_	_	_	
53-51	16115-16116	>	_	_	_	
53-52	16117-16120	SET	_	_	_	
53-53	16121-16144	ignore_checksum_failure	_	_	_	
53-54	16145-16146	=	_	_	_	
53-55	16147-16149	on	_	_	_	
53-56	16149-16150	;	_	_	_	

#Text==> SELECT * FROM wallevel; WARNING: page verification failed, calculated checksum 23222 but expected 50884 --- (1 row) Of course, everything is fine in this case since we hurt only the header rather than pure data.
54-1	16151-16152	=	_	_	_	
54-2	16152-16153	>	_	_	_	
54-3	16154-16160	SELECT	_	_	_	
54-4	16161-16162	*	_	_	_	
54-5	16163-16167	FROM	_	_	_	
54-6	16168-16176	wallevel	_	_	_	
54-7	16176-16177	;	_	_	_	
54-8	16178-16185	WARNING	_	_	_	
54-9	16185-16186	:	_	_	_	
54-10	16187-16191	page	_	_	_	
54-11	16192-16204	verification	_	_	_	
54-12	16205-16211	failed	_	_	_	
54-13	16211-16212	,	_	_	_	
54-14	16213-16223	calculated	_	_	_	
54-15	16224-16232	checksum	_	_	_	
54-16	16233-16238	23222	_	_	_	
54-17	16239-16242	but	_	_	_	
54-18	16243-16251	expected	_	_	_	
54-19	16252-16257	50884	_	_	_	
54-20	16258-16259	-	_	_	_	
54-21	16259-16260	-	_	_	_	
54-22	16260-16261	-	_	_	_	
54-23	16262-16263	(	_	_	_	
54-24	16263-16264	1	_	_	_	
54-25	16265-16268	row	_	_	_	
54-26	16268-16269	)	_	_	_	
54-27	16270-16272	Of	_	_	_	
54-28	16273-16279	course	_	_	_	
54-29	16279-16280	,	_	_	_	
54-30	16281-16291	everything	_	_	_	
54-31	16292-16294	is	_	_	_	
54-32	16295-16299	fine	_	_	_	
54-33	16300-16302	in	_	_	_	
54-34	16303-16307	this	_	_	_	
54-35	16308-16312	case	_	_	_	
54-36	16313-16318	since	_	_	_	
54-37	16319-16321	we	_	_	_	
54-38	16322-16326	hurt	_	_	_	
54-39	16327-16331	only	_	_	_	
54-40	16332-16335	the	_	_	_	
54-41	16336-16342	header	_	_	_	
54-42	16343-16349	rather	_	_	_	
54-43	16350-16354	than	_	_	_	
54-44	16355-16359	pure	_	_	_	
54-45	16360-16364	data	_	_	_	
54-46	16364-16365	.	_	_	_	

#Text=And there is one more point to note. When checksums are turned on, hint bits are WAL-logged (we discussed them earlier) since a change to any, even inessential, bit results in a change to the checksum. When checksums are turned off, the wal_log_hints parameter is responsible for WAL-logging hint bits. Changes to hint bits are always logged as FPI (full page image), which pretty much increases the WAL size. In this case, it makes sense to use the wal_compression parameter to turn on compression of FPIs (this parameter was added in version 9.5). We will look at specific figures a bit later.
55-1	16366-16369	And	_	_	_	
55-2	16370-16375	there	_	_	_	
55-3	16376-16378	is	_	_	_	
55-4	16379-16382	one	_	_	_	
55-5	16383-16387	more	_	_	_	
55-6	16388-16393	point	_	_	_	
55-7	16394-16396	to	_	_	_	
55-8	16397-16401	note	_	_	_	
55-9	16401-16402	.	_	_	_	
55-10	16403-16407	When	_	_	_	
55-11	16408-16417	checksums	_	_	_	
55-12	16418-16421	are	_	_	_	
55-13	16422-16428	turned	_	_	_	
55-14	16429-16431	on	_	_	_	
55-15	16431-16432	,	_	_	_	
55-16	16433-16437	hint	_	_	_	
55-17	16438-16442	bits	_	_	_	
55-18	16443-16446	are	_	_	_	
55-19	16447-16457	WAL-logged	_	_	_	
55-20	16458-16459	(	_	_	_	
55-21	16459-16461	we	_	_	_	
55-22	16462-16471	discussed	_	_	_	
55-23	16472-16476	them	_	_	_	
55-24	16477-16484	earlier	_	_	_	
55-25	16484-16485	)	_	_	_	
55-26	16486-16491	since	_	_	_	
55-27	16492-16493	a	_	_	_	
55-28	16494-16500	change	_	_	_	
55-29	16501-16503	to	_	_	_	
55-30	16504-16507	any	_	_	_	
55-31	16507-16508	,	_	_	_	
55-32	16509-16513	even	_	_	_	
55-33	16514-16525	inessential	_	_	_	
55-34	16525-16526	,	_	_	_	
55-35	16527-16530	bit	_	_	_	
55-36	16531-16538	results	_	_	_	
55-37	16539-16541	in	_	_	_	
55-38	16542-16543	a	_	_	_	
55-39	16544-16550	change	_	_	_	
55-40	16551-16553	to	_	_	_	
55-41	16554-16557	the	_	_	_	
55-42	16558-16566	checksum	_	_	_	
55-43	16566-16567	.	_	_	_	
55-44	16568-16572	When	_	_	_	
55-45	16573-16582	checksums	_	_	_	
55-46	16583-16586	are	_	_	_	
55-47	16587-16593	turned	_	_	_	
55-48	16594-16597	off	_	_	_	
55-49	16597-16598	,	_	_	_	
55-50	16599-16602	the	_	_	_	
55-51	16603-16616	wal_log_hints	_	_	_	
55-52	16617-16626	parameter	_	_	_	
55-53	16627-16629	is	_	_	_	
55-54	16630-16641	responsible	_	_	_	
55-55	16642-16645	for	_	_	_	
55-56	16646-16657	WAL-logging	_	_	_	
55-57	16658-16662	hint	_	_	_	
55-58	16663-16667	bits	_	_	_	
55-59	16667-16668	.	_	_	_	
55-60	16669-16676	Changes	_	_	_	
55-61	16677-16679	to	_	_	_	
55-62	16680-16684	hint	_	_	_	
55-63	16685-16689	bits	_	_	_	
55-64	16690-16693	are	_	_	_	
55-65	16694-16700	always	_	_	_	
55-66	16701-16707	logged	_	_	_	
55-67	16708-16710	as	_	_	_	
55-68	16711-16714	FPI	_	_	_	
55-69	16715-16716	(	_	_	_	
55-70	16716-16720	full	_	_	_	
55-71	16721-16725	page	_	_	_	
55-72	16726-16731	image	_	_	_	
55-73	16731-16732	)	_	_	_	
55-74	16732-16733	,	_	_	_	
55-75	16734-16739	which	_	_	_	
55-76	16740-16746	pretty	_	_	_	
55-77	16747-16751	much	_	_	_	
55-78	16752-16761	increases	_	_	_	
55-79	16762-16765	the	_	_	_	
55-80	16766-16769	WAL	_	_	_	
55-81	16770-16774	size	_	_	_	
55-82	16774-16775	.	_	_	_	
55-83	16776-16778	In	_	_	_	
55-84	16779-16783	this	_	_	_	
55-85	16784-16788	case	_	_	_	
55-86	16788-16789	,	_	_	_	
55-87	16790-16792	it	_	_	_	
55-88	16793-16798	makes	_	_	_	
55-89	16799-16804	sense	_	_	_	
55-90	16805-16807	to	_	_	_	
55-91	16808-16811	use	_	_	_	
55-92	16812-16815	the	_	_	_	
55-93	16816-16831	wal_compression	_	_	_	
55-94	16832-16841	parameter	_	_	_	
55-95	16842-16844	to	_	_	_	
55-96	16845-16849	turn	_	_	_	
55-97	16850-16852	on	_	_	_	
55-98	16853-16864	compression	_	_	_	
55-99	16865-16867	of	_	_	_	
55-100	16868-16872	FPIs	_	_	_	
55-101	16873-16874	(	_	_	_	
55-102	16874-16878	this	_	_	_	
55-103	16879-16888	parameter	_	_	_	
55-104	16889-16892	was	_	_	_	
55-105	16893-16898	added	_	_	_	
55-106	16899-16901	in	_	_	_	
55-107	16902-16909	version	_	_	_	
55-108	16909-16910	 	_	_	_	
55-109	16910-16913	9.5	_	_	_	
55-110	16913-16914	)	_	_	_	
55-111	16914-16915	.	_	_	_	
55-112	16916-16918	We	_	_	_	
55-113	16919-16923	will	_	_	_	
55-114	16924-16928	look	_	_	_	
55-115	16929-16931	at	_	_	_	
55-116	16932-16940	specific	_	_	_	
55-117	16941-16948	figures	_	_	_	
55-118	16949-16950	a	_	_	_	
55-119	16951-16954	bit	_	_	_	
55-120	16955-16960	later	_	_	_	
55-121	16960-16961	.	_	_	_	

#Text=Atomicity of writing And finally, there is an issue with the atomicity of writing. A database page occupies not less than 8 KB (it may be 16 or 32 KB), and at a low level, a write is done in blocks, which usually have smaller sizes (usually 512 bytes or 4 KB). Therefore, in case of a power outage, a data page can be written partially. It's clear that during a recovery, it makes no sense to apply usual WAL records to such a page.
56-1	16962-16971	Atomicity	_	_	_	
56-2	16972-16974	of	_	_	_	
56-3	16975-16982	writing	_	_	_	
56-4	16983-16986	And	_	_	_	
56-5	16987-16994	finally	_	_	_	
56-6	16994-16995	,	_	_	_	
56-7	16996-17001	there	_	_	_	
56-8	17002-17004	is	_	_	_	
56-9	17005-17007	an	_	_	_	
56-10	17008-17013	issue	_	_	_	
56-11	17014-17018	with	_	_	_	
56-12	17019-17022	the	_	_	_	
56-13	17023-17032	atomicity	_	_	_	
56-14	17033-17035	of	_	_	_	
56-15	17036-17043	writing	_	_	_	
56-16	17043-17044	.	_	_	_	
56-17	17045-17046	A	_	_	_	
56-18	17047-17055	database	_	_	_	
56-19	17056-17060	page	_	_	_	
56-20	17061-17069	occupies	_	_	_	
56-21	17070-17073	not	_	_	_	
56-22	17074-17078	less	_	_	_	
56-23	17079-17083	than	_	_	_	
56-24	17084-17085	8	_	_	_	
56-25	17085-17086	 	_	_	_	
56-26	17086-17088	KB	_	_	_	
56-27	17089-17090	(	_	_	_	
56-28	17090-17092	it	_	_	_	
56-29	17093-17096	may	_	_	_	
56-30	17097-17099	be	_	_	_	
56-31	17100-17102	16	_	_	_	
56-32	17103-17105	or	_	_	_	
56-33	17106-17108	32	_	_	_	
56-34	17108-17109	 	_	_	_	
56-35	17109-17111	KB	_	_	_	
56-36	17111-17112	)	_	_	_	
56-37	17112-17113	,	_	_	_	
56-38	17114-17117	and	_	_	_	
56-39	17118-17120	at	_	_	_	
56-40	17121-17122	a	_	_	_	
56-41	17123-17126	low	_	_	_	
56-42	17127-17132	level	_	_	_	
56-43	17132-17133	,	_	_	_	
56-44	17134-17135	a	_	_	_	
56-45	17136-17141	write	_	_	_	
56-46	17142-17144	is	_	_	_	
56-47	17145-17149	done	_	_	_	
56-48	17150-17152	in	_	_	_	
56-49	17153-17159	blocks	_	_	_	
56-50	17159-17160	,	_	_	_	
56-51	17161-17166	which	_	_	_	
56-52	17167-17174	usually	_	_	_	
56-53	17175-17179	have	_	_	_	
56-54	17180-17187	smaller	_	_	_	
56-55	17188-17193	sizes	_	_	_	
56-56	17194-17195	(	_	_	_	
56-57	17195-17202	usually	_	_	_	
56-58	17203-17206	512	_	_	_	
56-59	17206-17207	 	_	_	_	
56-60	17207-17212	bytes	_	_	_	
56-61	17213-17215	or	_	_	_	
56-62	17216-17217	4	_	_	_	
56-63	17217-17218	 	_	_	_	
56-64	17218-17220	KB	_	_	_	
56-65	17220-17221	)	_	_	_	
56-66	17221-17222	.	_	_	_	
56-67	17223-17232	Therefore	_	_	_	
56-68	17232-17233	,	_	_	_	
56-69	17234-17236	in	_	_	_	
56-70	17237-17241	case	_	_	_	
56-71	17242-17244	of	_	_	_	
56-72	17245-17246	a	_	_	_	
56-73	17247-17252	power	_	_	_	
56-74	17253-17259	outage	_	_	_	
56-75	17259-17260	,	_	_	_	
56-76	17261-17262	a	_	_	_	
56-77	17263-17267	data	_	_	_	
56-78	17268-17272	page	_	_	_	
56-79	17273-17276	can	_	_	_	
56-80	17277-17279	be	_	_	_	
56-81	17280-17287	written	_	_	_	
56-82	17288-17297	partially	_	_	_	
56-83	17297-17298	.	_	_	_	
56-84	17299-17303	It's	_	_	_	
56-85	17304-17309	clear	_	_	_	
56-86	17310-17314	that	_	_	_	
56-87	17315-17321	during	_	_	_	
56-88	17322-17323	a	_	_	_	
56-89	17324-17332	recovery	_	_	_	
56-90	17332-17333	,	_	_	_	
56-91	17334-17336	it	_	_	_	
56-92	17337-17342	makes	_	_	_	
56-93	17343-17345	no	_	_	_	
56-94	17346-17351	sense	_	_	_	
56-95	17352-17354	to	_	_	_	
56-96	17355-17360	apply	_	_	_	
56-97	17361-17366	usual	_	_	_	
56-98	17367-17370	WAL	_	_	_	
56-99	17371-17378	records	_	_	_	
56-100	17379-17381	to	_	_	_	
56-101	17382-17386	such	_	_	_	
56-102	17387-17388	a	_	_	_	
56-103	17389-17393	page	_	_	_	
56-104	17393-17394	.	_	_	_	

#Text=To prevent this, PostgreSQL enables WAL-logging a full page image at the first change of the page since the beginning of a checkpoint cycle (the same image is also logged when hint bits change). The full_page_writes parameter controls this, and it is turned on by default. If a recovery process comes across an FPI in WAL, it writes the image to disk unconditionally (without LSN checking): the FPI is more trustworthy since it is protected by a checksum, like each WAL record. And it is this reliably correct image, which normal WAL records are applied to.
57-1	17395-17397	To	_	_	_	
57-2	17398-17405	prevent	_	_	_	
57-3	17406-17410	this	_	_	_	
57-4	17410-17411	,	_	_	_	
57-5	17412-17422	PostgreSQL	_	_	_	
57-6	17423-17430	enables	_	_	_	
57-7	17431-17442	WAL-logging	_	_	_	
57-8	17443-17444	a	_	_	_	
57-9	17445-17449	full	_	_	_	
57-10	17450-17454	page	_	_	_	
57-11	17455-17460	image	_	_	_	
57-12	17461-17463	at	_	_	_	
57-13	17464-17467	the	_	_	_	
57-14	17468-17473	first	_	_	_	
57-15	17474-17480	change	_	_	_	
57-16	17481-17483	of	_	_	_	
57-17	17484-17487	the	_	_	_	
57-18	17488-17492	page	_	_	_	
57-19	17493-17498	since	_	_	_	
57-20	17499-17502	the	_	_	_	
57-21	17503-17512	beginning	_	_	_	
57-22	17513-17515	of	_	_	_	
57-23	17516-17517	a	_	_	_	
57-24	17518-17528	checkpoint	_	_	_	
57-25	17529-17534	cycle	_	_	_	
57-26	17535-17536	(	_	_	_	
57-27	17536-17539	the	_	_	_	
57-28	17540-17544	same	_	_	_	
57-29	17545-17550	image	_	_	_	
57-30	17551-17553	is	_	_	_	
57-31	17554-17558	also	_	_	_	
57-32	17559-17565	logged	_	_	_	
57-33	17566-17570	when	_	_	_	
57-34	17571-17575	hint	_	_	_	
57-35	17576-17580	bits	_	_	_	
57-36	17581-17587	change	_	_	_	
57-37	17587-17588	)	_	_	_	
57-38	17588-17589	.	_	_	_	
57-39	17590-17593	The	_	_	_	
57-40	17594-17610	full_page_writes	_	_	_	
57-41	17611-17620	parameter	_	_	_	
57-42	17621-17629	controls	_	_	_	
57-43	17630-17634	this	_	_	_	
57-44	17634-17635	,	_	_	_	
57-45	17636-17639	and	_	_	_	
57-46	17640-17642	it	_	_	_	
57-47	17643-17645	is	_	_	_	
57-48	17646-17652	turned	_	_	_	
57-49	17653-17655	on	_	_	_	
57-50	17656-17658	by	_	_	_	
57-51	17659-17666	default	_	_	_	
57-52	17666-17667	.	_	_	_	
57-53	17668-17670	If	_	_	_	
57-54	17671-17672	a	_	_	_	
57-55	17673-17681	recovery	_	_	_	
57-56	17682-17689	process	_	_	_	
57-57	17690-17695	comes	_	_	_	
57-58	17696-17702	across	_	_	_	
57-59	17703-17705	an	_	_	_	
57-60	17706-17709	FPI	_	_	_	
57-61	17710-17712	in	_	_	_	
57-62	17713-17716	WAL	_	_	_	
57-63	17716-17717	,	_	_	_	
57-64	17718-17720	it	_	_	_	
57-65	17721-17727	writes	_	_	_	
57-66	17728-17731	the	_	_	_	
57-67	17732-17737	image	_	_	_	
57-68	17738-17740	to	_	_	_	
57-69	17741-17745	disk	_	_	_	
57-70	17746-17761	unconditionally	_	_	_	
57-71	17762-17763	(	_	_	_	
57-72	17763-17770	without	_	_	_	
57-73	17771-17774	LSN	_	_	_	
57-74	17775-17783	checking	_	_	_	
57-75	17783-17784	)	_	_	_	
57-76	17784-17785	:	_	_	_	
57-77	17786-17789	the	_	_	_	
57-78	17790-17793	FPI	_	_	_	
57-79	17794-17796	is	_	_	_	
57-80	17797-17801	more	_	_	_	
57-81	17802-17813	trustworthy	_	_	_	
57-82	17814-17819	since	_	_	_	
57-83	17820-17822	it	_	_	_	
57-84	17823-17825	is	_	_	_	
57-85	17826-17835	protected	_	_	_	
57-86	17836-17838	by	_	_	_	
57-87	17839-17840	a	_	_	_	
57-88	17841-17849	checksum	_	_	_	
57-89	17849-17850	,	_	_	_	
57-90	17851-17855	like	_	_	_	
57-91	17856-17860	each	_	_	_	
57-92	17861-17864	WAL	_	_	_	
57-93	17865-17871	record	_	_	_	
57-94	17871-17872	.	_	_	_	
57-95	17873-17876	And	_	_	_	
57-96	17877-17879	it	_	_	_	
57-97	17880-17882	is	_	_	_	
57-98	17883-17887	this	_	_	_	
57-99	17888-17896	reliably	_	_	_	
57-100	17897-17904	correct	_	_	_	
57-101	17905-17910	image	_	_	_	
57-102	17910-17911	,	_	_	_	
57-103	17912-17917	which	_	_	_	
57-104	17918-17924	normal	_	_	_	
57-105	17925-17928	WAL	_	_	_	
57-106	17929-17936	records	_	_	_	
57-107	17937-17940	are	_	_	_	
57-108	17941-17948	applied	_	_	_	
57-109	17949-17951	to	_	_	_	
57-110	17951-17952	.	_	_	_	

#Text=Although in PostgreSQL, an FPI does not include free space (we discussed the block structure earlier), FPIs considerably increase the amount of WAL records generated. As already mentioned, the situation can be improved by compression of FPIs (using the wal_compression parameter). To get an insight into changing the WAL size, let's conduct a simple experiment using the pgbench utility. Performing the initialization: student$ pgbench -i test dropping old tables... creating tables... generating data...
58-1	17953-17961	Although	_	_	_	
58-2	17962-17964	in	_	_	_	
58-3	17965-17975	PostgreSQL	_	_	_	
58-4	17975-17976	,	_	_	_	
58-5	17977-17979	an	_	_	_	
58-6	17980-17983	FPI	_	_	_	
58-7	17984-17988	does	_	_	_	
58-8	17989-17992	not	_	_	_	
58-9	17993-18000	include	_	_	_	
58-10	18001-18005	free	_	_	_	
58-11	18006-18011	space	_	_	_	
58-12	18012-18013	(	_	_	_	
58-13	18013-18015	we	_	_	_	
58-14	18016-18025	discussed	_	_	_	
58-15	18026-18029	the	_	_	_	
58-16	18030-18035	block	_	_	_	
58-17	18036-18045	structure	_	_	_	
58-18	18046-18053	earlier	_	_	_	
58-19	18053-18054	)	_	_	_	
58-20	18054-18055	,	_	_	_	
58-21	18056-18060	FPIs	_	_	_	
58-22	18061-18073	considerably	_	_	_	
58-23	18074-18082	increase	_	_	_	
58-24	18083-18086	the	_	_	_	
58-25	18087-18093	amount	_	_	_	
58-26	18094-18096	of	_	_	_	
58-27	18097-18100	WAL	_	_	_	
58-28	18101-18108	records	_	_	_	
58-29	18109-18118	generated	_	_	_	
58-30	18118-18119	.	_	_	_	
58-31	18120-18122	As	_	_	_	
58-32	18123-18130	already	_	_	_	
58-33	18131-18140	mentioned	_	_	_	
58-34	18140-18141	,	_	_	_	
58-35	18142-18145	the	_	_	_	
58-36	18146-18155	situation	_	_	_	
58-37	18156-18159	can	_	_	_	
58-38	18160-18162	be	_	_	_	
58-39	18163-18171	improved	_	_	_	
58-40	18172-18174	by	_	_	_	
58-41	18175-18186	compression	_	_	_	
58-42	18187-18189	of	_	_	_	
58-43	18190-18194	FPIs	_	_	_	
58-44	18195-18196	(	_	_	_	
58-45	18196-18201	using	_	_	_	
58-46	18202-18205	the	_	_	_	
58-47	18206-18221	wal_compression	_	_	_	
58-48	18222-18231	parameter	_	_	_	
58-49	18231-18232	)	_	_	_	
58-50	18232-18233	.	_	_	_	
58-51	18234-18236	To	_	_	_	
58-52	18237-18240	get	_	_	_	
58-53	18241-18243	an	_	_	_	
58-54	18244-18251	insight	_	_	_	
58-55	18252-18256	into	_	_	_	
58-56	18257-18265	changing	_	_	_	
58-57	18266-18269	the	_	_	_	
58-58	18270-18273	WAL	_	_	_	
58-59	18274-18278	size	_	_	_	
58-60	18278-18279	,	_	_	_	
58-61	18280-18285	let's	_	_	_	
58-62	18286-18293	conduct	_	_	_	
58-63	18294-18295	a	_	_	_	
58-64	18296-18302	simple	_	_	_	
58-65	18303-18313	experiment	_	_	_	
58-66	18314-18319	using	_	_	_	
58-67	18320-18323	the	_	_	_	
58-68	18324-18331	pgbench	_	_	_	
58-69	18332-18339	utility	_	_	_	
58-70	18339-18340	.	_	_	_	
58-71	18341-18351	Performing	_	_	_	
58-72	18352-18355	the	_	_	_	
58-73	18356-18370	initialization	_	_	_	
58-74	18370-18371	:	_	_	_	
58-75	18372-18379	student	_	_	_	
58-76	18379-18380	$	_	_	_	
58-77	18381-18388	pgbench	_	_	_	
58-78	18389-18390	-	_	_	_	
58-79	18390-18391	i	_	_	_	
58-80	18392-18396	test	_	_	_	
58-81	18397-18405	dropping	_	_	_	
58-82	18406-18409	old	_	_	_	
58-83	18410-18416	tables	_	_	_	
58-84	18416-18417	.	_	_	_	
58-85	18417-18418	.	_	_	_	
58-86	18418-18419	.	_	_	_	
58-87	18420-18428	creating	_	_	_	
58-88	18429-18435	tables	_	_	_	
58-89	18435-18436	.	_	_	_	
58-90	18436-18437	.	_	_	_	
58-91	18437-18438	.	_	_	_	
58-92	18439-18449	generating	_	_	_	
58-93	18450-18454	data	_	_	_	
58-94	18454-18455	.	_	_	_	
58-95	18455-18456	.	_	_	_	
58-96	18456-18457	.	_	_	_	

#Text=100000 of 100000 tuples (100%) done (elapsed 0.15 s, remaining 0.00 s) vacuuming... creating primary keys... done. The full_page_writes parameter is turned on: => SHOW full_page_writes; full_page_writes ------------------
59-1	18458-18464	100000	_	_	_	
59-2	18465-18467	of	_	_	_	
59-3	18468-18474	100000	_	_	_	
59-4	18475-18481	tuples	_	_	_	
59-5	18482-18483	(	_	_	_	
59-6	18483-18487	100%	_	_	_	
59-7	18487-18488	)	_	_	_	
59-8	18489-18493	done	_	_	_	
59-9	18494-18495	(	_	_	_	
59-10	18495-18502	elapsed	_	_	_	
59-11	18503-18507	0.15	_	_	_	
59-12	18508-18509	s	_	_	_	
59-13	18509-18510	,	_	_	_	
59-14	18511-18520	remaining	_	_	_	
59-15	18521-18525	0.00	_	_	_	
59-16	18526-18527	s	_	_	_	
59-17	18527-18528	)	_	_	_	
59-18	18529-18538	vacuuming	_	_	_	
59-19	18538-18539	.	_	_	_	
59-20	18539-18540	.	_	_	_	
59-21	18540-18541	.	_	_	_	
59-22	18542-18550	creating	_	_	_	
59-23	18551-18558	primary	_	_	_	
59-24	18559-18563	keys	_	_	_	
59-25	18563-18564	.	_	_	_	
59-26	18564-18565	.	_	_	_	
59-27	18565-18566	.	_	_	_	
59-28	18567-18571	done	_	_	_	
59-29	18571-18572	.	_	_	_	
59-30	18573-18576	The	_	_	_	
59-31	18577-18593	full_page_writes	_	_	_	
59-32	18594-18603	parameter	_	_	_	
59-33	18604-18606	is	_	_	_	
59-34	18607-18613	turned	_	_	_	
59-35	18614-18616	on	_	_	_	
59-36	18616-18617	:	_	_	_	
59-37	18618-18619	=	_	_	_	
59-38	18619-18620	>	_	_	_	
59-39	18621-18625	SHOW	_	_	_	
59-40	18626-18642	full_page_writes	_	_	_	
59-41	18642-18643	;	_	_	_	
59-42	18644-18660	full_page_writes	_	_	_	
59-43	18661-18662	-	_	_	_	
59-44	18662-18663	-	_	_	_	
59-45	18663-18664	-	_	_	_	
59-46	18664-18665	-	_	_	_	
59-47	18665-18666	-	_	_	_	
59-48	18666-18667	-	_	_	_	
59-49	18667-18668	-	_	_	_	
59-50	18668-18669	-	_	_	_	
59-51	18669-18670	-	_	_	_	
59-52	18670-18671	-	_	_	_	
59-53	18671-18672	-	_	_	_	
59-54	18672-18673	-	_	_	_	
59-55	18673-18674	-	_	_	_	
59-56	18674-18675	-	_	_	_	
59-57	18675-18676	-	_	_	_	
59-58	18676-18677	-	_	_	_	
59-59	18677-18678	-	_	_	_	
59-60	18678-18679	-	_	_	_	

#Text=(1 row) Let's perform a checkpoint and immediately run a test for 30 seconds. => CHECKPOINT; => SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn
60-1	18680-18681	(	_	_	_	
60-2	18681-18682	1	_	_	_	
60-3	18683-18686	row	_	_	_	
60-4	18686-18687	)	_	_	_	
60-5	18688-18693	Let's	_	_	_	
60-6	18694-18701	perform	_	_	_	
60-7	18702-18703	a	_	_	_	
60-8	18704-18714	checkpoint	_	_	_	
60-9	18715-18718	and	_	_	_	
60-10	18719-18730	immediately	_	_	_	
60-11	18731-18734	run	_	_	_	
60-12	18735-18736	a	_	_	_	
60-13	18737-18741	test	_	_	_	
60-14	18742-18745	for	_	_	_	
60-15	18746-18748	30	_	_	_	
60-16	18748-18749	 	_	_	_	
60-17	18749-18756	seconds	_	_	_	
60-18	18756-18757	.	_	_	_	
60-19	18758-18759	=	_	_	_	
60-20	18759-18760	>	_	_	_	
60-21	18761-18771	CHECKPOINT	_	_	_	
60-22	18771-18772	;	_	_	_	
60-23	18773-18774	=	_	_	_	
60-24	18774-18775	>	_	_	_	
60-25	18776-18782	SELECT	_	_	_	
60-26	18783-18808	pg_current_wal_insert_lsn	_	_	_	
60-27	18808-18809	(	_	_	_	
60-28	18809-18810	)	_	_	_	
60-29	18810-18811	;	_	_	_	
60-30	18812-18837	pg_current_wal_insert_lsn	_	_	_	

#Text=--------------------------- 0/38E04A08 (1 row) student$ pgbench -T 30 test starting vacuum...end. transaction type: TPC-B (sort of) scaling factor: 1 query mode: simple
61-1	18838-18839	-	_	_	_	
61-2	18839-18840	-	_	_	_	
61-3	18840-18841	-	_	_	_	
61-4	18841-18842	-	_	_	_	
61-5	18842-18843	-	_	_	_	
61-6	18843-18844	-	_	_	_	
61-7	18844-18845	-	_	_	_	
61-8	18845-18846	-	_	_	_	
61-9	18846-18847	-	_	_	_	
61-10	18847-18848	-	_	_	_	
61-11	18848-18849	-	_	_	_	
61-12	18849-18850	-	_	_	_	
61-13	18850-18851	-	_	_	_	
61-14	18851-18852	-	_	_	_	
61-15	18852-18853	-	_	_	_	
61-16	18853-18854	-	_	_	_	
61-17	18854-18855	-	_	_	_	
61-18	18855-18856	-	_	_	_	
61-19	18856-18857	-	_	_	_	
61-20	18857-18858	-	_	_	_	
61-21	18858-18859	-	_	_	_	
61-22	18859-18860	-	_	_	_	
61-23	18860-18861	-	_	_	_	
61-24	18861-18862	-	_	_	_	
61-25	18862-18863	-	_	_	_	
61-26	18863-18864	-	_	_	_	
61-27	18864-18865	-	_	_	_	
61-28	18866-18867	0	_	_	_	
61-29	18867-18868	/	_	_	_	
61-30	18868-18876	38E04A08	_	_	_	
61-31	18877-18878	(	_	_	_	
61-32	18878-18879	1	_	_	_	
61-33	18880-18883	row	_	_	_	
61-34	18883-18884	)	_	_	_	
61-35	18885-18892	student	_	_	_	
61-36	18892-18893	$	_	_	_	
61-37	18894-18901	pgbench	_	_	_	
61-38	18902-18903	-	_	_	_	
61-39	18903-18904	T	_	_	_	
61-40	18905-18907	30	_	_	_	
61-41	18908-18912	test	_	_	_	
61-42	18913-18921	starting	_	_	_	
61-43	18922-18928	vacuum	_	_	_	
61-44	18928-18929	.	_	_	_	
61-45	18929-18930	.	_	_	_	
61-46	18930-18931	.	_	_	_	
61-47	18931-18934	end	_	_	_	
61-48	18934-18935	.	_	_	_	
61-49	18936-18947	transaction	_	_	_	
61-50	18948-18952	type	_	_	_	
61-51	18952-18953	:	_	_	_	
61-52	18954-18959	TPC-B	_	_	_	
61-53	18960-18961	(	_	_	_	
61-54	18961-18965	sort	_	_	_	
61-55	18966-18968	of	_	_	_	
61-56	18968-18969	)	_	_	_	
61-57	18970-18977	scaling	_	_	_	
61-58	18978-18984	factor	_	_	_	
61-59	18984-18985	:	_	_	_	
61-60	18986-18987	1	_	_	_	
61-61	18988-18993	query	_	_	_	
61-62	18994-18998	mode	_	_	_	
61-63	18998-18999	:	_	_	_	
61-64	19000-19006	simple	_	_	_	

#Text=number of clients: 1 number of threads: 1 duration: 30 s number of transactions actually processed: 26851 latency average = 1.117 ms tps = 895.006720 (including connections establishing) tps = 895.095229 (excluding connections establishing)
62-1	19007-19013	number	_	_	_	
62-2	19014-19016	of	_	_	_	
62-3	19017-19024	clients	_	_	_	
62-4	19024-19025	:	_	_	_	
62-5	19026-19027	1	_	_	_	
62-6	19028-19034	number	_	_	_	
62-7	19035-19037	of	_	_	_	
62-8	19038-19045	threads	_	_	_	
62-9	19045-19046	:	_	_	_	
62-10	19047-19048	1	_	_	_	
62-11	19049-19057	duration	_	_	_	
62-12	19057-19058	:	_	_	_	
62-13	19059-19061	30	_	_	_	
62-14	19062-19063	s	_	_	_	
62-15	19064-19070	number	_	_	_	
62-16	19071-19073	of	_	_	_	
62-17	19074-19086	transactions	_	_	_	
62-18	19087-19095	actually	_	_	_	
62-19	19096-19105	processed	_	_	_	
62-20	19105-19106	:	_	_	_	
62-21	19107-19112	26851	_	_	_	
62-22	19113-19120	latency	_	_	_	
62-23	19121-19128	average	_	_	_	
62-24	19129-19130	=	_	_	_	
62-25	19131-19136	1.117	_	_	_	
62-26	19137-19139	ms	_	_	_	
62-27	19140-19143	tps	_	_	_	
62-28	19144-19145	=	_	_	_	
62-29	19146-19156	895.006720	_	_	_	
62-30	19157-19158	(	_	_	_	
62-31	19158-19167	including	_	_	_	
62-32	19168-19179	connections	_	_	_	
62-33	19180-19192	establishing	_	_	_	
62-34	19192-19193	)	_	_	_	
62-35	19194-19197	tps	_	_	_	
62-36	19198-19199	=	_	_	_	
62-37	19200-19210	895.095229	_	_	_	
62-38	19211-19212	(	_	_	_	
62-39	19212-19221	excluding	_	_	_	
62-40	19222-19233	connections	_	_	_	
62-41	19234-19246	establishing	_	_	_	
62-42	19246-19247	)	_	_	_	

#Text==> SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn --------------------------- 0/3A69C478 (1 row)
63-1	19248-19249	=	_	_	_	
63-2	19249-19250	>	_	_	_	
63-3	19251-19257	SELECT	_	_	_	
63-4	19258-19283	pg_current_wal_insert_lsn	_	_	_	
63-5	19283-19284	(	_	_	_	
63-6	19284-19285	)	_	_	_	
63-7	19285-19286	;	_	_	_	
63-8	19287-19312	pg_current_wal_insert_lsn	PARAM	_	_	
63-9	19313-19314	-	_	_	_	
63-10	19314-19315	-	_	_	_	
63-11	19315-19316	-	_	_	_	
63-12	19316-19317	-	_	_	_	
63-13	19317-19318	-	_	_	_	
63-14	19318-19319	-	_	_	_	
63-15	19319-19320	-	_	_	_	
63-16	19320-19321	-	_	_	_	
63-17	19321-19322	-	_	_	_	
63-18	19322-19323	-	_	_	_	
63-19	19323-19324	-	_	_	_	
63-20	19324-19325	-	_	_	_	
63-21	19325-19326	-	_	_	_	
63-22	19326-19327	-	_	_	_	
63-23	19327-19328	-	_	_	_	
63-24	19328-19329	-	_	_	_	
63-25	19329-19330	-	_	_	_	
63-26	19330-19331	-	_	_	_	
63-27	19331-19332	-	_	_	_	
63-28	19332-19333	-	_	_	_	
63-29	19333-19334	-	_	_	_	
63-30	19334-19335	-	_	_	_	
63-31	19335-19336	-	_	_	_	
63-32	19336-19337	-	_	_	_	
63-33	19337-19338	-	_	_	_	
63-34	19338-19339	-	_	_	_	
63-35	19339-19340	-	_	_	_	
63-36	19341-19342	0	VALUE	Equal to	63-8	
63-37	19342-19343	/	_	_	_	
63-38	19343-19351	3A69C478	_	_	_	
63-39	19352-19353	(	_	_	_	
63-40	19353-19354	1	_	_	_	
63-41	19355-19358	row	_	_	_	
63-42	19358-19359	)	_	_	_	

#Text=Getting the size of WAL records: => SELECT pg_size_pretty('0/3A69C478'::pg_lsn - '0/38E04A08'::pg_lsn); pg_size_pretty
64-1	19360-19367	Getting	_	_	_	
64-2	19368-19371	the	_	_	_	
64-3	19372-19376	size	_	_	_	
64-4	19377-19379	of	_	_	_	
64-5	19380-19383	WAL	_	_	_	
64-6	19384-19391	records	_	_	_	
64-7	19391-19392	:	_	_	_	
64-8	19393-19394	=	_	_	_	
64-9	19394-19395	>	_	_	_	
64-10	19396-19402	SELECT	_	_	_	
64-11	19403-19417	pg_size_pretty	_	_	_	
64-12	19417-19418	(	_	_	_	
64-13	19418-19419	'	_	_	_	
64-14	19419-19420	0	_	_	_	
64-15	19420-19421	/	_	_	_	
64-16	19421-19429	3A69C478	_	_	_	
64-17	19429-19430	'	_	_	_	
64-18	19430-19431	:	_	_	_	
64-19	19431-19432	:	_	_	_	
64-20	19432-19438	pg_lsn	_	_	_	
64-21	19439-19440	-	_	_	_	
64-22	19441-19442	'	_	_	_	
64-23	19442-19443	0	_	_	_	
64-24	19443-19444	/	_	_	_	
64-25	19444-19452	38E04A08	_	_	_	
64-26	19452-19453	'	_	_	_	
64-27	19453-19454	:	_	_	_	
64-28	19454-19455	:	_	_	_	
64-29	19455-19461	pg_lsn	_	_	_	
64-30	19461-19462	)	_	_	_	
64-31	19462-19463	;	_	_	_	
64-32	19464-19478	pg_size_pretty	_	_	_	

#Text=---------------- 25 MB (1 row) Now let's turn off the full_page_writes parameter: => ALTER SYSTEM SET full_page_writes = off; => SELECT pg_reload_conf();
65-1	19479-19480	-	_	_	_	
65-2	19480-19481	-	_	_	_	
65-3	19481-19482	-	_	_	_	
65-4	19482-19483	-	_	_	_	
65-5	19483-19484	-	_	_	_	
65-6	19484-19485	-	_	_	_	
65-7	19485-19486	-	_	_	_	
65-8	19486-19487	-	_	_	_	
65-9	19487-19488	-	_	_	_	
65-10	19488-19489	-	_	_	_	
65-11	19489-19490	-	_	_	_	
65-12	19490-19491	-	_	_	_	
65-13	19491-19492	-	_	_	_	
65-14	19492-19493	-	_	_	_	
65-15	19493-19494	-	_	_	_	
65-16	19494-19495	-	_	_	_	
65-17	19496-19498	25	_	_	_	
65-18	19499-19501	MB	_	_	_	
65-19	19502-19503	(	_	_	_	
65-20	19503-19504	1	_	_	_	
65-21	19505-19508	row	_	_	_	
65-22	19508-19509	)	_	_	_	
65-23	19510-19513	Now	_	_	_	
65-24	19514-19519	let's	_	_	_	
65-25	19520-19524	turn	_	_	_	
65-26	19525-19528	off	_	_	_	
65-27	19529-19532	the	_	_	_	
65-28	19533-19549	full_page_writes	_	_	_	
65-29	19550-19559	parameter	_	_	_	
65-30	19559-19560	:	_	_	_	
65-31	19561-19562	=	_	_	_	
65-32	19562-19563	>	_	_	_	
65-33	19564-19569	ALTER	_	_	_	
65-34	19570-19576	SYSTEM	_	_	_	
65-35	19577-19580	SET	_	_	_	
65-36	19581-19597	full_page_writes	PARAM	_	_	
65-37	19598-19599	=	_	_	_	
65-38	19600-19603	off	VALUE	Equal to	65-36	
65-39	19603-19604	;	_	_	_	
65-40	19605-19606	=	_	_	_	
65-41	19606-19607	>	_	_	_	
65-42	19608-19614	SELECT	_	_	_	
65-43	19615-19629	pg_reload_conf	_	_	_	
65-44	19629-19630	(	_	_	_	
65-45	19630-19631	)	_	_	_	
65-46	19631-19632	;	_	_	_	

#Text=And we repeat the experiment. => CHECKPOINT; => SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn ---------------------------
66-1	19633-19636	And	_	_	_	
66-2	19637-19639	we	_	_	_	
66-3	19640-19646	repeat	_	_	_	
66-4	19647-19650	the	_	_	_	
66-5	19651-19661	experiment	_	_	_	
66-6	19661-19662	.	_	_	_	
66-7	19663-19664	=	_	_	_	
66-8	19664-19665	>	_	_	_	
66-9	19666-19676	CHECKPOINT	_	_	_	
66-10	19676-19677	;	_	_	_	
66-11	19678-19679	=	_	_	_	
66-12	19679-19680	>	_	_	_	
66-13	19681-19687	SELECT	_	_	_	
66-14	19688-19713	pg_current_wal_insert_lsn	_	_	_	
66-15	19713-19714	(	_	_	_	
66-16	19714-19715	)	_	_	_	
66-17	19715-19716	;	_	_	_	
66-18	19717-19742	pg_current_wal_insert_lsn	_	_	_	
66-19	19743-19744	-	_	_	_	
66-20	19744-19745	-	_	_	_	
66-21	19745-19746	-	_	_	_	
66-22	19746-19747	-	_	_	_	
66-23	19747-19748	-	_	_	_	
66-24	19748-19749	-	_	_	_	
66-25	19749-19750	-	_	_	_	
66-26	19750-19751	-	_	_	_	
66-27	19751-19752	-	_	_	_	
66-28	19752-19753	-	_	_	_	
66-29	19753-19754	-	_	_	_	
66-30	19754-19755	-	_	_	_	
66-31	19755-19756	-	_	_	_	
66-32	19756-19757	-	_	_	_	
66-33	19757-19758	-	_	_	_	
66-34	19758-19759	-	_	_	_	
66-35	19759-19760	-	_	_	_	
66-36	19760-19761	-	_	_	_	
66-37	19761-19762	-	_	_	_	
66-38	19762-19763	-	_	_	_	
66-39	19763-19764	-	_	_	_	
66-40	19764-19765	-	_	_	_	
66-41	19765-19766	-	_	_	_	
66-42	19766-19767	-	_	_	_	
66-43	19767-19768	-	_	_	_	
66-44	19768-19769	-	_	_	_	
66-45	19769-19770	-	_	_	_	

#Text=0/3A69C530 (1 row) student$ pgbench -T 30 test starting vacuum...end. transaction type: TPC-B (sort of) scaling factor: 1 query mode: simple number of clients: 1
67-1	19771-19772	0	_	_	_	
67-2	19772-19773	/	_	_	_	
67-3	19773-19781	3A69C530	_	_	_	
67-4	19782-19783	(	_	_	_	
67-5	19783-19784	1	_	_	_	
67-6	19785-19788	row	_	_	_	
67-7	19788-19789	)	_	_	_	
67-8	19790-19797	student	_	_	_	
67-9	19797-19798	$	_	_	_	
67-10	19799-19806	pgbench	_	_	_	
67-11	19807-19808	-	_	_	_	
67-12	19808-19809	T	_	_	_	
67-13	19810-19812	30	_	_	_	
67-14	19813-19817	test	_	_	_	
67-15	19818-19826	starting	_	_	_	
67-16	19827-19833	vacuum	_	_	_	
67-17	19833-19834	.	_	_	_	
67-18	19834-19835	.	_	_	_	
67-19	19835-19836	.	_	_	_	
67-20	19836-19839	end	_	_	_	
67-21	19839-19840	.	_	_	_	
67-22	19841-19852	transaction	_	_	_	
67-23	19853-19857	type	_	_	_	
67-24	19857-19858	:	_	_	_	
67-25	19859-19864	TPC-B	_	_	_	
67-26	19865-19866	(	_	_	_	
67-27	19866-19870	sort	_	_	_	
67-28	19871-19873	of	_	_	_	
67-29	19873-19874	)	_	_	_	
67-30	19875-19882	scaling	_	_	_	
67-31	19883-19889	factor	_	_	_	
67-32	19889-19890	:	_	_	_	
67-33	19891-19892	1	_	_	_	
67-34	19893-19898	query	_	_	_	
67-35	19899-19903	mode	_	_	_	
67-36	19903-19904	:	_	_	_	
67-37	19905-19911	simple	_	_	_	
67-38	19912-19918	number	_	_	_	
67-39	19919-19921	of	_	_	_	
67-40	19922-19929	clients	_	_	_	
67-41	19929-19930	:	_	_	_	
67-42	19931-19932	1	_	_	_	

#Text=number of threads: 1 duration: 30 s number of transactions actually processed: 27234 latency average = 1.102 ms tps = 907.783080 (including connections establishing) tps = 907.895326 (excluding connections establishing)
68-1	19933-19939	number	_	_	_	
68-2	19940-19942	of	_	_	_	
68-3	19943-19950	threads	_	_	_	
68-4	19950-19951	:	_	_	_	
68-5	19952-19953	1	_	_	_	
68-6	19954-19962	duration	_	_	_	
68-7	19962-19963	:	_	_	_	
68-8	19964-19966	30	_	_	_	
68-9	19967-19968	s	_	_	_	
68-10	19969-19975	number	_	_	_	
68-11	19976-19978	of	_	_	_	
68-12	19979-19991	transactions	_	_	_	
68-13	19992-20000	actually	_	_	_	
68-14	20001-20010	processed	_	_	_	
68-15	20010-20011	:	_	_	_	
68-16	20012-20017	27234	_	_	_	
68-17	20018-20025	latency	_	_	_	
68-18	20026-20033	average	_	_	_	
68-19	20034-20035	=	_	_	_	
68-20	20036-20041	1.102	_	_	_	
68-21	20042-20044	ms	_	_	_	
68-22	20045-20048	tps	_	_	_	
68-23	20049-20050	=	_	_	_	
68-24	20051-20061	907.783080	_	_	_	
68-25	20062-20063	(	_	_	_	
68-26	20063-20072	including	_	_	_	
68-27	20073-20084	connections	_	_	_	
68-28	20085-20097	establishing	_	_	_	
68-29	20097-20098	)	_	_	_	
68-30	20099-20102	tps	_	_	_	
68-31	20103-20104	=	_	_	_	
68-32	20105-20115	907.895326	_	_	_	
68-33	20116-20117	(	_	_	_	
68-34	20117-20126	excluding	_	_	_	
68-35	20127-20138	connections	_	_	_	
68-36	20139-20151	establishing	_	_	_	
68-37	20151-20152	)	_	_	_	

#Text==> SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn --------------------------- 0/3BE87658 (1 row)
69-1	20153-20154	=	_	_	_	
69-2	20154-20155	>	_	_	_	
69-3	20156-20162	SELECT	_	_	_	
69-4	20163-20188	pg_current_wal_insert_lsn	_	_	_	
69-5	20188-20189	(	_	_	_	
69-6	20189-20190	)	_	_	_	
69-7	20190-20191	;	_	_	_	
69-8	20192-20217	pg_current_wal_insert_lsn	PARAM	_	_	
69-9	20218-20219	-	_	_	_	
69-10	20219-20220	-	_	_	_	
69-11	20220-20221	-	_	_	_	
69-12	20221-20222	-	_	_	_	
69-13	20222-20223	-	_	_	_	
69-14	20223-20224	-	_	_	_	
69-15	20224-20225	-	_	_	_	
69-16	20225-20226	-	_	_	_	
69-17	20226-20227	-	_	_	_	
69-18	20227-20228	-	_	_	_	
69-19	20228-20229	-	_	_	_	
69-20	20229-20230	-	_	_	_	
69-21	20230-20231	-	_	_	_	
69-22	20231-20232	-	_	_	_	
69-23	20232-20233	-	_	_	_	
69-24	20233-20234	-	_	_	_	
69-25	20234-20235	-	_	_	_	
69-26	20235-20236	-	_	_	_	
69-27	20236-20237	-	_	_	_	
69-28	20237-20238	-	_	_	_	
69-29	20238-20239	-	_	_	_	
69-30	20239-20240	-	_	_	_	
69-31	20240-20241	-	_	_	_	
69-32	20241-20242	-	_	_	_	
69-33	20242-20243	-	_	_	_	
69-34	20243-20244	-	_	_	_	
69-35	20244-20245	-	_	_	_	
69-36	20246-20247	0	VALUE	Equal to	69-8	
69-37	20247-20248	/	_	_	_	
69-38	20248-20256	3BE87658	_	_	_	
69-39	20257-20258	(	_	_	_	
69-40	20258-20259	1	_	_	_	
69-41	20260-20263	row	_	_	_	
69-42	20263-20264	)	_	_	_	

#Text=Getting the size of WAL records: => SELECT pg_size_pretty('0/3BE87658'::pg_lsn - '0/3A69C530'::pg_lsn); pg_size_pretty
70-1	20265-20272	Getting	_	_	_	
70-2	20273-20276	the	_	_	_	
70-3	20277-20281	size	_	_	_	
70-4	20282-20284	of	_	_	_	
70-5	20285-20288	WAL	_	_	_	
70-6	20289-20296	records	_	_	_	
70-7	20296-20297	:	_	_	_	
70-8	20298-20299	=	_	_	_	
70-9	20299-20300	>	_	_	_	
70-10	20301-20307	SELECT	_	_	_	
70-11	20308-20322	pg_size_pretty	_	_	_	
70-12	20322-20323	(	_	_	_	
70-13	20323-20324	'	_	_	_	
70-14	20324-20325	0	_	_	_	
70-15	20325-20326	/	_	_	_	
70-16	20326-20334	3BE87658	_	_	_	
70-17	20334-20335	'	_	_	_	
70-18	20335-20336	:	_	_	_	
70-19	20336-20337	:	_	_	_	
70-20	20337-20343	pg_lsn	_	_	_	
70-21	20344-20345	-	_	_	_	
70-22	20346-20347	'	_	_	_	
70-23	20347-20348	0	_	_	_	
70-24	20348-20349	/	_	_	_	
70-25	20349-20357	3A69C530	_	_	_	
70-26	20357-20358	'	_	_	_	
70-27	20358-20359	:	_	_	_	
70-28	20359-20360	:	_	_	_	
70-29	20360-20366	pg_lsn	_	_	_	
70-30	20366-20367	)	_	_	_	
70-31	20367-20368	;	_	_	_	
70-32	20369-20383	pg_size_pretty	_	_	_	

#Text=---------------- 24 MB (1 row) Yes, the size decreased, but not so much as we could expect. The thing is that the cluster was initialized with the checksums on data pages and therefore, FPIs have to be WAL-logged anyway when hint bits change. These data (in the situation above) make up about half of the whole amount, which you can make sure of by looking at the statistics:
71-1	20384-20385	-	_	_	_	
71-2	20385-20386	-	_	_	_	
71-3	20386-20387	-	_	_	_	
71-4	20387-20388	-	_	_	_	
71-5	20388-20389	-	_	_	_	
71-6	20389-20390	-	_	_	_	
71-7	20390-20391	-	_	_	_	
71-8	20391-20392	-	_	_	_	
71-9	20392-20393	-	_	_	_	
71-10	20393-20394	-	_	_	_	
71-11	20394-20395	-	_	_	_	
71-12	20395-20396	-	_	_	_	
71-13	20396-20397	-	_	_	_	
71-14	20397-20398	-	_	_	_	
71-15	20398-20399	-	_	_	_	
71-16	20399-20400	-	_	_	_	
71-17	20401-20403	24	_	_	_	
71-18	20404-20406	MB	_	_	_	
71-19	20407-20408	(	_	_	_	
71-20	20408-20409	1	_	_	_	
71-21	20410-20413	row	_	_	_	
71-22	20413-20414	)	_	_	_	
71-23	20415-20418	Yes	_	_	_	
71-24	20418-20419	,	_	_	_	
71-25	20420-20423	the	_	_	_	
71-26	20424-20428	size	_	_	_	
71-27	20429-20438	decreased	_	_	_	
71-28	20438-20439	,	_	_	_	
71-29	20440-20443	but	_	_	_	
71-30	20444-20447	not	_	_	_	
71-31	20448-20450	so	_	_	_	
71-32	20451-20455	much	_	_	_	
71-33	20456-20458	as	_	_	_	
71-34	20459-20461	we	_	_	_	
71-35	20462-20467	could	_	_	_	
71-36	20468-20474	expect	_	_	_	
71-37	20474-20475	.	_	_	_	
71-38	20476-20479	The	_	_	_	
71-39	20480-20485	thing	_	_	_	
71-40	20486-20488	is	_	_	_	
71-41	20489-20493	that	_	_	_	
71-42	20494-20497	the	_	_	_	
71-43	20498-20505	cluster	_	_	_	
71-44	20506-20509	was	_	_	_	
71-45	20510-20521	initialized	_	_	_	
71-46	20522-20526	with	_	_	_	
71-47	20527-20530	the	_	_	_	
71-48	20531-20540	checksums	_	_	_	
71-49	20541-20543	on	_	_	_	
71-50	20544-20548	data	_	_	_	
71-51	20549-20554	pages	_	_	_	
71-52	20555-20558	and	_	_	_	
71-53	20559-20568	therefore	_	_	_	
71-54	20568-20569	,	_	_	_	
71-55	20570-20574	FPIs	_	_	_	
71-56	20575-20579	have	_	_	_	
71-57	20580-20582	to	_	_	_	
71-58	20583-20585	be	_	_	_	
71-59	20586-20596	WAL-logged	_	_	_	
71-60	20597-20603	anyway	_	_	_	
71-61	20604-20608	when	_	_	_	
71-62	20609-20613	hint	_	_	_	
71-63	20614-20618	bits	_	_	_	
71-64	20619-20625	change	_	_	_	
71-65	20625-20626	.	_	_	_	
71-66	20627-20632	These	_	_	_	
71-67	20633-20637	data	_	_	_	
71-68	20638-20639	(	_	_	_	
71-69	20639-20641	in	_	_	_	
71-70	20642-20645	the	_	_	_	
71-71	20646-20655	situation	_	_	_	
71-72	20656-20661	above	_	_	_	
71-73	20661-20662	)	_	_	_	
71-74	20663-20667	make	_	_	_	
71-75	20668-20670	up	_	_	_	
71-76	20671-20676	about	_	_	_	
71-77	20677-20681	half	_	_	_	
71-78	20682-20684	of	_	_	_	
71-79	20685-20688	the	_	_	_	
71-80	20689-20694	whole	_	_	_	
71-81	20695-20701	amount	_	_	_	
71-82	20701-20702	,	_	_	_	
71-83	20703-20708	which	_	_	_	
71-84	20709-20712	you	_	_	_	
71-85	20713-20716	can	_	_	_	
71-86	20717-20721	make	_	_	_	
71-87	20722-20726	sure	_	_	_	
71-88	20727-20729	of	_	_	_	
71-89	20730-20732	by	_	_	_	
71-90	20733-20740	looking	_	_	_	
71-91	20741-20743	at	_	_	_	
71-92	20744-20747	the	_	_	_	
71-93	20748-20758	statistics	_	_	_	
71-94	20758-20759	:	_	_	_	

#Text=postgres$ /usr/lib/postgresql/11/bin/pg_waldump --stats -p /var/lib/postgresql/11/main/pg_wal -s 0/3A69C530 -e 0/3BE87658 Type (%) Record size (%) FPI size (%) ---- --- ----------- --- --------
72-1	20760-20768	postgres	_	_	_	
72-2	20768-20769	$	_	_	_	
72-3	20770-20771	/	_	_	_	
72-4	20771-20774	usr	_	_	_	
72-5	20774-20775	/	_	_	_	
72-6	20775-20778	lib	_	_	_	
72-7	20778-20779	/	_	_	_	
72-8	20779-20789	postgresql	_	_	_	
72-9	20789-20790	/	_	_	_	
72-10	20790-20792	11	_	_	_	
72-11	20792-20793	/	_	_	_	
72-12	20793-20796	bin	_	_	_	
72-13	20796-20797	/	_	_	_	
72-14	20797-20807	pg_waldump	_	_	_	
72-15	20808-20809	-	_	_	_	
72-16	20809-20810	-	_	_	_	
72-17	20810-20815	stats	_	_	_	
72-18	20816-20817	-	_	_	_	
72-19	20817-20818	p	_	_	_	
72-20	20819-20820	/	_	_	_	
72-21	20820-20823	var	_	_	_	
72-22	20823-20824	/	_	_	_	
72-23	20824-20827	lib	_	_	_	
72-24	20827-20828	/	_	_	_	
72-25	20828-20838	postgresql	_	_	_	
72-26	20838-20839	/	_	_	_	
72-27	20839-20841	11	_	_	_	
72-28	20841-20842	/	_	_	_	
72-29	20842-20846	main	_	_	_	
72-30	20846-20847	/	_	_	_	
72-31	20847-20853	pg_wal	_	_	_	
72-32	20854-20855	-	_	_	_	
72-33	20855-20856	s	_	_	_	
72-34	20857-20858	0	_	_	_	
72-35	20858-20859	/	_	_	_	
72-36	20859-20867	3A69C530	_	_	_	
72-37	20868-20869	-	_	_	_	
72-38	20869-20870	e	_	_	_	
72-39	20871-20872	0	_	_	_	
72-40	20872-20873	/	_	_	_	
72-41	20873-20881	3BE87658	_	_	_	
72-42	20882-20886	Type	_	_	_	
72-43	20887-20888	(	_	_	_	
72-44	20888-20889	%	_	_	_	
72-45	20889-20890	)	_	_	_	
72-46	20891-20897	Record	_	_	_	
72-47	20898-20902	size	_	_	_	
72-48	20903-20904	(	_	_	_	
72-49	20904-20905	%	_	_	_	
72-50	20905-20906	)	_	_	_	
72-51	20907-20910	FPI	_	_	_	
72-52	20911-20915	size	_	_	_	
72-53	20916-20917	(	_	_	_	
72-54	20917-20918	%	_	_	_	
72-55	20918-20919	)	_	_	_	
72-56	20920-20921	-	_	_	_	
72-57	20921-20922	-	_	_	_	
72-58	20922-20923	-	_	_	_	
72-59	20923-20924	-	_	_	_	
72-60	20925-20926	-	_	_	_	
72-61	20926-20927	-	_	_	_	
72-62	20927-20928	-	_	_	_	
72-63	20929-20930	-	_	_	_	
72-64	20930-20931	-	_	_	_	
72-65	20931-20932	-	_	_	_	
72-66	20932-20933	-	_	_	_	
72-67	20933-20934	-	_	_	_	
72-68	20934-20935	-	_	_	_	
72-69	20935-20936	-	_	_	_	
72-70	20936-20937	-	_	_	_	
72-71	20937-20938	-	_	_	_	
72-72	20938-20939	-	_	_	_	
72-73	20939-20940	-	_	_	_	
72-74	20941-20942	-	_	_	_	
72-75	20942-20943	-	_	_	_	
72-76	20943-20944	-	_	_	_	
72-77	20945-20946	-	_	_	_	
72-78	20946-20947	-	_	_	_	
72-79	20947-20948	-	_	_	_	
72-80	20948-20949	-	_	_	_	
72-81	20949-20950	-	_	_	_	
72-82	20950-20951	-	_	_	_	
72-83	20951-20952	-	_	_	_	
72-84	20952-20953	-	_	_	_	

#Text=--- XLOG 1721 ( 1,03) 84329 ( 0,77) 13916104 (100,00) Transaction 27235 ( 16,32) 926070 ( 8,46)
73-1	20954-20955	-	_	_	_	
73-2	20955-20956	-	_	_	_	
73-3	20956-20957	-	_	_	_	
73-4	20958-20962	XLOG	_	_	_	
73-5	20963-20967	1721	_	_	_	
73-6	20968-20969	(	_	_	_	
73-7	20970-20974	1,03	_	_	_	
73-8	20974-20975	)	_	_	_	
73-9	20976-20981	84329	_	_	_	
73-10	20982-20983	(	_	_	_	
73-11	20984-20988	0,77	_	_	_	
73-12	20988-20989	)	_	_	_	
73-13	20990-20998	13916104	_	_	_	
73-14	20999-21000	(	_	_	_	
73-15	21000-21006	100,00	_	_	_	
73-16	21006-21007	)	_	_	_	
73-17	21008-21019	Transaction	_	_	_	
73-18	21020-21025	27235	_	_	_	
73-19	21026-21027	(	_	_	_	
73-20	21028-21033	16,32	_	_	_	
73-21	21033-21034	)	_	_	_	
73-22	21035-21041	926070	_	_	_	
73-23	21042-21043	(	_	_	_	
73-24	21044-21048	8,46	_	_	_	
73-25	21048-21049	)	_	_	_	

#Text=0 ( 0,00) Storage 1 ( 0,00) 42 ( 0,00) 0 ( 0,00) CLOG 1 ( 0,00) 30 ( 0,00)
74-1	21050-21051	0	_	_	_	
74-2	21052-21053	(	_	_	_	
74-3	21054-21058	0,00	_	_	_	
74-4	21058-21059	)	_	_	_	
74-5	21060-21067	Storage	_	_	_	
74-6	21068-21069	1	_	_	_	
74-7	21070-21071	(	_	_	_	
74-8	21072-21076	0,00	_	_	_	
74-9	21076-21077	)	_	_	_	
74-10	21078-21080	42	_	_	_	
74-11	21081-21082	(	_	_	_	
74-12	21083-21087	0,00	_	_	_	
74-13	21087-21088	)	_	_	_	
74-14	21089-21090	0	_	_	_	
74-15	21091-21092	(	_	_	_	
74-16	21093-21097	0,00	_	_	_	
74-17	21097-21098	)	_	_	_	
74-18	21099-21103	CLOG	_	_	_	
74-19	21104-21105	1	_	_	_	
74-20	21106-21107	(	_	_	_	
74-21	21108-21112	0,00	_	_	_	
74-22	21112-21113	)	_	_	_	
74-23	21114-21116	30	_	_	_	
74-24	21117-21118	(	_	_	_	
74-25	21119-21123	0,00	_	_	_	
74-26	21123-21124	)	_	_	_	

#Text=0 ( 0,00) Standby 4 ( 0,00) 240 ( 0,00) 0 ( 0,00) Heap2 27522 ( 16,49) 1726352 ( 15,76)
75-1	21125-21126	0	_	_	_	
75-2	21127-21128	(	_	_	_	
75-3	21129-21133	0,00	_	_	_	
75-4	21133-21134	)	_	_	_	
75-5	21135-21142	Standby	_	_	_	
75-6	21143-21144	4	_	_	_	
75-7	21145-21146	(	_	_	_	
75-8	21147-21151	0,00	_	_	_	
75-9	21151-21152	)	_	_	_	
75-10	21153-21156	240	_	_	_	
75-11	21157-21158	(	_	_	_	
75-12	21159-21163	0,00	_	_	_	
75-13	21163-21164	)	_	_	_	
75-14	21165-21166	0	_	_	_	
75-15	21167-21168	(	_	_	_	
75-16	21169-21173	0,00	_	_	_	
75-17	21173-21174	)	_	_	_	
75-18	21175-21180	Heap2	_	_	_	
75-19	21181-21186	27522	_	_	_	
75-20	21187-21188	(	_	_	_	
75-21	21189-21194	16,49	_	_	_	
75-22	21194-21195	)	_	_	_	
75-23	21196-21203	1726352	_	_	_	
75-24	21204-21205	(	_	_	_	
75-25	21206-21211	15,76	_	_	_	
75-26	21211-21212	)	_	_	_	

#Text=0 ( 0,00) Heap 109691 ( 65,71) 8169121 ( 74,59) 0 ( 0,00) Btree 756 ( 0,45) 45380 (
76-1	21213-21214	0	_	_	_	
76-2	21215-21216	(	_	_	_	
76-3	21217-21221	0,00	_	_	_	
76-4	21221-21222	)	_	_	_	
76-5	21223-21227	Heap	_	_	_	
76-6	21228-21234	109691	_	_	_	
76-7	21235-21236	(	_	_	_	
76-8	21237-21242	65,71	_	_	_	
76-9	21242-21243	)	_	_	_	
76-10	21244-21251	8169121	_	_	_	
76-11	21252-21253	(	_	_	_	
76-12	21254-21259	74,59	_	_	_	
76-13	21259-21260	)	_	_	_	
76-14	21261-21262	0	_	_	_	
76-15	21263-21264	(	_	_	_	
76-16	21265-21269	0,00	_	_	_	
76-17	21269-21270	)	_	_	_	
76-18	21271-21276	Btree	_	_	_	
76-19	21277-21280	756	_	_	_	
76-20	21281-21282	(	_	_	_	
76-21	21283-21287	0,45	_	_	_	
76-22	21287-21288	)	_	_	_	
76-23	21289-21294	45380	_	_	_	
76-24	21295-21296	(	_	_	_	

#Text=0,41) 0 ( 0,00) -------- -------- -------- Total 166931 10951564 [44,04%]
77-1	21297-21301	0,41	_	_	_	
77-2	21301-21302	)	_	_	_	
77-3	21303-21304	0	_	_	_	
77-4	21305-21306	(	_	_	_	
77-5	21307-21311	0,00	_	_	_	
77-6	21311-21312	)	_	_	_	
77-7	21313-21314	-	_	_	_	
77-8	21314-21315	-	_	_	_	
77-9	21315-21316	-	_	_	_	
77-10	21316-21317	-	_	_	_	
77-11	21317-21318	-	_	_	_	
77-12	21318-21319	-	_	_	_	
77-13	21319-21320	-	_	_	_	
77-14	21320-21321	-	_	_	_	
77-15	21322-21323	-	_	_	_	
77-16	21323-21324	-	_	_	_	
77-17	21324-21325	-	_	_	_	
77-18	21325-21326	-	_	_	_	
77-19	21326-21327	-	_	_	_	
77-20	21327-21328	-	_	_	_	
77-21	21328-21329	-	_	_	_	
77-22	21329-21330	-	_	_	_	
77-23	21331-21332	-	_	_	_	
77-24	21332-21333	-	_	_	_	
77-25	21333-21334	-	_	_	_	
77-26	21334-21335	-	_	_	_	
77-27	21335-21336	-	_	_	_	
77-28	21336-21337	-	_	_	_	
77-29	21337-21338	-	_	_	_	
77-30	21338-21339	-	_	_	_	
77-31	21340-21345	Total	_	_	_	
77-32	21346-21352	166931	_	_	_	
77-33	21353-21361	10951564	_	_	_	
77-34	21362-21363	[	_	_	_	
77-35	21363-21369	44,04%	_	_	_	
77-36	21369-21370	]	_	_	_	

#Text=13916104 [55,96%] Zero rows are removed to make the table more compact. Pay attention to the summary row (Total) and compare the size of full images (FPI size) with he size of normal records (Record size).
78-1	21371-21379	13916104	_	_	_	
78-2	21380-21381	[	_	_	_	
78-3	21381-21387	55,96%	_	_	_	
78-4	21387-21388	]	_	_	_	
78-5	21389-21393	Zero	_	_	_	
78-6	21394-21398	rows	_	_	_	
78-7	21399-21402	are	_	_	_	
78-8	21403-21410	removed	_	_	_	
78-9	21411-21413	to	_	_	_	
78-10	21414-21418	make	_	_	_	
78-11	21419-21422	the	_	_	_	
78-12	21423-21428	table	_	_	_	
78-13	21429-21433	more	_	_	_	
78-14	21434-21441	compact	_	_	_	
78-15	21441-21442	.	_	_	_	
78-16	21443-21446	Pay	_	_	_	
78-17	21447-21456	attention	_	_	_	
78-18	21457-21459	to	_	_	_	
78-19	21460-21463	the	_	_	_	
78-20	21464-21471	summary	_	_	_	
78-21	21472-21475	row	_	_	_	
78-22	21476-21477	(	_	_	_	
78-23	21477-21482	Total	_	_	_	
78-24	21482-21483	)	_	_	_	
78-25	21484-21487	and	_	_	_	
78-26	21488-21495	compare	_	_	_	
78-27	21496-21499	the	_	_	_	
78-28	21500-21504	size	_	_	_	
78-29	21505-21507	of	_	_	_	
78-30	21508-21512	full	_	_	_	
78-31	21513-21519	images	_	_	_	
78-32	21520-21521	(	_	_	_	
78-33	21521-21524	FPI	_	_	_	
78-34	21525-21529	size	_	_	_	
78-35	21529-21530	)	_	_	_	
78-36	21531-21535	with	_	_	_	
78-37	21536-21538	he	_	_	_	
78-38	21539-21543	size	_	_	_	
78-39	21544-21546	of	_	_	_	
78-40	21547-21553	normal	_	_	_	
78-41	21554-21561	records	_	_	_	
78-42	21562-21563	(	_	_	_	
78-43	21563-21569	Record	_	_	_	
78-44	21570-21574	size	_	_	_	
78-45	21574-21575	)	_	_	_	
78-46	21575-21576	.	_	_	_	

#Text=The full_page_writes parameter can be turned off only if the file system and hardware themselves ensure the automicity of writes. But, as we can see, there isn't much sense in it (provided checksums are turned on). Now let's see how compression can help. => ALTER SYSTEM SET full_page_writes = on; => ALTER SYSTEM SET wal_compression = on; => SELECT pg_reload_conf();
79-1	21577-21580	The	_	_	_	
79-2	21581-21597	full_page_writes	_	_	_	
79-3	21598-21607	parameter	_	_	_	
79-4	21608-21611	can	_	_	_	
79-5	21612-21614	be	_	_	_	
79-6	21615-21621	turned	_	_	_	
79-7	21622-21625	off	_	_	_	
79-8	21626-21630	only	_	_	_	
79-9	21631-21633	if	_	_	_	
79-10	21634-21637	the	_	_	_	
79-11	21638-21642	file	_	_	_	
79-12	21643-21649	system	_	_	_	
79-13	21650-21653	and	_	_	_	
79-14	21654-21662	hardware	_	_	_	
79-15	21663-21673	themselves	_	_	_	
79-16	21674-21680	ensure	_	_	_	
79-17	21681-21684	the	_	_	_	
79-18	21685-21695	automicity	_	_	_	
79-19	21696-21698	of	_	_	_	
79-20	21699-21705	writes	_	_	_	
79-21	21705-21706	.	_	_	_	
79-22	21707-21710	But	_	_	_	
79-23	21710-21711	,	_	_	_	
79-24	21712-21714	as	_	_	_	
79-25	21715-21717	we	_	_	_	
79-26	21718-21721	can	_	_	_	
79-27	21722-21725	see	_	_	_	
79-28	21725-21726	,	_	_	_	
79-29	21727-21732	there	_	_	_	
79-30	21733-21738	isn't	_	_	_	
79-31	21739-21743	much	_	_	_	
79-32	21744-21749	sense	_	_	_	
79-33	21750-21752	in	_	_	_	
79-34	21753-21755	it	_	_	_	
79-35	21756-21757	(	_	_	_	
79-36	21757-21765	provided	_	_	_	
79-37	21766-21775	checksums	_	_	_	
79-38	21776-21779	are	_	_	_	
79-39	21780-21786	turned	_	_	_	
79-40	21787-21789	on	_	_	_	
79-41	21789-21790	)	_	_	_	
79-42	21790-21791	.	_	_	_	
79-43	21792-21795	Now	_	_	_	
79-44	21796-21801	let's	_	_	_	
79-45	21802-21805	see	_	_	_	
79-46	21806-21809	how	_	_	_	
79-47	21810-21821	compression	_	_	_	
79-48	21822-21825	can	_	_	_	
79-49	21826-21830	help	_	_	_	
79-50	21830-21831	.	_	_	_	
79-51	21832-21833	=	_	_	_	
79-52	21833-21834	>	_	_	_	
79-53	21835-21840	ALTER	_	_	_	
79-54	21841-21847	SYSTEM	_	_	_	
79-55	21848-21851	SET	_	_	_	
79-56	21852-21868	full_page_writes	PARAM	_	_	
79-57	21869-21870	=	_	_	_	
79-58	21871-21873	on	VALUE	Equal to	79-56	
79-59	21873-21874	;	_	_	_	
79-60	21875-21876	=	_	_	_	
79-61	21876-21877	>	_	_	_	
79-62	21878-21883	ALTER	_	_	_	
79-63	21884-21890	SYSTEM	_	_	_	
79-64	21891-21894	SET	_	_	_	
79-65	21895-21910	wal_compression	PARAM	_	_	
79-66	21911-21912	=	_	_	_	
79-67	21913-21915	on	VALUE	Equal to	79-65	
79-68	21915-21916	;	_	_	_	
79-69	21917-21918	=	_	_	_	
79-70	21918-21919	>	_	_	_	
79-71	21920-21926	SELECT	_	_	_	
79-72	21927-21941	pg_reload_conf	_	_	_	
79-73	21941-21942	(	_	_	_	
79-74	21942-21943	)	_	_	_	
79-75	21943-21944	;	_	_	_	

#Text=Repeating the same experiment. => CHECKPOINT; => SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn ---------------------------
80-1	21945-21954	Repeating	_	_	_	
80-2	21955-21958	the	_	_	_	
80-3	21959-21963	same	_	_	_	
80-4	21964-21974	experiment	_	_	_	
80-5	21974-21975	.	_	_	_	
80-6	21976-21977	=	_	_	_	
80-7	21977-21978	>	_	_	_	
80-8	21979-21989	CHECKPOINT	_	_	_	
80-9	21989-21990	;	_	_	_	
80-10	21991-21992	=	_	_	_	
80-11	21992-21993	>	_	_	_	
80-12	21994-22000	SELECT	_	_	_	
80-13	22001-22026	pg_current_wal_insert_lsn	_	_	_	
80-14	22026-22027	(	_	_	_	
80-15	22027-22028	)	_	_	_	
80-16	22028-22029	;	_	_	_	
80-17	22030-22055	pg_current_wal_insert_lsn	_	_	_	
80-18	22056-22057	-	_	_	_	
80-19	22057-22058	-	_	_	_	
80-20	22058-22059	-	_	_	_	
80-21	22059-22060	-	_	_	_	
80-22	22060-22061	-	_	_	_	
80-23	22061-22062	-	_	_	_	
80-24	22062-22063	-	_	_	_	
80-25	22063-22064	-	_	_	_	
80-26	22064-22065	-	_	_	_	
80-27	22065-22066	-	_	_	_	
80-28	22066-22067	-	_	_	_	
80-29	22067-22068	-	_	_	_	
80-30	22068-22069	-	_	_	_	
80-31	22069-22070	-	_	_	_	
80-32	22070-22071	-	_	_	_	
80-33	22071-22072	-	_	_	_	
80-34	22072-22073	-	_	_	_	
80-35	22073-22074	-	_	_	_	
80-36	22074-22075	-	_	_	_	
80-37	22075-22076	-	_	_	_	
80-38	22076-22077	-	_	_	_	
80-39	22077-22078	-	_	_	_	
80-40	22078-22079	-	_	_	_	
80-41	22079-22080	-	_	_	_	
80-42	22080-22081	-	_	_	_	
80-43	22081-22082	-	_	_	_	
80-44	22082-22083	-	_	_	_	

#Text=0/3BE87710 (1 row) student$ pgbench -T 30 test starting vacuum...end. transaction type: TPC-B (sort of) scaling factor: 1 query mode: simple number of clients: 1
81-1	22084-22085	0	_	_	_	
81-2	22085-22086	/	_	_	_	
81-3	22086-22094	3BE87710	_	_	_	
81-4	22095-22096	(	_	_	_	
81-5	22096-22097	1	_	_	_	
81-6	22098-22101	row	_	_	_	
81-7	22101-22102	)	_	_	_	
81-8	22103-22110	student	_	_	_	
81-9	22110-22111	$	_	_	_	
81-10	22112-22119	pgbench	_	_	_	
81-11	22120-22121	-	_	_	_	
81-12	22121-22122	T	_	_	_	
81-13	22123-22125	30	_	_	_	
81-14	22126-22130	test	_	_	_	
81-15	22131-22139	starting	_	_	_	
81-16	22140-22146	vacuum	_	_	_	
81-17	22146-22147	.	_	_	_	
81-18	22147-22148	.	_	_	_	
81-19	22148-22149	.	_	_	_	
81-20	22149-22152	end	_	_	_	
81-21	22152-22153	.	_	_	_	
81-22	22154-22165	transaction	_	_	_	
81-23	22166-22170	type	_	_	_	
81-24	22170-22171	:	_	_	_	
81-25	22172-22177	TPC-B	_	_	_	
81-26	22178-22179	(	_	_	_	
81-27	22179-22183	sort	_	_	_	
81-28	22184-22186	of	_	_	_	
81-29	22186-22187	)	_	_	_	
81-30	22188-22195	scaling	_	_	_	
81-31	22196-22202	factor	_	_	_	
81-32	22202-22203	:	_	_	_	
81-33	22204-22205	1	_	_	_	
81-34	22206-22211	query	_	_	_	
81-35	22212-22216	mode	_	_	_	
81-36	22216-22217	:	_	_	_	
81-37	22218-22224	simple	_	_	_	
81-38	22225-22231	number	_	_	_	
81-39	22232-22234	of	_	_	_	
81-40	22235-22242	clients	_	_	_	
81-41	22242-22243	:	_	_	_	
81-42	22244-22245	1	_	_	_	

#Text=number of threads: 1 duration: 30 s number of transactions actually processed: 26833 latency average = 1.118 ms tps = 894.405027 (including connections establishing) tps = 894.516845 (excluding connections establishing)
82-1	22246-22252	number	_	_	_	
82-2	22253-22255	of	_	_	_	
82-3	22256-22263	threads	_	_	_	
82-4	22263-22264	:	_	_	_	
82-5	22265-22266	1	_	_	_	
82-6	22267-22275	duration	_	_	_	
82-7	22275-22276	:	_	_	_	
82-8	22277-22279	30	_	_	_	
82-9	22280-22281	s	_	_	_	
82-10	22282-22288	number	_	_	_	
82-11	22289-22291	of	_	_	_	
82-12	22292-22304	transactions	_	_	_	
82-13	22305-22313	actually	_	_	_	
82-14	22314-22323	processed	_	_	_	
82-15	22323-22324	:	_	_	_	
82-16	22325-22330	26833	_	_	_	
82-17	22331-22338	latency	_	_	_	
82-18	22339-22346	average	_	_	_	
82-19	22347-22348	=	_	_	_	
82-20	22349-22354	1.118	_	_	_	
82-21	22355-22357	ms	_	_	_	
82-22	22358-22361	tps	_	_	_	
82-23	22362-22363	=	_	_	_	
82-24	22364-22374	894.405027	_	_	_	
82-25	22375-22376	(	_	_	_	
82-26	22376-22385	including	_	_	_	
82-27	22386-22397	connections	_	_	_	
82-28	22398-22410	establishing	_	_	_	
82-29	22410-22411	)	_	_	_	
82-30	22412-22415	tps	_	_	_	
82-31	22416-22417	=	_	_	_	
82-32	22418-22428	894.516845	_	_	_	
82-33	22429-22430	(	_	_	_	
82-34	22430-22439	excluding	_	_	_	
82-35	22440-22451	connections	_	_	_	
82-36	22452-22464	establishing	_	_	_	
82-37	22464-22465	)	_	_	_	

#Text==> SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn --------------------------- 0/3CBD3EA8 (1 row)
83-1	22466-22467	=	_	_	_	
83-2	22467-22468	>	_	_	_	
83-3	22469-22475	SELECT	_	_	_	
83-4	22476-22501	pg_current_wal_insert_lsn	_	_	_	
83-5	22501-22502	(	_	_	_	
83-6	22502-22503	)	_	_	_	
83-7	22503-22504	;	_	_	_	
83-8	22505-22530	pg_current_wal_insert_lsn	PARAM	_	_	
83-9	22531-22532	-	_	_	_	
83-10	22532-22533	-	_	_	_	
83-11	22533-22534	-	_	_	_	
83-12	22534-22535	-	_	_	_	
83-13	22535-22536	-	_	_	_	
83-14	22536-22537	-	_	_	_	
83-15	22537-22538	-	_	_	_	
83-16	22538-22539	-	_	_	_	
83-17	22539-22540	-	_	_	_	
83-18	22540-22541	-	_	_	_	
83-19	22541-22542	-	_	_	_	
83-20	22542-22543	-	_	_	_	
83-21	22543-22544	-	_	_	_	
83-22	22544-22545	-	_	_	_	
83-23	22545-22546	-	_	_	_	
83-24	22546-22547	-	_	_	_	
83-25	22547-22548	-	_	_	_	
83-26	22548-22549	-	_	_	_	
83-27	22549-22550	-	_	_	_	
83-28	22550-22551	-	_	_	_	
83-29	22551-22552	-	_	_	_	
83-30	22552-22553	-	_	_	_	
83-31	22553-22554	-	_	_	_	
83-32	22554-22555	-	_	_	_	
83-33	22555-22556	-	_	_	_	
83-34	22556-22557	-	_	_	_	
83-35	22557-22558	-	_	_	_	
83-36	22559-22560	0	VALUE	Equal to	83-8	
83-37	22560-22561	/	_	_	_	
83-38	22561-22569	3CBD3EA8	_	_	_	
83-39	22570-22571	(	_	_	_	
83-40	22571-22572	1	_	_	_	
83-41	22573-22576	row	_	_	_	
83-42	22576-22577	)	_	_	_	

#Text=Getting the size of WAL records: => SELECT pg_size_pretty('0/3CBD3EA8'::pg_lsn - '0/3BE87710'::pg_lsn); pg_size_pretty
84-1	22578-22585	Getting	_	_	_	
84-2	22586-22589	the	_	_	_	
84-3	22590-22594	size	_	_	_	
84-4	22595-22597	of	_	_	_	
84-5	22598-22601	WAL	_	_	_	
84-6	22602-22609	records	_	_	_	
84-7	22609-22610	:	_	_	_	
84-8	22611-22612	=	_	_	_	
84-9	22612-22613	>	_	_	_	
84-10	22614-22620	SELECT	_	_	_	
84-11	22621-22635	pg_size_pretty	_	_	_	
84-12	22635-22636	(	_	_	_	
84-13	22636-22637	'	_	_	_	
84-14	22637-22638	0	_	_	_	
84-15	22638-22639	/	_	_	_	
84-16	22639-22647	3CBD3EA8	_	_	_	
84-17	22647-22648	'	_	_	_	
84-18	22648-22649	:	_	_	_	
84-19	22649-22650	:	_	_	_	
84-20	22650-22656	pg_lsn	_	_	_	
84-21	22657-22658	-	_	_	_	
84-22	22659-22660	'	_	_	_	
84-23	22660-22661	0	_	_	_	
84-24	22661-22662	/	_	_	_	
84-25	22662-22670	3BE87710	_	_	_	
84-26	22670-22671	'	_	_	_	
84-27	22671-22672	:	_	_	_	
84-28	22672-22673	:	_	_	_	
84-29	22673-22679	pg_lsn	_	_	_	
84-30	22679-22680	)	_	_	_	
84-31	22680-22681	;	_	_	_	
84-32	22682-22696	pg_size_pretty	_	_	_	

#Text=---------------- 13 MB (1 row) Conclusion: if there are many FPIs (due to checksums or full_page_writes, that is, almost always), most likely it makes sense to use compression although it loads the processor. Performance
85-1	22697-22698	-	_	_	_	
85-2	22698-22699	-	_	_	_	
85-3	22699-22700	-	_	_	_	
85-4	22700-22701	-	_	_	_	
85-5	22701-22702	-	_	_	_	
85-6	22702-22703	-	_	_	_	
85-7	22703-22704	-	_	_	_	
85-8	22704-22705	-	_	_	_	
85-9	22705-22706	-	_	_	_	
85-10	22706-22707	-	_	_	_	
85-11	22707-22708	-	_	_	_	
85-12	22708-22709	-	_	_	_	
85-13	22709-22710	-	_	_	_	
85-14	22710-22711	-	_	_	_	
85-15	22711-22712	-	_	_	_	
85-16	22712-22713	-	_	_	_	
85-17	22714-22716	13	_	_	_	
85-18	22717-22719	MB	_	_	_	
85-19	22720-22721	(	_	_	_	
85-20	22721-22722	1	_	_	_	
85-21	22723-22726	row	_	_	_	
85-22	22726-22727	)	_	_	_	
85-23	22728-22738	Conclusion	_	_	_	
85-24	22738-22739	:	_	_	_	
85-25	22740-22742	if	_	_	_	
85-26	22743-22748	there	_	_	_	
85-27	22749-22752	are	_	_	_	
85-28	22753-22757	many	_	_	_	
85-29	22758-22762	FPIs	_	_	_	
85-30	22763-22764	(	_	_	_	
85-31	22764-22767	due	_	_	_	
85-32	22768-22770	to	_	_	_	
85-33	22771-22780	checksums	_	_	_	
85-34	22781-22783	or	_	_	_	
85-35	22784-22800	full_page_writes	_	_	_	
85-36	22800-22801	,	_	_	_	
85-37	22802-22806	that	_	_	_	
85-38	22806-22807	 	_	_	_	
85-39	22807-22809	is	_	_	_	
85-40	22809-22810	,	_	_	_	
85-41	22811-22817	almost	_	_	_	
85-42	22818-22824	always	_	_	_	
85-43	22824-22825	)	_	_	_	
85-44	22825-22826	,	_	_	_	
85-45	22827-22831	most	_	_	_	
85-46	22832-22838	likely	_	_	_	
85-47	22839-22841	it	_	_	_	
85-48	22842-22847	makes	_	_	_	
85-49	22848-22853	sense	_	_	_	
85-50	22854-22856	to	_	_	_	
85-51	22857-22860	use	_	_	_	
85-52	22861-22872	compression	_	_	_	
85-53	22873-22881	although	_	_	_	
85-54	22882-22884	it	_	_	_	
85-55	22885-22890	loads	_	_	_	
85-56	22891-22894	the	_	_	_	
85-57	22895-22904	processor	_	_	_	
85-58	22904-22905	.	_	_	_	
85-59	22906-22917	Performance	_	_	_	

#Text=During regular work of a server, WAL files are continuously written one by one. Because of no random access, even HDD disks do the job fine. But this kind of load is pretty much different from the one when data files are accessed. So, it is usually beneficial to store WAL on a separate physical disk (or disk array) mounted to the file system of the server. Instead of the $PGDATA/pg_wal directory, a symbolic link to the appropriate directory must be created.
86-1	22918-22924	During	_	_	_	
86-2	22925-22932	regular	_	_	_	
86-3	22933-22937	work	_	_	_	
86-4	22938-22940	of	_	_	_	
86-5	22941-22942	a	_	_	_	
86-6	22943-22949	server	_	_	_	
86-7	22949-22950	,	_	_	_	
86-8	22951-22954	WAL	_	_	_	
86-9	22955-22960	files	_	_	_	
86-10	22961-22964	are	_	_	_	
86-11	22965-22977	continuously	_	_	_	
86-12	22978-22985	written	_	_	_	
86-13	22986-22989	one	_	_	_	
86-14	22990-22992	by	_	_	_	
86-15	22993-22996	one	_	_	_	
86-16	22996-22997	.	_	_	_	
86-17	22998-23005	Because	_	_	_	
86-18	23006-23008	of	_	_	_	
86-19	23009-23011	no	_	_	_	
86-20	23012-23018	random	_	_	_	
86-21	23019-23025	access	_	_	_	
86-22	23025-23026	,	_	_	_	
86-23	23027-23031	even	_	_	_	
86-24	23032-23035	HDD	_	_	_	
86-25	23036-23041	disks	_	_	_	
86-26	23042-23044	do	_	_	_	
86-27	23045-23048	the	_	_	_	
86-28	23049-23052	job	_	_	_	
86-29	23053-23057	fine	_	_	_	
86-30	23057-23058	.	_	_	_	
86-31	23059-23062	But	_	_	_	
86-32	23063-23067	this	_	_	_	
86-33	23068-23072	kind	_	_	_	
86-34	23073-23075	of	_	_	_	
86-35	23076-23080	load	_	_	_	
86-36	23081-23083	is	_	_	_	
86-37	23084-23090	pretty	_	_	_	
86-38	23091-23095	much	_	_	_	
86-39	23096-23105	different	_	_	_	
86-40	23106-23110	from	_	_	_	
86-41	23111-23114	the	_	_	_	
86-42	23115-23118	one	_	_	_	
86-43	23119-23123	when	_	_	_	
86-44	23124-23128	data	_	_	_	
86-45	23129-23134	files	_	_	_	
86-46	23135-23138	are	_	_	_	
86-47	23139-23147	accessed	_	_	_	
86-48	23147-23148	.	_	_	_	
86-49	23149-23151	So	_	_	_	
86-50	23151-23152	,	_	_	_	
86-51	23153-23155	it	_	_	_	
86-52	23156-23158	is	_	_	_	
86-53	23159-23166	usually	_	_	_	
86-54	23167-23177	beneficial	_	_	_	
86-55	23178-23180	to	_	_	_	
86-56	23181-23186	store	_	_	_	
86-57	23187-23190	WAL	_	_	_	
86-58	23191-23193	on	_	_	_	
86-59	23194-23195	a	_	_	_	
86-60	23196-23204	separate	_	_	_	
86-61	23205-23213	physical	_	_	_	
86-62	23214-23218	disk	_	_	_	
86-63	23219-23220	(	_	_	_	
86-64	23220-23222	or	_	_	_	
86-65	23223-23227	disk	_	_	_	
86-66	23228-23233	array	_	_	_	
86-67	23233-23234	)	_	_	_	
86-68	23235-23242	mounted	_	_	_	
86-69	23243-23245	to	_	_	_	
86-70	23246-23249	the	_	_	_	
86-71	23250-23254	file	_	_	_	
86-72	23255-23261	system	_	_	_	
86-73	23262-23264	of	_	_	_	
86-74	23265-23268	the	_	_	_	
86-75	23269-23275	server	_	_	_	
86-76	23275-23276	.	_	_	_	
86-77	23277-23284	Instead	_	_	_	
86-78	23285-23287	of	_	_	_	
86-79	23288-23291	the	_	_	_	
86-80	23292-23293	$	_	_	_	
86-81	23293-23299	PGDATA	_	_	_	
86-82	23299-23300	/	_	_	_	
86-83	23300-23306	pg_wal	_	_	_	
86-84	23307-23316	directory	_	_	_	
86-85	23316-23317	,	_	_	_	
86-86	23318-23319	a	_	_	_	
86-87	23320-23328	symbolic	_	_	_	
86-88	23329-23333	link	_	_	_	
86-89	23334-23336	to	_	_	_	
86-90	23337-23340	the	_	_	_	
86-91	23341-23352	appropriate	_	_	_	
86-92	23353-23362	directory	_	_	_	
86-93	23363-23367	must	_	_	_	
86-94	23368-23370	be	_	_	_	
86-95	23371-23378	created	_	_	_	
86-96	23378-23379	.	_	_	_	

#Text=There are a couple of situations where WAL files need to be not only written but read. The first one is a clear case of recovery after a failure. The second one is less trivial. It occurs if stream replication is used and a replica is late to receive WAL records while they are still in the OS buffers of the main server. In this case, the walsender process has to read the necessary data from disk. We will discuss this in more detail when we reach replication. WAL is written in either of the two modes: Synchronous — at a transaction commit, the work cannot be continued until all WAL records of this transaction get on disk. Asynchronous — a transaction completes immediately, and WAL is written in the background.
87-1	23380-23385	There	_	_	_	
87-2	23386-23389	are	_	_	_	
87-3	23390-23391	a	_	_	_	
87-4	23392-23398	couple	_	_	_	
87-5	23399-23401	of	_	_	_	
87-6	23402-23412	situations	_	_	_	
87-7	23413-23418	where	_	_	_	
87-8	23419-23422	WAL	_	_	_	
87-9	23423-23428	files	_	_	_	
87-10	23429-23433	need	_	_	_	
87-11	23434-23436	to	_	_	_	
87-12	23437-23439	be	_	_	_	
87-13	23440-23443	not	_	_	_	
87-14	23444-23448	only	_	_	_	
87-15	23449-23456	written	_	_	_	
87-16	23457-23460	but	_	_	_	
87-17	23461-23465	read	_	_	_	
87-18	23465-23466	.	_	_	_	
87-19	23467-23470	The	_	_	_	
87-20	23471-23476	first	_	_	_	
87-21	23477-23480	one	_	_	_	
87-22	23481-23483	is	_	_	_	
87-23	23484-23485	a	_	_	_	
87-24	23486-23491	clear	_	_	_	
87-25	23492-23496	case	_	_	_	
87-26	23497-23499	of	_	_	_	
87-27	23500-23508	recovery	_	_	_	
87-28	23509-23514	after	_	_	_	
87-29	23515-23516	a	_	_	_	
87-30	23517-23524	failure	_	_	_	
87-31	23524-23525	.	_	_	_	
87-32	23526-23529	The	_	_	_	
87-33	23530-23536	second	_	_	_	
87-34	23537-23540	one	_	_	_	
87-35	23541-23543	is	_	_	_	
87-36	23544-23548	less	_	_	_	
87-37	23549-23556	trivial	_	_	_	
87-38	23556-23557	.	_	_	_	
87-39	23558-23560	It	_	_	_	
87-40	23561-23567	occurs	_	_	_	
87-41	23568-23570	if	_	_	_	
87-42	23571-23577	stream	_	_	_	
87-43	23578-23589	replication	_	_	_	
87-44	23590-23592	is	_	_	_	
87-45	23593-23597	used	_	_	_	
87-46	23598-23601	and	_	_	_	
87-47	23602-23603	a	_	_	_	
87-48	23604-23611	replica	_	_	_	
87-49	23612-23614	is	_	_	_	
87-50	23615-23619	late	_	_	_	
87-51	23620-23622	to	_	_	_	
87-52	23623-23630	receive	_	_	_	
87-53	23631-23634	WAL	_	_	_	
87-54	23635-23642	records	_	_	_	
87-55	23643-23648	while	_	_	_	
87-56	23649-23653	they	_	_	_	
87-57	23654-23657	are	_	_	_	
87-58	23658-23663	still	_	_	_	
87-59	23664-23666	in	_	_	_	
87-60	23667-23670	the	_	_	_	
87-61	23671-23673	OS	_	_	_	
87-62	23674-23681	buffers	_	_	_	
87-63	23682-23684	of	_	_	_	
87-64	23685-23688	the	_	_	_	
87-65	23689-23693	main	_	_	_	
87-66	23694-23700	server	_	_	_	
87-67	23700-23701	.	_	_	_	
87-68	23702-23704	In	_	_	_	
87-69	23705-23709	this	_	_	_	
87-70	23710-23714	case	_	_	_	
87-71	23714-23715	,	_	_	_	
87-72	23716-23719	the	_	_	_	
87-73	23720-23729	walsender	_	_	_	
87-74	23730-23737	process	_	_	_	
87-75	23738-23741	has	_	_	_	
87-76	23742-23744	to	_	_	_	
87-77	23745-23749	read	_	_	_	
87-78	23750-23753	the	_	_	_	
87-79	23754-23763	necessary	_	_	_	
87-80	23764-23768	data	_	_	_	
87-81	23769-23773	from	_	_	_	
87-82	23774-23778	disk	_	_	_	
87-83	23778-23779	.	_	_	_	
87-84	23780-23782	We	_	_	_	
87-85	23783-23787	will	_	_	_	
87-86	23788-23795	discuss	_	_	_	
87-87	23796-23800	this	_	_	_	
87-88	23801-23803	in	_	_	_	
87-89	23804-23808	more	_	_	_	
87-90	23809-23815	detail	_	_	_	
87-91	23816-23820	when	_	_	_	
87-92	23821-23823	we	_	_	_	
87-93	23824-23829	reach	_	_	_	
87-94	23830-23841	replication	_	_	_	
87-95	23841-23842	.	_	_	_	
87-96	23843-23846	WAL	_	_	_	
87-97	23847-23849	is	_	_	_	
87-98	23850-23857	written	_	_	_	
87-99	23858-23860	in	_	_	_	
87-100	23861-23867	either	_	_	_	
87-101	23868-23870	of	_	_	_	
87-102	23871-23874	the	_	_	_	
87-103	23875-23878	two	_	_	_	
87-104	23879-23884	modes	_	_	_	
87-105	23884-23885	:	_	_	_	
87-106	23886-23897	Synchronous	_	_	_	
87-107	23897-23898	 	_	_	_	
87-108	23898-23899	—	_	_	_	
87-109	23900-23902	at	_	_	_	
87-110	23903-23904	a	_	_	_	
87-111	23905-23916	transaction	_	_	_	
87-112	23917-23923	commit	_	_	_	
87-113	23923-23924	,	_	_	_	
87-114	23925-23928	the	_	_	_	
87-115	23929-23933	work	_	_	_	
87-116	23934-23940	cannot	_	_	_	
87-117	23941-23943	be	_	_	_	
87-118	23944-23953	continued	_	_	_	
87-119	23954-23959	until	_	_	_	
87-120	23960-23963	all	_	_	_	
87-121	23964-23967	WAL	_	_	_	
87-122	23968-23975	records	_	_	_	
87-123	23976-23978	of	_	_	_	
87-124	23979-23983	this	_	_	_	
87-125	23984-23995	transaction	_	_	_	
87-126	23996-23999	get	_	_	_	
87-127	24000-24002	on	_	_	_	
87-128	24003-24007	disk	_	_	_	
87-129	24007-24008	.	_	_	_	
87-130	24009-24021	Asynchronous	_	_	_	
87-131	24021-24022	 	_	_	_	
87-132	24022-24023	—	_	_	_	
87-133	24024-24025	a	_	_	_	
87-134	24026-24037	transaction	_	_	_	
87-135	24038-24047	completes	_	_	_	
87-136	24048-24059	immediately	_	_	_	
87-137	24059-24060	,	_	_	_	
87-138	24061-24064	and	_	_	_	
87-139	24065-24068	WAL	_	_	_	
87-140	24069-24071	is	_	_	_	
87-141	24072-24079	written	_	_	_	
87-142	24080-24082	in	_	_	_	
87-143	24083-24086	the	_	_	_	
87-144	24087-24097	background	_	_	_	
87-145	24097-24098	.	_	_	_	

#Text=The synchronous_commit parameter, turned on by default, sets the synchronous mode.
88-1	24099-24102	The	_	_	_	
88-2	24103-24121	synchronous_commit	_	_	_	
88-3	24122-24131	parameter	_	_	_	
88-4	24131-24132	,	_	_	_	
88-5	24133-24139	turned	_	_	_	
88-6	24140-24142	on	_	_	_	
88-7	24143-24145	by	_	_	_	
88-8	24146-24153	default	_	_	_	
88-9	24153-24154	,	_	_	_	
88-10	24155-24159	sets	_	_	_	
88-11	24160-24163	the	_	_	_	
88-12	24164-24175	synchronous	_	_	_	
88-13	24176-24180	mode	_	_	_	
88-14	24180-24181	.	_	_	_	

#Text=Because synchronization is connected with the actual (that is, slow) input/output, it is beneficial to do it as infrequently as possible. To this end, a backend process that completes a transaction and writes WAL makes a short pause, defined by the commit_delay parameter. But this happens only if the system has not less than commit_siblings active transactions. This behavior relies on the expectation that during the waiting time some transactions will be completed and it will be possible to synchronize them in one go. This is similar to how you hold the doors of an elevator so that someone has time to jump into the car. By default, commit_siblings = 5 and commit_delay = 0, so actually there is no wait. It makes sense to change the value of commit_delay only for systems that execute a great number of OLTP transactions.
89-1	24182-24189	Because	_	_	_	
89-2	24190-24205	synchronization	_	_	_	
89-3	24206-24208	is	_	_	_	
89-4	24209-24218	connected	_	_	_	
89-5	24219-24223	with	_	_	_	
89-6	24224-24227	the	_	_	_	
89-7	24228-24234	actual	_	_	_	
89-8	24235-24236	(	_	_	_	
89-9	24236-24240	that	_	_	_	
89-10	24240-24241	 	_	_	_	
89-11	24241-24243	is	_	_	_	
89-12	24243-24244	,	_	_	_	
89-13	24245-24249	slow	_	_	_	
89-14	24249-24250	)	_	_	_	
89-15	24251-24256	input	_	_	_	
89-16	24256-24257	/	_	_	_	
89-17	24257-24263	output	_	_	_	
89-18	24263-24264	,	_	_	_	
89-19	24265-24267	it	_	_	_	
89-20	24268-24270	is	_	_	_	
89-21	24271-24281	beneficial	_	_	_	
89-22	24282-24284	to	_	_	_	
89-23	24285-24287	do	_	_	_	
89-24	24288-24290	it	_	_	_	
89-25	24291-24293	as	_	_	_	
89-26	24294-24306	infrequently	_	_	_	
89-27	24307-24309	as	_	_	_	
89-28	24310-24318	possible	_	_	_	
89-29	24318-24319	.	_	_	_	
89-30	24320-24322	To	_	_	_	
89-31	24323-24327	this	_	_	_	
89-32	24328-24331	end	_	_	_	
89-33	24331-24332	,	_	_	_	
89-34	24333-24334	a	_	_	_	
89-35	24335-24342	backend	_	_	_	
89-36	24343-24350	process	_	_	_	
89-37	24351-24355	that	_	_	_	
89-38	24356-24365	completes	_	_	_	
89-39	24366-24367	a	_	_	_	
89-40	24368-24379	transaction	_	_	_	
89-41	24380-24383	and	_	_	_	
89-42	24384-24390	writes	_	_	_	
89-43	24391-24394	WAL	_	_	_	
89-44	24395-24400	makes	_	_	_	
89-45	24401-24402	a	_	_	_	
89-46	24403-24408	short	_	_	_	
89-47	24409-24414	pause	_	_	_	
89-48	24414-24415	,	_	_	_	
89-49	24416-24423	defined	_	_	_	
89-50	24424-24426	by	_	_	_	
89-51	24427-24430	the	_	_	_	
89-52	24431-24443	commit_delay	_	_	_	
89-53	24444-24453	parameter	_	_	_	
89-54	24453-24454	.	_	_	_	
89-55	24455-24458	But	_	_	_	
89-56	24459-24463	this	_	_	_	
89-57	24464-24471	happens	_	_	_	
89-58	24472-24476	only	_	_	_	
89-59	24477-24479	if	_	_	_	
89-60	24480-24483	the	_	_	_	
89-61	24484-24490	system	_	_	_	
89-62	24491-24494	has	_	_	_	
89-63	24495-24498	not	_	_	_	
89-64	24499-24503	less	_	_	_	
89-65	24504-24508	than	_	_	_	
89-66	24509-24524	commit_siblings	_	_	_	
89-67	24525-24531	active	_	_	_	
89-68	24532-24544	transactions	_	_	_	
89-69	24544-24545	.	_	_	_	
89-70	24546-24550	This	_	_	_	
89-71	24551-24559	behavior	_	_	_	
89-72	24560-24566	relies	_	_	_	
89-73	24567-24569	on	_	_	_	
89-74	24570-24573	the	_	_	_	
89-75	24574-24585	expectation	_	_	_	
89-76	24586-24590	that	_	_	_	
89-77	24591-24597	during	_	_	_	
89-78	24598-24601	the	_	_	_	
89-79	24602-24609	waiting	_	_	_	
89-80	24610-24614	time	_	_	_	
89-81	24615-24619	some	_	_	_	
89-82	24620-24632	transactions	_	_	_	
89-83	24633-24637	will	_	_	_	
89-84	24638-24640	be	_	_	_	
89-85	24641-24650	completed	_	_	_	
89-86	24651-24654	and	_	_	_	
89-87	24655-24657	it	_	_	_	
89-88	24658-24662	will	_	_	_	
89-89	24663-24665	be	_	_	_	
89-90	24666-24674	possible	_	_	_	
89-91	24675-24677	to	_	_	_	
89-92	24678-24689	synchronize	_	_	_	
89-93	24690-24694	them	_	_	_	
89-94	24695-24697	in	_	_	_	
89-95	24698-24701	one	_	_	_	
89-96	24702-24704	go	_	_	_	
89-97	24704-24705	.	_	_	_	
89-98	24706-24710	This	_	_	_	
89-99	24711-24713	is	_	_	_	
89-100	24714-24721	similar	_	_	_	
89-101	24722-24724	to	_	_	_	
89-102	24725-24728	how	_	_	_	
89-103	24729-24732	you	_	_	_	
89-104	24733-24737	hold	_	_	_	
89-105	24738-24741	the	_	_	_	
89-106	24742-24747	doors	_	_	_	
89-107	24748-24750	of	_	_	_	
89-108	24751-24753	an	_	_	_	
89-109	24754-24762	elevator	_	_	_	
89-110	24763-24765	so	_	_	_	
89-111	24766-24770	that	_	_	_	
89-112	24771-24778	someone	_	_	_	
89-113	24779-24782	has	_	_	_	
89-114	24783-24787	time	_	_	_	
89-115	24788-24790	to	_	_	_	
89-116	24791-24795	jump	_	_	_	
89-117	24796-24800	into	_	_	_	
89-118	24801-24804	the	_	_	_	
89-119	24805-24808	car	_	_	_	
89-120	24808-24809	.	_	_	_	
89-121	24810-24812	By	_	_	_	
89-122	24813-24820	default	_	_	_	
89-123	24820-24821	,	_	_	_	
89-124	24822-24837	commit_siblings	PARAM	_	_	
89-125	24838-24839	=	_	_	_	
89-126	24840-24841	5	VALUE	Equal to	89-124	
89-127	24842-24845	and	_	_	_	
89-128	24846-24858	commit_delay	PARAM	_	_	
89-129	24859-24860	=	_	_	_	
89-130	24861-24862	0	VALUE	Equal to	89-128	
89-131	24862-24863	,	_	_	_	
89-132	24864-24866	so	_	_	_	
89-133	24867-24875	actually	_	_	_	
89-134	24876-24881	there	_	_	_	
89-135	24882-24884	is	_	_	_	
89-136	24885-24887	no	_	_	_	
89-137	24888-24892	wait	_	_	_	
89-138	24892-24893	.	_	_	_	
89-139	24894-24896	It	_	_	_	
89-140	24897-24902	makes	_	_	_	
89-141	24903-24908	sense	_	_	_	
89-142	24909-24911	to	_	_	_	
89-143	24912-24918	change	_	_	_	
89-144	24919-24922	the	_	_	_	
89-145	24923-24928	value	_	_	_	
89-146	24929-24931	of	_	_	_	
89-147	24932-24944	commit_delay	_	_	_	
89-148	24945-24949	only	_	_	_	
89-149	24950-24953	for	_	_	_	
89-150	24954-24961	systems	_	_	_	
89-151	24962-24966	that	_	_	_	
89-152	24967-24974	execute	_	_	_	
89-153	24975-24976	a	_	_	_	
89-154	24977-24982	great	_	_	_	
89-155	24983-24989	number	_	_	_	
89-156	24990-24992	of	_	_	_	
89-157	24993-24997	OLTP	_	_	_	
89-158	24998-25010	transactions	_	_	_	
89-159	25010-25011	.	_	_	_	

#Text=Then the process flushes part of WAL up to the LSN needed (or a little more if during the waiting time new records were added). After that the transaction is considered completed. Synchronous writing ensures durability (the letter D in the ACID acronym): if a transaction is committed, all its WAL records are already on disk and won't be lost. But a drawback is that synchronous writing increases the response time (the COMMIT command does not return control until the end of the synchronization) and reduces the system performance.
90-1	25012-25016	Then	_	_	_	
90-2	25017-25020	the	_	_	_	
90-3	25021-25028	process	_	_	_	
90-4	25029-25036	flushes	_	_	_	
90-5	25037-25041	part	_	_	_	
90-6	25042-25044	of	_	_	_	
90-7	25045-25048	WAL	_	_	_	
90-8	25049-25051	up	_	_	_	
90-9	25052-25054	to	_	_	_	
90-10	25055-25058	the	_	_	_	
90-11	25059-25062	LSN	_	_	_	
90-12	25063-25069	needed	_	_	_	
90-13	25070-25071	(	_	_	_	
90-14	25071-25073	or	_	_	_	
90-15	25074-25075	a	_	_	_	
90-16	25076-25082	little	_	_	_	
90-17	25083-25087	more	_	_	_	
90-18	25088-25090	if	_	_	_	
90-19	25091-25097	during	_	_	_	
90-20	25098-25101	the	_	_	_	
90-21	25102-25109	waiting	_	_	_	
90-22	25110-25114	time	_	_	_	
90-23	25115-25118	new	_	_	_	
90-24	25119-25126	records	_	_	_	
90-25	25127-25131	were	_	_	_	
90-26	25132-25137	added	_	_	_	
90-27	25137-25138	)	_	_	_	
90-28	25138-25139	.	_	_	_	
90-29	25140-25145	After	_	_	_	
90-30	25146-25150	that	_	_	_	
90-31	25151-25154	the	_	_	_	
90-32	25155-25166	transaction	_	_	_	
90-33	25167-25169	is	_	_	_	
90-34	25170-25180	considered	_	_	_	
90-35	25181-25190	completed	_	_	_	
90-36	25190-25191	.	_	_	_	
90-37	25192-25203	Synchronous	_	_	_	
90-38	25204-25211	writing	_	_	_	
90-39	25212-25219	ensures	_	_	_	
90-40	25220-25230	durability	_	_	_	
90-41	25231-25232	(	_	_	_	
90-42	25232-25235	the	_	_	_	
90-43	25236-25242	letter	_	_	_	
90-44	25243-25244	D	_	_	_	
90-45	25245-25247	in	_	_	_	
90-46	25248-25251	the	_	_	_	
90-47	25252-25256	ACID	_	_	_	
90-48	25257-25264	acronym	_	_	_	
90-49	25264-25265	)	_	_	_	
90-50	25265-25266	:	_	_	_	
90-51	25267-25269	if	_	_	_	
90-52	25270-25271	a	_	_	_	
90-53	25272-25283	transaction	_	_	_	
90-54	25284-25286	is	_	_	_	
90-55	25287-25296	committed	_	_	_	
90-56	25296-25297	,	_	_	_	
90-57	25298-25301	all	_	_	_	
90-58	25302-25305	its	_	_	_	
90-59	25306-25309	WAL	_	_	_	
90-60	25310-25317	records	_	_	_	
90-61	25318-25321	are	_	_	_	
90-62	25322-25329	already	_	_	_	
90-63	25330-25332	on	_	_	_	
90-64	25333-25337	disk	_	_	_	
90-65	25338-25341	and	_	_	_	
90-66	25342-25347	won't	_	_	_	
90-67	25348-25350	be	_	_	_	
90-68	25351-25355	lost	_	_	_	
90-69	25355-25356	.	_	_	_	
90-70	25357-25360	But	_	_	_	
90-71	25361-25362	a	_	_	_	
90-72	25363-25371	drawback	_	_	_	
90-73	25372-25374	is	_	_	_	
90-74	25375-25379	that	_	_	_	
90-75	25380-25391	synchronous	_	_	_	
90-76	25392-25399	writing	_	_	_	
90-77	25400-25409	increases	_	_	_	
90-78	25410-25413	the	_	_	_	
90-79	25414-25422	response	_	_	_	
90-80	25423-25427	time	_	_	_	
90-81	25428-25429	(	_	_	_	
90-82	25429-25432	the	_	_	_	
90-83	25433-25439	COMMIT	_	_	_	
90-84	25440-25447	command	_	_	_	
90-85	25448-25452	does	_	_	_	
90-86	25453-25456	not	_	_	_	
90-87	25457-25463	return	_	_	_	
90-88	25464-25471	control	_	_	_	
90-89	25472-25477	until	_	_	_	
90-90	25478-25481	the	_	_	_	
90-91	25482-25485	end	_	_	_	
90-92	25486-25488	of	_	_	_	
90-93	25489-25492	the	_	_	_	
90-94	25493-25508	synchronization	_	_	_	
90-95	25508-25509	)	_	_	_	
90-96	25510-25513	and	_	_	_	
90-97	25514-25521	reduces	_	_	_	
90-98	25522-25525	the	_	_	_	
90-99	25526-25532	system	_	_	_	
90-100	25533-25544	performance	_	_	_	
90-101	25544-25545	.	_	_	_	

#Text=You can make writing asynchronous by setting synchronous_commit = off (or local). When writing is asynchronous, WAL records are flushed by the wal writer process, which alternates work and waits (the waiting time is specified by the wal_writer_delay parameter with the default value of 200 ms).
91-1	25546-25549	You	_	_	_	
91-2	25550-25553	can	_	_	_	
91-3	25554-25558	make	_	_	_	
91-4	25559-25566	writing	_	_	_	
91-5	25567-25579	asynchronous	_	_	_	
91-6	25580-25582	by	_	_	_	
91-7	25583-25590	setting	_	_	_	
91-8	25591-25609	synchronous_commit	PARAM	_	_	
91-9	25610-25611	=	_	_	_	
91-10	25612-25615	off	VALUE	Equal to	91-8	
91-11	25616-25617	(	_	_	_	
91-12	25617-25619	or	_	_	_	
91-13	25620-25625	local	_	_	_	
91-14	25625-25626	)	_	_	_	
91-15	25626-25627	.	_	_	_	
91-16	25628-25632	When	_	_	_	
91-17	25633-25640	writing	_	_	_	
91-18	25641-25643	is	_	_	_	
91-19	25644-25656	asynchronous	_	_	_	
91-20	25656-25657	,	_	_	_	
91-21	25658-25661	WAL	_	_	_	
91-22	25662-25669	records	_	_	_	
91-23	25670-25673	are	_	_	_	
91-24	25674-25681	flushed	_	_	_	
91-25	25682-25684	by	_	_	_	
91-26	25685-25688	the	_	_	_	
91-27	25689-25692	wal	_	_	_	
91-28	25693-25699	writer	_	_	_	
91-29	25700-25707	process	_	_	_	
91-30	25707-25708	,	_	_	_	
91-31	25709-25714	which	_	_	_	
91-32	25715-25725	alternates	_	_	_	
91-33	25726-25730	work	_	_	_	
91-34	25731-25734	and	_	_	_	
91-35	25735-25740	waits	_	_	_	
91-36	25741-25742	(	_	_	_	
91-37	25742-25745	the	_	_	_	
91-38	25746-25753	waiting	_	_	_	
91-39	25754-25758	time	_	_	_	
91-40	25759-25761	is	_	_	_	
91-41	25762-25771	specified	_	_	_	
91-42	25772-25774	by	_	_	_	
91-43	25775-25778	the	_	_	_	
91-44	25779-25795	wal_writer_delay	PARAM	_	_	
91-45	25796-25805	parameter	_	_	_	
91-46	25806-25810	with	_	_	_	
91-47	25811-25814	the	_	_	_	
91-48	25815-25822	default	_	_	_	
91-49	25823-25828	value	_	_	_	
91-50	25829-25831	of	_	_	_	
91-51	25832-25835	200	VALUE[1]	Equal to	91-44[0_1]	
91-52	25835-25836	 	VALUE[1]	_	_	
91-53	25836-25838	ms	VALUE[1]	_	_	
91-54	25838-25839	)	_	_	_	
91-55	25839-25840	.	_	_	_	

#Text=When the process wakes up after a wait, it checks whether completely filled WAL pages appeared since last time. If they did appear, the process ignores the current page, not filled to the end, and writes only completely filled pages. (However, not all at once: writing stops when it reaches the end of the cache and proceeds from the beginning of the cache next time.) But if none of the pages are filled, the process writes the current WAL page (not filled to the end) — otherwise, what did it wake up for? This algorithm aims to avoid synchronization of the same page several times wherever possible, which is critical for a large stream of updates.
92-1	25841-25845	When	_	_	_	
92-2	25846-25849	the	_	_	_	
92-3	25850-25857	process	_	_	_	
92-4	25858-25863	wakes	_	_	_	
92-5	25864-25866	up	_	_	_	
92-6	25867-25872	after	_	_	_	
92-7	25873-25874	a	_	_	_	
92-8	25875-25879	wait	_	_	_	
92-9	25879-25880	,	_	_	_	
92-10	25881-25883	it	_	_	_	
92-11	25884-25890	checks	_	_	_	
92-12	25891-25898	whether	_	_	_	
92-13	25899-25909	completely	_	_	_	
92-14	25910-25916	filled	_	_	_	
92-15	25917-25920	WAL	_	_	_	
92-16	25921-25926	pages	_	_	_	
92-17	25927-25935	appeared	_	_	_	
92-18	25936-25941	since	_	_	_	
92-19	25942-25946	last	_	_	_	
92-20	25947-25951	time	_	_	_	
92-21	25951-25952	.	_	_	_	
92-22	25953-25955	If	_	_	_	
92-23	25956-25960	they	_	_	_	
92-24	25961-25964	did	_	_	_	
92-25	25965-25971	appear	_	_	_	
92-26	25971-25972	,	_	_	_	
92-27	25973-25976	the	_	_	_	
92-28	25977-25984	process	_	_	_	
92-29	25985-25992	ignores	_	_	_	
92-30	25993-25996	the	_	_	_	
92-31	25997-26004	current	_	_	_	
92-32	26005-26009	page	_	_	_	
92-33	26009-26010	,	_	_	_	
92-34	26011-26014	not	_	_	_	
92-35	26015-26021	filled	_	_	_	
92-36	26022-26024	to	_	_	_	
92-37	26025-26028	the	_	_	_	
92-38	26029-26032	end	_	_	_	
92-39	26032-26033	,	_	_	_	
92-40	26034-26037	and	_	_	_	
92-41	26038-26044	writes	_	_	_	
92-42	26045-26049	only	_	_	_	
92-43	26050-26060	completely	_	_	_	
92-44	26061-26067	filled	_	_	_	
92-45	26068-26073	pages	_	_	_	
92-46	26073-26074	.	_	_	_	
92-47	26075-26076	(	_	_	_	
92-48	26076-26083	However	_	_	_	
92-49	26083-26084	,	_	_	_	
92-50	26085-26088	not	_	_	_	
92-51	26089-26092	all	_	_	_	
92-52	26093-26095	at	_	_	_	
92-53	26096-26100	once	_	_	_	
92-54	26100-26101	:	_	_	_	
92-55	26102-26109	writing	_	_	_	
92-56	26110-26115	stops	_	_	_	
92-57	26116-26120	when	_	_	_	
92-58	26121-26123	it	_	_	_	
92-59	26124-26131	reaches	_	_	_	
92-60	26132-26135	the	_	_	_	
92-61	26136-26139	end	_	_	_	
92-62	26140-26142	of	_	_	_	
92-63	26143-26146	the	_	_	_	
92-64	26147-26152	cache	_	_	_	
92-65	26153-26156	and	_	_	_	
92-66	26157-26165	proceeds	_	_	_	
92-67	26166-26170	from	_	_	_	
92-68	26171-26174	the	_	_	_	
92-69	26175-26184	beginning	_	_	_	
92-70	26185-26187	of	_	_	_	
92-71	26188-26191	the	_	_	_	
92-72	26192-26197	cache	_	_	_	
92-73	26198-26202	next	_	_	_	
92-74	26203-26207	time	_	_	_	
92-75	26207-26208	.	_	_	_	
92-76	26208-26209	)	_	_	_	
92-77	26210-26213	But	_	_	_	
92-78	26214-26216	if	_	_	_	
92-79	26217-26221	none	_	_	_	
92-80	26222-26224	of	_	_	_	
92-81	26225-26228	the	_	_	_	
92-82	26229-26234	pages	_	_	_	
92-83	26235-26238	are	_	_	_	
92-84	26239-26245	filled	_	_	_	
92-85	26245-26246	,	_	_	_	
92-86	26247-26250	the	_	_	_	
92-87	26251-26258	process	_	_	_	
92-88	26259-26265	writes	_	_	_	
92-89	26266-26269	the	_	_	_	
92-90	26270-26277	current	_	_	_	
92-91	26278-26281	WAL	_	_	_	
92-92	26282-26286	page	_	_	_	
92-93	26287-26288	(	_	_	_	
92-94	26288-26291	not	_	_	_	
92-95	26292-26298	filled	_	_	_	
92-96	26299-26301	to	_	_	_	
92-97	26302-26305	the	_	_	_	
92-98	26306-26309	end	_	_	_	
92-99	26309-26310	)	_	_	_	
92-100	26310-26311	 	_	_	_	
92-101	26311-26312	—	_	_	_	
92-102	26313-26322	otherwise	_	_	_	
92-103	26322-26323	,	_	_	_	
92-104	26324-26328	what	_	_	_	
92-105	26329-26332	did	_	_	_	
92-106	26333-26335	it	_	_	_	
92-107	26336-26340	wake	_	_	_	
92-108	26341-26343	up	_	_	_	
92-109	26344-26347	for	_	_	_	
92-110	26347-26348	?	_	_	_	
92-111	26349-26353	This	_	_	_	
92-112	26354-26363	algorithm	_	_	_	
92-113	26364-26368	aims	_	_	_	
92-114	26369-26371	to	_	_	_	
92-115	26372-26377	avoid	_	_	_	
92-116	26378-26393	synchronization	_	_	_	
92-117	26394-26396	of	_	_	_	
92-118	26397-26400	the	_	_	_	
92-119	26401-26405	same	_	_	_	
92-120	26406-26410	page	_	_	_	
92-121	26411-26418	several	_	_	_	
92-122	26419-26424	times	_	_	_	
92-123	26425-26433	wherever	_	_	_	
92-124	26434-26442	possible	_	_	_	
92-125	26442-26443	,	_	_	_	
92-126	26444-26449	which	_	_	_	
92-127	26450-26452	is	_	_	_	
92-128	26453-26461	critical	_	_	_	
92-129	26462-26465	for	_	_	_	
92-130	26466-26467	a	_	_	_	
92-131	26468-26473	large	_	_	_	
92-132	26474-26480	stream	_	_	_	
92-133	26481-26483	of	_	_	_	
92-134	26484-26491	updates	_	_	_	
92-135	26491-26492	.	_	_	_	

#Text=Asynchronous writing is more efficient than the synchronous since commits of the changes do not wait for writes of WAL pages. But the reliability decreases: committed data can be lost in case of failure if less than 3 × wal_writer_delay units of time elapsed between the commit and failure (with the default settings, this is a little longer than half a second). Not an easy choice between efficiency and reliability is up to the system administrator. Note that: unlike turning off synchronization (fsync = off), asynchronous mode does not make recovery impossible. In case of failure, the system will restore the consistent state, but maybe, some of the last transactions will not be present there.
93-1	26493-26505	Asynchronous	_	_	_	
93-2	26506-26513	writing	_	_	_	
93-3	26514-26516	is	_	_	_	
93-4	26517-26521	more	_	_	_	
93-5	26522-26531	efficient	_	_	_	
93-6	26532-26536	than	_	_	_	
93-7	26537-26540	the	_	_	_	
93-8	26541-26552	synchronous	_	_	_	
93-9	26553-26558	since	_	_	_	
93-10	26559-26566	commits	_	_	_	
93-11	26567-26569	of	_	_	_	
93-12	26570-26573	the	_	_	_	
93-13	26574-26581	changes	_	_	_	
93-14	26582-26584	do	_	_	_	
93-15	26585-26588	not	_	_	_	
93-16	26589-26593	wait	_	_	_	
93-17	26594-26597	for	_	_	_	
93-18	26598-26604	writes	_	_	_	
93-19	26605-26607	of	_	_	_	
93-20	26608-26611	WAL	_	_	_	
93-21	26612-26617	pages	_	_	_	
93-22	26617-26618	.	_	_	_	
93-23	26619-26622	But	_	_	_	
93-24	26623-26626	the	_	_	_	
93-25	26627-26638	reliability	_	_	_	
93-26	26639-26648	decreases	_	_	_	
93-27	26648-26649	:	_	_	_	
93-28	26650-26659	committed	_	_	_	
93-29	26660-26664	data	_	_	_	
93-30	26665-26668	can	_	_	_	
93-31	26669-26671	be	_	_	_	
93-32	26672-26676	lost	_	_	_	
93-33	26677-26679	in	_	_	_	
93-34	26680-26684	case	_	_	_	
93-35	26685-26687	of	_	_	_	
93-36	26688-26695	failure	_	_	_	
93-37	26696-26698	if	_	_	_	
93-38	26699-26703	less	_	_	_	
93-39	26704-26708	than	_	_	_	
93-40	26709-26710	3	_	_	_	
93-41	26710-26711	 	_	_	_	
93-42	26711-26712	×	_	_	_	
93-43	26712-26713	 	_	_	_	
93-44	26713-26729	wal_writer_delay	_	_	_	
93-45	26730-26735	units	_	_	_	
93-46	26736-26738	of	_	_	_	
93-47	26739-26743	time	_	_	_	
93-48	26744-26751	elapsed	_	_	_	
93-49	26752-26759	between	_	_	_	
93-50	26760-26763	the	_	_	_	
93-51	26764-26770	commit	_	_	_	
93-52	26771-26774	and	_	_	_	
93-53	26775-26782	failure	_	_	_	
93-54	26783-26784	(	_	_	_	
93-55	26784-26788	with	_	_	_	
93-56	26789-26792	the	_	_	_	
93-57	26793-26800	default	_	_	_	
93-58	26801-26809	settings	_	_	_	
93-59	26809-26810	,	_	_	_	
93-60	26811-26815	this	_	_	_	
93-61	26816-26818	is	_	_	_	
93-62	26819-26820	a	_	_	_	
93-63	26821-26827	little	_	_	_	
93-64	26828-26834	longer	_	_	_	
93-65	26835-26839	than	_	_	_	
93-66	26840-26844	half	_	_	_	
93-67	26845-26846	a	_	_	_	
93-68	26847-26853	second	_	_	_	
93-69	26853-26854	)	_	_	_	
93-70	26854-26855	.	_	_	_	
93-71	26856-26859	Not	_	_	_	
93-72	26860-26862	an	_	_	_	
93-73	26863-26867	easy	_	_	_	
93-74	26868-26874	choice	_	_	_	
93-75	26875-26882	between	_	_	_	
93-76	26883-26893	efficiency	_	_	_	
93-77	26894-26897	and	_	_	_	
93-78	26898-26909	reliability	_	_	_	
93-79	26910-26912	is	_	_	_	
93-80	26913-26915	up	_	_	_	
93-81	26916-26918	to	_	_	_	
93-82	26919-26922	the	_	_	_	
93-83	26923-26929	system	_	_	_	
93-84	26930-26943	administrator	_	_	_	
93-85	26943-26944	.	_	_	_	
93-86	26945-26949	Note	_	_	_	
93-87	26950-26954	that	_	_	_	
93-88	26954-26955	:	_	_	_	
93-89	26956-26962	unlike	_	_	_	
93-90	26963-26970	turning	_	_	_	
93-91	26971-26974	off	_	_	_	
93-92	26975-26990	synchronization	_	_	_	
93-93	26991-26992	(	_	_	_	
93-94	26992-26997	fsync	_	_	_	
93-95	26998-26999	=	_	_	_	
93-96	27000-27003	off	_	_	_	
93-97	27003-27004	)	_	_	_	
93-98	27004-27005	,	_	_	_	
93-99	27006-27018	asynchronous	_	_	_	
93-100	27019-27023	mode	_	_	_	
93-101	27024-27028	does	_	_	_	
93-102	27029-27032	not	_	_	_	
93-103	27033-27037	make	_	_	_	
93-104	27038-27046	recovery	_	_	_	
93-105	27047-27057	impossible	_	_	_	
93-106	27057-27058	.	_	_	_	
93-107	27059-27061	In	_	_	_	
93-108	27062-27066	case	_	_	_	
93-109	27067-27069	of	_	_	_	
93-110	27070-27077	failure	_	_	_	
93-111	27077-27078	,	_	_	_	
93-112	27079-27082	the	_	_	_	
93-113	27083-27089	system	_	_	_	
93-114	27090-27094	will	_	_	_	
93-115	27095-27102	restore	_	_	_	
93-116	27103-27106	the	_	_	_	
93-117	27107-27117	consistent	_	_	_	
93-118	27118-27123	state	_	_	_	
93-119	27123-27124	,	_	_	_	
93-120	27125-27128	but	_	_	_	
93-121	27129-27134	maybe	_	_	_	
93-122	27134-27135	,	_	_	_	
93-123	27136-27140	some	_	_	_	
93-124	27141-27143	of	_	_	_	
93-125	27144-27147	the	_	_	_	
93-126	27148-27152	last	_	_	_	
93-127	27153-27165	transactions	_	_	_	
93-128	27166-27170	will	_	_	_	
93-129	27171-27174	not	_	_	_	
93-130	27175-27177	be	_	_	_	
93-131	27178-27185	present	_	_	_	
93-132	27186-27191	there	_	_	_	
93-133	27191-27192	.	_	_	_	

#Text=You can set the synchronous_commit parameter for separate transactions. This enables increasing the performance by sacrificing the reliability only of some transactions. Say, financial transactions must be committed synchronously, while chat messages can be compromised. Actually both modes work together. Even with a synchronous commit, WAL records of a long transaction will be written asynchronously in order to free WAL buffers. And if during a flush of a page from the buffer cache it appears that the corresponding WAL record is not on disk yet, it will be immediately flushed in the synchronous mode.
94-1	27193-27196	You	_	_	_	
94-2	27197-27200	can	_	_	_	
94-3	27201-27204	set	_	_	_	
94-4	27205-27208	the	_	_	_	
94-5	27209-27227	synchronous_commit	_	_	_	
94-6	27228-27237	parameter	_	_	_	
94-7	27238-27241	for	_	_	_	
94-8	27242-27250	separate	_	_	_	
94-9	27251-27263	transactions	_	_	_	
94-10	27263-27264	.	_	_	_	
94-11	27265-27269	This	_	_	_	
94-12	27270-27277	enables	_	_	_	
94-13	27278-27288	increasing	_	_	_	
94-14	27289-27292	the	_	_	_	
94-15	27293-27304	performance	_	_	_	
94-16	27305-27307	by	_	_	_	
94-17	27308-27319	sacrificing	_	_	_	
94-18	27320-27323	the	_	_	_	
94-19	27324-27335	reliability	_	_	_	
94-20	27336-27340	only	_	_	_	
94-21	27341-27343	of	_	_	_	
94-22	27344-27348	some	_	_	_	
94-23	27349-27361	transactions	_	_	_	
94-24	27361-27362	.	_	_	_	
94-25	27363-27366	Say	_	_	_	
94-26	27366-27367	,	_	_	_	
94-27	27368-27377	financial	_	_	_	
94-28	27378-27390	transactions	_	_	_	
94-29	27391-27395	must	_	_	_	
94-30	27396-27398	be	_	_	_	
94-31	27399-27408	committed	_	_	_	
94-32	27409-27422	synchronously	_	_	_	
94-33	27422-27423	,	_	_	_	
94-34	27424-27429	while	_	_	_	
94-35	27430-27434	chat	_	_	_	
94-36	27435-27443	messages	_	_	_	
94-37	27444-27447	can	_	_	_	
94-38	27448-27450	be	_	_	_	
94-39	27451-27462	compromised	_	_	_	
94-40	27462-27463	.	_	_	_	
94-41	27464-27472	Actually	_	_	_	
94-42	27473-27477	both	_	_	_	
94-43	27478-27483	modes	_	_	_	
94-44	27484-27488	work	_	_	_	
94-45	27489-27497	together	_	_	_	
94-46	27497-27498	.	_	_	_	
94-47	27499-27503	Even	_	_	_	
94-48	27504-27508	with	_	_	_	
94-49	27509-27510	a	_	_	_	
94-50	27511-27522	synchronous	_	_	_	
94-51	27523-27529	commit	_	_	_	
94-52	27529-27530	,	_	_	_	
94-53	27531-27534	WAL	_	_	_	
94-54	27535-27542	records	_	_	_	
94-55	27543-27545	of	_	_	_	
94-56	27546-27547	a	_	_	_	
94-57	27548-27552	long	_	_	_	
94-58	27553-27564	transaction	_	_	_	
94-59	27565-27569	will	_	_	_	
94-60	27570-27572	be	_	_	_	
94-61	27573-27580	written	_	_	_	
94-62	27581-27595	asynchronously	_	_	_	
94-63	27596-27598	in	_	_	_	
94-64	27599-27604	order	_	_	_	
94-65	27605-27607	to	_	_	_	
94-66	27608-27612	free	_	_	_	
94-67	27613-27616	WAL	_	_	_	
94-68	27617-27624	buffers	_	_	_	
94-69	27624-27625	.	_	_	_	
94-70	27626-27629	And	_	_	_	
94-71	27630-27632	if	_	_	_	
94-72	27633-27639	during	_	_	_	
94-73	27640-27641	a	_	_	_	
94-74	27642-27647	flush	_	_	_	
94-75	27648-27650	of	_	_	_	
94-76	27651-27652	a	_	_	_	
94-77	27653-27657	page	_	_	_	
94-78	27658-27662	from	_	_	_	
94-79	27663-27666	the	_	_	_	
94-80	27667-27673	buffer	_	_	_	
94-81	27674-27679	cache	_	_	_	
94-82	27680-27682	it	_	_	_	
94-83	27683-27690	appears	_	_	_	
94-84	27691-27695	that	_	_	_	
94-85	27696-27699	the	_	_	_	
94-86	27700-27713	corresponding	_	_	_	
94-87	27714-27717	WAL	_	_	_	
94-88	27718-27724	record	_	_	_	
94-89	27725-27727	is	_	_	_	
94-90	27728-27731	not	_	_	_	
94-91	27732-27734	on	_	_	_	
94-92	27735-27739	disk	_	_	_	
94-93	27740-27743	yet	_	_	_	
94-94	27743-27744	,	_	_	_	
94-95	27745-27747	it	_	_	_	
94-96	27748-27752	will	_	_	_	
94-97	27753-27755	be	_	_	_	
94-98	27756-27767	immediately	_	_	_	
94-99	27768-27775	flushed	_	_	_	
94-100	27776-27778	in	_	_	_	
94-101	27779-27782	the	_	_	_	
94-102	27783-27794	synchronous	_	_	_	
94-103	27795-27799	mode	_	_	_	
94-104	27799-27800	.	_	_	_	

#Text=To get an insight into the gains of an asynchronous commit, let's try to repeat the pgbench test in this mode. => ALTER SYSTEM SET synchronous_commit = off; => SELECT pg_reload_conf(); student$ pgbench -T 30 test starting vacuum...end.
95-1	27801-27803	To	_	_	_	
95-2	27804-27807	get	_	_	_	
95-3	27808-27810	an	_	_	_	
95-4	27811-27818	insight	_	_	_	
95-5	27819-27823	into	_	_	_	
95-6	27824-27827	the	_	_	_	
95-7	27828-27833	gains	_	_	_	
95-8	27834-27836	of	_	_	_	
95-9	27837-27839	an	_	_	_	
95-10	27840-27852	asynchronous	_	_	_	
95-11	27853-27859	commit	_	_	_	
95-12	27859-27860	,	_	_	_	
95-13	27861-27866	let's	_	_	_	
95-14	27867-27870	try	_	_	_	
95-15	27871-27873	to	_	_	_	
95-16	27874-27880	repeat	_	_	_	
95-17	27881-27884	the	_	_	_	
95-18	27885-27892	pgbench	_	_	_	
95-19	27893-27897	test	_	_	_	
95-20	27898-27900	in	_	_	_	
95-21	27901-27905	this	_	_	_	
95-22	27906-27910	mode	_	_	_	
95-23	27910-27911	.	_	_	_	
95-24	27912-27913	=	_	_	_	
95-25	27913-27914	>	_	_	_	
95-26	27915-27920	ALTER	_	_	_	
95-27	27921-27927	SYSTEM	_	_	_	
95-28	27928-27931	SET	_	_	_	
95-29	27932-27950	synchronous_commit	PARAM	_	_	
95-30	27951-27952	=	_	_	_	
95-31	27953-27956	off	VALUE	Equal to	95-29	
95-32	27956-27957	;	_	_	_	
95-33	27958-27959	=	_	_	_	
95-34	27959-27960	>	_	_	_	
95-35	27961-27967	SELECT	_	_	_	
95-36	27968-27982	pg_reload_conf	_	_	_	
95-37	27982-27983	(	_	_	_	
95-38	27983-27984	)	_	_	_	
95-39	27984-27985	;	_	_	_	
95-40	27986-27993	student	_	_	_	
95-41	27993-27994	$	_	_	_	
95-42	27995-28002	pgbench	_	_	_	
95-43	28003-28004	-	_	_	_	
95-44	28004-28005	T	_	_	_	
95-45	28006-28008	30	_	_	_	
95-46	28009-28013	test	_	_	_	
95-47	28014-28022	starting	_	_	_	
95-48	28023-28029	vacuum	_	_	_	
95-49	28029-28030	.	_	_	_	
95-50	28030-28031	.	_	_	_	
95-51	28031-28032	.	_	_	_	
95-52	28032-28035	end	_	_	_	
95-53	28035-28036	.	_	_	_	

#Text=transaction type: TPC-B (sort of) scaling factor: 1 query mode: simple number of clients: 1 number of threads: 1 duration: 30 s number of transactions actually processed: 45439 latency average = 0.660 ms
96-1	28037-28048	transaction	_	_	_	
96-2	28049-28053	type	_	_	_	
96-3	28053-28054	:	_	_	_	
96-4	28055-28060	TPC-B	_	_	_	
96-5	28061-28062	(	_	_	_	
96-6	28062-28066	sort	_	_	_	
96-7	28067-28069	of	_	_	_	
96-8	28069-28070	)	_	_	_	
96-9	28071-28078	scaling	_	_	_	
96-10	28079-28085	factor	_	_	_	
96-11	28085-28086	:	_	_	_	
96-12	28087-28088	1	_	_	_	
96-13	28089-28094	query	_	_	_	
96-14	28095-28099	mode	_	_	_	
96-15	28099-28100	:	_	_	_	
96-16	28101-28107	simple	_	_	_	
96-17	28108-28114	number	_	_	_	
96-18	28115-28117	of	_	_	_	
96-19	28118-28125	clients	_	_	_	
96-20	28125-28126	:	_	_	_	
96-21	28127-28128	1	_	_	_	
96-22	28129-28135	number	_	_	_	
96-23	28136-28138	of	_	_	_	
96-24	28139-28146	threads	_	_	_	
96-25	28146-28147	:	_	_	_	
96-26	28148-28149	1	_	_	_	
96-27	28150-28158	duration	_	_	_	
96-28	28158-28159	:	_	_	_	
96-29	28160-28162	30	_	_	_	
96-30	28163-28164	s	_	_	_	
96-31	28165-28171	number	_	_	_	
96-32	28172-28174	of	_	_	_	
96-33	28175-28187	transactions	_	_	_	
96-34	28188-28196	actually	_	_	_	
96-35	28197-28206	processed	_	_	_	
96-36	28206-28207	:	_	_	_	
96-37	28208-28213	45439	_	_	_	
96-38	28214-28221	latency	_	_	_	
96-39	28222-28229	average	_	_	_	
96-40	28230-28231	=	_	_	_	
96-41	28232-28237	0.660	_	_	_	
96-42	28238-28240	ms	_	_	_	

#Text=tps = 1514.561710 (including connections establishing) tps = 1514.710558 (excluding connections establishing) With synchronous commits, we got approximately 900 transactions per second (tps) and 1500 tps with asynchronous commits. It goes without saying that in a real-life system under the actual load, the proportion will be different, but it is clear that for short transactions the effect can be pretty considerable.
97-1	28241-28244	tps	_	_	_	
97-2	28245-28246	=	_	_	_	
97-3	28247-28258	1514.561710	_	_	_	
97-4	28259-28260	(	_	_	_	
97-5	28260-28269	including	_	_	_	
97-6	28270-28281	connections	_	_	_	
97-7	28282-28294	establishing	_	_	_	
97-8	28294-28295	)	_	_	_	
97-9	28296-28299	tps	_	_	_	
97-10	28300-28301	=	_	_	_	
97-11	28302-28313	1514.710558	_	_	_	
97-12	28314-28315	(	_	_	_	
97-13	28315-28324	excluding	_	_	_	
97-14	28325-28336	connections	_	_	_	
97-15	28337-28349	establishing	_	_	_	
97-16	28349-28350	)	_	_	_	
97-17	28351-28355	With	_	_	_	
97-18	28356-28367	synchronous	_	_	_	
97-19	28368-28375	commits	_	_	_	
97-20	28375-28376	,	_	_	_	
97-21	28377-28379	we	_	_	_	
97-22	28380-28383	got	_	_	_	
97-23	28384-28397	approximately	_	_	_	
97-24	28398-28401	900	_	_	_	
97-25	28401-28402	 	_	_	_	
97-26	28402-28414	transactions	_	_	_	
97-27	28415-28418	per	_	_	_	
97-28	28419-28425	second	_	_	_	
97-29	28426-28427	(	_	_	_	
97-30	28427-28430	tps	_	_	_	
97-31	28430-28431	)	_	_	_	
97-32	28432-28435	and	_	_	_	
97-33	28436-28440	1500	_	_	_	
97-34	28440-28441	 	_	_	_	
97-35	28441-28444	tps	_	_	_	
97-36	28445-28449	with	_	_	_	
97-37	28450-28462	asynchronous	_	_	_	
97-38	28463-28470	commits	_	_	_	
97-39	28470-28471	.	_	_	_	
97-40	28472-28474	It	_	_	_	
97-41	28475-28479	goes	_	_	_	
97-42	28480-28487	without	_	_	_	
97-43	28488-28494	saying	_	_	_	
97-44	28495-28499	that	_	_	_	
97-45	28500-28502	in	_	_	_	
97-46	28503-28504	a	_	_	_	
97-47	28505-28514	real-life	_	_	_	
97-48	28515-28521	system	_	_	_	
97-49	28522-28527	under	_	_	_	
97-50	28528-28531	the	_	_	_	
97-51	28532-28538	actual	_	_	_	
97-52	28539-28543	load	_	_	_	
97-53	28543-28544	,	_	_	_	
97-54	28545-28548	the	_	_	_	
97-55	28549-28559	proportion	_	_	_	
97-56	28560-28564	will	_	_	_	
97-57	28565-28567	be	_	_	_	
97-58	28568-28577	different	_	_	_	
97-59	28577-28578	,	_	_	_	
97-60	28579-28582	but	_	_	_	
97-61	28583-28585	it	_	_	_	
97-62	28586-28588	is	_	_	_	
97-63	28589-28594	clear	_	_	_	
97-64	28595-28599	that	_	_	_	
97-65	28600-28603	for	_	_	_	
97-66	28604-28609	short	_	_	_	
97-67	28610-28622	transactions	_	_	_	
97-68	28623-28626	the	_	_	_	
97-69	28627-28633	effect	_	_	_	
97-70	28634-28637	can	_	_	_	
97-71	28638-28640	be	_	_	_	
97-72	28641-28647	pretty	_	_	_	
97-73	28648-28660	considerable	_	_	_	
97-74	28660-28661	.	_	_	_	

#Text=Here the series of articles on WAL logging comes to an end. If anything critical is unaddressed, I would appreciate if you provide comments. Thank you all! And next, amazing adventures are awaiting us in the world of locks, but that's another story. Tags: postgresql wal write-ahead log Add tags Hubs: Postgres Professional corporate blog
98-1	28662-28666	Here	_	_	_	
98-2	28667-28670	the	_	_	_	
98-3	28671-28677	series	_	_	_	
98-4	28678-28680	of	_	_	_	
98-5	28681-28689	articles	_	_	_	
98-6	28690-28692	on	_	_	_	
98-7	28693-28696	WAL	_	_	_	
98-8	28697-28704	logging	_	_	_	
98-9	28705-28710	comes	_	_	_	
98-10	28711-28713	to	_	_	_	
98-11	28714-28716	an	_	_	_	
98-12	28717-28720	end	_	_	_	
98-13	28720-28721	.	_	_	_	
98-14	28722-28724	If	_	_	_	
98-15	28725-28733	anything	_	_	_	
98-16	28734-28742	critical	_	_	_	
98-17	28743-28745	is	_	_	_	
98-18	28746-28757	unaddressed	_	_	_	
98-19	28757-28758	,	_	_	_	
98-20	28759-28760	I	_	_	_	
98-21	28761-28766	would	_	_	_	
98-22	28767-28777	appreciate	_	_	_	
98-23	28778-28780	if	_	_	_	
98-24	28781-28784	you	_	_	_	
98-25	28785-28792	provide	_	_	_	
98-26	28793-28801	comments	_	_	_	
98-27	28801-28802	.	_	_	_	
98-28	28803-28808	Thank	_	_	_	
98-29	28809-28812	you	_	_	_	
98-30	28813-28816	all	_	_	_	
98-31	28816-28817	!	_	_	_	
98-32	28818-28821	And	_	_	_	
98-33	28822-28826	next	_	_	_	
98-34	28826-28827	,	_	_	_	
98-35	28828-28835	amazing	_	_	_	
98-36	28836-28846	adventures	_	_	_	
98-37	28847-28850	are	_	_	_	
98-38	28851-28859	awaiting	_	_	_	
98-39	28860-28862	us	_	_	_	
98-40	28863-28865	in	_	_	_	
98-41	28866-28869	the	_	_	_	
98-42	28870-28875	world	_	_	_	
98-43	28876-28878	of	_	_	_	
98-44	28879-28884	locks	_	_	_	
98-45	28884-28885	,	_	_	_	
98-46	28886-28889	but	_	_	_	
98-47	28890-28896	that's	_	_	_	
98-48	28897-28904	another	_	_	_	
98-49	28905-28910	story	_	_	_	
98-50	28910-28911	.	_	_	_	
98-51	28912-28916	Tags	_	_	_	
98-52	28916-28917	:	_	_	_	
98-53	28918-28928	postgresql	_	_	_	
98-54	28929-28932	wal	_	_	_	
98-55	28933-28944	write-ahead	_	_	_	
98-56	28945-28948	log	_	_	_	
98-57	28949-28952	Add	_	_	_	
98-58	28953-28957	tags	_	_	_	
98-59	28958-28962	Hubs	_	_	_	
98-60	28962-28963	:	_	_	_	
98-61	28964-28972	Postgres	_	_	_	
98-62	28973-28985	Professional	_	_	_	
98-63	28986-28995	corporate	_	_	_	
98-64	28996-29000	blog	_	_	_	

#Text=PostgreSQL SQL Specify the reason of the downvote so the author could improve the post Send anonymously Mark this post with your tags You should divide tags with commas. E.g.: programming, algorithms Save 3.1k
99-1	29001-29011	PostgreSQL	_	_	_	
99-2	29012-29015	SQL	_	_	_	
99-3	29016-29023	Specify	_	_	_	
99-4	29024-29027	the	_	_	_	
99-5	29028-29034	reason	_	_	_	
99-6	29035-29037	of	_	_	_	
99-7	29038-29041	the	_	_	_	
99-8	29042-29050	downvote	_	_	_	
99-9	29051-29053	so	_	_	_	
99-10	29054-29057	the	_	_	_	
99-11	29058-29064	author	_	_	_	
99-12	29065-29070	could	_	_	_	
99-13	29071-29078	improve	_	_	_	
99-14	29079-29082	the	_	_	_	
99-15	29083-29087	post	_	_	_	
99-16	29088-29092	Send	_	_	_	
99-17	29093-29104	anonymously	_	_	_	
99-18	29105-29109	Mark	_	_	_	
99-19	29110-29114	this	_	_	_	
99-20	29115-29119	post	_	_	_	
99-21	29120-29124	with	_	_	_	
99-22	29125-29129	your	_	_	_	
99-23	29130-29134	tags	_	_	_	
99-24	29135-29138	You	_	_	_	
99-25	29139-29145	should	_	_	_	
99-26	29146-29152	divide	_	_	_	
99-27	29153-29157	tags	_	_	_	
99-28	29158-29162	with	_	_	_	
99-29	29163-29169	commas	_	_	_	
99-30	29169-29170	.	_	_	_	
99-31	29171-29174	E.g	_	_	_	
99-32	29174-29175	.	_	_	_	
99-33	29175-29176	:	_	_	_	
99-34	29177-29188	programming	_	_	_	
99-35	29188-29189	,	_	_	_	
99-36	29190-29200	algorithms	_	_	_	
99-37	29201-29205	Save	_	_	_	
99-38	29206-29210	3.1k	_	_	_	

#Text=Comment Share Copy link Facebook Twitter Telegram Pocket Violation Describe nature of the violation Send Postgres Professional Разработчик СУБД Postgres Pro
100-1	29211-29218	Comment	_	_	_	
100-2	29219-29224	Share	_	_	_	
100-3	29225-29229	Copy	_	_	_	
100-4	29230-29234	link	_	_	_	
100-5	29235-29243	Facebook	_	_	_	
100-6	29244-29251	Twitter	_	_	_	
100-7	29252-29260	Telegram	_	_	_	
100-8	29261-29267	Pocket	_	_	_	
100-9	29268-29277	Violation	_	_	_	
100-10	29278-29286	Describe	_	_	_	
100-11	29287-29293	nature	_	_	_	
100-12	29294-29296	of	_	_	_	
100-13	29297-29300	the	_	_	_	
100-14	29301-29310	violation	_	_	_	
100-15	29311-29315	Send	_	_	_	
100-16	29316-29324	Postgres	_	_	_	
100-17	29325-29337	Professional	_	_	_	
100-18	29338-29349	Разработчик	_	_	_	
100-19	29350-29354	СУБД	_	_	_	
100-20	29355-29363	Postgres	_	_	_	
100-21	29364-29367	Pro	_	_	_	

#Text=140.5 Karma 0.0 Rating Егор Рогов erogov Пользователь Payment system Facebook Twitter Google+ LiveJournal Similar posts
101-1	29368-29373	140.5	_	_	_	
101-2	29374-29379	Karma	_	_	_	
101-3	29380-29383	0.0	_	_	_	
101-4	29384-29390	Rating	_	_	_	
101-5	29391-29395	Егор	_	_	_	
101-6	29396-29401	Рогов	_	_	_	
101-7	29401-29402	 	_	_	_	
101-8	29402-29408	erogov	_	_	_	
101-9	29409-29421	Пользователь	_	_	_	
101-10	29422-29429	Payment	_	_	_	
101-11	29430-29436	system	_	_	_	
101-12	29437-29445	Facebook	_	_	_	
101-13	29446-29453	Twitter	_	_	_	
101-14	29454-29460	Google	_	_	_	
101-15	29460-29461	+	_	_	_	
101-16	29462-29473	LiveJournal	_	_	_	
101-17	29474-29481	Similar	_	_	_	
101-18	29482-29487	posts	_	_	_	

#Text=April 3, 2020 at 02:37 PM WAL in PostgreSQL: 3. Checkpoint 2.7k March 26, 2020 at 05:50 PM WAL in PostgreSQL: 2. Write-Ahead Log 2.3k March 10, 2020 at 02:12 PM
102-1	29488-29493	April	_	_	_	
102-2	29494-29495	3	_	_	_	
102-3	29495-29496	,	_	_	_	
102-4	29497-29501	2020	_	_	_	
102-5	29502-29504	at	_	_	_	
102-6	29505-29507	02	_	_	_	
102-7	29507-29508	:	_	_	_	
102-8	29508-29510	37	_	_	_	
102-9	29511-29513	PM	_	_	_	
102-10	29514-29517	WAL	_	_	_	
102-11	29518-29520	in	_	_	_	
102-12	29521-29531	PostgreSQL	_	_	_	
102-13	29531-29532	:	_	_	_	
102-14	29533-29534	3	_	_	_	
102-15	29534-29535	.	_	_	_	
102-16	29536-29546	Checkpoint	_	_	_	
102-17	29547-29551	2.7k	_	_	_	
102-18	29552-29557	March	_	_	_	
102-19	29558-29560	26	_	_	_	
102-20	29560-29561	,	_	_	_	
102-21	29562-29566	2020	_	_	_	
102-22	29567-29569	at	_	_	_	
102-23	29570-29572	05	_	_	_	
102-24	29572-29573	:	_	_	_	
102-25	29573-29575	50	_	_	_	
102-26	29576-29578	PM	_	_	_	
102-27	29579-29582	WAL	_	_	_	
102-28	29583-29585	in	_	_	_	
102-29	29586-29596	PostgreSQL	_	_	_	
102-30	29596-29597	:	_	_	_	
102-31	29598-29599	2	_	_	_	
102-32	29599-29600	.	_	_	_	
102-33	29601-29612	Write-Ahead	_	_	_	
102-34	29613-29616	Log	_	_	_	
102-35	29617-29621	2.3k	_	_	_	
102-36	29622-29627	March	_	_	_	
102-37	29628-29630	10	_	_	_	
102-38	29630-29631	,	_	_	_	
102-39	29632-29636	2020	_	_	_	
102-40	29637-29639	at	_	_	_	
102-41	29640-29642	02	_	_	_	
102-42	29642-29643	:	_	_	_	
102-43	29643-29645	12	_	_	_	
102-44	29646-29648	PM	_	_	_	

#Text=WAL in PostgreSQL: 1. Buffer Cache 3.4k Comments Only users with full accounts can post comments. Log in, please. Information Foundation date January 27, 2015 Website postgrespro.ru Number of employees 51–100 employees
103-1	29649-29652	WAL	_	_	_	
103-2	29653-29655	in	_	_	_	
103-3	29656-29666	PostgreSQL	_	_	_	
103-4	29666-29667	:	_	_	_	
103-5	29668-29669	1	_	_	_	
103-6	29669-29670	.	_	_	_	
103-7	29671-29677	Buffer	_	_	_	
103-8	29678-29683	Cache	_	_	_	
103-9	29684-29688	3.4k	_	_	_	
103-10	29689-29697	Comments	_	_	_	
103-11	29698-29702	Only	_	_	_	
103-12	29703-29708	users	_	_	_	
103-13	29709-29713	with	_	_	_	
103-14	29713-29714	 	_	_	_	
103-15	29714-29718	full	_	_	_	
103-16	29719-29727	accounts	_	_	_	
103-17	29728-29731	can	_	_	_	
103-18	29732-29736	post	_	_	_	
103-19	29737-29745	comments	_	_	_	
103-20	29745-29746	.	_	_	_	
103-21	29747-29750	Log	_	_	_	
103-22	29751-29753	in	_	_	_	
103-23	29753-29754	,	_	_	_	
103-24	29755-29761	please	_	_	_	
103-25	29761-29762	.	_	_	_	
103-26	29763-29774	Information	_	_	_	
103-27	29775-29785	Foundation	_	_	_	
103-28	29786-29790	date	_	_	_	
103-29	29791-29798	January	_	_	_	
103-30	29799-29801	27	_	_	_	
103-31	29801-29802	,	_	_	_	
103-32	29803-29807	2015	_	_	_	
103-33	29808-29815	Website	_	_	_	
103-34	29816-29830	postgrespro.ru	_	_	_	
103-35	29831-29837	Number	_	_	_	
103-36	29838-29840	of	_	_	_	
103-37	29841-29850	employees	_	_	_	
103-38	29851-29853	51	_	_	_	
103-39	29853-29854	–	_	_	_	
103-40	29854-29857	100	_	_	_	
103-41	29858-29867	employees	_	_	_	

#Text=Registration date September 30, 2015 Representative Иван Панченко Links Конференция разработчиков и пользователей PostgreSQL PGConf.Russia
104-1	29868-29880	Registration	_	_	_	
104-2	29881-29885	date	_	_	_	
104-3	29886-29895	September	_	_	_	
104-4	29896-29898	30	_	_	_	
104-5	29898-29899	,	_	_	_	
104-6	29900-29904	2015	_	_	_	
104-7	29905-29919	Representative	_	_	_	
104-8	29920-29924	Иван	_	_	_	
104-9	29925-29933	Панченко	_	_	_	
104-10	29934-29939	Links	_	_	_	
104-11	29940-29951	Конференция	_	_	_	
104-12	29952-29965	разработчиков	_	_	_	
104-13	29966-29967	и	_	_	_	
104-14	29968-29981	пользователей	_	_	_	
104-15	29982-29992	PostgreSQL	_	_	_	
104-16	29993-30006	PGConf.Russia	_	_	_	

#Text=pgconf.ru Blog on Habr Locks in PostgreSQL: 4. Locks in memory 2.9k Locks in PostgreSQL: 3. Other locks 3.9k Locks in PostgreSQL: 2. Row-level locks
105-1	30007-30016	pgconf.ru	_	_	_	
105-2	30017-30021	Blog	_	_	_	
105-3	30022-30024	on	_	_	_	
105-4	30025-30029	Habr	_	_	_	
105-5	30030-30035	Locks	_	_	_	
105-6	30036-30038	in	_	_	_	
105-7	30039-30049	PostgreSQL	_	_	_	
105-8	30049-30050	:	_	_	_	
105-9	30051-30052	4	_	_	_	
105-10	30052-30053	.	_	_	_	
105-11	30054-30059	Locks	_	_	_	
105-12	30060-30062	in	_	_	_	
105-13	30063-30069	memory	_	_	_	
105-14	30070-30074	2.9k	_	_	_	
105-15	30075-30080	Locks	_	_	_	
105-16	30081-30083	in	_	_	_	
105-17	30084-30094	PostgreSQL	_	_	_	
105-18	30094-30095	:	_	_	_	
105-19	30096-30097	3	_	_	_	
105-20	30097-30098	.	_	_	_	
105-21	30099-30104	Other	_	_	_	
105-22	30105-30110	locks	_	_	_	
105-23	30111-30115	3.9k	_	_	_	
105-24	30116-30121	Locks	_	_	_	
105-25	30122-30124	in	_	_	_	
105-26	30125-30135	PostgreSQL	_	_	_	
105-27	30135-30136	:	_	_	_	
105-28	30137-30138	2	_	_	_	
105-29	30138-30139	.	_	_	_	
105-30	30140-30149	Row-level	_	_	_	
105-31	30150-30155	locks	_	_	_	

#Text=3.8k Locks in PostgreSQL: 1. Relation-level locks 3.1k Parallelism in PostgreSQL: treatment of trees and conscience 1.7k JSONPath in PostgreSQL: committing patches and selecting apartments
106-1	30156-30160	3.8k	_	_	_	
106-2	30161-30166	Locks	_	_	_	
106-3	30167-30169	in	_	_	_	
106-4	30170-30180	PostgreSQL	_	_	_	
106-5	30180-30181	:	_	_	_	
106-6	30182-30183	1	_	_	_	
106-7	30183-30184	.	_	_	_	
106-8	30185-30199	Relation-level	_	_	_	
106-9	30200-30205	locks	_	_	_	
106-10	30206-30210	3.1k	_	_	_	
106-11	30211-30222	Parallelism	_	_	_	
106-12	30223-30225	in	_	_	_	
106-13	30226-30236	PostgreSQL	_	_	_	
106-14	30236-30237	:	_	_	_	
106-15	30238-30247	treatment	_	_	_	
106-16	30248-30250	of	_	_	_	
106-17	30251-30256	trees	_	_	_	
106-18	30257-30260	and	_	_	_	
106-19	30261-30271	conscience	_	_	_	
106-20	30272-30276	1.7k	_	_	_	
106-21	30277-30285	JSONPath	_	_	_	
106-22	30286-30288	in	_	_	_	
106-23	30289-30299	PostgreSQL	_	_	_	
106-24	30299-30300	:	_	_	_	
106-25	30301-30311	committing	_	_	_	
106-26	30312-30319	patches	_	_	_	
106-27	30320-30323	and	_	_	_	
106-28	30324-30333	selecting	_	_	_	
106-29	30334-30344	apartments	_	_	_	

#Text=3.6k What is Baked in the Baker's Dozen? 916 WAL in PostgreSQL: 4. Setup and Tuning 3.1k WAL in PostgreSQL: 3. Checkpoint 2.7k
107-1	30345-30349	3.6k	_	_	_	
107-2	30350-30354	What	_	_	_	
107-3	30355-30357	is	_	_	_	
107-4	30358-30363	Baked	_	_	_	
107-5	30364-30366	in	_	_	_	
107-6	30367-30370	the	_	_	_	
107-7	30371-30378	Baker's	_	_	_	
107-8	30379-30384	Dozen	_	_	_	
107-9	30384-30385	?	_	_	_	
107-10	30386-30389	916	_	_	_	
107-11	30390-30393	WAL	_	_	_	
107-12	30394-30396	in	_	_	_	
107-13	30397-30407	PostgreSQL	_	_	_	
107-14	30407-30408	:	_	_	_	
107-15	30409-30410	4	_	_	_	
107-16	30410-30411	.	_	_	_	
107-17	30412-30417	Setup	_	_	_	
107-18	30418-30421	and	_	_	_	
107-19	30422-30428	Tuning	_	_	_	
107-20	30429-30433	3.1k	_	_	_	
107-21	30434-30437	WAL	_	_	_	
107-22	30438-30440	in	_	_	_	
107-23	30441-30451	PostgreSQL	_	_	_	
107-24	30451-30452	:	_	_	_	
107-25	30453-30454	3	_	_	_	
107-26	30454-30455	.	_	_	_	
107-27	30456-30466	Checkpoint	_	_	_	
107-28	30467-30471	2.7k	_	_	_	

#Text=WAL in PostgreSQL: 2. Write-Ahead Log 2.3k WAL in PostgreSQL: 1. Buffer Cache 3.4k On recursive queries 5.6k MVCC in PostgreSQL-8. Freezing 1.8k
108-1	30472-30475	WAL	_	_	_	
108-2	30476-30478	in	_	_	_	
108-3	30479-30489	PostgreSQL	_	_	_	
108-4	30489-30490	:	_	_	_	
108-5	30491-30492	2	_	_	_	
108-6	30492-30493	.	_	_	_	
108-7	30494-30505	Write-Ahead	_	_	_	
108-8	30506-30509	Log	_	_	_	
108-9	30510-30514	2.3k	_	_	_	
108-10	30515-30518	WAL	_	_	_	
108-11	30519-30521	in	_	_	_	
108-12	30522-30532	PostgreSQL	_	_	_	
108-13	30532-30533	:	_	_	_	
108-14	30534-30535	1	_	_	_	
108-15	30535-30536	.	_	_	_	
108-16	30537-30543	Buffer	_	_	_	
108-17	30544-30549	Cache	_	_	_	
108-18	30550-30554	3.4k	_	_	_	
108-19	30555-30557	On	_	_	_	
108-20	30558-30567	recursive	_	_	_	
108-21	30568-30575	queries	_	_	_	
108-22	30576-30580	5.6k	_	_	_	
108-23	30581-30585	MVCC	_	_	_	
108-24	30586-30588	in	_	_	_	
108-25	30589-30599	PostgreSQL	_	_	_	
108-26	30599-30600	-	_	_	_	
108-27	30600-30601	8	_	_	_	
108-28	30601-30602	.	_	_	_	
108-29	30603-30611	Freezing	_	_	_	
108-30	30612-30616	1.8k	_	_	_	

#Text=MVCC in PostgreSQL-7. Autovacuum 1.1k MVCC in PostgreSQL-6. Vacuum 1.4k MVCC in PostgreSQL-5. In-page vacuum and HOT updates 1.6k
109-1	30617-30621	MVCC	_	_	_	
109-2	30622-30624	in	_	_	_	
109-3	30625-30635	PostgreSQL	_	_	_	
109-4	30635-30636	-	_	_	_	
109-5	30636-30637	7	_	_	_	
109-6	30637-30638	.	_	_	_	
109-7	30639-30649	Autovacuum	_	_	_	
109-8	30650-30654	1.1k	_	_	_	
109-9	30655-30659	MVCC	_	_	_	
109-10	30660-30662	in	_	_	_	
109-11	30663-30673	PostgreSQL	_	_	_	
109-12	30673-30674	-	_	_	_	
109-13	30674-30675	6	_	_	_	
109-14	30675-30676	.	_	_	_	
109-15	30677-30683	Vacuum	_	_	_	
109-16	30684-30688	1.4k	_	_	_	
109-17	30689-30693	MVCC	_	_	_	
109-18	30694-30696	in	_	_	_	
109-19	30697-30707	PostgreSQL	_	_	_	
109-20	30707-30708	-	_	_	_	
109-21	30708-30709	5	_	_	_	
109-22	30709-30710	.	_	_	_	
109-23	30711-30718	In-page	_	_	_	
109-24	30719-30725	vacuum	_	_	_	
109-25	30726-30729	and	_	_	_	
109-26	30730-30733	HOT	_	_	_	
109-27	30734-30741	updates	_	_	_	
109-28	30742-30746	1.6k	_	_	_	

#Text=MVCC in PostgreSQL-4. Snapshots 2.6k MVCC in PostgreSQL-3. Row Versions 2.9k MVCC in PostgreSQL-2. Forks, files, pages 2.6k MVCC in PostgreSQL-1. Isolation
110-1	30747-30751	MVCC	_	_	_	
110-2	30752-30754	in	_	_	_	
110-3	30755-30765	PostgreSQL	_	_	_	
110-4	30765-30766	-	_	_	_	
110-5	30766-30767	4	_	_	_	
110-6	30767-30768	.	_	_	_	
110-7	30769-30778	Snapshots	_	_	_	
110-8	30779-30783	2.6k	_	_	_	
110-9	30784-30788	MVCC	_	_	_	
110-10	30789-30791	in	_	_	_	
110-11	30792-30802	PostgreSQL	_	_	_	
110-12	30802-30803	-	_	_	_	
110-13	30803-30804	3	_	_	_	
110-14	30804-30805	.	_	_	_	
110-15	30806-30809	Row	_	_	_	
110-16	30810-30818	Versions	_	_	_	
110-17	30819-30823	2.9k	_	_	_	
110-18	30824-30828	MVCC	_	_	_	
110-19	30829-30831	in	_	_	_	
110-20	30832-30842	PostgreSQL	_	_	_	
110-21	30842-30843	-	_	_	_	
110-22	30843-30844	2	_	_	_	
110-23	30844-30845	.	_	_	_	
110-24	30846-30851	Forks	_	_	_	
110-25	30851-30852	,	_	_	_	
110-26	30853-30858	files	_	_	_	
110-27	30858-30859	,	_	_	_	
110-28	30860-30865	pages	_	_	_	
110-29	30866-30870	2.6k	_	_	_	
110-30	30871-30875	MVCC	_	_	_	
110-31	30876-30878	in	_	_	_	
110-32	30879-30889	PostgreSQL	_	_	_	
110-33	30889-30890	-	_	_	_	
110-34	30890-30891	1	_	_	_	
110-35	30891-30892	.	_	_	_	
110-36	30893-30902	Isolation	_	_	_	

#Text=4.9k Top posts Day Week Month Various things in MetaPost &plus14 8.4k Compilation of math functions into Linq.Expression &plus4 2.6k
111-1	30903-30907	4.9k	_	_	_	
111-2	30908-30911	Top	_	_	_	
111-3	30912-30917	posts	_	_	_	
111-4	30918-30921	Day	_	_	_	
111-5	30922-30926	Week	_	_	_	
111-6	30927-30932	Month	_	_	_	
111-7	30933-30940	Various	_	_	_	
111-8	30941-30947	things	_	_	_	
111-9	30948-30950	in	_	_	_	
111-10	30951-30959	MetaPost	_	_	_	
111-11	30960-30961	&	_	_	_	
111-12	30961-30967	plus14	_	_	_	
111-13	30968-30972	8.4k	_	_	_	
111-14	30973-30984	Compilation	_	_	_	
111-15	30985-30987	of	_	_	_	
111-16	30988-30992	math	_	_	_	
111-17	30993-31002	functions	_	_	_	
111-18	31003-31007	into	_	_	_	
111-19	31008-31023	Linq.Expression	_	_	_	
111-20	31024-31025	&	_	_	_	
111-21	31025-31030	plus4	_	_	_	
111-22	31031-31035	2.6k	_	_	_	

#Text=Audio over Bluetooth: most detailed information about profiles, codecs, and devices &plus22 175k Algorithms in Go: Bit Manipulation &plus2 294 11 Kubernetes implementation mistakes – and how to avoid them &plus10 934 Go Quiz &plus3
112-1	31036-31041	Audio	_	_	_	
112-2	31042-31046	over	_	_	_	
112-3	31047-31056	Bluetooth	_	_	_	
112-4	31056-31057	:	_	_	_	
112-5	31058-31062	most	_	_	_	
112-6	31063-31071	detailed	_	_	_	
112-7	31072-31083	information	_	_	_	
112-8	31084-31089	about	_	_	_	
112-9	31090-31098	profiles	_	_	_	
112-10	31098-31099	,	_	_	_	
112-11	31100-31106	codecs	_	_	_	
112-12	31106-31107	,	_	_	_	
112-13	31108-31111	and	_	_	_	
112-14	31112-31119	devices	_	_	_	
112-15	31120-31121	&	_	_	_	
112-16	31121-31127	plus22	_	_	_	
112-17	31128-31132	175k	_	_	_	
112-18	31133-31143	Algorithms	_	_	_	
112-19	31144-31146	in	_	_	_	
112-20	31147-31149	Go	_	_	_	
112-21	31149-31150	:	_	_	_	
112-22	31151-31154	Bit	_	_	_	
112-23	31155-31167	Manipulation	_	_	_	
112-24	31168-31169	&	_	_	_	
112-25	31169-31174	plus2	_	_	_	
112-26	31175-31178	294	_	_	_	
112-27	31179-31181	11	_	_	_	
112-28	31182-31192	Kubernetes	_	_	_	
112-29	31193-31207	implementation	_	_	_	
112-30	31208-31216	mistakes	_	_	_	
112-31	31217-31218	–	_	_	_	
112-32	31219-31222	and	_	_	_	
112-33	31223-31226	how	_	_	_	
112-34	31227-31229	to	_	_	_	
112-35	31230-31235	avoid	_	_	_	
112-36	31236-31240	them	_	_	_	
112-37	31241-31242	&	_	_	_	
112-38	31242-31248	plus10	_	_	_	
112-39	31249-31252	934	_	_	_	
112-40	31253-31255	Go	_	_	_	
112-41	31256-31260	Quiz	_	_	_	
112-42	31261-31262	&	_	_	_	
112-43	31262-31267	plus3	_	_	_	

#Text=679 Pitfalls in String Pool, or Another Reason to Think Twice Before Interning Instances of String Class in C# &plus1 327 Build (CI/CD) of non-JVM projects using gradle/kotlin &plus1
113-1	31268-31271	679	_	_	_	
113-2	31272-31280	Pitfalls	_	_	_	
113-3	31281-31283	in	_	_	_	
113-4	31284-31290	String	_	_	_	
113-5	31291-31295	Pool	_	_	_	
113-6	31295-31296	,	_	_	_	
113-7	31297-31299	or	_	_	_	
113-8	31300-31307	Another	_	_	_	
113-9	31308-31314	Reason	_	_	_	
113-10	31315-31317	to	_	_	_	
113-11	31318-31323	Think	_	_	_	
113-12	31324-31329	Twice	_	_	_	
113-13	31330-31336	Before	_	_	_	
113-14	31337-31346	Interning	_	_	_	
113-15	31347-31356	Instances	_	_	_	
113-16	31357-31359	of	_	_	_	
113-17	31360-31366	String	_	_	_	
113-18	31367-31372	Class	_	_	_	
113-19	31373-31375	in	_	_	_	
113-20	31376-31377	C	_	_	_	
113-21	31377-31378	#	_	_	_	
113-22	31379-31380	&	_	_	_	
113-23	31380-31385	plus1	_	_	_	
113-24	31386-31389	327	_	_	_	
113-25	31390-31395	Build	_	_	_	
113-26	31396-31397	(	_	_	_	
113-27	31397-31399	CI	_	_	_	
113-28	31399-31400	/	_	_	_	
113-29	31400-31402	CD	_	_	_	
113-30	31402-31403	)	_	_	_	
113-31	31404-31406	of	_	_	_	
113-32	31407-31414	non-JVM	_	_	_	
113-33	31415-31423	projects	_	_	_	
113-34	31424-31429	using	_	_	_	
113-35	31430-31436	gradle	_	_	_	
113-36	31436-31437	/	_	_	_	
113-37	31437-31443	kotlin	_	_	_	
113-38	31444-31445	&	_	_	_	
113-39	31445-31450	plus1	_	_	_	

#Text=315 Multiple violations of policies in RMS open letter &plus16 2.7k Compilation of math functions into Linq.Expression &plus4 2.6k High-Quality Text-to-Speech Made Accessible, Simple and Fast
114-1	31451-31454	315	_	_	_	
114-2	31455-31463	Multiple	_	_	_	
114-3	31464-31474	violations	_	_	_	
114-4	31475-31477	of	_	_	_	
114-5	31478-31486	policies	_	_	_	
114-6	31487-31489	in	_	_	_	
114-7	31490-31493	RMS	_	_	_	
114-8	31494-31498	open	_	_	_	
114-9	31499-31505	letter	_	_	_	
114-10	31506-31507	&	_	_	_	
114-11	31507-31513	plus16	_	_	_	
114-12	31514-31518	2.7k	_	_	_	
114-13	31519-31530	Compilation	_	_	_	
114-14	31531-31533	of	_	_	_	
114-15	31534-31538	math	_	_	_	
114-16	31539-31548	functions	_	_	_	
114-17	31549-31553	into	_	_	_	
114-18	31554-31569	Linq.Expression	_	_	_	
114-19	31570-31571	&	_	_	_	
114-20	31571-31576	plus4	_	_	_	
114-21	31577-31581	2.6k	_	_	_	
114-22	31582-31594	High-Quality	_	_	_	
114-23	31595-31609	Text-to-Speech	_	_	_	
114-24	31610-31614	Made	_	_	_	
114-25	31615-31625	Accessible	_	_	_	
114-26	31625-31626	,	_	_	_	
114-27	31627-31633	Simple	_	_	_	
114-28	31634-31637	and	_	_	_	
114-29	31638-31642	Fast	_	_	_	

#Text=&plus5 1.6k How to Start Reverse Engineering in 2021 &plus3 1.6k Your account Log in Sign up Sections Posts Hubs Companies Users Sandbox
115-1	31643-31644	&	_	_	_	
115-2	31644-31649	plus5	_	_	_	
115-3	31650-31654	1.6k	_	_	_	
115-4	31655-31658	How	_	_	_	
115-5	31659-31661	to	_	_	_	
115-6	31662-31667	Start	_	_	_	
115-7	31668-31675	Reverse	_	_	_	
115-8	31676-31687	Engineering	_	_	_	
115-9	31688-31690	in	_	_	_	
115-10	31690-31691	 	_	_	_	
115-11	31691-31695	2021	_	_	_	
115-12	31696-31697	&	_	_	_	
115-13	31697-31702	plus3	_	_	_	
115-14	31703-31707	1.6k	_	_	_	
115-15	31708-31712	Your	_	_	_	
115-16	31713-31720	account	_	_	_	
115-17	31721-31724	Log	_	_	_	
115-18	31725-31727	in	_	_	_	
115-19	31728-31732	Sign	_	_	_	
115-20	31733-31735	up	_	_	_	
115-21	31736-31744	Sections	_	_	_	
115-22	31745-31750	Posts	_	_	_	
115-23	31751-31755	Hubs	_	_	_	
115-24	31756-31765	Companies	_	_	_	
115-25	31766-31771	Users	_	_	_	
115-26	31772-31779	Sandbox	_	_	_	

#Text=Info How it works For Authors For Companies Documents Agreement Terms of service Services Ads Subscription plans Content Seminars Megaprojects © 2006 – 2021 «Habr»
116-1	31780-31784	Info	_	_	_	
116-2	31785-31788	How	_	_	_	
116-3	31789-31791	it	_	_	_	
116-4	31792-31797	works	_	_	_	
116-5	31798-31801	For	_	_	_	
116-6	31802-31809	Authors	_	_	_	
116-7	31810-31813	For	_	_	_	
116-8	31814-31823	Companies	_	_	_	
116-9	31824-31833	Documents	_	_	_	
116-10	31834-31843	Agreement	_	_	_	
116-11	31844-31849	Terms	_	_	_	
116-12	31850-31852	of	_	_	_	
116-13	31853-31860	service	_	_	_	
116-14	31861-31869	Services	_	_	_	
116-15	31870-31873	Ads	_	_	_	
116-16	31874-31886	Subscription	_	_	_	
116-17	31887-31892	plans	_	_	_	
116-18	31893-31900	Content	_	_	_	
116-19	31901-31909	Seminars	_	_	_	
116-20	31910-31922	Megaprojects	_	_	_	
116-21	31923-31924	©	_	_	_	
116-22	31925-31929	2006	_	_	_	
116-23	31930-31931	–	_	_	_	
116-24	31932-31936	2021	_	_	_	
116-25	31937-31938	«	_	_	_	
116-26	31938-31942	Habr	_	_	_	
116-27	31942-31943	»	_	_	_	
