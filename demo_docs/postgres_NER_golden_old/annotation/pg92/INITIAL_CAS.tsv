#FORMAT=WebAnno TSV 3.3


#Text=WAL in PostgreSQL: 4. Setup and Tuning / Postgres Professional corporate blog / Habr How to become an author All streams Development Administrating Design Management Marketing PopSci
1-1	0-3	WAL	
1-2	4-6	in	
1-3	7-17	PostgreSQL	
1-4	17-18	:	
1-5	19-20	4	
1-6	20-21	.	
1-7	22-27	Setup	
1-8	28-31	and	
1-9	32-38	Tuning	
1-10	39-40	/	
1-11	41-49	Postgres	
1-12	50-62	Professional	
1-13	63-72	corporate	
1-14	73-77	blog	
1-15	78-79	/	
1-16	80-84	Habr	
1-17	85-88	How	
1-18	89-91	to	
1-19	92-98	become	
1-20	99-101	an	
1-21	102-108	author	
1-22	109-112	All	
1-23	113-120	streams	
1-24	121-132	Development	
1-25	133-147	Administrating	
1-26	148-154	Design	
1-27	155-165	Management	
1-28	166-175	Marketing	
1-29	176-182	PopSci	

#Text=Log in Sign up 135.40 Rating Postgres Professional Разработчик СУБД Postgres Pro erogov April 16, 2020 at 03:05 PM
2-1	183-186	Log	
2-2	187-189	in	
2-3	190-194	Sign	
2-4	195-197	up	
2-5	198-204	135.40	
2-6	205-211	Rating	
2-7	212-220	Postgres	
2-8	221-233	Professional	
2-9	234-245	Разработчик	
2-10	246-250	СУБД	
2-11	251-259	Postgres	
2-12	260-263	Pro	
2-13	264-270	erogov	
2-14	271-276	April	
2-15	277-279	16	
2-16	279-280	,	
2-17	281-285	2020	
2-18	286-288	at	
2-19	289-291	03	
2-20	291-292	:	
2-21	292-294	05	
2-22	295-297	PM	

#Text=WAL in PostgreSQL: 4. Setup and Tuning Original author: Egor Rogov Postgres Professional corporate blog, PostgreSQL, SQL Translation
3-1	298-301	WAL	
3-2	302-304	in	
3-3	305-315	PostgreSQL	
3-4	315-316	:	
3-5	317-318	4	
3-6	318-319	.	
3-7	320-325	Setup	
3-8	326-329	and	
3-9	330-336	Tuning	
3-10	337-345	Original	
3-11	346-352	author	
3-12	352-353	:	
3-13	354-358	Egor	
3-14	359-364	Rogov	
3-15	365-373	Postgres	
3-16	374-386	Professional	
3-17	387-396	corporate	
3-18	397-401	blog	
3-19	401-402	,	
3-20	403-413	PostgreSQL	
3-21	413-414	,	
3-22	415-418	SQL	
3-23	419-430	Translation	

#Text=So, we got acquainted with the structure of the buffer cache and in this context concluded that if all the RAM contents got lost due to failure, the write-ahead log (WAL) was required to recover. The size of the necessary WAL files and the recovery time are limited thanks to the checkpoint performed from time to time. In the previous articles we already reviewed quite a few important settings that anyway relate to WAL. In this article (being the last in this series) we will discuss problems of WAL setup that are unaddressed yet: WAL levels and their purpose, as well as the reliability and performance of write-ahead logging.
4-1	431-433	So	
4-2	433-434	,	
4-3	435-437	we	
4-4	438-441	got	
4-5	442-452	acquainted	
4-6	453-457	with	
4-7	458-461	the	
4-8	462-471	structure	
4-9	472-474	of	
4-10	475-478	the	
4-11	479-485	buffer	
4-12	486-491	cache	
4-13	492-495	and	
4-14	496-498	in	
4-15	499-503	this	
4-16	504-511	context	
4-17	512-521	concluded	
4-18	522-526	that	
4-19	527-529	if	
4-20	530-533	all	
4-21	534-537	the	
4-22	538-541	RAM	
4-23	542-550	contents	
4-24	551-554	got	
4-25	555-559	lost	
4-26	560-563	due	
4-27	564-566	to	
4-28	567-574	failure	
4-29	574-575	,	
4-30	576-579	the	
4-31	580-591	write-ahead	
4-32	592-595	log	
4-33	596-597	(	
4-34	597-600	WAL	
4-35	600-601	)	
4-36	602-605	was	
4-37	606-614	required	
4-38	615-617	to	
4-39	618-625	recover	
4-40	625-626	.	
4-41	627-630	The	
4-42	631-635	size	
4-43	636-638	of	
4-44	639-642	the	
4-45	643-652	necessary	
4-46	653-656	WAL	
4-47	657-662	files	
4-48	663-666	and	
4-49	667-670	the	
4-50	671-679	recovery	
4-51	680-684	time	
4-52	685-688	are	
4-53	689-696	limited	
4-54	697-703	thanks	
4-55	704-706	to	
4-56	707-710	the	
4-57	711-721	checkpoint	
4-58	722-731	performed	
4-59	732-736	from	
4-60	737-741	time	
4-61	742-744	to	
4-62	745-749	time	
4-63	749-750	.	
4-64	751-753	In	
4-65	754-757	the	
4-66	758-766	previous	
4-67	767-775	articles	
4-68	776-778	we	
4-69	779-786	already	
4-70	787-795	reviewed	
4-71	796-801	quite	
4-72	802-803	a	
4-73	804-807	few	
4-74	808-817	important	
4-75	818-826	settings	
4-76	827-831	that	
4-77	832-838	anyway	
4-78	839-845	relate	
4-79	846-848	to	
4-80	849-852	WAL	
4-81	852-853	.	
4-82	854-856	In	
4-83	857-861	this	
4-84	862-869	article	
4-85	870-871	(	
4-86	871-876	being	
4-87	877-880	the	
4-88	881-885	last	
4-89	886-888	in	
4-90	889-893	this	
4-91	894-900	series	
4-92	900-901	)	
4-93	902-904	we	
4-94	905-909	will	
4-95	910-917	discuss	
4-96	918-926	problems	
4-97	927-929	of	
4-98	930-933	WAL	
4-99	934-939	setup	
4-100	940-944	that	
4-101	945-948	are	
4-102	949-960	unaddressed	
4-103	961-964	yet	
4-104	964-965	:	
4-105	966-969	WAL	
4-106	970-976	levels	
4-107	977-980	and	
4-108	981-986	their	
4-109	987-994	purpose	
4-110	994-995	,	
4-111	996-998	as	
4-112	999-1003	well	
4-113	1004-1006	as	
4-114	1007-1010	the	
4-115	1011-1022	reliability	
4-116	1023-1026	and	
4-117	1027-1038	performance	
4-118	1039-1041	of	
4-119	1042-1053	write-ahead	
4-120	1054-1061	logging	
4-121	1061-1062	.	

#Text=WAL levels The main WAL task is to ensure recovery after a failure. But once we have to maintain the log anyway, we can also adapt it to other tasks by adding some more information to it. There are several logging levels. The wal_level parameter specifies the level, and each next level includes everything that gets into WAL of the preceding level plus something new.
5-1	1063-1066	WAL	
5-2	1067-1073	levels	
5-3	1074-1077	The	
5-4	1078-1082	main	
5-5	1083-1086	WAL	
5-6	1087-1091	task	
5-7	1092-1094	is	
5-8	1095-1097	to	
5-9	1098-1104	ensure	
5-10	1105-1113	recovery	
5-11	1114-1119	after	
5-12	1120-1121	a	
5-13	1122-1129	failure	
5-14	1129-1130	.	
5-15	1131-1134	But	
5-16	1135-1139	once	
5-17	1140-1142	we	
5-18	1143-1147	have	
5-19	1148-1150	to	
5-20	1151-1159	maintain	
5-21	1160-1163	the	
5-22	1164-1167	log	
5-23	1168-1174	anyway	
5-24	1174-1175	,	
5-25	1176-1178	we	
5-26	1179-1182	can	
5-27	1183-1187	also	
5-28	1188-1193	adapt	
5-29	1194-1196	it	
5-30	1197-1199	to	
5-31	1200-1205	other	
5-32	1206-1211	tasks	
5-33	1212-1214	by	
5-34	1215-1221	adding	
5-35	1222-1226	some	
5-36	1227-1231	more	
5-37	1232-1243	information	
5-38	1244-1246	to	
5-39	1247-1249	it	
5-40	1249-1250	.	
5-41	1251-1256	There	
5-42	1257-1260	are	
5-43	1261-1268	several	
5-44	1269-1276	logging	
5-45	1277-1283	levels	
5-46	1283-1284	.	
5-47	1285-1288	The	
5-48	1289-1298	wal_level	
5-49	1299-1308	parameter	
5-50	1309-1318	specifies	
5-51	1319-1322	the	
5-52	1323-1328	level	
5-53	1328-1329	,	
5-54	1330-1333	and	
5-55	1334-1338	each	
5-56	1339-1343	next	
5-57	1344-1349	level	
5-58	1350-1358	includes	
5-59	1359-1369	everything	
5-60	1370-1374	that	
5-61	1375-1379	gets	
5-62	1380-1384	into	
5-63	1385-1388	WAL	
5-64	1389-1391	of	
5-65	1392-1395	the	
5-66	1396-1405	preceding	
5-67	1406-1411	level	
5-68	1412-1416	plus	
5-69	1417-1426	something	
5-70	1427-1430	new	
5-71	1430-1431	.	

#Text=Minimal
6-1	1432-1439	Minimal	

#Text=The minimum possible level is set by the value of wal_level = minimal and ensures only recovery after a failure. To save space, the operations related to bulk data processing (such as CREATE TABLE AS SELECT or CREATE INDEX) are not WAL-logged. Instead, the data needed are immediately written to disk, and a new object is added to the system catalog and becomes visible at the transaction commit. If a failure occurs while the operation is performed, the data that are already written remain invisible and do not violate the consistency rules. And if a failure occurs after completion of the operation, everything needed is already on disk and does not need logging. Let's take a look. First we'll set the necessary level (to this end, we will also need to change another parameter — max_wal_senders). => ALTER SYSTEM SET wal_level = minimal;
7-1	1440-1443	The	
7-2	1444-1451	minimum	
7-3	1452-1460	possible	
7-4	1461-1466	level	
7-5	1467-1469	is	
7-6	1470-1473	set	
7-7	1474-1476	by	
7-8	1477-1480	the	
7-9	1481-1486	value	
7-10	1487-1489	of	
7-11	1490-1499	wal_level	
7-12	1500-1501	=	
7-13	1502-1509	minimal	
7-14	1510-1513	and	
7-15	1514-1521	ensures	
7-16	1522-1526	only	
7-17	1527-1535	recovery	
7-18	1536-1541	after	
7-19	1542-1543	a	
7-20	1544-1551	failure	
7-21	1551-1552	.	
7-22	1553-1555	To	
7-23	1556-1560	save	
7-24	1561-1566	space	
7-25	1566-1567	,	
7-26	1568-1571	the	
7-27	1572-1582	operations	
7-28	1583-1590	related	
7-29	1591-1593	to	
7-30	1594-1598	bulk	
7-31	1599-1603	data	
7-32	1604-1614	processing	
7-33	1615-1616	(	
7-34	1616-1620	such	
7-35	1621-1623	as	
7-36	1624-1630	CREATE	
7-37	1631-1636	TABLE	
7-38	1637-1639	AS	
7-39	1640-1646	SELECT	
7-40	1647-1649	or	
7-41	1650-1656	CREATE	
7-42	1657-1662	INDEX	
7-43	1662-1663	)	
7-44	1664-1667	are	
7-45	1668-1671	not	
7-46	1672-1682	WAL-logged	
7-47	1682-1683	.	
7-48	1684-1691	Instead	
7-49	1691-1692	,	
7-50	1693-1696	the	
7-51	1697-1701	data	
7-52	1702-1708	needed	
7-53	1709-1712	are	
7-54	1713-1724	immediately	
7-55	1725-1732	written	
7-56	1733-1735	to	
7-57	1736-1740	disk	
7-58	1740-1741	,	
7-59	1742-1745	and	
7-60	1746-1747	a	
7-61	1748-1751	new	
7-62	1752-1758	object	
7-63	1759-1761	is	
7-64	1762-1767	added	
7-65	1768-1770	to	
7-66	1771-1774	the	
7-67	1775-1781	system	
7-68	1782-1789	catalog	
7-69	1790-1793	and	
7-70	1794-1801	becomes	
7-71	1802-1809	visible	
7-72	1810-1812	at	
7-73	1813-1816	the	
7-74	1817-1828	transaction	
7-75	1829-1835	commit	
7-76	1835-1836	.	
7-77	1837-1839	If	
7-78	1840-1841	a	
7-79	1842-1849	failure	
7-80	1850-1856	occurs	
7-81	1857-1862	while	
7-82	1863-1866	the	
7-83	1867-1876	operation	
7-84	1877-1879	is	
7-85	1880-1889	performed	
7-86	1889-1890	,	
7-87	1891-1894	the	
7-88	1895-1899	data	
7-89	1900-1904	that	
7-90	1905-1908	are	
7-91	1909-1916	already	
7-92	1917-1924	written	
7-93	1925-1931	remain	
7-94	1932-1941	invisible	
7-95	1942-1945	and	
7-96	1946-1948	do	
7-97	1949-1952	not	
7-98	1953-1960	violate	
7-99	1961-1964	the	
7-100	1965-1976	consistency	
7-101	1977-1982	rules	
7-102	1982-1983	.	
7-103	1984-1987	And	
7-104	1988-1990	if	
7-105	1991-1992	a	
7-106	1993-2000	failure	
7-107	2001-2007	occurs	
7-108	2008-2013	after	
7-109	2014-2024	completion	
7-110	2025-2027	of	
7-111	2028-2031	the	
7-112	2032-2041	operation	
7-113	2041-2042	,	
7-114	2043-2053	everything	
7-115	2054-2060	needed	
7-116	2061-2063	is	
7-117	2064-2071	already	
7-118	2072-2074	on	
7-119	2075-2079	disk	
7-120	2080-2083	and	
7-121	2084-2088	does	
7-122	2089-2092	not	
7-123	2093-2097	need	
7-124	2098-2105	logging	
7-125	2105-2106	.	
7-126	2107-2112	Let's	
7-127	2113-2117	take	
7-128	2118-2119	a	
7-129	2120-2124	look	
7-130	2124-2125	.	
7-131	2126-2131	First	
7-132	2132-2137	we'll	
7-133	2138-2141	set	
7-134	2142-2145	the	
7-135	2146-2155	necessary	
7-136	2156-2161	level	
7-137	2162-2163	(	
7-138	2163-2165	to	
7-139	2166-2170	this	
7-140	2171-2174	end	
7-141	2174-2175	,	
7-142	2176-2178	we	
7-143	2179-2183	will	
7-144	2184-2188	also	
7-145	2189-2193	need	
7-146	2194-2196	to	
7-147	2197-2203	change	
7-148	2204-2211	another	
7-149	2212-2221	parameter	
7-150	2221-2222	 	
7-151	2222-2223	—	
7-152	2224-2239	max_wal_senders	
7-153	2239-2240	)	
7-154	2240-2241	.	
7-155	2242-2243	=	
7-156	2243-2244	>	
7-157	2245-2250	ALTER	
7-158	2251-2257	SYSTEM	
7-159	2258-2261	SET	
7-160	2262-2271	wal_level	
7-161	2272-2273	=	
7-162	2274-2281	minimal	
7-163	2281-2282	;	

#Text==> ALTER SYSTEM SET max_wal_senders = 0; student$ sudo pg_ctlcluster 11 main restart Note that the change of the level requires restarting the server. Let's remember the current WAL location: => SELECT pg_current_wal_insert_lsn();
8-1	2283-2284	=	
8-2	2284-2285	>	
8-3	2286-2291	ALTER	
8-4	2292-2298	SYSTEM	
8-5	2299-2302	SET	
8-6	2303-2318	max_wal_senders	
8-7	2319-2320	=	
8-8	2321-2322	0	
8-9	2322-2323	;	
8-10	2324-2331	student	
8-11	2331-2332	$	
8-12	2333-2337	sudo	
8-13	2338-2351	pg_ctlcluster	
8-14	2352-2354	11	
8-15	2355-2359	main	
8-16	2360-2367	restart	
8-17	2368-2372	Note	
8-18	2373-2377	that	
8-19	2378-2381	the	
8-20	2382-2388	change	
8-21	2389-2391	of	
8-22	2392-2395	the	
8-23	2396-2401	level	
8-24	2402-2410	requires	
8-25	2411-2421	restarting	
8-26	2422-2425	the	
8-27	2426-2432	server	
8-28	2432-2433	.	
8-29	2434-2439	Let's	
8-30	2440-2448	remember	
8-31	2449-2452	the	
8-32	2453-2460	current	
8-33	2461-2464	WAL	
8-34	2465-2473	location	
8-35	2473-2474	:	
8-36	2475-2476	=	
8-37	2476-2477	>	
8-38	2478-2484	SELECT	
8-39	2485-2510	pg_current_wal_insert_lsn	
8-40	2510-2511	(	
8-41	2511-2512	)	
8-42	2512-2513	;	

#Text=pg_current_wal_insert_lsn --------------------------- 0/353927BC (1 row)
9-1	2514-2539	pg_current_wal_insert_lsn	
9-2	2540-2541	-	
9-3	2541-2542	-	
9-4	2542-2543	-	
9-5	2543-2544	-	
9-6	2544-2545	-	
9-7	2545-2546	-	
9-8	2546-2547	-	
9-9	2547-2548	-	
9-10	2548-2549	-	
9-11	2549-2550	-	
9-12	2550-2551	-	
9-13	2551-2552	-	
9-14	2552-2553	-	
9-15	2553-2554	-	
9-16	2554-2555	-	
9-17	2555-2556	-	
9-18	2556-2557	-	
9-19	2557-2558	-	
9-20	2558-2559	-	
9-21	2559-2560	-	
9-22	2560-2561	-	
9-23	2561-2562	-	
9-24	2562-2563	-	
9-25	2563-2564	-	
9-26	2564-2565	-	
9-27	2565-2566	-	
9-28	2566-2567	-	
9-29	2568-2569	0	
9-30	2569-2570	/	
9-31	2570-2578	353927BC	
9-32	2579-2580	(	
9-33	2580-2581	1	
9-34	2582-2585	row	
9-35	2585-2586	)	

#Text=Now let's perform creation of a table (CREATE TABLE AS SELECT) and remember the WAL location again. The amount of data retrieved by the SELECT operator does not matter at all in this case, so one row is enough. => CREATE TABLE wallevel AS SELECT 1 AS n; => SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn
10-1	2587-2590	Now	
10-2	2591-2596	let's	
10-3	2597-2604	perform	
10-4	2605-2613	creation	
10-5	2614-2616	of	
10-6	2617-2618	a	
10-7	2619-2624	table	
10-8	2625-2626	(	
10-9	2626-2632	CREATE	
10-10	2633-2638	TABLE	
10-11	2639-2641	AS	
10-12	2642-2648	SELECT	
10-13	2648-2649	)	
10-14	2650-2653	and	
10-15	2654-2662	remember	
10-16	2663-2666	the	
10-17	2667-2670	WAL	
10-18	2671-2679	location	
10-19	2680-2685	again	
10-20	2685-2686	.	
10-21	2687-2690	The	
10-22	2691-2697	amount	
10-23	2698-2700	of	
10-24	2701-2705	data	
10-25	2706-2715	retrieved	
10-26	2716-2718	by	
10-27	2719-2722	the	
10-28	2723-2729	SELECT	
10-29	2730-2738	operator	
10-30	2739-2743	does	
10-31	2744-2747	not	
10-32	2748-2754	matter	
10-33	2755-2757	at	
10-34	2758-2761	all	
10-35	2762-2764	in	
10-36	2765-2769	this	
10-37	2770-2774	case	
10-38	2774-2775	,	
10-39	2776-2778	so	
10-40	2779-2782	one	
10-41	2783-2786	row	
10-42	2787-2789	is	
10-43	2790-2796	enough	
10-44	2796-2797	.	
10-45	2798-2799	=	
10-46	2799-2800	>	
10-47	2801-2807	CREATE	
10-48	2808-2813	TABLE	
10-49	2814-2822	wallevel	
10-50	2823-2825	AS	
10-51	2826-2832	SELECT	
10-52	2833-2834	1	
10-53	2835-2837	AS	
10-54	2838-2839	n	
10-55	2839-2840	;	
10-56	2841-2842	=	
10-57	2842-2843	>	
10-58	2844-2850	SELECT	
10-59	2851-2876	pg_current_wal_insert_lsn	
10-60	2876-2877	(	
10-61	2877-2878	)	
10-62	2878-2879	;	
10-63	2880-2905	pg_current_wal_insert_lsn	

#Text=--------------------------- 0/353A7DFC (1 row) Let's look at WAL records using the familiar pg_waldump utility.
11-1	2906-2907	-	
11-2	2907-2908	-	
11-3	2908-2909	-	
11-4	2909-2910	-	
11-5	2910-2911	-	
11-6	2911-2912	-	
11-7	2912-2913	-	
11-8	2913-2914	-	
11-9	2914-2915	-	
11-10	2915-2916	-	
11-11	2916-2917	-	
11-12	2917-2918	-	
11-13	2918-2919	-	
11-14	2919-2920	-	
11-15	2920-2921	-	
11-16	2921-2922	-	
11-17	2922-2923	-	
11-18	2923-2924	-	
11-19	2924-2925	-	
11-20	2925-2926	-	
11-21	2926-2927	-	
11-22	2927-2928	-	
11-23	2928-2929	-	
11-24	2929-2930	-	
11-25	2930-2931	-	
11-26	2931-2932	-	
11-27	2932-2933	-	
11-28	2934-2935	0	
11-29	2935-2936	/	
11-30	2936-2944	353A7DFC	
11-31	2945-2946	(	
11-32	2946-2947	1	
11-33	2948-2951	row	
11-34	2951-2952	)	
11-35	2953-2958	Let's	
11-36	2959-2963	look	
11-37	2964-2966	at	
11-38	2967-2970	WAL	
11-39	2971-2978	records	
11-40	2979-2984	using	
11-41	2985-2988	the	
11-42	2989-2997	familiar	
11-43	2998-3008	pg_waldump	
11-44	3009-3016	utility	
11-45	3016-3017	.	

#Text=postgres$ /usr/lib/postgresql/11/bin/pg_waldump -p /var/lib/postgresql/11/main/pg_wal -s 0/353927BC -e 0/353A7DFC Certainly, some details can differ from one launch to another, but in this case we get the following. The record of the Heap2 manager relates to vacuuming, here it is in-page vacuum of a table from the system catalog (system objects are easily distinguished with a naked eye by a small number in rel):
12-1	3018-3026	postgres	
12-2	3026-3027	$	
12-3	3028-3029	/	
12-4	3029-3032	usr	
12-5	3032-3033	/	
12-6	3033-3036	lib	
12-7	3036-3037	/	
12-8	3037-3047	postgresql	
12-9	3047-3048	/	
12-10	3048-3050	11	
12-11	3050-3051	/	
12-12	3051-3054	bin	
12-13	3054-3055	/	
12-14	3055-3065	pg_waldump	
12-15	3066-3067	-	
12-16	3067-3068	p	
12-17	3069-3070	/	
12-18	3070-3073	var	
12-19	3073-3074	/	
12-20	3074-3077	lib	
12-21	3077-3078	/	
12-22	3078-3088	postgresql	
12-23	3088-3089	/	
12-24	3089-3091	11	
12-25	3091-3092	/	
12-26	3092-3096	main	
12-27	3096-3097	/	
12-28	3097-3103	pg_wal	
12-29	3104-3105	-	
12-30	3105-3106	s	
12-31	3107-3108	0	
12-32	3108-3109	/	
12-33	3109-3117	353927BC	
12-34	3118-3119	-	
12-35	3119-3120	e	
12-36	3121-3122	0	
12-37	3122-3123	/	
12-38	3123-3131	353A7DFC	
12-39	3132-3141	Certainly	
12-40	3141-3142	,	
12-41	3143-3147	some	
12-42	3148-3155	details	
12-43	3156-3159	can	
12-44	3160-3166	differ	
12-45	3167-3171	from	
12-46	3172-3175	one	
12-47	3176-3182	launch	
12-48	3183-3185	to	
12-49	3186-3193	another	
12-50	3193-3194	,	
12-51	3195-3198	but	
12-52	3199-3201	in	
12-53	3202-3206	this	
12-54	3207-3211	case	
12-55	3212-3214	we	
12-56	3215-3218	get	
12-57	3219-3222	the	
12-58	3223-3232	following	
12-59	3232-3233	.	
12-60	3234-3237	The	
12-61	3238-3244	record	
12-62	3245-3247	of	
12-63	3248-3251	the	
12-64	3252-3257	Heap2	
12-65	3258-3265	manager	
12-66	3266-3273	relates	
12-67	3274-3276	to	
12-68	3277-3286	vacuuming	
12-69	3286-3287	,	
12-70	3288-3292	here	
12-71	3293-3295	it	
12-72	3296-3298	is	
12-73	3299-3306	in-page	
12-74	3307-3313	vacuum	
12-75	3314-3316	of	
12-76	3317-3318	a	
12-77	3319-3324	table	
12-78	3325-3329	from	
12-79	3330-3333	the	
12-80	3334-3340	system	
12-81	3341-3348	catalog	
12-82	3349-3350	(	
12-83	3350-3356	system	
12-84	3357-3364	objects	
12-85	3365-3368	are	
12-86	3369-3375	easily	
12-87	3376-3389	distinguished	
12-88	3390-3394	with	
12-89	3395-3396	a	
12-90	3397-3402	naked	
12-91	3403-3406	eye	
12-92	3407-3409	by	
12-93	3410-3411	a	
12-94	3412-3417	small	
12-95	3418-3424	number	
12-96	3425-3427	in	
12-97	3428-3431	rel	
12-98	3431-3432	)	
12-99	3432-3433	:	

#Text=rmgr: Heap2 len (rec/tot): 59/ 7587, tx: 0, lsn: 0/353927BC, prev 0/35392788, desc: CLEAN remxid 101126, blkref #0: rel 1663/16386/1247 blk 8 FPW
13-1	3434-3438	rmgr	
13-2	3438-3439	:	
13-3	3440-3445	Heap2	
13-4	3446-3449	len	
13-5	3450-3451	(	
13-6	3451-3454	rec	
13-7	3454-3455	/	
13-8	3455-3458	tot	
13-9	3458-3459	)	
13-10	3459-3460	:	
13-11	3461-3463	59	
13-12	3463-3464	/	
13-13	3465-3469	7587	
13-14	3469-3470	,	
13-15	3471-3473	tx	
13-16	3473-3474	:	
13-17	3475-3476	0	
13-18	3476-3477	,	
13-19	3478-3481	lsn	
13-20	3481-3482	:	
13-21	3483-3484	0	
13-22	3484-3485	/	
13-23	3485-3493	353927BC	
13-24	3493-3494	,	
13-25	3495-3499	prev	
13-26	3500-3501	0	
13-27	3501-3502	/	
13-28	3502-3510	35392788	
13-29	3510-3511	,	
13-30	3512-3516	desc	
13-31	3516-3517	:	
13-32	3518-3523	CLEAN	
13-33	3524-3530	remxid	
13-34	3531-3537	101126	
13-35	3537-3538	,	
13-36	3539-3545	blkref	
13-37	3546-3548	#0	
13-38	3548-3549	:	
13-39	3550-3553	rel	
13-40	3554-3558	1663	
13-41	3558-3559	/	
13-42	3559-3564	16386	
13-43	3564-3565	/	
13-44	3565-3569	1247	
13-45	3570-3573	blk	
13-46	3574-3575	8	
13-47	3576-3579	FPW	

#Text=The record of getting the next OID for the table to be created follows: rmgr: XLOG len (rec/tot): 30/ 30, tx: 0, lsn: 0/35394574, prev 0/353927BC, desc: NEXTOID 82295
14-1	3580-3583	The	
14-2	3584-3590	record	
14-3	3591-3593	of	
14-4	3594-3601	getting	
14-5	3602-3605	the	
14-6	3606-3610	next	
14-7	3611-3614	OID	
14-8	3615-3618	for	
14-9	3619-3622	the	
14-10	3623-3628	table	
14-11	3629-3631	to	
14-12	3632-3634	be	
14-13	3635-3642	created	
14-14	3643-3650	follows	
14-15	3650-3651	:	
14-16	3652-3656	rmgr	
14-17	3656-3657	:	
14-18	3658-3662	XLOG	
14-19	3663-3666	len	
14-20	3667-3668	(	
14-21	3668-3671	rec	
14-22	3671-3672	/	
14-23	3672-3675	tot	
14-24	3675-3676	)	
14-25	3676-3677	:	
14-26	3678-3680	30	
14-27	3680-3681	/	
14-28	3682-3684	30	
14-29	3684-3685	,	
14-30	3686-3688	tx	
14-31	3688-3689	:	
14-32	3690-3691	0	
14-33	3691-3692	,	
14-34	3693-3696	lsn	
14-35	3696-3697	:	
14-36	3698-3699	0	
14-37	3699-3700	/	
14-38	3700-3708	35394574	
14-39	3708-3709	,	
14-40	3710-3714	prev	
14-41	3715-3716	0	
14-42	3716-3717	/	
14-43	3717-3725	353927BC	
14-44	3725-3726	,	
14-45	3727-3731	desc	
14-46	3731-3732	:	
14-47	3733-3740	NEXTOID	
14-48	3741-3746	82295	

#Text=And this is pure creation of the table: rmgr: Storage len (rec/tot): 42/ 42, tx: 0, lsn: 0/35394594, prev 0/35394574, desc: CREATE base/16386/74103
15-1	3747-3750	And	
15-2	3751-3755	this	
15-3	3756-3758	is	
15-4	3759-3763	pure	
15-5	3764-3772	creation	
15-6	3773-3775	of	
15-7	3776-3779	the	
15-8	3780-3785	table	
15-9	3785-3786	:	
15-10	3787-3791	rmgr	
15-11	3791-3792	:	
15-12	3793-3800	Storage	
15-13	3801-3804	len	
15-14	3805-3806	(	
15-15	3806-3809	rec	
15-16	3809-3810	/	
15-17	3810-3813	tot	
15-18	3813-3814	)	
15-19	3814-3815	:	
15-20	3816-3818	42	
15-21	3818-3819	/	
15-22	3820-3822	42	
15-23	3822-3823	,	
15-24	3824-3826	tx	
15-25	3826-3827	:	
15-26	3828-3829	0	
15-27	3829-3830	,	
15-28	3831-3834	lsn	
15-29	3834-3835	:	
15-30	3836-3837	0	
15-31	3837-3838	/	
15-32	3838-3846	35394594	
15-33	3846-3847	,	
15-34	3848-3852	prev	
15-35	3853-3854	0	
15-36	3854-3855	/	
15-37	3855-3863	35394574	
15-38	3863-3864	,	
15-39	3865-3869	desc	
15-40	3869-3870	:	
15-41	3871-3877	CREATE	
15-42	3878-3882	base	
15-43	3882-3883	/	
15-44	3883-3888	16386	
15-45	3888-3889	/	
15-46	3889-3894	74103	

#Text=But the insert of data into the table is not WAL-logged. Multiple records follow on row inserts into different tables and indexes — this way PostgreSQL writes the information on the created table to the system catalog (provided in a shorthand form): rmgr: Heap len (rec/tot): 203/ 203, tx: 101127, lsn: 0/353945C0, prev 0/35394594, desc: INSERT off 71, blkref #0: rel 1663/16386/1247 blk 8
16-1	3895-3898	But	
16-2	3899-3902	the	
16-3	3903-3909	insert	
16-4	3910-3912	of	
16-5	3913-3917	data	
16-6	3918-3922	into	
16-7	3923-3926	the	
16-8	3927-3932	table	
16-9	3933-3935	is	
16-10	3936-3939	not	
16-11	3940-3950	WAL-logged	
16-12	3950-3951	.	
16-13	3952-3960	Multiple	
16-14	3961-3968	records	
16-15	3969-3975	follow	
16-16	3976-3978	on	
16-17	3979-3982	row	
16-18	3983-3990	inserts	
16-19	3991-3995	into	
16-20	3996-4005	different	
16-21	4006-4012	tables	
16-22	4013-4016	and	
16-23	4017-4024	indexes	
16-24	4024-4025	 	
16-25	4025-4026	—	
16-26	4027-4031	this	
16-27	4032-4035	way	
16-28	4036-4046	PostgreSQL	
16-29	4047-4053	writes	
16-30	4054-4057	the	
16-31	4058-4069	information	
16-32	4070-4072	on	
16-33	4073-4076	the	
16-34	4077-4084	created	
16-35	4085-4090	table	
16-36	4091-4093	to	
16-37	4094-4097	the	
16-38	4098-4104	system	
16-39	4105-4112	catalog	
16-40	4113-4114	(	
16-41	4114-4122	provided	
16-42	4123-4125	in	
16-43	4126-4127	a	
16-44	4128-4137	shorthand	
16-45	4138-4142	form	
16-46	4142-4143	)	
16-47	4143-4144	:	
16-48	4145-4149	rmgr	
16-49	4149-4150	:	
16-50	4151-4155	Heap	
16-51	4156-4159	len	
16-52	4160-4161	(	
16-53	4161-4164	rec	
16-54	4164-4165	/	
16-55	4165-4168	tot	
16-56	4168-4169	)	
16-57	4169-4170	:	
16-58	4171-4174	203	
16-59	4174-4175	/	
16-60	4176-4179	203	
16-61	4179-4180	,	
16-62	4181-4183	tx	
16-63	4183-4184	:	
16-64	4185-4191	101127	
16-65	4191-4192	,	
16-66	4193-4196	lsn	
16-67	4196-4197	:	
16-68	4198-4199	0	
16-69	4199-4200	/	
16-70	4200-4208	353945C0	
16-71	4208-4209	,	
16-72	4210-4214	prev	
16-73	4215-4216	0	
16-74	4216-4217	/	
16-75	4217-4225	35394594	
16-76	4225-4226	,	
16-77	4227-4231	desc	
16-78	4231-4232	:	
16-79	4233-4239	INSERT	
16-80	4240-4243	off	
16-81	4244-4246	71	
16-82	4246-4247	,	
16-83	4248-4254	blkref	
16-84	4255-4257	#0	
16-85	4257-4258	:	
16-86	4259-4262	rel	
16-87	4263-4267	1663	
16-88	4267-4268	/	
16-89	4268-4273	16386	
16-90	4273-4274	/	
16-91	4274-4278	1247	
16-92	4279-4282	blk	
16-93	4283-4284	8	

#Text=rmgr: Btree len (rec/tot): 53/ 685, tx: 101127, lsn: 0/3539468C, prev 0/353945C0, desc: INSERT_LEAF off 37, blkref #0: rel 1663/16386/2703 blk 2 FPW
17-1	4285-4289	rmgr	
17-2	4289-4290	:	
17-3	4291-4296	Btree	
17-4	4297-4300	len	
17-5	4301-4302	(	
17-6	4302-4305	rec	
17-7	4305-4306	/	
17-8	4306-4309	tot	
17-9	4309-4310	)	
17-10	4310-4311	:	
17-11	4312-4314	53	
17-12	4314-4315	/	
17-13	4316-4319	685	
17-14	4319-4320	,	
17-15	4321-4323	tx	
17-16	4323-4324	:	
17-17	4325-4331	101127	
17-18	4331-4332	,	
17-19	4333-4336	lsn	
17-20	4336-4337	:	
17-21	4338-4339	0	
17-22	4339-4340	/	
17-23	4340-4348	3539468C	
17-24	4348-4349	,	
17-25	4350-4354	prev	
17-26	4355-4356	0	
17-27	4356-4357	/	
17-28	4357-4365	353945C0	
17-29	4365-4366	,	
17-30	4367-4371	desc	
17-31	4371-4372	:	
17-32	4373-4384	INSERT_LEAF	
17-33	4385-4388	off	
17-34	4389-4391	37	
17-35	4391-4392	,	
17-36	4393-4399	blkref	
17-37	4400-4402	#0	
17-38	4402-4403	:	
17-39	4404-4407	rel	
17-40	4408-4412	1663	
17-41	4412-4413	/	
17-42	4413-4418	16386	
17-43	4418-4419	/	
17-44	4419-4423	2703	
17-45	4424-4427	blk	
17-46	4428-4429	2	
17-47	4430-4433	FPW	

#Text=... rmgr: Btree len (rec/tot): 53/ 2393, tx:
18-1	4434-4435	.	
18-2	4435-4436	.	
18-3	4436-4437	.	
18-4	4438-4442	rmgr	
18-5	4442-4443	:	
18-6	4444-4449	Btree	
18-7	4450-4453	len	
18-8	4454-4455	(	
18-9	4455-4458	rec	
18-10	4458-4459	/	
18-11	4459-4462	tot	
18-12	4462-4463	)	
18-13	4463-4464	:	
18-14	4465-4467	53	
18-15	4467-4468	/	
18-16	4469-4473	2393	
18-17	4473-4474	,	
18-18	4475-4477	tx	
18-19	4477-4478	:	

#Text=101127, lsn: 0/353A747C, prev 0/353A6788, desc: INSERT_LEAF off 10, blkref #0: rel 1664/0/1233 blk 1 FPW And finally the transaction commit: rmgr: Transaction len (rec/tot): 34/ 34, tx:
19-1	4479-4485	101127	
19-2	4485-4486	,	
19-3	4487-4490	lsn	
19-4	4490-4491	:	
19-5	4492-4493	0	
19-6	4493-4494	/	
19-7	4494-4502	353A747C	
19-8	4502-4503	,	
19-9	4504-4508	prev	
19-10	4509-4510	0	
19-11	4510-4511	/	
19-12	4511-4519	353A6788	
19-13	4519-4520	,	
19-14	4521-4525	desc	
19-15	4525-4526	:	
19-16	4527-4538	INSERT_LEAF	
19-17	4539-4542	off	
19-18	4543-4545	10	
19-19	4545-4546	,	
19-20	4547-4553	blkref	
19-21	4554-4556	#0	
19-22	4556-4557	:	
19-23	4558-4561	rel	
19-24	4562-4566	1664	
19-25	4566-4567	/	
19-26	4567-4568	0	
19-27	4568-4569	/	
19-28	4569-4573	1233	
19-29	4574-4577	blk	
19-30	4578-4579	1	
19-31	4580-4583	FPW	
19-32	4584-4587	And	
19-33	4588-4595	finally	
19-34	4596-4599	the	
19-35	4600-4611	transaction	
19-36	4612-4618	commit	
19-37	4618-4619	:	
19-38	4620-4624	rmgr	
19-39	4624-4625	:	
19-40	4626-4637	Transaction	
19-41	4638-4641	len	
19-42	4642-4643	(	
19-43	4643-4646	rec	
19-44	4646-4647	/	
19-45	4647-4650	tot	
19-46	4650-4651	)	
19-47	4651-4652	:	
19-48	4653-4655	34	
19-49	4655-4656	/	
19-50	4657-4659	34	
19-51	4659-4660	,	
19-52	4661-4663	tx	
19-53	4663-4664	:	

#Text=101127, lsn: 0/353A7DD8, prev 0/353A747C, desc: COMMIT 2019-07-23 18:59:34.923124 MSK Replica
20-1	4665-4671	101127	
20-2	4671-4672	,	
20-3	4673-4676	lsn	
20-4	4676-4677	:	
20-5	4678-4679	0	
20-6	4679-4680	/	
20-7	4680-4688	353A7DD8	
20-8	4688-4689	,	
20-9	4690-4694	prev	
20-10	4695-4696	0	
20-11	4696-4697	/	
20-12	4697-4705	353A747C	
20-13	4705-4706	,	
20-14	4707-4711	desc	
20-15	4711-4712	:	
20-16	4713-4719	COMMIT	
20-17	4720-4724	2019	
20-18	4724-4725	-	
20-19	4725-4727	07	
20-20	4727-4728	-	
20-21	4728-4730	23	
20-22	4731-4733	18	
20-23	4733-4734	:	
20-24	4734-4736	59	
20-25	4736-4737	:	
20-26	4737-4746	34.923124	
20-27	4747-4750	MSK	
20-28	4751-4758	Replica	

#Text=When we restore a PostgreSQL instance from backup, we start with some state of the file system and gradually bring the data to the target point of the recovery by playing back the archived WAL records. The number of such records can be pretty large (for example, records for several days), that is, the recovery period will span many checkpoints rather than one. So, it is clear that the minimum logging level is insufficient — if an operation is not logged, we will be unaware of whether we need to redo it. To support restoring from backup, all the operations must be WAL-logged. The same is true for the replication: everything that is not logged will not be sent to the replica and will not be replayed. And a wish to run queries on a replica complicates the situation even more.
21-1	4759-4763	When	
21-2	4764-4766	we	
21-3	4767-4774	restore	
21-4	4775-4776	a	
21-5	4777-4787	PostgreSQL	
21-6	4788-4796	instance	
21-7	4797-4801	from	
21-8	4802-4808	backup	
21-9	4808-4809	,	
21-10	4810-4812	we	
21-11	4813-4818	start	
21-12	4819-4823	with	
21-13	4824-4828	some	
21-14	4829-4834	state	
21-15	4835-4837	of	
21-16	4838-4841	the	
21-17	4842-4846	file	
21-18	4847-4853	system	
21-19	4854-4857	and	
21-20	4858-4867	gradually	
21-21	4868-4873	bring	
21-22	4874-4877	the	
21-23	4878-4882	data	
21-24	4883-4885	to	
21-25	4886-4889	the	
21-26	4890-4896	target	
21-27	4897-4902	point	
21-28	4903-4905	of	
21-29	4906-4909	the	
21-30	4910-4918	recovery	
21-31	4919-4921	by	
21-32	4922-4929	playing	
21-33	4930-4934	back	
21-34	4935-4938	the	
21-35	4939-4947	archived	
21-36	4948-4951	WAL	
21-37	4952-4959	records	
21-38	4959-4960	.	
21-39	4961-4964	The	
21-40	4965-4971	number	
21-41	4972-4974	of	
21-42	4975-4979	such	
21-43	4980-4987	records	
21-44	4988-4991	can	
21-45	4992-4994	be	
21-46	4995-5001	pretty	
21-47	5002-5007	large	
21-48	5008-5009	(	
21-49	5009-5012	for	
21-50	5013-5020	example	
21-51	5020-5021	,	
21-52	5022-5029	records	
21-53	5030-5033	for	
21-54	5034-5041	several	
21-55	5042-5046	days	
21-56	5046-5047	)	
21-57	5047-5048	,	
21-58	5049-5053	that	
21-59	5054-5056	is	
21-60	5056-5057	,	
21-61	5058-5061	the	
21-62	5062-5070	recovery	
21-63	5071-5077	period	
21-64	5078-5082	will	
21-65	5083-5087	span	
21-66	5088-5092	many	
21-67	5093-5104	checkpoints	
21-68	5105-5111	rather	
21-69	5112-5116	than	
21-70	5117-5120	one	
21-71	5120-5121	.	
21-72	5122-5124	So	
21-73	5124-5125	,	
21-74	5126-5128	it	
21-75	5129-5131	is	
21-76	5132-5137	clear	
21-77	5138-5142	that	
21-78	5143-5146	the	
21-79	5147-5154	minimum	
21-80	5155-5162	logging	
21-81	5163-5168	level	
21-82	5169-5171	is	
21-83	5172-5184	insufficient	
21-84	5184-5185	 	
21-85	5185-5186	—	
21-86	5187-5189	if	
21-87	5190-5192	an	
21-88	5193-5202	operation	
21-89	5203-5205	is	
21-90	5206-5209	not	
21-91	5210-5216	logged	
21-92	5216-5217	,	
21-93	5218-5220	we	
21-94	5221-5225	will	
21-95	5226-5228	be	
21-96	5229-5236	unaware	
21-97	5237-5239	of	
21-98	5240-5247	whether	
21-99	5248-5250	we	
21-100	5251-5255	need	
21-101	5256-5258	to	
21-102	5259-5263	redo	
21-103	5264-5266	it	
21-104	5266-5267	.	
21-105	5268-5270	To	
21-106	5271-5278	support	
21-107	5279-5288	restoring	
21-108	5289-5293	from	
21-109	5294-5300	backup	
21-110	5300-5301	,	
21-111	5302-5305	all	
21-112	5306-5309	the	
21-113	5310-5320	operations	
21-114	5321-5325	must	
21-115	5326-5328	be	
21-116	5329-5339	WAL-logged	
21-117	5339-5340	.	
21-118	5341-5344	The	
21-119	5345-5349	same	
21-120	5350-5352	is	
21-121	5353-5357	true	
21-122	5358-5361	for	
21-123	5362-5365	the	
21-124	5366-5377	replication	
21-125	5377-5378	:	
21-126	5379-5389	everything	
21-127	5390-5394	that	
21-128	5395-5397	is	
21-129	5398-5401	not	
21-130	5402-5408	logged	
21-131	5409-5413	will	
21-132	5414-5417	not	
21-133	5418-5420	be	
21-134	5421-5425	sent	
21-135	5426-5428	to	
21-136	5429-5432	the	
21-137	5433-5440	replica	
21-138	5441-5444	and	
21-139	5445-5449	will	
21-140	5450-5453	not	
21-141	5454-5456	be	
21-142	5457-5465	replayed	
21-143	5465-5466	.	
21-144	5467-5470	And	
21-145	5471-5472	a	
21-146	5473-5477	wish	
21-147	5478-5480	to	
21-148	5481-5484	run	
21-149	5485-5492	queries	
21-150	5493-5495	on	
21-151	5496-5497	a	
21-152	5498-5505	replica	
21-153	5506-5517	complicates	
21-154	5518-5521	the	
21-155	5522-5531	situation	
21-156	5532-5536	even	
21-157	5537-5541	more	
21-158	5541-5542	.	

#Text=First, we need information on exclusive advisory locks that occur on the main server since they can conflict the queries on the replica. Such locks are WAL-logged and then the startup process applies them on the replica. Second, we need to create data snapshots, and to do this, as we remember, information on the transactions being executed is needed. In the case of a replica, not only local transactions are meant, but also transactions on the main server. The only way to provide this information is to WAL-log it from time to time (this happens once every 15 seconds).
22-1	5543-5548	First	
22-2	5548-5549	,	
22-3	5550-5552	we	
22-4	5553-5557	need	
22-5	5558-5569	information	
22-6	5570-5572	on	
22-7	5573-5582	exclusive	
22-8	5583-5591	advisory	
22-9	5592-5597	locks	
22-10	5598-5602	that	
22-11	5603-5608	occur	
22-12	5609-5611	on	
22-13	5612-5615	the	
22-14	5616-5620	main	
22-15	5621-5627	server	
22-16	5628-5633	since	
22-17	5634-5638	they	
22-18	5639-5642	can	
22-19	5643-5651	conflict	
22-20	5652-5655	the	
22-21	5656-5663	queries	
22-22	5664-5666	on	
22-23	5667-5670	the	
22-24	5671-5678	replica	
22-25	5678-5679	.	
22-26	5680-5684	Such	
22-27	5685-5690	locks	
22-28	5691-5694	are	
22-29	5695-5705	WAL-logged	
22-30	5706-5709	and	
22-31	5710-5714	then	
22-32	5715-5718	the	
22-33	5719-5726	startup	
22-34	5727-5734	process	
22-35	5735-5742	applies	
22-36	5743-5747	them	
22-37	5748-5750	on	
22-38	5751-5754	the	
22-39	5755-5762	replica	
22-40	5762-5763	.	
22-41	5764-5770	Second	
22-42	5770-5771	,	
22-43	5772-5774	we	
22-44	5775-5779	need	
22-45	5780-5782	to	
22-46	5783-5789	create	
22-47	5790-5794	data	
22-48	5795-5804	snapshots	
22-49	5804-5805	,	
22-50	5806-5809	and	
22-51	5810-5812	to	
22-52	5813-5815	do	
22-53	5816-5820	this	
22-54	5820-5821	,	
22-55	5822-5824	as	
22-56	5825-5827	we	
22-57	5828-5836	remember	
22-58	5836-5837	,	
22-59	5838-5849	information	
22-60	5850-5852	on	
22-61	5853-5856	the	
22-62	5857-5869	transactions	
22-63	5870-5875	being	
22-64	5876-5884	executed	
22-65	5885-5887	is	
22-66	5888-5894	needed	
22-67	5894-5895	.	
22-68	5896-5898	In	
22-69	5899-5902	the	
22-70	5903-5907	case	
22-71	5908-5910	of	
22-72	5911-5912	a	
22-73	5913-5920	replica	
22-74	5920-5921	,	
22-75	5922-5925	not	
22-76	5926-5930	only	
22-77	5931-5936	local	
22-78	5937-5949	transactions	
22-79	5950-5953	are	
22-80	5954-5959	meant	
22-81	5959-5960	,	
22-82	5961-5964	but	
22-83	5965-5969	also	
22-84	5970-5982	transactions	
22-85	5983-5985	on	
22-86	5986-5989	the	
22-87	5990-5994	main	
22-88	5995-6001	server	
22-89	6001-6002	.	
22-90	6003-6006	The	
22-91	6007-6011	only	
22-92	6012-6015	way	
22-93	6016-6018	to	
22-94	6019-6026	provide	
22-95	6027-6031	this	
22-96	6032-6043	information	
22-97	6044-6046	is	
22-98	6047-6049	to	
22-99	6050-6057	WAL-log	
22-100	6058-6060	it	
22-101	6061-6065	from	
22-102	6066-6070	time	
22-103	6071-6073	to	
22-104	6074-6078	time	
22-105	6079-6080	(	
22-106	6080-6084	this	
22-107	6085-6092	happens	
22-108	6093-6097	once	
22-109	6098-6103	every	
22-110	6104-6106	15	
22-111	6106-6107	 	
22-112	6107-6114	seconds	
22-113	6114-6115	)	
22-114	6115-6116	.	

#Text=The level of WAL that ensures both restoring from backup and a possibility of physical replication is set by the value of wal_level = replica. (Before version 9.6, two separate levels were available — archive and hot_standby — but later they were combined.) It's this level that is used by default starting with PostgreSQL 10 (while earlier it was minimal). So let's just restore the parameters to their default values: => ALTER SYSTEM RESET wal_level;
23-1	6117-6120	The	
23-2	6121-6126	level	
23-3	6127-6129	of	
23-4	6130-6133	WAL	
23-5	6134-6138	that	
23-6	6139-6146	ensures	
23-7	6147-6151	both	
23-8	6152-6161	restoring	
23-9	6162-6166	from	
23-10	6167-6173	backup	
23-11	6174-6177	and	
23-12	6178-6179	a	
23-13	6180-6191	possibility	
23-14	6192-6194	of	
23-15	6195-6203	physical	
23-16	6204-6215	replication	
23-17	6216-6218	is	
23-18	6219-6222	set	
23-19	6223-6225	by	
23-20	6226-6229	the	
23-21	6230-6235	value	
23-22	6236-6238	of	
23-23	6239-6248	wal_level	
23-24	6249-6250	=	
23-25	6251-6258	replica	
23-26	6258-6259	.	
23-27	6260-6261	(	
23-28	6261-6267	Before	
23-29	6268-6275	version	
23-30	6275-6276	 	
23-31	6276-6279	9.6	
23-32	6279-6280	,	
23-33	6281-6284	two	
23-34	6285-6293	separate	
23-35	6294-6300	levels	
23-36	6301-6305	were	
23-37	6306-6315	available	
23-38	6315-6316	 	
23-39	6316-6317	—	
23-40	6318-6325	archive	
23-41	6326-6329	and	
23-42	6330-6341	hot_standby	
23-43	6341-6342	 	
23-44	6342-6343	—	
23-45	6344-6347	but	
23-46	6348-6353	later	
23-47	6354-6358	they	
23-48	6359-6363	were	
23-49	6364-6372	combined	
23-50	6372-6373	.	
23-51	6373-6374	)	
23-52	6375-6379	It's	
23-53	6380-6384	this	
23-54	6385-6390	level	
23-55	6391-6395	that	
23-56	6396-6398	is	
23-57	6399-6403	used	
23-58	6404-6406	by	
23-59	6407-6414	default	
23-60	6415-6423	starting	
23-61	6424-6428	with	
23-62	6429-6439	PostgreSQL	
23-63	6439-6440	 	
23-64	6440-6442	10	
23-65	6443-6444	(	
23-66	6444-6449	while	
23-67	6450-6457	earlier	
23-68	6458-6460	it	
23-69	6461-6464	was	
23-70	6465-6472	minimal	
23-71	6472-6473	)	
23-72	6473-6474	.	
23-73	6475-6477	So	
23-74	6478-6483	let's	
23-75	6484-6488	just	
23-76	6489-6496	restore	
23-77	6497-6500	the	
23-78	6501-6511	parameters	
23-79	6512-6514	to	
23-80	6515-6520	their	
23-81	6521-6528	default	
23-82	6529-6535	values	
23-83	6535-6536	:	
23-84	6537-6538	=	
23-85	6538-6539	>	
23-86	6540-6545	ALTER	
23-87	6546-6552	SYSTEM	
23-88	6553-6558	RESET	
23-89	6559-6568	wal_level	
23-90	6568-6569	;	

#Text==> ALTER SYSTEM RESET max_wal_senders; student$ sudo pg_ctlcluster 11 main restart Deleting the table and redoing exactly the same sequence of steps as last time: => DROP TABLE wallevel; => SELECT pg_current_wal_insert_lsn();
24-1	6570-6571	=	
24-2	6571-6572	>	
24-3	6573-6578	ALTER	
24-4	6579-6585	SYSTEM	
24-5	6586-6591	RESET	
24-6	6592-6607	max_wal_senders	
24-7	6607-6608	;	
24-8	6609-6616	student	
24-9	6616-6617	$	
24-10	6618-6622	sudo	
24-11	6623-6636	pg_ctlcluster	
24-12	6637-6639	11	
24-13	6640-6644	main	
24-14	6645-6652	restart	
24-15	6653-6661	Deleting	
24-16	6662-6665	the	
24-17	6666-6671	table	
24-18	6672-6675	and	
24-19	6676-6683	redoing	
24-20	6684-6691	exactly	
24-21	6692-6695	the	
24-22	6696-6700	same	
24-23	6701-6709	sequence	
24-24	6710-6712	of	
24-25	6713-6718	steps	
24-26	6719-6721	as	
24-27	6722-6726	last	
24-28	6727-6731	time	
24-29	6731-6732	:	
24-30	6733-6734	=	
24-31	6734-6735	>	
24-32	6736-6740	DROP	
24-33	6741-6746	TABLE	
24-34	6747-6755	wallevel	
24-35	6755-6756	;	
24-36	6757-6758	=	
24-37	6758-6759	>	
24-38	6760-6766	SELECT	
24-39	6767-6792	pg_current_wal_insert_lsn	
24-40	6792-6793	(	
24-41	6793-6794	)	
24-42	6794-6795	;	

#Text=pg_current_wal_insert_lsn --------------------------- 0/353AF21C (1 row) => CREATE TABLE wallevel AS SELECT 1 AS n;
25-1	6796-6821	pg_current_wal_insert_lsn	
25-2	6822-6823	-	
25-3	6823-6824	-	
25-4	6824-6825	-	
25-5	6825-6826	-	
25-6	6826-6827	-	
25-7	6827-6828	-	
25-8	6828-6829	-	
25-9	6829-6830	-	
25-10	6830-6831	-	
25-11	6831-6832	-	
25-12	6832-6833	-	
25-13	6833-6834	-	
25-14	6834-6835	-	
25-15	6835-6836	-	
25-16	6836-6837	-	
25-17	6837-6838	-	
25-18	6838-6839	-	
25-19	6839-6840	-	
25-20	6840-6841	-	
25-21	6841-6842	-	
25-22	6842-6843	-	
25-23	6843-6844	-	
25-24	6844-6845	-	
25-25	6845-6846	-	
25-26	6846-6847	-	
25-27	6847-6848	-	
25-28	6848-6849	-	
25-29	6850-6851	0	
25-30	6851-6852	/	
25-31	6852-6860	353AF21C	
25-32	6861-6862	(	
25-33	6862-6863	1	
25-34	6864-6867	row	
25-35	6867-6868	)	
25-36	6869-6870	=	
25-37	6870-6871	>	
25-38	6872-6878	CREATE	
25-39	6879-6884	TABLE	
25-40	6885-6893	wallevel	
25-41	6894-6896	AS	
25-42	6897-6903	SELECT	
25-43	6904-6905	1	
25-44	6906-6908	AS	
25-45	6909-6910	n	
25-46	6910-6911	;	

#Text==> SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn --------------------------- 0/353BE51C (1 row)
26-1	6912-6913	=	
26-2	6913-6914	>	
26-3	6915-6921	SELECT	
26-4	6922-6947	pg_current_wal_insert_lsn	
26-5	6947-6948	(	
26-6	6948-6949	)	
26-7	6949-6950	;	
26-8	6951-6976	pg_current_wal_insert_lsn	
26-9	6977-6978	-	
26-10	6978-6979	-	
26-11	6979-6980	-	
26-12	6980-6981	-	
26-13	6981-6982	-	
26-14	6982-6983	-	
26-15	6983-6984	-	
26-16	6984-6985	-	
26-17	6985-6986	-	
26-18	6986-6987	-	
26-19	6987-6988	-	
26-20	6988-6989	-	
26-21	6989-6990	-	
26-22	6990-6991	-	
26-23	6991-6992	-	
26-24	6992-6993	-	
26-25	6993-6994	-	
26-26	6994-6995	-	
26-27	6995-6996	-	
26-28	6996-6997	-	
26-29	6997-6998	-	
26-30	6998-6999	-	
26-31	6999-7000	-	
26-32	7000-7001	-	
26-33	7001-7002	-	
26-34	7002-7003	-	
26-35	7003-7004	-	
26-36	7005-7006	0	
26-37	7006-7007	/	
26-38	7007-7015	353BE51C	
26-39	7016-7017	(	
26-40	7017-7018	1	
26-41	7019-7022	row	
26-42	7022-7023	)	

#Text=Now let's check WAL records. postgres$ /usr/lib/postgresql/11/bin/pg_waldump -p /var/lib/postgresql/11/main/pg_wal -s 0/353AF21C -e 0/353BE51C
27-1	7024-7027	Now	
27-2	7028-7033	let's	
27-3	7034-7039	check	
27-4	7040-7043	WAL	
27-5	7044-7051	records	
27-6	7051-7052	.	
27-7	7053-7061	postgres	
27-8	7061-7062	$	
27-9	7063-7064	/	
27-10	7064-7067	usr	
27-11	7067-7068	/	
27-12	7068-7071	lib	
27-13	7071-7072	/	
27-14	7072-7082	postgresql	
27-15	7082-7083	/	
27-16	7083-7085	11	
27-17	7085-7086	/	
27-18	7086-7089	bin	
27-19	7089-7090	/	
27-20	7090-7100	pg_waldump	
27-21	7101-7102	-	
27-22	7102-7103	p	
27-23	7104-7105	/	
27-24	7105-7108	var	
27-25	7108-7109	/	
27-26	7109-7112	lib	
27-27	7112-7113	/	
27-28	7113-7123	postgresql	
27-29	7123-7124	/	
27-30	7124-7126	11	
27-31	7126-7127	/	
27-32	7127-7131	main	
27-33	7131-7132	/	
27-34	7132-7138	pg_wal	
27-35	7139-7140	-	
27-36	7140-7141	s	
27-37	7142-7143	0	
27-38	7143-7144	/	
27-39	7144-7152	353AF21C	
27-40	7153-7154	-	
27-41	7154-7155	e	
27-42	7156-7157	0	
27-43	7157-7158	/	
27-44	7158-7166	353BE51C	

#Text=Vacuuming, getting the OID, creation of the table and registration in the system catalog — same as before so far: rmgr: Heap2 len (rec/tot): 58/ 58, tx: 0, lsn: 0/353AF21C, prev 0/353AF044, desc: CLEAN remxid 101128, blkref #0: rel 1663/16386/1247 blk 8
28-1	7167-7176	Vacuuming	
28-2	7176-7177	,	
28-3	7178-7185	getting	
28-4	7186-7189	the	
28-5	7190-7193	OID	
28-6	7193-7194	,	
28-7	7195-7203	creation	
28-8	7204-7206	of	
28-9	7207-7210	the	
28-10	7211-7216	table	
28-11	7217-7220	and	
28-12	7221-7233	registration	
28-13	7234-7236	in	
28-14	7237-7240	the	
28-15	7241-7247	system	
28-16	7248-7255	catalog	
28-17	7255-7256	 	
28-18	7256-7257	—	
28-19	7258-7262	same	
28-20	7263-7265	as	
28-21	7266-7272	before	
28-22	7273-7275	so	
28-23	7276-7279	far	
28-24	7279-7280	:	
28-25	7281-7285	rmgr	
28-26	7285-7286	:	
28-27	7287-7292	Heap2	
28-28	7293-7296	len	
28-29	7297-7298	(	
28-30	7298-7301	rec	
28-31	7301-7302	/	
28-32	7302-7305	tot	
28-33	7305-7306	)	
28-34	7306-7307	:	
28-35	7308-7310	58	
28-36	7310-7311	/	
28-37	7312-7314	58	
28-38	7314-7315	,	
28-39	7316-7318	tx	
28-40	7318-7319	:	
28-41	7320-7321	0	
28-42	7321-7322	,	
28-43	7323-7326	lsn	
28-44	7326-7327	:	
28-45	7328-7329	0	
28-46	7329-7330	/	
28-47	7330-7338	353AF21C	
28-48	7338-7339	,	
28-49	7340-7344	prev	
28-50	7345-7346	0	
28-51	7346-7347	/	
28-52	7347-7355	353AF044	
28-53	7355-7356	,	
28-54	7357-7361	desc	
28-55	7361-7362	:	
28-56	7363-7368	CLEAN	
28-57	7369-7375	remxid	
28-58	7376-7382	101128	
28-59	7382-7383	,	
28-60	7384-7390	blkref	
28-61	7391-7393	#0	
28-62	7393-7394	:	
28-63	7395-7398	rel	
28-64	7399-7403	1663	
28-65	7403-7404	/	
28-66	7404-7409	16386	
28-67	7409-7410	/	
28-68	7410-7414	1247	
28-69	7415-7418	blk	
28-70	7419-7420	8	

#Text=rmgr: XLOG len (rec/tot): 30/ 30, tx: 0, lsn: 0/353AF258, prev 0/353AF21C, desc: NEXTOID 82298 rmgr: Storage
29-1	7421-7425	rmgr	
29-2	7425-7426	:	
29-3	7427-7431	XLOG	
29-4	7432-7435	len	
29-5	7436-7437	(	
29-6	7437-7440	rec	
29-7	7440-7441	/	
29-8	7441-7444	tot	
29-9	7444-7445	)	
29-10	7445-7446	:	
29-11	7447-7449	30	
29-12	7449-7450	/	
29-13	7451-7453	30	
29-14	7453-7454	,	
29-15	7455-7457	tx	
29-16	7457-7458	:	
29-17	7459-7460	0	
29-18	7460-7461	,	
29-19	7462-7465	lsn	
29-20	7465-7466	:	
29-21	7467-7468	0	
29-22	7468-7469	/	
29-23	7469-7477	353AF258	
29-24	7477-7478	,	
29-25	7479-7483	prev	
29-26	7484-7485	0	
29-27	7485-7486	/	
29-28	7486-7494	353AF21C	
29-29	7494-7495	,	
29-30	7496-7500	desc	
29-31	7500-7501	:	
29-32	7502-7509	NEXTOID	
29-33	7510-7515	82298	
29-34	7516-7520	rmgr	
29-35	7520-7521	:	
29-36	7522-7529	Storage	

#Text=len (rec/tot): 42/ 42, tx: 0, lsn: 0/353AF278, prev 0/353AF258, desc: CREATE base/16386/74106 rmgr: Heap
30-1	7530-7533	len	
30-2	7534-7535	(	
30-3	7535-7538	rec	
30-4	7538-7539	/	
30-5	7539-7542	tot	
30-6	7542-7543	)	
30-7	7543-7544	:	
30-8	7545-7547	42	
30-9	7547-7548	/	
30-10	7549-7551	42	
30-11	7551-7552	,	
30-12	7553-7555	tx	
30-13	7555-7556	:	
30-14	7557-7558	0	
30-15	7558-7559	,	
30-16	7560-7563	lsn	
30-17	7563-7564	:	
30-18	7565-7566	0	
30-19	7566-7567	/	
30-20	7567-7575	353AF278	
30-21	7575-7576	,	
30-22	7577-7581	prev	
30-23	7582-7583	0	
30-24	7583-7584	/	
30-25	7584-7592	353AF258	
30-26	7592-7593	,	
30-27	7594-7598	desc	
30-28	7598-7599	:	
30-29	7600-7606	CREATE	
30-30	7607-7611	base	
30-31	7611-7612	/	
30-32	7612-7617	16386	
30-33	7617-7618	/	
30-34	7618-7623	74106	
30-35	7624-7628	rmgr	
30-36	7628-7629	:	
30-37	7630-7634	Heap	

#Text=len (rec/tot): 203/ 203, tx: 101129, lsn: 0/353AF2A4, prev 0/353AF278, desc: INSERT off 73, blkref #0: rel 1663/16386/1247 blk 8
31-1	7635-7638	len	
31-2	7639-7640	(	
31-3	7640-7643	rec	
31-4	7643-7644	/	
31-5	7644-7647	tot	
31-6	7647-7648	)	
31-7	7648-7649	:	
31-8	7650-7653	203	
31-9	7653-7654	/	
31-10	7655-7658	203	
31-11	7658-7659	,	
31-12	7660-7662	tx	
31-13	7662-7663	:	
31-14	7664-7670	101129	
31-15	7670-7671	,	
31-16	7672-7675	lsn	
31-17	7675-7676	:	
31-18	7677-7678	0	
31-19	7678-7679	/	
31-20	7679-7687	353AF2A4	
31-21	7687-7688	,	
31-22	7689-7693	prev	
31-23	7694-7695	0	
31-24	7695-7696	/	
31-25	7696-7704	353AF278	
31-26	7704-7705	,	
31-27	7706-7710	desc	
31-28	7710-7711	:	
31-29	7712-7718	INSERT	
31-30	7719-7722	off	
31-31	7723-7725	73	
31-32	7725-7726	,	
31-33	7727-7733	blkref	
31-34	7734-7736	#0	
31-35	7736-7737	:	
31-36	7738-7741	rel	
31-37	7742-7746	1663	
31-38	7746-7747	/	
31-39	7747-7752	16386	
31-40	7752-7753	/	
31-41	7753-7757	1247	
31-42	7758-7761	blk	
31-43	7762-7763	8	

#Text=rmgr: Btree len (rec/tot): 53/ 717, tx: 101129, lsn: 0/353AF370, prev 0/353AF2A4, … rmgr: Btree
32-1	7764-7768	rmgr	
32-2	7768-7769	:	
32-3	7770-7775	Btree	
32-4	7776-7779	len	
32-5	7780-7781	(	
32-6	7781-7784	rec	
32-7	7784-7785	/	
32-8	7785-7788	tot	
32-9	7788-7789	)	
32-10	7789-7790	:	
32-11	7791-7793	53	
32-12	7793-7794	/	
32-13	7795-7798	717	
32-14	7798-7799	,	
32-15	7800-7802	tx	
32-16	7802-7803	:	
32-17	7804-7810	101129	
32-18	7810-7811	,	
32-19	7812-7815	lsn	
32-20	7815-7816	:	
32-21	7817-7818	0	
32-22	7818-7819	/	
32-23	7819-7827	353AF370	
32-24	7827-7828	,	
32-25	7829-7833	prev	
32-26	7834-7835	0	
32-27	7835-7836	/	
32-28	7836-7844	353AF2A4	
32-29	7844-7845	,	
32-30	7846-7847	…	
32-31	7848-7852	rmgr	
32-32	7852-7853	:	
32-33	7854-7859	Btree	

#Text=len (rec/tot): 53/ 2413, tx: 101129, lsn: 0/353BD954, prev 0/353BCC44, desc: INSERT_LEAF off 10, blkref #0: rel 1664/0/1233 blk 1 FPW
33-1	7860-7863	len	
33-2	7864-7865	(	
33-3	7865-7868	rec	
33-4	7868-7869	/	
33-5	7869-7872	tot	
33-6	7872-7873	)	
33-7	7873-7874	:	
33-8	7875-7877	53	
33-9	7877-7878	/	
33-10	7879-7883	2413	
33-11	7883-7884	,	
33-12	7885-7887	tx	
33-13	7887-7888	:	
33-14	7889-7895	101129	
33-15	7895-7896	,	
33-16	7897-7900	lsn	
33-17	7900-7901	:	
33-18	7902-7903	0	
33-19	7903-7904	/	
33-20	7904-7912	353BD954	
33-21	7912-7913	,	
33-22	7914-7918	prev	
33-23	7919-7920	0	
33-24	7920-7921	/	
33-25	7921-7929	353BCC44	
33-26	7929-7930	,	
33-27	7931-7935	desc	
33-28	7935-7936	:	
33-29	7937-7948	INSERT_LEAF	
33-30	7949-7952	off	
33-31	7953-7955	10	
33-32	7955-7956	,	
33-33	7957-7963	blkref	
33-34	7964-7966	#0	
33-35	7966-7967	:	
33-36	7968-7971	rel	
33-37	7972-7976	1664	
33-38	7976-7977	/	
33-39	7977-7978	0	
33-40	7978-7979	/	
33-41	7979-7983	1233	
33-42	7984-7987	blk	
33-43	7988-7989	1	
33-44	7990-7993	FPW	

#Text=And this is something new. The record of the exclusive lock, related to the Standby manager — here it is the lock on the transaction ID (we will discuss why it is needed in the next series of articles): rmgr: Standby len (rec/tot): 42/ 42, tx: 101129, lsn: 0/353BE2D8, prev 0/353BD954, desc: LOCK xid 101129 db 16386 rel 74106
34-1	7994-7997	And	
34-2	7998-8002	this	
34-3	8003-8005	is	
34-4	8006-8015	something	
34-5	8016-8019	new	
34-6	8019-8020	.	
34-7	8021-8024	The	
34-8	8025-8031	record	
34-9	8032-8034	of	
34-10	8035-8038	the	
34-11	8039-8048	exclusive	
34-12	8049-8053	lock	
34-13	8053-8054	,	
34-14	8055-8062	related	
34-15	8063-8065	to	
34-16	8066-8069	the	
34-17	8070-8077	Standby	
34-18	8078-8085	manager	
34-19	8085-8086	 	
34-20	8086-8087	—	
34-21	8088-8092	here	
34-22	8093-8095	it	
34-23	8096-8098	is	
34-24	8099-8102	the	
34-25	8103-8107	lock	
34-26	8108-8110	on	
34-27	8111-8114	the	
34-28	8115-8126	transaction	
34-29	8127-8129	ID	
34-30	8130-8131	(	
34-31	8131-8133	we	
34-32	8134-8138	will	
34-33	8139-8146	discuss	
34-34	8147-8150	why	
34-35	8151-8153	it	
34-36	8154-8156	is	
34-37	8157-8163	needed	
34-38	8164-8166	in	
34-39	8167-8170	the	
34-40	8171-8175	next	
34-41	8176-8182	series	
34-42	8183-8185	of	
34-43	8186-8194	articles	
34-44	8194-8195	)	
34-45	8195-8196	:	
34-46	8197-8201	rmgr	
34-47	8201-8202	:	
34-48	8203-8210	Standby	
34-49	8211-8214	len	
34-50	8215-8216	(	
34-51	8216-8219	rec	
34-52	8219-8220	/	
34-53	8220-8223	tot	
34-54	8223-8224	)	
34-55	8224-8225	:	
34-56	8226-8228	42	
34-57	8228-8229	/	
34-58	8230-8232	42	
34-59	8232-8233	,	
34-60	8234-8236	tx	
34-61	8236-8237	:	
34-62	8238-8244	101129	
34-63	8244-8245	,	
34-64	8246-8249	lsn	
34-65	8249-8250	:	
34-66	8251-8252	0	
34-67	8252-8253	/	
34-68	8253-8261	353BE2D8	
34-69	8261-8262	,	
34-70	8263-8267	prev	
34-71	8268-8269	0	
34-72	8269-8270	/	
34-73	8270-8278	353BD954	
34-74	8278-8279	,	
34-75	8280-8284	desc	
34-76	8284-8285	:	
34-77	8286-8290	LOCK	
34-78	8291-8294	xid	
34-79	8295-8301	101129	
34-80	8302-8304	db	
34-81	8305-8310	16386	
34-82	8311-8314	rel	
34-83	8315-8320	74106	

#Text=And this is the record of row inserts in our table (compare the file number rel with the one in the CREATE record): rmgr: Heap len (rec/tot): 59/ 59, tx: 101129, lsn: 0/353BE304, prev 0/353BE2D8, desc: INSERT+INIT off 1, blkref #0: rel 1663/16386/74106 blk 0
35-1	8321-8324	And	
35-2	8325-8329	this	
35-3	8330-8332	is	
35-4	8333-8336	the	
35-5	8337-8343	record	
35-6	8344-8346	of	
35-7	8347-8350	row	
35-8	8351-8358	inserts	
35-9	8359-8361	in	
35-10	8362-8365	our	
35-11	8366-8371	table	
35-12	8372-8373	(	
35-13	8373-8380	compare	
35-14	8381-8384	the	
35-15	8385-8389	file	
35-16	8390-8396	number	
35-17	8397-8400	rel	
35-18	8401-8405	with	
35-19	8406-8409	the	
35-20	8410-8413	one	
35-21	8414-8416	in	
35-22	8417-8420	the	
35-23	8421-8427	CREATE	
35-24	8428-8434	record	
35-25	8434-8435	)	
35-26	8435-8436	:	
35-27	8437-8441	rmgr	
35-28	8441-8442	:	
35-29	8443-8447	Heap	
35-30	8448-8451	len	
35-31	8452-8453	(	
35-32	8453-8456	rec	
35-33	8456-8457	/	
35-34	8457-8460	tot	
35-35	8460-8461	)	
35-36	8461-8462	:	
35-37	8463-8465	59	
35-38	8465-8466	/	
35-39	8467-8469	59	
35-40	8469-8470	,	
35-41	8471-8473	tx	
35-42	8473-8474	:	
35-43	8475-8481	101129	
35-44	8481-8482	,	
35-45	8483-8486	lsn	
35-46	8486-8487	:	
35-47	8488-8489	0	
35-48	8489-8490	/	
35-49	8490-8498	353BE304	
35-50	8498-8499	,	
35-51	8500-8504	prev	
35-52	8505-8506	0	
35-53	8506-8507	/	
35-54	8507-8515	353BE2D8	
35-55	8515-8516	,	
35-56	8517-8521	desc	
35-57	8521-8522	:	
35-58	8523-8529	INSERT	
35-59	8529-8530	+	
35-60	8530-8534	INIT	
35-61	8535-8538	off	
35-62	8539-8540	1	
35-63	8540-8541	,	
35-64	8542-8548	blkref	
35-65	8549-8551	#0	
35-66	8551-8552	:	
35-67	8553-8556	rel	
35-68	8557-8561	1663	
35-69	8561-8562	/	
35-70	8562-8567	16386	
35-71	8567-8568	/	
35-72	8568-8573	74106	
35-73	8574-8577	blk	
35-74	8578-8579	0	

#Text=This is the commit record: rmgr: Transaction len (rec/tot): 421/ 421, tx:
36-1	8580-8584	This	
36-2	8585-8587	is	
36-3	8588-8591	the	
36-4	8592-8598	commit	
36-5	8599-8605	record	
36-6	8605-8606	:	
36-7	8607-8611	rmgr	
36-8	8611-8612	:	
36-9	8613-8624	Transaction	
36-10	8625-8628	len	
36-11	8629-8630	(	
36-12	8630-8633	rec	
36-13	8633-8634	/	
36-14	8634-8637	tot	
36-15	8637-8638	)	
36-16	8638-8639	:	
36-17	8640-8643	421	
36-18	8643-8644	/	
36-19	8645-8648	421	
36-20	8648-8649	,	
36-21	8650-8652	tx	
36-22	8652-8653	:	

#Text=101129, lsn: 0/353BE340, prev 0/353BE304, desc: COMMIT 2019-07-23 18:59:37.870333 MSK; inval msgs: catcache 74 catcache 73 catcache 74 catcache 73 catcache 50 catcache 49 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 snapshot 2608 relcache 74106 snapshot 1214 And there is one more record, which occurs from time to time and is not tied to the completed transaction, relates to the Standby manager and informs of the transactions being executed at this point in time: rmgr: Standby len (rec/tot):
37-1	8654-8660	101129	
37-2	8660-8661	,	
37-3	8662-8665	lsn	
37-4	8665-8666	:	
37-5	8667-8668	0	
37-6	8668-8669	/	
37-7	8669-8677	353BE340	
37-8	8677-8678	,	
37-9	8679-8683	prev	
37-10	8684-8685	0	
37-11	8685-8686	/	
37-12	8686-8694	353BE304	
37-13	8694-8695	,	
37-14	8696-8700	desc	
37-15	8700-8701	:	
37-16	8702-8708	COMMIT	
37-17	8709-8713	2019	
37-18	8713-8714	-	
37-19	8714-8716	07	
37-20	8716-8717	-	
37-21	8717-8719	23	
37-22	8720-8722	18	
37-23	8722-8723	:	
37-24	8723-8725	59	
37-25	8725-8726	:	
37-26	8726-8735	37.870333	
37-27	8736-8739	MSK	
37-28	8739-8740	;	
37-29	8741-8746	inval	
37-30	8747-8751	msgs	
37-31	8751-8752	:	
37-32	8753-8761	catcache	
37-33	8762-8764	74	
37-34	8765-8773	catcache	
37-35	8774-8776	73	
37-36	8777-8785	catcache	
37-37	8786-8788	74	
37-38	8789-8797	catcache	
37-39	8798-8800	73	
37-40	8801-8809	catcache	
37-41	8810-8812	50	
37-42	8813-8821	catcache	
37-43	8822-8824	49	
37-44	8825-8833	catcache	
37-45	8834-8835	7	
37-46	8836-8844	catcache	
37-47	8845-8846	6	
37-48	8847-8855	catcache	
37-49	8856-8857	7	
37-50	8858-8866	catcache	
37-51	8867-8868	6	
37-52	8869-8877	catcache	
37-53	8878-8879	7	
37-54	8880-8888	catcache	
37-55	8889-8890	6	
37-56	8891-8899	catcache	
37-57	8900-8901	7	
37-58	8902-8910	catcache	
37-59	8911-8912	6	
37-60	8913-8921	catcache	
37-61	8922-8923	7	
37-62	8924-8932	catcache	
37-63	8933-8934	6	
37-64	8935-8943	catcache	
37-65	8944-8945	7	
37-66	8946-8954	catcache	
37-67	8955-8956	6	
37-68	8957-8965	catcache	
37-69	8966-8967	7	
37-70	8968-8976	catcache	
37-71	8977-8978	6	
37-72	8979-8987	snapshot	
37-73	8988-8992	2608	
37-74	8993-9001	relcache	
37-75	9002-9007	74106	
37-76	9008-9016	snapshot	
37-77	9017-9021	1214	
37-78	9022-9025	And	
37-79	9026-9031	there	
37-80	9032-9034	is	
37-81	9035-9038	one	
37-82	9039-9043	more	
37-83	9044-9050	record	
37-84	9050-9051	,	
37-85	9052-9057	which	
37-86	9058-9064	occurs	
37-87	9065-9069	from	
37-88	9070-9074	time	
37-89	9075-9077	to	
37-90	9078-9082	time	
37-91	9083-9086	and	
37-92	9087-9089	is	
37-93	9090-9093	not	
37-94	9094-9098	tied	
37-95	9099-9101	to	
37-96	9102-9105	the	
37-97	9106-9115	completed	
37-98	9116-9127	transaction	
37-99	9127-9128	,	
37-100	9129-9136	relates	
37-101	9137-9139	to	
37-102	9140-9143	the	
37-103	9144-9151	Standby	
37-104	9152-9159	manager	
37-105	9160-9163	and	
37-106	9164-9171	informs	
37-107	9172-9174	of	
37-108	9175-9178	the	
37-109	9179-9191	transactions	
37-110	9192-9197	being	
37-111	9198-9206	executed	
37-112	9207-9209	at	
37-113	9210-9214	this	
37-114	9215-9220	point	
37-115	9221-9223	in	
37-116	9224-9228	time	
37-117	9228-9229	:	
37-118	9230-9234	rmgr	
37-119	9234-9235	:	
37-120	9236-9243	Standby	
37-121	9244-9247	len	
37-122	9248-9249	(	
37-123	9249-9252	rec	
37-124	9252-9253	/	
37-125	9253-9256	tot	
37-126	9256-9257	)	
37-127	9257-9258	:	

#Text=50/ 50, tx: 0, lsn: 0/353BE4E8, prev 0/353BE340, desc: RUNNING_XACTS nextXid 101130 latestCompletedXid 101129 oldestRunningXid 101130
38-1	9259-9261	50	
38-2	9261-9262	/	
38-3	9263-9265	50	
38-4	9265-9266	,	
38-5	9267-9269	tx	
38-6	9269-9270	:	
38-7	9271-9272	0	
38-8	9272-9273	,	
38-9	9274-9277	lsn	
38-10	9277-9278	:	
38-11	9279-9280	0	
38-12	9280-9281	/	
38-13	9281-9289	353BE4E8	
38-14	9289-9290	,	
38-15	9291-9295	prev	
38-16	9296-9297	0	
38-17	9297-9298	/	
38-18	9298-9306	353BE340	
38-19	9306-9307	,	
38-20	9308-9312	desc	
38-21	9312-9313	:	
38-22	9314-9327	RUNNING_XACTS	
38-23	9328-9335	nextXid	
38-24	9336-9342	101130	
38-25	9343-9361	latestCompletedXid	
38-26	9362-9368	101129	
38-27	9369-9385	oldestRunningXid	
38-28	9386-9392	101130	

#Text=Logical And finally, the last level is specified by the value of wal_level = logical and provides for logical decoding and logical replication. It must be turned on for the publishing server.
39-1	9393-9400	Logical	
39-2	9401-9404	And	
39-3	9405-9412	finally	
39-4	9412-9413	,	
39-5	9414-9417	the	
39-6	9418-9422	last	
39-7	9423-9428	level	
39-8	9429-9431	is	
39-9	9432-9441	specified	
39-10	9442-9444	by	
39-11	9445-9448	the	
39-12	9449-9454	value	
39-13	9455-9457	of	
39-14	9458-9467	wal_level	
39-15	9468-9469	=	
39-16	9470-9477	logical	
39-17	9478-9481	and	
39-18	9482-9490	provides	
39-19	9491-9494	for	
39-20	9495-9502	logical	
39-21	9503-9511	decoding	
39-22	9512-9515	and	
39-23	9516-9523	logical	
39-24	9524-9535	replication	
39-25	9535-9536	.	
39-26	9537-9539	It	
39-27	9540-9544	must	
39-28	9545-9547	be	
39-29	9548-9554	turned	
39-30	9555-9557	on	
39-31	9558-9561	for	
39-32	9562-9565	the	
39-33	9566-9576	publishing	
39-34	9577-9583	server	
39-35	9583-9584	.	

#Text=From the perspective of WAL records, this level is virtually the same as replica: records are added that relate to replication origins, as well as arbitrary logical records that applications can add to WAL. But logical decoding mainly depends on the information on the transactions being executed since it is needed to create the data snapshot to track changes to the system catalog. We will not go into details of backup and replication now since this is a topic for a separate series of articles. Reliability of writing It's clear that a logging technique must be reliable and ensure recovery whatever the circumstances (certainly, not related to corruption of the data storage media). Many things affect reliability, of which we will discuss caching, corruption of data and atomicity of writing.
40-1	9585-9589	From	
40-2	9590-9593	the	
40-3	9594-9605	perspective	
40-4	9606-9608	of	
40-5	9609-9612	WAL	
40-6	9613-9620	records	
40-7	9620-9621	,	
40-8	9622-9626	this	
40-9	9627-9632	level	
40-10	9633-9635	is	
40-11	9636-9645	virtually	
40-12	9646-9649	the	
40-13	9650-9654	same	
40-14	9655-9657	as	
40-15	9658-9665	replica	
40-16	9665-9666	:	
40-17	9667-9674	records	
40-18	9675-9678	are	
40-19	9679-9684	added	
40-20	9685-9689	that	
40-21	9690-9696	relate	
40-22	9697-9699	to	
40-23	9700-9711	replication	
40-24	9712-9719	origins	
40-25	9719-9720	,	
40-26	9721-9723	as	
40-27	9724-9728	well	
40-28	9729-9731	as	
40-29	9732-9741	arbitrary	
40-30	9742-9749	logical	
40-31	9750-9757	records	
40-32	9758-9762	that	
40-33	9763-9775	applications	
40-34	9776-9779	can	
40-35	9780-9783	add	
40-36	9784-9786	to	
40-37	9787-9790	WAL	
40-38	9790-9791	.	
40-39	9792-9795	But	
40-40	9796-9803	logical	
40-41	9804-9812	decoding	
40-42	9813-9819	mainly	
40-43	9820-9827	depends	
40-44	9828-9830	on	
40-45	9831-9834	the	
40-46	9835-9846	information	
40-47	9847-9849	on	
40-48	9850-9853	the	
40-49	9854-9866	transactions	
40-50	9867-9872	being	
40-51	9873-9881	executed	
40-52	9882-9887	since	
40-53	9888-9890	it	
40-54	9891-9893	is	
40-55	9894-9900	needed	
40-56	9901-9903	to	
40-57	9904-9910	create	
40-58	9911-9914	the	
40-59	9915-9919	data	
40-60	9920-9928	snapshot	
40-61	9929-9931	to	
40-62	9932-9937	track	
40-63	9938-9945	changes	
40-64	9946-9948	to	
40-65	9949-9952	the	
40-66	9953-9959	system	
40-67	9960-9967	catalog	
40-68	9967-9968	.	
40-69	9969-9971	We	
40-70	9972-9976	will	
40-71	9977-9980	not	
40-72	9981-9983	go	
40-73	9984-9988	into	
40-74	9989-9996	details	
40-75	9997-9999	of	
40-76	10000-10006	backup	
40-77	10007-10010	and	
40-78	10011-10022	replication	
40-79	10023-10026	now	
40-80	10027-10032	since	
40-81	10033-10037	this	
40-82	10038-10040	is	
40-83	10041-10042	a	
40-84	10043-10048	topic	
40-85	10049-10052	for	
40-86	10053-10054	a	
40-87	10055-10063	separate	
40-88	10064-10070	series	
40-89	10071-10073	of	
40-90	10074-10082	articles	
40-91	10082-10083	.	
40-92	10084-10095	Reliability	
40-93	10096-10098	of	
40-94	10099-10106	writing	
40-95	10107-10111	It's	
40-96	10112-10117	clear	
40-97	10118-10122	that	
40-98	10123-10124	a	
40-99	10125-10132	logging	
40-100	10133-10142	technique	
40-101	10143-10147	must	
40-102	10148-10150	be	
40-103	10151-10159	reliable	
40-104	10160-10163	and	
40-105	10164-10170	ensure	
40-106	10171-10179	recovery	
40-107	10180-10188	whatever	
40-108	10189-10192	the	
40-109	10193-10206	circumstances	
40-110	10207-10208	(	
40-111	10208-10217	certainly	
40-112	10217-10218	,	
40-113	10219-10222	not	
40-114	10223-10230	related	
40-115	10231-10233	to	
40-116	10234-10244	corruption	
40-117	10245-10247	of	
40-118	10248-10251	the	
40-119	10252-10256	data	
40-120	10257-10264	storage	
40-121	10265-10270	media	
40-122	10270-10271	)	
40-123	10271-10272	.	
40-124	10273-10277	Many	
40-125	10278-10284	things	
40-126	10285-10291	affect	
40-127	10292-10303	reliability	
40-128	10303-10304	,	
40-129	10305-10307	of	
40-130	10308-10313	which	
40-131	10314-10316	we	
40-132	10317-10321	will	
40-133	10322-10329	discuss	
40-134	10330-10337	caching	
40-135	10337-10338	,	
40-136	10339-10349	corruption	
40-137	10350-10352	of	
40-138	10353-10357	data	
40-139	10358-10361	and	
40-140	10362-10371	atomicity	
40-141	10372-10374	of	
40-142	10375-10382	writing	
40-143	10382-10383	.	

#Text=Caching Multiple caches stand in the way of data to a nonvolatile storage (such as a hard disk drive platter). If a program (any, but PostgreSQL in this case) asks the operating system (OS) to write something on disk, the OS transfers the data to its RAM cache. Writing actually happens asynchronously, depending on the settings of I/O scheduler of the OS.
41-1	10384-10391	Caching	
41-2	10392-10400	Multiple	
41-3	10401-10407	caches	
41-4	10408-10413	stand	
41-5	10414-10416	in	
41-6	10417-10420	the	
41-7	10421-10424	way	
41-8	10425-10427	of	
41-9	10428-10432	data	
41-10	10433-10435	to	
41-11	10436-10437	a	
41-12	10438-10449	nonvolatile	
41-13	10450-10457	storage	
41-14	10458-10459	(	
41-15	10459-10463	such	
41-16	10464-10466	as	
41-17	10467-10468	a	
41-18	10469-10473	hard	
41-19	10474-10478	disk	
41-20	10479-10484	drive	
41-21	10485-10492	platter	
41-22	10492-10493	)	
41-23	10493-10494	.	
41-24	10495-10497	If	
41-25	10498-10499	a	
41-26	10500-10507	program	
41-27	10508-10509	(	
41-28	10509-10512	any	
41-29	10512-10513	,	
41-30	10514-10517	but	
41-31	10518-10528	PostgreSQL	
41-32	10529-10531	in	
41-33	10532-10536	this	
41-34	10537-10541	case	
41-35	10541-10542	)	
41-36	10543-10547	asks	
41-37	10548-10551	the	
41-38	10552-10561	operating	
41-39	10562-10568	system	
41-40	10569-10570	(	
41-41	10570-10572	OS	
41-42	10572-10573	)	
41-43	10574-10576	to	
41-44	10577-10582	write	
41-45	10583-10592	something	
41-46	10593-10595	on	
41-47	10596-10600	disk	
41-48	10600-10601	,	
41-49	10602-10605	the	
41-50	10606-10608	OS	
41-51	10609-10618	transfers	
41-52	10619-10622	the	
41-53	10623-10627	data	
41-54	10628-10630	to	
41-55	10631-10634	its	
41-56	10635-10638	RAM	
41-57	10639-10644	cache	
41-58	10644-10645	.	
41-59	10646-10653	Writing	
41-60	10654-10662	actually	
41-61	10663-10670	happens	
41-62	10671-10685	asynchronously	
41-63	10685-10686	,	
41-64	10687-10696	depending	
41-65	10697-10699	on	
41-66	10700-10703	the	
41-67	10704-10712	settings	
41-68	10713-10715	of	
41-69	10716-10717	I	
41-70	10717-10718	/	
41-71	10718-10719	O	
41-72	10720-10729	scheduler	
41-73	10730-10732	of	
41-74	10733-10736	the	
41-75	10737-10739	OS	
41-76	10739-10740	.	

#Text=When the OS decides to write the data, they get into the cache of the storage (hard disk). Electronics of the storage can also postpone writing, for example, by grouping data that are more efficient to be written together. And if a RAID controller is used, one more caching level is added between the OS and disk. So, without taking special measures, it is absolutely unclear when the data is actually saved in a reliable manner. And usually it makes no difference, but there are critical areas where PostgreSQL must be sure that the data are written with due reliability. This is, primarily, logging (if a WAL record did not reach disk, it will be lost along with the rest of the RAM contents) and a checkpoint (we must be sure that dirty pages are really written to disk). But there are other situations, such as performing unlogged operations at the level of minimal and so on.
42-1	10741-10745	When	
42-2	10746-10749	the	
42-3	10750-10752	OS	
42-4	10753-10760	decides	
42-5	10761-10763	to	
42-6	10764-10769	write	
42-7	10770-10773	the	
42-8	10774-10778	data	
42-9	10778-10779	,	
42-10	10780-10784	they	
42-11	10785-10788	get	
42-12	10789-10793	into	
42-13	10794-10797	the	
42-14	10798-10803	cache	
42-15	10804-10806	of	
42-16	10807-10810	the	
42-17	10811-10818	storage	
42-18	10819-10820	(	
42-19	10820-10824	hard	
42-20	10825-10829	disk	
42-21	10829-10830	)	
42-22	10830-10831	.	
42-23	10832-10843	Electronics	
42-24	10844-10846	of	
42-25	10847-10850	the	
42-26	10851-10858	storage	
42-27	10859-10862	can	
42-28	10863-10867	also	
42-29	10868-10876	postpone	
42-30	10877-10884	writing	
42-31	10884-10885	,	
42-32	10886-10889	for	
42-33	10890-10897	example	
42-34	10897-10898	,	
42-35	10899-10901	by	
42-36	10902-10910	grouping	
42-37	10911-10915	data	
42-38	10916-10920	that	
42-39	10921-10924	are	
42-40	10925-10929	more	
42-41	10930-10939	efficient	
42-42	10940-10942	to	
42-43	10943-10945	be	
42-44	10946-10953	written	
42-45	10954-10962	together	
42-46	10962-10963	.	
42-47	10964-10967	And	
42-48	10968-10970	if	
42-49	10971-10972	a	
42-50	10973-10977	RAID	
42-51	10978-10988	controller	
42-52	10989-10991	is	
42-53	10992-10996	used	
42-54	10996-10997	,	
42-55	10998-11001	one	
42-56	11002-11006	more	
42-57	11007-11014	caching	
42-58	11015-11020	level	
42-59	11021-11023	is	
42-60	11024-11029	added	
42-61	11030-11037	between	
42-62	11038-11041	the	
42-63	11042-11044	OS	
42-64	11045-11048	and	
42-65	11049-11053	disk	
42-66	11053-11054	.	
42-67	11055-11057	So	
42-68	11057-11058	,	
42-69	11059-11066	without	
42-70	11067-11073	taking	
42-71	11074-11081	special	
42-72	11082-11090	measures	
42-73	11090-11091	,	
42-74	11092-11094	it	
42-75	11095-11097	is	
42-76	11098-11108	absolutely	
42-77	11109-11116	unclear	
42-78	11117-11121	when	
42-79	11122-11125	the	
42-80	11126-11130	data	
42-81	11131-11133	is	
42-82	11134-11142	actually	
42-83	11143-11148	saved	
42-84	11149-11151	in	
42-85	11152-11153	a	
42-86	11154-11162	reliable	
42-87	11163-11169	manner	
42-88	11169-11170	.	
42-89	11171-11174	And	
42-90	11175-11182	usually	
42-91	11183-11185	it	
42-92	11186-11191	makes	
42-93	11192-11194	no	
42-94	11195-11205	difference	
42-95	11205-11206	,	
42-96	11207-11210	but	
42-97	11211-11216	there	
42-98	11217-11220	are	
42-99	11221-11229	critical	
42-100	11230-11235	areas	
42-101	11236-11241	where	
42-102	11242-11252	PostgreSQL	
42-103	11253-11257	must	
42-104	11258-11260	be	
42-105	11261-11265	sure	
42-106	11266-11270	that	
42-107	11271-11274	the	
42-108	11275-11279	data	
42-109	11280-11283	are	
42-110	11284-11291	written	
42-111	11292-11296	with	
42-112	11297-11300	due	
42-113	11301-11312	reliability	
42-114	11312-11313	.	
42-115	11314-11318	This	
42-116	11319-11321	is	
42-117	11321-11322	,	
42-118	11323-11332	primarily	
42-119	11332-11333	,	
42-120	11334-11341	logging	
42-121	11342-11343	(	
42-122	11343-11345	if	
42-123	11346-11347	a	
42-124	11348-11351	WAL	
42-125	11352-11358	record	
42-126	11359-11362	did	
42-127	11363-11366	not	
42-128	11367-11372	reach	
42-129	11373-11377	disk	
42-130	11377-11378	,	
42-131	11379-11381	it	
42-132	11382-11386	will	
42-133	11387-11389	be	
42-134	11390-11394	lost	
42-135	11395-11400	along	
42-136	11401-11405	with	
42-137	11406-11409	the	
42-138	11410-11414	rest	
42-139	11415-11417	of	
42-140	11418-11421	the	
42-141	11422-11425	RAM	
42-142	11426-11434	contents	
42-143	11434-11435	)	
42-144	11436-11439	and	
42-145	11440-11441	a	
42-146	11442-11452	checkpoint	
42-147	11453-11454	(	
42-148	11454-11456	we	
42-149	11457-11461	must	
42-150	11462-11464	be	
42-151	11465-11469	sure	
42-152	11470-11474	that	
42-153	11475-11480	dirty	
42-154	11481-11486	pages	
42-155	11487-11490	are	
42-156	11491-11497	really	
42-157	11498-11505	written	
42-158	11506-11508	to	
42-159	11509-11513	disk	
42-160	11513-11514	)	
42-161	11514-11515	.	
42-162	11516-11519	But	
42-163	11520-11525	there	
42-164	11526-11529	are	
42-165	11530-11535	other	
42-166	11536-11546	situations	
42-167	11546-11547	,	
42-168	11548-11552	such	
42-169	11553-11555	as	
42-170	11556-11566	performing	
42-171	11567-11575	unlogged	
42-172	11576-11586	operations	
42-173	11587-11589	at	
42-174	11590-11593	the	
42-175	11594-11599	level	
42-176	11600-11602	of	
42-177	11603-11610	minimal	
42-178	11611-11614	and	
42-179	11615-11617	so	
42-180	11618-11620	on	
42-181	11620-11621	.	

#Text=The OS provides capabilities to ensure immediate writing of the data to nonvolatile memory. There are a few options, but they reduce to the two main: either after a write, the synchronization call is performed (fsync, fdatasync) or after opening a file (or writing to it) a special flag is set to indicate a need for synchronization or even for a direct write bypassing the OS cache. As for WAL, the pg_test_fsync utility allows us to choose a method that best suits a particular OS and a particular file system, and this method is specified in the wal_sync_method parameter. Normal files are synchronized using fsync.
43-1	11622-11625	The	
43-2	11626-11628	OS	
43-3	11629-11637	provides	
43-4	11638-11650	capabilities	
43-5	11651-11653	to	
43-6	11654-11660	ensure	
43-7	11661-11670	immediate	
43-8	11671-11678	writing	
43-9	11679-11681	of	
43-10	11682-11685	the	
43-11	11686-11690	data	
43-12	11691-11693	to	
43-13	11694-11705	nonvolatile	
43-14	11706-11712	memory	
43-15	11712-11713	.	
43-16	11714-11719	There	
43-17	11720-11723	are	
43-18	11724-11725	a	
43-19	11726-11729	few	
43-20	11730-11737	options	
43-21	11737-11738	,	
43-22	11739-11742	but	
43-23	11743-11747	they	
43-24	11748-11754	reduce	
43-25	11755-11757	to	
43-26	11758-11761	the	
43-27	11762-11765	two	
43-28	11766-11770	main	
43-29	11770-11771	:	
43-30	11772-11778	either	
43-31	11779-11784	after	
43-32	11785-11786	a	
43-33	11787-11792	write	
43-34	11792-11793	,	
43-35	11794-11797	the	
43-36	11798-11813	synchronization	
43-37	11814-11818	call	
43-38	11819-11821	is	
43-39	11822-11831	performed	
43-40	11832-11833	(	
43-41	11833-11838	fsync	
43-42	11838-11839	,	
43-43	11840-11849	fdatasync	
43-44	11849-11850	)	
43-45	11851-11853	or	
43-46	11854-11859	after	
43-47	11860-11867	opening	
43-48	11868-11869	a	
43-49	11870-11874	file	
43-50	11875-11876	(	
43-51	11876-11878	or	
43-52	11879-11886	writing	
43-53	11887-11889	to	
43-54	11890-11892	it	
43-55	11892-11893	)	
43-56	11894-11895	a	
43-57	11896-11903	special	
43-58	11904-11908	flag	
43-59	11909-11911	is	
43-60	11912-11915	set	
43-61	11916-11918	to	
43-62	11919-11927	indicate	
43-63	11928-11929	a	
43-64	11930-11934	need	
43-65	11935-11938	for	
43-66	11939-11954	synchronization	
43-67	11955-11957	or	
43-68	11958-11962	even	
43-69	11963-11966	for	
43-70	11967-11968	a	
43-71	11969-11975	direct	
43-72	11976-11981	write	
43-73	11982-11991	bypassing	
43-74	11992-11995	the	
43-75	11996-11998	OS	
43-76	11999-12004	cache	
43-77	12004-12005	.	
43-78	12006-12008	As	
43-79	12009-12012	for	
43-80	12013-12016	WAL	
43-81	12016-12017	,	
43-82	12018-12021	the	
43-83	12022-12035	pg_test_fsync	
43-84	12036-12043	utility	
43-85	12044-12050	allows	
43-86	12051-12053	us	
43-87	12054-12056	to	
43-88	12057-12063	choose	
43-89	12064-12065	a	
43-90	12066-12072	method	
43-91	12073-12077	that	
43-92	12078-12082	best	
43-93	12083-12088	suits	
43-94	12089-12090	a	
43-95	12091-12101	particular	
43-96	12102-12104	OS	
43-97	12105-12108	and	
43-98	12109-12110	a	
43-99	12111-12121	particular	
43-100	12122-12126	file	
43-101	12127-12133	system	
43-102	12133-12134	,	
43-103	12135-12138	and	
43-104	12139-12143	this	
43-105	12144-12150	method	
43-106	12151-12153	is	
43-107	12154-12163	specified	
43-108	12164-12166	in	
43-109	12167-12170	the	
43-110	12171-12186	wal_sync_method	
43-111	12187-12196	parameter	
43-112	12196-12197	.	
43-113	12198-12204	Normal	
43-114	12205-12210	files	
43-115	12211-12214	are	
43-116	12215-12227	synchronized	
43-117	12228-12233	using	
43-118	12234-12239	fsync	
43-119	12239-12240	.	

#Text=A subtle point is that to choose the method, we need to take into account hardware characteristics. For example: if a controller employing a battery-backup unit (BBU) is used, there is no reason why we should avoid using the cache of the controller since the BBU enables saving the data in case of power outage. The documentation provides a lot of context on this. In any case, synchronization is expensive and performed at most as often as absolutely necessary (we will get back to this a bit later, when we discuss the performance).
44-1	12241-12242	A	
44-2	12243-12249	subtle	
44-3	12250-12255	point	
44-4	12256-12258	is	
44-5	12259-12263	that	
44-6	12264-12266	to	
44-7	12267-12273	choose	
44-8	12274-12277	the	
44-9	12278-12284	method	
44-10	12284-12285	,	
44-11	12286-12288	we	
44-12	12289-12293	need	
44-13	12294-12296	to	
44-14	12297-12301	take	
44-15	12302-12306	into	
44-16	12307-12314	account	
44-17	12315-12323	hardware	
44-18	12324-12339	characteristics	
44-19	12339-12340	.	
44-20	12341-12344	For	
44-21	12345-12352	example	
44-22	12352-12353	:	
44-23	12354-12356	if	
44-24	12357-12358	a	
44-25	12359-12369	controller	
44-26	12370-12379	employing	
44-27	12380-12381	a	
44-28	12382-12396	battery-backup	
44-29	12397-12401	unit	
44-30	12402-12403	(	
44-31	12403-12406	BBU	
44-32	12406-12407	)	
44-33	12408-12410	is	
44-34	12411-12415	used	
44-35	12415-12416	,	
44-36	12417-12422	there	
44-37	12423-12425	is	
44-38	12426-12428	no	
44-39	12429-12435	reason	
44-40	12436-12439	why	
44-41	12440-12442	we	
44-42	12443-12449	should	
44-43	12450-12455	avoid	
44-44	12456-12461	using	
44-45	12462-12465	the	
44-46	12466-12471	cache	
44-47	12472-12474	of	
44-48	12475-12478	the	
44-49	12479-12489	controller	
44-50	12490-12495	since	
44-51	12496-12499	the	
44-52	12500-12503	BBU	
44-53	12504-12511	enables	
44-54	12512-12518	saving	
44-55	12519-12522	the	
44-56	12523-12527	data	
44-57	12528-12530	in	
44-58	12531-12535	case	
44-59	12536-12538	of	
44-60	12539-12544	power	
44-61	12545-12551	outage	
44-62	12551-12552	.	
44-63	12553-12556	The	
44-64	12557-12570	documentation	
44-65	12571-12579	provides	
44-66	12580-12581	a	
44-67	12582-12585	lot	
44-68	12586-12588	of	
44-69	12589-12596	context	
44-70	12597-12599	on	
44-71	12600-12604	this	
44-72	12604-12605	.	
44-73	12606-12608	In	
44-74	12609-12612	any	
44-75	12613-12617	case	
44-76	12617-12618	,	
44-77	12619-12634	synchronization	
44-78	12635-12637	is	
44-79	12638-12647	expensive	
44-80	12648-12651	and	
44-81	12652-12661	performed	
44-82	12662-12664	at	
44-83	12665-12669	most	
44-84	12670-12672	as	
44-85	12673-12678	often	
44-86	12679-12681	as	
44-87	12682-12692	absolutely	
44-88	12693-12702	necessary	
44-89	12703-12704	(	
44-90	12704-12706	we	
44-91	12707-12711	will	
44-92	12712-12715	get	
44-93	12716-12720	back	
44-94	12721-12723	to	
44-95	12724-12728	this	
44-96	12729-12730	a	
44-97	12731-12734	bit	
44-98	12735-12740	later	
44-99	12740-12741	,	
44-100	12742-12746	when	
44-101	12747-12749	we	
44-102	12750-12757	discuss	
44-103	12758-12761	the	
44-104	12762-12773	performance	
44-105	12773-12774	)	
44-106	12774-12775	.	

#Text=In general, you can turn off the synchronization (the fsync parameter is responsible for this), but in this case, you have to forget about the reliability of storage. By turning fsync off you agree that the data can be irreversibly lost at any time. Probably, the only reasonable use case for this parameter is a temporary increase of the performance when the data can be easily restored from a different source (like at the initial migration). Data corruption Hardware is imperfect and the data can be corrupted in the storage when transmitted over interface cables, and so on. Some of such errors are handled at the hardware level, but the others are not. For quick detection of an issue, checksums are provided in WAL records.
45-1	12776-12778	In	
45-2	12779-12786	general	
45-3	12786-12787	,	
45-4	12788-12791	you	
45-5	12792-12795	can	
45-6	12796-12800	turn	
45-7	12801-12804	off	
45-8	12805-12808	the	
45-9	12809-12824	synchronization	
45-10	12825-12826	(	
45-11	12826-12829	the	
45-12	12830-12835	fsync	
45-13	12836-12845	parameter	
45-14	12846-12848	is	
45-15	12849-12860	responsible	
45-16	12861-12864	for	
45-17	12865-12869	this	
45-18	12869-12870	)	
45-19	12870-12871	,	
45-20	12872-12875	but	
45-21	12876-12878	in	
45-22	12879-12883	this	
45-23	12884-12888	case	
45-24	12888-12889	,	
45-25	12890-12893	you	
45-26	12894-12898	have	
45-27	12899-12901	to	
45-28	12902-12908	forget	
45-29	12909-12914	about	
45-30	12915-12918	the	
45-31	12919-12930	reliability	
45-32	12931-12933	of	
45-33	12934-12941	storage	
45-34	12941-12942	.	
45-35	12943-12945	By	
45-36	12946-12953	turning	
45-37	12954-12959	fsync	
45-38	12960-12963	off	
45-39	12964-12967	you	
45-40	12968-12973	agree	
45-41	12974-12978	that	
45-42	12979-12982	the	
45-43	12983-12987	data	
45-44	12988-12991	can	
45-45	12992-12994	be	
45-46	12995-13007	irreversibly	
45-47	13008-13012	lost	
45-48	13013-13015	at	
45-49	13016-13019	any	
45-50	13020-13024	time	
45-51	13024-13025	.	
45-52	13026-13034	Probably	
45-53	13034-13035	,	
45-54	13036-13039	the	
45-55	13040-13044	only	
45-56	13045-13055	reasonable	
45-57	13056-13059	use	
45-58	13060-13064	case	
45-59	13065-13068	for	
45-60	13069-13073	this	
45-61	13074-13083	parameter	
45-62	13084-13086	is	
45-63	13087-13088	a	
45-64	13089-13098	temporary	
45-65	13099-13107	increase	
45-66	13108-13110	of	
45-67	13111-13114	the	
45-68	13115-13126	performance	
45-69	13127-13131	when	
45-70	13132-13135	the	
45-71	13136-13140	data	
45-72	13141-13144	can	
45-73	13145-13147	be	
45-74	13148-13154	easily	
45-75	13155-13163	restored	
45-76	13164-13168	from	
45-77	13169-13170	a	
45-78	13171-13180	different	
45-79	13181-13187	source	
45-80	13188-13189	(	
45-81	13189-13193	like	
45-82	13194-13196	at	
45-83	13197-13200	the	
45-84	13201-13208	initial	
45-85	13209-13218	migration	
45-86	13218-13219	)	
45-87	13219-13220	.	
45-88	13221-13225	Data	
45-89	13226-13236	corruption	
45-90	13237-13245	Hardware	
45-91	13246-13248	is	
45-92	13249-13258	imperfect	
45-93	13259-13262	and	
45-94	13263-13266	the	
45-95	13267-13271	data	
45-96	13272-13275	can	
45-97	13276-13278	be	
45-98	13279-13288	corrupted	
45-99	13289-13291	in	
45-100	13292-13295	the	
45-101	13296-13303	storage	
45-102	13304-13308	when	
45-103	13309-13320	transmitted	
45-104	13321-13325	over	
45-105	13326-13335	interface	
45-106	13336-13342	cables	
45-107	13342-13343	,	
45-108	13344-13347	and	
45-109	13348-13350	so	
45-110	13351-13353	on	
45-111	13353-13354	.	
45-112	13355-13359	Some	
45-113	13360-13362	of	
45-114	13363-13367	such	
45-115	13368-13374	errors	
45-116	13375-13378	are	
45-117	13379-13386	handled	
45-118	13387-13389	at	
45-119	13390-13393	the	
45-120	13394-13402	hardware	
45-121	13403-13408	level	
45-122	13408-13409	,	
45-123	13410-13413	but	
45-124	13414-13417	the	
45-125	13418-13424	others	
45-126	13425-13428	are	
45-127	13429-13432	not	
45-128	13432-13433	.	
45-129	13434-13437	For	
45-130	13438-13443	quick	
45-131	13444-13453	detection	
45-132	13454-13456	of	
45-133	13457-13459	an	
45-134	13460-13465	issue	
45-135	13465-13466	,	
45-136	13467-13476	checksums	
45-137	13477-13480	are	
45-138	13481-13489	provided	
45-139	13490-13492	in	
45-140	13493-13496	WAL	
45-141	13497-13504	records	
45-142	13504-13505	.	

#Text=Data pages can also be protected by checksums. Earlier this could be done only at the cluster initialization, but in PostgreSQL 12 it is possible to turn the checksums on and off by means of the pg_checksums utility (but only when the server is shut down rather than «on the fly» so far). In a production environment, checksums must be obligatory turned on regardless of the overhead costs of computing and verifying them. This reduces the probability of not detecting the corruption duly. It reduces, but not eliminates the probability.
46-1	13506-13510	Data	
46-2	13511-13516	pages	
46-3	13517-13520	can	
46-4	13521-13525	also	
46-5	13526-13528	be	
46-6	13529-13538	protected	
46-7	13539-13541	by	
46-8	13542-13551	checksums	
46-9	13551-13552	.	
46-10	13553-13560	Earlier	
46-11	13561-13565	this	
46-12	13566-13571	could	
46-13	13572-13574	be	
46-14	13575-13579	done	
46-15	13580-13584	only	
46-16	13585-13587	at	
46-17	13588-13591	the	
46-18	13592-13599	cluster	
46-19	13600-13614	initialization	
46-20	13614-13615	,	
46-21	13616-13619	but	
46-22	13620-13622	in	
46-23	13623-13633	PostgreSQL	
46-24	13633-13634	 	
46-25	13634-13636	12	
46-26	13637-13639	it	
46-27	13640-13642	is	
46-28	13643-13651	possible	
46-29	13652-13654	to	
46-30	13655-13659	turn	
46-31	13660-13663	the	
46-32	13664-13673	checksums	
46-33	13674-13676	on	
46-34	13677-13680	and	
46-35	13681-13684	off	
46-36	13685-13687	by	
46-37	13688-13693	means	
46-38	13694-13696	of	
46-39	13697-13700	the	
46-40	13701-13713	pg_checksums	
46-41	13714-13721	utility	
46-42	13722-13723	(	
46-43	13723-13726	but	
46-44	13727-13731	only	
46-45	13732-13736	when	
46-46	13737-13740	the	
46-47	13741-13747	server	
46-48	13748-13750	is	
46-49	13751-13755	shut	
46-50	13756-13760	down	
46-51	13761-13767	rather	
46-52	13768-13772	than	
46-53	13773-13774	«	
46-54	13774-13776	on	
46-55	13777-13780	the	
46-56	13781-13784	fly	
46-57	13784-13785	»	
46-58	13786-13788	so	
46-59	13789-13792	far	
46-60	13792-13793	)	
46-61	13793-13794	.	
46-62	13795-13797	In	
46-63	13798-13799	a	
46-64	13800-13810	production	
46-65	13811-13822	environment	
46-66	13822-13823	,	
46-67	13824-13833	checksums	
46-68	13834-13838	must	
46-69	13839-13841	be	
46-70	13842-13852	obligatory	
46-71	13853-13859	turned	
46-72	13860-13862	on	
46-73	13863-13873	regardless	
46-74	13874-13876	of	
46-75	13877-13880	the	
46-76	13881-13889	overhead	
46-77	13890-13895	costs	
46-78	13896-13898	of	
46-79	13899-13908	computing	
46-80	13909-13912	and	
46-81	13913-13922	verifying	
46-82	13923-13927	them	
46-83	13927-13928	.	
46-84	13929-13933	This	
46-85	13934-13941	reduces	
46-86	13942-13945	the	
46-87	13946-13957	probability	
46-88	13958-13960	of	
46-89	13961-13964	not	
46-90	13965-13974	detecting	
46-91	13975-13978	the	
46-92	13979-13989	corruption	
46-93	13990-13994	duly	
46-94	13994-13995	.	
46-95	13996-13998	It	
46-96	13999-14006	reduces	
46-97	14006-14007	,	
46-98	14008-14011	but	
46-99	14012-14015	not	
46-100	14016-14026	eliminates	
46-101	14027-14030	the	
46-102	14031-14042	probability	
46-103	14042-14043	.	

#Text=First, checksums are verified only when the page is accessed; therefore, the corruption may escape detection until the moment when it gets into all backups. It's for this reason that pg_probackup verifies the checksums of all the cluster pages during the data backup. Second, a page filled with zeros is regarded as correct, so if the file system mistakenly «nullifies» a file, this can escape detection. Third, checksums protect only the main fork of the data. The other forks and the rest of files (for instance, transaction statuses XACT) are not protected at all.
47-1	14044-14049	First	
47-2	14049-14050	,	
47-3	14051-14060	checksums	
47-4	14061-14064	are	
47-5	14065-14073	verified	
47-6	14074-14078	only	
47-7	14079-14083	when	
47-8	14084-14087	the	
47-9	14088-14092	page	
47-10	14093-14095	is	
47-11	14096-14104	accessed	
47-12	14104-14105	;	
47-13	14106-14115	therefore	
47-14	14115-14116	,	
47-15	14117-14120	the	
47-16	14121-14131	corruption	
47-17	14132-14135	may	
47-18	14136-14142	escape	
47-19	14143-14152	detection	
47-20	14153-14158	until	
47-21	14159-14162	the	
47-22	14163-14169	moment	
47-23	14170-14174	when	
47-24	14175-14177	it	
47-25	14178-14182	gets	
47-26	14183-14187	into	
47-27	14188-14191	all	
47-28	14192-14199	backups	
47-29	14199-14200	.	
47-30	14201-14205	It's	
47-31	14206-14209	for	
47-32	14210-14214	this	
47-33	14215-14221	reason	
47-34	14222-14226	that	
47-35	14227-14239	pg_probackup	
47-36	14240-14248	verifies	
47-37	14249-14252	the	
47-38	14253-14262	checksums	
47-39	14263-14265	of	
47-40	14266-14269	all	
47-41	14270-14273	the	
47-42	14274-14281	cluster	
47-43	14282-14287	pages	
47-44	14288-14294	during	
47-45	14295-14298	the	
47-46	14299-14303	data	
47-47	14304-14310	backup	
47-48	14310-14311	.	
47-49	14312-14318	Second	
47-50	14318-14319	,	
47-51	14320-14321	a	
47-52	14322-14326	page	
47-53	14327-14333	filled	
47-54	14334-14338	with	
47-55	14339-14344	zeros	
47-56	14345-14347	is	
47-57	14348-14356	regarded	
47-58	14357-14359	as	
47-59	14360-14367	correct	
47-60	14367-14368	,	
47-61	14369-14371	so	
47-62	14372-14374	if	
47-63	14375-14378	the	
47-64	14379-14383	file	
47-65	14384-14390	system	
47-66	14391-14401	mistakenly	
47-67	14402-14403	«	
47-68	14403-14412	nullifies	
47-69	14412-14413	»	
47-70	14414-14415	a	
47-71	14416-14420	file	
47-72	14420-14421	,	
47-73	14422-14426	this	
47-74	14427-14430	can	
47-75	14431-14437	escape	
47-76	14438-14447	detection	
47-77	14447-14448	.	
47-78	14449-14454	Third	
47-79	14454-14455	,	
47-80	14456-14465	checksums	
47-81	14466-14473	protect	
47-82	14474-14478	only	
47-83	14479-14482	the	
47-84	14483-14487	main	
47-85	14488-14492	fork	
47-86	14493-14495	of	
47-87	14496-14499	the	
47-88	14500-14504	data	
47-89	14504-14505	.	
47-90	14506-14509	The	
47-91	14510-14515	other	
47-92	14516-14521	forks	
47-93	14522-14525	and	
47-94	14526-14529	the	
47-95	14530-14534	rest	
47-96	14535-14537	of	
47-97	14538-14543	files	
47-98	14544-14545	(	
47-99	14545-14548	for	
47-100	14549-14557	instance	
47-101	14557-14558	,	
47-102	14559-14570	transaction	
47-103	14571-14579	statuses	
47-104	14580-14584	XACT	
47-105	14584-14585	)	
47-106	14586-14589	are	
47-107	14590-14593	not	
47-108	14594-14603	protected	
47-109	14604-14606	at	
47-110	14607-14610	all	
47-111	14610-14611	.	

#Text=Alas. Let's see how it works. First we make sure that checksums are turned on (note that in a package installed on Debian-like systems this is not the case by default): => SHOW data_checksums; data_checksums
48-1	14612-14616	Alas	
48-2	14616-14617	.	
48-3	14618-14623	Let's	
48-4	14624-14627	see	
48-5	14628-14631	how	
48-6	14632-14634	it	
48-7	14635-14640	works	
48-8	14640-14641	.	
48-9	14642-14647	First	
48-10	14648-14650	we	
48-11	14651-14655	make	
48-12	14656-14660	sure	
48-13	14661-14665	that	
48-14	14666-14675	checksums	
48-15	14676-14679	are	
48-16	14680-14686	turned	
48-17	14687-14689	on	
48-18	14690-14691	(	
48-19	14691-14695	note	
48-20	14696-14700	that	
48-21	14701-14703	in	
48-22	14704-14705	a	
48-23	14706-14713	package	
48-24	14714-14723	installed	
48-25	14724-14726	on	
48-26	14727-14738	Debian-like	
48-27	14739-14746	systems	
48-28	14747-14751	this	
48-29	14752-14754	is	
48-30	14755-14758	not	
48-31	14759-14762	the	
48-32	14763-14767	case	
48-33	14768-14770	by	
48-34	14771-14778	default	
48-35	14778-14779	)	
48-36	14779-14780	:	
48-37	14781-14782	=	
48-38	14782-14783	>	
48-39	14784-14788	SHOW	
48-40	14789-14803	data_checksums	
48-41	14803-14804	;	
48-42	14805-14819	data_checksums	

#Text=---------------- (1 row) The data_checksums parameter is read-only. This is the file where our table is located: => SELECT pg_relation_filepath('wallevel'); pg_relation_filepath
49-1	14820-14821	-	
49-2	14821-14822	-	
49-3	14822-14823	-	
49-4	14823-14824	-	
49-5	14824-14825	-	
49-6	14825-14826	-	
49-7	14826-14827	-	
49-8	14827-14828	-	
49-9	14828-14829	-	
49-10	14829-14830	-	
49-11	14830-14831	-	
49-12	14831-14832	-	
49-13	14832-14833	-	
49-14	14833-14834	-	
49-15	14834-14835	-	
49-16	14835-14836	-	
49-17	14837-14838	(	
49-18	14838-14839	1	
49-19	14840-14843	row	
49-20	14843-14844	)	
49-21	14845-14848	The	
49-22	14849-14863	data_checksums	
49-23	14864-14873	parameter	
49-24	14874-14876	is	
49-25	14877-14886	read-only	
49-26	14886-14887	.	
49-27	14888-14892	This	
49-28	14893-14895	is	
49-29	14896-14899	the	
49-30	14900-14904	file	
49-31	14905-14910	where	
49-32	14911-14914	our	
49-33	14915-14920	table	
49-34	14921-14923	is	
49-35	14924-14931	located	
49-36	14931-14932	:	
49-37	14933-14934	=	
49-38	14934-14935	>	
49-39	14936-14942	SELECT	
49-40	14943-14963	pg_relation_filepath	
49-41	14963-14964	(	
49-42	14964-14965	'	
49-43	14965-14973	wallevel	
49-44	14973-14974	'	
49-45	14974-14975	)	
49-46	14975-14976	;	
49-47	14977-14997	pg_relation_filepath	

#Text=---------------------- base/16386/24890 (1 row) Let's shut down the server and change a few bytes on the zero page, for example: erase LSN of the last WAL record from the header. student$ sudo pg_ctlcluster 11 main stop
50-1	14998-14999	-	
50-2	14999-15000	-	
50-3	15000-15001	-	
50-4	15001-15002	-	
50-5	15002-15003	-	
50-6	15003-15004	-	
50-7	15004-15005	-	
50-8	15005-15006	-	
50-9	15006-15007	-	
50-10	15007-15008	-	
50-11	15008-15009	-	
50-12	15009-15010	-	
50-13	15010-15011	-	
50-14	15011-15012	-	
50-15	15012-15013	-	
50-16	15013-15014	-	
50-17	15014-15015	-	
50-18	15015-15016	-	
50-19	15016-15017	-	
50-20	15017-15018	-	
50-21	15018-15019	-	
50-22	15019-15020	-	
50-23	15021-15025	base	
50-24	15025-15026	/	
50-25	15026-15031	16386	
50-26	15031-15032	/	
50-27	15032-15037	24890	
50-28	15038-15039	(	
50-29	15039-15040	1	
50-30	15041-15044	row	
50-31	15044-15045	)	
50-32	15046-15051	Let's	
50-33	15052-15056	shut	
50-34	15057-15061	down	
50-35	15062-15065	the	
50-36	15066-15072	server	
50-37	15073-15076	and	
50-38	15077-15083	change	
50-39	15084-15085	a	
50-40	15086-15089	few	
50-41	15090-15095	bytes	
50-42	15096-15098	on	
50-43	15099-15102	the	
50-44	15103-15107	zero	
50-45	15108-15112	page	
50-46	15112-15113	,	
50-47	15114-15117	for	
50-48	15118-15125	example	
50-49	15125-15126	:	
50-50	15127-15132	erase	
50-51	15133-15136	LSN	
50-52	15137-15139	of	
50-53	15140-15143	the	
50-54	15144-15148	last	
50-55	15149-15152	WAL	
50-56	15153-15159	record	
50-57	15160-15164	from	
50-58	15165-15168	the	
50-59	15169-15175	header	
50-60	15175-15176	.	
50-61	15177-15184	student	
50-62	15184-15185	$	
50-63	15186-15190	sudo	
50-64	15191-15204	pg_ctlcluster	
50-65	15205-15207	11	
50-66	15208-15212	main	
50-67	15213-15217	stop	

#Text=postgres$ dd if=/dev/zero of=/var/lib/postgresql/11/main/base/16386/24890 oflag=dsync conv=notrunc bs=1 count=8 8+0 records in 8+0 records out 8 bytes copied, 0,0083022 s, 1,0 kB/s In general, it was not needed to shut down the server. It is sufficient that the page is flushed to disk and evicted from the cache (otherwise, the server would continue working with the page in the cache). But this scenario is more complicated to reproduce.
51-1	15218-15226	postgres	
51-2	15226-15227	$	
51-3	15228-15230	dd	
51-4	15231-15233	if	
51-5	15233-15234	=	
51-6	15234-15235	/	
51-7	15235-15238	dev	
51-8	15238-15239	/	
51-9	15239-15243	zero	
51-10	15244-15246	of	
51-11	15246-15247	=	
51-12	15247-15248	/	
51-13	15248-15251	var	
51-14	15251-15252	/	
51-15	15252-15255	lib	
51-16	15255-15256	/	
51-17	15256-15266	postgresql	
51-18	15266-15267	/	
51-19	15267-15269	11	
51-20	15269-15270	/	
51-21	15270-15274	main	
51-22	15274-15275	/	
51-23	15275-15279	base	
51-24	15279-15280	/	
51-25	15280-15285	16386	
51-26	15285-15286	/	
51-27	15286-15291	24890	
51-28	15292-15297	oflag	
51-29	15297-15298	=	
51-30	15298-15303	dsync	
51-31	15304-15308	conv	
51-32	15308-15309	=	
51-33	15309-15316	notrunc	
51-34	15317-15319	bs	
51-35	15319-15320	=	
51-36	15320-15321	1	
51-37	15322-15327	count	
51-38	15327-15328	=	
51-39	15328-15329	8	
51-40	15330-15331	8	
51-41	15331-15332	+	
51-42	15332-15333	0	
51-43	15334-15341	records	
51-44	15342-15344	in	
51-45	15345-15346	8	
51-46	15346-15347	+	
51-47	15347-15348	0	
51-48	15349-15356	records	
51-49	15357-15360	out	
51-50	15361-15362	8	
51-51	15363-15368	bytes	
51-52	15369-15375	copied	
51-53	15375-15376	,	
51-54	15377-15386	0,0083022	
51-55	15387-15388	s	
51-56	15388-15389	,	
51-57	15390-15393	1,0	
51-58	15394-15396	kB	
51-59	15396-15397	/	
51-60	15397-15398	s	
51-61	15399-15401	In	
51-62	15402-15409	general	
51-63	15409-15410	,	
51-64	15411-15413	it	
51-65	15414-15417	was	
51-66	15418-15421	not	
51-67	15422-15428	needed	
51-68	15429-15431	to	
51-69	15432-15436	shut	
51-70	15437-15441	down	
51-71	15442-15445	the	
51-72	15446-15452	server	
51-73	15452-15453	.	
51-74	15454-15456	It	
51-75	15457-15459	is	
51-76	15460-15470	sufficient	
51-77	15471-15475	that	
51-78	15476-15479	the	
51-79	15480-15484	page	
51-80	15485-15487	is	
51-81	15488-15495	flushed	
51-82	15496-15498	to	
51-83	15499-15503	disk	
51-84	15504-15507	and	
51-85	15508-15515	evicted	
51-86	15516-15520	from	
51-87	15521-15524	the	
51-88	15525-15530	cache	
51-89	15531-15532	(	
51-90	15532-15541	otherwise	
51-91	15541-15542	,	
51-92	15543-15546	the	
51-93	15547-15553	server	
51-94	15554-15559	would	
51-95	15560-15568	continue	
51-96	15569-15576	working	
51-97	15577-15581	with	
51-98	15582-15585	the	
51-99	15586-15590	page	
51-100	15591-15593	in	
51-101	15594-15597	the	
51-102	15598-15603	cache	
51-103	15603-15604	)	
51-104	15604-15605	.	
51-105	15606-15609	But	
51-106	15610-15614	this	
51-107	15615-15623	scenario	
51-108	15624-15626	is	
51-109	15627-15631	more	
51-110	15632-15643	complicated	
51-111	15644-15646	to	
51-112	15647-15656	reproduce	
51-113	15656-15657	.	

#Text=Now we start the server and try to read the table. student$ sudo pg_ctlcluster 11 main start => SELECT * FROM wallevel; WARNING: page verification failed, calculated checksum 23222 but expected 50884 ERROR:
52-1	15658-15661	Now	
52-2	15662-15664	we	
52-3	15665-15670	start	
52-4	15671-15674	the	
52-5	15675-15681	server	
52-6	15682-15685	and	
52-7	15686-15689	try	
52-8	15690-15692	to	
52-9	15693-15697	read	
52-10	15698-15701	the	
52-11	15702-15707	table	
52-12	15707-15708	.	
52-13	15709-15716	student	
52-14	15716-15717	$	
52-15	15718-15722	sudo	
52-16	15723-15736	pg_ctlcluster	
52-17	15737-15739	11	
52-18	15740-15744	main	
52-19	15745-15750	start	
52-20	15751-15752	=	
52-21	15752-15753	>	
52-22	15754-15760	SELECT	
52-23	15761-15762	*	
52-24	15763-15767	FROM	
52-25	15768-15776	wallevel	
52-26	15776-15777	;	
52-27	15778-15785	WARNING	
52-28	15785-15786	:	
52-29	15787-15791	page	
52-30	15792-15804	verification	
52-31	15805-15811	failed	
52-32	15811-15812	,	
52-33	15813-15823	calculated	
52-34	15824-15832	checksum	
52-35	15833-15838	23222	
52-36	15839-15842	but	
52-37	15843-15851	expected	
52-38	15852-15857	50884	
52-39	15858-15863	ERROR	
52-40	15863-15864	:	

#Text=invalid page in block 0 of relation base/16386/24890 But what shall we do if it is impossible to restore the data from backup? The ignore_checksum_failure parameter enables trying to read the table, of course, with a risk of getting corrupted data. => SET ignore_checksum_failure = on;
53-1	15865-15872	invalid	
53-2	15873-15877	page	
53-3	15878-15880	in	
53-4	15881-15886	block	
53-5	15887-15888	0	
53-6	15889-15891	of	
53-7	15892-15900	relation	
53-8	15901-15905	base	
53-9	15905-15906	/	
53-10	15906-15911	16386	
53-11	15911-15912	/	
53-12	15912-15917	24890	
53-13	15918-15921	But	
53-14	15922-15926	what	
53-15	15927-15932	shall	
53-16	15933-15935	we	
53-17	15936-15938	do	
53-18	15939-15941	if	
53-19	15942-15944	it	
53-20	15945-15947	is	
53-21	15948-15958	impossible	
53-22	15959-15961	to	
53-23	15962-15969	restore	
53-24	15970-15973	the	
53-25	15974-15978	data	
53-26	15979-15983	from	
53-27	15984-15990	backup	
53-28	15990-15991	?	
53-29	15992-15995	The	
53-30	15996-16019	ignore_checksum_failure	
53-31	16020-16029	parameter	
53-32	16030-16037	enables	
53-33	16038-16044	trying	
53-34	16045-16047	to	
53-35	16048-16052	read	
53-36	16053-16056	the	
53-37	16057-16062	table	
53-38	16062-16063	,	
53-39	16064-16066	of	
53-40	16067-16073	course	
53-41	16073-16074	,	
53-42	16075-16079	with	
53-43	16080-16081	a	
53-44	16082-16086	risk	
53-45	16087-16089	of	
53-46	16090-16097	getting	
53-47	16098-16107	corrupted	
53-48	16108-16112	data	
53-49	16112-16113	.	
53-50	16114-16115	=	
53-51	16115-16116	>	
53-52	16117-16120	SET	
53-53	16121-16144	ignore_checksum_failure	
53-54	16145-16146	=	
53-55	16147-16149	on	
53-56	16149-16150	;	

#Text==> SELECT * FROM wallevel; WARNING: page verification failed, calculated checksum 23222 but expected 50884 --- (1 row) Of course, everything is fine in this case since we hurt only the header rather than pure data.
54-1	16151-16152	=	
54-2	16152-16153	>	
54-3	16154-16160	SELECT	
54-4	16161-16162	*	
54-5	16163-16167	FROM	
54-6	16168-16176	wallevel	
54-7	16176-16177	;	
54-8	16178-16185	WARNING	
54-9	16185-16186	:	
54-10	16187-16191	page	
54-11	16192-16204	verification	
54-12	16205-16211	failed	
54-13	16211-16212	,	
54-14	16213-16223	calculated	
54-15	16224-16232	checksum	
54-16	16233-16238	23222	
54-17	16239-16242	but	
54-18	16243-16251	expected	
54-19	16252-16257	50884	
54-20	16258-16259	-	
54-21	16259-16260	-	
54-22	16260-16261	-	
54-23	16262-16263	(	
54-24	16263-16264	1	
54-25	16265-16268	row	
54-26	16268-16269	)	
54-27	16270-16272	Of	
54-28	16273-16279	course	
54-29	16279-16280	,	
54-30	16281-16291	everything	
54-31	16292-16294	is	
54-32	16295-16299	fine	
54-33	16300-16302	in	
54-34	16303-16307	this	
54-35	16308-16312	case	
54-36	16313-16318	since	
54-37	16319-16321	we	
54-38	16322-16326	hurt	
54-39	16327-16331	only	
54-40	16332-16335	the	
54-41	16336-16342	header	
54-42	16343-16349	rather	
54-43	16350-16354	than	
54-44	16355-16359	pure	
54-45	16360-16364	data	
54-46	16364-16365	.	

#Text=And there is one more point to note. When checksums are turned on, hint bits are WAL-logged (we discussed them earlier) since a change to any, even inessential, bit results in a change to the checksum. When checksums are turned off, the wal_log_hints parameter is responsible for WAL-logging hint bits. Changes to hint bits are always logged as FPI (full page image), which pretty much increases the WAL size. In this case, it makes sense to use the wal_compression parameter to turn on compression of FPIs (this parameter was added in version 9.5). We will look at specific figures a bit later.
55-1	16366-16369	And	
55-2	16370-16375	there	
55-3	16376-16378	is	
55-4	16379-16382	one	
55-5	16383-16387	more	
55-6	16388-16393	point	
55-7	16394-16396	to	
55-8	16397-16401	note	
55-9	16401-16402	.	
55-10	16403-16407	When	
55-11	16408-16417	checksums	
55-12	16418-16421	are	
55-13	16422-16428	turned	
55-14	16429-16431	on	
55-15	16431-16432	,	
55-16	16433-16437	hint	
55-17	16438-16442	bits	
55-18	16443-16446	are	
55-19	16447-16457	WAL-logged	
55-20	16458-16459	(	
55-21	16459-16461	we	
55-22	16462-16471	discussed	
55-23	16472-16476	them	
55-24	16477-16484	earlier	
55-25	16484-16485	)	
55-26	16486-16491	since	
55-27	16492-16493	a	
55-28	16494-16500	change	
55-29	16501-16503	to	
55-30	16504-16507	any	
55-31	16507-16508	,	
55-32	16509-16513	even	
55-33	16514-16525	inessential	
55-34	16525-16526	,	
55-35	16527-16530	bit	
55-36	16531-16538	results	
55-37	16539-16541	in	
55-38	16542-16543	a	
55-39	16544-16550	change	
55-40	16551-16553	to	
55-41	16554-16557	the	
55-42	16558-16566	checksum	
55-43	16566-16567	.	
55-44	16568-16572	When	
55-45	16573-16582	checksums	
55-46	16583-16586	are	
55-47	16587-16593	turned	
55-48	16594-16597	off	
55-49	16597-16598	,	
55-50	16599-16602	the	
55-51	16603-16616	wal_log_hints	
55-52	16617-16626	parameter	
55-53	16627-16629	is	
55-54	16630-16641	responsible	
55-55	16642-16645	for	
55-56	16646-16657	WAL-logging	
55-57	16658-16662	hint	
55-58	16663-16667	bits	
55-59	16667-16668	.	
55-60	16669-16676	Changes	
55-61	16677-16679	to	
55-62	16680-16684	hint	
55-63	16685-16689	bits	
55-64	16690-16693	are	
55-65	16694-16700	always	
55-66	16701-16707	logged	
55-67	16708-16710	as	
55-68	16711-16714	FPI	
55-69	16715-16716	(	
55-70	16716-16720	full	
55-71	16721-16725	page	
55-72	16726-16731	image	
55-73	16731-16732	)	
55-74	16732-16733	,	
55-75	16734-16739	which	
55-76	16740-16746	pretty	
55-77	16747-16751	much	
55-78	16752-16761	increases	
55-79	16762-16765	the	
55-80	16766-16769	WAL	
55-81	16770-16774	size	
55-82	16774-16775	.	
55-83	16776-16778	In	
55-84	16779-16783	this	
55-85	16784-16788	case	
55-86	16788-16789	,	
55-87	16790-16792	it	
55-88	16793-16798	makes	
55-89	16799-16804	sense	
55-90	16805-16807	to	
55-91	16808-16811	use	
55-92	16812-16815	the	
55-93	16816-16831	wal_compression	
55-94	16832-16841	parameter	
55-95	16842-16844	to	
55-96	16845-16849	turn	
55-97	16850-16852	on	
55-98	16853-16864	compression	
55-99	16865-16867	of	
55-100	16868-16872	FPIs	
55-101	16873-16874	(	
55-102	16874-16878	this	
55-103	16879-16888	parameter	
55-104	16889-16892	was	
55-105	16893-16898	added	
55-106	16899-16901	in	
55-107	16902-16909	version	
55-108	16909-16910	 	
55-109	16910-16913	9.5	
55-110	16913-16914	)	
55-111	16914-16915	.	
55-112	16916-16918	We	
55-113	16919-16923	will	
55-114	16924-16928	look	
55-115	16929-16931	at	
55-116	16932-16940	specific	
55-117	16941-16948	figures	
55-118	16949-16950	a	
55-119	16951-16954	bit	
55-120	16955-16960	later	
55-121	16960-16961	.	

#Text=Atomicity of writing And finally, there is an issue with the atomicity of writing. A database page occupies not less than 8 KB (it may be 16 or 32 KB), and at a low level, a write is done in blocks, which usually have smaller sizes (usually 512 bytes or 4 KB). Therefore, in case of a power outage, a data page can be written partially. It's clear that during a recovery, it makes no sense to apply usual WAL records to such a page.
56-1	16962-16971	Atomicity	
56-2	16972-16974	of	
56-3	16975-16982	writing	
56-4	16983-16986	And	
56-5	16987-16994	finally	
56-6	16994-16995	,	
56-7	16996-17001	there	
56-8	17002-17004	is	
56-9	17005-17007	an	
56-10	17008-17013	issue	
56-11	17014-17018	with	
56-12	17019-17022	the	
56-13	17023-17032	atomicity	
56-14	17033-17035	of	
56-15	17036-17043	writing	
56-16	17043-17044	.	
56-17	17045-17046	A	
56-18	17047-17055	database	
56-19	17056-17060	page	
56-20	17061-17069	occupies	
56-21	17070-17073	not	
56-22	17074-17078	less	
56-23	17079-17083	than	
56-24	17084-17085	8	
56-25	17085-17086	 	
56-26	17086-17088	KB	
56-27	17089-17090	(	
56-28	17090-17092	it	
56-29	17093-17096	may	
56-30	17097-17099	be	
56-31	17100-17102	16	
56-32	17103-17105	or	
56-33	17106-17108	32	
56-34	17108-17109	 	
56-35	17109-17111	KB	
56-36	17111-17112	)	
56-37	17112-17113	,	
56-38	17114-17117	and	
56-39	17118-17120	at	
56-40	17121-17122	a	
56-41	17123-17126	low	
56-42	17127-17132	level	
56-43	17132-17133	,	
56-44	17134-17135	a	
56-45	17136-17141	write	
56-46	17142-17144	is	
56-47	17145-17149	done	
56-48	17150-17152	in	
56-49	17153-17159	blocks	
56-50	17159-17160	,	
56-51	17161-17166	which	
56-52	17167-17174	usually	
56-53	17175-17179	have	
56-54	17180-17187	smaller	
56-55	17188-17193	sizes	
56-56	17194-17195	(	
56-57	17195-17202	usually	
56-58	17203-17206	512	
56-59	17206-17207	 	
56-60	17207-17212	bytes	
56-61	17213-17215	or	
56-62	17216-17217	4	
56-63	17217-17218	 	
56-64	17218-17220	KB	
56-65	17220-17221	)	
56-66	17221-17222	.	
56-67	17223-17232	Therefore	
56-68	17232-17233	,	
56-69	17234-17236	in	
56-70	17237-17241	case	
56-71	17242-17244	of	
56-72	17245-17246	a	
56-73	17247-17252	power	
56-74	17253-17259	outage	
56-75	17259-17260	,	
56-76	17261-17262	a	
56-77	17263-17267	data	
56-78	17268-17272	page	
56-79	17273-17276	can	
56-80	17277-17279	be	
56-81	17280-17287	written	
56-82	17288-17297	partially	
56-83	17297-17298	.	
56-84	17299-17303	It's	
56-85	17304-17309	clear	
56-86	17310-17314	that	
56-87	17315-17321	during	
56-88	17322-17323	a	
56-89	17324-17332	recovery	
56-90	17332-17333	,	
56-91	17334-17336	it	
56-92	17337-17342	makes	
56-93	17343-17345	no	
56-94	17346-17351	sense	
56-95	17352-17354	to	
56-96	17355-17360	apply	
56-97	17361-17366	usual	
56-98	17367-17370	WAL	
56-99	17371-17378	records	
56-100	17379-17381	to	
56-101	17382-17386	such	
56-102	17387-17388	a	
56-103	17389-17393	page	
56-104	17393-17394	.	

#Text=To prevent this, PostgreSQL enables WAL-logging a full page image at the first change of the page since the beginning of a checkpoint cycle (the same image is also logged when hint bits change). The full_page_writes parameter controls this, and it is turned on by default. If a recovery process comes across an FPI in WAL, it writes the image to disk unconditionally (without LSN checking): the FPI is more trustworthy since it is protected by a checksum, like each WAL record. And it is this reliably correct image, which normal WAL records are applied to.
57-1	17395-17397	To	
57-2	17398-17405	prevent	
57-3	17406-17410	this	
57-4	17410-17411	,	
57-5	17412-17422	PostgreSQL	
57-6	17423-17430	enables	
57-7	17431-17442	WAL-logging	
57-8	17443-17444	a	
57-9	17445-17449	full	
57-10	17450-17454	page	
57-11	17455-17460	image	
57-12	17461-17463	at	
57-13	17464-17467	the	
57-14	17468-17473	first	
57-15	17474-17480	change	
57-16	17481-17483	of	
57-17	17484-17487	the	
57-18	17488-17492	page	
57-19	17493-17498	since	
57-20	17499-17502	the	
57-21	17503-17512	beginning	
57-22	17513-17515	of	
57-23	17516-17517	a	
57-24	17518-17528	checkpoint	
57-25	17529-17534	cycle	
57-26	17535-17536	(	
57-27	17536-17539	the	
57-28	17540-17544	same	
57-29	17545-17550	image	
57-30	17551-17553	is	
57-31	17554-17558	also	
57-32	17559-17565	logged	
57-33	17566-17570	when	
57-34	17571-17575	hint	
57-35	17576-17580	bits	
57-36	17581-17587	change	
57-37	17587-17588	)	
57-38	17588-17589	.	
57-39	17590-17593	The	
57-40	17594-17610	full_page_writes	
57-41	17611-17620	parameter	
57-42	17621-17629	controls	
57-43	17630-17634	this	
57-44	17634-17635	,	
57-45	17636-17639	and	
57-46	17640-17642	it	
57-47	17643-17645	is	
57-48	17646-17652	turned	
57-49	17653-17655	on	
57-50	17656-17658	by	
57-51	17659-17666	default	
57-52	17666-17667	.	
57-53	17668-17670	If	
57-54	17671-17672	a	
57-55	17673-17681	recovery	
57-56	17682-17689	process	
57-57	17690-17695	comes	
57-58	17696-17702	across	
57-59	17703-17705	an	
57-60	17706-17709	FPI	
57-61	17710-17712	in	
57-62	17713-17716	WAL	
57-63	17716-17717	,	
57-64	17718-17720	it	
57-65	17721-17727	writes	
57-66	17728-17731	the	
57-67	17732-17737	image	
57-68	17738-17740	to	
57-69	17741-17745	disk	
57-70	17746-17761	unconditionally	
57-71	17762-17763	(	
57-72	17763-17770	without	
57-73	17771-17774	LSN	
57-74	17775-17783	checking	
57-75	17783-17784	)	
57-76	17784-17785	:	
57-77	17786-17789	the	
57-78	17790-17793	FPI	
57-79	17794-17796	is	
57-80	17797-17801	more	
57-81	17802-17813	trustworthy	
57-82	17814-17819	since	
57-83	17820-17822	it	
57-84	17823-17825	is	
57-85	17826-17835	protected	
57-86	17836-17838	by	
57-87	17839-17840	a	
57-88	17841-17849	checksum	
57-89	17849-17850	,	
57-90	17851-17855	like	
57-91	17856-17860	each	
57-92	17861-17864	WAL	
57-93	17865-17871	record	
57-94	17871-17872	.	
57-95	17873-17876	And	
57-96	17877-17879	it	
57-97	17880-17882	is	
57-98	17883-17887	this	
57-99	17888-17896	reliably	
57-100	17897-17904	correct	
57-101	17905-17910	image	
57-102	17910-17911	,	
57-103	17912-17917	which	
57-104	17918-17924	normal	
57-105	17925-17928	WAL	
57-106	17929-17936	records	
57-107	17937-17940	are	
57-108	17941-17948	applied	
57-109	17949-17951	to	
57-110	17951-17952	.	

#Text=Although in PostgreSQL, an FPI does not include free space (we discussed the block structure earlier), FPIs considerably increase the amount of WAL records generated. As already mentioned, the situation can be improved by compression of FPIs (using the wal_compression parameter). To get an insight into changing the WAL size, let's conduct a simple experiment using the pgbench utility. Performing the initialization: student$ pgbench -i test dropping old tables... creating tables... generating data...
58-1	17953-17961	Although	
58-2	17962-17964	in	
58-3	17965-17975	PostgreSQL	
58-4	17975-17976	,	
58-5	17977-17979	an	
58-6	17980-17983	FPI	
58-7	17984-17988	does	
58-8	17989-17992	not	
58-9	17993-18000	include	
58-10	18001-18005	free	
58-11	18006-18011	space	
58-12	18012-18013	(	
58-13	18013-18015	we	
58-14	18016-18025	discussed	
58-15	18026-18029	the	
58-16	18030-18035	block	
58-17	18036-18045	structure	
58-18	18046-18053	earlier	
58-19	18053-18054	)	
58-20	18054-18055	,	
58-21	18056-18060	FPIs	
58-22	18061-18073	considerably	
58-23	18074-18082	increase	
58-24	18083-18086	the	
58-25	18087-18093	amount	
58-26	18094-18096	of	
58-27	18097-18100	WAL	
58-28	18101-18108	records	
58-29	18109-18118	generated	
58-30	18118-18119	.	
58-31	18120-18122	As	
58-32	18123-18130	already	
58-33	18131-18140	mentioned	
58-34	18140-18141	,	
58-35	18142-18145	the	
58-36	18146-18155	situation	
58-37	18156-18159	can	
58-38	18160-18162	be	
58-39	18163-18171	improved	
58-40	18172-18174	by	
58-41	18175-18186	compression	
58-42	18187-18189	of	
58-43	18190-18194	FPIs	
58-44	18195-18196	(	
58-45	18196-18201	using	
58-46	18202-18205	the	
58-47	18206-18221	wal_compression	
58-48	18222-18231	parameter	
58-49	18231-18232	)	
58-50	18232-18233	.	
58-51	18234-18236	To	
58-52	18237-18240	get	
58-53	18241-18243	an	
58-54	18244-18251	insight	
58-55	18252-18256	into	
58-56	18257-18265	changing	
58-57	18266-18269	the	
58-58	18270-18273	WAL	
58-59	18274-18278	size	
58-60	18278-18279	,	
58-61	18280-18285	let's	
58-62	18286-18293	conduct	
58-63	18294-18295	a	
58-64	18296-18302	simple	
58-65	18303-18313	experiment	
58-66	18314-18319	using	
58-67	18320-18323	the	
58-68	18324-18331	pgbench	
58-69	18332-18339	utility	
58-70	18339-18340	.	
58-71	18341-18351	Performing	
58-72	18352-18355	the	
58-73	18356-18370	initialization	
58-74	18370-18371	:	
58-75	18372-18379	student	
58-76	18379-18380	$	
58-77	18381-18388	pgbench	
58-78	18389-18390	-	
58-79	18390-18391	i	
58-80	18392-18396	test	
58-81	18397-18405	dropping	
58-82	18406-18409	old	
58-83	18410-18416	tables	
58-84	18416-18417	.	
58-85	18417-18418	.	
58-86	18418-18419	.	
58-87	18420-18428	creating	
58-88	18429-18435	tables	
58-89	18435-18436	.	
58-90	18436-18437	.	
58-91	18437-18438	.	
58-92	18439-18449	generating	
58-93	18450-18454	data	
58-94	18454-18455	.	
58-95	18455-18456	.	
58-96	18456-18457	.	

#Text=100000 of 100000 tuples (100%) done (elapsed 0.15 s, remaining 0.00 s) vacuuming... creating primary keys... done. The full_page_writes parameter is turned on: => SHOW full_page_writes; full_page_writes ------------------
59-1	18458-18464	100000	
59-2	18465-18467	of	
59-3	18468-18474	100000	
59-4	18475-18481	tuples	
59-5	18482-18483	(	
59-6	18483-18487	100%	
59-7	18487-18488	)	
59-8	18489-18493	done	
59-9	18494-18495	(	
59-10	18495-18502	elapsed	
59-11	18503-18507	0.15	
59-12	18508-18509	s	
59-13	18509-18510	,	
59-14	18511-18520	remaining	
59-15	18521-18525	0.00	
59-16	18526-18527	s	
59-17	18527-18528	)	
59-18	18529-18538	vacuuming	
59-19	18538-18539	.	
59-20	18539-18540	.	
59-21	18540-18541	.	
59-22	18542-18550	creating	
59-23	18551-18558	primary	
59-24	18559-18563	keys	
59-25	18563-18564	.	
59-26	18564-18565	.	
59-27	18565-18566	.	
59-28	18567-18571	done	
59-29	18571-18572	.	
59-30	18573-18576	The	
59-31	18577-18593	full_page_writes	
59-32	18594-18603	parameter	
59-33	18604-18606	is	
59-34	18607-18613	turned	
59-35	18614-18616	on	
59-36	18616-18617	:	
59-37	18618-18619	=	
59-38	18619-18620	>	
59-39	18621-18625	SHOW	
59-40	18626-18642	full_page_writes	
59-41	18642-18643	;	
59-42	18644-18660	full_page_writes	
59-43	18661-18662	-	
59-44	18662-18663	-	
59-45	18663-18664	-	
59-46	18664-18665	-	
59-47	18665-18666	-	
59-48	18666-18667	-	
59-49	18667-18668	-	
59-50	18668-18669	-	
59-51	18669-18670	-	
59-52	18670-18671	-	
59-53	18671-18672	-	
59-54	18672-18673	-	
59-55	18673-18674	-	
59-56	18674-18675	-	
59-57	18675-18676	-	
59-58	18676-18677	-	
59-59	18677-18678	-	
59-60	18678-18679	-	

#Text=(1 row) Let's perform a checkpoint and immediately run a test for 30 seconds. => CHECKPOINT; => SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn
60-1	18680-18681	(	
60-2	18681-18682	1	
60-3	18683-18686	row	
60-4	18686-18687	)	
60-5	18688-18693	Let's	
60-6	18694-18701	perform	
60-7	18702-18703	a	
60-8	18704-18714	checkpoint	
60-9	18715-18718	and	
60-10	18719-18730	immediately	
60-11	18731-18734	run	
60-12	18735-18736	a	
60-13	18737-18741	test	
60-14	18742-18745	for	
60-15	18746-18748	30	
60-16	18748-18749	 	
60-17	18749-18756	seconds	
60-18	18756-18757	.	
60-19	18758-18759	=	
60-20	18759-18760	>	
60-21	18761-18771	CHECKPOINT	
60-22	18771-18772	;	
60-23	18773-18774	=	
60-24	18774-18775	>	
60-25	18776-18782	SELECT	
60-26	18783-18808	pg_current_wal_insert_lsn	
60-27	18808-18809	(	
60-28	18809-18810	)	
60-29	18810-18811	;	
60-30	18812-18837	pg_current_wal_insert_lsn	

#Text=--------------------------- 0/38E04A08 (1 row) student$ pgbench -T 30 test starting vacuum...end. transaction type: TPC-B (sort of) scaling factor: 1 query mode: simple
61-1	18838-18839	-	
61-2	18839-18840	-	
61-3	18840-18841	-	
61-4	18841-18842	-	
61-5	18842-18843	-	
61-6	18843-18844	-	
61-7	18844-18845	-	
61-8	18845-18846	-	
61-9	18846-18847	-	
61-10	18847-18848	-	
61-11	18848-18849	-	
61-12	18849-18850	-	
61-13	18850-18851	-	
61-14	18851-18852	-	
61-15	18852-18853	-	
61-16	18853-18854	-	
61-17	18854-18855	-	
61-18	18855-18856	-	
61-19	18856-18857	-	
61-20	18857-18858	-	
61-21	18858-18859	-	
61-22	18859-18860	-	
61-23	18860-18861	-	
61-24	18861-18862	-	
61-25	18862-18863	-	
61-26	18863-18864	-	
61-27	18864-18865	-	
61-28	18866-18867	0	
61-29	18867-18868	/	
61-30	18868-18876	38E04A08	
61-31	18877-18878	(	
61-32	18878-18879	1	
61-33	18880-18883	row	
61-34	18883-18884	)	
61-35	18885-18892	student	
61-36	18892-18893	$	
61-37	18894-18901	pgbench	
61-38	18902-18903	-	
61-39	18903-18904	T	
61-40	18905-18907	30	
61-41	18908-18912	test	
61-42	18913-18921	starting	
61-43	18922-18928	vacuum	
61-44	18928-18929	.	
61-45	18929-18930	.	
61-46	18930-18931	.	
61-47	18931-18934	end	
61-48	18934-18935	.	
61-49	18936-18947	transaction	
61-50	18948-18952	type	
61-51	18952-18953	:	
61-52	18954-18959	TPC-B	
61-53	18960-18961	(	
61-54	18961-18965	sort	
61-55	18966-18968	of	
61-56	18968-18969	)	
61-57	18970-18977	scaling	
61-58	18978-18984	factor	
61-59	18984-18985	:	
61-60	18986-18987	1	
61-61	18988-18993	query	
61-62	18994-18998	mode	
61-63	18998-18999	:	
61-64	19000-19006	simple	

#Text=number of clients: 1 number of threads: 1 duration: 30 s number of transactions actually processed: 26851 latency average = 1.117 ms tps = 895.006720 (including connections establishing) tps = 895.095229 (excluding connections establishing)
62-1	19007-19013	number	
62-2	19014-19016	of	
62-3	19017-19024	clients	
62-4	19024-19025	:	
62-5	19026-19027	1	
62-6	19028-19034	number	
62-7	19035-19037	of	
62-8	19038-19045	threads	
62-9	19045-19046	:	
62-10	19047-19048	1	
62-11	19049-19057	duration	
62-12	19057-19058	:	
62-13	19059-19061	30	
62-14	19062-19063	s	
62-15	19064-19070	number	
62-16	19071-19073	of	
62-17	19074-19086	transactions	
62-18	19087-19095	actually	
62-19	19096-19105	processed	
62-20	19105-19106	:	
62-21	19107-19112	26851	
62-22	19113-19120	latency	
62-23	19121-19128	average	
62-24	19129-19130	=	
62-25	19131-19136	1.117	
62-26	19137-19139	ms	
62-27	19140-19143	tps	
62-28	19144-19145	=	
62-29	19146-19156	895.006720	
62-30	19157-19158	(	
62-31	19158-19167	including	
62-32	19168-19179	connections	
62-33	19180-19192	establishing	
62-34	19192-19193	)	
62-35	19194-19197	tps	
62-36	19198-19199	=	
62-37	19200-19210	895.095229	
62-38	19211-19212	(	
62-39	19212-19221	excluding	
62-40	19222-19233	connections	
62-41	19234-19246	establishing	
62-42	19246-19247	)	

#Text==> SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn --------------------------- 0/3A69C478 (1 row)
63-1	19248-19249	=	
63-2	19249-19250	>	
63-3	19251-19257	SELECT	
63-4	19258-19283	pg_current_wal_insert_lsn	
63-5	19283-19284	(	
63-6	19284-19285	)	
63-7	19285-19286	;	
63-8	19287-19312	pg_current_wal_insert_lsn	
63-9	19313-19314	-	
63-10	19314-19315	-	
63-11	19315-19316	-	
63-12	19316-19317	-	
63-13	19317-19318	-	
63-14	19318-19319	-	
63-15	19319-19320	-	
63-16	19320-19321	-	
63-17	19321-19322	-	
63-18	19322-19323	-	
63-19	19323-19324	-	
63-20	19324-19325	-	
63-21	19325-19326	-	
63-22	19326-19327	-	
63-23	19327-19328	-	
63-24	19328-19329	-	
63-25	19329-19330	-	
63-26	19330-19331	-	
63-27	19331-19332	-	
63-28	19332-19333	-	
63-29	19333-19334	-	
63-30	19334-19335	-	
63-31	19335-19336	-	
63-32	19336-19337	-	
63-33	19337-19338	-	
63-34	19338-19339	-	
63-35	19339-19340	-	
63-36	19341-19342	0	
63-37	19342-19343	/	
63-38	19343-19351	3A69C478	
63-39	19352-19353	(	
63-40	19353-19354	1	
63-41	19355-19358	row	
63-42	19358-19359	)	

#Text=Getting the size of WAL records: => SELECT pg_size_pretty('0/3A69C478'::pg_lsn - '0/38E04A08'::pg_lsn); pg_size_pretty
64-1	19360-19367	Getting	
64-2	19368-19371	the	
64-3	19372-19376	size	
64-4	19377-19379	of	
64-5	19380-19383	WAL	
64-6	19384-19391	records	
64-7	19391-19392	:	
64-8	19393-19394	=	
64-9	19394-19395	>	
64-10	19396-19402	SELECT	
64-11	19403-19417	pg_size_pretty	
64-12	19417-19418	(	
64-13	19418-19419	'	
64-14	19419-19420	0	
64-15	19420-19421	/	
64-16	19421-19429	3A69C478	
64-17	19429-19430	'	
64-18	19430-19431	:	
64-19	19431-19432	:	
64-20	19432-19438	pg_lsn	
64-21	19439-19440	-	
64-22	19441-19442	'	
64-23	19442-19443	0	
64-24	19443-19444	/	
64-25	19444-19452	38E04A08	
64-26	19452-19453	'	
64-27	19453-19454	:	
64-28	19454-19455	:	
64-29	19455-19461	pg_lsn	
64-30	19461-19462	)	
64-31	19462-19463	;	
64-32	19464-19478	pg_size_pretty	

#Text=---------------- 25 MB (1 row) Now let's turn off the full_page_writes parameter: => ALTER SYSTEM SET full_page_writes = off; => SELECT pg_reload_conf();
65-1	19479-19480	-	
65-2	19480-19481	-	
65-3	19481-19482	-	
65-4	19482-19483	-	
65-5	19483-19484	-	
65-6	19484-19485	-	
65-7	19485-19486	-	
65-8	19486-19487	-	
65-9	19487-19488	-	
65-10	19488-19489	-	
65-11	19489-19490	-	
65-12	19490-19491	-	
65-13	19491-19492	-	
65-14	19492-19493	-	
65-15	19493-19494	-	
65-16	19494-19495	-	
65-17	19496-19498	25	
65-18	19499-19501	MB	
65-19	19502-19503	(	
65-20	19503-19504	1	
65-21	19505-19508	row	
65-22	19508-19509	)	
65-23	19510-19513	Now	
65-24	19514-19519	let's	
65-25	19520-19524	turn	
65-26	19525-19528	off	
65-27	19529-19532	the	
65-28	19533-19549	full_page_writes	
65-29	19550-19559	parameter	
65-30	19559-19560	:	
65-31	19561-19562	=	
65-32	19562-19563	>	
65-33	19564-19569	ALTER	
65-34	19570-19576	SYSTEM	
65-35	19577-19580	SET	
65-36	19581-19597	full_page_writes	
65-37	19598-19599	=	
65-38	19600-19603	off	
65-39	19603-19604	;	
65-40	19605-19606	=	
65-41	19606-19607	>	
65-42	19608-19614	SELECT	
65-43	19615-19629	pg_reload_conf	
65-44	19629-19630	(	
65-45	19630-19631	)	
65-46	19631-19632	;	

#Text=And we repeat the experiment. => CHECKPOINT; => SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn ---------------------------
66-1	19633-19636	And	
66-2	19637-19639	we	
66-3	19640-19646	repeat	
66-4	19647-19650	the	
66-5	19651-19661	experiment	
66-6	19661-19662	.	
66-7	19663-19664	=	
66-8	19664-19665	>	
66-9	19666-19676	CHECKPOINT	
66-10	19676-19677	;	
66-11	19678-19679	=	
66-12	19679-19680	>	
66-13	19681-19687	SELECT	
66-14	19688-19713	pg_current_wal_insert_lsn	
66-15	19713-19714	(	
66-16	19714-19715	)	
66-17	19715-19716	;	
66-18	19717-19742	pg_current_wal_insert_lsn	
66-19	19743-19744	-	
66-20	19744-19745	-	
66-21	19745-19746	-	
66-22	19746-19747	-	
66-23	19747-19748	-	
66-24	19748-19749	-	
66-25	19749-19750	-	
66-26	19750-19751	-	
66-27	19751-19752	-	
66-28	19752-19753	-	
66-29	19753-19754	-	
66-30	19754-19755	-	
66-31	19755-19756	-	
66-32	19756-19757	-	
66-33	19757-19758	-	
66-34	19758-19759	-	
66-35	19759-19760	-	
66-36	19760-19761	-	
66-37	19761-19762	-	
66-38	19762-19763	-	
66-39	19763-19764	-	
66-40	19764-19765	-	
66-41	19765-19766	-	
66-42	19766-19767	-	
66-43	19767-19768	-	
66-44	19768-19769	-	
66-45	19769-19770	-	

#Text=0/3A69C530 (1 row) student$ pgbench -T 30 test starting vacuum...end. transaction type: TPC-B (sort of) scaling factor: 1 query mode: simple number of clients: 1
67-1	19771-19772	0	
67-2	19772-19773	/	
67-3	19773-19781	3A69C530	
67-4	19782-19783	(	
67-5	19783-19784	1	
67-6	19785-19788	row	
67-7	19788-19789	)	
67-8	19790-19797	student	
67-9	19797-19798	$	
67-10	19799-19806	pgbench	
67-11	19807-19808	-	
67-12	19808-19809	T	
67-13	19810-19812	30	
67-14	19813-19817	test	
67-15	19818-19826	starting	
67-16	19827-19833	vacuum	
67-17	19833-19834	.	
67-18	19834-19835	.	
67-19	19835-19836	.	
67-20	19836-19839	end	
67-21	19839-19840	.	
67-22	19841-19852	transaction	
67-23	19853-19857	type	
67-24	19857-19858	:	
67-25	19859-19864	TPC-B	
67-26	19865-19866	(	
67-27	19866-19870	sort	
67-28	19871-19873	of	
67-29	19873-19874	)	
67-30	19875-19882	scaling	
67-31	19883-19889	factor	
67-32	19889-19890	:	
67-33	19891-19892	1	
67-34	19893-19898	query	
67-35	19899-19903	mode	
67-36	19903-19904	:	
67-37	19905-19911	simple	
67-38	19912-19918	number	
67-39	19919-19921	of	
67-40	19922-19929	clients	
67-41	19929-19930	:	
67-42	19931-19932	1	

#Text=number of threads: 1 duration: 30 s number of transactions actually processed: 27234 latency average = 1.102 ms tps = 907.783080 (including connections establishing) tps = 907.895326 (excluding connections establishing)
68-1	19933-19939	number	
68-2	19940-19942	of	
68-3	19943-19950	threads	
68-4	19950-19951	:	
68-5	19952-19953	1	
68-6	19954-19962	duration	
68-7	19962-19963	:	
68-8	19964-19966	30	
68-9	19967-19968	s	
68-10	19969-19975	number	
68-11	19976-19978	of	
68-12	19979-19991	transactions	
68-13	19992-20000	actually	
68-14	20001-20010	processed	
68-15	20010-20011	:	
68-16	20012-20017	27234	
68-17	20018-20025	latency	
68-18	20026-20033	average	
68-19	20034-20035	=	
68-20	20036-20041	1.102	
68-21	20042-20044	ms	
68-22	20045-20048	tps	
68-23	20049-20050	=	
68-24	20051-20061	907.783080	
68-25	20062-20063	(	
68-26	20063-20072	including	
68-27	20073-20084	connections	
68-28	20085-20097	establishing	
68-29	20097-20098	)	
68-30	20099-20102	tps	
68-31	20103-20104	=	
68-32	20105-20115	907.895326	
68-33	20116-20117	(	
68-34	20117-20126	excluding	
68-35	20127-20138	connections	
68-36	20139-20151	establishing	
68-37	20151-20152	)	

#Text==> SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn --------------------------- 0/3BE87658 (1 row)
69-1	20153-20154	=	
69-2	20154-20155	>	
69-3	20156-20162	SELECT	
69-4	20163-20188	pg_current_wal_insert_lsn	
69-5	20188-20189	(	
69-6	20189-20190	)	
69-7	20190-20191	;	
69-8	20192-20217	pg_current_wal_insert_lsn	
69-9	20218-20219	-	
69-10	20219-20220	-	
69-11	20220-20221	-	
69-12	20221-20222	-	
69-13	20222-20223	-	
69-14	20223-20224	-	
69-15	20224-20225	-	
69-16	20225-20226	-	
69-17	20226-20227	-	
69-18	20227-20228	-	
69-19	20228-20229	-	
69-20	20229-20230	-	
69-21	20230-20231	-	
69-22	20231-20232	-	
69-23	20232-20233	-	
69-24	20233-20234	-	
69-25	20234-20235	-	
69-26	20235-20236	-	
69-27	20236-20237	-	
69-28	20237-20238	-	
69-29	20238-20239	-	
69-30	20239-20240	-	
69-31	20240-20241	-	
69-32	20241-20242	-	
69-33	20242-20243	-	
69-34	20243-20244	-	
69-35	20244-20245	-	
69-36	20246-20247	0	
69-37	20247-20248	/	
69-38	20248-20256	3BE87658	
69-39	20257-20258	(	
69-40	20258-20259	1	
69-41	20260-20263	row	
69-42	20263-20264	)	

#Text=Getting the size of WAL records: => SELECT pg_size_pretty('0/3BE87658'::pg_lsn - '0/3A69C530'::pg_lsn); pg_size_pretty
70-1	20265-20272	Getting	
70-2	20273-20276	the	
70-3	20277-20281	size	
70-4	20282-20284	of	
70-5	20285-20288	WAL	
70-6	20289-20296	records	
70-7	20296-20297	:	
70-8	20298-20299	=	
70-9	20299-20300	>	
70-10	20301-20307	SELECT	
70-11	20308-20322	pg_size_pretty	
70-12	20322-20323	(	
70-13	20323-20324	'	
70-14	20324-20325	0	
70-15	20325-20326	/	
70-16	20326-20334	3BE87658	
70-17	20334-20335	'	
70-18	20335-20336	:	
70-19	20336-20337	:	
70-20	20337-20343	pg_lsn	
70-21	20344-20345	-	
70-22	20346-20347	'	
70-23	20347-20348	0	
70-24	20348-20349	/	
70-25	20349-20357	3A69C530	
70-26	20357-20358	'	
70-27	20358-20359	:	
70-28	20359-20360	:	
70-29	20360-20366	pg_lsn	
70-30	20366-20367	)	
70-31	20367-20368	;	
70-32	20369-20383	pg_size_pretty	

#Text=---------------- 24 MB (1 row) Yes, the size decreased, but not so much as we could expect. The thing is that the cluster was initialized with the checksums on data pages and therefore, FPIs have to be WAL-logged anyway when hint bits change. These data (in the situation above) make up about half of the whole amount, which you can make sure of by looking at the statistics:
71-1	20384-20385	-	
71-2	20385-20386	-	
71-3	20386-20387	-	
71-4	20387-20388	-	
71-5	20388-20389	-	
71-6	20389-20390	-	
71-7	20390-20391	-	
71-8	20391-20392	-	
71-9	20392-20393	-	
71-10	20393-20394	-	
71-11	20394-20395	-	
71-12	20395-20396	-	
71-13	20396-20397	-	
71-14	20397-20398	-	
71-15	20398-20399	-	
71-16	20399-20400	-	
71-17	20401-20403	24	
71-18	20404-20406	MB	
71-19	20407-20408	(	
71-20	20408-20409	1	
71-21	20410-20413	row	
71-22	20413-20414	)	
71-23	20415-20418	Yes	
71-24	20418-20419	,	
71-25	20420-20423	the	
71-26	20424-20428	size	
71-27	20429-20438	decreased	
71-28	20438-20439	,	
71-29	20440-20443	but	
71-30	20444-20447	not	
71-31	20448-20450	so	
71-32	20451-20455	much	
71-33	20456-20458	as	
71-34	20459-20461	we	
71-35	20462-20467	could	
71-36	20468-20474	expect	
71-37	20474-20475	.	
71-38	20476-20479	The	
71-39	20480-20485	thing	
71-40	20486-20488	is	
71-41	20489-20493	that	
71-42	20494-20497	the	
71-43	20498-20505	cluster	
71-44	20506-20509	was	
71-45	20510-20521	initialized	
71-46	20522-20526	with	
71-47	20527-20530	the	
71-48	20531-20540	checksums	
71-49	20541-20543	on	
71-50	20544-20548	data	
71-51	20549-20554	pages	
71-52	20555-20558	and	
71-53	20559-20568	therefore	
71-54	20568-20569	,	
71-55	20570-20574	FPIs	
71-56	20575-20579	have	
71-57	20580-20582	to	
71-58	20583-20585	be	
71-59	20586-20596	WAL-logged	
71-60	20597-20603	anyway	
71-61	20604-20608	when	
71-62	20609-20613	hint	
71-63	20614-20618	bits	
71-64	20619-20625	change	
71-65	20625-20626	.	
71-66	20627-20632	These	
71-67	20633-20637	data	
71-68	20638-20639	(	
71-69	20639-20641	in	
71-70	20642-20645	the	
71-71	20646-20655	situation	
71-72	20656-20661	above	
71-73	20661-20662	)	
71-74	20663-20667	make	
71-75	20668-20670	up	
71-76	20671-20676	about	
71-77	20677-20681	half	
71-78	20682-20684	of	
71-79	20685-20688	the	
71-80	20689-20694	whole	
71-81	20695-20701	amount	
71-82	20701-20702	,	
71-83	20703-20708	which	
71-84	20709-20712	you	
71-85	20713-20716	can	
71-86	20717-20721	make	
71-87	20722-20726	sure	
71-88	20727-20729	of	
71-89	20730-20732	by	
71-90	20733-20740	looking	
71-91	20741-20743	at	
71-92	20744-20747	the	
71-93	20748-20758	statistics	
71-94	20758-20759	:	

#Text=postgres$ /usr/lib/postgresql/11/bin/pg_waldump --stats -p /var/lib/postgresql/11/main/pg_wal -s 0/3A69C530 -e 0/3BE87658 Type (%) Record size (%) FPI size (%) ---- --- ----------- --- --------
72-1	20760-20768	postgres	
72-2	20768-20769	$	
72-3	20770-20771	/	
72-4	20771-20774	usr	
72-5	20774-20775	/	
72-6	20775-20778	lib	
72-7	20778-20779	/	
72-8	20779-20789	postgresql	
72-9	20789-20790	/	
72-10	20790-20792	11	
72-11	20792-20793	/	
72-12	20793-20796	bin	
72-13	20796-20797	/	
72-14	20797-20807	pg_waldump	
72-15	20808-20809	-	
72-16	20809-20810	-	
72-17	20810-20815	stats	
72-18	20816-20817	-	
72-19	20817-20818	p	
72-20	20819-20820	/	
72-21	20820-20823	var	
72-22	20823-20824	/	
72-23	20824-20827	lib	
72-24	20827-20828	/	
72-25	20828-20838	postgresql	
72-26	20838-20839	/	
72-27	20839-20841	11	
72-28	20841-20842	/	
72-29	20842-20846	main	
72-30	20846-20847	/	
72-31	20847-20853	pg_wal	
72-32	20854-20855	-	
72-33	20855-20856	s	
72-34	20857-20858	0	
72-35	20858-20859	/	
72-36	20859-20867	3A69C530	
72-37	20868-20869	-	
72-38	20869-20870	e	
72-39	20871-20872	0	
72-40	20872-20873	/	
72-41	20873-20881	3BE87658	
72-42	20882-20886	Type	
72-43	20887-20888	(	
72-44	20888-20889	%	
72-45	20889-20890	)	
72-46	20891-20897	Record	
72-47	20898-20902	size	
72-48	20903-20904	(	
72-49	20904-20905	%	
72-50	20905-20906	)	
72-51	20907-20910	FPI	
72-52	20911-20915	size	
72-53	20916-20917	(	
72-54	20917-20918	%	
72-55	20918-20919	)	
72-56	20920-20921	-	
72-57	20921-20922	-	
72-58	20922-20923	-	
72-59	20923-20924	-	
72-60	20925-20926	-	
72-61	20926-20927	-	
72-62	20927-20928	-	
72-63	20929-20930	-	
72-64	20930-20931	-	
72-65	20931-20932	-	
72-66	20932-20933	-	
72-67	20933-20934	-	
72-68	20934-20935	-	
72-69	20935-20936	-	
72-70	20936-20937	-	
72-71	20937-20938	-	
72-72	20938-20939	-	
72-73	20939-20940	-	
72-74	20941-20942	-	
72-75	20942-20943	-	
72-76	20943-20944	-	
72-77	20945-20946	-	
72-78	20946-20947	-	
72-79	20947-20948	-	
72-80	20948-20949	-	
72-81	20949-20950	-	
72-82	20950-20951	-	
72-83	20951-20952	-	
72-84	20952-20953	-	

#Text=--- XLOG 1721 ( 1,03) 84329 ( 0,77) 13916104 (100,00) Transaction 27235 ( 16,32) 926070 ( 8,46)
73-1	20954-20955	-	
73-2	20955-20956	-	
73-3	20956-20957	-	
73-4	20958-20962	XLOG	
73-5	20963-20967	1721	
73-6	20968-20969	(	
73-7	20970-20974	1,03	
73-8	20974-20975	)	
73-9	20976-20981	84329	
73-10	20982-20983	(	
73-11	20984-20988	0,77	
73-12	20988-20989	)	
73-13	20990-20998	13916104	
73-14	20999-21000	(	
73-15	21000-21006	100,00	
73-16	21006-21007	)	
73-17	21008-21019	Transaction	
73-18	21020-21025	27235	
73-19	21026-21027	(	
73-20	21028-21033	16,32	
73-21	21033-21034	)	
73-22	21035-21041	926070	
73-23	21042-21043	(	
73-24	21044-21048	8,46	
73-25	21048-21049	)	

#Text=0 ( 0,00) Storage 1 ( 0,00) 42 ( 0,00) 0 ( 0,00) CLOG 1 ( 0,00) 30 ( 0,00)
74-1	21050-21051	0	
74-2	21052-21053	(	
74-3	21054-21058	0,00	
74-4	21058-21059	)	
74-5	21060-21067	Storage	
74-6	21068-21069	1	
74-7	21070-21071	(	
74-8	21072-21076	0,00	
74-9	21076-21077	)	
74-10	21078-21080	42	
74-11	21081-21082	(	
74-12	21083-21087	0,00	
74-13	21087-21088	)	
74-14	21089-21090	0	
74-15	21091-21092	(	
74-16	21093-21097	0,00	
74-17	21097-21098	)	
74-18	21099-21103	CLOG	
74-19	21104-21105	1	
74-20	21106-21107	(	
74-21	21108-21112	0,00	
74-22	21112-21113	)	
74-23	21114-21116	30	
74-24	21117-21118	(	
74-25	21119-21123	0,00	
74-26	21123-21124	)	

#Text=0 ( 0,00) Standby 4 ( 0,00) 240 ( 0,00) 0 ( 0,00) Heap2 27522 ( 16,49) 1726352 ( 15,76)
75-1	21125-21126	0	
75-2	21127-21128	(	
75-3	21129-21133	0,00	
75-4	21133-21134	)	
75-5	21135-21142	Standby	
75-6	21143-21144	4	
75-7	21145-21146	(	
75-8	21147-21151	0,00	
75-9	21151-21152	)	
75-10	21153-21156	240	
75-11	21157-21158	(	
75-12	21159-21163	0,00	
75-13	21163-21164	)	
75-14	21165-21166	0	
75-15	21167-21168	(	
75-16	21169-21173	0,00	
75-17	21173-21174	)	
75-18	21175-21180	Heap2	
75-19	21181-21186	27522	
75-20	21187-21188	(	
75-21	21189-21194	16,49	
75-22	21194-21195	)	
75-23	21196-21203	1726352	
75-24	21204-21205	(	
75-25	21206-21211	15,76	
75-26	21211-21212	)	

#Text=0 ( 0,00) Heap 109691 ( 65,71) 8169121 ( 74,59) 0 ( 0,00) Btree 756 ( 0,45) 45380 (
76-1	21213-21214	0	
76-2	21215-21216	(	
76-3	21217-21221	0,00	
76-4	21221-21222	)	
76-5	21223-21227	Heap	
76-6	21228-21234	109691	
76-7	21235-21236	(	
76-8	21237-21242	65,71	
76-9	21242-21243	)	
76-10	21244-21251	8169121	
76-11	21252-21253	(	
76-12	21254-21259	74,59	
76-13	21259-21260	)	
76-14	21261-21262	0	
76-15	21263-21264	(	
76-16	21265-21269	0,00	
76-17	21269-21270	)	
76-18	21271-21276	Btree	
76-19	21277-21280	756	
76-20	21281-21282	(	
76-21	21283-21287	0,45	
76-22	21287-21288	)	
76-23	21289-21294	45380	
76-24	21295-21296	(	

#Text=0,41) 0 ( 0,00) -------- -------- -------- Total 166931 10951564 [44,04%]
77-1	21297-21301	0,41	
77-2	21301-21302	)	
77-3	21303-21304	0	
77-4	21305-21306	(	
77-5	21307-21311	0,00	
77-6	21311-21312	)	
77-7	21313-21314	-	
77-8	21314-21315	-	
77-9	21315-21316	-	
77-10	21316-21317	-	
77-11	21317-21318	-	
77-12	21318-21319	-	
77-13	21319-21320	-	
77-14	21320-21321	-	
77-15	21322-21323	-	
77-16	21323-21324	-	
77-17	21324-21325	-	
77-18	21325-21326	-	
77-19	21326-21327	-	
77-20	21327-21328	-	
77-21	21328-21329	-	
77-22	21329-21330	-	
77-23	21331-21332	-	
77-24	21332-21333	-	
77-25	21333-21334	-	
77-26	21334-21335	-	
77-27	21335-21336	-	
77-28	21336-21337	-	
77-29	21337-21338	-	
77-30	21338-21339	-	
77-31	21340-21345	Total	
77-32	21346-21352	166931	
77-33	21353-21361	10951564	
77-34	21362-21363	[	
77-35	21363-21369	44,04%	
77-36	21369-21370	]	

#Text=13916104 [55,96%] Zero rows are removed to make the table more compact. Pay attention to the summary row (Total) and compare the size of full images (FPI size) with he size of normal records (Record size).
78-1	21371-21379	13916104	
78-2	21380-21381	[	
78-3	21381-21387	55,96%	
78-4	21387-21388	]	
78-5	21389-21393	Zero	
78-6	21394-21398	rows	
78-7	21399-21402	are	
78-8	21403-21410	removed	
78-9	21411-21413	to	
78-10	21414-21418	make	
78-11	21419-21422	the	
78-12	21423-21428	table	
78-13	21429-21433	more	
78-14	21434-21441	compact	
78-15	21441-21442	.	
78-16	21443-21446	Pay	
78-17	21447-21456	attention	
78-18	21457-21459	to	
78-19	21460-21463	the	
78-20	21464-21471	summary	
78-21	21472-21475	row	
78-22	21476-21477	(	
78-23	21477-21482	Total	
78-24	21482-21483	)	
78-25	21484-21487	and	
78-26	21488-21495	compare	
78-27	21496-21499	the	
78-28	21500-21504	size	
78-29	21505-21507	of	
78-30	21508-21512	full	
78-31	21513-21519	images	
78-32	21520-21521	(	
78-33	21521-21524	FPI	
78-34	21525-21529	size	
78-35	21529-21530	)	
78-36	21531-21535	with	
78-37	21536-21538	he	
78-38	21539-21543	size	
78-39	21544-21546	of	
78-40	21547-21553	normal	
78-41	21554-21561	records	
78-42	21562-21563	(	
78-43	21563-21569	Record	
78-44	21570-21574	size	
78-45	21574-21575	)	
78-46	21575-21576	.	

#Text=The full_page_writes parameter can be turned off only if the file system and hardware themselves ensure the automicity of writes. But, as we can see, there isn't much sense in it (provided checksums are turned on). Now let's see how compression can help. => ALTER SYSTEM SET full_page_writes = on; => ALTER SYSTEM SET wal_compression = on; => SELECT pg_reload_conf();
79-1	21577-21580	The	
79-2	21581-21597	full_page_writes	
79-3	21598-21607	parameter	
79-4	21608-21611	can	
79-5	21612-21614	be	
79-6	21615-21621	turned	
79-7	21622-21625	off	
79-8	21626-21630	only	
79-9	21631-21633	if	
79-10	21634-21637	the	
79-11	21638-21642	file	
79-12	21643-21649	system	
79-13	21650-21653	and	
79-14	21654-21662	hardware	
79-15	21663-21673	themselves	
79-16	21674-21680	ensure	
79-17	21681-21684	the	
79-18	21685-21695	automicity	
79-19	21696-21698	of	
79-20	21699-21705	writes	
79-21	21705-21706	.	
79-22	21707-21710	But	
79-23	21710-21711	,	
79-24	21712-21714	as	
79-25	21715-21717	we	
79-26	21718-21721	can	
79-27	21722-21725	see	
79-28	21725-21726	,	
79-29	21727-21732	there	
79-30	21733-21738	isn't	
79-31	21739-21743	much	
79-32	21744-21749	sense	
79-33	21750-21752	in	
79-34	21753-21755	it	
79-35	21756-21757	(	
79-36	21757-21765	provided	
79-37	21766-21775	checksums	
79-38	21776-21779	are	
79-39	21780-21786	turned	
79-40	21787-21789	on	
79-41	21789-21790	)	
79-42	21790-21791	.	
79-43	21792-21795	Now	
79-44	21796-21801	let's	
79-45	21802-21805	see	
79-46	21806-21809	how	
79-47	21810-21821	compression	
79-48	21822-21825	can	
79-49	21826-21830	help	
79-50	21830-21831	.	
79-51	21832-21833	=	
79-52	21833-21834	>	
79-53	21835-21840	ALTER	
79-54	21841-21847	SYSTEM	
79-55	21848-21851	SET	
79-56	21852-21868	full_page_writes	
79-57	21869-21870	=	
79-58	21871-21873	on	
79-59	21873-21874	;	
79-60	21875-21876	=	
79-61	21876-21877	>	
79-62	21878-21883	ALTER	
79-63	21884-21890	SYSTEM	
79-64	21891-21894	SET	
79-65	21895-21910	wal_compression	
79-66	21911-21912	=	
79-67	21913-21915	on	
79-68	21915-21916	;	
79-69	21917-21918	=	
79-70	21918-21919	>	
79-71	21920-21926	SELECT	
79-72	21927-21941	pg_reload_conf	
79-73	21941-21942	(	
79-74	21942-21943	)	
79-75	21943-21944	;	

#Text=Repeating the same experiment. => CHECKPOINT; => SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn ---------------------------
80-1	21945-21954	Repeating	
80-2	21955-21958	the	
80-3	21959-21963	same	
80-4	21964-21974	experiment	
80-5	21974-21975	.	
80-6	21976-21977	=	
80-7	21977-21978	>	
80-8	21979-21989	CHECKPOINT	
80-9	21989-21990	;	
80-10	21991-21992	=	
80-11	21992-21993	>	
80-12	21994-22000	SELECT	
80-13	22001-22026	pg_current_wal_insert_lsn	
80-14	22026-22027	(	
80-15	22027-22028	)	
80-16	22028-22029	;	
80-17	22030-22055	pg_current_wal_insert_lsn	
80-18	22056-22057	-	
80-19	22057-22058	-	
80-20	22058-22059	-	
80-21	22059-22060	-	
80-22	22060-22061	-	
80-23	22061-22062	-	
80-24	22062-22063	-	
80-25	22063-22064	-	
80-26	22064-22065	-	
80-27	22065-22066	-	
80-28	22066-22067	-	
80-29	22067-22068	-	
80-30	22068-22069	-	
80-31	22069-22070	-	
80-32	22070-22071	-	
80-33	22071-22072	-	
80-34	22072-22073	-	
80-35	22073-22074	-	
80-36	22074-22075	-	
80-37	22075-22076	-	
80-38	22076-22077	-	
80-39	22077-22078	-	
80-40	22078-22079	-	
80-41	22079-22080	-	
80-42	22080-22081	-	
80-43	22081-22082	-	
80-44	22082-22083	-	

#Text=0/3BE87710 (1 row) student$ pgbench -T 30 test starting vacuum...end. transaction type: TPC-B (sort of) scaling factor: 1 query mode: simple number of clients: 1
81-1	22084-22085	0	
81-2	22085-22086	/	
81-3	22086-22094	3BE87710	
81-4	22095-22096	(	
81-5	22096-22097	1	
81-6	22098-22101	row	
81-7	22101-22102	)	
81-8	22103-22110	student	
81-9	22110-22111	$	
81-10	22112-22119	pgbench	
81-11	22120-22121	-	
81-12	22121-22122	T	
81-13	22123-22125	30	
81-14	22126-22130	test	
81-15	22131-22139	starting	
81-16	22140-22146	vacuum	
81-17	22146-22147	.	
81-18	22147-22148	.	
81-19	22148-22149	.	
81-20	22149-22152	end	
81-21	22152-22153	.	
81-22	22154-22165	transaction	
81-23	22166-22170	type	
81-24	22170-22171	:	
81-25	22172-22177	TPC-B	
81-26	22178-22179	(	
81-27	22179-22183	sort	
81-28	22184-22186	of	
81-29	22186-22187	)	
81-30	22188-22195	scaling	
81-31	22196-22202	factor	
81-32	22202-22203	:	
81-33	22204-22205	1	
81-34	22206-22211	query	
81-35	22212-22216	mode	
81-36	22216-22217	:	
81-37	22218-22224	simple	
81-38	22225-22231	number	
81-39	22232-22234	of	
81-40	22235-22242	clients	
81-41	22242-22243	:	
81-42	22244-22245	1	

#Text=number of threads: 1 duration: 30 s number of transactions actually processed: 26833 latency average = 1.118 ms tps = 894.405027 (including connections establishing) tps = 894.516845 (excluding connections establishing)
82-1	22246-22252	number	
82-2	22253-22255	of	
82-3	22256-22263	threads	
82-4	22263-22264	:	
82-5	22265-22266	1	
82-6	22267-22275	duration	
82-7	22275-22276	:	
82-8	22277-22279	30	
82-9	22280-22281	s	
82-10	22282-22288	number	
82-11	22289-22291	of	
82-12	22292-22304	transactions	
82-13	22305-22313	actually	
82-14	22314-22323	processed	
82-15	22323-22324	:	
82-16	22325-22330	26833	
82-17	22331-22338	latency	
82-18	22339-22346	average	
82-19	22347-22348	=	
82-20	22349-22354	1.118	
82-21	22355-22357	ms	
82-22	22358-22361	tps	
82-23	22362-22363	=	
82-24	22364-22374	894.405027	
82-25	22375-22376	(	
82-26	22376-22385	including	
82-27	22386-22397	connections	
82-28	22398-22410	establishing	
82-29	22410-22411	)	
82-30	22412-22415	tps	
82-31	22416-22417	=	
82-32	22418-22428	894.516845	
82-33	22429-22430	(	
82-34	22430-22439	excluding	
82-35	22440-22451	connections	
82-36	22452-22464	establishing	
82-37	22464-22465	)	

#Text==> SELECT pg_current_wal_insert_lsn(); pg_current_wal_insert_lsn --------------------------- 0/3CBD3EA8 (1 row)
83-1	22466-22467	=	
83-2	22467-22468	>	
83-3	22469-22475	SELECT	
83-4	22476-22501	pg_current_wal_insert_lsn	
83-5	22501-22502	(	
83-6	22502-22503	)	
83-7	22503-22504	;	
83-8	22505-22530	pg_current_wal_insert_lsn	
83-9	22531-22532	-	
83-10	22532-22533	-	
83-11	22533-22534	-	
83-12	22534-22535	-	
83-13	22535-22536	-	
83-14	22536-22537	-	
83-15	22537-22538	-	
83-16	22538-22539	-	
83-17	22539-22540	-	
83-18	22540-22541	-	
83-19	22541-22542	-	
83-20	22542-22543	-	
83-21	22543-22544	-	
83-22	22544-22545	-	
83-23	22545-22546	-	
83-24	22546-22547	-	
83-25	22547-22548	-	
83-26	22548-22549	-	
83-27	22549-22550	-	
83-28	22550-22551	-	
83-29	22551-22552	-	
83-30	22552-22553	-	
83-31	22553-22554	-	
83-32	22554-22555	-	
83-33	22555-22556	-	
83-34	22556-22557	-	
83-35	22557-22558	-	
83-36	22559-22560	0	
83-37	22560-22561	/	
83-38	22561-22569	3CBD3EA8	
83-39	22570-22571	(	
83-40	22571-22572	1	
83-41	22573-22576	row	
83-42	22576-22577	)	

#Text=Getting the size of WAL records: => SELECT pg_size_pretty('0/3CBD3EA8'::pg_lsn - '0/3BE87710'::pg_lsn); pg_size_pretty
84-1	22578-22585	Getting	
84-2	22586-22589	the	
84-3	22590-22594	size	
84-4	22595-22597	of	
84-5	22598-22601	WAL	
84-6	22602-22609	records	
84-7	22609-22610	:	
84-8	22611-22612	=	
84-9	22612-22613	>	
84-10	22614-22620	SELECT	
84-11	22621-22635	pg_size_pretty	
84-12	22635-22636	(	
84-13	22636-22637	'	
84-14	22637-22638	0	
84-15	22638-22639	/	
84-16	22639-22647	3CBD3EA8	
84-17	22647-22648	'	
84-18	22648-22649	:	
84-19	22649-22650	:	
84-20	22650-22656	pg_lsn	
84-21	22657-22658	-	
84-22	22659-22660	'	
84-23	22660-22661	0	
84-24	22661-22662	/	
84-25	22662-22670	3BE87710	
84-26	22670-22671	'	
84-27	22671-22672	:	
84-28	22672-22673	:	
84-29	22673-22679	pg_lsn	
84-30	22679-22680	)	
84-31	22680-22681	;	
84-32	22682-22696	pg_size_pretty	

#Text=---------------- 13 MB (1 row) Conclusion: if there are many FPIs (due to checksums or full_page_writes, that is, almost always), most likely it makes sense to use compression although it loads the processor. Performance
85-1	22697-22698	-	
85-2	22698-22699	-	
85-3	22699-22700	-	
85-4	22700-22701	-	
85-5	22701-22702	-	
85-6	22702-22703	-	
85-7	22703-22704	-	
85-8	22704-22705	-	
85-9	22705-22706	-	
85-10	22706-22707	-	
85-11	22707-22708	-	
85-12	22708-22709	-	
85-13	22709-22710	-	
85-14	22710-22711	-	
85-15	22711-22712	-	
85-16	22712-22713	-	
85-17	22714-22716	13	
85-18	22717-22719	MB	
85-19	22720-22721	(	
85-20	22721-22722	1	
85-21	22723-22726	row	
85-22	22726-22727	)	
85-23	22728-22738	Conclusion	
85-24	22738-22739	:	
85-25	22740-22742	if	
85-26	22743-22748	there	
85-27	22749-22752	are	
85-28	22753-22757	many	
85-29	22758-22762	FPIs	
85-30	22763-22764	(	
85-31	22764-22767	due	
85-32	22768-22770	to	
85-33	22771-22780	checksums	
85-34	22781-22783	or	
85-35	22784-22800	full_page_writes	
85-36	22800-22801	,	
85-37	22802-22806	that	
85-38	22806-22807	 	
85-39	22807-22809	is	
85-40	22809-22810	,	
85-41	22811-22817	almost	
85-42	22818-22824	always	
85-43	22824-22825	)	
85-44	22825-22826	,	
85-45	22827-22831	most	
85-46	22832-22838	likely	
85-47	22839-22841	it	
85-48	22842-22847	makes	
85-49	22848-22853	sense	
85-50	22854-22856	to	
85-51	22857-22860	use	
85-52	22861-22872	compression	
85-53	22873-22881	although	
85-54	22882-22884	it	
85-55	22885-22890	loads	
85-56	22891-22894	the	
85-57	22895-22904	processor	
85-58	22904-22905	.	
85-59	22906-22917	Performance	

#Text=During regular work of a server, WAL files are continuously written one by one. Because of no random access, even HDD disks do the job fine. But this kind of load is pretty much different from the one when data files are accessed. So, it is usually beneficial to store WAL on a separate physical disk (or disk array) mounted to the file system of the server. Instead of the $PGDATA/pg_wal directory, a symbolic link to the appropriate directory must be created.
86-1	22918-22924	During	
86-2	22925-22932	regular	
86-3	22933-22937	work	
86-4	22938-22940	of	
86-5	22941-22942	a	
86-6	22943-22949	server	
86-7	22949-22950	,	
86-8	22951-22954	WAL	
86-9	22955-22960	files	
86-10	22961-22964	are	
86-11	22965-22977	continuously	
86-12	22978-22985	written	
86-13	22986-22989	one	
86-14	22990-22992	by	
86-15	22993-22996	one	
86-16	22996-22997	.	
86-17	22998-23005	Because	
86-18	23006-23008	of	
86-19	23009-23011	no	
86-20	23012-23018	random	
86-21	23019-23025	access	
86-22	23025-23026	,	
86-23	23027-23031	even	
86-24	23032-23035	HDD	
86-25	23036-23041	disks	
86-26	23042-23044	do	
86-27	23045-23048	the	
86-28	23049-23052	job	
86-29	23053-23057	fine	
86-30	23057-23058	.	
86-31	23059-23062	But	
86-32	23063-23067	this	
86-33	23068-23072	kind	
86-34	23073-23075	of	
86-35	23076-23080	load	
86-36	23081-23083	is	
86-37	23084-23090	pretty	
86-38	23091-23095	much	
86-39	23096-23105	different	
86-40	23106-23110	from	
86-41	23111-23114	the	
86-42	23115-23118	one	
86-43	23119-23123	when	
86-44	23124-23128	data	
86-45	23129-23134	files	
86-46	23135-23138	are	
86-47	23139-23147	accessed	
86-48	23147-23148	.	
86-49	23149-23151	So	
86-50	23151-23152	,	
86-51	23153-23155	it	
86-52	23156-23158	is	
86-53	23159-23166	usually	
86-54	23167-23177	beneficial	
86-55	23178-23180	to	
86-56	23181-23186	store	
86-57	23187-23190	WAL	
86-58	23191-23193	on	
86-59	23194-23195	a	
86-60	23196-23204	separate	
86-61	23205-23213	physical	
86-62	23214-23218	disk	
86-63	23219-23220	(	
86-64	23220-23222	or	
86-65	23223-23227	disk	
86-66	23228-23233	array	
86-67	23233-23234	)	
86-68	23235-23242	mounted	
86-69	23243-23245	to	
86-70	23246-23249	the	
86-71	23250-23254	file	
86-72	23255-23261	system	
86-73	23262-23264	of	
86-74	23265-23268	the	
86-75	23269-23275	server	
86-76	23275-23276	.	
86-77	23277-23284	Instead	
86-78	23285-23287	of	
86-79	23288-23291	the	
86-80	23292-23293	$	
86-81	23293-23299	PGDATA	
86-82	23299-23300	/	
86-83	23300-23306	pg_wal	
86-84	23307-23316	directory	
86-85	23316-23317	,	
86-86	23318-23319	a	
86-87	23320-23328	symbolic	
86-88	23329-23333	link	
86-89	23334-23336	to	
86-90	23337-23340	the	
86-91	23341-23352	appropriate	
86-92	23353-23362	directory	
86-93	23363-23367	must	
86-94	23368-23370	be	
86-95	23371-23378	created	
86-96	23378-23379	.	

#Text=There are a couple of situations where WAL files need to be not only written but read. The first one is a clear case of recovery after a failure. The second one is less trivial. It occurs if stream replication is used and a replica is late to receive WAL records while they are still in the OS buffers of the main server. In this case, the walsender process has to read the necessary data from disk. We will discuss this in more detail when we reach replication. WAL is written in either of the two modes: Synchronous — at a transaction commit, the work cannot be continued until all WAL records of this transaction get on disk. Asynchronous — a transaction completes immediately, and WAL is written in the background.
87-1	23380-23385	There	
87-2	23386-23389	are	
87-3	23390-23391	a	
87-4	23392-23398	couple	
87-5	23399-23401	of	
87-6	23402-23412	situations	
87-7	23413-23418	where	
87-8	23419-23422	WAL	
87-9	23423-23428	files	
87-10	23429-23433	need	
87-11	23434-23436	to	
87-12	23437-23439	be	
87-13	23440-23443	not	
87-14	23444-23448	only	
87-15	23449-23456	written	
87-16	23457-23460	but	
87-17	23461-23465	read	
87-18	23465-23466	.	
87-19	23467-23470	The	
87-20	23471-23476	first	
87-21	23477-23480	one	
87-22	23481-23483	is	
87-23	23484-23485	a	
87-24	23486-23491	clear	
87-25	23492-23496	case	
87-26	23497-23499	of	
87-27	23500-23508	recovery	
87-28	23509-23514	after	
87-29	23515-23516	a	
87-30	23517-23524	failure	
87-31	23524-23525	.	
87-32	23526-23529	The	
87-33	23530-23536	second	
87-34	23537-23540	one	
87-35	23541-23543	is	
87-36	23544-23548	less	
87-37	23549-23556	trivial	
87-38	23556-23557	.	
87-39	23558-23560	It	
87-40	23561-23567	occurs	
87-41	23568-23570	if	
87-42	23571-23577	stream	
87-43	23578-23589	replication	
87-44	23590-23592	is	
87-45	23593-23597	used	
87-46	23598-23601	and	
87-47	23602-23603	a	
87-48	23604-23611	replica	
87-49	23612-23614	is	
87-50	23615-23619	late	
87-51	23620-23622	to	
87-52	23623-23630	receive	
87-53	23631-23634	WAL	
87-54	23635-23642	records	
87-55	23643-23648	while	
87-56	23649-23653	they	
87-57	23654-23657	are	
87-58	23658-23663	still	
87-59	23664-23666	in	
87-60	23667-23670	the	
87-61	23671-23673	OS	
87-62	23674-23681	buffers	
87-63	23682-23684	of	
87-64	23685-23688	the	
87-65	23689-23693	main	
87-66	23694-23700	server	
87-67	23700-23701	.	
87-68	23702-23704	In	
87-69	23705-23709	this	
87-70	23710-23714	case	
87-71	23714-23715	,	
87-72	23716-23719	the	
87-73	23720-23729	walsender	
87-74	23730-23737	process	
87-75	23738-23741	has	
87-76	23742-23744	to	
87-77	23745-23749	read	
87-78	23750-23753	the	
87-79	23754-23763	necessary	
87-80	23764-23768	data	
87-81	23769-23773	from	
87-82	23774-23778	disk	
87-83	23778-23779	.	
87-84	23780-23782	We	
87-85	23783-23787	will	
87-86	23788-23795	discuss	
87-87	23796-23800	this	
87-88	23801-23803	in	
87-89	23804-23808	more	
87-90	23809-23815	detail	
87-91	23816-23820	when	
87-92	23821-23823	we	
87-93	23824-23829	reach	
87-94	23830-23841	replication	
87-95	23841-23842	.	
87-96	23843-23846	WAL	
87-97	23847-23849	is	
87-98	23850-23857	written	
87-99	23858-23860	in	
87-100	23861-23867	either	
87-101	23868-23870	of	
87-102	23871-23874	the	
87-103	23875-23878	two	
87-104	23879-23884	modes	
87-105	23884-23885	:	
87-106	23886-23897	Synchronous	
87-107	23897-23898	 	
87-108	23898-23899	—	
87-109	23900-23902	at	
87-110	23903-23904	a	
87-111	23905-23916	transaction	
87-112	23917-23923	commit	
87-113	23923-23924	,	
87-114	23925-23928	the	
87-115	23929-23933	work	
87-116	23934-23940	cannot	
87-117	23941-23943	be	
87-118	23944-23953	continued	
87-119	23954-23959	until	
87-120	23960-23963	all	
87-121	23964-23967	WAL	
87-122	23968-23975	records	
87-123	23976-23978	of	
87-124	23979-23983	this	
87-125	23984-23995	transaction	
87-126	23996-23999	get	
87-127	24000-24002	on	
87-128	24003-24007	disk	
87-129	24007-24008	.	
87-130	24009-24021	Asynchronous	
87-131	24021-24022	 	
87-132	24022-24023	—	
87-133	24024-24025	a	
87-134	24026-24037	transaction	
87-135	24038-24047	completes	
87-136	24048-24059	immediately	
87-137	24059-24060	,	
87-138	24061-24064	and	
87-139	24065-24068	WAL	
87-140	24069-24071	is	
87-141	24072-24079	written	
87-142	24080-24082	in	
87-143	24083-24086	the	
87-144	24087-24097	background	
87-145	24097-24098	.	

#Text=The synchronous_commit parameter, turned on by default, sets the synchronous mode.
88-1	24099-24102	The	
88-2	24103-24121	synchronous_commit	
88-3	24122-24131	parameter	
88-4	24131-24132	,	
88-5	24133-24139	turned	
88-6	24140-24142	on	
88-7	24143-24145	by	
88-8	24146-24153	default	
88-9	24153-24154	,	
88-10	24155-24159	sets	
88-11	24160-24163	the	
88-12	24164-24175	synchronous	
88-13	24176-24180	mode	
88-14	24180-24181	.	

#Text=Because synchronization is connected with the actual (that is, slow) input/output, it is beneficial to do it as infrequently as possible. To this end, a backend process that completes a transaction and writes WAL makes a short pause, defined by the commit_delay parameter. But this happens only if the system has not less than commit_siblings active transactions. This behavior relies on the expectation that during the waiting time some transactions will be completed and it will be possible to synchronize them in one go. This is similar to how you hold the doors of an elevator so that someone has time to jump into the car. By default, commit_siblings = 5 and commit_delay = 0, so actually there is no wait. It makes sense to change the value of commit_delay only for systems that execute a great number of OLTP transactions.
89-1	24182-24189	Because	
89-2	24190-24205	synchronization	
89-3	24206-24208	is	
89-4	24209-24218	connected	
89-5	24219-24223	with	
89-6	24224-24227	the	
89-7	24228-24234	actual	
89-8	24235-24236	(	
89-9	24236-24240	that	
89-10	24240-24241	 	
89-11	24241-24243	is	
89-12	24243-24244	,	
89-13	24245-24249	slow	
89-14	24249-24250	)	
89-15	24251-24256	input	
89-16	24256-24257	/	
89-17	24257-24263	output	
89-18	24263-24264	,	
89-19	24265-24267	it	
89-20	24268-24270	is	
89-21	24271-24281	beneficial	
89-22	24282-24284	to	
89-23	24285-24287	do	
89-24	24288-24290	it	
89-25	24291-24293	as	
89-26	24294-24306	infrequently	
89-27	24307-24309	as	
89-28	24310-24318	possible	
89-29	24318-24319	.	
89-30	24320-24322	To	
89-31	24323-24327	this	
89-32	24328-24331	end	
89-33	24331-24332	,	
89-34	24333-24334	a	
89-35	24335-24342	backend	
89-36	24343-24350	process	
89-37	24351-24355	that	
89-38	24356-24365	completes	
89-39	24366-24367	a	
89-40	24368-24379	transaction	
89-41	24380-24383	and	
89-42	24384-24390	writes	
89-43	24391-24394	WAL	
89-44	24395-24400	makes	
89-45	24401-24402	a	
89-46	24403-24408	short	
89-47	24409-24414	pause	
89-48	24414-24415	,	
89-49	24416-24423	defined	
89-50	24424-24426	by	
89-51	24427-24430	the	
89-52	24431-24443	commit_delay	
89-53	24444-24453	parameter	
89-54	24453-24454	.	
89-55	24455-24458	But	
89-56	24459-24463	this	
89-57	24464-24471	happens	
89-58	24472-24476	only	
89-59	24477-24479	if	
89-60	24480-24483	the	
89-61	24484-24490	system	
89-62	24491-24494	has	
89-63	24495-24498	not	
89-64	24499-24503	less	
89-65	24504-24508	than	
89-66	24509-24524	commit_siblings	
89-67	24525-24531	active	
89-68	24532-24544	transactions	
89-69	24544-24545	.	
89-70	24546-24550	This	
89-71	24551-24559	behavior	
89-72	24560-24566	relies	
89-73	24567-24569	on	
89-74	24570-24573	the	
89-75	24574-24585	expectation	
89-76	24586-24590	that	
89-77	24591-24597	during	
89-78	24598-24601	the	
89-79	24602-24609	waiting	
89-80	24610-24614	time	
89-81	24615-24619	some	
89-82	24620-24632	transactions	
89-83	24633-24637	will	
89-84	24638-24640	be	
89-85	24641-24650	completed	
89-86	24651-24654	and	
89-87	24655-24657	it	
89-88	24658-24662	will	
89-89	24663-24665	be	
89-90	24666-24674	possible	
89-91	24675-24677	to	
89-92	24678-24689	synchronize	
89-93	24690-24694	them	
89-94	24695-24697	in	
89-95	24698-24701	one	
89-96	24702-24704	go	
89-97	24704-24705	.	
89-98	24706-24710	This	
89-99	24711-24713	is	
89-100	24714-24721	similar	
89-101	24722-24724	to	
89-102	24725-24728	how	
89-103	24729-24732	you	
89-104	24733-24737	hold	
89-105	24738-24741	the	
89-106	24742-24747	doors	
89-107	24748-24750	of	
89-108	24751-24753	an	
89-109	24754-24762	elevator	
89-110	24763-24765	so	
89-111	24766-24770	that	
89-112	24771-24778	someone	
89-113	24779-24782	has	
89-114	24783-24787	time	
89-115	24788-24790	to	
89-116	24791-24795	jump	
89-117	24796-24800	into	
89-118	24801-24804	the	
89-119	24805-24808	car	
89-120	24808-24809	.	
89-121	24810-24812	By	
89-122	24813-24820	default	
89-123	24820-24821	,	
89-124	24822-24837	commit_siblings	
89-125	24838-24839	=	
89-126	24840-24841	5	
89-127	24842-24845	and	
89-128	24846-24858	commit_delay	
89-129	24859-24860	=	
89-130	24861-24862	0	
89-131	24862-24863	,	
89-132	24864-24866	so	
89-133	24867-24875	actually	
89-134	24876-24881	there	
89-135	24882-24884	is	
89-136	24885-24887	no	
89-137	24888-24892	wait	
89-138	24892-24893	.	
89-139	24894-24896	It	
89-140	24897-24902	makes	
89-141	24903-24908	sense	
89-142	24909-24911	to	
89-143	24912-24918	change	
89-144	24919-24922	the	
89-145	24923-24928	value	
89-146	24929-24931	of	
89-147	24932-24944	commit_delay	
89-148	24945-24949	only	
89-149	24950-24953	for	
89-150	24954-24961	systems	
89-151	24962-24966	that	
89-152	24967-24974	execute	
89-153	24975-24976	a	
89-154	24977-24982	great	
89-155	24983-24989	number	
89-156	24990-24992	of	
89-157	24993-24997	OLTP	
89-158	24998-25010	transactions	
89-159	25010-25011	.	

#Text=Then the process flushes part of WAL up to the LSN needed (or a little more if during the waiting time new records were added). After that the transaction is considered completed. Synchronous writing ensures durability (the letter D in the ACID acronym): if a transaction is committed, all its WAL records are already on disk and won't be lost. But a drawback is that synchronous writing increases the response time (the COMMIT command does not return control until the end of the synchronization) and reduces the system performance.
90-1	25012-25016	Then	
90-2	25017-25020	the	
90-3	25021-25028	process	
90-4	25029-25036	flushes	
90-5	25037-25041	part	
90-6	25042-25044	of	
90-7	25045-25048	WAL	
90-8	25049-25051	up	
90-9	25052-25054	to	
90-10	25055-25058	the	
90-11	25059-25062	LSN	
90-12	25063-25069	needed	
90-13	25070-25071	(	
90-14	25071-25073	or	
90-15	25074-25075	a	
90-16	25076-25082	little	
90-17	25083-25087	more	
90-18	25088-25090	if	
90-19	25091-25097	during	
90-20	25098-25101	the	
90-21	25102-25109	waiting	
90-22	25110-25114	time	
90-23	25115-25118	new	
90-24	25119-25126	records	
90-25	25127-25131	were	
90-26	25132-25137	added	
90-27	25137-25138	)	
90-28	25138-25139	.	
90-29	25140-25145	After	
90-30	25146-25150	that	
90-31	25151-25154	the	
90-32	25155-25166	transaction	
90-33	25167-25169	is	
90-34	25170-25180	considered	
90-35	25181-25190	completed	
90-36	25190-25191	.	
90-37	25192-25203	Synchronous	
90-38	25204-25211	writing	
90-39	25212-25219	ensures	
90-40	25220-25230	durability	
90-41	25231-25232	(	
90-42	25232-25235	the	
90-43	25236-25242	letter	
90-44	25243-25244	D	
90-45	25245-25247	in	
90-46	25248-25251	the	
90-47	25252-25256	ACID	
90-48	25257-25264	acronym	
90-49	25264-25265	)	
90-50	25265-25266	:	
90-51	25267-25269	if	
90-52	25270-25271	a	
90-53	25272-25283	transaction	
90-54	25284-25286	is	
90-55	25287-25296	committed	
90-56	25296-25297	,	
90-57	25298-25301	all	
90-58	25302-25305	its	
90-59	25306-25309	WAL	
90-60	25310-25317	records	
90-61	25318-25321	are	
90-62	25322-25329	already	
90-63	25330-25332	on	
90-64	25333-25337	disk	
90-65	25338-25341	and	
90-66	25342-25347	won't	
90-67	25348-25350	be	
90-68	25351-25355	lost	
90-69	25355-25356	.	
90-70	25357-25360	But	
90-71	25361-25362	a	
90-72	25363-25371	drawback	
90-73	25372-25374	is	
90-74	25375-25379	that	
90-75	25380-25391	synchronous	
90-76	25392-25399	writing	
90-77	25400-25409	increases	
90-78	25410-25413	the	
90-79	25414-25422	response	
90-80	25423-25427	time	
90-81	25428-25429	(	
90-82	25429-25432	the	
90-83	25433-25439	COMMIT	
90-84	25440-25447	command	
90-85	25448-25452	does	
90-86	25453-25456	not	
90-87	25457-25463	return	
90-88	25464-25471	control	
90-89	25472-25477	until	
90-90	25478-25481	the	
90-91	25482-25485	end	
90-92	25486-25488	of	
90-93	25489-25492	the	
90-94	25493-25508	synchronization	
90-95	25508-25509	)	
90-96	25510-25513	and	
90-97	25514-25521	reduces	
90-98	25522-25525	the	
90-99	25526-25532	system	
90-100	25533-25544	performance	
90-101	25544-25545	.	

#Text=You can make writing asynchronous by setting synchronous_commit = off (or local). When writing is asynchronous, WAL records are flushed by the wal writer process, which alternates work and waits (the waiting time is specified by the wal_writer_delay parameter with the default value of 200 ms).
91-1	25546-25549	You	
91-2	25550-25553	can	
91-3	25554-25558	make	
91-4	25559-25566	writing	
91-5	25567-25579	asynchronous	
91-6	25580-25582	by	
91-7	25583-25590	setting	
91-8	25591-25609	synchronous_commit	
91-9	25610-25611	=	
91-10	25612-25615	off	
91-11	25616-25617	(	
91-12	25617-25619	or	
91-13	25620-25625	local	
91-14	25625-25626	)	
91-15	25626-25627	.	
91-16	25628-25632	When	
91-17	25633-25640	writing	
91-18	25641-25643	is	
91-19	25644-25656	asynchronous	
91-20	25656-25657	,	
91-21	25658-25661	WAL	
91-22	25662-25669	records	
91-23	25670-25673	are	
91-24	25674-25681	flushed	
91-25	25682-25684	by	
91-26	25685-25688	the	
91-27	25689-25692	wal	
91-28	25693-25699	writer	
91-29	25700-25707	process	
91-30	25707-25708	,	
91-31	25709-25714	which	
91-32	25715-25725	alternates	
91-33	25726-25730	work	
91-34	25731-25734	and	
91-35	25735-25740	waits	
91-36	25741-25742	(	
91-37	25742-25745	the	
91-38	25746-25753	waiting	
91-39	25754-25758	time	
91-40	25759-25761	is	
91-41	25762-25771	specified	
91-42	25772-25774	by	
91-43	25775-25778	the	
91-44	25779-25795	wal_writer_delay	
91-45	25796-25805	parameter	
91-46	25806-25810	with	
91-47	25811-25814	the	
91-48	25815-25822	default	
91-49	25823-25828	value	
91-50	25829-25831	of	
91-51	25832-25835	200	
91-52	25835-25836	 	
91-53	25836-25838	ms	
91-54	25838-25839	)	
91-55	25839-25840	.	

#Text=When the process wakes up after a wait, it checks whether completely filled WAL pages appeared since last time. If they did appear, the process ignores the current page, not filled to the end, and writes only completely filled pages. (However, not all at once: writing stops when it reaches the end of the cache and proceeds from the beginning of the cache next time.) But if none of the pages are filled, the process writes the current WAL page (not filled to the end) — otherwise, what did it wake up for? This algorithm aims to avoid synchronization of the same page several times wherever possible, which is critical for a large stream of updates.
92-1	25841-25845	When	
92-2	25846-25849	the	
92-3	25850-25857	process	
92-4	25858-25863	wakes	
92-5	25864-25866	up	
92-6	25867-25872	after	
92-7	25873-25874	a	
92-8	25875-25879	wait	
92-9	25879-25880	,	
92-10	25881-25883	it	
92-11	25884-25890	checks	
92-12	25891-25898	whether	
92-13	25899-25909	completely	
92-14	25910-25916	filled	
92-15	25917-25920	WAL	
92-16	25921-25926	pages	
92-17	25927-25935	appeared	
92-18	25936-25941	since	
92-19	25942-25946	last	
92-20	25947-25951	time	
92-21	25951-25952	.	
92-22	25953-25955	If	
92-23	25956-25960	they	
92-24	25961-25964	did	
92-25	25965-25971	appear	
92-26	25971-25972	,	
92-27	25973-25976	the	
92-28	25977-25984	process	
92-29	25985-25992	ignores	
92-30	25993-25996	the	
92-31	25997-26004	current	
92-32	26005-26009	page	
92-33	26009-26010	,	
92-34	26011-26014	not	
92-35	26015-26021	filled	
92-36	26022-26024	to	
92-37	26025-26028	the	
92-38	26029-26032	end	
92-39	26032-26033	,	
92-40	26034-26037	and	
92-41	26038-26044	writes	
92-42	26045-26049	only	
92-43	26050-26060	completely	
92-44	26061-26067	filled	
92-45	26068-26073	pages	
92-46	26073-26074	.	
92-47	26075-26076	(	
92-48	26076-26083	However	
92-49	26083-26084	,	
92-50	26085-26088	not	
92-51	26089-26092	all	
92-52	26093-26095	at	
92-53	26096-26100	once	
92-54	26100-26101	:	
92-55	26102-26109	writing	
92-56	26110-26115	stops	
92-57	26116-26120	when	
92-58	26121-26123	it	
92-59	26124-26131	reaches	
92-60	26132-26135	the	
92-61	26136-26139	end	
92-62	26140-26142	of	
92-63	26143-26146	the	
92-64	26147-26152	cache	
92-65	26153-26156	and	
92-66	26157-26165	proceeds	
92-67	26166-26170	from	
92-68	26171-26174	the	
92-69	26175-26184	beginning	
92-70	26185-26187	of	
92-71	26188-26191	the	
92-72	26192-26197	cache	
92-73	26198-26202	next	
92-74	26203-26207	time	
92-75	26207-26208	.	
92-76	26208-26209	)	
92-77	26210-26213	But	
92-78	26214-26216	if	
92-79	26217-26221	none	
92-80	26222-26224	of	
92-81	26225-26228	the	
92-82	26229-26234	pages	
92-83	26235-26238	are	
92-84	26239-26245	filled	
92-85	26245-26246	,	
92-86	26247-26250	the	
92-87	26251-26258	process	
92-88	26259-26265	writes	
92-89	26266-26269	the	
92-90	26270-26277	current	
92-91	26278-26281	WAL	
92-92	26282-26286	page	
92-93	26287-26288	(	
92-94	26288-26291	not	
92-95	26292-26298	filled	
92-96	26299-26301	to	
92-97	26302-26305	the	
92-98	26306-26309	end	
92-99	26309-26310	)	
92-100	26310-26311	 	
92-101	26311-26312	—	
92-102	26313-26322	otherwise	
92-103	26322-26323	,	
92-104	26324-26328	what	
92-105	26329-26332	did	
92-106	26333-26335	it	
92-107	26336-26340	wake	
92-108	26341-26343	up	
92-109	26344-26347	for	
92-110	26347-26348	?	
92-111	26349-26353	This	
92-112	26354-26363	algorithm	
92-113	26364-26368	aims	
92-114	26369-26371	to	
92-115	26372-26377	avoid	
92-116	26378-26393	synchronization	
92-117	26394-26396	of	
92-118	26397-26400	the	
92-119	26401-26405	same	
92-120	26406-26410	page	
92-121	26411-26418	several	
92-122	26419-26424	times	
92-123	26425-26433	wherever	
92-124	26434-26442	possible	
92-125	26442-26443	,	
92-126	26444-26449	which	
92-127	26450-26452	is	
92-128	26453-26461	critical	
92-129	26462-26465	for	
92-130	26466-26467	a	
92-131	26468-26473	large	
92-132	26474-26480	stream	
92-133	26481-26483	of	
92-134	26484-26491	updates	
92-135	26491-26492	.	

#Text=Asynchronous writing is more efficient than the synchronous since commits of the changes do not wait for writes of WAL pages. But the reliability decreases: committed data can be lost in case of failure if less than 3 × wal_writer_delay units of time elapsed between the commit and failure (with the default settings, this is a little longer than half a second). Not an easy choice between efficiency and reliability is up to the system administrator. Note that: unlike turning off synchronization (fsync = off), asynchronous mode does not make recovery impossible. In case of failure, the system will restore the consistent state, but maybe, some of the last transactions will not be present there.
93-1	26493-26505	Asynchronous	
93-2	26506-26513	writing	
93-3	26514-26516	is	
93-4	26517-26521	more	
93-5	26522-26531	efficient	
93-6	26532-26536	than	
93-7	26537-26540	the	
93-8	26541-26552	synchronous	
93-9	26553-26558	since	
93-10	26559-26566	commits	
93-11	26567-26569	of	
93-12	26570-26573	the	
93-13	26574-26581	changes	
93-14	26582-26584	do	
93-15	26585-26588	not	
93-16	26589-26593	wait	
93-17	26594-26597	for	
93-18	26598-26604	writes	
93-19	26605-26607	of	
93-20	26608-26611	WAL	
93-21	26612-26617	pages	
93-22	26617-26618	.	
93-23	26619-26622	But	
93-24	26623-26626	the	
93-25	26627-26638	reliability	
93-26	26639-26648	decreases	
93-27	26648-26649	:	
93-28	26650-26659	committed	
93-29	26660-26664	data	
93-30	26665-26668	can	
93-31	26669-26671	be	
93-32	26672-26676	lost	
93-33	26677-26679	in	
93-34	26680-26684	case	
93-35	26685-26687	of	
93-36	26688-26695	failure	
93-37	26696-26698	if	
93-38	26699-26703	less	
93-39	26704-26708	than	
93-40	26709-26710	3	
93-41	26710-26711	 	
93-42	26711-26712	×	
93-43	26712-26713	 	
93-44	26713-26729	wal_writer_delay	
93-45	26730-26735	units	
93-46	26736-26738	of	
93-47	26739-26743	time	
93-48	26744-26751	elapsed	
93-49	26752-26759	between	
93-50	26760-26763	the	
93-51	26764-26770	commit	
93-52	26771-26774	and	
93-53	26775-26782	failure	
93-54	26783-26784	(	
93-55	26784-26788	with	
93-56	26789-26792	the	
93-57	26793-26800	default	
93-58	26801-26809	settings	
93-59	26809-26810	,	
93-60	26811-26815	this	
93-61	26816-26818	is	
93-62	26819-26820	a	
93-63	26821-26827	little	
93-64	26828-26834	longer	
93-65	26835-26839	than	
93-66	26840-26844	half	
93-67	26845-26846	a	
93-68	26847-26853	second	
93-69	26853-26854	)	
93-70	26854-26855	.	
93-71	26856-26859	Not	
93-72	26860-26862	an	
93-73	26863-26867	easy	
93-74	26868-26874	choice	
93-75	26875-26882	between	
93-76	26883-26893	efficiency	
93-77	26894-26897	and	
93-78	26898-26909	reliability	
93-79	26910-26912	is	
93-80	26913-26915	up	
93-81	26916-26918	to	
93-82	26919-26922	the	
93-83	26923-26929	system	
93-84	26930-26943	administrator	
93-85	26943-26944	.	
93-86	26945-26949	Note	
93-87	26950-26954	that	
93-88	26954-26955	:	
93-89	26956-26962	unlike	
93-90	26963-26970	turning	
93-91	26971-26974	off	
93-92	26975-26990	synchronization	
93-93	26991-26992	(	
93-94	26992-26997	fsync	
93-95	26998-26999	=	
93-96	27000-27003	off	
93-97	27003-27004	)	
93-98	27004-27005	,	
93-99	27006-27018	asynchronous	
93-100	27019-27023	mode	
93-101	27024-27028	does	
93-102	27029-27032	not	
93-103	27033-27037	make	
93-104	27038-27046	recovery	
93-105	27047-27057	impossible	
93-106	27057-27058	.	
93-107	27059-27061	In	
93-108	27062-27066	case	
93-109	27067-27069	of	
93-110	27070-27077	failure	
93-111	27077-27078	,	
93-112	27079-27082	the	
93-113	27083-27089	system	
93-114	27090-27094	will	
93-115	27095-27102	restore	
93-116	27103-27106	the	
93-117	27107-27117	consistent	
93-118	27118-27123	state	
93-119	27123-27124	,	
93-120	27125-27128	but	
93-121	27129-27134	maybe	
93-122	27134-27135	,	
93-123	27136-27140	some	
93-124	27141-27143	of	
93-125	27144-27147	the	
93-126	27148-27152	last	
93-127	27153-27165	transactions	
93-128	27166-27170	will	
93-129	27171-27174	not	
93-130	27175-27177	be	
93-131	27178-27185	present	
93-132	27186-27191	there	
93-133	27191-27192	.	

#Text=You can set the synchronous_commit parameter for separate transactions. This enables increasing the performance by sacrificing the reliability only of some transactions. Say, financial transactions must be committed synchronously, while chat messages can be compromised. Actually both modes work together. Even with a synchronous commit, WAL records of a long transaction will be written asynchronously in order to free WAL buffers. And if during a flush of a page from the buffer cache it appears that the corresponding WAL record is not on disk yet, it will be immediately flushed in the synchronous mode.
94-1	27193-27196	You	
94-2	27197-27200	can	
94-3	27201-27204	set	
94-4	27205-27208	the	
94-5	27209-27227	synchronous_commit	
94-6	27228-27237	parameter	
94-7	27238-27241	for	
94-8	27242-27250	separate	
94-9	27251-27263	transactions	
94-10	27263-27264	.	
94-11	27265-27269	This	
94-12	27270-27277	enables	
94-13	27278-27288	increasing	
94-14	27289-27292	the	
94-15	27293-27304	performance	
94-16	27305-27307	by	
94-17	27308-27319	sacrificing	
94-18	27320-27323	the	
94-19	27324-27335	reliability	
94-20	27336-27340	only	
94-21	27341-27343	of	
94-22	27344-27348	some	
94-23	27349-27361	transactions	
94-24	27361-27362	.	
94-25	27363-27366	Say	
94-26	27366-27367	,	
94-27	27368-27377	financial	
94-28	27378-27390	transactions	
94-29	27391-27395	must	
94-30	27396-27398	be	
94-31	27399-27408	committed	
94-32	27409-27422	synchronously	
94-33	27422-27423	,	
94-34	27424-27429	while	
94-35	27430-27434	chat	
94-36	27435-27443	messages	
94-37	27444-27447	can	
94-38	27448-27450	be	
94-39	27451-27462	compromised	
94-40	27462-27463	.	
94-41	27464-27472	Actually	
94-42	27473-27477	both	
94-43	27478-27483	modes	
94-44	27484-27488	work	
94-45	27489-27497	together	
94-46	27497-27498	.	
94-47	27499-27503	Even	
94-48	27504-27508	with	
94-49	27509-27510	a	
94-50	27511-27522	synchronous	
94-51	27523-27529	commit	
94-52	27529-27530	,	
94-53	27531-27534	WAL	
94-54	27535-27542	records	
94-55	27543-27545	of	
94-56	27546-27547	a	
94-57	27548-27552	long	
94-58	27553-27564	transaction	
94-59	27565-27569	will	
94-60	27570-27572	be	
94-61	27573-27580	written	
94-62	27581-27595	asynchronously	
94-63	27596-27598	in	
94-64	27599-27604	order	
94-65	27605-27607	to	
94-66	27608-27612	free	
94-67	27613-27616	WAL	
94-68	27617-27624	buffers	
94-69	27624-27625	.	
94-70	27626-27629	And	
94-71	27630-27632	if	
94-72	27633-27639	during	
94-73	27640-27641	a	
94-74	27642-27647	flush	
94-75	27648-27650	of	
94-76	27651-27652	a	
94-77	27653-27657	page	
94-78	27658-27662	from	
94-79	27663-27666	the	
94-80	27667-27673	buffer	
94-81	27674-27679	cache	
94-82	27680-27682	it	
94-83	27683-27690	appears	
94-84	27691-27695	that	
94-85	27696-27699	the	
94-86	27700-27713	corresponding	
94-87	27714-27717	WAL	
94-88	27718-27724	record	
94-89	27725-27727	is	
94-90	27728-27731	not	
94-91	27732-27734	on	
94-92	27735-27739	disk	
94-93	27740-27743	yet	
94-94	27743-27744	,	
94-95	27745-27747	it	
94-96	27748-27752	will	
94-97	27753-27755	be	
94-98	27756-27767	immediately	
94-99	27768-27775	flushed	
94-100	27776-27778	in	
94-101	27779-27782	the	
94-102	27783-27794	synchronous	
94-103	27795-27799	mode	
94-104	27799-27800	.	

#Text=To get an insight into the gains of an asynchronous commit, let's try to repeat the pgbench test in this mode. => ALTER SYSTEM SET synchronous_commit = off; => SELECT pg_reload_conf(); student$ pgbench -T 30 test starting vacuum...end.
95-1	27801-27803	To	
95-2	27804-27807	get	
95-3	27808-27810	an	
95-4	27811-27818	insight	
95-5	27819-27823	into	
95-6	27824-27827	the	
95-7	27828-27833	gains	
95-8	27834-27836	of	
95-9	27837-27839	an	
95-10	27840-27852	asynchronous	
95-11	27853-27859	commit	
95-12	27859-27860	,	
95-13	27861-27866	let's	
95-14	27867-27870	try	
95-15	27871-27873	to	
95-16	27874-27880	repeat	
95-17	27881-27884	the	
95-18	27885-27892	pgbench	
95-19	27893-27897	test	
95-20	27898-27900	in	
95-21	27901-27905	this	
95-22	27906-27910	mode	
95-23	27910-27911	.	
95-24	27912-27913	=	
95-25	27913-27914	>	
95-26	27915-27920	ALTER	
95-27	27921-27927	SYSTEM	
95-28	27928-27931	SET	
95-29	27932-27950	synchronous_commit	
95-30	27951-27952	=	
95-31	27953-27956	off	
95-32	27956-27957	;	
95-33	27958-27959	=	
95-34	27959-27960	>	
95-35	27961-27967	SELECT	
95-36	27968-27982	pg_reload_conf	
95-37	27982-27983	(	
95-38	27983-27984	)	
95-39	27984-27985	;	
95-40	27986-27993	student	
95-41	27993-27994	$	
95-42	27995-28002	pgbench	
95-43	28003-28004	-	
95-44	28004-28005	T	
95-45	28006-28008	30	
95-46	28009-28013	test	
95-47	28014-28022	starting	
95-48	28023-28029	vacuum	
95-49	28029-28030	.	
95-50	28030-28031	.	
95-51	28031-28032	.	
95-52	28032-28035	end	
95-53	28035-28036	.	

#Text=transaction type: TPC-B (sort of) scaling factor: 1 query mode: simple number of clients: 1 number of threads: 1 duration: 30 s number of transactions actually processed: 45439 latency average = 0.660 ms
96-1	28037-28048	transaction	
96-2	28049-28053	type	
96-3	28053-28054	:	
96-4	28055-28060	TPC-B	
96-5	28061-28062	(	
96-6	28062-28066	sort	
96-7	28067-28069	of	
96-8	28069-28070	)	
96-9	28071-28078	scaling	
96-10	28079-28085	factor	
96-11	28085-28086	:	
96-12	28087-28088	1	
96-13	28089-28094	query	
96-14	28095-28099	mode	
96-15	28099-28100	:	
96-16	28101-28107	simple	
96-17	28108-28114	number	
96-18	28115-28117	of	
96-19	28118-28125	clients	
96-20	28125-28126	:	
96-21	28127-28128	1	
96-22	28129-28135	number	
96-23	28136-28138	of	
96-24	28139-28146	threads	
96-25	28146-28147	:	
96-26	28148-28149	1	
96-27	28150-28158	duration	
96-28	28158-28159	:	
96-29	28160-28162	30	
96-30	28163-28164	s	
96-31	28165-28171	number	
96-32	28172-28174	of	
96-33	28175-28187	transactions	
96-34	28188-28196	actually	
96-35	28197-28206	processed	
96-36	28206-28207	:	
96-37	28208-28213	45439	
96-38	28214-28221	latency	
96-39	28222-28229	average	
96-40	28230-28231	=	
96-41	28232-28237	0.660	
96-42	28238-28240	ms	

#Text=tps = 1514.561710 (including connections establishing) tps = 1514.710558 (excluding connections establishing) With synchronous commits, we got approximately 900 transactions per second (tps) and 1500 tps with asynchronous commits. It goes without saying that in a real-life system under the actual load, the proportion will be different, but it is clear that for short transactions the effect can be pretty considerable.
97-1	28241-28244	tps	
97-2	28245-28246	=	
97-3	28247-28258	1514.561710	
97-4	28259-28260	(	
97-5	28260-28269	including	
97-6	28270-28281	connections	
97-7	28282-28294	establishing	
97-8	28294-28295	)	
97-9	28296-28299	tps	
97-10	28300-28301	=	
97-11	28302-28313	1514.710558	
97-12	28314-28315	(	
97-13	28315-28324	excluding	
97-14	28325-28336	connections	
97-15	28337-28349	establishing	
97-16	28349-28350	)	
97-17	28351-28355	With	
97-18	28356-28367	synchronous	
97-19	28368-28375	commits	
97-20	28375-28376	,	
97-21	28377-28379	we	
97-22	28380-28383	got	
97-23	28384-28397	approximately	
97-24	28398-28401	900	
97-25	28401-28402	 	
97-26	28402-28414	transactions	
97-27	28415-28418	per	
97-28	28419-28425	second	
97-29	28426-28427	(	
97-30	28427-28430	tps	
97-31	28430-28431	)	
97-32	28432-28435	and	
97-33	28436-28440	1500	
97-34	28440-28441	 	
97-35	28441-28444	tps	
97-36	28445-28449	with	
97-37	28450-28462	asynchronous	
97-38	28463-28470	commits	
97-39	28470-28471	.	
97-40	28472-28474	It	
97-41	28475-28479	goes	
97-42	28480-28487	without	
97-43	28488-28494	saying	
97-44	28495-28499	that	
97-45	28500-28502	in	
97-46	28503-28504	a	
97-47	28505-28514	real-life	
97-48	28515-28521	system	
97-49	28522-28527	under	
97-50	28528-28531	the	
97-51	28532-28538	actual	
97-52	28539-28543	load	
97-53	28543-28544	,	
97-54	28545-28548	the	
97-55	28549-28559	proportion	
97-56	28560-28564	will	
97-57	28565-28567	be	
97-58	28568-28577	different	
97-59	28577-28578	,	
97-60	28579-28582	but	
97-61	28583-28585	it	
97-62	28586-28588	is	
97-63	28589-28594	clear	
97-64	28595-28599	that	
97-65	28600-28603	for	
97-66	28604-28609	short	
97-67	28610-28622	transactions	
97-68	28623-28626	the	
97-69	28627-28633	effect	
97-70	28634-28637	can	
97-71	28638-28640	be	
97-72	28641-28647	pretty	
97-73	28648-28660	considerable	
97-74	28660-28661	.	

#Text=Here the series of articles on WAL logging comes to an end. If anything critical is unaddressed, I would appreciate if you provide comments. Thank you all! And next, amazing adventures are awaiting us in the world of locks, but that's another story. Tags: postgresql wal write-ahead log Add tags Hubs: Postgres Professional corporate blog
98-1	28662-28666	Here	
98-2	28667-28670	the	
98-3	28671-28677	series	
98-4	28678-28680	of	
98-5	28681-28689	articles	
98-6	28690-28692	on	
98-7	28693-28696	WAL	
98-8	28697-28704	logging	
98-9	28705-28710	comes	
98-10	28711-28713	to	
98-11	28714-28716	an	
98-12	28717-28720	end	
98-13	28720-28721	.	
98-14	28722-28724	If	
98-15	28725-28733	anything	
98-16	28734-28742	critical	
98-17	28743-28745	is	
98-18	28746-28757	unaddressed	
98-19	28757-28758	,	
98-20	28759-28760	I	
98-21	28761-28766	would	
98-22	28767-28777	appreciate	
98-23	28778-28780	if	
98-24	28781-28784	you	
98-25	28785-28792	provide	
98-26	28793-28801	comments	
98-27	28801-28802	.	
98-28	28803-28808	Thank	
98-29	28809-28812	you	
98-30	28813-28816	all	
98-31	28816-28817	!	
98-32	28818-28821	And	
98-33	28822-28826	next	
98-34	28826-28827	,	
98-35	28828-28835	amazing	
98-36	28836-28846	adventures	
98-37	28847-28850	are	
98-38	28851-28859	awaiting	
98-39	28860-28862	us	
98-40	28863-28865	in	
98-41	28866-28869	the	
98-42	28870-28875	world	
98-43	28876-28878	of	
98-44	28879-28884	locks	
98-45	28884-28885	,	
98-46	28886-28889	but	
98-47	28890-28896	that's	
98-48	28897-28904	another	
98-49	28905-28910	story	
98-50	28910-28911	.	
98-51	28912-28916	Tags	
98-52	28916-28917	:	
98-53	28918-28928	postgresql	
98-54	28929-28932	wal	
98-55	28933-28944	write-ahead	
98-56	28945-28948	log	
98-57	28949-28952	Add	
98-58	28953-28957	tags	
98-59	28958-28962	Hubs	
98-60	28962-28963	:	
98-61	28964-28972	Postgres	
98-62	28973-28985	Professional	
98-63	28986-28995	corporate	
98-64	28996-29000	blog	

#Text=PostgreSQL SQL Specify the reason of the downvote so the author could improve the post Send anonymously Mark this post with your tags You should divide tags with commas. E.g.: programming, algorithms Save 3.1k
99-1	29001-29011	PostgreSQL	
99-2	29012-29015	SQL	
99-3	29016-29023	Specify	
99-4	29024-29027	the	
99-5	29028-29034	reason	
99-6	29035-29037	of	
99-7	29038-29041	the	
99-8	29042-29050	downvote	
99-9	29051-29053	so	
99-10	29054-29057	the	
99-11	29058-29064	author	
99-12	29065-29070	could	
99-13	29071-29078	improve	
99-14	29079-29082	the	
99-15	29083-29087	post	
99-16	29088-29092	Send	
99-17	29093-29104	anonymously	
99-18	29105-29109	Mark	
99-19	29110-29114	this	
99-20	29115-29119	post	
99-21	29120-29124	with	
99-22	29125-29129	your	
99-23	29130-29134	tags	
99-24	29135-29138	You	
99-25	29139-29145	should	
99-26	29146-29152	divide	
99-27	29153-29157	tags	
99-28	29158-29162	with	
99-29	29163-29169	commas	
99-30	29169-29170	.	
99-31	29171-29174	E.g	
99-32	29174-29175	.	
99-33	29175-29176	:	
99-34	29177-29188	programming	
99-35	29188-29189	,	
99-36	29190-29200	algorithms	
99-37	29201-29205	Save	
99-38	29206-29210	3.1k	

#Text=Comment Share Copy link Facebook Twitter Telegram Pocket Violation Describe nature of the violation Send Postgres Professional Разработчик СУБД Postgres Pro
100-1	29211-29218	Comment	
100-2	29219-29224	Share	
100-3	29225-29229	Copy	
100-4	29230-29234	link	
100-5	29235-29243	Facebook	
100-6	29244-29251	Twitter	
100-7	29252-29260	Telegram	
100-8	29261-29267	Pocket	
100-9	29268-29277	Violation	
100-10	29278-29286	Describe	
100-11	29287-29293	nature	
100-12	29294-29296	of	
100-13	29297-29300	the	
100-14	29301-29310	violation	
100-15	29311-29315	Send	
100-16	29316-29324	Postgres	
100-17	29325-29337	Professional	
100-18	29338-29349	Разработчик	
100-19	29350-29354	СУБД	
100-20	29355-29363	Postgres	
100-21	29364-29367	Pro	

#Text=140.5 Karma 0.0 Rating Егор Рогов erogov Пользователь Payment system Facebook Twitter Google+ LiveJournal Similar posts
101-1	29368-29373	140.5	
101-2	29374-29379	Karma	
101-3	29380-29383	0.0	
101-4	29384-29390	Rating	
101-5	29391-29395	Егор	
101-6	29396-29401	Рогов	
101-7	29401-29402	 	
101-8	29402-29408	erogov	
101-9	29409-29421	Пользователь	
101-10	29422-29429	Payment	
101-11	29430-29436	system	
101-12	29437-29445	Facebook	
101-13	29446-29453	Twitter	
101-14	29454-29460	Google	
101-15	29460-29461	+	
101-16	29462-29473	LiveJournal	
101-17	29474-29481	Similar	
101-18	29482-29487	posts	

#Text=April 3, 2020 at 02:37 PM WAL in PostgreSQL: 3. Checkpoint 2.7k March 26, 2020 at 05:50 PM WAL in PostgreSQL: 2. Write-Ahead Log 2.3k March 10, 2020 at 02:12 PM
102-1	29488-29493	April	
102-2	29494-29495	3	
102-3	29495-29496	,	
102-4	29497-29501	2020	
102-5	29502-29504	at	
102-6	29505-29507	02	
102-7	29507-29508	:	
102-8	29508-29510	37	
102-9	29511-29513	PM	
102-10	29514-29517	WAL	
102-11	29518-29520	in	
102-12	29521-29531	PostgreSQL	
102-13	29531-29532	:	
102-14	29533-29534	3	
102-15	29534-29535	.	
102-16	29536-29546	Checkpoint	
102-17	29547-29551	2.7k	
102-18	29552-29557	March	
102-19	29558-29560	26	
102-20	29560-29561	,	
102-21	29562-29566	2020	
102-22	29567-29569	at	
102-23	29570-29572	05	
102-24	29572-29573	:	
102-25	29573-29575	50	
102-26	29576-29578	PM	
102-27	29579-29582	WAL	
102-28	29583-29585	in	
102-29	29586-29596	PostgreSQL	
102-30	29596-29597	:	
102-31	29598-29599	2	
102-32	29599-29600	.	
102-33	29601-29612	Write-Ahead	
102-34	29613-29616	Log	
102-35	29617-29621	2.3k	
102-36	29622-29627	March	
102-37	29628-29630	10	
102-38	29630-29631	,	
102-39	29632-29636	2020	
102-40	29637-29639	at	
102-41	29640-29642	02	
102-42	29642-29643	:	
102-43	29643-29645	12	
102-44	29646-29648	PM	

#Text=WAL in PostgreSQL: 1. Buffer Cache 3.4k Comments Only users with full accounts can post comments. Log in, please. Information Foundation date January 27, 2015 Website postgrespro.ru Number of employees 51–100 employees
103-1	29649-29652	WAL	
103-2	29653-29655	in	
103-3	29656-29666	PostgreSQL	
103-4	29666-29667	:	
103-5	29668-29669	1	
103-6	29669-29670	.	
103-7	29671-29677	Buffer	
103-8	29678-29683	Cache	
103-9	29684-29688	3.4k	
103-10	29689-29697	Comments	
103-11	29698-29702	Only	
103-12	29703-29708	users	
103-13	29709-29713	with	
103-14	29713-29714	 	
103-15	29714-29718	full	
103-16	29719-29727	accounts	
103-17	29728-29731	can	
103-18	29732-29736	post	
103-19	29737-29745	comments	
103-20	29745-29746	.	
103-21	29747-29750	Log	
103-22	29751-29753	in	
103-23	29753-29754	,	
103-24	29755-29761	please	
103-25	29761-29762	.	
103-26	29763-29774	Information	
103-27	29775-29785	Foundation	
103-28	29786-29790	date	
103-29	29791-29798	January	
103-30	29799-29801	27	
103-31	29801-29802	,	
103-32	29803-29807	2015	
103-33	29808-29815	Website	
103-34	29816-29830	postgrespro.ru	
103-35	29831-29837	Number	
103-36	29838-29840	of	
103-37	29841-29850	employees	
103-38	29851-29853	51	
103-39	29853-29854	–	
103-40	29854-29857	100	
103-41	29858-29867	employees	

#Text=Registration date September 30, 2015 Representative Иван Панченко Links Конференция разработчиков и пользователей PostgreSQL PGConf.Russia
104-1	29868-29880	Registration	
104-2	29881-29885	date	
104-3	29886-29895	September	
104-4	29896-29898	30	
104-5	29898-29899	,	
104-6	29900-29904	2015	
104-7	29905-29919	Representative	
104-8	29920-29924	Иван	
104-9	29925-29933	Панченко	
104-10	29934-29939	Links	
104-11	29940-29951	Конференция	
104-12	29952-29965	разработчиков	
104-13	29966-29967	и	
104-14	29968-29981	пользователей	
104-15	29982-29992	PostgreSQL	
104-16	29993-30006	PGConf.Russia	

#Text=pgconf.ru Blog on Habr Locks in PostgreSQL: 4. Locks in memory 2.9k Locks in PostgreSQL: 3. Other locks 3.9k Locks in PostgreSQL: 2. Row-level locks
105-1	30007-30016	pgconf.ru	
105-2	30017-30021	Blog	
105-3	30022-30024	on	
105-4	30025-30029	Habr	
105-5	30030-30035	Locks	
105-6	30036-30038	in	
105-7	30039-30049	PostgreSQL	
105-8	30049-30050	:	
105-9	30051-30052	4	
105-10	30052-30053	.	
105-11	30054-30059	Locks	
105-12	30060-30062	in	
105-13	30063-30069	memory	
105-14	30070-30074	2.9k	
105-15	30075-30080	Locks	
105-16	30081-30083	in	
105-17	30084-30094	PostgreSQL	
105-18	30094-30095	:	
105-19	30096-30097	3	
105-20	30097-30098	.	
105-21	30099-30104	Other	
105-22	30105-30110	locks	
105-23	30111-30115	3.9k	
105-24	30116-30121	Locks	
105-25	30122-30124	in	
105-26	30125-30135	PostgreSQL	
105-27	30135-30136	:	
105-28	30137-30138	2	
105-29	30138-30139	.	
105-30	30140-30149	Row-level	
105-31	30150-30155	locks	

#Text=3.8k Locks in PostgreSQL: 1. Relation-level locks 3.1k Parallelism in PostgreSQL: treatment of trees and conscience 1.7k JSONPath in PostgreSQL: committing patches and selecting apartments
106-1	30156-30160	3.8k	
106-2	30161-30166	Locks	
106-3	30167-30169	in	
106-4	30170-30180	PostgreSQL	
106-5	30180-30181	:	
106-6	30182-30183	1	
106-7	30183-30184	.	
106-8	30185-30199	Relation-level	
106-9	30200-30205	locks	
106-10	30206-30210	3.1k	
106-11	30211-30222	Parallelism	
106-12	30223-30225	in	
106-13	30226-30236	PostgreSQL	
106-14	30236-30237	:	
106-15	30238-30247	treatment	
106-16	30248-30250	of	
106-17	30251-30256	trees	
106-18	30257-30260	and	
106-19	30261-30271	conscience	
106-20	30272-30276	1.7k	
106-21	30277-30285	JSONPath	
106-22	30286-30288	in	
106-23	30289-30299	PostgreSQL	
106-24	30299-30300	:	
106-25	30301-30311	committing	
106-26	30312-30319	patches	
106-27	30320-30323	and	
106-28	30324-30333	selecting	
106-29	30334-30344	apartments	

#Text=3.6k What is Baked in the Baker's Dozen? 916 WAL in PostgreSQL: 4. Setup and Tuning 3.1k WAL in PostgreSQL: 3. Checkpoint 2.7k
107-1	30345-30349	3.6k	
107-2	30350-30354	What	
107-3	30355-30357	is	
107-4	30358-30363	Baked	
107-5	30364-30366	in	
107-6	30367-30370	the	
107-7	30371-30378	Baker's	
107-8	30379-30384	Dozen	
107-9	30384-30385	?	
107-10	30386-30389	916	
107-11	30390-30393	WAL	
107-12	30394-30396	in	
107-13	30397-30407	PostgreSQL	
107-14	30407-30408	:	
107-15	30409-30410	4	
107-16	30410-30411	.	
107-17	30412-30417	Setup	
107-18	30418-30421	and	
107-19	30422-30428	Tuning	
107-20	30429-30433	3.1k	
107-21	30434-30437	WAL	
107-22	30438-30440	in	
107-23	30441-30451	PostgreSQL	
107-24	30451-30452	:	
107-25	30453-30454	3	
107-26	30454-30455	.	
107-27	30456-30466	Checkpoint	
107-28	30467-30471	2.7k	

#Text=WAL in PostgreSQL: 2. Write-Ahead Log 2.3k WAL in PostgreSQL: 1. Buffer Cache 3.4k On recursive queries 5.6k MVCC in PostgreSQL-8. Freezing 1.8k
108-1	30472-30475	WAL	
108-2	30476-30478	in	
108-3	30479-30489	PostgreSQL	
108-4	30489-30490	:	
108-5	30491-30492	2	
108-6	30492-30493	.	
108-7	30494-30505	Write-Ahead	
108-8	30506-30509	Log	
108-9	30510-30514	2.3k	
108-10	30515-30518	WAL	
108-11	30519-30521	in	
108-12	30522-30532	PostgreSQL	
108-13	30532-30533	:	
108-14	30534-30535	1	
108-15	30535-30536	.	
108-16	30537-30543	Buffer	
108-17	30544-30549	Cache	
108-18	30550-30554	3.4k	
108-19	30555-30557	On	
108-20	30558-30567	recursive	
108-21	30568-30575	queries	
108-22	30576-30580	5.6k	
108-23	30581-30585	MVCC	
108-24	30586-30588	in	
108-25	30589-30599	PostgreSQL	
108-26	30599-30600	-	
108-27	30600-30601	8	
108-28	30601-30602	.	
108-29	30603-30611	Freezing	
108-30	30612-30616	1.8k	

#Text=MVCC in PostgreSQL-7. Autovacuum 1.1k MVCC in PostgreSQL-6. Vacuum 1.4k MVCC in PostgreSQL-5. In-page vacuum and HOT updates 1.6k
109-1	30617-30621	MVCC	
109-2	30622-30624	in	
109-3	30625-30635	PostgreSQL	
109-4	30635-30636	-	
109-5	30636-30637	7	
109-6	30637-30638	.	
109-7	30639-30649	Autovacuum	
109-8	30650-30654	1.1k	
109-9	30655-30659	MVCC	
109-10	30660-30662	in	
109-11	30663-30673	PostgreSQL	
109-12	30673-30674	-	
109-13	30674-30675	6	
109-14	30675-30676	.	
109-15	30677-30683	Vacuum	
109-16	30684-30688	1.4k	
109-17	30689-30693	MVCC	
109-18	30694-30696	in	
109-19	30697-30707	PostgreSQL	
109-20	30707-30708	-	
109-21	30708-30709	5	
109-22	30709-30710	.	
109-23	30711-30718	In-page	
109-24	30719-30725	vacuum	
109-25	30726-30729	and	
109-26	30730-30733	HOT	
109-27	30734-30741	updates	
109-28	30742-30746	1.6k	

#Text=MVCC in PostgreSQL-4. Snapshots 2.6k MVCC in PostgreSQL-3. Row Versions 2.9k MVCC in PostgreSQL-2. Forks, files, pages 2.6k MVCC in PostgreSQL-1. Isolation
110-1	30747-30751	MVCC	
110-2	30752-30754	in	
110-3	30755-30765	PostgreSQL	
110-4	30765-30766	-	
110-5	30766-30767	4	
110-6	30767-30768	.	
110-7	30769-30778	Snapshots	
110-8	30779-30783	2.6k	
110-9	30784-30788	MVCC	
110-10	30789-30791	in	
110-11	30792-30802	PostgreSQL	
110-12	30802-30803	-	
110-13	30803-30804	3	
110-14	30804-30805	.	
110-15	30806-30809	Row	
110-16	30810-30818	Versions	
110-17	30819-30823	2.9k	
110-18	30824-30828	MVCC	
110-19	30829-30831	in	
110-20	30832-30842	PostgreSQL	
110-21	30842-30843	-	
110-22	30843-30844	2	
110-23	30844-30845	.	
110-24	30846-30851	Forks	
110-25	30851-30852	,	
110-26	30853-30858	files	
110-27	30858-30859	,	
110-28	30860-30865	pages	
110-29	30866-30870	2.6k	
110-30	30871-30875	MVCC	
110-31	30876-30878	in	
110-32	30879-30889	PostgreSQL	
110-33	30889-30890	-	
110-34	30890-30891	1	
110-35	30891-30892	.	
110-36	30893-30902	Isolation	

#Text=4.9k Top posts Day Week Month Various things in MetaPost &plus14 8.4k Compilation of math functions into Linq.Expression &plus4 2.6k
111-1	30903-30907	4.9k	
111-2	30908-30911	Top	
111-3	30912-30917	posts	
111-4	30918-30921	Day	
111-5	30922-30926	Week	
111-6	30927-30932	Month	
111-7	30933-30940	Various	
111-8	30941-30947	things	
111-9	30948-30950	in	
111-10	30951-30959	MetaPost	
111-11	30960-30961	&	
111-12	30961-30967	plus14	
111-13	30968-30972	8.4k	
111-14	30973-30984	Compilation	
111-15	30985-30987	of	
111-16	30988-30992	math	
111-17	30993-31002	functions	
111-18	31003-31007	into	
111-19	31008-31023	Linq.Expression	
111-20	31024-31025	&	
111-21	31025-31030	plus4	
111-22	31031-31035	2.6k	

#Text=Audio over Bluetooth: most detailed information about profiles, codecs, and devices &plus22 175k Algorithms in Go: Bit Manipulation &plus2 294 11 Kubernetes implementation mistakes – and how to avoid them &plus10 934 Go Quiz &plus3
112-1	31036-31041	Audio	
112-2	31042-31046	over	
112-3	31047-31056	Bluetooth	
112-4	31056-31057	:	
112-5	31058-31062	most	
112-6	31063-31071	detailed	
112-7	31072-31083	information	
112-8	31084-31089	about	
112-9	31090-31098	profiles	
112-10	31098-31099	,	
112-11	31100-31106	codecs	
112-12	31106-31107	,	
112-13	31108-31111	and	
112-14	31112-31119	devices	
112-15	31120-31121	&	
112-16	31121-31127	plus22	
112-17	31128-31132	175k	
112-18	31133-31143	Algorithms	
112-19	31144-31146	in	
112-20	31147-31149	Go	
112-21	31149-31150	:	
112-22	31151-31154	Bit	
112-23	31155-31167	Manipulation	
112-24	31168-31169	&	
112-25	31169-31174	plus2	
112-26	31175-31178	294	
112-27	31179-31181	11	
112-28	31182-31192	Kubernetes	
112-29	31193-31207	implementation	
112-30	31208-31216	mistakes	
112-31	31217-31218	–	
112-32	31219-31222	and	
112-33	31223-31226	how	
112-34	31227-31229	to	
112-35	31230-31235	avoid	
112-36	31236-31240	them	
112-37	31241-31242	&	
112-38	31242-31248	plus10	
112-39	31249-31252	934	
112-40	31253-31255	Go	
112-41	31256-31260	Quiz	
112-42	31261-31262	&	
112-43	31262-31267	plus3	

#Text=679 Pitfalls in String Pool, or Another Reason to Think Twice Before Interning Instances of String Class in C# &plus1 327 Build (CI/CD) of non-JVM projects using gradle/kotlin &plus1
113-1	31268-31271	679	
113-2	31272-31280	Pitfalls	
113-3	31281-31283	in	
113-4	31284-31290	String	
113-5	31291-31295	Pool	
113-6	31295-31296	,	
113-7	31297-31299	or	
113-8	31300-31307	Another	
113-9	31308-31314	Reason	
113-10	31315-31317	to	
113-11	31318-31323	Think	
113-12	31324-31329	Twice	
113-13	31330-31336	Before	
113-14	31337-31346	Interning	
113-15	31347-31356	Instances	
113-16	31357-31359	of	
113-17	31360-31366	String	
113-18	31367-31372	Class	
113-19	31373-31375	in	
113-20	31376-31377	C	
113-21	31377-31378	#	
113-22	31379-31380	&	
113-23	31380-31385	plus1	
113-24	31386-31389	327	
113-25	31390-31395	Build	
113-26	31396-31397	(	
113-27	31397-31399	CI	
113-28	31399-31400	/	
113-29	31400-31402	CD	
113-30	31402-31403	)	
113-31	31404-31406	of	
113-32	31407-31414	non-JVM	
113-33	31415-31423	projects	
113-34	31424-31429	using	
113-35	31430-31436	gradle	
113-36	31436-31437	/	
113-37	31437-31443	kotlin	
113-38	31444-31445	&	
113-39	31445-31450	plus1	

#Text=315 Multiple violations of policies in RMS open letter &plus16 2.7k Compilation of math functions into Linq.Expression &plus4 2.6k High-Quality Text-to-Speech Made Accessible, Simple and Fast
114-1	31451-31454	315	
114-2	31455-31463	Multiple	
114-3	31464-31474	violations	
114-4	31475-31477	of	
114-5	31478-31486	policies	
114-6	31487-31489	in	
114-7	31490-31493	RMS	
114-8	31494-31498	open	
114-9	31499-31505	letter	
114-10	31506-31507	&	
114-11	31507-31513	plus16	
114-12	31514-31518	2.7k	
114-13	31519-31530	Compilation	
114-14	31531-31533	of	
114-15	31534-31538	math	
114-16	31539-31548	functions	
114-17	31549-31553	into	
114-18	31554-31569	Linq.Expression	
114-19	31570-31571	&	
114-20	31571-31576	plus4	
114-21	31577-31581	2.6k	
114-22	31582-31594	High-Quality	
114-23	31595-31609	Text-to-Speech	
114-24	31610-31614	Made	
114-25	31615-31625	Accessible	
114-26	31625-31626	,	
114-27	31627-31633	Simple	
114-28	31634-31637	and	
114-29	31638-31642	Fast	

#Text=&plus5 1.6k How to Start Reverse Engineering in 2021 &plus3 1.6k Your account Log in Sign up Sections Posts Hubs Companies Users Sandbox
115-1	31643-31644	&	
115-2	31644-31649	plus5	
115-3	31650-31654	1.6k	
115-4	31655-31658	How	
115-5	31659-31661	to	
115-6	31662-31667	Start	
115-7	31668-31675	Reverse	
115-8	31676-31687	Engineering	
115-9	31688-31690	in	
115-10	31690-31691	 	
115-11	31691-31695	2021	
115-12	31696-31697	&	
115-13	31697-31702	plus3	
115-14	31703-31707	1.6k	
115-15	31708-31712	Your	
115-16	31713-31720	account	
115-17	31721-31724	Log	
115-18	31725-31727	in	
115-19	31728-31732	Sign	
115-20	31733-31735	up	
115-21	31736-31744	Sections	
115-22	31745-31750	Posts	
115-23	31751-31755	Hubs	
115-24	31756-31765	Companies	
115-25	31766-31771	Users	
115-26	31772-31779	Sandbox	

#Text=Info How it works For Authors For Companies Documents Agreement Terms of service Services Ads Subscription plans Content Seminars Megaprojects © 2006 – 2021 «Habr»
116-1	31780-31784	Info	
116-2	31785-31788	How	
116-3	31789-31791	it	
116-4	31792-31797	works	
116-5	31798-31801	For	
116-6	31802-31809	Authors	
116-7	31810-31813	For	
116-8	31814-31823	Companies	
116-9	31824-31833	Documents	
116-10	31834-31843	Agreement	
116-11	31844-31849	Terms	
116-12	31850-31852	of	
116-13	31853-31860	service	
116-14	31861-31869	Services	
116-15	31870-31873	Ads	
116-16	31874-31886	Subscription	
116-17	31887-31892	plans	
116-18	31893-31900	Content	
116-19	31901-31909	Seminars	
116-20	31910-31922	Megaprojects	
116-21	31923-31924	©	
116-22	31925-31929	2006	
116-23	31930-31931	–	
116-24	31932-31936	2021	
116-25	31937-31938	«	
116-26	31938-31942	Habr	
116-27	31942-31943	»	
