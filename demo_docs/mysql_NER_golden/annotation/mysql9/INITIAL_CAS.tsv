#FORMAT=WebAnno TSV 3.3


#Text=MySQL :: MySQL 8.0 Reference Manual :: 8.2.1.4 Hash Join Optimization
#Text=Contact MySQL
#Text=Login  |
#Text=Register
#Text=The world's most popular open source database
#Text=MySQL.com
#Text=Downloads
#Text=Documentation
#Text=Developer Zone
#Text=Developer Zone
#Text=Downloads
#Text=MySQL.com
#Text=Documentation
#Text=MySQL Server
#Text=MySQL Enterprise
#Text=Workbench
#Text=InnoDB Cluster
#Text=MySQL NDB Cluster
#Text=Connectors
#Text=More
#Text=MySQL.com
#Text=Downloads
#Text=Developer Zone
#Text=Section Menu:
#Text=Documentation Home
#Text=MySQL 8.0 Reference Manual
#Text=Preface and Legal Notices
#Text=General Information
#Text=Installing and Upgrading MySQL
#Text=Tutorial
#Text=MySQL Programs
#Text=MySQL Server Administration
#Text=Security
#Text=Backup and Recovery
#Text=Optimization
#Text=Optimization Overview
#Text=Optimizing SQL Statements
#Text=Optimizing SELECT Statements
#Text=WHERE Clause Optimization
#Text=Range Optimization
#Text=Index Merge Optimization
#Text=Hash Join Optimization
#Text=Engine Condition Pushdown Optimization
#Text=Index Condition Pushdown Optimization
#Text=Nested-Loop Join Algorithms
#Text=Nested Join Optimization
#Text=Outer Join Optimization
#Text=Outer Join Simplification
#Text=Multi-Range Read Optimization
#Text=Block Nested-Loop and Batched Key Access Joins
#Text=Condition Filtering
#Text=Constant-Folding Optimization
#Text=IS NULL Optimization
#Text=ORDER BY Optimization
#Text=GROUP BY Optimization
#Text=DISTINCT Optimization
#Text=LIMIT Query Optimization
#Text=Function Call Optimization
#Text=Window Function Optimization
#Text=Row Constructor Expression Optimization
#Text=Avoiding Full Table Scans
#Text=Optimizing Subqueries, Derived Tables, View References, and Common Table
#Text=Expressions
#Text=Optimizing IN and EXISTS Subquery Predicates with Semijoin
#Text=Transformations
#Text=Optimizing Subqueries with Materialization
#Text=Optimizing Subqueries with the EXISTS Strategy
#Text=Optimizing Derived Tables, View References, and Common Table Expressions
#Text=with Merging or Materialization
#Text=Derived Condition Pushdown Optimization
#Text=Optimizing INFORMATION_SCHEMA Queries
#Text=Optimizing Performance Schema Queries
#Text=Optimizing Data Change Statements
#Text=Optimizing INSERT Statements
#Text=Optimizing UPDATE Statements
#Text=Optimizing DELETE Statements
#Text=Optimizing Database Privileges
#Text=Other Optimization Tips
#Text=Optimization and Indexes
#Text=How MySQL Uses Indexes
#Text=Primary Key Optimization
#Text=SPATIAL Index Optimization
#Text=Foreign Key Optimization
#Text=Column Indexes
#Text=Multiple-Column Indexes
#Text=Verifying Index Usage
#Text=InnoDB and MyISAM Index Statistics Collection
#Text=Comparison of B-Tree and Hash Indexes
#Text=Use of Index Extensions
#Text=Optimizer Use of Generated Column Indexes
#Text=Invisible Indexes
#Text=Descending Indexes
#Text=Indexed Lookups from TIMESTAMP Columns
#Text=Optimizing Database Structure
#Text=Optimizing Data Size
#Text=Optimizing MySQL Data Types
#Text=Optimizing for Numeric Data
#Text=Optimizing for Character and String Types
#Text=Optimizing for BLOB Types
#Text=Optimizing for Many Tables
#Text=How MySQL Opens and Closes Tables
#Text=Disadvantages of Creating Many Tables in the Same Database
#Text=Internal Temporary Table Use in MySQL
#Text=Limits on Number of Databases and Tables
#Text=Limits on Table Size
#Text=Limits on Table Column Count and Row Size
#Text=Optimizing for InnoDB Tables
#Text=Optimizing Storage Layout for InnoDB Tables
#Text=Optimizing InnoDB Transaction Management
#Text=Optimizing InnoDB Read-Only Transactions
#Text=Optimizing InnoDB Redo Logging
#Text=Bulk Data Loading for InnoDB Tables
#Text=Optimizing InnoDB Queries
#Text=Optimizing InnoDB DDL Operations
#Text=Optimizing InnoDB Disk I/O
#Text=Optimizing InnoDB Configuration Variables
#Text=Optimizing InnoDB for Systems with Many Tables
#Text=Optimizing for MyISAM Tables
#Text=Optimizing MyISAM Queries
#Text=Bulk Data Loading for MyISAM Tables
#Text=Optimizing REPAIR TABLE Statements
#Text=Optimizing for MEMORY Tables
#Text=Understanding the Query Execution Plan
#Text=Optimizing Queries with EXPLAIN
#Text=EXPLAIN Output Format
#Text=Extended EXPLAIN Output Format
#Text=Obtaining Execution Plan Information for a Named Connection
#Text=Estimating Query Performance
#Text=Controlling the Query Optimizer
#Text=Controlling Query Plan Evaluation
#Text=Switchable Optimizations
#Text=Optimizer Hints
#Text=Index Hints
#Text=The Optimizer Cost Model
#Text=Optimizer Statistics
#Text=Buffering and Caching
#Text=InnoDB Buffer Pool Optimization
#Text=The MyISAM Key Cache
#Text=Shared Key Cache Access
#Text=Multiple Key Caches
#Text=Midpoint Insertion Strategy
#Text=Index Preloading
#Text=Key Cache Block Size
#Text=Restructuring a Key Cache
#Text=Caching of Prepared Statements and Stored Programs
#Text=Optimizing Locking Operations
#Text=Internal Locking Methods
#Text=Table Locking Issues
#Text=Concurrent Inserts
#Text=Metadata Locking
#Text=External Locking
#Text=Optimizing the MySQL Server
#Text=Optimizing Disk I/O
#Text=Using Symbolic Links
#Text=Using Symbolic Links for Databases on Unix
#Text=Using Symbolic Links for MyISAM Tables on Unix
#Text=Using Symbolic Links for Databases on Windows
#Text=Optimizing Memory Use
#Text=How MySQL Uses Memory
#Text=Enabling Large Page Support
#Text=Measuring Performance (Benchmarking)
#Text=Measuring the Speed of Expressions and Functions
#Text=Using Your Own Benchmarks
#Text=Measuring Performance with performance_schema
#Text=Examining Server Thread (Process) Information
#Text=Accessing the Process List
#Text=Thread Command Values
#Text=General Thread States
#Text=Replication Source Thread States
#Text=Replication I/O Thread States
#Text=Replication SQL Thread States
#Text=Replication Connection Thread States
#Text=NDB Cluster Thread States
#Text=Event Scheduler Thread States
#Text=Language Structure
#Text=Character Sets, Collations, Unicode
#Text=Data Types
#Text=Functions and Operators
#Text=SQL Statements
#Text=MySQL Data Dictionary
#Text=The InnoDB Storage Engine
#Text=Alternative Storage Engines
#Text=Replication
#Text=Group Replication
#Text=MySQL Shell
#Text=Using MySQL as a Document Store
#Text=InnoDB Cluster
#Text=InnoDB ReplicaSet
#Text=MySQL NDB Cluster 8.0
#Text=Partitioning
#Text=Stored Objects
#Text=INFORMATION_SCHEMA Tables
#Text=MySQL Performance Schema
#Text=MySQL sys Schema
#Text=Connectors and APIs
#Text=MySQL Enterprise Edition
#Text=MySQL Workbench
#Text=MySQL on the OCI Marketplace
#Text=MySQL 8.0 Frequently Asked Questions
#Text=Error Messages and Common Problems
#Text=Indexes
#Text=MySQL Glossary
#Text=Related Documentation
#Text=MySQL 8.0 Release Notes
#Text=MySQL 8.0 Source Code Documentation
#Text=Download
#Text=this Manual
#Text=PDF (US Ltr)
#Text=- 40.9Mb
#Text=PDF (A4)
#Text=- 41.0Mb
#Text=PDF (RPM)
#Text=- 39.7Mb
#Text=HTML Download (TGZ)
#Text=- 9.5Mb
#Text=HTML Download (Zip)
#Text=- 9.6Mb
#Text=HTML Download (RPM)
#Text=- 8.1Mb
#Text=Man Pages (TGZ)
#Text=- 256.7Kb
#Text=Man Pages (Zip)
#Text=- 366.8Kb
#Text=Info (Gzip)
#Text=- 3.9Mb
#Text=Info (Zip)
#Text=- 3.9Mb
#Text=Excerpts from this Manual
#Text=MySQL Backup and Recovery
#Text=MySQL Globalization
#Text=MySQL Information Schema
#Text=MySQL Installation Guide
#Text=Security in MySQL
#Text=Starting and Stopping MySQL
#Text=MySQL and Linux/Unix
#Text=MySQL and Windows
#Text=MySQL and OS X
#Text=MySQL and Solaris
#Text=Building MySQL from Source
#Text=MySQL Restrictions and Limitations
#Text=MySQL Partitioning
#Text=MySQL Tutorial
#Text=MySQL Performance Schema
#Text=MySQL Replication
#Text=Using the MySQL Yum Repository
#Text=MySQL NDB Cluster 8.0
#Text=version 8.0
#Text=5.7
#Text=5.6
#Text=5.6
#Text=Japanese
#Text=MySQL 8.0 Reference Manual  /
1-1	0-5	MySQL	
1-2	6-7	:	
1-3	7-8	:	
1-4	9-14	MySQL	
1-5	15-18	8.0	
1-6	19-28	Reference	
1-7	29-35	Manual	
1-8	36-37	:	
1-9	37-38	:	
1-10	39-46	8.2.1.4	
1-11	47-51	Hash	
1-12	52-56	Join	
1-13	57-69	Optimization	
1-14	70-77	Contact	
1-15	78-83	MySQL	
1-16	84-89	Login	
1-17	90-91	 	
1-18	91-92	|	
1-19	93-101	Register	
1-20	102-105	The	
1-21	106-113	world's	
1-22	114-118	most	
1-23	119-126	popular	
1-24	127-131	open	
1-25	132-138	source	
1-26	139-147	database	
1-27	148-157	MySQL.com	
1-28	158-167	Downloads	
1-29	168-181	Documentation	
1-30	182-191	Developer	
1-31	192-196	Zone	
1-32	197-206	Developer	
1-33	207-211	Zone	
1-34	212-221	Downloads	
1-35	222-231	MySQL.com	
1-36	232-245	Documentation	
1-37	246-251	MySQL	
1-38	252-258	Server	
1-39	259-264	MySQL	
1-40	265-275	Enterprise	
1-41	276-285	Workbench	
1-42	286-292	InnoDB	
1-43	293-300	Cluster	
1-44	301-306	MySQL	
1-45	307-310	NDB	
1-46	311-318	Cluster	
1-47	319-329	Connectors	
1-48	330-334	More	
1-49	335-344	MySQL.com	
1-50	345-354	Downloads	
1-51	355-364	Developer	
1-52	365-369	Zone	
1-53	370-377	Section	
1-54	378-382	Menu	
1-55	382-383	:	
1-56	384-397	Documentation	
1-57	398-402	Home	
1-58	403-408	MySQL	
1-59	409-412	8.0	
1-60	413-422	Reference	
1-61	423-429	Manual	
1-62	430-437	Preface	
1-63	438-441	and	
1-64	442-447	Legal	
1-65	448-455	Notices	
1-66	456-463	General	
1-67	464-475	Information	
1-68	476-486	Installing	
1-69	487-490	and	
1-70	491-500	Upgrading	
1-71	501-506	MySQL	
1-72	507-515	Tutorial	
1-73	516-521	MySQL	
1-74	522-530	Programs	
1-75	531-536	MySQL	
1-76	537-543	Server	
1-77	544-558	Administration	
1-78	559-567	Security	
1-79	568-574	Backup	
1-80	575-578	and	
1-81	579-587	Recovery	
1-82	588-600	Optimization	
1-83	601-613	Optimization	
1-84	614-622	Overview	
1-85	623-633	Optimizing	
1-86	634-637	SQL	
1-87	638-648	Statements	
1-88	649-659	Optimizing	
1-89	660-666	SELECT	
1-90	667-677	Statements	
1-91	678-683	WHERE	
1-92	684-690	Clause	
1-93	691-703	Optimization	
1-94	704-709	Range	
1-95	710-722	Optimization	
1-96	723-728	Index	
1-97	729-734	Merge	
1-98	735-747	Optimization	
1-99	748-752	Hash	
1-100	753-757	Join	
1-101	758-770	Optimization	
1-102	771-777	Engine	
1-103	778-787	Condition	
1-104	788-796	Pushdown	
1-105	797-809	Optimization	
1-106	810-815	Index	
1-107	816-825	Condition	
1-108	826-834	Pushdown	
1-109	835-847	Optimization	
1-110	848-859	Nested-Loop	
1-111	860-864	Join	
1-112	865-875	Algorithms	
1-113	876-882	Nested	
1-114	883-887	Join	
1-115	888-900	Optimization	
1-116	901-906	Outer	
1-117	907-911	Join	
1-118	912-924	Optimization	
1-119	925-930	Outer	
1-120	931-935	Join	
1-121	936-950	Simplification	
1-122	951-962	Multi-Range	
1-123	963-967	Read	
1-124	968-980	Optimization	
1-125	981-986	Block	
1-126	987-998	Nested-Loop	
1-127	999-1002	and	
1-128	1003-1010	Batched	
1-129	1011-1014	Key	
1-130	1015-1021	Access	
1-131	1022-1027	Joins	
1-132	1028-1037	Condition	
1-133	1038-1047	Filtering	
1-134	1048-1064	Constant-Folding	
1-135	1065-1077	Optimization	
1-136	1078-1080	IS	
1-137	1081-1085	NULL	
1-138	1086-1098	Optimization	
1-139	1099-1104	ORDER	
1-140	1105-1107	BY	
1-141	1108-1120	Optimization	
1-142	1121-1126	GROUP	
1-143	1127-1129	BY	
1-144	1130-1142	Optimization	
1-145	1143-1151	DISTINCT	
1-146	1152-1164	Optimization	
1-147	1165-1170	LIMIT	
1-148	1171-1176	Query	
1-149	1177-1189	Optimization	
1-150	1190-1198	Function	
1-151	1199-1203	Call	
1-152	1204-1216	Optimization	
1-153	1217-1223	Window	
1-154	1224-1232	Function	
1-155	1233-1245	Optimization	
1-156	1246-1249	Row	
1-157	1250-1261	Constructor	
1-158	1262-1272	Expression	
1-159	1273-1285	Optimization	
1-160	1286-1294	Avoiding	
1-161	1295-1299	Full	
1-162	1300-1305	Table	
1-163	1306-1311	Scans	
1-164	1312-1322	Optimizing	
1-165	1323-1333	Subqueries	
1-166	1333-1334	,	
1-167	1335-1342	Derived	
1-168	1343-1349	Tables	
1-169	1349-1350	,	
1-170	1351-1355	View	
1-171	1356-1366	References	
1-172	1366-1367	,	
1-173	1368-1371	and	
1-174	1372-1378	Common	
1-175	1379-1384	Table	
1-176	1385-1396	Expressions	
1-177	1397-1407	Optimizing	
1-178	1408-1410	IN	
1-179	1411-1414	and	
1-180	1415-1421	EXISTS	
1-181	1422-1430	Subquery	
1-182	1431-1441	Predicates	
1-183	1442-1446	with	
1-184	1447-1455	Semijoin	
1-185	1456-1471	Transformations	
1-186	1472-1482	Optimizing	
1-187	1483-1493	Subqueries	
1-188	1494-1498	with	
1-189	1499-1514	Materialization	
1-190	1515-1525	Optimizing	
1-191	1526-1536	Subqueries	
1-192	1537-1541	with	
1-193	1542-1545	the	
1-194	1546-1552	EXISTS	
1-195	1553-1561	Strategy	
1-196	1562-1572	Optimizing	
1-197	1573-1580	Derived	
1-198	1581-1587	Tables	
1-199	1587-1588	,	
1-200	1589-1593	View	
1-201	1594-1604	References	
1-202	1604-1605	,	
1-203	1606-1609	and	
1-204	1610-1616	Common	
1-205	1617-1622	Table	
1-206	1623-1634	Expressions	
1-207	1635-1639	with	
1-208	1640-1647	Merging	
1-209	1648-1650	or	
1-210	1651-1666	Materialization	
1-211	1667-1674	Derived	
1-212	1675-1684	Condition	
1-213	1685-1693	Pushdown	
1-214	1694-1706	Optimization	
1-215	1707-1717	Optimizing	
1-216	1718-1736	INFORMATION_SCHEMA	
1-217	1737-1744	Queries	
1-218	1745-1755	Optimizing	
1-219	1756-1767	Performance	
1-220	1768-1774	Schema	
1-221	1775-1782	Queries	
1-222	1783-1793	Optimizing	
1-223	1794-1798	Data	
1-224	1799-1805	Change	
1-225	1806-1816	Statements	
1-226	1817-1827	Optimizing	
1-227	1828-1834	INSERT	
1-228	1835-1845	Statements	
1-229	1846-1856	Optimizing	
1-230	1857-1863	UPDATE	
1-231	1864-1874	Statements	
1-232	1875-1885	Optimizing	
1-233	1886-1892	DELETE	
1-234	1893-1903	Statements	
1-235	1904-1914	Optimizing	
1-236	1915-1923	Database	
1-237	1924-1934	Privileges	
1-238	1935-1940	Other	
1-239	1941-1953	Optimization	
1-240	1954-1958	Tips	
1-241	1959-1971	Optimization	
1-242	1972-1975	and	
1-243	1976-1983	Indexes	
1-244	1984-1987	How	
1-245	1988-1993	MySQL	
1-246	1994-1998	Uses	
1-247	1999-2006	Indexes	
1-248	2007-2014	Primary	
1-249	2015-2018	Key	
1-250	2019-2031	Optimization	
1-251	2032-2039	SPATIAL	
1-252	2040-2045	Index	
1-253	2046-2058	Optimization	
1-254	2059-2066	Foreign	
1-255	2067-2070	Key	
1-256	2071-2083	Optimization	
1-257	2084-2090	Column	
1-258	2091-2098	Indexes	
1-259	2099-2114	Multiple-Column	
1-260	2115-2122	Indexes	
1-261	2123-2132	Verifying	
1-262	2133-2138	Index	
1-263	2139-2144	Usage	
1-264	2145-2151	InnoDB	
1-265	2152-2155	and	
1-266	2156-2162	MyISAM	
1-267	2163-2168	Index	
1-268	2169-2179	Statistics	
1-269	2180-2190	Collection	
1-270	2191-2201	Comparison	
1-271	2202-2204	of	
1-272	2205-2211	B-Tree	
1-273	2212-2215	and	
1-274	2216-2220	Hash	
1-275	2221-2228	Indexes	
1-276	2229-2232	Use	
1-277	2233-2235	of	
1-278	2236-2241	Index	
1-279	2242-2252	Extensions	
1-280	2253-2262	Optimizer	
1-281	2263-2266	Use	
1-282	2267-2269	of	
1-283	2270-2279	Generated	
1-284	2280-2286	Column	
1-285	2287-2294	Indexes	
1-286	2295-2304	Invisible	
1-287	2305-2312	Indexes	
1-288	2313-2323	Descending	
1-289	2324-2331	Indexes	
1-290	2332-2339	Indexed	
1-291	2340-2347	Lookups	
1-292	2348-2352	from	
1-293	2353-2362	TIMESTAMP	
1-294	2363-2370	Columns	
1-295	2371-2381	Optimizing	
1-296	2382-2390	Database	
1-297	2391-2400	Structure	
1-298	2401-2411	Optimizing	
1-299	2412-2416	Data	
1-300	2417-2421	Size	
1-301	2422-2432	Optimizing	
1-302	2433-2438	MySQL	
1-303	2439-2443	Data	
1-304	2444-2449	Types	
1-305	2450-2460	Optimizing	
1-306	2461-2464	for	
1-307	2465-2472	Numeric	
1-308	2473-2477	Data	
1-309	2478-2488	Optimizing	
1-310	2489-2492	for	
1-311	2493-2502	Character	
1-312	2503-2506	and	
1-313	2507-2513	String	
1-314	2514-2519	Types	
1-315	2520-2530	Optimizing	
1-316	2531-2534	for	
1-317	2535-2539	BLOB	
1-318	2540-2545	Types	
1-319	2546-2556	Optimizing	
1-320	2557-2560	for	
1-321	2561-2565	Many	
1-322	2566-2572	Tables	
1-323	2573-2576	How	
1-324	2577-2582	MySQL	
1-325	2583-2588	Opens	
1-326	2589-2592	and	
1-327	2593-2599	Closes	
1-328	2600-2606	Tables	
1-329	2607-2620	Disadvantages	
1-330	2621-2623	of	
1-331	2624-2632	Creating	
1-332	2633-2637	Many	
1-333	2638-2644	Tables	
1-334	2645-2647	in	
1-335	2648-2651	the	
1-336	2652-2656	Same	
1-337	2657-2665	Database	
1-338	2666-2674	Internal	
1-339	2675-2684	Temporary	
1-340	2685-2690	Table	
1-341	2691-2694	Use	
1-342	2695-2697	in	
1-343	2698-2703	MySQL	
1-344	2704-2710	Limits	
1-345	2711-2713	on	
1-346	2714-2720	Number	
1-347	2721-2723	of	
1-348	2724-2733	Databases	
1-349	2734-2737	and	
1-350	2738-2744	Tables	
1-351	2745-2751	Limits	
1-352	2752-2754	on	
1-353	2755-2760	Table	
1-354	2761-2765	Size	
1-355	2766-2772	Limits	
1-356	2773-2775	on	
1-357	2776-2781	Table	
1-358	2782-2788	Column	
1-359	2789-2794	Count	
1-360	2795-2798	and	
1-361	2799-2802	Row	
1-362	2803-2807	Size	
1-363	2808-2818	Optimizing	
1-364	2819-2822	for	
1-365	2823-2829	InnoDB	
1-366	2830-2836	Tables	
1-367	2837-2847	Optimizing	
1-368	2848-2855	Storage	
1-369	2856-2862	Layout	
1-370	2863-2866	for	
1-371	2867-2873	InnoDB	
1-372	2874-2880	Tables	
1-373	2881-2891	Optimizing	
1-374	2892-2898	InnoDB	
1-375	2899-2910	Transaction	
1-376	2911-2921	Management	
1-377	2922-2932	Optimizing	
1-378	2933-2939	InnoDB	
1-379	2940-2949	Read-Only	
1-380	2950-2962	Transactions	
1-381	2963-2973	Optimizing	
1-382	2974-2980	InnoDB	
1-383	2981-2985	Redo	
1-384	2986-2993	Logging	
1-385	2994-2998	Bulk	
1-386	2999-3003	Data	
1-387	3004-3011	Loading	
1-388	3012-3015	for	
1-389	3016-3022	InnoDB	
1-390	3023-3029	Tables	
1-391	3030-3040	Optimizing	
1-392	3041-3047	InnoDB	
1-393	3048-3055	Queries	
1-394	3056-3066	Optimizing	
1-395	3067-3073	InnoDB	
1-396	3074-3077	DDL	
1-397	3078-3088	Operations	
1-398	3089-3099	Optimizing	
1-399	3100-3106	InnoDB	
1-400	3107-3111	Disk	
1-401	3112-3113	I	
1-402	3113-3114	/	
1-403	3114-3115	O	
1-404	3116-3126	Optimizing	
1-405	3127-3133	InnoDB	
1-406	3134-3147	Configuration	
1-407	3148-3157	Variables	
1-408	3158-3168	Optimizing	
1-409	3169-3175	InnoDB	
1-410	3176-3179	for	
1-411	3180-3187	Systems	
1-412	3188-3192	with	
1-413	3193-3197	Many	
1-414	3198-3204	Tables	
1-415	3205-3215	Optimizing	
1-416	3216-3219	for	
1-417	3220-3226	MyISAM	
1-418	3227-3233	Tables	
1-419	3234-3244	Optimizing	
1-420	3245-3251	MyISAM	
1-421	3252-3259	Queries	
1-422	3260-3264	Bulk	
1-423	3265-3269	Data	
1-424	3270-3277	Loading	
1-425	3278-3281	for	
1-426	3282-3288	MyISAM	
1-427	3289-3295	Tables	
1-428	3296-3306	Optimizing	
1-429	3307-3313	REPAIR	
1-430	3314-3319	TABLE	
1-431	3320-3330	Statements	
1-432	3331-3341	Optimizing	
1-433	3342-3345	for	
1-434	3346-3352	MEMORY	
1-435	3353-3359	Tables	
1-436	3360-3373	Understanding	
1-437	3374-3377	the	
1-438	3378-3383	Query	
1-439	3384-3393	Execution	
1-440	3394-3398	Plan	
1-441	3399-3409	Optimizing	
1-442	3410-3417	Queries	
1-443	3418-3422	with	
1-444	3423-3430	EXPLAIN	
1-445	3431-3438	EXPLAIN	
1-446	3439-3445	Output	
1-447	3446-3452	Format	
1-448	3453-3461	Extended	
1-449	3462-3469	EXPLAIN	
1-450	3470-3476	Output	
1-451	3477-3483	Format	
1-452	3484-3493	Obtaining	
1-453	3494-3503	Execution	
1-454	3504-3508	Plan	
1-455	3509-3520	Information	
1-456	3521-3524	for	
1-457	3525-3526	a	
1-458	3527-3532	Named	
1-459	3533-3543	Connection	
1-460	3544-3554	Estimating	
1-461	3555-3560	Query	
1-462	3561-3572	Performance	
1-463	3573-3584	Controlling	
1-464	3585-3588	the	
1-465	3589-3594	Query	
1-466	3595-3604	Optimizer	
1-467	3605-3616	Controlling	
1-468	3617-3622	Query	
1-469	3623-3627	Plan	
1-470	3628-3638	Evaluation	
1-471	3639-3649	Switchable	
1-472	3650-3663	Optimizations	
1-473	3664-3673	Optimizer	
1-474	3674-3679	Hints	
1-475	3680-3685	Index	
1-476	3686-3691	Hints	
1-477	3692-3695	The	
1-478	3696-3705	Optimizer	
1-479	3706-3710	Cost	
1-480	3711-3716	Model	
1-481	3717-3726	Optimizer	
1-482	3727-3737	Statistics	
1-483	3738-3747	Buffering	
1-484	3748-3751	and	
1-485	3752-3759	Caching	
1-486	3760-3766	InnoDB	
1-487	3767-3773	Buffer	
1-488	3774-3778	Pool	
1-489	3779-3791	Optimization	
1-490	3792-3795	The	
1-491	3796-3802	MyISAM	
1-492	3803-3806	Key	
1-493	3807-3812	Cache	
1-494	3813-3819	Shared	
1-495	3820-3823	Key	
1-496	3824-3829	Cache	
1-497	3830-3836	Access	
1-498	3837-3845	Multiple	
1-499	3846-3849	Key	
1-500	3850-3856	Caches	
1-501	3857-3865	Midpoint	
1-502	3866-3875	Insertion	
1-503	3876-3884	Strategy	
1-504	3885-3890	Index	
1-505	3891-3901	Preloading	
1-506	3902-3905	Key	
1-507	3906-3911	Cache	
1-508	3912-3917	Block	
1-509	3918-3922	Size	
1-510	3923-3936	Restructuring	
1-511	3937-3938	a	
1-512	3939-3942	Key	
1-513	3943-3948	Cache	
1-514	3949-3956	Caching	
1-515	3957-3959	of	
1-516	3960-3968	Prepared	
1-517	3969-3979	Statements	
1-518	3980-3983	and	
1-519	3984-3990	Stored	
1-520	3991-3999	Programs	
1-521	4000-4010	Optimizing	
1-522	4011-4018	Locking	
1-523	4019-4029	Operations	
1-524	4030-4038	Internal	
1-525	4039-4046	Locking	
1-526	4047-4054	Methods	
1-527	4055-4060	Table	
1-528	4061-4068	Locking	
1-529	4069-4075	Issues	
1-530	4076-4086	Concurrent	
1-531	4087-4094	Inserts	
1-532	4095-4103	Metadata	
1-533	4104-4111	Locking	
1-534	4112-4120	External	
1-535	4121-4128	Locking	
1-536	4129-4139	Optimizing	
1-537	4140-4143	the	
1-538	4144-4149	MySQL	
1-539	4150-4156	Server	
1-540	4157-4167	Optimizing	
1-541	4168-4172	Disk	
1-542	4173-4174	I	
1-543	4174-4175	/	
1-544	4175-4176	O	
1-545	4177-4182	Using	
1-546	4183-4191	Symbolic	
1-547	4192-4197	Links	
1-548	4198-4203	Using	
1-549	4204-4212	Symbolic	
1-550	4213-4218	Links	
1-551	4219-4222	for	
1-552	4223-4232	Databases	
1-553	4233-4235	on	
1-554	4236-4240	Unix	
1-555	4241-4246	Using	
1-556	4247-4255	Symbolic	
1-557	4256-4261	Links	
1-558	4262-4265	for	
1-559	4266-4272	MyISAM	
1-560	4273-4279	Tables	
1-561	4280-4282	on	
1-562	4283-4287	Unix	
1-563	4288-4293	Using	
1-564	4294-4302	Symbolic	
1-565	4303-4308	Links	
1-566	4309-4312	for	
1-567	4313-4322	Databases	
1-568	4323-4325	on	
1-569	4326-4333	Windows	
1-570	4334-4344	Optimizing	
1-571	4345-4351	Memory	
1-572	4352-4355	Use	
1-573	4356-4359	How	
1-574	4360-4365	MySQL	
1-575	4366-4370	Uses	
1-576	4371-4377	Memory	
1-577	4378-4386	Enabling	
1-578	4387-4392	Large	
1-579	4393-4397	Page	
1-580	4398-4405	Support	
1-581	4406-4415	Measuring	
1-582	4416-4427	Performance	
1-583	4428-4429	(	
1-584	4429-4441	Benchmarking	
1-585	4441-4442	)	
1-586	4443-4452	Measuring	
1-587	4453-4456	the	
1-588	4457-4462	Speed	
1-589	4463-4465	of	
1-590	4466-4477	Expressions	
1-591	4478-4481	and	
1-592	4482-4491	Functions	
1-593	4492-4497	Using	
1-594	4498-4502	Your	
1-595	4503-4506	Own	
1-596	4507-4517	Benchmarks	
1-597	4518-4527	Measuring	
1-598	4528-4539	Performance	
1-599	4540-4544	with	
1-600	4545-4563	performance_schema	
1-601	4564-4573	Examining	
1-602	4574-4580	Server	
1-603	4581-4587	Thread	
1-604	4588-4589	(	
1-605	4589-4596	Process	
1-606	4596-4597	)	
1-607	4598-4609	Information	
1-608	4610-4619	Accessing	
1-609	4620-4623	the	
1-610	4624-4631	Process	
1-611	4632-4636	List	
1-612	4637-4643	Thread	
1-613	4644-4651	Command	
1-614	4652-4658	Values	
1-615	4659-4666	General	
1-616	4667-4673	Thread	
1-617	4674-4680	States	
1-618	4681-4692	Replication	
1-619	4693-4699	Source	
1-620	4700-4706	Thread	
1-621	4707-4713	States	
1-622	4714-4725	Replication	
1-623	4726-4727	I	
1-624	4727-4728	/	
1-625	4728-4729	O	
1-626	4730-4736	Thread	
1-627	4737-4743	States	
1-628	4744-4755	Replication	
1-629	4756-4759	SQL	
1-630	4760-4766	Thread	
1-631	4767-4773	States	
1-632	4774-4785	Replication	
1-633	4786-4796	Connection	
1-634	4797-4803	Thread	
1-635	4804-4810	States	
1-636	4811-4814	NDB	
1-637	4815-4822	Cluster	
1-638	4823-4829	Thread	
1-639	4830-4836	States	
1-640	4837-4842	Event	
1-641	4843-4852	Scheduler	
1-642	4853-4859	Thread	
1-643	4860-4866	States	
1-644	4867-4875	Language	
1-645	4876-4885	Structure	
1-646	4886-4895	Character	
1-647	4896-4900	Sets	
1-648	4900-4901	,	
1-649	4902-4912	Collations	
1-650	4912-4913	,	
1-651	4914-4921	Unicode	
1-652	4922-4926	Data	
1-653	4927-4932	Types	
1-654	4933-4942	Functions	
1-655	4943-4946	and	
1-656	4947-4956	Operators	
1-657	4957-4960	SQL	
1-658	4961-4971	Statements	
1-659	4972-4977	MySQL	
1-660	4978-4982	Data	
1-661	4983-4993	Dictionary	
1-662	4994-4997	The	
1-663	4998-5004	InnoDB	
1-664	5005-5012	Storage	
1-665	5013-5019	Engine	
1-666	5020-5031	Alternative	
1-667	5032-5039	Storage	
1-668	5040-5047	Engines	
1-669	5048-5059	Replication	
1-670	5060-5065	Group	
1-671	5066-5077	Replication	
1-672	5078-5083	MySQL	
1-673	5084-5089	Shell	
1-674	5090-5095	Using	
1-675	5096-5101	MySQL	
1-676	5102-5104	as	
1-677	5105-5106	a	
1-678	5107-5115	Document	
1-679	5116-5121	Store	
1-680	5122-5128	InnoDB	
1-681	5129-5136	Cluster	
1-682	5137-5143	InnoDB	
1-683	5144-5154	ReplicaSet	
1-684	5155-5160	MySQL	
1-685	5161-5164	NDB	
1-686	5165-5172	Cluster	
1-687	5173-5176	8.0	
1-688	5177-5189	Partitioning	
1-689	5190-5196	Stored	
1-690	5197-5204	Objects	
1-691	5205-5223	INFORMATION_SCHEMA	
1-692	5224-5230	Tables	
1-693	5231-5236	MySQL	
1-694	5237-5248	Performance	
1-695	5249-5255	Schema	
1-696	5256-5261	MySQL	
1-697	5262-5265	sys	
1-698	5266-5272	Schema	
1-699	5273-5283	Connectors	
1-700	5284-5287	and	
1-701	5288-5292	APIs	
1-702	5293-5298	MySQL	
1-703	5299-5309	Enterprise	
1-704	5310-5317	Edition	
1-705	5318-5323	MySQL	
1-706	5324-5333	Workbench	
1-707	5334-5339	MySQL	
1-708	5340-5342	on	
1-709	5343-5346	the	
1-710	5347-5350	OCI	
1-711	5351-5362	Marketplace	
1-712	5363-5368	MySQL	
1-713	5369-5372	8.0	
1-714	5373-5383	Frequently	
1-715	5384-5389	Asked	
1-716	5390-5399	Questions	
1-717	5400-5405	Error	
1-718	5406-5414	Messages	
1-719	5415-5418	and	
1-720	5419-5425	Common	
1-721	5426-5434	Problems	
1-722	5435-5442	Indexes	
1-723	5443-5448	MySQL	
1-724	5449-5457	Glossary	
1-725	5458-5465	Related	
1-726	5466-5479	Documentation	
1-727	5480-5485	MySQL	
1-728	5486-5489	8.0	
1-729	5490-5497	Release	
1-730	5498-5503	Notes	
1-731	5504-5509	MySQL	
1-732	5510-5513	8.0	
1-733	5514-5520	Source	
1-734	5521-5525	Code	
1-735	5526-5539	Documentation	
1-736	5540-5548	Download	
1-737	5549-5553	this	
1-738	5554-5560	Manual	
1-739	5561-5564	PDF	
1-740	5565-5566	(	
1-741	5566-5568	US	
1-742	5569-5572	Ltr	
1-743	5572-5573	)	
1-744	5574-5575	-	
1-745	5576-5582	40.9Mb	
1-746	5583-5586	PDF	
1-747	5587-5588	(	
1-748	5588-5590	A4	
1-749	5590-5591	)	
1-750	5592-5593	-	
1-751	5594-5600	41.0Mb	
1-752	5601-5604	PDF	
1-753	5605-5606	(	
1-754	5606-5609	RPM	
1-755	5609-5610	)	
1-756	5611-5612	-	
1-757	5613-5619	39.7Mb	
1-758	5620-5624	HTML	
1-759	5625-5633	Download	
1-760	5634-5635	(	
1-761	5635-5638	TGZ	
1-762	5638-5639	)	
1-763	5640-5641	-	
1-764	5642-5647	9.5Mb	
1-765	5648-5652	HTML	
1-766	5653-5661	Download	
1-767	5662-5663	(	
1-768	5663-5666	Zip	
1-769	5666-5667	)	
1-770	5668-5669	-	
1-771	5670-5675	9.6Mb	
1-772	5676-5680	HTML	
1-773	5681-5689	Download	
1-774	5690-5691	(	
1-775	5691-5694	RPM	
1-776	5694-5695	)	
1-777	5696-5697	-	
1-778	5698-5703	8.1Mb	
1-779	5704-5707	Man	
1-780	5708-5713	Pages	
1-781	5714-5715	(	
1-782	5715-5718	TGZ	
1-783	5718-5719	)	
1-784	5720-5721	-	
1-785	5722-5729	256.7Kb	
1-786	5730-5733	Man	
1-787	5734-5739	Pages	
1-788	5740-5741	(	
1-789	5741-5744	Zip	
1-790	5744-5745	)	
1-791	5746-5747	-	
1-792	5748-5755	366.8Kb	
1-793	5756-5760	Info	
1-794	5761-5762	(	
1-795	5762-5766	Gzip	
1-796	5766-5767	)	
1-797	5768-5769	-	
1-798	5770-5775	3.9Mb	
1-799	5776-5780	Info	
1-800	5781-5782	(	
1-801	5782-5785	Zip	
1-802	5785-5786	)	
1-803	5787-5788	-	
1-804	5789-5794	3.9Mb	
1-805	5795-5803	Excerpts	
1-806	5804-5808	from	
1-807	5809-5813	this	
1-808	5814-5820	Manual	
1-809	5821-5826	MySQL	
1-810	5827-5833	Backup	
1-811	5834-5837	and	
1-812	5838-5846	Recovery	
1-813	5847-5852	MySQL	
1-814	5853-5866	Globalization	
1-815	5867-5872	MySQL	
1-816	5873-5884	Information	
1-817	5885-5891	Schema	
1-818	5892-5897	MySQL	
1-819	5898-5910	Installation	
1-820	5911-5916	Guide	
1-821	5917-5925	Security	
1-822	5926-5928	in	
1-823	5929-5934	MySQL	
1-824	5935-5943	Starting	
1-825	5944-5947	and	
1-826	5948-5956	Stopping	
1-827	5957-5962	MySQL	
1-828	5963-5968	MySQL	
1-829	5969-5972	and	
1-830	5973-5978	Linux	
1-831	5978-5979	/	
1-832	5979-5983	Unix	
1-833	5984-5989	MySQL	
1-834	5990-5993	and	
1-835	5994-6001	Windows	
1-836	6002-6007	MySQL	
1-837	6008-6011	and	
1-838	6012-6014	OS	
1-839	6015-6016	X	
1-840	6017-6022	MySQL	
1-841	6023-6026	and	
1-842	6027-6034	Solaris	
1-843	6035-6043	Building	
1-844	6044-6049	MySQL	
1-845	6050-6054	from	
1-846	6055-6061	Source	
1-847	6062-6067	MySQL	
1-848	6068-6080	Restrictions	
1-849	6081-6084	and	
1-850	6085-6096	Limitations	
1-851	6097-6102	MySQL	
1-852	6103-6115	Partitioning	
1-853	6116-6121	MySQL	
1-854	6122-6130	Tutorial	
1-855	6131-6136	MySQL	
1-856	6137-6148	Performance	
1-857	6149-6155	Schema	
1-858	6156-6161	MySQL	
1-859	6162-6173	Replication	
1-860	6174-6179	Using	
1-861	6180-6183	the	
1-862	6184-6189	MySQL	
1-863	6190-6193	Yum	
1-864	6194-6204	Repository	
1-865	6205-6210	MySQL	
1-866	6211-6214	NDB	
1-867	6215-6222	Cluster	
1-868	6223-6226	8.0	
1-869	6227-6234	version	
1-870	6235-6238	8.0	
1-871	6239-6242	5.7	
1-872	6243-6246	5.6	
1-873	6247-6250	5.6	
1-874	6251-6259	Japanese	
1-875	6260-6265	MySQL	
1-876	6266-6269	8.0	
1-877	6270-6279	Reference	
1-878	6280-6286	Manual	
1-879	6287-6288	 	
1-880	6288-6289	/	

#Text=.
2-1	6290-6291	.	

#Text=.
3-1	6291-6292	.	

#Text=.
4-1	6292-6293	.	

#Text= /
#Text=Optimization  /
#Text=Optimizing SQL Statements  /
#Text=Optimizing SELECT Statements  /
#Text=Hash Join Optimization
#Text=8.2.1.4 Hash Join Optimization
#Text=Beginning with MySQL 8.0.18, MySQL employs a hash join for any
#Text=query for which each join has an equi-join condition, and in
#Text=which there are no indexes that can be applied to any join
#Text=conditions, such as this one:
#Text=SELECT *
#Text=FROM t1
#Text=JOIN t2
#Text=ON t1.c1=t2.c1;
#Text=A hash join can also be used when there are one or more
#Text=indexes that can be used for single-table predicates.
5-1	6294-6295	 	
5-2	6295-6296	/	
5-3	6297-6309	Optimization	
5-4	6310-6311	 	
5-5	6311-6312	/	
5-6	6313-6323	Optimizing	
5-7	6324-6327	SQL	
5-8	6328-6338	Statements	
5-9	6339-6340	 	
5-10	6340-6341	/	
5-11	6342-6352	Optimizing	
5-12	6353-6359	SELECT	
5-13	6360-6370	Statements	
5-14	6371-6372	 	
5-15	6372-6373	/	
5-16	6374-6378	Hash	
5-17	6379-6383	Join	
5-18	6384-6396	Optimization	
5-19	6397-6404	8.2.1.4	
5-20	6404-6405	 	
5-21	6405-6409	Hash	
5-22	6410-6414	Join	
5-23	6415-6427	Optimization	
5-24	6428-6437	Beginning	
5-25	6438-6442	with	
5-26	6443-6448	MySQL	
5-27	6449-6455	8.0.18	
5-28	6455-6456	,	
5-29	6457-6462	MySQL	
5-30	6463-6470	employs	
5-31	6471-6472	a	
5-32	6473-6477	hash	
5-33	6478-6482	join	
5-34	6483-6486	for	
5-35	6487-6490	any	
5-36	6491-6496	query	
5-37	6497-6500	for	
5-38	6501-6506	which	
5-39	6507-6511	each	
5-40	6512-6516	join	
5-41	6517-6520	has	
5-42	6521-6523	an	
5-43	6524-6533	equi-join	
5-44	6534-6543	condition	
5-45	6543-6544	,	
5-46	6545-6548	and	
5-47	6549-6551	in	
5-48	6552-6557	which	
5-49	6558-6563	there	
5-50	6564-6567	are	
5-51	6568-6570	no	
5-52	6571-6578	indexes	
5-53	6579-6583	that	
5-54	6584-6587	can	
5-55	6588-6590	be	
5-56	6591-6598	applied	
5-57	6599-6601	to	
5-58	6602-6605	any	
5-59	6606-6610	join	
5-60	6611-6621	conditions	
5-61	6621-6622	,	
5-62	6623-6627	such	
5-63	6628-6630	as	
5-64	6631-6635	this	
5-65	6636-6639	one	
5-66	6639-6640	:	
5-67	6641-6647	SELECT	
5-68	6648-6649	*	
5-69	6650-6654	FROM	
5-70	6655-6657	t1	
5-71	6658-6662	JOIN	
5-72	6663-6665	t2	
5-73	6666-6668	ON	
5-74	6669-6671	t1	
5-75	6671-6672	.	
5-76	6672-6674	c1	
5-77	6674-6675	=	
5-78	6675-6677	t2	
5-79	6677-6678	.	
5-80	6678-6680	c1	
5-81	6680-6681	;	
5-82	6682-6683	A	
5-83	6684-6688	hash	
5-84	6689-6693	join	
5-85	6694-6697	can	
5-86	6698-6702	also	
5-87	6703-6705	be	
5-88	6706-6710	used	
5-89	6711-6715	when	
5-90	6716-6721	there	
5-91	6722-6725	are	
5-92	6726-6729	one	
5-93	6730-6732	or	
5-94	6733-6737	more	
5-95	6738-6745	indexes	
5-96	6746-6750	that	
5-97	6751-6754	can	
5-98	6755-6757	be	
5-99	6758-6762	used	
5-100	6763-6766	for	
5-101	6767-6779	single-table	
5-102	6780-6790	predicates	
5-103	6790-6791	.	

#Text=A hash join is usually faster than and is intended to be used
#Text=in such cases instead of the block nested loop algorithm (see
#Text=Block Nested-Loop Join Algorithm) employed
#Text=in previous versions of MySQL.
6-1	6792-6793	A	
6-2	6794-6798	hash	
6-3	6799-6803	join	
6-4	6804-6806	is	
6-5	6807-6814	usually	
6-6	6815-6821	faster	
6-7	6822-6826	than	
6-8	6827-6830	and	
6-9	6831-6833	is	
6-10	6834-6842	intended	
6-11	6843-6845	to	
6-12	6846-6848	be	
6-13	6849-6853	used	
6-14	6854-6856	in	
6-15	6857-6861	such	
6-16	6862-6867	cases	
6-17	6868-6875	instead	
6-18	6876-6878	of	
6-19	6879-6882	the	
6-20	6883-6888	block	
6-21	6889-6895	nested	
6-22	6896-6900	loop	
6-23	6901-6910	algorithm	
6-24	6911-6912	(	
6-25	6912-6915	see	
6-26	6916-6921	Block	
6-27	6922-6933	Nested-Loop	
6-28	6934-6938	Join	
6-29	6939-6948	Algorithm	
6-30	6948-6949	)	
6-31	6950-6958	employed	
6-32	6959-6961	in	
6-33	6962-6970	previous	
6-34	6971-6979	versions	
6-35	6980-6982	of	
6-36	6983-6988	MySQL	
6-37	6988-6989	.	

#Text=Beginning with MySQL 8.0.20,
#Text=support for block nested loop is removed, and the server
#Text=employs a hash join wherever a block nested loop would have
#Text=been used previously.
7-1	6990-6999	Beginning	
7-2	7000-7004	with	
7-3	7005-7010	MySQL	
7-4	7011-7017	8.0.20	
7-5	7017-7018	,	
7-6	7019-7026	support	
7-7	7027-7030	for	
7-8	7031-7036	block	
7-9	7037-7043	nested	
7-10	7044-7048	loop	
7-11	7049-7051	is	
7-12	7052-7059	removed	
7-13	7059-7060	,	
7-14	7061-7064	and	
7-15	7065-7068	the	
7-16	7069-7075	server	
7-17	7076-7083	employs	
7-18	7084-7085	a	
7-19	7086-7090	hash	
7-20	7091-7095	join	
7-21	7096-7104	wherever	
7-22	7105-7106	a	
7-23	7107-7112	block	
7-24	7113-7119	nested	
7-25	7120-7124	loop	
7-26	7125-7130	would	
7-27	7131-7135	have	
7-28	7136-7140	been	
7-29	7141-7145	used	
7-30	7146-7156	previously	
7-31	7156-7157	.	

#Text=In the example just shown and the remaining examples in this
#Text=section, we assume that the three tables
#Text=t1, t2, and
#Text=t3 have been created using the following
#Text=statements:
#Text=CREATE TABLE t1 (c1 INT, c2 INT);
#Text=CREATE TABLE t2 (c1 INT, c2 INT);
#Text=CREATE TABLE t3 (c1 INT, c2 INT);
#Text=You can see that a hash join is being employed by using
#Text=EXPLAIN,
#Text=like this:
#Text=mysql> EXPLAIN
#Text=-> SELECT * FROM t1
#Text=JOIN t2 ON t1.c1=t2.c1\\G
#Text=*************************** 1. row ***************************
#Text=id: 1
#Text=select_type: SIMPLE
#Text=table: t1
#Text=partitions: NULL
#Text=type: ALL
#Text=possible_keys: NULL
#Text=key: NULL
#Text=key_len: NULL
#Text=ref: NULL
#Text=rows: 1
#Text=filtered: 100.00
#Text=Extra: NULL
#Text=*************************** 2. row ***************************
#Text=id: 1
#Text=select_type: SIMPLE
#Text=table: t2
#Text=partitions: NULL
#Text=type: ALL
#Text=possible_keys: NULL
#Text=key: NULL
#Text=key_len: NULL
#Text=ref: NULL
#Text=rows: 1
#Text=filtered: 100.00
#Text=Extra: Using where; Using join buffer (hash join)
#Text=(Prior to MySQL 8.0.20, it was necessary to include the
#Text=FORMAT=TREE option to see whether hash
#Text=joins were being used for a given join.)
8-1	7158-7160	In	
8-2	7161-7164	the	
8-3	7165-7172	example	
8-4	7173-7177	just	
8-5	7178-7183	shown	
8-6	7184-7187	and	
8-7	7188-7191	the	
8-8	7192-7201	remaining	
8-9	7202-7210	examples	
8-10	7211-7213	in	
8-11	7214-7218	this	
8-12	7219-7226	section	
8-13	7226-7227	,	
8-14	7228-7230	we	
8-15	7231-7237	assume	
8-16	7238-7242	that	
8-17	7243-7246	the	
8-18	7247-7252	three	
8-19	7253-7259	tables	
8-20	7260-7262	t1	
8-21	7262-7263	,	
8-22	7264-7266	t2	
8-23	7266-7267	,	
8-24	7268-7271	and	
8-25	7272-7274	t3	
8-26	7275-7279	have	
8-27	7280-7284	been	
8-28	7285-7292	created	
8-29	7293-7298	using	
8-30	7299-7302	the	
8-31	7303-7312	following	
8-32	7313-7323	statements	
8-33	7323-7324	:	
8-34	7325-7331	CREATE	
8-35	7332-7337	TABLE	
8-36	7338-7340	t1	
8-37	7341-7342	(	
8-38	7342-7344	c1	
8-39	7345-7348	INT	
8-40	7348-7349	,	
8-41	7350-7352	c2	
8-42	7353-7356	INT	
8-43	7356-7357	)	
8-44	7357-7358	;	
8-45	7359-7365	CREATE	
8-46	7366-7371	TABLE	
8-47	7372-7374	t2	
8-48	7375-7376	(	
8-49	7376-7378	c1	
8-50	7379-7382	INT	
8-51	7382-7383	,	
8-52	7384-7386	c2	
8-53	7387-7390	INT	
8-54	7390-7391	)	
8-55	7391-7392	;	
8-56	7393-7399	CREATE	
8-57	7400-7405	TABLE	
8-58	7406-7408	t3	
8-59	7409-7410	(	
8-60	7410-7412	c1	
8-61	7413-7416	INT	
8-62	7416-7417	,	
8-63	7418-7420	c2	
8-64	7421-7424	INT	
8-65	7424-7425	)	
8-66	7425-7426	;	
8-67	7427-7430	You	
8-68	7431-7434	can	
8-69	7435-7438	see	
8-70	7439-7443	that	
8-71	7444-7445	a	
8-72	7446-7450	hash	
8-73	7451-7455	join	
8-74	7456-7458	is	
8-75	7459-7464	being	
8-76	7465-7473	employed	
8-77	7474-7476	by	
8-78	7477-7482	using	
8-79	7483-7490	EXPLAIN	
8-80	7490-7491	,	
8-81	7492-7496	like	
8-82	7497-7501	this	
8-83	7501-7502	:	
8-84	7503-7508	mysql	
8-85	7508-7509	>	
8-86	7510-7517	EXPLAIN	
8-87	7518-7519	-	
8-88	7519-7520	>	
8-89	7521-7527	SELECT	
8-90	7528-7529	*	
8-91	7530-7534	FROM	
8-92	7535-7537	t1	
8-93	7538-7542	JOIN	
8-94	7543-7545	t2	
8-95	7546-7548	ON	
8-96	7549-7551	t1	
8-97	7551-7552	.	
8-98	7552-7554	c1	
8-99	7554-7555	=	
8-100	7555-7557	t2	
8-101	7557-7558	.	
8-102	7558-7560	c1	
8-103	7560-7561	\	
8-104	7561-7562	G	
8-105	7563-7564	*	
8-106	7564-7565	*	
8-107	7565-7566	*	
8-108	7566-7567	*	
8-109	7567-7568	*	
8-110	7568-7569	*	
8-111	7569-7570	*	
8-112	7570-7571	*	
8-113	7571-7572	*	
8-114	7572-7573	*	
8-115	7573-7574	*	
8-116	7574-7575	*	
8-117	7575-7576	*	
8-118	7576-7577	*	
8-119	7577-7578	*	
8-120	7578-7579	*	
8-121	7579-7580	*	
8-122	7580-7581	*	
8-123	7581-7582	*	
8-124	7582-7583	*	
8-125	7583-7584	*	
8-126	7584-7585	*	
8-127	7585-7586	*	
8-128	7586-7587	*	
8-129	7587-7588	*	
8-130	7588-7589	*	
8-131	7589-7590	*	
8-132	7591-7592	1	
8-133	7592-7593	.	
8-134	7594-7597	row	
8-135	7598-7599	*	
8-136	7599-7600	*	
8-137	7600-7601	*	
8-138	7601-7602	*	
8-139	7602-7603	*	
8-140	7603-7604	*	
8-141	7604-7605	*	
8-142	7605-7606	*	
8-143	7606-7607	*	
8-144	7607-7608	*	
8-145	7608-7609	*	
8-146	7609-7610	*	
8-147	7610-7611	*	
8-148	7611-7612	*	
8-149	7612-7613	*	
8-150	7613-7614	*	
8-151	7614-7615	*	
8-152	7615-7616	*	
8-153	7616-7617	*	
8-154	7617-7618	*	
8-155	7618-7619	*	
8-156	7619-7620	*	
8-157	7620-7621	*	
8-158	7621-7622	*	
8-159	7622-7623	*	
8-160	7623-7624	*	
8-161	7624-7625	*	
8-162	7626-7628	id	
8-163	7628-7629	:	
8-164	7630-7631	1	
8-165	7632-7643	select_type	
8-166	7643-7644	:	
8-167	7645-7651	SIMPLE	
8-168	7652-7657	table	
8-169	7657-7658	:	
8-170	7659-7661	t1	
8-171	7662-7672	partitions	
8-172	7672-7673	:	
8-173	7674-7678	NULL	
8-174	7679-7683	type	
8-175	7683-7684	:	
8-176	7685-7688	ALL	
8-177	7689-7702	possible_keys	
8-178	7702-7703	:	
8-179	7704-7708	NULL	
8-180	7709-7712	key	
8-181	7712-7713	:	
8-182	7714-7718	NULL	
8-183	7719-7726	key_len	
8-184	7726-7727	:	
8-185	7728-7732	NULL	
8-186	7733-7736	ref	
8-187	7736-7737	:	
8-188	7738-7742	NULL	
8-189	7743-7747	rows	
8-190	7747-7748	:	
8-191	7749-7750	1	
8-192	7751-7759	filtered	
8-193	7759-7760	:	
8-194	7761-7767	100.00	
8-195	7768-7773	Extra	
8-196	7773-7774	:	
8-197	7775-7779	NULL	
8-198	7780-7781	*	
8-199	7781-7782	*	
8-200	7782-7783	*	
8-201	7783-7784	*	
8-202	7784-7785	*	
8-203	7785-7786	*	
8-204	7786-7787	*	
8-205	7787-7788	*	
8-206	7788-7789	*	
8-207	7789-7790	*	
8-208	7790-7791	*	
8-209	7791-7792	*	
8-210	7792-7793	*	
8-211	7793-7794	*	
8-212	7794-7795	*	
8-213	7795-7796	*	
8-214	7796-7797	*	
8-215	7797-7798	*	
8-216	7798-7799	*	
8-217	7799-7800	*	
8-218	7800-7801	*	
8-219	7801-7802	*	
8-220	7802-7803	*	
8-221	7803-7804	*	
8-222	7804-7805	*	
8-223	7805-7806	*	
8-224	7806-7807	*	
8-225	7808-7809	2	
8-226	7809-7810	.	
8-227	7811-7814	row	
8-228	7815-7816	*	
8-229	7816-7817	*	
8-230	7817-7818	*	
8-231	7818-7819	*	
8-232	7819-7820	*	
8-233	7820-7821	*	
8-234	7821-7822	*	
8-235	7822-7823	*	
8-236	7823-7824	*	
8-237	7824-7825	*	
8-238	7825-7826	*	
8-239	7826-7827	*	
8-240	7827-7828	*	
8-241	7828-7829	*	
8-242	7829-7830	*	
8-243	7830-7831	*	
8-244	7831-7832	*	
8-245	7832-7833	*	
8-246	7833-7834	*	
8-247	7834-7835	*	
8-248	7835-7836	*	
8-249	7836-7837	*	
8-250	7837-7838	*	
8-251	7838-7839	*	
8-252	7839-7840	*	
8-253	7840-7841	*	
8-254	7841-7842	*	
8-255	7843-7845	id	
8-256	7845-7846	:	
8-257	7847-7848	1	
8-258	7849-7860	select_type	
8-259	7860-7861	:	
8-260	7862-7868	SIMPLE	
8-261	7869-7874	table	
8-262	7874-7875	:	
8-263	7876-7878	t2	
8-264	7879-7889	partitions	
8-265	7889-7890	:	
8-266	7891-7895	NULL	
8-267	7896-7900	type	
8-268	7900-7901	:	
8-269	7902-7905	ALL	
8-270	7906-7919	possible_keys	
8-271	7919-7920	:	
8-272	7921-7925	NULL	
8-273	7926-7929	key	
8-274	7929-7930	:	
8-275	7931-7935	NULL	
8-276	7936-7943	key_len	
8-277	7943-7944	:	
8-278	7945-7949	NULL	
8-279	7950-7953	ref	
8-280	7953-7954	:	
8-281	7955-7959	NULL	
8-282	7960-7964	rows	
8-283	7964-7965	:	
8-284	7966-7967	1	
8-285	7968-7976	filtered	
8-286	7976-7977	:	
8-287	7978-7984	100.00	
8-288	7985-7990	Extra	
8-289	7990-7991	:	
8-290	7992-7997	Using	
8-291	7998-8003	where	
8-292	8003-8004	;	
8-293	8005-8010	Using	
8-294	8011-8015	join	
8-295	8016-8022	buffer	
8-296	8023-8024	(	
8-297	8024-8028	hash	
8-298	8029-8033	join	
8-299	8033-8034	)	
8-300	8035-8036	(	
8-301	8036-8041	Prior	
8-302	8042-8044	to	
8-303	8045-8050	MySQL	
8-304	8051-8057	8.0.20	
8-305	8057-8058	,	
8-306	8059-8061	it	
8-307	8062-8065	was	
8-308	8066-8075	necessary	
8-309	8076-8078	to	
8-310	8079-8086	include	
8-311	8087-8090	the	
8-312	8091-8097	FORMAT	
8-313	8097-8098	=	
8-314	8098-8102	TREE	
8-315	8103-8109	option	
8-316	8110-8112	to	
8-317	8113-8116	see	
8-318	8117-8124	whether	
8-319	8125-8129	hash	
8-320	8130-8135	joins	
8-321	8136-8140	were	
8-322	8141-8146	being	
8-323	8147-8151	used	
8-324	8152-8155	for	
8-325	8156-8157	a	
8-326	8158-8163	given	
8-327	8164-8168	join	
8-328	8168-8169	.	
8-329	8169-8170	)	

#Text=EXPLAIN ANALYZE also displays
#Text=information about hash joins used.
9-1	8171-8178	EXPLAIN	
9-2	8179-8186	ANALYZE	
9-3	8187-8191	also	
9-4	8192-8200	displays	
9-5	8201-8212	information	
9-6	8213-8218	about	
9-7	8219-8223	hash	
9-8	8224-8229	joins	
9-9	8230-8234	used	
9-10	8234-8235	.	

#Text=The hash join is used for queries involving multiple joins as
#Text=well, as long as at least one join condition for each pair of
#Text=tables is an equi-join, like the query shown here:
#Text=SELECT * FROM t1
#Text=JOIN t2 ON (t1.c1 = t2.c1 AND t1.c2 < t2.c2)
#Text=JOIN t3 ON (t2.c1 = t3.c1);
#Text=In cases like the one just shown, which makes use of an inner
#Text=join, any extra conditions which are not equi-joins are
#Text=applied as filters after the join is executed.
10-1	8236-8239	The	
10-2	8240-8244	hash	
10-3	8245-8249	join	
10-4	8250-8252	is	
10-5	8253-8257	used	
10-6	8258-8261	for	
10-7	8262-8269	queries	
10-8	8270-8279	involving	
10-9	8280-8288	multiple	
10-10	8289-8294	joins	
10-11	8295-8297	as	
10-12	8298-8302	well	
10-13	8302-8303	,	
10-14	8304-8306	as	
10-15	8307-8311	long	
10-16	8312-8314	as	
10-17	8315-8317	at	
10-18	8318-8323	least	
10-19	8324-8327	one	
10-20	8328-8332	join	
10-21	8333-8342	condition	
10-22	8343-8346	for	
10-23	8347-8351	each	
10-24	8352-8356	pair	
10-25	8357-8359	of	
10-26	8360-8366	tables	
10-27	8367-8369	is	
10-28	8370-8372	an	
10-29	8373-8382	equi-join	
10-30	8382-8383	,	
10-31	8384-8388	like	
10-32	8389-8392	the	
10-33	8393-8398	query	
10-34	8399-8404	shown	
10-35	8405-8409	here	
10-36	8409-8410	:	
10-37	8411-8417	SELECT	
10-38	8418-8419	*	
10-39	8420-8424	FROM	
10-40	8425-8427	t1	
10-41	8428-8432	JOIN	
10-42	8433-8435	t2	
10-43	8436-8438	ON	
10-44	8439-8440	(	
10-45	8440-8442	t1	
10-46	8442-8443	.	
10-47	8443-8445	c1	
10-48	8446-8447	=	
10-49	8448-8450	t2	
10-50	8450-8451	.	
10-51	8451-8453	c1	
10-52	8454-8457	AND	
10-53	8458-8460	t1	
10-54	8460-8461	.	
10-55	8461-8463	c2	
10-56	8464-8465	<	
10-57	8466-8468	t2	
10-58	8468-8469	.	
10-59	8469-8471	c2	
10-60	8471-8472	)	
10-61	8473-8477	JOIN	
10-62	8478-8480	t3	
10-63	8481-8483	ON	
10-64	8484-8485	(	
10-65	8485-8487	t2	
10-66	8487-8488	.	
10-67	8488-8490	c1	
10-68	8491-8492	=	
10-69	8493-8495	t3	
10-70	8495-8496	.	
10-71	8496-8498	c1	
10-72	8498-8499	)	
10-73	8499-8500	;	
10-74	8501-8503	In	
10-75	8504-8509	cases	
10-76	8510-8514	like	
10-77	8515-8518	the	
10-78	8519-8522	one	
10-79	8523-8527	just	
10-80	8528-8533	shown	
10-81	8533-8534	,	
10-82	8535-8540	which	
10-83	8541-8546	makes	
10-84	8547-8550	use	
10-85	8551-8553	of	
10-86	8554-8556	an	
10-87	8557-8562	inner	
10-88	8563-8567	join	
10-89	8567-8568	,	
10-90	8569-8572	any	
10-91	8573-8578	extra	
10-92	8579-8589	conditions	
10-93	8590-8595	which	
10-94	8596-8599	are	
10-95	8600-8603	not	
10-96	8604-8614	equi-joins	
10-97	8615-8618	are	
10-98	8619-8626	applied	
10-99	8627-8629	as	
10-100	8630-8637	filters	
10-101	8638-8643	after	
10-102	8644-8647	the	
10-103	8648-8652	join	
10-104	8653-8655	is	
10-105	8656-8664	executed	
10-106	8664-8665	.	

#Text=(For outer
#Text=joins, such as left joins, semijoins, and antijoins, they are
#Text=printed as part of the join.)
11-1	8666-8667	(	
11-2	8667-8670	For	
11-3	8671-8676	outer	
11-4	8677-8682	joins	
11-5	8682-8683	,	
11-6	8684-8688	such	
11-7	8689-8691	as	
11-8	8692-8696	left	
11-9	8697-8702	joins	
11-10	8702-8703	,	
11-11	8704-8713	semijoins	
11-12	8713-8714	,	
11-13	8715-8718	and	
11-14	8719-8728	antijoins	
11-15	8728-8729	,	
11-16	8730-8734	they	
11-17	8735-8738	are	
11-18	8739-8746	printed	
11-19	8747-8749	as	
11-20	8750-8754	part	
11-21	8755-8757	of	
11-22	8758-8761	the	
11-23	8762-8766	join	
11-24	8766-8767	.	
11-25	8767-8768	)	

#Text=This can be seen here in the
#Text=output of EXPLAIN:
#Text=mysql> EXPLAIN FORMAT=TREE
#Text=-> SELECT *
#Text=FROM t1
#Text=JOIN t2
#Text=ON (t1.c1 = t2.c1 AND t1.c2 < t2.c2)
#Text=JOIN t3
#Text=ON (t2.c1 = t3.c1)\\G
#Text=*************************** 1. row ***************************
#Text=EXPLAIN: -> Inner hash join (t3.c1 = t1.c1)
#Text=(cost=1.05 rows=1)
#Text=-> Table scan on t3
#Text=(cost=0.35 rows=1)
#Text=-> Hash
#Text=-> Filter: (t1.c2 < t2.c2)
#Text=(cost=0.70 rows=1)
#Text=-> Inner hash join (t2.c1 = t1.c1)
#Text=(cost=0.70 rows=1)
#Text=-> Table scan on t2
#Text=(cost=0.35 rows=1)
#Text=-> Hash
#Text=-> Table scan on t1
#Text=(cost=0.35 rows=1)
#Text=As also can be seen from the output just shown, multiple hash
#Text=joins can be (and are) used for joins having multiple
#Text=equi-join conditions.
12-1	8769-8773	This	
12-2	8774-8777	can	
12-3	8778-8780	be	
12-4	8781-8785	seen	
12-5	8786-8790	here	
12-6	8791-8793	in	
12-7	8794-8797	the	
12-8	8798-8804	output	
12-9	8805-8807	of	
12-10	8808-8815	EXPLAIN	
12-11	8815-8816	:	
12-12	8817-8822	mysql	
12-13	8822-8823	>	
12-14	8824-8831	EXPLAIN	
12-15	8832-8838	FORMAT	
12-16	8838-8839	=	
12-17	8839-8843	TREE	
12-18	8844-8845	-	
12-19	8845-8846	>	
12-20	8847-8853	SELECT	
12-21	8854-8855	*	
12-22	8856-8860	FROM	
12-23	8861-8863	t1	
12-24	8864-8868	JOIN	
12-25	8869-8871	t2	
12-26	8872-8874	ON	
12-27	8875-8876	(	
12-28	8876-8878	t1	
12-29	8878-8879	.	
12-30	8879-8881	c1	
12-31	8882-8883	=	
12-32	8884-8886	t2	
12-33	8886-8887	.	
12-34	8887-8889	c1	
12-35	8890-8893	AND	
12-36	8894-8896	t1	
12-37	8896-8897	.	
12-38	8897-8899	c2	
12-39	8900-8901	<	
12-40	8902-8904	t2	
12-41	8904-8905	.	
12-42	8905-8907	c2	
12-43	8907-8908	)	
12-44	8909-8913	JOIN	
12-45	8914-8916	t3	
12-46	8917-8919	ON	
12-47	8920-8921	(	
12-48	8921-8923	t2	
12-49	8923-8924	.	
12-50	8924-8926	c1	
12-51	8927-8928	=	
12-52	8929-8931	t3	
12-53	8931-8932	.	
12-54	8932-8934	c1	
12-55	8934-8935	)	
12-56	8935-8936	\	
12-57	8936-8937	G	
12-58	8938-8939	*	
12-59	8939-8940	*	
12-60	8940-8941	*	
12-61	8941-8942	*	
12-62	8942-8943	*	
12-63	8943-8944	*	
12-64	8944-8945	*	
12-65	8945-8946	*	
12-66	8946-8947	*	
12-67	8947-8948	*	
12-68	8948-8949	*	
12-69	8949-8950	*	
12-70	8950-8951	*	
12-71	8951-8952	*	
12-72	8952-8953	*	
12-73	8953-8954	*	
12-74	8954-8955	*	
12-75	8955-8956	*	
12-76	8956-8957	*	
12-77	8957-8958	*	
12-78	8958-8959	*	
12-79	8959-8960	*	
12-80	8960-8961	*	
12-81	8961-8962	*	
12-82	8962-8963	*	
12-83	8963-8964	*	
12-84	8964-8965	*	
12-85	8966-8967	1	
12-86	8967-8968	.	
12-87	8969-8972	row	
12-88	8973-8974	*	
12-89	8974-8975	*	
12-90	8975-8976	*	
12-91	8976-8977	*	
12-92	8977-8978	*	
12-93	8978-8979	*	
12-94	8979-8980	*	
12-95	8980-8981	*	
12-96	8981-8982	*	
12-97	8982-8983	*	
12-98	8983-8984	*	
12-99	8984-8985	*	
12-100	8985-8986	*	
12-101	8986-8987	*	
12-102	8987-8988	*	
12-103	8988-8989	*	
12-104	8989-8990	*	
12-105	8990-8991	*	
12-106	8991-8992	*	
12-107	8992-8993	*	
12-108	8993-8994	*	
12-109	8994-8995	*	
12-110	8995-8996	*	
12-111	8996-8997	*	
12-112	8997-8998	*	
12-113	8998-8999	*	
12-114	8999-9000	*	
12-115	9001-9008	EXPLAIN	
12-116	9008-9009	:	
12-117	9010-9011	-	
12-118	9011-9012	>	
12-119	9013-9018	Inner	
12-120	9019-9023	hash	
12-121	9024-9028	join	
12-122	9029-9030	(	
12-123	9030-9032	t3	
12-124	9032-9033	.	
12-125	9033-9035	c1	
12-126	9036-9037	=	
12-127	9038-9040	t1	
12-128	9040-9041	.	
12-129	9041-9043	c1	
12-130	9043-9044	)	
12-131	9045-9046	(	
12-132	9046-9050	cost	
12-133	9050-9051	=	
12-134	9051-9055	1.05	
12-135	9056-9060	rows	
12-136	9060-9061	=	
12-137	9061-9062	1	
12-138	9062-9063	)	
12-139	9064-9065	-	
12-140	9065-9066	>	
12-141	9067-9072	Table	
12-142	9073-9077	scan	
12-143	9078-9080	on	
12-144	9081-9083	t3	
12-145	9084-9085	(	
12-146	9085-9089	cost	
12-147	9089-9090	=	
12-148	9090-9094	0.35	
12-149	9095-9099	rows	
12-150	9099-9100	=	
12-151	9100-9101	1	
12-152	9101-9102	)	
12-153	9103-9104	-	
12-154	9104-9105	>	
12-155	9106-9110	Hash	
12-156	9111-9112	-	
12-157	9112-9113	>	
12-158	9114-9120	Filter	
12-159	9120-9121	:	
12-160	9122-9123	(	
12-161	9123-9125	t1	
12-162	9125-9126	.	
12-163	9126-9128	c2	
12-164	9129-9130	<	
12-165	9131-9133	t2	
12-166	9133-9134	.	
12-167	9134-9136	c2	
12-168	9136-9137	)	
12-169	9138-9139	(	
12-170	9139-9143	cost	
12-171	9143-9144	=	
12-172	9144-9148	0.70	
12-173	9149-9153	rows	
12-174	9153-9154	=	
12-175	9154-9155	1	
12-176	9155-9156	)	
12-177	9157-9158	-	
12-178	9158-9159	>	
12-179	9160-9165	Inner	
12-180	9166-9170	hash	
12-181	9171-9175	join	
12-182	9176-9177	(	
12-183	9177-9179	t2	
12-184	9179-9180	.	
12-185	9180-9182	c1	
12-186	9183-9184	=	
12-187	9185-9187	t1	
12-188	9187-9188	.	
12-189	9188-9190	c1	
12-190	9190-9191	)	
12-191	9192-9193	(	
12-192	9193-9197	cost	
12-193	9197-9198	=	
12-194	9198-9202	0.70	
12-195	9203-9207	rows	
12-196	9207-9208	=	
12-197	9208-9209	1	
12-198	9209-9210	)	
12-199	9211-9212	-	
12-200	9212-9213	>	
12-201	9214-9219	Table	
12-202	9220-9224	scan	
12-203	9225-9227	on	
12-204	9228-9230	t2	
12-205	9231-9232	(	
12-206	9232-9236	cost	
12-207	9236-9237	=	
12-208	9237-9241	0.35	
12-209	9242-9246	rows	
12-210	9246-9247	=	
12-211	9247-9248	1	
12-212	9248-9249	)	
12-213	9250-9251	-	
12-214	9251-9252	>	
12-215	9253-9257	Hash	
12-216	9258-9259	-	
12-217	9259-9260	>	
12-218	9261-9266	Table	
12-219	9267-9271	scan	
12-220	9272-9274	on	
12-221	9275-9277	t1	
12-222	9278-9279	(	
12-223	9279-9283	cost	
12-224	9283-9284	=	
12-225	9284-9288	0.35	
12-226	9289-9293	rows	
12-227	9293-9294	=	
12-228	9294-9295	1	
12-229	9295-9296	)	
12-230	9297-9299	As	
12-231	9300-9304	also	
12-232	9305-9308	can	
12-233	9309-9311	be	
12-234	9312-9316	seen	
12-235	9317-9321	from	
12-236	9322-9325	the	
12-237	9326-9332	output	
12-238	9333-9337	just	
12-239	9338-9343	shown	
12-240	9343-9344	,	
12-241	9345-9353	multiple	
12-242	9354-9358	hash	
12-243	9359-9364	joins	
12-244	9365-9368	can	
12-245	9369-9371	be	
12-246	9372-9373	(	
12-247	9373-9376	and	
12-248	9377-9380	are	
12-249	9380-9381	)	
12-250	9382-9386	used	
12-251	9387-9390	for	
12-252	9391-9396	joins	
12-253	9397-9403	having	
12-254	9404-9412	multiple	
12-255	9413-9422	equi-join	
12-256	9423-9433	conditions	
12-257	9433-9434	.	

#Text=Prior to MySQL 8.0.20, a hash join could not be used if any
#Text=pair of joined tables did not have at least one equi-join
#Text=condition, and the slower block nested loop algorithm was
#Text=employed.
13-1	9435-9440	Prior	
13-2	9441-9443	to	
13-3	9444-9449	MySQL	
13-4	9450-9456	8.0.20	
13-5	9456-9457	,	
13-6	9458-9459	a	
13-7	9460-9464	hash	
13-8	9465-9469	join	
13-9	9470-9475	could	
13-10	9476-9479	not	
13-11	9480-9482	be	
13-12	9483-9487	used	
13-13	9488-9490	if	
13-14	9491-9494	any	
13-15	9495-9499	pair	
13-16	9500-9502	of	
13-17	9503-9509	joined	
13-18	9510-9516	tables	
13-19	9517-9520	did	
13-20	9521-9524	not	
13-21	9525-9529	have	
13-22	9530-9532	at	
13-23	9533-9538	least	
13-24	9539-9542	one	
13-25	9543-9552	equi-join	
13-26	9553-9562	condition	
13-27	9562-9563	,	
13-28	9564-9567	and	
13-29	9568-9571	the	
13-30	9572-9578	slower	
13-31	9579-9584	block	
13-32	9585-9591	nested	
13-33	9592-9596	loop	
13-34	9597-9606	algorithm	
13-35	9607-9610	was	
13-36	9611-9619	employed	
13-37	9619-9620	.	

#Text=In MySQL 8.0.20 and later, the hash join is used in
#Text=such cases, as shown here:
#Text=mysql> EXPLAIN FORMAT=TREE
#Text=-> SELECT * FROM t1
#Text=JOIN t2 ON (t1.c1 = t2.c1)
#Text=JOIN t3 ON (t2.c1 < t3.c1)\\G
#Text=*************************** 1. row ***************************
#Text=EXPLAIN: -> Filter: (t1.c1 < t3.c1)
#Text=(cost=1.05 rows=1)
#Text=-> Inner hash join (no condition)
#Text=(cost=1.05 rows=1)
#Text=-> Table scan on t3
#Text=(cost=0.35 rows=1)
#Text=-> Hash
#Text=-> Inner hash join (t2.c1 = t1.c1)
#Text=(cost=0.70 rows=1)
#Text=-> Table scan on t2
#Text=(cost=0.35 rows=1)
#Text=-> Hash
#Text=-> Table scan on t1
#Text=(cost=0.35 rows=1)
#Text=(Additional examples are provided later in this section.)
14-1	9621-9623	In	
14-2	9624-9629	MySQL	
14-3	9630-9636	8.0.20	
14-4	9637-9640	and	
14-5	9641-9646	later	
14-6	9646-9647	,	
14-7	9648-9651	the	
14-8	9652-9656	hash	
14-9	9657-9661	join	
14-10	9662-9664	is	
14-11	9665-9669	used	
14-12	9670-9672	in	
14-13	9673-9677	such	
14-14	9678-9683	cases	
14-15	9683-9684	,	
14-16	9685-9687	as	
14-17	9688-9693	shown	
14-18	9694-9698	here	
14-19	9698-9699	:	
14-20	9700-9705	mysql	
14-21	9705-9706	>	
14-22	9707-9714	EXPLAIN	
14-23	9715-9721	FORMAT	
14-24	9721-9722	=	
14-25	9722-9726	TREE	
14-26	9727-9728	-	
14-27	9728-9729	>	
14-28	9730-9736	SELECT	
14-29	9737-9738	*	
14-30	9739-9743	FROM	
14-31	9744-9746	t1	
14-32	9747-9751	JOIN	
14-33	9752-9754	t2	
14-34	9755-9757	ON	
14-35	9758-9759	(	
14-36	9759-9761	t1	
14-37	9761-9762	.	
14-38	9762-9764	c1	
14-39	9765-9766	=	
14-40	9767-9769	t2	
14-41	9769-9770	.	
14-42	9770-9772	c1	
14-43	9772-9773	)	
14-44	9774-9778	JOIN	
14-45	9779-9781	t3	
14-46	9782-9784	ON	
14-47	9785-9786	(	
14-48	9786-9788	t2	
14-49	9788-9789	.	
14-50	9789-9791	c1	
14-51	9792-9793	<	
14-52	9794-9796	t3	
14-53	9796-9797	.	
14-54	9797-9799	c1	
14-55	9799-9800	)	
14-56	9800-9801	\	
14-57	9801-9802	G	
14-58	9803-9804	*	
14-59	9804-9805	*	
14-60	9805-9806	*	
14-61	9806-9807	*	
14-62	9807-9808	*	
14-63	9808-9809	*	
14-64	9809-9810	*	
14-65	9810-9811	*	
14-66	9811-9812	*	
14-67	9812-9813	*	
14-68	9813-9814	*	
14-69	9814-9815	*	
14-70	9815-9816	*	
14-71	9816-9817	*	
14-72	9817-9818	*	
14-73	9818-9819	*	
14-74	9819-9820	*	
14-75	9820-9821	*	
14-76	9821-9822	*	
14-77	9822-9823	*	
14-78	9823-9824	*	
14-79	9824-9825	*	
14-80	9825-9826	*	
14-81	9826-9827	*	
14-82	9827-9828	*	
14-83	9828-9829	*	
14-84	9829-9830	*	
14-85	9831-9832	1	
14-86	9832-9833	.	
14-87	9834-9837	row	
14-88	9838-9839	*	
14-89	9839-9840	*	
14-90	9840-9841	*	
14-91	9841-9842	*	
14-92	9842-9843	*	
14-93	9843-9844	*	
14-94	9844-9845	*	
14-95	9845-9846	*	
14-96	9846-9847	*	
14-97	9847-9848	*	
14-98	9848-9849	*	
14-99	9849-9850	*	
14-100	9850-9851	*	
14-101	9851-9852	*	
14-102	9852-9853	*	
14-103	9853-9854	*	
14-104	9854-9855	*	
14-105	9855-9856	*	
14-106	9856-9857	*	
14-107	9857-9858	*	
14-108	9858-9859	*	
14-109	9859-9860	*	
14-110	9860-9861	*	
14-111	9861-9862	*	
14-112	9862-9863	*	
14-113	9863-9864	*	
14-114	9864-9865	*	
14-115	9866-9873	EXPLAIN	
14-116	9873-9874	:	
14-117	9875-9876	-	
14-118	9876-9877	>	
14-119	9878-9884	Filter	
14-120	9884-9885	:	
14-121	9886-9887	(	
14-122	9887-9889	t1	
14-123	9889-9890	.	
14-124	9890-9892	c1	
14-125	9893-9894	<	
14-126	9895-9897	t3	
14-127	9897-9898	.	
14-128	9898-9900	c1	
14-129	9900-9901	)	
14-130	9902-9903	(	
14-131	9903-9907	cost	
14-132	9907-9908	=	
14-133	9908-9912	1.05	
14-134	9913-9917	rows	
14-135	9917-9918	=	
14-136	9918-9919	1	
14-137	9919-9920	)	
14-138	9921-9922	-	
14-139	9922-9923	>	
14-140	9924-9929	Inner	
14-141	9930-9934	hash	
14-142	9935-9939	join	
14-143	9940-9941	(	
14-144	9941-9943	no	
14-145	9944-9953	condition	
14-146	9953-9954	)	
14-147	9955-9956	(	
14-148	9956-9960	cost	
14-149	9960-9961	=	
14-150	9961-9965	1.05	
14-151	9966-9970	rows	
14-152	9970-9971	=	
14-153	9971-9972	1	
14-154	9972-9973	)	
14-155	9974-9975	-	
14-156	9975-9976	>	
14-157	9977-9982	Table	
14-158	9983-9987	scan	
14-159	9988-9990	on	
14-160	9991-9993	t3	
14-161	9994-9995	(	
14-162	9995-9999	cost	
14-163	9999-10000	=	
14-164	10000-10004	0.35	
14-165	10005-10009	rows	
14-166	10009-10010	=	
14-167	10010-10011	1	
14-168	10011-10012	)	
14-169	10013-10014	-	
14-170	10014-10015	>	
14-171	10016-10020	Hash	
14-172	10021-10022	-	
14-173	10022-10023	>	
14-174	10024-10029	Inner	
14-175	10030-10034	hash	
14-176	10035-10039	join	
14-177	10040-10041	(	
14-178	10041-10043	t2	
14-179	10043-10044	.	
14-180	10044-10046	c1	
14-181	10047-10048	=	
14-182	10049-10051	t1	
14-183	10051-10052	.	
14-184	10052-10054	c1	
14-185	10054-10055	)	
14-186	10056-10057	(	
14-187	10057-10061	cost	
14-188	10061-10062	=	
14-189	10062-10066	0.70	
14-190	10067-10071	rows	
14-191	10071-10072	=	
14-192	10072-10073	1	
14-193	10073-10074	)	
14-194	10075-10076	-	
14-195	10076-10077	>	
14-196	10078-10083	Table	
14-197	10084-10088	scan	
14-198	10089-10091	on	
14-199	10092-10094	t2	
14-200	10095-10096	(	
14-201	10096-10100	cost	
14-202	10100-10101	=	
14-203	10101-10105	0.35	
14-204	10106-10110	rows	
14-205	10110-10111	=	
14-206	10111-10112	1	
14-207	10112-10113	)	
14-208	10114-10115	-	
14-209	10115-10116	>	
14-210	10117-10121	Hash	
14-211	10122-10123	-	
14-212	10123-10124	>	
14-213	10125-10130	Table	
14-214	10131-10135	scan	
14-215	10136-10138	on	
14-216	10139-10141	t1	
14-217	10142-10143	(	
14-218	10143-10147	cost	
14-219	10147-10148	=	
14-220	10148-10152	0.35	
14-221	10153-10157	rows	
14-222	10157-10158	=	
14-223	10158-10159	1	
14-224	10159-10160	)	
14-225	10161-10162	(	
14-226	10162-10172	Additional	
14-227	10173-10181	examples	
14-228	10182-10185	are	
14-229	10186-10194	provided	
14-230	10195-10200	later	
14-231	10201-10203	in	
14-232	10204-10208	this	
14-233	10209-10216	section	
14-234	10216-10217	.	
14-235	10217-10218	)	

#Text=A hash join is also applied for a Cartesian product—that
#Text=is, when no join condition is specified, as shown here:
#Text=mysql> EXPLAIN FORMAT=TREE
#Text=-> SELECT *
#Text=FROM t1
#Text=JOIN t2
#Text=WHERE t1.c2 > 50\\G
#Text=*************************** 1. row ***************************
#Text=EXPLAIN: -> Inner hash join
#Text=(cost=0.70 rows=1)
#Text=-> Table scan on t2
#Text=(cost=0.35 rows=1)
#Text=-> Hash
#Text=-> Filter: (t1.c2 > 50)
#Text=(cost=0.35 rows=1)
#Text=-> Table scan on t1
#Text=(cost=0.35 rows=1)
#Text=In MySQL 8.0.20 and later, it is no longer necessary for the
#Text=join to contain at least one equi-join condition in order for
#Text=a hash join to be used.
15-1	10219-10220	A	
15-2	10221-10225	hash	
15-3	10226-10230	join	
15-4	10231-10233	is	
15-5	10234-10238	also	
15-6	10239-10246	applied	
15-7	10247-10250	for	
15-8	10251-10252	a	
15-9	10253-10262	Cartesian	
15-10	10263-10275	product—that	
15-11	10276-10278	is	
15-12	10278-10279	,	
15-13	10280-10284	when	
15-14	10285-10287	no	
15-15	10288-10292	join	
15-16	10293-10302	condition	
15-17	10303-10305	is	
15-18	10306-10315	specified	
15-19	10315-10316	,	
15-20	10317-10319	as	
15-21	10320-10325	shown	
15-22	10326-10330	here	
15-23	10330-10331	:	
15-24	10332-10337	mysql	
15-25	10337-10338	>	
15-26	10339-10346	EXPLAIN	
15-27	10347-10353	FORMAT	
15-28	10353-10354	=	
15-29	10354-10358	TREE	
15-30	10359-10360	-	
15-31	10360-10361	>	
15-32	10362-10368	SELECT	
15-33	10369-10370	*	
15-34	10371-10375	FROM	
15-35	10376-10378	t1	
15-36	10379-10383	JOIN	
15-37	10384-10386	t2	
15-38	10387-10392	WHERE	
15-39	10393-10395	t1	
15-40	10395-10396	.	
15-41	10396-10398	c2	
15-42	10399-10400	>	
15-43	10401-10403	50	
15-44	10403-10404	\	
15-45	10404-10405	G	
15-46	10406-10407	*	
15-47	10407-10408	*	
15-48	10408-10409	*	
15-49	10409-10410	*	
15-50	10410-10411	*	
15-51	10411-10412	*	
15-52	10412-10413	*	
15-53	10413-10414	*	
15-54	10414-10415	*	
15-55	10415-10416	*	
15-56	10416-10417	*	
15-57	10417-10418	*	
15-58	10418-10419	*	
15-59	10419-10420	*	
15-60	10420-10421	*	
15-61	10421-10422	*	
15-62	10422-10423	*	
15-63	10423-10424	*	
15-64	10424-10425	*	
15-65	10425-10426	*	
15-66	10426-10427	*	
15-67	10427-10428	*	
15-68	10428-10429	*	
15-69	10429-10430	*	
15-70	10430-10431	*	
15-71	10431-10432	*	
15-72	10432-10433	*	
15-73	10434-10435	1	
15-74	10435-10436	.	
15-75	10437-10440	row	
15-76	10441-10442	*	
15-77	10442-10443	*	
15-78	10443-10444	*	
15-79	10444-10445	*	
15-80	10445-10446	*	
15-81	10446-10447	*	
15-82	10447-10448	*	
15-83	10448-10449	*	
15-84	10449-10450	*	
15-85	10450-10451	*	
15-86	10451-10452	*	
15-87	10452-10453	*	
15-88	10453-10454	*	
15-89	10454-10455	*	
15-90	10455-10456	*	
15-91	10456-10457	*	
15-92	10457-10458	*	
15-93	10458-10459	*	
15-94	10459-10460	*	
15-95	10460-10461	*	
15-96	10461-10462	*	
15-97	10462-10463	*	
15-98	10463-10464	*	
15-99	10464-10465	*	
15-100	10465-10466	*	
15-101	10466-10467	*	
15-102	10467-10468	*	
15-103	10469-10476	EXPLAIN	
15-104	10476-10477	:	
15-105	10478-10479	-	
15-106	10479-10480	>	
15-107	10481-10486	Inner	
15-108	10487-10491	hash	
15-109	10492-10496	join	
15-110	10497-10498	(	
15-111	10498-10502	cost	
15-112	10502-10503	=	
15-113	10503-10507	0.70	
15-114	10508-10512	rows	
15-115	10512-10513	=	
15-116	10513-10514	1	
15-117	10514-10515	)	
15-118	10516-10517	-	
15-119	10517-10518	>	
15-120	10519-10524	Table	
15-121	10525-10529	scan	
15-122	10530-10532	on	
15-123	10533-10535	t2	
15-124	10536-10537	(	
15-125	10537-10541	cost	
15-126	10541-10542	=	
15-127	10542-10546	0.35	
15-128	10547-10551	rows	
15-129	10551-10552	=	
15-130	10552-10553	1	
15-131	10553-10554	)	
15-132	10555-10556	-	
15-133	10556-10557	>	
15-134	10558-10562	Hash	
15-135	10563-10564	-	
15-136	10564-10565	>	
15-137	10566-10572	Filter	
15-138	10572-10573	:	
15-139	10574-10575	(	
15-140	10575-10577	t1	
15-141	10577-10578	.	
15-142	10578-10580	c2	
15-143	10581-10582	>	
15-144	10583-10585	50	
15-145	10585-10586	)	
15-146	10587-10588	(	
15-147	10588-10592	cost	
15-148	10592-10593	=	
15-149	10593-10597	0.35	
15-150	10598-10602	rows	
15-151	10602-10603	=	
15-152	10603-10604	1	
15-153	10604-10605	)	
15-154	10606-10607	-	
15-155	10607-10608	>	
15-156	10609-10614	Table	
15-157	10615-10619	scan	
15-158	10620-10622	on	
15-159	10623-10625	t1	
15-160	10626-10627	(	
15-161	10627-10631	cost	
15-162	10631-10632	=	
15-163	10632-10636	0.35	
15-164	10637-10641	rows	
15-165	10641-10642	=	
15-166	10642-10643	1	
15-167	10643-10644	)	
15-168	10645-10647	In	
15-169	10648-10653	MySQL	
15-170	10654-10660	8.0.20	
15-171	10661-10664	and	
15-172	10665-10670	later	
15-173	10670-10671	,	
15-174	10672-10674	it	
15-175	10675-10677	is	
15-176	10678-10680	no	
15-177	10681-10687	longer	
15-178	10688-10697	necessary	
15-179	10698-10701	for	
15-180	10702-10705	the	
15-181	10706-10710	join	
15-182	10711-10713	to	
15-183	10714-10721	contain	
15-184	10722-10724	at	
15-185	10725-10730	least	
15-186	10731-10734	one	
15-187	10735-10744	equi-join	
15-188	10745-10754	condition	
15-189	10755-10757	in	
15-190	10758-10763	order	
15-191	10764-10767	for	
15-192	10768-10769	a	
15-193	10770-10774	hash	
15-194	10775-10779	join	
15-195	10780-10782	to	
15-196	10783-10785	be	
15-197	10786-10790	used	
15-198	10790-10791	.	

#Text=This means that the types of queries
#Text=which can be optimized using hash joins include those in the
#Text=following list (with examples):
#Text=Inner non-equi-join:
#Text=mysql> EXPLAIN FORMAT=TREE SELECT * FROM t1 JOIN t2 ON t1.c1 < t2.c1\\G
#Text=*************************** 1. row ***************************
#Text=EXPLAIN: -> Filter: (t1.c1 < t2.c1)
#Text=(cost=4.70 rows=12)
#Text=-> Inner hash join (no condition)
#Text=(cost=4.70 rows=12)
#Text=-> Table scan on t2
#Text=(cost=0.08 rows=6)
#Text=-> Hash
#Text=-> Table scan on t1
#Text=(cost=0.85 rows=6)
#Text=Semijoin:
#Text=mysql> EXPLAIN FORMAT=TREE SELECT * FROM t1
#Text=WHERE t1.c1 IN (SELECT t2.c2 FROM t2)\\G
#Text=*************************** 1. row ***************************
#Text=EXPLAIN: -> Nested loop inner join
#Text=-> Filter: (t1.c1 is not null)
#Text=(cost=0.85 rows=6)
#Text=-> Table scan on t1
#Text=(cost=0.85 rows=6)
#Text=-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c2=t1.c1)
#Text=-> Materialize with deduplication
#Text=-> Filter: (t2.c2 is not null)
#Text=(cost=0.85 rows=6)
#Text=-> Table scan on t2
#Text=(cost=0.85 rows=6)
#Text=Antijoin:
#Text=mysql> EXPLAIN FORMAT=TREE SELECT * FROM t2
#Text=WHERE NOT EXISTS (SELECT * FROM t1 WHERE t1.col1 = t2.col1)\\G
#Text=*************************** 1. row ***************************
#Text=EXPLAIN: -> Nested loop antijoin
#Text=-> Table scan on t2
#Text=(cost=0.85 rows=6)
#Text=-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1)
#Text=-> Materialize with deduplication
#Text=-> Filter: (t1.c1 is not null)
#Text=(cost=0.85 rows=6)
#Text=-> Table scan on t1
#Text=(cost=0.85 rows=6)
#Text=Left outer join:
#Text=mysql> EXPLAIN FORMAT=TREE SELECT * FROM t1 LEFT JOIN t2 ON t1.c1 = t2.c1\\G
#Text=*************************** 1. row ***************************
#Text=EXPLAIN: -> Left hash join (t2.c1 = t1.c1)
#Text=(cost=3.99 rows=36)
#Text=-> Table scan on t1
#Text=(cost=0.85 rows=6)
#Text=-> Hash
#Text=-> Table scan on t2
#Text=(cost=0.14 rows=6)
#Text=Right outer join (observe that MySQL
#Text=rewrites all right outer joins as left outer joins):
#Text=mysql> EXPLAIN FORMAT=TREE SELECT * FROM t1 RIGHT JOIN t2 ON t1.c1 = t2.c1\\G
#Text=*************************** 1. row ***************************
#Text=EXPLAIN: -> Left hash join (t1.c1 = t2.c1)
#Text=(cost=3.99 rows=36)
#Text=-> Table scan on t2
#Text=(cost=0.85 rows=6)
#Text=-> Hash
#Text=-> Table scan on t1
#Text=(cost=0.14 rows=6)
#Text=By default, MySQL 8.0.18 and later employs hash joins whenever
#Text=possible.
16-1	10792-10796	This	
16-2	10797-10802	means	
16-3	10803-10807	that	
16-4	10808-10811	the	
16-5	10812-10817	types	
16-6	10818-10820	of	
16-7	10821-10828	queries	
16-8	10829-10834	which	
16-9	10835-10838	can	
16-10	10839-10841	be	
16-11	10842-10851	optimized	
16-12	10852-10857	using	
16-13	10858-10862	hash	
16-14	10863-10868	joins	
16-15	10869-10876	include	
16-16	10877-10882	those	
16-17	10883-10885	in	
16-18	10886-10889	the	
16-19	10890-10899	following	
16-20	10900-10904	list	
16-21	10905-10906	(	
16-22	10906-10910	with	
16-23	10911-10919	examples	
16-24	10919-10920	)	
16-25	10920-10921	:	
16-26	10922-10927	Inner	
16-27	10928-10941	non-equi-join	
16-28	10941-10942	:	
16-29	10943-10948	mysql	
16-30	10948-10949	>	
16-31	10950-10957	EXPLAIN	
16-32	10958-10964	FORMAT	
16-33	10964-10965	=	
16-34	10965-10969	TREE	
16-35	10970-10976	SELECT	
16-36	10977-10978	*	
16-37	10979-10983	FROM	
16-38	10984-10986	t1	
16-39	10987-10991	JOIN	
16-40	10992-10994	t2	
16-41	10995-10997	ON	
16-42	10998-11000	t1	
16-43	11000-11001	.	
16-44	11001-11003	c1	
16-45	11004-11005	<	
16-46	11006-11008	t2	
16-47	11008-11009	.	
16-48	11009-11011	c1	
16-49	11011-11012	\	
16-50	11012-11013	G	
16-51	11014-11015	*	
16-52	11015-11016	*	
16-53	11016-11017	*	
16-54	11017-11018	*	
16-55	11018-11019	*	
16-56	11019-11020	*	
16-57	11020-11021	*	
16-58	11021-11022	*	
16-59	11022-11023	*	
16-60	11023-11024	*	
16-61	11024-11025	*	
16-62	11025-11026	*	
16-63	11026-11027	*	
16-64	11027-11028	*	
16-65	11028-11029	*	
16-66	11029-11030	*	
16-67	11030-11031	*	
16-68	11031-11032	*	
16-69	11032-11033	*	
16-70	11033-11034	*	
16-71	11034-11035	*	
16-72	11035-11036	*	
16-73	11036-11037	*	
16-74	11037-11038	*	
16-75	11038-11039	*	
16-76	11039-11040	*	
16-77	11040-11041	*	
16-78	11042-11043	1	
16-79	11043-11044	.	
16-80	11045-11048	row	
16-81	11049-11050	*	
16-82	11050-11051	*	
16-83	11051-11052	*	
16-84	11052-11053	*	
16-85	11053-11054	*	
16-86	11054-11055	*	
16-87	11055-11056	*	
16-88	11056-11057	*	
16-89	11057-11058	*	
16-90	11058-11059	*	
16-91	11059-11060	*	
16-92	11060-11061	*	
16-93	11061-11062	*	
16-94	11062-11063	*	
16-95	11063-11064	*	
16-96	11064-11065	*	
16-97	11065-11066	*	
16-98	11066-11067	*	
16-99	11067-11068	*	
16-100	11068-11069	*	
16-101	11069-11070	*	
16-102	11070-11071	*	
16-103	11071-11072	*	
16-104	11072-11073	*	
16-105	11073-11074	*	
16-106	11074-11075	*	
16-107	11075-11076	*	
16-108	11077-11084	EXPLAIN	
16-109	11084-11085	:	
16-110	11086-11087	-	
16-111	11087-11088	>	
16-112	11089-11095	Filter	
16-113	11095-11096	:	
16-114	11097-11098	(	
16-115	11098-11100	t1	
16-116	11100-11101	.	
16-117	11101-11103	c1	
16-118	11104-11105	<	
16-119	11106-11108	t2	
16-120	11108-11109	.	
16-121	11109-11111	c1	
16-122	11111-11112	)	
16-123	11113-11114	(	
16-124	11114-11118	cost	
16-125	11118-11119	=	
16-126	11119-11123	4.70	
16-127	11124-11128	rows	
16-128	11128-11129	=	
16-129	11129-11131	12	
16-130	11131-11132	)	
16-131	11133-11134	-	
16-132	11134-11135	>	
16-133	11136-11141	Inner	
16-134	11142-11146	hash	
16-135	11147-11151	join	
16-136	11152-11153	(	
16-137	11153-11155	no	
16-138	11156-11165	condition	
16-139	11165-11166	)	
16-140	11167-11168	(	
16-141	11168-11172	cost	
16-142	11172-11173	=	
16-143	11173-11177	4.70	
16-144	11178-11182	rows	
16-145	11182-11183	=	
16-146	11183-11185	12	
16-147	11185-11186	)	
16-148	11187-11188	-	
16-149	11188-11189	>	
16-150	11190-11195	Table	
16-151	11196-11200	scan	
16-152	11201-11203	on	
16-153	11204-11206	t2	
16-154	11207-11208	(	
16-155	11208-11212	cost	
16-156	11212-11213	=	
16-157	11213-11217	0.08	
16-158	11218-11222	rows	
16-159	11222-11223	=	
16-160	11223-11224	6	
16-161	11224-11225	)	
16-162	11226-11227	-	
16-163	11227-11228	>	
16-164	11229-11233	Hash	
16-165	11234-11235	-	
16-166	11235-11236	>	
16-167	11237-11242	Table	
16-168	11243-11247	scan	
16-169	11248-11250	on	
16-170	11251-11253	t1	
16-171	11254-11255	(	
16-172	11255-11259	cost	
16-173	11259-11260	=	
16-174	11260-11264	0.85	
16-175	11265-11269	rows	
16-176	11269-11270	=	
16-177	11270-11271	6	
16-178	11271-11272	)	
16-179	11273-11281	Semijoin	
16-180	11281-11282	:	
16-181	11283-11288	mysql	
16-182	11288-11289	>	
16-183	11290-11297	EXPLAIN	
16-184	11298-11304	FORMAT	
16-185	11304-11305	=	
16-186	11305-11309	TREE	
16-187	11310-11316	SELECT	
16-188	11317-11318	*	
16-189	11319-11323	FROM	
16-190	11324-11326	t1	
16-191	11327-11332	WHERE	
16-192	11333-11335	t1	
16-193	11335-11336	.	
16-194	11336-11338	c1	
16-195	11339-11341	IN	
16-196	11342-11343	(	
16-197	11343-11349	SELECT	
16-198	11350-11352	t2	
16-199	11352-11353	.	
16-200	11353-11355	c2	
16-201	11356-11360	FROM	
16-202	11361-11363	t2	
16-203	11363-11364	)	
16-204	11364-11365	\	
16-205	11365-11366	G	
16-206	11367-11368	*	
16-207	11368-11369	*	
16-208	11369-11370	*	
16-209	11370-11371	*	
16-210	11371-11372	*	
16-211	11372-11373	*	
16-212	11373-11374	*	
16-213	11374-11375	*	
16-214	11375-11376	*	
16-215	11376-11377	*	
16-216	11377-11378	*	
16-217	11378-11379	*	
16-218	11379-11380	*	
16-219	11380-11381	*	
16-220	11381-11382	*	
16-221	11382-11383	*	
16-222	11383-11384	*	
16-223	11384-11385	*	
16-224	11385-11386	*	
16-225	11386-11387	*	
16-226	11387-11388	*	
16-227	11388-11389	*	
16-228	11389-11390	*	
16-229	11390-11391	*	
16-230	11391-11392	*	
16-231	11392-11393	*	
16-232	11393-11394	*	
16-233	11395-11396	1	
16-234	11396-11397	.	
16-235	11398-11401	row	
16-236	11402-11403	*	
16-237	11403-11404	*	
16-238	11404-11405	*	
16-239	11405-11406	*	
16-240	11406-11407	*	
16-241	11407-11408	*	
16-242	11408-11409	*	
16-243	11409-11410	*	
16-244	11410-11411	*	
16-245	11411-11412	*	
16-246	11412-11413	*	
16-247	11413-11414	*	
16-248	11414-11415	*	
16-249	11415-11416	*	
16-250	11416-11417	*	
16-251	11417-11418	*	
16-252	11418-11419	*	
16-253	11419-11420	*	
16-254	11420-11421	*	
16-255	11421-11422	*	
16-256	11422-11423	*	
16-257	11423-11424	*	
16-258	11424-11425	*	
16-259	11425-11426	*	
16-260	11426-11427	*	
16-261	11427-11428	*	
16-262	11428-11429	*	
16-263	11430-11437	EXPLAIN	
16-264	11437-11438	:	
16-265	11439-11440	-	
16-266	11440-11441	>	
16-267	11442-11448	Nested	
16-268	11449-11453	loop	
16-269	11454-11459	inner	
16-270	11460-11464	join	
16-271	11465-11466	-	
16-272	11466-11467	>	
16-273	11468-11474	Filter	
16-274	11474-11475	:	
16-275	11476-11477	(	
16-276	11477-11479	t1	
16-277	11479-11480	.	
16-278	11480-11482	c1	
16-279	11483-11485	is	
16-280	11486-11489	not	
16-281	11490-11494	null	
16-282	11494-11495	)	
16-283	11496-11497	(	
16-284	11497-11501	cost	
16-285	11501-11502	=	
16-286	11502-11506	0.85	
16-287	11507-11511	rows	
16-288	11511-11512	=	
16-289	11512-11513	6	
16-290	11513-11514	)	
16-291	11515-11516	-	
16-292	11516-11517	>	
16-293	11518-11523	Table	
16-294	11524-11528	scan	
16-295	11529-11531	on	
16-296	11532-11534	t1	
16-297	11535-11536	(	
16-298	11536-11540	cost	
16-299	11540-11541	=	
16-300	11541-11545	0.85	
16-301	11546-11550	rows	
16-302	11550-11551	=	
16-303	11551-11552	6	
16-304	11552-11553	)	
16-305	11554-11555	-	
16-306	11555-11556	>	
16-307	11557-11567	Single-row	
16-308	11568-11573	index	
16-309	11574-11580	lookup	
16-310	11581-11583	on	
16-311	11584-11585	<	
16-312	11585-11594	subquery2	
16-313	11594-11595	>	
16-314	11596-11601	using	
16-315	11602-11603	<	
16-316	11603-11620	auto_distinct_key	
16-317	11620-11621	>	
16-318	11622-11623	(	
16-319	11623-11625	c2	
16-320	11625-11626	=	
16-321	11626-11628	t1	
16-322	11628-11629	.	
16-323	11629-11631	c1	
16-324	11631-11632	)	
16-325	11633-11634	-	
16-326	11634-11635	>	
16-327	11636-11647	Materialize	
16-328	11648-11652	with	
16-329	11653-11666	deduplication	
16-330	11667-11668	-	
16-331	11668-11669	>	
16-332	11670-11676	Filter	
16-333	11676-11677	:	
16-334	11678-11679	(	
16-335	11679-11681	t2	
16-336	11681-11682	.	
16-337	11682-11684	c2	
16-338	11685-11687	is	
16-339	11688-11691	not	
16-340	11692-11696	null	
16-341	11696-11697	)	
16-342	11698-11699	(	
16-343	11699-11703	cost	
16-344	11703-11704	=	
16-345	11704-11708	0.85	
16-346	11709-11713	rows	
16-347	11713-11714	=	
16-348	11714-11715	6	
16-349	11715-11716	)	
16-350	11717-11718	-	
16-351	11718-11719	>	
16-352	11720-11725	Table	
16-353	11726-11730	scan	
16-354	11731-11733	on	
16-355	11734-11736	t2	
16-356	11737-11738	(	
16-357	11738-11742	cost	
16-358	11742-11743	=	
16-359	11743-11747	0.85	
16-360	11748-11752	rows	
16-361	11752-11753	=	
16-362	11753-11754	6	
16-363	11754-11755	)	
16-364	11756-11764	Antijoin	
16-365	11764-11765	:	
16-366	11766-11771	mysql	
16-367	11771-11772	>	
16-368	11773-11780	EXPLAIN	
16-369	11781-11787	FORMAT	
16-370	11787-11788	=	
16-371	11788-11792	TREE	
16-372	11793-11799	SELECT	
16-373	11800-11801	*	
16-374	11802-11806	FROM	
16-375	11807-11809	t2	
16-376	11810-11815	WHERE	
16-377	11816-11819	NOT	
16-378	11820-11826	EXISTS	
16-379	11827-11828	(	
16-380	11828-11834	SELECT	
16-381	11835-11836	*	
16-382	11837-11841	FROM	
16-383	11842-11844	t1	
16-384	11845-11850	WHERE	
16-385	11851-11853	t1	
16-386	11853-11854	.	
16-387	11854-11858	col1	
16-388	11859-11860	=	
16-389	11861-11863	t2	
16-390	11863-11864	.	
16-391	11864-11868	col1	
16-392	11868-11869	)	
16-393	11869-11870	\	
16-394	11870-11871	G	
16-395	11872-11873	*	
16-396	11873-11874	*	
16-397	11874-11875	*	
16-398	11875-11876	*	
16-399	11876-11877	*	
16-400	11877-11878	*	
16-401	11878-11879	*	
16-402	11879-11880	*	
16-403	11880-11881	*	
16-404	11881-11882	*	
16-405	11882-11883	*	
16-406	11883-11884	*	
16-407	11884-11885	*	
16-408	11885-11886	*	
16-409	11886-11887	*	
16-410	11887-11888	*	
16-411	11888-11889	*	
16-412	11889-11890	*	
16-413	11890-11891	*	
16-414	11891-11892	*	
16-415	11892-11893	*	
16-416	11893-11894	*	
16-417	11894-11895	*	
16-418	11895-11896	*	
16-419	11896-11897	*	
16-420	11897-11898	*	
16-421	11898-11899	*	
16-422	11900-11901	1	
16-423	11901-11902	.	
16-424	11903-11906	row	
16-425	11907-11908	*	
16-426	11908-11909	*	
16-427	11909-11910	*	
16-428	11910-11911	*	
16-429	11911-11912	*	
16-430	11912-11913	*	
16-431	11913-11914	*	
16-432	11914-11915	*	
16-433	11915-11916	*	
16-434	11916-11917	*	
16-435	11917-11918	*	
16-436	11918-11919	*	
16-437	11919-11920	*	
16-438	11920-11921	*	
16-439	11921-11922	*	
16-440	11922-11923	*	
16-441	11923-11924	*	
16-442	11924-11925	*	
16-443	11925-11926	*	
16-444	11926-11927	*	
16-445	11927-11928	*	
16-446	11928-11929	*	
16-447	11929-11930	*	
16-448	11930-11931	*	
16-449	11931-11932	*	
16-450	11932-11933	*	
16-451	11933-11934	*	
16-452	11935-11942	EXPLAIN	
16-453	11942-11943	:	
16-454	11944-11945	-	
16-455	11945-11946	>	
16-456	11947-11953	Nested	
16-457	11954-11958	loop	
16-458	11959-11967	antijoin	
16-459	11968-11969	-	
16-460	11969-11970	>	
16-461	11971-11976	Table	
16-462	11977-11981	scan	
16-463	11982-11984	on	
16-464	11985-11987	t2	
16-465	11988-11989	(	
16-466	11989-11993	cost	
16-467	11993-11994	=	
16-468	11994-11998	0.85	
16-469	11999-12003	rows	
16-470	12003-12004	=	
16-471	12004-12005	6	
16-472	12005-12006	)	
16-473	12007-12008	-	
16-474	12008-12009	>	
16-475	12010-12020	Single-row	
16-476	12021-12026	index	
16-477	12027-12033	lookup	
16-478	12034-12036	on	
16-479	12037-12038	<	
16-480	12038-12047	subquery2	
16-481	12047-12048	>	
16-482	12049-12054	using	
16-483	12055-12056	<	
16-484	12056-12073	auto_distinct_key	
16-485	12073-12074	>	
16-486	12075-12076	(	
16-487	12076-12078	c1	
16-488	12078-12079	=	
16-489	12079-12081	t2	
16-490	12081-12082	.	
16-491	12082-12084	c1	
16-492	12084-12085	)	
16-493	12086-12087	-	
16-494	12087-12088	>	
16-495	12089-12100	Materialize	
16-496	12101-12105	with	
16-497	12106-12119	deduplication	
16-498	12120-12121	-	
16-499	12121-12122	>	
16-500	12123-12129	Filter	
16-501	12129-12130	:	
16-502	12131-12132	(	
16-503	12132-12134	t1	
16-504	12134-12135	.	
16-505	12135-12137	c1	
16-506	12138-12140	is	
16-507	12141-12144	not	
16-508	12145-12149	null	
16-509	12149-12150	)	
16-510	12151-12152	(	
16-511	12152-12156	cost	
16-512	12156-12157	=	
16-513	12157-12161	0.85	
16-514	12162-12166	rows	
16-515	12166-12167	=	
16-516	12167-12168	6	
16-517	12168-12169	)	
16-518	12170-12171	-	
16-519	12171-12172	>	
16-520	12173-12178	Table	
16-521	12179-12183	scan	
16-522	12184-12186	on	
16-523	12187-12189	t1	
16-524	12190-12191	(	
16-525	12191-12195	cost	
16-526	12195-12196	=	
16-527	12196-12200	0.85	
16-528	12201-12205	rows	
16-529	12205-12206	=	
16-530	12206-12207	6	
16-531	12207-12208	)	
16-532	12209-12213	Left	
16-533	12214-12219	outer	
16-534	12220-12224	join	
16-535	12224-12225	:	
16-536	12226-12231	mysql	
16-537	12231-12232	>	
16-538	12233-12240	EXPLAIN	
16-539	12241-12247	FORMAT	
16-540	12247-12248	=	
16-541	12248-12252	TREE	
16-542	12253-12259	SELECT	
16-543	12260-12261	*	
16-544	12262-12266	FROM	
16-545	12267-12269	t1	
16-546	12270-12274	LEFT	
16-547	12275-12279	JOIN	
16-548	12280-12282	t2	
16-549	12283-12285	ON	
16-550	12286-12288	t1	
16-551	12288-12289	.	
16-552	12289-12291	c1	
16-553	12292-12293	=	
16-554	12294-12296	t2	
16-555	12296-12297	.	
16-556	12297-12299	c1	
16-557	12299-12300	\	
16-558	12300-12301	G	
16-559	12302-12303	*	
16-560	12303-12304	*	
16-561	12304-12305	*	
16-562	12305-12306	*	
16-563	12306-12307	*	
16-564	12307-12308	*	
16-565	12308-12309	*	
16-566	12309-12310	*	
16-567	12310-12311	*	
16-568	12311-12312	*	
16-569	12312-12313	*	
16-570	12313-12314	*	
16-571	12314-12315	*	
16-572	12315-12316	*	
16-573	12316-12317	*	
16-574	12317-12318	*	
16-575	12318-12319	*	
16-576	12319-12320	*	
16-577	12320-12321	*	
16-578	12321-12322	*	
16-579	12322-12323	*	
16-580	12323-12324	*	
16-581	12324-12325	*	
16-582	12325-12326	*	
16-583	12326-12327	*	
16-584	12327-12328	*	
16-585	12328-12329	*	
16-586	12330-12331	1	
16-587	12331-12332	.	
16-588	12333-12336	row	
16-589	12337-12338	*	
16-590	12338-12339	*	
16-591	12339-12340	*	
16-592	12340-12341	*	
16-593	12341-12342	*	
16-594	12342-12343	*	
16-595	12343-12344	*	
16-596	12344-12345	*	
16-597	12345-12346	*	
16-598	12346-12347	*	
16-599	12347-12348	*	
16-600	12348-12349	*	
16-601	12349-12350	*	
16-602	12350-12351	*	
16-603	12351-12352	*	
16-604	12352-12353	*	
16-605	12353-12354	*	
16-606	12354-12355	*	
16-607	12355-12356	*	
16-608	12356-12357	*	
16-609	12357-12358	*	
16-610	12358-12359	*	
16-611	12359-12360	*	
16-612	12360-12361	*	
16-613	12361-12362	*	
16-614	12362-12363	*	
16-615	12363-12364	*	
16-616	12365-12372	EXPLAIN	
16-617	12372-12373	:	
16-618	12374-12375	-	
16-619	12375-12376	>	
16-620	12377-12381	Left	
16-621	12382-12386	hash	
16-622	12387-12391	join	
16-623	12392-12393	(	
16-624	12393-12395	t2	
16-625	12395-12396	.	
16-626	12396-12398	c1	
16-627	12399-12400	=	
16-628	12401-12403	t1	
16-629	12403-12404	.	
16-630	12404-12406	c1	
16-631	12406-12407	)	
16-632	12408-12409	(	
16-633	12409-12413	cost	
16-634	12413-12414	=	
16-635	12414-12418	3.99	
16-636	12419-12423	rows	
16-637	12423-12424	=	
16-638	12424-12426	36	
16-639	12426-12427	)	
16-640	12428-12429	-	
16-641	12429-12430	>	
16-642	12431-12436	Table	
16-643	12437-12441	scan	
16-644	12442-12444	on	
16-645	12445-12447	t1	
16-646	12448-12449	(	
16-647	12449-12453	cost	
16-648	12453-12454	=	
16-649	12454-12458	0.85	
16-650	12459-12463	rows	
16-651	12463-12464	=	
16-652	12464-12465	6	
16-653	12465-12466	)	
16-654	12467-12468	-	
16-655	12468-12469	>	
16-656	12470-12474	Hash	
16-657	12475-12476	-	
16-658	12476-12477	>	
16-659	12478-12483	Table	
16-660	12484-12488	scan	
16-661	12489-12491	on	
16-662	12492-12494	t2	
16-663	12495-12496	(	
16-664	12496-12500	cost	
16-665	12500-12501	=	
16-666	12501-12505	0.14	
16-667	12506-12510	rows	
16-668	12510-12511	=	
16-669	12511-12512	6	
16-670	12512-12513	)	
16-671	12514-12519	Right	
16-672	12520-12525	outer	
16-673	12526-12530	join	
16-674	12531-12532	(	
16-675	12532-12539	observe	
16-676	12540-12544	that	
16-677	12545-12550	MySQL	
16-678	12551-12559	rewrites	
16-679	12560-12563	all	
16-680	12564-12569	right	
16-681	12570-12575	outer	
16-682	12576-12581	joins	
16-683	12582-12584	as	
16-684	12585-12589	left	
16-685	12590-12595	outer	
16-686	12596-12601	joins	
16-687	12601-12602	)	
16-688	12602-12603	:	
16-689	12604-12609	mysql	
16-690	12609-12610	>	
16-691	12611-12618	EXPLAIN	
16-692	12619-12625	FORMAT	
16-693	12625-12626	=	
16-694	12626-12630	TREE	
16-695	12631-12637	SELECT	
16-696	12638-12639	*	
16-697	12640-12644	FROM	
16-698	12645-12647	t1	
16-699	12648-12653	RIGHT	
16-700	12654-12658	JOIN	
16-701	12659-12661	t2	
16-702	12662-12664	ON	
16-703	12665-12667	t1	
16-704	12667-12668	.	
16-705	12668-12670	c1	
16-706	12671-12672	=	
16-707	12673-12675	t2	
16-708	12675-12676	.	
16-709	12676-12678	c1	
16-710	12678-12679	\	
16-711	12679-12680	G	
16-712	12681-12682	*	
16-713	12682-12683	*	
16-714	12683-12684	*	
16-715	12684-12685	*	
16-716	12685-12686	*	
16-717	12686-12687	*	
16-718	12687-12688	*	
16-719	12688-12689	*	
16-720	12689-12690	*	
16-721	12690-12691	*	
16-722	12691-12692	*	
16-723	12692-12693	*	
16-724	12693-12694	*	
16-725	12694-12695	*	
16-726	12695-12696	*	
16-727	12696-12697	*	
16-728	12697-12698	*	
16-729	12698-12699	*	
16-730	12699-12700	*	
16-731	12700-12701	*	
16-732	12701-12702	*	
16-733	12702-12703	*	
16-734	12703-12704	*	
16-735	12704-12705	*	
16-736	12705-12706	*	
16-737	12706-12707	*	
16-738	12707-12708	*	
16-739	12709-12710	1	
16-740	12710-12711	.	
16-741	12712-12715	row	
16-742	12716-12717	*	
16-743	12717-12718	*	
16-744	12718-12719	*	
16-745	12719-12720	*	
16-746	12720-12721	*	
16-747	12721-12722	*	
16-748	12722-12723	*	
16-749	12723-12724	*	
16-750	12724-12725	*	
16-751	12725-12726	*	
16-752	12726-12727	*	
16-753	12727-12728	*	
16-754	12728-12729	*	
16-755	12729-12730	*	
16-756	12730-12731	*	
16-757	12731-12732	*	
16-758	12732-12733	*	
16-759	12733-12734	*	
16-760	12734-12735	*	
16-761	12735-12736	*	
16-762	12736-12737	*	
16-763	12737-12738	*	
16-764	12738-12739	*	
16-765	12739-12740	*	
16-766	12740-12741	*	
16-767	12741-12742	*	
16-768	12742-12743	*	
16-769	12744-12751	EXPLAIN	
16-770	12751-12752	:	
16-771	12753-12754	-	
16-772	12754-12755	>	
16-773	12756-12760	Left	
16-774	12761-12765	hash	
16-775	12766-12770	join	
16-776	12771-12772	(	
16-777	12772-12774	t1	
16-778	12774-12775	.	
16-779	12775-12777	c1	
16-780	12778-12779	=	
16-781	12780-12782	t2	
16-782	12782-12783	.	
16-783	12783-12785	c1	
16-784	12785-12786	)	
16-785	12787-12788	(	
16-786	12788-12792	cost	
16-787	12792-12793	=	
16-788	12793-12797	3.99	
16-789	12798-12802	rows	
16-790	12802-12803	=	
16-791	12803-12805	36	
16-792	12805-12806	)	
16-793	12807-12808	-	
16-794	12808-12809	>	
16-795	12810-12815	Table	
16-796	12816-12820	scan	
16-797	12821-12823	on	
16-798	12824-12826	t2	
16-799	12827-12828	(	
16-800	12828-12832	cost	
16-801	12832-12833	=	
16-802	12833-12837	0.85	
16-803	12838-12842	rows	
16-804	12842-12843	=	
16-805	12843-12844	6	
16-806	12844-12845	)	
16-807	12846-12847	-	
16-808	12847-12848	>	
16-809	12849-12853	Hash	
16-810	12854-12855	-	
16-811	12855-12856	>	
16-812	12857-12862	Table	
16-813	12863-12867	scan	
16-814	12868-12870	on	
16-815	12871-12873	t1	
16-816	12874-12875	(	
16-817	12875-12879	cost	
16-818	12879-12880	=	
16-819	12880-12884	0.14	
16-820	12885-12889	rows	
16-821	12889-12890	=	
16-822	12890-12891	6	
16-823	12891-12892	)	
16-824	12893-12895	By	
16-825	12896-12903	default	
16-826	12903-12904	,	
16-827	12905-12910	MySQL	
16-828	12911-12917	8.0.18	
16-829	12918-12921	and	
16-830	12922-12927	later	
16-831	12928-12935	employs	
16-832	12936-12940	hash	
16-833	12941-12946	joins	
16-834	12947-12955	whenever	
16-835	12956-12964	possible	
16-836	12964-12965	.	

#Text=It is possible to control whether hash joins are
#Text=employed using one of the
#Text=BNL and
#Text=NO_BNL optimizer hints.
17-1	12966-12968	It	
17-2	12969-12971	is	
17-3	12972-12980	possible	
17-4	12981-12983	to	
17-5	12984-12991	control	
17-6	12992-12999	whether	
17-7	13000-13004	hash	
17-8	13005-13010	joins	
17-9	13011-13014	are	
17-10	13015-13023	employed	
17-11	13024-13029	using	
17-12	13030-13033	one	
17-13	13034-13036	of	
17-14	13037-13040	the	
17-15	13041-13044	BNL	
17-16	13045-13048	and	
17-17	13049-13055	NO_BNL	
17-18	13056-13065	optimizer	
17-19	13066-13071	hints	
17-20	13071-13072	.	

#Text=(MySQL 8.0.18 supported
#Text=hash_join=on or
#Text=hash_join=off as part of the
#Text=setting for the
#Text=optimizer_switch server
#Text=system variable as well as the optimizer hints
#Text=HASH_JOIN or
#Text=NO_HASH_JOIN.
18-1	13073-13074	(	
18-2	13074-13079	MySQL	
18-3	13080-13086	8.0.18	
18-4	13087-13096	supported	
18-5	13097-13106	hash_join	
18-6	13106-13107	=	
18-7	13107-13109	on	
18-8	13110-13112	or	
18-9	13113-13122	hash_join	
18-10	13122-13123	=	
18-11	13123-13126	off	
18-12	13127-13129	as	
18-13	13130-13134	part	
18-14	13135-13137	of	
18-15	13138-13141	the	
18-16	13142-13149	setting	
18-17	13150-13153	for	
18-18	13154-13157	the	
18-19	13158-13174	optimizer_switch	
18-20	13175-13181	server	
18-21	13182-13188	system	
18-22	13189-13197	variable	
18-23	13198-13200	as	
18-24	13201-13205	well	
18-25	13206-13208	as	
18-26	13209-13212	the	
18-27	13213-13222	optimizer	
18-28	13223-13228	hints	
18-29	13229-13238	HASH_JOIN	
18-30	13239-13241	or	
18-31	13242-13254	NO_HASH_JOIN	
18-32	13254-13255	.	

#Text=In MySQL
#Text=8.0.19 and later, these no longer have any effect.)
19-1	13256-13258	In	
19-2	13259-13264	MySQL	
19-3	13265-13271	8.0.19	
19-4	13272-13275	and	
19-5	13276-13281	later	
19-6	13281-13282	,	
19-7	13283-13288	these	
19-8	13289-13291	no	
19-9	13292-13298	longer	
19-10	13299-13303	have	
19-11	13304-13307	any	
19-12	13308-13314	effect	
19-13	13314-13315	.	
19-14	13315-13316	)	

#Text=Memory usage by hash joins can be controlled using the
#Text=join_buffer_size system
#Text=variable; a hash join cannot use more memory than this amount.
20-1	13317-13323	Memory	
20-2	13324-13329	usage	
20-3	13330-13332	by	
20-4	13333-13337	hash	
20-5	13338-13343	joins	
20-6	13344-13347	can	
20-7	13348-13350	be	
20-8	13351-13361	controlled	
20-9	13362-13367	using	
20-10	13368-13371	the	
20-11	13372-13388	join_buffer_size	
20-12	13389-13395	system	
20-13	13396-13404	variable	
20-14	13404-13405	;	
20-15	13406-13407	a	
20-16	13408-13412	hash	
20-17	13413-13417	join	
20-18	13418-13424	cannot	
20-19	13425-13428	use	
20-20	13429-13433	more	
20-21	13434-13440	memory	
20-22	13441-13445	than	
20-23	13446-13450	this	
20-24	13451-13457	amount	
20-25	13457-13458	.	

#Text=When the memory required for a hash join exceeds the amount
#Text=available, MySQL handles this by using files on disk.
21-1	13459-13463	When	
21-2	13464-13467	the	
21-3	13468-13474	memory	
21-4	13475-13483	required	
21-5	13484-13487	for	
21-6	13488-13489	a	
21-7	13490-13494	hash	
21-8	13495-13499	join	
21-9	13500-13507	exceeds	
21-10	13508-13511	the	
21-11	13512-13518	amount	
21-12	13519-13528	available	
21-13	13528-13529	,	
21-14	13530-13535	MySQL	
21-15	13536-13543	handles	
21-16	13544-13548	this	
21-17	13549-13551	by	
21-18	13552-13557	using	
21-19	13558-13563	files	
21-20	13564-13566	on	
21-21	13567-13571	disk	
21-22	13571-13572	.	

#Text=If this
#Text=happens, you should be aware that the join may not succeed if
#Text=a hash join cannot fit into memory and it creates more files
#Text=than set for
#Text=open_files_limit.
22-1	13573-13575	If	
22-2	13576-13580	this	
22-3	13581-13588	happens	
22-4	13588-13589	,	
22-5	13590-13593	you	
22-6	13594-13600	should	
22-7	13601-13603	be	
22-8	13604-13609	aware	
22-9	13610-13614	that	
22-10	13615-13618	the	
22-11	13619-13623	join	
22-12	13624-13627	may	
22-13	13628-13631	not	
22-14	13632-13639	succeed	
22-15	13640-13642	if	
22-16	13643-13644	a	
22-17	13645-13649	hash	
22-18	13650-13654	join	
22-19	13655-13661	cannot	
22-20	13662-13665	fit	
22-21	13666-13670	into	
22-22	13671-13677	memory	
22-23	13678-13681	and	
22-24	13682-13684	it	
22-25	13685-13692	creates	
22-26	13693-13697	more	
22-27	13698-13703	files	
22-28	13704-13708	than	
22-29	13709-13712	set	
22-30	13713-13716	for	
22-31	13717-13733	open_files_limit	
22-32	13733-13734	.	

#Text=To avoid
#Text=such problems, make either of the following changes:
#Text=Increase join_buffer_size so that the
#Text=hash join does not spill over to disk.
23-1	13735-13737	To	
23-2	13738-13743	avoid	
23-3	13744-13748	such	
23-4	13749-13757	problems	
23-5	13757-13758	,	
23-6	13759-13763	make	
23-7	13764-13770	either	
23-8	13771-13773	of	
23-9	13774-13777	the	
23-10	13778-13787	following	
23-11	13788-13795	changes	
23-12	13795-13796	:	
23-13	13797-13805	Increase	
23-14	13806-13822	join_buffer_size	
23-15	13823-13825	so	
23-16	13826-13830	that	
23-17	13831-13834	the	
23-18	13835-13839	hash	
23-19	13840-13844	join	
23-20	13845-13849	does	
23-21	13850-13853	not	
23-22	13854-13859	spill	
23-23	13860-13864	over	
23-24	13865-13867	to	
23-25	13868-13872	disk	
23-26	13872-13873	.	

#Text=Increase open_files_limit.
24-1	13874-13882	Increase	
24-2	13883-13899	open_files_limit	
24-3	13899-13900	.	

#Text=Beginning with MySQL 8.0.18, join buffers for hash joins are
#Text=allocated incrementally; thus, you can set
#Text=join_buffer_size higher
#Text=without small queries allocating very large amounts of RAM,
#Text=but outer joins allocate the entire buffer.
25-1	13901-13910	Beginning	
25-2	13911-13915	with	
25-3	13916-13921	MySQL	
25-4	13922-13928	8.0.18	
25-5	13928-13929	,	
25-6	13930-13934	join	
25-7	13935-13942	buffers	
25-8	13943-13946	for	
25-9	13947-13951	hash	
25-10	13952-13957	joins	
25-11	13958-13961	are	
25-12	13962-13971	allocated	
25-13	13972-13985	incrementally	
25-14	13985-13986	;	
25-15	13987-13991	thus	
25-16	13991-13992	,	
25-17	13993-13996	you	
25-18	13997-14000	can	
25-19	14001-14004	set	
25-20	14005-14021	join_buffer_size	
25-21	14022-14028	higher	
25-22	14029-14036	without	
25-23	14037-14042	small	
25-24	14043-14050	queries	
25-25	14051-14061	allocating	
25-26	14062-14066	very	
25-27	14067-14072	large	
25-28	14073-14080	amounts	
25-29	14081-14083	of	
25-30	14084-14087	RAM	
25-31	14087-14088	,	
25-32	14089-14092	but	
25-33	14093-14098	outer	
25-34	14099-14104	joins	
25-35	14105-14113	allocate	
25-36	14114-14117	the	
25-37	14118-14124	entire	
25-38	14125-14131	buffer	
25-39	14131-14132	.	

#Text=In MySQL 8.0.20
#Text=and later, hash joins are used for outer joins (including
#Text=antijoins and semijoins) as well, so this is no longer an
#Text=issue.
26-1	14133-14135	In	
26-2	14136-14141	MySQL	
26-3	14142-14148	8.0.20	
26-4	14149-14152	and	
26-5	14153-14158	later	
26-6	14158-14159	,	
26-7	14160-14164	hash	
26-8	14165-14170	joins	
26-9	14171-14174	are	
26-10	14175-14179	used	
26-11	14180-14183	for	
26-12	14184-14189	outer	
26-13	14190-14195	joins	
26-14	14196-14197	(	
26-15	14197-14206	including	
26-16	14207-14216	antijoins	
26-17	14217-14220	and	
26-18	14221-14230	semijoins	
26-19	14230-14231	)	
26-20	14232-14234	as	
26-21	14235-14239	well	
26-22	14239-14240	,	
26-23	14241-14243	so	
26-24	14244-14248	this	
26-25	14249-14251	is	
26-26	14252-14254	no	
26-27	14255-14261	longer	
26-28	14262-14264	an	
26-29	14265-14270	issue	
26-30	14270-14271	.	

#Text=PREV
#Text=HOME
#Text=NEXT
#Text=Related Documentation
#Text=MySQL 8.0 Release Notes
#Text=MySQL 8.0 Source Code Documentation
#Text=Download
#Text=this Manual
#Text=PDF (US Ltr)
#Text=- 40.9Mb
#Text=PDF (A4)
#Text=- 41.0Mb
#Text=PDF (RPM)
#Text=- 39.7Mb
#Text=HTML Download (TGZ)
#Text=- 9.5Mb
#Text=HTML Download (Zip)
#Text=- 9.6Mb
#Text=HTML Download (RPM)
#Text=- 8.1Mb
#Text=Man Pages (TGZ)
#Text=- 256.7Kb
#Text=Man Pages (Zip)
#Text=- 366.8Kb
#Text=Info (Gzip)
#Text=- 3.9Mb
#Text=Info (Zip)
#Text=- 3.9Mb
#Text=Excerpts from this Manual
#Text=MySQL Backup and Recovery
#Text=MySQL Globalization
#Text=MySQL Information Schema
#Text=MySQL Installation Guide
#Text=Security in MySQL
#Text=Starting and Stopping MySQL
#Text=MySQL and Linux/Unix
#Text=MySQL and Windows
#Text=MySQL and OS X
#Text=MySQL and Solaris
#Text=Building MySQL from Source
#Text=MySQL Restrictions and Limitations
#Text=MySQL Partitioning
#Text=MySQL Tutorial
#Text=MySQL Performance Schema
#Text=MySQL Replication
#Text=Using the MySQL Yum Repository
#Text=MySQL NDB Cluster 8.0
#Text=Contact MySQL Sales
#Text=USA/Canada: +1-866-221-0634
#Text=(More Countries »)
#Text=© 2021, Oracle Corporation and/or its affiliates
#Text=Products
#Text=MySQL Database Service
#Text=MySQL Enterprise Edition
#Text=MySQL Standard Edition
#Text=MySQL Classic Edition
#Text=MySQL Cluster CGE
#Text=MySQL Embedded (OEM/ISV)
#Text=Services
#Text=Training
#Text=Certification
#Text=Consulting
#Text=Support
#Text=Downloads
#Text=MySQL Community Server
#Text=MySQL NDB Cluster
#Text=MySQL Shell
#Text=MySQL Router
#Text=MySQL Workbench
#Text=Documentation
#Text=MySQL Reference Manual
#Text=MySQL Workbench
#Text=MySQL NDB Cluster
#Text=MySQL Connectors
#Text=Topic Guides
#Text=About MySQL
#Text=Contact Us
#Text=How to Buy
#Text=Partners
#Text=Job Opportunities
#Text=Site Map
#Text=© 2021, Oracle Corporation and/or its affiliates
#Text=Legal Policies |
#Text=Your Privacy Rights |
#Text=Terms of Use |
#Text=Trademark Policy |
#Text=Contributor Agreement |
27-1	14272-14276	PREV	
27-2	14277-14281	HOME	
27-3	14282-14286	NEXT	
27-4	14287-14294	Related	
27-5	14295-14308	Documentation	
27-6	14309-14314	MySQL	
27-7	14315-14318	8.0	
27-8	14319-14326	Release	
27-9	14327-14332	Notes	
27-10	14333-14338	MySQL	
27-11	14339-14342	8.0	
27-12	14343-14349	Source	
27-13	14350-14354	Code	
27-14	14355-14368	Documentation	
27-15	14369-14377	Download	
27-16	14378-14382	this	
27-17	14383-14389	Manual	
27-18	14390-14393	PDF	
27-19	14394-14395	(	
27-20	14395-14397	US	
27-21	14398-14401	Ltr	
27-22	14401-14402	)	
27-23	14403-14404	-	
27-24	14405-14411	40.9Mb	
27-25	14412-14415	PDF	
27-26	14416-14417	(	
27-27	14417-14419	A4	
27-28	14419-14420	)	
27-29	14421-14422	-	
27-30	14423-14429	41.0Mb	
27-31	14430-14433	PDF	
27-32	14434-14435	(	
27-33	14435-14438	RPM	
27-34	14438-14439	)	
27-35	14440-14441	-	
27-36	14442-14448	39.7Mb	
27-37	14449-14453	HTML	
27-38	14454-14462	Download	
27-39	14463-14464	(	
27-40	14464-14467	TGZ	
27-41	14467-14468	)	
27-42	14469-14470	-	
27-43	14471-14476	9.5Mb	
27-44	14477-14481	HTML	
27-45	14482-14490	Download	
27-46	14491-14492	(	
27-47	14492-14495	Zip	
27-48	14495-14496	)	
27-49	14497-14498	-	
27-50	14499-14504	9.6Mb	
27-51	14505-14509	HTML	
27-52	14510-14518	Download	
27-53	14519-14520	(	
27-54	14520-14523	RPM	
27-55	14523-14524	)	
27-56	14525-14526	-	
27-57	14527-14532	8.1Mb	
27-58	14533-14536	Man	
27-59	14537-14542	Pages	
27-60	14543-14544	(	
27-61	14544-14547	TGZ	
27-62	14547-14548	)	
27-63	14549-14550	-	
27-64	14551-14558	256.7Kb	
27-65	14559-14562	Man	
27-66	14563-14568	Pages	
27-67	14569-14570	(	
27-68	14570-14573	Zip	
27-69	14573-14574	)	
27-70	14575-14576	-	
27-71	14577-14584	366.8Kb	
27-72	14585-14589	Info	
27-73	14590-14591	(	
27-74	14591-14595	Gzip	
27-75	14595-14596	)	
27-76	14597-14598	-	
27-77	14599-14604	3.9Mb	
27-78	14605-14609	Info	
27-79	14610-14611	(	
27-80	14611-14614	Zip	
27-81	14614-14615	)	
27-82	14616-14617	-	
27-83	14618-14623	3.9Mb	
27-84	14624-14632	Excerpts	
27-85	14633-14637	from	
27-86	14638-14642	this	
27-87	14643-14649	Manual	
27-88	14650-14655	MySQL	
27-89	14656-14662	Backup	
27-90	14663-14666	and	
27-91	14667-14675	Recovery	
27-92	14676-14681	MySQL	
27-93	14682-14695	Globalization	
27-94	14696-14701	MySQL	
27-95	14702-14713	Information	
27-96	14714-14720	Schema	
27-97	14721-14726	MySQL	
27-98	14727-14739	Installation	
27-99	14740-14745	Guide	
27-100	14746-14754	Security	
27-101	14755-14757	in	
27-102	14758-14763	MySQL	
27-103	14764-14772	Starting	
27-104	14773-14776	and	
27-105	14777-14785	Stopping	
27-106	14786-14791	MySQL	
27-107	14792-14797	MySQL	
27-108	14798-14801	and	
27-109	14802-14807	Linux	
27-110	14807-14808	/	
27-111	14808-14812	Unix	
27-112	14813-14818	MySQL	
27-113	14819-14822	and	
27-114	14823-14830	Windows	
27-115	14831-14836	MySQL	
27-116	14837-14840	and	
27-117	14841-14843	OS	
27-118	14844-14845	X	
27-119	14846-14851	MySQL	
27-120	14852-14855	and	
27-121	14856-14863	Solaris	
27-122	14864-14872	Building	
27-123	14873-14878	MySQL	
27-124	14879-14883	from	
27-125	14884-14890	Source	
27-126	14891-14896	MySQL	
27-127	14897-14909	Restrictions	
27-128	14910-14913	and	
27-129	14914-14925	Limitations	
27-130	14926-14931	MySQL	
27-131	14932-14944	Partitioning	
27-132	14945-14950	MySQL	
27-133	14951-14959	Tutorial	
27-134	14960-14965	MySQL	
27-135	14966-14977	Performance	
27-136	14978-14984	Schema	
27-137	14985-14990	MySQL	
27-138	14991-15002	Replication	
27-139	15003-15008	Using	
27-140	15009-15012	the	
27-141	15013-15018	MySQL	
27-142	15019-15022	Yum	
27-143	15023-15033	Repository	
27-144	15034-15039	MySQL	
27-145	15040-15043	NDB	
27-146	15044-15051	Cluster	
27-147	15052-15055	8.0	
27-148	15056-15063	Contact	
27-149	15064-15069	MySQL	
27-150	15070-15075	Sales	
27-151	15076-15079	USA	
27-152	15079-15080	/	
27-153	15080-15086	Canada	
27-154	15086-15087	:	
27-155	15088-15089	+	
27-156	15089-15090	1	
27-157	15090-15091	-	
27-158	15091-15094	866	
27-159	15094-15095	-	
27-160	15095-15098	221	
27-161	15098-15099	-	
27-162	15099-15103	0634	
27-163	15104-15105	(	
27-164	15105-15109	More	
27-165	15110-15119	Countries	
27-166	15120-15121	»	
27-167	15121-15122	)	
27-168	15123-15124	©	
27-169	15125-15129	2021	
27-170	15129-15130	,	
27-171	15131-15137	Oracle	
27-172	15138-15149	Corporation	
27-173	15150-15153	and	
27-174	15153-15154	/	
27-175	15154-15156	or	
27-176	15157-15160	its	
27-177	15161-15171	affiliates	
27-178	15172-15180	Products	
27-179	15181-15186	MySQL	
27-180	15187-15195	Database	
27-181	15196-15203	Service	
27-182	15204-15209	MySQL	
27-183	15210-15220	Enterprise	
27-184	15221-15228	Edition	
27-185	15229-15234	MySQL	
27-186	15235-15243	Standard	
27-187	15244-15251	Edition	
27-188	15252-15257	MySQL	
27-189	15258-15265	Classic	
27-190	15266-15273	Edition	
27-191	15274-15279	MySQL	
27-192	15280-15287	Cluster	
27-193	15288-15291	CGE	
27-194	15292-15297	MySQL	
27-195	15298-15306	Embedded	
27-196	15307-15308	(	
27-197	15308-15311	OEM	
27-198	15311-15312	/	
27-199	15312-15315	ISV	
27-200	15315-15316	)	
27-201	15317-15325	Services	
27-202	15326-15334	Training	
27-203	15335-15348	Certification	
27-204	15349-15359	Consulting	
27-205	15360-15367	Support	
27-206	15368-15377	Downloads	
27-207	15378-15383	MySQL	
27-208	15384-15393	Community	
27-209	15394-15400	Server	
27-210	15401-15406	MySQL	
27-211	15407-15410	NDB	
27-212	15411-15418	Cluster	
27-213	15419-15424	MySQL	
27-214	15425-15430	Shell	
27-215	15431-15436	MySQL	
27-216	15437-15443	Router	
27-217	15444-15449	MySQL	
27-218	15450-15459	Workbench	
27-219	15460-15473	Documentation	
27-220	15474-15479	MySQL	
27-221	15480-15489	Reference	
27-222	15490-15496	Manual	
27-223	15497-15502	MySQL	
27-224	15503-15512	Workbench	
27-225	15513-15518	MySQL	
27-226	15519-15522	NDB	
27-227	15523-15530	Cluster	
27-228	15531-15536	MySQL	
27-229	15537-15547	Connectors	
27-230	15548-15553	Topic	
27-231	15554-15560	Guides	
27-232	15561-15566	About	
27-233	15567-15572	MySQL	
27-234	15573-15580	Contact	
27-235	15581-15583	Us	
27-236	15584-15587	How	
27-237	15588-15590	to	
27-238	15591-15594	Buy	
27-239	15595-15603	Partners	
27-240	15604-15607	Job	
27-241	15608-15621	Opportunities	
27-242	15622-15626	Site	
27-243	15627-15630	Map	
27-244	15631-15632	©	
27-245	15633-15637	2021	
27-246	15637-15638	,	
27-247	15639-15645	Oracle	
27-248	15646-15657	Corporation	
27-249	15658-15661	and	
27-250	15661-15662	/	
27-251	15662-15664	or	
27-252	15665-15668	its	
27-253	15669-15679	affiliates	
27-254	15680-15685	Legal	
27-255	15686-15694	Policies	
27-256	15695-15696	|	
27-257	15697-15701	Your	
27-258	15702-15709	Privacy	
27-259	15710-15716	Rights	
27-260	15717-15718	|	
27-261	15719-15724	Terms	
27-262	15725-15727	of	
27-263	15728-15731	Use	
27-264	15732-15733	|	
27-265	15734-15743	Trademark	
27-266	15744-15750	Policy	
27-267	15751-15752	|	
27-268	15753-15764	Contributor	
27-269	15765-15774	Agreement	
27-270	15775-15776	|	
