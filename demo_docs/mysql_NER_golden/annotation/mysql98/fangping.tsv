#FORMAT=WebAnno TSV 3.3


#Text=IIS Tuning for Connectwise Automate: Server Tuning Guide
#Text=Skip to content
#Text=Search for:
#Text=HomeBlogIntegrationsReverse ProxyEnterprise Package ManagementDatabase TunerDatabase CommanderDatabase Index PacksDatabase PermissionerServicesConsultingDatabase TuneupMySQL PatchingDocumentationResourcesLabtech Database SchemaTime Recovery Calculator
#Text=support@automationtheory.org FacebookYoutube
#Text=support@automationtheory.org FacebookYoutube
#Text=Automation Theory
#Text=Turning Good Theory into PracticeHomeBlogIntegrationsReverse ProxyEnterprise Package ManagementDatabase TunerDatabase CommanderDatabase Index PacksDatabase PermissionerServicesConsultingDatabase TuneupMySQL PatchingDocumentationResourcesLabtech Database SchemaTime Recovery Calculator
#Text=IIS Tuning for Connectwise AutomateHomePerformanceIIS Tuning for Connectwise Automate Connectwise Automate leverages Microsoft’s IIS webserver to facilitate application communications.
1-1	0-3	IIS	
1-2	4-10	Tuning	
1-3	11-14	for	
1-4	15-26	Connectwise	
1-5	27-35	Automate	
1-6	35-36	:	
1-7	37-43	Server	
1-8	44-50	Tuning	
1-9	51-56	Guide	
1-10	57-61	Skip	
1-11	62-64	to	
1-12	65-72	content	
1-13	73-79	Search	
1-14	80-83	for	
1-15	83-84	:	
1-16	85-112	HomeBlogIntegrationsReverse	
1-17	113-128	ProxyEnterprise	
1-18	129-136	Package	
1-19	137-155	ManagementDatabase	
1-20	156-169	TunerDatabase	
1-21	170-187	CommanderDatabase	
1-22	188-193	Index	
1-23	194-207	PacksDatabase	
1-24	208-246	PermissionerServicesConsultingDatabase	
1-25	247-258	TuneupMySQL	
1-26	259-296	PatchingDocumentationResourcesLabtech	
1-27	297-305	Database	
1-28	306-316	SchemaTime	
1-29	317-325	Recovery	
1-30	326-336	Calculator	
1-31	337-344	support	
1-32	344-345	@	
1-33	345-365	automationtheory.org	
1-34	366-381	FacebookYoutube	
1-35	382-389	support	
1-36	389-390	@	
1-37	390-410	automationtheory.org	
1-38	411-426	FacebookYoutube	
1-39	427-437	Automation	
1-40	438-444	Theory	
1-41	445-452	Turning	
1-42	453-457	Good	
1-43	458-464	Theory	
1-44	465-469	into	
1-45	470-505	PracticeHomeBlogIntegrationsReverse	
1-46	506-521	ProxyEnterprise	
1-47	522-529	Package	
1-48	530-548	ManagementDatabase	
1-49	549-562	TunerDatabase	
1-50	563-580	CommanderDatabase	
1-51	581-586	Index	
1-52	587-600	PacksDatabase	
1-53	601-639	PermissionerServicesConsultingDatabase	
1-54	640-651	TuneupMySQL	
1-55	652-689	PatchingDocumentationResourcesLabtech	
1-56	690-698	Database	
1-57	699-709	SchemaTime	
1-58	710-718	Recovery	
1-59	719-729	Calculator	
1-60	730-733	IIS	
1-61	734-740	Tuning	
1-62	741-744	for	
1-63	745-756	Connectwise	
1-64	757-783	AutomateHomePerformanceIIS	
1-65	784-790	Tuning	
1-66	791-794	for	
1-67	795-806	Connectwise	
1-68	807-815	Automate	
1-69	816-827	Connectwise	
1-70	828-836	Automate	
1-71	837-846	leverages	
1-72	847-856	Microsoft	
1-73	856-857	’	
1-74	857-858	s	
1-75	859-862	IIS	
1-76	863-872	webserver	
1-77	873-875	to	
1-78	876-886	facilitate	
1-79	887-898	application	
1-80	899-913	communications	
1-81	913-914	.	

#Text=Like other components of the Automate stack, IIS needs proper configuration to perform well under the heavy load of an RMM system.
2-1	915-919	Like	
2-2	920-925	other	
2-3	926-936	components	
2-4	937-939	of	
2-5	940-943	the	
2-6	944-952	Automate	
2-7	953-958	stack	
2-8	958-959	,	
2-9	960-963	IIS	
2-10	964-969	needs	
2-11	970-976	proper	
2-12	977-990	configuration	
2-13	991-993	to	
2-14	994-1001	perform	
2-15	1002-1006	well	
2-16	1007-1012	under	
2-17	1013-1016	the	
2-18	1017-1022	heavy	
2-19	1023-1027	load	
2-20	1028-1030	of	
2-21	1031-1033	an	
2-22	1034-1037	RMM	
2-23	1038-1044	system	
2-24	1044-1045	.	

#Text=Below you’ll find the core IIS tuning config we use here at Automation Theory whenever we’re doing consulting for partners.As we explore IIS tuning for Connectwise Automate it’s important to note that we’re going in reverse order; we’re starting with the smallest structures and working towards the largest; tuning lower-level items first simplifies things as we work up the stack.Application Pool RecyclingIIS has an application pool feature known as recycling.
3-1	1046-1051	Below	
3-2	1052-1055	you	
3-3	1055-1056	’	
3-4	1056-1058	ll	
3-5	1059-1063	find	
3-6	1064-1067	the	
3-7	1068-1072	core	
3-8	1073-1076	IIS	
3-9	1077-1083	tuning	
3-10	1084-1090	config	
3-11	1091-1093	we	
3-12	1094-1097	use	
3-13	1098-1102	here	
3-14	1103-1105	at	
3-15	1106-1116	Automation	
3-16	1117-1123	Theory	
3-17	1124-1132	whenever	
3-18	1133-1135	we	
3-19	1135-1136	’	
3-20	1136-1138	re	
3-21	1139-1144	doing	
3-22	1145-1155	consulting	
3-23	1156-1159	for	
3-24	1160-1171	partners.As	
3-25	1172-1174	we	
3-26	1175-1182	explore	
3-27	1183-1186	IIS	
3-28	1187-1193	tuning	
3-29	1194-1197	for	
3-30	1198-1209	Connectwise	
3-31	1210-1218	Automate	
3-32	1219-1221	it	
3-33	1221-1222	’	
3-34	1222-1223	s	
3-35	1224-1233	important	
3-36	1234-1236	to	
3-37	1237-1241	note	
3-38	1242-1246	that	
3-39	1247-1249	we	
3-40	1249-1250	’	
3-41	1250-1252	re	
3-42	1253-1258	going	
3-43	1259-1261	in	
3-44	1262-1269	reverse	
3-45	1270-1275	order	
3-46	1275-1276	;	
3-47	1277-1279	we	
3-48	1279-1280	’	
3-49	1280-1282	re	
3-50	1283-1291	starting	
3-51	1292-1296	with	
3-52	1297-1300	the	
3-53	1301-1309	smallest	
3-54	1310-1320	structures	
3-55	1321-1324	and	
3-56	1325-1332	working	
3-57	1333-1340	towards	
3-58	1341-1344	the	
3-59	1345-1352	largest	
3-60	1352-1353	;	
3-61	1354-1360	tuning	
3-62	1361-1372	lower-level	
3-63	1373-1378	items	
3-64	1379-1384	first	
3-65	1385-1395	simplifies	
3-66	1396-1402	things	
3-67	1403-1405	as	
3-68	1406-1408	we	
3-69	1409-1413	work	
3-70	1414-1416	up	
3-71	1417-1420	the	
3-72	1421-1438	stack.Application	
3-73	1439-1443	Pool	
3-74	1444-1456	RecyclingIIS	
3-75	1457-1460	has	
3-76	1461-1463	an	
3-77	1464-1475	application	
3-78	1476-1480	pool	
3-79	1481-1488	feature	
3-80	1489-1494	known	
3-81	1495-1497	as	
3-82	1498-1507	recycling	
3-83	1507-1508	.	

#Text=This restarts the worker processes on a regular interval, and the original intent was to address memory leaks in web applications where modification of the code wasn’t possible.
4-1	1509-1513	This	
4-2	1514-1522	restarts	
4-3	1523-1526	the	
4-4	1527-1533	worker	
4-5	1534-1543	processes	
4-6	1544-1546	on	
4-7	1547-1548	a	
4-8	1549-1556	regular	
4-9	1557-1565	interval	
4-10	1565-1566	,	
4-11	1567-1570	and	
4-12	1571-1574	the	
4-13	1575-1583	original	
4-14	1584-1590	intent	
4-15	1591-1594	was	
4-16	1595-1597	to	
4-17	1598-1605	address	
4-18	1606-1612	memory	
4-19	1613-1618	leaks	
4-20	1619-1621	in	
4-21	1622-1625	web	
4-22	1626-1638	applications	
4-23	1639-1644	where	
4-24	1645-1657	modification	
4-25	1658-1660	of	
4-26	1661-1664	the	
4-27	1665-1669	code	
4-28	1670-1674	wasn	
4-29	1674-1675	’	
4-30	1675-1676	t	
4-31	1677-1685	possible	
4-32	1685-1686	.	

#Text=While we have seen excessive memory usage with Automate worker processes occasionally, the true utility of this setting lies elsewhere.The Automate application uses connection pooling when communicating with MySQL.
5-1	1687-1692	While	
5-2	1693-1695	we	
5-3	1696-1700	have	
5-4	1701-1705	seen	
5-5	1706-1715	excessive	
5-6	1716-1722	memory	
5-7	1723-1728	usage	
5-8	1729-1733	with	
5-9	1734-1742	Automate	
5-10	1743-1749	worker	
5-11	1750-1759	processes	
5-12	1760-1772	occasionally	
5-13	1772-1773	,	
5-14	1774-1777	the	
5-15	1778-1782	true	
5-16	1783-1790	utility	
5-17	1791-1793	of	
5-18	1794-1798	this	
5-19	1799-1806	setting	
5-20	1807-1811	lies	
5-21	1812-1825	elsewhere.The	
5-22	1826-1834	Automate	
5-23	1835-1846	application	
5-24	1847-1851	uses	
5-25	1852-1862	connection	
5-26	1863-1870	pooling	
5-27	1871-1875	when	
5-28	1876-1889	communicating	
5-29	1890-1894	with	
5-30	1895-1900	MySQL	
5-31	1900-1901	.	

#Text=The application will open up to 500 connections to MySQL and leave them open to facilitate the rapid processing of database requests.
6-1	1902-1905	The	
6-2	1906-1917	application	
6-3	1918-1922	will	
6-4	1923-1927	open	
6-5	1928-1930	up	
6-6	1931-1933	to	
6-7	1934-1937	500	
6-8	1938-1949	connections	
6-9	1950-1952	to	
6-10	1953-1958	MySQL	
6-11	1959-1962	and	
6-12	1963-1968	leave	
6-13	1969-1973	them	
6-14	1974-1978	open	
6-15	1979-1981	to	
6-16	1982-1992	facilitate	
6-17	1993-1996	the	
6-18	1997-2002	rapid	
6-19	2003-2013	processing	
6-20	2014-2016	of	
6-21	2017-2025	database	
6-22	2026-2034	requests	
6-23	2034-2035	.	

#Text=This is a best practice, but historically the pooled connections don’t always get closed, and for larger partners, this will result in a server that regularly hits the limit for MySQL connections, and the Automate app freezing/crashing.Recycling the IIS worker processes closes these connections and prevents the database from being overwhelmed.
7-1	2036-2040	This	
7-2	2041-2043	is	
7-3	2044-2045	a	
7-4	2046-2050	best	
7-5	2051-2059	practice	
7-6	2059-2060	,	
7-7	2061-2064	but	
7-8	2065-2077	historically	
7-9	2078-2081	the	
7-10	2082-2088	pooled	
7-11	2089-2100	connections	
7-12	2101-2104	don	
7-13	2104-2105	’	
7-14	2105-2106	t	
7-15	2107-2113	always	
7-16	2114-2117	get	
7-17	2118-2124	closed	
7-18	2124-2125	,	
7-19	2126-2129	and	
7-20	2130-2133	for	
7-21	2134-2140	larger	
7-22	2141-2149	partners	
7-23	2149-2150	,	
7-24	2151-2155	this	
7-25	2156-2160	will	
7-26	2161-2167	result	
7-27	2168-2170	in	
7-28	2171-2172	a	
7-29	2173-2179	server	
7-30	2180-2184	that	
7-31	2185-2194	regularly	
7-32	2195-2199	hits	
7-33	2200-2203	the	
7-34	2204-2209	limit	
7-35	2210-2213	for	
7-36	2214-2219	MySQL	
7-37	2220-2231	connections	
7-38	2231-2232	,	
7-39	2233-2236	and	
7-40	2237-2240	the	
7-41	2241-2249	Automate	
7-42	2250-2253	app	
7-43	2254-2262	freezing	
7-44	2262-2263	/	
7-45	2263-2281	crashing.Recycling	
7-46	2282-2285	the	
7-47	2286-2289	IIS	
7-48	2290-2296	worker	
7-49	2297-2306	processes	
7-50	2307-2313	closes	
7-51	2314-2319	these	
7-52	2320-2331	connections	
7-53	2332-2335	and	
7-54	2336-2344	prevents	
7-55	2345-2348	the	
7-56	2349-2357	database	
7-57	2358-2362	from	
7-58	2363-2368	being	
7-59	2369-2380	overwhelmed	
7-60	2380-2381	.	

#Text=The exact setting to correct this behavior will vary between servers, but recycling the IIS application pool every 60-90 minutes is adequate for most partners.
8-1	2382-2385	The	
8-2	2386-2391	exact	
8-3	2392-2399	setting	
8-4	2400-2402	to	
8-5	2403-2410	correct	
8-6	2411-2415	this	
8-7	2416-2424	behavior	
8-8	2425-2429	will	
8-9	2430-2434	vary	
8-10	2435-2442	between	
8-11	2443-2450	servers	
8-12	2450-2451	,	
8-13	2452-2455	but	
8-14	2456-2465	recycling	
8-15	2466-2469	the	
8-16	2470-2473	IIS	
8-17	2474-2485	application	
8-18	2486-2490	pool	
8-19	2491-2496	every	
8-20	2497-2499	60	
8-21	2499-2500	-	
8-22	2500-2502	90	
8-23	2503-2510	minutes	
8-24	2511-2513	is	
8-25	2514-2522	adequate	
8-26	2523-2526	for	
8-27	2527-2531	most	
8-28	2532-2540	partners	
8-29	2540-2541	.	

#Text=While the recycle is happening the application will appear to hang for ~30 seconds.
9-1	2542-2547	While	
9-2	2548-2551	the	
9-3	2552-2559	recycle	
9-4	2560-2562	is	
9-5	2563-2572	happening	
9-6	2573-2576	the	
9-7	2577-2588	application	
9-8	2589-2593	will	
9-9	2594-2600	appear	
9-10	2601-2603	to	
9-11	2604-2608	hang	
9-12	2609-2612	for	
9-13	2613-2614	~	
9-14	2614-2616	30	
9-15	2617-2624	seconds	
9-16	2624-2625	.	

#Text=If this would be disruptive to daily operations it’s possible to specify a set of times for recycling to occur to ensure it happens outside of business hours.Worker ProcessesInside of IIS a thread known as a worker process handles the incoming web requests.
10-1	2626-2628	If	
10-2	2629-2633	this	
10-3	2634-2639	would	
10-4	2640-2642	be	
10-5	2643-2653	disruptive	
10-6	2654-2656	to	
10-7	2657-2662	daily	
10-8	2663-2673	operations	
10-9	2674-2676	it	
10-10	2676-2677	’	
10-11	2677-2678	s	
10-12	2679-2687	possible	
10-13	2688-2690	to	
10-14	2691-2698	specify	
10-15	2699-2700	a	
10-16	2701-2704	set	
10-17	2705-2707	of	
10-18	2708-2713	times	
10-19	2714-2717	for	
10-20	2718-2727	recycling	
10-21	2728-2730	to	
10-22	2731-2736	occur	
10-23	2737-2739	to	
10-24	2740-2746	ensure	
10-25	2747-2749	it	
10-26	2750-2757	happens	
10-27	2758-2765	outside	
10-28	2766-2768	of	
10-29	2769-2777	business	
10-30	2778-2790	hours.Worker	
10-31	2791-2806	ProcessesInside	
10-32	2807-2809	of	
10-33	2810-2813	IIS	
10-34	2814-2815	a	
10-35	2816-2822	thread	
10-36	2823-2828	known	
10-37	2829-2831	as	
10-38	2832-2833	a	
10-39	2834-2840	worker	
10-40	2841-2848	process	
10-41	2849-2856	handles	
10-42	2857-2860	the	
10-43	2861-2869	incoming	
10-44	2870-2873	web	
10-45	2874-2882	requests	
10-46	2882-2883	.	

#Text=The default number of worker processes is 1, and this will be fine for smaller Automate instances.
11-1	2884-2887	The	
11-2	2888-2895	default	
11-3	2896-2902	number	
11-4	2903-2905	of	
11-5	2906-2912	worker	
11-6	2913-2922	processes	
11-7	2923-2925	is	
11-8	2926-2927	1	
11-9	2927-2928	,	
11-10	2929-2932	and	
11-11	2933-2937	this	
11-12	2938-2942	will	
11-13	2943-2945	be	
11-14	2946-2950	fine	
11-15	2951-2954	for	
11-16	2955-2962	smaller	
11-17	2963-2971	Automate	
11-18	2972-2981	instances	
11-19	2981-2982	.	

#Text=However, the theoretical limit for simultaneous web requests (worst case scenario) would approach ~33% of the agent count (there are so many variables at play; please treat this as a loose number and use PowerShell to measure TCP connections on your webserver).
12-1	2983-2990	However	
12-2	2990-2991	,	
12-3	2992-2995	the	
12-4	2996-3007	theoretical	
12-5	3008-3013	limit	
12-6	3014-3017	for	
12-7	3018-3030	simultaneous	
12-8	3031-3034	web	
12-9	3035-3043	requests	
12-10	3044-3045	(	
12-11	3045-3050	worst	
12-12	3051-3055	case	
12-13	3056-3064	scenario	
12-14	3064-3065	)	
12-15	3066-3071	would	
12-16	3072-3080	approach	
12-17	3081-3082	~	
12-18	3082-3085	33%	
12-19	3086-3088	of	
12-20	3089-3092	the	
12-21	3093-3098	agent	
12-22	3099-3104	count	
12-23	3105-3106	(	
12-24	3106-3111	there	
12-25	3112-3115	are	
12-26	3116-3118	so	
12-27	3119-3123	many	
12-28	3124-3133	variables	
12-29	3134-3136	at	
12-30	3137-3141	play	
12-31	3141-3142	;	
12-32	3143-3149	please	
12-33	3150-3155	treat	
12-34	3156-3160	this	
12-35	3161-3163	as	
12-36	3164-3165	a	
12-37	3166-3171	loose	
12-38	3172-3178	number	
12-39	3179-3182	and	
12-40	3183-3186	use	
12-41	3187-3197	PowerShell	
12-42	3198-3200	to	
12-43	3201-3208	measure	
12-44	3209-3212	TCP	
12-45	3213-3224	connections	
12-46	3225-3227	on	
12-47	3228-3232	your	
12-48	3233-3242	webserver	
12-49	3242-3243	)	
12-50	3243-3244	.	

#Text=For a 300 agent server, it’s quite plausible that a single thread could handle 100 simultaneous requests.
13-1	3245-3248	For	
13-2	3249-3250	a	
13-3	3251-3254	300	
13-4	3255-3260	agent	
13-5	3261-3267	server	
13-6	3267-3268	,	
13-7	3269-3271	it	
13-8	3271-3272	’	
13-9	3272-3273	s	
13-10	3274-3279	quite	
13-11	3280-3289	plausible	
13-12	3290-3294	that	
13-13	3295-3296	a	
13-14	3297-3303	single	
13-15	3304-3310	thread	
13-16	3311-3316	could	
13-17	3317-3323	handle	
13-18	3324-3327	100	
13-19	3328-3340	simultaneous	
13-20	3341-3349	requests	
13-21	3349-3350	.	

#Text=However, the case becomes much less plausible for a 3000 agent server to efficiently serve 1000 simultaneous requests with a single thread.# PowerShell to measure current web requests
#Text=Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many?
14-1	3351-3358	However	
14-2	3358-3359	,	
14-3	3360-3363	the	
14-4	3364-3368	case	
14-5	3369-3376	becomes	
14-6	3377-3381	much	
14-7	3382-3386	less	
14-8	3387-3396	plausible	
14-9	3397-3400	for	
14-10	3401-3402	a	
14-11	3403-3407	3000	
14-12	3408-3413	agent	
14-13	3414-3420	server	
14-14	3421-3423	to	
14-15	3424-3435	efficiently	
14-16	3436-3441	serve	
14-17	3442-3446	1000	
14-18	3447-3459	simultaneous	
14-19	3460-3468	requests	
14-20	3469-3473	with	
14-21	3474-3475	a	
14-22	3476-3482	single	
14-23	3483-3489	thread	
14-24	3489-3490	.	
14-25	3490-3491	#	
14-26	3492-3502	PowerShell	
14-27	3503-3505	to	
14-28	3506-3513	measure	
14-29	3514-3521	current	
14-30	3522-3525	web	
14-31	3526-3534	requests	
14-32	3535-3555	Get-NetTCPConnection	
14-33	3556-3557	-	
14-34	3557-3566	LocalPort	
14-35	3567-3570	443	
14-36	3571-3572	|	
14-37	3573-3589	Measure-ObjectSo	
14-38	3589-3590	,	
14-39	3591-3600	obviously	
14-40	3601-3607	bigger	
14-41	3608-3615	servers	
14-42	3616-3620	will	
14-43	3621-3625	need	
14-44	3626-3630	more	
14-45	3631-3638	threads	
14-46	3638-3639	,	
14-47	3640-3643	but	
14-48	3644-3647	how	
14-49	3648-3652	many	
14-50	3652-3653	?	

#Text=The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads).
15-1	3654-3657	The	
15-2	3658-3661	old	
15-3	3662-3668	school	
15-4	3669-3674	logic	
15-5	3675-3679	when	
15-6	3680-3685	doing	
15-7	3686-3689	IIS	
15-8	3690-3696	tuning	
15-9	3697-3700	for	
15-10	3701-3712	Connectwise	
15-11	3713-3721	Automate	
15-12	3722-3724	is	
15-13	3725-3727	to	
15-14	3728-3732	have	
15-15	3733-3737	half	
15-16	3738-3740	as	
15-17	3741-3745	many	
15-18	3746-3752	worker	
15-19	3753-3762	processes	
15-20	3763-3765	as	
15-21	3766-3769	you	
15-22	3770-3774	have	
15-23	3775-3778	CPU	
15-24	3779-3784	cores	
15-25	3785-3786	(	
15-26	3786-3788	so	
15-27	3789-3790	a	
15-28	3791-3797	server	
15-29	3798-3802	with	
15-30	3803-3804	8	
15-31	3805-3810	cores	
15-32	3810-3811	/	
15-33	3811-3816	vCPUs	
15-34	3817-3822	would	
15-35	3823-3827	have	
15-36	3828-3829	4	
15-37	3830-3836	worker	
15-38	3837-3844	threads	
15-39	3844-3845	)	
15-40	3845-3846	.	

#Text=The idea behind this is to prevent resource starvation.
16-1	3847-3850	The	
16-2	3851-3855	idea	
16-3	3856-3862	behind	
16-4	3863-3867	this	
16-5	3868-3870	is	
16-6	3871-3873	to	
16-7	3874-3881	prevent	
16-8	3882-3890	resource	
16-9	3891-3901	starvation	
16-10	3901-3902	.	

#Text=However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached.
17-1	3903-3910	However	
17-2	3910-3911	,	
17-3	3912-3917	there	
17-4	3918-3921	are	
17-5	3922-3930	settings	
17-6	3931-3937	inside	
17-7	3938-3940	of	
17-8	3941-3944	IIS	
17-9	3945-3948	for	
17-10	3949-3960	controlling	
17-11	3961-3964	CPU	
17-12	3965-3970	usage	
17-13	3971-3973	by	
17-14	3974-3977	the	
17-15	3978-3984	worker	
17-16	3985-3992	threads	
17-17	3992-3993	,	
17-18	3994-3997	and	
17-19	3998-4002	they	
17-20	4003-4010	provide	
17-21	4011-4015	much	
17-22	4016-4020	more	
17-23	4021-4029	granular	
17-24	4030-4037	control	
17-25	4038-4042	over	
17-26	4043-4046	the	
17-27	4047-4055	resource	
17-28	4056-4071	utilization.For	
17-29	4072-4076	most	
17-30	4077-4085	partners	
17-31	4086-4094	starting	
17-32	4095-4099	with	
17-33	4100-4103	the	
17-34	4104-4107	old	
17-35	4108-4114	school	
17-36	4115-4121	method	
17-37	4122-4124	is	
17-38	4125-4134	advisable	
17-39	4134-4135	,	
17-40	4136-4139	but	
17-41	4140-4142	if	
17-42	4143-4154	performance	
17-43	4155-4157	is	
17-44	4158-4163	still	
17-45	4164-4171	lacking	
17-46	4172-4173	(	
17-47	4173-4175	or	
17-48	4176-4179	the	
17-49	4180-4187	threads	
17-50	4187-4188	/	
17-51	4188-4199	connections	
17-52	4200-4205	ratio	
17-53	4206-4208	is	
17-54	4209-4214	still	
17-55	4215-4231	disproportionate	
17-56	4231-4232	)	
17-57	4233-4235	it	
17-58	4236-4241	would	
17-59	4242-4244	be	
17-60	4245-4250	worth	
17-61	4251-4260	gradually	
17-62	4261-4267	adding	
17-63	4268-4272	more	
17-64	4273-4279	worker	
17-65	4280-4289	processes	
17-66	4290-4291	(	
17-67	4291-4295	with	
17-68	4296-4299	the	
17-69	4300-4303	IIS	
17-70	4304-4312	resource	
17-71	4313-4321	controls	
17-72	4321-4322	)	
17-73	4323-4328	until	
17-74	4329-4331	an	
17-75	4332-4339	optimal	
17-76	4340-4347	balance	
17-77	4348-4350	is	
17-78	4351-4358	reached	
17-79	4358-4359	.	

#Text=As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count).
18-1	4360-4362	As	
18-2	4363-4367	with	
18-3	4368-4373	other	
18-4	4374-4382	concepts	
18-5	4383-4385	in	
18-6	4386-4394	resource	
18-7	4395-4405	allocation	
18-8	4405-4406	,	
18-9	4407-4409	it	
18-10	4409-4410	’	
18-11	4410-4411	s	
18-12	4412-4417	worth	
18-13	4418-4424	noting	
18-14	4425-4429	that	
18-15	4430-4434	more	
18-16	4435-4437	is	
18-17	4438-4441	not	
18-18	4442-4448	always	
18-19	4449-4455	better	
18-20	4455-4456	,	
18-21	4457-4460	and	
18-22	4461-4466	there	
18-23	4467-4469	is	
18-24	4470-4471	a	
18-25	4472-4477	point	
18-26	4478-4480	of	
18-27	4481-4492	diminishing	
18-28	4493-4500	returns	
18-29	4501-4502	(	
18-30	4502-4505	the	
18-31	4506-4513	tipping	
18-32	4514-4519	point	
18-33	4520-4522	is	
18-34	4523-4531	normally	
18-35	4532-4536	when	
18-36	4537-4543	worker	
18-37	4544-4553	processes	
18-38	4554-4560	exceed	
18-39	4561-4565	core	
18-40	4566-4571	count	
18-41	4571-4572	)	
18-42	4572-4573	.	

#Text=It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length.
19-1	4574-4576	It	
19-2	4576-4577	’	
19-3	4577-4578	s	
19-4	4579-4583	also	
19-5	4584-4589	worth	
19-6	4590-4596	noting	
19-7	4597-4601	that	
19-8	4602-4612	additional	
19-9	4613-4619	worker	
19-10	4620-4629	processes	
19-11	4630-4634	will	
19-12	4635-4639	open	
19-13	4640-4650	additional	
19-14	4651-4659	database	
19-15	4660-4671	connections	
19-16	4671-4672	,	
19-17	4673-4675	so	
19-18	4676-4680	care	
19-19	4681-4687	should	
19-20	4688-4690	be	
19-21	4691-4696	taken	
19-22	4697-4699	to	
19-23	4700-4707	prevent	
19-24	4708-4715	hitting	
19-25	4716-4719	the	
19-26	4720-4735	max_connections	
19-27	4736-4751	threshold.Queue	
19-28	4752-4761	LengthIIS	
19-29	4762-4773	application	
19-30	4774-4779	pools	
19-31	4780-4784	also	
19-32	4785-4789	have	
19-33	4790-4791	a	
19-34	4792-4800	property	
19-35	4801-4806	known	
19-36	4807-4809	as	
19-37	4810-4815	queue	
19-38	4816-4822	length	
19-39	4822-4823	.	

#Text=This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available).
20-1	4824-4828	This	
20-2	4829-4831	is	
20-3	4832-4838	simply	
20-4	4839-4842	the	
20-5	4843-4849	number	
20-6	4850-4852	of	
20-7	4853-4860	pending	
20-8	4861-4864	web	
20-9	4865-4873	requests	
20-10	4874-4877	the	
20-11	4878-4884	server	
20-12	4885-4889	will	
20-13	4890-4895	queue	
20-14	4896-4902	before	
20-15	4903-4912	returning	
20-16	4913-4916	the	
20-17	4917-4921	HTTP	
20-18	4922-4925	503	
20-19	4926-4932	status	
20-20	4933-4937	code	
20-21	4938-4939	(	
20-22	4939-4946	service	
20-23	4947-4950	not	
20-24	4951-4960	available	
20-25	4960-4961	)	
20-26	4961-4962	.	

#Text=All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here).
21-1	4963-4966	All	
21-2	4967-4975	requests	
21-3	4976-4980	pass	
21-4	4981-4988	through	
21-5	4989-4993	this	
21-6	4994-4999	queue	
21-7	5000-5005	first	
21-8	5006-5008	as	
21-9	5009-5013	they	
21-10	5014-5017	are	
21-11	5018-5027	processed	
21-12	5028-5030	by	
21-13	5031-5034	the	
21-14	5035-5044	webserver	
21-15	5045-5046	(	
21-16	5046-5051	there	
21-17	5052-5055	are	
21-18	5056-5060	also	
21-19	5061-5066	other	
21-20	5067-5073	queues	
21-21	5073-5074	,	
21-22	5075-5078	but	
21-23	5079-5083	they	
21-24	5084-5087	are	
21-25	5088-5091	out	
21-26	5092-5094	of	
21-27	5095-5100	scope	
21-28	5101-5104	for	
21-29	5105-5108	our	
21-30	5109-5119	discussion	
21-31	5120-5124	here	
21-32	5124-5125	)	
21-33	5125-5126	.	

#Text=The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests.
22-1	5127-5130	The	
22-2	5131-5136	queue	
22-3	5137-5143	length	
22-4	5144-5149	plays	
22-5	5150-5151	a	
22-6	5152-5156	role	
22-7	5157-5159	in	
22-8	5160-5171	determining	
22-9	5172-5175	the	
22-10	5176-5181	total	
22-11	5182-5188	number	
22-12	5189-5191	of	
22-13	5192-5202	concurrent	
22-14	5203-5214	connections	
22-15	5214-5215	;	
22-16	5216-5218	as	
22-17	5219-5222	any	
22-18	5223-5230	request	
22-19	5231-5235	that	
22-20	5236-5237	a	
22-21	5238-5244	worker	
22-22	5245-5252	process	
22-23	5253-5256	can	
22-24	5256-5257	’	
22-25	5257-5258	t	
22-26	5259-5265	accept	
22-27	5266-5277	immediately	
22-28	5278-5285	remains	
22-29	5286-5288	in	
22-30	5289-5292	the	
22-31	5293-5301	queue.In	
22-32	5302-5304	an	
22-33	5305-5310	ideal	
22-34	5311-5316	world	
22-35	5316-5317	,	
22-36	5318-5321	the	
22-37	5322-5331	webserver	
22-38	5332-5338	always	
22-39	5339-5342	can	
22-40	5343-5350	process	
22-41	5351-5359	incoming	
22-42	5360-5368	requests	
22-43	5369-5376	rapidly	
22-44	5376-5377	,	
22-45	5378-5381	and	
22-46	5382-5386	this	
22-47	5387-5392	queue	
22-48	5393-5398	never	
22-49	5399-5407	contains	
22-50	5408-5409	a	
22-51	5410-5415	large	
22-52	5416-5422	volume	
22-53	5423-5425	of	
22-54	5426-5434	requests	
22-55	5434-5435	.	

#Text=However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up.
23-1	5436-5443	However	
23-2	5443-5444	,	
23-3	5445-5447	as	
23-4	5448-5457	discussed	
23-5	5458-5460	in	
23-6	5461-5464	our	
23-7	5465-5469	blog	
23-8	5470-5474	post	
23-9	5475-5479	here	
23-10	5479-5480	,	
23-11	5481-5486	there	
23-12	5487-5490	are	
23-13	5491-5499	inherent	
23-14	5500-5511	performance	
23-15	5512-5518	issues	
23-16	5519-5523	with	
23-17	5524-5527	the	
23-18	5528-5536	Automate	
23-19	5537-5545	database	
23-20	5546-5547	—	
23-21	5548-5551	and	
23-22	5552-5556	that	
23-23	5557-5560	can	
23-24	5561-5567	result	
23-25	5568-5570	in	
23-26	5571-5574	web	
23-27	5575-5583	requests	
23-28	5584-5591	waiting	
23-29	5592-5595	for	
23-30	5596-5599	the	
23-31	5600-5608	database	
23-32	5608-5609	,	
23-33	5610-5613	and	
23-34	5614-5618	thus	
23-35	5619-5622	the	
23-36	5623-5628	queue	
23-37	5629-5636	filling	
23-38	5637-5639	up	
23-39	5639-5640	.	

#Text=Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting.
24-1	5641-5648	Because	
24-2	5649-5651	of	
24-3	5652-5656	this	
24-4	5657-5665	tendency	
24-5	5665-5666	,	
24-6	5667-5670	the	
24-7	5671-5679	Automate	
24-8	5680-5689	installer	
24-9	5690-5694	sets	
24-10	5695-5698	the	
24-11	5699-5704	queue	
24-12	5705-5711	length	
24-13	5712-5714	to	
24-14	5715-5721	11,000	
24-15	5722-5726	each	
24-16	5727-5729	on	
24-17	5730-5733	the	
24-18	5734-5735	“	
24-19	5735-5742	Labtech	
24-20	5742-5743	”	
24-21	5744-5747	and	
24-22	5748-5749	“	
24-23	5749-5759	CwaRestApi	
24-24	5759-5760	”	
24-25	5761-5772	application	
24-26	5773-5778	pools	
24-27	5779-5780	—	
24-28	5781-5782	a	
24-29	5783-5787	full	
24-30	5788-5791	11x	
24-31	5792-5799	greater	
24-32	5800-5804	than	
24-33	5805-5808	the	
24-34	5809-5819	default.It	
24-35	5819-5820	’	
24-36	5820-5821	s	
24-37	5822-5831	important	
24-38	5832-5834	to	
24-39	5835-5839	note	
24-40	5840-5845	cause	
24-41	5846-5849	and	
24-42	5850-5856	effect	
24-43	5857-5872	bidirectionally	
24-44	5873-5875	as	
24-45	5876-5878	we	
24-46	5879-5883	look	
24-47	5884-5886	at	
24-48	5887-5893	tuning	
24-49	5894-5898	this	
24-50	5899-5906	setting	
24-51	5906-5907	.	

#Text=In most cases, a high queue length is caused by contention in MySQL.
25-1	5908-5910	In	
25-2	5911-5915	most	
25-3	5916-5921	cases	
25-4	5921-5922	,	
25-5	5923-5924	a	
25-6	5925-5929	high	
25-7	5930-5935	queue	
25-8	5936-5942	length	
25-9	5943-5945	is	
25-10	5946-5952	caused	
25-11	5953-5955	by	
25-12	5956-5966	contention	
25-13	5967-5969	in	
25-14	5970-5975	MySQL	
25-15	5975-5976	.	

#Text=This makes IIS unable to process requests, and the queue fills.
26-1	5977-5981	This	
26-2	5982-5987	makes	
26-3	5988-5991	IIS	
26-4	5992-5998	unable	
26-5	5999-6001	to	
26-6	6002-6009	process	
26-7	6010-6018	requests	
26-8	6018-6019	,	
26-9	6020-6023	and	
26-10	6024-6027	the	
26-11	6028-6033	queue	
26-12	6034-6039	fills	
26-13	6039-6040	.	

#Text=However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up.
27-1	6041-6048	However	
27-2	6048-6049	,	
27-3	6050-6054	once	
27-4	6055-6060	MySQL	
27-5	6061-6069	recovers	
27-6	6069-6070	,	
27-7	6071-6074	the	
27-8	6075-6081	queued	
27-9	6082-6090	requests	
27-10	6091-6096	begin	
27-11	6097-6099	to	
27-12	6100-6105	flood	
27-13	6106-6108	in	
27-14	6109-6112	and	
27-15	6113-6116	the	
27-16	6117-6128	application	
27-17	6129-6137	response	
27-18	6138-6142	will	
27-19	6143-6148	still	
27-20	6149-6151	be	
27-21	6152-6156	poor	
27-22	6157-6162	until	
27-23	6163-6166	the	
27-24	6167-6173	server	
27-25	6174-6181	catches	
27-26	6182-6184	up	
27-27	6184-6185	.	

#Text=It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be?
28-1	6186-6188	It	
28-2	6188-6189	’	
28-3	6189-6190	s	
28-4	6191-6197	during	
28-5	6198-6203	these	
28-6	6204-6209	times	
28-7	6210-6214	that	
28-8	6215-6218	the	
28-9	6219-6226	Control	
28-10	6227-6233	Center	
28-11	6234-6238	will	
28-12	6239-6243	lock	
28-13	6244-6246	up	
28-14	6247-6250	and	
28-15	6251-6253	be	
28-16	6254-6270	unresponsive.The	
28-17	6271-6285	million-dollar	
28-18	6286-6294	question	
28-19	6295-6297	of	
28-20	6298-6304	course	
28-21	6305-6307	is	
28-22	6307-6308	:	
28-23	6309-6313	when	
28-24	6314-6319	doing	
28-25	6320-6323	IIS	
28-26	6324-6330	tuning	
28-27	6331-6334	for	
28-28	6335-6346	Connectwise	
28-29	6347-6355	Automate	
28-30	6355-6356	,	
28-31	6357-6361	what	
28-32	6362-6368	should	
28-33	6369-6372	the	
28-34	6373-6378	queue	
28-35	6379-6385	length	
28-36	6386-6388	be	
28-37	6388-6389	?	

#Text=In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count).
29-1	6390-6392	In	
29-2	6393-6396	the	
29-3	6397-6403	spirit	
29-4	6404-6406	of	
29-5	6407-6410	the	
29-6	6411-6417	proper	
29-7	6418-6421	use	
29-8	6422-6424	of	
29-9	6425-6428	the	
29-10	6429-6434	queue	
29-11	6434-6435	,	
29-12	6436-6438	we	
29-13	6438-6439	’	
29-14	6439-6440	d	
29-15	6441-6448	suggest	
29-16	6449-6456	setting	
29-17	6457-6459	it	
29-18	6460-6462	to	
29-19	6463-6464	a	
29-20	6465-6470	count	
29-21	6471-6475	that	
29-22	6476-6481	could	
29-23	6482-6486	hold	
29-24	6487-6488	~	
29-25	6488-6490	60	
29-26	6491-6498	seconds	
29-27	6499-6504	worth	
29-28	6505-6507	of	
29-29	6508-6516	requests	
29-30	6517-6518	(	
29-31	6518-6526	normally	
29-32	6527-6531	this	
29-33	6532-6534	is	
29-34	6535-6536	~	
29-35	6536-6539	30%	
29-36	6540-6542	of	
29-37	6543-6546	the	
29-38	6547-6552	agent	
29-39	6553-6558	count	
29-40	6558-6559	)	
29-41	6559-6560	.	

#Text=If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool.
30-1	6561-6563	If	
30-2	6564-6566	it	
30-3	6567-6572	takes	
30-4	6573-6579	longer	
30-5	6580-6584	than	
30-6	6585-6587	60	
30-7	6588-6595	seconds	
30-8	6596-6598	to	
30-9	6599-6606	process	
30-10	6607-6608	a	
30-11	6609-6612	web	
30-12	6613-6620	request	
30-13	6621-6625	that	
30-14	6626-6635	indicates	
30-15	6636-6640	that	
30-16	6641-6646	there	
30-17	6647-6649	is	
30-18	6650-6651	a	
30-19	6652-6656	real	
30-20	6657-6662	issue	
30-21	6662-6663	,	
30-22	6664-6667	and	
30-23	6668-6670	it	
30-24	6671-6676	would	
30-25	6677-6681	make	
30-26	6682-6687	sense	
30-27	6688-6690	to	
30-28	6691-6696	start	
30-29	6697-6706	returning	
30-30	6707-6710	the	
30-31	6711-6714	503	
30-32	6715-6721	status	
30-33	6722-6729	code.As	
30-34	6730-6731	a	
30-35	6732-6738	simple	
30-36	6739-6743	test	
30-37	6744-6746	to	
30-38	6747-6752	gauge	
30-39	6753-6757	this	
30-40	6757-6758	,	
30-41	6759-6762	set	
30-42	6763-6774	Performance	
30-43	6775-6782	Monitor	
30-44	6783-6785	to	
30-45	6786-6791	watch	
30-46	6792-6795	the	
30-47	6796-6801	queue	
30-48	6802-6806	size	
30-49	6807-6810	and	
30-50	6811-6818	recycle	
30-51	6819-6822	the	
30-52	6823-6834	application	
30-53	6835-6839	pool	
30-54	6839-6840	.	

#Text=This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like.
31-1	6841-6845	This	
31-2	6846-6848	is	
31-3	6849-6857	normally	
31-4	6858-6863	lower	
31-5	6864-6868	than	
31-6	6869-6872	the	
31-7	6873-6876	30%	
31-8	6877-6879	of	
31-9	6880-6886	agents	
31-10	6887-6892	count	
31-11	6892-6893	,	
31-12	6894-6897	but	
31-13	6898-6900	it	
31-14	6900-6901	’	
31-15	6901-6902	s	
31-16	6903-6917	representative	
31-17	6918-6920	of	
31-18	6921-6925	what	
31-19	6926-6927	a	
31-20	6928-6933	short	
31-21	6934-6944	processing	
31-22	6945-6950	delay	
31-23	6951-6953	on	
31-24	6954-6957	the	
31-25	6958-6964	server	
31-26	6965-6971	should	
31-27	6972-6976	look	
31-28	6977-6981	like	
31-29	6981-6982	.	

#Text=If your queue length is comfortably larger than this amount then all is well.
32-1	6983-6985	If	
32-2	6986-6990	your	
32-3	6991-6996	queue	
32-4	6997-7003	length	
32-5	7004-7006	is	
32-6	7007-7018	comfortably	
32-7	7019-7025	larger	
32-8	7026-7030	than	
32-9	7031-7035	this	
32-10	7036-7042	amount	
32-11	7043-7047	then	
32-12	7048-7051	all	
32-13	7052-7054	is	
32-14	7055-7059	well	
32-15	7059-7060	.	

#Text=For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server.
33-1	7061-7064	For	
33-2	7065-7072	smaller	
33-3	7073-7081	Automate	
33-4	7082-7091	instances	
33-5	7092-7097	where	
33-6	7098-7101	30%	
33-7	7102-7104	of	
33-8	7105-7108	the	
33-9	7109-7114	agent	
33-10	7115-7120	count	
33-11	7121-7126	would	
33-12	7127-7129	be	
33-13	7130-7134	less	
33-14	7135-7139	than	
33-15	7140-7143	the	
33-16	7144-7151	default	
33-17	7152-7154	of	
33-18	7155-7159	1000	
33-19	7160-7168	sticking	
33-20	7169-7173	with	
33-21	7174-7177	the	
33-22	7178-7185	default	
33-23	7186-7193	setting	
33-24	7194-7196	is	
33-25	7197-7200	the	
33-26	7201-7205	best	
33-27	7206-7212	course	
33-28	7213-7215	of	
33-29	7216-7233	action.Connection	
33-30	7234-7242	LimitIIS	
33-31	7243-7247	also	
33-32	7248-7251	has	
33-33	7252-7253	a	
33-34	7254-7264	connection	
33-35	7265-7270	limit	
33-36	7271-7274	for	
33-37	7275-7278	all	
33-38	7279-7287	requests	
33-39	7288-7290	to	
33-40	7291-7292	a	
33-41	7293-7300	website	
33-42	7301-7303	on	
33-43	7304-7307	the	
33-44	7308-7314	server	
33-45	7314-7315	.	

#Text=The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch.
34-1	7316-7319	The	
34-2	7320-7327	default	
34-3	7328-7333	value	
34-4	7334-7337	for	
34-5	7338-7342	this	
34-6	7343-7345	is	
34-7	7346-7359	4,294,967,295	
34-8	7359-7360	,	
34-9	7361-7364	and	
34-10	7365-7367	it	
34-11	7367-7368	’	
34-12	7368-7369	s	
34-13	7370-7371	a	
34-14	7372-7379	setting	
34-15	7380-7384	that	
34-16	7385-7393	normally	
34-17	7394-7399	doesn	
34-18	7399-7400	’	
34-19	7400-7401	t	
34-20	7402-7405	get	
34-21	7406-7410	much	
34-22	7411-7420	attention	
34-23	7420-7421	,	
34-24	7422-7425	but	
34-25	7426-7428	it	
34-26	7429-7432	did	
34-27	7433-7436	get	
34-28	7437-7440	the	
34-29	7441-7450	spotlight	
34-30	7451-7457	during	
34-31	7458-7461	the	
34-32	7462-7468	2020.7	
34-33	7469-7477	Automate	
34-34	7478-7483	patch	
34-35	7483-7484	.	

#Text=This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence?
35-1	7485-7489	This	
35-2	7490-7497	setting	
35-3	7498-7500	is	
35-4	7501-7508	defined	
35-5	7509-7511	on	
35-6	7512-7515	the	
35-7	7516-7523	website	
35-8	7524-7529	level	
35-9	7529-7530	,	
35-10	7531-7534	and	
35-11	7535-7537	it	
35-12	7538-7540	is	
35-13	7541-7544	the	
35-14	7545-7551	funnel	
35-15	7552-7556	that	
35-16	7557-7562	feeds	
35-17	7563-7566	all	
35-18	7567-7569	of	
35-19	7570-7573	the	
35-20	7574-7583	different	
35-21	7584-7595	application	
35-22	7596-7604	pools.So	
35-23	7604-7605	,	
35-24	7606-7609	why	
35-25	7610-7614	does	
35-26	7615-7619	this	
35-27	7620-7627	setting	
35-28	7628-7635	default	
35-29	7636-7638	to	
35-30	7639-7642	the	
35-31	7643-7649	number	
35-32	7650-7652	of	
35-33	7653-7657	IPv4	
35-34	7658-7667	addresses	
35-35	7668-7670	in	
35-36	7671-7680	existence	
35-37	7680-7681	?	

#Text=This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously).
36-1	7682-7686	This	
36-2	7687-7692	value	
36-3	7693-7695	is	
36-4	7696-7699	set	
36-5	7700-7702	to	
36-6	7703-7706	the	
36-7	7707-7712	upper	
36-8	7713-7718	limit	
36-9	7719-7721	by	
36-10	7722-7729	default	
36-11	7730-7732	to	
36-12	7733-7740	prevent	
36-13	7741-7752	connections	
36-14	7753-7757	from	
36-15	7758-7763	being	
36-16	7764-7770	denied	
36-17	7771-7773	by	
36-18	7774-7781	default	
36-19	7782-7783	(	
36-20	7783-7786	the	
36-21	7787-7797	developers	
36-22	7798-7801	are	
36-23	7802-7809	hedging	
36-24	7810-7811	a	
36-25	7812-7815	bet	
36-26	7816-7820	that	
36-27	7821-7824	the	
36-28	7825-7830	whole	
36-29	7831-7839	internet	
36-30	7840-7843	won	
36-31	7843-7844	’	
36-32	7844-7845	t	
36-33	7846-7848	be	
36-34	7849-7858	accessing	
36-35	7859-7861	an	
36-36	7862-7865	IIS	
36-37	7866-7872	server	
36-38	7873-7887	simultaneously	
36-39	7887-7888	)	
36-40	7888-7889	.	

#Text=However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor.
37-1	7890-7897	However	
37-2	7897-7898	,	
37-3	7899-7902	the	
37-4	7903-7907	idea	
37-5	7908-7910	is	
37-6	7911-7915	that	
37-7	7916-7920	this	
37-8	7921-7926	value	
37-9	7927-7932	could	
37-10	7933-7935	be	
37-11	7936-7939	set	
37-12	7940-7942	to	
37-13	7943-7947	make	
37-14	7948-7952	sure	
37-15	7953-7957	that	
37-16	7958-7961	the	
37-17	7962-7965	sum	
37-18	7966-7968	of	
37-19	7969-7972	all	
37-20	7973-7984	connections	
37-21	7985-7987	to	
37-22	7988-7991	the	
37-23	7992-7998	server	
37-24	7999-8004	doesn	
37-25	8004-8005	’	
37-26	8005-8006	t	
37-27	8007-8013	exceed	
37-28	8014-8017	the	
37-29	8018-8027	available	
37-30	8028-8040	resources.If	
37-31	8041-8045	this	
37-32	8046-8053	setting	
37-33	8054-8056	is	
37-34	8057-8061	left	
37-35	8062-8064	to	
37-36	8065-8068	the	
37-37	8069-8076	default	
37-38	8076-8077	,	
37-39	8078-8081	the	
37-40	8082-8092	connection	
37-41	8093-8099	limits	
37-42	8100-8102	at	
37-43	8103-8106	the	
37-44	8107-8118	application	
37-45	8119-8123	pool	
37-46	8124-8129	layer	
37-47	8130-8133	are	
37-48	8134-8137	the	
37-49	8138-8149	controlling	
37-50	8150-8156	factor	
37-51	8156-8157	.	

#Text=The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate.
38-1	8158-8161	The	
38-2	8162-8168	danger	
38-3	8169-8173	here	
38-4	8174-8176	is	
38-5	8177-8181	that	
38-6	8182-8184	it	
38-7	8184-8185	’	
38-8	8185-8186	s	
38-9	8187-8195	possible	
38-10	8196-8199	for	
38-11	8200-8203	the	
38-12	8204-8207	sum	
38-13	8208-8210	of	
38-14	8211-8214	the	
38-15	8215-8226	application	
38-16	8227-8231	pool	
38-17	8232-8243	connections	
38-18	8244-8246	to	
38-19	8247-8249	be	
38-20	8250-8257	greater	
38-21	8258-8262	than	
38-22	8263-8266	the	
38-23	8267-8273	number	
38-24	8274-8276	of	
38-25	8277-8288	connections	
38-26	8289-8292	the	
38-27	8293-8299	server	
38-28	8300-8303	can	
38-29	8304-8315	accommodate	
38-30	8315-8316	.	

#Text=This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server.
39-1	8317-8321	This	
39-2	8322-8329	appears	
39-3	8330-8332	to	
39-4	8333-8335	be	
39-5	8336-8339	the	
39-6	8340-8345	issue	
39-7	8346-8350	with	
39-8	8351-8354	the	
39-9	8355-8361	2020.7	
39-10	8362-8367	patch	
39-11	8367-8368	,	
39-12	8369-8374	where	
39-13	8375-8378	the	
39-14	8379-8384	queue	
39-15	8385-8391	length	
39-16	8392-8394	on	
39-17	8395-8398	the	
39-18	8399-8410	application	
39-19	8411-8415	pool	
39-20	8416-8419	was	
39-21	8420-8423	too	
39-22	8424-8429	large	
39-23	8429-8430	,	
39-24	8431-8434	and	
39-25	8435-8439	thus	
39-26	8440-8443	the	
39-27	8444-8451	website	
39-28	8452-8462	connection	
39-29	8463-8468	limit	
39-30	8469-8472	was	
39-31	8473-8477	used	
39-32	8478-8480	to	
39-33	8481-8488	prevent	
39-34	8489-8500	overloading	
39-35	8501-8503	of	
39-36	8504-8507	the	
39-37	8508-8514	server	
39-38	8514-8515	.	

#Text=Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation.
40-1	8516-8525	Obviously	
40-2	8525-8526	,	
40-3	8527-8530	the	
40-4	8531-8541	conditions	
40-5	8542-8544	of	
40-6	8545-8548	the	
40-7	8549-8554	patch	
40-8	8555-8559	were	
40-9	8560-8561	a	
40-10	8562-8568	rather	
40-11	8569-8576	special	
40-12	8577-8581	case	
40-13	8581-8582	,	
40-14	8583-8586	but	
40-15	8587-8589	in	
40-16	8590-8597	general	
40-17	8597-8598	,	
40-18	8599-8601	it	
40-19	8602-8604	is	
40-20	8605-8607	of	
40-21	8608-8615	benefit	
40-22	8616-8618	to	
40-23	8619-8627	partners	
40-24	8628-8630	to	
40-25	8631-8640	configure	
40-26	8641-8646	their	
40-27	8647-8654	servers	
40-28	8655-8657	to	
40-29	8658-8660	be	
40-30	8661-8669	tolerant	
40-31	8670-8677	against	
40-32	8678-8688	connection	
40-33	8689-8700	spikes.When	
40-34	8701-8706	doing	
40-35	8707-8710	IIS	
40-36	8711-8717	tuning	
40-37	8718-8721	for	
40-38	8722-8733	Connectwise	
40-39	8734-8742	Automate	
40-40	8743-8747	this	
40-41	8748-8753	value	
40-42	8754-8760	should	
40-43	8761-8763	be	
40-44	8764-8767	set	
40-45	8768-8770	to	
40-46	8771-8774	the	
40-47	8775-8778	max	
40-48	8779-8785	number	
40-49	8786-8788	of	
40-50	8789-8800	connections	
40-51	8801-8804	the	
40-52	8805-8811	server	
40-53	8812-8815	can	
40-54	8816-8823	process	
40-55	8824-8825	—	
40-56	8826-8833	however	
40-57	8833-8834	,	
40-58	8835-8840	there	
40-59	8841-8844	are	
40-60	8845-8846	a	
40-61	8847-8850	lot	
40-62	8851-8853	of	
40-63	8854-8863	variables	
40-64	8864-8866	in	
40-65	8867-8871	that	
40-66	8872-8883	calculation	
40-67	8883-8884	.	

#Text=As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there.
41-1	8885-8887	As	
41-2	8888-8889	a	
41-3	8890-8898	starting	
41-4	8899-8904	point	
41-5	8904-8905	,	
41-6	8906-8908	it	
41-7	8908-8909	’	
41-8	8909-8910	s	
41-9	8911-8920	advisable	
41-10	8921-8923	to	
41-11	8924-8927	set	
41-12	8928-8932	this	
41-13	8933-8935	to	
41-14	8936-8939	the	
41-15	8940-8943	sum	
41-16	8944-8946	of	
41-17	8947-8950	the	
41-18	8951-8962	application	
41-19	8963-8967	pool	
41-20	8968-8974	queues	
41-21	8975-8979	once	
41-22	8980-8984	they	
41-23	8985-8988	are	
41-24	8989-8997	properly	
41-25	8998-9004	scaled	
41-26	9004-9005	,	
41-27	9006-9009	and	
41-28	9010-9014	work	
41-29	9015-9019	down	
41-30	9020-9024	from	
41-31	9025-9030	there	
41-32	9030-9031	.	

#Text=Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you.
42-1	9032-9038	Please	
42-2	9039-9043	keep	
42-3	9044-9046	in	
42-4	9047-9051	mind	
42-5	9052-9056	that	
42-6	9057-9061	this	
42-7	9062-9067	value	
42-8	9068-9072	will	
42-9	9073-9075	be	
42-10	9076-9079	the	
42-11	9080-9083	cap	
42-12	9084-9086	of	
42-13	9087-9092	agent	
42-14	9093-9107	communications	
42-15	9107-9108	,	
42-16	9109-9112	web	
42-17	9113-9122	interface	
42-18	9123-9128	users	
42-19	9128-9129	,	
42-20	9130-9133	and	
42-21	9134-9137	API	
42-22	9138-9143	calls	
42-23	9144-9145	—	
42-24	9146-9149	and	
42-25	9150-9153	the	
42-26	9154-9160	normal	
42-27	9161-9166	count	
42-28	9167-9169	of	
42-29	9170-9175	those	
42-30	9176-9180	will	
42-31	9181-9183	be	
42-32	9184-9193	different	
42-33	9194-9203	depending	
42-34	9204-9206	on	
42-35	9207-9211	user	
42-36	9212-9217	count	
42-37	9217-9218	,	
42-38	9219-9231	integrations	
42-39	9231-9232	,	
42-40	9233-9236	and	
42-41	9237-9240	how	
42-42	9241-9249	Automate	
42-43	9250-9252	is	
42-44	9253-9257	used	
42-45	9258-9260	in	
42-46	9261-9265	your	
42-47	9266-9276	particular	
42-48	9277-9291	environment.We	
42-49	9292-9296	hope	
42-50	9297-9301	that	
42-51	9302-9306	this	
42-52	9307-9310	has	
42-53	9311-9315	been	
42-54	9316-9323	helpful	
42-55	9324-9327	for	
42-56	9328-9331	you	
42-57	9331-9332	.	

#Text=Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack.
43-1	9333-9337	Here	
43-2	9338-9340	at	
43-3	9341-9351	Automation	
43-4	9352-9358	Theory	
43-5	9358-9359	,	
43-6	9360-9362	we	
43-7	9362-9363	’	
43-8	9363-9365	re	
43-9	9366-9375	certified	
43-10	9376-9381	MySQL	
43-11	9382-9386	DBAs	
43-12	9387-9396	dedicated	
43-13	9397-9408	exclusively	
43-14	9409-9411	to	
43-15	9412-9415	the	
43-16	9416-9427	Connectwise	
43-17	9428-9436	Automate	
43-18	9437-9445	software	
43-19	9446-9451	stack	
43-20	9451-9452	.	

#Text=Be sure to check out our integrations and services.
44-1	9453-9455	Be	
44-2	9456-9460	sure	
44-3	9461-9463	to	
44-4	9464-9469	check	
44-5	9470-9473	out	
44-6	9474-9477	our	
44-7	9477-9478	 	
44-8	9478-9490	integrations	
44-9	9490-9491	 	
44-10	9491-9494	and	
44-11	9494-9495	 	
44-12	9495-9503	services	
44-13	9503-9504	.	

#Text=Please leave this field emptyWant to get the latest from our blog delivered to your inbox?
45-1	9505-9511	Please	
45-2	9512-9517	leave	
45-3	9518-9522	this	
45-4	9523-9528	field	
45-5	9529-9538	emptyWant	
45-6	9539-9541	to	
45-7	9542-9545	get	
45-8	9546-9549	the	
45-9	9550-9556	latest	
45-10	9557-9561	from	
45-11	9562-9565	our	
45-12	9566-9570	blog	
45-13	9571-9580	delivered	
45-14	9581-9583	to	
45-15	9584-9588	your	
45-16	9589-9594	inbox	
45-17	9594-9595	?	

#Text=Check your inbox or spam folder to confirm your email!
46-1	9595-9600	Check	
46-2	9601-9605	your	
46-3	9606-9611	inbox	
46-4	9612-9614	or	
46-5	9615-9619	spam	
46-6	9620-9626	folder	
46-7	9627-9629	to	
46-8	9630-9637	confirm	
46-9	9638-9642	your	
46-10	9643-9648	email	
46-11	9648-9649	!	

#Text=Posted on
#Text=August 22, 2020August 31, 2020
#Text=Tags
#Text=Automate Performance
#Text=Categories
#Text=Performance
#Text=Post Author: Jeremy OaksPost navigationPrevious PostTop 5 myths about the Automate DatabaseNext PostMySQL 5.6
#Text=End of Life: What Connectwise Automate admins need to knowFacebookYoutubePrivacy PolicyTerms and Conditions Copyright © 2021 All Rights Reserved.
47-1	9650-9656	Posted	
47-2	9657-9659	on	
47-3	9660-9666	August	
47-4	9667-9669	22	
47-5	9669-9670	,	
47-6	9671-9681	2020August	
47-7	9682-9684	31	
47-8	9684-9685	,	
47-9	9686-9690	2020	
47-10	9691-9695	Tags	
47-11	9696-9704	Automate	
47-12	9705-9716	Performance	
47-13	9717-9727	Categories	
47-14	9728-9739	Performance	
47-15	9740-9744	Post	
47-16	9745-9751	Author	
47-17	9751-9752	:	
47-18	9753-9759	Jeremy	
47-19	9760-9768	OaksPost	
47-20	9769-9787	navigationPrevious	
47-21	9788-9795	PostTop	
47-22	9796-9797	5	
47-23	9798-9803	myths	
47-24	9804-9809	about	
47-25	9810-9813	the	
47-26	9814-9822	Automate	
47-27	9823-9835	DatabaseNext	
47-28	9836-9845	PostMySQL	
47-29	9846-9849	5.6	
47-30	9850-9853	End	
47-31	9854-9856	of	
47-32	9857-9861	Life	
47-33	9861-9862	:	
47-34	9863-9867	What	
47-35	9868-9879	Connectwise	
47-36	9880-9888	Automate	
47-37	9889-9895	admins	
47-38	9896-9900	need	
47-39	9901-9903	to	
47-40	9904-9930	knowFacebookYoutubePrivacy	
47-41	9931-9942	PolicyTerms	
47-42	9943-9946	and	
47-43	9947-9957	Conditions	
47-44	9958-9967	Copyright	
47-45	9968-9969	©	
47-46	9970-9974	2021	
47-47	9975-9978	All	
47-48	9979-9985	Rights	
47-49	9986-9994	Reserved	
47-50	9994-9995	.	
