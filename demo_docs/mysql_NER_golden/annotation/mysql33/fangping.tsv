#FORMAT=WebAnno TSV 3.3


#Text=Top 10 performance tuning techniques for Amazon Redshift | AWS Big Data Blog
#Text=Click here to return to Amazon Web Services homepage
#Text=Contact Sales
#Text=Support
#Text=English
#Text=My Account
#Text=Create an AWS Account
#Text=Products
#Text=Solutions
#Text=Pricing
#Text=Documentation
#Text=Learn
#Text=Partner Network
#Text=AWS Marketplace
#Text=Customer Enablement
#Text=Events
#Text=Explore More
#Text=عربي
#Text=Bahasa Indonesia
#Text=Deutsch
#Text=English
#Text=Español
#Text=Français
#Text=Italiano
#Text=Português
#Text=Tiếng Việt
#Text=Türkçe
#Text=Ρусский
#Text=ไทย
#Text=日本語
#Text=한국어
#Text=中文 (简体)
#Text=中文 (繁體)
#Text=AWS Management Console
#Text=Account Settings
#Text=Billing & Cost Management
#Text=Security Credentials
#Text=AWS Personal Health Dashboard
#Text=Support Center
#Text=Knowledge Center
#Text=AWS Support Overview
#Text=Click here to return to Amazon Web Services homepage
#Text=Products
#Text=Solutions
#Text=Pricing
#Text=Introduction to AWS
#Text=Getting Started
#Text=Documentation
#Text=Training and Certification
#Text=Developer Center
#Text=Customer Success
#Text=Partner Network
#Text=AWS Marketplace
#Text=Support
#Text=Log into Console
#Text=Download the Mobile App
#Text=Blog Home
#Text=Category
#Text=Edition
#Text=Follow
#Text=Architecture
#Text=AWS Cost Management
#Text=AWS Partner Network
#Text=AWS Podcast
#Text=AWS Marketplace
#Text=AWS News
#Text=Big Data
#Text=Business Productivity
#Text=Compute
#Text=Contact Center
#Text=Containers
#Text=Database
#Text=Desktop & Application Streaming
#Text=Developer
#Text=DevOps
#Text=Enterprise Strategy
#Text=Front-End Web & Mobile
#Text=Game Tech
#Text=HPC
#Text=Infrastructure & Automation
#Text=Industries
#Text=Internet of Things
#Text=Machine Learning
#Text=Management & Governance
#Text=Media
#Text=Messaging & Targeting
#Text=Modernizing with AWS
#Text=Networking & Content Delivery
#Text=Open Source
#Text=Public Sector
#Text=Quantum Computing
#Text=Robotics
#Text=SAP
#Text=Security, Identity, & Compliance
#Text=Startups
#Text=Storage
#Text=Training & Certification
#Text=中国版
#Text=Édition Française
#Text=Deutsche Edition
#Text=日本版
#Text=한국 에디션
#Text=Edição em Português
#Text=Edición en Español
#Text=English Edition
#Text=Версия на русском
#Text=Edisi Bahasa Indonesia
#Text=Mailing List
#Text=RSS Feed
#Text=AWS Big Data Blog
#Text=Top 10 performance tuning techniques for Amazon Redshift
#Text=Matt Scaer,
#Text=Manish Vazirani, and
#Text=Tarun Chaudhary | on
#Text=28 AUG 2020 | in
#Text=Amazon Redshift, Amazon Redshift, Analytics, AWS Big Data, Database |
#Text=Permalink |
#Text=Comments |
#Text=Share
#Text=Customers use Amazon Redshift for everything from accelerating existing database environments, to ingesting weblogs for big data analytics.
1-1	0-3	Top	
1-2	4-6	10	
1-3	7-18	performance	
1-4	19-25	tuning	
1-5	26-36	techniques	
1-6	37-40	for	
1-7	41-47	Amazon	
1-8	48-56	Redshift	
1-9	57-58	|	
1-10	59-62	AWS	
1-11	63-66	Big	
1-12	67-71	Data	
1-13	72-76	Blog	
1-14	77-82	Click	
1-15	83-87	here	
1-16	88-90	to	
1-17	91-97	return	
1-18	98-100	to	
1-19	101-107	Amazon	
1-20	108-111	Web	
1-21	112-120	Services	
1-22	121-129	homepage	
1-23	130-137	Contact	
1-24	138-143	Sales	
1-25	144-151	Support	
1-26	152-159	English	
1-27	160-162	My	
1-28	163-170	Account	
1-29	171-177	Create	
1-30	178-180	an	
1-31	181-184	AWS	
1-32	185-192	Account	
1-33	193-201	Products	
1-34	202-211	Solutions	
1-35	212-219	Pricing	
1-36	220-233	Documentation	
1-37	234-239	Learn	
1-38	240-247	Partner	
1-39	248-255	Network	
1-40	256-259	AWS	
1-41	260-271	Marketplace	
1-42	272-280	Customer	
1-43	281-291	Enablement	
1-44	292-298	Events	
1-45	299-306	Explore	
1-46	307-311	More	
1-47	312-316	عربي	
1-48	317-323	Bahasa	
1-49	324-333	Indonesia	
1-50	334-341	Deutsch	
1-51	342-349	English	
1-52	350-357	Español	
1-53	358-366	Français	
1-54	367-375	Italiano	
1-55	376-385	Português	
1-56	386-391	Tiếng	
1-57	392-396	Việt	
1-58	397-403	Türkçe	
1-59	404-411	Ρусский	
1-60	412-415	ไทย	
1-61	416-419	日本語	
1-62	420-423	한국어	
1-63	424-426	中文	
1-64	427-428	(	
1-65	428-430	简体	
1-66	430-431	)	
1-67	432-434	中文	
1-68	435-436	(	
1-69	436-438	繁體	
1-70	438-439	)	
1-71	440-443	AWS	
1-72	444-454	Management	
1-73	455-462	Console	
1-74	463-470	Account	
1-75	471-479	Settings	
1-76	480-487	Billing	
1-77	488-489	&	
1-78	490-494	Cost	
1-79	495-505	Management	
1-80	506-514	Security	
1-81	515-526	Credentials	
1-82	527-530	AWS	
1-83	531-539	Personal	
1-84	540-546	Health	
1-85	547-556	Dashboard	
1-86	557-564	Support	
1-87	565-571	Center	
1-88	572-581	Knowledge	
1-89	582-588	Center	
1-90	589-592	AWS	
1-91	593-600	Support	
1-92	601-609	Overview	
1-93	610-615	Click	
1-94	616-620	here	
1-95	621-623	to	
1-96	624-630	return	
1-97	631-633	to	
1-98	634-640	Amazon	
1-99	641-644	Web	
1-100	645-653	Services	
1-101	654-662	homepage	
1-102	663-671	Products	
1-103	672-681	Solutions	
1-104	682-689	Pricing	
1-105	690-702	Introduction	
1-106	703-705	to	
1-107	706-709	AWS	
1-108	710-717	Getting	
1-109	718-725	Started	
1-110	726-739	Documentation	
1-111	740-748	Training	
1-112	749-752	and	
1-113	753-766	Certification	
1-114	767-776	Developer	
1-115	777-783	Center	
1-116	784-792	Customer	
1-117	793-800	Success	
1-118	801-808	Partner	
1-119	809-816	Network	
1-120	817-820	AWS	
1-121	821-832	Marketplace	
1-122	833-840	Support	
1-123	841-844	Log	
1-124	845-849	into	
1-125	850-857	Console	
1-126	858-866	Download	
1-127	867-870	the	
1-128	871-877	Mobile	
1-129	878-881	App	
1-130	882-886	Blog	
1-131	887-891	Home	
1-132	892-900	Category	
1-133	901-908	Edition	
1-134	909-915	Follow	
1-135	916-928	Architecture	
1-136	929-932	AWS	
1-137	933-937	Cost	
1-138	938-948	Management	
1-139	949-952	AWS	
1-140	953-960	Partner	
1-141	961-968	Network	
1-142	969-972	AWS	
1-143	973-980	Podcast	
1-144	981-984	AWS	
1-145	985-996	Marketplace	
1-146	997-1000	AWS	
1-147	1001-1005	News	
1-148	1006-1009	Big	
1-149	1010-1014	Data	
1-150	1015-1023	Business	
1-151	1024-1036	Productivity	
1-152	1037-1044	Compute	
1-153	1045-1052	Contact	
1-154	1053-1059	Center	
1-155	1060-1070	Containers	
1-156	1071-1079	Database	
1-157	1080-1087	Desktop	
1-158	1088-1089	&	
1-159	1090-1101	Application	
1-160	1102-1111	Streaming	
1-161	1112-1121	Developer	
1-162	1122-1128	DevOps	
1-163	1129-1139	Enterprise	
1-164	1140-1148	Strategy	
1-165	1149-1158	Front-End	
1-166	1159-1162	Web	
1-167	1163-1164	&	
1-168	1165-1171	Mobile	
1-169	1172-1176	Game	
1-170	1177-1181	Tech	
1-171	1182-1185	HPC	
1-172	1186-1200	Infrastructure	
1-173	1201-1202	&	
1-174	1203-1213	Automation	
1-175	1214-1224	Industries	
1-176	1225-1233	Internet	
1-177	1234-1236	of	
1-178	1237-1243	Things	
1-179	1244-1251	Machine	
1-180	1252-1260	Learning	
1-181	1261-1271	Management	
1-182	1272-1273	&	
1-183	1274-1284	Governance	
1-184	1285-1290	Media	
1-185	1291-1300	Messaging	
1-186	1301-1302	&	
1-187	1303-1312	Targeting	
1-188	1313-1324	Modernizing	
1-189	1325-1329	with	
1-190	1330-1333	AWS	
1-191	1334-1344	Networking	
1-192	1345-1346	&	
1-193	1347-1354	Content	
1-194	1355-1363	Delivery	
1-195	1364-1368	Open	
1-196	1369-1375	Source	
1-197	1376-1382	Public	
1-198	1383-1389	Sector	
1-199	1390-1397	Quantum	
1-200	1398-1407	Computing	
1-201	1408-1416	Robotics	
1-202	1417-1420	SAP	
1-203	1421-1429	Security	
1-204	1429-1430	,	
1-205	1431-1439	Identity	
1-206	1439-1440	,	
1-207	1441-1442	&	
1-208	1443-1453	Compliance	
1-209	1454-1462	Startups	
1-210	1463-1470	Storage	
1-211	1471-1479	Training	
1-212	1480-1481	&	
1-213	1482-1495	Certification	
1-214	1496-1499	中国版	
1-215	1500-1507	Édition	
1-216	1508-1517	Française	
1-217	1518-1526	Deutsche	
1-218	1527-1534	Edition	
1-219	1535-1538	日本版	
1-220	1539-1541	한국	
1-221	1542-1545	에디션	
1-222	1546-1552	Edição	
1-223	1553-1555	em	
1-224	1556-1565	Português	
1-225	1566-1573	Edición	
1-226	1574-1576	en	
1-227	1577-1584	Español	
1-228	1585-1592	English	
1-229	1593-1600	Edition	
1-230	1601-1607	Версия	
1-231	1608-1610	на	
1-232	1611-1618	русском	
1-233	1619-1624	Edisi	
1-234	1625-1631	Bahasa	
1-235	1632-1641	Indonesia	
1-236	1642-1649	Mailing	
1-237	1650-1654	List	
1-238	1655-1658	RSS	
1-239	1659-1663	Feed	
1-240	1664-1667	AWS	
1-241	1668-1671	Big	
1-242	1672-1676	Data	
1-243	1677-1681	Blog	
1-244	1682-1685	Top	
1-245	1686-1688	10	
1-246	1689-1700	performance	
1-247	1701-1707	tuning	
1-248	1708-1718	techniques	
1-249	1719-1722	for	
1-250	1723-1729	Amazon	
1-251	1730-1738	Redshift	
1-252	1739-1743	Matt	
1-253	1744-1749	Scaer	
1-254	1749-1750	,	
1-255	1751-1757	Manish	
1-256	1758-1766	Vazirani	
1-257	1766-1767	,	
1-258	1768-1771	and	
1-259	1772-1777	Tarun	
1-260	1778-1787	Chaudhary	
1-261	1788-1789	|	
1-262	1790-1792	on	
1-263	1793-1795	28	
1-264	1796-1799	AUG	
1-265	1800-1804	2020	
1-266	1805-1806	|	
1-267	1807-1809	in	
1-268	1810-1816	Amazon	
1-269	1817-1825	Redshift	
1-270	1825-1826	,	
1-271	1827-1833	Amazon	
1-272	1834-1842	Redshift	
1-273	1842-1843	,	
1-274	1844-1853	Analytics	
1-275	1853-1854	,	
1-276	1855-1858	AWS	
1-277	1859-1862	Big	
1-278	1863-1867	Data	
1-279	1867-1868	,	
1-280	1869-1877	Database	
1-281	1878-1879	|	
1-282	1880-1889	Permalink	
1-283	1890-1891	|	
1-284	1892-1900	Comments	
1-285	1901-1902	|	
1-286	1903-1908	Share	
1-287	1909-1918	Customers	
1-288	1919-1922	use	
1-289	1923-1929	Amazon	
1-290	1930-1938	Redshift	
1-291	1939-1942	for	
1-292	1943-1953	everything	
1-293	1954-1958	from	
1-294	1959-1971	accelerating	
1-295	1972-1980	existing	
1-296	1981-1989	database	
1-297	1990-2002	environments	
1-298	2002-2003	,	
1-299	2004-2006	to	
1-300	2007-2016	ingesting	
1-301	2017-2024	weblogs	
1-302	2025-2028	for	
1-303	2029-2032	big	
1-304	2033-2037	data	
1-305	2038-2047	analytics	
1-306	2047-2048	.	

#Text=Amazon Redshift is a fully managed, petabyte-scale, massively parallel data warehouse that offers simple operations and high performance.
2-1	2049-2055	Amazon	
2-2	2056-2064	Redshift	
2-3	2065-2067	is	
2-4	2068-2069	a	
2-5	2070-2075	fully	
2-6	2076-2083	managed	
2-7	2083-2084	,	
2-8	2085-2099	petabyte-scale	
2-9	2099-2100	,	
2-10	2101-2110	massively	
2-11	2111-2119	parallel	
2-12	2120-2124	data	
2-13	2125-2134	warehouse	
2-14	2135-2139	that	
2-15	2140-2146	offers	
2-16	2147-2153	simple	
2-17	2154-2164	operations	
2-18	2165-2168	and	
2-19	2169-2173	high	
2-20	2174-2185	performance	
2-21	2185-2186	.	

#Text=Amazon Redshift provides an open standard JDBC/ODBC driver interface, which allows you to connect your existing business intelligence (BI) tools and reuse existing analytics queries.
3-1	2187-2193	Amazon	
3-2	2194-2202	Redshift	
3-3	2203-2211	provides	
3-4	2212-2214	an	
3-5	2215-2219	open	
3-6	2220-2228	standard	
3-7	2229-2233	JDBC	
3-8	2233-2234	/	
3-9	2234-2238	ODBC	
3-10	2239-2245	driver	
3-11	2246-2255	interface	
3-12	2255-2256	,	
3-13	2257-2262	which	
3-14	2263-2269	allows	
3-15	2270-2273	you	
3-16	2274-2276	to	
3-17	2277-2284	connect	
3-18	2285-2289	your	
3-19	2290-2298	existing	
3-20	2299-2307	business	
3-21	2308-2320	intelligence	
3-22	2321-2322	(	
3-23	2322-2324	BI	
3-24	2324-2325	)	
3-25	2326-2331	tools	
3-26	2332-2335	and	
3-27	2336-2341	reuse	
3-28	2342-2350	existing	
3-29	2351-2360	analytics	
3-30	2361-2368	queries	
3-31	2368-2369	.	

#Text=Amazon Redshift can run any type of data model, from a production transaction system third-normal-form model to star and snowflake schemas, data vault, or simple flat tables.
4-1	2370-2376	Amazon	
4-2	2377-2385	Redshift	
4-3	2386-2389	can	
4-4	2390-2393	run	
4-5	2394-2397	any	
4-6	2398-2402	type	
4-7	2403-2405	of	
4-8	2406-2410	data	
4-9	2411-2416	model	
4-10	2416-2417	,	
4-11	2418-2422	from	
4-12	2423-2424	a	
4-13	2425-2435	production	
4-14	2436-2447	transaction	
4-15	2448-2454	system	
4-16	2455-2472	third-normal-form	
4-17	2473-2478	model	
4-18	2479-2481	to	
4-19	2482-2486	star	
4-20	2487-2490	and	
4-21	2491-2500	snowflake	
4-22	2501-2508	schemas	
4-23	2508-2509	,	
4-24	2510-2514	data	
4-25	2515-2520	vault	
4-26	2520-2521	,	
4-27	2522-2524	or	
4-28	2525-2531	simple	
4-29	2532-2536	flat	
4-30	2537-2543	tables	
4-31	2543-2544	.	

#Text=This post takes you through the most common performance-related opportunities when adopting Amazon Redshift and gives you concrete guidance on how to optimize each one.
5-1	2545-2549	This	
5-2	2550-2554	post	
5-3	2555-2560	takes	
5-4	2561-2564	you	
5-5	2565-2572	through	
5-6	2573-2576	the	
5-7	2577-2581	most	
5-8	2582-2588	common	
5-9	2589-2608	performance-related	
5-10	2609-2622	opportunities	
5-11	2623-2627	when	
5-12	2628-2636	adopting	
5-13	2637-2643	Amazon	
5-14	2644-2652	Redshift	
5-15	2653-2656	and	
5-16	2657-2662	gives	
5-17	2663-2666	you	
5-18	2667-2675	concrete	
5-19	2676-2684	guidance	
5-20	2685-2687	on	
5-21	2688-2691	how	
5-22	2692-2694	to	
5-23	2695-2703	optimize	
5-24	2704-2708	each	
5-25	2709-2712	one	
5-26	2712-2713	.	

#Text=What’s new
#Text=This post refreshes the Top 10 post from early 2019.
6-1	2714-2718	What	
6-2	2718-2719	’	
6-3	2719-2720	s	
6-4	2721-2724	new	
6-5	2725-2729	This	
6-6	2730-2734	post	
6-7	2735-2744	refreshes	
6-8	2745-2748	the	
6-9	2749-2752	Top	
6-10	2753-2755	10	
6-11	2756-2760	post	
6-12	2761-2765	from	
6-13	2766-2771	early	
6-14	2772-2776	2019	
6-15	2776-2777	.	

#Text=We’re pleased to share the advances we’ve made since then, and want to highlight a few key points.
7-1	2778-2780	We	
7-2	2780-2781	’	
7-3	2781-2783	re	
7-4	2784-2791	pleased	
7-5	2792-2794	to	
7-6	2795-2800	share	
7-7	2801-2804	the	
7-8	2805-2813	advances	
7-9	2814-2816	we	
7-10	2816-2817	’	
7-11	2817-2819	ve	
7-12	2820-2824	made	
7-13	2825-2830	since	
7-14	2831-2835	then	
7-15	2835-2836	,	
7-16	2837-2840	and	
7-17	2841-2845	want	
7-18	2846-2848	to	
7-19	2849-2858	highlight	
7-20	2859-2860	a	
7-21	2861-2864	few	
7-22	2865-2868	key	
7-23	2869-2875	points	
7-24	2875-2876	.	

#Text=Query throughput is more important than query concurrency.
8-1	2877-2882	Query	
8-2	2883-2893	throughput	
8-3	2894-2896	is	
8-4	2897-2901	more	
8-5	2902-2911	important	
8-6	2912-2916	than	
8-7	2917-2922	query	
8-8	2923-2934	concurrency	
8-9	2934-2935	.	

#Text=Configuring concurrency, like memory management, can be relegated to Amazon Redshift’s internal ML models through Automatic WLM with Query Priorities.
9-1	2936-2947	Configuring	
9-2	2948-2959	concurrency	
9-3	2959-2960	,	
9-4	2961-2965	like	
9-5	2966-2972	memory	
9-6	2973-2983	management	
9-7	2983-2984	,	
9-8	2985-2988	can	
9-9	2989-2991	be	
9-10	2992-3001	relegated	
9-11	3002-3004	to	
9-12	3005-3011	Amazon	
9-13	3012-3020	Redshift	
9-14	3020-3021	’	
9-15	3021-3022	s	
9-16	3023-3031	internal	
9-17	3032-3034	ML	
9-18	3035-3041	models	
9-19	3042-3049	through	
9-20	3050-3059	Automatic	
9-21	3060-3063	WLM	
9-22	3064-3068	with	
9-23	3069-3074	Query	
9-24	3075-3085	Priorities	
9-25	3085-3086	.	

#Text=On production clusters across the fleet, we see the automated process assigning a much higher number of active statements for certain workloads, while a lower number for other types of use-cases.
10-1	3087-3089	On	
10-2	3090-3100	production	
10-3	3101-3109	clusters	
10-4	3110-3116	across	
10-5	3117-3120	the	
10-6	3121-3126	fleet	
10-7	3126-3127	,	
10-8	3128-3130	we	
10-9	3131-3134	see	
10-10	3135-3138	the	
10-11	3139-3148	automated	
10-12	3149-3156	process	
10-13	3157-3166	assigning	
10-14	3167-3168	a	
10-15	3169-3173	much	
10-16	3174-3180	higher	
10-17	3181-3187	number	
10-18	3188-3190	of	
10-19	3191-3197	active	
10-20	3198-3208	statements	
10-21	3209-3212	for	
10-22	3213-3220	certain	
10-23	3221-3230	workloads	
10-24	3230-3231	,	
10-25	3232-3237	while	
10-26	3238-3239	a	
10-27	3240-3245	lower	
10-28	3246-3252	number	
10-29	3253-3256	for	
10-30	3257-3262	other	
10-31	3263-3268	types	
10-32	3269-3271	of	
10-33	3272-3281	use-cases	
10-34	3281-3282	.	

#Text=This is done to maximize throughput, a measure of how much work the Amazon Redshift cluster can do over a period of time.
11-1	3283-3287	This	
11-2	3288-3290	is	
11-3	3291-3295	done	
11-4	3296-3298	to	
11-5	3299-3307	maximize	
11-6	3308-3318	throughput	
11-7	3318-3319	,	
11-8	3320-3321	a	
11-9	3322-3329	measure	
11-10	3330-3332	of	
11-11	3333-3336	how	
11-12	3337-3341	much	
11-13	3342-3346	work	
11-14	3347-3350	the	
11-15	3351-3357	Amazon	
11-16	3358-3366	Redshift	
11-17	3367-3374	cluster	
11-18	3375-3378	can	
11-19	3379-3381	do	
11-20	3382-3386	over	
11-21	3387-3388	a	
11-22	3389-3395	period	
11-23	3396-3398	of	
11-24	3399-3403	time	
11-25	3403-3404	.	

#Text=Examples are 300 queries a minute, or 1,500 SQL statements an hour.
12-1	3405-3413	Examples	
12-2	3414-3417	are	
12-3	3418-3421	300	
12-4	3422-3429	queries	
12-5	3430-3431	a	
12-6	3432-3438	minute	
12-7	3438-3439	,	
12-8	3440-3442	or	
12-9	3443-3448	1,500	
12-10	3449-3452	SQL	
12-11	3453-3463	statements	
12-12	3464-3466	an	
12-13	3467-3471	hour	
12-14	3471-3472	.	

#Text=It’s recommended to focus on increasing throughput over concurrency, because throughput is the metric with much more direct impact on the cluster’s users.
13-1	3473-3475	It	
13-2	3475-3476	’	
13-3	3476-3477	s	
13-4	3478-3489	recommended	
13-5	3490-3492	to	
13-6	3493-3498	focus	
13-7	3499-3501	on	
13-8	3502-3512	increasing	
13-9	3513-3523	throughput	
13-10	3524-3528	over	
13-11	3529-3540	concurrency	
13-12	3540-3541	,	
13-13	3542-3549	because	
13-14	3549-3550	 	
13-15	3550-3560	throughput	
13-16	3561-3563	is	
13-17	3564-3567	the	
13-18	3568-3574	metric	
13-19	3575-3579	with	
13-20	3580-3584	much	
13-21	3585-3589	more	
13-22	3590-3596	direct	
13-23	3597-3603	impact	
13-24	3604-3606	on	
13-25	3607-3610	the	
13-26	3611-3618	cluster	
13-27	3618-3619	’	
13-28	3619-3620	s	
13-29	3621-3626	users	
13-30	3626-3627	.	

#Text=In addition to the optimized Automatic WLM settings to maximize throughput, the concurrency scaling functionality in Amazon Redshift extends the throughput capability of the cluster to up to 10 times greater than what’s delivered with the original cluster.
14-1	3628-3630	In	
14-2	3631-3639	addition	
14-3	3640-3642	to	
14-4	3643-3646	the	
14-5	3647-3656	optimized	
14-6	3657-3666	Automatic	
14-7	3667-3670	WLM	
14-8	3671-3679	settings	
14-9	3680-3682	to	
14-10	3683-3691	maximize	
14-11	3692-3702	throughput	
14-12	3702-3703	,	
14-13	3704-3707	the	
14-14	3708-3719	concurrency	
14-15	3720-3727	scaling	
14-16	3728-3741	functionality	
14-17	3742-3744	in	
14-18	3745-3751	Amazon	
14-19	3752-3760	Redshift	
14-20	3761-3768	extends	
14-21	3769-3772	the	
14-22	3773-3783	throughput	
14-23	3784-3794	capability	
14-24	3795-3797	of	
14-25	3798-3801	the	
14-26	3802-3809	cluster	
14-27	3810-3812	to	
14-28	3813-3815	up	
14-29	3816-3818	to	
14-30	3819-3821	10	
14-31	3822-3827	times	
14-32	3828-3835	greater	
14-33	3836-3840	than	
14-34	3841-3845	what	
14-35	3845-3846	’	
14-36	3846-3847	s	
14-37	3848-3857	delivered	
14-38	3858-3862	with	
14-39	3863-3866	the	
14-40	3867-3875	original	
14-41	3876-3883	cluster	
14-42	3883-3884	.	

#Text=The tenfold increase is a current soft limit, you can reach out to your account team to increase it.
15-1	3885-3888	The	
15-2	3889-3896	tenfold	
15-3	3897-3905	increase	
15-4	3906-3908	is	
15-5	3909-3910	a	
15-6	3911-3918	current	
15-7	3919-3923	soft	
15-8	3924-3929	limit	
15-9	3929-3930	,	
15-10	3931-3934	you	
15-11	3935-3938	can	
15-12	3939-3944	reach	
15-13	3945-3948	out	
15-14	3949-3951	to	
15-15	3952-3956	your	
15-16	3957-3964	account	
15-17	3965-3969	team	
15-18	3970-3972	to	
15-19	3973-3981	increase	
15-20	3982-3984	it	
15-21	3984-3985	.	

#Text=Investing in the Amazon Redshift driver.
16-1	3986-3995	Investing	
16-2	3996-3998	in	
16-3	3999-4002	the	
16-4	4003-4009	Amazon	
16-5	4010-4018	Redshift	
16-6	4019-4025	driver	
16-7	4025-4026	.	

#Text=AWS now recommends the Amazon Redshift JDBC or ODBC driver for improved performance.
17-1	4027-4030	AWS	
17-2	4031-4034	now	
17-3	4035-4045	recommends	
17-4	4046-4049	the	
17-5	4050-4056	Amazon	
17-6	4057-4065	Redshift	
17-7	4066-4070	JDBC	
17-8	4071-4073	or	
17-9	4074-4078	ODBC	
17-10	4079-4085	driver	
17-11	4086-4089	for	
17-12	4090-4098	improved	
17-13	4099-4110	performance	
17-14	4110-4111	.	

#Text=Each driver has optional configurations to further tune it for higher or lower number of statements, with either fewer or greater row counts in the result set.
18-1	4112-4116	Each	
18-2	4117-4123	driver	
18-3	4124-4127	has	
18-4	4128-4136	optional	
18-5	4137-4151	configurations	
18-6	4152-4154	to	
18-7	4155-4162	further	
18-8	4163-4167	tune	
18-9	4168-4170	it	
18-10	4171-4174	for	
18-11	4175-4181	higher	
18-12	4182-4184	or	
18-13	4185-4190	lower	
18-14	4191-4197	number	
18-15	4198-4200	of	
18-16	4201-4211	statements	
18-17	4211-4212	,	
18-18	4213-4217	with	
18-19	4218-4224	either	
18-20	4225-4230	fewer	
18-21	4231-4233	or	
18-22	4234-4241	greater	
18-23	4242-4245	row	
18-24	4246-4252	counts	
18-25	4253-4255	in	
18-26	4256-4259	the	
18-27	4260-4266	result	
18-28	4267-4270	set	
18-29	4270-4271	.	

#Text=Ease of use by automating all the common DBA tasks.
19-1	4272-4276	Ease	
19-2	4277-4279	of	
19-3	4280-4283	use	
19-4	4284-4286	by	
19-5	4287-4297	automating	
19-6	4298-4301	all	
19-7	4302-4305	the	
19-8	4306-4312	common	
19-9	4313-4316	DBA	
19-10	4317-4322	tasks	
19-11	4322-4323	.	

#Text=In 2018, the SET DW “backronym” summarized the key considerations to drive performance (sort key, encoding, table maintenance, distribution, and workload management).
20-1	4324-4326	In	
20-2	4327-4331	2018	
20-3	4331-4332	,	
20-4	4333-4336	the	
20-5	4337-4340	SET	
20-6	4341-4343	DW	
20-7	4344-4345	“	
20-8	4345-4354	backronym	
20-9	4354-4355	”	
20-10	4356-4366	summarized	
20-11	4367-4370	the	
20-12	4371-4374	key	
20-13	4375-4389	considerations	
20-14	4390-4392	to	
20-15	4393-4398	drive	
20-16	4399-4410	performance	
20-17	4411-4412	(	
20-18	4412-4416	sort	
20-19	4417-4420	key	
20-20	4420-4421	,	
20-21	4422-4430	encoding	
20-22	4430-4431	,	
20-23	4432-4437	table	
20-24	4438-4449	maintenance	
20-25	4449-4450	,	
20-26	4451-4463	distribution	
20-27	4463-4464	,	
20-28	4465-4468	and	
20-29	4469-4477	workload	
20-30	4478-4488	management	
20-31	4488-4489	)	
20-32	4489-4490	.	

#Text=Since then, Amazon Redshift has added automation to inform 100% of SET DW, absorbed table maintenance into the service’s (and no longer the user’s) responsibility, and enhanced out-of-the-box performance with smarter default settings.
21-1	4491-4496	Since	
21-2	4497-4501	then	
21-3	4501-4502	,	
21-4	4503-4509	Amazon	
21-5	4510-4518	Redshift	
21-6	4519-4522	has	
21-7	4523-4528	added	
21-8	4529-4539	automation	
21-9	4540-4542	to	
21-10	4543-4549	inform	
21-11	4550-4554	100%	
21-12	4555-4557	of	
21-13	4558-4561	SET	
21-14	4562-4564	DW	
21-15	4564-4565	,	
21-16	4566-4574	absorbed	
21-17	4575-4580	table	
21-18	4581-4592	maintenance	
21-19	4593-4597	into	
21-20	4598-4601	the	
21-21	4602-4609	service	
21-22	4609-4610	’	
21-23	4610-4611	s	
21-24	4612-4613	(	
21-25	4613-4616	and	
21-26	4617-4619	no	
21-27	4620-4626	longer	
21-28	4627-4630	the	
21-29	4631-4635	user	
21-30	4635-4636	’	
21-31	4636-4637	s	
21-32	4637-4638	)	
21-33	4639-4653	responsibility	
21-34	4653-4654	,	
21-35	4655-4658	and	
21-36	4659-4667	enhanced	
21-37	4668-4682	out-of-the-box	
21-38	4683-4694	performance	
21-39	4695-4699	with	
21-40	4700-4707	smarter	
21-41	4708-4715	default	
21-42	4716-4724	settings	
21-43	4724-4725	.	

#Text=Amazon Redshift Advisor continuously monitors the cluster for additional optimization opportunities, even if the mission of a table changes over time.
22-1	4726-4732	Amazon	
22-2	4733-4741	Redshift	
22-3	4742-4749	Advisor	
22-4	4750-4762	continuously	
22-5	4763-4771	monitors	
22-6	4772-4775	the	
22-7	4776-4783	cluster	
22-8	4784-4787	for	
22-9	4788-4798	additional	
22-10	4799-4811	optimization	
22-11	4812-4825	opportunities	
22-12	4825-4826	,	
22-13	4827-4831	even	
22-14	4832-4834	if	
22-15	4835-4838	the	
22-16	4839-4846	mission	
22-17	4847-4849	of	
22-18	4850-4851	a	
22-19	4852-4857	table	
22-20	4858-4865	changes	
22-21	4866-4870	over	
22-22	4871-4875	time	
22-23	4875-4876	.	

#Text=AWS publishes the benchmark used to quantify Amazon Redshift performance, so anyone can reproduce the results.
23-1	4877-4880	AWS	
23-2	4881-4890	publishes	
23-3	4891-4894	the	
23-4	4895-4904	benchmark	
23-5	4905-4909	used	
23-6	4910-4912	to	
23-7	4913-4921	quantify	
23-8	4922-4928	Amazon	
23-9	4929-4937	Redshift	
23-10	4938-4949	performance	
23-11	4949-4950	,	
23-12	4951-4953	so	
23-13	4954-4960	anyone	
23-14	4961-4964	can	
23-15	4965-4974	reproduce	
23-16	4975-4978	the	
23-17	4979-4986	results	
23-18	4986-4987	.	

#Text=Scaling compute separately from storage with RA3 nodes and Amazon Redshift Spectrum.
24-1	4988-4995	Scaling	
24-2	4996-5003	compute	
24-3	5004-5014	separately	
24-4	5015-5019	from	
24-5	5020-5027	storage	
24-6	5028-5032	with	
24-7	5033-5036	RA3	
24-8	5037-5042	nodes	
24-9	5043-5046	and	
24-10	5047-5053	Amazon	
24-11	5054-5062	Redshift	
24-12	5063-5071	Spectrum	
24-13	5071-5072	.	

#Text=Although the convenient cluster building blocks of the Dense Compute and Dense Storage nodes continue to be available, you now have a variety of tools to further scale compute and storage separately.
25-1	5073-5081	Although	
25-2	5082-5085	the	
25-3	5086-5096	convenient	
25-4	5097-5104	cluster	
25-5	5105-5113	building	
25-6	5114-5120	blocks	
25-7	5121-5123	of	
25-8	5124-5127	the	
25-9	5128-5133	Dense	
25-10	5134-5141	Compute	
25-11	5142-5145	and	
25-12	5146-5151	Dense	
25-13	5152-5159	Storage	
25-14	5160-5165	nodes	
25-15	5166-5174	continue	
25-16	5175-5177	to	
25-17	5178-5180	be	
25-18	5181-5190	available	
25-19	5190-5191	,	
25-20	5192-5195	you	
25-21	5196-5199	now	
25-22	5200-5204	have	
25-23	5205-5206	a	
25-24	5207-5214	variety	
25-25	5215-5217	of	
25-26	5218-5223	tools	
25-27	5224-5226	to	
25-28	5227-5234	further	
25-29	5235-5240	scale	
25-30	5241-5248	compute	
25-31	5249-5252	and	
25-32	5253-5260	storage	
25-33	5261-5271	separately	
25-34	5271-5272	.	

#Text=Amazon Redshift Managed Storage (the RA3 node family) allows for focusing on using the right amount of compute, without worrying about sizing for storage.
26-1	5273-5279	Amazon	
26-2	5280-5288	Redshift	
26-3	5289-5296	Managed	
26-4	5297-5304	Storage	
26-5	5305-5306	(	
26-6	5306-5309	the	
26-7	5310-5313	RA3	
26-8	5314-5318	node	
26-9	5319-5325	family	
26-10	5325-5326	)	
26-11	5327-5333	allows	
26-12	5334-5337	for	
26-13	5338-5346	focusing	
26-14	5347-5349	on	
26-15	5350-5355	using	
26-16	5356-5359	the	
26-17	5360-5365	right	
26-18	5366-5372	amount	
26-19	5373-5375	of	
26-20	5376-5383	compute	
26-21	5383-5384	,	
26-22	5385-5392	without	
26-23	5393-5401	worrying	
26-24	5402-5407	about	
26-25	5408-5414	sizing	
26-26	5415-5418	for	
26-27	5419-5426	storage	
26-28	5426-5427	.	

#Text=Concurrency scaling lets you specify entire additional clusters of compute to be applied dynamically as-needed.
27-1	5428-5439	Concurrency	
27-2	5440-5447	scaling	
27-3	5448-5452	lets	
27-4	5453-5456	you	
27-5	5457-5464	specify	
27-6	5465-5471	entire	
27-7	5472-5482	additional	
27-8	5483-5491	clusters	
27-9	5492-5494	of	
27-10	5495-5502	compute	
27-11	5503-5505	to	
27-12	5506-5508	be	
27-13	5509-5516	applied	
27-14	5517-5528	dynamically	
27-15	5529-5538	as-needed	
27-16	5538-5539	.	

#Text=Amazon Redshift Spectrum uses the functionally-infinite capacity of Amazon Simple Storage Service (Amazon S3) to support an on-demand compute layer up to 10 times the power of the main cluster, and is now bolstered with materialized view support.
28-1	5540-5546	Amazon	
28-2	5547-5555	Redshift	
28-3	5556-5564	Spectrum	
28-4	5565-5569	uses	
28-5	5570-5573	the	
28-6	5574-5595	functionally-infinite	
28-7	5596-5604	capacity	
28-8	5605-5607	of	
28-9	5608-5614	Amazon	
28-10	5615-5621	Simple	
28-11	5622-5629	Storage	
28-12	5630-5637	Service	
28-13	5638-5639	(	
28-14	5639-5645	Amazon	
28-15	5646-5648	S3	
28-16	5648-5649	)	
28-17	5650-5652	to	
28-18	5653-5660	support	
28-19	5661-5663	an	
28-20	5664-5673	on-demand	
28-21	5674-5681	compute	
28-22	5682-5687	layer	
28-23	5688-5690	up	
28-24	5691-5693	to	
28-25	5694-5696	10	
28-26	5697-5702	times	
28-27	5703-5706	the	
28-28	5707-5712	power	
28-29	5713-5715	of	
28-30	5716-5719	the	
28-31	5720-5724	main	
28-32	5725-5732	cluster	
28-33	5732-5733	,	
28-34	5734-5737	and	
28-35	5738-5740	is	
28-36	5741-5744	now	
28-37	5745-5754	bolstered	
28-38	5755-5759	with	
28-39	5760-5772	materialized	
28-40	5773-5777	view	
28-41	5778-5785	support	
28-42	5785-5786	.	

#Text=Pause and resume feature to optimize cost of environments
#Text=All Amazon Redshift clusters can use the pause and resume feature.
29-1	5787-5792	Pause	
29-2	5793-5796	and	
29-3	5797-5803	resume	
29-4	5804-5811	feature	
29-5	5812-5814	to	
29-6	5815-5823	optimize	
29-7	5824-5828	cost	
29-8	5829-5831	of	
29-9	5832-5844	environments	
29-10	5845-5848	All	
29-11	5849-5855	Amazon	
29-12	5856-5864	Redshift	
29-13	5865-5873	clusters	
29-14	5874-5877	can	
29-15	5878-5881	use	
29-16	5882-5885	the	
29-17	5886-5891	pause	
29-18	5892-5895	and	
29-19	5896-5902	resume	
29-20	5903-5910	feature	
29-21	5910-5911	.	

#Text=For clusters created using On Demand, the per-second grain billing is stopped when the cluster is paused.
30-1	5912-5915	For	
30-2	5916-5924	clusters	
30-3	5925-5932	created	
30-4	5933-5938	using	
30-5	5939-5941	On	
30-6	5942-5948	Demand	
30-7	5948-5949	,	
30-8	5950-5953	the	
30-9	5954-5964	per-second	
30-10	5965-5970	grain	
30-11	5971-5978	billing	
30-12	5979-5981	is	
30-13	5982-5989	stopped	
30-14	5990-5994	when	
30-15	5995-5998	the	
30-16	5999-6006	cluster	
30-17	6007-6009	is	
30-18	6010-6016	paused	
30-19	6016-6017	.	

#Text=Reserved Instance clusters can use the pause and resume feature to define access times or freeze a dataset at a point in time.
31-1	6018-6026	Reserved	
31-2	6027-6035	Instance	
31-3	6036-6044	clusters	
31-4	6045-6048	can	
31-5	6049-6052	use	
31-6	6053-6056	the	
31-7	6057-6062	pause	
31-8	6063-6066	and	
31-9	6067-6073	resume	
31-10	6074-6081	feature	
31-11	6082-6084	to	
31-12	6085-6091	define	
31-13	6092-6098	access	
31-14	6099-6104	times	
31-15	6105-6107	or	
31-16	6108-6114	freeze	
31-17	6115-6116	a	
31-18	6117-6124	dataset	
31-19	6125-6127	at	
31-20	6128-6129	a	
31-21	6130-6135	point	
31-22	6136-6138	in	
31-23	6139-6143	time	
31-24	6143-6144	.	

#Text=Tip #1: Precomputing results with Amazon Redshift materialized views
#Text=Materialized views can significantly boost query performance for repeated and predictable analytical workloads such as dash-boarding, queries from BI tools, and extract, load, transform (ELT) data processing.
32-1	6145-6148	Tip	
32-2	6149-6151	#1	
32-3	6151-6152	:	
32-4	6153-6165	Precomputing	
32-5	6166-6173	results	
32-6	6174-6178	with	
32-7	6179-6185	Amazon	
32-8	6186-6194	Redshift	
32-9	6195-6207	materialized	
32-10	6208-6213	views	
32-11	6214-6226	Materialized	
32-12	6227-6232	views	
32-13	6233-6236	can	
32-14	6237-6250	significantly	
32-15	6251-6256	boost	
32-16	6257-6262	query	
32-17	6263-6274	performance	
32-18	6275-6278	for	
32-19	6279-6287	repeated	
32-20	6288-6291	and	
32-21	6292-6303	predictable	
32-22	6304-6314	analytical	
32-23	6315-6324	workloads	
32-24	6325-6329	such	
32-25	6330-6332	as	
32-26	6333-6346	dash-boarding	
32-27	6346-6347	,	
32-28	6348-6355	queries	
32-29	6356-6360	from	
32-30	6361-6363	BI	
32-31	6364-6369	tools	
32-32	6369-6370	,	
32-33	6371-6374	and	
32-34	6375-6382	extract	
32-35	6382-6383	,	
32-36	6384-6388	load	
32-37	6388-6389	,	
32-38	6390-6399	transform	
32-39	6400-6401	(	
32-40	6401-6404	ELT	
32-41	6404-6405	)	
32-42	6406-6410	data	
32-43	6411-6421	processing	
32-44	6421-6422	.	

#Text=Data engineers can easily create and maintain efficient data-processing pipelines with materialized views while seamlessly extending the performance benefits to data analysts and BI tools.
33-1	6423-6427	Data	
33-2	6428-6437	engineers	
33-3	6438-6441	can	
33-4	6442-6448	easily	
33-5	6449-6455	create	
33-6	6456-6459	and	
33-7	6460-6468	maintain	
33-8	6469-6478	efficient	
33-9	6479-6494	data-processing	
33-10	6495-6504	pipelines	
33-11	6505-6509	with	
33-12	6510-6522	materialized	
33-13	6523-6528	views	
33-14	6529-6534	while	
33-15	6535-6545	seamlessly	
33-16	6546-6555	extending	
33-17	6556-6559	the	
33-18	6560-6571	performance	
33-19	6572-6580	benefits	
33-20	6581-6583	to	
33-21	6584-6588	data	
33-22	6589-6597	analysts	
33-23	6598-6601	and	
33-24	6602-6604	BI	
33-25	6605-6610	tools	
33-26	6610-6611	.	

#Text=Materialized views are especially useful for queries that are predictable and repeated over and over.
34-1	6612-6624	Materialized	
34-2	6625-6630	views	
34-3	6631-6634	are	
34-4	6635-6645	especially	
34-5	6646-6652	useful	
34-6	6653-6656	for	
34-7	6657-6664	queries	
34-8	6665-6669	that	
34-9	6670-6673	are	
34-10	6674-6685	predictable	
34-11	6686-6689	and	
34-12	6690-6698	repeated	
34-13	6699-6703	over	
34-14	6704-6707	and	
34-15	6708-6712	over	
34-16	6712-6713	.	

#Text=Instead of performing resource-intensive queries on large tables, applications can query the pre-computed data stored in the materialized view.
35-1	6714-6721	Instead	
35-2	6722-6724	of	
35-3	6725-6735	performing	
35-4	6736-6754	resource-intensive	
35-5	6755-6762	queries	
35-6	6763-6765	on	
35-7	6766-6771	large	
35-8	6772-6778	tables	
35-9	6778-6779	,	
35-10	6780-6792	applications	
35-11	6793-6796	can	
35-12	6797-6802	query	
35-13	6803-6806	the	
35-14	6807-6819	pre-computed	
35-15	6820-6824	data	
35-16	6825-6831	stored	
35-17	6832-6834	in	
35-18	6835-6838	the	
35-19	6839-6851	materialized	
35-20	6852-6856	view	
35-21	6856-6857	.	

#Text=When the data in the base tables changes, you refresh the materialized view by issuing the Amazon Redshift SQL statement “refresh materialized view“.
36-1	6858-6862	When	
36-2	6863-6866	the	
36-3	6867-6871	data	
36-4	6872-6874	in	
36-5	6875-6878	the	
36-6	6879-6883	base	
36-7	6884-6890	tables	
36-8	6891-6898	changes	
36-9	6898-6899	,	
36-10	6900-6903	you	
36-11	6904-6911	refresh	
36-12	6912-6915	the	
36-13	6916-6928	materialized	
36-14	6929-6933	view	
36-15	6934-6936	by	
36-16	6937-6944	issuing	
36-17	6945-6948	the	
36-18	6949-6955	Amazon	
36-19	6955-6956	 	
36-20	6956-6964	Redshift	
36-21	6964-6965	 	
36-22	6965-6968	SQL	
36-23	6969-6978	statement	
36-24	6979-6980	“	
36-25	6980-6987	refresh	
36-26	6988-7000	materialized	
36-27	7001-7005	view	
36-28	7005-7006	“	
36-29	7006-7007	.	

#Text=After issuing a refresh statement, your materialized view contains the same data as a regular view.
37-1	7008-7013	After	
37-2	7014-7021	issuing	
37-3	7022-7023	a	
37-4	7024-7031	refresh	
37-5	7032-7041	statement	
37-6	7041-7042	,	
37-7	7043-7047	your	
37-8	7048-7060	materialized	
37-9	7061-7065	view	
37-10	7066-7074	contains	
37-11	7075-7078	the	
37-12	7079-7083	same	
37-13	7084-7088	data	
37-14	7089-7091	as	
37-15	7092-7093	a	
37-16	7094-7101	regular	
37-17	7102-7106	view	
37-18	7106-7107	.	

#Text=Refreshes can be incremental or full refreshes (recompute).
38-1	7108-7117	Refreshes	
38-2	7118-7121	can	
38-3	7122-7124	be	
38-4	7125-7136	incremental	
38-5	7137-7139	or	
38-6	7140-7144	full	
38-7	7145-7154	refreshes	
38-8	7155-7156	(	
38-9	7156-7165	recompute	
38-10	7165-7166	)	
38-11	7166-7167	.	

#Text=When possible, Amazon Redshift incrementally refreshes data that changed in the base tables since the materialized view was last refreshed.
39-1	7168-7172	When	
39-2	7173-7181	possible	
39-3	7181-7182	,	
39-4	7183-7189	Amazon	
39-5	7190-7198	Redshift	
39-6	7198-7199	 	
39-7	7199-7212	incrementally	
39-8	7213-7222	refreshes	
39-9	7223-7227	data	
39-10	7228-7232	that	
39-11	7233-7240	changed	
39-12	7241-7243	in	
39-13	7244-7247	the	
39-14	7248-7252	base	
39-15	7253-7259	tables	
39-16	7260-7265	since	
39-17	7266-7269	the	
39-18	7270-7282	materialized	
39-19	7283-7287	view	
39-20	7288-7291	was	
39-21	7292-7296	last	
39-22	7297-7306	refreshed	
39-23	7306-7307	.	

#Text=To demonstrate how it works, we can create an example schema to store sales information, each sale transaction and details about the store where the sales took place.
40-1	7308-7310	To	
40-2	7311-7322	demonstrate	
40-3	7323-7326	how	
40-4	7327-7329	it	
40-5	7330-7335	works	
40-6	7335-7336	,	
40-7	7337-7339	we	
40-8	7340-7343	can	
40-9	7344-7350	create	
40-10	7351-7353	an	
40-11	7354-7361	example	
40-12	7362-7368	schema	
40-13	7369-7371	to	
40-14	7372-7377	store	
40-15	7378-7383	sales	
40-16	7384-7395	information	
40-17	7395-7396	,	
40-18	7397-7401	each	
40-19	7402-7406	sale	
40-20	7407-7418	transaction	
40-21	7419-7422	and	
40-22	7423-7430	details	
40-23	7431-7436	about	
40-24	7437-7440	the	
40-25	7441-7446	store	
40-26	7447-7452	where	
40-27	7453-7456	the	
40-28	7457-7462	sales	
40-29	7463-7467	took	
40-30	7468-7473	place	
40-31	7473-7474	.	

#Text=To view the total amount of sales per city, we create a materialized view with the create materialized view SQL statement (city_sales) joining records from two tables and aggregating sales amount (sum(sales.amount)) per city (group by city):
#Text=CREATE MATERIALIZED VIEW city_sales AS
#Text=SELECT st.city, SUM(sa.amount) as total_sales
#Text=FROM sales sa, store st
#Text=WHERE sa.store_id = st.id
#Text=GROUP BY st.city
#Text=Now we can query the materialized view just like a regular view or table and issue statements like “SELECT city, total_sales FROM city_sales” to get the following results.
41-1	7475-7477	To	
41-2	7478-7482	view	
41-3	7483-7486	the	
41-4	7487-7492	total	
41-5	7493-7499	amount	
41-6	7500-7502	of	
41-7	7503-7508	sales	
41-8	7509-7512	per	
41-9	7513-7517	city	
41-10	7517-7518	,	
41-11	7519-7521	we	
41-12	7522-7528	create	
41-13	7529-7530	a	
41-14	7531-7543	materialized	
41-15	7544-7548	view	
41-16	7549-7553	with	
41-17	7554-7557	the	
41-18	7558-7564	create	
41-19	7565-7577	materialized	
41-20	7578-7582	view	
41-21	7583-7586	SQL	
41-22	7587-7596	statement	
41-23	7597-7598	(	
41-24	7598-7608	city_sales	
41-25	7608-7609	)	
41-26	7610-7617	joining	
41-27	7618-7625	records	
41-28	7626-7630	from	
41-29	7631-7634	two	
41-30	7635-7641	tables	
41-31	7642-7645	and	
41-32	7646-7657	aggregating	
41-33	7658-7663	sales	
41-34	7664-7670	amount	
41-35	7671-7672	(	
41-36	7672-7675	sum	
41-37	7675-7676	(	
41-38	7676-7688	sales.amount	
41-39	7688-7689	)	
41-40	7689-7690	)	
41-41	7691-7694	per	
41-42	7695-7699	city	
41-43	7700-7701	(	
41-44	7701-7706	group	
41-45	7707-7709	by	
41-46	7710-7714	city	
41-47	7714-7715	)	
41-48	7715-7716	:	
41-49	7717-7723	CREATE	
41-50	7724-7736	MATERIALIZED	
41-51	7737-7741	VIEW	
41-52	7742-7752	city_sales	
41-53	7753-7755	AS	
41-54	7756-7762	SELECT	
41-55	7763-7770	st.city	
41-56	7770-7771	,	
41-57	7772-7775	SUM	
41-58	7775-7776	(	
41-59	7776-7785	sa.amount	
41-60	7785-7786	)	
41-61	7787-7789	as	
41-62	7790-7801	total_sales	
41-63	7802-7806	FROM	
41-64	7807-7812	sales	
41-65	7813-7815	sa	
41-66	7815-7816	,	
41-67	7817-7822	store	
41-68	7823-7825	st	
41-69	7826-7831	WHERE	
41-70	7832-7843	sa.store_id	
41-71	7844-7845	=	
41-72	7846-7851	st.id	
41-73	7852-7857	GROUP	
41-74	7858-7860	BY	
41-75	7861-7868	st.city	
41-76	7869-7872	Now	
41-77	7873-7875	we	
41-78	7876-7879	can	
41-79	7880-7885	query	
41-80	7886-7889	the	
41-81	7890-7902	materialized	
41-82	7903-7907	view	
41-83	7908-7912	just	
41-84	7913-7917	like	
41-85	7918-7919	a	
41-86	7920-7927	regular	
41-87	7928-7932	view	
41-88	7933-7935	or	
41-89	7936-7941	table	
41-90	7942-7945	and	
41-91	7946-7951	issue	
41-92	7952-7962	statements	
41-93	7963-7967	like	
41-94	7968-7969	“	
41-95	7969-7975	SELECT	
41-96	7976-7980	city	
41-97	7980-7981	,	
41-98	7982-7993	total_sales	
41-99	7994-7998	FROM	
41-100	7999-8009	city_sales	
41-101	8009-8010	”	
41-102	8011-8013	to	
41-103	8014-8017	get	
41-104	8018-8021	the	
41-105	8022-8031	following	
41-106	8032-8039	results	
41-107	8039-8040	.	

#Text=The join between the two tables and the aggregate (sum and group by) are already computed, resulting in significantly less data to scan.
42-1	8041-8044	The	
42-2	8045-8049	join	
42-3	8050-8057	between	
42-4	8058-8061	the	
42-5	8062-8065	two	
42-6	8066-8072	tables	
42-7	8073-8076	and	
42-8	8077-8080	the	
42-9	8081-8090	aggregate	
42-10	8091-8092	(	
42-11	8092-8095	sum	
42-12	8096-8099	and	
42-13	8100-8105	group	
42-14	8106-8108	by	
42-15	8108-8109	)	
42-16	8110-8113	are	
42-17	8114-8121	already	
42-18	8122-8130	computed	
42-19	8130-8131	,	
42-20	8132-8141	resulting	
42-21	8142-8144	in	
42-22	8145-8158	significantly	
42-23	8159-8163	less	
42-24	8164-8168	data	
42-25	8169-8171	to	
42-26	8172-8176	scan	
42-27	8176-8177	.	

#Text=When the data in the underlying base tables changes, the materialized view doesn’t automatically reflect those changes.
43-1	8178-8182	When	
43-2	8183-8186	the	
43-3	8187-8191	data	
43-4	8192-8194	in	
43-5	8195-8198	the	
43-6	8199-8209	underlying	
43-7	8210-8214	base	
43-8	8215-8221	tables	
43-9	8222-8229	changes	
43-10	8229-8230	,	
43-11	8231-8234	the	
43-12	8235-8247	materialized	
43-13	8248-8252	view	
43-14	8253-8258	doesn	
43-15	8258-8259	’	
43-16	8259-8260	t	
43-17	8261-8274	automatically	
43-18	8275-8282	reflect	
43-19	8283-8288	those	
43-20	8289-8296	changes	
43-21	8296-8297	.	

#Text=You can refresh the data stored in the materialized view on demand with the latest changes from the base tables using the SQL refresh materialized view command.
44-1	8298-8301	You	
44-2	8302-8305	can	
44-3	8306-8313	refresh	
44-4	8314-8317	the	
44-5	8318-8322	data	
44-6	8323-8329	stored	
44-7	8330-8332	in	
44-8	8333-8336	the	
44-9	8337-8349	materialized	
44-10	8350-8354	view	
44-11	8355-8357	on	
44-12	8358-8364	demand	
44-13	8365-8369	with	
44-14	8370-8373	the	
44-15	8374-8380	latest	
44-16	8381-8388	changes	
44-17	8389-8393	from	
44-18	8394-8397	the	
44-19	8398-8402	base	
44-20	8403-8409	tables	
44-21	8410-8415	using	
44-22	8416-8419	the	
44-23	8420-8423	SQL	
44-24	8424-8431	refresh	
44-25	8431-8432	 	
44-26	8432-8444	materialized	
44-27	8445-8449	view	
44-28	8450-8457	command	
44-29	8457-8458	.	

#Text=For example, see the following code:
#Text=!
45-1	8459-8462	For	
45-2	8463-8470	example	
45-3	8470-8471	,	
45-4	8472-8475	see	
45-5	8476-8479	the	
45-6	8480-8489	following	
45-7	8490-8494	code	
45-8	8494-8495	:	
45-9	8496-8497	!	

#Text=-- let's add a row in the sales base table
#Text=INSERT INTO sales (id, item, store_id, customer_id, amount)
#Text=VALUES(8, 'Gaming PC Super ProXXL', 1, 1, 3000);
#Text=SELECT city, total_sales FROM city_sales WHERE city = 'Paris'
#Text=|city |total_sales|
#Text=|-----|-----------|
#Text=|Paris|
#Text=690|
#Text=!
46-1	8497-8498	-	
46-2	8498-8499	-	
46-3	8500-8505	let's	
46-4	8506-8509	add	
46-5	8510-8511	a	
46-6	8512-8515	row	
46-7	8516-8518	in	
46-8	8519-8522	the	
46-9	8523-8528	sales	
46-10	8529-8533	base	
46-11	8534-8539	table	
46-12	8540-8546	INSERT	
46-13	8547-8551	INTO	
46-14	8552-8557	sales	
46-15	8558-8559	(	
46-16	8559-8561	id	
46-17	8561-8562	,	
46-18	8563-8567	item	
46-19	8567-8568	,	
46-20	8569-8577	store_id	
46-21	8577-8578	,	
46-22	8579-8590	customer_id	
46-23	8590-8591	,	
46-24	8592-8598	amount	
46-25	8598-8599	)	
46-26	8600-8606	VALUES	
46-27	8606-8607	(	
46-28	8607-8608	8	
46-29	8608-8609	,	
46-30	8610-8611	'	
46-31	8611-8617	Gaming	
46-32	8618-8620	PC	
46-33	8621-8626	Super	
46-34	8627-8633	ProXXL	
46-35	8633-8634	'	
46-36	8634-8635	,	
46-37	8636-8637	1	
46-38	8637-8638	,	
46-39	8639-8640	1	
46-40	8640-8641	,	
46-41	8642-8646	3000	
46-42	8646-8647	)	
46-43	8647-8648	;	
46-44	8649-8655	SELECT	
46-45	8656-8660	city	
46-46	8660-8661	,	
46-47	8662-8673	total_sales	
46-48	8674-8678	FROM	
46-49	8679-8689	city_sales	
46-50	8690-8695	WHERE	
46-51	8696-8700	city	
46-52	8701-8702	=	
46-53	8703-8704	'	
46-54	8704-8709	Paris	
46-55	8709-8710	'	
46-56	8711-8712	|	
46-57	8712-8716	city	
46-58	8717-8718	|	
46-59	8718-8729	total_sales	
46-60	8729-8730	|	
46-61	8731-8732	|	
46-62	8732-8733	-	
46-63	8733-8734	-	
46-64	8734-8735	-	
46-65	8735-8736	-	
46-66	8736-8737	-	
46-67	8737-8738	|	
46-68	8738-8739	-	
46-69	8739-8740	-	
46-70	8740-8741	-	
46-71	8741-8742	-	
46-72	8742-8743	-	
46-73	8743-8744	-	
46-74	8744-8745	-	
46-75	8745-8746	-	
46-76	8746-8747	-	
46-77	8747-8748	-	
46-78	8748-8749	-	
46-79	8749-8750	|	
46-80	8751-8752	|	
46-81	8752-8757	Paris	
46-82	8757-8758	|	
46-83	8759-8762	690	
46-84	8762-8763	|	
46-85	8764-8765	!	

#Text=-- the new sale is not taken into account !!
47-1	8765-8766	-	
47-2	8766-8767	-	
47-3	8768-8771	the	
47-4	8772-8775	new	
47-5	8776-8780	sale	
47-6	8781-8783	is	
47-7	8784-8787	not	
47-8	8788-8793	taken	
47-9	8794-8798	into	
47-10	8799-8806	account	
47-11	8807-8808	!	
47-12	8808-8809	!	

#Text=-- let's refresh the materialized view
#Text=REFRESH MATERIALIZED VIEW city_sales;
#Text=SELECT city, total_sales FROM city_sales WHERE city = 'Paris'
#Text=|city |total_sales|
#Text=|-----|-----------|
#Text=|Paris|
#Text=3690|
#Text=!
48-1	8810-8811	-	
48-2	8811-8812	-	
48-3	8813-8818	let's	
48-4	8819-8826	refresh	
48-5	8827-8830	the	
48-6	8831-8843	materialized	
48-7	8844-8848	view	
48-8	8849-8856	REFRESH	
48-9	8857-8869	MATERIALIZED	
48-10	8870-8874	VIEW	
48-11	8875-8885	city_sales	
48-12	8885-8886	;	
48-13	8887-8893	SELECT	
48-14	8894-8898	city	
48-15	8898-8899	,	
48-16	8900-8911	total_sales	
48-17	8912-8916	FROM	
48-18	8917-8927	city_sales	
48-19	8928-8933	WHERE	
48-20	8934-8938	city	
48-21	8939-8940	=	
48-22	8941-8942	'	
48-23	8942-8947	Paris	
48-24	8947-8948	'	
48-25	8949-8950	|	
48-26	8950-8954	city	
48-27	8955-8956	|	
48-28	8956-8967	total_sales	
48-29	8967-8968	|	
48-30	8969-8970	|	
48-31	8970-8971	-	
48-32	8971-8972	-	
48-33	8972-8973	-	
48-34	8973-8974	-	
48-35	8974-8975	-	
48-36	8975-8976	|	
48-37	8976-8977	-	
48-38	8977-8978	-	
48-39	8978-8979	-	
48-40	8979-8980	-	
48-41	8980-8981	-	
48-42	8981-8982	-	
48-43	8982-8983	-	
48-44	8983-8984	-	
48-45	8984-8985	-	
48-46	8985-8986	-	
48-47	8986-8987	-	
48-48	8987-8988	|	
48-49	8989-8990	|	
48-50	8990-8995	Paris	
48-51	8995-8996	|	
48-52	8997-9001	3690	
48-53	9001-9002	|	
48-54	9003-9004	!	

#Text=-- now the view has the latest sales data
#Text=The full code for this use case is available as a gist in GitHub.
49-1	9004-9005	-	
49-2	9005-9006	-	
49-3	9007-9010	now	
49-4	9011-9014	the	
49-5	9015-9019	view	
49-6	9020-9023	has	
49-7	9024-9027	the	
49-8	9028-9034	latest	
49-9	9035-9040	sales	
49-10	9041-9045	data	
49-11	9046-9049	The	
49-12	9050-9054	full	
49-13	9055-9059	code	
49-14	9060-9063	for	
49-15	9064-9068	this	
49-16	9069-9072	use	
49-17	9073-9077	case	
49-18	9078-9080	is	
49-19	9081-9090	available	
49-20	9091-9093	as	
49-21	9094-9095	a	
49-22	9096-9100	gist	
49-23	9101-9103	in	
49-24	9104-9110	GitHub	
49-25	9110-9111	.	

#Text=You can also extend the benefits of materialized views to external data in your Amazon S3 data lake and federated data sources.
50-1	9112-9115	You	
50-2	9116-9119	can	
50-3	9120-9124	also	
50-4	9125-9131	extend	
50-5	9132-9135	the	
50-6	9136-9144	benefits	
50-7	9145-9147	of	
50-8	9148-9160	materialized	
50-9	9161-9166	views	
50-10	9167-9169	to	
50-11	9170-9178	external	
50-12	9179-9183	data	
50-13	9184-9186	in	
50-14	9187-9191	your	
50-15	9192-9198	Amazon	
50-16	9199-9201	S3	
50-17	9202-9206	data	
50-18	9207-9211	lake	
50-19	9212-9215	and	
50-20	9216-9225	federated	
50-21	9226-9230	data	
50-22	9231-9238	sources	
50-23	9238-9239	.	

#Text=With materialized views, you can easily store and manage the pre-computed results of a SELECT statement referencing both external tables and Amazon Redshift tables.
51-1	9240-9244	With	
51-2	9245-9257	materialized	
51-3	9258-9263	views	
51-4	9263-9264	,	
51-5	9265-9268	you	
51-6	9269-9272	can	
51-7	9273-9279	easily	
51-8	9280-9285	store	
51-9	9286-9289	and	
51-10	9290-9296	manage	
51-11	9297-9300	the	
51-12	9301-9313	pre-computed	
51-13	9314-9321	results	
51-14	9322-9324	of	
51-15	9325-9326	a	
51-16	9327-9333	SELECT	
51-17	9334-9343	statement	
51-18	9344-9355	referencing	
51-19	9356-9360	both	
51-20	9361-9369	external	
51-21	9370-9376	tables	
51-22	9377-9380	and	
51-23	9381-9387	Amazon	
51-24	9388-9396	Redshift	
51-25	9397-9403	tables	
51-26	9403-9404	.	

#Text=Subsequent queries referencing the materialized views run much faster because they use the pre-computed results stored in Amazon Redshift, instead of accessing the external tables.
52-1	9405-9415	Subsequent	
52-2	9416-9423	queries	
52-3	9424-9435	referencing	
52-4	9436-9439	the	
52-5	9440-9452	materialized	
52-6	9453-9458	views	
52-7	9459-9462	run	
52-8	9463-9467	much	
52-9	9468-9474	faster	
52-10	9475-9482	because	
52-11	9483-9487	they	
52-12	9488-9491	use	
52-13	9492-9495	the	
52-14	9496-9508	pre-computed	
52-15	9509-9516	results	
52-16	9517-9523	stored	
52-17	9524-9526	in	
52-18	9527-9533	Amazon	
52-19	9534-9542	Redshift	
52-20	9542-9543	,	
52-21	9544-9551	instead	
52-22	9552-9554	of	
52-23	9555-9564	accessing	
52-24	9565-9568	the	
52-25	9569-9577	external	
52-26	9578-9584	tables	
52-27	9584-9585	.	

#Text=This also helps you reduce the associated costs of repeatedly accessing the external data sources, because you can only access them when you explicitly refresh the materialized views.
53-1	9586-9590	This	
53-2	9591-9595	also	
53-3	9596-9601	helps	
53-4	9602-9605	you	
53-5	9606-9612	reduce	
53-6	9613-9616	the	
53-7	9617-9627	associated	
53-8	9628-9633	costs	
53-9	9634-9636	of	
53-10	9637-9647	repeatedly	
53-11	9648-9657	accessing	
53-12	9658-9661	the	
53-13	9662-9670	external	
53-14	9671-9675	data	
53-15	9676-9683	sources	
53-16	9683-9684	,	
53-17	9685-9692	because	
53-18	9693-9696	you	
53-19	9697-9700	can	
53-20	9701-9705	only	
53-21	9706-9712	access	
53-22	9713-9717	them	
53-23	9718-9722	when	
53-24	9723-9726	you	
53-25	9727-9737	explicitly	
53-26	9738-9745	refresh	
53-27	9746-9749	the	
53-28	9750-9762	materialized	
53-29	9763-9768	views	
53-30	9768-9769	.	

#Text=Tip #2: Handling bursts of workload with concurrency scaling and elastic resize
#Text=The legacy, on-premises model requires you to estimate what the system will need 3-4 years in the future to make sure you’re leasing enough horsepower at the time of purchase.
54-1	9770-9773	Tip	
54-2	9774-9776	#2	
54-3	9776-9777	:	
54-4	9777-9778	 	
54-5	9778-9786	Handling	
54-6	9787-9793	bursts	
54-7	9794-9796	of	
54-8	9797-9805	workload	
54-9	9806-9810	with	
54-10	9811-9822	concurrency	
54-11	9823-9830	scaling	
54-12	9831-9834	and	
54-13	9835-9842	elastic	
54-14	9843-9849	resize	
54-15	9850-9853	The	
54-16	9854-9860	legacy	
54-17	9860-9861	,	
54-18	9862-9873	on-premises	
54-19	9874-9879	model	
54-20	9880-9888	requires	
54-21	9889-9892	you	
54-22	9893-9895	to	
54-23	9896-9904	estimate	
54-24	9905-9909	what	
54-25	9910-9913	the	
54-26	9914-9920	system	
54-27	9921-9925	will	
54-28	9926-9930	need	
54-29	9931-9932	3	
54-30	9932-9933	-	
54-31	9933-9934	4	
54-32	9935-9940	years	
54-33	9941-9943	in	
54-34	9944-9947	the	
54-35	9948-9954	future	
54-36	9955-9957	to	
54-37	9958-9962	make	
54-38	9963-9967	sure	
54-39	9968-9971	you	
54-40	9971-9972	’	
54-41	9972-9974	re	
54-42	9975-9982	leasing	
54-43	9983-9989	enough	
54-44	9990-10000	horsepower	
54-45	10001-10003	at	
54-46	10004-10007	the	
54-47	10008-10012	time	
54-48	10013-10015	of	
54-49	10016-10024	purchase	
54-50	10024-10025	.	

#Text=But the ability to resize a cluster allows for right-sizing your resources as you go.
55-1	10026-10029	But	
55-2	10030-10033	the	
55-3	10034-10041	ability	
55-4	10042-10044	to	
55-5	10045-10051	resize	
55-6	10052-10053	a	
55-7	10054-10061	cluster	
55-8	10062-10068	allows	
55-9	10069-10072	for	
55-10	10073-10085	right-sizing	
55-11	10086-10090	your	
55-12	10091-10100	resources	
55-13	10101-10103	as	
55-14	10104-10107	you	
55-15	10108-10110	go	
55-16	10110-10111	.	

#Text=Amazon Redshift extends this ability with elastic resize and concurrency scaling.
56-1	10112-10118	Amazon	
56-2	10119-10127	Redshift	
56-3	10128-10135	extends	
56-4	10136-10140	this	
56-5	10141-10148	ability	
56-6	10149-10153	with	
56-7	10154-10161	elastic	
56-8	10162-10168	resize	
56-9	10169-10172	and	
56-10	10173-10184	concurrency	
56-11	10185-10192	scaling	
56-12	10192-10193	.	

#Text=Elastic resize lets you quickly increase or decrease the number of compute nodes, doubling or halving the original cluster’s node count, or even change the node type. 
57-1	10194-10201	Elastic	
57-2	10202-10208	resize	
57-3	10209-10213	lets	
57-4	10214-10217	you	
57-5	10218-10225	quickly	
57-6	10226-10234	increase	
57-7	10235-10237	or	
57-8	10238-10246	decrease	
57-9	10247-10250	the	
57-10	10251-10257	number	
57-11	10258-10260	of	
57-12	10261-10268	compute	
57-13	10269-10274	nodes	
57-14	10274-10275	,	
57-15	10276-10284	doubling	
57-16	10285-10287	or	
57-17	10288-10295	halving	
57-18	10296-10299	the	
57-19	10300-10308	original	
57-20	10309-10316	cluster	
57-21	10316-10317	’	
57-22	10317-10318	s	
57-23	10319-10323	node	
57-24	10324-10329	count	
57-25	10329-10330	,	
57-26	10331-10333	or	
57-27	10334-10338	even	
57-28	10338-10339	 	
57-29	10339-10345	change	
57-30	10346-10349	the	
57-31	10350-10354	node	
57-32	10355-10359	type	
57-33	10359-10360	.	
57-34	10360-10361	 	

#Text=You can expand the cluster to provide additional processing power to accommodate an expected increase in workload, such as Black Friday for internet shopping, or a championship game for a team’s web business. 
58-1	10361-10364	You	
58-2	10365-10368	can	
58-3	10369-10375	expand	
58-4	10376-10379	the	
58-5	10380-10387	cluster	
58-6	10388-10390	to	
58-7	10391-10398	provide	
58-8	10399-10409	additional	
58-9	10410-10420	processing	
58-10	10421-10426	power	
58-11	10427-10429	to	
58-12	10430-10441	accommodate	
58-13	10442-10444	an	
58-14	10445-10453	expected	
58-15	10454-10462	increase	
58-16	10463-10465	in	
58-17	10466-10474	workload	
58-18	10474-10475	,	
58-19	10476-10480	such	
58-20	10481-10483	as	
58-21	10484-10489	Black	
58-22	10490-10496	Friday	
58-23	10497-10500	for	
58-24	10501-10509	internet	
58-25	10510-10518	shopping	
58-26	10518-10519	,	
58-27	10520-10522	or	
58-28	10523-10524	a	
58-29	10525-10537	championship	
58-30	10538-10542	game	
58-31	10543-10546	for	
58-32	10547-10548	a	
58-33	10549-10553	team	
58-34	10553-10554	’	
58-35	10554-10555	s	
58-36	10556-10559	web	
58-37	10560-10568	business	
58-38	10568-10569	.	
58-39	10569-10570	 	

#Text=Choose classic resize when you’re resizing to a configuration that isn’t available through elastic resize.
59-1	10570-10576	Choose	
59-2	10577-10584	classic	
59-3	10585-10591	resize	
59-4	10592-10596	when	
59-5	10597-10600	you	
59-6	10600-10601	’	
59-7	10601-10603	re	
59-8	10604-10612	resizing	
59-9	10613-10615	to	
59-10	10616-10617	a	
59-11	10618-10631	configuration	
59-12	10632-10636	that	
59-13	10637-10640	isn	
59-14	10640-10641	’	
59-15	10641-10642	t	
59-16	10643-10652	available	
59-17	10653-10660	through	
59-18	10661-10668	elastic	
59-19	10669-10675	resize	
59-20	10675-10676	.	

#Text=Classic resize is slower but allows you to change the node type or expand beyond the doubling or halving size limitations of an elastic resize.
60-1	10677-10684	Classic	
60-2	10685-10691	resize	
60-3	10692-10694	is	
60-4	10695-10701	slower	
60-5	10702-10705	but	
60-6	10706-10712	allows	
60-7	10713-10716	you	
60-8	10717-10719	to	
60-9	10720-10726	change	
60-10	10727-10730	the	
60-11	10731-10735	node	
60-12	10736-10740	type	
60-13	10741-10743	or	
60-14	10744-10750	expand	
60-15	10751-10757	beyond	
60-16	10758-10761	the	
60-17	10762-10770	doubling	
60-18	10771-10773	or	
60-19	10774-10781	halving	
60-20	10782-10786	size	
60-21	10787-10798	limitations	
60-22	10799-10801	of	
60-23	10802-10804	an	
60-24	10805-10812	elastic	
60-25	10813-10819	resize	
60-26	10819-10820	.	

#Text=Elastic resize completes in minutes and doesn’t require a cluster restart.
61-1	10821-10828	Elastic	
61-2	10829-10835	resize	
61-3	10836-10845	completes	
61-4	10846-10848	in	
61-5	10849-10856	minutes	
61-6	10857-10860	and	
61-7	10861-10866	doesn	
61-8	10866-10867	’	
61-9	10867-10868	t	
61-10	10869-10876	require	
61-11	10877-10878	a	
61-12	10879-10886	cluster	
61-13	10887-10894	restart	
61-14	10894-10895	.	

#Text=For anticipated workload spikes that occur on a predictable schedule, you can automate the resize operation using the elastic resize scheduler feature on the Amazon Redshift console, the AWS Command Line Interface (AWS CLI), or API.
62-1	10896-10899	For	
62-2	10900-10911	anticipated	
62-3	10912-10920	workload	
62-4	10921-10927	spikes	
62-5	10928-10932	that	
62-6	10933-10938	occur	
62-7	10939-10941	on	
62-8	10942-10943	a	
62-9	10944-10955	predictable	
62-10	10956-10964	schedule	
62-11	10964-10965	,	
62-12	10966-10969	you	
62-13	10970-10973	can	
62-14	10974-10982	automate	
62-15	10983-10986	the	
62-16	10987-10993	resize	
62-17	10994-11003	operation	
62-18	11004-11009	using	
62-19	11010-11013	the	
62-20	11014-11021	elastic	
62-21	11022-11028	resize	
62-22	11029-11038	scheduler	
62-23	11039-11046	feature	
62-24	11047-11049	on	
62-25	11050-11053	the	
62-26	11054-11060	Amazon	
62-27	11061-11069	Redshift	
62-28	11070-11077	console	
62-29	11077-11078	,	
62-30	11079-11082	the	
62-31	11083-11086	AWS	
62-32	11087-11094	Command	
62-33	11095-11099	Line	
62-34	11100-11109	Interface	
62-35	11110-11111	(	
62-36	11111-11114	AWS	
62-37	11115-11118	CLI	
62-38	11118-11119	)	
62-39	11119-11120	,	
62-40	11121-11123	or	
62-41	11124-11127	API	
62-42	11127-11128	.	

#Text=Concurrency scaling allows your Amazon Redshift cluster to add capacity dynamically in response to the workload arriving at the cluster.
63-1	11129-11140	Concurrency	
63-2	11141-11148	scaling	
63-3	11149-11155	allows	
63-4	11156-11160	your	
63-5	11161-11167	Amazon	
63-6	11168-11176	Redshift	
63-7	11177-11184	cluster	
63-8	11185-11187	to	
63-9	11188-11191	add	
63-10	11192-11200	capacity	
63-11	11201-11212	dynamically	
63-12	11213-11215	in	
63-13	11216-11224	response	
63-14	11225-11227	to	
63-15	11228-11231	the	
63-16	11232-11240	workload	
63-17	11241-11249	arriving	
63-18	11250-11252	at	
63-19	11253-11256	the	
63-20	11257-11264	cluster	
63-21	11264-11265	.	

#Text=By default, concurrency scaling is disabled, and you can enable it for any workload management (WLM) queue to scale to a virtually unlimited number of concurrent queries, with consistently fast query performance.
64-1	11266-11268	By	
64-2	11269-11276	default	
64-3	11276-11277	,	
64-4	11278-11289	concurrency	
64-5	11290-11297	scaling	
64-6	11298-11300	is	
64-7	11301-11309	disabled	
64-8	11309-11310	,	
64-9	11311-11314	and	
64-10	11315-11318	you	
64-11	11319-11322	can	
64-12	11323-11329	enable	
64-13	11330-11332	it	
64-14	11333-11336	for	
64-15	11337-11340	any	
64-16	11341-11349	workload	
64-17	11350-11360	management	
64-18	11361-11362	(	
64-19	11362-11365	WLM	
64-20	11365-11366	)	
64-21	11367-11372	queue	
64-22	11373-11375	to	
64-23	11376-11381	scale	
64-24	11382-11384	to	
64-25	11385-11386	a	
64-26	11387-11396	virtually	
64-27	11397-11406	unlimited	
64-28	11407-11413	number	
64-29	11414-11416	of	
64-30	11417-11427	concurrent	
64-31	11428-11435	queries	
64-32	11435-11436	,	
64-33	11437-11441	with	
64-34	11442-11454	consistently	
64-35	11455-11459	fast	
64-36	11460-11465	query	
64-37	11466-11477	performance	
64-38	11477-11478	.	

#Text=You can control the maximum number of concurrency scaling clusters allowed by setting the “max_concurrency_scaling_clusters” parameter value from 1 (default) to 10 (contact support to raise this soft limit).
65-1	11479-11482	You	
65-2	11483-11486	can	
65-3	11487-11494	control	
65-4	11495-11498	the	
65-5	11499-11506	maximum	
65-6	11507-11513	number	
65-7	11514-11516	of	
65-8	11517-11528	concurrency	
65-9	11529-11536	scaling	
65-10	11537-11545	clusters	
65-11	11546-11553	allowed	
65-12	11554-11556	by	
65-13	11557-11564	setting	
65-14	11565-11568	the	
65-15	11569-11570	“	
65-16	11570-11602	max_concurrency_scaling_clusters	
65-17	11602-11603	”	
65-18	11604-11613	parameter	
65-19	11614-11619	value	
65-20	11620-11624	from	
65-21	11625-11626	1	
65-22	11627-11628	(	
65-23	11628-11635	default	
65-24	11635-11636	)	
65-25	11637-11639	to	
65-26	11640-11642	10	
65-27	11643-11644	(	
65-28	11644-11651	contact	
65-29	11652-11659	support	
65-30	11660-11662	to	
65-31	11663-11668	raise	
65-32	11669-11673	this	
65-33	11674-11678	soft	
65-34	11679-11684	limit	
65-35	11684-11685	)	
65-36	11685-11686	.	

#Text=The free billing credits provided for concurrency scaling is often enough and the majority of customers using this feature don’t end up paying extra for it.
66-1	11687-11690	The	
66-2	11691-11695	free	
66-3	11696-11703	billing	
66-4	11704-11711	credits	
66-5	11712-11720	provided	
66-6	11721-11724	for	
66-7	11725-11736	concurrency	
66-8	11737-11744	scaling	
66-9	11745-11747	is	
66-10	11748-11753	often	
66-11	11754-11760	enough	
66-12	11761-11764	and	
66-13	11765-11768	the	
66-14	11769-11777	majority	
66-15	11778-11780	of	
66-16	11781-11790	customers	
66-17	11791-11796	using	
66-18	11797-11801	this	
66-19	11802-11809	feature	
66-20	11810-11813	don	
66-21	11813-11814	’	
66-22	11814-11815	t	
66-23	11816-11819	end	
66-24	11820-11822	up	
66-25	11823-11829	paying	
66-26	11830-11835	extra	
66-27	11836-11839	for	
66-28	11840-11842	it	
66-29	11842-11843	.	

#Text=For more information about the concurrency scaling billing model see Concurrency Scaling pricing.
67-1	11844-11847	For	
67-2	11848-11852	more	
67-3	11853-11864	information	
67-4	11865-11870	about	
67-5	11871-11874	the	
67-6	11875-11886	concurrency	
67-7	11887-11894	scaling	
67-8	11895-11902	billing	
67-9	11903-11908	model	
67-10	11909-11912	see	
67-11	11913-11924	Concurrency	
67-12	11925-11932	Scaling	
67-13	11933-11940	pricing	
67-14	11940-11941	.	

#Text=You can monitor and control the concurrency scaling usage and cost by creating daily, weekly, or monthly usage limits and instruct Amazon Redshift to automatically take action (such as logging, alerting or disabling further usage) if those limits are reached.
68-1	11942-11945	You	
68-2	11946-11949	can	
68-3	11950-11957	monitor	
68-4	11958-11961	and	
68-5	11962-11969	control	
68-6	11970-11973	the	
68-7	11974-11985	concurrency	
68-8	11986-11993	scaling	
68-9	11994-11999	usage	
68-10	12000-12003	and	
68-11	12004-12008	cost	
68-12	12009-12011	by	
68-13	12012-12020	creating	
68-14	12021-12026	daily	
68-15	12026-12027	,	
68-16	12028-12034	weekly	
68-17	12034-12035	,	
68-18	12036-12038	or	
68-19	12039-12046	monthly	
68-20	12047-12052	usage	
68-21	12053-12059	limits	
68-22	12060-12063	and	
68-23	12064-12072	instruct	
68-24	12073-12079	Amazon	
68-25	12080-12088	Redshift	
68-26	12089-12091	to	
68-27	12092-12105	automatically	
68-28	12106-12110	take	
68-29	12111-12117	action	
68-30	12118-12119	(	
68-31	12119-12123	such	
68-32	12124-12126	as	
68-33	12127-12134	logging	
68-34	12134-12135	,	
68-35	12136-12144	alerting	
68-36	12145-12147	or	
68-37	12148-12157	disabling	
68-38	12158-12165	further	
68-39	12166-12171	usage	
68-40	12171-12172	)	
68-41	12173-12175	if	
68-42	12176-12181	those	
68-43	12182-12188	limits	
68-44	12189-12192	are	
68-45	12193-12200	reached	
68-46	12200-12201	.	

#Text=For more information, see Managing usage limits in Amazon Redshift.
69-1	12202-12205	For	
69-2	12206-12210	more	
69-3	12211-12222	information	
69-4	12222-12223	,	
69-5	12224-12227	see	
69-6	12228-12236	Managing	
69-7	12237-12242	usage	
69-8	12243-12249	limits	
69-9	12250-12252	in	
69-10	12253-12259	Amazon	
69-11	12260-12268	Redshift	
69-12	12268-12269	.	

#Text=Together, these options open up new ways to right-size the platform to meet demand.
70-1	12270-12278	Together	
70-2	12278-12279	,	
70-3	12280-12285	these	
70-4	12286-12293	options	
70-5	12294-12298	open	
70-6	12299-12301	up	
70-7	12302-12305	new	
70-8	12306-12310	ways	
70-9	12311-12313	to	
70-10	12314-12324	right-size	
70-11	12325-12328	the	
70-12	12329-12337	platform	
70-13	12338-12340	to	
70-14	12341-12345	meet	
70-15	12346-12352	demand	
70-16	12352-12353	.	

#Text=Before these options, you needed to size your WLM queue, or even an entire Amazon Redshift cluster, beforehand in anticipation of upcoming peaks.
71-1	12354-12360	Before	
71-2	12361-12366	these	
71-3	12367-12374	options	
71-4	12374-12375	,	
71-5	12376-12379	you	
71-6	12380-12386	needed	
71-7	12387-12389	to	
71-8	12390-12394	size	
71-9	12395-12399	your	
71-10	12400-12403	WLM	
71-11	12404-12409	queue	
71-12	12409-12410	,	
71-13	12411-12413	or	
71-14	12414-12418	even	
71-15	12419-12421	an	
71-16	12422-12428	entire	
71-17	12429-12435	Amazon	
71-18	12436-12444	Redshift	
71-19	12445-12452	cluster	
71-20	12452-12453	,	
71-21	12454-12464	beforehand	
71-22	12465-12467	in	
71-23	12468-12480	anticipation	
71-24	12481-12483	of	
71-25	12484-12492	upcoming	
71-26	12493-12498	peaks	
71-27	12498-12499	.	

#Text=Tip #3: Using the Amazon Redshift Advisor to minimize administrative work
#Text=Amazon Redshift Advisor offers recommendations specific to your Amazon Redshift cluster to help you improve its performance and decrease operating costs.
72-1	12500-12503	Tip	
72-2	12504-12506	#3	
72-3	12506-12507	:	
72-4	12508-12513	Using	
72-5	12514-12517	the	
72-6	12518-12524	Amazon	
72-7	12525-12533	Redshift	
72-8	12534-12541	Advisor	
72-9	12542-12544	to	
72-10	12545-12553	minimize	
72-11	12554-12568	administrative	
72-12	12569-12573	work	
72-13	12574-12580	Amazon	
72-14	12581-12589	Redshift	
72-15	12590-12597	Advisor	
72-16	12598-12604	offers	
72-17	12605-12620	recommendations	
72-18	12621-12629	specific	
72-19	12630-12632	to	
72-20	12633-12637	your	
72-21	12638-12644	Amazon	
72-22	12645-12653	Redshift	
72-23	12654-12661	cluster	
72-24	12662-12664	to	
72-25	12665-12669	help	
72-26	12670-12673	you	
72-27	12674-12681	improve	
72-28	12682-12685	its	
72-29	12686-12697	performance	
72-30	12698-12701	and	
72-31	12702-12710	decrease	
72-32	12711-12720	operating	
72-33	12721-12726	costs	
72-34	12726-12727	.	

#Text=Advisor bases its recommendations on observations regarding performance statistics or operations data.
73-1	12728-12735	Advisor	
73-2	12736-12741	bases	
73-3	12742-12745	its	
73-4	12746-12761	recommendations	
73-5	12762-12764	on	
73-6	12765-12777	observations	
73-7	12778-12787	regarding	
73-8	12788-12799	performance	
73-9	12800-12810	statistics	
73-10	12811-12813	or	
73-11	12814-12824	operations	
73-12	12825-12829	data	
73-13	12829-12830	.	

#Text=Advisor develops observations by running tests on your clusters to determine if a test value is within a specified range.
74-1	12831-12838	Advisor	
74-2	12839-12847	develops	
74-3	12848-12860	observations	
74-4	12861-12863	by	
74-5	12864-12871	running	
74-6	12872-12877	tests	
74-7	12878-12880	on	
74-8	12881-12885	your	
74-9	12886-12894	clusters	
74-10	12895-12897	to	
74-11	12898-12907	determine	
74-12	12908-12910	if	
74-13	12911-12912	a	
74-14	12913-12917	test	
74-15	12918-12923	value	
74-16	12924-12926	is	
74-17	12927-12933	within	
74-18	12934-12935	a	
74-19	12936-12945	specified	
74-20	12946-12951	range	
74-21	12951-12952	.	

#Text=If the test result is outside of that range, Advisor generates an observation for your cluster.
75-1	12953-12955	If	
75-2	12956-12959	the	
75-3	12960-12964	test	
75-4	12965-12971	result	
75-5	12972-12974	is	
75-6	12975-12982	outside	
75-7	12983-12985	of	
75-8	12986-12990	that	
75-9	12991-12996	range	
75-10	12996-12997	,	
75-11	12998-13005	Advisor	
75-12	13006-13015	generates	
75-13	13016-13018	an	
75-14	13019-13030	observation	
75-15	13031-13034	for	
75-16	13035-13039	your	
75-17	13040-13047	cluster	
75-18	13047-13048	.	

#Text=At the same time, Advisor creates a recommendation about how to bring the observed value back into the best-practice range.
76-1	13049-13051	At	
76-2	13052-13055	the	
76-3	13056-13060	same	
76-4	13061-13065	time	
76-5	13065-13066	,	
76-6	13067-13074	Advisor	
76-7	13075-13082	creates	
76-8	13083-13084	a	
76-9	13085-13099	recommendation	
76-10	13100-13105	about	
76-11	13106-13109	how	
76-12	13110-13112	to	
76-13	13113-13118	bring	
76-14	13119-13122	the	
76-15	13123-13131	observed	
76-16	13132-13137	value	
76-17	13138-13142	back	
76-18	13143-13147	into	
76-19	13148-13151	the	
76-20	13152-13165	best-practice	
76-21	13166-13171	range	
76-22	13171-13172	.	

#Text=Advisor only displays recommendations that can have a significant impact on performance and operations.
77-1	13173-13180	Advisor	
77-2	13181-13185	only	
77-3	13186-13194	displays	
77-4	13195-13210	recommendations	
77-5	13211-13215	that	
77-6	13215-13216	 	
77-7	13216-13219	can	
77-8	13220-13224	have	
77-9	13225-13226	a	
77-10	13227-13238	significant	
77-11	13239-13245	impact	
77-12	13246-13248	on	
77-13	13249-13260	performance	
77-14	13261-13264	and	
77-15	13265-13275	operations	
77-16	13275-13276	.	

#Text=When Advisor determines that a recommendation has been addressed, it removes it from your recommendation list.
78-1	13277-13281	When	
78-2	13282-13289	Advisor	
78-3	13290-13300	determines	
78-4	13301-13305	that	
78-5	13306-13307	a	
78-6	13308-13322	recommendation	
78-7	13323-13326	has	
78-8	13327-13331	been	
78-9	13332-13341	addressed	
78-10	13341-13342	,	
78-11	13343-13345	it	
78-12	13346-13353	removes	
78-13	13354-13356	it	
78-14	13357-13361	from	
78-15	13362-13366	your	
78-16	13367-13381	recommendation	
78-17	13382-13386	list	
78-18	13386-13387	.	

#Text=In this section, we share some examples of Advisor recommendations:
#Text=Distribution key recommendation
#Text=Advisor analyzes your cluster’s workload to identify the most appropriate distribution key for the tables that can significantly benefit from a KEY distribution style. 
79-1	13388-13390	In	
79-2	13391-13395	this	
79-3	13396-13403	section	
79-4	13403-13404	,	
79-5	13405-13407	we	
79-6	13408-13413	share	
79-7	13414-13418	some	
79-8	13419-13427	examples	
79-9	13428-13430	of	
79-10	13431-13438	Advisor	
79-11	13439-13454	recommendations	
79-12	13454-13455	:	
79-13	13456-13468	Distribution	
79-14	13469-13472	key	
79-15	13473-13487	recommendation	
79-16	13488-13495	Advisor	
79-17	13496-13504	analyzes	
79-18	13505-13509	your	
79-19	13510-13517	cluster	
79-20	13517-13518	’	
79-21	13518-13519	s	
79-22	13520-13528	workload	
79-23	13529-13531	to	
79-24	13532-13540	identify	
79-25	13541-13544	the	
79-26	13545-13549	most	
79-27	13550-13561	appropriate	
79-28	13562-13574	distribution	
79-29	13575-13578	key	
79-30	13579-13582	for	
79-31	13583-13586	the	
79-32	13587-13593	tables	
79-33	13594-13598	that	
79-34	13599-13602	can	
79-35	13603-13616	significantly	
79-36	13617-13624	benefit	
79-37	13625-13629	from	
79-38	13630-13631	a	
79-39	13632-13635	KEY	
79-40	13636-13648	distribution	
79-41	13649-13654	style	
79-42	13654-13655	.	
79-43	13655-13656	 	

#Text=Advisor provides ALTER TABLE statements that alter the DISTSTYLE and DISTKEY of a table based on its analysis.
80-1	13656-13663	Advisor	
80-2	13664-13672	provides	
80-3	13673-13678	ALTER	
80-4	13679-13684	TABLE	
80-5	13685-13695	statements	
80-6	13696-13700	that	
80-7	13701-13706	alter	
80-8	13707-13710	the	
80-9	13711-13720	DISTSTYLE	
80-10	13721-13724	and	
80-11	13725-13732	DISTKEY	
80-12	13733-13735	of	
80-13	13736-13737	a	
80-14	13738-13743	table	
80-15	13744-13749	based	
80-16	13750-13752	on	
80-17	13753-13756	its	
80-18	13757-13765	analysis	
80-19	13765-13766	.	

#Text=To realize a significant performance benefit, make sure to implement all SQL statements within a recommendation group.
81-1	13767-13769	To	
81-2	13770-13777	realize	
81-3	13778-13779	a	
81-4	13780-13791	significant	
81-5	13792-13803	performance	
81-6	13804-13811	benefit	
81-7	13811-13812	,	
81-8	13813-13817	make	
81-9	13818-13822	sure	
81-10	13823-13825	to	
81-11	13826-13835	implement	
81-12	13836-13839	all	
81-13	13840-13843	SQL	
81-14	13844-13854	statements	
81-15	13855-13861	within	
81-16	13862-13863	a	
81-17	13864-13878	recommendation	
81-18	13879-13884	group	
81-19	13884-13885	.	

#Text=The following screenshot shows recommendations regarding distribution keys.
82-1	13886-13889	The	
82-2	13890-13899	following	
82-3	13900-13910	screenshot	
82-4	13911-13916	shows	
82-5	13917-13932	recommendations	
82-6	13933-13942	regarding	
82-7	13943-13955	distribution	
82-8	13956-13960	keys	
82-9	13960-13961	.	

#Text=If you don’t see a recommendation, that doesn’t necessarily mean that the current distribution styles are the most appropriate.
83-1	13962-13964	If	
83-2	13965-13968	you	
83-3	13969-13972	don	
83-4	13972-13973	’	
83-5	13973-13974	t	
83-6	13975-13978	see	
83-7	13979-13980	a	
83-8	13981-13995	recommendation	
83-9	13995-13996	,	
83-10	13997-14001	that	
83-11	14002-14007	doesn	
83-12	14007-14008	’	
83-13	14008-14009	t	
83-14	14010-14021	necessarily	
83-15	14022-14026	mean	
83-16	14027-14031	that	
83-17	14032-14035	the	
83-18	14036-14043	current	
83-19	14044-14056	distribution	
83-20	14057-14063	styles	
83-21	14064-14067	are	
83-22	14068-14071	the	
83-23	14072-14076	most	
83-24	14077-14088	appropriate	
83-25	14088-14089	.	

#Text=Advisor doesn’t provide recommendations when there isn’t enough data or the expected benefit of redistribution is small.
84-1	14090-14097	Advisor	
84-2	14098-14103	doesn	
84-3	14103-14104	’	
84-4	14104-14105	t	
84-5	14106-14113	provide	
84-6	14114-14129	recommendations	
84-7	14130-14134	when	
84-8	14135-14140	there	
84-9	14141-14144	isn	
84-10	14144-14145	’	
84-11	14145-14146	t	
84-12	14147-14153	enough	
84-13	14154-14158	data	
84-14	14159-14161	or	
84-15	14162-14165	the	
84-16	14166-14174	expected	
84-17	14175-14182	benefit	
84-18	14183-14185	of	
84-19	14186-14200	redistribution	
84-20	14201-14203	is	
84-21	14204-14209	small	
84-22	14209-14210	.	

#Text=Sort key recommendation
#Text=Sorting a table on an appropriate sort key can accelerate query performance, especially queries with range-restricted predicates, by requiring fewer table blocks to be read from disk.
85-1	14211-14215	Sort	
85-2	14216-14219	key	
85-3	14220-14234	recommendation	
85-4	14235-14242	Sorting	
85-5	14243-14244	a	
85-6	14245-14250	table	
85-7	14251-14253	on	
85-8	14254-14256	an	
85-9	14257-14268	appropriate	
85-10	14269-14273	sort	
85-11	14274-14277	key	
85-12	14278-14281	can	
85-13	14282-14292	accelerate	
85-14	14293-14298	query	
85-15	14299-14310	performance	
85-16	14310-14311	,	
85-17	14312-14322	especially	
85-18	14323-14330	queries	
85-19	14331-14335	with	
85-20	14336-14352	range-restricted	
85-21	14353-14363	predicates	
85-22	14363-14364	,	
85-23	14365-14367	by	
85-24	14368-14377	requiring	
85-25	14378-14383	fewer	
85-26	14384-14389	table	
85-27	14390-14396	blocks	
85-28	14397-14399	to	
85-29	14400-14402	be	
85-30	14403-14407	read	
85-31	14408-14412	from	
85-32	14413-14417	disk	
85-33	14417-14418	.	

#Text=Advisor analyzes your cluster’s workload over several days to identify a beneficial sort key for your tables.
86-1	14419-14426	Advisor	
86-2	14427-14435	analyzes	
86-3	14436-14440	your	
86-4	14441-14448	cluster	
86-5	14448-14449	’	
86-6	14449-14450	s	
86-7	14451-14459	workload	
86-8	14460-14464	over	
86-9	14465-14472	several	
86-10	14473-14477	days	
86-11	14478-14480	to	
86-12	14481-14489	identify	
86-13	14490-14491	a	
86-14	14492-14502	beneficial	
86-15	14503-14507	sort	
86-16	14508-14511	key	
86-17	14512-14515	for	
86-18	14516-14520	your	
86-19	14521-14527	tables	
86-20	14527-14528	.	

#Text=See the following screenshot.
87-1	14529-14532	See	
87-2	14533-14536	the	
87-3	14537-14546	following	
87-4	14547-14557	screenshot	
87-5	14557-14558	.	

#Text=If you don’t see a recommendation for a table, that doesn’t necessarily mean that the current configuration is the best.
88-1	14559-14561	If	
88-2	14562-14565	you	
88-3	14566-14569	don	
88-4	14569-14570	’	
88-5	14570-14571	t	
88-6	14572-14575	see	
88-7	14576-14577	a	
88-8	14578-14592	recommendation	
88-9	14593-14596	for	
88-10	14597-14598	a	
88-11	14599-14604	table	
88-12	14604-14605	,	
88-13	14606-14610	that	
88-14	14611-14616	doesn	
88-15	14616-14617	’	
88-16	14617-14618	t	
88-17	14619-14630	necessarily	
88-18	14631-14635	mean	
88-19	14636-14640	that	
88-20	14641-14644	the	
88-21	14645-14652	current	
88-22	14653-14666	configuration	
88-23	14667-14669	is	
88-24	14670-14673	the	
88-25	14674-14678	best	
88-26	14678-14679	.	

#Text=Advisor doesn’t provide recommendations when there isn’t enough data or the expected benefit of sorting is small.
89-1	14680-14687	Advisor	
89-2	14688-14693	doesn	
89-3	14693-14694	’	
89-4	14694-14695	t	
89-5	14696-14703	provide	
89-6	14704-14719	recommendations	
89-7	14720-14724	when	
89-8	14725-14730	there	
89-9	14731-14734	isn	
89-10	14734-14735	’	
89-11	14735-14736	t	
89-12	14737-14743	enough	
89-13	14744-14748	data	
89-14	14749-14751	or	
89-15	14752-14755	the	
89-16	14756-14764	expected	
89-17	14765-14772	benefit	
89-18	14773-14775	of	
89-19	14776-14783	sorting	
89-20	14784-14786	is	
89-21	14787-14792	small	
89-22	14792-14793	.	

#Text=Table compression recommendation
#Text=Amazon Redshift is optimized to reduce your storage footprint and improve query performance by using compression encodings.
90-1	14794-14799	Table	
90-2	14800-14811	compression	
90-3	14812-14826	recommendation	
90-4	14827-14833	Amazon	
90-5	14834-14842	Redshift	
90-6	14843-14845	is	
90-7	14846-14855	optimized	
90-8	14856-14858	to	
90-9	14859-14865	reduce	
90-10	14866-14870	your	
90-11	14871-14878	storage	
90-12	14879-14888	footprint	
90-13	14889-14892	and	
90-14	14893-14900	improve	
90-15	14901-14906	query	
90-16	14907-14918	performance	
90-17	14919-14921	by	
90-18	14922-14927	using	
90-19	14928-14939	compression	
90-20	14940-14949	encodings	
90-21	14949-14950	.	

#Text=When you don’t use compression, data consumes additional space and requires additional disk I/O.
91-1	14951-14955	When	
91-2	14956-14959	you	
91-3	14960-14963	don	
91-4	14963-14964	’	
91-5	14964-14965	t	
91-6	14966-14969	use	
91-7	14970-14981	compression	
91-8	14981-14982	,	
91-9	14983-14987	data	
91-10	14988-14996	consumes	
91-11	14997-15007	additional	
91-12	15008-15013	space	
91-13	15014-15017	and	
91-14	15018-15026	requires	
91-15	15027-15037	additional	
91-16	15038-15042	disk	
91-17	15043-15044	I	
91-18	15044-15045	/	
91-19	15045-15046	O	
91-20	15046-15047	.	

#Text=Applying compression to large uncompressed columns can have a big impact on your cluster.
92-1	15048-15056	Applying	
92-2	15057-15068	compression	
92-3	15069-15071	to	
92-4	15072-15077	large	
92-5	15078-15090	uncompressed	
92-6	15091-15098	columns	
92-7	15099-15102	can	
92-8	15103-15107	have	
92-9	15108-15109	a	
92-10	15110-15113	big	
92-11	15114-15120	impact	
92-12	15121-15123	on	
92-13	15124-15128	your	
92-14	15129-15136	cluster	
92-15	15136-15137	.	

#Text=The compression analysis in Advisor tracks uncompressed storage allocated to permanent user tables.
93-1	15138-15141	The	
93-2	15142-15153	compression	
93-3	15154-15162	analysis	
93-4	15163-15165	in	
93-5	15166-15173	Advisor	
93-6	15174-15180	tracks	
93-7	15181-15193	uncompressed	
93-8	15194-15201	storage	
93-9	15202-15211	allocated	
93-10	15212-15214	to	
93-11	15215-15224	permanent	
93-12	15225-15229	user	
93-13	15230-15236	tables	
93-14	15236-15237	.	

#Text=It reviews storage metadata associated with large uncompressed columns that aren’t sort key columns.
94-1	15238-15240	It	
94-2	15241-15248	reviews	
94-3	15249-15256	storage	
94-4	15257-15265	metadata	
94-5	15266-15276	associated	
94-6	15277-15281	with	
94-7	15282-15287	large	
94-8	15288-15300	uncompressed	
94-9	15301-15308	columns	
94-10	15309-15313	that	
94-11	15314-15318	aren	
94-12	15318-15319	’	
94-13	15319-15320	t	
94-14	15321-15325	sort	
94-15	15326-15329	key	
94-16	15330-15337	columns	
94-17	15337-15338	.	

#Text=The following screenshot shows an example of table compression recommendation.
95-1	15339-15342	The	
95-2	15343-15352	following	
95-3	15353-15363	screenshot	
95-4	15364-15369	shows	
95-5	15370-15372	an	
95-6	15373-15380	example	
95-7	15381-15383	of	
95-8	15384-15389	table	
95-9	15390-15401	compression	
95-10	15402-15416	recommendation	
95-11	15416-15417	.	

#Text=Table statistics recommendation
#Text=Maintaining current statistics helps complex queries run in the shortest possible time.
96-1	15418-15423	Table	
96-2	15424-15434	statistics	
96-3	15435-15449	recommendation	
96-4	15450-15461	Maintaining	
96-5	15462-15469	current	
96-6	15470-15480	statistics	
96-7	15481-15486	helps	
96-8	15487-15494	complex	
96-9	15495-15502	queries	
96-10	15503-15506	run	
96-11	15507-15509	in	
96-12	15510-15513	the	
96-13	15514-15522	shortest	
96-14	15523-15531	possible	
96-15	15532-15536	time	
96-16	15536-15537	.	

#Text=The Advisor analysis tracks tables whose statistics are out-of-date or missing.
97-1	15538-15541	The	
97-2	15542-15549	Advisor	
97-3	15550-15558	analysis	
97-4	15559-15565	tracks	
97-5	15566-15572	tables	
97-6	15573-15578	whose	
97-7	15579-15589	statistics	
97-8	15590-15593	are	
97-9	15594-15605	out-of-date	
97-10	15606-15608	or	
97-11	15609-15616	missing	
97-12	15616-15617	.	

#Text=It reviews table access metadata associated with complex queries.
98-1	15618-15620	It	
98-2	15621-15628	reviews	
98-3	15629-15634	table	
98-4	15635-15641	access	
98-5	15642-15650	metadata	
98-6	15651-15661	associated	
98-7	15662-15666	with	
98-8	15667-15674	complex	
98-9	15675-15682	queries	
98-10	15682-15683	.	

#Text=If tables that are frequently accessed with complex patterns are missing statistics, Amazon Redshift Advisor creates a critical recommendation to run ANALYZE.
99-1	15684-15686	If	
99-2	15687-15693	tables	
99-3	15694-15698	that	
99-4	15699-15702	are	
99-5	15703-15713	frequently	
99-6	15714-15722	accessed	
99-7	15723-15727	with	
99-8	15728-15735	complex	
99-9	15736-15744	patterns	
99-10	15745-15748	are	
99-11	15749-15756	missing	
99-12	15757-15767	statistics	
99-13	15767-15768	,	
99-14	15769-15775	Amazon	
99-15	15776-15784	Redshift	
99-16	15785-15792	Advisor	
99-17	15793-15800	creates	
99-18	15801-15802	a	
99-19	15803-15811	critical	
99-20	15812-15826	recommendation	
99-21	15827-15829	to	
99-22	15830-15833	run	
99-23	15834-15841	ANALYZE	
99-24	15841-15842	.	

#Text=If tables that are frequently accessed with complex patterns have out-of-date statistics, Advisor creates a suggested recommendation to run ANALYZE.
100-1	15843-15845	If	
100-2	15846-15852	tables	
100-3	15853-15857	that	
100-4	15858-15861	are	
100-5	15862-15872	frequently	
100-6	15873-15881	accessed	
100-7	15882-15886	with	
100-8	15887-15894	complex	
100-9	15895-15903	patterns	
100-10	15904-15908	have	
100-11	15909-15920	out-of-date	
100-12	15921-15931	statistics	
100-13	15931-15932	,	
100-14	15933-15940	Advisor	
100-15	15941-15948	creates	
100-16	15949-15950	a	
100-17	15951-15960	suggested	
100-18	15961-15975	recommendation	
100-19	15976-15978	to	
100-20	15979-15982	run	
100-21	15983-15990	ANALYZE	
100-22	15990-15991	.	

#Text=The following screenshot shows a table statistics recommendation.
101-1	15992-15995	The	
101-2	15996-16005	following	
101-3	16006-16016	screenshot	
101-4	16017-16022	shows	
101-5	16023-16024	a	
101-6	16025-16030	table	
101-7	16031-16041	statistics	
101-8	16042-16056	recommendation	
101-9	16056-16057	.	

#Text=Tip #4: Using Auto WLM with priorities to increase throughput
#Text=Auto WLM simplifies workload management and maximizes query throughput by using ML to dynamically manage memory and concurrency, which ensures optimal utilization of the cluster resources
#Text=Amazon Redshift runs queries using the queuing system (WLM).
102-1	16058-16061	Tip	
102-2	16062-16064	#4	
102-3	16064-16065	:	
102-4	16066-16071	Using	
102-5	16072-16076	Auto	
102-6	16077-16080	WLM	
102-7	16081-16085	with	
102-8	16086-16096	priorities	
102-9	16097-16099	to	
102-10	16100-16108	increase	
102-11	16109-16119	throughput	
102-12	16120-16124	Auto	
102-13	16125-16128	WLM	
102-14	16129-16139	simplifies	
102-15	16140-16148	workload	
102-16	16149-16159	management	
102-17	16160-16163	and	
102-18	16164-16173	maximizes	
102-19	16174-16179	query	
102-20	16180-16190	throughput	
102-21	16191-16193	by	
102-22	16194-16199	using	
102-23	16200-16202	ML	
102-24	16203-16205	to	
102-25	16206-16217	dynamically	
102-26	16218-16224	manage	
102-27	16225-16231	memory	
102-28	16232-16235	and	
102-29	16236-16247	concurrency	
102-30	16247-16248	,	
102-31	16249-16254	which	
102-32	16255-16262	ensures	
102-33	16263-16270	optimal	
102-34	16271-16282	utilization	
102-35	16283-16285	of	
102-36	16286-16289	the	
102-37	16290-16297	cluster	
102-38	16298-16307	resources	
102-39	16308-16314	Amazon	
102-40	16315-16323	Redshift	
102-41	16324-16328	runs	
102-42	16329-16336	queries	
102-43	16337-16342	using	
102-44	16343-16346	the	
102-45	16347-16354	queuing	
102-46	16355-16361	system	
102-47	16362-16363	(	
102-48	16363-16366	WLM	
102-49	16366-16367	)	
102-50	16367-16368	.	

#Text=You can define up to eight queues to separate workloads from each other.
103-1	16369-16372	You	
103-2	16373-16376	can	
103-3	16377-16383	define	
103-4	16384-16386	up	
103-5	16387-16389	to	
103-6	16390-16395	eight	
103-7	16396-16402	queues	
103-8	16403-16405	to	
103-9	16406-16414	separate	
103-10	16415-16424	workloads	
103-11	16425-16429	from	
103-12	16430-16434	each	
103-13	16435-16440	other	
103-14	16440-16441	.	

#Text=Amazon Redshift Advisor automatically analyzes the current WLM usage and can make recommendations to get more throughput from your cluster.
104-1	16442-16448	Amazon	
104-2	16449-16457	Redshift	
104-3	16458-16465	Advisor	
104-4	16466-16479	automatically	
104-5	16480-16488	analyzes	
104-6	16489-16492	the	
104-7	16493-16500	current	
104-8	16501-16504	WLM	
104-9	16505-16510	usage	
104-10	16511-16514	and	
104-11	16515-16518	can	
104-12	16519-16523	make	
104-13	16524-16539	recommendations	
104-14	16540-16542	to	
104-15	16543-16546	get	
104-16	16547-16551	more	
104-17	16552-16562	throughput	
104-18	16563-16567	from	
104-19	16568-16572	your	
104-20	16573-16580	cluster	
104-21	16580-16581	.	

#Text=Periodically reviewing the suggestions from Advisor helps you get the best performance.
105-1	16582-16594	Periodically	
105-2	16595-16604	reviewing	
105-3	16605-16608	the	
105-4	16609-16620	suggestions	
105-5	16621-16625	from	
105-6	16626-16633	Advisor	
105-7	16634-16639	helps	
105-8	16640-16643	you	
105-9	16644-16647	get	
105-10	16648-16651	the	
105-11	16652-16656	best	
105-12	16657-16668	performance	
105-13	16668-16669	.	

#Text=Query priorities is a feature of Auto WLM that lets you assign priority ranks to different user groups or query groups, to ensure that higher priority workloads get more resources for consistent query performance, even during busy times.
106-1	16670-16675	Query	
106-2	16676-16686	priorities	
106-3	16687-16689	is	
106-4	16690-16691	a	
106-5	16692-16699	feature	
106-6	16700-16702	of	
106-7	16703-16707	Auto	
106-8	16708-16711	WLM	
106-9	16712-16716	that	
106-10	16717-16721	lets	
106-11	16722-16725	you	
106-12	16726-16732	assign	
106-13	16733-16741	priority	
106-14	16742-16747	ranks	
106-15	16748-16750	to	
106-16	16751-16760	different	
106-17	16761-16765	user	
106-18	16766-16772	groups	
106-19	16773-16775	or	
106-20	16776-16781	query	
106-21	16782-16788	groups	
106-22	16788-16789	,	
106-23	16790-16792	to	
106-24	16793-16799	ensure	
106-25	16800-16804	that	
106-26	16805-16811	higher	
106-27	16812-16820	priority	
106-28	16821-16830	workloads	
106-29	16831-16834	get	
106-30	16835-16839	more	
106-31	16840-16849	resources	
106-32	16850-16853	for	
106-33	16854-16864	consistent	
106-34	16865-16870	query	
106-35	16871-16882	performance	
106-36	16882-16883	,	
106-37	16884-16888	even	
106-38	16889-16895	during	
106-39	16896-16900	busy	
106-40	16901-16906	times	
106-41	16906-16907	.	

#Text=It is a good practice to set up query monitoring rules (QMR) to monitor and manage resource intensive or runaway queries.
107-1	16908-16910	It	
107-2	16911-16913	is	
107-3	16914-16915	a	
107-4	16916-16920	good	
107-5	16921-16929	practice	
107-6	16930-16932	to	
107-7	16933-16936	set	
107-8	16937-16939	up	
107-9	16939-16940	 	
107-10	16940-16945	query	
107-11	16946-16956	monitoring	
107-12	16957-16962	rules	
107-13	16963-16964	(	
107-14	16964-16967	QMR	
107-15	16967-16968	)	
107-16	16969-16971	to	
107-17	16972-16979	monitor	
107-18	16980-16983	and	
107-19	16984-16990	manage	
107-20	16991-16999	resource	
107-21	17000-17009	intensive	
107-22	17010-17012	or	
107-23	17013-17020	runaway	
107-24	17021-17028	queries	
107-25	17028-17029	.	

#Text=QMR also enables you to dynamically change a query’s priority based on its runtime performance and metrics-based rules you define.
108-1	17030-17033	QMR	
108-2	17034-17038	also	
108-3	17039-17046	enables	
108-4	17047-17050	you	
108-5	17051-17053	to	
108-6	17054-17065	dynamically	
108-7	17066-17072	change	
108-8	17073-17074	a	
108-9	17075-17080	query	
108-10	17080-17081	’	
108-11	17081-17082	s	
108-12	17083-17091	priority	
108-13	17092-17097	based	
108-14	17098-17100	on	
108-15	17101-17104	its	
108-16	17105-17112	runtime	
108-17	17113-17124	performance	
108-18	17125-17128	and	
108-19	17129-17142	metrics-based	
108-20	17143-17148	rules	
108-21	17149-17152	you	
108-22	17153-17159	define	
108-23	17159-17160	.	

#Text=For more information on migrating from manual to automatic WLM with query priorities, see Modifying the WLM configuration.
109-1	17161-17164	For	
109-2	17165-17169	more	
109-3	17170-17181	information	
109-4	17182-17184	on	
109-5	17185-17194	migrating	
109-6	17195-17199	from	
109-7	17200-17206	manual	
109-8	17207-17209	to	
109-9	17210-17219	automatic	
109-10	17220-17223	WLM	
109-11	17224-17228	with	
109-12	17229-17234	query	
109-13	17235-17245	priorities	
109-14	17245-17246	,	
109-15	17247-17250	see	
109-16	17251-17260	Modifying	
109-17	17261-17264	the	
109-18	17265-17268	WLM	
109-19	17269-17282	configuration	
109-20	17282-17283	.	

#Text=It’s recommended to take advantage of Amazon Redshift’s short query acceleration (SQA).
110-1	17284-17286	It	
110-2	17286-17287	’	
110-3	17287-17288	s	
110-4	17289-17300	recommended	
110-5	17301-17303	to	
110-6	17304-17308	take	
110-7	17309-17318	advantage	
110-8	17319-17321	of	
110-9	17322-17328	Amazon	
110-10	17329-17337	Redshift	
110-11	17337-17338	’	
110-12	17338-17339	s	
110-13	17340-17345	short	
110-14	17346-17351	query	
110-15	17352-17364	acceleration	
110-16	17365-17366	(	
110-17	17366-17369	SQA	
110-18	17369-17370	)	
110-19	17370-17371	.	

#Text=SQA uses ML to run short-running jobs in their own queue.
111-1	17372-17375	SQA	
111-2	17376-17380	uses	
111-3	17381-17383	ML	
111-4	17384-17386	to	
111-5	17387-17390	run	
111-6	17391-17404	short-running	
111-7	17405-17409	jobs	
111-8	17410-17412	in	
111-9	17413-17418	their	
111-10	17419-17422	own	
111-11	17423-17428	queue	
111-12	17428-17429	.	

#Text=This keeps small jobs processing, rather than waiting behind longer-running SQL statements.
112-1	17430-17434	This	
112-2	17435-17440	keeps	
112-3	17441-17446	small	
112-4	17447-17451	jobs	
112-5	17452-17462	processing	
112-6	17462-17463	,	
112-7	17464-17470	rather	
112-8	17471-17475	than	
112-9	17476-17483	waiting	
112-10	17484-17490	behind	
112-11	17491-17505	longer-running	
112-12	17506-17509	SQL	
112-13	17510-17520	statements	
112-14	17520-17521	.	

#Text=SQA is enabled by default in the default parameter group and for all new parameter groups. 
113-1	17522-17525	SQA	
113-2	17526-17528	is	
113-3	17529-17536	enabled	
113-4	17537-17539	by	
113-5	17540-17547	default	
113-6	17548-17550	in	
113-7	17551-17554	the	
113-8	17555-17562	default	
113-9	17563-17572	parameter	
113-10	17573-17578	group	
113-11	17579-17582	and	
113-12	17583-17586	for	
113-13	17587-17590	all	
113-14	17591-17594	new	
113-15	17595-17604	parameter	
113-16	17605-17611	groups	
113-17	17611-17612	.	
113-18	17612-17613	 	

#Text=You can enable and disable SQA via a check box on the Amazon Redshift console, or by using the Amazon Redshift CLI.
114-1	17613-17616	You	
114-2	17617-17620	can	
114-3	17621-17627	enable	
114-4	17628-17631	and	
114-5	17632-17639	disable	
114-6	17640-17643	SQA	
114-7	17644-17647	via	
114-8	17648-17649	a	
114-9	17650-17655	check	
114-10	17656-17659	box	
114-11	17660-17662	on	
114-12	17663-17666	the	
114-13	17667-17673	Amazon	
114-14	17674-17682	Redshift	
114-15	17683-17690	console	
114-16	17690-17691	,	
114-17	17692-17694	or	
114-18	17695-17697	by	
114-19	17698-17703	using	
114-20	17704-17707	the	
114-21	17708-17714	Amazon	
114-22	17715-17723	Redshift	
114-23	17724-17727	CLI	
114-24	17727-17728	.	

#Text=If you enable concurrency scaling, Amazon Redshift can automatically and quickly provision additional clusters should your workload begin to back up.
115-1	17729-17731	If	
115-2	17732-17735	you	
115-3	17736-17742	enable	
115-4	17743-17754	concurrency	
115-5	17755-17762	scaling	
115-6	17762-17763	,	
115-7	17764-17770	Amazon	
115-8	17771-17779	Redshift	
115-9	17780-17783	can	
115-10	17784-17797	automatically	
115-11	17798-17801	and	
115-12	17802-17809	quickly	
115-13	17810-17819	provision	
115-14	17820-17830	additional	
115-15	17831-17839	clusters	
115-16	17840-17846	should	
115-17	17847-17851	your	
115-18	17852-17860	workload	
115-19	17861-17866	begin	
115-20	17867-17869	to	
115-21	17870-17874	back	
115-22	17875-17877	up	
115-23	17877-17878	.	

#Text=This is an important consideration when deciding the cluster’s WLM configuration.
116-1	17879-17883	This	
116-2	17884-17886	is	
116-3	17887-17889	an	
116-4	17890-17899	important	
116-5	17900-17913	consideration	
116-6	17914-17918	when	
116-7	17919-17927	deciding	
116-8	17928-17931	the	
116-9	17932-17939	cluster	
116-10	17939-17940	’	
116-11	17940-17941	s	
116-12	17942-17945	WLM	
116-13	17946-17959	configuration	
116-14	17959-17960	.	

#Text=A common pattern is to optimize the WLM configuration to run most SQL statements without the assistance of supplemental memory, reserving additional processing power for short jobs.
117-1	17961-17962	A	
117-2	17963-17969	common	
117-3	17970-17977	pattern	
117-4	17978-17980	is	
117-5	17981-17983	to	
117-6	17984-17992	optimize	
117-7	17993-17996	the	
117-8	17997-18000	WLM	
117-9	18001-18014	configuration	
117-10	18015-18017	to	
117-11	18018-18021	run	
117-12	18022-18026	most	
117-13	18027-18030	SQL	
117-14	18031-18041	statements	
117-15	18042-18049	without	
117-16	18050-18053	the	
117-17	18054-18064	assistance	
117-18	18065-18067	of	
117-19	18068-18080	supplemental	
117-20	18081-18087	memory	
117-21	18087-18088	,	
117-22	18089-18098	reserving	
117-23	18099-18109	additional	
117-24	18110-18120	processing	
117-25	18121-18126	power	
117-26	18127-18130	for	
117-27	18131-18136	short	
117-28	18137-18141	jobs	
117-29	18141-18142	.	

#Text=Some queueing is acceptable because additional clusters spin up if your needs suddenly expand.
118-1	18143-18147	Some	
118-2	18148-18156	queueing	
118-3	18157-18159	is	
118-4	18160-18170	acceptable	
118-5	18171-18178	because	
118-6	18179-18189	additional	
118-7	18190-18198	clusters	
118-8	18199-18203	spin	
118-9	18204-18206	up	
118-10	18207-18209	if	
118-11	18210-18214	your	
118-12	18215-18220	needs	
118-13	18221-18229	suddenly	
118-14	18230-18236	expand	
118-15	18236-18237	.	

#Text=To enable concurrency scaling on a WLM queue, set the concurrency scaling mode value to AUTO.
119-1	18238-18240	To	
119-2	18241-18247	enable	
119-3	18248-18259	concurrency	
119-4	18260-18267	scaling	
119-5	18268-18270	on	
119-6	18271-18272	a	
119-7	18273-18276	WLM	
119-8	18277-18282	queue	
119-9	18282-18283	,	
119-10	18284-18287	set	
119-11	18288-18291	the	
119-12	18292-18303	concurrency	
119-13	18304-18311	scaling	
119-14	18312-18316	mode	
119-15	18317-18322	value	
119-16	18323-18325	to	
119-17	18326-18330	AUTO	
119-18	18330-18331	.	

#Text=You can best inform your decisions by reviewing the concurrency scaling billing model. 
120-1	18332-18335	You	
120-2	18336-18339	can	
120-3	18340-18344	best	
120-4	18345-18351	inform	
120-5	18352-18356	your	
120-6	18357-18366	decisions	
120-7	18367-18369	by	
120-8	18370-18379	reviewing	
120-9	18380-18383	the	
120-10	18384-18395	concurrency	
120-11	18396-18403	scaling	
120-12	18404-18411	billing	
120-13	18412-18417	model	
120-14	18417-18418	.	
120-15	18418-18419	 	

#Text=You can also monitor and control the concurrency scaling usage and cost by using the Amazon Redshift usage limit feature.
121-1	18419-18422	You	
121-2	18423-18426	can	
121-3	18427-18431	also	
121-4	18432-18439	monitor	
121-5	18440-18443	and	
121-6	18444-18451	control	
121-7	18452-18455	the	
121-8	18456-18467	concurrency	
121-9	18468-18475	scaling	
121-10	18476-18481	usage	
121-11	18482-18485	and	
121-12	18486-18490	cost	
121-13	18491-18493	by	
121-14	18494-18499	using	
121-15	18500-18503	the	
121-16	18504-18510	Amazon	
121-17	18511-18519	Redshift	
121-18	18520-18525	usage	
121-19	18526-18531	limit	
121-20	18532-18539	feature	
121-21	18539-18540	.	

#Text=In some cases, unless you enable concurrency scaling for the queue, the user or query’s assigned queue may be busy, and you must wait for a queue slot to open.
122-1	18541-18543	In	
122-2	18544-18548	some	
122-3	18549-18554	cases	
122-4	18554-18555	,	
122-5	18556-18562	unless	
122-6	18563-18566	you	
122-7	18567-18573	enable	
122-8	18574-18585	concurrency	
122-9	18586-18593	scaling	
122-10	18594-18597	for	
122-11	18598-18601	the	
122-12	18602-18607	queue	
122-13	18607-18608	,	
122-14	18609-18612	the	
122-15	18613-18617	user	
122-16	18618-18620	or	
122-17	18621-18626	query	
122-18	18626-18627	’	
122-19	18627-18628	s	
122-20	18629-18637	assigned	
122-21	18638-18643	queue	
122-22	18644-18647	may	
122-23	18648-18650	be	
122-24	18651-18655	busy	
122-25	18655-18656	,	
122-26	18657-18660	and	
122-27	18661-18664	you	
122-28	18665-18669	must	
122-29	18670-18674	wait	
122-30	18675-18678	for	
122-31	18679-18680	a	
122-32	18681-18686	queue	
122-33	18687-18691	slot	
122-34	18692-18694	to	
122-35	18695-18699	open	
122-36	18699-18700	.	

#Text=During this time, the system isn’t running the query at all.
123-1	18701-18707	During	
123-2	18708-18712	this	
123-3	18713-18717	time	
123-4	18717-18718	,	
123-5	18719-18722	the	
123-6	18723-18729	system	
123-7	18730-18733	isn	
123-8	18733-18734	’	
123-9	18734-18735	t	
123-10	18736-18743	running	
123-11	18744-18747	the	
123-12	18748-18753	query	
123-13	18754-18756	at	
123-14	18757-18760	all	
123-15	18760-18761	.	

#Text=If this becomes a frequent problem, you may have to increase concurrency.
124-1	18762-18764	If	
124-2	18765-18769	this	
124-3	18770-18777	becomes	
124-4	18778-18779	a	
124-5	18780-18788	frequent	
124-6	18789-18796	problem	
124-7	18796-18797	,	
124-8	18798-18801	you	
124-9	18802-18805	may	
124-10	18806-18810	have	
124-11	18811-18813	to	
124-12	18814-18822	increase	
124-13	18823-18834	concurrency	
124-14	18834-18835	.	

#Text=First, determine if any queries are queuing, using the queuing_queries.sql admin script.
125-1	18836-18841	First	
125-2	18841-18842	,	
125-3	18843-18852	determine	
125-4	18853-18855	if	
125-5	18856-18859	any	
125-6	18860-18867	queries	
125-7	18868-18871	are	
125-8	18872-18879	queuing	
125-9	18879-18880	,	
125-10	18881-18886	using	
125-11	18887-18890	the	
125-12	18891-18910	queuing_queries.sql	
125-13	18911-18916	admin	
125-14	18917-18923	script	
125-15	18923-18924	.	

#Text=Review the maximum concurrency that your cluster needed in the past with wlm_apex.sql, or get an hour-by-hour historical analysis with wlm_apex_hourly.sql.
126-1	18925-18931	Review	
126-2	18932-18935	the	
126-3	18936-18943	maximum	
126-4	18944-18955	concurrency	
126-5	18956-18960	that	
126-6	18961-18965	your	
126-7	18966-18973	cluster	
126-8	18974-18980	needed	
126-9	18981-18983	in	
126-10	18984-18987	the	
126-11	18988-18992	past	
126-12	18993-18997	with	
126-13	18998-19010	wlm_apex.sql	
126-14	19010-19011	,	
126-15	19012-19014	or	
126-16	19015-19018	get	
126-17	19019-19021	an	
126-18	19022-19034	hour-by-hour	
126-19	19035-19045	historical	
126-20	19046-19054	analysis	
126-21	19055-19059	with	
126-22	19060-19079	wlm_apex_hourly.sql	
126-23	19079-19080	.	

#Text=Keep in mind that increasing concurrency allows more queries to run, but each query gets a smaller share of the memory.
127-1	19081-19085	Keep	
127-2	19086-19088	in	
127-3	19089-19093	mind	
127-4	19094-19098	that	
127-5	19099-19109	increasing	
127-6	19110-19121	concurrency	
127-7	19122-19128	allows	
127-8	19129-19133	more	
127-9	19134-19141	queries	
127-10	19142-19144	to	
127-11	19145-19148	run	
127-12	19148-19149	,	
127-13	19150-19153	but	
127-14	19154-19158	each	
127-15	19159-19164	query	
127-16	19165-19169	gets	
127-17	19170-19171	a	
127-18	19172-19179	smaller	
127-19	19180-19185	share	
127-20	19186-19188	of	
127-21	19189-19192	the	
127-22	19193-19199	memory	
127-23	19199-19200	.	

#Text=You may find that by increasing concurrency, some queries must use temporary disk storage to complete, which is also sub-optimal.
128-1	19201-19204	You	
128-2	19205-19208	may	
128-3	19209-19213	find	
128-4	19214-19218	that	
128-5	19219-19221	by	
128-6	19222-19232	increasing	
128-7	19233-19244	concurrency	
128-8	19244-19245	,	
128-9	19246-19250	some	
128-10	19251-19258	queries	
128-11	19259-19263	must	
128-12	19264-19267	use	
128-13	19268-19277	temporary	
128-14	19278-19282	disk	
128-15	19283-19290	storage	
128-16	19291-19293	to	
128-17	19294-19302	complete	
128-18	19302-19303	,	
128-19	19304-19309	which	
128-20	19310-19312	is	
128-21	19313-19317	also	
128-22	19318-19329	sub-optimal	
128-23	19329-19330	.	

#Text=Tip #5: Taking advantage of Amazon Redshift data lake integration
#Text=Amazon Redshift is tightly integrated with other AWS-native services such as Amazon S3 which let’s the Amazon Redshift cluster interact with the data lake in several useful ways.
129-1	19331-19334	Tip	
129-2	19335-19337	#5	
129-3	19337-19338	:	
129-4	19339-19345	Taking	
129-5	19346-19355	advantage	
129-6	19356-19358	of	
129-7	19359-19365	Amazon	
129-8	19366-19374	Redshift	
129-9	19375-19379	data	
129-10	19380-19384	lake	
129-11	19385-19396	integration	
129-12	19397-19403	Amazon	
129-13	19404-19412	Redshift	
129-14	19413-19415	is	
129-15	19416-19423	tightly	
129-16	19424-19434	integrated	
129-17	19435-19439	with	
129-18	19440-19445	other	
129-19	19446-19456	AWS-native	
129-20	19457-19465	services	
129-21	19466-19470	such	
129-22	19471-19473	as	
129-23	19474-19480	Amazon	
129-24	19481-19483	S3	
129-25	19484-19489	which	
129-26	19490-19493	let	
129-27	19493-19494	’	
129-28	19494-19495	s	
129-29	19496-19499	the	
129-30	19500-19506	Amazon	
129-31	19507-19515	Redshift	
129-32	19516-19523	cluster	
129-33	19524-19532	interact	
129-34	19533-19537	with	
129-35	19538-19541	the	
129-36	19542-19546	data	
129-37	19547-19551	lake	
129-38	19552-19554	in	
129-39	19555-19562	several	
129-40	19563-19569	useful	
129-41	19570-19574	ways	
129-42	19574-19575	.	

#Text=Amazon Redshift Spectrum lets you query data directly from files on Amazon S3 through an independent, elastically sized compute layer.
130-1	19576-19582	Amazon	
130-2	19583-19591	Redshift	
130-3	19592-19600	Spectrum	
130-4	19601-19605	lets	
130-5	19606-19609	you	
130-6	19610-19615	query	
130-7	19616-19620	data	
130-8	19621-19629	directly	
130-9	19630-19634	from	
130-10	19635-19640	files	
130-11	19641-19643	on	
130-12	19644-19650	Amazon	
130-13	19651-19653	S3	
130-14	19654-19661	through	
130-15	19662-19664	an	
130-16	19665-19676	independent	
130-17	19676-19677	,	
130-18	19678-19689	elastically	
130-19	19690-19695	sized	
130-20	19696-19703	compute	
130-21	19704-19709	layer	
130-22	19709-19710	.	

#Text=Use these patterns independently or apply them together to offload work to the Amazon Redshift Spectrum compute layer, quickly create a transformed or aggregated dataset, or eliminate entire steps in a traditional ETL process.
131-1	19711-19714	Use	
131-2	19715-19720	these	
131-3	19721-19729	patterns	
131-4	19730-19743	independently	
131-5	19744-19746	or	
131-6	19747-19752	apply	
131-7	19753-19757	them	
131-8	19758-19766	together	
131-9	19767-19769	to	
131-10	19770-19777	offload	
131-11	19778-19782	work	
131-12	19783-19785	to	
131-13	19786-19789	the	
131-14	19790-19796	Amazon	
131-15	19797-19805	Redshift	
131-16	19806-19814	Spectrum	
131-17	19815-19822	compute	
131-18	19823-19828	layer	
131-19	19828-19829	,	
131-20	19830-19837	quickly	
131-21	19838-19844	create	
131-22	19845-19846	a	
131-23	19847-19858	transformed	
131-24	19859-19861	or	
131-25	19862-19872	aggregated	
131-26	19873-19880	dataset	
131-27	19880-19881	,	
131-28	19882-19884	or	
131-29	19885-19894	eliminate	
131-30	19895-19901	entire	
131-31	19902-19907	steps	
131-32	19908-19910	in	
131-33	19911-19912	a	
131-34	19913-19924	traditional	
131-35	19925-19928	ETL	
131-36	19929-19936	process	
131-37	19936-19937	.	

#Text=Use the Amazon Redshift Spectrum compute layer to offload workloads from the main cluster, and apply more processing power to the specific SQL statement.
132-1	19938-19941	Use	
132-2	19942-19945	the	
132-3	19946-19952	Amazon	
132-4	19953-19961	Redshift	
132-5	19962-19970	Spectrum	
132-6	19971-19978	compute	
132-7	19979-19984	layer	
132-8	19985-19987	to	
132-9	19988-19995	offload	
132-10	19996-20005	workloads	
132-11	20006-20010	from	
132-12	20011-20014	the	
132-13	20015-20019	main	
132-14	20020-20027	cluster	
132-15	20027-20028	,	
132-16	20029-20032	and	
132-17	20033-20038	apply	
132-18	20039-20043	more	
132-19	20044-20054	processing	
132-20	20055-20060	power	
132-21	20061-20063	to	
132-22	20064-20067	the	
132-23	20068-20076	specific	
132-24	20077-20080	SQL	
132-25	20081-20090	statement	
132-26	20090-20091	.	

#Text=Amazon Redshift Spectrum automatically assigns compute power up to approximately 10 times the processing power of the main cluster.
133-1	20092-20098	Amazon	
133-2	20099-20107	Redshift	
133-3	20108-20116	Spectrum	
133-4	20117-20130	automatically	
133-5	20131-20138	assigns	
133-6	20139-20146	compute	
133-7	20147-20152	power	
133-8	20153-20155	up	
133-9	20156-20158	to	
133-10	20159-20172	approximately	
133-11	20173-20175	10	
133-12	20176-20181	times	
133-13	20182-20185	the	
133-14	20186-20196	processing	
133-15	20197-20202	power	
133-16	20203-20205	of	
133-17	20206-20209	the	
133-18	20210-20214	main	
133-19	20215-20222	cluster	
133-20	20222-20223	.	

#Text=This may be an effective way to quickly process large transform or aggregate jobs.
134-1	20224-20228	This	
134-2	20229-20232	may	
134-3	20233-20235	be	
134-4	20236-20238	an	
134-5	20239-20248	effective	
134-6	20249-20252	way	
134-7	20253-20255	to	
134-8	20256-20263	quickly	
134-9	20264-20271	process	
134-10	20272-20277	large	
134-11	20278-20287	transform	
134-12	20288-20290	or	
134-13	20291-20300	aggregate	
134-14	20301-20305	jobs	
134-15	20305-20306	.	

#Text=Skip the load in an ELT process and run the transform directly against data on Amazon S3.
135-1	20307-20311	Skip	
135-2	20312-20315	the	
135-3	20316-20320	load	
135-4	20321-20323	in	
135-5	20324-20326	an	
135-6	20327-20330	ELT	
135-7	20331-20338	process	
135-8	20339-20342	and	
135-9	20343-20346	run	
135-10	20347-20350	the	
135-11	20351-20360	transform	
135-12	20361-20369	directly	
135-13	20370-20377	against	
135-14	20378-20382	data	
135-15	20383-20385	on	
135-16	20386-20392	Amazon	
135-17	20393-20395	S3	
135-18	20395-20396	.	

#Text=You can run transform logic against partitioned, columnar data on Amazon S3 with an INSERT … SELECT statement.
136-1	20397-20400	You	
136-2	20401-20404	can	
136-3	20405-20408	run	
136-4	20409-20418	transform	
136-5	20419-20424	logic	
136-6	20425-20432	against	
136-7	20433-20444	partitioned	
136-8	20444-20445	,	
136-9	20446-20454	columnar	
136-10	20455-20459	data	
136-11	20460-20462	on	
136-12	20463-20469	Amazon	
136-13	20470-20472	S3	
136-14	20473-20477	with	
136-15	20478-20480	an	
136-16	20481-20487	INSERT	
136-17	20488-20489	…	
136-18	20490-20496	SELECT	
136-19	20497-20506	statement	
136-20	20506-20507	.	

#Text=It’s easier than going through the extra work of loading a staging dataset, joining it to other tables, and running a transform against it.
137-1	20508-20510	It	
137-2	20510-20511	’	
137-3	20511-20512	s	
137-4	20513-20519	easier	
137-5	20520-20524	than	
137-6	20525-20530	going	
137-7	20531-20538	through	
137-8	20539-20542	the	
137-9	20543-20548	extra	
137-10	20549-20553	work	
137-11	20554-20556	of	
137-12	20557-20564	loading	
137-13	20565-20566	a	
137-14	20567-20574	staging	
137-15	20575-20582	dataset	
137-16	20582-20583	,	
137-17	20584-20591	joining	
137-18	20592-20594	it	
137-19	20595-20597	to	
137-20	20598-20603	other	
137-21	20604-20610	tables	
137-22	20610-20611	,	
137-23	20612-20615	and	
137-24	20616-20623	running	
137-25	20624-20625	a	
137-26	20626-20635	transform	
137-27	20636-20643	against	
137-28	20644-20646	it	
137-29	20646-20647	.	

#Text=Use Amazon Redshift Spectrum to run queries as the data lands in Amazon S3, rather than adding a step to load the data onto the main cluster.
138-1	20648-20651	Use	
138-2	20652-20658	Amazon	
138-3	20659-20667	Redshift	
138-4	20668-20676	Spectrum	
138-5	20677-20679	to	
138-6	20680-20683	run	
138-7	20684-20691	queries	
138-8	20692-20694	as	
138-9	20695-20698	the	
138-10	20699-20703	data	
138-11	20704-20709	lands	
138-12	20710-20712	in	
138-13	20713-20719	Amazon	
138-14	20720-20722	S3	
138-15	20722-20723	,	
138-16	20724-20730	rather	
138-17	20731-20735	than	
138-18	20736-20742	adding	
138-19	20743-20744	a	
138-20	20745-20749	step	
138-21	20750-20752	to	
138-22	20753-20757	load	
138-23	20758-20761	the	
138-24	20762-20766	data	
138-25	20767-20771	onto	
138-26	20772-20775	the	
138-27	20776-20780	main	
138-28	20781-20788	cluster	
138-29	20788-20789	.	

#Text=This allows for real-time analytics.
139-1	20790-20794	This	
139-2	20795-20801	allows	
139-3	20802-20805	for	
139-4	20806-20815	real-time	
139-5	20816-20825	analytics	
139-6	20825-20826	.	

#Text=Land the output of a staging or transformation cluster on Amazon S3 in a partitioned, columnar format.
140-1	20827-20831	Land	
140-2	20832-20835	the	
140-3	20836-20842	output	
140-4	20843-20845	of	
140-5	20846-20847	a	
140-6	20848-20855	staging	
140-7	20856-20858	or	
140-8	20859-20873	transformation	
140-9	20874-20881	cluster	
140-10	20882-20884	on	
140-11	20885-20891	Amazon	
140-12	20892-20894	S3	
140-13	20895-20897	in	
140-14	20898-20899	a	
140-15	20900-20911	partitioned	
140-16	20911-20912	,	
140-17	20913-20921	columnar	
140-18	20922-20928	format	
140-19	20928-20929	.	

#Text=The main or reporting cluster can either query from that Amazon S3 dataset directly or load it via an INSERT … SELECT statement.
141-1	20930-20933	The	
141-2	20934-20938	main	
141-3	20939-20941	or	
141-4	20942-20951	reporting	
141-5	20952-20959	cluster	
141-6	20960-20963	can	
141-7	20964-20970	either	
141-8	20971-20976	query	
141-9	20977-20981	from	
141-10	20982-20986	that	
141-11	20987-20993	Amazon	
141-12	20994-20996	S3	
141-13	20997-21004	dataset	
141-14	21005-21013	directly	
141-15	21014-21016	or	
141-16	21017-21021	load	
141-17	21022-21024	it	
141-18	21025-21028	via	
141-19	21029-21031	an	
141-20	21032-21038	INSERT	
141-21	21039-21040	…	
141-22	21041-21047	SELECT	
141-23	21048-21057	statement	
141-24	21057-21058	.	

#Text=Within Amazon Redshift itself, you can export the data into the data lake with the UNLOAD command, or by writing to external tables.
142-1	21059-21065	Within	
142-2	21066-21072	Amazon	
142-3	21073-21081	Redshift	
142-4	21082-21088	itself	
142-5	21088-21089	,	
142-6	21090-21093	you	
142-7	21094-21097	can	
142-8	21098-21104	export	
142-9	21105-21108	the	
142-10	21109-21113	data	
142-11	21114-21118	into	
142-12	21119-21122	the	
142-13	21123-21127	data	
142-14	21128-21132	lake	
142-15	21133-21137	with	
142-16	21138-21141	the	
142-17	21141-21142	 	
142-18	21142-21148	UNLOAD	
142-19	21149-21156	command	
142-20	21156-21157	,	
142-21	21158-21160	or	
142-22	21161-21163	by	
142-23	21164-21171	writing	
142-24	21172-21174	to	
142-25	21175-21183	external	
142-26	21184-21190	tables	
142-27	21190-21191	.	

#Text=Both options export SQL statement output to Amazon S3 in a massively parallel fashion.
143-1	21192-21196	Both	
143-2	21197-21204	options	
143-3	21204-21205	 	
143-4	21205-21211	export	
143-5	21212-21215	SQL	
143-6	21216-21225	statement	
143-7	21226-21232	output	
143-8	21233-21235	to	
143-9	21236-21242	Amazon	
143-10	21243-21245	S3	
143-11	21246-21248	in	
143-12	21249-21250	a	
143-13	21251-21260	massively	
143-14	21261-21269	parallel	
143-15	21270-21277	fashion	
143-16	21277-21278	.	

#Text=You can do the following:
#Text=Using familiar CREATE EXTERNAL TABLE AS SELECT and INSERT INTO SQL commands, create and populate external tables on Amazon S3 for subsequent use by Amazon Redshift or other services participating in the data lake without the need to manually maintain partitions.
144-1	21279-21282	You	
144-2	21283-21286	can	
144-3	21287-21289	do	
144-4	21290-21293	the	
144-5	21294-21303	following	
144-6	21303-21304	:	
144-7	21305-21310	Using	
144-8	21311-21319	familiar	
144-9	21320-21326	CREATE	
144-10	21327-21335	EXTERNAL	
144-11	21336-21341	TABLE	
144-12	21342-21344	AS	
144-13	21345-21351	SELECT	
144-14	21352-21355	and	
144-15	21356-21362	INSERT	
144-16	21363-21367	INTO	
144-17	21368-21371	SQL	
144-18	21372-21380	commands	
144-19	21380-21381	,	
144-20	21382-21388	create	
144-21	21389-21392	and	
144-22	21393-21401	populate	
144-23	21402-21410	external	
144-24	21411-21417	tables	
144-25	21418-21420	on	
144-26	21421-21427	Amazon	
144-27	21428-21430	S3	
144-28	21431-21434	for	
144-29	21435-21445	subsequent	
144-30	21446-21449	use	
144-31	21450-21452	by	
144-32	21453-21459	Amazon	
144-33	21460-21468	Redshift	
144-34	21469-21471	or	
144-35	21472-21477	other	
144-36	21478-21486	services	
144-37	21487-21500	participating	
144-38	21501-21503	in	
144-39	21504-21507	the	
144-40	21508-21512	data	
144-41	21513-21517	lake	
144-42	21518-21525	without	
144-43	21526-21529	the	
144-44	21530-21534	need	
144-45	21535-21537	to	
144-46	21538-21546	manually	
144-47	21547-21555	maintain	
144-48	21556-21566	partitions	
144-49	21566-21567	.	

#Text=Materialized views can also cover external tables, further enhancing the accessibility and utility of the data lake.
145-1	21568-21580	Materialized	
145-2	21581-21586	views	
145-3	21587-21590	can	
145-4	21591-21595	also	
145-5	21596-21601	cover	
145-6	21602-21610	external	
145-7	21611-21617	tables	
145-8	21617-21618	,	
145-9	21619-21626	further	
145-10	21627-21636	enhancing	
145-11	21637-21640	the	
145-12	21641-21654	accessibility	
145-13	21655-21658	and	
145-14	21659-21666	utility	
145-15	21667-21669	of	
145-16	21670-21673	the	
145-17	21674-21678	data	
145-18	21679-21683	lake	
145-19	21683-21684	.	

#Text=Using the UNLOAD command, Amazon Redshift can export SQL statement output to Amazon S3 in a massively parallel fashion.
146-1	21685-21690	Using	
146-2	21691-21694	the	
146-3	21695-21701	UNLOAD	
146-4	21702-21709	command	
146-5	21709-21710	,	
146-6	21711-21717	Amazon	
146-7	21718-21726	Redshift	
146-8	21727-21730	can	
146-9	21731-21737	export	
146-10	21738-21741	SQL	
146-11	21742-21751	statement	
146-12	21752-21758	output	
146-13	21759-21761	to	
146-14	21762-21768	Amazon	
146-15	21769-21771	S3	
146-16	21772-21774	in	
146-17	21775-21776	a	
146-18	21777-21786	massively	
146-19	21787-21795	parallel	
146-20	21796-21803	fashion	
146-21	21803-21804	.	

#Text=This technique greatly improves the export performance and lessens the impact of running the data through the leader node.
147-1	21805-21809	This	
147-2	21810-21819	technique	
147-3	21820-21827	greatly	
147-4	21828-21836	improves	
147-5	21837-21840	the	
147-6	21841-21847	export	
147-7	21848-21859	performance	
147-8	21860-21863	and	
147-9	21864-21871	lessens	
147-10	21872-21875	the	
147-11	21876-21882	impact	
147-12	21883-21885	of	
147-13	21886-21893	running	
147-14	21894-21897	the	
147-15	21898-21902	data	
147-16	21903-21910	through	
147-17	21911-21914	the	
147-18	21915-21921	leader	
147-19	21922-21926	node	
147-20	21926-21927	.	

#Text=You can compress the exported data on its way off the Amazon Redshift cluster.
148-1	21928-21931	You	
148-2	21932-21935	can	
148-3	21936-21944	compress	
148-4	21945-21948	the	
148-5	21949-21957	exported	
148-6	21958-21962	data	
148-7	21963-21965	on	
148-8	21966-21969	its	
148-9	21970-21973	way	
148-10	21974-21977	off	
148-11	21978-21981	the	
148-12	21982-21988	Amazon	
148-13	21989-21997	Redshift	
148-14	21998-22005	cluster	
148-15	22005-22006	.	

#Text=As the size of the output grows, so does the benefit of using this feature.
149-1	22007-22009	As	
149-2	22010-22013	the	
149-3	22014-22018	size	
149-4	22019-22021	of	
149-5	22022-22025	the	
149-6	22026-22032	output	
149-7	22033-22038	grows	
149-8	22038-22039	,	
149-9	22040-22042	so	
149-10	22043-22047	does	
149-11	22048-22051	the	
149-12	22052-22059	benefit	
149-13	22060-22062	of	
149-14	22063-22068	using	
149-15	22069-22073	this	
149-16	22074-22081	feature	
149-17	22081-22082	.	

#Text=For writing columnar data to the data lake, UNLOAD can write partition-aware Parquet data.
150-1	22083-22086	For	
150-2	22087-22094	writing	
150-3	22095-22103	columnar	
150-4	22104-22108	data	
150-5	22109-22111	to	
150-6	22112-22115	the	
150-7	22116-22120	data	
150-8	22121-22125	lake	
150-9	22125-22126	,	
150-10	22127-22133	UNLOAD	
150-11	22134-22137	can	
150-12	22138-22143	write	
150-13	22144-22159	partition-aware	
150-14	22160-22167	Parquet	
150-15	22168-22172	data	
150-16	22172-22173	.	

#Text=Tip #6: Improving the efficiency of temporary tables
#Text=Amazon Redshift provides temporary tables, which act like normal tables but have a lifetime of a single SQL session.
151-1	22174-22177	Tip	
151-2	22178-22180	#6	
151-3	22180-22181	:	
151-4	22182-22191	Improving	
151-5	22192-22195	the	
151-6	22196-22206	efficiency	
151-7	22207-22209	of	
151-8	22210-22219	temporary	
151-9	22220-22226	tables	
151-10	22227-22233	Amazon	
151-11	22234-22242	Redshift	
151-12	22243-22251	provides	
151-13	22252-22261	temporary	
151-14	22262-22268	tables	
151-15	22268-22269	,	
151-16	22270-22275	which	
151-17	22276-22279	act	
151-18	22280-22284	like	
151-19	22285-22291	normal	
151-20	22292-22298	tables	
151-21	22299-22302	but	
151-22	22303-22307	have	
151-23	22308-22309	a	
151-24	22310-22318	lifetime	
151-25	22319-22321	of	
151-26	22322-22323	a	
151-27	22324-22330	single	
151-28	22331-22334	SQL	
151-29	22335-22342	session	
151-30	22342-22343	.	

#Text=The proper use of temporary tables can significantly improve performance of some ETL operations.
152-1	22344-22347	The	
152-2	22348-22354	proper	
152-3	22355-22358	use	
152-4	22359-22361	of	
152-5	22362-22371	temporary	
152-6	22372-22378	tables	
152-7	22379-22382	can	
152-8	22383-22396	significantly	
152-9	22397-22404	improve	
152-10	22405-22416	performance	
152-11	22417-22419	of	
152-12	22420-22424	some	
152-13	22425-22428	ETL	
152-14	22429-22439	operations	
152-15	22439-22440	.	

#Text=Unlike regular permanent tables, data changes made to temporary tables don’t trigger automatic incremental backups to Amazon S3, and they don’t require synchronous block mirroring to store a redundant copy of data on a different compute node.
153-1	22441-22447	Unlike	
153-2	22448-22455	regular	
153-3	22456-22465	permanent	
153-4	22466-22472	tables	
153-5	22472-22473	,	
153-6	22474-22478	data	
153-7	22479-22486	changes	
153-8	22487-22491	made	
153-9	22492-22494	to	
153-10	22495-22504	temporary	
153-11	22505-22511	tables	
153-12	22512-22515	don	
153-13	22515-22516	’	
153-14	22516-22517	t	
153-15	22518-22525	trigger	
153-16	22526-22535	automatic	
153-17	22536-22547	incremental	
153-18	22548-22555	backups	
153-19	22556-22558	to	
153-20	22559-22565	Amazon	
153-21	22566-22568	S3	
153-22	22568-22569	,	
153-23	22570-22573	and	
153-24	22574-22578	they	
153-25	22579-22582	don	
153-26	22582-22583	’	
153-27	22583-22584	t	
153-28	22585-22592	require	
153-29	22593-22604	synchronous	
153-30	22605-22610	block	
153-31	22611-22620	mirroring	
153-32	22621-22623	to	
153-33	22624-22629	store	
153-34	22630-22631	a	
153-35	22632-22641	redundant	
153-36	22642-22646	copy	
153-37	22647-22649	of	
153-38	22650-22654	data	
153-39	22655-22657	on	
153-40	22658-22659	a	
153-41	22660-22669	different	
153-42	22670-22677	compute	
153-43	22678-22682	node	
153-44	22682-22683	.	

#Text=Due to these reasons, data ingestion on temporary tables involves reduced overhead and performs much faster.
154-1	22684-22687	Due	
154-2	22688-22690	to	
154-3	22691-22696	these	
154-4	22697-22704	reasons	
154-5	22704-22705	,	
154-6	22706-22710	data	
154-7	22711-22720	ingestion	
154-8	22721-22723	on	
154-9	22724-22733	temporary	
154-10	22734-22740	tables	
154-11	22741-22749	involves	
154-12	22750-22757	reduced	
154-13	22758-22766	overhead	
154-14	22767-22770	and	
154-15	22771-22779	performs	
154-16	22780-22784	much	
154-17	22785-22791	faster	
154-18	22791-22792	.	

#Text=For transient storage needs like staging tables, temporary tables are ideal.
155-1	22793-22796	For	
155-2	22797-22806	transient	
155-3	22807-22814	storage	
155-4	22815-22820	needs	
155-5	22821-22825	like	
155-6	22826-22833	staging	
155-7	22834-22840	tables	
155-8	22840-22841	,	
155-9	22842-22851	temporary	
155-10	22852-22858	tables	
155-11	22859-22862	are	
155-12	22863-22868	ideal	
155-13	22868-22869	.	

#Text=You can create temporary tables using the CREATE TEMPORARY TABLE syntax, or by issuing a SELECT … INTO #TEMP_TABLE query.
156-1	22870-22873	You	
156-2	22874-22877	can	
156-3	22878-22884	create	
156-4	22885-22894	temporary	
156-5	22895-22901	tables	
156-6	22902-22907	using	
156-7	22908-22911	the	
156-8	22912-22918	CREATE	
156-9	22919-22928	TEMPORARY	
156-10	22929-22934	TABLE	
156-11	22935-22941	syntax	
156-12	22941-22942	,	
156-13	22943-22945	or	
156-14	22946-22948	by	
156-15	22949-22956	issuing	
156-16	22957-22958	a	
156-17	22959-22965	SELECT	
156-18	22966-22967	…	
156-19	22968-22972	INTO	
156-20	22973-22974	#	
156-21	22974-22984	TEMP_TABLE	
156-22	22985-22990	query	
156-23	22990-22991	.	

#Text=The CREATE TABLE statement gives you complete control over the definition of the temporary table.
157-1	22992-22995	The	
157-2	22996-23002	CREATE	
157-3	23003-23008	TABLE	
157-4	23009-23018	statement	
157-5	23019-23024	gives	
157-6	23025-23028	you	
157-7	23029-23037	complete	
157-8	23038-23045	control	
157-9	23046-23050	over	
157-10	23051-23054	the	
157-11	23055-23065	definition	
157-12	23066-23068	of	
157-13	23069-23072	the	
157-14	23073-23082	temporary	
157-15	23083-23088	table	
157-16	23088-23089	.	

#Text=The SELECT … INTO and C(T)TAS commands use the input data to determine column names, sizes and data types, and use default storage properties.
158-1	23090-23093	The	
158-2	23094-23100	SELECT	
158-3	23101-23102	…	
158-4	23103-23107	INTO	
158-5	23108-23111	and	
158-6	23112-23113	C	
158-7	23113-23114	(	
158-8	23114-23115	T	
158-9	23115-23116	)	
158-10	23116-23119	TAS	
158-11	23120-23128	commands	
158-12	23129-23132	use	
158-13	23133-23136	the	
158-14	23137-23142	input	
158-15	23143-23147	data	
158-16	23148-23150	to	
158-17	23151-23160	determine	
158-18	23161-23167	column	
158-19	23168-23173	names	
158-20	23173-23174	,	
158-21	23175-23180	sizes	
158-22	23181-23184	and	
158-23	23185-23189	data	
158-24	23190-23195	types	
158-25	23195-23196	,	
158-26	23197-23200	and	
158-27	23201-23204	use	
158-28	23205-23212	default	
158-29	23213-23220	storage	
158-30	23221-23231	properties	
158-31	23231-23232	.	

#Text=Consider default storage properties carefully, because they may cause problems.
159-1	23233-23241	Consider	
159-2	23242-23249	default	
159-3	23250-23257	storage	
159-4	23258-23268	properties	
159-5	23269-23278	carefully	
159-6	23278-23279	,	
159-7	23280-23287	because	
159-8	23288-23292	they	
159-9	23293-23296	may	
159-10	23297-23302	cause	
159-11	23303-23311	problems	
159-12	23311-23312	.	

#Text=By default, for temporary tables, Amazon Redshift applies EVEN table distribution with no column encoding (such as RAW compression) for all columns.
160-1	23313-23315	By	
160-2	23316-23323	default	
160-3	23323-23324	,	
160-4	23325-23328	for	
160-5	23329-23338	temporary	
160-6	23339-23345	tables	
160-7	23345-23346	,	
160-8	23347-23353	Amazon	
160-9	23354-23362	Redshift	
160-10	23363-23370	applies	
160-11	23371-23375	EVEN	
160-12	23376-23381	table	
160-13	23382-23394	distribution	
160-14	23395-23399	with	
160-15	23400-23402	no	
160-16	23403-23409	column	
160-17	23410-23418	encoding	
160-18	23419-23420	(	
160-19	23420-23424	such	
160-20	23425-23427	as	
160-21	23428-23431	RAW	
160-22	23432-23443	compression	
160-23	23443-23444	)	
160-24	23445-23448	for	
160-25	23449-23452	all	
160-26	23453-23460	columns	
160-27	23460-23461	.	

#Text=This data structure is sub-optimal for many types of queries.
161-1	23462-23466	This	
161-2	23467-23471	data	
161-3	23472-23481	structure	
161-4	23482-23484	is	
161-5	23485-23496	sub-optimal	
161-6	23497-23500	for	
161-7	23501-23505	many	
161-8	23506-23511	types	
161-9	23512-23514	of	
161-10	23515-23522	queries	
161-11	23522-23523	.	

#Text=If you employ the SELECT…INTO syntax, you can’t set the column encoding, column distribution, or sort keys.
162-1	23524-23526	If	
162-2	23527-23530	you	
162-3	23531-23537	employ	
162-4	23538-23541	the	
162-5	23542-23548	SELECT	
162-6	23548-23549	…	
162-7	23549-23553	INTO	
162-8	23554-23560	syntax	
162-9	23560-23561	,	
162-10	23562-23565	you	
162-11	23566-23569	can	
162-12	23569-23570	’	
162-13	23570-23571	t	
162-14	23572-23575	set	
162-15	23576-23579	the	
162-16	23580-23586	column	
162-17	23587-23595	encoding	
162-18	23595-23596	,	
162-19	23597-23603	column	
162-20	23604-23616	distribution	
162-21	23616-23617	,	
162-22	23618-23620	or	
162-23	23621-23625	sort	
162-24	23626-23630	keys	
162-25	23630-23631	.	

#Text=The CREATE TABLE AS (CTAS) syntax instead lets you specify a distribution style and sort keys, and Amazon Redshift automatically applies LZO encoding for everything other than sort keys, Booleans, reals, and doubles.
163-1	23632-23635	The	
163-2	23636-23642	CREATE	
163-3	23643-23648	TABLE	
163-4	23649-23651	AS	
163-5	23652-23653	(	
163-6	23653-23657	CTAS	
163-7	23657-23658	)	
163-8	23659-23665	syntax	
163-9	23666-23673	instead	
163-10	23674-23678	lets	
163-11	23679-23682	you	
163-12	23683-23690	specify	
163-13	23691-23692	a	
163-14	23693-23705	distribution	
163-15	23706-23711	style	
163-16	23712-23715	and	
163-17	23716-23720	sort	
163-18	23721-23725	keys	
163-19	23725-23726	,	
163-20	23727-23730	and	
163-21	23731-23737	Amazon	
163-22	23738-23746	Redshift	
163-23	23747-23760	automatically	
163-24	23761-23768	applies	
163-25	23769-23772	LZO	
163-26	23773-23781	encoding	
163-27	23782-23785	for	
163-28	23786-23796	everything	
163-29	23797-23802	other	
163-30	23803-23807	than	
163-31	23808-23812	sort	
163-32	23813-23817	keys	
163-33	23817-23818	,	
163-34	23819-23827	Booleans	
163-35	23827-23828	,	
163-36	23829-23834	reals	
163-37	23834-23835	,	
163-38	23836-23839	and	
163-39	23840-23847	doubles	
163-40	23847-23848	.	

#Text=You can exert additional control by using the CREATE TABLE syntax rather than CTAS.
164-1	23849-23852	You	
164-2	23853-23856	can	
164-3	23857-23862	exert	
164-4	23863-23873	additional	
164-5	23874-23881	control	
164-6	23882-23884	by	
164-7	23885-23890	using	
164-8	23891-23894	the	
164-9	23895-23901	CREATE	
164-10	23902-23907	TABLE	
164-11	23908-23914	syntax	
164-12	23915-23921	rather	
164-13	23922-23926	than	
164-14	23927-23931	CTAS	
164-15	23931-23932	.	

#Text=If you create temporary tables, remember to convert all SELECT…INTO syntax into the CREATE statement.
165-1	23933-23935	If	
165-2	23936-23939	you	
165-3	23940-23946	create	
165-4	23947-23956	temporary	
165-5	23957-23963	tables	
165-6	23963-23964	,	
165-7	23965-23973	remember	
165-8	23974-23976	to	
165-9	23977-23984	convert	
165-10	23985-23988	all	
165-11	23989-23995	SELECT	
165-12	23995-23996	…	
165-13	23996-24000	INTO	
165-14	24001-24007	syntax	
165-15	24008-24012	into	
165-16	24013-24016	the	
165-17	24017-24023	CREATE	
165-18	24024-24033	statement	
165-19	24033-24034	.	

#Text=This ensures that your temporary tables have column encodings and don’t cause distribution errors within your workflow.
166-1	24035-24039	This	
166-2	24040-24047	ensures	
166-3	24048-24052	that	
166-4	24053-24057	your	
166-5	24058-24067	temporary	
166-6	24068-24074	tables	
166-7	24075-24079	have	
166-8	24080-24086	column	
166-9	24087-24096	encodings	
166-10	24097-24100	and	
166-11	24101-24104	don	
166-12	24104-24105	’	
166-13	24105-24106	t	
166-14	24107-24112	cause	
166-15	24113-24125	distribution	
166-16	24126-24132	errors	
166-17	24133-24139	within	
166-18	24140-24144	your	
166-19	24145-24153	workflow	
166-20	24153-24154	.	

#Text=For example, you may want to convert a statement using this syntax:
#Text=SELECT column_a, column_b INTO #my_temp_table FROM my_table;
#Text=You need to analyze the temporary table for optimal column encoding:
#Text=Master=# analyze compression #my_temp_table;
#Text=Table | Column | Encoding
#Text=----------------+----------+---------
#Text=#my_temp_table | columb_a | lzo
#Text=#my_temp_table | columb_b | bytedict
#Text=(2 rows)
#Text=You can then convert the SELECT INTO a statement to the following:
#Text=BEGIN;
#Text=CREATE TEMPORARY TABLE my_temp_table(
#Text=column_a varchar(128) encode lzo,
#Text=column_b char(4) encode bytedict)
#Text=distkey (column_a) -- Assuming you intend to join this table on column_a
#Text=sortkey (column_b) -- Assuming you are sorting or grouping by column_b
#Text=INSERT INTO my_temp_table SELECT column_a, column_b FROM my_table;
#Text=COMMIT;
#Text=If you create a temporary staging table by using a CREATE TABLE LIKE statement, the staging table inherits the distribution key, sort keys, and column encodings from the parent target table.
167-1	24155-24158	For	
167-2	24159-24166	example	
167-3	24166-24167	,	
167-4	24168-24171	you	
167-5	24172-24175	may	
167-6	24176-24180	want	
167-7	24181-24183	to	
167-8	24184-24191	convert	
167-9	24192-24193	a	
167-10	24194-24203	statement	
167-11	24204-24209	using	
167-12	24210-24214	this	
167-13	24215-24221	syntax	
167-14	24221-24222	:	
167-15	24223-24229	SELECT	
167-16	24230-24238	column_a	
167-17	24238-24239	,	
167-18	24240-24248	column_b	
167-19	24249-24253	INTO	
167-20	24254-24255	#	
167-21	24255-24268	my_temp_table	
167-22	24269-24273	FROM	
167-23	24274-24282	my_table	
167-24	24282-24283	;	
167-25	24284-24287	You	
167-26	24288-24292	need	
167-27	24293-24295	to	
167-28	24296-24303	analyze	
167-29	24304-24307	the	
167-30	24308-24317	temporary	
167-31	24318-24323	table	
167-32	24324-24327	for	
167-33	24328-24335	optimal	
167-34	24336-24342	column	
167-35	24343-24351	encoding	
167-36	24351-24352	:	
167-37	24353-24359	Master	
167-38	24359-24360	=	
167-39	24360-24361	#	
167-40	24362-24369	analyze	
167-41	24370-24381	compression	
167-42	24382-24383	#	
167-43	24383-24396	my_temp_table	
167-44	24396-24397	;	
167-45	24398-24403	Table	
167-46	24404-24405	|	
167-47	24406-24412	Column	
167-48	24413-24414	|	
167-49	24415-24423	Encoding	
167-50	24424-24425	-	
167-51	24425-24426	-	
167-52	24426-24427	-	
167-53	24427-24428	-	
167-54	24428-24429	-	
167-55	24429-24430	-	
167-56	24430-24431	-	
167-57	24431-24432	-	
167-58	24432-24433	-	
167-59	24433-24434	-	
167-60	24434-24435	-	
167-61	24435-24436	-	
167-62	24436-24437	-	
167-63	24437-24438	-	
167-64	24438-24439	-	
167-65	24439-24440	-	
167-66	24440-24441	+	
167-67	24441-24442	-	
167-68	24442-24443	-	
167-69	24443-24444	-	
167-70	24444-24445	-	
167-71	24445-24446	-	
167-72	24446-24447	-	
167-73	24447-24448	-	
167-74	24448-24449	-	
167-75	24449-24450	-	
167-76	24450-24451	-	
167-77	24451-24452	+	
167-78	24452-24453	-	
167-79	24453-24454	-	
167-80	24454-24455	-	
167-81	24455-24456	-	
167-82	24456-24457	-	
167-83	24457-24458	-	
167-84	24458-24459	-	
167-85	24459-24460	-	
167-86	24460-24461	-	
167-87	24462-24463	#	
167-88	24463-24476	my_temp_table	
167-89	24477-24478	|	
167-90	24479-24487	columb_a	
167-91	24488-24489	|	
167-92	24490-24493	lzo	
167-93	24494-24495	#	
167-94	24495-24508	my_temp_table	
167-95	24509-24510	|	
167-96	24511-24519	columb_b	
167-97	24520-24521	|	
167-98	24522-24530	bytedict	
167-99	24531-24532	(	
167-100	24532-24533	2	
167-101	24534-24538	rows	
167-102	24538-24539	)	
167-103	24540-24543	You	
167-104	24544-24547	can	
167-105	24548-24552	then	
167-106	24553-24560	convert	
167-107	24561-24564	the	
167-108	24565-24571	SELECT	
167-109	24572-24576	INTO	
167-110	24577-24578	a	
167-111	24579-24588	statement	
167-112	24589-24591	to	
167-113	24592-24595	the	
167-114	24596-24605	following	
167-115	24605-24606	:	
167-116	24607-24612	BEGIN	
167-117	24612-24613	;	
167-118	24614-24620	CREATE	
167-119	24621-24630	TEMPORARY	
167-120	24631-24636	TABLE	
167-121	24637-24650	my_temp_table	
167-122	24650-24651	(	
167-123	24652-24660	column_a	
167-124	24661-24668	varchar	
167-125	24668-24669	(	
167-126	24669-24672	128	
167-127	24672-24673	)	
167-128	24674-24680	encode	
167-129	24681-24684	lzo	
167-130	24684-24685	,	
167-131	24686-24694	column_b	
167-132	24695-24699	char	
167-133	24699-24700	(	
167-134	24700-24701	4	
167-135	24701-24702	)	
167-136	24703-24709	encode	
167-137	24710-24718	bytedict	
167-138	24718-24719	)	
167-139	24720-24727	distkey	
167-140	24728-24729	(	
167-141	24729-24737	column_a	
167-142	24737-24738	)	
167-143	24739-24740	-	
167-144	24740-24741	-	
167-145	24742-24750	Assuming	
167-146	24751-24754	you	
167-147	24755-24761	intend	
167-148	24762-24764	to	
167-149	24765-24769	join	
167-150	24770-24774	this	
167-151	24775-24780	table	
167-152	24781-24783	on	
167-153	24784-24792	column_a	
167-154	24793-24800	sortkey	
167-155	24801-24802	(	
167-156	24802-24810	column_b	
167-157	24810-24811	)	
167-158	24812-24813	-	
167-159	24813-24814	-	
167-160	24815-24823	Assuming	
167-161	24824-24827	you	
167-162	24828-24831	are	
167-163	24832-24839	sorting	
167-164	24840-24842	or	
167-165	24843-24851	grouping	
167-166	24852-24854	by	
167-167	24855-24863	column_b	
167-168	24864-24870	INSERT	
167-169	24871-24875	INTO	
167-170	24876-24889	my_temp_table	
167-171	24890-24896	SELECT	
167-172	24897-24905	column_a	
167-173	24905-24906	,	
167-174	24907-24915	column_b	
167-175	24916-24920	FROM	
167-176	24921-24929	my_table	
167-177	24929-24930	;	
167-178	24931-24937	COMMIT	
167-179	24937-24938	;	
167-180	24939-24941	If	
167-181	24942-24945	you	
167-182	24946-24952	create	
167-183	24953-24954	a	
167-184	24955-24964	temporary	
167-185	24965-24972	staging	
167-186	24973-24978	table	
167-187	24979-24981	by	
167-188	24982-24987	using	
167-189	24988-24989	a	
167-190	24990-24996	CREATE	
167-191	24997-25002	TABLE	
167-192	25003-25007	LIKE	
167-193	25008-25017	statement	
167-194	25017-25018	,	
167-195	25019-25022	the	
167-196	25023-25030	staging	
167-197	25031-25036	table	
167-198	25037-25045	inherits	
167-199	25046-25049	the	
167-200	25050-25062	distribution	
167-201	25063-25066	key	
167-202	25066-25067	,	
167-203	25068-25072	sort	
167-204	25073-25077	keys	
167-205	25077-25078	,	
167-206	25079-25082	and	
167-207	25083-25089	column	
167-208	25090-25099	encodings	
167-209	25100-25104	from	
167-210	25105-25108	the	
167-211	25109-25115	parent	
167-212	25116-25122	target	
167-213	25123-25128	table	
167-214	25128-25129	.	

#Text=In this case, merge operations that join the staging and target tables on the same distribution key performs faster because the joining rows are collocated.
168-1	25130-25132	In	
168-2	25133-25137	this	
168-3	25138-25142	case	
168-4	25142-25143	,	
168-5	25144-25149	merge	
168-6	25150-25160	operations	
168-7	25161-25165	that	
168-8	25166-25170	join	
168-9	25171-25174	the	
168-10	25175-25182	staging	
168-11	25183-25186	and	
168-12	25187-25193	target	
168-13	25194-25200	tables	
168-14	25201-25203	on	
168-15	25204-25207	the	
168-16	25208-25212	same	
168-17	25213-25225	distribution	
168-18	25226-25229	key	
168-19	25230-25238	performs	
168-20	25239-25245	faster	
168-21	25246-25253	because	
168-22	25254-25257	the	
168-23	25258-25265	joining	
168-24	25266-25270	rows	
168-25	25271-25274	are	
168-26	25275-25285	collocated	
168-27	25285-25286	.	

#Text=To verify that the query uses a collocated join, run the query with EXPLAIN and check for DS_DIST_NONE on all the joins.
169-1	25287-25289	To	
169-2	25290-25296	verify	
169-3	25297-25301	that	
169-4	25302-25305	the	
169-5	25306-25311	query	
169-6	25312-25316	uses	
169-7	25317-25318	a	
169-8	25319-25329	collocated	
169-9	25330-25334	join	
169-10	25334-25335	,	
169-11	25336-25339	run	
169-12	25340-25343	the	
169-13	25344-25349	query	
169-14	25350-25354	with	
169-15	25355-25362	EXPLAIN	
169-16	25363-25366	and	
169-17	25367-25372	check	
169-18	25373-25376	for	
169-19	25377-25389	DS_DIST_NONE	
169-20	25390-25392	on	
169-21	25393-25396	all	
169-22	25397-25400	the	
169-23	25401-25406	joins	
169-24	25406-25407	.	

#Text=You may also want to analyze statistics on the temporary table, especially when you use it as a join table for subsequent queries.
170-1	25408-25411	You	
170-2	25412-25415	may	
170-3	25416-25420	also	
170-4	25421-25425	want	
170-5	25426-25428	to	
170-6	25429-25436	analyze	
170-7	25437-25447	statistics	
170-8	25448-25450	on	
170-9	25451-25454	the	
170-10	25455-25464	temporary	
170-11	25465-25470	table	
170-12	25470-25471	,	
170-13	25472-25482	especially	
170-14	25483-25487	when	
170-15	25488-25491	you	
170-16	25492-25495	use	
170-17	25496-25498	it	
170-18	25499-25501	as	
170-19	25502-25503	a	
170-20	25504-25508	join	
170-21	25509-25514	table	
170-22	25515-25518	for	
170-23	25519-25529	subsequent	
170-24	25530-25537	queries	
170-25	25537-25538	.	

#Text=See the following code:
#Text=ANALYZE my_temp_table;
#Text=With this trick, you retain the functionality of temporary tables but control data placement on the cluster through distribution key assignment.
171-1	25539-25542	See	
171-2	25543-25546	the	
171-3	25547-25556	following	
171-4	25557-25561	code	
171-5	25561-25562	:	
171-6	25563-25570	ANALYZE	
171-7	25571-25584	my_temp_table	
171-8	25584-25585	;	
171-9	25586-25590	With	
171-10	25591-25595	this	
171-11	25596-25601	trick	
171-12	25601-25602	,	
171-13	25603-25606	you	
171-14	25607-25613	retain	
171-15	25614-25617	the	
171-16	25618-25631	functionality	
171-17	25632-25634	of	
171-18	25635-25644	temporary	
171-19	25645-25651	tables	
171-20	25652-25655	but	
171-21	25656-25663	control	
171-22	25664-25668	data	
171-23	25669-25678	placement	
171-24	25679-25681	on	
171-25	25682-25685	the	
171-26	25686-25693	cluster	
171-27	25694-25701	through	
171-28	25702-25714	distribution	
171-29	25715-25718	key	
171-30	25719-25729	assignment	
171-31	25729-25730	.	

#Text=You also take advantage of the columnar nature of Amazon Redshift by using column encoding.
172-1	25731-25734	You	
172-2	25735-25739	also	
172-3	25740-25744	take	
172-4	25745-25754	advantage	
172-5	25755-25757	of	
172-6	25758-25761	the	
172-7	25762-25770	columnar	
172-8	25771-25777	nature	
172-9	25778-25780	of	
172-10	25781-25787	Amazon	
172-11	25788-25796	Redshift	
172-12	25797-25799	by	
172-13	25800-25805	using	
172-14	25806-25812	column	
172-15	25813-25821	encoding	
172-16	25821-25822	.	

#Text=Tip #7: Using QMR and Amazon CloudWatch metrics to drive additional performance improvements
#Text=In addition to the Amazon Redshift Advisor recommendations, you can get performance insights through other channels.
173-1	25823-25826	Tip	
173-2	25827-25829	#7	
173-3	25829-25830	:	
173-4	25830-25831	 	
173-5	25831-25836	Using	
173-6	25837-25840	QMR	
173-7	25841-25844	and	
173-8	25845-25851	Amazon	
173-9	25852-25862	CloudWatch	
173-10	25863-25870	metrics	
173-11	25871-25873	to	
173-12	25874-25879	drive	
173-13	25880-25890	additional	
173-14	25891-25902	performance	
173-15	25903-25915	improvements	
173-16	25916-25918	In	
173-17	25919-25927	addition	
173-18	25928-25930	to	
173-19	25931-25934	the	
173-20	25935-25941	Amazon	
173-21	25942-25950	Redshift	
173-22	25951-25958	Advisor	
173-23	25959-25974	recommendations	
173-24	25974-25975	,	
173-25	25976-25979	you	
173-26	25980-25983	can	
173-27	25984-25987	get	
173-28	25988-25999	performance	
173-29	26000-26008	insights	
173-30	26009-26016	through	
173-31	26017-26022	other	
173-32	26023-26031	channels	
173-33	26031-26032	.	

#Text=The Amazon Redshift cluster continuously and automatically collects query monitoring rules metrics, whether you institute any rules on the cluster or not.
174-1	26033-26036	The	
174-2	26037-26043	Amazon	
174-3	26044-26052	Redshift	
174-4	26053-26060	cluster	
174-5	26061-26073	continuously	
174-6	26074-26077	and	
174-7	26078-26091	automatically	
174-8	26092-26100	collects	
174-9	26101-26106	query	
174-10	26107-26117	monitoring	
174-11	26118-26123	rules	
174-12	26124-26131	metrics	
174-13	26131-26132	,	
174-14	26133-26140	whether	
174-15	26141-26144	you	
174-16	26145-26154	institute	
174-17	26155-26158	any	
174-18	26159-26164	rules	
174-19	26165-26167	on	
174-20	26168-26171	the	
174-21	26172-26179	cluster	
174-22	26180-26182	or	
174-23	26183-26186	not	
174-24	26186-26187	.	

#Text=This convenient mechanism lets you view attributes like the following:
#Text=The CPU time for a SQL statement (query_cpu_time)
#Text=The amount of temporary space a job might ‘spill to disk’ (query_temp_blocks_to_disk)
#Text=The ratio of the highest number of blocks read over the average (io_skew)
#Text=It also makes Amazon Redshift Spectrum metrics available, such as the number of Amazon Redshift Spectrum rows and MBs scanned by a query (spectrum_scan_row_count and spectrum_scan_size_mb, respectively).
175-1	26188-26192	This	
175-2	26193-26203	convenient	
175-3	26204-26213	mechanism	
175-4	26214-26218	lets	
175-5	26219-26222	you	
175-6	26223-26227	view	
175-7	26228-26238	attributes	
175-8	26239-26243	like	
175-9	26244-26247	the	
175-10	26248-26257	following	
175-11	26257-26258	:	
175-12	26259-26262	The	
175-13	26263-26266	CPU	
175-14	26267-26271	time	
175-15	26272-26275	for	
175-16	26276-26277	a	
175-17	26278-26281	SQL	
175-18	26282-26291	statement	
175-19	26292-26293	(	
175-20	26293-26307	query_cpu_time	
175-21	26307-26308	)	
175-22	26309-26312	The	
175-23	26313-26319	amount	
175-24	26320-26322	of	
175-25	26323-26332	temporary	
175-26	26333-26338	space	
175-27	26339-26340	a	
175-28	26341-26344	job	
175-29	26345-26350	might	
175-30	26351-26352	‘	
175-31	26352-26357	spill	
175-32	26358-26360	to	
175-33	26361-26365	disk	
175-34	26365-26366	’	
175-35	26367-26368	(	
175-36	26368-26393	query_temp_blocks_to_disk	
175-37	26393-26394	)	
175-38	26395-26398	The	
175-39	26399-26404	ratio	
175-40	26405-26407	of	
175-41	26408-26411	the	
175-42	26412-26419	highest	
175-43	26420-26426	number	
175-44	26427-26429	of	
175-45	26430-26436	blocks	
175-46	26437-26441	read	
175-47	26442-26446	over	
175-48	26447-26450	the	
175-49	26451-26458	average	
175-50	26459-26460	(	
175-51	26460-26467	io_skew	
175-52	26467-26468	)	
175-53	26469-26471	It	
175-54	26472-26476	also	
175-55	26477-26482	makes	
175-56	26483-26489	Amazon	
175-57	26490-26498	Redshift	
175-58	26499-26507	Spectrum	
175-59	26508-26515	metrics	
175-60	26516-26525	available	
175-61	26525-26526	,	
175-62	26527-26531	such	
175-63	26532-26534	as	
175-64	26535-26538	the	
175-65	26539-26545	number	
175-66	26546-26548	of	
175-67	26549-26555	Amazon	
175-68	26556-26564	Redshift	
175-69	26565-26573	Spectrum	
175-70	26574-26578	rows	
175-71	26579-26582	and	
175-72	26583-26586	MBs	
175-73	26587-26594	scanned	
175-74	26595-26597	by	
175-75	26598-26599	a	
175-76	26600-26605	query	
175-77	26606-26607	(	
175-78	26607-26630	spectrum_scan_row_count	
175-79	26631-26634	and	
175-80	26635-26656	spectrum_scan_size_mb	
175-81	26656-26657	,	
175-82	26658-26670	respectively	
175-83	26670-26671	)	
175-84	26671-26672	.	

#Text=The Amazon Redshift system view SVL_QUERY_METRICS_SUMMARY shows the maximum values of metrics for completed queries, and STL_QUERY_METRICS and STV_QUERY_METRICS carry the information at 1-second intervals for the completed and running queries respectively.
176-1	26673-26676	The	
176-2	26677-26683	Amazon	
176-3	26684-26692	Redshift	
176-4	26693-26699	system	
176-5	26700-26704	view	
176-6	26705-26730	SVL_QUERY_METRICS_SUMMARY	
176-7	26731-26736	shows	
176-8	26737-26740	the	
176-9	26741-26748	maximum	
176-10	26749-26755	values	
176-11	26756-26758	of	
176-12	26759-26766	metrics	
176-13	26767-26770	for	
176-14	26771-26780	completed	
176-15	26781-26788	queries	
176-16	26788-26789	,	
176-17	26790-26793	and	
176-18	26794-26811	STL_QUERY_METRICS	
176-19	26812-26815	and	
176-20	26816-26833	STV_QUERY_METRICS	
176-21	26834-26839	carry	
176-22	26840-26843	the	
176-23	26844-26855	information	
176-24	26856-26858	at	
176-25	26859-26860	1	
176-26	26860-26861	-	
176-27	26861-26867	second	
176-28	26868-26877	intervals	
176-29	26878-26881	for	
176-30	26882-26885	the	
176-31	26886-26895	completed	
176-32	26896-26899	and	
176-33	26900-26907	running	
176-34	26908-26915	queries	
176-35	26916-26928	respectively	
176-36	26928-26929	.	

#Text=The Amazon Redshift CloudWatch metrics are data points for use with Amazon CloudWatch monitoring.
177-1	26930-26933	The	
177-2	26934-26940	Amazon	
177-3	26941-26949	Redshift	
177-4	26950-26960	CloudWatch	
177-5	26961-26968	metrics	
177-6	26969-26972	are	
177-7	26973-26977	data	
177-8	26978-26984	points	
177-9	26985-26988	for	
177-10	26989-26992	use	
177-11	26993-26997	with	
177-12	26998-27004	Amazon	
177-13	27005-27015	CloudWatch	
177-14	27016-27026	monitoring	
177-15	27026-27027	.	

#Text=These can be cluster-wide metrics, such as health status or read/write, IOPS, latency, or throughput.
178-1	27028-27033	These	
178-2	27034-27037	can	
178-3	27038-27040	be	
178-4	27041-27053	cluster-wide	
178-5	27054-27061	metrics	
178-6	27061-27062	,	
178-7	27063-27067	such	
178-8	27068-27070	as	
178-9	27071-27077	health	
178-10	27078-27084	status	
178-11	27085-27087	or	
178-12	27088-27092	read	
178-13	27092-27093	/	
178-14	27093-27098	write	
178-15	27098-27099	,	
178-16	27100-27104	IOPS	
178-17	27104-27105	,	
178-18	27106-27113	latency	
178-19	27113-27114	,	
178-20	27115-27117	or	
178-21	27118-27128	throughput	
178-22	27128-27129	.	

#Text=It also offers compute node–level data, such as network transmit/receive throughput and read/write latency.
179-1	27130-27132	It	
179-2	27133-27137	also	
179-3	27138-27144	offers	
179-4	27145-27152	compute	
179-5	27153-27163	node–level	
179-6	27164-27168	data	
179-7	27168-27169	,	
179-8	27170-27174	such	
179-9	27175-27177	as	
179-10	27178-27185	network	
179-11	27186-27194	transmit	
179-12	27194-27195	/	
179-13	27195-27202	receive	
179-14	27203-27213	throughput	
179-15	27214-27217	and	
179-16	27218-27222	read	
179-17	27222-27223	/	
179-18	27223-27228	write	
179-19	27229-27236	latency	
179-20	27236-27237	.	

#Text=At the WLM queue grain, there are the number of queries completed per second, queue length, and others.
180-1	27238-27240	At	
180-2	27241-27244	the	
180-3	27245-27248	WLM	
180-4	27249-27254	queue	
180-5	27255-27260	grain	
180-6	27260-27261	,	
180-7	27262-27267	there	
180-8	27268-27271	are	
180-9	27272-27275	the	
180-10	27276-27282	number	
180-11	27283-27285	of	
180-12	27286-27293	queries	
180-13	27294-27303	completed	
180-14	27304-27307	per	
180-15	27308-27314	second	
180-16	27314-27315	,	
180-17	27316-27321	queue	
180-18	27322-27328	length	
180-19	27328-27329	,	
180-20	27330-27333	and	
180-21	27334-27340	others	
180-22	27340-27341	.	

#Text=CloudWatch facilitates monitoring concurrency scaling usage with the metrics ConcurrencyScalingSeconds and ConcurrencyScalingActiveClusters.
181-1	27342-27352	CloudWatch	
181-2	27353-27364	facilitates	
181-3	27365-27375	monitoring	
181-4	27376-27387	concurrency	
181-5	27388-27395	scaling	
181-6	27396-27401	usage	
181-7	27402-27406	with	
181-8	27407-27410	the	
181-9	27411-27418	metrics	
181-10	27418-27419	 	
181-11	27419-27444	ConcurrencyScalingSeconds	
181-12	27445-27448	and	
181-13	27448-27449	 	
181-14	27449-27481	ConcurrencyScalingActiveClusters	
181-15	27481-27482	.	

#Text=It’s recommended to consider the CloudWatch metrics (and the existing notification infrastructure built around them) before investing time in creating something new.
182-1	27483-27485	It	
182-2	27485-27486	’	
182-3	27486-27487	s	
182-4	27488-27499	recommended	
182-5	27500-27502	to	
182-6	27503-27511	consider	
182-7	27512-27515	the	
182-8	27516-27526	CloudWatch	
182-9	27527-27534	metrics	
182-10	27535-27536	(	
182-11	27536-27539	and	
182-12	27540-27543	the	
182-13	27544-27552	existing	
182-14	27553-27565	notification	
182-15	27566-27580	infrastructure	
182-16	27581-27586	built	
182-17	27587-27593	around	
182-18	27594-27598	them	
182-19	27598-27599	)	
182-20	27600-27606	before	
182-21	27607-27616	investing	
182-22	27617-27621	time	
182-23	27622-27624	in	
182-24	27625-27633	creating	
182-25	27634-27643	something	
182-26	27644-27647	new	
182-27	27647-27648	.	

#Text=Similarly, the QMR metrics cover most metric use cases and likely eliminate the need to write custom metrics.
183-1	27649-27658	Similarly	
183-2	27658-27659	,	
183-3	27660-27663	the	
183-4	27664-27667	QMR	
183-5	27668-27675	metrics	
183-6	27676-27681	cover	
183-7	27682-27686	most	
183-8	27687-27693	metric	
183-9	27694-27697	use	
183-10	27698-27703	cases	
183-11	27704-27707	and	
183-12	27708-27714	likely	
183-13	27715-27724	eliminate	
183-14	27725-27728	the	
183-15	27729-27733	need	
183-16	27734-27736	to	
183-17	27737-27742	write	
183-18	27743-27749	custom	
183-19	27750-27757	metrics	
183-20	27757-27758	.	

#Text=Tip #8: Federated queries connect the OLAP, OLTP and data lake worlds
#Text=The new Federated Query feature in Amazon Redshift allows you to run analytics directly against live data residing on your OLTP source system databases and Amazon S3 data lake, without the overhead of performing ETL and ingesting source data into Amazon Redshift tables.
184-1	27759-27762	Tip	
184-2	27763-27765	#8	
184-3	27765-27766	:	
184-4	27766-27767	 	
184-5	27767-27776	Federated	
184-6	27777-27784	queries	
184-7	27785-27792	connect	
184-8	27793-27796	the	
184-9	27797-27801	OLAP	
184-10	27801-27802	,	
184-11	27803-27807	OLTP	
184-12	27808-27811	and	
184-13	27812-27816	data	
184-14	27817-27821	lake	
184-15	27822-27828	worlds	
184-16	27829-27832	The	
184-17	27833-27836	new	
184-18	27837-27846	Federated	
184-19	27847-27852	Query	
184-20	27853-27860	feature	
184-21	27861-27863	in	
184-22	27864-27870	Amazon	
184-23	27871-27879	Redshift	
184-24	27880-27886	allows	
184-25	27887-27890	you	
184-26	27891-27893	to	
184-27	27894-27897	run	
184-28	27898-27907	analytics	
184-29	27908-27916	directly	
184-30	27917-27924	against	
184-31	27925-27929	live	
184-32	27930-27934	data	
184-33	27935-27943	residing	
184-34	27944-27946	on	
184-35	27947-27951	your	
184-36	27952-27956	OLTP	
184-37	27957-27963	source	
184-38	27964-27970	system	
184-39	27971-27980	databases	
184-40	27981-27984	and	
184-41	27985-27991	Amazon	
184-42	27992-27994	S3	
184-43	27995-27999	data	
184-44	28000-28004	lake	
184-45	28004-28005	,	
184-46	28006-28013	without	
184-47	28014-28017	the	
184-48	28018-28026	overhead	
184-49	28027-28029	of	
184-50	28030-28040	performing	
184-51	28041-28044	ETL	
184-52	28045-28048	and	
184-53	28049-28058	ingesting	
184-54	28059-28065	source	
184-55	28066-28070	data	
184-56	28071-28075	into	
184-57	28076-28082	Amazon	
184-58	28083-28091	Redshift	
184-59	28092-28098	tables	
184-60	28098-28099	.	

#Text=This feature gives you a convenient and efficient option for providing realtime data visibility on operational reports, as an alternative to micro-ETL batch ingestion of realtime data into the data warehouse.
185-1	28100-28104	This	
185-2	28105-28112	feature	
185-3	28113-28118	gives	
185-4	28119-28122	you	
185-5	28123-28124	a	
185-6	28125-28135	convenient	
185-7	28136-28139	and	
185-8	28140-28149	efficient	
185-9	28150-28156	option	
185-10	28157-28160	for	
185-11	28161-28170	providing	
185-12	28171-28179	realtime	
185-13	28180-28184	data	
185-14	28185-28195	visibility	
185-15	28196-28198	on	
185-16	28199-28210	operational	
185-17	28211-28218	reports	
185-18	28218-28219	,	
185-19	28220-28222	as	
185-20	28223-28225	an	
185-21	28226-28237	alternative	
185-22	28238-28240	to	
185-23	28241-28250	micro-ETL	
185-24	28251-28256	batch	
185-25	28257-28266	ingestion	
185-26	28267-28269	of	
185-27	28270-28278	realtime	
185-28	28279-28283	data	
185-29	28284-28288	into	
185-30	28289-28292	the	
185-31	28293-28297	data	
185-32	28298-28307	warehouse	
185-33	28307-28308	.	

#Text=By combining historical trend data from the data warehouse with live developing trends from the source systems, you can gather valuable insights to drive real-time business decision making.
186-1	28309-28311	By	
186-2	28312-28321	combining	
186-3	28322-28332	historical	
186-4	28333-28338	trend	
186-5	28339-28343	data	
186-6	28344-28348	from	
186-7	28349-28352	the	
186-8	28353-28357	data	
186-9	28358-28367	warehouse	
186-10	28368-28372	with	
186-11	28373-28377	live	
186-12	28378-28388	developing	
186-13	28389-28395	trends	
186-14	28396-28400	from	
186-15	28401-28404	the	
186-16	28405-28411	source	
186-17	28412-28419	systems	
186-18	28419-28420	,	
186-19	28421-28424	you	
186-20	28425-28428	can	
186-21	28429-28435	gather	
186-22	28436-28444	valuable	
186-23	28445-28453	insights	
186-24	28454-28456	to	
186-25	28457-28462	drive	
186-26	28463-28472	real-time	
186-27	28473-28481	business	
186-28	28482-28490	decision	
186-29	28491-28497	making	
186-30	28497-28498	.	

#Text=For example, consider sales data residing in three different data stores:
#Text=Live sales order data stored on an Amazon RDS for PostgreSQL database (represented as “ext_postgres” in the following external schema)
#Text=Historical sales data warehoused in a local Amazon Redshift database (represented as “local_dwh”)
#Text=Archived, “cold” sales data older than 5 years stored on Amazon S3 (represented as “ext_spectrum”)
#Text=We can create a late binding view in Amazon Redshift that allows you to merge and query data from all three sources.
187-1	28499-28502	For	
187-2	28503-28510	example	
187-3	28510-28511	,	
187-4	28512-28520	consider	
187-5	28521-28526	sales	
187-6	28527-28531	data	
187-7	28532-28540	residing	
187-8	28541-28543	in	
187-9	28544-28549	three	
187-10	28550-28559	different	
187-11	28560-28564	data	
187-12	28565-28571	stores	
187-13	28571-28572	:	
187-14	28573-28577	Live	
187-15	28578-28583	sales	
187-16	28584-28589	order	
187-17	28590-28594	data	
187-18	28595-28601	stored	
187-19	28602-28604	on	
187-20	28605-28607	an	
187-21	28608-28614	Amazon	
187-22	28615-28618	RDS	
187-23	28619-28622	for	
187-24	28623-28633	PostgreSQL	
187-25	28634-28642	database	
187-26	28643-28644	(	
187-27	28644-28655	represented	
187-28	28656-28658	as	
187-29	28659-28660	“	
187-30	28660-28672	ext_postgres	
187-31	28672-28673	”	
187-32	28674-28676	in	
187-33	28677-28680	the	
187-34	28681-28690	following	
187-35	28691-28699	external	
187-36	28700-28706	schema	
187-37	28706-28707	)	
187-38	28708-28718	Historical	
187-39	28719-28724	sales	
187-40	28725-28729	data	
187-41	28730-28740	warehoused	
187-42	28741-28743	in	
187-43	28744-28745	a	
187-44	28746-28751	local	
187-45	28752-28758	Amazon	
187-46	28759-28767	Redshift	
187-47	28768-28776	database	
187-48	28777-28778	(	
187-49	28778-28789	represented	
187-50	28790-28792	as	
187-51	28793-28794	“	
187-52	28794-28803	local_dwh	
187-53	28803-28804	”	
187-54	28804-28805	)	
187-55	28806-28814	Archived	
187-56	28814-28815	,	
187-57	28816-28817	“	
187-58	28817-28821	cold	
187-59	28821-28822	”	
187-60	28823-28828	sales	
187-61	28829-28833	data	
187-62	28834-28839	older	
187-63	28840-28844	than	
187-64	28845-28846	5	
187-65	28847-28852	years	
187-66	28853-28859	stored	
187-67	28860-28862	on	
187-68	28863-28869	Amazon	
187-69	28870-28872	S3	
187-70	28872-28873	 	
187-71	28873-28874	(	
187-72	28874-28885	represented	
187-73	28886-28888	as	
187-74	28889-28890	“	
187-75	28890-28902	ext_spectrum	
187-76	28902-28903	”	
187-77	28903-28904	)	
187-78	28905-28907	We	
187-79	28908-28911	can	
187-80	28912-28918	create	
187-81	28919-28920	a	
187-82	28921-28925	late	
187-83	28926-28933	binding	
187-84	28934-28938	view	
187-85	28939-28941	in	
187-86	28942-28948	Amazon	
187-87	28949-28957	Redshift	
187-88	28958-28962	that	
187-89	28963-28969	allows	
187-90	28970-28973	you	
187-91	28974-28976	to	
187-92	28977-28982	merge	
187-93	28983-28986	and	
187-94	28987-28992	query	
187-95	28993-28997	data	
187-96	28998-29002	from	
187-97	29003-29006	all	
187-98	29007-29012	three	
187-99	29013-29020	sources	
187-100	29020-29021	.	

#Text=See the following code:
#Text=CREATE VIEW store_sales_integrated AS
#Text=SELECT * FROM ext_postgres.store_sales_live
#Text=UNION ALL
#Text=SELECT * FROM local_dwh.store_sales_current
#Text=UNION ALL
#Text=SELECT ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk,
#Text=ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity,
#Text=ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt,
#Text=ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax,
#Text=ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit
#Text=FROM ext_spectrum.store_sales_historical
#Text=WITH NO SCHEMA BINDING
#Text=Currently, direct federated querying is supported for data stored in Amazon Aurora PostgreSQL and Amazon RDS for PostgreSQL databases, with support for other major RDS engines coming soon.
188-1	29022-29025	See	
188-2	29026-29029	the	
188-3	29030-29039	following	
188-4	29040-29044	code	
188-5	29044-29045	:	
188-6	29046-29052	CREATE	
188-7	29053-29057	VIEW	
188-8	29058-29080	store_sales_integrated	
188-9	29081-29083	AS	
188-10	29084-29090	SELECT	
188-11	29091-29092	*	
188-12	29093-29097	FROM	
188-13	29098-29127	ext_postgres.store_sales_live	
188-14	29128-29133	UNION	
188-15	29134-29137	ALL	
188-16	29138-29144	SELECT	
188-17	29145-29146	*	
188-18	29147-29151	FROM	
188-19	29152-29181	local_dwh.store_sales_current	
188-20	29182-29187	UNION	
188-21	29188-29191	ALL	
188-22	29192-29198	SELECT	
188-23	29199-29214	ss_sold_date_sk	
188-24	29214-29215	,	
188-25	29216-29231	ss_sold_time_sk	
188-26	29231-29232	,	
188-27	29233-29243	ss_item_sk	
188-28	29243-29244	,	
188-29	29245-29259	ss_customer_sk	
188-30	29259-29260	,	
188-31	29261-29272	ss_cdemo_sk	
188-32	29272-29273	,	
188-33	29274-29285	ss_hdemo_sk	
188-34	29285-29286	,	
188-35	29287-29297	ss_addr_sk	
188-36	29297-29298	,	
188-37	29299-29310	ss_store_sk	
188-38	29310-29311	,	
188-39	29312-29323	ss_promo_sk	
188-40	29323-29324	,	
188-41	29325-29341	ss_ticket_number	
188-42	29341-29342	,	
188-43	29343-29354	ss_quantity	
188-44	29354-29355	,	
188-45	29356-29373	ss_wholesale_cost	
188-46	29373-29374	,	
188-47	29375-29388	ss_list_price	
188-48	29388-29389	,	
188-49	29390-29404	ss_sales_price	
188-50	29404-29405	,	
188-51	29406-29425	ss_ext_discount_amt	
188-52	29425-29426	,	
188-53	29427-29445	ss_ext_sales_price	
188-54	29445-29446	,	
188-55	29447-29468	ss_ext_wholesale_cost	
188-56	29468-29469	,	
188-57	29470-29487	ss_ext_list_price	
188-58	29487-29488	,	
188-59	29489-29499	ss_ext_tax	
188-60	29499-29500	,	
188-61	29501-29514	ss_coupon_amt	
188-62	29514-29515	,	
188-63	29516-29527	ss_net_paid	
188-64	29527-29528	,	
188-65	29529-29548	ss_net_paid_inc_tax	
188-66	29548-29549	,	
188-67	29550-29563	ss_net_profit	
188-68	29564-29568	FROM	
188-69	29569-29604	ext_spectrum.store_sales_historical	
188-70	29605-29609	WITH	
188-71	29610-29612	NO	
188-72	29613-29619	SCHEMA	
188-73	29620-29627	BINDING	
188-74	29628-29637	Currently	
188-75	29637-29638	,	
188-76	29639-29645	direct	
188-77	29646-29655	federated	
188-78	29656-29664	querying	
188-79	29665-29667	is	
188-80	29668-29677	supported	
188-81	29678-29681	for	
188-82	29682-29686	data	
188-83	29687-29693	stored	
188-84	29694-29696	in	
188-85	29697-29703	Amazon	
188-86	29704-29710	Aurora	
188-87	29711-29721	PostgreSQL	
188-88	29722-29725	and	
188-89	29726-29732	Amazon	
188-90	29733-29736	RDS	
188-91	29737-29740	for	
188-92	29741-29751	PostgreSQL	
188-93	29752-29761	databases	
188-94	29761-29762	,	
188-95	29763-29767	with	
188-96	29768-29775	support	
188-97	29776-29779	for	
188-98	29780-29785	other	
188-99	29786-29791	major	
188-100	29792-29795	RDS	
188-101	29796-29803	engines	
188-102	29804-29810	coming	
188-103	29811-29815	soon	
188-104	29815-29816	.	

#Text=You can also use the federated query feature to simplify the ETL and data-ingestion process.
189-1	29817-29820	You	
189-2	29821-29824	can	
189-3	29825-29829	also	
189-4	29830-29833	use	
189-5	29834-29837	the	
189-6	29838-29847	federated	
189-7	29848-29853	query	
189-8	29854-29861	feature	
189-9	29862-29864	to	
189-10	29865-29873	simplify	
189-11	29874-29877	the	
189-12	29878-29881	ETL	
189-13	29882-29885	and	
189-14	29886-29900	data-ingestion	
189-15	29901-29908	process	
189-16	29908-29909	.	

#Text=Instead of staging data on Amazon S3, and performing a COPY operation, federated queries allow you to ingest data directly into an Amazon Redshift table in one step, as part of a federated CTAS/INSERT SQL query.
190-1	29910-29917	Instead	
190-2	29918-29920	of	
190-3	29921-29928	staging	
190-4	29929-29933	data	
190-5	29934-29936	on	
190-6	29937-29943	Amazon	
190-7	29944-29946	S3	
190-8	29946-29947	,	
190-9	29948-29951	and	
190-10	29952-29962	performing	
190-11	29963-29964	a	
190-12	29965-29969	COPY	
190-13	29970-29979	operation	
190-14	29979-29980	,	
190-15	29981-29990	federated	
190-16	29991-29998	queries	
190-17	29999-30004	allow	
190-18	30005-30008	you	
190-19	30009-30011	to	
190-20	30012-30018	ingest	
190-21	30019-30023	data	
190-22	30024-30032	directly	
190-23	30033-30037	into	
190-24	30038-30040	an	
190-25	30041-30047	Amazon	
190-26	30048-30056	Redshift	
190-27	30057-30062	table	
190-28	30063-30065	in	
190-29	30066-30069	one	
190-30	30070-30074	step	
190-31	30074-30075	,	
190-32	30076-30078	as	
190-33	30079-30083	part	
190-34	30084-30086	of	
190-35	30087-30088	a	
190-36	30089-30098	federated	
190-37	30099-30103	CTAS	
190-38	30103-30104	/	
190-39	30104-30110	INSERT	
190-40	30111-30114	SQL	
190-41	30115-30120	query	
190-42	30120-30121	.	

#Text=For example, the following code shows an upsert/merge operation in which the COPY operation from Amazon S3 to Amazon Redshift is replaced with a federated query sourced directly from PostgreSQL:
#Text=BEGIN;
#Text=CREATE TEMP TABLE staging (LIKE ods.store_sales);
#Text=-- replace the following COPY from S3:
#Text=/*COPY staging FROM 's3://yourETLbucket/daily_store_sales/'
#Text=IAM_ROLE 'arn:aws:iam::<account_id>:role/<s3_reader_role>'
#Text=DELIMITER '|' COMPUPDATE OFF; */
#Text=-- with this federated query to load staging data directly from PostgreSQL source
#Text=INSERT INTO staging SELECT * FROM pg.store_sales p
#Text=WHERE p.last_updated_date > (SELECT MAX(last_updated_date) FROM ods.store_sales);
#Text=DELETE FROM ods.store_sales USING staging s WHERE ods.store_sales.id = s.id;
#Text=INSERT INTO ods.store_sales SELECT * FROM staging;
#Text=DROP TABLE staging;
#Text=COMMIT;
#Text=For more information about setting up the preceding federated queries, see Build a Simplified ETL and Live Data Query Solution using Redshift Federated Query.
191-1	30122-30125	For	
191-2	30126-30133	example	
191-3	30133-30134	,	
191-4	30135-30138	the	
191-5	30139-30148	following	
191-6	30149-30153	code	
191-7	30154-30159	shows	
191-8	30160-30162	an	
191-9	30163-30169	upsert	
191-10	30169-30170	/	
191-11	30170-30175	merge	
191-12	30176-30185	operation	
191-13	30186-30188	in	
191-14	30189-30194	which	
191-15	30195-30198	the	
191-16	30199-30203	COPY	
191-17	30204-30213	operation	
191-18	30214-30218	from	
191-19	30219-30225	Amazon	
191-20	30226-30228	S3	
191-21	30229-30231	to	
191-22	30232-30238	Amazon	
191-23	30239-30247	Redshift	
191-24	30248-30250	is	
191-25	30251-30259	replaced	
191-26	30260-30264	with	
191-27	30265-30266	a	
191-28	30267-30276	federated	
191-29	30277-30282	query	
191-30	30283-30290	sourced	
191-31	30291-30299	directly	
191-32	30300-30304	from	
191-33	30305-30315	PostgreSQL	
191-34	30315-30316	:	
191-35	30317-30322	BEGIN	
191-36	30322-30323	;	
191-37	30324-30330	CREATE	
191-38	30331-30335	TEMP	
191-39	30336-30341	TABLE	
191-40	30342-30349	staging	
191-41	30350-30351	(	
191-42	30351-30355	LIKE	
191-43	30356-30371	ods.store_sales	
191-44	30371-30372	)	
191-45	30372-30373	;	
191-46	30374-30375	-	
191-47	30375-30376	-	
191-48	30377-30384	replace	
191-49	30385-30388	the	
191-50	30389-30398	following	
191-51	30399-30403	COPY	
191-52	30404-30408	from	
191-53	30409-30411	S3	
191-54	30411-30412	:	
191-55	30413-30414	/	
191-56	30414-30415	*	
191-57	30415-30419	COPY	
191-58	30420-30427	staging	
191-59	30428-30432	FROM	
191-60	30433-30434	'	
191-61	30434-30436	s3	
191-62	30436-30437	:	
191-63	30437-30438	/	
191-64	30438-30439	/	
191-65	30439-30452	yourETLbucket	
191-66	30452-30453	/	
191-67	30453-30470	daily_store_sales	
191-68	30470-30471	/	
191-69	30471-30472	'	
191-70	30473-30481	IAM_ROLE	
191-71	30482-30483	'	
191-72	30483-30486	arn	
191-73	30486-30487	:	
191-74	30487-30490	aws	
191-75	30490-30491	:	
191-76	30491-30494	iam	
191-77	30494-30495	:	
191-78	30495-30496	:	
191-79	30496-30497	<	
191-80	30497-30507	account_id	
191-81	30507-30508	>	
191-82	30508-30509	:	
191-83	30509-30513	role	
191-84	30513-30514	/	
191-85	30514-30515	<	
191-86	30515-30517	s3	
191-87	30517-30518	_	
191-88	30518-30529	reader_role	
191-89	30529-30530	>	
191-90	30530-30531	'	
191-91	30532-30541	DELIMITER	
191-92	30542-30543	'	
191-93	30543-30544	|	
191-94	30544-30545	'	
191-95	30546-30556	COMPUPDATE	
191-96	30557-30560	OFF	
191-97	30560-30561	;	
191-98	30562-30563	*	
191-99	30563-30564	/	
191-100	30565-30566	-	
191-101	30566-30567	-	
191-102	30568-30572	with	
191-103	30573-30577	this	
191-104	30578-30587	federated	
191-105	30588-30593	query	
191-106	30594-30596	to	
191-107	30597-30601	load	
191-108	30602-30609	staging	
191-109	30610-30614	data	
191-110	30615-30623	directly	
191-111	30624-30628	from	
191-112	30629-30639	PostgreSQL	
191-113	30640-30646	source	
191-114	30647-30653	INSERT	
191-115	30654-30658	INTO	
191-116	30659-30666	staging	
191-117	30667-30673	SELECT	
191-118	30674-30675	*	
191-119	30676-30680	FROM	
191-120	30681-30695	pg.store_sales	
191-121	30696-30697	p	
191-122	30698-30703	WHERE	
191-123	30704-30723	p.last_updated_date	
191-124	30724-30725	>	
191-125	30726-30727	(	
191-126	30727-30733	SELECT	
191-127	30734-30737	MAX	
191-128	30737-30738	(	
191-129	30738-30755	last_updated_date	
191-130	30755-30756	)	
191-131	30757-30761	FROM	
191-132	30762-30777	ods.store_sales	
191-133	30777-30778	)	
191-134	30778-30779	;	
191-135	30780-30786	DELETE	
191-136	30787-30791	FROM	
191-137	30792-30807	ods.store_sales	
191-138	30808-30813	USING	
191-139	30814-30821	staging	
191-140	30822-30823	s	
191-141	30824-30829	WHERE	
191-142	30830-30848	ods.store_sales.id	
191-143	30849-30850	=	
191-144	30851-30855	s.id	
191-145	30855-30856	;	
191-146	30857-30863	INSERT	
191-147	30864-30868	INTO	
191-148	30869-30884	ods.store_sales	
191-149	30885-30891	SELECT	
191-150	30892-30893	*	
191-151	30894-30898	FROM	
191-152	30899-30906	staging	
191-153	30906-30907	;	
191-154	30908-30912	DROP	
191-155	30913-30918	TABLE	
191-156	30919-30926	staging	
191-157	30926-30927	;	
191-158	30928-30934	COMMIT	
191-159	30934-30935	;	
191-160	30936-30939	For	
191-161	30940-30944	more	
191-162	30945-30956	information	
191-163	30957-30962	about	
191-164	30963-30970	setting	
191-165	30971-30973	up	
191-166	30974-30977	the	
191-167	30978-30987	preceding	
191-168	30988-30997	federated	
191-169	30998-31005	queries	
191-170	31005-31006	,	
191-171	31007-31010	see	
191-172	31011-31016	Build	
191-173	31017-31018	a	
191-174	31019-31029	Simplified	
191-175	31030-31033	ETL	
191-176	31034-31037	and	
191-177	31038-31042	Live	
191-178	31043-31047	Data	
191-179	31048-31053	Query	
191-180	31054-31062	Solution	
191-181	31063-31068	using	
191-182	31069-31077	Redshift	
191-183	31078-31087	Federated	
191-184	31088-31093	Query	
191-185	31093-31094	.	

#Text=For additional tips and best practices on federated queries, see Best practices for Amazon Redshift Federated Query.
192-1	31095-31098	For	
192-2	31099-31109	additional	
192-3	31110-31114	tips	
192-4	31115-31118	and	
192-5	31119-31123	best	
192-6	31124-31133	practices	
192-7	31134-31136	on	
192-8	31137-31146	federated	
192-9	31147-31154	queries	
192-10	31154-31155	,	
192-11	31156-31159	see	
192-12	31160-31164	Best	
192-13	31165-31174	practices	
192-14	31175-31178	for	
192-15	31179-31185	Amazon	
192-16	31186-31194	Redshift	
192-17	31195-31204	Federated	
192-18	31205-31210	Query	
192-19	31210-31211	.	

#Text=Tip #9: Maintaining efficient data loads
#Text=Amazon Redshift best practices suggest using the COPY command to perform data loads of file-based data.
193-1	31212-31215	Tip	
193-2	31216-31218	#9	
193-3	31218-31219	:	
193-4	31220-31231	Maintaining	
193-5	31232-31241	efficient	
193-6	31242-31246	data	
193-7	31247-31252	loads	
193-8	31253-31259	Amazon	
193-9	31260-31268	Redshift	
193-10	31269-31273	best	
193-11	31274-31283	practices	
193-12	31284-31291	suggest	
193-13	31292-31297	using	
193-14	31298-31301	the	
193-15	31302-31306	COPY	
193-16	31307-31314	command	
193-17	31315-31317	to	
193-18	31318-31325	perform	
193-19	31326-31330	data	
193-20	31331-31336	loads	
193-21	31337-31339	of	
193-22	31340-31350	file-based	
193-23	31351-31355	data	
193-24	31355-31356	.	

#Text=Single-row INSERTs are an anti-pattern.
194-1	31357-31367	Single-row	
194-2	31368-31375	INSERTs	
194-3	31376-31379	are	
194-4	31380-31382	an	
194-5	31383-31395	anti-pattern	
194-6	31395-31396	.	

#Text=The COPY operation uses all the compute nodes in your cluster to load data in parallel, from sources such as Amazon S3, Amazon DynamoDB, Amazon EMR HDFS file systems, or any SSH connection.
195-1	31397-31400	The	
195-2	31401-31405	COPY	
195-3	31406-31415	operation	
195-4	31416-31420	uses	
195-5	31421-31424	all	
195-6	31425-31428	the	
195-7	31429-31436	compute	
195-8	31437-31442	nodes	
195-9	31443-31445	in	
195-10	31446-31450	your	
195-11	31451-31458	cluster	
195-12	31459-31461	to	
195-13	31462-31466	load	
195-14	31467-31471	data	
195-15	31472-31474	in	
195-16	31475-31483	parallel	
195-17	31483-31484	,	
195-18	31485-31489	from	
195-19	31490-31497	sources	
195-20	31498-31502	such	
195-21	31503-31505	as	
195-22	31506-31512	Amazon	
195-23	31513-31515	S3	
195-24	31515-31516	,	
195-25	31517-31523	Amazon	
195-26	31524-31532	DynamoDB	
195-27	31532-31533	,	
195-28	31534-31540	Amazon	
195-29	31541-31544	EMR	
195-30	31545-31549	HDFS	
195-31	31550-31554	file	
195-32	31555-31562	systems	
195-33	31562-31563	,	
195-34	31564-31566	or	
195-35	31567-31570	any	
195-36	31571-31574	SSH	
195-37	31575-31585	connection	
195-38	31585-31586	.	

#Text=When performing data loads, compress the data files whenever possible.
196-1	31587-31591	When	
196-2	31592-31602	performing	
196-3	31603-31607	data	
196-4	31608-31613	loads	
196-5	31613-31614	,	
196-6	31615-31623	compress	
196-7	31624-31627	the	
196-8	31628-31632	data	
196-9	31633-31638	files	
196-10	31639-31647	whenever	
196-11	31648-31656	possible	
196-12	31656-31657	.	

#Text=For row-oriented (CSV) data, Amazon Redshift supports both GZIP and LZO compression.
197-1	31658-31661	For	
197-2	31662-31674	row-oriented	
197-3	31675-31676	(	
197-4	31676-31679	CSV	
197-5	31679-31680	)	
197-6	31681-31685	data	
197-7	31685-31686	,	
197-8	31687-31693	Amazon	
197-9	31694-31702	Redshift	
197-10	31703-31711	supports	
197-11	31712-31716	both	
197-12	31717-31721	GZIP	
197-13	31722-31725	and	
197-14	31726-31729	LZO	
197-15	31730-31741	compression	
197-16	31741-31742	.	

#Text=It’s more efficient to load a large number of small files than one large one, and the ideal file count is a multiple of the cluster’s total slice count.
198-1	31743-31745	It	
198-2	31745-31746	’	
198-3	31746-31747	s	
198-4	31748-31752	more	
198-5	31753-31762	efficient	
198-6	31763-31765	to	
198-7	31766-31770	load	
198-8	31771-31772	a	
198-9	31773-31778	large	
198-10	31779-31785	number	
198-11	31786-31788	of	
198-12	31789-31794	small	
198-13	31795-31800	files	
198-14	31801-31805	than	
198-15	31806-31809	one	
198-16	31810-31815	large	
198-17	31816-31819	one	
198-18	31819-31820	,	
198-19	31821-31824	and	
198-20	31825-31828	the	
198-21	31829-31834	ideal	
198-22	31835-31839	file	
198-23	31840-31845	count	
198-24	31846-31848	is	
198-25	31849-31850	a	
198-26	31851-31859	multiple	
198-27	31860-31862	of	
198-28	31863-31866	the	
198-29	31867-31874	cluster	
198-30	31874-31875	’	
198-31	31875-31876	s	
198-32	31877-31882	total	
198-33	31883-31888	slice	
198-34	31889-31894	count	
198-35	31894-31895	.	

#Text=Columnar data, such as Parquet and ORC, is also supported.
199-1	31896-31904	Columnar	
199-2	31905-31909	data	
199-3	31909-31910	,	
199-4	31911-31915	such	
199-5	31916-31918	as	
199-6	31919-31926	Parquet	
199-7	31927-31930	and	
199-8	31931-31934	ORC	
199-9	31934-31935	,	
199-10	31936-31938	is	
199-11	31939-31943	also	
199-12	31944-31953	supported	
199-13	31953-31954	.	

#Text=You can achieve best performance when the compressed files are between 1MB-1GB each.
200-1	31955-31958	You	
200-2	31959-31962	can	
200-3	31963-31970	achieve	
200-4	31971-31975	best	
200-5	31976-31987	performance	
200-6	31988-31992	when	
200-7	31993-31996	the	
200-8	31997-32007	compressed	
200-9	32008-32013	files	
200-10	32014-32017	are	
200-11	32018-32025	between	
200-12	32026-32029	1MB	
200-13	32029-32030	-	
200-14	32030-32033	1GB	
200-15	32034-32038	each	
200-16	32038-32039	.	

#Text=The number of slices per node depends on the cluster’s node size (and potentially elastic resize history).
201-1	32040-32043	The	
201-2	32044-32050	number	
201-3	32051-32053	of	
201-4	32054-32060	slices	
201-5	32061-32064	per	
201-6	32065-32069	node	
201-7	32070-32077	depends	
201-8	32078-32080	on	
201-9	32081-32084	the	
201-10	32085-32092	cluster	
201-11	32092-32093	’	
201-12	32093-32094	s	
201-13	32095-32099	node	
201-14	32100-32104	size	
201-15	32105-32106	(	
201-16	32106-32109	and	
201-17	32110-32121	potentially	
201-18	32122-32129	elastic	
201-19	32130-32136	resize	
201-20	32137-32144	history	
201-21	32144-32145	)	
201-22	32145-32146	.	

#Text=By ensuring an equal number of files per slice, you know that the COPY command evenly uses cluster resources and complete as quickly as possible.
202-1	32147-32149	By	
202-2	32150-32158	ensuring	
202-3	32159-32161	an	
202-4	32162-32167	equal	
202-5	32168-32174	number	
202-6	32175-32177	of	
202-7	32178-32183	files	
202-8	32184-32187	per	
202-9	32188-32193	slice	
202-10	32193-32194	,	
202-11	32195-32198	you	
202-12	32199-32203	know	
202-13	32204-32208	that	
202-14	32209-32212	the	
202-15	32213-32217	COPY	
202-16	32218-32225	command	
202-17	32226-32232	evenly	
202-18	32233-32237	uses	
202-19	32238-32245	cluster	
202-20	32246-32255	resources	
202-21	32256-32259	and	
202-22	32260-32268	complete	
202-23	32269-32271	as	
202-24	32272-32279	quickly	
202-25	32280-32282	as	
202-26	32283-32291	possible	
202-27	32291-32292	.	

#Text=Query for the cluster’s current slice count with SELECT COUNT(*) AS number_of_slices FROM stv_slices;.
203-1	32293-32298	Query	
203-2	32299-32302	for	
203-3	32303-32306	the	
203-4	32307-32314	cluster	
203-5	32314-32315	’	
203-6	32315-32316	s	
203-7	32317-32324	current	
203-8	32325-32330	slice	
203-9	32331-32336	count	
203-10	32337-32341	with	
203-11	32342-32348	SELECT	
203-12	32349-32354	COUNT	
203-13	32354-32355	(	
203-14	32355-32356	*	
203-15	32356-32357	)	
203-16	32358-32360	AS	
203-17	32361-32377	number_of_slices	
203-18	32378-32382	FROM	
203-19	32383-32393	stv_slices	
203-20	32393-32394	;	
203-21	32394-32395	.	

#Text=Another script in the amazon-redshift-utils GitHub repo, CopyPerformance, calculates statistics for each load.
204-1	32396-32403	Another	
204-2	32404-32410	script	
204-3	32411-32413	in	
204-4	32414-32417	the	
204-5	32418-32439	amazon-redshift-utils	
204-6	32440-32446	GitHub	
204-7	32447-32451	repo	
204-8	32451-32452	,	
204-9	32453-32468	CopyPerformance	
204-10	32468-32469	,	
204-11	32469-32470	 	
204-12	32470-32480	calculates	
204-13	32481-32491	statistics	
204-14	32492-32495	for	
204-15	32496-32500	each	
204-16	32501-32505	load	
204-17	32505-32506	.	

#Text=Amazon Redshift Advisor also warns of missing compression or too few files based on the number of slices (see the following screenshot):
#Text=Conducting COPY operations efficiently reduces the time to results for downstream users, and minimizes the cluster resources utilized to perform the load.
205-1	32507-32513	Amazon	
205-2	32514-32522	Redshift	
205-3	32523-32530	Advisor	
205-4	32531-32535	also	
205-5	32536-32541	warns	
205-6	32542-32544	of	
205-7	32545-32552	missing	
205-8	32553-32564	compression	
205-9	32565-32567	or	
205-10	32568-32571	too	
205-11	32572-32575	few	
205-12	32576-32581	files	
205-13	32582-32587	based	
205-14	32588-32590	on	
205-15	32591-32594	the	
205-16	32595-32601	number	
205-17	32602-32604	of	
205-18	32605-32611	slices	
205-19	32612-32613	(	
205-20	32613-32616	see	
205-21	32617-32620	the	
205-22	32621-32630	following	
205-23	32631-32641	screenshot	
205-24	32641-32642	)	
205-25	32642-32643	:	
205-26	32644-32654	Conducting	
205-27	32655-32659	COPY	
205-28	32660-32670	operations	
205-29	32671-32682	efficiently	
205-30	32683-32690	reduces	
205-31	32691-32694	the	
205-32	32695-32699	time	
205-33	32700-32702	to	
205-34	32703-32710	results	
205-35	32711-32714	for	
205-36	32715-32725	downstream	
205-37	32726-32731	users	
205-38	32731-32732	,	
205-39	32733-32736	and	
205-40	32737-32746	minimizes	
205-41	32747-32750	the	
205-42	32751-32758	cluster	
205-43	32759-32768	resources	
205-44	32769-32777	utilized	
205-45	32778-32780	to	
205-46	32781-32788	perform	
205-47	32789-32792	the	
205-48	32793-32797	load	
205-49	32797-32798	.	

#Text=Tip #10: Using the latest Amazon Redshift drivers from AWS
#Text=Because Amazon Redshift is based on PostgreSQL, we previously recommended using JDBC4 PostgreSQL driver version 8.4.703 and psql ODBC version 9.x drivers.
206-1	32799-32802	Tip	
206-2	32803-32806	#10	
206-3	32806-32807	:	
206-4	32808-32813	Using	
206-5	32814-32817	the	
206-6	32818-32824	latest	
206-7	32825-32831	Amazon	
206-8	32832-32840	Redshift	
206-9	32841-32848	drivers	
206-10	32849-32853	from	
206-11	32854-32857	AWS	
206-12	32858-32865	Because	
206-13	32866-32872	Amazon	
206-14	32873-32881	Redshift	
206-15	32882-32884	is	
206-16	32885-32890	based	
206-17	32891-32893	on	
206-18	32894-32904	PostgreSQL	
206-19	32904-32905	,	
206-20	32906-32908	we	
206-21	32909-32919	previously	
206-22	32920-32931	recommended	
206-23	32932-32937	using	
206-24	32938-32943	JDBC4	
206-25	32944-32954	PostgreSQL	
206-26	32955-32961	driver	
206-27	32962-32969	version	
206-28	32970-32977	8.4.703	
206-29	32978-32981	and	
206-30	32982-32986	psql	
206-31	32987-32991	ODBC	
206-32	32992-32999	version	
206-33	33000-33001	9	
206-34	33001-33002	.	
206-35	33002-33003	x	
206-36	33004-33011	drivers	
206-37	33011-33012	.	

#Text=If you’re currently using those drivers, we recommend moving to the new Amazon Redshift–specific drivers.
207-1	33013-33015	If	
207-2	33016-33019	you	
207-3	33019-33020	’	
207-4	33020-33022	re	
207-5	33023-33032	currently	
207-6	33033-33038	using	
207-7	33039-33044	those	
207-8	33045-33052	drivers	
207-9	33052-33053	,	
207-10	33054-33056	we	
207-11	33057-33066	recommend	
207-12	33067-33073	moving	
207-13	33074-33076	to	
207-14	33077-33080	the	
207-15	33081-33084	new	
207-16	33085-33091	Amazon	
207-17	33092-33109	Redshift–specific	
207-18	33110-33117	drivers	
207-19	33117-33118	.	

#Text=For more information about drivers and configuring connections, see JDBC and ODBC drivers for Amazon Redshift in the Amazon Redshift Cluster Management Guide.
208-1	33119-33122	For	
208-2	33123-33127	more	
208-3	33128-33139	information	
208-4	33140-33145	about	
208-5	33146-33153	drivers	
208-6	33154-33157	and	
208-7	33158-33169	configuring	
208-8	33170-33181	connections	
208-9	33181-33182	,	
208-10	33183-33186	see	
208-11	33187-33191	JDBC	
208-12	33192-33195	and	
208-13	33196-33200	ODBC	
208-14	33201-33208	drivers	
208-15	33209-33212	for	
208-16	33213-33219	Amazon	
208-17	33220-33228	Redshift	
208-18	33229-33231	in	
208-19	33232-33235	the	
208-20	33236-33242	Amazon	
208-21	33243-33251	Redshift	
208-22	33252-33259	Cluster	
208-23	33260-33270	Management	
208-24	33271-33276	Guide	
208-25	33276-33277	.	

#Text=While rarely necessary, the Amazon Redshift drivers do permit some parameter tuning that may be useful in some circumstances.
209-1	33278-33283	While	
209-2	33284-33290	rarely	
209-3	33291-33300	necessary	
209-4	33300-33301	,	
209-5	33302-33305	the	
209-6	33306-33312	Amazon	
209-7	33313-33321	Redshift	
209-8	33322-33329	drivers	
209-9	33330-33332	do	
209-10	33333-33339	permit	
209-11	33340-33344	some	
209-12	33345-33354	parameter	
209-13	33355-33361	tuning	
209-14	33362-33366	that	
209-15	33367-33370	may	
209-16	33371-33373	be	
209-17	33374-33380	useful	
209-18	33381-33383	in	
209-19	33384-33388	some	
209-20	33389-33402	circumstances	
209-21	33402-33403	.	

#Text=Downstream third-party applications often have their own best practices for driver tuning that may lead to additional performance gains.
210-1	33404-33414	Downstream	
210-2	33415-33426	third-party	
210-3	33427-33439	applications	
210-4	33440-33445	often	
210-5	33446-33450	have	
210-6	33451-33456	their	
210-7	33457-33460	own	
210-8	33461-33465	best	
210-9	33466-33475	practices	
210-10	33476-33479	for	
210-11	33480-33486	driver	
210-12	33487-33493	tuning	
210-13	33494-33498	that	
210-14	33499-33502	may	
210-15	33503-33507	lead	
210-16	33508-33510	to	
210-17	33511-33521	additional	
210-18	33522-33533	performance	
210-19	33534-33539	gains	
210-20	33539-33540	.	

#Text=For JDBC, consider the following:
#Text=To avoid client-side out-of-memory errors when retrieving large data sets using JDBC, you can enable your client to fetch data in batches by setting the JDBC fetch size parameter or BlockingRowsMode.
211-1	33541-33544	For	
211-2	33545-33549	JDBC	
211-3	33549-33550	,	
211-4	33551-33559	consider	
211-5	33560-33563	the	
211-6	33564-33573	following	
211-7	33573-33574	:	
211-8	33575-33577	To	
211-9	33578-33583	avoid	
211-10	33584-33595	client-side	
211-11	33596-33609	out-of-memory	
211-12	33610-33616	errors	
211-13	33617-33621	when	
211-14	33622-33632	retrieving	
211-15	33633-33638	large	
211-16	33639-33643	data	
211-17	33644-33648	sets	
211-18	33649-33654	using	
211-19	33655-33659	JDBC	
211-20	33659-33660	,	
211-21	33661-33664	you	
211-22	33665-33668	can	
211-23	33669-33675	enable	
211-24	33676-33680	your	
211-25	33681-33687	client	
211-26	33688-33690	to	
211-27	33691-33696	fetch	
211-28	33697-33701	data	
211-29	33702-33704	in	
211-30	33705-33712	batches	
211-31	33713-33715	by	
211-32	33716-33723	setting	
211-33	33724-33727	the	
211-34	33728-33732	JDBC	
211-35	33733-33738	fetch	
211-36	33739-33743	size	
211-37	33744-33753	parameter	
211-38	33754-33756	or	
211-39	33757-33773	BlockingRowsMode	
211-40	33773-33774	.	

#Text=Amazon Redshift doesn’t recognize the JDBC maxRows parameter.
212-1	33775-33781	Amazon	
212-2	33782-33790	Redshift	
212-3	33791-33796	doesn	
212-4	33796-33797	’	
212-5	33797-33798	t	
212-6	33799-33808	recognize	
212-7	33809-33812	the	
212-8	33813-33817	JDBC	
212-9	33818-33825	maxRows	
212-10	33826-33835	parameter	
212-11	33835-33836	.	

#Text=Instead, specify a LIMIT clause to restrict the result set.
213-1	33837-33844	Instead	
213-2	33844-33845	,	
213-3	33846-33853	specify	
213-4	33854-33855	a	
213-5	33856-33861	LIMIT	
213-6	33862-33868	clause	
213-7	33869-33871	to	
213-8	33872-33880	restrict	
213-9	33881-33884	the	
213-10	33885-33891	result	
213-11	33892-33895	set	
213-12	33895-33896	.	

#Text=You can also use an OFFSET clause to skip to a specific starting point in the result set.
214-1	33897-33900	You	
214-2	33901-33904	can	
214-3	33905-33909	also	
214-4	33910-33913	use	
214-5	33914-33916	an	
214-6	33917-33923	OFFSET	
214-7	33924-33930	clause	
214-8	33931-33933	to	
214-9	33934-33938	skip	
214-10	33939-33941	to	
214-11	33942-33943	a	
214-12	33944-33952	specific	
214-13	33953-33961	starting	
214-14	33962-33967	point	
214-15	33968-33970	in	
214-16	33971-33974	the	
214-17	33975-33981	result	
214-18	33982-33985	set	
214-19	33985-33986	.	

#Text=For ODBC, consider the following:
#Text=A cursor is enabled on the cluster’s leader node when useDelareFecth is enabled.
215-1	33987-33990	For	
215-2	33991-33995	ODBC	
215-3	33995-33996	,	
215-4	33997-34005	consider	
215-5	34006-34009	the	
215-6	34010-34019	following	
215-7	34019-34020	:	
215-8	34021-34022	A	
215-9	34023-34029	cursor	
215-10	34030-34032	is	
215-11	34033-34040	enabled	
215-12	34041-34043	on	
215-13	34044-34047	the	
215-14	34048-34055	cluster	
215-15	34055-34056	’	
215-16	34056-34057	s	
215-17	34058-34064	leader	
215-18	34065-34069	node	
215-19	34070-34074	when	
215-20	34075-34089	useDelareFecth	
215-21	34090-34092	is	
215-22	34093-34100	enabled	
215-23	34100-34101	.	

#Text=The cursor fetches up to fetchsize/cursorsize and then waits to fetch more rows when the application request more rows.
216-1	34102-34105	The	
216-2	34106-34112	cursor	
216-3	34113-34120	fetches	
216-4	34121-34123	up	
216-5	34124-34126	to	
216-6	34127-34136	fetchsize	
216-7	34136-34137	/	
216-8	34137-34147	cursorsize	
216-9	34148-34151	and	
216-10	34152-34156	then	
216-11	34157-34162	waits	
216-12	34163-34165	to	
216-13	34166-34171	fetch	
216-14	34172-34176	more	
216-15	34177-34181	rows	
216-16	34182-34186	when	
216-17	34187-34190	the	
216-18	34190-34191	 	
216-19	34191-34202	application	
216-20	34203-34210	request	
216-21	34211-34215	more	
216-22	34216-34220	rows	
216-23	34220-34221	.	

#Text=The CURSOR command is an explicit directive that the application uses to manipulate cursor behavior on the leader node.
217-1	34222-34225	The	
217-2	34226-34232	CURSOR	
217-3	34233-34240	command	
217-4	34241-34243	is	
217-5	34244-34246	an	
217-6	34247-34255	explicit	
217-7	34256-34265	directive	
217-8	34266-34270	that	
217-9	34271-34274	the	
217-10	34275-34286	application	
217-11	34287-34291	uses	
217-12	34292-34294	to	
217-13	34295-34305	manipulate	
217-14	34306-34312	cursor	
217-15	34313-34321	behavior	
217-16	34322-34324	on	
217-17	34325-34328	the	
217-18	34329-34335	leader	
217-19	34336-34340	node	
217-20	34340-34341	.	

#Text=Unlike the JDBC driver, the ODBC driver doesn’t have a BlockingRowsMode mechanism.
218-1	34342-34348	Unlike	
218-2	34349-34352	the	
218-3	34353-34357	JDBC	
218-4	34358-34364	driver	
218-5	34364-34365	,	
218-6	34366-34369	the	
218-7	34370-34374	ODBC	
218-8	34375-34381	driver	
218-9	34382-34387	doesn	
218-10	34387-34388	’	
218-11	34388-34389	t	
218-12	34390-34394	have	
218-13	34395-34396	a	
218-14	34397-34413	BlockingRowsMode	
218-15	34414-34423	mechanism	
218-16	34423-34424	.	

#Text=It’s recommended that you do not undertake driver tuning unless you have a clear need.
219-1	34425-34427	It	
219-2	34427-34428	’	
219-3	34428-34429	s	
219-4	34430-34441	recommended	
219-5	34442-34446	that	
219-6	34447-34450	you	
219-7	34451-34453	do	
219-8	34454-34457	not	
219-9	34458-34467	undertake	
219-10	34468-34474	driver	
219-11	34475-34481	tuning	
219-12	34482-34488	unless	
219-13	34489-34492	you	
219-14	34493-34497	have	
219-15	34498-34499	a	
219-16	34500-34505	clear	
219-17	34506-34510	need	
219-18	34510-34511	.	

#Text=AWS Support is available to help on this topic as well.
220-1	34512-34515	AWS	
220-2	34516-34523	Support	
220-3	34524-34526	is	
220-4	34527-34536	available	
220-5	34537-34539	to	
220-6	34540-34544	help	
220-7	34545-34547	on	
220-8	34548-34552	this	
220-9	34553-34558	topic	
220-10	34559-34561	as	
220-11	34562-34566	well	
220-12	34566-34567	.	

#Text=Conclusion
#Text=Amazon Redshift is a powerful, fully managed data warehouse that can offer increased performance and lower cost in the cloud.
221-1	34568-34578	Conclusion	
221-2	34579-34585	Amazon	
221-3	34586-34594	Redshift	
221-4	34595-34597	is	
221-5	34598-34599	a	
221-6	34600-34608	powerful	
221-7	34608-34609	,	
221-8	34610-34615	fully	
221-9	34616-34623	managed	
221-10	34624-34628	data	
221-11	34629-34638	warehouse	
221-12	34639-34643	that	
221-13	34644-34647	can	
221-14	34648-34653	offer	
221-15	34654-34663	increased	
221-16	34664-34675	performance	
221-17	34676-34679	and	
221-18	34680-34685	lower	
221-19	34686-34690	cost	
221-20	34691-34693	in	
221-21	34694-34697	the	
221-22	34698-34703	cloud	
221-23	34703-34704	.	

#Text=As Amazon Redshift grows based on the feedback from its tens of thousands of active customers world-wide, it continues to become easier to use and extend its price-for-performance value proposition.
222-1	34705-34707	As	
222-2	34708-34714	Amazon	
222-3	34715-34723	Redshift	
222-4	34724-34729	grows	
222-5	34730-34735	based	
222-6	34736-34738	on	
222-7	34739-34742	the	
222-8	34743-34751	feedback	
222-9	34752-34756	from	
222-10	34757-34760	its	
222-11	34761-34765	tens	
222-12	34766-34768	of	
222-13	34769-34778	thousands	
222-14	34779-34781	of	
222-15	34782-34788	active	
222-16	34789-34798	customers	
222-17	34799-34809	world-wide	
222-18	34809-34810	,	
222-19	34811-34813	it	
222-20	34814-34823	continues	
222-21	34824-34826	to	
222-22	34827-34833	become	
222-23	34834-34840	easier	
222-24	34841-34843	to	
222-25	34844-34847	use	
222-26	34848-34851	and	
222-27	34852-34858	extend	
222-28	34859-34862	its	
222-29	34863-34884	price-for-performance	
222-30	34885-34890	value	
222-31	34891-34902	proposition	
222-32	34902-34903	.	

#Text=Staying abreast of these improvements can help you get more value (with less effort) from this core AWS service.
223-1	34904-34911	Staying	
223-2	34912-34919	abreast	
223-3	34920-34922	of	
223-4	34923-34928	these	
223-5	34929-34941	improvements	
223-6	34942-34945	can	
223-7	34946-34950	help	
223-8	34951-34954	you	
223-9	34955-34958	get	
223-10	34959-34963	more	
223-11	34964-34969	value	
223-12	34970-34971	(	
223-13	34971-34975	with	
223-14	34976-34980	less	
223-15	34981-34987	effort	
223-16	34987-34988	)	
223-17	34989-34993	from	
223-18	34994-34998	this	
223-19	34999-35003	core	
223-20	35004-35007	AWS	
223-21	35008-35015	service	
223-22	35015-35016	.	

#Text=We hope you learned a great deal about making the most of your Amazon Redshift account with the resources in this post.
224-1	35017-35019	We	
224-2	35020-35024	hope	
224-3	35025-35028	you	
224-4	35029-35036	learned	
224-5	35037-35038	a	
224-6	35039-35044	great	
224-7	35045-35049	deal	
224-8	35050-35055	about	
224-9	35056-35062	making	
224-10	35063-35066	the	
224-11	35067-35071	most	
224-12	35072-35074	of	
224-13	35075-35079	your	
224-14	35080-35086	Amazon	
224-15	35087-35095	Redshift	
224-16	35096-35103	account	
224-17	35104-35108	with	
224-18	35109-35112	the	
224-19	35113-35122	resources	
224-20	35123-35125	in	
224-21	35126-35130	this	
224-22	35131-35135	post	
224-23	35135-35136	.	

#Text=If you have questions or suggestions, please leave a comment.
225-1	35137-35139	If	
225-2	35140-35143	you	
225-3	35144-35148	have	
225-4	35149-35158	questions	
225-5	35159-35161	or	
225-6	35162-35173	suggestions	
225-7	35173-35174	,	
225-8	35175-35181	please	
225-9	35182-35187	leave	
225-10	35188-35189	a	
225-11	35190-35197	comment	
225-12	35197-35198	.	

#Text=About the Authors
#Text=Matt Scaer is a Principal Data Warehousing Specialist Solution Architect, with over 20 years of data warehousing experience, with 11+ years at both AWS and Amazon.com.
226-1	35199-35204	About	
226-2	35205-35208	the	
226-3	35209-35216	Authors	
226-4	35217-35221	Matt	
226-5	35222-35227	Scaer	
226-6	35228-35230	is	
226-7	35231-35232	a	
226-8	35233-35242	Principal	
226-9	35243-35247	Data	
226-10	35248-35259	Warehousing	
226-11	35260-35270	Specialist	
226-12	35271-35279	Solution	
226-13	35280-35289	Architect	
226-14	35289-35290	,	
226-15	35291-35295	with	
226-16	35296-35300	over	
226-17	35301-35303	20	
226-18	35304-35309	years	
226-19	35310-35312	of	
226-20	35313-35317	data	
226-21	35318-35329	warehousing	
226-22	35330-35340	experience	
226-23	35340-35341	,	
226-24	35342-35346	with	
226-25	35347-35349	11	
226-26	35349-35350	+	
226-27	35351-35356	years	
226-28	35357-35359	at	
226-29	35360-35364	both	
226-30	35365-35368	AWS	
226-31	35369-35372	and	
226-32	35373-35383	Amazon.com	
226-33	35383-35384	.	

#Text=Manish Vazirani is an Analytics Specialist Solutions Architect at Amazon Web Services.
227-1	35385-35391	Manish	
227-2	35392-35400	Vazirani	
227-3	35401-35403	is	
227-4	35404-35406	an	
227-5	35407-35416	Analytics	
227-6	35417-35427	Specialist	
227-7	35428-35437	Solutions	
227-8	35438-35447	Architect	
227-9	35448-35450	at	
227-10	35451-35457	Amazon	
227-11	35458-35461	Web	
227-12	35462-35470	Services	
227-13	35470-35471	.	

#Text=Tarun Chaudhary is an Analytics Specialist Solutions Architect at AWS.
228-1	35472-35477	Tarun	
228-2	35478-35487	Chaudhary	
228-3	35488-35490	is	
228-4	35491-35493	an	
228-5	35494-35503	Analytics	
228-6	35504-35514	Specialist	
228-7	35515-35524	Solutions	
228-8	35525-35534	Architect	
228-9	35535-35537	at	
228-10	35538-35541	AWS	
228-11	35541-35542	.	

#Text=TAGS:
#Text=Amazon Redshift
#Text=View Comments
#Text=Resources
#Text=Amazon Athena
#Text=Amazon EMR
#Text=Amazon Kinesis
#Text=Amazon MSK
#Text=Amazon QuickSight
#Text=Amazon Redshift
#Text=AWS Glue
#Text=Follow
#Text=Twitter
#Text=Facebook
#Text=LinkedIn
#Text=Twitch
#Text=Email Updates
#Text=Sign In to the Console
#Text=Learn About AWS
#Text=What Is AWS?
229-1	35543-35547	TAGS	
229-2	35547-35548	:	
229-3	35549-35555	Amazon	
229-4	35556-35564	Redshift	
229-5	35565-35569	View	
229-6	35570-35578	Comments	
229-7	35579-35588	Resources	
229-8	35589-35595	Amazon	
229-9	35596-35602	Athena	
229-10	35603-35609	Amazon	
229-11	35610-35613	EMR	
229-12	35614-35620	Amazon	
229-13	35621-35628	Kinesis	
229-14	35629-35635	Amazon	
229-15	35636-35639	MSK	
229-16	35640-35646	Amazon	
229-17	35647-35657	QuickSight	
229-18	35658-35664	Amazon	
229-19	35665-35673	Redshift	
229-20	35674-35677	AWS	
229-21	35678-35682	Glue	
229-22	35683-35689	Follow	
229-23	35690-35697	Twitter	
229-24	35698-35706	Facebook	
229-25	35707-35715	LinkedIn	
229-26	35716-35722	Twitch	
229-27	35723-35728	Email	
229-28	35729-35736	Updates	
229-29	35737-35741	Sign	
229-30	35742-35744	In	
229-31	35745-35747	to	
229-32	35748-35751	the	
229-33	35752-35759	Console	
229-34	35760-35765	Learn	
229-35	35766-35771	About	
229-36	35772-35775	AWS	
229-37	35776-35780	What	
229-38	35781-35783	Is	
229-39	35784-35787	AWS	
229-40	35787-35788	?	

#Text=What Is Cloud Computing?
230-1	35789-35793	What	
230-2	35794-35796	Is	
230-3	35797-35802	Cloud	
230-4	35803-35812	Computing	
230-5	35812-35813	?	

#Text=AWS Inclusion, Diversity & Equity
#Text=What Is DevOps?
231-1	35814-35817	AWS	
231-2	35818-35827	Inclusion	
231-3	35827-35828	,	
231-4	35829-35838	Diversity	
231-5	35839-35840	&	
231-6	35841-35847	Equity	
231-7	35848-35852	What	
231-8	35853-35855	Is	
231-9	35856-35862	DevOps	
231-10	35862-35863	?	

#Text=What Is a Container?
232-1	35864-35868	What	
232-2	35869-35871	Is	
232-3	35872-35873	a	
232-4	35874-35883	Container	
232-5	35883-35884	?	

#Text=What Is a Data Lake?
233-1	35885-35889	What	
233-2	35890-35892	Is	
233-3	35893-35894	a	
233-4	35895-35899	Data	
233-5	35900-35904	Lake	
233-6	35904-35905	?	

#Text=AWS Cloud Security
#Text=What's New
#Text=Blogs
#Text=Press Releases
#Text=Resources for AWS
#Text=Getting Started
#Text=Training and Certification
#Text=AWS Solutions Portfolio
#Text=Architecture Center
#Text=Product and Technical FAQs
#Text=Analyst Reports
#Text=AWS Partner Network
#Text=Developers on AWS
#Text=Developer Center
#Text=SDKs & Tools
#Text=.NET on AWS
#Text=Python on AWS
#Text=Java on AWS
#Text=PHP on AWS
#Text=Javascript on AWS
#Text=Help
#Text=Contact Us
#Text=AWS Careers
#Text=File a Support Ticket
#Text=Knowledge Center
#Text=AWS Support Overview
#Text=Legal
#Text=Create an AWS Account
#Text=Amazon is an Equal Opportunity Employer:
#Text=Minority / Women / Disability / Veteran / Gender Identity / Sexual Orientation / Age.
234-1	35906-35909	AWS	
234-2	35910-35915	Cloud	
234-3	35916-35924	Security	
234-4	35925-35931	What's	
234-5	35932-35935	New	
234-6	35936-35941	Blogs	
234-7	35942-35947	Press	
234-8	35948-35956	Releases	
234-9	35957-35966	Resources	
234-10	35967-35970	for	
234-11	35971-35974	AWS	
234-12	35975-35982	Getting	
234-13	35983-35990	Started	
234-14	35991-35999	Training	
234-15	36000-36003	and	
234-16	36004-36017	Certification	
234-17	36018-36021	AWS	
234-18	36022-36031	Solutions	
234-19	36032-36041	Portfolio	
234-20	36042-36054	Architecture	
234-21	36055-36061	Center	
234-22	36062-36069	Product	
234-23	36070-36073	and	
234-24	36074-36083	Technical	
234-25	36084-36088	FAQs	
234-26	36089-36096	Analyst	
234-27	36097-36104	Reports	
234-28	36105-36108	AWS	
234-29	36109-36116	Partner	
234-30	36117-36124	Network	
234-31	36125-36135	Developers	
234-32	36136-36138	on	
234-33	36139-36142	AWS	
234-34	36143-36152	Developer	
234-35	36153-36159	Center	
234-36	36160-36164	SDKs	
234-37	36165-36166	&	
234-38	36167-36172	Tools	
234-39	36173-36174	.	
234-40	36174-36177	NET	
234-41	36178-36180	on	
234-42	36181-36184	AWS	
234-43	36185-36191	Python	
234-44	36192-36194	on	
234-45	36195-36198	AWS	
234-46	36199-36203	Java	
234-47	36204-36206	on	
234-48	36207-36210	AWS	
234-49	36211-36214	PHP	
234-50	36215-36217	on	
234-51	36218-36221	AWS	
234-52	36222-36232	Javascript	
234-53	36233-36235	on	
234-54	36236-36239	AWS	
234-55	36240-36244	Help	
234-56	36245-36252	Contact	
234-57	36253-36255	Us	
234-58	36256-36259	AWS	
234-59	36260-36267	Careers	
234-60	36268-36272	File	
234-61	36273-36274	a	
234-62	36275-36282	Support	
234-63	36283-36289	Ticket	
234-64	36290-36299	Knowledge	
234-65	36300-36306	Center	
234-66	36307-36310	AWS	
234-67	36311-36318	Support	
234-68	36319-36327	Overview	
234-69	36328-36333	Legal	
234-70	36334-36340	Create	
234-71	36341-36343	an	
234-72	36344-36347	AWS	
234-73	36348-36355	Account	
234-74	36356-36362	Amazon	
234-75	36363-36365	is	
234-76	36366-36368	an	
234-77	36369-36374	Equal	
234-78	36375-36386	Opportunity	
234-79	36387-36395	Employer	
234-80	36395-36396	:	
234-81	36397-36405	Minority	
234-82	36406-36407	/	
234-83	36408-36413	Women	
234-84	36414-36415	/	
234-85	36416-36426	Disability	
234-86	36427-36428	/	
234-87	36429-36436	Veteran	
234-88	36437-36438	/	
234-89	36439-36445	Gender	
234-90	36446-36454	Identity	
234-91	36455-36456	/	
234-92	36457-36463	Sexual	
234-93	36464-36475	Orientation	
234-94	36476-36477	/	
234-95	36478-36481	Age	
234-96	36481-36482	.	

#Text=Language
#Text=عربي
#Text=Bahasa Indonesia
#Text=Deutsch
#Text=English
#Text=Español
#Text=Français
#Text=Italiano
#Text=Português
#Text=Tiếng Việt
#Text=Türkçe
#Text=Ρусский
#Text=ไทย
#Text=日本語
#Text=한국어
#Text=中文 (简体)
#Text=中文 (繁體)
#Text=Privacy
#Text=Site Terms
#Text=Cookie Preferences
#Text=© 2021, Amazon Web Services, Inc. or its affiliates.
235-1	36483-36491	Language	
235-2	36492-36496	عربي	
235-3	36497-36503	Bahasa	
235-4	36504-36513	Indonesia	
235-5	36514-36521	Deutsch	
235-6	36522-36529	English	
235-7	36530-36537	Español	
235-8	36538-36546	Français	
235-9	36547-36555	Italiano	
235-10	36556-36565	Português	
235-11	36566-36571	Tiếng	
235-12	36572-36576	Việt	
235-13	36577-36583	Türkçe	
235-14	36584-36591	Ρусский	
235-15	36592-36595	ไทย	
235-16	36596-36599	日本語	
235-17	36600-36603	한국어	
235-18	36604-36606	中文	
235-19	36607-36608	(	
235-20	36608-36610	简体	
235-21	36610-36611	)	
235-22	36612-36614	中文	
235-23	36615-36616	(	
235-24	36616-36618	繁體	
235-25	36618-36619	)	
235-26	36620-36627	Privacy	
235-27	36628-36632	Site	
235-28	36633-36638	Terms	
235-29	36639-36645	Cookie	
235-30	36646-36657	Preferences	
235-31	36658-36659	©	
235-32	36660-36664	2021	
235-33	36664-36665	,	
235-34	36666-36672	Amazon	
235-35	36673-36676	Web	
235-36	36677-36685	Services	
235-37	36685-36686	,	
235-38	36687-36690	Inc	
235-39	36690-36691	.	
235-40	36692-36694	or	
235-41	36695-36698	its	
235-42	36699-36709	affiliates	
235-43	36709-36710	.	

#Text=All rights reserved.
236-1	36711-36714	All	
236-2	36715-36721	rights	
236-3	36722-36730	reserved	
236-4	36730-36731	.	
