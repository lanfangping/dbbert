#FORMAT=WebAnno TSV 3.3


#Text=MySQL Query Performance Optimization Tips | Section
#Text=Platform
#Text=select_all Edge AppSpace
#Text=SolutionHub
#Text=Performance / CDN
#Text=Security
#Text=Virtual Waiting Room
#Text=A/B Testing
#Text=Search AppSpace
#Text=AppStack
#Text=Node.js Edge Hosting
#Text=RunStack
#Text=Containers
#Text=Serverless
#Text=gps_fixed Core Platform
#Text=Section Control Plane
#Text=Edge AppSpace
#Text=Adaptive Edge Engine (AEE)
#Text=Global Edge Network
#Text=Solutions
#Text=SaaS
#Text=PaaS & Hosting Providers
#Text=Edge App Hosting
#Text=Docs
#Text=Resources
#Text=Blog
#Text=Case Studies
#Text=Edge Content Library
#Text=Solution Briefs
#Text=Product Videos
#Text=Engineering Education
#Text=About Section
#Text=Partners
#Text=Changelog
#Text=Pricing
#Text=Contact
#Text=Log In
#Text=Get Started
#Text=Platform
#Text=dvrEdge Solutions
#Text=SaaS
#Text=PaaS & Hosting Providers
#Text=Edge App Hosting
#Text=select_allEdge Services
#Text=Performance / CDN
#Text=Security
#Text=Virtual Waiting Room
#Text=<<<<<<< HEAD
#Text=HTTP/2
#Text=businessUse Cases
#Text=Enterprise
#Text=Ecommerce
#Text=SaaS
#Text=Gaming
#Text=IoT / IIoT
#Text=Magento
#Text=WordPress
#Text=Drupal
#Text=BigCommerce
#Text=securityApplication Security
#Text=Web Application Firewall
#Text=IP Blocking
#Text=SSL Certificates
#Text=DDoS Mitigation
#Text=Bad Bot Management
#Text=Content Security Policy
#Text========
#Text=A/B Testing
#Text=Node.js
#Text=View All Modules
#Text=>>>>>>> 7da9c59409ee517c21a0018dd10dd79484e2a3c8
#Text=gps_fixedCore Platform
#Text=Adaptive Edge Engine (AEE)
#Text=Observability
#Text=Global Edge Network
#Text=DevOps Tooling
#Text=Docs
#Text=Resources
#Text=Blog
#Text=Case Studies
#Text=Content Library
#Text=Solution Briefs
#Text=Changelog
#Text=Engineering Education
#Text=Partners
#Text=About Section
#Text=Pricing
#Text=Contact
#Text=Log In
#Text=Get Started
#Text=MySQL Query Performance Optimization Tips
#Text=October 1, 2020
#Text=This article goes through common tips for optimizing MySQL queries.
1-1	0-5	MySQL	
1-2	6-11	Query	
1-3	12-23	Performance	
1-4	24-36	Optimization	
1-5	37-41	Tips	
1-6	42-43	|	
1-7	44-51	Section	
1-8	52-60	Platform	
1-9	61-71	select_all	
1-10	72-76	Edge	
1-11	77-85	AppSpace	
1-12	86-97	SolutionHub	
1-13	98-109	Performance	
1-14	110-111	/	
1-15	112-115	CDN	
1-16	116-124	Security	
1-17	125-132	Virtual	
1-18	133-140	Waiting	
1-19	141-145	Room	
1-20	146-147	A	
1-21	147-148	/	
1-22	148-149	B	
1-23	150-157	Testing	
1-24	158-164	Search	
1-25	165-173	AppSpace	
1-26	174-182	AppStack	
1-27	183-190	Node.js	
1-28	191-195	Edge	
1-29	196-203	Hosting	
1-30	204-212	RunStack	
1-31	213-223	Containers	
1-32	224-234	Serverless	
1-33	235-244	gps_fixed	
1-34	245-249	Core	
1-35	250-258	Platform	
1-36	259-266	Section	
1-37	267-274	Control	
1-38	275-280	Plane	
1-39	281-285	Edge	
1-40	286-294	AppSpace	
1-41	295-303	Adaptive	
1-42	304-308	Edge	
1-43	309-315	Engine	
1-44	316-317	(	
1-45	317-320	AEE	
1-46	320-321	)	
1-47	322-328	Global	
1-48	329-333	Edge	
1-49	334-341	Network	
1-50	342-351	Solutions	
1-51	352-356	SaaS	
1-52	357-361	PaaS	
1-53	362-363	&	
1-54	364-371	Hosting	
1-55	372-381	Providers	
1-56	382-386	Edge	
1-57	387-390	App	
1-58	391-398	Hosting	
1-59	399-403	Docs	
1-60	404-413	Resources	
1-61	414-418	Blog	
1-62	419-423	Case	
1-63	424-431	Studies	
1-64	432-436	Edge	
1-65	437-444	Content	
1-66	445-452	Library	
1-67	453-461	Solution	
1-68	462-468	Briefs	
1-69	469-476	Product	
1-70	477-483	Videos	
1-71	484-495	Engineering	
1-72	496-505	Education	
1-73	506-511	About	
1-74	512-519	Section	
1-75	520-528	Partners	
1-76	529-538	Changelog	
1-77	539-546	Pricing	
1-78	547-554	Contact	
1-79	555-558	Log	
1-80	559-561	In	
1-81	562-565	Get	
1-82	566-573	Started	
1-83	574-582	Platform	
1-84	583-590	dvrEdge	
1-85	591-600	Solutions	
1-86	601-605	SaaS	
1-87	606-610	PaaS	
1-88	611-612	&	
1-89	613-620	Hosting	
1-90	621-630	Providers	
1-91	631-635	Edge	
1-92	636-639	App	
1-93	640-647	Hosting	
1-94	648-662	select_allEdge	
1-95	663-671	Services	
1-96	672-683	Performance	
1-97	684-685	/	
1-98	686-689	CDN	
1-99	690-698	Security	
1-100	699-706	Virtual	
1-101	707-714	Waiting	
1-102	715-719	Room	
1-103	720-721	<	
1-104	721-722	<	
1-105	722-723	<	
1-106	723-724	<	
1-107	724-725	<	
1-108	725-726	<	
1-109	726-727	<	
1-110	728-732	HEAD	
1-111	733-737	HTTP	
1-112	737-738	/	
1-113	738-739	2	
1-114	740-751	businessUse	
1-115	752-757	Cases	
1-116	758-768	Enterprise	
1-117	769-778	Ecommerce	
1-118	779-783	SaaS	
1-119	784-790	Gaming	
1-120	791-794	IoT	
1-121	795-796	/	
1-122	797-801	IIoT	
1-123	802-809	Magento	
1-124	810-819	WordPress	
1-125	820-826	Drupal	
1-126	827-838	BigCommerce	
1-127	839-858	securityApplication	
1-128	859-867	Security	
1-129	868-871	Web	
1-130	872-883	Application	
1-131	884-892	Firewall	
1-132	893-895	IP	
1-133	896-904	Blocking	
1-134	905-908	SSL	
1-135	909-921	Certificates	
1-136	922-926	DDoS	
1-137	927-937	Mitigation	
1-138	938-941	Bad	
1-139	942-945	Bot	
1-140	946-956	Management	
1-141	957-964	Content	
1-142	965-973	Security	
1-143	974-980	Policy	
1-144	981-982	=	
1-145	982-983	=	
1-146	983-984	=	
1-147	984-985	=	
1-148	985-986	=	
1-149	986-987	=	
1-150	987-988	=	
1-151	989-990	A	
1-152	990-991	/	
1-153	991-992	B	
1-154	993-1000	Testing	
1-155	1001-1008	Node.js	
1-156	1009-1013	View	
1-157	1014-1017	All	
1-158	1018-1025	Modules	
1-159	1026-1027	>	
1-160	1027-1028	>	
1-161	1028-1029	>	
1-162	1029-1030	>	
1-163	1030-1031	>	
1-164	1031-1032	>	
1-165	1032-1033	>	
1-166	1034-1074	7da9c59409ee517c21a0018dd10dd79484e2a3c8	
1-167	1075-1088	gps_fixedCore	
1-168	1089-1097	Platform	
1-169	1098-1106	Adaptive	
1-170	1107-1111	Edge	
1-171	1112-1118	Engine	
1-172	1119-1120	(	
1-173	1120-1123	AEE	
1-174	1123-1124	)	
1-175	1125-1138	Observability	
1-176	1139-1145	Global	
1-177	1146-1150	Edge	
1-178	1151-1158	Network	
1-179	1159-1165	DevOps	
1-180	1166-1173	Tooling	
1-181	1174-1178	Docs	
1-182	1179-1188	Resources	
1-183	1189-1193	Blog	
1-184	1194-1198	Case	
1-185	1199-1206	Studies	
1-186	1207-1214	Content	
1-187	1215-1222	Library	
1-188	1223-1231	Solution	
1-189	1232-1238	Briefs	
1-190	1239-1248	Changelog	
1-191	1249-1260	Engineering	
1-192	1261-1270	Education	
1-193	1271-1279	Partners	
1-194	1280-1285	About	
1-195	1286-1293	Section	
1-196	1294-1301	Pricing	
1-197	1302-1309	Contact	
1-198	1310-1313	Log	
1-199	1314-1316	In	
1-200	1317-1320	Get	
1-201	1321-1328	Started	
1-202	1329-1334	MySQL	
1-203	1335-1340	Query	
1-204	1341-1352	Performance	
1-205	1353-1365	Optimization	
1-206	1366-1370	Tips	
1-207	1371-1378	October	
1-208	1379-1380	1	
1-209	1380-1381	,	
1-210	1382-1386	2020	
1-211	1387-1391	This	
1-212	1392-1399	article	
1-213	1400-1404	goes	
1-214	1405-1412	through	
1-215	1413-1419	common	
1-216	1420-1424	tips	
1-217	1425-1428	for	
1-218	1429-1439	optimizing	
1-219	1440-1445	MySQL	
1-220	1446-1453	queries	
1-221	1453-1454	.	

#Text=As data volume in your database grows, retrieving data from the database and other database operations become complex.
2-1	1455-1457	As	
2-2	1458-1462	data	
2-3	1463-1469	volume	
2-4	1470-1472	in	
2-5	1473-1477	your	
2-6	1478-1486	database	
2-7	1487-1492	grows	
2-8	1492-1493	,	
2-9	1494-1504	retrieving	
2-10	1505-1509	data	
2-11	1510-1514	from	
2-12	1515-1518	the	
2-13	1519-1527	database	
2-14	1528-1531	and	
2-15	1532-1537	other	
2-16	1538-1546	database	
2-17	1547-1557	operations	
2-18	1558-1564	become	
2-19	1565-1572	complex	
2-20	1572-1573	.	

#Text=This also requires more computing resources.
3-1	1574-1578	This	
3-2	1579-1583	also	
3-3	1584-1592	requires	
3-4	1593-1597	more	
3-5	1598-1607	computing	
3-6	1608-1617	resources	
3-7	1617-1618	.	

#Text=Introduction
#Text=Most applications are database driven.
4-1	1619-1631	Introduction	
4-2	1632-1636	Most	
4-3	1637-1649	applications	
4-4	1650-1653	are	
4-5	1654-1662	database	
4-6	1663-1669	driven	
4-7	1669-1670	.	

#Text=Poorly designed SQL queries can significantly downgrade the performance of database-driven applications.
5-1	1671-1677	Poorly	
5-2	1678-1686	designed	
5-3	1687-1690	SQL	
5-4	1691-1698	queries	
5-5	1699-1702	can	
5-6	1703-1716	significantly	
5-7	1717-1726	downgrade	
5-8	1727-1730	the	
5-9	1731-1742	performance	
5-10	1743-1745	of	
5-11	1746-1761	database-driven	
5-12	1762-1774	applications	
5-13	1774-1775	.	

#Text=According to this MySQL developers guide, you can be proactive and plan for optimizations or troubleshoot queries and configurations after experiencing problems.
6-1	1776-1785	According	
6-2	1786-1788	to	
6-3	1789-1793	this	
6-4	1794-1799	MySQL	
6-5	1800-1810	developers	
6-6	1811-1816	guide	
6-7	1816-1817	,	
6-8	1818-1821	you	
6-9	1822-1825	can	
6-10	1826-1828	be	
6-11	1829-1838	proactive	
6-12	1839-1842	and	
6-13	1843-1847	plan	
6-14	1848-1851	for	
6-15	1852-1865	optimizations	
6-16	1866-1868	or	
6-17	1869-1881	troubleshoot	
6-18	1882-1889	queries	
6-19	1890-1893	and	
6-20	1894-1908	configurations	
6-21	1909-1914	after	
6-22	1915-1927	experiencing	
6-23	1928-1936	problems	
6-24	1936-1937	.	

#Text=This article will focus on the optimization of individual SQL statements and database structure.
7-1	1938-1942	This	
7-2	1943-1950	article	
7-3	1951-1955	will	
7-4	1956-1961	focus	
7-5	1962-1964	on	
7-6	1965-1968	the	
7-7	1969-1981	optimization	
7-8	1982-1984	of	
7-9	1985-1995	individual	
7-10	1996-1999	SQL	
7-11	2000-2010	statements	
7-12	2011-2014	and	
7-13	2015-2023	database	
7-14	2024-2033	structure	
7-15	2033-2034	.	

#Text=Prerequisites
#Text=To fully understand this article, prior knowledge of the MySQL database is essential.
8-1	2035-2048	Prerequisites	
8-2	2049-2051	To	
8-3	2052-2057	fully	
8-4	2058-2068	understand	
8-5	2069-2073	this	
8-6	2074-2081	article	
8-7	2081-2082	,	
8-8	2083-2088	prior	
8-9	2089-2098	knowledge	
8-10	2099-2101	of	
8-11	2102-2105	the	
8-12	2106-2111	MySQL	
8-13	2112-2120	database	
8-14	2121-2123	is	
8-15	2124-2133	essential	
8-16	2133-2134	.	

#Text=An understanding of different SQL queries and how they work is critical.
9-1	2135-2137	An	
9-2	2138-2151	understanding	
9-3	2152-2154	of	
9-4	2155-2164	different	
9-5	2165-2168	SQL	
9-6	2169-2176	queries	
9-7	2177-2180	and	
9-8	2181-2184	how	
9-9	2185-2189	they	
9-10	2190-2194	work	
9-11	2195-2197	is	
9-12	2198-2206	critical	
9-13	2206-2207	.	

#Text=Free MySQL tutorials for beginners are available on MySQL tutorial and tutorials point.
10-1	2208-2212	Free	
10-2	2213-2218	MySQL	
10-3	2219-2228	tutorials	
10-4	2229-2232	for	
10-5	2233-2242	beginners	
10-6	2243-2246	are	
10-7	2247-2256	available	
10-8	2257-2259	on	
10-9	2260-2265	MySQL	
10-10	2266-2274	tutorial	
10-11	2275-2278	and	
10-12	2279-2288	tutorials	
10-13	2289-2294	point	
10-14	2294-2295	.	

#Text=Benefits of MySQL Database Queries Optimization
#Text=We optimize for speed and resources.
11-1	2296-2304	Benefits	
11-2	2305-2307	of	
11-3	2308-2313	MySQL	
11-4	2314-2322	Database	
11-5	2323-2330	Queries	
11-6	2331-2343	Optimization	
11-7	2344-2346	We	
11-8	2347-2355	optimize	
11-9	2356-2359	for	
11-10	2360-2365	speed	
11-11	2366-2369	and	
11-12	2370-2379	resources	
11-13	2379-2380	.	

#Text=Optimized queries can run faster and require less computing power.
12-1	2381-2390	Optimized	
12-2	2391-2398	queries	
12-3	2399-2402	can	
12-4	2403-2406	run	
12-5	2407-2413	faster	
12-6	2414-2417	and	
12-7	2418-2425	require	
12-8	2426-2430	less	
12-9	2431-2440	computing	
12-10	2441-2446	power	
12-11	2446-2447	.	

#Text=Tips for MySQL Queries Optimization
#Text=Fast queries are about response time.
13-1	2448-2452	Tips	
13-2	2453-2456	for	
13-3	2457-2462	MySQL	
13-4	2463-2470	Queries	
13-5	2471-2483	Optimization	
13-6	2484-2488	Fast	
13-7	2489-2496	queries	
13-8	2497-2500	are	
13-9	2501-2506	about	
13-10	2507-2515	response	
13-11	2516-2520	time	
13-12	2520-2521	.	

#Text=The goal is to have queries return the required result in the shortest time possible.
14-1	2522-2525	The	
14-2	2526-2530	goal	
14-3	2531-2533	is	
14-4	2534-2536	to	
14-5	2537-2541	have	
14-6	2542-2549	queries	
14-7	2550-2556	return	
14-8	2557-2560	the	
14-9	2561-2569	required	
14-10	2570-2576	result	
14-11	2577-2579	in	
14-12	2580-2583	the	
14-13	2584-2592	shortest	
14-14	2593-2597	time	
14-15	2598-2606	possible	
14-16	2606-2607	.	

#Text=How much time does a query take to execute?
15-1	2608-2611	How	
15-2	2612-2616	much	
15-3	2617-2621	time	
15-4	2622-2626	does	
15-5	2627-2628	a	
15-6	2629-2634	query	
15-7	2635-2639	take	
15-8	2640-2642	to	
15-9	2643-2650	execute	
15-10	2650-2651	?	

#Text=Most of the tools used to query a MySQL database give details on time taken to run a query.
16-1	2652-2656	Most	
16-2	2657-2659	of	
16-3	2660-2663	the	
16-4	2664-2669	tools	
16-5	2670-2674	used	
16-6	2675-2677	to	
16-7	2678-2683	query	
16-8	2684-2685	a	
16-9	2686-2691	MySQL	
16-10	2692-2700	database	
16-11	2701-2705	give	
16-12	2706-2713	details	
16-13	2714-2716	on	
16-14	2717-2721	time	
16-15	2722-2727	taken	
16-16	2728-2730	to	
16-17	2731-2734	run	
16-18	2735-2736	a	
16-19	2737-2742	query	
16-20	2742-2743	.	

#Text=The most straightforward query cost metrics used in MySQL are query response time, the number of rows scanned, and the number of rows returned.
17-1	2744-2747	The	
17-2	2748-2752	most	
17-3	2753-2768	straightforward	
17-4	2769-2774	query	
17-5	2775-2779	cost	
17-6	2780-2787	metrics	
17-7	2788-2792	used	
17-8	2793-2795	in	
17-9	2796-2801	MySQL	
17-10	2802-2805	are	
17-11	2806-2811	query	
17-12	2812-2820	response	
17-13	2821-2825	time	
17-14	2825-2826	,	
17-15	2827-2830	the	
17-16	2831-2837	number	
17-17	2838-2840	of	
17-18	2841-2845	rows	
17-19	2846-2853	scanned	
17-20	2853-2854	,	
17-21	2855-2858	and	
17-22	2859-2862	the	
17-23	2863-2869	number	
17-24	2870-2872	of	
17-25	2873-2877	rows	
17-26	2878-2886	returned	
17-27	2886-2887	.	

#Text=The more the number of rows read, the higher the cost of the query.
18-1	2888-2891	The	
18-2	2892-2896	more	
18-3	2897-2900	the	
18-4	2901-2907	number	
18-5	2908-2910	of	
18-6	2911-2915	rows	
18-7	2916-2920	read	
18-8	2920-2921	,	
18-9	2922-2925	the	
18-10	2926-2932	higher	
18-11	2933-2936	the	
18-12	2937-2941	cost	
18-13	2942-2944	of	
18-14	2945-2948	the	
18-15	2949-2954	query	
18-16	2954-2955	.	

#Text=The screenshots below show the time taken to run a query in both CLI and MySQL Workbench.
19-1	2956-2959	The	
19-2	2960-2971	screenshots	
19-3	2972-2977	below	
19-4	2978-2982	show	
19-5	2983-2986	the	
19-6	2987-2991	time	
19-7	2992-2997	taken	
19-8	2998-3000	to	
19-9	3001-3004	run	
19-10	3005-3006	a	
19-11	3007-3012	query	
19-12	3013-3015	in	
19-13	3016-3020	both	
19-14	3021-3024	CLI	
19-15	3025-3028	and	
19-16	3029-3034	MySQL	
19-17	3035-3044	Workbench	
19-18	3044-3045	.	

#Text=Optimizing Queries with EXPLAIN
#Text=The EXPLAIN statement provides information about how MySQL executes a statement.
20-1	3046-3056	Optimizing	
20-2	3057-3064	Queries	
20-3	3065-3069	with	
20-4	3070-3077	EXPLAIN	
20-5	3078-3081	The	
20-6	3082-3089	EXPLAIN	
20-7	3090-3099	statement	
20-8	3100-3108	provides	
20-9	3109-3120	information	
20-10	3121-3126	about	
20-11	3127-3130	how	
20-12	3131-3136	MySQL	
20-13	3137-3145	executes	
20-14	3146-3147	a	
20-15	3148-3157	statement	
20-16	3157-3158	.	

#Text=According to the MySQL documentation, EXPLAIN works alongside SELECT, DELETE, INSERT, REPLACE, and UPDATE statements.
21-1	3159-3168	According	
21-2	3169-3171	to	
21-3	3172-3175	the	
21-4	3176-3181	MySQL	
21-5	3182-3195	documentation	
21-6	3195-3196	,	
21-7	3197-3204	EXPLAIN	
21-8	3205-3210	works	
21-9	3211-3220	alongside	
21-10	3221-3227	SELECT	
21-11	3227-3228	,	
21-12	3229-3235	DELETE	
21-13	3235-3236	,	
21-14	3237-3243	INSERT	
21-15	3243-3244	,	
21-16	3245-3252	REPLACE	
21-17	3252-3253	,	
21-18	3254-3257	and	
21-19	3258-3264	UPDATE	
21-20	3265-3275	statements	
21-21	3275-3276	.	

#Text=It displays information from a built-in MySQL optimizer regarding the statement execution plan and the number of rows scanned in each table.
22-1	3277-3279	It	
22-2	3280-3288	displays	
22-3	3289-3300	information	
22-4	3301-3305	from	
22-5	3306-3307	a	
22-6	3308-3316	built-in	
22-7	3317-3322	MySQL	
22-8	3323-3332	optimizer	
22-9	3333-3342	regarding	
22-10	3343-3346	the	
22-11	3347-3356	statement	
22-12	3357-3366	execution	
22-13	3367-3371	plan	
22-14	3372-3375	and	
22-15	3376-3379	the	
22-16	3380-3386	number	
22-17	3387-3389	of	
22-18	3390-3394	rows	
22-19	3395-3402	scanned	
22-20	3403-3405	in	
22-21	3406-3410	each	
22-22	3411-3416	table	
22-23	3416-3417	.	

#Text=Thus we can determine the cost of the query.
23-1	3418-3422	Thus	
23-2	3423-3425	we	
23-3	3426-3429	can	
23-4	3430-3439	determine	
23-5	3440-3443	the	
23-6	3444-3448	cost	
23-7	3449-3451	of	
23-8	3452-3455	the	
23-9	3456-3461	query	
23-10	3461-3462	.	

#Text=The query below shows how EXPLAIN works with the SELECT statement.
24-1	3463-3466	The	
24-2	3467-3472	query	
24-3	3473-3478	below	
24-4	3479-3484	shows	
24-5	3485-3488	how	
24-6	3489-3496	EXPLAIN	
24-7	3497-3502	works	
24-8	3503-3507	with	
24-9	3508-3511	the	
24-10	3512-3518	SELECT	
24-11	3519-3528	statement	
24-12	3528-3529	.	

#Text=EXPLAIN SELECT * FROM world_x.city LIMIT 5000;
#Text=MySQL EXPLAIN query output
#Text=MySQL Query Log
#Text=In MySQL, slow queries are logged in an built-in query log.
25-1	3530-3537	EXPLAIN	
25-2	3538-3544	SELECT	
25-3	3545-3546	*	
25-4	3547-3551	FROM	
25-5	3552-3564	world_x.city	
25-6	3565-3570	LIMIT	
25-7	3571-3575	5000	
25-8	3575-3576	;	
25-9	3577-3582	MySQL	
25-10	3583-3590	EXPLAIN	
25-11	3591-3596	query	
25-12	3597-3603	output	
25-13	3604-3609	MySQL	
25-14	3610-3615	Query	
25-15	3616-3619	Log	
25-16	3620-3622	In	
25-17	3623-3628	MySQL	
25-18	3628-3629	,	
25-19	3630-3634	slow	
25-20	3635-3642	queries	
25-21	3643-3646	are	
25-22	3647-3653	logged	
25-23	3654-3656	in	
25-24	3657-3659	an	
25-25	3660-3668	built-in	
25-26	3669-3674	query	
25-27	3675-3678	log	
25-28	3678-3679	.	

#Text=Once you find the slow queries in the query log, use the EXPLAIN statement to determine why the queries are slow and optimize them.
26-1	3680-3684	Once	
26-2	3685-3688	you	
26-3	3689-3693	find	
26-4	3694-3697	the	
26-5	3698-3702	slow	
26-6	3703-3710	queries	
26-7	3711-3713	in	
26-8	3714-3717	the	
26-9	3718-3723	query	
26-10	3724-3727	log	
26-11	3727-3728	,	
26-12	3729-3732	use	
26-13	3733-3736	the	
26-14	3737-3744	EXPLAIN	
26-15	3745-3754	statement	
26-16	3755-3757	to	
26-17	3758-3767	determine	
26-18	3768-3771	why	
26-19	3772-3775	the	
26-20	3776-3783	queries	
26-21	3784-3787	are	
26-22	3788-3792	slow	
26-23	3793-3796	and	
26-24	3797-3805	optimize	
26-25	3806-3810	them	
26-26	3810-3811	.	

#Text=Optimizing Database Schema
#Text=The database structure is very crucial in performance optimization.
27-1	3812-3822	Optimizing	
27-2	3823-3831	Database	
27-3	3832-3838	Schema	
27-4	3839-3842	The	
27-5	3843-3851	database	
27-6	3852-3861	structure	
27-7	3862-3864	is	
27-8	3865-3869	very	
27-9	3870-3877	crucial	
27-10	3878-3880	in	
27-11	3881-3892	performance	
27-12	3893-3905	optimization	
27-13	3905-3906	.	

#Text=There are several ways in which we can optimize database structure, including:
#Text=Limiting the number of columns: MySQL has a limit of 4096 columns per table.
28-1	3907-3912	There	
28-2	3913-3916	are	
28-3	3917-3924	several	
28-4	3925-3929	ways	
28-5	3930-3932	in	
28-6	3933-3938	which	
28-7	3939-3941	we	
28-8	3942-3945	can	
28-9	3946-3954	optimize	
28-10	3955-3963	database	
28-11	3964-3973	structure	
28-12	3973-3974	,	
28-13	3975-3984	including	
28-14	3984-3985	:	
28-15	3986-3994	Limiting	
28-16	3995-3998	the	
28-17	3999-4005	number	
28-18	4006-4008	of	
28-19	4009-4016	columns	
28-20	4016-4017	:	
28-21	4018-4023	MySQL	
28-22	4024-4027	has	
28-23	4028-4029	a	
28-24	4030-4035	limit	
28-25	4036-4038	of	
28-26	4039-4043	4096	
28-27	4044-4051	columns	
28-28	4052-4055	per	
28-29	4056-4061	table	
28-30	4061-4062	.	

#Text=Use fewer columns for better performance.
29-1	4063-4066	Use	
29-2	4067-4072	fewer	
29-3	4073-4080	columns	
29-4	4081-4084	for	
29-5	4085-4091	better	
29-6	4092-4103	performance	
29-7	4103-4104	.	

#Text=If possible, do not use more than a hundred columns unless your business logic requires that.
30-1	4105-4107	If	
30-2	4108-4116	possible	
30-3	4116-4117	,	
30-4	4118-4120	do	
30-5	4121-4124	not	
30-6	4125-4128	use	
30-7	4129-4133	more	
30-8	4134-4138	than	
30-9	4139-4140	a	
30-10	4141-4148	hundred	
30-11	4149-4156	columns	
30-12	4157-4163	unless	
30-13	4164-4168	your	
30-14	4169-4177	business	
30-15	4178-4183	logic	
30-16	4184-4192	requires	
30-17	4193-4197	that	
30-18	4197-4198	.	

#Text=Tables with more columns require more CPU time to process.
31-1	4199-4205	Tables	
31-2	4206-4210	with	
31-3	4211-4215	more	
31-4	4216-4223	columns	
31-5	4224-4231	require	
31-6	4232-4236	more	
31-7	4237-4240	CPU	
31-8	4241-4245	time	
31-9	4246-4248	to	
31-10	4249-4256	process	
31-11	4256-4257	.	

#Text=Normalize Tables: Normalizing keeps all data non-redundant.
32-1	4258-4267	Normalize	
32-2	4268-4274	Tables	
32-3	4274-4275	:	
32-4	4276-4287	Normalizing	
32-5	4288-4293	keeps	
32-6	4294-4297	all	
32-7	4298-4302	data	
32-8	4303-4316	non-redundant	
32-9	4316-4317	.	

#Text=The database that is in this state is called 3NF (third normal form).
33-1	4318-4321	The	
33-2	4322-4330	database	
33-3	4331-4335	that	
33-4	4336-4338	is	
33-5	4339-4341	in	
33-6	4342-4346	this	
33-7	4347-4352	state	
33-8	4353-4355	is	
33-9	4356-4362	called	
33-10	4363-4366	3NF	
33-11	4367-4368	(	
33-12	4368-4373	third	
33-13	4374-4380	normal	
33-14	4381-4385	form	
33-15	4385-4386	)	
33-16	4386-4387	.	

#Text=The 3NF ensures that lengthy values such as names, addresses, categories, and contact details are not repeated.
34-1	4388-4391	The	
34-2	4392-4395	3NF	
34-3	4396-4403	ensures	
34-4	4404-4408	that	
34-5	4409-4416	lengthy	
34-6	4417-4423	values	
34-7	4424-4428	such	
34-8	4429-4431	as	
34-9	4432-4437	names	
34-10	4437-4438	,	
34-11	4439-4448	addresses	
34-12	4448-4449	,	
34-13	4450-4460	categories	
34-14	4460-4461	,	
34-15	4462-4465	and	
34-16	4466-4473	contact	
34-17	4474-4481	details	
34-18	4482-4485	are	
34-19	4486-4489	not	
34-20	4490-4498	repeated	
34-21	4498-4499	.	

#Text=Instead, they are represented as IDs across multiple smaller tables.
35-1	4500-4507	Instead	
35-2	4507-4508	,	
35-3	4509-4513	they	
35-4	4514-4517	are	
35-5	4518-4529	represented	
35-6	4530-4532	as	
35-7	4533-4536	IDs	
35-8	4537-4543	across	
35-9	4544-4552	multiple	
35-10	4553-4560	smaller	
35-11	4561-4567	tables	
35-12	4567-4568	.	

#Text=For more details on database normalization, refer here.
36-1	4569-4572	For	
36-2	4573-4577	more	
36-3	4578-4585	details	
36-4	4586-4588	on	
36-5	4589-4597	database	
36-6	4598-4611	normalization	
36-7	4611-4612	,	
36-8	4613-4618	refer	
36-9	4619-4623	here	
36-10	4623-4624	.	

#Text=Use the Most Appropriate Data Types: There are more than 20 different data types in MySQL designed for different uses.
37-1	4625-4628	Use	
37-2	4629-4632	the	
37-3	4633-4637	Most	
37-4	4638-4649	Appropriate	
37-5	4650-4654	Data	
37-6	4655-4660	Types	
37-7	4660-4661	:	
37-8	4662-4667	There	
37-9	4668-4671	are	
37-10	4672-4676	more	
37-11	4677-4681	than	
37-12	4682-4684	20	
37-13	4685-4694	different	
37-14	4695-4699	data	
37-15	4700-4705	types	
37-16	4706-4708	in	
37-17	4709-4714	MySQL	
37-18	4715-4723	designed	
37-19	4724-4727	for	
37-20	4728-4737	different	
37-21	4738-4742	uses	
37-22	4742-4743	.	

#Text=Some of the data types include Timestamp, DateTime, Integer, ENUM, Float, Double, Char, LongText, and Text.
38-1	4744-4748	Some	
38-2	4749-4751	of	
38-3	4752-4755	the	
38-4	4756-4760	data	
38-5	4761-4766	types	
38-6	4767-4774	include	
38-7	4775-4784	Timestamp	
38-8	4784-4785	,	
38-9	4786-4794	DateTime	
38-10	4794-4795	,	
38-11	4796-4803	Integer	
38-12	4803-4804	,	
38-13	4805-4809	ENUM	
38-14	4809-4810	,	
38-15	4811-4816	Float	
38-16	4816-4817	,	
38-17	4818-4824	Double	
38-18	4824-4825	,	
38-19	4826-4830	Char	
38-20	4830-4831	,	
38-21	4832-4840	LongText	
38-22	4840-4841	,	
38-23	4842-4845	and	
38-24	4846-4850	Text	
38-25	4850-4851	.	

#Text=Tables should be designed to minimize space used on a disk.
39-1	4852-4858	Tables	
39-2	4859-4865	should	
39-3	4866-4868	be	
39-4	4869-4877	designed	
39-5	4878-4880	to	
39-6	4881-4889	minimize	
39-7	4890-4895	space	
39-8	4896-4900	used	
39-9	4901-4903	on	
39-10	4904-4905	a	
39-11	4906-4910	disk	
39-12	4910-4911	.	

#Text=Tables that occupy less disk space results in smaller indexes that can be processed in a shorter duration.
40-1	4912-4918	Tables	
40-2	4919-4923	that	
40-3	4924-4930	occupy	
40-4	4931-4935	less	
40-5	4936-4940	disk	
40-6	4941-4946	space	
40-7	4947-4954	results	
40-8	4955-4957	in	
40-9	4958-4965	smaller	
40-10	4966-4973	indexes	
40-11	4974-4978	that	
40-12	4979-4982	can	
40-13	4983-4985	be	
40-14	4986-4995	processed	
40-15	4996-4998	in	
40-16	4999-5000	a	
40-17	5001-5008	shorter	
40-18	5009-5017	duration	
40-19	5017-5018	.	

#Text=For example, if a table will host less than 100 records, you should use the TINYINT data type for the unique ID as it takes less space than INT.
41-1	5019-5022	For	
41-2	5023-5030	example	
41-3	5030-5031	,	
41-4	5032-5034	if	
41-5	5035-5036	a	
41-6	5037-5042	table	
41-7	5043-5047	will	
41-8	5048-5052	host	
41-9	5053-5057	less	
41-10	5058-5062	than	
41-11	5063-5066	100	
41-12	5067-5074	records	
41-13	5074-5075	,	
41-14	5076-5079	you	
41-15	5080-5086	should	
41-16	5087-5090	use	
41-17	5091-5094	the	
41-18	5095-5102	TINYINT	
41-19	5103-5107	data	
41-20	5108-5112	type	
41-21	5113-5116	for	
41-22	5117-5120	the	
41-23	5121-5127	unique	
41-24	5128-5130	ID	
41-25	5131-5133	as	
41-26	5134-5136	it	
41-27	5137-5142	takes	
41-28	5143-5147	less	
41-29	5148-5153	space	
41-30	5154-5158	than	
41-31	5159-5162	INT	
41-32	5162-5163	.	

#Text=Avoid Null Values.
42-1	5164-5169	Avoid	
42-2	5170-5174	Null	
42-3	5175-5181	Values	
42-4	5181-5182	.	

#Text=Declare columns to be NOT NULL where possible.
43-1	5183-5190	Declare	
43-2	5191-5198	columns	
43-3	5199-5201	to	
43-4	5202-5204	be	
43-5	5205-5208	NOT	
43-6	5209-5213	NULL	
43-7	5214-5219	where	
43-8	5220-5228	possible	
43-9	5228-5229	.	

#Text=This enables better use of indexes.
44-1	5230-5234	This	
44-2	5235-5242	enables	
44-3	5243-5249	better	
44-4	5250-5253	use	
44-5	5254-5256	of	
44-6	5257-5264	indexes	
44-7	5264-5265	.	

#Text=NULL values increase the processing power needed for testing whether each value is NULL, making SQL operations slower.
45-1	5266-5270	NULL	
45-2	5271-5277	values	
45-3	5278-5286	increase	
45-4	5287-5290	the	
45-5	5291-5301	processing	
45-6	5302-5307	power	
45-7	5308-5314	needed	
45-8	5315-5318	for	
45-9	5319-5326	testing	
45-10	5327-5334	whether	
45-11	5335-5339	each	
45-12	5340-5345	value	
45-13	5346-5348	is	
45-14	5349-5353	NULL	
45-15	5353-5354	,	
45-16	5355-5361	making	
45-17	5362-5365	SQL	
45-18	5366-5376	operations	
45-19	5377-5383	slower	
45-20	5383-5384	.	

#Text=Use Indexes
#Text=Think of records as content in a book.
46-1	5385-5388	Use	
46-2	5389-5396	Indexes	
46-3	5397-5402	Think	
46-4	5403-5405	of	
46-5	5406-5413	records	
46-6	5414-5416	as	
46-7	5417-5424	content	
46-8	5425-5427	in	
46-9	5428-5429	a	
46-10	5430-5434	book	
46-11	5434-5435	.	

#Text=If you want to learn on a particular subtopic, you would go to the index pages, look for the subtopic you want, then get the page where the subtopic is.
47-1	5436-5438	If	
47-2	5439-5442	you	
47-3	5443-5447	want	
47-4	5448-5450	to	
47-5	5451-5456	learn	
47-6	5457-5459	on	
47-7	5460-5461	a	
47-8	5462-5472	particular	
47-9	5473-5481	subtopic	
47-10	5481-5482	,	
47-11	5483-5486	you	
47-12	5487-5492	would	
47-13	5493-5495	go	
47-14	5496-5498	to	
47-15	5499-5502	the	
47-16	5503-5508	index	
47-17	5509-5514	pages	
47-18	5514-5515	,	
47-19	5516-5520	look	
47-20	5521-5524	for	
47-21	5525-5528	the	
47-22	5529-5537	subtopic	
47-23	5538-5541	you	
47-24	5542-5546	want	
47-25	5546-5547	,	
47-26	5548-5552	then	
47-27	5553-5556	get	
47-28	5557-5560	the	
47-29	5561-5565	page	
47-30	5566-5571	where	
47-31	5572-5575	the	
47-32	5576-5584	subtopic	
47-33	5585-5587	is	
47-34	5587-5588	.	

#Text=Indexes work the same way.
48-1	5589-5596	Indexes	
48-2	5597-5601	work	
48-3	5602-5605	the	
48-4	5606-5610	same	
48-5	5611-5614	way	
48-6	5614-5615	.	

#Text=They are used to find rows with specific column values much faster.
49-1	5616-5620	They	
49-2	5621-5624	are	
49-3	5625-5629	used	
49-4	5630-5632	to	
49-5	5633-5637	find	
49-6	5638-5642	rows	
49-7	5643-5647	with	
49-8	5648-5656	specific	
49-9	5657-5663	column	
49-10	5664-5670	values	
49-11	5671-5675	much	
49-12	5676-5682	faster	
49-13	5682-5683	.	

#Text=Without using an index, MySQL must begin searching in the first row and go through the whole table to find the required records.
50-1	5684-5691	Without	
50-2	5692-5697	using	
50-3	5698-5700	an	
50-4	5701-5706	index	
50-5	5706-5707	,	
50-6	5708-5713	MySQL	
50-7	5714-5718	must	
50-8	5719-5724	begin	
50-9	5725-5734	searching	
50-10	5735-5737	in	
50-11	5738-5741	the	
50-12	5742-5747	first	
50-13	5748-5751	row	
50-14	5752-5755	and	
50-15	5756-5758	go	
50-16	5759-5766	through	
50-17	5767-5770	the	
50-18	5771-5776	whole	
50-19	5777-5782	table	
50-20	5783-5785	to	
50-21	5786-5790	find	
50-22	5791-5794	the	
50-23	5795-5803	required	
50-24	5804-5811	records	
50-25	5811-5812	.	

#Text=Tables with a huge amount of data are more costly to query.
51-1	5813-5819	Tables	
51-2	5820-5824	with	
51-3	5825-5826	a	
51-4	5827-5831	huge	
51-5	5832-5838	amount	
51-6	5839-5841	of	
51-7	5842-5846	data	
51-8	5847-5850	are	
51-9	5851-5855	more	
51-10	5856-5862	costly	
51-11	5863-5865	to	
51-12	5866-5871	query	
51-13	5871-5872	.	

#Text=With the use of an index, MySQL can faster determine the position to seek in the middle of the data file.
52-1	5873-5877	With	
52-2	5878-5881	the	
52-3	5882-5885	use	
52-4	5886-5888	of	
52-5	5889-5891	an	
52-6	5892-5897	index	
52-7	5897-5898	,	
52-8	5899-5904	MySQL	
52-9	5905-5908	can	
52-10	5909-5915	faster	
52-11	5916-5925	determine	
52-12	5926-5929	the	
52-13	5930-5938	position	
52-14	5939-5941	to	
52-15	5942-5946	seek	
52-16	5947-5949	in	
52-17	5950-5953	the	
52-18	5954-5960	middle	
52-19	5961-5963	of	
52-20	5964-5967	the	
52-21	5968-5972	data	
52-22	5973-5977	file	
52-23	5977-5978	.	

#Text=This is done without going through all the rows and is much faster than reading every row sequentially.
53-1	5979-5983	This	
53-2	5984-5986	is	
53-3	5987-5991	done	
53-4	5992-5999	without	
53-5	6000-6005	going	
53-6	6006-6013	through	
53-7	6014-6017	all	
53-8	6018-6021	the	
53-9	6022-6026	rows	
53-10	6027-6030	and	
53-11	6031-6033	is	
53-12	6034-6038	much	
53-13	6039-6045	faster	
53-14	6046-6050	than	
53-15	6051-6058	reading	
53-16	6059-6064	every	
53-17	6065-6068	row	
53-18	6069-6081	sequentially	
53-19	6081-6082	.	

#Text=Refer to the MySQL developer guide for more information on indexes.
54-1	6083-6088	Refer	
54-2	6089-6091	to	
54-3	6092-6095	the	
54-4	6096-6101	MySQL	
54-5	6102-6111	developer	
54-6	6112-6117	guide	
54-7	6118-6121	for	
54-8	6122-6126	more	
54-9	6127-6138	information	
54-10	6139-6141	on	
54-11	6142-6149	indexes	
54-12	6149-6150	.	

#Text=You can create a single-column or multiple column indexes, as shown below, respectively.
55-1	6151-6154	You	
55-2	6155-6158	can	
55-3	6159-6165	create	
55-4	6166-6167	a	
55-5	6168-6181	single-column	
55-6	6182-6184	or	
55-7	6185-6193	multiple	
55-8	6194-6200	column	
55-9	6201-6208	indexes	
55-10	6208-6209	,	
55-11	6210-6212	as	
55-12	6213-6218	shown	
55-13	6219-6224	below	
55-14	6224-6225	,	
55-15	6226-6238	respectively	
55-16	6238-6239	.	

#Text=CREATE INDEX tablename_columnname_idx ON tablename (columnname);
#Text=CREATE INDEX tablename_column1name_column2name_idx ON tablename (column1name, column2name);
#Text=Use Wildcards at the End of a Phrase
#Text=In MySQL, wildcards are used in conjunction with the LIKE operator and NOT LIKE operator.
56-1	6240-6246	CREATE	
56-2	6247-6252	INDEX	
56-3	6253-6277	tablename_columnname_idx	
56-4	6278-6280	ON	
56-5	6281-6290	tablename	
56-6	6291-6292	(	
56-7	6292-6302	columnname	
56-8	6302-6303	)	
56-9	6303-6304	;	
56-10	6305-6311	CREATE	
56-11	6312-6317	INDEX	
56-12	6318-6355	tablename_column1name_column2name_idx	
56-13	6356-6358	ON	
56-14	6359-6368	tablename	
56-15	6369-6370	(	
56-16	6370-6381	column1name	
56-17	6381-6382	,	
56-18	6383-6394	column2name	
56-19	6394-6395	)	
56-20	6395-6396	;	
56-21	6397-6400	Use	
56-22	6401-6410	Wildcards	
56-23	6411-6413	at	
56-24	6414-6417	the	
56-25	6418-6421	End	
56-26	6422-6424	of	
56-27	6425-6426	a	
56-28	6427-6433	Phrase	
56-29	6434-6436	In	
56-30	6437-6442	MySQL	
56-31	6442-6443	,	
56-32	6444-6453	wildcards	
56-33	6454-6457	are	
56-34	6458-6462	used	
56-35	6463-6465	in	
56-36	6466-6477	conjunction	
56-37	6478-6482	with	
56-38	6483-6486	the	
56-39	6487-6491	LIKE	
56-40	6492-6500	operator	
56-41	6501-6504	and	
56-42	6505-6508	NOT	
56-43	6509-6513	LIKE	
56-44	6514-6522	operator	
56-45	6522-6523	.	

#Text=They are used to search for data matching some search criteria.
57-1	6524-6528	They	
57-2	6529-6532	are	
57-3	6533-6537	used	
57-4	6538-6540	to	
57-5	6541-6547	search	
57-6	6548-6551	for	
57-7	6552-6556	data	
57-8	6557-6565	matching	
57-9	6566-6570	some	
57-10	6571-6577	search	
57-11	6578-6586	criteria	
57-12	6586-6587	.	

#Text=You can learn more about wildcards here.
58-1	6588-6591	You	
58-2	6592-6595	can	
58-3	6596-6601	learn	
58-4	6602-6606	more	
58-5	6607-6612	about	
58-6	6613-6622	wildcards	
58-7	6623-6627	here	
58-8	6627-6628	.	

#Text=Wildcards result in the most expansive scan when searching for data, which is very inefficient.
59-1	6629-6638	Wildcards	
59-2	6639-6645	result	
59-3	6646-6648	in	
59-4	6649-6652	the	
59-5	6653-6657	most	
59-6	6658-6667	expansive	
59-7	6668-6672	scan	
59-8	6673-6677	when	
59-9	6678-6687	searching	
59-10	6688-6691	for	
59-11	6692-6696	data	
59-12	6696-6697	,	
59-13	6698-6703	which	
59-14	6704-6706	is	
59-15	6707-6711	very	
59-16	6712-6723	inefficient	
59-17	6723-6724	.	

#Text=Leading wildcards are the most inefficient, especially when combined with ending wild cards.
60-1	6725-6732	Leading	
60-2	6733-6742	wildcards	
60-3	6743-6746	are	
60-4	6747-6750	the	
60-5	6751-6755	most	
60-6	6756-6767	inefficient	
60-7	6767-6768	,	
60-8	6769-6779	especially	
60-9	6780-6784	when	
60-10	6785-6793	combined	
60-11	6794-6798	with	
60-12	6799-6805	ending	
60-13	6806-6810	wild	
60-14	6811-6816	cards	
60-15	6816-6817	.	

#Text=In such a case, MySQL has to search all the records for a match.
61-1	6818-6820	In	
61-2	6821-6825	such	
61-3	6826-6827	a	
61-4	6828-6832	case	
61-5	6832-6833	,	
61-6	6834-6839	MySQL	
61-7	6840-6843	has	
61-8	6844-6846	to	
61-9	6847-6853	search	
61-10	6854-6857	all	
61-11	6858-6861	the	
61-12	6862-6869	records	
61-13	6870-6873	for	
61-14	6874-6875	a	
61-15	6876-6881	match	
61-16	6881-6882	.	

#Text=Thus you should avoid leading wild cards.
62-1	6883-6887	Thus	
62-2	6888-6891	you	
62-3	6892-6898	should	
62-4	6899-6904	avoid	
62-5	6905-6912	leading	
62-6	6913-6917	wild	
62-7	6918-6923	cards	
62-8	6923-6924	.	

#Text=See the queries below, one is using a leading wildcard and another one is using an ending wildcard.
63-1	6925-6928	See	
63-2	6929-6932	the	
63-3	6933-6940	queries	
63-4	6941-6946	below	
63-5	6946-6947	,	
63-6	6948-6951	one	
63-7	6952-6954	is	
63-8	6955-6960	using	
63-9	6961-6962	a	
63-10	6963-6970	leading	
63-11	6971-6979	wildcard	
63-12	6980-6983	and	
63-13	6984-6991	another	
63-14	6992-6995	one	
63-15	6996-6998	is	
63-16	6999-7004	using	
63-17	7005-7007	an	
63-18	7008-7014	ending	
63-19	7015-7023	wildcard	
63-20	7023-7024	.	

#Text=SELECT * FROM city WHERE name LIKE '%Al%';
#Text=SELECT * FROM city WHERE name LIKE 'Al%';
#Text=Specify Columns in SELECT Function
#Text=SELECT * (select all) is used as a shortcut to query all columns available in a table.
64-1	7025-7031	SELECT	
64-2	7032-7033	*	
64-3	7034-7038	FROM	
64-4	7039-7043	city	
64-5	7044-7049	WHERE	
64-6	7050-7054	name	
64-7	7055-7059	LIKE	
64-8	7060-7061	'	
64-9	7061-7062	%	
64-10	7062-7064	Al	
64-11	7064-7065	%	
64-12	7065-7066	'	
64-13	7066-7067	;	
64-14	7068-7074	SELECT	
64-15	7075-7076	*	
64-16	7077-7081	FROM	
64-17	7082-7086	city	
64-18	7087-7092	WHERE	
64-19	7093-7097	name	
64-20	7098-7102	LIKE	
64-21	7103-7104	'	
64-22	7104-7106	Al	
64-23	7106-7107	%	
64-24	7107-7108	'	
64-25	7108-7109	;	
64-26	7110-7117	Specify	
64-27	7118-7125	Columns	
64-28	7126-7128	in	
64-29	7129-7135	SELECT	
64-30	7136-7144	Function	
64-31	7145-7151	SELECT	
64-32	7152-7153	*	
64-33	7154-7155	(	
64-34	7155-7161	select	
64-35	7162-7165	all	
64-36	7165-7166	)	
64-37	7167-7169	is	
64-38	7170-7174	used	
64-39	7175-7177	as	
64-40	7178-7179	a	
64-41	7180-7188	shortcut	
64-42	7189-7191	to	
64-43	7192-7197	query	
64-44	7198-7201	all	
64-45	7202-7209	columns	
64-46	7210-7219	available	
64-47	7220-7222	in	
64-48	7223-7224	a	
64-49	7225-7230	table	
64-50	7230-7231	.	

#Text=This requires more resources than using a SELECT statement with only the columns you need for that specific query.
65-1	7232-7236	This	
65-2	7237-7245	requires	
65-3	7246-7250	more	
65-4	7251-7260	resources	
65-5	7261-7265	than	
65-6	7266-7271	using	
65-7	7272-7273	a	
65-8	7274-7280	SELECT	
65-9	7281-7290	statement	
65-10	7291-7295	with	
65-11	7296-7300	only	
65-12	7301-7304	the	
65-13	7305-7312	columns	
65-14	7313-7316	you	
65-15	7317-7321	need	
65-16	7322-7325	for	
65-17	7326-7330	that	
65-18	7331-7339	specific	
65-19	7340-7345	query	
65-20	7345-7346	.	

#Text=For example, a customer table with 20 different columns and a hundred thousand entries.
66-1	7347-7350	For	
66-2	7351-7358	example	
66-3	7358-7359	,	
66-4	7360-7361	a	
66-5	7362-7370	customer	
66-6	7371-7376	table	
66-7	7377-7381	with	
66-8	7382-7384	20	
66-9	7385-7394	different	
66-10	7395-7402	columns	
66-11	7403-7406	and	
66-12	7407-7408	a	
66-13	7409-7416	hundred	
66-14	7417-7425	thousand	
66-15	7426-7433	entries	
66-16	7433-7434	.	

#Text=If you want to select a city with ID and Name only; try to use
#Text=SELECT ID, Name, District FROM city;
#Text=instead of
#Text=SELECT * FROM city;
#Text=The second example will take more time to run to completion.
67-1	7435-7437	If	
67-2	7438-7441	you	
67-3	7442-7446	want	
67-4	7447-7449	to	
67-5	7450-7456	select	
67-6	7457-7458	a	
67-7	7459-7463	city	
67-8	7464-7468	with	
67-9	7469-7471	ID	
67-10	7472-7475	and	
67-11	7476-7480	Name	
67-12	7481-7485	only	
67-13	7485-7486	;	
67-14	7487-7490	try	
67-15	7491-7493	to	
67-16	7494-7497	use	
67-17	7498-7504	SELECT	
67-18	7505-7507	ID	
67-19	7507-7508	,	
67-20	7509-7513	Name	
67-21	7513-7514	,	
67-22	7515-7523	District	
67-23	7524-7528	FROM	
67-24	7529-7533	city	
67-25	7533-7534	;	
67-26	7535-7542	instead	
67-27	7543-7545	of	
67-28	7546-7552	SELECT	
67-29	7553-7554	*	
67-30	7555-7559	FROM	
67-31	7560-7564	city	
67-32	7564-7565	;	
67-33	7566-7569	The	
67-34	7570-7576	second	
67-35	7577-7584	example	
67-36	7585-7589	will	
67-37	7590-7594	take	
67-38	7595-7599	more	
67-39	7600-7604	time	
67-40	7605-7607	to	
67-41	7608-7611	run	
67-42	7612-7614	to	
67-43	7615-7625	completion	
67-44	7625-7626	.	

#Text=Avoid SELECT DISTINCT
#Text=DISTINCT is used to remove duplicate rows with SELECT statements.
68-1	7627-7632	Avoid	
68-2	7633-7639	SELECT	
68-3	7640-7648	DISTINCT	
68-4	7649-7657	DISTINCT	
68-5	7658-7660	is	
68-6	7661-7665	used	
68-7	7666-7668	to	
68-8	7669-7675	remove	
68-9	7676-7685	duplicate	
68-10	7686-7690	rows	
68-11	7691-7695	with	
68-12	7696-7702	SELECT	
68-13	7703-7713	statements	
68-14	7713-7714	.	

#Text=The DISTINCT command requires more sorting and reading of the database, which requires more processing power.
69-1	7715-7718	The	
69-2	7719-7727	DISTINCT	
69-3	7728-7735	command	
69-4	7736-7744	requires	
69-5	7745-7749	more	
69-6	7750-7757	sorting	
69-7	7758-7761	and	
69-8	7762-7769	reading	
69-9	7770-7772	of	
69-10	7773-7776	the	
69-11	7777-7785	database	
69-12	7785-7786	,	
69-13	7787-7792	which	
69-14	7793-7801	requires	
69-15	7802-7806	more	
69-16	7807-7817	processing	
69-17	7818-7823	power	
69-18	7823-7824	.	

#Text=DISTINCT can be replaced with GROUP BY to get the same results.
70-1	7825-7833	DISTINCT	
70-2	7834-7837	can	
70-3	7838-7840	be	
70-4	7841-7849	replaced	
70-5	7850-7854	with	
70-6	7855-7860	GROUP	
70-7	7861-7863	BY	
70-8	7864-7866	to	
70-9	7867-7870	get	
70-10	7871-7874	the	
70-11	7875-7879	same	
70-12	7880-7887	results	
70-13	7887-7888	.	

#Text=See the two queries below.
71-1	7889-7892	See	
71-2	7893-7896	the	
71-3	7897-7900	two	
71-4	7901-7908	queries	
71-5	7909-7914	below	
71-6	7914-7915	.	

#Text=SELECT col1, col2 FROM table GROUP BY col1, col2;
#Text=SELECT DISTINCT col1, col2 FROM table;
#Text=Use LIMIT
#Text=Sometimes we need a specified number of rows from a result set.
72-1	7916-7922	SELECT	
72-2	7923-7927	col1	
72-3	7927-7928	,	
72-4	7929-7933	col2	
72-5	7934-7938	FROM	
72-6	7939-7944	table	
72-7	7945-7950	GROUP	
72-8	7951-7953	BY	
72-9	7954-7958	col1	
72-10	7958-7959	,	
72-11	7960-7964	col2	
72-12	7964-7965	;	
72-13	7966-7972	SELECT	
72-14	7973-7981	DISTINCT	
72-15	7982-7986	col1	
72-16	7986-7987	,	
72-17	7988-7992	col2	
72-18	7993-7997	FROM	
72-19	7998-8003	table	
72-20	8003-8004	;	
72-21	8005-8008	Use	
72-22	8009-8014	LIMIT	
72-23	8015-8024	Sometimes	
72-24	8025-8027	we	
72-25	8028-8032	need	
72-26	8033-8034	a	
72-27	8035-8044	specified	
72-28	8045-8051	number	
72-29	8052-8054	of	
72-30	8055-8059	rows	
72-31	8060-8064	from	
72-32	8065-8066	a	
72-33	8067-8073	result	
72-34	8074-8077	set	
72-35	8077-8078	.	

#Text=The LIMIT clause is used in the query to specify the number of rows instead of fetching the whole result set.
73-1	8079-8082	The	
73-2	8083-8088	LIMIT	
73-3	8089-8095	clause	
73-4	8096-8098	is	
73-5	8099-8103	used	
73-6	8104-8106	in	
73-7	8107-8110	the	
73-8	8111-8116	query	
73-9	8117-8119	to	
73-10	8120-8127	specify	
73-11	8128-8131	the	
73-12	8132-8138	number	
73-13	8139-8141	of	
73-14	8142-8146	rows	
73-15	8147-8154	instead	
73-16	8155-8157	of	
73-17	8158-8166	fetching	
73-18	8167-8170	the	
73-19	8171-8176	whole	
73-20	8177-8183	result	
73-21	8184-8187	set	
73-22	8187-8188	.	

#Text=Fetching the entire result set requires more resources compared to fetching a specified number of rows.
74-1	8189-8197	Fetching	
74-2	8198-8201	the	
74-3	8202-8208	entire	
74-4	8209-8215	result	
74-5	8216-8219	set	
74-6	8220-8228	requires	
74-7	8229-8233	more	
74-8	8234-8243	resources	
74-9	8244-8252	compared	
74-10	8253-8255	to	
74-11	8256-8264	fetching	
74-12	8265-8266	a	
74-13	8267-8276	specified	
74-14	8277-8283	number	
74-15	8284-8286	of	
74-16	8287-8291	rows	
74-17	8291-8292	.	

#Text=See the queries below, one without LIMIT, another one with the LIMIT clause.
75-1	8293-8296	See	
75-2	8297-8300	the	
75-3	8301-8308	queries	
75-4	8309-8314	below	
75-5	8314-8315	,	
75-6	8316-8319	one	
75-7	8320-8327	without	
75-8	8328-8333	LIMIT	
75-9	8333-8334	,	
75-10	8335-8342	another	
75-11	8343-8346	one	
75-12	8347-8351	with	
75-13	8352-8355	the	
75-14	8356-8361	LIMIT	
75-15	8362-8368	clause	
75-16	8368-8369	.	

#Text=SELECT ID, Name, District FROM city;
#Text=SELECT ID, Name, District FROM city LIMIT 10;
#Text=MySQL Query Caching
#Text=MySQL Query Caching provides database caching functionality.
76-1	8370-8376	SELECT	
76-2	8377-8379	ID	
76-3	8379-8380	,	
76-4	8381-8385	Name	
76-5	8385-8386	,	
76-6	8387-8395	District	
76-7	8396-8400	FROM	
76-8	8401-8405	city	
76-9	8405-8406	;	
76-10	8407-8413	SELECT	
76-11	8414-8416	ID	
76-12	8416-8417	,	
76-13	8418-8422	Name	
76-14	8422-8423	,	
76-15	8424-8432	District	
76-16	8433-8437	FROM	
76-17	8438-8442	city	
76-18	8443-8448	LIMIT	
76-19	8449-8451	10	
76-20	8451-8452	;	
76-21	8453-8458	MySQL	
76-22	8459-8464	Query	
76-23	8465-8472	Caching	
76-24	8473-8478	MySQL	
76-25	8479-8484	Query	
76-26	8485-8492	Caching	
76-27	8493-8501	provides	
76-28	8502-8510	database	
76-29	8511-8518	caching	
76-30	8519-8532	functionality	
76-31	8532-8533	.	

#Text=The SELECT statement text and the retrieved result are stored in the cache.
77-1	8534-8537	The	
77-2	8538-8544	SELECT	
77-3	8545-8554	statement	
77-4	8555-8559	text	
77-5	8560-8563	and	
77-6	8564-8567	the	
77-7	8568-8577	retrieved	
77-8	8578-8584	result	
77-9	8585-8588	are	
77-10	8589-8595	stored	
77-11	8596-8598	in	
77-12	8599-8602	the	
77-13	8603-8608	cache	
77-14	8608-8609	.	

#Text=When you make a similar query to the one already in the cache, MySQL will respond and give a query already in the cache.
78-1	8610-8614	When	
78-2	8615-8618	you	
78-3	8619-8623	make	
78-4	8624-8625	a	
78-5	8626-8633	similar	
78-6	8634-8639	query	
78-7	8640-8642	to	
78-8	8643-8646	the	
78-9	8647-8650	one	
78-10	8651-8658	already	
78-11	8659-8661	in	
78-12	8662-8665	the	
78-13	8666-8671	cache	
78-14	8671-8672	,	
78-15	8673-8678	MySQL	
78-16	8679-8683	will	
78-17	8684-8691	respond	
78-18	8692-8695	and	
78-19	8696-8700	give	
78-20	8701-8702	a	
78-21	8703-8708	query	
78-22	8709-8716	already	
78-23	8717-8719	in	
78-24	8720-8723	the	
78-25	8724-8729	cache	
78-26	8729-8730	.	

#Text=In this way, fewer resources are used, and your query runs faster.
79-1	8731-8733	In	
79-2	8734-8738	this	
79-3	8739-8742	way	
79-4	8742-8743	,	
79-5	8744-8749	fewer	
79-6	8750-8759	resources	
79-7	8760-8763	are	
79-8	8764-8768	used	
79-9	8768-8769	,	
79-10	8770-8773	and	
79-11	8774-8778	your	
79-12	8779-8784	query	
79-13	8785-8789	runs	
79-14	8790-8796	faster	
79-15	8796-8797	.	

#Text=This works best with a database where more select queries are made.
80-1	8798-8802	This	
80-2	8803-8808	works	
80-3	8809-8813	best	
80-4	8814-8818	with	
80-5	8819-8820	a	
80-6	8821-8829	database	
80-7	8830-8835	where	
80-8	8836-8840	more	
80-9	8841-8847	select	
80-10	8848-8855	queries	
80-11	8856-8859	are	
80-12	8860-8864	made	
80-13	8864-8865	.	

#Text=Once the table is updated, the cached query and result become invalid.
81-1	8866-8870	Once	
81-2	8871-8874	the	
81-3	8875-8880	table	
81-4	8881-8883	is	
81-5	8884-8891	updated	
81-6	8891-8892	,	
81-7	8893-8896	the	
81-8	8897-8903	cached	
81-9	8904-8909	query	
81-10	8910-8913	and	
81-11	8914-8920	result	
81-12	8921-8927	become	
81-13	8928-8935	invalid	
81-14	8935-8936	.	

#Text=Thus, caching may not work with an application that updates the table frequently.
82-1	8937-8941	Thus	
82-2	8941-8942	,	
82-3	8943-8950	caching	
82-4	8951-8954	may	
82-5	8955-8958	not	
82-6	8959-8963	work	
82-7	8964-8968	with	
82-8	8969-8971	an	
82-9	8972-8983	application	
82-10	8984-8988	that	
82-11	8989-8996	updates	
82-12	8997-9000	the	
82-13	9001-9006	table	
82-14	9007-9017	frequently	
82-15	9017-9018	.	

#Text=The command below is used to check if query cache is enabled in MySQL.
83-1	9019-9022	The	
83-2	9023-9030	command	
83-3	9031-9036	below	
83-4	9037-9039	is	
83-5	9040-9044	used	
83-6	9045-9047	to	
83-7	9048-9053	check	
83-8	9054-9056	if	
83-9	9057-9062	query	
83-10	9063-9068	cache	
83-11	9069-9071	is	
83-12	9072-9079	enabled	
83-13	9080-9082	in	
83-14	9083-9088	MySQL	
83-15	9088-9089	.	

#Text=SHOW VARIABLES LIKE 'have_query_cache';
#Text=If the query cache is not set, set the query cache by following guidelines on MySQL Documentation.
84-1	9090-9094	SHOW	
84-2	9095-9104	VARIABLES	
84-3	9105-9109	LIKE	
84-4	9110-9111	'	
84-5	9111-9127	have_query_cache	
84-6	9127-9128	'	
84-7	9128-9129	;	
84-8	9130-9132	If	
84-9	9133-9136	the	
84-10	9137-9142	query	
84-11	9143-9148	cache	
84-12	9149-9151	is	
84-13	9152-9155	not	
84-14	9156-9159	set	
84-15	9159-9160	,	
84-16	9161-9164	set	
84-17	9165-9168	the	
84-18	9169-9174	query	
84-19	9175-9180	cache	
84-20	9181-9183	by	
84-21	9184-9193	following	
84-22	9194-9204	guidelines	
84-23	9205-9207	on	
84-24	9208-9213	MySQL	
84-25	9214-9227	Documentation	
84-26	9227-9228	.	

#Text=Converting OUTER JOINs to INNER JOINs
#Text=An INNER JOIN returns rows that contain columns from both tables.
85-1	9229-9239	Converting	
85-2	9240-9245	OUTER	
85-3	9246-9251	JOINs	
85-4	9252-9254	to	
85-5	9255-9260	INNER	
85-6	9261-9266	JOINs	
85-7	9267-9269	An	
85-8	9270-9275	INNER	
85-9	9276-9280	JOIN	
85-10	9281-9288	returns	
85-11	9289-9293	rows	
85-12	9294-9298	that	
85-13	9299-9306	contain	
85-14	9307-9314	columns	
85-15	9315-9319	from	
85-16	9320-9324	both	
85-17	9325-9331	tables	
85-18	9331-9332	.	

#Text=Unlike INNER JOIN, OUTER JOIN returns rows where no matches have been found on both tables.
86-1	9333-9339	Unlike	
86-2	9340-9345	INNER	
86-3	9346-9350	JOIN	
86-4	9350-9351	,	
86-5	9352-9357	OUTER	
86-6	9358-9362	JOIN	
86-7	9363-9370	returns	
86-8	9371-9375	rows	
86-9	9376-9381	where	
86-10	9382-9384	no	
86-11	9385-9392	matches	
86-12	9393-9397	have	
86-13	9398-9402	been	
86-14	9403-9408	found	
86-15	9409-9411	on	
86-16	9412-9416	both	
86-17	9417-9423	tables	
86-18	9423-9424	.	

#Text=Therefore, OUTER JOIN does more work than INNER JOIN, increasing total execution time.
87-1	9425-9434	Therefore	
87-2	9434-9435	,	
87-3	9436-9441	OUTER	
87-4	9442-9446	JOIN	
87-5	9447-9451	does	
87-6	9452-9456	more	
87-7	9457-9461	work	
87-8	9462-9466	than	
87-9	9467-9472	INNER	
87-10	9473-9477	JOIN	
87-11	9477-9478	,	
87-12	9479-9489	increasing	
87-13	9490-9495	total	
87-14	9496-9505	execution	
87-15	9506-9510	time	
87-16	9510-9511	.	

#Text=Use INNER JOIN whenever possible.
88-1	9512-9515	Use	
88-2	9516-9521	INNER	
88-3	9522-9526	JOIN	
88-4	9527-9535	whenever	
88-5	9536-9544	possible	
88-6	9544-9545	.	

#Text=It would be a waste of performance to use OUTER JOIN when you don’t need the data outside specified columns.
89-1	9546-9548	It	
89-2	9549-9554	would	
89-3	9555-9557	be	
89-4	9558-9559	a	
89-5	9560-9565	waste	
89-6	9566-9568	of	
89-7	9569-9580	performance	
89-8	9581-9583	to	
89-9	9584-9587	use	
89-10	9588-9593	OUTER	
89-11	9594-9598	JOIN	
89-12	9599-9603	when	
89-13	9604-9607	you	
89-14	9608-9611	don	
89-15	9611-9612	’	
89-16	9612-9613	t	
89-17	9614-9618	need	
89-18	9619-9622	the	
89-19	9623-9627	data	
89-20	9628-9635	outside	
89-21	9636-9645	specified	
89-22	9646-9653	columns	
89-23	9653-9654	.	

#Text=We have a sample database with two tables as follows:
#Text=student - student_id, first_name, last_name
#Text=orders - id, date, amount, customer_id
#Text=An INNER JOIN query to the table would be as it is shown below.
90-1	9655-9657	We	
90-2	9658-9662	have	
90-3	9663-9664	a	
90-4	9665-9671	sample	
90-5	9672-9680	database	
90-6	9681-9685	with	
90-7	9686-9689	two	
90-8	9690-9696	tables	
90-9	9697-9699	as	
90-10	9700-9707	follows	
90-11	9707-9708	:	
90-12	9709-9716	student	
90-13	9717-9718	-	
90-14	9719-9729	student_id	
90-15	9729-9730	,	
90-16	9731-9741	first_name	
90-17	9741-9742	,	
90-18	9743-9752	last_name	
90-19	9753-9759	orders	
90-20	9760-9761	-	
90-21	9762-9764	id	
90-22	9764-9765	,	
90-23	9766-9770	date	
90-24	9770-9771	,	
90-25	9772-9778	amount	
90-26	9778-9779	,	
90-27	9780-9791	customer_id	
90-28	9792-9794	An	
90-29	9795-9800	INNER	
90-30	9801-9805	JOIN	
90-31	9806-9811	query	
90-32	9812-9814	to	
90-33	9815-9818	the	
90-34	9819-9824	table	
90-35	9825-9830	would	
90-36	9831-9833	be	
90-37	9834-9836	as	
90-38	9837-9839	it	
90-39	9840-9842	is	
90-40	9843-9848	shown	
90-41	9849-9854	below	
90-42	9854-9855	.	

#Text=SELECT
#Text=C.id, C.name, O.amount, O.date FROM customers C
#Text=INNER JOIN orders O ON O.customer_id = C.id;
#Text=An OUTER JOIN query to the table would be as it is shown below.
91-1	9856-9862	SELECT	
91-2	9863-9867	C.id	
91-3	9867-9868	,	
91-4	9869-9875	C.name	
91-5	9875-9876	,	
91-6	9877-9885	O.amount	
91-7	9885-9886	,	
91-8	9887-9893	O.date	
91-9	9894-9898	FROM	
91-10	9899-9908	customers	
91-11	9909-9910	C	
91-12	9911-9916	INNER	
91-13	9917-9921	JOIN	
91-14	9922-9928	orders	
91-15	9929-9930	O	
91-16	9931-9933	ON	
91-17	9934-9947	O.customer_id	
91-18	9948-9949	=	
91-19	9950-9954	C.id	
91-20	9954-9955	;	
91-21	9956-9958	An	
91-22	9959-9964	OUTER	
91-23	9965-9969	JOIN	
91-24	9970-9975	query	
91-25	9976-9978	to	
91-26	9979-9982	the	
91-27	9983-9988	table	
91-28	9989-9994	would	
91-29	9995-9997	be	
91-30	9998-10000	as	
91-31	10001-10003	it	
91-32	10004-10006	is	
91-33	10007-10012	shown	
91-34	10013-10018	below	
91-35	10018-10019	.	

#Text=NOTE: MySQL does not support FULL OUTER JOIN, but other SQL dialects such as PostgreSQL do.
92-1	10020-10024	NOTE	
92-2	10024-10025	:	
92-3	10026-10031	MySQL	
92-4	10032-10036	does	
92-5	10037-10040	not	
92-6	10041-10048	support	
92-7	10049-10053	FULL	
92-8	10054-10059	OUTER	
92-9	10060-10064	JOIN	
92-10	10064-10065	,	
92-11	10066-10069	but	
92-12	10070-10075	other	
92-13	10076-10079	SQL	
92-14	10080-10088	dialects	
92-15	10089-10093	such	
92-16	10094-10096	as	
92-17	10097-10107	PostgreSQL	
92-18	10108-10110	do	
92-19	10110-10111	.	

#Text=SELECT
#Text=C.id, C.name, O.amount, O.date FROM customers C
#Text=FULL OUTER JOIN orders O ON O.customer_id = C.id;
#Text=Optimize LIKE Statements with UNION Clause
#Text=The OR operator is used to combine two Boolean expressions and return true when either of the conditions is met.
93-1	10112-10118	SELECT	
93-2	10119-10123	C.id	
93-3	10123-10124	,	
93-4	10125-10131	C.name	
93-5	10131-10132	,	
93-6	10133-10141	O.amount	
93-7	10141-10142	,	
93-8	10143-10149	O.date	
93-9	10150-10154	FROM	
93-10	10155-10164	customers	
93-11	10165-10166	C	
93-12	10167-10171	FULL	
93-13	10172-10177	OUTER	
93-14	10178-10182	JOIN	
93-15	10183-10189	orders	
93-16	10190-10191	O	
93-17	10192-10194	ON	
93-18	10195-10208	O.customer_id	
93-19	10209-10210	=	
93-20	10211-10215	C.id	
93-21	10215-10216	;	
93-22	10217-10225	Optimize	
93-23	10226-10230	LIKE	
93-24	10231-10241	Statements	
93-25	10242-10246	with	
93-26	10247-10252	UNION	
93-27	10253-10259	Clause	
93-28	10260-10263	The	
93-29	10264-10266	OR	
93-30	10267-10275	operator	
93-31	10276-10278	is	
93-32	10279-10283	used	
93-33	10284-10286	to	
93-34	10287-10294	combine	
93-35	10295-10298	two	
93-36	10299-10306	Boolean	
93-37	10307-10318	expressions	
93-38	10319-10322	and	
93-39	10323-10329	return	
93-40	10330-10334	true	
93-41	10335-10339	when	
93-42	10340-10346	either	
93-43	10347-10349	of	
93-44	10350-10353	the	
93-45	10354-10364	conditions	
93-46	10365-10367	is	
93-47	10368-10371	met	
93-48	10371-10372	.	

#Text=When using comparison operator ‘or’ in a query, MySQL optimizer may incorrectly choose a full table scan to retrieve the result set.
94-1	10373-10377	When	
94-2	10378-10383	using	
94-3	10384-10394	comparison	
94-4	10395-10403	operator	
94-5	10404-10405	‘	
94-6	10405-10407	or	
94-7	10407-10408	’	
94-8	10409-10411	in	
94-9	10412-10413	a	
94-10	10414-10419	query	
94-11	10419-10420	,	
94-12	10421-10426	MySQL	
94-13	10427-10436	optimizer	
94-14	10437-10440	may	
94-15	10441-10452	incorrectly	
94-16	10453-10459	choose	
94-17	10460-10461	a	
94-18	10462-10466	full	
94-19	10467-10472	table	
94-20	10473-10477	scan	
94-21	10478-10480	to	
94-22	10481-10489	retrieve	
94-23	10490-10493	the	
94-24	10494-10500	result	
94-25	10501-10504	set	
94-26	10504-10505	.	

#Text=This makes the query run slower.
95-1	10506-10510	This	
95-2	10511-10516	makes	
95-3	10517-10520	the	
95-4	10521-10526	query	
95-5	10527-10530	run	
95-6	10531-10537	slower	
95-7	10537-10538	.	

#Text=A UNION clause runs faster and gives the same result.
96-1	10539-10540	A	
96-2	10541-10546	UNION	
96-3	10547-10553	clause	
96-4	10554-10558	runs	
96-5	10559-10565	faster	
96-6	10566-10569	and	
96-7	10570-10575	gives	
96-8	10576-10579	the	
96-9	10580-10584	same	
96-10	10585-10591	result	
96-11	10591-10592	.	

#Text=Consider the query below:
#Text=SELECT * FROM city WHERE Name LIKE 'C%' or District LIKE 'C%';
#Text=Below are the optimized versions of the query above using the UNION ALL and UNION operators, respectively.
97-1	10593-10601	Consider	
97-2	10602-10605	the	
97-3	10606-10611	query	
97-4	10612-10617	below	
97-5	10617-10618	:	
97-6	10619-10625	SELECT	
97-7	10626-10627	*	
97-8	10628-10632	FROM	
97-9	10633-10637	city	
97-10	10638-10643	WHERE	
97-11	10644-10648	Name	
97-12	10649-10653	LIKE	
97-13	10654-10655	'	
97-14	10655-10656	C	
97-15	10656-10657	%	
97-16	10657-10658	'	
97-17	10659-10661	or	
97-18	10662-10670	District	
97-19	10671-10675	LIKE	
97-20	10676-10677	'	
97-21	10677-10678	C	
97-22	10678-10679	%	
97-23	10679-10680	'	
97-24	10680-10681	;	
97-25	10682-10687	Below	
97-26	10688-10691	are	
97-27	10692-10695	the	
97-28	10696-10705	optimized	
97-29	10706-10714	versions	
97-30	10715-10717	of	
97-31	10718-10721	the	
97-32	10722-10727	query	
97-33	10728-10733	above	
97-34	10734-10739	using	
97-35	10740-10743	the	
97-36	10744-10749	UNION	
97-37	10750-10753	ALL	
97-38	10754-10757	and	
97-39	10758-10763	UNION	
97-40	10764-10773	operators	
97-41	10773-10774	,	
97-42	10775-10787	respectively	
97-43	10787-10788	.	

#Text=SELECT * FROM city WHERE Name LIKE 'C%' UNION ALL SELECT * FROM city WHERE District LIKE 'C%';
#Text=SELECT * FROM city WHERE Name LIKE 'C%' UNION SELECT * FROM city WHERE District LIKE 'C%';
#Text=In the first query above, we used UNION ALL, while the second one, we have used UNION.
98-1	10789-10795	SELECT	
98-2	10796-10797	*	
98-3	10798-10802	FROM	
98-4	10803-10807	city	
98-5	10808-10813	WHERE	
98-6	10814-10818	Name	
98-7	10819-10823	LIKE	
98-8	10824-10825	'	
98-9	10825-10826	C	
98-10	10826-10827	%	
98-11	10827-10828	'	
98-12	10829-10834	UNION	
98-13	10835-10838	ALL	
98-14	10839-10845	SELECT	
98-15	10846-10847	*	
98-16	10848-10852	FROM	
98-17	10853-10857	city	
98-18	10858-10863	WHERE	
98-19	10864-10872	District	
98-20	10873-10877	LIKE	
98-21	10878-10879	'	
98-22	10879-10880	C	
98-23	10880-10881	%	
98-24	10881-10882	'	
98-25	10882-10883	;	
98-26	10884-10890	SELECT	
98-27	10891-10892	*	
98-28	10893-10897	FROM	
98-29	10898-10902	city	
98-30	10903-10908	WHERE	
98-31	10909-10913	Name	
98-32	10914-10918	LIKE	
98-33	10919-10920	'	
98-34	10920-10921	C	
98-35	10921-10922	%	
98-36	10922-10923	'	
98-37	10924-10929	UNION	
98-38	10930-10936	SELECT	
98-39	10937-10938	*	
98-40	10939-10943	FROM	
98-41	10944-10948	city	
98-42	10949-10954	WHERE	
98-43	10955-10963	District	
98-44	10964-10968	LIKE	
98-45	10969-10970	'	
98-46	10970-10971	C	
98-47	10971-10972	%	
98-48	10972-10973	'	
98-49	10973-10974	;	
98-50	10975-10977	In	
98-51	10978-10981	the	
98-52	10982-10987	first	
98-53	10988-10993	query	
98-54	10994-10999	above	
98-55	10999-11000	,	
98-56	11001-11003	we	
98-57	11004-11008	used	
98-58	11009-11014	UNION	
98-59	11015-11018	ALL	
98-60	11018-11019	,	
98-61	11020-11025	while	
98-62	11026-11029	the	
98-63	11030-11036	second	
98-64	11037-11040	one	
98-65	11040-11041	,	
98-66	11042-11044	we	
98-67	11045-11049	have	
98-68	11050-11054	used	
98-69	11055-11060	UNION	
98-70	11060-11061	.	

#Text=By default, UNION returns distinct rows while UNION ALL allows duplicate rows.
99-1	11062-11064	By	
99-2	11065-11072	default	
99-3	11072-11073	,	
99-4	11074-11079	UNION	
99-5	11080-11087	returns	
99-6	11088-11096	distinct	
99-7	11097-11101	rows	
99-8	11102-11107	while	
99-9	11108-11113	UNION	
99-10	11114-11117	ALL	
99-11	11118-11124	allows	
99-12	11125-11134	duplicate	
99-13	11135-11139	rows	
99-14	11139-11140	.	

#Text=UNION generally runs faster than UNION ALL.
100-1	11141-11146	UNION	
100-2	11147-11156	generally	
100-3	11157-11161	runs	
100-4	11162-11168	faster	
100-5	11169-11173	than	
100-6	11174-11179	UNION	
100-7	11180-11183	ALL	
100-8	11183-11184	.	

#Text=Conclusion
#Text=MySQL development is ongoing.
101-1	11185-11195	Conclusion	
101-2	11196-11201	MySQL	
101-3	11202-11213	development	
101-4	11214-11216	is	
101-5	11217-11224	ongoing	
101-6	11224-11225	.	

#Text=More tips to optimize queries are developed every day.
102-1	11226-11230	More	
102-2	11231-11235	tips	
102-3	11236-11238	to	
102-4	11239-11247	optimize	
102-5	11248-11255	queries	
102-6	11256-11259	are	
102-7	11260-11269	developed	
102-8	11270-11275	every	
102-9	11276-11279	day	
102-10	11279-11280	.	

#Text=This article is a guide on how to make better queries and make more stable database applications.
103-1	11281-11285	This	
103-2	11286-11293	article	
103-3	11294-11296	is	
103-4	11297-11298	a	
103-5	11299-11304	guide	
103-6	11305-11307	on	
103-7	11308-11311	how	
103-8	11312-11314	to	
103-9	11315-11319	make	
103-10	11320-11326	better	
103-11	11327-11334	queries	
103-12	11335-11338	and	
103-13	11339-11343	make	
103-14	11344-11348	more	
103-15	11349-11355	stable	
103-16	11356-11364	database	
103-17	11365-11377	applications	
103-18	11377-11378	.	

#Text=Query with no doubt.
104-1	11379-11384	Query	
104-2	11385-11389	with	
104-3	11390-11392	no	
104-4	11393-11398	doubt	
104-5	11398-11399	.	

#Text=Peer Review Contributions by: Gregory Manley
#Text=About the author
#Text=Benson Kariuki
#Text=Benson Kariuki is a graduate computer science student.
105-1	11400-11404	Peer	
105-2	11405-11411	Review	
105-3	11412-11425	Contributions	
105-4	11426-11428	by	
105-5	11428-11429	:	
105-6	11430-11437	Gregory	
105-7	11438-11444	Manley	
105-8	11445-11450	About	
105-9	11451-11454	the	
105-10	11455-11461	author	
105-11	11462-11468	Benson	
105-12	11469-11476	Kariuki	
105-13	11477-11483	Benson	
105-14	11484-11491	Kariuki	
105-15	11492-11494	is	
105-16	11495-11496	a	
105-17	11497-11505	graduate	
105-18	11506-11514	computer	
105-19	11515-11522	science	
105-20	11523-11530	student	
105-21	11530-11531	.	

#Text=He is a passionate and solution-oriented computer scientist.
106-1	11532-11534	He	
106-2	11535-11537	is	
106-3	11538-11539	a	
106-4	11540-11550	passionate	
106-5	11551-11554	and	
106-6	11555-11572	solution-oriented	
106-7	11573-11581	computer	
106-8	11582-11591	scientist	
106-9	11591-11592	.	

#Text=His interests are Web Development with WordPress, Big Data, and Machine Learning.
107-1	11593-11596	His	
107-2	11597-11606	interests	
107-3	11607-11610	are	
107-4	11611-11614	Web	
107-5	11615-11626	Development	
107-6	11627-11631	with	
107-7	11632-11641	WordPress	
107-8	11641-11642	,	
107-9	11643-11646	Big	
107-10	11647-11651	Data	
107-11	11651-11652	,	
107-12	11653-11656	and	
107-13	11657-11664	Machine	
107-14	11665-11673	Learning	
107-15	11673-11674	.	

#Text=This article was contributed by a student member of Section's Engineering Education Program.
108-1	11675-11679	This	
108-2	11680-11687	article	
108-3	11688-11691	was	
108-4	11692-11703	contributed	
108-5	11704-11706	by	
108-6	11707-11708	a	
108-7	11709-11716	student	
108-8	11717-11723	member	
108-9	11724-11726	of	
108-10	11727-11736	Section's	
108-11	11737-11748	Engineering	
108-12	11749-11758	Education	
108-13	11759-11766	Program	
108-14	11766-11767	.	

#Text=Please report any errors or innaccuracies to enged@section.io.
109-1	11768-11774	Please	
109-2	11775-11781	report	
109-3	11782-11785	any	
109-4	11786-11792	errors	
109-5	11793-11795	or	
109-6	11796-11809	innaccuracies	
109-7	11810-11812	to	
109-8	11813-11818	enged	
109-9	11818-11819	@	
109-10	11819-11829	section.io	
109-11	11829-11830	.	

#Text=Want to learn more about the EngEd Program?
110-1	11831-11835	Want	
110-2	11836-11838	to	
110-3	11839-11844	learn	
110-4	11845-11849	more	
110-5	11850-11855	about	
110-6	11856-11859	the	
110-7	11860-11865	EngEd	
110-8	11866-11873	Program	
110-9	11873-11874	?	

#Text=Discover Section's community-generated pool of resources from the next generation of engineers.
111-1	11875-11883	Discover	
111-2	11884-11893	Section's	
111-3	11894-11913	community-generated	
111-4	11914-11918	pool	
111-5	11919-11921	of	
111-6	11922-11931	resources	
111-7	11932-11936	from	
111-8	11937-11940	the	
111-9	11941-11945	next	
111-10	11946-11956	generation	
111-11	11957-11959	of	
111-12	11960-11969	engineers	
111-13	11969-11970	.	

#Text=Learn more
#Text=QUICK LINKS // More Section offerings
#Text=Edge Modules
#Text=Varnish Cache
#Text=Nginx/Lua
#Text=SiteSpect
#Text=Optidash
#Text=Cloudinary
#Text=ModSecurity
#Text=SignalSciences
#Text=ThreatX
#Text=Wallarm
#Text=Snapt
#Text=PerimeterX
#Text=Radware Bot Manager
#Text=Content Security Policy
#Text=Virtual Waiting Room
#Text=Hugo
#Text=Node.js
#Text=Custom Workload
#Text=View All Modules
#Text=DevOps
#Text=Real Time Metrics
#Text=Log Management
#Text=Real User Monitoring
#Text=Instant Global Deployments
#Text=Developer PoP
#Text=Instant Cache Purge
#Text=Managed SSL Certificates
#Text=APIs
#Text=Endpoints
#Text=Global Edge Network
#Text=Custom Edge Network
#Text=Private Edge Network
#Text=Origin PoP
#Text=Performance & Scalability
#Text=Dynamic Content Caching
#Text=Static Asset Caching
#Text=HTML Streaming
#Text=Anonymous Page Caching
#Text=Image Optimization
#Text=Mobile Optimization
#Text=Virtual Waiting Room
#Text=HTTP/2
#Text=Edge Delivery
#Text=Load Balancing
#Text=Maintenance Pages
#Text=Anycast DNS Hosting
#Text=SSL Certificates
#Text=Static Site Deployment
#Text=Application Security
#Text=Web Application Firewall
#Text=IP Blocking
#Text=SSL Certificates
#Text=DDoS Mitigation
#Text=Bad Bot Management
#Text=Content Security Policy
#Text=Use Cases
#Text=SaaS
#Text=PaaS & Hosting Providers
#Text=Edge App Hosting
#Text=Enterprise
#Text=E-Commerce
#Text=Gaming
#Text=IoT/IIoT
#Text=BigCommerce
#Text=Magento
#Text=WordPress
#Text=Drupal
#Text=Join our Slack community
#Text=Add to Slack
#Text=Company
#Text=About
#Text=Careers
#Text=Legals
#Text=Resources
#Text=Blog
#Text=Case Studies
#Text=Content Library
#Text=Solution Briefs
#Text=Partners
#Text=Changelog
#Text=Support
#Text=Docs
#Text=Community Slack
#Text=Help & Support
#Text=Platform Status
#Text=Pricing
#Text=Contact Us
#Text=Section supports many open source projects including:
#Text=© 2020 Section
#Text=Privacy Policy
#Text=Terms of Service
112-1	11971-11976	Learn	
112-2	11977-11981	more	
112-3	11982-11987	QUICK	
112-4	11988-11993	LINKS	
112-5	11994-11995	/	
112-6	11995-11996	/	
112-7	11997-12001	More	
112-8	12002-12009	Section	
112-9	12010-12019	offerings	
112-10	12020-12024	Edge	
112-11	12025-12032	Modules	
112-12	12033-12040	Varnish	
112-13	12041-12046	Cache	
112-14	12047-12052	Nginx	
112-15	12052-12053	/	
112-16	12053-12056	Lua	
112-17	12057-12066	SiteSpect	
112-18	12067-12075	Optidash	
112-19	12076-12086	Cloudinary	
112-20	12087-12098	ModSecurity	
112-21	12099-12113	SignalSciences	
112-22	12114-12121	ThreatX	
112-23	12122-12129	Wallarm	
112-24	12130-12135	Snapt	
112-25	12136-12146	PerimeterX	
112-26	12147-12154	Radware	
112-27	12155-12158	Bot	
112-28	12159-12166	Manager	
112-29	12167-12174	Content	
112-30	12175-12183	Security	
112-31	12184-12190	Policy	
112-32	12191-12198	Virtual	
112-33	12199-12206	Waiting	
112-34	12207-12211	Room	
112-35	12212-12216	Hugo	
112-36	12217-12224	Node.js	
112-37	12225-12231	Custom	
112-38	12232-12240	Workload	
112-39	12241-12245	View	
112-40	12246-12249	All	
112-41	12250-12257	Modules	
112-42	12258-12264	DevOps	
112-43	12265-12269	Real	
112-44	12270-12274	Time	
112-45	12275-12282	Metrics	
112-46	12283-12286	Log	
112-47	12287-12297	Management	
112-48	12298-12302	Real	
112-49	12303-12307	User	
112-50	12308-12318	Monitoring	
112-51	12319-12326	Instant	
112-52	12327-12333	Global	
112-53	12334-12345	Deployments	
112-54	12346-12355	Developer	
112-55	12356-12359	PoP	
112-56	12360-12367	Instant	
112-57	12368-12373	Cache	
112-58	12374-12379	Purge	
112-59	12380-12387	Managed	
112-60	12388-12391	SSL	
112-61	12392-12404	Certificates	
112-62	12405-12409	APIs	
112-63	12410-12419	Endpoints	
112-64	12420-12426	Global	
112-65	12427-12431	Edge	
112-66	12432-12439	Network	
112-67	12440-12446	Custom	
112-68	12447-12451	Edge	
112-69	12452-12459	Network	
112-70	12460-12467	Private	
112-71	12468-12472	Edge	
112-72	12473-12480	Network	
112-73	12481-12487	Origin	
112-74	12488-12491	PoP	
112-75	12492-12503	Performance	
112-76	12504-12505	&	
112-77	12506-12517	Scalability	
112-78	12518-12525	Dynamic	
112-79	12526-12533	Content	
112-80	12534-12541	Caching	
112-81	12542-12548	Static	
112-82	12549-12554	Asset	
112-83	12555-12562	Caching	
112-84	12563-12567	HTML	
112-85	12568-12577	Streaming	
112-86	12578-12587	Anonymous	
112-87	12588-12592	Page	
112-88	12593-12600	Caching	
112-89	12601-12606	Image	
112-90	12607-12619	Optimization	
112-91	12620-12626	Mobile	
112-92	12627-12639	Optimization	
112-93	12640-12647	Virtual	
112-94	12648-12655	Waiting	
112-95	12656-12660	Room	
112-96	12661-12665	HTTP	
112-97	12665-12666	/	
112-98	12666-12667	2	
112-99	12668-12672	Edge	
112-100	12673-12681	Delivery	
112-101	12682-12686	Load	
112-102	12687-12696	Balancing	
112-103	12697-12708	Maintenance	
112-104	12709-12714	Pages	
112-105	12715-12722	Anycast	
112-106	12723-12726	DNS	
112-107	12727-12734	Hosting	
112-108	12735-12738	SSL	
112-109	12739-12751	Certificates	
112-110	12752-12758	Static	
112-111	12759-12763	Site	
112-112	12764-12774	Deployment	
112-113	12775-12786	Application	
112-114	12787-12795	Security	
112-115	12796-12799	Web	
112-116	12800-12811	Application	
112-117	12812-12820	Firewall	
112-118	12821-12823	IP	
112-119	12824-12832	Blocking	
112-120	12833-12836	SSL	
112-121	12837-12849	Certificates	
112-122	12850-12854	DDoS	
112-123	12855-12865	Mitigation	
112-124	12866-12869	Bad	
112-125	12870-12873	Bot	
112-126	12874-12884	Management	
112-127	12885-12892	Content	
112-128	12893-12901	Security	
112-129	12902-12908	Policy	
112-130	12909-12912	Use	
112-131	12913-12918	Cases	
112-132	12919-12923	SaaS	
112-133	12924-12928	PaaS	
112-134	12929-12930	&	
112-135	12931-12938	Hosting	
112-136	12939-12948	Providers	
112-137	12949-12953	Edge	
112-138	12954-12957	App	
112-139	12958-12965	Hosting	
112-140	12966-12976	Enterprise	
112-141	12977-12987	E-Commerce	
112-142	12988-12994	Gaming	
112-143	12995-12998	IoT	
112-144	12998-12999	/	
112-145	12999-13003	IIoT	
112-146	13004-13015	BigCommerce	
112-147	13016-13023	Magento	
112-148	13024-13033	WordPress	
112-149	13034-13040	Drupal	
112-150	13041-13045	Join	
112-151	13046-13049	our	
112-152	13050-13055	Slack	
112-153	13056-13065	community	
112-154	13066-13069	Add	
112-155	13070-13072	to	
112-156	13072-13073	 	
112-157	13073-13078	Slack	
112-158	13079-13086	Company	
112-159	13087-13092	About	
112-160	13093-13100	Careers	
112-161	13101-13107	Legals	
112-162	13108-13117	Resources	
112-163	13118-13122	Blog	
112-164	13123-13127	Case	
112-165	13128-13135	Studies	
112-166	13136-13143	Content	
112-167	13144-13151	Library	
112-168	13152-13160	Solution	
112-169	13161-13167	Briefs	
112-170	13168-13176	Partners	
112-171	13177-13186	Changelog	
112-172	13187-13194	Support	
112-173	13195-13199	Docs	
112-174	13200-13209	Community	
112-175	13210-13215	Slack	
112-176	13216-13220	Help	
112-177	13221-13222	&	
112-178	13223-13230	Support	
112-179	13231-13239	Platform	
112-180	13240-13246	Status	
112-181	13247-13254	Pricing	
112-182	13255-13262	Contact	
112-183	13263-13265	Us	
112-184	13266-13273	Section	
112-185	13274-13282	supports	
112-186	13283-13287	many	
112-187	13288-13292	open	
112-188	13293-13299	source	
112-189	13300-13308	projects	
112-190	13309-13318	including	
112-191	13318-13319	:	
112-192	13320-13321	©	
112-193	13322-13326	2020	
112-194	13327-13334	Section	
112-195	13335-13342	Privacy	
112-196	13343-13349	Policy	
112-197	13350-13355	Terms	
112-198	13356-13358	of	
112-199	13359-13366	Service	
