#FORMAT=WebAnno TSV 3.3


#Text=Hibernate - Vlad Mihalcea
#Text=Vlad Mihalcea
#Text=Home
#Text=Blog
#Text=Store
#Text=Books
#Text=Courses
#Text=Hypersistence Optimizer
#Text=Documentation
#Text=Installation Guide
#Text=User Guide
#Text=Examples
#Text=Release Notes
#Text=Issue Tracker
#Text=Trial Version
#Text=Full Version
#Text=Training
#Text=High-Performance SQL
#Text=High-Performance Java Persistence
#Text=Consulting
#Text=Tutorials
#Text=Hibernate
#Text=SQL
#Text=Spring
#Text=Videos
#Text=Talks
#Text=Hibernate
#Text=Last modified:
#Text=Follow @vlad_mihalcea
#Text=Imagine having a tool that can automatically detect JPA and Hibernate performance issues.
1-1	0-9	Hibernate	
1-2	10-11	-	
1-3	12-16	Vlad	
1-4	17-25	Mihalcea	
1-5	26-30	Vlad	
1-6	31-39	Mihalcea	
1-7	40-44	Home	
1-8	45-49	Blog	
1-9	50-55	Store	
1-10	56-61	Books	
1-11	62-69	Courses	
1-12	70-83	Hypersistence	
1-13	84-93	Optimizer	
1-14	94-107	Documentation	
1-15	108-120	Installation	
1-16	121-126	Guide	
1-17	127-131	User	
1-18	132-137	Guide	
1-19	138-146	Examples	
1-20	147-154	Release	
1-21	155-160	Notes	
1-22	161-166	Issue	
1-23	167-174	Tracker	
1-24	175-180	Trial	
1-25	181-188	Version	
1-26	189-193	Full	
1-27	194-201	Version	
1-28	202-210	Training	
1-29	211-227	High-Performance	
1-30	228-231	SQL	
1-31	232-248	High-Performance	
1-32	249-253	Java	
1-33	254-265	Persistence	
1-34	266-276	Consulting	
1-35	277-286	Tutorials	
1-36	287-296	Hibernate	
1-37	297-300	SQL	
1-38	301-307	Spring	
1-39	308-314	Videos	
1-40	315-320	Talks	
1-41	321-330	Hibernate	
1-42	331-335	Last	
1-43	336-344	modified	
1-44	344-345	:	
1-45	346-352	Follow	
1-46	353-354	@	
1-47	354-367	vlad_mihalcea	
1-48	368-375	Imagine	
1-49	376-382	having	
1-50	383-384	a	
1-51	385-389	tool	
1-52	390-394	that	
1-53	395-398	can	
1-54	399-412	automatically	
1-55	413-419	detect	
1-56	420-423	JPA	
1-57	424-427	and	
1-58	428-437	Hibernate	
1-59	438-449	performance	
1-60	450-456	issues	
1-61	456-457	.	

#Text=Hypersistence Optimizer is that tool!
2-1	458-471	Hypersistence	
2-2	472-481	Optimizer	
2-3	482-484	is	
2-4	485-489	that	
2-5	490-494	tool	
2-6	494-495	!	

#Text=High-Performance Hibernate Tutorial
#Text=I’ve been using Hibernate for almost a decade and I admit it was not an easy journey.
3-1	496-512	High-Performance	
3-2	513-522	Hibernate	
3-3	523-531	Tutorial	
3-4	532-533	I	
3-5	533-534	’	
3-6	534-536	ve	
3-7	537-541	been	
3-8	542-547	using	
3-9	548-557	Hibernate	
3-10	558-561	for	
3-11	562-568	almost	
3-12	569-570	a	
3-13	571-577	decade	
3-14	578-581	and	
3-15	582-583	I	
3-16	584-589	admit	
3-17	590-592	it	
3-18	593-596	was	
3-19	597-600	not	
3-20	601-603	an	
3-21	604-608	easy	
3-22	609-616	journey	
3-23	616-617	.	

#Text=These tutorials are snippets from my High-Performance Java Persistence book, whose main goal is to show you how to make your data access layer run a high-speeds.
4-1	618-623	These	
4-2	624-633	tutorials	
4-3	634-637	are	
4-4	638-646	snippets	
4-5	647-651	from	
4-6	652-654	my	
4-7	655-671	High-Performance	
4-8	672-676	Java	
4-9	677-688	Persistence	
4-10	689-693	book	
4-11	693-694	,	
4-12	695-700	whose	
4-13	701-705	main	
4-14	706-710	goal	
4-15	711-713	is	
4-16	714-716	to	
4-17	717-721	show	
4-18	722-725	you	
4-19	726-729	how	
4-20	730-732	to	
4-21	733-737	make	
4-22	738-742	your	
4-23	743-747	data	
4-24	748-754	access	
4-25	755-760	layer	
4-26	761-764	run	
4-27	765-766	a	
4-28	767-778	high-speeds	
4-29	778-779	.	

#Text=This material is useful for both beginners and experienced developers, so enjoy reading it.
5-1	780-784	This	
5-2	785-793	material	
5-3	794-796	is	
5-4	797-803	useful	
5-5	804-807	for	
5-6	808-812	both	
5-7	813-822	beginners	
5-8	823-826	and	
5-9	827-838	experienced	
5-10	839-849	developers	
5-11	849-850	,	
5-12	851-853	so	
5-13	854-859	enjoy	
5-14	860-867	reading	
5-15	868-870	it	
5-16	870-871	.	

#Text=The best Tutorials on High-Performance Hibernate #Hibernate #Java #Tutorials #NewYearsResolution #Career https://t.co/wQNjz6kK24 pic.twitter.com/4wDmQYvswq— Java (@java) January 1, 2019
#Text=Tips and Best Practices
#Text=Why and when you should use JPA
#Text=The best way to prevent JPA and Hibernate performance issues
#Text=How to detect JPA and Hibernate performance issues automatically using Hypersistence Optimizer
#Text=Tuning Spring Petclinic JPA and Hibernate configuration with Hypersistence Optimizer
#Text=Hibernate Query Performance Tuning
#Text=Spring Boot performance tuning
#Text=Spring Boot performance monitoring
#Text=A beginner’s guide to the high-performance-java-persistence GitHub repository
#Text=Hibernate performance tuning tips
#Text=14 High-Performance Java Persistence tips
#Text=9 High-Performance Tips when using MySQL with JPA and Hibernate
#Text=9 High-Performance Tips when using PostgreSQL with JPA and Hibernate
#Text=How to detect the Hibernate N+1 query problem during testing
#Text=Hibernate slow query log
#Text=A beginner’s guide to SQL injection and how you should prevent it
#Text=How to store date, time, and timestamps in UTC time zone with JDBC and Hibernate
#Text=The fastest way to update a table row when using Hibernate and Oracle
#Text=How to use database-specific or Hibernate-specific features without sacrificing portability
#Text=How to use the Hibernate Session doWork and doReturningWork methods
#Text=JPA providers market share
#Text=Bootstrapping
#Text=A beginner’s guide to JPA persistence.xml file
#Text=How to bootstrap Hibernate without the persistence.xml configuration file
#Text=How to bootstrap JPA programmatically without the persistence.xml configuration file
#Text=JDBC Driver Connection URL strings
#Text=JDBC Driver Maven dependency list
#Text=How to get access to database table metadata with Hibernate 5
#Text=How to get the entity mapping to database table binding metadata from Hibernate
#Text=Schema Management
#Text=Flyway Database Schema Migrations
#Text=Hibernate hbm2ddl.auto schema generation
#Text=Mappings
#Text=Basic Types
#Text=A beginner’s guide to Hibernate Types
#Text=How to implement a custom basic type using Hibernate UserType
#Text=JPA AttributeConverter – A Beginner’s Guide
#Text=How to map calculated properties with JPA and Hibernate @Formula annotation
#Text=How to map calculated properties with Hibernate @Generated annotation
#Text=How to emulate @CreatedBy and @LastModifiedBy from Spring Data using the @GeneratorType Hibernate annotation
#Text=How to map Date and Timestamp with JPA and Hibernate
#Text=What’s new in JPA 2.2 – Java 8 Date and Time Types
#Text=The best way to map a Java 1.8 Optional entity attribute with JPA and Hibernate
#Text=The best way to map an Enum Type with JPA and Hibernate
#Text=How to map a JPA entity to a View or SQL query using Hibernate
#Text=How to map the PostgreSQL inet type with JPA and Hibernate
#Text=How to map a PostgreSQL Range column type with JPA and Hibernate
#Text=How to map the Java YearMonth type with JPA and Hibernate
#Text=How to map java.time.Year and java.time.Month with JPA and Hibernate
#Text=How to map a PostgreSQL Interval to a Java Duration with Hibernate
#Text=How to escape SQL reserved keywords with JPA and Hibernate
#Text=JSON
#Text=The hibernate-types open-source project offers extra Hibernate Types (e.g.
6-1	872-875	The	
6-2	876-880	best	
6-3	881-890	Tutorials	
6-4	891-893	on	
6-5	894-910	High-Performance	
6-6	911-920	Hibernate	
6-7	921-922	#	
6-8	922-931	Hibernate	
6-9	932-933	#	
6-10	933-937	Java	
6-11	938-939	#	
6-12	939-948	Tutorials	
6-13	949-950	#	
6-14	950-968	NewYearsResolution	
6-15	969-970	#	
6-16	970-976	Career	
6-17	977-982	https	
6-18	982-983	:	
6-19	983-984	/	
6-20	984-985	/	
6-21	985-989	t.co	
6-22	989-990	/	
6-23	990-1000	wQNjz6kK24	
6-24	1001-1016	pic.twitter.com	
6-25	1016-1017	/	
6-26	1017-1027	4wDmQYvswq	
6-27	1027-1028	—	
6-28	1029-1033	Java	
6-29	1034-1035	(	
6-30	1035-1036	@	
6-31	1036-1040	java	
6-32	1040-1041	)	
6-33	1042-1049	January	
6-34	1050-1051	1	
6-35	1051-1052	,	
6-36	1053-1057	2019	
6-37	1058-1062	Tips	
6-38	1063-1066	and	
6-39	1067-1071	Best	
6-40	1072-1081	Practices	
6-41	1082-1085	Why	
6-42	1086-1089	and	
6-43	1090-1094	when	
6-44	1095-1098	you	
6-45	1099-1105	should	
6-46	1106-1109	use	
6-47	1110-1113	JPA	
6-48	1114-1117	The	
6-49	1118-1122	best	
6-50	1123-1126	way	
6-51	1127-1129	to	
6-52	1130-1137	prevent	
6-53	1138-1141	JPA	
6-54	1142-1145	and	
6-55	1146-1155	Hibernate	
6-56	1156-1167	performance	
6-57	1168-1174	issues	
6-58	1175-1178	How	
6-59	1179-1181	to	
6-60	1182-1188	detect	
6-61	1189-1192	JPA	
6-62	1193-1196	and	
6-63	1197-1206	Hibernate	
6-64	1207-1218	performance	
6-65	1219-1225	issues	
6-66	1226-1239	automatically	
6-67	1240-1245	using	
6-68	1246-1259	Hypersistence	
6-69	1260-1269	Optimizer	
6-70	1270-1276	Tuning	
6-71	1277-1283	Spring	
6-72	1284-1293	Petclinic	
6-73	1294-1297	JPA	
6-74	1298-1301	and	
6-75	1302-1311	Hibernate	
6-76	1312-1325	configuration	
6-77	1326-1330	with	
6-78	1331-1344	Hypersistence	
6-79	1345-1354	Optimizer	
6-80	1355-1364	Hibernate	
6-81	1365-1370	Query	
6-82	1371-1382	Performance	
6-83	1383-1389	Tuning	
6-84	1390-1396	Spring	
6-85	1397-1401	Boot	
6-86	1402-1413	performance	
6-87	1414-1420	tuning	
6-88	1421-1427	Spring	
6-89	1428-1432	Boot	
6-90	1433-1444	performance	
6-91	1445-1455	monitoring	
6-92	1456-1457	A	
6-93	1458-1466	beginner	
6-94	1466-1467	’	
6-95	1467-1468	s	
6-96	1469-1474	guide	
6-97	1475-1477	to	
6-98	1478-1481	the	
6-99	1482-1515	high-performance-java-persistence	
6-100	1516-1522	GitHub	
6-101	1523-1533	repository	
6-102	1534-1543	Hibernate	
6-103	1544-1555	performance	
6-104	1556-1562	tuning	
6-105	1563-1567	tips	
6-106	1568-1570	14	
6-107	1571-1587	High-Performance	
6-108	1588-1592	Java	
6-109	1593-1604	Persistence	
6-110	1605-1609	tips	
6-111	1610-1611	9	
6-112	1612-1628	High-Performance	
6-113	1629-1633	Tips	
6-114	1634-1638	when	
6-115	1639-1644	using	
6-116	1645-1650	MySQL	
6-117	1651-1655	with	
6-118	1656-1659	JPA	
6-119	1660-1663	and	
6-120	1664-1673	Hibernate	
6-121	1674-1675	9	
6-122	1676-1692	High-Performance	
6-123	1693-1697	Tips	
6-124	1698-1702	when	
6-125	1703-1708	using	
6-126	1709-1719	PostgreSQL	
6-127	1720-1724	with	
6-128	1725-1728	JPA	
6-129	1729-1732	and	
6-130	1733-1742	Hibernate	
6-131	1743-1746	How	
6-132	1747-1749	to	
6-133	1750-1756	detect	
6-134	1757-1760	the	
6-135	1761-1770	Hibernate	
6-136	1771-1772	N	
6-137	1772-1773	+	
6-138	1773-1774	1	
6-139	1775-1780	query	
6-140	1781-1788	problem	
6-141	1789-1795	during	
6-142	1796-1803	testing	
6-143	1804-1813	Hibernate	
6-144	1814-1818	slow	
6-145	1819-1824	query	
6-146	1825-1828	log	
6-147	1829-1830	A	
6-148	1831-1839	beginner	
6-149	1839-1840	’	
6-150	1840-1841	s	
6-151	1842-1847	guide	
6-152	1848-1850	to	
6-153	1851-1854	SQL	
6-154	1855-1864	injection	
6-155	1865-1868	and	
6-156	1869-1872	how	
6-157	1873-1876	you	
6-158	1877-1883	should	
6-159	1884-1891	prevent	
6-160	1892-1894	it	
6-161	1895-1898	How	
6-162	1899-1901	to	
6-163	1902-1907	store	
6-164	1908-1912	date	
6-165	1912-1913	,	
6-166	1914-1918	time	
6-167	1918-1919	,	
6-168	1920-1923	and	
6-169	1924-1934	timestamps	
6-170	1935-1937	in	
6-171	1938-1941	UTC	
6-172	1942-1946	time	
6-173	1947-1951	zone	
6-174	1952-1956	with	
6-175	1957-1961	JDBC	
6-176	1962-1965	and	
6-177	1966-1975	Hibernate	
6-178	1976-1979	The	
6-179	1980-1987	fastest	
6-180	1988-1991	way	
6-181	1992-1994	to	
6-182	1995-2001	update	
6-183	2002-2003	a	
6-184	2004-2009	table	
6-185	2010-2013	row	
6-186	2014-2018	when	
6-187	2019-2024	using	
6-188	2025-2034	Hibernate	
6-189	2035-2038	and	
6-190	2039-2045	Oracle	
6-191	2046-2049	How	
6-192	2050-2052	to	
6-193	2053-2056	use	
6-194	2057-2074	database-specific	
6-195	2075-2077	or	
6-196	2078-2096	Hibernate-specific	
6-197	2097-2105	features	
6-198	2106-2113	without	
6-199	2114-2125	sacrificing	
6-200	2126-2137	portability	
6-201	2138-2141	How	
6-202	2142-2144	to	
6-203	2145-2148	use	
6-204	2149-2152	the	
6-205	2153-2162	Hibernate	
6-206	2163-2170	Session	
6-207	2171-2177	doWork	
6-208	2178-2181	and	
6-209	2182-2197	doReturningWork	
6-210	2198-2205	methods	
6-211	2206-2209	JPA	
6-212	2210-2219	providers	
6-213	2220-2226	market	
6-214	2227-2232	share	
6-215	2233-2246	Bootstrapping	
6-216	2247-2248	A	
6-217	2249-2257	beginner	
6-218	2257-2258	’	
6-219	2258-2259	s	
6-220	2260-2265	guide	
6-221	2266-2268	to	
6-222	2269-2272	JPA	
6-223	2273-2288	persistence.xml	
6-224	2289-2293	file	
6-225	2294-2297	How	
6-226	2298-2300	to	
6-227	2301-2310	bootstrap	
6-228	2311-2320	Hibernate	
6-229	2321-2328	without	
6-230	2329-2332	the	
6-231	2333-2348	persistence.xml	
6-232	2349-2362	configuration	
6-233	2363-2367	file	
6-234	2368-2371	How	
6-235	2372-2374	to	
6-236	2375-2384	bootstrap	
6-237	2385-2388	JPA	
6-238	2389-2405	programmatically	
6-239	2406-2413	without	
6-240	2414-2417	the	
6-241	2418-2433	persistence.xml	
6-242	2434-2447	configuration	
6-243	2448-2452	file	
6-244	2453-2457	JDBC	
6-245	2458-2464	Driver	
6-246	2465-2475	Connection	
6-247	2476-2479	URL	
6-248	2480-2487	strings	
6-249	2488-2492	JDBC	
6-250	2493-2499	Driver	
6-251	2500-2505	Maven	
6-252	2506-2516	dependency	
6-253	2517-2521	list	
6-254	2522-2525	How	
6-255	2526-2528	to	
6-256	2529-2532	get	
6-257	2533-2539	access	
6-258	2540-2542	to	
6-259	2543-2551	database	
6-260	2552-2557	table	
6-261	2558-2566	metadata	
6-262	2567-2571	with	
6-263	2572-2581	Hibernate	
6-264	2582-2583	5	
6-265	2584-2587	How	
6-266	2588-2590	to	
6-267	2591-2594	get	
6-268	2595-2598	the	
6-269	2599-2605	entity	
6-270	2606-2613	mapping	
6-271	2614-2616	to	
6-272	2617-2625	database	
6-273	2626-2631	table	
6-274	2632-2639	binding	
6-275	2640-2648	metadata	
6-276	2649-2653	from	
6-277	2654-2663	Hibernate	
6-278	2664-2670	Schema	
6-279	2671-2681	Management	
6-280	2682-2688	Flyway	
6-281	2689-2697	Database	
6-282	2698-2704	Schema	
6-283	2705-2715	Migrations	
6-284	2716-2725	Hibernate	
6-285	2726-2738	hbm2ddl.auto	
6-286	2739-2745	schema	
6-287	2746-2756	generation	
6-288	2757-2765	Mappings	
6-289	2766-2771	Basic	
6-290	2772-2777	Types	
6-291	2778-2779	A	
6-292	2780-2788	beginner	
6-293	2788-2789	’	
6-294	2789-2790	s	
6-295	2791-2796	guide	
6-296	2797-2799	to	
6-297	2800-2809	Hibernate	
6-298	2810-2815	Types	
6-299	2816-2819	How	
6-300	2820-2822	to	
6-301	2823-2832	implement	
6-302	2833-2834	a	
6-303	2835-2841	custom	
6-304	2842-2847	basic	
6-305	2848-2852	type	
6-306	2853-2858	using	
6-307	2859-2868	Hibernate	
6-308	2869-2877	UserType	
6-309	2878-2881	JPA	
6-310	2882-2900	AttributeConverter	
6-311	2901-2902	–	
6-312	2903-2904	A	
6-313	2905-2913	Beginner	
6-314	2913-2914	’	
6-315	2914-2915	s	
6-316	2916-2921	Guide	
6-317	2922-2925	How	
6-318	2926-2928	to	
6-319	2929-2932	map	
6-320	2933-2943	calculated	
6-321	2944-2954	properties	
6-322	2955-2959	with	
6-323	2960-2963	JPA	
6-324	2964-2967	and	
6-325	2968-2977	Hibernate	
6-326	2978-2979	@	
6-327	2979-2986	Formula	
6-328	2987-2997	annotation	
6-329	2998-3001	How	
6-330	3002-3004	to	
6-331	3005-3008	map	
6-332	3009-3019	calculated	
6-333	3020-3030	properties	
6-334	3031-3035	with	
6-335	3036-3045	Hibernate	
6-336	3046-3047	@	
6-337	3047-3056	Generated	
6-338	3057-3067	annotation	
6-339	3068-3071	How	
6-340	3072-3074	to	
6-341	3075-3082	emulate	
6-342	3083-3084	@	
6-343	3084-3093	CreatedBy	
6-344	3094-3097	and	
6-345	3098-3099	@	
6-346	3099-3113	LastModifiedBy	
6-347	3114-3118	from	
6-348	3119-3125	Spring	
6-349	3126-3130	Data	
6-350	3131-3136	using	
6-351	3137-3140	the	
6-352	3141-3142	@	
6-353	3142-3155	GeneratorType	
6-354	3156-3165	Hibernate	
6-355	3166-3176	annotation	
6-356	3177-3180	How	
6-357	3181-3183	to	
6-358	3184-3187	map	
6-359	3188-3192	Date	
6-360	3193-3196	and	
6-361	3197-3206	Timestamp	
6-362	3207-3211	with	
6-363	3212-3215	JPA	
6-364	3216-3219	and	
6-365	3220-3229	Hibernate	
6-366	3230-3234	What	
6-367	3234-3235	’	
6-368	3235-3236	s	
6-369	3237-3240	new	
6-370	3241-3243	in	
6-371	3244-3247	JPA	
6-372	3248-3251	2.2	
6-373	3252-3253	–	
6-374	3254-3258	Java	
6-375	3259-3260	8	
6-376	3261-3265	Date	
6-377	3266-3269	and	
6-378	3270-3274	Time	
6-379	3275-3280	Types	
6-380	3281-3284	The	
6-381	3285-3289	best	
6-382	3290-3293	way	
6-383	3294-3296	to	
6-384	3297-3300	map	
6-385	3301-3302	a	
6-386	3303-3307	Java	
6-387	3308-3311	1.8	
6-388	3312-3320	Optional	
6-389	3321-3327	entity	
6-390	3328-3337	attribute	
6-391	3338-3342	with	
6-392	3343-3346	JPA	
6-393	3347-3350	and	
6-394	3351-3360	Hibernate	
6-395	3361-3364	The	
6-396	3365-3369	best	
6-397	3370-3373	way	
6-398	3374-3376	to	
6-399	3377-3380	map	
6-400	3381-3383	an	
6-401	3384-3388	Enum	
6-402	3389-3393	Type	
6-403	3394-3398	with	
6-404	3399-3402	JPA	
6-405	3403-3406	and	
6-406	3407-3416	Hibernate	
6-407	3417-3420	How	
6-408	3421-3423	to	
6-409	3424-3427	map	
6-410	3428-3429	a	
6-411	3430-3433	JPA	
6-412	3434-3440	entity	
6-413	3441-3443	to	
6-414	3444-3445	a	
6-415	3446-3450	View	
6-416	3451-3453	or	
6-417	3454-3457	SQL	
6-418	3458-3463	query	
6-419	3464-3469	using	
6-420	3470-3479	Hibernate	
6-421	3480-3483	How	
6-422	3484-3486	to	
6-423	3487-3490	map	
6-424	3491-3494	the	
6-425	3495-3505	PostgreSQL	
6-426	3506-3510	inet	
6-427	3511-3515	type	
6-428	3516-3520	with	
6-429	3521-3524	JPA	
6-430	3525-3528	and	
6-431	3529-3538	Hibernate	
6-432	3539-3542	How	
6-433	3543-3545	to	
6-434	3546-3549	map	
6-435	3550-3551	a	
6-436	3552-3562	PostgreSQL	
6-437	3563-3568	Range	
6-438	3569-3575	column	
6-439	3576-3580	type	
6-440	3581-3585	with	
6-441	3586-3589	JPA	
6-442	3590-3593	and	
6-443	3594-3603	Hibernate	
6-444	3604-3607	How	
6-445	3608-3610	to	
6-446	3611-3614	map	
6-447	3615-3618	the	
6-448	3619-3623	Java	
6-449	3624-3633	YearMonth	
6-450	3634-3638	type	
6-451	3639-3643	with	
6-452	3644-3647	JPA	
6-453	3648-3651	and	
6-454	3652-3661	Hibernate	
6-455	3662-3665	How	
6-456	3666-3668	to	
6-457	3669-3672	map	
6-458	3673-3687	java.time.Year	
6-459	3688-3691	and	
6-460	3692-3707	java.time.Month	
6-461	3708-3712	with	
6-462	3713-3716	JPA	
6-463	3717-3720	and	
6-464	3721-3730	Hibernate	
6-465	3731-3734	How	
6-466	3735-3737	to	
6-467	3738-3741	map	
6-468	3742-3743	a	
6-469	3744-3754	PostgreSQL	
6-470	3755-3763	Interval	
6-471	3764-3766	to	
6-472	3767-3768	a	
6-473	3769-3773	Java	
6-474	3774-3782	Duration	
6-475	3783-3787	with	
6-476	3788-3797	Hibernate	
6-477	3798-3801	How	
6-478	3802-3804	to	
6-479	3805-3811	escape	
6-480	3812-3815	SQL	
6-481	3816-3824	reserved	
6-482	3825-3833	keywords	
6-483	3834-3838	with	
6-484	3839-3842	JPA	
6-485	3843-3846	and	
6-486	3847-3856	Hibernate	
6-487	3857-3861	JSON	
6-488	3862-3865	The	
6-489	3866-3881	hibernate-types	
6-490	3882-3893	open-source	
6-491	3894-3901	project	
6-492	3902-3908	offers	
6-493	3909-3914	extra	
6-494	3915-3924	Hibernate	
6-495	3925-3930	Types	
6-496	3931-3932	(	
6-497	3932-3935	e.g	
6-498	3935-3936	.	

#Text=JSON, ARRAY)
#Text=How to map JSON objects using generic Hibernate Types
#Text=How to map Oracle JSON columns using JPA and Hibernate
#Text=How to map SQL Server JSON columns using JPA and Hibernate
#Text=How to store schema-less EAV (Entity-Attribute-Value) data using JSON and Hibernate
#Text=How to map a String JPA property to a JSON column using Hibernate
#Text=How to map JSON collections using JPA and Hibernate
#Text=Java Map to JSON mapping with JPA and Hibernate
#Text=How to map Java Records to JSON columns using Hibernate
#Text=How to encrypt and decrypt JSON properties with JPA and Hibernate
#Text=How to customize the Jackson ObjectMapper used by Hibernate-Types
#Text=How to customize the JSON Serializer used by Hibernate-Types
#Text=How to fix the Hibernate “No Dialect mapping for JDBC type” issue
#Text=How to fix the Hibernate “column is of type jsonb but expression is of type bytes” issue
#Text=ARRAY
#Text=How to map a PostgreSQL ARRAY to a Java List with JPA and Hibernate
#Text=How to map Java and SQL arrays with JPA and Hibernate
#Text=How to map a PostgreSQL Enum ARRAY to a JPA entity property using Hibernate
#Text=Multidimensional array mapping with JPA and Hibernate
#Text=Hibernate HSQLDB ARRAY Type
#Text=Equals and HashCode
#Text=The best way to implement equals, hashCode, and toString with JPA and Hibernate
#Text=How to implement equals and hashCode using the entity identifier (primary key)
#Text=How to implement equals and hashCode using the entity natural identifier
#Text=Relationships
#Text=A beginner’s guide to database table relationships
#Text=ManyToOne JPA and Hibernate association best practices
#Text=The best way to map a @OneToOne relationship with JPA and Hibernate
#Text=How to change the @OneToOne shared primary key column name with JPA and Hibernate
#Text=The best way to map a @OneToMany relationship with JPA and Hibernate
#Text=The best way to use the @ManyToMany annotation with JPA and Hibernate
#Text=The best way to map a many-to-many association with extra columns when using JPA and Hibernate
#Text=The best way to map a Composite Primary Key with JPA and Hibernate
#Text=How to map a composite identifier using an automatically @GeneratedValue with JPA and Hibernate
#Text=How to synchronize bidirectional entity associations with JPA and Hibernate
#Text=How to map a @ManyToOne association using a non-Primary Key column
#Text=How to customize an entity association JOIN ON clause with Hibernate @JoinFormula
#Text=How to map a JPA @ManyToOne relationship to a SQL query using the Hibernate @JoinFormula annotation
#Text=How to optimize unidirectional collections with JPA and Hibernate
#Text=How do Set and List collections behave with JPA and Hibernate
#Text=Advanced mapping techniques
#Text=Fluent API entity building with JPA and Hibernate
#Text=How to map an immutable entity with JPA and Hibernate
#Text=How to map the latest child of a parent entity using Hibernate @JoinFormula
#Text=How to map multiple JPA entities to one database table with Hibernate
#Text=How to update only a subset of entity attributes using JPA and Hibernate @DynamicUpdate
#Text=How to use external XML mappings files with JPA and Hibernate
#Text=How to encrypt and decrypt data with Hibernate
#Text=The best way to soft delete with Hibernate
#Text=How to fix “wrong column type encountered” schema-validation errors with JPA and Hibernate
#Text=How to audit entity modifications using the JPA @EntityListeners, @Embedded, and @Embeddable annotations
#Text=How to use @PrePersist and @PreUpdate on Embeddable with JPA and Hibernate
#Text=How to map camelCase properties to snake_case column names with Hibernate
#Text=Identifiers
#Text=A beginner’s guide to natural and surrogate database keys
#Text=Hibernate Identity, Sequence, and Table (Sequence) generator
#Text=How to generate JPA entity identifier values using a database sequence
#Text=The hi/lo algorithm
#Text=Hibernate pooled and pooled-lo identifier generators
#Text=A beginner’s guide to Hibernate enhanced identifier generators
#Text=How to migrate the hilo Hibernate identifier optimizer to the pooled strategy
#Text=Why you should never use the TABLE identifier generator with JPA and Hibernate
#Text=Why should not use the AUTO JPA GenerationType with MySQL and Hibernate
#Text=How to replace the TABLE identifier generator with either SEQUENCE or IDENTITY in a portable way
#Text=PostgreSQL SERIAL column and Hibernate IDENTITY generator
#Text=How to combine the Hibernate assigned generator with a sequence or an identity column
#Text=How to implement a custom String-based sequence identifier generator with Hibernate
#Text=MariaDB 10.3 supports database sequences
#Text=Hibernate and UUID identifiers
#Text=How to use a JVM or database auto-generated UUID identifier with JPA and Hibernate
#Text=The best way to map a @NaturalId business key with JPA and Hibernate
#Text=Inheritance
#Text=The best way to use entity inheritance with JPA and Hibernate
#Text=The best way to map the SINGLE_TABLE inheritance with JPA and Hibernate
#Text=MySQL 8 support for custom SQL CHECK constraints simplifies SINGLE_TABLE inheritance data integrity validation rules
#Text=The best way to map the @DiscriminatorColumn with JPA and Hibernate
#Text=How to inherit properties from a base class entity using @MappedSuperclass with JPA and Hibernate
#Text=How to order entity subclasses by their class type using JPA and Hibernate
#Text=Connection Management
#Text=The simple scalability equation
#Text=The anatomy of Connection Pooling
#Text=Why you should use FlexyPool
#Text=How to monitor your connection pool with FlexyPool
#Text=How to monitor a Java EE DataSource
#Text=Why you should always use hibernate.connection.provider_disables_autocommit for resource-local JPA transactions
#Text=How does aggressive connection release work in Hibernate
#Text=Persistence Context
#Text=The JPA and Hibernate first-level cache
#Text=A beginner’s guide to JPA/Hibernate entity state transitions
#Text=A beginner’s guide to JPA and Hibernate Cascade Types
#Text=How does orphanRemoval work with JPA and Hibernate
#Text=A beginner’s guide to flush strategies in JPA and Hibernate
#Text=How does persist and merge work in JPA
#Text=How do JPA persist, merge and Hibernate save, update, saveOrUpdate work
#Text=How to merge entity collections with JPA and Hibernate
#Text=How does AUTO flush strategy work in Hibernate
#Text=How to override the default Hibernate Session FlushMode
#Text=How do JPA and Hibernate define the AUTO flush mode
#Text=A beginner’s guide to Hibernate flush operation order
#Text=The best way to clone or duplicate an entity with JPA and Hibernate
#Text=How to intercept entity changes with Hibernate event listeners
#Text=The anatomy of Hibernate dirty checking mechanism
#Text=How to customize Hibernate dirty checking mechanism
#Text=Fetching
#Text=Pagination best practices
#Text=JPA Default Fetch Plan
#Text=How do find and getReference EntityManager methods work when using JPA and Hibernate
#Text=N+1 query problem with JPA and Hibernate
#Text=The best way to fetch multiple entities by id using JPA and Hibernate
#Text=A beginner’s guide to Hibernate fetching strategies
#Text=EAGER fetching is a code smell
#Text=The best way to map a projection query to a DTO (Data Transfer Object) with JPA and Hibernate
#Text=How to write a compact DTO projection query with JPA
#Text=How to fetch a one-to-many DTO projection with JPA and Hibernate
#Text=The best way to handle the LazyInitializationException
#Text=The best way to lazy load entity attributes using JPA and Hibernate
#Text=Hibernate LazyToOne annotation
#Text=The best way to initialize LAZY entity and collection proxies with JPA and Hibernate
#Text=Why you should avoid EXTRA Lazy Collections with Hibernate
#Text=ResultSet statement fetching with JDBC and Hibernate
#Text=The best way to fix the Hibernate MultipleBagFetchException
#Text=How to fetch entities multiple levels deep with Hibernate
#Text=The Open Session In View Anti-Pattern
#Text=The hibernate.enable_lazy_load_no_trans Anti-Pattern
#Text=How does MySQL result set streaming perform vs fetching the whole JDBC ResultSet at once
#Text=How does a JPA Proxy work and how to unproxy it with Hibernate
#Text=The best way to fix the Hibernate “HHH000104: firstResult/maxResults specified with collection fetch; applying in memory!”
7-1	3937-3941	JSON	
7-2	3941-3942	,	
7-3	3943-3948	ARRAY	
7-4	3948-3949	)	
7-5	3950-3953	How	
7-6	3954-3956	to	
7-7	3957-3960	map	
7-8	3961-3965	JSON	
7-9	3966-3973	objects	
7-10	3974-3979	using	
7-11	3980-3987	generic	
7-12	3988-3997	Hibernate	
7-13	3998-4003	Types	
7-14	4004-4007	How	
7-15	4008-4010	to	
7-16	4011-4014	map	
7-17	4015-4021	Oracle	
7-18	4022-4026	JSON	
7-19	4027-4034	columns	
7-20	4035-4040	using	
7-21	4041-4044	JPA	
7-22	4045-4048	and	
7-23	4049-4058	Hibernate	
7-24	4059-4062	How	
7-25	4063-4065	to	
7-26	4066-4069	map	
7-27	4070-4073	SQL	
7-28	4074-4080	Server	
7-29	4081-4085	JSON	
7-30	4086-4093	columns	
7-31	4094-4099	using	
7-32	4100-4103	JPA	
7-33	4104-4107	and	
7-34	4108-4117	Hibernate	
7-35	4118-4121	How	
7-36	4122-4124	to	
7-37	4125-4130	store	
7-38	4131-4142	schema-less	
7-39	4143-4146	EAV	
7-40	4147-4148	(	
7-41	4148-4170	Entity-Attribute-Value	
7-42	4170-4171	)	
7-43	4172-4176	data	
7-44	4177-4182	using	
7-45	4183-4187	JSON	
7-46	4188-4191	and	
7-47	4192-4201	Hibernate	
7-48	4202-4205	How	
7-49	4206-4208	to	
7-50	4209-4212	map	
7-51	4213-4214	a	
7-52	4215-4221	String	
7-53	4222-4225	JPA	
7-54	4226-4234	property	
7-55	4235-4237	to	
7-56	4238-4239	a	
7-57	4240-4244	JSON	
7-58	4245-4251	column	
7-59	4252-4257	using	
7-60	4258-4267	Hibernate	
7-61	4268-4271	How	
7-62	4272-4274	to	
7-63	4275-4278	map	
7-64	4279-4283	JSON	
7-65	4284-4295	collections	
7-66	4296-4301	using	
7-67	4302-4305	JPA	
7-68	4306-4309	and	
7-69	4310-4319	Hibernate	
7-70	4320-4324	Java	
7-71	4325-4328	Map	
7-72	4329-4331	to	
7-73	4332-4336	JSON	
7-74	4337-4344	mapping	
7-75	4345-4349	with	
7-76	4350-4353	JPA	
7-77	4354-4357	and	
7-78	4358-4367	Hibernate	
7-79	4368-4371	How	
7-80	4372-4374	to	
7-81	4375-4378	map	
7-82	4379-4383	Java	
7-83	4384-4391	Records	
7-84	4392-4394	to	
7-85	4395-4399	JSON	
7-86	4400-4407	columns	
7-87	4408-4413	using	
7-88	4414-4423	Hibernate	
7-89	4424-4427	How	
7-90	4428-4430	to	
7-91	4431-4438	encrypt	
7-92	4439-4442	and	
7-93	4443-4450	decrypt	
7-94	4451-4455	JSON	
7-95	4456-4466	properties	
7-96	4467-4471	with	
7-97	4472-4475	JPA	
7-98	4476-4479	and	
7-99	4480-4489	Hibernate	
7-100	4490-4493	How	
7-101	4494-4496	to	
7-102	4497-4506	customize	
7-103	4507-4510	the	
7-104	4511-4518	Jackson	
7-105	4519-4531	ObjectMapper	
7-106	4532-4536	used	
7-107	4537-4539	by	
7-108	4540-4555	Hibernate-Types	
7-109	4556-4559	How	
7-110	4560-4562	to	
7-111	4563-4572	customize	
7-112	4573-4576	the	
7-113	4577-4581	JSON	
7-114	4582-4592	Serializer	
7-115	4593-4597	used	
7-116	4598-4600	by	
7-117	4601-4616	Hibernate-Types	
7-118	4617-4620	How	
7-119	4621-4623	to	
7-120	4624-4627	fix	
7-121	4628-4631	the	
7-122	4632-4641	Hibernate	
7-123	4642-4643	“	
7-124	4643-4645	No	
7-125	4646-4653	Dialect	
7-126	4654-4661	mapping	
7-127	4662-4665	for	
7-128	4666-4670	JDBC	
7-129	4671-4675	type	
7-130	4675-4676	”	
7-131	4677-4682	issue	
7-132	4683-4686	How	
7-133	4687-4689	to	
7-134	4690-4693	fix	
7-135	4694-4697	the	
7-136	4698-4707	Hibernate	
7-137	4708-4709	“	
7-138	4709-4715	column	
7-139	4716-4718	is	
7-140	4719-4721	of	
7-141	4722-4726	type	
7-142	4727-4732	jsonb	
7-143	4733-4736	but	
7-144	4737-4747	expression	
7-145	4748-4750	is	
7-146	4751-4753	of	
7-147	4754-4758	type	
7-148	4759-4764	bytes	
7-149	4764-4765	”	
7-150	4766-4771	issue	
7-151	4772-4777	ARRAY	
7-152	4778-4781	How	
7-153	4782-4784	to	
7-154	4785-4788	map	
7-155	4789-4790	a	
7-156	4791-4801	PostgreSQL	
7-157	4802-4807	ARRAY	
7-158	4808-4810	to	
7-159	4811-4812	a	
7-160	4813-4817	Java	
7-161	4818-4822	List	
7-162	4823-4827	with	
7-163	4828-4831	JPA	
7-164	4832-4835	and	
7-165	4836-4845	Hibernate	
7-166	4846-4849	How	
7-167	4850-4852	to	
7-168	4853-4856	map	
7-169	4857-4861	Java	
7-170	4862-4865	and	
7-171	4866-4869	SQL	
7-172	4870-4876	arrays	
7-173	4877-4881	with	
7-174	4882-4885	JPA	
7-175	4886-4889	and	
7-176	4890-4899	Hibernate	
7-177	4900-4903	How	
7-178	4904-4906	to	
7-179	4907-4910	map	
7-180	4911-4912	a	
7-181	4913-4923	PostgreSQL	
7-182	4924-4928	Enum	
7-183	4929-4934	ARRAY	
7-184	4935-4937	to	
7-185	4938-4939	a	
7-186	4940-4943	JPA	
7-187	4944-4950	entity	
7-188	4951-4959	property	
7-189	4960-4965	using	
7-190	4966-4975	Hibernate	
7-191	4976-4992	Multidimensional	
7-192	4993-4998	array	
7-193	4999-5006	mapping	
7-194	5007-5011	with	
7-195	5012-5015	JPA	
7-196	5016-5019	and	
7-197	5020-5029	Hibernate	
7-198	5030-5039	Hibernate	
7-199	5040-5046	HSQLDB	
7-200	5047-5052	ARRAY	
7-201	5053-5057	Type	
7-202	5058-5064	Equals	
7-203	5065-5068	and	
7-204	5069-5077	HashCode	
7-205	5078-5081	The	
7-206	5082-5086	best	
7-207	5087-5090	way	
7-208	5091-5093	to	
7-209	5094-5103	implement	
7-210	5104-5110	equals	
7-211	5110-5111	,	
7-212	5112-5120	hashCode	
7-213	5120-5121	,	
7-214	5122-5125	and	
7-215	5126-5134	toString	
7-216	5135-5139	with	
7-217	5140-5143	JPA	
7-218	5144-5147	and	
7-219	5148-5157	Hibernate	
7-220	5158-5161	How	
7-221	5162-5164	to	
7-222	5165-5174	implement	
7-223	5175-5181	equals	
7-224	5182-5185	and	
7-225	5186-5194	hashCode	
7-226	5195-5200	using	
7-227	5201-5204	the	
7-228	5205-5211	entity	
7-229	5212-5222	identifier	
7-230	5223-5224	(	
7-231	5224-5231	primary	
7-232	5232-5235	key	
7-233	5235-5236	)	
7-234	5237-5240	How	
7-235	5241-5243	to	
7-236	5244-5253	implement	
7-237	5254-5260	equals	
7-238	5261-5264	and	
7-239	5265-5273	hashCode	
7-240	5274-5279	using	
7-241	5280-5283	the	
7-242	5284-5290	entity	
7-243	5291-5298	natural	
7-244	5299-5309	identifier	
7-245	5310-5323	Relationships	
7-246	5324-5325	A	
7-247	5326-5334	beginner	
7-248	5334-5335	’	
7-249	5335-5336	s	
7-250	5337-5342	guide	
7-251	5343-5345	to	
7-252	5346-5354	database	
7-253	5355-5360	table	
7-254	5361-5374	relationships	
7-255	5375-5384	ManyToOne	
7-256	5385-5388	JPA	
7-257	5389-5392	and	
7-258	5393-5402	Hibernate	
7-259	5403-5414	association	
7-260	5415-5419	best	
7-261	5420-5429	practices	
7-262	5430-5433	The	
7-263	5434-5438	best	
7-264	5439-5442	way	
7-265	5443-5445	to	
7-266	5446-5449	map	
7-267	5450-5451	a	
7-268	5452-5453	@	
7-269	5453-5461	OneToOne	
7-270	5462-5474	relationship	
7-271	5475-5479	with	
7-272	5480-5483	JPA	
7-273	5484-5487	and	
7-274	5488-5497	Hibernate	
7-275	5498-5501	How	
7-276	5502-5504	to	
7-277	5505-5511	change	
7-278	5512-5515	the	
7-279	5516-5517	@	
7-280	5517-5525	OneToOne	
7-281	5526-5532	shared	
7-282	5533-5540	primary	
7-283	5541-5544	key	
7-284	5545-5551	column	
7-285	5552-5556	name	
7-286	5557-5561	with	
7-287	5562-5565	JPA	
7-288	5566-5569	and	
7-289	5570-5579	Hibernate	
7-290	5580-5583	The	
7-291	5584-5588	best	
7-292	5589-5592	way	
7-293	5593-5595	to	
7-294	5596-5599	map	
7-295	5600-5601	a	
7-296	5602-5603	@	
7-297	5603-5612	OneToMany	
7-298	5613-5625	relationship	
7-299	5626-5630	with	
7-300	5631-5634	JPA	
7-301	5635-5638	and	
7-302	5639-5648	Hibernate	
7-303	5649-5652	The	
7-304	5653-5657	best	
7-305	5658-5661	way	
7-306	5662-5664	to	
7-307	5665-5668	use	
7-308	5669-5672	the	
7-309	5673-5674	@	
7-310	5674-5684	ManyToMany	
7-311	5685-5695	annotation	
7-312	5696-5700	with	
7-313	5701-5704	JPA	
7-314	5705-5708	and	
7-315	5709-5718	Hibernate	
7-316	5719-5722	The	
7-317	5723-5727	best	
7-318	5728-5731	way	
7-319	5732-5734	to	
7-320	5735-5738	map	
7-321	5739-5740	a	
7-322	5741-5753	many-to-many	
7-323	5754-5765	association	
7-324	5766-5770	with	
7-325	5771-5776	extra	
7-326	5777-5784	columns	
7-327	5785-5789	when	
7-328	5790-5795	using	
7-329	5796-5799	JPA	
7-330	5800-5803	and	
7-331	5804-5813	Hibernate	
7-332	5814-5817	The	
7-333	5818-5822	best	
7-334	5823-5826	way	
7-335	5827-5829	to	
7-336	5830-5833	map	
7-337	5834-5835	a	
7-338	5836-5845	Composite	
7-339	5846-5853	Primary	
7-340	5854-5857	Key	
7-341	5858-5862	with	
7-342	5863-5866	JPA	
7-343	5867-5870	and	
7-344	5871-5880	Hibernate	
7-345	5881-5884	How	
7-346	5885-5887	to	
7-347	5888-5891	map	
7-348	5892-5893	a	
7-349	5894-5903	composite	
7-350	5904-5914	identifier	
7-351	5915-5920	using	
7-352	5921-5923	an	
7-353	5924-5937	automatically	
7-354	5938-5939	@	
7-355	5939-5953	GeneratedValue	
7-356	5954-5958	with	
7-357	5959-5962	JPA	
7-358	5963-5966	and	
7-359	5967-5976	Hibernate	
7-360	5977-5980	How	
7-361	5981-5983	to	
7-362	5984-5995	synchronize	
7-363	5996-6009	bidirectional	
7-364	6010-6016	entity	
7-365	6017-6029	associations	
7-366	6030-6034	with	
7-367	6035-6038	JPA	
7-368	6039-6042	and	
7-369	6043-6052	Hibernate	
7-370	6053-6056	How	
7-371	6057-6059	to	
7-372	6060-6063	map	
7-373	6064-6065	a	
7-374	6066-6067	@	
7-375	6067-6076	ManyToOne	
7-376	6077-6088	association	
7-377	6089-6094	using	
7-378	6095-6096	a	
7-379	6097-6108	non-Primary	
7-380	6109-6112	Key	
7-381	6113-6119	column	
7-382	6120-6123	How	
7-383	6124-6126	to	
7-384	6127-6136	customize	
7-385	6137-6139	an	
7-386	6140-6146	entity	
7-387	6147-6158	association	
7-388	6159-6163	JOIN	
7-389	6164-6166	ON	
7-390	6167-6173	clause	
7-391	6174-6178	with	
7-392	6179-6188	Hibernate	
7-393	6189-6190	@	
7-394	6190-6201	JoinFormula	
7-395	6202-6205	How	
7-396	6206-6208	to	
7-397	6209-6212	map	
7-398	6213-6214	a	
7-399	6215-6218	JPA	
7-400	6219-6220	@	
7-401	6220-6229	ManyToOne	
7-402	6230-6242	relationship	
7-403	6243-6245	to	
7-404	6246-6247	a	
7-405	6248-6251	SQL	
7-406	6252-6257	query	
7-407	6258-6263	using	
7-408	6264-6267	the	
7-409	6268-6277	Hibernate	
7-410	6278-6279	@	
7-411	6279-6290	JoinFormula	
7-412	6291-6301	annotation	
7-413	6302-6305	How	
7-414	6306-6308	to	
7-415	6309-6317	optimize	
7-416	6318-6332	unidirectional	
7-417	6333-6344	collections	
7-418	6345-6349	with	
7-419	6350-6353	JPA	
7-420	6354-6357	and	
7-421	6358-6367	Hibernate	
7-422	6368-6371	How	
7-423	6372-6374	do	
7-424	6375-6378	Set	
7-425	6379-6382	and	
7-426	6383-6387	List	
7-427	6388-6399	collections	
7-428	6400-6406	behave	
7-429	6407-6411	with	
7-430	6412-6415	JPA	
7-431	6416-6419	and	
7-432	6420-6429	Hibernate	
7-433	6430-6438	Advanced	
7-434	6439-6446	mapping	
7-435	6447-6457	techniques	
7-436	6458-6464	Fluent	
7-437	6465-6468	API	
7-438	6469-6475	entity	
7-439	6476-6484	building	
7-440	6485-6489	with	
7-441	6490-6493	JPA	
7-442	6494-6497	and	
7-443	6498-6507	Hibernate	
7-444	6508-6511	How	
7-445	6512-6514	to	
7-446	6515-6518	map	
7-447	6519-6521	an	
7-448	6522-6531	immutable	
7-449	6532-6538	entity	
7-450	6539-6543	with	
7-451	6544-6547	JPA	
7-452	6548-6551	and	
7-453	6552-6561	Hibernate	
7-454	6562-6565	How	
7-455	6566-6568	to	
7-456	6569-6572	map	
7-457	6573-6576	the	
7-458	6577-6583	latest	
7-459	6584-6589	child	
7-460	6590-6592	of	
7-461	6593-6594	a	
7-462	6595-6601	parent	
7-463	6602-6608	entity	
7-464	6609-6614	using	
7-465	6615-6624	Hibernate	
7-466	6625-6626	@	
7-467	6626-6637	JoinFormula	
7-468	6638-6641	How	
7-469	6642-6644	to	
7-470	6645-6648	map	
7-471	6649-6657	multiple	
7-472	6658-6661	JPA	
7-473	6662-6670	entities	
7-474	6671-6673	to	
7-475	6674-6677	one	
7-476	6678-6686	database	
7-477	6687-6692	table	
7-478	6693-6697	with	
7-479	6698-6707	Hibernate	
7-480	6708-6711	How	
7-481	6712-6714	to	
7-482	6715-6721	update	
7-483	6722-6726	only	
7-484	6727-6728	a	
7-485	6729-6735	subset	
7-486	6736-6738	of	
7-487	6739-6745	entity	
7-488	6746-6756	attributes	
7-489	6757-6762	using	
7-490	6763-6766	JPA	
7-491	6767-6770	and	
7-492	6771-6780	Hibernate	
7-493	6781-6782	@	
7-494	6782-6795	DynamicUpdate	
7-495	6796-6799	How	
7-496	6800-6802	to	
7-497	6803-6806	use	
7-498	6807-6815	external	
7-499	6816-6819	XML	
7-500	6820-6828	mappings	
7-501	6829-6834	files	
7-502	6835-6839	with	
7-503	6840-6843	JPA	
7-504	6844-6847	and	
7-505	6848-6857	Hibernate	
7-506	6858-6861	How	
7-507	6862-6864	to	
7-508	6865-6872	encrypt	
7-509	6873-6876	and	
7-510	6877-6884	decrypt	
7-511	6885-6889	data	
7-512	6890-6894	with	
7-513	6895-6904	Hibernate	
7-514	6905-6908	The	
7-515	6909-6913	best	
7-516	6914-6917	way	
7-517	6918-6920	to	
7-518	6921-6925	soft	
7-519	6926-6932	delete	
7-520	6933-6937	with	
7-521	6938-6947	Hibernate	
7-522	6948-6951	How	
7-523	6952-6954	to	
7-524	6955-6958	fix	
7-525	6959-6960	“	
7-526	6960-6965	wrong	
7-527	6966-6972	column	
7-528	6973-6977	type	
7-529	6978-6989	encountered	
7-530	6989-6990	”	
7-531	6991-7008	schema-validation	
7-532	7009-7015	errors	
7-533	7016-7020	with	
7-534	7021-7024	JPA	
7-535	7025-7028	and	
7-536	7029-7038	Hibernate	
7-537	7039-7042	How	
7-538	7043-7045	to	
7-539	7046-7051	audit	
7-540	7052-7058	entity	
7-541	7059-7072	modifications	
7-542	7073-7078	using	
7-543	7079-7082	the	
7-544	7083-7086	JPA	
7-545	7087-7088	@	
7-546	7088-7103	EntityListeners	
7-547	7103-7104	,	
7-548	7105-7106	@	
7-549	7106-7114	Embedded	
7-550	7114-7115	,	
7-551	7116-7119	and	
7-552	7120-7121	@	
7-553	7121-7131	Embeddable	
7-554	7132-7143	annotations	
7-555	7144-7147	How	
7-556	7148-7150	to	
7-557	7151-7154	use	
7-558	7155-7156	@	
7-559	7156-7166	PrePersist	
7-560	7167-7170	and	
7-561	7171-7172	@	
7-562	7172-7181	PreUpdate	
7-563	7182-7184	on	
7-564	7185-7195	Embeddable	
7-565	7196-7200	with	
7-566	7201-7204	JPA	
7-567	7205-7208	and	
7-568	7209-7218	Hibernate	
7-569	7219-7222	How	
7-570	7223-7225	to	
7-571	7226-7229	map	
7-572	7230-7239	camelCase	
7-573	7240-7250	properties	
7-574	7251-7253	to	
7-575	7254-7264	snake_case	
7-576	7265-7271	column	
7-577	7272-7277	names	
7-578	7278-7282	with	
7-579	7283-7292	Hibernate	
7-580	7293-7304	Identifiers	
7-581	7305-7306	A	
7-582	7307-7315	beginner	
7-583	7315-7316	’	
7-584	7316-7317	s	
7-585	7318-7323	guide	
7-586	7324-7326	to	
7-587	7327-7334	natural	
7-588	7335-7338	and	
7-589	7339-7348	surrogate	
7-590	7349-7357	database	
7-591	7358-7362	keys	
7-592	7363-7372	Hibernate	
7-593	7373-7381	Identity	
7-594	7381-7382	,	
7-595	7383-7391	Sequence	
7-596	7391-7392	,	
7-597	7393-7396	and	
7-598	7397-7402	Table	
7-599	7403-7404	(	
7-600	7404-7412	Sequence	
7-601	7412-7413	)	
7-602	7414-7423	generator	
7-603	7424-7427	How	
7-604	7428-7430	to	
7-605	7431-7439	generate	
7-606	7440-7443	JPA	
7-607	7444-7450	entity	
7-608	7451-7461	identifier	
7-609	7462-7468	values	
7-610	7469-7474	using	
7-611	7475-7476	a	
7-612	7477-7485	database	
7-613	7486-7494	sequence	
7-614	7495-7498	The	
7-615	7499-7501	hi	
7-616	7501-7502	/	
7-617	7502-7504	lo	
7-618	7505-7514	algorithm	
7-619	7515-7524	Hibernate	
7-620	7525-7531	pooled	
7-621	7532-7535	and	
7-622	7536-7545	pooled-lo	
7-623	7546-7556	identifier	
7-624	7557-7567	generators	
7-625	7568-7569	A	
7-626	7570-7578	beginner	
7-627	7578-7579	’	
7-628	7579-7580	s	
7-629	7581-7586	guide	
7-630	7587-7589	to	
7-631	7590-7599	Hibernate	
7-632	7600-7608	enhanced	
7-633	7609-7619	identifier	
7-634	7620-7630	generators	
7-635	7631-7634	How	
7-636	7635-7637	to	
7-637	7638-7645	migrate	
7-638	7646-7649	the	
7-639	7650-7654	hilo	
7-640	7655-7664	Hibernate	
7-641	7665-7675	identifier	
7-642	7676-7685	optimizer	
7-643	7686-7688	to	
7-644	7689-7692	the	
7-645	7693-7699	pooled	
7-646	7700-7708	strategy	
7-647	7709-7712	Why	
7-648	7713-7716	you	
7-649	7717-7723	should	
7-650	7724-7729	never	
7-651	7730-7733	use	
7-652	7734-7737	the	
7-653	7738-7743	TABLE	
7-654	7744-7754	identifier	
7-655	7755-7764	generator	
7-656	7765-7769	with	
7-657	7770-7773	JPA	
7-658	7774-7777	and	
7-659	7778-7787	Hibernate	
7-660	7788-7791	Why	
7-661	7792-7798	should	
7-662	7799-7802	not	
7-663	7803-7806	use	
7-664	7807-7810	the	
7-665	7811-7815	AUTO	
7-666	7816-7819	JPA	
7-667	7820-7834	GenerationType	
7-668	7835-7839	with	
7-669	7840-7845	MySQL	
7-670	7846-7849	and	
7-671	7850-7859	Hibernate	
7-672	7860-7863	How	
7-673	7864-7866	to	
7-674	7867-7874	replace	
7-675	7875-7878	the	
7-676	7879-7884	TABLE	
7-677	7885-7895	identifier	
7-678	7896-7905	generator	
7-679	7906-7910	with	
7-680	7911-7917	either	
7-681	7918-7926	SEQUENCE	
7-682	7927-7929	or	
7-683	7930-7938	IDENTITY	
7-684	7939-7941	in	
7-685	7942-7943	a	
7-686	7944-7952	portable	
7-687	7953-7956	way	
7-688	7957-7967	PostgreSQL	
7-689	7968-7974	SERIAL	
7-690	7975-7981	column	
7-691	7982-7985	and	
7-692	7986-7995	Hibernate	
7-693	7996-8004	IDENTITY	
7-694	8005-8014	generator	
7-695	8015-8018	How	
7-696	8019-8021	to	
7-697	8022-8029	combine	
7-698	8030-8033	the	
7-699	8034-8043	Hibernate	
7-700	8044-8052	assigned	
7-701	8053-8062	generator	
7-702	8063-8067	with	
7-703	8068-8069	a	
7-704	8070-8078	sequence	
7-705	8079-8081	or	
7-706	8082-8084	an	
7-707	8085-8093	identity	
7-708	8094-8100	column	
7-709	8101-8104	How	
7-710	8105-8107	to	
7-711	8108-8117	implement	
7-712	8118-8119	a	
7-713	8120-8126	custom	
7-714	8127-8139	String-based	
7-715	8140-8148	sequence	
7-716	8149-8159	identifier	
7-717	8160-8169	generator	
7-718	8170-8174	with	
7-719	8175-8184	Hibernate	
7-720	8185-8192	MariaDB	
7-721	8193-8197	10.3	
7-722	8198-8206	supports	
7-723	8207-8215	database	
7-724	8216-8225	sequences	
7-725	8226-8235	Hibernate	
7-726	8236-8239	and	
7-727	8240-8244	UUID	
7-728	8245-8256	identifiers	
7-729	8257-8260	How	
7-730	8261-8263	to	
7-731	8264-8267	use	
7-732	8268-8269	a	
7-733	8270-8273	JVM	
7-734	8274-8276	or	
7-735	8277-8285	database	
7-736	8286-8300	auto-generated	
7-737	8301-8305	UUID	
7-738	8306-8316	identifier	
7-739	8317-8321	with	
7-740	8322-8325	JPA	
7-741	8326-8329	and	
7-742	8330-8339	Hibernate	
7-743	8340-8343	The	
7-744	8344-8348	best	
7-745	8349-8352	way	
7-746	8353-8355	to	
7-747	8356-8359	map	
7-748	8360-8361	a	
7-749	8362-8363	@	
7-750	8363-8372	NaturalId	
7-751	8373-8381	business	
7-752	8382-8385	key	
7-753	8386-8390	with	
7-754	8391-8394	JPA	
7-755	8395-8398	and	
7-756	8399-8408	Hibernate	
7-757	8409-8420	Inheritance	
7-758	8421-8424	The	
7-759	8425-8429	best	
7-760	8430-8433	way	
7-761	8434-8436	to	
7-762	8437-8440	use	
7-763	8441-8447	entity	
7-764	8448-8459	inheritance	
7-765	8460-8464	with	
7-766	8465-8468	JPA	
7-767	8469-8472	and	
7-768	8473-8482	Hibernate	
7-769	8483-8486	The	
7-770	8487-8491	best	
7-771	8492-8495	way	
7-772	8496-8498	to	
7-773	8499-8502	map	
7-774	8503-8506	the	
7-775	8507-8519	SINGLE_TABLE	
7-776	8520-8531	inheritance	
7-777	8532-8536	with	
7-778	8537-8540	JPA	
7-779	8541-8544	and	
7-780	8545-8554	Hibernate	
7-781	8555-8560	MySQL	
7-782	8561-8562	8	
7-783	8563-8570	support	
7-784	8571-8574	for	
7-785	8575-8581	custom	
7-786	8582-8585	SQL	
7-787	8586-8591	CHECK	
7-788	8592-8603	constraints	
7-789	8604-8614	simplifies	
7-790	8615-8627	SINGLE_TABLE	
7-791	8628-8639	inheritance	
7-792	8640-8644	data	
7-793	8645-8654	integrity	
7-794	8655-8665	validation	
7-795	8666-8671	rules	
7-796	8672-8675	The	
7-797	8676-8680	best	
7-798	8681-8684	way	
7-799	8685-8687	to	
7-800	8688-8691	map	
7-801	8692-8695	the	
7-802	8696-8697	@	
7-803	8697-8716	DiscriminatorColumn	
7-804	8717-8721	with	
7-805	8722-8725	JPA	
7-806	8726-8729	and	
7-807	8730-8739	Hibernate	
7-808	8740-8743	How	
7-809	8744-8746	to	
7-810	8747-8754	inherit	
7-811	8755-8765	properties	
7-812	8766-8770	from	
7-813	8771-8772	a	
7-814	8773-8777	base	
7-815	8778-8783	class	
7-816	8784-8790	entity	
7-817	8791-8796	using	
7-818	8797-8798	@	
7-819	8798-8814	MappedSuperclass	
7-820	8815-8819	with	
7-821	8820-8823	JPA	
7-822	8824-8827	and	
7-823	8828-8837	Hibernate	
7-824	8838-8841	How	
7-825	8842-8844	to	
7-826	8845-8850	order	
7-827	8851-8857	entity	
7-828	8858-8868	subclasses	
7-829	8869-8871	by	
7-830	8872-8877	their	
7-831	8878-8883	class	
7-832	8884-8888	type	
7-833	8889-8894	using	
7-834	8895-8898	JPA	
7-835	8899-8902	and	
7-836	8903-8912	Hibernate	
7-837	8913-8923	Connection	
7-838	8924-8934	Management	
7-839	8935-8938	The	
7-840	8939-8945	simple	
7-841	8946-8957	scalability	
7-842	8958-8966	equation	
7-843	8967-8970	The	
7-844	8971-8978	anatomy	
7-845	8979-8981	of	
7-846	8982-8992	Connection	
7-847	8993-9000	Pooling	
7-848	9001-9004	Why	
7-849	9005-9008	you	
7-850	9009-9015	should	
7-851	9016-9019	use	
7-852	9020-9029	FlexyPool	
7-853	9030-9033	How	
7-854	9034-9036	to	
7-855	9037-9044	monitor	
7-856	9045-9049	your	
7-857	9050-9060	connection	
7-858	9061-9065	pool	
7-859	9066-9070	with	
7-860	9071-9080	FlexyPool	
7-861	9081-9084	How	
7-862	9085-9087	to	
7-863	9088-9095	monitor	
7-864	9096-9097	a	
7-865	9098-9102	Java	
7-866	9103-9105	EE	
7-867	9106-9116	DataSource	
7-868	9117-9120	Why	
7-869	9121-9124	you	
7-870	9125-9131	should	
7-871	9132-9138	always	
7-872	9139-9142	use	
7-873	9143-9192	hibernate.connection.provider_disables_autocommit	
7-874	9193-9196	for	
7-875	9197-9211	resource-local	
7-876	9212-9215	JPA	
7-877	9216-9228	transactions	
7-878	9229-9232	How	
7-879	9233-9237	does	
7-880	9238-9248	aggressive	
7-881	9249-9259	connection	
7-882	9260-9267	release	
7-883	9268-9272	work	
7-884	9273-9275	in	
7-885	9276-9285	Hibernate	
7-886	9286-9297	Persistence	
7-887	9298-9305	Context	
7-888	9306-9309	The	
7-889	9310-9313	JPA	
7-890	9314-9317	and	
7-891	9318-9327	Hibernate	
7-892	9328-9339	first-level	
7-893	9340-9345	cache	
7-894	9346-9347	A	
7-895	9348-9356	beginner	
7-896	9356-9357	’	
7-897	9357-9358	s	
7-898	9359-9364	guide	
7-899	9365-9367	to	
7-900	9368-9371	JPA	
7-901	9371-9372	/	
7-902	9372-9381	Hibernate	
7-903	9382-9388	entity	
7-904	9389-9394	state	
7-905	9395-9406	transitions	
7-906	9407-9408	A	
7-907	9409-9417	beginner	
7-908	9417-9418	’	
7-909	9418-9419	s	
7-910	9420-9425	guide	
7-911	9426-9428	to	
7-912	9429-9432	JPA	
7-913	9433-9436	and	
7-914	9437-9446	Hibernate	
7-915	9447-9454	Cascade	
7-916	9455-9460	Types	
7-917	9461-9464	How	
7-918	9465-9469	does	
7-919	9470-9483	orphanRemoval	
7-920	9484-9488	work	
7-921	9489-9493	with	
7-922	9494-9497	JPA	
7-923	9498-9501	and	
7-924	9502-9511	Hibernate	
7-925	9512-9513	A	
7-926	9514-9522	beginner	
7-927	9522-9523	’	
7-928	9523-9524	s	
7-929	9525-9530	guide	
7-930	9531-9533	to	
7-931	9534-9539	flush	
7-932	9540-9550	strategies	
7-933	9551-9553	in	
7-934	9554-9557	JPA	
7-935	9558-9561	and	
7-936	9562-9571	Hibernate	
7-937	9572-9575	How	
7-938	9576-9580	does	
7-939	9581-9588	persist	
7-940	9589-9592	and	
7-941	9593-9598	merge	
7-942	9599-9603	work	
7-943	9604-9606	in	
7-944	9607-9610	JPA	
7-945	9611-9614	How	
7-946	9615-9617	do	
7-947	9618-9621	JPA	
7-948	9622-9629	persist	
7-949	9629-9630	,	
7-950	9631-9636	merge	
7-951	9637-9640	and	
7-952	9641-9650	Hibernate	
7-953	9651-9655	save	
7-954	9655-9656	,	
7-955	9657-9663	update	
7-956	9663-9664	,	
7-957	9665-9677	saveOrUpdate	
7-958	9678-9682	work	
7-959	9683-9686	How	
7-960	9687-9689	to	
7-961	9690-9695	merge	
7-962	9696-9702	entity	
7-963	9703-9714	collections	
7-964	9715-9719	with	
7-965	9720-9723	JPA	
7-966	9724-9727	and	
7-967	9728-9737	Hibernate	
7-968	9738-9741	How	
7-969	9742-9746	does	
7-970	9747-9751	AUTO	
7-971	9752-9757	flush	
7-972	9758-9766	strategy	
7-973	9767-9771	work	
7-974	9772-9774	in	
7-975	9775-9784	Hibernate	
7-976	9785-9788	How	
7-977	9789-9791	to	
7-978	9792-9800	override	
7-979	9801-9804	the	
7-980	9805-9812	default	
7-981	9813-9822	Hibernate	
7-982	9823-9830	Session	
7-983	9831-9840	FlushMode	
7-984	9841-9844	How	
7-985	9845-9847	do	
7-986	9848-9851	JPA	
7-987	9852-9855	and	
7-988	9856-9865	Hibernate	
7-989	9866-9872	define	
7-990	9873-9876	the	
7-991	9877-9881	AUTO	
7-992	9882-9887	flush	
7-993	9888-9892	mode	
7-994	9893-9894	A	
7-995	9895-9903	beginner	
7-996	9903-9904	’	
7-997	9904-9905	s	
7-998	9906-9911	guide	
7-999	9912-9914	to	
7-1000	9915-9924	Hibernate	
7-1001	9925-9930	flush	
7-1002	9931-9940	operation	
7-1003	9941-9946	order	
7-1004	9947-9950	The	
7-1005	9951-9955	best	
7-1006	9956-9959	way	
7-1007	9960-9962	to	
7-1008	9963-9968	clone	
7-1009	9969-9971	or	
7-1010	9972-9981	duplicate	
7-1011	9982-9984	an	
7-1012	9985-9991	entity	
7-1013	9992-9996	with	
7-1014	9997-10000	JPA	
7-1015	10001-10004	and	
7-1016	10005-10014	Hibernate	
7-1017	10015-10018	How	
7-1018	10019-10021	to	
7-1019	10022-10031	intercept	
7-1020	10032-10038	entity	
7-1021	10039-10046	changes	
7-1022	10047-10051	with	
7-1023	10052-10061	Hibernate	
7-1024	10062-10067	event	
7-1025	10068-10077	listeners	
7-1026	10078-10081	The	
7-1027	10082-10089	anatomy	
7-1028	10090-10092	of	
7-1029	10093-10102	Hibernate	
7-1030	10103-10108	dirty	
7-1031	10109-10117	checking	
7-1032	10118-10127	mechanism	
7-1033	10128-10131	How	
7-1034	10132-10134	to	
7-1035	10135-10144	customize	
7-1036	10145-10154	Hibernate	
7-1037	10155-10160	dirty	
7-1038	10161-10169	checking	
7-1039	10170-10179	mechanism	
7-1040	10180-10188	Fetching	
7-1041	10189-10199	Pagination	
7-1042	10200-10204	best	
7-1043	10205-10214	practices	
7-1044	10215-10218	JPA	
7-1045	10219-10226	Default	
7-1046	10227-10232	Fetch	
7-1047	10233-10237	Plan	
7-1048	10238-10241	How	
7-1049	10242-10244	do	
7-1050	10245-10249	find	
7-1051	10250-10253	and	
7-1052	10254-10266	getReference	
7-1053	10267-10280	EntityManager	
7-1054	10281-10288	methods	
7-1055	10289-10293	work	
7-1056	10294-10298	when	
7-1057	10299-10304	using	
7-1058	10305-10308	JPA	
7-1059	10309-10312	and	
7-1060	10313-10322	Hibernate	
7-1061	10323-10324	N	
7-1062	10324-10325	+	
7-1063	10325-10326	1	
7-1064	10327-10332	query	
7-1065	10333-10340	problem	
7-1066	10341-10345	with	
7-1067	10346-10349	JPA	
7-1068	10350-10353	and	
7-1069	10354-10363	Hibernate	
7-1070	10364-10367	The	
7-1071	10368-10372	best	
7-1072	10373-10376	way	
7-1073	10377-10379	to	
7-1074	10380-10385	fetch	
7-1075	10386-10394	multiple	
7-1076	10395-10403	entities	
7-1077	10404-10406	by	
7-1078	10407-10409	id	
7-1079	10410-10415	using	
7-1080	10416-10419	JPA	
7-1081	10420-10423	and	
7-1082	10424-10433	Hibernate	
7-1083	10434-10435	A	
7-1084	10436-10444	beginner	
7-1085	10444-10445	’	
7-1086	10445-10446	s	
7-1087	10447-10452	guide	
7-1088	10453-10455	to	
7-1089	10456-10465	Hibernate	
7-1090	10466-10474	fetching	
7-1091	10475-10485	strategies	
7-1092	10486-10491	EAGER	
7-1093	10492-10500	fetching	
7-1094	10501-10503	is	
7-1095	10504-10505	a	
7-1096	10506-10510	code	
7-1097	10511-10516	smell	
7-1098	10517-10520	The	
7-1099	10521-10525	best	
7-1100	10526-10529	way	
7-1101	10530-10532	to	
7-1102	10533-10536	map	
7-1103	10537-10538	a	
7-1104	10539-10549	projection	
7-1105	10550-10555	query	
7-1106	10556-10558	to	
7-1107	10559-10560	a	
7-1108	10561-10564	DTO	
7-1109	10565-10566	(	
7-1110	10566-10570	Data	
7-1111	10571-10579	Transfer	
7-1112	10580-10586	Object	
7-1113	10586-10587	)	
7-1114	10588-10592	with	
7-1115	10593-10596	JPA	
7-1116	10597-10600	and	
7-1117	10601-10610	Hibernate	
7-1118	10611-10614	How	
7-1119	10615-10617	to	
7-1120	10618-10623	write	
7-1121	10624-10625	a	
7-1122	10626-10633	compact	
7-1123	10634-10637	DTO	
7-1124	10638-10648	projection	
7-1125	10649-10654	query	
7-1126	10655-10659	with	
7-1127	10660-10663	JPA	
7-1128	10664-10667	How	
7-1129	10668-10670	to	
7-1130	10671-10676	fetch	
7-1131	10677-10678	a	
7-1132	10679-10690	one-to-many	
7-1133	10691-10694	DTO	
7-1134	10695-10705	projection	
7-1135	10706-10710	with	
7-1136	10711-10714	JPA	
7-1137	10715-10718	and	
7-1138	10719-10728	Hibernate	
7-1139	10729-10732	The	
7-1140	10733-10737	best	
7-1141	10738-10741	way	
7-1142	10742-10744	to	
7-1143	10745-10751	handle	
7-1144	10752-10755	the	
7-1145	10756-10783	LazyInitializationException	
7-1146	10784-10787	The	
7-1147	10788-10792	best	
7-1148	10793-10796	way	
7-1149	10797-10799	to	
7-1150	10800-10804	lazy	
7-1151	10805-10809	load	
7-1152	10810-10816	entity	
7-1153	10817-10827	attributes	
7-1154	10828-10833	using	
7-1155	10834-10837	JPA	
7-1156	10838-10841	and	
7-1157	10842-10851	Hibernate	
7-1158	10852-10861	Hibernate	
7-1159	10862-10871	LazyToOne	
7-1160	10872-10882	annotation	
7-1161	10883-10886	The	
7-1162	10887-10891	best	
7-1163	10892-10895	way	
7-1164	10896-10898	to	
7-1165	10899-10909	initialize	
7-1166	10910-10914	LAZY	
7-1167	10915-10921	entity	
7-1168	10922-10925	and	
7-1169	10926-10936	collection	
7-1170	10937-10944	proxies	
7-1171	10945-10949	with	
7-1172	10950-10953	JPA	
7-1173	10954-10957	and	
7-1174	10958-10967	Hibernate	
7-1175	10968-10971	Why	
7-1176	10972-10975	you	
7-1177	10976-10982	should	
7-1178	10983-10988	avoid	
7-1179	10989-10994	EXTRA	
7-1180	10995-10999	Lazy	
7-1181	11000-11011	Collections	
7-1182	11012-11016	with	
7-1183	11017-11026	Hibernate	
7-1184	11027-11036	ResultSet	
7-1185	11037-11046	statement	
7-1186	11047-11055	fetching	
7-1187	11056-11060	with	
7-1188	11061-11065	JDBC	
7-1189	11066-11069	and	
7-1190	11070-11079	Hibernate	
7-1191	11080-11083	The	
7-1192	11084-11088	best	
7-1193	11089-11092	way	
7-1194	11093-11095	to	
7-1195	11096-11099	fix	
7-1196	11100-11103	the	
7-1197	11104-11113	Hibernate	
7-1198	11114-11139	MultipleBagFetchException	
7-1199	11140-11143	How	
7-1200	11144-11146	to	
7-1201	11147-11152	fetch	
7-1202	11153-11161	entities	
7-1203	11162-11170	multiple	
7-1204	11171-11177	levels	
7-1205	11178-11182	deep	
7-1206	11183-11187	with	
7-1207	11188-11197	Hibernate	
7-1208	11198-11201	The	
7-1209	11202-11206	Open	
7-1210	11207-11214	Session	
7-1211	11215-11217	In	
7-1212	11218-11222	View	
7-1213	11223-11235	Anti-Pattern	
7-1214	11236-11239	The	
7-1215	11240-11275	hibernate.enable_lazy_load_no_trans	
7-1216	11276-11288	Anti-Pattern	
7-1217	11289-11292	How	
7-1218	11293-11297	does	
7-1219	11298-11303	MySQL	
7-1220	11304-11310	result	
7-1221	11311-11314	set	
7-1222	11315-11324	streaming	
7-1223	11325-11332	perform	
7-1224	11333-11335	vs	
7-1225	11336-11344	fetching	
7-1226	11345-11348	the	
7-1227	11349-11354	whole	
7-1228	11355-11359	JDBC	
7-1229	11360-11369	ResultSet	
7-1230	11370-11372	at	
7-1231	11373-11377	once	
7-1232	11378-11381	How	
7-1233	11382-11386	does	
7-1234	11387-11388	a	
7-1235	11389-11392	JPA	
7-1236	11393-11398	Proxy	
7-1237	11399-11403	work	
7-1238	11404-11407	and	
7-1239	11408-11411	how	
7-1240	11412-11414	to	
7-1241	11415-11422	unproxy	
7-1242	11423-11425	it	
7-1243	11426-11430	with	
7-1244	11431-11440	Hibernate	
7-1245	11441-11444	The	
7-1246	11445-11449	best	
7-1247	11450-11453	way	
7-1248	11454-11456	to	
7-1249	11457-11460	fix	
7-1250	11461-11464	the	
7-1251	11465-11474	Hibernate	
7-1252	11475-11476	“	
7-1253	11476-11485	HHH000104	
7-1254	11485-11486	:	
7-1255	11487-11498	firstResult	
7-1256	11498-11499	/	
7-1257	11499-11509	maxResults	
7-1258	11510-11519	specified	
7-1259	11520-11524	with	
7-1260	11525-11535	collection	
7-1261	11536-11541	fetch	
7-1262	11541-11542	;	
7-1263	11543-11551	applying	
7-1264	11552-11554	in	
7-1265	11555-11561	memory	
7-1266	11561-11562	!	
7-1267	11562-11563	”	

#Text=warning message
#Text=How to detect HHH000104 issues with the hibernate.query.fail_on_pagination_over_collection_fetch configuration property
#Text=Bytecode Enhancement
#Text=Maven and Gradle Hibernate Enhance Plugin
#Text=How to enable bytecode enhancement dirty checking in Hibernate
#Text=How does the bytecode enhancement dirty checking mechanism work in Hibernate 4.3
#Text=Concurrency Control
#Text=Data knowledge stack
#Text=A beginner’s guide to ACID and database transactions
#Text=Optimistc vs.
8-1	11564-11571	warning	
8-2	11572-11579	message	
8-3	11580-11583	How	
8-4	11584-11586	to	
8-5	11587-11593	detect	
8-6	11594-11603	HHH000104	
8-7	11604-11610	issues	
8-8	11611-11615	with	
8-9	11616-11619	the	
8-10	11620-11676	hibernate.query.fail_on_pagination_over_collection_fetch	
8-11	11677-11690	configuration	
8-12	11691-11699	property	
8-13	11700-11708	Bytecode	
8-14	11709-11720	Enhancement	
8-15	11721-11726	Maven	
8-16	11727-11730	and	
8-17	11731-11737	Gradle	
8-18	11738-11747	Hibernate	
8-19	11748-11755	Enhance	
8-20	11756-11762	Plugin	
8-21	11763-11766	How	
8-22	11767-11769	to	
8-23	11770-11776	enable	
8-24	11777-11785	bytecode	
8-25	11786-11797	enhancement	
8-26	11798-11803	dirty	
8-27	11804-11812	checking	
8-28	11813-11815	in	
8-29	11816-11825	Hibernate	
8-30	11826-11829	How	
8-31	11830-11834	does	
8-32	11835-11838	the	
8-33	11839-11847	bytecode	
8-34	11848-11859	enhancement	
8-35	11860-11865	dirty	
8-36	11866-11874	checking	
8-37	11875-11884	mechanism	
8-38	11885-11889	work	
8-39	11890-11892	in	
8-40	11893-11902	Hibernate	
8-41	11903-11906	4.3	
8-42	11907-11918	Concurrency	
8-43	11919-11926	Control	
8-44	11927-11931	Data	
8-45	11932-11941	knowledge	
8-46	11942-11947	stack	
8-47	11948-11949	A	
8-48	11950-11958	beginner	
8-49	11958-11959	’	
8-50	11959-11960	s	
8-51	11961-11966	guide	
8-52	11967-11969	to	
8-53	11970-11974	ACID	
8-54	11975-11978	and	
8-55	11979-11987	database	
8-56	11988-12000	transactions	
8-57	12001-12010	Optimistc	
8-58	12011-12013	vs	
8-59	12013-12014	.	

#Text=Pessimistic Locking
#Text=A beginner’s guide to database deadlock
#Text=How does the 2PL (Two-Phase Locking) algorithm work
#Text=How does MVCC (Multi-Version Concurrency Control) work
#Text=How to get the current database transaction id
#Text=How to log the database transaction id using MDC (Mapped Diagnostic Context)
#Text=How does the entity version property work when merging with JPA and Hibernate
#Text=Optimistic locking version property with JPA and Hibernate
#Text=The best way to map an entity version property with JPA and Hibernate
#Text=How do PostgreSQL advisory locks work
#Text=How to implement a database job queue using SKIP LOCKED
#Text=A beginner’s guide to database locking and the lost update phenomena
#Text=How to prevent lost updates in long conversations
#Text=A beginner’s guide to Dirty Read anomaly
#Text=A beginner’s guide to Non-Repeatable Read anomaly
#Text=A beginner’s guide to Phantom Read anomaly
#Text=A beginner’s guide to Read and Write Skew phenomena
#Text=A beginner’s guide to the Write Skew anomaly, and how it differs between 2PL and MVCC
#Text=How does database pessimistic locking interact with INSERT, UPDATE, and DELETE SQL statements
#Text=How do UPSERT and MERGE work in Oracle, SQL Server, PostgreSQL, and MySQL
#Text=Logical vs physical clock optimistic locking
#Text=How to retry JPA transactions after an OptimisticLockException
#Text=How does Hibernate guarantee application-level repeatable reads
#Text=Hibernate collections optimistic locking
#Text=How to address the OptimisticLockException in JPA and Hibernate
#Text=How to prevent OptimisticLockException with Hibernate versionless optimistic locking
#Text=A beginner’s guide to transaction isolation levels in enterprise Java
#Text=A beginner’s guide to Java Persistence locking
#Text=How does LockModeType.OPTIMISTIC work in JPA and Hibernate
#Text=How to fix optimistic locking race conditions with pessimistic locking
#Text=How does LockModeType.OPTIMISTIC_FORCE_INCREMENT work in JPA and Hibernate
#Text=How does LockModeType.PESSIMISTIC_FORCE_INCREMENT work in JPA and Hibernate
#Text=How do LockModeType.PESSIMISTIC_READ and LockModeType.PESSIMISTIC_WRITE work in JPA and Hibernate
#Text=How does CascadeType.LOCK works in JPA and Hibernate
#Text=How to increment the parent entity version whenever a child entity gets modified with JPA and Hibernate
#Text=Spring read-only transaction Hibernate optimization
#Text=Read-write and read-only transaction routing with Spring
#Text=Batching
#Text=Batch processing best practices
#Text=The best way to do batch processing with JPA and Hibernate
#Text=How to batch INSERT and UPDATE statements with Hibernate
#Text=How to batch DELETE statements with Hibernate
#Text=How to customize the JDBC batch size for each Persistence Context with Hibernate
#Text=How to find which statement failed in a JDBC Batch Update
#Text=How to optimize the merge operation using update while batching with JPA and Hibernate
#Text=How to enable multi-row inserts with the PostgreSQL reWriteBatchedInserts configuration property
#Text=Queries
#Text=A beginner’s guide to JPA and Hibernate Query setParameter method
#Text=A beginner’s guide to JPA and Hibernate query hints
#Text=Query timeout with JPA and Hibernate
#Text=The best way to use the JPA SqlResultSetMapping
#Text=How to return a Map result from a JPA or Hibernate query
#Text=How to improve statement caching efficiency with IN clause parameter padding
#Text=A beginner’s guide to the Hibernate JPQL and Native Query Plan Cache
#Text=How to optimize JPQL and Criteria API query plans with Hibernate Statistics
#Text=How to intercept and modify SQL queries with the Hibernate StatementInspector
#Text=The best way to use the JPQL DISTINCT keyword with JPA and Hibernate
#Text=How to JOIN unrelated entities with JPA and Hibernate
#Text=How to resolve the Hibernate global database schema and catalog for native SQL queries
#Text=How to map table rows to columns using SQL PIVOT or CASE expressions
#Text=The JPA EntityManager createNativeQuery is a Magic Wand
#Text=Why you should use the Hibernate ResultTransformer to customize result set mappings
#Text=The best way to use a Hibernate ResultTransformer
#Text=Why you should definitely learn SQL Window Functions
#Text=Query pagination with JPA and Hibernate
#Text=What’s new in JPA 2.2 – Stream the result of a Query execution
#Text=How to get the actual execution plan for an Oracle SQL query using Hibernate query hints
#Text=How to solve the PostgreSQL :: cast operator issue with JPA and Hibernate
#Text=The best way to use SQL functions in JPQL or Criteria API queries with JPA and Hibernate
#Text=How to execute SQL functions with multiple parameters in a JPQL query with Hibernate
#Text=How to query parent rows when all children must match the filtering criteria with SQL and Hibernate
#Text=How to bind custom Hibernate parameter types to JPA queries
#Text=Statement Caching
#Text=How does a relational database execute SQL statements and prepared statements
#Text=MySQL JDBC Statement Caching
#Text=Bulk Processing
#Text=Bulk Update and Delete with JPA and Hibernate
#Text=JPA Criteria API Bulk Update and Delete
#Text=Bulk Update optimistic locking with JPA and Hibernate
#Text=Criteria Queries
#Text=How to write JPA Criteria API queries using Codota
#Text=JPA Criteria Metamodel Generation and Usage Guide
#Text=How to query by entity type using JPA Criteria API
#Text=Why you should always check the SQL statements generated by Criteria API
#Text=The performance penalty of Class.forName when parsing JPQL and Criteria queries
#Text=How does Hibernate handle JPA Criteria API literals
#Text=Stored Procedures
#Text=The best way to call a stored procedure with JPA and Hibernate
#Text=How to call Oracle stored procedures and functions with JPA and Hibernate
#Text=How to call SQL Server stored procedures and functions with JPA and Hibernate
#Text=How to call PostgreSQL functions (stored procedures) with JPA and Hibernate
#Text=How to call MySQL stored procedures and functions with JPA and Hibernate
#Text=Caching
#Text=A beginner’s guide to Cache synchronization strategies
#Text=Things to consider before jumping to enterprise caching
#Text=Caching best practices
#Text=How does Hibernate store second-level cache entries
#Text=How does Hibernate READ_ONLY CacheConcurrencyStrategy work
#Text=How does Hibernate NONSTRICT_READ_WRITE CacheConcurrencyStrategy work
#Text=How does Hibernate READ_WRITE CacheConcurrencyStrategy work
#Text=How does Hibernate TRANSACTIONAL CacheConcurrencyStrategy work
#Text=How does Hibernate Collection Cache work
#Text=How does Hibernate Query Cache work
#Text=How to use the Hibernate Query Cache for DTO projections
#Text=How to avoid the Hibernate Query Cache N+1 issue
#Text=How to cache non-existing entity fetch results with JPA and Hibernate
#Text=Statistics
#Text=A beginner’s guide to Hibernate Statistics
#Text=How to expose Hibernate Statistics via JMX
#Text=Audit Logging
#Text=A beginner’s guide to CDC (Change Data Capture)
#Text=MySQL audit logging using triggers
#Text=The best way to implement an audit log using Hibernate Envers
#Text=How to extract change data events from MySQL to Kafka using Debezium
#Text=Multitenancy
#Text=A beginner’s guide to database multitenancy
#Text=Hibernate database catalog multitenancy
#Text=Hibernate database schema multitenancy
#Text=Testing
#Text=The minimal configuration for testing Hibernate
#Text=Hibernate integration testing strategies
#Text=How to run database integration tests 20 times faster
#Text=How to run integration tests at warp-speed using Docker and tmpfs
#Text=The best way to log JDBC statements
#Text=The best way to detect database connection leaks
#Text=How to install DB2 Express-C on Docker and set up the JDBC connection properties
#Text=How to get started with CockroachDB and Hibernate
#Text=Online Workshops
#Text=If you enjoyed this article, I bet you are going to love my upcoming 4-day x 4 hours High-Performance Java Persistence Online Workshop
#Text=Follow @vlad_mihalcea
#Text=Insert details about how the information is going to be processedDOWNLOAD NOW
#Text=Leave a Reply Cancel replyYour email address will not be published.
9-1	12015-12026	Pessimistic	
9-2	12027-12034	Locking	
9-3	12035-12036	A	
9-4	12037-12045	beginner	
9-5	12045-12046	’	
9-6	12046-12047	s	
9-7	12048-12053	guide	
9-8	12054-12056	to	
9-9	12057-12065	database	
9-10	12066-12074	deadlock	
9-11	12075-12078	How	
9-12	12079-12083	does	
9-13	12084-12087	the	
9-14	12088-12091	2PL	
9-15	12092-12093	(	
9-16	12093-12102	Two-Phase	
9-17	12103-12110	Locking	
9-18	12110-12111	)	
9-19	12112-12121	algorithm	
9-20	12122-12126	work	
9-21	12127-12130	How	
9-22	12131-12135	does	
9-23	12136-12140	MVCC	
9-24	12141-12142	(	
9-25	12142-12155	Multi-Version	
9-26	12156-12167	Concurrency	
9-27	12168-12175	Control	
9-28	12175-12176	)	
9-29	12177-12181	work	
9-30	12182-12185	How	
9-31	12186-12188	to	
9-32	12189-12192	get	
9-33	12193-12196	the	
9-34	12197-12204	current	
9-35	12205-12213	database	
9-36	12214-12225	transaction	
9-37	12226-12228	id	
9-38	12229-12232	How	
9-39	12233-12235	to	
9-40	12236-12239	log	
9-41	12240-12243	the	
9-42	12244-12252	database	
9-43	12253-12264	transaction	
9-44	12265-12267	id	
9-45	12268-12273	using	
9-46	12274-12277	MDC	
9-47	12278-12279	(	
9-48	12279-12285	Mapped	
9-49	12286-12296	Diagnostic	
9-50	12297-12304	Context	
9-51	12304-12305	)	
9-52	12306-12309	How	
9-53	12310-12314	does	
9-54	12315-12318	the	
9-55	12319-12325	entity	
9-56	12326-12333	version	
9-57	12334-12342	property	
9-58	12343-12347	work	
9-59	12348-12352	when	
9-60	12353-12360	merging	
9-61	12361-12365	with	
9-62	12366-12369	JPA	
9-63	12370-12373	and	
9-64	12374-12383	Hibernate	
9-65	12384-12394	Optimistic	
9-66	12395-12402	locking	
9-67	12403-12410	version	
9-68	12411-12419	property	
9-69	12420-12424	with	
9-70	12425-12428	JPA	
9-71	12429-12432	and	
9-72	12433-12442	Hibernate	
9-73	12443-12446	The	
9-74	12447-12451	best	
9-75	12452-12455	way	
9-76	12456-12458	to	
9-77	12459-12462	map	
9-78	12463-12465	an	
9-79	12466-12472	entity	
9-80	12473-12480	version	
9-81	12481-12489	property	
9-82	12490-12494	with	
9-83	12495-12498	JPA	
9-84	12499-12502	and	
9-85	12503-12512	Hibernate	
9-86	12513-12516	How	
9-87	12517-12519	do	
9-88	12520-12530	PostgreSQL	
9-89	12531-12539	advisory	
9-90	12540-12545	locks	
9-91	12546-12550	work	
9-92	12551-12554	How	
9-93	12555-12557	to	
9-94	12558-12567	implement	
9-95	12568-12569	a	
9-96	12570-12578	database	
9-97	12579-12582	job	
9-98	12583-12588	queue	
9-99	12589-12594	using	
9-100	12595-12599	SKIP	
9-101	12600-12606	LOCKED	
9-102	12607-12608	A	
9-103	12609-12617	beginner	
9-104	12617-12618	’	
9-105	12618-12619	s	
9-106	12620-12625	guide	
9-107	12626-12628	to	
9-108	12629-12637	database	
9-109	12638-12645	locking	
9-110	12646-12649	and	
9-111	12650-12653	the	
9-112	12654-12658	lost	
9-113	12659-12665	update	
9-114	12666-12675	phenomena	
9-115	12676-12679	How	
9-116	12680-12682	to	
9-117	12683-12690	prevent	
9-118	12691-12695	lost	
9-119	12696-12703	updates	
9-120	12704-12706	in	
9-121	12707-12711	long	
9-122	12712-12725	conversations	
9-123	12726-12727	A	
9-124	12728-12736	beginner	
9-125	12736-12737	’	
9-126	12737-12738	s	
9-127	12739-12744	guide	
9-128	12745-12747	to	
9-129	12748-12753	Dirty	
9-130	12754-12758	Read	
9-131	12759-12766	anomaly	
9-132	12767-12768	A	
9-133	12769-12777	beginner	
9-134	12777-12778	’	
9-135	12778-12779	s	
9-136	12780-12785	guide	
9-137	12786-12788	to	
9-138	12789-12803	Non-Repeatable	
9-139	12804-12808	Read	
9-140	12809-12816	anomaly	
9-141	12817-12818	A	
9-142	12819-12827	beginner	
9-143	12827-12828	’	
9-144	12828-12829	s	
9-145	12830-12835	guide	
9-146	12836-12838	to	
9-147	12839-12846	Phantom	
9-148	12847-12851	Read	
9-149	12852-12859	anomaly	
9-150	12860-12861	A	
9-151	12862-12870	beginner	
9-152	12870-12871	’	
9-153	12871-12872	s	
9-154	12873-12878	guide	
9-155	12879-12881	to	
9-156	12882-12886	Read	
9-157	12887-12890	and	
9-158	12891-12896	Write	
9-159	12897-12901	Skew	
9-160	12902-12911	phenomena	
9-161	12912-12913	A	
9-162	12914-12922	beginner	
9-163	12922-12923	’	
9-164	12923-12924	s	
9-165	12925-12930	guide	
9-166	12931-12933	to	
9-167	12934-12937	the	
9-168	12938-12943	Write	
9-169	12944-12948	Skew	
9-170	12949-12956	anomaly	
9-171	12956-12957	,	
9-172	12958-12961	and	
9-173	12962-12965	how	
9-174	12966-12968	it	
9-175	12969-12976	differs	
9-176	12977-12984	between	
9-177	12985-12988	2PL	
9-178	12989-12992	and	
9-179	12993-12997	MVCC	
9-180	12998-13001	How	
9-181	13002-13006	does	
9-182	13007-13015	database	
9-183	13016-13027	pessimistic	
9-184	13028-13035	locking	
9-185	13036-13044	interact	
9-186	13045-13049	with	
9-187	13050-13056	INSERT	
9-188	13056-13057	,	
9-189	13058-13064	UPDATE	
9-190	13064-13065	,	
9-191	13066-13069	and	
9-192	13070-13076	DELETE	
9-193	13077-13080	SQL	
9-194	13081-13091	statements	
9-195	13092-13095	How	
9-196	13096-13098	do	
9-197	13099-13105	UPSERT	
9-198	13106-13109	and	
9-199	13110-13115	MERGE	
9-200	13116-13120	work	
9-201	13121-13123	in	
9-202	13124-13130	Oracle	
9-203	13130-13131	,	
9-204	13132-13135	SQL	
9-205	13136-13142	Server	
9-206	13142-13143	,	
9-207	13144-13154	PostgreSQL	
9-208	13154-13155	,	
9-209	13156-13159	and	
9-210	13160-13165	MySQL	
9-211	13166-13173	Logical	
9-212	13174-13176	vs	
9-213	13177-13185	physical	
9-214	13186-13191	clock	
9-215	13192-13202	optimistic	
9-216	13203-13210	locking	
9-217	13211-13214	How	
9-218	13215-13217	to	
9-219	13218-13223	retry	
9-220	13224-13227	JPA	
9-221	13228-13240	transactions	
9-222	13241-13246	after	
9-223	13247-13249	an	
9-224	13250-13273	OptimisticLockException	
9-225	13274-13277	How	
9-226	13278-13282	does	
9-227	13283-13292	Hibernate	
9-228	13293-13302	guarantee	
9-229	13303-13320	application-level	
9-230	13321-13331	repeatable	
9-231	13332-13337	reads	
9-232	13338-13347	Hibernate	
9-233	13348-13359	collections	
9-234	13360-13370	optimistic	
9-235	13371-13378	locking	
9-236	13379-13382	How	
9-237	13383-13385	to	
9-238	13386-13393	address	
9-239	13394-13397	the	
9-240	13398-13421	OptimisticLockException	
9-241	13422-13424	in	
9-242	13425-13428	JPA	
9-243	13429-13432	and	
9-244	13433-13442	Hibernate	
9-245	13443-13446	How	
9-246	13447-13449	to	
9-247	13450-13457	prevent	
9-248	13458-13481	OptimisticLockException	
9-249	13482-13486	with	
9-250	13487-13496	Hibernate	
9-251	13497-13508	versionless	
9-252	13509-13519	optimistic	
9-253	13520-13527	locking	
9-254	13528-13529	A	
9-255	13530-13538	beginner	
9-256	13538-13539	’	
9-257	13539-13540	s	
9-258	13541-13546	guide	
9-259	13547-13549	to	
9-260	13550-13561	transaction	
9-261	13562-13571	isolation	
9-262	13572-13578	levels	
9-263	13579-13581	in	
9-264	13582-13592	enterprise	
9-265	13593-13597	Java	
9-266	13598-13599	A	
9-267	13600-13608	beginner	
9-268	13608-13609	’	
9-269	13609-13610	s	
9-270	13611-13616	guide	
9-271	13617-13619	to	
9-272	13620-13624	Java	
9-273	13625-13636	Persistence	
9-274	13637-13644	locking	
9-275	13645-13648	How	
9-276	13649-13653	does	
9-277	13654-13677	LockModeType.OPTIMISTIC	
9-278	13678-13682	work	
9-279	13683-13685	in	
9-280	13686-13689	JPA	
9-281	13690-13693	and	
9-282	13694-13703	Hibernate	
9-283	13704-13707	How	
9-284	13708-13710	to	
9-285	13711-13714	fix	
9-286	13715-13725	optimistic	
9-287	13726-13733	locking	
9-288	13734-13738	race	
9-289	13739-13749	conditions	
9-290	13750-13754	with	
9-291	13755-13766	pessimistic	
9-292	13767-13774	locking	
9-293	13775-13778	How	
9-294	13779-13783	does	
9-295	13784-13823	LockModeType.OPTIMISTIC_FORCE_INCREMENT	
9-296	13824-13828	work	
9-297	13829-13831	in	
9-298	13832-13835	JPA	
9-299	13836-13839	and	
9-300	13840-13849	Hibernate	
9-301	13850-13853	How	
9-302	13854-13858	does	
9-303	13859-13899	LockModeType.PESSIMISTIC_FORCE_INCREMENT	
9-304	13900-13904	work	
9-305	13905-13907	in	
9-306	13908-13911	JPA	
9-307	13912-13915	and	
9-308	13916-13925	Hibernate	
9-309	13926-13929	How	
9-310	13930-13932	do	
9-311	13933-13962	LockModeType.PESSIMISTIC_READ	
9-312	13963-13966	and	
9-313	13967-13997	LockModeType.PESSIMISTIC_WRITE	
9-314	13998-14002	work	
9-315	14003-14005	in	
9-316	14006-14009	JPA	
9-317	14010-14013	and	
9-318	14014-14023	Hibernate	
9-319	14024-14027	How	
9-320	14028-14032	does	
9-321	14033-14049	CascadeType.LOCK	
9-322	14050-14055	works	
9-323	14056-14058	in	
9-324	14059-14062	JPA	
9-325	14063-14066	and	
9-326	14067-14076	Hibernate	
9-327	14077-14080	How	
9-328	14081-14083	to	
9-329	14084-14093	increment	
9-330	14094-14097	the	
9-331	14098-14104	parent	
9-332	14105-14111	entity	
9-333	14112-14119	version	
9-334	14120-14128	whenever	
9-335	14129-14130	a	
9-336	14131-14136	child	
9-337	14137-14143	entity	
9-338	14144-14148	gets	
9-339	14149-14157	modified	
9-340	14158-14162	with	
9-341	14163-14166	JPA	
9-342	14167-14170	and	
9-343	14171-14180	Hibernate	
9-344	14181-14187	Spring	
9-345	14188-14197	read-only	
9-346	14198-14209	transaction	
9-347	14210-14219	Hibernate	
9-348	14220-14232	optimization	
9-349	14233-14243	Read-write	
9-350	14244-14247	and	
9-351	14248-14257	read-only	
9-352	14258-14269	transaction	
9-353	14270-14277	routing	
9-354	14278-14282	with	
9-355	14283-14289	Spring	
9-356	14290-14298	Batching	
9-357	14299-14304	Batch	
9-358	14305-14315	processing	
9-359	14316-14320	best	
9-360	14321-14330	practices	
9-361	14331-14334	The	
9-362	14335-14339	best	
9-363	14340-14343	way	
9-364	14344-14346	to	
9-365	14347-14349	do	
9-366	14350-14355	batch	
9-367	14356-14366	processing	
9-368	14367-14371	with	
9-369	14372-14375	JPA	
9-370	14376-14379	and	
9-371	14380-14389	Hibernate	
9-372	14390-14393	How	
9-373	14394-14396	to	
9-374	14397-14402	batch	
9-375	14403-14409	INSERT	
9-376	14410-14413	and	
9-377	14414-14420	UPDATE	
9-378	14421-14431	statements	
9-379	14432-14436	with	
9-380	14437-14446	Hibernate	
9-381	14447-14450	How	
9-382	14451-14453	to	
9-383	14454-14459	batch	
9-384	14460-14466	DELETE	
9-385	14467-14477	statements	
9-386	14478-14482	with	
9-387	14483-14492	Hibernate	
9-388	14493-14496	How	
9-389	14497-14499	to	
9-390	14500-14509	customize	
9-391	14510-14513	the	
9-392	14514-14518	JDBC	
9-393	14519-14524	batch	
9-394	14525-14529	size	
9-395	14530-14533	for	
9-396	14534-14538	each	
9-397	14539-14550	Persistence	
9-398	14551-14558	Context	
9-399	14559-14563	with	
9-400	14564-14573	Hibernate	
9-401	14574-14577	How	
9-402	14578-14580	to	
9-403	14581-14585	find	
9-404	14586-14591	which	
9-405	14592-14601	statement	
9-406	14602-14608	failed	
9-407	14609-14611	in	
9-408	14612-14613	a	
9-409	14614-14618	JDBC	
9-410	14619-14624	Batch	
9-411	14625-14631	Update	
9-412	14632-14635	How	
9-413	14636-14638	to	
9-414	14639-14647	optimize	
9-415	14648-14651	the	
9-416	14652-14657	merge	
9-417	14658-14667	operation	
9-418	14668-14673	using	
9-419	14674-14680	update	
9-420	14681-14686	while	
9-421	14687-14695	batching	
9-422	14696-14700	with	
9-423	14701-14704	JPA	
9-424	14705-14708	and	
9-425	14709-14718	Hibernate	
9-426	14719-14722	How	
9-427	14723-14725	to	
9-428	14726-14732	enable	
9-429	14733-14742	multi-row	
9-430	14743-14750	inserts	
9-431	14751-14755	with	
9-432	14756-14759	the	
9-433	14760-14770	PostgreSQL	
9-434	14771-14792	reWriteBatchedInserts	
9-435	14793-14806	configuration	
9-436	14807-14815	property	
9-437	14816-14823	Queries	
9-438	14824-14825	A	
9-439	14826-14834	beginner	
9-440	14834-14835	’	
9-441	14835-14836	s	
9-442	14837-14842	guide	
9-443	14843-14845	to	
9-444	14846-14849	JPA	
9-445	14850-14853	and	
9-446	14854-14863	Hibernate	
9-447	14864-14869	Query	
9-448	14870-14882	setParameter	
9-449	14883-14889	method	
9-450	14890-14891	A	
9-451	14892-14900	beginner	
9-452	14900-14901	’	
9-453	14901-14902	s	
9-454	14903-14908	guide	
9-455	14909-14911	to	
9-456	14912-14915	JPA	
9-457	14916-14919	and	
9-458	14920-14929	Hibernate	
9-459	14930-14935	query	
9-460	14936-14941	hints	
9-461	14942-14947	Query	
9-462	14948-14955	timeout	
9-463	14956-14960	with	
9-464	14961-14964	JPA	
9-465	14965-14968	and	
9-466	14969-14978	Hibernate	
9-467	14979-14982	The	
9-468	14983-14987	best	
9-469	14988-14991	way	
9-470	14992-14994	to	
9-471	14995-14998	use	
9-472	14999-15002	the	
9-473	15003-15006	JPA	
9-474	15007-15026	SqlResultSetMapping	
9-475	15027-15030	How	
9-476	15031-15033	to	
9-477	15034-15040	return	
9-478	15041-15042	a	
9-479	15043-15046	Map	
9-480	15047-15053	result	
9-481	15054-15058	from	
9-482	15059-15060	a	
9-483	15061-15064	JPA	
9-484	15065-15067	or	
9-485	15068-15077	Hibernate	
9-486	15078-15083	query	
9-487	15084-15087	How	
9-488	15088-15090	to	
9-489	15091-15098	improve	
9-490	15099-15108	statement	
9-491	15109-15116	caching	
9-492	15117-15127	efficiency	
9-493	15128-15132	with	
9-494	15133-15135	IN	
9-495	15136-15142	clause	
9-496	15143-15152	parameter	
9-497	15153-15160	padding	
9-498	15161-15162	A	
9-499	15163-15171	beginner	
9-500	15171-15172	’	
9-501	15172-15173	s	
9-502	15174-15179	guide	
9-503	15180-15182	to	
9-504	15183-15186	the	
9-505	15187-15196	Hibernate	
9-506	15197-15201	JPQL	
9-507	15202-15205	and	
9-508	15206-15212	Native	
9-509	15213-15218	Query	
9-510	15219-15223	Plan	
9-511	15224-15229	Cache	
9-512	15230-15233	How	
9-513	15234-15236	to	
9-514	15237-15245	optimize	
9-515	15246-15250	JPQL	
9-516	15251-15254	and	
9-517	15255-15263	Criteria	
9-518	15264-15267	API	
9-519	15268-15273	query	
9-520	15274-15279	plans	
9-521	15280-15284	with	
9-522	15285-15294	Hibernate	
9-523	15295-15305	Statistics	
9-524	15306-15309	How	
9-525	15310-15312	to	
9-526	15313-15322	intercept	
9-527	15323-15326	and	
9-528	15327-15333	modify	
9-529	15334-15337	SQL	
9-530	15338-15345	queries	
9-531	15346-15350	with	
9-532	15351-15354	the	
9-533	15355-15364	Hibernate	
9-534	15365-15383	StatementInspector	
9-535	15384-15387	The	
9-536	15388-15392	best	
9-537	15393-15396	way	
9-538	15397-15399	to	
9-539	15400-15403	use	
9-540	15404-15407	the	
9-541	15408-15412	JPQL	
9-542	15413-15421	DISTINCT	
9-543	15422-15429	keyword	
9-544	15430-15434	with	
9-545	15435-15438	JPA	
9-546	15439-15442	and	
9-547	15443-15452	Hibernate	
9-548	15453-15456	How	
9-549	15457-15459	to	
9-550	15460-15464	JOIN	
9-551	15465-15474	unrelated	
9-552	15475-15483	entities	
9-553	15484-15488	with	
9-554	15489-15492	JPA	
9-555	15493-15496	and	
9-556	15497-15506	Hibernate	
9-557	15507-15510	How	
9-558	15511-15513	to	
9-559	15514-15521	resolve	
9-560	15522-15525	the	
9-561	15526-15535	Hibernate	
9-562	15536-15542	global	
9-563	15543-15551	database	
9-564	15552-15558	schema	
9-565	15559-15562	and	
9-566	15563-15570	catalog	
9-567	15571-15574	for	
9-568	15575-15581	native	
9-569	15582-15585	SQL	
9-570	15586-15593	queries	
9-571	15594-15597	How	
9-572	15598-15600	to	
9-573	15601-15604	map	
9-574	15605-15610	table	
9-575	15611-15615	rows	
9-576	15616-15618	to	
9-577	15619-15626	columns	
9-578	15627-15632	using	
9-579	15633-15636	SQL	
9-580	15637-15642	PIVOT	
9-581	15643-15645	or	
9-582	15646-15650	CASE	
9-583	15651-15662	expressions	
9-584	15663-15666	The	
9-585	15667-15670	JPA	
9-586	15671-15684	EntityManager	
9-587	15685-15702	createNativeQuery	
9-588	15703-15705	is	
9-589	15706-15707	a	
9-590	15708-15713	Magic	
9-591	15714-15718	Wand	
9-592	15719-15722	Why	
9-593	15723-15726	you	
9-594	15727-15733	should	
9-595	15734-15737	use	
9-596	15738-15741	the	
9-597	15742-15751	Hibernate	
9-598	15752-15769	ResultTransformer	
9-599	15770-15772	to	
9-600	15773-15782	customize	
9-601	15783-15789	result	
9-602	15790-15793	set	
9-603	15794-15802	mappings	
9-604	15803-15806	The	
9-605	15807-15811	best	
9-606	15812-15815	way	
9-607	15816-15818	to	
9-608	15819-15822	use	
9-609	15823-15824	a	
9-610	15825-15834	Hibernate	
9-611	15835-15852	ResultTransformer	
9-612	15853-15856	Why	
9-613	15857-15860	you	
9-614	15861-15867	should	
9-615	15868-15878	definitely	
9-616	15879-15884	learn	
9-617	15885-15888	SQL	
9-618	15889-15895	Window	
9-619	15896-15905	Functions	
9-620	15906-15911	Query	
9-621	15912-15922	pagination	
9-622	15923-15927	with	
9-623	15928-15931	JPA	
9-624	15932-15935	and	
9-625	15936-15945	Hibernate	
9-626	15946-15950	What	
9-627	15950-15951	’	
9-628	15951-15952	s	
9-629	15953-15956	new	
9-630	15957-15959	in	
9-631	15960-15963	JPA	
9-632	15964-15967	2.2	
9-633	15968-15969	–	
9-634	15970-15976	Stream	
9-635	15977-15980	the	
9-636	15981-15987	result	
9-637	15988-15990	of	
9-638	15991-15992	a	
9-639	15993-15998	Query	
9-640	15999-16008	execution	
9-641	16009-16012	How	
9-642	16013-16015	to	
9-643	16016-16019	get	
9-644	16020-16023	the	
9-645	16024-16030	actual	
9-646	16031-16040	execution	
9-647	16041-16045	plan	
9-648	16046-16049	for	
9-649	16050-16052	an	
9-650	16053-16059	Oracle	
9-651	16060-16063	SQL	
9-652	16064-16069	query	
9-653	16070-16075	using	
9-654	16076-16085	Hibernate	
9-655	16086-16091	query	
9-656	16092-16097	hints	
9-657	16098-16101	How	
9-658	16102-16104	to	
9-659	16105-16110	solve	
9-660	16111-16114	the	
9-661	16115-16125	PostgreSQL	
9-662	16126-16127	:	
9-663	16127-16128	:	
9-664	16129-16133	cast	
9-665	16134-16142	operator	
9-666	16143-16148	issue	
9-667	16149-16153	with	
9-668	16154-16157	JPA	
9-669	16158-16161	and	
9-670	16162-16171	Hibernate	
9-671	16172-16175	The	
9-672	16176-16180	best	
9-673	16181-16184	way	
9-674	16185-16187	to	
9-675	16188-16191	use	
9-676	16192-16195	SQL	
9-677	16196-16205	functions	
9-678	16206-16208	in	
9-679	16209-16213	JPQL	
9-680	16214-16216	or	
9-681	16217-16225	Criteria	
9-682	16226-16229	API	
9-683	16230-16237	queries	
9-684	16238-16242	with	
9-685	16243-16246	JPA	
9-686	16247-16250	and	
9-687	16251-16260	Hibernate	
9-688	16261-16264	How	
9-689	16265-16267	to	
9-690	16268-16275	execute	
9-691	16276-16279	SQL	
9-692	16280-16289	functions	
9-693	16290-16294	with	
9-694	16295-16303	multiple	
9-695	16304-16314	parameters	
9-696	16315-16317	in	
9-697	16318-16319	a	
9-698	16320-16324	JPQL	
9-699	16325-16330	query	
9-700	16331-16335	with	
9-701	16336-16345	Hibernate	
9-702	16346-16349	How	
9-703	16350-16352	to	
9-704	16353-16358	query	
9-705	16359-16365	parent	
9-706	16366-16370	rows	
9-707	16371-16375	when	
9-708	16376-16379	all	
9-709	16380-16388	children	
9-710	16389-16393	must	
9-711	16394-16399	match	
9-712	16400-16403	the	
9-713	16404-16413	filtering	
9-714	16414-16422	criteria	
9-715	16423-16427	with	
9-716	16428-16431	SQL	
9-717	16432-16435	and	
9-718	16436-16445	Hibernate	
9-719	16446-16449	How	
9-720	16450-16452	to	
9-721	16453-16457	bind	
9-722	16458-16464	custom	
9-723	16465-16474	Hibernate	
9-724	16475-16484	parameter	
9-725	16485-16490	types	
9-726	16491-16493	to	
9-727	16494-16497	JPA	
9-728	16498-16505	queries	
9-729	16506-16515	Statement	
9-730	16516-16523	Caching	
9-731	16524-16527	How	
9-732	16528-16532	does	
9-733	16533-16534	a	
9-734	16535-16545	relational	
9-735	16546-16554	database	
9-736	16555-16562	execute	
9-737	16563-16566	SQL	
9-738	16567-16577	statements	
9-739	16578-16581	and	
9-740	16582-16590	prepared	
9-741	16591-16601	statements	
9-742	16602-16607	MySQL	
9-743	16608-16612	JDBC	
9-744	16613-16622	Statement	
9-745	16623-16630	Caching	
9-746	16631-16635	Bulk	
9-747	16636-16646	Processing	
9-748	16647-16651	Bulk	
9-749	16652-16658	Update	
9-750	16659-16662	and	
9-751	16663-16669	Delete	
9-752	16670-16674	with	
9-753	16675-16678	JPA	
9-754	16679-16682	and	
9-755	16683-16692	Hibernate	
9-756	16693-16696	JPA	
9-757	16697-16705	Criteria	
9-758	16706-16709	API	
9-759	16710-16714	Bulk	
9-760	16715-16721	Update	
9-761	16722-16725	and	
9-762	16726-16732	Delete	
9-763	16733-16737	Bulk	
9-764	16738-16744	Update	
9-765	16745-16755	optimistic	
9-766	16756-16763	locking	
9-767	16764-16768	with	
9-768	16769-16772	JPA	
9-769	16773-16776	and	
9-770	16777-16786	Hibernate	
9-771	16787-16795	Criteria	
9-772	16796-16803	Queries	
9-773	16804-16807	How	
9-774	16808-16810	to	
9-775	16811-16816	write	
9-776	16817-16820	JPA	
9-777	16821-16829	Criteria	
9-778	16830-16833	API	
9-779	16834-16841	queries	
9-780	16842-16847	using	
9-781	16848-16854	Codota	
9-782	16855-16858	JPA	
9-783	16859-16867	Criteria	
9-784	16868-16877	Metamodel	
9-785	16878-16888	Generation	
9-786	16889-16892	and	
9-787	16893-16898	Usage	
9-788	16899-16904	Guide	
9-789	16905-16908	How	
9-790	16909-16911	to	
9-791	16912-16917	query	
9-792	16918-16920	by	
9-793	16921-16927	entity	
9-794	16928-16932	type	
9-795	16933-16938	using	
9-796	16939-16942	JPA	
9-797	16943-16951	Criteria	
9-798	16952-16955	API	
9-799	16956-16959	Why	
9-800	16960-16963	you	
9-801	16964-16970	should	
9-802	16971-16977	always	
9-803	16978-16983	check	
9-804	16984-16987	the	
9-805	16988-16991	SQL	
9-806	16992-17002	statements	
9-807	17003-17012	generated	
9-808	17013-17015	by	
9-809	17016-17024	Criteria	
9-810	17025-17028	API	
9-811	17029-17032	The	
9-812	17033-17044	performance	
9-813	17045-17052	penalty	
9-814	17053-17055	of	
9-815	17056-17069	Class.forName	
9-816	17070-17074	when	
9-817	17075-17082	parsing	
9-818	17083-17087	JPQL	
9-819	17088-17091	and	
9-820	17092-17100	Criteria	
9-821	17101-17108	queries	
9-822	17109-17112	How	
9-823	17113-17117	does	
9-824	17118-17127	Hibernate	
9-825	17128-17134	handle	
9-826	17135-17138	JPA	
9-827	17139-17147	Criteria	
9-828	17148-17151	API	
9-829	17152-17160	literals	
9-830	17161-17167	Stored	
9-831	17168-17178	Procedures	
9-832	17179-17182	The	
9-833	17183-17187	best	
9-834	17188-17191	way	
9-835	17192-17194	to	
9-836	17195-17199	call	
9-837	17200-17201	a	
9-838	17202-17208	stored	
9-839	17209-17218	procedure	
9-840	17219-17223	with	
9-841	17224-17227	JPA	
9-842	17228-17231	and	
9-843	17232-17241	Hibernate	
9-844	17242-17245	How	
9-845	17246-17248	to	
9-846	17249-17253	call	
9-847	17254-17260	Oracle	
9-848	17261-17267	stored	
9-849	17268-17278	procedures	
9-850	17279-17282	and	
9-851	17283-17292	functions	
9-852	17293-17297	with	
9-853	17298-17301	JPA	
9-854	17302-17305	and	
9-855	17306-17315	Hibernate	
9-856	17316-17319	How	
9-857	17320-17322	to	
9-858	17323-17327	call	
9-859	17328-17331	SQL	
9-860	17332-17338	Server	
9-861	17339-17345	stored	
9-862	17346-17356	procedures	
9-863	17357-17360	and	
9-864	17361-17370	functions	
9-865	17371-17375	with	
9-866	17376-17379	JPA	
9-867	17380-17383	and	
9-868	17384-17393	Hibernate	
9-869	17394-17397	How	
9-870	17398-17400	to	
9-871	17401-17405	call	
9-872	17406-17416	PostgreSQL	
9-873	17417-17426	functions	
9-874	17427-17428	(	
9-875	17428-17434	stored	
9-876	17435-17445	procedures	
9-877	17445-17446	)	
9-878	17447-17451	with	
9-879	17452-17455	JPA	
9-880	17456-17459	and	
9-881	17460-17469	Hibernate	
9-882	17470-17473	How	
9-883	17474-17476	to	
9-884	17477-17481	call	
9-885	17482-17487	MySQL	
9-886	17488-17494	stored	
9-887	17495-17505	procedures	
9-888	17506-17509	and	
9-889	17510-17519	functions	
9-890	17520-17524	with	
9-891	17525-17528	JPA	
9-892	17529-17532	and	
9-893	17533-17542	Hibernate	
9-894	17543-17550	Caching	
9-895	17551-17552	A	
9-896	17553-17561	beginner	
9-897	17561-17562	’	
9-898	17562-17563	s	
9-899	17564-17569	guide	
9-900	17570-17572	to	
9-901	17573-17578	Cache	
9-902	17579-17594	synchronization	
9-903	17595-17605	strategies	
9-904	17606-17612	Things	
9-905	17613-17615	to	
9-906	17616-17624	consider	
9-907	17625-17631	before	
9-908	17632-17639	jumping	
9-909	17640-17642	to	
9-910	17643-17653	enterprise	
9-911	17654-17661	caching	
9-912	17662-17669	Caching	
9-913	17670-17674	best	
9-914	17675-17684	practices	
9-915	17685-17688	How	
9-916	17689-17693	does	
9-917	17694-17703	Hibernate	
9-918	17704-17709	store	
9-919	17710-17722	second-level	
9-920	17723-17728	cache	
9-921	17729-17736	entries	
9-922	17737-17740	How	
9-923	17741-17745	does	
9-924	17746-17755	Hibernate	
9-925	17756-17765	READ_ONLY	
9-926	17766-17790	CacheConcurrencyStrategy	
9-927	17791-17795	work	
9-928	17796-17799	How	
9-929	17800-17804	does	
9-930	17805-17814	Hibernate	
9-931	17815-17835	NONSTRICT_READ_WRITE	
9-932	17836-17860	CacheConcurrencyStrategy	
9-933	17861-17865	work	
9-934	17866-17869	How	
9-935	17870-17874	does	
9-936	17875-17884	Hibernate	
9-937	17885-17895	READ_WRITE	
9-938	17896-17920	CacheConcurrencyStrategy	
9-939	17921-17925	work	
9-940	17926-17929	How	
9-941	17930-17934	does	
9-942	17935-17944	Hibernate	
9-943	17945-17958	TRANSACTIONAL	
9-944	17959-17983	CacheConcurrencyStrategy	
9-945	17984-17988	work	
9-946	17989-17992	How	
9-947	17993-17997	does	
9-948	17998-18007	Hibernate	
9-949	18008-18018	Collection	
9-950	18019-18024	Cache	
9-951	18025-18029	work	
9-952	18030-18033	How	
9-953	18034-18038	does	
9-954	18039-18048	Hibernate	
9-955	18049-18054	Query	
9-956	18055-18060	Cache	
9-957	18061-18065	work	
9-958	18066-18069	How	
9-959	18070-18072	to	
9-960	18073-18076	use	
9-961	18077-18080	the	
9-962	18081-18090	Hibernate	
9-963	18091-18096	Query	
9-964	18097-18102	Cache	
9-965	18103-18106	for	
9-966	18107-18110	DTO	
9-967	18111-18122	projections	
9-968	18123-18126	How	
9-969	18127-18129	to	
9-970	18130-18135	avoid	
9-971	18136-18139	the	
9-972	18140-18149	Hibernate	
9-973	18150-18155	Query	
9-974	18156-18161	Cache	
9-975	18162-18163	N	
9-976	18163-18164	+	
9-977	18164-18165	1	
9-978	18166-18171	issue	
9-979	18172-18175	How	
9-980	18176-18178	to	
9-981	18179-18184	cache	
9-982	18185-18197	non-existing	
9-983	18198-18204	entity	
9-984	18205-18210	fetch	
9-985	18211-18218	results	
9-986	18219-18223	with	
9-987	18224-18227	JPA	
9-988	18228-18231	and	
9-989	18232-18241	Hibernate	
9-990	18242-18252	Statistics	
9-991	18253-18254	A	
9-992	18255-18263	beginner	
9-993	18263-18264	’	
9-994	18264-18265	s	
9-995	18266-18271	guide	
9-996	18272-18274	to	
9-997	18275-18284	Hibernate	
9-998	18285-18295	Statistics	
9-999	18296-18299	How	
9-1000	18300-18302	to	
9-1001	18303-18309	expose	
9-1002	18310-18319	Hibernate	
9-1003	18320-18330	Statistics	
9-1004	18331-18334	via	
9-1005	18335-18338	JMX	
9-1006	18339-18344	Audit	
9-1007	18345-18352	Logging	
9-1008	18353-18354	A	
9-1009	18355-18363	beginner	
9-1010	18363-18364	’	
9-1011	18364-18365	s	
9-1012	18366-18371	guide	
9-1013	18372-18374	to	
9-1014	18375-18378	CDC	
9-1015	18379-18380	(	
9-1016	18380-18386	Change	
9-1017	18387-18391	Data	
9-1018	18392-18399	Capture	
9-1019	18399-18400	)	
9-1020	18401-18406	MySQL	
9-1021	18407-18412	audit	
9-1022	18413-18420	logging	
9-1023	18421-18426	using	
9-1024	18427-18435	triggers	
9-1025	18436-18439	The	
9-1026	18440-18444	best	
9-1027	18445-18448	way	
9-1028	18449-18451	to	
9-1029	18452-18461	implement	
9-1030	18462-18464	an	
9-1031	18465-18470	audit	
9-1032	18471-18474	log	
9-1033	18475-18480	using	
9-1034	18481-18490	Hibernate	
9-1035	18491-18497	Envers	
9-1036	18498-18501	How	
9-1037	18502-18504	to	
9-1038	18505-18512	extract	
9-1039	18513-18519	change	
9-1040	18520-18524	data	
9-1041	18525-18531	events	
9-1042	18532-18536	from	
9-1043	18537-18542	MySQL	
9-1044	18543-18545	to	
9-1045	18546-18551	Kafka	
9-1046	18552-18557	using	
9-1047	18558-18566	Debezium	
9-1048	18567-18579	Multitenancy	
9-1049	18580-18581	A	
9-1050	18582-18590	beginner	
9-1051	18590-18591	’	
9-1052	18591-18592	s	
9-1053	18593-18598	guide	
9-1054	18599-18601	to	
9-1055	18602-18610	database	
9-1056	18611-18623	multitenancy	
9-1057	18624-18633	Hibernate	
9-1058	18634-18642	database	
9-1059	18643-18650	catalog	
9-1060	18651-18663	multitenancy	
9-1061	18664-18673	Hibernate	
9-1062	18674-18682	database	
9-1063	18683-18689	schema	
9-1064	18690-18702	multitenancy	
9-1065	18703-18710	Testing	
9-1066	18711-18714	The	
9-1067	18715-18722	minimal	
9-1068	18723-18736	configuration	
9-1069	18737-18740	for	
9-1070	18741-18748	testing	
9-1071	18749-18758	Hibernate	
9-1072	18759-18768	Hibernate	
9-1073	18769-18780	integration	
9-1074	18781-18788	testing	
9-1075	18789-18799	strategies	
9-1076	18800-18803	How	
9-1077	18804-18806	to	
9-1078	18807-18810	run	
9-1079	18811-18819	database	
9-1080	18820-18831	integration	
9-1081	18832-18837	tests	
9-1082	18838-18840	20	
9-1083	18841-18846	times	
9-1084	18847-18853	faster	
9-1085	18854-18857	How	
9-1086	18858-18860	to	
9-1087	18861-18864	run	
9-1088	18865-18876	integration	
9-1089	18877-18882	tests	
9-1090	18883-18885	at	
9-1091	18886-18896	warp-speed	
9-1092	18897-18902	using	
9-1093	18903-18909	Docker	
9-1094	18910-18913	and	
9-1095	18914-18919	tmpfs	
9-1096	18920-18923	The	
9-1097	18924-18928	best	
9-1098	18929-18932	way	
9-1099	18933-18935	to	
9-1100	18936-18939	log	
9-1101	18940-18944	JDBC	
9-1102	18945-18955	statements	
9-1103	18956-18959	The	
9-1104	18960-18964	best	
9-1105	18965-18968	way	
9-1106	18969-18971	to	
9-1107	18972-18978	detect	
9-1108	18979-18987	database	
9-1109	18988-18998	connection	
9-1110	18999-19004	leaks	
9-1111	19005-19008	How	
9-1112	19009-19011	to	
9-1113	19012-19019	install	
9-1114	19020-19023	DB2	
9-1115	19024-19033	Express-C	
9-1116	19034-19036	on	
9-1117	19037-19043	Docker	
9-1118	19044-19047	and	
9-1119	19048-19051	set	
9-1120	19052-19054	up	
9-1121	19055-19058	the	
9-1122	19059-19063	JDBC	
9-1123	19064-19074	connection	
9-1124	19075-19085	properties	
9-1125	19086-19089	How	
9-1126	19090-19092	to	
9-1127	19093-19096	get	
9-1128	19097-19104	started	
9-1129	19105-19109	with	
9-1130	19110-19121	CockroachDB	
9-1131	19122-19125	and	
9-1132	19126-19135	Hibernate	
9-1133	19136-19142	Online	
9-1134	19143-19152	Workshops	
9-1135	19153-19155	If	
9-1136	19156-19159	you	
9-1137	19160-19167	enjoyed	
9-1138	19168-19172	this	
9-1139	19173-19180	article	
9-1140	19180-19181	,	
9-1141	19182-19183	I	
9-1142	19184-19187	bet	
9-1143	19188-19191	you	
9-1144	19192-19195	are	
9-1145	19196-19201	going	
9-1146	19202-19204	to	
9-1147	19205-19209	love	
9-1148	19210-19212	my	
9-1149	19213-19221	upcoming	
9-1150	19222-19223	4	
9-1151	19223-19224	-	
9-1152	19224-19227	day	
9-1153	19228-19229	x	
9-1154	19230-19231	4	
9-1155	19232-19237	hours	
9-1156	19238-19254	High-Performance	
9-1157	19255-19259	Java	
9-1158	19260-19271	Persistence	
9-1159	19272-19278	Online	
9-1160	19279-19287	Workshop	
9-1161	19288-19294	Follow	
9-1162	19295-19296	@	
9-1163	19296-19309	vlad_mihalcea	
9-1164	19310-19316	Insert	
9-1165	19317-19324	details	
9-1166	19325-19330	about	
9-1167	19331-19334	how	
9-1168	19335-19338	the	
9-1169	19339-19350	information	
9-1170	19351-19353	is	
9-1171	19354-19359	going	
9-1172	19360-19362	to	
9-1173	19363-19365	be	
9-1174	19366-19383	processedDOWNLOAD	
9-1175	19384-19387	NOW	
9-1176	19388-19393	Leave	
9-1177	19394-19395	a	
9-1178	19396-19401	Reply	
9-1179	19402-19408	Cancel	
9-1180	19409-19418	replyYour	
9-1181	19419-19424	email	
9-1182	19425-19432	address	
9-1183	19433-19437	will	
9-1184	19438-19441	not	
9-1185	19442-19444	be	
9-1186	19445-19454	published	
9-1187	19454-19455	.	

#Text=Required fields are marked *Comment Name *
#Text=Email *
#Text=Website
#Text=This site uses Akismet to reduce spam.
10-1	19456-19464	Required	
10-2	19465-19471	fields	
10-3	19472-19475	are	
10-4	19476-19482	marked	
10-5	19483-19484	*	
10-6	19484-19491	Comment	
10-7	19492-19496	Name	
10-8	19497-19498	*	
10-9	19499-19504	Email	
10-10	19505-19506	*	
10-11	19507-19514	Website	
10-12	19515-19519	This	
10-13	19520-19524	site	
10-14	19525-19529	uses	
10-15	19530-19537	Akismet	
10-16	19538-19540	to	
10-17	19541-19547	reduce	
10-18	19548-19552	spam	
10-19	19552-19553	.	

#Text=Learn how your comment data is processed.
11-1	19554-19559	Learn	
11-2	19560-19563	how	
11-3	19564-19568	your	
11-4	19569-19576	comment	
11-5	19577-19581	data	
11-6	19582-19584	is	
11-7	19585-19594	processed	
11-8	19594-19595	.	

#Text=Let’s connect
#Text=Twitter
#Text=YouTube
#Text=LinkedIn
#Text=Email
#Text=Facebook
#Text=Amazon
#Text=GitHub
#Text=Find Article
#Text=Search
#Text=Book
#Text=Video Course
#Text=Hypersistence Optimizer
#Text=Training
#Text=ERP Contact
#Text=TutorialsHibernate
#Text=SQL
#Text=Spring
#Text=Git
#Text=FlexyPool
#Text=Social MediaTwitter
#Text=Facebook
#Text=YouTube
#Text=GitHub
#Text=LinkedIn
#Text=AboutAbout
#Text=FAQ
#Text=Archive
#Text=Privacy Policy
#Text=Terms of Service
#Text=Meta
#Text=Log in
#Text=Entries feed
#Text=Comments feed
#Text=WordPress.org
#Text=Privacy & Cookies: This site uses cookies.
12-1	19596-19599	Let	
12-2	19599-19600	’	
12-3	19600-19601	s	
12-4	19602-19609	connect	
12-5	19610-19617	Twitter	
12-6	19618-19625	YouTube	
12-7	19626-19634	LinkedIn	
12-8	19635-19640	Email	
12-9	19641-19649	Facebook	
12-10	19650-19656	Amazon	
12-11	19657-19663	GitHub	
12-12	19664-19668	Find	
12-13	19669-19676	Article	
12-14	19677-19683	Search	
12-15	19684-19688	Book	
12-16	19689-19694	Video	
12-17	19695-19701	Course	
12-18	19702-19715	Hypersistence	
12-19	19716-19725	Optimizer	
12-20	19726-19734	Training	
12-21	19735-19738	ERP	
12-22	19739-19746	Contact	
12-23	19747-19765	TutorialsHibernate	
12-24	19766-19769	SQL	
12-25	19770-19776	Spring	
12-26	19777-19780	Git	
12-27	19781-19790	FlexyPool	
12-28	19791-19797	Social	
12-29	19798-19810	MediaTwitter	
12-30	19811-19819	Facebook	
12-31	19820-19827	YouTube	
12-32	19828-19834	GitHub	
12-33	19835-19843	LinkedIn	
12-34	19844-19854	AboutAbout	
12-35	19855-19858	FAQ	
12-36	19859-19866	Archive	
12-37	19867-19874	Privacy	
12-38	19875-19881	Policy	
12-39	19882-19887	Terms	
12-40	19888-19890	of	
12-41	19891-19898	Service	
12-42	19899-19903	Meta	
12-43	19904-19907	Log	
12-44	19908-19910	in	
12-45	19911-19918	Entries	
12-46	19919-19923	feed	
12-47	19924-19932	Comments	
12-48	19933-19937	feed	
12-49	19938-19951	WordPress.org	
12-50	19952-19959	Privacy	
12-51	19960-19961	&	
12-52	19962-19969	Cookies	
12-53	19969-19970	:	
12-54	19971-19975	This	
12-55	19976-19980	site	
12-56	19981-19985	uses	
12-57	19986-19993	cookies	
12-58	19993-19994	.	

#Text=By continuing to use this website, you agree to their use.
13-1	19995-19997	By	
13-2	19998-20008	continuing	
13-3	20009-20011	to	
13-4	20012-20015	use	
13-5	20016-20020	this	
13-6	20021-20028	website	
13-7	20028-20029	,	
13-8	20030-20033	you	
13-9	20034-20039	agree	
13-10	20040-20042	to	
13-11	20043-20048	their	
13-12	20049-20052	use	
13-13	20052-20053	.	

#Text=To find out more, including how to control cookies, see here:
#Text=Our Cookie Policy
#Text=Vlad Mihalcea
#Text=Powered by WordPress.com.
14-1	20054-20056	To	
14-2	20057-20061	find	
14-3	20062-20065	out	
14-4	20066-20070	more	
14-5	20070-20071	,	
14-6	20072-20081	including	
14-7	20082-20085	how	
14-8	20086-20088	to	
14-9	20089-20096	control	
14-10	20097-20104	cookies	
14-11	20104-20105	,	
14-12	20106-20109	see	
14-13	20110-20114	here	
14-14	20114-20115	:	
14-15	20116-20119	Our	
14-16	20120-20126	Cookie	
14-17	20127-20133	Policy	
14-18	20134-20138	Vlad	
14-19	20139-20147	Mihalcea	
14-20	20148-20155	Powered	
14-21	20156-20158	by	
14-22	20159-20172	WordPress.com	
14-23	20172-20173	.	

#Text=High-Performance Java Persistence19th - 22nd of April
#Text=Prepare yourself to be amazed!
15-1	20174-20190	High-Performance	
15-2	20191-20195	Java	
15-3	20196-20211	Persistence19th	
15-4	20211-20212	 	
15-5	20212-20213	-	
15-6	20214-20218	22nd	
15-7	20218-20219	 	
15-8	20219-20221	of	
15-9	20222-20227	April	
15-10	20228-20235	Prepare	
15-11	20236-20244	yourself	
15-12	20245-20247	to	
15-13	20248-20250	be	
15-14	20251-20257	amazed	
15-15	20257-20258	!	

#Text=The best way to map JPA and Hibernate entities and associationsBatch processing best practicesThe best way to fetch data with JPA and HibernateTransactions and Concurrency ControlCaching best practices
#Text=Save Your Seat!
16-1	20258-20261	The	
16-2	20262-20266	best	
16-3	20267-20270	way	
16-4	20271-20273	to	
16-5	20274-20277	map	
16-6	20278-20281	JPA	
16-7	20282-20285	and	
16-8	20286-20295	Hibernate	
16-9	20296-20304	entities	
16-10	20305-20308	and	
16-11	20309-20326	associationsBatch	
16-12	20327-20337	processing	
16-13	20338-20342	best	
16-14	20343-20355	practicesThe	
16-15	20356-20360	best	
16-16	20361-20364	way	
16-17	20365-20367	to	
16-18	20368-20373	fetch	
16-19	20374-20378	data	
16-20	20379-20383	with	
16-21	20384-20387	JPA	
16-22	20388-20391	and	
16-23	20392-20413	HibernateTransactions	
16-24	20414-20417	and	
16-25	20418-20429	Concurrency	
16-26	20430-20444	ControlCaching	
16-27	20445-20449	best	
16-28	20450-20459	practices	
16-29	20460-20464	Save	
16-30	20465-20469	Your	
16-31	20470-20474	Seat	
16-32	20474-20475	!	
