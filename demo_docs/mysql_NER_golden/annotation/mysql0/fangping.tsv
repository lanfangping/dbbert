#FORMAT=WebAnno TSV 3.3


#Text=5 MySQL Performance Tuning – 5 Steps for Database Developers - Database Management - Blogs - Quest Community
#Text=Products
#Text=View all products
#Text=Free trials
#Text=Buy online
#Text=Product lines
#Text=ApexSQL
#Text=Change Auditor
#Text=Enterprise Reporter
#Text=Foglight Database Monitoring
#Text=Foglight Evolve
#Text=KACE
#Text=Metalogix
#Text=Migration Manager
#Text=NetVault Backup
#Text=One Identity
#Text=QoreStor
#Text=Quest On Demand
#Text=Rapid Recovery
#Text=Recovery Manager
#Text=RemoteScan
#Text=SharePlex
#Text=Spotlight
#Text=Stat
#Text=Toad
#Text=Featured products
#Text=Cloud Management
#Text=Cloud Access Manager
#Text=Foglight for Virtualization, Enterprise Edition
#Text=Identity Manager
#Text=On Demand Migration for Email
#Text=Quest On Demand
#Text=Rapid Recovery
#Text=Data Protection
#Text=Foglight for Virtualization
#Text=NetVault
#Text=NetVault for Office 365
#Text=QorePortal
#Text=QoreStor
#Text=Rapid Recovery
#Text=vRanger
#Text=Database Management
#Text=Foglight for Databases
#Text=Litespeed for SQL Server
#Text=SharePlex
#Text=Spotlight SQL Server Enterprise
#Text=Toad Data Point
#Text=Toad DevOps Toolkit
#Text=Toad Edge
#Text=Toad for Oracle
#Text=Toad for SQL Server
#Text=Identity & Access Management
#Text=Active Roles
#Text=Defender
#Text=Identity Manager
#Text=Identity Manager Data Governance
#Text=One Identity Safeguard
#Text=Password Manager
#Text=Privileged Access Suite for Unix
#Text=Starling Connect
#Text=Starling Two-Factor Authentication
#Text=syslog-ng
#Text=Microsoft Platform Management
#Text=Active Administrator
#Text=Change Auditor
#Text=Enterprise Reporter
#Text=GPOADmin
#Text=InTrust
#Text=Metalogix
#Text=Migration Manager
#Text=On Demand Migration for Email
#Text=Quest On Demand
#Text=Recovery Manager
#Text=Performance Monitoring
#Text=Foglight Capacity Director
#Text=Foglight Hybrid Cloud Manager
#Text=Foglight for Databases
#Text=Foglight for Operating Systems
#Text=Foglight for Oracle
#Text=Foglight for PostgreSQL
#Text=Foglight for SQL Server
#Text=Foglight for Storage Management
#Text=Foglight for Virtualization
#Text=Spotlight on SQL Server
#Text=Unified Endpoint Management
#Text=Desktop Authority Management Suite
#Text=KACE Cloud Mobile Device Manager
#Text=KACE Desktop Authority
#Text=KACE Privilege Manager
#Text=KACE Systems Deployment Appliance
#Text=KACE Systems Management Appliance
#Text=RemoteScan
#Text=Solutions
#Text=View all Solutions
#Text=Industries
#Text=Education
#Text=Energy
#Text=Federal Government
#Text=Financial Services
#Text=Healthcare
#Text=State & Local Government
#Text=Platforms
#Text=Active Directory
#Text=Cisco
#Text=DB2
#Text=Exchange
#Text=Google
#Text=Hyper-v
#Text=Lotus Notes
#Text=OneDrive for Business
#Text=Office 365
#Text=Oracle
#Text=SAP/Sybase
#Text=SharePoint
#Text=SQL Server
#Text=Teams
#Text=Unix/Linux
#Text=VMware
#Text=Windows Server
#Text=Cloud Management
#Text=Data Protection
#Text=Overview
#Text=Backup & Recovery
#Text=Cloud Management
#Text=Deduplication & Compression
#Text=Disaster Recovery
#Text=Office 365 Data Protection
#Text=Virtualization Management
#Text=Database Management
#Text=Overview
#Text=Administration
#Text=Cloud Migration
#Text=Data Preparation and Provisioning
#Text=Development
#Text=DevOps
#Text=Performance Monitoring
#Text=Replication
#Text=Supported Platforms
#Text=IBM DB2
#Text=MySQL
#Text=Oracle
#Text=PostgreSQL
#Text=SAP Solutions
#Text=SQL Server
#Text=GDPR Compliance
#Text=Identity & Access Management
#Text=Overview
#Text=Identity Administration
#Text=Identity Governance
#Text=Privileged Access Management
#Text=AD Account Lifecycle Management
#Text=Access Control
#Text=Cloud
#Text=Log Management
#Text=Microsoft Platform Management
#Text=Overview
#Text=Mergers & Acquisitions
#Text=Migration & Consolidation
#Text=Office 365 Migration & Management
#Text=Security & Compliance
#Text=Windows Backup & Recovery
#Text=Supported Platforms
#Text=Active Directory
#Text=Cisco
#Text=Exchange
#Text=Google
#Text=Groupwise
#Text=Lotus Notes
#Text=Office 365
#Text=OneDrive for Business
#Text=SharePoint
#Text=SQL Server
#Text=Teams
#Text=Unix/Linux
#Text=Windows Server
#Text=Performance Monitoring
#Text=Overview
#Text=Database Performance Monitoring
#Text=Operating System Monitoring
#Text=Storage Performance & Utilization Management
#Text=Supported Platforms
#Text=Active Directory
#Text=DB2
#Text=Exchange
#Text=Java
#Text=Hyper-V
#Text=.NET
#Text=Oracle
#Text=SAP/Sybase
#Text=Storage
#Text=SQL Server
#Text=VMware
#Text=Unified Endpoint Management
#Text=Overview
#Text=Endpoint Compliance
#Text=Endpoint Security
#Text=Endpoint Visibility
#Text=Industries
#Text=Education
#Text=Healthcare
#Text=Supported Platforms
#Text=Internet of things
#Text=Microsoft® Windows
#Text=MAC
#Text=UNIX/LinuX
#Text=Resources
#Text=Blogs
#Text=Blogs A to Z
#Text=Data Protection
#Text=Database Management
#Text=Microsoft Platform Management
#Text=Performance Monitoring
#Text=Unified Endpoint Management
#Text=Customer Stories
#Text=Documents
#Text=Events
#Text=Webcasts
#Text=Technical Documentation
#Text=Videos
#Text=Whitepapers
#Text=Trials
#Text=Services
#Text=Consulting Services
#Text=Overview
#Text=Microsoft Platform Services
#Text=Data Protection Services
#Text=Unified Endpoint Management
#Text=Performance Monitoring Services
#Text=Database Management Services
#Text=Educational Services
#Text=Support Services
#Text=Support
#Text=Support Home
#Text=By Product
#Text=All Products
#Text=AppAssure
#Text=Archive Manager
#Text=Change Auditor
#Text=Desktop Authority
#Text=DR Series
#Text=Foglight
#Text=KACE
#Text=Migration Manager
#Text=NetVault
#Text=Rapid Recovery
#Text=SharePlex
#Text=Toad
#Text=vRanger
#Text=Contact Support
#Text=Overview
#Text=Customer Service
#Text=Licensing Assistance
#Text=Renewal Assistance
#Text=Technical Support
#Text=Download Software
#Text=Knowledge Base
#Text=My Account
#Text=My Products
#Text=My Service Requests
#Text=My Licenses
#Text=My Groups
#Text=My Profile
#Text=Policies & Procedures
#Text=Consulting Services
#Text=Microsoft Platform Management
#Text=Data Protection
#Text=Unified Endpoint Management
#Text=Performance Monitoring
#Text=Database Management
#Text=Technical Documentation
#Text=Educational Services
#Text=User Forums
#Text=Video Tutorials
#Text=Partners
#Text=Overview
#Text=Partner Circle Log In
#Text=Become a Partner
#Text=Find a Partner
#Text=Partner Community
#Text=Communities
#Text=Home
#Text=Blogs
#Text=Data Protection
#Text=Database Management
#Text=ITNinja
#Text=Microsoft Platform Management
#Text=Performance Monitoring
#Text=Toad World Blog
#Text=Unified Endpoint Management
#Text=Forums
#Text=All Product Forums
#Text=Active Administrator
#Text=Desktop Authority
#Text=Foglight
#Text=ITNinja
#Text=Migration Manager for Active Directory
#Text=NetVault
#Text=Rapid Recovery
#Text=Toad World Forum
#Text=Social Networks
#Text=Facebook
#Text=LinkedIn
#Text=Twitter@Quest
#Text=Twitter@QuestSupport
#Text=YouTube
#Text=製品情報
#Text=すべての製品情報を見る
#Text=Change Auditor
#Text=Foglight
#Text=KACE
#Text=Metalogix
#Text=Migration Manager
#Text=Migrator for Notes to SharePoint
#Text=NetVault Backup
#Text=On Demand Migration for Email
#Text=QoreStor
#Text=Rapid Recovery
#Text=Recovery Manager
#Text=SharePlex
#Text=Spotlight
#Text=Toad
#Text=ソリューション
#Text=すべてのプラットフォームを見る
#Text=クラウド管理
#Text=GDPRコンプライアンス
#Text=データ保護
#Text=クラウド管理
#Text=ディザスタリカバリ
#Text=バックアップとリカバリ
#Text=Office 365 データ保護
#Text=仮想化管理
#Text=重複除外と複製
#Text=データベース管理
#Text=DevOps
#Text=データの準備と分析
#Text=データベースのクラウド移行
#Text=データベースパフォーマンス監視
#Text=データベース管理
#Text=データベース複製ソフトウェアツール
#Text=統合エンドポイント管理
#Text=エンドポイントコンプライアンス
#Text=エンドポイントセキュリティ
#Text=エンドポイントの可視化
#Text=Microsoftプラットフォーム管理
#Text=ハイブリッドActive Directoryのセキュリティとガバナンス
#Text=Microsoftプラットフォームの移行計画と統合
#Text=セキュリティとコンプライアンス
#Text=情報アーカイブおよびストレージ管理ソリューション
#Text=Windowsのバックアップとリカバリ
#Text=Microsoft Serverのパフォーマンスと可用性
#Text=レポート作成機能
#Text=グループポリシーと権限
#Text=パフォーマンス監視
#Text=サービス
#Text=コンサルティングサービス
#Text=Microsoftプラットフォーム管理
#Text=データ保護
#Text=統合エンドポイント管理
#Text=パフォーマンス監視
#Text=データベース管理
#Text=トレーニングと認定資格
#Text=サポートサービス
#Text=サポート
#Text=サポートホーム
#Text=製品で検索
#Text=All Products
#Text=AppAssure
#Text=Archive Manager
#Text=Change Auditor
#Text=Desktop Authority
#Text=DR Series
#Text=Foglight
#Text=KACE
#Text=Migration Manager
#Text=NetVault
#Text=Rapid Recovery
#Text=SharePlex
#Text=Toad
#Text=vRanger
#Text=お問い合わせ
#Text=すべて
#Text=カスタマサービス
#Text=ライセンス アシスタンス
#Text=更新のアシスタンス
#Text=技術サポート
#Text=コミュニティフォーラム
#Text=ソフトウェアのダウンロード
#Text=ナレッジベース
#Text=マイアカウント
#Text=マイ プロダクト
#Text=Myサービスリクエスト
#Text=マイ ライセンス
#Text=マイ グループ
#Text=マイ プロファイル
#Text=ポリシーおよび手順
#Text=コンサルティングサービス
#Text=Microsoftプラットフォーム管理
#Text=データ保護
#Text=統合エンドポイント管理
#Text=パフォーマンス監視
#Text=データベース管理
#Text=リリースノートおよびガイド
#Text=教育サービス
#Text=ビデオチュートリアル
#Text=トライアル
#Text=パートナー
#Text=Partner Circleへのログイン
#Text=パートナーになる
#Text=Find a Partner
#Text=パートナーコミュニティ
#Text=コミュニティ
#Text=Quest Community
#Text=Site
#Text=Search
#Text=User
#Text=Site
#Text=Search
#Text=User
#Text=Blogs
#Text=Database Management
#Text=5 MySQL Performance Tuning Tips
#Text=Data Protection
#Text=Database Management
#Text=Microsoft Platform Management
#Text=Performance Monitoring
#Text=Unified Endpoint Management
#Text=Quest
#Text=More
#Text=Cancel
#Text=New
#Text=5 MySQL Performance Tuning Tips
#Text=Actions
#Text=Subscribe by email
#Text=Posts RSS
#Text=More
#Text=Cancel
#Text=Tags
#Text=Database Performance
#Text=MySQL
#Text=Janis Griffin
#Text=Jul 30, 2020
#Text=If you pride yourself on your SQL optimization skills, then this is a good time to advance your MySQL performance tuning.
1-1	0-1	5	
1-2	2-7	MySQL	
1-3	8-19	Performance	
1-4	20-26	Tuning	
1-5	27-28	–	
1-6	29-30	5	
1-7	31-36	Steps	
1-8	37-40	for	
1-9	41-49	Database	
1-10	50-60	Developers	
1-11	61-62	-	
1-12	63-71	Database	
1-13	72-82	Management	
1-14	83-84	-	
1-15	85-90	Blogs	
1-16	91-92	-	
1-17	93-98	Quest	
1-18	99-108	Community	
1-19	109-117	Products	
1-20	118-122	View	
1-21	123-126	all	
1-22	127-135	products	
1-23	136-140	Free	
1-24	141-147	trials	
1-25	148-151	Buy	
1-26	152-158	online	
1-27	159-166	Product	
1-28	167-172	lines	
1-29	173-180	ApexSQL	
1-30	181-187	Change	
1-31	188-195	Auditor	
1-32	196-206	Enterprise	
1-33	207-215	Reporter	
1-34	216-224	Foglight	
1-35	225-233	Database	
1-36	234-244	Monitoring	
1-37	245-253	Foglight	
1-38	254-260	Evolve	
1-39	261-265	KACE	
1-40	266-275	Metalogix	
1-41	276-285	Migration	
1-42	286-293	Manager	
1-43	294-302	NetVault	
1-44	303-309	Backup	
1-45	310-313	One	
1-46	314-322	Identity	
1-47	323-331	QoreStor	
1-48	332-337	Quest	
1-49	338-340	On	
1-50	341-347	Demand	
1-51	348-353	Rapid	
1-52	354-362	Recovery	
1-53	363-371	Recovery	
1-54	372-379	Manager	
1-55	380-390	RemoteScan	
1-56	391-400	SharePlex	
1-57	401-410	Spotlight	
1-58	411-415	Stat	
1-59	416-420	Toad	
1-60	421-429	Featured	
1-61	430-438	products	
1-62	439-444	Cloud	
1-63	445-455	Management	
1-64	456-461	Cloud	
1-65	462-468	Access	
1-66	469-476	Manager	
1-67	477-485	Foglight	
1-68	486-489	for	
1-69	490-504	Virtualization	
1-70	504-505	,	
1-71	506-516	Enterprise	
1-72	517-524	Edition	
1-73	525-533	Identity	
1-74	534-541	Manager	
1-75	542-544	On	
1-76	545-551	Demand	
1-77	552-561	Migration	
1-78	562-565	for	
1-79	566-571	Email	
1-80	572-577	Quest	
1-81	578-580	On	
1-82	581-587	Demand	
1-83	588-593	Rapid	
1-84	594-602	Recovery	
1-85	603-607	Data	
1-86	608-618	Protection	
1-87	619-627	Foglight	
1-88	628-631	for	
1-89	632-646	Virtualization	
1-90	647-655	NetVault	
1-91	656-664	NetVault	
1-92	665-668	for	
1-93	669-675	Office	
1-94	676-679	365	
1-95	680-690	QorePortal	
1-96	691-699	QoreStor	
1-97	700-705	Rapid	
1-98	706-714	Recovery	
1-99	715-722	vRanger	
1-100	723-731	Database	
1-101	732-742	Management	
1-102	743-751	Foglight	
1-103	752-755	for	
1-104	756-765	Databases	
1-105	766-775	Litespeed	
1-106	776-779	for	
1-107	780-783	SQL	
1-108	784-790	Server	
1-109	791-800	SharePlex	
1-110	801-810	Spotlight	
1-111	811-814	SQL	
1-112	815-821	Server	
1-113	822-832	Enterprise	
1-114	833-837	Toad	
1-115	838-842	Data	
1-116	843-848	Point	
1-117	849-853	Toad	
1-118	854-860	DevOps	
1-119	861-868	Toolkit	
1-120	869-873	Toad	
1-121	874-878	Edge	
1-122	879-883	Toad	
1-123	884-887	for	
1-124	888-894	Oracle	
1-125	895-899	Toad	
1-126	900-903	for	
1-127	904-907	SQL	
1-128	908-914	Server	
1-129	915-923	Identity	
1-130	924-925	&	
1-131	926-932	Access	
1-132	933-943	Management	
1-133	944-950	Active	
1-134	951-956	Roles	
1-135	957-965	Defender	
1-136	966-974	Identity	
1-137	975-982	Manager	
1-138	983-991	Identity	
1-139	992-999	Manager	
1-140	1000-1004	Data	
1-141	1005-1015	Governance	
1-142	1016-1019	One	
1-143	1020-1028	Identity	
1-144	1029-1038	Safeguard	
1-145	1039-1047	Password	
1-146	1048-1055	Manager	
1-147	1056-1066	Privileged	
1-148	1067-1073	Access	
1-149	1074-1079	Suite	
1-150	1080-1083	for	
1-151	1084-1088	Unix	
1-152	1089-1097	Starling	
1-153	1098-1105	Connect	
1-154	1106-1114	Starling	
1-155	1115-1125	Two-Factor	
1-156	1126-1140	Authentication	
1-157	1141-1150	syslog-ng	
1-158	1151-1160	Microsoft	
1-159	1161-1169	Platform	
1-160	1170-1180	Management	
1-161	1181-1187	Active	
1-162	1188-1201	Administrator	
1-163	1202-1208	Change	
1-164	1209-1216	Auditor	
1-165	1217-1227	Enterprise	
1-166	1228-1236	Reporter	
1-167	1237-1245	GPOADmin	
1-168	1246-1253	InTrust	
1-169	1254-1263	Metalogix	
1-170	1264-1273	Migration	
1-171	1274-1281	Manager	
1-172	1282-1284	On	
1-173	1285-1291	Demand	
1-174	1292-1301	Migration	
1-175	1302-1305	for	
1-176	1306-1311	Email	
1-177	1312-1317	Quest	
1-178	1318-1320	On	
1-179	1321-1327	Demand	
1-180	1328-1336	Recovery	
1-181	1337-1344	Manager	
1-182	1345-1356	Performance	
1-183	1357-1367	Monitoring	
1-184	1368-1376	Foglight	
1-185	1377-1385	Capacity	
1-186	1386-1394	Director	
1-187	1395-1403	Foglight	
1-188	1404-1410	Hybrid	
1-189	1411-1416	Cloud	
1-190	1417-1424	Manager	
1-191	1425-1433	Foglight	
1-192	1434-1437	for	
1-193	1438-1447	Databases	
1-194	1448-1456	Foglight	
1-195	1457-1460	for	
1-196	1461-1470	Operating	
1-197	1471-1478	Systems	
1-198	1479-1487	Foglight	
1-199	1488-1491	for	
1-200	1492-1498	Oracle	
1-201	1499-1507	Foglight	
1-202	1508-1511	for	
1-203	1512-1522	PostgreSQL	
1-204	1523-1531	Foglight	
1-205	1532-1535	for	
1-206	1536-1539	SQL	
1-207	1540-1546	Server	
1-208	1547-1555	Foglight	
1-209	1556-1559	for	
1-210	1560-1567	Storage	
1-211	1568-1578	Management	
1-212	1579-1587	Foglight	
1-213	1588-1591	for	
1-214	1592-1606	Virtualization	
1-215	1607-1616	Spotlight	
1-216	1617-1619	on	
1-217	1620-1623	SQL	
1-218	1624-1630	Server	
1-219	1631-1638	Unified	
1-220	1639-1647	Endpoint	
1-221	1648-1658	Management	
1-222	1659-1666	Desktop	
1-223	1667-1676	Authority	
1-224	1677-1687	Management	
1-225	1688-1693	Suite	
1-226	1694-1698	KACE	
1-227	1699-1704	Cloud	
1-228	1705-1711	Mobile	
1-229	1712-1718	Device	
1-230	1719-1726	Manager	
1-231	1727-1731	KACE	
1-232	1732-1739	Desktop	
1-233	1740-1749	Authority	
1-234	1750-1754	KACE	
1-235	1755-1764	Privilege	
1-236	1765-1772	Manager	
1-237	1773-1777	KACE	
1-238	1778-1785	Systems	
1-239	1786-1796	Deployment	
1-240	1797-1806	Appliance	
1-241	1807-1811	KACE	
1-242	1812-1819	Systems	
1-243	1820-1830	Management	
1-244	1831-1840	Appliance	
1-245	1841-1851	RemoteScan	
1-246	1852-1861	Solutions	
1-247	1862-1866	View	
1-248	1867-1870	all	
1-249	1871-1880	Solutions	
1-250	1881-1891	Industries	
1-251	1892-1901	Education	
1-252	1902-1908	Energy	
1-253	1909-1916	Federal	
1-254	1917-1927	Government	
1-255	1928-1937	Financial	
1-256	1938-1946	Services	
1-257	1947-1957	Healthcare	
1-258	1958-1963	State	
1-259	1964-1965	&	
1-260	1966-1971	Local	
1-261	1972-1982	Government	
1-262	1983-1992	Platforms	
1-263	1993-1999	Active	
1-264	2000-2009	Directory	
1-265	2010-2015	Cisco	
1-266	2016-2019	DB2	
1-267	2020-2028	Exchange	
1-268	2029-2035	Google	
1-269	2036-2043	Hyper-v	
1-270	2044-2049	Lotus	
1-271	2050-2055	Notes	
1-272	2056-2064	OneDrive	
1-273	2065-2068	for	
1-274	2069-2077	Business	
1-275	2078-2084	Office	
1-276	2085-2088	365	
1-277	2089-2095	Oracle	
1-278	2096-2099	SAP	
1-279	2099-2100	/	
1-280	2100-2106	Sybase	
1-281	2107-2117	SharePoint	
1-282	2118-2121	SQL	
1-283	2122-2128	Server	
1-284	2129-2134	Teams	
1-285	2135-2139	Unix	
1-286	2139-2140	/	
1-287	2140-2145	Linux	
1-288	2146-2152	VMware	
1-289	2153-2160	Windows	
1-290	2161-2167	Server	
1-291	2168-2173	Cloud	
1-292	2174-2184	Management	
1-293	2185-2189	Data	
1-294	2190-2200	Protection	
1-295	2201-2209	Overview	
1-296	2210-2216	Backup	
1-297	2217-2218	&	
1-298	2219-2227	Recovery	
1-299	2228-2233	Cloud	
1-300	2234-2244	Management	
1-301	2245-2258	Deduplication	
1-302	2259-2260	&	
1-303	2261-2272	Compression	
1-304	2273-2281	Disaster	
1-305	2282-2290	Recovery	
1-306	2291-2297	Office	
1-307	2298-2301	365	
1-308	2302-2306	Data	
1-309	2307-2317	Protection	
1-310	2318-2332	Virtualization	
1-311	2333-2343	Management	
1-312	2344-2352	Database	
1-313	2353-2363	Management	
1-314	2364-2372	Overview	
1-315	2373-2387	Administration	
1-316	2388-2393	Cloud	
1-317	2394-2403	Migration	
1-318	2404-2408	Data	
1-319	2409-2420	Preparation	
1-320	2421-2424	and	
1-321	2425-2437	Provisioning	
1-322	2438-2449	Development	
1-323	2450-2456	DevOps	
1-324	2457-2468	Performance	
1-325	2469-2479	Monitoring	
1-326	2480-2491	Replication	
1-327	2492-2501	Supported	
1-328	2502-2511	Platforms	
1-329	2512-2515	IBM	
1-330	2516-2519	DB2	
1-331	2520-2525	MySQL	
1-332	2526-2532	Oracle	
1-333	2533-2543	PostgreSQL	
1-334	2544-2547	SAP	
1-335	2548-2557	Solutions	
1-336	2558-2561	SQL	
1-337	2562-2568	Server	
1-338	2569-2573	GDPR	
1-339	2574-2584	Compliance	
1-340	2585-2593	Identity	
1-341	2594-2595	&	
1-342	2596-2602	Access	
1-343	2603-2613	Management	
1-344	2614-2622	Overview	
1-345	2623-2631	Identity	
1-346	2632-2646	Administration	
1-347	2647-2655	Identity	
1-348	2656-2666	Governance	
1-349	2667-2677	Privileged	
1-350	2678-2684	Access	
1-351	2685-2695	Management	
1-352	2696-2698	AD	
1-353	2699-2706	Account	
1-354	2707-2716	Lifecycle	
1-355	2717-2727	Management	
1-356	2728-2734	Access	
1-357	2735-2742	Control	
1-358	2743-2748	Cloud	
1-359	2749-2752	Log	
1-360	2753-2763	Management	
1-361	2764-2773	Microsoft	
1-362	2774-2782	Platform	
1-363	2783-2793	Management	
1-364	2794-2802	Overview	
1-365	2803-2810	Mergers	
1-366	2811-2812	&	
1-367	2813-2825	Acquisitions	
1-368	2826-2835	Migration	
1-369	2836-2837	&	
1-370	2838-2851	Consolidation	
1-371	2852-2858	Office	
1-372	2859-2862	365	
1-373	2863-2872	Migration	
1-374	2873-2874	&	
1-375	2875-2885	Management	
1-376	2886-2894	Security	
1-377	2895-2896	&	
1-378	2897-2907	Compliance	
1-379	2908-2915	Windows	
1-380	2916-2922	Backup	
1-381	2923-2924	&	
1-382	2925-2933	Recovery	
1-383	2934-2943	Supported	
1-384	2944-2953	Platforms	
1-385	2954-2960	Active	
1-386	2961-2970	Directory	
1-387	2971-2976	Cisco	
1-388	2977-2985	Exchange	
1-389	2986-2992	Google	
1-390	2993-3002	Groupwise	
1-391	3003-3008	Lotus	
1-392	3009-3014	Notes	
1-393	3015-3021	Office	
1-394	3022-3025	365	
1-395	3026-3034	OneDrive	
1-396	3035-3038	for	
1-397	3039-3047	Business	
1-398	3048-3058	SharePoint	
1-399	3059-3062	SQL	
1-400	3063-3069	Server	
1-401	3070-3075	Teams	
1-402	3076-3080	Unix	
1-403	3080-3081	/	
1-404	3081-3086	Linux	
1-405	3087-3094	Windows	
1-406	3095-3101	Server	
1-407	3102-3113	Performance	
1-408	3114-3124	Monitoring	
1-409	3125-3133	Overview	
1-410	3134-3142	Database	
1-411	3143-3154	Performance	
1-412	3155-3165	Monitoring	
1-413	3166-3175	Operating	
1-414	3176-3182	System	
1-415	3183-3193	Monitoring	
1-416	3194-3201	Storage	
1-417	3202-3213	Performance	
1-418	3214-3215	&	
1-419	3216-3227	Utilization	
1-420	3228-3238	Management	
1-421	3239-3248	Supported	
1-422	3249-3258	Platforms	
1-423	3259-3265	Active	
1-424	3266-3275	Directory	
1-425	3276-3279	DB2	
1-426	3280-3288	Exchange	
1-427	3289-3293	Java	
1-428	3294-3301	Hyper-V	
1-429	3302-3303	.	
1-430	3303-3306	NET	
1-431	3307-3313	Oracle	
1-432	3314-3317	SAP	
1-433	3317-3318	/	
1-434	3318-3324	Sybase	
1-435	3325-3332	Storage	
1-436	3333-3336	SQL	
1-437	3337-3343	Server	
1-438	3344-3350	VMware	
1-439	3351-3358	Unified	
1-440	3359-3367	Endpoint	
1-441	3368-3378	Management	
1-442	3379-3387	Overview	
1-443	3388-3396	Endpoint	
1-444	3397-3407	Compliance	
1-445	3408-3416	Endpoint	
1-446	3417-3425	Security	
1-447	3426-3434	Endpoint	
1-448	3435-3445	Visibility	
1-449	3446-3456	Industries	
1-450	3457-3466	Education	
1-451	3467-3477	Healthcare	
1-452	3478-3487	Supported	
1-453	3488-3497	Platforms	
1-454	3498-3506	Internet	
1-455	3507-3509	of	
1-456	3510-3516	things	
1-457	3517-3526	Microsoft	
1-458	3526-3527	®	
1-459	3528-3535	Windows	
1-460	3536-3539	MAC	
1-461	3540-3544	UNIX	
1-462	3544-3545	/	
1-463	3545-3550	LinuX	
1-464	3551-3560	Resources	
1-465	3561-3566	Blogs	
1-466	3567-3572	Blogs	
1-467	3573-3574	A	
1-468	3575-3577	to	
1-469	3578-3579	Z	
1-470	3580-3584	Data	
1-471	3585-3595	Protection	
1-472	3596-3604	Database	
1-473	3605-3615	Management	
1-474	3616-3625	Microsoft	
1-475	3626-3634	Platform	
1-476	3635-3645	Management	
1-477	3646-3657	Performance	
1-478	3658-3668	Monitoring	
1-479	3669-3676	Unified	
1-480	3677-3685	Endpoint	
1-481	3686-3696	Management	
1-482	3697-3705	Customer	
1-483	3706-3713	Stories	
1-484	3714-3723	Documents	
1-485	3724-3730	Events	
1-486	3731-3739	Webcasts	
1-487	3740-3749	Technical	
1-488	3750-3763	Documentation	
1-489	3764-3770	Videos	
1-490	3771-3782	Whitepapers	
1-491	3783-3789	Trials	
1-492	3790-3798	Services	
1-493	3799-3809	Consulting	
1-494	3810-3818	Services	
1-495	3819-3827	Overview	
1-496	3828-3837	Microsoft	
1-497	3838-3846	Platform	
1-498	3847-3855	Services	
1-499	3856-3860	Data	
1-500	3861-3871	Protection	
1-501	3872-3880	Services	
1-502	3881-3888	Unified	
1-503	3889-3897	Endpoint	
1-504	3898-3908	Management	
1-505	3909-3920	Performance	
1-506	3921-3931	Monitoring	
1-507	3932-3940	Services	
1-508	3941-3949	Database	
1-509	3950-3960	Management	
1-510	3961-3969	Services	
1-511	3970-3981	Educational	
1-512	3982-3990	Services	
1-513	3991-3998	Support	
1-514	3999-4007	Services	
1-515	4008-4015	Support	
1-516	4016-4023	Support	
1-517	4024-4028	Home	
1-518	4029-4031	By	
1-519	4032-4039	Product	
1-520	4040-4043	All	
1-521	4044-4052	Products	
1-522	4053-4062	AppAssure	
1-523	4063-4070	Archive	
1-524	4071-4078	Manager	
1-525	4079-4085	Change	
1-526	4086-4093	Auditor	
1-527	4094-4101	Desktop	
1-528	4102-4111	Authority	
1-529	4112-4114	DR	
1-530	4115-4121	Series	
1-531	4122-4130	Foglight	
1-532	4131-4135	KACE	
1-533	4136-4145	Migration	
1-534	4146-4153	Manager	
1-535	4154-4162	NetVault	
1-536	4163-4168	Rapid	
1-537	4169-4177	Recovery	
1-538	4178-4187	SharePlex	
1-539	4188-4192	Toad	
1-540	4193-4200	vRanger	
1-541	4201-4208	Contact	
1-542	4209-4216	Support	
1-543	4217-4225	Overview	
1-544	4226-4234	Customer	
1-545	4235-4242	Service	
1-546	4243-4252	Licensing	
1-547	4253-4263	Assistance	
1-548	4264-4271	Renewal	
1-549	4272-4282	Assistance	
1-550	4283-4292	Technical	
1-551	4293-4300	Support	
1-552	4301-4309	Download	
1-553	4310-4318	Software	
1-554	4319-4328	Knowledge	
1-555	4329-4333	Base	
1-556	4334-4336	My	
1-557	4337-4344	Account	
1-558	4345-4347	My	
1-559	4348-4356	Products	
1-560	4357-4359	My	
1-561	4360-4367	Service	
1-562	4368-4376	Requests	
1-563	4377-4379	My	
1-564	4380-4388	Licenses	
1-565	4389-4391	My	
1-566	4392-4398	Groups	
1-567	4399-4401	My	
1-568	4402-4409	Profile	
1-569	4410-4418	Policies	
1-570	4419-4420	&	
1-571	4421-4431	Procedures	
1-572	4432-4442	Consulting	
1-573	4443-4451	Services	
1-574	4452-4461	Microsoft	
1-575	4462-4470	Platform	
1-576	4471-4481	Management	
1-577	4482-4486	Data	
1-578	4487-4497	Protection	
1-579	4498-4505	Unified	
1-580	4506-4514	Endpoint	
1-581	4515-4525	Management	
1-582	4526-4537	Performance	
1-583	4538-4548	Monitoring	
1-584	4549-4557	Database	
1-585	4558-4568	Management	
1-586	4569-4578	Technical	
1-587	4579-4592	Documentation	
1-588	4593-4604	Educational	
1-589	4605-4613	Services	
1-590	4614-4618	User	
1-591	4619-4625	Forums	
1-592	4626-4631	Video	
1-593	4632-4641	Tutorials	
1-594	4642-4650	Partners	
1-595	4651-4659	Overview	
1-596	4660-4667	Partner	
1-597	4668-4674	Circle	
1-598	4675-4678	Log	
1-599	4679-4681	In	
1-600	4682-4688	Become	
1-601	4689-4690	a	
1-602	4691-4698	Partner	
1-603	4699-4703	Find	
1-604	4704-4705	a	
1-605	4706-4713	Partner	
1-606	4714-4721	Partner	
1-607	4722-4731	Community	
1-608	4732-4743	Communities	
1-609	4744-4748	Home	
1-610	4749-4754	Blogs	
1-611	4755-4759	Data	
1-612	4760-4770	Protection	
1-613	4771-4779	Database	
1-614	4780-4790	Management	
1-615	4791-4798	ITNinja	
1-616	4799-4808	Microsoft	
1-617	4809-4817	Platform	
1-618	4818-4828	Management	
1-619	4829-4840	Performance	
1-620	4841-4851	Monitoring	
1-621	4852-4856	Toad	
1-622	4857-4862	World	
1-623	4863-4867	Blog	
1-624	4868-4875	Unified	
1-625	4876-4884	Endpoint	
1-626	4885-4895	Management	
1-627	4896-4902	Forums	
1-628	4903-4906	All	
1-629	4907-4914	Product	
1-630	4915-4921	Forums	
1-631	4922-4928	Active	
1-632	4929-4942	Administrator	
1-633	4943-4950	Desktop	
1-634	4951-4960	Authority	
1-635	4961-4969	Foglight	
1-636	4970-4977	ITNinja	
1-637	4978-4987	Migration	
1-638	4988-4995	Manager	
1-639	4996-4999	for	
1-640	5000-5006	Active	
1-641	5007-5016	Directory	
1-642	5017-5025	NetVault	
1-643	5026-5031	Rapid	
1-644	5032-5040	Recovery	
1-645	5041-5045	Toad	
1-646	5046-5051	World	
1-647	5052-5057	Forum	
1-648	5058-5064	Social	
1-649	5065-5073	Networks	
1-650	5074-5082	Facebook	
1-651	5083-5091	LinkedIn	
1-652	5092-5099	Twitter	
1-653	5099-5100	@	
1-654	5100-5105	Quest	
1-655	5106-5113	Twitter	
1-656	5113-5114	@	
1-657	5114-5126	QuestSupport	
1-658	5127-5134	YouTube	
1-659	5135-5139	製品情報	
1-660	5140-5144	すべての	
1-661	5144-5148	製品情報	
1-662	5148-5149	を	
1-663	5149-5150	見	
1-664	5150-5151	る	
1-665	5152-5158	Change	
1-666	5159-5166	Auditor	
1-667	5167-5175	Foglight	
1-668	5176-5180	KACE	
1-669	5181-5190	Metalogix	
1-670	5191-5200	Migration	
1-671	5201-5208	Manager	
1-672	5209-5217	Migrator	
1-673	5218-5221	for	
1-674	5222-5227	Notes	
1-675	5228-5230	to	
1-676	5231-5241	SharePoint	
1-677	5242-5250	NetVault	
1-678	5251-5257	Backup	
1-679	5258-5260	On	
1-680	5261-5267	Demand	
1-681	5268-5277	Migration	
1-682	5278-5281	for	
1-683	5282-5287	Email	
1-684	5288-5296	QoreStor	
1-685	5297-5302	Rapid	
1-686	5303-5311	Recovery	
1-687	5312-5320	Recovery	
1-688	5321-5328	Manager	
1-689	5329-5338	SharePlex	
1-690	5339-5348	Spotlight	
1-691	5349-5353	Toad	
1-692	5354-5361	ソリューション	
1-693	5362-5366	すべての	
1-694	5366-5374	プラットフォーム	
1-695	5374-5375	を	
1-696	5375-5376	見	
1-697	5376-5377	る	
1-698	5378-5382	クラウド	
1-699	5382-5384	管理	
1-700	5385-5389	GDPR	
1-701	5389-5397	コンプライアンス	
1-702	5398-5401	データ	
1-703	5401-5403	保護	
1-704	5404-5408	クラウド	
1-705	5408-5410	管理	
1-706	5411-5420	ディザスタリカバリ	
1-707	5421-5427	バックアップ	
1-708	5427-5428	と	
1-709	5428-5432	リカバリ	
1-710	5433-5439	Office	
1-711	5440-5443	365	
1-712	5444-5447	データ	
1-713	5447-5449	保護	
1-714	5450-5455	仮想化管理	
1-715	5456-5460	重複除外	
1-716	5460-5461	と	
1-717	5461-5463	複製	
1-718	5464-5470	データベース	
1-719	5470-5472	管理	
1-720	5473-5479	DevOps	
1-721	5480-5483	データ	
1-722	5483-5484	の	
1-723	5484-5486	準備	
1-724	5486-5487	と	
1-725	5487-5489	分析	
1-726	5490-5496	データベース	
1-727	5496-5497	の	
1-728	5497-5501	クラウド	
1-729	5501-5503	移行	
1-730	5504-5517	データベースパフォーマンス	
1-731	5517-5519	監視	
1-732	5520-5526	データベース	
1-733	5526-5528	管理	
1-734	5529-5535	データベース	
1-735	5535-5537	複製	
1-736	5537-5546	ソフトウェアツール	
1-737	5547-5549	統合	
1-738	5549-5556	エンドポイント	
1-739	5556-5558	管理	
1-740	5559-5574	エンドポイントコンプライアンス	
1-741	5575-5588	エンドポイントセキュリティ	
1-742	5589-5596	エンドポイント	
1-743	5596-5597	の	
1-744	5597-5600	可視化	
1-745	5601-5610	Microsoft	
1-746	5610-5618	プラットフォーム	
1-747	5618-5620	管理	
1-748	5621-5627	ハイブリッド	
1-749	5627-5633	Active	
1-750	5634-5643	Directory	
1-751	5643-5644	の	
1-752	5644-5650	セキュリティ	
1-753	5650-5651	と	
1-754	5651-5656	ガバナンス	
1-755	5657-5666	Microsoft	
1-756	5666-5674	プラットフォーム	
1-757	5674-5675	の	
1-758	5675-5679	移行計画	
1-759	5679-5680	と	
1-760	5680-5682	統合	
1-761	5683-5689	セキュリティ	
1-762	5689-5690	と	
1-763	5690-5698	コンプライアンス	
1-764	5699-5701	情報	
1-765	5701-5706	アーカイブ	
1-766	5706-5709	および	
1-767	5709-5714	ストレージ	
1-768	5714-5716	管理	
1-769	5716-5723	ソリューション	
1-770	5724-5731	Windows	
1-771	5731-5732	の	
1-772	5732-5738	バックアップ	
1-773	5738-5739	と	
1-774	5739-5743	リカバリ	
1-775	5744-5753	Microsoft	
1-776	5754-5760	Server	
1-777	5760-5761	の	
1-778	5761-5768	パフォーマンス	
1-779	5768-5769	と	
1-780	5769-5772	可用性	
1-781	5773-5777	レポート	
1-782	5777-5781	作成機能	
1-783	5782-5790	グループポリシー	
1-784	5790-5791	と	
1-785	5791-5793	権限	
1-786	5794-5801	パフォーマンス	
1-787	5801-5803	監視	
1-788	5804-5808	サービス	
1-789	5809-5821	コンサルティングサービス	
1-790	5822-5831	Microsoft	
1-791	5831-5839	プラットフォーム	
1-792	5839-5841	管理	
1-793	5842-5845	データ	
1-794	5845-5847	保護	
1-795	5848-5850	統合	
1-796	5850-5857	エンドポイント	
1-797	5857-5859	管理	
1-798	5860-5867	パフォーマンス	
1-799	5867-5869	監視	
1-800	5870-5876	データベース	
1-801	5876-5878	管理	
1-802	5879-5885	トレーニング	
1-803	5885-5886	と	
1-804	5886-5890	認定資格	
1-805	5891-5899	サポートサービス	
1-806	5900-5904	サポート	
1-807	5905-5912	サポートホーム	
1-808	5913-5915	製品	
1-809	5915-5916	で	
1-810	5916-5918	検索	
1-811	5919-5922	All	
1-812	5923-5931	Products	
1-813	5932-5941	AppAssure	
1-814	5942-5949	Archive	
1-815	5950-5957	Manager	
1-816	5958-5964	Change	
1-817	5965-5972	Auditor	
1-818	5973-5980	Desktop	
1-819	5981-5990	Authority	
1-820	5991-5993	DR	
1-821	5994-6000	Series	
1-822	6001-6009	Foglight	
1-823	6010-6014	KACE	
1-824	6015-6024	Migration	
1-825	6025-6032	Manager	
1-826	6033-6041	NetVault	
1-827	6042-6047	Rapid	
1-828	6048-6056	Recovery	
1-829	6057-6066	SharePlex	
1-830	6067-6071	Toad	
1-831	6072-6079	vRanger	
1-832	6080-6081	お	
1-833	6081-6082	問	
1-834	6082-6083	い	
1-835	6083-6084	合	
1-836	6084-6086	わせ	
1-837	6087-6090	すべて	
1-838	6091-6099	カスタマサービス	
1-839	6100-6105	ライセンス	
1-840	6106-6112	アシスタンス	
1-841	6113-6115	更新	
1-842	6115-6116	の	
1-843	6116-6122	アシスタンス	
1-844	6123-6125	技術	
1-845	6125-6129	サポート	
1-846	6130-6141	コミュニティフォーラム	
1-847	6142-6148	ソフトウェア	
1-848	6148-6149	の	
1-849	6149-6155	ダウンロード	
1-850	6156-6163	ナレッジベース	
1-851	6164-6171	マイアカウント	
1-852	6172-6174	マイ	
1-853	6175-6180	プロダクト	
1-854	6181-6183	My	
1-855	6183-6192	サービスリクエスト	
1-856	6193-6195	マイ	
1-857	6196-6201	ライセンス	
1-858	6202-6204	マイ	
1-859	6205-6209	グループ	
1-860	6210-6212	マイ	
1-861	6213-6219	プロファイル	
1-862	6220-6224	ポリシー	
1-863	6224-6227	および	
1-864	6227-6229	手順	
1-865	6230-6242	コンサルティングサービス	
1-866	6243-6252	Microsoft	
1-867	6252-6260	プラットフォーム	
1-868	6260-6262	管理	
1-869	6263-6266	データ	
1-870	6266-6268	保護	
1-871	6269-6271	統合	
1-872	6271-6278	エンドポイント	
1-873	6278-6280	管理	
1-874	6281-6288	パフォーマンス	
1-875	6288-6290	監視	
1-876	6291-6297	データベース	
1-877	6297-6299	管理	
1-878	6300-6307	リリースノート	
1-879	6307-6310	および	
1-880	6310-6313	ガイド	
1-881	6314-6316	教育	
1-882	6316-6320	サービス	
1-883	6321-6331	ビデオチュートリアル	
1-884	6332-6337	トライアル	
1-885	6338-6343	パートナー	
1-886	6344-6351	Partner	
1-887	6352-6358	Circle	
1-888	6358-6360	への	
1-889	6360-6364	ログイン	
1-890	6365-6370	パートナー	
1-891	6370-6373	になる	
1-892	6374-6378	Find	
1-893	6379-6380	a	
1-894	6381-6388	Partner	
1-895	6389-6400	パートナーコミュニティ	
1-896	6401-6407	コミュニティ	
1-897	6408-6413	Quest	
1-898	6414-6423	Community	
1-899	6424-6428	Site	
1-900	6429-6435	Search	
1-901	6436-6440	User	
1-902	6441-6445	Site	
1-903	6446-6452	Search	
1-904	6453-6457	User	
1-905	6458-6463	Blogs	
1-906	6464-6472	Database	
1-907	6473-6483	Management	
1-908	6484-6485	5	
1-909	6486-6491	MySQL	
1-910	6492-6503	Performance	
1-911	6504-6510	Tuning	
1-912	6511-6515	Tips	
1-913	6516-6520	Data	
1-914	6521-6531	Protection	
1-915	6532-6540	Database	
1-916	6541-6551	Management	
1-917	6552-6561	Microsoft	
1-918	6562-6570	Platform	
1-919	6571-6581	Management	
1-920	6582-6593	Performance	
1-921	6594-6604	Monitoring	
1-922	6605-6612	Unified	
1-923	6613-6621	Endpoint	
1-924	6622-6632	Management	
1-925	6633-6638	Quest	
1-926	6639-6643	More	
1-927	6644-6650	Cancel	
1-928	6651-6654	New	
1-929	6655-6656	5	
1-930	6657-6662	MySQL	
1-931	6663-6674	Performance	
1-932	6675-6681	Tuning	
1-933	6682-6686	Tips	
1-934	6687-6694	Actions	
1-935	6695-6704	Subscribe	
1-936	6705-6707	by	
1-937	6708-6713	email	
1-938	6714-6719	Posts	
1-939	6720-6723	RSS	
1-940	6724-6728	More	
1-941	6729-6735	Cancel	
1-942	6736-6740	Tags	
1-943	6741-6749	Database	
1-944	6750-6761	Performance	
1-945	6762-6767	MySQL	
1-946	6768-6773	Janis	
1-947	6774-6781	Griffin	
1-948	6782-6785	Jul	
1-949	6786-6788	30	
1-950	6788-6789	,	
1-951	6790-6794	2020	
1-952	6795-6797	If	
1-953	6798-6801	you	
1-954	6802-6807	pride	
1-955	6808-6816	yourself	
1-956	6817-6819	on	
1-957	6820-6824	your	
1-958	6825-6828	SQL	
1-959	6829-6841	optimization	
1-960	6842-6848	skills	
1-961	6848-6849	,	
1-962	6850-6854	then	
1-963	6855-6859	this	
1-964	6860-6862	is	
1-965	6863-6864	a	
1-966	6865-6869	good	
1-967	6870-6874	time	
1-968	6875-6877	to	
1-969	6878-6885	advance	
1-970	6886-6890	your	
1-971	6891-6896	MySQL	
1-972	6897-6908	performance	
1-973	6909-6915	tuning	
1-974	6915-6916	.	

#Text=For one thing, MySQL has spent the last seven years as a very close #2 in the race with #1- Oracle and #3- Microsoft SQL Server, according to DB-Engines.
2-1	6917-6920	For	
2-2	6921-6924	one	
2-3	6925-6930	thing	
2-4	6930-6931	,	
2-5	6932-6937	MySQL	
2-6	6938-6941	has	
2-7	6942-6947	spent	
2-8	6948-6951	the	
2-9	6952-6956	last	
2-10	6957-6962	seven	
2-11	6963-6968	years	
2-12	6969-6971	as	
2-13	6972-6973	a	
2-14	6974-6978	very	
2-15	6979-6984	close	
2-16	6985-6987	#2	
2-17	6988-6990	in	
2-18	6991-6994	the	
2-19	6995-6999	race	
2-20	7000-7004	with	
2-21	7005-7007	#1	
2-22	7007-7008	-	
2-23	7009-7015	Oracle	
2-24	7016-7019	and	
2-25	7020-7022	#3	
2-26	7022-7023	-	
2-27	7024-7033	Microsoft	
2-28	7034-7037	SQL	
2-29	7038-7044	Server	
2-30	7044-7045	,	
2-31	7046-7055	according	
2-32	7056-7058	to	
2-33	7059-7069	DB-Engines	
2-34	7069-7070	.	

#Text=For another, MySQL is an open source database, something you can’t say about #1 or #3.
3-1	7071-7074	For	
3-2	7075-7082	another	
3-3	7082-7083	,	
3-4	7084-7089	MySQL	
3-5	7090-7092	is	
3-6	7093-7095	an	
3-7	7096-7100	open	
3-8	7101-7107	source	
3-9	7108-7116	database	
3-10	7116-7117	,	
3-11	7118-7127	something	
3-12	7128-7131	you	
3-13	7132-7135	can	
3-14	7135-7136	’	
3-15	7136-7137	t	
3-16	7138-7141	say	
3-17	7142-7147	about	
3-18	7148-7150	#1	
3-19	7151-7153	or	
3-20	7154-7156	#3	
3-21	7156-7157	.	

#Text=If you and your fellow database professionals are gravitating toward open source, MySQL is currently the one to beat.
4-1	7158-7160	If	
4-2	7161-7164	you	
4-3	7165-7168	and	
4-4	7169-7173	your	
4-5	7174-7180	fellow	
4-6	7181-7189	database	
4-7	7190-7203	professionals	
4-8	7204-7207	are	
4-9	7208-7219	gravitating	
4-10	7220-7226	toward	
4-11	7227-7231	open	
4-12	7232-7238	source	
4-13	7238-7239	,	
4-14	7240-7245	MySQL	
4-15	7246-7248	is	
4-16	7249-7258	currently	
4-17	7259-7262	the	
4-18	7263-7266	one	
4-19	7267-7269	to	
4-20	7270-7274	beat	
4-21	7274-7275	.	

#Text=It’s available on FreeBSD, Linux, OS X, Solaris and Windows.
5-1	7276-7278	It	
5-2	7278-7279	’	
5-3	7279-7280	s	
5-4	7281-7290	available	
5-5	7291-7293	on	
5-6	7294-7301	FreeBSD	
5-7	7301-7302	,	
5-8	7303-7308	Linux	
5-9	7308-7309	,	
5-10	7310-7312	OS	
5-11	7313-7314	X	
5-12	7314-7315	,	
5-13	7316-7323	Solaris	
5-14	7324-7327	and	
5-15	7328-7335	Windows	
5-16	7335-7336	.	

#Text=It supports almost 20 different programming languages, from Ada to Tcl, which means it has something for just about every developer.
6-1	7337-7339	It	
6-2	7340-7348	supports	
6-3	7349-7355	almost	
6-4	7356-7358	20	
6-5	7359-7368	different	
6-6	7369-7380	programming	
6-7	7381-7390	languages	
6-8	7390-7391	,	
6-9	7392-7396	from	
6-10	7397-7400	Ada	
6-11	7401-7403	to	
6-12	7404-7407	Tcl	
6-13	7407-7408	,	
6-14	7409-7414	which	
6-15	7415-7420	means	
6-16	7421-7423	it	
6-17	7424-7427	has	
6-18	7428-7437	something	
6-19	7438-7441	for	
6-20	7442-7446	just	
6-21	7447-7452	about	
6-22	7453-7458	every	
6-23	7459-7468	developer	
6-24	7468-7469	.	

#Text=And, MySQL has made recent news by changing obsolete terminology written into its source code and documentation.
7-1	7470-7473	And	
7-2	7473-7474	,	
7-3	7475-7480	MySQL	
7-4	7481-7484	has	
7-5	7485-7489	made	
7-6	7490-7496	recent	
7-7	7497-7501	news	
7-8	7502-7504	by	
7-9	7505-7513	changing	
7-10	7514-7522	obsolete	
7-11	7523-7534	terminology	
7-12	7535-7542	written	
7-13	7543-7547	into	
7-14	7548-7551	its	
7-15	7552-7558	source	
7-16	7559-7563	code	
7-17	7564-7567	and	
7-18	7568-7581	documentation	
7-19	7581-7582	.	

#Text=Their creators and engineers are paying attention.
8-1	7583-7588	Their	
8-2	7589-7597	creators	
8-3	7598-7601	and	
8-4	7602-7611	engineers	
8-5	7612-7615	are	
8-6	7616-7622	paying	
8-7	7623-7632	attention	
8-8	7632-7633	.	

#Text=The need for MySQL performance tuning
#Text=But even with the #2 database, you can still write inefficient SQL statements and launch queries that run slowly.
9-1	7634-7637	The	
9-2	7638-7642	need	
9-3	7643-7646	for	
9-4	7647-7652	MySQL	
9-5	7653-7664	performance	
9-6	7665-7671	tuning	
9-7	7672-7675	But	
9-8	7676-7680	even	
9-9	7681-7685	with	
9-10	7686-7689	the	
9-11	7690-7692	#2	
9-12	7693-7701	database	
9-13	7701-7702	,	
9-14	7703-7706	you	
9-15	7707-7710	can	
9-16	7711-7716	still	
9-17	7717-7722	write	
9-18	7723-7734	inefficient	
9-19	7735-7738	SQL	
9-20	7739-7749	statements	
9-21	7750-7753	and	
9-22	7754-7760	launch	
9-23	7761-7768	queries	
9-24	7769-7773	that	
9-25	7774-7777	run	
9-26	7778-7784	slowly	
9-27	7784-7785	.	

#Text=For that, there’s MySQL performance tuning, which I’ll describe in the five tips below.
10-1	7786-7789	For	
10-2	7790-7794	that	
10-3	7794-7795	,	
10-4	7796-7801	there	
10-5	7801-7802	’	
10-6	7802-7803	s	
10-7	7804-7809	MySQL	
10-8	7810-7821	performance	
10-9	7822-7828	tuning	
10-10	7828-7829	,	
10-11	7830-7835	which	
10-12	7836-7837	I	
10-13	7837-7838	’	
10-14	7838-7840	ll	
10-15	7841-7849	describe	
10-16	7850-7852	in	
10-17	7853-7856	the	
10-18	7857-7861	five	
10-19	7862-7866	tips	
10-20	7867-7872	below	
10-21	7872-7873	.	

#Text=Tip 1: Monitor wait time
#Text=How long are your users waiting for a response from the database?
11-1	7874-7877	Tip	
11-2	7878-7879	1	
11-3	7879-7880	:	
11-4	7881-7888	Monitor	
11-5	7889-7893	wait	
11-6	7894-7898	time	
11-7	7899-7902	How	
11-8	7903-7907	long	
11-9	7908-7911	are	
11-10	7912-7916	your	
11-11	7917-7922	users	
11-12	7923-7930	waiting	
11-13	7931-7934	for	
11-14	7935-7936	a	
11-15	7937-7945	response	
11-16	7946-7950	from	
11-17	7951-7954	the	
11-18	7955-7963	database	
11-19	7963-7964	?	

#Text=MySQL provides wait events and thread states to help you answer that question.
12-1	7965-7970	MySQL	
12-2	7971-7979	provides	
12-3	7980-7984	wait	
12-4	7985-7991	events	
12-5	7992-7995	and	
12-6	7996-8002	thread	
12-7	8003-8009	states	
12-8	8010-8012	to	
12-9	8013-8017	help	
12-10	8018-8021	you	
12-11	8022-8028	answer	
12-12	8029-8033	that	
12-13	8034-8042	question	
12-14	8042-8043	.	

#Text=By monitoring each step that a SQL statement takes in the database until it sends back a response, you draw a clear picture of where the query spends time.
13-1	8044-8046	By	
13-2	8047-8057	monitoring	
13-3	8058-8062	each	
13-4	8063-8067	step	
13-5	8068-8072	that	
13-6	8073-8074	a	
13-7	8075-8078	SQL	
13-8	8079-8088	statement	
13-9	8089-8094	takes	
13-10	8095-8097	in	
13-11	8098-8101	the	
13-12	8102-8110	database	
13-13	8111-8116	until	
13-14	8117-8119	it	
13-15	8120-8125	sends	
13-16	8126-8130	back	
13-17	8131-8132	a	
13-18	8133-8141	response	
13-19	8141-8142	,	
13-20	8143-8146	you	
13-21	8147-8151	draw	
13-22	8152-8153	a	
13-23	8154-8159	clear	
13-24	8160-8167	picture	
13-25	8168-8170	of	
13-26	8171-8176	where	
13-27	8177-8180	the	
13-28	8181-8186	query	
13-29	8187-8193	spends	
13-30	8194-8198	time	
13-31	8198-8199	.	

#Text=And that’s where you start your MySQL performance tuning.
14-1	8200-8203	And	
14-2	8204-8208	that	
14-3	8208-8209	’	
14-4	8209-8210	s	
14-5	8211-8216	where	
14-6	8217-8220	you	
14-7	8221-8226	start	
14-8	8227-8231	your	
14-9	8232-8237	MySQL	
14-10	8238-8249	performance	
14-11	8250-8256	tuning	
14-12	8256-8257	.	

#Text=In early versions of MySQL, you couldn’t look at the Performance_Schema database or the Information_Schema database without causing locking or affecting performance.
15-1	8258-8260	In	
15-2	8261-8266	early	
15-3	8267-8275	versions	
15-4	8276-8278	of	
15-5	8279-8284	MySQL	
15-6	8284-8285	,	
15-7	8286-8289	you	
15-8	8290-8296	couldn	
15-9	8296-8297	’	
15-10	8297-8298	t	
15-11	8299-8303	look	
15-12	8304-8306	at	
15-13	8307-8310	the	
15-14	8311-8329	Performance_Schema	
15-15	8330-8338	database	
15-16	8339-8341	or	
15-17	8342-8345	the	
15-18	8346-8364	Information_Schema	
15-19	8365-8373	database	
15-20	8374-8381	without	
15-21	8382-8389	causing	
15-22	8390-8397	locking	
15-23	8398-8400	or	
15-24	8401-8410	affecting	
15-25	8411-8422	performance	
15-26	8422-8423	.	

#Text=Nowadays, MySQL offers better information on both current and historical events at the levels of statements, stages and waits.
16-1	8424-8432	Nowadays	
16-2	8432-8433	,	
16-3	8434-8439	MySQL	
16-4	8440-8446	offers	
16-5	8447-8453	better	
16-6	8454-8465	information	
16-7	8466-8468	on	
16-8	8469-8473	both	
16-9	8474-8481	current	
16-10	8482-8485	and	
16-11	8486-8496	historical	
16-12	8497-8503	events	
16-13	8504-8506	at	
16-14	8507-8510	the	
16-15	8511-8517	levels	
16-16	8518-8520	of	
16-17	8521-8531	statements	
16-18	8531-8532	,	
16-19	8533-8539	stages	
16-20	8540-8543	and	
16-21	8544-8549	waits	
16-22	8549-8550	.	

#Text=For example, the number of tables in Performance_Schema that you can query for tuning information grew from 17 to 87 between versions 5.5 and 5.7.
17-1	8551-8554	For	
17-2	8555-8562	example	
17-3	8562-8563	,	
17-4	8564-8567	the	
17-5	8568-8574	number	
17-6	8575-8577	of	
17-7	8578-8584	tables	
17-8	8585-8587	in	
17-9	8588-8606	Performance_Schema	
17-10	8607-8611	that	
17-11	8612-8615	you	
17-12	8616-8619	can	
17-13	8620-8625	query	
17-14	8626-8629	for	
17-15	8630-8636	tuning	
17-16	8637-8648	information	
17-17	8649-8653	grew	
17-18	8654-8658	from	
17-19	8659-8661	17	
17-20	8662-8664	to	
17-21	8665-8667	87	
17-22	8668-8675	between	
17-23	8676-8684	versions	
17-24	8685-8688	5.5	
17-25	8689-8692	and	
17-26	8693-8696	5.7	
17-27	8696-8697	.	

#Text=Version 8 includes a transactional data dictionary for the database objects (you’ll query those in Tip 3) that used to be stored only in underlying files.
18-1	8698-8705	Version	
18-2	8706-8707	8	
18-3	8708-8716	includes	
18-4	8717-8718	a	
18-5	8719-8732	transactional	
18-6	8733-8737	data	
18-7	8738-8748	dictionary	
18-8	8749-8752	for	
18-9	8753-8756	the	
18-10	8757-8765	database	
18-11	8766-8773	objects	
18-12	8774-8775	(	
18-13	8775-8778	you	
18-14	8778-8779	’	
18-15	8779-8781	ll	
18-16	8782-8787	query	
18-17	8788-8793	those	
18-18	8794-8796	in	
18-19	8797-8800	Tip	
18-20	8801-8802	3	
18-21	8802-8803	)	
18-22	8804-8808	that	
18-23	8809-8813	used	
18-24	8814-8816	to	
18-25	8817-8819	be	
18-26	8820-8826	stored	
18-27	8827-8831	only	
18-28	8832-8834	in	
18-29	8835-8845	underlying	
18-30	8846-8851	files	
18-31	8851-8852	.	

#Text=Query for wait time data
#Text=Start your MySQL performance tuning with this query on the main tables associated with wait time:
#Text=INSERT INTO wta_data SELECTt.processlist_id AS conn_id, t.processlist_user AS user, t.processlist_host AS host, t.processlist_db AS db, LOWER(t.processlist_state) AS state, t.processlist_info AS current_sql, MD5(t.processlist_info) AS current_sql_md5, t.processlist_command AS command, w.event_id AS wait_event_id, w.end_event_id AS wait_event_end_id, w.event_name AS wait_event_name, w.operation AS wait_operation, w.object_schema AS wait_schema, w.object_name AS wait_object_name, w.object_type AS wait_type, w.index_name AS wait_index, s.sql_text AS statement_sql, MD5(s.sql_text) AS statement_sql_md5, CASE WHEN RIGHT(s.digest_text, 3)= '...'
19-1	8853-8858	Query	
19-2	8859-8862	for	
19-3	8863-8867	wait	
19-4	8868-8872	time	
19-5	8873-8877	data	
19-6	8878-8883	Start	
19-7	8884-8888	your	
19-8	8889-8894	MySQL	
19-9	8895-8906	performance	
19-10	8907-8913	tuning	
19-11	8914-8918	with	
19-12	8919-8923	this	
19-13	8924-8929	query	
19-14	8930-8932	on	
19-15	8933-8936	the	
19-16	8937-8941	main	
19-17	8942-8948	tables	
19-18	8949-8959	associated	
19-19	8960-8964	with	
19-20	8965-8969	wait	
19-21	8970-8974	time	
19-22	8974-8975	:	
19-23	8976-8982	INSERT	
19-24	8983-8987	INTO	
19-25	8988-8996	wta_data	
19-26	8997-9019	SELECTt.processlist_id	
19-27	9020-9022	AS	
19-28	9023-9030	conn_id	
19-29	9030-9031	,	
19-30	9032-9050	t.processlist_user	
19-31	9051-9053	AS	
19-32	9054-9058	user	
19-33	9058-9059	,	
19-34	9060-9078	t.processlist_host	
19-35	9079-9081	AS	
19-36	9082-9086	host	
19-37	9086-9087	,	
19-38	9088-9104	t.processlist_db	
19-39	9105-9107	AS	
19-40	9108-9110	db	
19-41	9110-9111	,	
19-42	9112-9117	LOWER	
19-43	9117-9118	(	
19-44	9118-9137	t.processlist_state	
19-45	9137-9138	)	
19-46	9139-9141	AS	
19-47	9142-9147	state	
19-48	9147-9148	,	
19-49	9149-9167	t.processlist_info	
19-50	9168-9170	AS	
19-51	9171-9182	current_sql	
19-52	9182-9183	,	
19-53	9184-9187	MD5	
19-54	9187-9188	(	
19-55	9188-9206	t.processlist_info	
19-56	9206-9207	)	
19-57	9208-9210	AS	
19-58	9211-9226	current_sql_md5	
19-59	9226-9227	,	
19-60	9228-9249	t.processlist_command	
19-61	9250-9252	AS	
19-62	9253-9260	command	
19-63	9260-9261	,	
19-64	9262-9272	w.event_id	
19-65	9273-9275	AS	
19-66	9276-9289	wait_event_id	
19-67	9289-9290	,	
19-68	9291-9305	w.end_event_id	
19-69	9306-9308	AS	
19-70	9309-9326	wait_event_end_id	
19-71	9326-9327	,	
19-72	9328-9340	w.event_name	
19-73	9341-9343	AS	
19-74	9344-9359	wait_event_name	
19-75	9359-9360	,	
19-76	9361-9372	w.operation	
19-77	9373-9375	AS	
19-78	9376-9390	wait_operation	
19-79	9390-9391	,	
19-80	9392-9407	w.object_schema	
19-81	9408-9410	AS	
19-82	9411-9422	wait_schema	
19-83	9422-9423	,	
19-84	9424-9437	w.object_name	
19-85	9438-9440	AS	
19-86	9441-9457	wait_object_name	
19-87	9457-9458	,	
19-88	9459-9472	w.object_type	
19-89	9473-9475	AS	
19-90	9476-9485	wait_type	
19-91	9485-9486	,	
19-92	9487-9499	w.index_name	
19-93	9500-9502	AS	
19-94	9503-9513	wait_index	
19-95	9513-9514	,	
19-96	9515-9525	s.sql_text	
19-97	9526-9528	AS	
19-98	9529-9542	statement_sql	
19-99	9542-9543	,	
19-100	9544-9547	MD5	
19-101	9547-9548	(	
19-102	9548-9558	s.sql_text	
19-103	9558-9559	)	
19-104	9560-9562	AS	
19-105	9563-9580	statement_sql_md5	
19-106	9580-9581	,	
19-107	9582-9586	CASE	
19-108	9587-9591	WHEN	
19-109	9592-9597	RIGHT	
19-110	9597-9598	(	
19-111	9598-9611	s.digest_text	
19-112	9611-9612	,	
19-113	9613-9614	3	
19-114	9614-9615	)	
19-115	9615-9616	=	
19-116	9617-9618	'	
19-117	9618-9619	.	
19-118	9619-9620	.	
19-119	9620-9621	.	
19-120	9621-9622	'	

#Text=THEN 1 ELSE 0 END AS statement_digest_truncated, s.digest AS statement_digest, s.event_id AS statement_event_id, s.end_event_id AS statement_event_end_id, conn.attr_value AS program_nameFROM performance_schema.threads AS t LEFT JOINperformance_schema.events_waits_current AS w ON w.thread_id = t.thread_idAND w.end_event_id IS NULL AND w.event_name <> 'idle'LEFT JOIN performance_schema.events_statements_current AS s ON s.thread_id= t.thread_id AND s.digest IS NOT NULLLEFT JOIN (SELECT processlist_id, GROUP_CONCAT(attr_value ORDER BYattr_name DESC SEPARATOR '~^~') attr_valueFROM performance_schema.session_connect_attrs WHERE attr_name IN('program_name','_client_name') GROUP BY processlist_id ) connON t.processlist_id = conn.processlist_idWHERE t.instrumented = 'YES' AND t.processlist_id <> connection_id()AND (t.PROCESSLIST_COMMAND <> 'Sleep');Notice that the query excludes threads containing a Sleep command and those with a wait event of idle.
20-1	9623-9627	THEN	
20-2	9628-9629	1	
20-3	9630-9634	ELSE	
20-4	9635-9636	0	
20-5	9637-9640	END	
20-6	9641-9643	AS	
20-7	9644-9670	statement_digest_truncated	
20-8	9670-9671	,	
20-9	9672-9680	s.digest	
20-10	9681-9683	AS	
20-11	9684-9700	statement_digest	
20-12	9700-9701	,	
20-13	9702-9712	s.event_id	
20-14	9713-9715	AS	
20-15	9716-9734	statement_event_id	
20-16	9734-9735	,	
20-17	9736-9750	s.end_event_id	
20-18	9751-9753	AS	
20-19	9754-9776	statement_event_end_id	
20-20	9776-9777	,	
20-21	9778-9793	conn.attr_value	
20-22	9794-9796	AS	
20-23	9797-9813	program_nameFROM	
20-24	9814-9840	performance_schema.threads	
20-25	9841-9843	AS	
20-26	9844-9845	t	
20-27	9846-9850	LEFT	
20-28	9851-9894	JOINperformance_schema.events_waits_current	
20-29	9895-9897	AS	
20-30	9898-9899	w	
20-31	9900-9902	ON	
20-32	9903-9914	w.thread_id	
20-33	9915-9916	=	
20-34	9917-9931	t.thread_idAND	
20-35	9932-9946	w.end_event_id	
20-36	9947-9949	IS	
20-37	9950-9954	NULL	
20-38	9955-9958	AND	
20-39	9959-9971	w.event_name	
20-40	9972-9973	<	
20-41	9973-9974	>	
20-42	9975-9976	'	
20-43	9976-9985	idle'LEFT	
20-44	9986-9990	JOIN	
20-45	9991-10035	performance_schema.events_statements_current	
20-46	10036-10038	AS	
20-47	10039-10040	s	
20-48	10041-10043	ON	
20-49	10044-10055	s.thread_id	
20-50	10055-10056	=	
20-51	10057-10068	t.thread_id	
20-52	10069-10072	AND	
20-53	10073-10081	s.digest	
20-54	10082-10084	IS	
20-55	10085-10088	NOT	
20-56	10089-10097	NULLLEFT	
20-57	10098-10102	JOIN	
20-58	10103-10104	(	
20-59	10104-10110	SELECT	
20-60	10111-10125	processlist_id	
20-61	10125-10126	,	
20-62	10127-10139	GROUP_CONCAT	
20-63	10139-10140	(	
20-64	10140-10150	attr_value	
20-65	10151-10156	ORDER	
20-66	10157-10168	BYattr_name	
20-67	10169-10173	DESC	
20-68	10174-10183	SEPARATOR	
20-69	10184-10185	'	
20-70	10185-10186	~	
20-71	10186-10187	^	
20-72	10187-10188	~	
20-73	10188-10189	'	
20-74	10189-10190	)	
20-75	10191-10205	attr_valueFROM	
20-76	10206-10246	performance_schema.session_connect_attrs	
20-77	10247-10252	WHERE	
20-78	10253-10262	attr_name	
20-79	10263-10265	IN	
20-80	10265-10266	(	
20-81	10266-10267	'	
20-82	10267-10279	program_name	
20-83	10279-10280	'	
20-84	10280-10281	,	
20-85	10281-10282	'	
20-86	10282-10283	_	
20-87	10283-10294	client_name	
20-88	10294-10295	'	
20-89	10295-10296	)	
20-90	10297-10302	GROUP	
20-91	10303-10305	BY	
20-92	10306-10320	processlist_id	
20-93	10321-10322	)	
20-94	10323-10329	connON	
20-95	10330-10346	t.processlist_id	
20-96	10347-10348	=	
20-97	10349-10373	conn.processlist_idWHERE	
20-98	10374-10388	t.instrumented	
20-99	10389-10390	=	
20-100	10391-10392	'	
20-101	10392-10395	YES	
20-102	10395-10396	'	
20-103	10397-10400	AND	
20-104	10401-10417	t.processlist_id	
20-105	10418-10419	<	
20-106	10419-10420	>	
20-107	10421-10434	connection_id	
20-108	10434-10435	(	
20-109	10435-10436	)	
20-110	10436-10439	AND	
20-111	10440-10441	(	
20-112	10441-10462	t.PROCESSLIST_COMMAND	
20-113	10463-10464	<	
20-114	10464-10465	>	
20-115	10466-10467	'	
20-116	10467-10472	Sleep	
20-117	10472-10473	'	
20-118	10473-10474	)	
20-119	10474-10475	;	
20-120	10475-10481	Notice	
20-121	10482-10486	that	
20-122	10487-10490	the	
20-123	10491-10496	query	
20-124	10497-10505	excludes	
20-125	10506-10513	threads	
20-126	10514-10524	containing	
20-127	10525-10526	a	
20-128	10527-10532	Sleep	
20-129	10533-10540	command	
20-130	10541-10544	and	
20-131	10545-10550	those	
20-132	10551-10555	with	
20-133	10556-10557	a	
20-134	10558-10562	wait	
20-135	10563-10568	event	
20-136	10569-10571	of	
20-137	10572-10576	idle	
20-138	10576-10577	.	

#Text=To study wait time, run that query repeatedly at some interval — say, one minute — and save the results to a table (here, wta_data).
21-1	10578-10580	To	
21-2	10581-10586	study	
21-3	10587-10591	wait	
21-4	10592-10596	time	
21-5	10596-10597	,	
21-6	10598-10601	run	
21-7	10602-10606	that	
21-8	10607-10612	query	
21-9	10613-10623	repeatedly	
21-10	10624-10626	at	
21-11	10627-10631	some	
21-12	10632-10640	interval	
21-13	10641-10642	—	
21-14	10643-10646	say	
21-15	10646-10647	,	
21-16	10648-10651	one	
21-17	10652-10658	minute	
21-18	10659-10660	—	
21-19	10661-10664	and	
21-20	10665-10669	save	
21-21	10670-10673	the	
21-22	10674-10681	results	
21-23	10682-10684	to	
21-24	10685-10686	a	
21-25	10687-10692	table	
21-26	10693-10694	(	
21-27	10694-10698	here	
21-28	10698-10699	,	
21-29	10700-10708	wta_data	
21-30	10708-10709	)	
21-31	10709-10710	.	

#Text=Find the queries that are spending the most time in the database
#Text=Now run a query that groups the data by sql_text, wait_operation and time_in_seconds for each wait event, then sums the total time the query spends.
#Text=select w.sql_text, w.wait_operation, w.time_in_seconds, tot.tot_time from(select substr(current_sql, 1, 60) sql_text,
#Text=wait_operation, count(*) time_in_seconds
#Text=from wta_data w group by substr(current_sql, 1, 60), wait_operation) w c(select substr(current_sql, 1,60) sql_text, count(*) tot_time
#Text=from wta_data
#Text=group by substr(current_sql, 1,60)) totwhere w.wait_operation is not nulland w.sql_text = tot.sql_textorder by tot.tot_time, time_in_seconds;
#Text=Then, examine the query output (this is from a sample database for a rental company):
#Text=The middle two rows reveal that one SQL statement spent 21 seconds on a read and 56 times that long (1183 seconds) on a fetch.
22-1	10711-10715	Find	
22-2	10716-10719	the	
22-3	10720-10727	queries	
22-4	10728-10732	that	
22-5	10733-10736	are	
22-6	10737-10745	spending	
22-7	10746-10749	the	
22-8	10750-10754	most	
22-9	10755-10759	time	
22-10	10760-10762	in	
22-11	10763-10766	the	
22-12	10767-10775	database	
22-13	10776-10779	Now	
22-14	10780-10783	run	
22-15	10784-10785	a	
22-16	10786-10791	query	
22-17	10792-10796	that	
22-18	10797-10803	groups	
22-19	10804-10807	the	
22-20	10808-10812	data	
22-21	10813-10815	by	
22-22	10816-10824	sql_text	
22-23	10824-10825	,	
22-24	10826-10840	wait_operation	
22-25	10841-10844	and	
22-26	10845-10860	time_in_seconds	
22-27	10861-10864	for	
22-28	10865-10869	each	
22-29	10870-10874	wait	
22-30	10875-10880	event	
22-31	10880-10881	,	
22-32	10882-10886	then	
22-33	10887-10891	sums	
22-34	10892-10895	the	
22-35	10896-10901	total	
22-36	10902-10906	time	
22-37	10907-10910	the	
22-38	10911-10916	query	
22-39	10917-10923	spends	
22-40	10923-10924	.	
22-41	10925-10931	select	
22-42	10932-10942	w.sql_text	
22-43	10942-10943	,	
22-44	10944-10960	w.wait_operation	
22-45	10960-10961	,	
22-46	10962-10979	w.time_in_seconds	
22-47	10979-10980	,	
22-48	10981-10993	tot.tot_time	
22-49	10994-10998	from	
22-50	10998-10999	(	
22-51	10999-11005	select	
22-52	11006-11012	substr	
22-53	11012-11013	(	
22-54	11013-11024	current_sql	
22-55	11024-11025	,	
22-56	11026-11027	1	
22-57	11027-11028	,	
22-58	11029-11031	60	
22-59	11031-11032	)	
22-60	11033-11041	sql_text	
22-61	11041-11042	,	
22-62	11043-11057	wait_operation	
22-63	11057-11058	,	
22-64	11059-11064	count	
22-65	11064-11065	(	
22-66	11065-11066	*	
22-67	11066-11067	)	
22-68	11068-11083	time_in_seconds	
22-69	11084-11088	from	
22-70	11089-11097	wta_data	
22-71	11098-11099	w	
22-72	11100-11105	group	
22-73	11106-11108	by	
22-74	11109-11115	substr	
22-75	11115-11116	(	
22-76	11116-11127	current_sql	
22-77	11127-11128	,	
22-78	11129-11130	1	
22-79	11130-11131	,	
22-80	11132-11134	60	
22-81	11134-11135	)	
22-82	11135-11136	,	
22-83	11137-11151	wait_operation	
22-84	11151-11152	)	
22-85	11153-11154	w	
22-86	11155-11156	c	
22-87	11156-11157	(	
22-88	11157-11163	select	
22-89	11164-11170	substr	
22-90	11170-11171	(	
22-91	11171-11182	current_sql	
22-92	11182-11183	,	
22-93	11184-11188	1,60	
22-94	11188-11189	)	
22-95	11190-11198	sql_text	
22-96	11198-11199	,	
22-97	11200-11205	count	
22-98	11205-11206	(	
22-99	11206-11207	*	
22-100	11207-11208	)	
22-101	11209-11217	tot_time	
22-102	11218-11222	from	
22-103	11223-11231	wta_data	
22-104	11232-11237	group	
22-105	11238-11240	by	
22-106	11241-11247	substr	
22-107	11247-11248	(	
22-108	11248-11259	current_sql	
22-109	11259-11260	,	
22-110	11261-11265	1,60	
22-111	11265-11266	)	
22-112	11266-11267	)	
22-113	11268-11276	totwhere	
22-114	11277-11293	w.wait_operation	
22-115	11294-11296	is	
22-116	11297-11300	not	
22-117	11301-11308	nulland	
22-118	11309-11319	w.sql_text	
22-119	11320-11321	=	
22-120	11322-11339	tot.sql_textorder	
22-121	11340-11342	by	
22-122	11343-11355	tot.tot_time	
22-123	11355-11356	,	
22-124	11357-11372	time_in_seconds	
22-125	11372-11373	;	
22-126	11374-11378	Then	
22-127	11378-11379	,	
22-128	11380-11387	examine	
22-129	11388-11391	the	
22-130	11392-11397	query	
22-131	11398-11404	output	
22-132	11405-11406	(	
22-133	11406-11410	this	
22-134	11411-11413	is	
22-135	11414-11418	from	
22-136	11419-11420	a	
22-137	11421-11427	sample	
22-138	11428-11436	database	
22-139	11437-11440	for	
22-140	11441-11442	a	
22-141	11443-11449	rental	
22-142	11450-11457	company	
22-143	11457-11458	)	
22-144	11458-11459	:	
22-145	11460-11463	The	
22-146	11464-11470	middle	
22-147	11471-11474	two	
22-148	11475-11479	rows	
22-149	11480-11486	reveal	
22-150	11487-11491	that	
22-151	11492-11495	one	
22-152	11496-11499	SQL	
22-153	11500-11509	statement	
22-154	11510-11515	spent	
22-155	11516-11518	21	
22-156	11519-11526	seconds	
22-157	11527-11529	on	
22-158	11530-11531	a	
22-159	11532-11536	read	
22-160	11537-11540	and	
22-161	11541-11543	56	
22-162	11544-11549	times	
22-163	11550-11554	that	
22-164	11555-11559	long	
22-165	11560-11561	(	
22-166	11561-11565	1183	
22-167	11566-11573	seconds	
22-168	11573-11574	)	
22-169	11575-11577	on	
22-170	11578-11579	a	
22-171	11580-11585	fetch	
22-172	11585-11586	.	

#Text=The bottom two rows show that another SQL statement spent 39 seconds on a read and 35 times that long (1370 seconds) on a fetch.
23-1	11587-11590	The	
23-2	11591-11597	bottom	
23-3	11598-11601	two	
23-4	11602-11606	rows	
23-5	11607-11611	show	
23-6	11612-11616	that	
23-7	11617-11624	another	
23-8	11625-11628	SQL	
23-9	11629-11638	statement	
23-10	11639-11644	spent	
23-11	11645-11647	39	
23-12	11648-11655	seconds	
23-13	11656-11658	on	
23-14	11659-11660	a	
23-15	11661-11665	read	
23-16	11666-11669	and	
23-17	11670-11672	35	
23-18	11673-11678	times	
23-19	11679-11683	that	
23-20	11684-11688	long	
23-21	11689-11690	(	
23-22	11690-11694	1370	
23-23	11695-11702	seconds	
23-24	11702-11703	)	
23-25	11704-11706	on	
23-26	11707-11708	a	
23-27	11709-11714	fetch	
23-28	11714-11715	.	

#Text=That’s an awful lot of fetching for not much reading.
24-1	11716-11720	That	
24-2	11720-11721	’	
24-3	11721-11722	s	
24-4	11723-11725	an	
24-5	11726-11731	awful	
24-6	11732-11735	lot	
24-7	11736-11738	of	
24-8	11739-11747	fetching	
24-9	11748-11751	for	
24-10	11752-11755	not	
24-11	11756-11760	much	
24-12	11761-11768	reading	
24-13	11768-11769	.	

#Text=Clearly, there’s room for improvement.
25-1	11770-11777	Clearly	
25-2	11777-11778	,	
25-3	11779-11784	there	
25-4	11784-11785	’	
25-5	11785-11786	s	
25-6	11787-11791	room	
25-7	11792-11795	for	
25-8	11796-11807	improvement	
25-9	11807-11808	.	

#Text=Analyzing wait time reveals important baseline metrics you’ll need in MySQL performance tuning.
26-1	11809-11818	Analyzing	
26-2	11819-11823	wait	
26-3	11824-11828	time	
26-4	11829-11836	reveals	
26-5	11837-11846	important	
26-6	11847-11855	baseline	
26-7	11856-11863	metrics	
26-8	11864-11867	you	
26-9	11867-11868	’	
26-10	11868-11870	ll	
26-11	11871-11875	need	
26-12	11876-11878	in	
26-13	11879-11884	MySQL	
26-14	11885-11896	performance	
26-15	11897-11903	tuning	
26-16	11903-11904	.	

#Text=In this case, the focus is on the big difference between rows examined and rows sent.
27-1	11905-11907	In	
27-2	11908-11912	this	
27-3	11913-11917	case	
27-4	11917-11918	,	
27-5	11919-11922	the	
27-6	11923-11928	focus	
27-7	11929-11931	is	
27-8	11932-11934	on	
27-9	11935-11938	the	
27-10	11939-11942	big	
27-11	11943-11953	difference	
27-12	11954-11961	between	
27-13	11962-11966	rows	
27-14	11967-11975	examined	
27-15	11976-11979	and	
27-16	11980-11984	rows	
27-17	11985-11989	sent	
27-18	11989-11990	.	

#Text=Average wait time itself is another useful metric.
28-1	11991-11998	Average	
28-2	11999-12003	wait	
28-3	12004-12008	time	
28-4	12009-12015	itself	
28-5	12016-12018	is	
28-6	12019-12026	another	
28-7	12027-12033	useful	
28-8	12034-12040	metric	
28-9	12040-12041	.	

#Text=Baseline metrics allow you to set a tuning target, when you can say, “That’s good enough.”
29-1	12042-12050	Baseline	
29-2	12051-12058	metrics	
29-3	12059-12064	allow	
29-4	12065-12068	you	
29-5	12069-12071	to	
29-6	12072-12075	set	
29-7	12076-12077	a	
29-8	12078-12084	tuning	
29-9	12085-12091	target	
29-10	12091-12092	,	
29-11	12093-12097	when	
29-12	12098-12101	you	
29-13	12102-12105	can	
29-14	12106-12109	say	
29-15	12109-12110	,	
29-16	12111-12112	“	
29-17	12112-12116	That	
29-18	12116-12117	’	
29-19	12117-12118	s	
29-20	12119-12123	good	
29-21	12124-12130	enough	
29-22	12130-12131	.	
29-23	12131-12132	”	

#Text=Then you move on to the next performance problem.
30-1	12133-12137	Then	
30-2	12138-12141	you	
30-3	12142-12146	move	
30-4	12147-12149	on	
30-5	12150-12152	to	
30-6	12153-12156	the	
30-7	12157-12161	next	
30-8	12162-12173	performance	
30-9	12174-12181	problem	
30-10	12181-12182	.	

#Text=Tip 2: Review the execution plan
#Text=The execution plan reveals the cost of each operation.
31-1	12183-12186	Tip	
31-2	12187-12188	2	
31-3	12188-12189	:	
31-4	12190-12196	Review	
31-5	12197-12200	the	
31-6	12201-12210	execution	
31-7	12211-12215	plan	
31-8	12216-12219	The	
31-9	12220-12229	execution	
31-10	12230-12234	plan	
31-11	12235-12242	reveals	
31-12	12243-12246	the	
31-13	12247-12251	cost	
31-14	12252-12254	of	
31-15	12255-12259	each	
31-16	12260-12269	operation	
31-17	12269-12270	.	

#Text=That helps you find the most expensive steps, such as I/O (rows examined, rows sent), full table scans, index scans, filtering predicates and column data types.
32-1	12271-12275	That	
32-2	12276-12281	helps	
32-3	12282-12285	you	
32-4	12286-12290	find	
32-5	12291-12294	the	
32-6	12295-12299	most	
32-7	12300-12309	expensive	
32-8	12310-12315	steps	
32-9	12315-12316	,	
32-10	12317-12321	such	
32-11	12322-12324	as	
32-12	12325-12326	I	
32-13	12326-12327	/	
32-14	12327-12328	O	
32-15	12329-12330	(	
32-16	12330-12334	rows	
32-17	12335-12343	examined	
32-18	12343-12344	,	
32-19	12345-12349	rows	
32-20	12350-12354	sent	
32-21	12354-12355	)	
32-22	12355-12356	,	
32-23	12357-12361	full	
32-24	12362-12367	table	
32-25	12368-12373	scans	
32-26	12373-12374	,	
32-27	12375-12380	index	
32-28	12381-12386	scans	
32-29	12386-12387	,	
32-30	12388-12397	filtering	
32-31	12398-12408	predicates	
32-32	12409-12412	and	
32-33	12413-12419	column	
32-34	12420-12424	data	
32-35	12425-12430	types	
32-36	12430-12431	.	

#Text=MySQL gives you several options for generating an execution plan:
#Text=Run explain from a command prompt.
33-1	12432-12437	MySQL	
33-2	12438-12443	gives	
33-3	12444-12447	you	
33-4	12448-12455	several	
33-5	12456-12463	options	
33-6	12464-12467	for	
33-7	12468-12478	generating	
33-8	12479-12481	an	
33-9	12482-12491	execution	
33-10	12492-12496	plan	
33-11	12496-12497	:	
33-12	12498-12501	Run	
33-13	12502-12509	explain	
33-14	12510-12514	from	
33-15	12515-12516	a	
33-16	12517-12524	command	
33-17	12525-12531	prompt	
33-18	12531-12532	.	

#Text=Running EXPLAIN FORMAT=JSON generates a JSON-formatted explain plan with extended and partition information, plus detail on the operations including which part of the key was used.
34-1	12533-12540	Running	
34-2	12541-12548	EXPLAIN	
34-3	12549-12555	FORMAT	
34-4	12555-12556	=	
34-5	12556-12560	JSON	
34-6	12561-12570	generates	
34-7	12571-12572	a	
34-8	12573-12587	JSON-formatted	
34-9	12588-12595	explain	
34-10	12596-12600	plan	
34-11	12601-12605	with	
34-12	12606-12614	extended	
34-13	12615-12618	and	
34-14	12619-12628	partition	
34-15	12629-12640	information	
34-16	12640-12641	,	
34-17	12642-12646	plus	
34-18	12647-12653	detail	
34-19	12654-12656	on	
34-20	12657-12660	the	
34-21	12661-12671	operations	
34-22	12672-12681	including	
34-23	12682-12687	which	
34-24	12688-12692	part	
34-25	12693-12695	of	
34-26	12696-12699	the	
34-27	12700-12703	key	
34-28	12704-12707	was	
34-29	12708-12712	used	
34-30	12712-12713	.	

#Text=SET OPTIMIZER_TRACE="ENABLED=ON"; puts the trace in memory to write information to the optimizer_trace table in information_schema.
35-1	12714-12717	SET	
35-2	12718-12733	OPTIMIZER_TRACE	
35-3	12733-12734	=	
35-4	12734-12735	"	
35-5	12735-12742	ENABLED	
35-6	12742-12743	=	
35-7	12743-12745	ON	
35-8	12745-12746	"	
35-9	12746-12747	;	
35-10	12748-12752	puts	
35-11	12753-12756	the	
35-12	12757-12762	trace	
35-13	12763-12765	in	
35-14	12766-12772	memory	
35-15	12773-12775	to	
35-16	12776-12781	write	
35-17	12782-12793	information	
35-18	12794-12796	to	
35-19	12797-12800	the	
35-20	12801-12816	optimizer_trace	
35-21	12817-12822	table	
35-22	12823-12825	in	
35-23	12826-12844	information_schema	
35-24	12844-12845	.	

#Text=It captures the costs of all the operations that the optimizer considered for the current plan (version 5.6.3 and above).
36-1	12846-12848	It	
36-2	12849-12857	captures	
36-3	12858-12861	the	
36-4	12862-12867	costs	
36-5	12868-12870	of	
36-6	12871-12874	all	
36-7	12875-12878	the	
36-8	12879-12889	operations	
36-9	12890-12894	that	
36-10	12895-12898	the	
36-11	12899-12908	optimizer	
36-12	12909-12919	considered	
36-13	12920-12923	for	
36-14	12924-12927	the	
36-15	12928-12935	current	
36-16	12936-12940	plan	
36-17	12941-12942	(	
36-18	12942-12949	version	
36-19	12950-12955	5.6.3	
36-20	12956-12959	and	
36-21	12960-12965	above	
36-22	12965-12966	)	
36-23	12966-12967	.	

#Text=MySQL Workbench offers a graphical view of the plan, shown below.
37-1	12968-12973	MySQL	
37-2	12974-12983	Workbench	
37-3	12984-12990	offers	
37-4	12991-12992	a	
37-5	12993-13002	graphical	
37-6	13003-13007	view	
37-7	13008-13010	of	
37-8	13011-13014	the	
37-9	13015-13019	plan	
37-10	13019-13020	,	
37-11	13021-13026	shown	
37-12	13027-13032	below	
37-13	13032-13033	.	

#Text=That execution plan shows table name, type of data access, references and the number of rows that the optimizer estimates it will examine when it runs — all useful in MySQL performance tuning.
38-1	13034-13038	That	
38-2	13039-13048	execution	
38-3	13049-13053	plan	
38-4	13054-13059	shows	
38-5	13060-13065	table	
38-6	13066-13070	name	
38-7	13070-13071	,	
38-8	13072-13076	type	
38-9	13077-13079	of	
38-10	13080-13084	data	
38-11	13085-13091	access	
38-12	13091-13092	,	
38-13	13093-13103	references	
38-14	13104-13107	and	
38-15	13108-13111	the	
38-16	13112-13118	number	
38-17	13119-13121	of	
38-18	13122-13126	rows	
38-19	13127-13131	that	
38-20	13132-13135	the	
38-21	13136-13145	optimizer	
38-22	13146-13155	estimates	
38-23	13156-13158	it	
38-24	13159-13163	will	
38-25	13164-13171	examine	
38-26	13172-13176	when	
38-27	13177-13179	it	
38-28	13180-13184	runs	
38-29	13185-13186	—	
38-30	13187-13190	all	
38-31	13191-13197	useful	
38-32	13198-13200	in	
38-33	13201-13206	MySQL	
38-34	13207-13218	performance	
38-35	13219-13225	tuning	
38-36	13225-13226	.	

#Text=In general, the earlier in your query that you apply filtering predicates, the less data you discard later.
39-1	13227-13229	In	
39-2	13230-13237	general	
39-3	13237-13238	,	
39-4	13239-13242	the	
39-5	13243-13250	earlier	
39-6	13251-13253	in	
39-7	13254-13258	your	
39-8	13259-13264	query	
39-9	13265-13269	that	
39-10	13270-13273	you	
39-11	13274-13279	apply	
39-12	13280-13289	filtering	
39-13	13290-13300	predicates	
39-14	13300-13301	,	
39-15	13302-13305	the	
39-16	13306-13310	less	
39-17	13311-13315	data	
39-18	13316-13319	you	
39-19	13320-13327	discard	
39-20	13328-13333	later	
39-21	13333-13334	.	

#Text=The execution plan makes it easy to see how early or late your query is applying filters.
40-1	13335-13338	The	
40-2	13339-13348	execution	
40-3	13349-13353	plan	
40-4	13354-13359	makes	
40-5	13360-13362	it	
40-6	13363-13367	easy	
40-7	13368-13370	to	
40-8	13371-13374	see	
40-9	13375-13378	how	
40-10	13379-13384	early	
40-11	13385-13387	or	
40-12	13388-13392	late	
40-13	13393-13397	your	
40-14	13398-13403	query	
40-15	13404-13406	is	
40-16	13407-13415	applying	
40-17	13416-13423	filters	
40-18	13423-13424	.	

#Text=Does your query launch any temporary or filesort activities?
41-1	13425-13429	Does	
41-2	13430-13434	your	
41-3	13435-13440	query	
41-4	13441-13447	launch	
41-5	13448-13451	any	
41-6	13452-13461	temporary	
41-7	13462-13464	or	
41-8	13465-13473	filesort	
41-9	13474-13484	activities	
41-10	13484-13485	?	

#Text=If so, the execution plan shows you where they occur so you can try to reduce the amount of data you’re sending to them.
42-1	13486-13488	If	
42-2	13489-13491	so	
42-3	13491-13492	,	
42-4	13493-13496	the	
42-5	13497-13506	execution	
42-6	13507-13511	plan	
42-7	13512-13517	shows	
42-8	13518-13521	you	
42-9	13522-13527	where	
42-10	13528-13532	they	
42-11	13533-13538	occur	
42-12	13539-13541	so	
42-13	13542-13545	you	
42-14	13546-13549	can	
42-15	13550-13553	try	
42-16	13554-13556	to	
42-17	13557-13563	reduce	
42-18	13564-13567	the	
42-19	13568-13574	amount	
42-20	13575-13577	of	
42-21	13578-13582	data	
42-22	13583-13586	you	
42-23	13586-13587	’	
42-24	13587-13589	re	
42-25	13590-13597	sending	
42-26	13598-13600	to	
42-27	13601-13605	them	
42-28	13605-13606	.	

#Text=Note the Cost Hint that MySQL Workbench displays (gray box above), advising you that the full table scan on student can be an expensive operation.
43-1	13607-13611	Note	
43-2	13612-13615	the	
43-3	13616-13620	Cost	
43-4	13621-13625	Hint	
43-5	13626-13630	that	
43-6	13631-13636	MySQL	
43-7	13637-13646	Workbench	
43-8	13647-13655	displays	
43-9	13656-13657	(	
43-10	13657-13661	gray	
43-11	13662-13665	box	
43-12	13666-13671	above	
43-13	13671-13672	)	
43-14	13672-13673	,	
43-15	13674-13682	advising	
43-16	13683-13686	you	
43-17	13687-13691	that	
43-18	13692-13695	the	
43-19	13696-13700	full	
43-20	13701-13706	table	
43-21	13707-13711	scan	
43-22	13712-13714	on	
43-23	13715-13722	student	
43-24	13723-13726	can	
43-25	13727-13729	be	
43-26	13730-13732	an	
43-27	13733-13742	expensive	
43-28	13743-13752	operation	
43-29	13752-13753	.	

#Text=Tip 3: Gather object information
#Text=Next, you’ll want to know as much as possible about the underlying tables in a query.
44-1	13754-13757	Tip	
44-2	13758-13759	3	
44-3	13759-13760	:	
44-4	13761-13767	Gather	
44-5	13768-13774	object	
44-6	13775-13786	information	
44-7	13787-13791	Next	
44-8	13791-13792	,	
44-9	13793-13796	you	
44-10	13796-13797	’	
44-11	13797-13799	ll	
44-12	13800-13804	want	
44-13	13805-13807	to	
44-14	13808-13812	know	
44-15	13813-13815	as	
44-16	13816-13820	much	
44-17	13821-13823	as	
44-18	13824-13832	possible	
44-19	13833-13838	about	
44-20	13839-13842	the	
44-21	13843-13853	underlying	
44-22	13854-13860	tables	
44-23	13861-13863	in	
44-24	13864-13865	a	
44-25	13866-13871	query	
44-26	13871-13872	.	

#Text=Useful information includes table size, whether it’s really a table or just a view, the cardinality of columns in where clauses, and the use of wildcards and scalar functions.
45-1	13873-13879	Useful	
45-2	13880-13891	information	
45-3	13892-13900	includes	
45-4	13901-13906	table	
45-5	13907-13911	size	
45-6	13911-13912	,	
45-7	13913-13920	whether	
45-8	13921-13923	it	
45-9	13923-13924	’	
45-10	13924-13925	s	
45-11	13926-13932	really	
45-12	13933-13934	a	
45-13	13935-13940	table	
45-14	13941-13943	or	
45-15	13944-13948	just	
45-16	13949-13950	a	
45-17	13951-13955	view	
45-18	13955-13956	,	
45-19	13957-13960	the	
45-20	13961-13972	cardinality	
45-21	13973-13975	of	
45-22	13976-13983	columns	
45-23	13984-13986	in	
45-24	13987-13992	where	
45-25	13993-14000	clauses	
45-26	14000-14001	,	
45-27	14002-14005	and	
45-28	14006-14009	the	
45-29	14010-14013	use	
45-30	14014-14016	of	
45-31	14017-14026	wildcards	
45-32	14027-14030	and	
45-33	14031-14037	scalar	
45-34	14038-14047	functions	
45-35	14047-14048	.	

#Text=A quick way to gather that information is the mysqlshow --status command.
46-1	14049-14050	A	
46-2	14051-14056	quick	
46-3	14057-14060	way	
46-4	14061-14063	to	
46-5	14064-14070	gather	
46-6	14071-14075	that	
46-7	14076-14087	information	
46-8	14088-14090	is	
46-9	14091-14094	the	
46-10	14095-14104	mysqlshow	
46-11	14105-14106	-	
46-12	14106-14107	-	
46-13	14107-14113	status	
46-14	14114-14121	command	
46-15	14121-14122	.	

#Text=To review indexes and constraints, run show indexes.
47-1	14123-14125	To	
47-2	14126-14132	review	
47-3	14133-14140	indexes	
47-4	14141-14144	and	
47-5	14145-14156	constraints	
47-6	14156-14157	,	
47-7	14158-14161	run	
47-8	14162-14166	show	
47-9	14167-14174	indexes	
47-10	14174-14175	.	

#Text=That shows you which columns are in the index, especially the left leading column in a multi-column index.
48-1	14176-14180	That	
48-2	14181-14186	shows	
48-3	14187-14190	you	
48-4	14191-14196	which	
48-5	14197-14204	columns	
48-6	14205-14208	are	
48-7	14209-14211	in	
48-8	14212-14215	the	
48-9	14216-14221	index	
48-10	14221-14222	,	
48-11	14223-14233	especially	
48-12	14234-14237	the	
48-13	14238-14242	left	
48-14	14243-14250	leading	
48-15	14251-14257	column	
48-16	14258-14260	in	
48-17	14261-14262	a	
48-18	14263-14275	multi-column	
48-19	14276-14281	index	
48-20	14281-14282	.	

#Text=Can the query even use the index?
49-1	14283-14286	Can	
49-2	14287-14290	the	
49-3	14291-14296	query	
49-4	14297-14301	even	
49-5	14302-14305	use	
49-6	14306-14309	the	
49-7	14310-14315	index	
49-8	14315-14316	?	

#Text=If your query applies functions on an indexed column, the optimizer won’t use the index at all, and you may need to rewrite the query.
50-1	14317-14319	If	
50-2	14320-14324	your	
50-3	14325-14330	query	
50-4	14331-14338	applies	
50-5	14339-14348	functions	
50-6	14349-14351	on	
50-7	14352-14354	an	
50-8	14355-14362	indexed	
50-9	14363-14369	column	
50-10	14369-14370	,	
50-11	14371-14374	the	
50-12	14375-14384	optimizer	
50-13	14385-14388	won	
50-14	14388-14389	’	
50-15	14389-14390	t	
50-16	14391-14394	use	
50-17	14395-14398	the	
50-18	14399-14404	index	
50-19	14405-14407	at	
50-20	14408-14411	all	
50-21	14411-14412	,	
50-22	14413-14416	and	
50-23	14417-14420	you	
50-24	14421-14424	may	
50-25	14425-14429	need	
50-26	14430-14432	to	
50-27	14433-14440	rewrite	
50-28	14441-14444	the	
50-29	14445-14450	query	
50-30	14450-14451	.	

#Text=Review the existing keys, constraints and relationships.
51-1	14452-14458	Review	
51-2	14459-14462	the	
51-3	14463-14471	existing	
51-4	14472-14476	keys	
51-5	14476-14477	,	
51-6	14478-14489	constraints	
51-7	14490-14493	and	
51-8	14494-14507	relationships	
51-9	14507-14508	.	

#Text=For queries that join many tables, create an Entity Relationship Diagram (ERD) that shows you how the tables are related to one another.
52-1	14509-14512	For	
52-2	14513-14520	queries	
52-3	14521-14525	that	
52-4	14526-14530	join	
52-5	14531-14535	many	
52-6	14536-14542	tables	
52-7	14542-14543	,	
52-8	14544-14550	create	
52-9	14551-14553	an	
52-10	14554-14560	Entity	
52-11	14561-14573	Relationship	
52-12	14574-14581	Diagram	
52-13	14582-14583	(	
52-14	14583-14586	ERD	
52-15	14586-14587	)	
52-16	14588-14592	that	
52-17	14593-14598	shows	
52-18	14599-14602	you	
52-19	14603-14606	how	
52-20	14607-14610	the	
52-21	14611-14617	tables	
52-22	14618-14621	are	
52-23	14622-14629	related	
52-24	14630-14632	to	
52-25	14633-14636	one	
52-26	14637-14644	another	
52-27	14644-14645	.	

#Text=Tip 4: Find the driving table
#Text=Your goal in MySQL performance tuning is to drive the query with the table that returns the least data.
53-1	14646-14649	Tip	
53-2	14650-14651	4	
53-3	14651-14652	:	
53-4	14653-14657	Find	
53-5	14658-14661	the	
53-6	14662-14669	driving	
53-7	14670-14675	table	
53-8	14676-14680	Your	
53-9	14681-14685	goal	
53-10	14686-14688	in	
53-11	14689-14694	MySQL	
53-12	14695-14706	performance	
53-13	14707-14713	tuning	
53-14	14714-14716	is	
53-15	14717-14719	to	
53-16	14720-14725	drive	
53-17	14726-14729	the	
53-18	14730-14735	query	
53-19	14736-14740	with	
53-20	14741-14744	the	
53-21	14745-14750	table	
53-22	14751-14755	that	
53-23	14756-14763	returns	
53-24	14764-14767	the	
53-25	14768-14773	least	
53-26	14774-14778	data	
53-27	14778-14779	.	

#Text=In other words, you compare the number of rows in the final result set to the number of rows the query examined.
54-1	14780-14782	In	
54-2	14783-14788	other	
54-3	14789-14794	words	
54-4	14794-14795	,	
54-5	14796-14799	you	
54-6	14800-14807	compare	
54-7	14808-14811	the	
54-8	14812-14818	number	
54-9	14819-14821	of	
54-10	14822-14826	rows	
54-11	14827-14829	in	
54-12	14830-14833	the	
54-13	14834-14839	final	
54-14	14840-14846	result	
54-15	14847-14850	set	
54-16	14851-14853	to	
54-17	14854-14857	the	
54-18	14858-14864	number	
54-19	14865-14867	of	
54-20	14868-14872	rows	
54-21	14873-14876	the	
54-22	14877-14882	query	
54-23	14883-14891	examined	
54-24	14891-14892	.	

#Text=Using the driving table reduces the number of logical reads.
55-1	14893-14898	Using	
55-2	14899-14902	the	
55-3	14903-14910	driving	
55-4	14911-14916	table	
55-5	14917-14924	reduces	
55-6	14925-14928	the	
55-7	14929-14935	number	
55-8	14936-14938	of	
55-9	14939-14946	logical	
55-10	14947-14952	reads	
55-11	14952-14953	.	

#Text=To find the driving table, you study Joins (Right, Left, Outer) and filtering predicates to figure out how to filter as early in the query as possible.
56-1	14954-14956	To	
56-2	14957-14961	find	
56-3	14962-14965	the	
56-4	14966-14973	driving	
56-5	14974-14979	table	
56-6	14979-14980	,	
56-7	14981-14984	you	
56-8	14985-14990	study	
56-9	14991-14996	Joins	
56-10	14997-14998	(	
56-11	14998-15003	Right	
56-12	15003-15004	,	
56-13	15005-15009	Left	
56-14	15009-15010	,	
56-15	15011-15016	Outer	
56-16	15016-15017	)	
56-17	15018-15021	and	
56-18	15022-15031	filtering	
56-19	15032-15042	predicates	
56-20	15043-15045	to	
56-21	15046-15052	figure	
56-22	15053-15056	out	
56-23	15057-15060	how	
56-24	15061-15063	to	
56-25	15064-15070	filter	
56-26	15071-15073	as	
56-27	15074-15079	early	
56-28	15080-15082	in	
56-29	15083-15086	the	
56-30	15087-15092	query	
56-31	15093-15095	as	
56-32	15096-15104	possible	
56-33	15104-15105	.	

#Text=Below is a partial execution plan for a query in a university billing application.
57-1	15106-15111	Below	
57-2	15112-15114	is	
57-3	15115-15116	a	
57-4	15117-15124	partial	
57-5	15125-15134	execution	
57-6	15135-15139	plan	
57-7	15140-15143	for	
57-8	15144-15145	a	
57-9	15146-15151	query	
57-10	15152-15154	in	
57-11	15155-15156	a	
57-12	15157-15167	university	
57-13	15168-15175	billing	
57-14	15176-15187	application	
57-15	15187-15188	.	

#Text=The red operation shows a high number of rows read (more than 8,700) from the student table.
58-1	15189-15192	The	
58-2	15193-15196	red	
58-3	15197-15206	operation	
58-4	15207-15212	shows	
58-5	15213-15214	a	
58-6	15215-15219	high	
58-7	15220-15226	number	
58-8	15227-15229	of	
58-9	15230-15234	rows	
58-10	15235-15239	read	
58-11	15240-15241	(	
58-12	15241-15245	more	
58-13	15246-15250	than	
58-14	15251-15256	8,700	
58-15	15256-15257	)	
58-16	15258-15262	from	
58-17	15263-15266	the	
58-18	15267-15274	student	
58-19	15275-15280	table	
58-20	15280-15281	.	

#Text=In fact, it’s every row in the table, which is inefficient.
59-1	15282-15284	In	
59-2	15285-15289	fact	
59-3	15289-15290	,	
59-4	15291-15293	it	
59-5	15293-15294	’	
59-6	15294-15295	s	
59-7	15296-15301	every	
59-8	15302-15305	row	
59-9	15306-15308	in	
59-10	15309-15312	the	
59-11	15313-15318	table	
59-12	15318-15319	,	
59-13	15320-15325	which	
59-14	15326-15328	is	
59-15	15329-15340	inefficient	
59-16	15340-15341	.	

#Text=Here is a sample query for all students taking a class called “MySQL Performance Tuning”:
#Text=SELECT s.fname, s.lname, r.signup_dateFROM student sINNER JOIN registration rON s.student_id = r.student_idINNER JOIN class cON r.class_id = c.class_idWHERE c.name
#Text== 'MYSQL PERFORMANCE TUNING'AND r.signup_date BETWEENDATE_SUB(@BillDate, INTERVAL 1 DAY) and @BillDateAND r.cancelled = 'N';
#Text=Using SQL diagramming, you determine that class is the driving table.
60-1	15342-15346	Here	
60-2	15347-15349	is	
60-3	15350-15351	a	
60-4	15352-15358	sample	
60-5	15359-15364	query	
60-6	15365-15368	for	
60-7	15369-15372	all	
60-8	15373-15381	students	
60-9	15382-15388	taking	
60-10	15389-15390	a	
60-11	15391-15396	class	
60-12	15397-15403	called	
60-13	15404-15405	“	
60-14	15405-15410	MySQL	
60-15	15411-15422	Performance	
60-16	15423-15429	Tuning	
60-17	15429-15430	”	
60-18	15430-15431	:	
60-19	15432-15438	SELECT	
60-20	15439-15446	s.fname	
60-21	15446-15447	,	
60-22	15448-15455	s.lname	
60-23	15455-15456	,	
60-24	15457-15474	r.signup_dateFROM	
60-25	15475-15482	student	
60-26	15483-15489	sINNER	
60-27	15490-15494	JOIN	
60-28	15495-15507	registration	
60-29	15508-15511	rON	
60-30	15512-15524	s.student_id	
60-31	15525-15526	=	
60-32	15527-15544	r.student_idINNER	
60-33	15545-15549	JOIN	
60-34	15550-15555	class	
60-35	15556-15559	cON	
60-36	15560-15570	r.class_id	
60-37	15571-15572	=	
60-38	15573-15588	c.class_idWHERE	
60-39	15589-15595	c.name	
60-40	15596-15597	=	
60-41	15598-15599	'	
60-42	15599-15604	MYSQL	
60-43	15605-15616	PERFORMANCE	
60-44	15617-15627	TUNING'AND	
60-45	15628-15641	r.signup_date	
60-46	15642-15657	BETWEENDATE_SUB	
60-47	15657-15658	(	
60-48	15658-15659	@	
60-49	15659-15667	BillDate	
60-50	15667-15668	,	
60-51	15669-15677	INTERVAL	
60-52	15678-15679	1	
60-53	15680-15683	DAY	
60-54	15683-15684	)	
60-55	15685-15688	and	
60-56	15689-15690	@	
60-57	15690-15701	BillDateAND	
60-58	15702-15713	r.cancelled	
60-59	15714-15715	=	
60-60	15716-15717	'	
60-61	15717-15718	N	
60-62	15718-15719	'	
60-63	15719-15720	;	
60-64	15721-15726	Using	
60-65	15727-15730	SQL	
60-66	15731-15742	diagramming	
60-67	15742-15743	,	
60-68	15744-15747	you	
60-69	15748-15757	determine	
60-70	15758-15762	that	
60-71	15763-15768	class	
60-72	15769-15771	is	
60-73	15772-15775	the	
60-74	15776-15783	driving	
60-75	15784-15789	table	
60-76	15789-15790	.	

#Text=You run the following SQL to add and view two foreign keys:
#Text=ALTER TABLE registration ADD FOREIGN KEY (student_id) REFERENCES student(student_id);ALTER TABLE registration ADD FOREIGN KEY (class_id) REFERENCES class(class_id);SELECT table_name,column_name,constraint_name,referenced_table_name,referenced_column_nameFROM
#Text=information_schema.key_column_usageWHERE
#Text=table_schema = 'csu' AND table_name = 'registration'AND referenced_column_name IS NOT NULL;
#Text=With the addition of those foreign key constraints, the optimizer chooses a better execution plan using class as the driving table.
61-1	15791-15794	You	
61-2	15795-15798	run	
61-3	15799-15802	the	
61-4	15803-15812	following	
61-5	15813-15816	SQL	
61-6	15817-15819	to	
61-7	15820-15823	add	
61-8	15824-15827	and	
61-9	15828-15832	view	
61-10	15833-15836	two	
61-11	15837-15844	foreign	
61-12	15845-15849	keys	
61-13	15849-15850	:	
61-14	15851-15856	ALTER	
61-15	15857-15862	TABLE	
61-16	15863-15875	registration	
61-17	15876-15879	ADD	
61-18	15880-15887	FOREIGN	
61-19	15888-15891	KEY	
61-20	15892-15893	(	
61-21	15893-15903	student_id	
61-22	15903-15904	)	
61-23	15905-15915	REFERENCES	
61-24	15916-15923	student	
61-25	15923-15924	(	
61-26	15924-15934	student_id	
61-27	15934-15935	)	
61-28	15935-15936	;	
61-29	15936-15941	ALTER	
61-30	15942-15947	TABLE	
61-31	15948-15960	registration	
61-32	15961-15964	ADD	
61-33	15965-15972	FOREIGN	
61-34	15973-15976	KEY	
61-35	15977-15978	(	
61-36	15978-15986	class_id	
61-37	15986-15987	)	
61-38	15988-15998	REFERENCES	
61-39	15999-16004	class	
61-40	16004-16005	(	
61-41	16005-16013	class_id	
61-42	16013-16014	)	
61-43	16014-16015	;	
61-44	16015-16021	SELECT	
61-45	16022-16032	table_name	
61-46	16032-16033	,	
61-47	16033-16044	column_name	
61-48	16044-16045	,	
61-49	16045-16060	constraint_name	
61-50	16060-16061	,	
61-51	16061-16082	referenced_table_name	
61-52	16082-16083	,	
61-53	16083-16109	referenced_column_nameFROM	
61-54	16110-16150	information_schema.key_column_usageWHERE	
61-55	16151-16163	table_schema	
61-56	16164-16165	=	
61-57	16166-16167	'	
61-58	16167-16170	csu	
61-59	16170-16171	'	
61-60	16172-16175	AND	
61-61	16176-16186	table_name	
61-62	16187-16188	=	
61-63	16189-16190	'	
61-64	16190-16206	registration'AND	
61-65	16207-16229	referenced_column_name	
61-66	16230-16232	IS	
61-67	16233-16236	NOT	
61-68	16237-16241	NULL	
61-69	16241-16242	;	
61-70	16243-16247	With	
61-71	16248-16251	the	
61-72	16252-16260	addition	
61-73	16261-16263	of	
61-74	16264-16269	those	
61-75	16270-16277	foreign	
61-76	16278-16281	key	
61-77	16282-16293	constraints	
61-78	16293-16294	,	
61-79	16295-16298	the	
61-80	16299-16308	optimizer	
61-81	16309-16316	chooses	
61-82	16317-16318	a	
61-83	16319-16325	better	
61-84	16326-16335	execution	
61-85	16336-16340	plan	
61-86	16341-16346	using	
61-87	16347-16352	class	
61-88	16353-16355	as	
61-89	16356-16359	the	
61-90	16360-16367	driving	
61-91	16368-16373	table	
61-92	16373-16374	.	

#Text=Although it’s still running that full table scan, several important numbers are improved:
#Text=Before foreign keys
#Text=After foreign keys
#Text=Executions
#Text=28K
#Text=348K
#Text=Average Wait Time
#Text=114 ms
#Text=4 ms
#Text=Rows Examined/Sent
#Text=84K/2
#Text=1.4K/2
#Text=To send the same number of rows, just 1/60th of the rows (1.4/84) now need to be examined.
62-1	16375-16383	Although	
62-2	16384-16386	it	
62-3	16386-16387	’	
62-4	16387-16388	s	
62-5	16389-16394	still	
62-6	16395-16402	running	
62-7	16403-16407	that	
62-8	16408-16412	full	
62-9	16413-16418	table	
62-10	16419-16423	scan	
62-11	16423-16424	,	
62-12	16425-16432	several	
62-13	16433-16442	important	
62-14	16443-16450	numbers	
62-15	16451-16454	are	
62-16	16455-16463	improved	
62-17	16463-16464	:	
62-18	16465-16471	Before	
62-19	16472-16479	foreign	
62-20	16480-16484	keys	
62-21	16485-16490	After	
62-22	16491-16498	foreign	
62-23	16499-16503	keys	
62-24	16504-16514	Executions	
62-25	16515-16518	28K	
62-26	16519-16523	348K	
62-27	16524-16531	Average	
62-28	16532-16536	Wait	
62-29	16537-16541	Time	
62-30	16542-16545	114	
62-31	16546-16548	ms	
62-32	16549-16550	4	
62-33	16551-16553	ms	
62-34	16554-16558	Rows	
62-35	16559-16567	Examined	
62-36	16567-16568	/	
62-37	16568-16572	Sent	
62-38	16573-16576	84K	
62-39	16576-16577	/	
62-40	16577-16578	2	
62-41	16579-16583	1.4K	
62-42	16583-16584	/	
62-43	16584-16585	2	
62-44	16586-16588	To	
62-45	16589-16593	send	
62-46	16594-16597	the	
62-47	16598-16602	same	
62-48	16603-16609	number	
62-49	16610-16612	of	
62-50	16613-16617	rows	
62-51	16617-16618	,	
62-52	16619-16623	just	
62-53	16624-16625	1	
62-54	16625-16626	/	
62-55	16626-16630	60th	
62-56	16631-16633	of	
62-57	16634-16637	the	
62-58	16638-16642	rows	
62-59	16643-16644	(	
62-60	16644-16647	1.4	
62-61	16647-16648	/	
62-62	16648-16650	84	
62-63	16650-16651	)	
62-64	16652-16655	now	
62-65	16656-16660	need	
62-66	16661-16663	to	
62-67	16664-16666	be	
62-68	16667-16675	examined	
62-69	16675-16676	.	

#Text=Plus, the ratio of executions to average wait time is vastly improved.
63-1	16677-16681	Plus	
63-2	16681-16682	,	
63-3	16683-16686	the	
63-4	16687-16692	ratio	
63-5	16693-16695	of	
63-6	16696-16706	executions	
63-7	16707-16709	to	
63-8	16710-16717	average	
63-9	16718-16722	wait	
63-10	16723-16727	time	
63-11	16728-16730	is	
63-12	16731-16737	vastly	
63-13	16738-16746	improved	
63-14	16746-16747	.	

#Text=You may find room for even more improvement, for example, by reviewing your choice of indexes to reduce the number of rows examined.
64-1	16748-16751	You	
64-2	16752-16755	may	
64-3	16756-16760	find	
64-4	16761-16765	room	
64-5	16766-16769	for	
64-6	16770-16774	even	
64-7	16775-16779	more	
64-8	16780-16791	improvement	
64-9	16791-16792	,	
64-10	16793-16796	for	
64-11	16797-16804	example	
64-12	16804-16805	,	
64-13	16806-16808	by	
64-14	16809-16818	reviewing	
64-15	16819-16823	your	
64-16	16824-16830	choice	
64-17	16831-16833	of	
64-18	16834-16841	indexes	
64-19	16842-16844	to	
64-20	16845-16851	reduce	
64-21	16852-16855	the	
64-22	16856-16862	number	
64-23	16863-16865	of	
64-24	16866-16870	rows	
64-25	16871-16879	examined	
64-26	16879-16880	.	

#Text=In MySQL you can create a covering index, which includes all the columns in the query.
65-1	16881-16883	In	
65-2	16884-16889	MySQL	
65-3	16890-16893	you	
65-4	16894-16897	can	
65-5	16898-16904	create	
65-6	16905-16906	a	
65-7	16907-16915	covering	
65-8	16916-16921	index	
65-9	16921-16922	,	
65-10	16923-16928	which	
65-11	16929-16937	includes	
65-12	16938-16941	all	
65-13	16942-16945	the	
65-14	16946-16953	columns	
65-15	16954-16956	in	
65-16	16957-16960	the	
65-17	16961-16966	query	
65-18	16966-16967	.	

#Text=That prevents extra I/O because the index can satisfy the query.
66-1	16968-16972	That	
66-2	16973-16981	prevents	
66-3	16982-16987	extra	
66-4	16988-16989	I	
66-5	16989-16990	/	
66-6	16990-16991	O	
66-7	16992-16999	because	
66-8	17000-17003	the	
66-9	17004-17009	index	
66-10	17010-17013	can	
66-11	17014-17021	satisfy	
66-12	17022-17025	the	
66-13	17026-17031	query	
66-14	17031-17032	.	

#Text=Or you can create a partial index, say, on a table containing a large varchar column, where the index would be too large to traverse.
67-1	17033-17035	Or	
67-2	17036-17039	you	
67-3	17040-17043	can	
67-4	17044-17050	create	
67-5	17051-17052	a	
67-6	17053-17060	partial	
67-7	17061-17066	index	
67-8	17066-17067	,	
67-9	17068-17071	say	
67-10	17071-17072	,	
67-11	17073-17075	on	
67-12	17076-17077	a	
67-13	17078-17083	table	
67-14	17084-17094	containing	
67-15	17095-17096	a	
67-16	17097-17102	large	
67-17	17103-17110	varchar	
67-18	17111-17117	column	
67-19	17117-17118	,	
67-20	17119-17124	where	
67-21	17125-17128	the	
67-22	17129-17134	index	
67-23	17135-17140	would	
67-24	17141-17143	be	
67-25	17144-17147	too	
67-26	17148-17153	large	
67-27	17154-17156	to	
67-28	17157-17165	traverse	
67-29	17165-17166	.	

#Text=MySQL supports indexes on a virtual column, which works similarly to a function index in Oracle, except that the data is stored only in the index.
68-1	17167-17172	MySQL	
68-2	17173-17181	supports	
68-3	17182-17189	indexes	
68-4	17190-17192	on	
68-5	17193-17194	a	
68-6	17195-17202	virtual	
68-7	17203-17209	column	
68-8	17209-17210	,	
68-9	17211-17216	which	
68-10	17217-17222	works	
68-11	17223-17232	similarly	
68-12	17233-17235	to	
68-13	17236-17237	a	
68-14	17238-17246	function	
68-15	17247-17252	index	
68-16	17253-17255	in	
68-17	17256-17262	Oracle	
68-18	17262-17263	,	
68-19	17264-17270	except	
68-20	17271-17275	that	
68-21	17276-17279	the	
68-22	17280-17284	data	
68-23	17285-17287	is	
68-24	17288-17294	stored	
68-25	17295-17299	only	
68-26	17300-17302	in	
68-27	17303-17306	the	
68-28	17307-17312	index	
68-29	17312-17313	.	

#Text=Note, though, that adding indexes doesn’t always improve performance.
69-1	17314-17318	Note	
69-2	17318-17319	,	
69-3	17320-17326	though	
69-4	17326-17327	,	
69-5	17328-17332	that	
69-6	17333-17339	adding	
69-7	17340-17347	indexes	
69-8	17348-17353	doesn	
69-9	17353-17354	’	
69-10	17354-17355	t	
69-11	17356-17362	always	
69-12	17363-17370	improve	
69-13	17371-17382	performance	
69-14	17382-17383	.	

#Text=Fortunately, MySQL Workbench makes it easy to capture metrics before and after you experiment so you can see whether and how you’ve improved things.
70-1	17384-17395	Fortunately	
70-2	17395-17396	,	
70-3	17397-17402	MySQL	
70-4	17403-17412	Workbench	
70-5	17413-17418	makes	
70-6	17419-17421	it	
70-7	17422-17426	easy	
70-8	17427-17429	to	
70-9	17430-17437	capture	
70-10	17438-17445	metrics	
70-11	17446-17452	before	
70-12	17453-17456	and	
70-13	17457-17462	after	
70-14	17463-17466	you	
70-15	17467-17477	experiment	
70-16	17478-17480	so	
70-17	17481-17484	you	
70-18	17485-17488	can	
70-19	17489-17492	see	
70-20	17493-17500	whether	
70-21	17501-17504	and	
70-22	17505-17508	how	
70-23	17509-17512	you	
70-24	17512-17513	’	
70-25	17513-17515	ve	
70-26	17516-17524	improved	
70-27	17525-17531	things	
70-28	17531-17532	.	

#Text=Tip 5: Identify performance inhibitors
#Text=Finally, most of the low-hanging fruit of MySQL performance tuning lies in small programming mistakes that have a big impact:
#Text=Cursor or row-by-row processing
#Text=Parallel query processing — Sometimes it’s better to split a complex report into multiple queries and run them in parallel.
71-1	17533-17536	Tip	
71-2	17537-17538	5	
71-3	17538-17539	:	
71-4	17540-17548	Identify	
71-5	17549-17560	performance	
71-6	17561-17571	inhibitors	
71-7	17572-17579	Finally	
71-8	17579-17580	,	
71-9	17581-17585	most	
71-10	17586-17588	of	
71-11	17589-17592	the	
71-12	17593-17604	low-hanging	
71-13	17605-17610	fruit	
71-14	17611-17613	of	
71-15	17614-17619	MySQL	
71-16	17620-17631	performance	
71-17	17632-17638	tuning	
71-18	17639-17643	lies	
71-19	17644-17646	in	
71-20	17647-17652	small	
71-21	17653-17664	programming	
71-22	17665-17673	mistakes	
71-23	17674-17678	that	
71-24	17679-17683	have	
71-25	17684-17685	a	
71-26	17686-17689	big	
71-27	17690-17696	impact	
71-28	17696-17697	:	
71-29	17698-17704	Cursor	
71-30	17705-17707	or	
71-31	17708-17718	row-by-row	
71-32	17719-17729	processing	
71-33	17730-17738	Parallel	
71-34	17739-17744	query	
71-35	17745-17755	processing	
71-36	17756-17757	—	
71-37	17758-17767	Sometimes	
71-38	17768-17770	it	
71-39	17770-17771	’	
71-40	17771-17772	s	
71-41	17773-17779	better	
71-42	17780-17782	to	
71-43	17783-17788	split	
71-44	17789-17790	a	
71-45	17791-17798	complex	
71-46	17799-17805	report	
71-47	17806-17810	into	
71-48	17811-17819	multiple	
71-49	17820-17827	queries	
71-50	17828-17831	and	
71-51	17832-17835	run	
71-52	17836-17840	them	
71-53	17841-17843	in	
71-54	17844-17852	parallel	
71-55	17852-17853	.	

#Text=Hard-coded hints allow you to execute the query with the plan that you want to test.
72-1	17854-17864	Hard-coded	
72-2	17865-17870	hints	
72-3	17871-17876	allow	
72-4	17877-17880	you	
72-5	17881-17883	to	
72-6	17884-17891	execute	
72-7	17892-17895	the	
72-8	17896-17901	query	
72-9	17902-17906	with	
72-10	17907-17910	the	
72-11	17911-17915	plan	
72-12	17916-17920	that	
72-13	17921-17924	you	
72-14	17925-17929	want	
72-15	17930-17932	to	
72-16	17933-17937	test	
72-17	17937-17938	.	

#Text=But hints can become stale or forgotten over time.
73-1	17939-17942	But	
73-2	17943-17948	hints	
73-3	17949-17952	can	
73-4	17953-17959	become	
73-5	17960-17965	stale	
73-6	17966-17968	or	
73-7	17969-17978	forgotten	
73-8	17979-17983	over	
73-9	17984-17988	time	
73-10	17988-17989	.	

#Text=Wild cards like * may seem handy, but they just generate I/O, add to CPU workload and thrash memory.
74-1	17990-17994	Wild	
74-2	17995-18000	cards	
74-3	18001-18005	like	
74-4	18006-18007	*	
74-5	18008-18011	may	
74-6	18012-18016	seem	
74-7	18017-18022	handy	
74-8	18022-18023	,	
74-9	18024-18027	but	
74-10	18028-18032	they	
74-11	18033-18037	just	
74-12	18038-18046	generate	
74-13	18047-18048	I	
74-14	18048-18049	/	
74-15	18049-18050	O	
74-16	18050-18051	,	
74-17	18052-18055	add	
74-18	18056-18058	to	
74-19	18059-18062	CPU	
74-20	18063-18071	workload	
74-21	18072-18075	and	
74-22	18076-18082	thrash	
74-23	18083-18089	memory	
74-24	18089-18090	.	

#Text=Beware of SELECT * (often used by SQL generators such as EMF, LINQ and NHibernate) and the missing where clause.
75-1	18091-18097	Beware	
75-2	18098-18100	of	
75-3	18101-18107	SELECT	
75-4	18108-18109	*	
75-5	18110-18111	(	
75-6	18111-18116	often	
75-7	18117-18121	used	
75-8	18122-18124	by	
75-9	18125-18128	SQL	
75-10	18129-18139	generators	
75-11	18140-18144	such	
75-12	18145-18147	as	
75-13	18148-18151	EMF	
75-14	18151-18152	,	
75-15	18153-18157	LINQ	
75-16	18158-18161	and	
75-17	18162-18172	NHibernate	
75-18	18172-18173	)	
75-19	18174-18177	and	
75-20	18178-18181	the	
75-21	18182-18189	missing	
75-22	18190-18195	where	
75-23	18196-18202	clause	
75-24	18202-18203	.	

#Text=Implicit data conversions are a mismatch of datatypes between the column and a parameter.
76-1	18204-18212	Implicit	
76-2	18213-18217	data	
76-3	18218-18229	conversions	
76-4	18230-18233	are	
76-5	18234-18235	a	
76-6	18236-18244	mismatch	
76-7	18245-18247	of	
76-8	18248-18257	datatypes	
76-9	18258-18265	between	
76-10	18266-18269	the	
76-11	18270-18276	column	
76-12	18277-18280	and	
76-13	18281-18282	a	
76-14	18283-18292	parameter	
76-15	18292-18293	.	

#Text=They impact CPU consumption and can turn off index usage.
77-1	18294-18298	They	
77-2	18299-18305	impact	
77-3	18306-18309	CPU	
77-4	18310-18321	consumption	
77-5	18322-18325	and	
77-6	18326-18329	can	
77-7	18330-18334	turn	
77-8	18335-18338	off	
77-9	18339-18344	index	
77-10	18345-18350	usage	
77-11	18350-18351	.	

#Text=Performance is often hampered by mistakes that database developers introduce when they’re rushing to beat a release deadline and feeling pressure to get new features working.
78-1	18352-18363	Performance	
78-2	18364-18366	is	
78-3	18367-18372	often	
78-4	18373-18381	hampered	
78-5	18382-18384	by	
78-6	18385-18393	mistakes	
78-7	18394-18398	that	
78-8	18399-18407	database	
78-9	18408-18418	developers	
78-10	18419-18428	introduce	
78-11	18429-18433	when	
78-12	18434-18438	they	
78-13	18438-18439	’	
78-14	18439-18441	re	
78-15	18442-18449	rushing	
78-16	18450-18452	to	
78-17	18453-18457	beat	
78-18	18458-18459	a	
78-19	18460-18467	release	
78-20	18468-18476	deadline	
78-21	18477-18480	and	
78-22	18481-18488	feeling	
78-23	18489-18497	pressure	
78-24	18498-18500	to	
78-25	18501-18504	get	
78-26	18505-18508	new	
78-27	18509-18517	features	
78-28	18518-18525	working	
78-29	18525-18526	.	

#Text=Usually, the mistakes are easy to fix, but it does take time and effort to find them.
79-1	18527-18534	Usually	
79-2	18534-18535	,	
79-3	18536-18539	the	
79-4	18540-18548	mistakes	
79-5	18549-18552	are	
79-6	18553-18557	easy	
79-7	18558-18560	to	
79-8	18561-18564	fix	
79-9	18564-18565	,	
79-10	18566-18569	but	
79-11	18570-18572	it	
79-12	18573-18577	does	
79-13	18578-18582	take	
79-14	18583-18587	time	
79-15	18588-18591	and	
79-16	18592-18598	effort	
79-17	18599-18601	to	
79-18	18602-18606	find	
79-19	18607-18611	them	
79-20	18611-18612	.	

#Text=Start tuning the performance of your MySQL databases
#Text=While the details vary from one database vendor to another, the five main steps of MySQL performance tuning apply:
#Text=Monitor wait time
#Text=Review the execution plan
#Text=Gather object information
#Text=Find the driving table
#Text=Identify performance inhibitors
#Text=As a MySQL database professional or developer, you’ll find that the methodical approach described here will help you get the most out of this open source database.
80-1	18613-18618	Start	
80-2	18619-18625	tuning	
80-3	18626-18629	the	
80-4	18630-18641	performance	
80-5	18642-18644	of	
80-6	18645-18649	your	
80-7	18650-18655	MySQL	
80-8	18656-18665	databases	
80-9	18666-18671	While	
80-10	18672-18675	the	
80-11	18676-18683	details	
80-12	18684-18688	vary	
80-13	18689-18693	from	
80-14	18694-18697	one	
80-15	18698-18706	database	
80-16	18707-18713	vendor	
80-17	18714-18716	to	
80-18	18717-18724	another	
80-19	18724-18725	,	
80-20	18726-18729	the	
80-21	18730-18734	five	
80-22	18735-18739	main	
80-23	18740-18745	steps	
80-24	18746-18748	of	
80-25	18749-18754	MySQL	
80-26	18755-18766	performance	
80-27	18767-18773	tuning	
80-28	18774-18779	apply	
80-29	18779-18780	:	
80-30	18781-18788	Monitor	
80-31	18789-18793	wait	
80-32	18794-18798	time	
80-33	18799-18805	Review	
80-34	18806-18809	the	
80-35	18810-18819	execution	
80-36	18820-18824	plan	
80-37	18825-18831	Gather	
80-38	18832-18838	object	
80-39	18839-18850	information	
80-40	18851-18855	Find	
80-41	18856-18859	the	
80-42	18860-18867	driving	
80-43	18868-18873	table	
80-44	18874-18882	Identify	
80-45	18883-18894	performance	
80-46	18895-18905	inhibitors	
80-47	18906-18908	As	
80-48	18909-18910	a	
80-49	18911-18916	MySQL	
80-50	18917-18925	database	
80-51	18926-18938	professional	
80-52	18939-18941	or	
80-53	18942-18951	developer	
80-54	18951-18952	,	
80-55	18953-18956	you	
80-56	18956-18957	’	
80-57	18957-18959	ll	
80-58	18960-18964	find	
80-59	18965-18969	that	
80-60	18970-18973	the	
80-61	18974-18984	methodical	
80-62	18985-18993	approach	
80-63	18994-19003	described	
80-64	19004-19008	here	
80-65	19009-19013	will	
80-66	19014-19018	help	
80-67	19019-19022	you	
80-68	19023-19026	get	
80-69	19027-19030	the	
80-70	19031-19035	most	
80-71	19036-19039	out	
80-72	19040-19042	of	
80-73	19043-19047	this	
80-74	19048-19052	open	
80-75	19053-19059	source	
80-76	19060-19068	database	
80-77	19068-19069	.	

#Text=The Fundamental Guide to SQL Server Query OptimizationWant more background on wait times, execution plans, object information, driving tables and performance inhibitors?
81-1	19070-19073	The	
81-2	19074-19085	Fundamental	
81-3	19086-19091	Guide	
81-4	19092-19094	to	
81-5	19095-19098	SQL	
81-6	19099-19105	Server	
81-7	19106-19111	Query	
81-8	19112-19128	OptimizationWant	
81-9	19129-19133	more	
81-10	19134-19144	background	
81-11	19145-19147	on	
81-12	19148-19152	wait	
81-13	19153-19158	times	
81-14	19158-19159	,	
81-15	19160-19169	execution	
81-16	19170-19175	plans	
81-17	19175-19176	,	
81-18	19177-19183	object	
81-19	19184-19195	information	
81-20	19195-19196	,	
81-21	19197-19204	driving	
81-22	19205-19211	tables	
81-23	19212-19215	and	
81-24	19216-19227	performance	
81-25	19228-19238	inhibitors	
81-26	19238-19239	?	

#Text=Now that you’ve seen how to apply MySQL performance tuning, take a deeper dive into SQL query optimization in general.
82-1	19240-19243	Now	
82-2	19244-19248	that	
82-3	19249-19252	you	
82-4	19252-19253	’	
82-5	19253-19255	ve	
82-6	19256-19260	seen	
82-7	19261-19264	how	
82-8	19265-19267	to	
82-9	19268-19273	apply	
82-10	19274-19279	MySQL	
82-11	19280-19291	performance	
82-12	19292-19298	tuning	
82-13	19298-19299	,	
82-14	19300-19304	take	
82-15	19305-19306	a	
82-16	19307-19313	deeper	
82-17	19314-19318	dive	
82-18	19319-19323	into	
82-19	19324-19327	SQL	
82-20	19328-19333	query	
82-21	19334-19346	optimization	
82-22	19347-19349	in	
82-23	19350-19357	general	
82-24	19357-19358	.	

#Text=Learn more about how optimizers use the execution plan.
83-1	19359-19364	Learn	
83-2	19365-19369	more	
83-3	19370-19375	about	
83-4	19376-19379	how	
83-5	19380-19390	optimizers	
83-6	19391-19394	use	
83-7	19395-19398	the	
83-8	19399-19408	execution	
83-9	19409-19413	plan	
83-10	19413-19414	.	

#Text=Walk through SQL diagramming.
84-1	19415-19419	Walk	
84-2	19420-19427	through	
84-3	19428-19431	SQL	
84-4	19432-19443	diagramming	
84-5	19443-19444	.	

#Text=See how a covering index can affect I/O.
85-1	19445-19448	See	
85-2	19449-19452	how	
85-3	19453-19454	a	
85-4	19455-19463	covering	
85-5	19464-19469	index	
85-6	19470-19473	can	
85-7	19474-19480	affect	
85-8	19481-19482	I	
85-9	19482-19483	/	
85-10	19483-19484	O	
85-11	19484-19485	.	

#Text=Follow all 5 tips through a couple of real-world case studies.
86-1	19486-19492	Follow	
86-2	19493-19496	all	
86-3	19497-19498	5	
86-4	19499-19503	tips	
86-5	19504-19511	through	
86-6	19512-19513	a	
86-7	19514-19520	couple	
86-8	19521-19523	of	
86-9	19524-19534	real-world	
86-10	19535-19539	case	
86-11	19540-19547	studies	
86-12	19547-19548	.	

#Text=Download the e-Book
#Text=sales2
#Text=7 months ago
#Text=Above Information is good.
87-1	19549-19557	Download	
87-2	19558-19561	the	
87-3	19562-19568	e-Book	
87-4	19569-19575	sales2	
87-5	19576-19577	7	
87-6	19578-19584	months	
87-7	19585-19588	ago	
87-8	19589-19594	Above	
87-9	19595-19606	Information	
87-10	19607-19609	is	
87-11	19610-19614	good	
87-12	19614-19615	.	

#Text=Interested one can also visit INDIA Access web for relevant services.
88-1	19616-19626	Interested	
88-2	19627-19630	one	
88-3	19631-19634	can	
88-4	19635-19639	also	
88-5	19640-19645	visit	
88-6	19646-19651	INDIA	
88-7	19652-19658	Access	
88-8	19659-19662	web	
88-9	19663-19666	for	
88-10	19667-19675	relevant	
88-11	19676-19684	services	
88-12	19684-19685	.	

#Text=Cancel
#Text=Down
#Text=Reply
#Text=More
#Text=Cancel
#Text=Mark.Kurtz
#Text=8 months ago
#Text=very nice. 
89-1	19686-19692	Cancel	
89-2	19693-19697	Down	
89-3	19698-19703	Reply	
89-4	19704-19708	More	
89-5	19709-19715	Cancel	
89-6	19716-19726	Mark.Kurtz	
89-7	19727-19728	8	
89-8	19729-19735	months	
89-9	19736-19739	ago	
89-10	19740-19744	very	
89-11	19745-19749	nice	
89-12	19749-19750	.	
89-13	19750-19751	 	

#Text=Thanks for writing this.
90-1	19752-19758	Thanks	
90-2	19759-19762	for	
90-3	19763-19770	writing	
90-4	19771-19775	this	
90-5	19775-19776	.	

#Text=Cancel
#Text=Down
#Text=Reply
#Text=More
#Text=Cancel
#Text=Phil.Rodas
#Text=8 months ago
#Text=As always.
91-1	19777-19783	Cancel	
91-2	19784-19788	Down	
91-3	19789-19794	Reply	
91-4	19795-19799	More	
91-5	19800-19806	Cancel	
91-6	19807-19817	Phil.Rodas	
91-7	19818-19819	8	
91-8	19820-19826	months	
91-9	19827-19830	ago	
91-10	19831-19833	As	
91-11	19834-19840	always	
91-12	19840-19841	.	

#Text=Great job Janice!
92-1	19842-19847	Great	
92-2	19848-19851	job	
92-3	19852-19858	Janice	
92-4	19858-19859	!	

#Text=Cancel
#Text=Down
#Text=Reply
#Text=More
#Text=Cancel
#Text=Related Content
#Text=Company
#Text=About Us
#Text=Buy
#Text=Contact Us
#Text=Careers
#Text=News
#Text=Resources
#Text=Blogs
#Text=Customer Stories
#Text=Documents
#Text=Events
#Text=Videos
#Text=Support
#Text=Professional Services
#Text=Renew Support
#Text=Technical Support
#Text=Training & Certification
#Text=Support Services
#Text=Social Networks
#Text=Facebook
#Text=Instagram
#Text=LinkedIn
#Text=Twitter
#Text=YouTube
#Text=© 2021 Quest Software Inc.
93-1	19860-19866	Cancel	
93-2	19867-19871	Down	
93-3	19872-19877	Reply	
93-4	19878-19882	More	
93-5	19883-19889	Cancel	
93-6	19890-19897	Related	
93-7	19898-19905	Content	
93-8	19906-19913	Company	
93-9	19914-19919	About	
93-10	19920-19922	Us	
93-11	19923-19926	Buy	
93-12	19927-19934	Contact	
93-13	19935-19937	Us	
93-14	19938-19945	Careers	
93-15	19946-19950	News	
93-16	19951-19960	Resources	
93-17	19961-19966	Blogs	
93-18	19967-19975	Customer	
93-19	19976-19983	Stories	
93-20	19984-19993	Documents	
93-21	19994-20000	Events	
93-22	20001-20007	Videos	
93-23	20008-20015	Support	
93-24	20016-20028	Professional	
93-25	20029-20037	Services	
93-26	20038-20043	Renew	
93-27	20044-20051	Support	
93-28	20052-20061	Technical	
93-29	20062-20069	Support	
93-30	20070-20078	Training	
93-31	20079-20080	&	
93-32	20081-20094	Certification	
93-33	20095-20102	Support	
93-34	20103-20111	Services	
93-35	20112-20118	Social	
93-36	20119-20127	Networks	
93-37	20128-20136	Facebook	
93-38	20137-20146	Instagram	
93-39	20147-20155	LinkedIn	
93-40	20156-20163	Twitter	
93-41	20164-20171	YouTube	
93-42	20172-20173	©	
93-43	20174-20178	2021	
93-44	20178-20179	 	
93-45	20179-20184	Quest	
93-46	20185-20193	Software	
93-47	20194-20197	Inc	
93-48	20197-20198	.	

#Text=ALL RIGHTS RESERVED.
94-1	20199-20202	ALL	
94-2	20203-20209	RIGHTS	
94-3	20210-20218	RESERVED	
94-4	20218-20219	.	

#Text=Legal
#Text=Terms of Use
#Text=Privacy
#Text=Community Feedback & Support
#Text=会社名
#Text=会社情報
#Text=お問い合わせ
#Text=採用情報
#Text=ニュース
#Text=リソース
#Text=ブログ
#Text=お客様の事例
#Text=ドキュメント
#Text=イベント
#Text=ビデオ
#Text=サポート
#Text=プロフェッショナルサービス
#Text=サポートの更新
#Text=テクニカルサポート
#Text=トレーニングと認定資格
#Text=サポートサービス
#Text=ソーシャルネットワーク
#Text=Facebook
#Text=Instagram
#Text=LinkedIn
#Text=Twitter
#Text=YouTube
#Text=© 2021 Quest Software Inc.
95-1	20220-20225	Legal	
95-2	20226-20231	Terms	
95-3	20232-20234	of	
95-4	20235-20238	Use	
95-5	20239-20246	Privacy	
95-6	20247-20256	Community	
95-7	20257-20265	Feedback	
95-8	20266-20267	&	
95-9	20268-20275	Support	
95-10	20276-20279	会社名	
95-11	20280-20284	会社情報	
95-12	20285-20286	お	
95-13	20286-20287	問	
95-14	20287-20288	い	
95-15	20288-20289	合	
95-16	20289-20291	わせ	
95-17	20292-20296	採用情報	
95-18	20297-20301	ニュース	
95-19	20302-20306	リソース	
95-20	20307-20310	ブログ	
95-21	20311-20312	お	
95-22	20312-20314	客様	
95-23	20314-20315	の	
95-24	20315-20317	事例	
95-25	20318-20324	ドキュメント	
95-26	20325-20329	イベント	
95-27	20330-20333	ビデオ	
95-28	20334-20338	サポート	
95-29	20339-20352	プロフェッショナルサービス	
95-30	20353-20357	サポート	
95-31	20357-20358	の	
95-32	20358-20360	更新	
95-33	20361-20370	テクニカルサポート	
95-34	20371-20377	トレーニング	
95-35	20377-20378	と	
95-36	20378-20382	認定資格	
95-37	20383-20391	サポートサービス	
95-38	20392-20403	ソーシャルネットワーク	
95-39	20404-20412	Facebook	
95-40	20413-20422	Instagram	
95-41	20423-20431	LinkedIn	
95-42	20432-20439	Twitter	
95-43	20440-20447	YouTube	
95-44	20448-20449	©	
95-45	20450-20454	2021	
95-46	20454-20455	 	
95-47	20455-20460	Quest	
95-48	20461-20469	Software	
95-49	20470-20473	Inc	
95-50	20473-20474	.	

#Text=ALL RIGHTS RESERVED.
96-1	20475-20478	ALL	
96-2	20479-20485	RIGHTS	
96-3	20486-20494	RESERVED	
96-4	20494-20495	.	

#Text=「法務」
#Text=ご利用規約
#Text=個人情報保護方針
#Text=コミュニティのフィードバックとサポート
97-1	20496-20497	「	
97-2	20497-20499	法務	
97-3	20499-20500	」	
97-4	20501-20502	ご	
97-5	20502-20506	利用規約	
97-6	20507-20515	個人情報保護方針	
97-7	20516-20522	コミュニティ	
97-8	20522-20523	の	
97-9	20523-20530	フィードバック	
97-10	20530-20531	と	
97-11	20531-20535	サポート	
