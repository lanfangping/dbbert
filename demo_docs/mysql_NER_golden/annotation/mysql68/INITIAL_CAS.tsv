#FORMAT=WebAnno TSV 3.3


#Text=FreeBSD Network Performance Tuning @ Calomel.org
#Text=home
#Text=rss
#Text=search
#Text=April 05, 2021
#Text=FreeBSD Tuning and Optimization
#Text=performance modifications for 1gig and 10gig networks
#Text=The default install of FreeBSD and TrueOS is quite fast and will work well
#Text=the majority of the time.
1-1	0-7	FreeBSD	
1-2	8-15	Network	
1-3	16-27	Performance	
1-4	28-34	Tuning	
1-5	35-36	@	
1-6	37-48	Calomel.org	
1-7	49-53	home	
1-8	54-57	rss	
1-9	58-64	search	
1-10	65-70	April	
1-11	71-73	05	
1-12	73-74	,	
1-13	75-79	2021	
1-14	80-87	FreeBSD	
1-15	88-94	Tuning	
1-16	95-98	and	
1-17	99-111	Optimization	
1-18	112-123	performance	
1-19	124-137	modifications	
1-20	138-141	for	
1-21	142-146	1gig	
1-22	147-150	and	
1-23	151-156	10gig	
1-24	157-165	networks	
1-25	166-169	The	
1-26	170-177	default	
1-27	178-185	install	
1-28	186-188	of	
1-29	189-196	FreeBSD	
1-30	197-200	and	
1-31	201-207	TrueOS	
1-32	208-210	is	
1-33	211-216	quite	
1-34	217-221	fast	
1-35	222-225	and	
1-36	226-230	will	
1-37	231-235	work	
1-38	236-240	well	
1-39	241-244	the	
1-40	245-253	majority	
1-41	254-256	of	
1-42	257-260	the	
1-43	261-265	time	
1-44	265-266	.	

#Text=If you installed either FreeBSD without any
#Text=modifications you will not be disappointed.
2-1	267-269	If	
2-2	270-273	you	
2-3	274-283	installed	
2-4	284-290	either	
2-5	291-298	FreeBSD	
2-6	299-306	without	
2-7	307-310	any	
2-8	311-324	modifications	
2-9	325-328	you	
2-10	329-333	will	
2-11	334-337	not	
2-12	338-340	be	
2-13	341-353	disappointed	
2-14	353-354	.	

#Text=But, what if you wanted to get the
#Text=most out of your install or you simply want to understand more about the OS ?
3-1	355-358	But	
3-2	358-359	,	
3-3	360-364	what	
3-4	365-367	if	
3-5	368-371	you	
3-6	372-378	wanted	
3-7	379-381	to	
3-8	382-385	get	
3-9	386-389	the	
3-10	390-394	most	
3-11	395-398	out	
3-12	399-401	of	
3-13	402-406	your	
3-14	407-414	install	
3-15	415-417	or	
3-16	418-421	you	
3-17	422-428	simply	
3-18	429-433	want	
3-19	434-436	to	
3-20	437-447	understand	
3-21	448-452	more	
3-22	453-458	about	
3-23	459-462	the	
3-24	463-465	OS	
3-25	466-467	?	

#Text=In this post we offer some ideas to tune, tweak and optimize FreeBSD's network
#Text=stack to get the most out of the operating system.
4-1	468-470	In	
4-2	471-475	this	
4-3	476-480	post	
4-4	481-483	we	
4-5	484-489	offer	
4-6	490-494	some	
4-7	495-500	ideas	
4-8	501-503	to	
4-9	504-508	tune	
4-10	508-509	,	
4-11	510-515	tweak	
4-12	516-519	and	
4-13	520-528	optimize	
4-14	529-538	FreeBSD's	
4-15	539-546	network	
4-16	547-552	stack	
4-17	553-555	to	
4-18	556-559	get	
4-19	560-563	the	
4-20	564-568	most	
4-21	569-572	out	
4-22	573-575	of	
4-23	576-579	the	
4-24	580-589	operating	
4-25	590-596	system	
4-26	596-597	.	

#Text=Further down on the page we
#Text=offer proofs to show gained performance and lower latency as well as links to
#Text=the graphing tools we used so you can do the same.
5-1	598-605	Further	
5-2	606-610	down	
5-3	611-613	on	
5-4	614-617	the	
5-5	618-622	page	
5-6	623-625	we	
5-7	626-631	offer	
5-8	632-638	proofs	
5-9	639-641	to	
5-10	642-646	show	
5-11	647-653	gained	
5-12	654-665	performance	
5-13	666-669	and	
5-14	670-675	lower	
5-15	676-683	latency	
5-16	684-686	as	
5-17	687-691	well	
5-18	692-694	as	
5-19	695-700	links	
5-20	701-703	to	
5-21	704-707	the	
5-22	708-716	graphing	
5-23	717-722	tools	
5-24	723-725	we	
5-25	726-730	used	
5-26	731-733	so	
5-27	734-737	you	
5-28	738-741	can	
5-29	742-744	do	
5-30	745-748	the	
5-31	749-753	same	
5-32	753-754	.	

#Text=FreeBSD is fast, but hardware is important
#Text=If you want to achieve optimized network throughput you need to use good
#Text=hardware.
6-1	755-762	FreeBSD	
6-2	763-765	is	
6-3	766-770	fast	
6-4	770-771	,	
6-5	772-775	but	
6-6	776-784	hardware	
6-7	785-787	is	
6-8	788-797	important	
6-9	798-800	If	
6-10	801-804	you	
6-11	805-809	want	
6-12	810-812	to	
6-13	813-820	achieve	
6-14	821-830	optimized	
6-15	831-838	network	
6-16	839-849	throughput	
6-17	850-853	you	
6-18	854-858	need	
6-19	859-861	to	
6-20	862-865	use	
6-21	866-870	good	
6-22	871-879	hardware	
6-23	879-880	.	

#Text=As Monty Python taught us, it is daft to build a castle in a
#Text=swamp.
7-1	881-883	As	
7-2	884-889	Monty	
7-3	890-896	Python	
7-4	897-903	taught	
7-5	904-906	us	
7-6	906-907	,	
7-7	908-910	it	
7-8	911-913	is	
7-9	914-918	daft	
7-10	919-921	to	
7-11	922-927	build	
7-12	928-929	a	
7-13	930-936	castle	
7-14	937-939	in	
7-15	940-941	a	
7-16	942-947	swamp	
7-17	947-948	.	

#Text=Cheap hardware will cause nothing but misery.
8-1	949-954	Cheap	
8-2	955-963	hardware	
8-3	964-968	will	
8-4	969-974	cause	
8-5	975-982	nothing	
8-6	983-986	but	
8-7	987-993	misery	
8-8	993-994	.	

#Text=High latency, low
#Text=throughput and poor driver support not to mention inconsistent performance
#Text=under load.
9-1	995-999	High	
9-2	1000-1007	latency	
9-3	1007-1008	,	
9-4	1009-1012	low	
9-5	1013-1023	throughput	
9-6	1024-1027	and	
9-7	1028-1032	poor	
9-8	1033-1039	driver	
9-9	1040-1047	support	
9-10	1048-1051	not	
9-11	1052-1054	to	
9-12	1055-1062	mention	
9-13	1063-1075	inconsistent	
9-14	1076-1087	performance	
9-15	1088-1093	under	
9-16	1094-1098	load	
9-17	1098-1099	.	

#Text=A case in point is the built in network port on motherboards.
10-1	1100-1101	A	
10-2	1102-1106	case	
10-3	1107-1109	in	
10-4	1110-1115	point	
10-5	1116-1118	is	
10-6	1119-1122	the	
10-7	1123-1128	built	
10-8	1129-1131	in	
10-9	1132-1139	network	
10-10	1140-1144	port	
10-11	1145-1147	on	
10-12	1148-1160	motherboards	
10-13	1160-1161	.	

#Text=The
#Text=chipset may negotiate at one(1) gigabit, but it will not perform well under
#Text=stress.
11-1	1162-1165	The	
11-2	1166-1173	chipset	
11-3	1174-1177	may	
11-4	1178-1187	negotiate	
11-5	1188-1190	at	
11-6	1191-1194	one	
11-7	1194-1195	(	
11-8	1195-1196	1	
11-9	1196-1197	)	
11-10	1198-1205	gigabit	
11-11	1205-1206	,	
11-12	1207-1210	but	
11-13	1211-1213	it	
11-14	1214-1218	will	
11-15	1219-1222	not	
11-16	1223-1230	perform	
11-17	1231-1235	well	
11-18	1236-1241	under	
11-19	1242-1248	stress	
11-20	1248-1249	.	

#Text=The Network Tuning and Performance
#Text=Guide uses both hardware setups and similar network modifications.
12-1	1250-1253	The	
12-2	1254-1261	Network	
12-3	1262-1268	Tuning	
12-4	1269-1272	and	
12-5	1273-1284	Performance	
12-6	1285-1290	Guide	
12-7	1291-1295	uses	
12-8	1296-1300	both	
12-9	1301-1309	hardware	
12-10	1310-1316	setups	
12-11	1317-1320	and	
12-12	1321-1328	similar	
12-13	1329-1336	network	
12-14	1337-1350	modifications	
12-15	1350-1351	.	

#Text=The
#Text=first is an example of a one(1) gigabit machine for home or office use.
13-1	1352-1355	The	
13-2	1356-1361	first	
13-3	1362-1364	is	
13-4	1365-1367	an	
13-5	1368-1375	example	
13-6	1376-1378	of	
13-7	1379-1380	a	
13-8	1381-1384	one	
13-9	1384-1385	(	
13-10	1385-1386	1	
13-11	1386-1387	)	
13-12	1388-1395	gigabit	
13-13	1396-1403	machine	
13-14	1404-1407	for	
13-15	1408-1412	home	
13-16	1413-1415	or	
13-17	1416-1422	office	
13-18	1423-1426	use	
13-19	1426-1427	.	

#Text=The
#Text=second is a rack mounted server for trunked ten(10) gigabit and forty(40)
#Text=gigabit high speed networks.
14-1	1428-1431	The	
14-2	1432-1438	second	
14-3	1439-1441	is	
14-4	1442-1443	a	
14-5	1444-1448	rack	
14-6	1449-1456	mounted	
14-7	1457-1463	server	
14-8	1464-1467	for	
14-9	1468-1475	trunked	
14-10	1476-1479	ten	
14-11	1479-1480	(	
14-12	1480-1482	10	
14-13	1482-1483	)	
14-14	1484-1491	gigabit	
14-15	1492-1495	and	
14-16	1496-1501	forty	
14-17	1501-1502	(	
14-18	1502-1504	40	
14-19	1504-1505	)	
14-20	1506-1513	gigabit	
14-21	1514-1518	high	
14-22	1519-1524	speed	
14-23	1525-1533	networks	
14-24	1533-1534	.	

#Text=Both hardware configurations are actively
#Text=supported in production in the storage and https web server locations.
15-1	1535-1539	Both	
15-2	1540-1548	hardware	
15-3	1549-1563	configurations	
15-4	1564-1567	are	
15-5	1568-1576	actively	
15-6	1577-1586	supported	
15-7	1587-1589	in	
15-8	1590-1600	production	
15-9	1601-1603	in	
15-10	1604-1607	the	
15-11	1608-1615	storage	
15-12	1616-1619	and	
15-13	1620-1625	https	
15-14	1626-1629	web	
15-15	1630-1636	server	
15-16	1637-1646	locations	
15-17	1646-1647	.	

#Text=For more
#Text=information on SSL speeds, please take a look at the AES-NI SSL Performance benchmarks and our Chelsio Unified Wire Adapter on
#Text=FreeBSD notes.
#Text=## Home or Office server (close to silent)
#Text=Processor
#Text=: Intel Core i7-6700 Skylake @ 3.40GHz , 65 watt
#Text=CPU Cooler
#Text=: Noctua NH-D9L Dual Tower CPU Cooler
#Text=Motherboard
#Text=: Asus Z270-A LGA 1151
#Text=Memory
#Text=: Kingston HyperX FURY DDR4 32GB 2133MHz (HX421C14FBK4/32)
#Text=Video
#Text=: Intel HD Graphics 530 integrated graphics on CPU
#Text=Hard Drive
#Text=: Samsung 960 EVO Series, 1TB PCIe NVMe, M.2 Internal SSD (MZ-V6E1T0BW)
#Text=HGST Ultrastar He10 HUH721010ALE604 10TB, two(2) drives, ZFS RAID1 mirror
#Text=Power Supply : EVGA SuperNOVA 650 P2, 80+ PLATINUM 650W
#Text=Case
#Text=: Corsair Carbide Series Air 540 with Arctic F12 PWM PST Fans
#Text=Network Card : Chelsio T520-BT, Dual port RJ-45 / 10GBase-T, 20 watts (PCIe 3 x8)
#Text=-OR-
#Text=Intel I350-T2 Server Adapter, 4.4 watts (PCIe v2.1 x4)
#Text=NOTE: Though we prefer Chelsio on FreeBSD, the Intel I350-T2 is an affordable,
#Text=fast and stable line rate NIC which uses the FreeBSD igb(4) driver.
#Text=## Rack mounted server
#Text=Processor
#Text=: Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz 95 Watt, 12 Core
#Text=Motherboard
#Text=: SMC, Intel C612 chipset
#Text=Memory
#Text=: 128 GB, DDR4-2400MHz, registered ECC memory w/ Thermal Sensor
#Text=Chassis
#Text=: SMC, 2U, 24 bay (2.5") with SAS3 expander backplane
#Text=Controller
#Text=: LSI MegaRAID SAS3 9300-4i4e, 12 Gigabit/sec HBA
#Text=Hard Drive
#Text=: 24x Mushkin MKNSSDRE1TB Reactor 1TB SSDs, mirrored ZFS root, LZ4 compression
#Text=Network Card : Chelsio T520-CR, 10GBASE-SR, LC Duplex (PCI Express x8)
#Text=Transceiver
#Text=: Chelsio SFP+ 10Gbit, SM10G-SR (850nm wavelength)
#Text=-OR-
#Text=Network Card : Myricom Myri-10G 10G-PCIE2-8B2-2S (PCI Express x8)
#Text=Transceiver
#Text=: Myricom Myri-10G SFP+ 10GBase-SR optical fiber (850nm wavelength)
#Text=Switches
#Text=: Arista 7150S-52
#Text=Both switches were able to saturate
#Text=: Force10 S4810
#Text=a bidirectional 10gig interface
#Text=The /boot/loader.conf
#Text=The /boot/loader.conf is where we setup the specifics for our network cards
#Text=and some hashes.
16-1	1648-1651	For	
16-2	1652-1656	more	
16-3	1657-1668	information	
16-4	1669-1671	on	
16-5	1672-1675	SSL	
16-6	1676-1682	speeds	
16-7	1682-1683	,	
16-8	1684-1690	please	
16-9	1691-1695	take	
16-10	1696-1697	a	
16-11	1698-1702	look	
16-12	1703-1705	at	
16-13	1706-1709	the	
16-14	1710-1716	AES-NI	
16-15	1717-1720	SSL	
16-16	1721-1732	Performance	
16-17	1733-1743	benchmarks	
16-18	1744-1747	and	
16-19	1748-1751	our	
16-20	1752-1759	Chelsio	
16-21	1760-1767	Unified	
16-22	1768-1772	Wire	
16-23	1773-1780	Adapter	
16-24	1781-1783	on	
16-25	1784-1791	FreeBSD	
16-26	1792-1797	notes	
16-27	1797-1798	.	
16-28	1799-1800	#	
16-29	1800-1801	#	
16-30	1802-1806	Home	
16-31	1807-1809	or	
16-32	1810-1816	Office	
16-33	1817-1823	server	
16-34	1824-1825	(	
16-35	1825-1830	close	
16-36	1831-1833	to	
16-37	1834-1840	silent	
16-38	1840-1841	)	
16-39	1842-1851	Processor	
16-40	1852-1853	:	
16-41	1854-1859	Intel	
16-42	1860-1864	Core	
16-43	1865-1867	i7	
16-44	1867-1868	-	
16-45	1868-1872	6700	
16-46	1873-1880	Skylake	
16-47	1881-1882	@	
16-48	1883-1890	3.40GHz	
16-49	1891-1892	,	
16-50	1893-1895	65	
16-51	1896-1900	watt	
16-52	1901-1904	CPU	
16-53	1905-1911	Cooler	
16-54	1912-1913	:	
16-55	1914-1920	Noctua	
16-56	1921-1927	NH-D9L	
16-57	1928-1932	Dual	
16-58	1933-1938	Tower	
16-59	1939-1942	CPU	
16-60	1943-1949	Cooler	
16-61	1950-1961	Motherboard	
16-62	1962-1963	:	
16-63	1964-1968	Asus	
16-64	1969-1973	Z270	
16-65	1973-1974	-	
16-66	1974-1975	A	
16-67	1976-1979	LGA	
16-68	1980-1984	1151	
16-69	1985-1991	Memory	
16-70	1992-1993	:	
16-71	1994-2002	Kingston	
16-72	2003-2009	HyperX	
16-73	2010-2014	FURY	
16-74	2015-2019	DDR4	
16-75	2020-2024	32GB	
16-76	2025-2032	2133MHz	
16-77	2033-2034	(	
16-78	2034-2046	HX421C14FBK4	
16-79	2046-2047	/	
16-80	2047-2049	32	
16-81	2049-2050	)	
16-82	2051-2056	Video	
16-83	2057-2058	:	
16-84	2059-2064	Intel	
16-85	2065-2067	HD	
16-86	2068-2076	Graphics	
16-87	2077-2080	530	
16-88	2081-2091	integrated	
16-89	2092-2100	graphics	
16-90	2101-2103	on	
16-91	2104-2107	CPU	
16-92	2108-2112	Hard	
16-93	2113-2118	Drive	
16-94	2119-2120	:	
16-95	2121-2128	Samsung	
16-96	2129-2132	960	
16-97	2133-2136	EVO	
16-98	2137-2143	Series	
16-99	2143-2144	,	
16-100	2145-2148	1TB	
16-101	2149-2153	PCIe	
16-102	2154-2158	NVMe	
16-103	2158-2159	,	
16-104	2160-2161	M	
16-105	2161-2163	.2	
16-106	2164-2172	Internal	
16-107	2173-2176	SSD	
16-108	2177-2178	(	
16-109	2178-2189	MZ-V6E1T0BW	
16-110	2189-2190	)	
16-111	2191-2195	HGST	
16-112	2196-2205	Ultrastar	
16-113	2206-2210	He10	
16-114	2211-2226	HUH721010ALE604	
16-115	2227-2231	10TB	
16-116	2231-2232	,	
16-117	2233-2236	two	
16-118	2236-2237	(	
16-119	2237-2238	2	
16-120	2238-2239	)	
16-121	2240-2246	drives	
16-122	2246-2247	,	
16-123	2248-2251	ZFS	
16-124	2252-2257	RAID1	
16-125	2258-2264	mirror	
16-126	2265-2270	Power	
16-127	2271-2277	Supply	
16-128	2278-2279	:	
16-129	2280-2284	EVGA	
16-130	2285-2294	SuperNOVA	
16-131	2295-2298	650	
16-132	2299-2301	P2	
16-133	2301-2302	,	
16-134	2303-2305	80	
16-135	2305-2306	+	
16-136	2307-2315	PLATINUM	
16-137	2316-2320	650W	
16-138	2321-2325	Case	
16-139	2326-2327	:	
16-140	2328-2335	Corsair	
16-141	2336-2343	Carbide	
16-142	2344-2350	Series	
16-143	2351-2354	Air	
16-144	2355-2358	540	
16-145	2359-2363	with	
16-146	2364-2370	Arctic	
16-147	2371-2374	F12	
16-148	2375-2378	PWM	
16-149	2379-2382	PST	
16-150	2383-2387	Fans	
16-151	2388-2395	Network	
16-152	2396-2400	Card	
16-153	2401-2402	:	
16-154	2403-2410	Chelsio	
16-155	2411-2415	T520	
16-156	2415-2416	-	
16-157	2416-2418	BT	
16-158	2418-2419	,	
16-159	2420-2424	Dual	
16-160	2425-2429	port	
16-161	2430-2432	RJ	
16-162	2432-2433	-	
16-163	2433-2435	45	
16-164	2436-2437	/	
16-165	2438-2447	10GBase-T	
16-166	2447-2448	,	
16-167	2449-2451	20	
16-168	2452-2457	watts	
16-169	2458-2459	(	
16-170	2459-2463	PCIe	
16-171	2464-2465	3	
16-172	2466-2468	x8	
16-173	2468-2469	)	
16-174	2470-2471	-	
16-175	2471-2473	OR	
16-176	2473-2474	-	
16-177	2475-2480	Intel	
16-178	2481-2485	I350	
16-179	2485-2486	-	
16-180	2486-2488	T2	
16-181	2489-2495	Server	
16-182	2496-2503	Adapter	
16-183	2503-2504	,	
16-184	2505-2508	4.4	
16-185	2509-2514	watts	
16-186	2515-2516	(	
16-187	2516-2520	PCIe	
16-188	2521-2525	v2.1	
16-189	2526-2528	x4	
16-190	2528-2529	)	
16-191	2530-2534	NOTE	
16-192	2534-2535	:	
16-193	2536-2542	Though	
16-194	2543-2545	we	
16-195	2546-2552	prefer	
16-196	2553-2560	Chelsio	
16-197	2561-2563	on	
16-198	2564-2571	FreeBSD	
16-199	2571-2572	,	
16-200	2573-2576	the	
16-201	2577-2582	Intel	
16-202	2583-2587	I350	
16-203	2587-2588	-	
16-204	2588-2590	T2	
16-205	2591-2593	is	
16-206	2594-2596	an	
16-207	2597-2607	affordable	
16-208	2607-2608	,	
16-209	2609-2613	fast	
16-210	2614-2617	and	
16-211	2618-2624	stable	
16-212	2625-2629	line	
16-213	2630-2634	rate	
16-214	2635-2638	NIC	
16-215	2639-2644	which	
16-216	2645-2649	uses	
16-217	2650-2653	the	
16-218	2654-2661	FreeBSD	
16-219	2662-2665	igb	
16-220	2665-2666	(	
16-221	2666-2667	4	
16-222	2667-2668	)	
16-223	2669-2675	driver	
16-224	2675-2676	.	
16-225	2677-2678	#	
16-226	2678-2679	#	
16-227	2680-2684	Rack	
16-228	2685-2692	mounted	
16-229	2693-2699	server	
16-230	2700-2709	Processor	
16-231	2710-2711	:	
16-232	2712-2717	Intel	
16-233	2717-2718	(	
16-234	2718-2719	R	
16-235	2719-2720	)	
16-236	2721-2725	Xeon	
16-237	2725-2726	(	
16-238	2726-2727	R	
16-239	2727-2728	)	
16-240	2729-2732	CPU	
16-241	2733-2735	E5	
16-242	2735-2736	-	
16-243	2736-2740	2650	
16-244	2741-2743	v4	
16-245	2744-2745	@	
16-246	2746-2753	2.20GHz	
16-247	2754-2756	95	
16-248	2757-2761	Watt	
16-249	2761-2762	,	
16-250	2763-2765	12	
16-251	2766-2770	Core	
16-252	2771-2782	Motherboard	
16-253	2783-2784	:	
16-254	2785-2788	SMC	
16-255	2788-2789	,	
16-256	2790-2795	Intel	
16-257	2796-2800	C612	
16-258	2801-2808	chipset	
16-259	2809-2815	Memory	
16-260	2816-2817	:	
16-261	2818-2821	128	
16-262	2822-2824	GB	
16-263	2824-2825	,	
16-264	2826-2830	DDR4	
16-265	2830-2831	-	
16-266	2831-2838	2400MHz	
16-267	2838-2839	,	
16-268	2840-2850	registered	
16-269	2851-2854	ECC	
16-270	2855-2861	memory	
16-271	2862-2863	w	
16-272	2863-2864	/	
16-273	2865-2872	Thermal	
16-274	2873-2879	Sensor	
16-275	2880-2887	Chassis	
16-276	2888-2889	:	
16-277	2890-2893	SMC	
16-278	2893-2894	,	
16-279	2895-2897	2U	
16-280	2897-2898	,	
16-281	2899-2901	24	
16-282	2902-2905	bay	
16-283	2906-2907	(	
16-284	2907-2910	2.5	
16-285	2910-2911	"	
16-286	2911-2912	)	
16-287	2913-2917	with	
16-288	2918-2922	SAS3	
16-289	2923-2931	expander	
16-290	2932-2941	backplane	
16-291	2942-2952	Controller	
16-292	2953-2954	:	
16-293	2955-2958	LSI	
16-294	2959-2967	MegaRAID	
16-295	2968-2972	SAS3	
16-296	2973-2977	9300	
16-297	2977-2978	-	
16-298	2978-2982	4i4e	
16-299	2982-2983	,	
16-300	2984-2986	12	
16-301	2987-2994	Gigabit	
16-302	2994-2995	/	
16-303	2995-2998	sec	
16-304	2999-3002	HBA	
16-305	3003-3007	Hard	
16-306	3008-3013	Drive	
16-307	3014-3015	:	
16-308	3016-3019	24x	
16-309	3020-3027	Mushkin	
16-310	3028-3039	MKNSSDRE1TB	
16-311	3040-3047	Reactor	
16-312	3048-3051	1TB	
16-313	3052-3056	SSDs	
16-314	3056-3057	,	
16-315	3058-3066	mirrored	
16-316	3067-3070	ZFS	
16-317	3071-3075	root	
16-318	3075-3076	,	
16-319	3077-3080	LZ4	
16-320	3081-3092	compression	
16-321	3093-3100	Network	
16-322	3101-3105	Card	
16-323	3106-3107	:	
16-324	3108-3115	Chelsio	
16-325	3116-3120	T520	
16-326	3120-3121	-	
16-327	3121-3123	CR	
16-328	3123-3124	,	
16-329	3125-3135	10GBASE-SR	
16-330	3135-3136	,	
16-331	3137-3139	LC	
16-332	3140-3146	Duplex	
16-333	3147-3148	(	
16-334	3148-3151	PCI	
16-335	3152-3159	Express	
16-336	3160-3162	x8	
16-337	3162-3163	)	
16-338	3164-3175	Transceiver	
16-339	3176-3177	:	
16-340	3178-3185	Chelsio	
16-341	3186-3189	SFP	
16-342	3189-3190	+	
16-343	3191-3197	10Gbit	
16-344	3197-3198	,	
16-345	3199-3207	SM10G-SR	
16-346	3208-3209	(	
16-347	3209-3214	850nm	
16-348	3215-3225	wavelength	
16-349	3225-3226	)	
16-350	3227-3228	-	
16-351	3228-3230	OR	
16-352	3230-3231	-	
16-353	3232-3239	Network	
16-354	3240-3244	Card	
16-355	3245-3246	:	
16-356	3247-3254	Myricom	
16-357	3255-3259	Myri	
16-358	3259-3260	-	
16-359	3260-3263	10G	
16-360	3264-3273	10G-PCIE2	
16-361	3273-3274	-	
16-362	3274-3277	8B2	
16-363	3277-3278	-	
16-364	3278-3280	2S	
16-365	3281-3282	(	
16-366	3282-3285	PCI	
16-367	3286-3293	Express	
16-368	3294-3296	x8	
16-369	3296-3297	)	
16-370	3298-3309	Transceiver	
16-371	3310-3311	:	
16-372	3312-3319	Myricom	
16-373	3320-3324	Myri	
16-374	3324-3325	-	
16-375	3325-3328	10G	
16-376	3329-3332	SFP	
16-377	3332-3333	+	
16-378	3334-3344	10GBase-SR	
16-379	3345-3352	optical	
16-380	3353-3358	fiber	
16-381	3359-3360	(	
16-382	3360-3365	850nm	
16-383	3366-3376	wavelength	
16-384	3376-3377	)	
16-385	3378-3386	Switches	
16-386	3387-3388	:	
16-387	3389-3395	Arista	
16-388	3396-3401	7150S	
16-389	3401-3402	-	
16-390	3402-3404	52	
16-391	3405-3409	Both	
16-392	3410-3418	switches	
16-393	3419-3423	were	
16-394	3424-3428	able	
16-395	3429-3431	to	
16-396	3432-3440	saturate	
16-397	3441-3442	:	
16-398	3443-3450	Force10	
16-399	3451-3456	S4810	
16-400	3457-3458	a	
16-401	3459-3472	bidirectional	
16-402	3473-3478	10gig	
16-403	3479-3488	interface	
16-404	3489-3492	The	
16-405	3493-3494	/	
16-406	3494-3498	boot	
16-407	3498-3499	/	
16-408	3499-3510	loader.conf	
16-409	3511-3514	The	
16-410	3515-3516	/	
16-411	3516-3520	boot	
16-412	3520-3521	/	
16-413	3521-3532	loader.conf	
16-414	3533-3535	is	
16-415	3536-3541	where	
16-416	3542-3544	we	
16-417	3545-3550	setup	
16-418	3551-3554	the	
16-419	3555-3564	specifics	
16-420	3565-3568	for	
16-421	3569-3572	our	
16-422	3573-3580	network	
16-423	3581-3586	cards	
16-424	3587-3590	and	
16-425	3591-3595	some	
16-426	3596-3602	hashes	
16-427	3602-3603	.	

#Text=We tried to completely comment each of the options in the
#Text=file.
17-1	3604-3606	We	
17-2	3607-3612	tried	
17-3	3613-3615	to	
17-4	3616-3626	completely	
17-5	3627-3634	comment	
17-6	3635-3639	each	
17-7	3640-3642	of	
17-8	3643-3646	the	
17-9	3647-3654	options	
17-10	3655-3657	in	
17-11	3658-3661	the	
17-12	3662-3666	file	
17-13	3666-3667	.	

#Text=Directives which are commented out are not used and only included for
#Text=reference.
18-1	3668-3678	Directives	
18-2	3679-3684	which	
18-3	3685-3688	are	
18-4	3689-3698	commented	
18-5	3699-3702	out	
18-6	3703-3706	are	
18-7	3707-3710	not	
18-8	3711-3715	used	
18-9	3716-3719	and	
18-10	3720-3724	only	
18-11	3725-3733	included	
18-12	3734-3737	for	
18-13	3738-3747	reference	
18-14	3747-3748	.	

#Text=You should be able to copy and paste the following text into your
#Text=loader.conf if you wish.
#Text=# Calomel.org
#Text=-|-
#Text=April 2021
#Text=# https://calomel.org/freebsd_network_tuning.html
#Text=# ZFS root boot config
#Text=zfs_load="YES"
#Text=vfs.root.mountfrom="zfs:zroot"
#Text=# Pf firewall kernel modules, preload
#Text=pf_load="YES"
#Text=pflog_load="YES"
#Text=# ZFS: the maximum upper limit of RAM used for dirty, "modified", uncommitted
#Text=# data which vfs.zfs.dirty_data_max can not exceed.
19-1	3749-3752	You	
19-2	3753-3759	should	
19-3	3760-3762	be	
19-4	3763-3767	able	
19-5	3768-3770	to	
19-6	3771-3775	copy	
19-7	3776-3779	and	
19-8	3780-3785	paste	
19-9	3786-3789	the	
19-10	3790-3799	following	
19-11	3800-3804	text	
19-12	3805-3809	into	
19-13	3810-3814	your	
19-14	3815-3826	loader.conf	
19-15	3827-3829	if	
19-16	3830-3833	you	
19-17	3834-3838	wish	
19-18	3838-3839	.	
19-19	3840-3841	#	
19-20	3842-3853	Calomel.org	
19-21	3854-3855	-	
19-22	3855-3856	|	
19-23	3856-3857	-	
19-24	3858-3863	April	
19-25	3864-3868	2021	
19-26	3869-3870	#	
19-27	3871-3876	https	
19-28	3876-3877	:	
19-29	3877-3878	/	
19-30	3878-3879	/	
19-31	3879-3890	calomel.org	
19-32	3890-3891	/	
19-33	3891-3918	freebsd_network_tuning.html	
19-34	3919-3920	#	
19-35	3921-3924	ZFS	
19-36	3925-3929	root	
19-37	3930-3934	boot	
19-38	3935-3941	config	
19-39	3942-3950	zfs_load	
19-40	3950-3951	=	
19-41	3951-3952	"	
19-42	3952-3955	YES	
19-43	3955-3956	"	
19-44	3957-3975	vfs.root.mountfrom	
19-45	3975-3976	=	
19-46	3976-3977	"	
19-47	3977-3980	zfs	
19-48	3980-3981	:	
19-49	3981-3986	zroot	
19-50	3986-3987	"	
19-51	3988-3989	#	
19-52	3990-3992	Pf	
19-53	3993-4001	firewall	
19-54	4002-4008	kernel	
19-55	4009-4016	modules	
19-56	4016-4017	,	
19-57	4018-4025	preload	
19-58	4026-4033	pf_load	
19-59	4033-4034	=	
19-60	4034-4035	"	
19-61	4035-4038	YES	
19-62	4038-4039	"	
19-63	4040-4050	pflog_load	
19-64	4050-4051	=	
19-65	4051-4052	"	
19-66	4052-4055	YES	
19-67	4055-4056	"	
19-68	4057-4058	#	
19-69	4059-4062	ZFS	
19-70	4062-4063	:	
19-71	4064-4067	the	
19-72	4068-4075	maximum	
19-73	4076-4081	upper	
19-74	4082-4087	limit	
19-75	4088-4090	of	
19-76	4091-4094	RAM	
19-77	4095-4099	used	
19-78	4100-4103	for	
19-79	4104-4109	dirty	
19-80	4109-4110	,	
19-81	4111-4112	"	
19-82	4112-4120	modified	
19-83	4120-4121	"	
19-84	4121-4122	,	
19-85	4123-4134	uncommitted	
19-86	4135-4136	#	
19-87	4137-4141	data	
19-88	4142-4147	which	
19-89	4148-4170	vfs.zfs.dirty_data_max	
19-90	4171-4174	can	
19-91	4175-4178	not	
19-92	4179-4185	exceed	
19-93	4185-4186	.	

#Text=The server has 64GB of RAM
#Text=# in which we will allow up to 16GB, if needed, to cache incoming data before
#Text=# TXG commit to the PCIe NVMe array.
20-1	4187-4190	The	
20-2	4191-4197	server	
20-3	4198-4201	has	
20-4	4202-4206	64GB	
20-5	4207-4209	of	
20-6	4210-4213	RAM	
20-7	4214-4215	#	
20-8	4216-4218	in	
20-9	4219-4224	which	
20-10	4225-4227	we	
20-11	4228-4232	will	
20-12	4233-4238	allow	
20-13	4239-4241	up	
20-14	4242-4244	to	
20-15	4245-4249	16GB	
20-16	4249-4250	,	
20-17	4251-4253	if	
20-18	4254-4260	needed	
20-19	4260-4261	,	
20-20	4262-4264	to	
20-21	4265-4270	cache	
20-22	4271-4279	incoming	
20-23	4280-4284	data	
20-24	4285-4291	before	
20-25	4292-4293	#	
20-26	4294-4297	TXG	
20-27	4298-4304	commit	
20-28	4305-4307	to	
20-29	4308-4311	the	
20-30	4312-4316	PCIe	
20-31	4317-4321	NVMe	
20-32	4322-4327	array	
20-33	4327-4328	.	

#Text=Note: the dirty_data cache is part of the
#Text=# Adaptive Replacement Cache (ARC) and can be viewed in "top" as the "Anon"
#Text=# value under ARC.
#Text=vfs.zfs.dirty_data_max_max="17179869184"
#Text=# (default 4294967296, 4GB)
#Text=# ZFS: max percentage of total server RAM allowed to be dirty (Anon in top).
#Text=# 25% of 64 GBytes of RAM is 16MB which is equal to vfs.zfs.dirty_data_max_max .
#Text=vfs.zfs.dirty_data_max_percent="25"
#Text=# (default 10 percent)
#Text=# hostcache cache limit is the number of ip addresses in the hostcache list.
#Text=# Setting the value to zero(0) stops any ip address connection information from
#Text=# being cached and negates the need for "net.inet.tcp.hostcache.expire".
21-1	4329-4333	Note	
21-2	4333-4334	:	
21-3	4335-4338	the	
21-4	4339-4349	dirty_data	
21-5	4350-4355	cache	
21-6	4356-4358	is	
21-7	4359-4363	part	
21-8	4364-4366	of	
21-9	4367-4370	the	
21-10	4371-4372	#	
21-11	4373-4381	Adaptive	
21-12	4382-4393	Replacement	
21-13	4394-4399	Cache	
21-14	4400-4401	(	
21-15	4401-4404	ARC	
21-16	4404-4405	)	
21-17	4406-4409	and	
21-18	4410-4413	can	
21-19	4414-4416	be	
21-20	4417-4423	viewed	
21-21	4424-4426	in	
21-22	4427-4428	"	
21-23	4428-4431	top	
21-24	4431-4432	"	
21-25	4433-4435	as	
21-26	4436-4439	the	
21-27	4440-4441	"	
21-28	4441-4445	Anon	
21-29	4445-4446	"	
21-30	4447-4448	#	
21-31	4449-4454	value	
21-32	4455-4460	under	
21-33	4461-4464	ARC	
21-34	4464-4465	.	
21-35	4466-4492	vfs.zfs.dirty_data_max_max	
21-36	4492-4493	=	
21-37	4493-4494	"	
21-38	4494-4505	17179869184	
21-39	4505-4506	"	
21-40	4507-4508	#	
21-41	4509-4510	(	
21-42	4510-4517	default	
21-43	4518-4528	4294967296	
21-44	4528-4529	,	
21-45	4530-4533	4GB	
21-46	4533-4534	)	
21-47	4535-4536	#	
21-48	4537-4540	ZFS	
21-49	4540-4541	:	
21-50	4542-4545	max	
21-51	4546-4556	percentage	
21-52	4557-4559	of	
21-53	4560-4565	total	
21-54	4566-4572	server	
21-55	4573-4576	RAM	
21-56	4577-4584	allowed	
21-57	4585-4587	to	
21-58	4588-4590	be	
21-59	4591-4596	dirty	
21-60	4597-4598	(	
21-61	4598-4602	Anon	
21-62	4603-4605	in	
21-63	4606-4609	top	
21-64	4609-4610	)	
21-65	4610-4611	.	
21-66	4612-4613	#	
21-67	4614-4617	25%	
21-68	4618-4620	of	
21-69	4621-4623	64	
21-70	4624-4630	GBytes	
21-71	4631-4633	of	
21-72	4634-4637	RAM	
21-73	4638-4640	is	
21-74	4641-4645	16MB	
21-75	4646-4651	which	
21-76	4652-4654	is	
21-77	4655-4660	equal	
21-78	4661-4663	to	
21-79	4664-4690	vfs.zfs.dirty_data_max_max	
21-80	4691-4692	.	
21-81	4693-4723	vfs.zfs.dirty_data_max_percent	
21-82	4723-4724	=	
21-83	4724-4725	"	
21-84	4725-4727	25	
21-85	4727-4728	"	
21-86	4729-4730	#	
21-87	4731-4732	(	
21-88	4732-4739	default	
21-89	4740-4742	10	
21-90	4743-4750	percent	
21-91	4750-4751	)	
21-92	4752-4753	#	
21-93	4754-4763	hostcache	
21-94	4764-4769	cache	
21-95	4770-4775	limit	
21-96	4776-4778	is	
21-97	4779-4782	the	
21-98	4783-4789	number	
21-99	4790-4792	of	
21-100	4793-4795	ip	
21-101	4796-4805	addresses	
21-102	4806-4808	in	
21-103	4809-4812	the	
21-104	4813-4822	hostcache	
21-105	4823-4827	list	
21-106	4827-4828	.	
21-107	4829-4830	#	
21-108	4831-4838	Setting	
21-109	4839-4842	the	
21-110	4843-4848	value	
21-111	4849-4851	to	
21-112	4852-4856	zero	
21-113	4856-4857	(	
21-114	4857-4858	0	
21-115	4858-4859	)	
21-116	4860-4865	stops	
21-117	4866-4869	any	
21-118	4870-4872	ip	
21-119	4873-4880	address	
21-120	4881-4891	connection	
21-121	4892-4903	information	
21-122	4904-4908	from	
21-123	4909-4910	#	
21-124	4911-4916	being	
21-125	4917-4923	cached	
21-126	4924-4927	and	
21-127	4928-4935	negates	
21-128	4936-4939	the	
21-129	4940-4944	need	
21-130	4945-4948	for	
21-131	4949-4950	"	
21-132	4950-4979	net.inet.tcp.hostcache.expire	
21-133	4979-4980	"	
21-134	4980-4981	.	

#Text=We
#Text=# find disabling the hostcache increases burst data rates if a subnet was
#Text=# incorrectly graded as slow on a previous connection.
22-1	4982-4984	We	
22-2	4985-4986	#	
22-3	4987-4991	find	
22-4	4992-5001	disabling	
22-5	5002-5005	the	
22-6	5006-5015	hostcache	
22-7	5016-5025	increases	
22-8	5026-5031	burst	
22-9	5032-5036	data	
22-10	5037-5042	rates	
22-11	5043-5045	if	
22-12	5046-5047	a	
22-13	5048-5054	subnet	
22-14	5055-5058	was	
22-15	5059-5060	#	
22-16	5061-5072	incorrectly	
22-17	5073-5079	graded	
22-18	5080-5082	as	
22-19	5083-5087	slow	
22-20	5088-5090	on	
22-21	5091-5092	a	
22-22	5093-5101	previous	
22-23	5102-5112	connection	
22-24	5112-5113	.	

#Text=A host cache entry is
#Text=# the client's cached tcp connection details and metrics (TTL, SSTRESH and
#Text=# VARTTL) the server can use to improve future performance of connections
#Text=# between the same two hosts.
23-1	5114-5115	A	
23-2	5116-5120	host	
23-3	5121-5126	cache	
23-4	5127-5132	entry	
23-5	5133-5135	is	
23-6	5136-5137	#	
23-7	5138-5141	the	
23-8	5142-5150	client's	
23-9	5151-5157	cached	
23-10	5158-5161	tcp	
23-11	5162-5172	connection	
23-12	5173-5180	details	
23-13	5181-5184	and	
23-14	5185-5192	metrics	
23-15	5193-5194	(	
23-16	5194-5197	TTL	
23-17	5197-5198	,	
23-18	5199-5206	SSTRESH	
23-19	5207-5210	and	
23-20	5211-5212	#	
23-21	5213-5219	VARTTL	
23-22	5219-5220	)	
23-23	5221-5224	the	
23-24	5225-5231	server	
23-25	5232-5235	can	
23-26	5236-5239	use	
23-27	5240-5242	to	
23-28	5243-5250	improve	
23-29	5251-5257	future	
23-30	5258-5269	performance	
23-31	5270-5272	of	
23-32	5273-5284	connections	
23-33	5285-5286	#	
23-34	5287-5294	between	
23-35	5295-5298	the	
23-36	5299-5303	same	
23-37	5304-5307	two	
23-38	5308-5313	hosts	
23-39	5313-5314	.	

#Text=When a tcp connection is completed, our server
#Text=# will cache information about the connection until an expire timeout.
24-1	5315-5319	When	
24-2	5320-5321	a	
24-3	5322-5325	tcp	
24-4	5326-5336	connection	
24-5	5337-5339	is	
24-6	5340-5349	completed	
24-7	5349-5350	,	
24-8	5351-5354	our	
24-9	5355-5361	server	
24-10	5362-5363	#	
24-11	5364-5368	will	
24-12	5369-5374	cache	
24-13	5375-5386	information	
24-14	5387-5392	about	
24-15	5393-5396	the	
24-16	5397-5407	connection	
24-17	5408-5413	until	
24-18	5414-5416	an	
24-19	5417-5423	expire	
24-20	5424-5431	timeout	
24-21	5431-5432	.	

#Text=If a new
#Text=# connection between the same client is initiated before the cache has expired,
#Text=# the connection will use the cached connection details to setup the
#Text=# connection's internal variables.
25-1	5433-5435	If	
25-2	5436-5437	a	
25-3	5438-5441	new	
25-4	5442-5443	#	
25-5	5444-5454	connection	
25-6	5455-5462	between	
25-7	5463-5466	the	
25-8	5467-5471	same	
25-9	5472-5478	client	
25-10	5479-5481	is	
25-11	5482-5491	initiated	
25-12	5492-5498	before	
25-13	5499-5502	the	
25-14	5503-5508	cache	
25-15	5509-5512	has	
25-16	5513-5520	expired	
25-17	5520-5521	,	
25-18	5522-5523	#	
25-19	5524-5527	the	
25-20	5528-5538	connection	
25-21	5539-5543	will	
25-22	5544-5547	use	
25-23	5548-5551	the	
25-24	5552-5558	cached	
25-25	5559-5569	connection	
25-26	5570-5577	details	
25-27	5578-5580	to	
25-28	5581-5586	setup	
25-29	5587-5590	the	
25-30	5591-5592	#	
25-31	5593-5605	connection's	
25-32	5606-5614	internal	
25-33	5615-5624	variables	
25-34	5624-5625	.	

#Text=This pre-cached setup allows the client and
#Text=# server to reach optimal performance significantly faster because the server
#Text=# will not need to go through the usual steps of re-learning the optimal
#Text=# parameters for the connection.
26-1	5626-5630	This	
26-2	5631-5641	pre-cached	
26-3	5642-5647	setup	
26-4	5648-5654	allows	
26-5	5655-5658	the	
26-6	5659-5665	client	
26-7	5666-5669	and	
26-8	5670-5671	#	
26-9	5672-5678	server	
26-10	5679-5681	to	
26-11	5682-5687	reach	
26-12	5688-5695	optimal	
26-13	5696-5707	performance	
26-14	5708-5721	significantly	
26-15	5722-5728	faster	
26-16	5729-5736	because	
26-17	5737-5740	the	
26-18	5741-5747	server	
26-19	5748-5749	#	
26-20	5750-5754	will	
26-21	5755-5758	not	
26-22	5759-5763	need	
26-23	5764-5766	to	
26-24	5767-5769	go	
26-25	5770-5777	through	
26-26	5778-5781	the	
26-27	5782-5787	usual	
26-28	5788-5793	steps	
26-29	5794-5796	of	
26-30	5797-5808	re-learning	
26-31	5809-5812	the	
26-32	5813-5820	optimal	
26-33	5821-5822	#	
26-34	5823-5833	parameters	
26-35	5834-5837	for	
26-36	5838-5841	the	
26-37	5842-5852	connection	
26-38	5852-5853	.	

#Text=To view the current host cache stats use
#Text=# "sysctl net.inet.tcp.hostcache.list"
#Text=net.inet.tcp.hostcache.enable="0"
#Text=net.inet.tcp.hostcache.cachelimit="0"
#Text=# Drive Labels.
27-1	5854-5856	To	
27-2	5857-5861	view	
27-3	5862-5865	the	
27-4	5866-5873	current	
27-5	5874-5878	host	
27-6	5879-5884	cache	
27-7	5885-5890	stats	
27-8	5891-5894	use	
27-9	5895-5896	#	
27-10	5897-5898	"	
27-11	5898-5904	sysctl	
27-12	5905-5932	net.inet.tcp.hostcache.list	
27-13	5932-5933	"	
27-14	5934-5963	net.inet.tcp.hostcache.enable	
27-15	5963-5964	=	
27-16	5964-5965	"	
27-17	5965-5966	0	
27-18	5966-5967	"	
27-19	5968-6001	net.inet.tcp.hostcache.cachelimit	
27-20	6001-6002	=	
27-21	6002-6003	"	
27-22	6003-6004	0	
27-23	6004-6005	"	
27-24	6006-6007	#	
27-25	6008-6013	Drive	
27-26	6014-6020	Labels	
27-27	6020-6021	.	

#Text=A diskid or gptid is a long, unique string assigned to drives
#Text=# which we find are difficult to relate to.
28-1	6022-6023	A	
28-2	6024-6030	diskid	
28-3	6031-6033	or	
28-4	6034-6039	gptid	
28-5	6040-6042	is	
28-6	6043-6044	a	
28-7	6045-6049	long	
28-8	6049-6050	,	
28-9	6051-6057	unique	
28-10	6058-6064	string	
28-11	6065-6073	assigned	
28-12	6074-6076	to	
28-13	6077-6083	drives	
28-14	6084-6085	#	
28-15	6086-6091	which	
28-16	6092-6094	we	
28-17	6095-6099	find	
28-18	6100-6103	are	
28-19	6104-6113	difficult	
28-20	6114-6116	to	
28-21	6117-6123	relate	
28-22	6124-6126	to	
28-23	6126-6127	.	

#Text=We prefer to disable diskid's and
#Text=# gptid's and use GPT Labels, like gpt/disk0, or the raw device names, like
#Text=# nvd0p2 for the first NVMe drive, second partition.
29-1	6128-6130	We	
29-2	6131-6137	prefer	
29-3	6138-6140	to	
29-4	6141-6148	disable	
29-5	6149-6157	diskid's	
29-6	6158-6161	and	
29-7	6162-6163	#	
29-8	6164-6171	gptid's	
29-9	6172-6175	and	
29-10	6176-6179	use	
29-11	6180-6183	GPT	
29-12	6184-6190	Labels	
29-13	6190-6191	,	
29-14	6192-6196	like	
29-15	6197-6200	gpt	
29-16	6200-6201	/	
29-17	6201-6206	disk0	
29-18	6206-6207	,	
29-19	6208-6210	or	
29-20	6211-6214	the	
29-21	6215-6218	raw	
29-22	6219-6225	device	
29-23	6226-6231	names	
29-24	6231-6232	,	
29-25	6233-6237	like	
29-26	6238-6239	#	
29-27	6240-6246	nvd0p2	
29-28	6247-6250	for	
29-29	6251-6254	the	
29-30	6255-6260	first	
29-31	6261-6265	NVMe	
29-32	6266-6271	drive	
29-33	6271-6272	,	
29-34	6273-6279	second	
29-35	6280-6289	partition	
29-36	6289-6290	.	

#Text=Use "glabel status" to
#Text=# display a map of GPT Labels to raw device names in order to identify the
#Text=# physical drive location.
30-1	6291-6294	Use	
30-2	6295-6296	"	
30-3	6296-6302	glabel	
30-4	6303-6309	status	
30-5	6309-6310	"	
30-6	6311-6313	to	
30-7	6314-6315	#	
30-8	6316-6323	display	
30-9	6324-6325	a	
30-10	6326-6329	map	
30-11	6330-6332	of	
30-12	6333-6336	GPT	
30-13	6337-6343	Labels	
30-14	6344-6346	to	
30-15	6347-6350	raw	
30-16	6351-6357	device	
30-17	6358-6363	names	
30-18	6364-6366	in	
30-19	6367-6372	order	
30-20	6373-6375	to	
30-21	6376-6384	identify	
30-22	6385-6388	the	
30-23	6389-6390	#	
30-24	6391-6399	physical	
30-25	6400-6405	drive	
30-26	6406-6414	location	
30-27	6414-6415	.	

#Text=When adding new drives, try to use gpt labels
#Text=# instead of raw device names in case the drives move to different SATA, SAS or
#Text=# SCSI interface ports.
#Text=kern.geom.label.disk_ident.enable="0" # (default 1) diskid/DISK-ABC0123...
#Text=kern.geom.label.gptid.enable="0"
#Text=# (default 1) gptid/123abc-abc123...
#Text=# Disable Hyper Threading (HT), also known as Intel's proprietary simultaneous
#Text=# multithreading (SMT) because implementations typically share TLBs and L1
#Text=# caches between threads which is a security concern.
31-1	6416-6420	When	
31-2	6421-6427	adding	
31-3	6428-6431	new	
31-4	6432-6438	drives	
31-5	6438-6439	,	
31-6	6440-6443	try	
31-7	6444-6446	to	
31-8	6447-6450	use	
31-9	6451-6454	gpt	
31-10	6455-6461	labels	
31-11	6462-6463	#	
31-12	6464-6471	instead	
31-13	6472-6474	of	
31-14	6475-6478	raw	
31-15	6479-6485	device	
31-16	6486-6491	names	
31-17	6492-6494	in	
31-18	6495-6499	case	
31-19	6500-6503	the	
31-20	6504-6510	drives	
31-21	6511-6515	move	
31-22	6516-6518	to	
31-23	6519-6528	different	
31-24	6529-6533	SATA	
31-25	6533-6534	,	
31-26	6535-6538	SAS	
31-27	6539-6541	or	
31-28	6542-6543	#	
31-29	6544-6548	SCSI	
31-30	6549-6558	interface	
31-31	6559-6564	ports	
31-32	6564-6565	.	
31-33	6566-6599	kern.geom.label.disk_ident.enable	
31-34	6599-6600	=	
31-35	6600-6601	"	
31-36	6601-6602	0	
31-37	6602-6603	"	
31-38	6604-6605	#	
31-39	6606-6607	(	
31-40	6607-6614	default	
31-41	6615-6616	1	
31-42	6616-6617	)	
31-43	6618-6624	diskid	
31-44	6624-6625	/	
31-45	6625-6637	DISK-ABC0123	
31-46	6637-6638	.	
31-47	6638-6639	.	
31-48	6639-6640	.	
31-49	6641-6669	kern.geom.label.gptid.enable	
31-50	6669-6670	=	
31-51	6670-6671	"	
31-52	6671-6672	0	
31-53	6672-6673	"	
31-54	6674-6675	#	
31-55	6676-6677	(	
31-56	6677-6684	default	
31-57	6685-6686	1	
31-58	6686-6687	)	
31-59	6688-6693	gptid	
31-60	6693-6694	/	
31-61	6694-6707	123abc-abc123	
31-62	6707-6708	.	
31-63	6708-6709	.	
31-64	6709-6710	.	
31-65	6711-6712	#	
31-66	6713-6720	Disable	
31-67	6721-6726	Hyper	
31-68	6727-6736	Threading	
31-69	6737-6738	(	
31-70	6738-6740	HT	
31-71	6740-6741	)	
31-72	6741-6742	,	
31-73	6743-6747	also	
31-74	6748-6753	known	
31-75	6754-6756	as	
31-76	6757-6764	Intel's	
31-77	6765-6776	proprietary	
31-78	6777-6789	simultaneous	
31-79	6790-6791	#	
31-80	6792-6806	multithreading	
31-81	6807-6808	(	
31-82	6808-6811	SMT	
31-83	6811-6812	)	
31-84	6813-6820	because	
31-85	6821-6836	implementations	
31-86	6837-6846	typically	
31-87	6847-6852	share	
31-88	6853-6857	TLBs	
31-89	6858-6861	and	
31-90	6862-6864	L1	
31-91	6865-6866	#	
31-92	6867-6873	caches	
31-93	6874-6881	between	
31-94	6882-6889	threads	
31-95	6890-6895	which	
31-96	6896-6898	is	
31-97	6899-6900	a	
31-98	6901-6909	security	
31-99	6910-6917	concern	
31-100	6917-6918	.	

#Text=SMT is likely to slow
#Text=# down workloads not specifically optimized for SMT if you have a CPU with more
#Text=# than two(2) real CPU cores.
32-1	6919-6922	SMT	
32-2	6923-6925	is	
32-3	6926-6932	likely	
32-4	6933-6935	to	
32-5	6936-6940	slow	
32-6	6941-6942	#	
32-7	6943-6947	down	
32-8	6948-6957	workloads	
32-9	6958-6961	not	
32-10	6962-6974	specifically	
32-11	6975-6984	optimized	
32-12	6985-6988	for	
32-13	6989-6992	SMT	
32-14	6993-6995	if	
32-15	6996-6999	you	
32-16	7000-7004	have	
32-17	7005-7006	a	
32-18	7007-7010	CPU	
32-19	7011-7015	with	
32-20	7016-7020	more	
32-21	7021-7022	#	
32-22	7023-7027	than	
32-23	7028-7031	two	
32-24	7031-7032	(	
32-25	7032-7033	2	
32-26	7033-7034	)	
32-27	7035-7039	real	
32-28	7040-7043	CPU	
32-29	7044-7049	cores	
32-30	7049-7050	.	

#Text=Secondly, multi-queue network cards are as much
#Text=# as 20% slower when network queues are bound to both real CPU cores and SMT
#Text=# virtual cores due to interrupt processing collisions.
#Text=machdep.hyperthreading_allowed="0"
#Text=# (default 1, allow Hyper Threading (HT))
#Text=# Enable the optimized version of the soreceive() kernel socket interface for
#Text=# stream (TCP) sockets. soreceive_stream() only does one sockbuf unlock/lock
#Text=# per receive independent of the length of data to be moved into the uio
#Text=# compared to soreceive() which unlocks/locks per *mbuf*. soreceive_stream()
#Text=# can significantly reduced CPU usage and lock contention when receiving fast
#Text=# TCP streams.
33-1	7051-7059	Secondly	
33-2	7059-7060	,	
33-3	7061-7072	multi-queue	
33-4	7073-7080	network	
33-5	7081-7086	cards	
33-6	7087-7090	are	
33-7	7091-7093	as	
33-8	7094-7098	much	
33-9	7099-7100	#	
33-10	7101-7103	as	
33-11	7104-7107	20%	
33-12	7108-7114	slower	
33-13	7115-7119	when	
33-14	7120-7127	network	
33-15	7128-7134	queues	
33-16	7135-7138	are	
33-17	7139-7144	bound	
33-18	7145-7147	to	
33-19	7148-7152	both	
33-20	7153-7157	real	
33-21	7158-7161	CPU	
33-22	7162-7167	cores	
33-23	7168-7171	and	
33-24	7172-7175	SMT	
33-25	7176-7177	#	
33-26	7178-7185	virtual	
33-27	7186-7191	cores	
33-28	7192-7195	due	
33-29	7196-7198	to	
33-30	7199-7208	interrupt	
33-31	7209-7219	processing	
33-32	7220-7230	collisions	
33-33	7230-7231	.	
33-34	7232-7262	machdep.hyperthreading_allowed	
33-35	7262-7263	=	
33-36	7263-7264	"	
33-37	7264-7265	0	
33-38	7265-7266	"	
33-39	7267-7268	#	
33-40	7269-7270	(	
33-41	7270-7277	default	
33-42	7278-7279	1	
33-43	7279-7280	,	
33-44	7281-7286	allow	
33-45	7287-7292	Hyper	
33-46	7293-7302	Threading	
33-47	7303-7304	(	
33-48	7304-7306	HT	
33-49	7306-7307	)	
33-50	7307-7308	)	
33-51	7309-7310	#	
33-52	7311-7317	Enable	
33-53	7318-7321	the	
33-54	7322-7331	optimized	
33-55	7332-7339	version	
33-56	7340-7342	of	
33-57	7343-7346	the	
33-58	7347-7356	soreceive	
33-59	7356-7357	(	
33-60	7357-7358	)	
33-61	7359-7365	kernel	
33-62	7366-7372	socket	
33-63	7373-7382	interface	
33-64	7383-7386	for	
33-65	7387-7388	#	
33-66	7389-7395	stream	
33-67	7396-7397	(	
33-68	7397-7400	TCP	
33-69	7400-7401	)	
33-70	7402-7409	sockets	
33-71	7409-7410	.	
33-72	7411-7427	soreceive_stream	
33-73	7427-7428	(	
33-74	7428-7429	)	
33-75	7430-7434	only	
33-76	7435-7439	does	
33-77	7440-7443	one	
33-78	7444-7451	sockbuf	
33-79	7452-7458	unlock	
33-80	7458-7459	/	
33-81	7459-7463	lock	
33-82	7464-7465	#	
33-83	7466-7469	per	
33-84	7470-7477	receive	
33-85	7478-7489	independent	
33-86	7490-7492	of	
33-87	7493-7496	the	
33-88	7497-7503	length	
33-89	7504-7506	of	
33-90	7507-7511	data	
33-91	7512-7514	to	
33-92	7515-7517	be	
33-93	7518-7523	moved	
33-94	7524-7528	into	
33-95	7529-7532	the	
33-96	7533-7536	uio	
33-97	7537-7538	#	
33-98	7539-7547	compared	
33-99	7548-7550	to	
33-100	7551-7560	soreceive	
33-101	7560-7561	(	
33-102	7561-7562	)	
33-103	7563-7568	which	
33-104	7569-7576	unlocks	
33-105	7576-7577	/	
33-106	7577-7582	locks	
33-107	7583-7586	per	
33-108	7587-7588	*	
33-109	7588-7592	mbuf	
33-110	7592-7593	*	
33-111	7593-7594	.	
33-112	7595-7611	soreceive_stream	
33-113	7611-7612	(	
33-114	7612-7613	)	
33-115	7614-7615	#	
33-116	7616-7619	can	
33-117	7620-7633	significantly	
33-118	7634-7641	reduced	
33-119	7642-7645	CPU	
33-120	7646-7651	usage	
33-121	7652-7655	and	
33-122	7656-7660	lock	
33-123	7661-7671	contention	
33-124	7672-7676	when	
33-125	7677-7686	receiving	
33-126	7687-7691	fast	
33-127	7692-7693	#	
33-128	7694-7697	TCP	
33-129	7698-7705	streams	
33-130	7705-7706	.	

#Text=Additional gains are obtained when the receiving application,
#Text=# like a web server, is using SO_RCVLOWAT to batch up some data before a read
#Text=# (and wakeup) is done.
34-1	7707-7717	Additional	
34-2	7718-7723	gains	
34-3	7724-7727	are	
34-4	7728-7736	obtained	
34-5	7737-7741	when	
34-6	7742-7745	the	
34-7	7746-7755	receiving	
34-8	7756-7767	application	
34-9	7767-7768	,	
34-10	7769-7770	#	
34-11	7771-7775	like	
34-12	7776-7777	a	
34-13	7778-7781	web	
34-14	7782-7788	server	
34-15	7788-7789	,	
34-16	7790-7792	is	
34-17	7793-7798	using	
34-18	7799-7810	SO_RCVLOWAT	
34-19	7811-7813	to	
34-20	7814-7819	batch	
34-21	7820-7822	up	
34-22	7823-7827	some	
34-23	7828-7832	data	
34-24	7833-7839	before	
34-25	7840-7841	a	
34-26	7842-7846	read	
34-27	7847-7848	#	
34-28	7849-7850	(	
34-29	7850-7853	and	
34-30	7854-7860	wakeup	
34-31	7860-7861	)	
34-32	7862-7864	is	
34-33	7865-7869	done	
34-34	7869-7870	.	

#Text=NOTE: disable net.inet.tcp.soreceive_stream when using
#Text=# rndc to update BIND DNS records otherwise the following error will trigger,
#Text=# "rndc: recv failed: host unreachable".
#Text=net.inet.tcp.soreceive_stream="1"
#Text=# (default 0)
#Text=# NETISR: by default, FreeBSD uses a single thread to process all network
#Text=# traffic in accordance with the strong ordering requirements found in some
#Text=# protocols, such as TCP.
35-1	7871-7875	NOTE	
35-2	7875-7876	:	
35-3	7877-7884	disable	
35-4	7885-7914	net.inet.tcp.soreceive_stream	
35-5	7915-7919	when	
35-6	7920-7925	using	
35-7	7926-7927	#	
35-8	7928-7932	rndc	
35-9	7933-7935	to	
35-10	7936-7942	update	
35-11	7943-7947	BIND	
35-12	7948-7951	DNS	
35-13	7952-7959	records	
35-14	7960-7969	otherwise	
35-15	7970-7973	the	
35-16	7974-7983	following	
35-17	7984-7989	error	
35-18	7990-7994	will	
35-19	7995-8002	trigger	
35-20	8002-8003	,	
35-21	8004-8005	#	
35-22	8006-8007	"	
35-23	8007-8011	rndc	
35-24	8011-8012	:	
35-25	8013-8017	recv	
35-26	8018-8024	failed	
35-27	8024-8025	:	
35-28	8026-8030	host	
35-29	8031-8042	unreachable	
35-30	8042-8043	"	
35-31	8043-8044	.	
35-32	8045-8074	net.inet.tcp.soreceive_stream	
35-33	8074-8075	=	
35-34	8075-8076	"	
35-35	8076-8077	1	
35-36	8077-8078	"	
35-37	8079-8080	#	
35-38	8081-8082	(	
35-39	8082-8089	default	
35-40	8090-8091	0	
35-41	8091-8092	)	
35-42	8093-8094	#	
35-43	8095-8101	NETISR	
35-44	8101-8102	:	
35-45	8103-8105	by	
35-46	8106-8113	default	
35-47	8113-8114	,	
35-48	8115-8122	FreeBSD	
35-49	8123-8127	uses	
35-50	8128-8129	a	
35-51	8130-8136	single	
35-52	8137-8143	thread	
35-53	8144-8146	to	
35-54	8147-8154	process	
35-55	8155-8158	all	
35-56	8159-8166	network	
35-57	8167-8168	#	
35-58	8169-8176	traffic	
35-59	8177-8179	in	
35-60	8180-8190	accordance	
35-61	8191-8195	with	
35-62	8196-8199	the	
35-63	8200-8206	strong	
35-64	8207-8215	ordering	
35-65	8216-8228	requirements	
35-66	8229-8234	found	
35-67	8235-8237	in	
35-68	8238-8242	some	
35-69	8243-8244	#	
35-70	8245-8254	protocols	
35-71	8254-8255	,	
35-72	8256-8260	such	
35-73	8261-8263	as	
35-74	8264-8267	TCP	
35-75	8267-8268	.	

#Text=In order to increase potential packet processing
#Text=# concurrency, net.isr.maxthreads can be define as "-1" which will
#Text=# automatically enable netisr threads equal to the number of CPU cores in the
#Text=# machine.
36-1	8269-8271	In	
36-2	8272-8277	order	
36-3	8278-8280	to	
36-4	8281-8289	increase	
36-5	8290-8299	potential	
36-6	8300-8306	packet	
36-7	8307-8317	processing	
36-8	8318-8319	#	
36-9	8320-8331	concurrency	
36-10	8331-8332	,	
36-11	8333-8351	net.isr.maxthreads	
36-12	8352-8355	can	
36-13	8356-8358	be	
36-14	8359-8365	define	
36-15	8366-8368	as	
36-16	8369-8370	"	
36-17	8370-8371	-	
36-18	8371-8372	1	
36-19	8372-8373	"	
36-20	8374-8379	which	
36-21	8380-8384	will	
36-22	8385-8386	#	
36-23	8387-8400	automatically	
36-24	8401-8407	enable	
36-25	8408-8414	netisr	
36-26	8415-8422	threads	
36-27	8423-8428	equal	
36-28	8429-8431	to	
36-29	8432-8435	the	
36-30	8436-8442	number	
36-31	8443-8445	of	
36-32	8446-8449	CPU	
36-33	8450-8455	cores	
36-34	8456-8458	in	
36-35	8459-8462	the	
36-36	8463-8464	#	
36-37	8465-8472	machine	
36-38	8472-8473	.	

#Text=Now, all CPU cores can be used for packet processing and the system
#Text=# will not be limited to a single thread running on a single CPU core.
#Text=# The Intel igb(4) driver with queues autoconfigured (hw.igb.num_queues="0")
#Text=# and msix enabled (hw.igb.enable_msix=1) will create the maximum number of
#Text=# queues limited by the Intel igb hardware, msix messages and the number of
#Text=# CPUs in the system.
37-1	8474-8477	Now	
37-2	8477-8478	,	
37-3	8479-8482	all	
37-4	8483-8486	CPU	
37-5	8487-8492	cores	
37-6	8493-8496	can	
37-7	8497-8499	be	
37-8	8500-8504	used	
37-9	8505-8508	for	
37-10	8509-8515	packet	
37-11	8516-8526	processing	
37-12	8527-8530	and	
37-13	8531-8534	the	
37-14	8535-8541	system	
37-15	8542-8543	#	
37-16	8544-8548	will	
37-17	8549-8552	not	
37-18	8553-8555	be	
37-19	8556-8563	limited	
37-20	8564-8566	to	
37-21	8567-8568	a	
37-22	8569-8575	single	
37-23	8576-8582	thread	
37-24	8583-8590	running	
37-25	8591-8593	on	
37-26	8594-8595	a	
37-27	8596-8602	single	
37-28	8603-8606	CPU	
37-29	8607-8611	core	
37-30	8611-8612	.	
37-31	8613-8614	#	
37-32	8615-8618	The	
37-33	8619-8624	Intel	
37-34	8625-8628	igb	
37-35	8628-8629	(	
37-36	8629-8630	4	
37-37	8630-8631	)	
37-38	8632-8638	driver	
37-39	8639-8643	with	
37-40	8644-8650	queues	
37-41	8651-8665	autoconfigured	
37-42	8666-8667	(	
37-43	8667-8684	hw.igb.num_queues	
37-44	8684-8685	=	
37-45	8685-8686	"	
37-46	8686-8687	0	
37-47	8687-8688	"	
37-48	8688-8689	)	
37-49	8690-8691	#	
37-50	8692-8695	and	
37-51	8696-8700	msix	
37-52	8701-8708	enabled	
37-53	8709-8710	(	
37-54	8710-8728	hw.igb.enable_msix	
37-55	8728-8729	=	
37-56	8729-8730	1	
37-57	8730-8731	)	
37-58	8732-8736	will	
37-59	8737-8743	create	
37-60	8744-8747	the	
37-61	8748-8755	maximum	
37-62	8756-8762	number	
37-63	8763-8765	of	
37-64	8766-8767	#	
37-65	8768-8774	queues	
37-66	8775-8782	limited	
37-67	8783-8785	by	
37-68	8786-8789	the	
37-69	8790-8795	Intel	
37-70	8796-8799	igb	
37-71	8800-8808	hardware	
37-72	8808-8809	,	
37-73	8810-8814	msix	
37-74	8815-8823	messages	
37-75	8824-8827	and	
37-76	8828-8831	the	
37-77	8832-8838	number	
37-78	8839-8841	of	
37-79	8842-8843	#	
37-80	8844-8848	CPUs	
37-81	8849-8851	in	
37-82	8852-8855	the	
37-83	8856-8862	system	
37-84	8862-8863	.	

#Text=Once the igb interface maximum number of queues is
#Text=# defined, an interrupt handler is bound to each of those queues on their
#Text=# respective seperate CPU cores.
38-1	8864-8868	Once	
38-2	8869-8872	the	
38-3	8873-8876	igb	
38-4	8877-8886	interface	
38-5	8887-8894	maximum	
38-6	8895-8901	number	
38-7	8902-8904	of	
38-8	8905-8911	queues	
38-9	8912-8914	is	
38-10	8915-8916	#	
38-11	8917-8924	defined	
38-12	8924-8925	,	
38-13	8926-8928	an	
38-14	8929-8938	interrupt	
38-15	8939-8946	handler	
38-16	8947-8949	is	
38-17	8950-8955	bound	
38-18	8956-8958	to	
38-19	8959-8963	each	
38-20	8964-8966	of	
38-21	8967-8972	those	
38-22	8973-8979	queues	
38-23	8980-8982	on	
38-24	8983-8988	their	
38-25	8989-8990	#	
38-26	8991-9001	respective	
38-27	9002-9010	seperate	
38-28	9011-9014	CPU	
38-29	9015-9020	cores	
38-30	9020-9021	.	

#Text=The igb driver then creates a separate
#Text=# single-threaded taskqueue for each queue and each queue's interrupt handler
#Text=# sends work to its associated taskqueue when the interrupt fires.
39-1	9022-9025	The	
39-2	9026-9029	igb	
39-3	9030-9036	driver	
39-4	9037-9041	then	
39-5	9042-9049	creates	
39-6	9050-9051	a	
39-7	9052-9060	separate	
39-8	9061-9062	#	
39-9	9063-9078	single-threaded	
39-10	9079-9088	taskqueue	
39-11	9089-9092	for	
39-12	9093-9097	each	
39-13	9098-9103	queue	
39-14	9104-9107	and	
39-15	9108-9112	each	
39-16	9113-9120	queue's	
39-17	9121-9130	interrupt	
39-18	9131-9138	handler	
39-19	9139-9140	#	
39-20	9141-9146	sends	
39-21	9147-9151	work	
39-22	9152-9154	to	
39-23	9155-9158	its	
39-24	9159-9169	associated	
39-25	9170-9179	taskqueue	
39-26	9180-9184	when	
39-27	9185-9188	the	
39-28	9189-9198	interrupt	
39-29	9199-9204	fires	
39-30	9204-9205	.	

#Text=Those
#Text=# taskqueues are on the same CPU core where the ethernet packets were received
#Text=# and processed by the driver.
40-1	9206-9211	Those	
40-2	9212-9213	#	
40-3	9214-9224	taskqueues	
40-4	9225-9228	are	
40-5	9229-9231	on	
40-6	9232-9235	the	
40-7	9236-9240	same	
40-8	9241-9244	CPU	
40-9	9245-9249	core	
40-10	9250-9255	where	
40-11	9256-9259	the	
40-12	9260-9268	ethernet	
40-13	9269-9276	packets	
40-14	9277-9281	were	
40-15	9282-9290	received	
40-16	9291-9292	#	
40-17	9293-9296	and	
40-18	9297-9306	processed	
40-19	9307-9309	by	
40-20	9310-9313	the	
40-21	9314-9320	driver	
40-22	9320-9321	.	

#Text=All IP (and above) processing for that packet
#Text=# will be performed on the same CPU the queue interrupt was bound to thus
#Text=# gaining CPU affinity for that flow.
#Text=# A single net.isr workflow on a Core i5 CPU can process ~4Gbit/sec of traffic
#Text=# which is adequate for a dual 1Gbit/sec firewall interface.
41-1	9322-9325	All	
41-2	9326-9328	IP	
41-3	9329-9330	(	
41-4	9330-9333	and	
41-5	9334-9339	above	
41-6	9339-9340	)	
41-7	9341-9351	processing	
41-8	9352-9355	for	
41-9	9356-9360	that	
41-10	9361-9367	packet	
41-11	9368-9369	#	
41-12	9370-9374	will	
41-13	9375-9377	be	
41-14	9378-9387	performed	
41-15	9388-9390	on	
41-16	9391-9394	the	
41-17	9395-9399	same	
41-18	9400-9403	CPU	
41-19	9404-9407	the	
41-20	9408-9413	queue	
41-21	9414-9423	interrupt	
41-22	9424-9427	was	
41-23	9428-9433	bound	
41-24	9434-9436	to	
41-25	9437-9441	thus	
41-26	9442-9443	#	
41-27	9444-9451	gaining	
41-28	9452-9455	CPU	
41-29	9456-9464	affinity	
41-30	9465-9468	for	
41-31	9469-9473	that	
41-32	9474-9478	flow	
41-33	9478-9479	.	
41-34	9480-9481	#	
41-35	9482-9483	A	
41-36	9484-9490	single	
41-37	9491-9498	net.isr	
41-38	9499-9507	workflow	
41-39	9508-9510	on	
41-40	9511-9512	a	
41-41	9513-9517	Core	
41-42	9518-9520	i5	
41-43	9521-9524	CPU	
41-44	9525-9528	can	
41-45	9529-9536	process	
41-46	9537-9538	~	
41-47	9538-9543	4Gbit	
41-48	9543-9544	/	
41-49	9544-9547	sec	
41-50	9548-9550	of	
41-51	9551-9558	traffic	
41-52	9559-9560	#	
41-53	9561-9566	which	
41-54	9567-9569	is	
41-55	9570-9578	adequate	
41-56	9579-9582	for	
41-57	9583-9584	a	
41-58	9585-9589	dual	
41-59	9590-9595	1Gbit	
41-60	9595-9596	/	
41-61	9596-9599	sec	
41-62	9600-9608	firewall	
41-63	9609-9618	interface	
41-64	9618-9619	.	

#Text=On a system
#Text=# supporting mostly non-ordered protocols such as UDP (HTTP/3, Google's QUIC or
#Text=# NTPd) you may want to assign more queues and bind them to their own CPU core.
#Text=# For a 10GBit/sec interface, we recommend a modern CPU with at least four(4)
#Text=# real CPU cores and enable net.isr.maxthreads="-1".
42-1	9620-9622	On	
42-2	9623-9624	a	
42-3	9625-9631	system	
42-4	9632-9633	#	
42-5	9634-9644	supporting	
42-6	9645-9651	mostly	
42-7	9652-9663	non-ordered	
42-8	9664-9673	protocols	
42-9	9674-9678	such	
42-10	9679-9681	as	
42-11	9682-9685	UDP	
42-12	9686-9687	(	
42-13	9687-9691	HTTP	
42-14	9691-9692	/	
42-15	9692-9693	3	
42-16	9693-9694	,	
42-17	9695-9703	Google's	
42-18	9704-9708	QUIC	
42-19	9709-9711	or	
42-20	9712-9713	#	
42-21	9714-9718	NTPd	
42-22	9718-9719	)	
42-23	9720-9723	you	
42-24	9724-9727	may	
42-25	9728-9732	want	
42-26	9733-9735	to	
42-27	9736-9742	assign	
42-28	9743-9747	more	
42-29	9748-9754	queues	
42-30	9755-9758	and	
42-31	9759-9763	bind	
42-32	9764-9768	them	
42-33	9769-9771	to	
42-34	9772-9777	their	
42-35	9778-9781	own	
42-36	9782-9785	CPU	
42-37	9786-9790	core	
42-38	9790-9791	.	
42-39	9792-9793	#	
42-40	9794-9797	For	
42-41	9798-9799	a	
42-42	9800-9806	10GBit	
42-43	9806-9807	/	
42-44	9807-9810	sec	
42-45	9811-9820	interface	
42-46	9820-9821	,	
42-47	9822-9824	we	
42-48	9825-9834	recommend	
42-49	9835-9836	a	
42-50	9837-9843	modern	
42-51	9844-9847	CPU	
42-52	9848-9852	with	
42-53	9853-9855	at	
42-54	9856-9861	least	
42-55	9862-9866	four	
42-56	9866-9867	(	
42-57	9867-9868	4	
42-58	9868-9869	)	
42-59	9870-9871	#	
42-60	9872-9876	real	
42-61	9877-9880	CPU	
42-62	9881-9886	cores	
42-63	9887-9890	and	
42-64	9891-9897	enable	
42-65	9898-9916	net.isr.maxthreads	
42-66	9916-9917	=	
42-67	9917-9918	"	
42-68	9918-9919	-	
42-69	9919-9920	1	
42-70	9920-9921	"	
42-71	9921-9922	.	

#Text=Use "netstat -Q" to check
#Text=# bindings and work streams.
43-1	9923-9926	Use	
43-2	9927-9928	"	
43-3	9928-9935	netstat	
43-4	9936-9937	-	
43-5	9937-9938	Q	
43-6	9938-9939	"	
43-7	9940-9942	to	
43-8	9943-9948	check	
43-9	9949-9950	#	
43-10	9951-9959	bindings	
43-11	9960-9963	and	
43-12	9964-9968	work	
43-13	9969-9976	streams	
43-14	9976-9977	.	

#Text="vmstat -i" for interrupts per network queue.
#Text=# https://lists.freebsd.org/pipermail/freebsd-net/2014-April/038470.html
#Text=# Do Not enable net.isr.maxthreads on Chelsio T5/T4 cards.
#Text=net.isr.maxthreads="-1"
#Text=# (default 1, single threaded)
#Text=# NETISR: Kernel network dispatch service.
44-1	9978-9979	"	
44-2	9979-9985	vmstat	
44-3	9986-9987	-	
44-4	9987-9988	i	
44-5	9988-9989	"	
44-6	9990-9993	for	
44-7	9994-10004	interrupts	
44-8	10005-10008	per	
44-9	10009-10016	network	
44-10	10017-10022	queue	
44-11	10022-10023	.	
44-12	10024-10025	#	
44-13	10026-10031	https	
44-14	10031-10032	:	
44-15	10032-10033	/	
44-16	10033-10034	/	
44-17	10034-10051	lists.freebsd.org	
44-18	10051-10052	/	
44-19	10052-10061	pipermail	
44-20	10061-10062	/	
44-21	10062-10073	freebsd-net	
44-22	10073-10074	/	
44-23	10074-10078	2014	
44-24	10078-10079	-	
44-25	10079-10084	April	
44-26	10084-10085	/	
44-27	10085-10091	038470	
44-28	10091-10092	.	
44-29	10092-10096	html	
44-30	10097-10098	#	
44-31	10099-10101	Do	
44-32	10102-10105	Not	
44-33	10106-10112	enable	
44-34	10113-10131	net.isr.maxthreads	
44-35	10132-10134	on	
44-36	10135-10142	Chelsio	
44-37	10143-10145	T5	
44-38	10145-10146	/	
44-39	10146-10148	T4	
44-40	10149-10154	cards	
44-41	10154-10155	.	
44-42	10156-10174	net.isr.maxthreads	
44-43	10174-10175	=	
44-44	10175-10176	"	
44-45	10176-10177	-	
44-46	10177-10178	1	
44-47	10178-10179	"	
44-48	10180-10181	#	
44-49	10182-10183	(	
44-50	10183-10190	default	
44-51	10191-10192	1	
44-52	10192-10193	,	
44-53	10194-10200	single	
44-54	10201-10209	threaded	
44-55	10209-10210	)	
44-56	10211-10212	#	
44-57	10213-10219	NETISR	
44-58	10219-10220	:	
44-59	10221-10227	Kernel	
44-60	10228-10235	network	
44-61	10236-10244	dispatch	
44-62	10245-10252	service	
44-63	10252-10253	.	

#Text=Enforced ordering will limit the
#Text=# opportunity for concurrency, but maintain the strong ordering requirement
#Text=# found in protocols such as TCP.
45-1	10254-10262	Enforced	
45-2	10263-10271	ordering	
45-3	10272-10276	will	
45-4	10277-10282	limit	
45-5	10283-10286	the	
45-6	10287-10288	#	
45-7	10289-10300	opportunity	
45-8	10301-10304	for	
45-9	10305-10316	concurrency	
45-10	10316-10317	,	
45-11	10318-10321	but	
45-12	10322-10330	maintain	
45-13	10331-10334	the	
45-14	10335-10341	strong	
45-15	10342-10350	ordering	
45-16	10351-10362	requirement	
45-17	10363-10364	#	
45-18	10365-10370	found	
45-19	10371-10373	in	
45-20	10374-10383	protocols	
45-21	10384-10388	such	
45-22	10389-10391	as	
45-23	10392-10395	TCP	
45-24	10395-10396	.	

#Text=Of related concern is CPU affinity; it is
#Text=# desirable to process all data associated with a particular stream on the same
#Text=# CPU core over time in order to avoid acquiring locks associated with the
#Text=# connection on different CPUs, keep connection data in one L1/L2 cache, and to
#Text=# generally encourage associated user threads to live on the same CPU as the
#Text=# stream.
46-1	10397-10399	Of	
46-2	10400-10407	related	
46-3	10408-10415	concern	
46-4	10416-10418	is	
46-5	10419-10422	CPU	
46-6	10423-10431	affinity	
46-7	10431-10432	;	
46-8	10433-10435	it	
46-9	10436-10438	is	
46-10	10439-10440	#	
46-11	10441-10450	desirable	
46-12	10451-10453	to	
46-13	10454-10461	process	
46-14	10462-10465	all	
46-15	10466-10470	data	
46-16	10471-10481	associated	
46-17	10482-10486	with	
46-18	10487-10488	a	
46-19	10489-10499	particular	
46-20	10500-10506	stream	
46-21	10507-10509	on	
46-22	10510-10513	the	
46-23	10514-10518	same	
46-24	10519-10520	#	
46-25	10521-10524	CPU	
46-26	10525-10529	core	
46-27	10530-10534	over	
46-28	10535-10539	time	
46-29	10540-10542	in	
46-30	10543-10548	order	
46-31	10549-10551	to	
46-32	10552-10557	avoid	
46-33	10558-10567	acquiring	
46-34	10568-10573	locks	
46-35	10574-10584	associated	
46-36	10585-10589	with	
46-37	10590-10593	the	
46-38	10594-10595	#	
46-39	10596-10606	connection	
46-40	10607-10609	on	
46-41	10610-10619	different	
46-42	10620-10624	CPUs	
46-43	10624-10625	,	
46-44	10626-10630	keep	
46-45	10631-10641	connection	
46-46	10642-10646	data	
46-47	10647-10649	in	
46-48	10650-10653	one	
46-49	10654-10656	L1	
46-50	10656-10657	/	
46-51	10657-10659	L2	
46-52	10660-10665	cache	
46-53	10665-10666	,	
46-54	10667-10670	and	
46-55	10671-10673	to	
46-56	10674-10675	#	
46-57	10676-10685	generally	
46-58	10686-10695	encourage	
46-59	10696-10706	associated	
46-60	10707-10711	user	
46-61	10712-10719	threads	
46-62	10720-10722	to	
46-63	10723-10727	live	
46-64	10728-10730	on	
46-65	10731-10734	the	
46-66	10735-10739	same	
46-67	10740-10743	CPU	
46-68	10744-10746	as	
46-69	10747-10750	the	
46-70	10751-10752	#	
46-71	10753-10759	stream	
46-72	10759-10760	.	

#Text=It's also desirable to avoid lock migration and contention where
#Text=# locks are associated with more than one flow.
#Text=# By default, FreeBSD uses a single net.isr thread (net.isr.maxthreads="1") for
#Text=# strict protocol ordering and we can bind that thread to CPU0 to take
#Text=# advantage of CPU affinity.
47-1	10761-10765	It's	
47-2	10766-10770	also	
47-3	10771-10780	desirable	
47-4	10781-10783	to	
47-5	10784-10789	avoid	
47-6	10790-10794	lock	
47-7	10795-10804	migration	
47-8	10805-10808	and	
47-9	10809-10819	contention	
47-10	10820-10825	where	
47-11	10826-10827	#	
47-12	10828-10833	locks	
47-13	10834-10837	are	
47-14	10838-10848	associated	
47-15	10849-10853	with	
47-16	10854-10858	more	
47-17	10859-10863	than	
47-18	10864-10867	one	
47-19	10868-10872	flow	
47-20	10872-10873	.	
47-21	10874-10875	#	
47-22	10876-10878	By	
47-23	10879-10886	default	
47-24	10886-10887	,	
47-25	10888-10895	FreeBSD	
47-26	10896-10900	uses	
47-27	10901-10902	a	
47-28	10903-10909	single	
47-29	10910-10917	net.isr	
47-30	10918-10924	thread	
47-31	10925-10926	(	
47-32	10926-10944	net.isr.maxthreads	
47-33	10944-10945	=	
47-34	10945-10946	"	
47-35	10946-10947	1	
47-36	10947-10948	"	
47-37	10948-10949	)	
47-38	10950-10953	for	
47-39	10954-10955	#	
47-40	10956-10962	strict	
47-41	10963-10971	protocol	
47-42	10972-10980	ordering	
47-43	10981-10984	and	
47-44	10985-10987	we	
47-45	10988-10991	can	
47-46	10992-10996	bind	
47-47	10997-11001	that	
47-48	11002-11008	thread	
47-49	11009-11011	to	
47-50	11012-11016	CPU0	
47-51	11017-11019	to	
47-52	11020-11024	take	
47-53	11025-11026	#	
47-54	11027-11036	advantage	
47-55	11037-11039	of	
47-56	11040-11043	CPU	
47-57	11044-11052	affinity	
47-58	11052-11053	.	

#Text=When net.isr.maxthreads="-1" each thread will be
#Text=# bound to its own CPU core.
48-1	11054-11058	When	
48-2	11059-11077	net.isr.maxthreads	
48-3	11077-11078	=	
48-4	11078-11079	"	
48-5	11079-11080	-	
48-6	11080-11081	1	
48-7	11081-11082	"	
48-8	11083-11087	each	
48-9	11088-11094	thread	
48-10	11095-11099	will	
48-11	11100-11102	be	
48-12	11103-11104	#	
48-13	11105-11110	bound	
48-14	11111-11113	to	
48-15	11114-11117	its	
48-16	11118-11121	own	
48-17	11122-11125	CPU	
48-18	11126-11130	core	
48-19	11130-11131	.	

#Text=Use "netstat -Q" to check bindings and
#Text=# workstreams. https://blog.cloudflare.com/how-to-receive-a-million-packets/
#Text=# Do Not enable net.isr.bindthreads on Chelsio T5/T4 cards.
#Text=net.isr.bindthreads="1"
#Text=# (default 0, runs randomly on any one cpu core)
#Text=# PF: Increase the size of the pf(4) source nodes hashtable from 32k to 1M.
49-1	11132-11135	Use	
49-2	11136-11137	"	
49-3	11137-11144	netstat	
49-4	11145-11146	-	
49-5	11146-11147	Q	
49-6	11147-11148	"	
49-7	11149-11151	to	
49-8	11152-11157	check	
49-9	11158-11166	bindings	
49-10	11167-11170	and	
49-11	11171-11172	#	
49-12	11173-11184	workstreams	
49-13	11184-11185	.	
49-14	11186-11191	https	
49-15	11191-11192	:	
49-16	11192-11193	/	
49-17	11193-11194	/	
49-18	11194-11213	blog.cloudflare.com	
49-19	11213-11214	/	
49-20	11214-11246	how-to-receive-a-million-packets	
49-21	11246-11247	/	
49-22	11248-11249	#	
49-23	11250-11252	Do	
49-24	11253-11256	Not	
49-25	11257-11263	enable	
49-26	11264-11283	net.isr.bindthreads	
49-27	11284-11286	on	
49-28	11287-11294	Chelsio	
49-29	11295-11297	T5	
49-30	11297-11298	/	
49-31	11298-11300	T4	
49-32	11301-11306	cards	
49-33	11306-11307	.	
49-34	11308-11327	net.isr.bindthreads	
49-35	11327-11328	=	
49-36	11328-11329	"	
49-37	11329-11330	1	
49-38	11330-11331	"	
49-39	11332-11333	#	
49-40	11334-11335	(	
49-41	11335-11342	default	
49-42	11343-11344	0	
49-43	11344-11345	,	
49-44	11346-11350	runs	
49-45	11351-11359	randomly	
49-46	11360-11362	on	
49-47	11363-11366	any	
49-48	11367-11370	one	
49-49	11371-11374	cpu	
49-50	11375-11379	core	
49-51	11379-11380	)	
49-52	11381-11382	#	
49-53	11383-11385	PF	
49-54	11385-11386	:	
49-55	11387-11395	Increase	
49-56	11396-11399	the	
49-57	11400-11404	size	
49-58	11405-11407	of	
49-59	11408-11411	the	
49-60	11412-11414	pf	
49-61	11414-11415	(	
49-62	11415-11416	4	
49-63	11416-11417	)	
49-64	11418-11424	source	
49-65	11425-11430	nodes	
49-66	11431-11440	hashtable	
49-67	11441-11445	from	
49-68	11446-11449	32k	
49-69	11450-11452	to	
49-70	11453-11455	1M	
49-71	11455-11456	.	

#Text=As
#Text=# the amount of remote source addresses starts to reach 100K, Pf will begin to
#Text=# be the limiting factor with regards to packet throughput on the network
#Text=# interfaces.
50-1	11457-11459	As	
50-2	11460-11461	#	
50-3	11462-11465	the	
50-4	11466-11472	amount	
50-5	11473-11475	of	
50-6	11476-11482	remote	
50-7	11483-11489	source	
50-8	11490-11499	addresses	
50-9	11500-11506	starts	
50-10	11507-11509	to	
50-11	11510-11515	reach	
50-12	11516-11520	100K	
50-13	11520-11521	,	
50-14	11522-11524	Pf	
50-15	11525-11529	will	
50-16	11530-11535	begin	
50-17	11536-11538	to	
50-18	11539-11540	#	
50-19	11541-11543	be	
50-20	11544-11547	the	
50-21	11548-11556	limiting	
50-22	11557-11563	factor	
50-23	11564-11568	with	
50-24	11569-11576	regards	
50-25	11577-11579	to	
50-26	11580-11586	packet	
50-27	11587-11597	throughput	
50-28	11598-11600	on	
50-29	11601-11604	the	
50-30	11605-11612	network	
50-31	11613-11614	#	
50-32	11615-11625	interfaces	
50-33	11625-11626	.	

#Text=By increasing the hashtable to 1M, Pf can sustain upwards of 80%
#Text=# of the maximum packets per second throughput with more than a million source
#Text=# addresses.
51-1	11627-11629	By	
51-2	11630-11640	increasing	
51-3	11641-11644	the	
51-4	11645-11654	hashtable	
51-5	11655-11657	to	
51-6	11658-11660	1M	
51-7	11660-11661	,	
51-8	11662-11664	Pf	
51-9	11665-11668	can	
51-10	11669-11676	sustain	
51-11	11677-11684	upwards	
51-12	11685-11687	of	
51-13	11688-11691	80%	
51-14	11692-11693	#	
51-15	11694-11696	of	
51-16	11697-11700	the	
51-17	11701-11708	maximum	
51-18	11709-11716	packets	
51-19	11717-11720	per	
51-20	11721-11727	second	
51-21	11728-11738	throughput	
51-22	11739-11743	with	
51-23	11744-11748	more	
51-24	11749-11753	than	
51-25	11754-11755	a	
51-26	11756-11763	million	
51-27	11764-11770	source	
51-28	11771-11772	#	
51-29	11773-11782	addresses	
51-30	11782-11783	.	

#Text=Also set "src-nodes 1000000" in /etc/pf.conf .
52-1	11784-11788	Also	
52-2	11789-11792	set	
52-3	11793-11794	"	
52-4	11794-11803	src-nodes	
52-5	11804-11811	1000000	
52-6	11811-11812	"	
52-7	11813-11815	in	
52-8	11816-11817	/	
52-9	11817-11820	etc	
52-10	11820-11821	/	
52-11	11821-11828	pf.conf	
52-12	11829-11830	.	

#Text=The hashtable
#Text=# increase is necessary for HTTP/3 UDP traffic due to the sheer number of
#Text=# malicious UDP packets creating states.
#Text=# https://www.bsdcan.org/2016/schedule/attachments/365_Improving%20PF
#Text=net.pf.source_nodes_hashsize="1048576"
#Text=# (default 32768)
#Text=###
#Text=######
#Text=######### OFF BELOW HERE #########
#Text=# Other options not used, but included for future reference.
#Text=# Disable UDP/IPv4 and UDP/IPv6 checksum offloading to network card
#Text=#hw.hn.enable_udp4cs="0"
#Text=# (default 1, enabled)
#Text=#hw.hn.enable_udp6cs="0"
#Text=# (default 1, enabled)
#Text=#hw.hn.trust_hostudp="0"
#Text=# (default 1, enabled)
#Text=# H-TCP Congestion Control for a more aggressive increase in sending speed on
#Text=# higher latency, high bandwidth networks with minimal packet loss.
53-1	11831-11834	The	
53-2	11835-11844	hashtable	
53-3	11845-11846	#	
53-4	11847-11855	increase	
53-5	11856-11858	is	
53-6	11859-11868	necessary	
53-7	11869-11872	for	
53-8	11873-11877	HTTP	
53-9	11877-11878	/	
53-10	11878-11879	3	
53-11	11880-11883	UDP	
53-12	11884-11891	traffic	
53-13	11892-11895	due	
53-14	11896-11898	to	
53-15	11899-11902	the	
53-16	11903-11908	sheer	
53-17	11909-11915	number	
53-18	11916-11918	of	
53-19	11919-11920	#	
53-20	11921-11930	malicious	
53-21	11931-11934	UDP	
53-22	11935-11942	packets	
53-23	11943-11951	creating	
53-24	11952-11958	states	
53-25	11958-11959	.	
53-26	11960-11961	#	
53-27	11962-11967	https	
53-28	11967-11968	:	
53-29	11968-11969	/	
53-30	11969-11970	/	
53-31	11970-11984	www.bsdcan.org	
53-32	11984-11985	/	
53-33	11985-11989	2016	
53-34	11989-11990	/	
53-35	11990-11998	schedule	
53-36	11998-11999	/	
53-37	11999-12010	attachments	
53-38	12010-12011	/	
53-39	12011-12014	365	
53-40	12014-12015	_	
53-41	12015-12024	Improving	
53-42	12024-12025	%	
53-43	12025-12029	20PF	
53-44	12030-12058	net.pf.source_nodes_hashsize	
53-45	12058-12059	=	
53-46	12059-12060	"	
53-47	12060-12067	1048576	
53-48	12067-12068	"	
53-49	12069-12070	#	
53-50	12071-12072	(	
53-51	12072-12079	default	
53-52	12080-12085	32768	
53-53	12085-12086	)	
53-54	12087-12088	#	
53-55	12088-12089	#	
53-56	12089-12090	#	
53-57	12091-12092	#	
53-58	12092-12093	#	
53-59	12093-12094	#	
53-60	12094-12095	#	
53-61	12095-12096	#	
53-62	12096-12097	#	
53-63	12098-12099	#	
53-64	12099-12100	#	
53-65	12100-12101	#	
53-66	12101-12102	#	
53-67	12102-12103	#	
53-68	12103-12104	#	
53-69	12104-12105	#	
53-70	12105-12106	#	
53-71	12106-12107	#	
53-72	12108-12111	OFF	
53-73	12112-12117	BELOW	
53-74	12118-12122	HERE	
53-75	12123-12124	#	
53-76	12124-12125	#	
53-77	12125-12126	#	
53-78	12126-12127	#	
53-79	12127-12128	#	
53-80	12128-12129	#	
53-81	12129-12130	#	
53-82	12130-12131	#	
53-83	12131-12132	#	
53-84	12133-12134	#	
53-85	12135-12140	Other	
53-86	12141-12148	options	
53-87	12149-12152	not	
53-88	12153-12157	used	
53-89	12157-12158	,	
53-90	12159-12162	but	
53-91	12163-12171	included	
53-92	12172-12175	for	
53-93	12176-12182	future	
53-94	12183-12192	reference	
53-95	12192-12193	.	
53-96	12194-12195	#	
53-97	12196-12203	Disable	
53-98	12204-12207	UDP	
53-99	12207-12208	/	
53-100	12208-12212	IPv4	
53-101	12213-12216	and	
53-102	12217-12220	UDP	
53-103	12220-12221	/	
53-104	12221-12225	IPv6	
53-105	12226-12234	checksum	
53-106	12235-12245	offloading	
53-107	12246-12248	to	
53-108	12249-12256	network	
53-109	12257-12261	card	
53-110	12262-12263	#	
53-111	12263-12282	hw.hn.enable_udp4cs	
53-112	12282-12283	=	
53-113	12283-12284	"	
53-114	12284-12285	0	
53-115	12285-12286	"	
53-116	12287-12288	#	
53-117	12289-12290	(	
53-118	12290-12297	default	
53-119	12298-12299	1	
53-120	12299-12300	,	
53-121	12301-12308	enabled	
53-122	12308-12309	)	
53-123	12310-12311	#	
53-124	12311-12330	hw.hn.enable_udp6cs	
53-125	12330-12331	=	
53-126	12331-12332	"	
53-127	12332-12333	0	
53-128	12333-12334	"	
53-129	12335-12336	#	
53-130	12337-12338	(	
53-131	12338-12345	default	
53-132	12346-12347	1	
53-133	12347-12348	,	
53-134	12349-12356	enabled	
53-135	12356-12357	)	
53-136	12358-12359	#	
53-137	12359-12378	hw.hn.trust_hostudp	
53-138	12378-12379	=	
53-139	12379-12380	"	
53-140	12380-12381	0	
53-141	12381-12382	"	
53-142	12383-12384	#	
53-143	12385-12386	(	
53-144	12386-12393	default	
53-145	12394-12395	1	
53-146	12395-12396	,	
53-147	12397-12404	enabled	
53-148	12404-12405	)	
53-149	12406-12407	#	
53-150	12408-12413	H-TCP	
53-151	12414-12424	Congestion	
53-152	12425-12432	Control	
53-153	12433-12436	for	
53-154	12437-12438	a	
53-155	12439-12443	more	
53-156	12444-12454	aggressive	
53-157	12455-12463	increase	
53-158	12464-12466	in	
53-159	12467-12474	sending	
53-160	12475-12480	speed	
53-161	12481-12483	on	
53-162	12484-12485	#	
53-163	12486-12492	higher	
53-164	12493-12500	latency	
53-165	12500-12501	,	
53-166	12502-12506	high	
53-167	12507-12516	bandwidth	
53-168	12517-12525	networks	
53-169	12526-12530	with	
53-170	12531-12538	minimal	
53-171	12539-12545	packet	
53-172	12546-12550	loss	
53-173	12550-12551	.	

#Text=#cc_htcp_load="YES"
#Text=# RACK TCP Stack: Netflix's TCP Recent ACKnowledgment (Recent ACK) and Tail
#Text=# Loss Probe (TLP) for improved Retransmit TimeOut response.
54-1	12552-12553	#	
54-2	12553-12565	cc_htcp_load	
54-3	12565-12566	=	
54-4	12566-12567	"	
54-5	12567-12570	YES	
54-6	12570-12571	"	
54-7	12572-12573	#	
54-8	12574-12578	RACK	
54-9	12579-12582	TCP	
54-10	12583-12588	Stack	
54-11	12588-12589	:	
54-12	12590-12599	Netflix's	
54-13	12600-12603	TCP	
54-14	12604-12610	Recent	
54-15	12611-12625	ACKnowledgment	
54-16	12626-12627	(	
54-17	12627-12633	Recent	
54-18	12634-12637	ACK	
54-19	12637-12638	)	
54-20	12639-12642	and	
54-21	12643-12647	Tail	
54-22	12648-12649	#	
54-23	12650-12654	Loss	
54-24	12655-12660	Probe	
54-25	12661-12662	(	
54-26	12662-12665	TLP	
54-27	12665-12666	)	
54-28	12667-12670	for	
54-29	12671-12679	improved	
54-30	12680-12690	Retransmit	
54-31	12691-12698	TimeOut	
54-32	12699-12707	response	
54-33	12707-12708	.	

#Text=#tcp_rack_load="YES"
#Text=# CUBIC Congestion Control improves TCP-friendliness and RTT-fairness.
55-1	12709-12710	#	
55-2	12710-12723	tcp_rack_load	
55-3	12723-12724	=	
55-4	12724-12725	"	
55-5	12725-12728	YES	
55-6	12728-12729	"	
55-7	12730-12731	#	
55-8	12732-12737	CUBIC	
55-9	12738-12748	Congestion	
55-10	12749-12756	Control	
55-11	12757-12765	improves	
55-12	12766-12782	TCP-friendliness	
55-13	12783-12786	and	
55-14	12787-12799	RTT-fairness	
55-15	12799-12800	.	

#Text=The
#Text=# window growth function of CUBIC is governed by a cubic function in terms of
#Text=# the elapsed time since the last loss event.
#Text=# https://labs.ripe.net/Members/gih/bbr-tcp
#Text=#cc_cubic_load="YES"
#Text=# CAIA Delay-Gradient (CDG) is a temporal, delay-based TCP congestion control
#Text=#cc_cdg_load="YES"
#Text=# Maximum Send Queue Length: common recommendations are to set the interface
#Text=# buffer size to the number of packets the interface can transmit (send) in 50
#Text=# milliseconds _OR_ 256 packets times the number of interfaces in the machine;
#Text=# whichever value is greater.
56-1	12801-12804	The	
56-2	12805-12806	#	
56-3	12807-12813	window	
56-4	12814-12820	growth	
56-5	12821-12829	function	
56-6	12830-12832	of	
56-7	12833-12838	CUBIC	
56-8	12839-12841	is	
56-9	12842-12850	governed	
56-10	12851-12853	by	
56-11	12854-12855	a	
56-12	12856-12861	cubic	
56-13	12862-12870	function	
56-14	12871-12873	in	
56-15	12874-12879	terms	
56-16	12880-12882	of	
56-17	12883-12884	#	
56-18	12885-12888	the	
56-19	12889-12896	elapsed	
56-20	12897-12901	time	
56-21	12902-12907	since	
56-22	12908-12911	the	
56-23	12912-12916	last	
56-24	12917-12921	loss	
56-25	12922-12927	event	
56-26	12927-12928	.	
56-27	12929-12930	#	
56-28	12931-12936	https	
56-29	12936-12937	:	
56-30	12937-12938	/	
56-31	12938-12939	/	
56-32	12939-12952	labs.ripe.net	
56-33	12952-12953	/	
56-34	12953-12960	Members	
56-35	12960-12961	/	
56-36	12961-12964	gih	
56-37	12964-12965	/	
56-38	12965-12972	bbr-tcp	
56-39	12973-12974	#	
56-40	12974-12987	cc_cubic_load	
56-41	12987-12988	=	
56-42	12988-12989	"	
56-43	12989-12992	YES	
56-44	12992-12993	"	
56-45	12994-12995	#	
56-46	12996-13000	CAIA	
56-47	13001-13015	Delay-Gradient	
56-48	13016-13017	(	
56-49	13017-13020	CDG	
56-50	13020-13021	)	
56-51	13022-13024	is	
56-52	13025-13026	a	
56-53	13027-13035	temporal	
56-54	13035-13036	,	
56-55	13037-13048	delay-based	
56-56	13049-13052	TCP	
56-57	13053-13063	congestion	
56-58	13064-13071	control	
56-59	13072-13073	#	
56-60	13073-13084	cc_cdg_load	
56-61	13084-13085	=	
56-62	13085-13086	"	
56-63	13086-13089	YES	
56-64	13089-13090	"	
56-65	13091-13092	#	
56-66	13093-13100	Maximum	
56-67	13101-13105	Send	
56-68	13106-13111	Queue	
56-69	13112-13118	Length	
56-70	13118-13119	:	
56-71	13120-13126	common	
56-72	13127-13142	recommendations	
56-73	13143-13146	are	
56-74	13147-13149	to	
56-75	13150-13153	set	
56-76	13154-13157	the	
56-77	13158-13167	interface	
56-78	13168-13169	#	
56-79	13170-13176	buffer	
56-80	13177-13181	size	
56-81	13182-13184	to	
56-82	13185-13188	the	
56-83	13189-13195	number	
56-84	13196-13198	of	
56-85	13199-13206	packets	
56-86	13207-13210	the	
56-87	13211-13220	interface	
56-88	13221-13224	can	
56-89	13225-13233	transmit	
56-90	13234-13235	(	
56-91	13235-13239	send	
56-92	13239-13240	)	
56-93	13241-13243	in	
56-94	13244-13246	50	
56-95	13247-13248	#	
56-96	13249-13261	milliseconds	
56-97	13262-13263	_	
56-98	13263-13265	OR	
56-99	13265-13266	_	
56-100	13267-13270	256	
56-101	13271-13278	packets	
56-102	13279-13284	times	
56-103	13285-13288	the	
56-104	13289-13295	number	
56-105	13296-13298	of	
56-106	13299-13309	interfaces	
56-107	13310-13312	in	
56-108	13313-13316	the	
56-109	13317-13324	machine	
56-110	13324-13325	;	
56-111	13326-13327	#	
56-112	13328-13337	whichever	
56-113	13338-13343	value	
56-114	13344-13346	is	
56-115	13347-13354	greater	
56-116	13354-13355	.	

#Text=To calculate a size of a 50 millisecond buffer
#Text=# for a 60 megabit network take the bandwidth in megabits divided by 8 bits
#Text=# divided by the MTU times 50 millisecond times 1000, 60/8/1460*50*1000=256.84
#Text=# packets in 50 milliseconds.
57-1	13356-13358	To	
57-2	13359-13368	calculate	
57-3	13369-13370	a	
57-4	13371-13375	size	
57-5	13376-13378	of	
57-6	13379-13380	a	
57-7	13381-13383	50	
57-8	13384-13395	millisecond	
57-9	13396-13402	buffer	
57-10	13403-13404	#	
57-11	13405-13408	for	
57-12	13409-13410	a	
57-13	13411-13413	60	
57-14	13414-13421	megabit	
57-15	13422-13429	network	
57-16	13430-13434	take	
57-17	13435-13438	the	
57-18	13439-13448	bandwidth	
57-19	13449-13451	in	
57-20	13452-13460	megabits	
57-21	13461-13468	divided	
57-22	13469-13471	by	
57-23	13472-13473	8	
57-24	13474-13478	bits	
57-25	13479-13480	#	
57-26	13481-13488	divided	
57-27	13489-13491	by	
57-28	13492-13495	the	
57-29	13496-13499	MTU	
57-30	13500-13505	times	
57-31	13506-13508	50	
57-32	13509-13520	millisecond	
57-33	13521-13526	times	
57-34	13527-13531	1000	
57-35	13531-13532	,	
57-36	13533-13535	60	
57-37	13535-13536	/	
57-38	13536-13537	8	
57-39	13537-13538	/	
57-40	13538-13542	1460	
57-41	13542-13543	*	
57-42	13543-13545	50	
57-43	13545-13546	*	
57-44	13546-13550	1000	
57-45	13550-13551	=	
57-46	13551-13557	256.84	
57-47	13558-13559	#	
57-48	13560-13567	packets	
57-49	13568-13570	in	
57-50	13571-13573	50	
57-51	13574-13586	milliseconds	
57-52	13586-13587	.	

#Text=OR, if the box has two(2) interfaces take 256
#Text=# packets times two(2) NICs to equal 512 packets.
#Text=512 is greater then 256.84
#Text=# so set to 512.
#Text=# Our preference, if and only if you regularly reach your maximum upload
#Text=# bandwidth, is to define the interface queue length as two(2) times the value
#Text=# set in the interface transmit descriptor ring, "hw.igb.txd".
58-1	13588-13590	OR	
58-2	13590-13591	,	
58-3	13592-13594	if	
58-4	13595-13598	the	
58-5	13599-13602	box	
58-6	13603-13606	has	
58-7	13607-13610	two	
58-8	13610-13611	(	
58-9	13611-13612	2	
58-10	13612-13613	)	
58-11	13614-13624	interfaces	
58-12	13625-13629	take	
58-13	13630-13633	256	
58-14	13634-13635	#	
58-15	13636-13643	packets	
58-16	13644-13649	times	
58-17	13650-13653	two	
58-18	13653-13654	(	
58-19	13654-13655	2	
58-20	13655-13656	)	
58-21	13657-13661	NICs	
58-22	13662-13664	to	
58-23	13665-13670	equal	
58-24	13671-13674	512	
58-25	13675-13682	packets	
58-26	13682-13683	.	
58-27	13684-13687	512	
58-28	13688-13690	is	
58-29	13691-13698	greater	
58-30	13699-13703	then	
58-31	13704-13710	256.84	
58-32	13711-13712	#	
58-33	13713-13715	so	
58-34	13716-13719	set	
58-35	13720-13722	to	
58-36	13723-13726	512	
58-37	13726-13727	.	
58-38	13728-13729	#	
58-39	13730-13733	Our	
58-40	13734-13744	preference	
58-41	13744-13745	,	
58-42	13746-13748	if	
58-43	13749-13752	and	
58-44	13753-13757	only	
58-45	13758-13760	if	
58-46	13761-13764	you	
58-47	13765-13774	regularly	
58-48	13775-13780	reach	
58-49	13781-13785	your	
58-50	13786-13793	maximum	
58-51	13794-13800	upload	
58-52	13801-13802	#	
58-53	13803-13812	bandwidth	
58-54	13812-13813	,	
58-55	13814-13816	is	
58-56	13817-13819	to	
58-57	13820-13826	define	
58-58	13827-13830	the	
58-59	13831-13840	interface	
58-60	13841-13846	queue	
58-61	13847-13853	length	
58-62	13854-13856	as	
58-63	13857-13860	two	
58-64	13860-13861	(	
58-65	13861-13862	2	
58-66	13862-13863	)	
58-67	13864-13869	times	
58-68	13870-13873	the	
58-69	13874-13879	value	
58-70	13880-13881	#	
58-71	13882-13885	set	
58-72	13886-13888	in	
58-73	13889-13892	the	
58-74	13893-13902	interface	
58-75	13903-13911	transmit	
58-76	13912-13922	descriptor	
58-77	13923-13927	ring	
58-78	13927-13928	,	
58-79	13929-13930	"	
58-80	13930-13940	hw.igb.txd	
58-81	13940-13941	"	
58-82	13941-13942	.	

#Text=If
#Text=# hw.igb.txd="1024" then set the net.link.ifqmaxlen="2048".
#Text=# An indirect result of increasing the interface queue is the buffer acts like
#Text=# a large TCP initial congestion window (init_cwnd) by allowing a network stack
#Text=# to burst packets at the start of a connection.
59-1	13943-13945	If	
59-2	13946-13947	#	
59-3	13948-13958	hw.igb.txd	
59-4	13958-13959	=	
59-5	13959-13960	"	
59-6	13960-13964	1024	
59-7	13964-13965	"	
59-8	13966-13970	then	
59-9	13971-13974	set	
59-10	13975-13978	the	
59-11	13979-13997	net.link.ifqmaxlen	
59-12	13997-13998	=	
59-13	13998-13999	"	
59-14	13999-14003	2048	
59-15	14003-14004	"	
59-16	14004-14005	.	
59-17	14006-14007	#	
59-18	14008-14010	An	
59-19	14011-14019	indirect	
59-20	14020-14026	result	
59-21	14027-14029	of	
59-22	14030-14040	increasing	
59-23	14041-14044	the	
59-24	14045-14054	interface	
59-25	14055-14060	queue	
59-26	14061-14063	is	
59-27	14064-14067	the	
59-28	14068-14074	buffer	
59-29	14075-14079	acts	
59-30	14080-14084	like	
59-31	14085-14086	#	
59-32	14087-14088	a	
59-33	14089-14094	large	
59-34	14095-14098	TCP	
59-35	14099-14106	initial	
59-36	14107-14117	congestion	
59-37	14118-14124	window	
59-38	14125-14126	(	
59-39	14126-14135	init_cwnd	
59-40	14135-14136	)	
59-41	14137-14139	by	
59-42	14140-14148	allowing	
59-43	14149-14150	a	
59-44	14151-14158	network	
59-45	14159-14164	stack	
59-46	14165-14166	#	
59-47	14167-14169	to	
59-48	14170-14175	burst	
59-49	14176-14183	packets	
59-50	14184-14186	at	
59-51	14187-14190	the	
59-52	14191-14196	start	
59-53	14197-14199	of	
59-54	14200-14201	a	
59-55	14202-14212	connection	
59-56	14212-14213	.	

#Text=Do not to set to zero(0) or
#Text=# the network will stop working due to "no network buffers" available.
60-1	14214-14216	Do	
60-2	14217-14220	not	
60-3	14221-14223	to	
60-4	14224-14227	set	
60-5	14228-14230	to	
60-6	14231-14235	zero	
60-7	14235-14236	(	
60-8	14236-14237	0	
60-9	14237-14238	)	
60-10	14239-14241	or	
60-11	14242-14243	#	
60-12	14244-14247	the	
60-13	14248-14255	network	
60-14	14256-14260	will	
60-15	14261-14265	stop	
60-16	14266-14273	working	
60-17	14274-14277	due	
60-18	14278-14280	to	
60-19	14281-14282	"	
60-20	14282-14284	no	
60-21	14285-14292	network	
60-22	14293-14300	buffers	
60-23	14300-14301	"	
60-24	14302-14311	available	
60-25	14311-14312	.	

#Text=Do not
#Text=# set the interface buffer ludicrously large to avoid buffer bloat.
61-1	14313-14315	Do	
61-2	14316-14319	not	
61-3	14320-14321	#	
61-4	14322-14325	set	
61-5	14326-14329	the	
61-6	14330-14339	interface	
61-7	14340-14346	buffer	
61-8	14347-14358	ludicrously	
61-9	14359-14364	large	
61-10	14365-14367	to	
61-11	14368-14373	avoid	
61-12	14374-14380	buffer	
61-13	14381-14386	bloat	
61-14	14386-14387	.	

#Text=#net.link.ifqmaxlen="2048"
#Text=# (default 50)
#Text=# accf accept filters are used so the server will not have to context switch
#Text=# several times before performing the initial parsing of the request.
62-1	14388-14389	#	
62-2	14389-14407	net.link.ifqmaxlen	
62-3	14407-14408	=	
62-4	14408-14409	"	
62-5	14409-14413	2048	
62-6	14413-14414	"	
62-7	14415-14416	#	
62-8	14417-14418	(	
62-9	14418-14425	default	
62-10	14426-14428	50	
62-11	14428-14429	)	
62-12	14430-14431	#	
62-13	14432-14436	accf	
62-14	14437-14443	accept	
62-15	14444-14451	filters	
62-16	14452-14455	are	
62-17	14456-14460	used	
62-18	14461-14463	so	
62-19	14464-14467	the	
62-20	14468-14474	server	
62-21	14475-14479	will	
62-22	14480-14483	not	
62-23	14484-14488	have	
62-24	14489-14491	to	
62-25	14492-14499	context	
62-26	14500-14506	switch	
62-27	14507-14508	#	
62-28	14509-14516	several	
62-29	14517-14522	times	
62-30	14523-14529	before	
62-31	14530-14540	performing	
62-32	14541-14544	the	
62-33	14545-14552	initial	
62-34	14553-14560	parsing	
62-35	14561-14563	of	
62-36	14564-14567	the	
62-37	14568-14575	request	
62-38	14575-14576	.	

#Text=This
#Text=# could decrease server load by reducing the amount of CPU time to handle
#Text=# incoming requests.
#Text=buffer incoming connections until complete HTTP requests
#Text=# arrive (nginx apache) for nginx http add, "listen 127.0.0.1:80
#Text=# accept_filter=httpready;"
#Text=#accf_http_load="YES"
#Text=# A FreeBSD accept_data filter can be used to protect https HTTP/2 (TLS) web
#Text=# servers, proxies, and accelerators.
63-1	14577-14581	This	
63-2	14582-14583	#	
63-3	14584-14589	could	
63-4	14590-14598	decrease	
63-5	14599-14605	server	
63-6	14606-14610	load	
63-7	14611-14613	by	
63-8	14614-14622	reducing	
63-9	14623-14626	the	
63-10	14627-14633	amount	
63-11	14634-14636	of	
63-12	14637-14640	CPU	
63-13	14641-14645	time	
63-14	14646-14648	to	
63-15	14649-14655	handle	
63-16	14656-14657	#	
63-17	14658-14666	incoming	
63-18	14667-14675	requests	
63-19	14675-14676	.	
63-20	14677-14683	buffer	
63-21	14684-14692	incoming	
63-22	14693-14704	connections	
63-23	14705-14710	until	
63-24	14711-14719	complete	
63-25	14720-14724	HTTP	
63-26	14725-14733	requests	
63-27	14734-14735	#	
63-28	14736-14742	arrive	
63-29	14743-14744	(	
63-30	14744-14749	nginx	
63-31	14750-14756	apache	
63-32	14756-14757	)	
63-33	14758-14761	for	
63-34	14762-14767	nginx	
63-35	14768-14772	http	
63-36	14773-14776	add	
63-37	14776-14777	,	
63-38	14778-14779	"	
63-39	14779-14785	listen	
63-40	14786-14795	127.0.0.1	
63-41	14795-14796	:	
63-42	14796-14798	80	
63-43	14799-14800	#	
63-44	14801-14814	accept_filter	
63-45	14814-14815	=	
63-46	14815-14824	httpready	
63-47	14824-14825	;	
63-48	14825-14826	"	
63-49	14827-14828	#	
63-50	14828-14842	accf_http_load	
63-51	14842-14843	=	
63-52	14843-14844	"	
63-53	14844-14847	YES	
63-54	14847-14848	"	
63-55	14849-14850	#	
63-56	14851-14852	A	
63-57	14853-14860	FreeBSD	
63-58	14861-14872	accept_data	
63-59	14873-14879	filter	
63-60	14880-14883	can	
63-61	14884-14886	be	
63-62	14887-14891	used	
63-63	14892-14894	to	
63-64	14895-14902	protect	
63-65	14903-14908	https	
63-66	14909-14913	HTTP	
63-67	14913-14914	/	
63-68	14914-14915	2	
63-69	14916-14917	(	
63-70	14917-14920	TLS	
63-71	14920-14921	)	
63-72	14922-14925	web	
63-73	14926-14927	#	
63-74	14928-14935	servers	
63-75	14935-14936	,	
63-76	14937-14944	proxies	
63-77	14944-14945	,	
63-78	14946-14949	and	
63-79	14950-14962	accelerators	
63-80	14962-14963	.	

#Text=When a remote client connects to an Nginx
#Text=# https (TCP port 443) service the FreeBSD network stack negotiates the TCP
#Text=# connection.
64-1	14964-14968	When	
64-2	14969-14970	a	
64-3	14971-14977	remote	
64-4	14978-14984	client	
64-5	14985-14993	connects	
64-6	14994-14996	to	
64-7	14997-14999	an	
64-8	15000-15005	Nginx	
64-9	15006-15007	#	
64-10	15008-15013	https	
64-11	15014-15015	(	
64-12	15015-15018	TCP	
64-13	15019-15023	port	
64-14	15024-15027	443	
64-15	15027-15028	)	
64-16	15029-15036	service	
64-17	15037-15040	the	
64-18	15041-15048	FreeBSD	
64-19	15049-15056	network	
64-20	15057-15062	stack	
64-21	15063-15073	negotiates	
64-22	15074-15077	the	
64-23	15078-15081	TCP	
64-24	15082-15083	#	
64-25	15084-15094	connection	
64-26	15094-15095	.	

#Text=Without an accept_filter, the Nginx daemon immediately accept()'s
#Text=# the connection and will process the client data stream no matter how small or
#Text=# slow the transfer is.
65-1	15096-15103	Without	
65-2	15104-15106	an	
65-3	15107-15120	accept_filter	
65-4	15120-15121	,	
65-5	15122-15125	the	
65-6	15126-15131	Nginx	
65-7	15132-15138	daemon	
65-8	15139-15150	immediately	
65-9	15151-15157	accept	
65-10	15157-15158	(	
65-11	15158-15159	)	
65-12	15159-15160	'	
65-13	15160-15161	s	
65-14	15162-15163	#	
65-15	15164-15167	the	
65-16	15168-15178	connection	
65-17	15179-15182	and	
65-18	15183-15187	will	
65-19	15188-15195	process	
65-20	15196-15199	the	
65-21	15200-15206	client	
65-22	15207-15211	data	
65-23	15212-15218	stream	
65-24	15219-15221	no	
65-25	15222-15228	matter	
65-26	15229-15232	how	
65-27	15233-15238	small	
65-28	15239-15241	or	
65-29	15242-15243	#	
65-30	15244-15248	slow	
65-31	15249-15252	the	
65-32	15253-15261	transfer	
65-33	15262-15264	is	
65-34	15264-15265	.	

#Text=This means Nginx will waste resources on clients who
#Text=# never send any requests, send partial requests, immediately disconnect or
#Text=# time out.
66-1	15266-15270	This	
66-2	15271-15276	means	
66-3	15277-15282	Nginx	
66-4	15283-15287	will	
66-5	15288-15293	waste	
66-6	15294-15303	resources	
66-7	15304-15306	on	
66-8	15307-15314	clients	
66-9	15315-15318	who	
66-10	15319-15320	#	
66-11	15321-15326	never	
66-12	15327-15331	send	
66-13	15332-15335	any	
66-14	15336-15344	requests	
66-15	15344-15345	,	
66-16	15346-15350	send	
66-17	15351-15358	partial	
66-18	15359-15367	requests	
66-19	15367-15368	,	
66-20	15369-15380	immediately	
66-21	15381-15391	disconnect	
66-22	15392-15394	or	
66-23	15395-15396	#	
66-24	15397-15401	time	
66-25	15402-15405	out	
66-26	15405-15406	.	

#Text=With an accept_filter, the FreeBSD kernel still does the TCP
#Text=# handshake but now the accept_filter will wait for the remote client to send a
#Text=# full request before ever notifying the nginx deamon of the new connection.
#Text=# The result is the Nginx deamon can focus on serving active client connections
#Text=# using its resources more efficiently.
67-1	15407-15411	With	
67-2	15412-15414	an	
67-3	15415-15428	accept_filter	
67-4	15428-15429	,	
67-5	15430-15433	the	
67-6	15434-15441	FreeBSD	
67-7	15442-15448	kernel	
67-8	15449-15454	still	
67-9	15455-15459	does	
67-10	15460-15463	the	
67-11	15464-15467	TCP	
67-12	15468-15469	#	
67-13	15470-15479	handshake	
67-14	15480-15483	but	
67-15	15484-15487	now	
67-16	15488-15491	the	
67-17	15492-15505	accept_filter	
67-18	15506-15510	will	
67-19	15511-15515	wait	
67-20	15516-15519	for	
67-21	15520-15523	the	
67-22	15524-15530	remote	
67-23	15531-15537	client	
67-24	15538-15540	to	
67-25	15541-15545	send	
67-26	15546-15547	a	
67-27	15548-15549	#	
67-28	15550-15554	full	
67-29	15555-15562	request	
67-30	15563-15569	before	
67-31	15570-15574	ever	
67-32	15575-15584	notifying	
67-33	15585-15588	the	
67-34	15589-15594	nginx	
67-35	15595-15601	deamon	
67-36	15602-15604	of	
67-37	15605-15608	the	
67-38	15609-15612	new	
67-39	15613-15623	connection	
67-40	15623-15624	.	
67-41	15625-15626	#	
67-42	15627-15630	The	
67-43	15631-15637	result	
67-44	15638-15640	is	
67-45	15641-15644	the	
67-46	15645-15650	Nginx	
67-47	15651-15657	deamon	
67-48	15658-15661	can	
67-49	15662-15667	focus	
67-50	15668-15670	on	
67-51	15671-15678	serving	
67-52	15679-15685	active	
67-53	15686-15692	client	
67-54	15693-15704	connections	
67-55	15705-15706	#	
67-56	15707-15712	using	
67-57	15713-15716	its	
67-58	15717-15726	resources	
67-59	15727-15731	more	
67-60	15732-15743	efficiently	
67-61	15743-15744	.	

#Text=The accept_filter does not affect the
#Text=# latency or speed of client requests to Nginx because the Nginx daemon is
#Text=# notified of a complete client request at the same time as not using a filter.
#Text=# For nginx https servers add "listen 127.0.0.1:443 ssl http2
#Text=# accept_filter=dataready;" to the nginx.conf .
#Text=# https://savagedlight.me/2015/08/23/eli5-freebsd-accept-filters/
#Text=#accf_data_load="YES"
#Text=# Asynchronous I/O, or non-blocking I/O is a form of input/output processing
#Text=# permitting other processing to continue before the transmission has finished.
#Text=# AIO is used for accelerating Nginx on ZFS.
68-1	15745-15748	The	
68-2	15749-15762	accept_filter	
68-3	15763-15767	does	
68-4	15768-15771	not	
68-5	15772-15778	affect	
68-6	15779-15782	the	
68-7	15783-15784	#	
68-8	15785-15792	latency	
68-9	15793-15795	or	
68-10	15796-15801	speed	
68-11	15802-15804	of	
68-12	15805-15811	client	
68-13	15812-15820	requests	
68-14	15821-15823	to	
68-15	15824-15829	Nginx	
68-16	15830-15837	because	
68-17	15838-15841	the	
68-18	15842-15847	Nginx	
68-19	15848-15854	daemon	
68-20	15855-15857	is	
68-21	15858-15859	#	
68-22	15860-15868	notified	
68-23	15869-15871	of	
68-24	15872-15873	a	
68-25	15874-15882	complete	
68-26	15883-15889	client	
68-27	15890-15897	request	
68-28	15898-15900	at	
68-29	15901-15904	the	
68-30	15905-15909	same	
68-31	15910-15914	time	
68-32	15915-15917	as	
68-33	15918-15921	not	
68-34	15922-15927	using	
68-35	15928-15929	a	
68-36	15930-15936	filter	
68-37	15936-15937	.	
68-38	15938-15939	#	
68-39	15940-15943	For	
68-40	15944-15949	nginx	
68-41	15950-15955	https	
68-42	15956-15963	servers	
68-43	15964-15967	add	
68-44	15968-15969	"	
68-45	15969-15975	listen	
68-46	15976-15985	127.0.0.1	
68-47	15985-15986	:	
68-48	15986-15989	443	
68-49	15990-15993	ssl	
68-50	15994-15999	http2	
68-51	16000-16001	#	
68-52	16002-16015	accept_filter	
68-53	16015-16016	=	
68-54	16016-16025	dataready	
68-55	16025-16026	;	
68-56	16026-16027	"	
68-57	16028-16030	to	
68-58	16031-16034	the	
68-59	16035-16045	nginx.conf	
68-60	16046-16047	.	
68-61	16048-16049	#	
68-62	16050-16055	https	
68-63	16055-16056	:	
68-64	16056-16057	/	
68-65	16057-16058	/	
68-66	16058-16073	savagedlight.me	
68-67	16073-16074	/	
68-68	16074-16078	2015	
68-69	16078-16079	/	
68-70	16079-16081	08	
68-71	16081-16082	/	
68-72	16082-16084	23	
68-73	16084-16085	/	
68-74	16085-16089	eli5	
68-75	16089-16090	-	
68-76	16090-16112	freebsd-accept-filters	
68-77	16112-16113	/	
68-78	16114-16115	#	
68-79	16115-16129	accf_data_load	
68-80	16129-16130	=	
68-81	16130-16131	"	
68-82	16131-16134	YES	
68-83	16134-16135	"	
68-84	16136-16137	#	
68-85	16138-16150	Asynchronous	
68-86	16151-16152	I	
68-87	16152-16153	/	
68-88	16153-16154	O	
68-89	16154-16155	,	
68-90	16156-16158	or	
68-91	16159-16171	non-blocking	
68-92	16172-16173	I	
68-93	16173-16174	/	
68-94	16174-16175	O	
68-95	16176-16178	is	
68-96	16179-16180	a	
68-97	16181-16185	form	
68-98	16186-16188	of	
68-99	16189-16194	input	
68-100	16194-16195	/	
68-101	16195-16201	output	
68-102	16202-16212	processing	
68-103	16213-16214	#	
68-104	16215-16225	permitting	
68-105	16226-16231	other	
68-106	16232-16242	processing	
68-107	16243-16245	to	
68-108	16246-16254	continue	
68-109	16255-16261	before	
68-110	16262-16265	the	
68-111	16266-16278	transmission	
68-112	16279-16282	has	
68-113	16283-16291	finished	
68-114	16291-16292	.	
68-115	16293-16294	#	
68-116	16295-16298	AIO	
68-117	16299-16301	is	
68-118	16302-16306	used	
68-119	16307-16310	for	
68-120	16311-16323	accelerating	
68-121	16324-16329	Nginx	
68-122	16330-16332	on	
68-123	16333-16336	ZFS	
68-124	16336-16337	.	

#Text=Check for our tutorials on both.
#Text=# FreeBSD 11.0 removed the aio kernel module
#Text=#aio_load="YES"
#Text=# qlimit for igmp, arp, ether and ip6 queues only (netstat -Q) (default 256)
#Text=#net.isr.defaultqlimit="2048" # (default 256)
#Text=# enable /dev/crypto for IPSEC of custom seeding using the AES-NI Intel
#Text=# hardware cpu support
#Text=#aesni_load="YES"
#Text=# load the Intel PRO/1000 PCI Express kernel module on boot
#Text=#if_em_load="YES"
#Text=# load the Myri10GE kernel module on boot
#Text=#if_mxge_load="YES"
#Text=# load the Chelsio T520 (cxl) kernel module on boot
#Text=#t5fw_cfg_load="YES"
#Text=#if_cxgbe_load="YES"
#Text=# load the PF CARP module
#Text=#if_carp_load="YES"
#Text=# Wait for full DNS request accept filter (unbound)
#Text=#accf_dns_load="YES"
#Text=# Advanced Host Controller Interface (AHCI)
#Text=#ahci_load="YES"
#Text=######################################### intel igb tuning ##############
#Text=# Intel igb(4) kernel driver, preload
#Text=#if_igb_load="YES"
#Text=# Intel igb(4): netmap is natively supported on the following network devices
#Text=# on FreeBSD: em(4), igb(4), ixgbe(4), lem(4), re(4)
#Text=# Once of the best upgrades for a network server is to replace the network
#Text=# interface with an efficient network card.
69-1	16338-16343	Check	
69-2	16344-16347	for	
69-3	16348-16351	our	
69-4	16352-16361	tutorials	
69-5	16362-16364	on	
69-6	16365-16369	both	
69-7	16369-16370	.	
69-8	16371-16372	#	
69-9	16373-16380	FreeBSD	
69-10	16381-16385	11.0	
69-11	16386-16393	removed	
69-12	16394-16397	the	
69-13	16398-16401	aio	
69-14	16402-16408	kernel	
69-15	16409-16415	module	
69-16	16416-16417	#	
69-17	16417-16425	aio_load	
69-18	16425-16426	=	
69-19	16426-16427	"	
69-20	16427-16430	YES	
69-21	16430-16431	"	
69-22	16432-16433	#	
69-23	16434-16440	qlimit	
69-24	16441-16444	for	
69-25	16445-16449	igmp	
69-26	16449-16450	,	
69-27	16451-16454	arp	
69-28	16454-16455	,	
69-29	16456-16461	ether	
69-30	16462-16465	and	
69-31	16466-16469	ip6	
69-32	16470-16476	queues	
69-33	16477-16481	only	
69-34	16482-16483	(	
69-35	16483-16490	netstat	
69-36	16491-16492	-	
69-37	16492-16493	Q	
69-38	16493-16494	)	
69-39	16495-16496	(	
69-40	16496-16503	default	
69-41	16504-16507	256	
69-42	16507-16508	)	
69-43	16509-16510	#	
69-44	16510-16531	net.isr.defaultqlimit	
69-45	16531-16532	=	
69-46	16532-16533	"	
69-47	16533-16537	2048	
69-48	16537-16538	"	
69-49	16539-16540	#	
69-50	16541-16542	(	
69-51	16542-16549	default	
69-52	16550-16553	256	
69-53	16553-16554	)	
69-54	16555-16556	#	
69-55	16557-16563	enable	
69-56	16564-16565	/	
69-57	16565-16568	dev	
69-58	16568-16569	/	
69-59	16569-16575	crypto	
69-60	16576-16579	for	
69-61	16580-16585	IPSEC	
69-62	16586-16588	of	
69-63	16589-16595	custom	
69-64	16596-16603	seeding	
69-65	16604-16609	using	
69-66	16610-16613	the	
69-67	16614-16620	AES-NI	
69-68	16621-16626	Intel	
69-69	16627-16628	#	
69-70	16629-16637	hardware	
69-71	16638-16641	cpu	
69-72	16642-16649	support	
69-73	16650-16651	#	
69-74	16651-16661	aesni_load	
69-75	16661-16662	=	
69-76	16662-16663	"	
69-77	16663-16666	YES	
69-78	16666-16667	"	
69-79	16668-16669	#	
69-80	16670-16674	load	
69-81	16675-16678	the	
69-82	16679-16684	Intel	
69-83	16685-16688	PRO	
69-84	16688-16689	/	
69-85	16689-16693	1000	
69-86	16694-16697	PCI	
69-87	16698-16705	Express	
69-88	16706-16712	kernel	
69-89	16713-16719	module	
69-90	16720-16722	on	
69-91	16723-16727	boot	
69-92	16728-16729	#	
69-93	16729-16739	if_em_load	
69-94	16739-16740	=	
69-95	16740-16741	"	
69-96	16741-16744	YES	
69-97	16744-16745	"	
69-98	16746-16747	#	
69-99	16748-16752	load	
69-100	16753-16756	the	
69-101	16757-16765	Myri10GE	
69-102	16766-16772	kernel	
69-103	16773-16779	module	
69-104	16780-16782	on	
69-105	16783-16787	boot	
69-106	16788-16789	#	
69-107	16789-16801	if_mxge_load	
69-108	16801-16802	=	
69-109	16802-16803	"	
69-110	16803-16806	YES	
69-111	16806-16807	"	
69-112	16808-16809	#	
69-113	16810-16814	load	
69-114	16815-16818	the	
69-115	16819-16826	Chelsio	
69-116	16827-16831	T520	
69-117	16832-16833	(	
69-118	16833-16836	cxl	
69-119	16836-16837	)	
69-120	16838-16844	kernel	
69-121	16845-16851	module	
69-122	16852-16854	on	
69-123	16855-16859	boot	
69-124	16860-16861	#	
69-125	16861-16874	t5fw_cfg_load	
69-126	16874-16875	=	
69-127	16875-16876	"	
69-128	16876-16879	YES	
69-129	16879-16880	"	
69-130	16881-16882	#	
69-131	16882-16895	if_cxgbe_load	
69-132	16895-16896	=	
69-133	16896-16897	"	
69-134	16897-16900	YES	
69-135	16900-16901	"	
69-136	16902-16903	#	
69-137	16904-16908	load	
69-138	16909-16912	the	
69-139	16913-16915	PF	
69-140	16916-16920	CARP	
69-141	16921-16927	module	
69-142	16928-16929	#	
69-143	16929-16941	if_carp_load	
69-144	16941-16942	=	
69-145	16942-16943	"	
69-146	16943-16946	YES	
69-147	16946-16947	"	
69-148	16948-16949	#	
69-149	16950-16954	Wait	
69-150	16955-16958	for	
69-151	16959-16963	full	
69-152	16964-16967	DNS	
69-153	16968-16975	request	
69-154	16976-16982	accept	
69-155	16983-16989	filter	
69-156	16990-16991	(	
69-157	16991-16998	unbound	
69-158	16998-16999	)	
69-159	17000-17001	#	
69-160	17001-17014	accf_dns_load	
69-161	17014-17015	=	
69-162	17015-17016	"	
69-163	17016-17019	YES	
69-164	17019-17020	"	
69-165	17021-17022	#	
69-166	17023-17031	Advanced	
69-167	17032-17036	Host	
69-168	17037-17047	Controller	
69-169	17048-17057	Interface	
69-170	17058-17059	(	
69-171	17059-17063	AHCI	
69-172	17063-17064	)	
69-173	17065-17066	#	
69-174	17066-17075	ahci_load	
69-175	17075-17076	=	
69-176	17076-17077	"	
69-177	17077-17080	YES	
69-178	17080-17081	"	
69-179	17082-17083	#	
69-180	17083-17084	#	
69-181	17084-17085	#	
69-182	17085-17086	#	
69-183	17086-17087	#	
69-184	17087-17088	#	
69-185	17088-17089	#	
69-186	17089-17090	#	
69-187	17090-17091	#	
69-188	17091-17092	#	
69-189	17092-17093	#	
69-190	17093-17094	#	
69-191	17094-17095	#	
69-192	17095-17096	#	
69-193	17096-17097	#	
69-194	17097-17098	#	
69-195	17098-17099	#	
69-196	17099-17100	#	
69-197	17100-17101	#	
69-198	17101-17102	#	
69-199	17102-17103	#	
69-200	17103-17104	#	
69-201	17104-17105	#	
69-202	17105-17106	#	
69-203	17106-17107	#	
69-204	17107-17108	#	
69-205	17108-17109	#	
69-206	17109-17110	#	
69-207	17110-17111	#	
69-208	17111-17112	#	
69-209	17112-17113	#	
69-210	17113-17114	#	
69-211	17114-17115	#	
69-212	17115-17116	#	
69-213	17116-17117	#	
69-214	17117-17118	#	
69-215	17118-17119	#	
69-216	17119-17120	#	
69-217	17120-17121	#	
69-218	17121-17122	#	
69-219	17122-17123	#	
69-220	17124-17129	intel	
69-221	17130-17133	igb	
69-222	17134-17140	tuning	
69-223	17141-17142	#	
69-224	17142-17143	#	
69-225	17143-17144	#	
69-226	17144-17145	#	
69-227	17145-17146	#	
69-228	17146-17147	#	
69-229	17147-17148	#	
69-230	17148-17149	#	
69-231	17149-17150	#	
69-232	17150-17151	#	
69-233	17151-17152	#	
69-234	17152-17153	#	
69-235	17153-17154	#	
69-236	17154-17155	#	
69-237	17156-17157	#	
69-238	17158-17163	Intel	
69-239	17164-17167	igb	
69-240	17167-17168	(	
69-241	17168-17169	4	
69-242	17169-17170	)	
69-243	17171-17177	kernel	
69-244	17178-17184	driver	
69-245	17184-17185	,	
69-246	17186-17193	preload	
69-247	17194-17195	#	
69-248	17195-17206	if_igb_load	
69-249	17206-17207	=	
69-250	17207-17208	"	
69-251	17208-17211	YES	
69-252	17211-17212	"	
69-253	17213-17214	#	
69-254	17215-17220	Intel	
69-255	17221-17224	igb	
69-256	17224-17225	(	
69-257	17225-17226	4	
69-258	17226-17227	)	
69-259	17227-17228	:	
69-260	17229-17235	netmap	
69-261	17236-17238	is	
69-262	17239-17247	natively	
69-263	17248-17257	supported	
69-264	17258-17260	on	
69-265	17261-17264	the	
69-266	17265-17274	following	
69-267	17275-17282	network	
69-268	17283-17290	devices	
69-269	17291-17292	#	
69-270	17293-17295	on	
69-271	17296-17303	FreeBSD	
69-272	17303-17304	:	
69-273	17305-17307	em	
69-274	17307-17308	(	
69-275	17308-17309	4	
69-276	17309-17310	)	
69-277	17310-17311	,	
69-278	17312-17315	igb	
69-279	17315-17316	(	
69-280	17316-17317	4	
69-281	17317-17318	)	
69-282	17318-17319	,	
69-283	17320-17325	ixgbe	
69-284	17325-17326	(	
69-285	17326-17327	4	
69-286	17327-17328	)	
69-287	17328-17329	,	
69-288	17330-17333	lem	
69-289	17333-17334	(	
69-290	17334-17335	4	
69-291	17335-17336	)	
69-292	17336-17337	,	
69-293	17338-17340	re	
69-294	17340-17341	(	
69-295	17341-17342	4	
69-296	17342-17343	)	
69-297	17344-17345	#	
69-298	17346-17350	Once	
69-299	17351-17353	of	
69-300	17354-17357	the	
69-301	17358-17362	best	
69-302	17363-17371	upgrades	
69-303	17372-17375	for	
69-304	17376-17377	a	
69-305	17378-17385	network	
69-306	17386-17392	server	
69-307	17393-17395	is	
69-308	17396-17398	to	
69-309	17399-17406	replace	
69-310	17407-17410	the	
69-311	17411-17418	network	
69-312	17419-17420	#	
69-313	17421-17430	interface	
69-314	17431-17435	with	
69-315	17436-17438	an	
69-316	17439-17448	efficient	
69-317	17449-17456	network	
69-318	17457-17461	card	
69-319	17461-17462	.	

#Text=The on-board chipsets use a
#Text=# significant amount of CPU time.
70-1	17463-17466	The	
70-2	17467-17475	on-board	
70-3	17476-17484	chipsets	
70-4	17485-17488	use	
70-5	17489-17490	a	
70-6	17491-17492	#	
70-7	17493-17504	significant	
70-8	17505-17511	amount	
70-9	17512-17514	of	
70-10	17515-17518	CPU	
70-11	17519-17523	time	
70-12	17523-17524	.	

#Text=By simply installing an Intel i350 network
#Text=# card you can reduce CPU time and interrupt processing and reduce latency.
#Text=# Intel igb(4): Message Signaled Interrupts (MSI-X) provide multiple interrupt
#Text=# vectors, which allow multiple interrupts to be handled simultaneously and
#Text=# loadbalanced across multiple cores.
71-1	17525-17527	By	
71-2	17528-17534	simply	
71-3	17535-17545	installing	
71-4	17546-17548	an	
71-5	17549-17554	Intel	
71-6	17555-17559	i350	
71-7	17560-17567	network	
71-8	17568-17569	#	
71-9	17570-17574	card	
71-10	17575-17578	you	
71-11	17579-17582	can	
71-12	17583-17589	reduce	
71-13	17590-17593	CPU	
71-14	17594-17598	time	
71-15	17599-17602	and	
71-16	17603-17612	interrupt	
71-17	17613-17623	processing	
71-18	17624-17627	and	
71-19	17628-17634	reduce	
71-20	17635-17642	latency	
71-21	17642-17643	.	
71-22	17644-17645	#	
71-23	17646-17651	Intel	
71-24	17652-17655	igb	
71-25	17655-17656	(	
71-26	17656-17657	4	
71-27	17657-17658	)	
71-28	17658-17659	:	
71-29	17660-17667	Message	
71-30	17668-17676	Signaled	
71-31	17677-17687	Interrupts	
71-32	17688-17689	(	
71-33	17689-17694	MSI-X	
71-34	17694-17695	)	
71-35	17696-17703	provide	
71-36	17704-17712	multiple	
71-37	17713-17722	interrupt	
71-38	17723-17724	#	
71-39	17725-17732	vectors	
71-40	17732-17733	,	
71-41	17734-17739	which	
71-42	17740-17745	allow	
71-43	17746-17754	multiple	
71-44	17755-17765	interrupts	
71-45	17766-17768	to	
71-46	17769-17771	be	
71-47	17772-17779	handled	
71-48	17780-17794	simultaneously	
71-49	17795-17798	and	
71-50	17799-17800	#	
71-51	17801-17813	loadbalanced	
71-52	17814-17820	across	
71-53	17821-17829	multiple	
71-54	17830-17835	cores	
71-55	17835-17836	.	

#Text=This improvement helps improve CPU
#Text=# utilization and lowers latency.
#Text=# Verify MSI-X is being used by the NIC using "dmesg | grep -i msi" with the
#Text=# output looking similar to, "igb0: Using MSIX interrupts with 5 vectors" for a
#Text=# two(2) port, four(4) queue Intel i350-T2 network card.
72-1	17837-17841	This	
72-2	17842-17853	improvement	
72-3	17854-17859	helps	
72-4	17860-17867	improve	
72-5	17868-17871	CPU	
72-6	17872-17873	#	
72-7	17874-17885	utilization	
72-8	17886-17889	and	
72-9	17890-17896	lowers	
72-10	17897-17904	latency	
72-11	17904-17905	.	
72-12	17906-17907	#	
72-13	17908-17914	Verify	
72-14	17915-17920	MSI-X	
72-15	17921-17923	is	
72-16	17924-17929	being	
72-17	17930-17934	used	
72-18	17935-17937	by	
72-19	17938-17941	the	
72-20	17942-17945	NIC	
72-21	17946-17951	using	
72-22	17952-17953	"	
72-23	17953-17958	dmesg	
72-24	17959-17960	|	
72-25	17961-17965	grep	
72-26	17966-17967	-	
72-27	17967-17968	i	
72-28	17969-17972	msi	
72-29	17972-17973	"	
72-30	17974-17978	with	
72-31	17979-17982	the	
72-32	17983-17984	#	
72-33	17985-17991	output	
72-34	17992-17999	looking	
72-35	18000-18007	similar	
72-36	18008-18010	to	
72-37	18010-18011	,	
72-38	18012-18013	"	
72-39	18013-18017	igb0	
72-40	18017-18018	:	
72-41	18019-18024	Using	
72-42	18025-18029	MSIX	
72-43	18030-18040	interrupts	
72-44	18041-18045	with	
72-45	18046-18047	5	
72-46	18048-18055	vectors	
72-47	18055-18056	"	
72-48	18057-18060	for	
72-49	18061-18062	a	
72-50	18063-18064	#	
72-51	18065-18068	two	
72-52	18068-18069	(	
72-53	18069-18070	2	
72-54	18070-18071	)	
72-55	18072-18076	port	
72-56	18076-18077	,	
72-57	18078-18082	four	
72-58	18082-18083	(	
72-59	18083-18084	4	
72-60	18084-18085	)	
72-61	18086-18091	queue	
72-62	18092-18097	Intel	
72-63	18098-18102	i350	
72-64	18102-18103	-	
72-65	18103-18105	T2	
72-66	18106-18113	network	
72-67	18114-18118	card	
72-68	18118-18119	.	

#Text=#hw.igb.enable_msix="1"
#Text=# (default 1)
#Text=# Intel igb(4): Adaptive interrupt Moderation adjusts the interrupt rate
#Text=# dynamically based on packet size and throughput and reduces system load for
#Text=# igb(4).
73-1	18120-18121	#	
73-2	18121-18139	hw.igb.enable_msix	
73-3	18139-18140	=	
73-4	18140-18141	"	
73-5	18141-18142	1	
73-6	18142-18143	"	
73-7	18144-18145	#	
73-8	18146-18147	(	
73-9	18147-18154	default	
73-10	18155-18156	1	
73-11	18156-18157	)	
73-12	18158-18159	#	
73-13	18160-18165	Intel	
73-14	18166-18169	igb	
73-15	18169-18170	(	
73-16	18170-18171	4	
73-17	18171-18172	)	
73-18	18172-18173	:	
73-19	18174-18182	Adaptive	
73-20	18183-18192	interrupt	
73-21	18193-18203	Moderation	
73-22	18204-18211	adjusts	
73-23	18212-18215	the	
73-24	18216-18225	interrupt	
73-25	18226-18230	rate	
73-26	18231-18232	#	
73-27	18233-18244	dynamically	
73-28	18245-18250	based	
73-29	18251-18253	on	
73-30	18254-18260	packet	
73-31	18261-18265	size	
73-32	18266-18269	and	
73-33	18270-18280	throughput	
73-34	18281-18284	and	
73-35	18285-18292	reduces	
73-36	18293-18299	system	
73-37	18300-18304	load	
73-38	18305-18308	for	
73-39	18309-18310	#	
73-40	18311-18314	igb	
73-41	18314-18315	(	
73-42	18315-18316	4	
73-43	18316-18317	)	
73-44	18317-18318	.	

#Text=Enabling AIM, and the separate MSIX option, will result in
#Text=# significantly better efficiency in the network stack.
74-1	18319-18327	Enabling	
74-2	18328-18331	AIM	
74-3	18331-18332	,	
74-4	18333-18336	and	
74-5	18337-18340	the	
74-6	18341-18349	separate	
74-7	18350-18354	MSIX	
74-8	18355-18361	option	
74-9	18361-18362	,	
74-10	18363-18367	will	
74-11	18368-18374	result	
74-12	18375-18377	in	
74-13	18378-18379	#	
74-14	18380-18393	significantly	
74-15	18394-18400	better	
74-16	18401-18411	efficiency	
74-17	18412-18414	in	
74-18	18415-18418	the	
74-19	18419-18426	network	
74-20	18427-18432	stack	
74-21	18432-18433	.	

#Text=#hw.igb.enable_aim="1"
#Text=# (default 1)
#Text=# Intel igb(4): FreeBSD puts an upper limit on the number of received packets a
#Text=# network card can concurrently process to 100 packets per cycle.
75-1	18434-18435	#	
75-2	18435-18452	hw.igb.enable_aim	
75-3	18452-18453	=	
75-4	18453-18454	"	
75-5	18454-18455	1	
75-6	18455-18456	"	
75-7	18457-18458	#	
75-8	18459-18460	(	
75-9	18460-18467	default	
75-10	18468-18469	1	
75-11	18469-18470	)	
75-12	18471-18472	#	
75-13	18473-18478	Intel	
75-14	18479-18482	igb	
75-15	18482-18483	(	
75-16	18483-18484	4	
75-17	18484-18485	)	
75-18	18485-18486	:	
75-19	18487-18494	FreeBSD	
75-20	18495-18499	puts	
75-21	18500-18502	an	
75-22	18503-18508	upper	
75-23	18509-18514	limit	
75-24	18515-18517	on	
75-25	18518-18521	the	
75-26	18522-18528	number	
75-27	18529-18531	of	
75-28	18532-18540	received	
75-29	18541-18548	packets	
75-30	18549-18550	a	
75-31	18551-18552	#	
75-32	18553-18560	network	
75-33	18561-18565	card	
75-34	18566-18569	can	
75-35	18570-18582	concurrently	
75-36	18583-18590	process	
75-37	18591-18593	to	
75-38	18594-18597	100	
75-39	18598-18605	packets	
75-40	18606-18609	per	
75-41	18610-18615	cycle	
75-42	18615-18616	.	

#Text=This limit is
#Text=# in place because of inefficiencies in IRQ sharing when the network card is
#Text=# using the same IRQ as another device.
76-1	18617-18621	This	
76-2	18622-18627	limit	
76-3	18628-18630	is	
76-4	18631-18632	#	
76-5	18633-18635	in	
76-6	18636-18641	place	
76-7	18642-18649	because	
76-8	18650-18652	of	
76-9	18653-18667	inefficiencies	
76-10	18668-18670	in	
76-11	18671-18674	IRQ	
76-12	18675-18682	sharing	
76-13	18683-18687	when	
76-14	18688-18691	the	
76-15	18692-18699	network	
76-16	18700-18704	card	
76-17	18705-18707	is	
76-18	18708-18709	#	
76-19	18710-18715	using	
76-20	18716-18719	the	
76-21	18720-18724	same	
76-22	18725-18728	IRQ	
76-23	18729-18731	as	
76-24	18732-18739	another	
76-25	18740-18746	device	
76-26	18746-18747	.	

#Text=When the Intel network card is assigned
#Text=# a unique IRQ (dmesg) and MSI-X is enabled through the driver
#Text=# (hw.igb.enable_msix=1) then interrupt scheduling is significantly more
#Text=# efficient and the NIC can be allowed to process packets as fast as they are
#Text=# received.
77-1	18748-18752	When	
77-2	18753-18756	the	
77-3	18757-18762	Intel	
77-4	18763-18770	network	
77-5	18771-18775	card	
77-6	18776-18778	is	
77-7	18779-18787	assigned	
77-8	18788-18789	#	
77-9	18790-18791	a	
77-10	18792-18798	unique	
77-11	18799-18802	IRQ	
77-12	18803-18804	(	
77-13	18804-18809	dmesg	
77-14	18809-18810	)	
77-15	18811-18814	and	
77-16	18815-18820	MSI-X	
77-17	18821-18823	is	
77-18	18824-18831	enabled	
77-19	18832-18839	through	
77-20	18840-18843	the	
77-21	18844-18850	driver	
77-22	18851-18852	#	
77-23	18853-18854	(	
77-24	18854-18872	hw.igb.enable_msix	
77-25	18872-18873	=	
77-26	18873-18874	1	
77-27	18874-18875	)	
77-28	18876-18880	then	
77-29	18881-18890	interrupt	
77-30	18891-18901	scheduling	
77-31	18902-18904	is	
77-32	18905-18918	significantly	
77-33	18919-18923	more	
77-34	18924-18925	#	
77-35	18926-18935	efficient	
77-36	18936-18939	and	
77-37	18940-18943	the	
77-38	18944-18947	NIC	
77-39	18948-18951	can	
77-40	18952-18954	be	
77-41	18955-18962	allowed	
77-42	18963-18965	to	
77-43	18966-18973	process	
77-44	18974-18981	packets	
77-45	18982-18984	as	
77-46	18985-18989	fast	
77-47	18990-18992	as	
77-48	18993-18997	they	
77-49	18998-19001	are	
77-50	19002-19003	#	
77-51	19004-19012	received	
77-52	19012-19013	.	

#Text=A value of "-1" means unlimited packet processing and sets the same
#Text=# value to dev.igb.0.rx_processing_limit and dev.igb.1.rx_processing_limit .
#Text=# Option removed in FreeBSD 12
#Text=#hw.igb.rx_process_limit="-1"
#Text=# (default 100 packets to process concurrently)
#Text=# Intel igb(4): The Intel i350-T2 dual port NIC supports up to eight(8)
#Text=# input/output queues per network port, the card has two(2) network ports.
#Text=# Multiple transmit and receive queues in network hardware allow network
#Text=# traffic streams to be distributed into queues.
78-1	19014-19015	A	
78-2	19016-19021	value	
78-3	19022-19024	of	
78-4	19025-19026	"	
78-5	19026-19027	-	
78-6	19027-19028	1	
78-7	19028-19029	"	
78-8	19030-19035	means	
78-9	19036-19045	unlimited	
78-10	19046-19052	packet	
78-11	19053-19063	processing	
78-12	19064-19067	and	
78-13	19068-19072	sets	
78-14	19073-19076	the	
78-15	19077-19081	same	
78-16	19082-19083	#	
78-17	19084-19089	value	
78-18	19090-19092	to	
78-19	19093-19100	dev.igb	
78-20	19100-19102	.0	
78-21	19102-19103	.	
78-22	19103-19122	rx_processing_limit	
78-23	19123-19126	and	
78-24	19127-19134	dev.igb	
78-25	19134-19136	.1	
78-26	19136-19137	.	
78-27	19137-19156	rx_processing_limit	
78-28	19157-19158	.	
78-29	19159-19160	#	
78-30	19161-19167	Option	
78-31	19168-19175	removed	
78-32	19176-19178	in	
78-33	19179-19186	FreeBSD	
78-34	19187-19189	12	
78-35	19190-19191	#	
78-36	19191-19214	hw.igb.rx_process_limit	
78-37	19214-19215	=	
78-38	19215-19216	"	
78-39	19216-19217	-	
78-40	19217-19218	1	
78-41	19218-19219	"	
78-42	19220-19221	#	
78-43	19222-19223	(	
78-44	19223-19230	default	
78-45	19231-19234	100	
78-46	19235-19242	packets	
78-47	19243-19245	to	
78-48	19246-19253	process	
78-49	19254-19266	concurrently	
78-50	19266-19267	)	
78-51	19268-19269	#	
78-52	19270-19275	Intel	
78-53	19276-19279	igb	
78-54	19279-19280	(	
78-55	19280-19281	4	
78-56	19281-19282	)	
78-57	19282-19283	:	
78-58	19284-19287	The	
78-59	19288-19293	Intel	
78-60	19294-19298	i350	
78-61	19298-19299	-	
78-62	19299-19301	T2	
78-63	19302-19306	dual	
78-64	19307-19311	port	
78-65	19312-19315	NIC	
78-66	19316-19324	supports	
78-67	19325-19327	up	
78-68	19328-19330	to	
78-69	19331-19336	eight	
78-70	19336-19337	(	
78-71	19337-19338	8	
78-72	19338-19339	)	
78-73	19340-19341	#	
78-74	19342-19347	input	
78-75	19347-19348	/	
78-76	19348-19354	output	
78-77	19355-19361	queues	
78-78	19362-19365	per	
78-79	19366-19373	network	
78-80	19374-19378	port	
78-81	19378-19379	,	
78-82	19380-19383	the	
78-83	19384-19388	card	
78-84	19389-19392	has	
78-85	19393-19396	two	
78-86	19396-19397	(	
78-87	19397-19398	2	
78-88	19398-19399	)	
78-89	19400-19407	network	
78-90	19408-19413	ports	
78-91	19413-19414	.	
78-92	19415-19416	#	
78-93	19417-19425	Multiple	
78-94	19426-19434	transmit	
78-95	19435-19438	and	
78-96	19439-19446	receive	
78-97	19447-19453	queues	
78-98	19454-19456	in	
78-99	19457-19464	network	
78-100	19465-19473	hardware	
78-101	19474-19479	allow	
78-102	19480-19487	network	
78-103	19488-19489	#	
78-104	19490-19497	traffic	
78-105	19498-19505	streams	
78-106	19506-19508	to	
78-107	19509-19511	be	
78-108	19512-19523	distributed	
78-109	19524-19528	into	
78-110	19529-19535	queues	
78-111	19535-19536	.	

#Text=Queues can be mapped by the
#Text=# FreeBSD network card driver to specific processor cores leading to reduced
#Text=# CPU cache misses.
79-1	19537-19543	Queues	
79-2	19544-19547	can	
79-3	19548-19550	be	
79-4	19551-19557	mapped	
79-5	19558-19560	by	
79-6	19561-19564	the	
79-7	19565-19566	#	
79-8	19567-19574	FreeBSD	
79-9	19575-19582	network	
79-10	19583-19587	card	
79-11	19588-19594	driver	
79-12	19595-19597	to	
79-13	19598-19606	specific	
79-14	19607-19616	processor	
79-15	19617-19622	cores	
79-16	19623-19630	leading	
79-17	19631-19633	to	
79-18	19634-19641	reduced	
79-19	19642-19643	#	
79-20	19644-19647	CPU	
79-21	19648-19653	cache	
79-22	19654-19660	misses	
79-23	19660-19661	.	

#Text=Queues also distribute the workload over multiple CPU
#Text=# cores, process network traffic in parallel and prevent network traffic or
#Text=# interrupt processing from overwhelming a single CPU core.
#Text=# http://www.intel.com/content/dam/doc/white-paper/improving-network-performance-in-multi-core-systems-paper.pdf
#Text=# For a firewall under heavy CPU load we recommend setting the number of
#Text=# network queues equal to the total number of real CPU cores in the machine
#Text=# divided by the number of active network ports.
80-1	19662-19668	Queues	
80-2	19669-19673	also	
80-3	19674-19684	distribute	
80-4	19685-19688	the	
80-5	19689-19697	workload	
80-6	19698-19702	over	
80-7	19703-19711	multiple	
80-8	19712-19715	CPU	
80-9	19716-19717	#	
80-10	19718-19723	cores	
80-11	19723-19724	,	
80-12	19725-19732	process	
80-13	19733-19740	network	
80-14	19741-19748	traffic	
80-15	19749-19751	in	
80-16	19752-19760	parallel	
80-17	19761-19764	and	
80-18	19765-19772	prevent	
80-19	19773-19780	network	
80-20	19781-19788	traffic	
80-21	19789-19791	or	
80-22	19792-19793	#	
80-23	19794-19803	interrupt	
80-24	19804-19814	processing	
80-25	19815-19819	from	
80-26	19820-19832	overwhelming	
80-27	19833-19834	a	
80-28	19835-19841	single	
80-29	19842-19845	CPU	
80-30	19846-19850	core	
80-31	19850-19851	.	
80-32	19852-19853	#	
80-33	19854-19858	http	
80-34	19858-19859	:	
80-35	19859-19860	/	
80-36	19860-19861	/	
80-37	19861-19874	www.intel.com	
80-38	19874-19875	/	
80-39	19875-19882	content	
80-40	19882-19883	/	
80-41	19883-19886	dam	
80-42	19886-19887	/	
80-43	19887-19890	doc	
80-44	19890-19891	/	
80-45	19891-19902	white-paper	
80-46	19902-19903	/	
80-47	19903-19964	improving-network-performance-in-multi-core-systems-paper.pdf	
80-48	19965-19966	#	
80-49	19967-19970	For	
80-50	19971-19972	a	
80-51	19973-19981	firewall	
80-52	19982-19987	under	
80-53	19988-19993	heavy	
80-54	19994-19997	CPU	
80-55	19998-20002	load	
80-56	20003-20005	we	
80-57	20006-20015	recommend	
80-58	20016-20023	setting	
80-59	20024-20027	the	
80-60	20028-20034	number	
80-61	20035-20037	of	
80-62	20038-20039	#	
80-63	20040-20047	network	
80-64	20048-20054	queues	
80-65	20055-20060	equal	
80-66	20061-20063	to	
80-67	20064-20067	the	
80-68	20068-20073	total	
80-69	20074-20080	number	
80-70	20081-20083	of	
80-71	20084-20088	real	
80-72	20089-20092	CPU	
80-73	20093-20098	cores	
80-74	20099-20101	in	
80-75	20102-20105	the	
80-76	20106-20113	machine	
80-77	20114-20115	#	
80-78	20116-20123	divided	
80-79	20124-20126	by	
80-80	20127-20130	the	
80-81	20131-20137	number	
80-82	20138-20140	of	
80-83	20141-20147	active	
80-84	20148-20155	network	
80-85	20156-20161	ports	
80-86	20161-20162	.	

#Text=For example, a firewall with
#Text=# four(4) real CPU cores and an i350-T2 dual port NIC should use two(2) queues
#Text=# per network port (hw.igb.num_queues=2).
81-1	20163-20166	For	
81-2	20167-20174	example	
81-3	20174-20175	,	
81-4	20176-20177	a	
81-5	20178-20186	firewall	
81-6	20187-20191	with	
81-7	20192-20193	#	
81-8	20194-20198	four	
81-9	20198-20199	(	
81-10	20199-20200	4	
81-11	20200-20201	)	
81-12	20202-20206	real	
81-13	20207-20210	CPU	
81-14	20211-20216	cores	
81-15	20217-20220	and	
81-16	20221-20223	an	
81-17	20224-20228	i350	
81-18	20228-20229	-	
81-19	20229-20231	T2	
81-20	20232-20236	dual	
81-21	20237-20241	port	
81-22	20242-20245	NIC	
81-23	20246-20252	should	
81-24	20253-20256	use	
81-25	20257-20260	two	
81-26	20260-20261	(	
81-27	20261-20262	2	
81-28	20262-20263	)	
81-29	20264-20270	queues	
81-30	20271-20272	#	
81-31	20273-20276	per	
81-32	20277-20284	network	
81-33	20285-20289	port	
81-34	20290-20291	(	
81-35	20291-20308	hw.igb.num_queues	
81-36	20308-20309	=	
81-37	20309-20310	2	
81-38	20310-20311	)	
81-39	20311-20312	.	

#Text=This equals a total of four(4)
#Text=# network queues over two(2) network ports which map to to four(4) real CPU
#Text=# cores.
82-1	20313-20317	This	
82-2	20318-20324	equals	
82-3	20325-20326	a	
82-4	20327-20332	total	
82-5	20333-20335	of	
82-6	20336-20340	four	
82-7	20340-20341	(	
82-8	20341-20342	4	
82-9	20342-20343	)	
82-10	20344-20345	#	
82-11	20346-20353	network	
82-12	20354-20360	queues	
82-13	20361-20365	over	
82-14	20366-20369	two	
82-15	20369-20370	(	
82-16	20370-20371	2	
82-17	20371-20372	)	
82-18	20373-20380	network	
82-19	20381-20386	ports	
82-20	20387-20392	which	
82-21	20393-20396	map	
82-22	20397-20399	to	
82-23	20400-20402	to	
82-24	20403-20407	four	
82-25	20407-20408	(	
82-26	20408-20409	4	
82-27	20409-20410	)	
82-28	20411-20415	real	
82-29	20416-20419	CPU	
82-30	20420-20421	#	
82-31	20422-20427	cores	
82-32	20427-20428	.	

#Text=A FreeBSD server with four(4) real CPU cores and a single network port
#Text=# should use four(4) network queues (hw.igb.num_queues=4).
83-1	20429-20430	A	
83-2	20431-20438	FreeBSD	
83-3	20439-20445	server	
83-4	20446-20450	with	
83-5	20451-20455	four	
83-6	20455-20456	(	
83-7	20456-20457	4	
83-8	20457-20458	)	
83-9	20459-20463	real	
83-10	20464-20467	CPU	
83-11	20468-20473	cores	
83-12	20474-20477	and	
83-13	20478-20479	a	
83-14	20480-20486	single	
83-15	20487-20494	network	
83-16	20495-20499	port	
83-17	20500-20501	#	
83-18	20502-20508	should	
83-19	20509-20512	use	
83-20	20513-20517	four	
83-21	20517-20518	(	
83-22	20518-20519	4	
83-23	20519-20520	)	
83-24	20521-20528	network	
83-25	20529-20535	queues	
83-26	20536-20537	(	
83-27	20537-20554	hw.igb.num_queues	
83-28	20554-20555	=	
83-29	20555-20556	4	
83-30	20556-20557	)	
83-31	20557-20558	.	

#Text=Or, set
#Text=# hw.igb.num_queues to zero(0) to allow the FreeBSD driver to automatically set
#Text=# the number of network queues to the number of CPU cores.
84-1	20559-20561	Or	
84-2	20561-20562	,	
84-3	20563-20566	set	
84-4	20567-20568	#	
84-5	20569-20586	hw.igb.num_queues	
84-6	20587-20589	to	
84-7	20590-20594	zero	
84-8	20594-20595	(	
84-9	20595-20596	0	
84-10	20596-20597	)	
84-11	20598-20600	to	
84-12	20601-20606	allow	
84-13	20607-20610	the	
84-14	20611-20618	FreeBSD	
84-15	20619-20625	driver	
84-16	20626-20628	to	
84-17	20629-20642	automatically	
84-18	20643-20646	set	
84-19	20647-20648	#	
84-20	20649-20652	the	
84-21	20653-20659	number	
84-22	20660-20662	of	
84-23	20663-20670	network	
84-24	20671-20677	queues	
84-25	20678-20680	to	
84-26	20681-20684	the	
84-27	20685-20691	number	
84-28	20692-20694	of	
84-29	20695-20698	CPU	
84-30	20699-20704	cores	
84-31	20704-20705	.	

#Text=It is not recommend
#Text=# to allow more network queues than real CPU cores per network port.
#Text=# Query total interrupts per queue with "vmstat -i" and use "top -CHIPS" to
#Text=# watch CPU usage per igb0:que.
85-1	20706-20708	It	
85-2	20709-20711	is	
85-3	20712-20715	not	
85-4	20716-20725	recommend	
85-5	20726-20727	#	
85-6	20728-20730	to	
85-7	20731-20736	allow	
85-8	20737-20741	more	
85-9	20742-20749	network	
85-10	20750-20756	queues	
85-11	20757-20761	than	
85-12	20762-20766	real	
85-13	20767-20770	CPU	
85-14	20771-20776	cores	
85-15	20777-20780	per	
85-16	20781-20788	network	
85-17	20789-20793	port	
85-18	20793-20794	.	
85-19	20795-20796	#	
85-20	20797-20802	Query	
85-21	20803-20808	total	
85-22	20809-20819	interrupts	
85-23	20820-20823	per	
85-24	20824-20829	queue	
85-25	20830-20834	with	
85-26	20835-20836	"	
85-27	20836-20842	vmstat	
85-28	20843-20844	-	
85-29	20844-20845	i	
85-30	20845-20846	"	
85-31	20847-20850	and	
85-32	20851-20854	use	
85-33	20855-20856	"	
85-34	20856-20859	top	
85-35	20860-20861	-	
85-36	20861-20866	CHIPS	
85-37	20866-20867	"	
85-38	20868-20870	to	
85-39	20871-20872	#	
85-40	20873-20878	watch	
85-41	20879-20882	CPU	
85-42	20883-20888	usage	
85-43	20889-20892	per	
85-44	20893-20897	igb0	
85-45	20897-20898	:	
85-46	20898-20901	que	
85-47	20901-20902	.	

#Text=Multiple network queues will trigger more total
#Text=# interrupts compared to a single network queue, but the processing of each of
#Text=# those queues will be spread over multiple CPU cores allowing the system to
#Text=# handle increased network traffic loads.
86-1	20903-20911	Multiple	
86-2	20912-20919	network	
86-3	20920-20926	queues	
86-4	20927-20931	will	
86-5	20932-20939	trigger	
86-6	20940-20944	more	
86-7	20945-20950	total	
86-8	20951-20952	#	
86-9	20953-20963	interrupts	
86-10	20964-20972	compared	
86-11	20973-20975	to	
86-12	20976-20977	a	
86-13	20978-20984	single	
86-14	20985-20992	network	
86-15	20993-20998	queue	
86-16	20998-20999	,	
86-17	21000-21003	but	
86-18	21004-21007	the	
86-19	21008-21018	processing	
86-20	21019-21021	of	
86-21	21022-21026	each	
86-22	21027-21029	of	
86-23	21030-21031	#	
86-24	21032-21037	those	
86-25	21038-21044	queues	
86-26	21045-21049	will	
86-27	21050-21052	be	
86-28	21053-21059	spread	
86-29	21060-21064	over	
86-30	21065-21073	multiple	
86-31	21074-21077	CPU	
86-32	21078-21083	cores	
86-33	21084-21092	allowing	
86-34	21093-21096	the	
86-35	21097-21103	system	
86-36	21104-21106	to	
86-37	21107-21108	#	
86-38	21109-21115	handle	
86-39	21116-21125	increased	
86-40	21126-21133	network	
86-41	21134-21141	traffic	
86-42	21142-21147	loads	
86-43	21147-21148	.	

#Text=#hw.igb.num_queues="2"
#Text=# (default 0 , queues equal the number of CPU real cores)
#Text=# Intel igb(4): Intel PRO 1000 network chipsets support a maximum of 4096 Rx
#Text=# and 4096 Tx descriptors.
87-1	21149-21150	#	
87-2	21150-21167	hw.igb.num_queues	
87-3	21167-21168	=	
87-4	21168-21169	"	
87-5	21169-21170	2	
87-6	21170-21171	"	
87-7	21172-21173	#	
87-8	21174-21175	(	
87-9	21175-21182	default	
87-10	21183-21184	0	
87-11	21185-21186	,	
87-12	21187-21193	queues	
87-13	21194-21199	equal	
87-14	21200-21203	the	
87-15	21204-21210	number	
87-16	21211-21213	of	
87-17	21214-21217	CPU	
87-18	21218-21222	real	
87-19	21223-21228	cores	
87-20	21228-21229	)	
87-21	21230-21231	#	
87-22	21232-21237	Intel	
87-23	21238-21241	igb	
87-24	21241-21242	(	
87-25	21242-21243	4	
87-26	21243-21244	)	
87-27	21244-21245	:	
87-28	21246-21251	Intel	
87-29	21252-21255	PRO	
87-30	21256-21260	1000	
87-31	21261-21268	network	
87-32	21269-21277	chipsets	
87-33	21278-21285	support	
87-34	21286-21287	a	
87-35	21288-21295	maximum	
87-36	21296-21298	of	
87-37	21299-21303	4096	
87-38	21304-21306	Rx	
87-39	21307-21308	#	
87-40	21309-21312	and	
87-41	21313-21317	4096	
87-42	21318-21320	Tx	
87-43	21321-21332	descriptors	
87-44	21332-21333	.	

#Text=Two cases when you could change the amount of
#Text=# descriptors are: 1) Low RAM and 2) CPU or bus saturation.
88-1	21334-21337	Two	
88-2	21338-21343	cases	
88-3	21344-21348	when	
88-4	21349-21352	you	
88-5	21353-21358	could	
88-6	21359-21365	change	
88-7	21366-21369	the	
88-8	21370-21376	amount	
88-9	21377-21379	of	
88-10	21380-21381	#	
88-11	21382-21393	descriptors	
88-12	21394-21397	are	
88-13	21397-21398	:	
88-14	21399-21400	1	
88-15	21400-21401	)	
88-16	21402-21405	Low	
88-17	21406-21409	RAM	
88-18	21410-21413	and	
88-19	21414-21415	2	
88-20	21415-21416	)	
88-21	21417-21420	CPU	
88-22	21421-21423	or	
88-23	21424-21427	bus	
88-24	21428-21438	saturation	
88-25	21438-21439	.	

#Text=If the system RAM
#Text=# is too low you can drop the amount of descriptors to 128, but the system may
#Text=# drop packets if it can not processes the packets fast enough.
89-1	21440-21442	If	
89-2	21443-21446	the	
89-3	21447-21453	system	
89-4	21454-21457	RAM	
89-5	21458-21459	#	
89-6	21460-21462	is	
89-7	21463-21466	too	
89-8	21467-21470	low	
89-9	21471-21474	you	
89-10	21475-21478	can	
89-11	21479-21483	drop	
89-12	21484-21487	the	
89-13	21488-21494	amount	
89-14	21495-21497	of	
89-15	21498-21509	descriptors	
89-16	21510-21512	to	
89-17	21513-21516	128	
89-18	21516-21517	,	
89-19	21518-21521	but	
89-20	21522-21525	the	
89-21	21526-21532	system	
89-22	21533-21536	may	
89-23	21537-21538	#	
89-24	21539-21543	drop	
89-25	21544-21551	packets	
89-26	21552-21554	if	
89-27	21555-21557	it	
89-28	21558-21561	can	
89-29	21562-21565	not	
89-30	21566-21575	processes	
89-31	21576-21579	the	
89-32	21580-21587	packets	
89-33	21588-21592	fast	
89-34	21593-21599	enough	
89-35	21599-21600	.	

#Text=If you have a
#Text=# large number of packets incoming and they are being processed too slowly then
#Text=# you can increase to the descriptors up to 4096.
90-1	21601-21603	If	
90-2	21604-21607	you	
90-3	21608-21612	have	
90-4	21613-21614	a	
90-5	21615-21616	#	
90-6	21617-21622	large	
90-7	21623-21629	number	
90-8	21630-21632	of	
90-9	21633-21640	packets	
90-10	21641-21649	incoming	
90-11	21650-21653	and	
90-12	21654-21658	they	
90-13	21659-21662	are	
90-14	21663-21668	being	
90-15	21669-21678	processed	
90-16	21679-21682	too	
90-17	21683-21689	slowly	
90-18	21690-21694	then	
90-19	21695-21696	#	
90-20	21697-21700	you	
90-21	21701-21704	can	
90-22	21705-21713	increase	
90-23	21714-21716	to	
90-24	21717-21720	the	
90-25	21721-21732	descriptors	
90-26	21733-21735	up	
90-27	21736-21738	to	
90-28	21739-21743	4096	
90-29	21743-21744	.	

#Text=Increasing descriptors is
#Text=# only a hack because the system is too slow to processes the packets in a
#Text=# timely manner.
91-1	21745-21755	Increasing	
91-2	21756-21767	descriptors	
91-3	21768-21770	is	
91-4	21771-21772	#	
91-5	21773-21777	only	
91-6	21778-21779	a	
91-7	21780-21784	hack	
91-8	21785-21792	because	
91-9	21793-21796	the	
91-10	21797-21803	system	
91-11	21804-21806	is	
91-12	21807-21810	too	
91-13	21811-21815	slow	
91-14	21816-21818	to	
91-15	21819-21828	processes	
91-16	21829-21832	the	
91-17	21833-21840	packets	
91-18	21841-21843	in	
91-19	21844-21845	a	
91-20	21846-21847	#	
91-21	21848-21854	timely	
91-22	21855-21861	manner	
91-23	21861-21862	.	

#Text=You should look into getting a faster CPU with a wider PCI bus
#Text=# or identifying why the receiving application is so slow.
92-1	21863-21866	You	
92-2	21867-21873	should	
92-3	21874-21878	look	
92-4	21879-21883	into	
92-5	21884-21891	getting	
92-6	21892-21893	a	
92-7	21894-21900	faster	
92-8	21901-21904	CPU	
92-9	21905-21909	with	
92-10	21910-21911	a	
92-11	21912-21917	wider	
92-12	21918-21921	PCI	
92-13	21922-21925	bus	
92-14	21926-21927	#	
92-15	21928-21930	or	
92-16	21931-21942	identifying	
92-17	21943-21946	why	
92-18	21947-21950	the	
92-19	21951-21960	receiving	
92-20	21961-21972	application	
92-21	21973-21975	is	
92-22	21976-21978	so	
92-23	21979-21983	slow	
92-24	21983-21984	.	

#Text=Use "netstat -ihw 1"
#Text=# and look for idrops.
93-1	21985-21988	Use	
93-2	21989-21990	"	
93-3	21990-21997	netstat	
93-4	21998-21999	-	
93-5	21999-22002	ihw	
93-6	22003-22004	1	
93-7	22004-22005	"	
93-8	22006-22007	#	
93-9	22008-22011	and	
93-10	22012-22016	look	
93-11	22017-22020	for	
93-12	22021-22027	idrops	
93-13	22027-22028	.	

#Text=Note that each received packet requires one Receive
#Text=# Descriptor, and each descriptor uses 2 KB of memory.
94-1	22029-22033	Note	
94-2	22034-22038	that	
94-3	22039-22043	each	
94-4	22044-22052	received	
94-5	22053-22059	packet	
94-6	22060-22068	requires	
94-7	22069-22072	one	
94-8	22073-22080	Receive	
94-9	22081-22082	#	
94-10	22083-22093	Descriptor	
94-11	22093-22094	,	
94-12	22095-22098	and	
94-13	22099-22103	each	
94-14	22104-22114	descriptor	
94-15	22115-22119	uses	
94-16	22120-22121	2	
94-17	22122-22124	KB	
94-18	22125-22127	of	
94-19	22128-22134	memory	
94-20	22134-22135	.	

#Text=A setting of "1024" is
#Text=# the most efficient value. https://fasterdata.es.net/host-tuning/nic-tuning/
#Text=#hw.igb.rxd="4096"
#Text=# (default 1024)
#Text=#hw.igb.txd="4096"
#Text=# (default 1024)
#Text=# maximum number of interrupts per second generated by single igb(4) (default
#Text=# 8000).
95-1	22136-22137	A	
95-2	22138-22145	setting	
95-3	22146-22148	of	
95-4	22149-22150	"	
95-5	22150-22154	1024	
95-6	22154-22155	"	
95-7	22156-22158	is	
95-8	22159-22160	#	
95-9	22161-22164	the	
95-10	22165-22169	most	
95-11	22170-22179	efficient	
95-12	22180-22185	value	
95-13	22185-22186	.	
95-14	22187-22192	https	
95-15	22192-22193	:	
95-16	22193-22194	/	
95-17	22194-22195	/	
95-18	22195-22212	fasterdata.es.net	
95-19	22212-22213	/	
95-20	22213-22224	host-tuning	
95-21	22224-22225	/	
95-22	22225-22235	nic-tuning	
95-23	22235-22236	/	
95-24	22237-22238	#	
95-25	22238-22248	hw.igb.rxd	
95-26	22248-22249	=	
95-27	22249-22250	"	
95-28	22250-22254	4096	
95-29	22254-22255	"	
95-30	22256-22257	#	
95-31	22258-22259	(	
95-32	22259-22266	default	
95-33	22267-22271	1024	
95-34	22271-22272	)	
95-35	22273-22274	#	
95-36	22274-22284	hw.igb.txd	
95-37	22284-22285	=	
95-38	22285-22286	"	
95-39	22286-22290	4096	
95-40	22290-22291	"	
95-41	22292-22293	#	
95-42	22294-22295	(	
95-43	22295-22302	default	
95-44	22303-22307	1024	
95-45	22307-22308	)	
95-46	22309-22310	#	
95-47	22311-22318	maximum	
95-48	22319-22325	number	
95-49	22326-22328	of	
95-50	22329-22339	interrupts	
95-51	22340-22343	per	
95-52	22344-22350	second	
95-53	22351-22360	generated	
95-54	22361-22363	by	
95-55	22364-22370	single	
95-56	22371-22374	igb	
95-57	22374-22375	(	
95-58	22375-22376	4	
95-59	22376-22377	)	
95-60	22378-22379	(	
95-61	22379-22386	default	
95-62	22387-22388	#	
95-63	22389-22393	8000	
95-64	22393-22394	)	
95-65	22394-22395	.	

#Text=FreeBSD 10 supports the new drivers which reduces interrupts
#Text=# significantly.
96-1	22396-22403	FreeBSD	
96-2	22404-22406	10	
96-3	22407-22415	supports	
96-4	22416-22419	the	
96-5	22420-22423	new	
96-6	22424-22431	drivers	
96-7	22432-22437	which	
96-8	22438-22445	reduces	
96-9	22446-22456	interrupts	
96-10	22457-22458	#	
96-11	22459-22472	significantly	
96-12	22472-22473	.	

#Text=#hw.igb.max_interrupt_rate="16000" # (default 8000)
#Text=# Intel igb(4): using older intel drivers and jumbo frames caused memory
#Text=# fragmentation as header splitting wouldn't allocate jumbo clusters.
97-1	22474-22475	#	
97-2	22475-22500	hw.igb.max_interrupt_rate	
97-3	22500-22501	=	
97-4	22501-22502	"	
97-5	22502-22507	16000	
97-6	22507-22508	"	
97-7	22509-22510	#	
97-8	22511-22512	(	
97-9	22512-22519	default	
97-10	22520-22524	8000	
97-11	22524-22525	)	
97-12	22526-22527	#	
97-13	22528-22533	Intel	
97-14	22534-22537	igb	
97-15	22537-22538	(	
97-16	22538-22539	4	
97-17	22539-22540	)	
97-18	22540-22541	:	
97-19	22542-22547	using	
97-20	22548-22553	older	
97-21	22554-22559	intel	
97-22	22560-22567	drivers	
97-23	22568-22571	and	
97-24	22572-22577	jumbo	
97-25	22578-22584	frames	
97-26	22585-22591	caused	
97-27	22592-22598	memory	
97-28	22599-22600	#	
97-29	22601-22614	fragmentation	
97-30	22615-22617	as	
97-31	22618-22624	header	
97-32	22625-22634	splitting	
97-33	22635-22643	wouldn't	
97-34	22644-22652	allocate	
97-35	22653-22658	jumbo	
97-36	22659-22667	clusters	
97-37	22667-22668	.	

#Text=The
#Text=# current intel drivers do not seem to have these issues, so headers splitting
#Text=# is disabled by default.
98-1	22669-22672	The	
98-2	22673-22674	#	
98-3	22675-22682	current	
98-4	22683-22688	intel	
98-5	22689-22696	drivers	
98-6	22697-22699	do	
98-7	22700-22703	not	
98-8	22704-22708	seem	
98-9	22709-22711	to	
98-10	22712-22716	have	
98-11	22717-22722	these	
98-12	22723-22729	issues	
98-13	22729-22730	,	
98-14	22731-22733	so	
98-15	22734-22741	headers	
98-16	22742-22751	splitting	
98-17	22752-22753	#	
98-18	22754-22756	is	
98-19	22757-22765	disabled	
98-20	22766-22768	by	
98-21	22769-22776	default	
98-22	22776-22777	.	

#Text=#hw.igb.header_split=0 # (default 0)
#Text=######################################### intel igb tuning ##############
#Text=# IPv6: disable automatically adding an IPv6 link-local address to interfaces.
#Text=# The link-local address conflict in Pf leading to issues with a global ipv6
#Text=# address and the link-local address.
99-1	22778-22779	#	
99-2	22779-22798	hw.igb.header_split	
99-3	22798-22799	=	
99-4	22799-22800	0	
99-5	22801-22802	#	
99-6	22803-22804	(	
99-7	22804-22811	default	
99-8	22812-22813	0	
99-9	22813-22814	)	
99-10	22815-22816	#	
99-11	22816-22817	#	
99-12	22817-22818	#	
99-13	22818-22819	#	
99-14	22819-22820	#	
99-15	22820-22821	#	
99-16	22821-22822	#	
99-17	22822-22823	#	
99-18	22823-22824	#	
99-19	22824-22825	#	
99-20	22825-22826	#	
99-21	22826-22827	#	
99-22	22827-22828	#	
99-23	22828-22829	#	
99-24	22829-22830	#	
99-25	22830-22831	#	
99-26	22831-22832	#	
99-27	22832-22833	#	
99-28	22833-22834	#	
99-29	22834-22835	#	
99-30	22835-22836	#	
99-31	22836-22837	#	
99-32	22837-22838	#	
99-33	22838-22839	#	
99-34	22839-22840	#	
99-35	22840-22841	#	
99-36	22841-22842	#	
99-37	22842-22843	#	
99-38	22843-22844	#	
99-39	22844-22845	#	
99-40	22845-22846	#	
99-41	22846-22847	#	
99-42	22847-22848	#	
99-43	22848-22849	#	
99-44	22849-22850	#	
99-45	22850-22851	#	
99-46	22851-22852	#	
99-47	22852-22853	#	
99-48	22853-22854	#	
99-49	22854-22855	#	
99-50	22855-22856	#	
99-51	22857-22862	intel	
99-52	22863-22866	igb	
99-53	22867-22873	tuning	
99-54	22874-22875	#	
99-55	22875-22876	#	
99-56	22876-22877	#	
99-57	22877-22878	#	
99-58	22878-22879	#	
99-59	22879-22880	#	
99-60	22880-22881	#	
99-61	22881-22882	#	
99-62	22882-22883	#	
99-63	22883-22884	#	
99-64	22884-22885	#	
99-65	22885-22886	#	
99-66	22886-22887	#	
99-67	22887-22888	#	
99-68	22889-22890	#	
99-69	22891-22895	IPv6	
99-70	22895-22896	:	
99-71	22897-22904	disable	
99-72	22905-22918	automatically	
99-73	22919-22925	adding	
99-74	22926-22928	an	
99-75	22929-22933	IPv6	
99-76	22934-22944	link-local	
99-77	22945-22952	address	
99-78	22953-22955	to	
99-79	22956-22966	interfaces	
99-80	22966-22967	.	
99-81	22968-22969	#	
99-82	22970-22973	The	
99-83	22974-22984	link-local	
99-84	22985-22992	address	
99-85	22993-23001	conflict	
99-86	23002-23004	in	
99-87	23005-23007	Pf	
99-88	23008-23015	leading	
99-89	23016-23018	to	
99-90	23019-23025	issues	
99-91	23026-23030	with	
99-92	23031-23032	a	
99-93	23033-23039	global	
99-94	23040-23044	ipv6	
99-95	23045-23046	#	
99-96	23047-23054	address	
99-97	23055-23058	and	
99-98	23059-23062	the	
99-99	23063-23073	link-local	
99-100	23074-23081	address	
99-101	23081-23082	.	

#Text=#net.inet6.ip6.auto_linklocal="0"
#Text=# (default 1, add fe80:: address)
#Text=# thermal sensors for intel or amd cpus
#Text=#coretemp_load="YES"
#Text=#amdtemp_load="YES"
#Text=# higher HZ settings have a negative impact on machine performance due to
#Text=# handling more timer interrupts resulting in more context switches and cache
#Text=# flushes (default 1000).
100-1	23083-23084	#	
100-2	23084-23093	net.inet6	
100-3	23093-23094	.	
100-4	23094-23097	ip6	
100-5	23097-23098	.	
100-6	23098-23112	auto_linklocal	
100-7	23112-23113	=	
100-8	23113-23114	"	
100-9	23114-23115	0	
100-10	23115-23116	"	
100-11	23117-23118	#	
100-12	23119-23120	(	
100-13	23120-23127	default	
100-14	23128-23129	1	
100-15	23129-23130	,	
100-16	23131-23134	add	
100-17	23135-23139	fe80	
100-18	23139-23140	:	
100-19	23140-23141	:	
100-20	23142-23149	address	
100-21	23149-23150	)	
100-22	23151-23152	#	
100-23	23153-23160	thermal	
100-24	23161-23168	sensors	
100-25	23169-23172	for	
100-26	23173-23178	intel	
100-27	23179-23181	or	
100-28	23182-23185	amd	
100-29	23186-23190	cpus	
100-30	23191-23192	#	
100-31	23192-23205	coretemp_load	
100-32	23205-23206	=	
100-33	23206-23207	"	
100-34	23207-23210	YES	
100-35	23210-23211	"	
100-36	23212-23213	#	
100-37	23213-23225	amdtemp_load	
100-38	23225-23226	=	
100-39	23226-23227	"	
100-40	23227-23230	YES	
100-41	23230-23231	"	
100-42	23232-23233	#	
100-43	23234-23240	higher	
100-44	23241-23243	HZ	
100-45	23244-23252	settings	
100-46	23253-23257	have	
100-47	23258-23259	a	
100-48	23260-23268	negative	
100-49	23269-23275	impact	
100-50	23276-23278	on	
100-51	23279-23286	machine	
100-52	23287-23298	performance	
100-53	23299-23302	due	
100-54	23303-23305	to	
100-55	23306-23307	#	
100-56	23308-23316	handling	
100-57	23317-23321	more	
100-58	23322-23327	timer	
100-59	23328-23338	interrupts	
100-60	23339-23348	resulting	
100-61	23349-23351	in	
100-62	23352-23356	more	
100-63	23357-23364	context	
100-64	23365-23373	switches	
100-65	23374-23377	and	
100-66	23378-23383	cache	
100-67	23384-23385	#	
100-68	23386-23393	flushes	
100-69	23394-23395	(	
100-70	23395-23402	default	
100-71	23403-23407	1000	
100-72	23407-23408	)	
100-73	23408-23409	.	

#Text=Lower HZ settings can have a detrimental effect on
#Text=# ZFS.
#Text=# http://lists.freebsd.org/pipermail/freebsd-questions/2005-April/083482.html
#Text=# Also take a look into kern.sched.interact and kern.sched.slice in
#Text=# /etc/sysctl.conf
#Text=#kern.hz=1000
#Text=# increase the number of network mbufs the system is willing to allocate.
101-1	23410-23415	Lower	
101-2	23416-23418	HZ	
101-3	23419-23427	settings	
101-4	23428-23431	can	
101-5	23432-23436	have	
101-6	23437-23438	a	
101-7	23439-23450	detrimental	
101-8	23451-23457	effect	
101-9	23458-23460	on	
101-10	23461-23462	#	
101-11	23463-23466	ZFS	
101-12	23466-23467	.	
101-13	23468-23469	#	
101-14	23470-23474	http	
101-15	23474-23475	:	
101-16	23475-23476	/	
101-17	23476-23477	/	
101-18	23477-23494	lists.freebsd.org	
101-19	23494-23495	/	
101-20	23495-23504	pipermail	
101-21	23504-23505	/	
101-22	23505-23522	freebsd-questions	
101-23	23522-23523	/	
101-24	23523-23527	2005	
101-25	23527-23528	-	
101-26	23528-23533	April	
101-27	23533-23534	/	
101-28	23534-23540	083482	
101-29	23540-23541	.	
101-30	23541-23545	html	
101-31	23546-23547	#	
101-32	23548-23552	Also	
101-33	23553-23557	take	
101-34	23558-23559	a	
101-35	23560-23564	look	
101-36	23565-23569	into	
101-37	23570-23589	kern.sched.interact	
101-38	23590-23593	and	
101-39	23594-23610	kern.sched.slice	
101-40	23611-23613	in	
101-41	23614-23615	#	
101-42	23616-23617	/	
101-43	23617-23620	etc	
101-44	23620-23621	/	
101-45	23621-23632	sysctl.conf	
101-46	23633-23634	#	
101-47	23634-23641	kern.hz	
101-48	23641-23642	=	
101-49	23642-23646	1000	
101-50	23647-23648	#	
101-51	23649-23657	increase	
101-52	23658-23661	the	
101-53	23662-23668	number	
101-54	23669-23671	of	
101-55	23672-23679	network	
101-56	23680-23685	mbufs	
101-57	23686-23689	the	
101-58	23690-23696	system	
101-59	23697-23699	is	
101-60	23700-23707	willing	
101-61	23708-23710	to	
101-62	23711-23719	allocate	
101-63	23719-23720	.	

#Text=Each
#Text=# cluster represents approximately 2K of memory, so a value of 524288
#Text=# represents 1GB of kernel memory reserved for network buffers.
102-1	23721-23725	Each	
102-2	23726-23727	#	
102-3	23728-23735	cluster	
102-4	23736-23746	represents	
102-5	23747-23760	approximately	
102-6	23761-23763	2K	
102-7	23764-23766	of	
102-8	23767-23773	memory	
102-9	23773-23774	,	
102-10	23775-23777	so	
102-11	23778-23779	a	
102-12	23780-23785	value	
102-13	23786-23788	of	
102-14	23789-23795	524288	
102-15	23796-23797	#	
102-16	23798-23808	represents	
102-17	23809-23812	1GB	
102-18	23813-23815	of	
102-19	23816-23822	kernel	
102-20	23823-23829	memory	
102-21	23830-23838	reserved	
102-22	23839-23842	for	
102-23	23843-23850	network	
102-24	23851-23858	buffers	
102-25	23858-23859	.	

#Text=(default
#Text=# 492680)
#Text=#kern.ipc.nmbclusters="492680"
#Text=#kern.ipc.nmbjumbop="246339"
#Text=# maximum number of interrupts per second on any interrupt level (vmstat -i for
#Text=# total rate).
103-1	23860-23861	(	
103-2	23861-23868	default	
103-3	23869-23870	#	
103-4	23871-23877	492680	
103-5	23877-23878	)	
103-6	23879-23880	#	
103-7	23880-23900	kern.ipc.nmbclusters	
103-8	23900-23901	=	
103-9	23901-23902	"	
103-10	23902-23908	492680	
103-11	23908-23909	"	
103-12	23910-23911	#	
103-13	23911-23929	kern.ipc.nmbjumbop	
103-14	23929-23930	=	
103-15	23930-23931	"	
103-16	23931-23937	246339	
103-17	23937-23938	"	
103-18	23939-23940	#	
103-19	23941-23948	maximum	
103-20	23949-23955	number	
103-21	23956-23958	of	
103-22	23959-23969	interrupts	
103-23	23970-23973	per	
103-24	23974-23980	second	
103-25	23981-23983	on	
103-26	23984-23987	any	
103-27	23988-23997	interrupt	
103-28	23998-24003	level	
103-29	24004-24005	(	
103-30	24005-24011	vmstat	
103-31	24012-24013	-	
103-32	24013-24014	i	
103-33	24015-24018	for	
103-34	24019-24020	#	
103-35	24021-24026	total	
103-36	24027-24031	rate	
103-37	24031-24032	)	
103-38	24032-24033	.	

#Text=If you still see Interrupt Storm detected messages, increase the
#Text=# limit to a higher number and look for the culprit.
104-1	24034-24036	If	
104-2	24037-24040	you	
104-3	24041-24046	still	
104-4	24047-24050	see	
104-5	24051-24060	Interrupt	
104-6	24061-24066	Storm	
104-7	24067-24075	detected	
104-8	24076-24084	messages	
104-9	24084-24085	,	
104-10	24086-24094	increase	
104-11	24095-24098	the	
104-12	24099-24100	#	
104-13	24101-24106	limit	
104-14	24107-24109	to	
104-15	24110-24111	a	
104-16	24112-24118	higher	
104-17	24119-24125	number	
104-18	24126-24129	and	
104-19	24130-24134	look	
104-20	24135-24138	for	
104-21	24139-24142	the	
104-22	24143-24150	culprit	
104-23	24150-24151	.	

#Text=For 10gig NIC's set to
#Text=# 9000 and use large MTU.
105-1	24152-24155	For	
105-2	24156-24161	10gig	
105-3	24162-24167	NIC's	
105-4	24168-24171	set	
105-5	24172-24174	to	
105-6	24175-24176	#	
105-7	24177-24181	9000	
105-8	24182-24185	and	
105-9	24186-24189	use	
105-10	24190-24195	large	
105-11	24196-24199	MTU	
105-12	24199-24200	.	

#Text=(default 1000)
#Text=#hw.intr_storm_threshold="9000"
#Text=# Size of the syncache hash table, must be a power of 2 (default 512)
#Text=#net.inet.tcp.syncache.hashsize="1024"
#Text=# Limit the number of entries permitted in each bucket of the hash table.
106-1	24201-24202	(	
106-2	24202-24209	default	
106-3	24210-24214	1000	
106-4	24214-24215	)	
106-5	24216-24217	#	
106-6	24217-24240	hw.intr_storm_threshold	
106-7	24240-24241	=	
106-8	24241-24242	"	
106-9	24242-24246	9000	
106-10	24246-24247	"	
106-11	24248-24249	#	
106-12	24250-24254	Size	
106-13	24255-24257	of	
106-14	24258-24261	the	
106-15	24262-24270	syncache	
106-16	24271-24275	hash	
106-17	24276-24281	table	
106-18	24281-24282	,	
106-19	24283-24287	must	
106-20	24288-24290	be	
106-21	24291-24292	a	
106-22	24293-24298	power	
106-23	24299-24301	of	
106-24	24302-24303	2	
106-25	24304-24305	(	
106-26	24305-24312	default	
106-27	24313-24316	512	
106-28	24316-24317	)	
106-29	24318-24319	#	
106-30	24319-24349	net.inet.tcp.syncache.hashsize	
106-31	24349-24350	=	
106-32	24350-24351	"	
106-33	24351-24355	1024	
106-34	24355-24356	"	
106-35	24357-24358	#	
106-36	24359-24364	Limit	
106-37	24365-24368	the	
106-38	24369-24375	number	
106-39	24376-24378	of	
106-40	24379-24386	entries	
106-41	24387-24396	permitted	
106-42	24397-24399	in	
106-43	24400-24404	each	
106-44	24405-24411	bucket	
106-45	24412-24414	of	
106-46	24415-24418	the	
106-47	24419-24423	hash	
106-48	24424-24429	table	
106-49	24429-24430	.	

#Text=(default 30)
#Text=#net.inet.tcp.syncache.bucketlimit="100"
#Text=# number of hash table buckets to handle incoming tcp connections. a value of
#Text=# 65536 allows the system to handle millions incoming connections. each tcp
#Text=# entry in the hash table on x86_64 uses 252 bytes of ram.
#Text=vmstat -z | egrep
#Text=# "ITEM|tcpcb" (default 65536 which is ~16 million connections)
#Text=#net.inet.tcp.tcbhashsize="65536"
#Text=# when booting, display the ascii art FreeBSD Orb with the two horns on top.
#Text=# Just a cosmetic preference over "beastie", the multicolored daemon with
#Text=# pitchfork and oversized shoes.
107-1	24431-24432	(	
107-2	24432-24439	default	
107-3	24440-24442	30	
107-4	24442-24443	)	
107-5	24444-24445	#	
107-6	24445-24478	net.inet.tcp.syncache.bucketlimit	
107-7	24478-24479	=	
107-8	24479-24480	"	
107-9	24480-24483	100	
107-10	24483-24484	"	
107-11	24485-24486	#	
107-12	24487-24493	number	
107-13	24494-24496	of	
107-14	24497-24501	hash	
107-15	24502-24507	table	
107-16	24508-24515	buckets	
107-17	24516-24518	to	
107-18	24519-24525	handle	
107-19	24526-24534	incoming	
107-20	24535-24538	tcp	
107-21	24539-24550	connections	
107-22	24550-24551	.	
107-23	24552-24553	a	
107-24	24554-24559	value	
107-25	24560-24562	of	
107-26	24563-24564	#	
107-27	24565-24570	65536	
107-28	24571-24577	allows	
107-29	24578-24581	the	
107-30	24582-24588	system	
107-31	24589-24591	to	
107-32	24592-24598	handle	
107-33	24599-24607	millions	
107-34	24608-24616	incoming	
107-35	24617-24628	connections	
107-36	24628-24629	.	
107-37	24630-24634	each	
107-38	24635-24638	tcp	
107-39	24639-24640	#	
107-40	24641-24646	entry	
107-41	24647-24649	in	
107-42	24650-24653	the	
107-43	24654-24658	hash	
107-44	24659-24664	table	
107-45	24665-24667	on	
107-46	24668-24671	x86	
107-47	24671-24672	_	
107-48	24672-24674	64	
107-49	24675-24679	uses	
107-50	24680-24683	252	
107-51	24684-24689	bytes	
107-52	24690-24692	of	
107-53	24693-24696	ram	
107-54	24696-24697	.	
107-55	24698-24704	vmstat	
107-56	24705-24706	-	
107-57	24706-24707	z	
107-58	24708-24709	|	
107-59	24710-24715	egrep	
107-60	24716-24717	#	
107-61	24718-24719	"	
107-62	24719-24723	ITEM	
107-63	24723-24724	|	
107-64	24724-24729	tcpcb	
107-65	24729-24730	"	
107-66	24731-24732	(	
107-67	24732-24739	default	
107-68	24740-24745	65536	
107-69	24746-24751	which	
107-70	24752-24754	is	
107-71	24755-24756	~	
107-72	24756-24758	16	
107-73	24759-24766	million	
107-74	24767-24778	connections	
107-75	24778-24779	)	
107-76	24780-24781	#	
107-77	24781-24805	net.inet.tcp.tcbhashsize	
107-78	24805-24806	=	
107-79	24806-24807	"	
107-80	24807-24812	65536	
107-81	24812-24813	"	
107-82	24814-24815	#	
107-83	24816-24820	when	
107-84	24821-24828	booting	
107-85	24828-24829	,	
107-86	24830-24837	display	
107-87	24838-24841	the	
107-88	24842-24847	ascii	
107-89	24848-24851	art	
107-90	24852-24859	FreeBSD	
107-91	24860-24863	Orb	
107-92	24864-24868	with	
107-93	24869-24872	the	
107-94	24873-24876	two	
107-95	24877-24882	horns	
107-96	24883-24885	on	
107-97	24886-24889	top	
107-98	24889-24890	.	
107-99	24891-24892	#	
107-100	24893-24897	Just	
107-101	24898-24899	a	
107-102	24900-24908	cosmetic	
107-103	24909-24919	preference	
107-104	24920-24924	over	
107-105	24925-24926	"	
107-106	24926-24933	beastie	
107-107	24933-24934	"	
107-108	24934-24935	,	
107-109	24936-24939	the	
107-110	24940-24952	multicolored	
107-111	24953-24959	daemon	
107-112	24960-24964	with	
107-113	24965-24966	#	
107-114	24967-24976	pitchfork	
107-115	24977-24980	and	
107-116	24981-24990	oversized	
107-117	24991-24996	shoes	
107-118	24996-24997	.	

#Text=#loader_logo="orb"
#Text=# How many seconds to sit at the boot menu before booting the server.
108-1	24998-24999	#	
108-2	24999-25010	loader_logo	
108-3	25010-25011	=	
108-4	25011-25012	"	
108-5	25012-25015	orb	
108-6	25015-25016	"	
108-7	25017-25018	#	
108-8	25019-25022	How	
108-9	25023-25027	many	
108-10	25028-25035	seconds	
108-11	25036-25038	to	
108-12	25039-25042	sit	
108-13	25043-25045	at	
108-14	25046-25049	the	
108-15	25050-25054	boot	
108-16	25055-25059	menu	
108-17	25060-25066	before	
108-18	25067-25074	booting	
108-19	25075-25078	the	
108-20	25079-25085	server	
108-21	25085-25086	.	

#Text=Reduce
#Text=# this value for a faster booting machine or set to "-1" for no delay.
109-1	25087-25093	Reduce	
109-2	25094-25095	#	
109-3	25096-25100	this	
109-4	25101-25106	value	
109-5	25107-25110	for	
109-6	25111-25112	a	
109-7	25113-25119	faster	
109-8	25120-25127	booting	
109-9	25128-25135	machine	
109-10	25136-25138	or	
109-11	25139-25142	set	
109-12	25143-25145	to	
109-13	25146-25147	"	
109-14	25147-25148	-	
109-15	25148-25149	1	
109-16	25149-25150	"	
109-17	25151-25154	for	
109-18	25155-25157	no	
109-19	25158-25163	delay	
109-20	25163-25164	.	

#Text=For a
#Text=# server, you may want to increase this time if you have the BIOS auto boot
#Text=# after a power outage or brownout.
110-1	25165-25168	For	
110-2	25169-25170	a	
110-3	25171-25172	#	
110-4	25173-25179	server	
110-5	25179-25180	,	
110-6	25181-25184	you	
110-7	25185-25188	may	
110-8	25189-25193	want	
110-9	25194-25196	to	
110-10	25197-25205	increase	
110-11	25206-25210	this	
110-12	25211-25215	time	
110-13	25216-25218	if	
110-14	25219-25222	you	
110-15	25223-25227	have	
110-16	25228-25231	the	
110-17	25232-25236	BIOS	
110-18	25237-25241	auto	
110-19	25242-25246	boot	
110-20	25247-25248	#	
110-21	25249-25254	after	
110-22	25255-25256	a	
110-23	25257-25262	power	
110-24	25263-25269	outage	
110-25	25270-25272	or	
110-26	25273-25281	brownout	
110-27	25281-25282	.	

#Text=By increasing the delay you allow more time
#Text=# for the power grid to stabilize and UPS batteries to re-charge.
111-1	25283-25285	By	
111-2	25286-25296	increasing	
111-3	25297-25300	the	
111-4	25301-25306	delay	
111-5	25307-25310	you	
111-6	25311-25316	allow	
111-7	25317-25321	more	
111-8	25322-25326	time	
111-9	25327-25328	#	
111-10	25329-25332	for	
111-11	25333-25336	the	
111-12	25337-25342	power	
111-13	25343-25347	grid	
111-14	25348-25350	to	
111-15	25351-25360	stabilize	
111-16	25361-25364	and	
111-17	25365-25368	UPS	
111-18	25369-25378	batteries	
111-19	25379-25381	to	
111-20	25382-25391	re-charge	
111-21	25391-25392	.	

#Text=Ideally, you
#Text=# want to avoid the system fast booting into the OS and mounting the file
#Text=# system only to power off due to another brownout.
112-1	25393-25400	Ideally	
112-2	25400-25401	,	
112-3	25402-25405	you	
112-4	25406-25407	#	
112-5	25408-25412	want	
112-6	25413-25415	to	
112-7	25416-25421	avoid	
112-8	25422-25425	the	
112-9	25426-25432	system	
112-10	25433-25437	fast	
112-11	25438-25445	booting	
112-12	25446-25450	into	
112-13	25451-25454	the	
112-14	25455-25457	OS	
112-15	25458-25461	and	
112-16	25462-25470	mounting	
112-17	25471-25474	the	
112-18	25475-25479	file	
112-19	25480-25481	#	
112-20	25482-25488	system	
112-21	25489-25493	only	
112-22	25494-25496	to	
112-23	25497-25502	power	
112-24	25503-25506	off	
112-25	25507-25510	due	
112-26	25511-25513	to	
112-27	25514-25521	another	
112-28	25522-25530	brownout	
112-29	25530-25531	.	

#Text=If you are at the console
#Text=# during boot you can always hit enter to bypass this delay.
113-1	25532-25534	If	
113-2	25535-25538	you	
113-3	25539-25542	are	
113-4	25543-25545	at	
113-5	25546-25549	the	
113-6	25550-25557	console	
113-7	25558-25559	#	
113-8	25560-25566	during	
113-9	25567-25571	boot	
113-10	25572-25575	you	
113-11	25576-25579	can	
113-12	25580-25586	always	
113-13	25587-25590	hit	
113-14	25591-25596	enter	
113-15	25597-25599	to	
113-16	25600-25606	bypass	
113-17	25607-25611	this	
113-18	25612-25617	delay	
113-19	25617-25618	.	

#Text=#autoboot_delay="60"
#Text=# (default 10) seconds
#Text=#autoboot_delay="-1"
#Text=# (default 10) seconds
#Text=# NOTE regarding "net.isr.*" : Processor affinity can effectively reduce cache
#Text=# problems but it does not curb the persistent load-balancing problem.[1]
#Text=# Processor affinity becomes more complicated in systems with non-uniform
#Text=# architectures.
114-1	25619-25620	#	
114-2	25620-25634	autoboot_delay	
114-3	25634-25635	=	
114-4	25635-25636	"	
114-5	25636-25638	60	
114-6	25638-25639	"	
114-7	25640-25641	#	
114-8	25642-25643	(	
114-9	25643-25650	default	
114-10	25651-25653	10	
114-11	25653-25654	)	
114-12	25655-25662	seconds	
114-13	25663-25664	#	
114-14	25664-25678	autoboot_delay	
114-15	25678-25679	=	
114-16	25679-25680	"	
114-17	25680-25681	-	
114-18	25681-25682	1	
114-19	25682-25683	"	
114-20	25684-25685	#	
114-21	25686-25687	(	
114-22	25687-25694	default	
114-23	25695-25697	10	
114-24	25697-25698	)	
114-25	25699-25706	seconds	
114-26	25707-25708	#	
114-27	25709-25713	NOTE	
114-28	25714-25723	regarding	
114-29	25724-25725	"	
114-30	25725-25732	net.isr	
114-31	25732-25733	.	
114-32	25733-25734	*	
114-33	25734-25735	"	
114-34	25736-25737	:	
114-35	25738-25747	Processor	
114-36	25748-25756	affinity	
114-37	25757-25760	can	
114-38	25761-25772	effectively	
114-39	25773-25779	reduce	
114-40	25780-25785	cache	
114-41	25786-25787	#	
114-42	25788-25796	problems	
114-43	25797-25800	but	
114-44	25801-25803	it	
114-45	25804-25808	does	
114-46	25809-25812	not	
114-47	25813-25817	curb	
114-48	25818-25821	the	
114-49	25822-25832	persistent	
114-50	25833-25847	load-balancing	
114-51	25848-25855	problem	
114-52	25855-25856	.	
114-53	25856-25857	[	
114-54	25857-25858	1	
114-55	25858-25859	]	
114-56	25860-25861	#	
114-57	25862-25871	Processor	
114-58	25872-25880	affinity	
114-59	25881-25888	becomes	
114-60	25889-25893	more	
114-61	25894-25905	complicated	
114-62	25906-25908	in	
114-63	25909-25916	systems	
114-64	25917-25921	with	
114-65	25922-25933	non-uniform	
114-66	25934-25935	#	
114-67	25936-25949	architectures	
114-68	25949-25950	.	

#Text=A system with two dual-core hyper-threaded CPUs presents a
#Text=# challenge to a scheduling algorithm.
115-1	25951-25952	A	
115-2	25953-25959	system	
115-3	25960-25964	with	
115-4	25965-25968	two	
115-5	25969-25978	dual-core	
115-6	25979-25993	hyper-threaded	
115-7	25994-25998	CPUs	
115-8	25999-26007	presents	
115-9	26008-26009	a	
115-10	26010-26011	#	
115-11	26012-26021	challenge	
115-12	26022-26024	to	
115-13	26025-26026	a	
115-14	26027-26037	scheduling	
115-15	26038-26047	algorithm	
115-16	26047-26048	.	

#Text=There is complete affinity between two
#Text=# virtual CPUs implemented on the same core via hyper-threading, partial
#Text=# affinity between two cores on the same physical chip (as the cores share
#Text=# some, but not all, cache), and no affinity between separate physical chips.
#Text=# https://github.com/freebsd/freebsd/blob/master/sys/net/netisr.c
#Text=# qlimit for igmp, arp, ether and ip6 queues only (netstat -Q) (default 256)
#Text=#net.isr.defaultqlimit="256"
#Text=# limit per-workstream queues (use "netstat -Q" if Qdrop is greater then 0
#Text=# increase this directive) (default 10240)
#Text=#net.isr.maxqlimit="10240"
#Text=# SIFTR (Statistical Information For TCP Research) is a kernel module which
#Text=# logs a range of statistics on active TCP connections to a log file in comma
#Text=# separated format.
116-1	26049-26054	There	
116-2	26055-26057	is	
116-3	26058-26066	complete	
116-4	26067-26075	affinity	
116-5	26076-26083	between	
116-6	26084-26087	two	
116-7	26088-26089	#	
116-8	26090-26097	virtual	
116-9	26098-26102	CPUs	
116-10	26103-26114	implemented	
116-11	26115-26117	on	
116-12	26118-26121	the	
116-13	26122-26126	same	
116-14	26127-26131	core	
116-15	26132-26135	via	
116-16	26136-26151	hyper-threading	
116-17	26151-26152	,	
116-18	26153-26160	partial	
116-19	26161-26162	#	
116-20	26163-26171	affinity	
116-21	26172-26179	between	
116-22	26180-26183	two	
116-23	26184-26189	cores	
116-24	26190-26192	on	
116-25	26193-26196	the	
116-26	26197-26201	same	
116-27	26202-26210	physical	
116-28	26211-26215	chip	
116-29	26216-26217	(	
116-30	26217-26219	as	
116-31	26220-26223	the	
116-32	26224-26229	cores	
116-33	26230-26235	share	
116-34	26236-26237	#	
116-35	26238-26242	some	
116-36	26242-26243	,	
116-37	26244-26247	but	
116-38	26248-26251	not	
116-39	26252-26255	all	
116-40	26255-26256	,	
116-41	26257-26262	cache	
116-42	26262-26263	)	
116-43	26263-26264	,	
116-44	26265-26268	and	
116-45	26269-26271	no	
116-46	26272-26280	affinity	
116-47	26281-26288	between	
116-48	26289-26297	separate	
116-49	26298-26306	physical	
116-50	26307-26312	chips	
116-51	26312-26313	.	
116-52	26314-26315	#	
116-53	26316-26321	https	
116-54	26321-26322	:	
116-55	26322-26323	/	
116-56	26323-26324	/	
116-57	26324-26334	github.com	
116-58	26334-26335	/	
116-59	26335-26342	freebsd	
116-60	26342-26343	/	
116-61	26343-26350	freebsd	
116-62	26350-26351	/	
116-63	26351-26355	blob	
116-64	26355-26356	/	
116-65	26356-26362	master	
116-66	26362-26363	/	
116-67	26363-26366	sys	
116-68	26366-26367	/	
116-69	26367-26370	net	
116-70	26370-26371	/	
116-71	26371-26379	netisr.c	
116-72	26380-26381	#	
116-73	26382-26388	qlimit	
116-74	26389-26392	for	
116-75	26393-26397	igmp	
116-76	26397-26398	,	
116-77	26399-26402	arp	
116-78	26402-26403	,	
116-79	26404-26409	ether	
116-80	26410-26413	and	
116-81	26414-26417	ip6	
116-82	26418-26424	queues	
116-83	26425-26429	only	
116-84	26430-26431	(	
116-85	26431-26438	netstat	
116-86	26439-26440	-	
116-87	26440-26441	Q	
116-88	26441-26442	)	
116-89	26443-26444	(	
116-90	26444-26451	default	
116-91	26452-26455	256	
116-92	26455-26456	)	
116-93	26457-26458	#	
116-94	26458-26479	net.isr.defaultqlimit	
116-95	26479-26480	=	
116-96	26480-26481	"	
116-97	26481-26484	256	
116-98	26484-26485	"	
116-99	26486-26487	#	
116-100	26488-26493	limit	
116-101	26494-26508	per-workstream	
116-102	26509-26515	queues	
116-103	26516-26517	(	
116-104	26517-26520	use	
116-105	26521-26522	"	
116-106	26522-26529	netstat	
116-107	26530-26531	-	
116-108	26531-26532	Q	
116-109	26532-26533	"	
116-110	26534-26536	if	
116-111	26537-26542	Qdrop	
116-112	26543-26545	is	
116-113	26546-26553	greater	
116-114	26554-26558	then	
116-115	26559-26560	0	
116-116	26561-26562	#	
116-117	26563-26571	increase	
116-118	26572-26576	this	
116-119	26577-26586	directive	
116-120	26586-26587	)	
116-121	26588-26589	(	
116-122	26589-26596	default	
116-123	26597-26602	10240	
116-124	26602-26603	)	
116-125	26604-26605	#	
116-126	26605-26622	net.isr.maxqlimit	
116-127	26622-26623	=	
116-128	26623-26624	"	
116-129	26624-26629	10240	
116-130	26629-26630	"	
116-131	26631-26632	#	
116-132	26633-26638	SIFTR	
116-133	26639-26640	(	
116-134	26640-26651	Statistical	
116-135	26652-26663	Information	
116-136	26664-26667	For	
116-137	26668-26671	TCP	
116-138	26672-26680	Research	
116-139	26680-26681	)	
116-140	26682-26684	is	
116-141	26685-26686	a	
116-142	26687-26693	kernel	
116-143	26694-26700	module	
116-144	26701-26706	which	
116-145	26707-26708	#	
116-146	26709-26713	logs	
116-147	26714-26715	a	
116-148	26716-26721	range	
116-149	26722-26724	of	
116-150	26725-26735	statistics	
116-151	26736-26738	on	
116-152	26739-26745	active	
116-153	26746-26749	TCP	
116-154	26750-26761	connections	
116-155	26762-26764	to	
116-156	26765-26766	a	
116-157	26767-26770	log	
116-158	26771-26775	file	
116-159	26776-26778	in	
116-160	26779-26784	comma	
116-161	26785-26786	#	
116-162	26787-26796	separated	
116-163	26797-26803	format	
116-164	26803-26804	.	

#Text=Only useful for researching tcp flows as it does add some
#Text=# processing load to the system.
#Text=# http://manpages.ubuntu.com/manpages/precise/man4/siftr.4freebsd.html
#Text=#siftr_load="YES"
#Text=### EOF ###
#Text=The /etc/sysctl.conf
#Text=The /etc/sysctl.conf is the primary optimization file.
117-1	26805-26809	Only	
117-2	26810-26816	useful	
117-3	26817-26820	for	
117-4	26821-26832	researching	
117-5	26833-26836	tcp	
117-6	26837-26842	flows	
117-7	26843-26845	as	
117-8	26846-26848	it	
117-9	26849-26853	does	
117-10	26854-26857	add	
117-11	26858-26862	some	
117-12	26863-26864	#	
117-13	26865-26875	processing	
117-14	26876-26880	load	
117-15	26881-26883	to	
117-16	26884-26887	the	
117-17	26888-26894	system	
117-18	26894-26895	.	
117-19	26896-26897	#	
117-20	26898-26902	http	
117-21	26902-26903	:	
117-22	26903-26904	/	
117-23	26904-26905	/	
117-24	26905-26924	manpages.ubuntu.com	
117-25	26924-26925	/	
117-26	26925-26933	manpages	
117-27	26933-26934	/	
117-28	26934-26941	precise	
117-29	26941-26942	/	
117-30	26942-26946	man4	
117-31	26946-26947	/	
117-32	26947-26952	siftr	
117-33	26952-26966	.4freebsd.html	
117-34	26967-26968	#	
117-35	26968-26978	siftr_load	
117-36	26978-26979	=	
117-37	26979-26980	"	
117-38	26980-26983	YES	
117-39	26983-26984	"	
117-40	26985-26986	#	
117-41	26986-26987	#	
117-42	26987-26988	#	
117-43	26989-26992	EOF	
117-44	26993-26994	#	
117-45	26994-26995	#	
117-46	26995-26996	#	
117-47	26997-27000	The	
117-48	27001-27002	/	
117-49	27002-27005	etc	
117-50	27005-27006	/	
117-51	27006-27017	sysctl.conf	
117-52	27018-27021	The	
117-53	27022-27023	/	
117-54	27023-27026	etc	
117-55	27026-27027	/	
117-56	27027-27038	sysctl.conf	
117-57	27039-27041	is	
117-58	27042-27045	the	
117-59	27046-27053	primary	
117-60	27054-27066	optimization	
117-61	27067-27071	file	
117-62	27071-27072	.	

#Text=Everything from
#Text=congestion control to buffer changes can be found here.
118-1	27073-27083	Everything	
118-2	27084-27088	from	
118-3	27089-27099	congestion	
118-4	27100-27107	control	
118-5	27108-27110	to	
118-6	27111-27117	buffer	
118-7	27118-27125	changes	
118-8	27126-27129	can	
118-9	27130-27132	be	
118-10	27133-27138	found	
118-11	27139-27143	here	
118-12	27143-27144	.	

#Text=Again, each option we
#Text=changed is fully commented and may also have a link to a research study for
#Text=more information.
119-1	27145-27150	Again	
119-2	27150-27151	,	
119-3	27152-27156	each	
119-4	27157-27163	option	
119-5	27164-27166	we	
119-6	27167-27174	changed	
119-7	27175-27177	is	
119-8	27178-27183	fully	
119-9	27184-27193	commented	
119-10	27194-27197	and	
119-11	27198-27201	may	
119-12	27202-27206	also	
119-13	27207-27211	have	
119-14	27212-27213	a	
119-15	27214-27218	link	
119-16	27219-27221	to	
119-17	27222-27223	a	
119-18	27224-27232	research	
119-19	27233-27238	study	
119-20	27239-27242	for	
119-21	27243-27247	more	
119-22	27248-27259	information	
119-23	27259-27260	.	

#Text=Directives which are commented out are not used and included
#Text=for reference.
120-1	27261-27271	Directives	
120-2	27272-27277	which	
120-3	27278-27281	are	
120-4	27282-27291	commented	
120-5	27292-27295	out	
120-6	27296-27299	are	
120-7	27300-27303	not	
120-8	27304-27308	used	
120-9	27309-27312	and	
120-10	27313-27321	included	
120-11	27322-27325	for	
120-12	27326-27335	reference	
120-13	27335-27336	.	

#Text=This is a large file so take some time to look through each
#Text=option and understand why we made the change from default.
#Text=# Calomel.org
#Text=-|-
#Text=April 2021
#Text=# https://calomel.org/freebsd_network_tuning.html
#Text=# TCP Tuning: The throughput of connection is limited by two windows: the
#Text=# (Initial) Congestion Window and the TCP Receive Window (RWIN).
121-1	27337-27341	This	
121-2	27342-27344	is	
121-3	27345-27346	a	
121-4	27347-27352	large	
121-5	27353-27357	file	
121-6	27358-27360	so	
121-7	27361-27365	take	
121-8	27366-27370	some	
121-9	27371-27375	time	
121-10	27376-27378	to	
121-11	27379-27383	look	
121-12	27384-27391	through	
121-13	27392-27396	each	
121-14	27397-27403	option	
121-15	27404-27407	and	
121-16	27408-27418	understand	
121-17	27419-27422	why	
121-18	27423-27425	we	
121-19	27426-27430	made	
121-20	27431-27434	the	
121-21	27435-27441	change	
121-22	27442-27446	from	
121-23	27447-27454	default	
121-24	27454-27455	.	
121-25	27456-27457	#	
121-26	27458-27469	Calomel.org	
121-27	27470-27471	-	
121-28	27471-27472	|	
121-29	27472-27473	-	
121-30	27474-27479	April	
121-31	27480-27484	2021	
121-32	27485-27486	#	
121-33	27487-27492	https	
121-34	27492-27493	:	
121-35	27493-27494	/	
121-36	27494-27495	/	
121-37	27495-27506	calomel.org	
121-38	27506-27507	/	
121-39	27507-27534	freebsd_network_tuning.html	
121-40	27535-27536	#	
121-41	27537-27540	TCP	
121-42	27541-27547	Tuning	
121-43	27547-27548	:	
121-44	27549-27552	The	
121-45	27553-27563	throughput	
121-46	27564-27566	of	
121-47	27567-27577	connection	
121-48	27578-27580	is	
121-49	27581-27588	limited	
121-50	27589-27591	by	
121-51	27592-27595	two	
121-52	27596-27603	windows	
121-53	27603-27604	:	
121-54	27605-27608	the	
121-55	27609-27610	#	
121-56	27611-27612	(	
121-57	27612-27619	Initial	
121-58	27619-27620	)	
121-59	27621-27631	Congestion	
121-60	27632-27638	Window	
121-61	27639-27642	and	
121-62	27643-27646	the	
121-63	27647-27650	TCP	
121-64	27651-27658	Receive	
121-65	27659-27665	Window	
121-66	27666-27667	(	
121-67	27667-27671	RWIN	
121-68	27671-27672	)	
121-69	27672-27673	.	

#Text=The Congestion
#Text=# Window avoids exceeding the capacity of the network (RACK, CAIA, H-TCP or
#Text=# NewReno congestion control); and the Receive Window avoids exceeding the
#Text=# capacity of the receiver to process data (flow control).
122-1	27674-27677	The	
122-2	27678-27688	Congestion	
122-3	27689-27690	#	
122-4	27691-27697	Window	
122-5	27698-27704	avoids	
122-6	27705-27714	exceeding	
122-7	27715-27718	the	
122-8	27719-27727	capacity	
122-9	27728-27730	of	
122-10	27731-27734	the	
122-11	27735-27742	network	
122-12	27743-27744	(	
122-13	27744-27748	RACK	
122-14	27748-27749	,	
122-15	27750-27754	CAIA	
122-16	27754-27755	,	
122-17	27756-27761	H-TCP	
122-18	27762-27764	or	
122-19	27765-27766	#	
122-20	27767-27774	NewReno	
122-21	27775-27785	congestion	
122-22	27786-27793	control	
122-23	27793-27794	)	
122-24	27794-27795	;	
122-25	27796-27799	and	
122-26	27800-27803	the	
122-27	27804-27811	Receive	
122-28	27812-27818	Window	
122-29	27819-27825	avoids	
122-30	27826-27835	exceeding	
122-31	27836-27839	the	
122-32	27840-27841	#	
122-33	27842-27850	capacity	
122-34	27851-27853	of	
122-35	27854-27857	the	
122-36	27858-27866	receiver	
122-37	27867-27869	to	
122-38	27870-27877	process	
122-39	27878-27882	data	
122-40	27883-27884	(	
122-41	27884-27888	flow	
122-42	27889-27896	control	
122-43	27896-27897	)	
122-44	27897-27898	.	

#Text=When our server is
#Text=# able to process packets as fast as they are received we want to allow the
#Text=# remote sending host to send data as fast as the network, Congestion Window,
#Text=# will allow. https://en.wikipedia.org/wiki/TCP_tuning
#Text=# IPC Socket Buffer: the maximum combined socket buffer size, in bytes, defined
#Text=# by SO_SNDBUF and SO_RCVBUF. kern.ipc.maxsockbuf is also used to define the
#Text=# window scaling factor (wscale in tcpdump) our server will advertise.
123-1	27899-27903	When	
123-2	27904-27907	our	
123-3	27908-27914	server	
123-4	27915-27917	is	
123-5	27918-27919	#	
123-6	27920-27924	able	
123-7	27925-27927	to	
123-8	27928-27935	process	
123-9	27936-27943	packets	
123-10	27944-27946	as	
123-11	27947-27951	fast	
123-12	27952-27954	as	
123-13	27955-27959	they	
123-14	27960-27963	are	
123-15	27964-27972	received	
123-16	27973-27975	we	
123-17	27976-27980	want	
123-18	27981-27983	to	
123-19	27984-27989	allow	
123-20	27990-27993	the	
123-21	27994-27995	#	
123-22	27996-28002	remote	
123-23	28003-28010	sending	
123-24	28011-28015	host	
123-25	28016-28018	to	
123-26	28019-28023	send	
123-27	28024-28028	data	
123-28	28029-28031	as	
123-29	28032-28036	fast	
123-30	28037-28039	as	
123-31	28040-28043	the	
123-32	28044-28051	network	
123-33	28051-28052	,	
123-34	28053-28063	Congestion	
123-35	28064-28070	Window	
123-36	28070-28071	,	
123-37	28072-28073	#	
123-38	28074-28078	will	
123-39	28079-28084	allow	
123-40	28084-28085	.	
123-41	28086-28091	https	
123-42	28091-28092	:	
123-43	28092-28093	/	
123-44	28093-28094	/	
123-45	28094-28110	en.wikipedia.org	
123-46	28110-28111	/	
123-47	28111-28115	wiki	
123-48	28115-28116	/	
123-49	28116-28126	TCP_tuning	
123-50	28127-28128	#	
123-51	28129-28132	IPC	
123-52	28133-28139	Socket	
123-53	28140-28146	Buffer	
123-54	28146-28147	:	
123-55	28148-28151	the	
123-56	28152-28159	maximum	
123-57	28160-28168	combined	
123-58	28169-28175	socket	
123-59	28176-28182	buffer	
123-60	28183-28187	size	
123-61	28187-28188	,	
123-62	28189-28191	in	
123-63	28192-28197	bytes	
123-64	28197-28198	,	
123-65	28199-28206	defined	
123-66	28207-28208	#	
123-67	28209-28211	by	
123-68	28212-28221	SO_SNDBUF	
123-69	28222-28225	and	
123-70	28226-28235	SO_RCVBUF	
123-71	28235-28236	.	
123-72	28237-28256	kern.ipc.maxsockbuf	
123-73	28257-28259	is	
123-74	28260-28264	also	
123-75	28265-28269	used	
123-76	28270-28272	to	
123-77	28273-28279	define	
123-78	28280-28283	the	
123-79	28284-28285	#	
123-80	28286-28292	window	
123-81	28293-28300	scaling	
123-82	28301-28307	factor	
123-83	28308-28309	(	
123-84	28309-28315	wscale	
123-85	28316-28318	in	
123-86	28319-28326	tcpdump	
123-87	28326-28327	)	
123-88	28328-28331	our	
123-89	28332-28338	server	
123-90	28339-28343	will	
123-91	28344-28353	advertise	
123-92	28353-28354	.	

#Text=The
#Text=# window scaling factor is defined as the maximum volume of data allowed in
#Text=# transit before the recieving server is required to send an ACK packet
#Text=# (acknowledgment) to the sending server.
124-1	28355-28358	The	
124-2	28359-28360	#	
124-3	28361-28367	window	
124-4	28368-28375	scaling	
124-5	28376-28382	factor	
124-6	28383-28385	is	
124-7	28386-28393	defined	
124-8	28394-28396	as	
124-9	28397-28400	the	
124-10	28401-28408	maximum	
124-11	28409-28415	volume	
124-12	28416-28418	of	
124-13	28419-28423	data	
124-14	28424-28431	allowed	
124-15	28432-28434	in	
124-16	28435-28436	#	
124-17	28437-28444	transit	
124-18	28445-28451	before	
124-19	28452-28455	the	
124-20	28456-28465	recieving	
124-21	28466-28472	server	
124-22	28473-28475	is	
124-23	28476-28484	required	
124-24	28485-28487	to	
124-25	28488-28492	send	
124-26	28493-28495	an	
124-27	28496-28499	ACK	
124-28	28500-28506	packet	
124-29	28507-28508	#	
124-30	28509-28510	(	
124-31	28510-28524	acknowledgment	
124-32	28524-28525	)	
124-33	28526-28528	to	
124-34	28529-28532	the	
124-35	28533-28540	sending	
124-36	28541-28547	server	
124-37	28547-28548	.	

#Text=FreeBSD's default maxsockbuf value is
#Text=# two(2) megabytes which corresponds to a window scaling factor (wscale) of
#Text=# six(6) allowing the remote sender to transmit up to 2^6 x 65,535 bytes =
#Text=# 4,194,240 bytes (4MB) in flight, on the network before requiring an ACK
#Text=# packet from our server.
125-1	28549-28558	FreeBSD's	
125-2	28559-28566	default	
125-3	28567-28577	maxsockbuf	
125-4	28578-28583	value	
125-5	28584-28586	is	
125-6	28587-28588	#	
125-7	28589-28592	two	
125-8	28592-28593	(	
125-9	28593-28594	2	
125-10	28594-28595	)	
125-11	28596-28605	megabytes	
125-12	28606-28611	which	
125-13	28612-28623	corresponds	
125-14	28624-28626	to	
125-15	28627-28628	a	
125-16	28629-28635	window	
125-17	28636-28643	scaling	
125-18	28644-28650	factor	
125-19	28651-28652	(	
125-20	28652-28658	wscale	
125-21	28658-28659	)	
125-22	28660-28662	of	
125-23	28663-28664	#	
125-24	28665-28668	six	
125-25	28668-28669	(	
125-26	28669-28670	6	
125-27	28670-28671	)	
125-28	28672-28680	allowing	
125-29	28681-28684	the	
125-30	28685-28691	remote	
125-31	28692-28698	sender	
125-32	28699-28701	to	
125-33	28702-28710	transmit	
125-34	28711-28713	up	
125-35	28714-28716	to	
125-36	28717-28718	2	
125-37	28718-28719	^	
125-38	28719-28720	6	
125-39	28721-28722	x	
125-40	28723-28729	65,535	
125-41	28730-28735	bytes	
125-42	28736-28737	=	
125-43	28738-28739	#	
125-44	28740-28749	4,194,240	
125-45	28750-28755	bytes	
125-46	28756-28757	(	
125-47	28757-28760	4MB	
125-48	28760-28761	)	
125-49	28762-28764	in	
125-50	28765-28771	flight	
125-51	28771-28772	,	
125-52	28773-28775	on	
125-53	28776-28779	the	
125-54	28780-28787	network	
125-55	28788-28794	before	
125-56	28795-28804	requiring	
125-57	28805-28807	an	
125-58	28808-28811	ACK	
125-59	28812-28813	#	
125-60	28814-28820	packet	
125-61	28821-28825	from	
125-62	28826-28829	our	
125-63	28830-28836	server	
125-64	28836-28837	.	

#Text=In order to support the throughput of modern, long
#Text=# fat networks (LFN) with variable latency we suggest increasing the maximum
#Text=# socket buffer to at least 16MB if the system has enough RAM.
126-1	28838-28840	In	
126-2	28841-28846	order	
126-3	28847-28849	to	
126-4	28850-28857	support	
126-5	28858-28861	the	
126-6	28862-28872	throughput	
126-7	28873-28875	of	
126-8	28876-28882	modern	
126-9	28882-28883	,	
126-10	28884-28888	long	
126-11	28889-28890	#	
126-12	28891-28894	fat	
126-13	28895-28903	networks	
126-14	28904-28905	(	
126-15	28905-28908	LFN	
126-16	28908-28909	)	
126-17	28910-28914	with	
126-18	28915-28923	variable	
126-19	28924-28931	latency	
126-20	28932-28934	we	
126-21	28935-28942	suggest	
126-22	28943-28953	increasing	
126-23	28954-28957	the	
126-24	28958-28965	maximum	
126-25	28966-28967	#	
126-26	28968-28974	socket	
126-27	28975-28981	buffer	
126-28	28982-28984	to	
126-29	28985-28987	at	
126-30	28988-28993	least	
126-31	28994-28998	16MB	
126-32	28999-29001	if	
126-33	29002-29005	the	
126-34	29006-29012	system	
126-35	29013-29016	has	
126-36	29017-29023	enough	
126-37	29024-29027	RAM	
126-38	29027-29028	.	

#Text="netstat -m"
#Text=# displays the amount of network buffers used.
127-1	29029-29030	"	
127-2	29030-29037	netstat	
127-3	29038-29039	-	
127-4	29039-29040	m	
127-5	29040-29041	"	
127-6	29042-29043	#	
127-7	29044-29052	displays	
127-8	29053-29056	the	
127-9	29057-29063	amount	
127-10	29064-29066	of	
127-11	29067-29074	network	
127-12	29075-29082	buffers	
127-13	29083-29087	used	
127-14	29087-29088	.	

#Text=Increase kern.ipc.maxsockbuf if
#Text=# the counters for "mbufs denied" or "mbufs delayed" are greater than zero(0).
#Text=# https://en.wikipedia.org/wiki/TCP_window_scale_option
#Text=# https://en.wikipedia.org/wiki/Bandwidth-delay_product
#Text=# speed:
#Text=1 Gbit
#Text=maxsockbuf:
#Text=2MB
#Text=wscale:
#Text=in-flight:
#Text=2^6*65KB =
#Text=4MB (default)
#Text=# speed:
#Text=2 Gbit
#Text=maxsockbuf:
#Text=4MB
#Text=wscale:
#Text=in-flight:
#Text=2^7*65KB =
#Text=8MB
#Text=# speed:
#Text=10 Gbit
#Text=maxsockbuf:
#Text=16MB
#Text=wscale:
#Text=in-flight:
#Text=2^9*65KB =
#Text=32MB
#Text=# speed:
#Text=40 Gbit
#Text=maxsockbuf: 150MB
#Text=wscale: 12
#Text=in-flight: 2^12*65KB =
#Text=260MB
#Text=# speed: 100 Gbit
#Text=maxsockbuf: 600MB
#Text=wscale: 14
#Text=in-flight: 2^14*65KB = 1064MB
#Text=#kern.ipc.maxsockbuf=2097152
#Text=# (wscale
#Text=6 ; default)
#Text=#kern.ipc.maxsockbuf=4194304
#Text=# (wscale
#Text=#kern.ipc.maxsockbuf=16777216
#Text=# (wscale
#Text=#kern.ipc.maxsockbuf=157286400
#Text=# (wscale 12)
#Text=kern.ipc.maxsockbuf=614400000
#Text=# (wscale 14)
#Text=# TCP Buffers: Larger buffers and TCP Large Window Extensions (RFC1323) can
#Text=# help alleviate the long fat network (LFN) problem caused by insufficient
#Text=# window size; limited to 65535 bytes without RFC 1323 scaling.
128-1	29089-29097	Increase	
128-2	29098-29117	kern.ipc.maxsockbuf	
128-3	29118-29120	if	
128-4	29121-29122	#	
128-5	29123-29126	the	
128-6	29127-29135	counters	
128-7	29136-29139	for	
128-8	29140-29141	"	
128-9	29141-29146	mbufs	
128-10	29147-29153	denied	
128-11	29153-29154	"	
128-12	29155-29157	or	
128-13	29158-29159	"	
128-14	29159-29164	mbufs	
128-15	29165-29172	delayed	
128-16	29172-29173	"	
128-17	29174-29177	are	
128-18	29178-29185	greater	
128-19	29186-29190	than	
128-20	29191-29195	zero	
128-21	29195-29196	(	
128-22	29196-29197	0	
128-23	29197-29198	)	
128-24	29198-29199	.	
128-25	29200-29201	#	
128-26	29202-29207	https	
128-27	29207-29208	:	
128-28	29208-29209	/	
128-29	29209-29210	/	
128-30	29210-29226	en.wikipedia.org	
128-31	29226-29227	/	
128-32	29227-29231	wiki	
128-33	29231-29232	/	
128-34	29232-29255	TCP_window_scale_option	
128-35	29256-29257	#	
128-36	29258-29263	https	
128-37	29263-29264	:	
128-38	29264-29265	/	
128-39	29265-29266	/	
128-40	29266-29282	en.wikipedia.org	
128-41	29282-29283	/	
128-42	29283-29287	wiki	
128-43	29287-29288	/	
128-44	29288-29311	Bandwidth-delay_product	
128-45	29312-29313	#	
128-46	29314-29319	speed	
128-47	29319-29320	:	
128-48	29321-29322	1	
128-49	29323-29327	Gbit	
128-50	29328-29338	maxsockbuf	
128-51	29338-29339	:	
128-52	29340-29343	2MB	
128-53	29344-29350	wscale	
128-54	29350-29351	:	
128-55	29352-29361	in-flight	
128-56	29361-29362	:	
128-57	29363-29364	2	
128-58	29364-29365	^	
128-59	29365-29366	6	
128-60	29366-29367	*	
128-61	29367-29371	65KB	
128-62	29372-29373	=	
128-63	29374-29377	4MB	
128-64	29378-29379	(	
128-65	29379-29386	default	
128-66	29386-29387	)	
128-67	29388-29389	#	
128-68	29390-29395	speed	
128-69	29395-29396	:	
128-70	29397-29398	2	
128-71	29399-29403	Gbit	
128-72	29404-29414	maxsockbuf	
128-73	29414-29415	:	
128-74	29416-29419	4MB	
128-75	29420-29426	wscale	
128-76	29426-29427	:	
128-77	29428-29437	in-flight	
128-78	29437-29438	:	
128-79	29439-29440	2	
128-80	29440-29441	^	
128-81	29441-29442	7	
128-82	29442-29443	*	
128-83	29443-29447	65KB	
128-84	29448-29449	=	
128-85	29450-29453	8MB	
128-86	29454-29455	#	
128-87	29456-29461	speed	
128-88	29461-29462	:	
128-89	29463-29465	10	
128-90	29466-29470	Gbit	
128-91	29471-29481	maxsockbuf	
128-92	29481-29482	:	
128-93	29483-29487	16MB	
128-94	29488-29494	wscale	
128-95	29494-29495	:	
128-96	29496-29505	in-flight	
128-97	29505-29506	:	
128-98	29507-29508	2	
128-99	29508-29509	^	
128-100	29509-29510	9	
128-101	29510-29511	*	
128-102	29511-29515	65KB	
128-103	29516-29517	=	
128-104	29518-29522	32MB	
128-105	29523-29524	#	
128-106	29525-29530	speed	
128-107	29530-29531	:	
128-108	29532-29534	40	
128-109	29535-29539	Gbit	
128-110	29540-29550	maxsockbuf	
128-111	29550-29551	:	
128-112	29552-29557	150MB	
128-113	29558-29564	wscale	
128-114	29564-29565	:	
128-115	29566-29568	12	
128-116	29569-29578	in-flight	
128-117	29578-29579	:	
128-118	29580-29581	2	
128-119	29581-29582	^	
128-120	29582-29584	12	
128-121	29584-29585	*	
128-122	29585-29589	65KB	
128-123	29590-29591	=	
128-124	29592-29597	260MB	
128-125	29598-29599	#	
128-126	29600-29605	speed	
128-127	29605-29606	:	
128-128	29607-29610	100	
128-129	29611-29615	Gbit	
128-130	29616-29626	maxsockbuf	
128-131	29626-29627	:	
128-132	29628-29633	600MB	
128-133	29634-29640	wscale	
128-134	29640-29641	:	
128-135	29642-29644	14	
128-136	29645-29654	in-flight	
128-137	29654-29655	:	
128-138	29656-29657	2	
128-139	29657-29658	^	
128-140	29658-29660	14	
128-141	29660-29661	*	
128-142	29661-29665	65KB	
128-143	29666-29667	=	
128-144	29668-29674	1064MB	
128-145	29675-29676	#	
128-146	29676-29695	kern.ipc.maxsockbuf	
128-147	29695-29696	=	
128-148	29696-29703	2097152	
128-149	29704-29705	#	
128-150	29706-29707	(	
128-151	29707-29713	wscale	
128-152	29714-29715	6	
128-153	29716-29717	;	
128-154	29718-29725	default	
128-155	29725-29726	)	
128-156	29727-29728	#	
128-157	29728-29747	kern.ipc.maxsockbuf	
128-158	29747-29748	=	
128-159	29748-29755	4194304	
128-160	29756-29757	#	
128-161	29758-29759	(	
128-162	29759-29765	wscale	
128-163	29766-29767	#	
128-164	29767-29786	kern.ipc.maxsockbuf	
128-165	29786-29787	=	
128-166	29787-29795	16777216	
128-167	29796-29797	#	
128-168	29798-29799	(	
128-169	29799-29805	wscale	
128-170	29806-29807	#	
128-171	29807-29826	kern.ipc.maxsockbuf	
128-172	29826-29827	=	
128-173	29827-29836	157286400	
128-174	29837-29838	#	
128-175	29839-29840	(	
128-176	29840-29846	wscale	
128-177	29847-29849	12	
128-178	29849-29850	)	
128-179	29851-29870	kern.ipc.maxsockbuf	
128-180	29870-29871	=	
128-181	29871-29880	614400000	
128-182	29881-29882	#	
128-183	29883-29884	(	
128-184	29884-29890	wscale	
128-185	29891-29893	14	
128-186	29893-29894	)	
128-187	29895-29896	#	
128-188	29897-29900	TCP	
128-189	29901-29908	Buffers	
128-190	29908-29909	:	
128-191	29910-29916	Larger	
128-192	29917-29924	buffers	
128-193	29925-29928	and	
128-194	29929-29932	TCP	
128-195	29933-29938	Large	
128-196	29939-29945	Window	
128-197	29946-29956	Extensions	
128-198	29957-29958	(	
128-199	29958-29965	RFC1323	
128-200	29965-29966	)	
128-201	29967-29970	can	
128-202	29971-29972	#	
128-203	29973-29977	help	
128-204	29978-29987	alleviate	
128-205	29988-29991	the	
128-206	29992-29996	long	
128-207	29997-30000	fat	
128-208	30001-30008	network	
128-209	30009-30010	(	
128-210	30010-30013	LFN	
128-211	30013-30014	)	
128-212	30015-30022	problem	
128-213	30023-30029	caused	
128-214	30030-30032	by	
128-215	30033-30045	insufficient	
128-216	30046-30047	#	
128-217	30048-30054	window	
128-218	30055-30059	size	
128-219	30059-30060	;	
128-220	30061-30068	limited	
128-221	30069-30071	to	
128-222	30072-30077	65535	
128-223	30078-30083	bytes	
128-224	30084-30091	without	
128-225	30092-30095	RFC	
128-226	30096-30100	1323	
128-227	30101-30108	scaling	
128-228	30108-30109	.	

#Text=Verify the
#Text=# window scaling extension is enabled with net.inet.tcp.rfc1323=1, which is
#Text=# default.
129-1	30110-30116	Verify	
129-2	30117-30120	the	
129-3	30121-30122	#	
129-4	30123-30129	window	
129-5	30130-30137	scaling	
129-6	30138-30147	extension	
129-7	30148-30150	is	
129-8	30151-30158	enabled	
129-9	30159-30163	with	
129-10	30164-30184	net.inet.tcp.rfc1323	
129-11	30184-30185	=	
129-12	30185-30186	1	
129-13	30186-30187	,	
129-14	30188-30193	which	
129-15	30194-30196	is	
129-16	30197-30198	#	
129-17	30199-30206	default	
129-18	30206-30207	.	

#Text=Both the client and server must support RFC 1323 to take advantage
#Text=# of scalable buffers.
130-1	30208-30212	Both	
130-2	30213-30216	the	
130-3	30217-30223	client	
130-4	30224-30227	and	
130-5	30228-30234	server	
130-6	30235-30239	must	
130-7	30240-30247	support	
130-8	30248-30251	RFC	
130-9	30252-30256	1323	
130-10	30257-30259	to	
130-11	30260-30264	take	
130-12	30265-30274	advantage	
130-13	30275-30276	#	
130-14	30277-30279	of	
130-15	30280-30288	scalable	
130-16	30289-30296	buffers	
130-17	30296-30297	.	

#Text=A network connection at 100Mbit/sec with a latency of 10
#Text=# milliseconds has a bandwidth-delay product of 125 kilobytes
#Text=# ((100*10^6*10*10^-3)/8=125000) which is the same BDP of a 1Gbit LAN with
#Text=# one(1) millisecond latency ((1000*10^6*1*10^-3)/8=125000 bytes).
131-1	30298-30299	A	
131-2	30300-30307	network	
131-3	30308-30318	connection	
131-4	30319-30321	at	
131-5	30322-30329	100Mbit	
131-6	30329-30330	/	
131-7	30330-30333	sec	
131-8	30334-30338	with	
131-9	30339-30340	a	
131-10	30341-30348	latency	
131-11	30349-30351	of	
131-12	30352-30354	10	
131-13	30355-30356	#	
131-14	30357-30369	milliseconds	
131-15	30370-30373	has	
131-16	30374-30375	a	
131-17	30376-30391	bandwidth-delay	
131-18	30392-30399	product	
131-19	30400-30402	of	
131-20	30403-30406	125	
131-21	30407-30416	kilobytes	
131-22	30417-30418	#	
131-23	30419-30420	(	
131-24	30420-30421	(	
131-25	30421-30424	100	
131-26	30424-30425	*	
131-27	30425-30427	10	
131-28	30427-30428	^	
131-29	30428-30429	6	
131-30	30429-30430	*	
131-31	30430-30432	10	
131-32	30432-30433	*	
131-33	30433-30435	10	
131-34	30435-30436	^	
131-35	30436-30437	-	
131-36	30437-30438	3	
131-37	30438-30439	)	
131-38	30439-30440	/	
131-39	30440-30441	8	
131-40	30441-30442	=	
131-41	30442-30448	125000	
131-42	30448-30449	)	
131-43	30450-30455	which	
131-44	30456-30458	is	
131-45	30459-30462	the	
131-46	30463-30467	same	
131-47	30468-30471	BDP	
131-48	30472-30474	of	
131-49	30475-30476	a	
131-50	30477-30482	1Gbit	
131-51	30483-30486	LAN	
131-52	30487-30491	with	
131-53	30492-30493	#	
131-54	30494-30497	one	
131-55	30497-30498	(	
131-56	30498-30499	1	
131-57	30499-30500	)	
131-58	30501-30512	millisecond	
131-59	30513-30520	latency	
131-60	30521-30522	(	
131-61	30522-30523	(	
131-62	30523-30527	1000	
131-63	30527-30528	*	
131-64	30528-30530	10	
131-65	30530-30531	^	
131-66	30531-30532	6	
131-67	30532-30533	*	
131-68	30533-30534	1	
131-69	30534-30535	*	
131-70	30535-30537	10	
131-71	30537-30538	^	
131-72	30538-30539	-	
131-73	30539-30540	3	
131-74	30540-30541	)	
131-75	30541-30542	/	
131-76	30542-30543	8	
131-77	30543-30544	=	
131-78	30544-30550	125000	
131-79	30551-30556	bytes	
131-80	30556-30557	)	
131-81	30557-30558	.	

#Text=As the
#Text=# latency and/or throughput increase so does the BDP.
132-1	30559-30561	As	
132-2	30562-30565	the	
132-3	30566-30567	#	
132-4	30568-30575	latency	
132-5	30576-30579	and	
132-6	30579-30580	/	
132-7	30580-30582	or	
132-8	30583-30593	throughput	
132-9	30594-30602	increase	
132-10	30603-30605	so	
132-11	30606-30610	does	
132-12	30611-30614	the	
132-13	30615-30618	BDP	
132-14	30618-30619	.	

#Text=If the connection needs
#Text=# more buffer space the kernel will dynamically increase these network buffer
#Text=# values by net.inet.tcp.sendbuf_inc and net.inet.tcp.recvbuf_inc increments.
#Text=# Use "netstat -an" to watch Recv-Q and Send-Q as the kernel increases the
#Text=# network buffer up to net.inet.tcp.recvbuf_max and net.inet.tcp.sendbuf_max .
#Text=# https://en.wikipedia.org/wiki/Bandwidth-delay_product
#Text=#net.inet.tcp.recvbuf_inc=65536
#Text=# (default 16384)
#Text=net.inet.tcp.recvbuf_max=4194304
#Text=# (default 2097152)
#Text=net.inet.tcp.recvspace=65536
#Text=# (default 65536)
#Text=net.inet.tcp.sendbuf_inc=65536
#Text=# (default 8192)
#Text=net.inet.tcp.sendbuf_max=4194304
#Text=# (default 2097152)
#Text=net.inet.tcp.sendspace=65536
#Text=# (default 32768)
#Text=# maximum segment size (MSS) specifies the largest payload of data in a single
#Text=# IPv4 TCP segment.
133-1	30620-30622	If	
133-2	30623-30626	the	
133-3	30627-30637	connection	
133-4	30638-30643	needs	
133-5	30644-30645	#	
133-6	30646-30650	more	
133-7	30651-30657	buffer	
133-8	30658-30663	space	
133-9	30664-30667	the	
133-10	30668-30674	kernel	
133-11	30675-30679	will	
133-12	30680-30691	dynamically	
133-13	30692-30700	increase	
133-14	30701-30706	these	
133-15	30707-30714	network	
133-16	30715-30721	buffer	
133-17	30722-30723	#	
133-18	30724-30730	values	
133-19	30731-30733	by	
133-20	30734-30758	net.inet.tcp.sendbuf_inc	
133-21	30759-30762	and	
133-22	30763-30787	net.inet.tcp.recvbuf_inc	
133-23	30788-30798	increments	
133-24	30798-30799	.	
133-25	30800-30801	#	
133-26	30802-30805	Use	
133-27	30806-30807	"	
133-28	30807-30814	netstat	
133-29	30815-30816	-	
133-30	30816-30818	an	
133-31	30818-30819	"	
133-32	30820-30822	to	
133-33	30823-30828	watch	
133-34	30829-30835	Recv-Q	
133-35	30836-30839	and	
133-36	30840-30846	Send-Q	
133-37	30847-30849	as	
133-38	30850-30853	the	
133-39	30854-30860	kernel	
133-40	30861-30870	increases	
133-41	30871-30874	the	
133-42	30875-30876	#	
133-43	30877-30884	network	
133-44	30885-30891	buffer	
133-45	30892-30894	up	
133-46	30895-30897	to	
133-47	30898-30922	net.inet.tcp.recvbuf_max	
133-48	30923-30926	and	
133-49	30927-30951	net.inet.tcp.sendbuf_max	
133-50	30952-30953	.	
133-51	30954-30955	#	
133-52	30956-30961	https	
133-53	30961-30962	:	
133-54	30962-30963	/	
133-55	30963-30964	/	
133-56	30964-30980	en.wikipedia.org	
133-57	30980-30981	/	
133-58	30981-30985	wiki	
133-59	30985-30986	/	
133-60	30986-31009	Bandwidth-delay_product	
133-61	31010-31011	#	
133-62	31011-31035	net.inet.tcp.recvbuf_inc	
133-63	31035-31036	=	
133-64	31036-31041	65536	
133-65	31042-31043	#	
133-66	31044-31045	(	
133-67	31045-31052	default	
133-68	31053-31058	16384	
133-69	31058-31059	)	
133-70	31060-31084	net.inet.tcp.recvbuf_max	
133-71	31084-31085	=	
133-72	31085-31092	4194304	
133-73	31093-31094	#	
133-74	31095-31096	(	
133-75	31096-31103	default	
133-76	31104-31111	2097152	
133-77	31111-31112	)	
133-78	31113-31135	net.inet.tcp.recvspace	
133-79	31135-31136	=	
133-80	31136-31141	65536	
133-81	31142-31143	#	
133-82	31144-31145	(	
133-83	31145-31152	default	
133-84	31153-31158	65536	
133-85	31158-31159	)	
133-86	31160-31184	net.inet.tcp.sendbuf_inc	
133-87	31184-31185	=	
133-88	31185-31190	65536	
133-89	31191-31192	#	
133-90	31193-31194	(	
133-91	31194-31201	default	
133-92	31202-31206	8192	
133-93	31206-31207	)	
133-94	31208-31232	net.inet.tcp.sendbuf_max	
133-95	31232-31233	=	
133-96	31233-31240	4194304	
133-97	31241-31242	#	
133-98	31243-31244	(	
133-99	31244-31251	default	
133-100	31252-31259	2097152	
133-101	31259-31260	)	
133-102	31261-31283	net.inet.tcp.sendspace	
133-103	31283-31284	=	
133-104	31284-31289	65536	
133-105	31290-31291	#	
133-106	31292-31293	(	
133-107	31293-31300	default	
133-108	31301-31306	32768	
133-109	31306-31307	)	
133-110	31308-31309	#	
133-111	31310-31317	maximum	
133-112	31318-31325	segment	
133-113	31326-31330	size	
133-114	31331-31332	(	
133-115	31332-31335	MSS	
133-116	31335-31336	)	
133-117	31337-31346	specifies	
133-118	31347-31350	the	
133-119	31351-31358	largest	
133-120	31359-31366	payload	
133-121	31367-31369	of	
133-122	31370-31374	data	
133-123	31375-31377	in	
133-124	31378-31379	a	
133-125	31380-31386	single	
133-126	31387-31388	#	
133-127	31389-31393	IPv4	
133-128	31394-31397	TCP	
133-129	31398-31405	segment	
133-130	31405-31406	.	

#Text=RFC 6691 states the maximum segment size should equal the
#Text=# effective MTU minus the fixed IP and TCP headers, but before subtracting IP
#Text=# options like TCP timestamps.
134-1	31407-31410	RFC	
134-2	31411-31415	6691	
134-3	31416-31422	states	
134-4	31423-31426	the	
134-5	31427-31434	maximum	
134-6	31435-31442	segment	
134-7	31443-31447	size	
134-8	31448-31454	should	
134-9	31455-31460	equal	
134-10	31461-31464	the	
134-11	31465-31466	#	
134-12	31467-31476	effective	
134-13	31477-31480	MTU	
134-14	31481-31486	minus	
134-15	31487-31490	the	
134-16	31491-31496	fixed	
134-17	31497-31499	IP	
134-18	31500-31503	and	
134-19	31504-31507	TCP	
134-20	31508-31515	headers	
134-21	31515-31516	,	
134-22	31517-31520	but	
134-23	31521-31527	before	
134-24	31528-31539	subtracting	
134-25	31540-31542	IP	
134-26	31543-31544	#	
134-27	31545-31552	options	
134-28	31553-31557	like	
134-29	31558-31561	TCP	
134-30	31562-31572	timestamps	
134-31	31572-31573	.	

#Text=Path MTU Discovery (PMTUD) is not supported by
#Text=# all internet paths and can lead to increased connection setup latency so the
#Text=# MMS can be defined manually.
#Text=# Option 1 - Maximum Payload - To construct the maximum MMS, start with an
#Text=# ethernet frame size of 1514 bytes and subtract 14 bytes for the ethernet
#Text=# header for an interface MTU of 1500 bytes.
135-1	31574-31578	Path	
135-2	31579-31582	MTU	
135-3	31583-31592	Discovery	
135-4	31593-31594	(	
135-5	31594-31599	PMTUD	
135-6	31599-31600	)	
135-7	31601-31603	is	
135-8	31604-31607	not	
135-9	31608-31617	supported	
135-10	31618-31620	by	
135-11	31621-31622	#	
135-12	31623-31626	all	
135-13	31627-31635	internet	
135-14	31636-31641	paths	
135-15	31642-31645	and	
135-16	31646-31649	can	
135-17	31650-31654	lead	
135-18	31655-31657	to	
135-19	31658-31667	increased	
135-20	31668-31678	connection	
135-21	31679-31684	setup	
135-22	31685-31692	latency	
135-23	31693-31695	so	
135-24	31696-31699	the	
135-25	31700-31701	#	
135-26	31702-31705	MMS	
135-27	31706-31709	can	
135-28	31710-31712	be	
135-29	31713-31720	defined	
135-30	31721-31729	manually	
135-31	31729-31730	.	
135-32	31731-31732	#	
135-33	31733-31739	Option	
135-34	31740-31741	1	
135-35	31742-31743	-	
135-36	31744-31751	Maximum	
135-37	31752-31759	Payload	
135-38	31760-31761	-	
135-39	31762-31764	To	
135-40	31765-31774	construct	
135-41	31775-31778	the	
135-42	31779-31786	maximum	
135-43	31787-31790	MMS	
135-44	31790-31791	,	
135-45	31792-31797	start	
135-46	31798-31802	with	
135-47	31803-31805	an	
135-48	31806-31807	#	
135-49	31808-31816	ethernet	
135-50	31817-31822	frame	
135-51	31823-31827	size	
135-52	31828-31830	of	
135-53	31831-31835	1514	
135-54	31836-31841	bytes	
135-55	31842-31845	and	
135-56	31846-31854	subtract	
135-57	31855-31857	14	
135-58	31858-31863	bytes	
135-59	31864-31867	for	
135-60	31868-31871	the	
135-61	31872-31880	ethernet	
135-62	31881-31882	#	
135-63	31883-31889	header	
135-64	31890-31893	for	
135-65	31894-31896	an	
135-66	31897-31906	interface	
135-67	31907-31910	MTU	
135-68	31911-31913	of	
135-69	31914-31918	1500	
135-70	31919-31924	bytes	
135-71	31924-31925	.	

#Text=Then subtract 20 bytes for the IP
#Text=# header and 20 bytes for the TCP header to equal an Maximum Segment Size (MSS)
#Text=# of tcp.mssdflt=1460 bytes.
136-1	31926-31930	Then	
136-2	31931-31939	subtract	
136-3	31940-31942	20	
136-4	31943-31948	bytes	
136-5	31949-31952	for	
136-6	31953-31956	the	
136-7	31957-31959	IP	
136-8	31960-31961	#	
136-9	31962-31968	header	
136-10	31969-31972	and	
136-11	31973-31975	20	
136-12	31976-31981	bytes	
136-13	31982-31985	for	
136-14	31986-31989	the	
136-15	31990-31993	TCP	
136-16	31994-32000	header	
136-17	32001-32003	to	
136-18	32004-32009	equal	
136-19	32010-32012	an	
136-20	32013-32020	Maximum	
136-21	32021-32028	Segment	
136-22	32029-32033	Size	
136-23	32034-32035	(	
136-24	32035-32038	MSS	
136-25	32038-32039	)	
136-26	32040-32041	#	
136-27	32042-32044	of	
136-28	32045-32056	tcp.mssdflt	
136-29	32056-32057	=	
136-30	32057-32061	1460	
136-31	32062-32067	bytes	
136-32	32067-32068	.	

#Text=With net.inet.tcp.rfc1323 enabled the packet
#Text=# payload is reduced by a further 12 bytes and the MSS is reduced from
#Text=# tcp.mssdflt=1460 bytes to a packet payload of 1448 bytes total.
137-1	32069-32073	With	
137-2	32074-32094	net.inet.tcp.rfc1323	
137-3	32095-32102	enabled	
137-4	32103-32106	the	
137-5	32107-32113	packet	
137-6	32114-32115	#	
137-7	32116-32123	payload	
137-8	32124-32126	is	
137-9	32127-32134	reduced	
137-10	32135-32137	by	
137-11	32138-32139	a	
137-12	32140-32147	further	
137-13	32148-32150	12	
137-14	32151-32156	bytes	
137-15	32157-32160	and	
137-16	32161-32164	the	
137-17	32165-32168	MSS	
137-18	32169-32171	is	
137-19	32172-32179	reduced	
137-20	32180-32184	from	
137-21	32185-32186	#	
137-22	32187-32198	tcp.mssdflt	
137-23	32198-32199	=	
137-24	32199-32203	1460	
137-25	32204-32209	bytes	
137-26	32210-32212	to	
137-27	32213-32214	a	
137-28	32215-32221	packet	
137-29	32222-32229	payload	
137-30	32230-32232	of	
137-31	32233-32237	1448	
137-32	32238-32243	bytes	
137-33	32244-32249	total	
137-34	32249-32250	.	

#Text=An MMS of
#Text=# 1448 bytes has a 95.64% packet efficiency (1448/1514=0.9564).
#Text=# Option 2 - No Frags - Google states the HTTP/3 QUIC (Quick UDP Internet
#Text=# Connection) IPv4 datagram should be no larger than 1280 octets to attempt to
#Text=# avoid any packet fragmentation over any Internet path.
138-1	32251-32253	An	
138-2	32254-32257	MMS	
138-3	32258-32260	of	
138-4	32261-32262	#	
138-5	32263-32267	1448	
138-6	32268-32273	bytes	
138-7	32274-32277	has	
138-8	32278-32279	a	
138-9	32280-32286	95.64%	
138-10	32287-32293	packet	
138-11	32294-32304	efficiency	
138-12	32305-32306	(	
138-13	32306-32310	1448	
138-14	32310-32311	/	
138-15	32311-32315	1514	
138-16	32315-32316	=	
138-17	32316-32322	0.9564	
138-18	32322-32323	)	
138-19	32323-32324	.	
138-20	32325-32326	#	
138-21	32327-32333	Option	
138-22	32334-32335	2	
138-23	32336-32337	-	
138-24	32338-32340	No	
138-25	32341-32346	Frags	
138-26	32347-32348	-	
138-27	32349-32355	Google	
138-28	32356-32362	states	
138-29	32363-32366	the	
138-30	32367-32371	HTTP	
138-31	32371-32372	/	
138-32	32372-32373	3	
138-33	32374-32378	QUIC	
138-34	32379-32380	(	
138-35	32380-32385	Quick	
138-36	32386-32389	UDP	
138-37	32390-32398	Internet	
138-38	32399-32400	#	
138-39	32401-32411	Connection	
138-40	32411-32412	)	
138-41	32413-32417	IPv4	
138-42	32418-32426	datagram	
138-43	32427-32433	should	
138-44	32434-32436	be	
138-45	32437-32439	no	
138-46	32440-32446	larger	
138-47	32447-32451	than	
138-48	32452-32456	1280	
138-49	32457-32463	octets	
138-50	32464-32466	to	
138-51	32467-32474	attempt	
138-52	32475-32477	to	
138-53	32478-32479	#	
138-54	32480-32485	avoid	
138-55	32486-32489	any	
138-56	32490-32496	packet	
138-57	32497-32510	fragmentation	
138-58	32511-32515	over	
138-59	32516-32519	any	
138-60	32520-32528	Internet	
138-61	32529-32533	path	
138-62	32533-32534	.	

#Text=To follow Google's
#Text=# no-fragment UDP policy for TCP packets set FreeBSD's MSS to 1240 bytes.
139-1	32535-32537	To	
139-2	32538-32544	follow	
139-3	32545-32553	Google's	
139-4	32554-32555	#	
139-5	32556-32567	no-fragment	
139-6	32568-32571	UDP	
139-7	32572-32578	policy	
139-8	32579-32582	for	
139-9	32583-32586	TCP	
139-10	32587-32594	packets	
139-11	32595-32598	set	
139-12	32599-32608	FreeBSD's	
139-13	32609-32612	MSS	
139-14	32613-32615	to	
139-15	32616-32620	1240	
139-16	32621-32626	bytes	
139-17	32626-32627	.	

#Text=To
#Text=# construct Google's no-fragment datagram start with an ethernet frame size of
#Text=# 1294 bytes and subtract 14 bytes for the ethernet header to equal Google's
#Text=# recommended PMTU size of 1280 bytes.
140-1	32628-32630	To	
140-2	32631-32632	#	
140-3	32633-32642	construct	
140-4	32643-32651	Google's	
140-5	32652-32663	no-fragment	
140-6	32664-32672	datagram	
140-7	32673-32678	start	
140-8	32679-32683	with	
140-9	32684-32686	an	
140-10	32687-32695	ethernet	
140-11	32696-32701	frame	
140-12	32702-32706	size	
140-13	32707-32709	of	
140-14	32710-32711	#	
140-15	32712-32716	1294	
140-16	32717-32722	bytes	
140-17	32723-32726	and	
140-18	32727-32735	subtract	
140-19	32736-32738	14	
140-20	32739-32744	bytes	
140-21	32745-32748	for	
140-22	32749-32752	the	
140-23	32753-32761	ethernet	
140-24	32762-32768	header	
140-25	32769-32771	to	
140-26	32772-32777	equal	
140-27	32778-32786	Google's	
140-28	32787-32788	#	
140-29	32789-32800	recommended	
140-30	32801-32805	PMTU	
140-31	32806-32810	size	
140-32	32811-32813	of	
140-33	32814-32818	1280	
140-34	32819-32824	bytes	
140-35	32824-32825	.	

#Text=Then subtract 20 bytes for the IP header
#Text=# and 20 bytes for the TCP header to equal tcp.mssdflt=1240 bytes.
141-1	32826-32830	Then	
141-2	32831-32839	subtract	
141-3	32840-32842	20	
141-4	32843-32848	bytes	
141-5	32849-32852	for	
141-6	32853-32856	the	
141-7	32857-32859	IP	
141-8	32860-32866	header	
141-9	32867-32868	#	
141-10	32869-32872	and	
141-11	32873-32875	20	
141-12	32876-32881	bytes	
141-13	32882-32885	for	
141-14	32886-32889	the	
141-15	32890-32893	TCP	
141-16	32894-32900	header	
141-17	32901-32903	to	
141-18	32904-32909	equal	
141-19	32910-32921	tcp.mssdflt	
141-20	32921-32922	=	
141-21	32922-32926	1240	
141-22	32927-32932	bytes	
141-23	32932-32933	.	

#Text=Then, before
#Text=# the packet is sent, FreeBSD will set the TCP timestamp (rfc1323) on the
#Text=# packet reducing the true packet payload (MSS) another 12 bytes from
#Text=# tcp.mssdflt=1240 bytes to 1228 bytes which has an 94.89% packet efficiency
#Text=# (1228/1294=0.9489). https://tools.ietf.org/html/draft-ietf-quic-transport-20
#Text=# Broken packets: IP fragmentation is flawed
#Text=# https://blog.cloudflare.com/ip-fragmentation-is-broken/
#Text=# FYI: PF with an outgoing scrub rule will re-package the packet using an MTU
#Text=# of 1460 by default, thus overriding the mssdflt setting wasting CPU time and
#Text=# adding latency.
#Text=net.inet.tcp.mssdflt=1460
#Text=# Option 1 (default 536)
#Text=#net.inet.tcp.mssdflt=1240
#Text=# Option 2 (default 536)
#Text=# minimum, maximum segment size (mMSS) specifies the smallest payload of data
#Text=# in a single IPv4 TCP segment our system will agree to send when negotiating
#Text=# with the client.
142-1	32934-32938	Then	
142-2	32938-32939	,	
142-3	32940-32946	before	
142-4	32947-32948	#	
142-5	32949-32952	the	
142-6	32953-32959	packet	
142-7	32960-32962	is	
142-8	32963-32967	sent	
142-9	32967-32968	,	
142-10	32969-32976	FreeBSD	
142-11	32977-32981	will	
142-12	32982-32985	set	
142-13	32986-32989	the	
142-14	32990-32993	TCP	
142-15	32994-33003	timestamp	
142-16	33004-33005	(	
142-17	33005-33012	rfc1323	
142-18	33012-33013	)	
142-19	33014-33016	on	
142-20	33017-33020	the	
142-21	33021-33022	#	
142-22	33023-33029	packet	
142-23	33030-33038	reducing	
142-24	33039-33042	the	
142-25	33043-33047	true	
142-26	33048-33054	packet	
142-27	33055-33062	payload	
142-28	33063-33064	(	
142-29	33064-33067	MSS	
142-30	33067-33068	)	
142-31	33069-33076	another	
142-32	33077-33079	12	
142-33	33080-33085	bytes	
142-34	33086-33090	from	
142-35	33091-33092	#	
142-36	33093-33104	tcp.mssdflt	
142-37	33104-33105	=	
142-38	33105-33109	1240	
142-39	33110-33115	bytes	
142-40	33116-33118	to	
142-41	33119-33123	1228	
142-42	33124-33129	bytes	
142-43	33130-33135	which	
142-44	33136-33139	has	
142-45	33140-33142	an	
142-46	33143-33149	94.89%	
142-47	33150-33156	packet	
142-48	33157-33167	efficiency	
142-49	33168-33169	#	
142-50	33170-33171	(	
142-51	33171-33175	1228	
142-52	33175-33176	/	
142-53	33176-33180	1294	
142-54	33180-33181	=	
142-55	33181-33187	0.9489	
142-56	33187-33188	)	
142-57	33188-33189	.	
142-58	33190-33195	https	
142-59	33195-33196	:	
142-60	33196-33197	/	
142-61	33197-33198	/	
142-62	33198-33212	tools.ietf.org	
142-63	33212-33213	/	
142-64	33213-33217	html	
142-65	33217-33218	/	
142-66	33218-33243	draft-ietf-quic-transport	
142-67	33243-33244	-	
142-68	33244-33246	20	
142-69	33247-33248	#	
142-70	33249-33255	Broken	
142-71	33256-33263	packets	
142-72	33263-33264	:	
142-73	33265-33267	IP	
142-74	33268-33281	fragmentation	
142-75	33282-33284	is	
142-76	33285-33291	flawed	
142-77	33292-33293	#	
142-78	33294-33299	https	
142-79	33299-33300	:	
142-80	33300-33301	/	
142-81	33301-33302	/	
142-82	33302-33321	blog.cloudflare.com	
142-83	33321-33322	/	
142-84	33322-33348	ip-fragmentation-is-broken	
142-85	33348-33349	/	
142-86	33350-33351	#	
142-87	33352-33355	FYI	
142-88	33355-33356	:	
142-89	33357-33359	PF	
142-90	33360-33364	with	
142-91	33365-33367	an	
142-92	33368-33376	outgoing	
142-93	33377-33382	scrub	
142-94	33383-33387	rule	
142-95	33388-33392	will	
142-96	33393-33403	re-package	
142-97	33404-33407	the	
142-98	33408-33414	packet	
142-99	33415-33420	using	
142-100	33421-33423	an	
142-101	33424-33427	MTU	
142-102	33428-33429	#	
142-103	33430-33432	of	
142-104	33433-33437	1460	
142-105	33438-33440	by	
142-106	33441-33448	default	
142-107	33448-33449	,	
142-108	33450-33454	thus	
142-109	33455-33465	overriding	
142-110	33466-33469	the	
142-111	33470-33477	mssdflt	
142-112	33478-33485	setting	
142-113	33486-33493	wasting	
142-114	33494-33497	CPU	
142-115	33498-33502	time	
142-116	33503-33506	and	
142-117	33507-33508	#	
142-118	33509-33515	adding	
142-119	33516-33523	latency	
142-120	33523-33524	.	
142-121	33525-33545	net.inet.tcp.mssdflt	
142-122	33545-33546	=	
142-123	33546-33550	1460	
142-124	33551-33552	#	
142-125	33553-33559	Option	
142-126	33560-33561	1	
142-127	33562-33563	(	
142-128	33563-33570	default	
142-129	33571-33574	536	
142-130	33574-33575	)	
142-131	33576-33577	#	
142-132	33577-33597	net.inet.tcp.mssdflt	
142-133	33597-33598	=	
142-134	33598-33602	1240	
142-135	33603-33604	#	
142-136	33605-33611	Option	
142-137	33612-33613	2	
142-138	33614-33615	(	
142-139	33615-33622	default	
142-140	33623-33626	536	
142-141	33626-33627	)	
142-142	33628-33629	#	
142-143	33630-33637	minimum	
142-144	33637-33638	,	
142-145	33639-33646	maximum	
142-146	33647-33654	segment	
142-147	33655-33659	size	
142-148	33660-33661	(	
142-149	33661-33665	mMSS	
142-150	33665-33666	)	
142-151	33667-33676	specifies	
142-152	33677-33680	the	
142-153	33681-33689	smallest	
142-154	33690-33697	payload	
142-155	33698-33700	of	
142-156	33701-33705	data	
142-157	33706-33707	#	
142-158	33708-33710	in	
142-159	33711-33712	a	
142-160	33713-33719	single	
142-161	33720-33724	IPv4	
142-162	33725-33728	TCP	
142-163	33729-33736	segment	
142-164	33737-33740	our	
142-165	33741-33747	system	
142-166	33748-33752	will	
142-167	33753-33758	agree	
142-168	33759-33761	to	
142-169	33762-33766	send	
142-170	33767-33771	when	
142-171	33772-33783	negotiating	
142-172	33784-33785	#	
142-173	33786-33790	with	
142-174	33791-33794	the	
142-175	33795-33801	client	
142-176	33801-33802	.	

#Text=RFC 6691 states that a minimum MTU size of 576 bytes must be
#Text=# supported and the MSS option should equal the effective MTU minus the fixed
#Text=# IP and TCP headers, but without subtracting IP or TCP options.
143-1	33803-33806	RFC	
143-2	33807-33811	6691	
143-3	33812-33818	states	
143-4	33819-33823	that	
143-5	33824-33825	a	
143-6	33826-33833	minimum	
143-7	33834-33837	MTU	
143-8	33838-33842	size	
143-9	33843-33845	of	
143-10	33846-33849	576	
143-11	33850-33855	bytes	
143-12	33856-33860	must	
143-13	33861-33863	be	
143-14	33864-33865	#	
143-15	33866-33875	supported	
143-16	33876-33879	and	
143-17	33880-33883	the	
143-18	33884-33887	MSS	
143-19	33888-33894	option	
143-20	33895-33901	should	
143-21	33902-33907	equal	
143-22	33908-33911	the	
143-23	33912-33921	effective	
143-24	33922-33925	MTU	
143-25	33926-33931	minus	
143-26	33932-33935	the	
143-27	33936-33941	fixed	
143-28	33942-33943	#	
143-29	33944-33946	IP	
143-30	33947-33950	and	
143-31	33951-33954	TCP	
143-32	33955-33962	headers	
143-33	33962-33963	,	
143-34	33964-33967	but	
143-35	33968-33975	without	
143-36	33976-33987	subtracting	
143-37	33988-33990	IP	
143-38	33991-33993	or	
143-39	33994-33997	TCP	
143-40	33998-34005	options	
143-41	34005-34006	.	

#Text=To construct
#Text=# the minimum MSS start with a frame size of 590 bytes and subtract 14 bytes
#Text=# for the ethernet header to equal the RFC 6691 recomended MTU size of 576
#Text=# bytes.
144-1	34007-34009	To	
144-2	34010-34019	construct	
144-3	34020-34021	#	
144-4	34022-34025	the	
144-5	34026-34033	minimum	
144-6	34034-34037	MSS	
144-7	34038-34043	start	
144-8	34044-34048	with	
144-9	34049-34050	a	
144-10	34051-34056	frame	
144-11	34057-34061	size	
144-12	34062-34064	of	
144-13	34065-34068	590	
144-14	34069-34074	bytes	
144-15	34075-34078	and	
144-16	34079-34087	subtract	
144-17	34088-34090	14	
144-18	34091-34096	bytes	
144-19	34097-34098	#	
144-20	34099-34102	for	
144-21	34103-34106	the	
144-22	34107-34115	ethernet	
144-23	34116-34122	header	
144-24	34123-34125	to	
144-25	34126-34131	equal	
144-26	34132-34135	the	
144-27	34136-34139	RFC	
144-28	34140-34144	6691	
144-29	34145-34155	recomended	
144-30	34156-34159	MTU	
144-31	34160-34164	size	
144-32	34165-34167	of	
144-33	34168-34171	576	
144-34	34172-34173	#	
144-35	34174-34179	bytes	
144-36	34179-34180	.	

#Text=Continue by subtracting 20 bytes for the IP header and 20 bytes for
#Text=# the TCP header to equal tcp.minmss=536 bytes.
145-1	34181-34189	Continue	
145-2	34190-34192	by	
145-3	34193-34204	subtracting	
145-4	34205-34207	20	
145-5	34208-34213	bytes	
145-6	34214-34217	for	
145-7	34218-34221	the	
145-8	34222-34224	IP	
145-9	34225-34231	header	
145-10	34232-34235	and	
145-11	34236-34238	20	
145-12	34239-34244	bytes	
145-13	34245-34248	for	
145-14	34249-34250	#	
145-15	34251-34254	the	
145-16	34255-34258	TCP	
145-17	34259-34265	header	
145-18	34266-34268	to	
145-19	34269-34274	equal	
145-20	34275-34285	tcp.minmss	
145-21	34285-34286	=	
145-22	34286-34289	536	
145-23	34290-34295	bytes	
145-24	34295-34296	.	

#Text=Then, before the packet is
#Text=# sent, FreeBSD will set the TCP timestamp (rfc1323) on the packet reducing the
#Text=# true packet payload (MSS) another 12 bytes from tcp.minmss=536 bytes to 524
#Text=# bytes which is 90.9% packet efficiency (524/576=0.909).
146-1	34297-34301	Then	
146-2	34301-34302	,	
146-3	34303-34309	before	
146-4	34310-34313	the	
146-5	34314-34320	packet	
146-6	34321-34323	is	
146-7	34324-34325	#	
146-8	34326-34330	sent	
146-9	34330-34331	,	
146-10	34332-34339	FreeBSD	
146-11	34340-34344	will	
146-12	34345-34348	set	
146-13	34349-34352	the	
146-14	34353-34356	TCP	
146-15	34357-34366	timestamp	
146-16	34367-34368	(	
146-17	34368-34375	rfc1323	
146-18	34375-34376	)	
146-19	34377-34379	on	
146-20	34380-34383	the	
146-21	34384-34390	packet	
146-22	34391-34399	reducing	
146-23	34400-34403	the	
146-24	34404-34405	#	
146-25	34406-34410	true	
146-26	34411-34417	packet	
146-27	34418-34425	payload	
146-28	34426-34427	(	
146-29	34427-34430	MSS	
146-30	34430-34431	)	
146-31	34432-34439	another	
146-32	34440-34442	12	
146-33	34443-34448	bytes	
146-34	34449-34453	from	
146-35	34454-34464	tcp.minmss	
146-36	34464-34465	=	
146-37	34465-34468	536	
146-38	34469-34474	bytes	
146-39	34475-34477	to	
146-40	34478-34481	524	
146-41	34482-34483	#	
146-42	34484-34489	bytes	
146-43	34490-34495	which	
146-44	34496-34498	is	
146-45	34499-34504	90.9%	
146-46	34505-34511	packet	
146-47	34512-34522	efficiency	
146-48	34523-34524	(	
146-49	34524-34527	524	
146-50	34527-34528	/	
146-51	34528-34531	576	
146-52	34531-34532	=	
146-53	34532-34537	0.909	
146-54	34537-34538	)	
146-55	34538-34539	.	

#Text=The default mMMS is
#Text=# only 84% efficient (216/256=0.84).
#Text=net.inet.tcp.minmss=536
#Text=# (default 216)
#Text=# TCP Slow start gradually increases the data send rate until the TCP
#Text=# congestion algorithm (CDG, H-TCP) calculates the networks maximum carrying
#Text=# capacity without dropping packets.
147-1	34540-34543	The	
147-2	34544-34551	default	
147-3	34552-34556	mMMS	
147-4	34557-34559	is	
147-5	34560-34561	#	
147-6	34562-34566	only	
147-7	34567-34570	84%	
147-8	34571-34580	efficient	
147-9	34581-34582	(	
147-10	34582-34585	216	
147-11	34585-34586	/	
147-12	34586-34589	256	
147-13	34589-34590	=	
147-14	34590-34594	0.84	
147-15	34594-34595	)	
147-16	34595-34596	.	
147-17	34597-34616	net.inet.tcp.minmss	
147-18	34616-34617	=	
147-19	34617-34620	536	
147-20	34621-34622	#	
147-21	34623-34624	(	
147-22	34624-34631	default	
147-23	34632-34635	216	
147-24	34635-34636	)	
147-25	34637-34638	#	
147-26	34639-34642	TCP	
147-27	34643-34647	Slow	
147-28	34648-34653	start	
147-29	34654-34663	gradually	
147-30	34664-34673	increases	
147-31	34674-34677	the	
147-32	34678-34682	data	
147-33	34683-34687	send	
147-34	34688-34692	rate	
147-35	34693-34698	until	
147-36	34699-34702	the	
147-37	34703-34706	TCP	
147-38	34707-34708	#	
147-39	34709-34719	congestion	
147-40	34720-34729	algorithm	
147-41	34730-34731	(	
147-42	34731-34734	CDG	
147-43	34734-34735	,	
147-44	34736-34741	H-TCP	
147-45	34741-34742	)	
147-46	34743-34753	calculates	
147-47	34754-34757	the	
147-48	34758-34766	networks	
147-49	34767-34774	maximum	
147-50	34775-34783	carrying	
147-51	34784-34785	#	
147-52	34786-34794	capacity	
147-53	34795-34802	without	
147-54	34803-34811	dropping	
147-55	34812-34819	packets	
147-56	34819-34820	.	

#Text=TCP Congestion Control with Appropriate
#Text=# Byte Counting (ABC) allows our server to increase the maximum congestion
#Text=# window exponentially by the amount of data ACKed, but limits the maximum
#Text=# increment per ACK to (abc_l_var * maxseg) bytes.
148-1	34821-34824	TCP	
148-2	34825-34835	Congestion	
148-3	34836-34843	Control	
148-4	34844-34848	with	
148-5	34849-34860	Appropriate	
148-6	34861-34862	#	
148-7	34863-34867	Byte	
148-8	34868-34876	Counting	
148-9	34877-34878	(	
148-10	34878-34881	ABC	
148-11	34881-34882	)	
148-12	34883-34889	allows	
148-13	34890-34893	our	
148-14	34894-34900	server	
148-15	34901-34903	to	
148-16	34904-34912	increase	
148-17	34913-34916	the	
148-18	34917-34924	maximum	
148-19	34925-34935	congestion	
148-20	34936-34937	#	
148-21	34938-34944	window	
148-22	34945-34958	exponentially	
148-23	34959-34961	by	
148-24	34962-34965	the	
148-25	34966-34972	amount	
148-26	34973-34975	of	
148-27	34976-34980	data	
148-28	34981-34986	ACKed	
148-29	34986-34987	,	
148-30	34988-34991	but	
148-31	34992-34998	limits	
148-32	34999-35002	the	
148-33	35003-35010	maximum	
148-34	35011-35012	#	
148-35	35013-35022	increment	
148-36	35023-35026	per	
148-37	35027-35030	ACK	
148-38	35031-35033	to	
148-39	35034-35035	(	
148-40	35035-35044	abc_l_var	
148-41	35045-35046	*	
148-42	35047-35053	maxseg	
148-43	35053-35054	)	
148-44	35055-35060	bytes	
148-45	35060-35061	.	

#Text=An abc_l_var of 44 times a
#Text=# maxseg of 1460 bytes would allow slow start to increase the congestion window
#Text=# by more than 64 kilobytes per step; 65535 bytes is the TCP receive buffer
#Text=# size of most hosts without TCP window scaling.
#Text=net.inet.tcp.abc_l_var=44
#Text=# (default 2) if net.inet.tcp.mssdflt = 1460
#Text=#net.inet.tcp.abc_l_var=52
#Text=# (default 2) if net.inet.tcp.mssdflt = 1240
#Text=# Initial Congestion Window (initcwnd) limits the amount of segments TCP can
#Text=# send onto the network before receiving an ACK from the other machine.
#Text=# Increasing the TCP Initial Congestion Window will reduce data transfer
#Text=# latency during the slow start phase of a TCP connection.
149-1	35062-35064	An	
149-2	35065-35074	abc_l_var	
149-3	35075-35077	of	
149-4	35078-35080	44	
149-5	35081-35086	times	
149-6	35087-35088	a	
149-7	35089-35090	#	
149-8	35091-35097	maxseg	
149-9	35098-35100	of	
149-10	35101-35105	1460	
149-11	35106-35111	bytes	
149-12	35112-35117	would	
149-13	35118-35123	allow	
149-14	35124-35128	slow	
149-15	35129-35134	start	
149-16	35135-35137	to	
149-17	35138-35146	increase	
149-18	35147-35150	the	
149-19	35151-35161	congestion	
149-20	35162-35168	window	
149-21	35169-35170	#	
149-22	35171-35173	by	
149-23	35174-35178	more	
149-24	35179-35183	than	
149-25	35184-35186	64	
149-26	35187-35196	kilobytes	
149-27	35197-35200	per	
149-28	35201-35205	step	
149-29	35205-35206	;	
149-30	35207-35212	65535	
149-31	35213-35218	bytes	
149-32	35219-35221	is	
149-33	35222-35225	the	
149-34	35226-35229	TCP	
149-35	35230-35237	receive	
149-36	35238-35244	buffer	
149-37	35245-35246	#	
149-38	35247-35251	size	
149-39	35252-35254	of	
149-40	35255-35259	most	
149-41	35260-35265	hosts	
149-42	35266-35273	without	
149-43	35274-35277	TCP	
149-44	35278-35284	window	
149-45	35285-35292	scaling	
149-46	35292-35293	.	
149-47	35294-35316	net.inet.tcp.abc_l_var	
149-48	35316-35317	=	
149-49	35317-35319	44	
149-50	35320-35321	#	
149-51	35322-35323	(	
149-52	35323-35330	default	
149-53	35331-35332	2	
149-54	35332-35333	)	
149-55	35334-35336	if	
149-56	35337-35357	net.inet.tcp.mssdflt	
149-57	35358-35359	=	
149-58	35360-35364	1460	
149-59	35365-35366	#	
149-60	35366-35388	net.inet.tcp.abc_l_var	
149-61	35388-35389	=	
149-62	35389-35391	52	
149-63	35392-35393	#	
149-64	35394-35395	(	
149-65	35395-35402	default	
149-66	35403-35404	2	
149-67	35404-35405	)	
149-68	35406-35408	if	
149-69	35409-35429	net.inet.tcp.mssdflt	
149-70	35430-35431	=	
149-71	35432-35436	1240	
149-72	35437-35438	#	
149-73	35439-35446	Initial	
149-74	35447-35457	Congestion	
149-75	35458-35464	Window	
149-76	35465-35466	(	
149-77	35466-35474	initcwnd	
149-78	35474-35475	)	
149-79	35476-35482	limits	
149-80	35483-35486	the	
149-81	35487-35493	amount	
149-82	35494-35496	of	
149-83	35497-35505	segments	
149-84	35506-35509	TCP	
149-85	35510-35513	can	
149-86	35514-35515	#	
149-87	35516-35520	send	
149-88	35521-35525	onto	
149-89	35526-35529	the	
149-90	35530-35537	network	
149-91	35538-35544	before	
149-92	35545-35554	receiving	
149-93	35555-35557	an	
149-94	35558-35561	ACK	
149-95	35562-35566	from	
149-96	35567-35570	the	
149-97	35571-35576	other	
149-98	35577-35584	machine	
149-99	35584-35585	.	
149-100	35586-35587	#	
149-101	35588-35598	Increasing	
149-102	35599-35602	the	
149-103	35603-35606	TCP	
149-104	35607-35614	Initial	
149-105	35615-35625	Congestion	
149-106	35626-35632	Window	
149-107	35633-35637	will	
149-108	35638-35644	reduce	
149-109	35645-35649	data	
149-110	35650-35658	transfer	
149-111	35659-35660	#	
149-112	35661-35668	latency	
149-113	35669-35675	during	
149-114	35676-35679	the	
149-115	35680-35684	slow	
149-116	35685-35690	start	
149-117	35691-35696	phase	
149-118	35697-35699	of	
149-119	35700-35701	a	
149-120	35702-35705	TCP	
149-121	35706-35716	connection	
149-122	35716-35717	.	

#Text=The initial
#Text=# congestion window should be increased to speed up short, burst connections in
#Text=# order to send the most data in the shortest time frame without overloading
#Text=# any network buffers.
150-1	35718-35721	The	
150-2	35722-35729	initial	
150-3	35730-35731	#	
150-4	35732-35742	congestion	
150-5	35743-35749	window	
150-6	35750-35756	should	
150-7	35757-35759	be	
150-8	35760-35769	increased	
150-9	35770-35772	to	
150-10	35773-35778	speed	
150-11	35779-35781	up	
150-12	35782-35787	short	
150-13	35787-35788	,	
150-14	35789-35794	burst	
150-15	35795-35806	connections	
150-16	35807-35809	in	
150-17	35810-35811	#	
150-18	35812-35817	order	
150-19	35818-35820	to	
150-20	35821-35825	send	
150-21	35826-35829	the	
150-22	35830-35834	most	
150-23	35835-35839	data	
150-24	35840-35842	in	
150-25	35843-35846	the	
150-26	35847-35855	shortest	
150-27	35856-35860	time	
150-28	35861-35866	frame	
150-29	35867-35874	without	
150-30	35875-35886	overloading	
150-31	35887-35888	#	
150-32	35889-35892	any	
150-33	35893-35900	network	
150-34	35901-35908	buffers	
150-35	35908-35909	.	

#Text=Google's study reported sixteen(16) segments as showing
#Text=# the lowest latency initial congestion window.
151-1	35910-35918	Google's	
151-2	35919-35924	study	
151-3	35925-35933	reported	
151-4	35934-35941	sixteen	
151-5	35941-35942	(	
151-6	35942-35944	16	
151-7	35944-35945	)	
151-8	35946-35954	segments	
151-9	35955-35957	as	
151-10	35958-35965	showing	
151-11	35966-35967	#	
151-12	35968-35971	the	
151-13	35972-35978	lowest	
151-14	35979-35986	latency	
151-15	35987-35994	initial	
151-16	35995-36005	congestion	
151-17	36006-36012	window	
151-18	36012-36013	.	

#Text=Also test 44 segments which is
#Text=# 65535 bytes, the TCP receive buffer size of most hosts without TCP window
#Text=# scaling.
#Text=# https://developers.google.com/speed/pagespeed/service/tcp_initcwnd_paper.pdf
#Text=net.inet.tcp.initcwnd_segments=44
#Text=# (default 10 for FreeBSD 11.2) if net.inet.tcp.mssdflt = 1460
#Text=#net.inet.tcp.initcwnd_segments=52
#Text=# (default 10 for FreeBSD 11.2) if net.inet.tcp.mssdflt = 1240
#Text=#net.inet.tcp.experimental.initcwnd10=1
#Text=# (default
#Text=1 for FreeBSD 10.1)
#Text=#net.inet.tcp.experimental.initcwnd10=1
#Text=# (default
#Text=0 for FreeBSD
#Text=9.2)
#Text=#net.inet.tcp.local_slowstart_flightsize=16
#Text=# (default
#Text=4 for FreeBSD
#Text=9.1)
#Text=#net.inet.tcp.slowstart_flightsize=16
#Text=# (default
#Text=4 for FreeBSD
#Text=9.1)
#Text=# RFC 8511 TCP Alternative Backoff with ECN (ABE) for FreeBSD's default
#Text=# congestion control mechanism, NewReno.
152-1	36014-36018	Also	
152-2	36019-36023	test	
152-3	36024-36026	44	
152-4	36027-36035	segments	
152-5	36036-36041	which	
152-6	36042-36044	is	
152-7	36045-36046	#	
152-8	36047-36052	65535	
152-9	36053-36058	bytes	
152-10	36058-36059	,	
152-11	36060-36063	the	
152-12	36064-36067	TCP	
152-13	36068-36075	receive	
152-14	36076-36082	buffer	
152-15	36083-36087	size	
152-16	36088-36090	of	
152-17	36091-36095	most	
152-18	36096-36101	hosts	
152-19	36102-36109	without	
152-20	36110-36113	TCP	
152-21	36114-36120	window	
152-22	36121-36122	#	
152-23	36123-36130	scaling	
152-24	36130-36131	.	
152-25	36132-36133	#	
152-26	36134-36139	https	
152-27	36139-36140	:	
152-28	36140-36141	/	
152-29	36141-36142	/	
152-30	36142-36163	developers.google.com	
152-31	36163-36164	/	
152-32	36164-36169	speed	
152-33	36169-36170	/	
152-34	36170-36179	pagespeed	
152-35	36179-36180	/	
152-36	36180-36187	service	
152-37	36187-36188	/	
152-38	36188-36210	tcp_initcwnd_paper.pdf	
152-39	36211-36241	net.inet.tcp.initcwnd_segments	
152-40	36241-36242	=	
152-41	36242-36244	44	
152-42	36245-36246	#	
152-43	36247-36248	(	
152-44	36248-36255	default	
152-45	36256-36258	10	
152-46	36259-36262	for	
152-47	36263-36270	FreeBSD	
152-48	36271-36275	11.2	
152-49	36275-36276	)	
152-50	36277-36279	if	
152-51	36280-36300	net.inet.tcp.mssdflt	
152-52	36301-36302	=	
152-53	36303-36307	1460	
152-54	36308-36309	#	
152-55	36309-36339	net.inet.tcp.initcwnd_segments	
152-56	36339-36340	=	
152-57	36340-36342	52	
152-58	36343-36344	#	
152-59	36345-36346	(	
152-60	36346-36353	default	
152-61	36354-36356	10	
152-62	36357-36360	for	
152-63	36361-36368	FreeBSD	
152-64	36369-36373	11.2	
152-65	36373-36374	)	
152-66	36375-36377	if	
152-67	36378-36398	net.inet.tcp.mssdflt	
152-68	36399-36400	=	
152-69	36401-36405	1240	
152-70	36406-36407	#	
152-71	36407-36443	net.inet.tcp.experimental.initcwnd10	
152-72	36443-36444	=	
152-73	36444-36445	1	
152-74	36446-36447	#	
152-75	36448-36449	(	
152-76	36449-36456	default	
152-77	36457-36458	1	
152-78	36459-36462	for	
152-79	36463-36470	FreeBSD	
152-80	36471-36475	10.1	
152-81	36475-36476	)	
152-82	36477-36478	#	
152-83	36478-36514	net.inet.tcp.experimental.initcwnd10	
152-84	36514-36515	=	
152-85	36515-36516	1	
152-86	36517-36518	#	
152-87	36519-36520	(	
152-88	36520-36527	default	
152-89	36528-36529	0	
152-90	36530-36533	for	
152-91	36534-36541	FreeBSD	
152-92	36542-36545	9.2	
152-93	36545-36546	)	
152-94	36547-36548	#	
152-95	36548-36587	net.inet.tcp.local_slowstart_flightsize	
152-96	36587-36588	=	
152-97	36588-36590	16	
152-98	36591-36592	#	
152-99	36593-36594	(	
152-100	36594-36601	default	
152-101	36602-36603	4	
152-102	36604-36607	for	
152-103	36608-36615	FreeBSD	
152-104	36616-36619	9.1	
152-105	36619-36620	)	
152-106	36621-36622	#	
152-107	36622-36655	net.inet.tcp.slowstart_flightsize	
152-108	36655-36656	=	
152-109	36656-36658	16	
152-110	36659-36660	#	
152-111	36661-36662	(	
152-112	36662-36669	default	
152-113	36670-36671	4	
152-114	36672-36675	for	
152-115	36676-36683	FreeBSD	
152-116	36684-36687	9.1	
152-117	36687-36688	)	
152-118	36689-36690	#	
152-119	36691-36694	RFC	
152-120	36695-36699	8511	
152-121	36700-36703	TCP	
152-122	36704-36715	Alternative	
152-123	36716-36723	Backoff	
152-124	36724-36728	with	
152-125	36729-36732	ECN	
152-126	36733-36734	(	
152-127	36734-36737	ABE	
152-128	36737-36738	)	
152-129	36739-36742	for	
152-130	36743-36752	FreeBSD's	
152-131	36753-36760	default	
152-132	36761-36762	#	
152-133	36763-36773	congestion	
152-134	36774-36781	control	
152-135	36782-36791	mechanism	
152-136	36791-36792	,	
152-137	36793-36800	NewReno	
152-138	36800-36801	.	

#Text=The reception of a Congestion
#Text=# Experienced (CE) Explicit Congestion Notification (ECN) event indicates that
#Text=# an Active Queue Management (AQM) mechanism is used at the bottleneck, thus an
#Text=# assumption can be made that the bottleneck network queue is transient.
153-1	36802-36805	The	
153-2	36806-36815	reception	
153-3	36816-36818	of	
153-4	36819-36820	a	
153-5	36821-36831	Congestion	
153-6	36832-36833	#	
153-7	36834-36845	Experienced	
153-8	36846-36847	(	
153-9	36847-36849	CE	
153-10	36849-36850	)	
153-11	36851-36859	Explicit	
153-12	36860-36870	Congestion	
153-13	36871-36883	Notification	
153-14	36884-36885	(	
153-15	36885-36888	ECN	
153-16	36888-36889	)	
153-17	36890-36895	event	
153-18	36896-36905	indicates	
153-19	36906-36910	that	
153-20	36911-36912	#	
153-21	36913-36915	an	
153-22	36916-36922	Active	
153-23	36923-36928	Queue	
153-24	36929-36939	Management	
153-25	36940-36941	(	
153-26	36941-36944	AQM	
153-27	36944-36945	)	
153-28	36946-36955	mechanism	
153-29	36956-36958	is	
153-30	36959-36963	used	
153-31	36964-36966	at	
153-32	36967-36970	the	
153-33	36971-36981	bottleneck	
153-34	36981-36982	,	
153-35	36983-36987	thus	
153-36	36988-36990	an	
153-37	36991-36992	#	
153-38	36993-37003	assumption	
153-39	37004-37007	can	
153-40	37008-37010	be	
153-41	37011-37015	made	
153-42	37016-37020	that	
153-43	37021-37024	the	
153-44	37025-37035	bottleneck	
153-45	37036-37043	network	
153-46	37044-37049	queue	
153-47	37050-37052	is	
153-48	37053-37062	transient	
153-49	37062-37063	.	

#Text=The
#Text=# feedback of this signal allows the TCP sender-side ECN reaction in congestion
#Text=# avoidance to reduce the Congestion Window (cwnd) by a less aggressive 20%
#Text=# rather than the NewReno default of 50% when inferred packet loss is detected.
#Text=# The goal is more packets on the wire using greater network capacity while
#Text=# minimizing actual packet loss. https://tools.ietf.org/html/rfc8511
#Text=net.inet.tcp.cc.abe=1
#Text=# (default 0, disabled)
#Text=# RFC 6675 increases the accuracy of TCP Fast Recovery when combined with
#Text=# Selective Acknowledgement (net.inet.tcp.sack.enable=1).
154-1	37064-37067	The	
154-2	37068-37069	#	
154-3	37070-37078	feedback	
154-4	37079-37081	of	
154-5	37082-37086	this	
154-6	37087-37093	signal	
154-7	37094-37100	allows	
154-8	37101-37104	the	
154-9	37105-37108	TCP	
154-10	37109-37120	sender-side	
154-11	37121-37124	ECN	
154-12	37125-37133	reaction	
154-13	37134-37136	in	
154-14	37137-37147	congestion	
154-15	37148-37149	#	
154-16	37150-37159	avoidance	
154-17	37160-37162	to	
154-18	37163-37169	reduce	
154-19	37170-37173	the	
154-20	37174-37184	Congestion	
154-21	37185-37191	Window	
154-22	37192-37193	(	
154-23	37193-37197	cwnd	
154-24	37197-37198	)	
154-25	37199-37201	by	
154-26	37202-37203	a	
154-27	37204-37208	less	
154-28	37209-37219	aggressive	
154-29	37220-37223	20%	
154-30	37224-37225	#	
154-31	37226-37232	rather	
154-32	37233-37237	than	
154-33	37238-37241	the	
154-34	37242-37249	NewReno	
154-35	37250-37257	default	
154-36	37258-37260	of	
154-37	37261-37264	50%	
154-38	37265-37269	when	
154-39	37270-37278	inferred	
154-40	37279-37285	packet	
154-41	37286-37290	loss	
154-42	37291-37293	is	
154-43	37294-37302	detected	
154-44	37302-37303	.	
154-45	37304-37305	#	
154-46	37306-37309	The	
154-47	37310-37314	goal	
154-48	37315-37317	is	
154-49	37318-37322	more	
154-50	37323-37330	packets	
154-51	37331-37333	on	
154-52	37334-37337	the	
154-53	37338-37342	wire	
154-54	37343-37348	using	
154-55	37349-37356	greater	
154-56	37357-37364	network	
154-57	37365-37373	capacity	
154-58	37374-37379	while	
154-59	37380-37381	#	
154-60	37382-37392	minimizing	
154-61	37393-37399	actual	
154-62	37400-37406	packet	
154-63	37407-37411	loss	
154-64	37411-37412	.	
154-65	37413-37418	https	
154-66	37418-37419	:	
154-67	37419-37420	/	
154-68	37420-37421	/	
154-69	37421-37435	tools.ietf.org	
154-70	37435-37436	/	
154-71	37436-37440	html	
154-72	37440-37441	/	
154-73	37441-37448	rfc8511	
154-74	37449-37468	net.inet.tcp.cc.abe	
154-75	37468-37469	=	
154-76	37469-37470	1	
154-77	37471-37472	#	
154-78	37473-37474	(	
154-79	37474-37481	default	
154-80	37482-37483	0	
154-81	37483-37484	,	
154-82	37485-37493	disabled	
154-83	37493-37494	)	
154-84	37495-37496	#	
154-85	37497-37500	RFC	
154-86	37501-37505	6675	
154-87	37506-37515	increases	
154-88	37516-37519	the	
154-89	37520-37528	accuracy	
154-90	37529-37531	of	
154-91	37532-37535	TCP	
154-92	37536-37540	Fast	
154-93	37541-37549	Recovery	
154-94	37550-37554	when	
154-95	37555-37563	combined	
154-96	37564-37568	with	
154-97	37569-37570	#	
154-98	37571-37580	Selective	
154-99	37581-37596	Acknowledgement	
154-100	37597-37598	(	
154-101	37598-37622	net.inet.tcp.sack.enable	
154-102	37622-37623	=	
154-103	37623-37624	1	
154-104	37624-37625	)	
154-105	37625-37626	.	

#Text=TCP loss recovery is
#Text=# enhanced by computing "pipe", a sender side estimation of the number of bytes
#Text=# still outstanding on the network.
155-1	37627-37630	TCP	
155-2	37631-37635	loss	
155-3	37636-37644	recovery	
155-4	37645-37647	is	
155-5	37648-37649	#	
155-6	37650-37658	enhanced	
155-7	37659-37661	by	
155-8	37662-37671	computing	
155-9	37672-37673	"	
155-10	37673-37677	pipe	
155-11	37677-37678	"	
155-12	37678-37679	,	
155-13	37680-37681	a	
155-14	37682-37688	sender	
155-15	37689-37693	side	
155-16	37694-37704	estimation	
155-17	37705-37707	of	
155-18	37708-37711	the	
155-19	37712-37718	number	
155-20	37719-37721	of	
155-21	37722-37727	bytes	
155-22	37728-37729	#	
155-23	37730-37735	still	
155-24	37736-37747	outstanding	
155-25	37748-37750	on	
155-26	37751-37754	the	
155-27	37755-37762	network	
155-28	37762-37763	.	

#Text=Fast Recovery is augmented by sending data
#Text=# on each ACK as necessary to prevent "pipe" from falling below the slow-start
#Text=# threshold (ssthresh).
156-1	37764-37768	Fast	
156-2	37769-37777	Recovery	
156-3	37778-37780	is	
156-4	37781-37790	augmented	
156-5	37791-37793	by	
156-6	37794-37801	sending	
156-7	37802-37806	data	
156-8	37807-37808	#	
156-9	37809-37811	on	
156-10	37812-37816	each	
156-11	37817-37820	ACK	
156-12	37821-37823	as	
156-13	37824-37833	necessary	
156-14	37834-37836	to	
156-15	37837-37844	prevent	
156-16	37845-37846	"	
156-17	37846-37850	pipe	
156-18	37850-37851	"	
156-19	37852-37856	from	
156-20	37857-37864	falling	
156-21	37865-37870	below	
156-22	37871-37874	the	
156-23	37875-37885	slow-start	
156-24	37886-37887	#	
156-25	37888-37897	threshold	
156-26	37898-37899	(	
156-27	37899-37907	ssthresh	
156-28	37907-37908	)	
156-29	37908-37909	.	

#Text=The TCP window size and SACK-based decisions are still
#Text=# determined by the congestion control algorithm; CDG, CUBIC or H-TCP if
#Text=# enabled, newreno by default.
#Text=net.inet.tcp.rfc6675_pipe=1
#Text=# (default 0)
#Text=# Reduce the amount of SYN/ACKs the server will re-transmit to an ip address
#Text=# whom did not respond to the first SYN/ACK.
157-1	37910-37913	The	
157-2	37914-37917	TCP	
157-3	37918-37924	window	
157-4	37925-37929	size	
157-5	37930-37933	and	
157-6	37934-37944	SACK-based	
157-7	37945-37954	decisions	
157-8	37955-37958	are	
157-9	37959-37964	still	
157-10	37965-37966	#	
157-11	37967-37977	determined	
157-12	37978-37980	by	
157-13	37981-37984	the	
157-14	37985-37995	congestion	
157-15	37996-38003	control	
157-16	38004-38013	algorithm	
157-17	38013-38014	;	
157-18	38015-38018	CDG	
157-19	38018-38019	,	
157-20	38020-38025	CUBIC	
157-21	38026-38028	or	
157-22	38029-38034	H-TCP	
157-23	38035-38037	if	
157-24	38038-38039	#	
157-25	38040-38047	enabled	
157-26	38047-38048	,	
157-27	38049-38056	newreno	
157-28	38057-38059	by	
157-29	38060-38067	default	
157-30	38067-38068	.	
157-31	38069-38089	net.inet.tcp.rfc6675	
157-32	38089-38090	_	
157-33	38090-38094	pipe	
157-34	38094-38095	=	
157-35	38095-38096	1	
157-36	38097-38098	#	
157-37	38099-38100	(	
157-38	38100-38107	default	
157-39	38108-38109	0	
157-40	38109-38110	)	
157-41	38111-38112	#	
157-42	38113-38119	Reduce	
157-43	38120-38123	the	
157-44	38124-38130	amount	
157-45	38131-38133	of	
157-46	38134-38137	SYN	
157-47	38137-38138	/	
157-48	38138-38142	ACKs	
157-49	38143-38146	the	
157-50	38147-38153	server	
157-51	38154-38158	will	
157-52	38159-38170	re-transmit	
157-53	38171-38173	to	
157-54	38174-38176	an	
157-55	38177-38179	ip	
157-56	38180-38187	address	
157-57	38188-38189	#	
157-58	38190-38194	whom	
157-59	38195-38198	did	
157-60	38199-38202	not	
157-61	38203-38210	respond	
157-62	38211-38213	to	
157-63	38214-38217	the	
157-64	38218-38223	first	
157-65	38224-38227	SYN	
157-66	38227-38228	/	
157-67	38228-38231	ACK	
157-68	38231-38232	.	

#Text=On a client's initial connection
#Text=# our server will always send a SYN/ACK in response to the client's initial
#Text=# SYN.
158-1	38233-38235	On	
158-2	38236-38237	a	
158-3	38238-38246	client's	
158-4	38247-38254	initial	
158-5	38255-38265	connection	
158-6	38266-38267	#	
158-7	38268-38271	our	
158-8	38272-38278	server	
158-9	38279-38283	will	
158-10	38284-38290	always	
158-11	38291-38295	send	
158-12	38296-38297	a	
158-13	38298-38301	SYN	
158-14	38301-38302	/	
158-15	38302-38305	ACK	
158-16	38306-38308	in	
158-17	38309-38317	response	
158-18	38318-38320	to	
158-19	38321-38324	the	
158-20	38325-38333	client's	
158-21	38334-38341	initial	
158-22	38342-38343	#	
158-23	38344-38347	SYN	
158-24	38347-38348	.	

#Text=Limiting retranstited SYN/ACKS reduces local syn cache size and a "SYN
#Text=# flood" DoS attack's collateral damage by not sending SYN/ACKs back to spoofed
#Text=# ips, multiple times.
159-1	38349-38357	Limiting	
159-2	38358-38370	retranstited	
159-3	38371-38374	SYN	
159-4	38374-38375	/	
159-5	38375-38379	ACKS	
159-6	38380-38387	reduces	
159-7	38388-38393	local	
159-8	38394-38397	syn	
159-9	38398-38403	cache	
159-10	38404-38408	size	
159-11	38409-38412	and	
159-12	38413-38414	a	
159-13	38415-38416	"	
159-14	38416-38419	SYN	
159-15	38420-38421	#	
159-16	38422-38427	flood	
159-17	38427-38428	"	
159-18	38429-38432	DoS	
159-19	38433-38441	attack's	
159-20	38442-38452	collateral	
159-21	38453-38459	damage	
159-22	38460-38462	by	
159-23	38463-38466	not	
159-24	38467-38474	sending	
159-25	38475-38478	SYN	
159-26	38478-38479	/	
159-27	38479-38483	ACKs	
159-28	38484-38488	back	
159-29	38489-38491	to	
159-30	38492-38499	spoofed	
159-31	38500-38501	#	
159-32	38502-38505	ips	
159-33	38505-38506	,	
159-34	38507-38515	multiple	
159-35	38516-38521	times	
159-36	38521-38522	.	

#Text=If we do continue to send SYN/ACKs to spoofed IPs they
#Text=# may send RST's back to us and an "amplification" attack would begin against
#Text=# our host.
160-1	38523-38525	If	
160-2	38526-38528	we	
160-3	38529-38531	do	
160-4	38532-38540	continue	
160-5	38541-38543	to	
160-6	38544-38548	send	
160-7	38549-38552	SYN	
160-8	38552-38553	/	
160-9	38553-38557	ACKs	
160-10	38558-38560	to	
160-11	38561-38568	spoofed	
160-12	38569-38572	IPs	
160-13	38573-38577	they	
160-14	38578-38579	#	
160-15	38580-38583	may	
160-16	38584-38588	send	
160-17	38589-38594	RST's	
160-18	38595-38599	back	
160-19	38600-38602	to	
160-20	38603-38605	us	
160-21	38606-38609	and	
160-22	38610-38612	an	
160-23	38613-38614	"	
160-24	38614-38627	amplification	
160-25	38627-38628	"	
160-26	38629-38635	attack	
160-27	38636-38641	would	
160-28	38642-38647	begin	
160-29	38648-38655	against	
160-30	38656-38657	#	
160-31	38658-38661	our	
160-32	38662-38666	host	
160-33	38666-38667	.	

#Text=If you do not wish to send retransmits at all then set to zero(0)
#Text=# especially if you are under a SYN attack.
161-1	38668-38670	If	
161-2	38671-38674	you	
161-3	38675-38677	do	
161-4	38678-38681	not	
161-5	38682-38686	wish	
161-6	38687-38689	to	
161-7	38690-38694	send	
161-8	38695-38706	retransmits	
161-9	38707-38709	at	
161-10	38710-38713	all	
161-11	38714-38718	then	
161-12	38719-38722	set	
161-13	38723-38725	to	
161-14	38726-38730	zero	
161-15	38730-38731	(	
161-16	38731-38732	0	
161-17	38732-38733	)	
161-18	38734-38735	#	
161-19	38736-38746	especially	
161-20	38747-38749	if	
161-21	38750-38753	you	
161-22	38754-38757	are	
161-23	38758-38763	under	
161-24	38764-38765	a	
161-25	38766-38769	SYN	
161-26	38770-38776	attack	
161-27	38776-38777	.	

#Text=If our first SYN/ACK gets dropped
#Text=# the client will re-send another SYN if they still want to connect.
162-1	38778-38780	If	
162-2	38781-38784	our	
162-3	38785-38790	first	
162-4	38791-38794	SYN	
162-5	38794-38795	/	
162-6	38795-38798	ACK	
162-7	38799-38803	gets	
162-8	38804-38811	dropped	
162-9	38812-38813	#	
162-10	38814-38817	the	
162-11	38818-38824	client	
162-12	38825-38829	will	
162-13	38830-38837	re-send	
162-14	38838-38845	another	
162-15	38846-38849	SYN	
162-16	38850-38852	if	
162-17	38853-38857	they	
162-18	38858-38863	still	
162-19	38864-38868	want	
162-20	38869-38871	to	
162-21	38872-38879	connect	
162-22	38879-38880	.	

#Text=Also set
#Text=# "net.inet.tcp.msl" to two(2) times the average round trip time of a client,
#Text=# but no lower then 2000ms (2s).
163-1	38881-38885	Also	
163-2	38886-38889	set	
163-3	38890-38891	#	
163-4	38892-38893	"	
163-5	38893-38909	net.inet.tcp.msl	
163-6	38909-38910	"	
163-7	38911-38913	to	
163-8	38914-38917	two	
163-9	38917-38918	(	
163-10	38918-38919	2	
163-11	38919-38920	)	
163-12	38921-38926	times	
163-13	38927-38930	the	
163-14	38931-38938	average	
163-15	38939-38944	round	
163-16	38945-38949	trip	
163-17	38950-38954	time	
163-18	38955-38957	of	
163-19	38958-38959	a	
163-20	38960-38966	client	
163-21	38966-38967	,	
163-22	38968-38969	#	
163-23	38970-38973	but	
163-24	38974-38976	no	
163-25	38977-38982	lower	
163-26	38983-38987	then	
163-27	38988-38994	2000ms	
163-28	38995-38996	(	
163-29	38996-38998	2s	
163-30	38998-38999	)	
163-31	38999-39000	.	

#Text=Test with "netstat -s -p tcp" and look under
#Text=# syncache entries. http://www.ouah.org/spank.txt
#Text=# https://people.freebsd.org/~jlemon/papers/syncache.pdf
#Text=net.inet.tcp.syncache.rexmtlimit=0
#Text=# (default 3)
#Text=# IP fragments require CPU processing time and system memory to reassemble.
164-1	39001-39005	Test	
164-2	39006-39010	with	
164-3	39011-39012	"	
164-4	39012-39019	netstat	
164-5	39020-39021	-	
164-6	39021-39022	s	
164-7	39023-39024	-	
164-8	39024-39025	p	
164-9	39026-39029	tcp	
164-10	39029-39030	"	
164-11	39031-39034	and	
164-12	39035-39039	look	
164-13	39040-39045	under	
164-14	39046-39047	#	
164-15	39048-39056	syncache	
164-16	39057-39064	entries	
164-17	39064-39065	.	
164-18	39066-39070	http	
164-19	39070-39071	:	
164-20	39071-39072	/	
164-21	39072-39073	/	
164-22	39073-39085	www.ouah.org	
164-23	39085-39086	/	
164-24	39086-39095	spank.txt	
164-25	39096-39097	#	
164-26	39098-39103	https	
164-27	39103-39104	:	
164-28	39104-39105	/	
164-29	39105-39106	/	
164-30	39106-39124	people.freebsd.org	
164-31	39124-39125	/	
164-32	39125-39126	~	
164-33	39126-39132	jlemon	
164-34	39132-39133	/	
164-35	39133-39139	papers	
164-36	39139-39140	/	
164-37	39140-39152	syncache.pdf	
164-38	39153-39185	net.inet.tcp.syncache.rexmtlimit	
164-39	39185-39186	=	
164-40	39186-39187	0	
164-41	39188-39189	#	
164-42	39190-39191	(	
164-43	39191-39198	default	
164-44	39199-39200	3	
164-45	39200-39201	)	
164-46	39202-39203	#	
164-47	39204-39206	IP	
164-48	39207-39216	fragments	
164-49	39217-39224	require	
164-50	39225-39228	CPU	
164-51	39229-39239	processing	
164-52	39240-39244	time	
164-53	39245-39248	and	
164-54	39249-39255	system	
164-55	39256-39262	memory	
164-56	39263-39265	to	
164-57	39266-39276	reassemble	
164-58	39276-39277	.	

#Text=Due
#Text=# to multiple attacks vectors ip fragmentation can contribute to and that
#Text=# fragmentation can be used to evade packet inspection and auditing, we will
#Text=# not accept IPv4 or IPv6 fragments.
165-1	39278-39281	Due	
165-2	39282-39283	#	
165-3	39284-39286	to	
165-4	39287-39295	multiple	
165-5	39296-39303	attacks	
165-6	39304-39311	vectors	
165-7	39312-39314	ip	
165-8	39315-39328	fragmentation	
165-9	39329-39332	can	
165-10	39333-39343	contribute	
165-11	39344-39346	to	
165-12	39347-39350	and	
165-13	39351-39355	that	
165-14	39356-39357	#	
165-15	39358-39371	fragmentation	
165-16	39372-39375	can	
165-17	39376-39378	be	
165-18	39379-39383	used	
165-19	39384-39386	to	
165-20	39387-39392	evade	
165-21	39393-39399	packet	
165-22	39400-39410	inspection	
165-23	39411-39414	and	
165-24	39415-39423	auditing	
165-25	39423-39424	,	
165-26	39425-39427	we	
165-27	39428-39432	will	
165-28	39433-39434	#	
165-29	39435-39438	not	
165-30	39439-39445	accept	
165-31	39446-39450	IPv4	
165-32	39451-39453	or	
165-33	39454-39458	IPv6	
165-34	39459-39468	fragments	
165-35	39468-39469	.	

#Text=Comment out these directives when
#Text=# supporting traffic which generates fragments by design; like NFS and certain
#Text=# preternatural functions of the Sony PS4 gaming console.
#Text=# https://en.wikipedia.org/wiki/IP_fragmentation_attack
#Text=# https://www.freebsd.org/security/advisories/FreeBSD-SA-18:10.ip.asc
#Text=net.inet.ip.maxfragpackets=0
#Text=# (default 63474)
#Text=net.inet.ip.maxfragsperpacket=0
#Text=# (default 16)
#Text=net.inet6.ip6.maxfragpackets=0
#Text=# (default 507715)
#Text=net.inet6.ip6.maxfrags=0
#Text=# (default 507715)
#Text=# Syncookies have advantages and disadvantages.
166-1	39470-39477	Comment	
166-2	39478-39481	out	
166-3	39482-39487	these	
166-4	39488-39498	directives	
166-5	39499-39503	when	
166-6	39504-39505	#	
166-7	39506-39516	supporting	
166-8	39517-39524	traffic	
166-9	39525-39530	which	
166-10	39531-39540	generates	
166-11	39541-39550	fragments	
166-12	39551-39553	by	
166-13	39554-39560	design	
166-14	39560-39561	;	
166-15	39562-39566	like	
166-16	39567-39570	NFS	
166-17	39571-39574	and	
166-18	39575-39582	certain	
166-19	39583-39584	#	
166-20	39585-39598	preternatural	
166-21	39599-39608	functions	
166-22	39609-39611	of	
166-23	39612-39615	the	
166-24	39616-39620	Sony	
166-25	39621-39624	PS4	
166-26	39625-39631	gaming	
166-27	39632-39639	console	
166-28	39639-39640	.	
166-29	39641-39642	#	
166-30	39643-39648	https	
166-31	39648-39649	:	
166-32	39649-39650	/	
166-33	39650-39651	/	
166-34	39651-39667	en.wikipedia.org	
166-35	39667-39668	/	
166-36	39668-39672	wiki	
166-37	39672-39673	/	
166-38	39673-39696	IP_fragmentation_attack	
166-39	39697-39698	#	
166-40	39699-39704	https	
166-41	39704-39705	:	
166-42	39705-39706	/	
166-43	39706-39707	/	
166-44	39707-39722	www.freebsd.org	
166-45	39722-39723	/	
166-46	39723-39731	security	
166-47	39731-39732	/	
166-48	39732-39742	advisories	
166-49	39742-39743	/	
166-50	39743-39753	FreeBSD-SA	
166-51	39753-39754	-	
166-52	39754-39756	18	
166-53	39756-39757	:	
166-54	39757-39759	10	
166-55	39759-39760	.	
166-56	39760-39766	ip.asc	
166-57	39767-39793	net.inet.ip.maxfragpackets	
166-58	39793-39794	=	
166-59	39794-39795	0	
166-60	39796-39797	#	
166-61	39798-39799	(	
166-62	39799-39806	default	
166-63	39807-39812	63474	
166-64	39812-39813	)	
166-65	39814-39843	net.inet.ip.maxfragsperpacket	
166-66	39843-39844	=	
166-67	39844-39845	0	
166-68	39846-39847	#	
166-69	39848-39849	(	
166-70	39849-39856	default	
166-71	39857-39859	16	
166-72	39859-39860	)	
166-73	39861-39870	net.inet6	
166-74	39870-39871	.	
166-75	39871-39874	ip6	
166-76	39874-39875	.	
166-77	39875-39889	maxfragpackets	
166-78	39889-39890	=	
166-79	39890-39891	0	
166-80	39892-39893	#	
166-81	39894-39895	(	
166-82	39895-39902	default	
166-83	39903-39909	507715	
166-84	39909-39910	)	
166-85	39911-39920	net.inet6	
166-86	39920-39921	.	
166-87	39921-39924	ip6	
166-88	39924-39925	.	
166-89	39925-39933	maxfrags	
166-90	39933-39934	=	
166-91	39934-39935	0	
166-92	39936-39937	#	
166-93	39938-39939	(	
166-94	39939-39946	default	
166-95	39947-39953	507715	
166-96	39953-39954	)	
166-97	39955-39956	#	
166-98	39957-39967	Syncookies	
166-99	39968-39972	have	
166-100	39973-39983	advantages	
166-101	39984-39987	and	
166-102	39988-40001	disadvantages	
166-103	40001-40002	.	

#Text=Syncookies are useful if you
#Text=# are being DoS attacked as this method helps filter the proper clients from
#Text=# the attack machines.
167-1	40003-40013	Syncookies	
167-2	40014-40017	are	
167-3	40018-40024	useful	
167-4	40025-40027	if	
167-5	40028-40031	you	
167-6	40032-40033	#	
167-7	40034-40037	are	
167-8	40038-40043	being	
167-9	40044-40047	DoS	
167-10	40048-40056	attacked	
167-11	40057-40059	as	
167-12	40060-40064	this	
167-13	40065-40071	method	
167-14	40072-40077	helps	
167-15	40078-40084	filter	
167-16	40085-40088	the	
167-17	40089-40095	proper	
167-18	40096-40103	clients	
167-19	40104-40108	from	
167-20	40109-40110	#	
167-21	40111-40114	the	
167-22	40115-40121	attack	
167-23	40122-40130	machines	
167-24	40130-40131	.	

#Text=But, since the TCP options from the initial SYN are not
#Text=# saved in syncookies, the tcp options are not applied to the connection,
#Text=# precluding use of features like window scale, timestamps, or exact MSS
#Text=# sizing.
168-1	40132-40135	But	
168-2	40135-40136	,	
168-3	40137-40142	since	
168-4	40143-40146	the	
168-5	40147-40150	TCP	
168-6	40151-40158	options	
168-7	40159-40163	from	
168-8	40164-40167	the	
168-9	40168-40175	initial	
168-10	40176-40179	SYN	
168-11	40180-40183	are	
168-12	40184-40187	not	
168-13	40188-40189	#	
168-14	40190-40195	saved	
168-15	40196-40198	in	
168-16	40199-40209	syncookies	
168-17	40209-40210	,	
168-18	40211-40214	the	
168-19	40215-40218	tcp	
168-20	40219-40226	options	
168-21	40227-40230	are	
168-22	40231-40234	not	
168-23	40235-40242	applied	
168-24	40243-40245	to	
168-25	40246-40249	the	
168-26	40250-40260	connection	
168-27	40260-40261	,	
168-28	40262-40263	#	
168-29	40264-40274	precluding	
168-30	40275-40278	use	
168-31	40279-40281	of	
168-32	40282-40290	features	
168-33	40291-40295	like	
168-34	40296-40302	window	
168-35	40303-40308	scale	
168-36	40308-40309	,	
168-37	40310-40320	timestamps	
168-38	40320-40321	,	
168-39	40322-40324	or	
168-40	40325-40330	exact	
168-41	40331-40334	MSS	
168-42	40335-40336	#	
168-43	40337-40343	sizing	
168-44	40343-40344	.	

#Text=As the returning ACK establishes the connection, it may be possible
#Text=# for an attacker to ACK flood a machine in an attempt to create a connection.
#Text=# Another benefit to overflowing to the point of getting a valid SYN cookie is
#Text=# the attacker can include data payload.
169-1	40345-40347	As	
169-2	40348-40351	the	
169-3	40352-40361	returning	
169-4	40362-40365	ACK	
169-5	40366-40377	establishes	
169-6	40378-40381	the	
169-7	40382-40392	connection	
169-8	40392-40393	,	
169-9	40394-40396	it	
169-10	40397-40400	may	
169-11	40401-40403	be	
169-12	40404-40412	possible	
169-13	40413-40414	#	
169-14	40415-40418	for	
169-15	40419-40421	an	
169-16	40422-40430	attacker	
169-17	40431-40433	to	
169-18	40434-40437	ACK	
169-19	40438-40443	flood	
169-20	40444-40445	a	
169-21	40446-40453	machine	
169-22	40454-40456	in	
169-23	40457-40459	an	
169-24	40460-40467	attempt	
169-25	40468-40470	to	
169-26	40471-40477	create	
169-27	40478-40479	a	
169-28	40480-40490	connection	
169-29	40490-40491	.	
169-30	40492-40493	#	
169-31	40494-40501	Another	
169-32	40502-40509	benefit	
169-33	40510-40512	to	
169-34	40513-40524	overflowing	
169-35	40525-40527	to	
169-36	40528-40531	the	
169-37	40532-40537	point	
169-38	40538-40540	of	
169-39	40541-40548	getting	
169-40	40549-40550	a	
169-41	40551-40556	valid	
169-42	40557-40560	SYN	
169-43	40561-40567	cookie	
169-44	40568-40570	is	
169-45	40571-40572	#	
169-46	40573-40576	the	
169-47	40577-40585	attacker	
169-48	40586-40589	can	
169-49	40590-40597	include	
169-50	40598-40602	data	
169-51	40603-40610	payload	
169-52	40610-40611	.	

#Text=Now that the attacker can send data to
#Text=# a FreeBSD network daemon, even using a spoofed source IP address, they can
#Text=# have FreeBSD do processing on the data which is not something the attacker
#Text=# could do without having SYN cookies.
170-1	40612-40615	Now	
170-2	40616-40620	that	
170-3	40621-40624	the	
170-4	40625-40633	attacker	
170-5	40634-40637	can	
170-6	40638-40642	send	
170-7	40643-40647	data	
170-8	40648-40650	to	
170-9	40651-40652	#	
170-10	40653-40654	a	
170-11	40655-40662	FreeBSD	
170-12	40663-40670	network	
170-13	40671-40677	daemon	
170-14	40677-40678	,	
170-15	40679-40683	even	
170-16	40684-40689	using	
170-17	40690-40691	a	
170-18	40692-40699	spoofed	
170-19	40700-40706	source	
170-20	40707-40709	IP	
170-21	40710-40717	address	
170-22	40717-40718	,	
170-23	40719-40723	they	
170-24	40724-40727	can	
170-25	40728-40729	#	
170-26	40730-40734	have	
170-27	40735-40742	FreeBSD	
170-28	40743-40745	do	
170-29	40746-40756	processing	
170-30	40757-40759	on	
170-31	40760-40763	the	
170-32	40764-40768	data	
170-33	40769-40774	which	
170-34	40775-40777	is	
170-35	40778-40781	not	
170-36	40782-40791	something	
170-37	40792-40795	the	
170-38	40796-40804	attacker	
170-39	40805-40806	#	
170-40	40807-40812	could	
170-41	40813-40815	do	
170-42	40816-40823	without	
170-43	40824-40830	having	
170-44	40831-40834	SYN	
170-45	40835-40842	cookies	
170-46	40842-40843	.	

#Text=Even though syncookies are helpful
#Text=# during a DoS, we are going to disable syncookies at this time.
#Text=net.inet.tcp.syncookies=0
#Text=# (default 1)
#Text=# RFC 6528 Initial Sequence Numbers (ISN) refer to the unique 32-bit sequence
#Text=# number assigned to each new Transmission Control Protocol (TCP) connection.
#Text=# The TCP protocol assigns an ISN to each new byte, beginning with 0 and
#Text=# incrementally adding a secret number every four seconds until the limit is
#Text=# exhausted.
171-1	40844-40848	Even	
171-2	40849-40855	though	
171-3	40856-40866	syncookies	
171-4	40867-40870	are	
171-5	40871-40878	helpful	
171-6	40879-40880	#	
171-7	40881-40887	during	
171-8	40888-40889	a	
171-9	40890-40893	DoS	
171-10	40893-40894	,	
171-11	40895-40897	we	
171-12	40898-40901	are	
171-13	40902-40907	going	
171-14	40908-40910	to	
171-15	40911-40918	disable	
171-16	40919-40929	syncookies	
171-17	40930-40932	at	
171-18	40933-40937	this	
171-19	40938-40942	time	
171-20	40942-40943	.	
171-21	40944-40967	net.inet.tcp.syncookies	
171-22	40967-40968	=	
171-23	40968-40969	0	
171-24	40970-40971	#	
171-25	40972-40973	(	
171-26	40973-40980	default	
171-27	40981-40982	1	
171-28	40982-40983	)	
171-29	40984-40985	#	
171-30	40986-40989	RFC	
171-31	40990-40994	6528	
171-32	40995-41002	Initial	
171-33	41003-41011	Sequence	
171-34	41012-41019	Numbers	
171-35	41020-41021	(	
171-36	41021-41024	ISN	
171-37	41024-41025	)	
171-38	41026-41031	refer	
171-39	41032-41034	to	
171-40	41035-41038	the	
171-41	41039-41045	unique	
171-42	41046-41048	32	
171-43	41048-41049	-	
171-44	41049-41052	bit	
171-45	41053-41061	sequence	
171-46	41062-41063	#	
171-47	41064-41070	number	
171-48	41071-41079	assigned	
171-49	41080-41082	to	
171-50	41083-41087	each	
171-51	41088-41091	new	
171-52	41092-41104	Transmission	
171-53	41105-41112	Control	
171-54	41113-41121	Protocol	
171-55	41122-41123	(	
171-56	41123-41126	TCP	
171-57	41126-41127	)	
171-58	41128-41138	connection	
171-59	41138-41139	.	
171-60	41140-41141	#	
171-61	41142-41145	The	
171-62	41146-41149	TCP	
171-63	41150-41158	protocol	
171-64	41159-41166	assigns	
171-65	41167-41169	an	
171-66	41170-41173	ISN	
171-67	41174-41176	to	
171-68	41177-41181	each	
171-69	41182-41185	new	
171-70	41186-41190	byte	
171-71	41190-41191	,	
171-72	41192-41201	beginning	
171-73	41202-41206	with	
171-74	41207-41208	0	
171-75	41209-41212	and	
171-76	41213-41214	#	
171-77	41215-41228	incrementally	
171-78	41229-41235	adding	
171-79	41236-41237	a	
171-80	41238-41244	secret	
171-81	41245-41251	number	
171-82	41252-41257	every	
171-83	41258-41262	four	
171-84	41263-41270	seconds	
171-85	41271-41276	until	
171-86	41277-41280	the	
171-87	41281-41286	limit	
171-88	41287-41289	is	
171-89	41290-41291	#	
171-90	41292-41301	exhausted	
171-91	41301-41302	.	

#Text=In continuous communication all available ISN options could be
#Text=# used up in a few hours.
172-1	41303-41305	In	
172-2	41306-41316	continuous	
172-3	41317-41330	communication	
172-4	41331-41334	all	
172-5	41335-41344	available	
172-6	41345-41348	ISN	
172-7	41349-41356	options	
172-8	41357-41362	could	
172-9	41363-41365	be	
172-10	41366-41367	#	
172-11	41368-41372	used	
172-12	41373-41375	up	
172-13	41376-41378	in	
172-14	41379-41380	a	
172-15	41381-41384	few	
172-16	41385-41390	hours	
172-17	41390-41391	.	

#Text=Normally a new secret number is only chosen after the
#Text=# ISN limit has been exceeded.
173-1	41392-41400	Normally	
173-2	41401-41402	a	
173-3	41403-41406	new	
173-4	41407-41413	secret	
173-5	41414-41420	number	
173-6	41421-41423	is	
173-7	41424-41428	only	
173-8	41429-41435	chosen	
173-9	41436-41441	after	
173-10	41442-41445	the	
173-11	41446-41447	#	
173-12	41448-41451	ISN	
173-13	41452-41457	limit	
173-14	41458-41461	has	
173-15	41462-41466	been	
173-16	41467-41475	exceeded	
173-17	41475-41476	.	

#Text=In order to defend against Sequence Number
#Text=# Attacks the ISN secret key should not be used sufficiently often that it
#Text=# would be regarded as predictable, and thus insecure.
174-1	41477-41479	In	
174-2	41480-41485	order	
174-3	41486-41488	to	
174-4	41489-41495	defend	
174-5	41496-41503	against	
174-6	41504-41512	Sequence	
174-7	41513-41519	Number	
174-8	41520-41521	#	
174-9	41522-41529	Attacks	
174-10	41530-41533	the	
174-11	41534-41537	ISN	
174-12	41538-41544	secret	
174-13	41545-41548	key	
174-14	41549-41555	should	
174-15	41556-41559	not	
174-16	41560-41562	be	
174-17	41563-41567	used	
174-18	41568-41580	sufficiently	
174-19	41581-41586	often	
174-20	41587-41591	that	
174-21	41592-41594	it	
174-22	41595-41596	#	
174-23	41597-41602	would	
174-24	41603-41605	be	
174-25	41606-41614	regarded	
174-26	41615-41617	as	
174-27	41618-41629	predictable	
174-28	41629-41630	,	
174-29	41631-41634	and	
174-30	41635-41639	thus	
174-31	41640-41648	insecure	
174-32	41648-41649	.	

#Text=Reseeding the ISN will
#Text=# break TIME_WAIT recycling for a few minutes.
175-1	41650-41659	Reseeding	
175-2	41660-41663	the	
175-3	41664-41667	ISN	
175-4	41668-41672	will	
175-5	41673-41674	#	
175-6	41675-41680	break	
175-7	41681-41690	TIME_WAIT	
175-8	41691-41700	recycling	
175-9	41701-41704	for	
175-10	41705-41706	a	
175-11	41707-41710	few	
175-12	41711-41718	minutes	
175-13	41718-41719	.	

#Text=BUT, for the more paranoid,
#Text=# simply choose a random number of seconds in which a new ISN secret should be
#Text=# generated.
#Text=https://tools.ietf.org/html/rfc6528
#Text=net.inet.tcp.isn_reseed_interval=4500
#Text=# (default 0, disabled)
#Text=# TCP segmentation offload (TSO), also called large segment offload (LSO),
#Text=# should be disabled on NAT firewalls and routers.
176-1	41720-41723	BUT	
176-2	41723-41724	,	
176-3	41725-41728	for	
176-4	41729-41732	the	
176-5	41733-41737	more	
176-6	41738-41746	paranoid	
176-7	41746-41747	,	
176-8	41748-41749	#	
176-9	41750-41756	simply	
176-10	41757-41763	choose	
176-11	41764-41765	a	
176-12	41766-41772	random	
176-13	41773-41779	number	
176-14	41780-41782	of	
176-15	41783-41790	seconds	
176-16	41791-41793	in	
176-17	41794-41799	which	
176-18	41800-41801	a	
176-19	41802-41805	new	
176-20	41806-41809	ISN	
176-21	41810-41816	secret	
176-22	41817-41823	should	
176-23	41824-41826	be	
176-24	41827-41828	#	
176-25	41829-41838	generated	
176-26	41838-41839	.	
176-27	41840-41845	https	
176-28	41845-41846	:	
176-29	41846-41847	/	
176-30	41847-41848	/	
176-31	41848-41862	tools.ietf.org	
176-32	41862-41863	/	
176-33	41863-41867	html	
176-34	41867-41868	/	
176-35	41868-41875	rfc6528	
176-36	41876-41908	net.inet.tcp.isn_reseed_interval	
176-37	41908-41909	=	
176-38	41909-41913	4500	
176-39	41914-41915	#	
176-40	41916-41917	(	
176-41	41917-41924	default	
176-42	41925-41926	0	
176-43	41926-41927	,	
176-44	41928-41936	disabled	
176-45	41936-41937	)	
176-46	41938-41939	#	
176-47	41940-41943	TCP	
176-48	41944-41956	segmentation	
176-49	41957-41964	offload	
176-50	41965-41966	(	
176-51	41966-41969	TSO	
176-52	41969-41970	)	
176-53	41970-41971	,	
176-54	41972-41976	also	
176-55	41977-41983	called	
176-56	41984-41989	large	
176-57	41990-41997	segment	
176-58	41998-42005	offload	
176-59	42006-42007	(	
176-60	42007-42010	LSO	
176-61	42010-42011	)	
176-62	42011-42012	,	
176-63	42013-42014	#	
176-64	42015-42021	should	
176-65	42022-42024	be	
176-66	42025-42033	disabled	
176-67	42034-42036	on	
176-68	42037-42040	NAT	
176-69	42041-42050	firewalls	
176-70	42051-42054	and	
176-71	42055-42062	routers	
176-72	42062-42063	.	

#Text=TSO/LSO works by queuing up
#Text=# large 64KB buffers and letting the network interface card (NIC) split them
#Text=# into separate packets.
177-1	42064-42067	TSO	
177-2	42067-42068	/	
177-3	42068-42071	LSO	
177-4	42072-42077	works	
177-5	42078-42080	by	
177-6	42081-42088	queuing	
177-7	42089-42091	up	
177-8	42092-42093	#	
177-9	42094-42099	large	
177-10	42100-42104	64KB	
177-11	42105-42112	buffers	
177-12	42113-42116	and	
177-13	42117-42124	letting	
177-14	42125-42128	the	
177-15	42129-42136	network	
177-16	42137-42146	interface	
177-17	42147-42151	card	
177-18	42152-42153	(	
177-19	42153-42156	NIC	
177-20	42156-42157	)	
177-21	42158-42163	split	
177-22	42164-42168	them	
177-23	42169-42170	#	
177-24	42171-42175	into	
177-25	42176-42184	separate	
177-26	42185-42192	packets	
177-27	42192-42193	.	

#Text=The problem is the NIC can build a packet that is the
#Text=# wrong size and would be dropped by a switch or the receiving machine, like
#Text=# for NFS fragmented traffic.
178-1	42194-42197	The	
178-2	42198-42205	problem	
178-3	42206-42208	is	
178-4	42209-42212	the	
178-5	42213-42216	NIC	
178-6	42217-42220	can	
178-7	42221-42226	build	
178-8	42227-42228	a	
178-9	42229-42235	packet	
178-10	42236-42240	that	
178-11	42241-42243	is	
178-12	42244-42247	the	
178-13	42248-42249	#	
178-14	42250-42255	wrong	
178-15	42256-42260	size	
178-16	42261-42264	and	
178-17	42265-42270	would	
178-18	42271-42273	be	
178-19	42274-42281	dropped	
178-20	42282-42284	by	
178-21	42285-42286	a	
178-22	42287-42293	switch	
178-23	42294-42296	or	
178-24	42297-42300	the	
178-25	42301-42310	receiving	
178-26	42311-42318	machine	
178-27	42318-42319	,	
178-28	42320-42324	like	
178-29	42325-42326	#	
178-30	42327-42330	for	
178-31	42331-42334	NFS	
178-32	42335-42345	fragmented	
178-33	42346-42353	traffic	
178-34	42353-42354	.	

#Text=If the packet is dropped the overall sending
#Text=# bandwidth is reduced significantly.
179-1	42355-42357	If	
179-2	42358-42361	the	
179-3	42362-42368	packet	
179-4	42369-42371	is	
179-5	42372-42379	dropped	
179-6	42380-42383	the	
179-7	42384-42391	overall	
179-8	42392-42399	sending	
179-9	42400-42401	#	
179-10	42402-42411	bandwidth	
179-11	42412-42414	is	
179-12	42415-42422	reduced	
179-13	42423-42436	significantly	
179-14	42436-42437	.	

#Text=You can also disable TSO in /etc/rc.conf
#Text=# using the "-tso" directive after the network card configuration; for example,
#Text=# ifconfig_igb0="inet 10.10.10.1 netmask 255.255.255.0 -tso".
180-1	42438-42441	You	
180-2	42442-42445	can	
180-3	42446-42450	also	
180-4	42451-42458	disable	
180-5	42459-42462	TSO	
180-6	42463-42465	in	
180-7	42466-42467	/	
180-8	42467-42470	etc	
180-9	42470-42471	/	
180-10	42471-42478	rc.conf	
180-11	42479-42480	#	
180-12	42481-42486	using	
180-13	42487-42490	the	
180-14	42491-42492	"	
180-15	42492-42493	-	
180-16	42493-42496	tso	
180-17	42496-42497	"	
180-18	42498-42507	directive	
180-19	42508-42513	after	
180-20	42514-42517	the	
180-21	42518-42525	network	
180-22	42526-42530	card	
180-23	42531-42544	configuration	
180-24	42544-42545	;	
180-25	42546-42549	for	
180-26	42550-42557	example	
180-27	42557-42558	,	
180-28	42559-42560	#	
180-29	42561-42574	ifconfig_igb0	
180-30	42574-42575	=	
180-31	42575-42576	"	
180-32	42576-42580	inet	
180-33	42581-42591	10.10.10.1	
180-34	42592-42599	netmask	
180-35	42600-42613	255.255.255.0	
180-36	42614-42615	-	
180-37	42615-42618	tso	
180-38	42618-42619	"	
180-39	42619-42620	.	

#Text=Verify TSO is off
#Text=# on the hardware by making sure TSO4 and TSO6 are not seen in the "options="
#Text=# section using ifconfig.
#Text=# http://www.peerwisdom.org/2013/04/03/large-send-offload-and-network-performance/
#Text=net.inet.tcp.tso=0
#Text=# (default 1)
#Text=# Intel i350-T2 igb(4): flow control manages the rate of data transmission
#Text=# between two nodes preventing a fast sender from overwhelming a slow receiver.
#Text=# Ethernet "PAUSE" frames will pause transmission of all traffic types on a
#Text=# physical link, not just the individual flow causing the problem.
181-1	42621-42627	Verify	
181-2	42628-42631	TSO	
181-3	42632-42634	is	
181-4	42635-42638	off	
181-5	42639-42640	#	
181-6	42641-42643	on	
181-7	42644-42647	the	
181-8	42648-42656	hardware	
181-9	42657-42659	by	
181-10	42660-42666	making	
181-11	42667-42671	sure	
181-12	42672-42676	TSO4	
181-13	42677-42680	and	
181-14	42681-42685	TSO6	
181-15	42686-42689	are	
181-16	42690-42693	not	
181-17	42694-42698	seen	
181-18	42699-42701	in	
181-19	42702-42705	the	
181-20	42706-42707	"	
181-21	42707-42714	options	
181-22	42714-42715	=	
181-23	42715-42716	"	
181-24	42717-42718	#	
181-25	42719-42726	section	
181-26	42727-42732	using	
181-27	42733-42741	ifconfig	
181-28	42741-42742	.	
181-29	42743-42744	#	
181-30	42745-42749	http	
181-31	42749-42750	:	
181-32	42750-42751	/	
181-33	42751-42752	/	
181-34	42752-42770	www.peerwisdom.org	
181-35	42770-42771	/	
181-36	42771-42775	2013	
181-37	42775-42776	/	
181-38	42776-42778	04	
181-39	42778-42779	/	
181-40	42779-42781	03	
181-41	42781-42782	/	
181-42	42782-42824	large-send-offload-and-network-performance	
181-43	42824-42825	/	
181-44	42826-42842	net.inet.tcp.tso	
181-45	42842-42843	=	
181-46	42843-42844	0	
181-47	42845-42846	#	
181-48	42847-42848	(	
181-49	42848-42855	default	
181-50	42856-42857	1	
181-51	42857-42858	)	
181-52	42859-42860	#	
181-53	42861-42866	Intel	
181-54	42867-42871	i350	
181-55	42871-42872	-	
181-56	42872-42874	T2	
181-57	42875-42878	igb	
181-58	42878-42879	(	
181-59	42879-42880	4	
181-60	42880-42881	)	
181-61	42881-42882	:	
181-62	42883-42887	flow	
181-63	42888-42895	control	
181-64	42896-42903	manages	
181-65	42904-42907	the	
181-66	42908-42912	rate	
181-67	42913-42915	of	
181-68	42916-42920	data	
181-69	42921-42933	transmission	
181-70	42934-42935	#	
181-71	42936-42943	between	
181-72	42944-42947	two	
181-73	42948-42953	nodes	
181-74	42954-42964	preventing	
181-75	42965-42966	a	
181-76	42967-42971	fast	
181-77	42972-42978	sender	
181-78	42979-42983	from	
181-79	42984-42996	overwhelming	
181-80	42997-42998	a	
181-81	42999-43003	slow	
181-82	43004-43012	receiver	
181-83	43012-43013	.	
181-84	43014-43015	#	
181-85	43016-43024	Ethernet	
181-86	43025-43026	"	
181-87	43026-43031	PAUSE	
181-88	43031-43032	"	
181-89	43033-43039	frames	
181-90	43040-43044	will	
181-91	43045-43050	pause	
181-92	43051-43063	transmission	
181-93	43064-43066	of	
181-94	43067-43070	all	
181-95	43071-43078	traffic	
181-96	43079-43084	types	
181-97	43085-43087	on	
181-98	43088-43089	a	
181-99	43090-43091	#	
181-100	43092-43100	physical	
181-101	43101-43105	link	
181-102	43105-43106	,	
181-103	43107-43110	not	
181-104	43111-43115	just	
181-105	43116-43119	the	
181-106	43120-43130	individual	
181-107	43131-43135	flow	
181-108	43136-43143	causing	
181-109	43144-43147	the	
181-110	43148-43155	problem	
181-111	43155-43156	.	

#Text=By disabling
#Text=# physical link flow control the link instead relies on native TCP or QUIC UDP
#Text=# internal congestion control which is peer based on IP address and more fair
#Text=# to each flow.
182-1	43157-43159	By	
182-2	43160-43169	disabling	
182-3	43170-43171	#	
182-4	43172-43180	physical	
182-5	43181-43185	link	
182-6	43186-43190	flow	
182-7	43191-43198	control	
182-8	43199-43202	the	
182-9	43203-43207	link	
182-10	43208-43215	instead	
182-11	43216-43222	relies	
182-12	43223-43225	on	
182-13	43226-43232	native	
182-14	43233-43236	TCP	
182-15	43237-43239	or	
182-16	43240-43244	QUIC	
182-17	43245-43248	UDP	
182-18	43249-43250	#	
182-19	43251-43259	internal	
182-20	43260-43270	congestion	
182-21	43271-43278	control	
182-22	43279-43284	which	
182-23	43285-43287	is	
182-24	43288-43292	peer	
182-25	43293-43298	based	
182-26	43299-43301	on	
182-27	43302-43304	IP	
182-28	43305-43312	address	
182-29	43313-43316	and	
182-30	43317-43321	more	
182-31	43322-43326	fair	
182-32	43327-43328	#	
182-33	43329-43331	to	
182-34	43332-43336	each	
182-35	43337-43341	flow	
182-36	43341-43342	.	

#Text=The options are: (0=No Flow Control) (1=Receive Pause)
#Text=# (2=Transmit Pause) (3=Full Flow Control, Default).
183-1	43343-43346	The	
183-2	43347-43354	options	
183-3	43355-43358	are	
183-4	43358-43359	:	
183-5	43360-43361	(	
183-6	43361-43362	0	
183-7	43362-43363	=	
183-8	43363-43365	No	
183-9	43366-43370	Flow	
183-10	43371-43378	Control	
183-11	43378-43379	)	
183-12	43380-43381	(	
183-13	43381-43382	1	
183-14	43382-43383	=	
183-15	43383-43390	Receive	
183-16	43391-43396	Pause	
183-17	43396-43397	)	
183-18	43398-43399	#	
183-19	43400-43401	(	
183-20	43401-43402	2	
183-21	43402-43403	=	
183-22	43403-43411	Transmit	
183-23	43412-43417	Pause	
183-24	43417-43418	)	
183-25	43419-43420	(	
183-26	43420-43421	3	
183-27	43421-43422	=	
183-28	43422-43426	Full	
183-29	43427-43431	Flow	
183-30	43432-43439	Control	
183-31	43439-43440	,	
183-32	43441-43448	Default	
183-33	43448-43449	)	
183-34	43449-43450	.	

#Text=A value of zero(0)
#Text=# disables ethernet flow control on the Intel igb(4) interface.
#Text=# http://virtualthreads.blogspot.com/2006/02/beware-ethernet-flow-control.html
#Text=dev.igb.0.fc=0
#Text=# (default 3)
#Text=# Intel i350-T2 igb(4): the rx_budget sets the maximum number of receive
#Text=# packets to process in an interrupt.
184-1	43451-43452	A	
184-2	43453-43458	value	
184-3	43459-43461	of	
184-4	43462-43466	zero	
184-5	43466-43467	(	
184-6	43467-43468	0	
184-7	43468-43469	)	
184-8	43470-43471	#	
184-9	43472-43480	disables	
184-10	43481-43489	ethernet	
184-11	43490-43494	flow	
184-12	43495-43502	control	
184-13	43503-43505	on	
184-14	43506-43509	the	
184-15	43510-43515	Intel	
184-16	43516-43519	igb	
184-17	43519-43520	(	
184-18	43520-43521	4	
184-19	43521-43522	)	
184-20	43523-43532	interface	
184-21	43532-43533	.	
184-22	43534-43535	#	
184-23	43536-43540	http	
184-24	43540-43541	:	
184-25	43541-43542	/	
184-26	43542-43543	/	
184-27	43543-43570	virtualthreads.blogspot.com	
184-28	43570-43571	/	
184-29	43571-43575	2006	
184-30	43575-43576	/	
184-31	43576-43578	02	
184-32	43578-43579	/	
184-33	43579-43612	beware-ethernet-flow-control.html	
184-34	43613-43620	dev.igb	
184-35	43620-43622	.0	
184-36	43622-43623	.	
184-37	43623-43625	fc	
184-38	43625-43626	=	
184-39	43626-43627	0	
184-40	43628-43629	#	
184-41	43630-43631	(	
184-42	43631-43638	default	
184-43	43639-43640	3	
184-44	43640-43641	)	
184-45	43642-43643	#	
184-46	43644-43649	Intel	
184-47	43650-43654	i350	
184-48	43654-43655	-	
184-49	43655-43657	T2	
184-50	43658-43661	igb	
184-51	43661-43662	(	
184-52	43662-43663	4	
184-53	43663-43664	)	
184-54	43664-43665	:	
184-55	43666-43669	the	
184-56	43670-43679	rx_budget	
184-57	43680-43684	sets	
184-58	43685-43688	the	
184-59	43689-43696	maximum	
184-60	43697-43703	number	
184-61	43704-43706	of	
184-62	43707-43714	receive	
184-63	43715-43716	#	
184-64	43717-43724	packets	
184-65	43725-43727	to	
184-66	43728-43735	process	
184-67	43736-43738	in	
184-68	43739-43741	an	
184-69	43742-43751	interrupt	
184-70	43751-43752	.	

#Text=If the budget is reached, the
#Text=# remaining/pending packets will be processed later in a scheduled taskqueue.
#Text=# The default of zero(0) indicates a FreeBSD 12 default of sixteen(16) frames
#Text=# can be accepted at a time which is less than 24 kilobytes.
185-1	43753-43755	If	
185-2	43756-43759	the	
185-3	43760-43766	budget	
185-4	43767-43769	is	
185-5	43770-43777	reached	
185-6	43777-43778	,	
185-7	43779-43782	the	
185-8	43783-43784	#	
185-9	43785-43794	remaining	
185-10	43794-43795	/	
185-11	43795-43802	pending	
185-12	43803-43810	packets	
185-13	43811-43815	will	
185-14	43816-43818	be	
185-15	43819-43828	processed	
185-16	43829-43834	later	
185-17	43835-43837	in	
185-18	43838-43839	a	
185-19	43840-43849	scheduled	
185-20	43850-43859	taskqueue	
185-21	43859-43860	.	
185-22	43861-43862	#	
185-23	43863-43866	The	
185-24	43867-43874	default	
185-25	43875-43877	of	
185-26	43878-43882	zero	
185-27	43882-43883	(	
185-28	43883-43884	0	
185-29	43884-43885	)	
185-30	43886-43895	indicates	
185-31	43896-43897	a	
185-32	43898-43905	FreeBSD	
185-33	43906-43908	12	
185-34	43909-43916	default	
185-35	43917-43919	of	
185-36	43920-43927	sixteen	
185-37	43927-43928	(	
185-38	43928-43930	16	
185-39	43930-43931	)	
185-40	43932-43938	frames	
185-41	43939-43940	#	
185-42	43941-43944	can	
185-43	43945-43947	be	
185-44	43948-43956	accepted	
185-45	43957-43959	at	
185-46	43960-43961	a	
185-47	43962-43966	time	
185-48	43967-43972	which	
185-49	43973-43975	is	
185-50	43976-43980	less	
185-51	43981-43985	than	
185-52	43986-43988	24	
185-53	43989-43998	kilobytes	
185-54	43998-43999	.	

#Text=If the server is
#Text=# not CPU limited and also receiving an agglomeration of QUIC HTTP/3 UDP
#Text=# packets, we advise increasing the budget to a maximum of 65535 packets.
186-1	44000-44002	If	
186-2	44003-44006	the	
186-3	44007-44013	server	
186-4	44014-44016	is	
186-5	44017-44018	#	
186-6	44019-44022	not	
186-7	44023-44026	CPU	
186-8	44027-44034	limited	
186-9	44035-44038	and	
186-10	44039-44043	also	
186-11	44044-44053	receiving	
186-12	44054-44056	an	
186-13	44057-44070	agglomeration	
186-14	44071-44073	of	
186-15	44074-44078	QUIC	
186-16	44079-44083	HTTP	
186-17	44083-44084	/	
186-18	44084-44085	3	
186-19	44086-44089	UDP	
186-20	44090-44091	#	
186-21	44092-44099	packets	
186-22	44099-44100	,	
186-23	44101-44103	we	
186-24	44104-44110	advise	
186-25	44111-44121	increasing	
186-26	44122-44125	the	
186-27	44126-44132	budget	
186-28	44133-44135	to	
186-29	44136-44137	a	
186-30	44138-44145	maximum	
186-31	44146-44148	of	
186-32	44149-44154	65535	
186-33	44155-44162	packets	
186-34	44162-44163	.	

#Text="man
#Text=# iflib" for more information.
#Text=dev.igb.0.iflib.rx_budget=65535
#Text=# (default 0, which is 16 frames)
#Text=dev.igb.1.iflib.rx_budget=65535
#Text=# (default 0, which is 16 frames)
#Text=# Fortuna pseudorandom number generator (PRNG) maximum event size is also
#Text=# referred to as the minimum pool size.
187-1	44164-44165	"	
187-2	44165-44168	man	
187-3	44169-44170	#	
187-4	44171-44176	iflib	
187-5	44176-44177	"	
187-6	44178-44181	for	
187-7	44182-44186	more	
187-8	44187-44198	information	
187-9	44198-44199	.	
187-10	44200-44207	dev.igb	
187-11	44207-44209	.0	
187-12	44209-44210	.	
187-13	44210-44225	iflib.rx_budget	
187-14	44225-44226	=	
187-15	44226-44231	65535	
187-16	44232-44233	#	
187-17	44234-44235	(	
187-18	44235-44242	default	
187-19	44243-44244	0	
187-20	44244-44245	,	
187-21	44246-44251	which	
187-22	44252-44254	is	
187-23	44255-44257	16	
187-24	44258-44264	frames	
187-25	44264-44265	)	
187-26	44266-44273	dev.igb	
187-27	44273-44275	.1	
187-28	44275-44276	.	
187-29	44276-44291	iflib.rx_budget	
187-30	44291-44292	=	
187-31	44292-44297	65535	
187-32	44298-44299	#	
187-33	44300-44301	(	
187-34	44301-44308	default	
187-35	44309-44310	0	
187-36	44310-44311	,	
187-37	44312-44317	which	
187-38	44318-44320	is	
187-39	44321-44323	16	
187-40	44324-44330	frames	
187-41	44330-44331	)	
187-42	44332-44333	#	
187-43	44334-44341	Fortuna	
187-44	44342-44354	pseudorandom	
187-45	44355-44361	number	
187-46	44362-44371	generator	
187-47	44372-44373	(	
187-48	44373-44377	PRNG	
187-49	44377-44378	)	
187-50	44379-44386	maximum	
187-51	44387-44392	event	
187-52	44393-44397	size	
187-53	44398-44400	is	
187-54	44401-44405	also	
187-55	44406-44407	#	
187-56	44408-44416	referred	
187-57	44417-44419	to	
187-58	44420-44422	as	
187-59	44423-44426	the	
187-60	44427-44434	minimum	
187-61	44435-44439	pool	
187-62	44440-44444	size	
187-63	44444-44445	.	

#Text=Fortuna has a main generator which
#Text=# supplies the OS with PRNG data.
188-1	44446-44453	Fortuna	
188-2	44454-44457	has	
188-3	44458-44459	a	
188-4	44460-44464	main	
188-5	44465-44474	generator	
188-6	44475-44480	which	
188-7	44481-44482	#	
188-8	44483-44491	supplies	
188-9	44492-44495	the	
188-10	44496-44498	OS	
188-11	44499-44503	with	
188-12	44504-44508	PRNG	
188-13	44509-44513	data	
188-14	44513-44514	.	

#Text=The Fortuna generator is seeded by 32
#Text=# separate 'Fortuna' accumulation pools which each have to be filled with at
#Text=# least 'minpoolsize' bytes before being able to seed the OS with random bits.
#Text=# On FreeBSD, the default 'minpoolsize' of 64 bytes is an estimate of the
#Text=# minimum amount of bytes a new pool should contain to provide at least 128
#Text=# bits of entropy.
189-1	44515-44518	The	
189-2	44519-44526	Fortuna	
189-3	44527-44536	generator	
189-4	44537-44539	is	
189-5	44540-44546	seeded	
189-6	44547-44549	by	
189-7	44550-44552	32	
189-8	44553-44554	#	
189-9	44555-44563	separate	
189-10	44564-44565	'	
189-11	44565-44572	Fortuna	
189-12	44572-44573	'	
189-13	44574-44586	accumulation	
189-14	44587-44592	pools	
189-15	44593-44598	which	
189-16	44599-44603	each	
189-17	44604-44608	have	
189-18	44609-44611	to	
189-19	44612-44614	be	
189-20	44615-44621	filled	
189-21	44622-44626	with	
189-22	44627-44629	at	
189-23	44630-44631	#	
189-24	44632-44637	least	
189-25	44638-44639	'	
189-26	44639-44650	minpoolsize	
189-27	44650-44651	'	
189-28	44652-44657	bytes	
189-29	44658-44664	before	
189-30	44665-44670	being	
189-31	44671-44675	able	
189-32	44676-44678	to	
189-33	44679-44683	seed	
189-34	44684-44687	the	
189-35	44688-44690	OS	
189-36	44691-44695	with	
189-37	44696-44702	random	
189-38	44703-44707	bits	
189-39	44707-44708	.	
189-40	44709-44710	#	
189-41	44711-44713	On	
189-42	44714-44721	FreeBSD	
189-43	44721-44722	,	
189-44	44723-44726	the	
189-45	44727-44734	default	
189-46	44735-44736	'	
189-47	44736-44747	minpoolsize	
189-48	44747-44748	'	
189-49	44749-44751	of	
189-50	44752-44754	64	
189-51	44755-44760	bytes	
189-52	44761-44763	is	
189-53	44764-44766	an	
189-54	44767-44775	estimate	
189-55	44776-44778	of	
189-56	44779-44782	the	
189-57	44783-44784	#	
189-58	44785-44792	minimum	
189-59	44793-44799	amount	
189-60	44800-44802	of	
189-61	44803-44808	bytes	
189-62	44809-44810	a	
189-63	44811-44814	new	
189-64	44815-44819	pool	
189-65	44820-44826	should	
189-66	44827-44834	contain	
189-67	44835-44837	to	
189-68	44838-44845	provide	
189-69	44846-44848	at	
189-70	44849-44854	least	
189-71	44855-44858	128	
189-72	44859-44860	#	
189-73	44861-44865	bits	
189-74	44866-44868	of	
189-75	44869-44876	entropy	
189-76	44876-44877	.	

#Text=After a pool is used in a generator reseed, that pool is
#Text=# reset to an empty string and must reach 'minpoolsize' bytes again before
#Text=# being used as a seed.
190-1	44878-44883	After	
190-2	44884-44885	a	
190-3	44886-44890	pool	
190-4	44891-44893	is	
190-5	44894-44898	used	
190-6	44899-44901	in	
190-7	44902-44903	a	
190-8	44904-44913	generator	
190-9	44914-44920	reseed	
190-10	44920-44921	,	
190-11	44922-44926	that	
190-12	44927-44931	pool	
190-13	44932-44934	is	
190-14	44935-44936	#	
190-15	44937-44942	reset	
190-16	44943-44945	to	
190-17	44946-44948	an	
190-18	44949-44954	empty	
190-19	44955-44961	string	
190-20	44962-44965	and	
190-21	44966-44970	must	
190-22	44971-44976	reach	
190-23	44977-44978	'	
190-24	44978-44989	minpoolsize	
190-25	44989-44990	'	
190-26	44991-44996	bytes	
190-27	44997-45002	again	
190-28	45003-45009	before	
190-29	45010-45011	#	
190-30	45012-45017	being	
190-31	45018-45022	used	
190-32	45023-45025	as	
190-33	45026-45027	a	
190-34	45028-45032	seed	
190-35	45032-45033	.	

#Text=Increasing the 'minpoolsize' allows higher entropy into
#Text=# the accumulation pools before being assimilated by the generator.
#Text=# The Fortuna authors state 64 bytes is safe enough even if an attacker
#Text=# influences some random source data.
191-1	45034-45044	Increasing	
191-2	45045-45048	the	
191-3	45049-45050	'	
191-4	45050-45061	minpoolsize	
191-5	45061-45062	'	
191-6	45063-45069	allows	
191-7	45070-45076	higher	
191-8	45077-45084	entropy	
191-9	45085-45089	into	
191-10	45090-45091	#	
191-11	45092-45095	the	
191-12	45096-45108	accumulation	
191-13	45109-45114	pools	
191-14	45115-45121	before	
191-15	45122-45127	being	
191-16	45128-45139	assimilated	
191-17	45140-45142	by	
191-18	45143-45146	the	
191-19	45147-45156	generator	
191-20	45156-45157	.	
191-21	45158-45159	#	
191-22	45160-45163	The	
191-23	45164-45171	Fortuna	
191-24	45172-45179	authors	
191-25	45180-45185	state	
191-26	45186-45188	64	
191-27	45189-45194	bytes	
191-28	45195-45197	is	
191-29	45198-45202	safe	
191-30	45203-45209	enough	
191-31	45210-45214	even	
191-32	45215-45217	if	
191-33	45218-45220	an	
191-34	45221-45229	attacker	
191-35	45230-45231	#	
191-36	45232-45242	influences	
191-37	45243-45247	some	
191-38	45248-45254	random	
191-39	45255-45261	source	
191-40	45262-45266	data	
191-41	45266-45267	.	

#Text=To be a bit more paranoid, we increase
#Text=# the 'minpoolsize' to 128 bytes so each pool will provide an absolute minimum
#Text=# of 256 bits of entropy, but realistically closer to 1024 bits of entropy, for
#Text=# each of the 32 Fortuna accumulation pools.
192-1	45268-45270	To	
192-2	45271-45273	be	
192-3	45274-45275	a	
192-4	45276-45279	bit	
192-5	45280-45284	more	
192-6	45285-45293	paranoid	
192-7	45293-45294	,	
192-8	45295-45297	we	
192-9	45298-45306	increase	
192-10	45307-45308	#	
192-11	45309-45312	the	
192-12	45313-45314	'	
192-13	45314-45325	minpoolsize	
192-14	45325-45326	'	
192-15	45327-45329	to	
192-16	45330-45333	128	
192-17	45334-45339	bytes	
192-18	45340-45342	so	
192-19	45343-45347	each	
192-20	45348-45352	pool	
192-21	45353-45357	will	
192-22	45358-45365	provide	
192-23	45366-45368	an	
192-24	45369-45377	absolute	
192-25	45378-45385	minimum	
192-26	45386-45387	#	
192-27	45388-45390	of	
192-28	45391-45394	256	
192-29	45395-45399	bits	
192-30	45400-45402	of	
192-31	45403-45410	entropy	
192-32	45410-45411	,	
192-33	45412-45415	but	
192-34	45416-45429	realistically	
192-35	45430-45436	closer	
192-36	45437-45439	to	
192-37	45440-45444	1024	
192-38	45445-45449	bits	
192-39	45450-45452	of	
192-40	45453-45460	entropy	
192-41	45460-45461	,	
192-42	45462-45465	for	
192-43	45466-45467	#	
192-44	45468-45472	each	
192-45	45473-45475	of	
192-46	45476-45479	the	
192-47	45480-45482	32	
192-48	45483-45490	Fortuna	
192-49	45491-45503	accumulation	
192-50	45504-45509	pools	
192-51	45509-45510	.	

#Text=Values of 128 bytes and 256 bytes
#Text=# are reasonable when coupled with a dedicated hardware based PRNG like the
#Text=# fast source Intel Secure Key RNG (PURE_RDRAND).
193-1	45511-45517	Values	
193-2	45518-45520	of	
193-3	45521-45524	128	
193-4	45525-45530	bytes	
193-5	45531-45534	and	
193-6	45535-45538	256	
193-7	45539-45544	bytes	
193-8	45545-45546	#	
193-9	45547-45550	are	
193-10	45551-45561	reasonable	
193-11	45562-45566	when	
193-12	45567-45574	coupled	
193-13	45575-45579	with	
193-14	45580-45581	a	
193-15	45582-45591	dedicated	
193-16	45592-45600	hardware	
193-17	45601-45606	based	
193-18	45607-45611	PRNG	
193-19	45612-45616	like	
193-20	45617-45620	the	
193-21	45621-45622	#	
193-22	45623-45627	fast	
193-23	45628-45634	source	
193-24	45635-45640	Intel	
193-25	45641-45647	Secure	
193-26	45648-45651	Key	
193-27	45652-45655	RNG	
193-28	45656-45657	(	
193-29	45657-45668	PURE_RDRAND	
193-30	45668-45669	)	
193-31	45669-45670	.	

#Text=Do not make the pool value
#Text=# too large as this will delay the reseed even if very good random sources are
#Text=# available. https://www.schneier.com/academic/paperfiles/fortuna.pdf
#Text=# FYI: on FreeBSD 11, values over 64 can incur additional reboot time to
#Text=# populate the pools during the "Feeding entropy:" boot stage.
194-1	45671-45673	Do	
194-2	45674-45677	not	
194-3	45678-45682	make	
194-4	45683-45686	the	
194-5	45687-45691	pool	
194-6	45692-45697	value	
194-7	45698-45699	#	
194-8	45700-45703	too	
194-9	45704-45709	large	
194-10	45710-45712	as	
194-11	45713-45717	this	
194-12	45718-45722	will	
194-13	45723-45728	delay	
194-14	45729-45732	the	
194-15	45733-45739	reseed	
194-16	45740-45744	even	
194-17	45745-45747	if	
194-18	45748-45752	very	
194-19	45753-45757	good	
194-20	45758-45764	random	
194-21	45765-45772	sources	
194-22	45773-45776	are	
194-23	45777-45778	#	
194-24	45779-45788	available	
194-25	45788-45789	.	
194-26	45790-45795	https	
194-27	45795-45796	:	
194-28	45796-45797	/	
194-29	45797-45798	/	
194-30	45798-45814	www.schneier.com	
194-31	45814-45815	/	
194-32	45815-45823	academic	
194-33	45823-45824	/	
194-34	45824-45834	paperfiles	
194-35	45834-45835	/	
194-36	45835-45846	fortuna.pdf	
194-37	45847-45848	#	
194-38	45849-45852	FYI	
194-39	45852-45853	:	
194-40	45854-45856	on	
194-41	45857-45864	FreeBSD	
194-42	45865-45867	11	
194-43	45867-45868	,	
194-44	45869-45875	values	
194-45	45876-45880	over	
194-46	45881-45883	64	
194-47	45884-45887	can	
194-48	45888-45893	incur	
194-49	45894-45904	additional	
194-50	45905-45911	reboot	
194-51	45912-45916	time	
194-52	45917-45919	to	
194-53	45920-45921	#	
194-54	45922-45930	populate	
194-55	45931-45934	the	
194-56	45935-45940	pools	
194-57	45941-45947	during	
194-58	45948-45951	the	
194-59	45952-45953	"	
194-60	45953-45960	Feeding	
194-61	45961-45968	entropy	
194-62	45968-45969	:	
194-63	45969-45970	"	
194-64	45971-45975	boot	
194-65	45976-45981	stage	
194-66	45981-45982	.	

#Text=For example, a
#Text=# pool size value of 256 can add an additional 90 seconds to boot the machine.
#Text=# FreeBSD 12 has been patched to not incur the boot delay issue with larger
#Text=# pool values.
#Text=kern.random.fortuna.minpoolsize=128
#Text=# (default 64)
#Text=# Entropy is the amount of order, disorder or chaos observed in a system which
#Text=# can be observed by FreeBSD and fed though Fortuna to the accumulation pools.
#Text=# Setting the harvest.mask to 67583 allows the OS to harvest entropy from any
#Text=# source including peripherals, network traffic, the universal memory allocator
#Text=# (UMA) and interrupts (SWI), but be warned, setting the harvest mask to 67583
#Text=# will limit network throughput to less than a gigabit even on modern hardware.
#Text=# When running a ten(10) gigabit network with more than four(4) real CPU cores
#Text=# and more than four(4) network card queues it is recommended to reduce the
#Text=# harvest mask to 33119 to disable UMA.
195-1	45983-45986	For	
195-2	45987-45994	example	
195-3	45994-45995	,	
195-4	45996-45997	a	
195-5	45998-45999	#	
195-6	46000-46004	pool	
195-7	46005-46009	size	
195-8	46010-46015	value	
195-9	46016-46018	of	
195-10	46019-46022	256	
195-11	46023-46026	can	
195-12	46027-46030	add	
195-13	46031-46033	an	
195-14	46034-46044	additional	
195-15	46045-46047	90	
195-16	46048-46055	seconds	
195-17	46056-46058	to	
195-18	46059-46063	boot	
195-19	46064-46067	the	
195-20	46068-46075	machine	
195-21	46075-46076	.	
195-22	46077-46078	#	
195-23	46079-46086	FreeBSD	
195-24	46087-46089	12	
195-25	46090-46093	has	
195-26	46094-46098	been	
195-27	46099-46106	patched	
195-28	46107-46109	to	
195-29	46110-46113	not	
195-30	46114-46119	incur	
195-31	46120-46123	the	
195-32	46124-46128	boot	
195-33	46129-46134	delay	
195-34	46135-46140	issue	
195-35	46141-46145	with	
195-36	46146-46152	larger	
195-37	46153-46154	#	
195-38	46155-46159	pool	
195-39	46160-46166	values	
195-40	46166-46167	.	
195-41	46168-46199	kern.random.fortuna.minpoolsize	
195-42	46199-46200	=	
195-43	46200-46203	128	
195-44	46204-46205	#	
195-45	46206-46207	(	
195-46	46207-46214	default	
195-47	46215-46217	64	
195-48	46217-46218	)	
195-49	46219-46220	#	
195-50	46221-46228	Entropy	
195-51	46229-46231	is	
195-52	46232-46235	the	
195-53	46236-46242	amount	
195-54	46243-46245	of	
195-55	46246-46251	order	
195-56	46251-46252	,	
195-57	46253-46261	disorder	
195-58	46262-46264	or	
195-59	46265-46270	chaos	
195-60	46271-46279	observed	
195-61	46280-46282	in	
195-62	46283-46284	a	
195-63	46285-46291	system	
195-64	46292-46297	which	
195-65	46298-46299	#	
195-66	46300-46303	can	
195-67	46304-46306	be	
195-68	46307-46315	observed	
195-69	46316-46318	by	
195-70	46319-46326	FreeBSD	
195-71	46327-46330	and	
195-72	46331-46334	fed	
195-73	46335-46341	though	
195-74	46342-46349	Fortuna	
195-75	46350-46352	to	
195-76	46353-46356	the	
195-77	46357-46369	accumulation	
195-78	46370-46375	pools	
195-79	46375-46376	.	
195-80	46377-46378	#	
195-81	46379-46386	Setting	
195-82	46387-46390	the	
195-83	46391-46403	harvest.mask	
195-84	46404-46406	to	
195-85	46407-46412	67583	
195-86	46413-46419	allows	
195-87	46420-46423	the	
195-88	46424-46426	OS	
195-89	46427-46429	to	
195-90	46430-46437	harvest	
195-91	46438-46445	entropy	
195-92	46446-46450	from	
195-93	46451-46454	any	
195-94	46455-46456	#	
195-95	46457-46463	source	
195-96	46464-46473	including	
195-97	46474-46485	peripherals	
195-98	46485-46486	,	
195-99	46487-46494	network	
195-100	46495-46502	traffic	
195-101	46502-46503	,	
195-102	46504-46507	the	
195-103	46508-46517	universal	
195-104	46518-46524	memory	
195-105	46525-46534	allocator	
195-106	46535-46536	#	
195-107	46537-46538	(	
195-108	46538-46541	UMA	
195-109	46541-46542	)	
195-110	46543-46546	and	
195-111	46547-46557	interrupts	
195-112	46558-46559	(	
195-113	46559-46562	SWI	
195-114	46562-46563	)	
195-115	46563-46564	,	
195-116	46565-46568	but	
195-117	46569-46571	be	
195-118	46572-46578	warned	
195-119	46578-46579	,	
195-120	46580-46587	setting	
195-121	46588-46591	the	
195-122	46592-46599	harvest	
195-123	46600-46604	mask	
195-124	46605-46607	to	
195-125	46608-46613	67583	
195-126	46614-46615	#	
195-127	46616-46620	will	
195-128	46621-46626	limit	
195-129	46627-46634	network	
195-130	46635-46645	throughput	
195-131	46646-46648	to	
195-132	46649-46653	less	
195-133	46654-46658	than	
195-134	46659-46660	a	
195-135	46661-46668	gigabit	
195-136	46669-46673	even	
195-137	46674-46676	on	
195-138	46677-46683	modern	
195-139	46684-46692	hardware	
195-140	46692-46693	.	
195-141	46694-46695	#	
195-142	46696-46700	When	
195-143	46701-46708	running	
195-144	46709-46710	a	
195-145	46711-46714	ten	
195-146	46714-46715	(	
195-147	46715-46717	10	
195-148	46717-46718	)	
195-149	46719-46726	gigabit	
195-150	46727-46734	network	
195-151	46735-46739	with	
195-152	46740-46744	more	
195-153	46745-46749	than	
195-154	46750-46754	four	
195-155	46754-46755	(	
195-156	46755-46756	4	
195-157	46756-46757	)	
195-158	46758-46762	real	
195-159	46763-46766	CPU	
195-160	46767-46772	cores	
195-161	46773-46774	#	
195-162	46775-46778	and	
195-163	46779-46783	more	
195-164	46784-46788	than	
195-165	46789-46793	four	
195-166	46793-46794	(	
195-167	46794-46795	4	
195-168	46795-46796	)	
195-169	46797-46804	network	
195-170	46805-46809	card	
195-171	46810-46816	queues	
195-172	46817-46819	it	
195-173	46820-46822	is	
195-174	46823-46834	recommended	
195-175	46835-46837	to	
195-176	46838-46844	reduce	
195-177	46845-46848	the	
195-178	46849-46850	#	
195-179	46851-46858	harvest	
195-180	46859-46863	mask	
195-181	46864-46866	to	
195-182	46867-46872	33119	
195-183	46873-46875	to	
195-184	46876-46883	disable	
195-185	46884-46887	UMA	
195-186	46887-46888	.	

#Text=FS_ATIME, INTERRUPT and NET_ETHER
#Text=# entropy sources in order to achieve peak packets per second (PPS).
196-1	46889-46897	FS_ATIME	
196-2	46897-46898	,	
196-3	46899-46908	INTERRUPT	
196-4	46909-46912	and	
196-5	46913-46922	NET_ETHER	
196-6	46923-46924	#	
196-7	46925-46932	entropy	
196-8	46933-46940	sources	
196-9	46941-46943	in	
196-10	46944-46949	order	
196-11	46950-46952	to	
196-12	46953-46960	achieve	
196-13	46961-46965	peak	
196-14	46966-46973	packets	
196-15	46974-46977	per	
196-16	46978-46984	second	
196-17	46985-46986	(	
196-18	46986-46989	PPS	
196-19	46989-46990	)	
196-20	46990-46991	.	

#Text=By
#Text=# default, Fortuna will use a CPU's 'Intel Secure Key RNG' if available in
#Text=# hardware (PURE_RDRAND).
197-1	46992-46994	By	
197-2	46995-46996	#	
197-3	46997-47004	default	
197-4	47004-47005	,	
197-5	47006-47013	Fortuna	
197-6	47014-47018	will	
197-7	47019-47022	use	
197-8	47023-47024	a	
197-9	47025-47030	CPU's	
197-10	47031-47032	'	
197-11	47032-47037	Intel	
197-12	47038-47044	Secure	
197-13	47045-47048	Key	
197-14	47049-47052	RNG	
197-15	47052-47053	'	
197-16	47054-47056	if	
197-17	47057-47066	available	
197-18	47067-47069	in	
197-19	47070-47071	#	
197-20	47072-47080	hardware	
197-21	47081-47082	(	
197-22	47082-47093	PURE_RDRAND	
197-23	47093-47094	)	
197-24	47094-47095	.	

#Text=Use "sysctl kern.random.harvest" to check the
#Text=# symbolic entropy sources being polled; disabled items are listed in square
#Text=# brackets.
198-1	47096-47099	Use	
198-2	47100-47101	"	
198-3	47101-47107	sysctl	
198-4	47108-47127	kern.random.harvest	
198-5	47127-47128	"	
198-6	47129-47131	to	
198-7	47132-47137	check	
198-8	47138-47141	the	
198-9	47142-47143	#	
198-10	47144-47152	symbolic	
198-11	47153-47160	entropy	
198-12	47161-47168	sources	
198-13	47169-47174	being	
198-14	47175-47181	polled	
198-15	47181-47182	;	
198-16	47183-47191	disabled	
198-17	47192-47197	items	
198-18	47198-47201	are	
198-19	47202-47208	listed	
198-20	47209-47211	in	
198-21	47212-47218	square	
198-22	47219-47220	#	
198-23	47221-47229	brackets	
198-24	47229-47230	.	

#Text=A harvest mask of 33119 is only around four(4%) more efficient than
#Text=# the default mask of 33247 at the maximum packets per second of the interface.
199-1	47231-47232	A	
199-2	47233-47240	harvest	
199-3	47241-47245	mask	
199-4	47246-47248	of	
199-5	47249-47254	33119	
199-6	47255-47257	is	
199-7	47258-47262	only	
199-8	47263-47269	around	
199-9	47270-47274	four	
199-10	47274-47275	(	
199-11	47275-47277	4%	
199-12	47277-47278	)	
199-13	47279-47283	more	
199-14	47284-47293	efficient	
199-15	47294-47298	than	
199-16	47299-47300	#	
199-17	47301-47304	the	
199-18	47305-47312	default	
199-19	47313-47317	mask	
199-20	47318-47320	of	
199-21	47321-47326	33247	
199-22	47327-47329	at	
199-23	47330-47333	the	
199-24	47334-47341	maximum	
199-25	47342-47349	packets	
199-26	47350-47353	per	
199-27	47354-47360	second	
199-28	47361-47363	of	
199-29	47364-47367	the	
199-30	47368-47377	interface	
199-31	47377-47378	.	

#Text=#kern.random.harvest.mask=351
#Text=# (default 511,
#Text=FreeBSD 11 and 12 without Intel Secure Key RNG)
#Text=#kern.random.harvest.mask=65887
#Text=# (default 66047, FreeBSD 12 with Intel Secure Key RNG)
#Text=kern.random.harvest.mask=33119
#Text=# (default 33247, FreeBSD 13 with Intel Secure Key RNG)
#Text=# HardenedBSD and DoS mitigation
#Text=hw.kbd.keymap_restrict_change=4
#Text=# disallow keymap changes for non-privileged users (default 0)
#Text=kern.elf32.allow_wx=0
#Text=# enforce W^X memory mapping policy for 32 bit user processes (default 1, disabled)
#Text=kern.elf64.allow_wx=0
#Text=# enforce W^X memory mapping policy for 64 bit user processes (default 1, disabled)
#Text=kern.ipc.shm_use_phys=1
#Text=# lock shared memory into RAM and prevent it from being paged out to swap (default 0, disabled)
#Text=kern.msgbuf_show_timestamp=1
#Text=# display timestamp in msgbuf (default 0)
#Text=kern.randompid=1
#Text=# calculate PIDs by the modulus of an integer, set to one(1) to auto random (default 0)
#Text=net.bpf.optimize_writers=1
#Text=# bpf is write-only unless program explicitly specifies the read filter (default 0)
#Text=net.inet.icmp.drop_redirect=1
#Text=# no redirected ICMP packets (default 0)
#Text=net.inet.ip.check_interface=1
#Text=# verify packet arrives on correct interface (default 0)
#Text=net.inet.ip.portrange.first=32768
#Text=# use ports 32768 to portrange.last for outgoing connections (default 10000)
#Text=net.inet.ip.portrange.randomcps=9999 # use random port allocation if less than this many ports per second are allocated (default 10)
#Text=net.inet.ip.portrange.randomtime=1 # seconds to use sequental port allocation before switching back to random (default 45 secs)
#Text=net.inet.ip.random_id=1
#Text=# assign a random IP id to each packet leaving the system (default 0)
#Text=net.inet.ip.redirect=0
#Text=# do not send IP redirects (default 1)
#Text=net.inet6.ip6.redirect=0
#Text=# do not send IPv6 redirects (default 1)
#Text=net.inet.tcp.blackhole=2
#Text=# drop tcp packets destined for closed ports (default 0)
#Text=net.inet.tcp.drop_synfin=1
#Text=# SYN/FIN packets get dropped on initial connection (default 0)
#Text=net.inet.tcp.fast_finwait2_recycle=1 # recycle FIN/WAIT states quickly, helps against DoS, but may cause false RST (default 0)
#Text=net.inet.tcp.fastopen.client_enable=0 # disable TCP Fast Open client side, enforce three way TCP handshake (default 1, enabled)
#Text=net.inet.tcp.fastopen.server_enable=0 # disable TCP Fast Open server side, enforce three way TCP handshake (default 0)
#Text=net.inet.tcp.finwait2_timeout=1000 # TCP FIN_WAIT_2 timeout waiting for client FIN packet before state close (default 60000, 60 sec)
#Text=net.inet.tcp.icmp_may_rst=0
#Text=# icmp may not send RST to avoid spoofed icmp/udp floods (default 1)
#Text=net.inet.tcp.keepcnt=2
#Text=# amount of tcp keep alive probe failures before socket is forced closed (default 8)
#Text=net.inet.tcp.keepidle=62000
#Text=# time before starting tcp keep alive probes on an idle, TCP connection (default 7200000, 7200 secs)
#Text=net.inet.tcp.keepinit=5000
#Text=# tcp keep alive client reply timeout (default 75000, 75 secs)
#Text=net.inet.tcp.msl=2500
#Text=# Maximum Segment Lifetime, time the connection spends in TIME_WAIT state (default 30000, 2*MSL = 60 sec)
#Text=net.inet.tcp.path_mtu_discovery=0
#Text=# disable for mtu=1500 as most paths drop ICMP type 3 packets, but keep enabled for mtu=9000 (default 1)
#Text=net.inet.udp.blackhole=1
#Text=# drop udp packets destined for closed sockets (default 0)
#Text=net.inet.udp.recvspace=1048576
#Text=# UDP receive space, HTTP/3 webserver, "netstat -sn -p udp" and increase if full socket buffers (default 42080)
#Text=security.bsd.hardlink_check_gid=1
#Text=# unprivileged processes may not create hard links to files owned by other groups, DISABLE for mailman (default 0)
#Text=security.bsd.hardlink_check_uid=1
#Text=# unprivileged processes may not create hard links to files owned by other users,
#Text=DISABLE for mailman (default 0)
#Text=security.bsd.see_other_gids=0
#Text=# groups only see their own processes. root can see all (default 1)
#Text=security.bsd.see_other_uids=0
#Text=# users only see their own processes. root can see all (default 1)
#Text=security.bsd.stack_guard_page=1
#Text=# insert a stack guard page ahead of growable segments, stack smashing protection (SSP) (default 0)
#Text=security.bsd.unprivileged_proc_debug=0 # unprivileged processes may not use process debugging (default 1)
#Text=security.bsd.unprivileged_read_msgbuf=0 # unprivileged processes may not read the kernel message buffer (default 1)
#Text=# ZFS Tuning for PCIe NVMe M.2 and 64GB system RAM
#Text=# book: FreeBSD Mastery: ZFS By Michael W Lucas and Allan Jude
#Text=# https://www.pugetsystems.com/labs/articles/Samsung-950-Pro-M-2-Additional-Cooling-Testing-795/
#Text=# http://dtrace.org/blogs/ahl/2012/12/13/zfs-fundamentals-transaction-groups/
#Text=# http://dtrace.org/blogs/ahl/2013/12/27/zfs-fundamentals-the-write-throttle/
#Text=# http://bit.csc.lsu.edu/~fchen/publications/papers/hpca11.pdf
#Text=# http://dtrace.org/blogs/ahl/2014/08/31/openzfs-tuning/
#Text=# https://www.freebsd.org/doc/handbook/zfs-advanced.html
#Text=# https://calomel.org/zfs_freebsd_root_install.html
#Text=# NVMe drive
#Text=: Samsung 960 EVO 1TB PCIe 3.0 ×4 NVMe M.2 (MZ-V6E1T0BW)
#Text=# before zfs tuning : reads 1.87 GB/s
#Text=writes 1.86 GB/s
#Text=scrub 1.88 GB/s
#Text=19.2K IOPs
#Text=after zfs tuning : reads 3.11 GB/s
#Text=writes 1.95 GB/s
#Text=scrub 3.11 GB/s
#Text=3.8K IOPs
#Text=# NVMe drive
#Text=: ADATA XPG SX8200 Pro 1TB PCIe 3.0 ×4 NVMe M.2 (ASX8200PNP-1TT-C)
#Text=# before zfs tuning : reads 1.88 GB/s
#Text=writes 1.86 GB/s
#Text=scrub 1.88 GB/s
#Text=19.3K IOPs
#Text=after zfs tuning : reads 3.27 GB/s
#Text=writes 2.62 GB/s
#Text=scrub 3.27 GB/s
#Text=2.6K IOPs
#Text=vfs.zfs.delay_min_dirty_percent=98
#Text=# write throttle when dirty "modified" data reaches 98% of dirty_data_max (default 60%)
#Text=vfs.zfs.dirty_data_sync_percent=95
#Text=# force commit Transaction Group (TXG) if dirty_data reaches 95% of dirty_data_max (default 20%)
#Text=vfs.zfs.min_auto_ashift=12
#Text=# newly created pool ashift, set to 12 for 4K and 13 for 8k alignment, zdb (default 9, 512 byte, ashift=9)
#Text=vfs.zfs.trim.txg_batch=128
#Text=# max number of TRIMs per top-level vdev (default 32)
#Text=vfs.zfs.txg.timeout=75
#Text=# force commit Transaction Group (TXG) at 75 secs, increase to aggregated more data (default 5 sec)
#Text=vfs.zfs.vdev.def_queue_depth=128
#Text=# max number of outstanding I/Os per top-level vdev (default 32)
#Text=vfs.zfs.vdev.write_gap_limit=0
#Text=# max gap between any two aggregated writes, 0 to minimize frags (default 4096, 4KB)
#Text=ZFS Tuning: The plan is to use large amounts of RAM for dirty_data_max to
#Text=# buffer incoming data before ZFS must commit the data in the next Transaction
#Text=# Group (TXG) to the physical drives in the pool.
200-1	47379-47380	#	
200-2	47380-47404	kern.random.harvest.mask	
200-3	47404-47405	=	
200-4	47405-47408	351	
200-5	47409-47410	#	
200-6	47411-47412	(	
200-7	47412-47419	default	
200-8	47420-47423	511	
200-9	47423-47424	,	
200-10	47425-47432	FreeBSD	
200-11	47433-47435	11	
200-12	47436-47439	and	
200-13	47440-47442	12	
200-14	47443-47450	without	
200-15	47451-47456	Intel	
200-16	47457-47463	Secure	
200-17	47464-47467	Key	
200-18	47468-47471	RNG	
200-19	47471-47472	)	
200-20	47473-47474	#	
200-21	47474-47498	kern.random.harvest.mask	
200-22	47498-47499	=	
200-23	47499-47504	65887	
200-24	47505-47506	#	
200-25	47507-47508	(	
200-26	47508-47515	default	
200-27	47516-47521	66047	
200-28	47521-47522	,	
200-29	47523-47530	FreeBSD	
200-30	47531-47533	12	
200-31	47534-47538	with	
200-32	47539-47544	Intel	
200-33	47545-47551	Secure	
200-34	47552-47555	Key	
200-35	47556-47559	RNG	
200-36	47559-47560	)	
200-37	47561-47585	kern.random.harvest.mask	
200-38	47585-47586	=	
200-39	47586-47591	33119	
200-40	47592-47593	#	
200-41	47594-47595	(	
200-42	47595-47602	default	
200-43	47603-47608	33247	
200-44	47608-47609	,	
200-45	47610-47617	FreeBSD	
200-46	47618-47620	13	
200-47	47621-47625	with	
200-48	47626-47631	Intel	
200-49	47632-47638	Secure	
200-50	47639-47642	Key	
200-51	47643-47646	RNG	
200-52	47646-47647	)	
200-53	47648-47649	#	
200-54	47650-47661	HardenedBSD	
200-55	47662-47665	and	
200-56	47666-47669	DoS	
200-57	47670-47680	mitigation	
200-58	47681-47710	hw.kbd.keymap_restrict_change	
200-59	47710-47711	=	
200-60	47711-47712	4	
200-61	47713-47714	#	
200-62	47715-47723	disallow	
200-63	47724-47730	keymap	
200-64	47731-47738	changes	
200-65	47739-47742	for	
200-66	47743-47757	non-privileged	
200-67	47758-47763	users	
200-68	47764-47765	(	
200-69	47765-47772	default	
200-70	47773-47774	0	
200-71	47774-47775	)	
200-72	47776-47786	kern.elf32	
200-73	47786-47787	.	
200-74	47787-47795	allow_wx	
200-75	47795-47796	=	
200-76	47796-47797	0	
200-77	47798-47799	#	
200-78	47800-47807	enforce	
200-79	47808-47809	W	
200-80	47809-47810	^	
200-81	47810-47811	X	
200-82	47812-47818	memory	
200-83	47819-47826	mapping	
200-84	47827-47833	policy	
200-85	47834-47837	for	
200-86	47838-47840	32	
200-87	47841-47844	bit	
200-88	47845-47849	user	
200-89	47850-47859	processes	
200-90	47860-47861	(	
200-91	47861-47868	default	
200-92	47869-47870	1	
200-93	47870-47871	,	
200-94	47872-47880	disabled	
200-95	47880-47881	)	
200-96	47882-47892	kern.elf64	
200-97	47892-47893	.	
200-98	47893-47901	allow_wx	
200-99	47901-47902	=	
200-100	47902-47903	0	
200-101	47904-47905	#	
200-102	47906-47913	enforce	
200-103	47914-47915	W	
200-104	47915-47916	^	
200-105	47916-47917	X	
200-106	47918-47924	memory	
200-107	47925-47932	mapping	
200-108	47933-47939	policy	
200-109	47940-47943	for	
200-110	47944-47946	64	
200-111	47947-47950	bit	
200-112	47951-47955	user	
200-113	47956-47965	processes	
200-114	47966-47967	(	
200-115	47967-47974	default	
200-116	47975-47976	1	
200-117	47976-47977	,	
200-118	47978-47986	disabled	
200-119	47986-47987	)	
200-120	47988-48009	kern.ipc.shm_use_phys	
200-121	48009-48010	=	
200-122	48010-48011	1	
200-123	48012-48013	#	
200-124	48014-48018	lock	
200-125	48019-48025	shared	
200-126	48026-48032	memory	
200-127	48033-48037	into	
200-128	48038-48041	RAM	
200-129	48042-48045	and	
200-130	48046-48053	prevent	
200-131	48054-48056	it	
200-132	48057-48061	from	
200-133	48062-48067	being	
200-134	48068-48073	paged	
200-135	48074-48077	out	
200-136	48078-48080	to	
200-137	48081-48085	swap	
200-138	48086-48087	(	
200-139	48087-48094	default	
200-140	48095-48096	0	
200-141	48096-48097	,	
200-142	48098-48106	disabled	
200-143	48106-48107	)	
200-144	48108-48134	kern.msgbuf_show_timestamp	
200-145	48134-48135	=	
200-146	48135-48136	1	
200-147	48137-48138	#	
200-148	48139-48146	display	
200-149	48147-48156	timestamp	
200-150	48157-48159	in	
200-151	48160-48166	msgbuf	
200-152	48167-48168	(	
200-153	48168-48175	default	
200-154	48176-48177	0	
200-155	48177-48178	)	
200-156	48179-48193	kern.randompid	
200-157	48193-48194	=	
200-158	48194-48195	1	
200-159	48196-48197	#	
200-160	48198-48207	calculate	
200-161	48208-48212	PIDs	
200-162	48213-48215	by	
200-163	48216-48219	the	
200-164	48220-48227	modulus	
200-165	48228-48230	of	
200-166	48231-48233	an	
200-167	48234-48241	integer	
200-168	48241-48242	,	
200-169	48243-48246	set	
200-170	48247-48249	to	
200-171	48250-48253	one	
200-172	48253-48254	(	
200-173	48254-48255	1	
200-174	48255-48256	)	
200-175	48257-48259	to	
200-176	48260-48264	auto	
200-177	48265-48271	random	
200-178	48272-48273	(	
200-179	48273-48280	default	
200-180	48281-48282	0	
200-181	48282-48283	)	
200-182	48284-48308	net.bpf.optimize_writers	
200-183	48308-48309	=	
200-184	48309-48310	1	
200-185	48311-48312	#	
200-186	48313-48316	bpf	
200-187	48317-48319	is	
200-188	48320-48330	write-only	
200-189	48331-48337	unless	
200-190	48338-48345	program	
200-191	48346-48356	explicitly	
200-192	48357-48366	specifies	
200-193	48367-48370	the	
200-194	48371-48375	read	
200-195	48376-48382	filter	
200-196	48383-48384	(	
200-197	48384-48391	default	
200-198	48392-48393	0	
200-199	48393-48394	)	
200-200	48395-48422	net.inet.icmp.drop_redirect	
200-201	48422-48423	=	
200-202	48423-48424	1	
200-203	48425-48426	#	
200-204	48427-48429	no	
200-205	48430-48440	redirected	
200-206	48441-48445	ICMP	
200-207	48446-48453	packets	
200-208	48454-48455	(	
200-209	48455-48462	default	
200-210	48463-48464	0	
200-211	48464-48465	)	
200-212	48466-48493	net.inet.ip.check_interface	
200-213	48493-48494	=	
200-214	48494-48495	1	
200-215	48496-48497	#	
200-216	48498-48504	verify	
200-217	48505-48511	packet	
200-218	48512-48519	arrives	
200-219	48520-48522	on	
200-220	48523-48530	correct	
200-221	48531-48540	interface	
200-222	48541-48542	(	
200-223	48542-48549	default	
200-224	48550-48551	0	
200-225	48551-48552	)	
200-226	48553-48580	net.inet.ip.portrange.first	
200-227	48580-48581	=	
200-228	48581-48586	32768	
200-229	48587-48588	#	
200-230	48589-48592	use	
200-231	48593-48598	ports	
200-232	48599-48604	32768	
200-233	48605-48607	to	
200-234	48608-48622	portrange.last	
200-235	48623-48626	for	
200-236	48627-48635	outgoing	
200-237	48636-48647	connections	
200-238	48648-48649	(	
200-239	48649-48656	default	
200-240	48657-48662	10000	
200-241	48662-48663	)	
200-242	48664-48695	net.inet.ip.portrange.randomcps	
200-243	48695-48696	=	
200-244	48696-48700	9999	
200-245	48701-48702	#	
200-246	48703-48706	use	
200-247	48707-48713	random	
200-248	48714-48718	port	
200-249	48719-48729	allocation	
200-250	48730-48732	if	
200-251	48733-48737	less	
200-252	48738-48742	than	
200-253	48743-48747	this	
200-254	48748-48752	many	
200-255	48753-48758	ports	
200-256	48759-48762	per	
200-257	48763-48769	second	
200-258	48770-48773	are	
200-259	48774-48783	allocated	
200-260	48784-48785	(	
200-261	48785-48792	default	
200-262	48793-48795	10	
200-263	48795-48796	)	
200-264	48797-48829	net.inet.ip.portrange.randomtime	
200-265	48829-48830	=	
200-266	48830-48831	1	
200-267	48832-48833	#	
200-268	48834-48841	seconds	
200-269	48842-48844	to	
200-270	48845-48848	use	
200-271	48849-48858	sequental	
200-272	48859-48863	port	
200-273	48864-48874	allocation	
200-274	48875-48881	before	
200-275	48882-48891	switching	
200-276	48892-48896	back	
200-277	48897-48899	to	
200-278	48900-48906	random	
200-279	48907-48908	(	
200-280	48908-48915	default	
200-281	48916-48918	45	
200-282	48919-48923	secs	
200-283	48923-48924	)	
200-284	48925-48946	net.inet.ip.random_id	
200-285	48946-48947	=	
200-286	48947-48948	1	
200-287	48949-48950	#	
200-288	48951-48957	assign	
200-289	48958-48959	a	
200-290	48960-48966	random	
200-291	48967-48969	IP	
200-292	48970-48972	id	
200-293	48973-48975	to	
200-294	48976-48980	each	
200-295	48981-48987	packet	
200-296	48988-48995	leaving	
200-297	48996-48999	the	
200-298	49000-49006	system	
200-299	49007-49008	(	
200-300	49008-49015	default	
200-301	49016-49017	0	
200-302	49017-49018	)	
200-303	49019-49039	net.inet.ip.redirect	
200-304	49039-49040	=	
200-305	49040-49041	0	
200-306	49042-49043	#	
200-307	49044-49046	do	
200-308	49047-49050	not	
200-309	49051-49055	send	
200-310	49056-49058	IP	
200-311	49059-49068	redirects	
200-312	49069-49070	(	
200-313	49070-49077	default	
200-314	49078-49079	1	
200-315	49079-49080	)	
200-316	49081-49090	net.inet6	
200-317	49090-49091	.	
200-318	49091-49094	ip6	
200-319	49094-49095	.	
200-320	49095-49103	redirect	
200-321	49103-49104	=	
200-322	49104-49105	0	
200-323	49106-49107	#	
200-324	49108-49110	do	
200-325	49111-49114	not	
200-326	49115-49119	send	
200-327	49120-49124	IPv6	
200-328	49125-49134	redirects	
200-329	49135-49136	(	
200-330	49136-49143	default	
200-331	49144-49145	1	
200-332	49145-49146	)	
200-333	49147-49169	net.inet.tcp.blackhole	
200-334	49169-49170	=	
200-335	49170-49171	2	
200-336	49172-49173	#	
200-337	49174-49178	drop	
200-338	49179-49182	tcp	
200-339	49183-49190	packets	
200-340	49191-49199	destined	
200-341	49200-49203	for	
200-342	49204-49210	closed	
200-343	49211-49216	ports	
200-344	49217-49218	(	
200-345	49218-49225	default	
200-346	49226-49227	0	
200-347	49227-49228	)	
200-348	49229-49253	net.inet.tcp.drop_synfin	
200-349	49253-49254	=	
200-350	49254-49255	1	
200-351	49256-49257	#	
200-352	49258-49261	SYN	
200-353	49261-49262	/	
200-354	49262-49265	FIN	
200-355	49266-49273	packets	
200-356	49274-49277	get	
200-357	49278-49285	dropped	
200-358	49286-49288	on	
200-359	49289-49296	initial	
200-360	49297-49307	connection	
200-361	49308-49309	(	
200-362	49309-49316	default	
200-363	49317-49318	0	
200-364	49318-49319	)	
200-365	49320-49346	net.inet.tcp.fast_finwait2	
200-366	49346-49347	_	
200-367	49347-49354	recycle	
200-368	49354-49355	=	
200-369	49355-49356	1	
200-370	49357-49358	#	
200-371	49359-49366	recycle	
200-372	49367-49370	FIN	
200-373	49370-49371	/	
200-374	49371-49375	WAIT	
200-375	49376-49382	states	
200-376	49383-49390	quickly	
200-377	49390-49391	,	
200-378	49392-49397	helps	
200-379	49398-49405	against	
200-380	49406-49409	DoS	
200-381	49409-49410	,	
200-382	49411-49414	but	
200-383	49415-49418	may	
200-384	49419-49424	cause	
200-385	49425-49430	false	
200-386	49431-49434	RST	
200-387	49435-49436	(	
200-388	49436-49443	default	
200-389	49444-49445	0	
200-390	49445-49446	)	
200-391	49447-49482	net.inet.tcp.fastopen.client_enable	
200-392	49482-49483	=	
200-393	49483-49484	0	
200-394	49485-49486	#	
200-395	49487-49494	disable	
200-396	49495-49498	TCP	
200-397	49499-49503	Fast	
200-398	49504-49508	Open	
200-399	49509-49515	client	
200-400	49516-49520	side	
200-401	49520-49521	,	
200-402	49522-49529	enforce	
200-403	49530-49535	three	
200-404	49536-49539	way	
200-405	49540-49543	TCP	
200-406	49544-49553	handshake	
200-407	49554-49555	(	
200-408	49555-49562	default	
200-409	49563-49564	1	
200-410	49564-49565	,	
200-411	49566-49573	enabled	
200-412	49573-49574	)	
200-413	49575-49610	net.inet.tcp.fastopen.server_enable	
200-414	49610-49611	=	
200-415	49611-49612	0	
200-416	49613-49614	#	
200-417	49615-49622	disable	
200-418	49623-49626	TCP	
200-419	49627-49631	Fast	
200-420	49632-49636	Open	
200-421	49637-49643	server	
200-422	49644-49648	side	
200-423	49648-49649	,	
200-424	49650-49657	enforce	
200-425	49658-49663	three	
200-426	49664-49667	way	
200-427	49668-49671	TCP	
200-428	49672-49681	handshake	
200-429	49682-49683	(	
200-430	49683-49690	default	
200-431	49691-49692	0	
200-432	49692-49693	)	
200-433	49694-49715	net.inet.tcp.finwait2	
200-434	49715-49716	_	
200-435	49716-49723	timeout	
200-436	49723-49724	=	
200-437	49724-49728	1000	
200-438	49729-49730	#	
200-439	49731-49734	TCP	
200-440	49735-49743	FIN_WAIT	
200-441	49743-49744	_	
200-442	49744-49745	2	
200-443	49746-49753	timeout	
200-444	49754-49761	waiting	
200-445	49762-49765	for	
200-446	49766-49772	client	
200-447	49773-49776	FIN	
200-448	49777-49783	packet	
200-449	49784-49790	before	
200-450	49791-49796	state	
200-451	49797-49802	close	
200-452	49803-49804	(	
200-453	49804-49811	default	
200-454	49812-49817	60000	
200-455	49817-49818	,	
200-456	49819-49821	60	
200-457	49822-49825	sec	
200-458	49825-49826	)	
200-459	49827-49852	net.inet.tcp.icmp_may_rst	
200-460	49852-49853	=	
200-461	49853-49854	0	
200-462	49855-49856	#	
200-463	49857-49861	icmp	
200-464	49862-49865	may	
200-465	49866-49869	not	
200-466	49870-49874	send	
200-467	49875-49878	RST	
200-468	49879-49881	to	
200-469	49882-49887	avoid	
200-470	49888-49895	spoofed	
200-471	49896-49900	icmp	
200-472	49900-49901	/	
200-473	49901-49904	udp	
200-474	49905-49911	floods	
200-475	49912-49913	(	
200-476	49913-49920	default	
200-477	49921-49922	1	
200-478	49922-49923	)	
200-479	49924-49944	net.inet.tcp.keepcnt	
200-480	49944-49945	=	
200-481	49945-49946	2	
200-482	49947-49948	#	
200-483	49949-49955	amount	
200-484	49956-49958	of	
200-485	49959-49962	tcp	
200-486	49963-49967	keep	
200-487	49968-49973	alive	
200-488	49974-49979	probe	
200-489	49980-49988	failures	
200-490	49989-49995	before	
200-491	49996-50002	socket	
200-492	50003-50005	is	
200-493	50006-50012	forced	
200-494	50013-50019	closed	
200-495	50020-50021	(	
200-496	50021-50028	default	
200-497	50029-50030	8	
200-498	50030-50031	)	
200-499	50032-50053	net.inet.tcp.keepidle	
200-500	50053-50054	=	
200-501	50054-50059	62000	
200-502	50060-50061	#	
200-503	50062-50066	time	
200-504	50067-50073	before	
200-505	50074-50082	starting	
200-506	50083-50086	tcp	
200-507	50087-50091	keep	
200-508	50092-50097	alive	
200-509	50098-50104	probes	
200-510	50105-50107	on	
200-511	50108-50110	an	
200-512	50111-50115	idle	
200-513	50115-50116	,	
200-514	50117-50120	TCP	
200-515	50121-50131	connection	
200-516	50132-50133	(	
200-517	50133-50140	default	
200-518	50141-50148	7200000	
200-519	50148-50149	,	
200-520	50150-50154	7200	
200-521	50155-50159	secs	
200-522	50159-50160	)	
200-523	50161-50182	net.inet.tcp.keepinit	
200-524	50182-50183	=	
200-525	50183-50187	5000	
200-526	50188-50189	#	
200-527	50190-50193	tcp	
200-528	50194-50198	keep	
200-529	50199-50204	alive	
200-530	50205-50211	client	
200-531	50212-50217	reply	
200-532	50218-50225	timeout	
200-533	50226-50227	(	
200-534	50227-50234	default	
200-535	50235-50240	75000	
200-536	50240-50241	,	
200-537	50242-50244	75	
200-538	50245-50249	secs	
200-539	50249-50250	)	
200-540	50251-50267	net.inet.tcp.msl	
200-541	50267-50268	=	
200-542	50268-50272	2500	
200-543	50273-50274	#	
200-544	50275-50282	Maximum	
200-545	50283-50290	Segment	
200-546	50291-50299	Lifetime	
200-547	50299-50300	,	
200-548	50301-50305	time	
200-549	50306-50309	the	
200-550	50310-50320	connection	
200-551	50321-50327	spends	
200-552	50328-50330	in	
200-553	50331-50340	TIME_WAIT	
200-554	50341-50346	state	
200-555	50347-50348	(	
200-556	50348-50355	default	
200-557	50356-50361	30000	
200-558	50361-50362	,	
200-559	50363-50364	2	
200-560	50364-50365	*	
200-561	50365-50368	MSL	
200-562	50369-50370	=	
200-563	50371-50373	60	
200-564	50374-50377	sec	
200-565	50377-50378	)	
200-566	50379-50410	net.inet.tcp.path_mtu_discovery	
200-567	50410-50411	=	
200-568	50411-50412	0	
200-569	50413-50414	#	
200-570	50415-50422	disable	
200-571	50423-50426	for	
200-572	50427-50430	mtu	
200-573	50430-50431	=	
200-574	50431-50435	1500	
200-575	50436-50438	as	
200-576	50439-50443	most	
200-577	50444-50449	paths	
200-578	50450-50454	drop	
200-579	50455-50459	ICMP	
200-580	50460-50464	type	
200-581	50465-50466	3	
200-582	50467-50474	packets	
200-583	50474-50475	,	
200-584	50476-50479	but	
200-585	50480-50484	keep	
200-586	50485-50492	enabled	
200-587	50493-50496	for	
200-588	50497-50500	mtu	
200-589	50500-50501	=	
200-590	50501-50505	9000	
200-591	50506-50507	(	
200-592	50507-50514	default	
200-593	50515-50516	1	
200-594	50516-50517	)	
200-595	50518-50540	net.inet.udp.blackhole	
200-596	50540-50541	=	
200-597	50541-50542	1	
200-598	50543-50544	#	
200-599	50545-50549	drop	
200-600	50550-50553	udp	
200-601	50554-50561	packets	
200-602	50562-50570	destined	
200-603	50571-50574	for	
200-604	50575-50581	closed	
200-605	50582-50589	sockets	
200-606	50590-50591	(	
200-607	50591-50598	default	
200-608	50599-50600	0	
200-609	50600-50601	)	
200-610	50602-50624	net.inet.udp.recvspace	
200-611	50624-50625	=	
200-612	50625-50632	1048576	
200-613	50633-50634	#	
200-614	50635-50638	UDP	
200-615	50639-50646	receive	
200-616	50647-50652	space	
200-617	50652-50653	,	
200-618	50654-50658	HTTP	
200-619	50658-50659	/	
200-620	50659-50660	3	
200-621	50661-50670	webserver	
200-622	50670-50671	,	
200-623	50672-50673	"	
200-624	50673-50680	netstat	
200-625	50681-50682	-	
200-626	50682-50684	sn	
200-627	50685-50686	-	
200-628	50686-50687	p	
200-629	50688-50691	udp	
200-630	50691-50692	"	
200-631	50693-50696	and	
200-632	50697-50705	increase	
200-633	50706-50708	if	
200-634	50709-50713	full	
200-635	50714-50720	socket	
200-636	50721-50728	buffers	
200-637	50729-50730	(	
200-638	50730-50737	default	
200-639	50738-50743	42080	
200-640	50743-50744	)	
200-641	50745-50776	security.bsd.hardlink_check_gid	
200-642	50776-50777	=	
200-643	50777-50778	1	
200-644	50779-50780	#	
200-645	50781-50793	unprivileged	
200-646	50794-50803	processes	
200-647	50804-50807	may	
200-648	50808-50811	not	
200-649	50812-50818	create	
200-650	50819-50823	hard	
200-651	50824-50829	links	
200-652	50830-50832	to	
200-653	50833-50838	files	
200-654	50839-50844	owned	
200-655	50845-50847	by	
200-656	50848-50853	other	
200-657	50854-50860	groups	
200-658	50860-50861	,	
200-659	50862-50869	DISABLE	
200-660	50870-50873	for	
200-661	50874-50881	mailman	
200-662	50882-50883	(	
200-663	50883-50890	default	
200-664	50891-50892	0	
200-665	50892-50893	)	
200-666	50894-50925	security.bsd.hardlink_check_uid	
200-667	50925-50926	=	
200-668	50926-50927	1	
200-669	50928-50929	#	
200-670	50930-50942	unprivileged	
200-671	50943-50952	processes	
200-672	50953-50956	may	
200-673	50957-50960	not	
200-674	50961-50967	create	
200-675	50968-50972	hard	
200-676	50973-50978	links	
200-677	50979-50981	to	
200-678	50982-50987	files	
200-679	50988-50993	owned	
200-680	50994-50996	by	
200-681	50997-51002	other	
200-682	51003-51008	users	
200-683	51008-51009	,	
200-684	51010-51017	DISABLE	
200-685	51018-51021	for	
200-686	51022-51029	mailman	
200-687	51030-51031	(	
200-688	51031-51038	default	
200-689	51039-51040	0	
200-690	51040-51041	)	
200-691	51042-51069	security.bsd.see_other_gids	
200-692	51069-51070	=	
200-693	51070-51071	0	
200-694	51072-51073	#	
200-695	51074-51080	groups	
200-696	51081-51085	only	
200-697	51086-51089	see	
200-698	51090-51095	their	
200-699	51096-51099	own	
200-700	51100-51109	processes	
200-701	51109-51110	.	
200-702	51111-51115	root	
200-703	51116-51119	can	
200-704	51120-51123	see	
200-705	51124-51127	all	
200-706	51128-51129	(	
200-707	51129-51136	default	
200-708	51137-51138	1	
200-709	51138-51139	)	
200-710	51140-51167	security.bsd.see_other_uids	
200-711	51167-51168	=	
200-712	51168-51169	0	
200-713	51170-51171	#	
200-714	51172-51177	users	
200-715	51178-51182	only	
200-716	51183-51186	see	
200-717	51187-51192	their	
200-718	51193-51196	own	
200-719	51197-51206	processes	
200-720	51206-51207	.	
200-721	51208-51212	root	
200-722	51213-51216	can	
200-723	51217-51220	see	
200-724	51221-51224	all	
200-725	51225-51226	(	
200-726	51226-51233	default	
200-727	51234-51235	1	
200-728	51235-51236	)	
200-729	51237-51266	security.bsd.stack_guard_page	
200-730	51266-51267	=	
200-731	51267-51268	1	
200-732	51269-51270	#	
200-733	51271-51277	insert	
200-734	51278-51279	a	
200-735	51280-51285	stack	
200-736	51286-51291	guard	
200-737	51292-51296	page	
200-738	51297-51302	ahead	
200-739	51303-51305	of	
200-740	51306-51314	growable	
200-741	51315-51323	segments	
200-742	51323-51324	,	
200-743	51325-51330	stack	
200-744	51331-51339	smashing	
200-745	51340-51350	protection	
200-746	51351-51352	(	
200-747	51352-51355	SSP	
200-748	51355-51356	)	
200-749	51357-51358	(	
200-750	51358-51365	default	
200-751	51366-51367	0	
200-752	51367-51368	)	
200-753	51369-51405	security.bsd.unprivileged_proc_debug	
200-754	51405-51406	=	
200-755	51406-51407	0	
200-756	51408-51409	#	
200-757	51410-51422	unprivileged	
200-758	51423-51432	processes	
200-759	51433-51436	may	
200-760	51437-51440	not	
200-761	51441-51444	use	
200-762	51445-51452	process	
200-763	51453-51462	debugging	
200-764	51463-51464	(	
200-765	51464-51471	default	
200-766	51472-51473	1	
200-767	51473-51474	)	
200-768	51475-51512	security.bsd.unprivileged_read_msgbuf	
200-769	51512-51513	=	
200-770	51513-51514	0	
200-771	51515-51516	#	
200-772	51517-51529	unprivileged	
200-773	51530-51539	processes	
200-774	51540-51543	may	
200-775	51544-51547	not	
200-776	51548-51552	read	
200-777	51553-51556	the	
200-778	51557-51563	kernel	
200-779	51564-51571	message	
200-780	51572-51578	buffer	
200-781	51579-51580	(	
200-782	51580-51587	default	
200-783	51588-51589	1	
200-784	51589-51590	)	
200-785	51591-51592	#	
200-786	51593-51596	ZFS	
200-787	51597-51603	Tuning	
200-788	51604-51607	for	
200-789	51608-51612	PCIe	
200-790	51613-51617	NVMe	
200-791	51618-51619	M	
200-792	51619-51621	.2	
200-793	51622-51625	and	
200-794	51626-51630	64GB	
200-795	51631-51637	system	
200-796	51638-51641	RAM	
200-797	51642-51643	#	
200-798	51644-51648	book	
200-799	51648-51649	:	
200-800	51650-51657	FreeBSD	
200-801	51658-51665	Mastery	
200-802	51665-51666	:	
200-803	51667-51670	ZFS	
200-804	51671-51673	By	
200-805	51674-51681	Michael	
200-806	51682-51683	W	
200-807	51684-51689	Lucas	
200-808	51690-51693	and	
200-809	51694-51699	Allan	
200-810	51700-51704	Jude	
200-811	51705-51706	#	
200-812	51707-51712	https	
200-813	51712-51713	:	
200-814	51713-51714	/	
200-815	51714-51715	/	
200-816	51715-51735	www.pugetsystems.com	
200-817	51735-51736	/	
200-818	51736-51740	labs	
200-819	51740-51741	/	
200-820	51741-51749	articles	
200-821	51749-51750	/	
200-822	51750-51757	Samsung	
200-823	51757-51758	-	
200-824	51758-51761	950	
200-825	51761-51762	-	
200-826	51762-51767	Pro-M	
200-827	51767-51768	-	
200-828	51768-51769	2	
200-829	51769-51770	-	
200-830	51770-51796	Additional-Cooling-Testing	
200-831	51796-51797	-	
200-832	51797-51800	795	
200-833	51800-51801	/	
200-834	51802-51803	#	
200-835	51804-51808	http	
200-836	51808-51809	:	
200-837	51809-51810	/	
200-838	51810-51811	/	
200-839	51811-51821	dtrace.org	
200-840	51821-51822	/	
200-841	51822-51827	blogs	
200-842	51827-51828	/	
200-843	51828-51831	ahl	
200-844	51831-51832	/	
200-845	51832-51836	2012	
200-846	51836-51837	/	
200-847	51837-51839	12	
200-848	51839-51840	/	
200-849	51840-51842	13	
200-850	51842-51843	/	
200-851	51843-51878	zfs-fundamentals-transaction-groups	
200-852	51878-51879	/	
200-853	51880-51881	#	
200-854	51882-51886	http	
200-855	51886-51887	:	
200-856	51887-51888	/	
200-857	51888-51889	/	
200-858	51889-51899	dtrace.org	
200-859	51899-51900	/	
200-860	51900-51905	blogs	
200-861	51905-51906	/	
200-862	51906-51909	ahl	
200-863	51909-51910	/	
200-864	51910-51914	2013	
200-865	51914-51915	/	
200-866	51915-51917	12	
200-867	51917-51918	/	
200-868	51918-51920	27	
200-869	51920-51921	/	
200-870	51921-51956	zfs-fundamentals-the-write-throttle	
200-871	51956-51957	/	
200-872	51958-51959	#	
200-873	51960-51964	http	
200-874	51964-51965	:	
200-875	51965-51966	/	
200-876	51966-51967	/	
200-877	51967-51982	bit.csc.lsu.edu	
200-878	51982-51983	/	
200-879	51983-51984	~	
200-880	51984-51989	fchen	
200-881	51989-51990	/	
200-882	51990-52002	publications	
200-883	52002-52003	/	
200-884	52003-52009	papers	
200-885	52009-52010	/	
200-886	52010-52016	hpca11	
200-887	52016-52017	.	
200-888	52017-52020	pdf	
200-889	52021-52022	#	
200-890	52023-52027	http	
200-891	52027-52028	:	
200-892	52028-52029	/	
200-893	52029-52030	/	
200-894	52030-52040	dtrace.org	
200-895	52040-52041	/	
200-896	52041-52046	blogs	
200-897	52046-52047	/	
200-898	52047-52050	ahl	
200-899	52050-52051	/	
200-900	52051-52055	2014	
200-901	52055-52056	/	
200-902	52056-52058	08	
200-903	52058-52059	/	
200-904	52059-52061	31	
200-905	52061-52062	/	
200-906	52062-52076	openzfs-tuning	
200-907	52076-52077	/	
200-908	52078-52079	#	
200-909	52080-52085	https	
200-910	52085-52086	:	
200-911	52086-52087	/	
200-912	52087-52088	/	
200-913	52088-52103	www.freebsd.org	
200-914	52103-52104	/	
200-915	52104-52107	doc	
200-916	52107-52108	/	
200-917	52108-52116	handbook	
200-918	52116-52117	/	
200-919	52117-52134	zfs-advanced.html	
200-920	52135-52136	#	
200-921	52137-52142	https	
200-922	52142-52143	:	
200-923	52143-52144	/	
200-924	52144-52145	/	
200-925	52145-52156	calomel.org	
200-926	52156-52157	/	
200-927	52157-52186	zfs_freebsd_root_install.html	
200-928	52187-52188	#	
200-929	52189-52193	NVMe	
200-930	52194-52199	drive	
200-931	52200-52201	:	
200-932	52202-52209	Samsung	
200-933	52210-52213	960	
200-934	52214-52217	EVO	
200-935	52218-52221	1TB	
200-936	52222-52226	PCIe	
200-937	52227-52230	3.0	
200-938	52231-52232	×	
200-939	52232-52233	4	
200-940	52234-52238	NVMe	
200-941	52239-52240	M	
200-942	52240-52242	.2	
200-943	52243-52244	(	
200-944	52244-52255	MZ-V6E1T0BW	
200-945	52255-52256	)	
200-946	52257-52258	#	
200-947	52259-52265	before	
200-948	52266-52269	zfs	
200-949	52270-52276	tuning	
200-950	52277-52278	:	
200-951	52279-52284	reads	
200-952	52285-52289	1.87	
200-953	52290-52292	GB	
200-954	52292-52293	/	
200-955	52293-52294	s	
200-956	52295-52301	writes	
200-957	52302-52306	1.86	
200-958	52307-52309	GB	
200-959	52309-52310	/	
200-960	52310-52311	s	
200-961	52312-52317	scrub	
200-962	52318-52322	1.88	
200-963	52323-52325	GB	
200-964	52325-52326	/	
200-965	52326-52327	s	
200-966	52328-52333	19.2K	
200-967	52334-52338	IOPs	
200-968	52339-52344	after	
200-969	52345-52348	zfs	
200-970	52349-52355	tuning	
200-971	52356-52357	:	
200-972	52358-52363	reads	
200-973	52364-52368	3.11	
200-974	52369-52371	GB	
200-975	52371-52372	/	
200-976	52372-52373	s	
200-977	52374-52380	writes	
200-978	52381-52385	1.95	
200-979	52386-52388	GB	
200-980	52388-52389	/	
200-981	52389-52390	s	
200-982	52391-52396	scrub	
200-983	52397-52401	3.11	
200-984	52402-52404	GB	
200-985	52404-52405	/	
200-986	52405-52406	s	
200-987	52407-52411	3.8K	
200-988	52412-52416	IOPs	
200-989	52417-52418	#	
200-990	52419-52423	NVMe	
200-991	52424-52429	drive	
200-992	52430-52431	:	
200-993	52432-52437	ADATA	
200-994	52438-52441	XPG	
200-995	52442-52448	SX8200	
200-996	52449-52452	Pro	
200-997	52453-52456	1TB	
200-998	52457-52461	PCIe	
200-999	52462-52465	3.0	
200-1000	52466-52467	×	
200-1001	52467-52468	4	
200-1002	52469-52473	NVMe	
200-1003	52474-52475	M	
200-1004	52475-52477	.2	
200-1005	52478-52479	(	
200-1006	52479-52489	ASX8200PNP	
200-1007	52489-52490	-	
200-1008	52490-52495	1TT-C	
200-1009	52495-52496	)	
200-1010	52497-52498	#	
200-1011	52499-52505	before	
200-1012	52506-52509	zfs	
200-1013	52510-52516	tuning	
200-1014	52517-52518	:	
200-1015	52519-52524	reads	
200-1016	52525-52529	1.88	
200-1017	52530-52532	GB	
200-1018	52532-52533	/	
200-1019	52533-52534	s	
200-1020	52535-52541	writes	
200-1021	52542-52546	1.86	
200-1022	52547-52549	GB	
200-1023	52549-52550	/	
200-1024	52550-52551	s	
200-1025	52552-52557	scrub	
200-1026	52558-52562	1.88	
200-1027	52563-52565	GB	
200-1028	52565-52566	/	
200-1029	52566-52567	s	
200-1030	52568-52573	19.3K	
200-1031	52574-52578	IOPs	
200-1032	52579-52584	after	
200-1033	52585-52588	zfs	
200-1034	52589-52595	tuning	
200-1035	52596-52597	:	
200-1036	52598-52603	reads	
200-1037	52604-52608	3.27	
200-1038	52609-52611	GB	
200-1039	52611-52612	/	
200-1040	52612-52613	s	
200-1041	52614-52620	writes	
200-1042	52621-52625	2.62	
200-1043	52626-52628	GB	
200-1044	52628-52629	/	
200-1045	52629-52630	s	
200-1046	52631-52636	scrub	
200-1047	52637-52641	3.27	
200-1048	52642-52644	GB	
200-1049	52644-52645	/	
200-1050	52645-52646	s	
200-1051	52647-52651	2.6K	
200-1052	52652-52656	IOPs	
200-1053	52657-52688	vfs.zfs.delay_min_dirty_percent	
200-1054	52688-52689	=	
200-1055	52689-52691	98	
200-1056	52692-52693	#	
200-1057	52694-52699	write	
200-1058	52700-52708	throttle	
200-1059	52709-52713	when	
200-1060	52714-52719	dirty	
200-1061	52720-52721	"	
200-1062	52721-52729	modified	
200-1063	52729-52730	"	
200-1064	52731-52735	data	
200-1065	52736-52743	reaches	
200-1066	52744-52747	98%	
200-1067	52748-52750	of	
200-1068	52751-52765	dirty_data_max	
200-1069	52766-52767	(	
200-1070	52767-52774	default	
200-1071	52775-52778	60%	
200-1072	52778-52779	)	
200-1073	52780-52811	vfs.zfs.dirty_data_sync_percent	
200-1074	52811-52812	=	
200-1075	52812-52814	95	
200-1076	52815-52816	#	
200-1077	52817-52822	force	
200-1078	52823-52829	commit	
200-1079	52830-52841	Transaction	
200-1080	52842-52847	Group	
200-1081	52848-52849	(	
200-1082	52849-52852	TXG	
200-1083	52852-52853	)	
200-1084	52854-52856	if	
200-1085	52857-52867	dirty_data	
200-1086	52868-52875	reaches	
200-1087	52876-52879	95%	
200-1088	52880-52882	of	
200-1089	52883-52897	dirty_data_max	
200-1090	52898-52899	(	
200-1091	52899-52906	default	
200-1092	52907-52910	20%	
200-1093	52910-52911	)	
200-1094	52912-52935	vfs.zfs.min_auto_ashift	
200-1095	52935-52936	=	
200-1096	52936-52938	12	
200-1097	52939-52940	#	
200-1098	52941-52946	newly	
200-1099	52947-52954	created	
200-1100	52955-52959	pool	
200-1101	52960-52966	ashift	
200-1102	52966-52967	,	
200-1103	52968-52971	set	
200-1104	52972-52974	to	
200-1105	52975-52977	12	
200-1106	52978-52981	for	
200-1107	52982-52984	4K	
200-1108	52985-52988	and	
200-1109	52989-52991	13	
200-1110	52992-52995	for	
200-1111	52996-52998	8k	
200-1112	52999-53008	alignment	
200-1113	53008-53009	,	
200-1114	53010-53013	zdb	
200-1115	53014-53015	(	
200-1116	53015-53022	default	
200-1117	53023-53024	9	
200-1118	53024-53025	,	
200-1119	53026-53029	512	
200-1120	53030-53034	byte	
200-1121	53034-53035	,	
200-1122	53036-53042	ashift	
200-1123	53042-53043	=	
200-1124	53043-53044	9	
200-1125	53044-53045	)	
200-1126	53046-53068	vfs.zfs.trim.txg_batch	
200-1127	53068-53069	=	
200-1128	53069-53072	128	
200-1129	53073-53074	#	
200-1130	53075-53078	max	
200-1131	53079-53085	number	
200-1132	53086-53088	of	
200-1133	53089-53094	TRIMs	
200-1134	53095-53098	per	
200-1135	53099-53108	top-level	
200-1136	53109-53113	vdev	
200-1137	53114-53115	(	
200-1138	53115-53122	default	
200-1139	53123-53125	32	
200-1140	53125-53126	)	
200-1141	53127-53146	vfs.zfs.txg.timeout	
200-1142	53146-53147	=	
200-1143	53147-53149	75	
200-1144	53150-53151	#	
200-1145	53152-53157	force	
200-1146	53158-53164	commit	
200-1147	53165-53176	Transaction	
200-1148	53177-53182	Group	
200-1149	53183-53184	(	
200-1150	53184-53187	TXG	
200-1151	53187-53188	)	
200-1152	53189-53191	at	
200-1153	53192-53194	75	
200-1154	53195-53199	secs	
200-1155	53199-53200	,	
200-1156	53201-53209	increase	
200-1157	53210-53212	to	
200-1158	53213-53223	aggregated	
200-1159	53224-53228	more	
200-1160	53229-53233	data	
200-1161	53234-53235	(	
200-1162	53235-53242	default	
200-1163	53243-53244	5	
200-1164	53245-53248	sec	
200-1165	53248-53249	)	
200-1166	53250-53278	vfs.zfs.vdev.def_queue_depth	
200-1167	53278-53279	=	
200-1168	53279-53282	128	
200-1169	53283-53284	#	
200-1170	53285-53288	max	
200-1171	53289-53295	number	
200-1172	53296-53298	of	
200-1173	53299-53310	outstanding	
200-1174	53311-53312	I	
200-1175	53312-53313	/	
200-1176	53313-53315	Os	
200-1177	53316-53319	per	
200-1178	53320-53329	top-level	
200-1179	53330-53334	vdev	
200-1180	53335-53336	(	
200-1181	53336-53343	default	
200-1182	53344-53346	32	
200-1183	53346-53347	)	
200-1184	53348-53376	vfs.zfs.vdev.write_gap_limit	
200-1185	53376-53377	=	
200-1186	53377-53378	0	
200-1187	53379-53380	#	
200-1188	53381-53384	max	
200-1189	53385-53388	gap	
200-1190	53389-53396	between	
200-1191	53397-53400	any	
200-1192	53401-53404	two	
200-1193	53405-53415	aggregated	
200-1194	53416-53422	writes	
200-1195	53422-53423	,	
200-1196	53424-53425	0	
200-1197	53426-53428	to	
200-1198	53429-53437	minimize	
200-1199	53438-53443	frags	
200-1200	53444-53445	(	
200-1201	53445-53452	default	
200-1202	53453-53457	4096	
200-1203	53457-53458	,	
200-1204	53459-53462	4KB	
200-1205	53462-53463	)	
200-1206	53464-53467	ZFS	
200-1207	53468-53474	Tuning	
200-1208	53474-53475	:	
200-1209	53476-53479	The	
200-1210	53480-53484	plan	
200-1211	53485-53487	is	
200-1212	53488-53490	to	
200-1213	53491-53494	use	
200-1214	53495-53500	large	
200-1215	53501-53508	amounts	
200-1216	53509-53511	of	
200-1217	53512-53515	RAM	
200-1218	53516-53519	for	
200-1219	53520-53534	dirty_data_max	
200-1220	53535-53537	to	
200-1221	53538-53539	#	
200-1222	53540-53546	buffer	
200-1223	53547-53555	incoming	
200-1224	53556-53560	data	
200-1225	53561-53567	before	
200-1226	53568-53571	ZFS	
200-1227	53572-53576	must	
200-1228	53577-53583	commit	
200-1229	53584-53587	the	
200-1230	53588-53592	data	
200-1231	53593-53595	in	
200-1232	53596-53599	the	
200-1233	53600-53604	next	
200-1234	53605-53616	Transaction	
200-1235	53617-53618	#	
200-1236	53619-53624	Group	
200-1237	53625-53626	(	
200-1238	53626-53629	TXG	
200-1239	53629-53630	)	
200-1240	53631-53633	to	
200-1241	53634-53637	the	
200-1242	53638-53646	physical	
200-1243	53647-53653	drives	
200-1244	53654-53656	in	
200-1245	53657-53660	the	
200-1246	53661-53665	pool	
200-1247	53665-53666	.	

#Text=TXG commits are sequential by
#Text=# design; the incoming random write traffic cached between TXG commits is
#Text=# sequential when written to disk.
201-1	53667-53670	TXG	
201-2	53671-53678	commits	
201-3	53679-53682	are	
201-4	53683-53693	sequential	
201-5	53694-53696	by	
201-6	53697-53698	#	
201-7	53699-53705	design	
201-8	53705-53706	;	
201-9	53707-53710	the	
201-10	53711-53719	incoming	
201-11	53720-53726	random	
201-12	53727-53732	write	
201-13	53733-53740	traffic	
201-14	53741-53747	cached	
201-15	53748-53755	between	
201-16	53756-53759	TXG	
201-17	53760-53767	commits	
201-18	53768-53770	is	
201-19	53771-53772	#	
201-20	53773-53783	sequential	
201-21	53784-53788	when	
201-22	53789-53796	written	
201-23	53797-53799	to	
201-24	53800-53804	disk	
201-25	53804-53805	.	

#Text=When the server is able to keep more dirty
#Text=# "modified" data in RAM before the next TXG commit, there is a greater chance
#Text=# of long sequential writes without holes.
202-1	53806-53810	When	
202-2	53811-53814	the	
202-3	53815-53821	server	
202-4	53822-53824	is	
202-5	53825-53829	able	
202-6	53830-53832	to	
202-7	53833-53837	keep	
202-8	53838-53842	more	
202-9	53843-53848	dirty	
202-10	53849-53850	#	
202-11	53851-53852	"	
202-12	53852-53860	modified	
202-13	53860-53861	"	
202-14	53862-53866	data	
202-15	53867-53869	in	
202-16	53870-53873	RAM	
202-17	53874-53880	before	
202-18	53881-53884	the	
202-19	53885-53889	next	
202-20	53890-53893	TXG	
202-21	53894-53900	commit	
202-22	53900-53901	,	
202-23	53902-53907	there	
202-24	53908-53910	is	
202-25	53911-53912	a	
202-26	53913-53920	greater	
202-27	53921-53927	chance	
202-28	53928-53929	#	
202-29	53930-53932	of	
202-30	53933-53937	long	
202-31	53938-53948	sequential	
202-32	53949-53955	writes	
202-33	53956-53963	without	
202-34	53964-53969	holes	
202-35	53969-53970	.	

#Text=These long sequential stripes of
#Text=# written data also result in significantly faster sequential reads.
#Text=# ZFS will trigger a forced TXG commit when either the temporal limit
#Text=# txg.timeout or the dirty data capacity limit dirty_data_sync_pct is reached.
#Text=# Increasing these two(2) limits will allow the system to collect more
#Text=# uncommitted data in RAM in order to write to the vdev in efficient sequential
#Text=# stripes.
203-1	53971-53976	These	
203-2	53977-53981	long	
203-3	53982-53992	sequential	
203-4	53993-54000	stripes	
203-5	54001-54003	of	
203-6	54004-54005	#	
203-7	54006-54013	written	
203-8	54014-54018	data	
203-9	54019-54023	also	
203-10	54024-54030	result	
203-11	54031-54033	in	
203-12	54034-54047	significantly	
203-13	54048-54054	faster	
203-14	54055-54065	sequential	
203-15	54066-54071	reads	
203-16	54071-54072	.	
203-17	54073-54074	#	
203-18	54075-54078	ZFS	
203-19	54079-54083	will	
203-20	54084-54091	trigger	
203-21	54092-54093	a	
203-22	54094-54100	forced	
203-23	54101-54104	TXG	
203-24	54105-54111	commit	
203-25	54112-54116	when	
203-26	54117-54123	either	
203-27	54124-54127	the	
203-28	54128-54136	temporal	
203-29	54137-54142	limit	
203-30	54143-54144	#	
203-31	54145-54156	txg.timeout	
203-32	54157-54159	or	
203-33	54160-54163	the	
203-34	54164-54169	dirty	
203-35	54170-54174	data	
203-36	54175-54183	capacity	
203-37	54184-54189	limit	
203-38	54190-54209	dirty_data_sync_pct	
203-39	54210-54212	is	
203-40	54213-54220	reached	
203-41	54220-54221	.	
203-42	54222-54223	#	
203-43	54224-54234	Increasing	
203-44	54235-54240	these	
203-45	54241-54244	two	
203-46	54244-54245	(	
203-47	54245-54246	2	
203-48	54246-54247	)	
203-49	54248-54254	limits	
203-50	54255-54259	will	
203-51	54260-54265	allow	
203-52	54266-54269	the	
203-53	54270-54276	system	
203-54	54277-54279	to	
203-55	54280-54287	collect	
203-56	54288-54292	more	
203-57	54293-54294	#	
203-58	54295-54306	uncommitted	
203-59	54307-54311	data	
203-60	54312-54314	in	
203-61	54315-54318	RAM	
203-62	54319-54321	in	
203-63	54322-54327	order	
203-64	54328-54330	to	
203-65	54331-54336	write	
203-66	54337-54339	to	
203-67	54340-54343	the	
203-68	54344-54348	vdev	
203-69	54349-54351	in	
203-70	54352-54361	efficient	
203-71	54362-54372	sequential	
203-72	54373-54374	#	
203-73	54375-54382	stripes	
203-74	54382-54383	.	

#Text=But, understand, if the server losses power or crashes we lose all
#Text=# dirty data in RAM not previously committed; so make sure to be on an
#Text=# Uninterruptible Power Supply (UPS).
204-1	54384-54387	But	
204-2	54387-54388	,	
204-3	54389-54399	understand	
204-4	54399-54400	,	
204-5	54401-54403	if	
204-6	54404-54407	the	
204-7	54408-54414	server	
204-8	54415-54421	losses	
204-9	54422-54427	power	
204-10	54428-54430	or	
204-11	54431-54438	crashes	
204-12	54439-54441	we	
204-13	54442-54446	lose	
204-14	54447-54450	all	
204-15	54451-54452	#	
204-16	54453-54458	dirty	
204-17	54459-54463	data	
204-18	54464-54466	in	
204-19	54467-54470	RAM	
204-20	54471-54474	not	
204-21	54475-54485	previously	
204-22	54486-54495	committed	
204-23	54495-54496	;	
204-24	54497-54499	so	
204-25	54500-54504	make	
204-26	54505-54509	sure	
204-27	54510-54512	to	
204-28	54513-54515	be	
204-29	54516-54518	on	
204-30	54519-54521	an	
204-31	54522-54523	#	
204-32	54524-54539	Uninterruptible	
204-33	54540-54545	Power	
204-34	54546-54552	Supply	
204-35	54553-54554	(	
204-36	54554-54557	UPS	
204-37	54557-54558	)	
204-38	54558-54559	.	

#Text=A manual "sync" as well as a "shutdown"
#Text=# or "poweroff" will always force a commit of all data in RAM to disk.
#Text=# Dirty "modified" data in RAM can be read from, written to and modified even
#Text=# before the data is committed to disk.
205-1	54560-54561	A	
205-2	54562-54568	manual	
205-3	54569-54570	"	
205-4	54570-54574	sync	
205-5	54574-54575	"	
205-6	54576-54578	as	
205-7	54579-54583	well	
205-8	54584-54586	as	
205-9	54587-54588	a	
205-10	54589-54590	"	
205-11	54590-54598	shutdown	
205-12	54598-54599	"	
205-13	54600-54601	#	
205-14	54602-54604	or	
205-15	54605-54606	"	
205-16	54606-54614	poweroff	
205-17	54614-54615	"	
205-18	54616-54620	will	
205-19	54621-54627	always	
205-20	54628-54633	force	
205-21	54634-54635	a	
205-22	54636-54642	commit	
205-23	54643-54645	of	
205-24	54646-54649	all	
205-25	54650-54654	data	
205-26	54655-54657	in	
205-27	54658-54661	RAM	
205-28	54662-54664	to	
205-29	54665-54669	disk	
205-30	54669-54670	.	
205-31	54671-54672	#	
205-32	54673-54678	Dirty	
205-33	54679-54680	"	
205-34	54680-54688	modified	
205-35	54688-54689	"	
205-36	54690-54694	data	
205-37	54695-54697	in	
205-38	54698-54701	RAM	
205-39	54702-54705	can	
205-40	54706-54708	be	
205-41	54709-54713	read	
205-42	54714-54718	from	
205-43	54718-54719	,	
205-44	54720-54727	written	
205-45	54728-54730	to	
205-46	54731-54734	and	
205-47	54735-54743	modified	
205-48	54744-54748	even	
205-49	54749-54750	#	
205-50	54751-54757	before	
205-51	54758-54761	the	
205-52	54762-54766	data	
205-53	54767-54769	is	
205-54	54770-54779	committed	
205-55	54780-54782	to	
205-56	54783-54787	disk	
205-57	54787-54788	.	

#Text=If the data set is rapidly changing,
#Text=# like during database transactions or bittorrent traffic, the changes will be
#Text=# made solely to RAM in between TXG commits.
206-1	54789-54791	If	
206-2	54792-54795	the	
206-3	54796-54800	data	
206-4	54801-54804	set	
206-5	54805-54807	is	
206-6	54808-54815	rapidly	
206-7	54816-54824	changing	
206-8	54824-54825	,	
206-9	54826-54827	#	
206-10	54828-54832	like	
206-11	54833-54839	during	
206-12	54840-54848	database	
206-13	54849-54861	transactions	
206-14	54862-54864	or	
206-15	54865-54875	bittorrent	
206-16	54876-54883	traffic	
206-17	54883-54884	,	
206-18	54885-54888	the	
206-19	54889-54896	changes	
206-20	54897-54901	will	
206-21	54902-54904	be	
206-22	54905-54906	#	
206-23	54907-54911	made	
206-24	54912-54918	solely	
206-25	54919-54921	to	
206-26	54922-54925	RAM	
206-27	54926-54928	in	
206-28	54929-54936	between	
206-29	54937-54940	TXG	
206-30	54941-54948	commits	
206-31	54948-54949	.	

#Text=Only the latest copy of the data
#Text=# in RAM will be written to disk on TXG commit which is a good argument for an
#Text=# extended txg.timeout.
#Text=# The number of outstanding I/Os per top-level vdev should be set to the
#Text=# maximum Queue Depth of the storage device times the number of threads
#Text=# supported by the storage device.
207-1	54950-54954	Only	
207-2	54955-54958	the	
207-3	54959-54965	latest	
207-4	54966-54970	copy	
207-5	54971-54973	of	
207-6	54974-54977	the	
207-7	54978-54982	data	
207-8	54983-54984	#	
207-9	54985-54987	in	
207-10	54988-54991	RAM	
207-11	54992-54996	will	
207-12	54997-54999	be	
207-13	55000-55007	written	
207-14	55008-55010	to	
207-15	55011-55015	disk	
207-16	55016-55018	on	
207-17	55019-55022	TXG	
207-18	55023-55029	commit	
207-19	55030-55035	which	
207-20	55036-55038	is	
207-21	55039-55040	a	
207-22	55041-55045	good	
207-23	55046-55054	argument	
207-24	55055-55058	for	
207-25	55059-55061	an	
207-26	55062-55063	#	
207-27	55064-55072	extended	
207-28	55073-55084	txg.timeout	
207-29	55084-55085	.	
207-30	55086-55087	#	
207-31	55088-55091	The	
207-32	55092-55098	number	
207-33	55099-55101	of	
207-34	55102-55113	outstanding	
207-35	55114-55115	I	
207-36	55115-55116	/	
207-37	55116-55118	Os	
207-38	55119-55122	per	
207-39	55123-55132	top-level	
207-40	55133-55137	vdev	
207-41	55138-55144	should	
207-42	55145-55147	be	
207-43	55148-55151	set	
207-44	55152-55154	to	
207-45	55155-55158	the	
207-46	55159-55160	#	
207-47	55161-55168	maximum	
207-48	55169-55174	Queue	
207-49	55175-55180	Depth	
207-50	55181-55183	of	
207-51	55184-55187	the	
207-52	55188-55195	storage	
207-53	55196-55202	device	
207-54	55203-55208	times	
207-55	55209-55212	the	
207-56	55213-55219	number	
207-57	55220-55222	of	
207-58	55223-55230	threads	
207-59	55231-55232	#	
207-60	55233-55242	supported	
207-61	55243-55245	by	
207-62	55246-55249	the	
207-63	55250-55257	storage	
207-64	55258-55264	device	
207-65	55264-55265	.	

#Text=According to the white sheets for NVMe
#Text=# devices, the queue depth is 32 and concurrent thread support is four (QD 32
#Text=# Thread 4).
208-1	55266-55275	According	
208-2	55276-55278	to	
208-3	55279-55282	the	
208-4	55283-55288	white	
208-5	55289-55295	sheets	
208-6	55296-55299	for	
208-7	55300-55304	NVMe	
208-8	55305-55306	#	
208-9	55307-55314	devices	
208-10	55314-55315	,	
208-11	55316-55319	the	
208-12	55320-55325	queue	
208-13	55326-55331	depth	
208-14	55332-55334	is	
208-15	55335-55337	32	
208-16	55338-55341	and	
208-17	55342-55352	concurrent	
208-18	55353-55359	thread	
208-19	55360-55367	support	
208-20	55368-55370	is	
208-21	55371-55375	four	
208-22	55376-55377	(	
208-23	55377-55379	QD	
208-24	55380-55382	32	
208-25	55383-55384	#	
208-26	55385-55391	Thread	
208-27	55392-55393	4	
208-28	55393-55394	)	
208-29	55394-55395	.	

#Text=Set the vdev.def_queue_depth to a queue depth of 32 (Q32) times
#Text=# four(4) threads times one(1) NVMe drive to equal 128 max number of outstanding
#Text=# I/Os per top-level vdev. (32_queues_*_4_threads_*_1_drive=128).
#Text=# Make sure to never, ever reach the dirty_data_sync_pct capacity limit
#Text=# especially if the zfs logbias is set to "latency".
209-1	55396-55399	Set	
209-2	55400-55403	the	
209-3	55404-55424	vdev.def_queue_depth	
209-4	55425-55427	to	
209-5	55428-55429	a	
209-6	55430-55435	queue	
209-7	55436-55441	depth	
209-8	55442-55444	of	
209-9	55445-55447	32	
209-10	55448-55449	(	
209-11	55449-55452	Q32	
209-12	55452-55453	)	
209-13	55454-55459	times	
209-14	55460-55461	#	
209-15	55462-55466	four	
209-16	55466-55467	(	
209-17	55467-55468	4	
209-18	55468-55469	)	
209-19	55470-55477	threads	
209-20	55478-55483	times	
209-21	55484-55487	one	
209-22	55487-55488	(	
209-23	55488-55489	1	
209-24	55489-55490	)	
209-25	55491-55495	NVMe	
209-26	55496-55501	drive	
209-27	55502-55504	to	
209-28	55505-55510	equal	
209-29	55511-55514	128	
209-30	55515-55518	max	
209-31	55519-55525	number	
209-32	55526-55528	of	
209-33	55529-55540	outstanding	
209-34	55541-55542	#	
209-35	55543-55544	I	
209-36	55544-55545	/	
209-37	55545-55547	Os	
209-38	55548-55551	per	
209-39	55552-55561	top-level	
209-40	55562-55566	vdev	
209-41	55566-55567	.	
209-42	55568-55569	(	
209-43	55569-55571	32	
209-44	55571-55572	_	
209-45	55572-55578	queues	
209-46	55578-55579	_	
209-47	55579-55580	*	
209-48	55580-55581	_	
209-49	55581-55582	4	
209-50	55582-55583	_	
209-51	55583-55590	threads	
209-52	55590-55591	_	
209-53	55591-55592	*	
209-54	55592-55593	_	
209-55	55593-55594	1	
209-56	55594-55595	_	
209-57	55595-55600	drive	
209-58	55600-55601	=	
209-59	55601-55604	128	
209-60	55604-55605	)	
209-61	55605-55606	.	
209-62	55607-55608	#	
209-63	55609-55613	Make	
209-64	55614-55618	sure	
209-65	55619-55621	to	
209-66	55622-55627	never	
209-67	55627-55628	,	
209-68	55629-55633	ever	
209-69	55634-55639	reach	
209-70	55640-55643	the	
209-71	55644-55663	dirty_data_sync_pct	
209-72	55664-55672	capacity	
209-73	55673-55678	limit	
209-74	55679-55680	#	
209-75	55681-55691	especially	
209-76	55692-55694	if	
209-77	55695-55698	the	
209-78	55699-55702	zfs	
209-79	55703-55710	logbias	
209-80	55711-55713	is	
209-81	55714-55717	set	
209-82	55718-55720	to	
209-83	55721-55722	"	
209-84	55722-55729	latency	
209-85	55729-55730	"	
209-86	55730-55731	.	

#Text=Logbias latency will
#Text=# double write the same incoming data to ZIL and to the disk when
#Text=# dirty_data_sync_pct is reached halving throughput.
210-1	55732-55739	Logbias	
210-2	55740-55747	latency	
210-3	55748-55752	will	
210-4	55753-55754	#	
210-5	55755-55761	double	
210-6	55762-55767	write	
210-7	55768-55771	the	
210-8	55772-55776	same	
210-9	55777-55785	incoming	
210-10	55786-55790	data	
210-11	55791-55793	to	
210-12	55794-55797	ZIL	
210-13	55798-55801	and	
210-14	55802-55804	to	
210-15	55805-55808	the	
210-16	55809-55813	disk	
210-17	55814-55818	when	
210-18	55819-55820	#	
210-19	55821-55840	dirty_data_sync_pct	
210-20	55841-55843	is	
210-21	55844-55851	reached	
210-22	55852-55859	halving	
210-23	55860-55870	throughput	
210-24	55870-55871	.	

#Text=Take a look at zfs logbias
#Text=# "throughput" to avoid these double writes.
211-1	55872-55876	Take	
211-2	55877-55878	a	
211-3	55879-55883	look	
211-4	55884-55886	at	
211-5	55887-55890	zfs	
211-6	55891-55898	logbias	
211-7	55899-55900	#	
211-8	55901-55902	"	
211-9	55902-55912	throughput	
211-10	55912-55913	"	
211-11	55914-55916	to	
211-12	55917-55922	avoid	
211-13	55923-55928	these	
211-14	55929-55935	double	
211-15	55936-55942	writes	
211-16	55942-55943	.	

#Text=When the server is accepting data
#Text=# on a 1Gbit network interface the dirty_data_sync_pct should be larger than
#Text=# the true incoming throughput of the network times the txg.timeout; 118MB/sec
#Text=# times 75 seconds will require 8.85 gigabytes of dirty_data_max RAM space
#Text=# which is well below 95% of dirty_data_max at 15.2 gigabytes.
#Text=# When determining the size of the dirty_data_max look at the amount of fast,
#Text=# first and second tier cache available in the NVMe drives.
212-1	55944-55948	When	
212-2	55949-55952	the	
212-3	55953-55959	server	
212-4	55960-55962	is	
212-5	55963-55972	accepting	
212-6	55973-55977	data	
212-7	55978-55979	#	
212-8	55980-55982	on	
212-9	55983-55984	a	
212-10	55985-55990	1Gbit	
212-11	55991-55998	network	
212-12	55999-56008	interface	
212-13	56009-56012	the	
212-14	56013-56032	dirty_data_sync_pct	
212-15	56033-56039	should	
212-16	56040-56042	be	
212-17	56043-56049	larger	
212-18	56050-56054	than	
212-19	56055-56056	#	
212-20	56057-56060	the	
212-21	56061-56065	true	
212-22	56066-56074	incoming	
212-23	56075-56085	throughput	
212-24	56086-56088	of	
212-25	56089-56092	the	
212-26	56093-56100	network	
212-27	56101-56106	times	
212-28	56107-56110	the	
212-29	56111-56122	txg.timeout	
212-30	56122-56123	;	
212-31	56124-56129	118MB	
212-32	56129-56130	/	
212-33	56130-56133	sec	
212-34	56134-56135	#	
212-35	56136-56141	times	
212-36	56142-56144	75	
212-37	56145-56152	seconds	
212-38	56153-56157	will	
212-39	56158-56165	require	
212-40	56166-56170	8.85	
212-41	56171-56180	gigabytes	
212-42	56181-56183	of	
212-43	56184-56198	dirty_data_max	
212-44	56199-56202	RAM	
212-45	56203-56208	space	
212-46	56209-56210	#	
212-47	56211-56216	which	
212-48	56217-56219	is	
212-49	56220-56224	well	
212-50	56225-56230	below	
212-51	56231-56234	95%	
212-52	56235-56237	of	
212-53	56238-56252	dirty_data_max	
212-54	56253-56255	at	
212-55	56256-56260	15.2	
212-56	56261-56270	gigabytes	
212-57	56270-56271	.	
212-58	56272-56273	#	
212-59	56274-56278	When	
212-60	56279-56290	determining	
212-61	56291-56294	the	
212-62	56295-56299	size	
212-63	56300-56302	of	
212-64	56303-56306	the	
212-65	56307-56321	dirty_data_max	
212-66	56322-56326	look	
212-67	56327-56329	at	
212-68	56330-56333	the	
212-69	56334-56340	amount	
212-70	56341-56343	of	
212-71	56344-56348	fast	
212-72	56348-56349	,	
212-73	56350-56351	#	
212-74	56352-56357	first	
212-75	56358-56361	and	
212-76	56362-56368	second	
212-77	56369-56373	tier	
212-78	56374-56379	cache	
212-79	56380-56389	available	
212-80	56390-56392	in	
212-81	56393-56396	the	
212-82	56397-56401	NVMe	
212-83	56402-56408	drives	
212-84	56408-56409	.	

#Text=All of the data in
#Text=# a completely filled dirty_data_max cache should be able to be committed to
#Text=# the drive well before the next txg.timeout even if a saturated network is
#Text=# concurrently writing data to dirty_data_max.
#Text=# The ADATA XPG SX8200 Pro 1TB NVMe has 165 gigabytes of first tier SLC cache
#Text=# and 500 gigabytes of of second tier MLC, dynamic cache.
213-1	56410-56413	All	
213-2	56414-56416	of	
213-3	56417-56420	the	
213-4	56421-56425	data	
213-5	56426-56428	in	
213-6	56429-56430	#	
213-7	56431-56432	a	
213-8	56433-56443	completely	
213-9	56444-56450	filled	
213-10	56451-56465	dirty_data_max	
213-11	56466-56471	cache	
213-12	56472-56478	should	
213-13	56479-56481	be	
213-14	56482-56486	able	
213-15	56487-56489	to	
213-16	56490-56492	be	
213-17	56493-56502	committed	
213-18	56503-56505	to	
213-19	56506-56507	#	
213-20	56508-56511	the	
213-21	56512-56517	drive	
213-22	56518-56522	well	
213-23	56523-56529	before	
213-24	56530-56533	the	
213-25	56534-56538	next	
213-26	56539-56550	txg.timeout	
213-27	56551-56555	even	
213-28	56556-56558	if	
213-29	56559-56560	a	
213-30	56561-56570	saturated	
213-31	56571-56578	network	
213-32	56579-56581	is	
213-33	56582-56583	#	
213-34	56584-56596	concurrently	
213-35	56597-56604	writing	
213-36	56605-56609	data	
213-37	56610-56612	to	
213-38	56613-56627	dirty_data_max	
213-39	56627-56628	.	
213-40	56629-56630	#	
213-41	56631-56634	The	
213-42	56635-56640	ADATA	
213-43	56641-56644	XPG	
213-44	56645-56651	SX8200	
213-45	56652-56655	Pro	
213-46	56656-56659	1TB	
213-47	56660-56664	NVMe	
213-48	56665-56668	has	
213-49	56669-56672	165	
213-50	56673-56682	gigabytes	
213-51	56683-56685	of	
213-52	56686-56691	first	
213-53	56692-56696	tier	
213-54	56697-56700	SLC	
213-55	56701-56706	cache	
213-56	56707-56708	#	
213-57	56709-56712	and	
213-58	56713-56716	500	
213-59	56717-56726	gigabytes	
213-60	56727-56729	of	
213-61	56730-56732	of	
213-62	56733-56739	second	
213-63	56740-56744	tier	
213-64	56745-56748	MLC	
213-65	56748-56749	,	
213-66	56750-56757	dynamic	
213-67	56758-56763	cache	
213-68	56763-56764	.	

#Text=The SX8200 can write
#Text=# at 2.62 gigabytes per second to the first tier SLC cache when the drive is
#Text=# properly cooled, meaning 14.16 gigabytes of dirty_data_sync_pct can be
#Text=# committed to the NVMe drive in five(5) seconds, well before the next
#Text=# txg.timeout of 75 seconds.
#Text=# The Samsung 960 EVO NVMe 1TB has six(6) gigabytes of first tier cache plus
#Text=# thirty six(36) gigabytes of second tier, dynamic cache.
214-1	56765-56768	The	
214-2	56769-56775	SX8200	
214-3	56776-56779	can	
214-4	56780-56785	write	
214-5	56786-56787	#	
214-6	56788-56790	at	
214-7	56791-56795	2.62	
214-8	56796-56805	gigabytes	
214-9	56806-56809	per	
214-10	56810-56816	second	
214-11	56817-56819	to	
214-12	56820-56823	the	
214-13	56824-56829	first	
214-14	56830-56834	tier	
214-15	56835-56838	SLC	
214-16	56839-56844	cache	
214-17	56845-56849	when	
214-18	56850-56853	the	
214-19	56854-56859	drive	
214-20	56860-56862	is	
214-21	56863-56864	#	
214-22	56865-56873	properly	
214-23	56874-56880	cooled	
214-24	56880-56881	,	
214-25	56882-56889	meaning	
214-26	56890-56895	14.16	
214-27	56896-56905	gigabytes	
214-28	56906-56908	of	
214-29	56909-56928	dirty_data_sync_pct	
214-30	56929-56932	can	
214-31	56933-56935	be	
214-32	56936-56937	#	
214-33	56938-56947	committed	
214-34	56948-56950	to	
214-35	56951-56954	the	
214-36	56955-56959	NVMe	
214-37	56960-56965	drive	
214-38	56966-56968	in	
214-39	56969-56973	five	
214-40	56973-56974	(	
214-41	56974-56975	5	
214-42	56975-56976	)	
214-43	56977-56984	seconds	
214-44	56984-56985	,	
214-45	56986-56990	well	
214-46	56991-56997	before	
214-47	56998-57001	the	
214-48	57002-57006	next	
214-49	57007-57008	#	
214-50	57009-57020	txg.timeout	
214-51	57021-57023	of	
214-52	57024-57026	75	
214-53	57027-57034	seconds	
214-54	57034-57035	.	
214-55	57036-57037	#	
214-56	57038-57041	The	
214-57	57042-57049	Samsung	
214-58	57050-57053	960	
214-59	57054-57057	EVO	
214-60	57058-57062	NVMe	
214-61	57063-57066	1TB	
214-62	57067-57070	has	
214-63	57071-57074	six	
214-64	57074-57075	(	
214-65	57075-57076	6	
214-66	57076-57077	)	
214-67	57078-57087	gigabytes	
214-68	57088-57090	of	
214-69	57091-57096	first	
214-70	57097-57101	tier	
214-71	57102-57107	cache	
214-72	57108-57112	plus	
214-73	57113-57114	#	
214-74	57115-57121	thirty	
214-75	57122-57125	six	
214-76	57125-57126	(	
214-77	57126-57128	36	
214-78	57128-57129	)	
214-79	57130-57139	gigabytes	
214-80	57140-57142	of	
214-81	57143-57149	second	
214-82	57150-57154	tier	
214-83	57154-57155	,	
214-84	57156-57163	dynamic	
214-85	57164-57169	cache	
214-86	57169-57170	.	

#Text=The 960 EVO can write
#Text=# at 1.95 gigabytes per second when the drive is properly cooled meaning 14.16
#Text=# gigabytes of dirty_data_sync_pct can be committed to the NVMe drive in
#Text=# seven(7) seconds, well before the next txg.timeout of 75 seconds.
#Text=# NVMe M.2 Cooling: Enzotech BMR-C1 passive copper heat sinks (14mm x 14mm x 14mm,
#Text=# C1100 forged copper, 8-pack) work well to cool our NVMe drives.
215-1	57171-57174	The	
215-2	57175-57178	960	
215-3	57179-57182	EVO	
215-4	57183-57186	can	
215-5	57187-57192	write	
215-6	57193-57194	#	
215-7	57195-57197	at	
215-8	57198-57202	1.95	
215-9	57203-57212	gigabytes	
215-10	57213-57216	per	
215-11	57217-57223	second	
215-12	57224-57228	when	
215-13	57229-57232	the	
215-14	57233-57238	drive	
215-15	57239-57241	is	
215-16	57242-57250	properly	
215-17	57251-57257	cooled	
215-18	57258-57265	meaning	
215-19	57266-57271	14.16	
215-20	57272-57273	#	
215-21	57274-57283	gigabytes	
215-22	57284-57286	of	
215-23	57287-57306	dirty_data_sync_pct	
215-24	57307-57310	can	
215-25	57311-57313	be	
215-26	57314-57323	committed	
215-27	57324-57326	to	
215-28	57327-57330	the	
215-29	57331-57335	NVMe	
215-30	57336-57341	drive	
215-31	57342-57344	in	
215-32	57345-57346	#	
215-33	57347-57352	seven	
215-34	57352-57353	(	
215-35	57353-57354	7	
215-36	57354-57355	)	
215-37	57356-57363	seconds	
215-38	57363-57364	,	
215-39	57365-57369	well	
215-40	57370-57376	before	
215-41	57377-57380	the	
215-42	57381-57385	next	
215-43	57386-57397	txg.timeout	
215-44	57398-57400	of	
215-45	57401-57403	75	
215-46	57404-57411	seconds	
215-47	57411-57412	.	
215-48	57413-57414	#	
215-49	57415-57419	NVMe	
215-50	57420-57421	M	
215-51	57421-57423	.2	
215-52	57424-57431	Cooling	
215-53	57431-57432	:	
215-54	57433-57441	Enzotech	
215-55	57442-57448	BMR-C1	
215-56	57449-57456	passive	
215-57	57457-57463	copper	
215-58	57464-57468	heat	
215-59	57469-57474	sinks	
215-60	57475-57476	(	
215-61	57476-57480	14mm	
215-62	57481-57482	x	
215-63	57483-57487	14mm	
215-64	57488-57489	x	
215-65	57490-57494	14mm	
215-66	57494-57495	,	
215-67	57496-57497	#	
215-68	57498-57503	C1100	
215-69	57504-57510	forged	
215-70	57511-57517	copper	
215-71	57517-57518	,	
215-72	57519-57520	8	
215-73	57520-57521	-	
215-74	57521-57525	pack	
215-75	57525-57526	)	
215-76	57527-57531	work	
215-77	57532-57536	well	
215-78	57537-57539	to	
215-79	57540-57544	cool	
215-80	57545-57548	our	
215-81	57549-57553	NVMe	
215-82	57554-57560	drives	
215-83	57560-57561	.	

#Text=User four(4)
#Text=# heatsinks per NVMe drive, one 14mm x 14mm copper square per silicon chip.
#Text=# The ZFS commit logic order is strictly sync_read, sync_write, async_read,
#Text=# async_write and finally scrub/resilver .
#Text=###
#Text=######
#Text=######### OFF BELOW HERE #########
#Text=# ZFS Tuning
#Text=#vfs.zfs.delay_scale=500000
#Text=# (default 500000 ns, nanoseconds)
#Text=#vfs.zfs.dirty_data_max=17179869184
#Text=# dirty_data can use up to 16GB RAM, equal to dirty_data_max_max (default, 10% of RAM or up to 4GB)
#Text=#vfs.zfs.dirty_data_sync=12348030976
#Text=# force commit Transaction Group (TXG) if dirty_data reaches 11.5GB (default 67108864, 64MB, FreeBSD 12.0; replaced by vfs.zfs.dirty_data_sync_pct on FreeBSD 12.1)
#Text=#vfs.zfs.no_scrub_prefetch=0
#Text=# disable prefetch on scrubs (default 0)
#Text=#vfs.zfs.nopwrite_enabled=1
#Text=# enable nopwrite feature, requires sha256 / sha512 checksums (default 1)
#Text=#vfs.zfs.prefetch_disable=0
#Text=# file-level prefetching, disable if zfs-stats prefetch stats below 10% (default 0 if RAM greater than 4GB)
#Text=#vfs.zfs.resilver_delay=2
#Text=# number of pause ticks to delay resilver on a busy pool (default 2, kern.hz 1000 ticks/sec / 2 = 500 IOPS)
#Text=#vfs.zfs.scrub_delay=4
#Text=# number of pause ticks to delay scrub on a busy pool (default 4, kern.hz 1000 ticks/sec / 4 = 250 IOPS)
#Text=#vfs.zfs.sync_pass_rewrite=2
#Text=# rewrite new bps starting in this pass (default 2)
#Text=#vfs.zfs.trim.txg_delay=2
#Text=# delay TRIMs by up to this many TXGs, trim.txg_delay * txg.timeout ~= 240 secs (default 32, 32*5secs=160 secs)
#Text=#vfs.zfs.vdev.aggregation_limit=1048576
#Text=# aggregated eight(8) TXGs into a single sequential TXG, make divisible by largest pool recordsize (default 131072, 128KB, FreeBSD 12.0; default 1048576 on FreeBSD 12.1)
#Text=#vfs.zfs.vdev.async_read_max_active=3
#Text=# max async_read I/O requests per device in pool (default 3)
#Text=#vfs.zfs.vdev.async_read_min_active=1
#Text=# min async_read I/O requests per device in pool (default 1)
#Text=#vfs.zfs.vdev.async_write_active_max_dirty_percent=60 # percent dirty_data_max cached when max_active I/Os are all active (default 60%)
#Text=#vfs.zfs.vdev.async_write_active_min_dirty_percent=30 # percent dirty_data_max cached before linearly rising to max_active I/Os (default 30%)
#Text=#vfs.zfs.vdev.async_write_max_active=10
#Text=# max async_write I/O requests per device in pool (default 10)
#Text=#vfs.zfs.vdev.async_write_min_active=1
#Text=# min async_write I/O requests per device in pool (default 1)
#Text=#vfs.zfs.vdev.max_active=1000
#Text=# max I/Os of any type active per device in pool (default 1000)
#Text=#vfs.zfs.vdev.read_gap_limit=32768
#Text=# max gap between any two reads being aggregated (default 32768, 32KB)
#Text=#vfs.zfs.vdev.scrub_max_active=2
#Text=# max scrub I/Os active on each device (default 2)
#Text=#vfs.zfs.vdev.scrub_min_active=1
#Text=# min scrub I/Os active on each device (default 1)
#Text=#vfs.zfs.vdev.sync_read_max_active=10
#Text=# max sync_read I/O requests per device in pool (default 10)
#Text=#vfs.zfs.vdev.sync_read_min_active=10
#Text=# min sync_read I/O requests per device in pool (default 10)
#Text=#vfs.zfs.vdev.sync_write_max_active=10
#Text=# max sync_write I/O requests per device in pool (default 10)
#Text=#vfs.zfs.vdev.sync_write_min_active=10
#Text=# min sync_write I/O requests per device in pool (default 10)
#Text=#vfs.zfs.vdev.trim_max_active=64
#Text=# max trim I/O requests per device in pool (default 64)
#Text=#vfs.zfs.vdev.write_gap_limit=4096
#Text=# max gap between any two writes being aggregated, 16K bittorrent, 4k nfs, 4k mysql (default 4096, 4KB)
#Text=# ZFS L2ARC tuning - If you have read intensive workloads and limited RAM make
#Text=# sure to use an SSD for your L2ARC.
216-1	57562-57566	User	
216-2	57567-57571	four	
216-3	57571-57572	(	
216-4	57572-57573	4	
216-5	57573-57574	)	
216-6	57575-57576	#	
216-7	57577-57586	heatsinks	
216-8	57587-57590	per	
216-9	57591-57595	NVMe	
216-10	57596-57601	drive	
216-11	57601-57602	,	
216-12	57603-57606	one	
216-13	57607-57611	14mm	
216-14	57612-57613	x	
216-15	57614-57618	14mm	
216-16	57619-57625	copper	
216-17	57626-57632	square	
216-18	57633-57636	per	
216-19	57637-57644	silicon	
216-20	57645-57649	chip	
216-21	57649-57650	.	
216-22	57651-57652	#	
216-23	57653-57656	The	
216-24	57657-57660	ZFS	
216-25	57661-57667	commit	
216-26	57668-57673	logic	
216-27	57674-57679	order	
216-28	57680-57682	is	
216-29	57683-57691	strictly	
216-30	57692-57701	sync_read	
216-31	57701-57702	,	
216-32	57703-57713	sync_write	
216-33	57713-57714	,	
216-34	57715-57725	async_read	
216-35	57725-57726	,	
216-36	57727-57728	#	
216-37	57729-57740	async_write	
216-38	57741-57744	and	
216-39	57745-57752	finally	
216-40	57753-57758	scrub	
216-41	57758-57759	/	
216-42	57759-57767	resilver	
216-43	57768-57769	.	
216-44	57770-57771	#	
216-45	57771-57772	#	
216-46	57772-57773	#	
216-47	57774-57775	#	
216-48	57775-57776	#	
216-49	57776-57777	#	
216-50	57777-57778	#	
216-51	57778-57779	#	
216-52	57779-57780	#	
216-53	57781-57782	#	
216-54	57782-57783	#	
216-55	57783-57784	#	
216-56	57784-57785	#	
216-57	57785-57786	#	
216-58	57786-57787	#	
216-59	57787-57788	#	
216-60	57788-57789	#	
216-61	57789-57790	#	
216-62	57791-57794	OFF	
216-63	57795-57800	BELOW	
216-64	57801-57805	HERE	
216-65	57806-57807	#	
216-66	57807-57808	#	
216-67	57808-57809	#	
216-68	57809-57810	#	
216-69	57810-57811	#	
216-70	57811-57812	#	
216-71	57812-57813	#	
216-72	57813-57814	#	
216-73	57814-57815	#	
216-74	57816-57817	#	
216-75	57818-57821	ZFS	
216-76	57822-57828	Tuning	
216-77	57829-57830	#	
216-78	57830-57849	vfs.zfs.delay_scale	
216-79	57849-57850	=	
216-80	57850-57856	500000	
216-81	57857-57858	#	
216-82	57859-57860	(	
216-83	57860-57867	default	
216-84	57868-57874	500000	
216-85	57875-57877	ns	
216-86	57877-57878	,	
216-87	57879-57890	nanoseconds	
216-88	57890-57891	)	
216-89	57892-57893	#	
216-90	57893-57915	vfs.zfs.dirty_data_max	
216-91	57915-57916	=	
216-92	57916-57927	17179869184	
216-93	57928-57929	#	
216-94	57930-57940	dirty_data	
216-95	57941-57944	can	
216-96	57945-57948	use	
216-97	57949-57951	up	
216-98	57952-57954	to	
216-99	57955-57959	16GB	
216-100	57960-57963	RAM	
216-101	57963-57964	,	
216-102	57965-57970	equal	
216-103	57971-57973	to	
216-104	57974-57992	dirty_data_max_max	
216-105	57993-57994	(	
216-106	57994-58001	default	
216-107	58001-58002	,	
216-108	58003-58006	10%	
216-109	58007-58009	of	
216-110	58010-58013	RAM	
216-111	58014-58016	or	
216-112	58017-58019	up	
216-113	58020-58022	to	
216-114	58023-58026	4GB	
216-115	58026-58027	)	
216-116	58028-58029	#	
216-117	58029-58052	vfs.zfs.dirty_data_sync	
216-118	58052-58053	=	
216-119	58053-58064	12348030976	
216-120	58065-58066	#	
216-121	58067-58072	force	
216-122	58073-58079	commit	
216-123	58080-58091	Transaction	
216-124	58092-58097	Group	
216-125	58098-58099	(	
216-126	58099-58102	TXG	
216-127	58102-58103	)	
216-128	58104-58106	if	
216-129	58107-58117	dirty_data	
216-130	58118-58125	reaches	
216-131	58126-58132	11.5GB	
216-132	58133-58134	(	
216-133	58134-58141	default	
216-134	58142-58150	67108864	
216-135	58150-58151	,	
216-136	58152-58156	64MB	
216-137	58156-58157	,	
216-138	58158-58165	FreeBSD	
216-139	58166-58170	12.0	
216-140	58170-58171	;	
216-141	58172-58180	replaced	
216-142	58181-58183	by	
216-143	58184-58211	vfs.zfs.dirty_data_sync_pct	
216-144	58212-58214	on	
216-145	58215-58222	FreeBSD	
216-146	58223-58227	12.1	
216-147	58227-58228	)	
216-148	58229-58230	#	
216-149	58230-58255	vfs.zfs.no_scrub_prefetch	
216-150	58255-58256	=	
216-151	58256-58257	0	
216-152	58258-58259	#	
216-153	58260-58267	disable	
216-154	58268-58276	prefetch	
216-155	58277-58279	on	
216-156	58280-58286	scrubs	
216-157	58287-58288	(	
216-158	58288-58295	default	
216-159	58296-58297	0	
216-160	58297-58298	)	
216-161	58299-58300	#	
216-162	58300-58324	vfs.zfs.nopwrite_enabled	
216-163	58324-58325	=	
216-164	58325-58326	1	
216-165	58327-58328	#	
216-166	58329-58335	enable	
216-167	58336-58344	nopwrite	
216-168	58345-58352	feature	
216-169	58352-58353	,	
216-170	58354-58362	requires	
216-171	58363-58369	sha256	
216-172	58370-58371	/	
216-173	58372-58378	sha512	
216-174	58379-58388	checksums	
216-175	58389-58390	(	
216-176	58390-58397	default	
216-177	58398-58399	1	
216-178	58399-58400	)	
216-179	58401-58402	#	
216-180	58402-58426	vfs.zfs.prefetch_disable	
216-181	58426-58427	=	
216-182	58427-58428	0	
216-183	58429-58430	#	
216-184	58431-58441	file-level	
216-185	58442-58453	prefetching	
216-186	58453-58454	,	
216-187	58455-58462	disable	
216-188	58463-58465	if	
216-189	58466-58475	zfs-stats	
216-190	58476-58484	prefetch	
216-191	58485-58490	stats	
216-192	58491-58496	below	
216-193	58497-58500	10%	
216-194	58501-58502	(	
216-195	58502-58509	default	
216-196	58510-58511	0	
216-197	58512-58514	if	
216-198	58515-58518	RAM	
216-199	58519-58526	greater	
216-200	58527-58531	than	
216-201	58532-58535	4GB	
216-202	58535-58536	)	
216-203	58537-58538	#	
216-204	58538-58560	vfs.zfs.resilver_delay	
216-205	58560-58561	=	
216-206	58561-58562	2	
216-207	58563-58564	#	
216-208	58565-58571	number	
216-209	58572-58574	of	
216-210	58575-58580	pause	
216-211	58581-58586	ticks	
216-212	58587-58589	to	
216-213	58590-58595	delay	
216-214	58596-58604	resilver	
216-215	58605-58607	on	
216-216	58608-58609	a	
216-217	58610-58614	busy	
216-218	58615-58619	pool	
216-219	58620-58621	(	
216-220	58621-58628	default	
216-221	58629-58630	2	
216-222	58630-58631	,	
216-223	58632-58639	kern.hz	
216-224	58640-58644	1000	
216-225	58645-58650	ticks	
216-226	58650-58651	/	
216-227	58651-58654	sec	
216-228	58655-58656	/	
216-229	58657-58658	2	
216-230	58659-58660	=	
216-231	58661-58664	500	
216-232	58665-58669	IOPS	
216-233	58669-58670	)	
216-234	58671-58672	#	
216-235	58672-58691	vfs.zfs.scrub_delay	
216-236	58691-58692	=	
216-237	58692-58693	4	
216-238	58694-58695	#	
216-239	58696-58702	number	
216-240	58703-58705	of	
216-241	58706-58711	pause	
216-242	58712-58717	ticks	
216-243	58718-58720	to	
216-244	58721-58726	delay	
216-245	58727-58732	scrub	
216-246	58733-58735	on	
216-247	58736-58737	a	
216-248	58738-58742	busy	
216-249	58743-58747	pool	
216-250	58748-58749	(	
216-251	58749-58756	default	
216-252	58757-58758	4	
216-253	58758-58759	,	
216-254	58760-58767	kern.hz	
216-255	58768-58772	1000	
216-256	58773-58778	ticks	
216-257	58778-58779	/	
216-258	58779-58782	sec	
216-259	58783-58784	/	
216-260	58785-58786	4	
216-261	58787-58788	=	
216-262	58789-58792	250	
216-263	58793-58797	IOPS	
216-264	58797-58798	)	
216-265	58799-58800	#	
216-266	58800-58825	vfs.zfs.sync_pass_rewrite	
216-267	58825-58826	=	
216-268	58826-58827	2	
216-269	58828-58829	#	
216-270	58830-58837	rewrite	
216-271	58838-58841	new	
216-272	58842-58845	bps	
216-273	58846-58854	starting	
216-274	58855-58857	in	
216-275	58858-58862	this	
216-276	58863-58867	pass	
216-277	58868-58869	(	
216-278	58869-58876	default	
216-279	58877-58878	2	
216-280	58878-58879	)	
216-281	58880-58881	#	
216-282	58881-58903	vfs.zfs.trim.txg_delay	
216-283	58903-58904	=	
216-284	58904-58905	2	
216-285	58906-58907	#	
216-286	58908-58913	delay	
216-287	58914-58919	TRIMs	
216-288	58920-58922	by	
216-289	58923-58925	up	
216-290	58926-58928	to	
216-291	58929-58933	this	
216-292	58934-58938	many	
216-293	58939-58943	TXGs	
216-294	58943-58944	,	
216-295	58945-58959	trim.txg_delay	
216-296	58960-58961	*	
216-297	58962-58973	txg.timeout	
216-298	58974-58975	~	
216-299	58975-58976	=	
216-300	58977-58980	240	
216-301	58981-58985	secs	
216-302	58986-58987	(	
216-303	58987-58994	default	
216-304	58995-58997	32	
216-305	58997-58998	,	
216-306	58999-59001	32	
216-307	59001-59002	*	
216-308	59002-59007	5secs	
216-309	59007-59008	=	
216-310	59008-59011	160	
216-311	59012-59016	secs	
216-312	59016-59017	)	
216-313	59018-59019	#	
216-314	59019-59049	vfs.zfs.vdev.aggregation_limit	
216-315	59049-59050	=	
216-316	59050-59057	1048576	
216-317	59058-59059	#	
216-318	59060-59070	aggregated	
216-319	59071-59076	eight	
216-320	59076-59077	(	
216-321	59077-59078	8	
216-322	59078-59079	)	
216-323	59080-59084	TXGs	
216-324	59085-59089	into	
216-325	59090-59091	a	
216-326	59092-59098	single	
216-327	59099-59109	sequential	
216-328	59110-59113	TXG	
216-329	59113-59114	,	
216-330	59115-59119	make	
216-331	59120-59129	divisible	
216-332	59130-59132	by	
216-333	59133-59140	largest	
216-334	59141-59145	pool	
216-335	59146-59156	recordsize	
216-336	59157-59158	(	
216-337	59158-59165	default	
216-338	59166-59172	131072	
216-339	59172-59173	,	
216-340	59174-59179	128KB	
216-341	59179-59180	,	
216-342	59181-59188	FreeBSD	
216-343	59189-59193	12.0	
216-344	59193-59194	;	
216-345	59195-59202	default	
216-346	59203-59210	1048576	
216-347	59211-59213	on	
216-348	59214-59221	FreeBSD	
216-349	59222-59226	12.1	
216-350	59226-59227	)	
216-351	59228-59229	#	
216-352	59229-59263	vfs.zfs.vdev.async_read_max_active	
216-353	59263-59264	=	
216-354	59264-59265	3	
216-355	59266-59267	#	
216-356	59268-59271	max	
216-357	59272-59282	async_read	
216-358	59283-59284	I	
216-359	59284-59285	/	
216-360	59285-59286	O	
216-361	59287-59295	requests	
216-362	59296-59299	per	
216-363	59300-59306	device	
216-364	59307-59309	in	
216-365	59310-59314	pool	
216-366	59315-59316	(	
216-367	59316-59323	default	
216-368	59324-59325	3	
216-369	59325-59326	)	
216-370	59327-59328	#	
216-371	59328-59362	vfs.zfs.vdev.async_read_min_active	
216-372	59362-59363	=	
216-373	59363-59364	1	
216-374	59365-59366	#	
216-375	59367-59370	min	
216-376	59371-59381	async_read	
216-377	59382-59383	I	
216-378	59383-59384	/	
216-379	59384-59385	O	
216-380	59386-59394	requests	
216-381	59395-59398	per	
216-382	59399-59405	device	
216-383	59406-59408	in	
216-384	59409-59413	pool	
216-385	59414-59415	(	
216-386	59415-59422	default	
216-387	59423-59424	1	
216-388	59424-59425	)	
216-389	59426-59427	#	
216-390	59427-59476	vfs.zfs.vdev.async_write_active_max_dirty_percent	
216-391	59476-59477	=	
216-392	59477-59479	60	
216-393	59480-59481	#	
216-394	59482-59489	percent	
216-395	59490-59504	dirty_data_max	
216-396	59505-59511	cached	
216-397	59512-59516	when	
216-398	59517-59527	max_active	
216-399	59528-59529	I	
216-400	59529-59530	/	
216-401	59530-59532	Os	
216-402	59533-59536	are	
216-403	59537-59540	all	
216-404	59541-59547	active	
216-405	59548-59549	(	
216-406	59549-59556	default	
216-407	59557-59560	60%	
216-408	59560-59561	)	
216-409	59562-59563	#	
216-410	59563-59612	vfs.zfs.vdev.async_write_active_min_dirty_percent	
216-411	59612-59613	=	
216-412	59613-59615	30	
216-413	59616-59617	#	
216-414	59618-59625	percent	
216-415	59626-59640	dirty_data_max	
216-416	59641-59647	cached	
216-417	59648-59654	before	
216-418	59655-59663	linearly	
216-419	59664-59670	rising	
216-420	59671-59673	to	
216-421	59674-59684	max_active	
216-422	59685-59686	I	
216-423	59686-59687	/	
216-424	59687-59689	Os	
216-425	59690-59691	(	
216-426	59691-59698	default	
216-427	59699-59702	30%	
216-428	59702-59703	)	
216-429	59704-59705	#	
216-430	59705-59740	vfs.zfs.vdev.async_write_max_active	
216-431	59740-59741	=	
216-432	59741-59743	10	
216-433	59744-59745	#	
216-434	59746-59749	max	
216-435	59750-59761	async_write	
216-436	59762-59763	I	
216-437	59763-59764	/	
216-438	59764-59765	O	
216-439	59766-59774	requests	
216-440	59775-59778	per	
216-441	59779-59785	device	
216-442	59786-59788	in	
216-443	59789-59793	pool	
216-444	59794-59795	(	
216-445	59795-59802	default	
216-446	59803-59805	10	
216-447	59805-59806	)	
216-448	59807-59808	#	
216-449	59808-59843	vfs.zfs.vdev.async_write_min_active	
216-450	59843-59844	=	
216-451	59844-59845	1	
216-452	59846-59847	#	
216-453	59848-59851	min	
216-454	59852-59863	async_write	
216-455	59864-59865	I	
216-456	59865-59866	/	
216-457	59866-59867	O	
216-458	59868-59876	requests	
216-459	59877-59880	per	
216-460	59881-59887	device	
216-461	59888-59890	in	
216-462	59891-59895	pool	
216-463	59896-59897	(	
216-464	59897-59904	default	
216-465	59905-59906	1	
216-466	59906-59907	)	
216-467	59908-59909	#	
216-468	59909-59932	vfs.zfs.vdev.max_active	
216-469	59932-59933	=	
216-470	59933-59937	1000	
216-471	59938-59939	#	
216-472	59940-59943	max	
216-473	59944-59945	I	
216-474	59945-59946	/	
216-475	59946-59948	Os	
216-476	59949-59951	of	
216-477	59952-59955	any	
216-478	59956-59960	type	
216-479	59961-59967	active	
216-480	59968-59971	per	
216-481	59972-59978	device	
216-482	59979-59981	in	
216-483	59982-59986	pool	
216-484	59987-59988	(	
216-485	59988-59995	default	
216-486	59996-60000	1000	
216-487	60000-60001	)	
216-488	60002-60003	#	
216-489	60003-60030	vfs.zfs.vdev.read_gap_limit	
216-490	60030-60031	=	
216-491	60031-60036	32768	
216-492	60037-60038	#	
216-493	60039-60042	max	
216-494	60043-60046	gap	
216-495	60047-60054	between	
216-496	60055-60058	any	
216-497	60059-60062	two	
216-498	60063-60068	reads	
216-499	60069-60074	being	
216-500	60075-60085	aggregated	
216-501	60086-60087	(	
216-502	60087-60094	default	
216-503	60095-60100	32768	
216-504	60100-60101	,	
216-505	60102-60106	32KB	
216-506	60106-60107	)	
216-507	60108-60109	#	
216-508	60109-60138	vfs.zfs.vdev.scrub_max_active	
216-509	60138-60139	=	
216-510	60139-60140	2	
216-511	60141-60142	#	
216-512	60143-60146	max	
216-513	60147-60152	scrub	
216-514	60153-60154	I	
216-515	60154-60155	/	
216-516	60155-60157	Os	
216-517	60158-60164	active	
216-518	60165-60167	on	
216-519	60168-60172	each	
216-520	60173-60179	device	
216-521	60180-60181	(	
216-522	60181-60188	default	
216-523	60189-60190	2	
216-524	60190-60191	)	
216-525	60192-60193	#	
216-526	60193-60222	vfs.zfs.vdev.scrub_min_active	
216-527	60222-60223	=	
216-528	60223-60224	1	
216-529	60225-60226	#	
216-530	60227-60230	min	
216-531	60231-60236	scrub	
216-532	60237-60238	I	
216-533	60238-60239	/	
216-534	60239-60241	Os	
216-535	60242-60248	active	
216-536	60249-60251	on	
216-537	60252-60256	each	
216-538	60257-60263	device	
216-539	60264-60265	(	
216-540	60265-60272	default	
216-541	60273-60274	1	
216-542	60274-60275	)	
216-543	60276-60277	#	
216-544	60277-60310	vfs.zfs.vdev.sync_read_max_active	
216-545	60310-60311	=	
216-546	60311-60313	10	
216-547	60314-60315	#	
216-548	60316-60319	max	
216-549	60320-60329	sync_read	
216-550	60330-60331	I	
216-551	60331-60332	/	
216-552	60332-60333	O	
216-553	60334-60342	requests	
216-554	60343-60346	per	
216-555	60347-60353	device	
216-556	60354-60356	in	
216-557	60357-60361	pool	
216-558	60362-60363	(	
216-559	60363-60370	default	
216-560	60371-60373	10	
216-561	60373-60374	)	
216-562	60375-60376	#	
216-563	60376-60409	vfs.zfs.vdev.sync_read_min_active	
216-564	60409-60410	=	
216-565	60410-60412	10	
216-566	60413-60414	#	
216-567	60415-60418	min	
216-568	60419-60428	sync_read	
216-569	60429-60430	I	
216-570	60430-60431	/	
216-571	60431-60432	O	
216-572	60433-60441	requests	
216-573	60442-60445	per	
216-574	60446-60452	device	
216-575	60453-60455	in	
216-576	60456-60460	pool	
216-577	60461-60462	(	
216-578	60462-60469	default	
216-579	60470-60472	10	
216-580	60472-60473	)	
216-581	60474-60475	#	
216-582	60475-60509	vfs.zfs.vdev.sync_write_max_active	
216-583	60509-60510	=	
216-584	60510-60512	10	
216-585	60513-60514	#	
216-586	60515-60518	max	
216-587	60519-60529	sync_write	
216-588	60530-60531	I	
216-589	60531-60532	/	
216-590	60532-60533	O	
216-591	60534-60542	requests	
216-592	60543-60546	per	
216-593	60547-60553	device	
216-594	60554-60556	in	
216-595	60557-60561	pool	
216-596	60562-60563	(	
216-597	60563-60570	default	
216-598	60571-60573	10	
216-599	60573-60574	)	
216-600	60575-60576	#	
216-601	60576-60610	vfs.zfs.vdev.sync_write_min_active	
216-602	60610-60611	=	
216-603	60611-60613	10	
216-604	60614-60615	#	
216-605	60616-60619	min	
216-606	60620-60630	sync_write	
216-607	60631-60632	I	
216-608	60632-60633	/	
216-609	60633-60634	O	
216-610	60635-60643	requests	
216-611	60644-60647	per	
216-612	60648-60654	device	
216-613	60655-60657	in	
216-614	60658-60662	pool	
216-615	60663-60664	(	
216-616	60664-60671	default	
216-617	60672-60674	10	
216-618	60674-60675	)	
216-619	60676-60677	#	
216-620	60677-60705	vfs.zfs.vdev.trim_max_active	
216-621	60705-60706	=	
216-622	60706-60708	64	
216-623	60709-60710	#	
216-624	60711-60714	max	
216-625	60715-60719	trim	
216-626	60720-60721	I	
216-627	60721-60722	/	
216-628	60722-60723	O	
216-629	60724-60732	requests	
216-630	60733-60736	per	
216-631	60737-60743	device	
216-632	60744-60746	in	
216-633	60747-60751	pool	
216-634	60752-60753	(	
216-635	60753-60760	default	
216-636	60761-60763	64	
216-637	60763-60764	)	
216-638	60765-60766	#	
216-639	60766-60794	vfs.zfs.vdev.write_gap_limit	
216-640	60794-60795	=	
216-641	60795-60799	4096	
216-642	60800-60801	#	
216-643	60802-60805	max	
216-644	60806-60809	gap	
216-645	60810-60817	between	
216-646	60818-60821	any	
216-647	60822-60825	two	
216-648	60826-60832	writes	
216-649	60833-60838	being	
216-650	60839-60849	aggregated	
216-651	60849-60850	,	
216-652	60851-60854	16K	
216-653	60855-60865	bittorrent	
216-654	60865-60866	,	
216-655	60867-60869	4k	
216-656	60870-60873	nfs	
216-657	60873-60874	,	
216-658	60875-60877	4k	
216-659	60878-60883	mysql	
216-660	60884-60885	(	
216-661	60885-60892	default	
216-662	60893-60897	4096	
216-663	60897-60898	,	
216-664	60899-60902	4KB	
216-665	60902-60903	)	
216-666	60904-60905	#	
216-667	60906-60909	ZFS	
216-668	60910-60915	L2ARC	
216-669	60916-60922	tuning	
216-670	60923-60924	-	
216-671	60925-60927	If	
216-672	60928-60931	you	
216-673	60932-60936	have	
216-674	60937-60941	read	
216-675	60942-60951	intensive	
216-676	60952-60961	workloads	
216-677	60962-60965	and	
216-678	60966-60973	limited	
216-679	60974-60977	RAM	
216-680	60978-60982	make	
216-681	60983-60984	#	
216-682	60985-60989	sure	
216-683	60990-60992	to	
216-684	60993-60996	use	
216-685	60997-60999	an	
216-686	61000-61003	SSD	
216-687	61004-61007	for	
216-688	61008-61012	your	
216-689	61013-61018	L2ARC	
216-690	61018-61019	.	

#Text=Verify noprefetch is enabled(1) and
#Text=# increase the speed at which the system can fill the L2ARC device.
217-1	61020-61026	Verify	
217-2	61027-61037	noprefetch	
217-3	61038-61040	is	
217-4	61041-61048	enabled	
217-5	61048-61049	(	
217-6	61049-61050	1	
217-7	61050-61051	)	
217-8	61052-61055	and	
217-9	61056-61057	#	
217-10	61058-61066	increase	
217-11	61067-61070	the	
217-12	61071-61076	speed	
217-13	61077-61079	at	
217-14	61080-61085	which	
217-15	61086-61089	the	
217-16	61090-61096	system	
217-17	61097-61100	can	
217-18	61101-61105	fill	
217-19	61106-61109	the	
217-20	61110-61115	L2ARC	
217-21	61116-61122	device	
217-22	61122-61123	.	

#Text=By default,
#Text=# when the L2ARC is being populated FreeBSD will only write at 16MB/sec to the
#Text=# SSD. 16MB calculated by adding the speed of write_boost and write_max.
#Text=# 16MB/sec is too slow as many SSD's made today which can easily sustain
#Text=# 500MB/sec.
218-1	61124-61126	By	
218-2	61127-61134	default	
218-3	61134-61135	,	
218-4	61136-61137	#	
218-5	61138-61142	when	
218-6	61143-61146	the	
218-7	61147-61152	L2ARC	
218-8	61153-61155	is	
218-9	61156-61161	being	
218-10	61162-61171	populated	
218-11	61172-61179	FreeBSD	
218-12	61180-61184	will	
218-13	61185-61189	only	
218-14	61190-61195	write	
218-15	61196-61198	at	
218-16	61199-61203	16MB	
218-17	61203-61204	/	
218-18	61204-61207	sec	
218-19	61208-61210	to	
218-20	61211-61214	the	
218-21	61215-61216	#	
218-22	61217-61220	SSD	
218-23	61220-61221	.	
218-24	61222-61226	16MB	
218-25	61227-61237	calculated	
218-26	61238-61240	by	
218-27	61241-61247	adding	
218-28	61248-61251	the	
218-29	61252-61257	speed	
218-30	61258-61260	of	
218-31	61261-61272	write_boost	
218-32	61273-61276	and	
218-33	61277-61286	write_max	
218-34	61286-61287	.	
218-35	61288-61289	#	
218-36	61290-61294	16MB	
218-37	61294-61295	/	
218-38	61295-61298	sec	
218-39	61299-61301	is	
218-40	61302-61305	too	
218-41	61306-61310	slow	
218-42	61311-61313	as	
218-43	61314-61318	many	
218-44	61319-61324	SSD's	
218-45	61325-61329	made	
218-46	61330-61335	today	
218-47	61336-61341	which	
218-48	61342-61345	can	
218-49	61346-61352	easily	
218-50	61353-61360	sustain	
218-51	61361-61362	#	
218-52	61363-61368	500MB	
218-53	61368-61369	/	
218-54	61369-61372	sec	
218-55	61372-61373	.	

#Text=It is recommend to set both write_boost and write_max to at least
#Text=# 256MB each so the L2ARC can be quickly seeded.
219-1	61374-61376	It	
219-2	61377-61379	is	
219-3	61380-61389	recommend	
219-4	61390-61392	to	
219-5	61393-61396	set	
219-6	61397-61401	both	
219-7	61402-61413	write_boost	
219-8	61414-61417	and	
219-9	61418-61427	write_max	
219-10	61428-61430	to	
219-11	61431-61433	at	
219-12	61434-61439	least	
219-13	61440-61441	#	
219-14	61442-61447	256MB	
219-15	61448-61452	each	
219-16	61453-61455	so	
219-17	61456-61459	the	
219-18	61460-61465	L2ARC	
219-19	61466-61469	can	
219-20	61470-61472	be	
219-21	61473-61480	quickly	
219-22	61481-61487	seeded	
219-23	61487-61488	.	

#Text=Contrary to myth, enterprise
#Text=# class SSDs can last for many years under constant read/write abuse of a web
#Text=# server.
220-1	61489-61497	Contrary	
220-2	61498-61500	to	
220-3	61501-61505	myth	
220-4	61505-61506	,	
220-5	61507-61517	enterprise	
220-6	61518-61519	#	
220-7	61520-61525	class	
220-8	61526-61530	SSDs	
220-9	61531-61534	can	
220-10	61535-61539	last	
220-11	61540-61543	for	
220-12	61544-61548	many	
220-13	61549-61554	years	
220-14	61555-61560	under	
220-15	61561-61569	constant	
220-16	61570-61574	read	
220-17	61574-61575	/	
220-18	61575-61580	write	
220-19	61581-61586	abuse	
220-20	61587-61589	of	
220-21	61590-61591	a	
220-22	61592-61595	web	
220-23	61596-61597	#	
220-24	61598-61604	server	
220-25	61604-61605	.	

#Text=#vfs.zfs.l2arc_noprefetch=1
#Text=# (default 1)
#Text=#vfs.zfs.l2arc_write_boost=268435456 # (default 8388608)
#Text=#vfs.zfs.l2arc_write_max=268435456
#Text=# (default 8388608)
#Text=# General Security and DoS mitigation
#Text=#hw.hn.enable_udp4cs=1
#Text=# Offload UDP/IPv4 checksum to network card (default 1)
#Text=#hw.hn.enable_udp6cs=1
#Text=# Offload UDP/IPv6 checksum to network card (default 1)
#Text=#hw.ixl.enable_tx_fc_filter=1
#Text=# filter out Ethertype 0x8808, flow control frames (default 1)
#Text=#net.bpf.optimize_writers=0
#Text=# bpf are write-only unless program explicitly specifies the read filter (default 0)
#Text=#net.bpf.zerocopy_enable=0
#Text=# zero-copy BPF buffers, breaks dhcpd !
221-1	61606-61607	#	
221-2	61607-61631	vfs.zfs.l2arc_noprefetch	
221-3	61631-61632	=	
221-4	61632-61633	1	
221-5	61634-61635	#	
221-6	61636-61637	(	
221-7	61637-61644	default	
221-8	61645-61646	1	
221-9	61646-61647	)	
221-10	61648-61649	#	
221-11	61649-61674	vfs.zfs.l2arc_write_boost	
221-12	61674-61675	=	
221-13	61675-61684	268435456	
221-14	61685-61686	#	
221-15	61687-61688	(	
221-16	61688-61695	default	
221-17	61696-61703	8388608	
221-18	61703-61704	)	
221-19	61705-61706	#	
221-20	61706-61729	vfs.zfs.l2arc_write_max	
221-21	61729-61730	=	
221-22	61730-61739	268435456	
221-23	61740-61741	#	
221-24	61742-61743	(	
221-25	61743-61750	default	
221-26	61751-61758	8388608	
221-27	61758-61759	)	
221-28	61760-61761	#	
221-29	61762-61769	General	
221-30	61770-61778	Security	
221-31	61779-61782	and	
221-32	61783-61786	DoS	
221-33	61787-61797	mitigation	
221-34	61798-61799	#	
221-35	61799-61818	hw.hn.enable_udp4cs	
221-36	61818-61819	=	
221-37	61819-61820	1	
221-38	61821-61822	#	
221-39	61823-61830	Offload	
221-40	61831-61834	UDP	
221-41	61834-61835	/	
221-42	61835-61839	IPv4	
221-43	61840-61848	checksum	
221-44	61849-61851	to	
221-45	61852-61859	network	
221-46	61860-61864	card	
221-47	61865-61866	(	
221-48	61866-61873	default	
221-49	61874-61875	1	
221-50	61875-61876	)	
221-51	61877-61878	#	
221-52	61878-61897	hw.hn.enable_udp6cs	
221-53	61897-61898	=	
221-54	61898-61899	1	
221-55	61900-61901	#	
221-56	61902-61909	Offload	
221-57	61910-61913	UDP	
221-58	61913-61914	/	
221-59	61914-61918	IPv6	
221-60	61919-61927	checksum	
221-61	61928-61930	to	
221-62	61931-61938	network	
221-63	61939-61943	card	
221-64	61944-61945	(	
221-65	61945-61952	default	
221-66	61953-61954	1	
221-67	61954-61955	)	
221-68	61956-61957	#	
221-69	61957-61983	hw.ixl.enable_tx_fc_filter	
221-70	61983-61984	=	
221-71	61984-61985	1	
221-72	61986-61987	#	
221-73	61988-61994	filter	
221-74	61995-61998	out	
221-75	61999-62008	Ethertype	
221-76	62009-62015	0x8808	
221-77	62015-62016	,	
221-78	62017-62021	flow	
221-79	62022-62029	control	
221-80	62030-62036	frames	
221-81	62037-62038	(	
221-82	62038-62045	default	
221-83	62046-62047	1	
221-84	62047-62048	)	
221-85	62049-62050	#	
221-86	62050-62074	net.bpf.optimize_writers	
221-87	62074-62075	=	
221-88	62075-62076	0	
221-89	62077-62078	#	
221-90	62079-62082	bpf	
221-91	62083-62086	are	
221-92	62087-62097	write-only	
221-93	62098-62104	unless	
221-94	62105-62112	program	
221-95	62113-62123	explicitly	
221-96	62124-62133	specifies	
221-97	62134-62137	the	
221-98	62138-62142	read	
221-99	62143-62149	filter	
221-100	62150-62151	(	
221-101	62151-62158	default	
221-102	62159-62160	0	
221-103	62160-62161	)	
221-104	62162-62163	#	
221-105	62163-62186	net.bpf.zerocopy_enable	
221-106	62186-62187	=	
221-107	62187-62188	0	
221-108	62189-62190	#	
221-109	62191-62200	zero-copy	
221-110	62201-62204	BPF	
221-111	62205-62212	buffers	
221-112	62212-62213	,	
221-113	62214-62220	breaks	
221-114	62221-62226	dhcpd	
221-115	62227-62228	!	

#Text=(default 0)
#Text=#net.inet.icmp.bmcastecho=0
#Text=# do not respond to ICMP packets sent to IP broadcast addresses (default 0)
#Text=#net.inet.icmp.log_redirect=0
#Text=# do not log redirected ICMP packet attempts (default 0)
#Text=#net.inet.icmp.maskfake=0
#Text=# do not fake reply to ICMP Address Mask Request packets (default 0)
#Text=#net.inet.icmp.maskrepl=0
#Text=# replies are not sent for ICMP address mask requests (default 0)
#Text=#net.inet.ip.accept_sourceroute=0
#Text=# drop source routed packets since they can not be trusted (default 0)
#Text=#net.inet.ip.portrange.randomized=1 # randomize outgoing upper ports (default 1)
#Text=#net.inet.ip.process_options=1
#Text=# process IP options in the incoming packets (default 1)
#Text=#net.inet.ip.sourceroute=0
#Text=# if source routed packets are accepted the route data is ignored (default 0)
#Text=#net.inet.ip.stealth=0
#Text=# do not reduce the TTL by one(1) when a packets goes through the firewall (default 0)
#Text=#net.inet.tcp.always_keepalive=1
#Text=# tcp keep alive detection for dead peers, keepalive can be spoofed (default 1)
#Text=#net.inet.tcp.ecn.enable=1
#Text=# Explicit Congestion Notification (ECN) allowed for incoming and outgoing connections (default 2)
#Text=#net.inet.tcp.keepintvl=75000
#Text=# time between tcp.keepcnt keep alive probes (default 75000, 75 secs)
#Text=#net.inet.tcp.maxtcptw=50000
#Text=# max number of tcp time_wait states for closing connections (default ~27767)
#Text=#net.inet.tcp.nolocaltimewait=0
#Text=# remove TIME_WAIT states for the loopback interface (default 0)
#Text=#net.inet.tcp.reass.maxqueuelen=100 # Max number of TCP Segments per Reassembly Queue (default 100)
#Text=#net.inet.tcp.rexmit_min=30
#Text=# reduce unnecessary TCP retransmissions by increasing timeout, min+slop (default 30 ms)
#Text=#net.inet.tcp.rexmit_slop=200
#Text=# reduce the TCP retransmit timer, min+slop (default 200ms)
#Text=#net.inet.udp.checksum=1
#Text=# hardware should generate UDP checksums (default 1)
#Text=#net.inet.udp.maxdgram=16384
#Text=# Maximum outgoing UDP datagram size to match MTU of localhost (default 9216)
#Text=#net.inet.sctp.blackhole=2
#Text=# drop stcp packets destined for closed ports (default 0)
#Text=# RACK TCP Stack: Netflix's TCP Recent ACKnowledgment (Recent ACK) and Tail
#Text=# Loss Probe (TLP) for improved Retransmit TimeOut response.
222-1	62229-62230	(	
222-2	62230-62237	default	
222-3	62238-62239	0	
222-4	62239-62240	)	
222-5	62241-62242	#	
222-6	62242-62266	net.inet.icmp.bmcastecho	
222-7	62266-62267	=	
222-8	62267-62268	0	
222-9	62269-62270	#	
222-10	62271-62273	do	
222-11	62274-62277	not	
222-12	62278-62285	respond	
222-13	62286-62288	to	
222-14	62289-62293	ICMP	
222-15	62294-62301	packets	
222-16	62302-62306	sent	
222-17	62307-62309	to	
222-18	62310-62312	IP	
222-19	62313-62322	broadcast	
222-20	62323-62332	addresses	
222-21	62333-62334	(	
222-22	62334-62341	default	
222-23	62342-62343	0	
222-24	62343-62344	)	
222-25	62345-62346	#	
222-26	62346-62372	net.inet.icmp.log_redirect	
222-27	62372-62373	=	
222-28	62373-62374	0	
222-29	62375-62376	#	
222-30	62377-62379	do	
222-31	62380-62383	not	
222-32	62384-62387	log	
222-33	62388-62398	redirected	
222-34	62399-62403	ICMP	
222-35	62404-62410	packet	
222-36	62411-62419	attempts	
222-37	62420-62421	(	
222-38	62421-62428	default	
222-39	62429-62430	0	
222-40	62430-62431	)	
222-41	62432-62433	#	
222-42	62433-62455	net.inet.icmp.maskfake	
222-43	62455-62456	=	
222-44	62456-62457	0	
222-45	62458-62459	#	
222-46	62460-62462	do	
222-47	62463-62466	not	
222-48	62467-62471	fake	
222-49	62472-62477	reply	
222-50	62478-62480	to	
222-51	62481-62485	ICMP	
222-52	62486-62493	Address	
222-53	62494-62498	Mask	
222-54	62499-62506	Request	
222-55	62507-62514	packets	
222-56	62515-62516	(	
222-57	62516-62523	default	
222-58	62524-62525	0	
222-59	62525-62526	)	
222-60	62527-62528	#	
222-61	62528-62550	net.inet.icmp.maskrepl	
222-62	62550-62551	=	
222-63	62551-62552	0	
222-64	62553-62554	#	
222-65	62555-62562	replies	
222-66	62563-62566	are	
222-67	62567-62570	not	
222-68	62571-62575	sent	
222-69	62576-62579	for	
222-70	62580-62584	ICMP	
222-71	62585-62592	address	
222-72	62593-62597	mask	
222-73	62598-62606	requests	
222-74	62607-62608	(	
222-75	62608-62615	default	
222-76	62616-62617	0	
222-77	62617-62618	)	
222-78	62619-62620	#	
222-79	62620-62650	net.inet.ip.accept_sourceroute	
222-80	62650-62651	=	
222-81	62651-62652	0	
222-82	62653-62654	#	
222-83	62655-62659	drop	
222-84	62660-62666	source	
222-85	62667-62673	routed	
222-86	62674-62681	packets	
222-87	62682-62687	since	
222-88	62688-62692	they	
222-89	62693-62696	can	
222-90	62697-62700	not	
222-91	62701-62703	be	
222-92	62704-62711	trusted	
222-93	62712-62713	(	
222-94	62713-62720	default	
222-95	62721-62722	0	
222-96	62722-62723	)	
222-97	62724-62725	#	
222-98	62725-62757	net.inet.ip.portrange.randomized	
222-99	62757-62758	=	
222-100	62758-62759	1	
222-101	62760-62761	#	
222-102	62762-62771	randomize	
222-103	62772-62780	outgoing	
222-104	62781-62786	upper	
222-105	62787-62792	ports	
222-106	62793-62794	(	
222-107	62794-62801	default	
222-108	62802-62803	1	
222-109	62803-62804	)	
222-110	62805-62806	#	
222-111	62806-62833	net.inet.ip.process_options	
222-112	62833-62834	=	
222-113	62834-62835	1	
222-114	62836-62837	#	
222-115	62838-62845	process	
222-116	62846-62848	IP	
222-117	62849-62856	options	
222-118	62857-62859	in	
222-119	62860-62863	the	
222-120	62864-62872	incoming	
222-121	62873-62880	packets	
222-122	62881-62882	(	
222-123	62882-62889	default	
222-124	62890-62891	1	
222-125	62891-62892	)	
222-126	62893-62894	#	
222-127	62894-62917	net.inet.ip.sourceroute	
222-128	62917-62918	=	
222-129	62918-62919	0	
222-130	62920-62921	#	
222-131	62922-62924	if	
222-132	62925-62931	source	
222-133	62932-62938	routed	
222-134	62939-62946	packets	
222-135	62947-62950	are	
222-136	62951-62959	accepted	
222-137	62960-62963	the	
222-138	62964-62969	route	
222-139	62970-62974	data	
222-140	62975-62977	is	
222-141	62978-62985	ignored	
222-142	62986-62987	(	
222-143	62987-62994	default	
222-144	62995-62996	0	
222-145	62996-62997	)	
222-146	62998-62999	#	
222-147	62999-63018	net.inet.ip.stealth	
222-148	63018-63019	=	
222-149	63019-63020	0	
222-150	63021-63022	#	
222-151	63023-63025	do	
222-152	63026-63029	not	
222-153	63030-63036	reduce	
222-154	63037-63040	the	
222-155	63041-63044	TTL	
222-156	63045-63047	by	
222-157	63048-63051	one	
222-158	63051-63052	(	
222-159	63052-63053	1	
222-160	63053-63054	)	
222-161	63055-63059	when	
222-162	63060-63061	a	
222-163	63062-63069	packets	
222-164	63070-63074	goes	
222-165	63075-63082	through	
222-166	63083-63086	the	
222-167	63087-63095	firewall	
222-168	63096-63097	(	
222-169	63097-63104	default	
222-170	63105-63106	0	
222-171	63106-63107	)	
222-172	63108-63109	#	
222-173	63109-63138	net.inet.tcp.always_keepalive	
222-174	63138-63139	=	
222-175	63139-63140	1	
222-176	63141-63142	#	
222-177	63143-63146	tcp	
222-178	63147-63151	keep	
222-179	63152-63157	alive	
222-180	63158-63167	detection	
222-181	63168-63171	for	
222-182	63172-63176	dead	
222-183	63177-63182	peers	
222-184	63182-63183	,	
222-185	63184-63193	keepalive	
222-186	63194-63197	can	
222-187	63198-63200	be	
222-188	63201-63208	spoofed	
222-189	63209-63210	(	
222-190	63210-63217	default	
222-191	63218-63219	1	
222-192	63219-63220	)	
222-193	63221-63222	#	
222-194	63222-63245	net.inet.tcp.ecn.enable	
222-195	63245-63246	=	
222-196	63246-63247	1	
222-197	63248-63249	#	
222-198	63250-63258	Explicit	
222-199	63259-63269	Congestion	
222-200	63270-63282	Notification	
222-201	63283-63284	(	
222-202	63284-63287	ECN	
222-203	63287-63288	)	
222-204	63289-63296	allowed	
222-205	63297-63300	for	
222-206	63301-63309	incoming	
222-207	63310-63313	and	
222-208	63314-63322	outgoing	
222-209	63323-63334	connections	
222-210	63335-63336	(	
222-211	63336-63343	default	
222-212	63344-63345	2	
222-213	63345-63346	)	
222-214	63347-63348	#	
222-215	63348-63370	net.inet.tcp.keepintvl	
222-216	63370-63371	=	
222-217	63371-63376	75000	
222-218	63377-63378	#	
222-219	63379-63383	time	
222-220	63384-63391	between	
222-221	63392-63403	tcp.keepcnt	
222-222	63404-63408	keep	
222-223	63409-63414	alive	
222-224	63415-63421	probes	
222-225	63422-63423	(	
222-226	63423-63430	default	
222-227	63431-63436	75000	
222-228	63436-63437	,	
222-229	63438-63440	75	
222-230	63441-63445	secs	
222-231	63445-63446	)	
222-232	63447-63448	#	
222-233	63448-63469	net.inet.tcp.maxtcptw	
222-234	63469-63470	=	
222-235	63470-63475	50000	
222-236	63476-63477	#	
222-237	63478-63481	max	
222-238	63482-63488	number	
222-239	63489-63491	of	
222-240	63492-63495	tcp	
222-241	63496-63505	time_wait	
222-242	63506-63512	states	
222-243	63513-63516	for	
222-244	63517-63524	closing	
222-245	63525-63536	connections	
222-246	63537-63538	(	
222-247	63538-63545	default	
222-248	63546-63547	~	
222-249	63547-63552	27767	
222-250	63552-63553	)	
222-251	63554-63555	#	
222-252	63555-63583	net.inet.tcp.nolocaltimewait	
222-253	63583-63584	=	
222-254	63584-63585	0	
222-255	63586-63587	#	
222-256	63588-63594	remove	
222-257	63595-63604	TIME_WAIT	
222-258	63605-63611	states	
222-259	63612-63615	for	
222-260	63616-63619	the	
222-261	63620-63628	loopback	
222-262	63629-63638	interface	
222-263	63639-63640	(	
222-264	63640-63647	default	
222-265	63648-63649	0	
222-266	63649-63650	)	
222-267	63651-63652	#	
222-268	63652-63682	net.inet.tcp.reass.maxqueuelen	
222-269	63682-63683	=	
222-270	63683-63686	100	
222-271	63687-63688	#	
222-272	63689-63692	Max	
222-273	63693-63699	number	
222-274	63700-63702	of	
222-275	63703-63706	TCP	
222-276	63707-63715	Segments	
222-277	63716-63719	per	
222-278	63720-63730	Reassembly	
222-279	63731-63736	Queue	
222-280	63737-63738	(	
222-281	63738-63745	default	
222-282	63746-63749	100	
222-283	63749-63750	)	
222-284	63751-63752	#	
222-285	63752-63775	net.inet.tcp.rexmit_min	
222-286	63775-63776	=	
222-287	63776-63778	30	
222-288	63779-63780	#	
222-289	63781-63787	reduce	
222-290	63788-63799	unnecessary	
222-291	63800-63803	TCP	
222-292	63804-63819	retransmissions	
222-293	63820-63822	by	
222-294	63823-63833	increasing	
222-295	63834-63841	timeout	
222-296	63841-63842	,	
222-297	63843-63846	min	
222-298	63846-63847	+	
222-299	63847-63851	slop	
222-300	63852-63853	(	
222-301	63853-63860	default	
222-302	63861-63863	30	
222-303	63864-63866	ms	
222-304	63866-63867	)	
222-305	63868-63869	#	
222-306	63869-63893	net.inet.tcp.rexmit_slop	
222-307	63893-63894	=	
222-308	63894-63897	200	
222-309	63898-63899	#	
222-310	63900-63906	reduce	
222-311	63907-63910	the	
222-312	63911-63914	TCP	
222-313	63915-63925	retransmit	
222-314	63926-63931	timer	
222-315	63931-63932	,	
222-316	63933-63936	min	
222-317	63936-63937	+	
222-318	63937-63941	slop	
222-319	63942-63943	(	
222-320	63943-63950	default	
222-321	63951-63956	200ms	
222-322	63956-63957	)	
222-323	63958-63959	#	
222-324	63959-63980	net.inet.udp.checksum	
222-325	63980-63981	=	
222-326	63981-63982	1	
222-327	63983-63984	#	
222-328	63985-63993	hardware	
222-329	63994-64000	should	
222-330	64001-64009	generate	
222-331	64010-64013	UDP	
222-332	64014-64023	checksums	
222-333	64024-64025	(	
222-334	64025-64032	default	
222-335	64033-64034	1	
222-336	64034-64035	)	
222-337	64036-64037	#	
222-338	64037-64058	net.inet.udp.maxdgram	
222-339	64058-64059	=	
222-340	64059-64064	16384	
222-341	64065-64066	#	
222-342	64067-64074	Maximum	
222-343	64075-64083	outgoing	
222-344	64084-64087	UDP	
222-345	64088-64096	datagram	
222-346	64097-64101	size	
222-347	64102-64104	to	
222-348	64105-64110	match	
222-349	64111-64114	MTU	
222-350	64115-64117	of	
222-351	64118-64127	localhost	
222-352	64128-64129	(	
222-353	64129-64136	default	
222-354	64137-64141	9216	
222-355	64141-64142	)	
222-356	64143-64144	#	
222-357	64144-64167	net.inet.sctp.blackhole	
222-358	64167-64168	=	
222-359	64168-64169	2	
222-360	64170-64171	#	
222-361	64172-64176	drop	
222-362	64177-64181	stcp	
222-363	64182-64189	packets	
222-364	64190-64198	destined	
222-365	64199-64202	for	
222-366	64203-64209	closed	
222-367	64210-64215	ports	
222-368	64216-64217	(	
222-369	64217-64224	default	
222-370	64225-64226	0	
222-371	64226-64227	)	
222-372	64228-64229	#	
222-373	64230-64234	RACK	
222-374	64235-64238	TCP	
222-375	64239-64244	Stack	
222-376	64244-64245	:	
222-377	64246-64255	Netflix's	
222-378	64256-64259	TCP	
222-379	64260-64266	Recent	
222-380	64267-64281	ACKnowledgment	
222-381	64282-64283	(	
222-382	64283-64289	Recent	
222-383	64290-64293	ACK	
222-384	64293-64294	)	
222-385	64295-64298	and	
222-386	64299-64303	Tail	
222-387	64304-64305	#	
222-388	64306-64310	Loss	
222-389	64311-64316	Probe	
222-390	64317-64318	(	
222-391	64318-64321	TLP	
222-392	64321-64322	)	
222-393	64323-64326	for	
222-394	64327-64335	improved	
222-395	64336-64346	Retransmit	
222-396	64347-64354	TimeOut	
222-397	64355-64363	response	
222-398	64363-64364	.	

#Text=RACK uses the
#Text=# notion of time, instead of packet or sequence counts, to detect TCP losses
#Text=# for connections supporting per-packet timestamps and selective acknowledgment
#Text=# (SACK).
223-1	64365-64369	RACK	
223-2	64370-64374	uses	
223-3	64375-64378	the	
223-4	64379-64380	#	
223-5	64381-64387	notion	
223-6	64388-64390	of	
223-7	64391-64395	time	
223-8	64395-64396	,	
223-9	64397-64404	instead	
223-10	64405-64407	of	
223-11	64408-64414	packet	
223-12	64415-64417	or	
223-13	64418-64426	sequence	
223-14	64427-64433	counts	
223-15	64433-64434	,	
223-16	64435-64437	to	
223-17	64438-64444	detect	
223-18	64445-64448	TCP	
223-19	64449-64455	losses	
223-20	64456-64457	#	
223-21	64458-64461	for	
223-22	64462-64473	connections	
223-23	64474-64484	supporting	
223-24	64485-64495	per-packet	
223-25	64496-64506	timestamps	
223-26	64507-64510	and	
223-27	64511-64520	selective	
223-28	64521-64535	acknowledgment	
223-29	64536-64537	#	
223-30	64538-64539	(	
223-31	64539-64543	SACK	
223-32	64543-64544	)	
223-33	64544-64545	.	

#Text=Connections that do not support SACK are automatically serviced by
#Text=# the default, base FreeBSD TCP stack.
224-1	64546-64557	Connections	
224-2	64558-64562	that	
224-3	64563-64565	do	
224-4	64566-64569	not	
224-5	64570-64577	support	
224-6	64578-64582	SACK	
224-7	64583-64586	are	
224-8	64587-64600	automatically	
224-9	64601-64609	serviced	
224-10	64610-64612	by	
224-11	64613-64614	#	
224-12	64615-64618	the	
224-13	64619-64626	default	
224-14	64626-64627	,	
224-15	64628-64632	base	
224-16	64633-64640	FreeBSD	
224-17	64641-64644	TCP	
224-18	64645-64650	stack	
224-19	64650-64651	.	

#Text=Use "sysctl
#Text=# net.inet.tcp.functions_available" to show available TCP stacks loaded by the
#Text=# kernel.
225-1	64652-64655	Use	
225-2	64656-64657	"	
225-3	64657-64663	sysctl	
225-4	64664-64665	#	
225-5	64666-64698	net.inet.tcp.functions_available	
225-6	64698-64699	"	
225-7	64700-64702	to	
225-8	64703-64707	show	
225-9	64708-64717	available	
225-10	64718-64721	TCP	
225-11	64722-64728	stacks	
225-12	64729-64735	loaded	
225-13	64736-64738	by	
225-14	64739-64742	the	
225-15	64743-64744	#	
225-16	64745-64751	kernel	
225-17	64751-64752	.	

#Text=FYI: introduced in FreeBSD 12; the kernel must be rebuilt with
#Text=# additional TCP stacks (makeoptions WITH_EXTRA_TCP_STACKS=1) and the high
#Text=# precision TCP timer (options TCPHPTS).
#Text=# https://tools.ietf.org/html/draft-ietf-tcpm-rack-04
#Text=#net.inet.tcp.functions_default=rack
#Text=# (default freebsd)
#Text=# RACK TCP Stack: The method used for Tail Loss Probe (TLP) calculations.
#Text=# https://tools.ietf.org/html/draft-ietf-tcpm-rack-04
#Text=# FYI: Needs Testing
#Text=#net.inet.tcp.rack.tlpmethod=3
#Text=# (default 2, 0=no-de-ack-comp, 1=ID, 2=2.1, 3=2.2)
#Text=# RACK TCP Stack: send a Reset (RST) packet as soon as all data is sent and,
#Text=# perhaps, before all pending data is acknowledged (ACK) by the client.
226-1	64753-64756	FYI	
226-2	64756-64757	:	
226-3	64758-64768	introduced	
226-4	64769-64771	in	
226-5	64772-64779	FreeBSD	
226-6	64780-64782	12	
226-7	64782-64783	;	
226-8	64784-64787	the	
226-9	64788-64794	kernel	
226-10	64795-64799	must	
226-11	64800-64802	be	
226-12	64803-64810	rebuilt	
226-13	64811-64815	with	
226-14	64816-64817	#	
226-15	64818-64828	additional	
226-16	64829-64832	TCP	
226-17	64833-64839	stacks	
226-18	64840-64841	(	
226-19	64841-64852	makeoptions	
226-20	64853-64874	WITH_EXTRA_TCP_STACKS	
226-21	64874-64875	=	
226-22	64875-64876	1	
226-23	64876-64877	)	
226-24	64878-64881	and	
226-25	64882-64885	the	
226-26	64886-64890	high	
226-27	64891-64892	#	
226-28	64893-64902	precision	
226-29	64903-64906	TCP	
226-30	64907-64912	timer	
226-31	64913-64914	(	
226-32	64914-64921	options	
226-33	64922-64929	TCPHPTS	
226-34	64929-64930	)	
226-35	64930-64931	.	
226-36	64932-64933	#	
226-37	64934-64939	https	
226-38	64939-64940	:	
226-39	64940-64941	/	
226-40	64941-64942	/	
226-41	64942-64956	tools.ietf.org	
226-42	64956-64957	/	
226-43	64957-64961	html	
226-44	64961-64962	/	
226-45	64962-64982	draft-ietf-tcpm-rack	
226-46	64982-64983	-	
226-47	64983-64985	04	
226-48	64986-64987	#	
226-49	64987-65017	net.inet.tcp.functions_default	
226-50	65017-65018	=	
226-51	65018-65022	rack	
226-52	65023-65024	#	
226-53	65025-65026	(	
226-54	65026-65033	default	
226-55	65034-65041	freebsd	
226-56	65041-65042	)	
226-57	65043-65044	#	
226-58	65045-65049	RACK	
226-59	65050-65053	TCP	
226-60	65054-65059	Stack	
226-61	65059-65060	:	
226-62	65061-65064	The	
226-63	65065-65071	method	
226-64	65072-65076	used	
226-65	65077-65080	for	
226-66	65081-65085	Tail	
226-67	65086-65090	Loss	
226-68	65091-65096	Probe	
226-69	65097-65098	(	
226-70	65098-65101	TLP	
226-71	65101-65102	)	
226-72	65103-65115	calculations	
226-73	65115-65116	.	
226-74	65117-65118	#	
226-75	65119-65124	https	
226-76	65124-65125	:	
226-77	65125-65126	/	
226-78	65126-65127	/	
226-79	65127-65141	tools.ietf.org	
226-80	65141-65142	/	
226-81	65142-65146	html	
226-82	65146-65147	/	
226-83	65147-65167	draft-ietf-tcpm-rack	
226-84	65167-65168	-	
226-85	65168-65170	04	
226-86	65171-65172	#	
226-87	65173-65176	FYI	
226-88	65176-65177	:	
226-89	65178-65183	Needs	
226-90	65184-65191	Testing	
226-91	65192-65193	#	
226-92	65193-65220	net.inet.tcp.rack.tlpmethod	
226-93	65220-65221	=	
226-94	65221-65222	3	
226-95	65223-65224	#	
226-96	65225-65226	(	
226-97	65226-65233	default	
226-98	65234-65235	2	
226-99	65235-65236	,	
226-100	65237-65238	0	
226-101	65238-65239	=	
226-102	65239-65253	no-de-ack-comp	
226-103	65253-65254	,	
226-104	65255-65256	1	
226-105	65256-65257	=	
226-106	65257-65259	ID	
226-107	65259-65260	,	
226-108	65261-65262	2	
226-109	65262-65263	=	
226-110	65263-65266	2.1	
226-111	65266-65267	,	
226-112	65268-65269	3	
226-113	65269-65270	=	
226-114	65270-65273	2.2	
226-115	65273-65274	)	
226-116	65275-65276	#	
226-117	65277-65281	RACK	
226-118	65282-65285	TCP	
226-119	65286-65291	Stack	
226-120	65291-65292	:	
226-121	65293-65297	send	
226-122	65298-65299	a	
226-123	65300-65305	Reset	
226-124	65306-65307	(	
226-125	65307-65310	RST	
226-126	65310-65311	)	
226-127	65312-65318	packet	
226-128	65319-65321	as	
226-129	65322-65326	soon	
226-130	65327-65329	as	
226-131	65330-65333	all	
226-132	65334-65338	data	
226-133	65339-65341	is	
226-134	65342-65346	sent	
226-135	65347-65350	and	
226-136	65350-65351	,	
226-137	65352-65353	#	
226-138	65354-65361	perhaps	
226-139	65361-65362	,	
226-140	65363-65369	before	
226-141	65370-65373	all	
226-142	65374-65381	pending	
226-143	65382-65386	data	
226-144	65387-65389	is	
226-145	65390-65402	acknowledged	
226-146	65403-65404	(	
226-147	65404-65407	ACK	
226-148	65407-65408	)	
226-149	65409-65411	by	
226-150	65412-65415	the	
226-151	65416-65422	client	
226-152	65422-65423	.	

#Text=This
#Text=# may help on busy servers to close connections quickly thus freeing up
#Text=# resources.
#Text=# FYI: Needs Testing
#Text=#net.inet.tcp.rack.data_after_close=0
#Text=# (default 1)
#Text=# H-TCP congestion control: The Hamilton TCP (HighSpeed-TCP) algorithm is a
#Text=# packet loss based congestion control and is more aggressive pushing up to max
#Text=# bandwidth (total BDP) and favors hosts with lower TTL / VARTTL than
#Text=# "newreno".
227-1	65424-65428	This	
227-2	65429-65430	#	
227-3	65431-65434	may	
227-4	65435-65439	help	
227-5	65440-65442	on	
227-6	65443-65447	busy	
227-7	65448-65455	servers	
227-8	65456-65458	to	
227-9	65459-65464	close	
227-10	65465-65476	connections	
227-11	65477-65484	quickly	
227-12	65485-65489	thus	
227-13	65490-65497	freeing	
227-14	65498-65500	up	
227-15	65501-65502	#	
227-16	65503-65512	resources	
227-17	65512-65513	.	
227-18	65514-65515	#	
227-19	65516-65519	FYI	
227-20	65519-65520	:	
227-21	65521-65526	Needs	
227-22	65527-65534	Testing	
227-23	65535-65536	#	
227-24	65536-65570	net.inet.tcp.rack.data_after_close	
227-25	65570-65571	=	
227-26	65571-65572	0	
227-27	65573-65574	#	
227-28	65575-65576	(	
227-29	65576-65583	default	
227-30	65584-65585	1	
227-31	65585-65586	)	
227-32	65587-65588	#	
227-33	65589-65594	H-TCP	
227-34	65595-65605	congestion	
227-35	65606-65613	control	
227-36	65613-65614	:	
227-37	65615-65618	The	
227-38	65619-65627	Hamilton	
227-39	65628-65631	TCP	
227-40	65632-65633	(	
227-41	65633-65646	HighSpeed-TCP	
227-42	65646-65647	)	
227-43	65648-65657	algorithm	
227-44	65658-65660	is	
227-45	65661-65662	a	
227-46	65663-65664	#	
227-47	65665-65671	packet	
227-48	65672-65676	loss	
227-49	65677-65682	based	
227-50	65683-65693	congestion	
227-51	65694-65701	control	
227-52	65702-65705	and	
227-53	65706-65708	is	
227-54	65709-65713	more	
227-55	65714-65724	aggressive	
227-56	65725-65732	pushing	
227-57	65733-65735	up	
227-58	65736-65738	to	
227-59	65739-65742	max	
227-60	65743-65744	#	
227-61	65745-65754	bandwidth	
227-62	65755-65756	(	
227-63	65756-65761	total	
227-64	65762-65765	BDP	
227-65	65765-65766	)	
227-66	65767-65770	and	
227-67	65771-65777	favors	
227-68	65778-65783	hosts	
227-69	65784-65788	with	
227-70	65789-65794	lower	
227-71	65795-65798	TTL	
227-72	65799-65800	/	
227-73	65801-65807	VARTTL	
227-74	65808-65812	than	
227-75	65813-65814	#	
227-76	65815-65816	"	
227-77	65816-65823	newreno	
227-78	65823-65824	"	
227-79	65824-65825	.	

#Text=The default congrestion control "newreno" works well in most
#Text=# conditions and enabling H-TCP may only gain a you few percentage points of
#Text=# throughput.
#Text=# http://www.sigcomm.org/sites/default/files/ccr/papers/2008/July/1384609-1384613.pdf
#Text=# make sure to also add 'cc_htcp_load="YES"' to /boot/loader.conf then check
#Text=# available congestion control options with "sysctl net.inet.tcp.cc.available"
#Text=#net.inet.tcp.cc.algorithm=htcp
#Text=# (default newreno)
#Text=# H-TCP congestion control: adaptive back off will increase bandwidth
#Text=# utilization by adjusting the additive-increase/multiplicative-decrease (AIMD)
#Text=# backoff parameter according to the amount of buffers available on the path.
#Text=# adaptive backoff ensures no queue along the path will remain completely empty
#Text=# after a packet loss event which increases buffer efficiency.
228-1	65826-65829	The	
228-2	65830-65837	default	
228-3	65838-65849	congrestion	
228-4	65850-65857	control	
228-5	65858-65859	"	
228-6	65859-65866	newreno	
228-7	65866-65867	"	
228-8	65868-65873	works	
228-9	65874-65878	well	
228-10	65879-65881	in	
228-11	65882-65886	most	
228-12	65887-65888	#	
228-13	65889-65899	conditions	
228-14	65900-65903	and	
228-15	65904-65912	enabling	
228-16	65913-65918	H-TCP	
228-17	65919-65922	may	
228-18	65923-65927	only	
228-19	65928-65932	gain	
228-20	65933-65934	a	
228-21	65935-65938	you	
228-22	65939-65942	few	
228-23	65943-65953	percentage	
228-24	65954-65960	points	
228-25	65961-65963	of	
228-26	65964-65965	#	
228-27	65966-65976	throughput	
228-28	65976-65977	.	
228-29	65978-65979	#	
228-30	65980-65984	http	
228-31	65984-65985	:	
228-32	65985-65986	/	
228-33	65986-65987	/	
228-34	65987-66002	www.sigcomm.org	
228-35	66002-66003	/	
228-36	66003-66008	sites	
228-37	66008-66009	/	
228-38	66009-66016	default	
228-39	66016-66017	/	
228-40	66017-66022	files	
228-41	66022-66023	/	
228-42	66023-66026	ccr	
228-43	66026-66027	/	
228-44	66027-66033	papers	
228-45	66033-66034	/	
228-46	66034-66038	2008	
228-47	66038-66039	/	
228-48	66039-66043	July	
228-49	66043-66044	/	
228-50	66044-66051	1384609	
228-51	66051-66052	-	
228-52	66052-66059	1384613	
228-53	66059-66060	.	
228-54	66060-66063	pdf	
228-55	66064-66065	#	
228-56	66066-66070	make	
228-57	66071-66075	sure	
228-58	66076-66078	to	
228-59	66079-66083	also	
228-60	66084-66087	add	
228-61	66088-66089	'	
228-62	66089-66101	cc_htcp_load	
228-63	66101-66102	=	
228-64	66102-66103	"	
228-65	66103-66106	YES	
228-66	66106-66107	"	
228-67	66107-66108	'	
228-68	66109-66111	to	
228-69	66112-66113	/	
228-70	66113-66117	boot	
228-71	66117-66118	/	
228-72	66118-66129	loader.conf	
228-73	66130-66134	then	
228-74	66135-66140	check	
228-75	66141-66142	#	
228-76	66143-66152	available	
228-77	66153-66163	congestion	
228-78	66164-66171	control	
228-79	66172-66179	options	
228-80	66180-66184	with	
228-81	66185-66186	"	
228-82	66186-66192	sysctl	
228-83	66193-66218	net.inet.tcp.cc.available	
228-84	66218-66219	"	
228-85	66220-66221	#	
228-86	66221-66246	net.inet.tcp.cc.algorithm	
228-87	66246-66247	=	
228-88	66247-66251	htcp	
228-89	66252-66253	#	
228-90	66254-66255	(	
228-91	66255-66262	default	
228-92	66263-66270	newreno	
228-93	66270-66271	)	
228-94	66272-66273	#	
228-95	66274-66279	H-TCP	
228-96	66280-66290	congestion	
228-97	66291-66298	control	
228-98	66298-66299	:	
228-99	66300-66308	adaptive	
228-100	66309-66313	back	
228-101	66314-66317	off	
228-102	66318-66322	will	
228-103	66323-66331	increase	
228-104	66332-66341	bandwidth	
228-105	66342-66343	#	
228-106	66344-66355	utilization	
228-107	66356-66358	by	
228-108	66359-66368	adjusting	
228-109	66369-66372	the	
228-110	66373-66390	additive-increase	
228-111	66390-66391	/	
228-112	66391-66414	multiplicative-decrease	
228-113	66415-66416	(	
228-114	66416-66420	AIMD	
228-115	66420-66421	)	
228-116	66422-66423	#	
228-117	66424-66431	backoff	
228-118	66432-66441	parameter	
228-119	66442-66451	according	
228-120	66452-66454	to	
228-121	66455-66458	the	
228-122	66459-66465	amount	
228-123	66466-66468	of	
228-124	66469-66476	buffers	
228-125	66477-66486	available	
228-126	66487-66489	on	
228-127	66490-66493	the	
228-128	66494-66498	path	
228-129	66498-66499	.	
228-130	66500-66501	#	
228-131	66502-66510	adaptive	
228-132	66511-66518	backoff	
228-133	66519-66526	ensures	
228-134	66527-66529	no	
228-135	66530-66535	queue	
228-136	66536-66541	along	
228-137	66542-66545	the	
228-138	66546-66550	path	
228-139	66551-66555	will	
228-140	66556-66562	remain	
228-141	66563-66573	completely	
228-142	66574-66579	empty	
228-143	66580-66581	#	
228-144	66582-66587	after	
228-145	66588-66589	a	
228-146	66590-66596	packet	
228-147	66597-66601	loss	
228-148	66602-66607	event	
228-149	66608-66613	which	
228-150	66614-66623	increases	
228-151	66624-66630	buffer	
228-152	66631-66641	efficiency	
228-153	66641-66642	.	

#Text=#net.inet.tcp.cc.htcp.adaptive_backoff=1
#Text=# (default 0 ; disabled)
#Text=# H-TCP congestion control: RTT scaling will increase the fairness between
#Text=# competing TCP flows traversing different RTT paths through a common
#Text=# bottleneck. rtt_scaling increases the Congestion Window Size (CWND)
#Text=# independent of path round-trip time (RTT) leading to lower latency for
#Text=# interactive sessions when the connection is saturated by bulk data transfers.
#Text=# Default is 0 (disabled)
#Text=#net.inet.tcp.cc.htcp.rtt_scaling=1
#Text=# (default 0 ; disabled)
#Text=# CAIA-Delay Gradient (CDG) is a hybrid TCP congestion control algorithm which
#Text=# reacts to both packet loss and inferred queuing delay.
229-1	66643-66644	#	
229-2	66644-66681	net.inet.tcp.cc.htcp.adaptive_backoff	
229-3	66681-66682	=	
229-4	66682-66683	1	
229-5	66684-66685	#	
229-6	66686-66687	(	
229-7	66687-66694	default	
229-8	66695-66696	0	
229-9	66697-66698	;	
229-10	66699-66707	disabled	
229-11	66707-66708	)	
229-12	66709-66710	#	
229-13	66711-66716	H-TCP	
229-14	66717-66727	congestion	
229-15	66728-66735	control	
229-16	66735-66736	:	
229-17	66737-66740	RTT	
229-18	66741-66748	scaling	
229-19	66749-66753	will	
229-20	66754-66762	increase	
229-21	66763-66766	the	
229-22	66767-66775	fairness	
229-23	66776-66783	between	
229-24	66784-66785	#	
229-25	66786-66795	competing	
229-26	66796-66799	TCP	
229-27	66800-66805	flows	
229-28	66806-66816	traversing	
229-29	66817-66826	different	
229-30	66827-66830	RTT	
229-31	66831-66836	paths	
229-32	66837-66844	through	
229-33	66845-66846	a	
229-34	66847-66853	common	
229-35	66854-66855	#	
229-36	66856-66866	bottleneck	
229-37	66866-66867	.	
229-38	66868-66879	rtt_scaling	
229-39	66880-66889	increases	
229-40	66890-66893	the	
229-41	66894-66904	Congestion	
229-42	66905-66911	Window	
229-43	66912-66916	Size	
229-44	66917-66918	(	
229-45	66918-66922	CWND	
229-46	66922-66923	)	
229-47	66924-66925	#	
229-48	66926-66937	independent	
229-49	66938-66940	of	
229-50	66941-66945	path	
229-51	66946-66956	round-trip	
229-52	66957-66961	time	
229-53	66962-66963	(	
229-54	66963-66966	RTT	
229-55	66966-66967	)	
229-56	66968-66975	leading	
229-57	66976-66978	to	
229-58	66979-66984	lower	
229-59	66985-66992	latency	
229-60	66993-66996	for	
229-61	66997-66998	#	
229-62	66999-67010	interactive	
229-63	67011-67019	sessions	
229-64	67020-67024	when	
229-65	67025-67028	the	
229-66	67029-67039	connection	
229-67	67040-67042	is	
229-68	67043-67052	saturated	
229-69	67053-67055	by	
229-70	67056-67060	bulk	
229-71	67061-67065	data	
229-72	67066-67075	transfers	
229-73	67075-67076	.	
229-74	67077-67078	#	
229-75	67079-67086	Default	
229-76	67087-67089	is	
229-77	67090-67091	0	
229-78	67092-67093	(	
229-79	67093-67101	disabled	
229-80	67101-67102	)	
229-81	67103-67104	#	
229-82	67104-67136	net.inet.tcp.cc.htcp.rtt_scaling	
229-83	67136-67137	=	
229-84	67137-67138	1	
229-85	67139-67140	#	
229-86	67141-67142	(	
229-87	67142-67149	default	
229-88	67150-67151	0	
229-89	67152-67153	;	
229-90	67154-67162	disabled	
229-91	67162-67163	)	
229-92	67164-67165	#	
229-93	67166-67176	CAIA-Delay	
229-94	67177-67185	Gradient	
229-95	67186-67187	(	
229-96	67187-67190	CDG	
229-97	67190-67191	)	
229-98	67192-67194	is	
229-99	67195-67196	a	
229-100	67197-67203	hybrid	
229-101	67204-67207	TCP	
229-102	67208-67218	congestion	
229-103	67219-67226	control	
229-104	67227-67236	algorithm	
229-105	67237-67242	which	
229-106	67243-67244	#	
229-107	67245-67251	reacts	
229-108	67252-67254	to	
229-109	67255-67259	both	
229-110	67260-67266	packet	
229-111	67267-67271	loss	
229-112	67272-67275	and	
229-113	67276-67284	inferred	
229-114	67285-67292	queuing	
229-115	67293-67298	delay	
229-116	67298-67299	.	

#Text=CDG attempts to
#Text=# operate as a temporal, delay-based algorithm where possible while utilizing
#Text=# heuristics to detect loss-based TCP cross traffic and compete effectively
#Text=# against other packet loss based congestion controls on the network.
#Text=# During time-based operation, CDG uses a delay-gradient based probabilistic
#Text=# backoff mechanism to infer non-congestion related packet losses.
230-1	67300-67303	CDG	
230-2	67304-67312	attempts	
230-3	67313-67315	to	
230-4	67316-67317	#	
230-5	67318-67325	operate	
230-6	67326-67328	as	
230-7	67329-67330	a	
230-8	67331-67339	temporal	
230-9	67339-67340	,	
230-10	67341-67352	delay-based	
230-11	67353-67362	algorithm	
230-12	67363-67368	where	
230-13	67369-67377	possible	
230-14	67378-67383	while	
230-15	67384-67393	utilizing	
230-16	67394-67395	#	
230-17	67396-67406	heuristics	
230-18	67407-67409	to	
230-19	67410-67416	detect	
230-20	67417-67427	loss-based	
230-21	67428-67431	TCP	
230-22	67432-67437	cross	
230-23	67438-67445	traffic	
230-24	67446-67449	and	
230-25	67450-67457	compete	
230-26	67458-67469	effectively	
230-27	67470-67471	#	
230-28	67472-67479	against	
230-29	67480-67485	other	
230-30	67486-67492	packet	
230-31	67493-67497	loss	
230-32	67498-67503	based	
230-33	67504-67514	congestion	
230-34	67515-67523	controls	
230-35	67524-67526	on	
230-36	67527-67530	the	
230-37	67531-67538	network	
230-38	67538-67539	.	
230-39	67540-67541	#	
230-40	67542-67548	During	
230-41	67549-67559	time-based	
230-42	67560-67569	operation	
230-43	67569-67570	,	
230-44	67571-67574	CDG	
230-45	67575-67579	uses	
230-46	67580-67581	a	
230-47	67582-67596	delay-gradient	
230-48	67597-67602	based	
230-49	67603-67616	probabilistic	
230-50	67617-67618	#	
230-51	67619-67626	backoff	
230-52	67627-67636	mechanism	
230-53	67637-67639	to	
230-54	67640-67645	infer	
230-55	67646-67660	non-congestion	
230-56	67661-67668	related	
230-57	67669-67675	packet	
230-58	67676-67682	losses	
230-59	67682-67683	.	

#Text=CDG
#Text=# periodically switches to loss-based operation when it detects a configurable
#Text=# number of consecutive delay-based backoffs have had no measurable effect.
#Text=# During packet loss-based operation, CDG essentially reverts to
#Text=# cc_newreno-like behaviour.
231-1	67684-67687	CDG	
231-2	67688-67689	#	
231-3	67690-67702	periodically	
231-4	67703-67711	switches	
231-5	67712-67714	to	
231-6	67715-67725	loss-based	
231-7	67726-67735	operation	
231-8	67736-67740	when	
231-9	67741-67743	it	
231-10	67744-67751	detects	
231-11	67752-67753	a	
231-12	67754-67766	configurable	
231-13	67767-67768	#	
231-14	67769-67775	number	
231-15	67776-67778	of	
231-16	67779-67790	consecutive	
231-17	67791-67802	delay-based	
231-18	67803-67811	backoffs	
231-19	67812-67816	have	
231-20	67817-67820	had	
231-21	67821-67823	no	
231-22	67824-67834	measurable	
231-23	67835-67841	effect	
231-24	67841-67842	.	
231-25	67843-67844	#	
231-26	67845-67851	During	
231-27	67852-67858	packet	
231-28	67859-67869	loss-based	
231-29	67870-67879	operation	
231-30	67879-67880	,	
231-31	67881-67884	CDG	
231-32	67885-67896	essentially	
231-33	67897-67904	reverts	
231-34	67905-67907	to	
231-35	67908-67909	#	
231-36	67910-67925	cc_newreno-like	
231-37	67926-67935	behaviour	
231-38	67935-67936	.	

#Text=CDG oscillates between temporal, delay-based
#Text=# operation and packet loss-based operation as dictated by network conditions.
#Text=# Load the kernel module by adding 'cc_cdg_load="YES"' to /boot/loader.conf and
#Text=# on next reboot verify the available congestion control options with "sysctl
#Text=# net.inet.tcp.cc.available"
#Text=# http://caia.swin.edu.au/cv/dahayes/content/networking2011-cdg-preprint.pdf
#Text=# http://caia.swin.edu.au/reports/110729A/CAIA-TR-110729A.pdf
#Text=# https://lwn.net/Articles/645115/
#Text=#net.inet.tcp.cc.algorithm=cdg
#Text=# (default newreno)
#Text=# CAIA-Delay Gradient (CDG) alpha_inc enables an experimental mode where the
#Text=# CDG window increase factor (alpha) is increased by one(1) MSS every alpha_inc
#Text=# RTTs during congestion avoidance mode.
232-1	67937-67940	CDG	
232-2	67941-67951	oscillates	
232-3	67952-67959	between	
232-4	67960-67968	temporal	
232-5	67968-67969	,	
232-6	67970-67981	delay-based	
232-7	67982-67983	#	
232-8	67984-67993	operation	
232-9	67994-67997	and	
232-10	67998-68004	packet	
232-11	68005-68015	loss-based	
232-12	68016-68025	operation	
232-13	68026-68028	as	
232-14	68029-68037	dictated	
232-15	68038-68040	by	
232-16	68041-68048	network	
232-17	68049-68059	conditions	
232-18	68059-68060	.	
232-19	68061-68062	#	
232-20	68063-68067	Load	
232-21	68068-68071	the	
232-22	68072-68078	kernel	
232-23	68079-68085	module	
232-24	68086-68088	by	
232-25	68089-68095	adding	
232-26	68096-68097	'	
232-27	68097-68108	cc_cdg_load	
232-28	68108-68109	=	
232-29	68109-68110	"	
232-30	68110-68113	YES	
232-31	68113-68114	"	
232-32	68114-68115	'	
232-33	68116-68118	to	
232-34	68119-68120	/	
232-35	68120-68124	boot	
232-36	68124-68125	/	
232-37	68125-68136	loader.conf	
232-38	68137-68140	and	
232-39	68141-68142	#	
232-40	68143-68145	on	
232-41	68146-68150	next	
232-42	68151-68157	reboot	
232-43	68158-68164	verify	
232-44	68165-68168	the	
232-45	68169-68178	available	
232-46	68179-68189	congestion	
232-47	68190-68197	control	
232-48	68198-68205	options	
232-49	68206-68210	with	
232-50	68211-68212	"	
232-51	68212-68218	sysctl	
232-52	68219-68220	#	
232-53	68221-68246	net.inet.tcp.cc.available	
232-54	68246-68247	"	
232-55	68248-68249	#	
232-56	68250-68254	http	
232-57	68254-68255	:	
232-58	68255-68256	/	
232-59	68256-68257	/	
232-60	68257-68273	caia.swin.edu.au	
232-61	68273-68274	/	
232-62	68274-68276	cv	
232-63	68276-68277	/	
232-64	68277-68284	dahayes	
232-65	68284-68285	/	
232-66	68285-68292	content	
232-67	68292-68293	/	
232-68	68293-68307	networking2011	
232-69	68307-68308	-	
232-70	68308-68324	cdg-preprint.pdf	
232-71	68325-68326	#	
232-72	68327-68331	http	
232-73	68331-68332	:	
232-74	68332-68333	/	
232-75	68333-68334	/	
232-76	68334-68350	caia.swin.edu.au	
232-77	68350-68351	/	
232-78	68351-68358	reports	
232-79	68358-68359	/	
232-80	68359-68366	110729A	
232-81	68366-68367	/	
232-82	68367-68374	CAIA-TR	
232-83	68374-68375	-	
232-84	68375-68386	110729A.pdf	
232-85	68387-68388	#	
232-86	68389-68394	https	
232-87	68394-68395	:	
232-88	68395-68396	/	
232-89	68396-68397	/	
232-90	68397-68404	lwn.net	
232-91	68404-68405	/	
232-92	68405-68413	Articles	
232-93	68413-68414	/	
232-94	68414-68420	645115	
232-95	68420-68421	/	
232-96	68422-68423	#	
232-97	68423-68448	net.inet.tcp.cc.algorithm	
232-98	68448-68449	=	
232-99	68449-68452	cdg	
232-100	68453-68454	#	
232-101	68455-68456	(	
232-102	68456-68463	default	
232-103	68464-68471	newreno	
232-104	68471-68472	)	
232-105	68473-68474	#	
232-106	68475-68485	CAIA-Delay	
232-107	68486-68494	Gradient	
232-108	68495-68496	(	
232-109	68496-68499	CDG	
232-110	68499-68500	)	
232-111	68501-68510	alpha_inc	
232-112	68511-68518	enables	
232-113	68519-68521	an	
232-114	68522-68534	experimental	
232-115	68535-68539	mode	
232-116	68540-68545	where	
232-117	68546-68549	the	
232-118	68550-68551	#	
232-119	68552-68555	CDG	
232-120	68556-68562	window	
232-121	68563-68571	increase	
232-122	68572-68578	factor	
232-123	68579-68580	(	
232-124	68580-68585	alpha	
232-125	68585-68586	)	
232-126	68587-68589	is	
232-127	68590-68599	increased	
232-128	68600-68602	by	
232-129	68603-68606	one	
232-130	68606-68607	(	
232-131	68607-68608	1	
232-132	68608-68609	)	
232-133	68610-68613	MSS	
232-134	68614-68619	every	
232-135	68620-68629	alpha_inc	
232-136	68630-68631	#	
232-137	68632-68636	RTTs	
232-138	68637-68643	during	
232-139	68644-68654	congestion	
232-140	68655-68664	avoidance	
232-141	68665-68669	mode	
232-142	68669-68670	.	

#Text=Setting alpha_inc to 1 results in the
#Text=# most aggressive growth of the window increase factor over time while a higher
#Text=# alpha_inc value results in slower growth.
233-1	68671-68678	Setting	
233-2	68679-68688	alpha_inc	
233-3	68689-68691	to	
233-4	68692-68693	1	
233-5	68694-68701	results	
233-6	68702-68704	in	
233-7	68705-68708	the	
233-8	68709-68710	#	
233-9	68711-68715	most	
233-10	68716-68726	aggressive	
233-11	68727-68733	growth	
233-12	68734-68736	of	
233-13	68737-68740	the	
233-14	68741-68747	window	
233-15	68748-68756	increase	
233-16	68757-68763	factor	
233-17	68764-68768	over	
233-18	68769-68773	time	
233-19	68774-68779	while	
233-20	68780-68781	a	
233-21	68782-68788	higher	
233-22	68789-68790	#	
233-23	68791-68800	alpha_inc	
233-24	68801-68806	value	
233-25	68807-68814	results	
233-26	68815-68817	in	
233-27	68818-68824	slower	
233-28	68825-68831	growth	
233-29	68831-68832	.	

#Text=#net.inet.tcp.cc.cdg.alpha_inc=1
#Text=# (default 0, experimental mode disabled)
#Text=# CUBIC congestion control: is a time based congestion control algorithm
#Text=# optimized for high speed, high latency networks and a decent choice for
#Text=# networks with minimal packet loss; most hard wired internet connections are
#Text=# in this catagory.
234-1	68833-68834	#	
234-2	68834-68863	net.inet.tcp.cc.cdg.alpha_inc	
234-3	68863-68864	=	
234-4	68864-68865	1	
234-5	68866-68867	#	
234-6	68868-68869	(	
234-7	68869-68876	default	
234-8	68877-68878	0	
234-9	68878-68879	,	
234-10	68880-68892	experimental	
234-11	68893-68897	mode	
234-12	68898-68906	disabled	
234-13	68906-68907	)	
234-14	68908-68909	#	
234-15	68910-68915	CUBIC	
234-16	68916-68926	congestion	
234-17	68927-68934	control	
234-18	68934-68935	:	
234-19	68936-68938	is	
234-20	68939-68940	a	
234-21	68941-68945	time	
234-22	68946-68951	based	
234-23	68952-68962	congestion	
234-24	68963-68970	control	
234-25	68971-68980	algorithm	
234-26	68981-68982	#	
234-27	68983-68992	optimized	
234-28	68993-68996	for	
234-29	68997-69001	high	
234-30	69002-69007	speed	
234-31	69007-69008	,	
234-32	69009-69013	high	
234-33	69014-69021	latency	
234-34	69022-69030	networks	
234-35	69031-69034	and	
234-36	69035-69036	a	
234-37	69037-69043	decent	
234-38	69044-69050	choice	
234-39	69051-69054	for	
234-40	69055-69056	#	
234-41	69057-69065	networks	
234-42	69066-69070	with	
234-43	69071-69078	minimal	
234-44	69079-69085	packet	
234-45	69086-69090	loss	
234-46	69090-69091	;	
234-47	69092-69096	most	
234-48	69097-69101	hard	
234-49	69102-69107	wired	
234-50	69108-69116	internet	
234-51	69117-69128	connections	
234-52	69129-69132	are	
234-53	69133-69134	#	
234-54	69135-69137	in	
234-55	69138-69142	this	
234-56	69143-69151	catagory	
234-57	69151-69152	.	

#Text=CUBIC can improve startup throughput of bulk data transfers
#Text=# and burst transfers of a web server by up to 2x compared to packet loss based
#Text=# algorithms like newreno and H-TCP.
235-1	69153-69158	CUBIC	
235-2	69159-69162	can	
235-3	69163-69170	improve	
235-4	69171-69178	startup	
235-5	69179-69189	throughput	
235-6	69190-69192	of	
235-7	69193-69197	bulk	
235-8	69198-69202	data	
235-9	69203-69212	transfers	
235-10	69213-69214	#	
235-11	69215-69218	and	
235-12	69219-69224	burst	
235-13	69225-69234	transfers	
235-14	69235-69237	of	
235-15	69238-69239	a	
235-16	69240-69243	web	
235-17	69244-69250	server	
235-18	69251-69253	by	
235-19	69254-69256	up	
235-20	69257-69259	to	
235-21	69260-69262	2x	
235-22	69263-69271	compared	
235-23	69272-69274	to	
235-24	69275-69281	packet	
235-25	69282-69286	loss	
235-26	69287-69292	based	
235-27	69293-69294	#	
235-28	69295-69305	algorithms	
235-29	69306-69310	like	
235-30	69311-69318	newreno	
235-31	69319-69322	and	
235-32	69323-69328	H-TCP	
235-33	69328-69329	.	

#Text=FreeBSD 11.1 updated CUBIC code to match
#Text=# the 2016 RFC including the slow start algorithm, HyStart.
236-1	69330-69337	FreeBSD	
236-2	69338-69342	11.1	
236-3	69343-69350	updated	
236-4	69351-69356	CUBIC	
236-5	69357-69361	code	
236-6	69362-69364	to	
236-7	69365-69370	match	
236-8	69371-69372	#	
236-9	69373-69376	the	
236-10	69377-69381	2016	
236-11	69382-69385	RFC	
236-12	69386-69395	including	
236-13	69396-69399	the	
236-14	69400-69404	slow	
236-15	69405-69410	start	
236-16	69411-69420	algorithm	
236-17	69420-69421	,	
236-18	69422-69429	HyStart	
236-19	69429-69430	.	

#Text=CUBIC Hystart uses
#Text=# two heuristics, based on RTT, to exit slow start earlier, but before losses
#Text=# start to occur.
237-1	69431-69436	CUBIC	
237-2	69437-69444	Hystart	
237-3	69445-69449	uses	
237-4	69450-69451	#	
237-5	69452-69455	two	
237-6	69456-69466	heuristics	
237-7	69466-69467	,	
237-8	69468-69473	based	
237-9	69474-69476	on	
237-10	69477-69480	RTT	
237-11	69480-69481	,	
237-12	69482-69484	to	
237-13	69485-69489	exit	
237-14	69490-69494	slow	
237-15	69495-69500	start	
237-16	69501-69508	earlier	
237-17	69508-69509	,	
237-18	69510-69513	but	
237-19	69514-69520	before	
237-20	69521-69527	losses	
237-21	69528-69529	#	
237-22	69530-69535	start	
237-23	69536-69538	to	
237-24	69539-69544	occur	
237-25	69544-69545	.	

#Text=Add 'cc_cubic_load="YES"' to /boot/loader.conf and check
#Text=# available congestion control options with "sysctl net.inet.tcp.cc.available".
#Text=# https://labs.ripe.net/Members/gih/bbr-tcp
#Text=#net.inet.tcp.cc.algorithm=cubic
#Text=# (default newreno)
#Text=# Firewall: Ip Forwarding to allow packets to traverse between interfaces and
#Text=# is used for firewalls, bridges and routers.
238-1	69546-69549	Add	
238-2	69550-69551	'	
238-3	69551-69564	cc_cubic_load	
238-4	69564-69565	=	
238-5	69565-69566	"	
238-6	69566-69569	YES	
238-7	69569-69570	"	
238-8	69570-69571	'	
238-9	69572-69574	to	
238-10	69575-69576	/	
238-11	69576-69580	boot	
238-12	69580-69581	/	
238-13	69581-69592	loader.conf	
238-14	69593-69596	and	
238-15	69597-69602	check	
238-16	69603-69604	#	
238-17	69605-69614	available	
238-18	69615-69625	congestion	
238-19	69626-69633	control	
238-20	69634-69641	options	
238-21	69642-69646	with	
238-22	69647-69648	"	
238-23	69648-69654	sysctl	
238-24	69655-69680	net.inet.tcp.cc.available	
238-25	69680-69681	"	
238-26	69681-69682	.	
238-27	69683-69684	#	
238-28	69685-69690	https	
238-29	69690-69691	:	
238-30	69691-69692	/	
238-31	69692-69693	/	
238-32	69693-69706	labs.ripe.net	
238-33	69706-69707	/	
238-34	69707-69714	Members	
238-35	69714-69715	/	
238-36	69715-69718	gih	
238-37	69718-69719	/	
238-38	69719-69726	bbr-tcp	
238-39	69727-69728	#	
238-40	69728-69753	net.inet.tcp.cc.algorithm	
238-41	69753-69754	=	
238-42	69754-69759	cubic	
238-43	69760-69761	#	
238-44	69762-69763	(	
238-45	69763-69770	default	
238-46	69771-69778	newreno	
238-47	69778-69779	)	
238-48	69780-69781	#	
238-49	69782-69790	Firewall	
238-50	69790-69791	:	
238-51	69792-69794	Ip	
238-52	69795-69805	Forwarding	
238-53	69806-69808	to	
238-54	69809-69814	allow	
238-55	69815-69822	packets	
238-56	69823-69825	to	
238-57	69826-69834	traverse	
238-58	69835-69842	between	
238-59	69843-69853	interfaces	
238-60	69854-69857	and	
238-61	69858-69859	#	
238-62	69860-69862	is	
238-63	69863-69867	used	
238-64	69868-69871	for	
238-65	69872-69881	firewalls	
238-66	69881-69882	,	
238-67	69883-69890	bridges	
238-68	69891-69894	and	
238-69	69895-69902	routers	
238-70	69902-69903	.	

#Text=When fast IP forwarding is also
#Text=# enabled, IP packets are forwarded directly to the appropriate network
#Text=# interface with direct processing to completion, which greatly improves the
#Text=# throughput.
239-1	69904-69908	When	
239-2	69909-69913	fast	
239-3	69914-69916	IP	
239-4	69917-69927	forwarding	
239-5	69928-69930	is	
239-6	69931-69935	also	
239-7	69936-69937	#	
239-8	69938-69945	enabled	
239-9	69945-69946	,	
239-10	69947-69949	IP	
239-11	69950-69957	packets	
239-12	69958-69961	are	
239-13	69962-69971	forwarded	
239-14	69972-69980	directly	
239-15	69981-69983	to	
239-16	69984-69987	the	
239-17	69988-69999	appropriate	
239-18	70000-70007	network	
239-19	70008-70009	#	
239-20	70010-70019	interface	
239-21	70020-70024	with	
239-22	70025-70031	direct	
239-23	70032-70042	processing	
239-24	70043-70045	to	
239-25	70046-70056	completion	
239-26	70056-70057	,	
239-27	70058-70063	which	
239-28	70064-70071	greatly	
239-29	70072-70080	improves	
239-30	70081-70084	the	
239-31	70085-70086	#	
239-32	70087-70097	throughput	
239-33	70097-70098	.	

#Text=All packets for local IP addresses, non-unicast, or with IP
#Text=# options are handled by the normal IP input processing path.
240-1	70099-70102	All	
240-2	70103-70110	packets	
240-3	70111-70114	for	
240-4	70115-70120	local	
240-5	70121-70123	IP	
240-6	70124-70133	addresses	
240-7	70133-70134	,	
240-8	70135-70146	non-unicast	
240-9	70146-70147	,	
240-10	70148-70150	or	
240-11	70151-70155	with	
240-12	70156-70158	IP	
240-13	70159-70160	#	
240-14	70161-70168	options	
240-15	70169-70172	are	
240-16	70173-70180	handled	
240-17	70181-70183	by	
240-18	70184-70187	the	
240-19	70188-70194	normal	
240-20	70195-70197	IP	
240-21	70198-70203	input	
240-22	70204-70214	processing	
240-23	70215-70219	path	
240-24	70219-70220	.	

#Text=All features of
#Text=# the normal (slow) IP forwarding path are supported by fast forwarding
#Text=# including firewall (through pfil(9) hooks) checking, except ipsec tunnel
#Text=# brokering.
241-1	70221-70224	All	
241-2	70225-70233	features	
241-3	70234-70236	of	
241-4	70237-70238	#	
241-5	70239-70242	the	
241-6	70243-70249	normal	
241-7	70250-70251	(	
241-8	70251-70255	slow	
241-9	70255-70256	)	
241-10	70257-70259	IP	
241-11	70260-70270	forwarding	
241-12	70271-70275	path	
241-13	70276-70279	are	
241-14	70280-70289	supported	
241-15	70290-70292	by	
241-16	70293-70297	fast	
241-17	70298-70308	forwarding	
241-18	70309-70310	#	
241-19	70311-70320	including	
241-20	70321-70329	firewall	
241-21	70330-70331	(	
241-22	70331-70338	through	
241-23	70339-70343	pfil	
241-24	70343-70344	(	
241-25	70344-70345	9	
241-26	70345-70346	)	
241-27	70347-70352	hooks	
241-28	70352-70353	)	
241-29	70354-70362	checking	
241-30	70362-70363	,	
241-31	70364-70370	except	
241-32	70371-70376	ipsec	
241-33	70377-70383	tunnel	
241-34	70384-70385	#	
241-35	70386-70395	brokering	
241-36	70395-70396	.	

#Text=The IP fast forwarding path does not generate ICMP redirect or
#Text=# source quench messages though.
242-1	70397-70400	The	
242-2	70401-70403	IP	
242-3	70404-70408	fast	
242-4	70409-70419	forwarding	
242-5	70420-70424	path	
242-6	70425-70429	does	
242-7	70430-70433	not	
242-8	70434-70442	generate	
242-9	70443-70447	ICMP	
242-10	70448-70456	redirect	
242-11	70457-70459	or	
242-12	70460-70461	#	
242-13	70462-70468	source	
242-14	70469-70475	quench	
242-15	70476-70484	messages	
242-16	70485-70491	though	
242-17	70491-70492	.	

#Text=Compared to normal IP forwarding, fast
#Text=# forwarding can give a speedup of 40 to 60% in packet forwarding performance
#Text=# which is great for interactive connections like online games or VOIP where
#Text=# low latency is critical.
243-1	70493-70501	Compared	
243-2	70502-70504	to	
243-3	70505-70511	normal	
243-4	70512-70514	IP	
243-5	70515-70525	forwarding	
243-6	70525-70526	,	
243-7	70527-70531	fast	
243-8	70532-70533	#	
243-9	70534-70544	forwarding	
243-10	70545-70548	can	
243-11	70549-70553	give	
243-12	70554-70555	a	
243-13	70556-70563	speedup	
243-14	70564-70566	of	
243-15	70567-70569	40	
243-16	70570-70572	to	
243-17	70573-70576	60%	
243-18	70577-70579	in	
243-19	70580-70586	packet	
243-20	70587-70597	forwarding	
243-21	70598-70609	performance	
243-22	70610-70611	#	
243-23	70612-70617	which	
243-24	70618-70620	is	
243-25	70621-70626	great	
243-26	70627-70630	for	
243-27	70631-70642	interactive	
243-28	70643-70654	connections	
243-29	70655-70659	like	
243-30	70660-70666	online	
243-31	70667-70672	games	
243-32	70673-70675	or	
243-33	70676-70680	VOIP	
243-34	70681-70686	where	
243-35	70687-70688	#	
243-36	70689-70692	low	
243-37	70693-70700	latency	
243-38	70701-70703	is	
243-39	70704-70712	critical	
243-40	70712-70713	.	

#Text=These options are already enabled if
#Text=# gateway_enable="YES" is in /etc/rc.conf
#Text=#net.inet.ip.forwarding=1
#Text=# (default 0)
#Text=#net.inet.ip.fastforwarding=1
#Text=# (default 0)
#Text=FreeBSD 11 enabled fastforwarding by default
#Text=#net.inet6.ip6.forwarding=1
#Text=# (default 0)
#Text=# Increase the localhost buffer space as well as the maximum incoming and
#Text=# outgoing raw IP datagram size to 16384 bytes (2^14 bytes) which is the same
#Text=# as the MTU for the localhost interface, "ifconfig lo0".
244-1	70714-70719	These	
244-2	70720-70727	options	
244-3	70728-70731	are	
244-4	70732-70739	already	
244-5	70740-70747	enabled	
244-6	70748-70750	if	
244-7	70751-70752	#	
244-8	70753-70767	gateway_enable	
244-9	70767-70768	=	
244-10	70768-70769	"	
244-11	70769-70772	YES	
244-12	70772-70773	"	
244-13	70774-70776	is	
244-14	70777-70779	in	
244-15	70780-70781	/	
244-16	70781-70784	etc	
244-17	70784-70785	/	
244-18	70785-70792	rc.conf	
244-19	70793-70794	#	
244-20	70794-70816	net.inet.ip.forwarding	
244-21	70816-70817	=	
244-22	70817-70818	1	
244-23	70819-70820	#	
244-24	70821-70822	(	
244-25	70822-70829	default	
244-26	70830-70831	0	
244-27	70831-70832	)	
244-28	70833-70834	#	
244-29	70834-70860	net.inet.ip.fastforwarding	
244-30	70860-70861	=	
244-31	70861-70862	1	
244-32	70863-70864	#	
244-33	70865-70866	(	
244-34	70866-70873	default	
244-35	70874-70875	0	
244-36	70875-70876	)	
244-37	70877-70884	FreeBSD	
244-38	70885-70887	11	
244-39	70888-70895	enabled	
244-40	70896-70910	fastforwarding	
244-41	70911-70913	by	
244-42	70914-70921	default	
244-43	70922-70923	#	
244-44	70923-70932	net.inet6	
244-45	70932-70933	.	
244-46	70933-70936	ip6	
244-47	70936-70937	.	
244-48	70937-70947	forwarding	
244-49	70947-70948	=	
244-50	70948-70949	1	
244-51	70950-70951	#	
244-52	70952-70953	(	
244-53	70953-70960	default	
244-54	70961-70962	0	
244-55	70962-70963	)	
244-56	70964-70965	#	
244-57	70966-70974	Increase	
244-58	70975-70978	the	
244-59	70979-70988	localhost	
244-60	70989-70995	buffer	
244-61	70996-71001	space	
244-62	71002-71004	as	
244-63	71005-71009	well	
244-64	71010-71012	as	
244-65	71013-71016	the	
244-66	71017-71024	maximum	
244-67	71025-71033	incoming	
244-68	71034-71037	and	
244-69	71038-71039	#	
244-70	71040-71048	outgoing	
244-71	71049-71052	raw	
244-72	71053-71055	IP	
244-73	71056-71064	datagram	
244-74	71065-71069	size	
244-75	71070-71072	to	
244-76	71073-71078	16384	
244-77	71079-71084	bytes	
244-78	71085-71086	(	
244-79	71086-71087	2	
244-80	71087-71088	^	
244-81	71088-71090	14	
244-82	71091-71096	bytes	
244-83	71096-71097	)	
244-84	71098-71103	which	
244-85	71104-71106	is	
244-86	71107-71110	the	
244-87	71111-71115	same	
244-88	71116-71117	#	
244-89	71118-71120	as	
244-90	71121-71124	the	
244-91	71125-71128	MTU	
244-92	71129-71132	for	
244-93	71133-71136	the	
244-94	71137-71146	localhost	
244-95	71147-71156	interface	
244-96	71156-71157	,	
244-97	71158-71159	"	
244-98	71159-71167	ifconfig	
244-99	71168-71171	lo0	
244-100	71171-71172	"	
244-101	71172-71173	.	

#Text=The larger buffer
#Text=# space should allow services which listen on localhost, like web or database
#Text=# servers, to more efficiently move data to the network buffers.
245-1	71174-71177	The	
245-2	71178-71184	larger	
245-3	71185-71191	buffer	
245-4	71192-71193	#	
245-5	71194-71199	space	
245-6	71200-71206	should	
245-7	71207-71212	allow	
245-8	71213-71221	services	
245-9	71222-71227	which	
245-10	71228-71234	listen	
245-11	71235-71237	on	
245-12	71238-71247	localhost	
245-13	71247-71248	,	
245-14	71249-71253	like	
245-15	71254-71257	web	
245-16	71258-71260	or	
245-17	71261-71269	database	
245-18	71270-71271	#	
245-19	71272-71279	servers	
245-20	71279-71280	,	
245-21	71281-71283	to	
245-22	71284-71288	more	
245-23	71289-71300	efficiently	
245-24	71301-71305	move	
245-25	71306-71310	data	
245-26	71311-71313	to	
245-27	71314-71317	the	
245-28	71318-71325	network	
245-29	71326-71333	buffers	
245-30	71333-71334	.	

#Text=#net.inet.raw.maxdgram=16384
#Text=# (default 9216)
#Text=#net.inet.raw.recvspace=16384
#Text=# (default 9216)
#Text=#net.local.stream.sendspace=16384
#Text=# (default 8192)
#Text=#net.local.stream.recvspace=16384
#Text=# (default 8192)
#Text=# The TCPT_REXMT timer is used to force retransmissions.
246-1	71335-71336	#	
246-2	71336-71357	net.inet.raw.maxdgram	
246-3	71357-71358	=	
246-4	71358-71363	16384	
246-5	71364-71365	#	
246-6	71366-71367	(	
246-7	71367-71374	default	
246-8	71375-71379	9216	
246-9	71379-71380	)	
246-10	71381-71382	#	
246-11	71382-71404	net.inet.raw.recvspace	
246-12	71404-71405	=	
246-13	71405-71410	16384	
246-14	71411-71412	#	
246-15	71413-71414	(	
246-16	71414-71421	default	
246-17	71422-71426	9216	
246-18	71426-71427	)	
246-19	71428-71429	#	
246-20	71429-71455	net.local.stream.sendspace	
246-21	71455-71456	=	
246-22	71456-71461	16384	
246-23	71462-71463	#	
246-24	71464-71465	(	
246-25	71465-71472	default	
246-26	71473-71477	8192	
246-27	71477-71478	)	
246-28	71479-71480	#	
246-29	71480-71506	net.local.stream.recvspace	
246-30	71506-71507	=	
246-31	71507-71512	16384	
246-32	71513-71514	#	
246-33	71515-71516	(	
246-34	71516-71523	default	
246-35	71524-71528	8192	
246-36	71528-71529	)	
246-37	71530-71531	#	
246-38	71532-71535	The	
246-39	71536-71546	TCPT_REXMT	
246-40	71547-71552	timer	
246-41	71553-71555	is	
246-42	71556-71560	used	
246-43	71561-71563	to	
246-44	71564-71569	force	
246-45	71570-71585	retransmissions	
246-46	71585-71586	.	

#Text=TCP has the
#Text=# TCPT_REXMT timer set whenever segments have been sent for which ACKs are
#Text=# expected, but not yet received.
247-1	71587-71590	TCP	
247-2	71591-71594	has	
247-3	71595-71598	the	
247-4	71599-71600	#	
247-5	71601-71611	TCPT_REXMT	
247-6	71612-71617	timer	
247-7	71618-71621	set	
247-8	71622-71630	whenever	
247-9	71631-71639	segments	
247-10	71640-71644	have	
247-11	71645-71649	been	
247-12	71650-71654	sent	
247-13	71655-71658	for	
247-14	71659-71664	which	
247-15	71665-71669	ACKs	
247-16	71670-71673	are	
247-17	71674-71675	#	
247-18	71676-71684	expected	
247-19	71684-71685	,	
247-20	71686-71689	but	
247-21	71690-71693	not	
247-22	71694-71697	yet	
247-23	71698-71706	received	
247-24	71706-71707	.	

#Text=If an ACK is received which advances
#Text=# tp->snd_una, then the retransmit timer is cleared (if there are no more
#Text=# outstanding segments) or reset to the base value (if there are more ACKs
#Text=# expected).
248-1	71708-71710	If	
248-2	71711-71713	an	
248-3	71714-71717	ACK	
248-4	71718-71720	is	
248-5	71721-71729	received	
248-6	71730-71735	which	
248-7	71736-71744	advances	
248-8	71745-71746	#	
248-9	71747-71749	tp	
248-10	71749-71750	-	
248-11	71750-71751	>	
248-12	71751-71758	snd_una	
248-13	71758-71759	,	
248-14	71760-71764	then	
248-15	71765-71768	the	
248-16	71769-71779	retransmit	
248-17	71780-71785	timer	
248-18	71786-71788	is	
248-19	71789-71796	cleared	
248-20	71797-71798	(	
248-21	71798-71800	if	
248-22	71801-71806	there	
248-23	71807-71810	are	
248-24	71811-71813	no	
248-25	71814-71818	more	
248-26	71819-71820	#	
248-27	71821-71832	outstanding	
248-28	71833-71841	segments	
248-29	71841-71842	)	
248-30	71843-71845	or	
248-31	71846-71851	reset	
248-32	71852-71854	to	
248-33	71855-71858	the	
248-34	71859-71863	base	
248-35	71864-71869	value	
248-36	71870-71871	(	
248-37	71871-71873	if	
248-38	71874-71879	there	
248-39	71880-71883	are	
248-40	71884-71888	more	
248-41	71889-71893	ACKs	
248-42	71894-71895	#	
248-43	71896-71904	expected	
248-44	71904-71905	)	
248-45	71905-71906	.	

#Text=Whenever the retransmit timer goes off, we retransmit one
#Text=# unacknowledged segment, and do a backoff on the retransmit timer.
#Text=# net.inet.tcp.persmax=60000 # (default 60000)
#Text=# net.inet.tcp.persmin=5000
#Text=# (default 5000)
#Text=# Drop TCP options from 3rd and later retransmitted SYN
#Text=# net.inet.tcp.rexmit_drop_options=0
#Text=# (default 0)
#Text=# Enable tcp_drain routine for extra help when low on mbufs
#Text=# net.inet.tcp.do_tcpdrain=1 # (default 1)
#Text=# Myricom mxge(4): the maximum number of slices the driver will attempt to
#Text=# enable if enough system resources are available at boot.
249-1	71907-71915	Whenever	
249-2	71916-71919	the	
249-3	71920-71930	retransmit	
249-4	71931-71936	timer	
249-5	71937-71941	goes	
249-6	71942-71945	off	
249-7	71945-71946	,	
249-8	71947-71949	we	
249-9	71950-71960	retransmit	
249-10	71961-71964	one	
249-11	71965-71966	#	
249-12	71967-71981	unacknowledged	
249-13	71982-71989	segment	
249-14	71989-71990	,	
249-15	71991-71994	and	
249-16	71995-71997	do	
249-17	71998-71999	a	
249-18	72000-72007	backoff	
249-19	72008-72010	on	
249-20	72011-72014	the	
249-21	72015-72025	retransmit	
249-22	72026-72031	timer	
249-23	72031-72032	.	
249-24	72033-72034	#	
249-25	72035-72055	net.inet.tcp.persmax	
249-26	72055-72056	=	
249-27	72056-72061	60000	
249-28	72062-72063	#	
249-29	72064-72065	(	
249-30	72065-72072	default	
249-31	72073-72078	60000	
249-32	72078-72079	)	
249-33	72080-72081	#	
249-34	72082-72102	net.inet.tcp.persmin	
249-35	72102-72103	=	
249-36	72103-72107	5000	
249-37	72108-72109	#	
249-38	72110-72111	(	
249-39	72111-72118	default	
249-40	72119-72123	5000	
249-41	72123-72124	)	
249-42	72125-72126	#	
249-43	72127-72131	Drop	
249-44	72132-72135	TCP	
249-45	72136-72143	options	
249-46	72144-72148	from	
249-47	72149-72152	3rd	
249-48	72153-72156	and	
249-49	72157-72162	later	
249-50	72163-72176	retransmitted	
249-51	72177-72180	SYN	
249-52	72181-72182	#	
249-53	72183-72215	net.inet.tcp.rexmit_drop_options	
249-54	72215-72216	=	
249-55	72216-72217	0	
249-56	72218-72219	#	
249-57	72220-72221	(	
249-58	72221-72228	default	
249-59	72229-72230	0	
249-60	72230-72231	)	
249-61	72232-72233	#	
249-62	72234-72240	Enable	
249-63	72241-72250	tcp_drain	
249-64	72251-72258	routine	
249-65	72259-72262	for	
249-66	72263-72268	extra	
249-67	72269-72273	help	
249-68	72274-72278	when	
249-69	72279-72282	low	
249-70	72283-72285	on	
249-71	72286-72291	mbufs	
249-72	72292-72293	#	
249-73	72294-72318	net.inet.tcp.do_tcpdrain	
249-74	72318-72319	=	
249-75	72319-72320	1	
249-76	72321-72322	#	
249-77	72323-72324	(	
249-78	72324-72331	default	
249-79	72332-72333	1	
249-80	72333-72334	)	
249-81	72335-72336	#	
249-82	72337-72344	Myricom	
249-83	72345-72349	mxge	
249-84	72349-72350	(	
249-85	72350-72351	4	
249-86	72351-72352	)	
249-87	72352-72353	:	
249-88	72354-72357	the	
249-89	72358-72365	maximum	
249-90	72366-72372	number	
249-91	72373-72375	of	
249-92	72376-72382	slices	
249-93	72383-72386	the	
249-94	72387-72393	driver	
249-95	72394-72398	will	
249-96	72399-72406	attempt	
249-97	72407-72409	to	
249-98	72410-72411	#	
249-99	72412-72418	enable	
249-100	72419-72421	if	
249-101	72422-72428	enough	
249-102	72429-72435	system	
249-103	72436-72445	resources	
249-104	72446-72449	are	
249-105	72450-72459	available	
249-106	72460-72462	at	
249-107	72463-72467	boot	
249-108	72467-72468	.	

#Text=A slice is comprised
#Text=# of a set of receive queues and an associated interrupt thread.
250-1	72469-72470	A	
250-2	72471-72476	slice	
250-3	72477-72479	is	
250-4	72480-72489	comprised	
250-5	72490-72491	#	
250-6	72492-72494	of	
250-7	72495-72496	a	
250-8	72497-72500	set	
250-9	72501-72503	of	
250-10	72504-72511	receive	
250-11	72512-72518	queues	
250-12	72519-72522	and	
250-13	72523-72525	an	
250-14	72526-72536	associated	
250-15	72537-72546	interrupt	
250-16	72547-72553	thread	
250-17	72553-72554	.	

#Text=Multiple
#Text=# slices should be used when the network traffic is being limited by the
#Text=# processing speed of a single CPU core.
251-1	72555-72563	Multiple	
251-2	72564-72565	#	
251-3	72566-72572	slices	
251-4	72573-72579	should	
251-5	72580-72582	be	
251-6	72583-72587	used	
251-7	72588-72592	when	
251-8	72593-72596	the	
251-9	72597-72604	network	
251-10	72605-72612	traffic	
251-11	72613-72615	is	
251-12	72616-72621	being	
251-13	72622-72629	limited	
251-14	72630-72632	by	
251-15	72633-72636	the	
251-16	72637-72638	#	
251-17	72639-72649	processing	
251-18	72650-72655	speed	
251-19	72656-72658	of	
251-20	72659-72660	a	
251-21	72661-72667	single	
251-22	72668-72671	CPU	
251-23	72672-72676	core	
251-24	72676-72677	.	

#Text=When using multiple slices, the NIC
#Text=# hashes traffic to different slices based on the value of
#Text=# hw.mxge.rss_hashtype.
252-1	72678-72682	When	
252-2	72683-72688	using	
252-3	72689-72697	multiple	
252-4	72698-72704	slices	
252-5	72704-72705	,	
252-6	72706-72709	the	
252-7	72710-72713	NIC	
252-8	72714-72715	#	
252-9	72716-72722	hashes	
252-10	72723-72730	traffic	
252-11	72731-72733	to	
252-12	72734-72743	different	
252-13	72744-72750	slices	
252-14	72751-72756	based	
252-15	72757-72759	on	
252-16	72760-72763	the	
252-17	72764-72769	value	
252-18	72770-72772	of	
252-19	72773-72774	#	
252-20	72775-72795	hw.mxge.rss_hashtype	
252-21	72795-72796	.	

#Text=Using multiple slices requires that your motherboard
#Text=# and Myri10GE NIC both be capable of MSI-X.
253-1	72797-72802	Using	
253-2	72803-72811	multiple	
253-3	72812-72818	slices	
253-4	72819-72827	requires	
253-5	72828-72832	that	
253-6	72833-72837	your	
253-7	72838-72849	motherboard	
253-8	72850-72851	#	
253-9	72852-72855	and	
253-10	72856-72864	Myri10GE	
253-11	72865-72868	NIC	
253-12	72869-72873	both	
253-13	72874-72876	be	
253-14	72877-72884	capable	
253-15	72885-72887	of	
253-16	72888-72893	MSI-X	
253-17	72893-72894	.	

#Text=The maximum number of slices
#Text=# is limited to the number of real CPU cores divided by the number of mxge
#Text=# network ports.
254-1	72895-72898	The	
254-2	72899-72906	maximum	
254-3	72907-72913	number	
254-4	72914-72916	of	
254-5	72917-72923	slices	
254-6	72924-72925	#	
254-7	72926-72928	is	
254-8	72929-72936	limited	
254-9	72937-72939	to	
254-10	72940-72943	the	
254-11	72944-72950	number	
254-12	72951-72953	of	
254-13	72954-72958	real	
254-14	72959-72962	CPU	
254-15	72963-72968	cores	
254-16	72969-72976	divided	
254-17	72977-72979	by	
254-18	72980-72983	the	
254-19	72984-72990	number	
254-20	72991-72993	of	
254-21	72994-72998	mxge	
254-22	72999-73000	#	
254-23	73001-73008	network	
254-24	73009-73014	ports	
254-25	73014-73015	.	

#Text=#hw.mxge.max_slices="1"
#Text=# (default 1, which uses a single cpu core)
#Text=# Myricom mxge(4): when multiple slices are enabled, the hash type determines
#Text=# how incoming traffic is steered to each slice.
255-1	73016-73017	#	
255-2	73017-73035	hw.mxge.max_slices	
255-3	73035-73036	=	
255-4	73036-73037	"	
255-5	73037-73038	1	
255-6	73038-73039	"	
255-7	73040-73041	#	
255-8	73042-73043	(	
255-9	73043-73050	default	
255-10	73051-73052	1	
255-11	73052-73053	,	
255-12	73054-73059	which	
255-13	73060-73064	uses	
255-14	73065-73066	a	
255-15	73067-73073	single	
255-16	73074-73077	cpu	
255-17	73078-73082	core	
255-18	73082-73083	)	
255-19	73084-73085	#	
255-20	73086-73093	Myricom	
255-21	73094-73098	mxge	
255-22	73098-73099	(	
255-23	73099-73100	4	
255-24	73100-73101	)	
255-25	73101-73102	:	
255-26	73103-73107	when	
255-27	73108-73116	multiple	
255-28	73117-73123	slices	
255-29	73124-73127	are	
255-30	73128-73135	enabled	
255-31	73135-73136	,	
255-32	73137-73140	the	
255-33	73141-73145	hash	
255-34	73146-73150	type	
255-35	73151-73161	determines	
255-36	73162-73163	#	
255-37	73164-73167	how	
255-38	73168-73176	incoming	
255-39	73177-73184	traffic	
255-40	73185-73187	is	
255-41	73188-73195	steered	
255-42	73196-73198	to	
255-43	73199-73203	each	
255-44	73204-73209	slice	
255-45	73209-73210	.	

#Text=A slice is comprised of a set
#Text=# of receive queues and an associated interrupt thread.
256-1	73211-73212	A	
256-2	73213-73218	slice	
256-3	73219-73221	is	
256-4	73222-73231	comprised	
256-5	73232-73234	of	
256-6	73235-73236	a	
256-7	73237-73240	set	
256-8	73241-73242	#	
256-9	73243-73245	of	
256-10	73246-73253	receive	
256-11	73254-73260	queues	
256-12	73261-73264	and	
256-13	73265-73267	an	
256-14	73268-73278	associated	
256-15	73279-73288	interrupt	
256-16	73289-73295	thread	
256-17	73295-73296	.	

#Text=Hashing is disabled
#Text=# when using a single slice (hw.mxge.max_slices=1).
257-1	73297-73304	Hashing	
257-2	73305-73307	is	
257-3	73308-73316	disabled	
257-4	73317-73318	#	
257-5	73319-73323	when	
257-6	73324-73329	using	
257-7	73330-73331	a	
257-8	73332-73338	single	
257-9	73339-73344	slice	
257-10	73345-73346	(	
257-11	73346-73364	hw.mxge.max_slices	
257-12	73364-73365	=	
257-13	73365-73366	1	
257-14	73366-73367	)	
257-15	73367-73368	.	

#Text=The options are: ="1"
#Text=# hashes on the source and destination IPv4 addresses. ="2" hashes on the
#Text=# source and destination IPv4 addresses and also TCP source and destination
#Text=# ports. ="4" is the default and hashes on the TCP or UDP source ports.
258-1	73369-73372	The	
258-2	73373-73380	options	
258-3	73381-73384	are	
258-4	73384-73385	:	
258-5	73386-73387	=	
258-6	73387-73388	"	
258-7	73388-73389	1	
258-8	73389-73390	"	
258-9	73391-73392	#	
258-10	73393-73399	hashes	
258-11	73400-73402	on	
258-12	73403-73406	the	
258-13	73407-73413	source	
258-14	73414-73417	and	
258-15	73418-73429	destination	
258-16	73430-73434	IPv4	
258-17	73435-73444	addresses	
258-18	73444-73445	.	
258-19	73446-73447	=	
258-20	73447-73448	"	
258-21	73448-73449	2	
258-22	73449-73450	"	
258-23	73451-73457	hashes	
258-24	73458-73460	on	
258-25	73461-73464	the	
258-26	73465-73466	#	
258-27	73467-73473	source	
258-28	73474-73477	and	
258-29	73478-73489	destination	
258-30	73490-73494	IPv4	
258-31	73495-73504	addresses	
258-32	73505-73508	and	
258-33	73509-73513	also	
258-34	73514-73517	TCP	
258-35	73518-73524	source	
258-36	73525-73528	and	
258-37	73529-73540	destination	
258-38	73541-73542	#	
258-39	73543-73548	ports	
258-40	73548-73549	.	
258-41	73550-73551	=	
258-42	73551-73552	"	
258-43	73552-73553	4	
258-44	73553-73554	"	
258-45	73555-73557	is	
258-46	73558-73561	the	
258-47	73562-73569	default	
258-48	73570-73573	and	
258-49	73574-73580	hashes	
258-50	73581-73583	on	
258-51	73584-73587	the	
258-52	73588-73591	TCP	
258-53	73592-73594	or	
258-54	73595-73598	UDP	
258-55	73599-73605	source	
258-56	73606-73611	ports	
258-57	73611-73612	.	

#Text=A value
#Text=# to "4" will more evenly distribute the flows over the slices.
259-1	73613-73614	A	
259-2	73615-73620	value	
259-3	73621-73622	#	
259-4	73623-73625	to	
259-5	73626-73627	"	
259-6	73627-73628	4	
259-7	73628-73629	"	
259-8	73630-73634	will	
259-9	73635-73639	more	
259-10	73640-73646	evenly	
259-11	73647-73657	distribute	
259-12	73658-73661	the	
259-13	73662-73667	flows	
259-14	73668-73672	over	
259-15	73673-73676	the	
259-16	73677-73683	slices	
259-17	73683-73684	.	

#Text=A value of "1"
#Text=# will lock client source ips to a single slice.
260-1	73685-73686	A	
260-2	73687-73692	value	
260-3	73693-73695	of	
260-4	73696-73697	"	
260-5	73697-73698	1	
260-6	73698-73699	"	
260-7	73700-73701	#	
260-8	73702-73706	will	
260-9	73707-73711	lock	
260-10	73712-73718	client	
260-11	73719-73725	source	
260-12	73726-73729	ips	
260-13	73730-73732	to	
260-14	73733-73734	a	
260-15	73735-73741	single	
260-16	73742-73747	slice	
260-17	73747-73748	.	

#Text=#hw.mxge.rss_hash_type="4"
#Text=# (default 4)
#Text=# Myricom mxge(4): flow control manages the rate of data transmission between
#Text=# two nodes preventing a fast sender from overwhelming a slow receiver.
#Text=# Ethernet "PAUSE" frames pause transmission of all traffic on a physical link,
#Text=# not just the individual flow causing the problem.
261-1	73749-73750	#	
261-2	73750-73771	hw.mxge.rss_hash_type	
261-3	73771-73772	=	
261-4	73772-73773	"	
261-5	73773-73774	4	
261-6	73774-73775	"	
261-7	73776-73777	#	
261-8	73778-73779	(	
261-9	73779-73786	default	
261-10	73787-73788	4	
261-11	73788-73789	)	
261-12	73790-73791	#	
261-13	73792-73799	Myricom	
261-14	73800-73804	mxge	
261-15	73804-73805	(	
261-16	73805-73806	4	
261-17	73806-73807	)	
261-18	73807-73808	:	
261-19	73809-73813	flow	
261-20	73814-73821	control	
261-21	73822-73829	manages	
261-22	73830-73833	the	
261-23	73834-73838	rate	
261-24	73839-73841	of	
261-25	73842-73846	data	
261-26	73847-73859	transmission	
261-27	73860-73867	between	
261-28	73868-73869	#	
261-29	73870-73873	two	
261-30	73874-73879	nodes	
261-31	73880-73890	preventing	
261-32	73891-73892	a	
261-33	73893-73897	fast	
261-34	73898-73904	sender	
261-35	73905-73909	from	
261-36	73910-73922	overwhelming	
261-37	73923-73924	a	
261-38	73925-73929	slow	
261-39	73930-73938	receiver	
261-40	73938-73939	.	
261-41	73940-73941	#	
261-42	73942-73950	Ethernet	
261-43	73951-73952	"	
261-44	73952-73957	PAUSE	
261-45	73957-73958	"	
261-46	73959-73965	frames	
261-47	73966-73971	pause	
261-48	73972-73984	transmission	
261-49	73985-73987	of	
261-50	73988-73991	all	
261-51	73992-73999	traffic	
261-52	74000-74002	on	
261-53	74003-74004	a	
261-54	74005-74013	physical	
261-55	74014-74018	link	
261-56	74018-74019	,	
261-57	74020-74021	#	
261-58	74022-74025	not	
261-59	74026-74030	just	
261-60	74031-74034	the	
261-61	74035-74045	individual	
261-62	74046-74050	flow	
261-63	74051-74058	causing	
261-64	74059-74062	the	
261-65	74063-74070	problem	
261-66	74070-74071	.	

#Text=By disabling physical link
#Text=# flow control the link instead relies on TCP's internal flow control which is
#Text=# peer based on IP address and more fair to each flow.
262-1	74072-74074	By	
262-2	74075-74084	disabling	
262-3	74085-74093	physical	
262-4	74094-74098	link	
262-5	74099-74100	#	
262-6	74101-74105	flow	
262-7	74106-74113	control	
262-8	74114-74117	the	
262-9	74118-74122	link	
262-10	74123-74130	instead	
262-11	74131-74137	relies	
262-12	74138-74140	on	
262-13	74141-74146	TCP's	
262-14	74147-74155	internal	
262-15	74156-74160	flow	
262-16	74161-74168	control	
262-17	74169-74174	which	
262-18	74175-74177	is	
262-19	74178-74179	#	
262-20	74180-74184	peer	
262-21	74185-74190	based	
262-22	74191-74193	on	
262-23	74194-74196	IP	
262-24	74197-74204	address	
262-25	74205-74208	and	
262-26	74209-74213	more	
262-27	74214-74218	fair	
262-28	74219-74221	to	
262-29	74222-74226	each	
262-30	74227-74231	flow	
262-31	74231-74232	.	

#Text=The mxge options are:
#Text=# (0=No Flow Control) (1=Full Flow Control, Default).
263-1	74233-74236	The	
263-2	74237-74241	mxge	
263-3	74242-74249	options	
263-4	74250-74253	are	
263-5	74253-74254	:	
263-6	74255-74256	#	
263-7	74257-74258	(	
263-8	74258-74259	0	
263-9	74259-74260	=	
263-10	74260-74262	No	
263-11	74263-74267	Flow	
263-12	74268-74275	Control	
263-13	74275-74276	)	
263-14	74277-74278	(	
263-15	74278-74279	1	
263-16	74279-74280	=	
263-17	74280-74284	Full	
263-18	74285-74289	Flow	
263-19	74290-74297	Control	
263-20	74297-74298	,	
263-21	74299-74306	Default	
263-22	74306-74307	)	
263-23	74307-74308	.	

#Text=A value of zero(0)
#Text=# disables ethernet flow control on the Myricom mxge(4) interface.
#Text=# http://virtualthreads.blogspot.com/2006/02/beware-ethernet-flow-control.html
#Text=#hw.mxge.flow_control_enabled=0
#Text=# (default 1, enabled)
#Text=# The number of frames the NIC's receive (rx) queue will accept before
#Text=# triggering a kernel inturrupt.
264-1	74309-74310	A	
264-2	74311-74316	value	
264-3	74317-74319	of	
264-4	74320-74324	zero	
264-5	74324-74325	(	
264-6	74325-74326	0	
264-7	74326-74327	)	
264-8	74328-74329	#	
264-9	74330-74338	disables	
264-10	74339-74347	ethernet	
264-11	74348-74352	flow	
264-12	74353-74360	control	
264-13	74361-74363	on	
264-14	74364-74367	the	
264-15	74368-74375	Myricom	
264-16	74376-74380	mxge	
264-17	74380-74381	(	
264-18	74381-74382	4	
264-19	74382-74383	)	
264-20	74384-74393	interface	
264-21	74393-74394	.	
264-22	74395-74396	#	
264-23	74397-74401	http	
264-24	74401-74402	:	
264-25	74402-74403	/	
264-26	74403-74404	/	
264-27	74404-74431	virtualthreads.blogspot.com	
264-28	74431-74432	/	
264-29	74432-74436	2006	
264-30	74436-74437	/	
264-31	74437-74439	02	
264-32	74439-74440	/	
264-33	74440-74473	beware-ethernet-flow-control.html	
264-34	74474-74475	#	
264-35	74475-74503	hw.mxge.flow_control_enabled	
264-36	74503-74504	=	
264-37	74504-74505	0	
264-38	74506-74507	#	
264-39	74508-74509	(	
264-40	74509-74516	default	
264-41	74517-74518	1	
264-42	74518-74519	,	
264-43	74520-74527	enabled	
264-44	74527-74528	)	
264-45	74529-74530	#	
264-46	74531-74534	The	
264-47	74535-74541	number	
264-48	74542-74544	of	
264-49	74545-74551	frames	
264-50	74552-74555	the	
264-51	74556-74561	NIC's	
264-52	74562-74569	receive	
264-53	74570-74571	(	
264-54	74571-74573	rx	
264-55	74573-74574	)	
264-56	74575-74580	queue	
264-57	74581-74585	will	
264-58	74586-74592	accept	
264-59	74593-74599	before	
264-60	74600-74601	#	
264-61	74602-74612	triggering	
264-62	74613-74614	a	
264-63	74615-74621	kernel	
264-64	74622-74631	inturrupt	
264-65	74631-74632	.	

#Text=If the NIC's queue is full and the kernel can
#Text=# not process the packets fast enough then the packets are dropped.
265-1	74633-74635	If	
265-2	74636-74639	the	
265-3	74640-74645	NIC's	
265-4	74646-74651	queue	
265-5	74652-74654	is	
265-6	74655-74659	full	
265-7	74660-74663	and	
265-8	74664-74667	the	
265-9	74668-74674	kernel	
265-10	74675-74678	can	
265-11	74679-74680	#	
265-12	74681-74684	not	
265-13	74685-74692	process	
265-14	74693-74696	the	
265-15	74697-74704	packets	
265-16	74705-74709	fast	
265-17	74710-74716	enough	
265-18	74717-74721	then	
265-19	74722-74725	the	
265-20	74726-74733	packets	
265-21	74734-74737	are	
265-22	74738-74745	dropped	
265-23	74745-74746	.	

#Text=Use "sysctl
#Text=# net.inet.ip.intr_queue_drops" and "netstat -Q" and increase the queue_maxlen
#Text=# if queue_drops is greater then zero(0).
266-1	74747-74750	Use	
266-2	74751-74752	"	
266-3	74752-74758	sysctl	
266-4	74759-74760	#	
266-5	74761-74789	net.inet.ip.intr_queue_drops	
266-6	74789-74790	"	
266-7	74791-74794	and	
266-8	74795-74796	"	
266-9	74796-74803	netstat	
266-10	74804-74805	-	
266-11	74805-74806	Q	
266-12	74806-74807	"	
266-13	74808-74811	and	
266-14	74812-74820	increase	
266-15	74821-74824	the	
266-16	74825-74837	queue_maxlen	
266-17	74838-74839	#	
266-18	74840-74842	if	
266-19	74843-74854	queue_drops	
266-20	74855-74857	is	
266-21	74858-74865	greater	
266-22	74866-74870	then	
266-23	74871-74875	zero	
266-24	74875-74876	(	
266-25	74876-74877	0	
266-26	74877-74878	)	
266-27	74878-74879	.	

#Text=The real problem is the CPU or NIC is
#Text=# not fast enough to handle the traffic, but if you are already at the limit of
#Text=# your network then increasing these values will help.
267-1	74880-74883	The	
267-2	74884-74888	real	
267-3	74889-74896	problem	
267-4	74897-74899	is	
267-5	74900-74903	the	
267-6	74904-74907	CPU	
267-7	74908-74910	or	
267-8	74911-74914	NIC	
267-9	74915-74917	is	
267-10	74918-74919	#	
267-11	74920-74923	not	
267-12	74924-74928	fast	
267-13	74929-74935	enough	
267-14	74936-74938	to	
267-15	74939-74945	handle	
267-16	74946-74949	the	
267-17	74950-74957	traffic	
267-18	74957-74958	,	
267-19	74959-74962	but	
267-20	74963-74965	if	
267-21	74966-74969	you	
267-22	74970-74973	are	
267-23	74974-74981	already	
267-24	74982-74984	at	
267-25	74985-74988	the	
267-26	74989-74994	limit	
267-27	74995-74997	of	
267-28	74998-74999	#	
267-29	75000-75004	your	
267-30	75005-75012	network	
267-31	75013-75017	then	
267-32	75018-75028	increasing	
267-33	75029-75034	these	
267-34	75035-75041	values	
267-35	75042-75046	will	
267-36	75047-75051	help	
267-37	75051-75052	.	

#Text=#net.inet.ip.intr_queue_maxlen=2048
#Text=# (default 256)
#Text=#net.route.netisr_maxqlen=2048
#Text=# (default 256)
#Text=# Intel igb(4): freebsd limits the the number of received packets a network
#Text=# card can process to 100 packets per interrupt cycle.
268-1	75053-75054	#	
268-2	75054-75083	net.inet.ip.intr_queue_maxlen	
268-3	75083-75084	=	
268-4	75084-75088	2048	
268-5	75089-75090	#	
268-6	75091-75092	(	
268-7	75092-75099	default	
268-8	75100-75103	256	
268-9	75103-75104	)	
268-10	75105-75106	#	
268-11	75106-75130	net.route.netisr_maxqlen	
268-12	75130-75131	=	
268-13	75131-75135	2048	
268-14	75136-75137	#	
268-15	75138-75139	(	
268-16	75139-75146	default	
268-17	75147-75150	256	
268-18	75150-75151	)	
268-19	75152-75153	#	
268-20	75154-75159	Intel	
268-21	75160-75163	igb	
268-22	75163-75164	(	
268-23	75164-75165	4	
268-24	75165-75166	)	
268-25	75166-75167	:	
268-26	75168-75175	freebsd	
268-27	75176-75182	limits	
268-28	75183-75186	the	
268-29	75187-75190	the	
268-30	75191-75197	number	
268-31	75198-75200	of	
268-32	75201-75209	received	
268-33	75210-75217	packets	
268-34	75218-75219	a	
268-35	75220-75227	network	
268-36	75228-75229	#	
268-37	75230-75234	card	
268-38	75235-75238	can	
268-39	75239-75246	process	
268-40	75247-75249	to	
268-41	75250-75253	100	
268-42	75254-75261	packets	
268-43	75262-75265	per	
268-44	75266-75275	interrupt	
268-45	75276-75281	cycle	
268-46	75281-75282	.	

#Text=This limit is in place
#Text=# because of inefficiencies in IRQ sharing when the network card is using the
#Text=# same IRQ as another device.
269-1	75283-75287	This	
269-2	75288-75293	limit	
269-3	75294-75296	is	
269-4	75297-75299	in	
269-5	75300-75305	place	
269-6	75306-75307	#	
269-7	75308-75315	because	
269-8	75316-75318	of	
269-9	75319-75333	inefficiencies	
269-10	75334-75336	in	
269-11	75337-75340	IRQ	
269-12	75341-75348	sharing	
269-13	75349-75353	when	
269-14	75354-75357	the	
269-15	75358-75365	network	
269-16	75366-75370	card	
269-17	75371-75373	is	
269-18	75374-75379	using	
269-19	75380-75383	the	
269-20	75384-75385	#	
269-21	75386-75390	same	
269-22	75391-75394	IRQ	
269-23	75395-75397	as	
269-24	75398-75405	another	
269-25	75406-75412	device	
269-26	75412-75413	.	

#Text=When the Intel network card is assigned a unique
#Text=# IRQ (dmesg) and MSI-X is enabled through the driver (hw.igb.enable_msix=1)
#Text=# then interrupt scheduling is significantly more efficient and the NIC can be
#Text=# allowed to process packets as fast as they are received.
270-1	75414-75418	When	
270-2	75419-75422	the	
270-3	75423-75428	Intel	
270-4	75429-75436	network	
270-5	75437-75441	card	
270-6	75442-75444	is	
270-7	75445-75453	assigned	
270-8	75454-75455	a	
270-9	75456-75462	unique	
270-10	75463-75464	#	
270-11	75465-75468	IRQ	
270-12	75469-75470	(	
270-13	75470-75475	dmesg	
270-14	75475-75476	)	
270-15	75477-75480	and	
270-16	75481-75486	MSI-X	
270-17	75487-75489	is	
270-18	75490-75497	enabled	
270-19	75498-75505	through	
270-20	75506-75509	the	
270-21	75510-75516	driver	
270-22	75517-75518	(	
270-23	75518-75536	hw.igb.enable_msix	
270-24	75536-75537	=	
270-25	75537-75538	1	
270-26	75538-75539	)	
270-27	75540-75541	#	
270-28	75542-75546	then	
270-29	75547-75556	interrupt	
270-30	75557-75567	scheduling	
270-31	75568-75570	is	
270-32	75571-75584	significantly	
270-33	75585-75589	more	
270-34	75590-75599	efficient	
270-35	75600-75603	and	
270-36	75604-75607	the	
270-37	75608-75611	NIC	
270-38	75612-75615	can	
270-39	75616-75618	be	
270-40	75619-75620	#	
270-41	75621-75628	allowed	
270-42	75629-75631	to	
270-43	75632-75639	process	
270-44	75640-75647	packets	
270-45	75648-75650	as	
270-46	75651-75655	fast	
270-47	75656-75658	as	
270-48	75659-75663	they	
270-49	75664-75667	are	
270-50	75668-75676	received	
270-51	75676-75677	.	

#Text=A value of "-1"
#Text=# means unlimited packet processing.
271-1	75678-75679	A	
271-2	75680-75685	value	
271-3	75686-75688	of	
271-4	75689-75690	"	
271-5	75690-75691	-	
271-6	75691-75692	1	
271-7	75692-75693	"	
271-8	75694-75695	#	
271-9	75696-75701	means	
271-10	75702-75711	unlimited	
271-11	75712-75718	packet	
271-12	75719-75729	processing	
271-13	75729-75730	.	

#Text=There is no need to set these options if
#Text=# hw.igb.rx_process_limit is already defined.
272-1	75731-75736	There	
272-2	75737-75739	is	
272-3	75740-75742	no	
272-4	75743-75747	need	
272-5	75748-75750	to	
272-6	75751-75754	set	
272-7	75755-75760	these	
272-8	75761-75768	options	
272-9	75769-75771	if	
272-10	75772-75773	#	
272-11	75774-75797	hw.igb.rx_process_limit	
272-12	75798-75800	is	
272-13	75801-75808	already	
272-14	75809-75816	defined	
272-15	75816-75817	.	

#Text=#dev.igb.0.rx_processing_limit=-1
#Text=# (default 100)
#Text=#dev.igb.1.rx_processing_limit=-1
#Text=# (default 100)
#Text=# Intel igb(4): Energy-Efficient Ethernet (EEE) is intended to reduce system
#Text=# power consumption up to 80% by setting the interface to a low power mode
#Text=# during periods of network inactivity.
273-1	75818-75819	#	
273-2	75819-75826	dev.igb	
273-3	75826-75828	.0	
273-4	75828-75829	.	
273-5	75829-75848	rx_processing_limit	
273-6	75848-75849	=	
273-7	75849-75850	-	
273-8	75850-75851	1	
273-9	75852-75853	#	
273-10	75854-75855	(	
273-11	75855-75862	default	
273-12	75863-75866	100	
273-13	75866-75867	)	
273-14	75868-75869	#	
273-15	75869-75876	dev.igb	
273-16	75876-75878	.1	
273-17	75878-75879	.	
273-18	75879-75898	rx_processing_limit	
273-19	75898-75899	=	
273-20	75899-75900	-	
273-21	75900-75901	1	
273-22	75902-75903	#	
273-23	75904-75905	(	
273-24	75905-75912	default	
273-25	75913-75916	100	
273-26	75916-75917	)	
273-27	75918-75919	#	
273-28	75920-75925	Intel	
273-29	75926-75929	igb	
273-30	75929-75930	(	
273-31	75930-75931	4	
273-32	75931-75932	)	
273-33	75932-75933	:	
273-34	75934-75950	Energy-Efficient	
273-35	75951-75959	Ethernet	
273-36	75960-75961	(	
273-37	75961-75964	EEE	
273-38	75964-75965	)	
273-39	75966-75968	is	
273-40	75969-75977	intended	
273-41	75978-75980	to	
273-42	75981-75987	reduce	
273-43	75988-75994	system	
273-44	75995-75996	#	
273-45	75997-76002	power	
273-46	76003-76014	consumption	
273-47	76015-76017	up	
273-48	76018-76020	to	
273-49	76021-76024	80%	
273-50	76025-76027	by	
273-51	76028-76035	setting	
273-52	76036-76039	the	
273-53	76040-76049	interface	
273-54	76050-76052	to	
273-55	76053-76054	a	
273-56	76055-76058	low	
273-57	76059-76064	power	
273-58	76065-76069	mode	
273-59	76070-76071	#	
273-60	76072-76078	during	
273-61	76079-76086	periods	
273-62	76087-76089	of	
273-63	76090-76097	network	
273-64	76098-76108	inactivity	
273-65	76108-76109	.	

#Text=When the NIC is in low power mode this
#Text=# allows the CPU longer periods of time to also go into a sleep state thus
#Text=# lowering overall power usage.
274-1	76110-76114	When	
274-2	76115-76118	the	
274-3	76119-76122	NIC	
274-4	76123-76125	is	
274-5	76126-76128	in	
274-6	76129-76132	low	
274-7	76133-76138	power	
274-8	76139-76143	mode	
274-9	76144-76148	this	
274-10	76149-76150	#	
274-11	76151-76157	allows	
274-12	76158-76161	the	
274-13	76162-76165	CPU	
274-14	76166-76172	longer	
274-15	76173-76180	periods	
274-16	76181-76183	of	
274-17	76184-76188	time	
274-18	76189-76191	to	
274-19	76192-76196	also	
274-20	76197-76199	go	
274-21	76200-76204	into	
274-22	76205-76206	a	
274-23	76207-76212	sleep	
274-24	76213-76218	state	
274-25	76219-76223	thus	
274-26	76224-76225	#	
274-27	76226-76234	lowering	
274-28	76235-76242	overall	
274-29	76243-76248	power	
274-30	76249-76254	usage	
274-31	76254-76255	.	

#Text=The problem is EEE can cause periodic packet
#Text=# loss and latency spikes when the interface transitions from low power mode.
#Text=# Packet loss from EEE will not show up in the missed_packets or dropped
#Text=# counter because the packet was not dropped, but lost by the network card
#Text=# during the transition phase.
275-1	76256-76259	The	
275-2	76260-76267	problem	
275-3	76268-76270	is	
275-4	76271-76274	EEE	
275-5	76275-76278	can	
275-6	76279-76284	cause	
275-7	76285-76293	periodic	
275-8	76294-76300	packet	
275-9	76301-76302	#	
275-10	76303-76307	loss	
275-11	76308-76311	and	
275-12	76312-76319	latency	
275-13	76320-76326	spikes	
275-14	76327-76331	when	
275-15	76332-76335	the	
275-16	76336-76345	interface	
275-17	76346-76357	transitions	
275-18	76358-76362	from	
275-19	76363-76366	low	
275-20	76367-76372	power	
275-21	76373-76377	mode	
275-22	76377-76378	.	
275-23	76379-76380	#	
275-24	76381-76387	Packet	
275-25	76388-76392	loss	
275-26	76393-76397	from	
275-27	76398-76401	EEE	
275-28	76402-76406	will	
275-29	76407-76410	not	
275-30	76411-76415	show	
275-31	76416-76418	up	
275-32	76419-76421	in	
275-33	76422-76425	the	
275-34	76426-76440	missed_packets	
275-35	76441-76443	or	
275-36	76444-76451	dropped	
275-37	76452-76453	#	
275-38	76454-76461	counter	
275-39	76462-76469	because	
275-40	76470-76473	the	
275-41	76474-76480	packet	
275-42	76481-76484	was	
275-43	76485-76488	not	
275-44	76489-76496	dropped	
275-45	76496-76497	,	
275-46	76498-76501	but	
275-47	76502-76506	lost	
275-48	76507-76509	by	
275-49	76510-76513	the	
275-50	76514-76521	network	
275-51	76522-76526	card	
275-52	76527-76528	#	
275-53	76529-76535	during	
275-54	76536-76539	the	
275-55	76540-76550	transition	
275-56	76551-76556	phase	
275-57	76556-76557	.	

#Text=The Intel i350-T2 only requires 4.4 watts with
#Text=# both network ports active so we recommend disabling EEE especially on a
#Text=# server unless power usage is of higher priority.
276-1	76558-76561	The	
276-2	76562-76567	Intel	
276-3	76568-76572	i350	
276-4	76572-76573	-	
276-5	76573-76575	T2	
276-6	76576-76580	only	
276-7	76581-76589	requires	
276-8	76590-76593	4.4	
276-9	76594-76599	watts	
276-10	76600-76604	with	
276-11	76605-76606	#	
276-12	76607-76611	both	
276-13	76612-76619	network	
276-14	76620-76625	ports	
276-15	76626-76632	active	
276-16	76633-76635	so	
276-17	76636-76638	we	
276-18	76639-76648	recommend	
276-19	76649-76658	disabling	
276-20	76659-76662	EEE	
276-21	76663-76673	especially	
276-22	76674-76676	on	
276-23	76677-76678	a	
276-24	76679-76680	#	
276-25	76681-76687	server	
276-26	76688-76694	unless	
276-27	76695-76700	power	
276-28	76701-76706	usage	
276-29	76707-76709	is	
276-30	76710-76712	of	
276-31	76713-76719	higher	
276-32	76720-76728	priority	
276-33	76728-76729	.	

#Text=Verify DMA Coalesce is
#Text=# disabled (dev.igb.0.dmac=0) which is the default.
277-1	76730-76736	Verify	
277-2	76737-76740	DMA	
277-3	76741-76749	Coalesce	
277-4	76750-76752	is	
277-5	76753-76754	#	
277-6	76755-76763	disabled	
277-7	76764-76765	(	
277-8	76765-76772	dev.igb	
277-9	76772-76774	.0	
277-10	76774-76775	.	
277-11	76775-76779	dmac	
277-12	76779-76780	=	
277-13	76780-76781	0	
277-14	76781-76782	)	
277-15	76783-76788	which	
277-16	76789-76791	is	
277-17	76792-76795	the	
277-18	76796-76803	default	
277-19	76803-76804	.	

#Text=WARNING: enabling EEE will
#Text=# significantly delay DHCP leases and the network interface will flip a few
#Text=# times on boot. https://en.wikipedia.org/wiki/Energy-Efficient_Ethernet
#Text=#dev.igb.0.eee_disabled=1
#Text=# (default 0, enabled)
#Text=#dev.igb.1.eee_disabled=1
#Text=# (default 0, enabled)
#Text=# Spoofed packet attacks may be used to overload the kernel route cache.
278-1	76805-76812	WARNING	
278-2	76812-76813	:	
278-3	76814-76822	enabling	
278-4	76823-76826	EEE	
278-5	76827-76831	will	
278-6	76832-76833	#	
278-7	76834-76847	significantly	
278-8	76848-76853	delay	
278-9	76854-76858	DHCP	
278-10	76859-76865	leases	
278-11	76866-76869	and	
278-12	76870-76873	the	
278-13	76874-76881	network	
278-14	76882-76891	interface	
278-15	76892-76896	will	
278-16	76897-76901	flip	
278-17	76902-76903	a	
278-18	76904-76907	few	
278-19	76908-76909	#	
278-20	76910-76915	times	
278-21	76916-76918	on	
278-22	76919-76923	boot	
278-23	76923-76924	.	
278-24	76925-76930	https	
278-25	76930-76931	:	
278-26	76931-76932	/	
278-27	76932-76933	/	
278-28	76933-76949	en.wikipedia.org	
278-29	76949-76950	/	
278-30	76950-76954	wiki	
278-31	76954-76955	/	
278-32	76955-76980	Energy-Efficient_Ethernet	
278-33	76981-76982	#	
278-34	76982-76989	dev.igb	
278-35	76989-76991	.0	
278-36	76991-76992	.	
278-37	76992-77004	eee_disabled	
278-38	77004-77005	=	
278-39	77005-77006	1	
278-40	77007-77008	#	
278-41	77009-77010	(	
278-42	77010-77017	default	
278-43	77018-77019	0	
278-44	77019-77020	,	
278-45	77021-77028	enabled	
278-46	77028-77029	)	
278-47	77030-77031	#	
278-48	77031-77038	dev.igb	
278-49	77038-77040	.1	
278-50	77040-77041	.	
278-51	77041-77053	eee_disabled	
278-52	77053-77054	=	
278-53	77054-77055	1	
278-54	77056-77057	#	
278-55	77058-77059	(	
278-56	77059-77066	default	
278-57	77067-77068	0	
278-58	77068-77069	,	
278-59	77070-77077	enabled	
278-60	77077-77078	)	
278-61	77079-77080	#	
278-62	77081-77088	Spoofed	
278-63	77089-77095	packet	
278-64	77096-77103	attacks	
278-65	77104-77107	may	
278-66	77108-77110	be	
278-67	77111-77115	used	
278-68	77116-77118	to	
278-69	77119-77127	overload	
278-70	77128-77131	the	
278-71	77132-77138	kernel	
278-72	77139-77144	route	
278-73	77145-77150	cache	
278-74	77150-77151	.	

#Text=A
#Text=# spoofed packet attack uses random source IPs to cause the kernel to generate
#Text=# a temporary cached route in the route table, Route cache is an extraneous
#Text=# caching layer mapping interfaces to routes to IPs and saves a lookup to the
#Text=# Forward Information Base (FIB); a routing table within the network stack.
279-1	77152-77153	A	
279-2	77154-77155	#	
279-3	77156-77163	spoofed	
279-4	77164-77170	packet	
279-5	77171-77177	attack	
279-6	77178-77182	uses	
279-7	77183-77189	random	
279-8	77190-77196	source	
279-9	77197-77200	IPs	
279-10	77201-77203	to	
279-11	77204-77209	cause	
279-12	77210-77213	the	
279-13	77214-77220	kernel	
279-14	77221-77223	to	
279-15	77224-77232	generate	
279-16	77233-77234	#	
279-17	77235-77236	a	
279-18	77237-77246	temporary	
279-19	77247-77253	cached	
279-20	77254-77259	route	
279-21	77260-77262	in	
279-22	77263-77266	the	
279-23	77267-77272	route	
279-24	77273-77278	table	
279-25	77278-77279	,	
279-26	77280-77285	Route	
279-27	77286-77291	cache	
279-28	77292-77294	is	
279-29	77295-77297	an	
279-30	77298-77308	extraneous	
279-31	77309-77310	#	
279-32	77311-77318	caching	
279-33	77319-77324	layer	
279-34	77325-77332	mapping	
279-35	77333-77343	interfaces	
279-36	77344-77346	to	
279-37	77347-77353	routes	
279-38	77354-77356	to	
279-39	77357-77360	IPs	
279-40	77361-77364	and	
279-41	77365-77370	saves	
279-42	77371-77372	a	
279-43	77373-77379	lookup	
279-44	77380-77382	to	
279-45	77383-77386	the	
279-46	77387-77388	#	
279-47	77389-77396	Forward	
279-48	77397-77408	Information	
279-49	77409-77413	Base	
279-50	77414-77415	(	
279-51	77415-77418	FIB	
279-52	77418-77419	)	
279-53	77419-77420	;	
279-54	77421-77422	a	
279-55	77423-77430	routing	
279-56	77431-77436	table	
279-57	77437-77443	within	
279-58	77444-77447	the	
279-59	77448-77455	network	
279-60	77456-77461	stack	
279-61	77461-77462	.	

#Text=The
#Text=# IPv4 routing cache was intended to eliminate a FIB lookup and increase
#Text=# performance.
280-1	77463-77466	The	
280-2	77467-77468	#	
280-3	77469-77473	IPv4	
280-4	77474-77481	routing	
280-5	77482-77487	cache	
280-6	77488-77491	was	
280-7	77492-77500	intended	
280-8	77501-77503	to	
280-9	77504-77513	eliminate	
280-10	77514-77515	a	
280-11	77516-77519	FIB	
280-12	77520-77526	lookup	
280-13	77527-77530	and	
280-14	77531-77539	increase	
280-15	77540-77541	#	
280-16	77542-77553	performance	
280-17	77553-77554	.	

#Text=While a good idea in principle, unfortunately it provided a very
#Text=# small performance boost in less than 10% of connections and opens up the
#Text=# possibility of a DoS vector.
281-1	77555-77560	While	
281-2	77561-77562	a	
281-3	77563-77567	good	
281-4	77568-77572	idea	
281-5	77573-77575	in	
281-6	77576-77585	principle	
281-7	77585-77586	,	
281-8	77587-77600	unfortunately	
281-9	77601-77603	it	
281-10	77604-77612	provided	
281-11	77613-77614	a	
281-12	77615-77619	very	
281-13	77620-77621	#	
281-14	77622-77627	small	
281-15	77628-77639	performance	
281-16	77640-77645	boost	
281-17	77646-77648	in	
281-18	77649-77653	less	
281-19	77654-77658	than	
281-20	77659-77662	10%	
281-21	77663-77665	of	
281-22	77666-77677	connections	
281-23	77678-77681	and	
281-24	77682-77687	opens	
281-25	77688-77690	up	
281-26	77691-77694	the	
281-27	77695-77696	#	
281-28	77697-77708	possibility	
281-29	77709-77711	of	
281-30	77712-77713	a	
281-31	77714-77717	DoS	
281-32	77718-77724	vector	
281-33	77724-77725	.	

#Text=Setting rtexpire and rtminexpire to ten(10)
#Text=# seconds should be sufficient to protect the route table from attack.
#Text=# http://www.es.freebsd.org/doc/handbook/securing-freebsd.html
#Text=# Route cache options were removed in FreeBSD 11.0
#Text=#net.inet.ip.rtexpire=10
#Text=# (default 3600)
#Text=#net.inet.ip.rtminexpire=10
#Text=# (default 10
#Text=#net.inet.ip.rtmaxcache=128
#Text=# (default 128 )
#Text=# somaxconn is the OS buffer, backlog queue depth for accepting new incoming TCP
#Text=# connections.
282-1	77726-77733	Setting	
282-2	77734-77742	rtexpire	
282-3	77743-77746	and	
282-4	77747-77758	rtminexpire	
282-5	77759-77761	to	
282-6	77762-77765	ten	
282-7	77765-77766	(	
282-8	77766-77768	10	
282-9	77768-77769	)	
282-10	77770-77771	#	
282-11	77772-77779	seconds	
282-12	77780-77786	should	
282-13	77787-77789	be	
282-14	77790-77800	sufficient	
282-15	77801-77803	to	
282-16	77804-77811	protect	
282-17	77812-77815	the	
282-18	77816-77821	route	
282-19	77822-77827	table	
282-20	77828-77832	from	
282-21	77833-77839	attack	
282-22	77839-77840	.	
282-23	77841-77842	#	
282-24	77843-77847	http	
282-25	77847-77848	:	
282-26	77848-77849	/	
282-27	77849-77850	/	
282-28	77850-77868	www.es.freebsd.org	
282-29	77868-77869	/	
282-30	77869-77872	doc	
282-31	77872-77873	/	
282-32	77873-77881	handbook	
282-33	77881-77882	/	
282-34	77882-77903	securing-freebsd.html	
282-35	77904-77905	#	
282-36	77906-77911	Route	
282-37	77912-77917	cache	
282-38	77918-77925	options	
282-39	77926-77930	were	
282-40	77931-77938	removed	
282-41	77939-77941	in	
282-42	77942-77949	FreeBSD	
282-43	77950-77954	11.0	
282-44	77955-77956	#	
282-45	77956-77976	net.inet.ip.rtexpire	
282-46	77976-77977	=	
282-47	77977-77979	10	
282-48	77980-77981	#	
282-49	77982-77983	(	
282-50	77983-77990	default	
282-51	77991-77995	3600	
282-52	77995-77996	)	
282-53	77997-77998	#	
282-54	77998-78021	net.inet.ip.rtminexpire	
282-55	78021-78022	=	
282-56	78022-78024	10	
282-57	78025-78026	#	
282-58	78027-78028	(	
282-59	78028-78035	default	
282-60	78036-78038	10	
282-61	78039-78040	#	
282-62	78040-78062	net.inet.ip.rtmaxcache	
282-63	78062-78063	=	
282-64	78063-78066	128	
282-65	78067-78068	#	
282-66	78069-78070	(	
282-67	78070-78077	default	
282-68	78078-78081	128	
282-69	78082-78083	)	
282-70	78084-78085	#	
282-71	78086-78095	somaxconn	
282-72	78096-78098	is	
282-73	78099-78102	the	
282-74	78103-78105	OS	
282-75	78106-78112	buffer	
282-76	78112-78113	,	
282-77	78114-78121	backlog	
282-78	78122-78127	queue	
282-79	78128-78133	depth	
282-80	78134-78137	for	
282-81	78138-78147	accepting	
282-82	78148-78151	new	
282-83	78152-78160	incoming	
282-84	78161-78164	TCP	
282-85	78165-78166	#	
282-86	78167-78178	connections	
282-87	78178-78179	.	

#Text=An application will have its own, separate max queue length
#Text=# (maxqlen) which can be checked with "netstat -Lan".
283-1	78180-78182	An	
283-2	78183-78194	application	
283-3	78195-78199	will	
283-4	78200-78204	have	
283-5	78205-78208	its	
283-6	78209-78212	own	
283-7	78212-78213	,	
283-8	78214-78222	separate	
283-9	78223-78226	max	
283-10	78227-78232	queue	
283-11	78233-78239	length	
283-12	78240-78241	#	
283-13	78242-78243	(	
283-14	78243-78250	maxqlen	
283-15	78250-78251	)	
283-16	78252-78257	which	
283-17	78258-78261	can	
283-18	78262-78264	be	
283-19	78265-78272	checked	
283-20	78273-78277	with	
283-21	78278-78279	"	
283-22	78279-78286	netstat	
283-23	78287-78288	-	
283-24	78288-78291	Lan	
283-25	78291-78292	"	
283-26	78292-78293	.	

#Text=The default is 128
#Text=# connections per application thread.
284-1	78294-78297	The	
284-2	78298-78305	default	
284-3	78306-78308	is	
284-4	78309-78312	128	
284-5	78313-78314	#	
284-6	78315-78326	connections	
284-7	78327-78330	per	
284-8	78331-78342	application	
284-9	78343-78349	thread	
284-10	78349-78350	.	

#Text=Lets say your Nginx web server normally
#Text=# receives 100 connections/sec and is single threaded application.
285-1	78351-78355	Lets	
285-2	78356-78359	say	
285-3	78360-78364	your	
285-4	78365-78370	Nginx	
285-5	78371-78374	web	
285-6	78375-78381	server	
285-7	78382-78390	normally	
285-8	78391-78392	#	
285-9	78393-78401	receives	
285-10	78402-78405	100	
285-11	78406-78417	connections	
285-12	78417-78418	/	
285-13	78418-78421	sec	
285-14	78422-78425	and	
285-15	78426-78428	is	
285-16	78429-78435	single	
285-17	78436-78444	threaded	
285-18	78445-78456	application	
285-19	78456-78457	.	

#Text=If clients
#Text=# are bursting in at a total of 250 connections/sec you may want to set the
#Text=# somaxconn at 512 to be a 512 deep connection buffer so the extra 122 clients
#Text=# (250-128=122) do not get denied service since you would have 412
#Text=# (512-100=412) extra queue slots.
286-1	78458-78460	If	
286-2	78461-78468	clients	
286-3	78469-78470	#	
286-4	78471-78474	are	
286-5	78475-78483	bursting	
286-6	78484-78486	in	
286-7	78487-78489	at	
286-8	78490-78491	a	
286-9	78492-78497	total	
286-10	78498-78500	of	
286-11	78501-78504	250	
286-12	78505-78516	connections	
286-13	78516-78517	/	
286-14	78517-78520	sec	
286-15	78521-78524	you	
286-16	78525-78528	may	
286-17	78529-78533	want	
286-18	78534-78536	to	
286-19	78537-78540	set	
286-20	78541-78544	the	
286-21	78545-78546	#	
286-22	78547-78556	somaxconn	
286-23	78557-78559	at	
286-24	78560-78563	512	
286-25	78564-78566	to	
286-26	78567-78569	be	
286-27	78570-78571	a	
286-28	78572-78575	512	
286-29	78576-78580	deep	
286-30	78581-78591	connection	
286-31	78592-78598	buffer	
286-32	78599-78601	so	
286-33	78602-78605	the	
286-34	78606-78611	extra	
286-35	78612-78615	122	
286-36	78616-78623	clients	
286-37	78624-78625	#	
286-38	78626-78627	(	
286-39	78627-78630	250	
286-40	78630-78631	-	
286-41	78631-78634	128	
286-42	78634-78635	=	
286-43	78635-78638	122	
286-44	78638-78639	)	
286-45	78640-78642	do	
286-46	78643-78646	not	
286-47	78647-78650	get	
286-48	78651-78657	denied	
286-49	78658-78665	service	
286-50	78666-78671	since	
286-51	78672-78675	you	
286-52	78676-78681	would	
286-53	78682-78686	have	
286-54	78687-78690	412	
286-55	78691-78692	#	
286-56	78693-78694	(	
286-57	78694-78697	512	
286-58	78697-78698	-	
286-59	78698-78701	100	
286-60	78701-78702	=	
286-61	78702-78705	412	
286-62	78705-78706	)	
286-63	78707-78712	extra	
286-64	78713-78718	queue	
286-65	78719-78724	slots	
286-66	78724-78725	.	

#Text=Also, a large listen queue will do a better
#Text=# job of avoiding Denial of Service (DoS) attacks if, and only if, your
#Text=# application can handle the TCP load at the cost of more RAM and CPU time.
#Text=# Nginx sets is backlog queue to the same as the OS somaxconn by default.
#Text=# Note: "kern.ipc.somaxconn" is not shown in "sysctl -a" output, but searching
#Text=# for "kern.ipc.soacceptqueue" gives the same value and both directives stand
#Text=# for the same buffer value.
287-1	78726-78730	Also	
287-2	78730-78731	,	
287-3	78732-78733	a	
287-4	78734-78739	large	
287-5	78740-78746	listen	
287-6	78747-78752	queue	
287-7	78753-78757	will	
287-8	78758-78760	do	
287-9	78761-78762	a	
287-10	78763-78769	better	
287-11	78770-78771	#	
287-12	78772-78775	job	
287-13	78776-78778	of	
287-14	78779-78787	avoiding	
287-15	78788-78794	Denial	
287-16	78795-78797	of	
287-17	78798-78805	Service	
287-18	78806-78807	(	
287-19	78807-78810	DoS	
287-20	78810-78811	)	
287-21	78812-78819	attacks	
287-22	78820-78822	if	
287-23	78822-78823	,	
287-24	78824-78827	and	
287-25	78828-78832	only	
287-26	78833-78835	if	
287-27	78835-78836	,	
287-28	78837-78841	your	
287-29	78842-78843	#	
287-30	78844-78855	application	
287-31	78856-78859	can	
287-32	78860-78866	handle	
287-33	78867-78870	the	
287-34	78871-78874	TCP	
287-35	78875-78879	load	
287-36	78880-78882	at	
287-37	78883-78886	the	
287-38	78887-78891	cost	
287-39	78892-78894	of	
287-40	78895-78899	more	
287-41	78900-78903	RAM	
287-42	78904-78907	and	
287-43	78908-78911	CPU	
287-44	78912-78916	time	
287-45	78916-78917	.	
287-46	78918-78919	#	
287-47	78920-78925	Nginx	
287-48	78926-78930	sets	
287-49	78931-78933	is	
287-50	78934-78941	backlog	
287-51	78942-78947	queue	
287-52	78948-78950	to	
287-53	78951-78954	the	
287-54	78955-78959	same	
287-55	78960-78962	as	
287-56	78963-78966	the	
287-57	78967-78969	OS	
287-58	78970-78979	somaxconn	
287-59	78980-78982	by	
287-60	78983-78990	default	
287-61	78990-78991	.	
287-62	78992-78993	#	
287-63	78994-78998	Note	
287-64	78998-78999	:	
287-65	79000-79001	"	
287-66	79001-79019	kern.ipc.somaxconn	
287-67	79019-79020	"	
287-68	79021-79023	is	
287-69	79024-79027	not	
287-70	79028-79033	shown	
287-71	79034-79036	in	
287-72	79037-79038	"	
287-73	79038-79044	sysctl	
287-74	79045-79046	-	
287-75	79046-79047	a	
287-76	79047-79048	"	
287-77	79049-79055	output	
287-78	79055-79056	,	
287-79	79057-79060	but	
287-80	79061-79070	searching	
287-81	79071-79072	#	
287-82	79073-79076	for	
287-83	79077-79078	"	
287-84	79078-79100	kern.ipc.soacceptqueue	
287-85	79100-79101	"	
287-86	79102-79107	gives	
287-87	79108-79111	the	
287-88	79112-79116	same	
287-89	79117-79122	value	
287-90	79123-79126	and	
287-91	79127-79131	both	
287-92	79132-79142	directives	
287-93	79143-79148	stand	
287-94	79149-79150	#	
287-95	79151-79154	for	
287-96	79155-79158	the	
287-97	79159-79163	same	
287-98	79164-79170	buffer	
287-99	79171-79176	value	
287-100	79176-79177	.	

#Text=#kern.ipc.soacceptqueue=1024
#Text=# (default 128 ; same as kern.ipc.somaxconn)
#Text=# The TCP window scale (rfc3390) option is used to increase the TCP receive
#Text=# window size above its maximum value of 65,535 bytes (64k).
288-1	79178-79179	#	
288-2	79179-79201	kern.ipc.soacceptqueue	
288-3	79201-79202	=	
288-4	79202-79206	1024	
288-5	79207-79208	#	
288-6	79209-79210	(	
288-7	79210-79217	default	
288-8	79218-79221	128	
288-9	79222-79223	;	
288-10	79224-79228	same	
288-11	79229-79231	as	
288-12	79232-79250	kern.ipc.somaxconn	
288-13	79250-79251	)	
288-14	79252-79253	#	
288-15	79254-79257	The	
288-16	79258-79261	TCP	
288-17	79262-79268	window	
288-18	79269-79274	scale	
288-19	79275-79276	(	
288-20	79276-79283	rfc3390	
288-21	79283-79284	)	
288-22	79285-79291	option	
288-23	79292-79294	is	
288-24	79295-79299	used	
288-25	79300-79302	to	
288-26	79303-79311	increase	
288-27	79312-79315	the	
288-28	79316-79319	TCP	
288-29	79320-79327	receive	
288-30	79328-79329	#	
288-31	79330-79336	window	
288-32	79337-79341	size	
288-33	79342-79347	above	
288-34	79348-79351	its	
288-35	79352-79359	maximum	
288-36	79360-79365	value	
288-37	79366-79368	of	
288-38	79369-79375	65,535	
288-39	79376-79381	bytes	
288-40	79382-79383	(	
288-41	79383-79386	64k	
288-42	79386-79387	)	
288-43	79387-79388	.	

#Text=TCP Time Stamps
#Text=# (rfc1323) allow nearly every segment, including retransmissions, to be
#Text=# accurately timed at negligible computational cost.
289-1	79389-79392	TCP	
289-2	79393-79397	Time	
289-3	79398-79404	Stamps	
289-4	79405-79406	#	
289-5	79407-79408	(	
289-6	79408-79415	rfc1323	
289-7	79415-79416	)	
289-8	79417-79422	allow	
289-9	79423-79429	nearly	
289-10	79430-79435	every	
289-11	79436-79443	segment	
289-12	79443-79444	,	
289-13	79445-79454	including	
289-14	79455-79470	retransmissions	
289-15	79470-79471	,	
289-16	79472-79474	to	
289-17	79475-79477	be	
289-18	79478-79479	#	
289-19	79480-79490	accurately	
289-20	79491-79496	timed	
289-21	79497-79499	at	
289-22	79500-79510	negligible	
289-23	79511-79524	computational	
289-24	79525-79529	cost	
289-25	79529-79530	.	

#Text=Both options should be
#Text=# enabled by default.
290-1	79531-79535	Both	
290-2	79536-79543	options	
290-3	79544-79550	should	
290-4	79551-79553	be	
290-5	79554-79555	#	
290-6	79556-79563	enabled	
290-7	79564-79566	by	
290-8	79567-79574	default	
290-9	79574-79575	.	

#Text=Enhancing TCP Loss Recovery (rfc3042) says on packet
#Text=# loss, trigger the fast retransmit algorithm instead of tcp timeout.
291-1	79576-79585	Enhancing	
291-2	79586-79589	TCP	
291-3	79590-79594	Loss	
291-4	79595-79603	Recovery	
291-5	79604-79605	(	
291-6	79605-79612	rfc3042	
291-7	79612-79613	)	
291-8	79614-79618	says	
291-9	79619-79621	on	
291-10	79622-79628	packet	
291-11	79629-79630	#	
291-12	79631-79635	loss	
291-13	79635-79636	,	
291-14	79637-79644	trigger	
291-15	79645-79648	the	
291-16	79649-79653	fast	
291-17	79654-79664	retransmit	
291-18	79665-79674	algorithm	
291-19	79675-79682	instead	
291-20	79683-79685	of	
291-21	79686-79689	tcp	
291-22	79690-79697	timeout	
291-23	79697-79698	.	

#Text=#net.inet.tcp.rfc1323=1
#Text=# (default 1)
#Text=#net.inet.tcp.rfc3042=1
#Text=# (default 1)
#Text=#net.inet.tcp.rfc3390=1
#Text=# (default 1)
#Text=# FreeBSD limits the maximum number of TCP reset (RST) and ICMP Unreachable
#Text=# packets the server will send every second.
292-1	79699-79700	#	
292-2	79700-79720	net.inet.tcp.rfc1323	
292-3	79720-79721	=	
292-4	79721-79722	1	
292-5	79723-79724	#	
292-6	79725-79726	(	
292-7	79726-79733	default	
292-8	79734-79735	1	
292-9	79735-79736	)	
292-10	79737-79738	#	
292-11	79738-79758	net.inet.tcp.rfc3042	
292-12	79758-79759	=	
292-13	79759-79760	1	
292-14	79761-79762	#	
292-15	79763-79764	(	
292-16	79764-79771	default	
292-17	79772-79773	1	
292-18	79773-79774	)	
292-19	79775-79776	#	
292-20	79776-79796	net.inet.tcp.rfc3390	
292-21	79796-79797	=	
292-22	79797-79798	1	
292-23	79799-79800	#	
292-24	79801-79802	(	
292-25	79802-79809	default	
292-26	79810-79811	1	
292-27	79811-79812	)	
292-28	79813-79814	#	
292-29	79815-79822	FreeBSD	
292-30	79823-79829	limits	
292-31	79830-79833	the	
292-32	79834-79841	maximum	
292-33	79842-79848	number	
292-34	79849-79851	of	
292-35	79852-79855	TCP	
292-36	79856-79861	reset	
292-37	79862-79863	(	
292-38	79863-79866	RST	
292-39	79866-79867	)	
292-40	79868-79871	and	
292-41	79872-79876	ICMP	
292-42	79877-79888	Unreachable	
292-43	79889-79890	#	
292-44	79891-79898	packets	
292-45	79899-79902	the	
292-46	79903-79909	server	
292-47	79910-79914	will	
292-48	79915-79919	send	
292-49	79920-79925	every	
292-50	79926-79932	second	
292-51	79932-79933	.	

#Text=Limiting reply packets helps curb
#Text=# the effects of Brute-force TCP denial of service (DoS) attacks and UDP port
#Text=# scans.
293-1	79934-79942	Limiting	
293-2	79943-79948	reply	
293-3	79949-79956	packets	
293-4	79957-79962	helps	
293-5	79963-79967	curb	
293-6	79968-79969	#	
293-7	79970-79973	the	
293-8	79974-79981	effects	
293-9	79982-79984	of	
293-10	79985-79996	Brute-force	
293-11	79997-80000	TCP	
293-12	80001-80007	denial	
293-13	80008-80010	of	
293-14	80011-80018	service	
293-15	80019-80020	(	
293-16	80020-80023	DoS	
293-17	80023-80024	)	
293-18	80025-80032	attacks	
293-19	80033-80036	and	
293-20	80037-80040	UDP	
293-21	80041-80045	port	
293-22	80046-80047	#	
293-23	80048-80053	scans	
293-24	80053-80054	.	

#Text=Also, when Pf firewall client states expire FreeBSD will send out RST
#Text=# packets to tell the client the connection is closed.
294-1	80055-80059	Also	
294-2	80059-80060	,	
294-3	80061-80065	when	
294-4	80066-80068	Pf	
294-5	80069-80077	firewall	
294-6	80078-80084	client	
294-7	80085-80091	states	
294-8	80092-80098	expire	
294-9	80099-80106	FreeBSD	
294-10	80107-80111	will	
294-11	80112-80116	send	
294-12	80117-80120	out	
294-13	80121-80124	RST	
294-14	80125-80126	#	
294-15	80127-80134	packets	
294-16	80135-80137	to	
294-17	80138-80142	tell	
294-18	80143-80146	the	
294-19	80147-80153	client	
294-20	80154-80157	the	
294-21	80158-80168	connection	
294-22	80169-80171	is	
294-23	80172-80178	closed	
294-24	80178-80179	.	

#Text=By default, FreeBSD will
#Text=# send out 200 packets per second.
295-1	80180-80182	By	
295-2	80183-80190	default	
295-3	80190-80191	,	
295-4	80192-80199	FreeBSD	
295-5	80200-80204	will	
295-6	80205-80206	#	
295-7	80207-80211	send	
295-8	80212-80215	out	
295-9	80216-80219	200	
295-10	80220-80227	packets	
295-11	80228-80231	per	
295-12	80232-80238	second	
295-13	80238-80239	.	

#Text=#net.inet.icmp.icmplim=1
#Text=# (default 200)
#Text=#net.inet.icmp.icmplim_output=0
#Text=# (default 1)
#Text=# Selective Acknowledgment (SACK) allows the receiver to inform the sender of
#Text=# packets which have been received and if any packets were dropped.
296-1	80240-80241	#	
296-2	80241-80262	net.inet.icmp.icmplim	
296-3	80262-80263	=	
296-4	80263-80264	1	
296-5	80265-80266	#	
296-6	80267-80268	(	
296-7	80268-80275	default	
296-8	80276-80279	200	
296-9	80279-80280	)	
296-10	80281-80282	#	
296-11	80282-80310	net.inet.icmp.icmplim_output	
296-12	80310-80311	=	
296-13	80311-80312	0	
296-14	80313-80314	#	
296-15	80315-80316	(	
296-16	80316-80323	default	
296-17	80324-80325	1	
296-18	80325-80326	)	
296-19	80327-80328	#	
296-20	80329-80338	Selective	
296-21	80339-80353	Acknowledgment	
296-22	80354-80355	(	
296-23	80355-80359	SACK	
296-24	80359-80360	)	
296-25	80361-80367	allows	
296-26	80368-80371	the	
296-27	80372-80380	receiver	
296-28	80381-80383	to	
296-29	80384-80390	inform	
296-30	80391-80394	the	
296-31	80395-80401	sender	
296-32	80402-80404	of	
296-33	80405-80406	#	
296-34	80407-80414	packets	
296-35	80415-80420	which	
296-36	80421-80425	have	
296-37	80426-80430	been	
296-38	80431-80439	received	
296-39	80440-80443	and	
296-40	80444-80446	if	
296-41	80447-80450	any	
296-42	80451-80458	packets	
296-43	80459-80463	were	
296-44	80464-80471	dropped	
296-45	80471-80472	.	

#Text=The sender
#Text=# can then selectively retransmit the missing data without needing to
#Text=# retransmit entire blocks of data that have already been received
#Text=# successfully.
297-1	80473-80476	The	
297-2	80477-80483	sender	
297-3	80484-80485	#	
297-4	80486-80489	can	
297-5	80490-80494	then	
297-6	80495-80506	selectively	
297-7	80507-80517	retransmit	
297-8	80518-80521	the	
297-9	80522-80529	missing	
297-10	80530-80534	data	
297-11	80535-80542	without	
297-12	80543-80550	needing	
297-13	80551-80553	to	
297-14	80554-80555	#	
297-15	80556-80566	retransmit	
297-16	80567-80573	entire	
297-17	80574-80580	blocks	
297-18	80581-80583	of	
297-19	80584-80588	data	
297-20	80589-80593	that	
297-21	80594-80598	have	
297-22	80599-80606	already	
297-23	80607-80611	been	
297-24	80612-80620	received	
297-25	80621-80622	#	
297-26	80623-80635	successfully	
297-27	80635-80636	.	

#Text=SACK option is not mandatory and support must be negotiated
#Text=# when the connection is established using TCP header options.
298-1	80637-80641	SACK	
298-2	80642-80648	option	
298-3	80649-80651	is	
298-4	80652-80655	not	
298-5	80656-80665	mandatory	
298-6	80666-80669	and	
298-7	80670-80677	support	
298-8	80678-80682	must	
298-9	80683-80685	be	
298-10	80686-80696	negotiated	
298-11	80697-80698	#	
298-12	80699-80703	when	
298-13	80704-80707	the	
298-14	80708-80718	connection	
298-15	80719-80721	is	
298-16	80722-80733	established	
298-17	80734-80739	using	
298-18	80740-80743	TCP	
298-19	80744-80750	header	
298-20	80751-80758	options	
298-21	80758-80759	.	

#Text=An attacker
#Text=# downloading large files can abuse SACK by asking for many random segments to
#Text=# be retransmitted.
299-1	80760-80762	An	
299-2	80763-80771	attacker	
299-3	80772-80773	#	
299-4	80774-80785	downloading	
299-5	80786-80791	large	
299-6	80792-80797	files	
299-7	80798-80801	can	
299-8	80802-80807	abuse	
299-9	80808-80812	SACK	
299-10	80813-80815	by	
299-11	80816-80822	asking	
299-12	80823-80826	for	
299-13	80827-80831	many	
299-14	80832-80838	random	
299-15	80839-80847	segments	
299-16	80848-80850	to	
299-17	80851-80852	#	
299-18	80853-80855	be	
299-19	80856-80869	retransmitted	
299-20	80869-80870	.	

#Text=The server in response wastes system resources trying to
#Text=# fulfill superfluous requests.
300-1	80871-80874	The	
300-2	80875-80881	server	
300-3	80882-80884	in	
300-4	80885-80893	response	
300-5	80894-80900	wastes	
300-6	80901-80907	system	
300-7	80908-80917	resources	
300-8	80918-80924	trying	
300-9	80925-80927	to	
300-10	80928-80929	#	
300-11	80930-80937	fulfill	
300-12	80938-80949	superfluous	
300-13	80950-80958	requests	
300-14	80958-80959	.	

#Text=If you are serving small files to low latency
#Text=# clients then SACK can be disabled.
301-1	80960-80962	If	
301-2	80963-80966	you	
301-3	80967-80970	are	
301-4	80971-80978	serving	
301-5	80979-80984	small	
301-6	80985-80990	files	
301-7	80991-80993	to	
301-8	80994-80997	low	
301-9	80998-81005	latency	
301-10	81006-81007	#	
301-11	81008-81015	clients	
301-12	81016-81020	then	
301-13	81021-81025	SACK	
301-14	81026-81029	can	
301-15	81030-81032	be	
301-16	81033-81041	disabled	
301-17	81041-81042	.	

#Text=If you see issues of flows randomly
#Text=# pausing, try disabling SACK to see if there is equipment in the path which
#Text=# does not handle SACK correctly.
302-1	81043-81045	If	
302-2	81046-81049	you	
302-3	81050-81053	see	
302-4	81054-81060	issues	
302-5	81061-81063	of	
302-6	81064-81069	flows	
302-7	81070-81078	randomly	
302-8	81079-81080	#	
302-9	81081-81088	pausing	
302-10	81088-81089	,	
302-11	81090-81093	try	
302-12	81094-81103	disabling	
302-13	81104-81108	SACK	
302-14	81109-81111	to	
302-15	81112-81115	see	
302-16	81116-81118	if	
302-17	81119-81124	there	
302-18	81125-81127	is	
302-19	81128-81137	equipment	
302-20	81138-81140	in	
302-21	81141-81144	the	
302-22	81145-81149	path	
302-23	81150-81155	which	
302-24	81156-81157	#	
302-25	81158-81162	does	
302-26	81163-81166	not	
302-27	81167-81173	handle	
302-28	81174-81178	SACK	
302-29	81179-81188	correctly	
302-30	81188-81189	.	

#Text=#net.inet.tcp.sack.enable=1
#Text=# (default 1)
#Text=# host cache is the client's cached tcp connection details and metrics (TTL,
#Text=# SSTRESH and VARTTL) the server can use to improve future performance of
#Text=# connections between the same two hosts.
303-1	81190-81191	#	
303-2	81191-81215	net.inet.tcp.sack.enable	
303-3	81215-81216	=	
303-4	81216-81217	1	
303-5	81218-81219	#	
303-6	81220-81221	(	
303-7	81221-81228	default	
303-8	81229-81230	1	
303-9	81230-81231	)	
303-10	81232-81233	#	
303-11	81234-81238	host	
303-12	81239-81244	cache	
303-13	81245-81247	is	
303-14	81248-81251	the	
303-15	81252-81260	client's	
303-16	81261-81267	cached	
303-17	81268-81271	tcp	
303-18	81272-81282	connection	
303-19	81283-81290	details	
303-20	81291-81294	and	
303-21	81295-81302	metrics	
303-22	81303-81304	(	
303-23	81304-81307	TTL	
303-24	81307-81308	,	
303-25	81309-81310	#	
303-26	81311-81318	SSTRESH	
303-27	81319-81322	and	
303-28	81323-81329	VARTTL	
303-29	81329-81330	)	
303-30	81331-81334	the	
303-31	81335-81341	server	
303-32	81342-81345	can	
303-33	81346-81349	use	
303-34	81350-81352	to	
303-35	81353-81360	improve	
303-36	81361-81367	future	
303-37	81368-81379	performance	
303-38	81380-81382	of	
303-39	81383-81384	#	
303-40	81385-81396	connections	
303-41	81397-81404	between	
303-42	81405-81408	the	
303-43	81409-81413	same	
303-44	81414-81417	two	
303-45	81418-81423	hosts	
303-46	81423-81424	.	

#Text=When a tcp connection is completed,
#Text=# our server will cache information about the connection until an expire
#Text=# timeout.
304-1	81425-81429	When	
304-2	81430-81431	a	
304-3	81432-81435	tcp	
304-4	81436-81446	connection	
304-5	81447-81449	is	
304-6	81450-81459	completed	
304-7	81459-81460	,	
304-8	81461-81462	#	
304-9	81463-81466	our	
304-10	81467-81473	server	
304-11	81474-81478	will	
304-12	81479-81484	cache	
304-13	81485-81496	information	
304-14	81497-81502	about	
304-15	81503-81506	the	
304-16	81507-81517	connection	
304-17	81518-81523	until	
304-18	81524-81526	an	
304-19	81527-81533	expire	
304-20	81534-81535	#	
304-21	81536-81543	timeout	
304-22	81543-81544	.	

#Text=If a new connection between the same client is initiated before the
#Text=# cache has expired, the connection will use the cached connection details to
#Text=# setup the connection's internal variables.
305-1	81545-81547	If	
305-2	81548-81549	a	
305-3	81550-81553	new	
305-4	81554-81564	connection	
305-5	81565-81572	between	
305-6	81573-81576	the	
305-7	81577-81581	same	
305-8	81582-81588	client	
305-9	81589-81591	is	
305-10	81592-81601	initiated	
305-11	81602-81608	before	
305-12	81609-81612	the	
305-13	81613-81614	#	
305-14	81615-81620	cache	
305-15	81621-81624	has	
305-16	81625-81632	expired	
305-17	81632-81633	,	
305-18	81634-81637	the	
305-19	81638-81648	connection	
305-20	81649-81653	will	
305-21	81654-81657	use	
305-22	81658-81661	the	
305-23	81662-81668	cached	
305-24	81669-81679	connection	
305-25	81680-81687	details	
305-26	81688-81690	to	
305-27	81691-81692	#	
305-28	81693-81698	setup	
305-29	81699-81702	the	
305-30	81703-81715	connection's	
305-31	81716-81724	internal	
305-32	81725-81734	variables	
305-33	81734-81735	.	

#Text=This pre-cached setup allows the
#Text=# client and server to reach optimal performance significantly faster because
#Text=# the server will not need to go through the usual steps of re-learning the
#Text=# optimal parameters for the connection.
306-1	81736-81740	This	
306-2	81741-81751	pre-cached	
306-3	81752-81757	setup	
306-4	81758-81764	allows	
306-5	81765-81768	the	
306-6	81769-81770	#	
306-7	81771-81777	client	
306-8	81778-81781	and	
306-9	81782-81788	server	
306-10	81789-81791	to	
306-11	81792-81797	reach	
306-12	81798-81805	optimal	
306-13	81806-81817	performance	
306-14	81818-81831	significantly	
306-15	81832-81838	faster	
306-16	81839-81846	because	
306-17	81847-81848	#	
306-18	81849-81852	the	
306-19	81853-81859	server	
306-20	81860-81864	will	
306-21	81865-81868	not	
306-22	81869-81873	need	
306-23	81874-81876	to	
306-24	81877-81879	go	
306-25	81880-81887	through	
306-26	81888-81891	the	
306-27	81892-81897	usual	
306-28	81898-81903	steps	
306-29	81904-81906	of	
306-30	81907-81918	re-learning	
306-31	81919-81922	the	
306-32	81923-81924	#	
306-33	81925-81932	optimal	
306-34	81933-81943	parameters	
306-35	81944-81947	for	
306-36	81948-81951	the	
306-37	81952-81962	connection	
306-38	81962-81963	.	

#Text=Unfortunately, this can also make
#Text=# performance worse because the hostcache will apply the exception case to
#Text=# every new connection from a client within the expire time.
307-1	81964-81977	Unfortunately	
307-2	81977-81978	,	
307-3	81979-81983	this	
307-4	81984-81987	can	
307-5	81988-81992	also	
307-6	81993-81997	make	
307-7	81998-81999	#	
307-8	82000-82011	performance	
307-9	82012-82017	worse	
307-10	82018-82025	because	
307-11	82026-82029	the	
307-12	82030-82039	hostcache	
307-13	82040-82044	will	
307-14	82045-82050	apply	
307-15	82051-82054	the	
307-16	82055-82064	exception	
307-17	82065-82069	case	
307-18	82070-82072	to	
307-19	82073-82074	#	
307-20	82075-82080	every	
307-21	82081-82084	new	
307-22	82085-82095	connection	
307-23	82096-82100	from	
307-24	82101-82102	a	
307-25	82103-82109	client	
307-26	82110-82116	within	
307-27	82117-82120	the	
307-28	82121-82127	expire	
307-29	82128-82132	time	
307-30	82132-82133	.	

#Text=In other words, in
#Text=# some cases, one person surfing your site from a mobile phone who has some
#Text=# random packet loss can reduce your server's performance to this visitor even
#Text=# when their temporary loss has cleared.
#Text=3900 seconds allows clients who
#Text=# connect regularly to stay in our hostcache.
308-1	82134-82136	In	
308-2	82137-82142	other	
308-3	82143-82148	words	
308-4	82148-82149	,	
308-5	82150-82152	in	
308-6	82153-82154	#	
308-7	82155-82159	some	
308-8	82160-82165	cases	
308-9	82165-82166	,	
308-10	82167-82170	one	
308-11	82171-82177	person	
308-12	82178-82185	surfing	
308-13	82186-82190	your	
308-14	82191-82195	site	
308-15	82196-82200	from	
308-16	82201-82202	a	
308-17	82203-82209	mobile	
308-18	82210-82215	phone	
308-19	82216-82219	who	
308-20	82220-82223	has	
308-21	82224-82228	some	
308-22	82229-82230	#	
308-23	82231-82237	random	
308-24	82238-82244	packet	
308-25	82245-82249	loss	
308-26	82250-82253	can	
308-27	82254-82260	reduce	
308-28	82261-82265	your	
308-29	82266-82274	server's	
308-30	82275-82286	performance	
308-31	82287-82289	to	
308-32	82290-82294	this	
308-33	82295-82302	visitor	
308-34	82303-82307	even	
308-35	82308-82309	#	
308-36	82310-82314	when	
308-37	82315-82320	their	
308-38	82321-82330	temporary	
308-39	82331-82335	loss	
308-40	82336-82339	has	
308-41	82340-82347	cleared	
308-42	82347-82348	.	
308-43	82349-82353	3900	
308-44	82354-82361	seconds	
308-45	82362-82368	allows	
308-46	82369-82376	clients	
308-47	82377-82380	who	
308-48	82381-82382	#	
308-49	82383-82390	connect	
308-50	82391-82400	regularly	
308-51	82401-82403	to	
308-52	82404-82408	stay	
308-53	82409-82411	in	
308-54	82412-82415	our	
308-55	82416-82425	hostcache	
308-56	82425-82426	.	

#Text=To view the current host cache
#Text=# stats use "sysctl net.inet.tcp.hostcache.list" .
309-1	82427-82429	To	
309-2	82430-82434	view	
309-3	82435-82438	the	
309-4	82439-82446	current	
309-5	82447-82451	host	
309-6	82452-82457	cache	
309-7	82458-82459	#	
309-8	82460-82465	stats	
309-9	82466-82469	use	
309-10	82470-82471	"	
309-11	82471-82477	sysctl	
309-12	82478-82505	net.inet.tcp.hostcache.list	
309-13	82505-82506	"	
309-14	82507-82508	.	

#Text=If you have
#Text=# "net.inet.tcp.hostcache.cachelimit=0" like in our /boot/loader.conf example
#Text=# then this expire time is negated and not uesd.
310-1	82509-82511	If	
310-2	82512-82515	you	
310-3	82516-82520	have	
310-4	82521-82522	#	
310-5	82523-82524	"	
310-6	82524-82557	net.inet.tcp.hostcache.cachelimit	
310-7	82557-82558	=	
310-8	82558-82559	0	
310-9	82559-82560	"	
310-10	82561-82565	like	
310-11	82566-82568	in	
310-12	82569-82572	our	
310-13	82573-82574	/	
310-14	82574-82578	boot	
310-15	82578-82579	/	
310-16	82579-82590	loader.conf	
310-17	82591-82598	example	
310-18	82599-82600	#	
310-19	82601-82605	then	
310-20	82606-82610	this	
310-21	82611-82617	expire	
310-22	82618-82622	time	
310-23	82623-82625	is	
310-24	82626-82633	negated	
310-25	82634-82637	and	
310-26	82638-82641	not	
310-27	82642-82646	uesd	
310-28	82646-82647	.	

#Text=#net.inet.tcp.hostcache.expire=3900
#Text=# (default 3600)
#Text=# By default, acks are delayed by 100 ms or sent every other packet in order to
#Text=# improve the chance of being added to another returned data packet which is
#Text=# full.
311-1	82648-82649	#	
311-2	82649-82678	net.inet.tcp.hostcache.expire	
311-3	82678-82679	=	
311-4	82679-82683	3900	
311-5	82684-82685	#	
311-6	82686-82687	(	
311-7	82687-82694	default	
311-8	82695-82699	3600	
311-9	82699-82700	)	
311-10	82701-82702	#	
311-11	82703-82705	By	
311-12	82706-82713	default	
311-13	82713-82714	,	
311-14	82715-82719	acks	
311-15	82720-82723	are	
311-16	82724-82731	delayed	
311-17	82732-82734	by	
311-18	82735-82738	100	
311-19	82739-82741	ms	
311-20	82742-82744	or	
311-21	82745-82749	sent	
311-22	82750-82755	every	
311-23	82756-82761	other	
311-24	82762-82768	packet	
311-25	82769-82771	in	
311-26	82772-82777	order	
311-27	82778-82780	to	
311-28	82781-82782	#	
311-29	82783-82790	improve	
311-30	82791-82794	the	
311-31	82795-82801	chance	
311-32	82802-82804	of	
311-33	82805-82810	being	
311-34	82811-82816	added	
311-35	82817-82819	to	
311-36	82820-82827	another	
311-37	82828-82836	returned	
311-38	82837-82841	data	
311-39	82842-82848	packet	
311-40	82849-82854	which	
311-41	82855-82857	is	
311-42	82858-82859	#	
311-43	82860-82864	full	
311-44	82864-82865	.	

#Text=This method can cut the number of tiny packets flowing across the
#Text=# network and is efficient.
312-1	82866-82870	This	
312-2	82871-82877	method	
312-3	82878-82881	can	
312-4	82882-82885	cut	
312-5	82886-82889	the	
312-6	82890-82896	number	
312-7	82897-82899	of	
312-8	82900-82904	tiny	
312-9	82905-82912	packets	
312-10	82913-82920	flowing	
312-11	82921-82927	across	
312-12	82928-82931	the	
312-13	82932-82933	#	
312-14	82934-82941	network	
312-15	82942-82945	and	
312-16	82946-82948	is	
312-17	82949-82958	efficient	
312-18	82958-82959	.	

#Text=But, delayed ACKs cause issues on modern, short
#Text=# hop, low latency networks.
313-1	82960-82963	But	
313-2	82963-82964	,	
313-3	82965-82972	delayed	
313-4	82973-82977	ACKs	
313-5	82978-82983	cause	
313-6	82984-82990	issues	
313-7	82991-82993	on	
313-8	82994-83000	modern	
313-9	83000-83001	,	
313-10	83002-83007	short	
313-11	83008-83009	#	
313-12	83010-83013	hop	
313-13	83013-83014	,	
313-14	83015-83018	low	
313-15	83019-83026	latency	
313-16	83027-83035	networks	
313-17	83035-83036	.	

#Text=TCP works by increasing the congestion window,
#Text=# which is the amount of data currently traveling on the wire, based on the
#Text=# number of ACKs received per time frame.
314-1	83037-83040	TCP	
314-2	83041-83046	works	
314-3	83047-83049	by	
314-4	83050-83060	increasing	
314-5	83061-83064	the	
314-6	83065-83075	congestion	
314-7	83076-83082	window	
314-8	83082-83083	,	
314-9	83084-83085	#	
314-10	83086-83091	which	
314-11	83092-83094	is	
314-12	83095-83098	the	
314-13	83099-83105	amount	
314-14	83106-83108	of	
314-15	83109-83113	data	
314-16	83114-83123	currently	
314-17	83124-83133	traveling	
314-18	83134-83136	on	
314-19	83137-83140	the	
314-20	83141-83145	wire	
314-21	83145-83146	,	
314-22	83147-83152	based	
314-23	83153-83155	on	
314-24	83156-83159	the	
314-25	83160-83161	#	
314-26	83162-83168	number	
314-27	83169-83171	of	
314-28	83172-83176	ACKs	
314-29	83177-83185	received	
314-30	83186-83189	per	
314-31	83190-83194	time	
314-32	83195-83200	frame	
314-33	83200-83201	.	

#Text=Delaying the timing of the ACKs
#Text=# received results in less data on the wire, time in TCP slowstart is doubled
#Text=# and in congestion avoidance after packet loss the congestion window growth is
#Text=# slowed.
315-1	83202-83210	Delaying	
315-2	83211-83214	the	
315-3	83215-83221	timing	
315-4	83222-83224	of	
315-5	83225-83228	the	
315-6	83229-83233	ACKs	
315-7	83234-83235	#	
315-8	83236-83244	received	
315-9	83245-83252	results	
315-10	83253-83255	in	
315-11	83256-83260	less	
315-12	83261-83265	data	
315-13	83266-83268	on	
315-14	83269-83272	the	
315-15	83273-83277	wire	
315-16	83277-83278	,	
315-17	83279-83283	time	
315-18	83284-83286	in	
315-19	83287-83290	TCP	
315-20	83291-83300	slowstart	
315-21	83301-83303	is	
315-22	83304-83311	doubled	
315-23	83312-83313	#	
315-24	83314-83317	and	
315-25	83318-83320	in	
315-26	83321-83331	congestion	
315-27	83332-83341	avoidance	
315-28	83342-83347	after	
315-29	83348-83354	packet	
315-30	83355-83359	loss	
315-31	83360-83363	the	
315-32	83364-83374	congestion	
315-33	83375-83381	window	
315-34	83382-83388	growth	
315-35	83389-83391	is	
315-36	83392-83393	#	
315-37	83394-83400	slowed	
315-38	83400-83401	.	

#Text=Setting delacktime higher then 100 will to slow downloads as ACKs
#Text=# are queued too long.
316-1	83402-83409	Setting	
316-2	83410-83420	delacktime	
316-3	83421-83427	higher	
316-4	83428-83432	then	
316-5	83433-83436	100	
316-6	83437-83441	will	
316-7	83442-83444	to	
316-8	83445-83449	slow	
316-9	83450-83459	downloads	
316-10	83460-83462	as	
316-11	83463-83467	ACKs	
316-12	83468-83469	#	
316-13	83470-83473	are	
316-14	83474-83480	queued	
316-15	83481-83484	too	
316-16	83485-83489	long	
316-17	83489-83490	.	

#Text=On low latecy 10gig links we find a value of 20ms is
#Text=# optimal. http://www.tel.uva.es/personales/ignmig/pdfs/ogonzalez_NOC05.pdf
#Text=#net.inet.tcp.delayed_ack=1
#Text=# (default 1)
#Text=#net.inet.tcp.delacktime=20
#Text=# (default 100)
#Text=# security settings for jailed environments. it is generally a good idea to
#Text=# separately jail any service which is accessible by an external client like
#Text=# the web or mail server.
317-1	83491-83493	On	
317-2	83494-83497	low	
317-3	83498-83504	latecy	
317-4	83505-83510	10gig	
317-5	83511-83516	links	
317-6	83517-83519	we	
317-7	83520-83524	find	
317-8	83525-83526	a	
317-9	83527-83532	value	
317-10	83533-83535	of	
317-11	83536-83540	20ms	
317-12	83541-83543	is	
317-13	83544-83545	#	
317-14	83546-83553	optimal	
317-15	83553-83554	.	
317-16	83555-83559	http	
317-17	83559-83560	:	
317-18	83560-83561	/	
317-19	83561-83562	/	
317-20	83562-83576	www.tel.uva.es	
317-21	83576-83577	/	
317-22	83577-83587	personales	
317-23	83587-83588	/	
317-24	83588-83594	ignmig	
317-25	83594-83595	/	
317-26	83595-83599	pdfs	
317-27	83599-83600	/	
317-28	83600-83615	ogonzalez_NOC05	
317-29	83615-83616	.	
317-30	83616-83619	pdf	
317-31	83620-83621	#	
317-32	83621-83645	net.inet.tcp.delayed_ack	
317-33	83645-83646	=	
317-34	83646-83647	1	
317-35	83648-83649	#	
317-36	83650-83651	(	
317-37	83651-83658	default	
317-38	83659-83660	1	
317-39	83660-83661	)	
317-40	83662-83663	#	
317-41	83663-83686	net.inet.tcp.delacktime	
317-42	83686-83687	=	
317-43	83687-83689	20	
317-44	83690-83691	#	
317-45	83692-83693	(	
317-46	83693-83700	default	
317-47	83701-83704	100	
317-48	83704-83705	)	
317-49	83706-83707	#	
317-50	83708-83716	security	
317-51	83717-83725	settings	
317-52	83726-83729	for	
317-53	83730-83736	jailed	
317-54	83737-83749	environments	
317-55	83749-83750	.	
317-56	83751-83753	it	
317-57	83754-83756	is	
317-58	83757-83766	generally	
317-59	83767-83768	a	
317-60	83769-83773	good	
317-61	83774-83778	idea	
317-62	83779-83781	to	
317-63	83782-83783	#	
317-64	83784-83794	separately	
317-65	83795-83799	jail	
317-66	83800-83803	any	
317-67	83804-83811	service	
317-68	83812-83817	which	
317-69	83818-83820	is	
317-70	83821-83831	accessible	
317-71	83832-83834	by	
317-72	83835-83837	an	
317-73	83838-83846	external	
317-74	83847-83853	client	
317-75	83854-83858	like	
317-76	83859-83860	#	
317-77	83861-83864	the	
317-78	83865-83868	web	
317-79	83869-83871	or	
317-80	83872-83876	mail	
317-81	83877-83883	server	
317-82	83883-83884	.	

#Text=This is especially true for public facing services.
#Text=# take a look at ezjail, http://forums.freebsd.org/showthread.php?
318-1	83885-83889	This	
318-2	83890-83892	is	
318-3	83893-83903	especially	
318-4	83904-83908	true	
318-5	83909-83912	for	
318-6	83913-83919	public	
318-7	83920-83926	facing	
318-8	83927-83935	services	
318-9	83935-83936	.	
318-10	83937-83938	#	
318-11	83939-83943	take	
318-12	83944-83945	a	
318-13	83946-83950	look	
318-14	83951-83953	at	
318-15	83954-83960	ezjail	
318-16	83960-83961	,	
318-17	83962-83966	http	
318-18	83966-83967	:	
318-19	83967-83968	/	
318-20	83968-83969	/	
318-21	83969-83987	forums.freebsd.org	
318-22	83987-83988	/	
318-23	83988-84002	showthread.php	
318-24	84002-84003	?	

#Text=t=16860
#Text=#security.jail.allow_raw_sockets=1
#Text=# (default 0)
#Text=#security.jail.enforce_statfs=2
#Text=# (default 2)
#Text=#security.jail.set_hostname_allowed=0
#Text=# (default 1)
#Text=#security.jail.socket_unixiproute_only=1 # (default 1)
#Text=#security.jail.sysvipc_allowed=0
#Text=# (default 0)
#Text=#security.jail.chflags_allowed=0
#Text=# (default 0)
#Text=# decrease the scheduler maximum time slice for lower latency program calls.
#Text=# by default we use stathz/10 which equals thirteen(13). also, decrease the
#Text=# scheduler maximum time for interactive programs as this is a dedicated
#Text=# server (default 30).
319-1	84003-84004	t	
319-2	84004-84005	=	
319-3	84005-84010	16860	
319-4	84011-84012	#	
319-5	84012-84043	security.jail.allow_raw_sockets	
319-6	84043-84044	=	
319-7	84044-84045	1	
319-8	84046-84047	#	
319-9	84048-84049	(	
319-10	84049-84056	default	
319-11	84057-84058	0	
319-12	84058-84059	)	
319-13	84060-84061	#	
319-14	84061-84089	security.jail.enforce_statfs	
319-15	84089-84090	=	
319-16	84090-84091	2	
319-17	84092-84093	#	
319-18	84094-84095	(	
319-19	84095-84102	default	
319-20	84103-84104	2	
319-21	84104-84105	)	
319-22	84106-84107	#	
319-23	84107-84141	security.jail.set_hostname_allowed	
319-24	84141-84142	=	
319-25	84142-84143	0	
319-26	84144-84145	#	
319-27	84146-84147	(	
319-28	84147-84154	default	
319-29	84155-84156	1	
319-30	84156-84157	)	
319-31	84158-84159	#	
319-32	84159-84196	security.jail.socket_unixiproute_only	
319-33	84196-84197	=	
319-34	84197-84198	1	
319-35	84199-84200	#	
319-36	84201-84202	(	
319-37	84202-84209	default	
319-38	84210-84211	1	
319-39	84211-84212	)	
319-40	84213-84214	#	
319-41	84214-84243	security.jail.sysvipc_allowed	
319-42	84243-84244	=	
319-43	84244-84245	0	
319-44	84246-84247	#	
319-45	84248-84249	(	
319-46	84249-84256	default	
319-47	84257-84258	0	
319-48	84258-84259	)	
319-49	84260-84261	#	
319-50	84261-84290	security.jail.chflags_allowed	
319-51	84290-84291	=	
319-52	84291-84292	0	
319-53	84293-84294	#	
319-54	84295-84296	(	
319-55	84296-84303	default	
319-56	84304-84305	0	
319-57	84305-84306	)	
319-58	84307-84308	#	
319-59	84309-84317	decrease	
319-60	84318-84321	the	
319-61	84322-84331	scheduler	
319-62	84332-84339	maximum	
319-63	84340-84344	time	
319-64	84345-84350	slice	
319-65	84351-84354	for	
319-66	84355-84360	lower	
319-67	84361-84368	latency	
319-68	84369-84376	program	
319-69	84377-84382	calls	
319-70	84382-84383	.	
319-71	84384-84385	#	
319-72	84386-84388	by	
319-73	84389-84396	default	
319-74	84397-84399	we	
319-75	84400-84403	use	
319-76	84404-84410	stathz	
319-77	84410-84411	/	
319-78	84411-84413	10	
319-79	84414-84419	which	
319-80	84420-84426	equals	
319-81	84427-84435	thirteen	
319-82	84435-84436	(	
319-83	84436-84438	13	
319-84	84438-84439	)	
319-85	84439-84440	.	
319-86	84441-84445	also	
319-87	84445-84446	,	
319-88	84447-84455	decrease	
319-89	84456-84459	the	
319-90	84460-84461	#	
319-91	84462-84471	scheduler	
319-92	84472-84479	maximum	
319-93	84480-84484	time	
319-94	84485-84488	for	
319-95	84489-84500	interactive	
319-96	84501-84509	programs	
319-97	84510-84512	as	
319-98	84513-84517	this	
319-99	84518-84520	is	
319-100	84521-84522	a	
319-101	84523-84532	dedicated	
319-102	84533-84534	#	
319-103	84535-84541	server	
319-104	84542-84543	(	
319-105	84543-84550	default	
319-106	84551-84553	30	
319-107	84553-84554	)	
319-108	84554-84555	.	

#Text=Also make sure you look into "kern.hz=100" in /boot/loader.conf
#Text=#kern.sched.interact=5 # (default 30)
#Text=#kern.sched.slice=3
#Text=# (default 12)
#Text=# threads per process
#Text=#kern.threads.max_threads_per_proc=9000
#Text=# create core dump file on "exited on signal 6"
#Text=#kern.coredump=1
#Text=# (default 1)
#Text=#kern.sugid_coredump=1
#Text=# (default 0)
#Text=#kern.corefile="/tmp/%N.core" # (default %N.core)
#Text=# TCP keep alive can help detecting network errors and signaling connection
#Text=# problems.
320-1	84556-84560	Also	
320-2	84561-84565	make	
320-3	84566-84570	sure	
320-4	84571-84574	you	
320-5	84575-84579	look	
320-6	84580-84584	into	
320-7	84585-84586	"	
320-8	84586-84593	kern.hz	
320-9	84593-84594	=	
320-10	84594-84597	100	
320-11	84597-84598	"	
320-12	84599-84601	in	
320-13	84602-84603	/	
320-14	84603-84607	boot	
320-15	84607-84608	/	
320-16	84608-84619	loader.conf	
320-17	84620-84621	#	
320-18	84621-84640	kern.sched.interact	
320-19	84640-84641	=	
320-20	84641-84642	5	
320-21	84643-84644	#	
320-22	84645-84646	(	
320-23	84646-84653	default	
320-24	84654-84656	30	
320-25	84656-84657	)	
320-26	84658-84659	#	
320-27	84659-84675	kern.sched.slice	
320-28	84675-84676	=	
320-29	84676-84677	3	
320-30	84678-84679	#	
320-31	84680-84681	(	
320-32	84681-84688	default	
320-33	84689-84691	12	
320-34	84691-84692	)	
320-35	84693-84694	#	
320-36	84695-84702	threads	
320-37	84703-84706	per	
320-38	84707-84714	process	
320-39	84715-84716	#	
320-40	84716-84749	kern.threads.max_threads_per_proc	
320-41	84749-84750	=	
320-42	84750-84754	9000	
320-43	84755-84756	#	
320-44	84757-84763	create	
320-45	84764-84768	core	
320-46	84769-84773	dump	
320-47	84774-84778	file	
320-48	84779-84781	on	
320-49	84782-84783	"	
320-50	84783-84789	exited	
320-51	84790-84792	on	
320-52	84793-84799	signal	
320-53	84800-84801	6	
320-54	84801-84802	"	
320-55	84803-84804	#	
320-56	84804-84817	kern.coredump	
320-57	84817-84818	=	
320-58	84818-84819	1	
320-59	84820-84821	#	
320-60	84822-84823	(	
320-61	84823-84830	default	
320-62	84831-84832	1	
320-63	84832-84833	)	
320-64	84834-84835	#	
320-65	84835-84854	kern.sugid_coredump	
320-66	84854-84855	=	
320-67	84855-84856	1	
320-68	84857-84858	#	
320-69	84859-84860	(	
320-70	84860-84867	default	
320-71	84868-84869	0	
320-72	84869-84870	)	
320-73	84871-84872	#	
320-74	84872-84885	kern.corefile	
320-75	84885-84886	=	
320-76	84886-84887	"	
320-77	84887-84888	/	
320-78	84888-84891	tmp	
320-79	84891-84892	/	
320-80	84892-84893	%	
320-81	84893-84899	N.core	
320-82	84899-84900	"	
320-83	84901-84902	#	
320-84	84903-84904	(	
320-85	84904-84911	default	
320-86	84912-84913	%	
320-87	84913-84919	N.core	
320-88	84919-84920	)	
320-89	84921-84922	#	
320-90	84923-84926	TCP	
320-91	84927-84931	keep	
320-92	84932-84937	alive	
320-93	84938-84941	can	
320-94	84942-84946	help	
320-95	84947-84956	detecting	
320-96	84957-84964	network	
320-97	84965-84971	errors	
320-98	84972-84975	and	
320-99	84976-84985	signaling	
320-100	84986-84996	connection	
320-101	84997-84998	#	
320-102	84999-85007	problems	
320-103	85007-85008	.	

#Text=Keep alives will increase signaling bandwidth used, but as
#Text=# bandwidth utilized by signaling channels is low from its nature, the increase
#Text=# is insignificant. the system will disconnect a dead TCP connection when the
#Text=# remote peer is dead or unresponsive for: 10000 + (5000 x 8) = 50000 msec (50
#Text=# sec)
#Text=#net.inet.tcp.keepidle=10000
#Text=# (default 7200000 )
#Text=#net.inet.tcp.keepintvl=5000
#Text=# (default 75000 )
#Text=#net.inet.tcp.always_keepalive=1 # (default 1)
#Text=# UFS hard drive read ahead equivalent to 4 MiB at 32KiB block size.
321-1	85009-85013	Keep	
321-2	85014-85020	alives	
321-3	85021-85025	will	
321-4	85026-85034	increase	
321-5	85035-85044	signaling	
321-6	85045-85054	bandwidth	
321-7	85055-85059	used	
321-8	85059-85060	,	
321-9	85061-85064	but	
321-10	85065-85067	as	
321-11	85068-85069	#	
321-12	85070-85079	bandwidth	
321-13	85080-85088	utilized	
321-14	85089-85091	by	
321-15	85092-85101	signaling	
321-16	85102-85110	channels	
321-17	85111-85113	is	
321-18	85114-85117	low	
321-19	85118-85122	from	
321-20	85123-85126	its	
321-21	85127-85133	nature	
321-22	85133-85134	,	
321-23	85135-85138	the	
321-24	85139-85147	increase	
321-25	85148-85149	#	
321-26	85150-85152	is	
321-27	85153-85166	insignificant	
321-28	85166-85167	.	
321-29	85168-85171	the	
321-30	85172-85178	system	
321-31	85179-85183	will	
321-32	85184-85194	disconnect	
321-33	85195-85196	a	
321-34	85197-85201	dead	
321-35	85202-85205	TCP	
321-36	85206-85216	connection	
321-37	85217-85221	when	
321-38	85222-85225	the	
321-39	85226-85227	#	
321-40	85228-85234	remote	
321-41	85235-85239	peer	
321-42	85240-85242	is	
321-43	85243-85247	dead	
321-44	85248-85250	or	
321-45	85251-85263	unresponsive	
321-46	85264-85267	for	
321-47	85267-85268	:	
321-48	85269-85274	10000	
321-49	85275-85276	+	
321-50	85277-85278	(	
321-51	85278-85282	5000	
321-52	85283-85284	x	
321-53	85285-85286	8	
321-54	85286-85287	)	
321-55	85288-85289	=	
321-56	85290-85295	50000	
321-57	85296-85300	msec	
321-58	85301-85302	(	
321-59	85302-85304	50	
321-60	85305-85306	#	
321-61	85307-85310	sec	
321-62	85310-85311	)	
321-63	85312-85313	#	
321-64	85313-85334	net.inet.tcp.keepidle	
321-65	85334-85335	=	
321-66	85335-85340	10000	
321-67	85341-85342	#	
321-68	85343-85344	(	
321-69	85344-85351	default	
321-70	85352-85359	7200000	
321-71	85360-85361	)	
321-72	85362-85363	#	
321-73	85363-85385	net.inet.tcp.keepintvl	
321-74	85385-85386	=	
321-75	85386-85390	5000	
321-76	85391-85392	#	
321-77	85393-85394	(	
321-78	85394-85401	default	
321-79	85402-85407	75000	
321-80	85408-85409	)	
321-81	85410-85411	#	
321-82	85411-85440	net.inet.tcp.always_keepalive	
321-83	85440-85441	=	
321-84	85441-85442	1	
321-85	85443-85444	#	
321-86	85445-85446	(	
321-87	85446-85453	default	
321-88	85454-85455	1	
321-89	85455-85456	)	
321-90	85457-85458	#	
321-91	85459-85462	UFS	
321-92	85463-85467	hard	
321-93	85468-85473	drive	
321-94	85474-85478	read	
321-95	85479-85484	ahead	
321-96	85485-85495	equivalent	
321-97	85496-85498	to	
321-98	85499-85500	4	
321-99	85501-85504	MiB	
321-100	85505-85507	at	
321-101	85508-85513	32KiB	
321-102	85514-85519	block	
321-103	85520-85524	size	
321-104	85524-85525	.	

#Text=Easily
#Text=# increases read speeds from 60 MB/sec to 80 MB/sec on a single spinning hard
#Text=# drive.
322-1	85526-85532	Easily	
322-2	85533-85534	#	
322-3	85535-85544	increases	
322-4	85545-85549	read	
322-5	85550-85556	speeds	
322-6	85557-85561	from	
322-7	85562-85564	60	
322-8	85565-85567	MB	
322-9	85567-85568	/	
322-10	85568-85571	sec	
322-11	85572-85574	to	
322-12	85575-85577	80	
322-13	85578-85580	MB	
322-14	85580-85581	/	
322-15	85581-85584	sec	
322-16	85585-85587	on	
322-17	85588-85589	a	
322-18	85590-85596	single	
322-19	85597-85605	spinning	
322-20	85606-85610	hard	
322-21	85611-85612	#	
322-22	85613-85618	drive	
322-23	85618-85619	.	

#Text=Samsung 830 SSD drives went from 310 MB/sec to 372 MB/sec (SATA 6).
#Text=# use Bonnie++ to performance test file system I/O
#Text=#vfs.read_max=128
#Text=# global limit for number of sockets in the system.
323-1	85620-85627	Samsung	
323-2	85628-85631	830	
323-3	85632-85635	SSD	
323-4	85636-85642	drives	
323-5	85643-85647	went	
323-6	85648-85652	from	
323-7	85653-85656	310	
323-8	85657-85659	MB	
323-9	85659-85660	/	
323-10	85660-85663	sec	
323-11	85664-85666	to	
323-12	85667-85670	372	
323-13	85671-85673	MB	
323-14	85673-85674	/	
323-15	85674-85677	sec	
323-16	85678-85679	(	
323-17	85679-85683	SATA	
323-18	85684-85685	6	
323-19	85685-85686	)	
323-20	85686-85687	.	
323-21	85688-85689	#	
323-22	85690-85693	use	
323-23	85694-85700	Bonnie	
323-24	85700-85701	+	
323-25	85701-85702	+	
323-26	85703-85705	to	
323-27	85706-85717	performance	
323-28	85718-85722	test	
323-29	85723-85727	file	
323-30	85728-85734	system	
323-31	85735-85736	I	
323-32	85736-85737	/	
323-33	85737-85738	O	
323-34	85739-85740	#	
323-35	85740-85752	vfs.read_max	
323-36	85752-85753	=	
323-37	85753-85756	128	
323-38	85757-85758	#	
323-39	85759-85765	global	
323-40	85766-85771	limit	
323-41	85772-85775	for	
323-42	85776-85782	number	
323-43	85783-85785	of	
323-44	85786-85793	sockets	
323-45	85794-85796	in	
323-46	85797-85800	the	
323-47	85801-85807	system	
323-48	85807-85808	.	

#Text=If kern.ipc.numopensockets
#Text=# plus net.inet.tcp.maxtcptw is close to kern.ipc.maxsockets then increase this
#Text=# value
#Text=#kern.ipc.maxsockets = 25600
#Text=# spread tcp timer callout load evenly across cpus.
324-1	85809-85811	If	
324-2	85812-85835	kern.ipc.numopensockets	
324-3	85836-85837	#	
324-4	85838-85842	plus	
324-5	85843-85864	net.inet.tcp.maxtcptw	
324-6	85865-85867	is	
324-7	85868-85873	close	
324-8	85874-85876	to	
324-9	85877-85896	kern.ipc.maxsockets	
324-10	85897-85901	then	
324-11	85902-85910	increase	
324-12	85911-85915	this	
324-13	85916-85917	#	
324-14	85918-85923	value	
324-15	85924-85925	#	
324-16	85925-85944	kern.ipc.maxsockets	
324-17	85945-85946	=	
324-18	85947-85952	25600	
324-19	85953-85954	#	
324-20	85955-85961	spread	
324-21	85962-85965	tcp	
324-22	85966-85971	timer	
324-23	85972-85979	callout	
324-24	85980-85984	load	
324-25	85985-85991	evenly	
324-26	85992-85998	across	
324-27	85999-86003	cpus	
324-28	86003-86004	.	

#Text=We did not see any speed
#Text=# benefit from enabling per cpu timers.
325-1	86005-86007	We	
325-2	86008-86011	did	
325-3	86012-86015	not	
325-4	86016-86019	see	
325-5	86020-86023	any	
325-6	86024-86029	speed	
325-7	86030-86031	#	
325-8	86032-86039	benefit	
325-9	86040-86044	from	
325-10	86045-86053	enabling	
325-11	86054-86057	per	
325-12	86058-86061	cpu	
325-13	86062-86068	timers	
325-14	86068-86069	.	

#Text=The default is off(0)
#Text=#net.inet.tcp.per_cpu_timers = 0
#Text=# seeding cryptographic random number generators is provided by the /dev/random
#Text=# device, which provides psudo "real" randomness.
326-1	86070-86073	The	
326-2	86074-86081	default	
326-3	86082-86084	is	
326-4	86085-86088	off	
326-5	86088-86089	(	
326-6	86089-86090	0	
326-7	86090-86091	)	
326-8	86092-86093	#	
326-9	86093-86120	net.inet.tcp.per_cpu_timers	
326-10	86121-86122	=	
326-11	86123-86124	0	
326-12	86125-86126	#	
326-13	86127-86134	seeding	
326-14	86135-86148	cryptographic	
326-15	86149-86155	random	
326-16	86156-86162	number	
326-17	86163-86173	generators	
326-18	86174-86176	is	
326-19	86177-86185	provided	
326-20	86186-86188	by	
326-21	86189-86192	the	
326-22	86193-86194	/	
326-23	86194-86197	dev	
326-24	86197-86198	/	
326-25	86198-86204	random	
326-26	86205-86206	#	
326-27	86207-86213	device	
326-28	86213-86214	,	
326-29	86215-86220	which	
326-30	86221-86229	provides	
326-31	86230-86235	psudo	
326-32	86236-86237	"	
326-33	86237-86241	real	
326-34	86241-86242	"	
326-35	86243-86253	randomness	
326-36	86253-86254	.	

#Text=The arc4random(3) library call
#Text=# provides a pseudo-random sequence which is generally reckoned to be suitable
#Text=# for simple cryptographic use.
327-1	86255-86258	The	
327-2	86259-86269	arc4random	
327-3	86269-86270	(	
327-4	86270-86271	3	
327-5	86271-86272	)	
327-6	86273-86280	library	
327-7	86281-86285	call	
327-8	86286-86287	#	
327-9	86288-86296	provides	
327-10	86297-86298	a	
327-11	86299-86312	pseudo-random	
327-12	86313-86321	sequence	
327-13	86322-86327	which	
327-14	86328-86330	is	
327-15	86331-86340	generally	
327-16	86341-86349	reckoned	
327-17	86350-86352	to	
327-18	86353-86355	be	
327-19	86356-86364	suitable	
327-20	86365-86366	#	
327-21	86367-86370	for	
327-22	86371-86377	simple	
327-23	86378-86391	cryptographic	
327-24	86392-86395	use	
327-25	86395-86396	.	

#Text=The OpenSSL library also provides functions for
#Text=# managing randomness via functions such as RAND_bytes(3) and RAND_add(3).
328-1	86397-86400	The	
328-2	86401-86408	OpenSSL	
328-3	86409-86416	library	
328-4	86417-86421	also	
328-5	86422-86430	provides	
328-6	86431-86440	functions	
328-7	86441-86444	for	
328-8	86445-86446	#	
328-9	86447-86455	managing	
328-10	86456-86466	randomness	
328-11	86467-86470	via	
328-12	86471-86480	functions	
328-13	86481-86485	such	
328-14	86486-86488	as	
328-15	86489-86499	RAND_bytes	
328-16	86499-86500	(	
328-17	86500-86501	3	
328-18	86501-86502	)	
328-19	86503-86506	and	
328-20	86507-86515	RAND_add	
328-21	86515-86516	(	
328-22	86516-86517	3	
328-23	86517-86518	)	
328-24	86518-86519	.	

#Text=Note
#Text=# that OpenSSL uses the random device /dev/random for seeding automatically.
#Text=# http://manpages.ubuntu.com/manpages/lucid/man4/random.4freebsd.html
#Text=#kern.random.yarrow.gengateinterval=10
#Text=# default 10 [4..64]
#Text=#kern.random.yarrow.bins=10
#Text=# default 10 [2..16]
#Text=#kern.random.yarrow.fastthresh=192
#Text=# default 192 [64..256]
#Text=#kern.random.yarrow.slowthresh=256
#Text=# default 256 [64..256]
#Text=#kern.random.yarrow.slowoverthresh=2
#Text=# default 2 [1..5]
#Text=#kern.random.sys.seeded=1
#Text=# default 1
#Text=#kern.random.sys.harvest.ethernet=1
#Text=# default 1
#Text=#kern.random.sys.harvest.point_to_point=1 # default 1
#Text=#kern.random.sys.harvest.interrupt=1
#Text=# default 1
#Text=#kern.random.sys.harvest.swi=0
#Text=# default 0 and actually does nothing when enabled
#Text=# IPv6 Security
#Text=# For more info see http://www.fosslc.org/drupal/content/security-implications-ipv6
#Text=# Disable Node info replies
#Text=# To see this vulnerability in action run `ping6 -a sglAac ::1` or `ping6 -w ::1` on unprotected node
#Text=#net.inet6.icmp6.nodeinfo=0
#Text=# Turn on IPv6 privacy extensions
#Text=# For more info see proposal http://unix.derkeiler.com/Mailing-Lists/FreeBSD/net/2008-06/msg00103.html
#Text=#net.inet6.ip6.use_tempaddr=1
#Text=#net.inet6.ip6.prefer_tempaddr=1
#Text=# Disable ICMP redirect
#Text=#net.inet6.icmp6.rediraccept=0
#Text=# Disable acceptation of RA and auto linklocal generation if you don't use them
#Text=##net.inet6.ip6.accept_rtadv=0
#Text=##net.inet6.ip6.auto_linklocal=0
#Text=### EOF ###
#Text=OPTIONAL: Enable the Pf firewall and disable LRO and TSO support
#Text=The following is an example /etc/rc.conf configuration file with some
#Text=commonly used directives.
329-1	86520-86524	Note	
329-2	86525-86526	#	
329-3	86527-86531	that	
329-4	86532-86539	OpenSSL	
329-5	86540-86544	uses	
329-6	86545-86548	the	
329-7	86549-86555	random	
329-8	86556-86562	device	
329-9	86563-86564	/	
329-10	86564-86567	dev	
329-11	86567-86568	/	
329-12	86568-86574	random	
329-13	86575-86578	for	
329-14	86579-86586	seeding	
329-15	86587-86600	automatically	
329-16	86600-86601	.	
329-17	86602-86603	#	
329-18	86604-86608	http	
329-19	86608-86609	:	
329-20	86609-86610	/	
329-21	86610-86611	/	
329-22	86611-86630	manpages.ubuntu.com	
329-23	86630-86631	/	
329-24	86631-86639	manpages	
329-25	86639-86640	/	
329-26	86640-86645	lucid	
329-27	86645-86646	/	
329-28	86646-86650	man4	
329-29	86650-86651	/	
329-30	86651-86657	random	
329-31	86657-86671	.4freebsd.html	
329-32	86672-86673	#	
329-33	86673-86707	kern.random.yarrow.gengateinterval	
329-34	86707-86708	=	
329-35	86708-86710	10	
329-36	86711-86712	#	
329-37	86713-86720	default	
329-38	86721-86723	10	
329-39	86724-86725	[	
329-40	86725-86726	4	
329-41	86726-86727	.	
329-42	86727-86730	.64	
329-43	86730-86731	]	
329-44	86732-86733	#	
329-45	86733-86756	kern.random.yarrow.bins	
329-46	86756-86757	=	
329-47	86757-86759	10	
329-48	86760-86761	#	
329-49	86762-86769	default	
329-50	86770-86772	10	
329-51	86773-86774	[	
329-52	86774-86775	2	
329-53	86775-86776	.	
329-54	86776-86779	.16	
329-55	86779-86780	]	
329-56	86781-86782	#	
329-57	86782-86811	kern.random.yarrow.fastthresh	
329-58	86811-86812	=	
329-59	86812-86815	192	
329-60	86816-86817	#	
329-61	86818-86825	default	
329-62	86826-86829	192	
329-63	86830-86831	[	
329-64	86831-86833	64	
329-65	86833-86834	.	
329-66	86834-86838	.256	
329-67	86838-86839	]	
329-68	86840-86841	#	
329-69	86841-86870	kern.random.yarrow.slowthresh	
329-70	86870-86871	=	
329-71	86871-86874	256	
329-72	86875-86876	#	
329-73	86877-86884	default	
329-74	86885-86888	256	
329-75	86889-86890	[	
329-76	86890-86892	64	
329-77	86892-86893	.	
329-78	86893-86897	.256	
329-79	86897-86898	]	
329-80	86899-86900	#	
329-81	86900-86933	kern.random.yarrow.slowoverthresh	
329-82	86933-86934	=	
329-83	86934-86935	2	
329-84	86936-86937	#	
329-85	86938-86945	default	
329-86	86946-86947	2	
329-87	86948-86949	[	
329-88	86949-86950	1	
329-89	86950-86951	.	
329-90	86951-86953	.5	
329-91	86953-86954	]	
329-92	86955-86956	#	
329-93	86956-86978	kern.random.sys.seeded	
329-94	86978-86979	=	
329-95	86979-86980	1	
329-96	86981-86982	#	
329-97	86983-86990	default	
329-98	86991-86992	1	
329-99	86993-86994	#	
329-100	86994-87026	kern.random.sys.harvest.ethernet	
329-101	87026-87027	=	
329-102	87027-87028	1	
329-103	87029-87030	#	
329-104	87031-87038	default	
329-105	87039-87040	1	
329-106	87041-87042	#	
329-107	87042-87080	kern.random.sys.harvest.point_to_point	
329-108	87080-87081	=	
329-109	87081-87082	1	
329-110	87083-87084	#	
329-111	87085-87092	default	
329-112	87093-87094	1	
329-113	87095-87096	#	
329-114	87096-87129	kern.random.sys.harvest.interrupt	
329-115	87129-87130	=	
329-116	87130-87131	1	
329-117	87132-87133	#	
329-118	87134-87141	default	
329-119	87142-87143	1	
329-120	87144-87145	#	
329-121	87145-87172	kern.random.sys.harvest.swi	
329-122	87172-87173	=	
329-123	87173-87174	0	
329-124	87175-87176	#	
329-125	87177-87184	default	
329-126	87185-87186	0	
329-127	87187-87190	and	
329-128	87191-87199	actually	
329-129	87200-87204	does	
329-130	87205-87212	nothing	
329-131	87213-87217	when	
329-132	87218-87225	enabled	
329-133	87226-87227	#	
329-134	87228-87232	IPv6	
329-135	87233-87241	Security	
329-136	87242-87243	#	
329-137	87244-87247	For	
329-138	87248-87252	more	
329-139	87253-87257	info	
329-140	87258-87261	see	
329-141	87262-87266	http	
329-142	87266-87267	:	
329-143	87267-87268	/	
329-144	87268-87269	/	
329-145	87269-87283	www.fosslc.org	
329-146	87283-87284	/	
329-147	87284-87290	drupal	
329-148	87290-87291	/	
329-149	87291-87298	content	
329-150	87298-87299	/	
329-151	87299-87325	security-implications-ipv6	
329-152	87326-87327	#	
329-153	87328-87335	Disable	
329-154	87336-87340	Node	
329-155	87341-87345	info	
329-156	87346-87353	replies	
329-157	87354-87355	#	
329-158	87356-87358	To	
329-159	87359-87362	see	
329-160	87363-87367	this	
329-161	87368-87381	vulnerability	
329-162	87382-87384	in	
329-163	87385-87391	action	
329-164	87392-87395	run	
329-165	87396-87397	`	
329-166	87397-87402	ping6	
329-167	87403-87404	-	
329-168	87404-87405	a	
329-169	87406-87412	sglAac	
329-170	87413-87414	:	
329-171	87414-87415	:	
329-172	87415-87416	1	
329-173	87416-87417	`	
329-174	87418-87420	or	
329-175	87421-87422	`	
329-176	87422-87427	ping6	
329-177	87428-87429	-	
329-178	87429-87430	w	
329-179	87431-87432	:	
329-180	87432-87433	:	
329-181	87433-87434	1	
329-182	87434-87435	`	
329-183	87436-87438	on	
329-184	87439-87450	unprotected	
329-185	87451-87455	node	
329-186	87456-87457	#	
329-187	87457-87466	net.inet6	
329-188	87466-87467	.	
329-189	87467-87472	icmp6	
329-190	87472-87473	.	
329-191	87473-87481	nodeinfo	
329-192	87481-87482	=	
329-193	87482-87483	0	
329-194	87484-87485	#	
329-195	87486-87490	Turn	
329-196	87491-87493	on	
329-197	87494-87498	IPv6	
329-198	87499-87506	privacy	
329-199	87507-87517	extensions	
329-200	87518-87519	#	
329-201	87520-87523	For	
329-202	87524-87528	more	
329-203	87529-87533	info	
329-204	87534-87537	see	
329-205	87538-87546	proposal	
329-206	87547-87551	http	
329-207	87551-87552	:	
329-208	87552-87553	/	
329-209	87553-87554	/	
329-210	87554-87572	unix.derkeiler.com	
329-211	87572-87573	/	
329-212	87573-87586	Mailing-Lists	
329-213	87586-87587	/	
329-214	87587-87594	FreeBSD	
329-215	87594-87595	/	
329-216	87595-87598	net	
329-217	87598-87599	/	
329-218	87599-87603	2008	
329-219	87603-87604	-	
329-220	87604-87606	06	
329-221	87606-87607	/	
329-222	87607-87615	msg00103	
329-223	87615-87616	.	
329-224	87616-87620	html	
329-225	87621-87622	#	
329-226	87622-87631	net.inet6	
329-227	87631-87632	.	
329-228	87632-87635	ip6	
329-229	87635-87636	.	
329-230	87636-87648	use_tempaddr	
329-231	87648-87649	=	
329-232	87649-87650	1	
329-233	87651-87652	#	
329-234	87652-87661	net.inet6	
329-235	87661-87662	.	
329-236	87662-87665	ip6	
329-237	87665-87666	.	
329-238	87666-87681	prefer_tempaddr	
329-239	87681-87682	=	
329-240	87682-87683	1	
329-241	87684-87685	#	
329-242	87686-87693	Disable	
329-243	87694-87698	ICMP	
329-244	87699-87707	redirect	
329-245	87708-87709	#	
329-246	87709-87718	net.inet6	
329-247	87718-87719	.	
329-248	87719-87724	icmp6	
329-249	87724-87725	.	
329-250	87725-87736	rediraccept	
329-251	87736-87737	=	
329-252	87737-87738	0	
329-253	87739-87740	#	
329-254	87741-87748	Disable	
329-255	87749-87760	acceptation	
329-256	87761-87763	of	
329-257	87764-87766	RA	
329-258	87767-87770	and	
329-259	87771-87775	auto	
329-260	87776-87785	linklocal	
329-261	87786-87796	generation	
329-262	87797-87799	if	
329-263	87800-87803	you	
329-264	87804-87809	don't	
329-265	87810-87813	use	
329-266	87814-87818	them	
329-267	87819-87820	#	
329-268	87820-87821	#	
329-269	87821-87830	net.inet6	
329-270	87830-87831	.	
329-271	87831-87834	ip6	
329-272	87834-87835	.	
329-273	87835-87847	accept_rtadv	
329-274	87847-87848	=	
329-275	87848-87849	0	
329-276	87850-87851	#	
329-277	87851-87852	#	
329-278	87852-87861	net.inet6	
329-279	87861-87862	.	
329-280	87862-87865	ip6	
329-281	87865-87866	.	
329-282	87866-87880	auto_linklocal	
329-283	87880-87881	=	
329-284	87881-87882	0	
329-285	87883-87884	#	
329-286	87884-87885	#	
329-287	87885-87886	#	
329-288	87887-87890	EOF	
329-289	87891-87892	#	
329-290	87892-87893	#	
329-291	87893-87894	#	
329-292	87895-87903	OPTIONAL	
329-293	87903-87904	:	
329-294	87905-87911	Enable	
329-295	87912-87915	the	
329-296	87916-87918	Pf	
329-297	87919-87927	firewall	
329-298	87928-87931	and	
329-299	87932-87939	disable	
329-300	87940-87943	LRO	
329-301	87944-87947	and	
329-302	87948-87951	TSO	
329-303	87952-87959	support	
329-304	87960-87963	The	
329-305	87964-87973	following	
329-306	87974-87976	is	
329-307	87977-87979	an	
329-308	87980-87987	example	
329-309	87988-87989	/	
329-310	87989-87992	etc	
329-311	87992-87993	/	
329-312	87993-88000	rc.conf	
329-313	88001-88014	configuration	
329-314	88015-88019	file	
329-315	88020-88024	with	
329-316	88025-88029	some	
329-317	88030-88038	commonly	
329-318	88039-88043	used	
329-319	88044-88054	directives	
329-320	88054-88055	.	

#Text=For a NAT firewall or router it is a good idea to
#Text=disable large receive offload (LRO) and TCP segmentation offload (TSO) on the
#Text=network interface.
330-1	88056-88059	For	
330-2	88060-88061	a	
330-3	88062-88065	NAT	
330-4	88066-88074	firewall	
330-5	88075-88077	or	
330-6	88078-88084	router	
330-7	88085-88087	it	
330-8	88088-88090	is	
330-9	88091-88092	a	
330-10	88093-88097	good	
330-11	88098-88102	idea	
330-12	88103-88105	to	
330-13	88106-88113	disable	
330-14	88114-88119	large	
330-15	88120-88127	receive	
330-16	88128-88135	offload	
330-17	88136-88137	(	
330-18	88137-88140	LRO	
330-19	88140-88141	)	
330-20	88142-88145	and	
330-21	88146-88149	TCP	
330-22	88150-88162	segmentation	
330-23	88163-88170	offload	
330-24	88171-88172	(	
330-25	88172-88175	TSO	
330-26	88175-88176	)	
330-27	88177-88179	on	
330-28	88180-88183	the	
330-29	88184-88191	network	
330-30	88192-88201	interface	
330-31	88201-88202	.	

#Text=Take a look through each option and see if any of the
#Text=directives will work in your environment.
#Text=# Calomel.org
#Text=-|-
#Text=April 2021
#Text=# https://calomel.org/freebsd_network_tuning.html
#Text=zfs_enable="YES"
#Text=# enable the ZFS filesystem
#Text=clear_tmp_enable="YES"
#Text=# clear /tmp on boot
#Text=gateway_enable="YES"
#Text=# enable firewall/router mode, allow packets to pass between interfaces
#Text=keyrate="250.34"
#Text=# keyboard delay to 250 ms and repeat to 34 cps
#Text=# PF firewall
#Text=pf_enable="YES"
#Text=# Enable PF (load kernel module as required)
#Text=pf_rules="/etc/pf.conf"
#Text=# rule set definition file for pf
#Text=pf_flags=""
#Text=# additional flags for pfctl start up
#Text=pflog_enable="YES"
#Text=# start pflogd(8)
#Text=pflog_logfile="/var/log/pflog" # where pflogd should store the logfile
#Text=pflog_flags=""
#Text=# additional flags for pflogd start up
#Text=hostname="calomel"
#Text=# IPv6, force enable IPv6 interfaces before dhcp intilization
#Text=#ipv6_activate_all_interfaces="YES"
#Text=# DHCP, enable the ISC dual stack dhcp client
#Text=#dhclient_program="/usr/local/sbin/dual-dhclient"
#Text=# Internet: Disable large receive offload (LRO) and TCP segmentation offload
#Text=# (TSO) support if this server is a Network Address Translation (NAT) firewall
#Text=# or router.
331-1	88203-88207	Take	
331-2	88208-88209	a	
331-3	88210-88214	look	
331-4	88215-88222	through	
331-5	88223-88227	each	
331-6	88228-88234	option	
331-7	88235-88238	and	
331-8	88239-88242	see	
331-9	88243-88245	if	
331-10	88246-88249	any	
331-11	88250-88252	of	
331-12	88253-88256	the	
331-13	88257-88267	directives	
331-14	88268-88272	will	
331-15	88273-88277	work	
331-16	88278-88280	in	
331-17	88281-88285	your	
331-18	88286-88297	environment	
331-19	88297-88298	.	
331-20	88299-88300	#	
331-21	88301-88312	Calomel.org	
331-22	88313-88314	-	
331-23	88314-88315	|	
331-24	88315-88316	-	
331-25	88317-88322	April	
331-26	88323-88327	2021	
331-27	88328-88329	#	
331-28	88330-88335	https	
331-29	88335-88336	:	
331-30	88336-88337	/	
331-31	88337-88338	/	
331-32	88338-88349	calomel.org	
331-33	88349-88350	/	
331-34	88350-88377	freebsd_network_tuning.html	
331-35	88378-88388	zfs_enable	
331-36	88388-88389	=	
331-37	88389-88390	"	
331-38	88390-88393	YES	
331-39	88393-88394	"	
331-40	88395-88396	#	
331-41	88397-88403	enable	
331-42	88404-88407	the	
331-43	88408-88411	ZFS	
331-44	88412-88422	filesystem	
331-45	88423-88439	clear_tmp_enable	
331-46	88439-88440	=	
331-47	88440-88441	"	
331-48	88441-88444	YES	
331-49	88444-88445	"	
331-50	88446-88447	#	
331-51	88448-88453	clear	
331-52	88454-88455	/	
331-53	88455-88458	tmp	
331-54	88459-88461	on	
331-55	88462-88466	boot	
331-56	88467-88481	gateway_enable	
331-57	88481-88482	=	
331-58	88482-88483	"	
331-59	88483-88486	YES	
331-60	88486-88487	"	
331-61	88488-88489	#	
331-62	88490-88496	enable	
331-63	88497-88505	firewall	
331-64	88505-88506	/	
331-65	88506-88512	router	
331-66	88513-88517	mode	
331-67	88517-88518	,	
331-68	88519-88524	allow	
331-69	88525-88532	packets	
331-70	88533-88535	to	
331-71	88536-88540	pass	
331-72	88541-88548	between	
331-73	88549-88559	interfaces	
331-74	88560-88567	keyrate	
331-75	88567-88568	=	
331-76	88568-88569	"	
331-77	88569-88575	250.34	
331-78	88575-88576	"	
331-79	88577-88578	#	
331-80	88579-88587	keyboard	
331-81	88588-88593	delay	
331-82	88594-88596	to	
331-83	88597-88600	250	
331-84	88601-88603	ms	
331-85	88604-88607	and	
331-86	88608-88614	repeat	
331-87	88615-88617	to	
331-88	88618-88620	34	
331-89	88621-88624	cps	
331-90	88625-88626	#	
331-91	88627-88629	PF	
331-92	88630-88638	firewall	
331-93	88639-88648	pf_enable	
331-94	88648-88649	=	
331-95	88649-88650	"	
331-96	88650-88653	YES	
331-97	88653-88654	"	
331-98	88655-88656	#	
331-99	88657-88663	Enable	
331-100	88664-88666	PF	
331-101	88667-88668	(	
331-102	88668-88672	load	
331-103	88673-88679	kernel	
331-104	88680-88686	module	
331-105	88687-88689	as	
331-106	88690-88698	required	
331-107	88698-88699	)	
331-108	88700-88708	pf_rules	
331-109	88708-88709	=	
331-110	88709-88710	"	
331-111	88710-88711	/	
331-112	88711-88714	etc	
331-113	88714-88715	/	
331-114	88715-88722	pf.conf	
331-115	88722-88723	"	
331-116	88724-88725	#	
331-117	88726-88730	rule	
331-118	88731-88734	set	
331-119	88735-88745	definition	
331-120	88746-88750	file	
331-121	88751-88754	for	
331-122	88755-88757	pf	
331-123	88758-88766	pf_flags	
331-124	88766-88767	=	
331-125	88767-88768	"	
331-126	88768-88769	"	
331-127	88770-88771	#	
331-128	88772-88782	additional	
331-129	88783-88788	flags	
331-130	88789-88792	for	
331-131	88793-88798	pfctl	
331-132	88799-88804	start	
331-133	88805-88807	up	
331-134	88808-88820	pflog_enable	
331-135	88820-88821	=	
331-136	88821-88822	"	
331-137	88822-88825	YES	
331-138	88825-88826	"	
331-139	88827-88828	#	
331-140	88829-88834	start	
331-141	88835-88841	pflogd	
331-142	88841-88842	(	
331-143	88842-88843	8	
331-144	88843-88844	)	
331-145	88845-88858	pflog_logfile	
331-146	88858-88859	=	
331-147	88859-88860	"	
331-148	88860-88861	/	
331-149	88861-88864	var	
331-150	88864-88865	/	
331-151	88865-88868	log	
331-152	88868-88869	/	
331-153	88869-88874	pflog	
331-154	88874-88875	"	
331-155	88876-88877	#	
331-156	88878-88883	where	
331-157	88884-88890	pflogd	
331-158	88891-88897	should	
331-159	88898-88903	store	
331-160	88904-88907	the	
331-161	88908-88915	logfile	
331-162	88916-88927	pflog_flags	
331-163	88927-88928	=	
331-164	88928-88929	"	
331-165	88929-88930	"	
331-166	88931-88932	#	
331-167	88933-88943	additional	
331-168	88944-88949	flags	
331-169	88950-88953	for	
331-170	88954-88960	pflogd	
331-171	88961-88966	start	
331-172	88967-88969	up	
331-173	88970-88978	hostname	
331-174	88978-88979	=	
331-175	88979-88980	"	
331-176	88980-88987	calomel	
331-177	88987-88988	"	
331-178	88989-88990	#	
331-179	88991-88995	IPv6	
331-180	88995-88996	,	
331-181	88997-89002	force	
331-182	89003-89009	enable	
331-183	89010-89014	IPv6	
331-184	89015-89025	interfaces	
331-185	89026-89032	before	
331-186	89033-89037	dhcp	
331-187	89038-89050	intilization	
331-188	89051-89052	#	
331-189	89052-89056	ipv6	
331-190	89056-89057	_	
331-191	89057-89080	activate_all_interfaces	
331-192	89080-89081	=	
331-193	89081-89082	"	
331-194	89082-89085	YES	
331-195	89085-89086	"	
331-196	89087-89088	#	
331-197	89089-89093	DHCP	
331-198	89093-89094	,	
331-199	89095-89101	enable	
331-200	89102-89105	the	
331-201	89106-89109	ISC	
331-202	89110-89114	dual	
331-203	89115-89120	stack	
331-204	89121-89125	dhcp	
331-205	89126-89132	client	
331-206	89133-89134	#	
331-207	89134-89150	dhclient_program	
331-208	89150-89151	=	
331-209	89151-89152	"	
331-210	89152-89153	/	
331-211	89153-89156	usr	
331-212	89156-89157	/	
331-213	89157-89162	local	
331-214	89162-89163	/	
331-215	89163-89167	sbin	
331-216	89167-89168	/	
331-217	89168-89181	dual-dhclient	
331-218	89181-89182	"	
331-219	89183-89184	#	
331-220	89185-89193	Internet	
331-221	89193-89194	:	
331-222	89195-89202	Disable	
331-223	89203-89208	large	
331-224	89209-89216	receive	
331-225	89217-89224	offload	
331-226	89225-89226	(	
331-227	89226-89229	LRO	
331-228	89229-89230	)	
331-229	89231-89234	and	
331-230	89235-89238	TCP	
331-231	89239-89251	segmentation	
331-232	89252-89259	offload	
331-233	89260-89261	#	
331-234	89262-89263	(	
331-235	89263-89266	TSO	
331-236	89266-89267	)	
331-237	89268-89275	support	
331-238	89276-89278	if	
331-239	89279-89283	this	
331-240	89284-89290	server	
331-241	89291-89293	is	
331-242	89294-89295	a	
331-243	89296-89303	Network	
331-244	89304-89311	Address	
331-245	89312-89323	Translation	
331-246	89324-89325	(	
331-247	89325-89328	NAT	
331-248	89328-89329	)	
331-249	89330-89338	firewall	
331-250	89339-89340	#	
331-251	89341-89343	or	
331-252	89344-89350	router	
331-253	89350-89351	.	

#Text=Depending on the network interface you may need to force disable
#Text=# transmit checksums (-txcsum) in order to disable TCP segmentation offload
#Text=# (TSO) even if "-tso" is defined.
332-1	89352-89361	Depending	
332-2	89362-89364	on	
332-3	89365-89368	the	
332-4	89369-89376	network	
332-5	89377-89386	interface	
332-6	89387-89390	you	
332-7	89391-89394	may	
332-8	89395-89399	need	
332-9	89400-89402	to	
332-10	89403-89408	force	
332-11	89409-89416	disable	
332-12	89417-89418	#	
332-13	89419-89427	transmit	
332-14	89428-89437	checksums	
332-15	89438-89439	(	
332-16	89439-89440	-	
332-17	89440-89446	txcsum	
332-18	89446-89447	)	
332-19	89448-89450	in	
332-20	89451-89456	order	
332-21	89457-89459	to	
332-22	89460-89467	disable	
332-23	89468-89471	TCP	
332-24	89472-89484	segmentation	
332-25	89485-89492	offload	
332-26	89493-89494	#	
332-27	89495-89496	(	
332-28	89496-89499	TSO	
332-29	89499-89500	)	
332-30	89501-89505	even	
332-31	89506-89508	if	
332-32	89509-89510	"	
332-33	89510-89511	-	
332-34	89511-89514	tso	
332-35	89514-89515	"	
332-36	89516-89518	is	
332-37	89519-89526	defined	
332-38	89526-89527	.	

#Text=Chelsio cards require "-txcsum" in order to
#Text=# also disable TSO as seen in the logs, "cxl0: tso4 disabled due to -txcsum."
#Text=# Receive and Transmit hardware checksum support is safe to keep enabled on a
#Text=# firewall (rxcsum and txcsum).
333-1	89528-89535	Chelsio	
333-2	89536-89541	cards	
333-3	89542-89549	require	
333-4	89550-89551	"	
333-5	89551-89552	-	
333-6	89552-89558	txcsum	
333-7	89558-89559	"	
333-8	89560-89562	in	
333-9	89563-89568	order	
333-10	89569-89571	to	
333-11	89572-89573	#	
333-12	89574-89578	also	
333-13	89579-89586	disable	
333-14	89587-89590	TSO	
333-15	89591-89593	as	
333-16	89594-89598	seen	
333-17	89599-89601	in	
333-18	89602-89605	the	
333-19	89606-89610	logs	
333-20	89610-89611	,	
333-21	89612-89613	"	
333-22	89613-89617	cxl0	
333-23	89617-89618	:	
333-24	89619-89623	tso4	
333-25	89624-89632	disabled	
333-26	89633-89636	due	
333-27	89637-89639	to	
333-28	89640-89641	-	
333-29	89641-89647	txcsum	
333-30	89647-89648	.	
333-31	89648-89649	"	
333-32	89650-89651	#	
333-33	89652-89659	Receive	
333-34	89660-89663	and	
333-35	89664-89672	Transmit	
333-36	89673-89681	hardware	
333-37	89682-89690	checksum	
333-38	89691-89698	support	
333-39	89699-89701	is	
333-40	89702-89706	safe	
333-41	89707-89709	to	
333-42	89710-89714	keep	
333-43	89715-89722	enabled	
333-44	89723-89725	on	
333-45	89726-89727	a	
333-46	89728-89729	#	
333-47	89730-89738	firewall	
333-48	89739-89740	(	
333-49	89740-89746	rxcsum	
333-50	89747-89750	and	
333-51	89751-89757	txcsum	
333-52	89757-89758	)	
333-53	89758-89759	.	

#Text=But, we would argue, the firmware on consumer
#Text=# grade one(1) gigabit network interfaces are probably years out of date, so
#Text=# you may want to concider disabling hardware checksum support as to not incur
#Text=# firmware vulnerabilities and driver-to-hardware inefficiencies at the cost of
#Text=# a negligible increase in CPU usage.
#Text=ifconfig_igb0="dhcp ether 00:07:43:2a:4b:6c -rxcsum -rxcsum6 -txcsum -txcsum6 -lro -tso -vlanhwtso"
#Text=#ifconfig_igb0_ipv6="inet6 dhcp accept_rtadv -rxcsum6 -txcsum6"
#Text=#ifconfig_igb0="dhcp -rxcsum -rxcsum6 -txcsum -txcsum6 -lro -tso -vlanhwtso"
#Text=# LAN: define any private, non-routable IPv4 and IPv6 address.
334-1	89760-89763	But	
334-2	89763-89764	,	
334-3	89765-89767	we	
334-4	89768-89773	would	
334-5	89774-89779	argue	
334-6	89779-89780	,	
334-7	89781-89784	the	
334-8	89785-89793	firmware	
334-9	89794-89796	on	
334-10	89797-89805	consumer	
334-11	89806-89807	#	
334-12	89808-89813	grade	
334-13	89814-89817	one	
334-14	89817-89818	(	
334-15	89818-89819	1	
334-16	89819-89820	)	
334-17	89821-89828	gigabit	
334-18	89829-89836	network	
334-19	89837-89847	interfaces	
334-20	89848-89851	are	
334-21	89852-89860	probably	
334-22	89861-89866	years	
334-23	89867-89870	out	
334-24	89871-89873	of	
334-25	89874-89878	date	
334-26	89878-89879	,	
334-27	89880-89882	so	
334-28	89883-89884	#	
334-29	89885-89888	you	
334-30	89889-89892	may	
334-31	89893-89897	want	
334-32	89898-89900	to	
334-33	89901-89909	concider	
334-34	89910-89919	disabling	
334-35	89920-89928	hardware	
334-36	89929-89937	checksum	
334-37	89938-89945	support	
334-38	89946-89948	as	
334-39	89949-89951	to	
334-40	89952-89955	not	
334-41	89956-89961	incur	
334-42	89962-89963	#	
334-43	89964-89972	firmware	
334-44	89973-89988	vulnerabilities	
334-45	89989-89992	and	
334-46	89993-90011	driver-to-hardware	
334-47	90012-90026	inefficiencies	
334-48	90027-90029	at	
334-49	90030-90033	the	
334-50	90034-90038	cost	
334-51	90039-90041	of	
334-52	90042-90043	#	
334-53	90044-90045	a	
334-54	90046-90056	negligible	
334-55	90057-90065	increase	
334-56	90066-90068	in	
334-57	90069-90072	CPU	
334-58	90073-90078	usage	
334-59	90078-90079	.	
334-60	90080-90093	ifconfig_igb0	
334-61	90093-90094	=	
334-62	90094-90095	"	
334-63	90095-90099	dhcp	
334-64	90100-90105	ether	
334-65	90106-90108	00	
334-66	90108-90109	:	
334-67	90109-90111	07	
334-68	90111-90112	:	
334-69	90112-90114	43	
334-70	90114-90115	:	
334-71	90115-90117	2a	
334-72	90117-90118	:	
334-73	90118-90120	4b	
334-74	90120-90121	:	
334-75	90121-90123	6c	
334-76	90124-90125	-	
334-77	90125-90131	rxcsum	
334-78	90132-90133	-	
334-79	90133-90140	rxcsum6	
334-80	90141-90142	-	
334-81	90142-90148	txcsum	
334-82	90149-90150	-	
334-83	90150-90157	txcsum6	
334-84	90158-90159	-	
334-85	90159-90162	lro	
334-86	90163-90164	-	
334-87	90164-90167	tso	
334-88	90168-90169	-	
334-89	90169-90178	vlanhwtso	
334-90	90178-90179	"	
334-91	90180-90181	#	
334-92	90181-90194	ifconfig_igb0	
334-93	90194-90195	_	
334-94	90195-90199	ipv6	
334-95	90199-90200	=	
334-96	90200-90201	"	
334-97	90201-90206	inet6	
334-98	90207-90211	dhcp	
334-99	90212-90224	accept_rtadv	
334-100	90225-90226	-	
334-101	90226-90233	rxcsum6	
334-102	90234-90235	-	
334-103	90235-90242	txcsum6	
334-104	90242-90243	"	
334-105	90244-90245	#	
334-106	90245-90258	ifconfig_igb0	
334-107	90258-90259	=	
334-108	90259-90260	"	
334-109	90260-90264	dhcp	
334-110	90265-90266	-	
334-111	90266-90272	rxcsum	
334-112	90273-90274	-	
334-113	90274-90281	rxcsum6	
334-114	90282-90283	-	
334-115	90283-90289	txcsum	
334-116	90290-90291	-	
334-117	90291-90298	txcsum6	
334-118	90299-90300	-	
334-119	90300-90303	lro	
334-120	90304-90305	-	
334-121	90305-90308	tso	
334-122	90309-90310	-	
334-123	90310-90319	vlanhwtso	
334-124	90319-90320	"	
334-125	90321-90322	#	
334-126	90323-90326	LAN	
334-127	90326-90327	:	
334-128	90328-90334	define	
334-129	90335-90338	any	
334-130	90339-90346	private	
334-131	90346-90347	,	
334-132	90348-90360	non-routable	
334-133	90361-90365	IPv4	
334-134	90366-90369	and	
334-135	90370-90374	IPv6	
334-136	90375-90382	address	
334-137	90382-90383	.	

#Text=Disable LRO,
#Text=# TSO and hardware checksum support.
#Text=ifconfig_igb1="inet 10.10.10.1/24 -rxcsum -rxcsum6 -txcsum -txcsum6 -lro -tso -vlanhwtso"
#Text=#ifconfig_igb1_ipv6="inet6 fddd::1/64 -rxcsum6 -txcsum6"
#Text=#ifconfig_igb1="inet 10.10.10.1/24 -rxcsum -rxcsum6 -txcsum -txcsum6 -lro -tso -vlanhwtso"
#Text=# daemons disabled
#Text=dumpdev="NO"
#Text=sendmail_enable="NONE"
#Text=# daemons enabled
#Text=#chronyd_enable="YES"
#Text=#dhcpd_enable="YES"
#Text=#dhcpd_flags="igb1"
#Text=#entropy_file="/var/db/entropy-file"
#Text=#unbound_enable="YES"
#Text=#postfix_enable="YES"
#Text=#sshd_enable="YES"
#Text=#syslogd_flags="-ss"
#Text=### DISABLED FOR REFERENCE ###
#Text=# deamons
#Text=#postgrey_enable="YES"
#Text=#postgrey_flags="--greylist-text=\\"GREYLIST\\" --delay=870 --unix=/var/run/postgrey/postgrey.sock"
#Text=# ipv6 lan static
#Text=#ipv6_activate_all_interfaces="YES"
#Text=#ifconfig_igb1_ipv6="inet6 fddd::1/64 -lro -tso"
#Text=#ipv6_defaultrouter="fddd::1"
#Text=# wireless, https://calomel.org/freebsd_wireless_access_point.html
#Text=#wlans_ath0="wlan0"
#Text=#create_args_wlan0="wlanmode hostap"
#Text=#hostapd_enable="YES"
#Text=#ifconfig_wlan0="inet 10.0.100.1 netmask 255.255.255.0"
#Text=# Security Level (kern.securelevel) Note: updates cannot be installed when the
#Text=# system securelevel is greater than zero.
335-1	90384-90391	Disable	
335-2	90392-90395	LRO	
335-3	90395-90396	,	
335-4	90397-90398	#	
335-5	90399-90402	TSO	
335-6	90403-90406	and	
335-7	90407-90415	hardware	
335-8	90416-90424	checksum	
335-9	90425-90432	support	
335-10	90432-90433	.	
335-11	90434-90447	ifconfig_igb1	
335-12	90447-90448	=	
335-13	90448-90449	"	
335-14	90449-90453	inet	
335-15	90454-90464	10.10.10.1	
335-16	90464-90465	/	
335-17	90465-90467	24	
335-18	90468-90469	-	
335-19	90469-90475	rxcsum	
335-20	90476-90477	-	
335-21	90477-90484	rxcsum6	
335-22	90485-90486	-	
335-23	90486-90492	txcsum	
335-24	90493-90494	-	
335-25	90494-90501	txcsum6	
335-26	90502-90503	-	
335-27	90503-90506	lro	
335-28	90507-90508	-	
335-29	90508-90511	tso	
335-30	90512-90513	-	
335-31	90513-90522	vlanhwtso	
335-32	90522-90523	"	
335-33	90524-90525	#	
335-34	90525-90538	ifconfig_igb1	
335-35	90538-90539	_	
335-36	90539-90543	ipv6	
335-37	90543-90544	=	
335-38	90544-90545	"	
335-39	90545-90550	inet6	
335-40	90551-90555	fddd	
335-41	90555-90556	:	
335-42	90556-90557	:	
335-43	90557-90558	1	
335-44	90558-90559	/	
335-45	90559-90561	64	
335-46	90562-90563	-	
335-47	90563-90570	rxcsum6	
335-48	90571-90572	-	
335-49	90572-90579	txcsum6	
335-50	90579-90580	"	
335-51	90581-90582	#	
335-52	90582-90595	ifconfig_igb1	
335-53	90595-90596	=	
335-54	90596-90597	"	
335-55	90597-90601	inet	
335-56	90602-90612	10.10.10.1	
335-57	90612-90613	/	
335-58	90613-90615	24	
335-59	90616-90617	-	
335-60	90617-90623	rxcsum	
335-61	90624-90625	-	
335-62	90625-90632	rxcsum6	
335-63	90633-90634	-	
335-64	90634-90640	txcsum	
335-65	90641-90642	-	
335-66	90642-90649	txcsum6	
335-67	90650-90651	-	
335-68	90651-90654	lro	
335-69	90655-90656	-	
335-70	90656-90659	tso	
335-71	90660-90661	-	
335-72	90661-90670	vlanhwtso	
335-73	90670-90671	"	
335-74	90672-90673	#	
335-75	90674-90681	daemons	
335-76	90682-90690	disabled	
335-77	90691-90698	dumpdev	
335-78	90698-90699	=	
335-79	90699-90700	"	
335-80	90700-90702	NO	
335-81	90702-90703	"	
335-82	90704-90719	sendmail_enable	
335-83	90719-90720	=	
335-84	90720-90721	"	
335-85	90721-90725	NONE	
335-86	90725-90726	"	
335-87	90727-90728	#	
335-88	90729-90736	daemons	
335-89	90737-90744	enabled	
335-90	90745-90746	#	
335-91	90746-90760	chronyd_enable	
335-92	90760-90761	=	
335-93	90761-90762	"	
335-94	90762-90765	YES	
335-95	90765-90766	"	
335-96	90767-90768	#	
335-97	90768-90780	dhcpd_enable	
335-98	90780-90781	=	
335-99	90781-90782	"	
335-100	90782-90785	YES	
335-101	90785-90786	"	
335-102	90787-90788	#	
335-103	90788-90799	dhcpd_flags	
335-104	90799-90800	=	
335-105	90800-90801	"	
335-106	90801-90805	igb1	
335-107	90805-90806	"	
335-108	90807-90808	#	
335-109	90808-90820	entropy_file	
335-110	90820-90821	=	
335-111	90821-90822	"	
335-112	90822-90823	/	
335-113	90823-90826	var	
335-114	90826-90827	/	
335-115	90827-90829	db	
335-116	90829-90830	/	
335-117	90830-90842	entropy-file	
335-118	90842-90843	"	
335-119	90844-90845	#	
335-120	90845-90859	unbound_enable	
335-121	90859-90860	=	
335-122	90860-90861	"	
335-123	90861-90864	YES	
335-124	90864-90865	"	
335-125	90866-90867	#	
335-126	90867-90881	postfix_enable	
335-127	90881-90882	=	
335-128	90882-90883	"	
335-129	90883-90886	YES	
335-130	90886-90887	"	
335-131	90888-90889	#	
335-132	90889-90900	sshd_enable	
335-133	90900-90901	=	
335-134	90901-90902	"	
335-135	90902-90905	YES	
335-136	90905-90906	"	
335-137	90907-90908	#	
335-138	90908-90921	syslogd_flags	
335-139	90921-90922	=	
335-140	90922-90923	"	
335-141	90923-90924	-	
335-142	90924-90926	ss	
335-143	90926-90927	"	
335-144	90928-90929	#	
335-145	90929-90930	#	
335-146	90930-90931	#	
335-147	90932-90940	DISABLED	
335-148	90941-90944	FOR	
335-149	90945-90954	REFERENCE	
335-150	90955-90956	#	
335-151	90956-90957	#	
335-152	90957-90958	#	
335-153	90959-90960	#	
335-154	90961-90968	deamons	
335-155	90969-90970	#	
335-156	90970-90985	postgrey_enable	
335-157	90985-90986	=	
335-158	90986-90987	"	
335-159	90987-90990	YES	
335-160	90990-90991	"	
335-161	90992-90993	#	
335-162	90993-91007	postgrey_flags	
335-163	91007-91008	=	
335-164	91008-91009	"	
335-165	91009-91010	-	
335-166	91010-91011	-	
335-167	91011-91024	greylist-text	
335-168	91024-91025	=	
335-169	91025-91026	\	
335-170	91026-91027	"	
335-171	91027-91035	GREYLIST	
335-172	91035-91036	\	
335-173	91036-91037	"	
335-174	91038-91039	-	
335-175	91039-91040	-	
335-176	91040-91045	delay	
335-177	91045-91046	=	
335-178	91046-91049	870	
335-179	91050-91051	-	
335-180	91051-91052	-	
335-181	91052-91056	unix	
335-182	91056-91057	=	
335-183	91057-91058	/	
335-184	91058-91061	var	
335-185	91061-91062	/	
335-186	91062-91065	run	
335-187	91065-91066	/	
335-188	91066-91074	postgrey	
335-189	91074-91075	/	
335-190	91075-91088	postgrey.sock	
335-191	91088-91089	"	
335-192	91090-91091	#	
335-193	91092-91096	ipv6	
335-194	91097-91100	lan	
335-195	91101-91107	static	
335-196	91108-91109	#	
335-197	91109-91113	ipv6	
335-198	91113-91114	_	
335-199	91114-91137	activate_all_interfaces	
335-200	91137-91138	=	
335-201	91138-91139	"	
335-202	91139-91142	YES	
335-203	91142-91143	"	
335-204	91144-91145	#	
335-205	91145-91158	ifconfig_igb1	
335-206	91158-91159	_	
335-207	91159-91163	ipv6	
335-208	91163-91164	=	
335-209	91164-91165	"	
335-210	91165-91170	inet6	
335-211	91171-91175	fddd	
335-212	91175-91176	:	
335-213	91176-91177	:	
335-214	91177-91178	1	
335-215	91178-91179	/	
335-216	91179-91181	64	
335-217	91182-91183	-	
335-218	91183-91186	lro	
335-219	91187-91188	-	
335-220	91188-91191	tso	
335-221	91191-91192	"	
335-222	91193-91194	#	
335-223	91194-91198	ipv6	
335-224	91198-91199	_	
335-225	91199-91212	defaultrouter	
335-226	91212-91213	=	
335-227	91213-91214	"	
335-228	91214-91218	fddd	
335-229	91218-91219	:	
335-230	91219-91220	:	
335-231	91220-91221	1	
335-232	91221-91222	"	
335-233	91223-91224	#	
335-234	91225-91233	wireless	
335-235	91233-91234	,	
335-236	91235-91240	https	
335-237	91240-91241	:	
335-238	91241-91242	/	
335-239	91242-91243	/	
335-240	91243-91254	calomel.org	
335-241	91254-91255	/	
335-242	91255-91289	freebsd_wireless_access_point.html	
335-243	91290-91291	#	
335-244	91291-91301	wlans_ath0	
335-245	91301-91302	=	
335-246	91302-91303	"	
335-247	91303-91308	wlan0	
335-248	91308-91309	"	
335-249	91310-91311	#	
335-250	91311-91328	create_args_wlan0	
335-251	91328-91329	=	
335-252	91329-91330	"	
335-253	91330-91338	wlanmode	
335-254	91339-91345	hostap	
335-255	91345-91346	"	
335-256	91347-91348	#	
335-257	91348-91362	hostapd_enable	
335-258	91362-91363	=	
335-259	91363-91364	"	
335-260	91364-91367	YES	
335-261	91367-91368	"	
335-262	91369-91370	#	
335-263	91370-91384	ifconfig_wlan0	
335-264	91384-91385	=	
335-265	91385-91386	"	
335-266	91386-91390	inet	
335-267	91391-91401	10.0.100.1	
335-268	91402-91409	netmask	
335-269	91410-91423	255.255.255.0	
335-270	91423-91424	"	
335-271	91425-91426	#	
335-272	91427-91435	Security	
335-273	91436-91441	Level	
335-274	91442-91443	(	
335-275	91443-91459	kern.securelevel	
335-276	91459-91460	)	
335-277	91461-91465	Note	
335-278	91465-91466	:	
335-279	91467-91474	updates	
335-280	91475-91481	cannot	
335-281	91482-91484	be	
335-282	91485-91494	installed	
335-283	91495-91499	when	
335-284	91500-91503	the	
335-285	91504-91505	#	
335-286	91506-91512	system	
335-287	91513-91524	securelevel	
335-288	91525-91527	is	
335-289	91528-91535	greater	
335-290	91536-91540	than	
335-291	91541-91545	zero	
335-292	91545-91546	.	

#Text=#kern_securelevel_enable="YES"
#Text=#kern_securelevel="2"
#Text=### EOF ###
#Text=OPTIONAL: Rebuilding the Kernel to use Recent ACKnowledgment (RACK)
#Text=If you wish to use the new Netflix RACK TCP stack the kernel must be rebuilt
#Text=with additional TCP stacks and the high speed kernel timer.
336-1	91547-91548	#	
336-2	91548-91571	kern_securelevel_enable	
336-3	91571-91572	=	
336-4	91572-91573	"	
336-5	91573-91576	YES	
336-6	91576-91577	"	
336-7	91578-91579	#	
336-8	91579-91595	kern_securelevel	
336-9	91595-91596	=	
336-10	91596-91597	"	
336-11	91597-91598	2	
336-12	91598-91599	"	
336-13	91600-91601	#	
336-14	91601-91602	#	
336-15	91602-91603	#	
336-16	91604-91607	EOF	
336-17	91608-91609	#	
336-18	91609-91610	#	
336-19	91610-91611	#	
336-20	91612-91620	OPTIONAL	
336-21	91620-91621	:	
336-22	91622-91632	Rebuilding	
336-23	91633-91636	the	
336-24	91637-91643	Kernel	
336-25	91644-91646	to	
336-26	91647-91650	use	
336-27	91651-91657	Recent	
336-28	91658-91672	ACKnowledgment	
336-29	91673-91674	(	
336-30	91674-91678	RACK	
336-31	91678-91679	)	
336-32	91680-91682	If	
336-33	91683-91686	you	
336-34	91687-91691	wish	
336-35	91692-91694	to	
336-36	91695-91698	use	
336-37	91699-91702	the	
336-38	91703-91706	new	
336-39	91707-91714	Netflix	
336-40	91715-91719	RACK	
336-41	91720-91723	TCP	
336-42	91724-91729	stack	
336-43	91730-91733	the	
336-44	91734-91740	kernel	
336-45	91741-91745	must	
336-46	91746-91748	be	
336-47	91749-91756	rebuilt	
336-48	91757-91761	with	
336-49	91762-91772	additional	
336-50	91773-91776	TCP	
336-51	91777-91783	stacks	
336-52	91784-91787	and	
336-53	91788-91791	the	
336-54	91792-91796	high	
336-55	91797-91802	speed	
336-56	91803-91809	kernel	
336-57	91810-91815	timer	
336-58	91815-91816	.	

#Text=The rebuild process
#Text=takes ~20 minutes on an Intel Core i7-8750H with a Samsung 970 PRO NVMe M.2 2TB .
#Text=# Calomel.org
#Text=-|-
#Text=April 2021
#Text=# https://calomel.org/freebsd_network_tuning.html
#Text=# Add the RACK TCP stack options to boot/loader and sysctl.conf
#Text=echo "tcp_rack_load=\\"YES\\"" >> /boot/loader.conf
#Text=echo "net.inet.tcp.functions_default=rack" >> /etc/sysctl.conf
#Text=# SVN Checkout the latest 12.1 source tree with current patches applied
#Text=/usr/bin/svnlite checkout https://svn.freebsd.org/base/releng/12.1 /usr/src/
#Text=# Create a new kernel config called "CALOMEL".
337-1	91817-91820	The	
337-2	91821-91828	rebuild	
337-3	91829-91836	process	
337-4	91837-91842	takes	
337-5	91843-91844	~	
337-6	91844-91846	20	
337-7	91847-91854	minutes	
337-8	91855-91857	on	
337-9	91858-91860	an	
337-10	91861-91866	Intel	
337-11	91867-91871	Core	
337-12	91872-91874	i7	
337-13	91874-91875	-	
337-14	91875-91880	8750H	
337-15	91881-91885	with	
337-16	91886-91887	a	
337-17	91888-91895	Samsung	
337-18	91896-91899	970	
337-19	91900-91903	PRO	
337-20	91904-91908	NVMe	
337-21	91909-91910	M	
337-22	91910-91912	.2	
337-23	91913-91916	2TB	
337-24	91917-91918	.	
337-25	91919-91920	#	
337-26	91921-91932	Calomel.org	
337-27	91933-91934	-	
337-28	91934-91935	|	
337-29	91935-91936	-	
337-30	91937-91942	April	
337-31	91943-91947	2021	
337-32	91948-91949	#	
337-33	91950-91955	https	
337-34	91955-91956	:	
337-35	91956-91957	/	
337-36	91957-91958	/	
337-37	91958-91969	calomel.org	
337-38	91969-91970	/	
337-39	91970-91997	freebsd_network_tuning.html	
337-40	91998-91999	#	
337-41	92000-92003	Add	
337-42	92004-92007	the	
337-43	92008-92012	RACK	
337-44	92013-92016	TCP	
337-45	92017-92022	stack	
337-46	92023-92030	options	
337-47	92031-92033	to	
337-48	92034-92038	boot	
337-49	92038-92039	/	
337-50	92039-92045	loader	
337-51	92046-92049	and	
337-52	92050-92061	sysctl.conf	
337-53	92062-92066	echo	
337-54	92067-92068	"	
337-55	92068-92081	tcp_rack_load	
337-56	92081-92082	=	
337-57	92082-92083	\	
337-58	92083-92084	"	
337-59	92084-92087	YES	
337-60	92087-92088	\	
337-61	92088-92089	"	
337-62	92089-92090	"	
337-63	92091-92092	>	
337-64	92092-92093	>	
337-65	92094-92095	/	
337-66	92095-92099	boot	
337-67	92099-92100	/	
337-68	92100-92111	loader.conf	
337-69	92112-92116	echo	
337-70	92117-92118	"	
337-71	92118-92148	net.inet.tcp.functions_default	
337-72	92148-92149	=	
337-73	92149-92153	rack	
337-74	92153-92154	"	
337-75	92155-92156	>	
337-76	92156-92157	>	
337-77	92158-92159	/	
337-78	92159-92162	etc	
337-79	92162-92163	/	
337-80	92163-92174	sysctl.conf	
337-81	92175-92176	#	
337-82	92177-92180	SVN	
337-83	92181-92189	Checkout	
337-84	92190-92193	the	
337-85	92194-92200	latest	
337-86	92201-92205	12.1	
337-87	92206-92212	source	
337-88	92213-92217	tree	
337-89	92218-92222	with	
337-90	92223-92230	current	
337-91	92231-92238	patches	
337-92	92239-92246	applied	
337-93	92247-92248	/	
337-94	92248-92251	usr	
337-95	92251-92252	/	
337-96	92252-92255	bin	
337-97	92255-92256	/	
337-98	92256-92263	svnlite	
337-99	92264-92272	checkout	
337-100	92273-92278	https	
337-101	92278-92279	:	
337-102	92279-92280	/	
337-103	92280-92281	/	
337-104	92281-92296	svn.freebsd.org	
337-105	92296-92297	/	
337-106	92297-92301	base	
337-107	92301-92302	/	
337-108	92302-92308	releng	
337-109	92308-92309	/	
337-110	92309-92313	12.1	
337-111	92314-92315	/	
337-112	92315-92318	usr	
337-113	92318-92319	/	
337-114	92319-92322	src	
337-115	92322-92323	/	
337-116	92324-92325	#	
337-117	92326-92332	Create	
337-118	92333-92334	a	
337-119	92335-92338	new	
337-120	92339-92345	kernel	
337-121	92346-92352	config	
337-122	92353-92359	called	
337-123	92360-92361	"	
337-124	92361-92368	CALOMEL	
337-125	92368-92369	"	
337-126	92369-92370	.	

#Text=Add the RACK tcp stack to the GENERIC kernel.
#Text=echo -e "include GENERIC\\nident
#Text=CALOMEL\\nmakeoptions WITH_EXTRA_TCP_STACKS=1\\noptions TCPHPTS" > /usr/src/sys/amd64/conf/CALOMEL
#Text=# Build the new kernel called "CALOMEL" and install
#Text=cd /usr/src && make buildkernel KERNCONF=CALOMEL && make installkernel KERNCONF=CALOMEL && echo SUCCESS
#Text=# If you need to free up space, remove the entire kernel source tree
#Text=cd; rm -rf /usr/src/ && mkdir /usr/src && chown root:wheel /usr/src
#Text=# Reboot the server to use the new "CALOMEL" kernel by default
#Text=reboot
#Text=# After reboot, verify the new "CALOMEL" named kernel loaded, patches
#Text=# applied (p6) and SVN revision number (r349243) similar to the following...
#Text=uname -a
#Text=FreeBSD Rick-n-Morty 12.1-RELEASE-p0 FreeBSD 12.1-RELEASE-p6 r123456 CALOMEL amd64
#Text=^^^^^^^
#Text=# Then check the available congestion control options with,
#Text=# "sysctl net.inet.tcp.functions_available".
338-1	92371-92374	Add	
338-2	92375-92378	the	
338-3	92379-92383	RACK	
338-4	92384-92387	tcp	
338-5	92388-92393	stack	
338-6	92394-92396	to	
338-7	92397-92400	the	
338-8	92401-92408	GENERIC	
338-9	92409-92415	kernel	
338-10	92415-92416	.	
338-11	92417-92421	echo	
338-12	92422-92423	-	
338-13	92423-92424	e	
338-14	92425-92426	"	
338-15	92426-92433	include	
338-16	92434-92441	GENERIC	
338-17	92441-92442	\	
338-18	92442-92448	nident	
338-19	92449-92456	CALOMEL	
338-20	92456-92457	\	
338-21	92457-92469	nmakeoptions	
338-22	92470-92491	WITH_EXTRA_TCP_STACKS	
338-23	92491-92492	=	
338-24	92492-92493	1	
338-25	92493-92494	\	
338-26	92494-92502	noptions	
338-27	92503-92510	TCPHPTS	
338-28	92510-92511	"	
338-29	92512-92513	>	
338-30	92514-92515	/	
338-31	92515-92518	usr	
338-32	92518-92519	/	
338-33	92519-92522	src	
338-34	92522-92523	/	
338-35	92523-92526	sys	
338-36	92526-92527	/	
338-37	92527-92532	amd64	
338-38	92532-92533	/	
338-39	92533-92537	conf	
338-40	92537-92538	/	
338-41	92538-92545	CALOMEL	
338-42	92546-92547	#	
338-43	92548-92553	Build	
338-44	92554-92557	the	
338-45	92558-92561	new	
338-46	92562-92568	kernel	
338-47	92569-92575	called	
338-48	92576-92577	"	
338-49	92577-92584	CALOMEL	
338-50	92584-92585	"	
338-51	92586-92589	and	
338-52	92590-92597	install	
338-53	92598-92600	cd	
338-54	92601-92602	/	
338-55	92602-92605	usr	
338-56	92605-92606	/	
338-57	92606-92609	src	
338-58	92610-92611	&	
338-59	92611-92612	&	
338-60	92613-92617	make	
338-61	92618-92629	buildkernel	
338-62	92630-92638	KERNCONF	
338-63	92638-92639	=	
338-64	92639-92646	CALOMEL	
338-65	92647-92648	&	
338-66	92648-92649	&	
338-67	92650-92654	make	
338-68	92655-92668	installkernel	
338-69	92669-92677	KERNCONF	
338-70	92677-92678	=	
338-71	92678-92685	CALOMEL	
338-72	92686-92687	&	
338-73	92687-92688	&	
338-74	92689-92693	echo	
338-75	92694-92701	SUCCESS	
338-76	92702-92703	#	
338-77	92704-92706	If	
338-78	92707-92710	you	
338-79	92711-92715	need	
338-80	92716-92718	to	
338-81	92719-92723	free	
338-82	92724-92726	up	
338-83	92727-92732	space	
338-84	92732-92733	,	
338-85	92734-92740	remove	
338-86	92741-92744	the	
338-87	92745-92751	entire	
338-88	92752-92758	kernel	
338-89	92759-92765	source	
338-90	92766-92770	tree	
338-91	92771-92773	cd	
338-92	92773-92774	;	
338-93	92775-92777	rm	
338-94	92778-92779	-	
338-95	92779-92781	rf	
338-96	92782-92783	/	
338-97	92783-92786	usr	
338-98	92786-92787	/	
338-99	92787-92790	src	
338-100	92790-92791	/	
338-101	92792-92793	&	
338-102	92793-92794	&	
338-103	92795-92800	mkdir	
338-104	92801-92802	/	
338-105	92802-92805	usr	
338-106	92805-92806	/	
338-107	92806-92809	src	
338-108	92810-92811	&	
338-109	92811-92812	&	
338-110	92813-92818	chown	
338-111	92819-92823	root	
338-112	92823-92824	:	
338-113	92824-92829	wheel	
338-114	92830-92831	/	
338-115	92831-92834	usr	
338-116	92834-92835	/	
338-117	92835-92838	src	
338-118	92839-92840	#	
338-119	92841-92847	Reboot	
338-120	92848-92851	the	
338-121	92852-92858	server	
338-122	92859-92861	to	
338-123	92862-92865	use	
338-124	92866-92869	the	
338-125	92870-92873	new	
338-126	92874-92875	"	
338-127	92875-92882	CALOMEL	
338-128	92882-92883	"	
338-129	92884-92890	kernel	
338-130	92891-92893	by	
338-131	92894-92901	default	
338-132	92902-92908	reboot	
338-133	92909-92910	#	
338-134	92911-92916	After	
338-135	92917-92923	reboot	
338-136	92923-92924	,	
338-137	92925-92931	verify	
338-138	92932-92935	the	
338-139	92936-92939	new	
338-140	92940-92941	"	
338-141	92941-92948	CALOMEL	
338-142	92948-92949	"	
338-143	92950-92955	named	
338-144	92956-92962	kernel	
338-145	92963-92969	loaded	
338-146	92969-92970	,	
338-147	92971-92978	patches	
338-148	92979-92980	#	
338-149	92981-92988	applied	
338-150	92989-92990	(	
338-151	92990-92992	p6	
338-152	92992-92993	)	
338-153	92994-92997	and	
338-154	92998-93001	SVN	
338-155	93002-93010	revision	
338-156	93011-93017	number	
338-157	93018-93019	(	
338-158	93019-93026	r349243	
338-159	93026-93027	)	
338-160	93028-93035	similar	
338-161	93036-93038	to	
338-162	93039-93042	the	
338-163	93043-93052	following	
338-164	93052-93053	.	
338-165	93053-93054	.	
338-166	93054-93055	.	
338-167	93056-93061	uname	
338-168	93062-93063	-	
338-169	93063-93064	a	
338-170	93065-93072	FreeBSD	
338-171	93073-93085	Rick-n-Morty	
338-172	93086-93090	12.1	
338-173	93090-93091	-	
338-174	93091-93101	RELEASE-p0	
338-175	93102-93109	FreeBSD	
338-176	93110-93114	12.1	
338-177	93114-93115	-	
338-178	93115-93125	RELEASE-p6	
338-179	93126-93133	r123456	
338-180	93134-93141	CALOMEL	
338-181	93142-93147	amd64	
338-182	93148-93149	^	
338-183	93149-93150	^	
338-184	93150-93151	^	
338-185	93151-93152	^	
338-186	93152-93153	^	
338-187	93153-93154	^	
338-188	93154-93155	^	
338-189	93156-93157	#	
338-190	93158-93162	Then	
338-191	93163-93168	check	
338-192	93169-93172	the	
338-193	93173-93182	available	
338-194	93183-93193	congestion	
338-195	93194-93201	control	
338-196	93202-93209	options	
338-197	93210-93214	with	
338-198	93214-93215	,	
338-199	93216-93217	#	
338-200	93218-93219	"	
338-201	93219-93225	sysctl	
338-202	93226-93258	net.inet.tcp.functions_available	
338-203	93258-93259	"	
338-204	93259-93260	.	

#Text=The rack TCP stack
#Text=# should have an asterisk next to it signifying RACK is the
#Text=# default TCP stack.
#Text=net.inet.tcp.functions_available:
#Text=Stack
#Text=D Alias
#Text=PCB count
#Text=freebsd
#Text=freebsd
#Text=rack
#Text=* rack
#Text=750
#Text=^^^^
#Text=Do these optimizations really make a difference for a web server ?
339-1	93261-93264	The	
339-2	93265-93269	rack	
339-3	93270-93273	TCP	
339-4	93274-93279	stack	
339-5	93280-93281	#	
339-6	93282-93288	should	
339-7	93289-93293	have	
339-8	93294-93296	an	
339-9	93297-93305	asterisk	
339-10	93306-93310	next	
339-11	93311-93313	to	
339-12	93314-93316	it	
339-13	93317-93327	signifying	
339-14	93328-93332	RACK	
339-15	93333-93335	is	
339-16	93336-93339	the	
339-17	93340-93341	#	
339-18	93342-93349	default	
339-19	93350-93353	TCP	
339-20	93354-93359	stack	
339-21	93359-93360	.	
339-22	93361-93393	net.inet.tcp.functions_available	
339-23	93393-93394	:	
339-24	93395-93400	Stack	
339-25	93401-93402	D	
339-26	93403-93408	Alias	
339-27	93409-93412	PCB	
339-28	93413-93418	count	
339-29	93419-93426	freebsd	
339-30	93427-93434	freebsd	
339-31	93435-93439	rack	
339-32	93440-93441	*	
339-33	93442-93446	rack	
339-34	93447-93450	750	
339-35	93451-93452	^	
339-36	93452-93453	^	
339-37	93453-93454	^	
339-38	93454-93455	^	
339-39	93456-93458	Do	
339-40	93459-93464	these	
339-41	93465-93478	optimizations	
339-42	93479-93485	really	
339-43	93486-93490	make	
339-44	93491-93492	a	
339-45	93493-93503	difference	
339-46	93504-93507	for	
339-47	93508-93509	a	
339-48	93510-93513	web	
339-49	93514-93520	server	
339-50	93521-93522	?	

#Text=Lets take a look at the web server performance for our server, calomel.org
#Text=before and after modifications.
340-1	93523-93527	Lets	
340-2	93528-93532	take	
340-3	93533-93534	a	
340-4	93535-93539	look	
340-5	93540-93542	at	
340-6	93543-93546	the	
340-7	93547-93550	web	
340-8	93551-93557	server	
340-9	93558-93569	performance	
340-10	93570-93573	for	
340-11	93574-93577	our	
340-12	93578-93584	server	
340-13	93584-93585	,	
340-14	93586-93597	calomel.org	
340-15	93598-93604	before	
340-16	93605-93608	and	
340-17	93609-93614	after	
340-18	93615-93628	modifications	
340-19	93628-93629	.	

#Text=Keep in mind the graphs are the result of the
#Text=exact same hardware, the same network, the same files and access is 100% public
#Text=requests.
341-1	93630-93634	Keep	
341-2	93635-93637	in	
341-3	93638-93642	mind	
341-4	93643-93646	the	
341-5	93647-93653	graphs	
341-6	93654-93657	are	
341-7	93658-93661	the	
341-8	93662-93668	result	
341-9	93669-93671	of	
341-10	93672-93675	the	
341-11	93676-93681	exact	
341-12	93682-93686	same	
341-13	93687-93695	hardware	
341-14	93695-93696	,	
341-15	93697-93700	the	
341-16	93701-93705	same	
341-17	93706-93713	network	
341-18	93713-93714	,	
341-19	93715-93718	the	
341-20	93719-93723	same	
341-21	93724-93729	files	
341-22	93730-93733	and	
341-23	93734-93740	access	
341-24	93741-93743	is	
341-25	93744-93748	100%	
341-26	93749-93755	public	
341-27	93756-93764	requests	
341-28	93764-93765	.	

#Text=We are only graphing successful requests (code 200) and no code 301
#Text=redirections or errors.
342-1	93766-93768	We	
342-2	93769-93772	are	
342-3	93773-93777	only	
342-4	93778-93786	graphing	
342-5	93787-93797	successful	
342-6	93798-93806	requests	
342-7	93807-93808	(	
342-8	93808-93812	code	
342-9	93813-93816	200	
342-10	93816-93817	)	
342-11	93818-93821	and	
342-12	93822-93824	no	
342-13	93825-93829	code	
342-14	93830-93833	301	
342-15	93834-93846	redirections	
342-16	93847-93849	or	
342-17	93850-93856	errors	
342-18	93856-93857	.	

#Text=With Nginx you can setup the log lines to tell you how long it took to
#Text=fulfill the client request and complete the data transfer to the client.
343-1	93858-93862	With	
343-2	93863-93868	Nginx	
343-3	93869-93872	you	
343-4	93873-93876	can	
343-5	93877-93882	setup	
343-6	93883-93886	the	
343-7	93887-93890	log	
343-8	93891-93896	lines	
343-9	93897-93899	to	
343-10	93900-93904	tell	
343-11	93905-93908	you	
343-12	93909-93912	how	
343-13	93913-93917	long	
343-14	93918-93920	it	
343-15	93921-93925	took	
343-16	93926-93928	to	
343-17	93929-93936	fulfill	
343-18	93937-93940	the	
343-19	93941-93947	client	
343-20	93948-93955	request	
343-21	93956-93959	and	
343-22	93960-93968	complete	
343-23	93969-93972	the	
343-24	93973-93977	data	
343-25	93978-93986	transfer	
343-26	93987-93989	to	
343-27	93990-93993	the	
343-28	93994-94000	client	
343-29	94000-94001	.	

#Text=We
#Text=have multiple examples of how to setup this log format on our Nginx Secure Web Server page.
344-1	94002-94004	We	
344-2	94005-94009	have	
344-3	94010-94018	multiple	
344-4	94019-94027	examples	
344-5	94028-94030	of	
344-6	94031-94034	how	
344-7	94035-94037	to	
344-8	94038-94043	setup	
344-9	94044-94048	this	
344-10	94049-94052	log	
344-11	94053-94059	format	
344-12	94060-94062	on	
344-13	94063-94066	our	
344-14	94067-94072	Nginx	
344-15	94073-94079	Secure	
344-16	94080-94083	Web	
344-17	94084-94090	Server	
344-18	94091-94095	page	
344-19	94095-94096	.	

#Text=Using the log data we can
#Text=graph the nginx performance times with our Web Server Distribution
#Text=Performance Perl script.
345-1	94097-94102	Using	
345-2	94103-94106	the	
345-3	94107-94110	log	
345-4	94111-94115	data	
345-5	94116-94118	we	
345-6	94119-94122	can	
345-7	94123-94128	graph	
345-8	94129-94132	the	
345-9	94133-94138	nginx	
345-10	94139-94150	performance	
345-11	94151-94156	times	
345-12	94157-94161	with	
345-13	94162-94165	our	
345-14	94166-94169	Web	
345-15	94170-94176	Server	
345-16	94177-94189	Distribution	
345-17	94190-94201	Performance	
345-18	94202-94206	Perl	
345-19	94207-94213	script	
345-20	94213-94214	.	

#Text=BEFORE: FreeBSD 10 defaults.
346-1	94215-94221	BEFORE	
346-2	94221-94222	:	
346-3	94223-94230	FreeBSD	
346-4	94231-94233	10	
346-5	94234-94242	defaults	
346-6	94242-94243	.	

#Text=The following graph displays the time in
#Text=100 millisecond increments against the number of completed object transfers for
#Text=the last ten thousand (10,000) log lines.
347-1	94244-94247	The	
347-2	94248-94257	following	
347-3	94258-94263	graph	
347-4	94264-94272	displays	
347-5	94273-94276	the	
347-6	94277-94281	time	
347-7	94282-94284	in	
347-8	94285-94288	100	
347-9	94289-94300	millisecond	
347-10	94301-94311	increments	
347-11	94312-94319	against	
347-12	94320-94323	the	
347-13	94324-94330	number	
347-14	94331-94333	of	
347-15	94334-94343	completed	
347-16	94344-94350	object	
347-17	94351-94360	transfers	
347-18	94361-94364	for	
347-19	94365-94368	the	
347-20	94369-94373	last	
347-21	94374-94377	ten	
347-22	94378-94386	thousand	
347-23	94387-94388	(	
347-24	94388-94394	10,000	
347-25	94394-94395	)	
347-26	94396-94399	log	
347-27	94400-94405	lines	
347-28	94405-94406	.	

#Text=The log was collected before speed
#Text=optimizations using a default FreeBSD 10 install.
348-1	94407-94410	The	
348-2	94411-94414	log	
348-3	94415-94418	was	
348-4	94419-94428	collected	
348-5	94429-94435	before	
348-6	94436-94441	speed	
348-7	94442-94455	optimizations	
348-8	94456-94461	using	
348-9	94462-94463	a	
348-10	94464-94471	default	
348-11	94472-94479	FreeBSD	
348-12	94480-94482	10	
348-13	94483-94490	install	
348-14	94490-94491	.	

#Text=Keep in mind an "object" is an
#Text=html, jpg, css or any other file.
349-1	94492-94496	Keep	
349-2	94497-94499	in	
349-3	94500-94504	mind	
349-4	94505-94507	an	
349-5	94508-94509	"	
349-6	94509-94515	object	
349-7	94515-94516	"	
349-8	94517-94519	is	
349-9	94520-94522	an	
349-10	94523-94527	html	
349-11	94527-94528	,	
349-12	94529-94532	jpg	
349-13	94532-94533	,	
349-14	94534-94537	css	
349-15	94538-94540	or	
349-16	94541-94544	any	
349-17	94545-94550	other	
349-18	94551-94555	file	
349-19	94555-94556	.	

#Text=File sizes range from 24 kilobytes up to 350
#Text=kilobytes.
350-1	94557-94561	File	
350-2	94562-94567	sizes	
350-3	94568-94573	range	
350-4	94574-94578	from	
350-5	94579-94581	24	
350-6	94582-94591	kilobytes	
350-7	94592-94594	up	
350-8	94595-94597	to	
350-9	94598-94601	350	
350-10	94602-94611	kilobytes	
350-11	94611-94612	.	

#Text=On the left hand side is the tall vertical line at 0 seconds going
#Text=up to 7142 objects and a few smaller lines on the bottom left.
351-1	94613-94615	On	
351-2	94616-94619	the	
351-3	94620-94624	left	
351-4	94625-94629	hand	
351-5	94630-94634	side	
351-6	94635-94637	is	
351-7	94638-94641	the	
351-8	94642-94646	tall	
351-9	94647-94655	vertical	
351-10	94656-94660	line	
351-11	94661-94663	at	
351-12	94664-94665	0	
351-13	94666-94673	seconds	
351-14	94674-94679	going	
351-15	94680-94682	up	
351-16	94683-94685	to	
351-17	94686-94690	7142	
351-18	94691-94698	objects	
351-19	94699-94702	and	
351-20	94703-94704	a	
351-21	94705-94708	few	
351-22	94709-94716	smaller	
351-23	94717-94722	lines	
351-24	94723-94725	on	
351-25	94726-94729	the	
351-26	94730-94736	bottom	
351-27	94737-94741	left	
351-28	94741-94742	.	

#Text=The tall line at
#Text=0 seconds tells us for the last 10,000 objects served, the web server was able
#Text=to send and complete the network transfer in zero(0) seconds ( i.e.
#Text=less then
#Text=100 milliseconds) 71.42% of the time. (7142/10000*100=71.42).
352-1	94743-94746	The	
352-2	94747-94751	tall	
352-3	94752-94756	line	
352-4	94757-94759	at	
352-5	94760-94761	0	
352-6	94762-94769	seconds	
352-7	94770-94775	tells	
352-8	94776-94778	us	
352-9	94779-94782	for	
352-10	94783-94786	the	
352-11	94787-94791	last	
352-12	94792-94798	10,000	
352-13	94799-94806	objects	
352-14	94807-94813	served	
352-15	94813-94814	,	
352-16	94815-94818	the	
352-17	94819-94822	web	
352-18	94823-94829	server	
352-19	94830-94833	was	
352-20	94834-94838	able	
352-21	94839-94841	to	
352-22	94842-94846	send	
352-23	94847-94850	and	
352-24	94851-94859	complete	
352-25	94860-94863	the	
352-26	94864-94871	network	
352-27	94872-94880	transfer	
352-28	94881-94883	in	
352-29	94884-94888	zero	
352-30	94888-94889	(	
352-31	94889-94890	0	
352-32	94890-94891	)	
352-33	94892-94899	seconds	
352-34	94900-94901	(	
352-35	94902-94905	i.e	
352-36	94905-94906	.	
352-37	94907-94911	less	
352-38	94912-94916	then	
352-39	94917-94920	100	
352-40	94921-94933	milliseconds	
352-41	94933-94934	)	
352-42	94935-94941	71.42%	
352-43	94942-94944	of	
352-44	94945-94948	the	
352-45	94949-94953	time	
352-46	94953-94954	.	
352-47	94955-94956	(	
352-48	94956-94960	7142	
352-49	94960-94961	/	
352-50	94961-94966	10000	
352-51	94966-94967	*	
352-52	94967-94970	100	
352-53	94970-94971	=	
352-54	94971-94976	71.42	
352-55	94976-94977	)	
352-56	94977-94978	.	

#Text=Keep in mind
#Text=calomel.org is a SSL enabled site and this time also includes the https
#Text=negotiation phase.
#Text=calomel@freebsd10:
#Text=.
353-1	94979-94983	Keep	
353-2	94984-94986	in	
353-3	94987-94991	mind	
353-4	94992-95003	calomel.org	
353-5	95004-95006	is	
353-6	95007-95008	a	
353-7	95009-95012	SSL	
353-8	95013-95020	enabled	
353-9	95021-95025	site	
353-10	95026-95029	and	
353-11	95030-95034	this	
353-12	95035-95039	time	
353-13	95040-95044	also	
353-14	95045-95053	includes	
353-15	95054-95057	the	
353-16	95058-95063	https	
353-17	95064-95075	negotiation	
353-18	95076-95081	phase	
353-19	95081-95082	.	
353-20	95083-95090	calomel	
353-21	95090-95091	@	
353-22	95091-95100	freebsd10	
353-23	95100-95101	:	
353-24	95102-95103	.	

#Text=/calomel_http_log_distribution_performance.pl
#Text=.:.
354-1	95103-95104	/	
354-2	95104-95148	calomel_http_log_distribution_performance.pl	
354-3	95149-95150	.	
354-4	95150-95151	:	
354-5	95151-95152	.	

#Text=Calomel Webserver Distribution Statistics
#Text=Log lines: 10000, Search string(s):
#Text=__________________________________________________________________
#Text=7142 |.................................................................
#Text=|.................................................................
#Text=6157 |_________________________________________________________________
#Text=|.................................................................
#Text=5172 |.................................................................
#Text=|.................................................................
#Text=4679 |.................................................................
#Text=|.................................................................
#Text=3694 |_________________________________________________________________
#Text=|.................................................................
#Text=2709 |.................................................................
#Text=|.................................................................
#Text=2216 |.................................................................
#Text=|.................................................................
#Text=1231 |_________________________________________________________________
#Text=|||...............................................................
#Text=246 ||||..............................................................
#Text=|||||||||||||||||||||||||||||_|||_|_||_|_|_|_|_|__|_______________
#Text=Time: |^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|
#Text=0.5
#Text=1.0
#Text=1.5
#Text=2.0
#Text=2.5
#Text=3.0
#Text=3.5
#Text=4.0
#Text=4.5
#Text=4.6
#Text=5.0
#Text=5.5
#Text=6.0
#Text=AFTER: FreeBSD 10 optimization.
355-1	95153-95160	Calomel	
355-2	95161-95170	Webserver	
355-3	95171-95183	Distribution	
355-4	95184-95194	Statistics	
355-5	95195-95198	Log	
355-6	95199-95204	lines	
355-7	95204-95205	:	
355-8	95206-95211	10000	
355-9	95211-95212	,	
355-10	95213-95219	Search	
355-11	95220-95226	string	
355-12	95226-95227	(	
355-13	95227-95228	s	
355-14	95228-95229	)	
355-15	95229-95230	:	
355-16	95231-95232	_	
355-17	95232-95233	_	
355-18	95233-95234	_	
355-19	95234-95235	_	
355-20	95235-95236	_	
355-21	95236-95237	_	
355-22	95237-95238	_	
355-23	95238-95239	_	
355-24	95239-95240	_	
355-25	95240-95241	_	
355-26	95241-95242	_	
355-27	95242-95243	_	
355-28	95243-95244	_	
355-29	95244-95245	_	
355-30	95245-95246	_	
355-31	95246-95247	_	
355-32	95247-95248	_	
355-33	95248-95249	_	
355-34	95249-95250	_	
355-35	95250-95251	_	
355-36	95251-95252	_	
355-37	95252-95253	_	
355-38	95253-95254	_	
355-39	95254-95255	_	
355-40	95255-95256	_	
355-41	95256-95257	_	
355-42	95257-95258	_	
355-43	95258-95259	_	
355-44	95259-95260	_	
355-45	95260-95261	_	
355-46	95261-95262	_	
355-47	95262-95263	_	
355-48	95263-95264	_	
355-49	95264-95265	_	
355-50	95265-95266	_	
355-51	95266-95267	_	
355-52	95267-95268	_	
355-53	95268-95269	_	
355-54	95269-95270	_	
355-55	95270-95271	_	
355-56	95271-95272	_	
355-57	95272-95273	_	
355-58	95273-95274	_	
355-59	95274-95275	_	
355-60	95275-95276	_	
355-61	95276-95277	_	
355-62	95277-95278	_	
355-63	95278-95279	_	
355-64	95279-95280	_	
355-65	95280-95281	_	
355-66	95281-95282	_	
355-67	95282-95283	_	
355-68	95283-95284	_	
355-69	95284-95285	_	
355-70	95285-95286	_	
355-71	95286-95287	_	
355-72	95287-95288	_	
355-73	95288-95289	_	
355-74	95289-95290	_	
355-75	95290-95291	_	
355-76	95291-95292	_	
355-77	95292-95293	_	
355-78	95293-95294	_	
355-79	95294-95295	_	
355-80	95295-95296	_	
355-81	95296-95297	_	
355-82	95298-95302	7142	
355-83	95303-95304	|	
355-84	95304-95305	.	
355-85	95305-95306	.	
355-86	95306-95307	.	
355-87	95307-95308	.	
355-88	95308-95309	.	
355-89	95309-95310	.	
355-90	95310-95311	.	
355-91	95311-95312	.	
355-92	95312-95313	.	
355-93	95313-95314	.	
355-94	95314-95315	.	
355-95	95315-95316	.	
355-96	95316-95317	.	
355-97	95317-95318	.	
355-98	95318-95319	.	
355-99	95319-95320	.	
355-100	95320-95321	.	
355-101	95321-95322	.	
355-102	95322-95323	.	
355-103	95323-95324	.	
355-104	95324-95325	.	
355-105	95325-95326	.	
355-106	95326-95327	.	
355-107	95327-95328	.	
355-108	95328-95329	.	
355-109	95329-95330	.	
355-110	95330-95331	.	
355-111	95331-95332	.	
355-112	95332-95333	.	
355-113	95333-95334	.	
355-114	95334-95335	.	
355-115	95335-95336	.	
355-116	95336-95337	.	
355-117	95337-95338	.	
355-118	95338-95339	.	
355-119	95339-95340	.	
355-120	95340-95341	.	
355-121	95341-95342	.	
355-122	95342-95343	.	
355-123	95343-95344	.	
355-124	95344-95345	.	
355-125	95345-95346	.	
355-126	95346-95347	.	
355-127	95347-95348	.	
355-128	95348-95349	.	
355-129	95349-95350	.	
355-130	95350-95351	.	
355-131	95351-95352	.	
355-132	95352-95353	.	
355-133	95353-95354	.	
355-134	95354-95355	.	
355-135	95355-95356	.	
355-136	95356-95357	.	
355-137	95357-95358	.	
355-138	95358-95359	.	
355-139	95359-95360	.	
355-140	95360-95361	.	
355-141	95361-95362	.	
355-142	95362-95363	.	
355-143	95363-95364	.	
355-144	95364-95365	.	
355-145	95365-95366	.	
355-146	95366-95367	.	
355-147	95367-95368	.	
355-148	95368-95369	.	
355-149	95370-95371	|	
355-150	95371-95372	.	
355-151	95372-95373	.	
355-152	95373-95374	.	
355-153	95374-95375	.	
355-154	95375-95376	.	
355-155	95376-95377	.	
355-156	95377-95378	.	
355-157	95378-95379	.	
355-158	95379-95380	.	
355-159	95380-95381	.	
355-160	95381-95382	.	
355-161	95382-95383	.	
355-162	95383-95384	.	
355-163	95384-95385	.	
355-164	95385-95386	.	
355-165	95386-95387	.	
355-166	95387-95388	.	
355-167	95388-95389	.	
355-168	95389-95390	.	
355-169	95390-95391	.	
355-170	95391-95392	.	
355-171	95392-95393	.	
355-172	95393-95394	.	
355-173	95394-95395	.	
355-174	95395-95396	.	
355-175	95396-95397	.	
355-176	95397-95398	.	
355-177	95398-95399	.	
355-178	95399-95400	.	
355-179	95400-95401	.	
355-180	95401-95402	.	
355-181	95402-95403	.	
355-182	95403-95404	.	
355-183	95404-95405	.	
355-184	95405-95406	.	
355-185	95406-95407	.	
355-186	95407-95408	.	
355-187	95408-95409	.	
355-188	95409-95410	.	
355-189	95410-95411	.	
355-190	95411-95412	.	
355-191	95412-95413	.	
355-192	95413-95414	.	
355-193	95414-95415	.	
355-194	95415-95416	.	
355-195	95416-95417	.	
355-196	95417-95418	.	
355-197	95418-95419	.	
355-198	95419-95420	.	
355-199	95420-95421	.	
355-200	95421-95422	.	
355-201	95422-95423	.	
355-202	95423-95424	.	
355-203	95424-95425	.	
355-204	95425-95426	.	
355-205	95426-95427	.	
355-206	95427-95428	.	
355-207	95428-95429	.	
355-208	95429-95430	.	
355-209	95430-95431	.	
355-210	95431-95432	.	
355-211	95432-95433	.	
355-212	95433-95434	.	
355-213	95434-95435	.	
355-214	95435-95436	.	
355-215	95437-95441	6157	
355-216	95442-95443	|	
355-217	95443-95444	_	
355-218	95444-95445	_	
355-219	95445-95446	_	
355-220	95446-95447	_	
355-221	95447-95448	_	
355-222	95448-95449	_	
355-223	95449-95450	_	
355-224	95450-95451	_	
355-225	95451-95452	_	
355-226	95452-95453	_	
355-227	95453-95454	_	
355-228	95454-95455	_	
355-229	95455-95456	_	
355-230	95456-95457	_	
355-231	95457-95458	_	
355-232	95458-95459	_	
355-233	95459-95460	_	
355-234	95460-95461	_	
355-235	95461-95462	_	
355-236	95462-95463	_	
355-237	95463-95464	_	
355-238	95464-95465	_	
355-239	95465-95466	_	
355-240	95466-95467	_	
355-241	95467-95468	_	
355-242	95468-95469	_	
355-243	95469-95470	_	
355-244	95470-95471	_	
355-245	95471-95472	_	
355-246	95472-95473	_	
355-247	95473-95474	_	
355-248	95474-95475	_	
355-249	95475-95476	_	
355-250	95476-95477	_	
355-251	95477-95478	_	
355-252	95478-95479	_	
355-253	95479-95480	_	
355-254	95480-95481	_	
355-255	95481-95482	_	
355-256	95482-95483	_	
355-257	95483-95484	_	
355-258	95484-95485	_	
355-259	95485-95486	_	
355-260	95486-95487	_	
355-261	95487-95488	_	
355-262	95488-95489	_	
355-263	95489-95490	_	
355-264	95490-95491	_	
355-265	95491-95492	_	
355-266	95492-95493	_	
355-267	95493-95494	_	
355-268	95494-95495	_	
355-269	95495-95496	_	
355-270	95496-95497	_	
355-271	95497-95498	_	
355-272	95498-95499	_	
355-273	95499-95500	_	
355-274	95500-95501	_	
355-275	95501-95502	_	
355-276	95502-95503	_	
355-277	95503-95504	_	
355-278	95504-95505	_	
355-279	95505-95506	_	
355-280	95506-95507	_	
355-281	95507-95508	_	
355-282	95509-95510	|	
355-283	95510-95511	.	
355-284	95511-95512	.	
355-285	95512-95513	.	
355-286	95513-95514	.	
355-287	95514-95515	.	
355-288	95515-95516	.	
355-289	95516-95517	.	
355-290	95517-95518	.	
355-291	95518-95519	.	
355-292	95519-95520	.	
355-293	95520-95521	.	
355-294	95521-95522	.	
355-295	95522-95523	.	
355-296	95523-95524	.	
355-297	95524-95525	.	
355-298	95525-95526	.	
355-299	95526-95527	.	
355-300	95527-95528	.	
355-301	95528-95529	.	
355-302	95529-95530	.	
355-303	95530-95531	.	
355-304	95531-95532	.	
355-305	95532-95533	.	
355-306	95533-95534	.	
355-307	95534-95535	.	
355-308	95535-95536	.	
355-309	95536-95537	.	
355-310	95537-95538	.	
355-311	95538-95539	.	
355-312	95539-95540	.	
355-313	95540-95541	.	
355-314	95541-95542	.	
355-315	95542-95543	.	
355-316	95543-95544	.	
355-317	95544-95545	.	
355-318	95545-95546	.	
355-319	95546-95547	.	
355-320	95547-95548	.	
355-321	95548-95549	.	
355-322	95549-95550	.	
355-323	95550-95551	.	
355-324	95551-95552	.	
355-325	95552-95553	.	
355-326	95553-95554	.	
355-327	95554-95555	.	
355-328	95555-95556	.	
355-329	95556-95557	.	
355-330	95557-95558	.	
355-331	95558-95559	.	
355-332	95559-95560	.	
355-333	95560-95561	.	
355-334	95561-95562	.	
355-335	95562-95563	.	
355-336	95563-95564	.	
355-337	95564-95565	.	
355-338	95565-95566	.	
355-339	95566-95567	.	
355-340	95567-95568	.	
355-341	95568-95569	.	
355-342	95569-95570	.	
355-343	95570-95571	.	
355-344	95571-95572	.	
355-345	95572-95573	.	
355-346	95573-95574	.	
355-347	95574-95575	.	
355-348	95576-95580	5172	
355-349	95581-95582	|	
355-350	95582-95583	.	
355-351	95583-95584	.	
355-352	95584-95585	.	
355-353	95585-95586	.	
355-354	95586-95587	.	
355-355	95587-95588	.	
355-356	95588-95589	.	
355-357	95589-95590	.	
355-358	95590-95591	.	
355-359	95591-95592	.	
355-360	95592-95593	.	
355-361	95593-95594	.	
355-362	95594-95595	.	
355-363	95595-95596	.	
355-364	95596-95597	.	
355-365	95597-95598	.	
355-366	95598-95599	.	
355-367	95599-95600	.	
355-368	95600-95601	.	
355-369	95601-95602	.	
355-370	95602-95603	.	
355-371	95603-95604	.	
355-372	95604-95605	.	
355-373	95605-95606	.	
355-374	95606-95607	.	
355-375	95607-95608	.	
355-376	95608-95609	.	
355-377	95609-95610	.	
355-378	95610-95611	.	
355-379	95611-95612	.	
355-380	95612-95613	.	
355-381	95613-95614	.	
355-382	95614-95615	.	
355-383	95615-95616	.	
355-384	95616-95617	.	
355-385	95617-95618	.	
355-386	95618-95619	.	
355-387	95619-95620	.	
355-388	95620-95621	.	
355-389	95621-95622	.	
355-390	95622-95623	.	
355-391	95623-95624	.	
355-392	95624-95625	.	
355-393	95625-95626	.	
355-394	95626-95627	.	
355-395	95627-95628	.	
355-396	95628-95629	.	
355-397	95629-95630	.	
355-398	95630-95631	.	
355-399	95631-95632	.	
355-400	95632-95633	.	
355-401	95633-95634	.	
355-402	95634-95635	.	
355-403	95635-95636	.	
355-404	95636-95637	.	
355-405	95637-95638	.	
355-406	95638-95639	.	
355-407	95639-95640	.	
355-408	95640-95641	.	
355-409	95641-95642	.	
355-410	95642-95643	.	
355-411	95643-95644	.	
355-412	95644-95645	.	
355-413	95645-95646	.	
355-414	95646-95647	.	
355-415	95648-95649	|	
355-416	95649-95650	.	
355-417	95650-95651	.	
355-418	95651-95652	.	
355-419	95652-95653	.	
355-420	95653-95654	.	
355-421	95654-95655	.	
355-422	95655-95656	.	
355-423	95656-95657	.	
355-424	95657-95658	.	
355-425	95658-95659	.	
355-426	95659-95660	.	
355-427	95660-95661	.	
355-428	95661-95662	.	
355-429	95662-95663	.	
355-430	95663-95664	.	
355-431	95664-95665	.	
355-432	95665-95666	.	
355-433	95666-95667	.	
355-434	95667-95668	.	
355-435	95668-95669	.	
355-436	95669-95670	.	
355-437	95670-95671	.	
355-438	95671-95672	.	
355-439	95672-95673	.	
355-440	95673-95674	.	
355-441	95674-95675	.	
355-442	95675-95676	.	
355-443	95676-95677	.	
355-444	95677-95678	.	
355-445	95678-95679	.	
355-446	95679-95680	.	
355-447	95680-95681	.	
355-448	95681-95682	.	
355-449	95682-95683	.	
355-450	95683-95684	.	
355-451	95684-95685	.	
355-452	95685-95686	.	
355-453	95686-95687	.	
355-454	95687-95688	.	
355-455	95688-95689	.	
355-456	95689-95690	.	
355-457	95690-95691	.	
355-458	95691-95692	.	
355-459	95692-95693	.	
355-460	95693-95694	.	
355-461	95694-95695	.	
355-462	95695-95696	.	
355-463	95696-95697	.	
355-464	95697-95698	.	
355-465	95698-95699	.	
355-466	95699-95700	.	
355-467	95700-95701	.	
355-468	95701-95702	.	
355-469	95702-95703	.	
355-470	95703-95704	.	
355-471	95704-95705	.	
355-472	95705-95706	.	
355-473	95706-95707	.	
355-474	95707-95708	.	
355-475	95708-95709	.	
355-476	95709-95710	.	
355-477	95710-95711	.	
355-478	95711-95712	.	
355-479	95712-95713	.	
355-480	95713-95714	.	
355-481	95715-95719	4679	
355-482	95720-95721	|	
355-483	95721-95722	.	
355-484	95722-95723	.	
355-485	95723-95724	.	
355-486	95724-95725	.	
355-487	95725-95726	.	
355-488	95726-95727	.	
355-489	95727-95728	.	
355-490	95728-95729	.	
355-491	95729-95730	.	
355-492	95730-95731	.	
355-493	95731-95732	.	
355-494	95732-95733	.	
355-495	95733-95734	.	
355-496	95734-95735	.	
355-497	95735-95736	.	
355-498	95736-95737	.	
355-499	95737-95738	.	
355-500	95738-95739	.	
355-501	95739-95740	.	
355-502	95740-95741	.	
355-503	95741-95742	.	
355-504	95742-95743	.	
355-505	95743-95744	.	
355-506	95744-95745	.	
355-507	95745-95746	.	
355-508	95746-95747	.	
355-509	95747-95748	.	
355-510	95748-95749	.	
355-511	95749-95750	.	
355-512	95750-95751	.	
355-513	95751-95752	.	
355-514	95752-95753	.	
355-515	95753-95754	.	
355-516	95754-95755	.	
355-517	95755-95756	.	
355-518	95756-95757	.	
355-519	95757-95758	.	
355-520	95758-95759	.	
355-521	95759-95760	.	
355-522	95760-95761	.	
355-523	95761-95762	.	
355-524	95762-95763	.	
355-525	95763-95764	.	
355-526	95764-95765	.	
355-527	95765-95766	.	
355-528	95766-95767	.	
355-529	95767-95768	.	
355-530	95768-95769	.	
355-531	95769-95770	.	
355-532	95770-95771	.	
355-533	95771-95772	.	
355-534	95772-95773	.	
355-535	95773-95774	.	
355-536	95774-95775	.	
355-537	95775-95776	.	
355-538	95776-95777	.	
355-539	95777-95778	.	
355-540	95778-95779	.	
355-541	95779-95780	.	
355-542	95780-95781	.	
355-543	95781-95782	.	
355-544	95782-95783	.	
355-545	95783-95784	.	
355-546	95784-95785	.	
355-547	95785-95786	.	
355-548	95787-95788	|	
355-549	95788-95789	.	
355-550	95789-95790	.	
355-551	95790-95791	.	
355-552	95791-95792	.	
355-553	95792-95793	.	
355-554	95793-95794	.	
355-555	95794-95795	.	
355-556	95795-95796	.	
355-557	95796-95797	.	
355-558	95797-95798	.	
355-559	95798-95799	.	
355-560	95799-95800	.	
355-561	95800-95801	.	
355-562	95801-95802	.	
355-563	95802-95803	.	
355-564	95803-95804	.	
355-565	95804-95805	.	
355-566	95805-95806	.	
355-567	95806-95807	.	
355-568	95807-95808	.	
355-569	95808-95809	.	
355-570	95809-95810	.	
355-571	95810-95811	.	
355-572	95811-95812	.	
355-573	95812-95813	.	
355-574	95813-95814	.	
355-575	95814-95815	.	
355-576	95815-95816	.	
355-577	95816-95817	.	
355-578	95817-95818	.	
355-579	95818-95819	.	
355-580	95819-95820	.	
355-581	95820-95821	.	
355-582	95821-95822	.	
355-583	95822-95823	.	
355-584	95823-95824	.	
355-585	95824-95825	.	
355-586	95825-95826	.	
355-587	95826-95827	.	
355-588	95827-95828	.	
355-589	95828-95829	.	
355-590	95829-95830	.	
355-591	95830-95831	.	
355-592	95831-95832	.	
355-593	95832-95833	.	
355-594	95833-95834	.	
355-595	95834-95835	.	
355-596	95835-95836	.	
355-597	95836-95837	.	
355-598	95837-95838	.	
355-599	95838-95839	.	
355-600	95839-95840	.	
355-601	95840-95841	.	
355-602	95841-95842	.	
355-603	95842-95843	.	
355-604	95843-95844	.	
355-605	95844-95845	.	
355-606	95845-95846	.	
355-607	95846-95847	.	
355-608	95847-95848	.	
355-609	95848-95849	.	
355-610	95849-95850	.	
355-611	95850-95851	.	
355-612	95851-95852	.	
355-613	95852-95853	.	
355-614	95854-95858	3694	
355-615	95859-95860	|	
355-616	95860-95861	_	
355-617	95861-95862	_	
355-618	95862-95863	_	
355-619	95863-95864	_	
355-620	95864-95865	_	
355-621	95865-95866	_	
355-622	95866-95867	_	
355-623	95867-95868	_	
355-624	95868-95869	_	
355-625	95869-95870	_	
355-626	95870-95871	_	
355-627	95871-95872	_	
355-628	95872-95873	_	
355-629	95873-95874	_	
355-630	95874-95875	_	
355-631	95875-95876	_	
355-632	95876-95877	_	
355-633	95877-95878	_	
355-634	95878-95879	_	
355-635	95879-95880	_	
355-636	95880-95881	_	
355-637	95881-95882	_	
355-638	95882-95883	_	
355-639	95883-95884	_	
355-640	95884-95885	_	
355-641	95885-95886	_	
355-642	95886-95887	_	
355-643	95887-95888	_	
355-644	95888-95889	_	
355-645	95889-95890	_	
355-646	95890-95891	_	
355-647	95891-95892	_	
355-648	95892-95893	_	
355-649	95893-95894	_	
355-650	95894-95895	_	
355-651	95895-95896	_	
355-652	95896-95897	_	
355-653	95897-95898	_	
355-654	95898-95899	_	
355-655	95899-95900	_	
355-656	95900-95901	_	
355-657	95901-95902	_	
355-658	95902-95903	_	
355-659	95903-95904	_	
355-660	95904-95905	_	
355-661	95905-95906	_	
355-662	95906-95907	_	
355-663	95907-95908	_	
355-664	95908-95909	_	
355-665	95909-95910	_	
355-666	95910-95911	_	
355-667	95911-95912	_	
355-668	95912-95913	_	
355-669	95913-95914	_	
355-670	95914-95915	_	
355-671	95915-95916	_	
355-672	95916-95917	_	
355-673	95917-95918	_	
355-674	95918-95919	_	
355-675	95919-95920	_	
355-676	95920-95921	_	
355-677	95921-95922	_	
355-678	95922-95923	_	
355-679	95923-95924	_	
355-680	95924-95925	_	
355-681	95926-95927	|	
355-682	95927-95928	.	
355-683	95928-95929	.	
355-684	95929-95930	.	
355-685	95930-95931	.	
355-686	95931-95932	.	
355-687	95932-95933	.	
355-688	95933-95934	.	
355-689	95934-95935	.	
355-690	95935-95936	.	
355-691	95936-95937	.	
355-692	95937-95938	.	
355-693	95938-95939	.	
355-694	95939-95940	.	
355-695	95940-95941	.	
355-696	95941-95942	.	
355-697	95942-95943	.	
355-698	95943-95944	.	
355-699	95944-95945	.	
355-700	95945-95946	.	
355-701	95946-95947	.	
355-702	95947-95948	.	
355-703	95948-95949	.	
355-704	95949-95950	.	
355-705	95950-95951	.	
355-706	95951-95952	.	
355-707	95952-95953	.	
355-708	95953-95954	.	
355-709	95954-95955	.	
355-710	95955-95956	.	
355-711	95956-95957	.	
355-712	95957-95958	.	
355-713	95958-95959	.	
355-714	95959-95960	.	
355-715	95960-95961	.	
355-716	95961-95962	.	
355-717	95962-95963	.	
355-718	95963-95964	.	
355-719	95964-95965	.	
355-720	95965-95966	.	
355-721	95966-95967	.	
355-722	95967-95968	.	
355-723	95968-95969	.	
355-724	95969-95970	.	
355-725	95970-95971	.	
355-726	95971-95972	.	
355-727	95972-95973	.	
355-728	95973-95974	.	
355-729	95974-95975	.	
355-730	95975-95976	.	
355-731	95976-95977	.	
355-732	95977-95978	.	
355-733	95978-95979	.	
355-734	95979-95980	.	
355-735	95980-95981	.	
355-736	95981-95982	.	
355-737	95982-95983	.	
355-738	95983-95984	.	
355-739	95984-95985	.	
355-740	95985-95986	.	
355-741	95986-95987	.	
355-742	95987-95988	.	
355-743	95988-95989	.	
355-744	95989-95990	.	
355-745	95990-95991	.	
355-746	95991-95992	.	
355-747	95993-95997	2709	
355-748	95998-95999	|	
355-749	95999-96000	.	
355-750	96000-96001	.	
355-751	96001-96002	.	
355-752	96002-96003	.	
355-753	96003-96004	.	
355-754	96004-96005	.	
355-755	96005-96006	.	
355-756	96006-96007	.	
355-757	96007-96008	.	
355-758	96008-96009	.	
355-759	96009-96010	.	
355-760	96010-96011	.	
355-761	96011-96012	.	
355-762	96012-96013	.	
355-763	96013-96014	.	
355-764	96014-96015	.	
355-765	96015-96016	.	
355-766	96016-96017	.	
355-767	96017-96018	.	
355-768	96018-96019	.	
355-769	96019-96020	.	
355-770	96020-96021	.	
355-771	96021-96022	.	
355-772	96022-96023	.	
355-773	96023-96024	.	
355-774	96024-96025	.	
355-775	96025-96026	.	
355-776	96026-96027	.	
355-777	96027-96028	.	
355-778	96028-96029	.	
355-779	96029-96030	.	
355-780	96030-96031	.	
355-781	96031-96032	.	
355-782	96032-96033	.	
355-783	96033-96034	.	
355-784	96034-96035	.	
355-785	96035-96036	.	
355-786	96036-96037	.	
355-787	96037-96038	.	
355-788	96038-96039	.	
355-789	96039-96040	.	
355-790	96040-96041	.	
355-791	96041-96042	.	
355-792	96042-96043	.	
355-793	96043-96044	.	
355-794	96044-96045	.	
355-795	96045-96046	.	
355-796	96046-96047	.	
355-797	96047-96048	.	
355-798	96048-96049	.	
355-799	96049-96050	.	
355-800	96050-96051	.	
355-801	96051-96052	.	
355-802	96052-96053	.	
355-803	96053-96054	.	
355-804	96054-96055	.	
355-805	96055-96056	.	
355-806	96056-96057	.	
355-807	96057-96058	.	
355-808	96058-96059	.	
355-809	96059-96060	.	
355-810	96060-96061	.	
355-811	96061-96062	.	
355-812	96062-96063	.	
355-813	96063-96064	.	
355-814	96065-96066	|	
355-815	96066-96067	.	
355-816	96067-96068	.	
355-817	96068-96069	.	
355-818	96069-96070	.	
355-819	96070-96071	.	
355-820	96071-96072	.	
355-821	96072-96073	.	
355-822	96073-96074	.	
355-823	96074-96075	.	
355-824	96075-96076	.	
355-825	96076-96077	.	
355-826	96077-96078	.	
355-827	96078-96079	.	
355-828	96079-96080	.	
355-829	96080-96081	.	
355-830	96081-96082	.	
355-831	96082-96083	.	
355-832	96083-96084	.	
355-833	96084-96085	.	
355-834	96085-96086	.	
355-835	96086-96087	.	
355-836	96087-96088	.	
355-837	96088-96089	.	
355-838	96089-96090	.	
355-839	96090-96091	.	
355-840	96091-96092	.	
355-841	96092-96093	.	
355-842	96093-96094	.	
355-843	96094-96095	.	
355-844	96095-96096	.	
355-845	96096-96097	.	
355-846	96097-96098	.	
355-847	96098-96099	.	
355-848	96099-96100	.	
355-849	96100-96101	.	
355-850	96101-96102	.	
355-851	96102-96103	.	
355-852	96103-96104	.	
355-853	96104-96105	.	
355-854	96105-96106	.	
355-855	96106-96107	.	
355-856	96107-96108	.	
355-857	96108-96109	.	
355-858	96109-96110	.	
355-859	96110-96111	.	
355-860	96111-96112	.	
355-861	96112-96113	.	
355-862	96113-96114	.	
355-863	96114-96115	.	
355-864	96115-96116	.	
355-865	96116-96117	.	
355-866	96117-96118	.	
355-867	96118-96119	.	
355-868	96119-96120	.	
355-869	96120-96121	.	
355-870	96121-96122	.	
355-871	96122-96123	.	
355-872	96123-96124	.	
355-873	96124-96125	.	
355-874	96125-96126	.	
355-875	96126-96127	.	
355-876	96127-96128	.	
355-877	96128-96129	.	
355-878	96129-96130	.	
355-879	96130-96131	.	
355-880	96132-96136	2216	
355-881	96137-96138	|	
355-882	96138-96139	.	
355-883	96139-96140	.	
355-884	96140-96141	.	
355-885	96141-96142	.	
355-886	96142-96143	.	
355-887	96143-96144	.	
355-888	96144-96145	.	
355-889	96145-96146	.	
355-890	96146-96147	.	
355-891	96147-96148	.	
355-892	96148-96149	.	
355-893	96149-96150	.	
355-894	96150-96151	.	
355-895	96151-96152	.	
355-896	96152-96153	.	
355-897	96153-96154	.	
355-898	96154-96155	.	
355-899	96155-96156	.	
355-900	96156-96157	.	
355-901	96157-96158	.	
355-902	96158-96159	.	
355-903	96159-96160	.	
355-904	96160-96161	.	
355-905	96161-96162	.	
355-906	96162-96163	.	
355-907	96163-96164	.	
355-908	96164-96165	.	
355-909	96165-96166	.	
355-910	96166-96167	.	
355-911	96167-96168	.	
355-912	96168-96169	.	
355-913	96169-96170	.	
355-914	96170-96171	.	
355-915	96171-96172	.	
355-916	96172-96173	.	
355-917	96173-96174	.	
355-918	96174-96175	.	
355-919	96175-96176	.	
355-920	96176-96177	.	
355-921	96177-96178	.	
355-922	96178-96179	.	
355-923	96179-96180	.	
355-924	96180-96181	.	
355-925	96181-96182	.	
355-926	96182-96183	.	
355-927	96183-96184	.	
355-928	96184-96185	.	
355-929	96185-96186	.	
355-930	96186-96187	.	
355-931	96187-96188	.	
355-932	96188-96189	.	
355-933	96189-96190	.	
355-934	96190-96191	.	
355-935	96191-96192	.	
355-936	96192-96193	.	
355-937	96193-96194	.	
355-938	96194-96195	.	
355-939	96195-96196	.	
355-940	96196-96197	.	
355-941	96197-96198	.	
355-942	96198-96199	.	
355-943	96199-96200	.	
355-944	96200-96201	.	
355-945	96201-96202	.	
355-946	96202-96203	.	
355-947	96204-96205	|	
355-948	96205-96206	.	
355-949	96206-96207	.	
355-950	96207-96208	.	
355-951	96208-96209	.	
355-952	96209-96210	.	
355-953	96210-96211	.	
355-954	96211-96212	.	
355-955	96212-96213	.	
355-956	96213-96214	.	
355-957	96214-96215	.	
355-958	96215-96216	.	
355-959	96216-96217	.	
355-960	96217-96218	.	
355-961	96218-96219	.	
355-962	96219-96220	.	
355-963	96220-96221	.	
355-964	96221-96222	.	
355-965	96222-96223	.	
355-966	96223-96224	.	
355-967	96224-96225	.	
355-968	96225-96226	.	
355-969	96226-96227	.	
355-970	96227-96228	.	
355-971	96228-96229	.	
355-972	96229-96230	.	
355-973	96230-96231	.	
355-974	96231-96232	.	
355-975	96232-96233	.	
355-976	96233-96234	.	
355-977	96234-96235	.	
355-978	96235-96236	.	
355-979	96236-96237	.	
355-980	96237-96238	.	
355-981	96238-96239	.	
355-982	96239-96240	.	
355-983	96240-96241	.	
355-984	96241-96242	.	
355-985	96242-96243	.	
355-986	96243-96244	.	
355-987	96244-96245	.	
355-988	96245-96246	.	
355-989	96246-96247	.	
355-990	96247-96248	.	
355-991	96248-96249	.	
355-992	96249-96250	.	
355-993	96250-96251	.	
355-994	96251-96252	.	
355-995	96252-96253	.	
355-996	96253-96254	.	
355-997	96254-96255	.	
355-998	96255-96256	.	
355-999	96256-96257	.	
355-1000	96257-96258	.	
355-1001	96258-96259	.	
355-1002	96259-96260	.	
355-1003	96260-96261	.	
355-1004	96261-96262	.	
355-1005	96262-96263	.	
355-1006	96263-96264	.	
355-1007	96264-96265	.	
355-1008	96265-96266	.	
355-1009	96266-96267	.	
355-1010	96267-96268	.	
355-1011	96268-96269	.	
355-1012	96269-96270	.	
355-1013	96271-96275	1231	
355-1014	96276-96277	|	
355-1015	96277-96278	_	
355-1016	96278-96279	_	
355-1017	96279-96280	_	
355-1018	96280-96281	_	
355-1019	96281-96282	_	
355-1020	96282-96283	_	
355-1021	96283-96284	_	
355-1022	96284-96285	_	
355-1023	96285-96286	_	
355-1024	96286-96287	_	
355-1025	96287-96288	_	
355-1026	96288-96289	_	
355-1027	96289-96290	_	
355-1028	96290-96291	_	
355-1029	96291-96292	_	
355-1030	96292-96293	_	
355-1031	96293-96294	_	
355-1032	96294-96295	_	
355-1033	96295-96296	_	
355-1034	96296-96297	_	
355-1035	96297-96298	_	
355-1036	96298-96299	_	
355-1037	96299-96300	_	
355-1038	96300-96301	_	
355-1039	96301-96302	_	
355-1040	96302-96303	_	
355-1041	96303-96304	_	
355-1042	96304-96305	_	
355-1043	96305-96306	_	
355-1044	96306-96307	_	
355-1045	96307-96308	_	
355-1046	96308-96309	_	
355-1047	96309-96310	_	
355-1048	96310-96311	_	
355-1049	96311-96312	_	
355-1050	96312-96313	_	
355-1051	96313-96314	_	
355-1052	96314-96315	_	
355-1053	96315-96316	_	
355-1054	96316-96317	_	
355-1055	96317-96318	_	
355-1056	96318-96319	_	
355-1057	96319-96320	_	
355-1058	96320-96321	_	
355-1059	96321-96322	_	
355-1060	96322-96323	_	
355-1061	96323-96324	_	
355-1062	96324-96325	_	
355-1063	96325-96326	_	
355-1064	96326-96327	_	
355-1065	96327-96328	_	
355-1066	96328-96329	_	
355-1067	96329-96330	_	
355-1068	96330-96331	_	
355-1069	96331-96332	_	
355-1070	96332-96333	_	
355-1071	96333-96334	_	
355-1072	96334-96335	_	
355-1073	96335-96336	_	
355-1074	96336-96337	_	
355-1075	96337-96338	_	
355-1076	96338-96339	_	
355-1077	96339-96340	_	
355-1078	96340-96341	_	
355-1079	96341-96342	_	
355-1080	96343-96344	|	
355-1081	96344-96345	|	
355-1082	96345-96346	|	
355-1083	96346-96347	.	
355-1084	96347-96348	.	
355-1085	96348-96349	.	
355-1086	96349-96350	.	
355-1087	96350-96351	.	
355-1088	96351-96352	.	
355-1089	96352-96353	.	
355-1090	96353-96354	.	
355-1091	96354-96355	.	
355-1092	96355-96356	.	
355-1093	96356-96357	.	
355-1094	96357-96358	.	
355-1095	96358-96359	.	
355-1096	96359-96360	.	
355-1097	96360-96361	.	
355-1098	96361-96362	.	
355-1099	96362-96363	.	
355-1100	96363-96364	.	
355-1101	96364-96365	.	
355-1102	96365-96366	.	
355-1103	96366-96367	.	
355-1104	96367-96368	.	
355-1105	96368-96369	.	
355-1106	96369-96370	.	
355-1107	96370-96371	.	
355-1108	96371-96372	.	
355-1109	96372-96373	.	
355-1110	96373-96374	.	
355-1111	96374-96375	.	
355-1112	96375-96376	.	
355-1113	96376-96377	.	
355-1114	96377-96378	.	
355-1115	96378-96379	.	
355-1116	96379-96380	.	
355-1117	96380-96381	.	
355-1118	96381-96382	.	
355-1119	96382-96383	.	
355-1120	96383-96384	.	
355-1121	96384-96385	.	
355-1122	96385-96386	.	
355-1123	96386-96387	.	
355-1124	96387-96388	.	
355-1125	96388-96389	.	
355-1126	96389-96390	.	
355-1127	96390-96391	.	
355-1128	96391-96392	.	
355-1129	96392-96393	.	
355-1130	96393-96394	.	
355-1131	96394-96395	.	
355-1132	96395-96396	.	
355-1133	96396-96397	.	
355-1134	96397-96398	.	
355-1135	96398-96399	.	
355-1136	96399-96400	.	
355-1137	96400-96401	.	
355-1138	96401-96402	.	
355-1139	96402-96403	.	
355-1140	96403-96404	.	
355-1141	96404-96405	.	
355-1142	96405-96406	.	
355-1143	96406-96407	.	
355-1144	96407-96408	.	
355-1145	96408-96409	.	
355-1146	96410-96413	246	
355-1147	96414-96415	|	
355-1148	96415-96416	|	
355-1149	96416-96417	|	
355-1150	96417-96418	|	
355-1151	96418-96419	.	
355-1152	96419-96420	.	
355-1153	96420-96421	.	
355-1154	96421-96422	.	
355-1155	96422-96423	.	
355-1156	96423-96424	.	
355-1157	96424-96425	.	
355-1158	96425-96426	.	
355-1159	96426-96427	.	
355-1160	96427-96428	.	
355-1161	96428-96429	.	
355-1162	96429-96430	.	
355-1163	96430-96431	.	
355-1164	96431-96432	.	
355-1165	96432-96433	.	
355-1166	96433-96434	.	
355-1167	96434-96435	.	
355-1168	96435-96436	.	
355-1169	96436-96437	.	
355-1170	96437-96438	.	
355-1171	96438-96439	.	
355-1172	96439-96440	.	
355-1173	96440-96441	.	
355-1174	96441-96442	.	
355-1175	96442-96443	.	
355-1176	96443-96444	.	
355-1177	96444-96445	.	
355-1178	96445-96446	.	
355-1179	96446-96447	.	
355-1180	96447-96448	.	
355-1181	96448-96449	.	
355-1182	96449-96450	.	
355-1183	96450-96451	.	
355-1184	96451-96452	.	
355-1185	96452-96453	.	
355-1186	96453-96454	.	
355-1187	96454-96455	.	
355-1188	96455-96456	.	
355-1189	96456-96457	.	
355-1190	96457-96458	.	
355-1191	96458-96459	.	
355-1192	96459-96460	.	
355-1193	96460-96461	.	
355-1194	96461-96462	.	
355-1195	96462-96463	.	
355-1196	96463-96464	.	
355-1197	96464-96465	.	
355-1198	96465-96466	.	
355-1199	96466-96467	.	
355-1200	96467-96468	.	
355-1201	96468-96469	.	
355-1202	96469-96470	.	
355-1203	96470-96471	.	
355-1204	96471-96472	.	
355-1205	96472-96473	.	
355-1206	96473-96474	.	
355-1207	96474-96475	.	
355-1208	96475-96476	.	
355-1209	96476-96477	.	
355-1210	96477-96478	.	
355-1211	96478-96479	.	
355-1212	96479-96480	.	
355-1213	96481-96482	|	
355-1214	96482-96483	|	
355-1215	96483-96484	|	
355-1216	96484-96485	|	
355-1217	96485-96486	|	
355-1218	96486-96487	|	
355-1219	96487-96488	|	
355-1220	96488-96489	|	
355-1221	96489-96490	|	
355-1222	96490-96491	|	
355-1223	96491-96492	|	
355-1224	96492-96493	|	
355-1225	96493-96494	|	
355-1226	96494-96495	|	
355-1227	96495-96496	|	
355-1228	96496-96497	|	
355-1229	96497-96498	|	
355-1230	96498-96499	|	
355-1231	96499-96500	|	
355-1232	96500-96501	|	
355-1233	96501-96502	|	
355-1234	96502-96503	|	
355-1235	96503-96504	|	
355-1236	96504-96505	|	
355-1237	96505-96506	|	
355-1238	96506-96507	|	
355-1239	96507-96508	|	
355-1240	96508-96509	|	
355-1241	96509-96510	|	
355-1242	96510-96511	_	
355-1243	96511-96512	|	
355-1244	96512-96513	|	
355-1245	96513-96514	|	
355-1246	96514-96515	_	
355-1247	96515-96516	|	
355-1248	96516-96517	_	
355-1249	96517-96518	|	
355-1250	96518-96519	|	
355-1251	96519-96520	_	
355-1252	96520-96521	|	
355-1253	96521-96522	_	
355-1254	96522-96523	|	
355-1255	96523-96524	_	
355-1256	96524-96525	|	
355-1257	96525-96526	_	
355-1258	96526-96527	|	
355-1259	96527-96528	_	
355-1260	96528-96529	|	
355-1261	96529-96530	_	
355-1262	96530-96531	_	
355-1263	96531-96532	|	
355-1264	96532-96533	_	
355-1265	96533-96534	_	
355-1266	96534-96535	_	
355-1267	96535-96536	_	
355-1268	96536-96537	_	
355-1269	96537-96538	_	
355-1270	96538-96539	_	
355-1271	96539-96540	_	
355-1272	96540-96541	_	
355-1273	96541-96542	_	
355-1274	96542-96543	_	
355-1275	96543-96544	_	
355-1276	96544-96545	_	
355-1277	96545-96546	_	
355-1278	96546-96547	_	
355-1279	96548-96552	Time	
355-1280	96552-96553	:	
355-1281	96554-96555	|	
355-1282	96555-96556	^	
355-1283	96556-96557	^	
355-1284	96557-96558	^	
355-1285	96558-96559	^	
355-1286	96559-96560	|	
355-1287	96560-96561	^	
355-1288	96561-96562	^	
355-1289	96562-96563	^	
355-1290	96563-96564	^	
355-1291	96564-96565	|	
355-1292	96565-96566	^	
355-1293	96566-96567	^	
355-1294	96567-96568	^	
355-1295	96568-96569	^	
355-1296	96569-96570	|	
355-1297	96570-96571	^	
355-1298	96571-96572	^	
355-1299	96572-96573	^	
355-1300	96573-96574	^	
355-1301	96574-96575	|	
355-1302	96575-96576	^	
355-1303	96576-96577	^	
355-1304	96577-96578	^	
355-1305	96578-96579	^	
355-1306	96579-96580	|	
355-1307	96580-96581	^	
355-1308	96581-96582	^	
355-1309	96582-96583	^	
355-1310	96583-96584	^	
355-1311	96584-96585	|	
355-1312	96585-96586	^	
355-1313	96586-96587	^	
355-1314	96587-96588	^	
355-1315	96588-96589	^	
355-1316	96589-96590	|	
355-1317	96590-96591	^	
355-1318	96591-96592	^	
355-1319	96592-96593	^	
355-1320	96593-96594	^	
355-1321	96594-96595	|	
355-1322	96595-96596	^	
355-1323	96596-96597	^	
355-1324	96597-96598	^	
355-1325	96598-96599	^	
355-1326	96599-96600	|	
355-1327	96600-96601	^	
355-1328	96601-96602	^	
355-1329	96602-96603	^	
355-1330	96603-96604	^	
355-1331	96604-96605	|	
355-1332	96605-96606	^	
355-1333	96606-96607	^	
355-1334	96607-96608	^	
355-1335	96608-96609	^	
355-1336	96609-96610	|	
355-1337	96610-96611	^	
355-1338	96611-96612	^	
355-1339	96612-96613	^	
355-1340	96613-96614	^	
355-1341	96614-96615	|	
355-1342	96615-96616	^	
355-1343	96616-96617	^	
355-1344	96617-96618	^	
355-1345	96618-96619	^	
355-1346	96619-96620	|	
355-1347	96621-96624	0.5	
355-1348	96625-96628	1.0	
355-1349	96629-96632	1.5	
355-1350	96633-96636	2.0	
355-1351	96637-96640	2.5	
355-1352	96641-96644	3.0	
355-1353	96645-96648	3.5	
355-1354	96649-96652	4.0	
355-1355	96653-96656	4.5	
355-1356	96657-96660	4.6	
355-1357	96661-96664	5.0	
355-1358	96665-96668	5.5	
355-1359	96669-96672	6.0	
355-1360	96673-96678	AFTER	
355-1361	96678-96679	:	
355-1362	96680-96687	FreeBSD	
355-1363	96688-96690	10	
355-1364	96691-96703	optimization	
355-1365	96703-96704	.	

#Text=The following graph shows the results
#Text=after applying the optimizations found at the beginning of this page.
356-1	96705-96708	The	
356-2	96709-96718	following	
356-3	96719-96724	graph	
356-4	96725-96730	shows	
356-5	96731-96734	the	
356-6	96735-96742	results	
356-7	96743-96748	after	
356-8	96749-96757	applying	
356-9	96758-96761	the	
356-10	96762-96775	optimizations	
356-11	96776-96781	found	
356-12	96782-96784	at	
356-13	96785-96788	the	
356-14	96789-96798	beginning	
356-15	96799-96801	of	
356-16	96802-96806	this	
356-17	96807-96811	page	
356-18	96811-96812	.	

#Text=Compared
#Text=to the previous graph, we see our FreeBSD based Nginx server is able to serve
#Text=96.6% of the objects in less then 100ms. (9669/10000*100=96.69) compared to
#Text=just 71.42% before.
357-1	96813-96821	Compared	
357-2	96822-96824	to	
357-3	96825-96828	the	
357-4	96829-96837	previous	
357-5	96838-96843	graph	
357-6	96843-96844	,	
357-7	96845-96847	we	
357-8	96848-96851	see	
357-9	96852-96855	our	
357-10	96856-96863	FreeBSD	
357-11	96864-96869	based	
357-12	96870-96875	Nginx	
357-13	96876-96882	server	
357-14	96883-96885	is	
357-15	96886-96890	able	
357-16	96891-96893	to	
357-17	96894-96899	serve	
357-18	96900-96905	96.6%	
357-19	96906-96908	of	
357-20	96909-96912	the	
357-21	96913-96920	objects	
357-22	96921-96923	in	
357-23	96924-96928	less	
357-24	96929-96933	then	
357-25	96934-96939	100ms	
357-26	96939-96940	.	
357-27	96941-96942	(	
357-28	96942-96946	9669	
357-29	96946-96947	/	
357-30	96947-96952	10000	
357-31	96952-96953	*	
357-32	96953-96956	100	
357-33	96956-96957	=	
357-34	96957-96962	96.69	
357-35	96962-96963	)	
357-36	96964-96972	compared	
357-37	96973-96975	to	
357-38	96976-96980	just	
357-39	96981-96987	71.42%	
357-40	96988-96994	before	
357-41	96994-96995	.	

#Text=FreeBSD and Nginx are fast and we just made them 35%
#Text=faster.
#Text=calomel@freebsd10:
#Text=/storage/tools/web_server_distribution_performance.pl
#Text=.:.
358-1	96996-97003	FreeBSD	
358-2	97004-97007	and	
358-3	97008-97013	Nginx	
358-4	97014-97017	are	
358-5	97018-97022	fast	
358-6	97023-97026	and	
358-7	97027-97029	we	
358-8	97030-97034	just	
358-9	97035-97039	made	
358-10	97040-97044	them	
358-11	97045-97048	35%	
358-12	97049-97055	faster	
358-13	97055-97056	.	
358-14	97057-97064	calomel	
358-15	97064-97065	@	
358-16	97065-97074	freebsd10	
358-17	97074-97075	:	
358-18	97076-97077	/	
358-19	97077-97084	storage	
358-20	97084-97085	/	
358-21	97085-97090	tools	
358-22	97090-97091	/	
358-23	97091-97129	web_server_distribution_performance.pl	
358-24	97130-97131	.	
358-25	97131-97132	:	
358-26	97132-97133	.	

#Text=Calomel Webserver Distribution Statistics
#Text=Log lines: 10000, Search string(s):
#Text=__________________________________________________________________
#Text=9669 |.................................................................
#Text=|.................................................................
#Text=8181 |.................................................................
#Text=|.................................................................
#Text=7685 |.................................................................
#Text=|.................................................................
#Text=6198 |_________________________________________________________________
#Text=|.................................................................
#Text=5702 |.................................................................
#Text=|.................................................................
#Text=4214 |.................................................................
#Text=|.................................................................
#Text=3718 |_________________________________________________________________
#Text=|.................................................................
#Text=2231 |.................................................................
#Text=|.................................................................
#Text=1239 |_________________________________________________________________
#Text=|.................................................................
#Text=247 |.................................................................
#Text=|||_|____|________________________________________________________
#Text=Time: |^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|
#Text=0.5
#Text=1.0
#Text=1.5
#Text=2.0
#Text=2.5
#Text=3.0
#Text=3.5
#Text=4.0
#Text=4.5
#Text=4.6
#Text=5.0
#Text=5.5
#Text=6.0
#Text=OpenBSD 5.x rough comparison: Here is the Web Server Distribution
#Text=Performance Perl script run on our log when we were using OpenBSD.
359-1	97134-97141	Calomel	
359-2	97142-97151	Webserver	
359-3	97152-97164	Distribution	
359-4	97165-97175	Statistics	
359-5	97176-97179	Log	
359-6	97180-97185	lines	
359-7	97185-97186	:	
359-8	97187-97192	10000	
359-9	97192-97193	,	
359-10	97194-97200	Search	
359-11	97201-97207	string	
359-12	97207-97208	(	
359-13	97208-97209	s	
359-14	97209-97210	)	
359-15	97210-97211	:	
359-16	97212-97213	_	
359-17	97213-97214	_	
359-18	97214-97215	_	
359-19	97215-97216	_	
359-20	97216-97217	_	
359-21	97217-97218	_	
359-22	97218-97219	_	
359-23	97219-97220	_	
359-24	97220-97221	_	
359-25	97221-97222	_	
359-26	97222-97223	_	
359-27	97223-97224	_	
359-28	97224-97225	_	
359-29	97225-97226	_	
359-30	97226-97227	_	
359-31	97227-97228	_	
359-32	97228-97229	_	
359-33	97229-97230	_	
359-34	97230-97231	_	
359-35	97231-97232	_	
359-36	97232-97233	_	
359-37	97233-97234	_	
359-38	97234-97235	_	
359-39	97235-97236	_	
359-40	97236-97237	_	
359-41	97237-97238	_	
359-42	97238-97239	_	
359-43	97239-97240	_	
359-44	97240-97241	_	
359-45	97241-97242	_	
359-46	97242-97243	_	
359-47	97243-97244	_	
359-48	97244-97245	_	
359-49	97245-97246	_	
359-50	97246-97247	_	
359-51	97247-97248	_	
359-52	97248-97249	_	
359-53	97249-97250	_	
359-54	97250-97251	_	
359-55	97251-97252	_	
359-56	97252-97253	_	
359-57	97253-97254	_	
359-58	97254-97255	_	
359-59	97255-97256	_	
359-60	97256-97257	_	
359-61	97257-97258	_	
359-62	97258-97259	_	
359-63	97259-97260	_	
359-64	97260-97261	_	
359-65	97261-97262	_	
359-66	97262-97263	_	
359-67	97263-97264	_	
359-68	97264-97265	_	
359-69	97265-97266	_	
359-70	97266-97267	_	
359-71	97267-97268	_	
359-72	97268-97269	_	
359-73	97269-97270	_	
359-74	97270-97271	_	
359-75	97271-97272	_	
359-76	97272-97273	_	
359-77	97273-97274	_	
359-78	97274-97275	_	
359-79	97275-97276	_	
359-80	97276-97277	_	
359-81	97277-97278	_	
359-82	97279-97283	9669	
359-83	97284-97285	|	
359-84	97285-97286	.	
359-85	97286-97287	.	
359-86	97287-97288	.	
359-87	97288-97289	.	
359-88	97289-97290	.	
359-89	97290-97291	.	
359-90	97291-97292	.	
359-91	97292-97293	.	
359-92	97293-97294	.	
359-93	97294-97295	.	
359-94	97295-97296	.	
359-95	97296-97297	.	
359-96	97297-97298	.	
359-97	97298-97299	.	
359-98	97299-97300	.	
359-99	97300-97301	.	
359-100	97301-97302	.	
359-101	97302-97303	.	
359-102	97303-97304	.	
359-103	97304-97305	.	
359-104	97305-97306	.	
359-105	97306-97307	.	
359-106	97307-97308	.	
359-107	97308-97309	.	
359-108	97309-97310	.	
359-109	97310-97311	.	
359-110	97311-97312	.	
359-111	97312-97313	.	
359-112	97313-97314	.	
359-113	97314-97315	.	
359-114	97315-97316	.	
359-115	97316-97317	.	
359-116	97317-97318	.	
359-117	97318-97319	.	
359-118	97319-97320	.	
359-119	97320-97321	.	
359-120	97321-97322	.	
359-121	97322-97323	.	
359-122	97323-97324	.	
359-123	97324-97325	.	
359-124	97325-97326	.	
359-125	97326-97327	.	
359-126	97327-97328	.	
359-127	97328-97329	.	
359-128	97329-97330	.	
359-129	97330-97331	.	
359-130	97331-97332	.	
359-131	97332-97333	.	
359-132	97333-97334	.	
359-133	97334-97335	.	
359-134	97335-97336	.	
359-135	97336-97337	.	
359-136	97337-97338	.	
359-137	97338-97339	.	
359-138	97339-97340	.	
359-139	97340-97341	.	
359-140	97341-97342	.	
359-141	97342-97343	.	
359-142	97343-97344	.	
359-143	97344-97345	.	
359-144	97345-97346	.	
359-145	97346-97347	.	
359-146	97347-97348	.	
359-147	97348-97349	.	
359-148	97349-97350	.	
359-149	97351-97352	|	
359-150	97352-97353	.	
359-151	97353-97354	.	
359-152	97354-97355	.	
359-153	97355-97356	.	
359-154	97356-97357	.	
359-155	97357-97358	.	
359-156	97358-97359	.	
359-157	97359-97360	.	
359-158	97360-97361	.	
359-159	97361-97362	.	
359-160	97362-97363	.	
359-161	97363-97364	.	
359-162	97364-97365	.	
359-163	97365-97366	.	
359-164	97366-97367	.	
359-165	97367-97368	.	
359-166	97368-97369	.	
359-167	97369-97370	.	
359-168	97370-97371	.	
359-169	97371-97372	.	
359-170	97372-97373	.	
359-171	97373-97374	.	
359-172	97374-97375	.	
359-173	97375-97376	.	
359-174	97376-97377	.	
359-175	97377-97378	.	
359-176	97378-97379	.	
359-177	97379-97380	.	
359-178	97380-97381	.	
359-179	97381-97382	.	
359-180	97382-97383	.	
359-181	97383-97384	.	
359-182	97384-97385	.	
359-183	97385-97386	.	
359-184	97386-97387	.	
359-185	97387-97388	.	
359-186	97388-97389	.	
359-187	97389-97390	.	
359-188	97390-97391	.	
359-189	97391-97392	.	
359-190	97392-97393	.	
359-191	97393-97394	.	
359-192	97394-97395	.	
359-193	97395-97396	.	
359-194	97396-97397	.	
359-195	97397-97398	.	
359-196	97398-97399	.	
359-197	97399-97400	.	
359-198	97400-97401	.	
359-199	97401-97402	.	
359-200	97402-97403	.	
359-201	97403-97404	.	
359-202	97404-97405	.	
359-203	97405-97406	.	
359-204	97406-97407	.	
359-205	97407-97408	.	
359-206	97408-97409	.	
359-207	97409-97410	.	
359-208	97410-97411	.	
359-209	97411-97412	.	
359-210	97412-97413	.	
359-211	97413-97414	.	
359-212	97414-97415	.	
359-213	97415-97416	.	
359-214	97416-97417	.	
359-215	97418-97422	8181	
359-216	97423-97424	|	
359-217	97424-97425	.	
359-218	97425-97426	.	
359-219	97426-97427	.	
359-220	97427-97428	.	
359-221	97428-97429	.	
359-222	97429-97430	.	
359-223	97430-97431	.	
359-224	97431-97432	.	
359-225	97432-97433	.	
359-226	97433-97434	.	
359-227	97434-97435	.	
359-228	97435-97436	.	
359-229	97436-97437	.	
359-230	97437-97438	.	
359-231	97438-97439	.	
359-232	97439-97440	.	
359-233	97440-97441	.	
359-234	97441-97442	.	
359-235	97442-97443	.	
359-236	97443-97444	.	
359-237	97444-97445	.	
359-238	97445-97446	.	
359-239	97446-97447	.	
359-240	97447-97448	.	
359-241	97448-97449	.	
359-242	97449-97450	.	
359-243	97450-97451	.	
359-244	97451-97452	.	
359-245	97452-97453	.	
359-246	97453-97454	.	
359-247	97454-97455	.	
359-248	97455-97456	.	
359-249	97456-97457	.	
359-250	97457-97458	.	
359-251	97458-97459	.	
359-252	97459-97460	.	
359-253	97460-97461	.	
359-254	97461-97462	.	
359-255	97462-97463	.	
359-256	97463-97464	.	
359-257	97464-97465	.	
359-258	97465-97466	.	
359-259	97466-97467	.	
359-260	97467-97468	.	
359-261	97468-97469	.	
359-262	97469-97470	.	
359-263	97470-97471	.	
359-264	97471-97472	.	
359-265	97472-97473	.	
359-266	97473-97474	.	
359-267	97474-97475	.	
359-268	97475-97476	.	
359-269	97476-97477	.	
359-270	97477-97478	.	
359-271	97478-97479	.	
359-272	97479-97480	.	
359-273	97480-97481	.	
359-274	97481-97482	.	
359-275	97482-97483	.	
359-276	97483-97484	.	
359-277	97484-97485	.	
359-278	97485-97486	.	
359-279	97486-97487	.	
359-280	97487-97488	.	
359-281	97488-97489	.	
359-282	97490-97491	|	
359-283	97491-97492	.	
359-284	97492-97493	.	
359-285	97493-97494	.	
359-286	97494-97495	.	
359-287	97495-97496	.	
359-288	97496-97497	.	
359-289	97497-97498	.	
359-290	97498-97499	.	
359-291	97499-97500	.	
359-292	97500-97501	.	
359-293	97501-97502	.	
359-294	97502-97503	.	
359-295	97503-97504	.	
359-296	97504-97505	.	
359-297	97505-97506	.	
359-298	97506-97507	.	
359-299	97507-97508	.	
359-300	97508-97509	.	
359-301	97509-97510	.	
359-302	97510-97511	.	
359-303	97511-97512	.	
359-304	97512-97513	.	
359-305	97513-97514	.	
359-306	97514-97515	.	
359-307	97515-97516	.	
359-308	97516-97517	.	
359-309	97517-97518	.	
359-310	97518-97519	.	
359-311	97519-97520	.	
359-312	97520-97521	.	
359-313	97521-97522	.	
359-314	97522-97523	.	
359-315	97523-97524	.	
359-316	97524-97525	.	
359-317	97525-97526	.	
359-318	97526-97527	.	
359-319	97527-97528	.	
359-320	97528-97529	.	
359-321	97529-97530	.	
359-322	97530-97531	.	
359-323	97531-97532	.	
359-324	97532-97533	.	
359-325	97533-97534	.	
359-326	97534-97535	.	
359-327	97535-97536	.	
359-328	97536-97537	.	
359-329	97537-97538	.	
359-330	97538-97539	.	
359-331	97539-97540	.	
359-332	97540-97541	.	
359-333	97541-97542	.	
359-334	97542-97543	.	
359-335	97543-97544	.	
359-336	97544-97545	.	
359-337	97545-97546	.	
359-338	97546-97547	.	
359-339	97547-97548	.	
359-340	97548-97549	.	
359-341	97549-97550	.	
359-342	97550-97551	.	
359-343	97551-97552	.	
359-344	97552-97553	.	
359-345	97553-97554	.	
359-346	97554-97555	.	
359-347	97555-97556	.	
359-348	97557-97561	7685	
359-349	97562-97563	|	
359-350	97563-97564	.	
359-351	97564-97565	.	
359-352	97565-97566	.	
359-353	97566-97567	.	
359-354	97567-97568	.	
359-355	97568-97569	.	
359-356	97569-97570	.	
359-357	97570-97571	.	
359-358	97571-97572	.	
359-359	97572-97573	.	
359-360	97573-97574	.	
359-361	97574-97575	.	
359-362	97575-97576	.	
359-363	97576-97577	.	
359-364	97577-97578	.	
359-365	97578-97579	.	
359-366	97579-97580	.	
359-367	97580-97581	.	
359-368	97581-97582	.	
359-369	97582-97583	.	
359-370	97583-97584	.	
359-371	97584-97585	.	
359-372	97585-97586	.	
359-373	97586-97587	.	
359-374	97587-97588	.	
359-375	97588-97589	.	
359-376	97589-97590	.	
359-377	97590-97591	.	
359-378	97591-97592	.	
359-379	97592-97593	.	
359-380	97593-97594	.	
359-381	97594-97595	.	
359-382	97595-97596	.	
359-383	97596-97597	.	
359-384	97597-97598	.	
359-385	97598-97599	.	
359-386	97599-97600	.	
359-387	97600-97601	.	
359-388	97601-97602	.	
359-389	97602-97603	.	
359-390	97603-97604	.	
359-391	97604-97605	.	
359-392	97605-97606	.	
359-393	97606-97607	.	
359-394	97607-97608	.	
359-395	97608-97609	.	
359-396	97609-97610	.	
359-397	97610-97611	.	
359-398	97611-97612	.	
359-399	97612-97613	.	
359-400	97613-97614	.	
359-401	97614-97615	.	
359-402	97615-97616	.	
359-403	97616-97617	.	
359-404	97617-97618	.	
359-405	97618-97619	.	
359-406	97619-97620	.	
359-407	97620-97621	.	
359-408	97621-97622	.	
359-409	97622-97623	.	
359-410	97623-97624	.	
359-411	97624-97625	.	
359-412	97625-97626	.	
359-413	97626-97627	.	
359-414	97627-97628	.	
359-415	97629-97630	|	
359-416	97630-97631	.	
359-417	97631-97632	.	
359-418	97632-97633	.	
359-419	97633-97634	.	
359-420	97634-97635	.	
359-421	97635-97636	.	
359-422	97636-97637	.	
359-423	97637-97638	.	
359-424	97638-97639	.	
359-425	97639-97640	.	
359-426	97640-97641	.	
359-427	97641-97642	.	
359-428	97642-97643	.	
359-429	97643-97644	.	
359-430	97644-97645	.	
359-431	97645-97646	.	
359-432	97646-97647	.	
359-433	97647-97648	.	
359-434	97648-97649	.	
359-435	97649-97650	.	
359-436	97650-97651	.	
359-437	97651-97652	.	
359-438	97652-97653	.	
359-439	97653-97654	.	
359-440	97654-97655	.	
359-441	97655-97656	.	
359-442	97656-97657	.	
359-443	97657-97658	.	
359-444	97658-97659	.	
359-445	97659-97660	.	
359-446	97660-97661	.	
359-447	97661-97662	.	
359-448	97662-97663	.	
359-449	97663-97664	.	
359-450	97664-97665	.	
359-451	97665-97666	.	
359-452	97666-97667	.	
359-453	97667-97668	.	
359-454	97668-97669	.	
359-455	97669-97670	.	
359-456	97670-97671	.	
359-457	97671-97672	.	
359-458	97672-97673	.	
359-459	97673-97674	.	
359-460	97674-97675	.	
359-461	97675-97676	.	
359-462	97676-97677	.	
359-463	97677-97678	.	
359-464	97678-97679	.	
359-465	97679-97680	.	
359-466	97680-97681	.	
359-467	97681-97682	.	
359-468	97682-97683	.	
359-469	97683-97684	.	
359-470	97684-97685	.	
359-471	97685-97686	.	
359-472	97686-97687	.	
359-473	97687-97688	.	
359-474	97688-97689	.	
359-475	97689-97690	.	
359-476	97690-97691	.	
359-477	97691-97692	.	
359-478	97692-97693	.	
359-479	97693-97694	.	
359-480	97694-97695	.	
359-481	97696-97700	6198	
359-482	97701-97702	|	
359-483	97702-97703	_	
359-484	97703-97704	_	
359-485	97704-97705	_	
359-486	97705-97706	_	
359-487	97706-97707	_	
359-488	97707-97708	_	
359-489	97708-97709	_	
359-490	97709-97710	_	
359-491	97710-97711	_	
359-492	97711-97712	_	
359-493	97712-97713	_	
359-494	97713-97714	_	
359-495	97714-97715	_	
359-496	97715-97716	_	
359-497	97716-97717	_	
359-498	97717-97718	_	
359-499	97718-97719	_	
359-500	97719-97720	_	
359-501	97720-97721	_	
359-502	97721-97722	_	
359-503	97722-97723	_	
359-504	97723-97724	_	
359-505	97724-97725	_	
359-506	97725-97726	_	
359-507	97726-97727	_	
359-508	97727-97728	_	
359-509	97728-97729	_	
359-510	97729-97730	_	
359-511	97730-97731	_	
359-512	97731-97732	_	
359-513	97732-97733	_	
359-514	97733-97734	_	
359-515	97734-97735	_	
359-516	97735-97736	_	
359-517	97736-97737	_	
359-518	97737-97738	_	
359-519	97738-97739	_	
359-520	97739-97740	_	
359-521	97740-97741	_	
359-522	97741-97742	_	
359-523	97742-97743	_	
359-524	97743-97744	_	
359-525	97744-97745	_	
359-526	97745-97746	_	
359-527	97746-97747	_	
359-528	97747-97748	_	
359-529	97748-97749	_	
359-530	97749-97750	_	
359-531	97750-97751	_	
359-532	97751-97752	_	
359-533	97752-97753	_	
359-534	97753-97754	_	
359-535	97754-97755	_	
359-536	97755-97756	_	
359-537	97756-97757	_	
359-538	97757-97758	_	
359-539	97758-97759	_	
359-540	97759-97760	_	
359-541	97760-97761	_	
359-542	97761-97762	_	
359-543	97762-97763	_	
359-544	97763-97764	_	
359-545	97764-97765	_	
359-546	97765-97766	_	
359-547	97766-97767	_	
359-548	97768-97769	|	
359-549	97769-97770	.	
359-550	97770-97771	.	
359-551	97771-97772	.	
359-552	97772-97773	.	
359-553	97773-97774	.	
359-554	97774-97775	.	
359-555	97775-97776	.	
359-556	97776-97777	.	
359-557	97777-97778	.	
359-558	97778-97779	.	
359-559	97779-97780	.	
359-560	97780-97781	.	
359-561	97781-97782	.	
359-562	97782-97783	.	
359-563	97783-97784	.	
359-564	97784-97785	.	
359-565	97785-97786	.	
359-566	97786-97787	.	
359-567	97787-97788	.	
359-568	97788-97789	.	
359-569	97789-97790	.	
359-570	97790-97791	.	
359-571	97791-97792	.	
359-572	97792-97793	.	
359-573	97793-97794	.	
359-574	97794-97795	.	
359-575	97795-97796	.	
359-576	97796-97797	.	
359-577	97797-97798	.	
359-578	97798-97799	.	
359-579	97799-97800	.	
359-580	97800-97801	.	
359-581	97801-97802	.	
359-582	97802-97803	.	
359-583	97803-97804	.	
359-584	97804-97805	.	
359-585	97805-97806	.	
359-586	97806-97807	.	
359-587	97807-97808	.	
359-588	97808-97809	.	
359-589	97809-97810	.	
359-590	97810-97811	.	
359-591	97811-97812	.	
359-592	97812-97813	.	
359-593	97813-97814	.	
359-594	97814-97815	.	
359-595	97815-97816	.	
359-596	97816-97817	.	
359-597	97817-97818	.	
359-598	97818-97819	.	
359-599	97819-97820	.	
359-600	97820-97821	.	
359-601	97821-97822	.	
359-602	97822-97823	.	
359-603	97823-97824	.	
359-604	97824-97825	.	
359-605	97825-97826	.	
359-606	97826-97827	.	
359-607	97827-97828	.	
359-608	97828-97829	.	
359-609	97829-97830	.	
359-610	97830-97831	.	
359-611	97831-97832	.	
359-612	97832-97833	.	
359-613	97833-97834	.	
359-614	97835-97839	5702	
359-615	97840-97841	|	
359-616	97841-97842	.	
359-617	97842-97843	.	
359-618	97843-97844	.	
359-619	97844-97845	.	
359-620	97845-97846	.	
359-621	97846-97847	.	
359-622	97847-97848	.	
359-623	97848-97849	.	
359-624	97849-97850	.	
359-625	97850-97851	.	
359-626	97851-97852	.	
359-627	97852-97853	.	
359-628	97853-97854	.	
359-629	97854-97855	.	
359-630	97855-97856	.	
359-631	97856-97857	.	
359-632	97857-97858	.	
359-633	97858-97859	.	
359-634	97859-97860	.	
359-635	97860-97861	.	
359-636	97861-97862	.	
359-637	97862-97863	.	
359-638	97863-97864	.	
359-639	97864-97865	.	
359-640	97865-97866	.	
359-641	97866-97867	.	
359-642	97867-97868	.	
359-643	97868-97869	.	
359-644	97869-97870	.	
359-645	97870-97871	.	
359-646	97871-97872	.	
359-647	97872-97873	.	
359-648	97873-97874	.	
359-649	97874-97875	.	
359-650	97875-97876	.	
359-651	97876-97877	.	
359-652	97877-97878	.	
359-653	97878-97879	.	
359-654	97879-97880	.	
359-655	97880-97881	.	
359-656	97881-97882	.	
359-657	97882-97883	.	
359-658	97883-97884	.	
359-659	97884-97885	.	
359-660	97885-97886	.	
359-661	97886-97887	.	
359-662	97887-97888	.	
359-663	97888-97889	.	
359-664	97889-97890	.	
359-665	97890-97891	.	
359-666	97891-97892	.	
359-667	97892-97893	.	
359-668	97893-97894	.	
359-669	97894-97895	.	
359-670	97895-97896	.	
359-671	97896-97897	.	
359-672	97897-97898	.	
359-673	97898-97899	.	
359-674	97899-97900	.	
359-675	97900-97901	.	
359-676	97901-97902	.	
359-677	97902-97903	.	
359-678	97903-97904	.	
359-679	97904-97905	.	
359-680	97905-97906	.	
359-681	97907-97908	|	
359-682	97908-97909	.	
359-683	97909-97910	.	
359-684	97910-97911	.	
359-685	97911-97912	.	
359-686	97912-97913	.	
359-687	97913-97914	.	
359-688	97914-97915	.	
359-689	97915-97916	.	
359-690	97916-97917	.	
359-691	97917-97918	.	
359-692	97918-97919	.	
359-693	97919-97920	.	
359-694	97920-97921	.	
359-695	97921-97922	.	
359-696	97922-97923	.	
359-697	97923-97924	.	
359-698	97924-97925	.	
359-699	97925-97926	.	
359-700	97926-97927	.	
359-701	97927-97928	.	
359-702	97928-97929	.	
359-703	97929-97930	.	
359-704	97930-97931	.	
359-705	97931-97932	.	
359-706	97932-97933	.	
359-707	97933-97934	.	
359-708	97934-97935	.	
359-709	97935-97936	.	
359-710	97936-97937	.	
359-711	97937-97938	.	
359-712	97938-97939	.	
359-713	97939-97940	.	
359-714	97940-97941	.	
359-715	97941-97942	.	
359-716	97942-97943	.	
359-717	97943-97944	.	
359-718	97944-97945	.	
359-719	97945-97946	.	
359-720	97946-97947	.	
359-721	97947-97948	.	
359-722	97948-97949	.	
359-723	97949-97950	.	
359-724	97950-97951	.	
359-725	97951-97952	.	
359-726	97952-97953	.	
359-727	97953-97954	.	
359-728	97954-97955	.	
359-729	97955-97956	.	
359-730	97956-97957	.	
359-731	97957-97958	.	
359-732	97958-97959	.	
359-733	97959-97960	.	
359-734	97960-97961	.	
359-735	97961-97962	.	
359-736	97962-97963	.	
359-737	97963-97964	.	
359-738	97964-97965	.	
359-739	97965-97966	.	
359-740	97966-97967	.	
359-741	97967-97968	.	
359-742	97968-97969	.	
359-743	97969-97970	.	
359-744	97970-97971	.	
359-745	97971-97972	.	
359-746	97972-97973	.	
359-747	97974-97978	4214	
359-748	97979-97980	|	
359-749	97980-97981	.	
359-750	97981-97982	.	
359-751	97982-97983	.	
359-752	97983-97984	.	
359-753	97984-97985	.	
359-754	97985-97986	.	
359-755	97986-97987	.	
359-756	97987-97988	.	
359-757	97988-97989	.	
359-758	97989-97990	.	
359-759	97990-97991	.	
359-760	97991-97992	.	
359-761	97992-97993	.	
359-762	97993-97994	.	
359-763	97994-97995	.	
359-764	97995-97996	.	
359-765	97996-97997	.	
359-766	97997-97998	.	
359-767	97998-97999	.	
359-768	97999-98000	.	
359-769	98000-98001	.	
359-770	98001-98002	.	
359-771	98002-98003	.	
359-772	98003-98004	.	
359-773	98004-98005	.	
359-774	98005-98006	.	
359-775	98006-98007	.	
359-776	98007-98008	.	
359-777	98008-98009	.	
359-778	98009-98010	.	
359-779	98010-98011	.	
359-780	98011-98012	.	
359-781	98012-98013	.	
359-782	98013-98014	.	
359-783	98014-98015	.	
359-784	98015-98016	.	
359-785	98016-98017	.	
359-786	98017-98018	.	
359-787	98018-98019	.	
359-788	98019-98020	.	
359-789	98020-98021	.	
359-790	98021-98022	.	
359-791	98022-98023	.	
359-792	98023-98024	.	
359-793	98024-98025	.	
359-794	98025-98026	.	
359-795	98026-98027	.	
359-796	98027-98028	.	
359-797	98028-98029	.	
359-798	98029-98030	.	
359-799	98030-98031	.	
359-800	98031-98032	.	
359-801	98032-98033	.	
359-802	98033-98034	.	
359-803	98034-98035	.	
359-804	98035-98036	.	
359-805	98036-98037	.	
359-806	98037-98038	.	
359-807	98038-98039	.	
359-808	98039-98040	.	
359-809	98040-98041	.	
359-810	98041-98042	.	
359-811	98042-98043	.	
359-812	98043-98044	.	
359-813	98044-98045	.	
359-814	98046-98047	|	
359-815	98047-98048	.	
359-816	98048-98049	.	
359-817	98049-98050	.	
359-818	98050-98051	.	
359-819	98051-98052	.	
359-820	98052-98053	.	
359-821	98053-98054	.	
359-822	98054-98055	.	
359-823	98055-98056	.	
359-824	98056-98057	.	
359-825	98057-98058	.	
359-826	98058-98059	.	
359-827	98059-98060	.	
359-828	98060-98061	.	
359-829	98061-98062	.	
359-830	98062-98063	.	
359-831	98063-98064	.	
359-832	98064-98065	.	
359-833	98065-98066	.	
359-834	98066-98067	.	
359-835	98067-98068	.	
359-836	98068-98069	.	
359-837	98069-98070	.	
359-838	98070-98071	.	
359-839	98071-98072	.	
359-840	98072-98073	.	
359-841	98073-98074	.	
359-842	98074-98075	.	
359-843	98075-98076	.	
359-844	98076-98077	.	
359-845	98077-98078	.	
359-846	98078-98079	.	
359-847	98079-98080	.	
359-848	98080-98081	.	
359-849	98081-98082	.	
359-850	98082-98083	.	
359-851	98083-98084	.	
359-852	98084-98085	.	
359-853	98085-98086	.	
359-854	98086-98087	.	
359-855	98087-98088	.	
359-856	98088-98089	.	
359-857	98089-98090	.	
359-858	98090-98091	.	
359-859	98091-98092	.	
359-860	98092-98093	.	
359-861	98093-98094	.	
359-862	98094-98095	.	
359-863	98095-98096	.	
359-864	98096-98097	.	
359-865	98097-98098	.	
359-866	98098-98099	.	
359-867	98099-98100	.	
359-868	98100-98101	.	
359-869	98101-98102	.	
359-870	98102-98103	.	
359-871	98103-98104	.	
359-872	98104-98105	.	
359-873	98105-98106	.	
359-874	98106-98107	.	
359-875	98107-98108	.	
359-876	98108-98109	.	
359-877	98109-98110	.	
359-878	98110-98111	.	
359-879	98111-98112	.	
359-880	98113-98117	3718	
359-881	98118-98119	|	
359-882	98119-98120	_	
359-883	98120-98121	_	
359-884	98121-98122	_	
359-885	98122-98123	_	
359-886	98123-98124	_	
359-887	98124-98125	_	
359-888	98125-98126	_	
359-889	98126-98127	_	
359-890	98127-98128	_	
359-891	98128-98129	_	
359-892	98129-98130	_	
359-893	98130-98131	_	
359-894	98131-98132	_	
359-895	98132-98133	_	
359-896	98133-98134	_	
359-897	98134-98135	_	
359-898	98135-98136	_	
359-899	98136-98137	_	
359-900	98137-98138	_	
359-901	98138-98139	_	
359-902	98139-98140	_	
359-903	98140-98141	_	
359-904	98141-98142	_	
359-905	98142-98143	_	
359-906	98143-98144	_	
359-907	98144-98145	_	
359-908	98145-98146	_	
359-909	98146-98147	_	
359-910	98147-98148	_	
359-911	98148-98149	_	
359-912	98149-98150	_	
359-913	98150-98151	_	
359-914	98151-98152	_	
359-915	98152-98153	_	
359-916	98153-98154	_	
359-917	98154-98155	_	
359-918	98155-98156	_	
359-919	98156-98157	_	
359-920	98157-98158	_	
359-921	98158-98159	_	
359-922	98159-98160	_	
359-923	98160-98161	_	
359-924	98161-98162	_	
359-925	98162-98163	_	
359-926	98163-98164	_	
359-927	98164-98165	_	
359-928	98165-98166	_	
359-929	98166-98167	_	
359-930	98167-98168	_	
359-931	98168-98169	_	
359-932	98169-98170	_	
359-933	98170-98171	_	
359-934	98171-98172	_	
359-935	98172-98173	_	
359-936	98173-98174	_	
359-937	98174-98175	_	
359-938	98175-98176	_	
359-939	98176-98177	_	
359-940	98177-98178	_	
359-941	98178-98179	_	
359-942	98179-98180	_	
359-943	98180-98181	_	
359-944	98181-98182	_	
359-945	98182-98183	_	
359-946	98183-98184	_	
359-947	98185-98186	|	
359-948	98186-98187	.	
359-949	98187-98188	.	
359-950	98188-98189	.	
359-951	98189-98190	.	
359-952	98190-98191	.	
359-953	98191-98192	.	
359-954	98192-98193	.	
359-955	98193-98194	.	
359-956	98194-98195	.	
359-957	98195-98196	.	
359-958	98196-98197	.	
359-959	98197-98198	.	
359-960	98198-98199	.	
359-961	98199-98200	.	
359-962	98200-98201	.	
359-963	98201-98202	.	
359-964	98202-98203	.	
359-965	98203-98204	.	
359-966	98204-98205	.	
359-967	98205-98206	.	
359-968	98206-98207	.	
359-969	98207-98208	.	
359-970	98208-98209	.	
359-971	98209-98210	.	
359-972	98210-98211	.	
359-973	98211-98212	.	
359-974	98212-98213	.	
359-975	98213-98214	.	
359-976	98214-98215	.	
359-977	98215-98216	.	
359-978	98216-98217	.	
359-979	98217-98218	.	
359-980	98218-98219	.	
359-981	98219-98220	.	
359-982	98220-98221	.	
359-983	98221-98222	.	
359-984	98222-98223	.	
359-985	98223-98224	.	
359-986	98224-98225	.	
359-987	98225-98226	.	
359-988	98226-98227	.	
359-989	98227-98228	.	
359-990	98228-98229	.	
359-991	98229-98230	.	
359-992	98230-98231	.	
359-993	98231-98232	.	
359-994	98232-98233	.	
359-995	98233-98234	.	
359-996	98234-98235	.	
359-997	98235-98236	.	
359-998	98236-98237	.	
359-999	98237-98238	.	
359-1000	98238-98239	.	
359-1001	98239-98240	.	
359-1002	98240-98241	.	
359-1003	98241-98242	.	
359-1004	98242-98243	.	
359-1005	98243-98244	.	
359-1006	98244-98245	.	
359-1007	98245-98246	.	
359-1008	98246-98247	.	
359-1009	98247-98248	.	
359-1010	98248-98249	.	
359-1011	98249-98250	.	
359-1012	98250-98251	.	
359-1013	98252-98256	2231	
359-1014	98257-98258	|	
359-1015	98258-98259	.	
359-1016	98259-98260	.	
359-1017	98260-98261	.	
359-1018	98261-98262	.	
359-1019	98262-98263	.	
359-1020	98263-98264	.	
359-1021	98264-98265	.	
359-1022	98265-98266	.	
359-1023	98266-98267	.	
359-1024	98267-98268	.	
359-1025	98268-98269	.	
359-1026	98269-98270	.	
359-1027	98270-98271	.	
359-1028	98271-98272	.	
359-1029	98272-98273	.	
359-1030	98273-98274	.	
359-1031	98274-98275	.	
359-1032	98275-98276	.	
359-1033	98276-98277	.	
359-1034	98277-98278	.	
359-1035	98278-98279	.	
359-1036	98279-98280	.	
359-1037	98280-98281	.	
359-1038	98281-98282	.	
359-1039	98282-98283	.	
359-1040	98283-98284	.	
359-1041	98284-98285	.	
359-1042	98285-98286	.	
359-1043	98286-98287	.	
359-1044	98287-98288	.	
359-1045	98288-98289	.	
359-1046	98289-98290	.	
359-1047	98290-98291	.	
359-1048	98291-98292	.	
359-1049	98292-98293	.	
359-1050	98293-98294	.	
359-1051	98294-98295	.	
359-1052	98295-98296	.	
359-1053	98296-98297	.	
359-1054	98297-98298	.	
359-1055	98298-98299	.	
359-1056	98299-98300	.	
359-1057	98300-98301	.	
359-1058	98301-98302	.	
359-1059	98302-98303	.	
359-1060	98303-98304	.	
359-1061	98304-98305	.	
359-1062	98305-98306	.	
359-1063	98306-98307	.	
359-1064	98307-98308	.	
359-1065	98308-98309	.	
359-1066	98309-98310	.	
359-1067	98310-98311	.	
359-1068	98311-98312	.	
359-1069	98312-98313	.	
359-1070	98313-98314	.	
359-1071	98314-98315	.	
359-1072	98315-98316	.	
359-1073	98316-98317	.	
359-1074	98317-98318	.	
359-1075	98318-98319	.	
359-1076	98319-98320	.	
359-1077	98320-98321	.	
359-1078	98321-98322	.	
359-1079	98322-98323	.	
359-1080	98324-98325	|	
359-1081	98325-98326	.	
359-1082	98326-98327	.	
359-1083	98327-98328	.	
359-1084	98328-98329	.	
359-1085	98329-98330	.	
359-1086	98330-98331	.	
359-1087	98331-98332	.	
359-1088	98332-98333	.	
359-1089	98333-98334	.	
359-1090	98334-98335	.	
359-1091	98335-98336	.	
359-1092	98336-98337	.	
359-1093	98337-98338	.	
359-1094	98338-98339	.	
359-1095	98339-98340	.	
359-1096	98340-98341	.	
359-1097	98341-98342	.	
359-1098	98342-98343	.	
359-1099	98343-98344	.	
359-1100	98344-98345	.	
359-1101	98345-98346	.	
359-1102	98346-98347	.	
359-1103	98347-98348	.	
359-1104	98348-98349	.	
359-1105	98349-98350	.	
359-1106	98350-98351	.	
359-1107	98351-98352	.	
359-1108	98352-98353	.	
359-1109	98353-98354	.	
359-1110	98354-98355	.	
359-1111	98355-98356	.	
359-1112	98356-98357	.	
359-1113	98357-98358	.	
359-1114	98358-98359	.	
359-1115	98359-98360	.	
359-1116	98360-98361	.	
359-1117	98361-98362	.	
359-1118	98362-98363	.	
359-1119	98363-98364	.	
359-1120	98364-98365	.	
359-1121	98365-98366	.	
359-1122	98366-98367	.	
359-1123	98367-98368	.	
359-1124	98368-98369	.	
359-1125	98369-98370	.	
359-1126	98370-98371	.	
359-1127	98371-98372	.	
359-1128	98372-98373	.	
359-1129	98373-98374	.	
359-1130	98374-98375	.	
359-1131	98375-98376	.	
359-1132	98376-98377	.	
359-1133	98377-98378	.	
359-1134	98378-98379	.	
359-1135	98379-98380	.	
359-1136	98380-98381	.	
359-1137	98381-98382	.	
359-1138	98382-98383	.	
359-1139	98383-98384	.	
359-1140	98384-98385	.	
359-1141	98385-98386	.	
359-1142	98386-98387	.	
359-1143	98387-98388	.	
359-1144	98388-98389	.	
359-1145	98389-98390	.	
359-1146	98391-98395	1239	
359-1147	98396-98397	|	
359-1148	98397-98398	_	
359-1149	98398-98399	_	
359-1150	98399-98400	_	
359-1151	98400-98401	_	
359-1152	98401-98402	_	
359-1153	98402-98403	_	
359-1154	98403-98404	_	
359-1155	98404-98405	_	
359-1156	98405-98406	_	
359-1157	98406-98407	_	
359-1158	98407-98408	_	
359-1159	98408-98409	_	
359-1160	98409-98410	_	
359-1161	98410-98411	_	
359-1162	98411-98412	_	
359-1163	98412-98413	_	
359-1164	98413-98414	_	
359-1165	98414-98415	_	
359-1166	98415-98416	_	
359-1167	98416-98417	_	
359-1168	98417-98418	_	
359-1169	98418-98419	_	
359-1170	98419-98420	_	
359-1171	98420-98421	_	
359-1172	98421-98422	_	
359-1173	98422-98423	_	
359-1174	98423-98424	_	
359-1175	98424-98425	_	
359-1176	98425-98426	_	
359-1177	98426-98427	_	
359-1178	98427-98428	_	
359-1179	98428-98429	_	
359-1180	98429-98430	_	
359-1181	98430-98431	_	
359-1182	98431-98432	_	
359-1183	98432-98433	_	
359-1184	98433-98434	_	
359-1185	98434-98435	_	
359-1186	98435-98436	_	
359-1187	98436-98437	_	
359-1188	98437-98438	_	
359-1189	98438-98439	_	
359-1190	98439-98440	_	
359-1191	98440-98441	_	
359-1192	98441-98442	_	
359-1193	98442-98443	_	
359-1194	98443-98444	_	
359-1195	98444-98445	_	
359-1196	98445-98446	_	
359-1197	98446-98447	_	
359-1198	98447-98448	_	
359-1199	98448-98449	_	
359-1200	98449-98450	_	
359-1201	98450-98451	_	
359-1202	98451-98452	_	
359-1203	98452-98453	_	
359-1204	98453-98454	_	
359-1205	98454-98455	_	
359-1206	98455-98456	_	
359-1207	98456-98457	_	
359-1208	98457-98458	_	
359-1209	98458-98459	_	
359-1210	98459-98460	_	
359-1211	98460-98461	_	
359-1212	98461-98462	_	
359-1213	98463-98464	|	
359-1214	98464-98465	.	
359-1215	98465-98466	.	
359-1216	98466-98467	.	
359-1217	98467-98468	.	
359-1218	98468-98469	.	
359-1219	98469-98470	.	
359-1220	98470-98471	.	
359-1221	98471-98472	.	
359-1222	98472-98473	.	
359-1223	98473-98474	.	
359-1224	98474-98475	.	
359-1225	98475-98476	.	
359-1226	98476-98477	.	
359-1227	98477-98478	.	
359-1228	98478-98479	.	
359-1229	98479-98480	.	
359-1230	98480-98481	.	
359-1231	98481-98482	.	
359-1232	98482-98483	.	
359-1233	98483-98484	.	
359-1234	98484-98485	.	
359-1235	98485-98486	.	
359-1236	98486-98487	.	
359-1237	98487-98488	.	
359-1238	98488-98489	.	
359-1239	98489-98490	.	
359-1240	98490-98491	.	
359-1241	98491-98492	.	
359-1242	98492-98493	.	
359-1243	98493-98494	.	
359-1244	98494-98495	.	
359-1245	98495-98496	.	
359-1246	98496-98497	.	
359-1247	98497-98498	.	
359-1248	98498-98499	.	
359-1249	98499-98500	.	
359-1250	98500-98501	.	
359-1251	98501-98502	.	
359-1252	98502-98503	.	
359-1253	98503-98504	.	
359-1254	98504-98505	.	
359-1255	98505-98506	.	
359-1256	98506-98507	.	
359-1257	98507-98508	.	
359-1258	98508-98509	.	
359-1259	98509-98510	.	
359-1260	98510-98511	.	
359-1261	98511-98512	.	
359-1262	98512-98513	.	
359-1263	98513-98514	.	
359-1264	98514-98515	.	
359-1265	98515-98516	.	
359-1266	98516-98517	.	
359-1267	98517-98518	.	
359-1268	98518-98519	.	
359-1269	98519-98520	.	
359-1270	98520-98521	.	
359-1271	98521-98522	.	
359-1272	98522-98523	.	
359-1273	98523-98524	.	
359-1274	98524-98525	.	
359-1275	98525-98526	.	
359-1276	98526-98527	.	
359-1277	98527-98528	.	
359-1278	98528-98529	.	
359-1279	98530-98533	247	
359-1280	98534-98535	|	
359-1281	98535-98536	.	
359-1282	98536-98537	.	
359-1283	98537-98538	.	
359-1284	98538-98539	.	
359-1285	98539-98540	.	
359-1286	98540-98541	.	
359-1287	98541-98542	.	
359-1288	98542-98543	.	
359-1289	98543-98544	.	
359-1290	98544-98545	.	
359-1291	98545-98546	.	
359-1292	98546-98547	.	
359-1293	98547-98548	.	
359-1294	98548-98549	.	
359-1295	98549-98550	.	
359-1296	98550-98551	.	
359-1297	98551-98552	.	
359-1298	98552-98553	.	
359-1299	98553-98554	.	
359-1300	98554-98555	.	
359-1301	98555-98556	.	
359-1302	98556-98557	.	
359-1303	98557-98558	.	
359-1304	98558-98559	.	
359-1305	98559-98560	.	
359-1306	98560-98561	.	
359-1307	98561-98562	.	
359-1308	98562-98563	.	
359-1309	98563-98564	.	
359-1310	98564-98565	.	
359-1311	98565-98566	.	
359-1312	98566-98567	.	
359-1313	98567-98568	.	
359-1314	98568-98569	.	
359-1315	98569-98570	.	
359-1316	98570-98571	.	
359-1317	98571-98572	.	
359-1318	98572-98573	.	
359-1319	98573-98574	.	
359-1320	98574-98575	.	
359-1321	98575-98576	.	
359-1322	98576-98577	.	
359-1323	98577-98578	.	
359-1324	98578-98579	.	
359-1325	98579-98580	.	
359-1326	98580-98581	.	
359-1327	98581-98582	.	
359-1328	98582-98583	.	
359-1329	98583-98584	.	
359-1330	98584-98585	.	
359-1331	98585-98586	.	
359-1332	98586-98587	.	
359-1333	98587-98588	.	
359-1334	98588-98589	.	
359-1335	98589-98590	.	
359-1336	98590-98591	.	
359-1337	98591-98592	.	
359-1338	98592-98593	.	
359-1339	98593-98594	.	
359-1340	98594-98595	.	
359-1341	98595-98596	.	
359-1342	98596-98597	.	
359-1343	98597-98598	.	
359-1344	98598-98599	.	
359-1345	98599-98600	.	
359-1346	98601-98602	|	
359-1347	98602-98603	|	
359-1348	98603-98604	|	
359-1349	98604-98605	_	
359-1350	98605-98606	|	
359-1351	98606-98607	_	
359-1352	98607-98608	_	
359-1353	98608-98609	_	
359-1354	98609-98610	_	
359-1355	98610-98611	|	
359-1356	98611-98612	_	
359-1357	98612-98613	_	
359-1358	98613-98614	_	
359-1359	98614-98615	_	
359-1360	98615-98616	_	
359-1361	98616-98617	_	
359-1362	98617-98618	_	
359-1363	98618-98619	_	
359-1364	98619-98620	_	
359-1365	98620-98621	_	
359-1366	98621-98622	_	
359-1367	98622-98623	_	
359-1368	98623-98624	_	
359-1369	98624-98625	_	
359-1370	98625-98626	_	
359-1371	98626-98627	_	
359-1372	98627-98628	_	
359-1373	98628-98629	_	
359-1374	98629-98630	_	
359-1375	98630-98631	_	
359-1376	98631-98632	_	
359-1377	98632-98633	_	
359-1378	98633-98634	_	
359-1379	98634-98635	_	
359-1380	98635-98636	_	
359-1381	98636-98637	_	
359-1382	98637-98638	_	
359-1383	98638-98639	_	
359-1384	98639-98640	_	
359-1385	98640-98641	_	
359-1386	98641-98642	_	
359-1387	98642-98643	_	
359-1388	98643-98644	_	
359-1389	98644-98645	_	
359-1390	98645-98646	_	
359-1391	98646-98647	_	
359-1392	98647-98648	_	
359-1393	98648-98649	_	
359-1394	98649-98650	_	
359-1395	98650-98651	_	
359-1396	98651-98652	_	
359-1397	98652-98653	_	
359-1398	98653-98654	_	
359-1399	98654-98655	_	
359-1400	98655-98656	_	
359-1401	98656-98657	_	
359-1402	98657-98658	_	
359-1403	98658-98659	_	
359-1404	98659-98660	_	
359-1405	98660-98661	_	
359-1406	98661-98662	_	
359-1407	98662-98663	_	
359-1408	98663-98664	_	
359-1409	98664-98665	_	
359-1410	98665-98666	_	
359-1411	98666-98667	_	
359-1412	98668-98672	Time	
359-1413	98672-98673	:	
359-1414	98674-98675	|	
359-1415	98675-98676	^	
359-1416	98676-98677	^	
359-1417	98677-98678	^	
359-1418	98678-98679	^	
359-1419	98679-98680	|	
359-1420	98680-98681	^	
359-1421	98681-98682	^	
359-1422	98682-98683	^	
359-1423	98683-98684	^	
359-1424	98684-98685	|	
359-1425	98685-98686	^	
359-1426	98686-98687	^	
359-1427	98687-98688	^	
359-1428	98688-98689	^	
359-1429	98689-98690	|	
359-1430	98690-98691	^	
359-1431	98691-98692	^	
359-1432	98692-98693	^	
359-1433	98693-98694	^	
359-1434	98694-98695	|	
359-1435	98695-98696	^	
359-1436	98696-98697	^	
359-1437	98697-98698	^	
359-1438	98698-98699	^	
359-1439	98699-98700	|	
359-1440	98700-98701	^	
359-1441	98701-98702	^	
359-1442	98702-98703	^	
359-1443	98703-98704	^	
359-1444	98704-98705	|	
359-1445	98705-98706	^	
359-1446	98706-98707	^	
359-1447	98707-98708	^	
359-1448	98708-98709	^	
359-1449	98709-98710	|	
359-1450	98710-98711	^	
359-1451	98711-98712	^	
359-1452	98712-98713	^	
359-1453	98713-98714	^	
359-1454	98714-98715	|	
359-1455	98715-98716	^	
359-1456	98716-98717	^	
359-1457	98717-98718	^	
359-1458	98718-98719	^	
359-1459	98719-98720	|	
359-1460	98720-98721	^	
359-1461	98721-98722	^	
359-1462	98722-98723	^	
359-1463	98723-98724	^	
359-1464	98724-98725	|	
359-1465	98725-98726	^	
359-1466	98726-98727	^	
359-1467	98727-98728	^	
359-1468	98728-98729	^	
359-1469	98729-98730	|	
359-1470	98730-98731	^	
359-1471	98731-98732	^	
359-1472	98732-98733	^	
359-1473	98733-98734	^	
359-1474	98734-98735	|	
359-1475	98735-98736	^	
359-1476	98736-98737	^	
359-1477	98737-98738	^	
359-1478	98738-98739	^	
359-1479	98739-98740	|	
359-1480	98741-98744	0.5	
359-1481	98745-98748	1.0	
359-1482	98749-98752	1.5	
359-1483	98753-98756	2.0	
359-1484	98757-98760	2.5	
359-1485	98761-98764	3.0	
359-1486	98765-98768	3.5	
359-1487	98769-98772	4.0	
359-1488	98773-98776	4.5	
359-1489	98777-98780	4.6	
359-1490	98781-98784	5.0	
359-1491	98785-98788	5.5	
359-1492	98789-98792	6.0	
359-1493	98793-98800	OpenBSD	
359-1494	98801-98802	5	
359-1495	98802-98803	.	
359-1496	98803-98804	x	
359-1497	98805-98810	rough	
359-1498	98811-98821	comparison	
359-1499	98821-98822	:	
359-1500	98823-98827	Here	
359-1501	98828-98830	is	
359-1502	98831-98834	the	
359-1503	98835-98838	Web	
359-1504	98839-98845	Server	
359-1505	98846-98858	Distribution	
359-1506	98859-98870	Performance	
359-1507	98871-98875	Perl	
359-1508	98876-98882	script	
359-1509	98883-98886	run	
359-1510	98887-98889	on	
359-1511	98890-98893	our	
359-1512	98894-98897	log	
359-1513	98898-98902	when	
359-1514	98903-98905	we	
359-1515	98906-98910	were	
359-1516	98911-98916	using	
359-1517	98917-98924	OpenBSD	
359-1518	98924-98925	.	

#Text=OpenBSD is very secure and has the latest Pf, but it is not considered the
#Text=fastest of operating systems.
360-1	98926-98933	OpenBSD	
360-2	98934-98936	is	
360-3	98937-98941	very	
360-4	98942-98948	secure	
360-5	98949-98952	and	
360-6	98953-98956	has	
360-7	98957-98960	the	
360-8	98961-98967	latest	
360-9	98968-98970	Pf	
360-10	98970-98971	,	
360-11	98972-98975	but	
360-12	98976-98978	it	
360-13	98979-98981	is	
360-14	98982-98985	not	
360-15	98986-98996	considered	
360-16	98997-99000	the	
360-17	99001-99008	fastest	
360-18	99009-99011	of	
360-19	99012-99021	operating	
360-20	99022-99029	systems	
360-21	99029-99030	.	

#Text=Notice the graph shows 1042 requests completed
#Text=in 0.1 seconds (i.e. less then 200 milliseconds) which equals 10.42% out of a
#Text=total of 10000.
361-1	99031-99037	Notice	
361-2	99038-99041	the	
361-3	99042-99047	graph	
361-4	99048-99053	shows	
361-5	99054-99058	1042	
361-6	99059-99067	requests	
361-7	99068-99077	completed	
361-8	99078-99080	in	
361-9	99081-99084	0.1	
361-10	99085-99092	seconds	
361-11	99093-99094	(	
361-12	99094-99097	i.e	
361-13	99097-99098	.	
361-14	99099-99103	less	
361-15	99104-99108	then	
361-16	99109-99112	200	
361-17	99113-99125	milliseconds	
361-18	99125-99126	)	
361-19	99127-99132	which	
361-20	99133-99139	equals	
361-21	99140-99146	10.42%	
361-22	99147-99150	out	
361-23	99151-99153	of	
361-24	99154-99155	a	
361-25	99156-99161	total	
361-26	99162-99164	of	
361-27	99165-99170	10000	
361-28	99170-99171	.	

#Text=With the FreeBSD optimizations enabled the server is able to
#Text=complete transactions more than 18 times faster then OpenBSD.
#Text=((9660/.1)/(1042/0.2)=18.54).
362-1	99172-99176	With	
362-2	99177-99180	the	
362-3	99181-99188	FreeBSD	
362-4	99189-99202	optimizations	
362-5	99203-99210	enabled	
362-6	99211-99214	the	
362-7	99215-99221	server	
362-8	99222-99224	is	
362-9	99225-99229	able	
362-10	99230-99232	to	
362-11	99233-99241	complete	
362-12	99242-99254	transactions	
362-13	99255-99259	more	
362-14	99260-99264	than	
362-15	99265-99267	18	
362-16	99268-99273	times	
362-17	99274-99280	faster	
362-18	99281-99285	then	
362-19	99286-99293	OpenBSD	
362-20	99293-99294	.	
362-21	99295-99296	(	
362-22	99296-99297	(	
362-23	99297-99301	9660	
362-24	99301-99302	/	
362-25	99302-99304	.1	
362-26	99304-99305	)	
362-27	99305-99306	/	
362-28	99306-99307	(	
362-29	99307-99311	1042	
362-30	99311-99312	/	
362-31	99312-99315	0.2	
362-32	99315-99316	)	
362-33	99316-99317	=	
362-34	99317-99322	18.54	
362-35	99322-99323	)	
362-36	99323-99324	.	

#Text=We respect OpenBSD for being secure, but we have
#Text=to admit it is not suited for a high speed - low latency server.
#Text=calomel@openbsd5.x:
#Text=.
363-1	99325-99327	We	
363-2	99328-99335	respect	
363-3	99336-99343	OpenBSD	
363-4	99344-99347	for	
363-5	99348-99353	being	
363-6	99354-99360	secure	
363-7	99360-99361	,	
363-8	99362-99365	but	
363-9	99366-99368	we	
363-10	99369-99373	have	
363-11	99374-99376	to	
363-12	99377-99382	admit	
363-13	99383-99385	it	
363-14	99386-99388	is	
363-15	99389-99392	not	
363-16	99393-99399	suited	
363-17	99400-99403	for	
363-18	99404-99405	a	
363-19	99406-99410	high	
363-20	99411-99416	speed	
363-21	99417-99418	-	
363-22	99419-99422	low	
363-23	99423-99430	latency	
363-24	99431-99437	server	
363-25	99437-99438	.	
363-26	99439-99446	calomel	
363-27	99446-99447	@	
363-28	99447-99455	openbsd5	
363-29	99455-99456	.	
363-30	99456-99457	x	
363-31	99457-99458	:	
363-32	99459-99460	.	

#Text=/calomel_http_log_distribution_performance.pl
#Text=.:.
364-1	99460-99461	/	
364-2	99461-99505	calomel_http_log_distribution_performance.pl	
364-3	99506-99507	.	
364-4	99507-99508	:	
364-5	99508-99509	.	

#Text=Calomel Webserver Distribution Performance Statistics
#Text=Log lines: 10000, Search string(s):
#Text=__________________________________________________________________
#Text=1042 .|................................................................
#Text=.|................................................................
#Text=898 _|________________________________________________________________
#Text=.||...............................................................
#Text=754 .|||..............................................................
#Text=_|||______________________________________________________________
#Text=682 .||||.............................................................
#Text=.||||.............................................................
#Text=539 _||||_____________________________________________________________
#Text=.||||..||.........................................................
#Text=395 .||||||||.........................................................
#Text=_|||||||||________________________________________________________
#Text=251 .||||||||||.......................................................
#Text=.|||||||||||......................................................
#Text=179 _||||||||||||_____________________________________________________
#Text=.||||||||||||.....................................................
#Text=35 ||||||||||||||||||||....||........................................
#Text=||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
#Text=Time: |^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|^^^^|
#Text=0.5
#Text=1.0
#Text=1.5
#Text=2.0
#Text=2.5
#Text=3.0
#Text=3.5
#Text=4.0
#Text=4.5
#Text=4.6
#Text=5.0
#Text=5.5
#Text=6.0
#Text=Do these optimizations help a firewall too ?
365-1	99510-99517	Calomel	
365-2	99518-99527	Webserver	
365-3	99528-99540	Distribution	
365-4	99541-99552	Performance	
365-5	99553-99563	Statistics	
365-6	99564-99567	Log	
365-7	99568-99573	lines	
365-8	99573-99574	:	
365-9	99575-99580	10000	
365-10	99580-99581	,	
365-11	99582-99588	Search	
365-12	99589-99595	string	
365-13	99595-99596	(	
365-14	99596-99597	s	
365-15	99597-99598	)	
365-16	99598-99599	:	
365-17	99600-99601	_	
365-18	99601-99602	_	
365-19	99602-99603	_	
365-20	99603-99604	_	
365-21	99604-99605	_	
365-22	99605-99606	_	
365-23	99606-99607	_	
365-24	99607-99608	_	
365-25	99608-99609	_	
365-26	99609-99610	_	
365-27	99610-99611	_	
365-28	99611-99612	_	
365-29	99612-99613	_	
365-30	99613-99614	_	
365-31	99614-99615	_	
365-32	99615-99616	_	
365-33	99616-99617	_	
365-34	99617-99618	_	
365-35	99618-99619	_	
365-36	99619-99620	_	
365-37	99620-99621	_	
365-38	99621-99622	_	
365-39	99622-99623	_	
365-40	99623-99624	_	
365-41	99624-99625	_	
365-42	99625-99626	_	
365-43	99626-99627	_	
365-44	99627-99628	_	
365-45	99628-99629	_	
365-46	99629-99630	_	
365-47	99630-99631	_	
365-48	99631-99632	_	
365-49	99632-99633	_	
365-50	99633-99634	_	
365-51	99634-99635	_	
365-52	99635-99636	_	
365-53	99636-99637	_	
365-54	99637-99638	_	
365-55	99638-99639	_	
365-56	99639-99640	_	
365-57	99640-99641	_	
365-58	99641-99642	_	
365-59	99642-99643	_	
365-60	99643-99644	_	
365-61	99644-99645	_	
365-62	99645-99646	_	
365-63	99646-99647	_	
365-64	99647-99648	_	
365-65	99648-99649	_	
365-66	99649-99650	_	
365-67	99650-99651	_	
365-68	99651-99652	_	
365-69	99652-99653	_	
365-70	99653-99654	_	
365-71	99654-99655	_	
365-72	99655-99656	_	
365-73	99656-99657	_	
365-74	99657-99658	_	
365-75	99658-99659	_	
365-76	99659-99660	_	
365-77	99660-99661	_	
365-78	99661-99662	_	
365-79	99662-99663	_	
365-80	99663-99664	_	
365-81	99664-99665	_	
365-82	99665-99666	_	
365-83	99667-99671	1042	
365-84	99672-99673	.	
365-85	99673-99674	|	
365-86	99674-99675	.	
365-87	99675-99676	.	
365-88	99676-99677	.	
365-89	99677-99678	.	
365-90	99678-99679	.	
365-91	99679-99680	.	
365-92	99680-99681	.	
365-93	99681-99682	.	
365-94	99682-99683	.	
365-95	99683-99684	.	
365-96	99684-99685	.	
365-97	99685-99686	.	
365-98	99686-99687	.	
365-99	99687-99688	.	
365-100	99688-99689	.	
365-101	99689-99690	.	
365-102	99690-99691	.	
365-103	99691-99692	.	
365-104	99692-99693	.	
365-105	99693-99694	.	
365-106	99694-99695	.	
365-107	99695-99696	.	
365-108	99696-99697	.	
365-109	99697-99698	.	
365-110	99698-99699	.	
365-111	99699-99700	.	
365-112	99700-99701	.	
365-113	99701-99702	.	
365-114	99702-99703	.	
365-115	99703-99704	.	
365-116	99704-99705	.	
365-117	99705-99706	.	
365-118	99706-99707	.	
365-119	99707-99708	.	
365-120	99708-99709	.	
365-121	99709-99710	.	
365-122	99710-99711	.	
365-123	99711-99712	.	
365-124	99712-99713	.	
365-125	99713-99714	.	
365-126	99714-99715	.	
365-127	99715-99716	.	
365-128	99716-99717	.	
365-129	99717-99718	.	
365-130	99718-99719	.	
365-131	99719-99720	.	
365-132	99720-99721	.	
365-133	99721-99722	.	
365-134	99722-99723	.	
365-135	99723-99724	.	
365-136	99724-99725	.	
365-137	99725-99726	.	
365-138	99726-99727	.	
365-139	99727-99728	.	
365-140	99728-99729	.	
365-141	99729-99730	.	
365-142	99730-99731	.	
365-143	99731-99732	.	
365-144	99732-99733	.	
365-145	99733-99734	.	
365-146	99734-99735	.	
365-147	99735-99736	.	
365-148	99736-99737	.	
365-149	99737-99738	.	
365-150	99739-99740	.	
365-151	99740-99741	|	
365-152	99741-99742	.	
365-153	99742-99743	.	
365-154	99743-99744	.	
365-155	99744-99745	.	
365-156	99745-99746	.	
365-157	99746-99747	.	
365-158	99747-99748	.	
365-159	99748-99749	.	
365-160	99749-99750	.	
365-161	99750-99751	.	
365-162	99751-99752	.	
365-163	99752-99753	.	
365-164	99753-99754	.	
365-165	99754-99755	.	
365-166	99755-99756	.	
365-167	99756-99757	.	
365-168	99757-99758	.	
365-169	99758-99759	.	
365-170	99759-99760	.	
365-171	99760-99761	.	
365-172	99761-99762	.	
365-173	99762-99763	.	
365-174	99763-99764	.	
365-175	99764-99765	.	
365-176	99765-99766	.	
365-177	99766-99767	.	
365-178	99767-99768	.	
365-179	99768-99769	.	
365-180	99769-99770	.	
365-181	99770-99771	.	
365-182	99771-99772	.	
365-183	99772-99773	.	
365-184	99773-99774	.	
365-185	99774-99775	.	
365-186	99775-99776	.	
365-187	99776-99777	.	
365-188	99777-99778	.	
365-189	99778-99779	.	
365-190	99779-99780	.	
365-191	99780-99781	.	
365-192	99781-99782	.	
365-193	99782-99783	.	
365-194	99783-99784	.	
365-195	99784-99785	.	
365-196	99785-99786	.	
365-197	99786-99787	.	
365-198	99787-99788	.	
365-199	99788-99789	.	
365-200	99789-99790	.	
365-201	99790-99791	.	
365-202	99791-99792	.	
365-203	99792-99793	.	
365-204	99793-99794	.	
365-205	99794-99795	.	
365-206	99795-99796	.	
365-207	99796-99797	.	
365-208	99797-99798	.	
365-209	99798-99799	.	
365-210	99799-99800	.	
365-211	99800-99801	.	
365-212	99801-99802	.	
365-213	99802-99803	.	
365-214	99803-99804	.	
365-215	99804-99805	.	
365-216	99806-99809	898	
365-217	99810-99811	_	
365-218	99811-99812	|	
365-219	99812-99813	_	
365-220	99813-99814	_	
365-221	99814-99815	_	
365-222	99815-99816	_	
365-223	99816-99817	_	
365-224	99817-99818	_	
365-225	99818-99819	_	
365-226	99819-99820	_	
365-227	99820-99821	_	
365-228	99821-99822	_	
365-229	99822-99823	_	
365-230	99823-99824	_	
365-231	99824-99825	_	
365-232	99825-99826	_	
365-233	99826-99827	_	
365-234	99827-99828	_	
365-235	99828-99829	_	
365-236	99829-99830	_	
365-237	99830-99831	_	
365-238	99831-99832	_	
365-239	99832-99833	_	
365-240	99833-99834	_	
365-241	99834-99835	_	
365-242	99835-99836	_	
365-243	99836-99837	_	
365-244	99837-99838	_	
365-245	99838-99839	_	
365-246	99839-99840	_	
365-247	99840-99841	_	
365-248	99841-99842	_	
365-249	99842-99843	_	
365-250	99843-99844	_	
365-251	99844-99845	_	
365-252	99845-99846	_	
365-253	99846-99847	_	
365-254	99847-99848	_	
365-255	99848-99849	_	
365-256	99849-99850	_	
365-257	99850-99851	_	
365-258	99851-99852	_	
365-259	99852-99853	_	
365-260	99853-99854	_	
365-261	99854-99855	_	
365-262	99855-99856	_	
365-263	99856-99857	_	
365-264	99857-99858	_	
365-265	99858-99859	_	
365-266	99859-99860	_	
365-267	99860-99861	_	
365-268	99861-99862	_	
365-269	99862-99863	_	
365-270	99863-99864	_	
365-271	99864-99865	_	
365-272	99865-99866	_	
365-273	99866-99867	_	
365-274	99867-99868	_	
365-275	99868-99869	_	
365-276	99869-99870	_	
365-277	99870-99871	_	
365-278	99871-99872	_	
365-279	99872-99873	_	
365-280	99873-99874	_	
365-281	99874-99875	_	
365-282	99875-99876	_	
365-283	99877-99878	.	
365-284	99878-99879	|	
365-285	99879-99880	|	
365-286	99880-99881	.	
365-287	99881-99882	.	
365-288	99882-99883	.	
365-289	99883-99884	.	
365-290	99884-99885	.	
365-291	99885-99886	.	
365-292	99886-99887	.	
365-293	99887-99888	.	
365-294	99888-99889	.	
365-295	99889-99890	.	
365-296	99890-99891	.	
365-297	99891-99892	.	
365-298	99892-99893	.	
365-299	99893-99894	.	
365-300	99894-99895	.	
365-301	99895-99896	.	
365-302	99896-99897	.	
365-303	99897-99898	.	
365-304	99898-99899	.	
365-305	99899-99900	.	
365-306	99900-99901	.	
365-307	99901-99902	.	
365-308	99902-99903	.	
365-309	99903-99904	.	
365-310	99904-99905	.	
365-311	99905-99906	.	
365-312	99906-99907	.	
365-313	99907-99908	.	
365-314	99908-99909	.	
365-315	99909-99910	.	
365-316	99910-99911	.	
365-317	99911-99912	.	
365-318	99912-99913	.	
365-319	99913-99914	.	
365-320	99914-99915	.	
365-321	99915-99916	.	
365-322	99916-99917	.	
365-323	99917-99918	.	
365-324	99918-99919	.	
365-325	99919-99920	.	
365-326	99920-99921	.	
365-327	99921-99922	.	
365-328	99922-99923	.	
365-329	99923-99924	.	
365-330	99924-99925	.	
365-331	99925-99926	.	
365-332	99926-99927	.	
365-333	99927-99928	.	
365-334	99928-99929	.	
365-335	99929-99930	.	
365-336	99930-99931	.	
365-337	99931-99932	.	
365-338	99932-99933	.	
365-339	99933-99934	.	
365-340	99934-99935	.	
365-341	99935-99936	.	
365-342	99936-99937	.	
365-343	99937-99938	.	
365-344	99938-99939	.	
365-345	99939-99940	.	
365-346	99940-99941	.	
365-347	99941-99942	.	
365-348	99942-99943	.	
365-349	99944-99947	754	
365-350	99948-99949	.	
365-351	99949-99950	|	
365-352	99950-99951	|	
365-353	99951-99952	|	
365-354	99952-99953	.	
365-355	99953-99954	.	
365-356	99954-99955	.	
365-357	99955-99956	.	
365-358	99956-99957	.	
365-359	99957-99958	.	
365-360	99958-99959	.	
365-361	99959-99960	.	
365-362	99960-99961	.	
365-363	99961-99962	.	
365-364	99962-99963	.	
365-365	99963-99964	.	
365-366	99964-99965	.	
365-367	99965-99966	.	
365-368	99966-99967	.	
365-369	99967-99968	.	
365-370	99968-99969	.	
365-371	99969-99970	.	
365-372	99970-99971	.	
365-373	99971-99972	.	
365-374	99972-99973	.	
365-375	99973-99974	.	
365-376	99974-99975	.	
365-377	99975-99976	.	
365-378	99976-99977	.	
365-379	99977-99978	.	
365-380	99978-99979	.	
365-381	99979-99980	.	
365-382	99980-99981	.	
365-383	99981-99982	.	
365-384	99982-99983	.	
365-385	99983-99984	.	
365-386	99984-99985	.	
365-387	99985-99986	.	
365-388	99986-99987	.	
365-389	99987-99988	.	
365-390	99988-99989	.	
365-391	99989-99990	.	
365-392	99990-99991	.	
365-393	99991-99992	.	
365-394	99992-99993	.	
365-395	99993-99994	.	
365-396	99994-99995	.	
365-397	99995-99996	.	
365-398	99996-99997	.	
365-399	99997-99998	.	
365-400	99998-99999	.	
365-401	99999-100000	.	
365-402	100000-100001	.	
365-403	100001-100002	.	
365-404	100002-100003	.	
365-405	100003-100004	.	
365-406	100004-100005	.	
365-407	100005-100006	.	
365-408	100006-100007	.	
365-409	100007-100008	.	
365-410	100008-100009	.	
365-411	100009-100010	.	
365-412	100010-100011	.	
365-413	100011-100012	.	
365-414	100012-100013	.	
365-415	100013-100014	.	
365-416	100015-100016	_	
365-417	100016-100017	|	
365-418	100017-100018	|	
365-419	100018-100019	|	
365-420	100019-100020	_	
365-421	100020-100021	_	
365-422	100021-100022	_	
365-423	100022-100023	_	
365-424	100023-100024	_	
365-425	100024-100025	_	
365-426	100025-100026	_	
365-427	100026-100027	_	
365-428	100027-100028	_	
365-429	100028-100029	_	
365-430	100029-100030	_	
365-431	100030-100031	_	
365-432	100031-100032	_	
365-433	100032-100033	_	
365-434	100033-100034	_	
365-435	100034-100035	_	
365-436	100035-100036	_	
365-437	100036-100037	_	
365-438	100037-100038	_	
365-439	100038-100039	_	
365-440	100039-100040	_	
365-441	100040-100041	_	
365-442	100041-100042	_	
365-443	100042-100043	_	
365-444	100043-100044	_	
365-445	100044-100045	_	
365-446	100045-100046	_	
365-447	100046-100047	_	
365-448	100047-100048	_	
365-449	100048-100049	_	
365-450	100049-100050	_	
365-451	100050-100051	_	
365-452	100051-100052	_	
365-453	100052-100053	_	
365-454	100053-100054	_	
365-455	100054-100055	_	
365-456	100055-100056	_	
365-457	100056-100057	_	
365-458	100057-100058	_	
365-459	100058-100059	_	
365-460	100059-100060	_	
365-461	100060-100061	_	
365-462	100061-100062	_	
365-463	100062-100063	_	
365-464	100063-100064	_	
365-465	100064-100065	_	
365-466	100065-100066	_	
365-467	100066-100067	_	
365-468	100067-100068	_	
365-469	100068-100069	_	
365-470	100069-100070	_	
365-471	100070-100071	_	
365-472	100071-100072	_	
365-473	100072-100073	_	
365-474	100073-100074	_	
365-475	100074-100075	_	
365-476	100075-100076	_	
365-477	100076-100077	_	
365-478	100077-100078	_	
365-479	100078-100079	_	
365-480	100079-100080	_	
365-481	100080-100081	_	
365-482	100082-100085	682	
365-483	100086-100087	.	
365-484	100087-100088	|	
365-485	100088-100089	|	
365-486	100089-100090	|	
365-487	100090-100091	|	
365-488	100091-100092	.	
365-489	100092-100093	.	
365-490	100093-100094	.	
365-491	100094-100095	.	
365-492	100095-100096	.	
365-493	100096-100097	.	
365-494	100097-100098	.	
365-495	100098-100099	.	
365-496	100099-100100	.	
365-497	100100-100101	.	
365-498	100101-100102	.	
365-499	100102-100103	.	
365-500	100103-100104	.	
365-501	100104-100105	.	
365-502	100105-100106	.	
365-503	100106-100107	.	
365-504	100107-100108	.	
365-505	100108-100109	.	
365-506	100109-100110	.	
365-507	100110-100111	.	
365-508	100111-100112	.	
365-509	100112-100113	.	
365-510	100113-100114	.	
365-511	100114-100115	.	
365-512	100115-100116	.	
365-513	100116-100117	.	
365-514	100117-100118	.	
365-515	100118-100119	.	
365-516	100119-100120	.	
365-517	100120-100121	.	
365-518	100121-100122	.	
365-519	100122-100123	.	
365-520	100123-100124	.	
365-521	100124-100125	.	
365-522	100125-100126	.	
365-523	100126-100127	.	
365-524	100127-100128	.	
365-525	100128-100129	.	
365-526	100129-100130	.	
365-527	100130-100131	.	
365-528	100131-100132	.	
365-529	100132-100133	.	
365-530	100133-100134	.	
365-531	100134-100135	.	
365-532	100135-100136	.	
365-533	100136-100137	.	
365-534	100137-100138	.	
365-535	100138-100139	.	
365-536	100139-100140	.	
365-537	100140-100141	.	
365-538	100141-100142	.	
365-539	100142-100143	.	
365-540	100143-100144	.	
365-541	100144-100145	.	
365-542	100145-100146	.	
365-543	100146-100147	.	
365-544	100147-100148	.	
365-545	100148-100149	.	
365-546	100149-100150	.	
365-547	100150-100151	.	
365-548	100151-100152	.	
365-549	100153-100154	.	
365-550	100154-100155	|	
365-551	100155-100156	|	
365-552	100156-100157	|	
365-553	100157-100158	|	
365-554	100158-100159	.	
365-555	100159-100160	.	
365-556	100160-100161	.	
365-557	100161-100162	.	
365-558	100162-100163	.	
365-559	100163-100164	.	
365-560	100164-100165	.	
365-561	100165-100166	.	
365-562	100166-100167	.	
365-563	100167-100168	.	
365-564	100168-100169	.	
365-565	100169-100170	.	
365-566	100170-100171	.	
365-567	100171-100172	.	
365-568	100172-100173	.	
365-569	100173-100174	.	
365-570	100174-100175	.	
365-571	100175-100176	.	
365-572	100176-100177	.	
365-573	100177-100178	.	
365-574	100178-100179	.	
365-575	100179-100180	.	
365-576	100180-100181	.	
365-577	100181-100182	.	
365-578	100182-100183	.	
365-579	100183-100184	.	
365-580	100184-100185	.	
365-581	100185-100186	.	
365-582	100186-100187	.	
365-583	100187-100188	.	
365-584	100188-100189	.	
365-585	100189-100190	.	
365-586	100190-100191	.	
365-587	100191-100192	.	
365-588	100192-100193	.	
365-589	100193-100194	.	
365-590	100194-100195	.	
365-591	100195-100196	.	
365-592	100196-100197	.	
365-593	100197-100198	.	
365-594	100198-100199	.	
365-595	100199-100200	.	
365-596	100200-100201	.	
365-597	100201-100202	.	
365-598	100202-100203	.	
365-599	100203-100204	.	
365-600	100204-100205	.	
365-601	100205-100206	.	
365-602	100206-100207	.	
365-603	100207-100208	.	
365-604	100208-100209	.	
365-605	100209-100210	.	
365-606	100210-100211	.	
365-607	100211-100212	.	
365-608	100212-100213	.	
365-609	100213-100214	.	
365-610	100214-100215	.	
365-611	100215-100216	.	
365-612	100216-100217	.	
365-613	100217-100218	.	
365-614	100218-100219	.	
365-615	100220-100223	539	
365-616	100224-100225	_	
365-617	100225-100226	|	
365-618	100226-100227	|	
365-619	100227-100228	|	
365-620	100228-100229	|	
365-621	100229-100230	_	
365-622	100230-100231	_	
365-623	100231-100232	_	
365-624	100232-100233	_	
365-625	100233-100234	_	
365-626	100234-100235	_	
365-627	100235-100236	_	
365-628	100236-100237	_	
365-629	100237-100238	_	
365-630	100238-100239	_	
365-631	100239-100240	_	
365-632	100240-100241	_	
365-633	100241-100242	_	
365-634	100242-100243	_	
365-635	100243-100244	_	
365-636	100244-100245	_	
365-637	100245-100246	_	
365-638	100246-100247	_	
365-639	100247-100248	_	
365-640	100248-100249	_	
365-641	100249-100250	_	
365-642	100250-100251	_	
365-643	100251-100252	_	
365-644	100252-100253	_	
365-645	100253-100254	_	
365-646	100254-100255	_	
365-647	100255-100256	_	
365-648	100256-100257	_	
365-649	100257-100258	_	
365-650	100258-100259	_	
365-651	100259-100260	_	
365-652	100260-100261	_	
365-653	100261-100262	_	
365-654	100262-100263	_	
365-655	100263-100264	_	
365-656	100264-100265	_	
365-657	100265-100266	_	
365-658	100266-100267	_	
365-659	100267-100268	_	
365-660	100268-100269	_	
365-661	100269-100270	_	
365-662	100270-100271	_	
365-663	100271-100272	_	
365-664	100272-100273	_	
365-665	100273-100274	_	
365-666	100274-100275	_	
365-667	100275-100276	_	
365-668	100276-100277	_	
365-669	100277-100278	_	
365-670	100278-100279	_	
365-671	100279-100280	_	
365-672	100280-100281	_	
365-673	100281-100282	_	
365-674	100282-100283	_	
365-675	100283-100284	_	
365-676	100284-100285	_	
365-677	100285-100286	_	
365-678	100286-100287	_	
365-679	100287-100288	_	
365-680	100288-100289	_	
365-681	100289-100290	_	
365-682	100291-100292	.	
365-683	100292-100293	|	
365-684	100293-100294	|	
365-685	100294-100295	|	
365-686	100295-100296	|	
365-687	100296-100297	.	
365-688	100297-100298	.	
365-689	100298-100299	|	
365-690	100299-100300	|	
365-691	100300-100301	.	
365-692	100301-100302	.	
365-693	100302-100303	.	
365-694	100303-100304	.	
365-695	100304-100305	.	
365-696	100305-100306	.	
365-697	100306-100307	.	
365-698	100307-100308	.	
365-699	100308-100309	.	
365-700	100309-100310	.	
365-701	100310-100311	.	
365-702	100311-100312	.	
365-703	100312-100313	.	
365-704	100313-100314	.	
365-705	100314-100315	.	
365-706	100315-100316	.	
365-707	100316-100317	.	
365-708	100317-100318	.	
365-709	100318-100319	.	
365-710	100319-100320	.	
365-711	100320-100321	.	
365-712	100321-100322	.	
365-713	100322-100323	.	
365-714	100323-100324	.	
365-715	100324-100325	.	
365-716	100325-100326	.	
365-717	100326-100327	.	
365-718	100327-100328	.	
365-719	100328-100329	.	
365-720	100329-100330	.	
365-721	100330-100331	.	
365-722	100331-100332	.	
365-723	100332-100333	.	
365-724	100333-100334	.	
365-725	100334-100335	.	
365-726	100335-100336	.	
365-727	100336-100337	.	
365-728	100337-100338	.	
365-729	100338-100339	.	
365-730	100339-100340	.	
365-731	100340-100341	.	
365-732	100341-100342	.	
365-733	100342-100343	.	
365-734	100343-100344	.	
365-735	100344-100345	.	
365-736	100345-100346	.	
365-737	100346-100347	.	
365-738	100347-100348	.	
365-739	100348-100349	.	
365-740	100349-100350	.	
365-741	100350-100351	.	
365-742	100351-100352	.	
365-743	100352-100353	.	
365-744	100353-100354	.	
365-745	100354-100355	.	
365-746	100355-100356	.	
365-747	100356-100357	.	
365-748	100358-100361	395	
365-749	100362-100363	.	
365-750	100363-100364	|	
365-751	100364-100365	|	
365-752	100365-100366	|	
365-753	100366-100367	|	
365-754	100367-100368	|	
365-755	100368-100369	|	
365-756	100369-100370	|	
365-757	100370-100371	|	
365-758	100371-100372	.	
365-759	100372-100373	.	
365-760	100373-100374	.	
365-761	100374-100375	.	
365-762	100375-100376	.	
365-763	100376-100377	.	
365-764	100377-100378	.	
365-765	100378-100379	.	
365-766	100379-100380	.	
365-767	100380-100381	.	
365-768	100381-100382	.	
365-769	100382-100383	.	
365-770	100383-100384	.	
365-771	100384-100385	.	
365-772	100385-100386	.	
365-773	100386-100387	.	
365-774	100387-100388	.	
365-775	100388-100389	.	
365-776	100389-100390	.	
365-777	100390-100391	.	
365-778	100391-100392	.	
365-779	100392-100393	.	
365-780	100393-100394	.	
365-781	100394-100395	.	
365-782	100395-100396	.	
365-783	100396-100397	.	
365-784	100397-100398	.	
365-785	100398-100399	.	
365-786	100399-100400	.	
365-787	100400-100401	.	
365-788	100401-100402	.	
365-789	100402-100403	.	
365-790	100403-100404	.	
365-791	100404-100405	.	
365-792	100405-100406	.	
365-793	100406-100407	.	
365-794	100407-100408	.	
365-795	100408-100409	.	
365-796	100409-100410	.	
365-797	100410-100411	.	
365-798	100411-100412	.	
365-799	100412-100413	.	
365-800	100413-100414	.	
365-801	100414-100415	.	
365-802	100415-100416	.	
365-803	100416-100417	.	
365-804	100417-100418	.	
365-805	100418-100419	.	
365-806	100419-100420	.	
365-807	100420-100421	.	
365-808	100421-100422	.	
365-809	100422-100423	.	
365-810	100423-100424	.	
365-811	100424-100425	.	
365-812	100425-100426	.	
365-813	100426-100427	.	
365-814	100427-100428	.	
365-815	100429-100430	_	
365-816	100430-100431	|	
365-817	100431-100432	|	
365-818	100432-100433	|	
365-819	100433-100434	|	
365-820	100434-100435	|	
365-821	100435-100436	|	
365-822	100436-100437	|	
365-823	100437-100438	|	
365-824	100438-100439	|	
365-825	100439-100440	_	
365-826	100440-100441	_	
365-827	100441-100442	_	
365-828	100442-100443	_	
365-829	100443-100444	_	
365-830	100444-100445	_	
365-831	100445-100446	_	
365-832	100446-100447	_	
365-833	100447-100448	_	
365-834	100448-100449	_	
365-835	100449-100450	_	
365-836	100450-100451	_	
365-837	100451-100452	_	
365-838	100452-100453	_	
365-839	100453-100454	_	
365-840	100454-100455	_	
365-841	100455-100456	_	
365-842	100456-100457	_	
365-843	100457-100458	_	
365-844	100458-100459	_	
365-845	100459-100460	_	
365-846	100460-100461	_	
365-847	100461-100462	_	
365-848	100462-100463	_	
365-849	100463-100464	_	
365-850	100464-100465	_	
365-851	100465-100466	_	
365-852	100466-100467	_	
365-853	100467-100468	_	
365-854	100468-100469	_	
365-855	100469-100470	_	
365-856	100470-100471	_	
365-857	100471-100472	_	
365-858	100472-100473	_	
365-859	100473-100474	_	
365-860	100474-100475	_	
365-861	100475-100476	_	
365-862	100476-100477	_	
365-863	100477-100478	_	
365-864	100478-100479	_	
365-865	100479-100480	_	
365-866	100480-100481	_	
365-867	100481-100482	_	
365-868	100482-100483	_	
365-869	100483-100484	_	
365-870	100484-100485	_	
365-871	100485-100486	_	
365-872	100486-100487	_	
365-873	100487-100488	_	
365-874	100488-100489	_	
365-875	100489-100490	_	
365-876	100490-100491	_	
365-877	100491-100492	_	
365-878	100492-100493	_	
365-879	100493-100494	_	
365-880	100494-100495	_	
365-881	100496-100499	251	
365-882	100500-100501	.	
365-883	100501-100502	|	
365-884	100502-100503	|	
365-885	100503-100504	|	
365-886	100504-100505	|	
365-887	100505-100506	|	
365-888	100506-100507	|	
365-889	100507-100508	|	
365-890	100508-100509	|	
365-891	100509-100510	|	
365-892	100510-100511	|	
365-893	100511-100512	.	
365-894	100512-100513	.	
365-895	100513-100514	.	
365-896	100514-100515	.	
365-897	100515-100516	.	
365-898	100516-100517	.	
365-899	100517-100518	.	
365-900	100518-100519	.	
365-901	100519-100520	.	
365-902	100520-100521	.	
365-903	100521-100522	.	
365-904	100522-100523	.	
365-905	100523-100524	.	
365-906	100524-100525	.	
365-907	100525-100526	.	
365-908	100526-100527	.	
365-909	100527-100528	.	
365-910	100528-100529	.	
365-911	100529-100530	.	
365-912	100530-100531	.	
365-913	100531-100532	.	
365-914	100532-100533	.	
365-915	100533-100534	.	
365-916	100534-100535	.	
365-917	100535-100536	.	
365-918	100536-100537	.	
365-919	100537-100538	.	
365-920	100538-100539	.	
365-921	100539-100540	.	
365-922	100540-100541	.	
365-923	100541-100542	.	
365-924	100542-100543	.	
365-925	100543-100544	.	
365-926	100544-100545	.	
365-927	100545-100546	.	
365-928	100546-100547	.	
365-929	100547-100548	.	
365-930	100548-100549	.	
365-931	100549-100550	.	
365-932	100550-100551	.	
365-933	100551-100552	.	
365-934	100552-100553	.	
365-935	100553-100554	.	
365-936	100554-100555	.	
365-937	100555-100556	.	
365-938	100556-100557	.	
365-939	100557-100558	.	
365-940	100558-100559	.	
365-941	100559-100560	.	
365-942	100560-100561	.	
365-943	100561-100562	.	
365-944	100562-100563	.	
365-945	100563-100564	.	
365-946	100564-100565	.	
365-947	100565-100566	.	
365-948	100567-100568	.	
365-949	100568-100569	|	
365-950	100569-100570	|	
365-951	100570-100571	|	
365-952	100571-100572	|	
365-953	100572-100573	|	
365-954	100573-100574	|	
365-955	100574-100575	|	
365-956	100575-100576	|	
365-957	100576-100577	|	
365-958	100577-100578	|	
365-959	100578-100579	|	
365-960	100579-100580	.	
365-961	100580-100581	.	
365-962	100581-100582	.	
365-963	100582-100583	.	
365-964	100583-100584	.	
365-965	100584-100585	.	
365-966	100585-100586	.	
365-967	100586-100587	.	
365-968	100587-100588	.	
365-969	100588-100589	.	
365-970	100589-100590	.	
365-971	100590-100591	.	
365-972	100591-100592	.	
365-973	100592-100593	.	
365-974	100593-100594	.	
365-975	100594-100595	.	
365-976	100595-100596	.	
365-977	100596-100597	.	
365-978	100597-100598	.	
365-979	100598-100599	.	
365-980	100599-100600	.	
365-981	100600-100601	.	
365-982	100601-100602	.	
365-983	100602-100603	.	
365-984	100603-100604	.	
365-985	100604-100605	.	
365-986	100605-100606	.	
365-987	100606-100607	.	
365-988	100607-100608	.	
365-989	100608-100609	.	
365-990	100609-100610	.	
365-991	100610-100611	.	
365-992	100611-100612	.	
365-993	100612-100613	.	
365-994	100613-100614	.	
365-995	100614-100615	.	
365-996	100615-100616	.	
365-997	100616-100617	.	
365-998	100617-100618	.	
365-999	100618-100619	.	
365-1000	100619-100620	.	
365-1001	100620-100621	.	
365-1002	100621-100622	.	
365-1003	100622-100623	.	
365-1004	100623-100624	.	
365-1005	100624-100625	.	
365-1006	100625-100626	.	
365-1007	100626-100627	.	
365-1008	100627-100628	.	
365-1009	100628-100629	.	
365-1010	100629-100630	.	
365-1011	100630-100631	.	
365-1012	100631-100632	.	
365-1013	100632-100633	.	
365-1014	100634-100637	179	
365-1015	100638-100639	_	
365-1016	100639-100640	|	
365-1017	100640-100641	|	
365-1018	100641-100642	|	
365-1019	100642-100643	|	
365-1020	100643-100644	|	
365-1021	100644-100645	|	
365-1022	100645-100646	|	
365-1023	100646-100647	|	
365-1024	100647-100648	|	
365-1025	100648-100649	|	
365-1026	100649-100650	|	
365-1027	100650-100651	|	
365-1028	100651-100652	_	
365-1029	100652-100653	_	
365-1030	100653-100654	_	
365-1031	100654-100655	_	
365-1032	100655-100656	_	
365-1033	100656-100657	_	
365-1034	100657-100658	_	
365-1035	100658-100659	_	
365-1036	100659-100660	_	
365-1037	100660-100661	_	
365-1038	100661-100662	_	
365-1039	100662-100663	_	
365-1040	100663-100664	_	
365-1041	100664-100665	_	
365-1042	100665-100666	_	
365-1043	100666-100667	_	
365-1044	100667-100668	_	
365-1045	100668-100669	_	
365-1046	100669-100670	_	
365-1047	100670-100671	_	
365-1048	100671-100672	_	
365-1049	100672-100673	_	
365-1050	100673-100674	_	
365-1051	100674-100675	_	
365-1052	100675-100676	_	
365-1053	100676-100677	_	
365-1054	100677-100678	_	
365-1055	100678-100679	_	
365-1056	100679-100680	_	
365-1057	100680-100681	_	
365-1058	100681-100682	_	
365-1059	100682-100683	_	
365-1060	100683-100684	_	
365-1061	100684-100685	_	
365-1062	100685-100686	_	
365-1063	100686-100687	_	
365-1064	100687-100688	_	
365-1065	100688-100689	_	
365-1066	100689-100690	_	
365-1067	100690-100691	_	
365-1068	100691-100692	_	
365-1069	100692-100693	_	
365-1070	100693-100694	_	
365-1071	100694-100695	_	
365-1072	100695-100696	_	
365-1073	100696-100697	_	
365-1074	100697-100698	_	
365-1075	100698-100699	_	
365-1076	100699-100700	_	
365-1077	100700-100701	_	
365-1078	100701-100702	_	
365-1079	100702-100703	_	
365-1080	100703-100704	_	
365-1081	100705-100706	.	
365-1082	100706-100707	|	
365-1083	100707-100708	|	
365-1084	100708-100709	|	
365-1085	100709-100710	|	
365-1086	100710-100711	|	
365-1087	100711-100712	|	
365-1088	100712-100713	|	
365-1089	100713-100714	|	
365-1090	100714-100715	|	
365-1091	100715-100716	|	
365-1092	100716-100717	|	
365-1093	100717-100718	|	
365-1094	100718-100719	.	
365-1095	100719-100720	.	
365-1096	100720-100721	.	
365-1097	100721-100722	.	
365-1098	100722-100723	.	
365-1099	100723-100724	.	
365-1100	100724-100725	.	
365-1101	100725-100726	.	
365-1102	100726-100727	.	
365-1103	100727-100728	.	
365-1104	100728-100729	.	
365-1105	100729-100730	.	
365-1106	100730-100731	.	
365-1107	100731-100732	.	
365-1108	100732-100733	.	
365-1109	100733-100734	.	
365-1110	100734-100735	.	
365-1111	100735-100736	.	
365-1112	100736-100737	.	
365-1113	100737-100738	.	
365-1114	100738-100739	.	
365-1115	100739-100740	.	
365-1116	100740-100741	.	
365-1117	100741-100742	.	
365-1118	100742-100743	.	
365-1119	100743-100744	.	
365-1120	100744-100745	.	
365-1121	100745-100746	.	
365-1122	100746-100747	.	
365-1123	100747-100748	.	
365-1124	100748-100749	.	
365-1125	100749-100750	.	
365-1126	100750-100751	.	
365-1127	100751-100752	.	
365-1128	100752-100753	.	
365-1129	100753-100754	.	
365-1130	100754-100755	.	
365-1131	100755-100756	.	
365-1132	100756-100757	.	
365-1133	100757-100758	.	
365-1134	100758-100759	.	
365-1135	100759-100760	.	
365-1136	100760-100761	.	
365-1137	100761-100762	.	
365-1138	100762-100763	.	
365-1139	100763-100764	.	
365-1140	100764-100765	.	
365-1141	100765-100766	.	
365-1142	100766-100767	.	
365-1143	100767-100768	.	
365-1144	100768-100769	.	
365-1145	100769-100770	.	
365-1146	100770-100771	.	
365-1147	100772-100774	35	
365-1148	100775-100776	|	
365-1149	100776-100777	|	
365-1150	100777-100778	|	
365-1151	100778-100779	|	
365-1152	100779-100780	|	
365-1153	100780-100781	|	
365-1154	100781-100782	|	
365-1155	100782-100783	|	
365-1156	100783-100784	|	
365-1157	100784-100785	|	
365-1158	100785-100786	|	
365-1159	100786-100787	|	
365-1160	100787-100788	|	
365-1161	100788-100789	|	
365-1162	100789-100790	|	
365-1163	100790-100791	|	
365-1164	100791-100792	|	
365-1165	100792-100793	|	
365-1166	100793-100794	|	
365-1167	100794-100795	|	
365-1168	100795-100796	.	
365-1169	100796-100797	.	
365-1170	100797-100798	.	
365-1171	100798-100799	.	
365-1172	100799-100800	|	
365-1173	100800-100801	|	
365-1174	100801-100802	.	
365-1175	100802-100803	.	
365-1176	100803-100804	.	
365-1177	100804-100805	.	
365-1178	100805-100806	.	
365-1179	100806-100807	.	
365-1180	100807-100808	.	
365-1181	100808-100809	.	
365-1182	100809-100810	.	
365-1183	100810-100811	.	
365-1184	100811-100812	.	
365-1185	100812-100813	.	
365-1186	100813-100814	.	
365-1187	100814-100815	.	
365-1188	100815-100816	.	
365-1189	100816-100817	.	
365-1190	100817-100818	.	
365-1191	100818-100819	.	
365-1192	100819-100820	.	
365-1193	100820-100821	.	
365-1194	100821-100822	.	
365-1195	100822-100823	.	
365-1196	100823-100824	.	
365-1197	100824-100825	.	
365-1198	100825-100826	.	
365-1199	100826-100827	.	
365-1200	100827-100828	.	
365-1201	100828-100829	.	
365-1202	100829-100830	.	
365-1203	100830-100831	.	
365-1204	100831-100832	.	
365-1205	100832-100833	.	
365-1206	100833-100834	.	
365-1207	100834-100835	.	
365-1208	100835-100836	.	
365-1209	100836-100837	.	
365-1210	100837-100838	.	
365-1211	100838-100839	.	
365-1212	100839-100840	.	
365-1213	100840-100841	.	
365-1214	100842-100843	|	
365-1215	100843-100844	|	
365-1216	100844-100845	|	
365-1217	100845-100846	|	
365-1218	100846-100847	|	
365-1219	100847-100848	|	
365-1220	100848-100849	|	
365-1221	100849-100850	|	
365-1222	100850-100851	|	
365-1223	100851-100852	|	
365-1224	100852-100853	|	
365-1225	100853-100854	|	
365-1226	100854-100855	|	
365-1227	100855-100856	|	
365-1228	100856-100857	|	
365-1229	100857-100858	|	
365-1230	100858-100859	|	
365-1231	100859-100860	|	
365-1232	100860-100861	|	
365-1233	100861-100862	|	
365-1234	100862-100863	|	
365-1235	100863-100864	|	
365-1236	100864-100865	|	
365-1237	100865-100866	|	
365-1238	100866-100867	|	
365-1239	100867-100868	|	
365-1240	100868-100869	|	
365-1241	100869-100870	|	
365-1242	100870-100871	|	
365-1243	100871-100872	|	
365-1244	100872-100873	|	
365-1245	100873-100874	|	
365-1246	100874-100875	|	
365-1247	100875-100876	|	
365-1248	100876-100877	|	
365-1249	100877-100878	|	
365-1250	100878-100879	|	
365-1251	100879-100880	|	
365-1252	100880-100881	|	
365-1253	100881-100882	|	
365-1254	100882-100883	|	
365-1255	100883-100884	|	
365-1256	100884-100885	|	
365-1257	100885-100886	|	
365-1258	100886-100887	|	
365-1259	100887-100888	|	
365-1260	100888-100889	|	
365-1261	100889-100890	|	
365-1262	100890-100891	|	
365-1263	100891-100892	|	
365-1264	100892-100893	|	
365-1265	100893-100894	|	
365-1266	100894-100895	|	
365-1267	100895-100896	|	
365-1268	100896-100897	|	
365-1269	100897-100898	|	
365-1270	100898-100899	|	
365-1271	100899-100900	|	
365-1272	100900-100901	|	
365-1273	100901-100902	|	
365-1274	100902-100903	|	
365-1275	100903-100904	|	
365-1276	100904-100905	|	
365-1277	100905-100906	|	
365-1278	100906-100907	|	
365-1279	100907-100908	|	
365-1280	100909-100913	Time	
365-1281	100913-100914	:	
365-1282	100915-100916	|	
365-1283	100916-100917	^	
365-1284	100917-100918	^	
365-1285	100918-100919	^	
365-1286	100919-100920	^	
365-1287	100920-100921	|	
365-1288	100921-100922	^	
365-1289	100922-100923	^	
365-1290	100923-100924	^	
365-1291	100924-100925	^	
365-1292	100925-100926	|	
365-1293	100926-100927	^	
365-1294	100927-100928	^	
365-1295	100928-100929	^	
365-1296	100929-100930	^	
365-1297	100930-100931	|	
365-1298	100931-100932	^	
365-1299	100932-100933	^	
365-1300	100933-100934	^	
365-1301	100934-100935	^	
365-1302	100935-100936	|	
365-1303	100936-100937	^	
365-1304	100937-100938	^	
365-1305	100938-100939	^	
365-1306	100939-100940	^	
365-1307	100940-100941	|	
365-1308	100941-100942	^	
365-1309	100942-100943	^	
365-1310	100943-100944	^	
365-1311	100944-100945	^	
365-1312	100945-100946	|	
365-1313	100946-100947	^	
365-1314	100947-100948	^	
365-1315	100948-100949	^	
365-1316	100949-100950	^	
365-1317	100950-100951	|	
365-1318	100951-100952	^	
365-1319	100952-100953	^	
365-1320	100953-100954	^	
365-1321	100954-100955	^	
365-1322	100955-100956	|	
365-1323	100956-100957	^	
365-1324	100957-100958	^	
365-1325	100958-100959	^	
365-1326	100959-100960	^	
365-1327	100960-100961	|	
365-1328	100961-100962	^	
365-1329	100962-100963	^	
365-1330	100963-100964	^	
365-1331	100964-100965	^	
365-1332	100965-100966	|	
365-1333	100966-100967	^	
365-1334	100967-100968	^	
365-1335	100968-100969	^	
365-1336	100969-100970	^	
365-1337	100970-100971	|	
365-1338	100971-100972	^	
365-1339	100972-100973	^	
365-1340	100973-100974	^	
365-1341	100974-100975	^	
365-1342	100975-100976	|	
365-1343	100976-100977	^	
365-1344	100977-100978	^	
365-1345	100978-100979	^	
365-1346	100979-100980	^	
365-1347	100980-100981	|	
365-1348	100982-100985	0.5	
365-1349	100986-100989	1.0	
365-1350	100990-100993	1.5	
365-1351	100994-100997	2.0	
365-1352	100998-101001	2.5	
365-1353	101002-101005	3.0	
365-1354	101006-101009	3.5	
365-1355	101010-101013	4.0	
365-1356	101014-101017	4.5	
365-1357	101018-101021	4.6	
365-1358	101022-101025	5.0	
365-1359	101026-101029	5.5	
365-1360	101030-101033	6.0	
365-1361	101034-101036	Do	
365-1362	101037-101042	these	
365-1363	101043-101056	optimizations	
365-1364	101057-101061	help	
365-1365	101062-101063	a	
365-1366	101064-101072	firewall	
365-1367	101073-101076	too	
365-1368	101077-101078	?	

#Text=Yes.
366-1	101079-101082	Yes	
366-2	101082-101083	.	

#Text=Take a look at the Network Tuning
#Text=and Performance Guide where we show our FreeBSD firewall passing as much as
#Text=10 gigabit of data through the machine with low latency and minimal CPU usage.
367-1	101084-101088	Take	
367-2	101089-101090	a	
367-3	101091-101095	look	
367-4	101096-101098	at	
367-5	101099-101102	the	
367-6	101103-101110	Network	
367-7	101111-101117	Tuning	
367-8	101118-101121	and	
367-9	101122-101133	Performance	
367-10	101134-101139	Guide	
367-11	101140-101145	where	
367-12	101146-101148	we	
367-13	101149-101153	show	
367-14	101154-101157	our	
367-15	101158-101165	FreeBSD	
367-16	101166-101174	firewall	
367-17	101175-101182	passing	
367-18	101183-101185	as	
367-19	101186-101190	much	
367-20	101191-101193	as	
367-21	101194-101196	10	
367-22	101197-101204	gigabit	
367-23	101205-101207	of	
367-24	101208-101212	data	
367-25	101213-101220	through	
367-26	101221-101224	the	
367-27	101225-101232	machine	
367-28	101233-101237	with	
367-29	101238-101241	low	
367-30	101242-101249	latency	
367-31	101250-101253	and	
367-32	101254-101261	minimal	
367-33	101262-101265	CPU	
367-34	101266-101271	usage	
367-35	101271-101272	.	
