#FORMAT=WebAnno TSV 3.3


#Text=How to Optimize SQL with EXPLAIN – Looker Help Center
#Text=User Guide
#Text=Getting Started
#Text=Help Center
#Text=Documentation
#Text=Community
#Text=Training
#Text=Certification
#Text=User Guide
#Text=Getting Started
#Text=Help Center
#Text=Documentation
#Text=Community
#Text=Training
#Text=Certification
#Text=Sign in
#Text=Looker Help Center
#Text=Exploring Data
#Text=How To
#Text=Articles in this section
#Text=How to Plot Dimensions on a Y-Axis
#Text=How to Forecast in Looker with Table Calculations
#Text=Getting the First Record with a Non-Null Value in a Pivot Column or Pivot Row
#Text=How to Find the Top Performers Over Time with Table Calculations
#Text=Interactive Map Visualizations (3.34+)
#Text=Best Practice: Optimize Query Performance
#Text=Rolling Average Using offset_list in Table Calculations
#Text=How to Sort by One or More Columns
#Text=Creating Reference Lines for Charts through the Visualization Editor
#Text=Looker-Built Google Sheets Import Script
#Text=See more
#Text=How to Optimize SQL with EXPLAIN
#Text=Maxie Corbin
#Text=June 01, 2020 20:58
#Text=Updated
#Text=Follow
#Text=How EXPLAIN Helps Optimize Queries
#Text=This article discusses the EXPLAIN command, which is not supported by all database dialects.
1-1	0-3	How	
1-2	4-6	to	
1-3	7-15	Optimize	
1-4	16-19	SQL	
1-5	20-24	with	
1-6	25-32	EXPLAIN	
1-7	33-34	–	
1-8	35-41	Looker	
1-9	42-46	Help	
1-10	47-53	Center	
1-11	54-58	User	
1-12	58-59	 	
1-13	59-64	Guide	
1-14	65-72	Getting	
1-15	72-73	 	
1-16	73-80	Started	
1-17	81-85	Help	
1-18	85-86	 	
1-19	86-92	Center	
1-20	93-106	Documentation	
1-21	107-116	Community	
1-22	117-125	Training	
1-23	126-139	Certification	
1-24	140-144	User	
1-25	144-145	 	
1-26	145-150	Guide	
1-27	151-158	Getting	
1-28	158-159	 	
1-29	159-166	Started	
1-30	167-171	Help	
1-31	171-172	 	
1-32	172-178	Center	
1-33	179-192	Documentation	
1-34	193-202	Community	
1-35	203-211	Training	
1-36	212-225	Certification	
1-37	226-230	Sign	
1-38	231-233	in	
1-39	234-240	Looker	
1-40	241-245	Help	
1-41	246-252	Center	
1-42	253-262	Exploring	
1-43	263-267	Data	
1-44	268-271	How	
1-45	272-274	To	
1-46	275-283	Articles	
1-47	284-286	in	
1-48	287-291	this	
1-49	292-299	section	
1-50	300-303	How	
1-51	304-306	to	
1-52	307-311	Plot	
1-53	312-322	Dimensions	
1-54	323-325	on	
1-55	326-327	a	
1-56	328-334	Y-Axis	
1-57	335-338	How	
1-58	339-341	to	
1-59	342-350	Forecast	
1-60	351-353	in	
1-61	354-360	Looker	
1-62	361-365	with	
1-63	366-371	Table	
1-64	372-384	Calculations	
1-65	385-392	Getting	
1-66	393-396	the	
1-67	397-402	First	
1-68	403-409	Record	
1-69	410-414	with	
1-70	415-416	a	
1-71	417-425	Non-Null	
1-72	426-431	Value	
1-73	432-434	in	
1-74	435-436	a	
1-75	437-442	Pivot	
1-76	443-449	Column	
1-77	450-452	or	
1-78	453-458	Pivot	
1-79	459-462	Row	
1-80	463-466	How	
1-81	467-469	to	
1-82	470-474	Find	
1-83	475-478	the	
1-84	479-482	Top	
1-85	483-493	Performers	
1-86	494-498	Over	
1-87	499-503	Time	
1-88	504-508	with	
1-89	509-514	Table	
1-90	515-527	Calculations	
1-91	528-539	Interactive	
1-92	540-543	Map	
1-93	544-558	Visualizations	
1-94	559-560	(	
1-95	560-564	3.34	
1-96	564-565	+	
1-97	565-566	)	
1-98	567-571	Best	
1-99	572-580	Practice	
1-100	580-581	:	
1-101	582-590	Optimize	
1-102	591-596	Query	
1-103	597-608	Performance	
1-104	609-616	Rolling	
1-105	617-624	Average	
1-106	625-630	Using	
1-107	631-642	offset_list	
1-108	643-645	in	
1-109	646-651	Table	
1-110	652-664	Calculations	
1-111	665-668	How	
1-112	669-671	to	
1-113	672-676	Sort	
1-114	677-679	by	
1-115	680-683	One	
1-116	684-686	or	
1-117	687-691	More	
1-118	692-699	Columns	
1-119	700-708	Creating	
1-120	709-718	Reference	
1-121	719-724	Lines	
1-122	725-728	for	
1-123	729-735	Charts	
1-124	736-743	through	
1-125	744-747	the	
1-126	748-761	Visualization	
1-127	762-768	Editor	
1-128	769-781	Looker-Built	
1-129	782-788	Google	
1-130	789-795	Sheets	
1-131	796-802	Import	
1-132	803-809	Script	
1-133	810-813	See	
1-134	814-818	more	
1-135	819-822	How	
1-136	823-825	to	
1-137	826-834	Optimize	
1-138	835-838	SQL	
1-139	839-843	with	
1-140	844-851	EXPLAIN	
1-141	852-857	Maxie	
1-142	858-864	Corbin	
1-143	865-869	June	
1-144	870-872	01	
1-145	872-873	,	
1-146	874-878	2020	
1-147	879-881	20	
1-148	881-882	:	
1-149	882-884	58	
1-150	885-892	Updated	
1-151	893-899	Follow	
1-152	900-903	How	
1-153	904-911	EXPLAIN	
1-154	912-917	Helps	
1-155	918-926	Optimize	
1-156	927-934	Queries	
1-157	935-939	This	
1-158	940-947	article	
1-159	948-957	discusses	
1-160	958-961	the	
1-161	962-969	EXPLAIN	
1-162	970-977	command	
1-163	977-978	,	
1-164	979-984	which	
1-165	985-987	is	
1-166	988-991	not	
1-167	992-1001	supported	
1-168	1002-1004	by	
1-169	1005-1008	all	
1-170	1009-1017	database	
1-171	1018-1026	dialects	
1-172	1026-1027	.	

#Text=Be sure to check the Feature Support section in the Looker Database Configuration Instructions specific to your database to confirm whether this function is supported by your database dialect.
2-1	1028-1030	Be	
2-2	1031-1035	sure	
2-3	1036-1038	to	
2-4	1039-1044	check	
2-5	1045-1048	the	
2-6	1049-1056	Feature	
2-7	1057-1064	Support	
2-8	1065-1072	section	
2-9	1073-1075	in	
2-10	1076-1079	the	
2-11	1080-1086	Looker	
2-12	1087-1095	Database	
2-13	1096-1109	Configuration	
2-14	1110-1122	Instructions	
2-15	1123-1131	specific	
2-16	1132-1134	to	
2-17	1135-1139	your	
2-18	1140-1148	database	
2-19	1149-1151	to	
2-20	1152-1159	confirm	
2-21	1160-1167	whether	
2-22	1168-1172	this	
2-23	1173-1181	function	
2-24	1182-1184	is	
2-25	1185-1194	supported	
2-26	1195-1197	by	
2-27	1198-1202	your	
2-28	1203-1211	database	
2-29	1212-1219	dialect	
2-30	1219-1220	.	

#Text=Very slow SQL queries are sometimes a fact of life for a database.
3-1	1221-1225	Very	
3-2	1226-1230	slow	
3-3	1231-1234	SQL	
3-4	1235-1242	queries	
3-5	1243-1246	are	
3-6	1247-1256	sometimes	
3-7	1257-1258	a	
3-8	1259-1263	fact	
3-9	1264-1266	of	
3-10	1267-1271	life	
3-11	1272-1275	for	
3-12	1276-1277	a	
3-13	1278-1286	database	
3-14	1286-1287	.	

#Text=The database could be running as fast as it can while those queries are transforming a lot of data, or the database could be performing certain tasks that are hard for SQL query planners to accomplish.
4-1	1288-1291	The	
4-2	1292-1300	database	
4-3	1301-1306	could	
4-4	1307-1309	be	
4-5	1310-1317	running	
4-6	1318-1320	as	
4-7	1321-1325	fast	
4-8	1326-1328	as	
4-9	1329-1331	it	
4-10	1332-1335	can	
4-11	1336-1341	while	
4-12	1342-1347	those	
4-13	1348-1355	queries	
4-14	1356-1359	are	
4-15	1360-1372	transforming	
4-16	1373-1374	a	
4-17	1375-1378	lot	
4-18	1379-1381	of	
4-19	1382-1386	data	
4-20	1386-1387	,	
4-21	1388-1390	or	
4-22	1391-1394	the	
4-23	1395-1403	database	
4-24	1404-1409	could	
4-25	1410-1412	be	
4-26	1413-1423	performing	
4-27	1424-1431	certain	
4-28	1432-1437	tasks	
4-29	1438-1442	that	
4-30	1443-1446	are	
4-31	1447-1451	hard	
4-32	1452-1455	for	
4-33	1456-1459	SQL	
4-34	1460-1465	query	
4-35	1466-1474	planners	
4-36	1475-1477	to	
4-37	1478-1488	accomplish	
4-38	1488-1489	.	

#Text=However, sometimes it's possible to optimize these queries by looking at the steps involved in completing the query, and using this information to redesign the query to be faster.
5-1	1490-1497	However	
5-2	1497-1498	,	
5-3	1499-1508	sometimes	
5-4	1509-1513	it's	
5-5	1514-1522	possible	
5-6	1523-1525	to	
5-7	1526-1534	optimize	
5-8	1535-1540	these	
5-9	1541-1548	queries	
5-10	1549-1551	by	
5-11	1552-1559	looking	
5-12	1560-1562	at	
5-13	1563-1566	the	
5-14	1567-1572	steps	
5-15	1573-1581	involved	
5-16	1582-1584	in	
5-17	1585-1595	completing	
5-18	1596-1599	the	
5-19	1600-1605	query	
5-20	1605-1606	,	
5-21	1607-1610	and	
5-22	1611-1616	using	
5-23	1617-1621	this	
5-24	1622-1633	information	
5-25	1634-1636	to	
5-26	1637-1645	redesign	
5-27	1646-1649	the	
5-28	1650-1655	query	
5-29	1656-1658	to	
5-30	1659-1661	be	
5-31	1662-1668	faster	
5-32	1668-1669	.	

#Text=In many SQL dialects, this can be achieved by using the EXPLAIN command.
6-1	1670-1672	In	
6-2	1673-1677	many	
6-3	1678-1681	SQL	
6-4	1682-1690	dialects	
6-5	1690-1691	,	
6-6	1692-1696	this	
6-7	1697-1700	can	
6-8	1701-1703	be	
6-9	1704-1712	achieved	
6-10	1713-1715	by	
6-11	1716-1721	using	
6-12	1722-1725	the	
6-13	1726-1733	EXPLAIN	
6-14	1734-1741	command	
6-15	1741-1742	.	

#Text=This article gives a very brief introduction to and an example of how to interpret the results of the EXPLAIN command in SQL Runner.
7-1	1743-1747	This	
7-2	1748-1755	article	
7-3	1756-1761	gives	
7-4	1762-1763	a	
7-5	1764-1768	very	
7-6	1769-1774	brief	
7-7	1775-1787	introduction	
7-8	1788-1790	to	
7-9	1791-1794	and	
7-10	1795-1797	an	
7-11	1798-1805	example	
7-12	1806-1808	of	
7-13	1809-1812	how	
7-14	1813-1815	to	
7-15	1816-1825	interpret	
7-16	1826-1829	the	
7-17	1830-1837	results	
7-18	1838-1840	of	
7-19	1841-1844	the	
7-20	1845-1852	EXPLAIN	
7-21	1853-1860	command	
7-22	1861-1863	in	
7-23	1864-1867	SQL	
7-24	1868-1874	Runner	
7-25	1874-1875	.	

#Text=Since every database dialect has a slightly different implementation of EXPLAIN, different dialects often return different information in different formats.
8-1	1876-1881	Since	
8-2	1882-1887	every	
8-3	1888-1896	database	
8-4	1897-1904	dialect	
8-5	1905-1908	has	
8-6	1909-1910	a	
8-7	1911-1919	slightly	
8-8	1920-1929	different	
8-9	1930-1944	implementation	
8-10	1945-1947	of	
8-11	1948-1955	EXPLAIN	
8-12	1955-1956	,	
8-13	1957-1966	different	
8-14	1967-1975	dialects	
8-15	1976-1981	often	
8-16	1982-1988	return	
8-17	1989-1998	different	
8-18	1999-2010	information	
8-19	2011-2013	in	
8-20	2014-2023	different	
8-21	2024-2031	formats	
8-22	2031-2032	.	

#Text=Make sure to reference the documentation for your database to find out how to interpret query plans for your dialect.
9-1	2033-2037	Make	
9-2	2038-2042	sure	
9-3	2043-2045	to	
9-4	2046-2055	reference	
9-5	2056-2059	the	
9-6	2060-2073	documentation	
9-7	2074-2077	for	
9-8	2078-2082	your	
9-9	2083-2091	database	
9-10	2092-2094	to	
9-11	2095-2099	find	
9-12	2100-2103	out	
9-13	2104-2107	how	
9-14	2108-2110	to	
9-15	2111-2120	interpret	
9-16	2121-2126	query	
9-17	2127-2132	plans	
9-18	2133-2136	for	
9-19	2137-2141	your	
9-20	2142-2149	dialect	
9-21	2149-2150	.	

#Text=Example
#Text=Here is an example of using the results from an EXPLAIN to optimize a query in MySQL.
10-1	2151-2158	Example	
10-2	2159-2163	Here	
10-3	2164-2166	is	
10-4	2167-2169	an	
10-5	2170-2177	example	
10-6	2178-2180	of	
10-7	2181-2186	using	
10-8	2187-2190	the	
10-9	2191-2198	results	
10-10	2199-2203	from	
10-11	2204-2206	an	
10-12	2207-2214	EXPLAIN	
10-13	2215-2217	to	
10-14	2218-2226	optimize	
10-15	2227-2228	a	
10-16	2229-2234	query	
10-17	2235-2237	in	
10-18	2238-2243	MySQL	
10-19	2243-2244	.	

#Text=Suppose we have a persistent derived table that we are using to generate company facts for each company in the database.
11-1	2245-2252	Suppose	
11-2	2253-2255	we	
11-3	2256-2260	have	
11-4	2261-2262	a	
11-5	2263-2273	persistent	
11-6	2274-2281	derived	
11-7	2282-2287	table	
11-8	2288-2292	that	
11-9	2293-2295	we	
11-10	2296-2299	are	
11-11	2300-2305	using	
11-12	2306-2308	to	
11-13	2309-2317	generate	
11-14	2318-2325	company	
11-15	2326-2331	facts	
11-16	2332-2335	for	
11-17	2336-2340	each	
11-18	2341-2348	company	
11-19	2349-2351	in	
11-20	2352-2355	the	
11-21	2356-2364	database	
11-22	2364-2365	.	

#Text=The LookML and SQL used to generate the derived table looks like this:
#Text=Note: permalink here is used as an ID for each company or person.
12-1	2366-2369	The	
12-2	2370-2376	LookML	
12-3	2377-2380	and	
12-4	2381-2384	SQL	
12-5	2385-2389	used	
12-6	2390-2392	to	
12-7	2393-2401	generate	
12-8	2402-2405	the	
12-9	2406-2413	derived	
12-10	2414-2419	table	
12-11	2420-2425	looks	
12-12	2426-2430	like	
12-13	2431-2435	this	
12-14	2435-2436	:	
12-15	2437-2441	Note	
12-16	2441-2442	:	
12-17	2443-2452	permalink	
12-18	2453-2457	here	
12-19	2458-2460	is	
12-20	2461-2465	used	
12-21	2466-2468	as	
12-22	2469-2471	an	
12-23	2472-2474	ID	
12-24	2475-2478	for	
12-25	2479-2483	each	
12-26	2484-2491	company	
12-27	2492-2494	or	
12-28	2495-2501	person	
12-29	2501-2502	.	

#Text=It's only unique in companies.
#Text=view: company_facts {
#Text=derived_table: {
#Text=persist_for: "24 hours"
#Text=# This derived table is built in MySQL
#Text=sql: SELECT
#Text=companies.permalink AS permalink,
#Text=companies.name AS name,
#Text=acquisition_by.acquisition_count AS acquisition_count,
#Text=acquired.acquired AS acquired,
#Text=acquired.price_amount AS acquisition_price,
#Text=COUNT(DISTINCT investments.investor_permalink) AS investor_count,
#Text=COUNT(DISTINCT investments.funding_id) AS lifetime_funding_rounds,
#Text=SUM(funding.raised_amount) AS lifetime_funding_raised,
#Text=-- List of all investors, whether they were a person or a company
#Text=GROUP_CONCAT(
#Text=(CASE
#Text=WHEN investor_people.investor_name IS NOT NULL THEN investor_people.investor_name
#Text=WHEN investor_people.investor_name IS NULL THEN investor_companies.name
#Text=END) SEPARATOR ", ") AS investor_name
#Text=FROM companies
#Text=LEFT JOIN funding
#Text=ON companies.permalink = funding.permalink
#Text=LEFT JOIN investments
#Text=ON funding.id = investments.funding_id
#Text=LEFT JOIN (
#Text=SELECT
#Text=people.permalink AS permalink,
#Text=CONCAT(people.first_name, ' ', people.last_name) AS investor_name
#Text=FROM people) AS investor_people
#Text=ON investments.investor_permalink = investor_people.permalink
#Text=LEFT JOIN companies AS investor_companies
#Text=ON investments.investor_permalink = investor_companies.permalink
#Text=-- Calculate the number of acquisitions made by each company
#Text=-- Join into main query
#Text=LEFT JOIN (
#Text=SELECT
#Text=acquisitions.acquired_by_permalink,
#Text=acquisitions.price_amount,
#Text=COUNT(*) AS acquisition_count
#Text=FROM acquisitions
#Text=GROUP BY acquisitions.acquired_by_permalink) AS acquisition_by
#Text=ON companies.permalink = acquisition_by.acquired_by_permalink
#Text=-- Calculate the number of times a company was acquired (should only ever be equal to or less than 1)
#Text=-- Join into main query
#Text=LEFT JOIN (
#Text=SELECT
#Text=acquisitions.acquired_permalink,
#Text=acquisitions.price_amount,
#Text=COUNT(*) AS acquired
#Text=FROM acquisitions
#Text=GROUP BY acquisitions.acquired_permalink) AS acquired
#Text=ON companies.permalink = acquired.acquired_permalink
#Text=GROUP BY companies.permalink
#Text=We have generated a model for this table, joined it on companies, and tested it out in an Explore.
13-1	2503-2507	It's	
13-2	2508-2512	only	
13-3	2513-2519	unique	
13-4	2520-2522	in	
13-5	2523-2532	companies	
13-6	2532-2533	.	
13-7	2534-2538	view	
13-8	2538-2539	:	
13-9	2540-2553	company_facts	
13-10	2554-2555	{	
13-11	2556-2569	derived_table	
13-12	2569-2570	:	
13-13	2571-2572	{	
13-14	2573-2584	persist_for	
13-15	2584-2585	:	
13-16	2586-2587	"	
13-17	2587-2589	24	
13-18	2590-2595	hours	
13-19	2595-2596	"	
13-20	2597-2598	#	
13-21	2599-2603	This	
13-22	2604-2611	derived	
13-23	2612-2617	table	
13-24	2618-2620	is	
13-25	2621-2626	built	
13-26	2627-2629	in	
13-27	2630-2635	MySQL	
13-28	2636-2639	sql	
13-29	2639-2640	:	
13-30	2641-2647	SELECT	
13-31	2648-2667	companies.permalink	
13-32	2668-2670	AS	
13-33	2671-2680	permalink	
13-34	2680-2681	,	
13-35	2682-2696	companies.name	
13-36	2697-2699	AS	
13-37	2700-2704	name	
13-38	2704-2705	,	
13-39	2706-2738	acquisition_by.acquisition_count	
13-40	2739-2741	AS	
13-41	2742-2759	acquisition_count	
13-42	2759-2760	,	
13-43	2761-2778	acquired.acquired	
13-44	2779-2781	AS	
13-45	2782-2790	acquired	
13-46	2790-2791	,	
13-47	2792-2813	acquired.price_amount	
13-48	2814-2816	AS	
13-49	2817-2834	acquisition_price	
13-50	2834-2835	,	
13-51	2836-2841	COUNT	
13-52	2841-2842	(	
13-53	2842-2850	DISTINCT	
13-54	2851-2881	investments.investor_permalink	
13-55	2881-2882	)	
13-56	2883-2885	AS	
13-57	2886-2900	investor_count	
13-58	2900-2901	,	
13-59	2902-2907	COUNT	
13-60	2907-2908	(	
13-61	2908-2916	DISTINCT	
13-62	2917-2939	investments.funding_id	
13-63	2939-2940	)	
13-64	2941-2943	AS	
13-65	2944-2967	lifetime_funding_rounds	
13-66	2967-2968	,	
13-67	2969-2972	SUM	
13-68	2972-2973	(	
13-69	2973-2994	funding.raised_amount	
13-70	2994-2995	)	
13-71	2996-2998	AS	
13-72	2999-3022	lifetime_funding_raised	
13-73	3022-3023	,	
13-74	3024-3025	-	
13-75	3025-3026	-	
13-76	3027-3031	List	
13-77	3032-3034	of	
13-78	3035-3038	all	
13-79	3039-3048	investors	
13-80	3048-3049	,	
13-81	3050-3057	whether	
13-82	3058-3062	they	
13-83	3063-3067	were	
13-84	3068-3069	a	
13-85	3070-3076	person	
13-86	3077-3079	or	
13-87	3080-3081	a	
13-88	3082-3089	company	
13-89	3090-3102	GROUP_CONCAT	
13-90	3102-3103	(	
13-91	3104-3105	(	
13-92	3105-3109	CASE	
13-93	3110-3114	WHEN	
13-94	3115-3144	investor_people.investor_name	
13-95	3145-3147	IS	
13-96	3148-3151	NOT	
13-97	3152-3156	NULL	
13-98	3157-3161	THEN	
13-99	3162-3191	investor_people.investor_name	
13-100	3192-3196	WHEN	
13-101	3197-3226	investor_people.investor_name	
13-102	3227-3229	IS	
13-103	3230-3234	NULL	
13-104	3235-3239	THEN	
13-105	3240-3263	investor_companies.name	
13-106	3264-3267	END	
13-107	3267-3268	)	
13-108	3269-3278	SEPARATOR	
13-109	3279-3280	"	
13-110	3280-3281	,	
13-111	3282-3283	"	
13-112	3283-3284	)	
13-113	3285-3287	AS	
13-114	3288-3301	investor_name	
13-115	3302-3306	FROM	
13-116	3307-3316	companies	
13-117	3317-3321	LEFT	
13-118	3322-3326	JOIN	
13-119	3327-3334	funding	
13-120	3335-3337	ON	
13-121	3338-3357	companies.permalink	
13-122	3358-3359	=	
13-123	3360-3377	funding.permalink	
13-124	3378-3382	LEFT	
13-125	3383-3387	JOIN	
13-126	3388-3399	investments	
13-127	3400-3402	ON	
13-128	3403-3413	funding.id	
13-129	3414-3415	=	
13-130	3416-3438	investments.funding_id	
13-131	3439-3443	LEFT	
13-132	3444-3448	JOIN	
13-133	3449-3450	(	
13-134	3451-3457	SELECT	
13-135	3458-3474	people.permalink	
13-136	3475-3477	AS	
13-137	3478-3487	permalink	
13-138	3487-3488	,	
13-139	3489-3495	CONCAT	
13-140	3495-3496	(	
13-141	3496-3513	people.first_name	
13-142	3513-3514	,	
13-143	3515-3516	'	
13-144	3517-3518	'	
13-145	3518-3519	,	
13-146	3520-3536	people.last_name	
13-147	3536-3537	)	
13-148	3538-3540	AS	
13-149	3541-3554	investor_name	
13-150	3555-3559	FROM	
13-151	3560-3566	people	
13-152	3566-3567	)	
13-153	3568-3570	AS	
13-154	3571-3586	investor_people	
13-155	3587-3589	ON	
13-156	3590-3620	investments.investor_permalink	
13-157	3621-3622	=	
13-158	3623-3648	investor_people.permalink	
13-159	3649-3653	LEFT	
13-160	3654-3658	JOIN	
13-161	3659-3668	companies	
13-162	3669-3671	AS	
13-163	3672-3690	investor_companies	
13-164	3691-3693	ON	
13-165	3694-3724	investments.investor_permalink	
13-166	3725-3726	=	
13-167	3727-3755	investor_companies.permalink	
13-168	3756-3757	-	
13-169	3757-3758	-	
13-170	3759-3768	Calculate	
13-171	3769-3772	the	
13-172	3773-3779	number	
13-173	3780-3782	of	
13-174	3783-3795	acquisitions	
13-175	3796-3800	made	
13-176	3801-3803	by	
13-177	3804-3808	each	
13-178	3809-3816	company	
13-179	3817-3818	-	
13-180	3818-3819	-	
13-181	3820-3824	Join	
13-182	3825-3829	into	
13-183	3830-3834	main	
13-184	3835-3840	query	
13-185	3841-3845	LEFT	
13-186	3846-3850	JOIN	
13-187	3851-3852	(	
13-188	3853-3859	SELECT	
13-189	3860-3894	acquisitions.acquired_by_permalink	
13-190	3894-3895	,	
13-191	3896-3921	acquisitions.price_amount	
13-192	3921-3922	,	
13-193	3923-3928	COUNT	
13-194	3928-3929	(	
13-195	3929-3930	*	
13-196	3930-3931	)	
13-197	3932-3934	AS	
13-198	3935-3952	acquisition_count	
13-199	3953-3957	FROM	
13-200	3958-3970	acquisitions	
13-201	3971-3976	GROUP	
13-202	3977-3979	BY	
13-203	3980-4014	acquisitions.acquired_by_permalink	
13-204	4014-4015	)	
13-205	4016-4018	AS	
13-206	4019-4033	acquisition_by	
13-207	4034-4036	ON	
13-208	4037-4056	companies.permalink	
13-209	4057-4058	=	
13-210	4059-4095	acquisition_by.acquired_by_permalink	
13-211	4096-4097	-	
13-212	4097-4098	-	
13-213	4099-4108	Calculate	
13-214	4109-4112	the	
13-215	4113-4119	number	
13-216	4120-4122	of	
13-217	4123-4128	times	
13-218	4129-4130	a	
13-219	4131-4138	company	
13-220	4139-4142	was	
13-221	4143-4151	acquired	
13-222	4152-4153	(	
13-223	4153-4159	should	
13-224	4160-4164	only	
13-225	4165-4169	ever	
13-226	4170-4172	be	
13-227	4173-4178	equal	
13-228	4179-4181	to	
13-229	4182-4184	or	
13-230	4185-4189	less	
13-231	4190-4194	than	
13-232	4195-4196	1	
13-233	4196-4197	)	
13-234	4198-4199	-	
13-235	4199-4200	-	
13-236	4201-4205	Join	
13-237	4206-4210	into	
13-238	4211-4215	main	
13-239	4216-4221	query	
13-240	4222-4226	LEFT	
13-241	4227-4231	JOIN	
13-242	4232-4233	(	
13-243	4234-4240	SELECT	
13-244	4241-4272	acquisitions.acquired_permalink	
13-245	4272-4273	,	
13-246	4274-4299	acquisitions.price_amount	
13-247	4299-4300	,	
13-248	4301-4306	COUNT	
13-249	4306-4307	(	
13-250	4307-4308	*	
13-251	4308-4309	)	
13-252	4310-4312	AS	
13-253	4313-4321	acquired	
13-254	4322-4326	FROM	
13-255	4327-4339	acquisitions	
13-256	4340-4345	GROUP	
13-257	4346-4348	BY	
13-258	4349-4380	acquisitions.acquired_permalink	
13-259	4380-4381	)	
13-260	4382-4384	AS	
13-261	4385-4393	acquired	
13-262	4394-4396	ON	
13-263	4397-4416	companies.permalink	
13-264	4417-4418	=	
13-265	4419-4446	acquired.acquired_permalink	
13-266	4447-4452	GROUP	
13-267	4453-4455	BY	
13-268	4456-4475	companies.permalink	
13-269	4476-4478	We	
13-270	4479-4483	have	
13-271	4484-4493	generated	
13-272	4494-4495	a	
13-273	4496-4501	model	
13-274	4502-4505	for	
13-275	4506-4510	this	
13-276	4511-4516	table	
13-277	4516-4517	,	
13-278	4518-4524	joined	
13-279	4525-4527	it	
13-280	4528-4530	on	
13-281	4531-4540	companies	
13-282	4540-4541	,	
13-283	4542-4545	and	
13-284	4546-4552	tested	
13-285	4553-4555	it	
13-286	4556-4559	out	
13-287	4560-4562	in	
13-288	4563-4565	an	
13-289	4566-4573	Explore	
13-290	4573-4574	.	

#Text=What we expected to be a short-running query, never finished, even after waiting 30 minutes.
#Text=-- use existing company_facts in crunchtrain_scratch.LR$DB1LLHE8FN9VSAQYNZMIC_company_facts
#Text=SELECT
#Text=companies.name AS `companies.name`,
#Text=company_facts.acquisition_count AS `company_facts.lifetime_acquisitions`,
#Text=company_facts.lifetime_funding_raised AS `company_facts.lifetime_funding_raised`,
#Text=company_facts.lifetime_funding_rounds AS `company_facts.lifetime_funding_rounds`
#Text=FROM companies
#Text=LEFT JOIN crunchtrain_scratch.LR$DB1LLHE8FN9VSAQYNZMIC_company_facts AS company_facts ON companies.permalink = company_facts.permalink
#Text=GROUP BY 1,2,3,4
#Text=ORDER BY companies.name
#Text=LIMIT 500
#Text=No one wants to have to wait that long for a query, so let's try to improve this.
14-1	4575-4579	What	
14-2	4580-4582	we	
14-3	4583-4591	expected	
14-4	4592-4594	to	
14-5	4595-4597	be	
14-6	4598-4599	a	
14-7	4600-4613	short-running	
14-8	4614-4619	query	
14-9	4619-4620	,	
14-10	4621-4626	never	
14-11	4627-4635	finished	
14-12	4635-4636	,	
14-13	4637-4641	even	
14-14	4642-4647	after	
14-15	4648-4655	waiting	
14-16	4656-4658	30	
14-17	4659-4666	minutes	
14-18	4666-4667	.	
14-19	4668-4669	-	
14-20	4669-4670	-	
14-21	4671-4674	use	
14-22	4675-4683	existing	
14-23	4684-4697	company_facts	
14-24	4698-4700	in	
14-25	4701-4723	crunchtrain_scratch.LR	
14-26	4723-4724	$	
14-27	4724-4759	DB1LLHE8FN9VSAQYNZMIC_company_facts	
14-28	4760-4766	SELECT	
14-29	4767-4781	companies.name	
14-30	4782-4784	AS	
14-31	4785-4786	`	
14-32	4786-4800	companies.name	
14-33	4800-4801	`	
14-34	4801-4802	,	
14-35	4803-4834	company_facts.acquisition_count	
14-36	4835-4837	AS	
14-37	4838-4839	`	
14-38	4839-4874	company_facts.lifetime_acquisitions	
14-39	4874-4875	`	
14-40	4875-4876	,	
14-41	4877-4914	company_facts.lifetime_funding_raised	
14-42	4915-4917	AS	
14-43	4918-4919	`	
14-44	4919-4956	company_facts.lifetime_funding_raised	
14-45	4956-4957	`	
14-46	4957-4958	,	
14-47	4959-4996	company_facts.lifetime_funding_rounds	
14-48	4997-4999	AS	
14-49	5000-5001	`	
14-50	5001-5038	company_facts.lifetime_funding_rounds	
14-51	5038-5039	`	
14-52	5040-5044	FROM	
14-53	5045-5054	companies	
14-54	5055-5059	LEFT	
14-55	5060-5064	JOIN	
14-56	5065-5087	crunchtrain_scratch.LR	
14-57	5087-5088	$	
14-58	5088-5123	DB1LLHE8FN9VSAQYNZMIC_company_facts	
14-59	5124-5126	AS	
14-60	5127-5140	company_facts	
14-61	5141-5143	ON	
14-62	5144-5163	companies.permalink	
14-63	5164-5165	=	
14-64	5166-5189	company_facts.permalink	
14-65	5190-5195	GROUP	
14-66	5196-5198	BY	
14-67	5199-5206	1,2,3,4	
14-68	5207-5212	ORDER	
14-69	5213-5215	BY	
14-70	5216-5230	companies.name	
14-71	5231-5236	LIMIT	
14-72	5237-5240	500	
14-73	5241-5243	No	
14-74	5244-5247	one	
14-75	5248-5253	wants	
14-76	5254-5256	to	
14-77	5257-5261	have	
14-78	5262-5264	to	
14-79	5265-5269	wait	
14-80	5270-5274	that	
14-81	5275-5279	long	
14-82	5280-5283	for	
14-83	5284-5285	a	
14-84	5286-5291	query	
14-85	5291-5292	,	
14-86	5293-5295	so	
14-87	5296-5301	let's	
14-88	5302-5305	try	
14-89	5306-5308	to	
14-90	5309-5316	improve	
14-91	5317-5321	this	
14-92	5321-5322	.	

#Text=We'll run an EXPLAIN on this query and figure out what is going on.
15-1	5323-5328	We'll	
15-2	5329-5332	run	
15-3	5333-5335	an	
15-4	5336-5343	EXPLAIN	
15-5	5344-5346	on	
15-6	5347-5351	this	
15-7	5352-5357	query	
15-8	5358-5361	and	
15-9	5362-5368	figure	
15-10	5369-5372	out	
15-11	5373-5377	what	
15-12	5378-5380	is	
15-13	5381-5386	going	
15-14	5387-5389	on	
15-15	5389-5390	.	

#Text=Looker provides a very convenient Explain in SQL Runner button under the SQL tab in the Explore.
16-1	5391-5397	Looker	
16-2	5398-5406	provides	
16-3	5407-5408	a	
16-4	5409-5413	very	
16-5	5414-5424	convenient	
16-6	5425-5432	Explain	
16-7	5433-5435	in	
16-8	5436-5439	SQL	
16-9	5440-5446	Runner	
16-10	5447-5453	button	
16-11	5454-5459	under	
16-12	5460-5463	the	
16-13	5464-5467	SQL	
16-14	5468-5471	tab	
16-15	5472-5474	in	
16-16	5475-5478	the	
16-17	5479-5486	Explore	
16-18	5486-5487	.	

#Text=When we click that button, the query is loaded into SQL Runner inside an EXPLAIN function.
17-1	5488-5492	When	
17-2	5493-5495	we	
17-3	5496-5501	click	
17-4	5502-5506	that	
17-5	5507-5513	button	
17-6	5513-5514	,	
17-7	5515-5518	the	
17-8	5519-5524	query	
17-9	5525-5527	is	
17-10	5528-5534	loaded	
17-11	5535-5539	into	
17-12	5540-5543	SQL	
17-13	5544-5550	Runner	
17-14	5551-5557	inside	
17-15	5558-5560	an	
17-16	5561-5568	EXPLAIN	
17-17	5569-5577	function	
17-18	5577-5578	.	

#Text=Once we click on Run in the SQL Runner window, Looker displays a short query plan with some key pieces of information:
#Text=The Important Bits
#Text=The type column tells us what kind of table scan was done on that step.
18-1	5579-5583	Once	
18-2	5584-5586	we	
18-3	5587-5592	click	
18-4	5593-5595	on	
18-5	5596-5599	Run	
18-6	5600-5602	in	
18-7	5603-5606	the	
18-8	5607-5610	SQL	
18-9	5611-5617	Runner	
18-10	5618-5624	window	
18-11	5624-5625	,	
18-12	5626-5632	Looker	
18-13	5633-5641	displays	
18-14	5642-5643	a	
18-15	5644-5649	short	
18-16	5650-5655	query	
18-17	5656-5660	plan	
18-18	5661-5665	with	
18-19	5666-5670	some	
18-20	5671-5674	key	
18-21	5675-5681	pieces	
18-22	5682-5684	of	
18-23	5685-5696	information	
18-24	5696-5697	:	
18-25	5698-5701	The	
18-26	5702-5711	Important	
18-27	5712-5716	Bits	
18-28	5717-5720	The	
18-29	5721-5725	type	
18-30	5726-5732	column	
18-31	5733-5738	tells	
18-32	5739-5741	us	
18-33	5742-5746	what	
18-34	5747-5751	kind	
18-35	5752-5754	of	
18-36	5755-5760	table	
18-37	5761-5765	scan	
18-38	5766-5769	was	
18-39	5770-5774	done	
18-40	5775-5777	on	
18-41	5778-5782	that	
18-42	5783-5787	step	
18-43	5787-5788	.	

#Text=The key difference in the results is between ALL and index.
19-1	5789-5792	The	
19-2	5793-5796	key	
19-3	5797-5807	difference	
19-4	5808-5810	in	
19-5	5811-5814	the	
19-6	5815-5822	results	
19-7	5823-5825	is	
19-8	5826-5833	between	
19-9	5834-5837	ALL	
19-10	5838-5841	and	
19-11	5842-5847	index	
19-12	5847-5848	.	

#Text=This tell us that the database is using an index scan to find the rows we care about in companies, but it's doing a full table scan figuring out what we need out of company_facts, our PDT.
20-1	5849-5853	This	
20-2	5854-5858	tell	
20-3	5859-5861	us	
20-4	5862-5866	that	
20-5	5867-5870	the	
20-6	5871-5879	database	
20-7	5880-5882	is	
20-8	5883-5888	using	
20-9	5889-5891	an	
20-10	5892-5897	index	
20-11	5898-5902	scan	
20-12	5903-5905	to	
20-13	5906-5910	find	
20-14	5911-5914	the	
20-15	5915-5919	rows	
20-16	5920-5922	we	
20-17	5923-5927	care	
20-18	5928-5933	about	
20-19	5934-5936	in	
20-20	5937-5946	companies	
20-21	5946-5947	,	
20-22	5948-5951	but	
20-23	5952-5956	it's	
20-24	5957-5962	doing	
20-25	5963-5964	a	
20-26	5965-5969	full	
20-27	5970-5975	table	
20-28	5976-5980	scan	
20-29	5981-5989	figuring	
20-30	5990-5993	out	
20-31	5994-5998	what	
20-32	5999-6001	we	
20-33	6002-6006	need	
20-34	6007-6010	out	
20-35	6011-6013	of	
20-36	6014-6027	company_facts	
20-37	6027-6028	,	
20-38	6029-6032	our	
20-39	6033-6036	PDT	
20-40	6036-6037	.	

#Text=The rows column tells us how many rows were generated in this step and passed along to the next step as an intermediary result.
21-1	6038-6041	The	
21-2	6042-6046	rows	
21-3	6047-6053	column	
21-4	6054-6059	tells	
21-5	6060-6062	us	
21-6	6063-6066	how	
21-7	6067-6071	many	
21-8	6072-6076	rows	
21-9	6077-6081	were	
21-10	6082-6091	generated	
21-11	6092-6094	in	
21-12	6095-6099	this	
21-13	6100-6104	step	
21-14	6105-6108	and	
21-15	6109-6115	passed	
21-16	6116-6121	along	
21-17	6122-6124	to	
21-18	6125-6128	the	
21-19	6129-6133	next	
21-20	6134-6138	step	
21-21	6139-6141	as	
21-22	6142-6144	an	
21-23	6145-6157	intermediary	
21-24	6158-6164	result	
21-25	6164-6165	.	

#Text=The key thing to look for here is "throw away" rows, which are rows that were generated in one step and then ignored in the next step.
22-1	6166-6169	The	
22-2	6170-6173	key	
22-3	6174-6179	thing	
22-4	6180-6182	to	
22-5	6183-6187	look	
22-6	6188-6191	for	
22-7	6192-6196	here	
22-8	6197-6199	is	
22-9	6200-6201	"	
22-10	6201-6206	throw	
22-11	6207-6211	away	
22-12	6211-6212	"	
22-13	6213-6217	rows	
22-14	6217-6218	,	
22-15	6219-6224	which	
22-16	6225-6228	are	
22-17	6229-6233	rows	
22-18	6234-6238	that	
22-19	6239-6243	were	
22-20	6244-6253	generated	
22-21	6254-6256	in	
22-22	6257-6260	one	
22-23	6261-6265	step	
22-24	6266-6269	and	
22-25	6270-6274	then	
22-26	6275-6282	ignored	
22-27	6283-6285	in	
22-28	6286-6289	the	
22-29	6290-6294	next	
22-30	6295-6299	step	
22-31	6299-6300	.	

#Text=The Extra column tells us a little bit about other special conditions that might be at work here.
23-1	6301-6304	The	
23-2	6305-6310	Extra	
23-3	6311-6317	column	
23-4	6318-6323	tells	
23-5	6324-6326	us	
23-6	6327-6328	a	
23-7	6329-6335	little	
23-8	6336-6339	bit	
23-9	6340-6345	about	
23-10	6346-6351	other	
23-11	6352-6359	special	
23-12	6360-6370	conditions	
23-13	6371-6375	that	
23-14	6376-6381	might	
23-15	6382-6384	be	
23-16	6385-6387	at	
23-17	6388-6392	work	
23-18	6393-6397	here	
23-19	6397-6398	.	

#Text=In this case, we see that the table scan on companies used an index and was sorted, but the scan on company_facts did not.
24-1	6399-6401	In	
24-2	6402-6406	this	
24-3	6407-6411	case	
24-4	6411-6412	,	
24-5	6413-6415	we	
24-6	6416-6419	see	
24-7	6420-6424	that	
24-8	6425-6428	the	
24-9	6429-6434	table	
24-10	6435-6439	scan	
24-11	6440-6442	on	
24-12	6443-6452	companies	
24-13	6453-6457	used	
24-14	6458-6460	an	
24-15	6461-6466	index	
24-16	6467-6470	and	
24-17	6471-6474	was	
24-18	6475-6481	sorted	
24-19	6481-6482	,	
24-20	6483-6486	but	
24-21	6487-6490	the	
24-22	6491-6495	scan	
24-23	6496-6498	on	
24-24	6499-6512	company_facts	
24-25	6513-6516	did	
24-26	6517-6520	not	
24-27	6520-6521	.	

#Text=We also see that a nested loop was used to join this table to companies.
25-1	6522-6524	We	
25-2	6525-6529	also	
25-3	6530-6533	see	
25-4	6534-6538	that	
25-5	6539-6540	a	
25-6	6541-6547	nested	
25-7	6548-6552	loop	
25-8	6553-6556	was	
25-9	6557-6561	used	
25-10	6562-6564	to	
25-11	6565-6569	join	
25-12	6570-6574	this	
25-13	6575-6580	table	
25-14	6581-6583	to	
25-15	6584-6593	companies	
25-16	6593-6594	.	

#Text=From this information, I've surmised that I'm missing an index on my derived table, which might be why this query is running so slowly.
26-1	6595-6599	From	
26-2	6600-6604	this	
26-3	6605-6616	information	
26-4	6616-6617	,	
26-5	6618-6622	I've	
26-6	6623-6631	surmised	
26-7	6632-6636	that	
26-8	6637-6640	I'm	
26-9	6641-6648	missing	
26-10	6649-6651	an	
26-11	6652-6657	index	
26-12	6658-6660	on	
26-13	6661-6663	my	
26-14	6664-6671	derived	
26-15	6672-6677	table	
26-16	6677-6678	,	
26-17	6679-6684	which	
26-18	6685-6690	might	
26-19	6691-6693	be	
26-20	6694-6697	why	
26-21	6698-6702	this	
26-22	6703-6708	query	
26-23	6709-6711	is	
26-24	6712-6719	running	
26-25	6720-6722	so	
26-26	6723-6729	slowly	
26-27	6729-6730	.	

#Text=Joining without an index is forcing the query to loop over all the possible combinations companies.permalink and company_facts.permalink.
27-1	6731-6738	Joining	
27-2	6739-6746	without	
27-3	6747-6749	an	
27-4	6750-6755	index	
27-5	6756-6758	is	
27-6	6759-6766	forcing	
27-7	6767-6770	the	
27-8	6771-6776	query	
27-9	6777-6779	to	
27-10	6780-6784	loop	
27-11	6785-6789	over	
27-12	6790-6793	all	
27-13	6794-6797	the	
27-14	6798-6806	possible	
27-15	6807-6819	combinations	
27-16	6820-6839	companies.permalink	
27-17	6840-6843	and	
27-18	6844-6867	company_facts.permalink	
27-19	6867-6868	.	

#Text=We can see this because the query planner told us it was using a nested loop in the Extra column.
28-1	6869-6871	We	
28-2	6872-6875	can	
28-3	6876-6879	see	
28-4	6880-6884	this	
28-5	6885-6892	because	
28-6	6893-6896	the	
28-7	6897-6902	query	
28-8	6903-6910	planner	
28-9	6911-6915	told	
28-10	6916-6918	us	
28-11	6919-6921	it	
28-12	6922-6925	was	
28-13	6926-6931	using	
28-14	6932-6933	a	
28-15	6934-6940	nested	
28-16	6941-6945	loop	
28-17	6946-6948	in	
28-18	6949-6952	the	
28-19	6953-6958	Extra	
28-20	6959-6965	column	
28-21	6965-6966	.	

#Text=Since each step in the query planner takes up 158,772 and 189,108 rows respectively, that means that the database has to compare 158,772 * 189,108 = 30,025,055,376 possible matches.
29-1	6967-6972	Since	
29-2	6973-6977	each	
29-3	6978-6982	step	
29-4	6983-6985	in	
29-5	6986-6989	the	
29-6	6990-6995	query	
29-7	6996-7003	planner	
29-8	7004-7009	takes	
29-9	7010-7012	up	
29-10	7013-7020	158,772	
29-11	7021-7024	and	
29-12	7025-7032	189,108	
29-13	7033-7037	rows	
29-14	7038-7050	respectively	
29-15	7050-7051	,	
29-16	7052-7056	that	
29-17	7057-7062	means	
29-18	7063-7067	that	
29-19	7068-7071	the	
29-20	7072-7080	database	
29-21	7081-7084	has	
29-22	7085-7087	to	
29-23	7088-7095	compare	
29-24	7096-7103	158,772	
29-25	7104-7105	*	
29-26	7106-7113	189,108	
29-27	7114-7115	=	
29-28	7116-7130	30,025,055,376	
29-29	7131-7139	possible	
29-30	7140-7147	matches	
29-31	7147-7148	.	

#Text=No wonder it never finished!
30-1	7149-7151	No	
30-2	7152-7158	wonder	
30-3	7159-7161	it	
30-4	7162-7167	never	
30-5	7168-7176	finished	
30-6	7176-7177	!	

#Text=How to Fix It
#Text=Luckily, this is a pretty easy problem to get past.
31-1	7178-7181	How	
31-2	7182-7184	to	
31-3	7185-7188	Fix	
31-4	7189-7191	It	
31-5	7192-7199	Luckily	
31-6	7199-7200	,	
31-7	7201-7205	this	
31-8	7206-7208	is	
31-9	7209-7210	a	
31-10	7211-7217	pretty	
31-11	7218-7222	easy	
31-12	7223-7230	problem	
31-13	7231-7233	to	
31-14	7234-7237	get	
31-15	7238-7242	past	
31-16	7242-7243	.	

#Text=We just need to add an index to my derived table.
32-1	7244-7246	We	
32-2	7247-7251	just	
32-3	7252-7256	need	
32-4	7257-7259	to	
32-5	7260-7263	add	
32-6	7264-7266	an	
32-7	7267-7272	index	
32-8	7273-7275	to	
32-9	7276-7278	my	
32-10	7279-7286	derived	
32-11	7287-7292	table	
32-12	7292-7293	.	

#Text=I can do that like this:
#Text=view: company_facts {
#Text=derived_table: {
#Text=indexes: ["permalink"]
#Text=persist_for: "1 minute"
#Text=sql: SELECT
#Text=etc...
33-1	7294-7295	I	
33-2	7296-7299	can	
33-3	7300-7302	do	
33-4	7303-7307	that	
33-5	7308-7312	like	
33-6	7313-7317	this	
33-7	7317-7318	:	
33-8	7319-7323	view	
33-9	7323-7324	:	
33-10	7325-7338	company_facts	
33-11	7339-7340	{	
33-12	7341-7354	derived_table	
33-13	7354-7355	:	
33-14	7356-7357	{	
33-15	7358-7365	indexes	
33-16	7365-7366	:	
33-17	7367-7368	[	
33-18	7368-7369	"	
33-19	7369-7378	permalink	
33-20	7378-7379	"	
33-21	7379-7380	]	
33-22	7381-7392	persist_for	
33-23	7392-7393	:	
33-24	7394-7395	"	
33-25	7395-7396	1	
33-26	7397-7403	minute	
33-27	7403-7404	"	
33-28	7405-7408	sql	
33-29	7408-7409	:	
33-30	7410-7416	SELECT	
33-31	7417-7420	etc	
33-32	7420-7421	.	
33-33	7421-7422	.	
33-34	7422-7423	.	

#Text=Once I do that, I can refresh my Explore, rebuild the derived table, and run it again:
#Text=Wow.
34-1	7424-7428	Once	
34-2	7429-7430	I	
34-3	7431-7433	do	
34-4	7434-7438	that	
34-5	7438-7439	,	
34-6	7440-7441	I	
34-7	7442-7445	can	
34-8	7446-7453	refresh	
34-9	7454-7456	my	
34-10	7457-7464	Explore	
34-11	7464-7465	,	
34-12	7466-7473	rebuild	
34-13	7474-7477	the	
34-14	7478-7485	derived	
34-15	7486-7491	table	
34-16	7491-7492	,	
34-17	7493-7496	and	
34-18	7497-7500	run	
34-19	7501-7503	it	
34-20	7504-7509	again	
34-21	7509-7510	:	
34-22	7511-7514	Wow	
34-23	7514-7515	.	

#Text=That's a huge jump in efficiency!
35-1	7516-7522	That's	
35-2	7523-7524	a	
35-3	7525-7529	huge	
35-4	7530-7534	jump	
35-5	7535-7537	in	
35-6	7538-7548	efficiency	
35-7	7548-7549	!	

#Text=What changed?
36-1	7550-7554	What	
36-2	7555-7562	changed	
36-3	7562-7563	?	

#Text=As expected, the company_facts step in the query plan has changed and no longer says ALL under type, which means we've eliminated the full table scan.
37-1	7564-7566	As	
37-2	7567-7575	expected	
37-3	7575-7576	,	
37-4	7577-7580	the	
37-5	7581-7594	company_facts	
37-6	7595-7599	step	
37-7	7600-7602	in	
37-8	7603-7606	the	
37-9	7607-7612	query	
37-10	7613-7617	plan	
37-11	7618-7621	has	
37-12	7622-7629	changed	
37-13	7630-7633	and	
37-14	7634-7636	no	
37-15	7637-7643	longer	
37-16	7644-7648	says	
37-17	7649-7652	ALL	
37-18	7653-7658	under	
37-19	7659-7663	type	
37-20	7663-7664	,	
37-21	7665-7670	which	
37-22	7671-7676	means	
37-23	7677-7682	we've	
37-24	7683-7693	eliminated	
37-25	7694-7697	the	
37-26	7698-7702	full	
37-27	7703-7708	table	
37-28	7709-7713	scan	
37-29	7713-7714	.	

#Text=But the most important change is in the rows column, where we see that the value for company_facts has dropped from 189,108 to 1.
38-1	7715-7718	But	
38-2	7719-7722	the	
38-3	7723-7727	most	
38-4	7728-7737	important	
38-5	7738-7744	change	
38-6	7745-7747	is	
38-7	7748-7750	in	
38-8	7751-7754	the	
38-9	7755-7759	rows	
38-10	7760-7766	column	
38-11	7766-7767	,	
38-12	7768-7773	where	
38-13	7774-7776	we	
38-14	7777-7780	see	
38-15	7781-7785	that	
38-16	7786-7789	the	
38-17	7790-7795	value	
38-18	7796-7799	for	
38-19	7800-7813	company_facts	
38-20	7814-7817	has	
38-21	7818-7825	dropped	
38-22	7826-7830	from	
38-23	7831-7838	189,108	
38-24	7839-7841	to	
38-25	7842-7843	1	
38-26	7843-7844	.	

#Text=This means, for each value of permalink, only 158,772 * 1 = 158,772 comparisons need to be performed, which is over 189,108 fewer comparisons total.
39-1	7845-7849	This	
39-2	7850-7855	means	
39-3	7855-7856	,	
39-4	7857-7860	for	
39-5	7861-7865	each	
39-6	7866-7871	value	
39-7	7872-7874	of	
39-8	7875-7884	permalink	
39-9	7884-7885	,	
39-10	7886-7890	only	
39-11	7891-7898	158,772	
39-12	7899-7900	*	
39-13	7901-7902	1	
39-14	7903-7904	=	
39-15	7905-7912	158,772	
39-16	7913-7924	comparisons	
39-17	7925-7929	need	
39-18	7930-7932	to	
39-19	7933-7935	be	
39-20	7936-7945	performed	
39-21	7945-7946	,	
39-22	7947-7952	which	
39-23	7953-7955	is	
39-24	7956-7960	over	
39-25	7961-7968	189,108	
39-26	7969-7974	fewer	
39-27	7975-7986	comparisons	
39-28	7987-7992	total	
39-29	7992-7993	.	

#Text=Since this is the only really major operation in this query, just adding an index to my PDT made this query faster by a factor of about 189,000.
40-1	7994-7999	Since	
40-2	8000-8004	this	
40-3	8005-8007	is	
40-4	8008-8011	the	
40-5	8012-8016	only	
40-6	8017-8023	really	
40-7	8024-8029	major	
40-8	8030-8039	operation	
40-9	8040-8042	in	
40-10	8043-8047	this	
40-11	8048-8053	query	
40-12	8053-8054	,	
40-13	8055-8059	just	
40-14	8060-8066	adding	
40-15	8067-8069	an	
40-16	8070-8075	index	
40-17	8076-8078	to	
40-18	8079-8081	my	
40-19	8082-8085	PDT	
40-20	8086-8090	made	
40-21	8091-8095	this	
40-22	8096-8101	query	
40-23	8102-8108	faster	
40-24	8109-8111	by	
40-25	8112-8113	a	
40-26	8114-8120	factor	
40-27	8121-8123	of	
40-28	8124-8129	about	
40-29	8130-8137	189,000	
40-30	8137-8138	.	

#Text=Other Resources
#Text=There are great resources that can guide you through interpreting and using EXPLAIN results.
41-1	8139-8144	Other	
41-2	8145-8154	Resources	
41-3	8155-8160	There	
41-4	8161-8164	are	
41-5	8165-8170	great	
41-6	8171-8180	resources	
41-7	8181-8185	that	
41-8	8186-8189	can	
41-9	8190-8195	guide	
41-10	8196-8199	you	
41-11	8200-8207	through	
41-12	8208-8220	interpreting	
41-13	8221-8224	and	
41-14	8225-8230	using	
41-15	8231-8238	EXPLAIN	
41-16	8239-8246	results	
41-17	8246-8247	.	

#Text=These general resources about using EXPLAIN for SQL are typically dialect-specific.
42-1	8248-8253	These	
42-2	8254-8261	general	
42-3	8262-8271	resources	
42-4	8272-8277	about	
42-5	8278-8283	using	
42-6	8284-8291	EXPLAIN	
42-7	8292-8295	for	
42-8	8296-8299	SQL	
42-9	8300-8303	are	
42-10	8304-8313	typically	
42-11	8314-8330	dialect-specific	
42-12	8330-8331	.	

#Text=Here are a few that are very helpful:
#Text=Oracle's
#Text=Database Performance Tuning Guide
#Text=Severalnines' Using Explain to improve SQL Queries (focuses on MySQL)
#Text=Redshift's EXPLAIN documentation
#Text=The great and very general guide on Use the Index, Luke
#Text=Also, consider reading this related Help Center article, Best Practice: Optimize Looker Performance.
43-1	8332-8336	Here	
43-2	8337-8340	are	
43-3	8341-8342	a	
43-4	8343-8346	few	
43-5	8347-8351	that	
43-6	8352-8355	are	
43-7	8356-8360	very	
43-8	8361-8368	helpful	
43-9	8368-8369	:	
43-10	8370-8378	Oracle's	
43-11	8379-8387	Database	
43-12	8388-8399	Performance	
43-13	8400-8406	Tuning	
43-14	8407-8412	Guide	
43-15	8413-8425	Severalnines	
43-16	8425-8426	'	
43-17	8427-8432	Using	
43-18	8433-8440	Explain	
43-19	8441-8443	to	
43-20	8444-8451	improve	
43-21	8452-8455	SQL	
43-22	8456-8463	Queries	
43-23	8464-8465	(	
43-24	8465-8472	focuses	
43-25	8473-8475	on	
43-26	8476-8481	MySQL	
43-27	8481-8482	)	
43-28	8483-8493	Redshift's	
43-29	8494-8501	EXPLAIN	
43-30	8502-8515	documentation	
43-31	8516-8519	The	
43-32	8520-8525	great	
43-33	8526-8529	and	
43-34	8530-8534	very	
43-35	8535-8542	general	
43-36	8543-8548	guide	
43-37	8549-8551	on	
43-38	8552-8555	Use	
43-39	8556-8559	the	
43-40	8560-8565	Index	
43-41	8565-8566	,	
43-42	8567-8571	Luke	
43-43	8572-8576	Also	
43-44	8576-8577	,	
43-45	8578-8586	consider	
43-46	8587-8594	reading	
43-47	8595-8599	this	
43-48	8600-8607	related	
43-49	8608-8612	Help	
43-50	8613-8619	Center	
43-51	8620-8627	article	
43-52	8627-8628	,	
43-53	8629-8633	Best	
43-54	8634-8642	Practice	
43-55	8642-8643	:	
43-56	8644-8652	Optimize	
43-57	8653-8659	Looker	
43-58	8660-8671	Performance	
43-59	8671-8672	.	

#Text=Facebook
#Text=Twitter
#Text=LinkedIn
#Text=Was this article helpful?
44-1	8673-8681	Facebook	
44-2	8682-8689	Twitter	
44-3	8690-8698	LinkedIn	
44-4	8699-8702	Was	
44-5	8703-8707	this	
44-6	8708-8715	article	
44-7	8716-8723	helpful	
44-8	8723-8724	?	

#Text=1 out of 1 found this helpful
#Text=Have more questions?
45-1	8725-8726	1	
45-2	8727-8730	out	
45-3	8731-8733	of	
45-4	8734-8735	1	
45-5	8736-8741	found	
45-6	8742-8746	this	
45-7	8747-8754	helpful	
45-8	8755-8759	Have	
45-9	8760-8764	more	
45-10	8765-8774	questions	
45-11	8774-8775	?	

#Text=Submit a request
#Text=Return to top
#Text=Related articles
#Text=Identifying and Building PDTs for Performance Optimization
#Text=More powerful data drilling
#Text=Custom Drilling Using HTML and Link
#Text=A Simple Explanation of Symmetric Aggregates or 'Why On Earth Does My SQL Look Like That?'
46-1	8776-8782	Submit	
46-2	8783-8784	a	
46-3	8785-8792	request	
46-4	8793-8799	Return	
46-5	8800-8802	to	
46-6	8803-8806	top	
46-7	8807-8814	Related	
46-8	8815-8823	articles	
46-9	8824-8835	Identifying	
46-10	8836-8839	and	
46-11	8840-8848	Building	
46-12	8849-8853	PDTs	
46-13	8854-8857	for	
46-14	8858-8869	Performance	
46-15	8870-8882	Optimization	
46-16	8883-8887	More	
46-17	8888-8896	powerful	
46-18	8897-8901	data	
46-19	8902-8910	drilling	
46-20	8911-8917	Custom	
46-21	8918-8926	Drilling	
46-22	8927-8932	Using	
46-23	8933-8937	HTML	
46-24	8938-8941	and	
46-25	8942-8946	Link	
46-26	8947-8948	A	
46-27	8949-8955	Simple	
46-28	8956-8967	Explanation	
46-29	8968-8970	of	
46-30	8971-8980	Symmetric	
46-31	8981-8991	Aggregates	
46-32	8992-8994	or	
46-33	8995-8996	'	
46-34	8996-8999	Why	
46-35	9000-9002	On	
46-36	9003-9008	Earth	
46-37	9009-9013	Does	
46-38	9014-9016	My	
46-39	9017-9020	SQL	
46-40	9021-9025	Look	
46-41	9026-9030	Like	
46-42	9031-9035	That	
46-43	9035-9036	?	
46-44	9036-9037	'	

#Text=Aggregate Awareness using _in_query
#Text=Looker Data Sciences, Inc.Privacy | Terms | Cookies
47-1	9038-9047	Aggregate	
47-2	9048-9057	Awareness	
47-3	9058-9063	using	
47-4	9064-9065	_	
47-5	9065-9073	in_query	
47-6	9074-9080	Looker	
47-7	9081-9085	Data	
47-8	9086-9094	Sciences	
47-9	9094-9095	,	
47-10	9096-9107	Inc.Privacy	
47-11	9108-9109	|	
47-12	9110-9115	Terms	
47-13	9116-9117	|	
47-14	9118-9125	Cookies	
