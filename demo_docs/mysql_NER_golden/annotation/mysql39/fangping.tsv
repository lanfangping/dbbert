#FORMAT=WebAnno TSV 3.3


#Text=MySQL Performance Tuning Part 1 - Architecture - Distributed Systems Authority
#Text=Skip to content
#Text=Distributed Systems Authority
#Text=Ideas behind Reliable, Scalable, and Maintenable Systems
#Text=Blog
#Text=Videos
#Text=Distributed Systems Authority
#Text=Ideas behind Reliable, Scalable, and Maintenable Systems
#Text=Toggle Navigation
#Text=Toggle Navigation
#Text=Blog
#Text=Videos
#Text=Search for...
1-1	0-5	MySQL	
1-2	6-17	Performance	
1-3	18-24	Tuning	
1-4	25-29	Part	
1-5	30-31	1	
1-6	32-33	-	
1-7	34-46	Architecture	
1-8	47-48	-	
1-9	49-60	Distributed	
1-10	61-68	Systems	
1-11	69-78	Authority	
1-12	79-83	Skip	
1-13	84-86	to	
1-14	87-94	content	
1-15	95-106	Distributed	
1-16	107-114	Systems	
1-17	115-124	Authority	
1-18	125-130	Ideas	
1-19	131-137	behind	
1-20	138-146	Reliable	
1-21	146-147	,	
1-22	148-156	Scalable	
1-23	156-157	,	
1-24	158-161	and	
1-25	162-173	Maintenable	
1-26	174-181	Systems	
1-27	182-186	Blog	
1-28	187-193	Videos	
1-29	194-205	Distributed	
1-30	206-213	Systems	
1-31	214-223	Authority	
1-32	224-229	Ideas	
1-33	230-236	behind	
1-34	237-245	Reliable	
1-35	245-246	,	
1-36	247-255	Scalable	
1-37	255-256	,	
1-38	257-260	and	
1-39	261-272	Maintenable	
1-40	273-280	Systems	
1-41	281-287	Toggle	
1-42	288-298	Navigation	
1-43	299-305	Toggle	
1-44	306-316	Navigation	
1-45	317-321	Blog	
1-46	322-328	Videos	
1-47	329-335	Search	
1-48	336-339	for	
1-49	339-340	.	
1-50	340-341	.	
1-51	341-342	.	

#Text=MySQL Performance Tuning Part 1 – Architectureby Lucian OpreaJanuary 1, 2021January 10, 2021
#Text=Table Of ContentsKey Takeaways MySQL’s Logical ArchitectureQuery Execution BasicsUtility LayerThe MySQL Cient/Server ProtocolThe Query CacheSQL LayerThe parser and the preprocessorThe query optimizerThe query execution engineReturning results to the clientStorage Engine LayerThe InnoDB EngineSources of InformationConsider the Whole StackQuery Tuning MethodologyConclusionsBibliography
#Text=Key Takeaways
#Text=We need to understand MySQL design so that we can work with it, and not against it.Everything in InnoDB is an index.
2-1	343-348	MySQL	
2-2	349-360	Performance	
2-3	361-367	Tuning	
2-4	368-372	Part	
2-5	373-374	1	
2-6	375-376	–	
2-7	377-391	Architectureby	
2-8	392-398	Lucian	
2-9	399-411	OpreaJanuary	
2-10	412-413	1	
2-11	413-414	,	
2-12	415-426	2021January	
2-13	427-429	10	
2-14	429-430	,	
2-15	431-435	2021	
2-16	436-441	Table	
2-17	442-444	Of	
2-18	445-456	ContentsKey	
2-19	457-466	Takeaways	
2-20	467-472	MySQL	
2-21	472-473	’	
2-22	473-474	s	
2-23	475-482	Logical	
2-24	483-500	ArchitectureQuery	
2-25	501-510	Execution	
2-26	511-524	BasicsUtility	
2-27	525-533	LayerThe	
2-28	534-539	MySQL	
2-29	540-545	Cient	
2-30	545-546	/	
2-31	546-552	Server	
2-32	553-564	ProtocolThe	
2-33	565-570	Query	
2-34	571-579	CacheSQL	
2-35	580-588	LayerThe	
2-36	589-595	parser	
2-37	596-599	and	
2-38	600-603	the	
2-39	604-619	preprocessorThe	
2-40	620-625	query	
2-41	626-638	optimizerThe	
2-42	639-644	query	
2-43	645-654	execution	
2-44	655-670	engineReturning	
2-45	671-678	results	
2-46	679-681	to	
2-47	682-685	the	
2-48	686-699	clientStorage	
2-49	700-706	Engine	
2-50	707-715	LayerThe	
2-51	716-722	InnoDB	
2-52	723-736	EngineSources	
2-53	737-739	of	
2-54	740-759	InformationConsider	
2-55	760-763	the	
2-56	764-769	Whole	
2-57	770-780	StackQuery	
2-58	781-787	Tuning	
2-59	788-822	MethodologyConclusionsBibliography	
2-60	823-826	Key	
2-61	827-836	Takeaways	
2-62	837-839	We	
2-63	840-844	need	
2-64	845-847	to	
2-65	848-858	understand	
2-66	859-864	MySQL	
2-67	865-871	design	
2-68	872-874	so	
2-69	875-879	that	
2-70	880-882	we	
2-71	883-886	can	
2-72	887-891	work	
2-73	892-896	with	
2-74	897-899	it	
2-75	899-900	,	
2-76	901-904	and	
2-77	905-908	not	
2-78	909-916	against	
2-79	917-930	it.Everything	
2-80	931-933	in	
2-81	934-940	InnoDB	
2-82	941-943	is	
2-83	944-946	an	
2-84	947-952	index	
2-85	952-953	.	

#Text=The primary key is used for the clustered index, so we must choose it with care.Monitoring is an absolute must in performance tuning.
3-1	954-957	The	
3-2	958-965	primary	
3-3	966-969	key	
3-4	970-972	is	
3-5	973-977	used	
3-6	978-981	for	
3-7	982-985	the	
3-8	986-995	clustered	
3-9	996-1001	index	
3-10	1001-1002	,	
3-11	1003-1005	so	
3-12	1006-1008	we	
3-13	1009-1013	must	
3-14	1014-1020	choose	
3-15	1021-1023	it	
3-16	1024-1028	with	
3-17	1029-1044	care.Monitoring	
3-18	1045-1047	is	
3-19	1048-1050	an	
3-20	1051-1059	absolute	
3-21	1060-1064	must	
3-22	1065-1067	in	
3-23	1068-1079	performance	
3-24	1080-1086	tuning	
3-25	1086-1087	.	

#Text=MySQL’s Logical Architecture
#Text=MySQL is very different from other database servers, and its architectural characteristics make it useful for a wide range of purposes.
4-1	1088-1093	MySQL	
4-2	1093-1094	’	
4-3	1094-1095	s	
4-4	1096-1103	Logical	
4-5	1104-1116	Architecture	
4-6	1117-1122	MySQL	
4-7	1123-1125	is	
4-8	1126-1130	very	
4-9	1131-1140	different	
4-10	1141-1145	from	
4-11	1146-1151	other	
4-12	1152-1160	database	
4-13	1161-1168	servers	
4-14	1168-1169	,	
4-15	1170-1173	and	
4-16	1174-1177	its	
4-17	1178-1191	architectural	
4-18	1192-1207	characteristics	
4-19	1208-1212	make	
4-20	1213-1215	it	
4-21	1216-1222	useful	
4-22	1223-1226	for	
4-23	1227-1228	a	
4-24	1229-1233	wide	
4-25	1234-1239	range	
4-26	1240-1242	of	
4-27	1243-1251	purposes	
4-28	1251-1252	.	

#Text=MySQL is not perfect, but it is flexible enough to work well in very demanding environments, such as web applications, data warehouses, content indexing, highly available redundant systems, online transaction processing (OLTP), and much more.
5-1	1253-1258	MySQL	
5-2	1259-1261	is	
5-3	1262-1265	not	
5-4	1266-1273	perfect	
5-5	1273-1274	,	
5-6	1275-1278	but	
5-7	1279-1281	it	
5-8	1282-1284	is	
5-9	1285-1293	flexible	
5-10	1294-1300	enough	
5-11	1301-1303	to	
5-12	1304-1308	work	
5-13	1309-1313	well	
5-14	1314-1316	in	
5-15	1317-1321	very	
5-16	1322-1331	demanding	
5-17	1332-1344	environments	
5-18	1344-1345	,	
5-19	1346-1350	such	
5-20	1351-1353	as	
5-21	1354-1357	web	
5-22	1358-1370	applications	
5-23	1370-1371	,	
5-24	1372-1376	data	
5-25	1377-1387	warehouses	
5-26	1387-1388	,	
5-27	1389-1396	content	
5-28	1397-1405	indexing	
5-29	1405-1406	,	
5-30	1407-1413	highly	
5-31	1414-1423	available	
5-32	1424-1433	redundant	
5-33	1434-1441	systems	
5-34	1441-1442	,	
5-35	1443-1449	online	
5-36	1450-1461	transaction	
5-37	1462-1472	processing	
5-38	1473-1474	(	
5-39	1474-1478	OLTP	
5-40	1478-1479	)	
5-41	1479-1480	,	
5-42	1481-1484	and	
5-43	1485-1489	much	
5-44	1490-1494	more	
5-45	1494-1495	.	

#Text=To get the most from MySQL, we need to understand its design so that we can work with it, and not against it.
6-1	1496-1498	To	
6-2	1499-1502	get	
6-3	1503-1506	the	
6-4	1507-1511	most	
6-5	1512-1516	from	
6-6	1517-1522	MySQL	
6-7	1522-1523	,	
6-8	1524-1526	we	
6-9	1527-1531	need	
6-10	1532-1534	to	
6-11	1535-1545	understand	
6-12	1546-1549	its	
6-13	1550-1556	design	
6-14	1557-1559	so	
6-15	1560-1564	that	
6-16	1565-1567	we	
6-17	1568-1571	can	
6-18	1572-1576	work	
6-19	1577-1581	with	
6-20	1582-1584	it	
6-21	1584-1585	,	
6-22	1586-1589	and	
6-23	1590-1593	not	
6-24	1594-1601	against	
6-25	1602-1604	it	
6-26	1604-1605	.	

#Text=MySQL’s most unusual and important feature is its storage-engine architecture, whose design separates query processing and other server tasks from data storage and retrieval.
7-1	1606-1611	MySQL	
7-2	1611-1612	’	
7-3	1612-1613	s	
7-4	1614-1618	most	
7-5	1619-1626	unusual	
7-6	1627-1630	and	
7-7	1631-1640	important	
7-8	1641-1648	feature	
7-9	1649-1651	is	
7-10	1652-1655	its	
7-11	1656-1670	storage-engine	
7-12	1671-1683	architecture	
7-13	1683-1684	,	
7-14	1685-1690	whose	
7-15	1691-1697	design	
7-16	1698-1707	separates	
7-17	1708-1713	query	
7-18	1714-1724	processing	
7-19	1725-1728	and	
7-20	1729-1734	other	
7-21	1735-1741	server	
7-22	1742-1747	tasks	
7-23	1748-1752	from	
7-24	1753-1757	data	
7-25	1758-1765	storage	
7-26	1766-1769	and	
7-27	1770-1779	retrieval	
7-28	1779-1780	.	

#Text=Query Execution Basics
#Text=If you need to get high performance from your MySQL server, one of the best ways to invest your time is in learning how MySQL optimizes and executes queries.
8-1	1781-1786	Query	
8-2	1787-1796	Execution	
8-3	1797-1803	Basics	
8-4	1804-1806	If	
8-5	1807-1810	you	
8-6	1811-1815	need	
8-7	1816-1818	to	
8-8	1819-1822	get	
8-9	1823-1827	high	
8-10	1828-1839	performance	
8-11	1840-1844	from	
8-12	1845-1849	your	
8-13	1850-1855	MySQL	
8-14	1856-1862	server	
8-15	1862-1863	,	
8-16	1864-1867	one	
8-17	1868-1870	of	
8-18	1871-1874	the	
8-19	1875-1879	best	
8-20	1880-1884	ways	
8-21	1885-1887	to	
8-22	1888-1894	invest	
8-23	1895-1899	your	
8-24	1900-1904	time	
8-25	1905-1907	is	
8-26	1908-1910	in	
8-27	1911-1919	learning	
8-28	1920-1923	how	
8-29	1924-1929	MySQL	
8-30	1930-1939	optimizes	
8-31	1940-1943	and	
8-32	1944-1952	executes	
8-33	1953-1960	queries	
8-34	1960-1961	.	

#Text=Once you understand this, much of query optimization is a matter of reasoning from principles, and query optimization becomes a very logical process.
9-1	1962-1966	Once	
9-2	1967-1970	you	
9-3	1971-1981	understand	
9-4	1982-1986	this	
9-5	1986-1987	,	
9-6	1988-1992	much	
9-7	1993-1995	of	
9-8	1996-2001	query	
9-9	2002-2014	optimization	
9-10	2015-2017	is	
9-11	2018-2019	a	
9-12	2020-2026	matter	
9-13	2027-2029	of	
9-14	2030-2039	reasoning	
9-15	2040-2044	from	
9-16	2045-2055	principles	
9-17	2055-2056	,	
9-18	2057-2060	and	
9-19	2061-2066	query	
9-20	2067-2079	optimization	
9-21	2080-2087	becomes	
9-22	2088-2089	a	
9-23	2090-2094	very	
9-24	2095-2102	logical	
9-25	2103-2110	process	
9-26	2110-2111	.	

#Text=Here is the process MySQL follows when we send a query to the server.
10-1	2112-2116	Here	
10-2	2117-2119	is	
10-3	2120-2123	the	
10-4	2124-2131	process	
10-5	2132-2137	MySQL	
10-6	2138-2145	follows	
10-7	2146-2150	when	
10-8	2151-2153	we	
10-9	2154-2158	send	
10-10	2159-2160	a	
10-11	2161-2166	query	
10-12	2167-2169	to	
10-13	2170-2173	the	
10-14	2174-2180	server	
10-15	2180-2181	.	

#Text=The client sends the SQL statement to the server.The server checks the query cache.
11-1	2182-2185	The	
11-2	2186-2192	client	
11-3	2193-2198	sends	
11-4	2199-2202	the	
11-5	2202-2203	 	
11-6	2203-2206	SQL	
11-7	2207-2216	statement	
11-8	2217-2219	to	
11-9	2220-2223	the	
11-10	2224-2234	server.The	
11-11	2235-2241	server	
11-12	2242-2248	checks	
11-13	2249-2252	the	
11-14	2253-2258	query	
11-15	2259-2264	cache	
11-16	2264-2265	.	

#Text=If there’s a hit, it returns the stored result from the cache; otherwise, it passes the SQL statement to the next step.The server parses, preprocesses, and optimizes the SQL into a query execution plan.The query execution engine executes the plan by making calls to the storage engine API.The server sends the result to the client.
12-1	2266-2268	If	
12-2	2269-2274	there	
12-3	2274-2275	’	
12-4	2275-2276	s	
12-5	2277-2278	a	
12-6	2279-2282	hit	
12-7	2282-2283	,	
12-8	2284-2286	it	
12-9	2287-2294	returns	
12-10	2295-2298	the	
12-11	2299-2305	stored	
12-12	2306-2312	result	
12-13	2313-2317	from	
12-14	2318-2321	the	
12-15	2322-2327	cache	
12-16	2327-2328	;	
12-17	2329-2338	otherwise	
12-18	2338-2339	,	
12-19	2340-2342	it	
12-20	2343-2349	passes	
12-21	2350-2353	the	
12-22	2354-2357	SQL	
12-23	2358-2367	statement	
12-24	2368-2370	to	
12-25	2371-2374	the	
12-26	2375-2379	next	
12-27	2380-2388	step.The	
12-28	2389-2395	server	
12-29	2396-2402	parses	
12-30	2402-2403	,	
12-31	2404-2416	preprocesses	
12-32	2416-2417	,	
12-33	2418-2421	and	
12-34	2422-2431	optimizes	
12-35	2432-2435	the	
12-36	2436-2439	SQL	
12-37	2440-2444	into	
12-38	2445-2446	a	
12-39	2447-2452	query	
12-40	2453-2462	execution	
12-41	2463-2471	plan.The	
12-42	2472-2477	query	
12-43	2478-2487	execution	
12-44	2488-2494	engine	
12-45	2495-2503	executes	
12-46	2504-2507	the	
12-47	2508-2512	plan	
12-48	2513-2515	by	
12-49	2516-2522	making	
12-50	2523-2528	calls	
12-51	2529-2531	to	
12-52	2532-2535	the	
12-53	2536-2543	storage	
12-54	2544-2550	engine	
12-55	2551-2558	API.The	
12-56	2559-2565	server	
12-57	2566-2571	sends	
12-58	2572-2575	the	
12-59	2576-2582	result	
12-60	2583-2585	to	
12-61	2586-2589	the	
12-62	2590-2596	client	
12-63	2596-2597	.	

#Text=Each step takes time and may itself be a complex operation consisting of several subparts, which we discuss in the following sections.
13-1	2598-2602	Each	
13-2	2603-2607	step	
13-3	2608-2613	takes	
13-4	2614-2618	time	
13-5	2619-2622	and	
13-6	2623-2626	may	
13-7	2627-2633	itself	
13-8	2634-2636	be	
13-9	2637-2638	a	
13-10	2639-2646	complex	
13-11	2647-2656	operation	
13-12	2657-2667	consisting	
13-13	2668-2670	of	
13-14	2671-2678	several	
13-15	2679-2687	subparts	
13-16	2687-2688	,	
13-17	2689-2694	which	
13-18	2695-2697	we	
13-19	2698-2705	discuss	
13-20	2706-2708	in	
13-21	2709-2712	the	
13-22	2713-2722	following	
13-23	2723-2731	sections	
13-24	2731-2732	.	

#Text=MySQL Architecture
#Text=MySQL Server can be divided into 3 layers.
14-1	2733-2738	MySQL	
14-2	2739-2751	Architecture	
14-3	2752-2757	MySQL	
14-4	2758-2764	Server	
14-5	2765-2768	can	
14-6	2769-2771	be	
14-7	2772-2779	divided	
14-8	2780-2784	into	
14-9	2785-2786	3	
14-10	2787-2793	layers	
14-11	2793-2794	.	

#Text=Utility Layer
#Text=The first layer contains the services that aren’t unique to MySQL.
15-1	2795-2802	Utility	
15-2	2803-2808	Layer	
15-3	2809-2812	The	
15-4	2813-2818	first	
15-5	2819-2824	layer	
15-6	2825-2833	contains	
15-7	2834-2837	the	
15-8	2838-2846	services	
15-9	2847-2851	that	
15-10	2852-2856	aren	
15-11	2856-2857	’	
15-12	2857-2858	t	
15-13	2859-2865	unique	
15-14	2866-2868	to	
15-15	2869-2874	MySQL	
15-16	2874-2875	.	

#Text=Client-server architecture and most of the network-based tools need these services.
16-1	2876-2889	Client-server	
16-2	2890-2902	architecture	
16-3	2903-2906	and	
16-4	2907-2911	most	
16-5	2912-2914	of	
16-6	2915-2918	the	
16-7	2919-2932	network-based	
16-8	2933-2938	tools	
16-9	2939-2943	need	
16-10	2944-2949	these	
16-11	2950-2958	services	
16-12	2958-2959	.	

#Text=Connection handling, authentication, security, and so forth.
17-1	2960-2970	Connection	
17-2	2971-2979	handling	
17-3	2979-2980	,	
17-4	2981-2995	authentication	
17-5	2995-2996	,	
17-6	2997-3005	security	
17-7	3005-3006	,	
17-8	3007-3010	and	
17-9	3011-3013	so	
17-10	3014-3019	forth	
17-11	3019-3020	.	

#Text=The MySQL Cient/Server Protocol
#Text=This CLIENT/SERVER protocol, makes MySQL communication simple and fast, but it limits it in some ways too.
18-1	3021-3024	The	
18-2	3025-3030	MySQL	
18-3	3031-3036	Cient	
18-4	3036-3037	/	
18-5	3037-3043	Server	
18-6	3044-3052	Protocol	
18-7	3053-3057	This	
18-8	3058-3064	CLIENT	
18-9	3064-3065	/	
18-10	3065-3071	SERVER	
18-11	3072-3080	protocol	
18-12	3080-3081	,	
18-13	3082-3087	makes	
18-14	3088-3093	MySQL	
18-15	3094-3107	communication	
18-16	3108-3114	simple	
18-17	3115-3118	and	
18-18	3119-3123	fast	
18-19	3123-3124	,	
18-20	3125-3128	but	
18-21	3129-3131	it	
18-22	3132-3138	limits	
18-23	3139-3141	it	
18-24	3142-3144	in	
18-25	3145-3149	some	
18-26	3150-3154	ways	
18-27	3155-3158	too	
18-28	3158-3159	.	

#Text=For one thing, it means there’s no flow control; once one side sends a message, the other side must fetch the entire message before responding.
19-1	3160-3163	For	
19-2	3164-3167	one	
19-3	3168-3173	thing	
19-4	3173-3174	,	
19-5	3175-3177	it	
19-6	3178-3183	means	
19-7	3184-3189	there	
19-8	3189-3190	’	
19-9	3190-3191	s	
19-10	3192-3194	no	
19-11	3195-3199	flow	
19-12	3200-3207	control	
19-13	3207-3208	;	
19-14	3209-3213	once	
19-15	3214-3217	one	
19-16	3218-3222	side	
19-17	3223-3228	sends	
19-18	3229-3230	a	
19-19	3231-3238	message	
19-20	3238-3239	,	
19-21	3240-3243	the	
19-22	3244-3249	other	
19-23	3250-3254	side	
19-24	3255-3259	must	
19-25	3260-3265	fetch	
19-26	3266-3269	the	
19-27	3270-3276	entire	
19-28	3277-3284	message	
19-29	3285-3291	before	
19-30	3292-3302	responding	
19-31	3302-3303	.	

#Text=When the server responds, the client has to receive the entire result set.
20-1	3304-3308	When	
20-2	3309-3312	the	
20-3	3313-3319	server	
20-4	3320-3328	responds	
20-5	3328-3329	,	
20-6	3330-3333	the	
20-7	3334-3340	client	
20-8	3341-3344	has	
20-9	3345-3347	to	
20-10	3348-3355	receive	
20-11	3356-3359	the	
20-12	3360-3366	entire	
20-13	3367-3373	result	
20-14	3374-3377	set	
20-15	3377-3378	.	

#Text=This is why LIMIT clauses are so important.
21-1	3379-3383	This	
21-2	3384-3386	is	
21-3	3387-3390	why	
21-4	3391-3396	LIMIT	
21-5	3397-3404	clauses	
21-6	3405-3408	are	
21-7	3409-3411	so	
21-8	3412-3421	important	
21-9	3421-3422	.	

#Text=Now, if we are using libraries to connect to MySQL, then we should be aware that the default behaviour for most libraries is to fetch the whole result and buffer it in memory.
22-1	3423-3426	Now	
22-2	3426-3427	,	
22-3	3428-3430	if	
22-4	3431-3433	we	
22-5	3434-3437	are	
22-6	3438-3443	using	
22-7	3444-3453	libraries	
22-8	3454-3456	to	
22-9	3457-3464	connect	
22-10	3465-3467	to	
22-11	3468-3473	MySQL	
22-12	3473-3474	,	
22-13	3475-3479	then	
22-14	3480-3482	we	
22-15	3483-3489	should	
22-16	3490-3492	be	
22-17	3493-3498	aware	
22-18	3499-3503	that	
22-19	3504-3507	the	
22-20	3508-3515	default	
22-21	3516-3525	behaviour	
22-22	3526-3529	for	
22-23	3530-3534	most	
22-24	3535-3544	libraries	
22-25	3545-3547	is	
22-26	3548-3550	to	
22-27	3551-3556	fetch	
22-28	3557-3560	the	
22-29	3561-3566	whole	
22-30	3567-3573	result	
22-31	3574-3577	and	
22-32	3578-3584	buffer	
22-33	3585-3587	it	
22-34	3588-3590	in	
22-35	3591-3597	memory	
22-36	3597-3598	.	

#Text=This is important because until all the rows have been fetched, the MySQL server will not release the locks and other resources required by the query.
23-1	3599-3603	This	
23-2	3604-3606	is	
23-3	3607-3616	important	
23-4	3617-3624	because	
23-5	3625-3630	until	
23-6	3631-3634	all	
23-7	3635-3638	the	
23-8	3639-3643	rows	
23-9	3644-3648	have	
23-10	3649-3653	been	
23-11	3654-3661	fetched	
23-12	3661-3662	,	
23-13	3663-3666	the	
23-14	3667-3672	MySQL	
23-15	3673-3679	server	
23-16	3680-3684	will	
23-17	3685-3688	not	
23-18	3689-3696	release	
23-19	3697-3700	the	
23-20	3701-3706	locks	
23-21	3707-3710	and	
23-22	3711-3716	other	
23-23	3717-3726	resources	
23-24	3727-3735	required	
23-25	3736-3738	by	
23-26	3739-3742	the	
23-27	3743-3748	query	
23-28	3748-3749	.	

#Text=The query will be in the “Sending data” state.
24-1	3750-3753	The	
24-2	3754-3759	query	
24-3	3760-3764	will	
24-4	3765-3767	be	
24-5	3768-3770	in	
24-6	3771-3774	the	
24-7	3775-3776	“	
24-8	3776-3783	Sending	
24-9	3784-3788	data	
24-10	3788-3789	”	
24-11	3790-3795	state	
24-12	3795-3796	.	

#Text=When the client library fetches the results all at once, it reduces the amount of work the server needs to do: the server can finish and clean up the query as quickly as possible.
25-1	3797-3801	When	
25-2	3802-3805	the	
25-3	3806-3812	client	
25-4	3813-3820	library	
25-5	3821-3828	fetches	
25-6	3829-3832	the	
25-7	3833-3840	results	
25-8	3841-3844	all	
25-9	3845-3847	at	
25-10	3848-3852	once	
25-11	3852-3853	,	
25-12	3854-3856	it	
25-13	3857-3864	reduces	
25-14	3865-3868	the	
25-15	3869-3875	amount	
25-16	3876-3878	of	
25-17	3879-3883	work	
25-18	3884-3887	the	
25-19	3888-3894	server	
25-20	3895-3900	needs	
25-21	3901-3903	to	
25-22	3904-3906	do	
25-23	3906-3907	:	
25-24	3908-3911	the	
25-25	3912-3918	server	
25-26	3919-3922	can	
25-27	3923-3929	finish	
25-28	3930-3933	and	
25-29	3934-3939	clean	
25-30	3940-3942	up	
25-31	3943-3946	the	
25-32	3947-3952	query	
25-33	3953-3955	as	
25-34	3956-3963	quickly	
25-35	3964-3966	as	
25-36	3967-3975	possible	
25-37	3975-3976	.	

#Text=Most client libraries let you treat the result set as though you’re fetching it from the server, although in fact, you’re just fetching it from the buffer in the library’s memory.
26-1	3977-3981	Most	
26-2	3982-3988	client	
26-3	3989-3998	libraries	
26-4	3999-4002	let	
26-5	4003-4006	you	
26-6	4007-4012	treat	
26-7	4013-4016	the	
26-8	4017-4023	result	
26-9	4024-4027	set	
26-10	4028-4030	as	
26-11	4031-4037	though	
26-12	4038-4041	you	
26-13	4041-4042	’	
26-14	4042-4044	re	
26-15	4045-4053	fetching	
26-16	4054-4056	it	
26-17	4057-4061	from	
26-18	4062-4065	the	
26-19	4066-4072	server	
26-20	4072-4073	,	
26-21	4074-4082	although	
26-22	4083-4085	in	
26-23	4086-4090	fact	
26-24	4090-4091	,	
26-25	4092-4095	you	
26-26	4095-4096	’	
26-27	4096-4098	re	
26-28	4099-4103	just	
26-29	4104-4112	fetching	
26-30	4113-4115	it	
26-31	4116-4120	from	
26-32	4121-4124	the	
26-33	4125-4131	buffer	
26-34	4132-4134	in	
26-35	4135-4138	the	
26-36	4139-4146	library	
26-37	4146-4147	’	
26-38	4147-4148	s	
26-39	4149-4155	memory	
26-40	4155-4156	.	

#Text=This works fine most of the time, but it’s not a good idea for huge result sets that might take a long time to fetch and use a lot of memory.
27-1	4157-4161	This	
27-2	4162-4167	works	
27-3	4168-4172	fine	
27-4	4173-4177	most	
27-5	4178-4180	of	
27-6	4181-4184	the	
27-7	4185-4189	time	
27-8	4189-4190	,	
27-9	4191-4194	but	
27-10	4195-4197	it	
27-11	4197-4198	’	
27-12	4198-4199	s	
27-13	4200-4203	not	
27-14	4204-4205	a	
27-15	4206-4210	good	
27-16	4211-4215	idea	
27-17	4216-4219	for	
27-18	4220-4224	huge	
27-19	4225-4231	result	
27-20	4232-4236	sets	
27-21	4237-4241	that	
27-22	4242-4247	might	
27-23	4248-4252	take	
27-24	4253-4254	a	
27-25	4255-4259	long	
27-26	4260-4264	time	
27-27	4265-4267	to	
27-28	4268-4273	fetch	
27-29	4274-4277	and	
27-30	4278-4281	use	
27-31	4282-4283	a	
27-32	4284-4287	lot	
27-33	4288-4290	of	
27-34	4291-4297	memory	
27-35	4297-4298	.	

#Text=You can use less memory, and start working on the result sooner, if you instruct the library not to buffer the result.
28-1	4299-4302	You	
28-2	4303-4306	can	
28-3	4307-4310	use	
28-4	4311-4315	less	
28-5	4316-4322	memory	
28-6	4322-4323	,	
28-7	4324-4327	and	
28-8	4328-4333	start	
28-9	4334-4341	working	
28-10	4342-4344	on	
28-11	4345-4348	the	
28-12	4349-4355	result	
28-13	4356-4362	sooner	
28-14	4362-4363	,	
28-15	4364-4366	if	
28-16	4367-4370	you	
28-17	4371-4379	instruct	
28-18	4380-4383	the	
28-19	4384-4391	library	
28-20	4392-4395	not	
28-21	4396-4398	to	
28-22	4399-4405	buffer	
28-23	4406-4409	the	
28-24	4410-4416	result	
28-25	4416-4417	.	

#Text=The downside is that the locks and other resources on the server will remain open while your application is interacting with the library.
29-1	4418-4421	The	
29-2	4422-4430	downside	
29-3	4431-4433	is	
29-4	4434-4438	that	
29-5	4439-4442	the	
29-6	4443-4448	locks	
29-7	4449-4452	and	
29-8	4453-4458	other	
29-9	4459-4468	resources	
29-10	4469-4471	on	
29-11	4472-4475	the	
29-12	4476-4482	server	
29-13	4483-4487	will	
29-14	4488-4494	remain	
29-15	4495-4499	open	
29-16	4500-4505	while	
29-17	4506-4510	your	
29-18	4511-4522	application	
29-19	4523-4525	is	
29-20	4526-4537	interacting	
29-21	4538-4542	with	
29-22	4543-4546	the	
29-23	4547-4554	library	
29-24	4554-4555	.	

#Text=The Query Cache
#Text=Before even parsing the query, though, the server consults the query cache, which can store only SELECT statements, along with their result sets.
30-1	4556-4559	The	
30-2	4560-4565	Query	
30-3	4566-4571	Cache	
30-4	4572-4578	Before	
30-5	4579-4583	even	
30-6	4584-4591	parsing	
30-7	4592-4595	the	
30-8	4596-4601	query	
30-9	4601-4602	,	
30-10	4603-4609	though	
30-11	4609-4610	,	
30-12	4611-4614	the	
30-13	4615-4621	server	
30-14	4622-4630	consults	
30-15	4631-4634	the	
30-16	4635-4640	query	
30-17	4641-4646	cache	
30-18	4646-4647	,	
30-19	4648-4653	which	
30-20	4654-4657	can	
30-21	4658-4663	store	
30-22	4664-4668	only	
30-23	4669-4675	SELECT	
30-24	4676-4686	statements	
30-25	4686-4687	,	
30-26	4688-4693	along	
30-27	4694-4698	with	
30-28	4699-4704	their	
30-29	4705-4711	result	
30-30	4712-4716	sets	
30-31	4716-4717	.	

#Text=If anyone issues a query that’s identical to one already in the cache, the server doesn’t need to parse, optimize, or execute the query at all—it can simply pass back the stored result set.
31-1	4718-4720	If	
31-2	4721-4727	anyone	
31-3	4728-4734	issues	
31-4	4735-4736	a	
31-5	4737-4742	query	
31-6	4743-4747	that	
31-7	4747-4748	’	
31-8	4748-4749	s	
31-9	4750-4759	identical	
31-10	4760-4762	to	
31-11	4763-4766	one	
31-12	4767-4774	already	
31-13	4775-4777	in	
31-14	4778-4781	the	
31-15	4782-4787	cache	
31-16	4787-4788	,	
31-17	4789-4792	the	
31-18	4793-4799	server	
31-19	4800-4805	doesn	
31-20	4805-4806	’	
31-21	4806-4807	t	
31-22	4808-4812	need	
31-23	4813-4815	to	
31-24	4816-4821	parse	
31-25	4821-4822	,	
31-26	4823-4831	optimize	
31-27	4831-4832	,	
31-28	4833-4835	or	
31-29	4836-4843	execute	
31-30	4844-4847	the	
31-31	4848-4853	query	
31-32	4854-4856	at	
31-33	4857-4863	all—it	
31-34	4864-4867	can	
31-35	4868-4874	simply	
31-36	4875-4879	pass	
31-37	4880-4884	back	
31-38	4885-4888	the	
31-39	4889-4895	stored	
31-40	4896-4902	result	
31-41	4903-4906	set	
31-42	4906-4907	.	

#Text=SQL Layer
#Text=The second layer is where things get interesting.
32-1	4908-4911	SQL	
32-2	4912-4917	Layer	
32-3	4918-4921	The	
32-4	4922-4928	second	
32-5	4929-4934	layer	
32-6	4935-4937	is	
32-7	4938-4943	where	
32-8	4944-4950	things	
32-9	4951-4954	get	
32-10	4955-4966	interesting	
32-11	4966-4967	.	

#Text=Much of MySQL’s brains are here, including the code for query analysis, optimization, caching, and all the built-in functions (e.g., dates, times, math, and encryption).
33-1	4968-4972	Much	
33-2	4973-4975	of	
33-3	4976-4981	MySQL	
33-4	4981-4982	’	
33-5	4982-4983	s	
33-6	4984-4990	brains	
33-7	4991-4994	are	
33-8	4995-4999	here	
33-9	4999-5000	,	
33-10	5001-5010	including	
33-11	5011-5014	the	
33-12	5015-5019	code	
33-13	5020-5023	for	
33-14	5024-5029	query	
33-15	5030-5038	analysis	
33-16	5038-5039	,	
33-17	5040-5052	optimization	
33-18	5052-5053	,	
33-19	5054-5061	caching	
33-20	5061-5062	,	
33-21	5063-5066	and	
33-22	5067-5070	all	
33-23	5071-5074	the	
33-24	5075-5083	built-in	
33-25	5084-5093	functions	
33-26	5094-5095	(	
33-27	5095-5098	e.g	
33-28	5098-5099	.	
33-29	5099-5100	,	
33-30	5101-5106	dates	
33-31	5106-5107	,	
33-32	5108-5113	times	
33-33	5113-5114	,	
33-34	5115-5119	math	
33-35	5119-5120	,	
33-36	5121-5124	and	
33-37	5125-5135	encryption	
33-38	5135-5136	)	
33-39	5136-5137	.	

#Text=Any functionality provided across storage engines lives at this level: stored procedures, triggers, and views, for example.
34-1	5138-5141	Any	
34-2	5142-5155	functionality	
34-3	5156-5164	provided	
34-4	5165-5171	across	
34-5	5172-5179	storage	
34-6	5180-5187	engines	
34-7	5188-5193	lives	
34-8	5194-5196	at	
34-9	5197-5201	this	
34-10	5202-5207	level	
34-11	5207-5208	:	
34-12	5209-5215	stored	
34-13	5216-5226	procedures	
34-14	5226-5227	,	
34-15	5228-5236	triggers	
34-16	5236-5237	,	
34-17	5238-5241	and	
34-18	5242-5247	views	
34-19	5247-5248	,	
34-20	5249-5252	for	
34-21	5253-5260	example	
34-22	5260-5261	.	

#Text=The next step in the query lifecycle turns a SQL query into an execution plan for the query execution engine.
35-1	5262-5265	The	
35-2	5266-5270	next	
35-3	5271-5275	step	
35-4	5276-5278	in	
35-5	5279-5282	the	
35-6	5283-5288	query	
35-7	5289-5298	lifecycle	
35-8	5299-5304	turns	
35-9	5305-5306	a	
35-10	5307-5310	SQL	
35-11	5311-5316	query	
35-12	5317-5321	into	
35-13	5322-5324	an	
35-14	5325-5334	execution	
35-15	5335-5339	plan	
35-16	5340-5343	for	
35-17	5344-5347	the	
35-18	5348-5353	query	
35-19	5354-5363	execution	
35-20	5364-5370	engine	
35-21	5370-5371	.	

#Text=It has several substeps: parsing, preprocessing, and optimization.
36-1	5372-5374	It	
36-2	5375-5378	has	
36-3	5379-5386	several	
36-4	5387-5395	substeps	
36-5	5395-5396	:	
36-6	5397-5404	parsing	
36-7	5404-5405	,	
36-8	5406-5419	preprocessing	
36-9	5419-5420	,	
36-10	5421-5424	and	
36-11	5425-5437	optimization	
36-12	5437-5438	.	

#Text=The goal of this section is not trying to document the MySQL internals, but simply to understand how MySQL executes queries so that we can write better ones.
37-1	5439-5442	The	
37-2	5443-5447	goal	
37-3	5448-5450	of	
37-4	5451-5455	this	
37-5	5456-5463	section	
37-6	5464-5466	is	
37-7	5467-5470	not	
37-8	5471-5477	trying	
37-9	5478-5480	to	
37-10	5481-5489	document	
37-11	5490-5493	the	
37-12	5494-5499	MySQL	
37-13	5500-5509	internals	
37-14	5509-5510	,	
37-15	5511-5514	but	
37-16	5515-5521	simply	
37-17	5522-5524	to	
37-18	5525-5535	understand	
37-19	5536-5539	how	
37-20	5540-5545	MySQL	
37-21	5546-5554	executes	
37-22	5555-5562	queries	
37-23	5563-5565	so	
37-24	5566-5570	that	
37-25	5571-5573	we	
37-26	5574-5577	can	
37-27	5578-5583	write	
37-28	5584-5590	better	
37-29	5591-5595	ones	
37-30	5595-5596	.	

#Text=The parser and the preprocessor
#Text=To begin, MySQL’s parser breaks the query into tokens and builds a “parse tree” from them.
38-1	5597-5600	The	
38-2	5601-5607	parser	
38-3	5608-5611	and	
38-4	5612-5615	the	
38-5	5616-5628	preprocessor	
38-6	5629-5631	To	
38-7	5632-5637	begin	
38-8	5637-5638	,	
38-9	5639-5644	MySQL	
38-10	5644-5645	’	
38-11	5645-5646	s	
38-12	5646-5647	 	
38-13	5647-5653	parser	
38-14	5653-5654	 	
38-15	5654-5660	breaks	
38-16	5661-5664	the	
38-17	5665-5670	query	
38-18	5671-5675	into	
38-19	5676-5682	tokens	
38-20	5683-5686	and	
38-21	5687-5693	builds	
38-22	5694-5695	a	
38-23	5696-5697	“	
38-24	5697-5702	parse	
38-25	5703-5707	tree	
38-26	5707-5708	”	
38-27	5709-5713	from	
38-28	5714-5718	them	
38-29	5718-5719	.	

#Text=The parser uses MySQL’s SQL grammar to interpret and validate the query.
39-1	5720-5723	The	
39-2	5724-5730	parser	
39-3	5731-5735	uses	
39-4	5736-5741	MySQL	
39-5	5741-5742	’	
39-6	5742-5743	s	
39-7	5744-5747	SQL	
39-8	5748-5755	grammar	
39-9	5756-5758	to	
39-10	5759-5768	interpret	
39-11	5769-5772	and	
39-12	5773-5781	validate	
39-13	5782-5785	the	
39-14	5786-5791	query	
39-15	5791-5792	.	

#Text=For example, for mistakes such as quoted strings that aren’t terminated, or checking that tables and columns exist.
40-1	5793-5796	For	
40-2	5797-5804	example	
40-3	5804-5805	,	
40-4	5806-5809	for	
40-5	5810-5818	mistakes	
40-6	5819-5823	such	
40-7	5824-5826	as	
40-8	5827-5833	quoted	
40-9	5834-5841	strings	
40-10	5842-5846	that	
40-11	5847-5851	aren	
40-12	5851-5852	’	
40-13	5852-5853	t	
40-14	5854-5864	terminated	
40-15	5864-5865	,	
40-16	5866-5868	or	
40-17	5869-5877	checking	
40-18	5878-5882	that	
40-19	5883-5889	tables	
40-20	5890-5893	and	
40-21	5894-5901	columns	
40-22	5902-5907	exist	
40-23	5907-5908	.	

#Text=Next, the preprocessor checks privileges.
41-1	5909-5913	Next	
41-2	5913-5914	,	
41-3	5915-5918	the	
41-4	5919-5931	preprocessor	
41-5	5932-5938	checks	
41-6	5939-5949	privileges	
41-7	5949-5950	.	

#Text=This is normally very fast unless your server has large numbers of privileges.
42-1	5951-5955	This	
42-2	5956-5958	is	
42-3	5959-5967	normally	
42-4	5968-5972	very	
42-5	5973-5977	fast	
42-6	5978-5984	unless	
42-7	5985-5989	your	
42-8	5990-5996	server	
42-9	5997-6000	has	
42-10	6001-6006	large	
42-11	6007-6014	numbers	
42-12	6015-6017	of	
42-13	6018-6028	privileges	
42-14	6028-6029	.	

#Text=The query optimizer
#Text=The parse tree is now valid and ready for the optimizer to turn it into a query execution plan. 
43-1	6030-6033	The	
43-2	6034-6039	query	
43-3	6040-6049	optimizer	
43-4	6050-6053	The	
43-5	6054-6059	parse	
43-6	6060-6064	tree	
43-7	6065-6067	is	
43-8	6068-6071	now	
43-9	6072-6077	valid	
43-10	6078-6081	and	
43-11	6082-6087	ready	
43-12	6088-6091	for	
43-13	6092-6095	the	
43-14	6095-6096	 	
43-15	6096-6105	optimizer	
43-16	6105-6106	 	
43-17	6106-6108	to	
43-18	6109-6113	turn	
43-19	6114-6116	it	
43-20	6117-6121	into	
43-21	6122-6123	a	
43-22	6124-6129	query	
43-23	6130-6139	execution	
43-24	6140-6144	plan	
43-25	6144-6145	.	
43-26	6145-6146	 	

#Text=A query can often be executed many different ways and produce the same result. 
44-1	6146-6147	A	
44-2	6148-6153	query	
44-3	6154-6157	can	
44-4	6158-6163	often	
44-5	6164-6166	be	
44-6	6167-6175	executed	
44-7	6176-6180	many	
44-8	6181-6190	different	
44-9	6191-6195	ways	
44-10	6196-6199	and	
44-11	6200-6207	produce	
44-12	6208-6211	the	
44-13	6212-6216	same	
44-14	6217-6223	result	
44-15	6223-6224	.	
44-16	6224-6225	 	

#Text=The optimizer’s job is to find the best option.
45-1	6225-6228	The	
45-2	6229-6238	optimizer	
45-3	6238-6239	’	
45-4	6239-6240	s	
45-5	6241-6244	job	
45-6	6245-6247	is	
45-7	6248-6250	to	
45-8	6251-6255	find	
45-9	6256-6259	the	
45-10	6260-6264	best	
45-11	6265-6271	option	
45-12	6271-6272	.	

#Text=MySQL uses a cost-based optimizer, which means it tries to predict the cost of various execution plans and choose the least expensive.
46-1	6273-6278	MySQL	
46-2	6279-6283	uses	
46-3	6284-6285	a	
46-4	6286-6296	cost-based	
46-5	6297-6306	optimizer	
46-6	6306-6307	,	
46-7	6308-6313	which	
46-8	6314-6319	means	
46-9	6320-6322	it	
46-10	6323-6328	tries	
46-11	6329-6331	to	
46-12	6332-6339	predict	
46-13	6340-6343	the	
46-14	6344-6348	cost	
46-15	6349-6351	of	
46-16	6352-6359	various	
46-17	6360-6369	execution	
46-18	6370-6375	plans	
46-19	6376-6379	and	
46-20	6380-6386	choose	
46-21	6387-6390	the	
46-22	6391-6396	least	
46-23	6397-6406	expensive	
46-24	6406-6407	.	

#Text=It bases the estimate on statistics: the number of pages per table or index, the cardinality (number of distinct values) of the indexes, the length of the rows and keys, and the key distribution.
47-1	6408-6410	It	
47-2	6411-6416	bases	
47-3	6417-6420	the	
47-4	6421-6429	estimate	
47-5	6430-6432	on	
47-6	6433-6443	statistics	
47-7	6443-6444	:	
47-8	6445-6448	the	
47-9	6449-6455	number	
47-10	6456-6458	of	
47-11	6459-6464	pages	
47-12	6465-6468	per	
47-13	6469-6474	table	
47-14	6475-6477	or	
47-15	6478-6483	index	
47-16	6483-6484	,	
47-17	6485-6488	the	
47-18	6489-6500	cardinality	
47-19	6501-6502	(	
47-20	6502-6508	number	
47-21	6509-6511	of	
47-22	6512-6520	distinct	
47-23	6521-6527	values	
47-24	6527-6528	)	
47-25	6529-6531	of	
47-26	6532-6535	the	
47-27	6536-6543	indexes	
47-28	6543-6544	,	
47-29	6545-6548	the	
47-30	6549-6555	length	
47-31	6556-6558	of	
47-32	6559-6562	the	
47-33	6563-6567	rows	
47-34	6568-6571	and	
47-35	6572-6576	keys	
47-36	6576-6577	,	
47-37	6578-6581	and	
47-38	6582-6585	the	
47-39	6586-6589	key	
47-40	6590-6602	distribution	
47-41	6602-6603	.	

#Text=The optimizer does not include the effects of any type of caching in its estimates—it assumes every read will result in a disk I/O operation.
48-1	6604-6607	The	
48-2	6608-6617	optimizer	
48-3	6618-6622	does	
48-4	6623-6626	not	
48-5	6627-6634	include	
48-6	6635-6638	the	
48-7	6639-6646	effects	
48-8	6647-6649	of	
48-9	6650-6653	any	
48-10	6654-6658	type	
48-11	6659-6661	of	
48-12	6662-6669	caching	
48-13	6670-6672	in	
48-14	6673-6676	its	
48-15	6677-6689	estimates—it	
48-16	6690-6697	assumes	
48-17	6698-6703	every	
48-18	6704-6708	read	
48-19	6709-6713	will	
48-20	6714-6720	result	
48-21	6721-6723	in	
48-22	6724-6725	a	
48-23	6726-6730	disk	
48-24	6731-6732	I	
48-25	6732-6733	/	
48-26	6733-6734	O	
48-27	6735-6744	operation	
48-28	6744-6745	.	

#Text=The optimizer might not always choose the best plan, for many reasons:
#Text=The statistics could be wrong.
49-1	6746-6749	The	
49-2	6750-6759	optimizer	
49-3	6760-6765	might	
49-4	6766-6769	not	
49-5	6770-6776	always	
49-6	6777-6783	choose	
49-7	6784-6787	the	
49-8	6788-6792	best	
49-9	6793-6797	plan	
49-10	6797-6798	,	
49-11	6799-6802	for	
49-12	6803-6807	many	
49-13	6808-6815	reasons	
49-14	6815-6816	:	
49-15	6817-6820	The	
49-16	6821-6831	statistics	
49-17	6832-6837	could	
49-18	6838-6840	be	
49-19	6841-6846	wrong	
49-20	6846-6847	.	

#Text=The server relies on storage engines to provide statistics, and they can range from exactly correct to wildly inaccurate.
50-1	6848-6851	The	
50-2	6852-6858	server	
50-3	6859-6865	relies	
50-4	6866-6868	on	
50-5	6869-6876	storage	
50-6	6877-6884	engines	
50-7	6885-6887	to	
50-8	6888-6895	provide	
50-9	6896-6906	statistics	
50-10	6906-6907	,	
50-11	6908-6911	and	
50-12	6912-6916	they	
50-13	6917-6920	can	
50-14	6921-6926	range	
50-15	6927-6931	from	
50-16	6932-6939	exactly	
50-17	6940-6947	correct	
50-18	6948-6950	to	
50-19	6951-6957	wildly	
50-20	6958-6968	inaccurate	
50-21	6968-6969	.	

#Text=For example, the InnoDB storage engine doesn’t maintain accurate statistics about the number of rows in a table because of its MVCC architecture.The cost metric is not exactly equivalent to the true cost of running the query.
51-1	6970-6973	For	
51-2	6974-6981	example	
51-3	6981-6982	,	
51-4	6983-6986	the	
51-5	6987-6993	InnoDB	
51-6	6994-7001	storage	
51-7	7002-7008	engine	
51-8	7009-7014	doesn	
51-9	7014-7015	’	
51-10	7015-7016	t	
51-11	7017-7025	maintain	
51-12	7026-7034	accurate	
51-13	7035-7045	statistics	
51-14	7046-7051	about	
51-15	7052-7055	the	
51-16	7056-7062	number	
51-17	7063-7065	of	
51-18	7066-7070	rows	
51-19	7071-7073	in	
51-20	7074-7075	a	
51-21	7076-7081	table	
51-22	7082-7089	because	
51-23	7090-7092	of	
51-24	7093-7096	its	
51-25	7097-7101	MVCC	
51-26	7102-7118	architecture.The	
51-27	7119-7123	cost	
51-28	7124-7130	metric	
51-29	7131-7133	is	
51-30	7134-7137	not	
51-31	7138-7145	exactly	
51-32	7146-7156	equivalent	
51-33	7157-7159	to	
51-34	7160-7163	the	
51-35	7164-7168	true	
51-36	7169-7173	cost	
51-37	7174-7176	of	
51-38	7177-7184	running	
51-39	7185-7188	the	
51-40	7189-7194	query	
51-41	7194-7195	.	

#Text=It might be more or less expensive than MySQL’s approximation.
52-1	7196-7198	It	
52-2	7199-7204	might	
52-3	7205-7207	be	
52-4	7208-7212	more	
52-5	7213-7215	or	
52-6	7216-7220	less	
52-7	7221-7230	expensive	
52-8	7231-7235	than	
52-9	7236-7241	MySQL	
52-10	7241-7242	’	
52-11	7242-7243	s	
52-12	7244-7257	approximation	
52-13	7257-7258	.	

#Text=For example when MySQL doesn’t understand which pages are in memory and which pages are on disk, so it doesn’t really know how much I/O the query will cause.You probably want the fastest execution time, but MySQL doesn’t really try to make queries fast; it tries to minimize their cost.The optimizer can’t always estimate every possible execution plan, so it might miss an optimal plan.
53-1	7259-7262	For	
53-2	7263-7270	example	
53-3	7271-7275	when	
53-4	7276-7281	MySQL	
53-5	7282-7287	doesn	
53-6	7287-7288	’	
53-7	7288-7289	t	
53-8	7290-7300	understand	
53-9	7301-7306	which	
53-10	7307-7312	pages	
53-11	7313-7316	are	
53-12	7317-7319	in	
53-13	7320-7326	memory	
53-14	7327-7330	and	
53-15	7331-7336	which	
53-16	7337-7342	pages	
53-17	7343-7346	are	
53-18	7347-7349	on	
53-19	7350-7354	disk	
53-20	7354-7355	,	
53-21	7356-7358	so	
53-22	7359-7361	it	
53-23	7362-7367	doesn	
53-24	7367-7368	’	
53-25	7368-7369	t	
53-26	7370-7376	really	
53-27	7377-7381	know	
53-28	7382-7385	how	
53-29	7386-7390	much	
53-30	7391-7392	I	
53-31	7392-7393	/	
53-32	7393-7394	O	
53-33	7395-7398	the	
53-34	7399-7404	query	
53-35	7405-7409	will	
53-36	7410-7419	cause.You	
53-37	7420-7428	probably	
53-38	7429-7433	want	
53-39	7434-7437	the	
53-40	7438-7445	fastest	
53-41	7446-7455	execution	
53-42	7456-7460	time	
53-43	7460-7461	,	
53-44	7462-7465	but	
53-45	7466-7471	MySQL	
53-46	7472-7477	doesn	
53-47	7477-7478	’	
53-48	7478-7479	t	
53-49	7480-7486	really	
53-50	7487-7490	try	
53-51	7491-7493	to	
53-52	7494-7498	make	
53-53	7499-7506	queries	
53-54	7507-7511	fast	
53-55	7511-7512	;	
53-56	7513-7515	it	
53-57	7516-7521	tries	
53-58	7522-7524	to	
53-59	7525-7533	minimize	
53-60	7534-7539	their	
53-61	7540-7548	cost.The	
53-62	7549-7558	optimizer	
53-63	7559-7562	can	
53-64	7562-7563	’	
53-65	7563-7564	t	
53-66	7565-7571	always	
53-67	7572-7580	estimate	
53-68	7581-7586	every	
53-69	7587-7595	possible	
53-70	7596-7605	execution	
53-71	7606-7610	plan	
53-72	7610-7611	,	
53-73	7612-7614	so	
53-74	7615-7617	it	
53-75	7618-7623	might	
53-76	7624-7628	miss	
53-77	7629-7631	an	
53-78	7632-7639	optimal	
53-79	7640-7644	plan	
53-80	7644-7645	.	

#Text=MySQL’s query optimizer can apply Static optimizations such as those independent of values, For example, constant values in a WHERE clause.
54-1	7646-7651	MySQL	
54-2	7651-7652	’	
54-3	7652-7653	s	
54-4	7654-7659	query	
54-5	7660-7669	optimizer	
54-6	7670-7673	can	
54-7	7674-7679	apply	
54-8	7680-7686	Static	
54-9	7687-7700	optimizations	
54-10	7701-7705	such	
54-11	7706-7708	as	
54-12	7709-7714	those	
54-13	7715-7726	independent	
54-14	7727-7729	of	
54-15	7730-7736	values	
54-16	7736-7737	,	
54-17	7738-7741	For	
54-18	7742-7749	example	
54-19	7749-7750	,	
54-20	7751-7759	constant	
54-21	7760-7766	values	
54-22	7767-7769	in	
54-23	7770-7771	a	
54-24	7772-7777	WHERE	
54-25	7778-7784	clause	
54-26	7784-7785	.	

#Text=They can be performed once and will always be valid, even when the query is re-executed.
55-1	7786-7790	They	
55-2	7791-7794	can	
55-3	7795-7797	be	
55-4	7798-7807	performed	
55-5	7808-7812	once	
55-6	7813-7816	and	
55-7	7817-7821	will	
55-8	7822-7828	always	
55-9	7829-7831	be	
55-10	7832-7837	valid	
55-11	7837-7838	,	
55-12	7839-7843	even	
55-13	7844-7848	when	
55-14	7849-7852	the	
55-15	7853-7858	query	
55-16	7859-7861	is	
55-17	7862-7873	re-executed	
55-18	7873-7874	.	

#Text=In contrast, dynamic optimizations are based on context and can depend on many factors, such as which value is in a WHERE clause or how many rows are in an index.
56-1	7875-7877	In	
56-2	7878-7886	contrast	
56-3	7886-7887	,	
56-4	7888-7895	dynamic	
56-5	7896-7909	optimizations	
56-6	7910-7913	are	
56-7	7914-7919	based	
56-8	7920-7922	on	
56-9	7923-7930	context	
56-10	7931-7934	and	
56-11	7935-7938	can	
56-12	7939-7945	depend	
56-13	7946-7948	on	
56-14	7949-7953	many	
56-15	7954-7961	factors	
56-16	7961-7962	,	
56-17	7963-7967	such	
56-18	7968-7970	as	
56-19	7971-7976	which	
56-20	7977-7982	value	
56-21	7983-7985	is	
56-22	7986-7988	in	
56-23	7989-7990	a	
56-24	7991-7996	WHERE	
56-25	7997-8003	clause	
56-26	8004-8006	or	
56-27	8007-8010	how	
56-28	8011-8015	many	
56-29	8016-8020	rows	
56-30	8021-8024	are	
56-31	8025-8027	in	
56-32	8028-8030	an	
56-33	8031-8036	index	
56-34	8036-8037	.	

#Text=They must be reevaluated each time the query is executed.
57-1	8038-8042	They	
57-2	8043-8047	must	
57-3	8048-8050	be	
57-4	8051-8062	reevaluated	
57-5	8063-8067	each	
57-6	8068-8072	time	
57-7	8073-8076	the	
57-8	8077-8082	query	
57-9	8083-8085	is	
57-10	8086-8094	executed	
57-11	8094-8095	.	

#Text=You can think of these as “runtime optimizations.”
58-1	8096-8099	You	
58-2	8100-8103	can	
58-3	8104-8109	think	
58-4	8110-8112	of	
58-5	8113-8118	these	
58-6	8119-8121	as	
58-7	8122-8123	“	
58-8	8123-8130	runtime	
58-9	8131-8144	optimizations	
58-10	8144-8145	.	
58-11	8145-8146	”	

#Text=MySQL knows how to do a lot of optimizations on its own such as Reordering joins, converting joins, Applying algebraic equivalence rules, COUNT(), MIN(), and MAX() optimizations, Subquery optimization, and so on.
59-1	8147-8152	MySQL	
59-2	8153-8158	knows	
59-3	8159-8162	how	
59-4	8163-8165	to	
59-5	8166-8168	do	
59-6	8169-8170	a	
59-7	8171-8174	lot	
59-8	8175-8177	of	
59-9	8178-8191	optimizations	
59-10	8192-8194	on	
59-11	8195-8198	its	
59-12	8199-8202	own	
59-13	8203-8207	such	
59-14	8208-8210	as	
59-15	8211-8221	Reordering	
59-16	8222-8227	joins	
59-17	8227-8228	,	
59-18	8229-8239	converting	
59-19	8240-8245	joins	
59-20	8245-8246	,	
59-21	8247-8255	Applying	
59-22	8256-8265	algebraic	
59-23	8266-8277	equivalence	
59-24	8278-8283	rules	
59-25	8283-8284	,	
59-26	8285-8290	COUNT	
59-27	8290-8291	(	
59-28	8291-8292	)	
59-29	8292-8293	,	
59-30	8294-8297	MIN	
59-31	8297-8298	(	
59-32	8298-8299	)	
59-33	8299-8300	,	
59-34	8301-8304	and	
59-35	8305-8308	MAX	
59-36	8308-8309	(	
59-37	8309-8310	)	
59-38	8311-8324	optimizations	
59-39	8324-8325	,	
59-40	8326-8334	Subquery	
59-41	8335-8347	optimization	
59-42	8347-8348	,	
59-43	8349-8352	and	
59-44	8353-8355	so	
59-45	8356-8358	on	
59-46	8358-8359	.	

#Text=Of course, as smart as the optimizer is, there are times when it doesn’t give the best result.
60-1	8360-8362	Of	
60-2	8363-8369	course	
60-3	8369-8370	,	
60-4	8371-8373	as	
60-5	8374-8379	smart	
60-6	8380-8382	as	
60-7	8383-8386	the	
60-8	8387-8396	optimizer	
60-9	8397-8399	is	
60-10	8399-8400	,	
60-11	8401-8406	there	
60-12	8407-8410	are	
60-13	8411-8416	times	
60-14	8417-8421	when	
60-15	8422-8424	it	
60-16	8425-8430	doesn	
60-17	8430-8431	’	
60-18	8431-8432	t	
60-19	8433-8437	give	
60-20	8438-8441	the	
60-21	8442-8446	best	
60-22	8447-8453	result	
60-23	8453-8454	.	

#Text=Sometimes you might know something about the data that the optimizer doesn’t.
61-1	8455-8464	Sometimes	
61-2	8465-8468	you	
61-3	8469-8474	might	
61-4	8475-8479	know	
61-5	8480-8489	something	
61-6	8490-8495	about	
61-7	8496-8499	the	
61-8	8500-8504	data	
61-9	8505-8509	that	
61-10	8510-8513	the	
61-11	8514-8523	optimizer	
61-12	8524-8529	doesn	
61-13	8529-8530	’	
61-14	8530-8531	t	
61-15	8531-8532	.	

#Text=If you know the optimizer isn’t giving a good result, and you know why, you can help it.
62-1	8533-8535	If	
62-2	8536-8539	you	
62-3	8540-8544	know	
62-4	8545-8548	the	
62-5	8549-8558	optimizer	
62-6	8559-8562	isn	
62-7	8562-8563	’	
62-8	8563-8564	t	
62-9	8565-8571	giving	
62-10	8572-8573	a	
62-11	8574-8578	good	
62-12	8579-8585	result	
62-13	8585-8586	,	
62-14	8587-8590	and	
62-15	8591-8594	you	
62-16	8595-8599	know	
62-17	8600-8603	why	
62-18	8603-8604	,	
62-19	8605-8608	you	
62-20	8609-8612	can	
62-21	8613-8617	help	
62-22	8618-8620	it	
62-23	8620-8621	.	

#Text=Some of the options are to add a hint to the query, rewrite the query, redesign your schema, or add indexes as we’ll see in future sections.
63-1	8622-8626	Some	
63-2	8627-8629	of	
63-3	8630-8633	the	
63-4	8634-8641	options	
63-5	8642-8645	are	
63-6	8646-8648	to	
63-7	8649-8652	add	
63-8	8653-8654	a	
63-9	8655-8659	hint	
63-10	8660-8662	to	
63-11	8663-8666	the	
63-12	8667-8672	query	
63-13	8672-8673	,	
63-14	8674-8681	rewrite	
63-15	8682-8685	the	
63-16	8686-8691	query	
63-17	8691-8692	,	
63-18	8693-8701	redesign	
63-19	8702-8706	your	
63-20	8707-8713	schema	
63-21	8713-8714	,	
63-22	8715-8717	or	
63-23	8718-8721	add	
63-24	8722-8729	indexes	
63-25	8730-8732	as	
63-26	8733-8735	we	
63-27	8735-8736	’	
63-28	8736-8738	ll	
63-29	8739-8742	see	
63-30	8743-8745	in	
63-31	8746-8752	future	
63-32	8753-8761	sections	
63-33	8761-8762	.	

#Text=The query execution engine
#Text=The parsing and optimizing stage outputs a query execution plan, which MySQL’s query execution engine uses to process the query.
64-1	8763-8766	The	
64-2	8767-8772	query	
64-3	8773-8782	execution	
64-4	8783-8789	engine	
64-5	8790-8793	The	
64-6	8794-8801	parsing	
64-7	8802-8805	and	
64-8	8806-8816	optimizing	
64-9	8817-8822	stage	
64-10	8823-8830	outputs	
64-11	8831-8832	a	
64-12	8833-8838	query	
64-13	8839-8848	execution	
64-14	8849-8853	plan	
64-15	8853-8854	,	
64-16	8855-8860	which	
64-17	8861-8866	MySQL	
64-18	8866-8867	’	
64-19	8867-8868	s	
64-20	8869-8874	query	
64-21	8875-8884	execution	
64-22	8885-8891	engine	
64-23	8892-8896	uses	
64-24	8897-8899	to	
64-25	8900-8907	process	
64-26	8908-8911	the	
64-27	8912-8917	query	
64-28	8917-8918	.	

#Text=In contrast to the optimization stage, the execution stage is usually not all that complex: MySQL simply follows the instructions given in the query execution plan.
65-1	8919-8921	In	
65-2	8922-8930	contrast	
65-3	8931-8933	to	
65-4	8934-8937	the	
65-5	8938-8950	optimization	
65-6	8951-8956	stage	
65-7	8956-8957	,	
65-8	8958-8961	the	
65-9	8962-8971	execution	
65-10	8972-8977	stage	
65-11	8978-8980	is	
65-12	8981-8988	usually	
65-13	8989-8992	not	
65-14	8993-8996	all	
65-15	8997-9001	that	
65-16	9002-9009	complex	
65-17	9009-9010	:	
65-18	9011-9016	MySQL	
65-19	9017-9023	simply	
65-20	9024-9031	follows	
65-21	9032-9035	the	
65-22	9036-9048	instructions	
65-23	9049-9054	given	
65-24	9055-9057	in	
65-25	9058-9061	the	
65-26	9062-9067	query	
65-27	9068-9077	execution	
65-28	9078-9082	plan	
65-29	9082-9083	.	

#Text=Many of the operations in the plan invoke methods implemented by the storage engine interface, also known as the handler API.
66-1	9084-9088	Many	
66-2	9089-9091	of	
66-3	9092-9095	the	
66-4	9096-9106	operations	
66-5	9107-9109	in	
66-6	9110-9113	the	
66-7	9114-9118	plan	
66-8	9119-9125	invoke	
66-9	9126-9133	methods	
66-10	9134-9145	implemented	
66-11	9146-9148	by	
66-12	9149-9152	the	
66-13	9153-9160	storage	
66-14	9161-9167	engine	
66-15	9168-9177	interface	
66-16	9177-9178	,	
66-17	9179-9183	also	
66-18	9184-9189	known	
66-19	9190-9192	as	
66-20	9193-9196	the	
66-21	9197-9204	handler	
66-22	9205-9208	API	
66-23	9208-9209	.	

#Text=Returning results to the client
#Text=The final step in executing a query is to reply to the client.
67-1	9210-9219	Returning	
67-2	9220-9227	results	
67-3	9228-9230	to	
67-4	9231-9234	the	
67-5	9235-9241	client	
67-6	9242-9245	The	
67-7	9246-9251	final	
67-8	9252-9256	step	
67-9	9257-9259	in	
67-10	9260-9269	executing	
67-11	9270-9271	a	
67-12	9272-9277	query	
67-13	9278-9280	is	
67-14	9281-9283	to	
67-15	9284-9289	reply	
67-16	9290-9292	to	
67-17	9293-9296	the	
67-18	9297-9303	client	
67-19	9303-9304	.	

#Text=Even queries that don’t return a result set still reply to the client connection with information about the query, such as how many rows it affected.
68-1	9305-9309	Even	
68-2	9310-9317	queries	
68-3	9318-9322	that	
68-4	9323-9326	don	
68-5	9326-9327	’	
68-6	9327-9328	t	
68-7	9329-9335	return	
68-8	9336-9337	a	
68-9	9338-9344	result	
68-10	9345-9348	set	
68-11	9349-9354	still	
68-12	9355-9360	reply	
68-13	9361-9363	to	
68-14	9364-9367	the	
68-15	9368-9374	client	
68-16	9375-9385	connection	
68-17	9386-9390	with	
68-18	9391-9402	information	
68-19	9403-9408	about	
68-20	9409-9412	the	
68-21	9413-9418	query	
68-22	9418-9419	,	
68-23	9420-9424	such	
68-24	9425-9427	as	
68-25	9428-9431	how	
68-26	9432-9436	many	
68-27	9437-9441	rows	
68-28	9442-9444	it	
68-29	9445-9453	affected	
68-30	9453-9454	.	

#Text=If the query is cacheable, MySQL will also place the results into the query cache at this stage.
69-1	9455-9457	If	
69-2	9458-9461	the	
69-3	9462-9467	query	
69-4	9468-9470	is	
69-5	9471-9480	cacheable	
69-6	9480-9481	,	
69-7	9482-9487	MySQL	
69-8	9488-9492	will	
69-9	9493-9497	also	
69-10	9498-9503	place	
69-11	9504-9507	the	
69-12	9508-9515	results	
69-13	9516-9520	into	
69-14	9521-9524	the	
69-15	9525-9530	query	
69-16	9531-9536	cache	
69-17	9537-9539	at	
69-18	9540-9544	this	
69-19	9545-9550	stage	
69-20	9550-9551	.	

#Text=Storage Engine Layer
#Text=The third layer contains the storage engines.
70-1	9552-9559	Storage	
70-2	9560-9566	Engine	
70-3	9567-9572	Layer	
70-4	9573-9576	The	
70-5	9577-9582	third	
70-6	9583-9588	layer	
70-7	9589-9597	contains	
70-8	9598-9601	the	
70-9	9602-9609	storage	
70-10	9610-9617	engines	
70-11	9617-9618	.	

#Text=They are responsible for storing and retrieving all data stored “in” MySQL.
71-1	9619-9623	They	
71-2	9624-9627	are	
71-3	9628-9639	responsible	
71-4	9640-9643	for	
71-5	9644-9651	storing	
71-6	9652-9655	and	
71-7	9656-9666	retrieving	
71-8	9667-9670	all	
71-9	9671-9675	data	
71-10	9676-9682	stored	
71-11	9683-9684	“	
71-12	9684-9686	in	
71-13	9686-9687	”	
71-14	9688-9693	MySQL	
71-15	9693-9694	.	

#Text=They are implemented as plugins which makes it relatively easy to implement different ways to handle data.
72-1	9695-9699	They	
72-2	9700-9703	are	
72-3	9704-9715	implemented	
72-4	9716-9718	as	
72-5	9719-9726	plugins	
72-6	9727-9732	which	
72-7	9733-9738	makes	
72-8	9739-9741	it	
72-9	9742-9752	relatively	
72-10	9753-9757	easy	
72-11	9758-9760	to	
72-12	9761-9770	implement	
72-13	9771-9780	different	
72-14	9781-9785	ways	
72-15	9786-9788	to	
72-16	9789-9795	handle	
72-17	9796-9800	data	
72-18	9800-9801	.	

#Text=The main storage engine – and the only one that will be considered in this guide – is InnoDB which is fully transactional and has very good support for high-concurrency workloads.
73-1	9802-9805	The	
73-2	9806-9810	main	
73-3	9811-9818	storage	
73-4	9819-9825	engine	
73-5	9825-9826	 	
73-6	9826-9827	–	
73-7	9828-9831	and	
73-8	9832-9835	the	
73-9	9836-9840	only	
73-10	9841-9844	one	
73-11	9845-9849	that	
73-12	9850-9854	will	
73-13	9855-9857	be	
73-14	9858-9868	considered	
73-15	9869-9871	in	
73-16	9872-9876	this	
73-17	9877-9882	guide	
73-18	9882-9883	 	
73-19	9883-9884	–	
73-20	9885-9887	is	
73-21	9888-9894	InnoDB	
73-22	9895-9900	which	
73-23	9901-9903	is	
73-24	9904-9909	fully	
73-25	9910-9923	transactional	
73-26	9924-9927	and	
73-27	9928-9931	has	
73-28	9932-9936	very	
73-29	9937-9941	good	
73-30	9942-9949	support	
73-31	9950-9953	for	
73-32	9954-9970	high-concurrency	
73-33	9971-9980	workloads	
73-34	9980-9981	.	

#Text=An example of another storage engine is NDBCluster which is also transactional and is used as part of MySQL NDB Cluster.
74-1	9982-9984	An	
74-2	9985-9992	example	
74-3	9993-9995	of	
74-4	9996-10003	another	
74-5	10004-10011	storage	
74-6	10012-10018	engine	
74-7	10019-10021	is	
74-8	10022-10032	NDBCluster	
74-9	10033-10038	which	
74-10	10039-10041	is	
74-11	10042-10046	also	
74-12	10047-10060	transactional	
74-13	10061-10064	and	
74-14	10065-10067	is	
74-15	10068-10072	used	
74-16	10073-10075	as	
74-17	10076-10080	part	
74-18	10081-10083	of	
74-19	10084-10089	MySQL	
74-20	10090-10093	NDB	
74-21	10094-10101	Cluster	
74-22	10101-10102	.	

#Text=The optimizer does not really care what storage engine a particular table uses, but the storage engine does affect how the server optimizes the query.
75-1	10103-10106	The	
75-2	10107-10116	optimizer	
75-3	10117-10121	does	
75-4	10122-10125	not	
75-5	10126-10132	really	
75-6	10133-10137	care	
75-7	10138-10142	what	
75-8	10143-10150	storage	
75-9	10151-10157	engine	
75-10	10158-10159	a	
75-11	10160-10170	particular	
75-12	10171-10176	table	
75-13	10177-10181	uses	
75-14	10181-10182	,	
75-15	10183-10186	but	
75-16	10187-10190	the	
75-17	10191-10198	storage	
75-18	10199-10205	engine	
75-19	10206-10210	does	
75-20	10211-10217	affect	
75-21	10218-10221	how	
75-22	10222-10225	the	
75-23	10226-10232	server	
75-24	10233-10242	optimizes	
75-25	10243-10246	the	
75-26	10247-10252	query	
75-27	10252-10253	.	

#Text=The optimizer asks the storage engine about some of its capabilities and the cost of certain operations, and for statistics on the table data.
76-1	10254-10257	The	
76-2	10258-10267	optimizer	
76-3	10268-10272	asks	
76-4	10273-10276	the	
76-5	10277-10284	storage	
76-6	10285-10291	engine	
76-7	10292-10297	about	
76-8	10298-10302	some	
76-9	10303-10305	of	
76-10	10306-10309	its	
76-11	10310-10322	capabilities	
76-12	10323-10326	and	
76-13	10327-10330	the	
76-14	10331-10335	cost	
76-15	10336-10338	of	
76-16	10339-10346	certain	
76-17	10347-10357	operations	
76-18	10357-10358	,	
76-19	10359-10362	and	
76-20	10363-10366	for	
76-21	10367-10377	statistics	
76-22	10378-10380	on	
76-23	10381-10384	the	
76-24	10385-10390	table	
76-25	10391-10395	data	
76-26	10395-10396	.	

#Text=The storage engine may itself be complex.
77-1	10397-10400	The	
77-2	10401-10408	storage	
77-3	10409-10415	engine	
77-4	10416-10419	may	
77-5	10420-10426	itself	
77-6	10427-10429	be	
77-7	10430-10437	complex	
77-8	10437-10438	.	

#Text=For InnoDB, it includes a buffer pool used to cache data and indexes, redo and undo logs, other buffers, as well as tablespace files.
78-1	10439-10442	For	
78-2	10443-10449	InnoDB	
78-3	10449-10450	,	
78-4	10451-10453	it	
78-5	10454-10462	includes	
78-6	10463-10464	a	
78-7	10465-10471	buffer	
78-8	10472-10476	pool	
78-9	10477-10481	used	
78-10	10482-10484	to	
78-11	10485-10490	cache	
78-12	10491-10495	data	
78-13	10496-10499	and	
78-14	10500-10507	indexes	
78-15	10507-10508	,	
78-16	10509-10513	redo	
78-17	10514-10517	and	
78-18	10518-10522	undo	
78-19	10523-10527	logs	
78-20	10527-10528	,	
78-21	10529-10534	other	
78-22	10535-10542	buffers	
78-23	10542-10543	,	
78-24	10544-10546	as	
78-25	10547-10551	well	
78-26	10552-10554	as	
78-27	10555-10565	tablespace	
78-28	10566-10571	files	
78-29	10571-10572	.	

#Text=If the query returns rows, these are sent back from the storage engine through the SQL layer to the application.
79-1	10573-10575	If	
79-2	10576-10579	the	
79-3	10580-10585	query	
79-4	10586-10593	returns	
79-5	10594-10598	rows	
79-6	10598-10599	,	
79-7	10600-10605	these	
79-8	10606-10609	are	
79-9	10610-10614	sent	
79-10	10615-10619	back	
79-11	10620-10624	from	
79-12	10625-10628	the	
79-13	10629-10636	storage	
79-14	10637-10643	engine	
79-15	10644-10651	through	
79-16	10652-10655	the	
79-17	10656-10659	SQL	
79-18	10660-10665	layer	
79-19	10666-10668	to	
79-20	10669-10672	the	
79-21	10673-10684	application	
79-22	10684-10685	.	

#Text=Before even parsing the query, though, the server consults the query cache, which can store only SELECT statements, along with their result sets.
80-1	10686-10692	Before	
80-2	10693-10697	even	
80-3	10698-10705	parsing	
80-4	10706-10709	the	
80-5	10710-10715	query	
80-6	10715-10716	,	
80-7	10717-10723	though	
80-8	10723-10724	,	
80-9	10725-10728	the	
80-10	10729-10735	server	
80-11	10736-10744	consults	
80-12	10745-10748	the	
80-13	10749-10754	query	
80-14	10755-10760	cache	
80-15	10760-10761	,	
80-16	10762-10767	which	
80-17	10768-10771	can	
80-18	10772-10777	store	
80-19	10778-10782	only	
80-20	10783-10789	SELECT	
80-21	10790-10800	statements	
80-22	10800-10801	,	
80-23	10802-10807	along	
80-24	10808-10812	with	
80-25	10813-10818	their	
80-26	10819-10825	result	
80-27	10826-10830	sets	
80-28	10830-10831	.	

#Text=If anyone issues a query that’s identical to one already in the cache, the server doesn’t need to parse, optimize, or execute the query at all—it can simply pass back the stored result set.
81-1	10832-10834	If	
81-2	10835-10841	anyone	
81-3	10842-10848	issues	
81-4	10849-10850	a	
81-5	10851-10856	query	
81-6	10857-10861	that	
81-7	10861-10862	’	
81-8	10862-10863	s	
81-9	10864-10873	identical	
81-10	10874-10876	to	
81-11	10877-10880	one	
81-12	10881-10888	already	
81-13	10889-10891	in	
81-14	10892-10895	the	
81-15	10896-10901	cache	
81-16	10901-10902	,	
81-17	10903-10906	the	
81-18	10907-10913	server	
81-19	10914-10919	doesn	
81-20	10919-10920	’	
81-21	10920-10921	t	
81-22	10922-10926	need	
81-23	10927-10929	to	
81-24	10930-10935	parse	
81-25	10935-10936	,	
81-26	10937-10945	optimize	
81-27	10945-10946	,	
81-28	10947-10949	or	
81-29	10950-10957	execute	
81-30	10958-10961	the	
81-31	10962-10967	query	
81-32	10968-10970	at	
81-33	10971-10977	all—it	
81-34	10978-10981	can	
81-35	10982-10988	simply	
81-36	10989-10993	pass	
81-37	10994-10998	back	
81-38	10999-11002	the	
81-39	11003-11009	stored	
81-40	11010-11016	result	
81-41	11017-11020	set	
81-42	11020-11021	.	

#Text=In query tuning, the most important steps are the optimizer and execution steps including the storage engine.
82-1	11022-11024	In	
82-2	11025-11030	query	
82-3	11031-11037	tuning	
82-4	11037-11038	,	
82-5	11039-11042	the	
82-6	11043-11047	most	
82-7	11048-11057	important	
82-8	11058-11063	steps	
82-9	11064-11067	are	
82-10	11068-11071	the	
82-11	11072-11081	optimizer	
82-12	11082-11085	and	
82-13	11086-11095	execution	
82-14	11096-11101	steps	
82-15	11102-11111	including	
82-16	11112-11115	the	
82-17	11116-11123	storage	
82-18	11124-11130	engine	
82-19	11130-11131	.	

#Text=Most of the information in this guide relates to these three parts either directly or indirectly.
83-1	11132-11136	Most	
83-2	11137-11139	of	
83-3	11140-11143	the	
83-4	11144-11155	information	
83-5	11156-11158	in	
83-6	11159-11163	this	
83-7	11164-11169	guide	
83-8	11170-11177	relates	
83-9	11178-11180	to	
83-10	11181-11186	these	
83-11	11187-11192	three	
83-12	11193-11198	parts	
83-13	11199-11205	either	
83-14	11206-11214	directly	
83-15	11215-11217	or	
83-16	11218-11228	indirectly	
83-17	11228-11229	.	

#Text=The InnoDB Engine
#Text=InnoDB is a general-purpose storage engine that balances high reliability and high performance and it was designed for processing many short-lived transactions.
84-1	11230-11233	The	
84-2	11234-11240	InnoDB	
84-3	11241-11247	Engine	
84-4	11248-11254	InnoDB	
84-5	11255-11257	is	
84-6	11258-11259	a	
84-7	11260-11275	general-purpose	
84-8	11276-11283	storage	
84-9	11284-11290	engine	
84-10	11291-11295	that	
84-11	11296-11304	balances	
84-12	11305-11309	high	
84-13	11310-11321	reliability	
84-14	11322-11325	and	
84-15	11326-11330	high	
84-16	11331-11342	performance	
84-17	11343-11346	and	
84-18	11347-11349	it	
84-19	11350-11353	was	
84-20	11354-11362	designed	
84-21	11363-11366	for	
84-22	11367-11377	processing	
84-23	11378-11382	many	
84-24	11383-11394	short-lived	
84-25	11395-11407	transactions	
84-26	11407-11408	.	

#Text=You should use InnoDB for your tables unless you have a compelling need to use a different engine.
85-1	11409-11412	You	
85-2	11413-11419	should	
85-3	11420-11423	use	
85-4	11424-11430	InnoDB	
85-5	11431-11434	for	
85-6	11435-11439	your	
85-7	11440-11446	tables	
85-8	11447-11453	unless	
85-9	11454-11457	you	
85-10	11458-11462	have	
85-11	11463-11464	a	
85-12	11465-11475	compelling	
85-13	11476-11480	need	
85-14	11481-11483	to	
85-15	11484-11487	use	
85-16	11488-11489	a	
85-17	11490-11499	different	
85-18	11500-11506	engine	
85-19	11506-11507	.	

#Text=If you want to study storage engines, it is also well worth your time to study InnoDB in depth to learn as much as you can about it, rather than studying all storage engines equally.
86-1	11508-11510	If	
86-2	11511-11514	you	
86-3	11515-11519	want	
86-4	11520-11522	to	
86-5	11523-11528	study	
86-6	11529-11536	storage	
86-7	11537-11544	engines	
86-8	11544-11545	,	
86-9	11546-11548	it	
86-10	11549-11551	is	
86-11	11552-11556	also	
86-12	11557-11561	well	
86-13	11562-11567	worth	
86-14	11568-11572	your	
86-15	11573-11577	time	
86-16	11578-11580	to	
86-17	11581-11586	study	
86-18	11587-11593	InnoDB	
86-19	11594-11596	in	
86-20	11597-11602	depth	
86-21	11603-11605	to	
86-22	11606-11611	learn	
86-23	11612-11614	as	
86-24	11615-11619	much	
86-25	11620-11622	as	
86-26	11623-11626	you	
86-27	11627-11630	can	
86-28	11631-11636	about	
86-29	11637-11639	it	
86-30	11639-11640	,	
86-31	11641-11647	rather	
86-32	11648-11652	than	
86-33	11653-11661	studying	
86-34	11662-11665	all	
86-35	11666-11673	storage	
86-36	11674-11681	engines	
86-37	11682-11689	equally	
86-38	11689-11690	.	

#Text=InnoDB tables are built on a clustered index and is the term used for how InnoDB organizes the data.
87-1	11691-11697	InnoDB	
87-2	11698-11704	tables	
87-3	11705-11708	are	
87-4	11709-11714	built	
87-5	11715-11717	on	
87-6	11718-11719	a	
87-7	11720-11729	clustered	
87-8	11730-11735	index	
87-9	11736-11739	and	
87-10	11740-11742	is	
87-11	11743-11746	the	
87-12	11747-11751	term	
87-13	11752-11756	used	
87-14	11757-11760	for	
87-15	11761-11764	how	
87-16	11765-11771	InnoDB	
87-17	11772-11781	organizes	
87-18	11782-11785	the	
87-19	11786-11790	data	
87-20	11790-11791	.	

#Text=The name comes from the fact that index values are clustered together.
88-1	11792-11795	The	
88-2	11796-11800	name	
88-3	11801-11806	comes	
88-4	11807-11811	from	
88-5	11812-11815	the	
88-6	11816-11820	fact	
88-7	11821-11825	that	
88-8	11826-11831	index	
88-9	11832-11838	values	
88-10	11839-11842	are	
88-11	11843-11852	clustered	
88-12	11853-11861	together	
88-13	11861-11862	.	

#Text=Everything in InnoDB is an index.
89-1	11863-11873	Everything	
89-2	11874-11876	in	
89-3	11877-11883	InnoDB	
89-4	11884-11886	is	
89-5	11887-11889	an	
89-6	11890-11895	index	
89-7	11895-11896	.	

#Text=The row data is in the leaf pages of a B-tree index.
90-1	11897-11900	The	
90-2	11901-11904	row	
90-3	11905-11909	data	
90-4	11910-11912	is	
90-5	11913-11915	in	
90-6	11916-11919	the	
90-7	11920-11924	leaf	
90-8	11925-11930	pages	
90-9	11931-11933	of	
90-10	11934-11935	a	
90-11	11936-11942	B-tree	
90-12	11943-11948	index	
90-13	11948-11949	.	

#Text=The primary key is used for the clustered index.
91-1	11950-11953	The	
91-2	11954-11961	primary	
91-3	11962-11965	key	
91-4	11966-11968	is	
91-5	11969-11973	used	
91-6	11974-11977	for	
91-7	11978-11981	the	
91-8	11982-11991	clustered	
91-9	11992-11997	index	
91-10	11997-11998	.	

#Text=If you do not specify an explicit primary key, InnoDB will look for a unique index that does not allow NULL values.
92-1	11999-12001	If	
92-2	12002-12005	you	
92-3	12006-12008	do	
92-4	12009-12012	not	
92-5	12013-12020	specify	
92-6	12021-12023	an	
92-7	12024-12032	explicit	
92-8	12033-12040	primary	
92-9	12041-12044	key	
92-10	12044-12045	,	
92-11	12046-12052	InnoDB	
92-12	12053-12057	will	
92-13	12058-12062	look	
92-14	12063-12066	for	
92-15	12067-12068	a	
92-16	12069-12075	unique	
92-17	12076-12081	index	
92-18	12082-12086	that	
92-19	12087-12091	does	
92-20	12092-12095	not	
92-21	12096-12101	allow	
92-22	12102-12106	NULL	
92-23	12107-12113	values	
92-24	12113-12114	.	

#Text=If that does not exist either, InnoDB will add a hidden 6-byte integer column using a global (for all InnoDB tables) auto-increment value to generate a unique value.
93-1	12115-12117	If	
93-2	12118-12122	that	
93-3	12123-12127	does	
93-4	12128-12131	not	
93-5	12132-12137	exist	
93-6	12138-12144	either	
93-7	12144-12145	,	
93-8	12146-12152	InnoDB	
93-9	12153-12157	will	
93-10	12158-12161	add	
93-11	12162-12163	a	
93-12	12164-12170	hidden	
93-13	12171-12172	6	
93-14	12172-12173	-	
93-15	12173-12177	byte	
93-16	12178-12185	integer	
93-17	12186-12192	column	
93-18	12193-12198	using	
93-19	12199-12200	a	
93-20	12201-12207	global	
93-21	12208-12209	(	
93-22	12209-12212	for	
93-23	12213-12216	all	
93-24	12217-12223	InnoDB	
93-25	12224-12230	tables	
93-26	12230-12231	)	
93-27	12232-12246	auto-increment	
93-28	12247-12252	value	
93-29	12253-12255	to	
93-30	12256-12264	generate	
93-31	12265-12266	a	
93-32	12267-12273	unique	
93-33	12274-12279	value	
93-34	12279-12280	.	

#Text=As a result, it provides very fast primary key lookups.
94-1	12281-12283	As	
94-2	12284-12285	a	
94-3	12286-12292	result	
94-4	12292-12293	,	
94-5	12294-12296	it	
94-6	12297-12305	provides	
94-7	12306-12310	very	
94-8	12311-12315	fast	
94-9	12316-12323	primary	
94-10	12324-12327	key	
94-11	12328-12335	lookups	
94-12	12335-12336	.	

#Text=However, secondary indexes (indexes that aren’t the primary key) contain the primary key columns, so if your primary key is large, other indexes will also be large.
95-1	12337-12344	However	
95-2	12344-12345	,	
95-3	12346-12355	secondary	
95-4	12356-12363	indexes	
95-5	12364-12365	(	
95-6	12365-12372	indexes	
95-7	12373-12377	that	
95-8	12378-12382	aren	
95-9	12382-12383	’	
95-10	12383-12384	t	
95-11	12385-12388	the	
95-12	12389-12396	primary	
95-13	12397-12400	key	
95-14	12400-12401	)	
95-15	12402-12409	contain	
95-16	12410-12413	the	
95-17	12414-12421	primary	
95-18	12422-12425	key	
95-19	12426-12433	columns	
95-20	12433-12434	,	
95-21	12435-12437	so	
95-22	12438-12440	if	
95-23	12441-12445	your	
95-24	12446-12453	primary	
95-25	12454-12457	key	
95-26	12458-12460	is	
95-27	12461-12466	large	
95-28	12466-12467	,	
95-29	12468-12473	other	
95-30	12474-12481	indexes	
95-31	12482-12486	will	
95-32	12487-12491	also	
95-33	12492-12494	be	
95-34	12495-12500	large	
95-35	12500-12501	.	

#Text=You should strive for a small primary key if you’ll have many indexes on a table.
96-1	12502-12505	You	
96-2	12506-12512	should	
96-3	12513-12519	strive	
96-4	12520-12523	for	
96-5	12524-12525	a	
96-6	12526-12531	small	
96-7	12532-12539	primary	
96-8	12540-12543	key	
96-9	12544-12546	if	
96-10	12547-12550	you	
96-11	12550-12551	’	
96-12	12551-12553	ll	
96-13	12554-12558	have	
96-14	12559-12563	many	
96-15	12564-12571	indexes	
96-16	12572-12574	on	
96-17	12575-12576	a	
96-18	12577-12582	table	
96-19	12582-12583	.	

#Text=The choice of primary key also has performance implications.
97-1	12584-12587	The	
97-2	12588-12594	choice	
97-3	12595-12597	of	
97-4	12598-12605	primary	
97-5	12606-12609	key	
97-6	12610-12614	also	
97-7	12615-12618	has	
97-8	12619-12630	performance	
97-9	12631-12643	implications	
97-10	12643-12644	.	

#Text=These will be discussed in the section “Index Strategies” later in another section.
98-1	12645-12650	These	
98-2	12651-12655	will	
98-3	12656-12658	be	
98-4	12659-12668	discussed	
98-5	12669-12671	in	
98-6	12672-12675	the	
98-7	12676-12683	section	
98-8	12684-12685	“	
98-9	12685-12690	Index	
98-10	12691-12701	Strategies	
98-11	12701-12702	”	
98-12	12703-12708	later	
98-13	12709-12711	in	
98-14	12712-12719	another	
98-15	12720-12727	section	
98-16	12727-12728	.	

#Text=Sources of Information
#Text=If you take just one thing with you from following this section, then let it be that monitoring is critical to maintaining a healthy system.
99-1	12729-12736	Sources	
99-2	12737-12739	of	
99-3	12740-12751	Information	
99-4	12752-12754	If	
99-5	12755-12758	you	
99-6	12759-12763	take	
99-7	12764-12768	just	
99-8	12769-12772	one	
99-9	12773-12778	thing	
99-10	12779-12783	with	
99-11	12784-12787	you	
99-12	12788-12792	from	
99-13	12793-12802	following	
99-14	12803-12807	this	
99-15	12808-12815	section	
99-16	12815-12816	,	
99-17	12817-12821	then	
99-18	12822-12825	let	
99-19	12826-12828	it	
99-20	12829-12831	be	
99-21	12832-12836	that	
99-22	12837-12847	monitoring	
99-23	12848-12850	is	
99-24	12851-12859	critical	
99-25	12860-12862	to	
99-26	12863-12874	maintaining	
99-27	12875-12876	a	
99-28	12877-12884	healthy	
99-29	12885-12891	system	
99-30	12891-12892	.	

#Text=Everything about high performance should revolve around monitoring.
100-1	12893-12903	Everything	
100-2	12904-12909	about	
100-3	12910-12914	high	
100-4	12915-12926	performance	
100-5	12927-12933	should	
100-6	12934-12941	revolve	
100-7	12942-12948	around	
100-8	12949-12959	monitoring	
100-9	12959-12960	.	

#Text=Your monitoring should use several sources of information.
101-1	12961-12965	Your	
101-2	12966-12976	monitoring	
101-3	12977-12983	should	
101-4	12984-12987	use	
101-5	12988-12995	several	
101-6	12996-13003	sources	
101-7	13004-13006	of	
101-8	13007-13018	information	
101-9	13018-13019	.	

#Text=These include but are not limited to
#Text=The Performance Schema – which includes information ranging from low-level mutexes to query and transaction metrics. 
102-1	13020-13025	These	
102-2	13026-13033	include	
102-3	13034-13037	but	
102-4	13038-13041	are	
102-5	13042-13045	not	
102-6	13046-13053	limited	
102-7	13054-13056	to	
102-8	13057-13060	The	
102-9	13061-13072	Performance	
102-10	13073-13079	Schema	
102-11	13080-13081	–	
102-12	13082-13087	which	
102-13	13088-13096	includes	
102-14	13097-13108	information	
102-15	13109-13116	ranging	
102-16	13117-13121	from	
102-17	13122-13131	low-level	
102-18	13132-13139	mutexes	
102-19	13140-13142	to	
102-20	13143-13148	query	
102-21	13149-13152	and	
102-22	13153-13164	transaction	
102-23	13165-13172	metrics	
102-24	13172-13173	.	
102-25	13173-13174	 	

#Text=This is the single most important source of information for query performance tuning.
103-1	13174-13178	This	
103-2	13179-13181	is	
103-3	13182-13185	the	
103-4	13186-13192	single	
103-5	13193-13197	most	
103-6	13198-13207	important	
103-7	13208-13214	source	
103-8	13215-13217	of	
103-9	13218-13229	information	
103-10	13230-13233	for	
103-11	13234-13239	query	
103-12	13240-13251	performance	
103-13	13252-13258	tuning	
103-14	13258-13259	.	

#Text=The sys schema provides a range of ready-made reports based on the Performance Schema, but they include filters, sorting, and formatting that make the reports easy to use.
104-1	13260-13263	The	
104-2	13264-13267	sys	
104-3	13268-13274	schema	
104-4	13275-13283	provides	
104-5	13284-13285	a	
104-6	13286-13291	range	
104-7	13292-13294	of	
104-8	13295-13305	ready-made	
104-9	13306-13313	reports	
104-10	13314-13319	based	
104-11	13320-13322	on	
104-12	13323-13326	the	
104-13	13327-13338	Performance	
104-14	13339-13345	Schema	
104-15	13345-13346	,	
104-16	13347-13350	but	
104-17	13351-13355	they	
104-18	13356-13363	include	
104-19	13364-13371	filters	
104-20	13371-13372	,	
104-21	13373-13380	sorting	
104-22	13380-13381	,	
104-23	13382-13385	and	
104-24	13386-13396	formatting	
104-25	13397-13401	that	
104-26	13402-13406	make	
104-27	13407-13410	the	
104-28	13411-13418	reports	
104-29	13419-13423	easy	
104-30	13424-13426	to	
104-31	13427-13430	use	
104-32	13430-13431	.	

#Text=USE performance_schema;
#Text=SHOW TABLES;
#Text=The Information Schema – which includes schema information, InnoDB statistics, and more.
105-1	13432-13435	USE	
105-2	13436-13454	performance_schema	
105-3	13454-13455	;	
105-4	13456-13460	SHOW	
105-5	13461-13467	TABLES	
105-6	13467-13468	;	
105-7	13469-13472	The	
105-8	13473-13484	Information	
105-9	13485-13491	Schema	
105-10	13492-13493	–	
105-11	13494-13499	which	
105-12	13500-13508	includes	
105-13	13509-13515	schema	
105-14	13516-13527	information	
105-15	13527-13528	,	
105-16	13529-13535	InnoDB	
105-17	13536-13546	statistics	
105-18	13546-13547	,	
105-19	13548-13551	and	
105-20	13552-13556	more	
105-21	13556-13557	.	

#Text=SHOW statements – which, for example, include information from InnoDB with detailed engine statistics.
106-1	13558-13562	SHOW	
106-2	13562-13563	 	
106-3	13563-13573	statements	
106-4	13573-13574	 	
106-5	13574-13575	–	
106-6	13576-13581	which	
106-7	13581-13582	,	
106-8	13583-13586	for	
106-9	13587-13594	example	
106-10	13594-13595	,	
106-11	13596-13603	include	
106-12	13604-13615	information	
106-13	13616-13620	from	
106-14	13621-13627	InnoDB	
106-15	13628-13632	with	
106-16	13633-13641	detailed	
106-17	13642-13648	engine	
106-18	13649-13659	statistics	
106-19	13659-13660	.	

#Text=SHOW TABLE STATUS LIKE 'city' \\G;
#Text=The slow query log – which can record queries matching certain criteria such as taking longer than a predefined threshold, even after instance restarts.The EXPLAIN statement to return the query execution plan.
107-1	13661-13665	SHOW	
107-2	13666-13671	TABLE	
107-3	13672-13678	STATUS	
107-4	13679-13683	LIKE	
107-5	13684-13685	'	
107-6	13685-13689	city	
107-7	13689-13690	'	
107-8	13691-13692	\	
107-9	13692-13693	G	
107-10	13693-13694	;	
107-11	13695-13698	The	
107-12	13699-13703	slow	
107-13	13704-13709	query	
107-14	13710-13713	log	
107-15	13714-13715	–	
107-16	13716-13721	which	
107-17	13722-13725	can	
107-18	13726-13732	record	
107-19	13733-13740	queries	
107-20	13741-13749	matching	
107-21	13750-13757	certain	
107-22	13758-13766	criteria	
107-23	13767-13771	such	
107-24	13772-13774	as	
107-25	13775-13781	taking	
107-26	13782-13788	longer	
107-27	13789-13793	than	
107-28	13794-13795	a	
107-29	13796-13806	predefined	
107-30	13807-13816	threshold	
107-31	13816-13817	,	
107-32	13818-13822	even	
107-33	13823-13828	after	
107-34	13829-13837	instance	
107-35	13838-13850	restarts.The	
107-36	13850-13851	 	
107-37	13851-13858	EXPLAIN	
107-38	13858-13859	 	
107-39	13859-13868	statement	
107-40	13868-13869	 	
107-41	13869-13871	to	
107-42	13872-13878	return	
107-43	13879-13882	the	
107-44	13883-13888	query	
107-45	13889-13898	execution	
107-46	13899-13903	plan	
107-47	13903-13904	.	

#Text=This is an invaluable tool to investigate why a query is not performing well due to missing indexes, the query being written in a suboptimal way, or MySQL choosing a suboptimal way to execute the query.
108-1	13905-13909	This	
108-2	13910-13912	is	
108-3	13913-13915	an	
108-4	13916-13926	invaluable	
108-5	13927-13931	tool	
108-6	13932-13934	to	
108-7	13935-13946	investigate	
108-8	13947-13950	why	
108-9	13951-13952	a	
108-10	13953-13958	query	
108-11	13959-13961	is	
108-12	13962-13965	not	
108-13	13966-13976	performing	
108-14	13977-13981	well	
108-15	13982-13985	due	
108-16	13986-13988	to	
108-17	13989-13996	missing	
108-18	13997-14004	indexes	
108-19	14004-14005	,	
108-20	14006-14009	the	
108-21	14010-14015	query	
108-22	14016-14021	being	
108-23	14022-14029	written	
108-24	14030-14032	in	
108-25	14033-14034	a	
108-26	14035-14045	suboptimal	
108-27	14046-14049	way	
108-28	14049-14050	,	
108-29	14051-14053	or	
108-30	14054-14059	MySQL	
108-31	14060-14068	choosing	
108-32	14069-14070	a	
108-33	14071-14081	suboptimal	
108-34	14082-14085	way	
108-35	14086-14088	to	
108-36	14089-14096	execute	
108-37	14097-14100	the	
108-38	14101-14106	query	
108-39	14106-14107	.	

#Text=The EXPLAIN statement is mostly used in an ad hoc fashion when investigating a specific query.Operating system metrics such as disk utilization, memory usage, and network usage.
109-1	14108-14111	The	
109-2	14111-14112	 	
109-3	14112-14119	EXPLAIN	
109-4	14119-14120	 	
109-5	14120-14129	statement	
109-6	14130-14132	is	
109-7	14133-14139	mostly	
109-8	14140-14144	used	
109-9	14145-14147	in	
109-10	14148-14150	an	
109-11	14151-14153	ad	
109-12	14154-14157	hoc	
109-13	14158-14165	fashion	
109-14	14166-14170	when	
109-15	14171-14184	investigating	
109-16	14185-14186	a	
109-17	14187-14195	specific	
109-18	14196-14211	query.Operating	
109-19	14211-14212	 	
109-20	14212-14218	system	
109-21	14218-14219	 	
109-22	14219-14226	metrics	
109-23	14227-14231	such	
109-24	14232-14234	as	
109-25	14235-14239	disk	
109-26	14240-14251	utilization	
109-27	14251-14252	,	
109-28	14253-14259	memory	
109-29	14260-14265	usage	
109-30	14265-14266	,	
109-31	14267-14270	and	
109-32	14271-14278	network	
109-33	14279-14284	usage	
109-34	14284-14285	.	

#Text=Do not forget simple metrics such as the amount of free storage as running out of storage will cause an outage.
110-1	14286-14288	Do	
110-2	14289-14292	not	
110-3	14293-14299	forget	
110-4	14300-14306	simple	
110-5	14307-14314	metrics	
110-6	14315-14319	such	
110-7	14320-14322	as	
110-8	14323-14326	the	
110-9	14327-14333	amount	
110-10	14334-14336	of	
110-11	14337-14341	free	
110-12	14342-14349	storage	
110-13	14350-14352	as	
110-14	14353-14360	running	
110-15	14361-14364	out	
110-16	14365-14367	of	
110-17	14368-14375	storage	
110-18	14376-14380	will	
110-19	14381-14386	cause	
110-20	14387-14389	an	
110-21	14390-14396	outage	
110-22	14396-14397	.	

#Text=Consider the Whole Stack
#Text=When an application needs the result of the query or needs to store data in MySQL, it sends the request over the network to MySQL, and in order to execute the request, MySQL interacts with the operating system and uses host resources such as memory and disk.
111-1	14398-14406	Consider	
111-2	14407-14410	the	
111-3	14411-14416	Whole	
111-4	14417-14422	Stack	
111-5	14423-14427	When	
111-6	14428-14430	an	
111-7	14431-14442	application	
111-8	14443-14448	needs	
111-9	14449-14452	the	
111-10	14453-14459	result	
111-11	14460-14462	of	
111-12	14463-14466	the	
111-13	14467-14472	query	
111-14	14473-14475	or	
111-15	14476-14481	needs	
111-16	14482-14484	to	
111-17	14485-14490	store	
111-18	14491-14495	data	
111-19	14496-14498	in	
111-20	14499-14504	MySQL	
111-21	14504-14505	,	
111-22	14506-14508	it	
111-23	14509-14514	sends	
111-24	14515-14518	the	
111-25	14519-14526	request	
111-26	14527-14531	over	
111-27	14532-14535	the	
111-28	14536-14543	network	
111-29	14544-14546	to	
111-30	14547-14552	MySQL	
111-31	14552-14553	,	
111-32	14554-14557	and	
111-33	14558-14560	in	
111-34	14561-14566	order	
111-35	14567-14569	to	
111-36	14570-14577	execute	
111-37	14578-14581	the	
111-38	14582-14589	request	
111-39	14589-14590	,	
111-40	14591-14596	MySQL	
111-41	14597-14606	interacts	
111-42	14607-14611	with	
111-43	14612-14615	the	
111-44	14616-14625	operating	
111-45	14626-14632	system	
111-46	14633-14636	and	
111-47	14637-14641	uses	
111-48	14642-14646	host	
111-49	14647-14656	resources	
111-50	14657-14661	such	
111-51	14662-14664	as	
111-52	14665-14671	memory	
111-53	14672-14675	and	
111-54	14676-14680	disk	
111-55	14680-14681	.	

#Text=Once the result of the request is ready, it is communicated back to the application through the network.
112-1	14682-14686	Once	
112-2	14687-14690	the	
112-3	14691-14697	result	
112-4	14698-14700	of	
112-5	14701-14704	the	
112-6	14705-14712	request	
112-7	14713-14715	is	
112-8	14716-14721	ready	
112-9	14721-14722	,	
112-10	14723-14725	it	
112-11	14726-14728	is	
112-12	14729-14741	communicated	
112-13	14742-14746	back	
112-14	14747-14749	to	
112-15	14750-14753	the	
112-16	14754-14765	application	
112-17	14766-14773	through	
112-18	14774-14777	the	
112-19	14778-14785	network	
112-20	14785-14786	.	

#Text=MySQL Stack
#Text=Query Tuning Methodology
#Text=Performance tuning can be seen as a continuous process where an iterative approach is used to gradually improve performance over time.
113-1	14787-14792	MySQL	
113-2	14793-14798	Stack	
113-3	14799-14804	Query	
113-4	14805-14811	Tuning	
113-5	14812-14823	Methodology	
113-6	14824-14835	Performance	
113-7	14836-14842	tuning	
113-8	14843-14846	can	
113-9	14847-14849	be	
113-10	14850-14854	seen	
113-11	14855-14857	as	
113-12	14858-14859	a	
113-13	14860-14870	continuous	
113-14	14871-14878	process	
113-15	14879-14884	where	
113-16	14885-14887	an	
113-17	14888-14897	iterative	
113-18	14898-14906	approach	
113-19	14907-14909	is	
113-20	14910-14914	used	
113-21	14915-14917	to	
113-22	14918-14927	gradually	
113-23	14928-14935	improve	
113-24	14936-14947	performance	
113-25	14948-14952	over	
113-26	14953-14957	time	
113-27	14957-14958	.	

#Text=MySQL Query Tuning Methodology
#Text=First, we should have a clear problem description.
114-1	14959-14964	MySQL	
114-2	14965-14970	Query	
114-3	14971-14977	Tuning	
114-4	14978-14989	Methodology	
114-5	14990-14995	First	
114-6	14995-14996	,	
114-7	14997-14999	we	
114-8	15000-15006	should	
114-9	15007-15011	have	
114-10	15012-15013	a	
114-11	15014-15019	clear	
114-12	15020-15027	problem	
114-13	15028-15039	description	
114-14	15039-15040	.	

#Text=It is not enough to say “MySQL is slow”.
115-1	15041-15043	It	
115-2	15044-15046	is	
115-3	15047-15050	not	
115-4	15051-15057	enough	
115-5	15058-15060	to	
115-6	15061-15064	say	
115-7	15065-15066	“	
115-8	15066-15071	MySQL	
115-9	15072-15074	is	
115-10	15075-15079	slow	
115-11	15079-15080	”	
115-12	15080-15081	.	

#Text=A specific problem may be that “The query used to display user’s transactions takes five seconds” or that “MySQL can only sustain 5000 transactions per second.”
116-1	15082-15083	A	
116-2	15084-15092	specific	
116-3	15093-15100	problem	
116-4	15101-15104	may	
116-5	15105-15107	be	
116-6	15108-15112	that	
116-7	15113-15114	“	
116-8	15114-15117	The	
116-9	15118-15123	query	
116-10	15124-15128	used	
116-11	15129-15131	to	
116-12	15132-15139	display	
116-13	15140-15144	user	
116-14	15144-15145	’	
116-15	15145-15146	s	
116-16	15147-15159	transactions	
116-17	15160-15165	takes	
116-18	15166-15170	five	
116-19	15171-15178	seconds	
116-20	15178-15179	”	
116-21	15180-15182	or	
116-22	15183-15187	that	
116-23	15188-15189	“	
116-24	15189-15194	MySQL	
116-25	15195-15198	can	
116-26	15199-15203	only	
116-27	15204-15211	sustain	
116-28	15212-15216	5000	
116-29	15217-15229	transactions	
116-30	15230-15233	per	
116-31	15234-15240	second	
116-32	15240-15241	.	
116-33	15241-15242	”	

#Text=The more specific we are, the better chance we have solving the problem.
117-1	15243-15246	The	
117-2	15247-15251	more	
117-3	15252-15260	specific	
117-4	15261-15263	we	
117-5	15264-15267	are	
117-6	15267-15268	,	
117-7	15269-15272	the	
117-8	15273-15279	better	
117-9	15280-15286	chance	
117-10	15287-15289	we	
117-11	15290-15294	have	
117-12	15295-15302	solving	
117-13	15303-15306	the	
117-14	15307-15314	problem	
117-15	15314-15315	.	

#Text=The preparation work should also include collecting a baseline from our monitoring or running a data collection that illustrates the problem.
118-1	15316-15319	The	
118-2	15320-15331	preparation	
118-3	15332-15336	work	
118-4	15337-15343	should	
118-5	15344-15348	also	
118-6	15349-15356	include	
118-7	15357-15367	collecting	
118-8	15368-15369	a	
118-9	15370-15378	baseline	
118-10	15379-15383	from	
118-11	15384-15387	our	
118-12	15388-15398	monitoring	
118-13	15399-15401	or	
118-14	15402-15409	running	
118-15	15410-15411	a	
118-16	15412-15416	data	
118-17	15417-15427	collection	
118-18	15428-15432	that	
118-19	15433-15444	illustrates	
118-20	15445-15448	the	
118-21	15449-15456	problem	
118-22	15456-15457	.	

#Text=Without the baseline, we may not be able to prove that we have solved the issue at the end of the troubleshooting.
119-1	15458-15465	Without	
119-2	15466-15469	the	
119-3	15470-15478	baseline	
119-4	15478-15479	,	
119-5	15480-15482	we	
119-6	15483-15486	may	
119-7	15487-15490	not	
119-8	15491-15493	be	
119-9	15494-15498	able	
119-10	15499-15501	to	
119-11	15502-15507	prove	
119-12	15508-15512	that	
119-13	15513-15515	we	
119-14	15516-15520	have	
119-15	15521-15527	solved	
119-16	15528-15531	the	
119-17	15532-15537	issue	
119-18	15538-15540	at	
119-19	15541-15544	the	
119-20	15545-15548	end	
119-21	15549-15551	of	
119-22	15552-15555	the	
119-23	15556-15571	troubleshooting	
119-24	15571-15572	.	

#Text=Then we can work on determining the cause of the poor performance is.
120-1	15573-15577	Then	
120-2	15578-15580	we	
120-3	15581-15584	can	
120-4	15585-15589	work	
120-5	15590-15592	on	
120-6	15593-15604	determining	
120-7	15605-15608	the	
120-8	15609-15614	cause	
120-9	15615-15617	of	
120-10	15618-15621	the	
120-11	15622-15626	poor	
120-12	15627-15638	performance	
120-13	15639-15641	is	
120-14	15641-15642	.	

#Text=Here,
#Text=we can be open-minded and consider the whole stack, so we don’t end up staring ourselves blind on one aspect that turns out not to have anything to do with the problem.
121-1	15643-15647	Here	
121-2	15647-15648	,	
121-3	15649-15651	we	
121-4	15652-15655	can	
121-5	15656-15658	be	
121-6	15659-15670	open-minded	
121-7	15671-15674	and	
121-8	15675-15683	consider	
121-9	15684-15687	the	
121-10	15688-15693	whole	
121-11	15694-15699	stack	
121-12	15699-15700	,	
121-13	15701-15703	so	
121-14	15704-15706	we	
121-15	15707-15710	don	
121-16	15710-15711	’	
121-17	15711-15712	t	
121-18	15713-15716	end	
121-19	15717-15719	up	
121-20	15720-15727	staring	
121-21	15728-15737	ourselves	
121-22	15738-15743	blind	
121-23	15744-15746	on	
121-24	15747-15750	one	
121-25	15751-15757	aspect	
121-26	15758-15762	that	
121-27	15763-15768	turns	
121-28	15769-15772	out	
121-29	15773-15776	not	
121-30	15777-15779	to	
121-31	15780-15784	have	
121-32	15785-15793	anything	
121-33	15794-15796	to	
121-34	15797-15799	do	
121-35	15800-15804	with	
121-36	15805-15808	the	
121-37	15809-15816	problem	
121-38	15816-15817	.	

#Text=Finding the cause is often the hardest part of an investigation, but we’ll cover some good starting points and common causes in a later section.
122-1	15818-15825	Finding	
122-2	15826-15829	the	
122-3	15830-15835	cause	
122-4	15836-15838	is	
122-5	15839-15844	often	
122-6	15845-15848	the	
122-7	15849-15856	hardest	
122-8	15857-15861	part	
122-9	15862-15864	of	
122-10	15865-15867	an	
122-11	15868-15881	investigation	
122-12	15881-15882	,	
122-13	15883-15886	but	
122-14	15887-15889	we	
122-15	15889-15890	’	
122-16	15890-15892	ll	
122-17	15893-15898	cover	
122-18	15899-15903	some	
122-19	15904-15908	good	
122-20	15909-15917	starting	
122-21	15918-15924	points	
122-22	15925-15928	and	
122-23	15929-15935	common	
122-24	15936-15942	causes	
122-25	15943-15945	in	
122-26	15946-15947	a	
122-27	15948-15953	later	
122-28	15954-15961	section	
122-29	15961-15962	.	

#Text=And once the cause is clear, we can determine what we want to do to solve the problem.
123-1	15963-15966	And	
123-2	15967-15971	once	
123-3	15972-15975	the	
123-4	15976-15981	cause	
123-5	15982-15984	is	
123-6	15985-15990	clear	
123-7	15990-15991	,	
123-8	15992-15994	we	
123-9	15995-15998	can	
123-10	15999-16008	determine	
123-11	16009-16013	what	
123-12	16014-16016	we	
123-13	16017-16021	want	
123-14	16022-16024	to	
123-15	16025-16027	do	
123-16	16028-16030	to	
123-17	16031-16036	solve	
123-18	16037-16040	the	
123-19	16041-16048	problem	
123-20	16048-16049	.	

#Text=The first step is to brainstorm possible solutions; second, you must choose which one to implement.
124-1	16050-16053	The	
124-2	16054-16059	first	
124-3	16060-16064	step	
124-4	16065-16067	is	
124-5	16068-16070	to	
124-6	16071-16081	brainstorm	
124-7	16082-16090	possible	
124-8	16091-16100	solutions	
124-9	16100-16101	;	
124-10	16102-16108	second	
124-11	16108-16109	,	
124-12	16110-16113	you	
124-13	16114-16118	must	
124-14	16119-16125	choose	
124-15	16126-16131	which	
124-16	16132-16135	one	
124-17	16136-16138	to	
124-18	16139-16148	implement	
124-19	16148-16149	.	

#Text=It can happen that the solution we first chose does not work or have unacceptable side effects.
125-1	16150-16152	It	
125-2	16153-16156	can	
125-3	16157-16163	happen	
125-4	16164-16168	that	
125-5	16169-16172	the	
125-6	16173-16181	solution	
125-7	16182-16184	we	
125-8	16185-16190	first	
125-9	16191-16196	chose	
125-10	16197-16201	does	
125-11	16202-16205	not	
125-12	16206-16210	work	
125-13	16211-16213	or	
125-14	16214-16218	have	
125-15	16219-16231	unacceptable	
125-16	16232-16236	side	
125-17	16237-16244	effects	
125-18	16244-16245	.	

#Text=MySQL Query Tuning Methodology
#Text=When we apply a solution we picked it’s important to create an action plan for it.
126-1	16246-16251	MySQL	
126-2	16252-16257	Query	
126-3	16258-16264	Tuning	
126-4	16265-16276	Methodology	
126-5	16277-16281	When	
126-6	16282-16284	we	
126-7	16285-16290	apply	
126-8	16291-16292	a	
126-9	16293-16301	solution	
126-10	16302-16304	we	
126-11	16305-16311	picked	
126-12	16312-16314	it	
126-13	16314-16315	’	
126-14	16315-16316	s	
126-15	16317-16326	important	
126-16	16327-16329	to	
126-17	16330-16336	create	
126-18	16337-16339	an	
126-19	16340-16346	action	
126-20	16347-16351	plan	
126-21	16352-16355	for	
126-22	16356-16358	it	
126-23	16358-16359	.	

#Text=Here it is important to be very specific, so we can ensure that the action plan we test is also the one we’ll end up applying to our production system.
127-1	16360-16364	Here	
127-2	16365-16367	it	
127-3	16368-16370	is	
127-4	16371-16380	important	
127-5	16381-16383	to	
127-6	16384-16386	be	
127-7	16387-16391	very	
127-8	16392-16400	specific	
127-9	16400-16401	,	
127-10	16402-16404	so	
127-11	16405-16407	we	
127-12	16408-16411	can	
127-13	16412-16418	ensure	
127-14	16419-16423	that	
127-15	16424-16427	the	
127-16	16428-16434	action	
127-17	16435-16439	plan	
127-18	16440-16442	we	
127-19	16443-16447	test	
127-20	16448-16450	is	
127-21	16451-16455	also	
127-22	16456-16459	the	
127-23	16460-16463	one	
127-24	16464-16466	we	
127-25	16466-16467	’	
127-26	16467-16469	ll	
127-27	16470-16473	end	
127-28	16474-16476	up	
127-29	16477-16485	applying	
127-30	16486-16488	to	
127-31	16489-16492	our	
127-32	16493-16503	production	
127-33	16504-16510	system	
127-34	16510-16511	.	

#Text=We then need to test the action plan on a test system.
128-1	16512-16514	We	
128-2	16515-16519	then	
128-3	16520-16524	need	
128-4	16525-16527	to	
128-5	16528-16532	test	
128-6	16533-16536	the	
128-7	16537-16543	action	
128-8	16544-16548	plan	
128-9	16549-16551	on	
128-10	16552-16553	a	
128-11	16554-16558	test	
128-12	16559-16565	system	
128-13	16565-16566	.	

#Text=It is important that it reflects production as closely as possible.
129-1	16567-16569	It	
129-2	16570-16572	is	
129-3	16573-16582	important	
129-4	16583-16587	that	
129-5	16588-16590	it	
129-6	16591-16599	reflects	
129-7	16600-16610	production	
129-8	16611-16613	as	
129-9	16614-16621	closely	
129-10	16622-16624	as	
129-11	16625-16633	possible	
129-12	16633-16634	.	

#Text=The data we have on the test system must be representative of our production data.
130-1	16635-16638	The	
130-2	16639-16643	data	
130-3	16644-16646	we	
130-4	16647-16651	have	
130-5	16652-16654	on	
130-6	16655-16658	the	
130-7	16659-16663	test	
130-8	16664-16670	system	
130-9	16671-16675	must	
130-10	16676-16678	be	
130-11	16679-16693	representative	
130-12	16694-16696	of	
130-13	16697-16700	our	
130-14	16701-16711	production	
130-15	16712-16716	data	
130-16	16716-16717	.	

#Text=One way to achieve this is to copy the production data, optionally using data masking to avoid copying sensitive information such as personal details and credit card information out of our production system.
131-1	16718-16721	One	
131-2	16722-16725	way	
131-3	16726-16728	to	
131-4	16729-16736	achieve	
131-5	16737-16741	this	
131-6	16742-16744	is	
131-7	16745-16747	to	
131-8	16748-16752	copy	
131-9	16753-16756	the	
131-10	16757-16767	production	
131-11	16768-16772	data	
131-12	16772-16773	,	
131-13	16774-16784	optionally	
131-14	16785-16790	using	
131-15	16791-16795	data	
131-16	16796-16803	masking	
131-17	16804-16806	to	
131-18	16807-16812	avoid	
131-19	16813-16820	copying	
131-20	16821-16830	sensitive	
131-21	16831-16842	information	
131-22	16843-16847	such	
131-23	16848-16850	as	
131-24	16851-16859	personal	
131-25	16860-16867	details	
131-26	16868-16871	and	
131-27	16872-16878	credit	
131-28	16879-16883	card	
131-29	16884-16895	information	
131-30	16896-16899	out	
131-31	16900-16902	of	
131-32	16903-16906	our	
131-33	16907-16917	production	
131-34	16918-16924	system	
131-35	16924-16925	.	

#Text=It is possible that for one reason or another, the solution does not completely work as expected on production.
132-1	16926-16928	It	
132-2	16929-16931	is	
132-3	16932-16940	possible	
132-4	16941-16945	that	
132-5	16946-16949	for	
132-6	16950-16953	one	
132-7	16954-16960	reason	
132-8	16961-16963	or	
132-9	16964-16971	another	
132-10	16971-16972	,	
132-11	16973-16976	the	
132-12	16977-16985	solution	
132-13	16986-16990	does	
132-14	16991-16994	not	
132-15	16995-17005	completely	
132-16	17006-17010	work	
132-17	17011-17013	as	
132-18	17014-17022	expected	
132-19	17023-17025	on	
132-20	17026-17036	production	
132-21	17036-17037	.	

#Text=One possibility is that the index statistics that are random in nature were different, so an ANALYZE TABLE statement to update the index statistics was necessary when applying the solution to the production system.
133-1	17038-17041	One	
133-2	17042-17053	possibility	
133-3	17054-17056	is	
133-4	17057-17061	that	
133-5	17062-17065	the	
133-6	17066-17071	index	
133-7	17072-17082	statistics	
133-8	17083-17087	that	
133-9	17088-17091	are	
133-10	17092-17098	random	
133-11	17099-17101	in	
133-12	17102-17108	nature	
133-13	17109-17113	were	
133-14	17114-17123	different	
133-15	17123-17124	,	
133-16	17125-17127	so	
133-17	17128-17130	an	
133-18	17131-17138	ANALYZE	
133-19	17139-17144	TABLE	
133-20	17145-17154	statement	
133-21	17155-17157	to	
133-22	17158-17164	update	
133-23	17165-17168	the	
133-24	17169-17174	index	
133-25	17175-17185	statistics	
133-26	17186-17189	was	
133-27	17190-17199	necessary	
133-28	17200-17204	when	
133-29	17205-17213	applying	
133-30	17214-17217	the	
133-31	17218-17226	solution	
133-32	17227-17229	to	
133-33	17230-17233	the	
133-34	17234-17244	production	
133-35	17245-17251	system	
133-36	17251-17252	.	

#Text=If the solution works, you should collect a new baseline that you can use for future monitoring and optimizations.
134-1	17253-17255	If	
134-2	17256-17259	the	
134-3	17260-17268	solution	
134-4	17269-17274	works	
134-5	17274-17275	,	
134-6	17276-17279	you	
134-7	17280-17286	should	
134-8	17287-17294	collect	
134-9	17295-17296	a	
134-10	17297-17300	new	
134-11	17301-17309	baseline	
134-12	17310-17314	that	
134-13	17315-17318	you	
134-14	17319-17322	can	
134-15	17323-17326	use	
134-16	17327-17330	for	
134-17	17331-17337	future	
134-18	17338-17348	monitoring	
134-19	17349-17352	and	
134-20	17353-17366	optimizations	
134-21	17366-17367	.	

#Text=We are then ready to start all over, either doing a second iteration to improve the performance further for the problem we have just been looking at, or we may need to work on a second problem.
135-1	17368-17370	We	
135-2	17371-17374	are	
135-3	17375-17379	then	
135-4	17380-17385	ready	
135-5	17386-17388	to	
135-6	17389-17394	start	
135-7	17395-17398	all	
135-8	17399-17403	over	
135-9	17403-17404	,	
135-10	17405-17411	either	
135-11	17412-17417	doing	
135-12	17418-17419	a	
135-13	17420-17426	second	
135-14	17427-17436	iteration	
135-15	17437-17439	to	
135-16	17440-17447	improve	
135-17	17448-17451	the	
135-18	17452-17463	performance	
135-19	17464-17471	further	
135-20	17472-17475	for	
135-21	17476-17479	the	
135-22	17480-17487	problem	
135-23	17488-17490	we	
135-24	17491-17495	have	
135-25	17496-17500	just	
135-26	17501-17505	been	
135-27	17506-17513	looking	
135-28	17514-17516	at	
135-29	17516-17517	,	
135-30	17518-17520	or	
135-31	17521-17523	we	
135-32	17524-17527	may	
135-33	17528-17532	need	
135-34	17533-17535	to	
135-35	17536-17540	work	
135-36	17541-17543	on	
135-37	17544-17545	a	
135-38	17546-17552	second	
135-39	17553-17560	problem	
135-40	17560-17561	.	

#Text=Conclusions
#Text=MySQL has a layered architecture, with server-wide services and query execution on top and storage engines underneath.
136-1	17562-17573	Conclusions	
136-2	17574-17579	MySQL	
136-3	17580-17583	has	
136-4	17584-17585	a	
136-5	17586-17593	layered	
136-6	17594-17606	architecture	
136-7	17606-17607	,	
136-8	17608-17612	with	
136-9	17613-17624	server-wide	
136-10	17625-17633	services	
136-11	17634-17637	and	
136-12	17638-17643	query	
136-13	17644-17653	execution	
136-14	17654-17656	on	
136-15	17657-17660	top	
136-16	17661-17664	and	
136-17	17665-17672	storage	
136-18	17673-17680	engines	
136-19	17681-17691	underneath	
136-20	17691-17692	.	

#Text=The key takeaways are that you need to consider the whole stack from the end user to the low-level details of the host and operating system and monitoring is an absolute must in performance tuning.
137-1	17693-17696	The	
137-2	17697-17700	key	
137-3	17701-17710	takeaways	
137-4	17711-17714	are	
137-5	17715-17719	that	
137-6	17720-17723	you	
137-7	17724-17728	need	
137-8	17729-17731	to	
137-9	17732-17740	consider	
137-10	17741-17744	the	
137-11	17745-17750	whole	
137-12	17751-17756	stack	
137-13	17757-17761	from	
137-14	17762-17765	the	
137-15	17766-17769	end	
137-16	17770-17774	user	
137-17	17775-17777	to	
137-18	17778-17781	the	
137-19	17782-17791	low-level	
137-20	17792-17799	details	
137-21	17800-17802	of	
137-22	17803-17806	the	
137-23	17807-17811	host	
137-24	17812-17815	and	
137-25	17816-17825	operating	
137-26	17826-17832	system	
137-27	17833-17836	and	
137-28	17837-17847	monitoring	
137-29	17848-17850	is	
137-30	17851-17853	an	
137-31	17854-17862	absolute	
137-32	17863-17867	must	
137-33	17868-17870	in	
137-34	17871-17882	performance	
137-35	17883-17889	tuning	
137-36	17889-17890	.	

#Text=Executing a query includes several steps, of which the optimizer and execution steps are the most important and are ones that you will learn the most about in later sections.
138-1	17891-17900	Executing	
138-2	17901-17902	a	
138-3	17903-17908	query	
138-4	17909-17917	includes	
138-5	17918-17925	several	
138-6	17926-17931	steps	
138-7	17931-17932	,	
138-8	17933-17935	of	
138-9	17936-17941	which	
138-10	17942-17945	the	
138-11	17946-17955	optimizer	
138-12	17956-17959	and	
138-13	17960-17969	execution	
138-14	17970-17975	steps	
138-15	17976-17979	are	
138-16	17980-17983	the	
138-17	17984-17988	most	
138-18	17989-17998	important	
138-19	17999-18002	and	
138-20	18003-18006	are	
138-21	18007-18011	ones	
138-22	18012-18016	that	
138-23	18017-18020	you	
138-24	18021-18025	will	
138-25	18026-18031	learn	
138-26	18032-18035	the	
138-27	18036-18040	most	
138-28	18041-18046	about	
138-29	18047-18049	in	
138-30	18050-18055	later	
138-31	18056-18064	sections	
138-32	18064-18065	.	

#Text=Bibliography
#Text=MySQL 8 Query Performance Tuning, Jesper Wisborg Krogh, Apress, March 2020High Performance MySQL, 3rd Edition, Baron Schwartz, Peter Zaitsev, Vadim Tkachenko, O’Reilly Media, Inc., March 2012
#Text=Leave a Reply Cancel replyYour email address will not be published.
139-1	18066-18078	Bibliography	
139-2	18079-18084	MySQL	
139-3	18085-18086	8	
139-4	18087-18092	Query	
139-5	18093-18104	Performance	
139-6	18105-18111	Tuning	
139-7	18111-18112	,	
139-8	18113-18119	Jesper	
139-9	18120-18127	Wisborg	
139-10	18128-18133	Krogh	
139-11	18133-18134	,	
139-12	18135-18141	Apress	
139-13	18141-18142	,	
139-14	18143-18148	March	
139-15	18149-18157	2020High	
139-16	18158-18169	Performance	
139-17	18170-18175	MySQL	
139-18	18175-18176	,	
139-19	18177-18180	3rd	
139-20	18181-18188	Edition	
139-21	18188-18189	,	
139-22	18190-18195	Baron	
139-23	18196-18204	Schwartz	
139-24	18204-18205	,	
139-25	18206-18211	Peter	
139-26	18212-18219	Zaitsev	
139-27	18219-18220	,	
139-28	18221-18226	Vadim	
139-29	18227-18236	Tkachenko	
139-30	18236-18237	,	
139-31	18238-18239	O	
139-32	18239-18240	’	
139-33	18240-18246	Reilly	
139-34	18247-18252	Media	
139-35	18252-18253	,	
139-36	18254-18257	Inc	
139-37	18257-18258	.	
139-38	18258-18259	,	
139-39	18260-18265	March	
139-40	18266-18270	2012	
139-41	18271-18276	Leave	
139-42	18277-18278	a	
139-43	18279-18284	Reply	
139-44	18285-18291	Cancel	
139-45	18292-18301	replyYour	
139-46	18302-18307	email	
139-47	18308-18315	address	
139-48	18316-18320	will	
139-49	18321-18324	not	
139-50	18325-18327	be	
139-51	18328-18337	published	
139-52	18337-18338	.	

#Text=Required fields are marked *Comment Name *
#Text=Email *
#Text=Website
#Text=Save my name, email, and website in this browser for the next time I comment.
140-1	18339-18347	Required	
140-2	18348-18354	fields	
140-3	18355-18358	are	
140-4	18359-18365	marked	
140-5	18366-18367	*	
140-6	18367-18374	Comment	
140-7	18375-18379	Name	
140-8	18380-18381	*	
140-9	18382-18387	Email	
140-10	18388-18389	*	
140-11	18390-18397	Website	
140-12	18398-18402	Save	
140-13	18403-18405	my	
140-14	18406-18410	name	
140-15	18410-18411	,	
140-16	18412-18417	email	
140-17	18417-18418	,	
140-18	18419-18422	and	
140-19	18423-18430	website	
140-20	18431-18433	in	
140-21	18434-18438	this	
140-22	18439-18446	browser	
140-23	18447-18450	for	
140-24	18451-18454	the	
140-25	18455-18459	next	
140-26	18460-18464	time	
140-27	18465-18466	I	
140-28	18467-18474	comment	
140-29	18474-18475	.	

#Text=PostgreSQL High Performance Tuning Guide Course
#Text=Use the following coupon
#Text=to get 66% percent off.
141-1	18476-18486	PostgreSQL	
141-2	18487-18491	High	
141-3	18492-18503	Performance	
141-4	18504-18510	Tuning	
141-5	18511-18516	Guide	
141-6	18517-18523	Course	
141-7	18524-18527	Use	
141-8	18528-18531	the	
141-9	18532-18541	following	
141-10	18542-18548	coupon	
141-11	18549-18551	to	
141-12	18552-18555	get	
141-13	18556-18559	66%	
141-14	18560-18567	percent	
141-15	18568-18571	off	
141-16	18571-18572	.	

#Text="LEARNING202104"
#Text=Check the Full Course
#Text=Search for:
#Text=Recent Posts
#Text=MySQL High Performance Part 3 – EXPLAIN Queries
#Text=MySQL High Performance Part 2 – Finding Candidates for Query Optimizations
#Text=MySQL Performance Tuning Part 1 – Architecture
#Text=DCA – Describe and demonstrate how to deploy a service on a Docker overlay network
#Text=Solr 8 Facet Query – Hands-On Example
#Text=Categories
#Text=Apache Solr
#Text=Docker Certified Associate
#Text=MySQL
#Text=PostgreSQL
#Text=Reactive Systems
#Text=Recent CommentsBriannoumb on Server Tuning Guideline – PostgreSQL 12 High Performance Guide (Part 10/12)Briannoumb on Server Tuning Guideline – PostgreSQL 12 High Performance Guide (Part 10/12)
142-1	18573-18574	"	
142-2	18574-18588	LEARNING202104	
142-3	18588-18589	"	
142-4	18590-18595	Check	
142-5	18596-18599	the	
142-6	18600-18604	Full	
142-7	18605-18611	Course	
142-8	18612-18618	Search	
142-9	18619-18622	for	
142-10	18622-18623	:	
142-11	18624-18630	Recent	
142-12	18631-18636	Posts	
142-13	18637-18642	MySQL	
142-14	18643-18647	High	
142-15	18648-18659	Performance	
142-16	18660-18664	Part	
142-17	18665-18666	3	
142-18	18667-18668	–	
142-19	18669-18676	EXPLAIN	
142-20	18677-18684	Queries	
142-21	18685-18690	MySQL	
142-22	18691-18695	High	
142-23	18696-18707	Performance	
142-24	18708-18712	Part	
142-25	18713-18714	2	
142-26	18715-18716	–	
142-27	18717-18724	Finding	
142-28	18725-18735	Candidates	
142-29	18736-18739	for	
142-30	18740-18745	Query	
142-31	18746-18759	Optimizations	
142-32	18760-18765	MySQL	
142-33	18766-18777	Performance	
142-34	18778-18784	Tuning	
142-35	18785-18789	Part	
142-36	18790-18791	1	
142-37	18792-18793	–	
142-38	18794-18806	Architecture	
142-39	18807-18810	DCA	
142-40	18811-18812	–	
142-41	18813-18821	Describe	
142-42	18822-18825	and	
142-43	18826-18837	demonstrate	
142-44	18838-18841	how	
142-45	18842-18844	to	
142-46	18845-18851	deploy	
142-47	18852-18853	a	
142-48	18854-18861	service	
142-49	18862-18864	on	
142-50	18865-18866	a	
142-51	18867-18873	Docker	
142-52	18874-18881	overlay	
142-53	18882-18889	network	
142-54	18890-18894	Solr	
142-55	18895-18896	8	
142-56	18897-18902	Facet	
142-57	18903-18908	Query	
142-58	18909-18910	–	
142-59	18911-18919	Hands-On	
142-60	18920-18927	Example	
142-61	18928-18938	Categories	
142-62	18939-18945	Apache	
142-63	18946-18950	Solr	
142-64	18951-18957	Docker	
142-65	18958-18967	Certified	
142-66	18968-18977	Associate	
142-67	18978-18983	MySQL	
142-68	18984-18994	PostgreSQL	
142-69	18995-19003	Reactive	
142-70	19004-19011	Systems	
142-71	19012-19018	Recent	
142-72	19019-19037	CommentsBriannoumb	
142-73	19038-19040	on	
142-74	19041-19047	Server	
142-75	19048-19054	Tuning	
142-76	19055-19064	Guideline	
142-77	19065-19066	–	
142-78	19067-19077	PostgreSQL	
142-79	19078-19080	12	
142-80	19081-19085	High	
142-81	19086-19097	Performance	
142-82	19098-19103	Guide	
142-83	19104-19105	(	
142-84	19105-19109	Part	
142-85	19110-19112	10	
142-86	19112-19113	/	
142-87	19113-19115	12	
142-88	19115-19116	)	
142-89	19116-19126	Briannoumb	
142-90	19127-19129	on	
142-91	19130-19136	Server	
142-92	19137-19143	Tuning	
142-93	19144-19153	Guideline	
142-94	19154-19155	–	
142-95	19156-19166	PostgreSQL	
142-96	19167-19169	12	
142-97	19170-19174	High	
142-98	19175-19186	Performance	
142-99	19187-19192	Guide	
142-100	19193-19194	(	
142-101	19194-19198	Part	
142-102	19199-19201	10	
142-103	19201-19202	/	
142-104	19202-19204	12	
142-105	19204-19205	)	
