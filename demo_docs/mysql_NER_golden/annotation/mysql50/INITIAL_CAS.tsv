#FORMAT=WebAnno TSV 3.3


#Text=Twenty Ways To Optimize Slow MySQL for Faster Insert Rate - SEO Explorer's Blog
#Text=Pricing
#Text=API
#Text=Blog
#Text=SEO Explorer Blog:
#Text=English
#Text=עברית
#Text=Try us:
#Text=label
#Text=Twenty Ways To Optimize Slow MySQL for Faster Insert Rate
#Text=If you’re following my blog posts, you read that I had to develop my own database because MySQL insert speed was deteriorating over the 50GB mark.
1-1	0-6	Twenty	
1-2	7-11	Ways	
1-3	12-14	To	
1-4	15-23	Optimize	
1-5	24-28	Slow	
1-6	29-34	MySQL	
1-7	35-38	for	
1-8	39-45	Faster	
1-9	46-52	Insert	
1-10	53-57	Rate	
1-11	58-59	-	
1-12	60-63	SEO	
1-13	64-74	Explorer's	
1-14	75-79	Blog	
1-15	80-87	Pricing	
1-16	88-91	API	
1-17	92-96	Blog	
1-18	97-100	SEO	
1-19	101-109	Explorer	
1-20	110-114	Blog	
1-21	114-115	:	
1-22	116-123	English	
1-23	124-129	עברית	
1-24	130-133	Try	
1-25	134-136	us	
1-26	136-137	:	
1-27	138-143	label	
1-28	144-150	Twenty	
1-29	151-155	Ways	
1-30	156-158	To	
1-31	159-167	Optimize	
1-32	168-172	Slow	
1-33	173-178	MySQL	
1-34	179-182	for	
1-35	183-189	Faster	
1-36	190-196	Insert	
1-37	197-201	Rate	
1-38	202-204	If	
1-39	205-208	you	
1-40	208-209	’	
1-41	209-211	re	
1-42	212-221	following	
1-43	222-224	my	
1-44	225-229	blog	
1-45	230-235	posts	
1-46	235-236	,	
1-47	237-240	you	
1-48	241-245	read	
1-49	246-250	that	
1-50	251-252	I	
1-51	253-256	had	
1-52	257-259	to	
1-53	260-267	develop	
1-54	268-270	my	
1-55	271-274	own	
1-56	275-283	database	
1-57	284-291	because	
1-58	292-297	MySQL	
1-59	298-304	insert	
1-60	305-310	speed	
1-61	311-314	was	
1-62	315-328	deteriorating	
1-63	329-333	over	
1-64	334-337	the	
1-65	338-342	50GB	
1-66	343-347	mark	
1-67	347-348	.	

#Text=That’s why I tried to optimize for faster insert rate.
2-1	349-353	That	
2-2	353-354	’	
2-3	354-355	s	
2-4	356-359	why	
2-5	360-361	I	
2-6	362-367	tried	
2-7	368-370	to	
2-8	371-379	optimize	
2-9	380-383	for	
2-10	384-390	faster	
2-11	391-397	insert	
2-12	398-402	rate	
2-13	402-403	.	

#Text=The application was inserting at a rate of 50,000 concurrent inserts per second, but it grew worse,  the speed of insert dropped to 6,000 concurrent inserts per second, which is well below what I needed.
3-1	404-407	The	
3-2	408-419	application	
3-3	420-423	was	
3-4	424-433	inserting	
3-5	434-436	at	
3-6	437-438	a	
3-7	439-443	rate	
3-8	444-446	of	
3-9	447-453	50,000	
3-10	454-464	concurrent	
3-11	465-472	inserts	
3-12	473-476	per	
3-13	477-483	second	
3-14	483-484	,	
3-15	485-488	but	
3-16	489-491	it	
3-17	492-496	grew	
3-18	497-502	worse	
3-19	502-503	,	
3-20	503-504	 	
3-21	505-508	the	
3-22	509-514	speed	
3-23	515-517	of	
3-24	518-524	insert	
3-25	525-532	dropped	
3-26	533-535	to	
3-27	536-541	6,000	
3-28	542-552	concurrent	
3-29	553-560	inserts	
3-30	561-564	per	
3-31	565-571	second	
3-32	571-572	,	
3-33	573-578	which	
3-34	579-581	is	
3-35	582-586	well	
3-36	587-592	below	
3-37	593-597	what	
3-38	598-599	I	
3-39	600-606	needed	
3-40	606-607	.	

#Text=I was able to optimize the MySQL performance, so the sustained insert rate was kept around the 100GB mark, but that’s it.
4-1	608-609	I	
4-2	610-613	was	
4-3	614-618	able	
4-4	619-621	to	
4-5	622-630	optimize	
4-6	631-634	the	
4-7	635-640	MySQL	
4-8	641-652	performance	
4-9	652-653	,	
4-10	654-656	so	
4-11	657-660	the	
4-12	661-670	sustained	
4-13	671-677	insert	
4-14	678-682	rate	
4-15	683-686	was	
4-16	687-691	kept	
4-17	692-698	around	
4-18	699-702	the	
4-19	703-708	100GB	
4-20	709-713	mark	
4-21	713-714	,	
4-22	715-718	but	
4-23	719-723	that	
4-24	723-724	’	
4-25	724-725	s	
4-26	726-728	it	
4-27	728-729	.	

#Text=I decided to share the optimization tips I used for optimizations; it may help database administrators who want a faster insert rate into MySQL database.
5-1	730-731	I	
5-2	732-739	decided	
5-3	740-742	to	
5-4	743-748	share	
5-5	749-752	the	
5-6	753-765	optimization	
5-7	766-770	tips	
5-8	771-772	I	
5-9	773-777	used	
5-10	778-781	for	
5-11	782-795	optimizations	
5-12	795-796	;	
5-13	797-799	it	
5-14	800-803	may	
5-15	804-808	help	
5-16	809-817	database	
5-17	818-832	administrators	
5-18	833-836	who	
5-19	837-841	want	
5-20	842-843	a	
5-21	844-850	faster	
5-22	851-857	insert	
5-23	858-862	rate	
5-24	863-867	into	
5-25	868-873	MySQL	
5-26	874-882	database	
5-27	882-883	.	

#Text=(Even though these tips are written for MySQL, some of them can be used for: MariaDB, Percona MySQL, Microsoft SQL Server).
6-1	884-885	(	
6-2	885-889	Even	
6-3	890-896	though	
6-4	897-902	these	
6-5	903-907	tips	
6-6	908-911	are	
6-7	912-919	written	
6-8	920-923	for	
6-9	924-929	MySQL	
6-10	929-930	,	
6-11	931-935	some	
6-12	936-938	of	
6-13	939-943	them	
6-14	944-947	can	
6-15	948-950	be	
6-16	951-955	used	
6-17	956-959	for	
6-18	959-960	:	
6-19	961-968	MariaDB	
6-20	968-969	,	
6-21	970-977	Percona	
6-22	978-983	MySQL	
6-23	983-984	,	
6-24	985-994	Microsoft	
6-25	995-998	SQL	
6-26	999-1005	Server	
6-27	1005-1006	)	
6-28	1006-1007	.	

#Text=Will all the methods improve your insert performance?
7-1	1008-1012	Will	
7-2	1013-1016	all	
7-3	1017-1020	the	
7-4	1021-1028	methods	
7-5	1029-1036	improve	
7-6	1037-1041	your	
7-7	1042-1048	insert	
7-8	1049-1060	performance	
7-9	1060-1061	?	

#Text=Table of Contents
#Text=Will all the methods improve your insert performance?
8-1	1062-1067	Table	
8-2	1068-1070	of	
8-3	1071-1079	Contents	
8-4	1080-1084	Will	
8-5	1085-1088	all	
8-6	1089-1092	the	
8-7	1093-1100	methods	
8-8	1101-1108	improve	
8-9	1109-1113	your	
8-10	1114-1120	insert	
8-11	1121-1132	performance	
8-12	1132-1133	?	

#Text=How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?
9-1	1133-1136	How	
9-2	1137-1139	to	
9-3	1140-1147	measure	
9-4	1148-1151	SQL	
9-5	1152-1158	Server	
9-6	1159-1180	performanceOptimizing	
9-7	1181-1186	MySQL	
9-8	1187-1193	InnoDB	
9-9	1194-1201	storage	
9-10	1202-1211	engineBuy	
9-11	1212-1213	a	
9-12	1214-1218	fast	
9-13	1219-1229	serverWhat	
9-14	1230-1232	is	
9-15	1233-1234	a	
9-16	1235-1242	virtual	
9-17	1243-1251	CPUUsing	
9-18	1252-1253	a	
9-19	1254-1263	Dedicated	
9-20	1264-1270	server	
9-21	1271-1274	for	
9-22	1275-1285	MySQLMySQL	
9-23	1286-1297	serverUsing	
9-24	1298-1301	SSD	
9-25	1302-1309	instead	
9-26	1310-1312	of	
9-27	1313-1321	magnetic	
9-28	1322-1333	drivesUsing	
9-29	1334-1338	RAID	
9-30	1339-1340	5	
9-31	1340-1341	/	
9-32	1341-1342	6	
9-33	1343-1346	for	
9-34	1347-1355	Database	
9-35	1356-1371	DurabilityTweak	
9-36	1372-1377	MySQL	
9-37	1378-1384	memory	
9-38	1385-1449	settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther	
9-39	1450-1456	Memory	
9-40	1457-1470	settingsTweak	
9-41	1471-1477	commit	
9-42	1478-1491	mechanismWhat	
9-43	1492-1494	is	
9-44	1495-1500	MySQL	
9-45	1501-1516	transactionWhat	
9-46	1517-1519	is	
9-47	1520-1525	MySQL	
9-48	1526-1537	commitMySQL	
9-49	1538-1545	inserts	
9-50	1546-1550	with	
9-51	1551-1552	a	
9-52	1553-1572	transactionChanging	
9-53	1573-1576	the	
9-54	1577-1583	commit	
9-55	1584-1623	mechanisminnodb_flush_log_at_trx_commit	
9-56	1623-1624	=	
9-57	1624-1655	1innodb_flush_log_at_trx_commit	
9-58	1655-1656	=	
9-59	1656-1687	0innodb_flush_log_at_trx_commit	
9-60	1687-1688	=	
9-61	1688-1721	2innodb_flush_log_at_timeoutUsing	
9-62	1722-1735	precalculated	
9-63	1736-1743	primary	
9-64	1744-1747	key	
9-65	1748-1751	for	
9-66	1752-1766	stringChanging	
9-67	1767-1770	the	
9-68	1771-1779	Database	
9-69	1779-1780	’	
9-70	1780-1781	s	
9-71	1782-1787	flush	
9-72	1788-1799	methodUsing	
9-73	1800-1804	file	
9-74	1805-1811	system	
9-75	1812-1825	compressionDo	
9-76	1826-1829	you	
9-77	1830-1834	need	
9-78	1835-1839	that	
9-79	1840-1845	index	
9-80	1845-1846	?	

#Text=Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary
#Text=Every database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.
10-1	1846-1854	Dropping	
10-2	1855-1858	the	
10-3	1859-1869	indexUsing	
10-4	1870-1880	partitions	
10-5	1881-1883	to	
10-6	1884-1891	improve	
10-7	1892-1897	MySQL	
10-8	1898-1904	insert	
10-9	1905-1909	slow	
10-10	1910-1921	ratePlacing	
10-11	1922-1923	a	
10-12	1924-1929	table	
10-13	1930-1932	on	
10-14	1933-1934	a	
10-15	1935-1944	different	
10-16	1945-1955	driveUsing	
10-17	1956-1961	MySQL	
10-18	1962-1966	bulk	
10-19	1967-1980	insertRegular	
10-20	1981-1987	insert	
10-21	1988-1989	(	
10-22	1989-1995	single	
10-23	1996-1999	row	
10-24	1999-2000	)	
10-25	2000-2005	MySQL	
10-26	2006-2012	insert	
10-27	2013-2021	multiple	
10-28	2022-2026	rows	
10-29	2027-2028	(	
10-30	2028-2036	Extended	
10-31	2037-2044	inserts	
10-32	2044-2045	)	
10-33	2045-2050	Using	
10-34	2051-2058	replace	
10-35	2059-2063	into	
10-36	2064-2066	or	
10-37	2067-2073	insert	
10-38	2074-2085	ignoreMySQL	
10-39	2086-2093	Replace	
10-40	2094-2103	intoMySQL	
10-41	2104-2110	Insert	
10-42	2111-2126	ignoreInserting	
10-43	2127-2131	from	
10-44	2132-2140	multiple	
10-45	2141-2153	threadsUsing	
10-46	2154-2158	load	
10-47	2159-2163	from	
10-48	2164-2168	file	
10-49	2169-2170	(	
10-50	2170-2175	MySQL	
10-51	2176-2180	bulk	
10-52	2181-2187	insert	
10-53	2187-2188	)	
10-54	2188-2193	Using	
10-55	2194-2211	application-level	
10-56	2212-2226	cacheAdjusting	
10-57	2227-2231	char	
10-58	2231-2232	/	
10-59	2232-2239	varchar	
10-60	2240-2254	collationUsing	
10-61	2255-2260	MySQL	
10-62	2261-2273	clusterUsing	
10-63	2274-2275	a	
10-64	2276-2282	custom	
10-65	2283-2294	engineUsing	
10-66	2295-2296	a	
10-67	2297-2303	custom	
10-68	2304-2317	solutionBonus	
10-69	2318-2332	sectionImprove	
10-70	2333-2339	select	
10-71	2340-2351	speedThread	
10-72	2352-2368	concurrencyUsing	
10-73	2369-2385	replicationUsing	
10-74	2386-2394	prepared	
10-75	2395-2414	statementsDisabling	
10-76	2415-2422	foreign	
10-77	2423-2436	keyConnection	
10-78	2437-2448	reuseNumber	
10-79	2449-2451	of	
10-80	2452-2461	available	
10-81	2462-2480	connectionsSummary	
10-82	2481-2486	Every	
10-83	2487-2495	database	
10-84	2496-2506	deployment	
10-85	2507-2509	is	
10-86	2510-2519	different	
10-87	2519-2520	,	
10-88	2521-2526	which	
10-89	2527-2532	means	
10-90	2533-2537	that	
10-91	2538-2542	some	
10-92	2543-2545	of	
10-93	2546-2549	the	
10-94	2550-2561	suggestions	
10-95	2562-2566	here	
10-96	2567-2570	can	
10-97	2571-2575	slow	
10-98	2576-2580	down	
10-99	2581-2585	your	
10-100	2586-2592	insert	
10-101	2593-2604	performance	
10-102	2604-2605	;	
10-103	2606-2610	that	
10-104	2610-2611	’	
10-105	2611-2612	s	
10-106	2613-2616	why	
10-107	2617-2620	you	
10-108	2621-2625	need	
10-109	2626-2628	to	
10-110	2629-2638	benchmark	
10-111	2639-2643	each	
10-112	2644-2656	modification	
10-113	2657-2659	to	
10-114	2660-2663	see	
10-115	2664-2667	the	
10-116	2668-2674	effect	
10-117	2675-2677	it	
10-118	2678-2681	has	
10-119	2681-2682	.	

#Text=How to measure SQL Server performance
#Text=Before we try to tweak our performance, we must know we improved the performance.
11-1	2683-2686	How	
11-2	2687-2689	to	
11-3	2690-2697	measure	
11-4	2698-2701	SQL	
11-5	2702-2708	Server	
11-6	2709-2720	performance	
11-7	2721-2727	Before	
11-8	2728-2730	we	
11-9	2731-2734	try	
11-10	2735-2737	to	
11-11	2738-2743	tweak	
11-12	2744-2747	our	
11-13	2748-2759	performance	
11-14	2759-2760	,	
11-15	2761-2763	we	
11-16	2764-2768	must	
11-17	2769-2773	know	
11-18	2774-2776	we	
11-19	2777-2785	improved	
11-20	2786-2789	the	
11-21	2790-2801	performance	
11-22	2801-2802	.	

#Text=Some optimizations don’t need any special tools, because the time difference will be significant.
12-1	2803-2807	Some	
12-2	2808-2821	optimizations	
12-3	2822-2825	don	
12-4	2825-2826	’	
12-5	2826-2827	t	
12-6	2828-2832	need	
12-7	2833-2836	any	
12-8	2837-2844	special	
12-9	2845-2850	tools	
12-10	2850-2851	,	
12-11	2852-2859	because	
12-12	2860-2863	the	
12-13	2864-2868	time	
12-14	2869-2879	difference	
12-15	2880-2884	will	
12-16	2885-2887	be	
12-17	2888-2899	significant	
12-18	2899-2900	.	

#Text=For example, when we switched between using single inserts to multiple inserts during data import, it took one task a few hours, and the other task didn’t complete within 24 hours.
13-1	2901-2904	For	
13-2	2905-2912	example	
13-3	2912-2913	,	
13-4	2914-2918	when	
13-5	2919-2921	we	
13-6	2922-2930	switched	
13-7	2931-2938	between	
13-8	2939-2944	using	
13-9	2945-2951	single	
13-10	2952-2959	inserts	
13-11	2960-2962	to	
13-12	2963-2971	multiple	
13-13	2972-2979	inserts	
13-14	2980-2986	during	
13-15	2987-2991	data	
13-16	2992-2998	import	
13-17	2998-2999	,	
13-18	3000-3002	it	
13-19	3003-3007	took	
13-20	3008-3011	one	
13-21	3012-3016	task	
13-22	3017-3018	a	
13-23	3019-3022	few	
13-24	3023-3028	hours	
13-25	3028-3029	,	
13-26	3030-3033	and	
13-27	3034-3037	the	
13-28	3038-3043	other	
13-29	3044-3048	task	
13-30	3049-3053	didn	
13-31	3053-3054	’	
13-32	3054-3055	t	
13-33	3056-3064	complete	
13-34	3065-3071	within	
13-35	3072-3074	24	
13-36	3075-3080	hours	
13-37	3080-3081	.	

#Text=For those optimizations that we’re not sure about, and we want to rule out any file caching or buffer pool caching we need a tool to help us.
14-1	3082-3085	For	
14-2	3086-3091	those	
14-3	3092-3105	optimizations	
14-4	3106-3110	that	
14-5	3111-3113	we	
14-6	3113-3114	’	
14-7	3114-3116	re	
14-8	3117-3120	not	
14-9	3121-3125	sure	
14-10	3126-3131	about	
14-11	3131-3132	,	
14-12	3133-3136	and	
14-13	3137-3139	we	
14-14	3140-3144	want	
14-15	3145-3147	to	
14-16	3148-3152	rule	
14-17	3153-3156	out	
14-18	3157-3160	any	
14-19	3161-3165	file	
14-20	3166-3173	caching	
14-21	3174-3176	or	
14-22	3177-3183	buffer	
14-23	3184-3188	pool	
14-24	3189-3196	caching	
14-25	3197-3199	we	
14-26	3200-3204	need	
14-27	3205-3206	a	
14-28	3207-3211	tool	
14-29	3212-3214	to	
14-30	3215-3219	help	
14-31	3220-3222	us	
14-32	3222-3223	.	

#Text=There are several great tools to help you, for example:
#Text=SysBench Benchmark tool
#Text=mysqladmin – Comes with the default MySQL installation
#Text=Mytop – Command line tool for monitoring MySQL
#Text=There are more applications, of course, and you should discover which ones work best for your testing environment.
15-1	3224-3229	There	
15-2	3230-3233	are	
15-3	3234-3241	several	
15-4	3242-3247	great	
15-5	3248-3253	tools	
15-6	3254-3256	to	
15-7	3257-3261	help	
15-8	3262-3265	you	
15-9	3265-3266	,	
15-10	3267-3270	for	
15-11	3271-3278	example	
15-12	3278-3279	:	
15-13	3280-3288	SysBench	
15-14	3289-3298	Benchmark	
15-15	3299-3303	tool	
15-16	3304-3314	mysqladmin	
15-17	3315-3316	–	
15-18	3317-3322	Comes	
15-19	3323-3327	with	
15-20	3328-3331	the	
15-21	3332-3339	default	
15-22	3340-3345	MySQL	
15-23	3346-3358	installation	
15-24	3359-3364	Mytop	
15-25	3365-3366	–	
15-26	3367-3374	Command	
15-27	3375-3379	line	
15-28	3380-3384	tool	
15-29	3385-3388	for	
15-30	3389-3399	monitoring	
15-31	3400-3405	MySQL	
15-32	3406-3411	There	
15-33	3412-3415	are	
15-34	3416-3420	more	
15-35	3421-3433	applications	
15-36	3433-3434	,	
15-37	3435-3437	of	
15-38	3438-3444	course	
15-39	3444-3445	,	
15-40	3446-3449	and	
15-41	3450-3453	you	
15-42	3454-3460	should	
15-43	3461-3469	discover	
15-44	3470-3475	which	
15-45	3476-3480	ones	
15-46	3481-3485	work	
15-47	3486-3490	best	
15-48	3491-3494	for	
15-49	3495-3499	your	
15-50	3500-3507	testing	
15-51	3508-3519	environment	
15-52	3519-3520	.	

#Text=A blog we like a lot with many MySQL benchmarks is by Percona.
16-1	3521-3522	A	
16-2	3523-3527	blog	
16-3	3528-3530	we	
16-4	3531-3535	like	
16-5	3536-3537	a	
16-6	3538-3541	lot	
16-7	3542-3546	with	
16-8	3547-3551	many	
16-9	3552-3557	MySQL	
16-10	3558-3568	benchmarks	
16-11	3569-3571	is	
16-12	3572-3574	by	
16-13	3575-3582	Percona	
16-14	3582-3583	.	

#Text=Percona is distributing their fork of MySQL server that includes many improvements and the TokuDB engine.
17-1	3584-3591	Percona	
17-2	3592-3594	is	
17-3	3595-3607	distributing	
17-4	3608-3613	their	
17-5	3614-3618	fork	
17-6	3619-3621	of	
17-7	3622-3627	MySQL	
17-8	3628-3634	server	
17-9	3635-3639	that	
17-10	3640-3648	includes	
17-11	3649-3653	many	
17-12	3654-3666	improvements	
17-13	3667-3670	and	
17-14	3671-3674	the	
17-15	3675-3681	TokuDB	
17-16	3682-3688	engine	
17-17	3688-3689	.	

#Text=Optimizing MySQL InnoDB storage engine
#Text=MySQL supports two storage engines: MyISAM and InnoDB table type.
18-1	3690-3700	Optimizing	
18-2	3701-3706	MySQL	
18-3	3707-3713	InnoDB	
18-4	3714-3721	storage	
18-5	3722-3728	engine	
18-6	3729-3734	MySQL	
18-7	3735-3743	supports	
18-8	3744-3747	two	
18-9	3748-3755	storage	
18-10	3756-3763	engines	
18-11	3763-3764	:	
18-12	3765-3771	MyISAM	
18-13	3772-3775	and	
18-14	3776-3782	InnoDB	
18-15	3783-3788	table	
18-16	3789-3793	type	
18-17	3793-3794	.	

#Text=This article will focus only on optimizing InnoDB for optimizing insert speed.
19-1	3795-3799	This	
19-2	3800-3807	article	
19-3	3808-3812	will	
19-4	3813-3818	focus	
19-5	3819-3823	only	
19-6	3824-3826	on	
19-7	3827-3837	optimizing	
19-8	3838-3844	InnoDB	
19-9	3845-3848	for	
19-10	3849-3859	optimizing	
19-11	3860-3866	insert	
19-12	3867-3872	speed	
19-13	3872-3873	.	

#Text=(because MyISAM table allows for full table locking, it’s a different topic altogether)
#Text=MariaDB and Percona MySQL supports TukoDB as well; this will not be covered as well.
20-1	3874-3875	(	
20-2	3875-3882	because	
20-3	3883-3889	MyISAM	
20-4	3890-3895	table	
20-5	3896-3902	allows	
20-6	3903-3906	for	
20-7	3907-3911	full	
20-8	3912-3917	table	
20-9	3918-3925	locking	
20-10	3925-3926	,	
20-11	3927-3929	it	
20-12	3929-3930	’	
20-13	3930-3931	s	
20-14	3932-3933	a	
20-15	3934-3943	different	
20-16	3944-3949	topic	
20-17	3950-3960	altogether	
20-18	3960-3961	)	
20-19	3962-3969	MariaDB	
20-20	3970-3973	and	
20-21	3974-3981	Percona	
20-22	3982-3987	MySQL	
20-23	3988-3996	supports	
20-24	3997-4003	TukoDB	
20-25	4004-4006	as	
20-26	4007-4011	well	
20-27	4011-4012	;	
20-28	4013-4017	this	
20-29	4018-4022	will	
20-30	4023-4026	not	
20-31	4027-4029	be	
20-32	4030-4037	covered	
20-33	4038-4040	as	
20-34	4041-4045	well	
20-35	4045-4046	.	

#Text=Buy a fast server
#Text=‘The Cloud’ has been a hot topic for the past few years―with a couple clicks, you get a server, and with one click you delete it, a very powerful way to manage your infrastructure.
21-1	4047-4050	Buy	
21-2	4051-4052	a	
21-3	4053-4057	fast	
21-4	4058-4064	server	
21-5	4065-4066	‘	
21-6	4066-4069	The	
21-7	4070-4075	Cloud	
21-8	4075-4076	’	
21-9	4077-4080	has	
21-10	4081-4085	been	
21-11	4086-4087	a	
21-12	4088-4091	hot	
21-13	4092-4097	topic	
21-14	4098-4101	for	
21-15	4102-4105	the	
21-16	4106-4110	past	
21-17	4111-4114	few	
21-18	4115-4125	years―with	
21-19	4126-4127	a	
21-20	4128-4134	couple	
21-21	4135-4141	clicks	
21-22	4141-4142	,	
21-23	4143-4146	you	
21-24	4147-4150	get	
21-25	4151-4152	a	
21-26	4153-4159	server	
21-27	4159-4160	,	
21-28	4161-4164	and	
21-29	4165-4169	with	
21-30	4170-4173	one	
21-31	4174-4179	click	
21-32	4180-4183	you	
21-33	4184-4190	delete	
21-34	4191-4193	it	
21-35	4193-4194	,	
21-36	4195-4196	a	
21-37	4197-4201	very	
21-38	4202-4210	powerful	
21-39	4211-4214	way	
21-40	4215-4217	to	
21-41	4218-4224	manage	
21-42	4225-4229	your	
21-43	4230-4244	infrastructure	
21-44	4244-4245	.	

#Text=Besides the downside in costs, though, there’s also a downside in performance.
22-1	4246-4253	Besides	
22-2	4254-4257	the	
22-3	4258-4266	downside	
22-4	4267-4269	in	
22-5	4270-4275	costs	
22-6	4275-4276	,	
22-7	4277-4283	though	
22-8	4283-4284	,	
22-9	4285-4290	there	
22-10	4290-4291	’	
22-11	4291-4292	s	
22-12	4293-4297	also	
22-13	4298-4299	a	
22-14	4300-4308	downside	
22-15	4309-4311	in	
22-16	4312-4323	performance	
22-17	4323-4324	.	

#Text=Let’s take, for example, DigitalOcean, one of the leading VPS providers.
23-1	4325-4328	Let	
23-2	4328-4329	’	
23-3	4329-4330	s	
23-4	4331-4335	take	
23-5	4335-4336	,	
23-6	4337-4340	for	
23-7	4341-4348	example	
23-8	4348-4349	,	
23-9	4350-4362	DigitalOcean	
23-10	4362-4363	,	
23-11	4364-4367	one	
23-12	4368-4370	of	
23-13	4371-4374	the	
23-14	4375-4382	leading	
23-15	4383-4386	VPS	
23-16	4387-4396	providers	
23-17	4396-4397	.	

#Text=For $40, you get a VPS that has 8GB of RAM, 4 Virtual CPUs, and 160GB SSD.
24-1	4398-4401	For	
24-2	4402-4405	$40	
24-3	4405-4406	,	
24-4	4407-4410	you	
24-5	4411-4414	get	
24-6	4415-4416	a	
24-7	4417-4420	VPS	
24-8	4421-4425	that	
24-9	4426-4429	has	
24-10	4430-4433	8GB	
24-11	4434-4436	of	
24-12	4437-4440	RAM	
24-13	4440-4441	,	
24-14	4442-4443	4	
24-15	4444-4451	Virtual	
24-16	4452-4456	CPUs	
24-17	4456-4457	,	
24-18	4458-4461	and	
24-19	4462-4467	160GB	
24-20	4468-4471	SSD	
24-21	4471-4472	.	

#Text=What is a virtual CPU
#Text=It’s important to know that virtual CPU is not the same as a real CPU; to understand the distinction, we need to know what a VPS is.
25-1	4473-4477	What	
25-2	4478-4480	is	
25-3	4481-4482	a	
25-4	4483-4490	virtual	
25-5	4491-4494	CPU	
25-6	4495-4497	It	
25-7	4497-4498	’	
25-8	4498-4499	s	
25-9	4500-4509	important	
25-10	4510-4512	to	
25-11	4513-4517	know	
25-12	4518-4522	that	
25-13	4523-4530	virtual	
25-14	4531-4534	CPU	
25-15	4535-4537	is	
25-16	4538-4541	not	
25-17	4542-4545	the	
25-18	4546-4550	same	
25-19	4551-4553	as	
25-20	4554-4555	a	
25-21	4556-4560	real	
25-22	4561-4564	CPU	
25-23	4564-4565	;	
25-24	4566-4568	to	
25-25	4569-4579	understand	
25-26	4580-4583	the	
25-27	4584-4595	distinction	
25-28	4595-4596	,	
25-29	4597-4599	we	
25-30	4600-4604	need	
25-31	4605-4607	to	
25-32	4608-4612	know	
25-33	4613-4617	what	
25-34	4618-4619	a	
25-35	4620-4623	VPS	
25-36	4624-4626	is	
25-37	4626-4627	.	

#Text=VPS is an isolated virtual environment that is allocated on a dedicated server running a particular software like Citrix or VMWare.
26-1	4628-4631	VPS	
26-2	4632-4634	is	
26-3	4635-4637	an	
26-4	4638-4646	isolated	
26-5	4647-4654	virtual	
26-6	4655-4666	environment	
26-7	4667-4671	that	
26-8	4672-4674	is	
26-9	4675-4684	allocated	
26-10	4685-4687	on	
26-11	4688-4689	a	
26-12	4690-4699	dedicated	
26-13	4700-4706	server	
26-14	4707-4714	running	
26-15	4715-4716	a	
26-16	4717-4727	particular	
26-17	4728-4736	software	
26-18	4737-4741	like	
26-19	4742-4748	Citrix	
26-20	4749-4751	or	
26-21	4752-4758	VMWare	
26-22	4758-4759	.	

#Text=It’s possible to allocate many VPSs on the same server, with each VPS isolated from the others.
27-1	4760-4762	It	
27-2	4762-4763	’	
27-3	4763-4764	s	
27-4	4765-4773	possible	
27-5	4774-4776	to	
27-6	4777-4785	allocate	
27-7	4786-4790	many	
27-8	4791-4795	VPSs	
27-9	4796-4798	on	
27-10	4799-4802	the	
27-11	4803-4807	same	
27-12	4808-4814	server	
27-13	4814-4815	,	
27-14	4816-4820	with	
27-15	4821-4825	each	
27-16	4826-4829	VPS	
27-17	4830-4838	isolated	
27-18	4839-4843	from	
27-19	4844-4847	the	
27-20	4848-4854	others	
27-21	4854-4855	.	

#Text=So, as an example, a provider would use a computer with X amount of threads and memory and provisions a higher number of VPSs than what the server can accommodate if all VPSs would use a100% CPU all the time.
28-1	4856-4858	So	
28-2	4858-4859	,	
28-3	4860-4862	as	
28-4	4863-4865	an	
28-5	4866-4873	example	
28-6	4873-4874	,	
28-7	4875-4876	a	
28-8	4877-4885	provider	
28-9	4886-4891	would	
28-10	4892-4895	use	
28-11	4896-4897	a	
28-12	4898-4906	computer	
28-13	4907-4911	with	
28-14	4912-4913	X	
28-15	4914-4920	amount	
28-16	4921-4923	of	
28-17	4924-4931	threads	
28-18	4932-4935	and	
28-19	4936-4942	memory	
28-20	4943-4946	and	
28-21	4947-4957	provisions	
28-22	4958-4959	a	
28-23	4960-4966	higher	
28-24	4967-4973	number	
28-25	4974-4976	of	
28-26	4977-4981	VPSs	
28-27	4982-4986	than	
28-28	4987-4991	what	
28-29	4992-4995	the	
28-30	4996-5002	server	
28-31	5003-5006	can	
28-32	5007-5018	accommodate	
28-33	5019-5021	if	
28-34	5022-5025	all	
28-35	5026-5030	VPSs	
28-36	5031-5036	would	
28-37	5037-5040	use	
28-38	5041-5046	a100%	
28-39	5047-5050	CPU	
28-40	5051-5054	all	
28-41	5055-5058	the	
28-42	5059-5063	time	
28-43	5063-5064	.	

#Text=The reason is that the host knows that the VPSs will not use all the CPU at the same time.
29-1	5065-5068	The	
29-2	5069-5075	reason	
29-3	5076-5078	is	
29-4	5079-5083	that	
29-5	5084-5087	the	
29-6	5088-5092	host	
29-7	5093-5098	knows	
29-8	5099-5103	that	
29-9	5104-5107	the	
29-10	5108-5112	VPSs	
29-11	5113-5117	will	
29-12	5118-5121	not	
29-13	5122-5125	use	
29-14	5126-5129	all	
29-15	5130-5133	the	
29-16	5134-5137	CPU	
29-17	5138-5140	at	
29-18	5141-5144	the	
29-19	5145-5149	same	
29-20	5150-5154	time	
29-21	5154-5155	.	

#Text=Let’s assume each VPS uses the CPU only 50% of the time, which means the web hosting can allocate twice the number of CPUs.
30-1	5156-5159	Let	
30-2	5159-5160	’	
30-3	5160-5161	s	
30-4	5162-5168	assume	
30-5	5169-5173	each	
30-6	5174-5177	VPS	
30-7	5178-5182	uses	
30-8	5183-5186	the	
30-9	5187-5190	CPU	
30-10	5191-5195	only	
30-11	5196-5199	50%	
30-12	5200-5202	of	
30-13	5203-5206	the	
30-14	5207-5211	time	
30-15	5211-5212	,	
30-16	5213-5218	which	
30-17	5219-5224	means	
30-18	5225-5228	the	
30-19	5229-5232	web	
30-20	5233-5240	hosting	
30-21	5241-5244	can	
30-22	5245-5253	allocate	
30-23	5254-5259	twice	
30-24	5260-5263	the	
30-25	5264-5270	number	
30-26	5271-5273	of	
30-27	5274-5278	CPUs	
30-28	5278-5279	.	

#Text=Therefore, it’s possible that all VPSs will use more than 50% at one time, which means the virtual CPU will be throttled.
31-1	5280-5289	Therefore	
31-2	5289-5290	,	
31-3	5291-5293	it	
31-4	5293-5294	’	
31-5	5294-5295	s	
31-6	5296-5304	possible	
31-7	5305-5309	that	
31-8	5310-5313	all	
31-9	5314-5318	VPSs	
31-10	5319-5323	will	
31-11	5324-5327	use	
31-12	5328-5332	more	
31-13	5333-5337	than	
31-14	5338-5341	50%	
31-15	5342-5344	at	
31-16	5345-5348	one	
31-17	5349-5353	time	
31-18	5353-5354	,	
31-19	5355-5360	which	
31-20	5361-5366	means	
31-21	5367-5370	the	
31-22	5371-5378	virtual	
31-23	5379-5382	CPU	
31-24	5383-5387	will	
31-25	5388-5390	be	
31-26	5391-5400	throttled	
31-27	5400-5401	.	

#Text=Another option is to throttle the virtual CPU all the time to half or a third of the real CPU, on top or without over-provisioning.
32-1	5402-5409	Another	
32-2	5410-5416	option	
32-3	5417-5419	is	
32-4	5420-5422	to	
32-5	5423-5431	throttle	
32-6	5432-5435	the	
32-7	5436-5443	virtual	
32-8	5444-5447	CPU	
32-9	5448-5451	all	
32-10	5452-5455	the	
32-11	5456-5460	time	
32-12	5461-5463	to	
32-13	5464-5468	half	
32-14	5469-5471	or	
32-15	5472-5473	a	
32-16	5474-5479	third	
32-17	5480-5482	of	
32-18	5483-5486	the	
32-19	5487-5491	real	
32-20	5492-5495	CPU	
32-21	5495-5496	,	
32-22	5497-5499	on	
32-23	5500-5503	top	
32-24	5504-5506	or	
32-25	5507-5514	without	
32-26	5515-5532	over-provisioning	
32-27	5532-5533	.	

#Text=This will allow you to provision even more VPSs.
33-1	5534-5538	This	
33-2	5539-5543	will	
33-3	5544-5549	allow	
33-4	5550-5553	you	
33-5	5554-5556	to	
33-6	5557-5566	provision	
33-7	5567-5571	even	
33-8	5572-5576	more	
33-9	5577-5581	VPSs	
33-10	5581-5582	.	

#Text=CPU throttling is not a secret; it is why some web hosts offer guaranteed virtual CPU: the virtual CPU will always get 100% of the real CPU.
34-1	5583-5586	CPU	
34-2	5587-5597	throttling	
34-3	5598-5600	is	
34-4	5601-5604	not	
34-5	5605-5606	a	
34-6	5607-5613	secret	
34-7	5613-5614	;	
34-8	5615-5617	it	
34-9	5618-5620	is	
34-10	5621-5624	why	
34-11	5625-5629	some	
34-12	5630-5633	web	
34-13	5634-5639	hosts	
34-14	5640-5645	offer	
34-15	5646-5656	guaranteed	
34-16	5657-5664	virtual	
34-17	5665-5668	CPU	
34-18	5668-5669	:	
34-19	5670-5673	the	
34-20	5674-5681	virtual	
34-21	5682-5685	CPU	
34-22	5686-5690	will	
34-23	5691-5697	always	
34-24	5698-5701	get	
34-25	5702-5706	100%	
34-26	5707-5709	of	
34-27	5710-5713	the	
34-28	5714-5718	real	
34-29	5719-5722	CPU	
34-30	5722-5723	.	

#Text=Needless to say, the cost is double the usual cost of VPS.
35-1	5724-5732	Needless	
35-2	5733-5735	to	
35-3	5736-5739	say	
35-4	5739-5740	,	
35-5	5741-5744	the	
35-6	5745-5749	cost	
35-7	5750-5752	is	
35-8	5753-5759	double	
35-9	5760-5763	the	
35-10	5764-5769	usual	
35-11	5770-5774	cost	
35-12	5775-5777	of	
35-13	5778-5781	VPS	
35-14	5781-5782	.	

#Text=Using a Dedicated server for MySQL
#Text=If I use a bare metal server at Hetzner (a good and cheap host), I’ll get either AMD Ryzen 5 3600 Hexa-Core (12 threads) or i7-6700 (8 threads), 64 GB of RAM, and two 512GB NVME SSDs (for the sake of simplicity, we’ll consider them as one, since you will most likely use the two drives in mirror raid for data protection)
#Text=As you can see, the dedicated server costs the same, but is at least four times as powerful.
36-1	5783-5788	Using	
36-2	5789-5790	a	
36-3	5791-5800	Dedicated	
36-4	5801-5807	server	
36-5	5808-5811	for	
36-6	5812-5817	MySQL	
36-7	5818-5820	If	
36-8	5821-5822	I	
36-9	5823-5826	use	
36-10	5827-5828	a	
36-11	5829-5833	bare	
36-12	5834-5839	metal	
36-13	5840-5846	server	
36-14	5847-5849	at	
36-15	5850-5857	Hetzner	
36-16	5858-5859	(	
36-17	5859-5860	a	
36-18	5861-5865	good	
36-19	5866-5869	and	
36-20	5870-5875	cheap	
36-21	5876-5880	host	
36-22	5880-5881	)	
36-23	5881-5882	,	
36-24	5883-5884	I	
36-25	5884-5885	’	
36-26	5885-5887	ll	
36-27	5888-5891	get	
36-28	5892-5898	either	
36-29	5899-5902	AMD	
36-30	5903-5908	Ryzen	
36-31	5909-5910	5	
36-32	5911-5915	3600	
36-33	5916-5925	Hexa-Core	
36-34	5926-5927	(	
36-35	5927-5929	12	
36-36	5930-5937	threads	
36-37	5937-5938	)	
36-38	5939-5941	or	
36-39	5942-5944	i7	
36-40	5944-5945	-	
36-41	5945-5949	6700	
36-42	5950-5951	(	
36-43	5951-5952	8	
36-44	5953-5960	threads	
36-45	5960-5961	)	
36-46	5961-5962	,	
36-47	5963-5965	64	
36-48	5966-5968	GB	
36-49	5969-5971	of	
36-50	5972-5975	RAM	
36-51	5975-5976	,	
36-52	5977-5980	and	
36-53	5981-5984	two	
36-54	5985-5990	512GB	
36-55	5991-5995	NVME	
36-56	5996-6000	SSDs	
36-57	6001-6002	(	
36-58	6002-6005	for	
36-59	6006-6009	the	
36-60	6010-6014	sake	
36-61	6015-6017	of	
36-62	6018-6028	simplicity	
36-63	6028-6029	,	
36-64	6030-6032	we	
36-65	6032-6033	’	
36-66	6033-6035	ll	
36-67	6036-6044	consider	
36-68	6045-6049	them	
36-69	6050-6052	as	
36-70	6053-6056	one	
36-71	6056-6057	,	
36-72	6058-6063	since	
36-73	6064-6067	you	
36-74	6068-6072	will	
36-75	6073-6077	most	
36-76	6078-6084	likely	
36-77	6085-6088	use	
36-78	6089-6092	the	
36-79	6093-6096	two	
36-80	6097-6103	drives	
36-81	6104-6106	in	
36-82	6107-6113	mirror	
36-83	6114-6118	raid	
36-84	6119-6122	for	
36-85	6123-6127	data	
36-86	6128-6138	protection	
36-87	6138-6139	)	
36-88	6140-6142	As	
36-89	6143-6146	you	
36-90	6147-6150	can	
36-91	6151-6154	see	
36-92	6154-6155	,	
36-93	6156-6159	the	
36-94	6160-6169	dedicated	
36-95	6170-6176	server	
36-96	6177-6182	costs	
36-97	6183-6186	the	
36-98	6187-6191	same	
36-99	6191-6192	,	
36-100	6193-6196	but	
36-101	6197-6199	is	
36-102	6200-6202	at	
36-103	6203-6208	least	
36-104	6209-6213	four	
36-105	6214-6219	times	
36-106	6220-6222	as	
36-107	6223-6231	powerful	
36-108	6231-6232	.	

#Text=There are drawbacks to take in consideration, however:
#Text=VPS
#Text=Bare metal
#Text=Slower
#Text=Faster
#Text=Fast deployment
#Text=Slow deployment
#Text=Built-in backups
#Text=Manual backups
#Text=Easy to restore snapshots
#Text=No snapshots
#Text=Webhost responsible for hardware
#Text=You must debug any hardware issues
#Text=MySQL server
#Text=One of the fastest ways to improve MySQL performance, in general, is to use bare-metal servers, which is a superb option as long as you can manage them.
37-1	6233-6238	There	
37-2	6239-6242	are	
37-3	6243-6252	drawbacks	
37-4	6253-6255	to	
37-5	6256-6260	take	
37-6	6261-6263	in	
37-7	6264-6277	consideration	
37-8	6277-6278	,	
37-9	6279-6286	however	
37-10	6286-6287	:	
37-11	6288-6291	VPS	
37-12	6292-6296	Bare	
37-13	6297-6302	metal	
37-14	6303-6309	Slower	
37-15	6310-6316	Faster	
37-16	6317-6321	Fast	
37-17	6322-6332	deployment	
37-18	6333-6337	Slow	
37-19	6338-6348	deployment	
37-20	6349-6357	Built-in	
37-21	6358-6365	backups	
37-22	6366-6372	Manual	
37-23	6373-6380	backups	
37-24	6381-6385	Easy	
37-25	6386-6388	to	
37-26	6389-6396	restore	
37-27	6397-6406	snapshots	
37-28	6407-6409	No	
37-29	6410-6419	snapshots	
37-30	6420-6427	Webhost	
37-31	6428-6439	responsible	
37-32	6440-6443	for	
37-33	6444-6452	hardware	
37-34	6453-6456	You	
37-35	6457-6461	must	
37-36	6462-6467	debug	
37-37	6468-6471	any	
37-38	6472-6480	hardware	
37-39	6481-6487	issues	
37-40	6488-6493	MySQL	
37-41	6494-6500	server	
37-42	6501-6504	One	
37-43	6505-6507	of	
37-44	6508-6511	the	
37-45	6512-6519	fastest	
37-46	6520-6524	ways	
37-47	6525-6527	to	
37-48	6528-6535	improve	
37-49	6536-6541	MySQL	
37-50	6542-6553	performance	
37-51	6553-6554	,	
37-52	6555-6557	in	
37-53	6558-6565	general	
37-54	6565-6566	,	
37-55	6567-6569	is	
37-56	6570-6572	to	
37-57	6573-6576	use	
37-58	6577-6587	bare-metal	
37-59	6588-6595	servers	
37-60	6595-6596	,	
37-61	6597-6602	which	
37-62	6603-6605	is	
37-63	6606-6607	a	
37-64	6608-6614	superb	
37-65	6615-6621	option	
37-66	6622-6624	as	
37-67	6625-6629	long	
37-68	6630-6632	as	
37-69	6633-6636	you	
37-70	6637-6640	can	
37-71	6641-6647	manage	
37-72	6648-6652	them	
37-73	6652-6653	.	

#Text=Using SSD instead of magnetic drives
#Text=It’s 2020, and there’s no need to use magnetic drives; in all seriousness, don’t unless you don’t need a high-performance database.
38-1	6654-6659	Using	
38-2	6660-6663	SSD	
38-3	6664-6671	instead	
38-4	6672-6674	of	
38-5	6675-6683	magnetic	
38-6	6684-6690	drives	
38-7	6691-6693	It	
38-8	6693-6694	’	
38-9	6694-6695	s	
38-10	6696-6700	2020	
38-11	6700-6701	,	
38-12	6702-6705	and	
38-13	6706-6711	there	
38-14	6711-6712	’	
38-15	6712-6713	s	
38-16	6714-6716	no	
38-17	6717-6721	need	
38-18	6722-6724	to	
38-19	6725-6728	use	
38-20	6729-6737	magnetic	
38-21	6738-6744	drives	
38-22	6744-6745	;	
38-23	6746-6748	in	
38-24	6749-6752	all	
38-25	6753-6764	seriousness	
38-26	6764-6765	,	
38-27	6766-6769	don	
38-28	6769-6770	’	
38-29	6770-6771	t	
38-30	6772-6778	unless	
38-31	6779-6782	you	
38-32	6783-6786	don	
38-33	6786-6787	’	
38-34	6787-6788	t	
38-35	6789-6793	need	
38-36	6794-6795	a	
38-37	6796-6812	high-performance	
38-38	6813-6821	database	
38-39	6821-6822	.	

#Text=A magnetic drive can do around 150 random access writes per second (IOPS), which will limit the number of possible inserts.
39-1	6823-6824	A	
39-2	6825-6833	magnetic	
39-3	6834-6839	drive	
39-4	6840-6843	can	
39-5	6844-6846	do	
39-6	6847-6853	around	
39-7	6854-6857	150	
39-8	6858-6864	random	
39-9	6865-6871	access	
39-10	6872-6878	writes	
39-11	6879-6882	per	
39-12	6883-6889	second	
39-13	6890-6891	(	
39-14	6891-6895	IOPS	
39-15	6895-6896	)	
39-16	6896-6897	,	
39-17	6898-6903	which	
39-18	6904-6908	will	
39-19	6909-6914	limit	
39-20	6915-6918	the	
39-21	6919-6925	number	
39-22	6926-6928	of	
39-23	6929-6937	possible	
39-24	6938-6945	inserts	
39-25	6945-6946	.	

#Text=An SSD will have between 4,000-100,000 IOPS per second, depending on the model.
40-1	6947-6949	An	
40-2	6950-6953	SSD	
40-3	6954-6958	will	
40-4	6959-6963	have	
40-5	6964-6971	between	
40-6	6972-6977	4,000	
40-7	6977-6978	-	
40-8	6978-6985	100,000	
40-9	6986-6990	IOPS	
40-10	6991-6994	per	
40-11	6995-7001	second	
40-12	7001-7002	,	
40-13	7003-7012	depending	
40-14	7013-7015	on	
40-15	7016-7019	the	
40-16	7020-7025	model	
40-17	7025-7026	.	

#Text=Using RAID 5/6 for Database Durability
#Text=Raid 5 means having at least three hard drives―one drive is the parity, and the others are for the data, so each write will write just a part of the data to the drives and calculate the parity for the last drive.
41-1	7027-7032	Using	
41-2	7033-7037	RAID	
41-3	7038-7039	5	
41-4	7039-7040	/	
41-5	7040-7041	6	
41-6	7042-7045	for	
41-7	7046-7054	Database	
41-8	7055-7065	Durability	
41-9	7066-7070	Raid	
41-10	7071-7072	5	
41-11	7073-7078	means	
41-12	7079-7085	having	
41-13	7086-7088	at	
41-14	7089-7094	least	
41-15	7095-7100	three	
41-16	7101-7105	hard	
41-17	7106-7116	drives―one	
41-18	7117-7122	drive	
41-19	7123-7125	is	
41-20	7126-7129	the	
41-21	7130-7136	parity	
41-22	7136-7137	,	
41-23	7138-7141	and	
41-24	7142-7145	the	
41-25	7146-7152	others	
41-26	7153-7156	are	
41-27	7157-7160	for	
41-28	7161-7164	the	
41-29	7165-7169	data	
41-30	7169-7170	,	
41-31	7171-7173	so	
41-32	7174-7178	each	
41-33	7179-7184	write	
41-34	7185-7189	will	
41-35	7190-7195	write	
41-36	7196-7200	just	
41-37	7201-7202	a	
41-38	7203-7207	part	
41-39	7208-7210	of	
41-40	7211-7214	the	
41-41	7215-7219	data	
41-42	7220-7222	to	
41-43	7223-7226	the	
41-44	7227-7233	drives	
41-45	7234-7237	and	
41-46	7238-7247	calculate	
41-47	7248-7251	the	
41-48	7252-7258	parity	
41-49	7259-7262	for	
41-50	7263-7266	the	
41-51	7267-7271	last	
41-52	7272-7277	drive	
41-53	7277-7278	.	

#Text=The parity method allows restoring the RAID array if any drive crashes, even if it’s the parity drive.
42-1	7279-7282	The	
42-2	7283-7289	parity	
42-3	7290-7296	method	
42-4	7297-7303	allows	
42-5	7304-7313	restoring	
42-6	7314-7317	the	
42-7	7318-7322	RAID	
42-8	7323-7328	array	
42-9	7329-7331	if	
42-10	7332-7335	any	
42-11	7336-7341	drive	
42-12	7342-7349	crashes	
42-13	7349-7350	,	
42-14	7351-7355	even	
42-15	7356-7358	if	
42-16	7359-7361	it	
42-17	7361-7362	’	
42-18	7362-7363	s	
42-19	7364-7367	the	
42-20	7368-7374	parity	
42-21	7375-7380	drive	
42-22	7380-7381	.	

#Text=The advantage is that each write takes less time, since only part of the data is written; make sure, though, that you use an excellent raid controller that doesn’t slow down because of parity calculations.
43-1	7382-7385	The	
43-2	7386-7395	advantage	
43-3	7396-7398	is	
43-4	7399-7403	that	
43-5	7404-7408	each	
43-6	7409-7414	write	
43-7	7415-7420	takes	
43-8	7421-7425	less	
43-9	7426-7430	time	
43-10	7430-7431	,	
43-11	7432-7437	since	
43-12	7438-7442	only	
43-13	7443-7447	part	
43-14	7448-7450	of	
43-15	7451-7454	the	
43-16	7455-7459	data	
43-17	7460-7462	is	
43-18	7463-7470	written	
43-19	7470-7471	;	
43-20	7472-7476	make	
43-21	7477-7481	sure	
43-22	7481-7482	,	
43-23	7483-7489	though	
43-24	7489-7490	,	
43-25	7491-7495	that	
43-26	7496-7499	you	
43-27	7500-7503	use	
43-28	7504-7506	an	
43-29	7507-7516	excellent	
43-30	7517-7521	raid	
43-31	7522-7532	controller	
43-32	7533-7537	that	
43-33	7538-7543	doesn	
43-34	7543-7544	’	
43-35	7544-7545	t	
43-36	7546-7550	slow	
43-37	7551-7555	down	
43-38	7556-7563	because	
43-39	7564-7566	of	
43-40	7567-7573	parity	
43-41	7574-7586	calculations	
43-42	7586-7587	.	

#Text=In addition, RAID 5 for MySQL will improve reading speed because it reads only a part of the data from each drive.
44-1	7588-7590	In	
44-2	7591-7599	addition	
44-3	7599-7600	,	
44-4	7601-7605	RAID	
44-5	7606-7607	5	
44-6	7608-7611	for	
44-7	7612-7617	MySQL	
44-8	7618-7622	will	
44-9	7623-7630	improve	
44-10	7631-7638	reading	
44-11	7639-7644	speed	
44-12	7645-7652	because	
44-13	7653-7655	it	
44-14	7656-7661	reads	
44-15	7662-7666	only	
44-16	7667-7668	a	
44-17	7669-7673	part	
44-18	7674-7676	of	
44-19	7677-7680	the	
44-20	7681-7685	data	
44-21	7686-7690	from	
44-22	7691-7695	each	
44-23	7696-7701	drive	
44-24	7701-7702	.	

#Text=RAID 6 means there are at least two parity hard drives, and this allows for the creation of bigger arrays, for example, 8+2: Eight data and two parity.
45-1	7703-7707	RAID	
45-2	7708-7709	6	
45-3	7710-7715	means	
45-4	7716-7721	there	
45-5	7722-7725	are	
45-6	7726-7728	at	
45-7	7729-7734	least	
45-8	7735-7738	two	
45-9	7739-7745	parity	
45-10	7746-7750	hard	
45-11	7751-7757	drives	
45-12	7757-7758	,	
45-13	7759-7762	and	
45-14	7763-7767	this	
45-15	7768-7774	allows	
45-16	7775-7778	for	
45-17	7779-7782	the	
45-18	7783-7791	creation	
45-19	7792-7794	of	
45-20	7795-7801	bigger	
45-21	7802-7808	arrays	
45-22	7808-7809	,	
45-23	7810-7813	for	
45-24	7814-7821	example	
45-25	7821-7822	,	
45-26	7823-7824	8	
45-27	7824-7825	+	
45-28	7825-7826	2	
45-29	7826-7827	:	
45-30	7828-7833	Eight	
45-31	7834-7838	data	
45-32	7839-7842	and	
45-33	7843-7846	two	
45-34	7847-7853	parity	
45-35	7853-7854	.	

#Text=On a personal note, I used ZFS, which should be highly reliable, I created Raid X, which is similar to raid 5, and I had a corrupt drive.
46-1	7855-7857	On	
46-2	7858-7859	a	
46-3	7860-7868	personal	
46-4	7869-7873	note	
46-5	7873-7874	,	
46-6	7875-7876	I	
46-7	7877-7881	used	
46-8	7882-7885	ZFS	
46-9	7885-7886	,	
46-10	7887-7892	which	
46-11	7893-7899	should	
46-12	7900-7902	be	
46-13	7903-7909	highly	
46-14	7910-7918	reliable	
46-15	7918-7919	,	
46-16	7920-7921	I	
46-17	7922-7929	created	
46-18	7930-7934	Raid	
46-19	7935-7936	X	
46-20	7936-7937	,	
46-21	7938-7943	which	
46-22	7944-7946	is	
46-23	7947-7954	similar	
46-24	7955-7957	to	
46-25	7958-7962	raid	
46-26	7963-7964	5	
46-27	7964-7965	,	
46-28	7966-7969	and	
46-29	7970-7971	I	
46-30	7972-7975	had	
46-31	7976-7977	a	
46-32	7978-7985	corrupt	
46-33	7986-7991	drive	
46-34	7991-7992	.	

#Text=I was so glad I used a raid and wanted to recover the array.
47-1	7993-7994	I	
47-2	7995-7998	was	
47-3	7999-8001	so	
47-4	8002-8006	glad	
47-5	8007-8008	I	
47-6	8009-8013	used	
47-7	8014-8015	a	
47-8	8016-8020	raid	
47-9	8021-8024	and	
47-10	8025-8031	wanted	
47-11	8032-8034	to	
47-12	8035-8042	recover	
47-13	8043-8046	the	
47-14	8047-8052	array	
47-15	8052-8053	.	

#Text=I got an error that wasn’t even in Google Search, and data was lost.
48-1	8054-8055	I	
48-2	8056-8059	got	
48-3	8060-8062	an	
48-4	8063-8068	error	
48-5	8069-8073	that	
48-6	8074-8078	wasn	
48-7	8078-8079	’	
48-8	8079-8080	t	
48-9	8081-8085	even	
48-10	8086-8088	in	
48-11	8089-8095	Google	
48-12	8096-8102	Search	
48-13	8102-8103	,	
48-14	8104-8107	and	
48-15	8108-8112	data	
48-16	8113-8116	was	
48-17	8117-8121	lost	
48-18	8121-8122	.	

#Text=Fortunately, it was test data, so it was nothing serious.
49-1	8123-8134	Fortunately	
49-2	8134-8135	,	
49-3	8136-8138	it	
49-4	8139-8142	was	
49-5	8143-8147	test	
49-6	8148-8152	data	
49-7	8152-8153	,	
49-8	8154-8156	so	
49-9	8157-8159	it	
49-10	8160-8163	was	
49-11	8164-8171	nothing	
49-12	8172-8179	serious	
49-13	8179-8180	.	

#Text=But I dropped ZFS and will not use it again.
50-1	8181-8184	But	
50-2	8185-8186	I	
50-3	8187-8194	dropped	
50-4	8195-8198	ZFS	
50-5	8199-8202	and	
50-6	8203-8207	will	
50-7	8208-8211	not	
50-8	8212-8215	use	
50-9	8216-8218	it	
50-10	8219-8224	again	
50-11	8224-8225	.	

#Text=The fact that I’m not going to use it doesn’t mean you shouldn’t.
51-1	8226-8229	The	
51-2	8230-8234	fact	
51-3	8235-8239	that	
51-4	8240-8241	I	
51-5	8241-8242	’	
51-6	8242-8243	m	
51-7	8244-8247	not	
51-8	8248-8253	going	
51-9	8254-8256	to	
51-10	8257-8260	use	
51-11	8261-8263	it	
51-12	8264-8269	doesn	
51-13	8269-8270	’	
51-14	8270-8271	t	
51-15	8272-8276	mean	
51-16	8277-8280	you	
51-17	8281-8288	shouldn	
51-18	8288-8289	’	
51-19	8289-8290	t	
51-20	8290-8291	.	

#Text=Tweak MySQL memory settings
#Text=MySQL default settings are very modest, and the server will not use more than 1GB of RAM.
52-1	8292-8297	Tweak	
52-2	8298-8303	MySQL	
52-3	8304-8310	memory	
52-4	8311-8319	settings	
52-5	8320-8325	MySQL	
52-6	8326-8333	default	
52-7	8334-8342	settings	
52-8	8343-8346	are	
52-9	8347-8351	very	
52-10	8352-8358	modest	
52-11	8358-8359	,	
52-12	8360-8363	and	
52-13	8364-8367	the	
52-14	8368-8374	server	
52-15	8375-8379	will	
52-16	8380-8383	not	
52-17	8384-8387	use	
52-18	8388-8392	more	
52-19	8393-8397	than	
52-20	8398-8401	1GB	
52-21	8402-8404	of	
52-22	8405-8408	RAM	
52-23	8408-8409	.	

#Text=The reason for that is that MySQL comes pre-configured to support web servers on VPS or modest servers.
53-1	8410-8413	The	
53-2	8414-8420	reason	
53-3	8421-8424	for	
53-4	8425-8429	that	
53-5	8430-8432	is	
53-6	8433-8437	that	
53-7	8438-8443	MySQL	
53-8	8444-8449	comes	
53-9	8450-8464	pre-configured	
53-10	8465-8467	to	
53-11	8468-8475	support	
53-12	8476-8479	web	
53-13	8480-8487	servers	
53-14	8488-8490	on	
53-15	8491-8494	VPS	
53-16	8495-8497	or	
53-17	8498-8504	modest	
53-18	8505-8512	servers	
53-19	8512-8513	.	

#Text=The assumption is that the users aren’t tech-savvy, and if you need 50,000 concurrent inserts per second, you will know how to configure the MySQL server.
54-1	8514-8517	The	
54-2	8518-8528	assumption	
54-3	8529-8531	is	
54-4	8532-8536	that	
54-5	8537-8540	the	
54-6	8541-8546	users	
54-7	8547-8551	aren	
54-8	8551-8552	’	
54-9	8552-8553	t	
54-10	8554-8564	tech-savvy	
54-11	8564-8565	,	
54-12	8566-8569	and	
54-13	8570-8572	if	
54-14	8573-8576	you	
54-15	8577-8581	need	
54-16	8582-8588	50,000	
54-17	8589-8599	concurrent	
54-18	8600-8607	inserts	
54-19	8608-8611	per	
54-20	8612-8618	second	
54-21	8618-8619	,	
54-22	8620-8623	you	
54-23	8624-8628	will	
54-24	8629-8633	know	
54-25	8634-8637	how	
54-26	8638-8640	to	
54-27	8641-8650	configure	
54-28	8651-8654	the	
54-29	8655-8660	MySQL	
54-30	8661-8667	server	
54-31	8667-8668	.	

#Text=Some of the memory tweaks I used (and am still using on other scenarios):
#Text=innodb_buffer_pool_size
#Text=From MySQL documentation:
#Text=The size in bytes of the buffer pool, the memory area where InnoDB caches table, index data and query cache (results of select queries).
55-1	8669-8673	Some	
55-2	8674-8676	of	
55-3	8677-8680	the	
55-4	8681-8687	memory	
55-5	8688-8694	tweaks	
55-6	8695-8696	I	
55-7	8697-8701	used	
55-8	8702-8703	(	
55-9	8703-8706	and	
55-10	8707-8709	am	
55-11	8710-8715	still	
55-12	8716-8721	using	
55-13	8722-8724	on	
55-14	8725-8730	other	
55-15	8731-8740	scenarios	
55-16	8740-8741	)	
55-17	8741-8742	:	
55-18	8743-8766	innodb_buffer_pool_size	
55-19	8767-8771	From	
55-20	8772-8777	MySQL	
55-21	8778-8791	documentation	
55-22	8791-8792	:	
55-23	8793-8796	The	
55-24	8797-8801	size	
55-25	8802-8804	in	
55-26	8805-8810	bytes	
55-27	8811-8813	of	
55-28	8814-8817	the	
55-29	8818-8824	buffer	
55-30	8825-8829	pool	
55-31	8829-8830	,	
55-32	8831-8834	the	
55-33	8835-8841	memory	
55-34	8842-8846	area	
55-35	8847-8852	where	
55-36	8853-8859	InnoDB	
55-37	8860-8866	caches	
55-38	8867-8872	table	
55-39	8872-8873	,	
55-40	8874-8879	index	
55-41	8880-8884	data	
55-42	8885-8888	and	
55-43	8889-8894	query	
55-44	8895-8900	cache	
55-45	8901-8902	(	
55-46	8902-8909	results	
55-47	8910-8912	of	
55-48	8913-8919	select	
55-49	8920-8927	queries	
55-50	8927-8928	)	
55-51	8928-8929	.	

#Text=The default value is 134217728 bytes (128MB) according to the reference manual.
56-1	8930-8933	The	
56-2	8934-8941	default	
56-3	8942-8947	value	
56-4	8948-8950	is	
56-5	8951-8960	134217728	
56-6	8961-8966	bytes	
56-7	8967-8968	(	
56-8	8968-8973	128MB	
56-9	8973-8974	)	
56-10	8975-8984	according	
56-11	8985-8987	to	
56-12	8988-8991	the	
56-13	8992-9001	reference	
56-14	9002-9008	manual	
56-15	9008-9009	.	

#Text=Primary memory setting for MySQL, according to Percona, should be 80-90% of total server memory, so in the 64GB example, I will set it to 57GB.
57-1	9010-9017	Primary	
57-2	9018-9024	memory	
57-3	9025-9032	setting	
57-4	9033-9036	for	
57-5	9037-9042	MySQL	
57-6	9042-9043	,	
57-7	9044-9053	according	
57-8	9054-9056	to	
57-9	9057-9064	Percona	
57-10	9064-9065	,	
57-11	9066-9072	should	
57-12	9073-9075	be	
57-13	9076-9078	80	
57-14	9078-9079	-	
57-15	9079-9082	90%	
57-16	9083-9085	of	
57-17	9086-9091	total	
57-18	9092-9098	server	
57-19	9099-9105	memory	
57-20	9105-9106	,	
57-21	9107-9109	so	
57-22	9110-9112	in	
57-23	9113-9116	the	
57-24	9117-9121	64GB	
57-25	9122-9129	example	
57-26	9129-9130	,	
57-27	9131-9132	I	
57-28	9133-9137	will	
57-29	9138-9141	set	
57-30	9142-9144	it	
57-31	9145-9147	to	
57-32	9148-9152	57GB	
57-33	9152-9153	.	

#Text=Understand that this value is dynamic, which means it will grow to the maximum as needed.
58-1	9154-9164	Understand	
58-2	9165-9169	that	
58-3	9170-9174	this	
58-4	9175-9180	value	
58-5	9181-9183	is	
58-6	9184-9191	dynamic	
58-7	9191-9192	,	
58-8	9193-9198	which	
58-9	9199-9204	means	
58-10	9205-9207	it	
58-11	9208-9212	will	
58-12	9213-9217	grow	
58-13	9218-9220	to	
58-14	9221-9224	the	
58-15	9225-9232	maximum	
58-16	9233-9235	as	
58-17	9236-9242	needed	
58-18	9242-9243	.	

#Text=The more memory available to MySQL means that there’s more space for cache and indexes, which reduces disk IO and improves speed.
59-1	9244-9247	The	
59-2	9248-9252	more	
59-3	9253-9259	memory	
59-4	9260-9269	available	
59-5	9270-9272	to	
59-6	9273-9278	MySQL	
59-7	9279-9284	means	
59-8	9285-9289	that	
59-9	9290-9295	there	
59-10	9295-9296	’	
59-11	9296-9297	s	
59-12	9298-9302	more	
59-13	9303-9308	space	
59-14	9309-9312	for	
59-15	9313-9318	cache	
59-16	9319-9322	and	
59-17	9323-9330	indexes	
59-18	9330-9331	,	
59-19	9332-9337	which	
59-20	9338-9345	reduces	
59-21	9346-9350	disk	
59-22	9351-9353	IO	
59-23	9354-9357	and	
59-24	9358-9366	improves	
59-25	9367-9372	speed	
59-26	9372-9373	.	

#Text=Make sure you put a value higher than the amount of memory; by accident once, probably a finger slipped, and I put nine times the amount of free memory.
60-1	9374-9378	Make	
60-2	9379-9383	sure	
60-3	9384-9387	you	
60-4	9388-9391	put	
60-5	9392-9393	a	
60-6	9394-9399	value	
60-7	9400-9406	higher	
60-8	9407-9411	than	
60-9	9412-9415	the	
60-10	9416-9422	amount	
60-11	9423-9425	of	
60-12	9426-9432	memory	
60-13	9432-9433	;	
60-14	9434-9436	by	
60-15	9437-9445	accident	
60-16	9446-9450	once	
60-17	9450-9451	,	
60-18	9452-9460	probably	
60-19	9461-9462	a	
60-20	9463-9469	finger	
60-21	9470-9477	slipped	
60-22	9477-9478	,	
60-23	9479-9482	and	
60-24	9483-9484	I	
60-25	9485-9488	put	
60-26	9489-9493	nine	
60-27	9494-9499	times	
60-28	9500-9503	the	
60-29	9504-9510	amount	
60-30	9511-9513	of	
60-31	9514-9518	free	
60-32	9519-9525	memory	
60-33	9525-9526	.	

#Text=The database was throwing random errors.
#Text=innodb_buffer_pool_instances
#Text=From MySQL documentation:
#Text=Typically, having multiple buffer pool instances is appropriate for systems that allocate multiple gigabytes to the InnoDB buffer pool, with each instance being one gigabyte or larger
#Text=This setting allows you to have multiple pools (the total size will still be the maximum specified in the previous section), so, for example, let’s say we have set this value to 10, and the innodb_buffer_pool_size is set to 50GB., MySQL will then allocate ten pools of 5GB.
61-1	9527-9530	The	
61-2	9531-9539	database	
61-3	9540-9543	was	
61-4	9544-9552	throwing	
61-5	9553-9559	random	
61-6	9560-9566	errors	
61-7	9566-9567	.	
61-8	9568-9596	innodb_buffer_pool_instances	
61-9	9597-9601	From	
61-10	9602-9607	MySQL	
61-11	9608-9621	documentation	
61-12	9621-9622	:	
61-13	9623-9632	Typically	
61-14	9632-9633	,	
61-15	9634-9640	having	
61-16	9641-9649	multiple	
61-17	9650-9656	buffer	
61-18	9657-9661	pool	
61-19	9662-9671	instances	
61-20	9672-9674	is	
61-21	9675-9686	appropriate	
61-22	9687-9690	for	
61-23	9691-9698	systems	
61-24	9699-9703	that	
61-25	9704-9712	allocate	
61-26	9713-9721	multiple	
61-27	9722-9731	gigabytes	
61-28	9732-9734	to	
61-29	9735-9738	the	
61-30	9739-9745	InnoDB	
61-31	9746-9752	buffer	
61-32	9753-9757	pool	
61-33	9757-9758	,	
61-34	9759-9763	with	
61-35	9764-9768	each	
61-36	9769-9777	instance	
61-37	9778-9783	being	
61-38	9784-9787	one	
61-39	9788-9796	gigabyte	
61-40	9797-9799	or	
61-41	9800-9806	larger	
61-42	9807-9811	This	
61-43	9812-9819	setting	
61-44	9820-9826	allows	
61-45	9827-9830	you	
61-46	9831-9833	to	
61-47	9834-9838	have	
61-48	9839-9847	multiple	
61-49	9848-9853	pools	
61-50	9854-9855	(	
61-51	9855-9858	the	
61-52	9859-9864	total	
61-53	9865-9869	size	
61-54	9870-9874	will	
61-55	9875-9880	still	
61-56	9881-9883	be	
61-57	9884-9887	the	
61-58	9888-9895	maximum	
61-59	9896-9905	specified	
61-60	9906-9908	in	
61-61	9909-9912	the	
61-62	9913-9921	previous	
61-63	9922-9929	section	
61-64	9929-9930	)	
61-65	9930-9931	,	
61-66	9932-9934	so	
61-67	9934-9935	,	
61-68	9936-9939	for	
61-69	9940-9947	example	
61-70	9947-9948	,	
61-71	9949-9952	let	
61-72	9952-9953	’	
61-73	9953-9954	s	
61-74	9955-9958	say	
61-75	9959-9961	we	
61-76	9962-9966	have	
61-77	9967-9970	set	
61-78	9971-9975	this	
61-79	9976-9981	value	
61-80	9982-9984	to	
61-81	9985-9987	10	
61-82	9987-9988	,	
61-83	9989-9992	and	
61-84	9993-9996	the	
61-85	9997-10020	innodb_buffer_pool_size	
61-86	10021-10023	is	
61-87	10024-10027	set	
61-88	10028-10030	to	
61-89	10031-10035	50GB	
61-90	10035-10036	.	
61-91	10036-10037	,	
61-92	10038-10043	MySQL	
61-93	10044-10048	will	
61-94	10049-10053	then	
61-95	10054-10062	allocate	
61-96	10063-10066	ten	
61-97	10067-10072	pools	
61-98	10073-10075	of	
61-99	10076-10079	5GB	
61-100	10079-10080	.	

#Text=Having multiple pools allows for better concurrency control and means that each pool is shared by fewer connections and incurs less locking.
62-1	10081-10087	Having	
62-2	10088-10096	multiple	
62-3	10097-10102	pools	
62-4	10103-10109	allows	
62-5	10110-10113	for	
62-6	10114-10120	better	
62-7	10121-10132	concurrency	
62-8	10133-10140	control	
62-9	10141-10144	and	
62-10	10145-10150	means	
62-11	10151-10155	that	
62-12	10156-10160	each	
62-13	10161-10165	pool	
62-14	10166-10168	is	
62-15	10169-10175	shared	
62-16	10176-10178	by	
62-17	10179-10184	fewer	
62-18	10185-10196	connections	
62-19	10197-10200	and	
62-20	10201-10207	incurs	
62-21	10208-10212	less	
62-22	10213-10220	locking	
62-23	10220-10221	.	

#Text=Increasing the number of the pool is beneficial in case multiple connections perform heavy operations.
63-1	10222-10232	Increasing	
63-2	10233-10236	the	
63-3	10237-10243	number	
63-4	10244-10246	of	
63-5	10247-10250	the	
63-6	10251-10255	pool	
63-7	10256-10258	is	
63-8	10259-10269	beneficial	
63-9	10270-10272	in	
63-10	10273-10277	case	
63-11	10278-10286	multiple	
63-12	10287-10298	connections	
63-13	10299-10306	perform	
63-14	10307-10312	heavy	
63-15	10313-10323	operations	
63-16	10323-10324	.	

#Text=Other Memory settings
#Text=Just to clarify why I didn’t mention it, MySQL has more flags for memory settings, but they aren’t related to insert speed.
64-1	10325-10330	Other	
64-2	10331-10337	Memory	
64-3	10338-10346	settings	
64-4	10347-10351	Just	
64-5	10352-10354	to	
64-6	10355-10362	clarify	
64-7	10363-10366	why	
64-8	10367-10368	I	
64-9	10369-10373	didn	
64-10	10373-10374	’	
64-11	10374-10375	t	
64-12	10376-10383	mention	
64-13	10384-10386	it	
64-14	10386-10387	,	
64-15	10388-10393	MySQL	
64-16	10394-10397	has	
64-17	10398-10402	more	
64-18	10403-10408	flags	
64-19	10409-10412	for	
64-20	10413-10419	memory	
64-21	10420-10428	settings	
64-22	10428-10429	,	
64-23	10430-10433	but	
64-24	10434-10438	they	
64-25	10439-10443	aren	
64-26	10443-10444	’	
64-27	10444-10445	t	
64-28	10446-10453	related	
64-29	10454-10456	to	
64-30	10457-10463	insert	
64-31	10464-10469	speed	
64-32	10469-10470	.	

#Text=They can affect insert performance if the database is used for reading other data while writing.
65-1	10471-10475	They	
65-2	10476-10479	can	
65-3	10480-10486	affect	
65-4	10487-10493	insert	
65-5	10494-10505	performance	
65-6	10506-10508	if	
65-7	10509-10512	the	
65-8	10513-10521	database	
65-9	10522-10524	is	
65-10	10525-10529	used	
65-11	10530-10533	for	
65-12	10534-10541	reading	
65-13	10542-10547	other	
65-14	10548-10552	data	
65-15	10553-10558	while	
65-16	10559-10566	writing	
65-17	10566-10567	.	

#Text=In that case, any read optimization will allow for more server resources for the insert statements.
66-1	10568-10570	In	
66-2	10571-10575	that	
66-3	10576-10580	case	
66-4	10580-10581	,	
66-5	10582-10585	any	
66-6	10586-10590	read	
66-7	10591-10603	optimization	
66-8	10604-10608	will	
66-9	10609-10614	allow	
66-10	10615-10618	for	
66-11	10619-10623	more	
66-12	10624-10630	server	
66-13	10631-10640	resources	
66-14	10641-10644	for	
66-15	10645-10648	the	
66-16	10649-10655	insert	
66-17	10656-10666	statements	
66-18	10666-10667	.	

#Text=Tweak commit mechanism
#Text=MySQL is ACID compliant (Atomicity, Consistency, Isolation, Durability), which means it has to do certain things in a certain way that can slow down the database.
67-1	10668-10673	Tweak	
67-2	10674-10680	commit	
67-3	10681-10690	mechanism	
67-4	10691-10696	MySQL	
67-5	10697-10699	is	
67-6	10700-10704	ACID	
67-7	10705-10714	compliant	
67-8	10715-10716	(	
67-9	10716-10725	Atomicity	
67-10	10725-10726	,	
67-11	10727-10738	Consistency	
67-12	10738-10739	,	
67-13	10740-10749	Isolation	
67-14	10749-10750	,	
67-15	10751-10761	Durability	
67-16	10761-10762	)	
67-17	10762-10763	,	
67-18	10764-10769	which	
67-19	10770-10775	means	
67-20	10776-10778	it	
67-21	10779-10782	has	
67-22	10783-10785	to	
67-23	10786-10788	do	
67-24	10789-10796	certain	
67-25	10797-10803	things	
67-26	10804-10806	in	
67-27	10807-10808	a	
67-28	10809-10816	certain	
67-29	10817-10820	way	
67-30	10821-10825	that	
67-31	10826-10829	can	
67-32	10830-10834	slow	
67-33	10835-10839	down	
67-34	10840-10843	the	
67-35	10844-10852	database	
67-36	10852-10853	.	

#Text=In some cases, you don’t want ACID and can remove part of it for better performance.
68-1	10854-10856	In	
68-2	10857-10861	some	
68-3	10862-10867	cases	
68-4	10867-10868	,	
68-5	10869-10872	you	
68-6	10873-10876	don	
68-7	10876-10877	’	
68-8	10877-10878	t	
68-9	10879-10883	want	
68-10	10884-10888	ACID	
68-11	10889-10892	and	
68-12	10893-10896	can	
68-13	10897-10903	remove	
68-14	10904-10908	part	
68-15	10909-10911	of	
68-16	10912-10914	it	
68-17	10915-10918	for	
68-18	10919-10925	better	
68-19	10926-10937	performance	
68-20	10937-10938	.	

#Text=What is MySQL transaction
#Text=Part of ACID compliance is being able to do a transaction, which means running a set of operations together that either all succeed or all fail.
69-1	10939-10943	What	
69-2	10944-10946	is	
69-3	10947-10952	MySQL	
69-4	10953-10964	transaction	
69-5	10965-10969	Part	
69-6	10970-10972	of	
69-7	10973-10977	ACID	
69-8	10978-10988	compliance	
69-9	10989-10991	is	
69-10	10992-10997	being	
69-11	10998-11002	able	
69-12	11003-11005	to	
69-13	11006-11008	do	
69-14	11009-11010	a	
69-15	11011-11022	transaction	
69-16	11022-11023	,	
69-17	11024-11029	which	
69-18	11030-11035	means	
69-19	11036-11043	running	
69-20	11044-11045	a	
69-21	11046-11049	set	
69-22	11050-11052	of	
69-23	11053-11063	operations	
69-24	11064-11072	together	
69-25	11073-11077	that	
69-26	11078-11084	either	
69-27	11085-11088	all	
69-28	11089-11096	succeed	
69-29	11097-11099	or	
69-30	11100-11103	all	
69-31	11104-11108	fail	
69-32	11108-11109	.	

#Text=For example, let’s say we do ten inserts in one database transaction, and one of the inserts fails.
70-1	11110-11113	For	
70-2	11114-11121	example	
70-3	11121-11122	,	
70-4	11123-11126	let	
70-5	11126-11127	’	
70-6	11127-11128	s	
70-7	11129-11132	say	
70-8	11133-11135	we	
70-9	11136-11138	do	
70-10	11139-11142	ten	
70-11	11143-11150	inserts	
70-12	11151-11153	in	
70-13	11154-11157	one	
70-14	11158-11166	database	
70-15	11167-11178	transaction	
70-16	11178-11179	,	
70-17	11180-11183	and	
70-18	11184-11187	one	
70-19	11188-11190	of	
70-20	11191-11194	the	
70-21	11195-11202	inserts	
70-22	11203-11208	fails	
70-23	11208-11209	.	

#Text=The database should “cancel” all the other inserts (this is called a rollback) as if none of our inserts (or any other modification) had occurred.
71-1	11210-11213	The	
71-2	11214-11222	database	
71-3	11223-11229	should	
71-4	11230-11231	“	
71-5	11231-11237	cancel	
71-6	11237-11238	”	
71-7	11239-11242	all	
71-8	11243-11246	the	
71-9	11247-11252	other	
71-10	11253-11260	inserts	
71-11	11261-11262	(	
71-12	11262-11266	this	
71-13	11267-11269	is	
71-14	11270-11276	called	
71-15	11277-11278	a	
71-16	11279-11287	rollback	
71-17	11287-11288	)	
71-18	11289-11291	as	
71-19	11292-11294	if	
71-20	11295-11299	none	
71-21	11300-11302	of	
71-22	11303-11306	our	
71-23	11307-11314	inserts	
71-24	11315-11316	(	
71-25	11316-11318	or	
71-26	11319-11322	any	
71-27	11323-11328	other	
71-28	11329-11341	modification	
71-29	11341-11342	)	
71-30	11343-11346	had	
71-31	11347-11355	occurred	
71-32	11355-11356	.	

#Text=A single transaction can contain one operation or thousands.
72-1	11357-11358	A	
72-2	11359-11365	single	
72-3	11366-11377	transaction	
72-4	11378-11381	can	
72-5	11382-11389	contain	
72-6	11390-11393	one	
72-7	11394-11403	operation	
72-8	11404-11406	or	
72-9	11407-11416	thousands	
72-10	11416-11417	.	

#Text=What is MySQL commit
#Text=A commit is when the database takes the transaction and makes it permanent.
73-1	11418-11422	What	
73-2	11423-11425	is	
73-3	11426-11431	MySQL	
73-4	11432-11438	commit	
73-5	11439-11440	A	
73-6	11441-11447	commit	
73-7	11448-11450	is	
73-8	11451-11455	when	
73-9	11456-11459	the	
73-10	11460-11468	database	
73-11	11469-11474	takes	
73-12	11475-11478	the	
73-13	11479-11490	transaction	
73-14	11491-11494	and	
73-15	11495-11500	makes	
73-16	11501-11503	it	
73-17	11504-11513	permanent	
73-18	11513-11514	.	

#Text=The process of a transaction is:
#Text=Start transaction
#Text=Do some modifications
#Text=Commit transaction
#Text=The way MySQL does commit: It has a transaction log, whereby every transaction goes to a log file and it’s committed only from that log file.
74-1	11515-11518	The	
74-2	11519-11526	process	
74-3	11527-11529	of	
74-4	11530-11531	a	
74-5	11532-11543	transaction	
74-6	11544-11546	is	
74-7	11546-11547	:	
74-8	11548-11553	Start	
74-9	11554-11565	transaction	
74-10	11566-11568	Do	
74-11	11569-11573	some	
74-12	11574-11587	modifications	
74-13	11588-11594	Commit	
74-14	11595-11606	transaction	
74-15	11607-11610	The	
74-16	11611-11614	way	
74-17	11615-11620	MySQL	
74-18	11621-11625	does	
74-19	11626-11632	commit	
74-20	11632-11633	:	
74-21	11634-11636	It	
74-22	11637-11640	has	
74-23	11641-11642	a	
74-24	11643-11654	transaction	
74-25	11655-11658	log	
74-26	11658-11659	,	
74-27	11660-11667	whereby	
74-28	11668-11673	every	
74-29	11674-11685	transaction	
74-30	11686-11690	goes	
74-31	11691-11693	to	
74-32	11694-11695	a	
74-33	11696-11699	log	
74-34	11700-11704	file	
74-35	11705-11708	and	
74-36	11709-11711	it	
74-37	11711-11712	’	
74-38	11712-11713	s	
74-39	11714-11723	committed	
74-40	11724-11728	only	
74-41	11729-11733	from	
74-42	11734-11738	that	
74-43	11739-11742	log	
74-44	11743-11747	file	
74-45	11747-11748	.	

#Text=The transaction log is needed in case of a power outage or any kind of other failure.
75-1	11749-11752	The	
75-2	11753-11764	transaction	
75-3	11765-11768	log	
75-4	11769-11771	is	
75-5	11772-11778	needed	
75-6	11779-11781	in	
75-7	11782-11786	case	
75-8	11787-11789	of	
75-9	11790-11791	a	
75-10	11792-11797	power	
75-11	11798-11804	outage	
75-12	11805-11807	or	
75-13	11808-11811	any	
75-14	11812-11816	kind	
75-15	11817-11819	of	
75-16	11820-11825	other	
75-17	11826-11833	failure	
75-18	11833-11834	.	

#Text=The database can then resume the transaction from the log file and not lose any data.
76-1	11835-11838	The	
76-2	11839-11847	database	
76-3	11848-11851	can	
76-4	11852-11856	then	
76-5	11857-11863	resume	
76-6	11864-11867	the	
76-7	11868-11879	transaction	
76-8	11880-11884	from	
76-9	11885-11888	the	
76-10	11889-11892	log	
76-11	11893-11897	file	
76-12	11898-11901	and	
76-13	11902-11905	not	
76-14	11906-11910	lose	
76-15	11911-11914	any	
76-16	11915-11919	data	
76-17	11919-11920	.	

#Text=MySQL inserts with a transaction
#Text=After we do an insert, it goes to a transaction log, and from there it’s committed and flushed to the disk, which means that we have our data written two times, once to the transaction log and once to the actual MySQL table.
77-1	11921-11926	MySQL	
77-2	11927-11934	inserts	
77-3	11935-11939	with	
77-4	11940-11941	a	
77-5	11942-11953	transaction	
77-6	11954-11959	After	
77-7	11960-11962	we	
77-8	11963-11965	do	
77-9	11966-11968	an	
77-10	11969-11975	insert	
77-11	11975-11976	,	
77-12	11977-11979	it	
77-13	11980-11984	goes	
77-14	11985-11987	to	
77-15	11988-11989	a	
77-16	11990-12001	transaction	
77-17	12002-12005	log	
77-18	12005-12006	,	
77-19	12007-12010	and	
77-20	12011-12015	from	
77-21	12016-12021	there	
77-22	12022-12024	it	
77-23	12024-12025	’	
77-24	12025-12026	s	
77-25	12027-12036	committed	
77-26	12037-12040	and	
77-27	12041-12048	flushed	
77-28	12049-12051	to	
77-29	12052-12055	the	
77-30	12056-12060	disk	
77-31	12060-12061	,	
77-32	12062-12067	which	
77-33	12068-12073	means	
77-34	12074-12078	that	
77-35	12079-12081	we	
77-36	12082-12086	have	
77-37	12087-12090	our	
77-38	12091-12095	data	
77-39	12096-12103	written	
77-40	12104-12107	two	
77-41	12108-12113	times	
77-42	12113-12114	,	
77-43	12115-12119	once	
77-44	12120-12122	to	
77-45	12123-12126	the	
77-46	12127-12138	transaction	
77-47	12139-12142	log	
77-48	12143-12146	and	
77-49	12147-12151	once	
77-50	12152-12154	to	
77-51	12155-12158	the	
77-52	12159-12165	actual	
77-53	12166-12171	MySQL	
77-54	12172-12177	table	
77-55	12177-12178	.	

#Text=In specific scenarios where we care more about data integrity that’s a good thing, but if we upload from a file and can always re-upload in case something happened, we are losing speed.
78-1	12179-12181	In	
78-2	12182-12190	specific	
78-3	12191-12200	scenarios	
78-4	12201-12206	where	
78-5	12207-12209	we	
78-6	12210-12214	care	
78-7	12215-12219	more	
78-8	12220-12225	about	
78-9	12226-12230	data	
78-10	12231-12240	integrity	
78-11	12241-12245	that	
78-12	12245-12246	’	
78-13	12246-12247	s	
78-14	12248-12249	a	
78-15	12250-12254	good	
78-16	12255-12260	thing	
78-17	12260-12261	,	
78-18	12262-12265	but	
78-19	12266-12268	if	
78-20	12269-12271	we	
78-21	12272-12278	upload	
78-22	12279-12283	from	
78-23	12284-12285	a	
78-24	12286-12290	file	
78-25	12291-12294	and	
78-26	12295-12298	can	
78-27	12299-12305	always	
78-28	12306-12315	re-upload	
78-29	12316-12318	in	
78-30	12319-12323	case	
78-31	12324-12333	something	
78-32	12334-12342	happened	
78-33	12342-12343	,	
78-34	12344-12346	we	
78-35	12347-12350	are	
78-36	12351-12357	losing	
78-37	12358-12363	speed	
78-38	12363-12364	.	

#Text=Changing the commit mechanism
#Text=The flag innodb_flush_log_at_trx_commit controls the way transactions are flushed to the hard drive.
79-1	12365-12373	Changing	
79-2	12374-12377	the	
79-3	12378-12384	commit	
79-4	12385-12394	mechanism	
79-5	12395-12398	The	
79-6	12399-12403	flag	
79-7	12404-12434	innodb_flush_log_at_trx_commit	
79-8	12435-12443	controls	
79-9	12444-12447	the	
79-10	12448-12451	way	
79-11	12452-12464	transactions	
79-12	12465-12468	are	
79-13	12469-12476	flushed	
79-14	12477-12479	to	
79-15	12480-12483	the	
79-16	12484-12488	hard	
79-17	12489-12494	drive	
79-18	12494-12495	.	

#Text=There are three possible settings, each with its pros and cons.
#Text=innodb_flush_log_at_trx_commit=1
#Text=The default MySQL value: This value is required for full ACID compliance.
80-1	12496-12501	There	
80-2	12502-12505	are	
80-3	12506-12511	three	
80-4	12512-12520	possible	
80-5	12521-12529	settings	
80-6	12529-12530	,	
80-7	12531-12535	each	
80-8	12536-12540	with	
80-9	12541-12544	its	
80-10	12545-12549	pros	
80-11	12550-12553	and	
80-12	12554-12558	cons	
80-13	12558-12559	.	
80-14	12560-12590	innodb_flush_log_at_trx_commit	
80-15	12590-12591	=	
80-16	12591-12592	1	
80-17	12593-12596	The	
80-18	12597-12604	default	
80-19	12605-12610	MySQL	
80-20	12611-12616	value	
80-21	12616-12617	:	
80-22	12618-12622	This	
80-23	12623-12628	value	
80-24	12629-12631	is	
80-25	12632-12640	required	
80-26	12641-12644	for	
80-27	12645-12649	full	
80-28	12650-12654	ACID	
80-29	12655-12665	compliance	
80-30	12665-12666	.	

#Text=MySQL writes the transaction to a log file and flushes it to the disk on commit.
#Text=innodb_flush_log_at_trx_commit=0
#Text=With this option, MySQL will write the transaction to the log file and will flush to the disk at a specific interval (once per second).
#Text=innodb_flush_log_at_trx_commit=2
#Text=With this option, MySQL flushes the transaction to OS buffers, and from the buffers, it flushes to the disk at each interval that will be the fastest.
#Text=innodb_flush_log_at_timeout
#Text=This flag allows you to change the commit timeout from one second to another value, and on some setups, changing this value will benefit performance.
81-1	12667-12672	MySQL	
81-2	12673-12679	writes	
81-3	12680-12683	the	
81-4	12684-12695	transaction	
81-5	12696-12698	to	
81-6	12699-12700	a	
81-7	12701-12704	log	
81-8	12705-12709	file	
81-9	12710-12713	and	
81-10	12714-12721	flushes	
81-11	12722-12724	it	
81-12	12725-12727	to	
81-13	12728-12731	the	
81-14	12732-12736	disk	
81-15	12737-12739	on	
81-16	12740-12746	commit	
81-17	12746-12747	.	
81-18	12748-12778	innodb_flush_log_at_trx_commit	
81-19	12778-12779	=	
81-20	12779-12780	0	
81-21	12781-12785	With	
81-22	12786-12790	this	
81-23	12791-12797	option	
81-24	12797-12798	,	
81-25	12799-12804	MySQL	
81-26	12805-12809	will	
81-27	12810-12815	write	
81-28	12816-12819	the	
81-29	12820-12831	transaction	
81-30	12832-12834	to	
81-31	12835-12838	the	
81-32	12839-12842	log	
81-33	12843-12847	file	
81-34	12848-12851	and	
81-35	12852-12856	will	
81-36	12857-12862	flush	
81-37	12863-12865	to	
81-38	12866-12869	the	
81-39	12870-12874	disk	
81-40	12875-12877	at	
81-41	12878-12879	a	
81-42	12880-12888	specific	
81-43	12889-12897	interval	
81-44	12898-12899	(	
81-45	12899-12903	once	
81-46	12904-12907	per	
81-47	12908-12914	second	
81-48	12914-12915	)	
81-49	12915-12916	.	
81-50	12917-12947	innodb_flush_log_at_trx_commit	
81-51	12947-12948	=	
81-52	12948-12949	2	
81-53	12950-12954	With	
81-54	12955-12959	this	
81-55	12960-12966	option	
81-56	12966-12967	,	
81-57	12968-12973	MySQL	
81-58	12974-12981	flushes	
81-59	12982-12985	the	
81-60	12986-12997	transaction	
81-61	12998-13000	to	
81-62	13001-13003	OS	
81-63	13004-13011	buffers	
81-64	13011-13012	,	
81-65	13013-13016	and	
81-66	13017-13021	from	
81-67	13022-13025	the	
81-68	13026-13033	buffers	
81-69	13033-13034	,	
81-70	13035-13037	it	
81-71	13038-13045	flushes	
81-72	13046-13048	to	
81-73	13049-13052	the	
81-74	13053-13057	disk	
81-75	13058-13060	at	
81-76	13061-13065	each	
81-77	13066-13074	interval	
81-78	13075-13079	that	
81-79	13080-13084	will	
81-80	13085-13087	be	
81-81	13088-13091	the	
81-82	13092-13099	fastest	
81-83	13099-13100	.	
81-84	13101-13128	innodb_flush_log_at_timeout	
81-85	13129-13133	This	
81-86	13134-13138	flag	
81-87	13139-13145	allows	
81-88	13146-13149	you	
81-89	13150-13152	to	
81-90	13153-13159	change	
81-91	13160-13163	the	
81-92	13164-13170	commit	
81-93	13171-13178	timeout	
81-94	13179-13183	from	
81-95	13184-13187	one	
81-96	13188-13194	second	
81-97	13195-13197	to	
81-98	13198-13205	another	
81-99	13206-13211	value	
81-100	13211-13212	,	
81-101	13213-13216	and	
81-102	13217-13219	on	
81-103	13220-13224	some	
81-104	13225-13231	setups	
81-105	13231-13232	,	
81-106	13233-13241	changing	
81-107	13242-13246	this	
81-108	13247-13252	value	
81-109	13253-13257	will	
81-110	13258-13265	benefit	
81-111	13266-13277	performance	
81-112	13277-13278	.	

#Text=I believe it has to do with systems on Magnetic drives with many reads.
82-1	13279-13280	I	
82-2	13281-13288	believe	
82-3	13289-13291	it	
82-4	13292-13295	has	
82-5	13296-13298	to	
82-6	13299-13301	do	
82-7	13302-13306	with	
82-8	13307-13314	systems	
82-9	13315-13317	on	
82-10	13318-13326	Magnetic	
82-11	13327-13333	drives	
82-12	13334-13338	with	
82-13	13339-13343	many	
82-14	13344-13349	reads	
82-15	13349-13350	.	

#Text=Using precalculated primary key for string
#Text=Let’s say we have a table of Hosts.
83-1	13351-13356	Using	
83-2	13357-13370	precalculated	
83-3	13371-13378	primary	
83-4	13379-13382	key	
83-5	13383-13386	for	
83-6	13387-13393	string	
83-7	13394-13397	Let	
83-8	13397-13398	’	
83-9	13398-13399	s	
83-10	13400-13403	say	
83-11	13404-13406	we	
83-12	13407-13411	have	
83-13	13412-13413	a	
83-14	13414-13419	table	
83-15	13420-13422	of	
83-16	13423-13428	Hosts	
83-17	13428-13429	.	

#Text=Naturally, we will want to use the host as the primary key, which makes perfect sense.
84-1	13430-13439	Naturally	
84-2	13439-13440	,	
84-3	13441-13443	we	
84-4	13444-13448	will	
84-5	13449-13453	want	
84-6	13454-13456	to	
84-7	13457-13460	use	
84-8	13461-13464	the	
84-9	13465-13469	host	
84-10	13470-13472	as	
84-11	13473-13476	the	
84-12	13477-13484	primary	
84-13	13485-13488	key	
84-14	13488-13489	,	
84-15	13490-13495	which	
84-16	13496-13501	makes	
84-17	13502-13509	perfect	
84-18	13510-13515	sense	
84-19	13515-13516	.	

#Text=The problem with that approach, though, is that we have to use the full string length in every table you want to insert into: A host can be 4 bytes long, or it can be 128 bytes long.
85-1	13517-13520	The	
85-2	13521-13528	problem	
85-3	13529-13533	with	
85-4	13534-13538	that	
85-5	13539-13547	approach	
85-6	13547-13548	,	
85-7	13549-13555	though	
85-8	13555-13556	,	
85-9	13557-13559	is	
85-10	13560-13564	that	
85-11	13565-13567	we	
85-12	13568-13572	have	
85-13	13573-13575	to	
85-14	13576-13579	use	
85-15	13580-13583	the	
85-16	13584-13588	full	
85-17	13589-13595	string	
85-18	13596-13602	length	
85-19	13603-13605	in	
85-20	13606-13611	every	
85-21	13612-13617	table	
85-22	13618-13621	you	
85-23	13622-13626	want	
85-24	13627-13629	to	
85-25	13630-13636	insert	
85-26	13637-13641	into	
85-27	13641-13642	:	
85-28	13643-13644	A	
85-29	13645-13649	host	
85-30	13650-13653	can	
85-31	13654-13656	be	
85-32	13657-13658	4	
85-33	13659-13664	bytes	
85-34	13665-13669	long	
85-35	13669-13670	,	
85-36	13671-13673	or	
85-37	13674-13676	it	
85-38	13677-13680	can	
85-39	13681-13683	be	
85-40	13684-13687	128	
85-41	13688-13693	bytes	
85-42	13694-13698	long	
85-43	13698-13699	.	

#Text=Inserting the full-length string will, obviously, impact performance and storage.
86-1	13700-13709	Inserting	
86-2	13710-13713	the	
86-3	13714-13725	full-length	
86-4	13726-13732	string	
86-5	13733-13737	will	
86-6	13737-13738	,	
86-7	13739-13748	obviously	
86-8	13748-13749	,	
86-9	13750-13756	impact	
86-10	13757-13768	performance	
86-11	13769-13772	and	
86-12	13773-13780	storage	
86-13	13780-13781	.	

#Text=The problem becomes worse if we use the URL itself as a primary key, which can be one byte to 1024 bytes long (and even more).
87-1	13782-13785	The	
87-2	13786-13793	problem	
87-3	13794-13801	becomes	
87-4	13802-13807	worse	
87-5	13808-13810	if	
87-6	13811-13813	we	
87-7	13814-13817	use	
87-8	13818-13821	the	
87-9	13822-13825	URL	
87-10	13826-13832	itself	
87-11	13833-13835	as	
87-12	13836-13837	a	
87-13	13838-13845	primary	
87-14	13846-13849	key	
87-15	13849-13850	,	
87-16	13851-13856	which	
87-17	13857-13860	can	
87-18	13861-13863	be	
87-19	13864-13867	one	
87-20	13868-13872	byte	
87-21	13873-13875	to	
87-22	13876-13880	1024	
87-23	13881-13886	bytes	
87-24	13887-13891	long	
87-25	13892-13893	(	
87-26	13893-13896	and	
87-27	13897-13901	even	
87-28	13902-13906	more	
87-29	13906-13907	)	
87-30	13907-13908	.	

#Text=The solution is to use a hashed primary key.
88-1	13909-13912	The	
88-2	13913-13921	solution	
88-3	13922-13924	is	
88-4	13925-13927	to	
88-5	13928-13931	use	
88-6	13932-13933	a	
88-7	13934-13940	hashed	
88-8	13941-13948	primary	
88-9	13949-13952	key	
88-10	13952-13953	.	

#Text=Instead of using the actual string value, use a hash.
89-1	13954-13961	Instead	
89-2	13962-13964	of	
89-3	13965-13970	using	
89-4	13971-13974	the	
89-5	13975-13981	actual	
89-6	13982-13988	string	
89-7	13989-13994	value	
89-8	13994-13995	,	
89-9	13996-13999	use	
89-10	14000-14001	a	
89-11	14002-14006	hash	
89-12	14006-14007	.	

#Text=Remember that the hash storage size should be smaller than the average size of the string you want to use; otherwise, it doesn’t make sense, which means SHA1 or SHA256 is not a good choice.
90-1	14008-14016	Remember	
90-2	14017-14021	that	
90-3	14022-14025	the	
90-4	14026-14030	hash	
90-5	14031-14038	storage	
90-6	14039-14043	size	
90-7	14044-14050	should	
90-8	14051-14053	be	
90-9	14054-14061	smaller	
90-10	14062-14066	than	
90-11	14067-14070	the	
90-12	14071-14078	average	
90-13	14079-14083	size	
90-14	14084-14086	of	
90-15	14087-14090	the	
90-16	14091-14097	string	
90-17	14098-14101	you	
90-18	14102-14106	want	
90-19	14107-14109	to	
90-20	14110-14113	use	
90-21	14113-14114	;	
90-22	14115-14124	otherwise	
90-23	14124-14125	,	
90-24	14126-14128	it	
90-25	14129-14134	doesn	
90-26	14134-14135	’	
90-27	14135-14136	t	
90-28	14137-14141	make	
90-29	14142-14147	sense	
90-30	14147-14148	,	
90-31	14149-14154	which	
90-32	14155-14160	means	
90-33	14161-14165	SHA1	
90-34	14166-14168	or	
90-35	14169-14175	SHA256	
90-36	14176-14178	is	
90-37	14179-14182	not	
90-38	14183-14184	a	
90-39	14185-14189	good	
90-40	14190-14196	choice	
90-41	14196-14197	.	

#Text=Changing the Database’s flush method
#Text=The flag innodb_flush_method specifies how MySQL will flush the data, and the default is O_SYNC, which means all the data is also cached in the OS IO cache.
91-1	14198-14206	Changing	
91-2	14207-14210	the	
91-3	14211-14219	Database	
91-4	14219-14220	’	
91-5	14220-14221	s	
91-6	14222-14227	flush	
91-7	14228-14234	method	
91-8	14235-14238	The	
91-9	14239-14243	flag	
91-10	14244-14263	innodb_flush_method	
91-11	14264-14273	specifies	
91-12	14274-14277	how	
91-13	14278-14283	MySQL	
91-14	14284-14288	will	
91-15	14289-14294	flush	
91-16	14295-14298	the	
91-17	14299-14303	data	
91-18	14303-14304	,	
91-19	14305-14308	and	
91-20	14309-14312	the	
91-21	14313-14320	default	
91-22	14321-14323	is	
91-23	14324-14330	O_SYNC	
91-24	14330-14331	,	
91-25	14332-14337	which	
91-26	14338-14343	means	
91-27	14344-14347	all	
91-28	14348-14351	the	
91-29	14352-14356	data	
91-30	14357-14359	is	
91-31	14360-14364	also	
91-32	14365-14371	cached	
91-33	14372-14374	in	
91-34	14375-14378	the	
91-35	14379-14381	OS	
91-36	14382-14384	IO	
91-37	14385-14390	cache	
91-38	14390-14391	.	

#Text=The flag O_DIRECT tells MySQL to write the data directly without using the OS IO cache, and this might speed up the insert rate.
92-1	14392-14395	The	
92-2	14396-14400	flag	
92-3	14401-14409	O_DIRECT	
92-4	14410-14415	tells	
92-5	14416-14421	MySQL	
92-6	14422-14424	to	
92-7	14425-14430	write	
92-8	14431-14434	the	
92-9	14435-14439	data	
92-10	14440-14448	directly	
92-11	14449-14456	without	
92-12	14457-14462	using	
92-13	14463-14466	the	
92-14	14467-14469	OS	
92-15	14470-14472	IO	
92-16	14473-14478	cache	
92-17	14478-14479	,	
92-18	14480-14483	and	
92-19	14484-14488	this	
92-20	14489-14494	might	
92-21	14495-14500	speed	
92-22	14501-14503	up	
92-23	14504-14507	the	
92-24	14508-14514	insert	
92-25	14515-14519	rate	
92-26	14519-14520	.	

#Text=Using file system compression
#Text=Some filesystems support compression (like ZFS), which means that storing MySQL data on compressed partitions may speed the insert rate.
93-1	14521-14526	Using	
93-2	14527-14531	file	
93-3	14532-14538	system	
93-4	14539-14550	compression	
93-5	14551-14555	Some	
93-6	14556-14567	filesystems	
93-7	14568-14575	support	
93-8	14576-14587	compression	
93-9	14588-14589	(	
93-10	14589-14593	like	
93-11	14594-14597	ZFS	
93-12	14597-14598	)	
93-13	14598-14599	,	
93-14	14600-14605	which	
93-15	14606-14611	means	
93-16	14612-14616	that	
93-17	14617-14624	storing	
93-18	14625-14630	MySQL	
93-19	14631-14635	data	
93-20	14636-14638	on	
93-21	14639-14649	compressed	
93-22	14650-14660	partitions	
93-23	14661-14664	may	
93-24	14665-14670	speed	
93-25	14671-14674	the	
93-26	14675-14681	insert	
93-27	14682-14686	rate	
93-28	14686-14687	.	

#Text=The reason is that if the data compresses well, there will be less data to write, which can speed up the insert rate.
94-1	14688-14691	The	
94-2	14692-14698	reason	
94-3	14699-14701	is	
94-4	14702-14706	that	
94-5	14707-14709	if	
94-6	14710-14713	the	
94-7	14714-14718	data	
94-8	14719-14729	compresses	
94-9	14730-14734	well	
94-10	14734-14735	,	
94-11	14736-14741	there	
94-12	14742-14746	will	
94-13	14747-14749	be	
94-14	14750-14754	less	
94-15	14755-14759	data	
94-16	14760-14762	to	
94-17	14763-14768	write	
94-18	14768-14769	,	
94-19	14770-14775	which	
94-20	14776-14779	can	
94-21	14780-14785	speed	
94-22	14786-14788	up	
94-23	14789-14792	the	
94-24	14793-14799	insert	
94-25	14800-14804	rate	
94-26	14804-14805	.	

#Text=Do you need that index?
95-1	14806-14808	Do	
95-2	14809-14812	you	
95-3	14813-14817	need	
95-4	14818-14822	that	
95-5	14823-14828	index	
95-6	14828-14829	?	

#Text=Inserting to a table that has an index will degrade performance because MySQL has to calculate the index on every insert.
96-1	14830-14839	Inserting	
96-2	14840-14842	to	
96-3	14843-14844	a	
96-4	14845-14850	table	
96-5	14851-14855	that	
96-6	14856-14859	has	
96-7	14860-14862	an	
96-8	14863-14868	index	
96-9	14869-14873	will	
96-10	14874-14881	degrade	
96-11	14882-14893	performance	
96-12	14894-14901	because	
96-13	14902-14907	MySQL	
96-14	14908-14911	has	
96-15	14912-14914	to	
96-16	14915-14924	calculate	
96-17	14925-14928	the	
96-18	14929-14934	index	
96-19	14935-14937	on	
96-20	14938-14943	every	
96-21	14944-14950	insert	
96-22	14950-14951	.	

#Text=In case there are multiple indexes, they will impact insert performance even more.
97-1	14952-14954	In	
97-2	14955-14959	case	
97-3	14960-14965	there	
97-4	14966-14969	are	
97-5	14970-14978	multiple	
97-6	14979-14986	indexes	
97-7	14986-14987	,	
97-8	14988-14992	they	
97-9	14993-14997	will	
97-10	14998-15004	impact	
97-11	15005-15011	insert	
97-12	15012-15023	performance	
97-13	15024-15028	even	
97-14	15029-15033	more	
97-15	15033-15034	.	

#Text=Check every index if it’s needed, and try to use as few as possible.
98-1	15035-15040	Check	
98-2	15041-15046	every	
98-3	15047-15052	index	
98-4	15053-15055	if	
98-5	15056-15058	it	
98-6	15058-15059	’	
98-7	15059-15060	s	
98-8	15061-15067	needed	
98-9	15067-15068	,	
98-10	15069-15072	and	
98-11	15073-15076	try	
98-12	15077-15079	to	
98-13	15080-15083	use	
98-14	15084-15086	as	
98-15	15087-15090	few	
98-16	15091-15093	as	
98-17	15094-15102	possible	
98-18	15102-15103	.	

#Text=BTW, when I considered using custom solutions that promised consistent insert rate, they required me to have only a primary key without indexes, which was a no-go for me.
99-1	15104-15107	BTW	
99-2	15107-15108	,	
99-3	15109-15113	when	
99-4	15114-15115	I	
99-5	15116-15126	considered	
99-6	15127-15132	using	
99-7	15133-15139	custom	
99-8	15140-15149	solutions	
99-9	15150-15154	that	
99-10	15155-15163	promised	
99-11	15164-15174	consistent	
99-12	15175-15181	insert	
99-13	15182-15186	rate	
99-14	15186-15187	,	
99-15	15188-15192	they	
99-16	15193-15201	required	
99-17	15202-15204	me	
99-18	15205-15207	to	
99-19	15208-15212	have	
99-20	15213-15217	only	
99-21	15218-15219	a	
99-22	15220-15227	primary	
99-23	15228-15231	key	
99-24	15232-15239	without	
99-25	15240-15247	indexes	
99-26	15247-15248	,	
99-27	15249-15254	which	
99-28	15255-15258	was	
99-29	15259-15260	a	
99-30	15261-15266	no-go	
99-31	15267-15270	for	
99-32	15271-15273	me	
99-33	15273-15274	.	

#Text=Dropping the index
#Text=In case you have one or more indexes on the table (Primary key is not considered an index for this advice), you have a bulk insert, and you know that no one will try to read the table you insert into, it may be better to drop all the indexes and add them once the insert is complete, which may be faster.
100-1	15275-15283	Dropping	
100-2	15284-15287	the	
100-3	15288-15293	index	
100-4	15294-15296	In	
100-5	15297-15301	case	
100-6	15302-15305	you	
100-7	15306-15310	have	
100-8	15311-15314	one	
100-9	15315-15317	or	
100-10	15318-15322	more	
100-11	15323-15330	indexes	
100-12	15331-15333	on	
100-13	15334-15337	the	
100-14	15338-15343	table	
100-15	15344-15345	(	
100-16	15345-15352	Primary	
100-17	15353-15356	key	
100-18	15357-15359	is	
100-19	15360-15363	not	
100-20	15364-15374	considered	
100-21	15375-15377	an	
100-22	15378-15383	index	
100-23	15384-15387	for	
100-24	15388-15392	this	
100-25	15393-15399	advice	
100-26	15399-15400	)	
100-27	15400-15401	,	
100-28	15402-15405	you	
100-29	15406-15410	have	
100-30	15411-15412	a	
100-31	15413-15417	bulk	
100-32	15418-15424	insert	
100-33	15424-15425	,	
100-34	15426-15429	and	
100-35	15430-15433	you	
100-36	15434-15438	know	
100-37	15439-15443	that	
100-38	15444-15446	no	
100-39	15447-15450	one	
100-40	15451-15455	will	
100-41	15456-15459	try	
100-42	15460-15462	to	
100-43	15463-15467	read	
100-44	15468-15471	the	
100-45	15472-15477	table	
100-46	15478-15481	you	
100-47	15482-15488	insert	
100-48	15489-15493	into	
100-49	15493-15494	,	
100-50	15495-15497	it	
100-51	15498-15501	may	
100-52	15502-15504	be	
100-53	15505-15511	better	
100-54	15512-15514	to	
100-55	15515-15519	drop	
100-56	15520-15523	all	
100-57	15524-15527	the	
100-58	15528-15535	indexes	
100-59	15536-15539	and	
100-60	15540-15543	add	
100-61	15544-15548	them	
100-62	15549-15553	once	
100-63	15554-15557	the	
100-64	15558-15564	insert	
100-65	15565-15567	is	
100-66	15568-15576	complete	
100-67	15576-15577	,	
100-68	15578-15583	which	
100-69	15584-15587	may	
100-70	15588-15590	be	
100-71	15591-15597	faster	
100-72	15597-15598	.	

#Text=This solution is scenario dependent.
101-1	15599-15603	This	
101-2	15604-15612	solution	
101-3	15613-15615	is	
101-4	15616-15624	scenario	
101-5	15625-15634	dependent	
101-6	15634-15635	.	

#Text=If it’s possible to read from the table while inserting, this is not a viable solution.
102-1	15636-15638	If	
102-2	15639-15641	it	
102-3	15641-15642	’	
102-4	15642-15643	s	
102-5	15644-15652	possible	
102-6	15653-15655	to	
102-7	15656-15660	read	
102-8	15661-15665	from	
102-9	15666-15669	the	
102-10	15670-15675	table	
102-11	15676-15681	while	
102-12	15682-15691	inserting	
102-13	15691-15692	,	
102-14	15693-15697	this	
102-15	15698-15700	is	
102-16	15701-15704	not	
102-17	15705-15706	a	
102-18	15707-15713	viable	
102-19	15714-15722	solution	
102-20	15722-15723	.	

#Text=Using partitions to improve MySQL insert slow rate
#Text=MySQL supports table partitions, which means the table is split into X mini tables (the DBA controls X).
103-1	15724-15729	Using	
103-2	15730-15740	partitions	
103-3	15741-15743	to	
103-4	15744-15751	improve	
103-5	15752-15757	MySQL	
103-6	15758-15764	insert	
103-7	15765-15769	slow	
103-8	15770-15774	rate	
103-9	15775-15780	MySQL	
103-10	15781-15789	supports	
103-11	15790-15795	table	
103-12	15796-15806	partitions	
103-13	15806-15807	,	
103-14	15808-15813	which	
103-15	15814-15819	means	
103-16	15820-15823	the	
103-17	15824-15829	table	
103-18	15830-15832	is	
103-19	15833-15838	split	
103-20	15839-15843	into	
103-21	15844-15845	X	
103-22	15846-15850	mini	
103-23	15851-15857	tables	
103-24	15858-15859	(	
103-25	15859-15862	the	
103-26	15863-15866	DBA	
103-27	15867-15875	controls	
103-28	15876-15877	X	
103-29	15877-15878	)	
103-30	15878-15879	.	

#Text=The one big table is actually divided into many small ones.
104-1	15880-15883	The	
104-2	15884-15887	one	
104-3	15888-15891	big	
104-4	15892-15897	table	
104-5	15898-15900	is	
104-6	15901-15909	actually	
104-7	15910-15917	divided	
104-8	15918-15922	into	
104-9	15923-15927	many	
104-10	15928-15933	small	
104-11	15934-15938	ones	
104-12	15938-15939	.	

#Text=Some people claim it reduced their performance; some claimed it improved it, but as I said in the beginning, it depends on your solution, so make sure to benchmark it.
105-1	15940-15944	Some	
105-2	15945-15951	people	
105-3	15952-15957	claim	
105-4	15958-15960	it	
105-5	15961-15968	reduced	
105-6	15969-15974	their	
105-7	15975-15986	performance	
105-8	15986-15987	;	
105-9	15988-15992	some	
105-10	15993-16000	claimed	
105-11	16001-16003	it	
105-12	16004-16012	improved	
105-13	16013-16015	it	
105-14	16015-16016	,	
105-15	16017-16020	but	
105-16	16021-16023	as	
105-17	16024-16025	I	
105-18	16026-16030	said	
105-19	16031-16033	in	
105-20	16034-16037	the	
105-21	16038-16047	beginning	
105-22	16047-16048	,	
105-23	16049-16051	it	
105-24	16052-16059	depends	
105-25	16060-16062	on	
105-26	16063-16067	your	
105-27	16068-16076	solution	
105-28	16076-16077	,	
105-29	16078-16080	so	
105-30	16081-16085	make	
105-31	16086-16090	sure	
105-32	16091-16093	to	
105-33	16094-16103	benchmark	
105-34	16104-16106	it	
105-35	16106-16107	.	

#Text=Before using MySQL partitioning feature make sure your version supports it, according to MySQL documentation it’s supported by: MySQL Community Edition, MySQL Enterprise Edition and MySQL Cluster CGE.
106-1	16108-16114	Before	
106-2	16115-16120	using	
106-3	16121-16126	MySQL	
106-4	16127-16139	partitioning	
106-5	16140-16147	feature	
106-6	16148-16152	make	
106-7	16153-16157	sure	
106-8	16158-16162	your	
106-9	16163-16170	version	
106-10	16171-16179	supports	
106-11	16180-16182	it	
106-12	16182-16183	,	
106-13	16184-16193	according	
106-14	16194-16196	to	
106-15	16197-16202	MySQL	
106-16	16203-16216	documentation	
106-17	16217-16219	it	
106-18	16219-16220	’	
106-19	16220-16221	s	
106-20	16222-16231	supported	
106-21	16232-16234	by	
106-22	16234-16235	:	
106-23	16236-16241	MySQL	
106-24	16242-16251	Community	
106-25	16252-16259	Edition	
106-26	16259-16260	,	
106-27	16261-16266	MySQL	
106-28	16267-16277	Enterprise	
106-29	16278-16285	Edition	
106-30	16286-16289	and	
106-31	16290-16295	MySQL	
106-32	16296-16303	Cluster	
106-33	16304-16307	CGE	
106-34	16307-16308	.	

#Text=It’s not supported by MySQL Standard Edition.
107-1	16309-16311	It	
107-2	16311-16312	’	
107-3	16312-16313	s	
107-4	16314-16317	not	
107-5	16318-16327	supported	
107-6	16328-16330	by	
107-7	16331-16336	MySQL	
107-8	16337-16345	Standard	
107-9	16346-16353	Edition	
107-10	16353-16354	.	

#Text=Placing a table on a different drive
#Text=It’s possible to place a table on a different drive, whether you use multiple RAID 5/6 or simply standalone drives.
108-1	16355-16362	Placing	
108-2	16363-16364	a	
108-3	16365-16370	table	
108-4	16371-16373	on	
108-5	16374-16375	a	
108-6	16376-16385	different	
108-7	16386-16391	drive	
108-8	16392-16394	It	
108-9	16394-16395	’	
108-10	16395-16396	s	
108-11	16397-16405	possible	
108-12	16406-16408	to	
108-13	16409-16414	place	
108-14	16415-16416	a	
108-15	16417-16422	table	
108-16	16423-16425	on	
108-17	16426-16427	a	
108-18	16428-16437	different	
108-19	16438-16443	drive	
108-20	16443-16444	,	
108-21	16445-16452	whether	
108-22	16453-16456	you	
108-23	16457-16460	use	
108-24	16461-16469	multiple	
108-25	16470-16474	RAID	
108-26	16475-16476	5	
108-27	16476-16477	/	
108-28	16477-16478	6	
108-29	16479-16481	or	
108-30	16482-16488	simply	
108-31	16489-16499	standalone	
108-32	16500-16506	drives	
108-33	16506-16507	.	

#Text=Placing a table on a different drive means it doesn’t share the hard drive performance and bottlenecks with tables stored on the main drive.
109-1	16508-16515	Placing	
109-2	16516-16517	a	
109-3	16518-16523	table	
109-4	16524-16526	on	
109-5	16527-16528	a	
109-6	16529-16538	different	
109-7	16539-16544	drive	
109-8	16545-16550	means	
109-9	16551-16553	it	
109-10	16554-16559	doesn	
109-11	16559-16560	’	
109-12	16560-16561	t	
109-13	16562-16567	share	
109-14	16568-16571	the	
109-15	16572-16576	hard	
109-16	16577-16582	drive	
109-17	16583-16594	performance	
109-18	16595-16598	and	
109-19	16599-16610	bottlenecks	
109-20	16611-16615	with	
109-21	16616-16622	tables	
109-22	16623-16629	stored	
109-23	16630-16632	on	
109-24	16633-16636	the	
109-25	16637-16641	main	
109-26	16642-16647	drive	
109-27	16647-16648	.	

#Text=Using MySQL bulk insert
#Text=If you have a bunch of data (for example when inserting from a file), you can insert the data one records at a time:
#Text=Regular insert (single row)
#Text=Insert into table values ()
#Text=This method is inherently slow; in one database, I had the wrong memory setting and had to export data using the flag –skip-extended-insert, which creates the dump file with a single insert per line.
110-1	16649-16654	Using	
110-2	16655-16660	MySQL	
110-3	16661-16665	bulk	
110-4	16666-16672	insert	
110-5	16673-16675	If	
110-6	16676-16679	you	
110-7	16680-16684	have	
110-8	16685-16686	a	
110-9	16687-16692	bunch	
110-10	16693-16695	of	
110-11	16696-16700	data	
110-12	16701-16702	(	
110-13	16702-16705	for	
110-14	16706-16713	example	
110-15	16714-16718	when	
110-16	16719-16728	inserting	
110-17	16729-16733	from	
110-18	16734-16735	a	
110-19	16736-16740	file	
110-20	16740-16741	)	
110-21	16741-16742	,	
110-22	16743-16746	you	
110-23	16747-16750	can	
110-24	16751-16757	insert	
110-25	16758-16761	the	
110-26	16762-16766	data	
110-27	16767-16770	one	
110-28	16771-16778	records	
110-29	16779-16781	at	
110-30	16782-16783	a	
110-31	16784-16788	time	
110-32	16788-16789	:	
110-33	16790-16797	Regular	
110-34	16798-16804	insert	
110-35	16805-16806	(	
110-36	16806-16812	single	
110-37	16813-16816	row	
110-38	16816-16817	)	
110-39	16818-16824	Insert	
110-40	16825-16829	into	
110-41	16830-16835	table	
110-42	16836-16842	values	
110-43	16843-16844	(	
110-44	16844-16845	)	
110-45	16846-16850	This	
110-46	16851-16857	method	
110-47	16858-16860	is	
110-48	16861-16871	inherently	
110-49	16872-16876	slow	
110-50	16876-16877	;	
110-51	16878-16880	in	
110-52	16881-16884	one	
110-53	16885-16893	database	
110-54	16893-16894	,	
110-55	16895-16896	I	
110-56	16897-16900	had	
110-57	16901-16904	the	
110-58	16905-16910	wrong	
110-59	16911-16917	memory	
110-60	16918-16925	setting	
110-61	16926-16929	and	
110-62	16930-16933	had	
110-63	16934-16936	to	
110-64	16937-16943	export	
110-65	16944-16948	data	
110-66	16949-16954	using	
110-67	16955-16958	the	
110-68	16959-16963	flag	
110-69	16964-16965	–	
110-70	16965-16985	skip-extended-insert	
110-71	16985-16986	,	
110-72	16987-16992	which	
110-73	16993-17000	creates	
110-74	17001-17004	the	
110-75	17005-17009	dump	
110-76	17010-17014	file	
110-77	17015-17019	with	
110-78	17020-17021	a	
110-79	17022-17028	single	
110-80	17029-17035	insert	
110-81	17036-17039	per	
110-82	17040-17044	line	
110-83	17044-17045	.	

#Text=Needless to say, the import was very slow, and after 24 hours it was still inserting, so I stopped it, did a regular export, and loaded the data, which was then using bulk inserts, this time it was many times faster, and took only an hour.
111-1	17046-17054	Needless	
111-2	17055-17057	to	
111-3	17058-17061	say	
111-4	17061-17062	,	
111-5	17063-17066	the	
111-6	17067-17073	import	
111-7	17074-17077	was	
111-8	17078-17082	very	
111-9	17083-17087	slow	
111-10	17087-17088	,	
111-11	17089-17092	and	
111-12	17093-17098	after	
111-13	17099-17101	24	
111-14	17102-17107	hours	
111-15	17108-17110	it	
111-16	17111-17114	was	
111-17	17115-17120	still	
111-18	17121-17130	inserting	
111-19	17130-17131	,	
111-20	17132-17134	so	
111-21	17135-17136	I	
111-22	17137-17144	stopped	
111-23	17145-17147	it	
111-24	17147-17148	,	
111-25	17149-17152	did	
111-26	17153-17154	a	
111-27	17155-17162	regular	
111-28	17163-17169	export	
111-29	17169-17170	,	
111-30	17171-17174	and	
111-31	17175-17181	loaded	
111-32	17182-17185	the	
111-33	17186-17190	data	
111-34	17190-17191	,	
111-35	17192-17197	which	
111-36	17198-17201	was	
111-37	17202-17206	then	
111-38	17207-17212	using	
111-39	17213-17217	bulk	
111-40	17218-17225	inserts	
111-41	17225-17226	,	
111-42	17227-17231	this	
111-43	17232-17236	time	
111-44	17237-17239	it	
111-45	17240-17243	was	
111-46	17244-17248	many	
111-47	17249-17254	times	
111-48	17255-17261	faster	
111-49	17261-17262	,	
111-50	17263-17266	and	
111-51	17267-17271	took	
111-52	17272-17276	only	
111-53	17277-17279	an	
111-54	17280-17284	hour	
111-55	17284-17285	.	

#Text=MySQL insert multiple rows (Extended inserts)
#Text=The alternative is to insert multiple rows using the syntax of many inserts per query (this is also called extended inserts):
#Text=Insert into table values (),(),()
#Text=The limitation of many inserts per query is the value of –max_allowed_packet, which limits the maximum size of a single command.
112-1	17286-17291	MySQL	
112-2	17292-17298	insert	
112-3	17299-17307	multiple	
112-4	17308-17312	rows	
112-5	17313-17314	(	
112-6	17314-17322	Extended	
112-7	17323-17330	inserts	
112-8	17330-17331	)	
112-9	17332-17335	The	
112-10	17336-17347	alternative	
112-11	17348-17350	is	
112-12	17351-17353	to	
112-13	17354-17360	insert	
112-14	17361-17369	multiple	
112-15	17370-17374	rows	
112-16	17375-17380	using	
112-17	17381-17384	the	
112-18	17385-17391	syntax	
112-19	17392-17394	of	
112-20	17395-17399	many	
112-21	17400-17407	inserts	
112-22	17408-17411	per	
112-23	17412-17417	query	
112-24	17418-17419	(	
112-25	17419-17423	this	
112-26	17424-17426	is	
112-27	17427-17431	also	
112-28	17432-17438	called	
112-29	17439-17447	extended	
112-30	17448-17455	inserts	
112-31	17455-17456	)	
112-32	17456-17457	:	
112-33	17458-17464	Insert	
112-34	17465-17469	into	
112-35	17470-17475	table	
112-36	17476-17482	values	
112-37	17483-17484	(	
112-38	17484-17485	)	
112-39	17485-17486	,	
112-40	17486-17487	(	
112-41	17487-17488	)	
112-42	17488-17489	,	
112-43	17489-17490	(	
112-44	17490-17491	)	
112-45	17492-17495	The	
112-46	17496-17506	limitation	
112-47	17507-17509	of	
112-48	17510-17514	many	
112-49	17515-17522	inserts	
112-50	17523-17526	per	
112-51	17527-17532	query	
112-52	17533-17535	is	
112-53	17536-17539	the	
112-54	17540-17545	value	
112-55	17546-17548	of	
112-56	17549-17550	–	
112-57	17550-17568	max_allowed_packet	
112-58	17568-17569	,	
112-59	17570-17575	which	
112-60	17576-17582	limits	
112-61	17583-17586	the	
112-62	17587-17594	maximum	
112-63	17595-17599	size	
112-64	17600-17602	of	
112-65	17603-17604	a	
112-66	17605-17611	single	
112-67	17612-17619	command	
112-68	17619-17620	.	

#Text=You should experiment with the best number of rows per command: I limited it at 400 rows per insert, but I didn’t see any improvement beyond that point.
113-1	17621-17624	You	
113-2	17625-17631	should	
113-3	17632-17642	experiment	
113-4	17643-17647	with	
113-5	17648-17651	the	
113-6	17652-17656	best	
113-7	17657-17663	number	
113-8	17664-17666	of	
113-9	17667-17671	rows	
113-10	17672-17675	per	
113-11	17676-17683	command	
113-12	17683-17684	:	
113-13	17685-17686	I	
113-14	17687-17694	limited	
113-15	17695-17697	it	
113-16	17698-17700	at	
113-17	17701-17704	400	
113-18	17705-17709	rows	
113-19	17710-17713	per	
113-20	17714-17720	insert	
113-21	17720-17721	,	
113-22	17722-17725	but	
113-23	17726-17727	I	
113-24	17728-17732	didn	
113-25	17732-17733	’	
113-26	17733-17734	t	
113-27	17735-17738	see	
113-28	17739-17742	any	
113-29	17743-17754	improvement	
113-30	17755-17761	beyond	
113-31	17762-17766	that	
113-32	17767-17772	point	
113-33	17772-17773	.	

#Text=Using replace into or insert ignore
#Text=Trying to insert a row with an existing primary key will cause an error, which requires you to perform a select before doing the actual insert.
114-1	17774-17779	Using	
114-2	17780-17787	replace	
114-3	17788-17792	into	
114-4	17793-17795	or	
114-5	17796-17802	insert	
114-6	17803-17809	ignore	
114-7	17810-17816	Trying	
114-8	17817-17819	to	
114-9	17820-17826	insert	
114-10	17827-17828	a	
114-11	17829-17832	row	
114-12	17833-17837	with	
114-13	17838-17840	an	
114-14	17841-17849	existing	
114-15	17850-17857	primary	
114-16	17858-17861	key	
114-17	17862-17866	will	
114-18	17867-17872	cause	
114-19	17873-17875	an	
114-20	17876-17881	error	
114-21	17881-17882	,	
114-22	17883-17888	which	
114-23	17889-17897	requires	
114-24	17898-17901	you	
114-25	17902-17904	to	
114-26	17905-17912	perform	
114-27	17913-17914	a	
114-28	17915-17921	select	
114-29	17922-17928	before	
114-30	17929-17934	doing	
114-31	17935-17938	the	
114-32	17939-17945	actual	
114-33	17946-17952	insert	
114-34	17952-17953	.	

#Text=This will, however, slow down the insert further if you want to do a bulk insert.
115-1	17954-17958	This	
115-2	17959-17963	will	
115-3	17963-17964	,	
115-4	17965-17972	however	
115-5	17972-17973	,	
115-6	17974-17978	slow	
115-7	17979-17983	down	
115-8	17984-17987	the	
115-9	17988-17994	insert	
115-10	17995-18002	further	
115-11	18003-18005	if	
115-12	18006-18009	you	
115-13	18010-18014	want	
115-14	18015-18017	to	
115-15	18018-18020	do	
115-16	18021-18022	a	
115-17	18023-18027	bulk	
115-18	18028-18034	insert	
115-19	18034-18035	.	

#Text=MySQL Replace into
#Text=Replace the row into will overwrite in case the primary key already exists; this removes the need to do a select before insert, you can treat this type of insert as insert and update, or you can treat it duplicate key update.
116-1	18036-18041	MySQL	
116-2	18042-18049	Replace	
116-3	18050-18054	into	
116-4	18055-18062	Replace	
116-5	18063-18066	the	
116-6	18067-18070	row	
116-7	18071-18075	into	
116-8	18076-18080	will	
116-9	18081-18090	overwrite	
116-10	18091-18093	in	
116-11	18094-18098	case	
116-12	18099-18102	the	
116-13	18103-18110	primary	
116-14	18111-18114	key	
116-15	18115-18122	already	
116-16	18123-18129	exists	
116-17	18129-18130	;	
116-18	18131-18135	this	
116-19	18136-18143	removes	
116-20	18144-18147	the	
116-21	18148-18152	need	
116-22	18153-18155	to	
116-23	18156-18158	do	
116-24	18159-18160	a	
116-25	18161-18167	select	
116-26	18168-18174	before	
116-27	18175-18181	insert	
116-28	18181-18182	,	
116-29	18183-18186	you	
116-30	18187-18190	can	
116-31	18191-18196	treat	
116-32	18197-18201	this	
116-33	18202-18206	type	
116-34	18207-18209	of	
116-35	18210-18216	insert	
116-36	18217-18219	as	
116-37	18220-18226	insert	
116-38	18227-18230	and	
116-39	18231-18237	update	
116-40	18237-18238	,	
116-41	18239-18241	or	
116-42	18242-18245	you	
116-43	18246-18249	can	
116-44	18250-18255	treat	
116-45	18256-18258	it	
116-46	18259-18268	duplicate	
116-47	18269-18272	key	
116-48	18273-18279	update	
116-49	18279-18280	.	

#Text=MySQL Insert ignore
#Text=Insert ignore will not insert the row in case the primary key already exists; this removes the need to do a select before insert.
117-1	18281-18286	MySQL	
117-2	18287-18293	Insert	
117-3	18294-18300	ignore	
117-4	18301-18307	Insert	
117-5	18308-18314	ignore	
117-6	18315-18319	will	
117-7	18320-18323	not	
117-8	18324-18330	insert	
117-9	18331-18334	the	
117-10	18335-18338	row	
117-11	18339-18341	in	
117-12	18342-18346	case	
117-13	18347-18350	the	
117-14	18351-18358	primary	
117-15	18359-18362	key	
117-16	18363-18370	already	
117-17	18371-18377	exists	
117-18	18377-18378	;	
117-19	18379-18383	this	
117-20	18384-18391	removes	
117-21	18392-18395	the	
117-22	18396-18400	need	
117-23	18401-18403	to	
117-24	18404-18406	do	
117-25	18407-18408	a	
117-26	18409-18415	select	
117-27	18416-18422	before	
117-28	18423-18429	insert	
117-29	18429-18430	.	

#Text=Inserting from multiple threads
#Text=In case the data you insert does not rely on previous data, it’s possible to insert the data from multiple threads, and this may allow for faster inserts.
118-1	18431-18440	Inserting	
118-2	18441-18445	from	
118-3	18446-18454	multiple	
118-4	18455-18462	threads	
118-5	18463-18465	In	
118-6	18466-18470	case	
118-7	18471-18474	the	
118-8	18475-18479	data	
118-9	18480-18483	you	
118-10	18484-18490	insert	
118-11	18491-18495	does	
118-12	18496-18499	not	
118-13	18500-18504	rely	
118-14	18505-18507	on	
118-15	18508-18516	previous	
118-16	18517-18521	data	
118-17	18521-18522	,	
118-18	18523-18525	it	
118-19	18525-18526	’	
118-20	18526-18527	s	
118-21	18528-18536	possible	
118-22	18537-18539	to	
118-23	18540-18546	insert	
118-24	18547-18550	the	
118-25	18551-18555	data	
118-26	18556-18560	from	
118-27	18561-18569	multiple	
118-28	18570-18577	threads	
118-29	18577-18578	,	
118-30	18579-18582	and	
118-31	18583-18587	this	
118-32	18588-18591	may	
118-33	18592-18597	allow	
118-34	18598-18601	for	
118-35	18602-18608	faster	
118-36	18609-18616	inserts	
118-37	18616-18617	.	

#Text=Some things to watch for are deadlocks (threads concurrency).
119-1	18618-18622	Some	
119-2	18623-18629	things	
119-3	18630-18632	to	
119-4	18633-18638	watch	
119-5	18639-18642	for	
119-6	18643-18646	are	
119-7	18647-18656	deadlocks	
119-8	18657-18658	(	
119-9	18658-18665	threads	
119-10	18666-18677	concurrency	
119-11	18677-18678	)	
119-12	18678-18679	.	

#Text=In my case, one of the apps could crash because of a soft deadlock break, so I added a handler for that situation to retry and insert the data.
120-1	18680-18682	In	
120-2	18683-18685	my	
120-3	18686-18690	case	
120-4	18690-18691	,	
120-5	18692-18695	one	
120-6	18696-18698	of	
120-7	18699-18702	the	
120-8	18703-18707	apps	
120-9	18708-18713	could	
120-10	18714-18719	crash	
120-11	18720-18727	because	
120-12	18728-18730	of	
120-13	18731-18732	a	
120-14	18733-18737	soft	
120-15	18738-18746	deadlock	
120-16	18747-18752	break	
120-17	18752-18753	,	
120-18	18754-18756	so	
120-19	18757-18758	I	
120-20	18759-18764	added	
120-21	18765-18766	a	
120-22	18767-18774	handler	
120-23	18775-18778	for	
120-24	18779-18783	that	
120-25	18784-18793	situation	
120-26	18794-18796	to	
120-27	18797-18802	retry	
120-28	18803-18806	and	
120-29	18807-18813	insert	
120-30	18814-18817	the	
120-31	18818-18822	data	
120-32	18822-18823	.	

#Text=Since I used PHP to insert data into MySQL, I ran my application a number of times, as PHP support for multi-threading is not optimal.
121-1	18824-18829	Since	
121-2	18830-18831	I	
121-3	18832-18836	used	
121-4	18837-18840	PHP	
121-5	18841-18843	to	
121-6	18844-18850	insert	
121-7	18851-18855	data	
121-8	18856-18860	into	
121-9	18861-18866	MySQL	
121-10	18866-18867	,	
121-11	18868-18869	I	
121-12	18870-18873	ran	
121-13	18874-18876	my	
121-14	18877-18888	application	
121-15	18889-18890	a	
121-16	18891-18897	number	
121-17	18898-18900	of	
121-18	18901-18906	times	
121-19	18906-18907	,	
121-20	18908-18910	as	
121-21	18911-18914	PHP	
121-22	18915-18922	support	
121-23	18923-18926	for	
121-24	18927-18942	multi-threading	
121-25	18943-18945	is	
121-26	18946-18949	not	
121-27	18950-18957	optimal	
121-28	18957-18958	.	

#Text=When I needed a better performance I used a C++ application and used MySQL C++ connector.
122-1	18959-18963	When	
122-2	18964-18965	I	
122-3	18966-18972	needed	
122-4	18973-18974	a	
122-5	18975-18981	better	
122-6	18982-18993	performance	
122-7	18994-18995	I	
122-8	18996-19000	used	
122-9	19001-19002	a	
122-10	19003-19004	C	
122-11	19004-19005	+	
122-12	19005-19006	+	
122-13	19007-19018	application	
122-14	19019-19022	and	
122-15	19023-19027	used	
122-16	19028-19033	MySQL	
122-17	19034-19035	C	
122-18	19035-19036	+	
122-19	19036-19037	+	
122-20	19038-19047	connector	
122-21	19047-19048	.	

#Text=Using load from file (MySQL bulk insert)
#Text=Using load from file (load data infile method) allows you to upload data from a formatted file and perform multiple rows insert in a single file.
123-1	19049-19054	Using	
123-2	19055-19059	load	
123-3	19060-19064	from	
123-4	19065-19069	file	
123-5	19070-19071	(	
123-6	19071-19076	MySQL	
123-7	19077-19081	bulk	
123-8	19082-19088	insert	
123-9	19088-19089	)	
123-10	19090-19095	Using	
123-11	19096-19100	load	
123-12	19101-19105	from	
123-13	19106-19110	file	
123-14	19111-19112	(	
123-15	19112-19116	load	
123-16	19117-19121	data	
123-17	19122-19128	infile	
123-18	19129-19135	method	
123-19	19135-19136	)	
123-20	19137-19143	allows	
123-21	19144-19147	you	
123-22	19148-19150	to	
123-23	19151-19157	upload	
123-24	19158-19162	data	
123-25	19163-19167	from	
123-26	19168-19169	a	
123-27	19170-19179	formatted	
123-28	19180-19184	file	
123-29	19185-19188	and	
123-30	19189-19196	perform	
123-31	19197-19205	multiple	
123-32	19206-19210	rows	
123-33	19211-19217	insert	
123-34	19218-19220	in	
123-35	19221-19222	a	
123-36	19223-19229	single	
123-37	19230-19234	file	
123-38	19234-19235	.	

#Text=You simply specify which table to upload to and the data format, which is a CSV, the syntax is:
#Text=LOAD DATA
#Text=[LOW_PRIORITY | CONCURRENT] [LOCAL]
#Text=INFILE 'file_name'
#Text=[REPLACE | IGNORE]
#Text=INTO TABLE tbl_name
#Text=[PARTITION (partition_name [, partition_name] ...)]
124-1	19236-19239	You	
124-2	19240-19246	simply	
124-3	19247-19254	specify	
124-4	19255-19260	which	
124-5	19261-19266	table	
124-6	19267-19269	to	
124-7	19270-19276	upload	
124-8	19277-19279	to	
124-9	19280-19283	and	
124-10	19284-19287	the	
124-11	19288-19292	data	
124-12	19293-19299	format	
124-13	19299-19300	,	
124-14	19301-19306	which	
124-15	19307-19309	is	
124-16	19310-19311	a	
124-17	19312-19315	CSV	
124-18	19315-19316	,	
124-19	19317-19320	the	
124-20	19321-19327	syntax	
124-21	19328-19330	is	
124-22	19330-19331	:	
124-23	19332-19336	LOAD	
124-24	19337-19341	DATA	
124-25	19342-19343	[	
124-26	19343-19355	LOW_PRIORITY	
124-27	19356-19357	|	
124-28	19358-19368	CONCURRENT	
124-29	19368-19369	]	
124-30	19370-19371	[	
124-31	19371-19376	LOCAL	
124-32	19376-19377	]	
124-33	19378-19384	INFILE	
124-34	19385-19386	'	
124-35	19386-19395	file_name	
124-36	19395-19396	'	
124-37	19397-19398	[	
124-38	19398-19405	REPLACE	
124-39	19406-19407	|	
124-40	19408-19414	IGNORE	
124-41	19414-19415	]	
124-42	19416-19420	INTO	
124-43	19421-19426	TABLE	
124-44	19427-19435	tbl_name	
124-45	19436-19437	[	
124-46	19437-19446	PARTITION	
124-47	19447-19448	(	
124-48	19448-19462	partition_name	
124-49	19463-19464	[	
124-50	19464-19465	,	
124-51	19466-19480	partition_name	
124-52	19480-19481	]	
124-53	19482-19483	.	
124-54	19483-19484	.	
124-55	19484-19485	.	
124-56	19485-19486	)	
124-57	19486-19487	]	

#Text=[CHARACTER SET charset_name]
#Text=[{FIELDS | COLUMNS}
#Text=[TERMINATED BY 'string']
#Text=[[OPTIONALLY] ENCLOSED BY 'char']
#Text=[ESCAPED BY 'char']
#Text=[LINES
#Text=[STARTING BY 'string']
#Text=[TERMINATED BY 'string']
#Text=[IGNORE number {LINES | ROWS}]
#Text=[(col_name_or_user_var
#Text=[, col_name_or_user_var] ...)]
125-1	19488-19489	[	
125-2	19489-19498	CHARACTER	
125-3	19499-19502	SET	
125-4	19503-19515	charset_name	
125-5	19515-19516	]	
125-6	19517-19518	[	
125-7	19518-19519	{	
125-8	19519-19525	FIELDS	
125-9	19526-19527	|	
125-10	19528-19535	COLUMNS	
125-11	19535-19536	}	
125-12	19537-19538	[	
125-13	19538-19548	TERMINATED	
125-14	19549-19551	BY	
125-15	19552-19553	'	
125-16	19553-19559	string	
125-17	19559-19560	'	
125-18	19560-19561	]	
125-19	19562-19563	[	
125-20	19563-19564	[	
125-21	19564-19574	OPTIONALLY	
125-22	19574-19575	]	
125-23	19576-19584	ENCLOSED	
125-24	19585-19587	BY	
125-25	19588-19589	'	
125-26	19589-19593	char	
125-27	19593-19594	'	
125-28	19594-19595	]	
125-29	19596-19597	[	
125-30	19597-19604	ESCAPED	
125-31	19605-19607	BY	
125-32	19608-19609	'	
125-33	19609-19613	char	
125-34	19613-19614	'	
125-35	19614-19615	]	
125-36	19616-19617	[	
125-37	19617-19622	LINES	
125-38	19623-19624	[	
125-39	19624-19632	STARTING	
125-40	19633-19635	BY	
125-41	19636-19637	'	
125-42	19637-19643	string	
125-43	19643-19644	'	
125-44	19644-19645	]	
125-45	19646-19647	[	
125-46	19647-19657	TERMINATED	
125-47	19658-19660	BY	
125-48	19661-19662	'	
125-49	19662-19668	string	
125-50	19668-19669	'	
125-51	19669-19670	]	
125-52	19671-19672	[	
125-53	19672-19678	IGNORE	
125-54	19679-19685	number	
125-55	19686-19687	{	
125-56	19687-19692	LINES	
125-57	19693-19694	|	
125-58	19695-19699	ROWS	
125-59	19699-19700	}	
125-60	19700-19701	]	
125-61	19702-19703	[	
125-62	19703-19704	(	
125-63	19704-19724	col_name_or_user_var	
125-64	19725-19726	[	
125-65	19726-19727	,	
125-66	19728-19748	col_name_or_user_var	
125-67	19748-19749	]	
125-68	19750-19751	.	
125-69	19751-19752	.	
125-70	19752-19753	.	
125-71	19753-19754	)	
125-72	19754-19755	]	

#Text=[SET col_name={expr | DEFAULT}
#Text=[, col_name={expr | DEFAULT}] ...]
126-1	19756-19757	[	
126-2	19757-19760	SET	
126-3	19761-19769	col_name	
126-4	19769-19770	=	
126-5	19770-19771	{	
126-6	19771-19775	expr	
126-7	19776-19777	|	
126-8	19778-19785	DEFAULT	
126-9	19785-19786	}	
126-10	19787-19788	[	
126-11	19788-19789	,	
126-12	19790-19798	col_name	
126-13	19798-19799	=	
126-14	19799-19800	{	
126-15	19800-19804	expr	
126-16	19805-19806	|	
126-17	19807-19814	DEFAULT	
126-18	19814-19815	}	
126-19	19815-19816	]	
126-20	19817-19818	.	
126-21	19818-19819	.	
126-22	19819-19820	.	
126-23	19820-19821	]	

#Text=The MySQL bulk data insert performance is incredibly fast vs other insert methods, but it can’t be used in case the data needs to be processed before inserting into the SQL server database.
127-1	19822-19825	The	
127-2	19826-19831	MySQL	
127-3	19832-19836	bulk	
127-4	19837-19841	data	
127-5	19842-19848	insert	
127-6	19849-19860	performance	
127-7	19861-19863	is	
127-8	19864-19874	incredibly	
127-9	19875-19879	fast	
127-10	19880-19882	vs	
127-11	19883-19888	other	
127-12	19889-19895	insert	
127-13	19896-19903	methods	
127-14	19903-19904	,	
127-15	19905-19908	but	
127-16	19909-19911	it	
127-17	19912-19915	can	
127-18	19915-19916	’	
127-19	19916-19917	t	
127-20	19918-19920	be	
127-21	19921-19925	used	
127-22	19926-19928	in	
127-23	19929-19933	case	
127-24	19934-19937	the	
127-25	19938-19942	data	
127-26	19943-19948	needs	
127-27	19949-19951	to	
127-28	19952-19954	be	
127-29	19955-19964	processed	
127-30	19965-19971	before	
127-31	19972-19981	inserting	
127-32	19982-19986	into	
127-33	19987-19990	the	
127-34	19991-19994	SQL	
127-35	19995-20001	server	
127-36	20002-20010	database	
127-37	20010-20011	.	

#Text=Using application-level cache
#Text=The data I inserted had many lookups.
128-1	20012-20017	Using	
128-2	20018-20035	application-level	
128-3	20036-20041	cache	
128-4	20042-20045	The	
128-5	20046-20050	data	
128-6	20051-20052	I	
128-7	20053-20061	inserted	
128-8	20062-20065	had	
128-9	20066-20070	many	
128-10	20071-20078	lookups	
128-11	20078-20079	.	

#Text=For example, if I inserted web links, I had a table for hosts and table for URL prefixes, which means the hosts could recur many times.
129-1	20080-20083	For	
129-2	20084-20091	example	
129-3	20091-20092	,	
129-4	20093-20095	if	
129-5	20096-20097	I	
129-6	20098-20106	inserted	
129-7	20107-20110	web	
129-8	20111-20116	links	
129-9	20116-20117	,	
129-10	20118-20119	I	
129-11	20120-20123	had	
129-12	20124-20125	a	
129-13	20126-20131	table	
129-14	20132-20135	for	
129-15	20136-20141	hosts	
129-16	20142-20145	and	
129-17	20146-20151	table	
129-18	20152-20155	for	
129-19	20156-20159	URL	
129-20	20160-20168	prefixes	
129-21	20168-20169	,	
129-22	20170-20175	which	
129-23	20176-20181	means	
129-24	20182-20185	the	
129-25	20186-20191	hosts	
129-26	20192-20197	could	
129-27	20198-20203	recur	
129-28	20204-20208	many	
129-29	20209-20214	times	
129-30	20214-20215	.	

#Text=I created a map that held all the hosts and all other lookups that were already inserted.
130-1	20216-20217	I	
130-2	20218-20225	created	
130-3	20226-20227	a	
130-4	20228-20231	map	
130-5	20232-20236	that	
130-6	20237-20241	held	
130-7	20242-20245	all	
130-8	20246-20249	the	
130-9	20250-20255	hosts	
130-10	20256-20259	and	
130-11	20260-20263	all	
130-12	20264-20269	other	
130-13	20270-20277	lookups	
130-14	20278-20282	that	
130-15	20283-20287	were	
130-16	20288-20295	already	
130-17	20296-20304	inserted	
130-18	20304-20305	.	

#Text=During the data parsing, I didn’t insert any data that already existed in the database.
131-1	20306-20312	During	
131-2	20313-20316	the	
131-3	20317-20321	data	
131-4	20322-20329	parsing	
131-5	20329-20330	,	
131-6	20331-20332	I	
131-7	20333-20337	didn	
131-8	20337-20338	’	
131-9	20338-20339	t	
131-10	20340-20346	insert	
131-11	20347-20350	any	
131-12	20351-20355	data	
131-13	20356-20360	that	
131-14	20361-20368	already	
131-15	20369-20376	existed	
131-16	20377-20379	in	
131-17	20380-20383	the	
131-18	20384-20392	database	
131-19	20392-20393	.	

#Text=Adjusting char/varchar collation
#Text=When working with strings, check each string to determine if you need it to be Unicode or ASCII.
132-1	20394-20403	Adjusting	
132-2	20404-20408	char	
132-3	20408-20409	/	
132-4	20409-20416	varchar	
132-5	20417-20426	collation	
132-6	20427-20431	When	
132-7	20432-20439	working	
132-8	20440-20444	with	
132-9	20445-20452	strings	
132-10	20452-20453	,	
132-11	20454-20459	check	
132-12	20460-20464	each	
132-13	20465-20471	string	
132-14	20472-20474	to	
132-15	20475-20484	determine	
132-16	20485-20487	if	
132-17	20488-20491	you	
132-18	20492-20496	need	
132-19	20497-20499	it	
132-20	20500-20502	to	
132-21	20503-20505	be	
132-22	20506-20513	Unicode	
132-23	20514-20516	or	
132-24	20517-20522	ASCII	
132-25	20522-20523	.	

#Text=Ascii character is one byte, so a 255 characters string will take 255 bytes.
133-1	20524-20529	Ascii	
133-2	20530-20539	character	
133-3	20540-20542	is	
133-4	20543-20546	one	
133-5	20547-20551	byte	
133-6	20551-20552	,	
133-7	20553-20555	so	
133-8	20556-20557	a	
133-9	20558-20561	255	
133-10	20562-20572	characters	
133-11	20573-20579	string	
133-12	20580-20584	will	
133-13	20585-20589	take	
133-14	20590-20593	255	
133-15	20594-20599	bytes	
133-16	20599-20600	.	

#Text=Unicode is needed to support any language that is not English, and a Unicode char takes 2 bytes.
134-1	20601-20608	Unicode	
134-2	20609-20611	is	
134-3	20612-20618	needed	
134-4	20619-20621	to	
134-5	20622-20629	support	
134-6	20630-20633	any	
134-7	20634-20642	language	
134-8	20643-20647	that	
134-9	20648-20650	is	
134-10	20651-20654	not	
134-11	20655-20662	English	
134-12	20662-20663	,	
134-13	20664-20667	and	
134-14	20668-20669	a	
134-15	20670-20677	Unicode	
134-16	20678-20682	char	
134-17	20683-20688	takes	
134-18	20689-20690	2	
134-19	20691-20696	bytes	
134-20	20696-20697	.	

#Text=Therefore, a Unicode string is double the size of a regular string, even if it’s in English.
135-1	20698-20707	Therefore	
135-2	20707-20708	,	
135-3	20709-20710	a	
135-4	20711-20718	Unicode	
135-5	20719-20725	string	
135-6	20726-20728	is	
135-7	20729-20735	double	
135-8	20736-20739	the	
135-9	20740-20744	size	
135-10	20745-20747	of	
135-11	20748-20749	a	
135-12	20750-20757	regular	
135-13	20758-20764	string	
135-14	20764-20765	,	
135-15	20766-20770	even	
135-16	20771-20773	if	
135-17	20774-20776	it	
135-18	20776-20777	’	
135-19	20777-20778	s	
135-20	20779-20781	in	
135-21	20782-20789	English	
135-22	20789-20790	.	

#Text=Some collation uses utf8mb4, in which every character is 4 bytes, so, inserting collations that are 2 or 4 bytes per character will take longer.
136-1	20791-20795	Some	
136-2	20796-20805	collation	
136-3	20806-20810	uses	
136-4	20811-20818	utf8mb4	
136-5	20818-20819	,	
136-6	20820-20822	in	
136-7	20823-20828	which	
136-8	20829-20834	every	
136-9	20835-20844	character	
136-10	20845-20847	is	
136-11	20848-20849	4	
136-12	20850-20855	bytes	
136-13	20855-20856	,	
136-14	20857-20859	so	
136-15	20859-20860	,	
136-16	20861-20870	inserting	
136-17	20871-20881	collations	
136-18	20882-20886	that	
136-19	20887-20890	are	
136-20	20891-20892	2	
136-21	20893-20895	or	
136-22	20896-20897	4	
136-23	20898-20903	bytes	
136-24	20904-20907	per	
136-25	20908-20917	character	
136-26	20918-20922	will	
136-27	20923-20927	take	
136-28	20928-20934	longer	
136-29	20934-20935	.	

#Text=In my case, URLs and hash primary keys are ASCII only, so I changed the collation accordingly.
137-1	20936-20938	In	
137-2	20939-20941	my	
137-3	20942-20946	case	
137-4	20946-20947	,	
137-5	20948-20952	URLs	
137-6	20953-20956	and	
137-7	20957-20961	hash	
137-8	20962-20969	primary	
137-9	20970-20974	keys	
137-10	20975-20978	are	
137-11	20979-20984	ASCII	
137-12	20985-20989	only	
137-13	20989-20990	,	
137-14	20991-20993	so	
137-15	20994-20995	I	
137-16	20996-21003	changed	
137-17	21004-21007	the	
137-18	21008-21017	collation	
137-19	21018-21029	accordingly	
137-20	21029-21030	.	

#Text=Using MySQL cluster
#Text=MySQL NDB Cluster (Network Database) is the technology that powers MySQL distributed database.
138-1	21031-21036	Using	
138-2	21037-21042	MySQL	
138-3	21043-21050	cluster	
138-4	21051-21056	MySQL	
138-5	21057-21060	NDB	
138-6	21061-21068	Cluster	
138-7	21069-21070	(	
138-8	21070-21077	Network	
138-9	21078-21086	Database	
138-10	21086-21087	)	
138-11	21088-21090	is	
138-12	21091-21094	the	
138-13	21095-21105	technology	
138-14	21106-21110	that	
138-15	21111-21117	powers	
138-16	21118-21123	MySQL	
138-17	21124-21135	distributed	
138-18	21136-21144	database	
138-19	21144-21145	.	

#Text=This means the database is composed of multiple servers (each server is called a node), which allows for faster insert rate The downside, though, is that it’s harder to manage and costs more money.
139-1	21146-21150	This	
139-2	21151-21156	means	
139-3	21157-21160	the	
139-4	21161-21169	database	
139-5	21170-21172	is	
139-6	21173-21181	composed	
139-7	21182-21184	of	
139-8	21185-21193	multiple	
139-9	21194-21201	servers	
139-10	21202-21203	(	
139-11	21203-21207	each	
139-12	21208-21214	server	
139-13	21215-21217	is	
139-14	21218-21224	called	
139-15	21225-21226	a	
139-16	21227-21231	node	
139-17	21231-21232	)	
139-18	21232-21233	,	
139-19	21234-21239	which	
139-20	21240-21246	allows	
139-21	21247-21250	for	
139-22	21251-21257	faster	
139-23	21258-21264	insert	
139-24	21265-21269	rate	
139-25	21270-21273	The	
139-26	21274-21282	downside	
139-27	21282-21283	,	
139-28	21284-21290	though	
139-29	21290-21291	,	
139-30	21292-21294	is	
139-31	21295-21299	that	
139-32	21300-21302	it	
139-33	21302-21303	’	
139-34	21303-21304	s	
139-35	21305-21311	harder	
139-36	21312-21314	to	
139-37	21315-21321	manage	
139-38	21322-21325	and	
139-39	21326-21331	costs	
139-40	21332-21336	more	
139-41	21337-21342	money	
139-42	21342-21343	.	

#Text=I calculated that for my needs I’d have to pay between 10,000-30,000 dollars per month just for hosting of 10TB of data which will also support the insert speed I need.
140-1	21344-21345	I	
140-2	21346-21356	calculated	
140-3	21357-21361	that	
140-4	21362-21365	for	
140-5	21366-21368	my	
140-6	21369-21374	needs	
140-7	21375-21376	I	
140-8	21376-21377	’	
140-9	21377-21378	d	
140-10	21379-21383	have	
140-11	21384-21386	to	
140-12	21387-21390	pay	
140-13	21391-21398	between	
140-14	21399-21405	10,000	
140-15	21405-21406	-	
140-16	21406-21412	30,000	
140-17	21413-21420	dollars	
140-18	21421-21424	per	
140-19	21425-21430	month	
140-20	21431-21435	just	
140-21	21436-21439	for	
140-22	21440-21447	hosting	
140-23	21448-21450	of	
140-24	21451-21455	10TB	
140-25	21456-21458	of	
140-26	21459-21463	data	
140-27	21464-21469	which	
140-28	21470-21474	will	
140-29	21475-21479	also	
140-30	21480-21487	support	
140-31	21488-21491	the	
140-32	21492-21498	insert	
140-33	21499-21504	speed	
140-34	21505-21506	I	
140-35	21507-21511	need	
140-36	21511-21512	.	

#Text=Using a custom engine
#Text=MySQL uses InnoDB as the default engine.
141-1	21513-21518	Using	
141-2	21519-21520	a	
141-3	21521-21527	custom	
141-4	21528-21534	engine	
141-5	21535-21540	MySQL	
141-6	21541-21545	uses	
141-7	21546-21552	InnoDB	
141-8	21553-21555	as	
141-9	21556-21559	the	
141-10	21560-21567	default	
141-11	21568-21574	engine	
141-12	21574-21575	.	

#Text=There are more engines on the market, for example, TokuDB.
142-1	21576-21581	There	
142-2	21582-21585	are	
142-3	21586-21590	more	
142-4	21591-21598	engines	
142-5	21599-21601	on	
142-6	21602-21605	the	
142-7	21606-21612	market	
142-8	21612-21613	,	
142-9	21614-21617	for	
142-10	21618-21625	example	
142-11	21625-21626	,	
142-12	21627-21633	TokuDB	
142-13	21633-21634	.	

#Text=I don’t have experience with it, but it’s possible that it may allow for better insert performance.
143-1	21635-21636	I	
143-2	21637-21640	don	
143-3	21640-21641	’	
143-4	21641-21642	t	
143-5	21643-21647	have	
143-6	21648-21658	experience	
143-7	21659-21663	with	
143-8	21664-21666	it	
143-9	21666-21667	,	
143-10	21668-21671	but	
143-11	21672-21674	it	
143-12	21674-21675	’	
143-13	21675-21676	s	
143-14	21677-21685	possible	
143-15	21686-21690	that	
143-16	21691-21693	it	
143-17	21694-21697	may	
143-18	21698-21703	allow	
143-19	21704-21707	for	
143-20	21708-21714	better	
143-21	21715-21721	insert	
143-22	21722-21733	performance	
143-23	21733-21734	.	

#Text=Using a custom solution
#Text=Unfortunately, with all the optimizations I discussed, I had to create my own solution, a custom database tailored just for my needs, which can do 300,000 concurrent inserts per second without degradation.
144-1	21735-21740	Using	
144-2	21741-21742	a	
144-3	21743-21749	custom	
144-4	21750-21758	solution	
144-5	21759-21772	Unfortunately	
144-6	21772-21773	,	
144-7	21774-21778	with	
144-8	21779-21782	all	
144-9	21783-21786	the	
144-10	21787-21800	optimizations	
144-11	21801-21802	I	
144-12	21803-21812	discussed	
144-13	21812-21813	,	
144-14	21814-21815	I	
144-15	21816-21819	had	
144-16	21820-21822	to	
144-17	21823-21829	create	
144-18	21830-21832	my	
144-19	21833-21836	own	
144-20	21837-21845	solution	
144-21	21845-21846	,	
144-22	21847-21848	a	
144-23	21849-21855	custom	
144-24	21856-21864	database	
144-25	21865-21873	tailored	
144-26	21874-21878	just	
144-27	21879-21882	for	
144-28	21883-21885	my	
144-29	21886-21891	needs	
144-30	21891-21892	,	
144-31	21893-21898	which	
144-32	21899-21902	can	
144-33	21903-21905	do	
144-34	21906-21913	300,000	
144-35	21914-21924	concurrent	
144-36	21925-21932	inserts	
144-37	21933-21936	per	
144-38	21937-21943	second	
144-39	21944-21951	without	
144-40	21952-21963	degradation	
144-41	21963-21964	.	

#Text=I know there are several custom solutions besides MySQL, but I didn’t test any of them because I preferred to implement my own rather than use a 3rd party product with limited support.
145-1	21965-21966	I	
145-2	21967-21971	know	
145-3	21972-21977	there	
145-4	21978-21981	are	
145-5	21982-21989	several	
145-6	21990-21996	custom	
145-7	21997-22006	solutions	
145-8	22007-22014	besides	
145-9	22015-22020	MySQL	
145-10	22020-22021	,	
145-11	22022-22025	but	
145-12	22026-22027	I	
145-13	22028-22032	didn	
145-14	22032-22033	’	
145-15	22033-22034	t	
145-16	22035-22039	test	
145-17	22040-22043	any	
145-18	22044-22046	of	
145-19	22047-22051	them	
145-20	22052-22059	because	
145-21	22060-22061	I	
145-22	22062-22071	preferred	
145-23	22072-22074	to	
145-24	22075-22084	implement	
145-25	22085-22087	my	
145-26	22088-22091	own	
145-27	22092-22098	rather	
145-28	22099-22103	than	
145-29	22104-22107	use	
145-30	22108-22109	a	
145-31	22110-22113	3rd	
145-32	22114-22119	party	
145-33	22120-22127	product	
145-34	22128-22132	with	
145-35	22133-22140	limited	
145-36	22141-22148	support	
145-37	22148-22149	.	

#Text=Bonus section
#Text=We decided to add several extra items beyond our twenty suggested methods for further InnoDB performance optimization tips.
146-1	22150-22155	Bonus	
146-2	22156-22163	section	
146-3	22164-22166	We	
146-4	22167-22174	decided	
146-5	22175-22177	to	
146-6	22178-22181	add	
146-7	22182-22189	several	
146-8	22190-22195	extra	
146-9	22196-22201	items	
146-10	22202-22208	beyond	
146-11	22209-22212	our	
146-12	22213-22219	twenty	
146-13	22220-22229	suggested	
146-14	22230-22237	methods	
146-15	22238-22241	for	
146-16	22242-22249	further	
146-17	22250-22256	InnoDB	
146-18	22257-22268	performance	
146-19	22269-22281	optimization	
146-20	22282-22286	tips	
146-21	22286-22287	.	

#Text=Improve select speed
#Text=What goes in, must come out.
147-1	22288-22295	Improve	
147-2	22296-22302	select	
147-3	22303-22308	speed	
147-4	22309-22313	What	
147-5	22314-22318	goes	
147-6	22319-22321	in	
147-7	22321-22322	,	
147-8	22323-22327	must	
147-9	22328-22332	come	
147-10	22333-22336	out	
147-11	22336-22337	.	

#Text=Selecting data from the database means the database has to spend more time locking tables and rows and will have fewer resources for the inserts.
148-1	22338-22347	Selecting	
148-2	22348-22352	data	
148-3	22353-22357	from	
148-4	22358-22361	the	
148-5	22362-22370	database	
148-6	22371-22376	means	
148-7	22377-22380	the	
148-8	22381-22389	database	
148-9	22390-22393	has	
148-10	22394-22396	to	
148-11	22397-22402	spend	
148-12	22403-22407	more	
148-13	22408-22412	time	
148-14	22413-22420	locking	
148-15	22421-22427	tables	
148-16	22428-22431	and	
148-17	22432-22436	rows	
148-18	22437-22440	and	
148-19	22441-22445	will	
148-20	22446-22450	have	
148-21	22451-22456	fewer	
148-22	22457-22466	resources	
148-23	22467-22470	for	
148-24	22471-22474	the	
148-25	22475-22482	inserts	
148-26	22482-22483	.	

#Text=To improve select performance, you can read our other article about the subject of optimization for  improving MySQL select speed.
149-1	22484-22486	To	
149-2	22487-22494	improve	
149-3	22495-22501	select	
149-4	22502-22513	performance	
149-5	22513-22514	,	
149-6	22515-22518	you	
149-7	22519-22522	can	
149-8	22523-22527	read	
149-9	22528-22531	our	
149-10	22532-22537	other	
149-11	22538-22545	article	
149-12	22546-22551	about	
149-13	22552-22555	the	
149-14	22556-22563	subject	
149-15	22564-22566	of	
149-16	22567-22579	optimization	
149-17	22580-22583	for	
149-18	22583-22584	 	
149-19	22585-22594	improving	
149-20	22595-22600	MySQL	
149-21	22601-22607	select	
149-22	22608-22613	speed	
149-23	22613-22614	.	

#Text=Thread concurrency
#Text=When inserting data to the same table in parallel, the threads may be waiting because another thread has locked the resource it needs, you can check that by inspecting thread states, see how many threads are waiting on a lock.
150-1	22615-22621	Thread	
150-2	22622-22633	concurrency	
150-3	22634-22638	When	
150-4	22639-22648	inserting	
150-5	22649-22653	data	
150-6	22654-22656	to	
150-7	22657-22660	the	
150-8	22661-22665	same	
150-9	22666-22671	table	
150-10	22672-22674	in	
150-11	22675-22683	parallel	
150-12	22683-22684	,	
150-13	22685-22688	the	
150-14	22689-22696	threads	
150-15	22697-22700	may	
150-16	22701-22703	be	
150-17	22704-22711	waiting	
150-18	22712-22719	because	
150-19	22720-22727	another	
150-20	22728-22734	thread	
150-21	22735-22738	has	
150-22	22739-22745	locked	
150-23	22746-22749	the	
150-24	22750-22758	resource	
150-25	22759-22761	it	
150-26	22762-22767	needs	
150-27	22767-22768	,	
150-28	22769-22772	you	
150-29	22773-22776	can	
150-30	22777-22782	check	
150-31	22783-22787	that	
150-32	22788-22790	by	
150-33	22791-22801	inspecting	
150-34	22802-22808	thread	
150-35	22809-22815	states	
150-36	22815-22816	,	
150-37	22817-22820	see	
150-38	22821-22824	how	
150-39	22825-22829	many	
150-40	22830-22837	threads	
150-41	22838-22841	are	
150-42	22842-22849	waiting	
150-43	22850-22852	on	
150-44	22853-22854	a	
150-45	22855-22859	lock	
150-46	22859-22860	.	

#Text=If you get a deadlock error, you know you have a locking issue, and you need to revise your database design or insert methodology.
151-1	22861-22863	If	
151-2	22864-22867	you	
151-3	22868-22871	get	
151-4	22872-22873	a	
151-5	22874-22882	deadlock	
151-6	22883-22888	error	
151-7	22888-22889	,	
151-8	22890-22893	you	
151-9	22894-22898	know	
151-10	22899-22902	you	
151-11	22903-22907	have	
151-12	22908-22909	a	
151-13	22910-22917	locking	
151-14	22918-22923	issue	
151-15	22923-22924	,	
151-16	22925-22928	and	
151-17	22929-22932	you	
151-18	22933-22937	need	
151-19	22938-22940	to	
151-20	22941-22947	revise	
151-21	22948-22952	your	
151-22	22953-22961	database	
151-23	22962-22968	design	
151-24	22969-22971	or	
151-25	22972-22978	insert	
151-26	22979-22990	methodology	
151-27	22990-22991	.	

#Text=(not 100% related to this post, but we use MySQL Workbench to design our databases.
152-1	22992-22993	(	
152-2	22993-22996	not	
152-3	22997-23001	100%	
152-4	23002-23009	related	
152-5	23010-23012	to	
152-6	23013-23017	this	
152-7	23018-23022	post	
152-8	23022-23023	,	
152-9	23024-23027	but	
152-10	23028-23030	we	
152-11	23031-23034	use	
152-12	23035-23040	MySQL	
152-13	23041-23050	Workbench	
152-14	23051-23053	to	
152-15	23054-23060	design	
152-16	23061-23064	our	
152-17	23065-23074	databases	
152-18	23074-23075	.	

#Text=It’s free and easy to use)
#Text=Using replication
#Text=Using replication is more of a design solution.
153-1	23076-23078	It	
153-2	23078-23079	’	
153-3	23079-23080	s	
153-4	23081-23085	free	
153-5	23086-23089	and	
153-6	23090-23094	easy	
153-7	23095-23097	to	
153-8	23098-23101	use	
153-9	23101-23102	)	
153-10	23103-23108	Using	
153-11	23109-23120	replication	
153-12	23121-23126	Using	
153-13	23127-23138	replication	
153-14	23139-23141	is	
153-15	23142-23146	more	
153-16	23147-23149	of	
153-17	23150-23151	a	
153-18	23152-23158	design	
153-19	23159-23167	solution	
153-20	23167-23168	.	

#Text=Many selects on the database, which causes slow down on the inserts you can replicate the database into another server, and do the queries only on that server.
154-1	23169-23173	Many	
154-2	23174-23181	selects	
154-3	23182-23184	on	
154-4	23185-23188	the	
154-5	23189-23197	database	
154-6	23197-23198	,	
154-7	23199-23204	which	
154-8	23205-23211	causes	
154-9	23212-23216	slow	
154-10	23217-23221	down	
154-11	23222-23224	on	
154-12	23225-23228	the	
154-13	23229-23236	inserts	
154-14	23237-23240	you	
154-15	23241-23244	can	
154-16	23245-23254	replicate	
154-17	23255-23258	the	
154-18	23259-23267	database	
154-19	23268-23272	into	
154-20	23273-23280	another	
154-21	23281-23287	server	
154-22	23287-23288	,	
154-23	23289-23292	and	
154-24	23293-23295	do	
154-25	23296-23299	the	
154-26	23300-23307	queries	
154-27	23308-23312	only	
154-28	23313-23315	on	
154-29	23316-23320	that	
154-30	23321-23327	server	
154-31	23327-23328	.	

#Text=This way, you split the load between two servers, one for inserts one for selects.
155-1	23329-23333	This	
155-2	23334-23337	way	
155-3	23337-23338	,	
155-4	23339-23342	you	
155-5	23343-23348	split	
155-6	23349-23352	the	
155-7	23353-23357	load	
155-8	23358-23365	between	
155-9	23366-23369	two	
155-10	23370-23377	servers	
155-11	23377-23378	,	
155-12	23379-23382	one	
155-13	23383-23386	for	
155-14	23387-23394	inserts	
155-15	23395-23398	one	
155-16	23399-23402	for	
155-17	23403-23410	selects	
155-18	23410-23411	.	

#Text=Using prepared statements
#Text=When sending a command to MySQL, the server has to parse it and prepare a plan.
156-1	23412-23417	Using	
156-2	23418-23426	prepared	
156-3	23427-23437	statements	
156-4	23438-23442	When	
156-5	23443-23450	sending	
156-6	23451-23452	a	
156-7	23453-23460	command	
156-8	23461-23463	to	
156-9	23464-23469	MySQL	
156-10	23469-23470	,	
156-11	23471-23474	the	
156-12	23475-23481	server	
156-13	23482-23485	has	
156-14	23486-23488	to	
156-15	23489-23494	parse	
156-16	23495-23497	it	
156-17	23498-23501	and	
156-18	23502-23509	prepare	
156-19	23510-23511	a	
156-20	23512-23516	plan	
156-21	23516-23517	.	

#Text=When using prepared statements, you can cache that parse and plan to avoid calculating it again, but you need to measure your use case to see if it improves performance.
157-1	23518-23522	When	
157-2	23523-23528	using	
157-3	23529-23537	prepared	
157-4	23538-23548	statements	
157-5	23548-23549	,	
157-6	23550-23553	you	
157-7	23554-23557	can	
157-8	23558-23563	cache	
157-9	23564-23568	that	
157-10	23569-23574	parse	
157-11	23575-23578	and	
157-12	23579-23583	plan	
157-13	23584-23586	to	
157-14	23587-23592	avoid	
157-15	23593-23604	calculating	
157-16	23605-23607	it	
157-17	23608-23613	again	
157-18	23613-23614	,	
157-19	23615-23618	but	
157-20	23619-23622	you	
157-21	23623-23627	need	
157-22	23628-23630	to	
157-23	23631-23638	measure	
157-24	23639-23643	your	
157-25	23644-23647	use	
157-26	23648-23652	case	
157-27	23653-23655	to	
157-28	23656-23659	see	
157-29	23660-23662	if	
157-30	23663-23665	it	
157-31	23666-23674	improves	
157-32	23675-23686	performance	
157-33	23686-23687	.	

#Text=Disabling foreign key
#Text=A foreign key is an index that is used to enforce data integrity this is a design used when doing database normalisation.
158-1	23688-23697	Disabling	
158-2	23698-23705	foreign	
158-3	23706-23709	key	
158-4	23710-23711	A	
158-5	23712-23719	foreign	
158-6	23720-23723	key	
158-7	23724-23726	is	
158-8	23727-23729	an	
158-9	23730-23735	index	
158-10	23736-23740	that	
158-11	23741-23743	is	
158-12	23744-23748	used	
158-13	23749-23751	to	
158-14	23752-23759	enforce	
158-15	23760-23764	data	
158-16	23765-23774	integrity	
158-17	23775-23779	this	
158-18	23780-23782	is	
158-19	23783-23784	a	
158-20	23785-23791	design	
158-21	23792-23796	used	
158-22	23797-23801	when	
158-23	23802-23807	doing	
158-24	23808-23816	database	
158-25	23817-23830	normalisation	
158-26	23830-23831	.	

#Text=When inserting data into normalized tables, it will cause an error when inserting data without matching IDs on other tables.
159-1	23832-23836	When	
159-2	23837-23846	inserting	
159-3	23847-23851	data	
159-4	23852-23856	into	
159-5	23857-23867	normalized	
159-6	23868-23874	tables	
159-7	23874-23875	,	
159-8	23876-23878	it	
159-9	23879-23883	will	
159-10	23884-23889	cause	
159-11	23890-23892	an	
159-12	23893-23898	error	
159-13	23899-23903	when	
159-14	23904-23913	inserting	
159-15	23914-23918	data	
159-16	23919-23926	without	
159-17	23927-23935	matching	
159-18	23936-23939	IDs	
159-19	23940-23942	on	
159-20	23943-23948	other	
159-21	23949-23955	tables	
159-22	23955-23956	.	

#Text=Doing so also causes an index lookup for every insert.
160-1	23957-23962	Doing	
160-2	23963-23965	so	
160-3	23966-23970	also	
160-4	23971-23977	causes	
160-5	23978-23980	an	
160-6	23981-23986	index	
160-7	23987-23993	lookup	
160-8	23994-23997	for	
160-9	23998-24003	every	
160-10	24004-24010	insert	
160-11	24010-24011	.	

#Text=Consider deleting the foreign key if insert speed is critical unless you absolutely must have those checks in place.
161-1	24012-24020	Consider	
161-2	24021-24029	deleting	
161-3	24030-24033	the	
161-4	24034-24041	foreign	
161-5	24042-24045	key	
161-6	24046-24048	if	
161-7	24049-24055	insert	
161-8	24056-24061	speed	
161-9	24062-24064	is	
161-10	24065-24073	critical	
161-11	24074-24080	unless	
161-12	24081-24084	you	
161-13	24085-24095	absolutely	
161-14	24096-24100	must	
161-15	24101-24105	have	
161-16	24106-24111	those	
161-17	24112-24118	checks	
161-18	24119-24121	in	
161-19	24122-24127	place	
161-20	24127-24128	.	

#Text=Connection reuse
#Text=Do you reuse a single connection or close it and create it immediately?
162-1	24129-24139	Connection	
162-2	24140-24145	reuse	
162-3	24146-24148	Do	
162-4	24149-24152	you	
162-5	24153-24158	reuse	
162-6	24159-24160	a	
162-7	24161-24167	single	
162-8	24168-24178	connection	
162-9	24179-24181	or	
162-10	24182-24187	close	
162-11	24188-24190	it	
162-12	24191-24194	and	
162-13	24195-24201	create	
162-14	24202-24204	it	
162-15	24205-24216	immediately	
162-16	24216-24217	?	

#Text=The best way is to keep the same connection open as long as possible.
163-1	24218-24221	The	
163-2	24222-24226	best	
163-3	24227-24230	way	
163-4	24231-24233	is	
163-5	24234-24236	to	
163-6	24237-24241	keep	
163-7	24242-24245	the	
163-8	24246-24250	same	
163-9	24251-24261	connection	
163-10	24262-24266	open	
163-11	24267-24269	as	
163-12	24270-24274	long	
163-13	24275-24277	as	
163-14	24278-24286	possible	
163-15	24286-24287	.	

#Text=The reason is that opening and closing database connections takes time and resources from both the MySQL client and server and reduce insert time.
164-1	24288-24291	The	
164-2	24292-24298	reason	
164-3	24299-24301	is	
164-4	24302-24306	that	
164-5	24307-24314	opening	
164-6	24315-24318	and	
164-7	24319-24326	closing	
164-8	24327-24335	database	
164-9	24336-24347	connections	
164-10	24348-24353	takes	
164-11	24354-24358	time	
164-12	24359-24362	and	
164-13	24363-24372	resources	
164-14	24373-24377	from	
164-15	24378-24382	both	
164-16	24383-24386	the	
164-17	24387-24392	MySQL	
164-18	24393-24399	client	
164-19	24400-24403	and	
164-20	24404-24410	server	
164-21	24411-24414	and	
164-22	24415-24421	reduce	
164-23	24422-24428	insert	
164-24	24429-24433	time	
164-25	24433-24434	.	

#Text=Number of available connections
#Text=With some systems connections that can’t be reused, it’s essential to make sure that MySQL is configured to support enough connections.
165-1	24435-24441	Number	
165-2	24442-24444	of	
165-3	24445-24454	available	
165-4	24455-24466	connections	
165-5	24467-24471	With	
165-6	24472-24476	some	
165-7	24477-24484	systems	
165-8	24485-24496	connections	
165-9	24497-24501	that	
165-10	24502-24505	can	
165-11	24505-24506	’	
165-12	24506-24507	t	
165-13	24508-24510	be	
165-14	24511-24517	reused	
165-15	24517-24518	,	
165-16	24519-24521	it	
165-17	24521-24522	’	
165-18	24522-24523	s	
165-19	24524-24533	essential	
165-20	24534-24536	to	
165-21	24537-24541	make	
165-22	24542-24546	sure	
165-23	24547-24551	that	
165-24	24552-24557	MySQL	
165-25	24558-24560	is	
165-26	24561-24571	configured	
165-27	24572-24574	to	
165-28	24575-24582	support	
165-29	24583-24589	enough	
165-30	24590-24601	connections	
165-31	24601-24602	.	

#Text=Otherwise, new connections may wait for resources or fail all together.
166-1	24603-24612	Otherwise	
166-2	24612-24613	,	
166-3	24614-24617	new	
166-4	24618-24629	connections	
166-5	24630-24633	may	
166-6	24634-24638	wait	
166-7	24639-24642	for	
166-8	24643-24652	resources	
166-9	24653-24655	or	
166-10	24656-24660	fail	
166-11	24661-24664	all	
166-12	24665-24673	together	
166-13	24673-24674	.	

#Text=One thing to keep in mind that MySQL maintains a connection pool.
167-1	24675-24678	One	
167-2	24679-24684	thing	
167-3	24685-24687	to	
167-4	24688-24692	keep	
167-5	24693-24695	in	
167-6	24696-24700	mind	
167-7	24701-24705	that	
167-8	24706-24711	MySQL	
167-9	24712-24721	maintains	
167-10	24722-24723	a	
167-11	24724-24734	connection	
167-12	24735-24739	pool	
167-13	24739-24740	.	

#Text=Having too many connections can put a strain on the available memory.
168-1	24741-24747	Having	
168-2	24748-24751	too	
168-3	24752-24756	many	
168-4	24757-24768	connections	
168-5	24769-24772	can	
168-6	24773-24776	put	
168-7	24777-24778	a	
168-8	24779-24785	strain	
168-9	24786-24788	on	
168-10	24789-24792	the	
168-11	24793-24802	available	
168-12	24803-24809	memory	
168-13	24809-24810	.	

#Text=Summary
#Text=There are many possibilities to improve slow inserts and improve insert speed.
169-1	24811-24818	Summary	
169-2	24819-24824	There	
169-3	24825-24828	are	
169-4	24829-24833	many	
169-5	24834-24847	possibilities	
169-6	24848-24850	to	
169-7	24851-24858	improve	
169-8	24859-24863	slow	
169-9	24864-24871	inserts	
169-10	24872-24875	and	
169-11	24876-24883	improve	
169-12	24884-24890	insert	
169-13	24891-24896	speed	
169-14	24896-24897	.	

#Text=But because every database is different, the DBA must always test to check which option works best when doing database tuning.
170-1	24898-24901	But	
170-2	24902-24909	because	
170-3	24910-24915	every	
170-4	24916-24924	database	
170-5	24925-24927	is	
170-6	24928-24937	different	
170-7	24937-24938	,	
170-8	24939-24942	the	
170-9	24943-24946	DBA	
170-10	24947-24951	must	
170-11	24952-24958	always	
170-12	24959-24963	test	
170-13	24964-24966	to	
170-14	24967-24972	check	
170-15	24973-24978	which	
170-16	24979-24985	option	
170-17	24986-24991	works	
170-18	24992-24996	best	
170-19	24997-25001	when	
170-20	25002-25007	doing	
170-21	25008-25016	database	
170-22	25017-25023	tuning	
170-23	25023-25024	.	

#Text=Further, optimization that is good today may be incorrect down the road when the data size increases or the database schema changes.
171-1	25025-25032	Further	
171-2	25032-25033	,	
171-3	25034-25046	optimization	
171-4	25047-25051	that	
171-5	25052-25054	is	
171-6	25055-25059	good	
171-7	25060-25065	today	
171-8	25066-25069	may	
171-9	25070-25072	be	
171-10	25073-25082	incorrect	
171-11	25083-25087	down	
171-12	25088-25091	the	
171-13	25092-25096	road	
171-14	25097-25101	when	
171-15	25102-25105	the	
171-16	25106-25110	data	
171-17	25111-25115	size	
171-18	25116-25125	increases	
171-19	25126-25128	or	
171-20	25129-25132	the	
171-21	25133-25141	database	
171-22	25142-25148	schema	
171-23	25149-25156	changes	
171-24	25156-25157	.	

#Text=Good luck
#Text=vote
#Text=Article Rating
#Text=Share via:
#Text=Facebook
#Text=Twitter
#Text=LinkedIn
#Text=More
#Text=Related posts:
#Text=Why would I want to build a database?
172-1	25158-25162	Good	
172-2	25163-25167	luck	
172-3	25168-25172	vote	
172-4	25173-25180	Article	
172-5	25181-25187	Rating	
172-6	25188-25193	Share	
172-7	25194-25197	via	
172-8	25197-25198	:	
172-9	25199-25207	Facebook	
172-10	25208-25215	Twitter	
172-11	25216-25224	LinkedIn	
172-12	25225-25229	More	
172-13	25230-25237	Related	
172-14	25238-25243	posts	
172-15	25243-25244	:	
172-16	25245-25248	Why	
172-17	25249-25254	would	
172-18	25255-25256	I	
172-19	25257-25261	want	
172-20	25262-25264	to	
172-21	25265-25270	build	
172-22	25271-25272	a	
172-23	25273-25281	database	
172-24	25281-25282	?	

#Text=Fast Insert Performance Custom Database
#Text=Weird case of MySQL index that doesn’t function correctly
#Text=Compiling TensorFlow on CentOS 8
#Text=Subscribe
#Text=Login
#Text=Notify of
#Text=new follow-up comments
#Text=new replies to my comments
#Text=[+]
#Text=Name*
#Text=Email*
#Text=Website
#Text=[+]
#Text=Name*
#Text=Email*
#Text=Website
#Text=0 Comments
#Text=Inline Feedbacks
#Text=View all comments
#Text=Product
#Text=Pricing
#Text=API
#Text=URL Classification
#Text=Backlinks explorer
#Text=Keywords explorer
#Text=Legal info
#Text=Terms and conditions
#Text=Privacy policy
#Text=Refund policy
#Text=Affiliate disclaimer
#Text=General
#Text=SEO API Details
#Text=Blog
#Text=Free code
#Text=Company
#Text=About us
#Text=Contact us
#Text=Facebook page
#Text=Twitter
#Text=Linkedin
#Text=Youtube
#Text=Soundcloud
#Text=wpDiscuz00Would love your thoughts, please comment.x()x| ReplyInsert
#Text=Facebook
#Text=Twitter
#Text=LinkedIn
#Text=More Networks
#Text=Share via
#Text=Facebook
#Text=Twitter
#Text=LinkedIn
#Text=Mix
#Text=Email
#Text=Print
#Text=Copy Link
#Text=Powered by Social Snap
#Text=Copy link
#Text=CopyCopied
#Text=Powered by Social Snap
173-1	25283-25287	Fast	
173-2	25288-25294	Insert	
173-3	25295-25306	Performance	
173-4	25307-25313	Custom	
173-5	25314-25322	Database	
173-6	25323-25328	Weird	
173-7	25329-25333	case	
173-8	25334-25336	of	
173-9	25337-25342	MySQL	
173-10	25343-25348	index	
173-11	25349-25353	that	
173-12	25354-25359	doesn	
173-13	25359-25360	’	
173-14	25360-25361	t	
173-15	25362-25370	function	
173-16	25371-25380	correctly	
173-17	25381-25390	Compiling	
173-18	25391-25401	TensorFlow	
173-19	25402-25404	on	
173-20	25405-25411	CentOS	
173-21	25412-25413	8	
173-22	25414-25423	Subscribe	
173-23	25424-25429	Login	
173-24	25430-25436	Notify	
173-25	25437-25439	of	
173-26	25440-25443	new	
173-27	25444-25453	follow-up	
173-28	25454-25462	comments	
173-29	25463-25466	new	
173-30	25467-25474	replies	
173-31	25475-25477	to	
173-32	25478-25480	my	
173-33	25481-25489	comments	
173-34	25490-25491	[	
173-35	25491-25492	+	
173-36	25492-25493	]	
173-37	25494-25498	Name	
173-38	25498-25499	*	
173-39	25500-25505	Email	
173-40	25505-25506	*	
173-41	25507-25514	Website	
173-42	25515-25516	[	
173-43	25516-25517	+	
173-44	25517-25518	]	
173-45	25519-25523	Name	
173-46	25523-25524	*	
173-47	25525-25530	Email	
173-48	25530-25531	*	
173-49	25532-25539	Website	
173-50	25540-25541	0	
173-51	25542-25550	Comments	
173-52	25551-25557	Inline	
173-53	25558-25567	Feedbacks	
173-54	25568-25572	View	
173-55	25573-25576	all	
173-56	25577-25585	comments	
173-57	25586-25593	Product	
173-58	25594-25601	Pricing	
173-59	25602-25605	API	
173-60	25606-25609	URL	
173-61	25610-25624	Classification	
173-62	25625-25634	Backlinks	
173-63	25635-25643	explorer	
173-64	25644-25652	Keywords	
173-65	25653-25661	explorer	
173-66	25662-25667	Legal	
173-67	25668-25672	info	
173-68	25673-25678	Terms	
173-69	25679-25682	and	
173-70	25683-25693	conditions	
173-71	25694-25701	Privacy	
173-72	25702-25708	policy	
173-73	25709-25715	Refund	
173-74	25716-25722	policy	
173-75	25723-25732	Affiliate	
173-76	25733-25743	disclaimer	
173-77	25744-25751	General	
173-78	25752-25755	SEO	
173-79	25756-25759	API	
173-80	25760-25767	Details	
173-81	25768-25772	Blog	
173-82	25773-25777	Free	
173-83	25778-25782	code	
173-84	25783-25790	Company	
173-85	25791-25796	About	
173-86	25797-25799	us	
173-87	25800-25807	Contact	
173-88	25808-25810	us	
173-89	25811-25819	Facebook	
173-90	25820-25824	page	
173-91	25825-25832	Twitter	
173-92	25833-25841	Linkedin	
173-93	25842-25849	Youtube	
173-94	25850-25860	Soundcloud	
173-95	25861-25876	wpDiscuz00Would	
173-96	25877-25881	love	
173-97	25882-25886	your	
173-98	25887-25895	thoughts	
173-99	25895-25896	,	
173-100	25897-25903	please	
173-101	25904-25913	comment.x	
173-102	25913-25914	(	
173-103	25914-25915	)	
173-104	25915-25916	x	
173-105	25916-25917	|	
173-106	25918-25929	ReplyInsert	
173-107	25930-25938	Facebook	
173-108	25939-25946	Twitter	
173-109	25947-25955	LinkedIn	
173-110	25956-25960	More	
173-111	25961-25969	Networks	
173-112	25970-25975	Share	
173-113	25976-25979	via	
173-114	25980-25988	Facebook	
173-115	25989-25996	Twitter	
173-116	25997-26005	LinkedIn	
173-117	26006-26009	Mix	
173-118	26010-26015	Email	
173-119	26016-26021	Print	
173-120	26022-26026	Copy	
173-121	26027-26031	Link	
173-122	26032-26039	Powered	
173-123	26040-26042	by	
173-124	26043-26049	Social	
173-125	26050-26054	Snap	
173-126	26055-26059	Copy	
173-127	26060-26064	link	
173-128	26065-26075	CopyCopied	
173-129	26076-26083	Powered	
173-130	26084-26086	by	
173-131	26087-26093	Social	
173-132	26094-26098	Snap	
