#FORMAT=WebAnno TSV 3.3


#Text=Performance Tuning in Athena - Amazon Athena
#Text=Performance Tuning in Athena - Amazon Athena
#Text=AWSDocumentationAmazon AthenaUser Guide
#Text=Physical LimitsQuery Optimization
#Text=TechniquesAdditional Resources
#Text=Performance Tuning in Athena
#Text=This topic provides general information and specific suggestions for improving the
#Text=performance of Athena when you have large amounts of data and experience memory usage
#Text=performance issues.
1-1	0-11	Performance	
1-2	12-18	Tuning	
1-3	19-21	in	
1-4	22-28	Athena	
1-5	29-30	-	
1-6	31-37	Amazon	
1-7	38-44	Athena	
1-8	45-56	Performance	
1-9	57-63	Tuning	
1-10	64-66	in	
1-11	67-73	Athena	
1-12	74-75	-	
1-13	76-82	Amazon	
1-14	83-89	Athena	
1-15	90-112	AWSDocumentationAmazon	
1-16	113-123	AthenaUser	
1-17	124-129	Guide	
1-18	130-138	Physical	
1-19	139-150	LimitsQuery	
1-20	151-163	Optimization	
1-21	164-184	TechniquesAdditional	
1-22	185-194	Resources	
1-23	195-206	Performance	
1-24	207-213	Tuning	
1-25	214-216	in	
1-26	217-223	Athena	
1-27	224-228	This	
1-28	229-234	topic	
1-29	235-243	provides	
1-30	244-251	general	
1-31	252-263	information	
1-32	264-267	and	
1-33	268-276	specific	
1-34	277-288	suggestions	
1-35	289-292	for	
1-36	293-302	improving	
1-37	303-306	the	
1-38	307-318	performance	
1-39	319-321	of	
1-40	322-328	Athena	
1-41	329-333	when	
1-42	334-337	you	
1-43	338-342	have	
1-44	343-348	large	
1-45	349-356	amounts	
1-46	357-359	of	
1-47	360-364	data	
1-48	365-368	and	
1-49	369-379	experience	
1-50	380-386	memory	
1-51	387-392	usage	
1-52	393-404	performance	
1-53	405-411	issues	
1-54	411-412	.	

#Text=Physical Limits
#Text=In general, Athena limits the runtime of each query to 30 minutes.
2-1	413-421	Physical	
2-2	422-428	Limits	
2-3	429-431	In	
2-4	432-439	general	
2-5	439-440	,	
2-6	441-447	Athena	
2-7	448-454	limits	
2-8	455-458	the	
2-9	459-466	runtime	
2-10	467-469	of	
2-11	470-474	each	
2-12	475-480	query	
2-13	481-483	to	
2-14	484-486	30	
2-15	487-494	minutes	
2-16	494-495	.	

#Text=Queries that run
#Text=beyond this limit are automatically cancelled without charge.
3-1	496-503	Queries	
3-2	504-508	that	
3-3	509-512	run	
3-4	513-519	beyond	
3-5	520-524	this	
3-6	525-530	limit	
3-7	531-534	are	
3-8	535-548	automatically	
3-9	549-558	cancelled	
3-10	559-566	without	
3-11	567-573	charge	
3-12	573-574	.	

#Text=If a query runs out
#Text=memory or a node crashes during processing, errors like the following can occur:
#Text=INTERNAL_ERROR_QUERY_ENGINE
#Text=EXCEEDED_MEMORY_LIMIT: Query exceeded local memory limit
#Text=Query exhausted resources at this scale factor
#Text=Encountered too many errors talking to a worker node.
4-1	575-577	If	
4-2	578-579	a	
4-3	580-585	query	
4-4	586-590	runs	
4-5	591-594	out	
4-6	595-601	memory	
4-7	602-604	or	
4-8	605-606	a	
4-9	607-611	node	
4-10	612-619	crashes	
4-11	620-626	during	
4-12	627-637	processing	
4-13	637-638	,	
4-14	639-645	errors	
4-15	646-650	like	
4-16	651-654	the	
4-17	655-664	following	
4-18	665-668	can	
4-19	669-674	occur	
4-20	674-675	:	
4-21	676-703	INTERNAL_ERROR_QUERY_ENGINE	
4-22	704-725	EXCEEDED_MEMORY_LIMIT	
4-23	725-726	:	
4-24	727-732	Query	
4-25	733-741	exceeded	
4-26	742-747	local	
4-27	748-754	memory	
4-28	755-760	limit	
4-29	761-766	Query	
4-30	767-776	exhausted	
4-31	777-786	resources	
4-32	787-789	at	
4-33	790-794	this	
4-34	795-800	scale	
4-35	801-807	factor	
4-36	808-819	Encountered	
4-37	820-823	too	
4-38	824-828	many	
4-39	829-835	errors	
4-40	836-843	talking	
4-41	844-846	to	
4-42	847-848	a	
4-43	849-855	worker	
4-44	856-860	node	
4-45	860-861	.	

#Text=The node may have crashed or be under too much load.
5-1	862-865	The	
5-2	866-870	node	
5-3	871-874	may	
5-4	875-879	have	
5-5	880-887	crashed	
5-6	888-890	or	
5-7	891-893	be	
5-8	894-899	under	
5-9	900-903	too	
5-10	904-908	much	
5-11	909-913	load	
5-12	913-914	.	

#Text=Query Optimization
#Text=Techniques
#Text=For queries that require resources beyond existing limits, you can either optimize
#Text=the
#Text=query or restructure the data being queried.
6-1	915-920	Query	
6-2	921-933	Optimization	
6-3	934-944	Techniques	
6-4	945-948	For	
6-5	949-956	queries	
6-6	957-961	that	
6-7	962-969	require	
6-8	970-979	resources	
6-9	980-986	beyond	
6-10	987-995	existing	
6-11	996-1002	limits	
6-12	1002-1003	,	
6-13	1004-1007	you	
6-14	1008-1011	can	
6-15	1012-1018	either	
6-16	1019-1027	optimize	
6-17	1028-1031	the	
6-18	1032-1037	query	
6-19	1038-1040	or	
6-20	1041-1052	restructure	
6-21	1053-1056	the	
6-22	1057-1061	data	
6-23	1062-1067	being	
6-24	1068-1075	queried	
6-25	1075-1076	.	

#Text=To optimize your queries, consider the
#Text=suggestions in this section.
7-1	1077-1079	To	
7-2	1080-1088	optimize	
7-3	1089-1093	your	
7-4	1094-1101	queries	
7-5	1101-1102	,	
7-6	1103-1111	consider	
7-7	1112-1115	the	
7-8	1116-1127	suggestions	
7-9	1128-1130	in	
7-10	1131-1135	this	
7-11	1136-1143	section	
7-12	1143-1144	.	

#Text=Data Size
#Text=File Formats
#Text=Joins, Grouping, and
#Text=Unions
#Text=Partitioning
#Text=Window Functions
#Text=Use More Efficient
#Text=Functions
#Text=Data Size
#Text=Avoid single large files – Single files are
#Text=loaded into a single node for processing.
8-1	1145-1149	Data	
8-2	1150-1154	Size	
8-3	1155-1159	File	
8-4	1160-1167	Formats	
8-5	1168-1173	Joins	
8-6	1173-1174	,	
8-7	1175-1183	Grouping	
8-8	1183-1184	,	
8-9	1185-1188	and	
8-10	1189-1195	Unions	
8-11	1196-1208	Partitioning	
8-12	1209-1215	Window	
8-13	1216-1225	Functions	
8-14	1226-1229	Use	
8-15	1230-1234	More	
8-16	1235-1244	Efficient	
8-17	1245-1254	Functions	
8-18	1255-1259	Data	
8-19	1260-1264	Size	
8-20	1265-1270	Avoid	
8-21	1271-1277	single	
8-22	1278-1283	large	
8-23	1284-1289	files	
8-24	1290-1291	–	
8-25	1292-1298	Single	
8-26	1299-1304	files	
8-27	1305-1308	are	
8-28	1309-1315	loaded	
8-29	1316-1320	into	
8-30	1321-1322	a	
8-31	1323-1329	single	
8-32	1330-1334	node	
8-33	1335-1338	for	
8-34	1339-1349	processing	
8-35	1349-1350	.	

#Text=If your file size is extremely large, try
#Text=to break up the file into smaller files and use partitions to organize them.
9-1	1351-1353	If	
9-2	1354-1358	your	
9-3	1359-1363	file	
9-4	1364-1368	size	
9-5	1369-1371	is	
9-6	1372-1381	extremely	
9-7	1382-1387	large	
9-8	1387-1388	,	
9-9	1389-1392	try	
9-10	1393-1395	to	
9-11	1396-1401	break	
9-12	1402-1404	up	
9-13	1405-1408	the	
9-14	1409-1413	file	
9-15	1414-1418	into	
9-16	1419-1426	smaller	
9-17	1427-1432	files	
9-18	1433-1436	and	
9-19	1437-1440	use	
9-20	1441-1451	partitions	
9-21	1452-1454	to	
9-22	1455-1463	organize	
9-23	1464-1468	them	
9-24	1468-1469	.	

#Text=Read a smaller amount of data at once –
#Text=Scanning a large amount of data at one time can slow down the query and increase
#Text=cost.
10-1	1470-1474	Read	
10-2	1475-1476	a	
10-3	1477-1484	smaller	
10-4	1485-1491	amount	
10-5	1492-1494	of	
10-6	1495-1499	data	
10-7	1500-1502	at	
10-8	1503-1507	once	
10-9	1508-1509	–	
10-10	1510-1518	Scanning	
10-11	1519-1520	a	
10-12	1521-1526	large	
10-13	1527-1533	amount	
10-14	1534-1536	of	
10-15	1537-1541	data	
10-16	1542-1544	at	
10-17	1545-1548	one	
10-18	1549-1553	time	
10-19	1554-1557	can	
10-20	1558-1562	slow	
10-21	1563-1567	down	
10-22	1568-1571	the	
10-23	1572-1577	query	
10-24	1578-1581	and	
10-25	1582-1590	increase	
10-26	1591-1595	cost	
10-27	1595-1596	.	

#Text=Use partitions or filters to limit the files to be scanned.
11-1	1597-1600	Use	
11-2	1601-1611	partitions	
11-3	1612-1614	or	
11-4	1615-1622	filters	
11-5	1623-1625	to	
11-6	1626-1631	limit	
11-7	1632-1635	the	
11-8	1636-1641	files	
11-9	1642-1644	to	
11-10	1645-1647	be	
11-11	1648-1655	scanned	
11-12	1655-1656	.	

#Text=Avoid having too many columns – The message
#Text=GENERIC_INTERNAL_ERROR:
#Text=io.airlift.bytecode.CompilationException can occur when Athena fails
#Text=to compile the query to bytecode.
12-1	1657-1662	Avoid	
12-2	1663-1669	having	
12-3	1670-1673	too	
12-4	1674-1678	many	
12-5	1679-1686	columns	
12-6	1687-1688	–	
12-7	1689-1692	The	
12-8	1693-1700	message	
12-9	1701-1723	GENERIC_INTERNAL_ERROR	
12-10	1723-1724	:	
12-11	1725-1765	io.airlift.bytecode.CompilationException	
12-12	1766-1769	can	
12-13	1770-1775	occur	
12-14	1776-1780	when	
12-15	1781-1787	Athena	
12-16	1788-1793	fails	
12-17	1794-1796	to	
12-18	1797-1804	compile	
12-19	1805-1808	the	
12-20	1809-1814	query	
12-21	1815-1817	to	
12-22	1818-1826	bytecode	
12-23	1826-1827	.	

#Text=This exception is usually caused by having too
#Text=many columns in the query.
13-1	1828-1832	This	
13-2	1833-1842	exception	
13-3	1843-1845	is	
13-4	1846-1853	usually	
13-5	1854-1860	caused	
13-6	1861-1863	by	
13-7	1864-1870	having	
13-8	1871-1874	too	
13-9	1875-1879	many	
13-10	1880-1887	columns	
13-11	1888-1890	in	
13-12	1891-1894	the	
13-13	1895-1900	query	
13-14	1900-1901	.	

#Text=Reduce the number of the columns in the query or create
#Text=subqueries and use a JOIN that retrieves a smaller amount of
#Text=data.
14-1	1902-1908	Reduce	
14-2	1909-1912	the	
14-3	1913-1919	number	
14-4	1920-1922	of	
14-5	1923-1926	the	
14-6	1927-1934	columns	
14-7	1935-1937	in	
14-8	1938-1941	the	
14-9	1942-1947	query	
14-10	1948-1950	or	
14-11	1951-1957	create	
14-12	1958-1968	subqueries	
14-13	1969-1972	and	
14-14	1973-1976	use	
14-15	1977-1978	a	
14-16	1979-1983	JOIN	
14-17	1984-1988	that	
14-18	1989-1998	retrieves	
14-19	1999-2000	a	
14-20	2001-2008	smaller	
14-21	2009-2015	amount	
14-22	2016-2018	of	
14-23	2019-2023	data	
14-24	2023-2024	.	

#Text=Avoid large query outputs – Because query
#Text=results are written to Amazon S3 by a single Athena node, a large amount of output
#Text=data
#Text=can slow performance.
15-1	2025-2030	Avoid	
15-2	2031-2036	large	
15-3	2037-2042	query	
15-4	2043-2050	outputs	
15-5	2051-2052	–	
15-6	2053-2060	Because	
15-7	2061-2066	query	
15-8	2067-2074	results	
15-9	2075-2078	are	
15-10	2079-2086	written	
15-11	2087-2089	to	
15-12	2090-2096	Amazon	
15-13	2097-2099	S3	
15-14	2100-2102	by	
15-15	2103-2104	a	
15-16	2105-2111	single	
15-17	2112-2118	Athena	
15-18	2119-2123	node	
15-19	2123-2124	,	
15-20	2125-2126	a	
15-21	2127-2132	large	
15-22	2133-2139	amount	
15-23	2140-2142	of	
15-24	2143-2149	output	
15-25	2150-2154	data	
15-26	2155-2158	can	
15-27	2159-2163	slow	
15-28	2164-2175	performance	
15-29	2175-2176	.	

#Text=To work around this, try using CTAS to create a new table with the
#Text=result of the query or INSERT INTO to
#Text=append new results into an existing table.
16-1	2177-2179	To	
16-2	2180-2184	work	
16-3	2185-2191	around	
16-4	2192-2196	this	
16-5	2196-2197	,	
16-6	2198-2201	try	
16-7	2202-2207	using	
16-8	2208-2212	CTAS	
16-9	2213-2215	to	
16-10	2216-2222	create	
16-11	2223-2224	a	
16-12	2225-2228	new	
16-13	2229-2234	table	
16-14	2235-2239	with	
16-15	2240-2243	the	
16-16	2244-2250	result	
16-17	2251-2253	of	
16-18	2254-2257	the	
16-19	2258-2263	query	
16-20	2264-2266	or	
16-21	2267-2273	INSERT	
16-22	2274-2278	INTO	
16-23	2279-2281	to	
16-24	2282-2288	append	
16-25	2289-2292	new	
16-26	2293-2300	results	
16-27	2301-2305	into	
16-28	2306-2308	an	
16-29	2309-2317	existing	
16-30	2318-2323	table	
16-31	2323-2324	.	

#Text=Avoid CTAS queries with a large output –
#Text=Because output data is written by a single node, CTAS queries can also use a large
#Text=amount of memory.
17-1	2325-2330	Avoid	
17-2	2331-2335	CTAS	
17-3	2336-2343	queries	
17-4	2344-2348	with	
17-5	2349-2350	a	
17-6	2351-2356	large	
17-7	2357-2363	output	
17-8	2364-2365	–	
17-9	2366-2373	Because	
17-10	2374-2380	output	
17-11	2381-2385	data	
17-12	2386-2388	is	
17-13	2389-2396	written	
17-14	2397-2399	by	
17-15	2400-2401	a	
17-16	2402-2408	single	
17-17	2409-2413	node	
17-18	2413-2414	,	
17-19	2415-2419	CTAS	
17-20	2420-2427	queries	
17-21	2428-2431	can	
17-22	2432-2436	also	
17-23	2437-2440	use	
17-24	2441-2442	a	
17-25	2443-2448	large	
17-26	2449-2455	amount	
17-27	2456-2458	of	
17-28	2459-2465	memory	
17-29	2465-2466	.	

#Text=If you are outputting large amount of data, try separating the
#Text=task into smaller queries.
18-1	2467-2469	If	
18-2	2470-2473	you	
18-3	2474-2477	are	
18-4	2478-2488	outputting	
18-5	2489-2494	large	
18-6	2495-2501	amount	
18-7	2502-2504	of	
18-8	2505-2509	data	
18-9	2509-2510	,	
18-10	2511-2514	try	
18-11	2515-2525	separating	
18-12	2526-2529	the	
18-13	2530-2534	task	
18-14	2535-2539	into	
18-15	2540-2547	smaller	
18-16	2548-2555	queries	
18-17	2555-2556	.	

#Text=If possible, avoid having a large number of small
#Text=files – Amazon S3 has a limit of 5500
#Text=requests per second.
19-1	2557-2559	If	
19-2	2560-2568	possible	
19-3	2568-2569	,	
19-4	2570-2575	avoid	
19-5	2576-2582	having	
19-6	2583-2584	a	
19-7	2585-2590	large	
19-8	2591-2597	number	
19-9	2598-2600	of	
19-10	2601-2606	small	
19-11	2607-2612	files	
19-12	2613-2614	–	
19-13	2615-2621	Amazon	
19-14	2622-2624	S3	
19-15	2625-2628	has	
19-16	2629-2630	a	
19-17	2631-2636	limit	
19-18	2637-2639	of	
19-19	2640-2644	5500	
19-20	2645-2653	requests	
19-21	2654-2657	per	
19-22	2658-2664	second	
19-23	2664-2665	.	

#Text=Athena queries share the same limit.
20-1	2666-2672	Athena	
20-2	2673-2680	queries	
20-3	2681-2686	share	
20-4	2687-2690	the	
20-5	2691-2695	same	
20-6	2696-2701	limit	
20-7	2701-2702	.	

#Text=If you need to scan
#Text=millions of small objects in a single query, your query can be easily throttled by
#Text=Amazon S3.
21-1	2703-2705	If	
21-2	2706-2709	you	
21-3	2710-2714	need	
21-4	2715-2717	to	
21-5	2718-2722	scan	
21-6	2723-2731	millions	
21-7	2732-2734	of	
21-8	2735-2740	small	
21-9	2741-2748	objects	
21-10	2749-2751	in	
21-11	2752-2753	a	
21-12	2754-2760	single	
21-13	2761-2766	query	
21-14	2766-2767	,	
21-15	2768-2772	your	
21-16	2773-2778	query	
21-17	2779-2782	can	
21-18	2783-2785	be	
21-19	2786-2792	easily	
21-20	2793-2802	throttled	
21-21	2803-2805	by	
21-22	2806-2812	Amazon	
21-23	2813-2815	S3	
21-24	2815-2816	.	

#Text=To avoid excessive scanning, use AWS Glue ETL to periodically compact your
#Text=files
#Text=or partition the table and add partition key filters.
22-1	2817-2819	To	
22-2	2820-2825	avoid	
22-3	2826-2835	excessive	
22-4	2836-2844	scanning	
22-5	2844-2845	,	
22-6	2846-2849	use	
22-7	2850-2853	AWS	
22-8	2854-2858	Glue	
22-9	2859-2862	ETL	
22-10	2863-2865	to	
22-11	2866-2878	periodically	
22-12	2879-2886	compact	
22-13	2887-2891	your	
22-14	2892-2897	files	
22-15	2898-2900	or	
22-16	2901-2910	partition	
22-17	2911-2914	the	
22-18	2915-2920	table	
22-19	2921-2924	and	
22-20	2925-2928	add	
22-21	2929-2938	partition	
22-22	2939-2942	key	
22-23	2943-2950	filters	
22-24	2950-2951	.	

#Text=For more information, see
#Text=Reading Input Files in Larger Groups in the AWS Glue Developer Guide or
#Text=How can I
#Text=configure an AWS Glue ETL job to output larger files?
23-1	2952-2955	For	
23-2	2956-2960	more	
23-3	2961-2972	information	
23-4	2972-2973	,	
23-5	2974-2977	see	
23-6	2978-2985	Reading	
23-7	2986-2991	Input	
23-8	2992-2997	Files	
23-9	2998-3000	in	
23-10	3001-3007	Larger	
23-11	3008-3014	Groups	
23-12	3015-3017	in	
23-13	3018-3021	the	
23-14	3022-3025	AWS	
23-15	3026-3030	Glue	
23-16	3031-3040	Developer	
23-17	3041-3046	Guide	
23-18	3047-3049	or	
23-19	3050-3053	How	
23-20	3054-3057	can	
23-21	3058-3059	I	
23-22	3060-3069	configure	
23-23	3070-3072	an	
23-24	3073-3076	AWS	
23-25	3077-3081	Glue	
23-26	3082-3085	ETL	
23-27	3086-3089	job	
23-28	3090-3092	to	
23-29	3093-3099	output	
23-30	3100-3106	larger	
23-31	3107-3112	files	
23-32	3112-3113	?	

#Text=in the AWS
#Text=Knowledge Center.
24-1	3114-3116	in	
24-2	3117-3120	the	
24-3	3121-3124	AWS	
24-4	3125-3134	Knowledge	
24-5	3135-3141	Center	
24-6	3141-3142	.	

#Text=Avoid scanning an entire table – Use the
#Text=following techniques to avoid scanning entire tables:
#Text=Limit the use of "*".
25-1	3143-3148	Avoid	
25-2	3149-3157	scanning	
25-3	3158-3160	an	
25-4	3161-3167	entire	
25-5	3168-3173	table	
25-6	3174-3175	–	
25-7	3176-3179	Use	
25-8	3180-3183	the	
25-9	3184-3193	following	
25-10	3194-3204	techniques	
25-11	3205-3207	to	
25-12	3208-3213	avoid	
25-13	3214-3222	scanning	
25-14	3223-3229	entire	
25-15	3230-3236	tables	
25-16	3236-3237	:	
25-17	3238-3243	Limit	
25-18	3244-3247	the	
25-19	3248-3251	use	
25-20	3252-3254	of	
25-21	3255-3256	"	
25-22	3256-3257	*	
25-23	3257-3258	"	
25-24	3258-3259	.	

#Text=Try not to select all columns unless
#Text=necessary.
26-1	3260-3263	Try	
26-2	3264-3267	not	
26-3	3268-3270	to	
26-4	3271-3277	select	
26-5	3278-3281	all	
26-6	3282-3289	columns	
26-7	3290-3296	unless	
26-8	3297-3306	necessary	
26-9	3306-3307	.	

#Text=Avoid scanning the same table multiple times in the same query
#Text=Use filters to reduce the amount of data to be scanned.
27-1	3308-3313	Avoid	
27-2	3314-3322	scanning	
27-3	3323-3326	the	
27-4	3327-3331	same	
27-5	3332-3337	table	
27-6	3338-3346	multiple	
27-7	3347-3352	times	
27-8	3353-3355	in	
27-9	3356-3359	the	
27-10	3360-3364	same	
27-11	3365-3370	query	
27-12	3371-3374	Use	
27-13	3375-3382	filters	
27-14	3383-3385	to	
27-15	3386-3392	reduce	
27-16	3393-3396	the	
27-17	3397-3403	amount	
27-18	3404-3406	of	
27-19	3407-3411	data	
27-20	3412-3414	to	
27-21	3415-3417	be	
27-22	3418-3425	scanned	
27-23	3425-3426	.	

#Text=Whenever possible, add a LIMIT clause.
28-1	3427-3435	Whenever	
28-2	3436-3444	possible	
28-3	3444-3445	,	
28-4	3446-3449	add	
28-5	3450-3451	a	
28-6	3452-3457	LIMIT	
28-7	3458-3464	clause	
28-8	3464-3465	.	

#Text=Avoid referring to many views and tables in a single
#Text=query – Because queries with many views and/or tables must load
#Text=a large amount of data to a single node, out of memory errors can occur.
29-1	3466-3471	Avoid	
29-2	3472-3481	referring	
29-3	3482-3484	to	
29-4	3485-3489	many	
29-5	3490-3495	views	
29-6	3496-3499	and	
29-7	3500-3506	tables	
29-8	3507-3509	in	
29-9	3510-3511	a	
29-10	3512-3518	single	
29-11	3519-3524	query	
29-12	3525-3526	–	
29-13	3527-3534	Because	
29-14	3535-3542	queries	
29-15	3543-3547	with	
29-16	3548-3552	many	
29-17	3553-3558	views	
29-18	3559-3562	and	
29-19	3562-3563	/	
29-20	3563-3565	or	
29-21	3566-3572	tables	
29-22	3573-3577	must	
29-23	3578-3582	load	
29-24	3583-3584	a	
29-25	3585-3590	large	
29-26	3591-3597	amount	
29-27	3598-3600	of	
29-28	3601-3605	data	
29-29	3606-3608	to	
29-30	3609-3610	a	
29-31	3611-3617	single	
29-32	3618-3622	node	
29-33	3622-3623	,	
29-34	3624-3627	out	
29-35	3628-3630	of	
29-36	3631-3637	memory	
29-37	3638-3644	errors	
29-38	3645-3648	can	
29-39	3649-3654	occur	
29-40	3654-3655	.	

#Text=If
#Text=possible, avoid referring to an excessive number of views or tables in a single
#Text=query.
30-1	3656-3658	If	
30-2	3659-3667	possible	
30-3	3667-3668	,	
30-4	3669-3674	avoid	
30-5	3675-3684	referring	
30-6	3685-3687	to	
30-7	3688-3690	an	
30-8	3691-3700	excessive	
30-9	3701-3707	number	
30-10	3708-3710	of	
30-11	3711-3716	views	
30-12	3717-3719	or	
30-13	3720-3726	tables	
30-14	3727-3729	in	
30-15	3730-3731	a	
30-16	3732-3738	single	
30-17	3739-3744	query	
30-18	3744-3745	.	

#Text=Avoid large JSON strings – If data is stored
#Text=in a single JSON string and the size of the JSON data is large, out of memory errors
#Text=can occur when the JSON data is processed.
31-1	3746-3751	Avoid	
31-2	3752-3757	large	
31-3	3758-3762	JSON	
31-4	3763-3770	strings	
31-5	3771-3772	–	
31-6	3773-3775	If	
31-7	3776-3780	data	
31-8	3781-3783	is	
31-9	3784-3790	stored	
31-10	3791-3793	in	
31-11	3794-3795	a	
31-12	3796-3802	single	
31-13	3803-3807	JSON	
31-14	3808-3814	string	
31-15	3815-3818	and	
31-16	3819-3822	the	
31-17	3823-3827	size	
31-18	3828-3830	of	
31-19	3831-3834	the	
31-20	3835-3839	JSON	
31-21	3840-3844	data	
31-22	3845-3847	is	
31-23	3848-3853	large	
31-24	3853-3854	,	
31-25	3855-3858	out	
31-26	3859-3861	of	
31-27	3862-3868	memory	
31-28	3869-3875	errors	
31-29	3876-3879	can	
31-30	3880-3885	occur	
31-31	3886-3890	when	
31-32	3891-3894	the	
31-33	3895-3899	JSON	
31-34	3900-3904	data	
31-35	3905-3907	is	
31-36	3908-3917	processed	
31-37	3917-3918	.	

#Text=File Formats
#Text=Use an efficient file format such as Parquet or ORC
#Text=– To dramatically reduce query running time and costs, use compressed Parquet
#Text=or ORC files to store your data.
32-1	3919-3923	File	
32-2	3924-3931	Formats	
32-3	3932-3935	Use	
32-4	3936-3938	an	
32-5	3939-3948	efficient	
32-6	3949-3953	file	
32-7	3954-3960	format	
32-8	3961-3965	such	
32-9	3966-3968	as	
32-10	3969-3976	Parquet	
32-11	3977-3979	or	
32-12	3980-3983	ORC	
32-13	3984-3985	–	
32-14	3986-3988	To	
32-15	3989-4001	dramatically	
32-16	4002-4008	reduce	
32-17	4009-4014	query	
32-18	4015-4022	running	
32-19	4023-4027	time	
32-20	4028-4031	and	
32-21	4032-4037	costs	
32-22	4037-4038	,	
32-23	4039-4042	use	
32-24	4043-4053	compressed	
32-25	4054-4061	Parquet	
32-26	4062-4064	or	
32-27	4065-4068	ORC	
32-28	4069-4074	files	
32-29	4075-4077	to	
32-30	4078-4083	store	
32-31	4084-4088	your	
32-32	4089-4093	data	
32-33	4093-4094	.	

#Text=To convert your existing dataset to those formats
#Text=in Athena, you can use CTAS.
33-1	4095-4097	To	
33-2	4098-4105	convert	
33-3	4106-4110	your	
33-4	4111-4119	existing	
33-5	4120-4127	dataset	
33-6	4128-4130	to	
33-7	4131-4136	those	
33-8	4137-4144	formats	
33-9	4145-4147	in	
33-10	4148-4154	Athena	
33-11	4154-4155	,	
33-12	4156-4159	you	
33-13	4160-4163	can	
33-14	4164-4167	use	
33-15	4168-4172	CTAS	
33-16	4172-4173	.	

#Text=For more information, see Using CTAS and INSERT INTO for ETL and Data
#Text=Analysis.
34-1	4174-4177	For	
34-2	4178-4182	more	
34-3	4183-4194	information	
34-4	4194-4195	,	
34-5	4196-4199	see	
34-6	4200-4205	Using	
34-7	4206-4210	CTAS	
34-8	4211-4214	and	
34-9	4215-4221	INSERT	
34-10	4222-4226	INTO	
34-11	4227-4230	for	
34-12	4231-4234	ETL	
34-13	4235-4238	and	
34-14	4239-4243	Data	
34-15	4244-4252	Analysis	
34-16	4252-4253	.	

#Text=Switch between ORC and Parquet formats –
#Text=Experience shows that the same set of data can have significant differences in
#Text=processing time depending on whether it is stored in ORC or Parquet format.
35-1	4254-4260	Switch	
35-2	4261-4268	between	
35-3	4269-4272	ORC	
35-4	4273-4276	and	
35-5	4277-4284	Parquet	
35-6	4285-4292	formats	
35-7	4293-4294	–	
35-8	4295-4305	Experience	
35-9	4306-4311	shows	
35-10	4312-4316	that	
35-11	4317-4320	the	
35-12	4321-4325	same	
35-13	4326-4329	set	
35-14	4330-4332	of	
35-15	4333-4337	data	
35-16	4338-4341	can	
35-17	4342-4346	have	
35-18	4347-4358	significant	
35-19	4359-4370	differences	
35-20	4371-4373	in	
35-21	4374-4384	processing	
35-22	4385-4389	time	
35-23	4390-4399	depending	
35-24	4400-4402	on	
35-25	4403-4410	whether	
35-26	4411-4413	it	
35-27	4414-4416	is	
35-28	4417-4423	stored	
35-29	4424-4426	in	
35-30	4427-4430	ORC	
35-31	4431-4433	or	
35-32	4434-4441	Parquet	
35-33	4442-4448	format	
35-34	4448-4449	.	

#Text=If you
#Text=are experiencing performance issues, try a different format.
36-1	4450-4452	If	
36-2	4453-4456	you	
36-3	4457-4460	are	
36-4	4461-4473	experiencing	
36-5	4474-4485	performance	
36-6	4486-4492	issues	
36-7	4492-4493	,	
36-8	4494-4497	try	
36-9	4498-4499	a	
36-10	4500-4509	different	
36-11	4510-4516	format	
36-12	4516-4517	.	

#Text=Hudi queries – Because Hudi queries bypass
#Text=the native reader and split generator for files in parquet format, they can be slow.
37-1	4518-4522	Hudi	
37-2	4523-4530	queries	
37-3	4531-4532	–	
37-4	4533-4540	Because	
37-5	4541-4545	Hudi	
37-6	4546-4553	queries	
37-7	4554-4560	bypass	
37-8	4561-4564	the	
37-9	4565-4571	native	
37-10	4572-4578	reader	
37-11	4579-4582	and	
37-12	4583-4588	split	
37-13	4589-4598	generator	
37-14	4599-4602	for	
37-15	4603-4608	files	
37-16	4609-4611	in	
37-17	4612-4619	parquet	
37-18	4620-4626	format	
37-19	4626-4627	,	
37-20	4628-4632	they	
37-21	4633-4636	can	
37-22	4637-4639	be	
37-23	4640-4644	slow	
37-24	4644-4645	.	

#Text=Keep this in mind when querying Hudi datasets.
38-1	4646-4650	Keep	
38-2	4651-4655	this	
38-3	4656-4658	in	
38-4	4659-4663	mind	
38-5	4664-4668	when	
38-6	4669-4677	querying	
38-7	4678-4682	Hudi	
38-8	4683-4691	datasets	
38-9	4691-4692	.	

#Text=Joins, Grouping, and
#Text=Unions
#Text=Reduce the usage of memory intensive operations
#Text=– Operations like JOIN, GROUP BY, ORDER
#Text=BY, and UNION all require loading large amount of data into
#Text=memory.
39-1	4693-4698	Joins	
39-2	4698-4699	,	
39-3	4700-4708	Grouping	
39-4	4708-4709	,	
39-5	4710-4713	and	
39-6	4714-4720	Unions	
39-7	4721-4727	Reduce	
39-8	4728-4731	the	
39-9	4732-4737	usage	
39-10	4738-4740	of	
39-11	4741-4747	memory	
39-12	4748-4757	intensive	
39-13	4758-4768	operations	
39-14	4769-4770	–	
39-15	4771-4781	Operations	
39-16	4782-4786	like	
39-17	4787-4791	JOIN	
39-18	4791-4792	,	
39-19	4793-4798	GROUP	
39-20	4799-4801	BY	
39-21	4801-4802	,	
39-22	4803-4808	ORDER	
39-23	4809-4811	BY	
39-24	4811-4812	,	
39-25	4813-4816	and	
39-26	4817-4822	UNION	
39-27	4823-4826	all	
39-28	4827-4834	require	
39-29	4835-4842	loading	
39-30	4843-4848	large	
39-31	4849-4855	amount	
39-32	4856-4858	of	
39-33	4859-4863	data	
39-34	4864-4868	into	
39-35	4869-4875	memory	
39-36	4875-4876	.	

#Text=To speed up your query, find other ways to achieve the same results, or add
#Text=a clause like LIMIT to the outer query whenever possible.
40-1	4877-4879	To	
40-2	4880-4885	speed	
40-3	4886-4888	up	
40-4	4889-4893	your	
40-5	4894-4899	query	
40-6	4899-4900	,	
40-7	4901-4905	find	
40-8	4906-4911	other	
40-9	4912-4916	ways	
40-10	4917-4919	to	
40-11	4920-4927	achieve	
40-12	4928-4931	the	
40-13	4932-4936	same	
40-14	4937-4944	results	
40-15	4944-4945	,	
40-16	4946-4948	or	
40-17	4949-4952	add	
40-18	4953-4954	a	
40-19	4955-4961	clause	
40-20	4962-4966	like	
40-21	4967-4972	LIMIT	
40-22	4973-4975	to	
40-23	4976-4979	the	
40-24	4980-4985	outer	
40-25	4986-4991	query	
40-26	4992-5000	whenever	
40-27	5001-5009	possible	
40-28	5009-5010	.	

#Text=Consider using UNION ALL – To eliminate
#Text=duplicates, UNION builds a hash table, which consumes memory.
41-1	5011-5019	Consider	
41-2	5020-5025	using	
41-3	5026-5031	UNION	
41-4	5032-5035	ALL	
41-5	5036-5037	–	
41-6	5038-5040	To	
41-7	5041-5050	eliminate	
41-8	5051-5061	duplicates	
41-9	5061-5062	,	
41-10	5063-5068	UNION	
41-11	5069-5075	builds	
41-12	5076-5077	a	
41-13	5078-5082	hash	
41-14	5083-5088	table	
41-15	5088-5089	,	
41-16	5090-5095	which	
41-17	5096-5104	consumes	
41-18	5105-5111	memory	
41-19	5111-5112	.	

#Text=If your
#Text=query does not require the elimination of duplicates, consider using UNION
#Text=ALL for better performance.
42-1	5113-5115	If	
42-2	5116-5120	your	
42-3	5121-5126	query	
42-4	5127-5131	does	
42-5	5132-5135	not	
42-6	5136-5143	require	
42-7	5144-5147	the	
42-8	5148-5159	elimination	
42-9	5160-5162	of	
42-10	5163-5173	duplicates	
42-11	5173-5174	,	
42-12	5175-5183	consider	
42-13	5184-5189	using	
42-14	5190-5195	UNION	
42-15	5196-5199	ALL	
42-16	5200-5203	for	
42-17	5204-5210	better	
42-18	5211-5222	performance	
42-19	5222-5223	.	

#Text=Use CTAS as an intermediary step to speed up JOIN
#Text=operations – Instead of loading and processing intermediary data
#Text=with every query, use CTAS to persist the intermediary data into Amazon S3.
43-1	5224-5227	Use	
43-2	5228-5232	CTAS	
43-3	5233-5235	as	
43-4	5236-5238	an	
43-5	5239-5251	intermediary	
43-6	5252-5256	step	
43-7	5257-5259	to	
43-8	5260-5265	speed	
43-9	5266-5268	up	
43-10	5269-5273	JOIN	
43-11	5274-5284	operations	
43-12	5285-5286	–	
43-13	5287-5294	Instead	
43-14	5295-5297	of	
43-15	5298-5305	loading	
43-16	5306-5309	and	
43-17	5310-5320	processing	
43-18	5321-5333	intermediary	
43-19	5334-5338	data	
43-20	5339-5343	with	
43-21	5344-5349	every	
43-22	5350-5355	query	
43-23	5355-5356	,	
43-24	5357-5360	use	
43-25	5361-5365	CTAS	
43-26	5366-5368	to	
43-27	5369-5376	persist	
43-28	5377-5380	the	
43-29	5381-5393	intermediary	
43-30	5394-5398	data	
43-31	5399-5403	into	
43-32	5404-5410	Amazon	
43-33	5411-5413	S3	
43-34	5413-5414	.	

#Text=This can
#Text=help
#Text=speed up the performance of operations like JOIN.
44-1	5415-5419	This	
44-2	5420-5423	can	
44-3	5424-5428	help	
44-4	5429-5434	speed	
44-5	5435-5437	up	
44-6	5438-5441	the	
44-7	5442-5453	performance	
44-8	5454-5456	of	
44-9	5457-5467	operations	
44-10	5468-5472	like	
44-11	5473-5477	JOIN	
44-12	5477-5478	.	

#Text=Partitioning
#Text=Limit the number of partitions in a table –
#Text=When a table has more than 100,000 partitions, queries can be slow because of the
#Text=large number of requests sent to AWS Glue to retrieve partition information.
45-1	5479-5491	Partitioning	
45-2	5492-5497	Limit	
45-3	5498-5501	the	
45-4	5502-5508	number	
45-5	5509-5511	of	
45-6	5512-5522	partitions	
45-7	5523-5525	in	
45-8	5526-5527	a	
45-9	5528-5533	table	
45-10	5534-5535	–	
45-11	5536-5540	When	
45-12	5541-5542	a	
45-13	5543-5548	table	
45-14	5549-5552	has	
45-15	5553-5557	more	
45-16	5558-5562	than	
45-17	5563-5570	100,000	
45-18	5571-5581	partitions	
45-19	5581-5582	,	
45-20	5583-5590	queries	
45-21	5591-5594	can	
45-22	5595-5597	be	
45-23	5598-5602	slow	
45-24	5603-5610	because	
45-25	5611-5613	of	
45-26	5614-5617	the	
45-27	5618-5623	large	
45-28	5624-5630	number	
45-29	5631-5633	of	
45-30	5634-5642	requests	
45-31	5643-5647	sent	
45-32	5648-5650	to	
45-33	5651-5654	AWS	
45-34	5655-5659	Glue	
45-35	5660-5662	to	
45-36	5663-5671	retrieve	
45-37	5672-5681	partition	
45-38	5682-5693	information	
45-39	5693-5694	.	

#Text=To resolve
#Text=this issue, try one of the following options:
#Text=Use ALTER TABLE DROP PARTITION to remove stale
#Text=partitions.
46-1	5695-5697	To	
46-2	5698-5705	resolve	
46-3	5706-5710	this	
46-4	5711-5716	issue	
46-5	5716-5717	,	
46-6	5718-5721	try	
46-7	5722-5725	one	
46-8	5726-5728	of	
46-9	5729-5732	the	
46-10	5733-5742	following	
46-11	5743-5750	options	
46-12	5750-5751	:	
46-13	5752-5755	Use	
46-14	5756-5761	ALTER	
46-15	5762-5767	TABLE	
46-16	5768-5772	DROP	
46-17	5773-5782	PARTITION	
46-18	5783-5785	to	
46-19	5786-5792	remove	
46-20	5793-5798	stale	
46-21	5799-5809	partitions	
46-22	5809-5810	.	

#Text=If your partition pattern is predictable, use partition projection.
47-1	5811-5813	If	
47-2	5814-5818	your	
47-3	5819-5828	partition	
47-4	5829-5836	pattern	
47-5	5837-5839	is	
47-6	5840-5851	predictable	
47-7	5851-5852	,	
47-8	5853-5856	use	
47-9	5857-5866	partition	
47-10	5867-5877	projection	
47-11	5877-5878	.	

#Text=Remove old partitions even if they are empty
#Text=– Even if a partition is empty, the metadata of the partition is still stored
#Text=in AWS Glue.
48-1	5879-5885	Remove	
48-2	5886-5889	old	
48-3	5890-5900	partitions	
48-4	5901-5905	even	
48-5	5906-5908	if	
48-6	5909-5913	they	
48-7	5914-5917	are	
48-8	5918-5923	empty	
48-9	5924-5925	–	
48-10	5926-5930	Even	
48-11	5931-5933	if	
48-12	5934-5935	a	
48-13	5936-5945	partition	
48-14	5946-5948	is	
48-15	5949-5954	empty	
48-16	5954-5955	,	
48-17	5956-5959	the	
48-18	5960-5968	metadata	
48-19	5969-5971	of	
48-20	5972-5975	the	
48-21	5976-5985	partition	
48-22	5986-5988	is	
48-23	5989-5994	still	
48-24	5995-6001	stored	
48-25	6002-6004	in	
48-26	6005-6008	AWS	
48-27	6009-6013	Glue	
48-28	6013-6014	.	

#Text=Loading these unneeded partitions can increase query runtimes.
49-1	6015-6022	Loading	
49-2	6023-6028	these	
49-3	6029-6037	unneeded	
49-4	6038-6048	partitions	
49-5	6049-6052	can	
49-6	6053-6061	increase	
49-7	6062-6067	query	
49-8	6068-6076	runtimes	
49-9	6076-6077	.	

#Text=To remove
#Text=the unneeded partitions, use ALTER TABLE DROP PARTITION.
50-1	6078-6080	To	
50-2	6081-6087	remove	
50-3	6088-6091	the	
50-4	6092-6100	unneeded	
50-5	6101-6111	partitions	
50-6	6111-6112	,	
50-7	6113-6116	use	
50-8	6117-6122	ALTER	
50-9	6123-6128	TABLE	
50-10	6129-6133	DROP	
50-11	6134-6143	PARTITION	
50-12	6143-6144	.	

#Text=Look up a single partition – When looking up
#Text=a single partition, try to provide all partition values so that Athena can locate
#Text=the
#Text=partition with a single call to AWS Glue.
51-1	6145-6149	Look	
51-2	6150-6152	up	
51-3	6153-6154	a	
51-4	6155-6161	single	
51-5	6162-6171	partition	
51-6	6172-6173	–	
51-7	6174-6178	When	
51-8	6179-6186	looking	
51-9	6187-6189	up	
51-10	6190-6191	a	
51-11	6192-6198	single	
51-12	6199-6208	partition	
51-13	6208-6209	,	
51-14	6210-6213	try	
51-15	6214-6216	to	
51-16	6217-6224	provide	
51-17	6225-6228	all	
51-18	6229-6238	partition	
51-19	6239-6245	values	
51-20	6246-6248	so	
51-21	6249-6253	that	
51-22	6254-6260	Athena	
51-23	6261-6264	can	
51-24	6265-6271	locate	
51-25	6272-6275	the	
51-26	6276-6285	partition	
51-27	6286-6290	with	
51-28	6291-6292	a	
51-29	6293-6299	single	
51-30	6300-6304	call	
51-31	6305-6307	to	
51-32	6308-6311	AWS	
51-33	6312-6316	Glue	
51-34	6316-6317	.	

#Text=Otherwise, Athena must retrieve all partitions
#Text=and filter them.
52-1	6318-6327	Otherwise	
52-2	6327-6328	,	
52-3	6329-6335	Athena	
52-4	6336-6340	must	
52-5	6341-6349	retrieve	
52-6	6350-6353	all	
52-7	6354-6364	partitions	
52-8	6365-6368	and	
52-9	6369-6375	filter	
52-10	6376-6380	them	
52-11	6380-6381	.	

#Text=This can be costly and greatly increase the planning time for your
#Text=query.
53-1	6382-6386	This	
53-2	6387-6390	can	
53-3	6391-6393	be	
53-4	6394-6400	costly	
53-5	6401-6404	and	
53-6	6405-6412	greatly	
53-7	6413-6421	increase	
53-8	6422-6425	the	
53-9	6426-6434	planning	
53-10	6435-6439	time	
53-11	6440-6443	for	
53-12	6444-6448	your	
53-13	6449-6454	query	
53-14	6454-6455	.	

#Text=If you have a predictable partition pattern, you can use partition
#Text=projection to avoid the partition look up calls to AWS Glue.
54-1	6456-6458	If	
54-2	6459-6462	you	
54-3	6463-6467	have	
54-4	6468-6469	a	
54-5	6470-6481	predictable	
54-6	6482-6491	partition	
54-7	6492-6499	pattern	
54-8	6499-6500	,	
54-9	6501-6504	you	
54-10	6505-6508	can	
54-11	6509-6512	use	
54-12	6513-6522	partition	
54-13	6523-6533	projection	
54-14	6534-6536	to	
54-15	6537-6542	avoid	
54-16	6543-6546	the	
54-17	6547-6556	partition	
54-18	6557-6561	look	
54-19	6562-6564	up	
54-20	6565-6570	calls	
54-21	6571-6573	to	
54-22	6574-6577	AWS	
54-23	6578-6582	Glue	
54-24	6582-6583	.	

#Text=Set reasonable partition projection properties
#Text=– When using partition projection, Athena tries to
#Text=create a partition object for every partition name.
55-1	6584-6587	Set	
55-2	6588-6598	reasonable	
55-3	6599-6608	partition	
55-4	6609-6619	projection	
55-5	6620-6630	properties	
55-6	6631-6632	–	
55-7	6633-6637	When	
55-8	6638-6643	using	
55-9	6644-6653	partition	
55-10	6654-6664	projection	
55-11	6664-6665	,	
55-12	6666-6672	Athena	
55-13	6673-6678	tries	
55-14	6679-6681	to	
55-15	6682-6688	create	
55-16	6689-6690	a	
55-17	6691-6700	partition	
55-18	6701-6707	object	
55-19	6708-6711	for	
55-20	6712-6717	every	
55-21	6718-6727	partition	
55-22	6728-6732	name	
55-23	6732-6733	.	

#Text=Because of this, make sure that
#Text=the table properties that you define do not create a near infinite amount of
#Text=possible partitions.
56-1	6734-6741	Because	
56-2	6742-6744	of	
56-3	6745-6749	this	
56-4	6749-6750	,	
56-5	6751-6755	make	
56-6	6756-6760	sure	
56-7	6761-6765	that	
56-8	6766-6769	the	
56-9	6770-6775	table	
56-10	6776-6786	properties	
56-11	6787-6791	that	
56-12	6792-6795	you	
56-13	6796-6802	define	
56-14	6803-6805	do	
56-15	6806-6809	not	
56-16	6810-6816	create	
56-17	6817-6818	a	
56-18	6819-6823	near	
56-19	6824-6832	infinite	
56-20	6833-6839	amount	
56-21	6840-6842	of	
56-22	6843-6851	possible	
56-23	6852-6862	partitions	
56-24	6862-6863	.	

#Text=To add new partitions frequently, use ALTER TABLE ADD
#Text=PARTITION – If you use MSCK REPAIR TABLE
#Text=to add new partitions frequently (for example, on a daily basis) and are
#Text=experiencing query timeouts, consider using ALTER TABLE ADD PARTITION.
57-1	6864-6866	To	
57-2	6867-6870	add	
57-3	6871-6874	new	
57-4	6875-6885	partitions	
57-5	6886-6896	frequently	
57-6	6896-6897	,	
57-7	6898-6901	use	
57-8	6902-6907	ALTER	
57-9	6908-6913	TABLE	
57-10	6914-6917	ADD	
57-11	6918-6927	PARTITION	
57-12	6928-6929	–	
57-13	6930-6932	If	
57-14	6933-6936	you	
57-15	6937-6940	use	
57-16	6941-6945	MSCK	
57-17	6946-6952	REPAIR	
57-18	6953-6958	TABLE	
57-19	6959-6961	to	
57-20	6962-6965	add	
57-21	6966-6969	new	
57-22	6970-6980	partitions	
57-23	6981-6991	frequently	
57-24	6992-6993	(	
57-25	6993-6996	for	
57-26	6997-7004	example	
57-27	7004-7005	,	
57-28	7006-7008	on	
57-29	7009-7010	a	
57-30	7011-7016	daily	
57-31	7017-7022	basis	
57-32	7022-7023	)	
57-33	7024-7027	and	
57-34	7028-7031	are	
57-35	7032-7044	experiencing	
57-36	7045-7050	query	
57-37	7051-7059	timeouts	
57-38	7059-7060	,	
57-39	7061-7069	consider	
57-40	7070-7075	using	
57-41	7076-7081	ALTER	
57-42	7082-7087	TABLE	
57-43	7088-7091	ADD	
57-44	7092-7101	PARTITION	
57-45	7101-7102	.	

#Text=MSCK REPAIR TABLE is best used when creating a table for the first
#Text=time or when there is uncertainty about parity between data and partition
#Text=metadata.
58-1	7103-7107	MSCK	
58-2	7108-7114	REPAIR	
58-3	7115-7120	TABLE	
58-4	7121-7123	is	
58-5	7124-7128	best	
58-6	7129-7133	used	
58-7	7134-7138	when	
58-8	7139-7147	creating	
58-9	7148-7149	a	
58-10	7150-7155	table	
58-11	7156-7159	for	
58-12	7160-7163	the	
58-13	7164-7169	first	
58-14	7170-7174	time	
58-15	7175-7177	or	
58-16	7178-7182	when	
58-17	7183-7188	there	
58-18	7189-7191	is	
58-19	7192-7203	uncertainty	
58-20	7204-7209	about	
58-21	7210-7216	parity	
58-22	7217-7224	between	
58-23	7225-7229	data	
58-24	7230-7233	and	
58-25	7234-7243	partition	
58-26	7244-7252	metadata	
58-27	7252-7253	.	

#Text=Avoid using coalesce()in a WHERE clause with partitioned
#Text=columns – Under some circumstances, using the coalesce() or other functions in a WHERE clause against
#Text=partitioned columns might result in reduced performance.
59-1	7254-7259	Avoid	
59-2	7260-7265	using	
59-3	7266-7274	coalesce	
59-4	7274-7275	(	
59-5	7275-7276	)	
59-6	7276-7278	in	
59-7	7279-7280	a	
59-8	7281-7286	WHERE	
59-9	7287-7293	clause	
59-10	7294-7298	with	
59-11	7299-7310	partitioned	
59-12	7311-7318	columns	
59-13	7319-7320	–	
59-14	7321-7326	Under	
59-15	7327-7331	some	
59-16	7332-7345	circumstances	
59-17	7345-7346	,	
59-18	7347-7352	using	
59-19	7353-7356	the	
59-20	7357-7365	coalesce	
59-21	7365-7366	(	
59-22	7366-7367	)	
59-23	7368-7370	or	
59-24	7371-7376	other	
59-25	7377-7386	functions	
59-26	7387-7389	in	
59-27	7390-7391	a	
59-28	7392-7397	WHERE	
59-29	7398-7404	clause	
59-30	7405-7412	against	
59-31	7413-7424	partitioned	
59-32	7425-7432	columns	
59-33	7433-7438	might	
59-34	7439-7445	result	
59-35	7446-7448	in	
59-36	7449-7456	reduced	
59-37	7457-7468	performance	
59-38	7468-7469	.	

#Text=If this occurs, try
#Text=rewriting your query to provide the same functionality without using
#Text=coalesce().
60-1	7470-7472	If	
60-2	7473-7477	this	
60-3	7478-7484	occurs	
60-4	7484-7485	,	
60-5	7486-7489	try	
60-6	7490-7499	rewriting	
60-7	7500-7504	your	
60-8	7505-7510	query	
60-9	7511-7513	to	
60-10	7514-7521	provide	
60-11	7522-7525	the	
60-12	7526-7530	same	
60-13	7531-7544	functionality	
60-14	7545-7552	without	
60-15	7553-7558	using	
60-16	7559-7567	coalesce	
60-17	7567-7568	(	
60-18	7568-7569	)	
60-19	7569-7570	.	

#Text=Window Functions
#Text=Minimize the use of window functions –
#Text=Window
#Text=functions such as rank()
#Text=are memory intensive.
61-1	7571-7577	Window	
61-2	7578-7587	Functions	
61-3	7588-7596	Minimize	
61-4	7597-7600	the	
61-5	7601-7604	use	
61-6	7605-7607	of	
61-7	7608-7614	window	
61-8	7615-7624	functions	
61-9	7625-7626	–	
61-10	7627-7633	Window	
61-11	7634-7643	functions	
61-12	7644-7648	such	
61-13	7649-7651	as	
61-14	7652-7656	rank	
61-15	7656-7657	(	
61-16	7657-7658	)	
61-17	7659-7662	are	
61-18	7663-7669	memory	
61-19	7670-7679	intensive	
61-20	7679-7680	.	

#Text=In general, window functions require an entire dataset to be
#Text=loaded into a single Athena node for processing.
62-1	7681-7683	In	
62-2	7684-7691	general	
62-3	7691-7692	,	
62-4	7693-7699	window	
62-5	7700-7709	functions	
62-6	7710-7717	require	
62-7	7718-7720	an	
62-8	7721-7727	entire	
62-9	7728-7735	dataset	
62-10	7736-7738	to	
62-11	7739-7741	be	
62-12	7742-7748	loaded	
62-13	7749-7753	into	
62-14	7754-7755	a	
62-15	7756-7762	single	
62-16	7763-7769	Athena	
62-17	7770-7774	node	
62-18	7775-7778	for	
62-19	7779-7789	processing	
62-20	7789-7790	.	

#Text=With an extremely large dataset,
#Text=this can risk crashing the node.
63-1	7791-7795	With	
63-2	7796-7798	an	
63-3	7799-7808	extremely	
63-4	7809-7814	large	
63-5	7815-7822	dataset	
63-6	7822-7823	,	
63-7	7824-7828	this	
63-8	7829-7832	can	
63-9	7833-7837	risk	
63-10	7838-7846	crashing	
63-11	7847-7850	the	
63-12	7851-7855	node	
63-13	7855-7856	.	

#Text=To avoid this, try the following options:
#Text=Filter the data and run window functions on a subset of the data.
64-1	7857-7859	To	
64-2	7860-7865	avoid	
64-3	7866-7870	this	
64-4	7870-7871	,	
64-5	7872-7875	try	
64-6	7876-7879	the	
64-7	7880-7889	following	
64-8	7890-7897	options	
64-9	7897-7898	:	
64-10	7899-7905	Filter	
64-11	7906-7909	the	
64-12	7910-7914	data	
64-13	7915-7918	and	
64-14	7919-7922	run	
64-15	7923-7929	window	
64-16	7930-7939	functions	
64-17	7940-7942	on	
64-18	7943-7944	a	
64-19	7945-7951	subset	
64-20	7952-7954	of	
64-21	7955-7958	the	
64-22	7959-7963	data	
64-23	7963-7964	.	

#Text=Use the PARTITION BY clause with the window function whenever
#Text=possible.
65-1	7965-7968	Use	
65-2	7969-7972	the	
65-3	7973-7982	PARTITION	
65-4	7983-7985	BY	
65-5	7986-7992	clause	
65-6	7993-7997	with	
65-7	7998-8001	the	
65-8	8002-8008	window	
65-9	8009-8017	function	
65-10	8018-8026	whenever	
65-11	8027-8035	possible	
65-12	8035-8036	.	

#Text=Find an alternative way to construct the query.
66-1	8037-8041	Find	
66-2	8042-8044	an	
66-3	8045-8056	alternative	
66-4	8057-8060	way	
66-5	8061-8063	to	
66-6	8064-8073	construct	
66-7	8074-8077	the	
66-8	8078-8083	query	
66-9	8083-8084	.	

#Text=Use More Efficient
#Text=Functions
#Text=Replace row_number() OVER (...) as rnk ...
67-1	8085-8088	Use	
67-2	8089-8093	More	
67-3	8094-8103	Efficient	
67-4	8104-8113	Functions	
67-5	8114-8121	Replace	
67-6	8122-8132	row_number	
67-7	8132-8133	(	
67-8	8133-8134	)	
67-9	8135-8139	OVER	
67-10	8140-8141	(	
67-11	8141-8142	.	
67-12	8142-8143	.	
67-13	8143-8144	.	
67-14	8144-8145	)	
67-15	8146-8148	as	
67-16	8149-8152	rnk	
67-17	8153-8154	.	
67-18	8154-8155	.	
67-19	8155-8156	.	

#Text=WHERE rnk =
#Text=1 – To speed up a query with a row_number() clause like this, replace this syntax with a combination
#Text=of GROUP BY, ORDER BY, and LIMIT 1.
68-1	8157-8162	WHERE	
68-2	8163-8166	rnk	
68-3	8167-8168	=	
68-4	8169-8170	1	
68-5	8171-8172	–	
68-6	8173-8175	To	
68-7	8176-8181	speed	
68-8	8182-8184	up	
68-9	8185-8186	a	
68-10	8187-8192	query	
68-11	8193-8197	with	
68-12	8198-8199	a	
68-13	8200-8210	row_number	
68-14	8210-8211	(	
68-15	8211-8212	)	
68-16	8213-8219	clause	
68-17	8220-8224	like	
68-18	8225-8229	this	
68-19	8229-8230	,	
68-20	8231-8238	replace	
68-21	8239-8243	this	
68-22	8244-8250	syntax	
68-23	8251-8255	with	
68-24	8256-8257	a	
68-25	8258-8269	combination	
68-26	8270-8272	of	
68-27	8273-8278	GROUP	
68-28	8279-8281	BY	
68-29	8281-8282	,	
68-30	8283-8288	ORDER	
68-31	8289-8291	BY	
68-32	8291-8292	,	
68-33	8293-8296	and	
68-34	8297-8302	LIMIT	
68-35	8303-8304	1	
68-36	8304-8305	.	

#Text=Use regular expressions instead of LIKE on
#Text=large strings – Queries that include clauses such as LIKE
#Text='%string%' on large strings can be very
#Text=costly.
69-1	8306-8309	Use	
69-2	8310-8317	regular	
69-3	8318-8329	expressions	
69-4	8330-8337	instead	
69-5	8338-8340	of	
69-6	8341-8345	LIKE	
69-7	8346-8348	on	
69-8	8349-8354	large	
69-9	8355-8362	strings	
69-10	8363-8364	–	
69-11	8365-8372	Queries	
69-12	8373-8377	that	
69-13	8378-8385	include	
69-14	8386-8393	clauses	
69-15	8394-8398	such	
69-16	8399-8401	as	
69-17	8402-8406	LIKE	
69-18	8407-8408	'	
69-19	8408-8409	%	
69-20	8409-8415	string	
69-21	8415-8416	%	
69-22	8416-8417	'	
69-23	8418-8420	on	
69-24	8421-8426	large	
69-25	8427-8434	strings	
69-26	8435-8438	can	
69-27	8439-8441	be	
69-28	8442-8446	very	
69-29	8447-8453	costly	
69-30	8453-8454	.	

#Text=Consider using the regexp_like() function and a regular expression instead.
70-1	8455-8463	Consider	
70-2	8464-8469	using	
70-3	8470-8473	the	
70-4	8474-8485	regexp_like	
70-5	8485-8486	(	
70-6	8486-8487	)	
70-7	8488-8496	function	
70-8	8497-8500	and	
70-9	8501-8502	a	
70-10	8503-8510	regular	
70-11	8511-8521	expression	
70-12	8522-8529	instead	
70-13	8529-8530	.	

#Text=Use max() instead of element_at(array_sort(), 1)
#Text=– For increased speed, replace the nested functions
#Text=element_at(array_sort(), 1) with max().
71-1	8531-8534	Use	
71-2	8535-8538	max	
71-3	8538-8539	(	
71-4	8539-8540	)	
71-5	8541-8548	instead	
71-6	8549-8551	of	
71-7	8552-8562	element_at	
71-8	8562-8563	(	
71-9	8563-8573	array_sort	
71-10	8573-8574	(	
71-11	8574-8575	)	
71-12	8575-8576	,	
71-13	8577-8578	1	
71-14	8578-8579	)	
71-15	8580-8581	–	
71-16	8582-8585	For	
71-17	8586-8595	increased	
71-18	8596-8601	speed	
71-19	8601-8602	,	
71-20	8603-8610	replace	
71-21	8611-8614	the	
71-22	8615-8621	nested	
71-23	8622-8631	functions	
71-24	8632-8642	element_at	
71-25	8642-8643	(	
71-26	8643-8653	array_sort	
71-27	8653-8654	(	
71-28	8654-8655	)	
71-29	8655-8656	,	
71-30	8657-8658	1	
71-31	8658-8659	)	
71-32	8660-8664	with	
71-33	8665-8668	max	
71-34	8668-8669	(	
71-35	8669-8670	)	
71-36	8670-8671	.	

#Text=Additional Resources
#Text=For additional information on performance tuning in Athena, consider the following
#Text=resources:
#Text=Read the AWS Big Data blog post Top 10
#Text=Performance Tuning Tips for Amazon Athena
#Text=Read other Athena
#Text=posts in the AWS Big Data Blog
#Text=Visit the Amazon Athena Forum
#Text=Consult the Athena
#Text=topics in the AWS Knowledge Center
#Text=Contact AWS Support (in the AWS console, click Support,
#Text=Support Center)
#Text=Javascript is disabled or is unavailable in your
#Text=browser.
72-1	8672-8682	Additional	
72-2	8683-8692	Resources	
72-3	8693-8696	For	
72-4	8697-8707	additional	
72-5	8708-8719	information	
72-6	8720-8722	on	
72-7	8723-8734	performance	
72-8	8735-8741	tuning	
72-9	8742-8744	in	
72-10	8745-8751	Athena	
72-11	8751-8752	,	
72-12	8753-8761	consider	
72-13	8762-8765	the	
72-14	8766-8775	following	
72-15	8776-8785	resources	
72-16	8785-8786	:	
72-17	8787-8791	Read	
72-18	8792-8795	the	
72-19	8796-8799	AWS	
72-20	8800-8803	Big	
72-21	8804-8808	Data	
72-22	8809-8813	blog	
72-23	8814-8818	post	
72-24	8819-8822	Top	
72-25	8823-8825	10	
72-26	8826-8837	Performance	
72-27	8838-8844	Tuning	
72-28	8845-8849	Tips	
72-29	8850-8853	for	
72-30	8854-8860	Amazon	
72-31	8861-8867	Athena	
72-32	8868-8872	Read	
72-33	8873-8878	other	
72-34	8879-8885	Athena	
72-35	8886-8891	posts	
72-36	8892-8894	in	
72-37	8895-8898	the	
72-38	8899-8902	AWS	
72-39	8903-8906	Big	
72-40	8907-8911	Data	
72-41	8912-8916	Blog	
72-42	8917-8922	Visit	
72-43	8923-8926	the	
72-44	8927-8933	Amazon	
72-45	8934-8940	Athena	
72-46	8941-8946	Forum	
72-47	8947-8954	Consult	
72-48	8955-8958	the	
72-49	8959-8965	Athena	
72-50	8966-8972	topics	
72-51	8973-8975	in	
72-52	8976-8979	the	
72-53	8980-8983	AWS	
72-54	8984-8993	Knowledge	
72-55	8994-9000	Center	
72-56	9001-9008	Contact	
72-57	9009-9012	AWS	
72-58	9013-9020	Support	
72-59	9021-9022	(	
72-60	9022-9024	in	
72-61	9025-9028	the	
72-62	9029-9032	AWS	
72-63	9033-9040	console	
72-64	9040-9041	,	
72-65	9042-9047	click	
72-66	9048-9055	Support	
72-67	9055-9056	,	
72-68	9057-9064	Support	
72-69	9065-9071	Center	
72-70	9071-9072	)	
72-71	9073-9083	Javascript	
72-72	9084-9086	is	
72-73	9087-9095	disabled	
72-74	9096-9098	or	
72-75	9099-9101	is	
72-76	9102-9113	unavailable	
72-77	9114-9116	in	
72-78	9117-9121	your	
72-79	9122-9129	browser	
72-80	9129-9130	.	

#Text=To use the AWS Documentation, Javascript must be
#Text=enabled.
73-1	9131-9133	To	
73-2	9134-9137	use	
73-3	9138-9141	the	
73-4	9142-9145	AWS	
73-5	9146-9159	Documentation	
73-6	9159-9160	,	
73-7	9161-9171	Javascript	
73-8	9172-9176	must	
73-9	9177-9179	be	
73-10	9180-9187	enabled	
73-11	9187-9188	.	

#Text=Please refer to your browser's Help pages for instructions.
74-1	9189-9195	Please	
74-2	9196-9201	refer	
74-3	9202-9204	to	
74-4	9205-9209	your	
74-5	9210-9219	browser's	
74-6	9220-9224	Help	
74-7	9225-9230	pages	
74-8	9231-9234	for	
74-9	9235-9247	instructions	
74-10	9247-9248	.	

#Text=Document Conventions
#Text=Troubleshooting
#Text=Code Samples, Service Quotas, and Previous JDBC Driver
#Text=Did this page help you?
75-1	9249-9257	Document	
75-2	9258-9269	Conventions	
75-3	9270-9285	Troubleshooting	
75-4	9286-9290	Code	
75-5	9291-9298	Samples	
75-6	9298-9299	,	
75-7	9300-9307	Service	
75-8	9308-9314	Quotas	
75-9	9314-9315	,	
75-10	9316-9319	and	
75-11	9320-9328	Previous	
75-12	9329-9333	JDBC	
75-13	9334-9340	Driver	
75-14	9341-9344	Did	
75-15	9345-9349	this	
75-16	9350-9354	page	
75-17	9355-9359	help	
75-18	9360-9363	you	
75-19	9363-9364	?	

#Text=- Yes
#Text=Thanks for letting us know we're doing a good
#Text=job!
76-1	9365-9366	-	
76-2	9367-9370	Yes	
76-3	9371-9377	Thanks	
76-4	9378-9381	for	
76-5	9382-9389	letting	
76-6	9390-9392	us	
76-7	9393-9397	know	
76-8	9398-9403	we're	
76-9	9404-9409	doing	
76-10	9410-9411	a	
76-11	9412-9416	good	
76-12	9417-9420	job	
76-13	9420-9421	!	

#Text=If you've got a moment, please tell us what we did right
#Text=so we can do more of it.
77-1	9422-9424	If	
77-2	9425-9431	you've	
77-3	9432-9435	got	
77-4	9436-9437	a	
77-5	9438-9444	moment	
77-6	9444-9445	,	
77-7	9446-9452	please	
77-8	9453-9457	tell	
77-9	9458-9460	us	
77-10	9461-9465	what	
77-11	9466-9468	we	
77-12	9469-9472	did	
77-13	9473-9478	right	
77-14	9479-9481	so	
77-15	9482-9484	we	
77-16	9485-9488	can	
77-17	9489-9491	do	
77-18	9492-9496	more	
77-19	9497-9499	of	
77-20	9500-9502	it	
77-21	9502-9503	.	

#Text=Did this page help you?
78-1	9504-9507	Did	
78-2	9508-9512	this	
78-3	9513-9517	page	
78-4	9518-9522	help	
78-5	9523-9526	you	
78-6	9526-9527	?	

#Text=- No
#Text=Thanks for letting us know this page needs work.
79-1	9528-9529	-	
79-2	9530-9532	No	
79-3	9533-9539	Thanks	
79-4	9540-9543	for	
79-5	9544-9551	letting	
79-6	9552-9554	us	
79-7	9555-9559	know	
79-8	9560-9564	this	
79-9	9565-9569	page	
79-10	9570-9575	needs	
79-11	9576-9580	work	
79-12	9580-9581	.	

#Text=We're
#Text=sorry we let you down.
80-1	9582-9587	We're	
80-2	9588-9593	sorry	
80-3	9594-9596	we	
80-4	9597-9600	let	
80-5	9601-9604	you	
80-6	9605-9609	down	
80-7	9609-9610	.	

#Text=If you've got a moment, please tell us how we can make
#Text=the documentation better.
81-1	9611-9613	If	
81-2	9614-9620	you've	
81-3	9621-9624	got	
81-4	9625-9626	a	
81-5	9627-9633	moment	
81-6	9633-9634	,	
81-7	9635-9641	please	
81-8	9642-9646	tell	
81-9	9647-9649	us	
81-10	9650-9653	how	
81-11	9654-9656	we	
81-12	9657-9660	can	
81-13	9661-9665	make	
81-14	9666-9669	the	
81-15	9670-9683	documentation	
81-16	9684-9690	better	
81-17	9690-9691	.	
