CREATE DATASOURCE TABLE - Spark 3.0.0 Documentation
3.0.0
Overview
Programming Guides
Quick Start
RDDs, Accumulators, Broadcasts Vars
SQL, DataFrames, and Datasets
Structured Streaming
Spark Streaming (DStreams)
MLlib (Machine Learning)
GraphX (Graph Processing)
SparkR (R on Spark)
API Docs
Scala
Java
Python
SQL, Built-in Functions
Deploying
Overview
Submitting Applications
Spark Standalone
Mesos
YARN
Kubernetes
More
Configuration
Monitoring
Tuning Guide
Job Scheduling
Security
Hardware Provisioning
Migration Guide
Building Spark
Contributing to Spark
Third Party Projects
Spark SQL Guide
Getting Started
Data Sources
Performance Tuning
Distributed SQL Engine
PySpark Usage Guide for Pandas with Apache Arrow
Migration Guide
SQL Reference
ANSI Compliance
Data Types
Datetime Pattern
Functions
Identifiers
Literals
Null Semantics
SQL Syntax
Data Definition Statements
ALTER DATABASE
ALTER TABLE
ALTER VIEW
CREATE DATABASE
CREATE FUNCTION
CREATE TABLE
CREATE VIEW
DROP DATABASE
DROP FUNCTION
DROP TABLE
DROP VIEW
TRUNCATE TABLE
REPAIR TABLE
USE DATABASE
Data Manipulation Statements
Data Retrieval(Queries)
Auxiliary Statements
CREATE DATASOURCE TABLE
Description
The CREATE TABLE statement defines a new table using a Data Source.
Syntax
CREATE TABLE [ IF NOT EXISTS ] table_identifier
[ ( col_name1 col_type1 [ COMMENT col_comment1 ], ... ) ]
USING data_source
[ OPTIONS ( key1=val1, key2=val2, ... ) ]
[ PARTITIONED BY ( col_name1, col_name2, ... ) ]
[ CLUSTERED BY ( col_name3, col_name4, ... )
[ SORTED BY ( col_name [ ASC | DESC ], ... ) ]
INTO num_buckets BUCKETS ]
[ LOCATION path ]
[ COMMENT table_comment ]
[ TBLPROPERTIES ( key1=val1, key2=val2, ... ) ]
[ AS select_statement ]
Note that, the clauses between the USING clause and the AS SELECT clause can come in
as any order. For example, you can write COMMENT table_comment after TBLPROPERTIES.
Parameters
table_identifier
Specifies a table name, which may be optionally qualified with a database name.
Syntax: [ database_name. ] table_name
USING data_source
Data Source is the input format used to create the table. Data source can be CSV, TXT, ORC, JDBC, PARQUET, etc.
PARTITIONED BY
Partitions are created on the table, based on the columns specified.
CLUSTERED BY
Partitions created on the table will be bucketed into fixed buckets based on the column specified for bucketing.
NOTE: Bucketing is an optimization technique that uses buckets (and bucketing columns) to determine data partitioning and avoid data shuffle.
SORTED BY
Determines the order in which the data is stored in buckets. Default is Ascending order.
LOCATION
Path to the directory where table data is stored, which could be a path on distributed storage like HDFS, etc.
COMMENT
A string literal to describe the table.
TBLPROPERTIES
A list of key-value pairs that is used to tag the table definition.
AS select_statement
The table is populated using the data from the select statement.
Data Source Interaction
A Data Source table acts like a pointer to the underlying data source. For example, you can create
a table “foo” in Spark which points to a table “bar” in MySQL using JDBC Data Source. When you
read/write table “foo”, you actually read/write table “bar”.
In general CREATE TABLE is creating a “pointer”, and you need to make sure it points to something
existing. An exception is file source such as parquet, json. If you don’t specify the LOCATION,
Spark will create a default table location for you.
For CREATE TABLE AS SELECT, Spark will overwrite the underlying data source with the data of the
input query, to make sure the table gets created contains exactly the same data as the input query.
Examples
--Use data source
CREATE TABLE student (id INT, name STRING, age INT) USING CSV;
--Use data from another table
CREATE TABLE student_copy USING CSV
AS SELECT * FROM student;
--Omit the USING clause, which uses the default data source (parquet by default)
CREATE TABLE student (id INT, name STRING, age INT);
--Specify table comment and properties
CREATE TABLE student (id INT, name STRING, age INT) USING CSV
COMMENT 'this is a comment'
TBLPROPERTIES ('foo'='bar');
--Specify table comment and properties with different clauses order
CREATE TABLE student (id INT, name STRING, age INT) USING CSV
TBLPROPERTIES ('foo'='bar')
COMMENT 'this is a comment';
--Create partitioned and bucketed table
CREATE TABLE student (id INT, name STRING, age INT)
USING CSV
PARTITIONED BY (age)
CLUSTERED BY (Id) INTO 4 buckets;
Related Statements
CREATE TABLE USING HIVE FORMAT
CREATE TABLE LIKE
