MySQL InnoDB performance improvement: InnoDB buffer pool instances - Updated! - Sysadmins of the North
Skip to content
Sysadmins of the NorthTechnical blog, where topics include: computer, server, web, sysadmin, MySQL, database, virtualization, optimization and security
Home
Welcome
Privacy Policy
Code base
PowerShellPowerShell code snippets, examples and info for Windows Server administrators. Maybe some AppCmd and DISM as well.
GNU Linux
MySQLMySQL performance tuning and optimization: optimize MySQL server and database
Security
Windows Server
WordPress
Donate
Search for...
Sysadmins of the NorthTechnical blog, where topics include: computer, server, web, sysadmin, MySQL, database, virtualization, optimization and security
Toggle Navigation
Search for...
Toggle Navigation
Home
Welcome
Privacy Policy
Code base
PowerShellPowerShell code snippets, examples and info for Windows Server administrators. Maybe some AppCmd and DISM as well.
GNU Linux
MySQLMySQL performance tuning and optimization: optimize MySQL server and database
Security
Windows Server
WordPress
Donate
You are here:
Saotn.org » MySQL » MySQL InnoDB performance improvement: InnoDB buffer pool instances – Updated!MySQL InnoDB performance improvement: InnoDB buffer pool instances – Updated! Jan ReilinkMySQL10 June 20163 June 2020
Are you running into MySQL load problems? Learn how to tune MySQL servers for a heavy InnoDB workload, by configuring innodb_buffer_pool_instances. Dividing the InnoDB buffer pool into multiple instances improves Disk I/O. By doing so, you run your database and website more efficiently and faster. Here is a little help for you.
Tune MySQL InnoDB buffer pool instances & size for heavy workloads#
All for more InnoDB Disk I/O performance on MySQL 5.5+.
Tuning MySQL servers is an ever ongoing process. Every new MySQL version brings new configuration settings you can use to improve its performance. As a MySQL DBA you want your database server and databases to perform better than well, don’t you?
MariaDB/MySQL 5.5.4 introduces new configuration settings for the InnoDB storage engine. This can greatly improve MySQL’s InnoDB performance, both in read and write operations.
One of those settings is innodb_buffer_pool_instances. The innodb_buffer_pool_instances divides the InnoDB buffer pool into separate instances. Dividing your buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Multiple buffer pool instances are configured using the innodb_buffer_pool_instances configuration option.
You might also want to adjust the innodb_buffer_pool_size value:
The larger the InnoDB buffer pool, the more InnoDB acts like an in-memory database. It reads data from disk once and then accesses the data from memory during subsequent reads. Buffer pool size is configured using the innodb_buffer_pool_size configuration option.
Back to increasing innodb_buffer_pool_instances:
The innodb_buffer_pool_instances divides the InnoDB buffer pool in a number of regions.
The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.
In MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now
you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases
InnoDB read/write threads.
To enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum).
For example, you can set innodb_buffer_pool_size to 6 GB and innodb_buffer_pool_instances to 4 in your my.cnf MySQL configuration file:
; InnoDB buffer pool size in bytes. The primary value to adjust on a database server,
; can be set up to 80% of the total memory in these environments
innodb_buffer_pool_size = 6000M
If innodb_buffer_pool_size is set to more than 1GB, innodb_buffer_pool_instances
; divides the InnoDB buffer pool into this many instances.
innodb_buffer_pool_instances = 4Code language: TOML, also INI (ini)
In this example, I’ve used an innodb_buffer_pool_size of 6000M (6 GB), so there is 1500M available per innodb_buffer_pool_instance, which is more than the minimum 1 GB. As a rule of thumb, set your innodb_buffer_pool_size to approximately 70 – 80% of the RAM available.
Innodb_buffer_pool_instances defaults#
Various MySQL versions have different innodb_buffer_pool_instances default values, here is an overview – listing – for you:
MySQL version# InnoDB buffer pool instancesNotesMySQL 5.5 (<= 5.5.4)1not configurableMySQL 5.51–MySQL 5.6 (<= 5.6.5)1–MySQL 5.6 (>= 5.6.6)8or 1 if innodb_buffer_pool_size < 1GBMySQL 5.78or 1 if innodb_buffer_pool_size < 1GBMariaDB 10 (<= MariaDB 10.0.3)1–MariaDB 10 (>= MariaDB 10.0.4)8–InnoDB read and write I/O threads in MySQL#
Besides innodb_buffer_pool_instances, you can also increase the number of InnoDB read I/O threads and write I/O threads. These are configured with innodb_write_io_threads and innodb_read_io_threads.
Both settings default to 4 threads. We can increase these to, for example, 8:
; Number of I/O threads for writes
innodb_write_io_threads = 8
; Number of I/O threads for reads
innodb_read_io_threads = 8Code language: TOML, also INI (ini)
innodb_read_io_threads
The number of I/O threads for read operations in InnoDB. The default value is 4.
innodb_write_io_threads
The number of I/O threads for write operations in InnoDB. The default value is 4.
When should you increase the number of innodb_read_io_threads? When you see more than 64 × innodb_read_io_threads pending read requests in SHOW ENGINE INNODB STATUS, you might gain by increasing the value of innodb_read_io_threads.
Optimizing InnoDB Disk I/O#
If you follow the best practices for database design and the tuning techniques for SQL operations, but your database is still slowed by heavy disk I/O activity, explore these low-level techniques related to disk I/O. If the Unix top tool or the Windows Task Manager shows that the CPU usage percentage with your workload is less than 70%, your workload is probably disk-bound, Optimizing InnoDB Disk I/O.
Starting from MariaDB 10.0, the default number of innodb_buffer_pool_instances is 8. This means you have to configure your innodb_buffer_pool_size to at least 8 GB, see the defaults above.
Protip, don’t over optimize: never make too many configuration changes at once. After changing one or two settings, let the server run for a few days so you can learn the implications of the changes. Then, if necessary, make additional changes to the configuration.
Convert MyISAM to InnoDB tables for WordPress using a pluginFor WordPress, I created a plugin to convert MyISAM tables to InnoDB, that now is incorporated into the Vevida Optimizer WordPress plugin. The Vevida Optimizer plugin extends the automatic update feature already present in WordPress. WordPress core updates can be switched on or off, themes and translations can be automatically updated, and the plugin updates can be configured on a per-plugin basis.
Extra tips for MySQL performance tuning#
Besides optimizing InnoDB for a high-performance workload, there is more you can do to tune MySQL server and database performance. Here are some extra MySQL configuration tips for you.
Some information might be outdated and obsolete but may hold valuable information for tuning your MySQL server.
Note: this is a translation and rewrite of my older Dutch post “MySQL performance en optimalisatie tips“, which is now deleted and links to here. Just in case you were wondering why you arrived here instead of the Dutch post after clicking a link :-)
1: No two MySQL servers are the same#
When optimizing MySQL database servers, keep in mind that no server is equal to another. Settings that work well on one server, may degrade performance on a second. If you manage multiple servers with its configuration under version control (e.g almost -or exactly- the same MySQL configuration for all servers), choose what works best on all servers.
To determine what you can improve, you first need to know how the server performs now. You can use some MySQL commands for this on your MySQL cli (data comes from my very old post).
mysql> SHOW STATUS LIKE '%key_read%';
+-------------------+-------------+
| Variable_name
| Value
+-------------------+-------------+
| Key_read_requests | 11810240259 |
| Key_reads
| 9260357
+-------------------+-------------+Code language: SQL (Structured Query Language) (sql)
These two variables and values relate to the configured key_buffer_size
In this old example, the database server has 4 GB of RAM and a configured key_buffer_size of 512 MB. The ratio (Key_read_requests / Key_reads) is approximately 1/1275, which is good but the key_buffer_size value may be increased to 768 MB. Even though this is not yet necessary.
mysql> SHOW STATUS LIKE 'thread%';
+-------------------+---------+
| Variable_name
| Value
+-------------------+---------+
| Threads_cached
| 0
| Threads_connected | 76
| Threads_created
| 6234040 |
| Threads_running
| 2
+-------------------+---------+Code language: SQL (Structured Query Language) (sql)
These Threads_* variable values show you there are currently 76 connected threads, of which only 2 are really running a thread (executing a statement). This means 74 connections are idle.
Here you can also see that there is no “thread cache” set up for MySQL: Threads_cached | 0
You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…
Don’t set this one too high, somewhere between 20 and 40 is often good enough:
thread_cache_size = 20Code language: TOML, also INI (ini)
When you execute the previous statement again, the values will be:
mysql> SHOW STATUS LIKE 'thread%';
+-------------------+-------+
| Variable_name
| Value |
+-------------------+-------+
| Threads_cached
| 14
| Threads_connected | 98
| Threads_created
| 2896
| Threads_running
| 1
+-------------------+-------+Code language: SQL (Structured Query Language) (sql)
You now have 14 threads cached :)
2: Miscellaneous MySQL configuration settings#
A few words on some miscellaneous configuration settings.
2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O.
https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmp_table_sizehttps://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_heap_table_size2.2: join_buffer_sizeThe join_buffer_size sets a maximum buffer size for plain index scans, range index scans and joins without indices (and therefore perform full table scans). Keep this one low, 1M for example.
3. Use Diagnostics for improvements#
It is important to frequently run diagnostics and/or look up diagnostic data (for example in your information_scheme table). Percona has a lot of information about some key metrics:
https://www.percona.com/doc/percona-server/8.0/index.html#diagnostics-improvementsMySQL tuning, the conclusion#
Tuning MySQL and the InnoDB storage engine is an important step in further optimizing your hosting environment. Every new MySQL version brings new settings to improve your MySQL configuration, so be sure to read those changelogs.
In this article we went over InnoDB Buffer Pool Size and InnoDB Buffer Pool Instances. Setting these properly greatly improves your MySQL server’s performance!
But never (ever, ever) over-optimize! Please don’t make too many configuration changes at once. Make one or two and restart mysqld. After monitoring your system for a few days, running with the new configuration, you have data available to further optimize other MySQL settings.
With InnoDB being the default storage engine, you also have to make sure you make use of this storage engine in MySQL. Therefore it is important to convert old MyISAM tables to InnoDB.
Tags:InnoDBlinuxMySQLoptimizationquery_cache
4 thoughts on “MySQL InnoDB performance improvement: InnoDB buffer pool instances – Updated!”
Dmitry Kapustin
2 June 2020 at 23:30
The use of Query Cache was justified when using MyISAM tables, which were completely locked during update/insert/delete data. When using InnoDB tables on the highload progect, the Query Cache on the contrary, only interferes and dramatically degrades server performance. Therefore, Query Cache is disabled by default in new versions of the MySQL Server.
Reply
Jan Reilink
3 June 2020 at 08:45
Hi Dmitry, thank you for your comment.
I thought I removed all references to query_cache. Nowadays Query Cache is removed from MySQL, because it’s only for the MyISAM table engine and not for InnoDB. Unfortunately I forgot one, and that’s gone now.
Reply
Unca.Alby
14 October 2019 at 21:32
I understand you used “courier” font for the configuration parameters so that they will display differently and be obvious that it’s a “computer term”, but you also need to be careful about the size of that font. As it is now, the “computer terms” are HALF the size of the normal text! It makes reading your post quite a bit more difficult. It’s like walking down a road with holes to trip in every few feet.
Reply
Jan Reilink
15 October 2019 at 14:26
Thanks for your constructive criticism, I’ve increased the pre and code font-size to 16px (which was 14). Is this better?
Reply
Leave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment Name *
Email *
Website
Save my name, email, and website in this browser for the next time I comment.
previousKMS Migration from 2008 R2 to Windows Server 2012 R2 and KMS Activation Known IssuesnextSSL in WordPress: how to move WordPress to HTTPS? The definitive guide
NavigationHome
Welcome
Privacy Policy
Code base
PowerShell
GNU Linux
MySQL
Security
Windows Server
WordPress
Donate
Recent Posts
Getting more out your Windows Performance Counters monitoring for web applications – part 3
ASP.NET web application monitoring in Zabbix, part 2
Monitor IIS application pools in Zabbix, part 1
Disable Joomla Contacts component (com_contact) in MySQL / phpMyAdmin
Disable WordPress XCloner Plugin logger in MySQL / phpMyAdmin
Force HSTS in Apache .htaccess
.NET Core 2.1, 3.1, and .NET 5.0 updates are coming to Microsoft Update
Proudly hosted by
Tags.htaccess (18)
AppCmd (10)
ASP.NET (15)
Bash (19)
IIS (61)
linux (21)
MySQL (34)
OPcache (8)
optimization (18)
performance (14)
PHP (55)
plugin (14)
PowerShell (49)
security (44)
SQL Server (10)
SSL (15)
URL Rewrite (17)
web.config (21)
web application security (17)
website (17)
WinCache (9)
Windows (17)
Windows 10 (9)
Windows Server 2016 (8)
WordPress (30)
Tip: also visit
Sysadmins of the North
ITFAQ-nl, internet en computers uitgelegd in eenvoudig Nederlands!
WordPress hosting
ASP.NET & ASP.NET Core hosting – @Vevida
Reilink.nl
Search for:
Thanks! Thank you for your visit!
Don’t forget to share this site with your family, friends and co-workers :-)
Donations are more than welcome and will be used for research new posts and hosting.
If you like this site or encourage its development, please use the form above. Or you can transfer a direct donation via Paypal or bank wire-transfer IBAN: NL31 ABNA 0432217258 (Jan Reilink). Thanks! :-)
Search
Search for:
Archives Archives
Select Month
April 2021  (1)
February 2021  (2)
January 2021  (2)
December 2020  (2)
November 2020  (1)
October 2020  (2)
September 2020  (1)
August 2020  (1)
July 2020  (1)
June 2020  (1)
May 2020  (3)
March 2020  (1)
February 2020  (1)
January 2020  (3)
December 2019  (2)
November 2019  (1)
October 2019  (1)
September 2019  (1)
August 2019  (1)
June 2019  (1)
April 2019  (1)
March 2019  (1)
December 2018  (1)
November 2018  (3)
October 2018  (4)
August 2018  (2)
March 2018  (2)
February 2018  (3)
January 2018  (1)
September 2017  (1)
August 2017  (4)
July 2017  (1)
June 2017  (1)
May 2017  (7)
March 2017  (1)
December 2016  (1)
October 2016  (5)
September 2016  (2)
August 2016  (4)
July 2016  (2)
June 2016  (2)
May 2016  (6)
April 2016  (4)
March 2016  (1)
February 2016  (4)
January 2016  (1)
December 2015  (4)
November 2015  (2)
October 2015  (2)
September 2015  (1)
August 2015  (1)
July 2015  (3)
June 2015  (2)
April 2015  (5)
March 2015  (4)
February 2015  (2)
January 2015  (4)
December 2014  (4)
November 2014  (3)
October 2014  (4)
September 2014  (4)
August 2014  (3)
July 2014  (5)
June 2014  (9)
May 2014  (9)
April 2014  (12)
March 2014  (2)
February 2014  (1)
January 2014  (3)
November 2013  (3)
October 2013  (1)
September 2013  (2)
July 2013  (4)
June 2013  (3)
May 2013  (1)
April 2013  (1)
March 2013  (2)
February 2013  (6)
January 2013  (1)
September 2012  (1)
August 2012  (1)
July 2012  (2)
May 2012  (1)
March 2012  (1)
January 2012  (1)
December 2011  (1)
November 2011  (3)
October 2011  (1)
September 2011  (1)
August 2011  (2)
Neve | Powered by WordPress
Home
Code base
GNU Linux
Security
Windows Server
WordPress
Donate
