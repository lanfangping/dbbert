#FORMAT=WebAnno TSV 3.3


#Text=Efficient Use of PostgreSQL Indexes | Heroku Dev Center
#Text=Skip NavigationShow navHeroku Dev CenterGet StartedDocumentationChangelogSearchGet StartedNode.jsRuby on RailsRubyPythonJavaPHPGoScalaClojureDocumentationChangelogMoreAdditional ResourcesHomeElementsProductsPricingCareersHelpStatusEventsPodcastsCompliance CenterHeroku BlogHeroku BlogFind out what's new with Heroku on our blog.Visit BlogLog inorSign up
#Text=View categories
#Text=Categories
#Text=Heroku Architecture
#Text=Dynos (app containers)
#Text=Stacks (operating system images)
#Text=Networking & DNS
#Text=Platform Policies
#Text=Platform Principles
#Text=Command Line
#Text=Deployment
#Text=Deploying with Git
#Text=Deploying with Docker
#Text=Deployment Integrations
#Text=Continuous Delivery
#Text=Continuous Integration
#Text=Language Support
#Text=Node.js
#Text=Ruby
#Text=Working with Bundler
#Text=Rails Support
#Text=Python
#Text=Working with Django
#Text=Background Jobs in Python
#Text=Java
#Text=Working with Maven
#Text=Java Database Operations
#Text=Working with the Play Framework
#Text=Java Advanced Topics
#Text=Working with Spring Boot
#Text=PHP
#Text=Go Dependency Management
#Text=Scala
#Text=Clojure
#Text=Databases & Data Management
#Text=Heroku Postgres
#Text=Postgres Basics
#Text=Postgres Performance
#Text=Postgres Data Transfer & Preservation
#Text=Postgres Availability
#Text=Postgres Special Topics
#Text=Heroku Redis
#Text=Apache Kafka on Heroku
#Text=Other Data Stores
#Text=Monitoring & Metrics
#Text=Logging
#Text=App Performance
#Text=Add-ons
#Text=All Add-ons
#Text=Collaboration
#Text=Security
#Text=App Security
#Text=Identities & Authentication
#Text=Compliance
#Text=Heroku Enterprise
#Text=Private Spaces
#Text=Infrastructure Networking
#Text=Enterprise Accounts
#Text=Enterprise Teams
#Text=Heroku Connect (Salesforce sync)
#Text=Single Sign-on (SSO)
#Text=Patterns & Best Practices
#Text=Extending Heroku
#Text=Platform API
#Text=App Webhooks
#Text=Heroku Labs
#Text=Building Add-ons
#Text=Add-on Development Tasks
#Text=Add-on APIs
#Text=Add-on Guidelines & Requirements
#Text=Building CLI Plugins
#Text=Developing Buildpacks
#Text=Dev Center
#Text=Accounts & Billing
#Text=Troubleshooting & Support
#Text=Databases & Data ManagementHeroku PostgresPostgres PerformanceEfficient Use of PostgreSQL Indexes
#Text=Efficient Use of PostgreSQL Indexes
#Text=English — 日本語に切り替える
#Text=Last updated January 25, 2021
#Text=Table of ContentsIndex TypesWhy is my query not using an index?
1-1	0-9	Efficient	
1-2	10-13	Use	
1-3	14-16	of	
1-4	17-27	PostgreSQL	
1-5	28-35	Indexes	
1-6	36-37	|	
1-7	38-44	Heroku	
1-8	45-48	Dev	
1-9	49-55	Center	
1-10	56-60	Skip	
1-11	61-75	NavigationShow	
1-12	76-85	navHeroku	
1-13	86-89	Dev	
1-14	90-99	CenterGet	
1-15	100-138	StartedDocumentationChangelogSearchGet	
1-16	139-157	StartedNode.jsRuby	
1-17	158-160	on	
1-18	161-233	RailsRubyPythonJavaPHPGoScalaClojureDocumentationChangelogMoreAdditional	
1-19	234-311	ResourcesHomeElementsProductsPricingCareersHelpStatusEventsPodcastsCompliance	
1-20	312-324	CenterHeroku	
1-21	325-335	BlogHeroku	
1-22	336-344	BlogFind	
1-23	345-348	out	
1-24	349-355	what's	
1-25	356-359	new	
1-26	360-364	with	
1-27	365-371	Heroku	
1-28	372-374	on	
1-29	375-378	our	
1-30	379-389	blog.Visit	
1-31	390-397	BlogLog	
1-32	398-406	inorSign	
1-33	407-409	up	
1-34	410-414	View	
1-35	415-425	categories	
1-36	426-436	Categories	
1-37	437-443	Heroku	
1-38	444-456	Architecture	
1-39	457-462	Dynos	
1-40	463-464	(	
1-41	464-467	app	
1-42	468-478	containers	
1-43	478-479	)	
1-44	480-486	Stacks	
1-45	487-488	(	
1-46	488-497	operating	
1-47	498-504	system	
1-48	505-511	images	
1-49	511-512	)	
1-50	513-523	Networking	
1-51	524-525	&	
1-52	526-529	DNS	
1-53	530-538	Platform	
1-54	539-547	Policies	
1-55	548-556	Platform	
1-56	557-567	Principles	
1-57	568-575	Command	
1-58	576-580	Line	
1-59	581-591	Deployment	
1-60	592-601	Deploying	
1-61	602-606	with	
1-62	607-610	Git	
1-63	611-620	Deploying	
1-64	621-625	with	
1-65	626-632	Docker	
1-66	633-643	Deployment	
1-67	644-656	Integrations	
1-68	657-667	Continuous	
1-69	668-676	Delivery	
1-70	677-687	Continuous	
1-71	688-699	Integration	
1-72	700-708	Language	
1-73	709-716	Support	
1-74	717-724	Node.js	
1-75	725-729	Ruby	
1-76	730-737	Working	
1-77	738-742	with	
1-78	743-750	Bundler	
1-79	751-756	Rails	
1-80	757-764	Support	
1-81	765-771	Python	
1-82	772-779	Working	
1-83	780-784	with	
1-84	785-791	Django	
1-85	792-802	Background	
1-86	803-807	Jobs	
1-87	808-810	in	
1-88	811-817	Python	
1-89	818-822	Java	
1-90	823-830	Working	
1-91	831-835	with	
1-92	836-841	Maven	
1-93	842-846	Java	
1-94	847-855	Database	
1-95	856-866	Operations	
1-96	867-874	Working	
1-97	875-879	with	
1-98	880-883	the	
1-99	884-888	Play	
1-100	889-898	Framework	
1-101	899-903	Java	
1-102	904-912	Advanced	
1-103	913-919	Topics	
1-104	920-927	Working	
1-105	928-932	with	
1-106	933-939	Spring	
1-107	940-944	Boot	
1-108	945-948	PHP	
1-109	949-951	Go	
1-110	952-962	Dependency	
1-111	963-973	Management	
1-112	974-979	Scala	
1-113	980-987	Clojure	
1-114	988-997	Databases	
1-115	998-999	&	
1-116	1000-1004	Data	
1-117	1005-1015	Management	
1-118	1016-1022	Heroku	
1-119	1023-1031	Postgres	
1-120	1032-1040	Postgres	
1-121	1041-1047	Basics	
1-122	1048-1056	Postgres	
1-123	1057-1068	Performance	
1-124	1069-1077	Postgres	
1-125	1078-1082	Data	
1-126	1083-1091	Transfer	
1-127	1092-1093	&	
1-128	1094-1106	Preservation	
1-129	1107-1115	Postgres	
1-130	1116-1128	Availability	
1-131	1129-1137	Postgres	
1-132	1138-1145	Special	
1-133	1146-1152	Topics	
1-134	1153-1159	Heroku	
1-135	1160-1165	Redis	
1-136	1166-1172	Apache	
1-137	1173-1178	Kafka	
1-138	1179-1181	on	
1-139	1182-1188	Heroku	
1-140	1189-1194	Other	
1-141	1195-1199	Data	
1-142	1200-1206	Stores	
1-143	1207-1217	Monitoring	
1-144	1218-1219	&	
1-145	1220-1227	Metrics	
1-146	1228-1235	Logging	
1-147	1236-1239	App	
1-148	1240-1251	Performance	
1-149	1252-1259	Add-ons	
1-150	1260-1263	All	
1-151	1264-1271	Add-ons	
1-152	1272-1285	Collaboration	
1-153	1286-1294	Security	
1-154	1295-1298	App	
1-155	1299-1307	Security	
1-156	1308-1318	Identities	
1-157	1319-1320	&	
1-158	1321-1335	Authentication	
1-159	1336-1346	Compliance	
1-160	1347-1353	Heroku	
1-161	1354-1364	Enterprise	
1-162	1365-1372	Private	
1-163	1373-1379	Spaces	
1-164	1380-1394	Infrastructure	
1-165	1395-1405	Networking	
1-166	1406-1416	Enterprise	
1-167	1417-1425	Accounts	
1-168	1426-1436	Enterprise	
1-169	1437-1442	Teams	
1-170	1443-1449	Heroku	
1-171	1450-1457	Connect	
1-172	1458-1459	(	
1-173	1459-1469	Salesforce	
1-174	1470-1474	sync	
1-175	1474-1475	)	
1-176	1476-1482	Single	
1-177	1483-1490	Sign-on	
1-178	1491-1492	(	
1-179	1492-1495	SSO	
1-180	1495-1496	)	
1-181	1497-1505	Patterns	
1-182	1506-1507	&	
1-183	1508-1512	Best	
1-184	1513-1522	Practices	
1-185	1523-1532	Extending	
1-186	1533-1539	Heroku	
1-187	1540-1548	Platform	
1-188	1549-1552	API	
1-189	1553-1556	App	
1-190	1557-1565	Webhooks	
1-191	1566-1572	Heroku	
1-192	1573-1577	Labs	
1-193	1578-1586	Building	
1-194	1587-1594	Add-ons	
1-195	1595-1601	Add-on	
1-196	1602-1613	Development	
1-197	1614-1619	Tasks	
1-198	1620-1626	Add-on	
1-199	1627-1631	APIs	
1-200	1632-1638	Add-on	
1-201	1639-1649	Guidelines	
1-202	1650-1651	&	
1-203	1652-1664	Requirements	
1-204	1665-1673	Building	
1-205	1674-1677	CLI	
1-206	1678-1685	Plugins	
1-207	1686-1696	Developing	
1-208	1697-1707	Buildpacks	
1-209	1708-1711	Dev	
1-210	1712-1718	Center	
1-211	1719-1727	Accounts	
1-212	1728-1729	&	
1-213	1730-1737	Billing	
1-214	1738-1753	Troubleshooting	
1-215	1754-1755	&	
1-216	1756-1763	Support	
1-217	1764-1773	Databases	
1-218	1774-1775	&	
1-219	1776-1780	Data	
1-220	1781-1797	ManagementHeroku	
1-221	1798-1814	PostgresPostgres	
1-222	1815-1835	PerformanceEfficient	
1-223	1836-1839	Use	
1-224	1840-1842	of	
1-225	1843-1853	PostgreSQL	
1-226	1854-1861	Indexes	
1-227	1862-1871	Efficient	
1-228	1872-1875	Use	
1-229	1876-1878	of	
1-230	1879-1889	PostgreSQL	
1-231	1890-1897	Indexes	
1-232	1898-1905	English	
1-233	1906-1907	—	
1-234	1908-1911	日本語	
1-235	1911-1912	に	
1-236	1912-1913	切	
1-237	1913-1914	り	
1-238	1914-1915	替	
1-239	1915-1917	える	
1-240	1918-1922	Last	
1-241	1923-1930	updated	
1-242	1931-1938	January	
1-243	1939-1941	25	
1-244	1941-1942	,	
1-245	1943-1947	2021	
1-246	1948-1953	Table	
1-247	1954-1956	of	
1-248	1957-1970	ContentsIndex	
1-249	1971-1979	TypesWhy	
1-250	1980-1982	is	
1-251	1983-1985	my	
1-252	1986-1991	query	
1-253	1992-1995	not	
1-254	1996-2001	using	
1-255	2002-2004	an	
1-256	2005-2010	index	
1-257	2010-2011	?	

#Text=Partial IndexesExpression IndexesUnique IndexesMulti-column IndexesB-Trees and sortingManaging and Maintaining indexes
#Text=There are many types of indexes in Postgres, as well as different ways to use them.
2-1	2011-2018	Partial	
2-2	2019-2036	IndexesExpression	
2-3	2037-2050	IndexesUnique	
2-4	2051-2070	IndexesMulti-column	
2-5	2071-2085	IndexesB-Trees	
2-6	2086-2089	and	
2-7	2090-2105	sortingManaging	
2-8	2106-2109	and	
2-9	2110-2121	Maintaining	
2-10	2122-2129	indexes	
2-11	2130-2135	There	
2-12	2136-2139	are	
2-13	2140-2144	many	
2-14	2145-2150	types	
2-15	2151-2153	of	
2-16	2154-2161	indexes	
2-17	2162-2164	in	
2-18	2165-2173	Postgres	
2-19	2173-2174	,	
2-20	2175-2177	as	
2-21	2178-2182	well	
2-22	2183-2185	as	
2-23	2186-2195	different	
2-24	2196-2200	ways	
2-25	2201-2203	to	
2-26	2204-2207	use	
2-27	2208-2212	them	
2-28	2212-2213	.	

#Text=In this article we give an overview of the types of indexes available, and explain different ways of using and maintaining the most common index type: B-Trees.
3-1	2214-2216	In	
3-2	2217-2221	this	
3-3	2222-2229	article	
3-4	2230-2232	we	
3-5	2233-2237	give	
3-6	2238-2240	an	
3-7	2241-2249	overview	
3-8	2250-2252	of	
3-9	2253-2256	the	
3-10	2257-2262	types	
3-11	2263-2265	of	
3-12	2266-2273	indexes	
3-13	2274-2283	available	
3-14	2283-2284	,	
3-15	2285-2288	and	
3-16	2289-2296	explain	
3-17	2297-2306	different	
3-18	2307-2311	ways	
3-19	2312-2314	of	
3-20	2315-2320	using	
3-21	2321-2324	and	
3-22	2325-2336	maintaining	
3-23	2337-2340	the	
3-24	2341-2345	most	
3-25	2346-2352	common	
3-26	2353-2358	index	
3-27	2359-2363	type	
3-28	2363-2364	:	
3-29	2365-2372	B-Trees	
3-30	2372-2373	.	

#Text=An index is a way to efficiently retrieve a relatively small number of rows from a table.
4-1	2374-2376	An	
4-2	2377-2382	index	
4-3	2383-2385	is	
4-4	2386-2387	a	
4-5	2388-2391	way	
4-6	2392-2394	to	
4-7	2395-2406	efficiently	
4-8	2407-2415	retrieve	
4-9	2416-2417	a	
4-10	2418-2428	relatively	
4-11	2429-2434	small	
4-12	2435-2441	number	
4-13	2442-2444	of	
4-14	2445-2449	rows	
4-15	2450-2454	from	
4-16	2455-2456	a	
4-17	2457-2462	table	
4-18	2462-2463	.	

#Text=It is only useful if the number of rows to be retrieved from a table is relatively small (i.e. the condition for retrieving rows - the WHERE clause - is selective).
5-1	2464-2466	It	
5-2	2467-2469	is	
5-3	2470-2474	only	
5-4	2475-2481	useful	
5-5	2482-2484	if	
5-6	2485-2488	the	
5-7	2489-2495	number	
5-8	2496-2498	of	
5-9	2499-2503	rows	
5-10	2504-2506	to	
5-11	2507-2509	be	
5-12	2510-2519	retrieved	
5-13	2520-2524	from	
5-14	2525-2526	a	
5-15	2527-2532	table	
5-16	2533-2535	is	
5-17	2536-2546	relatively	
5-18	2547-2552	small	
5-19	2553-2554	(	
5-20	2554-2557	i.e	
5-21	2557-2558	.	
5-22	2559-2562	the	
5-23	2563-2572	condition	
5-24	2573-2576	for	
5-25	2577-2587	retrieving	
5-26	2588-2592	rows	
5-27	2593-2594	-	
5-28	2595-2598	the	
5-29	2599-2604	WHERE	
5-30	2605-2611	clause	
5-31	2612-2613	-	
5-32	2614-2616	is	
5-33	2617-2626	selective	
5-34	2626-2627	)	
5-35	2627-2628	.	

#Text=B-Tree indexes are also useful for avoiding sorting.
6-1	2629-2635	B-Tree	
6-2	2636-2643	indexes	
6-3	2644-2647	are	
6-4	2648-2652	also	
6-5	2653-2659	useful	
6-6	2660-2663	for	
6-7	2664-2672	avoiding	
6-8	2673-2680	sorting	
6-9	2680-2681	.	

#Text=Index Types
#Text=Postgres supports many different index types:
#Text=B-Tree is the default that you get when you do CREATE INDEX.
7-1	2682-2687	Index	
7-2	2688-2693	Types	
7-3	2694-2702	Postgres	
7-4	2703-2711	supports	
7-5	2712-2716	many	
7-6	2717-2726	different	
7-7	2727-2732	index	
7-8	2733-2738	types	
7-9	2738-2739	:	
7-10	2740-2746	B-Tree	
7-11	2747-2749	is	
7-12	2750-2753	the	
7-13	2754-2761	default	
7-14	2762-2766	that	
7-15	2767-2770	you	
7-16	2771-2774	get	
7-17	2775-2779	when	
7-18	2780-2783	you	
7-19	2784-2786	do	
7-20	2787-2793	CREATE	
7-21	2794-2799	INDEX	
7-22	2799-2800	.	

#Text=Virtually all databases will have some B-tree indexes.
8-1	2801-2810	Virtually	
8-2	2811-2814	all	
8-3	2815-2824	databases	
8-4	2825-2829	will	
8-5	2830-2834	have	
8-6	2835-2839	some	
8-7	2840-2846	B-tree	
8-8	2847-2854	indexes	
8-9	2854-2855	.	

#Text=B-trees attempt to remain balanced, with the amount of data in each branch of the tree being roughly the same.
9-1	2856-2863	B-trees	
9-2	2864-2871	attempt	
9-3	2872-2874	to	
9-4	2875-2881	remain	
9-5	2882-2890	balanced	
9-6	2890-2891	,	
9-7	2892-2896	with	
9-8	2897-2900	the	
9-9	2901-2907	amount	
9-10	2908-2910	of	
9-11	2911-2915	data	
9-12	2916-2918	in	
9-13	2919-2923	each	
9-14	2924-2930	branch	
9-15	2931-2933	of	
9-16	2934-2937	the	
9-17	2938-2942	tree	
9-18	2943-2948	being	
9-19	2949-2956	roughly	
9-20	2957-2960	the	
9-21	2961-2965	same	
9-22	2965-2966	.	

#Text=Therefore the number of levels that must be traversed to find rows is always in the same ballpark.
10-1	2967-2976	Therefore	
10-2	2977-2980	the	
10-3	2981-2987	number	
10-4	2988-2990	of	
10-5	2991-2997	levels	
10-6	2998-3002	that	
10-7	3003-3007	must	
10-8	3008-3010	be	
10-9	3011-3020	traversed	
10-10	3021-3023	to	
10-11	3024-3028	find	
10-12	3029-3033	rows	
10-13	3034-3036	is	
10-14	3037-3043	always	
10-15	3044-3046	in	
10-16	3047-3050	the	
10-17	3051-3055	same	
10-18	3056-3064	ballpark	
10-19	3064-3065	.	

#Text=B-tree indexes can be used for equality and range queries efficiently.
11-1	3066-3072	B-tree	
11-2	3073-3080	indexes	
11-3	3081-3084	can	
11-4	3085-3087	be	
11-5	3088-3092	used	
11-6	3093-3096	for	
11-7	3097-3105	equality	
11-8	3106-3109	and	
11-9	3110-3115	range	
11-10	3116-3123	queries	
11-11	3124-3135	efficiently	
11-12	3135-3136	.	

#Text=They can operate against all datatypes, and can also be used to retrieve NULL values.
12-1	3137-3141	They	
12-2	3142-3145	can	
12-3	3146-3153	operate	
12-4	3154-3161	against	
12-5	3162-3165	all	
12-6	3166-3175	datatypes	
12-7	3175-3176	,	
12-8	3177-3180	and	
12-9	3181-3184	can	
12-10	3185-3189	also	
12-11	3190-3192	be	
12-12	3193-3197	used	
12-13	3198-3200	to	
12-14	3201-3209	retrieve	
12-15	3210-3214	NULL	
12-16	3215-3221	values	
12-17	3221-3222	.	

#Text=B-trees are designed to work very well with caching, even when only partially cached.
13-1	3223-3230	B-trees	
13-2	3231-3234	are	
13-3	3235-3243	designed	
13-4	3244-3246	to	
13-5	3247-3251	work	
13-6	3252-3256	very	
13-7	3257-3261	well	
13-8	3262-3266	with	
13-9	3267-3274	caching	
13-10	3274-3275	,	
13-11	3276-3280	even	
13-12	3281-3285	when	
13-13	3286-3290	only	
13-14	3291-3300	partially	
13-15	3301-3307	cached	
13-16	3307-3308	.	

#Text=Hash Indexes pre-Postgres 10 are only useful for equality comparisons, but you pretty much never want to use them since they are not transaction safe, need to be manually rebuilt after crashes, and are not replicated to followers, so the advantage over using a B-Tree is rather small.
14-1	3309-3313	Hash	
14-2	3314-3321	Indexes	
14-3	3322-3334	pre-Postgres	
14-4	3335-3337	10	
14-5	3338-3341	are	
14-6	3342-3346	only	
14-7	3347-3353	useful	
14-8	3354-3357	for	
14-9	3358-3366	equality	
14-10	3367-3378	comparisons	
14-11	3378-3379	,	
14-12	3380-3383	but	
14-13	3384-3387	you	
14-14	3388-3394	pretty	
14-15	3395-3399	much	
14-16	3400-3405	never	
14-17	3406-3410	want	
14-18	3411-3413	to	
14-19	3414-3417	use	
14-20	3418-3422	them	
14-21	3423-3428	since	
14-22	3429-3433	they	
14-23	3434-3437	are	
14-24	3438-3441	not	
14-25	3442-3453	transaction	
14-26	3454-3458	safe	
14-27	3458-3459	,	
14-28	3460-3464	need	
14-29	3465-3467	to	
14-30	3468-3470	be	
14-31	3471-3479	manually	
14-32	3480-3487	rebuilt	
14-33	3488-3493	after	
14-34	3494-3501	crashes	
14-35	3501-3502	,	
14-36	3503-3506	and	
14-37	3507-3510	are	
14-38	3511-3514	not	
14-39	3515-3525	replicated	
14-40	3526-3528	to	
14-41	3529-3538	followers	
14-42	3538-3539	,	
14-43	3540-3542	so	
14-44	3543-3546	the	
14-45	3547-3556	advantage	
14-46	3557-3561	over	
14-47	3562-3567	using	
14-48	3568-3569	a	
14-49	3570-3576	B-Tree	
14-50	3577-3579	is	
14-51	3580-3586	rather	
14-52	3587-3592	small	
14-53	3592-3593	.	

#Text=In Postgres 10 and above, hash indexes are now write-ahead logged and replicated to followers.
15-1	3594-3596	In	
15-2	3597-3605	Postgres	
15-3	3606-3608	10	
15-4	3609-3612	and	
15-5	3613-3618	above	
15-6	3618-3619	,	
15-7	3620-3624	hash	
15-8	3625-3632	indexes	
15-9	3633-3636	are	
15-10	3637-3640	now	
15-11	3641-3652	write-ahead	
15-12	3653-3659	logged	
15-13	3660-3663	and	
15-14	3664-3674	replicated	
15-15	3675-3677	to	
15-16	3678-3687	followers	
15-17	3687-3688	.	

#Text=Generalized Inverted Indexes (GIN) are useful when an index must map many values to one row, whereas B-Tree indexes are optimized for when a row has a single key value.
16-1	3689-3700	Generalized	
16-2	3701-3709	Inverted	
16-3	3710-3717	Indexes	
16-4	3718-3719	(	
16-5	3719-3722	GIN	
16-6	3722-3723	)	
16-7	3724-3727	are	
16-8	3728-3734	useful	
16-9	3735-3739	when	
16-10	3740-3742	an	
16-11	3743-3748	index	
16-12	3749-3753	must	
16-13	3754-3757	map	
16-14	3758-3762	many	
16-15	3763-3769	values	
16-16	3770-3772	to	
16-17	3773-3776	one	
16-18	3777-3780	row	
16-19	3780-3781	,	
16-20	3782-3789	whereas	
16-21	3790-3796	B-Tree	
16-22	3797-3804	indexes	
16-23	3805-3808	are	
16-24	3809-3818	optimized	
16-25	3819-3822	for	
16-26	3823-3827	when	
16-27	3828-3829	a	
16-28	3830-3833	row	
16-29	3834-3837	has	
16-30	3838-3839	a	
16-31	3840-3846	single	
16-32	3847-3850	key	
16-33	3851-3856	value	
16-34	3856-3857	.	

#Text=GINs are good for indexing array values as well as for implementing full-text search.
17-1	3858-3862	GINs	
17-2	3863-3866	are	
17-3	3867-3871	good	
17-4	3872-3875	for	
17-5	3876-3884	indexing	
17-6	3885-3890	array	
17-7	3891-3897	values	
17-8	3898-3900	as	
17-9	3901-3905	well	
17-10	3906-3908	as	
17-11	3909-3912	for	
17-12	3913-3925	implementing	
17-13	3926-3935	full-text	
17-14	3936-3942	search	
17-15	3942-3943	.	

#Text=Generalized Search Tree (GiST) indexes allow you to build general balanced tree structures, and can be used for operations beyond equality and range comparisons.
18-1	3944-3955	Generalized	
18-2	3956-3962	Search	
18-3	3963-3967	Tree	
18-4	3968-3969	(	
18-5	3969-3973	GiST	
18-6	3973-3974	)	
18-7	3975-3982	indexes	
18-8	3983-3988	allow	
18-9	3989-3992	you	
18-10	3993-3995	to	
18-11	3996-4001	build	
18-12	4002-4009	general	
18-13	4010-4018	balanced	
18-14	4019-4023	tree	
18-15	4024-4034	structures	
18-16	4034-4035	,	
18-17	4036-4039	and	
18-18	4040-4043	can	
18-19	4044-4046	be	
18-20	4047-4051	used	
18-21	4052-4055	for	
18-22	4056-4066	operations	
18-23	4067-4073	beyond	
18-24	4074-4082	equality	
18-25	4083-4086	and	
18-26	4087-4092	range	
18-27	4093-4104	comparisons	
18-28	4104-4105	.	

#Text=They are used to index the geometric data types, as well as full-text search.
19-1	4106-4110	They	
19-2	4111-4114	are	
19-3	4115-4119	used	
19-4	4120-4122	to	
19-5	4123-4128	index	
19-6	4129-4132	the	
19-7	4133-4142	geometric	
19-8	4143-4147	data	
19-9	4148-4153	types	
19-10	4153-4154	,	
19-11	4155-4157	as	
19-12	4158-4162	well	
19-13	4163-4165	as	
19-14	4166-4175	full-text	
19-15	4176-4182	search	
19-16	4182-4183	.	

#Text=This article is about how to get the most out of default B-Tree indexes.
20-1	4184-4188	This	
20-2	4189-4196	article	
20-3	4197-4199	is	
20-4	4200-4205	about	
20-5	4206-4209	how	
20-6	4210-4212	to	
20-7	4213-4216	get	
20-8	4217-4220	the	
20-9	4221-4225	most	
20-10	4226-4229	out	
20-11	4230-4232	of	
20-12	4233-4240	default	
20-13	4241-4247	B-Tree	
20-14	4248-4255	indexes	
20-15	4255-4256	.	

#Text=For examples of GIN and GiST index usage, refer to the contrib packages.
21-1	4257-4260	For	
21-2	4261-4269	examples	
21-3	4270-4272	of	
21-4	4273-4276	GIN	
21-5	4277-4280	and	
21-6	4281-4285	GiST	
21-7	4286-4291	index	
21-8	4292-4297	usage	
21-9	4297-4298	,	
21-10	4299-4304	refer	
21-11	4305-4307	to	
21-12	4308-4311	the	
21-13	4312-4319	contrib	
21-14	4320-4328	packages	
21-15	4328-4329	.	

#Text=Why is my query not using an index?
22-1	4330-4333	Why	
22-2	4334-4336	is	
22-3	4337-4339	my	
22-4	4340-4345	query	
22-5	4346-4349	not	
22-6	4350-4355	using	
22-7	4356-4358	an	
22-8	4359-4364	index	
22-9	4364-4365	?	

#Text=There are many reasons why the Postgres planner may choose to not use an index.
23-1	4366-4371	There	
23-2	4372-4375	are	
23-3	4376-4380	many	
23-4	4381-4388	reasons	
23-5	4389-4392	why	
23-6	4393-4396	the	
23-7	4397-4405	Postgres	
23-8	4406-4413	planner	
23-9	4414-4417	may	
23-10	4418-4424	choose	
23-11	4425-4427	to	
23-12	4428-4431	not	
23-13	4432-4435	use	
23-14	4436-4438	an	
23-15	4439-4444	index	
23-16	4444-4445	.	

#Text=Most of the time, the planner chooses correctly, even if it isn’t obvious why.
24-1	4446-4450	Most	
24-2	4451-4453	of	
24-3	4454-4457	the	
24-4	4458-4462	time	
24-5	4462-4463	,	
24-6	4464-4467	the	
24-7	4468-4475	planner	
24-8	4476-4483	chooses	
24-9	4484-4493	correctly	
24-10	4493-4494	,	
24-11	4495-4499	even	
24-12	4500-4502	if	
24-13	4503-4505	it	
24-14	4506-4509	isn	
24-15	4509-4510	’	
24-16	4510-4511	t	
24-17	4512-4519	obvious	
24-18	4520-4523	why	
24-19	4523-4524	.	

#Text=It’s okay if the same query uses an index scan on some occasions but not others.
25-1	4525-4527	It	
25-2	4527-4528	’	
25-3	4528-4529	s	
25-4	4530-4534	okay	
25-5	4535-4537	if	
25-6	4538-4541	the	
25-7	4542-4546	same	
25-8	4547-4552	query	
25-9	4553-4557	uses	
25-10	4558-4560	an	
25-11	4561-4566	index	
25-12	4567-4571	scan	
25-13	4572-4574	on	
25-14	4575-4579	some	
25-15	4580-4589	occasions	
25-16	4590-4593	but	
25-17	4594-4597	not	
25-18	4598-4604	others	
25-19	4604-4605	.	

#Text=The number of rows retrieved from the table may vary based on the particular constant values the query retrieves.
26-1	4606-4609	The	
26-2	4610-4616	number	
26-3	4617-4619	of	
26-4	4620-4624	rows	
26-5	4625-4634	retrieved	
26-6	4635-4639	from	
26-7	4640-4643	the	
26-8	4644-4649	table	
26-9	4650-4653	may	
26-10	4654-4658	vary	
26-11	4659-4664	based	
26-12	4665-4667	on	
26-13	4668-4671	the	
26-14	4672-4682	particular	
26-15	4683-4691	constant	
26-16	4692-4698	values	
26-17	4699-4702	the	
26-18	4703-4708	query	
26-19	4709-4718	retrieves	
26-20	4718-4719	.	

#Text=So, for example, it might be correct for the query planner to use an index for the query select * from foo where bar = 1, and yet not use one for the query select * from foo where bar = 2, if there happened to be far more rows with “bar” values of 2.
27-1	4720-4722	So	
27-2	4722-4723	,	
27-3	4724-4727	for	
27-4	4728-4735	example	
27-5	4735-4736	,	
27-6	4737-4739	it	
27-7	4740-4745	might	
27-8	4746-4748	be	
27-9	4749-4756	correct	
27-10	4757-4760	for	
27-11	4761-4764	the	
27-12	4765-4770	query	
27-13	4771-4778	planner	
27-14	4779-4781	to	
27-15	4782-4785	use	
27-16	4786-4788	an	
27-17	4789-4794	index	
27-18	4795-4798	for	
27-19	4799-4802	the	
27-20	4803-4808	query	
27-21	4809-4815	select	
27-22	4816-4817	*	
27-23	4818-4822	from	
27-24	4823-4826	foo	
27-25	4827-4832	where	
27-26	4833-4836	bar	
27-27	4837-4838	=	
27-28	4839-4840	1	
27-29	4840-4841	,	
27-30	4842-4845	and	
27-31	4846-4849	yet	
27-32	4850-4853	not	
27-33	4854-4857	use	
27-34	4858-4861	one	
27-35	4862-4865	for	
27-36	4866-4869	the	
27-37	4870-4875	query	
27-38	4876-4882	select	
27-39	4883-4884	*	
27-40	4885-4889	from	
27-41	4890-4893	foo	
27-42	4894-4899	where	
27-43	4900-4903	bar	
27-44	4904-4905	=	
27-45	4906-4907	2	
27-46	4907-4908	,	
27-47	4909-4911	if	
27-48	4912-4917	there	
27-49	4918-4926	happened	
27-50	4927-4929	to	
27-51	4930-4932	be	
27-52	4933-4936	far	
27-53	4937-4941	more	
27-54	4942-4946	rows	
27-55	4947-4951	with	
27-56	4952-4953	“	
27-57	4953-4956	bar	
27-58	4956-4957	”	
27-59	4958-4964	values	
27-60	4965-4967	of	
27-61	4968-4969	2	
27-62	4969-4970	.	

#Text=When this happens, a sequential scan is actually most likely much faster than an index scan, so the query planner has in fact correctly judged that the cost of performing the query that way is lower.
28-1	4971-4975	When	
28-2	4976-4980	this	
28-3	4981-4988	happens	
28-4	4988-4989	,	
28-5	4990-4991	a	
28-6	4992-5002	sequential	
28-7	5003-5007	scan	
28-8	5008-5010	is	
28-9	5011-5019	actually	
28-10	5020-5024	most	
28-11	5025-5031	likely	
28-12	5032-5036	much	
28-13	5037-5043	faster	
28-14	5044-5048	than	
28-15	5049-5051	an	
28-16	5052-5057	index	
28-17	5058-5062	scan	
28-18	5062-5063	,	
28-19	5064-5066	so	
28-20	5067-5070	the	
28-21	5071-5076	query	
28-22	5077-5084	planner	
28-23	5085-5088	has	
28-24	5089-5091	in	
28-25	5092-5096	fact	
28-26	5097-5106	correctly	
28-27	5107-5113	judged	
28-28	5114-5118	that	
28-29	5119-5122	the	
28-30	5123-5127	cost	
28-31	5128-5130	of	
28-32	5131-5141	performing	
28-33	5142-5145	the	
28-34	5146-5151	query	
28-35	5152-5156	that	
28-36	5157-5160	way	
28-37	5161-5163	is	
28-38	5164-5169	lower	
28-39	5169-5170	.	

#Text=Partial Indexes
#Text=A partial index covers just a subset of a table’s data.
29-1	5171-5178	Partial	
29-2	5179-5186	Indexes	
29-3	5187-5188	A	
29-4	5189-5196	partial	
29-5	5197-5202	index	
29-6	5203-5209	covers	
29-7	5210-5214	just	
29-8	5215-5216	a	
29-9	5217-5223	subset	
29-10	5224-5226	of	
29-11	5227-5228	a	
29-12	5229-5234	table	
29-13	5234-5235	’	
29-14	5235-5236	s	
29-15	5237-5241	data	
29-16	5241-5242	.	

#Text=It is an index with a WHERE clause.
30-1	5243-5245	It	
30-2	5246-5248	is	
30-3	5249-5251	an	
30-4	5252-5257	index	
30-5	5258-5262	with	
30-6	5263-5264	a	
30-7	5265-5270	WHERE	
30-8	5271-5277	clause	
30-9	5277-5278	.	

#Text=The idea is to increase the efficiency of the index by reducing its size.
31-1	5279-5282	The	
31-2	5283-5287	idea	
31-3	5288-5290	is	
31-4	5291-5293	to	
31-5	5294-5302	increase	
31-6	5303-5306	the	
31-7	5307-5317	efficiency	
31-8	5318-5320	of	
31-9	5321-5324	the	
31-10	5325-5330	index	
31-11	5331-5333	by	
31-12	5334-5342	reducing	
31-13	5343-5346	its	
31-14	5347-5351	size	
31-15	5351-5352	.	

#Text=A smaller index takes less storage, is easier to maintain, and is faster to scan.
32-1	5353-5354	A	
32-2	5355-5362	smaller	
32-3	5363-5368	index	
32-4	5369-5374	takes	
32-5	5375-5379	less	
32-6	5380-5387	storage	
32-7	5387-5388	,	
32-8	5389-5391	is	
32-9	5392-5398	easier	
32-10	5399-5401	to	
32-11	5402-5410	maintain	
32-12	5410-5411	,	
32-13	5412-5415	and	
32-14	5416-5418	is	
32-15	5419-5425	faster	
32-16	5426-5428	to	
32-17	5429-5433	scan	
32-18	5433-5434	.	

#Text=For example, suppose you allow users to flag comments on your site, which in turn sets the flagged boolean to true.
33-1	5435-5438	For	
33-2	5439-5446	example	
33-3	5446-5447	,	
33-4	5448-5455	suppose	
33-5	5456-5459	you	
33-6	5460-5465	allow	
33-7	5466-5471	users	
33-8	5472-5474	to	
33-9	5475-5479	flag	
33-10	5480-5488	comments	
33-11	5489-5491	on	
33-12	5492-5496	your	
33-13	5497-5501	site	
33-14	5501-5502	,	
33-15	5503-5508	which	
33-16	5509-5511	in	
33-17	5512-5516	turn	
33-18	5517-5521	sets	
33-19	5522-5525	the	
33-20	5526-5533	flagged	
33-21	5534-5541	boolean	
33-22	5542-5544	to	
33-23	5545-5549	true	
33-24	5549-5550	.	

#Text=You then process flagged comments in batches.
34-1	5551-5554	You	
34-2	5555-5559	then	
34-3	5560-5567	process	
34-4	5568-5575	flagged	
34-5	5576-5584	comments	
34-6	5585-5587	in	
34-7	5588-5595	batches	
34-8	5595-5596	.	

#Text=You may want to create an index like so:
#Text=CREATE INDEX articles_flagged_created_at_index ON articles(created_at) WHERE flagged IS TRUE;
#Text=This index will remain fairly small, and can also be used along other indexes on the more complex queries that may require it.
35-1	5597-5600	You	
35-2	5601-5604	may	
35-3	5605-5609	want	
35-4	5610-5612	to	
35-5	5613-5619	create	
35-6	5620-5622	an	
35-7	5623-5628	index	
35-8	5629-5633	like	
35-9	5634-5636	so	
35-10	5636-5637	:	
35-11	5638-5644	CREATE	
35-12	5645-5650	INDEX	
35-13	5651-5684	articles_flagged_created_at_index	
35-14	5685-5687	ON	
35-15	5688-5696	articles	
35-16	5696-5697	(	
35-17	5697-5707	created_at	
35-18	5707-5708	)	
35-19	5709-5714	WHERE	
35-20	5715-5722	flagged	
35-21	5723-5725	IS	
35-22	5726-5730	TRUE	
35-23	5730-5731	;	
35-24	5732-5736	This	
35-25	5737-5742	index	
35-26	5743-5747	will	
35-27	5748-5754	remain	
35-28	5755-5761	fairly	
35-29	5762-5767	small	
35-30	5767-5768	,	
35-31	5769-5772	and	
35-32	5773-5776	can	
35-33	5777-5781	also	
35-34	5782-5784	be	
35-35	5785-5789	used	
35-36	5790-5795	along	
35-37	5796-5801	other	
35-38	5802-5809	indexes	
35-39	5810-5812	on	
35-40	5813-5816	the	
35-41	5817-5821	more	
35-42	5822-5829	complex	
35-43	5830-5837	queries	
35-44	5838-5842	that	
35-45	5843-5846	may	
35-46	5847-5854	require	
35-47	5855-5857	it	
35-48	5857-5858	.	

#Text=Expression Indexes
#Text=Expression indexes are useful for queries that match on some function or modification of your data.
36-1	5859-5869	Expression	
36-2	5870-5877	Indexes	
36-3	5878-5888	Expression	
36-4	5889-5896	indexes	
36-5	5897-5900	are	
36-6	5901-5907	useful	
36-7	5908-5911	for	
36-8	5912-5919	queries	
36-9	5920-5924	that	
36-10	5925-5930	match	
36-11	5931-5933	on	
36-12	5934-5938	some	
36-13	5939-5947	function	
36-14	5948-5950	or	
36-15	5951-5963	modification	
36-16	5964-5966	of	
36-17	5967-5971	your	
36-18	5972-5976	data	
36-19	5976-5977	.	

#Text=Postgres allows you to index the result of that function so that searches become as efficient as searching by raw data values.
37-1	5978-5986	Postgres	
37-2	5987-5993	allows	
37-3	5994-5997	you	
37-4	5998-6000	to	
37-5	6001-6006	index	
37-6	6007-6010	the	
37-7	6011-6017	result	
37-8	6018-6020	of	
37-9	6021-6025	that	
37-10	6026-6034	function	
37-11	6035-6037	so	
37-12	6038-6042	that	
37-13	6043-6051	searches	
37-14	6052-6058	become	
37-15	6059-6061	as	
37-16	6062-6071	efficient	
37-17	6072-6074	as	
37-18	6075-6084	searching	
37-19	6085-6087	by	
37-20	6088-6091	raw	
37-21	6092-6096	data	
37-22	6097-6103	values	
37-23	6103-6104	.	

#Text=For example, you may require users to store their email addresses for signing in, but you want case insensitive authentication.
38-1	6105-6108	For	
38-2	6109-6116	example	
38-3	6116-6117	,	
38-4	6118-6121	you	
38-5	6122-6125	may	
38-6	6126-6133	require	
38-7	6134-6139	users	
38-8	6140-6142	to	
38-9	6143-6148	store	
38-10	6149-6154	their	
38-11	6155-6160	email	
38-12	6161-6170	addresses	
38-13	6171-6174	for	
38-14	6175-6182	signing	
38-15	6183-6185	in	
38-16	6185-6186	,	
38-17	6187-6190	but	
38-18	6191-6194	you	
38-19	6195-6199	want	
38-20	6200-6204	case	
38-21	6205-6216	insensitive	
38-22	6217-6231	authentication	
38-23	6231-6232	.	

#Text=In that case it’s possible to store the email address as is, but do searches on WHERE lower(email) = '<lowercased-email>'.
39-1	6233-6235	In	
39-2	6236-6240	that	
39-3	6241-6245	case	
39-4	6246-6248	it	
39-5	6248-6249	’	
39-6	6249-6250	s	
39-7	6251-6259	possible	
39-8	6260-6262	to	
39-9	6263-6268	store	
39-10	6269-6272	the	
39-11	6273-6278	email	
39-12	6279-6286	address	
39-13	6287-6289	as	
39-14	6290-6292	is	
39-15	6292-6293	,	
39-16	6294-6297	but	
39-17	6298-6300	do	
39-18	6301-6309	searches	
39-19	6310-6312	on	
39-20	6313-6318	WHERE	
39-21	6319-6324	lower	
39-22	6324-6325	(	
39-23	6325-6330	email	
39-24	6330-6331	)	
39-25	6332-6333	=	
39-26	6334-6335	'	
39-27	6335-6336	<	
39-28	6336-6352	lowercased-email	
39-29	6352-6353	>	
39-30	6353-6354	'	
39-31	6354-6355	.	

#Text=The only way to use an index in such a query is with an expression index like so:
#Text=CREATE INDEX users_lower_email ON users(lower(email));
#Text=Another common example is for finding rows for a given date, where we’ve stored timestamps in a datetime field but want to find them by a date casted value.
40-1	6356-6359	The	
40-2	6360-6364	only	
40-3	6365-6368	way	
40-4	6369-6371	to	
40-5	6372-6375	use	
40-6	6376-6378	an	
40-7	6379-6384	index	
40-8	6385-6387	in	
40-9	6388-6392	such	
40-10	6393-6394	a	
40-11	6395-6400	query	
40-12	6401-6403	is	
40-13	6404-6408	with	
40-14	6409-6411	an	
40-15	6412-6422	expression	
40-16	6423-6428	index	
40-17	6429-6433	like	
40-18	6434-6436	so	
40-19	6436-6437	:	
40-20	6438-6444	CREATE	
40-21	6445-6450	INDEX	
40-22	6451-6468	users_lower_email	
40-23	6469-6471	ON	
40-24	6472-6477	users	
40-25	6477-6478	(	
40-26	6478-6483	lower	
40-27	6483-6484	(	
40-28	6484-6489	email	
40-29	6489-6490	)	
40-30	6490-6491	)	
40-31	6491-6492	;	
40-32	6493-6500	Another	
40-33	6501-6507	common	
40-34	6508-6515	example	
40-35	6516-6518	is	
40-36	6519-6522	for	
40-37	6523-6530	finding	
40-38	6531-6535	rows	
40-39	6536-6539	for	
40-40	6540-6541	a	
40-41	6542-6547	given	
40-42	6548-6552	date	
40-43	6552-6553	,	
40-44	6554-6559	where	
40-45	6560-6562	we	
40-46	6562-6563	’	
40-47	6563-6565	ve	
40-48	6566-6572	stored	
40-49	6573-6583	timestamps	
40-50	6584-6586	in	
40-51	6587-6588	a	
40-52	6589-6597	datetime	
40-53	6598-6603	field	
40-54	6604-6607	but	
40-55	6608-6612	want	
40-56	6613-6615	to	
40-57	6616-6620	find	
40-58	6621-6625	them	
40-59	6626-6628	by	
40-60	6629-6630	a	
40-61	6631-6635	date	
40-62	6636-6642	casted	
40-63	6643-6648	value	
40-64	6648-6649	.	

#Text=An index like CREATE INDEX articles_day ON articles ( date(published_at) ) can be used by a query containing WHERE date(articles.published_at) = date('2011-03-07').
41-1	6650-6652	An	
41-2	6653-6658	index	
41-3	6659-6663	like	
41-4	6664-6670	CREATE	
41-5	6671-6676	INDEX	
41-6	6677-6689	articles_day	
41-7	6690-6692	ON	
41-8	6693-6701	articles	
41-9	6702-6703	(	
41-10	6704-6708	date	
41-11	6708-6709	(	
41-12	6709-6721	published_at	
41-13	6721-6722	)	
41-14	6723-6724	)	
41-15	6725-6728	can	
41-16	6729-6731	be	
41-17	6732-6736	used	
41-18	6737-6739	by	
41-19	6740-6741	a	
41-20	6742-6747	query	
41-21	6748-6758	containing	
41-22	6759-6764	WHERE	
41-23	6765-6769	date	
41-24	6769-6770	(	
41-25	6770-6791	articles.published_at	
41-26	6791-6792	)	
41-27	6793-6794	=	
41-28	6795-6799	date	
41-29	6799-6800	(	
41-30	6800-6801	'	
41-31	6801-6805	2011	
41-32	6805-6806	-	
41-33	6806-6808	03	
41-34	6808-6809	-	
41-35	6809-6811	07	
41-36	6811-6812	'	
41-37	6812-6813	)	
41-38	6813-6814	.	

#Text=Unique Indexes
#Text=A unique index guarantees that the table won’t have more than one row with the same value.
42-1	6815-6821	Unique	
42-2	6822-6829	Indexes	
42-3	6830-6831	A	
42-4	6832-6838	unique	
42-5	6839-6844	index	
42-6	6845-6855	guarantees	
42-7	6856-6860	that	
42-8	6861-6864	the	
42-9	6865-6870	table	
42-10	6871-6874	won	
42-11	6874-6875	’	
42-12	6875-6876	t	
42-13	6877-6881	have	
42-14	6882-6886	more	
42-15	6887-6891	than	
42-16	6892-6895	one	
42-17	6896-6899	row	
42-18	6900-6904	with	
42-19	6905-6908	the	
42-20	6909-6913	same	
42-21	6914-6919	value	
42-22	6919-6920	.	

#Text=It’s advantageous to create unique indexes for two reasons: data integrity and performance.
43-1	6921-6923	It	
43-2	6923-6924	’	
43-3	6924-6925	s	
43-4	6926-6938	advantageous	
43-5	6939-6941	to	
43-6	6942-6948	create	
43-7	6949-6955	unique	
43-8	6956-6963	indexes	
43-9	6964-6967	for	
43-10	6968-6971	two	
43-11	6972-6979	reasons	
43-12	6979-6980	:	
43-13	6981-6985	data	
43-14	6986-6995	integrity	
43-15	6996-6999	and	
43-16	7000-7011	performance	
43-17	7011-7012	.	

#Text=Lookups on a unique index are generally very fast.
44-1	7013-7020	Lookups	
44-2	7021-7023	on	
44-3	7024-7025	a	
44-4	7026-7032	unique	
44-5	7033-7038	index	
44-6	7039-7042	are	
44-7	7043-7052	generally	
44-8	7053-7057	very	
44-9	7058-7062	fast	
44-10	7062-7063	.	

#Text=In terms of data integrity, using a validates_uniqueness_of validation on an ActiveModel class does not really guarantee uniqueness because there can and will be concurrent users creating invalid records.
45-1	7064-7066	In	
45-2	7067-7072	terms	
45-3	7073-7075	of	
45-4	7076-7080	data	
45-5	7081-7090	integrity	
45-6	7090-7091	,	
45-7	7092-7097	using	
45-8	7098-7099	a	
45-9	7100-7123	validates_uniqueness_of	
45-10	7124-7134	validation	
45-11	7135-7137	on	
45-12	7138-7140	an	
45-13	7141-7152	ActiveModel	
45-14	7153-7158	class	
45-15	7159-7163	does	
45-16	7164-7167	not	
45-17	7168-7174	really	
45-18	7175-7184	guarantee	
45-19	7185-7195	uniqueness	
45-20	7196-7203	because	
45-21	7204-7209	there	
45-22	7210-7213	can	
45-23	7214-7217	and	
45-24	7218-7222	will	
45-25	7223-7225	be	
45-26	7226-7236	concurrent	
45-27	7237-7242	users	
45-28	7243-7251	creating	
45-29	7252-7259	invalid	
45-30	7260-7267	records	
45-31	7267-7268	.	

#Text=Therefore you should always create the constraint at the database level - either with an index or a unique constraint.
46-1	7269-7278	Therefore	
46-2	7279-7282	you	
46-3	7283-7289	should	
46-4	7290-7296	always	
46-5	7297-7303	create	
46-6	7304-7307	the	
46-7	7308-7318	constraint	
46-8	7319-7321	at	
46-9	7322-7325	the	
46-10	7326-7334	database	
46-11	7335-7340	level	
46-12	7341-7342	-	
46-13	7343-7349	either	
46-14	7350-7354	with	
46-15	7355-7357	an	
46-16	7358-7363	index	
46-17	7364-7366	or	
46-18	7367-7368	a	
46-19	7369-7375	unique	
46-20	7376-7386	constraint	
46-21	7386-7387	.	

#Text=There is little distinction between unique indexes and unique constraints.
47-1	7388-7393	There	
47-2	7394-7396	is	
47-3	7397-7403	little	
47-4	7404-7415	distinction	
47-5	7416-7423	between	
47-6	7424-7430	unique	
47-7	7431-7438	indexes	
47-8	7439-7442	and	
47-9	7443-7449	unique	
47-10	7450-7461	constraints	
47-11	7461-7462	.	

#Text=Unique indexes can be thought of as lower level, since expression indexes and partial indexes cannot be created as unique constraints.
48-1	7463-7469	Unique	
48-2	7470-7477	indexes	
48-3	7478-7481	can	
48-4	7482-7484	be	
48-5	7485-7492	thought	
48-6	7493-7495	of	
48-7	7496-7498	as	
48-8	7499-7504	lower	
48-9	7505-7510	level	
48-10	7510-7511	,	
48-11	7512-7517	since	
48-12	7518-7528	expression	
48-13	7529-7536	indexes	
48-14	7537-7540	and	
48-15	7541-7548	partial	
48-16	7549-7556	indexes	
48-17	7557-7563	cannot	
48-18	7564-7566	be	
48-19	7567-7574	created	
48-20	7575-7577	as	
48-21	7578-7584	unique	
48-22	7585-7596	constraints	
48-23	7596-7597	.	

#Text=Even partial unique indexes on expressions are possible.
49-1	7598-7602	Even	
49-2	7603-7610	partial	
49-3	7611-7617	unique	
49-4	7618-7625	indexes	
49-5	7626-7628	on	
49-6	7629-7640	expressions	
49-7	7641-7644	are	
49-8	7645-7653	possible	
49-9	7653-7654	.	

#Text=Multi-column Indexes
#Text=While Postgres has the ability to create multi-column indexes, it’s important to understand when it makes sense to do so.
50-1	7655-7667	Multi-column	
50-2	7668-7675	Indexes	
50-3	7676-7681	While	
50-4	7682-7690	Postgres	
50-5	7691-7694	has	
50-6	7695-7698	the	
50-7	7699-7706	ability	
50-8	7707-7709	to	
50-9	7710-7716	create	
50-10	7717-7729	multi-column	
50-11	7730-7737	indexes	
50-12	7737-7738	,	
50-13	7739-7741	it	
50-14	7741-7742	’	
50-15	7742-7743	s	
50-16	7744-7753	important	
50-17	7754-7756	to	
50-18	7757-7767	understand	
50-19	7768-7772	when	
50-20	7773-7775	it	
50-21	7776-7781	makes	
50-22	7782-7787	sense	
50-23	7788-7790	to	
50-24	7791-7793	do	
50-25	7794-7796	so	
50-26	7796-7797	.	

#Text=The Postgres query planner has the ability to combine and use multiple single-column indexes in a multi-column query by performing a bitmap index scan.
51-1	7798-7801	The	
51-2	7802-7810	Postgres	
51-3	7811-7816	query	
51-4	7817-7824	planner	
51-5	7825-7828	has	
51-6	7829-7832	the	
51-7	7833-7840	ability	
51-8	7841-7843	to	
51-9	7844-7851	combine	
51-10	7852-7855	and	
51-11	7856-7859	use	
51-12	7860-7868	multiple	
51-13	7869-7882	single-column	
51-14	7883-7890	indexes	
51-15	7891-7893	in	
51-16	7894-7895	a	
51-17	7896-7908	multi-column	
51-18	7909-7914	query	
51-19	7915-7917	by	
51-20	7918-7928	performing	
51-21	7929-7930	a	
51-22	7931-7937	bitmap	
51-23	7938-7943	index	
51-24	7944-7948	scan	
51-25	7948-7949	.	

#Text=In general, you can create an index on every column that covers query conditions and in most cases Postgres will use it, so make sure to benchmark and justify the creation of a multi-column index before you create one.
52-1	7950-7952	In	
52-2	7953-7960	general	
52-3	7960-7961	,	
52-4	7962-7965	you	
52-5	7966-7969	can	
52-6	7970-7976	create	
52-7	7977-7979	an	
52-8	7980-7985	index	
52-9	7986-7988	on	
52-10	7989-7994	every	
52-11	7995-8001	column	
52-12	8002-8006	that	
52-13	8007-8013	covers	
52-14	8014-8019	query	
52-15	8020-8030	conditions	
52-16	8031-8034	and	
52-17	8035-8037	in	
52-18	8038-8042	most	
52-19	8043-8048	cases	
52-20	8049-8057	Postgres	
52-21	8058-8062	will	
52-22	8063-8066	use	
52-23	8067-8069	it	
52-24	8069-8070	,	
52-25	8071-8073	so	
52-26	8074-8078	make	
52-27	8079-8083	sure	
52-28	8084-8086	to	
52-29	8087-8096	benchmark	
52-30	8097-8100	and	
52-31	8101-8108	justify	
52-32	8109-8112	the	
52-33	8113-8121	creation	
52-34	8122-8124	of	
52-35	8125-8126	a	
52-36	8127-8139	multi-column	
52-37	8140-8145	index	
52-38	8146-8152	before	
52-39	8153-8156	you	
52-40	8157-8163	create	
52-41	8164-8167	one	
52-42	8167-8168	.	

#Text=As always, indexes come with a cost, and multi-column indexes can only optimize the queries that reference the columns in the index in the same order, while multiple single column indexes provide performance improvements to a larger number of queries.
53-1	8169-8171	As	
53-2	8172-8178	always	
53-3	8178-8179	,	
53-4	8180-8187	indexes	
53-5	8188-8192	come	
53-6	8193-8197	with	
53-7	8198-8199	a	
53-8	8200-8204	cost	
53-9	8204-8205	,	
53-10	8206-8209	and	
53-11	8210-8222	multi-column	
53-12	8223-8230	indexes	
53-13	8231-8234	can	
53-14	8235-8239	only	
53-15	8240-8248	optimize	
53-16	8249-8252	the	
53-17	8253-8260	queries	
53-18	8261-8265	that	
53-19	8266-8275	reference	
53-20	8276-8279	the	
53-21	8280-8287	columns	
53-22	8288-8290	in	
53-23	8291-8294	the	
53-24	8295-8300	index	
53-25	8301-8303	in	
53-26	8304-8307	the	
53-27	8308-8312	same	
53-28	8313-8318	order	
53-29	8318-8319	,	
53-30	8320-8325	while	
53-31	8326-8334	multiple	
53-32	8335-8341	single	
53-33	8342-8348	column	
53-34	8349-8356	indexes	
53-35	8357-8364	provide	
53-36	8365-8376	performance	
53-37	8377-8389	improvements	
53-38	8390-8392	to	
53-39	8393-8394	a	
53-40	8395-8401	larger	
53-41	8402-8408	number	
53-42	8409-8411	of	
53-43	8412-8419	queries	
53-44	8419-8420	.	

#Text=However there are cases where a multi-column index clearly makes sense.
54-1	8421-8428	However	
54-2	8429-8434	there	
54-3	8435-8438	are	
54-4	8439-8444	cases	
54-5	8445-8450	where	
54-6	8451-8452	a	
54-7	8453-8465	multi-column	
54-8	8466-8471	index	
54-9	8472-8479	clearly	
54-10	8480-8485	makes	
54-11	8486-8491	sense	
54-12	8491-8492	.	

#Text=An index on columns (a, b) can be used by queries containing WHERE a = x AND b = y, or queries using WHERE a = x only, but will not be used by a query using WHERE b = y.
55-1	8493-8495	An	
55-2	8496-8501	index	
55-3	8502-8504	on	
55-4	8505-8512	columns	
55-5	8513-8514	(	
55-6	8514-8515	a	
55-7	8515-8516	,	
55-8	8517-8518	b	
55-9	8518-8519	)	
55-10	8520-8523	can	
55-11	8524-8526	be	
55-12	8527-8531	used	
55-13	8532-8534	by	
55-14	8535-8542	queries	
55-15	8543-8553	containing	
55-16	8554-8559	WHERE	
55-17	8560-8561	a	
55-18	8562-8563	=	
55-19	8564-8565	x	
55-20	8566-8569	AND	
55-21	8570-8571	b	
55-22	8572-8573	=	
55-23	8574-8575	y	
55-24	8575-8576	,	
55-25	8577-8579	or	
55-26	8580-8587	queries	
55-27	8588-8593	using	
55-28	8594-8599	WHERE	
55-29	8600-8601	a	
55-30	8602-8603	=	
55-31	8604-8605	x	
55-32	8606-8610	only	
55-33	8610-8611	,	
55-34	8612-8615	but	
55-35	8616-8620	will	
55-36	8621-8624	not	
55-37	8625-8627	be	
55-38	8628-8632	used	
55-39	8633-8635	by	
55-40	8636-8637	a	
55-41	8638-8643	query	
55-42	8644-8649	using	
55-43	8650-8655	WHERE	
55-44	8656-8657	b	
55-45	8658-8659	=	
55-46	8660-8661	y	
55-47	8661-8662	.	

#Text=So if this matches the query patterns of your application, the multi-column index approach is worth considering.
56-1	8663-8665	So	
56-2	8666-8668	if	
56-3	8669-8673	this	
56-4	8674-8681	matches	
56-5	8682-8685	the	
56-6	8686-8691	query	
56-7	8692-8700	patterns	
56-8	8701-8703	of	
56-9	8704-8708	your	
56-10	8709-8720	application	
56-11	8720-8721	,	
56-12	8722-8725	the	
56-13	8726-8738	multi-column	
56-14	8739-8744	index	
56-15	8745-8753	approach	
56-16	8754-8756	is	
56-17	8757-8762	worth	
56-18	8763-8774	considering	
56-19	8774-8775	.	

#Text=Also note that in this case creating an index on a alone would be redundant.
57-1	8776-8780	Also	
57-2	8781-8785	note	
57-3	8786-8790	that	
57-4	8791-8793	in	
57-5	8794-8798	this	
57-6	8799-8803	case	
57-7	8804-8812	creating	
57-8	8813-8815	an	
57-9	8816-8821	index	
57-10	8822-8824	on	
57-11	8825-8826	a	
57-12	8827-8832	alone	
57-13	8833-8838	would	
57-14	8839-8841	be	
57-15	8842-8851	redundant	
57-16	8851-8852	.	

#Text=B-Trees and sorting
#Text=B-Tree index entries are sorted in ascending order by default.
58-1	8853-8860	B-Trees	
58-2	8861-8864	and	
58-3	8865-8872	sorting	
58-4	8873-8879	B-Tree	
58-5	8880-8885	index	
58-6	8886-8893	entries	
58-7	8894-8897	are	
58-8	8898-8904	sorted	
58-9	8905-8907	in	
58-10	8908-8917	ascending	
58-11	8918-8923	order	
58-12	8924-8926	by	
58-13	8927-8934	default	
58-14	8934-8935	.	

#Text=In some cases it makes sense to supply a different sort order for an index.
59-1	8936-8938	In	
59-2	8939-8943	some	
59-3	8944-8949	cases	
59-4	8950-8952	it	
59-5	8953-8958	makes	
59-6	8959-8964	sense	
59-7	8965-8967	to	
59-8	8968-8974	supply	
59-9	8975-8976	a	
59-10	8977-8986	different	
59-11	8987-8991	sort	
59-12	8992-8997	order	
59-13	8998-9001	for	
59-14	9002-9004	an	
59-15	9005-9010	index	
59-16	9010-9011	.	

#Text=Take the case when you’re showing a paginated list of articles, sorted by most recent published first.
60-1	9012-9016	Take	
60-2	9017-9020	the	
60-3	9021-9025	case	
60-4	9026-9030	when	
60-5	9031-9034	you	
60-6	9034-9035	’	
60-7	9035-9037	re	
60-8	9038-9045	showing	
60-9	9046-9047	a	
60-10	9048-9057	paginated	
60-11	9058-9062	list	
60-12	9063-9065	of	
60-13	9066-9074	articles	
60-14	9074-9075	,	
60-15	9076-9082	sorted	
60-16	9083-9085	by	
60-17	9086-9090	most	
60-18	9091-9097	recent	
60-19	9098-9107	published	
60-20	9108-9113	first	
60-21	9113-9114	.	

#Text=We may have a published_at column on our articles table.
61-1	9115-9117	We	
61-2	9118-9121	may	
61-3	9122-9126	have	
61-4	9127-9128	a	
61-5	9129-9141	published_at	
61-6	9142-9148	column	
61-7	9149-9151	on	
61-8	9152-9155	our	
61-9	9156-9164	articles	
61-10	9165-9170	table	
61-11	9170-9171	.	

#Text=For unpublished articles, the published_at value is NULL.
62-1	9172-9175	For	
62-2	9176-9187	unpublished	
62-3	9188-9196	articles	
62-4	9196-9197	,	
62-5	9198-9201	the	
62-6	9202-9214	published_at	
62-7	9215-9220	value	
62-8	9221-9223	is	
62-9	9224-9228	NULL	
62-10	9228-9229	.	

#Text=In this case we can create an index like so:
#Text=CREATE INDEX articles_published_at_index ON articles(published_at DESC NULLS LAST);
#Text=In Postgres 9.2 and above, it’s of note that indexes are not always required to go to the table, provided we can get everything needed from the index (i.e. no unindexed columns are of interest).
63-1	9230-9232	In	
63-2	9233-9237	this	
63-3	9238-9242	case	
63-4	9243-9245	we	
63-5	9246-9249	can	
63-6	9250-9256	create	
63-7	9257-9259	an	
63-8	9260-9265	index	
63-9	9266-9270	like	
63-10	9271-9273	so	
63-11	9273-9274	:	
63-12	9275-9281	CREATE	
63-13	9282-9287	INDEX	
63-14	9288-9315	articles_published_at_index	
63-15	9316-9318	ON	
63-16	9319-9327	articles	
63-17	9327-9328	(	
63-18	9328-9340	published_at	
63-19	9341-9345	DESC	
63-20	9346-9351	NULLS	
63-21	9352-9356	LAST	
63-22	9356-9357	)	
63-23	9357-9358	;	
63-24	9359-9361	In	
63-25	9362-9370	Postgres	
63-26	9371-9374	9.2	
63-27	9375-9378	and	
63-28	9379-9384	above	
63-29	9384-9385	,	
63-30	9386-9388	it	
63-31	9388-9389	’	
63-32	9389-9390	s	
63-33	9391-9393	of	
63-34	9394-9398	note	
63-35	9399-9403	that	
63-36	9404-9411	indexes	
63-37	9412-9415	are	
63-38	9416-9419	not	
63-39	9420-9426	always	
63-40	9427-9435	required	
63-41	9436-9438	to	
63-42	9439-9441	go	
63-43	9442-9444	to	
63-44	9445-9448	the	
63-45	9449-9454	table	
63-46	9454-9455	,	
63-47	9456-9464	provided	
63-48	9465-9467	we	
63-49	9468-9471	can	
63-50	9472-9475	get	
63-51	9476-9486	everything	
63-52	9487-9493	needed	
63-53	9494-9498	from	
63-54	9499-9502	the	
63-55	9503-9508	index	
63-56	9509-9510	(	
63-57	9510-9513	i.e	
63-58	9513-9514	.	
63-59	9515-9517	no	
63-60	9518-9527	unindexed	
63-61	9528-9535	columns	
63-62	9536-9539	are	
63-63	9540-9542	of	
63-64	9543-9551	interest	
63-65	9551-9552	)	
63-66	9552-9553	.	

#Text=This feature is called “Index-only scans”.
64-1	9554-9558	This	
64-2	9559-9566	feature	
64-3	9567-9569	is	
64-4	9570-9576	called	
64-5	9577-9578	“	
64-6	9578-9588	Index-only	
64-7	9589-9594	scans	
64-8	9594-9595	”	
64-9	9595-9596	.	

#Text=Since we will be querying the table in sorted order by published_at and limiting the result, we may get some benefit out of creating an index in the same order.
65-1	9597-9602	Since	
65-2	9603-9605	we	
65-3	9606-9610	will	
65-4	9611-9613	be	
65-5	9614-9622	querying	
65-6	9623-9626	the	
65-7	9627-9632	table	
65-8	9633-9635	in	
65-9	9636-9642	sorted	
65-10	9643-9648	order	
65-11	9649-9651	by	
65-12	9652-9664	published_at	
65-13	9665-9668	and	
65-14	9669-9677	limiting	
65-15	9678-9681	the	
65-16	9682-9688	result	
65-17	9688-9689	,	
65-18	9690-9692	we	
65-19	9693-9696	may	
65-20	9697-9700	get	
65-21	9701-9705	some	
65-22	9706-9713	benefit	
65-23	9714-9717	out	
65-24	9718-9720	of	
65-25	9721-9729	creating	
65-26	9730-9732	an	
65-27	9733-9738	index	
65-28	9739-9741	in	
65-29	9742-9745	the	
65-30	9746-9750	same	
65-31	9751-9756	order	
65-32	9756-9757	.	

#Text=Postgres will find the rows it needs from the index in the correct order, and then go to the data blocks to retrieve the data.
66-1	9758-9766	Postgres	
66-2	9767-9771	will	
66-3	9772-9776	find	
66-4	9777-9780	the	
66-5	9781-9785	rows	
66-6	9786-9788	it	
66-7	9789-9794	needs	
66-8	9795-9799	from	
66-9	9800-9803	the	
66-10	9804-9809	index	
66-11	9810-9812	in	
66-12	9813-9816	the	
66-13	9817-9824	correct	
66-14	9825-9830	order	
66-15	9830-9831	,	
66-16	9832-9835	and	
66-17	9836-9840	then	
66-18	9841-9843	go	
66-19	9844-9846	to	
66-20	9847-9850	the	
66-21	9851-9855	data	
66-22	9856-9862	blocks	
66-23	9863-9865	to	
66-24	9866-9874	retrieve	
66-25	9875-9878	the	
66-26	9879-9883	data	
66-27	9883-9884	.	

#Text=If the index wasn’t sorted, there’s a good chance that Postgres would read the data blocks sequentially and sort the results.
67-1	9885-9887	If	
67-2	9888-9891	the	
67-3	9892-9897	index	
67-4	9898-9902	wasn	
67-5	9902-9903	’	
67-6	9903-9904	t	
67-7	9905-9911	sorted	
67-8	9911-9912	,	
67-9	9913-9918	there	
67-10	9918-9919	’	
67-11	9919-9920	s	
67-12	9921-9922	a	
67-13	9923-9927	good	
67-14	9928-9934	chance	
67-15	9935-9939	that	
67-16	9940-9948	Postgres	
67-17	9949-9954	would	
67-18	9955-9959	read	
67-19	9960-9963	the	
67-20	9964-9968	data	
67-21	9969-9975	blocks	
67-22	9976-9988	sequentially	
67-23	9989-9992	and	
67-24	9993-9997	sort	
67-25	9998-10001	the	
67-26	10002-10009	results	
67-27	10009-10010	.	

#Text=This technique is mostly relevant with single column indexes when you require “nulls to sort last” behavior, because otherwise the order is already available since an index can be scanned in any direction.
68-1	10011-10015	This	
68-2	10016-10025	technique	
68-3	10026-10028	is	
68-4	10029-10035	mostly	
68-5	10036-10044	relevant	
68-6	10045-10049	with	
68-7	10050-10056	single	
68-8	10057-10063	column	
68-9	10064-10071	indexes	
68-10	10072-10076	when	
68-11	10077-10080	you	
68-12	10081-10088	require	
68-13	10089-10090	“	
68-14	10090-10095	nulls	
68-15	10096-10098	to	
68-16	10099-10103	sort	
68-17	10104-10108	last	
68-18	10108-10109	”	
68-19	10110-10118	behavior	
68-20	10118-10119	,	
68-21	10120-10127	because	
68-22	10128-10137	otherwise	
68-23	10138-10141	the	
68-24	10142-10147	order	
68-25	10148-10150	is	
68-26	10151-10158	already	
68-27	10159-10168	available	
68-28	10169-10174	since	
68-29	10175-10177	an	
68-30	10178-10183	index	
68-31	10184-10187	can	
68-32	10188-10190	be	
68-33	10191-10198	scanned	
68-34	10199-10201	in	
68-35	10202-10205	any	
68-36	10206-10215	direction	
68-37	10215-10216	.	

#Text=It becomes even more relevant when used against a multi-column index when a query requests a mixed sort order, like a ASC, b DESC.
69-1	10217-10219	It	
69-2	10220-10227	becomes	
69-3	10228-10232	even	
69-4	10233-10237	more	
69-5	10238-10246	relevant	
69-6	10247-10251	when	
69-7	10252-10256	used	
69-8	10257-10264	against	
69-9	10265-10266	a	
69-10	10267-10279	multi-column	
69-11	10280-10285	index	
69-12	10286-10290	when	
69-13	10291-10292	a	
69-14	10293-10298	query	
69-15	10299-10307	requests	
69-16	10308-10309	a	
69-17	10310-10315	mixed	
69-18	10316-10320	sort	
69-19	10321-10326	order	
69-20	10326-10327	,	
69-21	10328-10332	like	
69-22	10333-10334	a	
69-23	10335-10338	ASC	
69-24	10338-10339	,	
69-25	10340-10341	b	
69-26	10342-10346	DESC	
69-27	10346-10347	.	

#Text=Managing and Maintaining indexes
#Text=Indexes in Postgres do not hold all row data.
70-1	10348-10356	Managing	
70-2	10357-10360	and	
70-3	10361-10372	Maintaining	
70-4	10373-10380	indexes	
70-5	10381-10388	Indexes	
70-6	10389-10391	in	
70-7	10392-10400	Postgres	
70-8	10401-10403	do	
70-9	10404-10407	not	
70-10	10408-10412	hold	
70-11	10413-10416	all	
70-12	10417-10420	row	
70-13	10421-10425	data	
70-14	10425-10426	.	

#Text=Even when an index is used in a query and matching rows where found, Postgres will go to disk to fetch the row data.
71-1	10427-10431	Even	
71-2	10432-10436	when	
71-3	10437-10439	an	
71-4	10440-10445	index	
71-5	10446-10448	is	
71-6	10449-10453	used	
71-7	10454-10456	in	
71-8	10457-10458	a	
71-9	10459-10464	query	
71-10	10465-10468	and	
71-11	10469-10477	matching	
71-12	10478-10482	rows	
71-13	10483-10488	where	
71-14	10489-10494	found	
71-15	10494-10495	,	
71-16	10496-10504	Postgres	
71-17	10505-10509	will	
71-18	10510-10512	go	
71-19	10513-10515	to	
71-20	10516-10520	disk	
71-21	10521-10523	to	
71-22	10524-10529	fetch	
71-23	10530-10533	the	
71-24	10534-10537	row	
71-25	10538-10542	data	
71-26	10542-10543	.	

#Text=Additionally, row visibility information (discussed in the MVCC article) is not stored on the index either, therefore Postgres must also go to disk to fetch that information.
72-1	10544-10556	Additionally	
72-2	10556-10557	,	
72-3	10558-10561	row	
72-4	10562-10572	visibility	
72-5	10573-10584	information	
72-6	10585-10586	(	
72-7	10586-10595	discussed	
72-8	10596-10598	in	
72-9	10599-10602	the	
72-10	10603-10607	MVCC	
72-11	10608-10615	article	
72-12	10615-10616	)	
72-13	10617-10619	is	
72-14	10620-10623	not	
72-15	10624-10630	stored	
72-16	10631-10633	on	
72-17	10634-10637	the	
72-18	10638-10643	index	
72-19	10644-10650	either	
72-20	10650-10651	,	
72-21	10652-10661	therefore	
72-22	10662-10670	Postgres	
72-23	10671-10675	must	
72-24	10676-10680	also	
72-25	10681-10683	go	
72-26	10684-10686	to	
72-27	10687-10691	disk	
72-28	10692-10694	to	
72-29	10695-10700	fetch	
72-30	10701-10705	that	
72-31	10706-10717	information	
72-32	10717-10718	.	

#Text=Having that in mind, you can see how in some cases using an index doesn’t really make sense.
73-1	10719-10725	Having	
73-2	10726-10730	that	
73-3	10731-10733	in	
73-4	10734-10738	mind	
73-5	10738-10739	,	
73-6	10740-10743	you	
73-7	10744-10747	can	
73-8	10748-10751	see	
73-9	10752-10755	how	
73-10	10756-10758	in	
73-11	10759-10763	some	
73-12	10764-10769	cases	
73-13	10770-10775	using	
73-14	10776-10778	an	
73-15	10779-10784	index	
73-16	10785-10790	doesn	
73-17	10790-10791	’	
73-18	10791-10792	t	
73-19	10793-10799	really	
73-20	10800-10804	make	
73-21	10805-10810	sense	
73-22	10810-10811	.	

#Text=An index must be selective enough to reduce the number of disk lookups for it to be worth it.
74-1	10812-10814	An	
74-2	10815-10820	index	
74-3	10821-10825	must	
74-4	10826-10828	be	
74-5	10829-10838	selective	
74-6	10839-10845	enough	
74-7	10846-10848	to	
74-8	10849-10855	reduce	
74-9	10856-10859	the	
74-10	10860-10866	number	
74-11	10867-10869	of	
74-12	10870-10874	disk	
74-13	10875-10882	lookups	
74-14	10883-10886	for	
74-15	10887-10889	it	
74-16	10890-10892	to	
74-17	10893-10895	be	
74-18	10896-10901	worth	
74-19	10902-10904	it	
74-20	10904-10905	.	

#Text=For example, a primary key lookup with a big enough table makes good use of an index: instead of sequentially scanning the table matching the query conditions, Postgres is able to find the targeted rows in an index, and then fetch them from disk selectively.
75-1	10906-10909	For	
75-2	10910-10917	example	
75-3	10917-10918	,	
75-4	10919-10920	a	
75-5	10921-10928	primary	
75-6	10929-10932	key	
75-7	10933-10939	lookup	
75-8	10940-10944	with	
75-9	10945-10946	a	
75-10	10947-10950	big	
75-11	10951-10957	enough	
75-12	10958-10963	table	
75-13	10964-10969	makes	
75-14	10970-10974	good	
75-15	10975-10978	use	
75-16	10979-10981	of	
75-17	10982-10984	an	
75-18	10985-10990	index	
75-19	10990-10991	:	
75-20	10992-10999	instead	
75-21	11000-11002	of	
75-22	11003-11015	sequentially	
75-23	11016-11024	scanning	
75-24	11025-11028	the	
75-25	11029-11034	table	
75-26	11035-11043	matching	
75-27	11044-11047	the	
75-28	11048-11053	query	
75-29	11054-11064	conditions	
75-30	11064-11065	,	
75-31	11066-11074	Postgres	
75-32	11075-11077	is	
75-33	11078-11082	able	
75-34	11083-11085	to	
75-35	11086-11090	find	
75-36	11091-11094	the	
75-37	11095-11103	targeted	
75-38	11104-11108	rows	
75-39	11109-11111	in	
75-40	11112-11114	an	
75-41	11115-11120	index	
75-42	11120-11121	,	
75-43	11122-11125	and	
75-44	11126-11130	then	
75-45	11131-11136	fetch	
75-46	11137-11141	them	
75-47	11142-11146	from	
75-48	11147-11151	disk	
75-49	11152-11163	selectively	
75-50	11163-11164	.	

#Text=For very small tables, for example a cities lookup table, an index may be undesirable, even if you search by city name.
76-1	11165-11168	For	
76-2	11169-11173	very	
76-3	11174-11179	small	
76-4	11180-11186	tables	
76-5	11186-11187	,	
76-6	11188-11191	for	
76-7	11192-11199	example	
76-8	11200-11201	a	
76-9	11202-11208	cities	
76-10	11209-11215	lookup	
76-11	11216-11221	table	
76-12	11221-11222	,	
76-13	11223-11225	an	
76-14	11226-11231	index	
76-15	11232-11235	may	
76-16	11236-11238	be	
76-17	11239-11250	undesirable	
76-18	11250-11251	,	
76-19	11252-11256	even	
76-20	11257-11259	if	
76-21	11260-11263	you	
76-22	11264-11270	search	
76-23	11271-11273	by	
76-24	11274-11278	city	
76-25	11279-11283	name	
76-26	11283-11284	.	

#Text=In that case, Postgres may decide to ignore the index in favor of a sequential scan.
77-1	11285-11287	In	
77-2	11288-11292	that	
77-3	11293-11297	case	
77-4	11297-11298	,	
77-5	11299-11307	Postgres	
77-6	11308-11311	may	
77-7	11312-11318	decide	
77-8	11319-11321	to	
77-9	11322-11328	ignore	
77-10	11329-11332	the	
77-11	11333-11338	index	
77-12	11339-11341	in	
77-13	11342-11347	favor	
77-14	11348-11350	of	
77-15	11351-11352	a	
77-16	11353-11363	sequential	
77-17	11364-11368	scan	
77-18	11368-11369	.	

#Text=Postgres will decide to perform a sequential scan on any query that will hit a significant portion of a table.
78-1	11370-11378	Postgres	
78-2	11379-11383	will	
78-3	11384-11390	decide	
78-4	11391-11393	to	
78-5	11394-11401	perform	
78-6	11402-11403	a	
78-7	11404-11414	sequential	
78-8	11415-11419	scan	
78-9	11420-11422	on	
78-10	11423-11426	any	
78-11	11427-11432	query	
78-12	11433-11437	that	
78-13	11438-11442	will	
78-14	11443-11446	hit	
78-15	11447-11448	a	
78-16	11449-11460	significant	
78-17	11461-11468	portion	
78-18	11469-11471	of	
78-19	11472-11473	a	
78-20	11474-11479	table	
78-21	11479-11480	.	

#Text=If you do have an index on that column, it will be a dead index that’s never used - and indexes are not free: they come at a cost in terms of storage and maintenance.
79-1	11481-11483	If	
79-2	11484-11487	you	
79-3	11488-11490	do	
79-4	11491-11495	have	
79-5	11496-11498	an	
79-6	11499-11504	index	
79-7	11505-11507	on	
79-8	11508-11512	that	
79-9	11513-11519	column	
79-10	11519-11520	,	
79-11	11521-11523	it	
79-12	11524-11528	will	
79-13	11529-11531	be	
79-14	11532-11533	a	
79-15	11534-11538	dead	
79-16	11539-11544	index	
79-17	11545-11549	that	
79-18	11549-11550	’	
79-19	11550-11551	s	
79-20	11552-11557	never	
79-21	11558-11562	used	
79-22	11563-11564	-	
79-23	11565-11568	and	
79-24	11569-11576	indexes	
79-25	11577-11580	are	
79-26	11581-11584	not	
79-27	11585-11589	free	
79-28	11589-11590	:	
79-29	11591-11595	they	
79-30	11596-11600	come	
79-31	11601-11603	at	
79-32	11604-11605	a	
79-33	11606-11610	cost	
79-34	11611-11613	in	
79-35	11614-11619	terms	
79-36	11620-11622	of	
79-37	11623-11630	storage	
79-38	11631-11634	and	
79-39	11635-11646	maintenance	
79-40	11646-11647	.	

#Text=For more on running production, staging, and other environments for your Heroku application, take a look at our Managing Multiple Environments article.
80-1	11648-11651	For	
80-2	11652-11656	more	
80-3	11657-11659	on	
80-4	11660-11667	running	
80-5	11668-11678	production	
80-6	11678-11679	,	
80-7	11680-11687	staging	
80-8	11687-11688	,	
80-9	11689-11692	and	
80-10	11693-11698	other	
80-11	11699-11711	environments	
80-12	11712-11715	for	
80-13	11716-11720	your	
80-14	11721-11727	Heroku	
80-15	11728-11739	application	
80-16	11739-11740	,	
80-17	11741-11745	take	
80-18	11746-11747	a	
80-19	11748-11752	look	
80-20	11753-11755	at	
80-21	11756-11759	our	
80-22	11760-11768	Managing	
80-23	11769-11777	Multiple	
80-24	11778-11790	Environments	
80-25	11791-11798	article	
80-26	11798-11799	.	

#Text=When tuning a query and understanding what indexes make the most sense, be sure to use a database as similar as possible to what exists, or will exist in production.
81-1	11800-11804	When	
81-2	11805-11811	tuning	
81-3	11812-11813	a	
81-4	11814-11819	query	
81-5	11820-11823	and	
81-6	11824-11837	understanding	
81-7	11838-11842	what	
81-8	11843-11850	indexes	
81-9	11851-11855	make	
81-10	11856-11859	the	
81-11	11860-11864	most	
81-12	11865-11870	sense	
81-13	11870-11871	,	
81-14	11872-11874	be	
81-15	11875-11879	sure	
81-16	11880-11882	to	
81-17	11883-11886	use	
81-18	11887-11888	a	
81-19	11889-11897	database	
81-20	11898-11900	as	
81-21	11901-11908	similar	
81-22	11909-11911	as	
81-23	11912-11920	possible	
81-24	11921-11923	to	
81-25	11924-11928	what	
81-26	11929-11935	exists	
81-27	11935-11936	,	
81-28	11937-11939	or	
81-29	11940-11944	will	
81-30	11945-11950	exist	
81-31	11951-11953	in	
81-32	11954-11964	production	
81-33	11964-11965	.	

#Text=Whether an index is used or not depends on a number of factors, including the Postgres server configuration, the data in the table, the index and the query.
82-1	11966-11973	Whether	
82-2	11974-11976	an	
82-3	11977-11982	index	
82-4	11983-11985	is	
82-5	11986-11990	used	
82-6	11991-11993	or	
82-7	11994-11997	not	
82-8	11998-12005	depends	
82-9	12006-12008	on	
82-10	12009-12010	a	
82-11	12011-12017	number	
82-12	12018-12020	of	
82-13	12021-12028	factors	
82-14	12028-12029	,	
82-15	12030-12039	including	
82-16	12040-12043	the	
82-17	12044-12052	Postgres	
82-18	12053-12059	server	
82-19	12060-12073	configuration	
82-20	12073-12074	,	
82-21	12075-12078	the	
82-22	12079-12083	data	
82-23	12084-12086	in	
82-24	12087-12090	the	
82-25	12091-12096	table	
82-26	12096-12097	,	
82-27	12098-12101	the	
82-28	12102-12107	index	
82-29	12108-12111	and	
82-30	12112-12115	the	
82-31	12116-12121	query	
82-32	12121-12122	.	

#Text=For instance, trying to make a query use an index on your development machine with a small subset of “test data” will be frustrating: Postgres will determine that the dataset is so small that it’s not worth the overhead of reading through the index and then fetching the data from disk.
83-1	12123-12126	For	
83-2	12127-12135	instance	
83-3	12135-12136	,	
83-4	12137-12143	trying	
83-5	12144-12146	to	
83-6	12147-12151	make	
83-7	12152-12153	a	
83-8	12154-12159	query	
83-9	12160-12163	use	
83-10	12164-12166	an	
83-11	12167-12172	index	
83-12	12173-12175	on	
83-13	12176-12180	your	
83-14	12181-12192	development	
83-15	12193-12200	machine	
83-16	12201-12205	with	
83-17	12206-12207	a	
83-18	12208-12213	small	
83-19	12214-12220	subset	
83-20	12221-12223	of	
83-21	12224-12225	“	
83-22	12225-12229	test	
83-23	12230-12234	data	
83-24	12234-12235	”	
83-25	12236-12240	will	
83-26	12241-12243	be	
83-27	12244-12255	frustrating	
83-28	12255-12256	:	
83-29	12257-12265	Postgres	
83-30	12266-12270	will	
83-31	12271-12280	determine	
83-32	12281-12285	that	
83-33	12286-12289	the	
83-34	12290-12297	dataset	
83-35	12298-12300	is	
83-36	12301-12303	so	
83-37	12304-12309	small	
83-38	12310-12314	that	
83-39	12315-12317	it	
83-40	12317-12318	’	
83-41	12318-12319	s	
83-42	12320-12323	not	
83-43	12324-12329	worth	
83-44	12330-12333	the	
83-45	12334-12342	overhead	
83-46	12343-12345	of	
83-47	12346-12353	reading	
83-48	12354-12361	through	
83-49	12362-12365	the	
83-50	12366-12371	index	
83-51	12372-12375	and	
83-52	12376-12380	then	
83-53	12381-12389	fetching	
83-54	12390-12393	the	
83-55	12394-12398	data	
83-56	12399-12403	from	
83-57	12404-12408	disk	
83-58	12408-12409	.	

#Text=Random I/O is much slower than sequential, so the cost of a sequential scan is lower than that of the random I/O introduced by reading the index and selectively finding the data on disk.
84-1	12410-12416	Random	
84-2	12417-12418	I	
84-3	12418-12419	/	
84-4	12419-12420	O	
84-5	12421-12423	is	
84-6	12424-12428	much	
84-7	12429-12435	slower	
84-8	12436-12440	than	
84-9	12441-12451	sequential	
84-10	12451-12452	,	
84-11	12453-12455	so	
84-12	12456-12459	the	
84-13	12460-12464	cost	
84-14	12465-12467	of	
84-15	12468-12469	a	
84-16	12470-12480	sequential	
84-17	12481-12485	scan	
84-18	12486-12488	is	
84-19	12489-12494	lower	
84-20	12495-12499	than	
84-21	12500-12504	that	
84-22	12505-12507	of	
84-23	12508-12511	the	
84-24	12512-12518	random	
84-25	12519-12520	I	
84-26	12520-12521	/	
84-27	12521-12522	O	
84-28	12523-12533	introduced	
84-29	12534-12536	by	
84-30	12537-12544	reading	
84-31	12545-12548	the	
84-32	12549-12554	index	
84-33	12555-12558	and	
84-34	12559-12570	selectively	
84-35	12571-12578	finding	
84-36	12579-12582	the	
84-37	12583-12587	data	
84-38	12588-12590	on	
84-39	12591-12595	disk	
84-40	12595-12596	.	

#Text=Performing index tuning should be done on production, or on a staging environment that is as close to production as possible.
85-1	12597-12607	Performing	
85-2	12608-12613	index	
85-3	12614-12620	tuning	
85-4	12621-12627	should	
85-5	12628-12630	be	
85-6	12631-12635	done	
85-7	12636-12638	on	
85-8	12639-12649	production	
85-9	12649-12650	,	
85-10	12651-12653	or	
85-11	12654-12656	on	
85-12	12657-12658	a	
85-13	12659-12666	staging	
85-14	12667-12678	environment	
85-15	12679-12683	that	
85-16	12684-12686	is	
85-17	12687-12689	as	
85-18	12690-12695	close	
85-19	12696-12698	to	
85-20	12699-12709	production	
85-21	12710-12712	as	
85-22	12713-12721	possible	
85-23	12721-12722	.	

#Text=On the Heroku Postgres database platform it is possible to copy your production database to a different environment quite easily.
86-1	12723-12725	On	
86-2	12726-12729	the	
86-3	12730-12736	Heroku	
86-4	12737-12745	Postgres	
86-5	12746-12754	database	
86-6	12755-12763	platform	
86-7	12764-12766	it	
86-8	12767-12769	is	
86-9	12770-12778	possible	
86-10	12779-12781	to	
86-11	12782-12786	copy	
86-12	12787-12791	your	
86-13	12792-12802	production	
86-14	12803-12811	database	
86-15	12812-12814	to	
86-16	12815-12816	a	
86-17	12817-12826	different	
86-18	12827-12838	environment	
86-19	12839-12844	quite	
86-20	12845-12851	easily	
86-21	12851-12852	.	

#Text=When you are ready to apply an index on your production database, keep in mind that creating an index locks the table against writes.
87-1	12853-12857	When	
87-2	12858-12861	you	
87-3	12862-12865	are	
87-4	12866-12871	ready	
87-5	12872-12874	to	
87-6	12875-12880	apply	
87-7	12881-12883	an	
87-8	12884-12889	index	
87-9	12890-12892	on	
87-10	12893-12897	your	
87-11	12898-12908	production	
87-12	12909-12917	database	
87-13	12917-12918	,	
87-14	12919-12923	keep	
87-15	12924-12926	in	
87-16	12927-12931	mind	
87-17	12932-12936	that	
87-18	12937-12945	creating	
87-19	12946-12948	an	
87-20	12949-12954	index	
87-21	12955-12960	locks	
87-22	12961-12964	the	
87-23	12965-12970	table	
87-24	12971-12978	against	
87-25	12979-12985	writes	
87-26	12985-12986	.	

#Text=For big tables that can mean your site is down for hours.
88-1	12987-12990	For	
88-2	12991-12994	big	
88-3	12995-13001	tables	
88-4	13002-13006	that	
88-5	13007-13010	can	
88-6	13011-13015	mean	
88-7	13016-13020	your	
88-8	13021-13025	site	
88-9	13026-13028	is	
88-10	13029-13033	down	
88-11	13034-13037	for	
88-12	13038-13043	hours	
88-13	13043-13044	.	

#Text=Fortunately Postgres allows you to CREATE INDEX CONCURRENTLY, which will take much longer to build, but does not require a lock that blocks writes.
89-1	13045-13056	Fortunately	
89-2	13057-13065	Postgres	
89-3	13066-13072	allows	
89-4	13073-13076	you	
89-5	13077-13079	to	
89-6	13080-13086	CREATE	
89-7	13087-13092	INDEX	
89-8	13093-13105	CONCURRENTLY	
89-9	13105-13106	,	
89-10	13107-13112	which	
89-11	13113-13117	will	
89-12	13118-13122	take	
89-13	13123-13127	much	
89-14	13128-13134	longer	
89-15	13135-13137	to	
89-16	13138-13143	build	
89-17	13143-13144	,	
89-18	13145-13148	but	
89-19	13149-13153	does	
89-20	13154-13157	not	
89-21	13158-13165	require	
89-22	13166-13167	a	
89-23	13168-13172	lock	
89-24	13173-13177	that	
89-25	13178-13184	blocks	
89-26	13185-13191	writes	
89-27	13191-13192	.	

#Text=Ordinary CREATE INDEX commands require a lock that blocks writes but not reads.
90-1	13193-13201	Ordinary	
90-2	13202-13208	CREATE	
90-3	13209-13214	INDEX	
90-4	13215-13223	commands	
90-5	13224-13231	require	
90-6	13232-13233	a	
90-7	13234-13238	lock	
90-8	13239-13243	that	
90-9	13244-13250	blocks	
90-10	13251-13257	writes	
90-11	13258-13261	but	
90-12	13262-13265	not	
90-13	13266-13271	reads	
90-14	13271-13272	.	

#Text=Finally, indexes will become fragmented and unoptimized after some time, especially if the rows in the table are often updated or deleted.
91-1	13273-13280	Finally	
91-2	13280-13281	,	
91-3	13282-13289	indexes	
91-4	13290-13294	will	
91-5	13295-13301	become	
91-6	13302-13312	fragmented	
91-7	13313-13316	and	
91-8	13317-13328	unoptimized	
91-9	13329-13334	after	
91-10	13335-13339	some	
91-11	13340-13344	time	
91-12	13344-13345	,	
91-13	13346-13356	especially	
91-14	13357-13359	if	
91-15	13360-13363	the	
91-16	13364-13368	rows	
91-17	13369-13371	in	
91-18	13372-13375	the	
91-19	13376-13381	table	
91-20	13382-13385	are	
91-21	13386-13391	often	
91-22	13392-13399	updated	
91-23	13400-13402	or	
91-24	13403-13410	deleted	
91-25	13410-13411	.	

#Text=In those cases it may be required to perform a REINDEX leaving you with a balanced and optimized index.
92-1	13412-13414	In	
92-2	13415-13420	those	
92-3	13421-13426	cases	
92-4	13427-13429	it	
92-5	13430-13433	may	
92-6	13434-13436	be	
92-7	13437-13445	required	
92-8	13446-13448	to	
92-9	13449-13456	perform	
92-10	13457-13458	a	
92-11	13459-13466	REINDEX	
92-12	13467-13474	leaving	
92-13	13475-13478	you	
92-14	13479-13483	with	
92-15	13484-13485	a	
92-16	13486-13494	balanced	
92-17	13495-13498	and	
92-18	13499-13508	optimized	
92-19	13509-13514	index	
92-20	13514-13515	.	

#Text=However be cautious about reindexing big indexes as write locks are obtained on the parent table.
93-1	13516-13523	However	
93-2	13524-13526	be	
93-3	13527-13535	cautious	
93-4	13536-13541	about	
93-5	13542-13552	reindexing	
93-6	13553-13556	big	
93-7	13557-13564	indexes	
93-8	13565-13567	as	
93-9	13568-13573	write	
93-10	13574-13579	locks	
93-11	13580-13583	are	
93-12	13584-13592	obtained	
93-13	13593-13595	on	
93-14	13596-13599	the	
93-15	13600-13606	parent	
93-16	13607-13612	table	
93-17	13612-13613	.	

#Text=One strategy to achieve the same result on a live site is to build an index concurrently on the same table and columns but with a different name, and then dropping the original index and renaming the new one.
94-1	13614-13617	One	
94-2	13618-13626	strategy	
94-3	13627-13629	to	
94-4	13630-13637	achieve	
94-5	13638-13641	the	
94-6	13642-13646	same	
94-7	13647-13653	result	
94-8	13654-13656	on	
94-9	13657-13658	a	
94-10	13659-13663	live	
94-11	13664-13668	site	
94-12	13669-13671	is	
94-13	13672-13674	to	
94-14	13675-13680	build	
94-15	13681-13683	an	
94-16	13684-13689	index	
94-17	13690-13702	concurrently	
94-18	13703-13705	on	
94-19	13706-13709	the	
94-20	13710-13714	same	
94-21	13715-13720	table	
94-22	13721-13724	and	
94-23	13725-13732	columns	
94-24	13733-13736	but	
94-25	13737-13741	with	
94-26	13742-13743	a	
94-27	13744-13753	different	
94-28	13754-13758	name	
94-29	13758-13759	,	
94-30	13760-13763	and	
94-31	13764-13768	then	
94-32	13769-13777	dropping	
94-33	13778-13781	the	
94-34	13782-13790	original	
94-35	13791-13796	index	
94-36	13797-13800	and	
94-37	13801-13809	renaming	
94-38	13810-13813	the	
94-39	13814-13817	new	
94-40	13818-13821	one	
94-41	13821-13822	.	

#Text=This procedure, while much longer, won’t require any long running locks on the live tables.
95-1	13823-13827	This	
95-2	13828-13837	procedure	
95-3	13837-13838	,	
95-4	13839-13844	while	
95-5	13845-13849	much	
95-6	13850-13856	longer	
95-7	13856-13857	,	
95-8	13858-13861	won	
95-9	13861-13862	’	
95-10	13862-13863	t	
95-11	13864-13871	require	
95-12	13872-13875	any	
95-13	13876-13880	long	
95-14	13881-13888	running	
95-15	13889-13894	locks	
95-16	13895-13897	on	
95-17	13898-13901	the	
95-18	13902-13906	live	
95-19	13907-13913	tables	
95-20	13913-13914	.	

#Text=Postgres provides a lot of flexibility when it comes to creating B-tree indexes that are optimized to your specific use cases, as well as options for managing the ever-growing database behind your applications.
96-1	13915-13923	Postgres	
96-2	13924-13932	provides	
96-3	13933-13934	a	
96-4	13935-13938	lot	
96-5	13939-13941	of	
96-6	13942-13953	flexibility	
96-7	13954-13958	when	
96-8	13959-13961	it	
96-9	13962-13967	comes	
96-10	13968-13970	to	
96-11	13971-13979	creating	
96-12	13980-13986	B-tree	
96-13	13987-13994	indexes	
96-14	13995-13999	that	
96-15	14000-14003	are	
96-16	14004-14013	optimized	
96-17	14014-14016	to	
96-18	14017-14021	your	
96-19	14022-14030	specific	
96-20	14031-14034	use	
96-21	14035-14040	cases	
96-22	14040-14041	,	
96-23	14042-14044	as	
96-24	14045-14049	well	
96-25	14050-14052	as	
96-26	14053-14060	options	
96-27	14061-14064	for	
96-28	14065-14073	managing	
96-29	14074-14077	the	
96-30	14078-14090	ever-growing	
96-31	14091-14099	database	
96-32	14100-14106	behind	
96-33	14107-14111	your	
96-34	14112-14124	applications	
96-35	14124-14125	.	

#Text=These tips should help you keep your database healthy, and your queries snappy.
97-1	14126-14131	These	
97-2	14132-14136	tips	
97-3	14137-14143	should	
97-4	14144-14148	help	
97-5	14149-14152	you	
97-6	14153-14157	keep	
97-7	14158-14162	your	
97-8	14163-14171	database	
97-9	14172-14179	healthy	
97-10	14179-14180	,	
97-11	14181-14184	and	
97-12	14185-14189	your	
97-13	14190-14197	queries	
97-14	14198-14204	snappy	
97-15	14204-14205	.	

#Text=Keep readingPostgres Performance
#Text=FeedbackLog in to submit feedback.
98-1	14206-14210	Keep	
98-2	14211-14226	readingPostgres	
98-3	14227-14238	Performance	
98-4	14239-14250	FeedbackLog	
98-5	14251-14253	in	
98-6	14254-14256	to	
98-7	14257-14263	submit	
98-8	14264-14272	feedback	
98-9	14272-14273	.	

#Text=Understanding Heroku Postgres Data Caching
#Text=Expensive Queries
#Text=Information & SupportGetting StartedDocumentationChangelogCompliance CenterTraining & EducationBlogPodcastsSupport ChannelsStatusLanguage ReferenceNode.jsRubyJavaPHPPythonGoScalaClojureOther ResourcesCareersElementsProductsPricingSubscribe to our monthly newsletterYour email address: RSSDev Center ArticlesDev Center ChangelogHeroku BlogHeroku News BlogHeroku Engineering Blog Heroku Podcasts TwitterDev Center ArticlesDev Center ChangelogHerokuHeroku Status Facebook Instagram Github LinkedInYouTubeHeroku is acompany © Salesforce.comheroku.comTerms of ServicePrivacyCookies
99-1	14274-14287	Understanding	
99-2	14288-14294	Heroku	
99-3	14295-14303	Postgres	
99-4	14304-14308	Data	
99-5	14309-14316	Caching	
99-6	14317-14326	Expensive	
99-7	14327-14334	Queries	
99-8	14335-14346	Information	
99-9	14347-14348	&	
99-10	14349-14363	SupportGetting	
99-11	14364-14403	StartedDocumentationChangelogCompliance	
99-12	14404-14418	CenterTraining	
99-13	14419-14420	&	
99-14	14421-14449	EducationBlogPodcastsSupport	
99-15	14450-14472	ChannelsStatusLanguage	
99-16	14473-14525	ReferenceNode.jsRubyJavaPHPPythonGoScalaClojureOther	
99-17	14526-14574	ResourcesCareersElementsProductsPricingSubscribe	
99-18	14575-14577	to	
99-19	14578-14581	our	
99-20	14582-14589	monthly	
99-21	14590-14604	newsletterYour	
99-22	14605-14610	email	
99-23	14611-14618	address	
99-24	14618-14619	:	
99-25	14620-14626	RSSDev	
99-26	14627-14633	Center	
99-27	14634-14645	ArticlesDev	
99-28	14646-14652	Center	
99-29	14653-14668	ChangelogHeroku	
99-30	14669-14679	BlogHeroku	
99-31	14680-14684	News	
99-32	14685-14695	BlogHeroku	
99-33	14696-14707	Engineering	
99-34	14708-14712	Blog	
99-35	14713-14719	Heroku	
99-36	14720-14728	Podcasts	
99-37	14729-14739	TwitterDev	
99-38	14740-14746	Center	
99-39	14747-14758	ArticlesDev	
99-40	14759-14765	Center	
99-41	14766-14787	ChangelogHerokuHeroku	
99-42	14788-14794	Status	
99-43	14795-14803	Facebook	
99-44	14804-14813	Instagram	
99-45	14814-14820	Github	
99-46	14821-14842	LinkedInYouTubeHeroku	
99-47	14843-14845	is	
99-48	14846-14854	acompany	
99-49	14854-14855	 	
99-50	14855-14856	©	
99-51	14857-14886	Salesforce.comheroku.comTerms	
99-52	14887-14889	of	
99-53	14890-14911	ServicePrivacyCookies	
