#FORMAT=WebAnno TSV 3.3


#Text=Bruce Momjian: Postgres Blog Home Blogs General Postgres Comment Events FAQ Favorites Articles Books Children Documents Hobbies
1-1	0-5	Bruce	
1-2	6-13	Momjian	
1-3	13-14	:	
1-4	15-23	Postgres	
1-5	24-28	Blog	
1-6	29-33	Home	
1-7	34-39	Blogs	
1-8	40-47	General	
1-9	48-56	Postgres	
1-10	57-64	Comment	
1-11	65-71	Events	
1-12	72-75	FAQ	
1-13	76-85	Favorites	
1-14	86-94	Articles	
1-15	95-100	Books	
1-16	101-109	Children	
1-17	110-119	Documents	
1-18	120-127	Hobbies	

#Text=Movies Music Periodicals Quotes Sayings Television Videos Artistic Humorous Serious News Presentations PG Admin. PG Book PG Extended PG Internals
2-1	128-134	Movies	
2-2	135-140	Music	
2-3	141-152	Periodicals	
2-4	153-159	Quotes	
2-5	160-167	Sayings	
2-6	168-178	Television	
2-7	179-185	Videos	
2-8	186-194	Artistic	
2-9	195-203	Humorous	
2-10	204-211	Serious	
2-11	212-216	News	
2-12	217-230	Presentations	
2-13	231-233	PG	
2-14	234-239	Admin	
2-15	239-240	.	
2-16	241-243	PG	
2-17	244-248	Book	
2-18	249-251	PG	
2-19	252-260	Extended	
2-20	261-263	PG	
2-21	264-273	Internals	

#Text=Open Source PG Perform. PG Project PG SQL Security General Selecting Press Résumé Search Travel Map Contact Private Area Postgres Blog
3-1	274-278	Open	
3-2	279-285	Source	
3-3	286-288	PG	
3-4	289-296	Perform	
3-5	296-297	.	
3-6	298-300	PG	
3-7	301-308	Project	
3-8	309-311	PG	
3-9	312-315	SQL	
3-10	316-324	Security	
3-11	325-332	General	
3-12	333-342	Selecting	
3-13	343-348	Press	
3-14	349-355	Résumé	
3-15	356-362	Search	
3-16	363-369	Travel	
3-17	370-373	Map	
3-18	374-381	Contact	
3-19	382-389	Private	
3-20	390-394	Area	
3-21	395-403	Postgres	
3-22	404-408	Blog	

#Text=This blog is about my work on the Postgres open source database, and is published on Planet PostgreSQL. PgLife allows monitoring of all Postgres community activity. Online status: Unread Postgres emails: Email graphs: incoming, outgoing, unread,
4-1	409-413	This	
4-2	414-418	blog	
4-3	419-421	is	
4-4	422-427	about	
4-5	428-430	my	
4-6	431-435	work	
4-7	436-438	on	
4-8	439-442	the	
4-9	443-451	Postgres	
4-10	452-456	open	
4-11	457-463	source	
4-12	464-472	database	
4-13	472-473	,	
4-14	474-477	and	
4-15	478-480	is	
4-16	481-490	published	
4-17	491-493	on	
4-18	494-500	Planet	
4-19	501-511	PostgreSQL	
4-20	511-512	.	
4-21	513-519	PgLife	
4-22	520-526	allows	
4-23	527-537	monitoring	
4-24	538-540	of	
4-25	541-544	all	
4-26	545-553	Postgres	
4-27	554-563	community	
4-28	564-572	activity	
4-29	572-573	.	
4-30	574-580	Online	
4-31	581-587	status	
4-32	587-588	:	
4-33	589-595	Unread	
4-34	596-604	Postgres	
4-35	605-611	emails	
4-36	611-612	:	
4-37	613-618	Email	
4-38	619-625	graphs	
4-39	625-626	:	
4-40	627-635	incoming	
4-41	635-636	,	
4-42	637-645	outgoing	
4-43	645-646	,	
4-44	647-653	unread	
4-45	653-654	,	

#Text=commits (details) Category Index 2021 2020 2019 2018 2017 2016 2015 2014 2013 2012 2011 2010 2009 2008 Yearly Chart Thirty Years of Continuous PostgreSQL Development
5-1	655-662	commits	
5-2	663-664	(	
5-3	664-671	details	
5-4	671-672	)	
5-5	673-681	Category	
5-6	682-687	Index	
5-7	688-692	2021	
5-8	693-697	2020	
5-9	698-702	2019	
5-10	703-707	2018	
5-11	708-712	2017	
5-12	713-717	2016	
5-13	718-722	2015	
5-14	723-727	2014	
5-15	728-732	2013	
5-16	733-737	2012	
5-17	738-742	2011	
5-18	743-747	2010	
5-19	748-752	2009	
5-20	753-757	2008	
5-21	758-764	Yearly	
5-22	765-770	Chart	
5-23	771-777	Thirty	
5-24	778-783	Years	
5-25	784-786	of	
5-26	787-797	Continuous	
5-27	798-808	PostgreSQL	
5-28	809-820	Development	

#Text=Wednesday, October 14, 2020 I did an interview with edb recently, and a blog post based on that interview was published yesterday. It covers the Postgres 13 feature set and the effects of open source on the software development process. View or Post Comments Community Impact of 2nd Quadrant Purchase
6-1	821-830	Wednesday	
6-2	830-831	,	
6-3	832-839	October	
6-4	840-842	14	
6-5	842-843	,	
6-6	844-848	2020	
6-7	849-850	I	
6-8	851-854	did	
6-9	855-857	an	
6-10	858-867	interview	
6-11	868-872	with	
6-12	873-876	edb	
6-13	877-885	recently	
6-14	885-886	,	
6-15	887-890	and	
6-16	891-892	a	
6-17	893-897	blog	
6-18	898-902	post	
6-19	903-908	based	
6-20	909-911	on	
6-21	912-916	that	
6-22	917-926	interview	
6-23	927-930	was	
6-24	931-940	published	
6-25	941-950	yesterday	
6-26	950-951	.	
6-27	952-954	It	
6-28	955-961	covers	
6-29	962-965	the	
6-30	966-974	Postgres	
6-31	975-977	13	
6-32	978-985	feature	
6-33	986-989	set	
6-34	990-993	and	
6-35	994-997	the	
6-36	998-1005	effects	
6-37	1006-1008	of	
6-38	1009-1013	open	
6-39	1014-1020	source	
6-40	1021-1023	on	
6-41	1024-1027	the	
6-42	1028-1036	software	
6-43	1037-1048	development	
6-44	1049-1056	process	
6-45	1056-1057	.	
6-46	1058-1062	View	
6-47	1063-1065	or	
6-48	1066-1070	Post	
6-49	1071-1079	Comments	
6-50	1080-1089	Community	
6-51	1090-1096	Impact	
6-52	1097-1099	of	
6-53	1100-1103	2nd	
6-54	1104-1112	Quadrant	
6-55	1113-1121	Purchase	

#Text=Wednesday, October 7, 2020 Last week 2nd Quadrant was purchased by edb. While this is certainly good news for these companies, it can increase risks to the Postgres community. First, there is an
7-1	1122-1131	Wednesday	
7-2	1131-1132	,	
7-3	1133-1140	October	
7-4	1141-1142	7	
7-5	1142-1143	,	
7-6	1144-1148	2020	
7-7	1149-1153	Last	
7-8	1154-1158	week	
7-9	1159-1162	2nd	
7-10	1163-1171	Quadrant	
7-11	1172-1175	was	
7-12	1176-1185	purchased	
7-13	1186-1188	by	
7-14	1189-1192	edb	
7-15	1192-1193	.	
7-16	1194-1199	While	
7-17	1200-1204	this	
7-18	1205-1207	is	
7-19	1208-1217	certainly	
7-20	1218-1222	good	
7-21	1223-1227	news	
7-22	1228-1231	for	
7-23	1232-1237	these	
7-24	1238-1247	companies	
7-25	1247-1248	,	
7-26	1249-1251	it	
7-27	1252-1255	can	
7-28	1256-1264	increase	
7-29	1265-1270	risks	
7-30	1271-1273	to	
7-31	1274-1277	the	
7-32	1278-1286	Postgres	
7-33	1287-1296	community	
7-34	1296-1297	.	
7-35	1298-1303	First	
7-36	1303-1304	,	
7-37	1305-1310	there	
7-38	1311-1313	is	
7-39	1314-1316	an	

#Text=unwritten rule that the Postgres core team should not have over half of its members from a single company, and the acquisition causes edb's representation in the core team to be 60% — the core team is working on a solution for this. Second, two companies becoming one reduces Postgres user choice for support and services, especially in the North American and western European markets. Reduced vendor options often results in a worse
8-1	1317-1326	unwritten	
8-2	1327-1331	rule	
8-3	1332-1336	that	
8-4	1337-1340	the	
8-5	1341-1349	Postgres	
8-6	1350-1354	core	
8-7	1355-1359	team	
8-8	1360-1366	should	
8-9	1367-1370	not	
8-10	1371-1375	have	
8-11	1376-1380	over	
8-12	1381-1385	half	
8-13	1386-1388	of	
8-14	1389-1392	its	
8-15	1393-1400	members	
8-16	1401-1405	from	
8-17	1406-1407	a	
8-18	1408-1414	single	
8-19	1415-1422	company	
8-20	1422-1423	,	
8-21	1424-1427	and	
8-22	1428-1431	the	
8-23	1432-1443	acquisition	
8-24	1444-1450	causes	
8-25	1451-1456	edb's	
8-26	1457-1471	representation	
8-27	1472-1474	in	
8-28	1475-1478	the	
8-29	1479-1483	core	
8-30	1484-1488	team	
8-31	1489-1491	to	
8-32	1492-1494	be	
8-33	1495-1498	60%	
8-34	1499-1500	—	
8-35	1501-1504	the	
8-36	1505-1509	core	
8-37	1510-1514	team	
8-38	1515-1517	is	
8-39	1518-1525	working	
8-40	1526-1528	on	
8-41	1529-1530	a	
8-42	1531-1539	solution	
8-43	1540-1543	for	
8-44	1544-1548	this	
8-45	1548-1549	.	
8-46	1550-1556	Second	
8-47	1556-1557	,	
8-48	1558-1561	two	
8-49	1562-1571	companies	
8-50	1572-1580	becoming	
8-51	1581-1584	one	
8-52	1585-1592	reduces	
8-53	1593-1601	Postgres	
8-54	1602-1606	user	
8-55	1607-1613	choice	
8-56	1614-1617	for	
8-57	1618-1625	support	
8-58	1626-1629	and	
8-59	1630-1638	services	
8-60	1638-1639	,	
8-61	1640-1650	especially	
8-62	1651-1653	in	
8-63	1654-1657	the	
8-64	1658-1663	North	
8-65	1664-1672	American	
8-66	1673-1676	and	
8-67	1677-1684	western	
8-68	1685-1693	European	
8-69	1694-1701	markets	
8-70	1701-1702	.	
8-71	1703-1710	Reduced	
8-72	1711-1717	vendor	
8-73	1718-1725	options	
8-74	1726-1731	often	
8-75	1732-1739	results	
8-76	1740-1742	in	
8-77	1743-1744	a	
8-78	1745-1750	worse	

#Text=customer service and less innovation. Since the Postgres community does independent innovation, this might not be an issue for community software, but could be for company-controlled tooling around Postgres. Third, there is the risk that an even larger company wanting to hurt Postgres could acquire edb and take it in a direction that is neutral or negative for the Postgres community.
9-1	1751-1759	customer	
9-2	1760-1767	service	
9-3	1768-1771	and	
9-4	1772-1776	less	
9-5	1777-1787	innovation	
9-6	1787-1788	.	
9-7	1789-1794	Since	
9-8	1795-1798	the	
9-9	1799-1807	Postgres	
9-10	1808-1817	community	
9-11	1818-1822	does	
9-12	1823-1834	independent	
9-13	1835-1845	innovation	
9-14	1845-1846	,	
9-15	1847-1851	this	
9-16	1852-1857	might	
9-17	1858-1861	not	
9-18	1862-1864	be	
9-19	1865-1867	an	
9-20	1868-1873	issue	
9-21	1874-1877	for	
9-22	1878-1887	community	
9-23	1888-1896	software	
9-24	1896-1897	,	
9-25	1898-1901	but	
9-26	1902-1907	could	
9-27	1908-1910	be	
9-28	1911-1914	for	
9-29	1915-1933	company-controlled	
9-30	1934-1941	tooling	
9-31	1942-1948	around	
9-32	1949-1957	Postgres	
9-33	1957-1958	.	
9-34	1959-1964	Third	
9-35	1964-1965	,	
9-36	1966-1971	there	
9-37	1972-1974	is	
9-38	1975-1978	the	
9-39	1979-1983	risk	
9-40	1984-1988	that	
9-41	1989-1991	an	
9-42	1992-1996	even	
9-43	1997-2003	larger	
9-44	2004-2011	company	
9-45	2012-2019	wanting	
9-46	2020-2022	to	
9-47	2023-2027	hurt	
9-48	2028-2036	Postgres	
9-49	2037-2042	could	
9-50	2043-2050	acquire	
9-51	2051-2054	edb	
9-52	2055-2058	and	
9-53	2059-2063	take	
9-54	2064-2066	it	
9-55	2067-2069	in	
9-56	2070-2071	a	
9-57	2072-2081	direction	
9-58	2082-2086	that	
9-59	2087-2089	is	
9-60	2090-2097	neutral	
9-61	2098-2100	or	
9-62	2101-2109	negative	
9-63	2110-2113	for	
9-64	2114-2117	the	
9-65	2118-2126	Postgres	
9-66	2127-2136	community	
9-67	2136-2137	.	

#Text=Employee non-compete agreements, and the lack of other Postgres support companies could extend the duration of these effects. There isn't much the community can do to minimize these issues but to be alert for problems. Update: Hacker News thread and tweet 2020-10-07
10-1	2138-2146	Employee	
10-2	2147-2158	non-compete	
10-3	2159-2169	agreements	
10-4	2169-2170	,	
10-5	2171-2174	and	
10-6	2175-2178	the	
10-7	2179-2183	lack	
10-8	2184-2186	of	
10-9	2187-2192	other	
10-10	2193-2201	Postgres	
10-11	2202-2209	support	
10-12	2210-2219	companies	
10-13	2220-2225	could	
10-14	2226-2232	extend	
10-15	2233-2236	the	
10-16	2237-2245	duration	
10-17	2246-2248	of	
10-18	2249-2254	these	
10-19	2255-2262	effects	
10-20	2262-2263	.	
10-21	2264-2269	There	
10-22	2270-2275	isn't	
10-23	2276-2280	much	
10-24	2281-2284	the	
10-25	2285-2294	community	
10-26	2295-2298	can	
10-27	2299-2301	do	
10-28	2302-2304	to	
10-29	2305-2313	minimize	
10-30	2314-2319	these	
10-31	2320-2326	issues	
10-32	2327-2330	but	
10-33	2331-2333	to	
10-34	2334-2336	be	
10-35	2337-2342	alert	
10-36	2343-2346	for	
10-37	2347-2355	problems	
10-38	2355-2356	.	
10-39	2357-2363	Update	
10-40	2363-2364	:	
10-41	2365-2371	Hacker	
10-42	2372-2376	News	
10-43	2377-2383	thread	
10-44	2384-2387	and	
10-45	2388-2393	tweet	
10-46	2394-2398	2020	
10-47	2398-2399	-	
10-48	2399-2401	10	
10-49	2401-2402	-	
10-50	2402-2404	07	

#Text=View or Post Comments The Economics of Open Source Contributions Friday, October 2, 2020 This long article describes the many challenges of managing open source projects and the mismatch between resource allocation, e.g., money, and the importance of the software to economic activity.
11-1	2405-2409	View	
11-2	2410-2412	or	
11-3	2413-2417	Post	
11-4	2418-2426	Comments	
11-5	2427-2430	The	
11-6	2431-2440	Economics	
11-7	2441-2443	of	
11-8	2444-2448	Open	
11-9	2449-2455	Source	
11-10	2456-2469	Contributions	
11-11	2470-2476	Friday	
11-12	2476-2477	,	
11-13	2478-2485	October	
11-14	2486-2487	2	
11-15	2487-2488	,	
11-16	2489-2493	2020	
11-17	2494-2498	This	
11-18	2499-2503	long	
11-19	2504-2511	article	
11-20	2512-2521	describes	
11-21	2522-2525	the	
11-22	2526-2530	many	
11-23	2531-2541	challenges	
11-24	2542-2544	of	
11-25	2545-2553	managing	
11-26	2554-2558	open	
11-27	2559-2565	source	
11-28	2566-2574	projects	
11-29	2575-2578	and	
11-30	2579-2582	the	
11-31	2583-2591	mismatch	
11-32	2592-2599	between	
11-33	2600-2608	resource	
11-34	2609-2619	allocation	
11-35	2619-2620	,	
11-36	2621-2624	e.g	
11-37	2624-2625	.	
11-38	2625-2626	,	
11-39	2627-2632	money	
11-40	2632-2633	,	
11-41	2634-2637	and	
11-42	2638-2641	the	
11-43	2642-2652	importance	
11-44	2653-2655	of	
11-45	2656-2659	the	
11-46	2660-2668	software	
11-47	2669-2671	to	
11-48	2672-2680	economic	
11-49	2681-2689	activity	
11-50	2689-2690	.	

#Text=It highlights OpenSSL as an example where limited funding led to developer burnout and security vulnerabilities, even though so much of the Internet's infrastructure relies on it. With proprietary software, there is usually a connection between software cost and its economic value, though the linkage varies widely.
12-1	2691-2693	It	
12-2	2694-2704	highlights	
12-3	2705-2712	OpenSSL	
12-4	2713-2715	as	
12-5	2716-2718	an	
12-6	2719-2726	example	
12-7	2727-2732	where	
12-8	2733-2740	limited	
12-9	2741-2748	funding	
12-10	2749-2752	led	
12-11	2753-2755	to	
12-12	2756-2765	developer	
12-13	2766-2773	burnout	
12-14	2774-2777	and	
12-15	2778-2786	security	
12-16	2787-2802	vulnerabilities	
12-17	2802-2803	,	
12-18	2804-2808	even	
12-19	2809-2815	though	
12-20	2816-2818	so	
12-21	2819-2823	much	
12-22	2824-2826	of	
12-23	2827-2830	the	
12-24	2831-2841	Internet's	
12-25	2842-2856	infrastructure	
12-26	2857-2863	relies	
12-27	2864-2866	on	
12-28	2867-2869	it	
12-29	2869-2870	.	
12-30	2871-2875	With	
12-31	2876-2887	proprietary	
12-32	2888-2896	software	
12-33	2896-2897	,	
12-34	2898-2903	there	
12-35	2904-2906	is	
12-36	2907-2914	usually	
12-37	2915-2916	a	
12-38	2917-2927	connection	
12-39	2928-2935	between	
12-40	2936-2944	software	
12-41	2945-2949	cost	
12-42	2950-2953	and	
12-43	2954-2957	its	
12-44	2958-2966	economic	
12-45	2967-2972	value	
12-46	2972-2973	,	
12-47	2974-2980	though	
12-48	2981-2984	the	
12-49	2985-2992	linkage	
12-50	2993-2999	varies	
12-51	3000-3006	widely	
12-52	3006-3007	.	

#Text=(How much of software's cost goes into software development, testing, bug fixing, and security analysis has even greater variability.) With open source, there is even less linkage. The article explores various methods to increase the linkage. It is a complex problem, both to get money, and to distribute money in a way that helps and does not harm open source communities.
13-1	3008-3009	(	
13-2	3009-3012	How	
13-3	3013-3017	much	
13-4	3018-3020	of	
13-5	3021-3031	software's	
13-6	3032-3036	cost	
13-7	3037-3041	goes	
13-8	3042-3046	into	
13-9	3047-3055	software	
13-10	3056-3067	development	
13-11	3067-3068	,	
13-12	3069-3076	testing	
13-13	3076-3077	,	
13-14	3078-3081	bug	
13-15	3082-3088	fixing	
13-16	3088-3089	,	
13-17	3090-3093	and	
13-18	3094-3102	security	
13-19	3103-3111	analysis	
13-20	3112-3115	has	
13-21	3116-3120	even	
13-22	3121-3128	greater	
13-23	3129-3140	variability	
13-24	3140-3141	.	
13-25	3141-3142	)	
13-26	3143-3147	With	
13-27	3148-3152	open	
13-28	3153-3159	source	
13-29	3159-3160	,	
13-30	3161-3166	there	
13-31	3167-3169	is	
13-32	3170-3174	even	
13-33	3175-3179	less	
13-34	3180-3187	linkage	
13-35	3187-3188	.	
13-36	3189-3192	The	
13-37	3193-3200	article	
13-38	3201-3209	explores	
13-39	3210-3217	various	
13-40	3218-3225	methods	
13-41	3226-3228	to	
13-42	3229-3237	increase	
13-43	3238-3241	the	
13-44	3242-3249	linkage	
13-45	3249-3250	.	
13-46	3251-3253	It	
13-47	3254-3256	is	
13-48	3257-3258	a	
13-49	3259-3266	complex	
13-50	3267-3274	problem	
13-51	3274-3275	,	
13-52	3276-3280	both	
13-53	3281-3283	to	
13-54	3284-3287	get	
13-55	3288-3293	money	
13-56	3293-3294	,	
13-57	3295-3298	and	
13-58	3299-3301	to	
13-59	3302-3312	distribute	
13-60	3313-3318	money	
13-61	3319-3321	in	
13-62	3322-3323	a	
13-63	3324-3327	way	
13-64	3328-3332	that	
13-65	3333-3338	helps	
13-66	3339-3342	and	
13-67	3343-3347	does	
13-68	3348-3351	not	
13-69	3352-3356	harm	
13-70	3357-3361	open	
13-71	3362-3368	source	
13-72	3369-3380	communities	
13-73	3380-3381	.	

#Text=Postgres has been fortunate in this regard. Funding from Red Hat and Japanese companies (Fujitsu, ntt, sra) helped support critical Postgres activities in the community's early years. The special nature of database software has formed an environment where the Postgres community has had healthy infrastructure,
14-1	3382-3390	Postgres	
14-2	3391-3394	has	
14-3	3395-3399	been	
14-4	3400-3409	fortunate	
14-5	3410-3412	in	
14-6	3413-3417	this	
14-7	3418-3424	regard	
14-8	3424-3425	.	
14-9	3426-3433	Funding	
14-10	3434-3438	from	
14-11	3439-3442	Red	
14-12	3443-3446	Hat	
14-13	3447-3450	and	
14-14	3451-3459	Japanese	
14-15	3460-3469	companies	
14-16	3470-3471	(	
14-17	3471-3478	Fujitsu	
14-18	3478-3479	,	
14-19	3480-3483	ntt	
14-20	3483-3484	,	
14-21	3485-3488	sra	
14-22	3488-3489	)	
14-23	3490-3496	helped	
14-24	3497-3504	support	
14-25	3505-3513	critical	
14-26	3514-3522	Postgres	
14-27	3523-3533	activities	
14-28	3534-3536	in	
14-29	3537-3540	the	
14-30	3541-3552	community's	
14-31	3553-3558	early	
14-32	3559-3564	years	
14-33	3564-3565	.	
14-34	3566-3569	The	
14-35	3570-3577	special	
14-36	3578-3584	nature	
14-37	3585-3587	of	
14-38	3588-3596	database	
14-39	3597-3605	software	
14-40	3606-3609	has	
14-41	3610-3616	formed	
14-42	3617-3619	an	
14-43	3620-3631	environment	
14-44	3632-3637	where	
14-45	3638-3641	the	
14-46	3642-3650	Postgres	
14-47	3651-3660	community	
14-48	3661-3664	has	
14-49	3665-3668	had	
14-50	3669-3676	healthy	
14-51	3677-3691	infrastructure	
14-52	3691-3692	,	

#Text=governance, management, and contributors for over a decade. On an individual level, we do see these problems. Some contributors take on tasks that yield them little or no short-term benefit, while incurring huge time and emotional costs. Some users ask the community for assistance with the minimal amount of information, assuming we will guess their intent, or that we will dig into their bug report with them doing no research.
15-1	3693-3703	governance	
15-2	3703-3704	,	
15-3	3705-3715	management	
15-4	3715-3716	,	
15-5	3717-3720	and	
15-6	3721-3733	contributors	
15-7	3734-3737	for	
15-8	3738-3742	over	
15-9	3743-3744	a	
15-10	3745-3751	decade	
15-11	3751-3752	.	
15-12	3753-3755	On	
15-13	3756-3758	an	
15-14	3759-3769	individual	
15-15	3770-3775	level	
15-16	3775-3776	,	
15-17	3777-3779	we	
15-18	3780-3782	do	
15-19	3783-3786	see	
15-20	3787-3792	these	
15-21	3793-3801	problems	
15-22	3801-3802	.	
15-23	3803-3807	Some	
15-24	3808-3820	contributors	
15-25	3821-3825	take	
15-26	3826-3828	on	
15-27	3829-3834	tasks	
15-28	3835-3839	that	
15-29	3840-3845	yield	
15-30	3846-3850	them	
15-31	3851-3857	little	
15-32	3858-3860	or	
15-33	3861-3863	no	
15-34	3864-3874	short-term	
15-35	3875-3882	benefit	
15-36	3882-3883	,	
15-37	3884-3889	while	
15-38	3890-3899	incurring	
15-39	3900-3904	huge	
15-40	3905-3909	time	
15-41	3910-3913	and	
15-42	3914-3923	emotional	
15-43	3924-3929	costs	
15-44	3929-3930	.	
15-45	3931-3935	Some	
15-46	3936-3941	users	
15-47	3942-3945	ask	
15-48	3946-3949	the	
15-49	3950-3959	community	
15-50	3960-3963	for	
15-51	3964-3974	assistance	
15-52	3975-3979	with	
15-53	3980-3983	the	
15-54	3984-3991	minimal	
15-55	3992-3998	amount	
15-56	3999-4001	of	
15-57	4002-4013	information	
15-58	4013-4014	,	
15-59	4015-4023	assuming	
15-60	4024-4026	we	
15-61	4027-4031	will	
15-62	4032-4037	guess	
15-63	4038-4043	their	
15-64	4044-4050	intent	
15-65	4050-4051	,	
15-66	4052-4054	or	
15-67	4055-4059	that	
15-68	4060-4062	we	
15-69	4063-4067	will	
15-70	4068-4071	dig	
15-71	4072-4076	into	
15-72	4077-4082	their	
15-73	4083-4086	bug	
15-74	4087-4093	report	
15-75	4094-4098	with	
15-76	4099-4103	them	
15-77	4104-4109	doing	
15-78	4110-4112	no	
15-79	4113-4121	research	
15-80	4121-4122	.	

#Text=I often just delete such emails from my mailbox. I sometimes get private emails asking for assistance, so I created a stock email reply that starts with, "Due to time constraints, I do not directly answer general PostgreSQL questions," and information on where to get help, e.g., email lists, irc,
16-1	4123-4124	I	
16-2	4125-4130	often	
16-3	4131-4135	just	
16-4	4136-4142	delete	
16-5	4143-4147	such	
16-6	4148-4154	emails	
16-7	4155-4159	from	
16-8	4160-4162	my	
16-9	4163-4170	mailbox	
16-10	4170-4171	.	
16-11	4172-4173	I	
16-12	4174-4183	sometimes	
16-13	4184-4187	get	
16-14	4188-4195	private	
16-15	4196-4202	emails	
16-16	4203-4209	asking	
16-17	4210-4213	for	
16-18	4214-4224	assistance	
16-19	4224-4225	,	
16-20	4226-4228	so	
16-21	4229-4230	I	
16-22	4231-4238	created	
16-23	4239-4240	a	
16-24	4241-4246	stock	
16-25	4247-4252	email	
16-26	4253-4258	reply	
16-27	4259-4263	that	
16-28	4264-4270	starts	
16-29	4271-4275	with	
16-30	4275-4276	,	
16-31	4277-4278	"	
16-32	4278-4281	Due	
16-33	4282-4284	to	
16-34	4285-4289	time	
16-35	4290-4301	constraints	
16-36	4301-4302	,	
16-37	4303-4304	I	
16-38	4305-4307	do	
16-39	4308-4311	not	
16-40	4312-4320	directly	
16-41	4321-4327	answer	
16-42	4328-4335	general	
16-43	4336-4346	PostgreSQL	
16-44	4347-4356	questions	
16-45	4356-4357	,	
16-46	4357-4358	"	
16-47	4359-4362	and	
16-48	4363-4374	information	
16-49	4375-4377	on	
16-50	4378-4383	where	
16-51	4384-4386	to	
16-52	4387-4390	get	
16-53	4391-4395	help	
16-54	4395-4396	,	
16-55	4397-4400	e.g	
16-56	4400-4401	.	
16-57	4401-4402	,	
16-58	4403-4408	email	
16-59	4409-4414	lists	
16-60	4414-4415	,	
16-61	4416-4419	irc	
16-62	4419-4420	,	

#Text=faq. This Slashdot post paints a good picture of how to handle the many demands of open source development. Open source has been mainstream for at least a decade, so it will be interesting to see if generally-accepted solutions are ever found, or if this will continue be an area of confusion and hand-wringing,
17-1	4421-4424	faq	
17-2	4424-4425	.	
17-3	4426-4430	This	
17-4	4431-4439	Slashdot	
17-5	4440-4444	post	
17-6	4445-4451	paints	
17-7	4452-4453	a	
17-8	4454-4458	good	
17-9	4459-4466	picture	
17-10	4467-4469	of	
17-11	4470-4473	how	
17-12	4474-4476	to	
17-13	4477-4483	handle	
17-14	4484-4487	the	
17-15	4488-4492	many	
17-16	4493-4500	demands	
17-17	4501-4503	of	
17-18	4504-4508	open	
17-19	4509-4515	source	
17-20	4516-4527	development	
17-21	4527-4528	.	
17-22	4529-4533	Open	
17-23	4534-4540	source	
17-24	4541-4544	has	
17-25	4545-4549	been	
17-26	4550-4560	mainstream	
17-27	4561-4564	for	
17-28	4565-4567	at	
17-29	4568-4573	least	
17-30	4574-4575	a	
17-31	4576-4582	decade	
17-32	4582-4583	,	
17-33	4584-4586	so	
17-34	4587-4589	it	
17-35	4590-4594	will	
17-36	4595-4597	be	
17-37	4598-4609	interesting	
17-38	4610-4612	to	
17-39	4613-4616	see	
17-40	4617-4619	if	
17-41	4620-4638	generally-accepted	
17-42	4639-4648	solutions	
17-43	4649-4652	are	
17-44	4653-4657	ever	
17-45	4658-4663	found	
17-46	4663-4664	,	
17-47	4665-4667	or	
17-48	4668-4670	if	
17-49	4671-4675	this	
17-50	4676-4680	will	
17-51	4681-4689	continue	
17-52	4690-4692	be	
17-53	4693-4695	an	
17-54	4696-4700	area	
17-55	4701-4703	of	
17-56	4704-4713	confusion	
17-57	4714-4717	and	
17-58	4718-4731	hand-wringing	
17-59	4731-4732	,	

#Text=even though open source software use continues to grow. View or Post Comments Three Postgres Adoption Groups in Enterprises Wednesday, September 30, 2020 Having watched Postgres grow in popularity over the years, I have seen my share of organizations with competing teams, some promoting Postgres, other dismissing it.
18-1	4733-4737	even	
18-2	4738-4744	though	
18-3	4745-4749	open	
18-4	4750-4756	source	
18-5	4757-4765	software	
18-6	4766-4769	use	
18-7	4770-4779	continues	
18-8	4780-4782	to	
18-9	4783-4787	grow	
18-10	4787-4788	.	
18-11	4789-4793	View	
18-12	4794-4796	or	
18-13	4797-4801	Post	
18-14	4802-4810	Comments	
18-15	4811-4816	Three	
18-16	4817-4825	Postgres	
18-17	4826-4834	Adoption	
18-18	4835-4841	Groups	
18-19	4842-4844	in	
18-20	4845-4856	Enterprises	
18-21	4857-4866	Wednesday	
18-22	4866-4867	,	
18-23	4868-4877	September	
18-24	4878-4880	30	
18-25	4880-4881	,	
18-26	4882-4886	2020	
18-27	4887-4893	Having	
18-28	4894-4901	watched	
18-29	4902-4910	Postgres	
18-30	4911-4915	grow	
18-31	4916-4918	in	
18-32	4919-4929	popularity	
18-33	4930-4934	over	
18-34	4935-4938	the	
18-35	4939-4944	years	
18-36	4944-4945	,	
18-37	4946-4947	I	
18-38	4948-4952	have	
18-39	4953-4957	seen	
18-40	4958-4960	my	
18-41	4961-4966	share	
18-42	4967-4969	of	
18-43	4970-4983	organizations	
18-44	4984-4988	with	
18-45	4989-4998	competing	
18-46	4999-5004	teams	
18-47	5004-5005	,	
18-48	5006-5010	some	
18-49	5011-5020	promoting	
18-50	5021-5029	Postgres	
18-51	5029-5030	,	
18-52	5031-5036	other	
18-53	5037-5047	dismissing	
18-54	5048-5050	it	
18-55	5050-5051	.	

#Text=I came up with this diagram (slide 23) which shows the three groups typically involved in deciding Postgres adoption. The groups are Managers, Administrators, and Developers. In this diagram, each group has things that motivate them listed below the group name.
19-1	5052-5053	I	
19-2	5054-5058	came	
19-3	5059-5061	up	
19-4	5062-5066	with	
19-5	5067-5071	this	
19-6	5072-5079	diagram	
19-7	5080-5081	(	
19-8	5081-5086	slide	
19-9	5087-5089	23	
19-10	5089-5090	)	
19-11	5091-5096	which	
19-12	5097-5102	shows	
19-13	5103-5106	the	
19-14	5107-5112	three	
19-15	5113-5119	groups	
19-16	5120-5129	typically	
19-17	5130-5138	involved	
19-18	5139-5141	in	
19-19	5142-5150	deciding	
19-20	5151-5159	Postgres	
19-21	5160-5168	adoption	
19-22	5168-5169	.	
19-23	5170-5173	The	
19-24	5174-5180	groups	
19-25	5181-5184	are	
19-26	5185-5193	Managers	
19-27	5193-5194	,	
19-28	5195-5209	Administrators	
19-29	5209-5210	,	
19-30	5211-5214	and	
19-31	5215-5225	Developers	
19-32	5225-5226	.	
19-33	5227-5229	In	
19-34	5230-5234	this	
19-35	5235-5242	diagram	
19-36	5242-5243	,	
19-37	5244-5248	each	
19-38	5249-5254	group	
19-39	5255-5258	has	
19-40	5259-5265	things	
19-41	5266-5270	that	
19-42	5271-5279	motivate	
19-43	5280-5284	them	
19-44	5285-5291	listed	
19-45	5292-5297	below	
19-46	5298-5301	the	
19-47	5302-5307	group	
19-48	5308-5312	name	
19-49	5312-5313	.	

#Text=Postgres adoption goes most smoothly when all three groups see value in Postgres. When talking to different groups in a company, you should consider what things motivate the group you are speaking to. You will also find the diagram helpful in identifying which groups are not excited about Postgres, and how to motivate them. View or Post Comments
20-1	5314-5322	Postgres	
20-2	5323-5331	adoption	
20-3	5332-5336	goes	
20-4	5337-5341	most	
20-5	5342-5350	smoothly	
20-6	5351-5355	when	
20-7	5356-5359	all	
20-8	5360-5365	three	
20-9	5366-5372	groups	
20-10	5373-5376	see	
20-11	5377-5382	value	
20-12	5383-5385	in	
20-13	5386-5394	Postgres	
20-14	5394-5395	.	
20-15	5396-5400	When	
20-16	5401-5408	talking	
20-17	5409-5411	to	
20-18	5412-5421	different	
20-19	5422-5428	groups	
20-20	5429-5431	in	
20-21	5432-5433	a	
20-22	5434-5441	company	
20-23	5441-5442	,	
20-24	5443-5446	you	
20-25	5447-5453	should	
20-26	5454-5462	consider	
20-27	5463-5467	what	
20-28	5468-5474	things	
20-29	5475-5483	motivate	
20-30	5484-5487	the	
20-31	5488-5493	group	
20-32	5494-5497	you	
20-33	5498-5501	are	
20-34	5502-5510	speaking	
20-35	5511-5513	to	
20-36	5513-5514	.	
20-37	5515-5518	You	
20-38	5519-5523	will	
20-39	5524-5528	also	
20-40	5529-5533	find	
20-41	5534-5537	the	
20-42	5538-5545	diagram	
20-43	5546-5553	helpful	
20-44	5554-5556	in	
20-45	5557-5568	identifying	
20-46	5569-5574	which	
20-47	5575-5581	groups	
20-48	5582-5585	are	
20-49	5586-5589	not	
20-50	5590-5597	excited	
20-51	5598-5603	about	
20-52	5604-5612	Postgres	
20-53	5612-5613	,	
20-54	5614-5617	and	
20-55	5618-5621	how	
20-56	5622-5624	to	
20-57	5625-5633	motivate	
20-58	5634-5638	them	
20-59	5638-5639	.	
20-60	5640-5644	View	
20-61	5645-5647	or	
20-62	5648-5652	Post	
20-63	5653-5661	Comments	

#Text=Cloud Vendor Monetization of Open Source Monday, September 28, 2020 Since open source became a powerful force in the software world, it has gone through several phases. The first phase was built around universities and volunteers, with little business involvement. open source grew, companies like Red Hat were created to simplify deployment of open source software in enterprises.
21-1	5662-5667	Cloud	
21-2	5668-5674	Vendor	
21-3	5675-5687	Monetization	
21-4	5688-5690	of	
21-5	5691-5695	Open	
21-6	5696-5702	Source	
21-7	5703-5709	Monday	
21-8	5709-5710	,	
21-9	5711-5720	September	
21-10	5721-5723	28	
21-11	5723-5724	,	
21-12	5725-5729	2020	
21-13	5730-5735	Since	
21-14	5736-5740	open	
21-15	5741-5747	source	
21-16	5748-5754	became	
21-17	5755-5756	a	
21-18	5757-5765	powerful	
21-19	5766-5771	force	
21-20	5772-5774	in	
21-21	5775-5778	the	
21-22	5779-5787	software	
21-23	5788-5793	world	
21-24	5793-5794	,	
21-25	5795-5797	it	
21-26	5798-5801	has	
21-27	5802-5806	gone	
21-28	5807-5814	through	
21-29	5815-5822	several	
21-30	5823-5829	phases	
21-31	5829-5830	.	
21-32	5831-5834	The	
21-33	5835-5840	first	
21-34	5841-5846	phase	
21-35	5847-5850	was	
21-36	5851-5856	built	
21-37	5857-5863	around	
21-38	5864-5876	universities	
21-39	5877-5880	and	
21-40	5881-5891	volunteers	
21-41	5891-5892	,	
21-42	5893-5897	with	
21-43	5898-5904	little	
21-44	5905-5913	business	
21-45	5914-5925	involvement	
21-46	5925-5926	.	
21-47	5927-5931	open	
21-48	5932-5938	source	
21-49	5939-5943	grew	
21-50	5943-5944	,	
21-51	5945-5954	companies	
21-52	5955-5959	like	
21-53	5960-5963	Red	
21-54	5964-5967	Hat	
21-55	5968-5972	were	
21-56	5973-5980	created	
21-57	5981-5983	to	
21-58	5984-5992	simplify	
21-59	5993-6003	deployment	
21-60	6004-6006	of	
21-61	6007-6011	open	
21-62	6012-6018	source	
21-63	6019-6027	software	
21-64	6028-6030	in	
21-65	6031-6042	enterprises	
21-66	6042-6043	.	

#Text=With the popularity of open source, companies that distributed their software as open source, but were company-controlled, started to proliferate, like MySQL. The distinction between openly-developed open source software and company-developed open source software is still not widely understood. One big distinction is that, for company-developed open source software, a company controls the development process, and bears
22-1	6044-6048	With	
22-2	6049-6052	the	
22-3	6053-6063	popularity	
22-4	6064-6066	of	
22-5	6067-6071	open	
22-6	6072-6078	source	
22-7	6078-6079	,	
22-8	6080-6089	companies	
22-9	6090-6094	that	
22-10	6095-6106	distributed	
22-11	6107-6112	their	
22-12	6113-6121	software	
22-13	6122-6124	as	
22-14	6125-6129	open	
22-15	6130-6136	source	
22-16	6136-6137	,	
22-17	6138-6141	but	
22-18	6142-6146	were	
22-19	6147-6165	company-controlled	
22-20	6165-6166	,	
22-21	6167-6174	started	
22-22	6175-6177	to	
22-23	6178-6189	proliferate	
22-24	6189-6190	,	
22-25	6191-6195	like	
22-26	6196-6201	MySQL	
22-27	6201-6202	.	
22-28	6203-6206	The	
22-29	6207-6218	distinction	
22-30	6219-6226	between	
22-31	6227-6243	openly-developed	
22-32	6244-6248	open	
22-33	6249-6255	source	
22-34	6256-6264	software	
22-35	6265-6268	and	
22-36	6269-6286	company-developed	
22-37	6287-6291	open	
22-38	6292-6298	source	
22-39	6299-6307	software	
22-40	6308-6310	is	
22-41	6311-6316	still	
22-42	6317-6320	not	
22-43	6321-6327	widely	
22-44	6328-6338	understood	
22-45	6338-6339	.	
22-46	6340-6343	One	
22-47	6344-6347	big	
22-48	6348-6359	distinction	
22-49	6360-6362	is	
22-50	6363-6367	that	
22-51	6367-6368	,	
22-52	6369-6372	for	
22-53	6373-6390	company-developed	
22-54	6391-6395	open	
22-55	6396-6402	source	
22-56	6403-6411	software	
22-57	6411-6412	,	
22-58	6413-6414	a	
22-59	6415-6422	company	
22-60	6423-6431	controls	
22-61	6432-6435	the	
22-62	6436-6447	development	
22-63	6448-6455	process	
22-64	6455-6456	,	
22-65	6457-6460	and	
22-66	6461-6466	bears	

#Text=the full cost of development, which leads to greater customer lock-in and potential future costs as the company maximizes its profits. Cloud vendors have upended many of the plans of companies built around open source. While open source is often valued by vendors and customers for its rapid proliferation and deployment, there was always a hope that expertise in the open source software would yield sufficient revenue opportunities.
23-1	6467-6470	the	
23-2	6471-6475	full	
23-3	6476-6480	cost	
23-4	6481-6483	of	
23-5	6484-6495	development	
23-6	6495-6496	,	
23-7	6497-6502	which	
23-8	6503-6508	leads	
23-9	6509-6511	to	
23-10	6512-6519	greater	
23-11	6520-6528	customer	
23-12	6529-6536	lock-in	
23-13	6537-6540	and	
23-14	6541-6550	potential	
23-15	6551-6557	future	
23-16	6558-6563	costs	
23-17	6564-6566	as	
23-18	6567-6570	the	
23-19	6571-6578	company	
23-20	6579-6588	maximizes	
23-21	6589-6592	its	
23-22	6593-6600	profits	
23-23	6600-6601	.	
23-24	6602-6607	Cloud	
23-25	6608-6615	vendors	
23-26	6616-6620	have	
23-27	6621-6628	upended	
23-28	6629-6633	many	
23-29	6634-6636	of	
23-30	6637-6640	the	
23-31	6641-6646	plans	
23-32	6647-6649	of	
23-33	6650-6659	companies	
23-34	6660-6665	built	
23-35	6666-6672	around	
23-36	6673-6677	open	
23-37	6678-6684	source	
23-38	6684-6685	.	
23-39	6686-6691	While	
23-40	6692-6696	open	
23-41	6697-6703	source	
23-42	6704-6706	is	
23-43	6707-6712	often	
23-44	6713-6719	valued	
23-45	6720-6722	by	
23-46	6723-6730	vendors	
23-47	6731-6734	and	
23-48	6735-6744	customers	
23-49	6745-6748	for	
23-50	6749-6752	its	
23-51	6753-6758	rapid	
23-52	6759-6772	proliferation	
23-53	6773-6776	and	
23-54	6777-6787	deployment	
23-55	6787-6788	,	
23-56	6789-6794	there	
23-57	6795-6798	was	
23-58	6799-6805	always	
23-59	6806-6807	a	
23-60	6808-6812	hope	
23-61	6813-6817	that	
23-62	6818-6827	expertise	
23-63	6828-6830	in	
23-64	6831-6834	the	
23-65	6835-6839	open	
23-66	6840-6846	source	
23-67	6847-6855	software	
23-68	6856-6861	would	
23-69	6862-6867	yield	
23-70	6868-6878	sufficient	
23-71	6879-6886	revenue	
23-72	6887-6900	opportunities	
23-73	6900-6901	.	

#Text=What has upended their plans are cloud vendors, who already have a customer relationship by providing cloud infrastructure. They use open source software as an up-sell to cloud customers, bypassing vendors that specialize in open source. This excellent article exposes much of this shift, particularly with this statement:
24-1	6902-6906	What	
24-2	6907-6910	has	
24-3	6911-6918	upended	
24-4	6919-6924	their	
24-5	6925-6930	plans	
24-6	6931-6934	are	
24-7	6935-6940	cloud	
24-8	6941-6948	vendors	
24-9	6948-6949	,	
24-10	6950-6953	who	
24-11	6954-6961	already	
24-12	6962-6966	have	
24-13	6967-6968	a	
24-14	6969-6977	customer	
24-15	6978-6990	relationship	
24-16	6991-6993	by	
24-17	6994-7003	providing	
24-18	7004-7009	cloud	
24-19	7010-7024	infrastructure	
24-20	7024-7025	.	
24-21	7026-7030	They	
24-22	7031-7034	use	
24-23	7035-7039	open	
24-24	7040-7046	source	
24-25	7047-7055	software	
24-26	7056-7058	as	
24-27	7059-7061	an	
24-28	7062-7069	up-sell	
24-29	7070-7072	to	
24-30	7073-7078	cloud	
24-31	7079-7088	customers	
24-32	7088-7089	,	
24-33	7090-7099	bypassing	
24-34	7100-7107	vendors	
24-35	7108-7112	that	
24-36	7113-7123	specialize	
24-37	7124-7126	in	
24-38	7127-7131	open	
24-39	7132-7138	source	
24-40	7138-7139	.	
24-41	7140-7144	This	
24-42	7145-7154	excellent	
24-43	7155-7162	article	
24-44	7163-7170	exposes	
24-45	7171-7175	much	
24-46	7176-7178	of	
24-47	7179-7183	this	
24-48	7184-7189	shift	
24-49	7189-7190	,	
24-50	7191-7203	particularly	
24-51	7204-7208	with	
24-52	7209-7213	this	
24-53	7214-7223	statement	
24-54	7223-7224	:	

#Text=From an economic perspective (which is what all the industry think pieces and analogies are about), the clouds seem to make a better business from open source than the companies built around particular projects. If you squint, open source could be seen as a very generous charitable donation to some of the largest and wealthiest corporations on the planet. Instead of open source vendors providing software to be used by potential customers, it is also being used by actual competitors, often much larger and more visible competitors.
25-1	7225-7229	From	
25-2	7230-7232	an	
25-3	7233-7241	economic	
25-4	7242-7253	perspective	
25-5	7254-7255	(	
25-6	7255-7260	which	
25-7	7261-7263	is	
25-8	7264-7268	what	
25-9	7269-7272	all	
25-10	7273-7276	the	
25-11	7277-7285	industry	
25-12	7286-7291	think	
25-13	7292-7298	pieces	
25-14	7299-7302	and	
25-15	7303-7312	analogies	
25-16	7313-7316	are	
25-17	7317-7322	about	
25-18	7322-7323	)	
25-19	7323-7324	,	
25-20	7325-7328	the	
25-21	7329-7335	clouds	
25-22	7336-7340	seem	
25-23	7341-7343	to	
25-24	7344-7348	make	
25-25	7349-7350	a	
25-26	7351-7357	better	
25-27	7358-7366	business	
25-28	7367-7371	from	
25-29	7372-7376	open	
25-30	7377-7383	source	
25-31	7384-7388	than	
25-32	7389-7392	the	
25-33	7393-7402	companies	
25-34	7403-7408	built	
25-35	7409-7415	around	
25-36	7416-7426	particular	
25-37	7427-7435	projects	
25-38	7435-7436	.	
25-39	7437-7439	If	
25-40	7440-7443	you	
25-41	7444-7450	squint	
25-42	7450-7451	,	
25-43	7452-7456	open	
25-44	7457-7463	source	
25-45	7464-7469	could	
25-46	7470-7472	be	
25-47	7473-7477	seen	
25-48	7478-7480	as	
25-49	7481-7482	a	
25-50	7483-7487	very	
25-51	7488-7496	generous	
25-52	7497-7507	charitable	
25-53	7508-7516	donation	
25-54	7517-7519	to	
25-55	7520-7524	some	
25-56	7525-7527	of	
25-57	7528-7531	the	
25-58	7532-7539	largest	
25-59	7540-7543	and	
25-60	7544-7554	wealthiest	
25-61	7555-7567	corporations	
25-62	7568-7570	on	
25-63	7571-7574	the	
25-64	7575-7581	planet	
25-65	7581-7582	.	
25-66	7583-7590	Instead	
25-67	7591-7593	of	
25-68	7594-7598	open	
25-69	7599-7605	source	
25-70	7606-7613	vendors	
25-71	7614-7623	providing	
25-72	7624-7632	software	
25-73	7633-7635	to	
25-74	7636-7638	be	
25-75	7639-7643	used	
25-76	7644-7646	by	
25-77	7647-7656	potential	
25-78	7657-7666	customers	
25-79	7666-7667	,	
25-80	7668-7670	it	
25-81	7671-7673	is	
25-82	7674-7678	also	
25-83	7679-7684	being	
25-84	7685-7689	used	
25-85	7690-7692	by	
25-86	7693-7699	actual	
25-87	7700-7711	competitors	
25-88	7711-7712	,	
25-89	7713-7718	often	
25-90	7719-7723	much	
25-91	7724-7730	larger	
25-92	7731-7734	and	
25-93	7735-7739	more	
25-94	7740-7747	visible	
25-95	7748-7759	competitors	
25-96	7759-7760	.	

#Text=Such is the problem of open source, that you can't easily control how it is used, though some company-developed open source companies, that do control the software license, are taking steps to avoid this situation, with predictable reactions from the cloud vendors. The biggest "wow" moment for me in reading this article was the analysis of Red Hat.
26-1	7761-7765	Such	
26-2	7766-7768	is	
26-3	7769-7772	the	
26-4	7773-7780	problem	
26-5	7781-7783	of	
26-6	7784-7788	open	
26-7	7789-7795	source	
26-8	7795-7796	,	
26-9	7797-7801	that	
26-10	7802-7805	you	
26-11	7806-7811	can't	
26-12	7812-7818	easily	
26-13	7819-7826	control	
26-14	7827-7830	how	
26-15	7831-7833	it	
26-16	7834-7836	is	
26-17	7837-7841	used	
26-18	7841-7842	,	
26-19	7843-7849	though	
26-20	7850-7854	some	
26-21	7855-7872	company-developed	
26-22	7873-7877	open	
26-23	7878-7884	source	
26-24	7885-7894	companies	
26-25	7894-7895	,	
26-26	7896-7900	that	
26-27	7901-7903	do	
26-28	7904-7911	control	
26-29	7912-7915	the	
26-30	7916-7924	software	
26-31	7925-7932	license	
26-32	7932-7933	,	
26-33	7934-7937	are	
26-34	7938-7944	taking	
26-35	7945-7950	steps	
26-36	7951-7953	to	
26-37	7954-7959	avoid	
26-38	7960-7964	this	
26-39	7965-7974	situation	
26-40	7974-7975	,	
26-41	7976-7980	with	
26-42	7981-7992	predictable	
26-43	7993-8002	reactions	
26-44	8003-8007	from	
26-45	8008-8011	the	
26-46	8012-8017	cloud	
26-47	8018-8025	vendors	
26-48	8025-8026	.	
26-49	8027-8030	The	
26-50	8031-8038	biggest	
26-51	8039-8040	"	
26-52	8040-8043	wow	
26-53	8043-8044	"	
26-54	8045-8051	moment	
26-55	8052-8055	for	
26-56	8056-8058	me	
26-57	8059-8061	in	
26-58	8062-8069	reading	
26-59	8070-8074	this	
26-60	8075-8082	article	
26-61	8083-8086	was	
26-62	8087-8090	the	
26-63	8091-8099	analysis	
26-64	8100-8102	of	
26-65	8103-8106	Red	
26-66	8107-8110	Hat	
26-67	8110-8111	.	

#Text=Company-developed open source companies were always at risk, since they bore the full cost of software development and had a clear monetization strategy — grow and then maximize monetization, but Red Hat was different. It was the poster-child of pure open source (collect from others and bundle) that should have been
27-1	8112-8129	Company-developed	
27-2	8130-8134	open	
27-3	8135-8141	source	
27-4	8142-8151	companies	
27-5	8152-8156	were	
27-6	8157-8163	always	
27-7	8164-8166	at	
27-8	8167-8171	risk	
27-9	8171-8172	,	
27-10	8173-8178	since	
27-11	8179-8183	they	
27-12	8184-8188	bore	
27-13	8189-8192	the	
27-14	8193-8197	full	
27-15	8198-8202	cost	
27-16	8203-8205	of	
27-17	8206-8214	software	
27-18	8215-8226	development	
27-19	8227-8230	and	
27-20	8231-8234	had	
27-21	8235-8236	a	
27-22	8237-8242	clear	
27-23	8243-8255	monetization	
27-24	8256-8264	strategy	
27-25	8265-8266	—	
27-26	8267-8271	grow	
27-27	8272-8275	and	
27-28	8276-8280	then	
27-29	8281-8289	maximize	
27-30	8290-8302	monetization	
27-31	8302-8303	,	
27-32	8304-8307	but	
27-33	8308-8311	Red	
27-34	8312-8315	Hat	
27-35	8316-8319	was	
27-36	8320-8329	different	
27-37	8329-8330	.	
27-38	8331-8333	It	
27-39	8334-8337	was	
27-40	8338-8341	the	
27-41	8342-8354	poster-child	
27-42	8355-8357	of	
27-43	8358-8362	pure	
27-44	8363-8367	open	
27-45	8368-8374	source	
27-46	8375-8376	(	
27-47	8376-8383	collect	
27-48	8384-8388	from	
27-49	8389-8395	others	
27-50	8396-8399	and	
27-51	8400-8406	bundle	
27-52	8406-8407	)	
27-53	8408-8412	that	
27-54	8413-8419	should	
27-55	8420-8424	have	
27-56	8425-8429	been	

#Text=more immune to the cloud, but the graphs in the blog clearly show that the purchase of Red Hat by ibm was due to cloud competition on Red Hat. This blog entry from the same person goes into even more gory details. It is not really clear where open source monetization is headed. If cloud vendors were smart, they would keep open source-dedicated companies alive with enough revenue to continue funding open source development and innovation.
28-1	8430-8434	more	
28-2	8435-8441	immune	
28-3	8442-8444	to	
28-4	8445-8448	the	
28-5	8449-8454	cloud	
28-6	8454-8455	,	
28-7	8456-8459	but	
28-8	8460-8463	the	
28-9	8464-8470	graphs	
28-10	8471-8473	in	
28-11	8474-8477	the	
28-12	8478-8482	blog	
28-13	8483-8490	clearly	
28-14	8491-8495	show	
28-15	8496-8500	that	
28-16	8501-8504	the	
28-17	8505-8513	purchase	
28-18	8514-8516	of	
28-19	8517-8520	Red	
28-20	8521-8524	Hat	
28-21	8525-8527	by	
28-22	8528-8531	ibm	
28-23	8532-8535	was	
28-24	8536-8539	due	
28-25	8540-8542	to	
28-26	8543-8548	cloud	
28-27	8549-8560	competition	
28-28	8561-8563	on	
28-29	8564-8567	Red	
28-30	8568-8571	Hat	
28-31	8571-8572	.	
28-32	8573-8577	This	
28-33	8578-8582	blog	
28-34	8583-8588	entry	
28-35	8589-8593	from	
28-36	8594-8597	the	
28-37	8598-8602	same	
28-38	8603-8609	person	
28-39	8610-8614	goes	
28-40	8615-8619	into	
28-41	8620-8624	even	
28-42	8625-8629	more	
28-43	8630-8634	gory	
28-44	8635-8642	details	
28-45	8642-8643	.	
28-46	8644-8646	It	
28-47	8647-8649	is	
28-48	8650-8653	not	
28-49	8654-8660	really	
28-50	8661-8666	clear	
28-51	8667-8672	where	
28-52	8673-8677	open	
28-53	8678-8684	source	
28-54	8685-8697	monetization	
28-55	8698-8700	is	
28-56	8701-8707	headed	
28-57	8707-8708	.	
28-58	8709-8711	If	
28-59	8712-8717	cloud	
28-60	8718-8725	vendors	
28-61	8726-8730	were	
28-62	8731-8736	smart	
28-63	8736-8737	,	
28-64	8738-8742	they	
28-65	8743-8748	would	
28-66	8749-8753	keep	
28-67	8754-8758	open	
28-68	8759-8775	source-dedicated	
28-69	8776-8785	companies	
28-70	8786-8791	alive	
28-71	8792-8796	with	
28-72	8797-8803	enough	
28-73	8804-8811	revenue	
28-74	8812-8814	to	
28-75	8815-8823	continue	
28-76	8824-8831	funding	
28-77	8832-8836	open	
28-78	8837-8843	source	
28-79	8844-8855	development	
28-80	8856-8859	and	
28-81	8860-8870	innovation	
28-82	8870-8871	.	

#Text=While open source companies have often yielded high valuations, they have rarely yielded high profits, except perhaps, years ago, for Red Hat. The high-profits world now seems even more distant for open source companies, as cloud vendors, with existing customer relationships, massive standardized infrastructure and services, and economies of scale, siphon even more profit from these businesses. View or Post Comments Cloud Vendors as a Barrier
29-1	8872-8877	While	
29-2	8878-8882	open	
29-3	8883-8889	source	
29-4	8890-8899	companies	
29-5	8900-8904	have	
29-6	8905-8910	often	
29-7	8911-8918	yielded	
29-8	8919-8923	high	
29-9	8924-8934	valuations	
29-10	8934-8935	,	
29-11	8936-8940	they	
29-12	8941-8945	have	
29-13	8946-8952	rarely	
29-14	8953-8960	yielded	
29-15	8961-8965	high	
29-16	8966-8973	profits	
29-17	8973-8974	,	
29-18	8975-8981	except	
29-19	8982-8989	perhaps	
29-20	8989-8990	,	
29-21	8991-8996	years	
29-22	8997-9000	ago	
29-23	9000-9001	,	
29-24	9002-9005	for	
29-25	9006-9009	Red	
29-26	9010-9013	Hat	
29-27	9013-9014	.	
29-28	9015-9018	The	
29-29	9019-9031	high-profits	
29-30	9032-9037	world	
29-31	9038-9041	now	
29-32	9042-9047	seems	
29-33	9048-9052	even	
29-34	9053-9057	more	
29-35	9058-9065	distant	
29-36	9066-9069	for	
29-37	9070-9074	open	
29-38	9075-9081	source	
29-39	9082-9091	companies	
29-40	9091-9092	,	
29-41	9093-9095	as	
29-42	9096-9101	cloud	
29-43	9102-9109	vendors	
29-44	9109-9110	,	
29-45	9111-9115	with	
29-46	9116-9124	existing	
29-47	9125-9133	customer	
29-48	9134-9147	relationships	
29-49	9147-9148	,	
29-50	9149-9156	massive	
29-51	9157-9169	standardized	
29-52	9170-9184	infrastructure	
29-53	9185-9188	and	
29-54	9189-9197	services	
29-55	9197-9198	,	
29-56	9199-9202	and	
29-57	9203-9212	economies	
29-58	9213-9215	of	
29-59	9216-9221	scale	
29-60	9221-9222	,	
29-61	9223-9229	siphon	
29-62	9230-9234	even	
29-63	9235-9239	more	
29-64	9240-9246	profit	
29-65	9247-9251	from	
29-66	9252-9257	these	
29-67	9258-9268	businesses	
29-68	9268-9269	.	
29-69	9270-9274	View	
29-70	9275-9277	or	
29-71	9278-9282	Post	
29-72	9283-9291	Comments	
29-73	9292-9297	Cloud	
29-74	9298-9305	Vendors	
29-75	9306-9308	as	
29-76	9309-9310	a	
29-77	9311-9318	Barrier	

#Text=Friday, September 25, 2020 Cloud vendors are barriers like department stores and supermarkets are barriers. Huh? People associate these entities with providing a huge variety of goods and services, all in one place. How can that be a barrier? Well, you are looking at it from the consumer perspective.
30-1	9319-9325	Friday	
30-2	9325-9326	,	
30-3	9327-9336	September	
30-4	9337-9339	25	
30-5	9339-9340	,	
30-6	9341-9345	2020	
30-7	9346-9351	Cloud	
30-8	9352-9359	vendors	
30-9	9360-9363	are	
30-10	9364-9372	barriers	
30-11	9373-9377	like	
30-12	9378-9388	department	
30-13	9389-9395	stores	
30-14	9396-9399	and	
30-15	9400-9412	supermarkets	
30-16	9413-9416	are	
30-17	9417-9425	barriers	
30-18	9425-9426	.	
30-19	9427-9430	Huh	
30-20	9430-9431	?	
30-21	9432-9438	People	
30-22	9439-9448	associate	
30-23	9449-9454	these	
30-24	9455-9463	entities	
30-25	9464-9468	with	
30-26	9469-9478	providing	
30-27	9479-9480	a	
30-28	9481-9485	huge	
30-29	9486-9493	variety	
30-30	9494-9496	of	
30-31	9497-9502	goods	
30-32	9503-9506	and	
30-33	9507-9515	services	
30-34	9515-9516	,	
30-35	9517-9520	all	
30-36	9521-9523	in	
30-37	9524-9527	one	
30-38	9528-9533	place	
30-39	9533-9534	.	
30-40	9535-9538	How	
30-41	9539-9542	can	
30-42	9543-9547	that	
30-43	9548-9550	be	
30-44	9551-9552	a	
30-45	9553-9560	barrier	
30-46	9560-9561	?	
30-47	9562-9566	Well	
30-48	9566-9567	,	
30-49	9568-9571	you	
30-50	9572-9575	are	
30-51	9576-9583	looking	
30-52	9584-9586	at	
30-53	9587-9589	it	
30-54	9590-9594	from	
30-55	9595-9598	the	
30-56	9599-9607	consumer	
30-57	9608-9619	perspective	
30-58	9619-9620	.	

#Text=For the producer, they are a mixed benefit. These "super sellers" allow access to much larger markets for most single-product producers, but they can have negatives for producers: They become the place consumers associate with your product They have the relationship with the consumer You can easily be replaced if a better product appears
31-1	9621-9624	For	
31-2	9625-9628	the	
31-3	9629-9637	producer	
31-4	9637-9638	,	
31-5	9639-9643	they	
31-6	9644-9647	are	
31-7	9648-9649	a	
31-8	9650-9655	mixed	
31-9	9656-9663	benefit	
31-10	9663-9664	.	
31-11	9665-9670	These	
31-12	9671-9672	"	
31-13	9672-9677	super	
31-14	9678-9685	sellers	
31-15	9685-9686	"	
31-16	9687-9692	allow	
31-17	9693-9699	access	
31-18	9700-9702	to	
31-19	9703-9707	much	
31-20	9708-9714	larger	
31-21	9715-9722	markets	
31-22	9723-9726	for	
31-23	9727-9731	most	
31-24	9732-9746	single-product	
31-25	9747-9756	producers	
31-26	9756-9757	,	
31-27	9758-9761	but	
31-28	9762-9766	they	
31-29	9767-9770	can	
31-30	9771-9775	have	
31-31	9776-9785	negatives	
31-32	9786-9789	for	
31-33	9790-9799	producers	
31-34	9799-9800	:	
31-35	9801-9805	They	
31-36	9806-9812	become	
31-37	9813-9816	the	
31-38	9817-9822	place	
31-39	9823-9832	consumers	
31-40	9833-9842	associate	
31-41	9843-9847	with	
31-42	9848-9852	your	
31-43	9853-9860	product	
31-44	9861-9865	They	
31-45	9866-9870	have	
31-46	9871-9874	the	
31-47	9875-9887	relationship	
31-48	9888-9892	with	
31-49	9893-9896	the	
31-50	9897-9905	consumer	
31-51	9906-9909	You	
31-52	9910-9913	can	
31-53	9914-9920	easily	
31-54	9921-9923	be	
31-55	9924-9932	replaced	
31-56	9933-9935	if	
31-57	9936-9937	a	
31-58	9938-9944	better	
31-59	9945-9952	product	
31-60	9953-9960	appears	

#Text=They take a markup As the producer of a physical product, it is up to you to decide if working with department stores and supermarkets is a positive or negative. However, with open source software, there is no calculus. Unless your open source license prohibits modified or unmodified hosting of your software on cloud servers, you have no control over whether a cloud vendor is the way consumers interact with your
32-1	9961-9965	They	
32-2	9966-9970	take	
32-3	9971-9972	a	
32-4	9973-9979	markup	
32-5	9980-9982	As	
32-6	9983-9986	the	
32-7	9987-9995	producer	
32-8	9996-9998	of	
32-9	9999-10000	a	
32-10	10001-10009	physical	
32-11	10010-10017	product	
32-12	10017-10018	,	
32-13	10019-10021	it	
32-14	10022-10024	is	
32-15	10025-10027	up	
32-16	10028-10030	to	
32-17	10031-10034	you	
32-18	10035-10037	to	
32-19	10038-10044	decide	
32-20	10045-10047	if	
32-21	10048-10055	working	
32-22	10056-10060	with	
32-23	10061-10071	department	
32-24	10072-10078	stores	
32-25	10079-10082	and	
32-26	10083-10095	supermarkets	
32-27	10096-10098	is	
32-28	10099-10100	a	
32-29	10101-10109	positive	
32-30	10110-10112	or	
32-31	10113-10121	negative	
32-32	10121-10122	.	
32-33	10123-10130	However	
32-34	10130-10131	,	
32-35	10132-10136	with	
32-36	10137-10141	open	
32-37	10142-10148	source	
32-38	10149-10157	software	
32-39	10157-10158	,	
32-40	10159-10164	there	
32-41	10165-10167	is	
32-42	10168-10170	no	
32-43	10171-10179	calculus	
32-44	10179-10180	.	
32-45	10181-10187	Unless	
32-46	10188-10192	your	
32-47	10193-10197	open	
32-48	10198-10204	source	
32-49	10205-10212	license	
32-50	10213-10222	prohibits	
32-51	10223-10231	modified	
32-52	10232-10234	or	
32-53	10235-10245	unmodified	
32-54	10246-10253	hosting	
32-55	10254-10256	of	
32-56	10257-10261	your	
32-57	10262-10270	software	
32-58	10271-10273	on	
32-59	10274-10279	cloud	
32-60	10280-10287	servers	
32-61	10287-10288	,	
32-62	10289-10292	you	
32-63	10293-10297	have	
32-64	10298-10300	no	
32-65	10301-10308	control	
32-66	10309-10313	over	
32-67	10314-10321	whether	
32-68	10322-10323	a	
32-69	10324-10329	cloud	
32-70	10330-10336	vendor	
32-71	10337-10339	is	
32-72	10340-10343	the	
32-73	10344-10347	way	
32-74	10348-10357	consumers	
32-75	10358-10366	interact	
32-76	10367-10371	with	
32-77	10372-10376	your	

#Text=open source software. The cloud vendor is the one who downloads the software, configures it, perhaps supports it, and guarantees uptime. The cloud vendor can leverage software revenue opportunities. avoid cloud usage, some software producers have chosen or created licenses that restrict such usage: Timescale
33-1	10377-10381	open	
33-2	10382-10388	source	
33-3	10389-10397	software	
33-4	10397-10398	.	
33-5	10399-10402	The	
33-6	10403-10408	cloud	
33-7	10409-10415	vendor	
33-8	10416-10418	is	
33-9	10419-10422	the	
33-10	10423-10426	one	
33-11	10427-10430	who	
33-12	10431-10440	downloads	
33-13	10441-10444	the	
33-14	10445-10453	software	
33-15	10453-10454	,	
33-16	10455-10465	configures	
33-17	10466-10468	it	
33-18	10468-10469	,	
33-19	10470-10477	perhaps	
33-20	10478-10486	supports	
33-21	10487-10489	it	
33-22	10489-10490	,	
33-23	10491-10494	and	
33-24	10495-10505	guarantees	
33-25	10506-10512	uptime	
33-26	10512-10513	.	
33-27	10514-10517	The	
33-28	10518-10523	cloud	
33-29	10524-10530	vendor	
33-30	10531-10534	can	
33-31	10535-10543	leverage	
33-32	10544-10552	software	
33-33	10553-10560	revenue	
33-34	10561-10574	opportunities	
33-35	10574-10575	.	
33-36	10576-10581	avoid	
33-37	10582-10587	cloud	
33-38	10588-10593	usage	
33-39	10593-10594	,	
33-40	10595-10599	some	
33-41	10600-10608	software	
33-42	10609-10618	producers	
33-43	10619-10623	have	
33-44	10624-10630	chosen	
33-45	10631-10633	or	
33-46	10634-10641	created	
33-47	10642-10650	licenses	
33-48	10651-10655	that	
33-49	10656-10664	restrict	
33-50	10665-10669	such	
33-51	10670-10675	usage	
33-52	10675-10676	:	
33-53	10677-10686	Timescale	

#Text=CockroachDB Elasticsearch MongoDB Redis Agpl license In response to the license handling of Elasticsearch, aws forked (1, 2, 3) the Apache 2.0-licensed Elasticsearch source code and started writing code to replace the proprietary features.
34-1	10687-10698	CockroachDB	
34-2	10699-10712	Elasticsearch	
34-3	10713-10720	MongoDB	
34-4	10721-10726	Redis	
34-5	10727-10731	Agpl	
34-6	10732-10739	license	
34-7	10740-10742	In	
34-8	10743-10751	response	
34-9	10752-10754	to	
34-10	10755-10758	the	
34-11	10759-10766	license	
34-12	10767-10775	handling	
34-13	10776-10778	of	
34-14	10779-10792	Elasticsearch	
34-15	10792-10793	,	
34-16	10794-10797	aws	
34-17	10798-10804	forked	
34-18	10805-10806	(	
34-19	10806-10807	1	
34-20	10807-10808	,	
34-21	10809-10810	2	
34-22	10810-10811	,	
34-23	10812-10813	3	
34-24	10813-10814	)	
34-25	10815-10818	the	
34-26	10819-10825	Apache	
34-27	10826-10829	2.0	
34-28	10829-10830	-	
34-29	10830-10838	licensed	
34-30	10839-10852	Elasticsearch	
34-31	10853-10859	source	
34-32	10860-10864	code	
34-33	10865-10868	and	
34-34	10869-10876	started	
34-35	10877-10884	writing	
34-36	10885-10889	code	
34-37	10890-10892	to	
34-38	10893-10900	replace	
34-39	10901-10904	the	
34-40	10905-10916	proprietary	
34-41	10917-10925	features	
34-42	10925-10926	.	

#Text=Sometimes even license changes don't protect open source projects from cloud vendor barriers. This is nothing new. Commercial companies like Red Hat have supported open source software since their inception, and have generated revenue from that relationship and bundling. Cloud vendors are just another set of companies that are making open source easier to use, and benefiting from it.
35-1	10927-10936	Sometimes	
35-2	10937-10941	even	
35-3	10942-10949	license	
35-4	10950-10957	changes	
35-5	10958-10963	don't	
35-6	10964-10971	protect	
35-7	10972-10976	open	
35-8	10977-10983	source	
35-9	10984-10992	projects	
35-10	10993-10997	from	
35-11	10998-11003	cloud	
35-12	11004-11010	vendor	
35-13	11011-11019	barriers	
35-14	11019-11020	.	
35-15	11021-11025	This	
35-16	11026-11028	is	
35-17	11029-11036	nothing	
35-18	11037-11040	new	
35-19	11040-11041	.	
35-20	11042-11052	Commercial	
35-21	11053-11062	companies	
35-22	11063-11067	like	
35-23	11068-11071	Red	
35-24	11072-11075	Hat	
35-25	11076-11080	have	
35-26	11081-11090	supported	
35-27	11091-11095	open	
35-28	11096-11102	source	
35-29	11103-11111	software	
35-30	11112-11117	since	
35-31	11118-11123	their	
35-32	11124-11133	inception	
35-33	11133-11134	,	
35-34	11135-11138	and	
35-35	11139-11143	have	
35-36	11144-11153	generated	
35-37	11154-11161	revenue	
35-38	11162-11166	from	
35-39	11167-11171	that	
35-40	11172-11184	relationship	
35-41	11185-11188	and	
35-42	11189-11197	bundling	
35-43	11197-11198	.	
35-44	11199-11204	Cloud	
35-45	11205-11212	vendors	
35-46	11213-11216	are	
35-47	11217-11221	just	
35-48	11222-11229	another	
35-49	11230-11233	set	
35-50	11234-11236	of	
35-51	11237-11246	companies	
35-52	11247-11251	that	
35-53	11252-11255	are	
35-54	11256-11262	making	
35-55	11263-11267	open	
35-56	11268-11274	source	
35-57	11275-11281	easier	
35-58	11282-11284	to	
35-59	11285-11288	use	
35-60	11288-11289	,	
35-61	11290-11293	and	
35-62	11294-11304	benefiting	
35-63	11305-11309	from	
35-64	11310-11312	it	
35-65	11312-11313	.	

#Text=While software-bundle vendors like Red Hat can customize the software for their bundle, cloud vendors can also optimize the software for their hardware and infrastructure. This is a clear value to customers that is hard for software producers to match. This article discusses the history of open source business models, This article describes cloud vendor behavior as "strip mining". There was even a recent
36-1	11314-11319	While	
36-2	11320-11335	software-bundle	
36-3	11336-11343	vendors	
36-4	11344-11348	like	
36-5	11349-11352	Red	
36-6	11353-11356	Hat	
36-7	11357-11360	can	
36-8	11361-11370	customize	
36-9	11371-11374	the	
36-10	11375-11383	software	
36-11	11384-11387	for	
36-12	11388-11393	their	
36-13	11394-11400	bundle	
36-14	11400-11401	,	
36-15	11402-11407	cloud	
36-16	11408-11415	vendors	
36-17	11416-11419	can	
36-18	11420-11424	also	
36-19	11425-11433	optimize	
36-20	11434-11437	the	
36-21	11438-11446	software	
36-22	11447-11450	for	
36-23	11451-11456	their	
36-24	11457-11465	hardware	
36-25	11466-11469	and	
36-26	11470-11484	infrastructure	
36-27	11484-11485	.	
36-28	11486-11490	This	
36-29	11491-11493	is	
36-30	11494-11495	a	
36-31	11496-11501	clear	
36-32	11502-11507	value	
36-33	11508-11510	to	
36-34	11511-11520	customers	
36-35	11521-11525	that	
36-36	11526-11528	is	
36-37	11529-11533	hard	
36-38	11534-11537	for	
36-39	11538-11546	software	
36-40	11547-11556	producers	
36-41	11557-11559	to	
36-42	11560-11565	match	
36-43	11565-11566	.	
36-44	11567-11571	This	
36-45	11572-11579	article	
36-46	11580-11589	discusses	
36-47	11590-11593	the	
36-48	11594-11601	history	
36-49	11602-11604	of	
36-50	11605-11609	open	
36-51	11610-11616	source	
36-52	11617-11625	business	
36-53	11626-11632	models	
36-54	11632-11633	,	
36-55	11634-11638	This	
36-56	11639-11646	article	
36-57	11647-11656	describes	
36-58	11657-11662	cloud	
36-59	11663-11669	vendor	
36-60	11670-11678	behavior	
36-61	11679-11681	as	
36-62	11682-11683	"	
36-63	11683-11688	strip	
36-64	11689-11695	mining	
36-65	11695-11696	"	
36-66	11696-11697	.	
36-67	11698-11703	There	
36-68	11704-11707	was	
36-69	11708-11712	even	
36-70	11713-11714	a	
36-71	11715-11721	recent	

#Text=conference where open source vendors met to discuss how to deal with cloud vendor competition (sponsored by aws). There is one big distinction in all the open source software products I have listed above — they are all company-controlled open source, meaning the development is mostly controlled by a single company, which monetizes use of the software, while distributing it as open source. This is drastically different from
37-1	11722-11732	conference	
37-2	11733-11738	where	
37-3	11739-11743	open	
37-4	11744-11750	source	
37-5	11751-11758	vendors	
37-6	11759-11762	met	
37-7	11763-11765	to	
37-8	11766-11773	discuss	
37-9	11774-11777	how	
37-10	11778-11780	to	
37-11	11781-11785	deal	
37-12	11786-11790	with	
37-13	11791-11796	cloud	
37-14	11797-11803	vendor	
37-15	11804-11815	competition	
37-16	11816-11817	(	
37-17	11817-11826	sponsored	
37-18	11827-11829	by	
37-19	11830-11833	aws	
37-20	11833-11834	)	
37-21	11834-11835	.	
37-22	11836-11841	There	
37-23	11842-11844	is	
37-24	11845-11848	one	
37-25	11849-11852	big	
37-26	11853-11864	distinction	
37-27	11865-11867	in	
37-28	11868-11871	all	
37-29	11872-11875	the	
37-30	11876-11880	open	
37-31	11881-11887	source	
37-32	11888-11896	software	
37-33	11897-11905	products	
37-34	11906-11907	I	
37-35	11908-11912	have	
37-36	11913-11919	listed	
37-37	11920-11925	above	
37-38	11926-11927	—	
37-39	11928-11932	they	
37-40	11933-11936	are	
37-41	11937-11940	all	
37-42	11941-11959	company-controlled	
37-43	11960-11964	open	
37-44	11965-11971	source	
37-45	11971-11972	,	
37-46	11973-11980	meaning	
37-47	11981-11984	the	
37-48	11985-11996	development	
37-49	11997-11999	is	
37-50	12000-12006	mostly	
37-51	12007-12017	controlled	
37-52	12018-12020	by	
37-53	12021-12022	a	
37-54	12023-12029	single	
37-55	12030-12037	company	
37-56	12037-12038	,	
37-57	12039-12044	which	
37-58	12045-12054	monetizes	
37-59	12055-12058	use	
37-60	12059-12061	of	
37-61	12062-12065	the	
37-62	12066-12074	software	
37-63	12074-12075	,	
37-64	12076-12081	while	
37-65	12082-12094	distributing	
37-66	12095-12097	it	
37-67	12098-12100	as	
37-68	12101-12105	open	
37-69	12106-12112	source	
37-70	12112-12113	.	
37-71	12114-12118	This	
37-72	12119-12121	is	
37-73	12122-12133	drastically	
37-74	12134-12143	different	
37-75	12144-12148	from	

#Text=community-controlled open source projects like Postgres. There are far fewer challenges to community-controlled open source projects from cloud vendors, mostly because there is no monetization goal. There is some concern that cloud vendor relationships with users will diminish community contributions, but it is not clear if this true. Cloud vendors clearly increase use of community-controlled
38-1	12149-12169	community-controlled	
38-2	12170-12174	open	
38-3	12175-12181	source	
38-4	12182-12190	projects	
38-5	12191-12195	like	
38-6	12196-12204	Postgres	
38-7	12204-12205	.	
38-8	12206-12211	There	
38-9	12212-12215	are	
38-10	12216-12219	far	
38-11	12220-12225	fewer	
38-12	12226-12236	challenges	
38-13	12237-12239	to	
38-14	12240-12260	community-controlled	
38-15	12261-12265	open	
38-16	12266-12272	source	
38-17	12273-12281	projects	
38-18	12282-12286	from	
38-19	12287-12292	cloud	
38-20	12293-12300	vendors	
38-21	12300-12301	,	
38-22	12302-12308	mostly	
38-23	12309-12316	because	
38-24	12317-12322	there	
38-25	12323-12325	is	
38-26	12326-12328	no	
38-27	12329-12341	monetization	
38-28	12342-12346	goal	
38-29	12346-12347	.	
38-30	12348-12353	There	
38-31	12354-12356	is	
38-32	12357-12361	some	
38-33	12362-12369	concern	
38-34	12370-12374	that	
38-35	12375-12380	cloud	
38-36	12381-12387	vendor	
38-37	12388-12401	relationships	
38-38	12402-12406	with	
38-39	12407-12412	users	
38-40	12413-12417	will	
38-41	12418-12426	diminish	
38-42	12427-12436	community	
38-43	12437-12450	contributions	
38-44	12450-12451	,	
38-45	12452-12455	but	
38-46	12456-12458	it	
38-47	12459-12461	is	
38-48	12462-12465	not	
38-49	12466-12471	clear	
38-50	12472-12474	if	
38-51	12475-12479	this	
38-52	12480-12484	true	
38-53	12484-12485	.	
38-54	12486-12491	Cloud	
38-55	12492-12499	vendors	
38-56	12500-12507	clearly	
38-57	12508-12516	increase	
38-58	12517-12520	use	
38-59	12521-12523	of	
38-60	12524-12544	community-controlled	

#Text=software, and to the extent the cloud vendors reference open source communities in their interaction with customers, it helps these communities. Just as bakeries, flower shops, produce markets, meat, cheese, and seafood sellers struggle to survive when supermarkets provide convenient, if somewhat less diverse, products, so company-controlled open source will suffer from cloud vendors.
39-1	12545-12553	software	
39-2	12553-12554	,	
39-3	12555-12558	and	
39-4	12559-12561	to	
39-5	12562-12565	the	
39-6	12566-12572	extent	
39-7	12573-12576	the	
39-8	12577-12582	cloud	
39-9	12583-12590	vendors	
39-10	12591-12600	reference	
39-11	12601-12605	open	
39-12	12606-12612	source	
39-13	12613-12624	communities	
39-14	12625-12627	in	
39-15	12628-12633	their	
39-16	12634-12645	interaction	
39-17	12646-12650	with	
39-18	12651-12660	customers	
39-19	12660-12661	,	
39-20	12662-12664	it	
39-21	12665-12670	helps	
39-22	12671-12676	these	
39-23	12677-12688	communities	
39-24	12688-12689	.	
39-25	12690-12694	Just	
39-26	12695-12697	as	
39-27	12698-12706	bakeries	
39-28	12706-12707	,	
39-29	12708-12714	flower	
39-30	12715-12720	shops	
39-31	12720-12721	,	
39-32	12722-12729	produce	
39-33	12730-12737	markets	
39-34	12737-12738	,	
39-35	12739-12743	meat	
39-36	12743-12744	,	
39-37	12745-12751	cheese	
39-38	12751-12752	,	
39-39	12753-12756	and	
39-40	12757-12764	seafood	
39-41	12765-12772	sellers	
39-42	12773-12781	struggle	
39-43	12782-12784	to	
39-44	12785-12792	survive	
39-45	12793-12797	when	
39-46	12798-12810	supermarkets	
39-47	12811-12818	provide	
39-48	12819-12829	convenient	
39-49	12829-12830	,	
39-50	12831-12833	if	
39-51	12834-12842	somewhat	
39-52	12843-12847	less	
39-53	12848-12855	diverse	
39-54	12855-12856	,	
39-55	12857-12865	products	
39-56	12865-12866	,	
39-57	12867-12869	so	
39-58	12870-12888	company-controlled	
39-59	12889-12893	open	
39-60	12894-12900	source	
39-61	12901-12905	will	
39-62	12906-12912	suffer	
39-63	12913-12917	from	
39-64	12918-12923	cloud	
39-65	12924-12931	vendors	
39-66	12931-12932	.	

#Text=For open source communities, the only real risk is that companies that support its open source developers will struggle, and therefore reduce paid developers working on open source projects. That connection is hard to measure from an open source project perspective, so we will just have to wait and see how things evolve. View or Post Comments Developers in Front Wednesday, September 23, 2020
40-1	12933-12936	For	
40-2	12937-12941	open	
40-3	12942-12948	source	
40-4	12949-12960	communities	
40-5	12960-12961	,	
40-6	12962-12965	the	
40-7	12966-12970	only	
40-8	12971-12975	real	
40-9	12976-12980	risk	
40-10	12981-12983	is	
40-11	12984-12988	that	
40-12	12989-12998	companies	
40-13	12999-13003	that	
40-14	13004-13011	support	
40-15	13012-13015	its	
40-16	13016-13020	open	
40-17	13021-13027	source	
40-18	13028-13038	developers	
40-19	13039-13043	will	
40-20	13044-13052	struggle	
40-21	13052-13053	,	
40-22	13054-13057	and	
40-23	13058-13067	therefore	
40-24	13068-13074	reduce	
40-25	13075-13079	paid	
40-26	13080-13090	developers	
40-27	13091-13098	working	
40-28	13099-13101	on	
40-29	13102-13106	open	
40-30	13107-13113	source	
40-31	13114-13122	projects	
40-32	13122-13123	.	
40-33	13124-13128	That	
40-34	13129-13139	connection	
40-35	13140-13142	is	
40-36	13143-13147	hard	
40-37	13148-13150	to	
40-38	13151-13158	measure	
40-39	13159-13163	from	
40-40	13164-13166	an	
40-41	13167-13171	open	
40-42	13172-13178	source	
40-43	13179-13186	project	
40-44	13187-13198	perspective	
40-45	13198-13199	,	
40-46	13200-13202	so	
40-47	13203-13205	we	
40-48	13206-13210	will	
40-49	13211-13215	just	
40-50	13216-13220	have	
40-51	13221-13223	to	
40-52	13224-13228	wait	
40-53	13229-13232	and	
40-54	13233-13236	see	
40-55	13237-13240	how	
40-56	13241-13247	things	
40-57	13248-13254	evolve	
40-58	13254-13255	.	
40-59	13256-13260	View	
40-60	13261-13263	or	
40-61	13264-13268	Post	
40-62	13269-13277	Comments	
40-63	13278-13288	Developers	
40-64	13289-13291	in	
40-65	13292-13297	Front	
40-66	13298-13307	Wednesday	
40-67	13307-13308	,	
40-68	13309-13318	September	
40-69	13319-13321	23	
40-70	13321-13322	,	
40-71	13323-13327	2020	

#Text=Most companies have marketing and sales people as the visible part of their company. Technical people, even in technology companies, are often kept in the back, and only brought out for brief periods when needed. Open source is different — there are no marketing or sales teams, so software developers are the faces of projects. This gives technical people an opportunity to attain world-wide recognition
41-1	13328-13332	Most	
41-2	13333-13342	companies	
41-3	13343-13347	have	
41-4	13348-13357	marketing	
41-5	13358-13361	and	
41-6	13362-13367	sales	
41-7	13368-13374	people	
41-8	13375-13377	as	
41-9	13378-13381	the	
41-10	13382-13389	visible	
41-11	13390-13394	part	
41-12	13395-13397	of	
41-13	13398-13403	their	
41-14	13404-13411	company	
41-15	13411-13412	.	
41-16	13413-13422	Technical	
41-17	13423-13429	people	
41-18	13429-13430	,	
41-19	13431-13435	even	
41-20	13436-13438	in	
41-21	13439-13449	technology	
41-22	13450-13459	companies	
41-23	13459-13460	,	
41-24	13461-13464	are	
41-25	13465-13470	often	
41-26	13471-13475	kept	
41-27	13476-13478	in	
41-28	13479-13482	the	
41-29	13483-13487	back	
41-30	13487-13488	,	
41-31	13489-13492	and	
41-32	13493-13497	only	
41-33	13498-13505	brought	
41-34	13506-13509	out	
41-35	13510-13513	for	
41-36	13514-13519	brief	
41-37	13520-13527	periods	
41-38	13528-13532	when	
41-39	13533-13539	needed	
41-40	13539-13540	.	
41-41	13541-13545	Open	
41-42	13546-13552	source	
41-43	13553-13555	is	
41-44	13556-13565	different	
41-45	13566-13567	—	
41-46	13568-13573	there	
41-47	13574-13577	are	
41-48	13578-13580	no	
41-49	13581-13590	marketing	
41-50	13591-13593	or	
41-51	13594-13599	sales	
41-52	13600-13605	teams	
41-53	13605-13606	,	
41-54	13607-13609	so	
41-55	13610-13618	software	
41-56	13619-13629	developers	
41-57	13630-13633	are	
41-58	13634-13637	the	
41-59	13638-13643	faces	
41-60	13644-13646	of	
41-61	13647-13655	projects	
41-62	13655-13656	.	
41-63	13657-13661	This	
41-64	13662-13667	gives	
41-65	13668-13677	technical	
41-66	13678-13684	people	
41-67	13685-13687	an	
41-68	13688-13699	opportunity	
41-69	13700-13702	to	
41-70	13703-13709	attain	
41-71	13710-13720	world-wide	
41-72	13721-13732	recognition	

#Text=for their efforts. There are not many places technical people can truly shine, but open source is one such opportunity. View or Post Comments The Berkeley 39 Monday, September 21, 2020 Postgres turns 34 this year. Michael Stonebraker, during his 2015 Turing Award speech (which I blogged about
42-1	13733-13736	for	
42-2	13737-13742	their	
42-3	13743-13750	efforts	
42-4	13750-13751	.	
42-5	13752-13757	There	
42-6	13758-13761	are	
42-7	13762-13765	not	
42-8	13766-13770	many	
42-9	13771-13777	places	
42-10	13778-13787	technical	
42-11	13788-13794	people	
42-12	13795-13798	can	
42-13	13799-13804	truly	
42-14	13805-13810	shine	
42-15	13810-13811	,	
42-16	13812-13815	but	
42-17	13816-13820	open	
42-18	13821-13827	source	
42-19	13828-13830	is	
42-20	13831-13834	one	
42-21	13835-13839	such	
42-22	13840-13851	opportunity	
42-23	13851-13852	.	
42-24	13853-13857	View	
42-25	13858-13860	or	
42-26	13861-13865	Post	
42-27	13866-13874	Comments	
42-28	13875-13878	The	
42-29	13879-13887	Berkeley	
42-30	13888-13890	39	
42-31	13891-13897	Monday	
42-32	13897-13898	,	
42-33	13899-13908	September	
42-34	13909-13911	21	
42-35	13911-13912	,	
42-36	13913-13917	2020	
42-37	13918-13926	Postgres	
42-38	13927-13932	turns	
42-39	13933-13935	34	
42-40	13936-13940	this	
42-41	13941-13945	year	
42-42	13945-13946	.	
42-43	13947-13954	Michael	
42-44	13955-13966	Stonebraker	
42-45	13966-13967	,	
42-46	13968-13974	during	
42-47	13975-13978	his	
42-48	13979-13983	2015	
42-49	13984-13990	Turing	
42-50	13991-13996	Award	
42-51	13997-14003	speech	
42-52	14004-14005	(	
42-53	14005-14010	which	
42-54	14011-14012	I	
42-55	14013-14020	blogged	
42-56	14021-14026	about	

#Text=previously), included the names of the 39 Berkeley students (plus co-leader Larry Rowe) who helped write the original version of Postgres. I was hoping to add this list to the Postgres release notes, but we recently stopped including back branch release notes in current releases, so now there is no good place to put them. As a thanks to them, and with the help of the community, I am listing them below:
43-1	14027-14037	previously	
43-2	14037-14038	)	
43-3	14038-14039	,	
43-4	14040-14048	included	
43-5	14049-14052	the	
43-6	14053-14058	names	
43-7	14059-14061	of	
43-8	14062-14065	the	
43-9	14066-14068	39	
43-10	14069-14077	Berkeley	
43-11	14078-14086	students	
43-12	14087-14088	(	
43-13	14088-14092	plus	
43-14	14093-14102	co-leader	
43-15	14103-14108	Larry	
43-16	14109-14113	Rowe	
43-17	14113-14114	)	
43-18	14115-14118	who	
43-19	14119-14125	helped	
43-20	14126-14131	write	
43-21	14132-14135	the	
43-22	14136-14144	original	
43-23	14145-14152	version	
43-24	14153-14155	of	
43-25	14156-14164	Postgres	
43-26	14164-14165	.	
43-27	14166-14167	I	
43-28	14168-14171	was	
43-29	14172-14178	hoping	
43-30	14179-14181	to	
43-31	14182-14185	add	
43-32	14186-14190	this	
43-33	14191-14195	list	
43-34	14196-14198	to	
43-35	14199-14202	the	
43-36	14203-14211	Postgres	
43-37	14212-14219	release	
43-38	14220-14225	notes	
43-39	14225-14226	,	
43-40	14227-14230	but	
43-41	14231-14233	we	
43-42	14234-14242	recently	
43-43	14243-14250	stopped	
43-44	14251-14260	including	
43-45	14261-14265	back	
43-46	14266-14272	branch	
43-47	14273-14280	release	
43-48	14281-14286	notes	
43-49	14287-14289	in	
43-50	14290-14297	current	
43-51	14298-14306	releases	
43-52	14306-14307	,	
43-53	14308-14310	so	
43-54	14311-14314	now	
43-55	14315-14320	there	
43-56	14321-14323	is	
43-57	14324-14326	no	
43-58	14327-14331	good	
43-59	14332-14337	place	
43-60	14338-14340	to	
43-61	14341-14344	put	
43-62	14345-14349	them	
43-63	14349-14350	.	
43-64	14351-14353	As	
43-65	14354-14355	a	
43-66	14356-14362	thanks	
43-67	14363-14365	to	
43-68	14366-14370	them	
43-69	14370-14371	,	
43-70	14372-14375	and	
43-71	14376-14380	with	
43-72	14381-14384	the	
43-73	14385-14389	help	
43-74	14390-14392	of	
43-75	14393-14396	the	
43-76	14397-14406	community	
43-77	14406-14407	,	
43-78	14408-14409	I	
43-79	14410-14412	am	
43-80	14413-14420	listing	
43-81	14421-14425	them	
43-82	14426-14431	below	
43-83	14431-14432	:	

#Text=Jeff Alton Paul Aoki James Bell Jennifer Caetta Philip Chang Jolly Chen Ron Choi Matt Dillon Zelaine Fong Adam Glass Jeffrey Goh Steven Grady Serge Granik Marti Hearst
44-1	14433-14437	Jeff	
44-2	14438-14443	Alton	
44-3	14444-14448	Paul	
44-4	14449-14453	Aoki	
44-5	14454-14459	James	
44-6	14460-14464	Bell	
44-7	14465-14473	Jennifer	
44-8	14474-14480	Caetta	
44-9	14481-14487	Philip	
44-10	14488-14493	Chang	
44-11	14494-14499	Jolly	
44-12	14500-14504	Chen	
44-13	14505-14508	Ron	
44-14	14509-14513	Choi	
44-15	14514-14518	Matt	
44-16	14519-14525	Dillon	
44-17	14526-14533	Zelaine	
44-18	14534-14538	Fong	
44-19	14539-14543	Adam	
44-20	14544-14549	Glass	
44-21	14550-14557	Jeffrey	
44-22	14558-14561	Goh	
44-23	14562-14568	Steven	
44-24	14569-14574	Grady	
44-25	14575-14580	Serge	
44-26	14581-14587	Granik	
44-27	14588-14593	Marti	
44-28	14594-14600	Hearst	

#Text=Joey Hellerstein Michael Hirohama Chin-Heng Hong Wei Hong Anant Jhingran Greg Kemnitz Marcel Kornacker Case Larsen Boris Livshitz Jeff Meredith Ginger Ogle Mike Olson Nels Olson
45-1	14601-14605	Joey	
45-2	14606-14617	Hellerstein	
45-3	14618-14625	Michael	
45-4	14626-14634	Hirohama	
45-5	14635-14644	Chin-Heng	
45-6	14645-14649	Hong	
45-7	14650-14653	Wei	
45-8	14654-14658	Hong	
45-9	14659-14664	Anant	
45-10	14665-14673	Jhingran	
45-11	14674-14678	Greg	
45-12	14679-14686	Kemnitz	
45-13	14687-14693	Marcel	
45-14	14694-14703	Kornacker	
45-15	14704-14708	Case	
45-16	14709-14715	Larsen	
45-17	14716-14721	Boris	
45-18	14722-14730	Livshitz	
45-19	14731-14735	Jeff	
45-20	14736-14744	Meredith	
45-21	14745-14751	Ginger	
45-22	14752-14756	Ogle	
45-23	14757-14761	Mike	
45-24	14762-14767	Olson	
45-25	14768-14772	Nels	
45-26	14773-14778	Olson	

#Text=Lay-Peng Ong Carol Paxson Avi Pfeffer Spyros Potamianos Sunita Surawagi David Muir Sharnoff Mark Sullivan Cimarron Taylor Marc Teitelbaum Yongdong Wang Kristen Wright
46-1	14779-14787	Lay-Peng	
46-2	14788-14791	Ong	
46-3	14792-14797	Carol	
46-4	14798-14804	Paxson	
46-5	14805-14808	Avi	
46-6	14809-14816	Pfeffer	
46-7	14817-14823	Spyros	
46-8	14824-14834	Potamianos	
46-9	14835-14841	Sunita	
46-10	14842-14850	Surawagi	
46-11	14851-14856	David	
46-12	14857-14861	Muir	
46-13	14862-14870	Sharnoff	
46-14	14871-14875	Mark	
46-15	14876-14884	Sullivan	
46-16	14885-14893	Cimarron	
46-17	14894-14900	Taylor	
46-18	14901-14905	Marc	
46-19	14906-14916	Teitelbaum	
46-20	14917-14925	Yongdong	
46-21	14926-14930	Wang	
46-22	14931-14938	Kristen	
46-23	14939-14945	Wright	

#Text=Andrew Yu I knew some of the names and initials from the C comments. Just like those of us who have worked on Postgres for decades, I doubt they suspected that their code would be used so many years later. View or Post Comments Postgres and the Artificial Intelligence Landscape
47-1	14946-14952	Andrew	
47-2	14953-14955	Yu	
47-3	14956-14957	I	
47-4	14958-14962	knew	
47-5	14963-14967	some	
47-6	14968-14970	of	
47-7	14971-14974	the	
47-8	14975-14980	names	
47-9	14981-14984	and	
47-10	14985-14993	initials	
47-11	14994-14998	from	
47-12	14999-15002	the	
47-13	15003-15004	C	
47-14	15005-15013	comments	
47-15	15013-15014	.	
47-16	15015-15019	Just	
47-17	15020-15024	like	
47-18	15025-15030	those	
47-19	15031-15033	of	
47-20	15034-15036	us	
47-21	15037-15040	who	
47-22	15041-15045	have	
47-23	15046-15052	worked	
47-24	15053-15055	on	
47-25	15056-15064	Postgres	
47-26	15065-15068	for	
47-27	15069-15076	decades	
47-28	15076-15077	,	
47-29	15078-15079	I	
47-30	15080-15085	doubt	
47-31	15086-15090	they	
47-32	15091-15100	suspected	
47-33	15101-15105	that	
47-34	15106-15111	their	
47-35	15112-15116	code	
47-36	15117-15122	would	
47-37	15123-15125	be	
47-38	15126-15130	used	
47-39	15131-15133	so	
47-40	15134-15138	many	
47-41	15139-15144	years	
47-42	15145-15150	later	
47-43	15150-15151	.	
47-44	15152-15156	View	
47-45	15157-15159	or	
47-46	15160-15164	Post	
47-47	15165-15173	Comments	
47-48	15174-15182	Postgres	
47-49	15183-15186	and	
47-50	15187-15190	the	
47-51	15191-15201	Artificial	
47-52	15202-15214	Intelligence	
47-53	15215-15224	Landscape	

#Text=Friday, September 18, 2020 I recently wrote a presentation, Postgres and the Artificial Intelligence Landscape, which covers the basics of artificial intelligence and shows how Postgres can be used for this purpose. This week I presented it at the Chicago PostgreSQL Meetup Group so I am now
48-1	15225-15231	Friday	
48-2	15231-15232	,	
48-3	15233-15242	September	
48-4	15243-15245	18	
48-5	15245-15246	,	
48-6	15247-15251	2020	
48-7	15252-15253	I	
48-8	15254-15262	recently	
48-9	15263-15268	wrote	
48-10	15269-15270	a	
48-11	15271-15283	presentation	
48-12	15283-15284	,	
48-13	15285-15293	Postgres	
48-14	15294-15297	and	
48-15	15298-15301	the	
48-16	15302-15312	Artificial	
48-17	15313-15325	Intelligence	
48-18	15326-15335	Landscape	
48-19	15335-15336	,	
48-20	15337-15342	which	
48-21	15343-15349	covers	
48-22	15350-15353	the	
48-23	15354-15360	basics	
48-24	15361-15363	of	
48-25	15364-15374	artificial	
48-26	15375-15387	intelligence	
48-27	15388-15391	and	
48-28	15392-15397	shows	
48-29	15398-15401	how	
48-30	15402-15410	Postgres	
48-31	15411-15414	can	
48-32	15415-15417	be	
48-33	15418-15422	used	
48-34	15423-15426	for	
48-35	15427-15431	this	
48-36	15432-15439	purpose	
48-37	15439-15440	.	
48-38	15441-15445	This	
48-39	15446-15450	week	
48-40	15451-15452	I	
48-41	15453-15462	presented	
48-42	15463-15465	it	
48-43	15466-15468	at	
48-44	15469-15472	the	
48-45	15473-15480	Chicago	
48-46	15481-15491	PostgreSQL	
48-47	15492-15498	Meetup	
48-48	15499-15504	Group	
48-49	15505-15507	so	
48-50	15508-15509	I	
48-51	15510-15512	am	
48-52	15513-15516	now	

#Text=publishing the slides. View or Post Comments Why Not to Choose Postgres Wednesday, September 16, 2020 Postgres has made great strides in adding features to match proprietary databases, and it has many complex features that other databases don't have.
49-1	15517-15527	publishing	
49-2	15528-15531	the	
49-3	15532-15538	slides	
49-4	15538-15539	.	
49-5	15540-15544	View	
49-6	15545-15547	or	
49-7	15548-15552	Post	
49-8	15553-15561	Comments	
49-9	15562-15565	Why	
49-10	15566-15569	Not	
49-11	15570-15572	to	
49-12	15573-15579	Choose	
49-13	15580-15588	Postgres	
49-14	15589-15598	Wednesday	
49-15	15598-15599	,	
49-16	15600-15609	September	
49-17	15610-15612	16	
49-18	15612-15613	,	
49-19	15614-15618	2020	
49-20	15619-15627	Postgres	
49-21	15628-15631	has	
49-22	15632-15636	made	
49-23	15637-15642	great	
49-24	15643-15650	strides	
49-25	15651-15653	in	
49-26	15654-15660	adding	
49-27	15661-15669	features	
49-28	15670-15672	to	
49-29	15673-15678	match	
49-30	15679-15690	proprietary	
49-31	15691-15700	databases	
49-32	15700-15701	,	
49-33	15702-15705	and	
49-34	15706-15708	it	
49-35	15709-15712	has	
49-36	15713-15717	many	
49-37	15718-15725	complex	
49-38	15726-15734	features	
49-39	15735-15739	that	
49-40	15740-15745	other	
49-41	15746-15755	databases	
49-42	15756-15761	don't	
49-43	15762-15766	have	
49-44	15766-15767	.	

#Text=However, that doesn't mean it is the best fit for every organization. There are still reasons not to use Postgres: Skills in another relational database, and no desire or value to learn Postgres Custom applications written for another database that you don't want to modify to work with Postgres
50-1	15768-15775	However	
50-2	15775-15776	,	
50-3	15777-15781	that	
50-4	15782-15789	doesn't	
50-5	15790-15794	mean	
50-6	15795-15797	it	
50-7	15798-15800	is	
50-8	15801-15804	the	
50-9	15805-15809	best	
50-10	15810-15813	fit	
50-11	15814-15817	for	
50-12	15818-15823	every	
50-13	15824-15836	organization	
50-14	15836-15837	.	
50-15	15838-15843	There	
50-16	15844-15847	are	
50-17	15848-15853	still	
50-18	15854-15861	reasons	
50-19	15862-15865	not	
50-20	15866-15868	to	
50-21	15869-15872	use	
50-22	15873-15881	Postgres	
50-23	15881-15882	:	
50-24	15883-15889	Skills	
50-25	15890-15892	in	
50-26	15893-15900	another	
50-27	15901-15911	relational	
50-28	15912-15920	database	
50-29	15920-15921	,	
50-30	15922-15925	and	
50-31	15926-15928	no	
50-32	15929-15935	desire	
50-33	15936-15938	or	
50-34	15939-15944	value	
50-35	15945-15947	to	
50-36	15948-15953	learn	
50-37	15954-15962	Postgres	
50-38	15963-15969	Custom	
50-39	15970-15982	applications	
50-40	15983-15990	written	
50-41	15991-15994	for	
50-42	15995-16002	another	
50-43	16003-16011	database	
50-44	16012-16016	that	
50-45	16017-16020	you	
50-46	16021-16026	don't	
50-47	16027-16031	want	
50-48	16032-16034	to	
50-49	16035-16041	modify	
50-50	16042-16044	to	
50-51	16045-16049	work	
50-52	16050-16054	with	
50-53	16055-16063	Postgres	

#Text=Using externally-developed applications, tools, or frameworks that don't support Postgres Storage of non-transactional or cache data where Postgres's overhead is significant Multi-host workloads with simple queries where NoSQL is a win Small, single-user systems, where SQLite is best This email thread had lot of discussion on the topic.
51-1	16064-16069	Using	
51-2	16070-16090	externally-developed	
51-3	16091-16103	applications	
51-4	16103-16104	,	
51-5	16105-16110	tools	
51-6	16110-16111	,	
51-7	16112-16114	or	
51-8	16115-16125	frameworks	
51-9	16126-16130	that	
51-10	16131-16136	don't	
51-11	16137-16144	support	
51-12	16145-16153	Postgres	
51-13	16154-16161	Storage	
51-14	16162-16164	of	
51-15	16165-16182	non-transactional	
51-16	16183-16185	or	
51-17	16186-16191	cache	
51-18	16192-16196	data	
51-19	16197-16202	where	
51-20	16203-16213	Postgres's	
51-21	16214-16222	overhead	
51-22	16223-16225	is	
51-23	16226-16237	significant	
51-24	16238-16248	Multi-host	
51-25	16249-16258	workloads	
51-26	16259-16263	with	
51-27	16264-16270	simple	
51-28	16271-16278	queries	
51-29	16279-16284	where	
51-30	16285-16290	NoSQL	
51-31	16291-16293	is	
51-32	16294-16295	a	
51-33	16296-16299	win	
51-34	16300-16305	Small	
51-35	16305-16306	,	
51-36	16307-16318	single-user	
51-37	16319-16326	systems	
51-38	16326-16327	,	
51-39	16328-16333	where	
51-40	16334-16340	SQLite	
51-41	16341-16343	is	
51-42	16344-16348	best	
51-43	16349-16353	This	
51-44	16354-16359	email	
51-45	16360-16366	thread	
51-46	16367-16370	had	
51-47	16371-16374	lot	
51-48	16375-16377	of	
51-49	16378-16388	discussion	
51-50	16389-16391	on	
51-51	16392-16395	the	
51-52	16396-16401	topic	
51-53	16401-16402	.	

#Text=What is interesting is that decades-old complaints about missing features, reliability, and performance are no longer mentioned. View or Post Comments Migrating Away from Hacks Monday, September 14, 2020 Database applications are initially written using the simplest queries possible. During testing and in production, some application tasks might have unacceptable performance.
52-1	16403-16407	What	
52-2	16408-16410	is	
52-3	16411-16422	interesting	
52-4	16423-16425	is	
52-5	16426-16430	that	
52-6	16431-16442	decades-old	
52-7	16443-16453	complaints	
52-8	16454-16459	about	
52-9	16460-16467	missing	
52-10	16468-16476	features	
52-11	16476-16477	,	
52-12	16478-16489	reliability	
52-13	16489-16490	,	
52-14	16491-16494	and	
52-15	16495-16506	performance	
52-16	16507-16510	are	
52-17	16511-16513	no	
52-18	16514-16520	longer	
52-19	16521-16530	mentioned	
52-20	16530-16531	.	
52-21	16532-16536	View	
52-22	16537-16539	or	
52-23	16540-16544	Post	
52-24	16545-16553	Comments	
52-25	16554-16563	Migrating	
52-26	16564-16568	Away	
52-27	16569-16573	from	
52-28	16574-16579	Hacks	
52-29	16580-16586	Monday	
52-30	16586-16587	,	
52-31	16588-16597	September	
52-32	16598-16600	14	
52-33	16600-16601	,	
52-34	16602-16606	2020	
52-35	16607-16615	Database	
52-36	16616-16628	applications	
52-37	16629-16632	are	
52-38	16633-16642	initially	
52-39	16643-16650	written	
52-40	16651-16656	using	
52-41	16657-16660	the	
52-42	16661-16669	simplest	
52-43	16670-16677	queries	
52-44	16678-16686	possible	
52-45	16686-16687	.	
52-46	16688-16694	During	
52-47	16695-16702	testing	
52-48	16703-16706	and	
52-49	16707-16709	in	
52-50	16710-16720	production	
52-51	16720-16721	,	
52-52	16722-16726	some	
52-53	16727-16738	application	
52-54	16739-16744	tasks	
52-55	16745-16750	might	
52-56	16751-16755	have	
52-57	16756-16768	unacceptable	
52-58	16769-16780	performance	
52-59	16780-16781	.	

#Text=This is where re-architecturing happens, and where simple queries and data schema layouts can get complex. They might get complex because it is required to accomplish the task, or it might be because of limitations in how the database software handles certain queries.
53-1	16782-16786	This	
53-2	16787-16789	is	
53-3	16790-16795	where	
53-4	16796-16813	re-architecturing	
53-5	16814-16821	happens	
53-6	16821-16822	,	
53-7	16823-16826	and	
53-8	16827-16832	where	
53-9	16833-16839	simple	
53-10	16840-16847	queries	
53-11	16848-16851	and	
53-12	16852-16856	data	
53-13	16857-16863	schema	
53-14	16864-16871	layouts	
53-15	16872-16875	can	
53-16	16876-16879	get	
53-17	16880-16887	complex	
53-18	16887-16888	.	
53-19	16889-16893	They	
53-20	16894-16899	might	
53-21	16900-16903	get	
53-22	16904-16911	complex	
53-23	16912-16919	because	
53-24	16920-16922	it	
53-25	16923-16925	is	
53-26	16926-16934	required	
53-27	16935-16937	to	
53-28	16938-16948	accomplish	
53-29	16949-16952	the	
53-30	16953-16957	task	
53-31	16957-16958	,	
53-32	16959-16961	or	
53-33	16962-16964	it	
53-34	16965-16970	might	
53-35	16971-16973	be	
53-36	16974-16981	because	
53-37	16982-16984	of	
53-38	16985-16996	limitations	
53-39	16997-16999	in	
53-40	17000-17003	how	
53-41	17004-17007	the	
53-42	17008-17016	database	
53-43	17017-17025	software	
53-44	17026-17033	handles	
53-45	17034-17041	certain	
53-46	17042-17049	queries	
53-47	17049-17050	.	

#Text=Database and tooling upgrades can require further complex additions. When switching to a new database like Postgres, all that complexity comes along for the ride. Sometimes complexity added to work around deficiencies in other databases work fine in Postgres, but often that complexity has to be removed to get good performance in Postgres.
54-1	17051-17059	Database	
54-2	17060-17063	and	
54-3	17064-17071	tooling	
54-4	17072-17080	upgrades	
54-5	17081-17084	can	
54-6	17085-17092	require	
54-7	17093-17100	further	
54-8	17101-17108	complex	
54-9	17109-17118	additions	
54-10	17118-17119	.	
54-11	17120-17124	When	
54-12	17125-17134	switching	
54-13	17135-17137	to	
54-14	17138-17139	a	
54-15	17140-17143	new	
54-16	17144-17152	database	
54-17	17153-17157	like	
54-18	17158-17166	Postgres	
54-19	17166-17167	,	
54-20	17168-17171	all	
54-21	17172-17176	that	
54-22	17177-17187	complexity	
54-23	17188-17193	comes	
54-24	17194-17199	along	
54-25	17200-17203	for	
54-26	17204-17207	the	
54-27	17208-17212	ride	
54-28	17212-17213	.	
54-29	17214-17223	Sometimes	
54-30	17224-17234	complexity	
54-31	17235-17240	added	
54-32	17241-17243	to	
54-33	17244-17248	work	
54-34	17249-17255	around	
54-35	17256-17268	deficiencies	
54-36	17269-17271	in	
54-37	17272-17277	other	
54-38	17278-17287	databases	
54-39	17288-17292	work	
54-40	17293-17297	fine	
54-41	17298-17300	in	
54-42	17301-17309	Postgres	
54-43	17309-17310	,	
54-44	17311-17314	but	
54-45	17315-17320	often	
54-46	17321-17325	that	
54-47	17326-17336	complexity	
54-48	17337-17340	has	
54-49	17341-17343	to	
54-50	17344-17346	be	
54-51	17347-17354	removed	
54-52	17355-17357	to	
54-53	17358-17361	get	
54-54	17362-17366	good	
54-55	17367-17378	performance	
54-56	17379-17381	in	
54-57	17382-17390	Postgres	
54-58	17390-17391	.	

#Text=There also might be cases where complexity has to be added to get good performance in Postgres. The bottom line is that complexity is bad for applications, so add complexity only when necessary. Wise application developers remove unnecessary complexity periodically, but it can be hard to know if database upgrades have made some complexity unnecessary. Porting to a new database is an ideal time to reevaluate if application simplification is possible.
55-1	17392-17397	There	
55-2	17398-17402	also	
55-3	17403-17408	might	
55-4	17409-17411	be	
55-5	17412-17417	cases	
55-6	17418-17423	where	
55-7	17424-17434	complexity	
55-8	17435-17438	has	
55-9	17439-17441	to	
55-10	17442-17444	be	
55-11	17445-17450	added	
55-12	17451-17453	to	
55-13	17454-17457	get	
55-14	17458-17462	good	
55-15	17463-17474	performance	
55-16	17475-17477	in	
55-17	17478-17486	Postgres	
55-18	17486-17487	.	
55-19	17488-17491	The	
55-20	17492-17498	bottom	
55-21	17499-17503	line	
55-22	17504-17506	is	
55-23	17507-17511	that	
55-24	17512-17522	complexity	
55-25	17523-17525	is	
55-26	17526-17529	bad	
55-27	17530-17533	for	
55-28	17534-17546	applications	
55-29	17546-17547	,	
55-30	17548-17550	so	
55-31	17551-17554	add	
55-32	17555-17565	complexity	
55-33	17566-17570	only	
55-34	17571-17575	when	
55-35	17576-17585	necessary	
55-36	17585-17586	.	
55-37	17587-17591	Wise	
55-38	17592-17603	application	
55-39	17604-17614	developers	
55-40	17615-17621	remove	
55-41	17622-17633	unnecessary	
55-42	17634-17644	complexity	
55-43	17645-17657	periodically	
55-44	17657-17658	,	
55-45	17659-17662	but	
55-46	17663-17665	it	
55-47	17666-17669	can	
55-48	17670-17672	be	
55-49	17673-17677	hard	
55-50	17678-17680	to	
55-51	17681-17685	know	
55-52	17686-17688	if	
55-53	17689-17697	database	
55-54	17698-17706	upgrades	
55-55	17707-17711	have	
55-56	17712-17716	made	
55-57	17717-17721	some	
55-58	17722-17732	complexity	
55-59	17733-17744	unnecessary	
55-60	17744-17745	.	
55-61	17746-17753	Porting	
55-62	17754-17756	to	
55-63	17757-17758	a	
55-64	17759-17762	new	
55-65	17763-17771	database	
55-66	17772-17774	is	
55-67	17775-17777	an	
55-68	17778-17783	ideal	
55-69	17784-17788	time	
55-70	17789-17791	to	
55-71	17792-17802	reevaluate	
55-72	17803-17805	if	
55-73	17806-17817	application	
55-74	17818-17832	simplification	
55-75	17833-17835	is	
55-76	17836-17844	possible	
55-77	17844-17845	.	

#Text=View or Post Comments Postgres in the Cloud: The Hard Way Friday, September 11, 2020 I recently wrote a presentation, Postgres in the Cloud: The Hard Way, which shows how to create a cloud instance, and install and run Postgres, purely from the command line.
56-1	17846-17850	View	
56-2	17851-17853	or	
56-3	17854-17858	Post	
56-4	17859-17867	Comments	
56-5	17868-17876	Postgres	
56-6	17877-17879	in	
56-7	17880-17883	the	
56-8	17884-17889	Cloud	
56-9	17889-17890	:	
56-10	17891-17894	The	
56-11	17895-17899	Hard	
56-12	17900-17903	Way	
56-13	17904-17910	Friday	
56-14	17910-17911	,	
56-15	17912-17921	September	
56-16	17922-17924	11	
56-17	17924-17925	,	
56-18	17926-17930	2020	
56-19	17931-17932	I	
56-20	17933-17941	recently	
56-21	17942-17947	wrote	
56-22	17948-17949	a	
56-23	17950-17962	presentation	
56-24	17962-17963	,	
56-25	17964-17972	Postgres	
56-26	17973-17975	in	
56-27	17976-17979	the	
56-28	17980-17985	Cloud	
56-29	17985-17986	:	
56-30	17987-17990	The	
56-31	17991-17995	Hard	
56-32	17996-17999	Way	
56-33	17999-18000	,	
56-34	18001-18006	which	
56-35	18007-18012	shows	
56-36	18013-18016	how	
56-37	18017-18019	to	
56-38	18020-18026	create	
56-39	18027-18028	a	
56-40	18029-18034	cloud	
56-41	18035-18043	instance	
56-42	18043-18044	,	
56-43	18045-18048	and	
56-44	18049-18056	install	
56-45	18057-18060	and	
56-46	18061-18064	run	
56-47	18065-18073	Postgres	
56-48	18073-18074	,	
56-49	18075-18081	purely	
56-50	18082-18086	from	
56-51	18087-18090	the	
56-52	18091-18098	command	
56-53	18099-18103	line	
56-54	18103-18104	.	

#Text=This helps show how all the pieces fit together. I recently presented this at pgDay Israel so I am now publishing the slides. recording of the presentation is available. View or Post Comments Changing Cars, Changing Databases Thursday, September 3, 2020
57-1	18105-18109	This	
57-2	18110-18115	helps	
57-3	18116-18120	show	
57-4	18121-18124	how	
57-5	18125-18128	all	
57-6	18129-18132	the	
57-7	18133-18139	pieces	
57-8	18140-18143	fit	
57-9	18144-18152	together	
57-10	18152-18153	.	
57-11	18154-18155	I	
57-12	18156-18164	recently	
57-13	18165-18174	presented	
57-14	18175-18179	this	
57-15	18180-18182	at	
57-16	18183-18188	pgDay	
57-17	18189-18195	Israel	
57-18	18196-18198	so	
57-19	18199-18200	I	
57-20	18201-18203	am	
57-21	18204-18207	now	
57-22	18208-18218	publishing	
57-23	18219-18222	the	
57-24	18223-18229	slides	
57-25	18229-18230	.	
57-26	18231-18240	recording	
57-27	18241-18243	of	
57-28	18244-18247	the	
57-29	18248-18260	presentation	
57-30	18261-18263	is	
57-31	18264-18273	available	
57-32	18273-18274	.	
57-33	18275-18279	View	
57-34	18280-18282	or	
57-35	18283-18287	Post	
57-36	18288-18296	Comments	
57-37	18297-18305	Changing	
57-38	18306-18310	Cars	
57-39	18310-18311	,	
57-40	18312-18320	Changing	
57-41	18321-18330	Databases	
57-42	18331-18339	Thursday	
57-43	18339-18340	,	
57-44	18341-18350	September	
57-45	18351-18352	3	
57-46	18352-18353	,	
57-47	18354-18358	2020	

#Text=It would be very easy if I drove the same car regularly, but because of my family size and travels, I don't have that luxury. Some cars I drive have smart keys, some mechanical keys. Some have gas tank doors on the driver's side, others from the passenger side. They steer differently, have different acceleration capabilities, even different service requirements.
58-1	18359-18361	It	
58-2	18362-18367	would	
58-3	18368-18370	be	
58-4	18371-18375	very	
58-5	18376-18380	easy	
58-6	18381-18383	if	
58-7	18384-18385	I	
58-8	18386-18391	drove	
58-9	18392-18395	the	
58-10	18396-18400	same	
58-11	18401-18404	car	
58-12	18405-18414	regularly	
58-13	18414-18415	,	
58-14	18416-18419	but	
58-15	18420-18427	because	
58-16	18428-18430	of	
58-17	18431-18433	my	
58-18	18434-18440	family	
58-19	18441-18445	size	
58-20	18446-18449	and	
58-21	18450-18457	travels	
58-22	18457-18458	,	
58-23	18459-18460	I	
58-24	18461-18466	don't	
58-25	18467-18471	have	
58-26	18472-18476	that	
58-27	18477-18483	luxury	
58-28	18483-18484	.	
58-29	18485-18489	Some	
58-30	18490-18494	cars	
58-31	18495-18496	I	
58-32	18497-18502	drive	
58-33	18503-18507	have	
58-34	18508-18513	smart	
58-35	18514-18518	keys	
58-36	18518-18519	,	
58-37	18520-18524	some	
58-38	18525-18535	mechanical	
58-39	18536-18540	keys	
58-40	18540-18541	.	
58-41	18542-18546	Some	
58-42	18547-18551	have	
58-43	18552-18555	gas	
58-44	18556-18560	tank	
58-45	18561-18566	doors	
58-46	18567-18569	on	
58-47	18570-18573	the	
58-48	18574-18582	driver's	
58-49	18583-18587	side	
58-50	18587-18588	,	
58-51	18589-18595	others	
58-52	18596-18600	from	
58-53	18601-18604	the	
58-54	18605-18614	passenger	
58-55	18615-18619	side	
58-56	18619-18620	.	
58-57	18621-18625	They	
58-58	18626-18631	steer	
58-59	18632-18643	differently	
58-60	18643-18644	,	
58-61	18645-18649	have	
58-62	18650-18659	different	
58-63	18660-18672	acceleration	
58-64	18673-18685	capabilities	
58-65	18685-18686	,	
58-66	18687-18691	even	
58-67	18692-18701	different	
58-68	18702-18709	service	
58-69	18710-18722	requirements	
58-70	18722-18723	.	

#Text=I have gotten used to switching cars, but still get confused when I have to fuel the car since I have to remember which side has the gas tank door. If I had driven the same car for years, switching to a different car would be even harder — that is the circumstance for people moving from other databases to Postgres. They have often driven the same
59-1	18724-18725	I	
59-2	18726-18730	have	
59-3	18731-18737	gotten	
59-4	18738-18742	used	
59-5	18743-18745	to	
59-6	18746-18755	switching	
59-7	18756-18760	cars	
59-8	18760-18761	,	
59-9	18762-18765	but	
59-10	18766-18771	still	
59-11	18772-18775	get	
59-12	18776-18784	confused	
59-13	18785-18789	when	
59-14	18790-18791	I	
59-15	18792-18796	have	
59-16	18797-18799	to	
59-17	18800-18804	fuel	
59-18	18805-18808	the	
59-19	18809-18812	car	
59-20	18813-18818	since	
59-21	18819-18820	I	
59-22	18821-18825	have	
59-23	18826-18828	to	
59-24	18829-18837	remember	
59-25	18838-18843	which	
59-26	18844-18848	side	
59-27	18849-18852	has	
59-28	18853-18856	the	
59-29	18857-18860	gas	
59-30	18861-18865	tank	
59-31	18866-18870	door	
59-32	18870-18871	.	
59-33	18872-18874	If	
59-34	18875-18876	I	
59-35	18877-18880	had	
59-36	18881-18887	driven	
59-37	18888-18891	the	
59-38	18892-18896	same	
59-39	18897-18900	car	
59-40	18901-18904	for	
59-41	18905-18910	years	
59-42	18910-18911	,	
59-43	18912-18921	switching	
59-44	18922-18924	to	
59-45	18925-18926	a	
59-46	18927-18936	different	
59-47	18937-18940	car	
59-48	18941-18946	would	
59-49	18947-18949	be	
59-50	18950-18954	even	
59-51	18955-18961	harder	
59-52	18962-18963	—	
59-53	18964-18968	that	
59-54	18969-18971	is	
59-55	18972-18975	the	
59-56	18976-18988	circumstance	
59-57	18989-18992	for	
59-58	18993-18999	people	
59-59	19000-19006	moving	
59-60	19007-19011	from	
59-61	19012-19017	other	
59-62	19018-19027	databases	
59-63	19028-19030	to	
59-64	19031-19039	Postgres	
59-65	19039-19040	.	
59-66	19041-19045	They	
59-67	19046-19050	have	
59-68	19051-19056	often	
59-69	19057-19063	driven	
59-70	19064-19067	the	
59-71	19068-19072	same	

#Text=car/database for years, perhaps decades. They know the intricacies of how those databases behave that even the average database vendor employee might not know. Switching to another database can be traumatic, especially if their job relies on databases running reliably.
60-1	19073-19076	car	
60-2	19076-19077	/	
60-3	19077-19085	database	
60-4	19086-19089	for	
60-5	19090-19095	years	
60-6	19095-19096	,	
60-7	19097-19104	perhaps	
60-8	19105-19112	decades	
60-9	19112-19113	.	
60-10	19114-19118	They	
60-11	19119-19123	know	
60-12	19124-19127	the	
60-13	19128-19139	intricacies	
60-14	19140-19142	of	
60-15	19143-19146	how	
60-16	19147-19152	those	
60-17	19153-19162	databases	
60-18	19163-19169	behave	
60-19	19170-19174	that	
60-20	19175-19179	even	
60-21	19180-19183	the	
60-22	19184-19191	average	
60-23	19192-19200	database	
60-24	19201-19207	vendor	
60-25	19208-19216	employee	
60-26	19217-19222	might	
60-27	19223-19226	not	
60-28	19227-19231	know	
60-29	19231-19232	.	
60-30	19233-19242	Switching	
60-31	19243-19245	to	
60-32	19246-19253	another	
60-33	19254-19262	database	
60-34	19263-19266	can	
60-35	19267-19269	be	
60-36	19270-19279	traumatic	
60-37	19279-19280	,	
60-38	19281-19291	especially	
60-39	19292-19294	if	
60-40	19295-19300	their	
60-41	19301-19304	job	
60-42	19305-19311	relies	
60-43	19312-19314	on	
60-44	19315-19324	databases	
60-45	19325-19332	running	
60-46	19333-19341	reliably	
60-47	19341-19342	.	

#Text=They probably have all sorts of tricks and procedures for ensuring uptime, and, when switching databases, it isn't always clear if those procedures should be modified or abandoned, and what new procedures will be necessary. There are some tasks that are common to all database: sql, backups, fail over, performance monitoring, but it would be nice if there was a cheat sheet of all the changes necessary in moving from
61-1	19343-19347	They	
61-2	19348-19356	probably	
61-3	19357-19361	have	
61-4	19362-19365	all	
61-5	19366-19371	sorts	
61-6	19372-19374	of	
61-7	19375-19381	tricks	
61-8	19382-19385	and	
61-9	19386-19396	procedures	
61-10	19397-19400	for	
61-11	19401-19409	ensuring	
61-12	19410-19416	uptime	
61-13	19416-19417	,	
61-14	19418-19421	and	
61-15	19421-19422	,	
61-16	19423-19427	when	
61-17	19428-19437	switching	
61-18	19438-19447	databases	
61-19	19447-19448	,	
61-20	19449-19451	it	
61-21	19452-19457	isn't	
61-22	19458-19464	always	
61-23	19465-19470	clear	
61-24	19471-19473	if	
61-25	19474-19479	those	
61-26	19480-19490	procedures	
61-27	19491-19497	should	
61-28	19498-19500	be	
61-29	19501-19509	modified	
61-30	19510-19512	or	
61-31	19513-19522	abandoned	
61-32	19522-19523	,	
61-33	19524-19527	and	
61-34	19528-19532	what	
61-35	19533-19536	new	
61-36	19537-19547	procedures	
61-37	19548-19552	will	
61-38	19553-19555	be	
61-39	19556-19565	necessary	
61-40	19565-19566	.	
61-41	19567-19572	There	
61-42	19573-19576	are	
61-43	19577-19581	some	
61-44	19582-19587	tasks	
61-45	19588-19592	that	
61-46	19593-19596	are	
61-47	19597-19603	common	
61-48	19604-19606	to	
61-49	19607-19610	all	
61-50	19611-19619	database	
61-51	19619-19620	:	
61-52	19621-19624	sql	
61-53	19624-19625	,	
61-54	19626-19633	backups	
61-55	19633-19634	,	
61-56	19635-19639	fail	
61-57	19640-19644	over	
61-58	19644-19645	,	
61-59	19646-19657	performance	
61-60	19658-19668	monitoring	
61-61	19668-19669	,	
61-62	19670-19673	but	
61-63	19674-19676	it	
61-64	19677-19682	would	
61-65	19683-19685	be	
61-66	19686-19690	nice	
61-67	19691-19693	if	
61-68	19694-19699	there	
61-69	19700-19703	was	
61-70	19704-19705	a	
61-71	19706-19711	cheat	
61-72	19712-19717	sheet	
61-73	19718-19720	of	
61-74	19721-19724	all	
61-75	19725-19728	the	
61-76	19729-19736	changes	
61-77	19737-19746	necessary	
61-78	19747-19749	in	
61-79	19750-19756	moving	
61-80	19757-19761	from	

#Text=one database to another. There are some guides in switching from other databases to Postgres, but they don't cover every detail, and many user procedures are based on their workload. It isn't always possible to even know how workloads will behave in Postgres.
62-1	19762-19765	one	
62-2	19766-19774	database	
62-3	19775-19777	to	
62-4	19778-19785	another	
62-5	19785-19786	.	
62-6	19787-19792	There	
62-7	19793-19796	are	
62-8	19797-19801	some	
62-9	19802-19808	guides	
62-10	19809-19811	in	
62-11	19812-19821	switching	
62-12	19822-19826	from	
62-13	19827-19832	other	
62-14	19833-19842	databases	
62-15	19843-19845	to	
62-16	19846-19854	Postgres	
62-17	19854-19855	,	
62-18	19856-19859	but	
62-19	19860-19864	they	
62-20	19865-19870	don't	
62-21	19871-19876	cover	
62-22	19877-19882	every	
62-23	19883-19889	detail	
62-24	19889-19890	,	
62-25	19891-19894	and	
62-26	19895-19899	many	
62-27	19900-19904	user	
62-28	19905-19915	procedures	
62-29	19916-19919	are	
62-30	19920-19925	based	
62-31	19926-19928	on	
62-32	19929-19934	their	
62-33	19935-19943	workload	
62-34	19943-19944	.	
62-35	19945-19947	It	
62-36	19948-19953	isn't	
62-37	19954-19960	always	
62-38	19961-19969	possible	
62-39	19970-19972	to	
62-40	19973-19977	even	
62-41	19978-19982	know	
62-42	19983-19986	how	
62-43	19987-19996	workloads	
62-44	19997-20001	will	
62-45	20002-20008	behave	
62-46	20009-20011	in	
62-47	20012-20020	Postgres	
62-48	20020-20021	.	

#Text=It is not clear exactly what recommendation I can give for users switching to Postgres, except to review all existing procedures to determine if they are still necessary or need modification, and if new procedures are necessary. One thing is for sure — changes will be needed, and rigidly following procedures used for your previous database is not a wise plan. View or Post Comments The Inner Workings of Oracle Development Monday, August 31, 2020
63-1	20022-20024	It	
63-2	20025-20027	is	
63-3	20028-20031	not	
63-4	20032-20037	clear	
63-5	20038-20045	exactly	
63-6	20046-20050	what	
63-7	20051-20065	recommendation	
63-8	20066-20067	I	
63-9	20068-20071	can	
63-10	20072-20076	give	
63-11	20077-20080	for	
63-12	20081-20086	users	
63-13	20087-20096	switching	
63-14	20097-20099	to	
63-15	20100-20108	Postgres	
63-16	20108-20109	,	
63-17	20110-20116	except	
63-18	20117-20119	to	
63-19	20120-20126	review	
63-20	20127-20130	all	
63-21	20131-20139	existing	
63-22	20140-20150	procedures	
63-23	20151-20153	to	
63-24	20154-20163	determine	
63-25	20164-20166	if	
63-26	20167-20171	they	
63-27	20172-20175	are	
63-28	20176-20181	still	
63-29	20182-20191	necessary	
63-30	20192-20194	or	
63-31	20195-20199	need	
63-32	20200-20212	modification	
63-33	20212-20213	,	
63-34	20214-20217	and	
63-35	20218-20220	if	
63-36	20221-20224	new	
63-37	20225-20235	procedures	
63-38	20236-20239	are	
63-39	20240-20249	necessary	
63-40	20249-20250	.	
63-41	20251-20254	One	
63-42	20255-20260	thing	
63-43	20261-20263	is	
63-44	20264-20267	for	
63-45	20268-20272	sure	
63-46	20273-20274	—	
63-47	20275-20282	changes	
63-48	20283-20287	will	
63-49	20288-20290	be	
63-50	20291-20297	needed	
63-51	20297-20298	,	
63-52	20299-20302	and	
63-53	20303-20310	rigidly	
63-54	20311-20320	following	
63-55	20321-20331	procedures	
63-56	20332-20336	used	
63-57	20337-20340	for	
63-58	20341-20345	your	
63-59	20346-20354	previous	
63-60	20355-20363	database	
63-61	20364-20366	is	
63-62	20367-20370	not	
63-63	20371-20372	a	
63-64	20373-20377	wise	
63-65	20378-20382	plan	
63-66	20382-20383	.	
63-67	20384-20388	View	
63-68	20389-20391	or	
63-69	20392-20396	Post	
63-70	20397-20405	Comments	
63-71	20406-20409	The	
63-72	20410-20415	Inner	
63-73	20416-20424	Workings	
63-74	20425-20427	of	
63-75	20428-20434	Oracle	
63-76	20435-20446	Development	
63-77	20447-20453	Monday	
63-78	20453-20454	,	
63-79	20455-20461	August	
63-80	20462-20464	31	
63-81	20464-20465	,	
63-82	20466-20470	2020	

#Text=Having worked in open source for decades, where every success and failure is public knowledge, I have always wondered how proprietary development is done, particularly for databases. I have gotten some glimpses into that world from former employees, but this Y combinator thread is the most extensive view of Oracle development I have ever seen. It has useful lessons for all developers, as well as comments about the source code of
64-1	20471-20477	Having	
64-2	20478-20484	worked	
64-3	20485-20487	in	
64-4	20488-20492	open	
64-5	20493-20499	source	
64-6	20500-20503	for	
64-7	20504-20511	decades	
64-8	20511-20512	,	
64-9	20513-20518	where	
64-10	20519-20524	every	
64-11	20525-20532	success	
64-12	20533-20536	and	
64-13	20537-20544	failure	
64-14	20545-20547	is	
64-15	20548-20554	public	
64-16	20555-20564	knowledge	
64-17	20564-20565	,	
64-18	20566-20567	I	
64-19	20568-20572	have	
64-20	20573-20579	always	
64-21	20580-20588	wondered	
64-22	20589-20592	how	
64-23	20593-20604	proprietary	
64-24	20605-20616	development	
64-25	20617-20619	is	
64-26	20620-20624	done	
64-27	20624-20625	,	
64-28	20626-20638	particularly	
64-29	20639-20642	for	
64-30	20643-20652	databases	
64-31	20652-20653	.	
64-32	20654-20655	I	
64-33	20656-20660	have	
64-34	20661-20667	gotten	
64-35	20668-20672	some	
64-36	20673-20681	glimpses	
64-37	20682-20686	into	
64-38	20687-20691	that	
64-39	20692-20697	world	
64-40	20698-20702	from	
64-41	20703-20709	former	
64-42	20710-20719	employees	
64-43	20719-20720	,	
64-44	20721-20724	but	
64-45	20725-20729	this	
64-46	20730-20731	Y	
64-47	20732-20742	combinator	
64-48	20743-20749	thread	
64-49	20750-20752	is	
64-50	20753-20756	the	
64-51	20757-20761	most	
64-52	20762-20771	extensive	
64-53	20772-20776	view	
64-54	20777-20779	of	
64-55	20780-20786	Oracle	
64-56	20787-20798	development	
64-57	20799-20800	I	
64-58	20801-20805	have	
64-59	20806-20810	ever	
64-60	20811-20815	seen	
64-61	20815-20816	.	
64-62	20817-20819	It	
64-63	20820-20823	has	
64-64	20824-20830	useful	
64-65	20831-20838	lessons	
64-66	20839-20842	for	
64-67	20843-20846	all	
64-68	20847-20857	developers	
64-69	20857-20858	,	
64-70	20859-20861	as	
64-71	20862-20866	well	
64-72	20867-20869	as	
64-73	20870-20878	comments	
64-74	20879-20884	about	
64-75	20885-20888	the	
64-76	20889-20895	source	
64-77	20896-20900	code	
64-78	20901-20903	of	

#Text=other relational databases. The first thing that jumped out to me is how overwhelmed the staff appears to be by the source code's complexity. Code cleanup is never fun but it is necessary for efficient coding. For companies, it is
65-1	20904-20909	other	
65-2	20910-20920	relational	
65-3	20921-20930	databases	
65-4	20930-20931	.	
65-5	20932-20935	The	
65-6	20936-20941	first	
65-7	20942-20947	thing	
65-8	20948-20952	that	
65-9	20953-20959	jumped	
65-10	20960-20963	out	
65-11	20964-20966	to	
65-12	20967-20969	me	
65-13	20970-20972	is	
65-14	20973-20976	how	
65-15	20977-20988	overwhelmed	
65-16	20989-20992	the	
65-17	20993-20998	staff	
65-18	20999-21006	appears	
65-19	21007-21009	to	
65-20	21010-21012	be	
65-21	21013-21015	by	
65-22	21016-21019	the	
65-23	21020-21026	source	
65-24	21027-21033	code's	
65-25	21034-21044	complexity	
65-26	21044-21045	.	
65-27	21046-21050	Code	
65-28	21051-21058	cleanup	
65-29	21059-21061	is	
65-30	21062-21067	never	
65-31	21068-21071	fun	
65-32	21072-21075	but	
65-33	21076-21078	it	
65-34	21079-21081	is	
65-35	21082-21091	necessary	
65-36	21092-21095	for	
65-37	21096-21105	efficient	
65-38	21106-21112	coding	
65-39	21112-21113	.	
65-40	21114-21117	For	
65-41	21118-21127	companies	
65-42	21127-21128	,	
65-43	21129-21131	it	
65-44	21132-21134	is	

#Text=hard to justify developer time spent on code cleanup since the benefits of cleanup are often minor for each task but, in aggregate over time, huge. Code cleanup can rarely be tied to a direct deliverable, so it is often overlooked. For open source, clean code encourages developers to spend their free time coding, so there is a more direct incentive to do cleanup, plus deliverables for open source are much less rigid.
66-1	21135-21139	hard	
66-2	21140-21142	to	
66-3	21143-21150	justify	
66-4	21151-21160	developer	
66-5	21161-21165	time	
66-6	21166-21171	spent	
66-7	21172-21174	on	
66-8	21175-21179	code	
66-9	21180-21187	cleanup	
66-10	21188-21193	since	
66-11	21194-21197	the	
66-12	21198-21206	benefits	
66-13	21207-21209	of	
66-14	21210-21217	cleanup	
66-15	21218-21221	are	
66-16	21222-21227	often	
66-17	21228-21233	minor	
66-18	21234-21237	for	
66-19	21238-21242	each	
66-20	21243-21247	task	
66-21	21248-21251	but	
66-22	21251-21252	,	
66-23	21253-21255	in	
66-24	21256-21265	aggregate	
66-25	21266-21270	over	
66-26	21271-21275	time	
66-27	21275-21276	,	
66-28	21277-21281	huge	
66-29	21281-21282	.	
66-30	21283-21287	Code	
66-31	21288-21295	cleanup	
66-32	21296-21299	can	
66-33	21300-21306	rarely	
66-34	21307-21309	be	
66-35	21310-21314	tied	
66-36	21315-21317	to	
66-37	21318-21319	a	
66-38	21320-21326	direct	
66-39	21327-21338	deliverable	
66-40	21338-21339	,	
66-41	21340-21342	so	
66-42	21343-21345	it	
66-43	21346-21348	is	
66-44	21349-21354	often	
66-45	21355-21365	overlooked	
66-46	21365-21366	.	
66-47	21367-21370	For	
66-48	21371-21375	open	
66-49	21376-21382	source	
66-50	21382-21383	,	
66-51	21384-21389	clean	
66-52	21390-21394	code	
66-53	21395-21405	encourages	
66-54	21406-21416	developers	
66-55	21417-21419	to	
66-56	21420-21425	spend	
66-57	21426-21431	their	
66-58	21432-21436	free	
66-59	21437-21441	time	
66-60	21442-21448	coding	
66-61	21448-21449	,	
66-62	21450-21452	so	
66-63	21453-21458	there	
66-64	21459-21461	is	
66-65	21462-21463	a	
66-66	21464-21468	more	
66-67	21469-21475	direct	
66-68	21476-21485	incentive	
66-69	21486-21488	to	
66-70	21489-21491	do	
66-71	21492-21499	cleanup	
66-72	21499-21500	,	
66-73	21501-21505	plus	
66-74	21506-21518	deliverables	
66-75	21519-21522	for	
66-76	21523-21527	open	
66-77	21528-21534	source	
66-78	21535-21538	are	
66-79	21539-21543	much	
66-80	21544-21548	less	
66-81	21549-21554	rigid	
66-82	21554-21555	.	

#Text=There is a mention of Postgres in the thread: I'm sure some of the difference (25M [Oracle] vs. 1.3M [Postgres}) can be attributed to code for Oracle features missing in PostgreSQL. But a significant part of it is due to careful development
67-1	21556-21561	There	
67-2	21562-21564	is	
67-3	21565-21566	a	
67-4	21567-21574	mention	
67-5	21575-21577	of	
67-6	21578-21586	Postgres	
67-7	21587-21589	in	
67-8	21590-21593	the	
67-9	21594-21600	thread	
67-10	21600-21601	:	
67-11	21602-21605	I'm	
67-12	21606-21610	sure	
67-13	21611-21615	some	
67-14	21616-21618	of	
67-15	21619-21622	the	
67-16	21623-21633	difference	
67-17	21634-21635	(	
67-18	21635-21638	25M	
67-19	21639-21640	[	
67-20	21640-21646	Oracle	
67-21	21646-21647	]	
67-22	21648-21650	vs	
67-23	21650-21651	.	
67-24	21652-21656	1.3M	
67-25	21657-21658	[	
67-26	21658-21666	Postgres	
67-27	21666-21667	}	
67-28	21667-21668	)	
67-29	21669-21672	can	
67-30	21673-21675	be	
67-31	21676-21686	attributed	
67-32	21687-21689	to	
67-33	21690-21694	code	
67-34	21695-21698	for	
67-35	21699-21705	Oracle	
67-36	21706-21714	features	
67-37	21715-21722	missing	
67-38	21723-21725	in	
67-39	21726-21736	PostgreSQL	
67-40	21736-21737	.	
67-41	21738-21741	But	
67-42	21742-21743	a	
67-43	21744-21755	significant	
67-44	21756-21760	part	
67-45	21761-21763	of	
67-46	21764-21766	it	
67-47	21767-21769	is	
67-48	21770-21773	due	
67-49	21774-21776	to	
67-50	21777-21784	careful	
67-51	21785-21796	development	

#Text=process mercilessly eliminating duplicate and unnecessary code as part of the regular PostgreSQL development cycle. It's a bit heartbreaking at first (you spend hours/days/weeks working on something), and then a fellow [Postgres] hacker comes and cuts off the unnecessary pieces, but in the long run I'm grateful we do that. Second, there is the reliance on test-driven development.
68-1	21797-21804	process	
68-2	21805-21816	mercilessly	
68-3	21817-21828	eliminating	
68-4	21829-21838	duplicate	
68-5	21839-21842	and	
68-6	21843-21854	unnecessary	
68-7	21855-21859	code	
68-8	21860-21862	as	
68-9	21863-21867	part	
68-10	21868-21870	of	
68-11	21871-21874	the	
68-12	21875-21882	regular	
68-13	21883-21893	PostgreSQL	
68-14	21894-21905	development	
68-15	21906-21911	cycle	
68-16	21911-21912	.	
68-17	21913-21917	It's	
68-18	21918-21919	a	
68-19	21920-21923	bit	
68-20	21924-21937	heartbreaking	
68-21	21938-21940	at	
68-22	21941-21946	first	
68-23	21947-21948	(	
68-24	21948-21951	you	
68-25	21952-21957	spend	
68-26	21958-21963	hours	
68-27	21963-21964	/	
68-28	21964-21968	days	
68-29	21968-21969	/	
68-30	21969-21974	weeks	
68-31	21975-21982	working	
68-32	21983-21985	on	
68-33	21986-21995	something	
68-34	21995-21996	)	
68-35	21996-21997	,	
68-36	21998-22001	and	
68-37	22002-22006	then	
68-38	22007-22008	a	
68-39	22009-22015	fellow	
68-40	22016-22017	[	
68-41	22017-22025	Postgres	
68-42	22025-22026	]	
68-43	22027-22033	hacker	
68-44	22034-22039	comes	
68-45	22040-22043	and	
68-46	22044-22048	cuts	
68-47	22049-22052	off	
68-48	22053-22056	the	
68-49	22057-22068	unnecessary	
68-50	22069-22075	pieces	
68-51	22075-22076	,	
68-52	22077-22080	but	
68-53	22081-22083	in	
68-54	22084-22087	the	
68-55	22088-22092	long	
68-56	22093-22096	run	
68-57	22097-22100	I'm	
68-58	22101-22109	grateful	
68-59	22110-22112	we	
68-60	22113-22115	do	
68-61	22116-22120	that	
68-62	22120-22121	.	
68-63	22122-22128	Second	
68-64	22128-22129	,	
68-65	22130-22135	there	
68-66	22136-22138	is	
68-67	22139-22142	the	
68-68	22143-22151	reliance	
68-69	22152-22154	on	
68-70	22155-22166	test-driven	
68-71	22167-22178	development	
68-72	22178-22179	.	

#Text=Test-driven development certainly has value, but for Oracle database developers, it appears to have become a huge drag on development. The tests took 24+ hours to run, and because the code was so complex, it was hard to know if the changes made would even pass the tests. This video evaluates the pathologies of test-drive development. I think this
69-1	22180-22191	Test-driven	
69-2	22192-22203	development	
69-3	22204-22213	certainly	
69-4	22214-22217	has	
69-5	22218-22223	value	
69-6	22223-22224	,	
69-7	22225-22228	but	
69-8	22229-22232	for	
69-9	22233-22239	Oracle	
69-10	22240-22248	database	
69-11	22249-22259	developers	
69-12	22259-22260	,	
69-13	22261-22263	it	
69-14	22264-22271	appears	
69-15	22272-22274	to	
69-16	22275-22279	have	
69-17	22280-22286	become	
69-18	22287-22288	a	
69-19	22289-22293	huge	
69-20	22294-22298	drag	
69-21	22299-22301	on	
69-22	22302-22313	development	
69-23	22313-22314	.	
69-24	22315-22318	The	
69-25	22319-22324	tests	
69-26	22325-22329	took	
69-27	22330-22332	24	
69-28	22332-22333	+	
69-29	22334-22339	hours	
69-30	22340-22342	to	
69-31	22343-22346	run	
69-32	22346-22347	,	
69-33	22348-22351	and	
69-34	22352-22359	because	
69-35	22360-22363	the	
69-36	22364-22368	code	
69-37	22369-22372	was	
69-38	22373-22375	so	
69-39	22376-22383	complex	
69-40	22383-22384	,	
69-41	22385-22387	it	
69-42	22388-22391	was	
69-43	22392-22396	hard	
69-44	22397-22399	to	
69-45	22400-22404	know	
69-46	22405-22407	if	
69-47	22408-22411	the	
69-48	22412-22419	changes	
69-49	22420-22424	made	
69-50	22425-22430	would	
69-51	22431-22435	even	
69-52	22436-22440	pass	
69-53	22441-22444	the	
69-54	22445-22450	tests	
69-55	22450-22451	.	
69-56	22452-22456	This	
69-57	22457-22462	video	
69-58	22463-22472	evaluates	
69-59	22473-22476	the	
69-60	22477-22488	pathologies	
69-61	22489-22491	of	
69-62	22492-22502	test-drive	
69-63	22503-22514	development	
69-64	22514-22515	.	
69-65	22516-22517	I	
69-66	22518-22523	think	
69-67	22524-22528	this	

#Text=comment captures it: Tdd [test-drive development] is like relying on debugger to solve your problem. Is debugger a good tool? yes,it is a great tool. But using it as an excuse to avoid understanding what happens under the hood is plain wrong.
70-1	22529-22536	comment	
70-2	22537-22545	captures	
70-3	22546-22548	it	
70-4	22548-22549	:	
70-5	22550-22553	Tdd	
70-6	22554-22555	[	
70-7	22555-22565	test-drive	
70-8	22566-22577	development	
70-9	22577-22578	]	
70-10	22579-22581	is	
70-11	22582-22586	like	
70-12	22587-22594	relying	
70-13	22595-22597	on	
70-14	22598-22606	debugger	
70-15	22607-22609	to	
70-16	22610-22615	solve	
70-17	22616-22620	your	
70-18	22621-22628	problem	
70-19	22628-22629	.	
70-20	22630-22632	Is	
70-21	22633-22641	debugger	
70-22	22642-22643	a	
70-23	22644-22648	good	
70-24	22649-22653	tool	
70-25	22653-22654	?	
70-26	22655-22658	yes	
70-27	22658-22659	,	
70-28	22659-22661	it	
70-29	22662-22664	is	
70-30	22665-22666	a	
70-31	22667-22672	great	
70-32	22673-22677	tool	
70-33	22677-22678	.	
70-34	22679-22682	But	
70-35	22683-22688	using	
70-36	22689-22691	it	
70-37	22692-22694	as	
70-38	22695-22697	an	
70-39	22698-22704	excuse	
70-40	22705-22707	to	
70-41	22708-22713	avoid	
70-42	22714-22727	understanding	
70-43	22728-22732	what	
70-44	22733-22740	happens	
70-45	22741-22746	under	
70-46	22747-22750	the	
70-47	22751-22755	hood	
70-48	22756-22758	is	
70-49	22759-22764	plain	
70-50	22765-22770	wrong	
70-51	22770-22771	.	

#Text=Postgres has succeeded and gained a reputation for reliability without relying on tests (though we have them) but rather by reviewing patches and looking for interactions with other parts of the system. We are also willing to restructure code where needed, and break backward compatibility where warranted. However, our big advantage is a development team that is unmatched in the relational database industry, and an open source development model that efficiently
71-1	22772-22780	Postgres	
71-2	22781-22784	has	
71-3	22785-22794	succeeded	
71-4	22795-22798	and	
71-5	22799-22805	gained	
71-6	22806-22807	a	
71-7	22808-22818	reputation	
71-8	22819-22822	for	
71-9	22823-22834	reliability	
71-10	22835-22842	without	
71-11	22843-22850	relying	
71-12	22851-22853	on	
71-13	22854-22859	tests	
71-14	22860-22861	(	
71-15	22861-22867	though	
71-16	22868-22870	we	
71-17	22871-22875	have	
71-18	22876-22880	them	
71-19	22880-22881	)	
71-20	22882-22885	but	
71-21	22886-22892	rather	
71-22	22893-22895	by	
71-23	22896-22905	reviewing	
71-24	22906-22913	patches	
71-25	22914-22917	and	
71-26	22918-22925	looking	
71-27	22926-22929	for	
71-28	22930-22942	interactions	
71-29	22943-22947	with	
71-30	22948-22953	other	
71-31	22954-22959	parts	
71-32	22960-22962	of	
71-33	22963-22966	the	
71-34	22967-22973	system	
71-35	22973-22974	.	
71-36	22975-22977	We	
71-37	22978-22981	are	
71-38	22982-22986	also	
71-39	22987-22994	willing	
71-40	22995-22997	to	
71-41	22998-23009	restructure	
71-42	23010-23014	code	
71-43	23015-23020	where	
71-44	23021-23027	needed	
71-45	23027-23028	,	
71-46	23029-23032	and	
71-47	23033-23038	break	
71-48	23039-23047	backward	
71-49	23048-23061	compatibility	
71-50	23062-23067	where	
71-51	23068-23077	warranted	
71-52	23077-23078	.	
71-53	23079-23086	However	
71-54	23086-23087	,	
71-55	23088-23091	our	
71-56	23092-23095	big	
71-57	23096-23105	advantage	
71-58	23106-23108	is	
71-59	23109-23110	a	
71-60	23111-23122	development	
71-61	23123-23127	team	
71-62	23128-23132	that	
71-63	23133-23135	is	
71-64	23136-23145	unmatched	
71-65	23146-23148	in	
71-66	23149-23152	the	
71-67	23153-23163	relational	
71-68	23164-23172	database	
71-69	23173-23181	industry	
71-70	23181-23182	,	
71-71	23183-23186	and	
71-72	23187-23189	an	
71-73	23190-23194	open	
71-74	23195-23201	source	
71-75	23202-23213	development	
71-76	23214-23219	model	
71-77	23220-23224	that	
71-78	23225-23236	efficiently	

#Text=harnesses their skills. View or Post Comments Development Methods Wednesday, August 26, 2020 I think there are three types of software development: closed development & closed source distribution closed development & open source distribution open development & open source distribution #1 is proprietary development, like Oracle and DB2.
72-1	23237-23246	harnesses	
72-2	23247-23252	their	
72-3	23253-23259	skills	
72-4	23259-23260	.	
72-5	23261-23265	View	
72-6	23266-23268	or	
72-7	23269-23273	Post	
72-8	23274-23282	Comments	
72-9	23283-23294	Development	
72-10	23295-23302	Methods	
72-11	23303-23312	Wednesday	
72-12	23312-23313	,	
72-13	23314-23320	August	
72-14	23321-23323	26	
72-15	23323-23324	,	
72-16	23325-23329	2020	
72-17	23330-23331	I	
72-18	23332-23337	think	
72-19	23338-23343	there	
72-20	23344-23347	are	
72-21	23348-23353	three	
72-22	23354-23359	types	
72-23	23360-23362	of	
72-24	23363-23371	software	
72-25	23372-23383	development	
72-26	23383-23384	:	
72-27	23385-23391	closed	
72-28	23392-23403	development	
72-29	23404-23405	&	
72-30	23406-23412	closed	
72-31	23413-23419	source	
72-32	23420-23432	distribution	
72-33	23433-23439	closed	
72-34	23440-23451	development	
72-35	23452-23453	&	
72-36	23454-23458	open	
72-37	23459-23465	source	
72-38	23466-23478	distribution	
72-39	23479-23483	open	
72-40	23484-23495	development	
72-41	23496-23497	&	
72-42	23498-23502	open	
72-43	23503-23509	source	
72-44	23510-23522	distribution	
72-45	23523-23525	#1	
72-46	23526-23528	is	
72-47	23529-23540	proprietary	
72-48	23541-23552	development	
72-49	23552-23553	,	
72-50	23554-23558	like	
72-51	23559-23565	Oracle	
72-52	23566-23569	and	
72-53	23570-23573	DB2	
72-54	23573-23574	.	

#Text=#2 is development like MySQL and Mongo, where a single company controls all the development work, but the source is released, often with restrictions on how it is used. Since a company controls the development, they can focus on specific big customers and adjust usage restrictions in ways that encourage payment for certain features, for non-gpl use, or for cloud use. #3 is Postgres, Linux, etc.
73-1	23575-23577	#2	
73-2	23578-23580	is	
73-3	23581-23592	development	
73-4	23593-23597	like	
73-5	23598-23603	MySQL	
73-6	23604-23607	and	
73-7	23608-23613	Mongo	
73-8	23613-23614	,	
73-9	23615-23620	where	
73-10	23621-23622	a	
73-11	23623-23629	single	
73-12	23630-23637	company	
73-13	23638-23646	controls	
73-14	23647-23650	all	
73-15	23651-23654	the	
73-16	23655-23666	development	
73-17	23667-23671	work	
73-18	23671-23672	,	
73-19	23673-23676	but	
73-20	23677-23680	the	
73-21	23681-23687	source	
73-22	23688-23690	is	
73-23	23691-23699	released	
73-24	23699-23700	,	
73-25	23701-23706	often	
73-26	23707-23711	with	
73-27	23712-23724	restrictions	
73-28	23725-23727	on	
73-29	23728-23731	how	
73-30	23732-23734	it	
73-31	23735-23737	is	
73-32	23738-23742	used	
73-33	23742-23743	.	
73-34	23744-23749	Since	
73-35	23750-23751	a	
73-36	23752-23759	company	
73-37	23760-23768	controls	
73-38	23769-23772	the	
73-39	23773-23784	development	
73-40	23784-23785	,	
73-41	23786-23790	they	
73-42	23791-23794	can	
73-43	23795-23800	focus	
73-44	23801-23803	on	
73-45	23804-23812	specific	
73-46	23813-23816	big	
73-47	23817-23826	customers	
73-48	23827-23830	and	
73-49	23831-23837	adjust	
73-50	23838-23843	usage	
73-51	23844-23856	restrictions	
73-52	23857-23859	in	
73-53	23860-23864	ways	
73-54	23865-23869	that	
73-55	23870-23879	encourage	
73-56	23880-23887	payment	
73-57	23888-23891	for	
73-58	23892-23899	certain	
73-59	23900-23908	features	
73-60	23908-23909	,	
73-61	23910-23913	for	
73-62	23914-23921	non-gpl	
73-63	23922-23925	use	
73-64	23925-23926	,	
73-65	23927-23929	or	
73-66	23930-23933	for	
73-67	23934-23939	cloud	
73-68	23940-23943	use	
73-69	23943-23944	.	
73-70	23945-23947	#3	
73-71	23948-23950	is	
73-72	23951-23959	Postgres	
73-73	23959-23960	,	
73-74	23961-23966	Linux	
73-75	23966-23967	,	
73-76	23968-23971	etc	
73-77	23971-23972	.	

#Text=The Postgres core team's independence from company control is just one aspect of the open development of Postgres. Understanding the development and distribution categories of software can reliably predict how that software will evolve over time. View or Post Comments Why Database Software Is Unique Monday, August 24, 2020 Having worked with databases for over three decades, I have found there are three aspects of database software that make it unique:
74-1	23973-23976	The	
74-2	23977-23985	Postgres	
74-3	23986-23990	core	
74-4	23991-23997	team's	
74-5	23998-24010	independence	
74-6	24011-24015	from	
74-7	24016-24023	company	
74-8	24024-24031	control	
74-9	24032-24034	is	
74-10	24035-24039	just	
74-11	24040-24043	one	
74-12	24044-24050	aspect	
74-13	24051-24053	of	
74-14	24054-24057	the	
74-15	24058-24062	open	
74-16	24063-24074	development	
74-17	24075-24077	of	
74-18	24078-24086	Postgres	
74-19	24086-24087	.	
74-20	24088-24101	Understanding	
74-21	24102-24105	the	
74-22	24106-24117	development	
74-23	24118-24121	and	
74-24	24122-24134	distribution	
74-25	24135-24145	categories	
74-26	24146-24148	of	
74-27	24149-24157	software	
74-28	24158-24161	can	
74-29	24162-24170	reliably	
74-30	24171-24178	predict	
74-31	24179-24182	how	
74-32	24183-24187	that	
74-33	24188-24196	software	
74-34	24197-24201	will	
74-35	24202-24208	evolve	
74-36	24209-24213	over	
74-37	24214-24218	time	
74-38	24218-24219	.	
74-39	24220-24224	View	
74-40	24225-24227	or	
74-41	24228-24232	Post	
74-42	24233-24241	Comments	
74-43	24242-24245	Why	
74-44	24246-24254	Database	
74-45	24255-24263	Software	
74-46	24264-24266	Is	
74-47	24267-24273	Unique	
74-48	24274-24280	Monday	
74-49	24280-24281	,	
74-50	24282-24288	August	
74-51	24289-24291	24	
74-52	24291-24292	,	
74-53	24293-24297	2020	
74-54	24298-24304	Having	
74-55	24305-24311	worked	
74-56	24312-24316	with	
74-57	24317-24326	databases	
74-58	24327-24330	for	
74-59	24331-24335	over	
74-60	24336-24341	three	
74-61	24342-24349	decades	
74-62	24349-24350	,	
74-63	24351-24352	I	
74-64	24353-24357	have	
74-65	24358-24363	found	
74-66	24364-24369	there	
74-67	24370-24373	are	
74-68	24374-24379	three	
74-69	24380-24387	aspects	
74-70	24388-24390	of	
74-71	24391-24399	database	
74-72	24400-24408	software	
74-73	24409-24413	that	
74-74	24414-24418	make	
74-75	24419-24421	it	
74-76	24422-24428	unique	
74-77	24428-24429	:	

#Text=Variable workloads Performance requirements Durability Most other software do not have these requirements. Because of them, databases typically need more tuning, monitoring, and maintenance than other software, like Java applications or even operating systems. These requirements also help make companies supporting database software profitable, including open source-based ones.
75-1	24430-24438	Variable	
75-2	24439-24448	workloads	
75-3	24449-24460	Performance	
75-4	24461-24473	requirements	
75-5	24474-24484	Durability	
75-6	24485-24489	Most	
75-7	24490-24495	other	
75-8	24496-24504	software	
75-9	24505-24507	do	
75-10	24508-24511	not	
75-11	24512-24516	have	
75-12	24517-24522	these	
75-13	24523-24535	requirements	
75-14	24535-24536	.	
75-15	24537-24544	Because	
75-16	24545-24547	of	
75-17	24548-24552	them	
75-18	24552-24553	,	
75-19	24554-24563	databases	
75-20	24564-24573	typically	
75-21	24574-24578	need	
75-22	24579-24583	more	
75-23	24584-24590	tuning	
75-24	24590-24591	,	
75-25	24592-24602	monitoring	
75-26	24602-24603	,	
75-27	24604-24607	and	
75-28	24608-24619	maintenance	
75-29	24620-24624	than	
75-30	24625-24630	other	
75-31	24631-24639	software	
75-32	24639-24640	,	
75-33	24641-24645	like	
75-34	24646-24650	Java	
75-35	24651-24663	applications	
75-36	24664-24666	or	
75-37	24667-24671	even	
75-38	24672-24681	operating	
75-39	24682-24689	systems	
75-40	24689-24690	.	
75-41	24691-24696	These	
75-42	24697-24709	requirements	
75-43	24710-24714	also	
75-44	24715-24719	help	
75-45	24720-24724	make	
75-46	24725-24734	companies	
75-47	24735-24745	supporting	
75-48	24746-24754	database	
75-49	24755-24763	software	
75-50	24764-24774	profitable	
75-51	24774-24775	,	
75-52	24776-24785	including	
75-53	24786-24790	open	
75-54	24791-24803	source-based	
75-55	24804-24808	ones	
75-56	24808-24809	.	

#Text=View or Post Comments Standard Deviation Friday, August 21, 2020 Postgres has a lot of aggregate functions to make your life, and data analysis, easier. Postgres 12 has 42 aggregate functions. You can see a full list by typing \\daS in psql.
76-1	24810-24814	View	
76-2	24815-24817	or	
76-3	24818-24822	Post	
76-4	24823-24831	Comments	
76-5	24832-24840	Standard	
76-6	24841-24850	Deviation	
76-7	24851-24857	Friday	
76-8	24857-24858	,	
76-9	24859-24865	August	
76-10	24866-24868	21	
76-11	24868-24869	,	
76-12	24870-24874	2020	
76-13	24875-24883	Postgres	
76-14	24884-24887	has	
76-15	24888-24889	a	
76-16	24890-24893	lot	
76-17	24894-24896	of	
76-18	24897-24906	aggregate	
76-19	24907-24916	functions	
76-20	24917-24919	to	
76-21	24920-24924	make	
76-22	24925-24929	your	
76-23	24930-24934	life	
76-24	24934-24935	,	
76-25	24936-24939	and	
76-26	24940-24944	data	
76-27	24945-24953	analysis	
76-28	24953-24954	,	
76-29	24955-24961	easier	
76-30	24961-24962	.	
76-31	24963-24971	Postgres	
76-32	24972-24974	12	
76-33	24975-24978	has	
76-34	24979-24981	42	
76-35	24982-24991	aggregate	
76-36	24992-25001	functions	
76-37	25001-25002	.	
76-38	25003-25006	You	
76-39	25007-25010	can	
76-40	25011-25014	see	
76-41	25015-25016	a	
76-42	25017-25021	full	
76-43	25022-25026	list	
76-44	25027-25029	by	
76-45	25030-25036	typing	
76-46	25037-25038	\	
76-47	25038-25041	daS	
76-48	25042-25044	in	
76-49	25045-25049	psql	
76-50	25049-25050	.	

#Text=While you are probably familiar with common aggregates like count and avg, Postgres supports many more. There are aggregates for arrays, json, and statistical functions. When dealing with numeric data, people are usually concerned about the number or total of the entries, but when trying to determine how much values vary, standard deviation is helpful:
77-1	25051-25056	While	
77-2	25057-25060	you	
77-3	25061-25064	are	
77-4	25065-25073	probably	
77-5	25074-25082	familiar	
77-6	25083-25087	with	
77-7	25088-25094	common	
77-8	25095-25105	aggregates	
77-9	25106-25110	like	
77-10	25111-25116	count	
77-11	25117-25120	and	
77-12	25121-25124	avg	
77-13	25124-25125	,	
77-14	25126-25134	Postgres	
77-15	25135-25143	supports	
77-16	25144-25148	many	
77-17	25149-25153	more	
77-18	25153-25154	.	
77-19	25155-25160	There	
77-20	25161-25164	are	
77-21	25165-25175	aggregates	
77-22	25176-25179	for	
77-23	25180-25186	arrays	
77-24	25186-25187	,	
77-25	25188-25192	json	
77-26	25192-25193	,	
77-27	25194-25197	and	
77-28	25198-25209	statistical	
77-29	25210-25219	functions	
77-30	25219-25220	.	
77-31	25221-25225	When	
77-32	25226-25233	dealing	
77-33	25234-25238	with	
77-34	25239-25246	numeric	
77-35	25247-25251	data	
77-36	25251-25252	,	
77-37	25253-25259	people	
77-38	25260-25263	are	
77-39	25264-25271	usually	
77-40	25272-25281	concerned	
77-41	25282-25287	about	
77-42	25288-25291	the	
77-43	25292-25298	number	
77-44	25299-25301	or	
77-45	25302-25307	total	
77-46	25308-25310	of	
77-47	25311-25314	the	
77-48	25315-25322	entries	
77-49	25322-25323	,	
77-50	25324-25327	but	
77-51	25328-25332	when	
77-52	25333-25339	trying	
77-53	25340-25342	to	
77-54	25343-25352	determine	
77-55	25353-25356	how	
77-56	25357-25361	much	
77-57	25362-25368	values	
77-58	25369-25373	vary	
77-59	25373-25374	,	
77-60	25375-25383	standard	
77-61	25384-25393	deviation	
77-62	25394-25396	is	
77-63	25397-25404	helpful	
77-64	25404-25405	:	

#Text=SELECT stddev(x) FROM (VALUES (25), (50), (75)) AS t(x); stddev --------------------- 25.0000000000000000 SELECT stddev(x) FROM (VALUES (49), (50), (51)) AS t(x);
78-1	25406-25412	SELECT	
78-2	25413-25419	stddev	
78-3	25419-25420	(	
78-4	25420-25421	x	
78-5	25421-25422	)	
78-6	25423-25427	FROM	
78-7	25428-25429	(	
78-8	25429-25435	VALUES	
78-9	25436-25437	(	
78-10	25437-25439	25	
78-11	25439-25440	)	
78-12	25440-25441	,	
78-13	25442-25443	(	
78-14	25443-25445	50	
78-15	25445-25446	)	
78-16	25446-25447	,	
78-17	25448-25449	(	
78-18	25449-25451	75	
78-19	25451-25452	)	
78-20	25452-25453	)	
78-21	25454-25456	AS	
78-22	25457-25458	t	
78-23	25458-25459	(	
78-24	25459-25460	x	
78-25	25460-25461	)	
78-26	25461-25462	;	
78-27	25463-25469	stddev	
78-28	25470-25471	-	
78-29	25471-25472	-	
78-30	25472-25473	-	
78-31	25473-25474	-	
78-32	25474-25475	-	
78-33	25475-25476	-	
78-34	25476-25477	-	
78-35	25477-25478	-	
78-36	25478-25479	-	
78-37	25479-25480	-	
78-38	25480-25481	-	
78-39	25481-25482	-	
78-40	25482-25483	-	
78-41	25483-25484	-	
78-42	25484-25485	-	
78-43	25485-25486	-	
78-44	25486-25487	-	
78-45	25487-25488	-	
78-46	25488-25489	-	
78-47	25489-25490	-	
78-48	25490-25491	-	
78-49	25492-25511	25.0000000000000000	
78-50	25512-25518	SELECT	
78-51	25519-25525	stddev	
78-52	25525-25526	(	
78-53	25526-25527	x	
78-54	25527-25528	)	
78-55	25529-25533	FROM	
78-56	25534-25535	(	
78-57	25535-25541	VALUES	
78-58	25542-25543	(	
78-59	25543-25545	49	
78-60	25545-25546	)	
78-61	25546-25547	,	
78-62	25548-25549	(	
78-63	25549-25551	50	
78-64	25551-25552	)	
78-65	25552-25553	,	
78-66	25554-25555	(	
78-67	25555-25557	51	
78-68	25557-25558	)	
78-69	25558-25559	)	
78-70	25560-25562	AS	
78-71	25563-25564	t	
78-72	25564-25565	(	
78-73	25565-25566	x	
78-74	25566-25567	)	
78-75	25567-25568	;	

#Text=stddev ------------------------ 1.00000000000000000000 Both sets of three values total 150, but the first set varies by 25, while the second set varies by only one.
79-1	25569-25575	stddev	
79-2	25576-25577	-	
79-3	25577-25578	-	
79-4	25578-25579	-	
79-5	25579-25580	-	
79-6	25580-25581	-	
79-7	25581-25582	-	
79-8	25582-25583	-	
79-9	25583-25584	-	
79-10	25584-25585	-	
79-11	25585-25586	-	
79-12	25586-25587	-	
79-13	25587-25588	-	
79-14	25588-25589	-	
79-15	25589-25590	-	
79-16	25590-25591	-	
79-17	25591-25592	-	
79-18	25592-25593	-	
79-19	25593-25594	-	
79-20	25594-25595	-	
79-21	25595-25596	-	
79-22	25596-25597	-	
79-23	25597-25598	-	
79-24	25598-25599	-	
79-25	25599-25600	-	
79-26	25601-25623	1.00000000000000000000	
79-27	25624-25628	Both	
79-28	25629-25633	sets	
79-29	25634-25636	of	
79-30	25637-25642	three	
79-31	25643-25649	values	
79-32	25650-25655	total	
79-33	25656-25659	150	
79-34	25659-25660	,	
79-35	25661-25664	but	
79-36	25665-25668	the	
79-37	25669-25674	first	
79-38	25675-25678	set	
79-39	25679-25685	varies	
79-40	25686-25688	by	
79-41	25689-25691	25	
79-42	25691-25692	,	
79-43	25693-25698	while	
79-44	25699-25702	the	
79-45	25703-25709	second	
79-46	25710-25713	set	
79-47	25714-25720	varies	
79-48	25721-25723	by	
79-49	25724-25728	only	
79-50	25729-25732	one	
79-51	25732-25733	.	

#Text=If you are analyzing your bank balance, you might not care how much the numbers vary, but if you are looking at web site response times, the variability of the numbers can be significant. View or Post Comments Keyset Pagination in Action Monday, August 17, 2020 Having explained keyset pagination, let's look at how it behaves while inserts and deletes are happening in the table.
80-1	25734-25736	If	
80-2	25737-25740	you	
80-3	25741-25744	are	
80-4	25745-25754	analyzing	
80-5	25755-25759	your	
80-6	25760-25764	bank	
80-7	25765-25772	balance	
80-8	25772-25773	,	
80-9	25774-25777	you	
80-10	25778-25783	might	
80-11	25784-25787	not	
80-12	25788-25792	care	
80-13	25793-25796	how	
80-14	25797-25801	much	
80-15	25802-25805	the	
80-16	25806-25813	numbers	
80-17	25814-25818	vary	
80-18	25818-25819	,	
80-19	25820-25823	but	
80-20	25824-25826	if	
80-21	25827-25830	you	
80-22	25831-25834	are	
80-23	25835-25842	looking	
80-24	25843-25845	at	
80-25	25846-25849	web	
80-26	25850-25854	site	
80-27	25855-25863	response	
80-28	25864-25869	times	
80-29	25869-25870	,	
80-30	25871-25874	the	
80-31	25875-25886	variability	
80-32	25887-25889	of	
80-33	25890-25893	the	
80-34	25894-25901	numbers	
80-35	25902-25905	can	
80-36	25906-25908	be	
80-37	25909-25920	significant	
80-38	25920-25921	.	
80-39	25922-25926	View	
80-40	25927-25929	or	
80-41	25930-25934	Post	
80-42	25935-25943	Comments	
80-43	25944-25950	Keyset	
80-44	25951-25961	Pagination	
80-45	25962-25964	in	
80-46	25965-25971	Action	
80-47	25972-25978	Monday	
80-48	25978-25979	,	
80-49	25980-25986	August	
80-50	25987-25989	17	
80-51	25989-25990	,	
80-52	25991-25995	2020	
80-53	25996-26002	Having	
80-54	26003-26012	explained	
80-55	26013-26019	keyset	
80-56	26020-26030	pagination	
80-57	26030-26031	,	
80-58	26032-26037	let's	
80-59	26038-26042	look	
80-60	26043-26045	at	
80-61	26046-26049	how	
80-62	26050-26052	it	
80-63	26053-26060	behaves	
80-64	26061-26066	while	
80-65	26067-26074	inserts	
80-66	26075-26078	and	
80-67	26079-26086	deletes	
80-68	26087-26090	are	
80-69	26091-26100	happening	
80-70	26101-26103	in	
80-71	26104-26107	the	
80-72	26108-26113	table	
80-73	26113-26114	.	

#Text=Using the queries from the previous blog entry, let's see how deletions from previous pages affect displaying of page four from page three: SELECT product_id, description FROM product WHERE product_id > 30 ORDER BY product_id LIMIT 11; product_id | description
81-1	26115-26120	Using	
81-2	26121-26124	the	
81-3	26125-26132	queries	
81-4	26133-26137	from	
81-5	26138-26141	the	
81-6	26142-26150	previous	
81-7	26151-26155	blog	
81-8	26156-26161	entry	
81-9	26161-26162	,	
81-10	26163-26168	let's	
81-11	26169-26172	see	
81-12	26173-26176	how	
81-13	26177-26186	deletions	
81-14	26187-26191	from	
81-15	26192-26200	previous	
81-16	26201-26206	pages	
81-17	26207-26213	affect	
81-18	26214-26224	displaying	
81-19	26225-26227	of	
81-20	26228-26232	page	
81-21	26233-26237	four	
81-22	26238-26242	from	
81-23	26243-26247	page	
81-24	26248-26253	three	
81-25	26253-26254	:	
81-26	26255-26261	SELECT	
81-27	26262-26272	product_id	
81-28	26272-26273	,	
81-29	26274-26285	description	
81-30	26286-26290	FROM	
81-31	26291-26298	product	
81-32	26299-26304	WHERE	
81-33	26305-26315	product_id	
81-34	26316-26317	>	
81-35	26318-26320	30	
81-36	26321-26326	ORDER	
81-37	26327-26329	BY	
81-38	26330-26340	product_id	
81-39	26341-26346	LIMIT	
81-40	26347-26349	11	
81-41	26349-26350	;	
81-42	26351-26361	product_id	
81-43	26362-26363	|	
81-44	26364-26375	description	

#Text=------------+------------- 31 | Product 31 32 | Product 32 33 | Product 33 34 | Product 34 35 | Product 35 36 | Product 36 37 | Product 37 38 | Product 38 39 | Product 39 40 | Product 40 41 | Product 41
82-1	26376-26377	-	
82-2	26377-26378	-	
82-3	26378-26379	-	
82-4	26379-26380	-	
82-5	26380-26381	-	
82-6	26381-26382	-	
82-7	26382-26383	-	
82-8	26383-26384	-	
82-9	26384-26385	-	
82-10	26385-26386	-	
82-11	26386-26387	-	
82-12	26387-26388	-	
82-13	26388-26389	+	
82-14	26389-26390	-	
82-15	26390-26391	-	
82-16	26391-26392	-	
82-17	26392-26393	-	
82-18	26393-26394	-	
82-19	26394-26395	-	
82-20	26395-26396	-	
82-21	26396-26397	-	
82-22	26397-26398	-	
82-23	26398-26399	-	
82-24	26399-26400	-	
82-25	26400-26401	-	
82-26	26401-26402	-	
82-27	26403-26405	31	
82-28	26406-26407	|	
82-29	26408-26415	Product	
82-30	26416-26418	31	
82-31	26419-26421	32	
82-32	26422-26423	|	
82-33	26424-26431	Product	
82-34	26432-26434	32	
82-35	26435-26437	33	
82-36	26438-26439	|	
82-37	26440-26447	Product	
82-38	26448-26450	33	
82-39	26451-26453	34	
82-40	26454-26455	|	
82-41	26456-26463	Product	
82-42	26464-26466	34	
82-43	26467-26469	35	
82-44	26470-26471	|	
82-45	26472-26479	Product	
82-46	26480-26482	35	
82-47	26483-26485	36	
82-48	26486-26487	|	
82-49	26488-26495	Product	
82-50	26496-26498	36	
82-51	26499-26501	37	
82-52	26502-26503	|	
82-53	26504-26511	Product	
82-54	26512-26514	37	
82-55	26515-26517	38	
82-56	26518-26519	|	
82-57	26520-26527	Product	
82-58	26528-26530	38	
82-59	26531-26533	39	
82-60	26534-26535	|	
82-61	26536-26543	Product	
82-62	26544-26546	39	
82-63	26547-26549	40	
82-64	26550-26551	|	
82-65	26552-26559	Product	
82-66	26560-26562	40	
82-67	26563-26565	41	
82-68	26566-26567	|	
82-69	26568-26575	Product	
82-70	26576-26578	41	

#Text=DELETE FROM product WHERE product_id <= 5; SELECT product_id, description FROM product WHERE product_id > 30 ORDER BY product_id LIMIT 11; product_id | description
83-1	26579-26585	DELETE	
83-2	26586-26590	FROM	
83-3	26591-26598	product	
83-4	26599-26604	WHERE	
83-5	26605-26615	product_id	
83-6	26616-26617	<	
83-7	26617-26618	=	
83-8	26619-26620	5	
83-9	26620-26621	;	
83-10	26622-26628	SELECT	
83-11	26629-26639	product_id	
83-12	26639-26640	,	
83-13	26641-26652	description	
83-14	26653-26657	FROM	
83-15	26658-26665	product	
83-16	26666-26671	WHERE	
83-17	26672-26682	product_id	
83-18	26683-26684	>	
83-19	26685-26687	30	
83-20	26688-26693	ORDER	
83-21	26694-26696	BY	
83-22	26697-26707	product_id	
83-23	26708-26713	LIMIT	
83-24	26714-26716	11	
83-25	26716-26717	;	
83-26	26718-26728	product_id	
83-27	26729-26730	|	
83-28	26731-26742	description	

#Text=------------+------------- 31 | Product 31 32 | Product 32 33 | Product 33 34 | Product 34 35 | Product 35 36 | Product 36 37 | Product 37 38 | Product 38 39 | Product 39 40 | Product 40 41 | Product 41
84-1	26743-26744	-	
84-2	26744-26745	-	
84-3	26745-26746	-	
84-4	26746-26747	-	
84-5	26747-26748	-	
84-6	26748-26749	-	
84-7	26749-26750	-	
84-8	26750-26751	-	
84-9	26751-26752	-	
84-10	26752-26753	-	
84-11	26753-26754	-	
84-12	26754-26755	-	
84-13	26755-26756	+	
84-14	26756-26757	-	
84-15	26757-26758	-	
84-16	26758-26759	-	
84-17	26759-26760	-	
84-18	26760-26761	-	
84-19	26761-26762	-	
84-20	26762-26763	-	
84-21	26763-26764	-	
84-22	26764-26765	-	
84-23	26765-26766	-	
84-24	26766-26767	-	
84-25	26767-26768	-	
84-26	26768-26769	-	
84-27	26770-26772	31	
84-28	26773-26774	|	
84-29	26775-26782	Product	
84-30	26783-26785	31	
84-31	26786-26788	32	
84-32	26789-26790	|	
84-33	26791-26798	Product	
84-34	26799-26801	32	
84-35	26802-26804	33	
84-36	26805-26806	|	
84-37	26807-26814	Product	
84-38	26815-26817	33	
84-39	26818-26820	34	
84-40	26821-26822	|	
84-41	26823-26830	Product	
84-42	26831-26833	34	
84-43	26834-26836	35	
84-44	26837-26838	|	
84-45	26839-26846	Product	
84-46	26847-26849	35	
84-47	26850-26852	36	
84-48	26853-26854	|	
84-49	26855-26862	Product	
84-50	26863-26865	36	
84-51	26866-26868	37	
84-52	26869-26870	|	
84-53	26871-26878	Product	
84-54	26879-26881	37	
84-55	26882-26884	38	
84-56	26885-26886	|	
84-57	26887-26894	Product	
84-58	26895-26897	38	
84-59	26898-26900	39	
84-60	26901-26902	|	
84-61	26903-26910	Product	
84-62	26911-26913	39	
84-63	26914-26916	40	
84-64	26917-26918	|	
84-65	26919-26926	Product	
84-66	26927-26929	40	
84-67	26930-26932	41	
84-68	26933-26934	|	
84-69	26935-26942	Product	
84-70	26943-26945	41	

#Text=As you can see, the delete had no affect because we were anchored on the last value on the page, rather than, if we had used offset, the first value of the result set. Inserts before page four are also ignored: INSERT INTO product SELECT id, 'Product ' || id::TEXT FROM generate_series(1, 3) AS t(id); SELECT product_id, description
85-1	26946-26948	As	
85-2	26949-26952	you	
85-3	26953-26956	can	
85-4	26957-26960	see	
85-5	26960-26961	,	
85-6	26962-26965	the	
85-7	26966-26972	delete	
85-8	26973-26976	had	
85-9	26977-26979	no	
85-10	26980-26986	affect	
85-11	26987-26994	because	
85-12	26995-26997	we	
85-13	26998-27002	were	
85-14	27003-27011	anchored	
85-15	27012-27014	on	
85-16	27015-27018	the	
85-17	27019-27023	last	
85-18	27024-27029	value	
85-19	27030-27032	on	
85-20	27033-27036	the	
85-21	27037-27041	page	
85-22	27041-27042	,	
85-23	27043-27049	rather	
85-24	27050-27054	than	
85-25	27054-27055	,	
85-26	27056-27058	if	
85-27	27059-27061	we	
85-28	27062-27065	had	
85-29	27066-27070	used	
85-30	27071-27077	offset	
85-31	27077-27078	,	
85-32	27079-27082	the	
85-33	27083-27088	first	
85-34	27089-27094	value	
85-35	27095-27097	of	
85-36	27098-27101	the	
85-37	27102-27108	result	
85-38	27109-27112	set	
85-39	27112-27113	.	
85-40	27114-27121	Inserts	
85-41	27122-27128	before	
85-42	27129-27133	page	
85-43	27134-27138	four	
85-44	27139-27142	are	
85-45	27143-27147	also	
85-46	27148-27155	ignored	
85-47	27155-27156	:	
85-48	27157-27163	INSERT	
85-49	27164-27168	INTO	
85-50	27169-27176	product	
85-51	27177-27183	SELECT	
85-52	27184-27186	id	
85-53	27186-27187	,	
85-54	27188-27189	'	
85-55	27189-27196	Product	
85-56	27197-27198	'	
85-57	27199-27200	|	
85-58	27200-27201	|	
85-59	27202-27204	id	
85-60	27204-27205	:	
85-61	27205-27206	:	
85-62	27206-27210	TEXT	
85-63	27211-27215	FROM	
85-64	27216-27231	generate_series	
85-65	27231-27232	(	
85-66	27232-27233	1	
85-67	27233-27234	,	
85-68	27235-27236	3	
85-69	27236-27237	)	
85-70	27238-27240	AS	
85-71	27241-27242	t	
85-72	27242-27243	(	
85-73	27243-27245	id	
85-74	27245-27246	)	
85-75	27246-27247	;	
85-76	27248-27254	SELECT	
85-77	27255-27265	product_id	
85-78	27265-27266	,	
85-79	27267-27278	description	

#Text=FROM product WHERE product_id > 30 ORDER BY product_id LIMIT 11; product_id | description ------------+-------------
86-1	27279-27283	FROM	
86-2	27284-27291	product	
86-3	27292-27297	WHERE	
86-4	27298-27308	product_id	
86-5	27309-27310	>	
86-6	27311-27313	30	
86-7	27314-27319	ORDER	
86-8	27320-27322	BY	
86-9	27323-27333	product_id	
86-10	27334-27339	LIMIT	
86-11	27340-27342	11	
86-12	27342-27343	;	
86-13	27344-27354	product_id	
86-14	27355-27356	|	
86-15	27357-27368	description	
86-16	27369-27370	-	
86-17	27370-27371	-	
86-18	27371-27372	-	
86-19	27372-27373	-	
86-20	27373-27374	-	
86-21	27374-27375	-	
86-22	27375-27376	-	
86-23	27376-27377	-	
86-24	27377-27378	-	
86-25	27378-27379	-	
86-26	27379-27380	-	
86-27	27380-27381	-	
86-28	27381-27382	+	
86-29	27382-27383	-	
86-30	27383-27384	-	
86-31	27384-27385	-	
86-32	27385-27386	-	
86-33	27386-27387	-	
86-34	27387-27388	-	
86-35	27388-27389	-	
86-36	27389-27390	-	
86-37	27390-27391	-	
86-38	27391-27392	-	
86-39	27392-27393	-	
86-40	27393-27394	-	
86-41	27394-27395	-	

#Text=31 | Product 31 32 | Product 32 33 | Product 33 34 | Product 34 35 | Product 35 36 | Product 36 37 | Product 37 38 | Product 38 39 | Product 39 40 | Product 40 41 | Product 41
87-1	27396-27398	31	
87-2	27399-27400	|	
87-3	27401-27408	Product	
87-4	27409-27411	31	
87-5	27412-27414	32	
87-6	27415-27416	|	
87-7	27417-27424	Product	
87-8	27425-27427	32	
87-9	27428-27430	33	
87-10	27431-27432	|	
87-11	27433-27440	Product	
87-12	27441-27443	33	
87-13	27444-27446	34	
87-14	27447-27448	|	
87-15	27449-27456	Product	
87-16	27457-27459	34	
87-17	27460-27462	35	
87-18	27463-27464	|	
87-19	27465-27472	Product	
87-20	27473-27475	35	
87-21	27476-27478	36	
87-22	27479-27480	|	
87-23	27481-27488	Product	
87-24	27489-27491	36	
87-25	27492-27494	37	
87-26	27495-27496	|	
87-27	27497-27504	Product	
87-28	27505-27507	37	
87-29	27508-27510	38	
87-30	27511-27512	|	
87-31	27513-27520	Product	
87-32	27521-27523	38	
87-33	27524-27526	39	
87-34	27527-27528	|	
87-35	27529-27536	Product	
87-36	27537-27539	39	
87-37	27540-27542	40	
87-38	27543-27544	|	
87-39	27545-27552	Product	
87-40	27553-27555	40	
87-41	27556-27558	41	
87-42	27559-27560	|	
87-43	27561-27568	Product	
87-44	27569-27571	41	

#Text=Of course, inserts and deletes after the current page would display normally. We can also easily go backward from page four: WITH page AS SELECT product_id, description FROM product WHERE product_id < 31 ORDER BY product_id DESC LIMIT 11
88-1	27572-27574	Of	
88-2	27575-27581	course	
88-3	27581-27582	,	
88-4	27583-27590	inserts	
88-5	27591-27594	and	
88-6	27595-27602	deletes	
88-7	27603-27608	after	
88-8	27609-27612	the	
88-9	27613-27620	current	
88-10	27621-27625	page	
88-11	27626-27631	would	
88-12	27632-27639	display	
88-13	27640-27648	normally	
88-14	27648-27649	.	
88-15	27650-27652	We	
88-16	27653-27656	can	
88-17	27657-27661	also	
88-18	27662-27668	easily	
88-19	27669-27671	go	
88-20	27672-27680	backward	
88-21	27681-27685	from	
88-22	27686-27690	page	
88-23	27691-27695	four	
88-24	27695-27696	:	
88-25	27697-27701	WITH	
88-26	27702-27706	page	
88-27	27707-27709	AS	
88-28	27710-27716	SELECT	
88-29	27717-27727	product_id	
88-30	27727-27728	,	
88-31	27729-27740	description	
88-32	27741-27745	FROM	
88-33	27746-27753	product	
88-34	27754-27759	WHERE	
88-35	27760-27770	product_id	
88-36	27771-27772	<	
88-37	27773-27775	31	
88-38	27776-27781	ORDER	
88-39	27782-27784	BY	
88-40	27785-27795	product_id	
88-41	27796-27800	DESC	
88-42	27801-27806	LIMIT	
88-43	27807-27809	11	

#Text=SELECT product_id, description FROM page ORDER BY product_id; product_id | description ------------+------------- 20 | Product 20 21 | Product 21
89-1	27810-27816	SELECT	
89-2	27817-27827	product_id	
89-3	27827-27828	,	
89-4	27829-27840	description	
89-5	27841-27845	FROM	
89-6	27846-27850	page	
89-7	27851-27856	ORDER	
89-8	27857-27859	BY	
89-9	27860-27870	product_id	
89-10	27870-27871	;	
89-11	27872-27882	product_id	
89-12	27883-27884	|	
89-13	27885-27896	description	
89-14	27897-27898	-	
89-15	27898-27899	-	
89-16	27899-27900	-	
89-17	27900-27901	-	
89-18	27901-27902	-	
89-19	27902-27903	-	
89-20	27903-27904	-	
89-21	27904-27905	-	
89-22	27905-27906	-	
89-23	27906-27907	-	
89-24	27907-27908	-	
89-25	27908-27909	-	
89-26	27909-27910	+	
89-27	27910-27911	-	
89-28	27911-27912	-	
89-29	27912-27913	-	
89-30	27913-27914	-	
89-31	27914-27915	-	
89-32	27915-27916	-	
89-33	27916-27917	-	
89-34	27917-27918	-	
89-35	27918-27919	-	
89-36	27919-27920	-	
89-37	27920-27921	-	
89-38	27921-27922	-	
89-39	27922-27923	-	
89-40	27924-27926	20	
89-41	27927-27928	|	
89-42	27929-27936	Product	
89-43	27937-27939	20	
89-44	27940-27942	21	
89-45	27943-27944	|	
89-46	27945-27952	Product	
89-47	27953-27955	21	

#Text=22 | Product 22 23 | Product 23 24 | Product 24 25 | Product 25 26 | Product 26 27 | Product 27 28 | Product 28 29 | Product 29 30 | Product 30 Going from page three to page two:
90-1	27956-27958	22	
90-2	27959-27960	|	
90-3	27961-27968	Product	
90-4	27969-27971	22	
90-5	27972-27974	23	
90-6	27975-27976	|	
90-7	27977-27984	Product	
90-8	27985-27987	23	
90-9	27988-27990	24	
90-10	27991-27992	|	
90-11	27993-28000	Product	
90-12	28001-28003	24	
90-13	28004-28006	25	
90-14	28007-28008	|	
90-15	28009-28016	Product	
90-16	28017-28019	25	
90-17	28020-28022	26	
90-18	28023-28024	|	
90-19	28025-28032	Product	
90-20	28033-28035	26	
90-21	28036-28038	27	
90-22	28039-28040	|	
90-23	28041-28048	Product	
90-24	28049-28051	27	
90-25	28052-28054	28	
90-26	28055-28056	|	
90-27	28057-28064	Product	
90-28	28065-28067	28	
90-29	28068-28070	29	
90-30	28071-28072	|	
90-31	28073-28080	Product	
90-32	28081-28083	29	
90-33	28084-28086	30	
90-34	28087-28088	|	
90-35	28089-28096	Product	
90-36	28097-28099	30	
90-37	28100-28105	Going	
90-38	28106-28110	from	
90-39	28111-28115	page	
90-40	28116-28121	three	
90-41	28122-28124	to	
90-42	28125-28129	page	
90-43	28130-28133	two	
90-44	28133-28134	:	

#Text=(Remember, when paging backward, the first row (e.g., 20) is used as a marker to indicate if another previous page exists.) WITH page AS SELECT product_id, description FROM product WHERE product_id < 21 LIMIT 11 SELECT product_id, description FROM page ORDER BY product_id;
91-1	28135-28136	(	
91-2	28136-28144	Remember	
91-3	28144-28145	,	
91-4	28146-28150	when	
91-5	28151-28157	paging	
91-6	28158-28166	backward	
91-7	28166-28167	,	
91-8	28168-28171	the	
91-9	28172-28177	first	
91-10	28178-28181	row	
91-11	28182-28183	(	
91-12	28183-28186	e.g	
91-13	28186-28187	.	
91-14	28187-28188	,	
91-15	28189-28191	20	
91-16	28191-28192	)	
91-17	28193-28195	is	
91-18	28196-28200	used	
91-19	28201-28203	as	
91-20	28204-28205	a	
91-21	28206-28212	marker	
91-22	28213-28215	to	
91-23	28216-28224	indicate	
91-24	28225-28227	if	
91-25	28228-28235	another	
91-26	28236-28244	previous	
91-27	28245-28249	page	
91-28	28250-28256	exists	
91-29	28256-28257	.	
91-30	28257-28258	)	
91-31	28259-28263	WITH	
91-32	28264-28268	page	
91-33	28269-28271	AS	
91-34	28272-28278	SELECT	
91-35	28279-28289	product_id	
91-36	28289-28290	,	
91-37	28291-28302	description	
91-38	28303-28307	FROM	
91-39	28308-28315	product	
91-40	28316-28321	WHERE	
91-41	28322-28332	product_id	
91-42	28333-28334	<	
91-43	28335-28337	21	
91-44	28338-28343	LIMIT	
91-45	28344-28346	11	
91-46	28347-28353	SELECT	
91-47	28354-28364	product_id	
91-48	28364-28365	,	
91-49	28366-28377	description	
91-50	28378-28382	FROM	
91-51	28383-28387	page	
91-52	28388-28393	ORDER	
91-53	28394-28396	BY	
91-54	28397-28407	product_id	
91-55	28407-28408	;	

#Text=product_id | description ------------+------------- 10 | Product 10 11 | Product 11 12 | Product 12 13 | Product 13 14 | Product 14 15 | Product 15
92-1	28409-28419	product_id	
92-2	28420-28421	|	
92-3	28422-28433	description	
92-4	28434-28435	-	
92-5	28435-28436	-	
92-6	28436-28437	-	
92-7	28437-28438	-	
92-8	28438-28439	-	
92-9	28439-28440	-	
92-10	28440-28441	-	
92-11	28441-28442	-	
92-12	28442-28443	-	
92-13	28443-28444	-	
92-14	28444-28445	-	
92-15	28445-28446	-	
92-16	28446-28447	+	
92-17	28447-28448	-	
92-18	28448-28449	-	
92-19	28449-28450	-	
92-20	28450-28451	-	
92-21	28451-28452	-	
92-22	28452-28453	-	
92-23	28453-28454	-	
92-24	28454-28455	-	
92-25	28455-28456	-	
92-26	28456-28457	-	
92-27	28457-28458	-	
92-28	28458-28459	-	
92-29	28459-28460	-	
92-30	28461-28463	10	
92-31	28464-28465	|	
92-32	28466-28473	Product	
92-33	28474-28476	10	
92-34	28477-28479	11	
92-35	28480-28481	|	
92-36	28482-28489	Product	
92-37	28490-28492	11	
92-38	28493-28495	12	
92-39	28496-28497	|	
92-40	28498-28505	Product	
92-41	28506-28508	12	
92-42	28509-28511	13	
92-43	28512-28513	|	
92-44	28514-28521	Product	
92-45	28522-28524	13	
92-46	28525-28527	14	
92-47	28528-28529	|	
92-48	28530-28537	Product	
92-49	28538-28540	14	
92-50	28541-28543	15	
92-51	28544-28545	|	
92-52	28546-28553	Product	
92-53	28554-28556	15	

#Text=16 | Product 16 17 | Product 17 18 | Product 18 19 | Product 19 20 | Product 20 Trying to view page one causes the problem outlined in the previous blog post because only eight rows are returned: WITH page AS SELECT product_id, description
93-1	28557-28559	16	
93-2	28560-28561	|	
93-3	28562-28569	Product	
93-4	28570-28572	16	
93-5	28573-28575	17	
93-6	28576-28577	|	
93-7	28578-28585	Product	
93-8	28586-28588	17	
93-9	28589-28591	18	
93-10	28592-28593	|	
93-11	28594-28601	Product	
93-12	28602-28604	18	
93-13	28605-28607	19	
93-14	28608-28609	|	
93-15	28610-28617	Product	
93-16	28618-28620	19	
93-17	28621-28623	20	
93-18	28624-28625	|	
93-19	28626-28633	Product	
93-20	28634-28636	20	
93-21	28637-28643	Trying	
93-22	28644-28646	to	
93-23	28647-28651	view	
93-24	28652-28656	page	
93-25	28657-28660	one	
93-26	28661-28667	causes	
93-27	28668-28671	the	
93-28	28672-28679	problem	
93-29	28680-28688	outlined	
93-30	28689-28691	in	
93-31	28692-28695	the	
93-32	28696-28704	previous	
93-33	28705-28709	blog	
93-34	28710-28714	post	
93-35	28715-28722	because	
93-36	28723-28727	only	
93-37	28728-28733	eight	
93-38	28734-28738	rows	
93-39	28739-28742	are	
93-40	28743-28751	returned	
93-41	28751-28752	:	
93-42	28753-28757	WITH	
93-43	28758-28762	page	
93-44	28763-28765	AS	
93-45	28766-28772	SELECT	
93-46	28773-28783	product_id	
93-47	28783-28784	,	
93-48	28785-28796	description	

#Text=FROM product WHERE product_id < 11 ORDER BY product_id DESC LIMIT 11 SELECT product_id, description FROM page ORDER BY product_id; product_id | description
94-1	28797-28801	FROM	
94-2	28802-28809	product	
94-3	28810-28815	WHERE	
94-4	28816-28826	product_id	
94-5	28827-28828	<	
94-6	28829-28831	11	
94-7	28832-28837	ORDER	
94-8	28838-28840	BY	
94-9	28841-28851	product_id	
94-10	28852-28856	DESC	
94-11	28857-28862	LIMIT	
94-12	28863-28865	11	
94-13	28866-28872	SELECT	
94-14	28873-28883	product_id	
94-15	28883-28884	,	
94-16	28885-28896	description	
94-17	28897-28901	FROM	
94-18	28902-28906	page	
94-19	28907-28912	ORDER	
94-20	28913-28915	BY	
94-21	28916-28926	product_id	
94-22	28926-28927	;	
94-23	28928-28938	product_id	
94-24	28939-28940	|	
94-25	28941-28952	description	

#Text=------------+------------- 1 | Product 1 2 | Product 2 3 | Product 3 6 | Product 6 7 | Product 7 8 | Product 8 9 | Product 9 10 | Product 10 This is where it is suggested that the first page be regenerated in its entirety, and the user informed:
95-1	28953-28954	-	
95-2	28954-28955	-	
95-3	28955-28956	-	
95-4	28956-28957	-	
95-5	28957-28958	-	
95-6	28958-28959	-	
95-7	28959-28960	-	
95-8	28960-28961	-	
95-9	28961-28962	-	
95-10	28962-28963	-	
95-11	28963-28964	-	
95-12	28964-28965	-	
95-13	28965-28966	+	
95-14	28966-28967	-	
95-15	28967-28968	-	
95-16	28968-28969	-	
95-17	28969-28970	-	
95-18	28970-28971	-	
95-19	28971-28972	-	
95-20	28972-28973	-	
95-21	28973-28974	-	
95-22	28974-28975	-	
95-23	28975-28976	-	
95-24	28976-28977	-	
95-25	28977-28978	-	
95-26	28978-28979	-	
95-27	28980-28981	1	
95-28	28982-28983	|	
95-29	28984-28991	Product	
95-30	28992-28993	1	
95-31	28994-28995	2	
95-32	28996-28997	|	
95-33	28998-29005	Product	
95-34	29006-29007	2	
95-35	29008-29009	3	
95-36	29010-29011	|	
95-37	29012-29019	Product	
95-38	29020-29021	3	
95-39	29022-29023	6	
95-40	29024-29025	|	
95-41	29026-29033	Product	
95-42	29034-29035	6	
95-43	29036-29037	7	
95-44	29038-29039	|	
95-45	29040-29047	Product	
95-46	29048-29049	7	
95-47	29050-29051	8	
95-48	29052-29053	|	
95-49	29054-29061	Product	
95-50	29062-29063	8	
95-51	29064-29065	9	
95-52	29066-29067	|	
95-53	29068-29075	Product	
95-54	29076-29077	9	
95-55	29078-29080	10	
95-56	29081-29082	|	
95-57	29083-29090	Product	
95-58	29091-29093	10	
95-59	29094-29098	This	
95-60	29099-29101	is	
95-61	29102-29107	where	
95-62	29108-29110	it	
95-63	29111-29113	is	
95-64	29114-29123	suggested	
95-65	29124-29128	that	
95-66	29129-29132	the	
95-67	29133-29138	first	
95-68	29139-29143	page	
95-69	29144-29146	be	
95-70	29147-29158	regenerated	
95-71	29159-29161	in	
95-72	29162-29165	its	
95-73	29166-29174	entirety	
95-74	29174-29175	,	
95-75	29176-29179	and	
95-76	29180-29183	the	
95-77	29184-29188	user	
95-78	29189-29197	informed	
95-79	29197-29198	:	

#Text=SELECT product_id, description FROM product ORDER BY product_id LIMIT 11; product_id | description ------------+------------- 1 | Product 1
96-1	29199-29205	SELECT	
96-2	29206-29216	product_id	
96-3	29216-29217	,	
96-4	29218-29229	description	
96-5	29230-29234	FROM	
96-6	29235-29242	product	
96-7	29243-29248	ORDER	
96-8	29249-29251	BY	
96-9	29252-29262	product_id	
96-10	29263-29268	LIMIT	
96-11	29269-29271	11	
96-12	29271-29272	;	
96-13	29273-29283	product_id	
96-14	29284-29285	|	
96-15	29286-29297	description	
96-16	29298-29299	-	
96-17	29299-29300	-	
96-18	29300-29301	-	
96-19	29301-29302	-	
96-20	29302-29303	-	
96-21	29303-29304	-	
96-22	29304-29305	-	
96-23	29305-29306	-	
96-24	29306-29307	-	
96-25	29307-29308	-	
96-26	29308-29309	-	
96-27	29309-29310	-	
96-28	29310-29311	+	
96-29	29311-29312	-	
96-30	29312-29313	-	
96-31	29313-29314	-	
96-32	29314-29315	-	
96-33	29315-29316	-	
96-34	29316-29317	-	
96-35	29317-29318	-	
96-36	29318-29319	-	
96-37	29319-29320	-	
96-38	29320-29321	-	
96-39	29321-29322	-	
96-40	29322-29323	-	
96-41	29323-29324	-	
96-42	29325-29326	1	
96-43	29327-29328	|	
96-44	29329-29336	Product	
96-45	29337-29338	1	

#Text=2 | Product 2 3 | Product 3 6 | Product 6 7 | Product 7 8 | Product 8 9 | Product 9 10 | Product 10 11 | Product 11 12 | Product 12 13 | Product 13 Page two would be generated using the new rows from page one:
97-1	29339-29340	2	
97-2	29341-29342	|	
97-3	29343-29350	Product	
97-4	29351-29352	2	
97-5	29353-29354	3	
97-6	29355-29356	|	
97-7	29357-29364	Product	
97-8	29365-29366	3	
97-9	29367-29368	6	
97-10	29369-29370	|	
97-11	29371-29378	Product	
97-12	29379-29380	6	
97-13	29381-29382	7	
97-14	29383-29384	|	
97-15	29385-29392	Product	
97-16	29393-29394	7	
97-17	29395-29396	8	
97-18	29397-29398	|	
97-19	29399-29406	Product	
97-20	29407-29408	8	
97-21	29409-29410	9	
97-22	29411-29412	|	
97-23	29413-29420	Product	
97-24	29421-29422	9	
97-25	29423-29425	10	
97-26	29426-29427	|	
97-27	29428-29435	Product	
97-28	29436-29438	10	
97-29	29439-29441	11	
97-30	29442-29443	|	
97-31	29444-29451	Product	
97-32	29452-29454	11	
97-33	29455-29457	12	
97-34	29458-29459	|	
97-35	29460-29467	Product	
97-36	29468-29470	12	
97-37	29471-29473	13	
97-38	29474-29475	|	
97-39	29476-29483	Product	
97-40	29484-29486	13	
97-41	29487-29491	Page	
97-42	29492-29495	two	
97-43	29496-29501	would	
97-44	29502-29504	be	
97-45	29505-29514	generated	
97-46	29515-29520	using	
97-47	29521-29524	the	
97-48	29525-29528	new	
97-49	29529-29533	rows	
97-50	29534-29538	from	
97-51	29539-29543	page	
97-52	29544-29547	one	
97-53	29547-29548	:	

#Text=SELECT product_id, description FROM product WHERE product_id > 12 ORDER BY product_id LIMIT 11; product_id | description ------------+-------------
98-1	29549-29555	SELECT	
98-2	29556-29566	product_id	
98-3	29566-29567	,	
98-4	29568-29579	description	
98-5	29580-29584	FROM	
98-6	29585-29592	product	
98-7	29593-29598	WHERE	
98-8	29599-29609	product_id	
98-9	29610-29611	>	
98-10	29612-29614	12	
98-11	29615-29620	ORDER	
98-12	29621-29623	BY	
98-13	29624-29634	product_id	
98-14	29635-29640	LIMIT	
98-15	29641-29643	11	
98-16	29643-29644	;	
98-17	29645-29655	product_id	
98-18	29656-29657	|	
98-19	29658-29669	description	
98-20	29670-29671	-	
98-21	29671-29672	-	
98-22	29672-29673	-	
98-23	29673-29674	-	
98-24	29674-29675	-	
98-25	29675-29676	-	
98-26	29676-29677	-	
98-27	29677-29678	-	
98-28	29678-29679	-	
98-29	29679-29680	-	
98-30	29680-29681	-	
98-31	29681-29682	-	
98-32	29682-29683	+	
98-33	29683-29684	-	
98-34	29684-29685	-	
98-35	29685-29686	-	
98-36	29686-29687	-	
98-37	29687-29688	-	
98-38	29688-29689	-	
98-39	29689-29690	-	
98-40	29690-29691	-	
98-41	29691-29692	-	
98-42	29692-29693	-	
98-43	29693-29694	-	
98-44	29694-29695	-	
98-45	29695-29696	-	

#Text=13 | Product 13 14 | Product 14 15 | Product 15 16 | Product 16 17 | Product 17 18 | Product 18 19 | Product 19 20 | Product 20 21 | Product 21 22 | Product 22 23 | Product 23
99-1	29697-29699	13	
99-2	29700-29701	|	
99-3	29702-29709	Product	
99-4	29710-29712	13	
99-5	29713-29715	14	
99-6	29716-29717	|	
99-7	29718-29725	Product	
99-8	29726-29728	14	
99-9	29729-29731	15	
99-10	29732-29733	|	
99-11	29734-29741	Product	
99-12	29742-29744	15	
99-13	29745-29747	16	
99-14	29748-29749	|	
99-15	29750-29757	Product	
99-16	29758-29760	16	
99-17	29761-29763	17	
99-18	29764-29765	|	
99-19	29766-29773	Product	
99-20	29774-29776	17	
99-21	29777-29779	18	
99-22	29780-29781	|	
99-23	29782-29789	Product	
99-24	29790-29792	18	
99-25	29793-29795	19	
99-26	29796-29797	|	
99-27	29798-29805	Product	
99-28	29806-29808	19	
99-29	29809-29811	20	
99-30	29812-29813	|	
99-31	29814-29821	Product	
99-32	29822-29824	20	
99-33	29825-29827	21	
99-34	29828-29829	|	
99-35	29830-29837	Product	
99-36	29838-29840	21	
99-37	29841-29843	22	
99-38	29844-29845	|	
99-39	29846-29853	Product	
99-40	29854-29856	22	
99-41	29857-29859	23	
99-42	29860-29861	|	
99-43	29862-29869	Product	
99-44	29870-29872	23	

#Text=Non-sort key updates are uninteresting. Primary key updates can easily cause rows from earlier pages to appear on later pages, or rows from later pages to appear on earlier previous pages, if the primary key is updated across the current page view result set. Let's show the page previous to page two before and after two updates:
100-1	29873-29881	Non-sort	
100-2	29882-29885	key	
100-3	29886-29893	updates	
100-4	29894-29897	are	
100-5	29898-29911	uninteresting	
100-6	29911-29912	.	
100-7	29913-29920	Primary	
100-8	29921-29924	key	
100-9	29925-29932	updates	
100-10	29933-29936	can	
100-11	29937-29943	easily	
100-12	29944-29949	cause	
100-13	29950-29954	rows	
100-14	29955-29959	from	
100-15	29960-29967	earlier	
100-16	29968-29973	pages	
100-17	29974-29976	to	
100-18	29977-29983	appear	
100-19	29984-29986	on	
100-20	29987-29992	later	
100-21	29993-29998	pages	
100-22	29998-29999	,	
100-23	30000-30002	or	
100-24	30003-30007	rows	
100-25	30008-30012	from	
100-26	30013-30018	later	
100-27	30019-30024	pages	
100-28	30025-30027	to	
100-29	30028-30034	appear	
100-30	30035-30037	on	
100-31	30038-30045	earlier	
100-32	30046-30054	previous	
100-33	30055-30060	pages	
100-34	30060-30061	,	
100-35	30062-30064	if	
100-36	30065-30068	the	
100-37	30069-30076	primary	
100-38	30077-30080	key	
100-39	30081-30083	is	
100-40	30084-30091	updated	
100-41	30092-30098	across	
100-42	30099-30102	the	
100-43	30103-30110	current	
100-44	30111-30115	page	
100-45	30116-30120	view	
100-46	30121-30127	result	
100-47	30128-30131	set	
100-48	30131-30132	.	
100-49	30133-30138	Let's	
100-50	30139-30143	show	
100-51	30144-30147	the	
100-52	30148-30152	page	
100-53	30153-30161	previous	
100-54	30162-30164	to	
100-55	30165-30169	page	
100-56	30170-30173	two	
100-57	30174-30180	before	
100-58	30181-30184	and	
100-59	30185-30190	after	
100-60	30191-30194	two	
100-61	30195-30202	updates	
100-62	30202-30203	:	

#Text=WITH page AS SELECT product_id, description FROM product WHERE product_id < 13 ORDER BY product_id DESC LIMIT 11 SELECT product_id, description FROM page
101-1	30204-30208	WITH	
101-2	30209-30213	page	
101-3	30214-30216	AS	
101-4	30217-30223	SELECT	
101-5	30224-30234	product_id	
101-6	30234-30235	,	
101-7	30236-30247	description	
101-8	30248-30252	FROM	
101-9	30253-30260	product	
101-10	30261-30266	WHERE	
101-11	30267-30277	product_id	
101-12	30278-30279	<	
101-13	30280-30282	13	
101-14	30283-30288	ORDER	
101-15	30289-30291	BY	
101-16	30292-30302	product_id	
101-17	30303-30307	DESC	
101-18	30308-30313	LIMIT	
101-19	30314-30316	11	
101-20	30317-30323	SELECT	
101-21	30324-30334	product_id	
101-22	30334-30335	,	
101-23	30336-30347	description	
101-24	30348-30352	FROM	
101-25	30353-30357	page	

#Text=ORDER BY product_id; product_id | description ------------+------------- 1 | Product 1 2 | Product 2 3 | Product 3 6 | Product 6 7 | Product 7
102-1	30358-30363	ORDER	
102-2	30364-30366	BY	
102-3	30367-30377	product_id	
102-4	30377-30378	;	
102-5	30379-30389	product_id	
102-6	30390-30391	|	
102-7	30392-30403	description	
102-8	30404-30405	-	
102-9	30405-30406	-	
102-10	30406-30407	-	
102-11	30407-30408	-	
102-12	30408-30409	-	
102-13	30409-30410	-	
102-14	30410-30411	-	
102-15	30411-30412	-	
102-16	30412-30413	-	
102-17	30413-30414	-	
102-18	30414-30415	-	
102-19	30415-30416	-	
102-20	30416-30417	+	
102-21	30417-30418	-	
102-22	30418-30419	-	
102-23	30419-30420	-	
102-24	30420-30421	-	
102-25	30421-30422	-	
102-26	30422-30423	-	
102-27	30423-30424	-	
102-28	30424-30425	-	
102-29	30425-30426	-	
102-30	30426-30427	-	
102-31	30427-30428	-	
102-32	30428-30429	-	
102-33	30429-30430	-	
102-34	30431-30432	1	
102-35	30433-30434	|	
102-36	30435-30442	Product	
102-37	30443-30444	1	
102-38	30445-30446	2	
102-39	30447-30448	|	
102-40	30449-30456	Product	
102-41	30457-30458	2	
102-42	30459-30460	3	
102-43	30461-30462	|	
102-44	30463-30470	Product	
102-45	30471-30472	3	
102-46	30473-30474	6	
102-47	30475-30476	|	
102-48	30477-30484	Product	
102-49	30485-30486	6	
102-50	30487-30488	7	
102-51	30489-30490	|	
102-52	30491-30498	Product	
102-53	30499-30500	7	

#Text=8 | Product 8 9 | Product 9 10 | Product 10 11 | Product 11 12 | Product 12 UPDATE product SET product_id = 4 WHERE product_id = 14; UPDATE product SET product_id = 5 WHERE product_id = 15;
103-1	30501-30502	8	
103-2	30503-30504	|	
103-3	30505-30512	Product	
103-4	30513-30514	8	
103-5	30515-30516	9	
103-6	30517-30518	|	
103-7	30519-30526	Product	
103-8	30527-30528	9	
103-9	30529-30531	10	
103-10	30532-30533	|	
103-11	30534-30541	Product	
103-12	30542-30544	10	
103-13	30545-30547	11	
103-14	30548-30549	|	
103-15	30550-30557	Product	
103-16	30558-30560	11	
103-17	30561-30563	12	
103-18	30564-30565	|	
103-19	30566-30573	Product	
103-20	30574-30576	12	
103-21	30577-30583	UPDATE	
103-22	30584-30591	product	
103-23	30592-30595	SET	
103-24	30596-30606	product_id	
103-25	30607-30608	=	
103-26	30609-30610	4	
103-27	30611-30616	WHERE	
103-28	30617-30627	product_id	
103-29	30628-30629	=	
103-30	30630-30632	14	
103-31	30632-30633	;	
103-32	30634-30640	UPDATE	
103-33	30641-30648	product	
103-34	30649-30652	SET	
103-35	30653-30663	product_id	
103-36	30664-30665	=	
103-37	30666-30667	5	
103-38	30668-30673	WHERE	
103-39	30674-30684	product_id	
103-40	30685-30686	=	
103-41	30687-30689	15	
103-42	30689-30690	;	

#Text=WITH page AS SELECT product_id, description FROM product WHERE product_id < 13 ORDER BY product_id DESC LIMIT 11 SELECT product_id, description FROM page
104-1	30691-30695	WITH	
104-2	30696-30700	page	
104-3	30701-30703	AS	
104-4	30704-30710	SELECT	
104-5	30711-30721	product_id	
104-6	30721-30722	,	
104-7	30723-30734	description	
104-8	30735-30739	FROM	
104-9	30740-30747	product	
104-10	30748-30753	WHERE	
104-11	30754-30764	product_id	
104-12	30765-30766	<	
104-13	30767-30769	13	
104-14	30770-30775	ORDER	
104-15	30776-30778	BY	
104-16	30779-30789	product_id	
104-17	30790-30794	DESC	
104-18	30795-30800	LIMIT	
104-19	30801-30803	11	
104-20	30804-30810	SELECT	
104-21	30811-30821	product_id	
104-22	30821-30822	,	
104-23	30823-30834	description	
104-24	30835-30839	FROM	
104-25	30840-30844	page	

#Text=ORDER BY product_id; product_id | description ------------+------------- 2 | Product 2 3 | Product 3 4 | Product 14 5 | Product 15 6 | Product 6
105-1	30845-30850	ORDER	
105-2	30851-30853	BY	
105-3	30854-30864	product_id	
105-4	30864-30865	;	
105-5	30866-30876	product_id	
105-6	30877-30878	|	
105-7	30879-30890	description	
105-8	30891-30892	-	
105-9	30892-30893	-	
105-10	30893-30894	-	
105-11	30894-30895	-	
105-12	30895-30896	-	
105-13	30896-30897	-	
105-14	30897-30898	-	
105-15	30898-30899	-	
105-16	30899-30900	-	
105-17	30900-30901	-	
105-18	30901-30902	-	
105-19	30902-30903	-	
105-20	30903-30904	+	
105-21	30904-30905	-	
105-22	30905-30906	-	
105-23	30906-30907	-	
105-24	30907-30908	-	
105-25	30908-30909	-	
105-26	30909-30910	-	
105-27	30910-30911	-	
105-28	30911-30912	-	
105-29	30912-30913	-	
105-30	30913-30914	-	
105-31	30914-30915	-	
105-32	30915-30916	-	
105-33	30916-30917	-	
105-34	30918-30919	2	
105-35	30920-30921	|	
105-36	30922-30929	Product	
105-37	30930-30931	2	
105-38	30932-30933	3	
105-39	30934-30935	|	
105-40	30936-30943	Product	
105-41	30944-30945	3	
105-42	30946-30947	4	
105-43	30948-30949	|	
105-44	30950-30957	Product	
105-45	30958-30960	14	
105-46	30961-30962	5	
105-47	30963-30964	|	
105-48	30965-30972	Product	
105-49	30973-30975	15	
105-50	30976-30977	6	
105-51	30978-30979	|	
105-52	30980-30987	Product	
105-53	30988-30989	6	

#Text=7 | Product 7 8 | Product 8 9 | Product 9 10 | Product 10 11 | Product 11 12 | Product 12 This causes the problem, also outlined in the previous blog post, where a query of the first page returns 11 rows, meaning the first page results should be recreated and the user informed:
106-1	30990-30991	7	
106-2	30992-30993	|	
106-3	30994-31001	Product	
106-4	31002-31003	7	
106-5	31004-31005	8	
106-6	31006-31007	|	
106-7	31008-31015	Product	
106-8	31016-31017	8	
106-9	31018-31019	9	
106-10	31020-31021	|	
106-11	31022-31029	Product	
106-12	31030-31031	9	
106-13	31032-31034	10	
106-14	31035-31036	|	
106-15	31037-31044	Product	
106-16	31045-31047	10	
106-17	31048-31050	11	
106-18	31051-31052	|	
106-19	31053-31060	Product	
106-20	31061-31063	11	
106-21	31064-31066	12	
106-22	31067-31068	|	
106-23	31069-31076	Product	
106-24	31077-31079	12	
106-25	31080-31084	This	
106-26	31085-31091	causes	
106-27	31092-31095	the	
106-28	31096-31103	problem	
106-29	31103-31104	,	
106-30	31105-31109	also	
106-31	31110-31118	outlined	
106-32	31119-31121	in	
106-33	31122-31125	the	
106-34	31126-31134	previous	
106-35	31135-31139	blog	
106-36	31140-31144	post	
106-37	31144-31145	,	
106-38	31146-31151	where	
106-39	31152-31153	a	
106-40	31154-31159	query	
106-41	31160-31162	of	
106-42	31163-31166	the	
106-43	31167-31172	first	
106-44	31173-31177	page	
106-45	31178-31185	returns	
106-46	31186-31188	11	
106-47	31189-31193	rows	
106-48	31193-31194	,	
106-49	31195-31202	meaning	
106-50	31203-31206	the	
106-51	31207-31212	first	
106-52	31213-31217	page	
106-53	31218-31225	results	
106-54	31226-31232	should	
106-55	31233-31235	be	
106-56	31236-31245	recreated	
106-57	31246-31249	and	
106-58	31250-31253	the	
106-59	31254-31258	user	
106-60	31259-31267	informed	
106-61	31267-31268	:	

#Text=SELECT product_id, description FROM product ORDER BY product_id LIMIT 11; product_id | description ------------+------------- 1 | Product 1
107-1	31269-31275	SELECT	
107-2	31276-31286	product_id	
107-3	31286-31287	,	
107-4	31288-31299	description	
107-5	31300-31304	FROM	
107-6	31305-31312	product	
107-7	31313-31318	ORDER	
107-8	31319-31321	BY	
107-9	31322-31332	product_id	
107-10	31333-31338	LIMIT	
107-11	31339-31341	11	
107-12	31341-31342	;	
107-13	31343-31353	product_id	
107-14	31354-31355	|	
107-15	31356-31367	description	
107-16	31368-31369	-	
107-17	31369-31370	-	
107-18	31370-31371	-	
107-19	31371-31372	-	
107-20	31372-31373	-	
107-21	31373-31374	-	
107-22	31374-31375	-	
107-23	31375-31376	-	
107-24	31376-31377	-	
107-25	31377-31378	-	
107-26	31378-31379	-	
107-27	31379-31380	-	
107-28	31380-31381	+	
107-29	31381-31382	-	
107-30	31382-31383	-	
107-31	31383-31384	-	
107-32	31384-31385	-	
107-33	31385-31386	-	
107-34	31386-31387	-	
107-35	31387-31388	-	
107-36	31388-31389	-	
107-37	31389-31390	-	
107-38	31390-31391	-	
107-39	31391-31392	-	
107-40	31392-31393	-	
107-41	31393-31394	-	
107-42	31395-31396	1	
107-43	31397-31398	|	
107-44	31399-31406	Product	
107-45	31407-31408	1	

#Text=2 | Product 2 3 | Product 3 4 | Product 14 5 | Product 15 6 | Product 6 7 | Product 7 8 | Product 8 9 | Product 9 10 | Product 10 11 | Product 11
108-1	31409-31410	2	
108-2	31411-31412	|	
108-3	31413-31420	Product	
108-4	31421-31422	2	
108-5	31423-31424	3	
108-6	31425-31426	|	
108-7	31427-31434	Product	
108-8	31435-31436	3	
108-9	31437-31438	4	
108-10	31439-31440	|	
108-11	31441-31448	Product	
108-12	31449-31451	14	
108-13	31452-31453	5	
108-14	31454-31455	|	
108-15	31456-31463	Product	
108-16	31464-31466	15	
108-17	31467-31468	6	
108-18	31469-31470	|	
108-19	31471-31478	Product	
108-20	31479-31480	6	
108-21	31481-31482	7	
108-22	31483-31484	|	
108-23	31485-31492	Product	
108-24	31493-31494	7	
108-25	31495-31496	8	
108-26	31497-31498	|	
108-27	31499-31506	Product	
108-28	31507-31508	8	
108-29	31509-31510	9	
108-30	31511-31512	|	
108-31	31513-31520	Product	
108-32	31521-31522	9	
108-33	31523-31525	10	
108-34	31526-31527	|	
108-35	31528-31535	Product	
108-36	31536-31538	10	
108-37	31539-31541	11	
108-38	31542-31543	|	
108-39	31544-31551	Product	
108-40	31552-31554	11	

#Text=Hopefully this blog post gives you an idea of how keyset pagination behaves in an environment where the result set is changing between page requests. View or Post Comments Keyset Pagination Wednesday, August 12, 2020 Having covered pagination in a previous blog post, I want to explore method #5, limit/offset and where, also called keyset or seek pagination.
109-1	31555-31564	Hopefully	
109-2	31565-31569	this	
109-3	31570-31574	blog	
109-4	31575-31579	post	
109-5	31580-31585	gives	
109-6	31586-31589	you	
109-7	31590-31592	an	
109-8	31593-31597	idea	
109-9	31598-31600	of	
109-10	31601-31604	how	
109-11	31605-31611	keyset	
109-12	31612-31622	pagination	
109-13	31623-31630	behaves	
109-14	31631-31633	in	
109-15	31634-31636	an	
109-16	31637-31648	environment	
109-17	31649-31654	where	
109-18	31655-31658	the	
109-19	31659-31665	result	
109-20	31666-31669	set	
109-21	31670-31672	is	
109-22	31673-31681	changing	
109-23	31682-31689	between	
109-24	31690-31694	page	
109-25	31695-31703	requests	
109-26	31703-31704	.	
109-27	31705-31709	View	
109-28	31710-31712	or	
109-29	31713-31717	Post	
109-30	31718-31726	Comments	
109-31	31727-31733	Keyset	
109-32	31734-31744	Pagination	
109-33	31745-31754	Wednesday	
109-34	31754-31755	,	
109-35	31756-31762	August	
109-36	31763-31765	12	
109-37	31765-31766	,	
109-38	31767-31771	2020	
109-39	31772-31778	Having	
109-40	31779-31786	covered	
109-41	31787-31797	pagination	
109-42	31798-31800	in	
109-43	31801-31802	a	
109-44	31803-31811	previous	
109-45	31812-31816	blog	
109-46	31817-31821	post	
109-47	31821-31822	,	
109-48	31823-31824	I	
109-49	31825-31829	want	
109-50	31830-31832	to	
109-51	31833-31840	explore	
109-52	31841-31847	method	
109-53	31848-31850	#5	
109-54	31850-31851	,	
109-55	31852-31857	limit	
109-56	31857-31858	/	
109-57	31858-31864	offset	
109-58	31865-31868	and	
109-59	31869-31874	where	
109-60	31874-31875	,	
109-61	31876-31880	also	
109-62	31881-31887	called	
109-63	31888-31894	keyset	
109-64	31895-31897	or	
109-65	31898-31902	seek	
109-66	31903-31913	pagination	
109-67	31913-31914	.	

#Text=This method avoids many of the performance pitfalls and inconsistent results of the other methods, but it comes with its own complexities. First, let's set expectations. Let's assume ten results per page, so each page should show ten results, except for the last page, which can contain 1–10 results. The last page should ideally not show zero results.
110-1	31915-31919	This	
110-2	31920-31926	method	
110-3	31927-31933	avoids	
110-4	31934-31938	many	
110-5	31939-31941	of	
110-6	31942-31945	the	
110-7	31946-31957	performance	
110-8	31958-31966	pitfalls	
110-9	31967-31970	and	
110-10	31971-31983	inconsistent	
110-11	31984-31991	results	
110-12	31992-31994	of	
110-13	31995-31998	the	
110-14	31999-32004	other	
110-15	32005-32012	methods	
110-16	32012-32013	,	
110-17	32014-32017	but	
110-18	32018-32020	it	
110-19	32021-32026	comes	
110-20	32027-32031	with	
110-21	32032-32035	its	
110-22	32036-32039	own	
110-23	32040-32052	complexities	
110-24	32052-32053	.	
110-25	32054-32059	First	
110-26	32059-32060	,	
110-27	32061-32066	let's	
110-28	32067-32070	set	
110-29	32071-32083	expectations	
110-30	32083-32084	.	
110-31	32085-32090	Let's	
110-32	32091-32097	assume	
110-33	32098-32101	ten	
110-34	32102-32109	results	
110-35	32110-32113	per	
110-36	32114-32118	page	
110-37	32118-32119	,	
110-38	32120-32122	so	
110-39	32123-32127	each	
110-40	32128-32132	page	
110-41	32133-32139	should	
110-42	32140-32144	show	
110-43	32145-32148	ten	
110-44	32149-32156	results	
110-45	32156-32157	,	
110-46	32158-32164	except	
110-47	32165-32168	for	
110-48	32169-32172	the	
110-49	32173-32177	last	
110-50	32178-32182	page	
110-51	32182-32183	,	
110-52	32184-32189	which	
110-53	32190-32193	can	
110-54	32194-32201	contain	
110-55	32202-32203	1	
110-56	32203-32204	–	
110-57	32204-32206	10	
110-58	32207-32214	results	
110-59	32214-32215	.	
110-60	32216-32219	The	
110-61	32220-32224	last	
110-62	32225-32229	page	
110-63	32230-32236	should	
110-64	32237-32244	ideally	
110-65	32245-32248	not	
110-66	32249-32253	show	
110-67	32254-32258	zero	
110-68	32259-32266	results	
110-69	32266-32267	.	

#Text=Let's also suppose we are displaying products, and the page results are ordered by a unique product id. Here is a sample table: CREATE TABLE product (product_id SERIAL PRIMARY KEY, description TEXT); INSERT INTO product SELECT id, 'Product ' || id::TEXT
111-1	32268-32273	Let's	
111-2	32274-32278	also	
111-3	32279-32286	suppose	
111-4	32287-32289	we	
111-5	32290-32293	are	
111-6	32294-32304	displaying	
111-7	32305-32313	products	
111-8	32313-32314	,	
111-9	32315-32318	and	
111-10	32319-32322	the	
111-11	32323-32327	page	
111-12	32328-32335	results	
111-13	32336-32339	are	
111-14	32340-32347	ordered	
111-15	32348-32350	by	
111-16	32351-32352	a	
111-17	32353-32359	unique	
111-18	32360-32367	product	
111-19	32368-32370	id	
111-20	32370-32371	.	
111-21	32372-32376	Here	
111-22	32377-32379	is	
111-23	32380-32381	a	
111-24	32382-32388	sample	
111-25	32389-32394	table	
111-26	32394-32395	:	
111-27	32396-32402	CREATE	
111-28	32403-32408	TABLE	
111-29	32409-32416	product	
111-30	32417-32418	(	
111-31	32418-32428	product_id	
111-32	32429-32435	SERIAL	
111-33	32436-32443	PRIMARY	
111-34	32444-32447	KEY	
111-35	32447-32448	,	
111-36	32449-32460	description	
111-37	32461-32465	TEXT	
111-38	32465-32466	)	
111-39	32466-32467	;	
111-40	32468-32474	INSERT	
111-41	32475-32479	INTO	
111-42	32480-32487	product	
111-43	32488-32494	SELECT	
111-44	32495-32497	id	
111-45	32497-32498	,	
111-46	32499-32500	'	
111-47	32500-32507	Product	
111-48	32508-32509	'	
111-49	32510-32511	|	
111-50	32511-32512	|	
111-51	32513-32515	id	
111-52	32515-32516	:	
111-53	32516-32517	:	
111-54	32517-32521	TEXT	

#Text=FROM generate_series(1, 100) AS t(id); Generating the first page is quite simple using limit. Paging forward is simple too. The user is not requesting to see previous pages, so any additions or removals in those pages are not significant. They are also not asking to see an updated display of the current page's values, so that can be ignored too.
112-1	32522-32526	FROM	
112-2	32527-32542	generate_series	
112-3	32542-32543	(	
112-4	32543-32544	1	
112-5	32544-32545	,	
112-6	32546-32549	100	
112-7	32549-32550	)	
112-8	32551-32553	AS	
112-9	32554-32555	t	
112-10	32555-32556	(	
112-11	32556-32558	id	
112-12	32558-32559	)	
112-13	32559-32560	;	
112-14	32561-32571	Generating	
112-15	32572-32575	the	
112-16	32576-32581	first	
112-17	32582-32586	page	
112-18	32587-32589	is	
112-19	32590-32595	quite	
112-20	32596-32602	simple	
112-21	32603-32608	using	
112-22	32609-32614	limit	
112-23	32614-32615	.	
112-24	32616-32622	Paging	
112-25	32623-32630	forward	
112-26	32631-32633	is	
112-27	32634-32640	simple	
112-28	32641-32644	too	
112-29	32644-32645	.	
112-30	32646-32649	The	
112-31	32650-32654	user	
112-32	32655-32657	is	
112-33	32658-32661	not	
112-34	32662-32672	requesting	
112-35	32673-32675	to	
112-36	32676-32679	see	
112-37	32680-32688	previous	
112-38	32689-32694	pages	
112-39	32694-32695	,	
112-40	32696-32698	so	
112-41	32699-32702	any	
112-42	32703-32712	additions	
112-43	32713-32715	or	
112-44	32716-32724	removals	
112-45	32725-32727	in	
112-46	32728-32733	those	
112-47	32734-32739	pages	
112-48	32740-32743	are	
112-49	32744-32747	not	
112-50	32748-32759	significant	
112-51	32759-32760	.	
112-52	32761-32765	They	
112-53	32766-32769	are	
112-54	32770-32774	also	
112-55	32775-32778	not	
112-56	32779-32785	asking	
112-57	32786-32788	to	
112-58	32789-32792	see	
112-59	32793-32795	an	
112-60	32796-32803	updated	
112-61	32804-32811	display	
112-62	32812-32814	of	
112-63	32815-32818	the	
112-64	32819-32826	current	
112-65	32827-32833	page's	
112-66	32834-32840	values	
112-67	32840-32841	,	
112-68	32842-32844	so	
112-69	32845-32849	that	
112-70	32850-32853	can	
112-71	32854-32856	be	
112-72	32857-32864	ignored	
112-73	32865-32868	too	
112-74	32868-32869	.	

#Text=Using limit and where, you can see the next ten values in order relative to the currently viewed page. For example, you are on page 3 (result set rows 21–30), and product 30 is the last product on the page — this query will display the next page: SELECT product_id, description FROM product
113-1	32870-32875	Using	
113-2	32876-32881	limit	
113-3	32882-32885	and	
113-4	32886-32891	where	
113-5	32891-32892	,	
113-6	32893-32896	you	
113-7	32897-32900	can	
113-8	32901-32904	see	
113-9	32905-32908	the	
113-10	32909-32913	next	
113-11	32914-32917	ten	
113-12	32918-32924	values	
113-13	32925-32927	in	
113-14	32928-32933	order	
113-15	32934-32942	relative	
113-16	32943-32945	to	
113-17	32946-32949	the	
113-18	32950-32959	currently	
113-19	32960-32966	viewed	
113-20	32967-32971	page	
113-21	32971-32972	.	
113-22	32973-32976	For	
113-23	32977-32984	example	
113-24	32984-32985	,	
113-25	32986-32989	you	
113-26	32990-32993	are	
113-27	32994-32996	on	
113-28	32997-33001	page	
113-29	33002-33003	3	
113-30	33004-33005	(	
113-31	33005-33011	result	
113-32	33012-33015	set	
113-33	33016-33020	rows	
113-34	33021-33023	21	
113-35	33023-33024	–	
113-36	33024-33026	30	
113-37	33026-33027	)	
113-38	33027-33028	,	
113-39	33029-33032	and	
113-40	33033-33040	product	
113-41	33041-33043	30	
113-42	33044-33046	is	
113-43	33047-33050	the	
113-44	33051-33055	last	
113-45	33056-33063	product	
113-46	33064-33066	on	
113-47	33067-33070	the	
113-48	33071-33075	page	
113-49	33076-33077	—	
113-50	33078-33082	this	
113-51	33083-33088	query	
113-52	33089-33093	will	
113-53	33094-33101	display	
113-54	33102-33105	the	
113-55	33106-33110	next	
113-56	33111-33115	page	
113-57	33115-33116	:	
113-58	33117-33123	SELECT	
113-59	33124-33134	product_id	
113-60	33134-33135	,	
113-61	33136-33147	description	
113-62	33148-33152	FROM	
113-63	33153-33160	product	

#Text=WHERE product_id > 30 ORDER BY product_id LIMIT 11; product_id | description ------------+------------- 31 | Product 31 32 | Product 32
114-1	33161-33166	WHERE	
114-2	33167-33177	product_id	
114-3	33178-33179	>	
114-4	33180-33182	30	
114-5	33183-33188	ORDER	
114-6	33189-33191	BY	
114-7	33192-33202	product_id	
114-8	33203-33208	LIMIT	
114-9	33209-33211	11	
114-10	33211-33212	;	
114-11	33213-33223	product_id	
114-12	33224-33225	|	
114-13	33226-33237	description	
114-14	33238-33239	-	
114-15	33239-33240	-	
114-16	33240-33241	-	
114-17	33241-33242	-	
114-18	33242-33243	-	
114-19	33243-33244	-	
114-20	33244-33245	-	
114-21	33245-33246	-	
114-22	33246-33247	-	
114-23	33247-33248	-	
114-24	33248-33249	-	
114-25	33249-33250	-	
114-26	33250-33251	+	
114-27	33251-33252	-	
114-28	33252-33253	-	
114-29	33253-33254	-	
114-30	33254-33255	-	
114-31	33255-33256	-	
114-32	33256-33257	-	
114-33	33257-33258	-	
114-34	33258-33259	-	
114-35	33259-33260	-	
114-36	33260-33261	-	
114-37	33261-33262	-	
114-38	33262-33263	-	
114-39	33263-33264	-	
114-40	33265-33267	31	
114-41	33268-33269	|	
114-42	33270-33277	Product	
114-43	33278-33280	31	
114-44	33281-33283	32	
114-45	33284-33285	|	
114-46	33286-33293	Product	
114-47	33294-33296	32	

#Text=33 | Product 33 34 | Product 34 35 | Product 35 36 | Product 36 37 | Product 37 38 | Product 38 39 | Product 39 40 | Product 40 41 | Product 41
115-1	33297-33299	33	
115-2	33300-33301	|	
115-3	33302-33309	Product	
115-4	33310-33312	33	
115-5	33313-33315	34	
115-6	33316-33317	|	
115-7	33318-33325	Product	
115-8	33326-33328	34	
115-9	33329-33331	35	
115-10	33332-33333	|	
115-11	33334-33341	Product	
115-12	33342-33344	35	
115-13	33345-33347	36	
115-14	33348-33349	|	
115-15	33350-33357	Product	
115-16	33358-33360	36	
115-17	33361-33363	37	
115-18	33364-33365	|	
115-19	33366-33373	Product	
115-20	33374-33376	37	
115-21	33377-33379	38	
115-22	33380-33381	|	
115-23	33382-33389	Product	
115-24	33390-33392	38	
115-25	33393-33395	39	
115-26	33396-33397	|	
115-27	33398-33405	Product	
115-28	33406-33408	39	
115-29	33409-33411	40	
115-30	33412-33413	|	
115-31	33414-33421	Product	
115-32	33422-33424	40	
115-33	33425-33427	41	
115-34	33428-33429	|	
115-35	33430-33437	Product	
115-36	33438-33440	41	

#Text=I have used limit 11 above so if less than eleven rows are returned, the "Next Page" option can be disabled, since there are no more results right now, though there might be later. Obviously, only the first ten rows should be displayed. An index can often be used for this query. Offset would be used to jump forward or backward multiple pages. Paging backward gets tricky.
116-1	33441-33442	I	
116-2	33443-33447	have	
116-3	33448-33452	used	
116-4	33453-33458	limit	
116-5	33459-33461	11	
116-6	33462-33467	above	
116-7	33468-33470	so	
116-8	33471-33473	if	
116-9	33474-33478	less	
116-10	33479-33483	than	
116-11	33484-33490	eleven	
116-12	33491-33495	rows	
116-13	33496-33499	are	
116-14	33500-33508	returned	
116-15	33508-33509	,	
116-16	33510-33513	the	
116-17	33514-33515	"	
116-18	33515-33519	Next	
116-19	33520-33524	Page	
116-20	33524-33525	"	
116-21	33526-33532	option	
116-22	33533-33536	can	
116-23	33537-33539	be	
116-24	33540-33548	disabled	
116-25	33548-33549	,	
116-26	33550-33555	since	
116-27	33556-33561	there	
116-28	33562-33565	are	
116-29	33566-33568	no	
116-30	33569-33573	more	
116-31	33574-33581	results	
116-32	33582-33587	right	
116-33	33588-33591	now	
116-34	33591-33592	,	
116-35	33593-33599	though	
116-36	33600-33605	there	
116-37	33606-33611	might	
116-38	33612-33614	be	
116-39	33615-33620	later	
116-40	33620-33621	.	
116-41	33622-33631	Obviously	
116-42	33631-33632	,	
116-43	33633-33637	only	
116-44	33638-33641	the	
116-45	33642-33647	first	
116-46	33648-33651	ten	
116-47	33652-33656	rows	
116-48	33657-33663	should	
116-49	33664-33666	be	
116-50	33667-33676	displayed	
116-51	33676-33677	.	
116-52	33678-33680	An	
116-53	33681-33686	index	
116-54	33687-33690	can	
116-55	33691-33696	often	
116-56	33697-33699	be	
116-57	33700-33704	used	
116-58	33705-33708	for	
116-59	33709-33713	this	
116-60	33714-33719	query	
116-61	33719-33720	.	
116-62	33721-33727	Offset	
116-63	33728-33733	would	
116-64	33734-33736	be	
116-65	33737-33741	used	
116-66	33742-33744	to	
116-67	33745-33749	jump	
116-68	33750-33757	forward	
116-69	33758-33760	or	
116-70	33761-33769	backward	
116-71	33770-33778	multiple	
116-72	33779-33784	pages	
116-73	33784-33785	.	
116-74	33786-33792	Paging	
116-75	33793-33801	backward	
116-76	33802-33806	gets	
116-77	33807-33813	tricky	
116-78	33813-33814	.	

#Text=As stated above, only the last page can display less then ten results, but rows might be added and removed from previous pages, so just because we are on page 3 doesn't mean there are twenty previous rows. can't just do LIMIT 11 OFFSET 10 to display the previous page without a repeatable read or serializable snapshot — we might get more or less than ten rows.
117-1	33815-33817	As	
117-2	33818-33824	stated	
117-3	33825-33830	above	
117-4	33830-33831	,	
117-5	33832-33836	only	
117-6	33837-33840	the	
117-7	33841-33845	last	
117-8	33846-33850	page	
117-9	33851-33854	can	
117-10	33855-33862	display	
117-11	33863-33867	less	
117-12	33868-33872	then	
117-13	33873-33876	ten	
117-14	33877-33884	results	
117-15	33884-33885	,	
117-16	33886-33889	but	
117-17	33890-33894	rows	
117-18	33895-33900	might	
117-19	33901-33903	be	
117-20	33904-33909	added	
117-21	33910-33913	and	
117-22	33914-33921	removed	
117-23	33922-33926	from	
117-24	33927-33935	previous	
117-25	33936-33941	pages	
117-26	33941-33942	,	
117-27	33943-33945	so	
117-28	33946-33950	just	
117-29	33951-33958	because	
117-30	33959-33961	we	
117-31	33962-33965	are	
117-32	33966-33968	on	
117-33	33969-33973	page	
117-34	33974-33975	3	
117-35	33976-33983	doesn't	
117-36	33984-33988	mean	
117-37	33989-33994	there	
117-38	33995-33998	are	
117-39	33999-34005	twenty	
117-40	34006-34014	previous	
117-41	34015-34019	rows	
117-42	34019-34020	.	
117-43	34021-34026	can't	
117-44	34027-34031	just	
117-45	34032-34034	do	
117-46	34035-34040	LIMIT	
117-47	34041-34043	11	
117-48	34044-34050	OFFSET	
117-49	34051-34053	10	
117-50	34054-34056	to	
117-51	34057-34064	display	
117-52	34065-34068	the	
117-53	34069-34077	previous	
117-54	34078-34082	page	
117-55	34083-34090	without	
117-56	34091-34092	a	
117-57	34093-34103	repeatable	
117-58	34104-34108	read	
117-59	34109-34111	or	
117-60	34112-34124	serializable	
117-61	34125-34133	snapshot	
117-62	34134-34135	—	
117-63	34136-34138	we	
117-64	34139-34144	might	
117-65	34145-34148	get	
117-66	34149-34153	more	
117-67	34154-34156	or	
117-68	34157-34161	less	
117-69	34162-34166	than	
117-70	34167-34170	ten	
117-71	34171-34175	rows	
117-72	34175-34176	.	

#Text=To do this properly, assuming the first displayed row on page 3 has a product_id of 21, it is necessary to reverse the order by clause, use limit, and then use a common table expression to re-order the results for display: WITH page AS SELECT product_id, description FROM product WHERE product_id < 21 ORDER BY product_id DESC LIMIT 11
118-1	34177-34179	To	
118-2	34180-34182	do	
118-3	34183-34187	this	
118-4	34188-34196	properly	
118-5	34196-34197	,	
118-6	34198-34206	assuming	
118-7	34207-34210	the	
118-8	34211-34216	first	
118-9	34217-34226	displayed	
118-10	34227-34230	row	
118-11	34231-34233	on	
118-12	34234-34238	page	
118-13	34239-34240	3	
118-14	34241-34244	has	
118-15	34245-34246	a	
118-16	34247-34257	product_id	
118-17	34258-34260	of	
118-18	34261-34263	21	
118-19	34263-34264	,	
118-20	34265-34267	it	
118-21	34268-34270	is	
118-22	34271-34280	necessary	
118-23	34281-34283	to	
118-24	34284-34291	reverse	
118-25	34292-34295	the	
118-26	34296-34301	order	
118-27	34302-34304	by	
118-28	34305-34311	clause	
118-29	34311-34312	,	
118-30	34313-34316	use	
118-31	34317-34322	limit	
118-32	34322-34323	,	
118-33	34324-34327	and	
118-34	34328-34332	then	
118-35	34333-34336	use	
118-36	34337-34338	a	
118-37	34339-34345	common	
118-38	34346-34351	table	
118-39	34352-34362	expression	
118-40	34363-34365	to	
118-41	34366-34374	re-order	
118-42	34375-34378	the	
118-43	34379-34386	results	
118-44	34387-34390	for	
118-45	34391-34398	display	
118-46	34398-34399	:	
118-47	34400-34404	WITH	
118-48	34405-34409	page	
118-49	34410-34412	AS	
118-50	34413-34419	SELECT	
118-51	34420-34430	product_id	
118-52	34430-34431	,	
118-53	34432-34443	description	
118-54	34444-34448	FROM	
118-55	34449-34456	product	
118-56	34457-34462	WHERE	
118-57	34463-34473	product_id	
118-58	34474-34475	<	
118-59	34476-34478	21	
118-60	34479-34484	ORDER	
118-61	34485-34487	BY	
118-62	34488-34498	product_id	
118-63	34499-34503	DESC	
118-64	34504-34509	LIMIT	
118-65	34510-34512	11	

#Text=SELECT product_id, description FROM page ORDER BY product_id; product_id | description ------------+------------- 10 | Product 10 11 | Product 11
119-1	34513-34519	SELECT	
119-2	34520-34530	product_id	
119-3	34530-34531	,	
119-4	34532-34543	description	
119-5	34544-34548	FROM	
119-6	34549-34553	page	
119-7	34554-34559	ORDER	
119-8	34560-34562	BY	
119-9	34563-34573	product_id	
119-10	34573-34574	;	
119-11	34575-34585	product_id	
119-12	34586-34587	|	
119-13	34588-34599	description	
119-14	34600-34601	-	
119-15	34601-34602	-	
119-16	34602-34603	-	
119-17	34603-34604	-	
119-18	34604-34605	-	
119-19	34605-34606	-	
119-20	34606-34607	-	
119-21	34607-34608	-	
119-22	34608-34609	-	
119-23	34609-34610	-	
119-24	34610-34611	-	
119-25	34611-34612	-	
119-26	34612-34613	+	
119-27	34613-34614	-	
119-28	34614-34615	-	
119-29	34615-34616	-	
119-30	34616-34617	-	
119-31	34617-34618	-	
119-32	34618-34619	-	
119-33	34619-34620	-	
119-34	34620-34621	-	
119-35	34621-34622	-	
119-36	34622-34623	-	
119-37	34623-34624	-	
119-38	34624-34625	-	
119-39	34625-34626	-	
119-40	34627-34629	10	
119-41	34630-34631	|	
119-42	34632-34639	Product	
119-43	34640-34642	10	
119-44	34643-34645	11	
119-45	34646-34647	|	
119-46	34648-34655	Product	
119-47	34656-34658	11	

#Text=12 | Product 12 13 | Product 13 14 | Product 14 15 | Product 15 16 | Product 16 17 | Product 17 18 | Product 18 19 | Product 19 20 | Product 20
120-1	34659-34661	12	
120-2	34662-34663	|	
120-3	34664-34671	Product	
120-4	34672-34674	12	
120-5	34675-34677	13	
120-6	34678-34679	|	
120-7	34680-34687	Product	
120-8	34688-34690	13	
120-9	34691-34693	14	
120-10	34694-34695	|	
120-11	34696-34703	Product	
120-12	34704-34706	14	
120-13	34707-34709	15	
120-14	34710-34711	|	
120-15	34712-34719	Product	
120-16	34720-34722	15	
120-17	34723-34725	16	
120-18	34726-34727	|	
120-19	34728-34735	Product	
120-20	34736-34738	16	
120-21	34739-34741	17	
120-22	34742-34743	|	
120-23	34744-34751	Product	
120-24	34752-34754	17	
120-25	34755-34757	18	
120-26	34758-34759	|	
120-27	34760-34767	Product	
120-28	34768-34770	18	
120-29	34771-34773	19	
120-30	34774-34775	|	
120-31	34776-34783	Product	
120-32	34784-34786	19	
120-33	34787-34789	20	
120-34	34790-34791	|	
120-35	34792-34799	Product	
120-36	34800-34802	20	

#Text=This gets the 11 result set rows before page 3, and in this case the first row is used to indicated if there is a valid "Previous Page". However there are more complexities: If 11 rows are returned and your user interface suggests you should be on the first page, you should probably repopulate the first page and inform the user. If only ten rows are returned, you can assume you are on the first page, even if that was not true based on previous queries.
121-1	34803-34807	This	
121-2	34808-34812	gets	
121-3	34813-34816	the	
121-4	34817-34819	11	
121-5	34820-34826	result	
121-6	34827-34830	set	
121-7	34831-34835	rows	
121-8	34836-34842	before	
121-9	34843-34847	page	
121-10	34848-34849	3	
121-11	34849-34850	,	
121-12	34851-34854	and	
121-13	34855-34857	in	
121-14	34858-34862	this	
121-15	34863-34867	case	
121-16	34868-34871	the	
121-17	34872-34877	first	
121-18	34878-34881	row	
121-19	34882-34884	is	
121-20	34885-34889	used	
121-21	34890-34892	to	
121-22	34893-34902	indicated	
121-23	34903-34905	if	
121-24	34906-34911	there	
121-25	34912-34914	is	
121-26	34915-34916	a	
121-27	34917-34922	valid	
121-28	34923-34924	"	
121-29	34924-34932	Previous	
121-30	34933-34937	Page	
121-31	34937-34938	"	
121-32	34938-34939	.	
121-33	34940-34947	However	
121-34	34948-34953	there	
121-35	34954-34957	are	
121-36	34958-34962	more	
121-37	34963-34975	complexities	
121-38	34975-34976	:	
121-39	34977-34979	If	
121-40	34980-34982	11	
121-41	34983-34987	rows	
121-42	34988-34991	are	
121-43	34992-35000	returned	
121-44	35001-35004	and	
121-45	35005-35009	your	
121-46	35010-35014	user	
121-47	35015-35024	interface	
121-48	35025-35033	suggests	
121-49	35034-35037	you	
121-50	35038-35044	should	
121-51	35045-35047	be	
121-52	35048-35050	on	
121-53	35051-35054	the	
121-54	35055-35060	first	
121-55	35061-35065	page	
121-56	35065-35066	,	
121-57	35067-35070	you	
121-58	35071-35077	should	
121-59	35078-35086	probably	
121-60	35087-35097	repopulate	
121-61	35098-35101	the	
121-62	35102-35107	first	
121-63	35108-35112	page	
121-64	35113-35116	and	
121-65	35117-35123	inform	
121-66	35124-35127	the	
121-67	35128-35132	user	
121-68	35132-35133	.	
121-69	35134-35136	If	
121-70	35137-35141	only	
121-71	35142-35145	ten	
121-72	35146-35150	rows	
121-73	35151-35154	are	
121-74	35155-35163	returned	
121-75	35163-35164	,	
121-76	35165-35168	you	
121-77	35169-35172	can	
121-78	35173-35179	assume	
121-79	35180-35183	you	
121-80	35184-35187	are	
121-81	35188-35190	on	
121-82	35191-35194	the	
121-83	35195-35200	first	
121-84	35201-35205	page	
121-85	35205-35206	,	
121-86	35207-35211	even	
121-87	35212-35214	if	
121-88	35215-35219	that	
121-89	35220-35223	was	
121-90	35224-35227	not	
121-91	35228-35232	true	
121-92	35233-35238	based	
121-93	35239-35241	on	
121-94	35242-35250	previous	
121-95	35251-35258	queries	
121-96	35258-35259	.	

#Text=If you get less then ten rows, you will need to re-issue the initial query to populate the first page with ten results, and perhaps inform the user since result rows might be duplicated from previous pages. As stated earlier, the keyset pagination method has many advantages in terms of performance and consistency, but it can be complex to implement because you are effectively getting a new snapshot of the data each time you ask for another page, and making that line up with pagination requirements can be tricky.
122-1	35260-35262	If	
122-2	35263-35266	you	
122-3	35267-35270	get	
122-4	35271-35275	less	
122-5	35276-35280	then	
122-6	35281-35284	ten	
122-7	35285-35289	rows	
122-8	35289-35290	,	
122-9	35291-35294	you	
122-10	35295-35299	will	
122-11	35300-35304	need	
122-12	35305-35307	to	
122-13	35308-35316	re-issue	
122-14	35317-35320	the	
122-15	35321-35328	initial	
122-16	35329-35334	query	
122-17	35335-35337	to	
122-18	35338-35346	populate	
122-19	35347-35350	the	
122-20	35351-35356	first	
122-21	35357-35361	page	
122-22	35362-35366	with	
122-23	35367-35370	ten	
122-24	35371-35378	results	
122-25	35378-35379	,	
122-26	35380-35383	and	
122-27	35384-35391	perhaps	
122-28	35392-35398	inform	
122-29	35399-35402	the	
122-30	35403-35407	user	
122-31	35408-35413	since	
122-32	35414-35420	result	
122-33	35421-35425	rows	
122-34	35426-35431	might	
122-35	35432-35434	be	
122-36	35435-35445	duplicated	
122-37	35446-35450	from	
122-38	35451-35459	previous	
122-39	35460-35465	pages	
122-40	35465-35466	.	
122-41	35467-35469	As	
122-42	35470-35476	stated	
122-43	35477-35484	earlier	
122-44	35484-35485	,	
122-45	35486-35489	the	
122-46	35490-35496	keyset	
122-47	35497-35507	pagination	
122-48	35508-35514	method	
122-49	35515-35518	has	
122-50	35519-35523	many	
122-51	35524-35534	advantages	
122-52	35535-35537	in	
122-53	35538-35543	terms	
122-54	35544-35546	of	
122-55	35547-35558	performance	
122-56	35559-35562	and	
122-57	35563-35574	consistency	
122-58	35574-35575	,	
122-59	35576-35579	but	
122-60	35580-35582	it	
122-61	35583-35586	can	
122-62	35587-35589	be	
122-63	35590-35597	complex	
122-64	35598-35600	to	
122-65	35601-35610	implement	
122-66	35611-35618	because	
122-67	35619-35622	you	
122-68	35623-35626	are	
122-69	35627-35638	effectively	
122-70	35639-35646	getting	
122-71	35647-35648	a	
122-72	35649-35652	new	
122-73	35653-35661	snapshot	
122-74	35662-35664	of	
122-75	35665-35668	the	
122-76	35669-35673	data	
122-77	35674-35678	each	
122-78	35679-35683	time	
122-79	35684-35687	you	
122-80	35688-35691	ask	
122-81	35692-35695	for	
122-82	35696-35703	another	
122-83	35704-35708	page	
122-84	35708-35709	,	
122-85	35710-35713	and	
122-86	35714-35720	making	
122-87	35721-35725	that	
122-88	35726-35730	line	
122-89	35731-35733	up	
122-90	35734-35738	with	
122-91	35739-35749	pagination	
122-92	35750-35762	requirements	
122-93	35763-35766	can	
122-94	35767-35769	be	
122-95	35770-35776	tricky	
122-96	35776-35777	.	

#Text=View or Post Comments Pagination Tips Monday, August 10, 2020 We have all used applications that allow searches which return results in sections or "pages", like for products or flights. For example, you might search for a product, and there might be 1,500 matches,
123-1	35778-35782	View	
123-2	35783-35785	or	
123-3	35786-35790	Post	
123-4	35791-35799	Comments	
123-5	35800-35810	Pagination	
123-6	35811-35815	Tips	
123-7	35816-35822	Monday	
123-8	35822-35823	,	
123-9	35824-35830	August	
123-10	35831-35833	10	
123-11	35833-35834	,	
123-12	35835-35839	2020	
123-13	35840-35842	We	
123-14	35843-35847	have	
123-15	35848-35851	all	
123-16	35852-35856	used	
123-17	35857-35869	applications	
123-18	35870-35874	that	
123-19	35875-35880	allow	
123-20	35881-35889	searches	
123-21	35890-35895	which	
123-22	35896-35902	return	
123-23	35903-35910	results	
123-24	35911-35913	in	
123-25	35914-35922	sections	
123-26	35923-35925	or	
123-27	35926-35927	"	
123-28	35927-35932	pages	
123-29	35932-35933	"	
123-30	35933-35934	,	
123-31	35935-35939	like	
123-32	35940-35943	for	
123-33	35944-35952	products	
123-34	35953-35955	or	
123-35	35956-35963	flights	
123-36	35963-35964	.	
123-37	35965-35968	For	
123-38	35969-35976	example	
123-39	35976-35977	,	
123-40	35978-35981	you	
123-41	35982-35987	might	
123-42	35988-35994	search	
123-43	35995-35998	for	
123-44	35999-36000	a	
123-45	36001-36008	product	
123-46	36008-36009	,	
123-47	36010-36013	and	
123-48	36014-36019	there	
123-49	36020-36025	might	
123-50	36026-36028	be	
123-51	36029-36034	1,500	
123-52	36035-36042	matches	
123-53	36042-36043	,	

#Text=but you don't see 1,500 results — you only see ten results (1–10), and you have the option of seeing the next ten (11–20), and the next ten (21–30), etc. Pagination is done for several reasons: The user probably doesn't want to see all the results at once The user probably doesn't want to ever see all of the results It might be inefficient to transfer and display all results
124-1	36044-36047	but	
124-2	36048-36051	you	
124-3	36052-36057	don't	
124-4	36058-36061	see	
124-5	36062-36067	1,500	
124-6	36068-36075	results	
124-7	36076-36077	—	
124-8	36078-36081	you	
124-9	36082-36086	only	
124-10	36087-36090	see	
124-11	36091-36094	ten	
124-12	36095-36102	results	
124-13	36103-36104	(	
124-14	36104-36105	1	
124-15	36105-36106	–	
124-16	36106-36108	10	
124-17	36108-36109	)	
124-18	36109-36110	,	
124-19	36111-36114	and	
124-20	36115-36118	you	
124-21	36119-36123	have	
124-22	36124-36127	the	
124-23	36128-36134	option	
124-24	36135-36137	of	
124-25	36138-36144	seeing	
124-26	36145-36148	the	
124-27	36149-36153	next	
124-28	36154-36157	ten	
124-29	36158-36159	(	
124-30	36159-36161	11	
124-31	36161-36162	–	
124-32	36162-36164	20	
124-33	36164-36165	)	
124-34	36165-36166	,	
124-35	36167-36170	and	
124-36	36171-36174	the	
124-37	36175-36179	next	
124-38	36180-36183	ten	
124-39	36184-36185	(	
124-40	36185-36187	21	
124-41	36187-36188	–	
124-42	36188-36190	30	
124-43	36190-36191	)	
124-44	36191-36192	,	
124-45	36193-36196	etc	
124-46	36196-36197	.	
124-47	36198-36208	Pagination	
124-48	36209-36211	is	
124-49	36212-36216	done	
124-50	36217-36220	for	
124-51	36221-36228	several	
124-52	36229-36236	reasons	
124-53	36236-36237	:	
124-54	36238-36241	The	
124-55	36242-36246	user	
124-56	36247-36255	probably	
124-57	36256-36263	doesn't	
124-58	36264-36268	want	
124-59	36269-36271	to	
124-60	36272-36275	see	
124-61	36276-36279	all	
124-62	36280-36283	the	
124-63	36284-36291	results	
124-64	36292-36294	at	
124-65	36295-36299	once	
124-66	36300-36303	The	
124-67	36304-36308	user	
124-68	36309-36317	probably	
124-69	36318-36325	doesn't	
124-70	36326-36330	want	
124-71	36331-36333	to	
124-72	36334-36338	ever	
124-73	36339-36342	see	
124-74	36343-36346	all	
124-75	36347-36349	of	
124-76	36350-36353	the	
124-77	36354-36361	results	
124-78	36362-36364	It	
124-79	36365-36370	might	
124-80	36371-36373	be	
124-81	36374-36385	inefficient	
124-82	36386-36388	to	
124-83	36389-36397	transfer	
124-84	36398-36401	and	
124-85	36402-36409	display	
124-86	36410-36413	all	
124-87	36414-36421	results	

#Text=There are several ways to enable pagination using a client/server architecture like databases. One approach is to transfer all results to the client, and let the client do the pagination. That handles the first issue, but it doesn't handle cases where the transfer and storage of many results is inefficient.
125-1	36422-36427	There	
125-2	36428-36431	are	
125-3	36432-36439	several	
125-4	36440-36444	ways	
125-5	36445-36447	to	
125-6	36448-36454	enable	
125-7	36455-36465	pagination	
125-8	36466-36471	using	
125-9	36472-36473	a	
125-10	36474-36480	client	
125-11	36480-36481	/	
125-12	36481-36487	server	
125-13	36488-36500	architecture	
125-14	36501-36505	like	
125-15	36506-36515	databases	
125-16	36515-36516	.	
125-17	36517-36520	One	
125-18	36521-36529	approach	
125-19	36530-36532	is	
125-20	36533-36535	to	
125-21	36536-36544	transfer	
125-22	36545-36548	all	
125-23	36549-36556	results	
125-24	36557-36559	to	
125-25	36560-36563	the	
125-26	36564-36570	client	
125-27	36570-36571	,	
125-28	36572-36575	and	
125-29	36576-36579	let	
125-30	36580-36583	the	
125-31	36584-36590	client	
125-32	36591-36593	do	
125-33	36594-36597	the	
125-34	36598-36608	pagination	
125-35	36608-36609	.	
125-36	36610-36614	That	
125-37	36615-36622	handles	
125-38	36623-36626	the	
125-39	36627-36632	first	
125-40	36633-36638	issue	
125-41	36638-36639	,	
125-42	36640-36643	but	
125-43	36644-36646	it	
125-44	36647-36654	doesn't	
125-45	36655-36661	handle	
125-46	36662-36667	cases	
125-47	36668-36673	where	
125-48	36674-36677	the	
125-49	36678-36686	transfer	
125-50	36687-36690	and	
125-51	36691-36698	storage	
125-52	36699-36701	of	
125-53	36702-36706	many	
125-54	36707-36714	results	
125-55	36715-36717	is	
125-56	36718-36729	inefficient	
125-57	36729-36730	.	

#Text=While this might work for 1,500 results, it is going to perform badly for 150 million results. Therefore, some kind of pagination support on the server side is required if large result sets are possible. There are four common approaches: Cursors: Open a non-with hold cursor in a transaction block and fetch rows in pages.
126-1	36731-36736	While	
126-2	36737-36741	this	
126-3	36742-36747	might	
126-4	36748-36752	work	
126-5	36753-36756	for	
126-6	36757-36762	1,500	
126-7	36763-36770	results	
126-8	36770-36771	,	
126-9	36772-36774	it	
126-10	36775-36777	is	
126-11	36778-36783	going	
126-12	36784-36786	to	
126-13	36787-36794	perform	
126-14	36795-36800	badly	
126-15	36801-36804	for	
126-16	36805-36808	150	
126-17	36809-36816	million	
126-18	36817-36824	results	
126-19	36824-36825	.	
126-20	36826-36835	Therefore	
126-21	36835-36836	,	
126-22	36837-36841	some	
126-23	36842-36846	kind	
126-24	36847-36849	of	
126-25	36850-36860	pagination	
126-26	36861-36868	support	
126-27	36869-36871	on	
126-28	36872-36875	the	
126-29	36876-36882	server	
126-30	36883-36887	side	
126-31	36888-36890	is	
126-32	36891-36899	required	
126-33	36900-36902	if	
126-34	36903-36908	large	
126-35	36909-36915	result	
126-36	36916-36920	sets	
126-37	36921-36924	are	
126-38	36925-36933	possible	
126-39	36933-36934	.	
126-40	36935-36940	There	
126-41	36941-36944	are	
126-42	36945-36949	four	
126-43	36950-36956	common	
126-44	36957-36967	approaches	
126-45	36967-36968	:	
126-46	36969-36976	Cursors	
126-47	36976-36977	:	
126-48	36978-36982	Open	
126-49	36983-36984	a	
126-50	36985-36993	non-with	
126-51	36994-36998	hold	
126-52	36999-37005	cursor	
126-53	37006-37008	in	
126-54	37009-37010	a	
126-55	37011-37022	transaction	
126-56	37023-37028	block	
126-57	37029-37032	and	
126-58	37033-37038	fetch	
126-59	37039-37043	rows	
126-60	37044-37046	in	
126-61	37047-37052	pages	
126-62	37052-37053	.	

#Text=The downside of this is that the entire result set often has be computed before returning any result. Also, the transaction must be kept open while users are paging through the results, leading to potentially long-running transactions, and therefore decreased cleanup efficiency. Using idle_in_transaction_session_timeout prevents sessions from keeping transactions open too long.
127-1	37054-37057	The	
127-2	37058-37066	downside	
127-3	37067-37069	of	
127-4	37070-37074	this	
127-5	37075-37077	is	
127-6	37078-37082	that	
127-7	37083-37086	the	
127-8	37087-37093	entire	
127-9	37094-37100	result	
127-10	37101-37104	set	
127-11	37105-37110	often	
127-12	37111-37114	has	
127-13	37115-37117	be	
127-14	37118-37126	computed	
127-15	37127-37133	before	
127-16	37134-37143	returning	
127-17	37144-37147	any	
127-18	37148-37154	result	
127-19	37154-37155	.	
127-20	37156-37160	Also	
127-21	37160-37161	,	
127-22	37162-37165	the	
127-23	37166-37177	transaction	
127-24	37178-37182	must	
127-25	37183-37185	be	
127-26	37186-37190	kept	
127-27	37191-37195	open	
127-28	37196-37201	while	
127-29	37202-37207	users	
127-30	37208-37211	are	
127-31	37212-37218	paging	
127-32	37219-37226	through	
127-33	37227-37230	the	
127-34	37231-37238	results	
127-35	37238-37239	,	
127-36	37240-37247	leading	
127-37	37248-37250	to	
127-38	37251-37262	potentially	
127-39	37263-37275	long-running	
127-40	37276-37288	transactions	
127-41	37288-37289	,	
127-42	37290-37293	and	
127-43	37294-37303	therefore	
127-44	37304-37313	decreased	
127-45	37314-37321	cleanup	
127-46	37322-37332	efficiency	
127-47	37332-37333	.	
127-48	37334-37339	Using	
127-49	37340-37375	idle_in_transaction_session_timeout	
127-50	37376-37384	prevents	
127-51	37385-37393	sessions	
127-52	37394-37398	from	
127-53	37399-37406	keeping	
127-54	37407-37419	transactions	
127-55	37420-37424	open	
127-56	37425-37428	too	
127-57	37429-37433	long	
127-58	37433-37434	.	

#Text=Using with hold cursors avoids keeping a transaction open during page fetches, but it does require the entire result set to be stored in server memory. limit/offset: These keywords allow select to return partial results, ideally suited to pagination. Limit/offset also allow the optimizer (slide 52) to efficiently access limited result sets by often using indexes which are only efficient for small result sets.
128-1	37435-37440	Using	
128-2	37441-37445	with	
128-3	37446-37450	hold	
128-4	37451-37458	cursors	
128-5	37459-37465	avoids	
128-6	37466-37473	keeping	
128-7	37474-37475	a	
128-8	37476-37487	transaction	
128-9	37488-37492	open	
128-10	37493-37499	during	
128-11	37500-37504	page	
128-12	37505-37512	fetches	
128-13	37512-37513	,	
128-14	37514-37517	but	
128-15	37518-37520	it	
128-16	37521-37525	does	
128-17	37526-37533	require	
128-18	37534-37537	the	
128-19	37538-37544	entire	
128-20	37545-37551	result	
128-21	37552-37555	set	
128-22	37556-37558	to	
128-23	37559-37561	be	
128-24	37562-37568	stored	
128-25	37569-37571	in	
128-26	37572-37578	server	
128-27	37579-37585	memory	
128-28	37585-37586	.	
128-29	37587-37592	limit	
128-30	37592-37593	/	
128-31	37593-37599	offset	
128-32	37599-37600	:	
128-33	37601-37606	These	
128-34	37607-37615	keywords	
128-35	37616-37621	allow	
128-36	37622-37628	select	
128-37	37629-37631	to	
128-38	37632-37638	return	
128-39	37639-37646	partial	
128-40	37647-37654	results	
128-41	37654-37655	,	
128-42	37656-37663	ideally	
128-43	37664-37670	suited	
128-44	37671-37673	to	
128-45	37674-37684	pagination	
128-46	37684-37685	.	
128-47	37686-37691	Limit	
128-48	37691-37692	/	
128-49	37692-37698	offset	
128-50	37699-37703	also	
128-51	37704-37709	allow	
128-52	37710-37713	the	
128-53	37714-37723	optimizer	
128-54	37724-37725	(	
128-55	37725-37730	slide	
128-56	37731-37733	52	
128-57	37733-37734	)	
128-58	37735-37737	to	
128-59	37738-37749	efficiently	
128-60	37750-37756	access	
128-61	37757-37764	limited	
128-62	37765-37771	result	
128-63	37772-37776	sets	
128-64	37777-37779	by	
128-65	37780-37785	often	
128-66	37786-37791	using	
128-67	37792-37799	indexes	
128-68	37800-37805	which	
128-69	37806-37809	are	
128-70	37810-37814	only	
128-71	37815-37824	efficient	
128-72	37825-37828	for	
128-73	37829-37834	small	
128-74	37835-37841	result	
128-75	37842-37846	sets	
128-76	37846-37847	.	

#Text=This also avoids creation of the entire result in memory. Limit/offset with repeatable read: Limit/offset alone has a problem displaying accurate data if the underlying results change during page views. For example, if I am viewing results 21–30, and a row is added which should appear in range 11–20, if I request the next page,
129-1	37848-37852	This	
129-2	37853-37857	also	
129-3	37858-37864	avoids	
129-4	37865-37873	creation	
129-5	37874-37876	of	
129-6	37877-37880	the	
129-7	37881-37887	entire	
129-8	37888-37894	result	
129-9	37895-37897	in	
129-10	37898-37904	memory	
129-11	37904-37905	.	
129-12	37906-37911	Limit	
129-13	37911-37912	/	
129-14	37912-37918	offset	
129-15	37919-37923	with	
129-16	37924-37934	repeatable	
129-17	37935-37939	read	
129-18	37939-37940	:	
129-19	37941-37946	Limit	
129-20	37946-37947	/	
129-21	37947-37953	offset	
129-22	37954-37959	alone	
129-23	37960-37963	has	
129-24	37964-37965	a	
129-25	37966-37973	problem	
129-26	37974-37984	displaying	
129-27	37985-37993	accurate	
129-28	37994-37998	data	
129-29	37999-38001	if	
129-30	38002-38005	the	
129-31	38006-38016	underlying	
129-32	38017-38024	results	
129-33	38025-38031	change	
129-34	38032-38038	during	
129-35	38039-38043	page	
129-36	38044-38049	views	
129-37	38049-38050	.	
129-38	38051-38054	For	
129-39	38055-38062	example	
129-40	38062-38063	,	
129-41	38064-38066	if	
129-42	38067-38068	I	
129-43	38069-38071	am	
129-44	38072-38079	viewing	
129-45	38080-38087	results	
129-46	38088-38090	21	
129-47	38090-38091	–	
129-48	38091-38093	30	
129-49	38093-38094	,	
129-50	38095-38098	and	
129-51	38099-38100	a	
129-52	38101-38104	row	
129-53	38105-38107	is	
129-54	38108-38113	added	
129-55	38114-38119	which	
129-56	38120-38126	should	
129-57	38127-38133	appear	
129-58	38134-38136	in	
129-59	38137-38142	range	
129-60	38143-38145	11	
129-61	38145-38146	–	
129-62	38146-38148	20	
129-63	38148-38149	,	
129-64	38150-38152	if	
129-65	38153-38154	I	
129-66	38155-38162	request	
129-67	38163-38166	the	
129-68	38167-38171	next	
129-69	38172-38176	page	
129-70	38176-38177	,	

#Text=what was item 30 will appear again as item 31. If an earlier item is deleted, what was item 31 will now be item 30, and will not appear in range 31–40. Effectively, paging back and forward will cause items to not appear, or appear twice. The fix for this is to use limit/offset in a repeatable read or serializable
130-1	38178-38182	what	
130-2	38183-38186	was	
130-3	38187-38191	item	
130-4	38192-38194	30	
130-5	38195-38199	will	
130-6	38200-38206	appear	
130-7	38207-38212	again	
130-8	38213-38215	as	
130-9	38216-38220	item	
130-10	38221-38223	31	
130-11	38223-38224	.	
130-12	38225-38227	If	
130-13	38228-38230	an	
130-14	38231-38238	earlier	
130-15	38239-38243	item	
130-16	38244-38246	is	
130-17	38247-38254	deleted	
130-18	38254-38255	,	
130-19	38256-38260	what	
130-20	38261-38264	was	
130-21	38265-38269	item	
130-22	38270-38272	31	
130-23	38273-38277	will	
130-24	38278-38281	now	
130-25	38282-38284	be	
130-26	38285-38289	item	
130-27	38290-38292	30	
130-28	38292-38293	,	
130-29	38294-38297	and	
130-30	38298-38302	will	
130-31	38303-38306	not	
130-32	38307-38313	appear	
130-33	38314-38316	in	
130-34	38317-38322	range	
130-35	38323-38325	31	
130-36	38325-38326	–	
130-37	38326-38328	40	
130-38	38328-38329	.	
130-39	38330-38341	Effectively	
130-40	38341-38342	,	
130-41	38343-38349	paging	
130-42	38350-38354	back	
130-43	38355-38358	and	
130-44	38359-38366	forward	
130-45	38367-38371	will	
130-46	38372-38377	cause	
130-47	38378-38383	items	
130-48	38384-38386	to	
130-49	38387-38390	not	
130-50	38391-38397	appear	
130-51	38397-38398	,	
130-52	38399-38401	or	
130-53	38402-38408	appear	
130-54	38409-38414	twice	
130-55	38414-38415	.	
130-56	38416-38419	The	
130-57	38420-38423	fix	
130-58	38424-38427	for	
130-59	38428-38432	this	
130-60	38433-38435	is	
130-61	38436-38438	to	
130-62	38439-38442	use	
130-63	38443-38448	limit	
130-64	38448-38449	/	
130-65	38449-38455	offset	
130-66	38456-38458	in	
130-67	38459-38460	a	
130-68	38461-38471	repeatable	
130-69	38472-38476	read	
130-70	38477-38479	or	
130-71	38480-38492	serializable	

#Text=transaction, so that all page requests use the same snapshot. This does have the same problem that non-with hold cursors had with long-running transactions, so the use of idle_in_transaction_session_timeout is recommended. Limit/offset and where: It is possible to use limit/offset with a where restriction that only returns rows after the previous last row returned based on the result
131-1	38493-38504	transaction	
131-2	38504-38505	,	
131-3	38506-38508	so	
131-4	38509-38513	that	
131-5	38514-38517	all	
131-6	38518-38522	page	
131-7	38523-38531	requests	
131-8	38532-38535	use	
131-9	38536-38539	the	
131-10	38540-38544	same	
131-11	38545-38553	snapshot	
131-12	38553-38554	.	
131-13	38555-38559	This	
131-14	38560-38564	does	
131-15	38565-38569	have	
131-16	38570-38573	the	
131-17	38574-38578	same	
131-18	38579-38586	problem	
131-19	38587-38591	that	
131-20	38592-38600	non-with	
131-21	38601-38605	hold	
131-22	38606-38613	cursors	
131-23	38614-38617	had	
131-24	38618-38622	with	
131-25	38623-38635	long-running	
131-26	38636-38648	transactions	
131-27	38648-38649	,	
131-28	38650-38652	so	
131-29	38653-38656	the	
131-30	38657-38660	use	
131-31	38661-38663	of	
131-32	38664-38699	idle_in_transaction_session_timeout	
131-33	38700-38702	is	
131-34	38703-38714	recommended	
131-35	38714-38715	.	
131-36	38716-38721	Limit	
131-37	38721-38722	/	
131-38	38722-38728	offset	
131-39	38729-38732	and	
131-40	38733-38738	where	
131-41	38738-38739	:	
131-42	38740-38742	It	
131-43	38743-38745	is	
131-44	38746-38754	possible	
131-45	38755-38757	to	
131-46	38758-38761	use	
131-47	38762-38767	limit	
131-48	38767-38768	/	
131-49	38768-38774	offset	
131-50	38775-38779	with	
131-51	38780-38781	a	
131-52	38782-38787	where	
131-53	38788-38799	restriction	
131-54	38800-38804	that	
131-55	38805-38809	only	
131-56	38810-38817	returns	
131-57	38818-38822	rows	
131-58	38823-38828	after	
131-59	38829-38832	the	
131-60	38833-38841	previous	
131-61	38842-38846	last	
131-62	38847-38850	row	
131-63	38851-38859	returned	
131-64	38860-38865	based	
131-65	38866-38868	on	
131-66	38869-38872	the	
131-67	38873-38879	result	

#Text=set ordering, or before the previous first row returned for previous page result sets. This avoids the duplicate/missing row problem of #4 without requiring a transaction to remain open. These blog entries (1, 2) have more details about this method. One optimization to reduce query requests is to fetch a large page range in the application, display smaller page ranges to the user as requested, and request more page ranges as needed.
132-1	38880-38883	set	
132-2	38884-38892	ordering	
132-3	38892-38893	,	
132-4	38894-38896	or	
132-5	38897-38903	before	
132-6	38904-38907	the	
132-7	38908-38916	previous	
132-8	38917-38922	first	
132-9	38923-38926	row	
132-10	38927-38935	returned	
132-11	38936-38939	for	
132-12	38940-38948	previous	
132-13	38949-38953	page	
132-14	38954-38960	result	
132-15	38961-38965	sets	
132-16	38965-38966	.	
132-17	38967-38971	This	
132-18	38972-38978	avoids	
132-19	38979-38982	the	
132-20	38983-38992	duplicate	
132-21	38992-38993	/	
132-22	38993-39000	missing	
132-23	39001-39004	row	
132-24	39005-39012	problem	
132-25	39013-39015	of	
132-26	39016-39018	#4	
132-27	39019-39026	without	
132-28	39027-39036	requiring	
132-29	39037-39038	a	
132-30	39039-39050	transaction	
132-31	39051-39053	to	
132-32	39054-39060	remain	
132-33	39061-39065	open	
132-34	39065-39066	.	
132-35	39067-39072	These	
132-36	39073-39077	blog	
132-37	39078-39085	entries	
132-38	39086-39087	(	
132-39	39087-39088	1	
132-40	39088-39089	,	
132-41	39090-39091	2	
132-42	39091-39092	)	
132-43	39093-39097	have	
132-44	39098-39102	more	
132-45	39103-39110	details	
132-46	39111-39116	about	
132-47	39117-39121	this	
132-48	39122-39128	method	
132-49	39128-39129	.	
132-50	39130-39133	One	
132-51	39134-39146	optimization	
132-52	39147-39149	to	
132-53	39150-39156	reduce	
132-54	39157-39162	query	
132-55	39163-39171	requests	
132-56	39172-39174	is	
132-57	39175-39177	to	
132-58	39178-39183	fetch	
132-59	39184-39185	a	
132-60	39186-39191	large	
132-61	39192-39196	page	
132-62	39197-39202	range	
132-63	39203-39205	in	
132-64	39206-39209	the	
132-65	39210-39221	application	
132-66	39221-39222	,	
132-67	39223-39230	display	
132-68	39231-39238	smaller	
132-69	39239-39243	page	
132-70	39244-39250	ranges	
132-71	39251-39253	to	
132-72	39254-39257	the	
132-73	39258-39262	user	
132-74	39263-39265	as	
132-75	39266-39275	requested	
132-76	39275-39276	,	
132-77	39277-39280	and	
132-78	39281-39288	request	
132-79	39289-39293	more	
132-80	39294-39298	page	
132-81	39299-39305	ranges	
132-82	39306-39308	as	
132-83	39309-39315	needed	
132-84	39315-39316	.	

#Text=One other thing people expect from pagination is an estimate of the number of matches. While you can run count(&ast) to find the number of matches, this can be very inefficient. A more creative approach is to use the optimizer's statistics as an estimate, since it already maintains statistics to generate efficient plans.
133-1	39317-39320	One	
133-2	39321-39326	other	
133-3	39327-39332	thing	
133-4	39333-39339	people	
133-5	39340-39346	expect	
133-6	39347-39351	from	
133-7	39352-39362	pagination	
133-8	39363-39365	is	
133-9	39366-39368	an	
133-10	39369-39377	estimate	
133-11	39378-39380	of	
133-12	39381-39384	the	
133-13	39385-39391	number	
133-14	39392-39394	of	
133-15	39395-39402	matches	
133-16	39402-39403	.	
133-17	39404-39409	While	
133-18	39410-39413	you	
133-19	39414-39417	can	
133-20	39418-39421	run	
133-21	39422-39427	count	
133-22	39427-39428	(	
133-23	39428-39429	&	
133-24	39429-39432	ast	
133-25	39432-39433	)	
133-26	39434-39436	to	
133-27	39437-39441	find	
133-28	39442-39445	the	
133-29	39446-39452	number	
133-30	39453-39455	of	
133-31	39456-39463	matches	
133-32	39463-39464	,	
133-33	39465-39469	this	
133-34	39470-39473	can	
133-35	39474-39476	be	
133-36	39477-39481	very	
133-37	39482-39493	inefficient	
133-38	39493-39494	.	
133-39	39495-39496	A	
133-40	39497-39501	more	
133-41	39502-39510	creative	
133-42	39511-39519	approach	
133-43	39520-39522	is	
133-44	39523-39525	to	
133-45	39526-39529	use	
133-46	39530-39533	the	
133-47	39534-39545	optimizer's	
133-48	39546-39556	statistics	
133-49	39557-39559	as	
133-50	39560-39562	an	
133-51	39563-39571	estimate	
133-52	39571-39572	,	
133-53	39573-39578	since	
133-54	39579-39581	it	
133-55	39582-39589	already	
133-56	39590-39599	maintains	
133-57	39600-39610	statistics	
133-58	39611-39613	to	
133-59	39614-39622	generate	
133-60	39623-39632	efficient	
133-61	39633-39638	plans	
133-62	39638-39639	.	

#Text=For example, if you create this function: CREATE OR REPLACE FUNCTION row_count_estimate(query TEXT) RETURNS TEXT AS $$ DECLARE str TEXT; row_count INTEGER; BEGIN
134-1	39640-39643	For	
134-2	39644-39651	example	
134-3	39651-39652	,	
134-4	39653-39655	if	
134-5	39656-39659	you	
134-6	39660-39666	create	
134-7	39667-39671	this	
134-8	39672-39680	function	
134-9	39680-39681	:	
134-10	39682-39688	CREATE	
134-11	39689-39691	OR	
134-12	39692-39699	REPLACE	
134-13	39700-39708	FUNCTION	
134-14	39709-39727	row_count_estimate	
134-15	39727-39728	(	
134-16	39728-39733	query	
134-17	39734-39738	TEXT	
134-18	39738-39739	)	
134-19	39740-39747	RETURNS	
134-20	39748-39752	TEXT	
134-21	39753-39755	AS	
134-22	39756-39757	$	
134-23	39757-39758	$	
134-24	39759-39766	DECLARE	
134-25	39767-39770	str	
134-26	39771-39775	TEXT	
134-27	39775-39776	;	
134-28	39777-39786	row_count	
134-29	39787-39794	INTEGER	
134-30	39794-39795	;	
134-31	39796-39801	BEGIN	

#Text=-- get just the first row EXECUTE $a$EXPLAIN $a$ || query INTO str; -- extract the row value SELECT substring(substring(str FROM ' rows=[0-9]+') FROM 7) INTO row_count;
135-1	39802-39803	-	
135-2	39803-39804	-	
135-3	39805-39808	get	
135-4	39809-39813	just	
135-5	39814-39817	the	
135-6	39818-39823	first	
135-7	39824-39827	row	
135-8	39828-39835	EXECUTE	
135-9	39836-39837	$	
135-10	39837-39838	a	
135-11	39838-39839	$	
135-12	39839-39846	EXPLAIN	
135-13	39847-39848	$	
135-14	39848-39849	a	
135-15	39849-39850	$	
135-16	39851-39852	|	
135-17	39852-39853	|	
135-18	39854-39859	query	
135-19	39860-39864	INTO	
135-20	39865-39868	str	
135-21	39868-39869	;	
135-22	39870-39871	-	
135-23	39871-39872	-	
135-24	39873-39880	extract	
135-25	39881-39884	the	
135-26	39885-39888	row	
135-27	39889-39894	value	
135-28	39895-39901	SELECT	
135-29	39902-39911	substring	
135-30	39911-39912	(	
135-31	39912-39921	substring	
135-32	39921-39922	(	
135-33	39922-39925	str	
135-34	39926-39930	FROM	
135-35	39931-39932	'	
135-36	39933-39937	rows	
135-37	39937-39938	=	
135-38	39938-39939	[	
135-39	39939-39940	0	
135-40	39940-39941	-	
135-41	39941-39942	9	
135-42	39942-39943	]	
135-43	39943-39944	+	
135-44	39944-39945	'	
135-45	39945-39946	)	
135-46	39947-39951	FROM	
135-47	39952-39953	7	
135-48	39953-39954	)	
135-49	39955-39959	INTO	
135-50	39960-39969	row_count	
135-51	39969-39970	;	

#Text=RETURN row_count; END; LANGUAGE plpgsql; you can use it to estimate the number of rows in a result set. (Don't specify limit/offset since we want the total count.)
136-1	39971-39977	RETURN	
136-2	39978-39987	row_count	
136-3	39987-39988	;	
136-4	39989-39992	END	
136-5	39992-39993	;	
136-6	39994-40002	LANGUAGE	
136-7	40003-40010	plpgsql	
136-8	40010-40011	;	
136-9	40012-40015	you	
136-10	40016-40019	can	
136-11	40020-40023	use	
136-12	40024-40026	it	
136-13	40027-40029	to	
136-14	40030-40038	estimate	
136-15	40039-40042	the	
136-16	40043-40049	number	
136-17	40050-40052	of	
136-18	40053-40057	rows	
136-19	40058-40060	in	
136-20	40061-40062	a	
136-21	40063-40069	result	
136-22	40070-40073	set	
136-23	40073-40074	.	
136-24	40075-40076	(	
136-25	40076-40081	Don't	
136-26	40082-40089	specify	
136-27	40090-40095	limit	
136-28	40095-40096	/	
136-29	40096-40102	offset	
136-30	40103-40108	since	
136-31	40109-40111	we	
136-32	40112-40116	want	
136-33	40117-40120	the	
136-34	40121-40126	total	
136-35	40127-40132	count	
136-36	40132-40133	.	
136-37	40133-40134	)	

#Text=SELECT row_count_estimate('SELECT * FROM product WHERE name LIKE ''a%'''); row_count_estimate -------------------- To improve the accuracy of the estimates, you can increase the frequency of statistics updates by modifying autovacuum's analyze settings (autovacuum_analyze_) either at the
137-1	40135-40141	SELECT	
137-2	40142-40160	row_count_estimate	
137-3	40160-40161	(	
137-4	40161-40162	'	
137-5	40162-40168	SELECT	
137-6	40169-40170	*	
137-7	40171-40175	FROM	
137-8	40176-40183	product	
137-9	40184-40189	WHERE	
137-10	40190-40194	name	
137-11	40195-40199	LIKE	
137-12	40200-40201	'	
137-13	40201-40202	'	
137-14	40202-40203	a	
137-15	40203-40204	%	
137-16	40204-40205	'	
137-17	40205-40206	'	
137-18	40206-40207	'	
137-19	40207-40208	)	
137-20	40208-40209	;	
137-21	40210-40228	row_count_estimate	
137-22	40229-40230	-	
137-23	40230-40231	-	
137-24	40231-40232	-	
137-25	40232-40233	-	
137-26	40233-40234	-	
137-27	40234-40235	-	
137-28	40235-40236	-	
137-29	40236-40237	-	
137-30	40237-40238	-	
137-31	40238-40239	-	
137-32	40239-40240	-	
137-33	40240-40241	-	
137-34	40241-40242	-	
137-35	40242-40243	-	
137-36	40243-40244	-	
137-37	40244-40245	-	
137-38	40245-40246	-	
137-39	40246-40247	-	
137-40	40247-40248	-	
137-41	40248-40249	-	
137-42	40250-40252	To	
137-43	40253-40260	improve	
137-44	40261-40264	the	
137-45	40265-40273	accuracy	
137-46	40274-40276	of	
137-47	40277-40280	the	
137-48	40281-40290	estimates	
137-49	40290-40291	,	
137-50	40292-40295	you	
137-51	40296-40299	can	
137-52	40300-40308	increase	
137-53	40309-40312	the	
137-54	40313-40322	frequency	
137-55	40323-40325	of	
137-56	40326-40336	statistics	
137-57	40337-40344	updates	
137-58	40345-40347	by	
137-59	40348-40357	modifying	
137-60	40358-40370	autovacuum's	
137-61	40371-40378	analyze	
137-62	40379-40387	settings	
137-63	40388-40389	(	
137-64	40389-40407	autovacuum_analyze	
137-65	40407-40408	_	
137-66	40408-40409	)	
137-67	40410-40416	either	
137-68	40417-40419	at	
137-69	40420-40423	the	

#Text=cluster or per-table level. You can also run analyze manually. You can also increase the granularity of statistics, which can improve estimates. This can also be set a the cluster or per-table level. A creative option is
138-1	40424-40431	cluster	
138-2	40432-40434	or	
138-3	40435-40444	per-table	
138-4	40445-40450	level	
138-5	40450-40451	.	
138-6	40452-40455	You	
138-7	40456-40459	can	
138-8	40460-40464	also	
138-9	40465-40468	run	
138-10	40469-40476	analyze	
138-11	40477-40485	manually	
138-12	40485-40486	.	
138-13	40487-40490	You	
138-14	40491-40494	can	
138-15	40495-40499	also	
138-16	40500-40508	increase	
138-17	40509-40512	the	
138-18	40513-40524	granularity	
138-19	40525-40527	of	
138-20	40528-40538	statistics	
138-21	40538-40539	,	
138-22	40540-40545	which	
138-23	40546-40549	can	
138-24	40550-40557	improve	
138-25	40558-40567	estimates	
138-26	40567-40568	.	
138-27	40569-40573	This	
138-28	40574-40577	can	
138-29	40578-40582	also	
138-30	40583-40585	be	
138-31	40586-40589	set	
138-32	40590-40591	a	
138-33	40592-40595	the	
138-34	40596-40603	cluster	
138-35	40604-40606	or	
138-36	40607-40616	per-table	
138-37	40617-40622	level	
138-38	40622-40623	.	
138-39	40624-40625	A	
138-40	40626-40634	creative	
138-41	40635-40641	option	
138-42	40642-40644	is	

#Text=to get an exact row count using a count(&ast) query only if explain reports a low row count, meaning count(&ast) would be inexpensive. View or Post Comments Invalid Times Wednesday, August 5, 2020 Have you ever wondered how invalid or ambiguous times are handled by Postgres? For example, during a daylight saving time transition in the
139-1	40645-40647	to	
139-2	40648-40651	get	
139-3	40652-40654	an	
139-4	40655-40660	exact	
139-5	40661-40664	row	
139-6	40665-40670	count	
139-7	40671-40676	using	
139-8	40677-40678	a	
139-9	40679-40684	count	
139-10	40684-40685	(	
139-11	40685-40686	&	
139-12	40686-40689	ast	
139-13	40689-40690	)	
139-14	40691-40696	query	
139-15	40697-40701	only	
139-16	40702-40704	if	
139-17	40705-40712	explain	
139-18	40713-40720	reports	
139-19	40721-40722	a	
139-20	40723-40726	low	
139-21	40727-40730	row	
139-22	40731-40736	count	
139-23	40736-40737	,	
139-24	40738-40745	meaning	
139-25	40746-40751	count	
139-26	40751-40752	(	
139-27	40752-40753	&	
139-28	40753-40756	ast	
139-29	40756-40757	)	
139-30	40758-40763	would	
139-31	40764-40766	be	
139-32	40767-40778	inexpensive	
139-33	40778-40779	.	
139-34	40780-40784	View	
139-35	40785-40787	or	
139-36	40788-40792	Post	
139-37	40793-40801	Comments	
139-38	40802-40809	Invalid	
139-39	40810-40815	Times	
139-40	40816-40825	Wednesday	
139-41	40825-40826	,	
139-42	40827-40833	August	
139-43	40834-40835	5	
139-44	40835-40836	,	
139-45	40837-40841	2020	
139-46	40842-40846	Have	
139-47	40847-40850	you	
139-48	40851-40855	ever	
139-49	40856-40864	wondered	
139-50	40865-40868	how	
139-51	40869-40876	invalid	
139-52	40877-40879	or	
139-53	40880-40889	ambiguous	
139-54	40890-40895	times	
139-55	40896-40899	are	
139-56	40900-40907	handled	
139-57	40908-40910	by	
139-58	40911-40919	Postgres	
139-59	40919-40920	?	
139-60	40921-40924	For	
139-61	40925-40932	example	
139-62	40932-40933	,	
139-63	40934-40940	during	
139-64	40941-40942	a	
139-65	40943-40951	daylight	
139-66	40952-40958	saving	
139-67	40959-40963	time	
139-68	40964-40974	transition	
139-69	40975-40977	in	
139-70	40978-40981	the	

#Text=usa, time switches either from 2am to 3am, or from 2am back to 1am. On a fall-forward day (the former), how would 2:30am be represented? Is 1:30am during a fall-back day represented as the first or second 1:30am of that day? This email thread explains the problem, and this patch documents the behavior.
140-1	40982-40985	usa	
140-2	40985-40986	,	
140-3	40987-40991	time	
140-4	40992-41000	switches	
140-5	41001-41007	either	
140-6	41008-41012	from	
140-7	41013-41016	2am	
140-8	41017-41019	to	
140-9	41020-41023	3am	
140-10	41023-41024	,	
140-11	41025-41027	or	
140-12	41028-41032	from	
140-13	41033-41036	2am	
140-14	41037-41041	back	
140-15	41042-41044	to	
140-16	41045-41048	1am	
140-17	41048-41049	.	
140-18	41050-41052	On	
140-19	41053-41054	a	
140-20	41055-41067	fall-forward	
140-21	41068-41071	day	
140-22	41072-41073	(	
140-23	41073-41076	the	
140-24	41077-41083	former	
140-25	41083-41084	)	
140-26	41084-41085	,	
140-27	41086-41089	how	
140-28	41090-41095	would	
140-29	41096-41097	2	
140-30	41097-41098	:	
140-31	41098-41102	30am	
140-32	41103-41105	be	
140-33	41106-41117	represented	
140-34	41117-41118	?	
140-35	41119-41121	Is	
140-36	41122-41123	1	
140-37	41123-41124	:	
140-38	41124-41128	30am	
140-39	41129-41135	during	
140-40	41136-41137	a	
140-41	41138-41147	fall-back	
140-42	41148-41151	day	
140-43	41152-41163	represented	
140-44	41164-41166	as	
140-45	41167-41170	the	
140-46	41171-41176	first	
140-47	41177-41179	or	
140-48	41180-41186	second	
140-49	41187-41188	1	
140-50	41188-41189	:	
140-51	41189-41193	30am	
140-52	41194-41196	of	
140-53	41197-41201	that	
140-54	41202-41205	day	
140-55	41205-41206	?	
140-56	41207-41211	This	
140-57	41212-41217	email	
140-58	41218-41224	thread	
140-59	41225-41233	explains	
140-60	41234-41237	the	
140-61	41238-41245	problem	
140-62	41245-41246	,	
140-63	41247-41250	and	
140-64	41251-41255	this	
140-65	41256-41261	patch	
140-66	41262-41271	documents	
140-67	41272-41275	the	
140-68	41276-41284	behavior	
140-69	41284-41285	.	

#Text=(November 4, 2018 was a "fall back" date in the usa.) The original poster, Michael Davidson, was showing the first query, and Tom Lane was saying you would need to use one of the two later queries to qualify the 1am time: SHOW TIME ZONE;
141-1	41286-41287	(	
141-2	41287-41295	November	
141-3	41296-41297	4	
141-4	41297-41298	,	
141-5	41299-41303	2018	
141-6	41304-41307	was	
141-7	41308-41309	a	
141-8	41310-41311	"	
141-9	41311-41315	fall	
141-10	41316-41320	back	
141-11	41320-41321	"	
141-12	41322-41326	date	
141-13	41327-41329	in	
141-14	41330-41333	the	
141-15	41334-41337	usa	
141-16	41337-41338	.	
141-17	41338-41339	)	
141-18	41340-41343	The	
141-19	41344-41352	original	
141-20	41353-41359	poster	
141-21	41359-41360	,	
141-22	41361-41368	Michael	
141-23	41369-41377	Davidson	
141-24	41377-41378	,	
141-25	41379-41382	was	
141-26	41383-41390	showing	
141-27	41391-41394	the	
141-28	41395-41400	first	
141-29	41401-41406	query	
141-30	41406-41407	,	
141-31	41408-41411	and	
141-32	41412-41415	Tom	
141-33	41416-41420	Lane	
141-34	41421-41424	was	
141-35	41425-41431	saying	
141-36	41432-41435	you	
141-37	41436-41441	would	
141-38	41442-41446	need	
141-39	41447-41449	to	
141-40	41450-41453	use	
141-41	41454-41457	one	
141-42	41458-41460	of	
141-43	41461-41464	the	
141-44	41465-41468	two	
141-45	41469-41474	later	
141-46	41475-41482	queries	
141-47	41483-41485	to	
141-48	41486-41493	qualify	
141-49	41494-41497	the	
141-50	41498-41501	1am	
141-51	41502-41506	time	
141-52	41506-41507	:	
141-53	41508-41512	SHOW	
141-54	41513-41517	TIME	
141-55	41518-41522	ZONE	
141-56	41522-41523	;	

#Text=TimeZone ------------------ America/New_York SELECT '2018-11-04 01:00:00'::timestamp WITH TIME ZONE; timestamptz
142-1	41524-41532	TimeZone	
142-2	41533-41534	-	
142-3	41534-41535	-	
142-4	41535-41536	-	
142-5	41536-41537	-	
142-6	41537-41538	-	
142-7	41538-41539	-	
142-8	41539-41540	-	
142-9	41540-41541	-	
142-10	41541-41542	-	
142-11	41542-41543	-	
142-12	41543-41544	-	
142-13	41544-41545	-	
142-14	41545-41546	-	
142-15	41546-41547	-	
142-16	41547-41548	-	
142-17	41548-41549	-	
142-18	41549-41550	-	
142-19	41550-41551	-	
142-20	41552-41559	America	
142-21	41559-41560	/	
142-22	41560-41568	New_York	
142-23	41569-41575	SELECT	
142-24	41576-41577	'	
142-25	41577-41581	2018	
142-26	41581-41582	-	
142-27	41582-41584	11	
142-28	41584-41585	-	
142-29	41585-41587	04	
142-30	41588-41590	01	
142-31	41590-41591	:	
142-32	41591-41593	00	
142-33	41593-41594	:	
142-34	41594-41596	00	
142-35	41596-41597	'	
142-36	41597-41598	:	
142-37	41598-41599	:	
142-38	41599-41608	timestamp	
142-39	41609-41613	WITH	
142-40	41614-41618	TIME	
142-41	41619-41623	ZONE	
142-42	41623-41624	;	
142-43	41625-41636	timestamptz	

#Text=------------------------ 2018-11-04 01:00:00-05 SELECT '2018-11-04 01:00:00 EST'::timestamp WITH TIME ZONE; timestamptz
143-1	41637-41638	-	
143-2	41638-41639	-	
143-3	41639-41640	-	
143-4	41640-41641	-	
143-5	41641-41642	-	
143-6	41642-41643	-	
143-7	41643-41644	-	
143-8	41644-41645	-	
143-9	41645-41646	-	
143-10	41646-41647	-	
143-11	41647-41648	-	
143-12	41648-41649	-	
143-13	41649-41650	-	
143-14	41650-41651	-	
143-15	41651-41652	-	
143-16	41652-41653	-	
143-17	41653-41654	-	
143-18	41654-41655	-	
143-19	41655-41656	-	
143-20	41656-41657	-	
143-21	41657-41658	-	
143-22	41658-41659	-	
143-23	41659-41660	-	
143-24	41660-41661	-	
143-25	41662-41666	2018	
143-26	41666-41667	-	
143-27	41667-41669	11	
143-28	41669-41670	-	
143-29	41670-41672	04	
143-30	41673-41675	01	
143-31	41675-41676	:	
143-32	41676-41678	00	
143-33	41678-41679	:	
143-34	41679-41681	00	
143-35	41681-41682	-	
143-36	41682-41684	05	
143-37	41685-41691	SELECT	
143-38	41692-41693	'	
143-39	41693-41697	2018	
143-40	41697-41698	-	
143-41	41698-41700	11	
143-42	41700-41701	-	
143-43	41701-41703	04	
143-44	41704-41706	01	
143-45	41706-41707	:	
143-46	41707-41709	00	
143-47	41709-41710	:	
143-48	41710-41712	00	
143-49	41713-41716	EST	
143-50	41716-41717	'	
143-51	41717-41718	:	
143-52	41718-41719	:	
143-53	41719-41728	timestamp	
143-54	41729-41733	WITH	
143-55	41734-41738	TIME	
143-56	41739-41743	ZONE	
143-57	41743-41744	;	
143-58	41745-41756	timestamptz	

#Text=------------------------ 2018-11-04 01:00:00-05 SELECT '2018-11-04 01:00:00 EDT'::timestamp WITH TIME ZONE; timestamptz
144-1	41757-41758	-	
144-2	41758-41759	-	
144-3	41759-41760	-	
144-4	41760-41761	-	
144-5	41761-41762	-	
144-6	41762-41763	-	
144-7	41763-41764	-	
144-8	41764-41765	-	
144-9	41765-41766	-	
144-10	41766-41767	-	
144-11	41767-41768	-	
144-12	41768-41769	-	
144-13	41769-41770	-	
144-14	41770-41771	-	
144-15	41771-41772	-	
144-16	41772-41773	-	
144-17	41773-41774	-	
144-18	41774-41775	-	
144-19	41775-41776	-	
144-20	41776-41777	-	
144-21	41777-41778	-	
144-22	41778-41779	-	
144-23	41779-41780	-	
144-24	41780-41781	-	
144-25	41782-41786	2018	
144-26	41786-41787	-	
144-27	41787-41789	11	
144-28	41789-41790	-	
144-29	41790-41792	04	
144-30	41793-41795	01	
144-31	41795-41796	:	
144-32	41796-41798	00	
144-33	41798-41799	:	
144-34	41799-41801	00	
144-35	41801-41802	-	
144-36	41802-41804	05	
144-37	41805-41811	SELECT	
144-38	41812-41813	'	
144-39	41813-41817	2018	
144-40	41817-41818	-	
144-41	41818-41820	11	
144-42	41820-41821	-	
144-43	41821-41823	04	
144-44	41824-41826	01	
144-45	41826-41827	:	
144-46	41827-41829	00	
144-47	41829-41830	:	
144-48	41830-41832	00	
144-49	41833-41836	EDT	
144-50	41836-41837	'	
144-51	41837-41838	:	
144-52	41838-41839	:	
144-53	41839-41848	timestamp	
144-54	41849-41853	WITH	
144-55	41854-41858	TIME	
144-56	41859-41863	ZONE	
144-57	41863-41864	;	
144-58	41865-41876	timestamptz	

#Text=------------------------ 2018-11-04 01:00:00-04 I am not sure how to specify this for time zones that don't have daylight/non-daylight saving time abbreviations — I suppose utc offsets would need to be used, e.g.:
145-1	41877-41878	-	
145-2	41878-41879	-	
145-3	41879-41880	-	
145-4	41880-41881	-	
145-5	41881-41882	-	
145-6	41882-41883	-	
145-7	41883-41884	-	
145-8	41884-41885	-	
145-9	41885-41886	-	
145-10	41886-41887	-	
145-11	41887-41888	-	
145-12	41888-41889	-	
145-13	41889-41890	-	
145-14	41890-41891	-	
145-15	41891-41892	-	
145-16	41892-41893	-	
145-17	41893-41894	-	
145-18	41894-41895	-	
145-19	41895-41896	-	
145-20	41896-41897	-	
145-21	41897-41898	-	
145-22	41898-41899	-	
145-23	41899-41900	-	
145-24	41900-41901	-	
145-25	41902-41906	2018	
145-26	41906-41907	-	
145-27	41907-41909	11	
145-28	41909-41910	-	
145-29	41910-41912	04	
145-30	41913-41915	01	
145-31	41915-41916	:	
145-32	41916-41918	00	
145-33	41918-41919	:	
145-34	41919-41921	00	
145-35	41921-41922	-	
145-36	41922-41924	04	
145-37	41925-41926	I	
145-38	41927-41929	am	
145-39	41930-41933	not	
145-40	41934-41938	sure	
145-41	41939-41942	how	
145-42	41943-41945	to	
145-43	41946-41953	specify	
145-44	41954-41958	this	
145-45	41959-41962	for	
145-46	41963-41967	time	
145-47	41968-41973	zones	
145-48	41974-41978	that	
145-49	41979-41984	don't	
145-50	41985-41989	have	
145-51	41990-41998	daylight	
145-52	41998-41999	/	
145-53	41999-42011	non-daylight	
145-54	42012-42018	saving	
145-55	42019-42023	time	
145-56	42024-42037	abbreviations	
145-57	42038-42039	—	
145-58	42040-42041	I	
145-59	42042-42049	suppose	
145-60	42050-42053	utc	
145-61	42054-42061	offsets	
145-62	42062-42067	would	
145-63	42068-42072	need	
145-64	42073-42075	to	
145-65	42076-42078	be	
145-66	42079-42083	used	
145-67	42083-42084	,	
145-68	42085-42088	e.g	
145-69	42088-42089	.	
145-70	42089-42090	:	

#Text=SELECT '2018-11-04 01:00:00-05'::timestamp WITH TIME ZONE; timestamptz ------------------------ 2018-11-04 01:00:00-05 Interestingly, in this case the time zone abbreviation contains more information than the more generic time zone string 'America/New_York'.
146-1	42091-42097	SELECT	
146-2	42098-42099	'	
146-3	42099-42103	2018	
146-4	42103-42104	-	
146-5	42104-42106	11	
146-6	42106-42107	-	
146-7	42107-42109	04	
146-8	42110-42112	01	
146-9	42112-42113	:	
146-10	42113-42115	00	
146-11	42115-42116	:	
146-12	42116-42118	00	
146-13	42118-42119	-	
146-14	42119-42121	05	
146-15	42121-42122	'	
146-16	42122-42123	:	
146-17	42123-42124	:	
146-18	42124-42133	timestamp	
146-19	42134-42138	WITH	
146-20	42139-42143	TIME	
146-21	42144-42148	ZONE	
146-22	42148-42149	;	
146-23	42150-42161	timestamptz	
146-24	42162-42163	-	
146-25	42163-42164	-	
146-26	42164-42165	-	
146-27	42165-42166	-	
146-28	42166-42167	-	
146-29	42167-42168	-	
146-30	42168-42169	-	
146-31	42169-42170	-	
146-32	42170-42171	-	
146-33	42171-42172	-	
146-34	42172-42173	-	
146-35	42173-42174	-	
146-36	42174-42175	-	
146-37	42175-42176	-	
146-38	42176-42177	-	
146-39	42177-42178	-	
146-40	42178-42179	-	
146-41	42179-42180	-	
146-42	42180-42181	-	
146-43	42181-42182	-	
146-44	42182-42183	-	
146-45	42183-42184	-	
146-46	42184-42185	-	
146-47	42185-42186	-	
146-48	42187-42191	2018	
146-49	42191-42192	-	
146-50	42192-42194	11	
146-51	42194-42195	-	
146-52	42195-42197	04	
146-53	42198-42200	01	
146-54	42200-42201	:	
146-55	42201-42203	00	
146-56	42203-42204	:	
146-57	42204-42206	00	
146-58	42206-42207	-	
146-59	42207-42209	05	
146-60	42210-42223	Interestingly	
146-61	42223-42224	,	
146-62	42225-42227	in	
146-63	42228-42232	this	
146-64	42233-42237	case	
146-65	42238-42241	the	
146-66	42242-42246	time	
146-67	42247-42251	zone	
146-68	42252-42264	abbreviation	
146-69	42265-42273	contains	
146-70	42274-42278	more	
146-71	42279-42290	information	
146-72	42291-42295	than	
146-73	42296-42299	the	
146-74	42300-42304	more	
146-75	42305-42312	generic	
146-76	42313-42317	time	
146-77	42318-42322	zone	
146-78	42323-42329	string	
146-79	42330-42331	'	
146-80	42331-42338	America	
146-81	42338-42339	/	
146-82	42339-42347	New_York	
146-83	42347-42348	'	
146-84	42348-42349	.	

#Text=View or Post Comments Differences Between Dates Monday, August 3, 2020 What is the difference between two dates? You would think there was one answer, but there isn't. You can give an answer in calendar terms (years/months/days), the number of days, or the number of
147-1	42350-42354	View	
147-2	42355-42357	or	
147-3	42358-42362	Post	
147-4	42363-42371	Comments	
147-5	42372-42383	Differences	
147-6	42384-42391	Between	
147-7	42392-42397	Dates	
147-8	42398-42404	Monday	
147-9	42404-42405	,	
147-10	42406-42412	August	
147-11	42413-42414	3	
147-12	42414-42415	,	
147-13	42416-42420	2020	
147-14	42421-42425	What	
147-15	42426-42428	is	
147-16	42429-42432	the	
147-17	42433-42443	difference	
147-18	42444-42451	between	
147-19	42452-42455	two	
147-20	42456-42461	dates	
147-21	42461-42462	?	
147-22	42463-42466	You	
147-23	42467-42472	would	
147-24	42473-42478	think	
147-25	42479-42484	there	
147-26	42485-42488	was	
147-27	42489-42492	one	
147-28	42493-42499	answer	
147-29	42499-42500	,	
147-30	42501-42504	but	
147-31	42505-42510	there	
147-32	42511-42516	isn't	
147-33	42516-42517	.	
147-34	42518-42521	You	
147-35	42522-42525	can	
147-36	42526-42530	give	
147-37	42531-42533	an	
147-38	42534-42540	answer	
147-39	42541-42543	in	
147-40	42544-42552	calendar	
147-41	42553-42558	terms	
147-42	42559-42560	(	
147-43	42560-42565	years	
147-44	42565-42566	/	
147-45	42566-42572	months	
147-46	42572-42573	/	
147-47	42573-42577	days	
147-48	42577-42578	)	
147-49	42578-42579	,	
147-50	42580-42583	the	
147-51	42584-42590	number	
147-52	42591-42593	of	
147-53	42594-42598	days	
147-54	42598-42599	,	
147-55	42600-42602	or	
147-56	42603-42606	the	
147-57	42607-42613	number	
147-58	42614-42616	of	

#Text=seconds. Postgres offers all of these options: SELECT age('2019-12-25', '2018-06-01'); age -----------------------
148-1	42617-42624	seconds	
148-2	42624-42625	.	
148-3	42626-42634	Postgres	
148-4	42635-42641	offers	
148-5	42642-42645	all	
148-6	42646-42648	of	
148-7	42649-42654	these	
148-8	42655-42662	options	
148-9	42662-42663	:	
148-10	42664-42670	SELECT	
148-11	42671-42674	age	
148-12	42674-42675	(	
148-13	42675-42676	'	
148-14	42676-42680	2019	
148-15	42680-42681	-	
148-16	42681-42683	12	
148-17	42683-42684	-	
148-18	42684-42686	25	
148-19	42686-42687	'	
148-20	42687-42688	,	
148-21	42689-42690	'	
148-22	42690-42694	2018	
148-23	42694-42695	-	
148-24	42695-42697	06	
148-25	42697-42698	-	
148-26	42698-42700	01	
148-27	42700-42701	'	
148-28	42701-42702	)	
148-29	42702-42703	;	
148-30	42704-42707	age	
148-31	42708-42709	-	
148-32	42709-42710	-	
148-33	42710-42711	-	
148-34	42711-42712	-	
148-35	42712-42713	-	
148-36	42713-42714	-	
148-37	42714-42715	-	
148-38	42715-42716	-	
148-39	42716-42717	-	
148-40	42717-42718	-	
148-41	42718-42719	-	
148-42	42719-42720	-	
148-43	42720-42721	-	
148-44	42721-42722	-	
148-45	42722-42723	-	
148-46	42723-42724	-	
148-47	42724-42725	-	
148-48	42725-42726	-	
148-49	42726-42727	-	
148-50	42727-42728	-	
148-51	42728-42729	-	
148-52	42729-42730	-	
148-53	42730-42731	-	

#Text=1 year 6 mons 24 days SELECT '2019-12-25'::timestamp - '2018-06-01'::timestamp; ?column? ---------- 572 days
149-1	42732-42733	1	
149-2	42734-42738	year	
149-3	42739-42740	6	
149-4	42741-42745	mons	
149-5	42746-42748	24	
149-6	42749-42753	days	
149-7	42754-42760	SELECT	
149-8	42761-42762	'	
149-9	42762-42766	2019	
149-10	42766-42767	-	
149-11	42767-42769	12	
149-12	42769-42770	-	
149-13	42770-42772	25	
149-14	42772-42773	'	
149-15	42773-42774	:	
149-16	42774-42775	:	
149-17	42775-42784	timestamp	
149-18	42785-42786	-	
149-19	42786-42787	 	
149-20	42787-42788	'	
149-21	42788-42792	2018	
149-22	42792-42793	-	
149-23	42793-42795	06	
149-24	42795-42796	-	
149-25	42796-42798	01	
149-26	42798-42799	'	
149-27	42799-42800	:	
149-28	42800-42801	:	
149-29	42801-42810	timestamp	
149-30	42810-42811	;	
149-31	42812-42813	?	
149-32	42813-42819	column	
149-33	42819-42820	?	
149-34	42821-42822	-	
149-35	42822-42823	-	
149-36	42823-42824	-	
149-37	42824-42825	-	
149-38	42825-42826	-	
149-39	42826-42827	-	
149-40	42827-42828	-	
149-41	42828-42829	-	
149-42	42829-42830	-	
149-43	42830-42831	-	
149-44	42832-42835	572	
149-45	42836-42840	days	

#Text=SELECT '2019-12-25'::timestamptz - '2018-06-01'::timestamptz; ?column? ------------------- 572 days 01:00:00 SELECT '2019-12-25'::date - '2018-06-01'::date;
150-1	42841-42847	SELECT	
150-2	42848-42849	'	
150-3	42849-42853	2019	
150-4	42853-42854	-	
150-5	42854-42856	12	
150-6	42856-42857	-	
150-7	42857-42859	25	
150-8	42859-42860	'	
150-9	42860-42861	:	
150-10	42861-42862	:	
150-11	42862-42873	timestamptz	
150-12	42874-42875	-	
150-13	42875-42876	 	
150-14	42876-42877	'	
150-15	42877-42881	2018	
150-16	42881-42882	-	
150-17	42882-42884	06	
150-18	42884-42885	-	
150-19	42885-42887	01	
150-20	42887-42888	'	
150-21	42888-42889	:	
150-22	42889-42890	:	
150-23	42890-42901	timestamptz	
150-24	42901-42902	;	
150-25	42903-42904	?	
150-26	42904-42910	column	
150-27	42910-42911	?	
150-28	42912-42913	-	
150-29	42913-42914	-	
150-30	42914-42915	-	
150-31	42915-42916	-	
150-32	42916-42917	-	
150-33	42917-42918	-	
150-34	42918-42919	-	
150-35	42919-42920	-	
150-36	42920-42921	-	
150-37	42921-42922	-	
150-38	42922-42923	-	
150-39	42923-42924	-	
150-40	42924-42925	-	
150-41	42925-42926	-	
150-42	42926-42927	-	
150-43	42927-42928	-	
150-44	42928-42929	-	
150-45	42929-42930	-	
150-46	42930-42931	-	
150-47	42932-42935	572	
150-48	42936-42940	days	
150-49	42941-42943	01	
150-50	42943-42944	:	
150-51	42944-42946	00	
150-52	42946-42947	:	
150-53	42947-42949	00	
150-54	42950-42956	SELECT	
150-55	42957-42958	'	
150-56	42958-42962	2019	
150-57	42962-42963	-	
150-58	42963-42965	12	
150-59	42965-42966	-	
150-60	42966-42968	25	
150-61	42968-42969	'	
150-62	42969-42970	:	
150-63	42970-42971	:	
150-64	42971-42975	date	
150-65	42976-42977	-	
150-66	42977-42978	 	
150-67	42978-42979	'	
150-68	42979-42983	2018	
150-69	42983-42984	-	
150-70	42984-42986	06	
150-71	42986-42987	-	
150-72	42987-42989	01	
150-73	42989-42990	'	
150-74	42990-42991	:	
150-75	42991-42992	:	
150-76	42992-42996	date	
150-77	42996-42997	;	

#Text=?column? ---------- 572 SELECT EXTRACT(EPOCH FROM '2019-12-25'::timestamptz) - EXTRACT(EPOCH FROM '2018-06-01'::timestamptz);
151-1	42998-42999	?	
151-2	42999-43005	column	
151-3	43005-43006	?	
151-4	43007-43008	-	
151-5	43008-43009	-	
151-6	43009-43010	-	
151-7	43010-43011	-	
151-8	43011-43012	-	
151-9	43012-43013	-	
151-10	43013-43014	-	
151-11	43014-43015	-	
151-12	43015-43016	-	
151-13	43016-43017	-	
151-14	43018-43021	572	
151-15	43022-43028	SELECT	
151-16	43029-43036	EXTRACT	
151-17	43036-43037	(	
151-18	43037-43042	EPOCH	
151-19	43043-43047	FROM	
151-20	43048-43049	'	
151-21	43049-43053	2019	
151-22	43053-43054	-	
151-23	43054-43056	12	
151-24	43056-43057	-	
151-25	43057-43059	25	
151-26	43059-43060	'	
151-27	43060-43061	:	
151-28	43061-43062	:	
151-29	43062-43073	timestamptz	
151-30	43073-43074	)	
151-31	43075-43076	-	
151-32	43076-43077	 	
151-33	43077-43084	EXTRACT	
151-34	43084-43085	(	
151-35	43085-43090	EPOCH	
151-36	43091-43095	FROM	
151-37	43096-43097	'	
151-38	43097-43101	2018	
151-39	43101-43102	-	
151-40	43102-43104	06	
151-41	43104-43105	-	
151-42	43105-43107	01	
151-43	43107-43108	'	
151-44	43108-43109	:	
151-45	43109-43110	:	
151-46	43110-43121	timestamptz	
151-47	43121-43122	)	
151-48	43122-43123	;	

#Text=?column? ---------- 49424400 Unless you are Mr. Spock you probably can see the value in all of these methods. Age() provides the simplest option for human consumption.
152-1	43124-43125	?	
152-2	43125-43131	column	
152-3	43131-43132	?	
152-4	43133-43134	-	
152-5	43134-43135	-	
152-6	43135-43136	-	
152-7	43136-43137	-	
152-8	43137-43138	-	
152-9	43138-43139	-	
152-10	43139-43140	-	
152-11	43140-43141	-	
152-12	43141-43142	-	
152-13	43142-43143	-	
152-14	43144-43152	49424400	
152-15	43153-43159	Unless	
152-16	43160-43163	you	
152-17	43164-43167	are	
152-18	43168-43170	Mr	
152-19	43170-43171	.	
152-20	43172-43177	Spock	
152-21	43178-43181	you	
152-22	43182-43190	probably	
152-23	43191-43194	can	
152-24	43195-43198	see	
152-25	43199-43202	the	
152-26	43203-43208	value	
152-27	43209-43211	in	
152-28	43212-43215	all	
152-29	43216-43218	of	
152-30	43219-43224	these	
152-31	43225-43232	methods	
152-32	43232-43233	.	
152-33	43234-43237	Age	
152-34	43237-43238	(	
152-35	43238-43239	)	
152-36	43240-43248	provides	
152-37	43249-43252	the	
152-38	43253-43261	simplest	
152-39	43262-43268	option	
152-40	43269-43272	for	
152-41	43273-43278	human	
152-42	43279-43290	consumption	
152-43	43290-43291	.	

#Text=Timestamp subtraction (no tz) returns an interval, which can calculate day and second differences, but doesn't handle daylight saving time changes. Timestamptz subtraction also returns interval, but handles daylight saving time changes. Subtraction of date values returns an integer number of days and is good for cases where the smallest unit of calculation is a day, like bank loan interest or hotel nights.
153-1	43292-43301	Timestamp	
153-2	43302-43313	subtraction	
153-3	43314-43315	(	
153-4	43315-43317	no	
153-5	43318-43320	tz	
153-6	43320-43321	)	
153-7	43322-43329	returns	
153-8	43330-43332	an	
153-9	43333-43341	interval	
153-10	43341-43342	,	
153-11	43343-43348	which	
153-12	43349-43352	can	
153-13	43353-43362	calculate	
153-14	43363-43366	day	
153-15	43367-43370	and	
153-16	43371-43377	second	
153-17	43378-43389	differences	
153-18	43389-43390	,	
153-19	43391-43394	but	
153-20	43395-43402	doesn't	
153-21	43403-43409	handle	
153-22	43410-43418	daylight	
153-23	43419-43425	saving	
153-24	43426-43430	time	
153-25	43431-43438	changes	
153-26	43438-43439	.	
153-27	43440-43451	Timestamptz	
153-28	43452-43463	subtraction	
153-29	43464-43468	also	
153-30	43469-43476	returns	
153-31	43477-43485	interval	
153-32	43485-43486	,	
153-33	43487-43490	but	
153-34	43491-43498	handles	
153-35	43499-43507	daylight	
153-36	43508-43514	saving	
153-37	43515-43519	time	
153-38	43520-43527	changes	
153-39	43527-43528	.	
153-40	43529-43540	Subtraction	
153-41	43541-43543	of	
153-42	43544-43548	date	
153-43	43549-43555	values	
153-44	43556-43563	returns	
153-45	43564-43566	an	
153-46	43567-43574	integer	
153-47	43575-43581	number	
153-48	43582-43584	of	
153-49	43585-43589	days	
153-50	43590-43593	and	
153-51	43594-43596	is	
153-52	43597-43601	good	
153-53	43602-43605	for	
153-54	43606-43611	cases	
153-55	43612-43617	where	
153-56	43618-43621	the	
153-57	43622-43630	smallest	
153-58	43631-43635	unit	
153-59	43636-43638	of	
153-60	43639-43650	calculation	
153-61	43651-43653	is	
153-62	43654-43655	a	
153-63	43656-43659	day	
153-64	43659-43660	,	
153-65	43661-43665	like	
153-66	43666-43670	bank	
153-67	43671-43675	loan	
153-68	43676-43684	interest	
153-69	43685-43687	or	
153-70	43688-43693	hotel	
153-71	43694-43700	nights	
153-72	43700-43701	.	

#Text=Extract with epoch is ideal when exact precision is required, like electricity consumption or astronomical measurements. You can also think of it as the time difference calculations they ignore. For example, age() compares months/days/seconds units to find the simplest difference, and ignores daylight saving time changes,
154-1	43702-43709	Extract	
154-2	43710-43714	with	
154-3	43715-43720	epoch	
154-4	43721-43723	is	
154-5	43724-43729	ideal	
154-6	43730-43734	when	
154-7	43735-43740	exact	
154-8	43741-43750	precision	
154-9	43751-43753	is	
154-10	43754-43762	required	
154-11	43762-43763	,	
154-12	43764-43768	like	
154-13	43769-43780	electricity	
154-14	43781-43792	consumption	
154-15	43793-43795	or	
154-16	43796-43808	astronomical	
154-17	43809-43821	measurements	
154-18	43821-43822	.	
154-19	43823-43826	You	
154-20	43827-43830	can	
154-21	43831-43835	also	
154-22	43836-43841	think	
154-23	43842-43844	of	
154-24	43845-43847	it	
154-25	43848-43850	as	
154-26	43851-43854	the	
154-27	43855-43859	time	
154-28	43860-43870	difference	
154-29	43871-43883	calculations	
154-30	43884-43888	they	
154-31	43889-43895	ignore	
154-32	43895-43896	.	
154-33	43897-43900	For	
154-34	43901-43908	example	
154-35	43908-43909	,	
154-36	43910-43913	age	
154-37	43913-43914	(	
154-38	43914-43915	)	
154-39	43916-43924	compares	
154-40	43925-43931	months	
154-41	43931-43932	/	
154-42	43932-43936	days	
154-43	43936-43937	/	
154-44	43937-43944	seconds	
154-45	43945-43950	units	
154-46	43951-43953	to	
154-47	43954-43958	find	
154-48	43959-43962	the	
154-49	43963-43971	simplest	
154-50	43972-43982	difference	
154-51	43982-43983	,	
154-52	43984-43987	and	
154-53	43988-43995	ignores	
154-54	43996-44004	daylight	
154-55	44005-44011	saving	
154-56	44012-44016	time	
154-57	44017-44024	changes	
154-58	44024-44025	,	

#Text=and sometimes even ignores leap days. Date and timestamp subtraction ignores daylight saving time changes. Subtraction using timestamptz and extract with epoch honor both. (Unfortunately, Postgres ignores leap seconds). Here is an example of age() ignoring leap days when the day of the month is the same, but reflecting leap days if the the days of the month are different:
155-1	44026-44029	and	
155-2	44030-44039	sometimes	
155-3	44040-44044	even	
155-4	44045-44052	ignores	
155-5	44053-44057	leap	
155-6	44058-44062	days	
155-7	44062-44063	.	
155-8	44064-44068	Date	
155-9	44069-44072	and	
155-10	44073-44082	timestamp	
155-11	44083-44094	subtraction	
155-12	44095-44102	ignores	
155-13	44103-44111	daylight	
155-14	44112-44118	saving	
155-15	44119-44123	time	
155-16	44124-44131	changes	
155-17	44131-44132	.	
155-18	44133-44144	Subtraction	
155-19	44145-44150	using	
155-20	44151-44162	timestamptz	
155-21	44163-44166	and	
155-22	44167-44174	extract	
155-23	44175-44179	with	
155-24	44180-44185	epoch	
155-25	44186-44191	honor	
155-26	44192-44196	both	
155-27	44196-44197	.	
155-28	44198-44199	(	
155-29	44199-44212	Unfortunately	
155-30	44212-44213	,	
155-31	44214-44222	Postgres	
155-32	44223-44230	ignores	
155-33	44231-44235	leap	
155-34	44236-44243	seconds	
155-35	44243-44244	)	
155-36	44244-44245	.	
155-37	44246-44250	Here	
155-38	44251-44253	is	
155-39	44254-44256	an	
155-40	44257-44264	example	
155-41	44265-44267	of	
155-42	44268-44271	age	
155-43	44271-44272	(	
155-44	44272-44273	)	
155-45	44274-44282	ignoring	
155-46	44283-44287	leap	
155-47	44288-44292	days	
155-48	44293-44297	when	
155-49	44298-44301	the	
155-50	44302-44305	day	
155-51	44306-44308	of	
155-52	44309-44312	the	
155-53	44313-44318	month	
155-54	44319-44321	is	
155-55	44322-44325	the	
155-56	44326-44330	same	
155-57	44330-44331	,	
155-58	44332-44335	but	
155-59	44336-44346	reflecting	
155-60	44347-44351	leap	
155-61	44352-44356	days	
155-62	44357-44359	if	
155-63	44360-44363	the	
155-64	44364-44367	the	
155-65	44368-44372	days	
155-66	44373-44375	of	
155-67	44376-44379	the	
155-68	44380-44385	month	
155-69	44386-44389	are	
155-70	44390-44399	different	
155-71	44399-44400	:	

#Text=-- leap year, same day of the month SELECT age('2020-03-01', '2020-02-01'); age ------- 1 mon -- non-leap year, same day of the month
156-1	44401-44402	-	
156-2	44402-44403	-	
156-3	44404-44408	leap	
156-4	44409-44413	year	
156-5	44413-44414	,	
156-6	44415-44419	same	
156-7	44420-44423	day	
156-8	44424-44426	of	
156-9	44427-44430	the	
156-10	44431-44436	month	
156-11	44437-44443	SELECT	
156-12	44444-44447	age	
156-13	44447-44448	(	
156-14	44448-44449	'	
156-15	44449-44453	2020	
156-16	44453-44454	-	
156-17	44454-44456	03	
156-18	44456-44457	-	
156-19	44457-44459	01	
156-20	44459-44460	'	
156-21	44460-44461	,	
156-22	44462-44463	'	
156-23	44463-44467	2020	
156-24	44467-44468	-	
156-25	44468-44470	02	
156-26	44470-44471	-	
156-27	44471-44473	01	
156-28	44473-44474	'	
156-29	44474-44475	)	
156-30	44475-44476	;	
156-31	44477-44480	age	
156-32	44481-44482	-	
156-33	44482-44483	-	
156-34	44483-44484	-	
156-35	44484-44485	-	
156-36	44485-44486	-	
156-37	44486-44487	-	
156-38	44487-44488	-	
156-39	44489-44490	1	
156-40	44491-44494	mon	
156-41	44495-44496	-	
156-42	44496-44497	-	
156-43	44498-44506	non-leap	
156-44	44507-44511	year	
156-45	44511-44512	,	
156-46	44513-44517	same	
156-47	44518-44521	day	
156-48	44522-44524	of	
156-49	44525-44528	the	
156-50	44529-44534	month	

#Text=SELECT age('2021-03-01', '2021-02-01'); age ------- 1 mon -- leap year, different day of the month SELECT age('2020-03-01', '2020-02-02'); age ---------
157-1	44535-44541	SELECT	
157-2	44542-44545	age	
157-3	44545-44546	(	
157-4	44546-44547	'	
157-5	44547-44551	2021	
157-6	44551-44552	-	
157-7	44552-44554	03	
157-8	44554-44555	-	
157-9	44555-44557	01	
157-10	44557-44558	'	
157-11	44558-44559	,	
157-12	44560-44561	'	
157-13	44561-44565	2021	
157-14	44565-44566	-	
157-15	44566-44568	02	
157-16	44568-44569	-	
157-17	44569-44571	01	
157-18	44571-44572	'	
157-19	44572-44573	)	
157-20	44573-44574	;	
157-21	44575-44578	age	
157-22	44579-44580	-	
157-23	44580-44581	-	
157-24	44581-44582	-	
157-25	44582-44583	-	
157-26	44583-44584	-	
157-27	44584-44585	-	
157-28	44585-44586	-	
157-29	44587-44588	1	
157-30	44589-44592	mon	
157-31	44593-44594	-	
157-32	44594-44595	-	
157-33	44596-44600	leap	
157-34	44601-44605	year	
157-35	44605-44606	,	
157-36	44607-44616	different	
157-37	44617-44620	day	
157-38	44621-44623	of	
157-39	44624-44627	the	
157-40	44628-44633	month	
157-41	44634-44640	SELECT	
157-42	44641-44644	age	
157-43	44644-44645	(	
157-44	44645-44646	'	
157-45	44646-44650	2020	
157-46	44650-44651	-	
157-47	44651-44653	03	
157-48	44653-44654	-	
157-49	44654-44656	01	
157-50	44656-44657	'	
157-51	44657-44658	,	
157-52	44659-44660	'	
157-53	44660-44664	2020	
157-54	44664-44665	-	
157-55	44665-44667	02	
157-56	44667-44668	-	
157-57	44668-44670	02	
157-58	44670-44671	'	
157-59	44671-44672	)	
157-60	44672-44673	;	
157-61	44674-44677	age	
157-62	44678-44679	-	
157-63	44679-44680	-	
157-64	44680-44681	-	
157-65	44681-44682	-	
157-66	44682-44683	-	
157-67	44683-44684	-	
157-68	44684-44685	-	
157-69	44685-44686	-	
157-70	44686-44687	-	

#Text=28 days -- non-leap year, different day of the month SELECT age('2021-03-01', '2021-02-02'); age --------- 27 days
158-1	44688-44690	28	
158-2	44691-44695	days	
158-3	44696-44697	-	
158-4	44697-44698	-	
158-5	44699-44707	non-leap	
158-6	44708-44712	year	
158-7	44712-44713	,	
158-8	44714-44723	different	
158-9	44724-44727	day	
158-10	44728-44730	of	
158-11	44731-44734	the	
158-12	44735-44740	month	
158-13	44741-44747	SELECT	
158-14	44748-44751	age	
158-15	44751-44752	(	
158-16	44752-44753	'	
158-17	44753-44757	2021	
158-18	44757-44758	-	
158-19	44758-44760	03	
158-20	44760-44761	-	
158-21	44761-44763	01	
158-22	44763-44764	'	
158-23	44764-44765	,	
158-24	44766-44767	'	
158-25	44767-44771	2021	
158-26	44771-44772	-	
158-27	44772-44774	02	
158-28	44774-44775	-	
158-29	44775-44777	02	
158-30	44777-44778	'	
158-31	44778-44779	)	
158-32	44779-44780	;	
158-33	44781-44784	age	
158-34	44785-44786	-	
158-35	44786-44787	-	
158-36	44787-44788	-	
158-37	44788-44789	-	
158-38	44789-44790	-	
158-39	44790-44791	-	
158-40	44791-44792	-	
158-41	44792-44793	-	
158-42	44793-44794	-	
158-43	44795-44797	27	
158-44	44798-44802	days	

#Text=This is because age() tries to find the simplest difference. Here is an example of daylight saving time changes using age() and subtraction: -- Daylight saving time started in America/New_York on March 8, 2020 02:00:00 SHOW timezone; TimeZone
159-1	44803-44807	This	
159-2	44808-44810	is	
159-3	44811-44818	because	
159-4	44819-44822	age	
159-5	44822-44823	(	
159-6	44823-44824	)	
159-7	44825-44830	tries	
159-8	44831-44833	to	
159-9	44834-44838	find	
159-10	44839-44842	the	
159-11	44843-44851	simplest	
159-12	44852-44862	difference	
159-13	44862-44863	.	
159-14	44864-44868	Here	
159-15	44869-44871	is	
159-16	44872-44874	an	
159-17	44875-44882	example	
159-18	44883-44885	of	
159-19	44886-44894	daylight	
159-20	44895-44901	saving	
159-21	44902-44906	time	
159-22	44907-44914	changes	
159-23	44915-44920	using	
159-24	44921-44924	age	
159-25	44924-44925	(	
159-26	44925-44926	)	
159-27	44927-44930	and	
159-28	44931-44942	subtraction	
159-29	44942-44943	:	
159-30	44944-44945	-	
159-31	44945-44946	-	
159-32	44947-44955	Daylight	
159-33	44956-44962	saving	
159-34	44963-44967	time	
159-35	44968-44975	started	
159-36	44976-44978	in	
159-37	44979-44986	America	
159-38	44986-44987	/	
159-39	44987-44995	New_York	
159-40	44996-44998	on	
159-41	44999-45004	March	
159-42	45005-45006	8	
159-43	45006-45007	,	
159-44	45008-45012	2020	
159-45	45013-45015	02	
159-46	45015-45016	:	
159-47	45016-45018	00	
159-48	45018-45019	:	
159-49	45019-45021	00	
159-50	45022-45026	SHOW	
159-51	45027-45035	timezone	
159-52	45035-45036	;	
159-53	45037-45045	TimeZone	

#Text=------------------ America/New_York SELECT age('2020-03-09', '2020-03-08'); age ------- 1 day
160-1	45046-45047	-	
160-2	45047-45048	-	
160-3	45048-45049	-	
160-4	45049-45050	-	
160-5	45050-45051	-	
160-6	45051-45052	-	
160-7	45052-45053	-	
160-8	45053-45054	-	
160-9	45054-45055	-	
160-10	45055-45056	-	
160-11	45056-45057	-	
160-12	45057-45058	-	
160-13	45058-45059	-	
160-14	45059-45060	-	
160-15	45060-45061	-	
160-16	45061-45062	-	
160-17	45062-45063	-	
160-18	45063-45064	-	
160-19	45065-45072	America	
160-20	45072-45073	/	
160-21	45073-45081	New_York	
160-22	45082-45088	SELECT	
160-23	45089-45092	age	
160-24	45092-45093	(	
160-25	45093-45094	'	
160-26	45094-45098	2020	
160-27	45098-45099	-	
160-28	45099-45101	03	
160-29	45101-45102	-	
160-30	45102-45104	09	
160-31	45104-45105	'	
160-32	45105-45106	,	
160-33	45107-45108	'	
160-34	45108-45112	2020	
160-35	45112-45113	-	
160-36	45113-45115	03	
160-37	45115-45116	-	
160-38	45116-45118	08	
160-39	45118-45119	'	
160-40	45119-45120	)	
160-41	45120-45121	;	
160-42	45122-45125	age	
160-43	45126-45127	-	
160-44	45127-45128	-	
160-45	45128-45129	-	
160-46	45129-45130	-	
160-47	45130-45131	-	
160-48	45131-45132	-	
160-49	45132-45133	-	
160-50	45134-45135	1	
160-51	45136-45139	day	

#Text=SELECT age('2020-03-09 00:00:00'::timestamptz, '2020-03-08 00:00:00'::timestamptz); age ------- 1 day SELECT '2020-03-09'::date - '2020-03-08'::date; ?column? ----------
161-1	45140-45146	SELECT	
161-2	45147-45150	age	
161-3	45150-45151	(	
161-4	45151-45152	'	
161-5	45152-45156	2020	
161-6	45156-45157	-	
161-7	45157-45159	03	
161-8	45159-45160	-	
161-9	45160-45162	09	
161-10	45163-45165	00	
161-11	45165-45166	:	
161-12	45166-45168	00	
161-13	45168-45169	:	
161-14	45169-45171	00	
161-15	45171-45172	'	
161-16	45172-45173	:	
161-17	45173-45174	:	
161-18	45174-45185	timestamptz	
161-19	45185-45186	,	
161-20	45187-45188	'	
161-21	45188-45192	2020	
161-22	45192-45193	-	
161-23	45193-45195	03	
161-24	45195-45196	-	
161-25	45196-45198	08	
161-26	45199-45201	00	
161-27	45201-45202	:	
161-28	45202-45204	00	
161-29	45204-45205	:	
161-30	45205-45207	00	
161-31	45207-45208	'	
161-32	45208-45209	:	
161-33	45209-45210	:	
161-34	45210-45221	timestamptz	
161-35	45221-45222	)	
161-36	45222-45223	;	
161-37	45224-45227	age	
161-38	45228-45229	-	
161-39	45229-45230	-	
161-40	45230-45231	-	
161-41	45231-45232	-	
161-42	45232-45233	-	
161-43	45233-45234	-	
161-44	45234-45235	-	
161-45	45236-45237	1	
161-46	45238-45241	day	
161-47	45242-45248	SELECT	
161-48	45249-45250	'	
161-49	45250-45254	2020	
161-50	45254-45255	-	
161-51	45255-45257	03	
161-52	45257-45258	-	
161-53	45258-45260	09	
161-54	45260-45261	'	
161-55	45261-45262	:	
161-56	45262-45263	:	
161-57	45263-45267	date	
161-58	45268-45269	-	
161-59	45269-45270	 	
161-60	45270-45271	'	
161-61	45271-45275	2020	
161-62	45275-45276	-	
161-63	45276-45278	03	
161-64	45278-45279	-	
161-65	45279-45281	08	
161-66	45281-45282	'	
161-67	45282-45283	:	
161-68	45283-45284	:	
161-69	45284-45288	date	
161-70	45288-45289	;	
161-71	45290-45291	?	
161-72	45291-45297	column	
161-73	45297-45298	?	
161-74	45299-45300	-	
161-75	45300-45301	-	
161-76	45301-45302	-	
161-77	45302-45303	-	
161-78	45303-45304	-	
161-79	45304-45305	-	
161-80	45305-45306	-	
161-81	45306-45307	-	
161-82	45307-45308	-	
161-83	45308-45309	-	

#Text=SELECT '2020-03-09'::timestamp - '2020-03-08'::timestamp; ?column? ---------- 1 day SELECT '2020-03-09'::timestamptz - '2020-03-08'::timestamptz; ?column?
162-1	45310-45316	SELECT	
162-2	45317-45318	'	
162-3	45318-45322	2020	
162-4	45322-45323	-	
162-5	45323-45325	03	
162-6	45325-45326	-	
162-7	45326-45328	09	
162-8	45328-45329	'	
162-9	45329-45330	:	
162-10	45330-45331	:	
162-11	45331-45340	timestamp	
162-12	45341-45342	-	
162-13	45342-45343	 	
162-14	45343-45344	'	
162-15	45344-45348	2020	
162-16	45348-45349	-	
162-17	45349-45351	03	
162-18	45351-45352	-	
162-19	45352-45354	08	
162-20	45354-45355	'	
162-21	45355-45356	:	
162-22	45356-45357	:	
162-23	45357-45366	timestamp	
162-24	45366-45367	;	
162-25	45368-45369	?	
162-26	45369-45375	column	
162-27	45375-45376	?	
162-28	45377-45378	-	
162-29	45378-45379	-	
162-30	45379-45380	-	
162-31	45380-45381	-	
162-32	45381-45382	-	
162-33	45382-45383	-	
162-34	45383-45384	-	
162-35	45384-45385	-	
162-36	45385-45386	-	
162-37	45386-45387	-	
162-38	45388-45389	1	
162-39	45390-45393	day	
162-40	45394-45400	SELECT	
162-41	45401-45402	'	
162-42	45402-45406	2020	
162-43	45406-45407	-	
162-44	45407-45409	03	
162-45	45409-45410	-	
162-46	45410-45412	09	
162-47	45412-45413	'	
162-48	45413-45414	:	
162-49	45414-45415	:	
162-50	45415-45426	timestamptz	
162-51	45427-45428	-	
162-52	45428-45429	 	
162-53	45429-45430	'	
162-54	45430-45434	2020	
162-55	45434-45435	-	
162-56	45435-45437	03	
162-57	45437-45438	-	
162-58	45438-45440	08	
162-59	45440-45441	'	
162-60	45441-45442	:	
162-61	45442-45443	:	
162-62	45443-45454	timestamptz	
162-63	45454-45455	;	
162-64	45456-45457	?	
162-65	45457-45463	column	
162-66	45463-45464	?	

#Text=---------- 23:00:00 -- a 23-hour day SELECT EXTRACT(EPOCH FROM '2020-03-09'::timestamptz) - EXTRACT(EPOCH FROM '2020-03-08'::timestamptz);
163-1	45465-45466	-	
163-2	45466-45467	-	
163-3	45467-45468	-	
163-4	45468-45469	-	
163-5	45469-45470	-	
163-6	45470-45471	-	
163-7	45471-45472	-	
163-8	45472-45473	-	
163-9	45473-45474	-	
163-10	45474-45475	-	
163-11	45476-45478	23	
163-12	45478-45479	:	
163-13	45479-45481	00	
163-14	45481-45482	:	
163-15	45482-45484	00	
163-16	45485-45486	-	
163-17	45486-45487	-	
163-18	45488-45489	a	
163-19	45490-45492	23	
163-20	45492-45493	-	
163-21	45493-45497	hour	
163-22	45498-45501	day	
163-23	45502-45508	SELECT	
163-24	45509-45516	EXTRACT	
163-25	45516-45517	(	
163-26	45517-45522	EPOCH	
163-27	45523-45527	FROM	
163-28	45528-45529	'	
163-29	45529-45533	2020	
163-30	45533-45534	-	
163-31	45534-45536	03	
163-32	45536-45537	-	
163-33	45537-45539	09	
163-34	45539-45540	'	
163-35	45540-45541	:	
163-36	45541-45542	:	
163-37	45542-45553	timestamptz	
163-38	45553-45554	)	
163-39	45555-45556	-	
163-40	45556-45557	 	
163-41	45557-45564	EXTRACT	
163-42	45564-45565	(	
163-43	45565-45570	EPOCH	
163-44	45571-45575	FROM	
163-45	45576-45577	'	
163-46	45577-45581	2020	
163-47	45581-45582	-	
163-48	45582-45584	03	
163-49	45584-45585	-	
163-50	45585-45587	08	
163-51	45587-45588	'	
163-52	45588-45589	:	
163-53	45589-45590	:	
163-54	45590-45601	timestamptz	
163-55	45601-45602	)	
163-56	45602-45603	;	

#Text=?column? ---------- 82800 -- a 24-hour day SELECT EXTRACT(EPOCH FROM '2020-03-10'::timestamptz) - EXTRACT(EPOCH FROM '2020-03-09'::timestamptz);
164-1	45604-45605	?	
164-2	45605-45611	column	
164-3	45611-45612	?	
164-4	45613-45614	-	
164-5	45614-45615	-	
164-6	45615-45616	-	
164-7	45616-45617	-	
164-8	45617-45618	-	
164-9	45618-45619	-	
164-10	45619-45620	-	
164-11	45620-45621	-	
164-12	45621-45622	-	
164-13	45622-45623	-	
164-14	45624-45629	82800	
164-15	45630-45631	-	
164-16	45631-45632	-	
164-17	45633-45634	a	
164-18	45635-45637	24	
164-19	45637-45638	-	
164-20	45638-45642	hour	
164-21	45643-45646	day	
164-22	45647-45653	SELECT	
164-23	45654-45661	EXTRACT	
164-24	45661-45662	(	
164-25	45662-45667	EPOCH	
164-26	45668-45672	FROM	
164-27	45673-45674	'	
164-28	45674-45678	2020	
164-29	45678-45679	-	
164-30	45679-45681	03	
164-31	45681-45682	-	
164-32	45682-45684	10	
164-33	45684-45685	'	
164-34	45685-45686	:	
164-35	45686-45687	:	
164-36	45687-45698	timestamptz	
164-37	45698-45699	)	
164-38	45700-45701	-	
164-39	45701-45702	 	
164-40	45702-45709	EXTRACT	
164-41	45709-45710	(	
164-42	45710-45715	EPOCH	
164-43	45716-45720	FROM	
164-44	45721-45722	'	
164-45	45722-45726	2020	
164-46	45726-45727	-	
164-47	45727-45729	03	
164-48	45729-45730	-	
164-49	45730-45732	09	
164-50	45732-45733	'	
164-51	45733-45734	:	
164-52	45734-45735	:	
164-53	45735-45746	timestamptz	
164-54	45746-45747	)	
164-55	45747-45748	;	

#Text=?column? ---------- 86400 If you are doing a later calculation using a computed date difference, consider how accurate you want the result to be: Do you want it to be the same day based on the calendar? Use age()
165-1	45749-45750	?	
165-2	45750-45756	column	
165-3	45756-45757	?	
165-4	45758-45759	-	
165-5	45759-45760	-	
165-6	45760-45761	-	
165-7	45761-45762	-	
165-8	45762-45763	-	
165-9	45763-45764	-	
165-10	45764-45765	-	
165-11	45765-45766	-	
165-12	45766-45767	-	
165-13	45767-45768	-	
165-14	45769-45774	86400	
165-15	45775-45777	If	
165-16	45778-45781	you	
165-17	45782-45785	are	
165-18	45786-45791	doing	
165-19	45792-45793	a	
165-20	45794-45799	later	
165-21	45800-45811	calculation	
165-22	45812-45817	using	
165-23	45818-45819	a	
165-24	45820-45828	computed	
165-25	45829-45833	date	
165-26	45834-45844	difference	
165-27	45844-45845	,	
165-28	45846-45854	consider	
165-29	45855-45858	how	
165-30	45859-45867	accurate	
165-31	45868-45871	you	
165-32	45872-45876	want	
165-33	45877-45880	the	
165-34	45881-45887	result	
165-35	45888-45890	to	
165-36	45891-45893	be	
165-37	45893-45894	:	
165-38	45895-45897	Do	
165-39	45898-45901	you	
165-40	45902-45906	want	
165-41	45907-45909	it	
165-42	45910-45912	to	
165-43	45913-45915	be	
165-44	45916-45919	the	
165-45	45920-45924	same	
165-46	45925-45928	day	
165-47	45929-45934	based	
165-48	45935-45937	on	
165-49	45938-45941	the	
165-50	45942-45950	calendar	
165-51	45950-45951	?	
165-52	45952-45955	Use	
165-53	45956-45959	age	
165-54	45959-45960	(	
165-55	45960-45961	)	

#Text=Do you want the number of days to be exactly the same? Use date or timestamp subtraction Do you want the number of seconds to be exactly the same? Use timestamptz subtraction or extract with epoch I have already written about the complexities of using and computing interval values. View or Post Comments
166-1	45962-45964	Do	
166-2	45965-45968	you	
166-3	45969-45973	want	
166-4	45974-45977	the	
166-5	45978-45984	number	
166-6	45985-45987	of	
166-7	45988-45992	days	
166-8	45993-45995	to	
166-9	45996-45998	be	
166-10	45999-46006	exactly	
166-11	46007-46010	the	
166-12	46011-46015	same	
166-13	46015-46016	?	
166-14	46017-46020	Use	
166-15	46021-46025	date	
166-16	46026-46028	or	
166-17	46029-46038	timestamp	
166-18	46039-46050	subtraction	
166-19	46051-46053	Do	
166-20	46054-46057	you	
166-21	46058-46062	want	
166-22	46063-46066	the	
166-23	46067-46073	number	
166-24	46074-46076	of	
166-25	46077-46084	seconds	
166-26	46085-46087	to	
166-27	46088-46090	be	
166-28	46091-46098	exactly	
166-29	46099-46102	the	
166-30	46103-46107	same	
166-31	46107-46108	?	
166-32	46109-46112	Use	
166-33	46113-46124	timestamptz	
166-34	46125-46136	subtraction	
166-35	46137-46139	or	
166-36	46140-46147	extract	
166-37	46148-46152	with	
166-38	46153-46158	epoch	
166-39	46159-46160	I	
166-40	46161-46165	have	
166-41	46166-46173	already	
166-42	46174-46181	written	
166-43	46182-46187	about	
166-44	46188-46191	the	
166-45	46192-46204	complexities	
166-46	46205-46207	of	
166-47	46208-46213	using	
166-48	46214-46217	and	
166-49	46218-46227	computing	
166-50	46228-46236	interval	
166-51	46237-46243	values	
166-52	46243-46244	.	
166-53	46245-46249	View	
166-54	46250-46252	or	
166-55	46253-46257	Post	
166-56	46258-46266	Comments	

#Text=Computing Interval Values Friday, July 31, 2020 The interval data type stores time duration as months, days, and seconds. Years are represented as a fixed number of months, and hours and minutes as a fixed number of seconds. Using interval values makes time computation very simple:
167-1	46267-46276	Computing	
167-2	46277-46285	Interval	
167-3	46286-46292	Values	
167-4	46293-46299	Friday	
167-5	46299-46300	,	
167-6	46301-46305	July	
167-7	46306-46308	31	
167-8	46308-46309	,	
167-9	46310-46314	2020	
167-10	46315-46318	The	
167-11	46319-46327	interval	
167-12	46328-46332	data	
167-13	46333-46337	type	
167-14	46338-46344	stores	
167-15	46345-46349	time	
167-16	46350-46358	duration	
167-17	46359-46361	as	
167-18	46362-46368	months	
167-19	46368-46369	,	
167-20	46370-46374	days	
167-21	46374-46375	,	
167-22	46376-46379	and	
167-23	46380-46387	seconds	
167-24	46387-46388	.	
167-25	46389-46394	Years	
167-26	46395-46398	are	
167-27	46399-46410	represented	
167-28	46411-46413	as	
167-29	46414-46415	a	
167-30	46416-46421	fixed	
167-31	46422-46428	number	
167-32	46429-46431	of	
167-33	46432-46438	months	
167-34	46438-46439	,	
167-35	46440-46443	and	
167-36	46444-46449	hours	
167-37	46450-46453	and	
167-38	46454-46461	minutes	
167-39	46462-46464	as	
167-40	46465-46466	a	
167-41	46467-46472	fixed	
167-42	46473-46479	number	
167-43	46480-46482	of	
167-44	46483-46490	seconds	
167-45	46490-46491	.	
167-46	46492-46497	Using	
167-47	46498-46506	interval	
167-48	46507-46513	values	
167-49	46514-46519	makes	
167-50	46520-46524	time	
167-51	46525-46536	computation	
167-52	46537-46541	very	
167-53	46542-46548	simple	
167-54	46548-46549	:	

#Text=-- Daylight saving time started in America/New_York on March 8, 2020 02:00:00 SHOW timezone; TimeZone ------------------ America/New_York SELECT '2020-03-07 00:00:00'::timestamptz + '2 days';
168-1	46550-46551	-	
168-2	46551-46552	-	
168-3	46553-46561	Daylight	
168-4	46562-46568	saving	
168-5	46569-46573	time	
168-6	46574-46581	started	
168-7	46582-46584	in	
168-8	46585-46592	America	
168-9	46592-46593	/	
168-10	46593-46601	New_York	
168-11	46602-46604	on	
168-12	46605-46610	March	
168-13	46611-46612	8	
168-14	46612-46613	,	
168-15	46614-46618	2020	
168-16	46619-46621	02	
168-17	46621-46622	:	
168-18	46622-46624	00	
168-19	46624-46625	:	
168-20	46625-46627	00	
168-21	46628-46632	SHOW	
168-22	46633-46641	timezone	
168-23	46641-46642	;	
168-24	46643-46651	TimeZone	
168-25	46652-46653	-	
168-26	46653-46654	-	
168-27	46654-46655	-	
168-28	46655-46656	-	
168-29	46656-46657	-	
168-30	46657-46658	-	
168-31	46658-46659	-	
168-32	46659-46660	-	
168-33	46660-46661	-	
168-34	46661-46662	-	
168-35	46662-46663	-	
168-36	46663-46664	-	
168-37	46664-46665	-	
168-38	46665-46666	-	
168-39	46666-46667	-	
168-40	46667-46668	-	
168-41	46668-46669	-	
168-42	46669-46670	-	
168-43	46671-46678	America	
168-44	46678-46679	/	
168-45	46679-46687	New_York	
168-46	46688-46694	SELECT	
168-47	46695-46696	'	
168-48	46696-46700	2020	
168-49	46700-46701	-	
168-50	46701-46703	03	
168-51	46703-46704	-	
168-52	46704-46706	07	
168-53	46707-46709	00	
168-54	46709-46710	:	
168-55	46710-46712	00	
168-56	46712-46713	:	
168-57	46713-46715	00	
168-58	46715-46716	'	
168-59	46716-46717	:	
168-60	46717-46718	:	
168-61	46718-46729	timestamptz	
168-62	46730-46731	+	
168-63	46732-46733	'	
168-64	46733-46734	2	
168-65	46735-46739	days	
168-66	46739-46740	'	
168-67	46740-46741	;	

#Text=?column? ------------------------ 2020-03-09 00:00:00-04 SELECT '2020-03-07 00:00:00'::timestamptz + '48 hours';
169-1	46742-46743	?	
169-2	46743-46749	column	
169-3	46749-46750	?	
169-4	46751-46752	-	
169-5	46752-46753	-	
169-6	46753-46754	-	
169-7	46754-46755	-	
169-8	46755-46756	-	
169-9	46756-46757	-	
169-10	46757-46758	-	
169-11	46758-46759	-	
169-12	46759-46760	-	
169-13	46760-46761	-	
169-14	46761-46762	-	
169-15	46762-46763	-	
169-16	46763-46764	-	
169-17	46764-46765	-	
169-18	46765-46766	-	
169-19	46766-46767	-	
169-20	46767-46768	-	
169-21	46768-46769	-	
169-22	46769-46770	-	
169-23	46770-46771	-	
169-24	46771-46772	-	
169-25	46772-46773	-	
169-26	46773-46774	-	
169-27	46774-46775	-	
169-28	46776-46780	2020	
169-29	46780-46781	-	
169-30	46781-46783	03	
169-31	46783-46784	-	
169-32	46784-46786	09	
169-33	46787-46789	00	
169-34	46789-46790	:	
169-35	46790-46792	00	
169-36	46792-46793	:	
169-37	46793-46795	00	
169-38	46795-46796	-	
169-39	46796-46798	04	
169-40	46799-46805	SELECT	
169-41	46806-46807	'	
169-42	46807-46811	2020	
169-43	46811-46812	-	
169-44	46812-46814	03	
169-45	46814-46815	-	
169-46	46815-46817	07	
169-47	46818-46820	00	
169-48	46820-46821	:	
169-49	46821-46823	00	
169-50	46823-46824	:	
169-51	46824-46826	00	
169-52	46826-46827	'	
169-53	46827-46828	:	
169-54	46828-46829	:	
169-55	46829-46840	timestamptz	
169-56	46841-46842	+	
169-57	46843-46844	'	
169-58	46844-46846	48	
169-59	46847-46852	hours	
169-60	46852-46853	'	
169-61	46853-46854	;	

#Text=?column? ------------------------ 2020-03-09 01:00:00-04 This computation spans a usa daylight saving time change. The interval data type allows the user to specify whether they want days or
170-1	46855-46856	?	
170-2	46856-46862	column	
170-3	46862-46863	?	
170-4	46864-46865	-	
170-5	46865-46866	-	
170-6	46866-46867	-	
170-7	46867-46868	-	
170-8	46868-46869	-	
170-9	46869-46870	-	
170-10	46870-46871	-	
170-11	46871-46872	-	
170-12	46872-46873	-	
170-13	46873-46874	-	
170-14	46874-46875	-	
170-15	46875-46876	-	
170-16	46876-46877	-	
170-17	46877-46878	-	
170-18	46878-46879	-	
170-19	46879-46880	-	
170-20	46880-46881	-	
170-21	46881-46882	-	
170-22	46882-46883	-	
170-23	46883-46884	-	
170-24	46884-46885	-	
170-25	46885-46886	-	
170-26	46886-46887	-	
170-27	46887-46888	-	
170-28	46889-46893	2020	
170-29	46893-46894	-	
170-30	46894-46896	03	
170-31	46896-46897	-	
170-32	46897-46899	09	
170-33	46900-46902	01	
170-34	46902-46903	:	
170-35	46903-46905	00	
170-36	46905-46906	:	
170-37	46906-46908	00	
170-38	46908-46909	-	
170-39	46909-46911	04	
170-40	46912-46916	This	
170-41	46917-46928	computation	
170-42	46929-46934	spans	
170-43	46935-46936	a	
170-44	46937-46940	usa	
170-45	46941-46949	daylight	
170-46	46950-46956	saving	
170-47	46957-46961	time	
170-48	46962-46968	change	
170-49	46968-46969	.	
170-50	46970-46973	The	
170-51	46974-46982	interval	
170-52	46983-46987	data	
170-53	46988-46992	type	
170-54	46993-46999	allows	
170-55	47000-47003	the	
170-56	47004-47008	user	
170-57	47009-47011	to	
170-58	47012-47019	specify	
170-59	47020-47027	whether	
170-60	47028-47032	they	
170-61	47033-47037	want	
170-62	47038-47042	days	
170-63	47043-47045	or	

#Text=hours added, with different results because of the daylight saving time change. This is a great use of the interval data type. Using queries that output interval values is more nuanced. While you can specify units on input, e.g. days, hours, seconds, you can't specify whether you care about months, days, or seconds in
171-1	47046-47051	hours	
171-2	47052-47057	added	
171-3	47057-47058	,	
171-4	47059-47063	with	
171-5	47064-47073	different	
171-6	47074-47081	results	
171-7	47082-47089	because	
171-8	47090-47092	of	
171-9	47093-47096	the	
171-10	47097-47105	daylight	
171-11	47106-47112	saving	
171-12	47113-47117	time	
171-13	47118-47124	change	
171-14	47124-47125	.	
171-15	47126-47130	This	
171-16	47131-47133	is	
171-17	47134-47135	a	
171-18	47136-47141	great	
171-19	47142-47145	use	
171-20	47146-47148	of	
171-21	47149-47152	the	
171-22	47153-47161	interval	
171-23	47162-47166	data	
171-24	47167-47171	type	
171-25	47171-47172	.	
171-26	47173-47178	Using	
171-27	47179-47186	queries	
171-28	47187-47191	that	
171-29	47192-47198	output	
171-30	47199-47207	interval	
171-31	47208-47214	values	
171-32	47215-47217	is	
171-33	47218-47222	more	
171-34	47223-47230	nuanced	
171-35	47230-47231	.	
171-36	47232-47237	While	
171-37	47238-47241	you	
171-38	47242-47245	can	
171-39	47246-47253	specify	
171-40	47254-47259	units	
171-41	47260-47262	on	
171-42	47263-47268	input	
171-43	47268-47269	,	
171-44	47270-47273	e.g	
171-45	47273-47274	.	
171-46	47275-47279	days	
171-47	47279-47280	,	
171-48	47281-47286	hours	
171-49	47286-47287	,	
171-50	47288-47295	seconds	
171-51	47295-47296	,	
171-52	47297-47300	you	
171-53	47301-47306	can't	
171-54	47307-47314	specify	
171-55	47315-47322	whether	
171-56	47323-47326	you	
171-57	47327-47331	care	
171-58	47332-47337	about	
171-59	47338-47344	months	
171-60	47344-47345	,	
171-61	47346-47350	days	
171-62	47350-47351	,	
171-63	47352-47354	or	
171-64	47355-47362	seconds	
171-65	47363-47365	in	

#Text=interval output. Therefore, different operations are required to produce different outputs, e.g.: SELECT '2020-03-09 00:00:00'::timestamptz - '2020-03-07 00:00:00'::timestamptz;
172-1	47366-47374	interval	
172-2	47375-47381	output	
172-3	47381-47382	.	
172-4	47383-47392	Therefore	
172-5	47392-47393	,	
172-6	47394-47403	different	
172-7	47404-47414	operations	
172-8	47415-47418	are	
172-9	47419-47427	required	
172-10	47428-47430	to	
172-11	47431-47438	produce	
172-12	47439-47448	different	
172-13	47449-47456	outputs	
172-14	47456-47457	,	
172-15	47458-47461	e.g	
172-16	47461-47462	.	
172-17	47462-47463	:	
172-18	47464-47470	SELECT	
172-19	47471-47472	'	
172-20	47472-47476	2020	
172-21	47476-47477	-	
172-22	47477-47479	03	
172-23	47479-47480	-	
172-24	47480-47482	09	
172-25	47483-47485	00	
172-26	47485-47486	:	
172-27	47486-47488	00	
172-28	47488-47489	:	
172-29	47489-47491	00	
172-30	47491-47492	'	
172-31	47492-47493	:	
172-32	47493-47494	:	
172-33	47494-47505	timestamptz	
172-34	47506-47507	-	
172-35	47507-47508	 	
172-36	47508-47509	'	
172-37	47509-47513	2020	
172-38	47513-47514	-	
172-39	47514-47516	03	
172-40	47516-47517	-	
172-41	47517-47519	07	
172-42	47520-47522	00	
172-43	47522-47523	:	
172-44	47523-47525	00	
172-45	47525-47526	:	
172-46	47526-47528	00	
172-47	47528-47529	'	
172-48	47529-47530	:	
172-49	47530-47531	:	
172-50	47531-47542	timestamptz	
172-51	47542-47543	;	

#Text=?column? ---------------- 1 day 23:00:00 SELECT age('2020-03-09 00:00:00'::timestamptz, '2020-03-07 00:00:00'::timestamptz);
173-1	47544-47545	?	
173-2	47545-47551	column	
173-3	47551-47552	?	
173-4	47553-47554	-	
173-5	47554-47555	-	
173-6	47555-47556	-	
173-7	47556-47557	-	
173-8	47557-47558	-	
173-9	47558-47559	-	
173-10	47559-47560	-	
173-11	47560-47561	-	
173-12	47561-47562	-	
173-13	47562-47563	-	
173-14	47563-47564	-	
173-15	47564-47565	-	
173-16	47565-47566	-	
173-17	47566-47567	-	
173-18	47567-47568	-	
173-19	47568-47569	-	
173-20	47570-47571	1	
173-21	47572-47575	day	
173-22	47576-47578	23	
173-23	47578-47579	:	
173-24	47579-47581	00	
173-25	47581-47582	:	
173-26	47582-47584	00	
173-27	47585-47591	SELECT	
173-28	47592-47595	age	
173-29	47595-47596	(	
173-30	47596-47597	'	
173-31	47597-47601	2020	
173-32	47601-47602	-	
173-33	47602-47604	03	
173-34	47604-47605	-	
173-35	47605-47607	09	
173-36	47608-47610	00	
173-37	47610-47611	:	
173-38	47611-47613	00	
173-39	47613-47614	:	
173-40	47614-47616	00	
173-41	47616-47617	'	
173-42	47617-47618	:	
173-43	47618-47619	:	
173-44	47619-47630	timestamptz	
173-45	47630-47631	,	
173-46	47632-47633	'	
173-47	47633-47637	2020	
173-48	47637-47638	-	
173-49	47638-47640	03	
173-50	47640-47641	-	
173-51	47641-47643	07	
173-52	47644-47646	00	
173-53	47646-47647	:	
173-54	47647-47649	00	
173-55	47649-47650	:	
173-56	47650-47652	00	
173-57	47652-47653	'	
173-58	47653-47654	:	
173-59	47654-47655	:	
173-60	47655-47666	timestamptz	
173-61	47666-47667	)	
173-62	47667-47668	;	

#Text=age -------- 2 days The first query uses subtraction, and computes based on seconds. The second query internally calls timestamp_age(). The comment in the source code is illustrative:
174-1	47669-47672	age	
174-2	47673-47674	-	
174-3	47674-47675	-	
174-4	47675-47676	-	
174-5	47676-47677	-	
174-6	47677-47678	-	
174-7	47678-47679	-	
174-8	47679-47680	-	
174-9	47680-47681	-	
174-10	47682-47683	2	
174-11	47684-47688	days	
174-12	47689-47692	The	
174-13	47693-47698	first	
174-14	47699-47704	query	
174-15	47705-47709	uses	
174-16	47710-47721	subtraction	
174-17	47721-47722	,	
174-18	47723-47726	and	
174-19	47727-47735	computes	
174-20	47736-47741	based	
174-21	47742-47744	on	
174-22	47745-47752	seconds	
174-23	47752-47753	.	
174-24	47754-47757	The	
174-25	47758-47764	second	
174-26	47765-47770	query	
174-27	47771-47781	internally	
174-28	47782-47787	calls	
174-29	47788-47801	timestamp_age	
174-30	47801-47802	(	
174-31	47802-47803	)	
174-32	47803-47804	.	
174-33	47805-47808	The	
174-34	47809-47816	comment	
174-35	47817-47819	in	
174-36	47820-47823	the	
174-37	47824-47830	source	
174-38	47831-47835	code	
174-39	47836-47838	is	
174-40	47839-47851	illustrative	
174-41	47851-47852	:	

#Text=Calculate time difference while retaining year/month fields. Note that this does not result in an accurate absolute time span since year and month are out of context once the arithmetic is done. The key part is the "out of context" mention. What it is saying is that when age() returns 2 days, that could have spanned 47, 48, or 49 hours, based on usa time zones, and that
175-1	47853-47862	Calculate	
175-2	47863-47867	time	
175-3	47868-47878	difference	
175-4	47879-47884	while	
175-5	47885-47894	retaining	
175-6	47895-47899	year	
175-7	47899-47900	/	
175-8	47900-47905	month	
175-9	47906-47912	fields	
175-10	47912-47913	.	
175-11	47914-47918	Note	
175-12	47919-47923	that	
175-13	47924-47928	this	
175-14	47929-47933	does	
175-15	47934-47937	not	
175-16	47938-47944	result	
175-17	47945-47947	in	
175-18	47948-47950	an	
175-19	47951-47959	accurate	
175-20	47960-47968	absolute	
175-21	47969-47973	time	
175-22	47974-47978	span	
175-23	47979-47984	since	
175-24	47985-47989	year	
175-25	47990-47993	and	
175-26	47994-47999	month	
175-27	48000-48003	are	
175-28	48004-48007	out	
175-29	48008-48010	of	
175-30	48011-48018	context	
175-31	48019-48023	once	
175-32	48024-48027	the	
175-33	48028-48038	arithmetic	
175-34	48039-48041	is	
175-35	48042-48046	done	
175-36	48046-48047	.	
175-37	48048-48051	The	
175-38	48052-48055	key	
175-39	48056-48060	part	
175-40	48061-48063	is	
175-41	48064-48067	the	
175-42	48068-48069	"	
175-43	48069-48072	out	
175-44	48073-48075	of	
175-45	48076-48083	context	
175-46	48083-48084	"	
175-47	48085-48092	mention	
175-48	48092-48093	.	
175-49	48094-48098	What	
175-50	48099-48101	it	
175-51	48102-48104	is	
175-52	48105-48111	saying	
175-53	48112-48114	is	
175-54	48115-48119	that	
175-55	48120-48124	when	
175-56	48125-48128	age	
175-57	48128-48129	(	
175-58	48129-48130	)	
175-59	48131-48138	returns	
175-60	48139-48140	2	
175-61	48141-48145	days	
175-62	48145-48146	,	
175-63	48147-48151	that	
175-64	48152-48157	could	
175-65	48158-48162	have	
175-66	48163-48170	spanned	
175-67	48171-48173	47	
175-68	48173-48174	,	
175-69	48175-48177	48	
175-70	48177-48178	,	
175-71	48179-48181	or	
175-72	48182-48184	49	
175-73	48185-48190	hours	
175-74	48190-48191	,	
175-75	48192-48197	based	
175-76	48198-48200	on	
175-77	48201-48204	usa	
175-78	48205-48209	time	
175-79	48210-48215	zones	
175-80	48215-48216	,	
175-81	48217-48220	and	
175-82	48221-48225	that	

#Text=detail is lost in the output. Look at this: SELECT '2020-03-07 00:00:00'::timestamptz + '1 day 23 hours'; ?column? ------------------------
176-1	48226-48232	detail	
176-2	48233-48235	is	
176-3	48236-48240	lost	
176-4	48241-48243	in	
176-5	48244-48247	the	
176-6	48248-48254	output	
176-7	48254-48255	.	
176-8	48256-48260	Look	
176-9	48261-48263	at	
176-10	48264-48268	this	
176-11	48268-48269	:	
176-12	48270-48276	SELECT	
176-13	48277-48278	'	
176-14	48278-48282	2020	
176-15	48282-48283	-	
176-16	48283-48285	03	
176-17	48285-48286	-	
176-18	48286-48288	07	
176-19	48289-48291	00	
176-20	48291-48292	:	
176-21	48292-48294	00	
176-22	48294-48295	:	
176-23	48295-48297	00	
176-24	48297-48298	'	
176-25	48298-48299	:	
176-26	48299-48300	:	
176-27	48300-48311	timestamptz	
176-28	48312-48313	+	
176-29	48314-48315	'	
176-30	48315-48316	1	
176-31	48317-48320	day	
176-32	48321-48323	23	
176-33	48324-48329	hours	
176-34	48329-48330	'	
176-35	48330-48331	;	
176-36	48332-48333	?	
176-37	48333-48339	column	
176-38	48339-48340	?	
176-39	48341-48342	-	
176-40	48342-48343	-	
176-41	48343-48344	-	
176-42	48344-48345	-	
176-43	48345-48346	-	
176-44	48346-48347	-	
176-45	48347-48348	-	
176-46	48348-48349	-	
176-47	48349-48350	-	
176-48	48350-48351	-	
176-49	48351-48352	-	
176-50	48352-48353	-	
176-51	48353-48354	-	
176-52	48354-48355	-	
176-53	48355-48356	-	
176-54	48356-48357	-	
176-55	48357-48358	-	
176-56	48358-48359	-	
176-57	48359-48360	-	
176-58	48360-48361	-	
176-59	48361-48362	-	
176-60	48362-48363	-	
176-61	48363-48364	-	
176-62	48364-48365	-	

#Text=2020-03-09 00:00:00-04 SELECT '2020-03-07 00:00:00'::timestamptz + '47 hours'; ?column? ------------------------
177-1	48366-48370	2020	
177-2	48370-48371	-	
177-3	48371-48373	03	
177-4	48373-48374	-	
177-5	48374-48376	09	
177-6	48377-48379	00	
177-7	48379-48380	:	
177-8	48380-48382	00	
177-9	48382-48383	:	
177-10	48383-48385	00	
177-11	48385-48386	-	
177-12	48386-48388	04	
177-13	48389-48395	SELECT	
177-14	48396-48397	'	
177-15	48397-48401	2020	
177-16	48401-48402	-	
177-17	48402-48404	03	
177-18	48404-48405	-	
177-19	48405-48407	07	
177-20	48408-48410	00	
177-21	48410-48411	:	
177-22	48411-48413	00	
177-23	48413-48414	:	
177-24	48414-48416	00	
177-25	48416-48417	'	
177-26	48417-48418	:	
177-27	48418-48419	:	
177-28	48419-48430	timestamptz	
177-29	48431-48432	+	
177-30	48433-48434	'	
177-31	48434-48436	47	
177-32	48437-48442	hours	
177-33	48442-48443	'	
177-34	48443-48444	;	
177-35	48445-48446	?	
177-36	48446-48452	column	
177-37	48452-48453	?	
177-38	48454-48455	-	
177-39	48455-48456	-	
177-40	48456-48457	-	
177-41	48457-48458	-	
177-42	48458-48459	-	
177-43	48459-48460	-	
177-44	48460-48461	-	
177-45	48461-48462	-	
177-46	48462-48463	-	
177-47	48463-48464	-	
177-48	48464-48465	-	
177-49	48465-48466	-	
177-50	48466-48467	-	
177-51	48467-48468	-	
177-52	48468-48469	-	
177-53	48469-48470	-	
177-54	48470-48471	-	
177-55	48471-48472	-	
177-56	48472-48473	-	
177-57	48473-48474	-	
177-58	48474-48475	-	
177-59	48475-48476	-	
177-60	48476-48477	-	
177-61	48477-48478	-	

#Text=2020-03-09 00:00:00-04 SELECT '2020-03-07 00:00:00'::timestamptz + '2 days'; ?column? ------------------------
178-1	48479-48483	2020	
178-2	48483-48484	-	
178-3	48484-48486	03	
178-4	48486-48487	-	
178-5	48487-48489	09	
178-6	48490-48492	00	
178-7	48492-48493	:	
178-8	48493-48495	00	
178-9	48495-48496	:	
178-10	48496-48498	00	
178-11	48498-48499	-	
178-12	48499-48501	04	
178-13	48502-48508	SELECT	
178-14	48509-48510	'	
178-15	48510-48514	2020	
178-16	48514-48515	-	
178-17	48515-48517	03	
178-18	48517-48518	-	
178-19	48518-48520	07	
178-20	48521-48523	00	
178-21	48523-48524	:	
178-22	48524-48526	00	
178-23	48526-48527	:	
178-24	48527-48529	00	
178-25	48529-48530	'	
178-26	48530-48531	:	
178-27	48531-48532	:	
178-28	48532-48543	timestamptz	
178-29	48544-48545	+	
178-30	48546-48547	'	
178-31	48547-48548	2	
178-32	48549-48553	days	
178-33	48553-48554	'	
178-34	48554-48555	;	
178-35	48556-48557	?	
178-36	48557-48563	column	
178-37	48563-48564	?	
178-38	48565-48566	-	
178-39	48566-48567	-	
178-40	48567-48568	-	
178-41	48568-48569	-	
178-42	48569-48570	-	
178-43	48570-48571	-	
178-44	48571-48572	-	
178-45	48572-48573	-	
178-46	48573-48574	-	
178-47	48574-48575	-	
178-48	48575-48576	-	
178-49	48576-48577	-	
178-50	48577-48578	-	
178-51	48578-48579	-	
178-52	48579-48580	-	
178-53	48580-48581	-	
178-54	48581-48582	-	
178-55	48582-48583	-	
178-56	48583-48584	-	
178-57	48584-48585	-	
178-58	48585-48586	-	
178-59	48586-48587	-	
178-60	48587-48588	-	
178-61	48588-48589	-	

#Text=2020-03-09 00:00:00-04 SELECT '2020-03-07 00:00:00'::timestamptz + '2 days -1 hours'; ?column? ------------------------
179-1	48590-48594	2020	
179-2	48594-48595	-	
179-3	48595-48597	03	
179-4	48597-48598	-	
179-5	48598-48600	09	
179-6	48601-48603	00	
179-7	48603-48604	:	
179-8	48604-48606	00	
179-9	48606-48607	:	
179-10	48607-48609	00	
179-11	48609-48610	-	
179-12	48610-48612	04	
179-13	48613-48619	SELECT	
179-14	48620-48621	'	
179-15	48621-48625	2020	
179-16	48625-48626	-	
179-17	48626-48628	03	
179-18	48628-48629	-	
179-19	48629-48631	07	
179-20	48632-48634	00	
179-21	48634-48635	:	
179-22	48635-48637	00	
179-23	48637-48638	:	
179-24	48638-48640	00	
179-25	48640-48641	'	
179-26	48641-48642	:	
179-27	48642-48643	:	
179-28	48643-48654	timestamptz	
179-29	48655-48656	+	
179-30	48657-48658	'	
179-31	48658-48659	2	
179-32	48660-48664	days	
179-33	48665-48666	-	
179-34	48666-48667	1	
179-35	48668-48673	hours	
179-36	48673-48674	'	
179-37	48674-48675	;	
179-38	48676-48677	?	
179-39	48677-48683	column	
179-40	48683-48684	?	
179-41	48685-48686	-	
179-42	48686-48687	-	
179-43	48687-48688	-	
179-44	48688-48689	-	
179-45	48689-48690	-	
179-46	48690-48691	-	
179-47	48691-48692	-	
179-48	48692-48693	-	
179-49	48693-48694	-	
179-50	48694-48695	-	
179-51	48695-48696	-	
179-52	48696-48697	-	
179-53	48697-48698	-	
179-54	48698-48699	-	
179-55	48699-48700	-	
179-56	48700-48701	-	
179-57	48701-48702	-	
179-58	48702-48703	-	
179-59	48703-48704	-	
179-60	48704-48705	-	
179-61	48705-48706	-	
179-62	48706-48707	-	
179-63	48707-48708	-	
179-64	48708-48709	-	

#Text=2020-03-08 23:00:00-04 The first three return the same result, though the last does not because days is computed first, then hours. However, when the first and third queries are run in a different context, i.e., for a different date, they generate different outputs:
180-1	48710-48714	2020	
180-2	48714-48715	-	
180-3	48715-48717	03	
180-4	48717-48718	-	
180-5	48718-48720	08	
180-6	48721-48723	23	
180-7	48723-48724	:	
180-8	48724-48726	00	
180-9	48726-48727	:	
180-10	48727-48729	00	
180-11	48729-48730	-	
180-12	48730-48732	04	
180-13	48733-48736	The	
180-14	48737-48742	first	
180-15	48743-48748	three	
180-16	48749-48755	return	
180-17	48756-48759	the	
180-18	48760-48764	same	
180-19	48765-48771	result	
180-20	48771-48772	,	
180-21	48773-48779	though	
180-22	48780-48783	the	
180-23	48784-48788	last	
180-24	48789-48793	does	
180-25	48794-48797	not	
180-26	48798-48805	because	
180-27	48806-48810	days	
180-28	48811-48813	is	
180-29	48814-48822	computed	
180-30	48823-48828	first	
180-31	48828-48829	,	
180-32	48830-48834	then	
180-33	48835-48840	hours	
180-34	48840-48841	.	
180-35	48842-48849	However	
180-36	48849-48850	,	
180-37	48851-48855	when	
180-38	48856-48859	the	
180-39	48860-48865	first	
180-40	48866-48869	and	
180-41	48870-48875	third	
180-42	48876-48883	queries	
180-43	48884-48887	are	
180-44	48888-48891	run	
180-45	48892-48894	in	
180-46	48895-48896	a	
180-47	48897-48906	different	
180-48	48907-48914	context	
180-49	48914-48915	,	
180-50	48916-48919	i.e	
180-51	48919-48920	.	
180-52	48920-48921	,	
180-53	48922-48925	for	
180-54	48926-48927	a	
180-55	48928-48937	different	
180-56	48938-48942	date	
180-57	48942-48943	,	
180-58	48944-48948	they	
180-59	48949-48957	generate	
180-60	48958-48967	different	
180-61	48968-48975	outputs	
180-62	48975-48976	:	

#Text=SELECT '2020-03-12 00:00:00'::timestamptz + '1 day 23 hours'; ?column? ------------------------ 2020-03-13 23:00:00-04 SELECT '2020-03-12 00:00:00'::timestamptz + '2 days';
181-1	48977-48983	SELECT	
181-2	48984-48985	'	
181-3	48985-48989	2020	
181-4	48989-48990	-	
181-5	48990-48992	03	
181-6	48992-48993	-	
181-7	48993-48995	12	
181-8	48996-48998	00	
181-9	48998-48999	:	
181-10	48999-49001	00	
181-11	49001-49002	:	
181-12	49002-49004	00	
181-13	49004-49005	'	
181-14	49005-49006	:	
181-15	49006-49007	:	
181-16	49007-49018	timestamptz	
181-17	49019-49020	+	
181-18	49021-49022	'	
181-19	49022-49023	1	
181-20	49024-49027	day	
181-21	49028-49030	23	
181-22	49031-49036	hours	
181-23	49036-49037	'	
181-24	49037-49038	;	
181-25	49039-49040	?	
181-26	49040-49046	column	
181-27	49046-49047	?	
181-28	49048-49049	-	
181-29	49049-49050	-	
181-30	49050-49051	-	
181-31	49051-49052	-	
181-32	49052-49053	-	
181-33	49053-49054	-	
181-34	49054-49055	-	
181-35	49055-49056	-	
181-36	49056-49057	-	
181-37	49057-49058	-	
181-38	49058-49059	-	
181-39	49059-49060	-	
181-40	49060-49061	-	
181-41	49061-49062	-	
181-42	49062-49063	-	
181-43	49063-49064	-	
181-44	49064-49065	-	
181-45	49065-49066	-	
181-46	49066-49067	-	
181-47	49067-49068	-	
181-48	49068-49069	-	
181-49	49069-49070	-	
181-50	49070-49071	-	
181-51	49071-49072	-	
181-52	49073-49077	2020	
181-53	49077-49078	-	
181-54	49078-49080	03	
181-55	49080-49081	-	
181-56	49081-49083	13	
181-57	49084-49086	23	
181-58	49086-49087	:	
181-59	49087-49089	00	
181-60	49089-49090	:	
181-61	49090-49092	00	
181-62	49092-49093	-	
181-63	49093-49095	04	
181-64	49096-49102	SELECT	
181-65	49103-49104	'	
181-66	49104-49108	2020	
181-67	49108-49109	-	
181-68	49109-49111	03	
181-69	49111-49112	-	
181-70	49112-49114	12	
181-71	49115-49117	00	
181-72	49117-49118	:	
181-73	49118-49120	00	
181-74	49120-49121	:	
181-75	49121-49123	00	
181-76	49123-49124	'	
181-77	49124-49125	:	
181-78	49125-49126	:	
181-79	49126-49137	timestamptz	
181-80	49138-49139	+	
181-81	49140-49141	'	
181-82	49141-49142	2	
181-83	49143-49147	days	
181-84	49147-49148	'	
181-85	49148-49149	;	

#Text=?column? ------------------------ 2020-03-14 00:00:00-04 When you are inputting interval values, be conscious of the month, day, and second values you specify, and when calling a function that produces interval output, consider how it computes
182-1	49150-49151	?	
182-2	49151-49157	column	
182-3	49157-49158	?	
182-4	49159-49160	-	
182-5	49160-49161	-	
182-6	49161-49162	-	
182-7	49162-49163	-	
182-8	49163-49164	-	
182-9	49164-49165	-	
182-10	49165-49166	-	
182-11	49166-49167	-	
182-12	49167-49168	-	
182-13	49168-49169	-	
182-14	49169-49170	-	
182-15	49170-49171	-	
182-16	49171-49172	-	
182-17	49172-49173	-	
182-18	49173-49174	-	
182-19	49174-49175	-	
182-20	49175-49176	-	
182-21	49176-49177	-	
182-22	49177-49178	-	
182-23	49178-49179	-	
182-24	49179-49180	-	
182-25	49180-49181	-	
182-26	49181-49182	-	
182-27	49182-49183	-	
182-28	49184-49188	2020	
182-29	49188-49189	-	
182-30	49189-49191	03	
182-31	49191-49192	-	
182-32	49192-49194	14	
182-33	49195-49197	00	
182-34	49197-49198	:	
182-35	49198-49200	00	
182-36	49200-49201	:	
182-37	49201-49203	00	
182-38	49203-49204	-	
182-39	49204-49206	04	
182-40	49207-49211	When	
182-41	49212-49215	you	
182-42	49216-49219	are	
182-43	49220-49229	inputting	
182-44	49230-49238	interval	
182-45	49239-49245	values	
182-46	49245-49246	,	
182-47	49247-49249	be	
182-48	49250-49259	conscious	
182-49	49260-49262	of	
182-50	49263-49266	the	
182-51	49267-49272	month	
182-52	49272-49273	,	
182-53	49274-49277	day	
182-54	49277-49278	,	
182-55	49279-49282	and	
182-56	49283-49289	second	
182-57	49290-49296	values	
182-58	49297-49300	you	
182-59	49301-49308	specify	
182-60	49308-49309	,	
182-61	49310-49313	and	
182-62	49314-49318	when	
182-63	49319-49326	calling	
182-64	49327-49328	a	
182-65	49329-49337	function	
182-66	49338-49342	that	
182-67	49343-49351	produces	
182-68	49352-49360	interval	
182-69	49361-49367	output	
182-70	49367-49368	,	
182-71	49369-49377	consider	
182-72	49378-49381	how	
182-73	49382-49384	it	
182-74	49385-49393	computes	

#Text=its output. View or Post Comments pgFormatter Wednesday, July 29, 2020 In my years with Postgres, I have seen some amazingly complex queries posted to the email lists. I have never understood how people can read complex queries with no formatting, e.g., no keyword
183-1	49394-49397	its	
183-2	49398-49404	output	
183-3	49404-49405	.	
183-4	49406-49410	View	
183-5	49411-49413	or	
183-6	49414-49418	Post	
183-7	49419-49427	Comments	
183-8	49428-49439	pgFormatter	
183-9	49440-49449	Wednesday	
183-10	49449-49450	,	
183-11	49451-49455	July	
183-12	49456-49458	29	
183-13	49458-49459	,	
183-14	49460-49464	2020	
183-15	49465-49467	In	
183-16	49468-49470	my	
183-17	49471-49476	years	
183-18	49477-49481	with	
183-19	49482-49490	Postgres	
183-20	49490-49491	,	
183-21	49492-49493	I	
183-22	49494-49498	have	
183-23	49499-49503	seen	
183-24	49504-49508	some	
183-25	49509-49518	amazingly	
183-26	49519-49526	complex	
183-27	49527-49534	queries	
183-28	49535-49541	posted	
183-29	49542-49544	to	
183-30	49545-49548	the	
183-31	49549-49554	email	
183-32	49555-49560	lists	
183-33	49560-49561	.	
183-34	49562-49563	I	
183-35	49564-49568	have	
183-36	49569-49574	never	
183-37	49575-49585	understood	
183-38	49586-49589	how	
183-39	49590-49596	people	
183-40	49597-49600	can	
183-41	49601-49605	read	
183-42	49606-49613	complex	
183-43	49614-49621	queries	
183-44	49622-49626	with	
183-45	49627-49629	no	
183-46	49630-49640	formatting	
183-47	49640-49641	,	
183-48	49642-49645	e.g	
183-49	49645-49646	.	
183-50	49646-49647	,	
183-51	49648-49650	no	
183-52	49651-49658	keyword	

#Text=capitalization, no indenting, no line breaks for new clauses: select n.nspname as "Schema", p.proname as "Name", pg_catalog.format_type(p.prorettype, null) as "Result data type", case
184-1	49659-49673	capitalization	
184-2	49673-49674	,	
184-3	49675-49677	no	
184-4	49678-49687	indenting	
184-5	49687-49688	,	
184-6	49689-49691	no	
184-7	49692-49696	line	
184-8	49697-49703	breaks	
184-9	49704-49707	for	
184-10	49708-49711	new	
184-11	49712-49719	clauses	
184-12	49719-49720	:	
184-13	49721-49727	select	
184-14	49728-49737	n.nspname	
184-15	49738-49740	as	
184-16	49741-49742	"	
184-17	49742-49748	Schema	
184-18	49748-49749	"	
184-19	49749-49750	,	
184-20	49751-49760	p.proname	
184-21	49761-49763	as	
184-22	49764-49765	"	
184-23	49765-49769	Name	
184-24	49769-49770	"	
184-25	49770-49771	,	
184-26	49772-49794	pg_catalog.format_type	
184-27	49794-49795	(	
184-28	49795-49807	p.prorettype	
184-29	49807-49808	,	
184-30	49809-49813	null	
184-31	49813-49814	)	
184-32	49815-49817	as	
184-33	49818-49819	"	
184-34	49819-49825	Result	
184-35	49826-49830	data	
184-36	49831-49835	type	
184-37	49835-49836	"	
184-38	49836-49837	,	
184-39	49838-49842	case	

#Text=when p.pronargs = 0 then cast('*' as pg_catalog.text) else pg_catalog.pg_get_function_arguments(p.oid) end as "Argument data types", pg_catalog.obj_description(p.oid, 'pg_proc') as "Description"
185-1	49843-49847	when	
185-2	49848-49858	p.pronargs	
185-3	49859-49860	=	
185-4	49861-49862	0	
185-5	49863-49867	then	
185-6	49868-49872	cast	
185-7	49872-49873	(	
185-8	49873-49874	'	
185-9	49874-49875	*	
185-10	49875-49876	'	
185-11	49877-49879	as	
185-12	49880-49895	pg_catalog.text	
185-13	49895-49896	)	
185-14	49897-49901	else	
185-15	49902-49938	pg_catalog.pg_get_function_arguments	
185-16	49938-49939	(	
185-17	49939-49944	p.oid	
185-18	49944-49945	)	
185-19	49946-49949	end	
185-20	49950-49952	as	
185-21	49953-49954	"	
185-22	49954-49962	Argument	
185-23	49963-49967	data	
185-24	49968-49973	types	
185-25	49973-49974	"	
185-26	49974-49975	,	
185-27	49976-50002	pg_catalog.obj_description	
185-28	50002-50003	(	
185-29	50003-50008	p.oid	
185-30	50008-50009	,	
185-31	50010-50011	'	
185-32	50011-50018	pg_proc	
185-33	50018-50019	'	
185-34	50019-50020	)	
185-35	50021-50023	as	
185-36	50024-50025	"	
185-37	50025-50036	Description	
185-38	50036-50037	"	

#Text=from pg_catalog.pg_proc p left join pg_catalog.pg_namespace n on n.oid = p.pronamespace where p.prokind = 'a' and n.nspname <> 'pg_catalog' and n.nspname <> 'information_schema' and pg_catalog.pg_function_is_visible(p.oid) order by 1, 2, 4;
186-1	50038-50042	from	
186-2	50043-50061	pg_catalog.pg_proc	
186-3	50062-50063	p	
186-4	50064-50068	left	
186-5	50069-50073	join	
186-6	50074-50097	pg_catalog.pg_namespace	
186-7	50098-50099	n	
186-8	50100-50102	on	
186-9	50103-50108	n.oid	
186-10	50109-50110	=	
186-11	50111-50125	p.pronamespace	
186-12	50126-50131	where	
186-13	50132-50141	p.prokind	
186-14	50142-50143	=	
186-15	50144-50145	'	
186-16	50145-50146	a	
186-17	50146-50147	'	
186-18	50148-50151	and	
186-19	50152-50161	n.nspname	
186-20	50162-50163	<	
186-21	50163-50164	>	
186-22	50165-50166	'	
186-23	50166-50176	pg_catalog	
186-24	50176-50177	'	
186-25	50178-50181	and	
186-26	50182-50191	n.nspname	
186-27	50192-50193	<	
186-28	50193-50194	>	
186-29	50195-50196	'	
186-30	50196-50214	information_schema	
186-31	50214-50215	'	
186-32	50216-50219	and	
186-33	50220-50253	pg_catalog.pg_function_is_visible	
186-34	50253-50254	(	
186-35	50254-50259	p.oid	
186-36	50259-50260	)	
186-37	50261-50266	order	
186-38	50267-50269	by	
186-39	50270-50271	1	
186-40	50271-50272	,	
186-41	50273-50274	2	
186-42	50274-50275	,	
186-43	50276-50277	4	
186-44	50277-50278	;	

#Text=Obviously, some people can read such queries, but I never can. I rely on clean formatting to conceptually understand queries and detect errors. Some people have no trouble understanding, but I find this much clearer: SELECT n.nspname AS "Schema", p.proname AS "Name",
187-1	50279-50288	Obviously	
187-2	50288-50289	,	
187-3	50290-50294	some	
187-4	50295-50301	people	
187-5	50302-50305	can	
187-6	50306-50310	read	
187-7	50311-50315	such	
187-8	50316-50323	queries	
187-9	50323-50324	,	
187-10	50325-50328	but	
187-11	50329-50330	I	
187-12	50331-50336	never	
187-13	50337-50340	can	
187-14	50340-50341	.	
187-15	50342-50343	I	
187-16	50344-50348	rely	
187-17	50349-50351	on	
187-18	50352-50357	clean	
187-19	50358-50368	formatting	
187-20	50369-50371	to	
187-21	50372-50384	conceptually	
187-22	50385-50395	understand	
187-23	50396-50403	queries	
187-24	50404-50407	and	
187-25	50408-50414	detect	
187-26	50415-50421	errors	
187-27	50421-50422	.	
187-28	50423-50427	Some	
187-29	50428-50434	people	
187-30	50435-50439	have	
187-31	50440-50442	no	
187-32	50443-50450	trouble	
187-33	50451-50464	understanding	
187-34	50464-50465	,	
187-35	50466-50469	but	
187-36	50470-50471	I	
187-37	50472-50476	find	
187-38	50477-50481	this	
187-39	50482-50486	much	
187-40	50487-50494	clearer	
187-41	50494-50495	:	
187-42	50496-50502	SELECT	
187-43	50503-50512	n.nspname	
187-44	50513-50515	AS	
187-45	50516-50517	"	
187-46	50517-50523	Schema	
187-47	50523-50524	"	
187-48	50524-50525	,	
187-49	50526-50535	p.proname	
187-50	50536-50538	AS	
187-51	50539-50540	"	
187-52	50540-50544	Name	
187-53	50544-50545	"	
187-54	50545-50546	,	

#Text=pg_catalog.format_type(p.prorettype, NULL) AS "Result data type", CASE WHEN p.pronargs = 0 THEN CAST('*' AS pg_catalog.text) ELSE pg_catalog.pg_get_function_arguments(p.oid)
188-1	50547-50569	pg_catalog.format_type	
188-2	50569-50570	(	
188-3	50570-50582	p.prorettype	
188-4	50582-50583	,	
188-5	50584-50588	NULL	
188-6	50588-50589	)	
188-7	50590-50592	AS	
188-8	50593-50594	"	
188-9	50594-50600	Result	
188-10	50601-50605	data	
188-11	50606-50610	type	
188-12	50610-50611	"	
188-13	50611-50612	,	
188-14	50613-50617	CASE	
188-15	50618-50622	WHEN	
188-16	50623-50633	p.pronargs	
188-17	50634-50635	=	
188-18	50636-50637	0	
188-19	50638-50642	THEN	
188-20	50643-50647	CAST	
188-21	50647-50648	(	
188-22	50648-50649	'	
188-23	50649-50650	*	
188-24	50650-50651	'	
188-25	50652-50654	AS	
188-26	50655-50670	pg_catalog.text	
188-27	50670-50671	)	
188-28	50672-50676	ELSE	
188-29	50677-50713	pg_catalog.pg_get_function_arguments	
188-30	50713-50714	(	
188-31	50714-50719	p.oid	
188-32	50719-50720	)	

#Text=END AS "Argument data types", pg_catalog.obj_description(p.oid, 'pg_proc') AS "Description" FROM pg_catalog.pg_proc p LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.prokind = 'a'
189-1	50721-50724	END	
189-2	50725-50727	AS	
189-3	50728-50729	"	
189-4	50729-50737	Argument	
189-5	50738-50742	data	
189-6	50743-50748	types	
189-7	50748-50749	"	
189-8	50749-50750	,	
189-9	50751-50777	pg_catalog.obj_description	
189-10	50777-50778	(	
189-11	50778-50783	p.oid	
189-12	50783-50784	,	
189-13	50785-50786	'	
189-14	50786-50793	pg_proc	
189-15	50793-50794	'	
189-16	50794-50795	)	
189-17	50796-50798	AS	
189-18	50799-50800	"	
189-19	50800-50811	Description	
189-20	50811-50812	"	
189-21	50813-50817	FROM	
189-22	50818-50836	pg_catalog.pg_proc	
189-23	50837-50838	p	
189-24	50839-50843	LEFT	
189-25	50844-50848	JOIN	
189-26	50849-50872	pg_catalog.pg_namespace	
189-27	50873-50874	n	
189-28	50875-50877	ON	
189-29	50878-50883	n.oid	
189-30	50884-50885	=	
189-31	50886-50900	p.pronamespace	
189-32	50901-50906	WHERE	
189-33	50907-50916	p.prokind	
189-34	50917-50918	=	
189-35	50919-50920	'	
189-36	50920-50921	a	
189-37	50921-50922	'	

#Text=AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema' AND pg_catalog.pg_function_is_visible(p.oid) ORDER BY 1, 2, 4;
190-1	50923-50926	AND	
190-2	50927-50936	n.nspname	
190-3	50937-50938	<	
190-4	50938-50939	>	
190-5	50940-50941	'	
190-6	50941-50951	pg_catalog	
190-7	50951-50952	'	
190-8	50953-50956	AND	
190-9	50957-50966	n.nspname	
190-10	50967-50968	<	
190-11	50968-50969	>	
190-12	50970-50971	'	
190-13	50971-50989	information_schema	
190-14	50989-50990	'	
190-15	50991-50994	AND	
190-16	50995-51028	pg_catalog.pg_function_is_visible	
190-17	51028-51029	(	
190-18	51029-51034	p.oid	
190-19	51034-51035	)	
190-20	51036-51041	ORDER	
190-21	51042-51044	BY	
190-22	51045-51046	1	
190-23	51046-51047	,	
190-24	51048-51049	2	
190-25	51049-51050	,	
190-26	51051-51052	4	
190-27	51052-51053	;	

#Text=In the past, I used to clean up queries using a tool designed to reformat Informix 4GL programs, and I would use sed to fix some things the tool missed. That was obviously far from ideal, so last year I tried Gilles Darold's pgFormatter. My first test was to run the sql files I use for my presentations through the formatter.
191-1	51054-51056	In	
191-2	51057-51060	the	
191-3	51061-51065	past	
191-4	51065-51066	,	
191-5	51067-51068	I	
191-6	51069-51073	used	
191-7	51074-51076	to	
191-8	51077-51082	clean	
191-9	51083-51085	up	
191-10	51086-51093	queries	
191-11	51094-51099	using	
191-12	51100-51101	a	
191-13	51102-51106	tool	
191-14	51107-51115	designed	
191-15	51116-51118	to	
191-16	51119-51127	reformat	
191-17	51128-51136	Informix	
191-18	51137-51140	4GL	
191-19	51141-51149	programs	
191-20	51149-51150	,	
191-21	51151-51154	and	
191-22	51155-51156	I	
191-23	51157-51162	would	
191-24	51163-51166	use	
191-25	51167-51170	sed	
191-26	51171-51173	to	
191-27	51174-51177	fix	
191-28	51178-51182	some	
191-29	51183-51189	things	
191-30	51190-51193	the	
191-31	51194-51198	tool	
191-32	51199-51205	missed	
191-33	51205-51206	.	
191-34	51207-51211	That	
191-35	51212-51215	was	
191-36	51216-51225	obviously	
191-37	51226-51229	far	
191-38	51230-51234	from	
191-39	51235-51240	ideal	
191-40	51240-51241	,	
191-41	51242-51244	so	
191-42	51245-51249	last	
191-43	51250-51254	year	
191-44	51255-51256	I	
191-45	51257-51262	tried	
191-46	51263-51269	Gilles	
191-47	51270-51278	Darold's	
191-48	51279-51290	pgFormatter	
191-49	51290-51291	.	
191-50	51292-51294	My	
191-51	51295-51300	first	
191-52	51301-51305	test	
191-53	51306-51309	was	
191-54	51310-51312	to	
191-55	51313-51316	run	
191-56	51317-51320	the	
191-57	51321-51324	sql	
191-58	51325-51330	files	
191-59	51331-51332	I	
191-60	51333-51336	use	
191-61	51337-51340	for	
191-62	51341-51343	my	
191-63	51344-51357	presentations	
191-64	51358-51365	through	
191-65	51366-51369	the	
191-66	51370-51379	formatter	
191-67	51379-51380	.	

#Text=I found a few problems that Gilles fixed quickly. I then ran the Postgres regression test queries through the formatter, which turned up more problems. Again, Gilles fixed them, and I could then run all 78k lines of sql queries from the regression tests with satisfactory results.
192-1	51381-51382	I	
192-2	51383-51388	found	
192-3	51389-51390	a	
192-4	51391-51394	few	
192-5	51395-51403	problems	
192-6	51404-51408	that	
192-7	51409-51415	Gilles	
192-8	51416-51421	fixed	
192-9	51422-51429	quickly	
192-10	51429-51430	.	
192-11	51431-51432	I	
192-12	51433-51437	then	
192-13	51438-51441	ran	
192-14	51442-51445	the	
192-15	51446-51454	Postgres	
192-16	51455-51465	regression	
192-17	51466-51470	test	
192-18	51471-51478	queries	
192-19	51479-51486	through	
192-20	51487-51490	the	
192-21	51491-51500	formatter	
192-22	51500-51501	,	
192-23	51502-51507	which	
192-24	51508-51514	turned	
192-25	51515-51517	up	
192-26	51518-51522	more	
192-27	51523-51531	problems	
192-28	51531-51532	.	
192-29	51533-51538	Again	
192-30	51538-51539	,	
192-31	51540-51546	Gilles	
192-32	51547-51552	fixed	
192-33	51553-51557	them	
192-34	51557-51558	,	
192-35	51559-51562	and	
192-36	51563-51564	I	
192-37	51565-51570	could	
192-38	51571-51575	then	
192-39	51576-51579	run	
192-40	51580-51583	all	
192-41	51584-51587	78k	
192-42	51588-51593	lines	
192-43	51594-51596	of	
192-44	51597-51600	sql	
192-45	51601-51608	queries	
192-46	51609-51613	from	
192-47	51614-51617	the	
192-48	51618-51628	regression	
192-49	51629-51634	tests	
192-50	51635-51639	with	
192-51	51640-51652	satisfactory	
192-52	51653-51660	results	
192-53	51660-51661	.	

#Text=Now, when I am presented with a query that looks like the first version, I run to pgFormatter, and with my favorite flags, I get a query that looks like I typed it. View or Post Comments Writing Style Monday, July 27, 2020 There seem to be as many methods of writing sql queries as ways of writing essays. While spacing, capitalization, and naming are all personal preferences, there are also logical arguments for why
193-1	51662-51665	Now	
193-2	51665-51666	,	
193-3	51667-51671	when	
193-4	51672-51673	I	
193-5	51674-51676	am	
193-6	51677-51686	presented	
193-7	51687-51691	with	
193-8	51692-51693	a	
193-9	51694-51699	query	
193-10	51700-51704	that	
193-11	51705-51710	looks	
193-12	51711-51715	like	
193-13	51716-51719	the	
193-14	51720-51725	first	
193-15	51726-51733	version	
193-16	51733-51734	,	
193-17	51735-51736	I	
193-18	51737-51740	run	
193-19	51741-51743	to	
193-20	51744-51755	pgFormatter	
193-21	51755-51756	,	
193-22	51757-51760	and	
193-23	51761-51765	with	
193-24	51766-51768	my	
193-25	51769-51777	favorite	
193-26	51778-51783	flags	
193-27	51783-51784	,	
193-28	51785-51786	I	
193-29	51787-51790	get	
193-30	51791-51792	a	
193-31	51793-51798	query	
193-32	51799-51803	that	
193-33	51804-51809	looks	
193-34	51810-51814	like	
193-35	51815-51816	I	
193-36	51817-51822	typed	
193-37	51823-51825	it	
193-38	51825-51826	.	
193-39	51827-51831	View	
193-40	51832-51834	or	
193-41	51835-51839	Post	
193-42	51840-51848	Comments	
193-43	51849-51856	Writing	
193-44	51857-51862	Style	
193-45	51863-51869	Monday	
193-46	51869-51870	,	
193-47	51871-51875	July	
193-48	51876-51878	27	
193-49	51878-51879	,	
193-50	51880-51884	2020	
193-51	51885-51890	There	
193-52	51891-51895	seem	
193-53	51896-51898	to	
193-54	51899-51901	be	
193-55	51902-51904	as	
193-56	51905-51909	many	
193-57	51910-51917	methods	
193-58	51918-51920	of	
193-59	51921-51928	writing	
193-60	51929-51932	sql	
193-61	51933-51940	queries	
193-62	51941-51943	as	
193-63	51944-51948	ways	
193-64	51949-51951	of	
193-65	51952-51959	writing	
193-66	51960-51966	essays	
193-67	51966-51967	.	
193-68	51968-51973	While	
193-69	51974-51981	spacing	
193-70	51981-51982	,	
193-71	51983-51997	capitalization	
193-72	51997-51998	,	
193-73	51999-52002	and	
193-74	52003-52009	naming	
193-75	52010-52013	are	
193-76	52014-52017	all	
193-77	52018-52026	personal	
193-78	52027-52038	preferences	
193-79	52038-52039	,	
193-80	52040-52045	there	
193-81	52046-52049	are	
193-82	52050-52054	also	
193-83	52055-52062	logical	
193-84	52063-52072	arguments	
193-85	52073-52076	for	
193-86	52077-52080	why	

#Text=certain styles are better than others. This web page outlines one set of styles, based on Joe Celko's SQL Programming Style. While I don't agree with all the style decisions, I feel it is a good way to think about your own style decisions and increase style consistency.
194-1	52081-52088	certain	
194-2	52089-52095	styles	
194-3	52096-52099	are	
194-4	52100-52106	better	
194-5	52107-52111	than	
194-6	52112-52118	others	
194-7	52118-52119	.	
194-8	52120-52124	This	
194-9	52125-52128	web	
194-10	52129-52133	page	
194-11	52134-52142	outlines	
194-12	52143-52146	one	
194-13	52147-52150	set	
194-14	52151-52153	of	
194-15	52154-52160	styles	
194-16	52160-52161	,	
194-17	52162-52167	based	
194-18	52168-52170	on	
194-19	52171-52174	Joe	
194-20	52175-52182	Celko's	
194-21	52183-52186	SQL	
194-22	52187-52198	Programming	
194-23	52199-52204	Style	
194-24	52204-52205	.	
194-25	52206-52211	While	
194-26	52212-52213	I	
194-27	52214-52219	don't	
194-28	52220-52225	agree	
194-29	52226-52230	with	
194-30	52231-52234	all	
194-31	52235-52238	the	
194-32	52239-52244	style	
194-33	52245-52254	decisions	
194-34	52254-52255	,	
194-35	52256-52257	I	
194-36	52258-52262	feel	
194-37	52263-52265	it	
194-38	52266-52268	is	
194-39	52269-52270	a	
194-40	52271-52275	good	
194-41	52276-52279	way	
194-42	52280-52282	to	
194-43	52283-52288	think	
194-44	52289-52294	about	
194-45	52295-52299	your	
194-46	52300-52303	own	
194-47	52304-52309	style	
194-48	52310-52319	decisions	
194-49	52320-52323	and	
194-50	52324-52332	increase	
194-51	52333-52338	style	
194-52	52339-52350	consistency	
194-53	52350-52351	.	

#Text=View or Post Comments Encryption at Rest Friday, July 24, 2020 There are many security guides that require encryption at rest. However, it is unclear exactly what "at rest" means. Encrypted at rest can potentially mean encrypted when the:
195-1	52352-52356	View	
195-2	52357-52359	or	
195-3	52360-52364	Post	
195-4	52365-52373	Comments	
195-5	52374-52384	Encryption	
195-6	52385-52387	at	
195-7	52388-52392	Rest	
195-8	52393-52399	Friday	
195-9	52399-52400	,	
195-10	52401-52405	July	
195-11	52406-52408	24	
195-12	52408-52409	,	
195-13	52410-52414	2020	
195-14	52415-52420	There	
195-15	52421-52424	are	
195-16	52425-52429	many	
195-17	52430-52438	security	
195-18	52439-52445	guides	
195-19	52446-52450	that	
195-20	52451-52458	require	
195-21	52459-52469	encryption	
195-22	52470-52472	at	
195-23	52473-52477	rest	
195-24	52477-52478	.	
195-25	52479-52486	However	
195-26	52486-52487	,	
195-27	52488-52490	it	
195-28	52491-52493	is	
195-29	52494-52501	unclear	
195-30	52502-52509	exactly	
195-31	52510-52514	what	
195-32	52515-52516	"	
195-33	52516-52518	at	
195-34	52519-52523	rest	
195-35	52523-52524	"	
195-36	52525-52530	means	
195-37	52530-52531	.	
195-38	52532-52541	Encrypted	
195-39	52542-52544	at	
195-40	52545-52549	rest	
195-41	52550-52553	can	
195-42	52554-52565	potentially	
195-43	52566-52570	mean	
195-44	52571-52580	encrypted	
195-45	52581-52585	when	
195-46	52586-52589	the	
195-47	52589-52590	:	

#Text=Storage is powered off File system is unmounted Database is not running Data is in the kernel's file system cache Write-ahead log is in archive storage Data is in backups Data is in the database process's memory
196-1	52591-52598	Storage	
196-2	52599-52601	is	
196-3	52602-52609	powered	
196-4	52610-52613	off	
196-5	52614-52618	File	
196-6	52619-52625	system	
196-7	52626-52628	is	
196-8	52629-52638	unmounted	
196-9	52639-52647	Database	
196-10	52648-52650	is	
196-11	52651-52654	not	
196-12	52655-52662	running	
196-13	52663-52667	Data	
196-14	52668-52670	is	
196-15	52671-52673	in	
196-16	52674-52677	the	
196-17	52678-52686	kernel's	
196-18	52687-52691	file	
196-19	52692-52698	system	
196-20	52699-52704	cache	
196-21	52705-52716	Write-ahead	
196-22	52717-52720	log	
196-23	52721-52723	is	
196-24	52724-52726	in	
196-25	52727-52734	archive	
196-26	52735-52742	storage	
196-27	52743-52747	Data	
196-28	52748-52750	is	
196-29	52751-52753	in	
196-30	52754-52761	backups	
196-31	52762-52766	Data	
196-32	52767-52769	is	
196-33	52770-52772	in	
196-34	52773-52776	the	
196-35	52777-52785	database	
196-36	52786-52795	process's	
196-37	52796-52802	memory	

#Text=Odds are some of these items are required to implement a guide's "encryption at rest," but maybe not all of them. The last one is particularly difficult, especially since the unlock key probably also has to be somewhere in process memory. When implementing encryption at rest, it is good to be clear exactly what encryption levels are required, and what risks they are designed to minimize. View or Post Comments
197-1	52803-52807	Odds	
197-2	52808-52811	are	
197-3	52812-52816	some	
197-4	52817-52819	of	
197-5	52820-52825	these	
197-6	52826-52831	items	
197-7	52832-52835	are	
197-8	52836-52844	required	
197-9	52845-52847	to	
197-10	52848-52857	implement	
197-11	52858-52859	a	
197-12	52860-52867	guide's	
197-13	52868-52869	"	
197-14	52869-52879	encryption	
197-15	52880-52882	at	
197-16	52883-52887	rest	
197-17	52887-52888	,	
197-18	52888-52889	"	
197-19	52890-52893	but	
197-20	52894-52899	maybe	
197-21	52900-52903	not	
197-22	52904-52907	all	
197-23	52908-52910	of	
197-24	52911-52915	them	
197-25	52915-52916	.	
197-26	52917-52920	The	
197-27	52921-52925	last	
197-28	52926-52929	one	
197-29	52930-52932	is	
197-30	52933-52945	particularly	
197-31	52946-52955	difficult	
197-32	52955-52956	,	
197-33	52957-52967	especially	
197-34	52968-52973	since	
197-35	52974-52977	the	
197-36	52978-52984	unlock	
197-37	52985-52988	key	
197-38	52989-52997	probably	
197-39	52998-53002	also	
197-40	53003-53006	has	
197-41	53007-53009	to	
197-42	53010-53012	be	
197-43	53013-53022	somewhere	
197-44	53023-53025	in	
197-45	53026-53033	process	
197-46	53034-53040	memory	
197-47	53040-53041	.	
197-48	53042-53046	When	
197-49	53047-53059	implementing	
197-50	53060-53070	encryption	
197-51	53071-53073	at	
197-52	53074-53078	rest	
197-53	53078-53079	,	
197-54	53080-53082	it	
197-55	53083-53085	is	
197-56	53086-53090	good	
197-57	53091-53093	to	
197-58	53094-53096	be	
197-59	53097-53102	clear	
197-60	53103-53110	exactly	
197-61	53111-53115	what	
197-62	53116-53126	encryption	
197-63	53127-53133	levels	
197-64	53134-53137	are	
197-65	53138-53146	required	
197-66	53146-53147	,	
197-67	53148-53151	and	
197-68	53152-53156	what	
197-69	53157-53162	risks	
197-70	53163-53167	they	
197-71	53168-53171	are	
197-72	53172-53180	designed	
197-73	53181-53183	to	
197-74	53184-53192	minimize	
197-75	53192-53193	.	
197-76	53194-53198	View	
197-77	53199-53201	or	
197-78	53202-53206	Post	
197-79	53207-53215	Comments	

#Text=Passwords in Log files Wednesday, July 22, 2020 No one likes user passwords appearing in log files (except the bad guys/gals). Because Postgres uses sql queries to manage user accounts, including password assignment, it is possible for
198-1	53216-53225	Passwords	
198-2	53226-53228	in	
198-3	53229-53232	Log	
198-4	53233-53238	files	
198-5	53239-53248	Wednesday	
198-6	53248-53249	,	
198-7	53250-53254	July	
198-8	53255-53257	22	
198-9	53257-53258	,	
198-10	53259-53263	2020	
198-11	53264-53266	No	
198-12	53267-53270	one	
198-13	53271-53276	likes	
198-14	53277-53281	user	
198-15	53282-53291	passwords	
198-16	53292-53301	appearing	
198-17	53302-53304	in	
198-18	53305-53308	log	
198-19	53309-53314	files	
198-20	53315-53316	(	
198-21	53316-53322	except	
198-22	53323-53326	the	
198-23	53327-53330	bad	
198-24	53331-53335	guys	
198-25	53335-53336	/	
198-26	53336-53340	gals	
198-27	53340-53341	)	
198-28	53341-53342	.	
198-29	53343-53350	Because	
198-30	53351-53359	Postgres	
198-31	53360-53364	uses	
198-32	53365-53368	sql	
198-33	53369-53376	queries	
198-34	53377-53379	to	
198-35	53380-53386	manage	
198-36	53387-53391	user	
198-37	53392-53400	accounts	
198-38	53400-53401	,	
198-39	53402-53411	including	
198-40	53412-53420	password	
198-41	53421-53431	assignment	
198-42	53431-53432	,	
198-43	53433-53435	it	
198-44	53436-53438	is	
198-45	53439-53447	possible	
198-46	53448-53451	for	

#Text=passwords to appear in the server logs if, for example, log_statement is enabled or an error is generated, depending on the setting of log_min_error_statement. One solution is to encrypt the password manually before issuing the query, but that can be error-prone. A simpler solution is to use psql to
199-1	53452-53461	passwords	
199-2	53462-53464	to	
199-3	53465-53471	appear	
199-4	53472-53474	in	
199-5	53475-53478	the	
199-6	53479-53485	server	
199-7	53486-53490	logs	
199-8	53491-53493	if	
199-9	53493-53494	,	
199-10	53495-53498	for	
199-11	53499-53506	example	
199-12	53506-53507	,	
199-13	53508-53521	log_statement	
199-14	53522-53524	is	
199-15	53525-53532	enabled	
199-16	53533-53535	or	
199-17	53536-53538	an	
199-18	53539-53544	error	
199-19	53545-53547	is	
199-20	53548-53557	generated	
199-21	53557-53558	,	
199-22	53559-53568	depending	
199-23	53569-53571	on	
199-24	53572-53575	the	
199-25	53576-53583	setting	
199-26	53584-53586	of	
199-27	53587-53610	log_min_error_statement	
199-28	53610-53611	.	
199-29	53612-53615	One	
199-30	53616-53624	solution	
199-31	53625-53627	is	
199-32	53628-53630	to	
199-33	53631-53638	encrypt	
199-34	53639-53642	the	
199-35	53643-53651	password	
199-36	53652-53660	manually	
199-37	53661-53667	before	
199-38	53668-53675	issuing	
199-39	53676-53679	the	
199-40	53680-53685	query	
199-41	53685-53686	,	
199-42	53687-53690	but	
199-43	53691-53695	that	
199-44	53696-53699	can	
199-45	53700-53702	be	
199-46	53703-53714	error-prone	
199-47	53714-53715	.	
199-48	53716-53717	A	
199-49	53718-53725	simpler	
199-50	53726-53734	solution	
199-51	53735-53737	is	
199-52	53738-53740	to	
199-53	53741-53744	use	
199-54	53745-53749	psql	
199-55	53750-53752	to	

#Text=automatically encrypt passwords before sending them to the server, e.g.: SET client_min_messages = 'log'; SET log_statement = 'all'; \\password postgres Enter new password: Enter it again: LOG: statement: show password_encryption LOG:
200-1	53753-53766	automatically	
200-2	53767-53774	encrypt	
200-3	53775-53784	passwords	
200-4	53785-53791	before	
200-5	53792-53799	sending	
200-6	53800-53804	them	
200-7	53805-53807	to	
200-8	53808-53811	the	
200-9	53812-53818	server	
200-10	53818-53819	,	
200-11	53820-53823	e.g	
200-12	53823-53824	.	
200-13	53824-53825	:	
200-14	53826-53829	SET	
200-15	53830-53849	client_min_messages	
200-16	53850-53851	=	
200-17	53852-53853	'	
200-18	53853-53856	log	
200-19	53856-53857	'	
200-20	53857-53858	;	
200-21	53859-53862	SET	
200-22	53863-53876	log_statement	
200-23	53877-53878	=	
200-24	53879-53880	'	
200-25	53880-53883	all	
200-26	53883-53884	'	
200-27	53884-53885	;	
200-28	53886-53887	\	
200-29	53887-53895	password	
200-30	53896-53904	postgres	
200-31	53905-53910	Enter	
200-32	53911-53914	new	
200-33	53915-53923	password	
200-34	53923-53924	:	
200-35	53925-53930	Enter	
200-36	53931-53933	it	
200-37	53934-53939	again	
200-38	53939-53940	:	
200-39	53941-53944	LOG	
200-40	53944-53945	:	
200-41	53946-53955	statement	
200-42	53955-53956	:	
200-43	53957-53961	show	
200-44	53962-53981	password_encryption	
200-45	53982-53985	LOG	
200-46	53985-53986	:	

#Text=statement: ALTER USER postgres PASSWORD 'md567429efea5606f58dff8f67e3e2ad490' Notice psql runs show password_encryption to determine if md5 or scram-sha-256 should be used. psql then hashes the supplied password and issues an alter user command. While it
201-1	53987-53996	statement	
201-2	53996-53997	:	
201-3	53998-54003	ALTER	
201-4	54004-54008	USER	
201-5	54009-54017	postgres	
201-6	54018-54026	PASSWORD	
201-7	54027-54028	'	
201-8	54028-54063	md567429efea5606f58dff8f67e3e2ad490	
201-9	54063-54064	'	
201-10	54065-54071	Notice	
201-11	54072-54076	psql	
201-12	54077-54081	runs	
201-13	54082-54086	show	
201-14	54087-54106	password_encryption	
201-15	54107-54109	to	
201-16	54110-54119	determine	
201-17	54120-54122	if	
201-18	54123-54126	md5	
201-19	54127-54129	or	
201-20	54130-54139	scram-sha	
201-21	54139-54140	-	
201-22	54140-54143	256	
201-23	54144-54150	should	
201-24	54151-54153	be	
201-25	54154-54158	used	
201-26	54158-54159	.	
201-27	54160-54164	psql	
201-28	54165-54169	then	
201-29	54170-54176	hashes	
201-30	54177-54180	the	
201-31	54181-54189	supplied	
201-32	54190-54198	password	
201-33	54199-54202	and	
201-34	54203-54209	issues	
201-35	54210-54212	an	
201-36	54213-54218	alter	
201-37	54219-54223	user	
201-38	54224-54231	command	
201-39	54231-54232	.	
201-40	54233-54238	While	
201-41	54239-54241	it	

#Text=is not ideal that hashed passwords can appear in the server logs, it is better than having user-typed passwords in the logs. (It might be wise to set log_min_error_statement to "panic" to prevent logging of error queries.) Another secure option is to use syslog to send the logs to a secure server. View or Post Comments Force Password Changes
202-1	54242-54244	is	
202-2	54245-54248	not	
202-3	54249-54254	ideal	
202-4	54255-54259	that	
202-5	54260-54266	hashed	
202-6	54267-54276	passwords	
202-7	54277-54280	can	
202-8	54281-54287	appear	
202-9	54288-54290	in	
202-10	54291-54294	the	
202-11	54295-54301	server	
202-12	54302-54306	logs	
202-13	54306-54307	,	
202-14	54308-54310	it	
202-15	54311-54313	is	
202-16	54314-54320	better	
202-17	54321-54325	than	
202-18	54326-54332	having	
202-19	54333-54343	user-typed	
202-20	54344-54353	passwords	
202-21	54354-54356	in	
202-22	54357-54360	the	
202-23	54361-54365	logs	
202-24	54365-54366	.	
202-25	54367-54368	(	
202-26	54368-54370	It	
202-27	54371-54376	might	
202-28	54377-54379	be	
202-29	54380-54384	wise	
202-30	54385-54387	to	
202-31	54388-54391	set	
202-32	54392-54415	log_min_error_statement	
202-33	54416-54418	to	
202-34	54419-54420	"	
202-35	54420-54425	panic	
202-36	54425-54426	"	
202-37	54427-54429	to	
202-38	54430-54437	prevent	
202-39	54438-54445	logging	
202-40	54446-54448	of	
202-41	54449-54454	error	
202-42	54455-54462	queries	
202-43	54462-54463	.	
202-44	54463-54464	)	
202-45	54465-54472	Another	
202-46	54473-54479	secure	
202-47	54480-54486	option	
202-48	54487-54489	is	
202-49	54490-54492	to	
202-50	54493-54496	use	
202-51	54497-54503	syslog	
202-52	54504-54506	to	
202-53	54507-54511	send	
202-54	54512-54515	the	
202-55	54516-54520	logs	
202-56	54521-54523	to	
202-57	54524-54525	a	
202-58	54526-54532	secure	
202-59	54533-54539	server	
202-60	54539-54540	.	
202-61	54541-54545	View	
202-62	54546-54548	or	
202-63	54549-54553	Post	
202-64	54554-54562	Comments	
202-65	54563-54568	Force	
202-66	54569-54577	Password	
202-67	54578-54585	Changes	

#Text=Monday, July 20, 2020 I have written about the limitations of passwords before. Postgres has limited ability to control passwords — mostly how passwords are transferred and how long passwords remain valid. For more complex password requirements, the Postgres project recommends using an external authentication system that manages passwords like ldap or
203-1	54586-54592	Monday	
203-2	54592-54593	,	
203-3	54594-54598	July	
203-4	54599-54601	20	
203-5	54601-54602	,	
203-6	54603-54607	2020	
203-7	54608-54609	I	
203-8	54610-54614	have	
203-9	54615-54622	written	
203-10	54623-54628	about	
203-11	54629-54632	the	
203-12	54633-54644	limitations	
203-13	54645-54647	of	
203-14	54648-54657	passwords	
203-15	54658-54664	before	
203-16	54664-54665	.	
203-17	54666-54674	Postgres	
203-18	54675-54678	has	
203-19	54679-54686	limited	
203-20	54687-54694	ability	
203-21	54695-54697	to	
203-22	54698-54705	control	
203-23	54706-54715	passwords	
203-24	54716-54717	—	
203-25	54718-54724	mostly	
203-26	54725-54728	how	
203-27	54729-54738	passwords	
203-28	54739-54742	are	
203-29	54743-54754	transferred	
203-30	54755-54758	and	
203-31	54759-54762	how	
203-32	54763-54767	long	
203-33	54768-54777	passwords	
203-34	54778-54784	remain	
203-35	54785-54790	valid	
203-36	54790-54791	.	
203-37	54792-54795	For	
203-38	54796-54800	more	
203-39	54801-54808	complex	
203-40	54809-54817	password	
203-41	54818-54830	requirements	
203-42	54830-54831	,	
203-43	54832-54835	the	
203-44	54836-54844	Postgres	
203-45	54845-54852	project	
203-46	54853-54863	recommends	
203-47	54864-54869	using	
203-48	54870-54872	an	
203-49	54873-54881	external	
203-50	54882-54896	authentication	
203-51	54897-54903	system	
203-52	54904-54908	that	
203-53	54909-54916	manages	
203-54	54917-54926	passwords	
203-55	54927-54931	like	
203-56	54932-54936	ldap	
203-57	54937-54939	or	

#Text=gssapi. Cert authentication has many advantages because it does not require a password. Last year, one big change in password policy was the us nist announcement that periodic password changes are no longer recommended. This article explains why this is a logical approach to security.
204-1	54940-54946	gssapi	
204-2	54946-54947	.	
204-3	54948-54952	Cert	
204-4	54953-54967	authentication	
204-5	54968-54971	has	
204-6	54972-54976	many	
204-7	54977-54987	advantages	
204-8	54988-54995	because	
204-9	54996-54998	it	
204-10	54999-55003	does	
204-11	55004-55007	not	
204-12	55008-55015	require	
204-13	55016-55017	a	
204-14	55018-55026	password	
204-15	55026-55027	.	
204-16	55028-55032	Last	
204-17	55033-55037	year	
204-18	55037-55038	,	
204-19	55039-55042	one	
204-20	55043-55046	big	
204-21	55047-55053	change	
204-22	55054-55056	in	
204-23	55057-55065	password	
204-24	55066-55072	policy	
204-25	55073-55076	was	
204-26	55077-55080	the	
204-27	55081-55083	us	
204-28	55084-55088	nist	
204-29	55089-55101	announcement	
204-30	55102-55106	that	
204-31	55107-55115	periodic	
204-32	55116-55124	password	
204-33	55125-55132	changes	
204-34	55133-55136	are	
204-35	55137-55139	no	
204-36	55140-55146	longer	
204-37	55147-55158	recommended	
204-38	55158-55159	.	
204-39	55160-55164	This	
204-40	55165-55172	article	
204-41	55173-55181	explains	
204-42	55182-55185	why	
204-43	55186-55190	this	
204-44	55191-55193	is	
204-45	55194-55195	a	
204-46	55196-55203	logical	
204-47	55204-55212	approach	
204-48	55213-55215	to	
204-49	55216-55224	security	
204-50	55224-55225	.	

#Text=The new recommendations also suggests the limited value of password complexity requirements. Users occasionally ask for for more complex password management features to be built into Postgres. These new guidelines make it less likely these features will ever be added to core Postgres. View or Post Comments Credential Rotation Using Certificates
205-1	55226-55229	The	
205-2	55230-55233	new	
205-3	55234-55249	recommendations	
205-4	55250-55254	also	
205-5	55255-55263	suggests	
205-6	55264-55267	the	
205-7	55268-55275	limited	
205-8	55276-55281	value	
205-9	55282-55284	of	
205-10	55285-55293	password	
205-11	55294-55304	complexity	
205-12	55305-55317	requirements	
205-13	55317-55318	.	
205-14	55319-55324	Users	
205-15	55325-55337	occasionally	
205-16	55338-55341	ask	
205-17	55342-55345	for	
205-18	55346-55349	for	
205-19	55350-55354	more	
205-20	55355-55362	complex	
205-21	55363-55371	password	
205-22	55372-55382	management	
205-23	55383-55391	features	
205-24	55392-55394	to	
205-25	55395-55397	be	
205-26	55398-55403	built	
205-27	55404-55408	into	
205-28	55409-55417	Postgres	
205-29	55417-55418	.	
205-30	55419-55424	These	
205-31	55425-55428	new	
205-32	55429-55439	guidelines	
205-33	55440-55444	make	
205-34	55445-55447	it	
205-35	55448-55452	less	
205-36	55453-55459	likely	
205-37	55460-55465	these	
205-38	55466-55474	features	
205-39	55475-55479	will	
205-40	55480-55484	ever	
205-41	55485-55487	be	
205-42	55488-55493	added	
205-43	55494-55496	to	
205-44	55497-55501	core	
205-45	55502-55510	Postgres	
205-46	55510-55511	.	
205-47	55512-55516	View	
205-48	55517-55519	or	
205-49	55520-55524	Post	
205-50	55525-55533	Comments	
205-51	55534-55544	Credential	
205-52	55545-55553	Rotation	
205-53	55554-55559	Using	
205-54	55560-55572	Certificates	

#Text=Friday, July 17, 2020 The traditional method of authenticating is local password. Authentication using external password managers is also very popular. However, passwords have known limitations, particularly password selection. Managing password changes can also be complex. If users change their own passwords, the process is simple.
206-1	55573-55579	Friday	
206-2	55579-55580	,	
206-3	55581-55585	July	
206-4	55586-55588	17	
206-5	55588-55589	,	
206-6	55590-55594	2020	
206-7	55595-55598	The	
206-8	55599-55610	traditional	
206-9	55611-55617	method	
206-10	55618-55620	of	
206-11	55621-55635	authenticating	
206-12	55636-55638	is	
206-13	55639-55644	local	
206-14	55645-55653	password	
206-15	55653-55654	.	
206-16	55655-55669	Authentication	
206-17	55670-55675	using	
206-18	55676-55684	external	
206-19	55685-55693	password	
206-20	55694-55702	managers	
206-21	55703-55705	is	
206-22	55706-55710	also	
206-23	55711-55715	very	
206-24	55716-55723	popular	
206-25	55723-55724	.	
206-26	55725-55732	However	
206-27	55732-55733	,	
206-28	55734-55743	passwords	
206-29	55744-55748	have	
206-30	55749-55754	known	
206-31	55755-55766	limitations	
206-32	55766-55767	,	
206-33	55768-55780	particularly	
206-34	55781-55789	password	
206-35	55790-55799	selection	
206-36	55799-55800	.	
206-37	55801-55809	Managing	
206-38	55810-55818	password	
206-39	55819-55826	changes	
206-40	55827-55830	can	
206-41	55831-55835	also	
206-42	55836-55838	be	
206-43	55839-55846	complex	
206-44	55846-55847	.	
206-45	55848-55850	If	
206-46	55851-55856	users	
206-47	55857-55863	change	
206-48	55864-55869	their	
206-49	55870-55873	own	
206-50	55874-55883	passwords	
206-51	55883-55884	,	
206-52	55885-55888	the	
206-53	55889-55896	process	
206-54	55897-55899	is	
206-55	55900-55906	simple	
206-56	55906-55907	.	

#Text=However, if someone else needs to change the password, and there is a delay between the user requesting the change and the change being made, it can be difficult for the user to know when to switch to using the new password. For applications that connect to the database by supplying passwords automatically, password changes can be even more complex. Programming applications to try both old and new passwords is awkward.
207-1	55908-55915	However	
207-2	55915-55916	,	
207-3	55917-55919	if	
207-4	55920-55927	someone	
207-5	55928-55932	else	
207-6	55933-55938	needs	
207-7	55939-55941	to	
207-8	55942-55948	change	
207-9	55949-55952	the	
207-10	55953-55961	password	
207-11	55961-55962	,	
207-12	55963-55966	and	
207-13	55967-55972	there	
207-14	55973-55975	is	
207-15	55976-55977	a	
207-16	55978-55983	delay	
207-17	55984-55991	between	
207-18	55992-55995	the	
207-19	55996-56000	user	
207-20	56001-56011	requesting	
207-21	56012-56015	the	
207-22	56016-56022	change	
207-23	56023-56026	and	
207-24	56027-56030	the	
207-25	56031-56037	change	
207-26	56038-56043	being	
207-27	56044-56048	made	
207-28	56048-56049	,	
207-29	56050-56052	it	
207-30	56053-56056	can	
207-31	56057-56059	be	
207-32	56060-56069	difficult	
207-33	56070-56073	for	
207-34	56074-56077	the	
207-35	56078-56082	user	
207-36	56083-56085	to	
207-37	56086-56090	know	
207-38	56091-56095	when	
207-39	56096-56098	to	
207-40	56099-56105	switch	
207-41	56106-56108	to	
207-42	56109-56114	using	
207-43	56115-56118	the	
207-44	56119-56122	new	
207-45	56123-56131	password	
207-46	56131-56132	.	
207-47	56133-56136	For	
207-48	56137-56149	applications	
207-49	56150-56154	that	
207-50	56155-56162	connect	
207-51	56163-56165	to	
207-52	56166-56169	the	
207-53	56170-56178	database	
207-54	56179-56181	by	
207-55	56182-56191	supplying	
207-56	56192-56201	passwords	
207-57	56202-56215	automatically	
207-58	56215-56216	,	
207-59	56217-56225	password	
207-60	56226-56233	changes	
207-61	56234-56237	can	
207-62	56238-56240	be	
207-63	56241-56245	even	
207-64	56246-56250	more	
207-65	56251-56258	complex	
207-66	56258-56259	.	
207-67	56260-56271	Programming	
207-68	56272-56284	applications	
207-69	56285-56287	to	
207-70	56288-56291	try	
207-71	56292-56296	both	
207-72	56297-56300	old	
207-73	56301-56304	and	
207-74	56305-56308	new	
207-75	56309-56318	passwords	
207-76	56319-56321	is	
207-77	56322-56329	awkward	
207-78	56329-56330	.	

#Text=Instead of using something you know, e.g., passwords, another authentication approach is to use something you have. One ideal method of "something you have" is certificate authentication. It allows for more effective credential rotation because the old and new certificates can be valid at the same time. The process of replacing ssl certificates is: Create a new certificate, signed by a certificate authority in the same certificate chain as the server certificate
208-1	56331-56338	Instead	
208-2	56339-56341	of	
208-3	56342-56347	using	
208-4	56348-56357	something	
208-5	56358-56361	you	
208-6	56362-56366	know	
208-7	56366-56367	,	
208-8	56368-56371	e.g	
208-9	56371-56372	.	
208-10	56372-56373	,	
208-11	56374-56383	passwords	
208-12	56383-56384	,	
208-13	56385-56392	another	
208-14	56393-56407	authentication	
208-15	56408-56416	approach	
208-16	56417-56419	is	
208-17	56420-56422	to	
208-18	56423-56426	use	
208-19	56427-56436	something	
208-20	56437-56440	you	
208-21	56441-56445	have	
208-22	56445-56446	.	
208-23	56447-56450	One	
208-24	56451-56456	ideal	
208-25	56457-56463	method	
208-26	56464-56466	of	
208-27	56467-56468	"	
208-28	56468-56477	something	
208-29	56478-56481	you	
208-30	56482-56486	have	
208-31	56486-56487	"	
208-32	56488-56490	is	
208-33	56491-56502	certificate	
208-34	56503-56517	authentication	
208-35	56517-56518	.	
208-36	56519-56521	It	
208-37	56522-56528	allows	
208-38	56529-56532	for	
208-39	56533-56537	more	
208-40	56538-56547	effective	
208-41	56548-56558	credential	
208-42	56559-56567	rotation	
208-43	56568-56575	because	
208-44	56576-56579	the	
208-45	56580-56583	old	
208-46	56584-56587	and	
208-47	56588-56591	new	
208-48	56592-56604	certificates	
208-49	56605-56608	can	
208-50	56609-56611	be	
208-51	56612-56617	valid	
208-52	56618-56620	at	
208-53	56621-56624	the	
208-54	56625-56629	same	
208-55	56630-56634	time	
208-56	56634-56635	.	
208-57	56636-56639	The	
208-58	56640-56647	process	
208-59	56648-56650	of	
208-60	56651-56660	replacing	
208-61	56661-56664	ssl	
208-62	56665-56677	certificates	
208-63	56678-56680	is	
208-64	56680-56681	:	
208-65	56682-56688	Create	
208-66	56689-56690	a	
208-67	56691-56694	new	
208-68	56695-56706	certificate	
208-69	56706-56707	,	
208-70	56708-56714	signed	
208-71	56715-56717	by	
208-72	56718-56719	a	
208-73	56720-56731	certificate	
208-74	56732-56741	authority	
208-75	56742-56744	in	
208-76	56745-56748	the	
208-77	56749-56753	same	
208-78	56754-56765	certificate	
208-79	56766-56771	chain	
208-80	56772-56774	as	
208-81	56775-56778	the	
208-82	56779-56785	server	
208-83	56786-56797	certificate	

#Text=Replace the old client certificate with the new one Add the old client certificate to the certificate revocation list (crl) After step one, administrators don't need to rush step two because the old and new certificates are both valid. Once step two is complete, step three can be done. Step three is only useful if the server
209-1	56798-56805	Replace	
209-2	56806-56809	the	
209-3	56810-56813	old	
209-4	56814-56820	client	
209-5	56821-56832	certificate	
209-6	56833-56837	with	
209-7	56838-56841	the	
209-8	56842-56845	new	
209-9	56846-56849	one	
209-10	56850-56853	Add	
209-11	56854-56857	the	
209-12	56858-56861	old	
209-13	56862-56868	client	
209-14	56869-56880	certificate	
209-15	56881-56883	to	
209-16	56884-56887	the	
209-17	56888-56899	certificate	
209-18	56900-56910	revocation	
209-19	56911-56915	list	
209-20	56916-56917	(	
209-21	56917-56920	crl	
209-22	56920-56921	)	
209-23	56922-56927	After	
209-24	56928-56932	step	
209-25	56933-56936	one	
209-26	56936-56937	,	
209-27	56938-56952	administrators	
209-28	56953-56958	don't	
209-29	56959-56963	need	
209-30	56964-56966	to	
209-31	56967-56971	rush	
209-32	56972-56976	step	
209-33	56977-56980	two	
209-34	56981-56988	because	
209-35	56989-56992	the	
209-36	56993-56996	old	
209-37	56997-57000	and	
209-38	57001-57004	new	
209-39	57005-57017	certificates	
209-40	57018-57021	are	
209-41	57022-57026	both	
209-42	57027-57032	valid	
209-43	57032-57033	.	
209-44	57034-57038	Once	
209-45	57039-57043	step	
209-46	57044-57047	two	
209-47	57048-57050	is	
209-48	57051-57059	complete	
209-49	57059-57060	,	
209-50	57061-57065	step	
209-51	57066-57071	three	
209-52	57072-57075	can	
209-53	57076-57078	be	
209-54	57079-57083	done	
209-55	57083-57084	.	
209-56	57085-57089	Step	
209-57	57090-57095	three	
209-58	57096-57098	is	
209-59	57099-57103	only	
209-60	57104-57110	useful	
209-61	57111-57113	if	
209-62	57114-57117	the	
209-63	57118-57124	server	

#Text=has been set up to honor certificate revocation lists. You also must set an expiration date for certificates to limit their lifetimes. There is no similar way to do delayed authentication rotation using password-based methods. View or Post Comments Grouping Sets and Null Values Wednesday, July 15, 2020
210-1	57125-57128	has	
210-2	57129-57133	been	
210-3	57134-57137	set	
210-4	57138-57140	up	
210-5	57141-57143	to	
210-6	57144-57149	honor	
210-7	57150-57161	certificate	
210-8	57162-57172	revocation	
210-9	57173-57178	lists	
210-10	57178-57179	.	
210-11	57180-57183	You	
210-12	57184-57188	also	
210-13	57189-57193	must	
210-14	57194-57197	set	
210-15	57198-57200	an	
210-16	57201-57211	expiration	
210-17	57212-57216	date	
210-18	57217-57220	for	
210-19	57221-57233	certificates	
210-20	57234-57236	to	
210-21	57237-57242	limit	
210-22	57243-57248	their	
210-23	57249-57258	lifetimes	
210-24	57258-57259	.	
210-25	57260-57265	There	
210-26	57266-57268	is	
210-27	57269-57271	no	
210-28	57272-57279	similar	
210-29	57280-57283	way	
210-30	57284-57286	to	
210-31	57287-57289	do	
210-32	57290-57297	delayed	
210-33	57298-57312	authentication	
210-34	57313-57321	rotation	
210-35	57322-57327	using	
210-36	57328-57342	password-based	
210-37	57343-57350	methods	
210-38	57350-57351	.	
210-39	57352-57356	View	
210-40	57357-57359	or	
210-41	57360-57364	Post	
210-42	57365-57373	Comments	
210-43	57374-57382	Grouping	
210-44	57383-57387	Sets	
210-45	57388-57391	and	
210-46	57392-57396	Null	
210-47	57397-57403	Values	
210-48	57404-57413	Wednesday	
210-49	57413-57414	,	
210-50	57415-57419	July	
210-51	57420-57422	15	
210-52	57422-57423	,	
210-53	57424-57428	2020	

#Text=You might be aware that grouping sets, along with rollup and cube, allow queries to return additional group by rows. However, because these additional rows are added by Postgres, it is unclear what value to use for summary fields, so the sql standard specifies null for those fields. Let's start with a simple example using a simple group by:
211-1	57429-57432	You	
211-2	57433-57438	might	
211-3	57439-57441	be	
211-4	57442-57447	aware	
211-5	57448-57452	that	
211-6	57453-57461	grouping	
211-7	57462-57466	sets	
211-8	57466-57467	,	
211-9	57468-57473	along	
211-10	57474-57478	with	
211-11	57479-57485	rollup	
211-12	57486-57489	and	
211-13	57490-57494	cube	
211-14	57494-57495	,	
211-15	57496-57501	allow	
211-16	57502-57509	queries	
211-17	57510-57512	to	
211-18	57513-57519	return	
211-19	57520-57530	additional	
211-20	57531-57536	group	
211-21	57537-57539	by	
211-22	57540-57544	rows	
211-23	57544-57545	.	
211-24	57546-57553	However	
211-25	57553-57554	,	
211-26	57555-57562	because	
211-27	57563-57568	these	
211-28	57569-57579	additional	
211-29	57580-57584	rows	
211-30	57585-57588	are	
211-31	57589-57594	added	
211-32	57595-57597	by	
211-33	57598-57606	Postgres	
211-34	57606-57607	,	
211-35	57608-57610	it	
211-36	57611-57613	is	
211-37	57614-57621	unclear	
211-38	57622-57626	what	
211-39	57627-57632	value	
211-40	57633-57635	to	
211-41	57636-57639	use	
211-42	57640-57643	for	
211-43	57644-57651	summary	
211-44	57652-57658	fields	
211-45	57658-57659	,	
211-46	57660-57662	so	
211-47	57663-57666	the	
211-48	57667-57670	sql	
211-49	57671-57679	standard	
211-50	57680-57689	specifies	
211-51	57690-57694	null	
211-52	57695-57698	for	
211-53	57699-57704	those	
211-54	57705-57711	fields	
211-55	57711-57712	.	
211-56	57713-57718	Let's	
211-57	57719-57724	start	
211-58	57725-57729	with	
211-59	57730-57731	a	
211-60	57732-57738	simple	
211-61	57739-57746	example	
211-62	57747-57752	using	
211-63	57753-57754	a	
211-64	57755-57761	simple	
211-65	57762-57767	group	
211-66	57768-57770	by	
211-67	57770-57771	:	

#Text=CREATE TABLE test (x TEXT, y INTEGER); INSERT INTO test VALUES ('a', 0), ('b', 0), (NULL, 0); SELECT x, COUNT(*) FROM test GROUP BY x ORDER BY x;
212-1	57772-57778	CREATE	
212-2	57779-57784	TABLE	
212-3	57785-57789	test	
212-4	57790-57791	(	
212-5	57791-57792	x	
212-6	57793-57797	TEXT	
212-7	57797-57798	,	
212-8	57799-57800	y	
212-9	57801-57808	INTEGER	
212-10	57808-57809	)	
212-11	57809-57810	;	
212-12	57811-57817	INSERT	
212-13	57818-57822	INTO	
212-14	57823-57827	test	
212-15	57828-57834	VALUES	
212-16	57835-57836	(	
212-17	57836-57837	'	
212-18	57837-57838	a	
212-19	57838-57839	'	
212-20	57839-57840	,	
212-21	57841-57842	0	
212-22	57842-57843	)	
212-23	57843-57844	,	
212-24	57845-57846	(	
212-25	57846-57847	'	
212-26	57847-57848	b	
212-27	57848-57849	'	
212-28	57849-57850	,	
212-29	57851-57852	0	
212-30	57852-57853	)	
212-31	57853-57854	,	
212-32	57855-57856	(	
212-33	57856-57860	NULL	
212-34	57860-57861	,	
212-35	57862-57863	0	
212-36	57863-57864	)	
212-37	57864-57865	;	
212-38	57866-57872	SELECT	
212-39	57873-57874	x	
212-40	57874-57875	,	
212-41	57876-57881	COUNT	
212-42	57881-57882	(	
212-43	57882-57883	*	
212-44	57883-57884	)	
212-45	57885-57889	FROM	
212-46	57890-57894	test	
212-47	57895-57900	GROUP	
212-48	57901-57903	BY	
212-49	57904-57905	x	
212-50	57906-57911	ORDER	
212-51	57912-57914	BY	
212-52	57915-57916	x	
212-53	57916-57917	;	

#Text=x | count ---+------- a | b | Each row represents a value in test and each row has a count of one since there is one matching row for each value. The last row is the number of nulls in the table, also one. Here is the same
213-1	57918-57919	x	
213-2	57920-57921	|	
213-3	57922-57927	count	
213-4	57928-57929	-	
213-5	57929-57930	-	
213-6	57930-57931	-	
213-7	57931-57932	+	
213-8	57932-57933	-	
213-9	57933-57934	-	
213-10	57934-57935	-	
213-11	57935-57936	-	
213-12	57936-57937	-	
213-13	57937-57938	-	
213-14	57938-57939	-	
213-15	57940-57941	a	
213-16	57942-57943	|	
213-17	57944-57945	b	
213-18	57946-57947	|	
213-19	57948-57952	Each	
213-20	57953-57956	row	
213-21	57957-57967	represents	
213-22	57968-57969	a	
213-23	57970-57975	value	
213-24	57976-57978	in	
213-25	57979-57983	test	
213-26	57984-57987	and	
213-27	57988-57992	each	
213-28	57993-57996	row	
213-29	57997-58000	has	
213-30	58001-58002	a	
213-31	58003-58008	count	
213-32	58009-58011	of	
213-33	58012-58015	one	
213-34	58016-58021	since	
213-35	58022-58027	there	
213-36	58028-58030	is	
213-37	58031-58034	one	
213-38	58035-58043	matching	
213-39	58044-58047	row	
213-40	58048-58051	for	
213-41	58052-58056	each	
213-42	58057-58062	value	
213-43	58062-58063	.	
213-44	58064-58067	The	
213-45	58068-58072	last	
213-46	58073-58076	row	
213-47	58077-58079	is	
213-48	58080-58083	the	
213-49	58084-58090	number	
213-50	58091-58093	of	
213-51	58094-58099	nulls	
213-52	58100-58102	in	
213-53	58103-58106	the	
213-54	58107-58112	table	
213-55	58112-58113	,	
213-56	58114-58118	also	
213-57	58119-58122	one	
213-58	58122-58123	.	
213-59	58124-58128	Here	
213-60	58129-58131	is	
213-61	58132-58135	the	
213-62	58136-58140	same	

#Text=query using rollup: SELECT x, COUNT(*) FROM test GROUP BY ROLLUP(x) ORDER BY x; x | count ---+------- a | b |
214-1	58141-58146	query	
214-2	58147-58152	using	
214-3	58153-58159	rollup	
214-4	58159-58160	:	
214-5	58161-58167	SELECT	
214-6	58168-58169	x	
214-7	58169-58170	,	
214-8	58171-58176	COUNT	
214-9	58176-58177	(	
214-10	58177-58178	*	
214-11	58178-58179	)	
214-12	58180-58184	FROM	
214-13	58185-58189	test	
214-14	58190-58195	GROUP	
214-15	58196-58198	BY	
214-16	58199-58205	ROLLUP	
214-17	58205-58206	(	
214-18	58206-58207	x	
214-19	58207-58208	)	
214-20	58209-58214	ORDER	
214-21	58215-58217	BY	
214-22	58218-58219	x	
214-23	58219-58220	;	
214-24	58221-58222	x	
214-25	58223-58224	|	
214-26	58225-58230	count	
214-27	58231-58232	-	
214-28	58232-58233	-	
214-29	58233-58234	-	
214-30	58234-58235	+	
214-31	58235-58236	-	
214-32	58236-58237	-	
214-33	58237-58238	-	
214-34	58238-58239	-	
214-35	58239-58240	-	
214-36	58240-58241	-	
214-37	58241-58242	-	
214-38	58243-58244	a	
214-39	58245-58246	|	
214-40	58247-58248	b	
214-41	58249-58250	|	

#Text=Notice there are two rows where the first column is null. Let's verify these are nulls and not something else using psql's \\pset: \\pset null '(null)' SELECT x, COUNT(*) FROM test GROUP BY ROLLUP(x) ORDER BY x;
215-1	58251-58257	Notice	
215-2	58258-58263	there	
215-3	58264-58267	are	
215-4	58268-58271	two	
215-5	58272-58276	rows	
215-6	58277-58282	where	
215-7	58283-58286	the	
215-8	58287-58292	first	
215-9	58293-58299	column	
215-10	58300-58302	is	
215-11	58303-58307	null	
215-12	58307-58308	.	
215-13	58309-58314	Let's	
215-14	58315-58321	verify	
215-15	58322-58327	these	
215-16	58328-58331	are	
215-17	58332-58337	nulls	
215-18	58338-58341	and	
215-19	58342-58345	not	
215-20	58346-58355	something	
215-21	58356-58360	else	
215-22	58361-58366	using	
215-23	58367-58373	psql's	
215-24	58374-58375	\	
215-25	58375-58379	pset	
215-26	58379-58380	:	
215-27	58381-58382	\	
215-28	58382-58386	pset	
215-29	58387-58391	null	
215-30	58392-58393	'	
215-31	58393-58394	(	
215-32	58394-58398	null	
215-33	58398-58399	)	
215-34	58399-58400	'	
215-35	58401-58407	SELECT	
215-36	58408-58409	x	
215-37	58409-58410	,	
215-38	58411-58416	COUNT	
215-39	58416-58417	(	
215-40	58417-58418	*	
215-41	58418-58419	)	
215-42	58420-58424	FROM	
215-43	58425-58429	test	
215-44	58430-58435	GROUP	
215-45	58436-58438	BY	
215-46	58439-58445	ROLLUP	
215-47	58445-58446	(	
215-48	58446-58447	x	
215-49	58447-58448	)	
215-50	58449-58454	ORDER	
215-51	58455-58457	BY	
215-52	58458-58459	x	
215-53	58459-58460	;	

#Text=| count --------+------- (null) | (null) | -- reset the psql NULL display \\pset null '' Yes, they are both null.
216-1	58461-58462	|	
216-2	58463-58468	count	
216-3	58469-58470	-	
216-4	58470-58471	-	
216-5	58471-58472	-	
216-6	58472-58473	-	
216-7	58473-58474	-	
216-8	58474-58475	-	
216-9	58475-58476	-	
216-10	58476-58477	-	
216-11	58477-58478	+	
216-12	58478-58479	-	
216-13	58479-58480	-	
216-14	58480-58481	-	
216-15	58481-58482	-	
216-16	58482-58483	-	
216-17	58483-58484	-	
216-18	58484-58485	-	
216-19	58486-58487	(	
216-20	58487-58491	null	
216-21	58491-58492	)	
216-22	58493-58494	|	
216-23	58495-58496	(	
216-24	58496-58500	null	
216-25	58500-58501	)	
216-26	58502-58503	|	
216-27	58504-58505	-	
216-28	58505-58506	-	
216-29	58507-58512	reset	
216-30	58513-58516	the	
216-31	58517-58521	psql	
216-32	58522-58526	NULL	
216-33	58527-58534	display	
216-34	58535-58536	\	
216-35	58536-58540	pset	
216-36	58541-58545	null	
216-37	58546-58547	'	
216-38	58547-58548	'	
216-39	58549-58552	Yes	
216-40	58552-58553	,	
216-41	58554-58558	they	
216-42	58559-58562	are	
216-43	58563-58567	both	
216-44	58568-58572	null	
216-45	58572-58573	.	

#Text=The first null is the one generated by rollup, and the last row is the number of null values. This is quite confusing. If we expect a column involved in a grouping set-type operation to perhaps contain nulls, how can we distinguish between those values and values added by grouping set-type operations? Well, your first inclination might be to use coalesce:
217-1	58574-58577	The	
217-2	58578-58583	first	
217-3	58584-58588	null	
217-4	58589-58591	is	
217-5	58592-58595	the	
217-6	58596-58599	one	
217-7	58600-58609	generated	
217-8	58610-58612	by	
217-9	58613-58619	rollup	
217-10	58619-58620	,	
217-11	58621-58624	and	
217-12	58625-58628	the	
217-13	58629-58633	last	
217-14	58634-58637	row	
217-15	58638-58640	is	
217-16	58641-58644	the	
217-17	58645-58651	number	
217-18	58652-58654	of	
217-19	58655-58659	null	
217-20	58660-58666	values	
217-21	58666-58667	.	
217-22	58668-58672	This	
217-23	58673-58675	is	
217-24	58676-58681	quite	
217-25	58682-58691	confusing	
217-26	58691-58692	.	
217-27	58693-58695	If	
217-28	58696-58698	we	
217-29	58699-58705	expect	
217-30	58706-58707	a	
217-31	58708-58714	column	
217-32	58715-58723	involved	
217-33	58724-58726	in	
217-34	58727-58728	a	
217-35	58729-58737	grouping	
217-36	58738-58746	set-type	
217-37	58747-58756	operation	
217-38	58757-58759	to	
217-39	58760-58767	perhaps	
217-40	58768-58775	contain	
217-41	58776-58781	nulls	
217-42	58781-58782	,	
217-43	58783-58786	how	
217-44	58787-58790	can	
217-45	58791-58793	we	
217-46	58794-58805	distinguish	
217-47	58806-58813	between	
217-48	58814-58819	those	
217-49	58820-58826	values	
217-50	58827-58830	and	
217-51	58831-58837	values	
217-52	58838-58843	added	
217-53	58844-58846	by	
217-54	58847-58855	grouping	
217-55	58856-58864	set-type	
217-56	58865-58875	operations	
217-57	58875-58876	?	
217-58	58877-58881	Well	
217-59	58881-58882	,	
217-60	58883-58887	your	
217-61	58888-58893	first	
217-62	58894-58905	inclination	
217-63	58906-58911	might	
217-64	58912-58914	be	
217-65	58915-58917	to	
217-66	58918-58921	use	
217-67	58922-58930	coalesce	
217-68	58930-58931	:	

#Text=SELECT COALESCE(x, '(null)'), COUNT(*) FROM test GROUP BY ROLLUP(x) ORDER BY x; coalesce | count ----------+------- (null) (null) (Remember we turned off psql's special displaying of nulls, so (null) is coming from coalesce.)
218-1	58932-58938	SELECT	
218-2	58939-58947	COALESCE	
218-3	58947-58948	(	
218-4	58948-58949	x	
218-5	58949-58950	,	
218-6	58951-58952	'	
218-7	58952-58953	(	
218-8	58953-58957	null	
218-9	58957-58958	)	
218-10	58958-58959	'	
218-11	58959-58960	)	
218-12	58960-58961	,	
218-13	58962-58967	COUNT	
218-14	58967-58968	(	
218-15	58968-58969	*	
218-16	58969-58970	)	
218-17	58971-58975	FROM	
218-18	58976-58980	test	
218-19	58981-58986	GROUP	
218-20	58987-58989	BY	
218-21	58990-58996	ROLLUP	
218-22	58996-58997	(	
218-23	58997-58998	x	
218-24	58998-58999	)	
218-25	59000-59005	ORDER	
218-26	59006-59008	BY	
218-27	59009-59010	x	
218-28	59010-59011	;	
218-29	59012-59020	coalesce	
218-30	59021-59022	|	
218-31	59023-59028	count	
218-32	59029-59030	-	
218-33	59030-59031	-	
218-34	59031-59032	-	
218-35	59032-59033	-	
218-36	59033-59034	-	
218-37	59034-59035	-	
218-38	59035-59036	-	
218-39	59036-59037	-	
218-40	59037-59038	-	
218-41	59038-59039	-	
218-42	59039-59040	+	
218-43	59040-59041	-	
218-44	59041-59042	-	
218-45	59042-59043	-	
218-46	59043-59044	-	
218-47	59044-59045	-	
218-48	59045-59046	-	
218-49	59046-59047	-	
218-50	59048-59049	(	
218-51	59049-59053	null	
218-52	59053-59054	)	
218-53	59055-59056	(	
218-54	59056-59060	null	
218-55	59060-59061	)	
218-56	59062-59063	(	
218-57	59063-59071	Remember	
218-58	59072-59074	we	
218-59	59075-59081	turned	
218-60	59082-59085	off	
218-61	59086-59092	psql's	
218-62	59093-59100	special	
218-63	59101-59111	displaying	
218-64	59112-59114	of	
218-65	59115-59120	nulls	
218-66	59120-59121	,	
218-67	59122-59124	so	
218-68	59125-59126	(	
218-69	59126-59130	null	
218-70	59130-59131	)	
218-71	59132-59134	is	
218-72	59135-59141	coming	
218-73	59142-59146	from	
218-74	59147-59155	coalesce	
218-75	59155-59156	.	
218-76	59156-59157	)	

#Text=That didn't help. The reason is that the select target list is executed last, as covered in a previous blog post. The right way to do it is to force coalesce to run before the grouping set-type operation using a common table expression: WITH t AS (
219-1	59158-59162	That	
219-2	59163-59169	didn't	
219-3	59170-59174	help	
219-4	59174-59175	.	
219-5	59176-59179	The	
219-6	59180-59186	reason	
219-7	59187-59189	is	
219-8	59190-59194	that	
219-9	59195-59198	the	
219-10	59199-59205	select	
219-11	59206-59212	target	
219-12	59213-59217	list	
219-13	59218-59220	is	
219-14	59221-59229	executed	
219-15	59230-59234	last	
219-16	59234-59235	,	
219-17	59236-59238	as	
219-18	59239-59246	covered	
219-19	59247-59249	in	
219-20	59250-59251	a	
219-21	59252-59260	previous	
219-22	59261-59265	blog	
219-23	59266-59270	post	
219-24	59270-59271	.	
219-25	59272-59275	The	
219-26	59276-59281	right	
219-27	59282-59285	way	
219-28	59286-59288	to	
219-29	59289-59291	do	
219-30	59292-59294	it	
219-31	59295-59297	is	
219-32	59298-59300	to	
219-33	59301-59306	force	
219-34	59307-59315	coalesce	
219-35	59316-59318	to	
219-36	59319-59322	run	
219-37	59323-59329	before	
219-38	59330-59333	the	
219-39	59334-59342	grouping	
219-40	59343-59351	set-type	
219-41	59352-59361	operation	
219-42	59362-59367	using	
219-43	59368-59369	a	
219-44	59370-59376	common	
219-45	59377-59382	table	
219-46	59383-59393	expression	
219-47	59393-59394	:	
219-48	59395-59399	WITH	
219-49	59400-59401	t	
219-50	59402-59404	AS	
219-51	59405-59406	(	

#Text=SELECT COALESCE(x, '(null)') AS x, y FROM test SELECT x, COUNT(*) FROM t GROUP BY ROLLUP(x) ORDER BY x; | count --------+------- (null) |
220-1	59407-59413	SELECT	
220-2	59414-59422	COALESCE	
220-3	59422-59423	(	
220-4	59423-59424	x	
220-5	59424-59425	,	
220-6	59426-59427	'	
220-7	59427-59428	(	
220-8	59428-59432	null	
220-9	59432-59433	)	
220-10	59433-59434	'	
220-11	59434-59435	)	
220-12	59436-59438	AS	
220-13	59439-59440	x	
220-14	59440-59441	,	
220-15	59442-59443	y	
220-16	59444-59448	FROM	
220-17	59449-59453	test	
220-18	59454-59460	SELECT	
220-19	59461-59462	x	
220-20	59462-59463	,	
220-21	59464-59469	COUNT	
220-22	59469-59470	(	
220-23	59470-59471	*	
220-24	59471-59472	)	
220-25	59473-59477	FROM	
220-26	59478-59479	t	
220-27	59480-59485	GROUP	
220-28	59486-59488	BY	
220-29	59489-59495	ROLLUP	
220-30	59495-59496	(	
220-31	59496-59497	x	
220-32	59497-59498	)	
220-33	59499-59504	ORDER	
220-34	59505-59507	BY	
220-35	59508-59509	x	
220-36	59509-59510	;	
220-37	59511-59512	|	
220-38	59513-59518	count	
220-39	59519-59520	-	
220-40	59520-59521	-	
220-41	59521-59522	-	
220-42	59522-59523	-	
220-43	59523-59524	-	
220-44	59524-59525	-	
220-45	59525-59526	-	
220-46	59526-59527	-	
220-47	59527-59528	+	
220-48	59528-59529	-	
220-49	59529-59530	-	
220-50	59530-59531	-	
220-51	59531-59532	-	
220-52	59532-59533	-	
220-53	59533-59534	-	
220-54	59534-59535	-	
220-55	59536-59537	(	
220-56	59537-59541	null	
220-57	59541-59542	)	
220-58	59543-59544	|	

#Text=That's what we wanted — (null) for the inserted null, and a real null for the grouping set-type added row. Another option is to use grouping, which returns a non-zero value if the row is generated by a grouping set, e.g.: SELECT x, COUNT(*), GROUPING(x) FROM test GROUP BY ROLLUP(x) ORDER BY x;
221-1	59545-59551	That's	
221-2	59552-59556	what	
221-3	59557-59559	we	
221-4	59560-59566	wanted	
221-5	59567-59568	—	
221-6	59569-59570	(	
221-7	59570-59574	null	
221-8	59574-59575	)	
221-9	59576-59579	for	
221-10	59580-59583	the	
221-11	59584-59592	inserted	
221-12	59593-59597	null	
221-13	59597-59598	,	
221-14	59599-59602	and	
221-15	59603-59604	a	
221-16	59605-59609	real	
221-17	59610-59614	null	
221-18	59615-59618	for	
221-19	59619-59622	the	
221-20	59623-59631	grouping	
221-21	59632-59640	set-type	
221-22	59641-59646	added	
221-23	59647-59650	row	
221-24	59650-59651	.	
221-25	59652-59659	Another	
221-26	59660-59666	option	
221-27	59667-59669	is	
221-28	59670-59672	to	
221-29	59673-59676	use	
221-30	59677-59685	grouping	
221-31	59685-59686	,	
221-32	59687-59692	which	
221-33	59693-59700	returns	
221-34	59701-59702	a	
221-35	59703-59711	non-zero	
221-36	59712-59717	value	
221-37	59718-59720	if	
221-38	59721-59724	the	
221-39	59725-59728	row	
221-40	59729-59731	is	
221-41	59732-59741	generated	
221-42	59742-59744	by	
221-43	59745-59746	a	
221-44	59747-59755	grouping	
221-45	59756-59759	set	
221-46	59759-59760	,	
221-47	59761-59764	e.g	
221-48	59764-59765	.	
221-49	59765-59766	:	
221-50	59767-59773	SELECT	
221-51	59774-59775	x	
221-52	59775-59776	,	
221-53	59777-59782	COUNT	
221-54	59782-59783	(	
221-55	59783-59784	*	
221-56	59784-59785	)	
221-57	59785-59786	,	
221-58	59787-59795	GROUPING	
221-59	59795-59796	(	
221-60	59796-59797	x	
221-61	59797-59798	)	
221-62	59799-59803	FROM	
221-63	59804-59808	test	
221-64	59809-59814	GROUP	
221-65	59815-59817	BY	
221-66	59818-59824	ROLLUP	
221-67	59824-59825	(	
221-68	59825-59826	x	
221-69	59826-59827	)	
221-70	59828-59833	ORDER	
221-71	59834-59836	BY	
221-72	59837-59838	x	
221-73	59838-59839	;	

#Text=x | count | grouping ---+-------+---------- a | 1 | b | 1 | 3 | 1 | This can be combined with case to control the label of the grouping set null column:
222-1	59840-59841	x	
222-2	59842-59843	|	
222-3	59844-59849	count	
222-4	59850-59851	|	
222-5	59852-59860	grouping	
222-6	59861-59862	-	
222-7	59862-59863	-	
222-8	59863-59864	-	
222-9	59864-59865	+	
222-10	59865-59866	-	
222-11	59866-59867	-	
222-12	59867-59868	-	
222-13	59868-59869	-	
222-14	59869-59870	-	
222-15	59870-59871	-	
222-16	59871-59872	-	
222-17	59872-59873	+	
222-18	59873-59874	-	
222-19	59874-59875	-	
222-20	59875-59876	-	
222-21	59876-59877	-	
222-22	59877-59878	-	
222-23	59878-59879	-	
222-24	59879-59880	-	
222-25	59880-59881	-	
222-26	59881-59882	-	
222-27	59882-59883	-	
222-28	59884-59885	a	
222-29	59886-59887	|	
222-30	59888-59889	1	
222-31	59890-59891	|	
222-32	59892-59893	b	
222-33	59894-59895	|	
222-34	59896-59897	1	
222-35	59898-59899	|	
222-36	59900-59901	3	
222-37	59902-59903	|	
222-38	59904-59905	1	
222-39	59906-59907	|	
222-40	59908-59912	This	
222-41	59913-59916	can	
222-42	59917-59919	be	
222-43	59920-59928	combined	
222-44	59929-59933	with	
222-45	59934-59938	case	
222-46	59939-59941	to	
222-47	59942-59949	control	
222-48	59950-59953	the	
222-49	59954-59959	label	
222-50	59960-59962	of	
222-51	59963-59966	the	
222-52	59967-59975	grouping	
222-53	59976-59979	set	
222-54	59980-59984	null	
222-55	59985-59991	column	
222-56	59991-59992	:	

#Text=SELECT CASE WHEN GROUPING(x) != 0 THEN x WHEN x IS NOT NULL THEN x ELSE '(null)' END AS y, COUNT(*) FROM test
223-1	59993-59999	SELECT	
223-2	60000-60004	CASE	
223-3	60005-60009	WHEN	
223-4	60010-60018	GROUPING	
223-5	60018-60019	(	
223-6	60019-60020	x	
223-7	60020-60021	)	
223-8	60022-60023	!	
223-9	60023-60024	=	
223-10	60025-60026	0	
223-11	60027-60031	THEN	
223-12	60032-60033	x	
223-13	60034-60038	WHEN	
223-14	60039-60040	x	
223-15	60041-60043	IS	
223-16	60044-60047	NOT	
223-17	60048-60052	NULL	
223-18	60053-60057	THEN	
223-19	60058-60059	x	
223-20	60060-60064	ELSE	
223-21	60065-60066	'	
223-22	60066-60067	(	
223-23	60067-60071	null	
223-24	60071-60072	)	
223-25	60072-60073	'	
223-26	60074-60077	END	
223-27	60078-60080	AS	
223-28	60081-60082	y	
223-29	60082-60083	,	
223-30	60084-60089	COUNT	
223-31	60089-60090	(	
223-32	60090-60091	*	
223-33	60091-60092	)	
223-34	60093-60097	FROM	
223-35	60098-60102	test	

#Text=GROUP BY ROLLUP(x) ORDER BY y; | count --------+------- (null) | View or Post Comments JSONB: A Container of Types
224-1	60103-60108	GROUP	
224-2	60109-60111	BY	
224-3	60112-60118	ROLLUP	
224-4	60118-60119	(	
224-5	60119-60120	x	
224-6	60120-60121	)	
224-7	60122-60127	ORDER	
224-8	60128-60130	BY	
224-9	60131-60132	y	
224-10	60132-60133	;	
224-11	60134-60135	|	
224-12	60136-60141	count	
224-13	60142-60143	-	
224-14	60143-60144	-	
224-15	60144-60145	-	
224-16	60145-60146	-	
224-17	60146-60147	-	
224-18	60147-60148	-	
224-19	60148-60149	-	
224-20	60149-60150	-	
224-21	60150-60151	+	
224-22	60151-60152	-	
224-23	60152-60153	-	
224-24	60153-60154	-	
224-25	60154-60155	-	
224-26	60155-60156	-	
224-27	60156-60157	-	
224-28	60157-60158	-	
224-29	60159-60160	(	
224-30	60160-60164	null	
224-31	60164-60165	)	
224-32	60166-60167	|	
224-33	60168-60172	View	
224-34	60173-60175	or	
224-35	60176-60180	Post	
224-36	60181-60189	Comments	
224-37	60190-60195	JSONB	
224-38	60195-60196	:	
224-39	60197-60198	A	
224-40	60199-60208	Container	
224-41	60209-60211	of	
224-42	60212-60217	Types	

#Text=Monday, July 13, 2020 The popular json and jsonb data types are more than just a collection of single-data-type values like arrays. They can contain multiple data types: CREATE TABLE test(x JSONB);
225-1	60218-60224	Monday	
225-2	60224-60225	,	
225-3	60226-60230	July	
225-4	60231-60233	13	
225-5	60233-60234	,	
225-6	60235-60239	2020	
225-7	60240-60243	The	
225-8	60244-60251	popular	
225-9	60252-60256	json	
225-10	60257-60260	and	
225-11	60261-60266	jsonb	
225-12	60267-60271	data	
225-13	60272-60277	types	
225-14	60278-60281	are	
225-15	60282-60286	more	
225-16	60287-60291	than	
225-17	60292-60296	just	
225-18	60297-60298	a	
225-19	60299-60309	collection	
225-20	60310-60312	of	
225-21	60313-60329	single-data-type	
225-22	60330-60336	values	
225-23	60337-60341	like	
225-24	60342-60348	arrays	
225-25	60348-60349	.	
225-26	60350-60354	They	
225-27	60355-60358	can	
225-28	60359-60366	contain	
225-29	60367-60375	multiple	
225-30	60376-60380	data	
225-31	60381-60386	types	
225-32	60386-60387	:	
225-33	60388-60394	CREATE	
225-34	60395-60400	TABLE	
225-35	60401-60405	test	
225-36	60405-60406	(	
225-37	60406-60407	x	
225-38	60408-60413	JSONB	
225-39	60413-60414	)	
225-40	60414-60415	;	

#Text=INSERT INTO test VALUES ('"abc"'), ('5'), ('true'), ('null'), (NULL); \\pset null (null) SELECT x, jsonb_typeof(x), pg_typeof(x) FROM test; | jsonb_typeof | pg_typeof
226-1	60416-60422	INSERT	
226-2	60423-60427	INTO	
226-3	60428-60432	test	
226-4	60433-60439	VALUES	
226-5	60440-60441	(	
226-6	60441-60442	'	
226-7	60442-60443	"	
226-8	60443-60446	abc	
226-9	60446-60447	"	
226-10	60447-60448	'	
226-11	60448-60449	)	
226-12	60449-60450	,	
226-13	60451-60452	(	
226-14	60452-60453	'	
226-15	60453-60454	5	
226-16	60454-60455	'	
226-17	60455-60456	)	
226-18	60456-60457	,	
226-19	60458-60459	(	
226-20	60459-60460	'	
226-21	60460-60464	true	
226-22	60464-60465	'	
226-23	60465-60466	)	
226-24	60466-60467	,	
226-25	60468-60469	(	
226-26	60469-60470	'	
226-27	60470-60474	null	
226-28	60474-60475	'	
226-29	60475-60476	)	
226-30	60476-60477	,	
226-31	60478-60479	(	
226-32	60479-60483	NULL	
226-33	60483-60484	)	
226-34	60484-60485	;	
226-35	60486-60487	\	
226-36	60487-60491	pset	
226-37	60492-60496	null	
226-38	60497-60498	(	
226-39	60498-60502	null	
226-40	60502-60503	)	
226-41	60504-60510	SELECT	
226-42	60511-60512	x	
226-43	60512-60513	,	
226-44	60514-60526	jsonb_typeof	
226-45	60526-60527	(	
226-46	60527-60528	x	
226-47	60528-60529	)	
226-48	60529-60530	,	
226-49	60531-60540	pg_typeof	
226-50	60540-60541	(	
226-51	60541-60542	x	
226-52	60542-60543	)	
226-53	60544-60548	FROM	
226-54	60549-60553	test	
226-55	60553-60554	;	
226-56	60555-60556	|	
226-57	60557-60569	jsonb_typeof	
226-58	60570-60571	|	
226-59	60572-60581	pg_typeof	

#Text=--------+--------------+----------- "abc" | string | jsonb | number | jsonb true | boolean | jsonb  | null | jsonb (null) | (null)
227-1	60582-60583	-	
227-2	60583-60584	-	
227-3	60584-60585	-	
227-4	60585-60586	-	
227-5	60586-60587	-	
227-6	60587-60588	-	
227-7	60588-60589	-	
227-8	60589-60590	-	
227-9	60590-60591	+	
227-10	60591-60592	-	
227-11	60592-60593	-	
227-12	60593-60594	-	
227-13	60594-60595	-	
227-14	60595-60596	-	
227-15	60596-60597	-	
227-16	60597-60598	-	
227-17	60598-60599	-	
227-18	60599-60600	-	
227-19	60600-60601	-	
227-20	60601-60602	-	
227-21	60602-60603	-	
227-22	60603-60604	-	
227-23	60604-60605	-	
227-24	60605-60606	+	
227-25	60606-60607	-	
227-26	60607-60608	-	
227-27	60608-60609	-	
227-28	60609-60610	-	
227-29	60610-60611	-	
227-30	60611-60612	-	
227-31	60612-60613	-	
227-32	60613-60614	-	
227-33	60614-60615	-	
227-34	60615-60616	-	
227-35	60616-60617	-	
227-36	60618-60619	"	
227-37	60619-60622	abc	
227-38	60622-60623	"	
227-39	60624-60625	|	
227-40	60626-60632	string	
227-41	60633-60634	|	
227-42	60635-60640	jsonb	
227-43	60641-60642	|	
227-44	60643-60649	number	
227-45	60650-60651	|	
227-46	60652-60657	jsonb	
227-47	60658-60662	true	
227-48	60663-60664	|	
227-49	60665-60672	boolean	
227-50	60673-60674	|	
227-51	60675-60680	jsonb	
227-52	60682-60683	|	
227-53	60684-60688	null	
227-54	60689-60690	|	
227-55	60691-60696	jsonb	
227-56	60697-60698	(	
227-57	60698-60702	null	
227-58	60702-60703	)	
227-59	60704-60705	|	
227-60	60706-60707	(	
227-61	60707-60711	null	
227-62	60711-60712	)	

#Text=| jsonb You can see I stored a string, number, boolean, json null, and an sql null in a single jsonb column, and Postgres knew the type of each value in the jsonb column, as shown by jsonb_typeof().
228-1	60713-60714	|	
228-2	60715-60720	jsonb	
228-3	60721-60724	You	
228-4	60725-60728	can	
228-5	60729-60732	see	
228-6	60733-60734	I	
228-7	60735-60741	stored	
228-8	60742-60743	a	
228-9	60744-60750	string	
228-10	60750-60751	,	
228-11	60752-60758	number	
228-12	60758-60759	,	
228-13	60760-60767	boolean	
228-14	60767-60768	,	
228-15	60769-60773	json	
228-16	60774-60778	null	
228-17	60778-60779	,	
228-18	60780-60783	and	
228-19	60784-60786	an	
228-20	60787-60790	sql	
228-21	60791-60795	null	
228-22	60796-60798	in	
228-23	60799-60800	a	
228-24	60801-60807	single	
228-25	60808-60813	jsonb	
228-26	60814-60820	column	
228-27	60820-60821	,	
228-28	60822-60825	and	
228-29	60826-60834	Postgres	
228-30	60835-60839	knew	
228-31	60840-60843	the	
228-32	60844-60848	type	
228-33	60849-60851	of	
228-34	60852-60856	each	
228-35	60857-60862	value	
228-36	60863-60865	in	
228-37	60866-60869	the	
228-38	60870-60875	jsonb	
228-39	60876-60882	column	
228-40	60882-60883	,	
228-41	60884-60886	as	
228-42	60887-60892	shown	
228-43	60893-60895	by	
228-44	60896-60908	jsonb_typeof	
228-45	60908-60909	(	
228-46	60909-60910	)	
228-47	60910-60911	.	

#Text=However, pg_typeof() still sees all these as jsonb values, and that is the type exposed to anything referencing the json column. Here is another example that uses #>> to convert all json values to text: SELECT x, x::TEXT, x#>>'{}', pg_typeof(x#>>'{}') FROM test;
229-1	60912-60919	However	
229-2	60919-60920	,	
229-3	60921-60930	pg_typeof	
229-4	60930-60931	(	
229-5	60931-60932	)	
229-6	60933-60938	still	
229-7	60939-60943	sees	
229-8	60944-60947	all	
229-9	60948-60953	these	
229-10	60954-60956	as	
229-11	60957-60962	jsonb	
229-12	60963-60969	values	
229-13	60969-60970	,	
229-14	60971-60974	and	
229-15	60975-60979	that	
229-16	60980-60982	is	
229-17	60983-60986	the	
229-18	60987-60991	type	
229-19	60992-60999	exposed	
229-20	61000-61002	to	
229-21	61003-61011	anything	
229-22	61012-61023	referencing	
229-23	61024-61027	the	
229-24	61028-61032	json	
229-25	61033-61039	column	
229-26	61039-61040	.	
229-27	61041-61045	Here	
229-28	61046-61048	is	
229-29	61049-61056	another	
229-30	61057-61064	example	
229-31	61065-61069	that	
229-32	61070-61074	uses	
229-33	61075-61076	#	
229-34	61076-61077	>	
229-35	61077-61078	>	
229-36	61079-61081	to	
229-37	61082-61089	convert	
229-38	61090-61093	all	
229-39	61094-61098	json	
229-40	61099-61105	values	
229-41	61106-61108	to	
229-42	61109-61113	text	
229-43	61113-61114	:	
229-44	61115-61121	SELECT	
229-45	61122-61123	x	
229-46	61123-61124	,	
229-47	61125-61126	x	
229-48	61126-61127	:	
229-49	61127-61128	:	
229-50	61128-61132	TEXT	
229-51	61132-61133	,	
229-52	61134-61135	x	
229-53	61135-61136	#	
229-54	61136-61137	>	
229-55	61137-61138	>	
229-56	61138-61139	'	
229-57	61139-61140	{	
229-58	61140-61141	}	
229-59	61141-61142	'	
229-60	61142-61143	,	
229-61	61144-61153	pg_typeof	
229-62	61153-61154	(	
229-63	61154-61155	x	
229-64	61155-61156	#	
229-65	61156-61157	>	
229-66	61157-61158	>	
229-67	61158-61159	'	
229-68	61159-61160	{	
229-69	61160-61161	}	
229-70	61161-61162	'	
229-71	61162-61163	)	
229-72	61164-61168	FROM	
229-73	61169-61173	test	
229-74	61173-61174	;	

#Text=| ?column? | pg_typeof --------+--------+----------+----------- "abc" | "abc" | abc
230-1	61175-61176	|	
230-2	61177-61178	?	
230-3	61178-61184	column	
230-4	61184-61185	?	
230-5	61186-61187	|	
230-6	61188-61197	pg_typeof	
230-7	61198-61199	-	
230-8	61199-61200	-	
230-9	61200-61201	-	
230-10	61201-61202	-	
230-11	61202-61203	-	
230-12	61203-61204	-	
230-13	61204-61205	-	
230-14	61205-61206	-	
230-15	61206-61207	+	
230-16	61207-61208	-	
230-17	61208-61209	-	
230-18	61209-61210	-	
230-19	61210-61211	-	
230-20	61211-61212	-	
230-21	61212-61213	-	
230-22	61213-61214	-	
230-23	61214-61215	-	
230-24	61215-61216	+	
230-25	61216-61217	-	
230-26	61217-61218	-	
230-27	61218-61219	-	
230-28	61219-61220	-	
230-29	61220-61221	-	
230-30	61221-61222	-	
230-31	61222-61223	-	
230-32	61223-61224	-	
230-33	61224-61225	-	
230-34	61225-61226	-	
230-35	61226-61227	+	
230-36	61227-61228	-	
230-37	61228-61229	-	
230-38	61229-61230	-	
230-39	61230-61231	-	
230-40	61231-61232	-	
230-41	61232-61233	-	
230-42	61233-61234	-	
230-43	61234-61235	-	
230-44	61235-61236	-	
230-45	61236-61237	-	
230-46	61237-61238	-	
230-47	61239-61240	"	
230-48	61240-61243	abc	
230-49	61243-61244	"	
230-50	61245-61246	|	
230-51	61247-61248	"	
230-52	61248-61251	abc	
230-53	61251-61252	"	
230-54	61253-61254	|	
230-55	61255-61258	abc	

#Text=| text | 5 | 5 | text true | true | true | text  | null | (null) | text (null) | (null) | (null) | text
231-1	61259-61260	|	
231-2	61261-61265	text	
231-3	61266-61267	|	
231-4	61268-61269	5	
231-5	61270-61271	|	
231-6	61272-61273	5	
231-7	61274-61275	|	
231-8	61276-61280	text	
231-9	61281-61285	true	
231-10	61286-61287	|	
231-11	61288-61292	true	
231-12	61293-61294	|	
231-13	61295-61299	true	
231-14	61300-61301	|	
231-15	61302-61306	text	
231-16	61308-61309	|	
231-17	61310-61314	null	
231-18	61315-61316	|	
231-19	61317-61318	(	
231-20	61318-61322	null	
231-21	61322-61323	)	
231-22	61324-61325	|	
231-23	61326-61330	text	
231-24	61331-61332	(	
231-25	61332-61336	null	
231-26	61336-61337	)	
231-27	61338-61339	|	
231-28	61340-61341	(	
231-29	61341-61345	null	
231-30	61345-61346	)	
231-31	61347-61348	|	
231-32	61349-61350	(	
231-33	61350-61354	null	
231-34	61354-61355	)	
231-35	61356-61357	|	
231-36	61358-61362	text	

#Text=(I am using #>> rather than the more popular ->> because it lets me access json values that are not associated with keys.) Notice that using :: to cast to text retains the double-quotes, while #>> removes them. (->> does also.) However, the return value for #>> did not change based on the json contents — it always returned text or sql null.
232-1	61363-61364	(	
232-2	61364-61365	I	
232-3	61366-61368	am	
232-4	61369-61374	using	
232-5	61375-61376	#	
232-6	61376-61377	>	
232-7	61377-61378	>	
232-8	61379-61385	rather	
232-9	61386-61390	than	
232-10	61391-61394	the	
232-11	61395-61399	more	
232-12	61400-61407	popular	
232-13	61408-61409	-	
232-14	61409-61410	>	
232-15	61410-61411	>	
232-16	61412-61419	because	
232-17	61420-61422	it	
232-18	61423-61427	lets	
232-19	61428-61430	me	
232-20	61431-61437	access	
232-21	61438-61442	json	
232-22	61443-61449	values	
232-23	61450-61454	that	
232-24	61455-61458	are	
232-25	61459-61462	not	
232-26	61463-61473	associated	
232-27	61474-61478	with	
232-28	61479-61483	keys	
232-29	61483-61484	.	
232-30	61484-61485	)	
232-31	61486-61492	Notice	
232-32	61493-61497	that	
232-33	61498-61503	using	
232-34	61504-61505	:	
232-35	61505-61506	:	
232-36	61507-61509	to	
232-37	61510-61514	cast	
232-38	61515-61517	to	
232-39	61518-61522	text	
232-40	61523-61530	retains	
232-41	61531-61534	the	
232-42	61535-61548	double-quotes	
232-43	61548-61549	,	
232-44	61550-61555	while	
232-45	61556-61557	#	
232-46	61557-61558	>	
232-47	61558-61559	>	
232-48	61560-61567	removes	
232-49	61568-61572	them	
232-50	61572-61573	.	
232-51	61574-61575	(	
232-52	61575-61576	-	
232-53	61576-61577	>	
232-54	61577-61578	>	
232-55	61579-61583	does	
232-56	61584-61588	also	
232-57	61588-61589	.	
232-58	61589-61590	)	
232-59	61591-61598	However	
232-60	61598-61599	,	
232-61	61600-61603	the	
232-62	61604-61610	return	
232-63	61611-61616	value	
232-64	61617-61620	for	
232-65	61621-61622	#	
232-66	61622-61623	>	
232-67	61623-61624	>	
232-68	61625-61628	did	
232-69	61629-61632	not	
232-70	61633-61639	change	
232-71	61640-61645	based	
232-72	61646-61648	on	
232-73	61649-61652	the	
232-74	61653-61657	json	
232-75	61658-61666	contents	
232-76	61667-61668	—	
232-77	61669-61671	it	
232-78	61672-61678	always	
232-79	61679-61687	returned	
232-80	61688-61692	text	
232-81	61693-61695	or	
232-82	61696-61699	sql	
232-83	61700-61704	null	
232-84	61704-61705	.	

#Text=Also notice that :: casting returns the string "null" for the jsonb null value, while #>> returns an sql null. (I used psql's \\pset null above.) There is a fundamental problem with the interaction between jsonb and sql data types. Postgres knows the data type of each json value inside the jsonb field (as shown
233-1	61706-61710	Also	
233-2	61711-61717	notice	
233-3	61718-61722	that	
233-4	61723-61724	:	
233-5	61724-61725	:	
233-6	61726-61733	casting	
233-7	61734-61741	returns	
233-8	61742-61745	the	
233-9	61746-61752	string	
233-10	61753-61754	"	
233-11	61754-61758	null	
233-12	61758-61759	"	
233-13	61760-61763	for	
233-14	61764-61767	the	
233-15	61768-61773	jsonb	
233-16	61774-61778	null	
233-17	61779-61784	value	
233-18	61784-61785	,	
233-19	61786-61791	while	
233-20	61792-61793	#	
233-21	61793-61794	>	
233-22	61794-61795	>	
233-23	61796-61803	returns	
233-24	61804-61806	an	
233-25	61807-61810	sql	
233-26	61811-61815	null	
233-27	61815-61816	.	
233-28	61817-61818	(	
233-29	61818-61819	I	
233-30	61820-61824	used	
233-31	61825-61831	psql's	
233-32	61832-61833	\	
233-33	61833-61837	pset	
233-34	61838-61842	null	
233-35	61843-61848	above	
233-36	61848-61849	.	
233-37	61849-61850	)	
233-38	61851-61856	There	
233-39	61857-61859	is	
233-40	61860-61861	a	
233-41	61862-61873	fundamental	
233-42	61874-61881	problem	
233-43	61882-61886	with	
233-44	61887-61890	the	
233-45	61891-61902	interaction	
233-46	61903-61910	between	
233-47	61911-61916	jsonb	
233-48	61917-61920	and	
233-49	61921-61924	sql	
233-50	61925-61929	data	
233-51	61930-61935	types	
233-52	61935-61936	.	
233-53	61937-61945	Postgres	
233-54	61946-61951	knows	
233-55	61952-61955	the	
233-56	61956-61960	data	
233-57	61961-61965	type	
233-58	61966-61968	of	
233-59	61969-61973	each	
233-60	61974-61978	json	
233-61	61979-61984	value	
233-62	61985-61991	inside	
233-63	61992-61995	the	
233-64	61996-62001	jsonb	
233-65	62002-62007	field	
233-66	62008-62009	(	
233-67	62009-62011	as	
233-68	62012-62017	shown	

#Text=by jsonb_typeof), but each field can have multiple json values inside, and each row can be different as well. Therefore, you only have two choices for interfacing jsonb to sql data types: Use ->> or #>> to map all values to text Cast values to an sql data type
234-1	62018-62020	by	
234-2	62021-62033	jsonb_typeof	
234-3	62033-62034	)	
234-4	62034-62035	,	
234-5	62036-62039	but	
234-6	62040-62044	each	
234-7	62045-62050	field	
234-8	62051-62054	can	
234-9	62055-62059	have	
234-10	62060-62068	multiple	
234-11	62069-62073	json	
234-12	62074-62080	values	
234-13	62081-62087	inside	
234-14	62087-62088	,	
234-15	62089-62092	and	
234-16	62093-62097	each	
234-17	62098-62101	row	
234-18	62102-62105	can	
234-19	62106-62108	be	
234-20	62109-62118	different	
234-21	62119-62121	as	
234-22	62122-62126	well	
234-23	62126-62127	.	
234-24	62128-62137	Therefore	
234-25	62137-62138	,	
234-26	62139-62142	you	
234-27	62143-62147	only	
234-28	62148-62152	have	
234-29	62153-62156	two	
234-30	62157-62164	choices	
234-31	62165-62168	for	
234-32	62169-62180	interfacing	
234-33	62181-62186	jsonb	
234-34	62187-62189	to	
234-35	62190-62193	sql	
234-36	62194-62198	data	
234-37	62199-62204	types	
234-38	62204-62205	:	
234-39	62206-62209	Use	
234-40	62210-62211	-	
234-41	62211-62212	>	
234-42	62212-62213	>	
234-43	62214-62216	or	
234-44	62217-62218	#	
234-45	62218-62219	>	
234-46	62219-62220	>	
234-47	62221-62223	to	
234-48	62224-62227	map	
234-49	62228-62231	all	
234-50	62232-62238	values	
234-51	62239-62241	to	
234-52	62242-62246	text	
234-53	62247-62251	Cast	
234-54	62252-62258	values	
234-55	62259-62261	to	
234-56	62262-62264	an	
234-57	62265-62268	sql	
234-58	62269-62273	data	
234-59	62274-62278	type	

#Text=For number one, all data types can be converted to text, so it is a simple solution, though it doesn't work well if you need to process the values in a non-textual way, e.g., a numeric comparison. You can cast jsonb values to any sql data type (number two) as long as all jsonb values can be cast successfully. For example: DELETE FROM test; -- all inserted values must cast to a jsonb type
235-1	62279-62282	For	
235-2	62283-62289	number	
235-3	62290-62293	one	
235-4	62293-62294	,	
235-5	62295-62298	all	
235-6	62299-62303	data	
235-7	62304-62309	types	
235-8	62310-62313	can	
235-9	62314-62316	be	
235-10	62317-62326	converted	
235-11	62327-62329	to	
235-12	62330-62334	text	
235-13	62334-62335	,	
235-14	62336-62338	so	
235-15	62339-62341	it	
235-16	62342-62344	is	
235-17	62345-62346	a	
235-18	62347-62353	simple	
235-19	62354-62362	solution	
235-20	62362-62363	,	
235-21	62364-62370	though	
235-22	62371-62373	it	
235-23	62374-62381	doesn't	
235-24	62382-62386	work	
235-25	62387-62391	well	
235-26	62392-62394	if	
235-27	62395-62398	you	
235-28	62399-62403	need	
235-29	62404-62406	to	
235-30	62407-62414	process	
235-31	62415-62418	the	
235-32	62419-62425	values	
235-33	62426-62428	in	
235-34	62429-62430	a	
235-35	62431-62442	non-textual	
235-36	62443-62446	way	
235-37	62446-62447	,	
235-38	62448-62451	e.g	
235-39	62451-62452	.	
235-40	62452-62453	,	
235-41	62454-62455	a	
235-42	62456-62463	numeric	
235-43	62464-62474	comparison	
235-44	62474-62475	.	
235-45	62476-62479	You	
235-46	62480-62483	can	
235-47	62484-62488	cast	
235-48	62489-62494	jsonb	
235-49	62495-62501	values	
235-50	62502-62504	to	
235-51	62505-62508	any	
235-52	62509-62512	sql	
235-53	62513-62517	data	
235-54	62518-62522	type	
235-55	62523-62524	(	
235-56	62524-62530	number	
235-57	62531-62534	two	
235-58	62534-62535	)	
235-59	62536-62538	as	
235-60	62539-62543	long	
235-61	62544-62546	as	
235-62	62547-62550	all	
235-63	62551-62556	jsonb	
235-64	62557-62563	values	
235-65	62564-62567	can	
235-66	62568-62570	be	
235-67	62571-62575	cast	
235-68	62576-62588	successfully	
235-69	62588-62589	.	
235-70	62590-62593	For	
235-71	62594-62601	example	
235-72	62601-62602	:	
235-73	62603-62609	DELETE	
235-74	62610-62614	FROM	
235-75	62615-62619	test	
235-76	62619-62620	;	
235-77	62621-62622	-	
235-78	62622-62623	-	
235-79	62624-62627	all	
235-80	62628-62636	inserted	
235-81	62637-62643	values	
235-82	62644-62648	must	
235-83	62649-62653	cast	
235-84	62654-62656	to	
235-85	62657-62658	a	
235-86	62659-62664	jsonb	
235-87	62665-62669	type	

#Text=INSERT INTO test VALUES ('"1"'), ('2'), ('3e1'), ('4f1'), ('true'), ('null'), (NULL); ERROR: invalid input syntax for type json
236-1	62670-62676	INSERT	
236-2	62677-62681	INTO	
236-3	62682-62686	test	
236-4	62687-62693	VALUES	
236-5	62694-62695	(	
236-6	62695-62696	'	
236-7	62696-62697	"	
236-8	62697-62698	1	
236-9	62698-62699	"	
236-10	62699-62700	'	
236-11	62700-62701	)	
236-12	62701-62702	,	
236-13	62703-62704	(	
236-14	62704-62705	'	
236-15	62705-62706	2	
236-16	62706-62707	'	
236-17	62707-62708	)	
236-18	62708-62709	,	
236-19	62710-62711	(	
236-20	62711-62712	'	
236-21	62712-62715	3e1	
236-22	62715-62716	'	
236-23	62716-62717	)	
236-24	62717-62718	,	
236-25	62719-62720	(	
236-26	62720-62721	'	
236-27	62721-62724	4f1	
236-28	62724-62725	'	
236-29	62725-62726	)	
236-30	62726-62727	,	
236-31	62728-62729	(	
236-32	62729-62730	'	
236-33	62730-62734	true	
236-34	62734-62735	'	
236-35	62735-62736	)	
236-36	62736-62737	,	
236-37	62738-62739	(	
236-38	62739-62740	'	
236-39	62740-62744	null	
236-40	62744-62745	'	
236-41	62745-62746	)	
236-42	62746-62747	,	
236-43	62748-62749	(	
236-44	62749-62753	NULL	
236-45	62753-62754	)	
236-46	62754-62755	;	
236-47	62756-62761	ERROR	
236-48	62761-62762	:	
236-49	62763-62770	invalid	
236-50	62771-62776	input	
236-51	62777-62783	syntax	
236-52	62784-62787	for	
236-53	62788-62792	type	
236-54	62793-62797	json	

#Text=LINE 1: ...NSERT INTO test VALUES ('"1"'), ('2'), ('3e1'), ('4f1'), (... DETAIL: Token "4f1" is invalid. CONTEXT: JSON data, line 1: 4f1 -- 4e1 uses exponential notation
237-1	62798-62802	LINE	
237-2	62803-62804	1	
237-3	62804-62805	:	
237-4	62806-62807	.	
237-5	62807-62808	.	
237-6	62808-62809	.	
237-7	62809-62814	NSERT	
237-8	62815-62819	INTO	
237-9	62820-62824	test	
237-10	62825-62831	VALUES	
237-11	62832-62833	(	
237-12	62833-62834	'	
237-13	62834-62835	"	
237-14	62835-62836	1	
237-15	62836-62837	"	
237-16	62837-62838	'	
237-17	62838-62839	)	
237-18	62839-62840	,	
237-19	62841-62842	(	
237-20	62842-62843	'	
237-21	62843-62844	2	
237-22	62844-62845	'	
237-23	62845-62846	)	
237-24	62846-62847	,	
237-25	62848-62849	(	
237-26	62849-62850	'	
237-27	62850-62853	3e1	
237-28	62853-62854	'	
237-29	62854-62855	)	
237-30	62855-62856	,	
237-31	62857-62858	(	
237-32	62858-62859	'	
237-33	62859-62862	4f1	
237-34	62862-62863	'	
237-35	62863-62864	)	
237-36	62864-62865	,	
237-37	62866-62867	(	
237-38	62867-62868	.	
237-39	62868-62869	.	
237-40	62869-62870	.	
237-41	62871-62877	DETAIL	
237-42	62877-62878	:	
237-43	62879-62884	Token	
237-44	62885-62886	"	
237-45	62886-62889	4f1	
237-46	62889-62890	"	
237-47	62891-62893	is	
237-48	62894-62901	invalid	
237-49	62901-62902	.	
237-50	62903-62910	CONTEXT	
237-51	62910-62911	:	
237-52	62912-62916	JSON	
237-53	62917-62921	data	
237-54	62921-62922	,	
237-55	62923-62927	line	
237-56	62928-62929	1	
237-57	62929-62930	:	
237-58	62931-62934	4f1	
237-59	62935-62936	-	
237-60	62936-62937	-	
237-61	62938-62941	4e1	
237-62	62942-62946	uses	
237-63	62947-62958	exponential	
237-64	62959-62967	notation	

#Text=INSERT INTO test VALUES ('"1"'), ('2'), ('3e1'), ('4e1'), ('true'), ('null'), (NULL); SELECT x, x::TEXT, x#>>'{}', jsonb_typeof(x), pg_typeof(x#>>'{}') FROM test;
238-1	62968-62974	INSERT	
238-2	62975-62979	INTO	
238-3	62980-62984	test	
238-4	62985-62991	VALUES	
238-5	62992-62993	(	
238-6	62993-62994	'	
238-7	62994-62995	"	
238-8	62995-62996	1	
238-9	62996-62997	"	
238-10	62997-62998	'	
238-11	62998-62999	)	
238-12	62999-63000	,	
238-13	63001-63002	(	
238-14	63002-63003	'	
238-15	63003-63004	2	
238-16	63004-63005	'	
238-17	63005-63006	)	
238-18	63006-63007	,	
238-19	63008-63009	(	
238-20	63009-63010	'	
238-21	63010-63013	3e1	
238-22	63013-63014	'	
238-23	63014-63015	)	
238-24	63015-63016	,	
238-25	63017-63018	(	
238-26	63018-63019	'	
238-27	63019-63022	4e1	
238-28	63022-63023	'	
238-29	63023-63024	)	
238-30	63024-63025	,	
238-31	63026-63027	(	
238-32	63027-63028	'	
238-33	63028-63032	true	
238-34	63032-63033	'	
238-35	63033-63034	)	
238-36	63034-63035	,	
238-37	63036-63037	(	
238-38	63037-63038	'	
238-39	63038-63042	null	
238-40	63042-63043	'	
238-41	63043-63044	)	
238-42	63044-63045	,	
238-43	63046-63047	(	
238-44	63047-63051	NULL	
238-45	63051-63052	)	
238-46	63052-63053	;	
238-47	63054-63060	SELECT	
238-48	63061-63062	x	
238-49	63062-63063	,	
238-50	63064-63065	x	
238-51	63065-63066	:	
238-52	63066-63067	:	
238-53	63067-63071	TEXT	
238-54	63071-63072	,	
238-55	63073-63074	x	
238-56	63074-63075	#	
238-57	63075-63076	>	
238-58	63076-63077	>	
238-59	63077-63078	'	
238-60	63078-63079	{	
238-61	63079-63080	}	
238-62	63080-63081	'	
238-63	63081-63082	,	
238-64	63083-63095	jsonb_typeof	
238-65	63095-63096	(	
238-66	63096-63097	x	
238-67	63097-63098	)	
238-68	63098-63099	,	
238-69	63100-63109	pg_typeof	
238-70	63109-63110	(	
238-71	63110-63111	x	
238-72	63111-63112	#	
238-73	63112-63113	>	
238-74	63113-63114	>	
238-75	63114-63115	'	
238-76	63115-63116	{	
238-77	63116-63117	}	
238-78	63117-63118	'	
238-79	63118-63119	)	
238-80	63120-63124	FROM	
238-81	63125-63129	test	
238-82	63129-63130	;	

#Text=| ?column? | jsonb_typeof | pg_typeof --------+--------+----------+--------------+----------- "1"
239-1	63131-63132	|	
239-2	63133-63134	?	
239-3	63134-63140	column	
239-4	63140-63141	?	
239-5	63142-63143	|	
239-6	63144-63156	jsonb_typeof	
239-7	63157-63158	|	
239-8	63159-63168	pg_typeof	
239-9	63169-63170	-	
239-10	63170-63171	-	
239-11	63171-63172	-	
239-12	63172-63173	-	
239-13	63173-63174	-	
239-14	63174-63175	-	
239-15	63175-63176	-	
239-16	63176-63177	-	
239-17	63177-63178	+	
239-18	63178-63179	-	
239-19	63179-63180	-	
239-20	63180-63181	-	
239-21	63181-63182	-	
239-22	63182-63183	-	
239-23	63183-63184	-	
239-24	63184-63185	-	
239-25	63185-63186	-	
239-26	63186-63187	+	
239-27	63187-63188	-	
239-28	63188-63189	-	
239-29	63189-63190	-	
239-30	63190-63191	-	
239-31	63191-63192	-	
239-32	63192-63193	-	
239-33	63193-63194	-	
239-34	63194-63195	-	
239-35	63195-63196	-	
239-36	63196-63197	-	
239-37	63197-63198	+	
239-38	63198-63199	-	
239-39	63199-63200	-	
239-40	63200-63201	-	
239-41	63201-63202	-	
239-42	63202-63203	-	
239-43	63203-63204	-	
239-44	63204-63205	-	
239-45	63205-63206	-	
239-46	63206-63207	-	
239-47	63207-63208	-	
239-48	63208-63209	-	
239-49	63209-63210	-	
239-50	63210-63211	-	
239-51	63211-63212	-	
239-52	63212-63213	+	
239-53	63213-63214	-	
239-54	63214-63215	-	
239-55	63215-63216	-	
239-56	63216-63217	-	
239-57	63217-63218	-	
239-58	63218-63219	-	
239-59	63219-63220	-	
239-60	63220-63221	-	
239-61	63221-63222	-	
239-62	63222-63223	-	
239-63	63223-63224	-	
239-64	63225-63226	"	
239-65	63226-63227	1	
239-66	63227-63228	"	

#Text=| "1" | 1 | string | text | 2 | 2 | number | text | 30 | 30 | number | text | 40 | 40 | number | text true
240-1	63229-63230	|	
240-2	63231-63232	"	
240-3	63232-63233	1	
240-4	63233-63234	"	
240-5	63235-63236	|	
240-6	63237-63238	1	
240-7	63239-63240	|	
240-8	63241-63247	string	
240-9	63248-63249	|	
240-10	63250-63254	text	
240-11	63255-63256	|	
240-12	63257-63258	2	
240-13	63259-63260	|	
240-14	63261-63262	2	
240-15	63263-63264	|	
240-16	63265-63271	number	
240-17	63272-63273	|	
240-18	63274-63278	text	
240-19	63279-63280	|	
240-20	63281-63283	30	
240-21	63284-63285	|	
240-22	63286-63288	30	
240-23	63289-63290	|	
240-24	63291-63297	number	
240-25	63298-63299	|	
240-26	63300-63304	text	
240-27	63305-63306	|	
240-28	63307-63309	40	
240-29	63310-63311	|	
240-30	63312-63314	40	
240-31	63315-63316	|	
240-32	63317-63323	number	
240-33	63324-63325	|	
240-34	63326-63330	text	
240-35	63331-63335	true	

#Text=| true | true | boolean | text  | null | (null) | null | text (null) | (null) | (null) | (null) | text
241-1	63336-63337	|	
241-2	63338-63342	true	
241-3	63343-63344	|	
241-4	63345-63349	true	
241-5	63350-63351	|	
241-6	63352-63359	boolean	
241-7	63360-63361	|	
241-8	63362-63366	text	
241-9	63368-63369	|	
241-10	63370-63374	null	
241-11	63375-63376	|	
241-12	63377-63378	(	
241-13	63378-63382	null	
241-14	63382-63383	)	
241-15	63384-63385	|	
241-16	63386-63390	null	
241-17	63391-63392	|	
241-18	63393-63397	text	
241-19	63398-63399	(	
241-20	63399-63403	null	
241-21	63403-63404	)	
241-22	63405-63406	|	
241-23	63407-63408	(	
241-24	63408-63412	null	
241-25	63412-63413	)	
241-26	63414-63415	|	
241-27	63416-63417	(	
241-28	63417-63421	null	
241-29	63421-63422	)	
241-30	63423-63424	|	
241-31	63425-63426	(	
241-32	63426-63430	null	
241-33	63430-63431	)	
241-34	63432-63433	|	
241-35	63434-63438	text	

#Text=-- all values can't be cast to numeric SELECT x, x::TEXT, x#>>'{}', x::NUMERIC * 5, jsonb_typeof(x) FROM test; ERROR: cannot cast jsonb string to type numeric
242-1	63439-63440	-	
242-2	63440-63441	-	
242-3	63442-63445	all	
242-4	63446-63452	values	
242-5	63453-63458	can't	
242-6	63459-63461	be	
242-7	63462-63466	cast	
242-8	63467-63469	to	
242-9	63470-63477	numeric	
242-10	63478-63484	SELECT	
242-11	63485-63486	x	
242-12	63486-63487	,	
242-13	63488-63489	x	
242-14	63489-63490	:	
242-15	63490-63491	:	
242-16	63491-63495	TEXT	
242-17	63495-63496	,	
242-18	63497-63498	x	
242-19	63498-63499	#	
242-20	63499-63500	>	
242-21	63500-63501	>	
242-22	63501-63502	'	
242-23	63502-63503	{	
242-24	63503-63504	}	
242-25	63504-63505	'	
242-26	63505-63506	,	
242-27	63507-63508	x	
242-28	63508-63509	:	
242-29	63509-63510	:	
242-30	63510-63517	NUMERIC	
242-31	63518-63519	*	
242-32	63520-63521	5	
242-33	63521-63522	,	
242-34	63523-63535	jsonb_typeof	
242-35	63535-63536	(	
242-36	63536-63537	x	
242-37	63537-63538	)	
242-38	63539-63543	FROM	
242-39	63544-63548	test	
242-40	63548-63549	;	
242-41	63550-63555	ERROR	
242-42	63555-63556	:	
242-43	63557-63563	cannot	
242-44	63564-63568	cast	
242-45	63569-63574	jsonb	
242-46	63575-63581	string	
242-47	63582-63584	to	
242-48	63585-63589	type	
242-49	63590-63597	numeric	

#Text=-- all values of jsonb type 'number' can be cast to numeric SELECT x, x::TEXT, x#>>'{}', x::NUMERIC * 5, jsonb_typeof(x) FROM test WHERE jsonb_typeof(x) = 'number';
243-1	63598-63599	-	
243-2	63599-63600	-	
243-3	63601-63604	all	
243-4	63605-63611	values	
243-5	63612-63614	of	
243-6	63615-63620	jsonb	
243-7	63621-63625	type	
243-8	63626-63627	'	
243-9	63627-63633	number	
243-10	63633-63634	'	
243-11	63635-63638	can	
243-12	63639-63641	be	
243-13	63642-63646	cast	
243-14	63647-63649	to	
243-15	63650-63657	numeric	
243-16	63658-63664	SELECT	
243-17	63665-63666	x	
243-18	63666-63667	,	
243-19	63668-63669	x	
243-20	63669-63670	:	
243-21	63670-63671	:	
243-22	63671-63675	TEXT	
243-23	63675-63676	,	
243-24	63677-63678	x	
243-25	63678-63679	#	
243-26	63679-63680	>	
243-27	63680-63681	>	
243-28	63681-63682	'	
243-29	63682-63683	{	
243-30	63683-63684	}	
243-31	63684-63685	'	
243-32	63685-63686	,	
243-33	63687-63688	x	
243-34	63688-63689	:	
243-35	63689-63690	:	
243-36	63690-63697	NUMERIC	
243-37	63698-63699	*	
243-38	63700-63701	5	
243-39	63701-63702	,	
243-40	63703-63715	jsonb_typeof	
243-41	63715-63716	(	
243-42	63716-63717	x	
243-43	63717-63718	)	
243-44	63719-63723	FROM	
243-45	63724-63728	test	
243-46	63729-63734	WHERE	
243-47	63735-63747	jsonb_typeof	
243-48	63747-63748	(	
243-49	63748-63749	x	
243-50	63749-63750	)	
243-51	63751-63752	=	
243-52	63753-63754	'	
243-53	63754-63760	number	
243-54	63760-63761	'	
243-55	63761-63762	;	

#Text=| x | ?column? | ?column? | jsonb_typeof ----+----+----------+----------+--------------
244-1	63763-63764	|	
244-2	63765-63766	x	
244-3	63767-63768	|	
244-4	63769-63770	?	
244-5	63770-63776	column	
244-6	63776-63777	?	
244-7	63778-63779	|	
244-8	63780-63781	?	
244-9	63781-63787	column	
244-10	63787-63788	?	
244-11	63789-63790	|	
244-12	63791-63803	jsonb_typeof	
244-13	63804-63805	-	
244-14	63805-63806	-	
244-15	63806-63807	-	
244-16	63807-63808	-	
244-17	63808-63809	+	
244-18	63809-63810	-	
244-19	63810-63811	-	
244-20	63811-63812	-	
244-21	63812-63813	-	
244-22	63813-63814	+	
244-23	63814-63815	-	
244-24	63815-63816	-	
244-25	63816-63817	-	
244-26	63817-63818	-	
244-27	63818-63819	-	
244-28	63819-63820	-	
244-29	63820-63821	-	
244-30	63821-63822	-	
244-31	63822-63823	-	
244-32	63823-63824	-	
244-33	63824-63825	+	
244-34	63825-63826	-	
244-35	63826-63827	-	
244-36	63827-63828	-	
244-37	63828-63829	-	
244-38	63829-63830	-	
244-39	63830-63831	-	
244-40	63831-63832	-	
244-41	63832-63833	-	
244-42	63833-63834	-	
244-43	63834-63835	-	
244-44	63835-63836	+	
244-45	63836-63837	-	
244-46	63837-63838	-	
244-47	63838-63839	-	
244-48	63839-63840	-	
244-49	63840-63841	-	
244-50	63841-63842	-	
244-51	63842-63843	-	
244-52	63843-63844	-	
244-53	63844-63845	-	
244-54	63845-63846	-	
244-55	63846-63847	-	
244-56	63847-63848	-	
244-57	63848-63849	-	
244-58	63849-63850	-	

#Text=| 2 | 2 10 | number 30 | 30 | 30 150 | number 40 | 40 | 40 200 | number -- Use #>> to remove double-quotes from the jsonb string
245-1	63851-63852	|	
245-2	63853-63854	2	
245-3	63855-63856	|	
245-4	63857-63858	2	
245-5	63859-63861	10	
245-6	63862-63863	|	
245-7	63864-63870	number	
245-8	63871-63873	30	
245-9	63874-63875	|	
245-10	63876-63878	30	
245-11	63879-63880	|	
245-12	63881-63883	30	
245-13	63884-63887	150	
245-14	63888-63889	|	
245-15	63890-63896	number	
245-16	63897-63899	40	
245-17	63900-63901	|	
245-18	63902-63904	40	
245-19	63905-63906	|	
245-20	63907-63909	40	
245-21	63910-63913	200	
245-22	63914-63915	|	
245-23	63916-63922	number	
245-24	63923-63924	-	
245-25	63924-63925	-	
245-26	63926-63929	Use	
245-27	63930-63931	#	
245-28	63931-63932	>	
245-29	63932-63933	>	
245-30	63934-63936	to	
245-31	63937-63943	remove	
245-32	63944-63957	double-quotes	
245-33	63958-63962	from	
245-34	63963-63966	the	
245-35	63967-63972	jsonb	
245-36	63973-63979	string	

#Text=SELECT x, x::TEXT, x#>>'{}', (x#>>'{}')::NUMERIC * 5, jsonb_typeof(x) FROM test WHERE jsonb_typeof(x) = 'number' OR jsonb_typeof(x) = 'string'; | ?column? | ?column? | jsonb_typeof
246-1	63980-63986	SELECT	
246-2	63987-63988	x	
246-3	63988-63989	,	
246-4	63990-63991	x	
246-5	63991-63992	:	
246-6	63992-63993	:	
246-7	63993-63997	TEXT	
246-8	63997-63998	,	
246-9	63999-64000	x	
246-10	64000-64001	#	
246-11	64001-64002	>	
246-12	64002-64003	>	
246-13	64003-64004	'	
246-14	64004-64005	{	
246-15	64005-64006	}	
246-16	64006-64007	'	
246-17	64007-64008	,	
246-18	64009-64010	(	
246-19	64010-64011	x	
246-20	64011-64012	#	
246-21	64012-64013	>	
246-22	64013-64014	>	
246-23	64014-64015	'	
246-24	64015-64016	{	
246-25	64016-64017	}	
246-26	64017-64018	'	
246-27	64018-64019	)	
246-28	64019-64020	:	
246-29	64020-64021	:	
246-30	64021-64028	NUMERIC	
246-31	64029-64030	*	
246-32	64031-64032	5	
246-33	64032-64033	,	
246-34	64034-64046	jsonb_typeof	
246-35	64046-64047	(	
246-36	64047-64048	x	
246-37	64048-64049	)	
246-38	64050-64054	FROM	
246-39	64055-64059	test	
246-40	64060-64065	WHERE	
246-41	64066-64078	jsonb_typeof	
246-42	64078-64079	(	
246-43	64079-64080	x	
246-44	64080-64081	)	
246-45	64082-64083	=	
246-46	64084-64085	'	
246-47	64085-64091	number	
246-48	64091-64092	'	
246-49	64093-64095	OR	
246-50	64096-64108	jsonb_typeof	
246-51	64108-64109	(	
246-52	64109-64110	x	
246-53	64110-64111	)	
246-54	64112-64113	=	
246-55	64114-64115	'	
246-56	64115-64121	string	
246-57	64121-64122	'	
246-58	64122-64123	;	
246-59	64124-64125	|	
246-60	64126-64127	?	
246-61	64127-64133	column	
246-62	64133-64134	?	
246-63	64135-64136	|	
246-64	64137-64138	?	
246-65	64138-64144	column	
246-66	64144-64145	?	
246-67	64146-64147	|	
246-68	64148-64160	jsonb_typeof	

#Text=-----+-----+----------+----------+-------------- "1" | "1" | 1 5 | string | 2 | 2 10 | number | 30 | 30 150 | number | 40 | 40 200 | number
247-1	64161-64162	-	
247-2	64162-64163	-	
247-3	64163-64164	-	
247-4	64164-64165	-	
247-5	64165-64166	-	
247-6	64166-64167	+	
247-7	64167-64168	-	
247-8	64168-64169	-	
247-9	64169-64170	-	
247-10	64170-64171	-	
247-11	64171-64172	-	
247-12	64172-64173	+	
247-13	64173-64174	-	
247-14	64174-64175	-	
247-15	64175-64176	-	
247-16	64176-64177	-	
247-17	64177-64178	-	
247-18	64178-64179	-	
247-19	64179-64180	-	
247-20	64180-64181	-	
247-21	64181-64182	-	
247-22	64182-64183	-	
247-23	64183-64184	+	
247-24	64184-64185	-	
247-25	64185-64186	-	
247-26	64186-64187	-	
247-27	64187-64188	-	
247-28	64188-64189	-	
247-29	64189-64190	-	
247-30	64190-64191	-	
247-31	64191-64192	-	
247-32	64192-64193	-	
247-33	64193-64194	-	
247-34	64194-64195	+	
247-35	64195-64196	-	
247-36	64196-64197	-	
247-37	64197-64198	-	
247-38	64198-64199	-	
247-39	64199-64200	-	
247-40	64200-64201	-	
247-41	64201-64202	-	
247-42	64202-64203	-	
247-43	64203-64204	-	
247-44	64204-64205	-	
247-45	64205-64206	-	
247-46	64206-64207	-	
247-47	64207-64208	-	
247-48	64208-64209	-	
247-49	64210-64211	"	
247-50	64211-64212	1	
247-51	64212-64213	"	
247-52	64214-64215	|	
247-53	64216-64217	"	
247-54	64217-64218	1	
247-55	64218-64219	"	
247-56	64220-64221	|	
247-57	64222-64223	1	
247-58	64224-64225	5	
247-59	64226-64227	|	
247-60	64228-64234	string	
247-61	64235-64236	|	
247-62	64237-64238	2	
247-63	64239-64240	|	
247-64	64241-64242	2	
247-65	64243-64245	10	
247-66	64246-64247	|	
247-67	64248-64254	number	
247-68	64255-64256	|	
247-69	64257-64259	30	
247-70	64260-64261	|	
247-71	64262-64264	30	
247-72	64265-64268	150	
247-73	64269-64270	|	
247-74	64271-64277	number	
247-75	64278-64279	|	
247-76	64280-64282	40	
247-77	64283-64284	|	
247-78	64285-64287	40	
247-79	64288-64291	200	
247-80	64292-64293	|	
247-81	64294-64300	number	

#Text=The first insert fails because 4f1 isn't double-quoted and can't be cast to a json numeric, but 4e1 can because it represents exponential notation. In trying to cast all values to numeric in the select, the "1" has double-quotes, so it fails. Using #>> removes the double quotes and allows the string value to be cast to numeric too. This
248-1	64301-64304	The	
248-2	64305-64310	first	
248-3	64311-64317	insert	
248-4	64318-64323	fails	
248-5	64324-64331	because	
248-6	64332-64335	4f1	
248-7	64336-64341	isn't	
248-8	64342-64355	double-quoted	
248-9	64356-64359	and	
248-10	64360-64365	can't	
248-11	64366-64368	be	
248-12	64369-64373	cast	
248-13	64374-64376	to	
248-14	64377-64378	a	
248-15	64379-64383	json	
248-16	64384-64391	numeric	
248-17	64391-64392	,	
248-18	64393-64396	but	
248-19	64397-64400	4e1	
248-20	64401-64404	can	
248-21	64405-64412	because	
248-22	64413-64415	it	
248-23	64416-64426	represents	
248-24	64427-64438	exponential	
248-25	64439-64447	notation	
248-26	64447-64448	.	
248-27	64449-64451	In	
248-28	64452-64458	trying	
248-29	64459-64461	to	
248-30	64462-64466	cast	
248-31	64467-64470	all	
248-32	64471-64477	values	
248-33	64478-64480	to	
248-34	64481-64488	numeric	
248-35	64489-64491	in	
248-36	64492-64495	the	
248-37	64496-64502	select	
248-38	64502-64503	,	
248-39	64504-64507	the	
248-40	64508-64509	"	
248-41	64509-64510	1	
248-42	64510-64511	"	
248-43	64512-64515	has	
248-44	64516-64529	double-quotes	
248-45	64529-64530	,	
248-46	64531-64533	so	
248-47	64534-64536	it	
248-48	64537-64542	fails	
248-49	64542-64543	.	
248-50	64544-64549	Using	
248-51	64550-64551	#	
248-52	64551-64552	>	
248-53	64552-64553	>	
248-54	64554-64561	removes	
248-55	64562-64565	the	
248-56	64566-64572	double	
248-57	64573-64579	quotes	
248-58	64580-64583	and	
248-59	64584-64590	allows	
248-60	64591-64594	the	
248-61	64595-64601	string	
248-62	64602-64607	value	
248-63	64608-64610	to	
248-64	64611-64613	be	
248-65	64614-64618	cast	
248-66	64619-64621	to	
248-67	64622-64629	numeric	
248-68	64630-64633	too	
248-69	64633-64634	.	
248-70	64635-64639	This	

#Text=discussion exposes the confusion of using json without casting. I have been using single jsonb values, but the same behavior happens with jsonb documents: DELETE FROM test; -- create document with keys 'a' and 'b'
249-1	64640-64650	discussion	
249-2	64651-64658	exposes	
249-3	64659-64662	the	
249-4	64663-64672	confusion	
249-5	64673-64675	of	
249-6	64676-64681	using	
249-7	64682-64686	json	
249-8	64687-64694	without	
249-9	64695-64702	casting	
249-10	64702-64703	.	
249-11	64704-64705	I	
249-12	64706-64710	have	
249-13	64711-64715	been	
249-14	64716-64721	using	
249-15	64722-64728	single	
249-16	64729-64734	jsonb	
249-17	64735-64741	values	
249-18	64741-64742	,	
249-19	64743-64746	but	
249-20	64747-64750	the	
249-21	64751-64755	same	
249-22	64756-64764	behavior	
249-23	64765-64772	happens	
249-24	64773-64777	with	
249-25	64778-64783	jsonb	
249-26	64784-64793	documents	
249-27	64793-64794	:	
249-28	64795-64801	DELETE	
249-29	64802-64806	FROM	
249-30	64807-64811	test	
249-31	64811-64812	;	
249-32	64813-64814	-	
249-33	64814-64815	-	
249-34	64816-64822	create	
249-35	64823-64831	document	
249-36	64832-64836	with	
249-37	64837-64841	keys	
249-38	64842-64843	'	
249-39	64843-64844	a	
249-40	64844-64845	'	
249-41	64846-64849	and	
249-42	64850-64851	'	
249-43	64851-64852	b	
249-44	64852-64853	'	

#Text=INSERT INTO test VALUES ('{"a": "xyz", "b": 5}'); -- access key 'a' SELECT x->'a', jsonb_typeof(x->'a'), pg_typeof(x->'a'), (x->'a')::TEXT, x->>'a', pg_typeof(x->>'a') FROM test;
250-1	64854-64860	INSERT	
250-2	64861-64865	INTO	
250-3	64866-64870	test	
250-4	64871-64877	VALUES	
250-5	64878-64879	(	
250-6	64879-64880	'	
250-7	64880-64881	{	
250-8	64881-64882	"	
250-9	64882-64883	a	
250-10	64883-64884	"	
250-11	64884-64885	:	
250-12	64886-64887	"	
250-13	64887-64890	xyz	
250-14	64890-64891	"	
250-15	64891-64892	,	
250-16	64893-64894	"	
250-17	64894-64895	b	
250-18	64895-64896	"	
250-19	64896-64897	:	
250-20	64898-64899	5	
250-21	64899-64900	}	
250-22	64900-64901	'	
250-23	64901-64902	)	
250-24	64902-64903	;	
250-25	64904-64905	-	
250-26	64905-64906	-	
250-27	64907-64913	access	
250-28	64914-64917	key	
250-29	64918-64919	'	
250-30	64919-64920	a	
250-31	64920-64921	'	
250-32	64922-64928	SELECT	
250-33	64929-64930	x	
250-34	64930-64931	-	
250-35	64931-64932	>	
250-36	64932-64933	'	
250-37	64933-64934	a	
250-38	64934-64935	'	
250-39	64935-64936	,	
250-40	64937-64949	jsonb_typeof	
250-41	64949-64950	(	
250-42	64950-64951	x	
250-43	64951-64952	-	
250-44	64952-64953	>	
250-45	64953-64954	'	
250-46	64954-64955	a	
250-47	64955-64956	'	
250-48	64956-64957	)	
250-49	64957-64958	,	
250-50	64959-64968	pg_typeof	
250-51	64968-64969	(	
250-52	64969-64970	x	
250-53	64970-64971	-	
250-54	64971-64972	>	
250-55	64972-64973	'	
250-56	64973-64974	a	
250-57	64974-64975	'	
250-58	64975-64976	)	
250-59	64976-64977	,	
250-60	64978-64979	(	
250-61	64979-64980	x	
250-62	64980-64981	-	
250-63	64981-64982	>	
250-64	64982-64983	'	
250-65	64983-64984	a	
250-66	64984-64985	'	
250-67	64985-64986	)	
250-68	64986-64987	:	
250-69	64987-64988	:	
250-70	64988-64992	TEXT	
250-71	64992-64993	,	
250-72	64994-64995	x	
250-73	64995-64996	-	
250-74	64996-64997	>	
250-75	64997-64998	>	
250-76	64998-64999	'	
250-77	64999-65000	a	
250-78	65000-65001	'	
250-79	65001-65002	,	
250-80	65003-65012	pg_typeof	
250-81	65012-65013	(	
250-82	65013-65014	x	
250-83	65014-65015	-	
250-84	65015-65016	>	
250-85	65016-65017	>	
250-86	65017-65018	'	
250-87	65018-65019	a	
250-88	65019-65020	'	
250-89	65020-65021	)	
250-90	65022-65026	FROM	
250-91	65027-65031	test	
250-92	65031-65032	;	

#Text=?column? | jsonb_typeof | pg_typeof | text | ?column? | pg_typeof ----------+--------------+-----------+-------+----------+-----------
251-1	65033-65034	?	
251-2	65034-65040	column	
251-3	65040-65041	?	
251-4	65042-65043	|	
251-5	65044-65056	jsonb_typeof	
251-6	65057-65058	|	
251-7	65059-65068	pg_typeof	
251-8	65069-65070	|	
251-9	65071-65075	text	
251-10	65076-65077	|	
251-11	65078-65079	?	
251-12	65079-65085	column	
251-13	65085-65086	?	
251-14	65087-65088	|	
251-15	65089-65098	pg_typeof	
251-16	65099-65100	-	
251-17	65100-65101	-	
251-18	65101-65102	-	
251-19	65102-65103	-	
251-20	65103-65104	-	
251-21	65104-65105	-	
251-22	65105-65106	-	
251-23	65106-65107	-	
251-24	65107-65108	-	
251-25	65108-65109	-	
251-26	65109-65110	+	
251-27	65110-65111	-	
251-28	65111-65112	-	
251-29	65112-65113	-	
251-30	65113-65114	-	
251-31	65114-65115	-	
251-32	65115-65116	-	
251-33	65116-65117	-	
251-34	65117-65118	-	
251-35	65118-65119	-	
251-36	65119-65120	-	
251-37	65120-65121	-	
251-38	65121-65122	-	
251-39	65122-65123	-	
251-40	65123-65124	-	
251-41	65124-65125	+	
251-42	65125-65126	-	
251-43	65126-65127	-	
251-44	65127-65128	-	
251-45	65128-65129	-	
251-46	65129-65130	-	
251-47	65130-65131	-	
251-48	65131-65132	-	
251-49	65132-65133	-	
251-50	65133-65134	-	
251-51	65134-65135	-	
251-52	65135-65136	-	
251-53	65136-65137	+	
251-54	65137-65138	-	
251-55	65138-65139	-	
251-56	65139-65140	-	
251-57	65140-65141	-	
251-58	65141-65142	-	
251-59	65142-65143	-	
251-60	65143-65144	-	
251-61	65144-65145	+	
251-62	65145-65146	-	
251-63	65146-65147	-	
251-64	65147-65148	-	
251-65	65148-65149	-	
251-66	65149-65150	-	
251-67	65150-65151	-	
251-68	65151-65152	-	
251-69	65152-65153	-	
251-70	65153-65154	-	
251-71	65154-65155	-	
251-72	65155-65156	+	
251-73	65156-65157	-	
251-74	65157-65158	-	
251-75	65158-65159	-	
251-76	65159-65160	-	
251-77	65160-65161	-	
251-78	65161-65162	-	
251-79	65162-65163	-	
251-80	65163-65164	-	
251-81	65164-65165	-	
251-82	65165-65166	-	
251-83	65166-65167	-	

#Text="xyz" | string | jsonb | "xyz" | xyz | text -- access key 'b'
252-1	65168-65169	"	
252-2	65169-65172	xyz	
252-3	65172-65173	"	
252-4	65174-65175	|	
252-5	65176-65182	string	
252-6	65183-65184	|	
252-7	65185-65190	jsonb	
252-8	65191-65192	|	
252-9	65193-65194	"	
252-10	65194-65197	xyz	
252-11	65197-65198	"	
252-12	65199-65200	|	
252-13	65201-65204	xyz	
252-14	65205-65206	|	
252-15	65207-65211	text	
252-16	65212-65213	-	
252-17	65213-65214	-	
252-18	65215-65221	access	
252-19	65222-65225	key	
252-20	65226-65227	'	
252-21	65227-65228	b	
252-22	65228-65229	'	

#Text=SELECT x->'b', jsonb_typeof(x->'b'), pg_typeof(x->'b'), (x->'b')::TEXT, x->>'b', pg_typeof(x->>'b') FROM test; ?column? | jsonb_typeof | pg_typeof | text | ?column? | pg_typeof
253-1	65230-65236	SELECT	
253-2	65237-65238	x	
253-3	65238-65239	-	
253-4	65239-65240	>	
253-5	65240-65241	'	
253-6	65241-65242	b	
253-7	65242-65243	'	
253-8	65243-65244	,	
253-9	65245-65257	jsonb_typeof	
253-10	65257-65258	(	
253-11	65258-65259	x	
253-12	65259-65260	-	
253-13	65260-65261	>	
253-14	65261-65262	'	
253-15	65262-65263	b	
253-16	65263-65264	'	
253-17	65264-65265	)	
253-18	65265-65266	,	
253-19	65267-65276	pg_typeof	
253-20	65276-65277	(	
253-21	65277-65278	x	
253-22	65278-65279	-	
253-23	65279-65280	>	
253-24	65280-65281	'	
253-25	65281-65282	b	
253-26	65282-65283	'	
253-27	65283-65284	)	
253-28	65284-65285	,	
253-29	65286-65287	(	
253-30	65287-65288	x	
253-31	65288-65289	-	
253-32	65289-65290	>	
253-33	65290-65291	'	
253-34	65291-65292	b	
253-35	65292-65293	'	
253-36	65293-65294	)	
253-37	65294-65295	:	
253-38	65295-65296	:	
253-39	65296-65300	TEXT	
253-40	65300-65301	,	
253-41	65302-65303	x	
253-42	65303-65304	-	
253-43	65304-65305	>	
253-44	65305-65306	>	
253-45	65306-65307	'	
253-46	65307-65308	b	
253-47	65308-65309	'	
253-48	65309-65310	,	
253-49	65311-65320	pg_typeof	
253-50	65320-65321	(	
253-51	65321-65322	x	
253-52	65322-65323	-	
253-53	65323-65324	>	
253-54	65324-65325	>	
253-55	65325-65326	'	
253-56	65326-65327	b	
253-57	65327-65328	'	
253-58	65328-65329	)	
253-59	65330-65334	FROM	
253-60	65335-65339	test	
253-61	65339-65340	;	
253-62	65341-65342	?	
253-63	65342-65348	column	
253-64	65348-65349	?	
253-65	65350-65351	|	
253-66	65352-65364	jsonb_typeof	
253-67	65365-65366	|	
253-68	65367-65376	pg_typeof	
253-69	65377-65378	|	
253-70	65379-65383	text	
253-71	65384-65385	|	
253-72	65386-65387	?	
253-73	65387-65393	column	
253-74	65393-65394	?	
253-75	65395-65396	|	
253-76	65397-65406	pg_typeof	

#Text=----------+--------------+-----------+------+----------+----------- | number | jsonb | 5 | 5 | text So, in summary: If you want to use json values as text, use ->> or #>>
254-1	65407-65408	-	
254-2	65408-65409	-	
254-3	65409-65410	-	
254-4	65410-65411	-	
254-5	65411-65412	-	
254-6	65412-65413	-	
254-7	65413-65414	-	
254-8	65414-65415	-	
254-9	65415-65416	-	
254-10	65416-65417	-	
254-11	65417-65418	+	
254-12	65418-65419	-	
254-13	65419-65420	-	
254-14	65420-65421	-	
254-15	65421-65422	-	
254-16	65422-65423	-	
254-17	65423-65424	-	
254-18	65424-65425	-	
254-19	65425-65426	-	
254-20	65426-65427	-	
254-21	65427-65428	-	
254-22	65428-65429	-	
254-23	65429-65430	-	
254-24	65430-65431	-	
254-25	65431-65432	-	
254-26	65432-65433	+	
254-27	65433-65434	-	
254-28	65434-65435	-	
254-29	65435-65436	-	
254-30	65436-65437	-	
254-31	65437-65438	-	
254-32	65438-65439	-	
254-33	65439-65440	-	
254-34	65440-65441	-	
254-35	65441-65442	-	
254-36	65442-65443	-	
254-37	65443-65444	-	
254-38	65444-65445	+	
254-39	65445-65446	-	
254-40	65446-65447	-	
254-41	65447-65448	-	
254-42	65448-65449	-	
254-43	65449-65450	-	
254-44	65450-65451	-	
254-45	65451-65452	+	
254-46	65452-65453	-	
254-47	65453-65454	-	
254-48	65454-65455	-	
254-49	65455-65456	-	
254-50	65456-65457	-	
254-51	65457-65458	-	
254-52	65458-65459	-	
254-53	65459-65460	-	
254-54	65460-65461	-	
254-55	65461-65462	-	
254-56	65462-65463	+	
254-57	65463-65464	-	
254-58	65464-65465	-	
254-59	65465-65466	-	
254-60	65466-65467	-	
254-61	65467-65468	-	
254-62	65468-65469	-	
254-63	65469-65470	-	
254-64	65470-65471	-	
254-65	65471-65472	-	
254-66	65472-65473	-	
254-67	65473-65474	-	
254-68	65475-65476	|	
254-69	65477-65483	number	
254-70	65484-65485	|	
254-71	65486-65491	jsonb	
254-72	65492-65493	|	
254-73	65494-65495	5	
254-74	65496-65497	|	
254-75	65498-65499	5	
254-76	65500-65501	|	
254-77	65502-65506	text	
254-78	65507-65509	So	
254-79	65509-65510	,	
254-80	65511-65513	in	
254-81	65514-65521	summary	
254-82	65521-65522	:	
254-83	65523-65525	If	
254-84	65526-65529	you	
254-85	65530-65534	want	
254-86	65535-65537	to	
254-87	65538-65541	use	
254-88	65542-65546	json	
254-89	65547-65553	values	
254-90	65554-65556	as	
254-91	65557-65561	text	
254-92	65561-65562	,	
254-93	65563-65566	use	
254-94	65567-65568	-	
254-95	65568-65569	>	
254-96	65569-65570	>	
254-97	65571-65573	or	
254-98	65574-65575	#	
254-99	65575-65576	>	
254-100	65576-65577	>	

#Text=If you want to cast to another sql data type, use :: or cast to cast, but be sure all values can be cast to the new sql data type View or Post Comments Two Interviews Friday, July 10, 2020 I have done two interviews in the past month. The first one was done by the Linux Inlaws and was published on Hacker Public Radio.
255-1	65578-65580	If	
255-2	65581-65584	you	
255-3	65585-65589	want	
255-4	65590-65592	to	
255-5	65593-65597	cast	
255-6	65598-65600	to	
255-7	65601-65608	another	
255-8	65609-65612	sql	
255-9	65613-65617	data	
255-10	65618-65622	type	
255-11	65622-65623	,	
255-12	65624-65627	use	
255-13	65628-65629	:	
255-14	65629-65630	:	
255-15	65631-65633	or	
255-16	65634-65638	cast	
255-17	65639-65641	to	
255-18	65642-65646	cast	
255-19	65646-65647	,	
255-20	65648-65651	but	
255-21	65652-65654	be	
255-22	65655-65659	sure	
255-23	65660-65663	all	
255-24	65664-65670	values	
255-25	65671-65674	can	
255-26	65675-65677	be	
255-27	65678-65682	cast	
255-28	65683-65685	to	
255-29	65686-65689	the	
255-30	65690-65693	new	
255-31	65694-65697	sql	
255-32	65698-65702	data	
255-33	65703-65707	type	
255-34	65708-65712	View	
255-35	65713-65715	or	
255-36	65716-65720	Post	
255-37	65721-65729	Comments	
255-38	65730-65733	Two	
255-39	65734-65744	Interviews	
255-40	65745-65751	Friday	
255-41	65751-65752	,	
255-42	65753-65757	July	
255-43	65758-65760	10	
255-44	65760-65761	,	
255-45	65762-65766	2020	
255-46	65767-65768	I	
255-47	65769-65773	have	
255-48	65774-65778	done	
255-49	65779-65782	two	
255-50	65783-65793	interviews	
255-51	65794-65796	in	
255-52	65797-65800	the	
255-53	65801-65805	past	
255-54	65806-65811	month	
255-55	65811-65812	.	
255-56	65813-65816	The	
255-57	65817-65822	first	
255-58	65823-65826	one	
255-59	65827-65830	was	
255-60	65831-65835	done	
255-61	65836-65838	by	
255-62	65839-65842	the	
255-63	65843-65848	Linux	
255-64	65849-65855	Inlaws	
255-65	65856-65859	and	
255-66	65860-65863	was	
255-67	65864-65873	published	
255-68	65874-65876	on	
255-69	65877-65883	Hacker	
255-70	65884-65890	Public	
255-71	65891-65896	Radio	
255-72	65896-65897	.	

#Text=This interview discusses the history and open source aspects of the Postgres project, and its health and future direction. The second interview is more personal, discussing how I got involved in computers and my early experiences with Postgres. It also discusses technology disruption, and its challenge to time management. The final quarter covers religious topics. View or Post Comments Postgres Marketing
256-1	65898-65902	This	
256-2	65903-65912	interview	
256-3	65913-65922	discusses	
256-4	65923-65926	the	
256-5	65927-65934	history	
256-6	65935-65938	and	
256-7	65939-65943	open	
256-8	65944-65950	source	
256-9	65951-65958	aspects	
256-10	65959-65961	of	
256-11	65962-65965	the	
256-12	65966-65974	Postgres	
256-13	65975-65982	project	
256-14	65982-65983	,	
256-15	65984-65987	and	
256-16	65988-65991	its	
256-17	65992-65998	health	
256-18	65999-66002	and	
256-19	66003-66009	future	
256-20	66010-66019	direction	
256-21	66019-66020	.	
256-22	66021-66024	The	
256-23	66025-66031	second	
256-24	66032-66041	interview	
256-25	66042-66044	is	
256-26	66045-66049	more	
256-27	66050-66058	personal	
256-28	66058-66059	,	
256-29	66060-66070	discussing	
256-30	66071-66074	how	
256-31	66075-66076	I	
256-32	66077-66080	got	
256-33	66081-66089	involved	
256-34	66090-66092	in	
256-35	66093-66102	computers	
256-36	66103-66106	and	
256-37	66107-66109	my	
256-38	66110-66115	early	
256-39	66116-66127	experiences	
256-40	66128-66132	with	
256-41	66133-66141	Postgres	
256-42	66141-66142	.	
256-43	66143-66145	It	
256-44	66146-66150	also	
256-45	66151-66160	discusses	
256-46	66161-66171	technology	
256-47	66172-66182	disruption	
256-48	66182-66183	,	
256-49	66184-66187	and	
256-50	66188-66191	its	
256-51	66192-66201	challenge	
256-52	66202-66204	to	
256-53	66205-66209	time	
256-54	66210-66220	management	
256-55	66220-66221	.	
256-56	66222-66225	The	
256-57	66226-66231	final	
256-58	66232-66239	quarter	
256-59	66240-66246	covers	
256-60	66247-66256	religious	
256-61	66257-66263	topics	
256-62	66263-66264	.	
256-63	66265-66269	View	
256-64	66270-66272	or	
256-65	66273-66277	Post	
256-66	66278-66286	Comments	
256-67	66287-66295	Postgres	
256-68	66296-66305	Marketing	

#Text=Wednesday, July 8, 2020 Postgres is mostly a technology-driven community, so marketing often suffers. However, one great thing about the community is that it is distributed, so anyone can get involved and help. Here are some examples of very successful community-driven marketing ideas:
257-1	66306-66315	Wednesday	
257-2	66315-66316	,	
257-3	66317-66321	July	
257-4	66322-66323	8	
257-5	66323-66324	,	
257-6	66325-66329	2020	
257-7	66330-66338	Postgres	
257-8	66339-66341	is	
257-9	66342-66348	mostly	
257-10	66349-66350	a	
257-11	66351-66368	technology-driven	
257-12	66369-66378	community	
257-13	66378-66379	,	
257-14	66380-66382	so	
257-15	66383-66392	marketing	
257-16	66393-66398	often	
257-17	66399-66406	suffers	
257-18	66406-66407	.	
257-19	66408-66415	However	
257-20	66415-66416	,	
257-21	66417-66420	one	
257-22	66421-66426	great	
257-23	66427-66432	thing	
257-24	66433-66438	about	
257-25	66439-66442	the	
257-26	66443-66452	community	
257-27	66453-66455	is	
257-28	66456-66460	that	
257-29	66461-66463	it	
257-30	66464-66466	is	
257-31	66467-66478	distributed	
257-32	66478-66479	,	
257-33	66480-66482	so	
257-34	66483-66489	anyone	
257-35	66490-66493	can	
257-36	66494-66497	get	
257-37	66498-66506	involved	
257-38	66507-66510	and	
257-39	66511-66515	help	
257-40	66515-66516	.	
257-41	66517-66521	Here	
257-42	66522-66525	are	
257-43	66526-66530	some	
257-44	66531-66539	examples	
257-45	66540-66542	of	
257-46	66543-66547	very	
257-47	66548-66558	successful	
257-48	66559-66575	community-driven	
257-49	66576-66585	marketing	
257-50	66586-66591	ideas	
257-51	66591-66592	:	

#Text=PostgreSQL Funds Group release 12 coin Pg-us Postgres community founding coin Russian Postgres/MySQL coin Postgres Pro PostgreSQL for Beginners booklet Here are front and rear images of these objects. Of course, I have also accumulated many Postgres
258-1	66593-66603	PostgreSQL	
258-2	66604-66609	Funds	
258-3	66610-66615	Group	
258-4	66616-66623	release	
258-5	66624-66626	12	
258-6	66627-66631	coin	
258-7	66632-66637	Pg-us	
258-8	66638-66646	Postgres	
258-9	66647-66656	community	
258-10	66657-66665	founding	
258-11	66666-66670	coin	
258-12	66671-66678	Russian	
258-13	66679-66687	Postgres	
258-14	66687-66688	/	
258-15	66688-66693	MySQL	
258-16	66694-66698	coin	
258-17	66699-66707	Postgres	
258-18	66708-66711	Pro	
258-19	66712-66722	PostgreSQL	
258-20	66723-66726	for	
258-21	66727-66736	Beginners	
258-22	66737-66744	booklet	
258-23	66745-66749	Here	
258-24	66750-66753	are	
258-25	66754-66759	front	
258-26	66760-66763	and	
258-27	66764-66768	rear	
258-28	66769-66775	images	
258-29	66776-66778	of	
258-30	66779-66784	these	
258-31	66785-66792	objects	
258-32	66792-66793	.	
258-33	66794-66796	Of	
258-34	66797-66803	course	
258-35	66803-66804	,	
258-36	66805-66806	I	
258-37	66807-66811	have	
258-38	66812-66816	also	
258-39	66817-66828	accumulated	
258-40	66829-66833	many	
258-41	66834-66842	Postgres	

#Text=pins over the years. I am inspired by these marketing efforts and hope they continue. View or Post Comments Boolean Indexes Friday, July 3, 2020 For btree and hash indexes to be used for lookups, values being requested must be very
259-1	66843-66847	pins	
259-2	66848-66852	over	
259-3	66853-66856	the	
259-4	66857-66862	years	
259-5	66862-66863	.	
259-6	66864-66865	I	
259-7	66866-66868	am	
259-8	66869-66877	inspired	
259-9	66878-66880	by	
259-10	66881-66886	these	
259-11	66887-66896	marketing	
259-12	66897-66904	efforts	
259-13	66905-66908	and	
259-14	66909-66913	hope	
259-15	66914-66918	they	
259-16	66919-66927	continue	
259-17	66927-66928	.	
259-18	66929-66933	View	
259-19	66934-66936	or	
259-20	66937-66941	Post	
259-21	66942-66950	Comments	
259-22	66951-66958	Boolean	
259-23	66959-66966	Indexes	
259-24	66967-66973	Friday	
259-25	66973-66974	,	
259-26	66975-66979	July	
259-27	66980-66981	3	
259-28	66981-66982	,	
259-29	66983-66987	2020	
259-30	66988-66991	For	
259-31	66992-66997	btree	
259-32	66998-67001	and	
259-33	67002-67006	hash	
259-34	67007-67014	indexes	
259-35	67015-67017	to	
259-36	67018-67020	be	
259-37	67021-67025	used	
259-38	67026-67029	for	
259-39	67030-67037	lookups	
259-40	67037-67038	,	
259-41	67039-67045	values	
259-42	67046-67051	being	
259-43	67052-67061	requested	
259-44	67062-67066	must	
259-45	67067-67069	be	
259-46	67070-67074	very	

#Text=restrictive, roughly 3-5% of a table's rows. Let's consider a boolean column — it can contain only three values: true, false, and null. By definition, at least one of those three values will be in more than 5% of the table's rows, so why index them?
260-1	67075-67086	restrictive	
260-2	67086-67087	,	
260-3	67088-67095	roughly	
260-4	67096-67097	3	
260-5	67097-67098	-	
260-6	67098-67100	5%	
260-7	67101-67103	of	
260-8	67104-67105	a	
260-9	67106-67113	table's	
260-10	67114-67118	rows	
260-11	67118-67119	.	
260-12	67120-67125	Let's	
260-13	67126-67134	consider	
260-14	67135-67136	a	
260-15	67137-67144	boolean	
260-16	67145-67151	column	
260-17	67152-67153	—	
260-18	67154-67156	it	
260-19	67157-67160	can	
260-20	67161-67168	contain	
260-21	67169-67173	only	
260-22	67174-67179	three	
260-23	67180-67186	values	
260-24	67186-67187	:	
260-25	67188-67192	true	
260-26	67192-67193	,	
260-27	67194-67199	false	
260-28	67199-67200	,	
260-29	67201-67204	and	
260-30	67205-67209	null	
260-31	67209-67210	.	
260-32	67211-67213	By	
260-33	67214-67224	definition	
260-34	67224-67225	,	
260-35	67226-67228	at	
260-36	67229-67234	least	
260-37	67235-67238	one	
260-38	67239-67241	of	
260-39	67242-67247	those	
260-40	67248-67253	three	
260-41	67254-67260	values	
260-42	67261-67265	will	
260-43	67266-67268	be	
260-44	67269-67271	in	
260-45	67272-67276	more	
260-46	67277-67281	than	
260-47	67282-67284	5%	
260-48	67285-67287	of	
260-49	67288-67291	the	
260-50	67292-67299	table's	
260-51	67300-67304	rows	
260-52	67304-67305	,	
260-53	67306-67308	so	
260-54	67309-67312	why	
260-55	67313-67318	index	
260-56	67319-67323	them	
260-57	67323-67324	?	

#Text=A better solution, particularly for boolean fields, is to create a partial index so only rare values are indexed. Partial indexes can also be used to index non-boolean fields when there are a large number of common values that aren't worth indexing. View or Post Comments Global Indexes
261-1	67325-67326	A	
261-2	67327-67333	better	
261-3	67334-67342	solution	
261-4	67342-67343	,	
261-5	67344-67356	particularly	
261-6	67357-67360	for	
261-7	67361-67368	boolean	
261-8	67369-67375	fields	
261-9	67375-67376	,	
261-10	67377-67379	is	
261-11	67380-67382	to	
261-12	67383-67389	create	
261-13	67390-67391	a	
261-14	67392-67399	partial	
261-15	67400-67405	index	
261-16	67406-67408	so	
261-17	67409-67413	only	
261-18	67414-67418	rare	
261-19	67419-67425	values	
261-20	67426-67429	are	
261-21	67430-67437	indexed	
261-22	67437-67438	.	
261-23	67439-67446	Partial	
261-24	67447-67454	indexes	
261-25	67455-67458	can	
261-26	67459-67463	also	
261-27	67464-67466	be	
261-28	67467-67471	used	
261-29	67472-67474	to	
261-30	67475-67480	index	
261-31	67481-67492	non-boolean	
261-32	67493-67499	fields	
261-33	67500-67504	when	
261-34	67505-67510	there	
261-35	67511-67514	are	
261-36	67515-67516	a	
261-37	67517-67522	large	
261-38	67523-67529	number	
261-39	67530-67532	of	
261-40	67533-67539	common	
261-41	67540-67546	values	
261-42	67547-67551	that	
261-43	67552-67558	aren't	
261-44	67559-67564	worth	
261-45	67565-67573	indexing	
261-46	67573-67574	.	
261-47	67575-67579	View	
261-48	67580-67582	or	
261-49	67583-67587	Post	
261-50	67588-67596	Comments	
261-51	67597-67603	Global	
261-52	67604-67611	Indexes	

#Text=Wednesday, July 1, 2020 Postgres indexes can only be defined on single tables. Why would you want to have indexes that reference multiple tables, i.e., global indexes? This email covers some of the reasons why global indexes can be useful. One big use-case is
262-1	67612-67621	Wednesday	
262-2	67621-67622	,	
262-3	67623-67627	July	
262-4	67628-67629	1	
262-5	67629-67630	,	
262-6	67631-67635	2020	
262-7	67636-67644	Postgres	
262-8	67645-67652	indexes	
262-9	67653-67656	can	
262-10	67657-67661	only	
262-11	67662-67664	be	
262-12	67665-67672	defined	
262-13	67673-67675	on	
262-14	67676-67682	single	
262-15	67683-67689	tables	
262-16	67689-67690	.	
262-17	67691-67694	Why	
262-18	67695-67700	would	
262-19	67701-67704	you	
262-20	67705-67709	want	
262-21	67710-67712	to	
262-22	67713-67717	have	
262-23	67718-67725	indexes	
262-24	67726-67730	that	
262-25	67731-67740	reference	
262-26	67741-67749	multiple	
262-27	67750-67756	tables	
262-28	67756-67757	,	
262-29	67758-67761	i.e	
262-30	67761-67762	.	
262-31	67762-67763	,	
262-32	67764-67770	global	
262-33	67771-67778	indexes	
262-34	67778-67779	?	
262-35	67780-67784	This	
262-36	67785-67790	email	
262-37	67791-67797	covers	
262-38	67798-67802	some	
262-39	67803-67805	of	
262-40	67806-67809	the	
262-41	67810-67817	reasons	
262-42	67818-67821	why	
262-43	67822-67828	global	
262-44	67829-67836	indexes	
262-45	67837-67840	can	
262-46	67841-67843	be	
262-47	67844-67850	useful	
262-48	67850-67851	.	
262-49	67852-67855	One	
262-50	67856-67859	big	
262-51	67860-67868	use-case	
262-52	67869-67871	is	

#Text=the ability to create indexes on partitioned tables that index all its child tables, rather than requiring a separate index on each child table. This would allow references to partitioned tables as foreign keys without requiring the partition key to be part of the foreign key reference; Postgres 12 allows such foreign keys if they match partition keys.
263-1	67872-67875	the	
263-2	67876-67883	ability	
263-3	67884-67886	to	
263-4	67887-67893	create	
263-5	67894-67901	indexes	
263-6	67902-67904	on	
263-7	67905-67916	partitioned	
263-8	67917-67923	tables	
263-9	67924-67928	that	
263-10	67929-67934	index	
263-11	67935-67938	all	
263-12	67939-67942	its	
263-13	67943-67948	child	
263-14	67949-67955	tables	
263-15	67955-67956	,	
263-16	67957-67963	rather	
263-17	67964-67968	than	
263-18	67969-67978	requiring	
263-19	67979-67980	a	
263-20	67981-67989	separate	
263-21	67990-67995	index	
263-22	67996-67998	on	
263-23	67999-68003	each	
263-24	68004-68009	child	
263-25	68010-68015	table	
263-26	68015-68016	.	
263-27	68017-68021	This	
263-28	68022-68027	would	
263-29	68028-68033	allow	
263-30	68034-68044	references	
263-31	68045-68047	to	
263-32	68048-68059	partitioned	
263-33	68060-68066	tables	
263-34	68067-68069	as	
263-35	68070-68077	foreign	
263-36	68078-68082	keys	
263-37	68083-68090	without	
263-38	68091-68100	requiring	
263-39	68101-68104	the	
263-40	68105-68114	partition	
263-41	68115-68118	key	
263-42	68119-68121	to	
263-43	68122-68124	be	
263-44	68125-68129	part	
263-45	68130-68132	of	
263-46	68133-68136	the	
263-47	68137-68144	foreign	
263-48	68145-68148	key	
263-49	68149-68158	reference	
263-50	68158-68159	;	
263-51	68160-68168	Postgres	
263-52	68169-68171	12	
263-53	68172-68178	allows	
263-54	68179-68183	such	
263-55	68184-68191	foreign	
263-56	68192-68196	keys	
263-57	68197-68199	if	
263-58	68200-68204	they	
263-59	68205-68210	match	
263-60	68211-68220	partition	
263-61	68221-68225	keys	
263-62	68225-68226	.	

#Text=A second use-case for global indexes is the ability to add a uniqueness constraint to a partitioned table where the unique columns are not part of the partition key. A third use-case is the ability to index values that only appear in a few partitions, and are not part of the partition key. A global index would avoid having to check each partition table's index for the desired value.
264-1	68227-68228	A	
264-2	68229-68235	second	
264-3	68236-68244	use-case	
264-4	68245-68248	for	
264-5	68249-68255	global	
264-6	68256-68263	indexes	
264-7	68264-68266	is	
264-8	68267-68270	the	
264-9	68271-68278	ability	
264-10	68279-68281	to	
264-11	68282-68285	add	
264-12	68286-68287	a	
264-13	68288-68298	uniqueness	
264-14	68299-68309	constraint	
264-15	68310-68312	to	
264-16	68313-68314	a	
264-17	68315-68326	partitioned	
264-18	68327-68332	table	
264-19	68333-68338	where	
264-20	68339-68342	the	
264-21	68343-68349	unique	
264-22	68350-68357	columns	
264-23	68358-68361	are	
264-24	68362-68365	not	
264-25	68366-68370	part	
264-26	68371-68373	of	
264-27	68374-68377	the	
264-28	68378-68387	partition	
264-29	68388-68391	key	
264-30	68391-68392	.	
264-31	68393-68394	A	
264-32	68395-68400	third	
264-33	68401-68409	use-case	
264-34	68410-68412	is	
264-35	68413-68416	the	
264-36	68417-68424	ability	
264-37	68425-68427	to	
264-38	68428-68433	index	
264-39	68434-68440	values	
264-40	68441-68445	that	
264-41	68446-68450	only	
264-42	68451-68457	appear	
264-43	68458-68460	in	
264-44	68461-68462	a	
264-45	68463-68466	few	
264-46	68467-68477	partitions	
264-47	68477-68478	,	
264-48	68479-68482	and	
264-49	68483-68486	are	
264-50	68487-68490	not	
264-51	68491-68495	part	
264-52	68496-68498	of	
264-53	68499-68502	the	
264-54	68503-68512	partition	
264-55	68513-68516	key	
264-56	68516-68517	.	
264-57	68518-68519	A	
264-58	68520-68526	global	
264-59	68527-68532	index	
264-60	68533-68538	would	
264-61	68539-68544	avoid	
264-62	68545-68551	having	
264-63	68552-68554	to	
264-64	68555-68560	check	
264-65	68561-68565	each	
264-66	68566-68575	partition	
264-67	68576-68583	table's	
264-68	68584-68589	index	
264-69	68590-68593	for	
264-70	68594-68597	the	
264-71	68598-68605	desired	
264-72	68606-68611	value	
264-73	68611-68612	.	

#Text=It is still unclear if these use-cases justify the architectural changes needed to enable global indexes. Some of these features can be simulated using triggers and user lookup tables. A large global index might also reintroduce problems that prompted the creation of partitioning in the first place. Update: summary email 2021-01-08 View or Post Comments
265-1	68613-68615	It	
265-2	68616-68618	is	
265-3	68619-68624	still	
265-4	68625-68632	unclear	
265-5	68633-68635	if	
265-6	68636-68641	these	
265-7	68642-68651	use-cases	
265-8	68652-68659	justify	
265-9	68660-68663	the	
265-10	68664-68677	architectural	
265-11	68678-68685	changes	
265-12	68686-68692	needed	
265-13	68693-68695	to	
265-14	68696-68702	enable	
265-15	68703-68709	global	
265-16	68710-68717	indexes	
265-17	68717-68718	.	
265-18	68719-68723	Some	
265-19	68724-68726	of	
265-20	68727-68732	these	
265-21	68733-68741	features	
265-22	68742-68745	can	
265-23	68746-68748	be	
265-24	68749-68758	simulated	
265-25	68759-68764	using	
265-26	68765-68773	triggers	
265-27	68774-68777	and	
265-28	68778-68782	user	
265-29	68783-68789	lookup	
265-30	68790-68796	tables	
265-31	68796-68797	.	
265-32	68798-68799	A	
265-33	68800-68805	large	
265-34	68806-68812	global	
265-35	68813-68818	index	
265-36	68819-68824	might	
265-37	68825-68829	also	
265-38	68830-68841	reintroduce	
265-39	68842-68850	problems	
265-40	68851-68855	that	
265-41	68856-68864	prompted	
265-42	68865-68868	the	
265-43	68869-68877	creation	
265-44	68878-68880	of	
265-45	68881-68893	partitioning	
265-46	68894-68896	in	
265-47	68897-68900	the	
265-48	68901-68906	first	
265-49	68907-68912	place	
265-50	68912-68913	.	
265-51	68914-68920	Update	
265-52	68920-68921	:	
265-53	68922-68929	summary	
265-54	68930-68935	email	
265-55	68936-68940	2021	
265-56	68940-68941	-	
265-57	68941-68943	01	
265-58	68943-68944	-	
265-59	68944-68946	08	
265-60	68947-68951	View	
265-61	68952-68954	or	
265-62	68955-68959	Post	
265-63	68960-68968	Comments	

#Text=Hardware Acceleration for Databases Monday, June 29, 2020 There is a long history of hardware acceleration, i.e., hardware modules helping the cpu. There was the 80287 math coprocessor, sound cards, and video cards.
266-1	68969-68977	Hardware	
266-2	68978-68990	Acceleration	
266-3	68991-68994	for	
266-4	68995-69004	Databases	
266-5	69005-69011	Monday	
266-6	69011-69012	,	
266-7	69013-69017	June	
266-8	69018-69020	29	
266-9	69020-69021	,	
266-10	69022-69026	2020	
266-11	69027-69032	There	
266-12	69033-69035	is	
266-13	69036-69037	a	
266-14	69038-69042	long	
266-15	69043-69050	history	
266-16	69051-69053	of	
266-17	69054-69062	hardware	
266-18	69063-69075	acceleration	
266-19	69075-69076	,	
266-20	69077-69080	i.e	
266-21	69080-69081	.	
266-22	69081-69082	,	
266-23	69083-69091	hardware	
266-24	69092-69099	modules	
266-25	69100-69107	helping	
266-26	69108-69111	the	
266-27	69112-69115	cpu	
266-28	69115-69116	.	
266-29	69117-69122	There	
266-30	69123-69126	was	
266-31	69127-69130	the	
266-32	69131-69136	80287	
266-33	69137-69141	math	
266-34	69142-69153	coprocessor	
266-35	69153-69154	,	
266-36	69155-69160	sound	
266-37	69161-69166	cards	
266-38	69166-69167	,	
266-39	69168-69171	and	
266-40	69172-69177	video	
266-41	69178-69183	cards	
266-42	69183-69184	.	

#Text=The computer industry is constantly moving things from the cpu to the motherboard and external cards, and back again. Movement is mostly determined by whether the cpu is able to efficiently perform the task, the transfer bandwidth needed to perform the task, and the flexibility of replaceable external cards. This year, the big questions for database software is if and how to make use of graphics processing unit (gpu) and
267-1	69185-69188	The	
267-2	69189-69197	computer	
267-3	69198-69206	industry	
267-4	69207-69209	is	
267-5	69210-69220	constantly	
267-6	69221-69227	moving	
267-7	69228-69234	things	
267-8	69235-69239	from	
267-9	69240-69243	the	
267-10	69244-69247	cpu	
267-11	69248-69250	to	
267-12	69251-69254	the	
267-13	69255-69266	motherboard	
267-14	69267-69270	and	
267-15	69271-69279	external	
267-16	69280-69285	cards	
267-17	69285-69286	,	
267-18	69287-69290	and	
267-19	69291-69295	back	
267-20	69296-69301	again	
267-21	69301-69302	.	
267-22	69303-69311	Movement	
267-23	69312-69314	is	
267-24	69315-69321	mostly	
267-25	69322-69332	determined	
267-26	69333-69335	by	
267-27	69336-69343	whether	
267-28	69344-69347	the	
267-29	69348-69351	cpu	
267-30	69352-69354	is	
267-31	69355-69359	able	
267-32	69360-69362	to	
267-33	69363-69374	efficiently	
267-34	69375-69382	perform	
267-35	69383-69386	the	
267-36	69387-69391	task	
267-37	69391-69392	,	
267-38	69393-69396	the	
267-39	69397-69405	transfer	
267-40	69406-69415	bandwidth	
267-41	69416-69422	needed	
267-42	69423-69425	to	
267-43	69426-69433	perform	
267-44	69434-69437	the	
267-45	69438-69442	task	
267-46	69442-69443	,	
267-47	69444-69447	and	
267-48	69448-69451	the	
267-49	69452-69463	flexibility	
267-50	69464-69466	of	
267-51	69467-69478	replaceable	
267-52	69479-69487	external	
267-53	69488-69493	cards	
267-54	69493-69494	.	
267-55	69495-69499	This	
267-56	69500-69504	year	
267-57	69504-69505	,	
267-58	69506-69509	the	
267-59	69510-69513	big	
267-60	69514-69523	questions	
267-61	69524-69527	for	
267-62	69528-69536	database	
267-63	69537-69545	software	
267-64	69546-69548	is	
267-65	69549-69551	if	
267-66	69552-69555	and	
267-67	69556-69559	how	
267-68	69560-69562	to	
267-69	69563-69567	make	
267-70	69568-69571	use	
267-71	69572-69574	of	
267-72	69575-69583	graphics	
267-73	69584-69594	processing	
267-74	69595-69599	unit	
267-75	69600-69601	(	
267-76	69601-69604	gpu	
267-77	69604-69605	)	
267-78	69606-69609	and	

#Text=field-programmable gate arrays (fpga). This article does a good job of explaining the history of hardware acceleration, and mentions Netezza's (no longer used) use of fpgas as hardware acceleration for databases. The same historic hardware acceleration questions apply to database acceleration today:
268-1	69610-69628	field-programmable	
268-2	69629-69633	gate	
268-3	69634-69640	arrays	
268-4	69641-69642	(	
268-5	69642-69646	fpga	
268-6	69646-69647	)	
268-7	69647-69648	.	
268-8	69649-69653	This	
268-9	69654-69661	article	
268-10	69662-69666	does	
268-11	69667-69668	a	
268-12	69669-69673	good	
268-13	69674-69677	job	
268-14	69678-69680	of	
268-15	69681-69691	explaining	
268-16	69692-69695	the	
268-17	69696-69703	history	
268-18	69704-69706	of	
268-19	69707-69715	hardware	
268-20	69716-69728	acceleration	
268-21	69728-69729	,	
268-22	69730-69733	and	
268-23	69734-69742	mentions	
268-24	69743-69752	Netezza's	
268-25	69753-69754	(	
268-26	69754-69756	no	
268-27	69757-69763	longer	
268-28	69764-69768	used	
268-29	69768-69769	)	
268-30	69770-69773	use	
268-31	69774-69776	of	
268-32	69777-69782	fpgas	
268-33	69783-69785	as	
268-34	69786-69794	hardware	
268-35	69795-69807	acceleration	
268-36	69808-69811	for	
268-37	69812-69821	databases	
268-38	69821-69822	.	
268-39	69823-69826	The	
268-40	69827-69831	same	
268-41	69832-69840	historic	
268-42	69841-69849	hardware	
268-43	69850-69862	acceleration	
268-44	69863-69872	questions	
268-45	69873-69878	apply	
268-46	69879-69881	to	
268-47	69882-69890	database	
268-48	69891-69903	acceleration	
268-49	69904-69909	today	
268-50	69909-69910	:	

#Text=Are they better suited than cpus to do some database processing tasks, and how common are those tasks? Is there sufficient transfer bandwidth to gpus and fpgas to justify their use? Is hardware acceleration worth the deployment complexity? PgOpenCL, HeteroDB, and PG-Strom (from HeteroDB) are projects that are
269-1	69911-69914	Are	
269-2	69915-69919	they	
269-3	69920-69926	better	
269-4	69927-69933	suited	
269-5	69934-69938	than	
269-6	69939-69943	cpus	
269-7	69944-69946	to	
269-8	69947-69949	do	
269-9	69950-69954	some	
269-10	69955-69963	database	
269-11	69964-69974	processing	
269-12	69975-69980	tasks	
269-13	69980-69981	,	
269-14	69982-69985	and	
269-15	69986-69989	how	
269-16	69990-69996	common	
269-17	69997-70000	are	
269-18	70001-70006	those	
269-19	70007-70012	tasks	
269-20	70012-70013	?	
269-21	70014-70016	Is	
269-22	70017-70022	there	
269-23	70023-70033	sufficient	
269-24	70034-70042	transfer	
269-25	70043-70052	bandwidth	
269-26	70053-70055	to	
269-27	70056-70060	gpus	
269-28	70061-70064	and	
269-29	70065-70070	fpgas	
269-30	70071-70073	to	
269-31	70074-70081	justify	
269-32	70082-70087	their	
269-33	70088-70091	use	
269-34	70091-70092	?	
269-35	70093-70095	Is	
269-36	70096-70104	hardware	
269-37	70105-70117	acceleration	
269-38	70118-70123	worth	
269-39	70124-70127	the	
269-40	70128-70138	deployment	
269-41	70139-70149	complexity	
269-42	70149-70150	?	
269-43	70151-70159	PgOpenCL	
269-44	70159-70160	,	
269-45	70161-70169	HeteroDB	
269-46	70169-70170	,	
269-47	70171-70174	and	
269-48	70175-70183	PG-Strom	
269-49	70184-70185	(	
269-50	70185-70189	from	
269-51	70190-70198	HeteroDB	
269-52	70198-70199	)	
269-53	70200-70203	are	
269-54	70204-70212	projects	
269-55	70213-70217	that	
269-56	70218-70221	are	

#Text=experimenting with the value of gpus and fpgas in Postgres. As cloud providers increase the availability of gpus and fpgas, we might start see their usage increase. View or Post Comments Can Case Comparison Be Controlled? Friday, June 26, 2020 Computer tasks are one of the most precise activities we do on a daily basis.
270-1	70222-70235	experimenting	
270-2	70236-70240	with	
270-3	70241-70244	the	
270-4	70245-70250	value	
270-5	70251-70253	of	
270-6	70254-70258	gpus	
270-7	70259-70262	and	
270-8	70263-70268	fpgas	
270-9	70269-70271	in	
270-10	70272-70280	Postgres	
270-11	70280-70281	.	
270-12	70282-70284	As	
270-13	70285-70290	cloud	
270-14	70291-70300	providers	
270-15	70301-70309	increase	
270-16	70310-70313	the	
270-17	70314-70326	availability	
270-18	70327-70329	of	
270-19	70330-70334	gpus	
270-20	70335-70338	and	
270-21	70339-70344	fpgas	
270-22	70344-70345	,	
270-23	70346-70348	we	
270-24	70349-70354	might	
270-25	70355-70360	start	
270-26	70361-70364	see	
270-27	70365-70370	their	
270-28	70371-70376	usage	
270-29	70377-70385	increase	
270-30	70385-70386	.	
270-31	70387-70391	View	
270-32	70392-70394	or	
270-33	70395-70399	Post	
270-34	70400-70408	Comments	
270-35	70409-70412	Can	
270-36	70413-70417	Case	
270-37	70418-70428	Comparison	
270-38	70429-70431	Be	
270-39	70432-70442	Controlled	
270-40	70442-70443	?	
270-41	70444-70450	Friday	
270-42	70450-70451	,	
270-43	70452-70456	June	
270-44	70457-70459	26	
270-45	70459-70460	,	
270-46	70461-70465	2020	
270-47	70466-70474	Computer	
270-48	70475-70480	tasks	
270-49	70481-70484	are	
270-50	70485-70488	one	
270-51	70489-70491	of	
270-52	70492-70495	the	
270-53	70496-70500	most	
270-54	70501-70508	precise	
270-55	70509-70519	activities	
270-56	70520-70522	we	
270-57	70523-70525	do	
270-58	70526-70528	on	
270-59	70529-70530	a	
270-60	70531-70536	daily	
270-61	70537-70542	basis	
270-62	70542-70543	.	

#Text=Driving, cooking, walking, and reading are fairly imprecise compared to computer interaction. Computers represent symbols like "a" and "A" precisely and require external facilities to define relationships between them. This email thread makes a convincing argument that you usually want case-preserving, but less-precise case-insensitive behavior.
271-1	70544-70551	Driving	
271-2	70551-70552	,	
271-3	70553-70560	cooking	
271-4	70560-70561	,	
271-5	70562-70569	walking	
271-6	70569-70570	,	
271-7	70571-70574	and	
271-8	70575-70582	reading	
271-9	70583-70586	are	
271-10	70587-70593	fairly	
271-11	70594-70603	imprecise	
271-12	70604-70612	compared	
271-13	70613-70615	to	
271-14	70616-70624	computer	
271-15	70625-70636	interaction	
271-16	70636-70637	.	
271-17	70638-70647	Computers	
271-18	70648-70657	represent	
271-19	70658-70665	symbols	
271-20	70666-70670	like	
271-21	70671-70672	"	
271-22	70672-70673	a	
271-23	70673-70674	"	
271-24	70675-70678	and	
271-25	70679-70680	"	
271-26	70680-70681	A	
271-27	70681-70682	"	
271-28	70683-70692	precisely	
271-29	70693-70696	and	
271-30	70697-70704	require	
271-31	70705-70713	external	
271-32	70714-70724	facilities	
271-33	70725-70727	to	
271-34	70728-70734	define	
271-35	70735-70748	relationships	
271-36	70749-70756	between	
271-37	70757-70761	them	
271-38	70761-70762	.	
271-39	70763-70767	This	
271-40	70768-70773	email	
271-41	70774-70780	thread	
271-42	70781-70786	makes	
271-43	70787-70788	a	
271-44	70789-70799	convincing	
271-45	70800-70808	argument	
271-46	70809-70813	that	
271-47	70814-70817	you	
271-48	70818-70825	usually	
271-49	70826-70830	want	
271-50	70831-70846	case-preserving	
271-51	70846-70847	,	
271-52	70848-70851	but	
271-53	70852-70864	less-precise	
271-54	70865-70881	case-insensitive	
271-55	70882-70890	behavior	
271-56	70890-70891	.	

#Text=Let's go over some Postgres case-precision behaviors like the handling of character strings, identifiers, and keywords. For example, these queries do the same thing: SELECT COUNT() FROM pg_class; count ------- 386 SELECT COUNT() FROM PG_CLASS;
272-1	70892-70897	Let's	
272-2	70898-70900	go	
272-3	70901-70905	over	
272-4	70906-70910	some	
272-5	70911-70919	Postgres	
272-6	70920-70934	case-precision	
272-7	70935-70944	behaviors	
272-8	70945-70949	like	
272-9	70950-70953	the	
272-10	70954-70962	handling	
272-11	70963-70965	of	
272-12	70966-70975	character	
272-13	70976-70983	strings	
272-14	70983-70984	,	
272-15	70985-70996	identifiers	
272-16	70996-70997	,	
272-17	70998-71001	and	
272-18	71002-71010	keywords	
272-19	71010-71011	.	
272-20	71012-71015	For	
272-21	71016-71023	example	
272-22	71023-71024	,	
272-23	71025-71030	these	
272-24	71031-71038	queries	
272-25	71039-71041	do	
272-26	71042-71045	the	
272-27	71046-71050	same	
272-28	71051-71056	thing	
272-29	71056-71057	:	
272-30	71058-71064	SELECT	
272-31	71065-71070	COUNT	
272-32	71070-71071	(	
272-33	71071-71072	)	
272-34	71073-71077	FROM	
272-35	71078-71086	pg_class	
272-36	71086-71087	;	
272-37	71088-71093	count	
272-38	71094-71095	-	
272-39	71095-71096	-	
272-40	71096-71097	-	
272-41	71097-71098	-	
272-42	71098-71099	-	
272-43	71099-71100	-	
272-44	71100-71101	-	
272-45	71102-71105	386	
272-46	71106-71112	SELECT	
272-47	71113-71118	COUNT	
272-48	71118-71119	(	
272-49	71119-71120	)	
272-50	71121-71125	FROM	
272-51	71126-71134	PG_CLASS	
272-52	71134-71135	;	

#Text=count ------- 386 Select Count(*) From Pg_Class; count ------- 386 This is because Postgres, and the sql standard, ignore the case of keywords, e.g., select.
273-1	71136-71141	count	
273-2	71142-71143	-	
273-3	71143-71144	-	
273-4	71144-71145	-	
273-5	71145-71146	-	
273-6	71146-71147	-	
273-7	71147-71148	-	
273-8	71148-71149	-	
273-9	71150-71153	386	
273-10	71154-71160	Select	
273-11	71161-71166	Count	
273-12	71166-71167	(	
273-13	71167-71168	*	
273-14	71168-71169	)	
273-15	71170-71174	From	
273-16	71175-71183	Pg_Class	
273-17	71183-71184	;	
273-18	71185-71190	count	
273-19	71191-71192	-	
273-20	71192-71193	-	
273-21	71193-71194	-	
273-22	71194-71195	-	
273-23	71195-71196	-	
273-24	71196-71197	-	
273-25	71197-71198	-	
273-26	71199-71202	386	
273-27	71203-71207	This	
273-28	71208-71210	is	
273-29	71211-71218	because	
273-30	71219-71227	Postgres	
273-31	71227-71228	,	
273-32	71229-71232	and	
273-33	71233-71236	the	
273-34	71237-71240	sql	
273-35	71241-71249	standard	
273-36	71249-71250	,	
273-37	71251-71257	ignore	
273-38	71258-71261	the	
273-39	71262-71266	case	
273-40	71267-71269	of	
273-41	71270-71278	keywords	
273-42	71278-71279	,	
273-43	71280-71283	e.g	
273-44	71283-71284	.	
273-45	71284-71285	,	
273-46	71286-71292	select	
273-47	71292-71293	.	

#Text=They also ignore the case of identifiers, e.g., pg_class, when not double-quoted. Double-quoting adds case precision to identifiers: SELECT "count"() FROM "pg_class"; count
274-1	71294-71298	They	
274-2	71299-71303	also	
274-3	71304-71310	ignore	
274-4	71311-71314	the	
274-5	71315-71319	case	
274-6	71320-71322	of	
274-7	71323-71334	identifiers	
274-8	71334-71335	,	
274-9	71336-71339	e.g	
274-10	71339-71340	.	
274-11	71340-71341	,	
274-12	71342-71350	pg_class	
274-13	71350-71351	,	
274-14	71352-71356	when	
274-15	71357-71360	not	
274-16	71361-71374	double-quoted	
274-17	71374-71375	.	
274-18	71376-71390	Double-quoting	
274-19	71391-71395	adds	
274-20	71396-71400	case	
274-21	71401-71410	precision	
274-22	71411-71413	to	
274-23	71414-71425	identifiers	
274-24	71425-71426	:	
274-25	71427-71433	SELECT	
274-26	71434-71435	"	
274-27	71435-71440	count	
274-28	71440-71441	"	
274-29	71441-71442	(	
274-30	71442-71443	)	
274-31	71444-71448	FROM	
274-32	71449-71450	"	
274-33	71450-71458	pg_class	
274-34	71458-71459	"	
274-35	71459-71460	;	
274-36	71461-71466	count	

#Text=------- 386 SELECT "COUNT"() FROM "pg_class"; ERROR: function COUNT() does not exist LINE 1: SELECT "COUNT"() FROM "pg_class";
275-1	71467-71468	-	
275-2	71468-71469	-	
275-3	71469-71470	-	
275-4	71470-71471	-	
275-5	71471-71472	-	
275-6	71472-71473	-	
275-7	71473-71474	-	
275-8	71475-71478	386	
275-9	71479-71485	SELECT	
275-10	71486-71487	"	
275-11	71487-71492	COUNT	
275-12	71492-71493	"	
275-13	71493-71494	(	
275-14	71494-71495	)	
275-15	71496-71500	FROM	
275-16	71501-71502	"	
275-17	71502-71510	pg_class	
275-18	71510-71511	"	
275-19	71511-71512	;	
275-20	71513-71518	ERROR	
275-21	71518-71519	:	
275-22	71520-71528	function	
275-23	71529-71534	COUNT	
275-24	71534-71535	(	
275-25	71535-71536	)	
275-26	71537-71541	does	
275-27	71542-71545	not	
275-28	71546-71551	exist	
275-29	71552-71556	LINE	
275-30	71557-71558	1	
275-31	71558-71559	:	
275-32	71560-71566	SELECT	
275-33	71567-71568	"	
275-34	71568-71573	COUNT	
275-35	71573-71574	"	
275-36	71574-71575	(	
275-37	71575-71576	)	
275-38	71577-71581	FROM	
275-39	71582-71583	"	
275-40	71583-71591	pg_class	
275-41	71591-71592	"	
275-42	71592-71593	;	

#Text=HINT: No function matches the given name and argument types. You might need to add explicit type casts. SELECT "Count"() FROM "Pg_Class"; ERROR: relation "Pg_Class" does not exist
276-1	71594-71598	HINT	
276-2	71598-71599	:	
276-3	71600-71602	No	
276-4	71603-71611	function	
276-5	71612-71619	matches	
276-6	71620-71623	the	
276-7	71624-71629	given	
276-8	71630-71634	name	
276-9	71635-71638	and	
276-10	71639-71647	argument	
276-11	71648-71653	types	
276-12	71653-71654	.	
276-13	71655-71658	You	
276-14	71659-71664	might	
276-15	71665-71669	need	
276-16	71670-71672	to	
276-17	71673-71676	add	
276-18	71677-71685	explicit	
276-19	71686-71690	type	
276-20	71691-71696	casts	
276-21	71696-71697	.	
276-22	71698-71704	SELECT	
276-23	71705-71706	"	
276-24	71706-71711	Count	
276-25	71711-71712	"	
276-26	71712-71713	(	
276-27	71713-71714	)	
276-28	71715-71719	FROM	
276-29	71720-71721	"	
276-30	71721-71729	Pg_Class	
276-31	71729-71730	"	
276-32	71730-71731	;	
276-33	71732-71737	ERROR	
276-34	71737-71738	:	
276-35	71739-71747	relation	
276-36	71748-71749	"	
276-37	71749-71757	Pg_Class	
276-38	71757-71758	"	
276-39	71759-71763	does	
276-40	71764-71767	not	
276-41	71768-71773	exist	

#Text=LINE 1: SELECT "Count"() FROM "Pg_Class"; SELECT "COUNT"() FROM "PG_CLASS"; ERROR: relation "PG_CLASS" does not exist LINE 1: SELECT "COUNT"(*) FROM "PG_CLASS";
277-1	71774-71778	LINE	
277-2	71779-71780	1	
277-3	71780-71781	:	
277-4	71782-71788	SELECT	
277-5	71789-71790	"	
277-6	71790-71795	Count	
277-7	71795-71796	"	
277-8	71796-71797	(	
277-9	71797-71798	)	
277-10	71799-71803	FROM	
277-11	71804-71805	"	
277-12	71805-71813	Pg_Class	
277-13	71813-71814	"	
277-14	71814-71815	;	
277-15	71816-71822	SELECT	
277-16	71823-71824	"	
277-17	71824-71829	COUNT	
277-18	71829-71830	"	
277-19	71830-71831	(	
277-20	71831-71832	)	
277-21	71833-71837	FROM	
277-22	71838-71839	"	
277-23	71839-71847	PG_CLASS	
277-24	71847-71848	"	
277-25	71848-71849	;	
277-26	71850-71855	ERROR	
277-27	71855-71856	:	
277-28	71857-71865	relation	
277-29	71866-71867	"	
277-30	71867-71875	PG_CLASS	
277-31	71875-71876	"	
277-32	71877-71881	does	
277-33	71882-71885	not	
277-34	71886-71891	exist	
277-35	71892-71896	LINE	
277-36	71897-71898	1	
277-37	71898-71899	:	
277-38	71900-71906	SELECT	
277-39	71907-71908	"	
277-40	71908-71913	COUNT	
277-41	71913-71914	"	
277-42	71914-71915	(	
277-43	71915-71916	*	
277-44	71916-71917	)	
277-45	71918-71922	FROM	
277-46	71923-71924	"	
277-47	71924-71932	PG_CLASS	
277-48	71932-71933	"	
277-49	71933-71934	;	

#Text=There is no ability to add case precision to keywords: "SELECT" COUNT() FROM pg_class; ERROR: syntax error at or near ""SELECT"" LINE 1: "SELECT" COUNT() FROM pg_class;
278-1	71935-71940	There	
278-2	71941-71943	is	
278-3	71944-71946	no	
278-4	71947-71954	ability	
278-5	71955-71957	to	
278-6	71958-71961	add	
278-7	71962-71966	case	
278-8	71967-71976	precision	
278-9	71977-71979	to	
278-10	71980-71988	keywords	
278-11	71988-71989	:	
278-12	71990-71991	"	
278-13	71991-71997	SELECT	
278-14	71997-71998	"	
278-15	71999-72004	COUNT	
278-16	72004-72005	(	
278-17	72005-72006	)	
278-18	72007-72011	FROM	
278-19	72012-72020	pg_class	
278-20	72020-72021	;	
278-21	72022-72027	ERROR	
278-22	72027-72028	:	
278-23	72029-72035	syntax	
278-24	72036-72041	error	
278-25	72042-72044	at	
278-26	72045-72047	or	
278-27	72048-72052	near	
278-28	72053-72054	"	
278-29	72054-72055	"	
278-30	72055-72061	SELECT	
278-31	72061-72062	"	
278-32	72062-72063	"	
278-33	72064-72068	LINE	
278-34	72069-72070	1	
278-35	72070-72071	:	
278-36	72072-72073	"	
278-37	72073-72079	SELECT	
278-38	72079-72080	"	
278-39	72081-72086	COUNT	
278-40	72086-72087	(	
278-41	72087-72088	)	
278-42	72089-72093	FROM	
278-43	72094-72102	pg_class	
278-44	72102-72103	;	

#Text=When comparing values, Postgres is precise by default: SELECT 'a' = 'A'; ?column? ---------- SELECT '-' = '_'; ?column? ----------
279-1	72104-72108	When	
279-2	72109-72118	comparing	
279-3	72119-72125	values	
279-4	72125-72126	,	
279-5	72127-72135	Postgres	
279-6	72136-72138	is	
279-7	72139-72146	precise	
279-8	72147-72149	by	
279-9	72150-72157	default	
279-10	72157-72158	:	
279-11	72159-72165	SELECT	
279-12	72166-72167	'	
279-13	72167-72168	a	
279-14	72168-72169	'	
279-15	72170-72171	=	
279-16	72172-72173	'	
279-17	72173-72174	A	
279-18	72174-72175	'	
279-19	72175-72176	;	
279-20	72177-72178	?	
279-21	72178-72184	column	
279-22	72184-72185	?	
279-23	72186-72187	-	
279-24	72187-72188	-	
279-25	72188-72189	-	
279-26	72189-72190	-	
279-27	72190-72191	-	
279-28	72191-72192	-	
279-29	72192-72193	-	
279-30	72193-72194	-	
279-31	72194-72195	-	
279-32	72195-72196	-	
279-33	72197-72203	SELECT	
279-34	72204-72205	'	
279-35	72205-72206	-	
279-36	72206-72207	'	
279-37	72208-72209	=	
279-38	72210-72211	'	
279-39	72211-72212	_	
279-40	72212-72213	'	
279-41	72213-72214	;	
279-42	72215-72216	?	
279-43	72216-72222	column	
279-44	72222-72223	?	
279-45	72224-72225	-	
279-46	72225-72226	-	
279-47	72226-72227	-	
279-48	72227-72228	-	
279-49	72228-72229	-	
279-50	72229-72230	-	
279-51	72230-72231	-	
279-52	72231-72232	-	
279-53	72232-72233	-	
279-54	72233-72234	-	

#Text=SELECT '.' = ','; ?column? ---------- For certain symbols, is it sometimes visually hard to see the difference. As shown above, double-quotes adds precision to identifiers. For value comparisons, you have to be explicit to remove precision:
280-1	72235-72241	SELECT	
280-2	72242-72243	'	
280-3	72243-72244	.	
280-4	72244-72245	'	
280-5	72246-72247	=	
280-6	72248-72249	'	
280-7	72249-72250	,	
280-8	72250-72251	'	
280-9	72251-72252	;	
280-10	72253-72254	?	
280-11	72254-72260	column	
280-12	72260-72261	?	
280-13	72262-72263	-	
280-14	72263-72264	-	
280-15	72264-72265	-	
280-16	72265-72266	-	
280-17	72266-72267	-	
280-18	72267-72268	-	
280-19	72268-72269	-	
280-20	72269-72270	-	
280-21	72270-72271	-	
280-22	72271-72272	-	
280-23	72273-72276	For	
280-24	72277-72284	certain	
280-25	72285-72292	symbols	
280-26	72292-72293	,	
280-27	72294-72296	is	
280-28	72297-72299	it	
280-29	72300-72309	sometimes	
280-30	72310-72318	visually	
280-31	72319-72323	hard	
280-32	72324-72326	to	
280-33	72327-72330	see	
280-34	72331-72334	the	
280-35	72335-72345	difference	
280-36	72345-72346	.	
280-37	72347-72349	As	
280-38	72350-72355	shown	
280-39	72356-72361	above	
280-40	72361-72362	,	
280-41	72363-72376	double-quotes	
280-42	72377-72381	adds	
280-43	72382-72391	precision	
280-44	72392-72394	to	
280-45	72395-72406	identifiers	
280-46	72406-72407	.	
280-47	72408-72411	For	
280-48	72412-72417	value	
280-49	72418-72429	comparisons	
280-50	72429-72430	,	
280-51	72431-72434	you	
280-52	72435-72439	have	
280-53	72440-72442	to	
280-54	72443-72445	be	
280-55	72446-72454	explicit	
280-56	72455-72457	to	
280-57	72458-72464	remove	
280-58	72465-72474	precision	
280-59	72474-72475	:	

#Text=SELECT upper('a') = upper('A'); ?column? ---------- SELECT lower('a') = lower('A'); ?column? ---------- Most people aren't comparing constants in sql but compare column values:
281-1	72476-72482	SELECT	
281-2	72483-72488	upper	
281-3	72488-72489	(	
281-4	72489-72490	'	
281-5	72490-72491	a	
281-6	72491-72492	'	
281-7	72492-72493	)	
281-8	72494-72495	=	
281-9	72496-72501	upper	
281-10	72501-72502	(	
281-11	72502-72503	'	
281-12	72503-72504	A	
281-13	72504-72505	'	
281-14	72505-72506	)	
281-15	72506-72507	;	
281-16	72508-72509	?	
281-17	72509-72515	column	
281-18	72515-72516	?	
281-19	72517-72518	-	
281-20	72518-72519	-	
281-21	72519-72520	-	
281-22	72520-72521	-	
281-23	72521-72522	-	
281-24	72522-72523	-	
281-25	72523-72524	-	
281-26	72524-72525	-	
281-27	72525-72526	-	
281-28	72526-72527	-	
281-29	72528-72534	SELECT	
281-30	72535-72540	lower	
281-31	72540-72541	(	
281-32	72541-72542	'	
281-33	72542-72543	a	
281-34	72543-72544	'	
281-35	72544-72545	)	
281-36	72546-72547	=	
281-37	72548-72553	lower	
281-38	72553-72554	(	
281-39	72554-72555	'	
281-40	72555-72556	A	
281-41	72556-72557	'	
281-42	72557-72558	)	
281-43	72558-72559	;	
281-44	72560-72561	?	
281-45	72561-72567	column	
281-46	72567-72568	?	
281-47	72569-72570	-	
281-48	72570-72571	-	
281-49	72571-72572	-	
281-50	72572-72573	-	
281-51	72573-72574	-	
281-52	72574-72575	-	
281-53	72575-72576	-	
281-54	72576-72577	-	
281-55	72577-72578	-	
281-56	72578-72579	-	
281-57	72580-72584	Most	
281-58	72585-72591	people	
281-59	72592-72598	aren't	
281-60	72599-72608	comparing	
281-61	72609-72618	constants	
281-62	72619-72621	in	
281-63	72622-72625	sql	
281-64	72626-72629	but	
281-65	72630-72637	compare	
281-66	72638-72644	column	
281-67	72645-72651	values	
281-68	72651-72652	:	

#Text=SELECT oid FROM pg_class WHERE relname = 'pg_class'; oid ------ 1259 SELECT oid FROM PG_CLASS WHERE relname = 'pg_class'; oid ------ 1259
282-1	72653-72659	SELECT	
282-2	72660-72663	oid	
282-3	72664-72668	FROM	
282-4	72669-72677	pg_class	
282-5	72678-72683	WHERE	
282-6	72684-72691	relname	
282-7	72692-72693	=	
282-8	72694-72695	'	
282-9	72695-72703	pg_class	
282-10	72703-72704	'	
282-11	72704-72705	;	
282-12	72706-72709	oid	
282-13	72710-72711	-	
282-14	72711-72712	-	
282-15	72712-72713	-	
282-16	72713-72714	-	
282-17	72714-72715	-	
282-18	72715-72716	-	
282-19	72717-72721	1259	
282-20	72722-72728	SELECT	
282-21	72729-72732	oid	
282-22	72733-72737	FROM	
282-23	72738-72746	PG_CLASS	
282-24	72747-72752	WHERE	
282-25	72753-72760	relname	
282-26	72761-72762	=	
282-27	72763-72764	'	
282-28	72764-72772	pg_class	
282-29	72772-72773	'	
282-30	72773-72774	;	
282-31	72775-72778	oid	
282-32	72779-72780	-	
282-33	72780-72781	-	
282-34	72781-72782	-	
282-35	72782-72783	-	
282-36	72783-72784	-	
282-37	72784-72785	-	
282-38	72786-72790	1259	

#Text=SELECT oid FROM pg_class WHERE relname = 'Pg_Class'; oid ----- SELECT oid FROM pg_class WHERE relname = 'PG_CLASS'; oid -----
283-1	72791-72797	SELECT	
283-2	72798-72801	oid	
283-3	72802-72806	FROM	
283-4	72807-72815	pg_class	
283-5	72816-72821	WHERE	
283-6	72822-72829	relname	
283-7	72830-72831	=	
283-8	72832-72833	'	
283-9	72833-72841	Pg_Class	
283-10	72841-72842	'	
283-11	72842-72843	;	
283-12	72844-72847	oid	
283-13	72848-72849	-	
283-14	72849-72850	-	
283-15	72850-72851	-	
283-16	72851-72852	-	
283-17	72852-72853	-	
283-18	72854-72860	SELECT	
283-19	72861-72864	oid	
283-20	72865-72869	FROM	
283-21	72870-72878	pg_class	
283-22	72879-72884	WHERE	
283-23	72885-72892	relname	
283-24	72893-72894	=	
283-25	72895-72896	'	
283-26	72896-72904	PG_CLASS	
283-27	72904-72905	'	
283-28	72905-72906	;	
283-29	72907-72910	oid	
283-30	72911-72912	-	
283-31	72912-72913	-	
283-32	72913-72914	-	
283-33	72914-72915	-	
283-34	72915-72916	-	

#Text=Notice that these queries use pg_class as an identifier (without single quotes) and as a value (with single quotes). The identifier usage is case insensitive; the value usage is case sensitive. You can explicitly reduce comparison precision using function calls: SELECT oid FROM pg_class WHERE lower(relname) = lower('pg_class'); oid
284-1	72917-72923	Notice	
284-2	72924-72928	that	
284-3	72929-72934	these	
284-4	72935-72942	queries	
284-5	72943-72946	use	
284-6	72947-72955	pg_class	
284-7	72956-72958	as	
284-8	72959-72961	an	
284-9	72962-72972	identifier	
284-10	72973-72974	(	
284-11	72974-72981	without	
284-12	72982-72988	single	
284-13	72989-72995	quotes	
284-14	72995-72996	)	
284-15	72997-73000	and	
284-16	73001-73003	as	
284-17	73004-73005	a	
284-18	73006-73011	value	
284-19	73012-73013	(	
284-20	73013-73017	with	
284-21	73018-73024	single	
284-22	73025-73031	quotes	
284-23	73031-73032	)	
284-24	73032-73033	.	
284-25	73034-73037	The	
284-26	73038-73048	identifier	
284-27	73049-73054	usage	
284-28	73055-73057	is	
284-29	73058-73062	case	
284-30	73063-73074	insensitive	
284-31	73074-73075	;	
284-32	73076-73079	the	
284-33	73080-73085	value	
284-34	73086-73091	usage	
284-35	73092-73094	is	
284-36	73095-73099	case	
284-37	73100-73109	sensitive	
284-38	73109-73110	.	
284-39	73111-73114	You	
284-40	73115-73118	can	
284-41	73119-73129	explicitly	
284-42	73130-73136	reduce	
284-43	73137-73147	comparison	
284-44	73148-73157	precision	
284-45	73158-73163	using	
284-46	73164-73172	function	
284-47	73173-73178	calls	
284-48	73178-73179	:	
284-49	73180-73186	SELECT	
284-50	73187-73190	oid	
284-51	73191-73195	FROM	
284-52	73196-73204	pg_class	
284-53	73205-73210	WHERE	
284-54	73211-73216	lower	
284-55	73216-73217	(	
284-56	73217-73224	relname	
284-57	73224-73225	)	
284-58	73226-73227	=	
284-59	73228-73233	lower	
284-60	73233-73234	(	
284-61	73234-73235	'	
284-62	73235-73243	pg_class	
284-63	73243-73244	'	
284-64	73244-73245	)	
284-65	73245-73246	;	
284-66	73247-73250	oid	

#Text=------ 1259 SELECT oid FROM pg_class WHERE lower(relname) = lower('Pg_Class'); oid ------ 1259
285-1	73251-73252	-	
285-2	73252-73253	-	
285-3	73253-73254	-	
285-4	73254-73255	-	
285-5	73255-73256	-	
285-6	73256-73257	-	
285-7	73258-73262	1259	
285-8	73263-73269	SELECT	
285-9	73270-73273	oid	
285-10	73274-73278	FROM	
285-11	73279-73287	pg_class	
285-12	73288-73293	WHERE	
285-13	73294-73299	lower	
285-14	73299-73300	(	
285-15	73300-73307	relname	
285-16	73307-73308	)	
285-17	73309-73310	=	
285-18	73311-73316	lower	
285-19	73316-73317	(	
285-20	73317-73318	'	
285-21	73318-73326	Pg_Class	
285-22	73326-73327	'	
285-23	73327-73328	)	
285-24	73328-73329	;	
285-25	73330-73333	oid	
285-26	73334-73335	-	
285-27	73335-73336	-	
285-28	73336-73337	-	
285-29	73337-73338	-	
285-30	73338-73339	-	
285-31	73339-73340	-	
285-32	73341-73345	1259	

#Text=SELECT oid FROM pg_class WHERE lower(relname) = lower('PG_CLASS'^); oid ------ 1259 These convert the column values and constants to lower case before comparison. (Upper case could also have been used.) Indexes are also case sensitive by default, and it obviously would be inefficient
286-1	73346-73352	SELECT	
286-2	73353-73356	oid	
286-3	73357-73361	FROM	
286-4	73362-73370	pg_class	
286-5	73371-73376	WHERE	
286-6	73377-73382	lower	
286-7	73382-73383	(	
286-8	73383-73390	relname	
286-9	73390-73391	)	
286-10	73392-73393	=	
286-11	73394-73399	lower	
286-12	73399-73400	(	
286-13	73400-73401	'	
286-14	73401-73409	PG_CLASS	
286-15	73409-73410	'	
286-16	73410-73411	^	
286-17	73411-73412	)	
286-18	73412-73413	;	
286-19	73414-73417	oid	
286-20	73418-73419	-	
286-21	73419-73420	-	
286-22	73420-73421	-	
286-23	73421-73422	-	
286-24	73422-73423	-	
286-25	73423-73424	-	
286-26	73425-73429	1259	
286-27	73430-73435	These	
286-28	73436-73443	convert	
286-29	73444-73447	the	
286-30	73448-73454	column	
286-31	73455-73461	values	
286-32	73462-73465	and	
286-33	73466-73475	constants	
286-34	73476-73478	to	
286-35	73479-73484	lower	
286-36	73485-73489	case	
286-37	73490-73496	before	
286-38	73497-73507	comparison	
286-39	73507-73508	.	
286-40	73509-73510	(	
286-41	73510-73515	Upper	
286-42	73516-73520	case	
286-43	73521-73526	could	
286-44	73527-73531	also	
286-45	73532-73536	have	
286-46	73537-73541	been	
286-47	73542-73546	used	
286-48	73546-73547	.	
286-49	73547-73548	)	
286-50	73549-73556	Indexes	
286-51	73557-73560	are	
286-52	73561-73565	also	
286-53	73566-73570	case	
286-54	73571-73580	sensitive	
286-55	73581-73583	by	
286-56	73584-73591	default	
286-57	73591-73592	,	
286-58	73593-73596	and	
286-59	73597-73599	it	
286-60	73600-73609	obviously	
286-61	73610-73615	would	
286-62	73616-73618	be	
286-63	73619-73630	inefficient	

#Text=to lower-case every index entry for comparison, so function calls on columns cannot use an ordinary column index: EXPLAIN SELECT oid FROM pg_class WHERE relname = 'pg_class'; QUERY PLAN
287-1	73631-73633	to	
287-2	73634-73644	lower-case	
287-3	73645-73650	every	
287-4	73651-73656	index	
287-5	73657-73662	entry	
287-6	73663-73666	for	
287-7	73667-73677	comparison	
287-8	73677-73678	,	
287-9	73679-73681	so	
287-10	73682-73690	function	
287-11	73691-73696	calls	
287-12	73697-73699	on	
287-13	73700-73707	columns	
287-14	73708-73714	cannot	
287-15	73715-73718	use	
287-16	73719-73721	an	
287-17	73722-73730	ordinary	
287-18	73731-73737	column	
287-19	73738-73743	index	
287-20	73743-73744	:	
287-21	73745-73752	EXPLAIN	
287-22	73753-73759	SELECT	
287-23	73760-73763	oid	
287-24	73764-73768	FROM	
287-25	73769-73777	pg_class	
287-26	73778-73783	WHERE	
287-27	73784-73791	relname	
287-28	73792-73793	=	
287-29	73794-73795	'	
287-30	73795-73803	pg_class	
287-31	73803-73804	'	
287-32	73804-73805	;	
287-33	73806-73811	QUERY	
287-34	73812-73816	PLAN	

#Text=------------------------------------------------------------------------------------------- Index Scan using pg_class_relname_nsp_index on pg_class (cost=0.27..8.29 rows=1 width=4) Index Cond: (relname = 'pg_class'::name)
288-1	73817-73818	-	
288-2	73818-73819	-	
288-3	73819-73820	-	
288-4	73820-73821	-	
288-5	73821-73822	-	
288-6	73822-73823	-	
288-7	73823-73824	-	
288-8	73824-73825	-	
288-9	73825-73826	-	
288-10	73826-73827	-	
288-11	73827-73828	-	
288-12	73828-73829	-	
288-13	73829-73830	-	
288-14	73830-73831	-	
288-15	73831-73832	-	
288-16	73832-73833	-	
288-17	73833-73834	-	
288-18	73834-73835	-	
288-19	73835-73836	-	
288-20	73836-73837	-	
288-21	73837-73838	-	
288-22	73838-73839	-	
288-23	73839-73840	-	
288-24	73840-73841	-	
288-25	73841-73842	-	
288-26	73842-73843	-	
288-27	73843-73844	-	
288-28	73844-73845	-	
288-29	73845-73846	-	
288-30	73846-73847	-	
288-31	73847-73848	-	
288-32	73848-73849	-	
288-33	73849-73850	-	
288-34	73850-73851	-	
288-35	73851-73852	-	
288-36	73852-73853	-	
288-37	73853-73854	-	
288-38	73854-73855	-	
288-39	73855-73856	-	
288-40	73856-73857	-	
288-41	73857-73858	-	
288-42	73858-73859	-	
288-43	73859-73860	-	
288-44	73860-73861	-	
288-45	73861-73862	-	
288-46	73862-73863	-	
288-47	73863-73864	-	
288-48	73864-73865	-	
288-49	73865-73866	-	
288-50	73866-73867	-	
288-51	73867-73868	-	
288-52	73868-73869	-	
288-53	73869-73870	-	
288-54	73870-73871	-	
288-55	73871-73872	-	
288-56	73872-73873	-	
288-57	73873-73874	-	
288-58	73874-73875	-	
288-59	73875-73876	-	
288-60	73876-73877	-	
288-61	73877-73878	-	
288-62	73878-73879	-	
288-63	73879-73880	-	
288-64	73880-73881	-	
288-65	73881-73882	-	
288-66	73882-73883	-	
288-67	73883-73884	-	
288-68	73884-73885	-	
288-69	73885-73886	-	
288-70	73886-73887	-	
288-71	73887-73888	-	
288-72	73888-73889	-	
288-73	73889-73890	-	
288-74	73890-73891	-	
288-75	73891-73892	-	
288-76	73892-73893	-	
288-77	73893-73894	-	
288-78	73894-73895	-	
288-79	73895-73896	-	
288-80	73896-73897	-	
288-81	73897-73898	-	
288-82	73898-73899	-	
288-83	73899-73900	-	
288-84	73900-73901	-	
288-85	73901-73902	-	
288-86	73902-73903	-	
288-87	73903-73904	-	
288-88	73904-73905	-	
288-89	73905-73906	-	
288-90	73906-73907	-	
288-91	73907-73908	-	
288-92	73909-73914	Index	
288-93	73915-73919	Scan	
288-94	73920-73925	using	
288-95	73926-73952	pg_class_relname_nsp_index	
288-96	73953-73955	on	
288-97	73956-73964	pg_class	
288-98	73965-73966	(	
288-99	73966-73970	cost	
288-100	73970-73971	=	
288-101	73971-73975	0.27	
288-102	73975-73976	.	
288-103	73976-73981	.8.29	
288-104	73982-73986	rows	
288-105	73986-73987	=	
288-106	73987-73988	1	
288-107	73989-73994	width	
288-108	73994-73995	=	
288-109	73995-73996	4	
288-110	73996-73997	)	
288-111	73998-74003	Index	
288-112	74004-74008	Cond	
288-113	74008-74009	:	
288-114	74010-74011	(	
288-115	74011-74018	relname	
288-116	74019-74020	=	
288-117	74021-74022	'	
288-118	74022-74030	pg_class	
288-119	74030-74031	'	
288-120	74031-74032	:	
288-121	74032-74033	:	
288-122	74033-74037	name	
288-123	74037-74038	)	

#Text=EXPLAIN SELECT oid FROM pg_class WHERE lower(relname) = lower('pg_class'); QUERY PLAN ---------------------------------------------------------
289-1	74039-74046	EXPLAIN	
289-2	74047-74053	SELECT	
289-3	74054-74057	oid	
289-4	74058-74062	FROM	
289-5	74063-74071	pg_class	
289-6	74072-74077	WHERE	
289-7	74078-74083	lower	
289-8	74083-74084	(	
289-9	74084-74091	relname	
289-10	74091-74092	)	
289-11	74093-74094	=	
289-12	74095-74100	lower	
289-13	74100-74101	(	
289-14	74101-74102	'	
289-15	74102-74110	pg_class	
289-16	74110-74111	'	
289-17	74111-74112	)	
289-18	74112-74113	;	
289-19	74114-74119	QUERY	
289-20	74120-74124	PLAN	
289-21	74125-74126	-	
289-22	74126-74127	-	
289-23	74127-74128	-	
289-24	74128-74129	-	
289-25	74129-74130	-	
289-26	74130-74131	-	
289-27	74131-74132	-	
289-28	74132-74133	-	
289-29	74133-74134	-	
289-30	74134-74135	-	
289-31	74135-74136	-	
289-32	74136-74137	-	
289-33	74137-74138	-	
289-34	74138-74139	-	
289-35	74139-74140	-	
289-36	74140-74141	-	
289-37	74141-74142	-	
289-38	74142-74143	-	
289-39	74143-74144	-	
289-40	74144-74145	-	
289-41	74145-74146	-	
289-42	74146-74147	-	
289-43	74147-74148	-	
289-44	74148-74149	-	
289-45	74149-74150	-	
289-46	74150-74151	-	
289-47	74151-74152	-	
289-48	74152-74153	-	
289-49	74153-74154	-	
289-50	74154-74155	-	
289-51	74155-74156	-	
289-52	74156-74157	-	
289-53	74157-74158	-	
289-54	74158-74159	-	
289-55	74159-74160	-	
289-56	74160-74161	-	
289-57	74161-74162	-	
289-58	74162-74163	-	
289-59	74163-74164	-	
289-60	74164-74165	-	
289-61	74165-74166	-	
289-62	74166-74167	-	
289-63	74167-74168	-	
289-64	74168-74169	-	
289-65	74169-74170	-	
289-66	74170-74171	-	
289-67	74171-74172	-	
289-68	74172-74173	-	
289-69	74173-74174	-	
289-70	74174-74175	-	
289-71	74175-74176	-	
289-72	74176-74177	-	
289-73	74177-74178	-	
289-74	74178-74179	-	
289-75	74179-74180	-	
289-76	74180-74181	-	
289-77	74181-74182	-	

#Text=Seq Scan on pg_class (cost=0.00..19.76 rows=2 width=4) Filter: (lower((relname)::text) = 'pg_class'::text) They can use expression indexes that are created to match function calls:
290-1	74183-74186	Seq	
290-2	74187-74191	Scan	
290-3	74192-74194	on	
290-4	74195-74203	pg_class	
290-5	74204-74205	(	
290-6	74205-74209	cost	
290-7	74209-74210	=	
290-8	74210-74214	0.00	
290-9	74214-74215	.	
290-10	74215-74221	.19.76	
290-11	74222-74226	rows	
290-12	74226-74227	=	
290-13	74227-74228	2	
290-14	74229-74234	width	
290-15	74234-74235	=	
290-16	74235-74236	4	
290-17	74236-74237	)	
290-18	74238-74244	Filter	
290-19	74244-74245	:	
290-20	74246-74247	(	
290-21	74247-74252	lower	
290-22	74252-74253	(	
290-23	74253-74254	(	
290-24	74254-74261	relname	
290-25	74261-74262	)	
290-26	74262-74263	:	
290-27	74263-74264	:	
290-28	74264-74268	text	
290-29	74268-74269	)	
290-30	74270-74271	=	
290-31	74272-74273	'	
290-32	74273-74281	pg_class	
290-33	74281-74282	'	
290-34	74282-74283	:	
290-35	74283-74284	:	
290-36	74284-74288	text	
290-37	74288-74289	)	
290-38	74290-74294	They	
290-39	74295-74298	can	
290-40	74299-74302	use	
290-41	74303-74313	expression	
290-42	74314-74321	indexes	
290-43	74322-74326	that	
290-44	74327-74330	are	
290-45	74331-74338	created	
290-46	74339-74341	to	
290-47	74342-74347	match	
290-48	74348-74356	function	
290-49	74357-74362	calls	
290-50	74362-74363	:	

#Text=-- create a user table because users can't create indexes on system tables CREATE TABLE my_pg_class AS SELECT * FROM pg_class; -- create non-expression index CREATE INDEX i_my_pg_class_relname ON my_pg_class (relname);
291-1	74364-74365	-	
291-2	74365-74366	-	
291-3	74367-74373	create	
291-4	74374-74375	a	
291-5	74376-74380	user	
291-6	74381-74386	table	
291-7	74387-74394	because	
291-8	74395-74400	users	
291-9	74401-74406	can't	
291-10	74407-74413	create	
291-11	74414-74421	indexes	
291-12	74422-74424	on	
291-13	74425-74431	system	
291-14	74432-74438	tables	
291-15	74439-74445	CREATE	
291-16	74446-74451	TABLE	
291-17	74452-74463	my_pg_class	
291-18	74464-74466	AS	
291-19	74467-74473	SELECT	
291-20	74474-74475	*	
291-21	74476-74480	FROM	
291-22	74481-74489	pg_class	
291-23	74489-74490	;	
291-24	74491-74492	-	
291-25	74492-74493	-	
291-26	74494-74500	create	
291-27	74501-74515	non-expression	
291-28	74516-74521	index	
291-29	74522-74528	CREATE	
291-30	74529-74534	INDEX	
291-31	74535-74556	i_my_pg_class_relname	
291-32	74557-74559	ON	
291-33	74560-74571	my_pg_class	
291-34	74572-74573	(	
291-35	74573-74580	relname	
291-36	74580-74581	)	
291-37	74581-74582	;	

#Text=-- create expression index CREATE INDEX i_my_pg_class_relname_lower ON my_pg_class ((lower(relname))); -- The optimizer needs statistics -- Doing the analyze after the expression index creation allows creation of statistics on the expression.
292-1	74583-74584	-	
292-2	74584-74585	-	
292-3	74586-74592	create	
292-4	74593-74603	expression	
292-5	74604-74609	index	
292-6	74610-74616	CREATE	
292-7	74617-74622	INDEX	
292-8	74623-74650	i_my_pg_class_relname_lower	
292-9	74651-74653	ON	
292-10	74654-74665	my_pg_class	
292-11	74666-74667	(	
292-12	74667-74668	(	
292-13	74668-74673	lower	
292-14	74673-74674	(	
292-15	74674-74681	relname	
292-16	74681-74682	)	
292-17	74682-74683	)	
292-18	74683-74684	)	
292-19	74684-74685	;	
292-20	74686-74687	-	
292-21	74687-74688	-	
292-22	74689-74692	The	
292-23	74693-74702	optimizer	
292-24	74703-74708	needs	
292-25	74709-74719	statistics	
292-26	74720-74721	-	
292-27	74721-74722	-	
292-28	74723-74728	Doing	
292-29	74729-74732	the	
292-30	74733-74740	analyze	
292-31	74741-74746	after	
292-32	74747-74750	the	
292-33	74751-74761	expression	
292-34	74762-74767	index	
292-35	74768-74776	creation	
292-36	74777-74783	allows	
292-37	74784-74792	creation	
292-38	74793-74795	of	
292-39	74796-74806	statistics	
292-40	74807-74809	on	
292-41	74810-74813	the	
292-42	74814-74824	expression	
292-43	74824-74825	.	

#Text=-- see https://momjian.us/main/blogs/pgblog/2017.html#February_20_2017 -- Autovacuum would have eventually done this automatically. ANALYZE my_pg_class; -- use non-expression index EXPLAIN SELECT oid FROM my_pg_class WHERE relname = 'pg_class';
293-1	74826-74827	-	
293-2	74827-74828	-	
293-3	74829-74832	see	
293-4	74833-74838	https	
293-5	74838-74839	:	
293-6	74839-74840	/	
293-7	74840-74841	/	
293-8	74841-74851	momjian.us	
293-9	74851-74852	/	
293-10	74852-74856	main	
293-11	74856-74857	/	
293-12	74857-74862	blogs	
293-13	74862-74863	/	
293-14	74863-74869	pgblog	
293-15	74869-74870	/	
293-16	74870-74874	2017	
293-17	74874-74875	.	
293-18	74875-74879	html	
293-19	74879-74880	#	
293-20	74880-74888	February	
293-21	74888-74889	_	
293-22	74889-74891	20	
293-23	74891-74892	_	
293-24	74892-74896	2017	
293-25	74897-74898	-	
293-26	74898-74899	-	
293-27	74900-74910	Autovacuum	
293-28	74911-74916	would	
293-29	74917-74921	have	
293-30	74922-74932	eventually	
293-31	74933-74937	done	
293-32	74938-74942	this	
293-33	74943-74956	automatically	
293-34	74956-74957	.	
293-35	74958-74965	ANALYZE	
293-36	74966-74977	my_pg_class	
293-37	74977-74978	;	
293-38	74979-74980	-	
293-39	74980-74981	-	
293-40	74982-74985	use	
293-41	74986-75000	non-expression	
293-42	75001-75006	index	
293-43	75007-75014	EXPLAIN	
293-44	75015-75021	SELECT	
293-45	75022-75025	oid	
293-46	75026-75030	FROM	
293-47	75031-75042	my_pg_class	
293-48	75043-75048	WHERE	
293-49	75049-75056	relname	
293-50	75057-75058	=	
293-51	75059-75060	'	
293-52	75060-75068	pg_class	
293-53	75068-75069	'	
293-54	75069-75070	;	

#Text=QUERY PLAN -----------------------------------------------------------------------------------------
294-1	75071-75076	QUERY	
294-2	75077-75081	PLAN	
294-3	75082-75083	-	
294-4	75083-75084	-	
294-5	75084-75085	-	
294-6	75085-75086	-	
294-7	75086-75087	-	
294-8	75087-75088	-	
294-9	75088-75089	-	
294-10	75089-75090	-	
294-11	75090-75091	-	
294-12	75091-75092	-	
294-13	75092-75093	-	
294-14	75093-75094	-	
294-15	75094-75095	-	
294-16	75095-75096	-	
294-17	75096-75097	-	
294-18	75097-75098	-	
294-19	75098-75099	-	
294-20	75099-75100	-	
294-21	75100-75101	-	
294-22	75101-75102	-	
294-23	75102-75103	-	
294-24	75103-75104	-	
294-25	75104-75105	-	
294-26	75105-75106	-	
294-27	75106-75107	-	
294-28	75107-75108	-	
294-29	75108-75109	-	
294-30	75109-75110	-	
294-31	75110-75111	-	
294-32	75111-75112	-	
294-33	75112-75113	-	
294-34	75113-75114	-	
294-35	75114-75115	-	
294-36	75115-75116	-	
294-37	75116-75117	-	
294-38	75117-75118	-	
294-39	75118-75119	-	
294-40	75119-75120	-	
294-41	75120-75121	-	
294-42	75121-75122	-	
294-43	75122-75123	-	
294-44	75123-75124	-	
294-45	75124-75125	-	
294-46	75125-75126	-	
294-47	75126-75127	-	
294-48	75127-75128	-	
294-49	75128-75129	-	
294-50	75129-75130	-	
294-51	75130-75131	-	
294-52	75131-75132	-	
294-53	75132-75133	-	
294-54	75133-75134	-	
294-55	75134-75135	-	
294-56	75135-75136	-	
294-57	75136-75137	-	
294-58	75137-75138	-	
294-59	75138-75139	-	
294-60	75139-75140	-	
294-61	75140-75141	-	
294-62	75141-75142	-	
294-63	75142-75143	-	
294-64	75143-75144	-	
294-65	75144-75145	-	
294-66	75145-75146	-	
294-67	75146-75147	-	
294-68	75147-75148	-	
294-69	75148-75149	-	
294-70	75149-75150	-	
294-71	75150-75151	-	
294-72	75151-75152	-	
294-73	75152-75153	-	
294-74	75153-75154	-	
294-75	75154-75155	-	
294-76	75155-75156	-	
294-77	75156-75157	-	
294-78	75157-75158	-	
294-79	75158-75159	-	
294-80	75159-75160	-	
294-81	75160-75161	-	
294-82	75161-75162	-	
294-83	75162-75163	-	
294-84	75163-75164	-	
294-85	75164-75165	-	
294-86	75165-75166	-	
294-87	75166-75167	-	
294-88	75167-75168	-	
294-89	75168-75169	-	
294-90	75169-75170	-	
294-91	75170-75171	-	

#Text=Index Scan using i_my_pg_class_relname on my_pg_class (cost=0.27..8.29 rows=1 width=4) Index Cond: (relname = 'pg_class'::name) -- use expression index
295-1	75172-75177	Index	
295-2	75178-75182	Scan	
295-3	75183-75188	using	
295-4	75189-75210	i_my_pg_class_relname	
295-5	75211-75213	on	
295-6	75214-75225	my_pg_class	
295-7	75226-75227	(	
295-8	75227-75231	cost	
295-9	75231-75232	=	
295-10	75232-75236	0.27	
295-11	75236-75237	.	
295-12	75237-75242	.8.29	
295-13	75243-75247	rows	
295-14	75247-75248	=	
295-15	75248-75249	1	
295-16	75250-75255	width	
295-17	75255-75256	=	
295-18	75256-75257	4	
295-19	75257-75258	)	
295-20	75259-75264	Index	
295-21	75265-75269	Cond	
295-22	75269-75270	:	
295-23	75271-75272	(	
295-24	75272-75279	relname	
295-25	75280-75281	=	
295-26	75282-75283	'	
295-27	75283-75291	pg_class	
295-28	75291-75292	'	
295-29	75292-75293	:	
295-30	75293-75294	:	
295-31	75294-75298	name	
295-32	75298-75299	)	
295-33	75300-75301	-	
295-34	75301-75302	-	
295-35	75303-75306	use	
295-36	75307-75317	expression	
295-37	75318-75323	index	

#Text=EXPLAIN SELECT oid FROM my_pg_class WHERE lower(relname) = lower('pg_class'); QUERY PLAN -----------------------------------------------------------------------------------------------
296-1	75324-75331	EXPLAIN	
296-2	75332-75338	SELECT	
296-3	75339-75342	oid	
296-4	75343-75347	FROM	
296-5	75348-75359	my_pg_class	
296-6	75360-75365	WHERE	
296-7	75366-75371	lower	
296-8	75371-75372	(	
296-9	75372-75379	relname	
296-10	75379-75380	)	
296-11	75381-75382	=	
296-12	75383-75388	lower	
296-13	75388-75389	(	
296-14	75389-75390	'	
296-15	75390-75398	pg_class	
296-16	75398-75399	'	
296-17	75399-75400	)	
296-18	75400-75401	;	
296-19	75402-75407	QUERY	
296-20	75408-75412	PLAN	
296-21	75413-75414	-	
296-22	75414-75415	-	
296-23	75415-75416	-	
296-24	75416-75417	-	
296-25	75417-75418	-	
296-26	75418-75419	-	
296-27	75419-75420	-	
296-28	75420-75421	-	
296-29	75421-75422	-	
296-30	75422-75423	-	
296-31	75423-75424	-	
296-32	75424-75425	-	
296-33	75425-75426	-	
296-34	75426-75427	-	
296-35	75427-75428	-	
296-36	75428-75429	-	
296-37	75429-75430	-	
296-38	75430-75431	-	
296-39	75431-75432	-	
296-40	75432-75433	-	
296-41	75433-75434	-	
296-42	75434-75435	-	
296-43	75435-75436	-	
296-44	75436-75437	-	
296-45	75437-75438	-	
296-46	75438-75439	-	
296-47	75439-75440	-	
296-48	75440-75441	-	
296-49	75441-75442	-	
296-50	75442-75443	-	
296-51	75443-75444	-	
296-52	75444-75445	-	
296-53	75445-75446	-	
296-54	75446-75447	-	
296-55	75447-75448	-	
296-56	75448-75449	-	
296-57	75449-75450	-	
296-58	75450-75451	-	
296-59	75451-75452	-	
296-60	75452-75453	-	
296-61	75453-75454	-	
296-62	75454-75455	-	
296-63	75455-75456	-	
296-64	75456-75457	-	
296-65	75457-75458	-	
296-66	75458-75459	-	
296-67	75459-75460	-	
296-68	75460-75461	-	
296-69	75461-75462	-	
296-70	75462-75463	-	
296-71	75463-75464	-	
296-72	75464-75465	-	
296-73	75465-75466	-	
296-74	75466-75467	-	
296-75	75467-75468	-	
296-76	75468-75469	-	
296-77	75469-75470	-	
296-78	75470-75471	-	
296-79	75471-75472	-	
296-80	75472-75473	-	
296-81	75473-75474	-	
296-82	75474-75475	-	
296-83	75475-75476	-	
296-84	75476-75477	-	
296-85	75477-75478	-	
296-86	75478-75479	-	
296-87	75479-75480	-	
296-88	75480-75481	-	
296-89	75481-75482	-	
296-90	75482-75483	-	
296-91	75483-75484	-	
296-92	75484-75485	-	
296-93	75485-75486	-	
296-94	75486-75487	-	
296-95	75487-75488	-	
296-96	75488-75489	-	
296-97	75489-75490	-	
296-98	75490-75491	-	
296-99	75491-75492	-	
296-100	75492-75493	-	
296-101	75493-75494	-	
296-102	75494-75495	-	
296-103	75495-75496	-	
296-104	75496-75497	-	
296-105	75497-75498	-	
296-106	75498-75499	-	
296-107	75499-75500	-	
296-108	75500-75501	-	
296-109	75501-75502	-	
296-110	75502-75503	-	
296-111	75503-75504	-	
296-112	75504-75505	-	
296-113	75505-75506	-	
296-114	75506-75507	-	
296-115	75507-75508	-	

#Text=Index Scan using i_my_pg_class_relname_lower on my_pg_class (cost=0.27..8.29 rows=1 width=4) Index Cond: (lower((relname)::text) = 'pg_class'::text) The citext extension allows the creation of columns whose values are automatically compared in a case-insensitive manner:
297-1	75509-75514	Index	
297-2	75515-75519	Scan	
297-3	75520-75525	using	
297-4	75526-75553	i_my_pg_class_relname_lower	
297-5	75554-75556	on	
297-6	75557-75568	my_pg_class	
297-7	75569-75570	(	
297-8	75570-75574	cost	
297-9	75574-75575	=	
297-10	75575-75579	0.27	
297-11	75579-75580	.	
297-12	75580-75585	.8.29	
297-13	75586-75590	rows	
297-14	75590-75591	=	
297-15	75591-75592	1	
297-16	75593-75598	width	
297-17	75598-75599	=	
297-18	75599-75600	4	
297-19	75600-75601	)	
297-20	75602-75607	Index	
297-21	75608-75612	Cond	
297-22	75612-75613	:	
297-23	75614-75615	(	
297-24	75615-75620	lower	
297-25	75620-75621	(	
297-26	75621-75622	(	
297-27	75622-75629	relname	
297-28	75629-75630	)	
297-29	75630-75631	:	
297-30	75631-75632	:	
297-31	75632-75636	text	
297-32	75636-75637	)	
297-33	75638-75639	=	
297-34	75640-75641	'	
297-35	75641-75649	pg_class	
297-36	75649-75650	'	
297-37	75650-75651	:	
297-38	75651-75652	:	
297-39	75652-75656	text	
297-40	75656-75657	)	
297-41	75658-75661	The	
297-42	75662-75668	citext	
297-43	75669-75678	extension	
297-44	75679-75685	allows	
297-45	75686-75689	the	
297-46	75690-75698	creation	
297-47	75699-75701	of	
297-48	75702-75709	columns	
297-49	75710-75715	whose	
297-50	75716-75722	values	
297-51	75723-75726	are	
297-52	75727-75740	automatically	
297-53	75741-75749	compared	
297-54	75750-75752	in	
297-55	75753-75754	a	
297-56	75755-75771	case-insensitive	
297-57	75772-75778	manner	
297-58	75778-75779	:	

#Text=CREATE EXTENSION citext; -- 'x' column added so the row has a typical length CREATE TABLE my_pg_class2 AS SELECT oid, relname::citext, repeat('x', 256) FROM pg_class;
298-1	75780-75786	CREATE	
298-2	75787-75796	EXTENSION	
298-3	75797-75803	citext	
298-4	75803-75804	;	
298-5	75805-75806	-	
298-6	75806-75807	-	
298-7	75808-75809	'	
298-8	75809-75810	x	
298-9	75810-75811	'	
298-10	75812-75818	column	
298-11	75819-75824	added	
298-12	75825-75827	so	
298-13	75828-75831	the	
298-14	75832-75835	row	
298-15	75836-75839	has	
298-16	75840-75841	a	
298-17	75842-75849	typical	
298-18	75850-75856	length	
298-19	75857-75863	CREATE	
298-20	75864-75869	TABLE	
298-21	75870-75882	my_pg_class2	
298-22	75883-75885	AS	
298-23	75886-75892	SELECT	
298-24	75893-75896	oid	
298-25	75896-75897	,	
298-26	75898-75905	relname	
298-27	75905-75906	:	
298-28	75906-75907	:	
298-29	75907-75913	citext	
298-30	75913-75914	,	
298-31	75915-75921	repeat	
298-32	75921-75922	(	
298-33	75922-75923	'	
298-34	75923-75924	x	
298-35	75924-75925	'	
298-36	75925-75926	,	
298-37	75927-75930	256	
298-38	75930-75931	)	
298-39	75932-75936	FROM	
298-40	75937-75945	pg_class	
298-41	75945-75946	;	

#Text=CREATE INDEX i_my_pg_class_relname2 ON my_pg_class2 (relname); ANALYZE my_pg_class2; \\d my_pg_class2 Table "public.my_pg_class2" Column Type | Collation | Nullable | Default
299-1	75947-75953	CREATE	
299-2	75954-75959	INDEX	
299-3	75960-75982	i_my_pg_class_relname2	
299-4	75983-75985	ON	
299-5	75986-75998	my_pg_class2	
299-6	75999-76000	(	
299-7	76000-76007	relname	
299-8	76007-76008	)	
299-9	76008-76009	;	
299-10	76010-76017	ANALYZE	
299-11	76018-76030	my_pg_class2	
299-12	76030-76031	;	
299-13	76032-76033	\	
299-14	76033-76034	d	
299-15	76035-76047	my_pg_class2	
299-16	76048-76053	Table	
299-17	76054-76055	"	
299-18	76055-76074	public.my_pg_class2	
299-19	76074-76075	"	
299-20	76076-76082	Column	
299-21	76083-76087	Type	
299-22	76088-76089	|	
299-23	76090-76099	Collation	
299-24	76100-76101	|	
299-25	76102-76110	Nullable	
299-26	76111-76112	|	
299-27	76113-76120	Default	

#Text=---------+--------+-----------+----------+--------- oid | oid relname | citext | C repeat | text Indexes: "i_my_pg_class_relname2" btree (relname)
300-1	76121-76122	-	
300-2	76122-76123	-	
300-3	76123-76124	-	
300-4	76124-76125	-	
300-5	76125-76126	-	
300-6	76126-76127	-	
300-7	76127-76128	-	
300-8	76128-76129	-	
300-9	76129-76130	-	
300-10	76130-76131	+	
300-11	76131-76132	-	
300-12	76132-76133	-	
300-13	76133-76134	-	
300-14	76134-76135	-	
300-15	76135-76136	-	
300-16	76136-76137	-	
300-17	76137-76138	-	
300-18	76138-76139	-	
300-19	76139-76140	+	
300-20	76140-76141	-	
300-21	76141-76142	-	
300-22	76142-76143	-	
300-23	76143-76144	-	
300-24	76144-76145	-	
300-25	76145-76146	-	
300-26	76146-76147	-	
300-27	76147-76148	-	
300-28	76148-76149	-	
300-29	76149-76150	-	
300-30	76150-76151	-	
300-31	76151-76152	+	
300-32	76152-76153	-	
300-33	76153-76154	-	
300-34	76154-76155	-	
300-35	76155-76156	-	
300-36	76156-76157	-	
300-37	76157-76158	-	
300-38	76158-76159	-	
300-39	76159-76160	-	
300-40	76160-76161	-	
300-41	76161-76162	-	
300-42	76162-76163	+	
300-43	76163-76164	-	
300-44	76164-76165	-	
300-45	76165-76166	-	
300-46	76166-76167	-	
300-47	76167-76168	-	
300-48	76168-76169	-	
300-49	76169-76170	-	
300-50	76170-76171	-	
300-51	76171-76172	-	
300-52	76173-76176	oid	
300-53	76177-76178	|	
300-54	76179-76182	oid	
300-55	76183-76190	relname	
300-56	76191-76192	|	
300-57	76193-76199	citext	
300-58	76200-76201	|	
300-59	76202-76203	C	
300-60	76204-76210	repeat	
300-61	76211-76212	|	
300-62	76213-76217	text	
300-63	76218-76225	Indexes	
300-64	76225-76226	:	
300-65	76227-76228	"	
300-66	76228-76250	i_my_pg_class_relname2	
300-67	76250-76251	"	
300-68	76252-76257	btree	
300-69	76258-76259	(	
300-70	76259-76266	relname	
300-71	76266-76267	)	

#Text=SELECT oid FROM my_pg_class2 WHERE relname = 'pg_class'; oid ------ 1259 SELECT oid FROM my_pg_class2 WHERE relname = 'PG_CLASS'; oid ------ 1259
301-1	76268-76274	SELECT	
301-2	76275-76278	oid	
301-3	76279-76283	FROM	
301-4	76284-76296	my_pg_class2	
301-5	76297-76302	WHERE	
301-6	76303-76310	relname	
301-7	76311-76312	=	
301-8	76313-76314	'	
301-9	76314-76322	pg_class	
301-10	76322-76323	'	
301-11	76323-76324	;	
301-12	76325-76328	oid	
301-13	76329-76330	-	
301-14	76330-76331	-	
301-15	76331-76332	-	
301-16	76332-76333	-	
301-17	76333-76334	-	
301-18	76334-76335	-	
301-19	76336-76340	1259	
301-20	76341-76347	SELECT	
301-21	76348-76351	oid	
301-22	76352-76356	FROM	
301-23	76357-76369	my_pg_class2	
301-24	76370-76375	WHERE	
301-25	76376-76383	relname	
301-26	76384-76385	=	
301-27	76386-76387	'	
301-28	76387-76395	PG_CLASS	
301-29	76395-76396	'	
301-30	76396-76397	;	
301-31	76398-76401	oid	
301-32	76402-76403	-	
301-33	76403-76404	-	
301-34	76404-76405	-	
301-35	76405-76406	-	
301-36	76406-76407	-	
301-37	76407-76408	-	
301-38	76409-76413	1259	

#Text=EXPLAIN SELECT oid FROM my_pg_class2 WHERE relname = 'pg_class'; QUERY PLAN -------------------------------------------------------------------------------------------
302-1	76414-76421	EXPLAIN	
302-2	76422-76428	SELECT	
302-3	76429-76432	oid	
302-4	76433-76437	FROM	
302-5	76438-76450	my_pg_class2	
302-6	76451-76456	WHERE	
302-7	76457-76464	relname	
302-8	76465-76466	=	
302-9	76467-76468	'	
302-10	76468-76476	pg_class	
302-11	76476-76477	'	
302-12	76477-76478	;	
302-13	76479-76484	QUERY	
302-14	76485-76489	PLAN	
302-15	76490-76491	-	
302-16	76491-76492	-	
302-17	76492-76493	-	
302-18	76493-76494	-	
302-19	76494-76495	-	
302-20	76495-76496	-	
302-21	76496-76497	-	
302-22	76497-76498	-	
302-23	76498-76499	-	
302-24	76499-76500	-	
302-25	76500-76501	-	
302-26	76501-76502	-	
302-27	76502-76503	-	
302-28	76503-76504	-	
302-29	76504-76505	-	
302-30	76505-76506	-	
302-31	76506-76507	-	
302-32	76507-76508	-	
302-33	76508-76509	-	
302-34	76509-76510	-	
302-35	76510-76511	-	
302-36	76511-76512	-	
302-37	76512-76513	-	
302-38	76513-76514	-	
302-39	76514-76515	-	
302-40	76515-76516	-	
302-41	76516-76517	-	
302-42	76517-76518	-	
302-43	76518-76519	-	
302-44	76519-76520	-	
302-45	76520-76521	-	
302-46	76521-76522	-	
302-47	76522-76523	-	
302-48	76523-76524	-	
302-49	76524-76525	-	
302-50	76525-76526	-	
302-51	76526-76527	-	
302-52	76527-76528	-	
302-53	76528-76529	-	
302-54	76529-76530	-	
302-55	76530-76531	-	
302-56	76531-76532	-	
302-57	76532-76533	-	
302-58	76533-76534	-	
302-59	76534-76535	-	
302-60	76535-76536	-	
302-61	76536-76537	-	
302-62	76537-76538	-	
302-63	76538-76539	-	
302-64	76539-76540	-	
302-65	76540-76541	-	
302-66	76541-76542	-	
302-67	76542-76543	-	
302-68	76543-76544	-	
302-69	76544-76545	-	
302-70	76545-76546	-	
302-71	76546-76547	-	
302-72	76547-76548	-	
302-73	76548-76549	-	
302-74	76549-76550	-	
302-75	76550-76551	-	
302-76	76551-76552	-	
302-77	76552-76553	-	
302-78	76553-76554	-	
302-79	76554-76555	-	
302-80	76555-76556	-	
302-81	76556-76557	-	
302-82	76557-76558	-	
302-83	76558-76559	-	
302-84	76559-76560	-	
302-85	76560-76561	-	
302-86	76561-76562	-	
302-87	76562-76563	-	
302-88	76563-76564	-	
302-89	76564-76565	-	
302-90	76565-76566	-	
302-91	76566-76567	-	
302-92	76567-76568	-	
302-93	76568-76569	-	
302-94	76569-76570	-	
302-95	76570-76571	-	
302-96	76571-76572	-	
302-97	76572-76573	-	
302-98	76573-76574	-	
302-99	76574-76575	-	
302-100	76575-76576	-	
302-101	76576-76577	-	
302-102	76577-76578	-	
302-103	76578-76579	-	
302-104	76579-76580	-	
302-105	76580-76581	-	

#Text=Index Scan using i_my_pg_class_relname2 on my_pg_class2 (cost=0.27..8.29 rows=1 width=4) Index Cond: (relname = 'pg_class'::citext) EXPLAIN SELECT oid FROM my_pg_class2 WHERE relname = 'PG_CLASS';
303-1	76582-76587	Index	
303-2	76588-76592	Scan	
303-3	76593-76598	using	
303-4	76599-76621	i_my_pg_class_relname2	
303-5	76622-76624	on	
303-6	76625-76637	my_pg_class2	
303-7	76638-76639	(	
303-8	76639-76643	cost	
303-9	76643-76644	=	
303-10	76644-76648	0.27	
303-11	76648-76649	.	
303-12	76649-76654	.8.29	
303-13	76655-76659	rows	
303-14	76659-76660	=	
303-15	76660-76661	1	
303-16	76662-76667	width	
303-17	76667-76668	=	
303-18	76668-76669	4	
303-19	76669-76670	)	
303-20	76671-76676	Index	
303-21	76677-76681	Cond	
303-22	76681-76682	:	
303-23	76683-76684	(	
303-24	76684-76691	relname	
303-25	76692-76693	=	
303-26	76694-76695	'	
303-27	76695-76703	pg_class	
303-28	76703-76704	'	
303-29	76704-76705	:	
303-30	76705-76706	:	
303-31	76706-76712	citext	
303-32	76712-76713	)	
303-33	76714-76721	EXPLAIN	
303-34	76722-76728	SELECT	
303-35	76729-76732	oid	
303-36	76733-76737	FROM	
303-37	76738-76750	my_pg_class2	
303-38	76751-76756	WHERE	
303-39	76757-76764	relname	
303-40	76765-76766	=	
303-41	76767-76768	'	
303-42	76768-76776	PG_CLASS	
303-43	76776-76777	'	
303-44	76777-76778	;	

#Text=QUERY PLAN -------------------------------------------------------------------------------------------
304-1	76779-76784	QUERY	
304-2	76785-76789	PLAN	
304-3	76790-76791	-	
304-4	76791-76792	-	
304-5	76792-76793	-	
304-6	76793-76794	-	
304-7	76794-76795	-	
304-8	76795-76796	-	
304-9	76796-76797	-	
304-10	76797-76798	-	
304-11	76798-76799	-	
304-12	76799-76800	-	
304-13	76800-76801	-	
304-14	76801-76802	-	
304-15	76802-76803	-	
304-16	76803-76804	-	
304-17	76804-76805	-	
304-18	76805-76806	-	
304-19	76806-76807	-	
304-20	76807-76808	-	
304-21	76808-76809	-	
304-22	76809-76810	-	
304-23	76810-76811	-	
304-24	76811-76812	-	
304-25	76812-76813	-	
304-26	76813-76814	-	
304-27	76814-76815	-	
304-28	76815-76816	-	
304-29	76816-76817	-	
304-30	76817-76818	-	
304-31	76818-76819	-	
304-32	76819-76820	-	
304-33	76820-76821	-	
304-34	76821-76822	-	
304-35	76822-76823	-	
304-36	76823-76824	-	
304-37	76824-76825	-	
304-38	76825-76826	-	
304-39	76826-76827	-	
304-40	76827-76828	-	
304-41	76828-76829	-	
304-42	76829-76830	-	
304-43	76830-76831	-	
304-44	76831-76832	-	
304-45	76832-76833	-	
304-46	76833-76834	-	
304-47	76834-76835	-	
304-48	76835-76836	-	
304-49	76836-76837	-	
304-50	76837-76838	-	
304-51	76838-76839	-	
304-52	76839-76840	-	
304-53	76840-76841	-	
304-54	76841-76842	-	
304-55	76842-76843	-	
304-56	76843-76844	-	
304-57	76844-76845	-	
304-58	76845-76846	-	
304-59	76846-76847	-	
304-60	76847-76848	-	
304-61	76848-76849	-	
304-62	76849-76850	-	
304-63	76850-76851	-	
304-64	76851-76852	-	
304-65	76852-76853	-	
304-66	76853-76854	-	
304-67	76854-76855	-	
304-68	76855-76856	-	
304-69	76856-76857	-	
304-70	76857-76858	-	
304-71	76858-76859	-	
304-72	76859-76860	-	
304-73	76860-76861	-	
304-74	76861-76862	-	
304-75	76862-76863	-	
304-76	76863-76864	-	
304-77	76864-76865	-	
304-78	76865-76866	-	
304-79	76866-76867	-	
304-80	76867-76868	-	
304-81	76868-76869	-	
304-82	76869-76870	-	
304-83	76870-76871	-	
304-84	76871-76872	-	
304-85	76872-76873	-	
304-86	76873-76874	-	
304-87	76874-76875	-	
304-88	76875-76876	-	
304-89	76876-76877	-	
304-90	76877-76878	-	
304-91	76878-76879	-	
304-92	76879-76880	-	
304-93	76880-76881	-	

#Text=Index Scan using i_my_pg_class_relname2 on my_pg_class2 (cost=0.27..8.29 rows=1 width=4) Index Cond: (relname = 'PG_CLASS'::citext) There are more facilities available to further reduce precision: unaccent
305-1	76882-76887	Index	
305-2	76888-76892	Scan	
305-3	76893-76898	using	
305-4	76899-76921	i_my_pg_class_relname2	
305-5	76922-76924	on	
305-6	76925-76937	my_pg_class2	
305-7	76938-76939	(	
305-8	76939-76943	cost	
305-9	76943-76944	=	
305-10	76944-76948	0.27	
305-11	76948-76949	.	
305-12	76949-76954	.8.29	
305-13	76955-76959	rows	
305-14	76959-76960	=	
305-15	76960-76961	1	
305-16	76962-76967	width	
305-17	76967-76968	=	
305-18	76968-76969	4	
305-19	76969-76970	)	
305-20	76971-76976	Index	
305-21	76977-76981	Cond	
305-22	76981-76982	:	
305-23	76983-76984	(	
305-24	76984-76991	relname	
305-25	76992-76993	=	
305-26	76994-76995	'	
305-27	76995-77003	PG_CLASS	
305-28	77003-77004	'	
305-29	77004-77005	:	
305-30	77005-77006	:	
305-31	77006-77012	citext	
305-32	77012-77013	)	
305-33	77014-77019	There	
305-34	77020-77023	are	
305-35	77024-77028	more	
305-36	77029-77039	facilities	
305-37	77040-77049	available	
305-38	77050-77052	to	
305-39	77053-77060	further	
305-40	77061-77067	reduce	
305-41	77068-77077	precision	
305-42	77077-77078	:	
305-43	77079-77087	unaccent	

#Text=fuzzystrmatch pg_trgm with similarity full text search with stemming If Postgres 12 or later is compiled with the icu library support (view the system table column pg_collation.collprovider to check), you can use
306-1	77088-77101	fuzzystrmatch	
306-2	77102-77109	pg_trgm	
306-3	77110-77114	with	
306-4	77115-77125	similarity	
306-5	77126-77130	full	
306-6	77131-77135	text	
306-7	77136-77142	search	
306-8	77143-77147	with	
306-9	77148-77156	stemming	
306-10	77157-77159	If	
306-11	77160-77168	Postgres	
306-12	77169-77171	12	
306-13	77172-77174	or	
306-14	77175-77180	later	
306-15	77181-77183	is	
306-16	77184-77192	compiled	
306-17	77193-77197	with	
306-18	77198-77201	the	
306-19	77202-77205	icu	
306-20	77206-77213	library	
306-21	77214-77221	support	
306-22	77222-77223	(	
306-23	77223-77227	view	
306-24	77228-77231	the	
306-25	77232-77238	system	
306-26	77239-77244	table	
306-27	77245-77251	column	
306-28	77252-77277	pg_collation.collprovider	
306-29	77278-77280	to	
306-30	77281-77286	check	
306-31	77286-77287	)	
306-32	77287-77288	,	
306-33	77289-77292	you	
306-34	77293-77296	can	
306-35	77297-77300	use	

#Text=nondeterministic collations that are case and accent-insensitive. View or Post Comments Force One Row Monday, June 22, 2020 How can you force a table to have at most one row? It is actually very easy by creating a unique expression index on a constant, with no
307-1	77301-77317	nondeterministic	
307-2	77318-77328	collations	
307-3	77329-77333	that	
307-4	77334-77337	are	
307-5	77338-77342	case	
307-6	77343-77346	and	
307-7	77347-77365	accent-insensitive	
307-8	77365-77366	.	
307-9	77367-77371	View	
307-10	77372-77374	or	
307-11	77375-77379	Post	
307-12	77380-77388	Comments	
307-13	77389-77394	Force	
307-14	77395-77398	One	
307-15	77399-77402	Row	
307-16	77403-77409	Monday	
307-17	77409-77410	,	
307-18	77411-77415	June	
307-19	77416-77418	22	
307-20	77418-77419	,	
307-21	77420-77424	2020	
307-22	77425-77428	How	
307-23	77429-77432	can	
307-24	77433-77436	you	
307-25	77437-77442	force	
307-26	77443-77444	a	
307-27	77445-77450	table	
307-28	77451-77453	to	
307-29	77454-77458	have	
307-30	77459-77461	at	
307-31	77462-77466	most	
307-32	77467-77470	one	
307-33	77471-77474	row	
307-34	77474-77475	?	
307-35	77476-77478	It	
307-36	77479-77481	is	
307-37	77482-77490	actually	
307-38	77491-77495	very	
307-39	77496-77500	easy	
307-40	77501-77503	by	
307-41	77504-77512	creating	
307-42	77513-77514	a	
307-43	77515-77521	unique	
307-44	77522-77532	expression	
307-45	77533-77538	index	
307-46	77539-77541	on	
307-47	77542-77543	a	
307-48	77544-77552	constant	
307-49	77552-77553	,	
307-50	77554-77558	with	
307-51	77559-77561	no	

#Text=column name references: CREATE TABLE onerow (a INTEGER, b TEXT); CREATE UNIQUE INDEX ON onerow ((1)); -- this adds a single row INSERT INTO onerow VALUES (1, 'foo')
308-1	77562-77568	column	
308-2	77569-77573	name	
308-3	77574-77584	references	
308-4	77584-77585	:	
308-5	77586-77592	CREATE	
308-6	77593-77598	TABLE	
308-7	77599-77605	onerow	
308-8	77606-77607	(	
308-9	77607-77608	a	
308-10	77609-77616	INTEGER	
308-11	77616-77617	,	
308-12	77618-77619	b	
308-13	77620-77624	TEXT	
308-14	77624-77625	)	
308-15	77625-77626	;	
308-16	77627-77633	CREATE	
308-17	77634-77640	UNIQUE	
308-18	77641-77646	INDEX	
308-19	77647-77649	ON	
308-20	77650-77656	onerow	
308-21	77657-77658	(	
308-22	77658-77659	(	
308-23	77659-77660	1	
308-24	77660-77661	)	
308-25	77661-77662	)	
308-26	77662-77663	;	
308-27	77664-77665	-	
308-28	77665-77666	-	
308-29	77667-77671	this	
308-30	77672-77676	adds	
308-31	77677-77678	a	
308-32	77679-77685	single	
308-33	77686-77689	row	
308-34	77690-77696	INSERT	
308-35	77697-77701	INTO	
308-36	77702-77708	onerow	
308-37	77709-77715	VALUES	
308-38	77716-77717	(	
308-39	77717-77718	1	
308-40	77718-77719	,	
308-41	77720-77721	'	
308-42	77721-77724	foo	
308-43	77724-77725	'	
308-44	77725-77726	)	

#Text=ON CONFLICT ((1)) DO UPDATE SET a = excluded.a, b = excluded.b; SELECT * FROM onerow; a | ---+----- 1 | foo -- this updates the single row INSERT INTO onerow VALUES (2, 'bar')
309-1	77727-77729	ON	
309-2	77730-77738	CONFLICT	
309-3	77739-77740	(	
309-4	77740-77741	(	
309-5	77741-77742	1	
309-6	77742-77743	)	
309-7	77743-77744	)	
309-8	77745-77747	DO	
309-9	77748-77754	UPDATE	
309-10	77755-77758	SET	
309-11	77759-77760	a	
309-12	77761-77762	=	
309-13	77763-77773	excluded.a	
309-14	77773-77774	,	
309-15	77775-77776	b	
309-16	77777-77778	=	
309-17	77779-77789	excluded.b	
309-18	77789-77790	;	
309-19	77791-77797	SELECT	
309-20	77798-77799	*	
309-21	77800-77804	FROM	
309-22	77805-77811	onerow	
309-23	77811-77812	;	
309-24	77813-77814	a	
309-25	77815-77816	|	
309-26	77817-77818	-	
309-27	77818-77819	-	
309-28	77819-77820	-	
309-29	77820-77821	+	
309-30	77821-77822	-	
309-31	77822-77823	-	
309-32	77823-77824	-	
309-33	77824-77825	-	
309-34	77825-77826	-	
309-35	77827-77828	1	
309-36	77829-77830	|	
309-37	77831-77834	foo	
309-38	77835-77836	-	
309-39	77836-77837	-	
309-40	77838-77842	this	
309-41	77843-77850	updates	
309-42	77851-77854	the	
309-43	77855-77861	single	
309-44	77862-77865	row	
309-45	77866-77872	INSERT	
309-46	77873-77877	INTO	
309-47	77878-77884	onerow	
309-48	77885-77891	VALUES	
309-49	77892-77893	(	
309-50	77893-77894	2	
309-51	77894-77895	,	
309-52	77896-77897	'	
309-53	77897-77900	bar	
309-54	77900-77901	'	
309-55	77901-77902	)	

#Text=ON CONFLICT ((1)) DO UPDATE SET a = excluded.a, b = excluded.b; SELECT * FROM onerow; a | ---+----- 2 | bar -- this also updates the single row INSERT INTO onerow VALUES (3, 'baz')
310-1	77903-77905	ON	
310-2	77906-77914	CONFLICT	
310-3	77915-77916	(	
310-4	77916-77917	(	
310-5	77917-77918	1	
310-6	77918-77919	)	
310-7	77919-77920	)	
310-8	77921-77923	DO	
310-9	77924-77930	UPDATE	
310-10	77931-77934	SET	
310-11	77935-77936	a	
310-12	77937-77938	=	
310-13	77939-77949	excluded.a	
310-14	77949-77950	,	
310-15	77951-77952	b	
310-16	77953-77954	=	
310-17	77955-77965	excluded.b	
310-18	77965-77966	;	
310-19	77967-77973	SELECT	
310-20	77974-77975	*	
310-21	77976-77980	FROM	
310-22	77981-77987	onerow	
310-23	77987-77988	;	
310-24	77989-77990	a	
310-25	77991-77992	|	
310-26	77993-77994	-	
310-27	77994-77995	-	
310-28	77995-77996	-	
310-29	77996-77997	+	
310-30	77997-77998	-	
310-31	77998-77999	-	
310-32	77999-78000	-	
310-33	78000-78001	-	
310-34	78001-78002	-	
310-35	78003-78004	2	
310-36	78005-78006	|	
310-37	78007-78010	bar	
310-38	78011-78012	-	
310-39	78012-78013	-	
310-40	78014-78018	this	
310-41	78019-78023	also	
310-42	78024-78031	updates	
310-43	78032-78035	the	
310-44	78036-78042	single	
310-45	78043-78046	row	
310-46	78047-78053	INSERT	
310-47	78054-78058	INTO	
310-48	78059-78065	onerow	
310-49	78066-78072	VALUES	
310-50	78073-78074	(	
310-51	78074-78075	3	
310-52	78075-78076	,	
310-53	78077-78078	'	
310-54	78078-78081	baz	
310-55	78081-78082	'	
310-56	78082-78083	)	

#Text=ON CONFLICT ((1)) DO UPDATE SET a = excluded.a, b = excluded.b; SELECT * FROM onerow; a | ---+----- 3 | baz -- try INSERT without ON CONFLICT INSERT INTO onerow VALUES (4, 'foo2');
311-1	78084-78086	ON	
311-2	78087-78095	CONFLICT	
311-3	78096-78097	(	
311-4	78097-78098	(	
311-5	78098-78099	1	
311-6	78099-78100	)	
311-7	78100-78101	)	
311-8	78102-78104	DO	
311-9	78105-78111	UPDATE	
311-10	78112-78115	SET	
311-11	78116-78117	a	
311-12	78118-78119	=	
311-13	78120-78130	excluded.a	
311-14	78130-78131	,	
311-15	78132-78133	b	
311-16	78134-78135	=	
311-17	78136-78146	excluded.b	
311-18	78146-78147	;	
311-19	78148-78154	SELECT	
311-20	78155-78156	*	
311-21	78157-78161	FROM	
311-22	78162-78168	onerow	
311-23	78168-78169	;	
311-24	78170-78171	a	
311-25	78172-78173	|	
311-26	78174-78175	-	
311-27	78175-78176	-	
311-28	78176-78177	-	
311-29	78177-78178	+	
311-30	78178-78179	-	
311-31	78179-78180	-	
311-32	78180-78181	-	
311-33	78181-78182	-	
311-34	78182-78183	-	
311-35	78184-78185	3	
311-36	78186-78187	|	
311-37	78188-78191	baz	
311-38	78192-78193	-	
311-39	78193-78194	-	
311-40	78195-78198	try	
311-41	78199-78205	INSERT	
311-42	78206-78213	without	
311-43	78214-78216	ON	
311-44	78217-78225	CONFLICT	
311-45	78226-78232	INSERT	
311-46	78233-78237	INTO	
311-47	78238-78244	onerow	
311-48	78245-78251	VALUES	
311-49	78252-78253	(	
311-50	78253-78254	4	
311-51	78254-78255	,	
311-52	78256-78257	'	
311-53	78257-78261	foo2	
311-54	78261-78262	'	
311-55	78262-78263	)	
311-56	78263-78264	;	

#Text=ERROR: duplicate key value violates unique constraint "onerow_expr_idx" DETAIL: Key ((1))=(1) already exists. By using on conflict, it is possible to add a row, but if a row already exists, to replace it with a new value.
312-1	78265-78270	ERROR	
312-2	78270-78271	:	
312-3	78272-78281	duplicate	
312-4	78282-78285	key	
312-5	78286-78291	value	
312-6	78292-78300	violates	
312-7	78301-78307	unique	
312-8	78308-78318	constraint	
312-9	78319-78320	"	
312-10	78320-78335	onerow_expr_idx	
312-11	78335-78336	"	
312-12	78337-78343	DETAIL	
312-13	78343-78344	:	
312-14	78345-78348	Key	
312-15	78349-78350	(	
312-16	78350-78351	(	
312-17	78351-78352	1	
312-18	78352-78353	)	
312-19	78353-78354	)	
312-20	78354-78355	=	
312-21	78355-78356	(	
312-22	78356-78357	1	
312-23	78357-78358	)	
312-24	78359-78366	already	
312-25	78367-78373	exists	
312-26	78373-78374	.	
312-27	78375-78377	By	
312-28	78378-78383	using	
312-29	78384-78386	on	
312-30	78387-78395	conflict	
312-31	78395-78396	,	
312-32	78397-78399	it	
312-33	78400-78402	is	
312-34	78403-78411	possible	
312-35	78412-78414	to	
312-36	78415-78418	add	
312-37	78419-78420	a	
312-38	78421-78424	row	
312-39	78424-78425	,	
312-40	78426-78429	but	
312-41	78430-78432	if	
312-42	78433-78434	a	
312-43	78435-78438	row	
312-44	78439-78446	already	
312-45	78447-78453	exists	
312-46	78453-78454	,	
312-47	78455-78457	to	
312-48	78458-78465	replace	
312-49	78466-78468	it	
312-50	78469-78473	with	
312-51	78474-78475	a	
312-52	78476-78479	new	
312-53	78480-78485	value	
312-54	78485-78486	.	

#Text=View or Post Comments Storing Binary Data in the Database Friday, June 19, 2020 There are some very good responses in an email thread about whether to store binary data in Postgres or externally. The binary storage options discussed were: In the database (toast helps with performance)
313-1	78487-78491	View	
313-2	78492-78494	or	
313-3	78495-78499	Post	
313-4	78500-78508	Comments	
313-5	78509-78516	Storing	
313-6	78517-78523	Binary	
313-7	78524-78528	Data	
313-8	78529-78531	in	
313-9	78532-78535	the	
313-10	78536-78544	Database	
313-11	78545-78551	Friday	
313-12	78551-78552	,	
313-13	78553-78557	June	
313-14	78558-78560	19	
313-15	78560-78561	,	
313-16	78562-78566	2020	
313-17	78567-78572	There	
313-18	78573-78576	are	
313-19	78577-78581	some	
313-20	78582-78586	very	
313-21	78587-78591	good	
313-22	78592-78601	responses	
313-23	78602-78604	in	
313-24	78605-78607	an	
313-25	78608-78613	email	
313-26	78614-78620	thread	
313-27	78621-78626	about	
313-28	78627-78634	whether	
313-29	78635-78637	to	
313-30	78638-78643	store	
313-31	78644-78650	binary	
313-32	78651-78655	data	
313-33	78656-78658	in	
313-34	78659-78667	Postgres	
313-35	78668-78670	or	
313-36	78671-78681	externally	
313-37	78681-78682	.	
313-38	78683-78686	The	
313-39	78687-78693	binary	
313-40	78694-78701	storage	
313-41	78702-78709	options	
313-42	78710-78719	discussed	
313-43	78720-78724	were	
313-44	78724-78725	:	
313-45	78726-78728	In	
313-46	78729-78732	the	
313-47	78733-78741	database	
313-48	78742-78743	(	
313-49	78743-78748	toast	
313-50	78749-78754	helps	
313-51	78755-78759	with	
313-52	78760-78771	performance	
313-53	78771-78772	)	

#Text=In another database, like SQLite In a local or network file system Using cloud storage. This email reply had many good insights, and this wiki page has even more. I have covered data storage outside of databases before. View or Post Comments Dinner Q&A
314-1	78773-78775	In	
314-2	78776-78783	another	
314-3	78784-78792	database	
314-4	78792-78793	,	
314-5	78794-78798	like	
314-6	78799-78805	SQLite	
314-7	78806-78808	In	
314-8	78809-78810	a	
314-9	78811-78816	local	
314-10	78817-78819	or	
314-11	78820-78827	network	
314-12	78828-78832	file	
314-13	78833-78839	system	
314-14	78840-78845	Using	
314-15	78846-78851	cloud	
314-16	78852-78859	storage	
314-17	78859-78860	.	
314-18	78861-78865	This	
314-19	78866-78871	email	
314-20	78872-78877	reply	
314-21	78878-78881	had	
314-22	78882-78886	many	
314-23	78887-78891	good	
314-24	78892-78900	insights	
314-25	78900-78901	,	
314-26	78902-78905	and	
314-27	78906-78910	this	
314-28	78911-78915	wiki	
314-29	78916-78920	page	
314-30	78921-78924	has	
314-31	78925-78929	even	
314-32	78930-78934	more	
314-33	78934-78935	.	
314-34	78936-78937	I	
314-35	78938-78942	have	
314-36	78943-78950	covered	
314-37	78951-78955	data	
314-38	78956-78963	storage	
314-39	78964-78971	outside	
314-40	78972-78974	of	
314-41	78975-78984	databases	
314-42	78985-78991	before	
314-43	78991-78992	.	
314-44	78993-78997	View	
314-45	78998-79000	or	
314-46	79001-79005	Post	
314-47	79006-79014	Comments	
314-48	79015-79021	Dinner	
314-49	79022-79023	Q	
314-50	79023-79024	&	
314-51	79024-79025	A	

#Text=Wednesday, June 17, 2020 My employer, EnterpriseDB, has been organizing events where potential customers and interested people can ask me questions while enjoying a meal. I thought the idea was strange, but I have done it ten times, and they have gone very well. The Q&A portion usually lasts one hour and forty-five minutes.
315-1	79026-79035	Wednesday	
315-2	79035-79036	,	
315-3	79037-79041	June	
315-4	79042-79044	17	
315-5	79044-79045	,	
315-6	79046-79050	2020	
315-7	79051-79053	My	
315-8	79054-79062	employer	
315-9	79062-79063	,	
315-10	79064-79076	EnterpriseDB	
315-11	79076-79077	,	
315-12	79078-79081	has	
315-13	79082-79086	been	
315-14	79087-79097	organizing	
315-15	79098-79104	events	
315-16	79105-79110	where	
315-17	79111-79120	potential	
315-18	79121-79130	customers	
315-19	79131-79134	and	
315-20	79135-79145	interested	
315-21	79146-79152	people	
315-22	79153-79156	can	
315-23	79157-79160	ask	
315-24	79161-79163	me	
315-25	79164-79173	questions	
315-26	79174-79179	while	
315-27	79180-79188	enjoying	
315-28	79189-79190	a	
315-29	79191-79195	meal	
315-30	79195-79196	.	
315-31	79197-79198	I	
315-32	79199-79206	thought	
315-33	79207-79210	the	
315-34	79211-79215	idea	
315-35	79216-79219	was	
315-36	79220-79227	strange	
315-37	79227-79228	,	
315-38	79229-79232	but	
315-39	79233-79234	I	
315-40	79235-79239	have	
315-41	79240-79244	done	
315-42	79245-79247	it	
315-43	79248-79251	ten	
315-44	79252-79257	times	
315-45	79257-79258	,	
315-46	79259-79262	and	
315-47	79263-79267	they	
315-48	79268-79272	have	
315-49	79273-79277	gone	
315-50	79278-79282	very	
315-51	79283-79287	well	
315-52	79287-79288	.	
315-53	79289-79292	The	
315-54	79293-79294	Q	
315-55	79294-79295	&	
315-56	79295-79296	A	
315-57	79297-79304	portion	
315-58	79305-79312	usually	
315-59	79313-79318	lasts	
315-60	79319-79322	one	
315-61	79323-79327	hour	
315-62	79328-79331	and	
315-63	79332-79342	forty-five	
315-64	79343-79350	minutes	
315-65	79350-79351	.	

#Text=During a November, 2019 event in Utrecht, the Netherlands, a sketch artist was present. The artist illustrated my ideas as I spoke and created this diagram, which I found quite interesting. View or Post Comments Controlling Server Variables at Connection Time Monday, June 15, 2020
316-1	79352-79358	During	
316-2	79359-79360	a	
316-3	79361-79369	November	
316-4	79369-79370	,	
316-5	79371-79375	2019	
316-6	79376-79381	event	
316-7	79382-79384	in	
316-8	79385-79392	Utrecht	
316-9	79392-79393	,	
316-10	79394-79397	the	
316-11	79398-79409	Netherlands	
316-12	79409-79410	,	
316-13	79411-79412	a	
316-14	79413-79419	sketch	
316-15	79420-79426	artist	
316-16	79427-79430	was	
316-17	79431-79438	present	
316-18	79438-79439	.	
316-19	79440-79443	The	
316-20	79444-79450	artist	
316-21	79451-79462	illustrated	
316-22	79463-79465	my	
316-23	79466-79471	ideas	
316-24	79472-79474	as	
316-25	79475-79476	I	
316-26	79477-79482	spoke	
316-27	79483-79486	and	
316-28	79487-79494	created	
316-29	79495-79499	this	
316-30	79500-79507	diagram	
316-31	79507-79508	,	
316-32	79509-79514	which	
316-33	79515-79516	I	
316-34	79517-79522	found	
316-35	79523-79528	quite	
316-36	79529-79540	interesting	
316-37	79540-79541	.	
316-38	79542-79546	View	
316-39	79547-79549	or	
316-40	79550-79554	Post	
316-41	79555-79563	Comments	
316-42	79564-79575	Controlling	
316-43	79576-79582	Server	
316-44	79583-79592	Variables	
316-45	79593-79595	at	
316-46	79596-79606	Connection	
316-47	79607-79611	Time	
316-48	79612-79618	Monday	
316-49	79618-79619	,	
316-50	79620-79624	June	
316-51	79625-79627	15	
316-52	79627-79628	,	
316-53	79629-79633	2020	

#Text=I have recently covered the importance of libpq environment variables and connection specification options. While most libpq options control how to connect to the Postgres server, there is one special option that can change variables on the server you connect to, e.g.: $ psql 'options=-cwork_mem=100MB dbname=test'
317-1	79634-79635	I	
317-2	79636-79640	have	
317-3	79641-79649	recently	
317-4	79650-79657	covered	
317-5	79658-79661	the	
317-6	79662-79672	importance	
317-7	79673-79675	of	
317-8	79676-79681	libpq	
317-9	79682-79693	environment	
317-10	79694-79703	variables	
317-11	79704-79707	and	
317-12	79708-79718	connection	
317-13	79719-79732	specification	
317-14	79733-79740	options	
317-15	79740-79741	.	
317-16	79742-79747	While	
317-17	79748-79752	most	
317-18	79753-79758	libpq	
317-19	79759-79766	options	
317-20	79767-79774	control	
317-21	79775-79778	how	
317-22	79779-79781	to	
317-23	79782-79789	connect	
317-24	79790-79792	to	
317-25	79793-79796	the	
317-26	79797-79805	Postgres	
317-27	79806-79812	server	
317-28	79812-79813	,	
317-29	79814-79819	there	
317-30	79820-79822	is	
317-31	79823-79826	one	
317-32	79827-79834	special	
317-33	79835-79841	option	
317-34	79842-79846	that	
317-35	79847-79850	can	
317-36	79851-79857	change	
317-37	79858-79867	variables	
317-38	79868-79870	on	
317-39	79871-79874	the	
317-40	79875-79881	server	
317-41	79882-79885	you	
317-42	79886-79893	connect	
317-43	79894-79896	to	
317-44	79896-79897	,	
317-45	79898-79901	e.g	
317-46	79901-79902	.	
317-47	79902-79903	:	
317-48	79904-79905	$	
317-49	79906-79910	psql	
317-50	79911-79912	'	
317-51	79912-79919	options	
317-52	79919-79920	=	
317-53	79920-79921	-	
317-54	79921-79930	cwork_mem	
317-55	79930-79931	=	
317-56	79931-79936	100MB	
317-57	79937-79943	dbname	
317-58	79943-79944	=	
317-59	79944-79948	test	
317-60	79948-79949	'	

#Text=psql (13devel) Type "help" for help. test=> SHOW work_mem; work_mem ---------- 100MB This can also be done using environment variables, with all the benefits of environment variables:
318-1	79950-79954	psql	
318-2	79955-79956	(	
318-3	79956-79963	13devel	
318-4	79963-79964	)	
318-5	79965-79969	Type	
318-6	79970-79971	"	
318-7	79971-79975	help	
318-8	79975-79976	"	
318-9	79977-79980	for	
318-10	79981-79985	help	
318-11	79985-79986	.	
318-12	79987-79991	test	
318-13	79991-79992	=	
318-14	79992-79993	>	
318-15	79994-79998	SHOW	
318-16	79999-80007	work_mem	
318-17	80007-80008	;	
318-18	80009-80017	work_mem	
318-19	80018-80019	-	
318-20	80019-80020	-	
318-21	80020-80021	-	
318-22	80021-80022	-	
318-23	80022-80023	-	
318-24	80023-80024	-	
318-25	80024-80025	-	
318-26	80025-80026	-	
318-27	80026-80027	-	
318-28	80027-80028	-	
318-29	80029-80034	100MB	
318-30	80035-80039	This	
318-31	80040-80043	can	
318-32	80044-80048	also	
318-33	80049-80051	be	
318-34	80052-80056	done	
318-35	80057-80062	using	
318-36	80063-80074	environment	
318-37	80075-80084	variables	
318-38	80084-80085	,	
318-39	80086-80090	with	
318-40	80091-80094	all	
318-41	80095-80098	the	
318-42	80099-80107	benefits	
318-43	80108-80110	of	
318-44	80111-80122	environment	
318-45	80123-80132	variables	
318-46	80132-80133	:	

#Text=$ PGOPTIONS="-c work_mem=100MB" psql test These settings can also be set at the user, database, and cluster level on the database side too, but having control on the client side is often useful. View or Post Comments Connect Parameter Specification Options Friday, June 12, 2020
319-1	80134-80135	$	
319-2	80136-80145	PGOPTIONS	
319-3	80145-80146	=	
319-4	80146-80147	"	
319-5	80147-80148	-	
319-6	80148-80149	c	
319-7	80150-80158	work_mem	
319-8	80158-80159	=	
319-9	80159-80164	100MB	
319-10	80164-80165	"	
319-11	80166-80170	psql	
319-12	80171-80175	test	
319-13	80176-80181	These	
319-14	80182-80190	settings	
319-15	80191-80194	can	
319-16	80195-80199	also	
319-17	80200-80202	be	
319-18	80203-80206	set	
319-19	80207-80209	at	
319-20	80210-80213	the	
319-21	80214-80218	user	
319-22	80218-80219	,	
319-23	80220-80228	database	
319-24	80228-80229	,	
319-25	80230-80233	and	
319-26	80234-80241	cluster	
319-27	80242-80247	level	
319-28	80248-80250	on	
319-29	80251-80254	the	
319-30	80255-80263	database	
319-31	80264-80268	side	
319-32	80269-80272	too	
319-33	80272-80273	,	
319-34	80274-80277	but	
319-35	80278-80284	having	
319-36	80285-80292	control	
319-37	80293-80295	on	
319-38	80296-80299	the	
319-39	80300-80306	client	
319-40	80307-80311	side	
319-41	80312-80314	is	
319-42	80315-80320	often	
319-43	80321-80327	useful	
319-44	80327-80328	.	
319-45	80329-80333	View	
319-46	80334-80336	or	
319-47	80337-80341	Post	
319-48	80342-80350	Comments	
319-49	80351-80358	Connect	
319-50	80359-80368	Parameter	
319-51	80369-80382	Specification	
319-52	80383-80390	Options	
319-53	80391-80397	Friday	
319-54	80397-80398	,	
319-55	80399-80403	June	
319-56	80404-80406	12	
319-57	80406-80407	,	
319-58	80408-80412	2020	

#Text=I have previously covered the importance of libpq and environment variables. While you can specify discrete connection command-line parameters and environment variables, there is a catch-all setting that allows connection options to be specified in a single string, e.g.: $ psql -d test psql (13devel)
320-1	80413-80414	I	
320-2	80415-80419	have	
320-3	80420-80430	previously	
320-4	80431-80438	covered	
320-5	80439-80442	the	
320-6	80443-80453	importance	
320-7	80454-80456	of	
320-8	80457-80462	libpq	
320-9	80463-80466	and	
320-10	80467-80478	environment	
320-11	80479-80488	variables	
320-12	80488-80489	.	
320-13	80490-80495	While	
320-14	80496-80499	you	
320-15	80500-80503	can	
320-16	80504-80511	specify	
320-17	80512-80520	discrete	
320-18	80521-80531	connection	
320-19	80532-80544	command-line	
320-20	80545-80555	parameters	
320-21	80556-80559	and	
320-22	80560-80571	environment	
320-23	80572-80581	variables	
320-24	80581-80582	,	
320-25	80583-80588	there	
320-26	80589-80591	is	
320-27	80592-80593	a	
320-28	80594-80603	catch-all	
320-29	80604-80611	setting	
320-30	80612-80616	that	
320-31	80617-80623	allows	
320-32	80624-80634	connection	
320-33	80635-80642	options	
320-34	80643-80645	to	
320-35	80646-80648	be	
320-36	80649-80658	specified	
320-37	80659-80661	in	
320-38	80662-80663	a	
320-39	80664-80670	single	
320-40	80671-80677	string	
320-41	80677-80678	,	
320-42	80679-80682	e.g	
320-43	80682-80683	.	
320-44	80683-80684	:	
320-45	80685-80686	$	
320-46	80687-80691	psql	
320-47	80692-80693	-	
320-48	80693-80694	d	
320-49	80695-80699	test	
320-50	80700-80704	psql	
320-51	80705-80706	(	
320-52	80706-80713	13devel	
320-53	80713-80714	)	

#Text=Type "help" for help. test=> \\q $ psql --dbname test psql (13devel) Type "help" for help. test=> \\q $ psql 'dbname=test' psql (13devel)
321-1	80715-80719	Type	
321-2	80720-80721	"	
321-3	80721-80725	help	
321-4	80725-80726	"	
321-5	80727-80730	for	
321-6	80731-80735	help	
321-7	80735-80736	.	
321-8	80737-80741	test	
321-9	80741-80742	=	
321-10	80742-80743	>	
321-11	80744-80745	\	
321-12	80745-80746	q	
321-13	80747-80748	$	
321-14	80749-80753	psql	
321-15	80754-80755	-	
321-16	80755-80756	-	
321-17	80756-80762	dbname	
321-18	80763-80767	test	
321-19	80768-80772	psql	
321-20	80773-80774	(	
321-21	80774-80781	13devel	
321-22	80781-80782	)	
321-23	80783-80787	Type	
321-24	80788-80789	"	
321-25	80789-80793	help	
321-26	80793-80794	"	
321-27	80795-80798	for	
321-28	80799-80803	help	
321-29	80803-80804	.	
321-30	80805-80809	test	
321-31	80809-80810	=	
321-32	80810-80811	>	
321-33	80812-80813	\	
321-34	80813-80814	q	
321-35	80815-80816	$	
321-36	80817-80821	psql	
321-37	80822-80823	'	
321-38	80823-80829	dbname	
321-39	80829-80830	=	
321-40	80830-80834	test	
321-41	80834-80835	'	
321-42	80836-80840	psql	
321-43	80841-80842	(	
321-44	80842-80849	13devel	
321-45	80849-80850	)	

#Text=Type "help" for help. test=> \\q The first psql command uses a single-letter command-line option. The second one uses a long-format option. The third uses a parameter key word. Multiple key words can be used to specify multiple connection options:
322-1	80851-80855	Type	
322-2	80856-80857	"	
322-3	80857-80861	help	
322-4	80861-80862	"	
322-5	80863-80866	for	
322-6	80867-80871	help	
322-7	80871-80872	.	
322-8	80873-80877	test	
322-9	80877-80878	=	
322-10	80878-80879	>	
322-11	80880-80881	\	
322-12	80881-80882	q	
322-13	80883-80886	The	
322-14	80887-80892	first	
322-15	80893-80897	psql	
322-16	80898-80905	command	
322-17	80906-80910	uses	
322-18	80911-80912	a	
322-19	80913-80926	single-letter	
322-20	80927-80939	command-line	
322-21	80940-80946	option	
322-22	80946-80947	.	
322-23	80948-80951	The	
322-24	80952-80958	second	
322-25	80959-80962	one	
322-26	80963-80967	uses	
322-27	80968-80969	a	
322-28	80970-80981	long-format	
322-29	80982-80988	option	
322-30	80988-80989	.	
322-31	80990-80993	The	
322-32	80994-80999	third	
322-33	81000-81004	uses	
322-34	81005-81006	a	
322-35	81007-81016	parameter	
322-36	81017-81020	key	
322-37	81021-81025	word	
322-38	81025-81026	.	
322-39	81027-81035	Multiple	
322-40	81036-81039	key	
322-41	81040-81045	words	
322-42	81046-81049	can	
322-43	81050-81052	be	
322-44	81053-81057	used	
322-45	81058-81060	to	
322-46	81061-81068	specify	
322-47	81069-81077	multiple	
322-48	81078-81088	connection	
322-49	81089-81096	options	
322-50	81096-81097	:	

#Text=$ psql 'host=myhost.com port=5433 dbname=test' You can also use a uri syntax to specify the same parameters as above: $ psql postgresql://myhost.com:5433/test View or Post Comments Controlling Connection Parameters Using Environment Variables
323-1	81098-81099	$	
323-2	81100-81104	psql	
323-3	81105-81106	'	
323-4	81106-81110	host	
323-5	81110-81111	=	
323-6	81111-81121	myhost.com	
323-7	81122-81126	port	
323-8	81126-81127	=	
323-9	81127-81131	5433	
323-10	81132-81138	dbname	
323-11	81138-81139	=	
323-12	81139-81143	test	
323-13	81143-81144	'	
323-14	81145-81148	You	
323-15	81149-81152	can	
323-16	81153-81157	also	
323-17	81158-81161	use	
323-18	81162-81163	a	
323-19	81164-81167	uri	
323-20	81168-81174	syntax	
323-21	81175-81177	to	
323-22	81178-81185	specify	
323-23	81186-81189	the	
323-24	81190-81194	same	
323-25	81195-81205	parameters	
323-26	81206-81208	as	
323-27	81209-81214	above	
323-28	81214-81215	:	
323-29	81216-81217	$	
323-30	81218-81222	psql	
323-31	81223-81233	postgresql	
323-32	81233-81234	:	
323-33	81234-81235	/	
323-34	81235-81236	/	
323-35	81236-81246	myhost.com	
323-36	81246-81247	:	
323-37	81247-81251	5433	
323-38	81251-81252	/	
323-39	81252-81256	test	
323-40	81257-81261	View	
323-41	81262-81264	or	
323-42	81265-81269	Post	
323-43	81270-81278	Comments	
323-44	81279-81290	Controlling	
323-45	81291-81301	Connection	
323-46	81302-81312	Parameters	
323-47	81313-81318	Using	
323-48	81319-81330	Environment	
323-49	81331-81340	Variables	

#Text=Wednesday, June 10, 2020 Libpq is the Postgres connection library used by almost every non-jdbc application. It allows many connection parameters, which can be specified on the command line or embedded in applications: $ psql -h myhost.com -d mydb
324-1	81341-81350	Wednesday	
324-2	81350-81351	,	
324-3	81352-81356	June	
324-4	81357-81359	10	
324-5	81359-81360	,	
324-6	81361-81365	2020	
324-7	81366-81371	Libpq	
324-8	81372-81374	is	
324-9	81375-81378	the	
324-10	81379-81387	Postgres	
324-11	81388-81398	connection	
324-12	81399-81406	library	
324-13	81407-81411	used	
324-14	81412-81414	by	
324-15	81415-81421	almost	
324-16	81422-81427	every	
324-17	81428-81436	non-jdbc	
324-18	81437-81448	application	
324-19	81448-81449	.	
324-20	81450-81452	It	
324-21	81453-81459	allows	
324-22	81460-81464	many	
324-23	81465-81475	connection	
324-24	81476-81486	parameters	
324-25	81486-81487	,	
324-26	81488-81493	which	
324-27	81494-81497	can	
324-28	81498-81500	be	
324-29	81501-81510	specified	
324-30	81511-81513	on	
324-31	81514-81517	the	
324-32	81518-81525	command	
324-33	81526-81530	line	
324-34	81531-81533	or	
324-35	81534-81542	embedded	
324-36	81543-81545	in	
324-37	81546-81558	applications	
324-38	81558-81559	:	
324-39	81560-81561	$	
324-40	81562-81566	psql	
324-41	81567-81568	-	
324-42	81568-81569	h	
324-43	81570-81580	myhost.com	
324-44	81581-81582	-	
324-45	81582-81583	d	
324-46	81584-81588	mydb	

#Text=In the above case, the psql host name and database name are specified on the command-line and interpreted by libpq. However, it is also possible to specify parameters using environment variables, which are also interpreted by libpq: $ PGHOST=myhost.com PGDATABASE=mydb psql
325-1	81589-81591	In	
325-2	81592-81595	the	
325-3	81596-81601	above	
325-4	81602-81606	case	
325-5	81606-81607	,	
325-6	81608-81611	the	
325-7	81612-81616	psql	
325-8	81617-81621	host	
325-9	81622-81626	name	
325-10	81627-81630	and	
325-11	81631-81639	database	
325-12	81640-81644	name	
325-13	81645-81648	are	
325-14	81649-81658	specified	
325-15	81659-81661	on	
325-16	81662-81665	the	
325-17	81666-81678	command-line	
325-18	81679-81682	and	
325-19	81683-81694	interpreted	
325-20	81695-81697	by	
325-21	81698-81703	libpq	
325-22	81703-81704	.	
325-23	81705-81712	However	
325-24	81712-81713	,	
325-25	81714-81716	it	
325-26	81717-81719	is	
325-27	81720-81724	also	
325-28	81725-81733	possible	
325-29	81734-81736	to	
325-30	81737-81744	specify	
325-31	81745-81755	parameters	
325-32	81756-81761	using	
325-33	81762-81773	environment	
325-34	81774-81783	variables	
325-35	81783-81784	,	
325-36	81785-81790	which	
325-37	81791-81794	are	
325-38	81795-81799	also	
325-39	81800-81811	interpreted	
325-40	81812-81814	by	
325-41	81815-81820	libpq	
325-42	81820-81821	:	
325-43	81822-81823	$	
325-44	81824-81830	PGHOST	
325-45	81830-81831	=	
325-46	81831-81841	myhost.com	
325-47	81842-81852	PGDATABASE	
325-48	81852-81853	=	
325-49	81853-81857	mydb	
325-50	81858-81862	psql	

#Text=There is obviously no value in specifying libpq parameters using environment variables in this example, but there are use cases. For example, if you want to perform multiple operations on the same host name and database, you can do: $ export PGHOST=myhost.com $ export PGDATABASE=mydb $ vacuumdb
326-1	81863-81868	There	
326-2	81869-81871	is	
326-3	81872-81881	obviously	
326-4	81882-81884	no	
326-5	81885-81890	value	
326-6	81891-81893	in	
326-7	81894-81904	specifying	
326-8	81905-81910	libpq	
326-9	81911-81921	parameters	
326-10	81922-81927	using	
326-11	81928-81939	environment	
326-12	81940-81949	variables	
326-13	81950-81952	in	
326-14	81953-81957	this	
326-15	81958-81965	example	
326-16	81965-81966	,	
326-17	81967-81970	but	
326-18	81971-81976	there	
326-19	81977-81980	are	
326-20	81981-81984	use	
326-21	81985-81990	cases	
326-22	81990-81991	.	
326-23	81992-81995	For	
326-24	81996-82003	example	
326-25	82003-82004	,	
326-26	82005-82007	if	
326-27	82008-82011	you	
326-28	82012-82016	want	
326-29	82017-82019	to	
326-30	82020-82027	perform	
326-31	82028-82036	multiple	
326-32	82037-82047	operations	
326-33	82048-82050	on	
326-34	82051-82054	the	
326-35	82055-82059	same	
326-36	82060-82064	host	
326-37	82065-82069	name	
326-38	82070-82073	and	
326-39	82074-82082	database	
326-40	82082-82083	,	
326-41	82084-82087	you	
326-42	82088-82091	can	
326-43	82092-82094	do	
326-44	82094-82095	:	
326-45	82096-82097	$	
326-46	82098-82104	export	
326-47	82105-82111	PGHOST	
326-48	82111-82112	=	
326-49	82112-82122	myhost.com	
326-50	82123-82124	$	
326-51	82125-82131	export	
326-52	82132-82142	PGDATABASE	
326-53	82142-82143	=	
326-54	82143-82147	mydb	
326-55	82148-82149	$	
326-56	82150-82158	vacuumdb	

#Text=$ reindexdb This avoids specifying the host and database names multiple times, though with a loss of clarity. Sometimes environment variables are best used as defaults when connection options are not specified: $ export PGHOST=myhost.com $ export PGDATABASE=mydb
327-1	82159-82160	$	
327-2	82161-82170	reindexdb	
327-3	82171-82175	This	
327-4	82176-82182	avoids	
327-5	82183-82193	specifying	
327-6	82194-82197	the	
327-7	82198-82202	host	
327-8	82203-82206	and	
327-9	82207-82215	database	
327-10	82216-82221	names	
327-11	82222-82230	multiple	
327-12	82231-82236	times	
327-13	82236-82237	,	
327-14	82238-82244	though	
327-15	82245-82249	with	
327-16	82250-82251	a	
327-17	82252-82256	loss	
327-18	82257-82259	of	
327-19	82260-82267	clarity	
327-20	82267-82268	.	
327-21	82269-82278	Sometimes	
327-22	82279-82290	environment	
327-23	82291-82300	variables	
327-24	82301-82304	are	
327-25	82305-82309	best	
327-26	82310-82314	used	
327-27	82315-82317	as	
327-28	82318-82326	defaults	
327-29	82327-82331	when	
327-30	82332-82342	connection	
327-31	82343-82350	options	
327-32	82351-82354	are	
327-33	82355-82358	not	
327-34	82359-82368	specified	
327-35	82368-82369	:	
327-36	82370-82371	$	
327-37	82372-82378	export	
327-38	82379-82385	PGHOST	
327-39	82385-82386	=	
327-40	82386-82396	myhost.com	
327-41	82397-82398	$	
327-42	82399-82405	export	
327-43	82406-82416	PGDATABASE	
327-44	82416-82417	=	
327-45	82417-82421	mydb	

#Text=$ reindexdb $ reindexdb --dbname mydb2 $ reindexdb --host myhost3.com --dbname mydb3 This reindexes databases mydb and mydb2 on host myhost.com, and database mydb3 on myhost3.com.
328-1	82422-82423	$	
328-2	82424-82433	reindexdb	
328-3	82434-82435	$	
328-4	82436-82445	reindexdb	
328-5	82446-82447	-	
328-6	82447-82448	-	
328-7	82448-82454	dbname	
328-8	82455-82460	mydb2	
328-9	82461-82462	$	
328-10	82463-82472	reindexdb	
328-11	82473-82474	-	
328-12	82474-82475	-	
328-13	82475-82479	host	
328-14	82480-82487	myhost3	
328-15	82487-82488	.	
328-16	82488-82491	com	
328-17	82492-82493	-	
328-18	82493-82494	-	
328-19	82494-82500	dbname	
328-20	82501-82506	mydb3	
328-21	82507-82511	This	
328-22	82512-82521	reindexes	
328-23	82522-82531	databases	
328-24	82532-82536	mydb	
328-25	82537-82540	and	
328-26	82541-82546	mydb2	
328-27	82547-82549	on	
328-28	82550-82554	host	
328-29	82555-82565	myhost.com	
328-30	82565-82566	,	
328-31	82567-82570	and	
328-32	82571-82579	database	
328-33	82580-82585	mydb3	
328-34	82586-82588	on	
328-35	82589-82596	myhost3	
328-36	82596-82597	.	
328-37	82597-82600	com	
328-38	82600-82601	.	

#Text=Another use-case for environment variables is to set parameters for users, without having to pass them as parameters to commands: $ # must use 'sh' so the redirect happens as root $ sudo sh -c "echo PGHOST='example.com' >> ~bruce/.profile"
329-1	82602-82609	Another	
329-2	82610-82618	use-case	
329-3	82619-82622	for	
329-4	82623-82634	environment	
329-5	82635-82644	variables	
329-6	82645-82647	is	
329-7	82648-82650	to	
329-8	82651-82654	set	
329-9	82655-82665	parameters	
329-10	82666-82669	for	
329-11	82670-82675	users	
329-12	82675-82676	,	
329-13	82677-82684	without	
329-14	82685-82691	having	
329-15	82692-82694	to	
329-16	82695-82699	pass	
329-17	82700-82704	them	
329-18	82705-82707	as	
329-19	82708-82718	parameters	
329-20	82719-82721	to	
329-21	82722-82730	commands	
329-22	82730-82731	:	
329-23	82732-82733	$	
329-24	82734-82735	#	
329-25	82736-82740	must	
329-26	82741-82744	use	
329-27	82745-82746	'	
329-28	82746-82748	sh	
329-29	82748-82749	'	
329-30	82750-82752	so	
329-31	82753-82756	the	
329-32	82757-82765	redirect	
329-33	82766-82773	happens	
329-34	82774-82776	as	
329-35	82777-82781	root	
329-36	82782-82783	$	
329-37	82784-82788	sudo	
329-38	82789-82791	sh	
329-39	82792-82793	-	
329-40	82793-82794	c	
329-41	82795-82796	"	
329-42	82796-82800	echo	
329-43	82801-82807	PGHOST	
329-44	82807-82808	=	
329-45	82808-82809	'	
329-46	82809-82820	example.com	
329-47	82820-82821	'	
329-48	82822-82823	>	
329-49	82823-82824	>	
329-50	82825-82826	~	
329-51	82826-82831	bruce	
329-52	82831-82832	/	
329-53	82832-82833	.	
329-54	82833-82840	profile	
329-55	82840-82841	"	

#Text=By appending this to bruce's .profile file, all applications that use libpq without a specific host name will connect to example.com automatically. Once bruce logs out and back in again, all his applications will start using the new .profile pghost setting. Finally, environment variables make it possible to set default connection values for all users. For example, on Debian, to default all tcp
330-1	82842-82844	By	
330-2	82845-82854	appending	
330-3	82855-82859	this	
330-4	82860-82862	to	
330-5	82863-82870	bruce's	
330-6	82871-82872	.	
330-7	82872-82879	profile	
330-8	82880-82884	file	
330-9	82884-82885	,	
330-10	82886-82889	all	
330-11	82890-82902	applications	
330-12	82903-82907	that	
330-13	82908-82911	use	
330-14	82912-82917	libpq	
330-15	82918-82925	without	
330-16	82926-82927	a	
330-17	82928-82936	specific	
330-18	82937-82941	host	
330-19	82942-82946	name	
330-20	82947-82951	will	
330-21	82952-82959	connect	
330-22	82960-82962	to	
330-23	82963-82974	example.com	
330-24	82975-82988	automatically	
330-25	82988-82989	.	
330-26	82990-82994	Once	
330-27	82995-83000	bruce	
330-28	83001-83005	logs	
330-29	83006-83009	out	
330-30	83010-83013	and	
330-31	83014-83018	back	
330-32	83019-83021	in	
330-33	83022-83027	again	
330-34	83027-83028	,	
330-35	83029-83032	all	
330-36	83033-83036	his	
330-37	83037-83049	applications	
330-38	83050-83054	will	
330-39	83055-83060	start	
330-40	83061-83066	using	
330-41	83067-83070	the	
330-42	83071-83074	new	
330-43	83075-83076	.	
330-44	83076-83083	profile	
330-45	83084-83090	pghost	
330-46	83091-83098	setting	
330-47	83098-83099	.	
330-48	83100-83107	Finally	
330-49	83107-83108	,	
330-50	83109-83120	environment	
330-51	83121-83130	variables	
330-52	83131-83135	make	
330-53	83136-83138	it	
330-54	83139-83147	possible	
330-55	83148-83150	to	
330-56	83151-83154	set	
330-57	83155-83162	default	
330-58	83163-83173	connection	
330-59	83174-83180	values	
330-60	83181-83184	for	
330-61	83185-83188	all	
330-62	83189-83194	users	
330-63	83194-83195	.	
330-64	83196-83199	For	
330-65	83200-83207	example	
330-66	83207-83208	,	
330-67	83209-83211	on	
330-68	83212-83218	Debian	
330-69	83218-83219	,	
330-70	83220-83222	to	
330-71	83223-83230	default	
330-72	83231-83234	all	
330-73	83235-83238	tcp	

#Text=(non-Unix Domain socket) connections to fully verify ssl certificates, you can do: $ sudo sh -c "echo PGSSLMODE='verify-full' >> /etc/profile.d/pgdefaults.sh"
331-1	83239-83240	(	
331-2	83240-83248	non-Unix	
331-3	83249-83255	Domain	
331-4	83256-83262	socket	
331-5	83262-83263	)	
331-6	83264-83275	connections	
331-7	83276-83278	to	
331-8	83279-83284	fully	
331-9	83285-83291	verify	
331-10	83292-83295	ssl	
331-11	83296-83308	certificates	
331-12	83308-83309	,	
331-13	83310-83313	you	
331-14	83314-83317	can	
331-15	83318-83320	do	
331-16	83320-83321	:	
331-17	83322-83323	$	
331-18	83324-83328	sudo	
331-19	83329-83331	sh	
331-20	83332-83333	-	
331-21	83333-83334	c	
331-22	83335-83336	"	
331-23	83336-83340	echo	
331-24	83341-83350	PGSSLMODE	
331-25	83350-83351	=	
331-26	83351-83352	'	
331-27	83352-83363	verify-full	
331-28	83363-83364	'	
331-29	83365-83366	>	
331-30	83366-83367	>	
331-31	83368-83369	/	
331-32	83369-83372	etc	
331-33	83372-83373	/	
331-34	83373-83382	profile.d	
331-35	83382-83383	/	
331-36	83383-83396	pgdefaults.sh	
331-37	83396-83397	"	

#Text=Of course, you can change environment variables set at login and applications can override connection parameters set by environment variables. View or Post Comments Safety Systems Can Reduce Safety Monday, June 8, 2020 What is the purpose of safety systems? To make things safer? To make them appear safer? To satisfy some external requirement? The purpose of safety
332-1	83398-83400	Of	
332-2	83401-83407	course	
332-3	83407-83408	,	
332-4	83409-83412	you	
332-5	83413-83416	can	
332-6	83417-83423	change	
332-7	83424-83435	environment	
332-8	83436-83445	variables	
332-9	83446-83449	set	
332-10	83450-83452	at	
332-11	83453-83458	login	
332-12	83459-83462	and	
332-13	83463-83475	applications	
332-14	83476-83479	can	
332-15	83480-83488	override	
332-16	83489-83499	connection	
332-17	83500-83510	parameters	
332-18	83511-83514	set	
332-19	83515-83517	by	
332-20	83518-83529	environment	
332-21	83530-83539	variables	
332-22	83539-83540	.	
332-23	83541-83545	View	
332-24	83546-83548	or	
332-25	83549-83553	Post	
332-26	83554-83562	Comments	
332-27	83563-83569	Safety	
332-28	83570-83577	Systems	
332-29	83578-83581	Can	
332-30	83582-83588	Reduce	
332-31	83589-83595	Safety	
332-32	83596-83602	Monday	
332-33	83602-83603	,	
332-34	83604-83608	June	
332-35	83609-83610	8	
332-36	83610-83611	,	
332-37	83612-83616	2020	
332-38	83617-83621	What	
332-39	83622-83624	is	
332-40	83625-83628	the	
332-41	83629-83636	purpose	
332-42	83637-83639	of	
332-43	83640-83646	safety	
332-44	83647-83654	systems	
332-45	83654-83655	?	
332-46	83656-83658	To	
332-47	83659-83663	make	
332-48	83664-83670	things	
332-49	83671-83676	safer	
332-50	83676-83677	?	
332-51	83678-83680	To	
332-52	83681-83685	make	
332-53	83686-83690	them	
332-54	83691-83697	appear	
332-55	83698-83703	safer	
332-56	83703-83704	?	
332-57	83705-83707	To	
332-58	83708-83715	satisfy	
332-59	83716-83720	some	
332-60	83721-83729	external	
332-61	83730-83741	requirement	
332-62	83741-83742	?	
332-63	83743-83746	The	
332-64	83747-83754	purpose	
332-65	83755-83757	of	
332-66	83758-83764	safety	

#Text=systems is not always clear, but even for safety systems whose sole purpose is to increase safety — do they always succeed in increasing safety? The simple answer is "no". Here are three examples: Crash of ValuJet 592 caused by transporting safety equipment Three Mile Island nuclear reactor meltdown caused by the failure of complex safety systems Chernobyl nuclear reactor explosion caused by a safety test
333-1	83765-83772	systems	
333-2	83773-83775	is	
333-3	83776-83779	not	
333-4	83780-83786	always	
333-5	83787-83792	clear	
333-6	83792-83793	,	
333-7	83794-83797	but	
333-8	83798-83802	even	
333-9	83803-83806	for	
333-10	83807-83813	safety	
333-11	83814-83821	systems	
333-12	83822-83827	whose	
333-13	83828-83832	sole	
333-14	83833-83840	purpose	
333-15	83841-83843	is	
333-16	83844-83846	to	
333-17	83847-83855	increase	
333-18	83856-83862	safety	
333-19	83863-83864	—	
333-20	83865-83867	do	
333-21	83868-83872	they	
333-22	83873-83879	always	
333-23	83880-83887	succeed	
333-24	83888-83890	in	
333-25	83891-83901	increasing	
333-26	83902-83908	safety	
333-27	83908-83909	?	
333-28	83910-83913	The	
333-29	83914-83920	simple	
333-30	83921-83927	answer	
333-31	83928-83930	is	
333-32	83931-83932	"	
333-33	83932-83934	no	
333-34	83934-83935	"	
333-35	83935-83936	.	
333-36	83937-83941	Here	
333-37	83942-83945	are	
333-38	83946-83951	three	
333-39	83952-83960	examples	
333-40	83960-83961	:	
333-41	83962-83967	Crash	
333-42	83968-83970	of	
333-43	83971-83978	ValuJet	
333-44	83979-83982	592	
333-45	83983-83989	caused	
333-46	83990-83992	by	
333-47	83993-84005	transporting	
333-48	84006-84012	safety	
333-49	84013-84022	equipment	
333-50	84023-84028	Three	
333-51	84029-84033	Mile	
333-52	84034-84040	Island	
333-53	84041-84048	nuclear	
333-54	84049-84056	reactor	
333-55	84057-84065	meltdown	
333-56	84066-84072	caused	
333-57	84073-84075	by	
333-58	84076-84079	the	
333-59	84080-84087	failure	
333-60	84088-84090	of	
333-61	84091-84098	complex	
333-62	84099-84105	safety	
333-63	84106-84113	systems	
333-64	84114-84123	Chernobyl	
333-65	84124-84131	nuclear	
333-66	84132-84139	reactor	
333-67	84140-84149	explosion	
333-68	84150-84156	caused	
333-69	84157-84159	by	
333-70	84160-84161	a	
333-71	84162-84168	safety	
333-72	84169-84173	test	

#Text=In all three cases, safety systems did not prevent disasters — they caused them. Safety systems are often very useful, and the modern world could not operate with them. However, they also add complexity, and that added complexity can introduce failure modes that did not exist without the safety systems. So, where does that leave us?
334-1	84174-84176	In	
334-2	84177-84180	all	
334-3	84181-84186	three	
334-4	84187-84192	cases	
334-5	84192-84193	,	
334-6	84194-84200	safety	
334-7	84201-84208	systems	
334-8	84209-84212	did	
334-9	84213-84216	not	
334-10	84217-84224	prevent	
334-11	84225-84234	disasters	
334-12	84235-84236	—	
334-13	84237-84241	they	
334-14	84242-84248	caused	
334-15	84249-84253	them	
334-16	84253-84254	.	
334-17	84255-84261	Safety	
334-18	84262-84269	systems	
334-19	84270-84273	are	
334-20	84274-84279	often	
334-21	84280-84284	very	
334-22	84285-84291	useful	
334-23	84291-84292	,	
334-24	84293-84296	and	
334-25	84297-84300	the	
334-26	84301-84307	modern	
334-27	84308-84313	world	
334-28	84314-84319	could	
334-29	84320-84323	not	
334-30	84324-84331	operate	
334-31	84332-84336	with	
334-32	84337-84341	them	
334-33	84341-84342	.	
334-34	84343-84350	However	
334-35	84350-84351	,	
334-36	84352-84356	they	
334-37	84357-84361	also	
334-38	84362-84365	add	
334-39	84366-84376	complexity	
334-40	84376-84377	,	
334-41	84378-84381	and	
334-42	84382-84386	that	
334-43	84387-84392	added	
334-44	84393-84403	complexity	
334-45	84404-84407	can	
334-46	84408-84417	introduce	
334-47	84418-84425	failure	
334-48	84426-84431	modes	
334-49	84432-84436	that	
334-50	84437-84440	did	
334-51	84441-84444	not	
334-52	84445-84450	exist	
334-53	84451-84458	without	
334-54	84459-84462	the	
334-55	84463-84469	safety	
334-56	84470-84477	systems	
334-57	84477-84478	.	
334-58	84479-84481	So	
334-59	84481-84482	,	
334-60	84483-84488	where	
334-61	84489-84493	does	
334-62	84494-84498	that	
334-63	84499-84504	leave	
334-64	84505-84507	us	
334-65	84507-84508	?	

#Text=Safety systems are useful, but too many of them are bad? How many is too many? These are hard questions, but there are some guidelines: How serious is the failure that the safety system is trying to prevent? How likely is the failure that the safety system is trying to prevent? How likely is the safety system to fail?
335-1	84509-84515	Safety	
335-2	84516-84523	systems	
335-3	84524-84527	are	
335-4	84528-84534	useful	
335-5	84534-84535	,	
335-6	84536-84539	but	
335-7	84540-84543	too	
335-8	84544-84548	many	
335-9	84549-84551	of	
335-10	84552-84556	them	
335-11	84557-84560	are	
335-12	84561-84564	bad	
335-13	84564-84565	?	
335-14	84566-84569	How	
335-15	84570-84574	many	
335-16	84575-84577	is	
335-17	84578-84581	too	
335-18	84582-84586	many	
335-19	84586-84587	?	
335-20	84588-84593	These	
335-21	84594-84597	are	
335-22	84598-84602	hard	
335-23	84603-84612	questions	
335-24	84612-84613	,	
335-25	84614-84617	but	
335-26	84618-84623	there	
335-27	84624-84627	are	
335-28	84628-84632	some	
335-29	84633-84643	guidelines	
335-30	84643-84644	:	
335-31	84645-84648	How	
335-32	84649-84656	serious	
335-33	84657-84659	is	
335-34	84660-84663	the	
335-35	84664-84671	failure	
335-36	84672-84676	that	
335-37	84677-84680	the	
335-38	84681-84687	safety	
335-39	84688-84694	system	
335-40	84695-84697	is	
335-41	84698-84704	trying	
335-42	84705-84707	to	
335-43	84708-84715	prevent	
335-44	84715-84716	?	
335-45	84717-84720	How	
335-46	84721-84727	likely	
335-47	84728-84730	is	
335-48	84731-84734	the	
335-49	84735-84742	failure	
335-50	84743-84747	that	
335-51	84748-84751	the	
335-52	84752-84758	safety	
335-53	84759-84765	system	
335-54	84766-84768	is	
335-55	84769-84775	trying	
335-56	84776-84778	to	
335-57	84779-84786	prevent	
335-58	84786-84787	?	
335-59	84788-84791	How	
335-60	84792-84798	likely	
335-61	84799-84801	is	
335-62	84802-84805	the	
335-63	84806-84812	safety	
335-64	84813-84819	system	
335-65	84820-84822	to	
335-66	84823-84827	fail	
335-67	84827-84828	?	

#Text=What impact will failure of the safety system have on the overall system? This gets into a very complex calculus where you are computing the likelihood and seriousness of the failure that the safety system is trying to prevent, and the likelihood and seriousness of safety system failure. The big point is that while you are computing the likelihood and seriousness of failures and adding safety systems to compensate for them, you have to be aware of the cost of adding those safety
336-1	84829-84833	What	
336-2	84834-84840	impact	
336-3	84841-84845	will	
336-4	84846-84853	failure	
336-5	84854-84856	of	
336-6	84857-84860	the	
336-7	84861-84867	safety	
336-8	84868-84874	system	
336-9	84875-84879	have	
336-10	84880-84882	on	
336-11	84883-84886	the	
336-12	84887-84894	overall	
336-13	84895-84901	system	
336-14	84901-84902	?	
336-15	84903-84907	This	
336-16	84908-84912	gets	
336-17	84913-84917	into	
336-18	84918-84919	a	
336-19	84920-84924	very	
336-20	84925-84932	complex	
336-21	84933-84941	calculus	
336-22	84942-84947	where	
336-23	84948-84951	you	
336-24	84952-84955	are	
336-25	84956-84965	computing	
336-26	84966-84969	the	
336-27	84970-84980	likelihood	
336-28	84981-84984	and	
336-29	84985-84996	seriousness	
336-30	84997-84999	of	
336-31	85000-85003	the	
336-32	85004-85011	failure	
336-33	85012-85016	that	
336-34	85017-85020	the	
336-35	85021-85027	safety	
336-36	85028-85034	system	
336-37	85035-85037	is	
336-38	85038-85044	trying	
336-39	85045-85047	to	
336-40	85048-85055	prevent	
336-41	85055-85056	,	
336-42	85057-85060	and	
336-43	85061-85064	the	
336-44	85065-85075	likelihood	
336-45	85076-85079	and	
336-46	85080-85091	seriousness	
336-47	85092-85094	of	
336-48	85095-85101	safety	
336-49	85102-85108	system	
336-50	85109-85116	failure	
336-51	85116-85117	.	
336-52	85118-85121	The	
336-53	85122-85125	big	
336-54	85126-85131	point	
336-55	85132-85134	is	
336-56	85135-85139	that	
336-57	85140-85145	while	
336-58	85146-85149	you	
336-59	85150-85153	are	
336-60	85154-85163	computing	
336-61	85164-85167	the	
336-62	85168-85178	likelihood	
336-63	85179-85182	and	
336-64	85183-85194	seriousness	
336-65	85195-85197	of	
336-66	85198-85206	failures	
336-67	85207-85210	and	
336-68	85211-85217	adding	
336-69	85218-85224	safety	
336-70	85225-85232	systems	
336-71	85233-85235	to	
336-72	85236-85246	compensate	
336-73	85247-85250	for	
336-74	85251-85255	them	
336-75	85255-85256	,	
336-76	85257-85260	you	
336-77	85261-85265	have	
336-78	85266-85268	to	
336-79	85269-85271	be	
336-80	85272-85277	aware	
336-81	85278-85280	of	
336-82	85281-85284	the	
336-83	85285-85289	cost	
336-84	85290-85292	of	
336-85	85293-85299	adding	
336-86	85300-85305	those	
336-87	85306-85312	safety	

#Text=systems, in both the likelihood and impact of their failure. What does this have to do with databases? Well, you might have a database on an airplane or at a nuclear reactor site, in which case the database is part of a complex system. However, databases are also complex systems, and we regularly add safety systems to increase their reliability.
337-1	85313-85320	systems	
337-2	85320-85321	,	
337-3	85322-85324	in	
337-4	85325-85329	both	
337-5	85330-85333	the	
337-6	85334-85344	likelihood	
337-7	85345-85348	and	
337-8	85349-85355	impact	
337-9	85356-85358	of	
337-10	85359-85364	their	
337-11	85365-85372	failure	
337-12	85372-85373	.	
337-13	85374-85378	What	
337-14	85379-85383	does	
337-15	85384-85388	this	
337-16	85389-85393	have	
337-17	85394-85396	to	
337-18	85397-85399	do	
337-19	85400-85404	with	
337-20	85405-85414	databases	
337-21	85414-85415	?	
337-22	85416-85420	Well	
337-23	85420-85421	,	
337-24	85422-85425	you	
337-25	85426-85431	might	
337-26	85432-85436	have	
337-27	85437-85438	a	
337-28	85439-85447	database	
337-29	85448-85450	on	
337-30	85451-85453	an	
337-31	85454-85462	airplane	
337-32	85463-85465	or	
337-33	85466-85468	at	
337-34	85469-85470	a	
337-35	85471-85478	nuclear	
337-36	85479-85486	reactor	
337-37	85487-85491	site	
337-38	85491-85492	,	
337-39	85493-85495	in	
337-40	85496-85501	which	
337-41	85502-85506	case	
337-42	85507-85510	the	
337-43	85511-85519	database	
337-44	85520-85522	is	
337-45	85523-85527	part	
337-46	85528-85530	of	
337-47	85531-85532	a	
337-48	85533-85540	complex	
337-49	85541-85547	system	
337-50	85547-85548	.	
337-51	85549-85556	However	
337-52	85556-85557	,	
337-53	85558-85567	databases	
337-54	85568-85571	are	
337-55	85572-85576	also	
337-56	85577-85584	complex	
337-57	85585-85592	systems	
337-58	85592-85593	,	
337-59	85594-85597	and	
337-60	85598-85600	we	
337-61	85601-85610	regularly	
337-62	85611-85614	add	
337-63	85615-85621	safety	
337-64	85622-85629	systems	
337-65	85630-85632	to	
337-66	85633-85641	increase	
337-67	85642-85647	their	
337-68	85648-85659	reliability	
337-69	85659-85660	.	

#Text=How often to do we consider the cost of those safety systems, in terms of the likelihood and seriousness of failures? Let's look at some typical database safety systems: Backups Error reporting Replication Connection pooling Let's walk through the calculus for backups: How serious is the failure that the safety system is trying to prevent? High
338-1	85661-85664	How	
338-2	85665-85670	often	
338-3	85671-85673	to	
338-4	85674-85676	do	
338-5	85677-85679	we	
338-6	85680-85688	consider	
338-7	85689-85692	the	
338-8	85693-85697	cost	
338-9	85698-85700	of	
338-10	85701-85706	those	
338-11	85707-85713	safety	
338-12	85714-85721	systems	
338-13	85721-85722	,	
338-14	85723-85725	in	
338-15	85726-85731	terms	
338-16	85732-85734	of	
338-17	85735-85738	the	
338-18	85739-85749	likelihood	
338-19	85750-85753	and	
338-20	85754-85765	seriousness	
338-21	85766-85768	of	
338-22	85769-85777	failures	
338-23	85777-85778	?	
338-24	85779-85784	Let's	
338-25	85785-85789	look	
338-26	85790-85792	at	
338-27	85793-85797	some	
338-28	85798-85805	typical	
338-29	85806-85814	database	
338-30	85815-85821	safety	
338-31	85822-85829	systems	
338-32	85829-85830	:	
338-33	85831-85838	Backups	
338-34	85839-85844	Error	
338-35	85845-85854	reporting	
338-36	85855-85866	Replication	
338-37	85867-85877	Connection	
338-38	85878-85885	pooling	
338-39	85886-85891	Let's	
338-40	85892-85896	walk	
338-41	85897-85904	through	
338-42	85905-85908	the	
338-43	85909-85917	calculus	
338-44	85918-85921	for	
338-45	85922-85929	backups	
338-46	85929-85930	:	
338-47	85931-85934	How	
338-48	85935-85942	serious	
338-49	85943-85945	is	
338-50	85946-85949	the	
338-51	85950-85957	failure	
338-52	85958-85962	that	
338-53	85963-85966	the	
338-54	85967-85973	safety	
338-55	85974-85980	system	
338-56	85981-85983	is	
338-57	85984-85990	trying	
338-58	85991-85993	to	
338-59	85994-86001	prevent	
338-60	86001-86002	?	
338-61	86003-86007	High	

#Text=How likely is the failure that the safety system is trying to prevent? High How reliable is the safety system? Medium What impact will failure of the safety system have on the overall system? Low The last question is not considering the seriousness of a failed backup on performing it safety goal, but rather how likely is a backup to cause a failure on its own?
339-1	86008-86011	How	
339-2	86012-86018	likely	
339-3	86019-86021	is	
339-4	86022-86025	the	
339-5	86026-86033	failure	
339-6	86034-86038	that	
339-7	86039-86042	the	
339-8	86043-86049	safety	
339-9	86050-86056	system	
339-10	86057-86059	is	
339-11	86060-86066	trying	
339-12	86067-86069	to	
339-13	86070-86077	prevent	
339-14	86077-86078	?	
339-15	86079-86083	High	
339-16	86084-86087	How	
339-17	86088-86096	reliable	
339-18	86097-86099	is	
339-19	86100-86103	the	
339-20	86104-86110	safety	
339-21	86111-86117	system	
339-22	86117-86118	?	
339-23	86119-86125	Medium	
339-24	86126-86130	What	
339-25	86131-86137	impact	
339-26	86138-86142	will	
339-27	86143-86150	failure	
339-28	86151-86153	of	
339-29	86154-86157	the	
339-30	86158-86164	safety	
339-31	86165-86171	system	
339-32	86172-86176	have	
339-33	86177-86179	on	
339-34	86180-86183	the	
339-35	86184-86191	overall	
339-36	86192-86198	system	
339-37	86198-86199	?	
339-38	86200-86203	Low	
339-39	86204-86207	The	
339-40	86208-86212	last	
339-41	86213-86221	question	
339-42	86222-86224	is	
339-43	86225-86228	not	
339-44	86229-86240	considering	
339-45	86241-86244	the	
339-46	86245-86256	seriousness	
339-47	86257-86259	of	
339-48	86260-86261	a	
339-49	86262-86268	failed	
339-50	86269-86275	backup	
339-51	86276-86278	on	
339-52	86279-86289	performing	
339-53	86290-86292	it	
339-54	86293-86299	safety	
339-55	86300-86304	goal	
339-56	86304-86305	,	
339-57	86306-86309	but	
339-58	86310-86316	rather	
339-59	86317-86320	how	
339-60	86321-86327	likely	
339-61	86328-86330	is	
339-62	86331-86332	a	
339-63	86333-86339	backup	
339-64	86340-86342	to	
339-65	86343-86348	cause	
339-66	86349-86350	a	
339-67	86351-86358	failure	
339-68	86359-86361	on	
339-69	86362-86365	its	
339-70	86366-86369	own	
339-71	86369-86370	?	

#Text=It could fill up the disk with backup files, or cause too much load on the system, but those risks are low. Similarly, error reporting has minimal risk on destabilizing the system, except for consuming I/O and storage space. Replication and connection poolers are in a different class of risk.
340-1	86371-86373	It	
340-2	86374-86379	could	
340-3	86380-86384	fill	
340-4	86385-86387	up	
340-5	86388-86391	the	
340-6	86392-86396	disk	
340-7	86397-86401	with	
340-8	86402-86408	backup	
340-9	86409-86414	files	
340-10	86414-86415	,	
340-11	86416-86418	or	
340-12	86419-86424	cause	
340-13	86425-86428	too	
340-14	86429-86433	much	
340-15	86434-86438	load	
340-16	86439-86441	on	
340-17	86442-86445	the	
340-18	86446-86452	system	
340-19	86452-86453	,	
340-20	86454-86457	but	
340-21	86458-86463	those	
340-22	86464-86469	risks	
340-23	86470-86473	are	
340-24	86474-86477	low	
340-25	86477-86478	.	
340-26	86479-86488	Similarly	
340-27	86488-86489	,	
340-28	86490-86495	error	
340-29	86496-86505	reporting	
340-30	86506-86509	has	
340-31	86510-86517	minimal	
340-32	86518-86522	risk	
340-33	86523-86525	on	
340-34	86526-86539	destabilizing	
340-35	86540-86543	the	
340-36	86544-86550	system	
340-37	86550-86551	,	
340-38	86552-86558	except	
340-39	86559-86562	for	
340-40	86563-86572	consuming	
340-41	86573-86574	I	
340-42	86574-86575	/	
340-43	86575-86576	O	
340-44	86577-86580	and	
340-45	86581-86588	storage	
340-46	86589-86594	space	
340-47	86594-86595	.	
340-48	86596-86607	Replication	
340-49	86608-86611	and	
340-50	86612-86622	connection	
340-51	86623-86630	poolers	
340-52	86631-86634	are	
340-53	86635-86637	in	
340-54	86638-86639	a	
340-55	86640-86649	different	
340-56	86650-86655	class	
340-57	86656-86658	of	
340-58	86659-86663	risk	
340-59	86663-86664	.	

#Text=Replication's goal is to allow for controlled switchover or failover in case of primary server failure, but what is its reliability and the impact if it fails? If synchronous replication is used, failure to replicate will cause the system to stop accepting writes. This can be caused by a network failure to the replicas, a replica outage, or even misconfiguration.
341-1	86665-86678	Replication's	
341-2	86679-86683	goal	
341-3	86684-86686	is	
341-4	86687-86689	to	
341-5	86690-86695	allow	
341-6	86696-86699	for	
341-7	86700-86710	controlled	
341-8	86711-86721	switchover	
341-9	86722-86724	or	
341-10	86725-86733	failover	
341-11	86734-86736	in	
341-12	86737-86741	case	
341-13	86742-86744	of	
341-14	86745-86752	primary	
341-15	86753-86759	server	
341-16	86760-86767	failure	
341-17	86767-86768	,	
341-18	86769-86772	but	
341-19	86773-86777	what	
341-20	86778-86780	is	
341-21	86781-86784	its	
341-22	86785-86796	reliability	
341-23	86797-86800	and	
341-24	86801-86804	the	
341-25	86805-86811	impact	
341-26	86812-86814	if	
341-27	86815-86817	it	
341-28	86818-86823	fails	
341-29	86823-86824	?	
341-30	86825-86827	If	
341-31	86828-86839	synchronous	
341-32	86840-86851	replication	
341-33	86852-86854	is	
341-34	86855-86859	used	
341-35	86859-86860	,	
341-36	86861-86868	failure	
341-37	86869-86871	to	
341-38	86872-86881	replicate	
341-39	86882-86886	will	
341-40	86887-86892	cause	
341-41	86893-86896	the	
341-42	86897-86903	system	
341-43	86904-86906	to	
341-44	86907-86911	stop	
341-45	86912-86921	accepting	
341-46	86922-86928	writes	
341-47	86928-86929	.	
341-48	86930-86934	This	
341-49	86935-86938	can	
341-50	86939-86941	be	
341-51	86942-86948	caused	
341-52	86949-86951	by	
341-53	86952-86953	a	
341-54	86954-86961	network	
341-55	86962-86969	failure	
341-56	86970-86972	to	
341-57	86973-86976	the	
341-58	86977-86985	replicas	
341-59	86985-86986	,	
341-60	86987-86988	a	
341-61	86989-86996	replica	
341-62	86997-87003	outage	
341-63	87003-87004	,	
341-64	87005-87007	or	
341-65	87008-87012	even	
341-66	87013-87029	misconfiguration	
341-67	87029-87030	.	

#Text=Even failure of asynchronous replication can cause the write-ahead log directory to fill up storage, causing an outage. Similarly, the failure of a connection pooler can cause a total outage. You can use multiple poolers, but what if the failure of one pooler prevents the other from working, or if they both work and
342-1	87031-87035	Even	
342-2	87036-87043	failure	
342-3	87044-87046	of	
342-4	87047-87059	asynchronous	
342-5	87060-87071	replication	
342-6	87072-87075	can	
342-7	87076-87081	cause	
342-8	87082-87085	the	
342-9	87086-87097	write-ahead	
342-10	87098-87101	log	
342-11	87102-87111	directory	
342-12	87112-87114	to	
342-13	87115-87119	fill	
342-14	87120-87122	up	
342-15	87123-87130	storage	
342-16	87130-87131	,	
342-17	87132-87139	causing	
342-18	87140-87142	an	
342-19	87143-87149	outage	
342-20	87149-87150	.	
342-21	87151-87160	Similarly	
342-22	87160-87161	,	
342-23	87162-87165	the	
342-24	87166-87173	failure	
342-25	87174-87176	of	
342-26	87177-87178	a	
342-27	87179-87189	connection	
342-28	87190-87196	pooler	
342-29	87197-87200	can	
342-30	87201-87206	cause	
342-31	87207-87208	a	
342-32	87209-87214	total	
342-33	87215-87221	outage	
342-34	87221-87222	.	
342-35	87223-87226	You	
342-36	87227-87230	can	
342-37	87231-87234	use	
342-38	87235-87243	multiple	
342-39	87244-87251	poolers	
342-40	87251-87252	,	
342-41	87253-87256	but	
342-42	87257-87261	what	
342-43	87262-87264	if	
342-44	87265-87268	the	
342-45	87269-87276	failure	
342-46	87277-87279	of	
342-47	87280-87283	one	
342-48	87284-87290	pooler	
342-49	87291-87299	prevents	
342-50	87300-87303	the	
342-51	87304-87309	other	
342-52	87310-87314	from	
342-53	87315-87322	working	
342-54	87322-87323	,	
342-55	87324-87326	or	
342-56	87327-87329	if	
342-57	87330-87334	they	
342-58	87335-87339	both	
342-59	87340-87344	work	
342-60	87345-87348	and	

#Text=conflict with each other. Multiple poolers can also add complexity to the system which makes debugging other problems harder. This is a great example where, to avoid the problems of safety system failure, you create two safety systems, but the two safety systems can interact in ways that make two safety systems less reliable than one safety system.
343-1	87349-87357	conflict	
343-2	87358-87362	with	
343-3	87363-87367	each	
343-4	87368-87373	other	
343-5	87373-87374	.	
343-6	87375-87383	Multiple	
343-7	87384-87391	poolers	
343-8	87392-87395	can	
343-9	87396-87400	also	
343-10	87401-87404	add	
343-11	87405-87415	complexity	
343-12	87416-87418	to	
343-13	87419-87422	the	
343-14	87423-87429	system	
343-15	87430-87435	which	
343-16	87436-87441	makes	
343-17	87442-87451	debugging	
343-18	87452-87457	other	
343-19	87458-87466	problems	
343-20	87467-87473	harder	
343-21	87473-87474	.	
343-22	87475-87479	This	
343-23	87480-87482	is	
343-24	87483-87484	a	
343-25	87485-87490	great	
343-26	87491-87498	example	
343-27	87499-87504	where	
343-28	87504-87505	,	
343-29	87506-87508	to	
343-30	87509-87514	avoid	
343-31	87515-87518	the	
343-32	87519-87527	problems	
343-33	87528-87530	of	
343-34	87531-87537	safety	
343-35	87538-87544	system	
343-36	87545-87552	failure	
343-37	87552-87553	,	
343-38	87554-87557	you	
343-39	87558-87564	create	
343-40	87565-87568	two	
343-41	87569-87575	safety	
343-42	87576-87583	systems	
343-43	87583-87584	,	
343-44	87585-87588	but	
343-45	87589-87592	the	
343-46	87593-87596	two	
343-47	87597-87603	safety	
343-48	87604-87611	systems	
343-49	87612-87615	can	
343-50	87616-87624	interact	
343-51	87625-87627	in	
343-52	87628-87632	ways	
343-53	87633-87637	that	
343-54	87638-87642	make	
343-55	87643-87646	two	
343-56	87647-87653	safety	
343-57	87654-87661	systems	
343-58	87662-87666	less	
343-59	87667-87675	reliable	
343-60	87676-87680	than	
343-61	87681-87684	one	
343-62	87685-87691	safety	
343-63	87692-87698	system	
343-64	87698-87699	.	

#Text=Multi-master replication can have similar downsides. Even auto-failover has risks, and auto-failback, even more. The bottom line is that safety systems can be useful, but they can also add complexity which makes systems more fragile and harder to control; consider how safety systems interact and implement them only where their value is clear.
344-1	87700-87712	Multi-master	
344-2	87713-87724	replication	
344-3	87725-87728	can	
344-4	87729-87733	have	
344-5	87734-87741	similar	
344-6	87742-87751	downsides	
344-7	87751-87752	.	
344-8	87753-87757	Even	
344-9	87758-87771	auto-failover	
344-10	87772-87775	has	
344-11	87776-87781	risks	
344-12	87781-87782	,	
344-13	87783-87786	and	
344-14	87787-87800	auto-failback	
344-15	87800-87801	,	
344-16	87802-87806	even	
344-17	87807-87811	more	
344-18	87811-87812	.	
344-19	87813-87816	The	
344-20	87817-87823	bottom	
344-21	87824-87828	line	
344-22	87829-87831	is	
344-23	87832-87836	that	
344-24	87837-87843	safety	
344-25	87844-87851	systems	
344-26	87852-87855	can	
344-27	87856-87858	be	
344-28	87859-87865	useful	
344-29	87865-87866	,	
344-30	87867-87870	but	
344-31	87871-87875	they	
344-32	87876-87879	can	
344-33	87880-87884	also	
344-34	87885-87888	add	
344-35	87889-87899	complexity	
344-36	87900-87905	which	
344-37	87906-87911	makes	
344-38	87912-87919	systems	
344-39	87920-87924	more	
344-40	87925-87932	fragile	
344-41	87933-87936	and	
344-42	87937-87943	harder	
344-43	87944-87946	to	
344-44	87947-87954	control	
344-45	87954-87955	;	
344-46	87956-87964	consider	
344-47	87965-87968	how	
344-48	87969-87975	safety	
344-49	87976-87983	systems	
344-50	87984-87992	interact	
344-51	87993-87996	and	
344-52	87997-88006	implement	
344-53	88007-88011	them	
344-54	88012-88016	only	
344-55	88017-88022	where	
344-56	88023-88028	their	
344-57	88029-88034	value	
344-58	88035-88037	is	
344-59	88038-88043	clear	
344-60	88043-88044	.	

#Text=View or Post Comments When Does a Commit Happen? Wednesday, June 3, 2020 Most people who deal with relational databases think of transaction commits as binary operations — the query is running and not yet committed, then it is completed and committed. However, internally,
345-1	88045-88049	View	
345-2	88050-88052	or	
345-3	88053-88057	Post	
345-4	88058-88066	Comments	
345-5	88067-88071	When	
345-6	88072-88076	Does	
345-7	88077-88078	a	
345-8	88079-88085	Commit	
345-9	88086-88092	Happen	
345-10	88092-88093	?	
345-11	88094-88103	Wednesday	
345-12	88103-88104	,	
345-13	88105-88109	June	
345-14	88110-88111	3	
345-15	88111-88112	,	
345-16	88113-88117	2020	
345-17	88118-88122	Most	
345-18	88123-88129	people	
345-19	88130-88133	who	
345-20	88134-88138	deal	
345-21	88139-88143	with	
345-22	88144-88154	relational	
345-23	88155-88164	databases	
345-24	88165-88170	think	
345-25	88171-88173	of	
345-26	88174-88185	transaction	
345-27	88186-88193	commits	
345-28	88194-88196	as	
345-29	88197-88203	binary	
345-30	88204-88214	operations	
345-31	88215-88216	—	
345-32	88217-88220	the	
345-33	88221-88226	query	
345-34	88227-88229	is	
345-35	88230-88237	running	
345-36	88238-88241	and	
345-37	88242-88245	not	
345-38	88246-88249	yet	
345-39	88250-88259	committed	
345-40	88259-88260	,	
345-41	88261-88265	then	
345-42	88266-88268	it	
345-43	88269-88271	is	
345-44	88272-88281	completed	
345-45	88282-88285	and	
345-46	88286-88295	committed	
345-47	88295-88296	.	
345-48	88297-88304	However	
345-49	88304-88305	,	
345-50	88306-88316	internally	
345-51	88316-88317	,	

#Text=there are many stages to a commit: Write commit record to the write-ahead log Flush the write-ahead log to durable storage Update the pg_xact (slide 57) Transfer to replicas Mark the commit as visible to other sessions (ProcArrayEndTransaction() updates
346-1	88318-88323	there	
346-2	88324-88327	are	
346-3	88328-88332	many	
346-4	88333-88339	stages	
346-5	88340-88342	to	
346-6	88343-88344	a	
346-7	88345-88351	commit	
346-8	88351-88352	:	
346-9	88353-88358	Write	
346-10	88359-88365	commit	
346-11	88366-88372	record	
346-12	88373-88375	to	
346-13	88376-88379	the	
346-14	88380-88391	write-ahead	
346-15	88392-88395	log	
346-16	88396-88401	Flush	
346-17	88402-88405	the	
346-18	88406-88417	write-ahead	
346-19	88418-88421	log	
346-20	88422-88424	to	
346-21	88425-88432	durable	
346-22	88433-88440	storage	
346-23	88441-88447	Update	
346-24	88448-88451	the	
346-25	88452-88459	pg_xact	
346-26	88460-88461	(	
346-27	88461-88466	slide	
346-28	88467-88469	57	
346-29	88469-88470	)	
346-30	88471-88479	Transfer	
346-31	88480-88482	to	
346-32	88483-88491	replicas	
346-33	88492-88496	Mark	
346-34	88497-88500	the	
346-35	88501-88507	commit	
346-36	88508-88510	as	
346-37	88511-88518	visible	
346-38	88519-88521	to	
346-39	88522-88527	other	
346-40	88528-88536	sessions	
346-41	88537-88538	(	
346-42	88538-88561	ProcArrayEndTransaction	
346-43	88561-88562	(	
346-44	88562-88563	)	
346-45	88564-88571	updates	

#Text=PGPROC) Communicate commit to the client These steps are implemented in RecordTransactionCommit(). What is interesting is that this process can be interrupted at anytime, by perhaps a server crash or network failure. For example:
347-1	88572-88578	PGPROC	
347-2	88578-88579	)	
347-3	88580-88591	Communicate	
347-4	88592-88598	commit	
347-5	88599-88601	to	
347-6	88602-88605	the	
347-7	88606-88612	client	
347-8	88613-88618	These	
347-9	88619-88624	steps	
347-10	88625-88628	are	
347-11	88629-88640	implemented	
347-12	88641-88643	in	
347-13	88644-88667	RecordTransactionCommit	
347-14	88667-88668	(	
347-15	88668-88669	)	
347-16	88669-88670	.	
347-17	88671-88675	What	
347-18	88676-88678	is	
347-19	88679-88690	interesting	
347-20	88691-88693	is	
347-21	88694-88698	that	
347-22	88699-88703	this	
347-23	88704-88711	process	
347-24	88712-88715	can	
347-25	88716-88718	be	
347-26	88719-88730	interrupted	
347-27	88731-88733	at	
347-28	88734-88741	anytime	
347-29	88741-88742	,	
347-30	88743-88745	by	
347-31	88746-88753	perhaps	
347-32	88754-88755	a	
347-33	88756-88762	server	
347-34	88763-88768	crash	
347-35	88769-88771	or	
347-36	88772-88779	network	
347-37	88780-88787	failure	
347-38	88787-88788	.	
347-39	88789-88792	For	
347-40	88793-88800	example	
347-41	88800-88801	:	

#Text=The commit could be flushed to disk but not yet visible to other clients The commit could be replicated (and visible to queries on replicas) but not visible to queries on the primary Queries could appear committed to other sessions before the client issuing the query receives notification This email thread explains the problem that commit with standbys is not always an atomic
348-1	88802-88805	The	
348-2	88806-88812	commit	
348-3	88813-88818	could	
348-4	88819-88821	be	
348-5	88822-88829	flushed	
348-6	88830-88832	to	
348-7	88833-88837	disk	
348-8	88838-88841	but	
348-9	88842-88845	not	
348-10	88846-88849	yet	
348-11	88850-88857	visible	
348-12	88858-88860	to	
348-13	88861-88866	other	
348-14	88867-88874	clients	
348-15	88875-88878	The	
348-16	88879-88885	commit	
348-17	88886-88891	could	
348-18	88892-88894	be	
348-19	88895-88905	replicated	
348-20	88906-88907	(	
348-21	88907-88910	and	
348-22	88911-88918	visible	
348-23	88919-88921	to	
348-24	88922-88929	queries	
348-25	88930-88932	on	
348-26	88933-88941	replicas	
348-27	88941-88942	)	
348-28	88943-88946	but	
348-29	88947-88950	not	
348-30	88951-88958	visible	
348-31	88959-88961	to	
348-32	88962-88969	queries	
348-33	88970-88972	on	
348-34	88973-88976	the	
348-35	88977-88984	primary	
348-36	88985-88992	Queries	
348-37	88993-88998	could	
348-38	88999-89005	appear	
348-39	89006-89015	committed	
348-40	89016-89018	to	
348-41	89019-89024	other	
348-42	89025-89033	sessions	
348-43	89034-89040	before	
348-44	89041-89044	the	
348-45	89045-89051	client	
348-46	89052-89059	issuing	
348-47	89060-89063	the	
348-48	89064-89069	query	
348-49	89070-89078	receives	
348-50	89079-89091	notification	
348-51	89092-89096	This	
348-52	89097-89102	email	
348-53	89103-89109	thread	
348-54	89110-89118	explains	
348-55	89119-89122	the	
348-56	89123-89130	problem	
348-57	89131-89135	that	
348-58	89136-89142	commit	
348-59	89143-89147	with	
348-60	89148-89156	standbys	
348-61	89157-89159	is	
348-62	89160-89163	not	
348-63	89164-89170	always	
348-64	89171-89173	an	
348-65	89174-89180	atomic	

#Text=operation. Postgres has the function txid_status() which allows clients to check if a transaction, perhaps from a previous disconnected session, was committed. View or Post Comments Lessons from the Online Conference Trenches Monday, June
349-1	89181-89190	operation	
349-2	89190-89191	.	
349-3	89192-89200	Postgres	
349-4	89201-89204	has	
349-5	89205-89208	the	
349-6	89209-89217	function	
349-7	89218-89229	txid_status	
349-8	89229-89230	(	
349-9	89230-89231	)	
349-10	89232-89237	which	
349-11	89238-89244	allows	
349-12	89245-89252	clients	
349-13	89253-89255	to	
349-14	89256-89261	check	
349-15	89262-89264	if	
349-16	89265-89266	a	
349-17	89267-89278	transaction	
349-18	89278-89279	,	
349-19	89280-89287	perhaps	
349-20	89288-89292	from	
349-21	89293-89294	a	
349-22	89295-89303	previous	
349-23	89304-89316	disconnected	
349-24	89317-89324	session	
349-25	89324-89325	,	
349-26	89326-89329	was	
349-27	89330-89339	committed	
349-28	89339-89340	.	
349-29	89341-89345	View	
349-30	89346-89348	or	
349-31	89349-89353	Post	
349-32	89354-89362	Comments	
349-33	89363-89370	Lessons	
349-34	89371-89375	from	
349-35	89376-89379	the	
349-36	89380-89386	Online	
349-37	89387-89397	Conference	
349-38	89398-89406	Trenches	
349-39	89407-89413	Monday	
349-40	89413-89414	,	
349-41	89415-89419	June	

#Text=1, 2020 Having presented at two online conferences in the past two weeks, presenting at two this coming week, and presenting at many edb-sponsored webinars, I have learned a few things about online presentations that might be helpful for Postgres organizers, speakers, and attendees: For Organizers:
350-1	89420-89421	1	
350-2	89421-89422	,	
350-3	89423-89427	2020	
350-4	89428-89434	Having	
350-5	89435-89444	presented	
350-6	89445-89447	at	
350-7	89448-89451	two	
350-8	89452-89458	online	
350-9	89459-89470	conferences	
350-10	89471-89473	in	
350-11	89474-89477	the	
350-12	89478-89482	past	
350-13	89483-89486	two	
350-14	89487-89492	weeks	
350-15	89492-89493	,	
350-16	89494-89504	presenting	
350-17	89505-89507	at	
350-18	89508-89511	two	
350-19	89512-89516	this	
350-20	89517-89523	coming	
350-21	89524-89528	week	
350-22	89528-89529	,	
350-23	89530-89533	and	
350-24	89534-89544	presenting	
350-25	89545-89547	at	
350-26	89548-89552	many	
350-27	89553-89566	edb-sponsored	
350-28	89567-89575	webinars	
350-29	89575-89576	,	
350-30	89577-89578	I	
350-31	89579-89583	have	
350-32	89584-89591	learned	
350-33	89592-89593	a	
350-34	89594-89597	few	
350-35	89598-89604	things	
350-36	89605-89610	about	
350-37	89611-89617	online	
350-38	89618-89631	presentations	
350-39	89632-89636	that	
350-40	89637-89642	might	
350-41	89643-89645	be	
350-42	89646-89653	helpful	
350-43	89654-89657	for	
350-44	89658-89666	Postgres	
350-45	89667-89677	organizers	
350-46	89677-89678	,	
350-47	89679-89687	speakers	
350-48	89687-89688	,	
350-49	89689-89692	and	
350-50	89693-89702	attendees	
350-51	89702-89703	:	
350-52	89704-89707	For	
350-53	89708-89718	Organizers	
350-54	89718-89719	:	

#Text=With no need for speakers and attendees to travel to online conferences, there are many more potential speakers available, and many more potential attendees than for in-person conferences. However, the technical challenges of hosting an online conference are significant because producing and consuming content can require multiple platforms that must be integrated seamlessly for a positive user experience. The content production platform, e.g. Zoom, is often different than the consumption platform, e.g. YouTube, Facebook Live.
351-1	89720-89724	With	
351-2	89725-89727	no	
351-3	89728-89732	need	
351-4	89733-89736	for	
351-5	89737-89745	speakers	
351-6	89746-89749	and	
351-7	89750-89759	attendees	
351-8	89760-89762	to	
351-9	89763-89769	travel	
351-10	89770-89772	to	
351-11	89773-89779	online	
351-12	89780-89791	conferences	
351-13	89791-89792	,	
351-14	89793-89798	there	
351-15	89799-89802	are	
351-16	89803-89807	many	
351-17	89808-89812	more	
351-18	89813-89822	potential	
351-19	89823-89831	speakers	
351-20	89832-89841	available	
351-21	89841-89842	,	
351-22	89843-89846	and	
351-23	89847-89851	many	
351-24	89852-89856	more	
351-25	89857-89866	potential	
351-26	89867-89876	attendees	
351-27	89877-89881	than	
351-28	89882-89885	for	
351-29	89886-89895	in-person	
351-30	89896-89907	conferences	
351-31	89907-89908	.	
351-32	89909-89916	However	
351-33	89916-89917	,	
351-34	89918-89921	the	
351-35	89922-89931	technical	
351-36	89932-89942	challenges	
351-37	89943-89945	of	
351-38	89946-89953	hosting	
351-39	89954-89956	an	
351-40	89957-89963	online	
351-41	89964-89974	conference	
351-42	89975-89978	are	
351-43	89979-89990	significant	
351-44	89991-89998	because	
351-45	89999-90008	producing	
351-46	90009-90012	and	
351-47	90013-90022	consuming	
351-48	90023-90030	content	
351-49	90031-90034	can	
351-50	90035-90042	require	
351-51	90043-90051	multiple	
351-52	90052-90061	platforms	
351-53	90062-90066	that	
351-54	90067-90071	must	
351-55	90072-90074	be	
351-56	90075-90085	integrated	
351-57	90086-90096	seamlessly	
351-58	90097-90100	for	
351-59	90101-90102	a	
351-60	90103-90111	positive	
351-61	90112-90116	user	
351-62	90117-90127	experience	
351-63	90127-90128	.	
351-64	90129-90132	The	
351-65	90133-90140	content	
351-66	90141-90151	production	
351-67	90152-90160	platform	
351-68	90160-90161	,	
351-69	90162-90165	e.g	
351-70	90165-90166	.	
351-71	90167-90171	Zoom	
351-72	90171-90172	,	
351-73	90173-90175	is	
351-74	90176-90181	often	
351-75	90182-90191	different	
351-76	90192-90196	than	
351-77	90197-90200	the	
351-78	90201-90212	consumption	
351-79	90213-90221	platform	
351-80	90221-90222	,	
351-81	90223-90226	e.g	
351-82	90226-90227	.	
351-83	90228-90235	YouTube	
351-84	90235-90236	,	
351-85	90237-90245	Facebook	
351-86	90246-90250	Live	
351-87	90250-90251	.	

#Text=If the user experience is poor, people will leave because they are not bound to a physical location like an in-person event. Adjusting to the time zones of speakers and attendees can be complex — doing a 24-hour conference like Precona Live (organizer tips) solves many of the time zone problems, but requires moderators from many time zones.
352-1	90252-90254	If	
352-2	90255-90258	the	
352-3	90259-90263	user	
352-4	90264-90274	experience	
352-5	90275-90277	is	
352-6	90278-90282	poor	
352-7	90282-90283	,	
352-8	90284-90290	people	
352-9	90291-90295	will	
352-10	90296-90301	leave	
352-11	90302-90309	because	
352-12	90310-90314	they	
352-13	90315-90318	are	
352-14	90319-90322	not	
352-15	90323-90328	bound	
352-16	90329-90331	to	
352-17	90332-90333	a	
352-18	90334-90342	physical	
352-19	90343-90351	location	
352-20	90352-90356	like	
352-21	90357-90359	an	
352-22	90360-90369	in-person	
352-23	90370-90375	event	
352-24	90375-90376	.	
352-25	90377-90386	Adjusting	
352-26	90387-90389	to	
352-27	90390-90393	the	
352-28	90394-90398	time	
352-29	90399-90404	zones	
352-30	90405-90407	of	
352-31	90408-90416	speakers	
352-32	90417-90420	and	
352-33	90421-90430	attendees	
352-34	90431-90434	can	
352-35	90435-90437	be	
352-36	90438-90445	complex	
352-37	90446-90447	—	
352-38	90448-90453	doing	
352-39	90454-90455	a	
352-40	90456-90458	24	
352-41	90458-90459	-	
352-42	90459-90463	hour	
352-43	90464-90474	conference	
352-44	90475-90479	like	
352-45	90480-90487	Precona	
352-46	90488-90492	Live	
352-47	90493-90494	(	
352-48	90494-90503	organizer	
352-49	90504-90508	tips	
352-50	90508-90509	)	
352-51	90510-90516	solves	
352-52	90517-90521	many	
352-53	90522-90524	of	
352-54	90525-90528	the	
352-55	90529-90533	time	
352-56	90534-90538	zone	
352-57	90539-90547	problems	
352-58	90547-90548	,	
352-59	90549-90552	but	
352-60	90553-90561	requires	
352-61	90562-90572	moderators	
352-62	90573-90577	from	
352-63	90578-90582	many	
352-64	90583-90587	time	
352-65	90588-90593	zones	
352-66	90593-90594	.	

#Text=The moderator's job is much more extensive for online conferences since they control access, deal with technical problems, and manage the all-important chat channel. For online conferences, chat is the best way to promote attendee engagement. If chat is done well, user engagement during presentations can be even better than in-person conferences. For Speakers:
353-1	90595-90598	The	
353-2	90599-90610	moderator's	
353-3	90611-90614	job	
353-4	90615-90617	is	
353-5	90618-90622	much	
353-6	90623-90627	more	
353-7	90628-90637	extensive	
353-8	90638-90641	for	
353-9	90642-90648	online	
353-10	90649-90660	conferences	
353-11	90661-90666	since	
353-12	90667-90671	they	
353-13	90672-90679	control	
353-14	90680-90686	access	
353-15	90686-90687	,	
353-16	90688-90692	deal	
353-17	90693-90697	with	
353-18	90698-90707	technical	
353-19	90708-90716	problems	
353-20	90716-90717	,	
353-21	90718-90721	and	
353-22	90722-90728	manage	
353-23	90729-90732	the	
353-24	90733-90746	all-important	
353-25	90747-90751	chat	
353-26	90752-90759	channel	
353-27	90759-90760	.	
353-28	90761-90764	For	
353-29	90765-90771	online	
353-30	90772-90783	conferences	
353-31	90783-90784	,	
353-32	90785-90789	chat	
353-33	90790-90792	is	
353-34	90793-90796	the	
353-35	90797-90801	best	
353-36	90802-90805	way	
353-37	90806-90808	to	
353-38	90809-90816	promote	
353-39	90817-90825	attendee	
353-40	90826-90836	engagement	
353-41	90836-90837	.	
353-42	90838-90840	If	
353-43	90841-90845	chat	
353-44	90846-90848	is	
353-45	90849-90853	done	
353-46	90854-90858	well	
353-47	90858-90859	,	
353-48	90860-90864	user	
353-49	90865-90875	engagement	
353-50	90876-90882	during	
353-51	90883-90896	presentations	
353-52	90897-90900	can	
353-53	90901-90903	be	
353-54	90904-90908	even	
353-55	90909-90915	better	
353-56	90916-90920	than	
353-57	90921-90930	in-person	
353-58	90931-90942	conferences	
353-59	90942-90943	.	
353-60	90944-90947	For	
353-61	90948-90956	Speakers	
353-62	90956-90957	:	

#Text=Just like for organizers, speakers have more technical challenges than in-person conferences — it is harder to engage the audience, more things can go wrong, and attendees can more easily leave. As a speaker, I have a checklist that I always references before each presentation: Mute phone, chat, email, and upgrade notifications Use a laptop on AC power with wired Ethernet, for reliability Have a count-up clock to keep track of the talk duration
354-1	90958-90962	Just	
354-2	90963-90967	like	
354-3	90968-90971	for	
354-4	90972-90982	organizers	
354-5	90982-90983	,	
354-6	90984-90992	speakers	
354-7	90993-90997	have	
354-8	90998-91002	more	
354-9	91003-91012	technical	
354-10	91013-91023	challenges	
354-11	91024-91028	than	
354-12	91029-91038	in-person	
354-13	91039-91050	conferences	
354-14	91051-91052	—	
354-15	91053-91055	it	
354-16	91056-91058	is	
354-17	91059-91065	harder	
354-18	91066-91068	to	
354-19	91069-91075	engage	
354-20	91076-91079	the	
354-21	91080-91088	audience	
354-22	91088-91089	,	
354-23	91090-91094	more	
354-24	91095-91101	things	
354-25	91102-91105	can	
354-26	91106-91108	go	
354-27	91109-91114	wrong	
354-28	91114-91115	,	
354-29	91116-91119	and	
354-30	91120-91129	attendees	
354-31	91130-91133	can	
354-32	91134-91138	more	
354-33	91139-91145	easily	
354-34	91146-91151	leave	
354-35	91151-91152	.	
354-36	91153-91155	As	
354-37	91156-91157	a	
354-38	91158-91165	speaker	
354-39	91165-91166	,	
354-40	91167-91168	I	
354-41	91169-91173	have	
354-42	91174-91175	a	
354-43	91176-91185	checklist	
354-44	91186-91190	that	
354-45	91191-91192	I	
354-46	91193-91199	always	
354-47	91200-91210	references	
354-48	91211-91217	before	
354-49	91218-91222	each	
354-50	91223-91235	presentation	
354-51	91235-91236	:	
354-52	91237-91241	Mute	
354-53	91242-91247	phone	
354-54	91247-91248	,	
354-55	91249-91253	chat	
354-56	91253-91254	,	
354-57	91255-91260	email	
354-58	91260-91261	,	
354-59	91262-91265	and	
354-60	91266-91273	upgrade	
354-61	91274-91287	notifications	
354-62	91288-91291	Use	
354-63	91292-91293	a	
354-64	91294-91300	laptop	
354-65	91301-91303	on	
354-66	91304-91306	AC	
354-67	91307-91312	power	
354-68	91313-91317	with	
354-69	91318-91323	wired	
354-70	91324-91332	Ethernet	
354-71	91332-91333	,	
354-72	91334-91337	for	
354-73	91338-91349	reliability	
354-74	91350-91354	Have	
354-75	91355-91356	a	
354-76	91357-91365	count-up	
354-77	91366-91371	clock	
354-78	91372-91374	to	
354-79	91375-91379	keep	
354-80	91380-91385	track	
354-81	91386-91388	of	
354-82	91389-91392	the	
354-83	91393-91397	talk	
354-84	91398-91406	duration	

#Text=Use a headset so you don't lean toward a microphone Use a presentation remote so you don't lean forward to change slides Turn on your video camera to increase audience engagement Make sure the lighting is good and the background is uncluttered For attendees:
355-1	91407-91410	Use	
355-2	91411-91412	a	
355-3	91413-91420	headset	
355-4	91421-91423	so	
355-5	91424-91427	you	
355-6	91428-91433	don't	
355-7	91434-91438	lean	
355-8	91439-91445	toward	
355-9	91446-91447	a	
355-10	91448-91458	microphone	
355-11	91459-91462	Use	
355-12	91463-91464	a	
355-13	91465-91477	presentation	
355-14	91478-91484	remote	
355-15	91485-91487	so	
355-16	91488-91491	you	
355-17	91492-91497	don't	
355-18	91498-91502	lean	
355-19	91503-91510	forward	
355-20	91511-91513	to	
355-21	91514-91520	change	
355-22	91521-91527	slides	
355-23	91528-91532	Turn	
355-24	91533-91535	on	
355-25	91536-91540	your	
355-26	91541-91546	video	
355-27	91547-91553	camera	
355-28	91554-91556	to	
355-29	91557-91565	increase	
355-30	91566-91574	audience	
355-31	91575-91585	engagement	
355-32	91586-91590	Make	
355-33	91591-91595	sure	
355-34	91596-91599	the	
355-35	91600-91608	lighting	
355-36	91609-91611	is	
355-37	91612-91616	good	
355-38	91617-91620	and	
355-39	91621-91624	the	
355-40	91625-91635	background	
355-41	91636-91638	is	
355-42	91639-91650	uncluttered	
355-43	91651-91654	For	
355-44	91655-91664	attendees	
355-45	91664-91665	:	

#Text=Many online conferences are a mix of different technologies, not always seamlessly integrated, so anticipate that it will take time to get initially connected. Consider watching the conference on a large television, or from a tablet you can carry around. Use chat to engage with the speaker and other attendees. Feel free to switch to a more interesting presentation without guilt. When you get frustrated, consider how much time you are saving by not having to travel.
356-1	91666-91670	Many	
356-2	91671-91677	online	
356-3	91678-91689	conferences	
356-4	91690-91693	are	
356-5	91694-91695	a	
356-6	91696-91699	mix	
356-7	91700-91702	of	
356-8	91703-91712	different	
356-9	91713-91725	technologies	
356-10	91725-91726	,	
356-11	91727-91730	not	
356-12	91731-91737	always	
356-13	91738-91748	seamlessly	
356-14	91749-91759	integrated	
356-15	91759-91760	,	
356-16	91761-91763	so	
356-17	91764-91774	anticipate	
356-18	91775-91779	that	
356-19	91780-91782	it	
356-20	91783-91787	will	
356-21	91788-91792	take	
356-22	91793-91797	time	
356-23	91798-91800	to	
356-24	91801-91804	get	
356-25	91805-91814	initially	
356-26	91815-91824	connected	
356-27	91824-91825	.	
356-28	91826-91834	Consider	
356-29	91835-91843	watching	
356-30	91844-91847	the	
356-31	91848-91858	conference	
356-32	91859-91861	on	
356-33	91862-91863	a	
356-34	91864-91869	large	
356-35	91870-91880	television	
356-36	91880-91881	,	
356-37	91882-91884	or	
356-38	91885-91889	from	
356-39	91890-91891	a	
356-40	91892-91898	tablet	
356-41	91899-91902	you	
356-42	91903-91906	can	
356-43	91907-91912	carry	
356-44	91913-91919	around	
356-45	91919-91920	.	
356-46	91921-91924	Use	
356-47	91925-91929	chat	
356-48	91930-91932	to	
356-49	91933-91939	engage	
356-50	91940-91944	with	
356-51	91945-91948	the	
356-52	91949-91956	speaker	
356-53	91957-91960	and	
356-54	91961-91966	other	
356-55	91967-91976	attendees	
356-56	91976-91977	.	
356-57	91978-91982	Feel	
356-58	91983-91987	free	
356-59	91988-91990	to	
356-60	91991-91997	switch	
356-61	91998-92000	to	
356-62	92001-92002	a	
356-63	92003-92007	more	
356-64	92008-92019	interesting	
356-65	92020-92032	presentation	
356-66	92033-92040	without	
356-67	92041-92046	guilt	
356-68	92046-92047	.	
356-69	92048-92052	When	
356-70	92053-92056	you	
356-71	92057-92060	get	
356-72	92061-92071	frustrated	
356-73	92071-92072	,	
356-74	92073-92081	consider	
356-75	92082-92085	how	
356-76	92086-92090	much	
356-77	92091-92095	time	
356-78	92096-92099	you	
356-79	92100-92103	are	
356-80	92104-92110	saving	
356-81	92111-92113	by	
356-82	92114-92117	not	
356-83	92118-92124	having	
356-84	92125-92127	to	
356-85	92128-92134	travel	
356-86	92134-92135	.	

#Text=View or Post Comments Visualizing Collations Friday, May 29, 2020 There is still significant confusion about characters sets, encodings, and collations. This is because in the real, non-digital world, we
357-1	92136-92140	View	
357-2	92141-92143	or	
357-3	92144-92148	Post	
357-4	92149-92157	Comments	
357-5	92158-92169	Visualizing	
357-6	92170-92180	Collations	
357-7	92181-92187	Friday	
357-8	92187-92188	,	
357-9	92189-92192	May	
357-10	92193-92195	29	
357-11	92195-92196	,	
357-12	92197-92201	2020	
357-13	92202-92207	There	
357-14	92208-92210	is	
357-15	92211-92216	still	
357-16	92217-92228	significant	
357-17	92229-92238	confusion	
357-18	92239-92244	about	
357-19	92245-92255	characters	
357-20	92256-92260	sets	
357-21	92260-92261	,	
357-22	92262-92271	encodings	
357-23	92271-92272	,	
357-24	92273-92276	and	
357-25	92277-92287	collations	
357-26	92287-92288	.	
357-27	92289-92293	This	
357-28	92294-92296	is	
357-29	92297-92304	because	
357-30	92305-92307	in	
357-31	92308-92311	the	
357-32	92312-92316	real	
357-33	92316-92317	,	
357-34	92318-92329	non-digital	
357-35	92330-92335	world	
357-36	92335-92336	,	
357-37	92337-92339	we	

#Text=usually treat languages, their characters, and ordering as unified, but in the digital world, they are treated separately, and their distinction can be hard to visualize. These two posted queries illustrate collation in a very creative way. The first query, SELECT chr(i) FROM generate_series(1, 50000) i ORDER BY chr(i) COLLATE "C", outputs characters in their "C" binary order, with ascii as the first 128 characters, successive groups of languages
358-1	92340-92347	usually	
358-2	92348-92353	treat	
358-3	92354-92363	languages	
358-4	92363-92364	,	
358-5	92365-92370	their	
358-6	92371-92381	characters	
358-7	92381-92382	,	
358-8	92383-92386	and	
358-9	92387-92395	ordering	
358-10	92396-92398	as	
358-11	92399-92406	unified	
358-12	92406-92407	,	
358-13	92408-92411	but	
358-14	92412-92414	in	
358-15	92415-92418	the	
358-16	92419-92426	digital	
358-17	92427-92432	world	
358-18	92432-92433	,	
358-19	92434-92438	they	
358-20	92439-92442	are	
358-21	92443-92450	treated	
358-22	92451-92461	separately	
358-23	92461-92462	,	
358-24	92463-92466	and	
358-25	92467-92472	their	
358-26	92473-92484	distinction	
358-27	92485-92488	can	
358-28	92489-92491	be	
358-29	92492-92496	hard	
358-30	92497-92499	to	
358-31	92500-92509	visualize	
358-32	92509-92510	.	
358-33	92511-92516	These	
358-34	92517-92520	two	
358-35	92521-92527	posted	
358-36	92528-92535	queries	
358-37	92536-92546	illustrate	
358-38	92547-92556	collation	
358-39	92557-92559	in	
358-40	92560-92561	a	
358-41	92562-92566	very	
358-42	92567-92575	creative	
358-43	92576-92579	way	
358-44	92579-92580	.	
358-45	92581-92584	The	
358-46	92585-92590	first	
358-47	92591-92596	query	
358-48	92596-92597	,	
358-49	92598-92604	SELECT	
358-50	92605-92608	chr	
358-51	92608-92609	(	
358-52	92609-92610	i	
358-53	92610-92611	)	
358-54	92612-92616	FROM	
358-55	92617-92632	generate_series	
358-56	92632-92633	(	
358-57	92633-92634	1	
358-58	92634-92635	,	
358-59	92636-92641	50000	
358-60	92641-92642	)	
358-61	92643-92644	i	
358-62	92645-92650	ORDER	
358-63	92651-92653	BY	
358-64	92654-92657	chr	
358-65	92657-92658	(	
358-66	92658-92659	i	
358-67	92659-92660	)	
358-68	92661-92668	COLLATE	
358-69	92669-92670	"	
358-70	92670-92671	C	
358-71	92671-92672	"	
358-72	92672-92673	,	
358-73	92674-92681	outputs	
358-74	92682-92692	characters	
358-75	92693-92695	in	
358-76	92696-92701	their	
358-77	92702-92703	"	
358-78	92703-92704	C	
358-79	92704-92705	"	
358-80	92706-92712	binary	
358-81	92713-92718	order	
358-82	92718-92719	,	
358-83	92720-92724	with	
358-84	92725-92730	ascii	
358-85	92731-92733	as	
358-86	92734-92737	the	
358-87	92738-92743	first	
358-88	92744-92747	128	
358-89	92748-92758	characters	
358-90	92758-92759	,	
358-91	92760-92770	successive	
358-92	92771-92777	groups	
358-93	92778-92780	of	
358-94	92781-92790	languages	

#Text=following, and ending with pictographic languages. The second query, SELECT chr(i) FROM generate_series(1, 50000) i ORDER BY chr(i) COLLATE "en_US.utf8", outputs the same 50,000 characters in "United States English" utf8 order.
359-1	92791-92800	following	
359-2	92800-92801	,	
359-3	92802-92805	and	
359-4	92806-92812	ending	
359-5	92813-92817	with	
359-6	92818-92830	pictographic	
359-7	92831-92840	languages	
359-8	92840-92841	.	
359-9	92842-92845	The	
359-10	92846-92852	second	
359-11	92853-92858	query	
359-12	92858-92859	,	
359-13	92860-92866	SELECT	
359-14	92867-92870	chr	
359-15	92870-92871	(	
359-16	92871-92872	i	
359-17	92872-92873	)	
359-18	92874-92878	FROM	
359-19	92879-92894	generate_series	
359-20	92894-92895	(	
359-21	92895-92896	1	
359-22	92896-92897	,	
359-23	92898-92903	50000	
359-24	92903-92904	)	
359-25	92905-92906	i	
359-26	92907-92912	ORDER	
359-27	92913-92915	BY	
359-28	92916-92919	chr	
359-29	92919-92920	(	
359-30	92920-92921	i	
359-31	92921-92922	)	
359-32	92923-92930	COLLATE	
359-33	92931-92932	"	
359-34	92932-92942	en_US.utf8	
359-35	92942-92943	"	
359-36	92943-92944	,	
359-37	92945-92952	outputs	
359-38	92953-92956	the	
359-39	92957-92961	same	
359-40	92962-92968	50,000	
359-41	92969-92979	characters	
359-42	92980-92982	in	
359-43	92983-92984	"	
359-44	92984-92990	United	
359-45	92991-92997	States	
359-46	92998-93005	English	
359-47	93005-93006	"	
359-48	93007-93011	utf8	
359-49	93012-93017	order	
359-50	93017-93018	.	

#Text=The output starts with pictographic languages, not ascii. The Latin alphabet appears, but not until line 19068. What is interesting is that there are 118 symbols grouped together that look like 'a', 'a' with diacritics, or have 'a' as part of their symbol.
360-1	93019-93022	The	
360-2	93023-93029	output	
360-3	93030-93036	starts	
360-4	93037-93041	with	
360-5	93042-93054	pictographic	
360-6	93055-93064	languages	
360-7	93064-93065	,	
360-8	93066-93069	not	
360-9	93070-93075	ascii	
360-10	93075-93076	.	
360-11	93077-93080	The	
360-12	93081-93086	Latin	
360-13	93087-93095	alphabet	
360-14	93096-93103	appears	
360-15	93103-93104	,	
360-16	93105-93108	but	
360-17	93109-93112	not	
360-18	93113-93118	until	
360-19	93119-93123	line	
360-20	93124-93129	19068	
360-21	93129-93130	.	
360-22	93131-93135	What	
360-23	93136-93138	is	
360-24	93139-93150	interesting	
360-25	93151-93153	is	
360-26	93154-93158	that	
360-27	93159-93164	there	
360-28	93165-93168	are	
360-29	93169-93172	118	
360-30	93173-93180	symbols	
360-31	93181-93188	grouped	
360-32	93189-93197	together	
360-33	93198-93202	that	
360-34	93203-93207	look	
360-35	93208-93212	like	
360-36	93213-93214	'	
360-37	93214-93215	a	
360-38	93215-93216	'	
360-39	93216-93217	,	
360-40	93218-93219	'	
360-41	93219-93220	a	
360-42	93220-93221	'	
360-43	93222-93226	with	
360-44	93227-93237	diacritics	
360-45	93237-93238	,	
360-46	93239-93241	or	
360-47	93242-93246	have	
360-48	93247-93248	'	
360-49	93248-93249	a	
360-50	93249-93250	'	
360-51	93251-93253	as	
360-52	93254-93258	part	
360-53	93259-93261	of	
360-54	93262-93267	their	
360-55	93268-93274	symbol	
360-56	93274-93275	.	

#Text=Then 'b' appears with a group of 38 symbols that look like or use 'b', and so on through the Latin alphabet. (If you highlight a character and paste it into a search box, Google will tell you about that Unicode symbol.) I found it interesting that it groups letters that look like Latin letters, even if the they are not from Latin alphabets and don't sound like Latin letters.
361-1	93276-93280	Then	
361-2	93281-93282	'	
361-3	93282-93283	b	
361-4	93283-93284	'	
361-5	93285-93292	appears	
361-6	93293-93297	with	
361-7	93298-93299	a	
361-8	93300-93305	group	
361-9	93306-93308	of	
361-10	93309-93311	38	
361-11	93312-93319	symbols	
361-12	93320-93324	that	
361-13	93325-93329	look	
361-14	93330-93334	like	
361-15	93335-93337	or	
361-16	93338-93341	use	
361-17	93342-93343	'	
361-18	93343-93344	b	
361-19	93344-93345	'	
361-20	93345-93346	,	
361-21	93347-93350	and	
361-22	93351-93353	so	
361-23	93354-93356	on	
361-24	93357-93364	through	
361-25	93365-93368	the	
361-26	93369-93374	Latin	
361-27	93375-93383	alphabet	
361-28	93383-93384	.	
361-29	93385-93386	(	
361-30	93386-93388	If	
361-31	93389-93392	you	
361-32	93393-93402	highlight	
361-33	93403-93404	a	
361-34	93405-93414	character	
361-35	93415-93418	and	
361-36	93419-93424	paste	
361-37	93425-93427	it	
361-38	93428-93432	into	
361-39	93433-93434	a	
361-40	93435-93441	search	
361-41	93442-93445	box	
361-42	93445-93446	,	
361-43	93447-93453	Google	
361-44	93454-93458	will	
361-45	93459-93463	tell	
361-46	93464-93467	you	
361-47	93468-93473	about	
361-48	93474-93478	that	
361-49	93479-93486	Unicode	
361-50	93487-93493	symbol	
361-51	93493-93494	.	
361-52	93494-93495	)	
361-53	93496-93497	I	
361-54	93498-93503	found	
361-55	93504-93506	it	
361-56	93507-93518	interesting	
361-57	93519-93523	that	
361-58	93524-93526	it	
361-59	93527-93533	groups	
361-60	93534-93541	letters	
361-61	93542-93546	that	
361-62	93547-93551	look	
361-63	93552-93556	like	
361-64	93557-93562	Latin	
361-65	93563-93570	letters	
361-66	93570-93571	,	
361-67	93572-93576	even	
361-68	93577-93579	if	
361-69	93580-93583	the	
361-70	93584-93588	they	
361-71	93589-93592	are	
361-72	93593-93596	not	
361-73	93597-93601	from	
361-74	93602-93607	Latin	
361-75	93608-93617	alphabets	
361-76	93618-93621	and	
361-77	93622-93627	don't	
361-78	93628-93633	sound	
361-79	93634-93638	like	
361-80	93639-93644	Latin	
361-81	93645-93652	letters	
361-82	93652-93653	.	

#Text=Cyrillic is grouped in a section after the Latin alphabet section. These sql queries are the clearest example I have seen of collation ordering. If I had used a different collation, instead of "United States English", there would have been a different ordering. This is why index storage is sensitive to collations, i.e., indexes with different
362-1	93654-93662	Cyrillic	
362-2	93663-93665	is	
362-3	93666-93673	grouped	
362-4	93674-93676	in	
362-5	93677-93678	a	
362-6	93679-93686	section	
362-7	93687-93692	after	
362-8	93693-93696	the	
362-9	93697-93702	Latin	
362-10	93703-93711	alphabet	
362-11	93712-93719	section	
362-12	93719-93720	.	
362-13	93721-93726	These	
362-14	93727-93730	sql	
362-15	93731-93738	queries	
362-16	93739-93742	are	
362-17	93743-93746	the	
362-18	93747-93755	clearest	
362-19	93756-93763	example	
362-20	93764-93765	I	
362-21	93766-93770	have	
362-22	93771-93775	seen	
362-23	93776-93778	of	
362-24	93779-93788	collation	
362-25	93789-93797	ordering	
362-26	93797-93798	.	
362-27	93799-93801	If	
362-28	93802-93803	I	
362-29	93804-93807	had	
362-30	93808-93812	used	
362-31	93813-93814	a	
362-32	93815-93824	different	
362-33	93825-93834	collation	
362-34	93834-93835	,	
362-35	93836-93843	instead	
362-36	93844-93846	of	
362-37	93847-93848	"	
362-38	93848-93854	United	
362-39	93855-93861	States	
362-40	93862-93869	English	
362-41	93869-93870	"	
362-42	93870-93871	,	
362-43	93872-93877	there	
362-44	93878-93883	would	
362-45	93884-93888	have	
362-46	93889-93893	been	
362-47	93894-93895	a	
362-48	93896-93905	different	
362-49	93906-93914	ordering	
362-50	93914-93915	.	
362-51	93916-93920	This	
362-52	93921-93923	is	
362-53	93924-93927	why	
362-54	93928-93933	index	
362-55	93934-93941	storage	
362-56	93942-93944	is	
362-57	93945-93954	sensitive	
362-58	93955-93957	to	
362-59	93958-93968	collations	
362-60	93968-93969	,	
362-61	93970-93973	i.e	
362-62	93973-93974	.	
362-63	93974-93975	,	
362-64	93976-93983	indexes	
362-65	93984-93988	with	
362-66	93989-93998	different	

#Text=collations store the same stings in a different order. Collation affects other things like upper/lower case processing, the ordering of query output, and certain optimizations. View or Post Comments What is an Lsn? Wednesday, May 27, 2020 You might have seen that there is a pg_lsn data type:
363-1	93999-94009	collations	
363-2	94010-94015	store	
363-3	94016-94019	the	
363-4	94020-94024	same	
363-5	94025-94031	stings	
363-6	94032-94034	in	
363-7	94035-94036	a	
363-8	94037-94046	different	
363-9	94047-94052	order	
363-10	94052-94053	.	
363-11	94054-94063	Collation	
363-12	94064-94071	affects	
363-13	94072-94077	other	
363-14	94078-94084	things	
363-15	94085-94089	like	
363-16	94090-94095	upper	
363-17	94095-94096	/	
363-18	94096-94101	lower	
363-19	94102-94106	case	
363-20	94107-94117	processing	
363-21	94117-94118	,	
363-22	94119-94122	the	
363-23	94123-94131	ordering	
363-24	94132-94134	of	
363-25	94135-94140	query	
363-26	94141-94147	output	
363-27	94147-94148	,	
363-28	94149-94152	and	
363-29	94153-94160	certain	
363-30	94161-94174	optimizations	
363-31	94174-94175	.	
363-32	94176-94180	View	
363-33	94181-94183	or	
363-34	94184-94188	Post	
363-35	94189-94197	Comments	
363-36	94198-94202	What	
363-37	94203-94205	is	
363-38	94206-94208	an	
363-39	94209-94212	Lsn	
363-40	94212-94213	?	
363-41	94214-94223	Wednesday	
363-42	94223-94224	,	
363-43	94225-94228	May	
363-44	94229-94231	27	
363-45	94231-94232	,	
363-46	94233-94237	2020	
363-47	94238-94241	You	
363-48	94242-94247	might	
363-49	94248-94252	have	
363-50	94253-94257	seen	
363-51	94258-94262	that	
363-52	94263-94268	there	
363-53	94269-94271	is	
363-54	94272-94273	a	
363-55	94274-94280	pg_lsn	
363-56	94281-94285	data	
363-57	94286-94290	type	
363-58	94290-94291	:	

#Text=test=> \\dTS pg_lsn List of data types Schema Name Description ------------+--------+-------------------------
364-1	94292-94296	test	
364-2	94296-94297	=	
364-3	94297-94298	>	
364-4	94299-94300	\	
364-5	94300-94303	dTS	
364-6	94304-94310	pg_lsn	
364-7	94311-94315	List	
364-8	94316-94318	of	
364-9	94319-94323	data	
364-10	94324-94329	types	
364-11	94330-94336	Schema	
364-12	94337-94341	Name	
364-13	94342-94353	Description	
364-14	94354-94355	-	
364-15	94355-94356	-	
364-16	94356-94357	-	
364-17	94357-94358	-	
364-18	94358-94359	-	
364-19	94359-94360	-	
364-20	94360-94361	-	
364-21	94361-94362	-	
364-22	94362-94363	-	
364-23	94363-94364	-	
364-24	94364-94365	-	
364-25	94365-94366	-	
364-26	94366-94367	+	
364-27	94367-94368	-	
364-28	94368-94369	-	
364-29	94369-94370	-	
364-30	94370-94371	-	
364-31	94371-94372	-	
364-32	94372-94373	-	
364-33	94373-94374	-	
364-34	94374-94375	-	
364-35	94375-94376	+	
364-36	94376-94377	-	
364-37	94377-94378	-	
364-38	94378-94379	-	
364-39	94379-94380	-	
364-40	94380-94381	-	
364-41	94381-94382	-	
364-42	94382-94383	-	
364-43	94383-94384	-	
364-44	94384-94385	-	
364-45	94385-94386	-	
364-46	94386-94387	-	
364-47	94387-94388	-	
364-48	94388-94389	-	
364-49	94389-94390	-	
364-50	94390-94391	-	
364-51	94391-94392	-	
364-52	94392-94393	-	
364-53	94393-94394	-	
364-54	94394-94395	-	
364-55	94395-94396	-	
364-56	94396-94397	-	
364-57	94397-94398	-	
364-58	94398-94399	-	
364-59	94399-94400	-	
364-60	94400-94401	-	

#Text=pg_catalog | pg_lsn | PostgreSQL LSN datatype Client programs pg_receivewal and pg_recvlogical have options that take lsn values, but what is an lsn? It stands for "Log Sequence Number" — it is a 64-bit value that represents a position in the write-ahead
365-1	94402-94412	pg_catalog	
365-2	94413-94414	|	
365-3	94415-94421	pg_lsn	
365-4	94422-94423	|	
365-5	94424-94434	PostgreSQL	
365-6	94435-94438	LSN	
365-7	94439-94447	datatype	
365-8	94448-94454	Client	
365-9	94455-94463	programs	
365-10	94464-94477	pg_receivewal	
365-11	94478-94481	and	
365-12	94482-94496	pg_recvlogical	
365-13	94497-94501	have	
365-14	94502-94509	options	
365-15	94510-94514	that	
365-16	94515-94519	take	
365-17	94520-94523	lsn	
365-18	94524-94530	values	
365-19	94530-94531	,	
365-20	94532-94535	but	
365-21	94536-94540	what	
365-22	94541-94543	is	
365-23	94544-94546	an	
365-24	94547-94550	lsn	
365-25	94550-94551	?	
365-26	94552-94554	It	
365-27	94555-94561	stands	
365-28	94562-94565	for	
365-29	94566-94567	"	
365-30	94567-94570	Log	
365-31	94571-94579	Sequence	
365-32	94580-94586	Number	
365-33	94586-94587	"	
365-34	94588-94589	—	
365-35	94590-94592	it	
365-36	94593-94595	is	
365-37	94596-94597	a	
365-38	94598-94600	64	
365-39	94600-94601	-	
365-40	94601-94604	bit	
365-41	94605-94610	value	
365-42	94611-94615	that	
365-43	94616-94626	represents	
365-44	94627-94628	a	
365-45	94629-94637	position	
365-46	94638-94640	in	
365-47	94641-94644	the	
365-48	94645-94656	write-ahead	

#Text=log. It is usually displayed as two 32-bit hex values, separated by a slash. For example, pg_controldata displays lsn values: $ pg_controldata Latest checkpoint location: 0/15AE1B8
366-1	94657-94660	log	
366-2	94660-94661	.	
366-3	94662-94664	It	
366-4	94665-94667	is	
366-5	94668-94675	usually	
366-6	94676-94685	displayed	
366-7	94686-94688	as	
366-8	94689-94692	two	
366-9	94693-94695	32	
366-10	94695-94696	-	
366-11	94696-94699	bit	
366-12	94700-94703	hex	
366-13	94704-94710	values	
366-14	94710-94711	,	
366-15	94712-94721	separated	
366-16	94722-94724	by	
366-17	94725-94726	a	
366-18	94727-94732	slash	
366-19	94732-94733	.	
366-20	94734-94737	For	
366-21	94738-94745	example	
366-22	94745-94746	,	
366-23	94747-94761	pg_controldata	
366-24	94762-94770	displays	
366-25	94771-94774	lsn	
366-26	94775-94781	values	
366-27	94781-94782	:	
366-28	94783-94784	$	
366-29	94785-94799	pg_controldata	
366-30	94800-94806	Latest	
366-31	94807-94817	checkpoint	
366-32	94818-94826	location	
366-33	94826-94827	:	
366-34	94828-94829	0	
366-35	94829-94830	/	
366-36	94830-94837	15AE1B8	

#Text=Latest checkpoint's REDO location: 0/15AE180 So, the next time you view or need to specify a write-ahead log location, you are using an lsn. View or Post Comments Taking Snapshots of Clusters Which Use Tablespaces
367-1	94838-94844	Latest	
367-2	94845-94857	checkpoint's	
367-3	94858-94862	REDO	
367-4	94863-94871	location	
367-5	94871-94872	:	
367-6	94873-94874	0	
367-7	94874-94875	/	
367-8	94875-94882	15AE180	
367-9	94883-94885	So	
367-10	94885-94886	,	
367-11	94887-94890	the	
367-12	94891-94895	next	
367-13	94896-94900	time	
367-14	94901-94904	you	
367-15	94905-94909	view	
367-16	94910-94912	or	
367-17	94913-94917	need	
367-18	94918-94920	to	
367-19	94921-94928	specify	
367-20	94929-94930	a	
367-21	94931-94942	write-ahead	
367-22	94943-94946	log	
367-23	94947-94955	location	
367-24	94955-94956	,	
367-25	94957-94960	you	
367-26	94961-94964	are	
367-27	94965-94970	using	
367-28	94971-94973	an	
367-29	94974-94977	lsn	
367-30	94977-94978	.	
367-31	94979-94983	View	
367-32	94984-94986	or	
367-33	94987-94991	Post	
367-34	94992-95000	Comments	
367-35	95001-95007	Taking	
367-36	95008-95017	Snapshots	
367-37	95018-95020	of	
367-38	95021-95029	Clusters	
367-39	95030-95035	Which	
367-40	95036-95039	Use	
367-41	95040-95051	Tablespaces	

#Text=Monday, May 25, 2020 Postgres already documents the ability to backup the database cluster using file system snapshots. Unfortunately, database clusters that use tablespaces often cannot use this method if the storage system doesn't support simultaneous snapshots across file systems.
368-1	95052-95058	Monday	
368-2	95058-95059	,	
368-3	95060-95063	May	
368-4	95064-95066	25	
368-5	95066-95067	,	
368-6	95068-95072	2020	
368-7	95073-95081	Postgres	
368-8	95082-95089	already	
368-9	95090-95099	documents	
368-10	95100-95103	the	
368-11	95104-95111	ability	
368-12	95112-95114	to	
368-13	95115-95121	backup	
368-14	95122-95125	the	
368-15	95126-95134	database	
368-16	95135-95142	cluster	
368-17	95143-95148	using	
368-18	95149-95153	file	
368-19	95154-95160	system	
368-20	95161-95170	snapshots	
368-21	95170-95171	.	
368-22	95172-95185	Unfortunately	
368-23	95185-95186	,	
368-24	95187-95195	database	
368-25	95196-95204	clusters	
368-26	95205-95209	that	
368-27	95210-95213	use	
368-28	95214-95225	tablespaces	
368-29	95226-95231	often	
368-30	95232-95238	cannot	
368-31	95239-95242	use	
368-32	95243-95247	this	
368-33	95248-95254	method	
368-34	95255-95257	if	
368-35	95258-95261	the	
368-36	95262-95269	storage	
368-37	95270-95276	system	
368-38	95277-95284	doesn't	
368-39	95285-95292	support	
368-40	95293-95305	simultaneous	
368-41	95306-95315	snapshots	
368-42	95316-95322	across	
368-43	95323-95327	file	
368-44	95328-95335	systems	
368-45	95335-95336	.	

#Text=However, simultaneous snapshots across file systems might not be a hard requirement for Postgres snapshot backups. It might be possible for snapshots to be non-simultaneous as long as the write-ahead log that spans the time frame between snapshots is included in the backup, and checkpoints do not happen during that time frame.
369-1	95337-95344	However	
369-2	95344-95345	,	
369-3	95346-95358	simultaneous	
369-4	95359-95368	snapshots	
369-5	95369-95375	across	
369-6	95376-95380	file	
369-7	95381-95388	systems	
369-8	95389-95394	might	
369-9	95395-95398	not	
369-10	95399-95401	be	
369-11	95402-95403	a	
369-12	95404-95408	hard	
369-13	95409-95420	requirement	
369-14	95421-95424	for	
369-15	95425-95433	Postgres	
369-16	95434-95442	snapshot	
369-17	95443-95450	backups	
369-18	95450-95451	.	
369-19	95452-95454	It	
369-20	95455-95460	might	
369-21	95461-95463	be	
369-22	95464-95472	possible	
369-23	95473-95476	for	
369-24	95477-95486	snapshots	
369-25	95487-95489	to	
369-26	95490-95492	be	
369-27	95493-95509	non-simultaneous	
369-28	95510-95512	as	
369-29	95513-95517	long	
369-30	95518-95520	as	
369-31	95521-95524	the	
369-32	95525-95536	write-ahead	
369-33	95537-95540	log	
369-34	95541-95545	that	
369-35	95546-95551	spans	
369-36	95552-95555	the	
369-37	95556-95560	time	
369-38	95561-95566	frame	
369-39	95567-95574	between	
369-40	95575-95584	snapshots	
369-41	95585-95587	is	
369-42	95588-95596	included	
369-43	95597-95599	in	
369-44	95600-95603	the	
369-45	95604-95610	backup	
369-46	95610-95611	,	
369-47	95612-95615	and	
369-48	95616-95627	checkpoints	
369-49	95628-95630	do	
369-50	95631-95634	not	
369-51	95635-95641	happen	
369-52	95642-95648	during	
369-53	95649-95653	that	
369-54	95654-95658	time	
369-55	95659-95664	frame	
369-56	95664-95665	.	

#Text=Internally, starting Postgres from a snapshot backup replays write-ahead log records to make a single file system snapshot consistent. Potentially, it could do the same for non-simultaneous snapshots of multiple file systems. However, documenting this, giving users a reliable list of steps to perform, and making sure it always works is probably too complex to justify. View or Post Comments
370-1	95666-95676	Internally	
370-2	95676-95677	,	
370-3	95678-95686	starting	
370-4	95687-95695	Postgres	
370-5	95696-95700	from	
370-6	95701-95702	a	
370-7	95703-95711	snapshot	
370-8	95712-95718	backup	
370-9	95719-95726	replays	
370-10	95727-95738	write-ahead	
370-11	95739-95742	log	
370-12	95743-95750	records	
370-13	95751-95753	to	
370-14	95754-95758	make	
370-15	95759-95760	a	
370-16	95761-95767	single	
370-17	95768-95772	file	
370-18	95773-95779	system	
370-19	95780-95788	snapshot	
370-20	95789-95799	consistent	
370-21	95799-95800	.	
370-22	95801-95812	Potentially	
370-23	95812-95813	,	
370-24	95814-95816	it	
370-25	95817-95822	could	
370-26	95823-95825	do	
370-27	95826-95829	the	
370-28	95830-95834	same	
370-29	95835-95838	for	
370-30	95839-95855	non-simultaneous	
370-31	95856-95865	snapshots	
370-32	95866-95868	of	
370-33	95869-95877	multiple	
370-34	95878-95882	file	
370-35	95883-95890	systems	
370-36	95890-95891	.	
370-37	95892-95899	However	
370-38	95899-95900	,	
370-39	95901-95912	documenting	
370-40	95913-95917	this	
370-41	95917-95918	,	
370-42	95919-95925	giving	
370-43	95926-95931	users	
370-44	95932-95933	a	
370-45	95934-95942	reliable	
370-46	95943-95947	list	
370-47	95948-95950	of	
370-48	95951-95956	steps	
370-49	95957-95959	to	
370-50	95960-95967	perform	
370-51	95967-95968	,	
370-52	95969-95972	and	
370-53	95973-95979	making	
370-54	95980-95984	sure	
370-55	95985-95987	it	
370-56	95988-95994	always	
370-57	95995-96000	works	
370-58	96001-96003	is	
370-59	96004-96012	probably	
370-60	96013-96016	too	
370-61	96017-96024	complex	
370-62	96025-96027	to	
370-63	96028-96035	justify	
370-64	96035-96036	.	
370-65	96037-96041	View	
370-66	96042-96044	or	
370-67	96045-96049	Post	
370-68	96050-96058	Comments	

#Text=Moving Tables, Indexes, and Tablespaces Between Clusters Friday, May 22, 2020 Currently, it is impossible to move tables, indexes, and entire tablespaces from one cluster to another — that is because each table and index file is bound to the cluster's infrastructure because of: Table and index definitions
371-1	96059-96065	Moving	
371-2	96066-96072	Tables	
371-3	96072-96073	,	
371-4	96074-96081	Indexes	
371-5	96081-96082	,	
371-6	96083-96086	and	
371-7	96087-96098	Tablespaces	
371-8	96099-96106	Between	
371-9	96107-96115	Clusters	
371-10	96116-96122	Friday	
371-11	96122-96123	,	
371-12	96124-96127	May	
371-13	96128-96130	22	
371-14	96130-96131	,	
371-15	96132-96136	2020	
371-16	96137-96146	Currently	
371-17	96146-96147	,	
371-18	96148-96150	it	
371-19	96151-96153	is	
371-20	96154-96164	impossible	
371-21	96165-96167	to	
371-22	96168-96172	move	
371-23	96173-96179	tables	
371-24	96179-96180	,	
371-25	96181-96188	indexes	
371-26	96188-96189	,	
371-27	96190-96193	and	
371-28	96194-96200	entire	
371-29	96201-96212	tablespaces	
371-30	96213-96217	from	
371-31	96218-96221	one	
371-32	96222-96229	cluster	
371-33	96230-96232	to	
371-34	96233-96240	another	
371-35	96241-96242	—	
371-36	96243-96247	that	
371-37	96248-96250	is	
371-38	96251-96258	because	
371-39	96259-96263	each	
371-40	96264-96269	table	
371-41	96270-96273	and	
371-42	96274-96279	index	
371-43	96280-96284	file	
371-44	96285-96287	is	
371-45	96288-96293	bound	
371-46	96294-96296	to	
371-47	96297-96300	the	
371-48	96301-96310	cluster's	
371-49	96311-96325	infrastructure	
371-50	96326-96333	because	
371-51	96334-96336	of	
371-52	96336-96337	:	
371-53	96338-96343	Table	
371-54	96344-96347	and	
371-55	96348-96353	index	
371-56	96354-96365	definitions	

#Text=pg_xact (commit/abort/in-progress transaction status records) pg_multixact (used for multi-session row locking) Fyi, you can easily move tablespaces to new directories as long as it remains in the same cluster, and move tables and indexes between tablespaces. So, how could it be made possible?
372-1	96366-96373	pg_xact	
372-2	96374-96375	(	
372-3	96375-96381	commit	
372-4	96381-96382	/	
372-5	96382-96387	abort	
372-6	96387-96388	/	
372-7	96388-96399	in-progress	
372-8	96400-96411	transaction	
372-9	96412-96418	status	
372-10	96419-96426	records	
372-11	96426-96427	)	
372-12	96428-96440	pg_multixact	
372-13	96441-96442	(	
372-14	96442-96446	used	
372-15	96447-96450	for	
372-16	96451-96464	multi-session	
372-17	96465-96468	row	
372-18	96469-96476	locking	
372-19	96476-96477	)	
372-20	96478-96481	Fyi	
372-21	96481-96482	,	
372-22	96483-96486	you	
372-23	96487-96490	can	
372-24	96491-96497	easily	
372-25	96498-96502	move	
372-26	96503-96514	tablespaces	
372-27	96515-96517	to	
372-28	96518-96521	new	
372-29	96522-96533	directories	
372-30	96534-96536	as	
372-31	96537-96541	long	
372-32	96542-96544	as	
372-33	96545-96547	it	
372-34	96548-96555	remains	
372-35	96556-96558	in	
372-36	96559-96562	the	
372-37	96563-96567	same	
372-38	96568-96575	cluster	
372-39	96575-96576	,	
372-40	96577-96580	and	
372-41	96581-96585	move	
372-42	96586-96592	tables	
372-43	96593-96596	and	
372-44	96597-96604	indexes	
372-45	96605-96612	between	
372-46	96613-96624	tablespaces	
372-47	96624-96625	.	
372-48	96626-96628	So	
372-49	96628-96629	,	
372-50	96630-96633	how	
372-51	96634-96639	could	
372-52	96640-96642	it	
372-53	96643-96645	be	
372-54	96646-96650	made	
372-55	96651-96659	possible	
372-56	96659-96660	?	

#Text=Freeze can remove references to pg_xact and pg_multixact, assuming there are no active transactions during the freeze operation. Table and index definitions can be more complex, but it certainly seems possible. This requires more research. View or Post Comments Why Pgdata Should Not Be at the Top of a Mount Point Wednesday, May 20, 2020
373-1	96661-96667	Freeze	
373-2	96668-96671	can	
373-3	96672-96678	remove	
373-4	96679-96689	references	
373-5	96690-96692	to	
373-6	96693-96700	pg_xact	
373-7	96701-96704	and	
373-8	96705-96717	pg_multixact	
373-9	96717-96718	,	
373-10	96719-96727	assuming	
373-11	96728-96733	there	
373-12	96734-96737	are	
373-13	96738-96740	no	
373-14	96741-96747	active	
373-15	96748-96760	transactions	
373-16	96761-96767	during	
373-17	96768-96771	the	
373-18	96772-96778	freeze	
373-19	96779-96788	operation	
373-20	96788-96789	.	
373-21	96790-96795	Table	
373-22	96796-96799	and	
373-23	96800-96805	index	
373-24	96806-96817	definitions	
373-25	96818-96821	can	
373-26	96822-96824	be	
373-27	96825-96829	more	
373-28	96830-96837	complex	
373-29	96837-96838	,	
373-30	96839-96842	but	
373-31	96843-96845	it	
373-32	96846-96855	certainly	
373-33	96856-96861	seems	
373-34	96862-96870	possible	
373-35	96870-96871	.	
373-36	96872-96876	This	
373-37	96877-96885	requires	
373-38	96886-96890	more	
373-39	96891-96899	research	
373-40	96899-96900	.	
373-41	96901-96905	View	
373-42	96906-96908	or	
373-43	96909-96913	Post	
373-44	96914-96922	Comments	
373-45	96923-96926	Why	
373-46	96927-96933	Pgdata	
373-47	96934-96940	Should	
373-48	96941-96944	Not	
373-49	96945-96947	Be	
373-50	96948-96950	at	
373-51	96951-96954	the	
373-52	96955-96958	Top	
373-53	96959-96961	of	
373-54	96962-96963	a	
373-55	96964-96969	Mount	
373-56	96970-96975	Point	
373-57	96976-96985	Wednesday	
373-58	96985-96986	,	
373-59	96987-96990	May	
373-60	96991-96993	20	
373-61	96993-96994	,	
373-62	96995-96999	2020	

#Text=This email thread is illustrative of why it is unwise to place the Postgres data directory (pgdata) at the top of a mount point. Instead, create a subdirectory under the mount point and put pgdata there. This has the advantage of avoiding possible data corruption if mounting fails, and allows more efficient use of pg_upgrade.
374-1	97000-97004	This	
374-2	97005-97010	email	
374-3	97011-97017	thread	
374-4	97018-97020	is	
374-5	97021-97033	illustrative	
374-6	97034-97036	of	
374-7	97037-97040	why	
374-8	97041-97043	it	
374-9	97044-97046	is	
374-10	97047-97053	unwise	
374-11	97054-97056	to	
374-12	97057-97062	place	
374-13	97063-97066	the	
374-14	97067-97075	Postgres	
374-15	97076-97080	data	
374-16	97081-97090	directory	
374-17	97091-97092	(	
374-18	97092-97098	pgdata	
374-19	97098-97099	)	
374-20	97100-97102	at	
374-21	97103-97106	the	
374-22	97107-97110	top	
374-23	97111-97113	of	
374-24	97114-97115	a	
374-25	97116-97121	mount	
374-26	97122-97127	point	
374-27	97127-97128	.	
374-28	97129-97136	Instead	
374-29	97136-97137	,	
374-30	97138-97144	create	
374-31	97145-97146	a	
374-32	97147-97159	subdirectory	
374-33	97160-97165	under	
374-34	97166-97169	the	
374-35	97170-97175	mount	
374-36	97176-97181	point	
374-37	97182-97185	and	
374-38	97186-97189	put	
374-39	97190-97196	pgdata	
374-40	97197-97202	there	
374-41	97202-97203	.	
374-42	97204-97208	This	
374-43	97209-97212	has	
374-44	97213-97216	the	
374-45	97217-97226	advantage	
374-46	97227-97229	of	
374-47	97230-97238	avoiding	
374-48	97239-97247	possible	
374-49	97248-97252	data	
374-50	97253-97263	corruption	
374-51	97264-97266	if	
374-52	97267-97275	mounting	
374-53	97276-97281	fails	
374-54	97281-97282	,	
374-55	97283-97286	and	
374-56	97287-97293	allows	
374-57	97294-97298	more	
374-58	97299-97308	efficient	
374-59	97309-97312	use	
374-60	97313-97315	of	
374-61	97316-97326	pg_upgrade	
374-62	97326-97327	.	

#Text=View or Post Comments Percona Live Online Monday, May 18, 2020 I am planning to virtually attend and present at the Percona Live Online conference tomorrow, May 19. It starts at 10am, Eastern us time, and spans 24 hours, so it covers every time zone.
375-1	97328-97332	View	
375-2	97333-97335	or	
375-3	97336-97340	Post	
375-4	97341-97349	Comments	
375-5	97350-97357	Percona	
375-6	97358-97362	Live	
375-7	97363-97369	Online	
375-8	97370-97376	Monday	
375-9	97376-97377	,	
375-10	97378-97381	May	
375-11	97382-97384	18	
375-12	97384-97385	,	
375-13	97386-97390	2020	
375-14	97391-97392	I	
375-15	97393-97395	am	
375-16	97396-97404	planning	
375-17	97405-97407	to	
375-18	97408-97417	virtually	
375-19	97418-97424	attend	
375-20	97425-97428	and	
375-21	97429-97436	present	
375-22	97437-97439	at	
375-23	97440-97443	the	
375-24	97444-97451	Percona	
375-25	97452-97456	Live	
375-26	97457-97463	Online	
375-27	97464-97474	conference	
375-28	97475-97483	tomorrow	
375-29	97483-97484	,	
375-30	97485-97488	May	
375-31	97489-97491	19	
375-32	97491-97492	.	
375-33	97493-97495	It	
375-34	97496-97502	starts	
375-35	97503-97505	at	
375-36	97506-97510	10am	
375-37	97510-97511	,	
375-38	97512-97519	Eastern	
375-39	97520-97522	us	
375-40	97523-97527	time	
375-41	97527-97528	,	
375-42	97529-97532	and	
375-43	97533-97538	spans	
375-44	97539-97541	24	
375-45	97542-97547	hours	
375-46	97547-97548	,	
375-47	97549-97551	so	
375-48	97552-97554	it	
375-49	97555-97561	covers	
375-50	97562-97567	every	
375-51	97568-97572	time	
375-52	97573-97577	zone	
375-53	97577-97578	.	

#Text=I am giving my Will Postgres Live Forever? presentation at noon, Eastern us time. Attendance is free, so you might want to check it out. I saw some interesting topics on the program. I am also curious to experience a 24-hour virtual conference, though I am unlikely to remain awake that long. View or Post Comments
376-1	97579-97580	I	
376-2	97581-97583	am	
376-3	97584-97590	giving	
376-4	97591-97593	my	
376-5	97594-97598	Will	
376-6	97599-97607	Postgres	
376-7	97608-97612	Live	
376-8	97613-97620	Forever	
376-9	97620-97621	?	
376-10	97622-97634	presentation	
376-11	97635-97637	at	
376-12	97638-97642	noon	
376-13	97642-97643	,	
376-14	97644-97651	Eastern	
376-15	97652-97654	us	
376-16	97655-97659	time	
376-17	97659-97660	.	
376-18	97661-97671	Attendance	
376-19	97672-97674	is	
376-20	97675-97679	free	
376-21	97679-97680	,	
376-22	97681-97683	so	
376-23	97684-97687	you	
376-24	97688-97693	might	
376-25	97694-97698	want	
376-26	97699-97701	to	
376-27	97702-97707	check	
376-28	97708-97710	it	
376-29	97711-97714	out	
376-30	97714-97715	.	
376-31	97716-97717	I	
376-32	97718-97721	saw	
376-33	97722-97726	some	
376-34	97727-97738	interesting	
376-35	97739-97745	topics	
376-36	97746-97748	on	
376-37	97749-97752	the	
376-38	97753-97760	program	
376-39	97760-97761	.	
376-40	97762-97763	I	
376-41	97764-97766	am	
376-42	97767-97771	also	
376-43	97772-97779	curious	
376-44	97780-97782	to	
376-45	97783-97793	experience	
376-46	97794-97795	a	
376-47	97796-97798	24	
376-48	97798-97799	-	
376-49	97799-97803	hour	
376-50	97804-97811	virtual	
376-51	97812-97822	conference	
376-52	97822-97823	,	
376-53	97824-97830	though	
376-54	97831-97832	I	
376-55	97833-97835	am	
376-56	97836-97844	unlikely	
376-57	97845-97847	to	
376-58	97848-97854	remain	
376-59	97855-97860	awake	
376-60	97861-97865	that	
376-61	97866-97870	long	
376-62	97870-97871	.	
376-63	97872-97876	View	
376-64	97877-97879	or	
376-65	97880-97884	Post	
376-66	97885-97893	Comments	

#Text=Using Non-Login Roles Monday, May 18, 2020 When we talk about database roles, most people immediately think of login roles, which allow people to log in. However, another user management feature is the ability to create non-login roles, formerly called groups.
377-1	97894-97899	Using	
377-2	97900-97909	Non-Login	
377-3	97910-97915	Roles	
377-4	97916-97922	Monday	
377-5	97922-97923	,	
377-6	97924-97927	May	
377-7	97928-97930	18	
377-8	97930-97931	,	
377-9	97932-97936	2020	
377-10	97937-97941	When	
377-11	97942-97944	we	
377-12	97945-97949	talk	
377-13	97950-97955	about	
377-14	97956-97964	database	
377-15	97965-97970	roles	
377-16	97970-97971	,	
377-17	97972-97976	most	
377-18	97977-97983	people	
377-19	97984-97995	immediately	
377-20	97996-98001	think	
377-21	98002-98004	of	
377-22	98005-98010	login	
377-23	98011-98016	roles	
377-24	98016-98017	,	
377-25	98018-98023	which	
377-26	98024-98029	allow	
377-27	98030-98036	people	
377-28	98037-98039	to	
377-29	98040-98043	log	
377-30	98044-98046	in	
377-31	98046-98047	.	
377-32	98048-98055	However	
377-33	98055-98056	,	
377-34	98057-98064	another	
377-35	98065-98069	user	
377-36	98070-98080	management	
377-37	98081-98088	feature	
377-38	98089-98091	is	
377-39	98092-98095	the	
377-40	98096-98103	ability	
377-41	98104-98106	to	
377-42	98107-98113	create	
377-43	98114-98123	non-login	
377-44	98124-98129	roles	
377-45	98129-98130	,	
377-46	98131-98139	formerly	
377-47	98140-98146	called	
377-48	98147-98153	groups	
377-49	98153-98154	.	

#Text=Non-login roles can also be assigned permissions, e.g., via grant, and can have login roles as members. Non-login roles can be even be members of other non-login roles. What is the value of using non-login roles?
378-1	98155-98164	Non-login	
378-2	98165-98170	roles	
378-3	98171-98174	can	
378-4	98175-98179	also	
378-5	98180-98182	be	
378-6	98183-98191	assigned	
378-7	98192-98203	permissions	
378-8	98203-98204	,	
378-9	98205-98208	e.g	
378-10	98208-98209	.	
378-11	98209-98210	,	
378-12	98211-98214	via	
378-13	98215-98220	grant	
378-14	98220-98221	,	
378-15	98222-98225	and	
378-16	98226-98229	can	
378-17	98230-98234	have	
378-18	98235-98240	login	
378-19	98241-98246	roles	
378-20	98247-98249	as	
378-21	98250-98257	members	
378-22	98257-98258	.	
378-23	98259-98268	Non-login	
378-24	98269-98274	roles	
378-25	98275-98278	can	
378-26	98279-98281	be	
378-27	98282-98286	even	
378-28	98287-98289	be	
378-29	98290-98297	members	
378-30	98298-98300	of	
378-31	98301-98306	other	
378-32	98307-98316	non-login	
378-33	98317-98322	roles	
378-34	98322-98323	.	
378-35	98324-98328	What	
378-36	98329-98331	is	
378-37	98332-98335	the	
378-38	98336-98341	value	
378-39	98342-98344	of	
378-40	98345-98350	using	
378-41	98351-98360	non-login	
378-42	98361-98366	roles	
378-43	98366-98367	?	

#Text=They allow a group of people to be assigned as members of a non-login role, and that role can be used to abstract permission assignment. For example, if you have shop foremen, you can configure the login roles of all foremen to be members of a non-login foreman role. As people are added and removed from that
379-1	98368-98372	They	
379-2	98373-98378	allow	
379-3	98379-98380	a	
379-4	98381-98386	group	
379-5	98387-98389	of	
379-6	98390-98396	people	
379-7	98397-98399	to	
379-8	98400-98402	be	
379-9	98403-98411	assigned	
379-10	98412-98414	as	
379-11	98415-98422	members	
379-12	98423-98425	of	
379-13	98426-98427	a	
379-14	98428-98437	non-login	
379-15	98438-98442	role	
379-16	98442-98443	,	
379-17	98444-98447	and	
379-18	98448-98452	that	
379-19	98453-98457	role	
379-20	98458-98461	can	
379-21	98462-98464	be	
379-22	98465-98469	used	
379-23	98470-98472	to	
379-24	98473-98481	abstract	
379-25	98482-98492	permission	
379-26	98493-98503	assignment	
379-27	98503-98504	.	
379-28	98505-98508	For	
379-29	98509-98516	example	
379-30	98516-98517	,	
379-31	98518-98520	if	
379-32	98521-98524	you	
379-33	98525-98529	have	
379-34	98530-98534	shop	
379-35	98535-98542	foremen	
379-36	98542-98543	,	
379-37	98544-98547	you	
379-38	98548-98551	can	
379-39	98552-98561	configure	
379-40	98562-98565	the	
379-41	98566-98571	login	
379-42	98572-98577	roles	
379-43	98578-98580	of	
379-44	98581-98584	all	
379-45	98585-98592	foremen	
379-46	98593-98595	to	
379-47	98596-98598	be	
379-48	98599-98606	members	
379-49	98607-98609	of	
379-50	98610-98611	a	
379-51	98612-98621	non-login	
379-52	98622-98629	foreman	
379-53	98630-98634	role	
379-54	98634-98635	.	
379-55	98636-98638	As	
379-56	98639-98645	people	
379-57	98646-98649	are	
379-58	98650-98655	added	
379-59	98656-98659	and	
379-60	98660-98667	removed	
379-61	98668-98672	from	
379-62	98673-98677	that	

#Text=staff position, they can be added/removed from the non-login role without the need to change permissions for the foreman role. A further advantage of non-login roles, as explained in a recent email, is that Postgres can start to suffer performance problems if more than a few dozen roles are granted permission on an object. A much simpler and more manageable solution is to add users to a non-login role and assign
380-1	98678-98683	staff	
380-2	98684-98692	position	
380-3	98692-98693	,	
380-4	98694-98698	they	
380-5	98699-98702	can	
380-6	98703-98705	be	
380-7	98706-98711	added	
380-8	98711-98712	/	
380-9	98712-98719	removed	
380-10	98720-98724	from	
380-11	98725-98728	the	
380-12	98729-98738	non-login	
380-13	98739-98743	role	
380-14	98744-98751	without	
380-15	98752-98755	the	
380-16	98756-98760	need	
380-17	98761-98763	to	
380-18	98764-98770	change	
380-19	98771-98782	permissions	
380-20	98783-98786	for	
380-21	98787-98790	the	
380-22	98791-98798	foreman	
380-23	98799-98803	role	
380-24	98803-98804	.	
380-25	98805-98806	A	
380-26	98807-98814	further	
380-27	98815-98824	advantage	
380-28	98825-98827	of	
380-29	98828-98837	non-login	
380-30	98838-98843	roles	
380-31	98843-98844	,	
380-32	98845-98847	as	
380-33	98848-98857	explained	
380-34	98858-98860	in	
380-35	98861-98862	a	
380-36	98863-98869	recent	
380-37	98870-98875	email	
380-38	98875-98876	,	
380-39	98877-98879	is	
380-40	98880-98884	that	
380-41	98885-98893	Postgres	
380-42	98894-98897	can	
380-43	98898-98903	start	
380-44	98904-98906	to	
380-45	98907-98913	suffer	
380-46	98914-98925	performance	
380-47	98926-98934	problems	
380-48	98935-98937	if	
380-49	98938-98942	more	
380-50	98943-98947	than	
380-51	98948-98949	a	
380-52	98950-98953	few	
380-53	98954-98959	dozen	
380-54	98960-98965	roles	
380-55	98966-98969	are	
380-56	98970-98977	granted	
380-57	98978-98988	permission	
380-58	98989-98991	on	
380-59	98992-98994	an	
380-60	98995-99001	object	
380-61	99001-99002	.	
380-62	99003-99004	A	
380-63	99005-99009	much	
380-64	99010-99017	simpler	
380-65	99018-99021	and	
380-66	99022-99026	more	
380-67	99027-99037	manageable	
380-68	99038-99046	solution	
380-69	99047-99049	is	
380-70	99050-99052	to	
380-71	99053-99056	add	
380-72	99057-99062	users	
380-73	99063-99065	to	
380-74	99066-99067	a	
380-75	99068-99077	non-login	
380-76	99078-99082	role	
380-77	99083-99086	and	
380-78	99087-99093	assign	

#Text=object permissions to that non-login role. View or Post Comments Draft of Postgres 13 Release Notes Friday, May 15, 2020 I have completed the draft version of the Postgres 13 release notes, containing 181 items. The release notes will be continually updated until
381-1	99094-99100	object	
381-2	99101-99112	permissions	
381-3	99113-99115	to	
381-4	99116-99120	that	
381-5	99121-99130	non-login	
381-6	99131-99135	role	
381-7	99135-99136	.	
381-8	99137-99141	View	
381-9	99142-99144	or	
381-10	99145-99149	Post	
381-11	99150-99158	Comments	
381-12	99159-99164	Draft	
381-13	99165-99167	of	
381-14	99168-99176	Postgres	
381-15	99177-99179	13	
381-16	99180-99187	Release	
381-17	99188-99193	Notes	
381-18	99194-99200	Friday	
381-19	99200-99201	,	
381-20	99202-99205	May	
381-21	99206-99208	15	
381-22	99208-99209	,	
381-23	99210-99214	2020	
381-24	99215-99216	I	
381-25	99217-99221	have	
381-26	99222-99231	completed	
381-27	99232-99235	the	
381-28	99236-99241	draft	
381-29	99242-99249	version	
381-30	99250-99252	of	
381-31	99253-99256	the	
381-32	99257-99265	Postgres	
381-33	99266-99268	13	
381-34	99269-99276	release	
381-35	99277-99282	notes	
381-36	99282-99283	,	
381-37	99284-99294	containing	
381-38	99295-99298	181	
381-39	99299-99304	items	
381-40	99304-99305	.	
381-41	99306-99309	The	
381-42	99310-99317	release	
381-43	99318-99323	notes	
381-44	99324-99328	will	
381-45	99329-99331	be	
381-46	99332-99343	continually	
381-47	99344-99351	updated	
381-48	99352-99357	until	

#Text=the final release, which is expected to be in September or October of this year. Beta testing will start in the next few weeks. View or Post Comments Avoiding Cache Wipe, Synchronized Scans Wednesday, May 13, 2020 Whenever you are dealing with a lot of data, it helps to cache it.
382-1	99358-99361	the	
382-2	99362-99367	final	
382-3	99368-99375	release	
382-4	99375-99376	,	
382-5	99377-99382	which	
382-6	99383-99385	is	
382-7	99386-99394	expected	
382-8	99395-99397	to	
382-9	99398-99400	be	
382-10	99401-99403	in	
382-11	99404-99413	September	
382-12	99414-99416	or	
382-13	99417-99424	October	
382-14	99425-99427	of	
382-15	99428-99432	this	
382-16	99433-99437	year	
382-17	99437-99438	.	
382-18	99439-99443	Beta	
382-19	99444-99451	testing	
382-20	99452-99456	will	
382-21	99457-99462	start	
382-22	99463-99465	in	
382-23	99466-99469	the	
382-24	99470-99474	next	
382-25	99475-99478	few	
382-26	99479-99484	weeks	
382-27	99484-99485	.	
382-28	99486-99490	View	
382-29	99491-99493	or	
382-30	99494-99498	Post	
382-31	99499-99507	Comments	
382-32	99508-99516	Avoiding	
382-33	99517-99522	Cache	
382-34	99523-99527	Wipe	
382-35	99527-99528	,	
382-36	99529-99541	Synchronized	
382-37	99542-99547	Scans	
382-38	99548-99557	Wednesday	
382-39	99557-99558	,	
382-40	99559-99562	May	
382-41	99563-99565	13	
382-42	99565-99566	,	
382-43	99567-99571	2020	
382-44	99572-99580	Whenever	
382-45	99581-99584	you	
382-46	99585-99588	are	
382-47	99589-99596	dealing	
382-48	99597-99601	with	
382-49	99602-99603	a	
382-50	99604-99607	lot	
382-51	99608-99610	of	
382-52	99611-99615	data	
382-53	99615-99616	,	
382-54	99617-99619	it	
382-55	99620-99625	helps	
382-56	99626-99628	to	
382-57	99629-99634	cache	
382-58	99635-99637	it	
382-59	99637-99638	.	

#Text=Postgres does this using shared_buffers. However, one risk of caching data is that a large query that accesses a lot of data might remove frequently-accessed data from the cache; this is called cache wipe. To avoid this, Postgres limits the number of shared buffers used by data operations that are expected to access a lot
383-1	99639-99647	Postgres	
383-2	99648-99652	does	
383-3	99653-99657	this	
383-4	99658-99663	using	
383-5	99664-99678	shared_buffers	
383-6	99678-99679	.	
383-7	99680-99687	However	
383-8	99687-99688	,	
383-9	99689-99692	one	
383-10	99693-99697	risk	
383-11	99698-99700	of	
383-12	99701-99708	caching	
383-13	99709-99713	data	
383-14	99714-99716	is	
383-15	99717-99721	that	
383-16	99722-99723	a	
383-17	99724-99729	large	
383-18	99730-99735	query	
383-19	99736-99740	that	
383-20	99741-99749	accesses	
383-21	99750-99751	a	
383-22	99752-99755	lot	
383-23	99756-99758	of	
383-24	99759-99763	data	
383-25	99764-99769	might	
383-26	99770-99776	remove	
383-27	99777-99796	frequently-accessed	
383-28	99797-99801	data	
383-29	99802-99806	from	
383-30	99807-99810	the	
383-31	99811-99816	cache	
383-32	99816-99817	;	
383-33	99818-99822	this	
383-34	99823-99825	is	
383-35	99826-99832	called	
383-36	99833-99838	cache	
383-37	99839-99843	wipe	
383-38	99843-99844	.	
383-39	99845-99847	To	
383-40	99848-99853	avoid	
383-41	99854-99858	this	
383-42	99858-99859	,	
383-43	99860-99868	Postgres	
383-44	99869-99875	limits	
383-45	99876-99879	the	
383-46	99880-99886	number	
383-47	99887-99889	of	
383-48	99890-99896	shared	
383-49	99897-99904	buffers	
383-50	99905-99909	used	
383-51	99910-99912	by	
383-52	99913-99917	data	
383-53	99918-99928	operations	
383-54	99929-99933	that	
383-55	99934-99937	are	
383-56	99938-99946	expected	
383-57	99947-99949	to	
383-58	99950-99956	access	
383-59	99957-99958	a	
383-60	99959-99962	lot	

#Text=of data. Looking at C function GetAccessStrategy(), you can see there are four shared buffer access strategies. The first one, bas_normal, is used for normal scans; the rest are to avoiding cache wiping:
384-1	99963-99965	of	
384-2	99966-99970	data	
384-3	99970-99971	.	
384-4	99972-99979	Looking	
384-5	99980-99982	at	
384-6	99983-99984	C	
384-7	99985-99993	function	
384-8	99994-100011	GetAccessStrategy	
384-9	100011-100012	(	
384-10	100012-100013	)	
384-11	100013-100014	,	
384-12	100015-100018	you	
384-13	100019-100022	can	
384-14	100023-100026	see	
384-15	100027-100032	there	
384-16	100033-100036	are	
384-17	100037-100041	four	
384-18	100042-100048	shared	
384-19	100049-100055	buffer	
384-20	100056-100062	access	
384-21	100063-100073	strategies	
384-22	100073-100074	.	
384-23	100075-100078	The	
384-24	100079-100084	first	
384-25	100085-100088	one	
384-26	100088-100089	,	
384-27	100090-100100	bas_normal	
384-28	100100-100101	,	
384-29	100102-100104	is	
384-30	100105-100109	used	
384-31	100110-100113	for	
384-32	100114-100120	normal	
384-33	100121-100126	scans	
384-34	100126-100127	;	
384-35	100128-100131	the	
384-36	100132-100136	rest	
384-37	100137-100140	are	
384-38	100141-100143	to	
384-39	100144-100152	avoiding	
384-40	100153-100158	cache	
384-41	100159-100165	wiping	
384-42	100165-100166	:	

#Text=bas_bulkread is enabled for large reads and uses 256 kilobytes of shared buffers (typically 32 8kB shared buffers) bas_bulkwrite: is enabled for large writes and uses 16 megabytes of shared buffers bas_vacuum is for vacuum operations and uses 256 kilobytes of shared buffers For example, function initscan() uses bas_bulkread if the scan is expected to access more than one-quarter of
385-1	100167-100179	bas_bulkread	
385-2	100180-100182	is	
385-3	100183-100190	enabled	
385-4	100191-100194	for	
385-5	100195-100200	large	
385-6	100201-100206	reads	
385-7	100207-100210	and	
385-8	100211-100215	uses	
385-9	100216-100219	256	
385-10	100220-100229	kilobytes	
385-11	100230-100232	of	
385-12	100233-100239	shared	
385-13	100240-100247	buffers	
385-14	100248-100249	(	
385-15	100249-100258	typically	
385-16	100259-100261	32	
385-17	100262-100265	8kB	
385-18	100266-100272	shared	
385-19	100273-100280	buffers	
385-20	100280-100281	)	
385-21	100282-100295	bas_bulkwrite	
385-22	100295-100296	:	
385-23	100297-100299	is	
385-24	100300-100307	enabled	
385-25	100308-100311	for	
385-26	100312-100317	large	
385-27	100318-100324	writes	
385-28	100325-100328	and	
385-29	100329-100333	uses	
385-30	100334-100336	16	
385-31	100337-100346	megabytes	
385-32	100347-100349	of	
385-33	100350-100356	shared	
385-34	100357-100364	buffers	
385-35	100365-100375	bas_vacuum	
385-36	100376-100378	is	
385-37	100379-100382	for	
385-38	100383-100389	vacuum	
385-39	100390-100400	operations	
385-40	100401-100404	and	
385-41	100405-100409	uses	
385-42	100410-100413	256	
385-43	100414-100423	kilobytes	
385-44	100424-100426	of	
385-45	100427-100433	shared	
385-46	100434-100441	buffers	
385-47	100442-100445	For	
385-48	100446-100453	example	
385-49	100453-100454	,	
385-50	100455-100463	function	
385-51	100464-100472	initscan	
385-52	100472-100473	(	
385-53	100473-100474	)	
385-54	100475-100479	uses	
385-55	100480-100492	bas_bulkread	
385-56	100493-100495	if	
385-57	100496-100499	the	
385-58	100500-100504	scan	
385-59	100505-100507	is	
385-60	100508-100516	expected	
385-61	100517-100519	to	
385-62	100520-100526	access	
385-63	100527-100531	more	
385-64	100532-100536	than	
385-65	100537-100548	one-quarter	
385-66	100549-100551	of	

#Text=shared buffers. Similarly, table rewrites, create table as, and copy from use bas_bulkwrite. Bas_bulkwrite is larger because we can't discard written buffers from the cache until they are written to storage, unlike unmodified buffers which can be discarded anytime.
386-1	100552-100558	shared	
386-2	100559-100566	buffers	
386-3	100566-100567	.	
386-4	100568-100577	Similarly	
386-5	100577-100578	,	
386-6	100579-100584	table	
386-7	100585-100593	rewrites	
386-8	100593-100594	,	
386-9	100595-100601	create	
386-10	100602-100607	table	
386-11	100608-100610	as	
386-12	100610-100611	,	
386-13	100612-100615	and	
386-14	100616-100620	copy	
386-15	100621-100625	from	
386-16	100626-100629	use	
386-17	100630-100643	bas_bulkwrite	
386-18	100643-100644	.	
386-19	100645-100658	Bas_bulkwrite	
386-20	100659-100661	is	
386-21	100662-100668	larger	
386-22	100669-100676	because	
386-23	100677-100679	we	
386-24	100680-100685	can't	
386-25	100686-100693	discard	
386-26	100694-100701	written	
386-27	100702-100709	buffers	
386-28	100710-100714	from	
386-29	100715-100718	the	
386-30	100719-100724	cache	
386-31	100725-100730	until	
386-32	100731-100735	they	
386-33	100736-100739	are	
386-34	100740-100747	written	
386-35	100748-100750	to	
386-36	100751-100758	storage	
386-37	100758-100759	,	
386-38	100760-100766	unlike	
386-39	100767-100777	unmodified	
386-40	100778-100785	buffers	
386-41	100786-100791	which	
386-42	100792-100795	can	
386-43	100796-100798	be	
386-44	100799-100808	discarded	
386-45	100809-100816	anytime	
386-46	100816-100817	.	

#Text=You might wonder, with operations using so few shared buffers, what happens if another session needs to scan the same data? Doesn't performance suffer? Well, another Postgres facility, that was developed independently, helps with this: synchronized scans. The top of syncscan.c explains it well:
387-1	100818-100821	You	
387-2	100822-100827	might	
387-3	100828-100834	wonder	
387-4	100834-100835	,	
387-5	100836-100840	with	
387-6	100841-100851	operations	
387-7	100852-100857	using	
387-8	100858-100860	so	
387-9	100861-100864	few	
387-10	100865-100871	shared	
387-11	100872-100879	buffers	
387-12	100879-100880	,	
387-13	100881-100885	what	
387-14	100886-100893	happens	
387-15	100894-100896	if	
387-16	100897-100904	another	
387-17	100905-100912	session	
387-18	100913-100918	needs	
387-19	100919-100921	to	
387-20	100922-100926	scan	
387-21	100927-100930	the	
387-22	100931-100935	same	
387-23	100936-100940	data	
387-24	100940-100941	?	
387-25	100942-100949	Doesn't	
387-26	100950-100961	performance	
387-27	100962-100968	suffer	
387-28	100968-100969	?	
387-29	100970-100974	Well	
387-30	100974-100975	,	
387-31	100976-100983	another	
387-32	100984-100992	Postgres	
387-33	100993-101001	facility	
387-34	101001-101002	,	
387-35	101003-101007	that	
387-36	101008-101011	was	
387-37	101012-101021	developed	
387-38	101022-101035	independently	
387-39	101035-101036	,	
387-40	101037-101042	helps	
387-41	101043-101047	with	
387-42	101048-101052	this	
387-43	101052-101053	:	
387-44	101054-101066	synchronized	
387-45	101067-101072	scans	
387-46	101072-101073	.	
387-47	101074-101077	The	
387-48	101078-101081	top	
387-49	101082-101084	of	
387-50	101085-101095	syncscan.c	
387-51	101096-101104	explains	
387-52	101105-101107	it	
387-53	101108-101112	well	
387-54	101112-101113	:	

#Text=When multiple backends run a sequential scan on the same table, we try to keep them synchronized to reduce the overall I/O needed. The goal is to read each page into shared buffer cache only once, and let all backends that take part in the shared scan process the page before it falls out of the cache. Both synchronized scans and shared buffer access strategies work automatically, so most Postgres users don't even know they exist, but they do improve Postgres performance.
388-1	101114-101118	When	
388-2	101119-101127	multiple	
388-3	101128-101136	backends	
388-4	101137-101140	run	
388-5	101141-101142	a	
388-6	101143-101153	sequential	
388-7	101154-101158	scan	
388-8	101159-101161	on	
388-9	101162-101165	the	
388-10	101166-101170	same	
388-11	101171-101176	table	
388-12	101176-101177	,	
388-13	101178-101180	we	
388-14	101181-101184	try	
388-15	101185-101187	to	
388-16	101188-101192	keep	
388-17	101193-101197	them	
388-18	101198-101210	synchronized	
388-19	101211-101213	to	
388-20	101214-101220	reduce	
388-21	101221-101224	the	
388-22	101225-101232	overall	
388-23	101233-101234	I	
388-24	101234-101235	/	
388-25	101235-101236	O	
388-26	101237-101243	needed	
388-27	101243-101244	.	
388-28	101245-101248	The	
388-29	101249-101253	goal	
388-30	101254-101256	is	
388-31	101257-101259	to	
388-32	101260-101264	read	
388-33	101265-101269	each	
388-34	101270-101274	page	
388-35	101275-101279	into	
388-36	101280-101286	shared	
388-37	101287-101293	buffer	
388-38	101294-101299	cache	
388-39	101300-101304	only	
388-40	101305-101309	once	
388-41	101309-101310	,	
388-42	101311-101314	and	
388-43	101315-101318	let	
388-44	101319-101322	all	
388-45	101323-101331	backends	
388-46	101332-101336	that	
388-47	101337-101341	take	
388-48	101342-101346	part	
388-49	101347-101349	in	
388-50	101350-101353	the	
388-51	101354-101360	shared	
388-52	101361-101365	scan	
388-53	101366-101373	process	
388-54	101374-101377	the	
388-55	101378-101382	page	
388-56	101383-101389	before	
388-57	101390-101392	it	
388-58	101393-101398	falls	
388-59	101399-101402	out	
388-60	101403-101405	of	
388-61	101406-101409	the	
388-62	101410-101415	cache	
388-63	101415-101416	.	
388-64	101417-101421	Both	
388-65	101422-101434	synchronized	
388-66	101435-101440	scans	
388-67	101441-101444	and	
388-68	101445-101451	shared	
388-69	101452-101458	buffer	
388-70	101459-101465	access	
388-71	101466-101476	strategies	
388-72	101477-101481	work	
388-73	101482-101495	automatically	
388-74	101495-101496	,	
388-75	101497-101499	so	
388-76	101500-101504	most	
388-77	101505-101513	Postgres	
388-78	101514-101519	users	
388-79	101520-101525	don't	
388-80	101526-101530	even	
388-81	101531-101535	know	
388-82	101536-101540	they	
388-83	101541-101546	exist	
388-84	101546-101547	,	
388-85	101548-101551	but	
388-86	101552-101556	they	
388-87	101557-101559	do	
388-88	101560-101567	improve	
388-89	101568-101576	Postgres	
388-90	101577-101588	performance	
388-91	101588-101589	.	

#Text=View or Post Comments Why Do We Freeze? Monday, May 11, 2020 You might have seen autovacuum running, and noticed that it sometimes performs freeze operations on transaction ids (32 bits) and multi-xacts (used for multi-session row locking).
389-1	101590-101594	View	
389-2	101595-101597	or	
389-3	101598-101602	Post	
389-4	101603-101611	Comments	
389-5	101612-101615	Why	
389-6	101616-101618	Do	
389-7	101619-101621	We	
389-8	101622-101628	Freeze	
389-9	101628-101629	?	
389-10	101630-101636	Monday	
389-11	101636-101637	,	
389-12	101638-101641	May	
389-13	101642-101644	11	
389-14	101644-101645	,	
389-15	101646-101650	2020	
389-16	101651-101654	You	
389-17	101655-101660	might	
389-18	101661-101665	have	
389-19	101666-101670	seen	
389-20	101671-101681	autovacuum	
389-21	101682-101689	running	
389-22	101689-101690	,	
389-23	101691-101694	and	
389-24	101695-101702	noticed	
389-25	101703-101707	that	
389-26	101708-101710	it	
389-27	101711-101720	sometimes	
389-28	101721-101729	performs	
389-29	101730-101736	freeze	
389-30	101737-101747	operations	
389-31	101748-101750	on	
389-32	101751-101762	transaction	
389-33	101763-101766	ids	
389-34	101767-101768	(	
389-35	101768-101770	32	
389-36	101771-101775	bits	
389-37	101775-101776	)	
389-38	101777-101780	and	
389-39	101781-101792	multi-xacts	
389-40	101793-101794	(	
389-41	101794-101798	used	
389-42	101799-101802	for	
389-43	101803-101816	multi-session	
389-44	101817-101820	row	
389-45	101821-101828	locking	
389-46	101828-101829	)	
389-47	101829-101830	.	

#Text=The frequency of freeze operations is controlled by autovacuum_freeze_max_age and autovacuum_multixact_freeze_max_age. You can reduce the frequency of freezing if you are sure the freeze operation will complete before transaction wraparound is reached.
390-1	101831-101834	The	
390-2	101835-101844	frequency	
390-3	101845-101847	of	
390-4	101848-101854	freeze	
390-5	101855-101865	operations	
390-6	101866-101868	is	
390-7	101869-101879	controlled	
390-8	101880-101882	by	
390-9	101883-101908	autovacuum_freeze_max_age	
390-10	101909-101912	and	
390-11	101913-101948	autovacuum_multixact_freeze_max_age	
390-12	101948-101949	.	
390-13	101950-101953	You	
390-14	101954-101957	can	
390-15	101958-101964	reduce	
390-16	101965-101968	the	
390-17	101969-101978	frequency	
390-18	101979-101981	of	
390-19	101982-101990	freezing	
390-20	101991-101993	if	
390-21	101994-101997	you	
390-22	101998-102001	are	
390-23	102002-102006	sure	
390-24	102007-102010	the	
390-25	102011-102017	freeze	
390-26	102018-102027	operation	
390-27	102028-102032	will	
390-28	102033-102041	complete	
390-29	102042-102048	before	
390-30	102049-102060	transaction	
390-31	102061-102071	wraparound	
390-32	102072-102074	is	
390-33	102075-102082	reached	
390-34	102082-102083	.	

#Text=There is regular discussion about how freezing could be avoided, and this email does the best job of explaining the options. We could expand transaction ids to 64 bits, either on each row or perhaps with a page-level default, but pg_xact (commit/abort/in-progress transaction status records) still need cleanup. This area probably needs more
391-1	102084-102089	There	
391-2	102090-102092	is	
391-3	102093-102100	regular	
391-4	102101-102111	discussion	
391-5	102112-102117	about	
391-6	102118-102121	how	
391-7	102122-102130	freezing	
391-8	102131-102136	could	
391-9	102137-102139	be	
391-10	102140-102147	avoided	
391-11	102147-102148	,	
391-12	102149-102152	and	
391-13	102153-102157	this	
391-14	102158-102163	email	
391-15	102164-102168	does	
391-16	102169-102172	the	
391-17	102173-102177	best	
391-18	102178-102181	job	
391-19	102182-102184	of	
391-20	102185-102195	explaining	
391-21	102196-102199	the	
391-22	102200-102207	options	
391-23	102207-102208	.	
391-24	102209-102211	We	
391-25	102212-102217	could	
391-26	102218-102224	expand	
391-27	102225-102236	transaction	
391-28	102237-102240	ids	
391-29	102241-102243	to	
391-30	102244-102246	64	
391-31	102247-102251	bits	
391-32	102251-102252	,	
391-33	102253-102259	either	
391-34	102260-102262	on	
391-35	102263-102267	each	
391-36	102268-102271	row	
391-37	102272-102274	or	
391-38	102275-102282	perhaps	
391-39	102283-102287	with	
391-40	102288-102289	a	
391-41	102290-102300	page-level	
391-42	102301-102308	default	
391-43	102308-102309	,	
391-44	102310-102313	but	
391-45	102314-102321	pg_xact	
391-46	102322-102323	(	
391-47	102323-102329	commit	
391-48	102329-102330	/	
391-49	102330-102335	abort	
391-50	102335-102336	/	
391-51	102336-102347	in-progress	
391-52	102348-102359	transaction	
391-53	102360-102366	status	
391-54	102367-102374	records	
391-55	102374-102375	)	
391-56	102376-102381	still	
391-57	102382-102386	need	
391-58	102387-102394	cleanup	
391-59	102394-102395	.	
391-60	102396-102400	This	
391-61	102401-102405	area	
391-62	102406-102414	probably	
391-63	102415-102420	needs	
391-64	102421-102425	more	

#Text=thought. View or Post Comments Postgres Internals Website Friday, May 8, 2020 I am often asked how someone can learn more about Postgres, particularly the internals. There is the Postgres developer page, which has links to many resources,
392-1	102426-102433	thought	
392-2	102433-102434	.	
392-3	102435-102439	View	
392-4	102440-102442	or	
392-5	102443-102447	Post	
392-6	102448-102456	Comments	
392-7	102457-102465	Postgres	
392-8	102466-102475	Internals	
392-9	102476-102483	Website	
392-10	102484-102490	Friday	
392-11	102490-102491	,	
392-12	102492-102495	May	
392-13	102496-102497	8	
392-14	102497-102498	,	
392-15	102499-102503	2020	
392-16	102504-102505	I	
392-17	102506-102508	am	
392-18	102509-102514	often	
392-19	102515-102520	asked	
392-20	102521-102524	how	
392-21	102525-102532	someone	
392-22	102533-102536	can	
392-23	102537-102542	learn	
392-24	102543-102547	more	
392-25	102548-102553	about	
392-26	102554-102562	Postgres	
392-27	102562-102563	,	
392-28	102564-102576	particularly	
392-29	102577-102580	the	
392-30	102581-102590	internals	
392-31	102590-102591	.	
392-32	102592-102597	There	
392-33	102598-102600	is	
392-34	102601-102604	the	
392-35	102605-102613	Postgres	
392-36	102614-102623	developer	
392-37	102624-102628	page	
392-38	102628-102629	,	
392-39	102630-102635	which	
392-40	102636-102639	has	
392-41	102640-102645	links	
392-42	102646-102648	to	
392-43	102649-102653	many	
392-44	102654-102663	resources	
392-45	102663-102664	,	

#Text=and the developer's faq item about learning about the internals. One link on that page I was not aware of is Hironobu Suzuki's very detailed website about Postgres internals. It has a lot of details I have never seen written before, so I suggest those interested should check it out. View or Post Comments
393-1	102665-102668	and	
393-2	102669-102672	the	
393-3	102673-102684	developer's	
393-4	102685-102688	faq	
393-5	102689-102693	item	
393-6	102694-102699	about	
393-7	102700-102708	learning	
393-8	102709-102714	about	
393-9	102715-102718	the	
393-10	102719-102728	internals	
393-11	102728-102729	.	
393-12	102730-102733	One	
393-13	102734-102738	link	
393-14	102739-102741	on	
393-15	102742-102746	that	
393-16	102747-102751	page	
393-17	102752-102753	I	
393-18	102754-102757	was	
393-19	102758-102761	not	
393-20	102762-102767	aware	
393-21	102768-102770	of	
393-22	102771-102773	is	
393-23	102774-102782	Hironobu	
393-24	102783-102791	Suzuki's	
393-25	102792-102796	very	
393-26	102797-102805	detailed	
393-27	102806-102813	website	
393-28	102814-102819	about	
393-29	102820-102828	Postgres	
393-30	102829-102838	internals	
393-31	102838-102839	.	
393-32	102840-102842	It	
393-33	102843-102846	has	
393-34	102847-102848	a	
393-35	102849-102852	lot	
393-36	102853-102855	of	
393-37	102856-102863	details	
393-38	102864-102865	I	
393-39	102866-102870	have	
393-40	102871-102876	never	
393-41	102877-102881	seen	
393-42	102882-102889	written	
393-43	102890-102896	before	
393-44	102896-102897	,	
393-45	102898-102900	so	
393-46	102901-102902	I	
393-47	102903-102910	suggest	
393-48	102911-102916	those	
393-49	102917-102927	interested	
393-50	102928-102934	should	
393-51	102935-102940	check	
393-52	102941-102943	it	
393-53	102944-102947	out	
393-54	102947-102948	.	
393-55	102949-102953	View	
393-56	102954-102956	or	
393-57	102957-102961	Post	
393-58	102962-102970	Comments	

#Text=Portability's Surprising Win Wednesday, May 6, 2020 When writing software, it is necessary to decide whether to use external facilities available in command-line tools, libraries, frameworks, and the operating system, or write the facilities yourself. Why would you write them yourself?
394-1	102971-102984	Portability's	
394-2	102985-102995	Surprising	
394-3	102996-102999	Win	
394-4	103000-103009	Wednesday	
394-5	103009-103010	,	
394-6	103011-103014	May	
394-7	103015-103016	6	
394-8	103016-103017	,	
394-9	103018-103022	2020	
394-10	103023-103027	When	
394-11	103028-103035	writing	
394-12	103036-103044	software	
394-13	103044-103045	,	
394-14	103046-103048	it	
394-15	103049-103051	is	
394-16	103052-103061	necessary	
394-17	103062-103064	to	
394-18	103065-103071	decide	
394-19	103072-103079	whether	
394-20	103080-103082	to	
394-21	103083-103086	use	
394-22	103087-103095	external	
394-23	103096-103106	facilities	
394-24	103107-103116	available	
394-25	103117-103119	in	
394-26	103120-103132	command-line	
394-27	103133-103138	tools	
394-28	103138-103139	,	
394-29	103140-103149	libraries	
394-30	103149-103150	,	
394-31	103151-103161	frameworks	
394-32	103161-103162	,	
394-33	103163-103166	and	
394-34	103167-103170	the	
394-35	103171-103180	operating	
394-36	103181-103187	system	
394-37	103187-103188	,	
394-38	103189-103191	or	
394-39	103192-103197	write	
394-40	103198-103201	the	
394-41	103202-103212	facilities	
394-42	103213-103221	yourself	
394-43	103221-103222	.	
394-44	103223-103226	Why	
394-45	103227-103232	would	
394-46	103233-103236	you	
394-47	103237-103242	write	
394-48	103243-103247	them	
394-49	103248-103256	yourself	
394-50	103256-103257	?	

#Text=You might be worried about adding reliance on an external facility or a facility might not have sufficient flexibility or performance. The Postgres development team has had to make similar decisions. Fortunately, we have tended to favor reliance on common operating system interfaces, tools, and libraries, e.g., OpenSSL, bison. We have avoided reliance on external facilities that are uncommon or not well maintained.
395-1	103258-103261	You	
395-2	103262-103267	might	
395-3	103268-103270	be	
395-4	103271-103278	worried	
395-5	103279-103284	about	
395-6	103285-103291	adding	
395-7	103292-103300	reliance	
395-8	103301-103303	on	
395-9	103304-103306	an	
395-10	103307-103315	external	
395-11	103316-103324	facility	
395-12	103325-103327	or	
395-13	103328-103329	a	
395-14	103330-103338	facility	
395-15	103339-103344	might	
395-16	103345-103348	not	
395-17	103349-103353	have	
395-18	103354-103364	sufficient	
395-19	103365-103376	flexibility	
395-20	103377-103379	or	
395-21	103380-103391	performance	
395-22	103391-103392	.	
395-23	103393-103396	The	
395-24	103397-103405	Postgres	
395-25	103406-103417	development	
395-26	103418-103422	team	
395-27	103423-103426	has	
395-28	103427-103430	had	
395-29	103431-103433	to	
395-30	103434-103438	make	
395-31	103439-103446	similar	
395-32	103447-103456	decisions	
395-33	103456-103457	.	
395-34	103458-103469	Fortunately	
395-35	103469-103470	,	
395-36	103471-103473	we	
395-37	103474-103478	have	
395-38	103479-103485	tended	
395-39	103486-103488	to	
395-40	103489-103494	favor	
395-41	103495-103503	reliance	
395-42	103504-103506	on	
395-43	103507-103513	common	
395-44	103514-103523	operating	
395-45	103524-103530	system	
395-46	103531-103541	interfaces	
395-47	103541-103542	,	
395-48	103543-103548	tools	
395-49	103548-103549	,	
395-50	103550-103553	and	
395-51	103554-103563	libraries	
395-52	103563-103564	,	
395-53	103565-103568	e.g	
395-54	103568-103569	.	
395-55	103569-103570	,	
395-56	103571-103578	OpenSSL	
395-57	103578-103579	,	
395-58	103580-103585	bison	
395-59	103585-103586	.	
395-60	103587-103589	We	
395-61	103590-103594	have	
395-62	103595-103602	avoided	
395-63	103603-103611	reliance	
395-64	103612-103614	on	
395-65	103615-103623	external	
395-66	103624-103634	facilities	
395-67	103635-103639	that	
395-68	103640-103643	are	
395-69	103644-103652	uncommon	
395-70	103653-103655	or	
395-71	103656-103659	not	
395-72	103660-103664	well	
395-73	103665-103675	maintained	
395-74	103675-103676	.	

#Text=Postgres has reproduced facilities that were commonly available in the operating system, tools, or libraries only when there was a clear benefit. Reproducing such facilities for a small benefit, like a little more control or a little more performance, is rarely wise. While relying on external facilities often makes Postgres less flexible and perhaps less performant, there are long-term benefits:
396-1	103677-103685	Postgres	
396-2	103686-103689	has	
396-3	103690-103700	reproduced	
396-4	103701-103711	facilities	
396-5	103712-103716	that	
396-6	103717-103721	were	
396-7	103722-103730	commonly	
396-8	103731-103740	available	
396-9	103741-103743	in	
396-10	103744-103747	the	
396-11	103748-103757	operating	
396-12	103758-103764	system	
396-13	103764-103765	,	
396-14	103766-103771	tools	
396-15	103771-103772	,	
396-16	103773-103775	or	
396-17	103776-103785	libraries	
396-18	103786-103790	only	
396-19	103791-103795	when	
396-20	103796-103801	there	
396-21	103802-103805	was	
396-22	103806-103807	a	
396-23	103808-103813	clear	
396-24	103814-103821	benefit	
396-25	103821-103822	.	
396-26	103823-103834	Reproducing	
396-27	103835-103839	such	
396-28	103840-103850	facilities	
396-29	103851-103854	for	
396-30	103855-103856	a	
396-31	103857-103862	small	
396-32	103863-103870	benefit	
396-33	103870-103871	,	
396-34	103872-103876	like	
396-35	103877-103878	a	
396-36	103879-103885	little	
396-37	103886-103890	more	
396-38	103891-103898	control	
396-39	103899-103901	or	
396-40	103902-103903	a	
396-41	103904-103910	little	
396-42	103911-103915	more	
396-43	103916-103927	performance	
396-44	103927-103928	,	
396-45	103929-103931	is	
396-46	103932-103938	rarely	
396-47	103939-103943	wise	
396-48	103943-103944	.	
396-49	103945-103950	While	
396-50	103951-103958	relying	
396-51	103959-103961	on	
396-52	103962-103970	external	
396-53	103971-103981	facilities	
396-54	103982-103987	often	
396-55	103988-103993	makes	
396-56	103994-104002	Postgres	
396-57	104003-104007	less	
396-58	104008-104016	flexible	
396-59	104017-104020	and	
396-60	104021-104028	perhaps	
396-61	104029-104033	less	
396-62	104034-104044	performant	
396-63	104044-104045	,	
396-64	104046-104051	there	
396-65	104052-104055	are	
396-66	104056-104065	long-term	
396-67	104066-104074	benefits	
396-68	104074-104075	:	

#Text=As external facilities improve their feature-set and performance, Postgres benefits from these improvements with little effort As new demands are required of these external facilities, Postgres again benefits effortlessly Let's be specific. In the early days of Postgres, file systems were not optimized for database storage. Fortunately, Postgres never implemented file systems on raw devices.
397-1	104076-104078	As	
397-2	104079-104087	external	
397-3	104088-104098	facilities	
397-4	104099-104106	improve	
397-5	104107-104112	their	
397-6	104113-104124	feature-set	
397-7	104125-104128	and	
397-8	104129-104140	performance	
397-9	104140-104141	,	
397-10	104142-104150	Postgres	
397-11	104151-104159	benefits	
397-12	104160-104164	from	
397-13	104165-104170	these	
397-14	104171-104183	improvements	
397-15	104184-104188	with	
397-16	104189-104195	little	
397-17	104196-104202	effort	
397-18	104203-104205	As	
397-19	104206-104209	new	
397-20	104210-104217	demands	
397-21	104218-104221	are	
397-22	104222-104230	required	
397-23	104231-104233	of	
397-24	104234-104239	these	
397-25	104240-104248	external	
397-26	104249-104259	facilities	
397-27	104259-104260	,	
397-28	104261-104269	Postgres	
397-29	104270-104275	again	
397-30	104276-104284	benefits	
397-31	104285-104297	effortlessly	
397-32	104298-104303	Let's	
397-33	104304-104306	be	
397-34	104307-104315	specific	
397-35	104315-104316	.	
397-36	104317-104319	In	
397-37	104320-104323	the	
397-38	104324-104329	early	
397-39	104330-104334	days	
397-40	104335-104337	of	
397-41	104338-104346	Postgres	
397-42	104346-104347	,	
397-43	104348-104352	file	
397-44	104353-104360	systems	
397-45	104361-104365	were	
397-46	104366-104369	not	
397-47	104370-104379	optimized	
397-48	104380-104383	for	
397-49	104384-104392	database	
397-50	104393-104400	storage	
397-51	104400-104401	.	
397-52	104402-104413	Fortunately	
397-53	104413-104414	,	
397-54	104415-104423	Postgres	
397-55	104424-104429	never	
397-56	104430-104441	implemented	
397-57	104442-104446	file	
397-58	104447-104454	systems	
397-59	104455-104457	on	
397-60	104458-104461	raw	
397-61	104462-104469	devices	
397-62	104469-104470	.	

#Text=Now that modern file systems, like ext4, give good database performance, Postgres benefits from file system improvements with almost no effort. Even when ssds started being used, the only change needed in Postgres was the ability to set random_page_cost at the tablespace level to handle databases where some tablespaces are on ssds and some are on magnetic storage.
398-1	104471-104474	Now	
398-2	104475-104479	that	
398-3	104480-104486	modern	
398-4	104487-104491	file	
398-5	104492-104499	systems	
398-6	104499-104500	,	
398-7	104501-104505	like	
398-8	104506-104510	ext4	
398-9	104510-104511	,	
398-10	104512-104516	give	
398-11	104517-104521	good	
398-12	104522-104530	database	
398-13	104531-104542	performance	
398-14	104542-104543	,	
398-15	104544-104552	Postgres	
398-16	104553-104561	benefits	
398-17	104562-104566	from	
398-18	104567-104571	file	
398-19	104572-104578	system	
398-20	104579-104591	improvements	
398-21	104592-104596	with	
398-22	104597-104603	almost	
398-23	104604-104606	no	
398-24	104607-104613	effort	
398-25	104613-104614	.	
398-26	104615-104619	Even	
398-27	104620-104624	when	
398-28	104625-104629	ssds	
398-29	104630-104637	started	
398-30	104638-104643	being	
398-31	104644-104648	used	
398-32	104648-104649	,	
398-33	104650-104653	the	
398-34	104654-104658	only	
398-35	104659-104665	change	
398-36	104666-104672	needed	
398-37	104673-104675	in	
398-38	104676-104684	Postgres	
398-39	104685-104688	was	
398-40	104689-104692	the	
398-41	104693-104700	ability	
398-42	104701-104703	to	
398-43	104704-104707	set	
398-44	104708-104724	random_page_cost	
398-45	104725-104727	at	
398-46	104728-104731	the	
398-47	104732-104742	tablespace	
398-48	104743-104748	level	
398-49	104749-104751	to	
398-50	104752-104758	handle	
398-51	104759-104768	databases	
398-52	104769-104774	where	
398-53	104775-104779	some	
398-54	104780-104791	tablespaces	
398-55	104792-104795	are	
398-56	104796-104798	on	
398-57	104799-104803	ssds	
398-58	104804-104807	and	
398-59	104808-104812	some	
398-60	104813-104816	are	
398-61	104817-104819	on	
398-62	104820-104828	magnetic	
398-63	104829-104836	storage	
398-64	104836-104837	.	

#Text=When virtualization, cloud, containers, and container orchestration (e.g., Kubernetes) became popular, Postgres had to do almost nothing to run well on these platforms. (It is true that some of the Postgres enterprise deployment tools required repackaging and re-engineering.) Because of this philosophy, Postgres has remained relatively light-weight compared to other relational database systems, and this has benefited Postgres in environments where nimble deployments are
399-1	104838-104842	When	
399-2	104843-104857	virtualization	
399-3	104857-104858	,	
399-4	104859-104864	cloud	
399-5	104864-104865	,	
399-6	104866-104876	containers	
399-7	104876-104877	,	
399-8	104878-104881	and	
399-9	104882-104891	container	
399-10	104892-104905	orchestration	
399-11	104906-104907	(	
399-12	104907-104910	e.g	
399-13	104910-104911	.	
399-14	104911-104912	,	
399-15	104913-104923	Kubernetes	
399-16	104923-104924	)	
399-17	104925-104931	became	
399-18	104932-104939	popular	
399-19	104939-104940	,	
399-20	104941-104949	Postgres	
399-21	104950-104953	had	
399-22	104954-104956	to	
399-23	104957-104959	do	
399-24	104960-104966	almost	
399-25	104967-104974	nothing	
399-26	104975-104977	to	
399-27	104978-104981	run	
399-28	104982-104986	well	
399-29	104987-104989	on	
399-30	104990-104995	these	
399-31	104996-105005	platforms	
399-32	105005-105006	.	
399-33	105007-105008	(	
399-34	105008-105010	It	
399-35	105011-105013	is	
399-36	105014-105018	true	
399-37	105019-105023	that	
399-38	105024-105028	some	
399-39	105029-105031	of	
399-40	105032-105035	the	
399-41	105036-105044	Postgres	
399-42	105045-105055	enterprise	
399-43	105056-105066	deployment	
399-44	105067-105072	tools	
399-45	105073-105081	required	
399-46	105082-105093	repackaging	
399-47	105094-105097	and	
399-48	105098-105112	re-engineering	
399-49	105112-105113	.	
399-50	105113-105114	)	
399-51	105115-105122	Because	
399-52	105123-105125	of	
399-53	105126-105130	this	
399-54	105131-105141	philosophy	
399-55	105141-105142	,	
399-56	105143-105151	Postgres	
399-57	105152-105155	has	
399-58	105156-105164	remained	
399-59	105165-105175	relatively	
399-60	105176-105188	light-weight	
399-61	105189-105197	compared	
399-62	105198-105200	to	
399-63	105201-105206	other	
399-64	105207-105217	relational	
399-65	105218-105226	database	
399-66	105227-105234	systems	
399-67	105234-105235	,	
399-68	105236-105239	and	
399-69	105240-105244	this	
399-70	105245-105248	has	
399-71	105249-105258	benefited	
399-72	105259-105267	Postgres	
399-73	105268-105270	in	
399-74	105271-105283	environments	
399-75	105284-105289	where	
399-76	105290-105296	nimble	
399-77	105297-105308	deployments	
399-78	105309-105312	are	

#Text=favored. View or Post Comments With ... Materialized and Optimizer Control Monday, May 4, 2020 Before Postgres 12, queries specified as common table expressions (with clauses) always behaved as optimization barriers, meaning that
400-1	105313-105320	favored	
400-2	105320-105321	.	
400-3	105322-105326	View	
400-4	105327-105329	or	
400-5	105330-105334	Post	
400-6	105335-105343	Comments	
400-7	105344-105348	With	
400-8	105349-105350	.	
400-9	105350-105351	.	
400-10	105351-105352	.	
400-11	105353-105365	Materialized	
400-12	105366-105369	and	
400-13	105370-105379	Optimizer	
400-14	105380-105387	Control	
400-15	105388-105394	Monday	
400-16	105394-105395	,	
400-17	105396-105399	May	
400-18	105400-105401	4	
400-19	105401-105402	,	
400-20	105403-105407	2020	
400-21	105408-105414	Before	
400-22	105415-105423	Postgres	
400-23	105424-105426	12	
400-24	105426-105427	,	
400-25	105428-105435	queries	
400-26	105436-105445	specified	
400-27	105446-105448	as	
400-28	105449-105455	common	
400-29	105456-105461	table	
400-30	105462-105473	expressions	
400-31	105474-105475	(	
400-32	105475-105479	with	
400-33	105480-105487	clauses	
400-34	105487-105488	)	
400-35	105489-105495	always	
400-36	105496-105503	behaved	
400-37	105504-105506	as	
400-38	105507-105519	optimization	
400-39	105520-105528	barriers	
400-40	105528-105529	,	
400-41	105530-105537	meaning	
400-42	105538-105542	that	

#Text=common table expression queries were executed independently, and were not moved to later parts of the query. Starting in Postgres 12, if a common table expression is referenced only once, and the keyword materialized is not used, it can be moved to a place later in the query where it can be better optimized;
401-1	105543-105549	common	
401-2	105550-105555	table	
401-3	105556-105566	expression	
401-4	105567-105574	queries	
401-5	105575-105579	were	
401-6	105580-105588	executed	
401-7	105589-105602	independently	
401-8	105602-105603	,	
401-9	105604-105607	and	
401-10	105608-105612	were	
401-11	105613-105616	not	
401-12	105617-105622	moved	
401-13	105623-105625	to	
401-14	105626-105631	later	
401-15	105632-105637	parts	
401-16	105638-105640	of	
401-17	105641-105644	the	
401-18	105645-105650	query	
401-19	105650-105651	.	
401-20	105652-105660	Starting	
401-21	105661-105663	in	
401-22	105664-105672	Postgres	
401-23	105673-105675	12	
401-24	105675-105676	,	
401-25	105677-105679	if	
401-26	105680-105681	a	
401-27	105682-105688	common	
401-28	105689-105694	table	
401-29	105695-105705	expression	
401-30	105706-105708	is	
401-31	105709-105719	referenced	
401-32	105720-105724	only	
401-33	105725-105729	once	
401-34	105729-105730	,	
401-35	105731-105734	and	
401-36	105735-105738	the	
401-37	105739-105746	keyword	
401-38	105747-105759	materialized	
401-39	105760-105762	is	
401-40	105763-105766	not	
401-41	105767-105771	used	
401-42	105771-105772	,	
401-43	105773-105775	it	
401-44	105776-105779	can	
401-45	105780-105782	be	
401-46	105783-105788	moved	
401-47	105789-105791	to	
401-48	105792-105793	a	
401-49	105794-105799	place	
401-50	105800-105805	later	
401-51	105806-105808	in	
401-52	105809-105812	the	
401-53	105813-105818	query	
401-54	105819-105824	where	
401-55	105825-105827	it	
401-56	105828-105831	can	
401-57	105832-105834	be	
401-58	105835-105841	better	
401-59	105842-105851	optimized	
401-60	105851-105852	;	

#Text=this improves optimization possibilities. However, if the movement of common table expression queries increases the from clause table count above the geqo_threshold, Postgres will decide it can't efficiently optimize such a high table count query and will use the genetic query optimizer.
402-1	105853-105857	this	
402-2	105858-105866	improves	
402-3	105867-105879	optimization	
402-4	105880-105893	possibilities	
402-5	105893-105894	.	
402-6	105895-105902	However	
402-7	105902-105903	,	
402-8	105904-105906	if	
402-9	105907-105910	the	
402-10	105911-105919	movement	
402-11	105920-105922	of	
402-12	105923-105929	common	
402-13	105930-105935	table	
402-14	105936-105946	expression	
402-15	105947-105954	queries	
402-16	105955-105964	increases	
402-17	105965-105968	the	
402-18	105969-105973	from	
402-19	105974-105980	clause	
402-20	105981-105986	table	
402-21	105987-105992	count	
402-22	105993-105998	above	
402-23	105999-106002	the	
402-24	106003-106017	geqo_threshold	
402-25	106017-106018	,	
402-26	106019-106027	Postgres	
402-27	106028-106032	will	
402-28	106033-106039	decide	
402-29	106040-106042	it	
402-30	106043-106048	can't	
402-31	106049-106060	efficiently	
402-32	106061-106069	optimize	
402-33	106070-106074	such	
402-34	106075-106076	a	
402-35	106077-106081	high	
402-36	106082-106087	table	
402-37	106088-106093	count	
402-38	106094-106099	query	
402-39	106100-106103	and	
402-40	106104-106108	will	
402-41	106109-106112	use	
402-42	106113-106116	the	
402-43	106117-106124	genetic	
402-44	106125-106130	query	
402-45	106131-106140	optimizer	
402-46	106140-106141	.	

#Text=So, while the new Postgres 12 behavior of in-lining common table expressions usually increases the quality of optimized plans, in some cases it can decrease them by enabling the genetic query optimizer. In a way, in pre-Postgres 12 or with the use of materialized, the query author is doing the optimization by creating common table expressions, while in other cases, the optimizer has greater control, though even the optimizer can determine the query is too complex and fall back to less-precise genetic query optimization.
403-1	106142-106144	So	
403-2	106144-106145	,	
403-3	106146-106151	while	
403-4	106152-106155	the	
403-5	106156-106159	new	
403-6	106160-106168	Postgres	
403-7	106169-106171	12	
403-8	106172-106180	behavior	
403-9	106181-106183	of	
403-10	106184-106193	in-lining	
403-11	106194-106200	common	
403-12	106201-106206	table	
403-13	106207-106218	expressions	
403-14	106219-106226	usually	
403-15	106227-106236	increases	
403-16	106237-106240	the	
403-17	106241-106248	quality	
403-18	106249-106251	of	
403-19	106252-106261	optimized	
403-20	106262-106267	plans	
403-21	106267-106268	,	
403-22	106269-106271	in	
403-23	106272-106276	some	
403-24	106277-106282	cases	
403-25	106283-106285	it	
403-26	106286-106289	can	
403-27	106290-106298	decrease	
403-28	106299-106303	them	
403-29	106304-106306	by	
403-30	106307-106315	enabling	
403-31	106316-106319	the	
403-32	106320-106327	genetic	
403-33	106328-106333	query	
403-34	106334-106343	optimizer	
403-35	106343-106344	.	
403-36	106345-106347	In	
403-37	106348-106349	a	
403-38	106350-106353	way	
403-39	106353-106354	,	
403-40	106355-106357	in	
403-41	106358-106370	pre-Postgres	
403-42	106371-106373	12	
403-43	106374-106376	or	
403-44	106377-106381	with	
403-45	106382-106385	the	
403-46	106386-106389	use	
403-47	106390-106392	of	
403-48	106393-106405	materialized	
403-49	106405-106406	,	
403-50	106407-106410	the	
403-51	106411-106416	query	
403-52	106417-106423	author	
403-53	106424-106426	is	
403-54	106427-106432	doing	
403-55	106433-106436	the	
403-56	106437-106449	optimization	
403-57	106450-106452	by	
403-58	106453-106461	creating	
403-59	106462-106468	common	
403-60	106469-106474	table	
403-61	106475-106486	expressions	
403-62	106486-106487	,	
403-63	106488-106493	while	
403-64	106494-106496	in	
403-65	106497-106502	other	
403-66	106503-106508	cases	
403-67	106508-106509	,	
403-68	106510-106513	the	
403-69	106514-106523	optimizer	
403-70	106524-106527	has	
403-71	106528-106535	greater	
403-72	106536-106543	control	
403-73	106543-106544	,	
403-74	106545-106551	though	
403-75	106552-106556	even	
403-76	106557-106560	the	
403-77	106561-106570	optimizer	
403-78	106571-106574	can	
403-79	106575-106584	determine	
403-80	106585-106588	the	
403-81	106589-106594	query	
403-82	106595-106597	is	
403-83	106598-106601	too	
403-84	106602-106609	complex	
403-85	106610-106613	and	
403-86	106614-106618	fall	
403-87	106619-106623	back	
403-88	106624-106626	to	
403-89	106627-106639	less-precise	
403-90	106640-106647	genetic	
403-91	106648-106653	query	
403-92	106654-106666	optimization	
403-93	106666-106667	.	

#Text=View or Post Comments Background Writes Friday, May 1, 2020 Postgres must guarantee durability and good performance. To meet these objectives, Postgres does writes to the file system and storage in the background as much as possible.
404-1	106668-106672	View	
404-2	106673-106675	or	
404-3	106676-106680	Post	
404-4	106681-106689	Comments	
404-5	106690-106700	Background	
404-6	106701-106707	Writes	
404-7	106708-106714	Friday	
404-8	106714-106715	,	
404-9	106716-106719	May	
404-10	106720-106721	1	
404-11	106721-106722	,	
404-12	106723-106727	2020	
404-13	106728-106736	Postgres	
404-14	106737-106741	must	
404-15	106742-106751	guarantee	
404-16	106752-106762	durability	
404-17	106763-106766	and	
404-18	106767-106771	good	
404-19	106772-106783	performance	
404-20	106783-106784	.	
404-21	106785-106787	To	
404-22	106788-106792	meet	
404-23	106793-106798	these	
404-24	106799-106809	objectives	
404-25	106809-106810	,	
404-26	106811-106819	Postgres	
404-27	106820-106824	does	
404-28	106825-106831	writes	
404-29	106832-106834	to	
404-30	106835-106838	the	
404-31	106839-106843	file	
404-32	106844-106850	system	
404-33	106851-106854	and	
404-34	106855-106862	storage	
404-35	106863-106865	in	
404-36	106866-106869	the	
404-37	106870-106880	background	
404-38	106881-106883	as	
404-39	106884-106888	much	
404-40	106889-106891	as	
404-41	106892-106900	possible	
404-42	106900-106901	.	

#Text=In fact, there are only two major cases where writes happen in the foreground: Write-ahead log writes happen before commits are acknowledged to the client A needed shared_buffer is dirty and must be written to storage so it can be replaced Write-ahead log writes (#1) can be controlled using various settings.
405-1	106902-106904	In	
405-2	106905-106909	fact	
405-3	106909-106910	,	
405-4	106911-106916	there	
405-5	106917-106920	are	
405-6	106921-106925	only	
405-7	106926-106929	two	
405-8	106930-106935	major	
405-9	106936-106941	cases	
405-10	106942-106947	where	
405-11	106948-106954	writes	
405-12	106955-106961	happen	
405-13	106962-106964	in	
405-14	106965-106968	the	
405-15	106969-106979	foreground	
405-16	106979-106980	:	
405-17	106981-106992	Write-ahead	
405-18	106993-106996	log	
405-19	106997-107003	writes	
405-20	107004-107010	happen	
405-21	107011-107017	before	
405-22	107018-107025	commits	
405-23	107026-107029	are	
405-24	107030-107042	acknowledged	
405-25	107043-107045	to	
405-26	107046-107049	the	
405-27	107050-107056	client	
405-28	107057-107058	A	
405-29	107059-107065	needed	
405-30	107066-107079	shared_buffer	
405-31	107080-107082	is	
405-32	107083-107088	dirty	
405-33	107089-107092	and	
405-34	107093-107097	must	
405-35	107098-107100	be	
405-36	107101-107108	written	
405-37	107109-107111	to	
405-38	107112-107119	storage	
405-39	107120-107122	so	
405-40	107123-107125	it	
405-41	107126-107129	can	
405-42	107130-107132	be	
405-43	107133-107141	replaced	
405-44	107142-107153	Write-ahead	
405-45	107154-107157	log	
405-46	107158-107164	writes	
405-47	107165-107166	(	
405-48	107166-107168	#1	
405-49	107168-107169	)	
405-50	107170-107173	can	
405-51	107174-107176	be	
405-52	107177-107187	controlled	
405-53	107188-107193	using	
405-54	107194-107201	various	
405-55	107202-107210	settings	
405-56	107210-107211	.	

#Text=Dirty shared buffer writes (#2) that happen in the foreground are minimized if the background writer is operating efficiently. You can monitor such writes by viewing the probe buffer-write-dirty-start and buffer-write-dirty-done. View or Post Comments Optimal Use of Ssds Wednesday, April 29, 2020
406-1	107212-107217	Dirty	
406-2	107218-107224	shared	
406-3	107225-107231	buffer	
406-4	107232-107238	writes	
406-5	107239-107240	(	
406-6	107240-107242	#2	
406-7	107242-107243	)	
406-8	107244-107248	that	
406-9	107249-107255	happen	
406-10	107256-107258	in	
406-11	107259-107262	the	
406-12	107263-107273	foreground	
406-13	107274-107277	are	
406-14	107278-107287	minimized	
406-15	107288-107290	if	
406-16	107291-107294	the	
406-17	107295-107305	background	
406-18	107306-107312	writer	
406-19	107313-107315	is	
406-20	107316-107325	operating	
406-21	107326-107337	efficiently	
406-22	107337-107338	.	
406-23	107339-107342	You	
406-24	107343-107346	can	
406-25	107347-107354	monitor	
406-26	107355-107359	such	
406-27	107360-107366	writes	
406-28	107367-107369	by	
406-29	107370-107377	viewing	
406-30	107378-107381	the	
406-31	107382-107387	probe	
406-32	107388-107412	buffer-write-dirty-start	
406-33	107413-107416	and	
406-34	107417-107440	buffer-write-dirty-done	
406-35	107440-107441	.	
406-36	107442-107446	View	
406-37	107447-107449	or	
406-38	107450-107454	Post	
406-39	107455-107463	Comments	
406-40	107464-107471	Optimal	
406-41	107472-107475	Use	
406-42	107476-107478	of	
406-43	107479-107483	Ssds	
406-44	107484-107493	Wednesday	
406-45	107493-107494	,	
406-46	107495-107500	April	
406-47	107501-107503	29	
406-48	107503-107504	,	
406-49	107505-107509	2020	

#Text=Ssds have different performance characteristics than magnetic disks, and using them optimally isn't always clear. Ssds have several performance benefits: Very fast fsyncs Much faster random reads and writes Faster sequential reads and writes So, if all your data is stored on ssds, you will certainly improve performance.
407-1	107510-107514	Ssds	
407-2	107515-107519	have	
407-3	107520-107529	different	
407-4	107530-107541	performance	
407-5	107542-107557	characteristics	
407-6	107558-107562	than	
407-7	107563-107571	magnetic	
407-8	107572-107577	disks	
407-9	107577-107578	,	
407-10	107579-107582	and	
407-11	107583-107588	using	
407-12	107589-107593	them	
407-13	107594-107603	optimally	
407-14	107604-107609	isn't	
407-15	107610-107616	always	
407-16	107617-107622	clear	
407-17	107622-107623	.	
407-18	107624-107628	Ssds	
407-19	107629-107633	have	
407-20	107634-107641	several	
407-21	107642-107653	performance	
407-22	107654-107662	benefits	
407-23	107662-107663	:	
407-24	107664-107668	Very	
407-25	107669-107673	fast	
407-26	107674-107680	fsyncs	
407-27	107681-107685	Much	
407-28	107686-107692	faster	
407-29	107693-107699	random	
407-30	107700-107705	reads	
407-31	107706-107709	and	
407-32	107710-107716	writes	
407-33	107717-107723	Faster	
407-34	107724-107734	sequential	
407-35	107735-107740	reads	
407-36	107741-107744	and	
407-37	107745-107751	writes	
407-38	107752-107754	So	
407-39	107754-107755	,	
407-40	107756-107758	if	
407-41	107759-107762	all	
407-42	107763-107767	your	
407-43	107768-107772	data	
407-44	107773-107775	is	
407-45	107776-107782	stored	
407-46	107783-107785	on	
407-47	107786-107790	ssds	
407-48	107790-107791	,	
407-49	107792-107795	you	
407-50	107796-107800	will	
407-51	107801-107810	certainly	
407-52	107811-107818	improve	
407-53	107819-107830	performance	
407-54	107830-107831	.	

#Text=If you are mixing ssds and magnetic disks, ideally you should use ssds in ways that give the greatest benefit. Starting with number one, putting the write-ahead log on ssds is a great way to improve fsync performance. For number two, moving indexes to tablespaces using ssd storage can greatly improve performance because index access is usually random.
408-1	107832-107834	If	
408-2	107835-107838	you	
408-3	107839-107842	are	
408-4	107843-107849	mixing	
408-5	107850-107854	ssds	
408-6	107855-107858	and	
408-7	107859-107867	magnetic	
408-8	107868-107873	disks	
408-9	107873-107874	,	
408-10	107875-107882	ideally	
408-11	107883-107886	you	
408-12	107887-107893	should	
408-13	107894-107897	use	
408-14	107898-107902	ssds	
408-15	107903-107905	in	
408-16	107906-107910	ways	
408-17	107911-107915	that	
408-18	107916-107920	give	
408-19	107921-107924	the	
408-20	107925-107933	greatest	
408-21	107934-107941	benefit	
408-22	107941-107942	.	
408-23	107943-107951	Starting	
408-24	107952-107956	with	
408-25	107957-107963	number	
408-26	107964-107967	one	
408-27	107967-107968	,	
408-28	107969-107976	putting	
408-29	107977-107980	the	
408-30	107981-107992	write-ahead	
408-31	107993-107996	log	
408-32	107997-107999	on	
408-33	108000-108004	ssds	
408-34	108005-108007	is	
408-35	108008-108009	a	
408-36	108010-108015	great	
408-37	108016-108019	way	
408-38	108020-108022	to	
408-39	108023-108030	improve	
408-40	108031-108036	fsync	
408-41	108037-108048	performance	
408-42	108048-108049	.	
408-43	108050-108053	For	
408-44	108054-108060	number	
408-45	108061-108064	two	
408-46	108064-108065	,	
408-47	108066-108072	moving	
408-48	108073-108080	indexes	
408-49	108081-108083	to	
408-50	108084-108095	tablespaces	
408-51	108096-108101	using	
408-52	108102-108105	ssd	
408-53	108106-108113	storage	
408-54	108114-108117	can	
408-55	108118-108125	greatly	
408-56	108126-108133	improve	
408-57	108134-108145	performance	
408-58	108146-108153	because	
408-59	108154-108159	index	
408-60	108160-108166	access	
408-61	108167-108169	is	
408-62	108170-108177	usually	
408-63	108178-108184	random	
408-64	108184-108185	.	

#Text=When using ssds, the default value for random_page_cost should be lowered, perhaps to 1.1. This can be set at the tablespace level if there is a mix of tablespaces on ssds and magnetic disks.
409-1	108186-108190	When	
409-2	108191-108196	using	
409-3	108197-108201	ssds	
409-4	108201-108202	,	
409-5	108203-108206	the	
409-6	108207-108214	default	
409-7	108215-108220	value	
409-8	108221-108224	for	
409-9	108225-108241	random_page_cost	
409-10	108242-108248	should	
409-11	108249-108251	be	
409-12	108252-108259	lowered	
409-13	108259-108260	,	
409-14	108261-108268	perhaps	
409-15	108269-108271	to	
409-16	108272-108275	1.1	
409-17	108275-108276	.	
409-18	108277-108281	This	
409-19	108282-108285	can	
409-20	108286-108288	be	
409-21	108289-108292	set	
409-22	108293-108295	at	
409-23	108296-108299	the	
409-24	108300-108310	tablespace	
409-25	108311-108316	level	
409-26	108317-108319	if	
409-27	108320-108325	there	
409-28	108326-108328	is	
409-29	108329-108330	a	
409-30	108331-108334	mix	
409-31	108335-108337	of	
409-32	108338-108349	tablespaces	
409-33	108350-108352	on	
409-34	108353-108357	ssds	
409-35	108358-108361	and	
409-36	108362-108370	magnetic	
409-37	108371-108376	disks	
409-38	108376-108377	.	

#Text=For number three, it is also possible to create tablespaces on ssds for current data, and place archive data on tablespaces that use magnetic disks. By using table partitioning, a partitioned table can transparently span ssds and magnetic disk tablespaces. View or Post Comments Does Postgres Support Compression? Monday, April 27, 2020
410-1	108378-108381	For	
410-2	108382-108388	number	
410-3	108389-108394	three	
410-4	108394-108395	,	
410-5	108396-108398	it	
410-6	108399-108401	is	
410-7	108402-108406	also	
410-8	108407-108415	possible	
410-9	108416-108418	to	
410-10	108419-108425	create	
410-11	108426-108437	tablespaces	
410-12	108438-108440	on	
410-13	108441-108445	ssds	
410-14	108446-108449	for	
410-15	108450-108457	current	
410-16	108458-108462	data	
410-17	108462-108463	,	
410-18	108464-108467	and	
410-19	108468-108473	place	
410-20	108474-108481	archive	
410-21	108482-108486	data	
410-22	108487-108489	on	
410-23	108490-108501	tablespaces	
410-24	108502-108506	that	
410-25	108507-108510	use	
410-26	108511-108519	magnetic	
410-27	108520-108525	disks	
410-28	108525-108526	.	
410-29	108527-108529	By	
410-30	108530-108535	using	
410-31	108536-108541	table	
410-32	108542-108554	partitioning	
410-33	108554-108555	,	
410-34	108556-108557	a	
410-35	108558-108569	partitioned	
410-36	108570-108575	table	
410-37	108576-108579	can	
410-38	108580-108593	transparently	
410-39	108594-108598	span	
410-40	108599-108603	ssds	
410-41	108604-108607	and	
410-42	108608-108616	magnetic	
410-43	108617-108621	disk	
410-44	108622-108633	tablespaces	
410-45	108633-108634	.	
410-46	108635-108639	View	
410-47	108640-108642	or	
410-48	108643-108647	Post	
410-49	108648-108656	Comments	
410-50	108657-108661	Does	
410-51	108662-108670	Postgres	
410-52	108671-108678	Support	
410-53	108679-108690	Compression	
410-54	108690-108691	?	
410-55	108692-108698	Monday	
410-56	108698-108699	,	
410-57	108700-108705	April	
410-58	108706-108708	27	
410-59	108708-108709	,	
410-60	108710-108714	2020	

#Text=I am often asked if Postgres supports compression, and my answer is always a complicated dance around what "compression" level they are asking about. There are six possible levels of database compression: single field across rows in a single page across rows in a single column across all columns and rows in a table across tables in a database across databases Number one (single field) is currently done by toast.
411-1	108715-108716	I	
411-2	108717-108719	am	
411-3	108720-108725	often	
411-4	108726-108731	asked	
411-5	108732-108734	if	
411-6	108735-108743	Postgres	
411-7	108744-108752	supports	
411-8	108753-108764	compression	
411-9	108764-108765	,	
411-10	108766-108769	and	
411-11	108770-108772	my	
411-12	108773-108779	answer	
411-13	108780-108782	is	
411-14	108783-108789	always	
411-15	108790-108791	a	
411-16	108792-108803	complicated	
411-17	108804-108809	dance	
411-18	108810-108816	around	
411-19	108817-108821	what	
411-20	108822-108823	"	
411-21	108823-108834	compression	
411-22	108834-108835	"	
411-23	108836-108841	level	
411-24	108842-108846	they	
411-25	108847-108850	are	
411-26	108851-108857	asking	
411-27	108858-108863	about	
411-28	108863-108864	.	
411-29	108865-108870	There	
411-30	108871-108874	are	
411-31	108875-108878	six	
411-32	108879-108887	possible	
411-33	108888-108894	levels	
411-34	108895-108897	of	
411-35	108898-108906	database	
411-36	108907-108918	compression	
411-37	108918-108919	:	
411-38	108920-108926	single	
411-39	108927-108932	field	
411-40	108933-108939	across	
411-41	108940-108944	rows	
411-42	108945-108947	in	
411-43	108948-108949	a	
411-44	108950-108956	single	
411-45	108957-108961	page	
411-46	108962-108968	across	
411-47	108969-108973	rows	
411-48	108974-108976	in	
411-49	108977-108978	a	
411-50	108979-108985	single	
411-51	108986-108992	column	
411-52	108993-108999	across	
411-53	109000-109003	all	
411-54	109004-109011	columns	
411-55	109012-109015	and	
411-56	109016-109020	rows	
411-57	109021-109023	in	
411-58	109024-109025	a	
411-59	109026-109031	table	
411-60	109032-109038	across	
411-61	109039-109045	tables	
411-62	109046-109048	in	
411-63	109049-109050	a	
411-64	109051-109059	database	
411-65	109060-109066	across	
411-66	109067-109076	databases	
411-67	109077-109083	Number	
411-68	109084-109087	one	
411-69	109088-109089	(	
411-70	109089-109095	single	
411-71	109096-109101	field	
411-72	109101-109102	)	
411-73	109103-109105	is	
411-74	109106-109115	currently	
411-75	109116-109120	done	
411-76	109121-109123	by	
411-77	109124-109129	toast	
411-78	109129-109130	.	

#Text=Number two (across rows in a single page) is a practical optimization where a compression routine blindly looks for repeating values in a page without understanding its structure. The difficulty of implementing this happens when a page is stored using its compressed length (rather than the uncompressed 8k), the page contents change, and the new contents compress less well than the previous contents.
412-1	109131-109137	Number	
412-2	109138-109141	two	
412-3	109142-109143	(	
412-4	109143-109149	across	
412-5	109150-109154	rows	
412-6	109155-109157	in	
412-7	109158-109159	a	
412-8	109160-109166	single	
412-9	109167-109171	page	
412-10	109171-109172	)	
412-11	109173-109175	is	
412-12	109176-109177	a	
412-13	109178-109187	practical	
412-14	109188-109200	optimization	
412-15	109201-109206	where	
412-16	109207-109208	a	
412-17	109209-109220	compression	
412-18	109221-109228	routine	
412-19	109229-109236	blindly	
412-20	109237-109242	looks	
412-21	109243-109246	for	
412-22	109247-109256	repeating	
412-23	109257-109263	values	
412-24	109264-109266	in	
412-25	109267-109268	a	
412-26	109269-109273	page	
412-27	109274-109281	without	
412-28	109282-109295	understanding	
412-29	109296-109299	its	
412-30	109300-109309	structure	
412-31	109309-109310	.	
412-32	109311-109314	The	
412-33	109315-109325	difficulty	
412-34	109326-109328	of	
412-35	109329-109341	implementing	
412-36	109342-109346	this	
412-37	109347-109354	happens	
412-38	109355-109359	when	
412-39	109360-109361	a	
412-40	109362-109366	page	
412-41	109367-109369	is	
412-42	109370-109376	stored	
412-43	109377-109382	using	
412-44	109383-109386	its	
412-45	109387-109397	compressed	
412-46	109398-109404	length	
412-47	109405-109406	(	
412-48	109406-109412	rather	
412-49	109413-109417	than	
412-50	109418-109421	the	
412-51	109422-109434	uncompressed	
412-52	109435-109437	8k	
412-53	109437-109438	)	
412-54	109438-109439	,	
412-55	109440-109443	the	
412-56	109444-109448	page	
412-57	109449-109457	contents	
412-58	109458-109464	change	
412-59	109464-109465	,	
412-60	109466-109469	and	
412-61	109470-109473	the	
412-62	109474-109477	new	
412-63	109478-109486	contents	
412-64	109487-109495	compress	
412-65	109496-109500	less	
412-66	109501-109505	well	
412-67	109506-109510	than	
412-68	109511-109514	the	
412-69	109515-109523	previous	
412-70	109524-109532	contents	
412-71	109532-109533	.	

#Text=In this case, the compressed page contents would be larger and it would be very complex to fit the page into the existing space in the file. A different file layout is really required for this, so pages can be placed anywhere in the file, without affecting index access. A team is working on adding this feature using Postgres's
413-1	109534-109536	In	
413-2	109537-109541	this	
413-3	109542-109546	case	
413-4	109546-109547	,	
413-5	109548-109551	the	
413-6	109552-109562	compressed	
413-7	109563-109567	page	
413-8	109568-109576	contents	
413-9	109577-109582	would	
413-10	109583-109585	be	
413-11	109586-109592	larger	
413-12	109593-109596	and	
413-13	109597-109599	it	
413-14	109600-109605	would	
413-15	109606-109608	be	
413-16	109609-109613	very	
413-17	109614-109621	complex	
413-18	109622-109624	to	
413-19	109625-109628	fit	
413-20	109629-109632	the	
413-21	109633-109637	page	
413-22	109638-109642	into	
413-23	109643-109646	the	
413-24	109647-109655	existing	
413-25	109656-109661	space	
413-26	109662-109664	in	
413-27	109665-109668	the	
413-28	109669-109673	file	
413-29	109673-109674	.	
413-30	109675-109676	A	
413-31	109677-109686	different	
413-32	109687-109691	file	
413-33	109692-109698	layout	
413-34	109699-109701	is	
413-35	109702-109708	really	
413-36	109709-109717	required	
413-37	109718-109721	for	
413-38	109722-109726	this	
413-39	109726-109727	,	
413-40	109728-109730	so	
413-41	109731-109736	pages	
413-42	109737-109740	can	
413-43	109741-109743	be	
413-44	109744-109750	placed	
413-45	109751-109759	anywhere	
413-46	109760-109762	in	
413-47	109763-109766	the	
413-48	109767-109771	file	
413-49	109771-109772	,	
413-50	109773-109780	without	
413-51	109781-109790	affecting	
413-52	109791-109796	index	
413-53	109797-109803	access	
413-54	109803-109804	.	
413-55	109805-109806	A	
413-56	109807-109811	team	
413-57	109812-109814	is	
413-58	109815-109822	working	
413-59	109823-109825	on	
413-60	109826-109832	adding	
413-61	109833-109837	this	
413-62	109838-109845	feature	
413-63	109846-109851	using	
413-64	109852-109862	Postgres's	

#Text=table access method interface. Number three (across rows in a single column) is the classic definition of a columnar database. A team is also working on that. Just like number two, this requires using a different storage layout than Postgres's default, and the table access method
414-1	109863-109868	table	
414-2	109869-109875	access	
414-3	109876-109882	method	
414-4	109883-109892	interface	
414-5	109892-109893	.	
414-6	109894-109900	Number	
414-7	109901-109906	three	
414-8	109907-109908	(	
414-9	109908-109914	across	
414-10	109915-109919	rows	
414-11	109920-109922	in	
414-12	109923-109924	a	
414-13	109925-109931	single	
414-14	109932-109938	column	
414-15	109938-109939	)	
414-16	109940-109942	is	
414-17	109943-109946	the	
414-18	109947-109954	classic	
414-19	109955-109965	definition	
414-20	109966-109968	of	
414-21	109969-109970	a	
414-22	109971-109979	columnar	
414-23	109980-109988	database	
414-24	109988-109989	.	
414-25	109990-109991	A	
414-26	109992-109996	team	
414-27	109997-109999	is	
414-28	110000-110004	also	
414-29	110005-110012	working	
414-30	110013-110015	on	
414-31	110016-110020	that	
414-32	110020-110021	.	
414-33	110022-110026	Just	
414-34	110027-110031	like	
414-35	110032-110038	number	
414-36	110039-110042	two	
414-37	110042-110043	,	
414-38	110044-110048	this	
414-39	110049-110057	requires	
414-40	110058-110063	using	
414-41	110064-110065	a	
414-42	110066-110075	different	
414-43	110076-110083	storage	
414-44	110084-110090	layout	
414-45	110091-110095	than	
414-46	110096-110106	Postgres's	
414-47	110107-110114	default	
414-48	110114-110115	,	
414-49	110116-110119	and	
414-50	110120-110123	the	
414-51	110124-110129	table	
414-52	110130-110136	access	
414-53	110137-110143	method	

#Text=interface makes this possible. Number four can be done using file system compression. Numbers five and six would be nice, but it unclear how this could be done efficiently without adding unacceptable complexity to the database. View or Post Comments Multi-Host Technologies Friday, April 24, 2020
415-1	110144-110153	interface	
415-2	110154-110159	makes	
415-3	110160-110164	this	
415-4	110165-110173	possible	
415-5	110173-110174	.	
415-6	110175-110181	Number	
415-7	110182-110186	four	
415-8	110187-110190	can	
415-9	110191-110193	be	
415-10	110194-110198	done	
415-11	110199-110204	using	
415-12	110205-110209	file	
415-13	110210-110216	system	
415-14	110217-110228	compression	
415-15	110228-110229	.	
415-16	110230-110237	Numbers	
415-17	110238-110242	five	
415-18	110243-110246	and	
415-19	110247-110250	six	
415-20	110251-110256	would	
415-21	110257-110259	be	
415-22	110260-110264	nice	
415-23	110264-110265	,	
415-24	110266-110269	but	
415-25	110270-110272	it	
415-26	110273-110280	unclear	
415-27	110281-110284	how	
415-28	110285-110289	this	
415-29	110290-110295	could	
415-30	110296-110298	be	
415-31	110299-110303	done	
415-32	110304-110315	efficiently	
415-33	110316-110323	without	
415-34	110324-110330	adding	
415-35	110331-110343	unacceptable	
415-36	110344-110354	complexity	
415-37	110355-110357	to	
415-38	110358-110361	the	
415-39	110362-110370	database	
415-40	110370-110371	.	
415-41	110372-110376	View	
415-42	110377-110379	or	
415-43	110380-110384	Post	
415-44	110385-110393	Comments	
415-45	110394-110404	Multi-Host	
415-46	110405-110417	Technologies	
415-47	110418-110424	Friday	
415-48	110424-110425	,	
415-49	110426-110431	April	
415-50	110432-110434	24	
415-51	110434-110435	,	
415-52	110436-110440	2020	

#Text=There are so many multi-host technologies and it is hard to remember the benefits of each one, so I decided to create a list: High availability: Streaming replication is the simplest way to have multiple copies of your database, ready for fail over Read scaling: Pgpool allows replicas (slide 17) to handle a database's read-only workload Write scaling: Sharding allows for write scaling
416-1	110441-110446	There	
416-2	110447-110450	are	
416-3	110451-110453	so	
416-4	110454-110458	many	
416-5	110459-110469	multi-host	
416-6	110470-110482	technologies	
416-7	110483-110486	and	
416-8	110487-110489	it	
416-9	110490-110492	is	
416-10	110493-110497	hard	
416-11	110498-110500	to	
416-12	110501-110509	remember	
416-13	110510-110513	the	
416-14	110514-110522	benefits	
416-15	110523-110525	of	
416-16	110526-110530	each	
416-17	110531-110534	one	
416-18	110534-110535	,	
416-19	110536-110538	so	
416-20	110539-110540	I	
416-21	110541-110548	decided	
416-22	110549-110551	to	
416-23	110552-110558	create	
416-24	110559-110560	a	
416-25	110561-110565	list	
416-26	110565-110566	:	
416-27	110567-110571	High	
416-28	110572-110584	availability	
416-29	110584-110585	:	
416-30	110586-110595	Streaming	
416-31	110596-110607	replication	
416-32	110608-110610	is	
416-33	110611-110614	the	
416-34	110615-110623	simplest	
416-35	110624-110627	way	
416-36	110628-110630	to	
416-37	110631-110635	have	
416-38	110636-110644	multiple	
416-39	110645-110651	copies	
416-40	110652-110654	of	
416-41	110655-110659	your	
416-42	110660-110668	database	
416-43	110668-110669	,	
416-44	110670-110675	ready	
416-45	110676-110679	for	
416-46	110680-110684	fail	
416-47	110685-110689	over	
416-48	110690-110694	Read	
416-49	110695-110702	scaling	
416-50	110702-110703	:	
416-51	110704-110710	Pgpool	
416-52	110711-110717	allows	
416-53	110718-110726	replicas	
416-54	110727-110728	(	
416-55	110728-110733	slide	
416-56	110734-110736	17	
416-57	110736-110737	)	
416-58	110738-110740	to	
416-59	110741-110747	handle	
416-60	110748-110749	a	
416-61	110750-110760	database's	
416-62	110761-110770	read-only	
416-63	110771-110779	workload	
416-64	110780-110785	Write	
416-65	110786-110793	scaling	
416-66	110793-110794	:	
416-67	110795-110803	Sharding	
416-68	110804-110810	allows	
416-69	110811-110814	for	
416-70	110815-110820	write	
416-71	110821-110828	scaling	

#Text=Partial replication: Logical replication allows partial replication Reduce latency: Multi-master replication allows servers to be located close to users, reducing transmission latency Hopefully this is helpful to people. View or Post Comments Performance Goalposts Wednesday, April 22, 2020
417-1	110829-110836	Partial	
417-2	110837-110848	replication	
417-3	110848-110849	:	
417-4	110850-110857	Logical	
417-5	110858-110869	replication	
417-6	110870-110876	allows	
417-7	110877-110884	partial	
417-8	110885-110896	replication	
417-9	110897-110903	Reduce	
417-10	110904-110911	latency	
417-11	110911-110912	:	
417-12	110913-110925	Multi-master	
417-13	110926-110937	replication	
417-14	110938-110944	allows	
417-15	110945-110952	servers	
417-16	110953-110955	to	
417-17	110956-110958	be	
417-18	110959-110966	located	
417-19	110967-110972	close	
417-20	110973-110975	to	
417-21	110976-110981	users	
417-22	110981-110982	,	
417-23	110983-110991	reducing	
417-24	110992-111004	transmission	
417-25	111005-111012	latency	
417-26	111013-111022	Hopefully	
417-27	111023-111027	this	
417-28	111028-111030	is	
417-29	111031-111038	helpful	
417-30	111039-111041	to	
417-31	111042-111048	people	
417-32	111048-111049	.	
417-33	111050-111054	View	
417-34	111055-111057	or	
417-35	111058-111062	Post	
417-36	111063-111071	Comments	
417-37	111072-111083	Performance	
417-38	111084-111093	Goalposts	
417-39	111094-111103	Wednesday	
417-40	111103-111104	,	
417-41	111105-111110	April	
417-42	111111-111113	22	
417-43	111113-111114	,	
417-44	111115-111119	2020	

#Text=In talking to EnterpriseDB customers, I am often asked about the performance limits of Postgres: How many connections can it handle? How many tps? Well, those are good questions, but it is hard to give accurate answers since so much depends on the hardware and workload. Eventually, testing of actual workloads on intended hardware has to be done, but
418-1	111120-111122	In	
418-2	111123-111130	talking	
418-3	111131-111133	to	
418-4	111134-111146	EnterpriseDB	
418-5	111147-111156	customers	
418-6	111156-111157	,	
418-7	111158-111159	I	
418-8	111160-111162	am	
418-9	111163-111168	often	
418-10	111169-111174	asked	
418-11	111175-111180	about	
418-12	111181-111184	the	
418-13	111185-111196	performance	
418-14	111197-111203	limits	
418-15	111204-111206	of	
418-16	111207-111215	Postgres	
418-17	111215-111216	:	
418-18	111217-111220	How	
418-19	111221-111225	many	
418-20	111226-111237	connections	
418-21	111238-111241	can	
418-22	111242-111244	it	
418-23	111245-111251	handle	
418-24	111251-111252	?	
418-25	111253-111256	How	
418-26	111257-111261	many	
418-27	111262-111265	tps	
418-28	111265-111266	?	
418-29	111267-111271	Well	
418-30	111271-111272	,	
418-31	111273-111278	those	
418-32	111279-111282	are	
418-33	111283-111287	good	
418-34	111288-111297	questions	
418-35	111297-111298	,	
418-36	111299-111302	but	
418-37	111303-111305	it	
418-38	111306-111308	is	
418-39	111309-111313	hard	
418-40	111314-111316	to	
418-41	111317-111321	give	
418-42	111322-111330	accurate	
418-43	111331-111338	answers	
418-44	111339-111344	since	
418-45	111345-111347	so	
418-46	111348-111352	much	
418-47	111353-111360	depends	
418-48	111361-111363	on	
418-49	111364-111367	the	
418-50	111368-111376	hardware	
418-51	111377-111380	and	
418-52	111381-111389	workload	
418-53	111389-111390	.	
418-54	111391-111401	Eventually	
418-55	111401-111402	,	
418-56	111403-111410	testing	
418-57	111411-111413	of	
418-58	111414-111420	actual	
418-59	111421-111430	workloads	
418-60	111431-111433	on	
418-61	111434-111442	intended	
418-62	111443-111451	hardware	
418-63	111452-111455	has	
418-64	111456-111458	to	
418-65	111459-111461	be	
418-66	111462-111466	done	
418-67	111466-111467	,	
418-68	111468-111471	but	

#Text=not giving ball-park answers is unhelpful. What answer can I give? Well, I came up with this chart: #SimultaneousLimitSolution 1Connections< 250direct connect 2Queries< 250pgbouncer
419-1	111472-111475	not	
419-2	111476-111482	giving	
419-3	111483-111492	ball-park	
419-4	111493-111500	answers	
419-5	111501-111503	is	
419-6	111504-111513	unhelpful	
419-7	111513-111514	.	
419-8	111515-111519	What	
419-9	111520-111526	answer	
419-10	111527-111530	can	
419-11	111531-111532	I	
419-12	111533-111537	give	
419-13	111537-111538	?	
419-14	111539-111543	Well	
419-15	111543-111544	,	
419-16	111545-111546	I	
419-17	111547-111551	came	
419-18	111552-111554	up	
419-19	111555-111559	with	
419-20	111560-111564	this	
419-21	111565-111570	chart	
419-22	111570-111571	:	
419-23	111572-111573	#	
419-24	111573-111598	SimultaneousLimitSolution	
419-25	111599-111611	1Connections	
419-26	111611-111612	<	
419-27	111613-111622	250direct	
419-28	111623-111630	connect	
419-29	111631-111639	2Queries	
419-30	111639-111640	<	
419-31	111641-111653	250pgbouncer	

#Text=3Write queries< 250Pgpool with read-only replicas (slide 17) 4Write queries>= 250sharding Earlier items use simpler architectures than later items, and are therefore preferred. For under 250 simultaneous connections(#1), it isn't generally necessary to use any complex architecture, though using a pooler is recommended for workloads with many short-lived sessions to
420-1	111654-111660	3Write	
420-2	111661-111668	queries	
420-3	111668-111669	<	
420-4	111670-111679	250Pgpool	
420-5	111680-111684	with	
420-6	111685-111694	read-only	
420-7	111695-111703	replicas	
420-8	111704-111705	(	
420-9	111705-111710	slide	
420-10	111711-111713	17	
420-11	111713-111714	)	
420-12	111715-111721	4Write	
420-13	111722-111729	queries	
420-14	111729-111730	>	
420-15	111730-111731	=	
420-16	111732-111743	250sharding	
420-17	111744-111751	Earlier	
420-18	111752-111757	items	
420-19	111758-111761	use	
420-20	111762-111769	simpler	
420-21	111770-111783	architectures	
420-22	111784-111788	than	
420-23	111789-111794	later	
420-24	111795-111800	items	
420-25	111800-111801	,	
420-26	111802-111805	and	
420-27	111806-111809	are	
420-28	111810-111819	therefore	
420-29	111820-111829	preferred	
420-30	111829-111830	.	
420-31	111831-111834	For	
420-32	111835-111840	under	
420-33	111841-111844	250	
420-34	111845-111857	simultaneous	
420-35	111858-111869	connections	
420-36	111869-111870	(	
420-37	111870-111872	#1	
420-38	111872-111873	)	
420-39	111873-111874	,	
420-40	111875-111877	it	
420-41	111878-111883	isn't	
420-42	111884-111893	generally	
420-43	111894-111903	necessary	
420-44	111904-111906	to	
420-45	111907-111910	use	
420-46	111911-111914	any	
420-47	111915-111922	complex	
420-48	111923-111935	architecture	
420-49	111935-111936	,	
420-50	111937-111943	though	
420-51	111944-111949	using	
420-52	111950-111951	a	
420-53	111952-111958	pooler	
420-54	111959-111961	is	
420-55	111962-111973	recommended	
420-56	111974-111977	for	
420-57	111978-111987	workloads	
420-58	111988-111992	with	
420-59	111993-111997	many	
420-60	111998-112009	short-lived	
420-61	112010-112018	sessions	
420-62	112019-112021	to	

#Text=reduce connection startup time. Even when under this limit, performance can be limited by the number of cpus. Oltp databases typically cannot process more than 5 x cpu cores without having to time-slice among cpus. Olap uses 2 x cpu cores, or less if parallelism is used.
421-1	112022-112028	reduce	
421-2	112029-112039	connection	
421-3	112040-112047	startup	
421-4	112048-112052	time	
421-5	112052-112053	.	
421-6	112054-112058	Even	
421-7	112059-112063	when	
421-8	112064-112069	under	
421-9	112070-112074	this	
421-10	112075-112080	limit	
421-11	112080-112081	,	
421-12	112082-112093	performance	
421-13	112094-112097	can	
421-14	112098-112100	be	
421-15	112101-112108	limited	
421-16	112109-112111	by	
421-17	112112-112115	the	
421-18	112116-112122	number	
421-19	112123-112125	of	
421-20	112126-112130	cpus	
421-21	112130-112131	.	
421-22	112132-112136	Oltp	
421-23	112137-112146	databases	
421-24	112147-112156	typically	
421-25	112157-112163	cannot	
421-26	112164-112171	process	
421-27	112172-112176	more	
421-28	112177-112181	than	
421-29	112182-112183	5	
421-30	112184-112185	x	
421-31	112186-112189	cpu	
421-32	112190-112195	cores	
421-33	112196-112203	without	
421-34	112204-112210	having	
421-35	112211-112213	to	
421-36	112214-112224	time-slice	
421-37	112225-112230	among	
421-38	112231-112235	cpus	
421-39	112235-112236	.	
421-40	112237-112241	Olap	
421-41	112242-112246	uses	
421-42	112247-112248	2	
421-43	112249-112250	x	
421-44	112251-112254	cpu	
421-45	112255-112260	cores	
421-46	112260-112261	,	
421-47	112262-112264	or	
421-48	112265-112269	less	
421-49	112270-112272	if	
421-50	112273-112284	parallelism	
421-51	112285-112287	is	
421-52	112288-112292	used	
421-53	112292-112293	.	

#Text=For over 250 simultaneous connections but under 250 simultaneous queries(#2), a connection pooler can be beneficial because it reduces the overhead of managing many open connections. For over 250 simultaneous queries but under 250 simultaneous write queries(#3), a combination of Pgpool with read queries routed to streaming replicas can be very efficient. For over 250 simultaneous write queries(#4), a sharding solution should be considered.
422-1	112294-112297	For	
422-2	112298-112302	over	
422-3	112303-112306	250	
422-4	112307-112319	simultaneous	
422-5	112320-112331	connections	
422-6	112332-112335	but	
422-7	112336-112341	under	
422-8	112342-112345	250	
422-9	112346-112358	simultaneous	
422-10	112359-112366	queries	
422-11	112366-112367	(	
422-12	112367-112369	#2	
422-13	112369-112370	)	
422-14	112370-112371	,	
422-15	112372-112373	a	
422-16	112374-112384	connection	
422-17	112385-112391	pooler	
422-18	112392-112395	can	
422-19	112396-112398	be	
422-20	112399-112409	beneficial	
422-21	112410-112417	because	
422-22	112418-112420	it	
422-23	112421-112428	reduces	
422-24	112429-112432	the	
422-25	112433-112441	overhead	
422-26	112442-112444	of	
422-27	112445-112453	managing	
422-28	112454-112458	many	
422-29	112459-112463	open	
422-30	112464-112475	connections	
422-31	112475-112476	.	
422-32	112477-112480	For	
422-33	112481-112485	over	
422-34	112486-112489	250	
422-35	112490-112502	simultaneous	
422-36	112503-112510	queries	
422-37	112511-112514	but	
422-38	112515-112520	under	
422-39	112521-112524	250	
422-40	112525-112537	simultaneous	
422-41	112538-112543	write	
422-42	112544-112551	queries	
422-43	112551-112552	(	
422-44	112552-112554	#3	
422-45	112554-112555	)	
422-46	112555-112556	,	
422-47	112557-112558	a	
422-48	112559-112570	combination	
422-49	112571-112573	of	
422-50	112574-112580	Pgpool	
422-51	112581-112585	with	
422-52	112586-112590	read	
422-53	112591-112598	queries	
422-54	112599-112605	routed	
422-55	112606-112608	to	
422-56	112609-112618	streaming	
422-57	112619-112627	replicas	
422-58	112628-112631	can	
422-59	112632-112634	be	
422-60	112635-112639	very	
422-61	112640-112649	efficient	
422-62	112649-112650	.	
422-63	112651-112654	For	
422-64	112655-112659	over	
422-65	112660-112663	250	
422-66	112664-112676	simultaneous	
422-67	112677-112682	write	
422-68	112683-112690	queries	
422-69	112690-112691	(	
422-70	112691-112693	#4	
422-71	112693-112694	)	
422-72	112694-112695	,	
422-73	112696-112697	a	
422-74	112698-112706	sharding	
422-75	112707-112715	solution	
422-76	112716-112722	should	
422-77	112723-112725	be	
422-78	112726-112736	considered	
422-79	112736-112737	.	

#Text=These numbers can vary greatly based on workload and hardware, but I think they are good starting points to consider. View or Post Comments Fast Enough? Monday, April 20, 2020 Everyone one wants their software to perform as fast as possible. Some people think that unless the program ends before it begins, it's too slow.
423-1	112738-112743	These	
423-2	112744-112751	numbers	
423-3	112752-112755	can	
423-4	112756-112760	vary	
423-5	112761-112768	greatly	
423-6	112769-112774	based	
423-7	112775-112777	on	
423-8	112778-112786	workload	
423-9	112787-112790	and	
423-10	112791-112799	hardware	
423-11	112799-112800	,	
423-12	112801-112804	but	
423-13	112805-112806	I	
423-14	112807-112812	think	
423-15	112813-112817	they	
423-16	112818-112821	are	
423-17	112822-112826	good	
423-18	112827-112835	starting	
423-19	112836-112842	points	
423-20	112843-112845	to	
423-21	112846-112854	consider	
423-22	112854-112855	.	
423-23	112856-112860	View	
423-24	112861-112863	or	
423-25	112864-112868	Post	
423-26	112869-112877	Comments	
423-27	112878-112882	Fast	
423-28	112883-112889	Enough	
423-29	112889-112890	?	
423-30	112891-112897	Monday	
423-31	112897-112898	,	
423-32	112899-112904	April	
423-33	112905-112907	20	
423-34	112907-112908	,	
423-35	112909-112913	2020	
423-36	112914-112922	Everyone	
423-37	112923-112926	one	
423-38	112927-112932	wants	
423-39	112933-112938	their	
423-40	112939-112947	software	
423-41	112948-112950	to	
423-42	112951-112958	perform	
423-43	112959-112961	as	
423-44	112962-112966	fast	
423-45	112967-112969	as	
423-46	112970-112978	possible	
423-47	112978-112979	.	
423-48	112980-112984	Some	
423-49	112985-112991	people	
423-50	112992-112997	think	
423-51	112998-113002	that	
423-52	113003-113009	unless	
423-53	113010-113013	the	
423-54	113014-113021	program	
423-55	113022-113026	ends	
423-56	113027-113033	before	
423-57	113034-113036	it	
423-58	113037-113043	begins	
423-59	113043-113044	,	
423-60	113045-113049	it's	
423-61	113050-113053	too	
423-62	113054-113058	slow	
423-63	113058-113059	.	

#Text=However, realistically, making something as fast as possible is not a universal good, meaning that increasing performance beyond a certain point can cause problems that far exceed the value of the improved performance. Let's give some examples: Most people use high-level languages that are compiled into cpu instructions or interpreted while being run. In an ideal world, every program would be written in assembly language. (Postgres does use some assembly language code for
424-1	113060-113067	However	
424-2	113067-113068	,	
424-3	113069-113082	realistically	
424-4	113082-113083	,	
424-5	113084-113090	making	
424-6	113091-113100	something	
424-7	113101-113103	as	
424-8	113104-113108	fast	
424-9	113109-113111	as	
424-10	113112-113120	possible	
424-11	113121-113123	is	
424-12	113124-113127	not	
424-13	113128-113129	a	
424-14	113130-113139	universal	
424-15	113140-113144	good	
424-16	113144-113145	,	
424-17	113146-113153	meaning	
424-18	113154-113158	that	
424-19	113159-113169	increasing	
424-20	113170-113181	performance	
424-21	113182-113188	beyond	
424-22	113189-113190	a	
424-23	113191-113198	certain	
424-24	113199-113204	point	
424-25	113205-113208	can	
424-26	113209-113214	cause	
424-27	113215-113223	problems	
424-28	113224-113228	that	
424-29	113229-113232	far	
424-30	113233-113239	exceed	
424-31	113240-113243	the	
424-32	113244-113249	value	
424-33	113250-113252	of	
424-34	113253-113256	the	
424-35	113257-113265	improved	
424-36	113266-113277	performance	
424-37	113277-113278	.	
424-38	113279-113284	Let's	
424-39	113285-113289	give	
424-40	113290-113294	some	
424-41	113295-113303	examples	
424-42	113303-113304	:	
424-43	113305-113309	Most	
424-44	113310-113316	people	
424-45	113317-113320	use	
424-46	113321-113331	high-level	
424-47	113332-113341	languages	
424-48	113342-113346	that	
424-49	113347-113350	are	
424-50	113351-113359	compiled	
424-51	113360-113364	into	
424-52	113365-113368	cpu	
424-53	113369-113381	instructions	
424-54	113382-113384	or	
424-55	113385-113396	interpreted	
424-56	113397-113402	while	
424-57	113403-113408	being	
424-58	113409-113412	run	
424-59	113412-113413	.	
424-60	113414-113416	In	
424-61	113417-113419	an	
424-62	113420-113425	ideal	
424-63	113426-113431	world	
424-64	113431-113432	,	
424-65	113433-113438	every	
424-66	113439-113446	program	
424-67	113447-113452	would	
424-68	113453-113455	be	
424-69	113456-113463	written	
424-70	113464-113466	in	
424-71	113467-113475	assembly	
424-72	113476-113484	language	
424-73	113484-113485	.	
424-74	113486-113487	(	
424-75	113487-113495	Postgres	
424-76	113496-113500	does	
424-77	113501-113504	use	
424-78	113505-113509	some	
424-79	113510-113518	assembly	
424-80	113519-113527	language	
424-81	113528-113532	code	
424-82	113533-113536	for	

#Text=locking.) However, writing something like a database in assembly language, though it might give slightly better performance if developers knew the behavior of every cpu, would be a huge challenge for even the most expert developers, and code maintenance and feature additions might be impossible.
425-1	113537-113544	locking	
425-2	113544-113545	.	
425-3	113545-113546	)	
425-4	113547-113554	However	
425-5	113554-113555	,	
425-6	113556-113563	writing	
425-7	113564-113573	something	
425-8	113574-113578	like	
425-9	113579-113580	a	
425-10	113581-113589	database	
425-11	113590-113592	in	
425-12	113593-113601	assembly	
425-13	113602-113610	language	
425-14	113610-113611	,	
425-15	113612-113618	though	
425-16	113619-113621	it	
425-17	113622-113627	might	
425-18	113628-113632	give	
425-19	113633-113641	slightly	
425-20	113642-113648	better	
425-21	113649-113660	performance	
425-22	113661-113663	if	
425-23	113664-113674	developers	
425-24	113675-113679	knew	
425-25	113680-113683	the	
425-26	113684-113692	behavior	
425-27	113693-113695	of	
425-28	113696-113701	every	
425-29	113702-113705	cpu	
425-30	113705-113706	,	
425-31	113707-113712	would	
425-32	113713-113715	be	
425-33	113716-113717	a	
425-34	113718-113722	huge	
425-35	113723-113732	challenge	
425-36	113733-113736	for	
425-37	113737-113741	even	
425-38	113742-113745	the	
425-39	113746-113750	most	
425-40	113751-113757	expert	
425-41	113758-113768	developers	
425-42	113768-113769	,	
425-43	113770-113773	and	
425-44	113774-113778	code	
425-45	113779-113790	maintenance	
425-46	113791-113794	and	
425-47	113795-113802	feature	
425-48	113803-113812	additions	
425-49	113813-113818	might	
425-50	113819-113821	be	
425-51	113822-113832	impossible	
425-52	113832-113833	.	

#Text=In general, there just isn't enough benefit to using assembly language for anything but the most discrete, performance-critical functions. Java isn't often chosen for its performance, but rather its ability to allow development teams to produce complex software efficiently. Lighter-weight languages might give better performance, but they don't offer the same development efficiency as Java.
426-1	113834-113836	In	
426-2	113837-113844	general	
426-3	113844-113845	,	
426-4	113846-113851	there	
426-5	113852-113856	just	
426-6	113857-113862	isn't	
426-7	113863-113869	enough	
426-8	113870-113877	benefit	
426-9	113878-113880	to	
426-10	113881-113886	using	
426-11	113887-113895	assembly	
426-12	113896-113904	language	
426-13	113905-113908	for	
426-14	113909-113917	anything	
426-15	113918-113921	but	
426-16	113922-113925	the	
426-17	113926-113930	most	
426-18	113931-113939	discrete	
426-19	113939-113940	,	
426-20	113941-113961	performance-critical	
426-21	113962-113971	functions	
426-22	113971-113972	.	
426-23	113973-113977	Java	
426-24	113978-113983	isn't	
426-25	113984-113989	often	
426-26	113990-113996	chosen	
426-27	113997-114000	for	
426-28	114001-114004	its	
426-29	114005-114016	performance	
426-30	114016-114017	,	
426-31	114018-114021	but	
426-32	114022-114028	rather	
426-33	114029-114032	its	
426-34	114033-114040	ability	
426-35	114041-114043	to	
426-36	114044-114049	allow	
426-37	114050-114061	development	
426-38	114062-114067	teams	
426-39	114068-114070	to	
426-40	114071-114078	produce	
426-41	114079-114086	complex	
426-42	114087-114095	software	
426-43	114096-114107	efficiently	
426-44	114107-114108	.	
426-45	114109-114123	Lighter-weight	
426-46	114124-114133	languages	
426-47	114134-114139	might	
426-48	114140-114144	give	
426-49	114145-114151	better	
426-50	114152-114163	performance	
426-51	114163-114164	,	
426-52	114165-114168	but	
426-53	114169-114173	they	
426-54	114174-114179	don't	
426-55	114180-114185	offer	
426-56	114186-114189	the	
426-57	114190-114194	same	
426-58	114195-114206	development	
426-59	114207-114217	efficiency	
426-60	114218-114220	as	
426-61	114221-114225	Java	
426-62	114225-114226	.	

#Text=Sql is a heavy-weight way to request data, but it is very efficient for developers since they can express their requests in a declarative way. You could probably write a custom data storage program to run faster than sql, but the effort involved to create and maintain it would be nearly insurmountable. You can even layout data in sql in more efficient ways, and sometimes it is worth it, but data maintainability, access flexibility, and storage efficiency can suffer.
427-1	114227-114230	Sql	
427-2	114231-114233	is	
427-3	114234-114235	a	
427-4	114236-114248	heavy-weight	
427-5	114249-114252	way	
427-6	114253-114255	to	
427-7	114256-114263	request	
427-8	114264-114268	data	
427-9	114268-114269	,	
427-10	114270-114273	but	
427-11	114274-114276	it	
427-12	114277-114279	is	
427-13	114280-114284	very	
427-14	114285-114294	efficient	
427-15	114295-114298	for	
427-16	114299-114309	developers	
427-17	114310-114315	since	
427-18	114316-114320	they	
427-19	114321-114324	can	
427-20	114325-114332	express	
427-21	114333-114338	their	
427-22	114339-114347	requests	
427-23	114348-114350	in	
427-24	114351-114352	a	
427-25	114353-114364	declarative	
427-26	114365-114368	way	
427-27	114368-114369	.	
427-28	114370-114373	You	
427-29	114374-114379	could	
427-30	114380-114388	probably	
427-31	114389-114394	write	
427-32	114395-114396	a	
427-33	114397-114403	custom	
427-34	114404-114408	data	
427-35	114409-114416	storage	
427-36	114417-114424	program	
427-37	114425-114427	to	
427-38	114428-114431	run	
427-39	114432-114438	faster	
427-40	114439-114443	than	
427-41	114444-114447	sql	
427-42	114447-114448	,	
427-43	114449-114452	but	
427-44	114453-114456	the	
427-45	114457-114463	effort	
427-46	114464-114472	involved	
427-47	114473-114475	to	
427-48	114476-114482	create	
427-49	114483-114486	and	
427-50	114487-114495	maintain	
427-51	114496-114498	it	
427-52	114499-114504	would	
427-53	114505-114507	be	
427-54	114508-114514	nearly	
427-55	114515-114529	insurmountable	
427-56	114529-114530	.	
427-57	114531-114534	You	
427-58	114535-114538	can	
427-59	114539-114543	even	
427-60	114544-114550	layout	
427-61	114551-114555	data	
427-62	114556-114558	in	
427-63	114559-114562	sql	
427-64	114563-114565	in	
427-65	114566-114570	more	
427-66	114571-114580	efficient	
427-67	114581-114585	ways	
427-68	114585-114586	,	
427-69	114587-114590	and	
427-70	114591-114600	sometimes	
427-71	114601-114603	it	
427-72	114604-114606	is	
427-73	114607-114612	worth	
427-74	114613-114615	it	
427-75	114615-114616	,	
427-76	114617-114620	but	
427-77	114621-114625	data	
427-78	114626-114641	maintainability	
427-79	114641-114642	,	
427-80	114643-114649	access	
427-81	114650-114661	flexibility	
427-82	114661-114662	,	
427-83	114663-114666	and	
427-84	114667-114674	storage	
427-85	114675-114685	efficiency	
427-86	114686-114689	can	
427-87	114690-114696	suffer	
427-88	114696-114697	.	

#Text=The bottom line is that performance is rarely a universal good — it has to be balanced against development time, solution flexibility, and maintainability. Sometimes people suggest that Postgres should offer some "super fancy" optimization, and sometimes we can implement it, but we always have to balance development time, solution flexibility, and maintainability with improved performance. View or Post Comments No Travel Friday, April 17, 2020
428-1	114698-114701	The	
428-2	114702-114708	bottom	
428-3	114709-114713	line	
428-4	114714-114716	is	
428-5	114717-114721	that	
428-6	114722-114733	performance	
428-7	114734-114736	is	
428-8	114737-114743	rarely	
428-9	114744-114745	a	
428-10	114746-114755	universal	
428-11	114756-114760	good	
428-12	114761-114762	—	
428-13	114763-114765	it	
428-14	114766-114769	has	
428-15	114770-114772	to	
428-16	114773-114775	be	
428-17	114776-114784	balanced	
428-18	114785-114792	against	
428-19	114793-114804	development	
428-20	114805-114809	time	
428-21	114809-114810	,	
428-22	114811-114819	solution	
428-23	114820-114831	flexibility	
428-24	114831-114832	,	
428-25	114833-114836	and	
428-26	114837-114852	maintainability	
428-27	114852-114853	.	
428-28	114854-114863	Sometimes	
428-29	114864-114870	people	
428-30	114871-114878	suggest	
428-31	114879-114883	that	
428-32	114884-114892	Postgres	
428-33	114893-114899	should	
428-34	114900-114905	offer	
428-35	114906-114910	some	
428-36	114911-114912	"	
428-37	114912-114917	super	
428-38	114918-114923	fancy	
428-39	114923-114924	"	
428-40	114925-114937	optimization	
428-41	114937-114938	,	
428-42	114939-114942	and	
428-43	114943-114952	sometimes	
428-44	114953-114955	we	
428-45	114956-114959	can	
428-46	114960-114969	implement	
428-47	114970-114972	it	
428-48	114972-114973	,	
428-49	114974-114977	but	
428-50	114978-114980	we	
428-51	114981-114987	always	
428-52	114988-114992	have	
428-53	114993-114995	to	
428-54	114996-115003	balance	
428-55	115004-115015	development	
428-56	115016-115020	time	
428-57	115020-115021	,	
428-58	115022-115030	solution	
428-59	115031-115042	flexibility	
428-60	115042-115043	,	
428-61	115044-115047	and	
428-62	115048-115063	maintainability	
428-63	115064-115068	with	
428-64	115069-115077	improved	
428-65	115078-115089	performance	
428-66	115089-115090	.	
428-67	115091-115095	View	
428-68	115096-115098	or	
428-69	115099-115103	Post	
428-70	115104-115112	Comments	
428-71	115113-115115	No	
428-72	115116-115122	Travel	
428-73	115123-115129	Friday	
428-74	115129-115130	,	
428-75	115131-115136	April	
428-76	115137-115139	17	
428-77	115139-115140	,	
428-78	115141-115145	2020	

#Text=With the Coronavirus outbreak, almost all Postgres events through June have been either cancelled, rescheduled, or moved online. This has given me time to consider my past travel. I have been blessed to visit so many places, not as a tourist, but rather a guest. I see countries more as a native than as a tourist, and I have many event organizers and hosts to thank for this.
429-1	115146-115150	With	
429-2	115151-115154	the	
429-3	115155-115166	Coronavirus	
429-4	115167-115175	outbreak	
429-5	115175-115176	,	
429-6	115177-115183	almost	
429-7	115184-115187	all	
429-8	115188-115196	Postgres	
429-9	115197-115203	events	
429-10	115204-115211	through	
429-11	115212-115216	June	
429-12	115217-115221	have	
429-13	115222-115226	been	
429-14	115227-115233	either	
429-15	115234-115243	cancelled	
429-16	115243-115244	,	
429-17	115245-115256	rescheduled	
429-18	115256-115257	,	
429-19	115258-115260	or	
429-20	115261-115266	moved	
429-21	115267-115273	online	
429-22	115273-115274	.	
429-23	115275-115279	This	
429-24	115280-115283	has	
429-25	115284-115289	given	
429-26	115290-115292	me	
429-27	115293-115297	time	
429-28	115298-115300	to	
429-29	115301-115309	consider	
429-30	115310-115312	my	
429-31	115313-115317	past	
429-32	115318-115324	travel	
429-33	115324-115325	.	
429-34	115326-115327	I	
429-35	115328-115332	have	
429-36	115333-115337	been	
429-37	115338-115345	blessed	
429-38	115346-115348	to	
429-39	115349-115354	visit	
429-40	115355-115357	so	
429-41	115358-115362	many	
429-42	115363-115369	places	
429-43	115369-115370	,	
429-44	115371-115374	not	
429-45	115375-115377	as	
429-46	115378-115379	a	
429-47	115380-115387	tourist	
429-48	115387-115388	,	
429-49	115389-115392	but	
429-50	115393-115399	rather	
429-51	115400-115401	a	
429-52	115402-115407	guest	
429-53	115407-115408	.	
429-54	115409-115410	I	
429-55	115411-115414	see	
429-56	115415-115424	countries	
429-57	115425-115429	more	
429-58	115430-115432	as	
429-59	115433-115434	a	
429-60	115435-115441	native	
429-61	115442-115446	than	
429-62	115447-115449	as	
429-63	115450-115451	a	
429-64	115452-115459	tourist	
429-65	115459-115460	,	
429-66	115461-115464	and	
429-67	115465-115466	I	
429-68	115467-115471	have	
429-69	115472-115476	many	
429-70	115477-115482	event	
429-71	115483-115493	organizers	
429-72	115494-115497	and	
429-73	115498-115503	hosts	
429-74	115504-115506	to	
429-75	115507-115512	thank	
429-76	115513-115516	for	
429-77	115517-115521	this	
429-78	115521-115522	.	

#Text=It is hard to know when on-site events will resume, but I can remember what it was like to travel roughly 90 days a year. Going to social outings at home often felt riding a train through my home town, waving from behind a train window to my friends on the platform. I would sit at home and wonder how long I would be there until I had to leave again.
430-1	115523-115525	It	
430-2	115526-115528	is	
430-3	115529-115533	hard	
430-4	115534-115536	to	
430-5	115537-115541	know	
430-6	115542-115546	when	
430-7	115547-115554	on-site	
430-8	115555-115561	events	
430-9	115562-115566	will	
430-10	115567-115573	resume	
430-11	115573-115574	,	
430-12	115575-115578	but	
430-13	115579-115580	I	
430-14	115581-115584	can	
430-15	115585-115593	remember	
430-16	115594-115598	what	
430-17	115599-115601	it	
430-18	115602-115605	was	
430-19	115606-115610	like	
430-20	115611-115613	to	
430-21	115614-115620	travel	
430-22	115621-115628	roughly	
430-23	115629-115631	90	
430-24	115632-115636	days	
430-25	115637-115638	a	
430-26	115639-115643	year	
430-27	115643-115644	.	
430-28	115645-115650	Going	
430-29	115651-115653	to	
430-30	115654-115660	social	
430-31	115661-115668	outings	
430-32	115669-115671	at	
430-33	115672-115676	home	
430-34	115677-115682	often	
430-35	115683-115687	felt	
430-36	115688-115694	riding	
430-37	115695-115696	a	
430-38	115697-115702	train	
430-39	115703-115710	through	
430-40	115711-115713	my	
430-41	115714-115718	home	
430-42	115719-115723	town	
430-43	115723-115724	,	
430-44	115725-115731	waving	
430-45	115732-115736	from	
430-46	115737-115743	behind	
430-47	115744-115745	a	
430-48	115746-115751	train	
430-49	115752-115758	window	
430-50	115759-115761	to	
430-51	115762-115764	my	
430-52	115765-115772	friends	
430-53	115773-115775	on	
430-54	115776-115779	the	
430-55	115780-115788	platform	
430-56	115788-115789	.	
430-57	115790-115791	I	
430-58	115792-115797	would	
430-59	115798-115801	sit	
430-60	115802-115804	at	
430-61	115805-115809	home	
430-62	115810-115813	and	
430-63	115814-115820	wonder	
430-64	115821-115824	how	
430-65	115825-115829	long	
430-66	115830-115831	I	
430-67	115832-115837	would	
430-68	115838-115840	be	
430-69	115841-115846	there	
430-70	115847-115852	until	
430-71	115853-115854	I	
430-72	115855-115858	had	
430-73	115859-115861	to	
430-74	115862-115867	leave	
430-75	115868-115873	again	
430-76	115873-115874	.	

#Text=Now, sitting at home, the images of our family travels appearing on our kitchen slideshow show places that seem farther away than ever, and I wonder if I will ever see these places again. I am sure many others have similar feelings, and I have hope that, someday, we will all return to the road to spend time together again. View or Post Comments Database Interoperability at Risk Monday, March 16, 2020 This article parallels Oracle's copying of the sql syntax
431-1	115875-115878	Now	
431-2	115878-115879	,	
431-3	115880-115887	sitting	
431-4	115888-115890	at	
431-5	115891-115895	home	
431-6	115895-115896	,	
431-7	115897-115900	the	
431-8	115901-115907	images	
431-9	115908-115910	of	
431-10	115911-115914	our	
431-11	115915-115921	family	
431-12	115922-115929	travels	
431-13	115930-115939	appearing	
431-14	115940-115942	on	
431-15	115943-115946	our	
431-16	115947-115954	kitchen	
431-17	115955-115964	slideshow	
431-18	115965-115969	show	
431-19	115970-115976	places	
431-20	115977-115981	that	
431-21	115982-115986	seem	
431-22	115987-115994	farther	
431-23	115995-115999	away	
431-24	116000-116004	than	
431-25	116005-116009	ever	
431-26	116009-116010	,	
431-27	116011-116014	and	
431-28	116015-116016	I	
431-29	116017-116023	wonder	
431-30	116024-116026	if	
431-31	116027-116028	I	
431-32	116029-116033	will	
431-33	116034-116038	ever	
431-34	116039-116042	see	
431-35	116043-116048	these	
431-36	116049-116055	places	
431-37	116056-116061	again	
431-38	116061-116062	.	
431-39	116063-116064	I	
431-40	116065-116067	am	
431-41	116068-116072	sure	
431-42	116073-116077	many	
431-43	116078-116084	others	
431-44	116085-116089	have	
431-45	116090-116097	similar	
431-46	116098-116106	feelings	
431-47	116106-116107	,	
431-48	116108-116111	and	
431-49	116112-116113	I	
431-50	116114-116118	have	
431-51	116119-116123	hope	
431-52	116124-116128	that	
431-53	116128-116129	,	
431-54	116130-116137	someday	
431-55	116137-116138	,	
431-56	116139-116141	we	
431-57	116142-116146	will	
431-58	116147-116150	all	
431-59	116151-116157	return	
431-60	116158-116160	to	
431-61	116161-116164	the	
431-62	116165-116169	road	
431-63	116170-116172	to	
431-64	116173-116178	spend	
431-65	116179-116183	time	
431-66	116184-116192	together	
431-67	116193-116198	again	
431-68	116198-116199	.	
431-69	116200-116204	View	
431-70	116205-116207	or	
431-71	116208-116212	Post	
431-72	116213-116221	Comments	
431-73	116222-116230	Database	
431-74	116231-116247	Interoperability	
431-75	116248-116250	at	
431-76	116251-116255	Risk	
431-77	116256-116262	Monday	
431-78	116262-116263	,	
431-79	116264-116269	March	
431-80	116270-116272	16	
431-81	116272-116273	,	
431-82	116274-116278	2020	
431-83	116279-116283	This	
431-84	116284-116291	article	
431-85	116292-116301	parallels	
431-86	116302-116310	Oracle's	
431-87	116311-116318	copying	
431-88	116319-116321	of	
431-89	116322-116325	the	
431-90	116326-116329	sql	
431-91	116330-116336	syntax	

#Text=from ibm in the late 1970's with Google's copying of the Java api. It also explains the possible impact of the current case soon to be decided by the US Supreme Court. One thing it does not fully cover is the impact on sql-level interoperability between databases. If Oracle can claim the Java api as copyrightable, the sql language could be
432-1	116337-116341	from	
432-2	116342-116345	ibm	
432-3	116346-116348	in	
432-4	116349-116352	the	
432-5	116353-116357	late	
432-6	116358-116362	1970	
432-7	116362-116363	'	
432-8	116363-116364	s	
432-9	116365-116369	with	
432-10	116370-116378	Google's	
432-11	116379-116386	copying	
432-12	116387-116389	of	
432-13	116390-116393	the	
432-14	116394-116398	Java	
432-15	116399-116402	api	
432-16	116402-116403	.	
432-17	116404-116406	It	
432-18	116407-116411	also	
432-19	116412-116420	explains	
432-20	116421-116424	the	
432-21	116425-116433	possible	
432-22	116434-116440	impact	
432-23	116441-116443	of	
432-24	116444-116447	the	
432-25	116448-116455	current	
432-26	116456-116460	case	
432-27	116461-116465	soon	
432-28	116466-116468	to	
432-29	116469-116471	be	
432-30	116472-116479	decided	
432-31	116480-116482	by	
432-32	116483-116486	the	
432-33	116487-116489	US	
432-34	116490-116497	Supreme	
432-35	116498-116503	Court	
432-36	116503-116504	.	
432-37	116505-116508	One	
432-38	116509-116514	thing	
432-39	116515-116517	it	
432-40	116518-116522	does	
432-41	116523-116526	not	
432-42	116527-116532	fully	
432-43	116533-116538	cover	
432-44	116539-116541	is	
432-45	116542-116545	the	
432-46	116546-116552	impact	
432-47	116553-116555	on	
432-48	116556-116565	sql-level	
432-49	116566-116582	interoperability	
432-50	116583-116590	between	
432-51	116591-116600	databases	
432-52	116600-116601	.	
432-53	116602-116604	If	
432-54	116605-116611	Oracle	
432-55	116612-116615	can	
432-56	116616-116621	claim	
432-57	116622-116625	the	
432-58	116626-116630	Java	
432-59	116631-116634	api	
432-60	116635-116637	as	
432-61	116638-116651	copyrightable	
432-62	116651-116652	,	
432-63	116653-116656	the	
432-64	116657-116660	sql	
432-65	116661-116669	language	
432-66	116670-116675	could	
432-67	116676-116678	be	

#Text=considered copyrightable, allowing ibm to sue all relational database vendors and users for copyright infringement. It might also allow database vendors to sue competitors when their sql-level features are copied, requiring either huge payments or the removal of interoperability syntax. The Postgres copyright is open, so any database vendor copying Postgres syntax is fine, but Postgres copying the syntax of other databases could be
433-1	116679-116689	considered	
433-2	116690-116703	copyrightable	
433-3	116703-116704	,	
433-4	116705-116713	allowing	
433-5	116714-116717	ibm	
433-6	116718-116720	to	
433-7	116721-116724	sue	
433-8	116725-116728	all	
433-9	116729-116739	relational	
433-10	116740-116748	database	
433-11	116749-116756	vendors	
433-12	116757-116760	and	
433-13	116761-116766	users	
433-14	116767-116770	for	
433-15	116771-116780	copyright	
433-16	116781-116793	infringement	
433-17	116793-116794	.	
433-18	116795-116797	It	
433-19	116798-116803	might	
433-20	116804-116808	also	
433-21	116809-116814	allow	
433-22	116815-116823	database	
433-23	116824-116831	vendors	
433-24	116832-116834	to	
433-25	116835-116838	sue	
433-26	116839-116850	competitors	
433-27	116851-116855	when	
433-28	116856-116861	their	
433-29	116862-116871	sql-level	
433-30	116872-116880	features	
433-31	116881-116884	are	
433-32	116885-116891	copied	
433-33	116891-116892	,	
433-34	116893-116902	requiring	
433-35	116903-116909	either	
433-36	116910-116914	huge	
433-37	116915-116923	payments	
433-38	116924-116926	or	
433-39	116927-116930	the	
433-40	116931-116938	removal	
433-41	116939-116941	of	
433-42	116942-116958	interoperability	
433-43	116959-116965	syntax	
433-44	116965-116966	.	
433-45	116967-116970	The	
433-46	116971-116979	Postgres	
433-47	116980-116989	copyright	
433-48	116990-116992	is	
433-49	116993-116997	open	
433-50	116997-116998	,	
433-51	116999-117001	so	
433-52	117002-117005	any	
433-53	117006-117014	database	
433-54	117015-117021	vendor	
433-55	117022-117029	copying	
433-56	117030-117038	Postgres	
433-57	117039-117045	syntax	
433-58	117046-117048	is	
433-59	117049-117053	fine	
433-60	117053-117054	,	
433-61	117055-117058	but	
433-62	117059-117067	Postgres	
433-63	117068-117075	copying	
433-64	117076-117079	the	
433-65	117080-117086	syntax	
433-66	117087-117089	of	
433-67	117090-117095	other	
433-68	117096-117105	databases	
433-69	117106-117111	could	
433-70	117112-117114	be	

#Text=problematic. Relational database interoperability has been of huge benefit to data management, and this single case could call that into question. Update: The case was decided in Google's favor. 2021-04-08 View or Post Comments Databases, Containers, and the Cloud
434-1	117115-117126	problematic	
434-2	117126-117127	.	
434-3	117128-117138	Relational	
434-4	117139-117147	database	
434-5	117148-117164	interoperability	
434-6	117165-117168	has	
434-7	117169-117173	been	
434-8	117174-117176	of	
434-9	117177-117181	huge	
434-10	117182-117189	benefit	
434-11	117190-117192	to	
434-12	117193-117197	data	
434-13	117198-117208	management	
434-14	117208-117209	,	
434-15	117210-117213	and	
434-16	117214-117218	this	
434-17	117219-117225	single	
434-18	117226-117230	case	
434-19	117231-117236	could	
434-20	117237-117241	call	
434-21	117242-117246	that	
434-22	117247-117251	into	
434-23	117252-117260	question	
434-24	117260-117261	.	
434-25	117262-117268	Update	
434-26	117268-117269	:	
434-27	117270-117273	The	
434-28	117274-117278	case	
434-29	117279-117282	was	
434-30	117283-117290	decided	
434-31	117291-117293	in	
434-32	117294-117302	Google's	
434-33	117303-117308	favor	
434-34	117308-117309	.	
434-35	117310-117314	2021	
434-36	117314-117315	-	
434-37	117315-117317	04	
434-38	117317-117318	-	
434-39	117318-117320	08	
434-40	117321-117325	View	
434-41	117326-117328	or	
434-42	117329-117333	Post	
434-43	117334-117342	Comments	
434-44	117343-117352	Databases	
434-45	117352-117353	,	
434-46	117354-117364	Containers	
434-47	117364-117365	,	
434-48	117366-117369	and	
434-49	117370-117373	the	
434-50	117374-117379	Cloud	

#Text=Saturday, March 7, 2020 A few months ago, I wrote a high-level presentation about the deployment benefits of using containers and cloud infrastructure for databases. I am now ready to share this presentation. I have also added QR codes to the first and last slides of all
435-1	117380-117388	Saturday	
435-2	117388-117389	,	
435-3	117390-117395	March	
435-4	117396-117397	7	
435-5	117397-117398	,	
435-6	117399-117403	2020	
435-7	117404-117405	A	
435-8	117406-117409	few	
435-9	117410-117416	months	
435-10	117417-117420	ago	
435-11	117420-117421	,	
435-12	117422-117423	I	
435-13	117424-117429	wrote	
435-14	117430-117431	a	
435-15	117432-117442	high-level	
435-16	117443-117455	presentation	
435-17	117456-117461	about	
435-18	117462-117465	the	
435-19	117466-117476	deployment	
435-20	117477-117485	benefits	
435-21	117486-117488	of	
435-22	117489-117494	using	
435-23	117495-117505	containers	
435-24	117506-117509	and	
435-25	117510-117515	cloud	
435-26	117516-117530	infrastructure	
435-27	117531-117534	for	
435-28	117535-117544	databases	
435-29	117544-117545	.	
435-30	117546-117547	I	
435-31	117548-117550	am	
435-32	117551-117554	now	
435-33	117555-117560	ready	
435-34	117561-117563	to	
435-35	117564-117569	share	
435-36	117570-117574	this	
435-37	117575-117587	presentation	
435-38	117587-117588	.	
435-39	117589-117590	I	
435-40	117591-117595	have	
435-41	117596-117600	also	
435-42	117601-117606	added	
435-43	117607-117609	QR	
435-44	117610-117615	codes	
435-45	117616-117618	to	
435-46	117619-117622	the	
435-47	117623-117628	first	
435-48	117629-117632	and	
435-49	117633-117637	last	
435-50	117638-117644	slides	
435-51	117645-117647	of	
435-52	117648-117651	all	
