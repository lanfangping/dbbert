#FORMAT=WebAnno TSV 3.3


#Text=Performance | GORM - The fantastic ORM library for Golang, aims to be developer friendly.
1-1	0-11	Performance	
1-2	12-13	|	
1-3	14-18	GORM	
1-4	19-20	-	
1-5	21-24	The	
1-6	25-34	fantastic	
1-7	35-38	ORM	
1-8	39-46	library	
1-9	47-50	for	
1-10	51-57	Golang	
1-11	57-58	,	
1-12	59-63	aims	
1-13	64-66	to	
1-14	67-69	be	
1-15	70-79	developer	
1-16	80-88	friendly	
1-17	88-89	.	

#Text=GORM
#Text=DocsCommunityAPIContribute
#Text=English
#Text=English
#Text=简体中文
#Text=Deutsch
#Text=Español
#Text=bahasa Indonesia
#Text=Italiano
#Text=日本語
#Text=Русский
#Text=French
#Text=한국어
#Text=Performance
#Text=GORM optimizes many things to improve the performance, the default performance should good for most applications, but there are still some tips for how to improve it for your application.
2-1	90-94	GORM	
2-2	95-121	DocsCommunityAPIContribute	
2-3	122-129	English	
2-4	130-137	English	
2-5	138-142	简体中文	
2-6	143-150	Deutsch	
2-7	151-158	Español	
2-8	159-165	bahasa	
2-9	166-175	Indonesia	
2-10	176-184	Italiano	
2-11	185-188	日本語	
2-12	189-196	Русский	
2-13	197-203	French	
2-14	204-207	한국어	
2-15	208-219	Performance	
2-16	220-224	GORM	
2-17	225-234	optimizes	
2-18	235-239	many	
2-19	240-246	things	
2-20	247-249	to	
2-21	250-257	improve	
2-22	258-261	the	
2-23	262-273	performance	
2-24	273-274	,	
2-25	275-278	the	
2-26	279-286	default	
2-27	287-298	performance	
2-28	299-305	should	
2-29	306-310	good	
2-30	311-314	for	
2-31	315-319	most	
2-32	320-332	applications	
2-33	332-333	,	
2-34	334-337	but	
2-35	338-343	there	
2-36	344-347	are	
2-37	348-353	still	
2-38	354-358	some	
2-39	359-363	tips	
2-40	364-367	for	
2-41	368-371	how	
2-42	372-374	to	
2-43	375-382	improve	
2-44	383-385	it	
2-45	386-389	for	
2-46	390-394	your	
2-47	395-406	application	
2-48	406-407	.	

#Text=Disable Default TransactionGORM perform write (create/update/delete) operations run inside a transaction to ensure data consistency, which is bad for performance, you can disable it during initialization
#Text=db, err := gorm.Open(sqlite.Open("gorm.db"), &gorm.Config{
#Text=SkipDefaultTransaction: true,})
#Text=Caches Prepared StatementCreates a prepared statement when executing any SQL and caches them to speed up future calls
#Text=// Globally modedb, err := gorm.Open(sqlite.Open("gorm.db"), &gorm.Config{
#Text=PrepareStmt: true,})// Session modetx := db.Session(&Session{PrepareStmt: true})tx.First(&user, 1)tx.Find(&users)tx.Model(&user).Update("Age", 18)
#Text=NOTE Also refer how to enable interpolateparams for MySQL to reduce roundtrip https://github.com/go-sql-driver/mysql#interpolateparams
#Text=SQL Builder with PreparedStmtPrepared Statement works with RAW SQL also, for example:
#Text=db, err := gorm.Open(sqlite.Open("gorm.db"), &gorm.Config{
#Text=PrepareStmt: true,})db.Raw("select sum(age) from users where role = ?"
3-1	408-415	Disable	
3-2	416-423	Default	
3-3	424-439	TransactionGORM	
3-4	440-447	perform	
3-5	448-453	write	
3-6	454-455	(	
3-7	455-461	create	
3-8	461-462	/	
3-9	462-468	update	
3-10	468-469	/	
3-11	469-475	delete	
3-12	475-476	)	
3-13	477-487	operations	
3-14	488-491	run	
3-15	492-498	inside	
3-16	499-500	a	
3-17	501-512	transaction	
3-18	513-515	to	
3-19	516-522	ensure	
3-20	523-527	data	
3-21	528-539	consistency	
3-22	539-540	,	
3-23	541-546	which	
3-24	547-549	is	
3-25	550-553	bad	
3-26	554-557	for	
3-27	558-569	performance	
3-28	569-570	,	
3-29	571-574	you	
3-30	575-578	can	
3-31	579-586	disable	
3-32	587-589	it	
3-33	590-596	during	
3-34	597-611	initialization	
3-35	612-614	db	
3-36	614-615	,	
3-37	616-619	err	
3-38	620-621	:	
3-39	621-622	=	
3-40	623-632	gorm.Open	
3-41	632-633	(	
3-42	633-644	sqlite.Open	
3-43	644-645	(	
3-44	645-646	"	
3-45	646-653	gorm.db	
3-46	653-654	"	
3-47	654-655	)	
3-48	655-656	,	
3-49	657-658	&	
3-50	658-669	gorm.Config	
3-51	669-670	{	
3-52	671-693	SkipDefaultTransaction	
3-53	693-694	:	
3-54	695-699	true	
3-55	699-700	,	
3-56	700-701	}	
3-57	701-702	)	
3-58	703-709	Caches	
3-59	710-718	Prepared	
3-60	719-735	StatementCreates	
3-61	736-737	a	
3-62	738-746	prepared	
3-63	747-756	statement	
3-64	757-761	when	
3-65	762-771	executing	
3-66	772-775	any	
3-67	776-779	SQL	
3-68	780-783	and	
3-69	784-790	caches	
3-70	791-795	them	
3-71	796-798	to	
3-72	799-804	speed	
3-73	805-807	up	
3-74	808-814	future	
3-75	815-820	calls	
3-76	821-822	/	
3-77	822-823	/	
3-78	824-832	Globally	
3-79	833-839	modedb	
3-80	839-840	,	
3-81	841-844	err	
3-82	845-846	:	
3-83	846-847	=	
3-84	848-857	gorm.Open	
3-85	857-858	(	
3-86	858-869	sqlite.Open	
3-87	869-870	(	
3-88	870-871	"	
3-89	871-878	gorm.db	
3-90	878-879	"	
3-91	879-880	)	
3-92	880-881	,	
3-93	882-883	&	
3-94	883-894	gorm.Config	
3-95	894-895	{	
3-96	896-907	PrepareStmt	
3-97	907-908	:	
3-98	909-913	true	
3-99	913-914	,	
3-100	914-915	}	
3-101	915-916	)	
3-102	916-917	/	
3-103	917-918	/	
3-104	919-926	Session	
3-105	927-933	modetx	
3-106	934-935	:	
3-107	935-936	=	
3-108	937-947	db.Session	
3-109	947-948	(	
3-110	948-949	&	
3-111	949-956	Session	
3-112	956-957	{	
3-113	957-968	PrepareStmt	
3-114	968-969	:	
3-115	970-974	true	
3-116	974-975	}	
3-117	975-976	)	
3-118	976-984	tx.First	
3-119	984-985	(	
3-120	985-986	&	
3-121	986-990	user	
3-122	990-991	,	
3-123	992-993	1	
3-124	993-994	)	
3-125	994-1001	tx.Find	
3-126	1001-1002	(	
3-127	1002-1003	&	
3-128	1003-1008	users	
3-129	1008-1009	)	
3-130	1009-1017	tx.Model	
3-131	1017-1018	(	
3-132	1018-1019	&	
3-133	1019-1023	user	
3-134	1023-1024	)	
3-135	1024-1025	.	
3-136	1025-1031	Update	
3-137	1031-1032	(	
3-138	1032-1033	"	
3-139	1033-1036	Age	
3-140	1036-1037	"	
3-141	1037-1038	,	
3-142	1039-1041	18	
3-143	1041-1042	)	
3-144	1043-1047	NOTE	
3-145	1048-1052	Also	
3-146	1053-1058	refer	
3-147	1059-1062	how	
3-148	1063-1065	to	
3-149	1066-1072	enable	
3-150	1073-1090	interpolateparams	
3-151	1091-1094	for	
3-152	1095-1100	MySQL	
3-153	1101-1103	to	
3-154	1104-1110	reduce	
3-155	1111-1120	roundtrip	
3-156	1121-1126	https	
3-157	1126-1127	:	
3-158	1127-1128	/	
3-159	1128-1129	/	
3-160	1129-1139	github.com	
3-161	1139-1140	/	
3-162	1140-1153	go-sql-driver	
3-163	1153-1154	/	
3-164	1154-1159	mysql	
3-165	1159-1160	#	
3-166	1160-1177	interpolateparams	
3-167	1178-1181	SQL	
3-168	1182-1189	Builder	
3-169	1190-1194	with	
3-170	1195-1215	PreparedStmtPrepared	
3-171	1216-1225	Statement	
3-172	1226-1231	works	
3-173	1232-1236	with	
3-174	1237-1240	RAW	
3-175	1241-1244	SQL	
3-176	1245-1249	also	
3-177	1249-1250	,	
3-178	1251-1254	for	
3-179	1255-1262	example	
3-180	1262-1263	:	
3-181	1264-1266	db	
3-182	1266-1267	,	
3-183	1268-1271	err	
3-184	1272-1273	:	
3-185	1273-1274	=	
3-186	1275-1284	gorm.Open	
3-187	1284-1285	(	
3-188	1285-1296	sqlite.Open	
3-189	1296-1297	(	
3-190	1297-1298	"	
3-191	1298-1305	gorm.db	
3-192	1305-1306	"	
3-193	1306-1307	)	
3-194	1307-1308	,	
3-195	1309-1310	&	
3-196	1310-1321	gorm.Config	
3-197	1321-1322	{	
3-198	1323-1334	PrepareStmt	
3-199	1334-1335	:	
3-200	1336-1340	true	
3-201	1340-1341	,	
3-202	1341-1342	}	
3-203	1342-1343	)	
3-204	1343-1349	db.Raw	
3-205	1349-1350	(	
3-206	1350-1351	"	
3-207	1351-1357	select	
3-208	1358-1361	sum	
3-209	1361-1362	(	
3-210	1362-1365	age	
3-211	1365-1366	)	
3-212	1367-1371	from	
3-213	1372-1377	users	
3-214	1378-1383	where	
3-215	1384-1388	role	
3-216	1389-1390	=	
3-217	1391-1392	?	
3-218	1392-1393	"	

#Text=, "admin").Scan(&age)
#Text=You can also use GORM API to prepare SQL with DryRun Mode, and execute it with prepared statement later, checkout Session Mode for details
#Text=Select FieldsBy default GORM select all fields when querying, you can use Select to specify fields you want
#Text=db.Select("Name", "Age").Find(&Users{})
#Text=Or define a smaller API struct to use the smart select fields feature
#Text=type User struct {
#Text=uint
#Text=Name
#Text=string
#Text=Age
#Text=int
#Text=Gender string
#Text=// hundreds of fields}type APIUser struct {
#Text=uint
#Text=Name string}// Select `id`, `name` automatically when querydb.Model(&User{}).Limit(10).Find(&APIUser{})// SELECT `id`, `name` FROM `users` LIMIT 10
#Text=Iteration / FindInBatchesQuery and process records with iteration or in batches
#Text=Index HintsIndex is used to speed up data search and SQL query performance.
4-1	1393-1394	,	
4-2	1395-1396	"	
4-3	1396-1401	admin	
4-4	1401-1402	"	
4-5	1402-1403	)	
4-6	1403-1404	.	
4-7	1404-1408	Scan	
4-8	1408-1409	(	
4-9	1409-1410	&	
4-10	1410-1413	age	
4-11	1413-1414	)	
4-12	1415-1418	You	
4-13	1419-1422	can	
4-14	1423-1427	also	
4-15	1428-1431	use	
4-16	1432-1436	GORM	
4-17	1437-1440	API	
4-18	1441-1443	to	
4-19	1444-1451	prepare	
4-20	1452-1455	SQL	
4-21	1456-1460	with	
4-22	1461-1467	DryRun	
4-23	1468-1472	Mode	
4-24	1472-1473	,	
4-25	1474-1477	and	
4-26	1478-1485	execute	
4-27	1486-1488	it	
4-28	1489-1493	with	
4-29	1494-1502	prepared	
4-30	1503-1512	statement	
4-31	1513-1518	later	
4-32	1518-1519	,	
4-33	1520-1528	checkout	
4-34	1529-1536	Session	
4-35	1537-1541	Mode	
4-36	1542-1545	for	
4-37	1546-1553	details	
4-38	1554-1560	Select	
4-39	1561-1569	FieldsBy	
4-40	1570-1577	default	
4-41	1578-1582	GORM	
4-42	1583-1589	select	
4-43	1590-1593	all	
4-44	1594-1600	fields	
4-45	1601-1605	when	
4-46	1606-1614	querying	
4-47	1614-1615	,	
4-48	1616-1619	you	
4-49	1620-1623	can	
4-50	1624-1627	use	
4-51	1628-1634	Select	
4-52	1635-1637	to	
4-53	1638-1645	specify	
4-54	1646-1652	fields	
4-55	1653-1656	you	
4-56	1657-1661	want	
4-57	1662-1671	db.Select	
4-58	1671-1672	(	
4-59	1672-1673	"	
4-60	1673-1677	Name	
4-61	1677-1678	"	
4-62	1678-1679	,	
4-63	1680-1681	"	
4-64	1681-1684	Age	
4-65	1684-1685	"	
4-66	1685-1686	)	
4-67	1686-1687	.	
4-68	1687-1691	Find	
4-69	1691-1692	(	
4-70	1692-1693	&	
4-71	1693-1698	Users	
4-72	1698-1699	{	
4-73	1699-1700	}	
4-74	1700-1701	)	
4-75	1702-1704	Or	
4-76	1705-1711	define	
4-77	1712-1713	a	
4-78	1714-1721	smaller	
4-79	1722-1725	API	
4-80	1726-1732	struct	
4-81	1733-1735	to	
4-82	1736-1739	use	
4-83	1740-1743	the	
4-84	1744-1749	smart	
4-85	1750-1756	select	
4-86	1757-1763	fields	
4-87	1764-1771	feature	
4-88	1772-1776	type	
4-89	1777-1781	User	
4-90	1782-1788	struct	
4-91	1789-1790	{	
4-92	1791-1795	uint	
4-93	1796-1800	Name	
4-94	1801-1807	string	
4-95	1808-1811	Age	
4-96	1812-1815	int	
4-97	1816-1822	Gender	
4-98	1823-1829	string	
4-99	1830-1831	/	
4-100	1831-1832	/	
4-101	1833-1841	hundreds	
4-102	1842-1844	of	
4-103	1845-1851	fields	
4-104	1851-1852	}	
4-105	1852-1856	type	
4-106	1857-1864	APIUser	
4-107	1865-1871	struct	
4-108	1872-1873	{	
4-109	1874-1878	uint	
4-110	1879-1883	Name	
4-111	1884-1890	string	
4-112	1890-1891	}	
4-113	1891-1892	/	
4-114	1892-1893	/	
4-115	1894-1900	Select	
4-116	1901-1902	`	
4-117	1902-1904	id	
4-118	1904-1905	`	
4-119	1905-1906	,	
4-120	1907-1908	`	
4-121	1908-1912	name	
4-122	1912-1913	`	
4-123	1914-1927	automatically	
4-124	1928-1932	when	
4-125	1933-1946	querydb.Model	
4-126	1946-1947	(	
4-127	1947-1948	&	
4-128	1948-1952	User	
4-129	1952-1953	{	
4-130	1953-1954	}	
4-131	1954-1955	)	
4-132	1955-1956	.	
4-133	1956-1961	Limit	
4-134	1961-1962	(	
4-135	1962-1964	10	
4-136	1964-1965	)	
4-137	1965-1966	.	
4-138	1966-1970	Find	
4-139	1970-1971	(	
4-140	1971-1972	&	
4-141	1972-1979	APIUser	
4-142	1979-1980	{	
4-143	1980-1981	}	
4-144	1981-1982	)	
4-145	1982-1983	/	
4-146	1983-1984	/	
4-147	1985-1991	SELECT	
4-148	1992-1993	`	
4-149	1993-1995	id	
4-150	1995-1996	`	
4-151	1996-1997	,	
4-152	1998-1999	`	
4-153	1999-2003	name	
4-154	2003-2004	`	
4-155	2005-2009	FROM	
4-156	2010-2011	`	
4-157	2011-2016	users	
4-158	2016-2017	`	
4-159	2018-2023	LIMIT	
4-160	2024-2026	10	
4-161	2027-2036	Iteration	
4-162	2037-2038	/	
4-163	2039-2057	FindInBatchesQuery	
4-164	2058-2061	and	
4-165	2062-2069	process	
4-166	2070-2077	records	
4-167	2078-2082	with	
4-168	2083-2092	iteration	
4-169	2093-2095	or	
4-170	2096-2098	in	
4-171	2099-2106	batches	
4-172	2107-2112	Index	
4-173	2113-2123	HintsIndex	
4-174	2124-2126	is	
4-175	2127-2131	used	
4-176	2132-2134	to	
4-177	2135-2140	speed	
4-178	2141-2143	up	
4-179	2144-2148	data	
4-180	2149-2155	search	
4-181	2156-2159	and	
4-182	2160-2163	SQL	
4-183	2164-2169	query	
4-184	2170-2181	performance	
4-185	2181-2182	.	

#Text=Index Hints gives the optimizer information about how to choose indexes during query processing, which gives the flexibility to choose a more efficient execution plan than the optimizer
#Text=import "gorm.io/hints"db.Clauses(hints.UseIndex("idx_user_name")).Find(&User{})// SELECT * FROM `users` USE INDEX (`idx_user_name`)db.Clauses(hints.ForceIndex("idx_user_name", "idx_user_id").ForJoin()).Find(&User{})// SELECT * FROM `users` FORCE INDEX FOR JOIN (`idx_user_name`,`idx_user_id`)"db.Clauses(
#Text=hints.ForceIndex("idx_user_name", "idx_user_id").ForOrderBy(),
#Text=hints.IgnoreIndex("idx_user_name").ForGroupBy(),).Find(&User{})// SELECT * FROM `users` FORCE INDEX FOR ORDER BY (`idx_user_name`,`idx_user_id`) IGNORE INDEX FOR GROUP BY (`idx_user_name`)"
#Text=Read/Write SplittingIncrease data throughput through read/write splitting, check out Database Resolver
#Text=Last updated: 2021-04-09
#Text=PrevNext
#Text=Platinum Sponsors
#Text=Become a Sponsor!
5-1	2183-2188	Index	
5-2	2189-2194	Hints	
5-3	2195-2200	gives	
5-4	2201-2204	the	
5-5	2205-2214	optimizer	
5-6	2215-2226	information	
5-7	2227-2232	about	
5-8	2233-2236	how	
5-9	2237-2239	to	
5-10	2240-2246	choose	
5-11	2247-2254	indexes	
5-12	2255-2261	during	
5-13	2262-2267	query	
5-14	2268-2278	processing	
5-15	2278-2279	,	
5-16	2280-2285	which	
5-17	2286-2291	gives	
5-18	2292-2295	the	
5-19	2296-2307	flexibility	
5-20	2308-2310	to	
5-21	2311-2317	choose	
5-22	2318-2319	a	
5-23	2320-2324	more	
5-24	2325-2334	efficient	
5-25	2335-2344	execution	
5-26	2345-2349	plan	
5-27	2350-2354	than	
5-28	2355-2358	the	
5-29	2359-2368	optimizer	
5-30	2369-2375	import	
5-31	2376-2377	"	
5-32	2377-2384	gorm.io	
5-33	2384-2385	/	
5-34	2385-2401	hints"db.Clauses	
5-35	2401-2402	(	
5-36	2402-2416	hints.UseIndex	
5-37	2416-2417	(	
5-38	2417-2418	"	
5-39	2418-2431	idx_user_name	
5-40	2431-2432	"	
5-41	2432-2433	)	
5-42	2433-2434	)	
5-43	2434-2435	.	
5-44	2435-2439	Find	
5-45	2439-2440	(	
5-46	2440-2441	&	
5-47	2441-2445	User	
5-48	2445-2446	{	
5-49	2446-2447	}	
5-50	2447-2448	)	
5-51	2448-2449	/	
5-52	2449-2450	/	
5-53	2451-2457	SELECT	
5-54	2458-2459	*	
5-55	2460-2464	FROM	
5-56	2465-2466	`	
5-57	2466-2471	users	
5-58	2471-2472	`	
5-59	2473-2476	USE	
5-60	2477-2482	INDEX	
5-61	2483-2484	(	
5-62	2484-2485	`	
5-63	2485-2498	idx_user_name	
5-64	2498-2499	`	
5-65	2499-2500	)	
5-66	2500-2510	db.Clauses	
5-67	2510-2511	(	
5-68	2511-2527	hints.ForceIndex	
5-69	2527-2528	(	
5-70	2528-2529	"	
5-71	2529-2542	idx_user_name	
5-72	2542-2543	"	
5-73	2543-2544	,	
5-74	2545-2546	"	
5-75	2546-2557	idx_user_id	
5-76	2557-2558	"	
5-77	2558-2559	)	
5-78	2559-2560	.	
5-79	2560-2567	ForJoin	
5-80	2567-2568	(	
5-81	2568-2569	)	
5-82	2569-2570	)	
5-83	2570-2571	.	
5-84	2571-2575	Find	
5-85	2575-2576	(	
5-86	2576-2577	&	
5-87	2577-2581	User	
5-88	2581-2582	{	
5-89	2582-2583	}	
5-90	2583-2584	)	
5-91	2584-2585	/	
5-92	2585-2586	/	
5-93	2587-2593	SELECT	
5-94	2594-2595	*	
5-95	2596-2600	FROM	
5-96	2601-2602	`	
5-97	2602-2607	users	
5-98	2607-2608	`	
5-99	2609-2614	FORCE	
5-100	2615-2620	INDEX	
5-101	2621-2624	FOR	
5-102	2625-2629	JOIN	
5-103	2630-2631	(	
5-104	2631-2632	`	
5-105	2632-2645	idx_user_name	
5-106	2645-2646	`	
5-107	2646-2647	,	
5-108	2647-2648	`	
5-109	2648-2659	idx_user_id	
5-110	2659-2660	`	
5-111	2660-2661	)	
5-112	2661-2662	"	
5-113	2662-2672	db.Clauses	
5-114	2672-2673	(	
5-115	2674-2690	hints.ForceIndex	
5-116	2690-2691	(	
5-117	2691-2692	"	
5-118	2692-2705	idx_user_name	
5-119	2705-2706	"	
5-120	2706-2707	,	
5-121	2708-2709	"	
5-122	2709-2720	idx_user_id	
5-123	2720-2721	"	
5-124	2721-2722	)	
5-125	2722-2723	.	
5-126	2723-2733	ForOrderBy	
5-127	2733-2734	(	
5-128	2734-2735	)	
5-129	2735-2736	,	
5-130	2737-2754	hints.IgnoreIndex	
5-131	2754-2755	(	
5-132	2755-2756	"	
5-133	2756-2769	idx_user_name	
5-134	2769-2770	"	
5-135	2770-2771	)	
5-136	2771-2772	.	
5-137	2772-2782	ForGroupBy	
5-138	2782-2783	(	
5-139	2783-2784	)	
5-140	2784-2785	,	
5-141	2785-2786	)	
5-142	2786-2787	.	
5-143	2787-2791	Find	
5-144	2791-2792	(	
5-145	2792-2793	&	
5-146	2793-2797	User	
5-147	2797-2798	{	
5-148	2798-2799	}	
5-149	2799-2800	)	
5-150	2800-2801	/	
5-151	2801-2802	/	
5-152	2803-2809	SELECT	
5-153	2810-2811	*	
5-154	2812-2816	FROM	
5-155	2817-2818	`	
5-156	2818-2823	users	
5-157	2823-2824	`	
5-158	2825-2830	FORCE	
5-159	2831-2836	INDEX	
5-160	2837-2840	FOR	
5-161	2841-2846	ORDER	
5-162	2847-2849	BY	
5-163	2850-2851	(	
5-164	2851-2852	`	
5-165	2852-2865	idx_user_name	
5-166	2865-2866	`	
5-167	2866-2867	,	
5-168	2867-2868	`	
5-169	2868-2879	idx_user_id	
5-170	2879-2880	`	
5-171	2880-2881	)	
5-172	2882-2888	IGNORE	
5-173	2889-2894	INDEX	
5-174	2895-2898	FOR	
5-175	2899-2904	GROUP	
5-176	2905-2907	BY	
5-177	2908-2909	(	
5-178	2909-2910	`	
5-179	2910-2923	idx_user_name	
5-180	2923-2924	`	
5-181	2924-2925	)	
5-182	2925-2926	"	
5-183	2927-2931	Read	
5-184	2931-2932	/	
5-185	2932-2937	Write	
5-186	2938-2955	SplittingIncrease	
5-187	2956-2960	data	
5-188	2961-2971	throughput	
5-189	2972-2979	through	
5-190	2980-2984	read	
5-191	2984-2985	/	
5-192	2985-2990	write	
5-193	2991-3000	splitting	
5-194	3000-3001	,	
5-195	3002-3007	check	
5-196	3008-3011	out	
5-197	3012-3020	Database	
5-198	3021-3029	Resolver	
5-199	3030-3034	Last	
5-200	3035-3042	updated	
5-201	3042-3043	:	
5-202	3044-3048	2021	
5-203	3048-3049	-	
5-204	3049-3051	04	
5-205	3051-3052	-	
5-206	3052-3054	09	
5-207	3055-3063	PrevNext	
5-208	3064-3072	Platinum	
5-209	3073-3081	Sponsors	
5-210	3082-3088	Become	
5-211	3089-3090	a	
5-212	3091-3098	Sponsor	
5-213	3098-3099	!	

#Text=Platinum Sponsors
#Text=Become a Sponsor!
6-1	3100-3108	Platinum	
6-2	3109-3117	Sponsors	
6-3	3118-3124	Become	
6-4	3125-3126	a	
6-5	3127-3134	Sponsor	
6-6	3134-3135	!	

#Text=OpenCollective Sponsors
#Text=Contents
#Text=Disable Default TransactionCaches Prepared StatementSQL Builder with PreparedStmtSelect FieldsIteration / FindInBatchesIndex HintsRead/Write Splitting
#Text=Improve this page
#Text=Back to Top
#Text=Getting StartedOverviewDeclaring ModelsConnecting to DatabaseCRUD InterfaceCreateQueryAdvanced QueryUpdateDeleteRaw SQL & SQL BuilderAssociationsBelongs ToHas OneHas ManyMany To ManyAssociation ModePreloading (Eager Loading)TutorialsContextError HandlingMethod ChainingSessionHooksTransactionsMigrationLoggerGeneric Database InterfacePerformanceCustomize Data TypesScopesConventionsSettingsAdvanced TopicsDatabase ResolverPrometheusHintsIndexesConstraintsComposite Primary KeySecurityGORM ConfigWrite PluginsWrite DriverChangeLogCommunityContributeTranslate current site
#Text=© 2013~2021 Jinzhu
#Text=Documentation licensed under CC BY 4.0.
7-1	3136-3150	OpenCollective	
7-2	3151-3159	Sponsors	
7-3	3160-3168	Contents	
7-4	3169-3176	Disable	
7-5	3177-3184	Default	
7-6	3185-3202	TransactionCaches	
7-7	3203-3211	Prepared	
7-8	3212-3224	StatementSQL	
7-9	3225-3232	Builder	
7-10	3233-3237	with	
7-11	3238-3256	PreparedStmtSelect	
7-12	3257-3272	FieldsIteration	
7-13	3273-3274	/	
7-14	3275-3293	FindInBatchesIndex	
7-15	3294-3303	HintsRead	
7-16	3303-3304	/	
7-17	3304-3309	Write	
7-18	3310-3319	Splitting	
7-19	3320-3327	Improve	
7-20	3328-3332	this	
7-21	3333-3337	page	
7-22	3338-3342	Back	
7-23	3343-3345	to	
7-24	3346-3349	Top	
7-25	3350-3357	Getting	
7-26	3358-3382	StartedOverviewDeclaring	
7-27	3383-3399	ModelsConnecting	
7-28	3400-3402	to	
7-29	3403-3415	DatabaseCRUD	
7-30	3416-3444	InterfaceCreateQueryAdvanced	
7-31	3445-3465	QueryUpdateDeleteRaw	
7-32	3466-3469	SQL	
7-33	3470-3471	&	
7-34	3472-3475	SQL	
7-35	3476-3502	BuilderAssociationsBelongs	
7-36	3503-3508	ToHas	
7-37	3509-3515	OneHas	
7-38	3516-3524	ManyMany	
7-39	3525-3527	To	
7-40	3528-3543	ManyAssociation	
7-41	3544-3558	ModePreloading	
7-42	3559-3560	(	
7-43	3560-3565	Eager	
7-44	3566-3573	Loading	
7-45	3573-3574	)	
7-46	3574-3595	TutorialsContextError	
7-47	3596-3610	HandlingMethod	
7-48	3611-3665	ChainingSessionHooksTransactionsMigrationLoggerGeneric	
7-49	3666-3674	Database	
7-50	3675-3704	InterfacePerformanceCustomize	
7-51	3705-3709	Data	
7-52	3710-3748	TypesScopesConventionsSettingsAdvanced	
7-53	3749-3763	TopicsDatabase	
7-54	3764-3814	ResolverPrometheusHintsIndexesConstraintsComposite	
7-55	3815-3822	Primary	
7-56	3823-3838	KeySecurityGORM	
7-57	3839-3850	ConfigWrite	
7-58	3851-3863	PluginsWrite	
7-59	3864-3907	DriverChangeLogCommunityContributeTranslate	
7-60	3908-3915	current	
7-61	3916-3920	site	
7-62	3921-3922	©	
7-63	3923-3927	2013	
7-64	3927-3928	~	
7-65	3928-3932	2021	
7-66	3933-3939	Jinzhu	
7-67	3940-3953	Documentation	
7-68	3954-3962	licensed	
7-69	3963-3968	under	
7-70	3969-3971	CC	
7-71	3972-3974	BY	
7-72	3975-3978	4.0	
7-73	3978-3979	.	

#Text=感谢 七牛云 对 CDN 的赞助，无闻 对域名 gorm.cn 的捐赠
#Text=浙ICP备2020033190号-1
#Text=Home
#Text=DocsCommunityAPIContribute
#Text=Getting StartedOverviewDeclaring ModelsConnecting to DatabaseCRUD InterfaceCreateQueryAdvanced QueryUpdateDeleteRaw SQL & SQL BuilderAssociationsBelongs ToHas OneHas ManyMany To ManyAssociation ModePreloading (Eager Loading)TutorialsContextError HandlingMethod ChainingSessionHooksTransactionsMigrationLoggerGeneric Database InterfacePerformanceCustomize Data TypesScopesConventionsSettingsAdvanced TopicsDatabase ResolverPrometheusHintsIndexesConstraintsComposite Primary KeySecurityGORM ConfigWrite PluginsWrite DriverChangeLogCommunityContributeTranslate current site
#Text=English
#Text=English
#Text=简体中文
#Text=Deutsch
#Text=Español
#Text=bahasa Indonesia
#Text=Italiano
#Text=日本語
#Text=Русский
#Text=French
#Text=한국어
8-1	3980-3982	感谢	
8-2	3983-3986	七牛云	
8-3	3987-3988	对	
8-4	3989-3992	CDN	
8-5	3993-3996	的赞助	
8-6	3996-3997	，	
8-7	3997-3999	无闻	
8-8	4000-4003	对域名	
8-9	4004-4011	gorm.cn	
8-10	4012-4015	的捐赠	
8-11	4016-4017	浙	
8-12	4017-4020	ICP	
8-13	4020-4021	备	
8-14	4021-4031	2020033190	
8-15	4031-4032	号	
8-16	4032-4033	-	
8-17	4033-4034	1	
8-18	4035-4039	Home	
8-19	4040-4066	DocsCommunityAPIContribute	
8-20	4067-4074	Getting	
8-21	4075-4099	StartedOverviewDeclaring	
8-22	4100-4116	ModelsConnecting	
8-23	4117-4119	to	
8-24	4120-4132	DatabaseCRUD	
8-25	4133-4161	InterfaceCreateQueryAdvanced	
8-26	4162-4182	QueryUpdateDeleteRaw	
8-27	4183-4186	SQL	
8-28	4187-4188	&	
8-29	4189-4192	SQL	
8-30	4193-4219	BuilderAssociationsBelongs	
8-31	4220-4225	ToHas	
8-32	4226-4232	OneHas	
8-33	4233-4241	ManyMany	
8-34	4242-4244	To	
8-35	4245-4260	ManyAssociation	
8-36	4261-4275	ModePreloading	
8-37	4276-4277	(	
8-38	4277-4282	Eager	
8-39	4283-4290	Loading	
8-40	4290-4291	)	
8-41	4291-4312	TutorialsContextError	
8-42	4313-4327	HandlingMethod	
8-43	4328-4382	ChainingSessionHooksTransactionsMigrationLoggerGeneric	
8-44	4383-4391	Database	
8-45	4392-4421	InterfacePerformanceCustomize	
8-46	4422-4426	Data	
8-47	4427-4465	TypesScopesConventionsSettingsAdvanced	
8-48	4466-4480	TopicsDatabase	
8-49	4481-4531	ResolverPrometheusHintsIndexesConstraintsComposite	
8-50	4532-4539	Primary	
8-51	4540-4555	KeySecurityGORM	
8-52	4556-4567	ConfigWrite	
8-53	4568-4580	PluginsWrite	
8-54	4581-4624	DriverChangeLogCommunityContributeTranslate	
8-55	4625-4632	current	
8-56	4633-4637	site	
8-57	4638-4645	English	
8-58	4646-4653	English	
8-59	4654-4658	简体中文	
8-60	4659-4666	Deutsch	
8-61	4667-4674	Español	
8-62	4675-4681	bahasa	
8-63	4682-4691	Indonesia	
8-64	4692-4700	Italiano	
8-65	4701-4704	日本語	
8-66	4705-4712	Русский	
8-67	4713-4719	French	
8-68	4720-4723	한국어	
