#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value
#T_RL=webanno.custom.Relation|relation|BT_de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity


#Text=WAL in PostgreSQL: 4.
1-1	0-3	WAL	_	_	_	_	
1-2	4-6	in	_	_	_	_	
1-3	7-17	PostgreSQL	_	_	_	_	
1-4	17-18	:	_	_	_	_	
1-5	19-20	4	_	_	_	_	
1-6	20-21	.	_	_	_	_	

#Text=Setup and Tuning / Postgres Professional corporate blog / Habr
#Text=How to become an author
#Text=All streams
#Text=Development
#Text=Administrating
#Text=Design
#Text=Management
#Text=Marketing
#Text=PopSci
#Text=Log in
#Text=Sign up
#Text=135.40
#Text=Rating
#Text=Postgres Professional
#Text=Разработчик СУБД Postgres Pro
#Text=erogov
#Text=April 16, 2020 at 03:05 PM
#Text=WAL in PostgreSQL: 4.
2-1	22-27	Setup	_	_	_	_	
2-2	28-31	and	_	_	_	_	
2-3	32-38	Tuning	_	_	_	_	
2-4	39-40	/	_	_	_	_	
2-5	41-49	Postgres	_	_	_	_	
2-6	50-62	Professional	_	_	_	_	
2-7	63-72	corporate	_	_	_	_	
2-8	73-77	blog	_	_	_	_	
2-9	78-79	/	_	_	_	_	
2-10	80-84	Habr	_	_	_	_	
2-11	85-88	How	_	_	_	_	
2-12	89-91	to	_	_	_	_	
2-13	92-98	become	_	_	_	_	
2-14	99-101	an	_	_	_	_	
2-15	102-108	author	_	_	_	_	
2-16	109-112	All	_	_	_	_	
2-17	113-120	streams	_	_	_	_	
2-18	121-132	Development	_	_	_	_	
2-19	133-147	Administrating	_	_	_	_	
2-20	148-154	Design	_	_	_	_	
2-21	155-165	Management	_	_	_	_	
2-22	166-175	Marketing	_	_	_	_	
2-23	176-182	PopSci	_	_	_	_	
2-24	183-186	Log	_	_	_	_	
2-25	187-189	in	_	_	_	_	
2-26	190-194	Sign	_	_	_	_	
2-27	195-197	up	_	_	_	_	
2-28	198-204	135.40	_	_	_	_	
2-29	205-211	Rating	_	_	_	_	
2-30	212-220	Postgres	_	_	_	_	
2-31	221-233	Professional	_	_	_	_	
2-32	234-245	Разработчик	_	_	_	_	
2-33	246-250	СУБД	_	_	_	_	
2-34	251-259	Postgres	_	_	_	_	
2-35	260-263	Pro	_	_	_	_	
2-36	264-270	erogov	_	_	_	_	
2-37	271-276	April	_	_	_	_	
2-38	277-279	16	_	_	_	_	
2-39	279-280	,	_	_	_	_	
2-40	281-285	2020	_	_	_	_	
2-41	286-288	at	_	_	_	_	
2-42	289-291	03	_	_	_	_	
2-43	291-292	:	_	_	_	_	
2-44	292-294	05	_	_	_	_	
2-45	295-297	PM	_	_	_	_	
2-46	298-301	WAL	_	_	_	_	
2-47	302-304	in	_	_	_	_	
2-48	305-315	PostgreSQL	_	_	_	_	
2-49	315-316	:	_	_	_	_	
2-50	317-318	4	_	_	_	_	
2-51	318-319	.	_	_	_	_	

#Text=Setup and Tuning
#Text=Original author: Egor Rogov
#Text=Postgres Professional corporate blog,
#Text=PostgreSQL,
#Text=SQL
#Text=Translation
#Text=So, we got acquainted with the structure of the buffer cache and in this context concluded that if all the RAM contents got lost due to failure, the write-ahead log (WAL) was required to recover.
3-1	320-325	Setup	_	_	_	_	
3-2	326-329	and	_	_	_	_	
3-3	330-336	Tuning	_	_	_	_	
3-4	337-345	Original	_	_	_	_	
3-5	346-352	author	_	_	_	_	
3-6	352-353	:	_	_	_	_	
3-7	354-358	Egor	_	_	_	_	
3-8	359-364	Rogov	_	_	_	_	
3-9	365-373	Postgres	_	_	_	_	
3-10	374-386	Professional	_	_	_	_	
3-11	387-396	corporate	_	_	_	_	
3-12	397-401	blog	_	_	_	_	
3-13	401-402	,	_	_	_	_	
3-14	403-413	PostgreSQL	_	_	_	_	
3-15	413-414	,	_	_	_	_	
3-16	415-418	SQL	_	_	_	_	
3-17	419-430	Translation	_	_	_	_	
3-18	431-433	So	_	_	_	_	
3-19	433-434	,	_	_	_	_	
3-20	435-437	we	_	_	_	_	
3-21	438-441	got	_	_	_	_	
3-22	442-452	acquainted	_	_	_	_	
3-23	453-457	with	_	_	_	_	
3-24	458-461	the	_	_	_	_	
3-25	462-471	structure	_	_	_	_	
3-26	472-474	of	_	_	_	_	
3-27	475-478	the	_	_	_	_	
3-28	479-485	buffer	_	_	_	_	
3-29	486-491	cache	_	_	_	_	
3-30	492-495	and	_	_	_	_	
3-31	496-498	in	_	_	_	_	
3-32	499-503	this	_	_	_	_	
3-33	504-511	context	_	_	_	_	
3-34	512-521	concluded	_	_	_	_	
3-35	522-526	that	_	_	_	_	
3-36	527-529	if	_	_	_	_	
3-37	530-533	all	_	_	_	_	
3-38	534-537	the	_	_	_	_	
3-39	538-541	RAM	_	_	_	_	
3-40	542-550	contents	_	_	_	_	
3-41	551-554	got	_	_	_	_	
3-42	555-559	lost	_	_	_	_	
3-43	560-563	due	_	_	_	_	
3-44	564-566	to	_	_	_	_	
3-45	567-574	failure	_	_	_	_	
3-46	574-575	,	_	_	_	_	
3-47	576-579	the	_	_	_	_	
3-48	580-591	write-ahead	_	_	_	_	
3-49	592-595	log	_	_	_	_	
3-50	596-597	(	_	_	_	_	
3-51	597-600	WAL	_	_	_	_	
3-52	600-601	)	_	_	_	_	
3-53	602-605	was	_	_	_	_	
3-54	606-614	required	_	_	_	_	
3-55	615-617	to	_	_	_	_	
3-56	618-625	recover	_	_	_	_	
3-57	625-626	.	_	_	_	_	

#Text=The size of the necessary WAL files and the recovery time are limited thanks to the checkpoint performed from time to time.
4-1	627-630	The	_	_	_	_	
4-2	631-635	size	_	_	_	_	
4-3	636-638	of	_	_	_	_	
4-4	639-642	the	_	_	_	_	
4-5	643-652	necessary	_	_	_	_	
4-6	653-656	WAL	_	_	_	_	
4-7	657-662	files	_	_	_	_	
4-8	663-666	and	_	_	_	_	
4-9	667-670	the	_	_	_	_	
4-10	671-679	recovery	_	_	_	_	
4-11	680-684	time	_	_	_	_	
4-12	685-688	are	_	_	_	_	
4-13	689-696	limited	_	_	_	_	
4-14	697-703	thanks	_	_	_	_	
4-15	704-706	to	_	_	_	_	
4-16	707-710	the	_	_	_	_	
4-17	711-721	checkpoint	_	_	_	_	
4-18	722-731	performed	_	_	_	_	
4-19	732-736	from	_	_	_	_	
4-20	737-741	time	_	_	_	_	
4-21	742-744	to	_	_	_	_	
4-22	745-749	time	_	_	_	_	
4-23	749-750	.	_	_	_	_	

#Text=In the previous articles we already reviewed quite a few important settings that anyway relate to WAL.
5-1	751-753	In	_	_	_	_	
5-2	754-757	the	_	_	_	_	
5-3	758-766	previous	_	_	_	_	
5-4	767-775	articles	_	_	_	_	
5-5	776-778	we	_	_	_	_	
5-6	779-786	already	_	_	_	_	
5-7	787-795	reviewed	_	_	_	_	
5-8	796-801	quite	_	_	_	_	
5-9	802-803	a	_	_	_	_	
5-10	804-807	few	_	_	_	_	
5-11	808-817	important	_	_	_	_	
5-12	818-826	settings	_	_	_	_	
5-13	827-831	that	_	_	_	_	
5-14	832-838	anyway	_	_	_	_	
5-15	839-845	relate	_	_	_	_	
5-16	846-848	to	_	_	_	_	
5-17	849-852	WAL	_	_	_	_	
5-18	852-853	.	_	_	_	_	

#Text=In this article (being the last in this series) we will discuss problems of WAL setup that are unaddressed yet: WAL levels and their purpose, as well as the reliability and performance of write-ahead logging.
6-1	854-856	In	_	_	_	_	
6-2	857-861	this	_	_	_	_	
6-3	862-869	article	_	_	_	_	
6-4	870-871	(	_	_	_	_	
6-5	871-876	being	_	_	_	_	
6-6	877-880	the	_	_	_	_	
6-7	881-885	last	_	_	_	_	
6-8	886-888	in	_	_	_	_	
6-9	889-893	this	_	_	_	_	
6-10	894-900	series	_	_	_	_	
6-11	900-901	)	_	_	_	_	
6-12	902-904	we	_	_	_	_	
6-13	905-909	will	_	_	_	_	
6-14	910-917	discuss	_	_	_	_	
6-15	918-926	problems	_	_	_	_	
6-16	927-929	of	_	_	_	_	
6-17	930-933	WAL	_	_	_	_	
6-18	934-939	setup	_	_	_	_	
6-19	940-944	that	_	_	_	_	
6-20	945-948	are	_	_	_	_	
6-21	949-960	unaddressed	_	_	_	_	
6-22	961-964	yet	_	_	_	_	
6-23	964-965	:	_	_	_	_	
6-24	966-969	WAL	_	_	_	_	
6-25	970-976	levels	_	_	_	_	
6-26	977-980	and	_	_	_	_	
6-27	981-986	their	_	_	_	_	
6-28	987-994	purpose	_	_	_	_	
6-29	994-995	,	_	_	_	_	
6-30	996-998	as	_	_	_	_	
6-31	999-1003	well	_	_	_	_	
6-32	1004-1006	as	_	_	_	_	
6-33	1007-1010	the	_	_	_	_	
6-34	1011-1022	reliability	_	_	_	_	
6-35	1023-1026	and	_	_	_	_	
6-36	1027-1038	performance	_	_	_	_	
6-37	1039-1041	of	_	_	_	_	
6-38	1042-1053	write-ahead	_	_	_	_	
6-39	1054-1061	logging	_	_	_	_	
6-40	1061-1062	.	_	_	_	_	

#Text=WAL levels
#Text=The main WAL task is to ensure recovery after a failure.
7-1	1063-1066	WAL	_	_	_	_	
7-2	1067-1073	levels	_	_	_	_	
7-3	1074-1077	The	_	_	_	_	
7-4	1078-1082	main	_	_	_	_	
7-5	1083-1086	WAL	_	_	_	_	
7-6	1087-1091	task	_	_	_	_	
7-7	1092-1094	is	_	_	_	_	
7-8	1095-1097	to	_	_	_	_	
7-9	1098-1104	ensure	_	_	_	_	
7-10	1105-1113	recovery	_	_	_	_	
7-11	1114-1119	after	_	_	_	_	
7-12	1120-1121	a	_	_	_	_	
7-13	1122-1129	failure	_	_	_	_	
7-14	1129-1130	.	_	_	_	_	

#Text=But once we have to maintain the log anyway, we can also adapt it to other tasks by adding some more information to it.
8-1	1131-1134	But	_	_	_	_	
8-2	1135-1139	once	_	_	_	_	
8-3	1140-1142	we	_	_	_	_	
8-4	1143-1147	have	_	_	_	_	
8-5	1148-1150	to	_	_	_	_	
8-6	1151-1159	maintain	_	_	_	_	
8-7	1160-1163	the	_	_	_	_	
8-8	1164-1167	log	_	_	_	_	
8-9	1168-1174	anyway	_	_	_	_	
8-10	1174-1175	,	_	_	_	_	
8-11	1176-1178	we	_	_	_	_	
8-12	1179-1182	can	_	_	_	_	
8-13	1183-1187	also	_	_	_	_	
8-14	1188-1193	adapt	_	_	_	_	
8-15	1194-1196	it	_	_	_	_	
8-16	1197-1199	to	_	_	_	_	
8-17	1200-1205	other	_	_	_	_	
8-18	1206-1211	tasks	_	_	_	_	
8-19	1212-1214	by	_	_	_	_	
8-20	1215-1221	adding	_	_	_	_	
8-21	1222-1226	some	_	_	_	_	
8-22	1227-1231	more	_	_	_	_	
8-23	1232-1243	information	_	_	_	_	
8-24	1244-1246	to	_	_	_	_	
8-25	1247-1249	it	_	_	_	_	
8-26	1249-1250	.	_	_	_	_	

#Text=There are several logging levels.
9-1	1251-1256	There	_	_	_	_	
9-2	1257-1260	are	_	_	_	_	
9-3	1261-1268	several	_	_	_	_	
9-4	1269-1276	logging	_	_	_	_	
9-5	1277-1283	levels	_	_	_	_	
9-6	1283-1284	.	_	_	_	_	

#Text=The wal_level parameter specifies the level, and each next level includes everything that gets into WAL of the preceding level plus something new.
10-1	1285-1288	The	_	_	_	_	
10-2	1289-1298	wal_level	_	_	_	_	
10-3	1299-1308	parameter	_	_	_	_	
10-4	1309-1318	specifies	_	_	_	_	
10-5	1319-1322	the	_	_	_	_	
10-6	1323-1328	level	_	_	_	_	
10-7	1328-1329	,	_	_	_	_	
10-8	1330-1333	and	_	_	_	_	
10-9	1334-1338	each	_	_	_	_	
10-10	1339-1343	next	_	_	_	_	
10-11	1344-1349	level	_	_	_	_	
10-12	1350-1358	includes	_	_	_	_	
10-13	1359-1369	everything	_	_	_	_	
10-14	1370-1374	that	_	_	_	_	
10-15	1375-1379	gets	_	_	_	_	
10-16	1380-1384	into	_	_	_	_	
10-17	1385-1388	WAL	_	_	_	_	
10-18	1389-1391	of	_	_	_	_	
10-19	1392-1395	the	_	_	_	_	
10-20	1396-1405	preceding	_	_	_	_	
10-21	1406-1411	level	_	_	_	_	
10-22	1412-1416	plus	_	_	_	_	
10-23	1417-1426	something	_	_	_	_	
10-24	1427-1430	new	_	_	_	_	
10-25	1430-1431	.	_	_	_	_	

#Text=Minimal
#Text=The minimum possible level is set by the value of wal_level = minimal and ensures only recovery after a failure.
11-1	1432-1439	Minimal	_	_	_	_	
11-2	1440-1443	The	_	_	_	_	
11-3	1444-1451	minimum	_	_	_	_	
11-4	1452-1460	possible	_	_	_	_	
11-5	1461-1466	level	_	_	_	_	
11-6	1467-1469	is	_	_	_	_	
11-7	1470-1473	set	_	_	_	_	
11-8	1474-1476	by	_	_	_	_	
11-9	1477-1480	the	_	_	_	_	
11-10	1481-1486	value	_	_	_	_	
11-11	1487-1489	of	_	_	_	_	
11-12	1490-1499	wal_level	*	parameter	_	_	
11-13	1500-1501	=	_	_	_	_	
11-14	1502-1509	minimal	*	value	Associated-With	11-12	
11-15	1510-1513	and	_	_	_	_	
11-16	1514-1521	ensures	_	_	_	_	
11-17	1522-1526	only	_	_	_	_	
11-18	1527-1535	recovery	_	_	_	_	
11-19	1536-1541	after	_	_	_	_	
11-20	1542-1543	a	_	_	_	_	
11-21	1544-1551	failure	_	_	_	_	
11-22	1551-1552	.	_	_	_	_	

#Text=To save space, the operations related to bulk data processing (such as CREATE TABLE AS SELECT or CREATE INDEX) are not WAL-logged.
12-1	1553-1555	To	_	_	_	_	
12-2	1556-1560	save	_	_	_	_	
12-3	1561-1566	space	_	_	_	_	
12-4	1566-1567	,	_	_	_	_	
12-5	1568-1571	the	_	_	_	_	
12-6	1572-1582	operations	_	_	_	_	
12-7	1583-1590	related	_	_	_	_	
12-8	1591-1593	to	_	_	_	_	
12-9	1594-1598	bulk	_	_	_	_	
12-10	1599-1603	data	_	_	_	_	
12-11	1604-1614	processing	_	_	_	_	
12-12	1615-1616	(	_	_	_	_	
12-13	1616-1620	such	_	_	_	_	
12-14	1621-1623	as	_	_	_	_	
12-15	1624-1630	CREATE	_	_	_	_	
12-16	1631-1636	TABLE	_	_	_	_	
12-17	1637-1639	AS	_	_	_	_	
12-18	1640-1646	SELECT	_	_	_	_	
12-19	1647-1649	or	_	_	_	_	
12-20	1650-1656	CREATE	_	_	_	_	
12-21	1657-1662	INDEX	_	_	_	_	
12-22	1662-1663	)	_	_	_	_	
12-23	1664-1667	are	_	_	_	_	
12-24	1668-1671	not	_	_	_	_	
12-25	1672-1682	WAL-logged	_	_	_	_	
12-26	1682-1683	.	_	_	_	_	

#Text=Instead, the data needed are immediately written to disk, and a new object is added to the system catalog and becomes visible at the transaction commit.
13-1	1684-1691	Instead	_	_	_	_	
13-2	1691-1692	,	_	_	_	_	
13-3	1693-1696	the	_	_	_	_	
13-4	1697-1701	data	_	_	_	_	
13-5	1702-1708	needed	_	_	_	_	
13-6	1709-1712	are	_	_	_	_	
13-7	1713-1724	immediately	_	_	_	_	
13-8	1725-1732	written	_	_	_	_	
13-9	1733-1735	to	_	_	_	_	
13-10	1736-1740	disk	_	_	_	_	
13-11	1740-1741	,	_	_	_	_	
13-12	1742-1745	and	_	_	_	_	
13-13	1746-1747	a	_	_	_	_	
13-14	1748-1751	new	_	_	_	_	
13-15	1752-1758	object	_	_	_	_	
13-16	1759-1761	is	_	_	_	_	
13-17	1762-1767	added	_	_	_	_	
13-18	1768-1770	to	_	_	_	_	
13-19	1771-1774	the	_	_	_	_	
13-20	1775-1781	system	_	_	_	_	
13-21	1782-1789	catalog	_	_	_	_	
13-22	1790-1793	and	_	_	_	_	
13-23	1794-1801	becomes	_	_	_	_	
13-24	1802-1809	visible	_	_	_	_	
13-25	1810-1812	at	_	_	_	_	
13-26	1813-1816	the	_	_	_	_	
13-27	1817-1828	transaction	_	_	_	_	
13-28	1829-1835	commit	_	_	_	_	
13-29	1835-1836	.	_	_	_	_	

#Text=If a failure occurs while the operation is performed, the data that are already written remain invisible and do not violate the consistency rules.
14-1	1837-1839	If	_	_	_	_	
14-2	1840-1841	a	_	_	_	_	
14-3	1842-1849	failure	_	_	_	_	
14-4	1850-1856	occurs	_	_	_	_	
14-5	1857-1862	while	_	_	_	_	
14-6	1863-1866	the	_	_	_	_	
14-7	1867-1876	operation	_	_	_	_	
14-8	1877-1879	is	_	_	_	_	
14-9	1880-1889	performed	_	_	_	_	
14-10	1889-1890	,	_	_	_	_	
14-11	1891-1894	the	_	_	_	_	
14-12	1895-1899	data	_	_	_	_	
14-13	1900-1904	that	_	_	_	_	
14-14	1905-1908	are	_	_	_	_	
14-15	1909-1916	already	_	_	_	_	
14-16	1917-1924	written	_	_	_	_	
14-17	1925-1931	remain	_	_	_	_	
14-18	1932-1941	invisible	_	_	_	_	
14-19	1942-1945	and	_	_	_	_	
14-20	1946-1948	do	_	_	_	_	
14-21	1949-1952	not	_	_	_	_	
14-22	1953-1960	violate	_	_	_	_	
14-23	1961-1964	the	_	_	_	_	
14-24	1965-1976	consistency	_	_	_	_	
14-25	1977-1982	rules	_	_	_	_	
14-26	1982-1983	.	_	_	_	_	

#Text=And if a failure occurs after completion of the operation, everything needed is already on disk and does not need logging.
15-1	1984-1987	And	_	_	_	_	
15-2	1988-1990	if	_	_	_	_	
15-3	1991-1992	a	_	_	_	_	
15-4	1993-2000	failure	_	_	_	_	
15-5	2001-2007	occurs	_	_	_	_	
15-6	2008-2013	after	_	_	_	_	
15-7	2014-2024	completion	_	_	_	_	
15-8	2025-2027	of	_	_	_	_	
15-9	2028-2031	the	_	_	_	_	
15-10	2032-2041	operation	_	_	_	_	
15-11	2041-2042	,	_	_	_	_	
15-12	2043-2053	everything	_	_	_	_	
15-13	2054-2060	needed	_	_	_	_	
15-14	2061-2063	is	_	_	_	_	
15-15	2064-2071	already	_	_	_	_	
15-16	2072-2074	on	_	_	_	_	
15-17	2075-2079	disk	_	_	_	_	
15-18	2080-2083	and	_	_	_	_	
15-19	2084-2088	does	_	_	_	_	
15-20	2089-2092	not	_	_	_	_	
15-21	2093-2097	need	_	_	_	_	
15-22	2098-2105	logging	_	_	_	_	
15-23	2105-2106	.	_	_	_	_	

#Text=Let's take a look.
16-1	2107-2112	Let's	_	_	_	_	
16-2	2113-2117	take	_	_	_	_	
16-3	2118-2119	a	_	_	_	_	
16-4	2120-2124	look	_	_	_	_	
16-5	2124-2125	.	_	_	_	_	

#Text=First we'll set the necessary level (to this end, we will also need to change another parameter — max_wal_senders).
#Text==> ALTER SYSTEM SET wal_level = minimal;
#Text==> ALTER SYSTEM SET max_wal_senders = 0;
#Text=student$ sudo pg_ctlcluster 11 main restart
#Text=Note that the change of the level requires restarting the server.
17-1	2126-2131	First	_	_	_	_	
17-2	2132-2137	we'll	_	_	_	_	
17-3	2138-2141	set	_	_	_	_	
17-4	2142-2145	the	_	_	_	_	
17-5	2146-2155	necessary	_	_	_	_	
17-6	2156-2161	level	_	_	_	_	
17-7	2162-2163	(	_	_	_	_	
17-8	2163-2165	to	_	_	_	_	
17-9	2166-2170	this	_	_	_	_	
17-10	2171-2174	end	_	_	_	_	
17-11	2174-2175	,	_	_	_	_	
17-12	2176-2178	we	_	_	_	_	
17-13	2179-2183	will	_	_	_	_	
17-14	2184-2188	also	_	_	_	_	
17-15	2189-2193	need	_	_	_	_	
17-16	2194-2196	to	_	_	_	_	
17-17	2197-2203	change	_	_	_	_	
17-18	2204-2211	another	_	_	_	_	
17-19	2212-2221	parameter	_	_	_	_	
17-20	2221-2222	 	_	_	_	_	
17-21	2222-2223	—	_	_	_	_	
17-22	2224-2239	max_wal_senders	_	_	_	_	
17-23	2239-2240	)	_	_	_	_	
17-24	2240-2241	.	_	_	_	_	
17-25	2242-2243	=	_	_	_	_	
17-26	2243-2244	>	_	_	_	_	
17-27	2245-2250	ALTER	_	_	_	_	
17-28	2251-2257	SYSTEM	_	_	_	_	
17-29	2258-2261	SET	_	_	_	_	
17-30	2262-2271	wal_level	*	parameter	_	_	
17-31	2272-2273	=	_	_	_	_	
17-32	2274-2281	minimal	*	value	Associated-With	17-30	
17-33	2281-2282	;	_	_	_	_	
17-34	2283-2284	=	_	_	_	_	
17-35	2284-2285	>	_	_	_	_	
17-36	2286-2291	ALTER	_	_	_	_	
17-37	2292-2298	SYSTEM	_	_	_	_	
17-38	2299-2302	SET	_	_	_	_	
17-39	2303-2318	max_wal_senders	*	parameter	_	_	
17-40	2319-2320	=	_	_	_	_	
17-41	2321-2322	0	*	value	Associated-With	17-39	
17-42	2322-2323	;	_	_	_	_	
17-43	2324-2331	student	_	_	_	_	
17-44	2331-2332	$	_	_	_	_	
17-45	2333-2337	sudo	_	_	_	_	
17-46	2338-2351	pg_ctlcluster	_	_	_	_	
17-47	2352-2354	11	_	_	_	_	
17-48	2355-2359	main	_	_	_	_	
17-49	2360-2367	restart	_	_	_	_	
17-50	2368-2372	Note	_	_	_	_	
17-51	2373-2377	that	_	_	_	_	
17-52	2378-2381	the	_	_	_	_	
17-53	2382-2388	change	_	_	_	_	
17-54	2389-2391	of	_	_	_	_	
17-55	2392-2395	the	_	_	_	_	
17-56	2396-2401	level	_	_	_	_	
17-57	2402-2410	requires	_	_	_	_	
17-58	2411-2421	restarting	_	_	_	_	
17-59	2422-2425	the	_	_	_	_	
17-60	2426-2432	server	_	_	_	_	
17-61	2432-2433	.	_	_	_	_	

#Text=Let's remember the current WAL location:
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/353927BC
#Text=(1 row)
#Text=Now let's perform creation of a table (CREATE TABLE AS SELECT) and remember the WAL location again.
18-1	2434-2439	Let's	_	_	_	_	
18-2	2440-2448	remember	_	_	_	_	
18-3	2449-2452	the	_	_	_	_	
18-4	2453-2460	current	_	_	_	_	
18-5	2461-2464	WAL	_	_	_	_	
18-6	2465-2473	location	_	_	_	_	
18-7	2473-2474	:	_	_	_	_	
18-8	2475-2476	=	_	_	_	_	
18-9	2476-2477	>	_	_	_	_	
18-10	2478-2484	SELECT	_	_	_	_	
18-11	2485-2510	pg_current_wal_insert_lsn	_	_	_	_	
18-12	2510-2511	(	_	_	_	_	
18-13	2511-2512	)	_	_	_	_	
18-14	2512-2513	;	_	_	_	_	
18-15	2514-2539	pg_current_wal_insert_lsn	_	_	_	_	
18-16	2540-2541	-	_	_	_	_	
18-17	2541-2542	-	_	_	_	_	
18-18	2542-2543	-	_	_	_	_	
18-19	2543-2544	-	_	_	_	_	
18-20	2544-2545	-	_	_	_	_	
18-21	2545-2546	-	_	_	_	_	
18-22	2546-2547	-	_	_	_	_	
18-23	2547-2548	-	_	_	_	_	
18-24	2548-2549	-	_	_	_	_	
18-25	2549-2550	-	_	_	_	_	
18-26	2550-2551	-	_	_	_	_	
18-27	2551-2552	-	_	_	_	_	
18-28	2552-2553	-	_	_	_	_	
18-29	2553-2554	-	_	_	_	_	
18-30	2554-2555	-	_	_	_	_	
18-31	2555-2556	-	_	_	_	_	
18-32	2556-2557	-	_	_	_	_	
18-33	2557-2558	-	_	_	_	_	
18-34	2558-2559	-	_	_	_	_	
18-35	2559-2560	-	_	_	_	_	
18-36	2560-2561	-	_	_	_	_	
18-37	2561-2562	-	_	_	_	_	
18-38	2562-2563	-	_	_	_	_	
18-39	2563-2564	-	_	_	_	_	
18-40	2564-2565	-	_	_	_	_	
18-41	2565-2566	-	_	_	_	_	
18-42	2566-2567	-	_	_	_	_	
18-43	2568-2569	0	_	_	_	_	
18-44	2569-2570	/	_	_	_	_	
18-45	2570-2578	353927BC	_	_	_	_	
18-46	2579-2580	(	_	_	_	_	
18-47	2580-2581	1	_	_	_	_	
18-48	2582-2585	row	_	_	_	_	
18-49	2585-2586	)	_	_	_	_	
18-50	2587-2590	Now	_	_	_	_	
18-51	2591-2596	let's	_	_	_	_	
18-52	2597-2604	perform	_	_	_	_	
18-53	2605-2613	creation	_	_	_	_	
18-54	2614-2616	of	_	_	_	_	
18-55	2617-2618	a	_	_	_	_	
18-56	2619-2624	table	_	_	_	_	
18-57	2625-2626	(	_	_	_	_	
18-58	2626-2632	CREATE	_	_	_	_	
18-59	2633-2638	TABLE	_	_	_	_	
18-60	2639-2641	AS	_	_	_	_	
18-61	2642-2648	SELECT	_	_	_	_	
18-62	2648-2649	)	_	_	_	_	
18-63	2650-2653	and	_	_	_	_	
18-64	2654-2662	remember	_	_	_	_	
18-65	2663-2666	the	_	_	_	_	
18-66	2667-2670	WAL	_	_	_	_	
18-67	2671-2679	location	_	_	_	_	
18-68	2680-2685	again	_	_	_	_	
18-69	2685-2686	.	_	_	_	_	

#Text=The amount of data retrieved by the SELECT operator does not matter at all in this case, so one row is enough.
#Text==> CREATE TABLE wallevel AS
#Text=SELECT 1 AS n;
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/353A7DFC
#Text=(1 row)
#Text=Let's look at WAL records using the familiar pg_waldump utility.
#Text=postgres$ /usr/lib/postgresql/11/bin/pg_waldump -p /var/lib/postgresql/11/main/pg_wal -s 0/353927BC -e 0/353A7DFC
#Text=Certainly, some details can differ from one launch to another, but in this case we get the following.
19-1	2687-2690	The	_	_	_	_	
19-2	2691-2697	amount	_	_	_	_	
19-3	2698-2700	of	_	_	_	_	
19-4	2701-2705	data	_	_	_	_	
19-5	2706-2715	retrieved	_	_	_	_	
19-6	2716-2718	by	_	_	_	_	
19-7	2719-2722	the	_	_	_	_	
19-8	2723-2729	SELECT	_	_	_	_	
19-9	2730-2738	operator	_	_	_	_	
19-10	2739-2743	does	_	_	_	_	
19-11	2744-2747	not	_	_	_	_	
19-12	2748-2754	matter	_	_	_	_	
19-13	2755-2757	at	_	_	_	_	
19-14	2758-2761	all	_	_	_	_	
19-15	2762-2764	in	_	_	_	_	
19-16	2765-2769	this	_	_	_	_	
19-17	2770-2774	case	_	_	_	_	
19-18	2774-2775	,	_	_	_	_	
19-19	2776-2778	so	_	_	_	_	
19-20	2779-2782	one	_	_	_	_	
19-21	2783-2786	row	_	_	_	_	
19-22	2787-2789	is	_	_	_	_	
19-23	2790-2796	enough	_	_	_	_	
19-24	2796-2797	.	_	_	_	_	
19-25	2798-2799	=	_	_	_	_	
19-26	2799-2800	>	_	_	_	_	
19-27	2801-2807	CREATE	_	_	_	_	
19-28	2808-2813	TABLE	_	_	_	_	
19-29	2814-2822	wallevel	_	_	_	_	
19-30	2823-2825	AS	_	_	_	_	
19-31	2826-2832	SELECT	_	_	_	_	
19-32	2833-2834	1	_	_	_	_	
19-33	2835-2837	AS	_	_	_	_	
19-34	2838-2839	n	_	_	_	_	
19-35	2839-2840	;	_	_	_	_	
19-36	2841-2842	=	_	_	_	_	
19-37	2842-2843	>	_	_	_	_	
19-38	2844-2850	SELECT	_	_	_	_	
19-39	2851-2876	pg_current_wal_insert_lsn	_	_	_	_	
19-40	2876-2877	(	_	_	_	_	
19-41	2877-2878	)	_	_	_	_	
19-42	2878-2879	;	_	_	_	_	
19-43	2880-2905	pg_current_wal_insert_lsn	_	_	_	_	
19-44	2906-2907	-	_	_	_	_	
19-45	2907-2908	-	_	_	_	_	
19-46	2908-2909	-	_	_	_	_	
19-47	2909-2910	-	_	_	_	_	
19-48	2910-2911	-	_	_	_	_	
19-49	2911-2912	-	_	_	_	_	
19-50	2912-2913	-	_	_	_	_	
19-51	2913-2914	-	_	_	_	_	
19-52	2914-2915	-	_	_	_	_	
19-53	2915-2916	-	_	_	_	_	
19-54	2916-2917	-	_	_	_	_	
19-55	2917-2918	-	_	_	_	_	
19-56	2918-2919	-	_	_	_	_	
19-57	2919-2920	-	_	_	_	_	
19-58	2920-2921	-	_	_	_	_	
19-59	2921-2922	-	_	_	_	_	
19-60	2922-2923	-	_	_	_	_	
19-61	2923-2924	-	_	_	_	_	
19-62	2924-2925	-	_	_	_	_	
19-63	2925-2926	-	_	_	_	_	
19-64	2926-2927	-	_	_	_	_	
19-65	2927-2928	-	_	_	_	_	
19-66	2928-2929	-	_	_	_	_	
19-67	2929-2930	-	_	_	_	_	
19-68	2930-2931	-	_	_	_	_	
19-69	2931-2932	-	_	_	_	_	
19-70	2932-2933	-	_	_	_	_	
19-71	2934-2935	0	_	_	_	_	
19-72	2935-2936	/	_	_	_	_	
19-73	2936-2944	353A7DFC	_	_	_	_	
19-74	2945-2946	(	_	_	_	_	
19-75	2946-2947	1	_	_	_	_	
19-76	2948-2951	row	_	_	_	_	
19-77	2951-2952	)	_	_	_	_	
19-78	2953-2958	Let's	_	_	_	_	
19-79	2959-2963	look	_	_	_	_	
19-80	2964-2966	at	_	_	_	_	
19-81	2967-2970	WAL	_	_	_	_	
19-82	2971-2978	records	_	_	_	_	
19-83	2979-2984	using	_	_	_	_	
19-84	2985-2988	the	_	_	_	_	
19-85	2989-2997	familiar	_	_	_	_	
19-86	2998-3008	pg_waldump	_	_	_	_	
19-87	3009-3016	utility	_	_	_	_	
19-88	3016-3017	.	_	_	_	_	
19-89	3018-3026	postgres	_	_	_	_	
19-90	3026-3027	$	_	_	_	_	
19-91	3028-3029	/	_	_	_	_	
19-92	3029-3032	usr	_	_	_	_	
19-93	3032-3033	/	_	_	_	_	
19-94	3033-3036	lib	_	_	_	_	
19-95	3036-3037	/	_	_	_	_	
19-96	3037-3047	postgresql	_	_	_	_	
19-97	3047-3048	/	_	_	_	_	
19-98	3048-3050	11	_	_	_	_	
19-99	3050-3051	/	_	_	_	_	
19-100	3051-3054	bin	_	_	_	_	
19-101	3054-3055	/	_	_	_	_	
19-102	3055-3065	pg_waldump	_	_	_	_	
19-103	3066-3067	-	_	_	_	_	
19-104	3067-3068	p	_	_	_	_	
19-105	3069-3070	/	_	_	_	_	
19-106	3070-3073	var	_	_	_	_	
19-107	3073-3074	/	_	_	_	_	
19-108	3074-3077	lib	_	_	_	_	
19-109	3077-3078	/	_	_	_	_	
19-110	3078-3088	postgresql	_	_	_	_	
19-111	3088-3089	/	_	_	_	_	
19-112	3089-3091	11	_	_	_	_	
19-113	3091-3092	/	_	_	_	_	
19-114	3092-3096	main	_	_	_	_	
19-115	3096-3097	/	_	_	_	_	
19-116	3097-3103	pg_wal	_	_	_	_	
19-117	3104-3105	-	_	_	_	_	
19-118	3105-3106	s	_	_	_	_	
19-119	3107-3108	0	_	_	_	_	
19-120	3108-3109	/	_	_	_	_	
19-121	3109-3117	353927BC	_	_	_	_	
19-122	3118-3119	-	_	_	_	_	
19-123	3119-3120	e	_	_	_	_	
19-124	3121-3122	0	_	_	_	_	
19-125	3122-3123	/	_	_	_	_	
19-126	3123-3131	353A7DFC	_	_	_	_	
19-127	3132-3141	Certainly	_	_	_	_	
19-128	3141-3142	,	_	_	_	_	
19-129	3143-3147	some	_	_	_	_	
19-130	3148-3155	details	_	_	_	_	
19-131	3156-3159	can	_	_	_	_	
19-132	3160-3166	differ	_	_	_	_	
19-133	3167-3171	from	_	_	_	_	
19-134	3172-3175	one	_	_	_	_	
19-135	3176-3182	launch	_	_	_	_	
19-136	3183-3185	to	_	_	_	_	
19-137	3186-3193	another	_	_	_	_	
19-138	3193-3194	,	_	_	_	_	
19-139	3195-3198	but	_	_	_	_	
19-140	3199-3201	in	_	_	_	_	
19-141	3202-3206	this	_	_	_	_	
19-142	3207-3211	case	_	_	_	_	
19-143	3212-3214	we	_	_	_	_	
19-144	3215-3218	get	_	_	_	_	
19-145	3219-3222	the	_	_	_	_	
19-146	3223-3232	following	_	_	_	_	
19-147	3232-3233	.	_	_	_	_	

#Text=The record of the Heap2 manager relates to vacuuming, here it is in-page vacuum of a table from the system catalog (system objects are easily distinguished with a naked eye by a small number in rel):
#Text=rmgr: Heap2
#Text=len (rec/tot):
#Text=59/
#Text=7587, tx:
#Text=0, lsn: 0/353927BC, prev 0/35392788, desc: CLEAN remxid 101126, blkref #0: rel 1663/16386/1247 blk 8 FPW
#Text=The record of getting the next OID for the table to be created follows:
#Text=rmgr: XLOG
#Text=len (rec/tot):
#Text=30/
#Text=30, tx:
#Text=0, lsn: 0/35394574, prev 0/353927BC, desc: NEXTOID 82295
#Text=And this is pure creation of the table:
#Text=rmgr: Storage
#Text=len (rec/tot):
#Text=42/
#Text=42, tx:
#Text=0, lsn: 0/35394594, prev 0/35394574, desc: CREATE base/16386/74103
#Text=But the insert of data into the table is not WAL-logged.
20-1	3234-3237	The	_	_	_	_	
20-2	3238-3244	record	_	_	_	_	
20-3	3245-3247	of	_	_	_	_	
20-4	3248-3251	the	_	_	_	_	
20-5	3252-3257	Heap2	_	_	_	_	
20-6	3258-3265	manager	_	_	_	_	
20-7	3266-3273	relates	_	_	_	_	
20-8	3274-3276	to	_	_	_	_	
20-9	3277-3286	vacuuming	_	_	_	_	
20-10	3286-3287	,	_	_	_	_	
20-11	3288-3292	here	_	_	_	_	
20-12	3293-3295	it	_	_	_	_	
20-13	3296-3298	is	_	_	_	_	
20-14	3299-3306	in-page	_	_	_	_	
20-15	3307-3313	vacuum	_	_	_	_	
20-16	3314-3316	of	_	_	_	_	
20-17	3317-3318	a	_	_	_	_	
20-18	3319-3324	table	_	_	_	_	
20-19	3325-3329	from	_	_	_	_	
20-20	3330-3333	the	_	_	_	_	
20-21	3334-3340	system	_	_	_	_	
20-22	3341-3348	catalog	_	_	_	_	
20-23	3349-3350	(	_	_	_	_	
20-24	3350-3356	system	_	_	_	_	
20-25	3357-3364	objects	_	_	_	_	
20-26	3365-3368	are	_	_	_	_	
20-27	3369-3375	easily	_	_	_	_	
20-28	3376-3389	distinguished	_	_	_	_	
20-29	3390-3394	with	_	_	_	_	
20-30	3395-3396	a	_	_	_	_	
20-31	3397-3402	naked	_	_	_	_	
20-32	3403-3406	eye	_	_	_	_	
20-33	3407-3409	by	_	_	_	_	
20-34	3410-3411	a	_	_	_	_	
20-35	3412-3417	small	_	_	_	_	
20-36	3418-3424	number	_	_	_	_	
20-37	3425-3427	in	_	_	_	_	
20-38	3428-3431	rel	_	_	_	_	
20-39	3431-3432	)	_	_	_	_	
20-40	3432-3433	:	_	_	_	_	
20-41	3434-3438	rmgr	_	_	_	_	
20-42	3438-3439	:	_	_	_	_	
20-43	3440-3445	Heap2	_	_	_	_	
20-44	3446-3449	len	_	_	_	_	
20-45	3450-3451	(	_	_	_	_	
20-46	3451-3454	rec	_	_	_	_	
20-47	3454-3455	/	_	_	_	_	
20-48	3455-3458	tot	_	_	_	_	
20-49	3458-3459	)	_	_	_	_	
20-50	3459-3460	:	_	_	_	_	
20-51	3461-3463	59	_	_	_	_	
20-52	3463-3464	/	_	_	_	_	
20-53	3465-3469	7587	_	_	_	_	
20-54	3469-3470	,	_	_	_	_	
20-55	3471-3473	tx	_	_	_	_	
20-56	3473-3474	:	_	_	_	_	
20-57	3475-3476	0	_	_	_	_	
20-58	3476-3477	,	_	_	_	_	
20-59	3478-3481	lsn	_	_	_	_	
20-60	3481-3482	:	_	_	_	_	
20-61	3483-3484	0	_	_	_	_	
20-62	3484-3485	/	_	_	_	_	
20-63	3485-3493	353927BC	_	_	_	_	
20-64	3493-3494	,	_	_	_	_	
20-65	3495-3499	prev	_	_	_	_	
20-66	3500-3501	0	_	_	_	_	
20-67	3501-3502	/	_	_	_	_	
20-68	3502-3510	35392788	_	_	_	_	
20-69	3510-3511	,	_	_	_	_	
20-70	3512-3516	desc	_	_	_	_	
20-71	3516-3517	:	_	_	_	_	
20-72	3518-3523	CLEAN	_	_	_	_	
20-73	3524-3530	remxid	_	_	_	_	
20-74	3531-3537	101126	_	_	_	_	
20-75	3537-3538	,	_	_	_	_	
20-76	3539-3545	blkref	_	_	_	_	
20-77	3546-3548	#0	_	_	_	_	
20-78	3548-3549	:	_	_	_	_	
20-79	3550-3553	rel	_	_	_	_	
20-80	3554-3558	1663	_	_	_	_	
20-81	3558-3559	/	_	_	_	_	
20-82	3559-3564	16386	_	_	_	_	
20-83	3564-3565	/	_	_	_	_	
20-84	3565-3569	1247	_	_	_	_	
20-85	3570-3573	blk	_	_	_	_	
20-86	3574-3575	8	_	_	_	_	
20-87	3576-3579	FPW	_	_	_	_	
20-88	3580-3583	The	_	_	_	_	
20-89	3584-3590	record	_	_	_	_	
20-90	3591-3593	of	_	_	_	_	
20-91	3594-3601	getting	_	_	_	_	
20-92	3602-3605	the	_	_	_	_	
20-93	3606-3610	next	_	_	_	_	
20-94	3611-3614	OID	_	_	_	_	
20-95	3615-3618	for	_	_	_	_	
20-96	3619-3622	the	_	_	_	_	
20-97	3623-3628	table	_	_	_	_	
20-98	3629-3631	to	_	_	_	_	
20-99	3632-3634	be	_	_	_	_	
20-100	3635-3642	created	_	_	_	_	
20-101	3643-3650	follows	_	_	_	_	
20-102	3650-3651	:	_	_	_	_	
20-103	3652-3656	rmgr	_	_	_	_	
20-104	3656-3657	:	_	_	_	_	
20-105	3658-3662	XLOG	_	_	_	_	
20-106	3663-3666	len	_	_	_	_	
20-107	3667-3668	(	_	_	_	_	
20-108	3668-3671	rec	_	_	_	_	
20-109	3671-3672	/	_	_	_	_	
20-110	3672-3675	tot	_	_	_	_	
20-111	3675-3676	)	_	_	_	_	
20-112	3676-3677	:	_	_	_	_	
20-113	3678-3680	30	_	_	_	_	
20-114	3680-3681	/	_	_	_	_	
20-115	3682-3684	30	_	_	_	_	
20-116	3684-3685	,	_	_	_	_	
20-117	3686-3688	tx	_	_	_	_	
20-118	3688-3689	:	_	_	_	_	
20-119	3690-3691	0	_	_	_	_	
20-120	3691-3692	,	_	_	_	_	
20-121	3693-3696	lsn	_	_	_	_	
20-122	3696-3697	:	_	_	_	_	
20-123	3698-3699	0	_	_	_	_	
20-124	3699-3700	/	_	_	_	_	
20-125	3700-3708	35394574	_	_	_	_	
20-126	3708-3709	,	_	_	_	_	
20-127	3710-3714	prev	_	_	_	_	
20-128	3715-3716	0	_	_	_	_	
20-129	3716-3717	/	_	_	_	_	
20-130	3717-3725	353927BC	_	_	_	_	
20-131	3725-3726	,	_	_	_	_	
20-132	3727-3731	desc	_	_	_	_	
20-133	3731-3732	:	_	_	_	_	
20-134	3733-3740	NEXTOID	_	_	_	_	
20-135	3741-3746	82295	_	_	_	_	
20-136	3747-3750	And	_	_	_	_	
20-137	3751-3755	this	_	_	_	_	
20-138	3756-3758	is	_	_	_	_	
20-139	3759-3763	pure	_	_	_	_	
20-140	3764-3772	creation	_	_	_	_	
20-141	3773-3775	of	_	_	_	_	
20-142	3776-3779	the	_	_	_	_	
20-143	3780-3785	table	_	_	_	_	
20-144	3785-3786	:	_	_	_	_	
20-145	3787-3791	rmgr	_	_	_	_	
20-146	3791-3792	:	_	_	_	_	
20-147	3793-3800	Storage	_	_	_	_	
20-148	3801-3804	len	_	_	_	_	
20-149	3805-3806	(	_	_	_	_	
20-150	3806-3809	rec	_	_	_	_	
20-151	3809-3810	/	_	_	_	_	
20-152	3810-3813	tot	_	_	_	_	
20-153	3813-3814	)	_	_	_	_	
20-154	3814-3815	:	_	_	_	_	
20-155	3816-3818	42	_	_	_	_	
20-156	3818-3819	/	_	_	_	_	
20-157	3820-3822	42	_	_	_	_	
20-158	3822-3823	,	_	_	_	_	
20-159	3824-3826	tx	_	_	_	_	
20-160	3826-3827	:	_	_	_	_	
20-161	3828-3829	0	_	_	_	_	
20-162	3829-3830	,	_	_	_	_	
20-163	3831-3834	lsn	_	_	_	_	
20-164	3834-3835	:	_	_	_	_	
20-165	3836-3837	0	_	_	_	_	
20-166	3837-3838	/	_	_	_	_	
20-167	3838-3846	35394594	_	_	_	_	
20-168	3846-3847	,	_	_	_	_	
20-169	3848-3852	prev	_	_	_	_	
20-170	3853-3854	0	_	_	_	_	
20-171	3854-3855	/	_	_	_	_	
20-172	3855-3863	35394574	_	_	_	_	
20-173	3863-3864	,	_	_	_	_	
20-174	3865-3869	desc	_	_	_	_	
20-175	3869-3870	:	_	_	_	_	
20-176	3871-3877	CREATE	_	_	_	_	
20-177	3878-3882	base	_	_	_	_	
20-178	3882-3883	/	_	_	_	_	
20-179	3883-3888	16386	_	_	_	_	
20-180	3888-3889	/	_	_	_	_	
20-181	3889-3894	74103	_	_	_	_	
20-182	3895-3898	But	_	_	_	_	
20-183	3899-3902	the	_	_	_	_	
20-184	3903-3909	insert	_	_	_	_	
20-185	3910-3912	of	_	_	_	_	
20-186	3913-3917	data	_	_	_	_	
20-187	3918-3922	into	_	_	_	_	
20-188	3923-3926	the	_	_	_	_	
20-189	3927-3932	table	_	_	_	_	
20-190	3933-3935	is	_	_	_	_	
20-191	3936-3939	not	_	_	_	_	
20-192	3940-3950	WAL-logged	_	_	_	_	
20-193	3950-3951	.	_	_	_	_	

#Text=Multiple records follow on row inserts into different tables and indexes — this way PostgreSQL writes the information on the created table to the system catalog (provided in a shorthand form):
#Text=rmgr: Heap
#Text=len (rec/tot):
#Text=203/
#Text=203, tx:
#Text=101127, lsn: 0/353945C0, prev 0/35394594, desc: INSERT off 71, blkref #0: rel 1663/16386/1247 blk 8
#Text=rmgr: Btree
#Text=len (rec/tot):
#Text=53/
#Text=685, tx:
#Text=101127, lsn: 0/3539468C, prev 0/353945C0, desc: INSERT_LEAF off 37, blkref #0: rel 1663/16386/2703 blk 2 FPW
#Text=...
#Text=rmgr: Btree
#Text=len (rec/tot):
#Text=53/
#Text=2393, tx:
#Text=101127, lsn: 0/353A747C, prev 0/353A6788, desc: INSERT_LEAF off 10, blkref #0: rel 1664/0/1233 blk 1 FPW
#Text=And finally the transaction commit:
#Text=rmgr: Transaction len (rec/tot):
#Text=34/
#Text=34, tx:
#Text=101127, lsn: 0/353A7DD8, prev 0/353A747C, desc: COMMIT 2019-07-23 18:59:34.923124 MSK
#Text=Replica
#Text=When we restore a PostgreSQL instance from backup, we start with some state of the file system and gradually bring the data to the target point of the recovery by playing back the archived WAL records.
21-1	3952-3960	Multiple	_	_	_	_	
21-2	3961-3968	records	_	_	_	_	
21-3	3969-3975	follow	_	_	_	_	
21-4	3976-3978	on	_	_	_	_	
21-5	3979-3982	row	_	_	_	_	
21-6	3983-3990	inserts	_	_	_	_	
21-7	3991-3995	into	_	_	_	_	
21-8	3996-4005	different	_	_	_	_	
21-9	4006-4012	tables	_	_	_	_	
21-10	4013-4016	and	_	_	_	_	
21-11	4017-4024	indexes	_	_	_	_	
21-12	4024-4025	 	_	_	_	_	
21-13	4025-4026	—	_	_	_	_	
21-14	4027-4031	this	_	_	_	_	
21-15	4032-4035	way	_	_	_	_	
21-16	4036-4046	PostgreSQL	_	_	_	_	
21-17	4047-4053	writes	_	_	_	_	
21-18	4054-4057	the	_	_	_	_	
21-19	4058-4069	information	_	_	_	_	
21-20	4070-4072	on	_	_	_	_	
21-21	4073-4076	the	_	_	_	_	
21-22	4077-4084	created	_	_	_	_	
21-23	4085-4090	table	_	_	_	_	
21-24	4091-4093	to	_	_	_	_	
21-25	4094-4097	the	_	_	_	_	
21-26	4098-4104	system	_	_	_	_	
21-27	4105-4112	catalog	_	_	_	_	
21-28	4113-4114	(	_	_	_	_	
21-29	4114-4122	provided	_	_	_	_	
21-30	4123-4125	in	_	_	_	_	
21-31	4126-4127	a	_	_	_	_	
21-32	4128-4137	shorthand	_	_	_	_	
21-33	4138-4142	form	_	_	_	_	
21-34	4142-4143	)	_	_	_	_	
21-35	4143-4144	:	_	_	_	_	
21-36	4145-4149	rmgr	_	_	_	_	
21-37	4149-4150	:	_	_	_	_	
21-38	4151-4155	Heap	_	_	_	_	
21-39	4156-4159	len	_	_	_	_	
21-40	4160-4161	(	_	_	_	_	
21-41	4161-4164	rec	_	_	_	_	
21-42	4164-4165	/	_	_	_	_	
21-43	4165-4168	tot	_	_	_	_	
21-44	4168-4169	)	_	_	_	_	
21-45	4169-4170	:	_	_	_	_	
21-46	4171-4174	203	_	_	_	_	
21-47	4174-4175	/	_	_	_	_	
21-48	4176-4179	203	_	_	_	_	
21-49	4179-4180	,	_	_	_	_	
21-50	4181-4183	tx	_	_	_	_	
21-51	4183-4184	:	_	_	_	_	
21-52	4185-4191	101127	_	_	_	_	
21-53	4191-4192	,	_	_	_	_	
21-54	4193-4196	lsn	_	_	_	_	
21-55	4196-4197	:	_	_	_	_	
21-56	4198-4199	0	_	_	_	_	
21-57	4199-4200	/	_	_	_	_	
21-58	4200-4208	353945C0	_	_	_	_	
21-59	4208-4209	,	_	_	_	_	
21-60	4210-4214	prev	_	_	_	_	
21-61	4215-4216	0	_	_	_	_	
21-62	4216-4217	/	_	_	_	_	
21-63	4217-4225	35394594	_	_	_	_	
21-64	4225-4226	,	_	_	_	_	
21-65	4227-4231	desc	_	_	_	_	
21-66	4231-4232	:	_	_	_	_	
21-67	4233-4239	INSERT	_	_	_	_	
21-68	4240-4243	off	_	_	_	_	
21-69	4244-4246	71	_	_	_	_	
21-70	4246-4247	,	_	_	_	_	
21-71	4248-4254	blkref	_	_	_	_	
21-72	4255-4257	#0	_	_	_	_	
21-73	4257-4258	:	_	_	_	_	
21-74	4259-4262	rel	_	_	_	_	
21-75	4263-4267	1663	_	_	_	_	
21-76	4267-4268	/	_	_	_	_	
21-77	4268-4273	16386	_	_	_	_	
21-78	4273-4274	/	_	_	_	_	
21-79	4274-4278	1247	_	_	_	_	
21-80	4279-4282	blk	_	_	_	_	
21-81	4283-4284	8	_	_	_	_	
21-82	4285-4289	rmgr	_	_	_	_	
21-83	4289-4290	:	_	_	_	_	
21-84	4291-4296	Btree	_	_	_	_	
21-85	4297-4300	len	_	_	_	_	
21-86	4301-4302	(	_	_	_	_	
21-87	4302-4305	rec	_	_	_	_	
21-88	4305-4306	/	_	_	_	_	
21-89	4306-4309	tot	_	_	_	_	
21-90	4309-4310	)	_	_	_	_	
21-91	4310-4311	:	_	_	_	_	
21-92	4312-4314	53	_	_	_	_	
21-93	4314-4315	/	_	_	_	_	
21-94	4316-4319	685	_	_	_	_	
21-95	4319-4320	,	_	_	_	_	
21-96	4321-4323	tx	_	_	_	_	
21-97	4323-4324	:	_	_	_	_	
21-98	4325-4331	101127	_	_	_	_	
21-99	4331-4332	,	_	_	_	_	
21-100	4333-4336	lsn	_	_	_	_	
21-101	4336-4337	:	_	_	_	_	
21-102	4338-4339	0	_	_	_	_	
21-103	4339-4340	/	_	_	_	_	
21-104	4340-4348	3539468C	_	_	_	_	
21-105	4348-4349	,	_	_	_	_	
21-106	4350-4354	prev	_	_	_	_	
21-107	4355-4356	0	_	_	_	_	
21-108	4356-4357	/	_	_	_	_	
21-109	4357-4365	353945C0	_	_	_	_	
21-110	4365-4366	,	_	_	_	_	
21-111	4367-4371	desc	_	_	_	_	
21-112	4371-4372	:	_	_	_	_	
21-113	4373-4384	INSERT_LEAF	_	_	_	_	
21-114	4385-4388	off	_	_	_	_	
21-115	4389-4391	37	_	_	_	_	
21-116	4391-4392	,	_	_	_	_	
21-117	4393-4399	blkref	_	_	_	_	
21-118	4400-4402	#0	_	_	_	_	
21-119	4402-4403	:	_	_	_	_	
21-120	4404-4407	rel	_	_	_	_	
21-121	4408-4412	1663	_	_	_	_	
21-122	4412-4413	/	_	_	_	_	
21-123	4413-4418	16386	_	_	_	_	
21-124	4418-4419	/	_	_	_	_	
21-125	4419-4423	2703	_	_	_	_	
21-126	4424-4427	blk	_	_	_	_	
21-127	4428-4429	2	_	_	_	_	
21-128	4430-4433	FPW	_	_	_	_	
21-129	4434-4435	.	_	_	_	_	
21-130	4435-4436	.	_	_	_	_	
21-131	4436-4437	.	_	_	_	_	
21-132	4438-4442	rmgr	_	_	_	_	
21-133	4442-4443	:	_	_	_	_	
21-134	4444-4449	Btree	_	_	_	_	
21-135	4450-4453	len	_	_	_	_	
21-136	4454-4455	(	_	_	_	_	
21-137	4455-4458	rec	_	_	_	_	
21-138	4458-4459	/	_	_	_	_	
21-139	4459-4462	tot	_	_	_	_	
21-140	4462-4463	)	_	_	_	_	
21-141	4463-4464	:	_	_	_	_	
21-142	4465-4467	53	_	_	_	_	
21-143	4467-4468	/	_	_	_	_	
21-144	4469-4473	2393	_	_	_	_	
21-145	4473-4474	,	_	_	_	_	
21-146	4475-4477	tx	_	_	_	_	
21-147	4477-4478	:	_	_	_	_	
21-148	4479-4485	101127	_	_	_	_	
21-149	4485-4486	,	_	_	_	_	
21-150	4487-4490	lsn	_	_	_	_	
21-151	4490-4491	:	_	_	_	_	
21-152	4492-4493	0	_	_	_	_	
21-153	4493-4494	/	_	_	_	_	
21-154	4494-4502	353A747C	_	_	_	_	
21-155	4502-4503	,	_	_	_	_	
21-156	4504-4508	prev	_	_	_	_	
21-157	4509-4510	0	_	_	_	_	
21-158	4510-4511	/	_	_	_	_	
21-159	4511-4519	353A6788	_	_	_	_	
21-160	4519-4520	,	_	_	_	_	
21-161	4521-4525	desc	_	_	_	_	
21-162	4525-4526	:	_	_	_	_	
21-163	4527-4538	INSERT_LEAF	_	_	_	_	
21-164	4539-4542	off	_	_	_	_	
21-165	4543-4545	10	_	_	_	_	
21-166	4545-4546	,	_	_	_	_	
21-167	4547-4553	blkref	_	_	_	_	
21-168	4554-4556	#0	_	_	_	_	
21-169	4556-4557	:	_	_	_	_	
21-170	4558-4561	rel	_	_	_	_	
21-171	4562-4566	1664	_	_	_	_	
21-172	4566-4567	/	_	_	_	_	
21-173	4567-4568	0	_	_	_	_	
21-174	4568-4569	/	_	_	_	_	
21-175	4569-4573	1233	_	_	_	_	
21-176	4574-4577	blk	_	_	_	_	
21-177	4578-4579	1	_	_	_	_	
21-178	4580-4583	FPW	_	_	_	_	
21-179	4584-4587	And	_	_	_	_	
21-180	4588-4595	finally	_	_	_	_	
21-181	4596-4599	the	_	_	_	_	
21-182	4600-4611	transaction	_	_	_	_	
21-183	4612-4618	commit	_	_	_	_	
21-184	4618-4619	:	_	_	_	_	
21-185	4620-4624	rmgr	_	_	_	_	
21-186	4624-4625	:	_	_	_	_	
21-187	4626-4637	Transaction	_	_	_	_	
21-188	4638-4641	len	_	_	_	_	
21-189	4642-4643	(	_	_	_	_	
21-190	4643-4646	rec	_	_	_	_	
21-191	4646-4647	/	_	_	_	_	
21-192	4647-4650	tot	_	_	_	_	
21-193	4650-4651	)	_	_	_	_	
21-194	4651-4652	:	_	_	_	_	
21-195	4653-4655	34	_	_	_	_	
21-196	4655-4656	/	_	_	_	_	
21-197	4657-4659	34	_	_	_	_	
21-198	4659-4660	,	_	_	_	_	
21-199	4661-4663	tx	_	_	_	_	
21-200	4663-4664	:	_	_	_	_	
21-201	4665-4671	101127	_	_	_	_	
21-202	4671-4672	,	_	_	_	_	
21-203	4673-4676	lsn	_	_	_	_	
21-204	4676-4677	:	_	_	_	_	
21-205	4678-4679	0	_	_	_	_	
21-206	4679-4680	/	_	_	_	_	
21-207	4680-4688	353A7DD8	_	_	_	_	
21-208	4688-4689	,	_	_	_	_	
21-209	4690-4694	prev	_	_	_	_	
21-210	4695-4696	0	_	_	_	_	
21-211	4696-4697	/	_	_	_	_	
21-212	4697-4705	353A747C	_	_	_	_	
21-213	4705-4706	,	_	_	_	_	
21-214	4707-4711	desc	_	_	_	_	
21-215	4711-4712	:	_	_	_	_	
21-216	4713-4719	COMMIT	_	_	_	_	
21-217	4720-4724	2019	_	_	_	_	
21-218	4724-4725	-	_	_	_	_	
21-219	4725-4727	07	_	_	_	_	
21-220	4727-4728	-	_	_	_	_	
21-221	4728-4730	23	_	_	_	_	
21-222	4731-4733	18	_	_	_	_	
21-223	4733-4734	:	_	_	_	_	
21-224	4734-4736	59	_	_	_	_	
21-225	4736-4737	:	_	_	_	_	
21-226	4737-4746	34.923124	_	_	_	_	
21-227	4747-4750	MSK	_	_	_	_	
21-228	4751-4758	Replica	_	_	_	_	
21-229	4759-4763	When	_	_	_	_	
21-230	4764-4766	we	_	_	_	_	
21-231	4767-4774	restore	_	_	_	_	
21-232	4775-4776	a	_	_	_	_	
21-233	4777-4787	PostgreSQL	_	_	_	_	
21-234	4788-4796	instance	_	_	_	_	
21-235	4797-4801	from	_	_	_	_	
21-236	4802-4808	backup	_	_	_	_	
21-237	4808-4809	,	_	_	_	_	
21-238	4810-4812	we	_	_	_	_	
21-239	4813-4818	start	_	_	_	_	
21-240	4819-4823	with	_	_	_	_	
21-241	4824-4828	some	_	_	_	_	
21-242	4829-4834	state	_	_	_	_	
21-243	4835-4837	of	_	_	_	_	
21-244	4838-4841	the	_	_	_	_	
21-245	4842-4846	file	_	_	_	_	
21-246	4847-4853	system	_	_	_	_	
21-247	4854-4857	and	_	_	_	_	
21-248	4858-4867	gradually	_	_	_	_	
21-249	4868-4873	bring	_	_	_	_	
21-250	4874-4877	the	_	_	_	_	
21-251	4878-4882	data	_	_	_	_	
21-252	4883-4885	to	_	_	_	_	
21-253	4886-4889	the	_	_	_	_	
21-254	4890-4896	target	_	_	_	_	
21-255	4897-4902	point	_	_	_	_	
21-256	4903-4905	of	_	_	_	_	
21-257	4906-4909	the	_	_	_	_	
21-258	4910-4918	recovery	_	_	_	_	
21-259	4919-4921	by	_	_	_	_	
21-260	4922-4929	playing	_	_	_	_	
21-261	4930-4934	back	_	_	_	_	
21-262	4935-4938	the	_	_	_	_	
21-263	4939-4947	archived	_	_	_	_	
21-264	4948-4951	WAL	_	_	_	_	
21-265	4952-4959	records	_	_	_	_	
21-266	4959-4960	.	_	_	_	_	

#Text=The number of such records can be pretty large (for example, records for several days), that is, the recovery period will span many checkpoints rather than one.
22-1	4961-4964	The	_	_	_	_	
22-2	4965-4971	number	_	_	_	_	
22-3	4972-4974	of	_	_	_	_	
22-4	4975-4979	such	_	_	_	_	
22-5	4980-4987	records	_	_	_	_	
22-6	4988-4991	can	_	_	_	_	
22-7	4992-4994	be	_	_	_	_	
22-8	4995-5001	pretty	_	_	_	_	
22-9	5002-5007	large	_	_	_	_	
22-10	5008-5009	(	_	_	_	_	
22-11	5009-5012	for	_	_	_	_	
22-12	5013-5020	example	_	_	_	_	
22-13	5020-5021	,	_	_	_	_	
22-14	5022-5029	records	_	_	_	_	
22-15	5030-5033	for	_	_	_	_	
22-16	5034-5041	several	_	_	_	_	
22-17	5042-5046	days	_	_	_	_	
22-18	5046-5047	)	_	_	_	_	
22-19	5047-5048	,	_	_	_	_	
22-20	5049-5053	that	_	_	_	_	
22-21	5054-5056	is	_	_	_	_	
22-22	5056-5057	,	_	_	_	_	
22-23	5058-5061	the	_	_	_	_	
22-24	5062-5070	recovery	_	_	_	_	
22-25	5071-5077	period	_	_	_	_	
22-26	5078-5082	will	_	_	_	_	
22-27	5083-5087	span	_	_	_	_	
22-28	5088-5092	many	_	_	_	_	
22-29	5093-5104	checkpoints	_	_	_	_	
22-30	5105-5111	rather	_	_	_	_	
22-31	5112-5116	than	_	_	_	_	
22-32	5117-5120	one	_	_	_	_	
22-33	5120-5121	.	_	_	_	_	

#Text=So, it is clear that the minimum logging level is insufficient — if an operation is not logged, we will be unaware of whether we need to redo it.
23-1	5122-5124	So	_	_	_	_	
23-2	5124-5125	,	_	_	_	_	
23-3	5126-5128	it	_	_	_	_	
23-4	5129-5131	is	_	_	_	_	
23-5	5132-5137	clear	_	_	_	_	
23-6	5138-5142	that	_	_	_	_	
23-7	5143-5146	the	_	_	_	_	
23-8	5147-5154	minimum	_	_	_	_	
23-9	5155-5162	logging	_	_	_	_	
23-10	5163-5168	level	_	_	_	_	
23-11	5169-5171	is	_	_	_	_	
23-12	5172-5184	insufficient	_	_	_	_	
23-13	5184-5185	 	_	_	_	_	
23-14	5185-5186	—	_	_	_	_	
23-15	5187-5189	if	_	_	_	_	
23-16	5190-5192	an	_	_	_	_	
23-17	5193-5202	operation	_	_	_	_	
23-18	5203-5205	is	_	_	_	_	
23-19	5206-5209	not	_	_	_	_	
23-20	5210-5216	logged	_	_	_	_	
23-21	5216-5217	,	_	_	_	_	
23-22	5218-5220	we	_	_	_	_	
23-23	5221-5225	will	_	_	_	_	
23-24	5226-5228	be	_	_	_	_	
23-25	5229-5236	unaware	_	_	_	_	
23-26	5237-5239	of	_	_	_	_	
23-27	5240-5247	whether	_	_	_	_	
23-28	5248-5250	we	_	_	_	_	
23-29	5251-5255	need	_	_	_	_	
23-30	5256-5258	to	_	_	_	_	
23-31	5259-5263	redo	_	_	_	_	
23-32	5264-5266	it	_	_	_	_	
23-33	5266-5267	.	_	_	_	_	

#Text=To support restoring from backup, all the operations must be WAL-logged.
24-1	5268-5270	To	_	_	_	_	
24-2	5271-5278	support	_	_	_	_	
24-3	5279-5288	restoring	_	_	_	_	
24-4	5289-5293	from	_	_	_	_	
24-5	5294-5300	backup	_	_	_	_	
24-6	5300-5301	,	_	_	_	_	
24-7	5302-5305	all	_	_	_	_	
24-8	5306-5309	the	_	_	_	_	
24-9	5310-5320	operations	_	_	_	_	
24-10	5321-5325	must	_	_	_	_	
24-11	5326-5328	be	_	_	_	_	
24-12	5329-5339	WAL-logged	_	_	_	_	
24-13	5339-5340	.	_	_	_	_	

#Text=The same is true for the replication: everything that is not logged will not be sent to the replica and will not be replayed.
25-1	5341-5344	The	_	_	_	_	
25-2	5345-5349	same	_	_	_	_	
25-3	5350-5352	is	_	_	_	_	
25-4	5353-5357	true	_	_	_	_	
25-5	5358-5361	for	_	_	_	_	
25-6	5362-5365	the	_	_	_	_	
25-7	5366-5377	replication	_	_	_	_	
25-8	5377-5378	:	_	_	_	_	
25-9	5379-5389	everything	_	_	_	_	
25-10	5390-5394	that	_	_	_	_	
25-11	5395-5397	is	_	_	_	_	
25-12	5398-5401	not	_	_	_	_	
25-13	5402-5408	logged	_	_	_	_	
25-14	5409-5413	will	_	_	_	_	
25-15	5414-5417	not	_	_	_	_	
25-16	5418-5420	be	_	_	_	_	
25-17	5421-5425	sent	_	_	_	_	
25-18	5426-5428	to	_	_	_	_	
25-19	5429-5432	the	_	_	_	_	
25-20	5433-5440	replica	_	_	_	_	
25-21	5441-5444	and	_	_	_	_	
25-22	5445-5449	will	_	_	_	_	
25-23	5450-5453	not	_	_	_	_	
25-24	5454-5456	be	_	_	_	_	
25-25	5457-5465	replayed	_	_	_	_	
25-26	5465-5466	.	_	_	_	_	

#Text=And a wish to run queries on a replica complicates the situation even more.
26-1	5467-5470	And	_	_	_	_	
26-2	5471-5472	a	_	_	_	_	
26-3	5473-5477	wish	_	_	_	_	
26-4	5478-5480	to	_	_	_	_	
26-5	5481-5484	run	_	_	_	_	
26-6	5485-5492	queries	_	_	_	_	
26-7	5493-5495	on	_	_	_	_	
26-8	5496-5497	a	_	_	_	_	
26-9	5498-5505	replica	_	_	_	_	
26-10	5506-5517	complicates	_	_	_	_	
26-11	5518-5521	the	_	_	_	_	
26-12	5522-5531	situation	_	_	_	_	
26-13	5532-5536	even	_	_	_	_	
26-14	5537-5541	more	_	_	_	_	
26-15	5541-5542	.	_	_	_	_	

#Text=First, we need information on exclusive advisory locks that occur on the main server since they can conflict the queries on the replica.
27-1	5543-5548	First	_	_	_	_	
27-2	5548-5549	,	_	_	_	_	
27-3	5550-5552	we	_	_	_	_	
27-4	5553-5557	need	_	_	_	_	
27-5	5558-5569	information	_	_	_	_	
27-6	5570-5572	on	_	_	_	_	
27-7	5573-5582	exclusive	_	_	_	_	
27-8	5583-5591	advisory	_	_	_	_	
27-9	5592-5597	locks	_	_	_	_	
27-10	5598-5602	that	_	_	_	_	
27-11	5603-5608	occur	_	_	_	_	
27-12	5609-5611	on	_	_	_	_	
27-13	5612-5615	the	_	_	_	_	
27-14	5616-5620	main	_	_	_	_	
27-15	5621-5627	server	_	_	_	_	
27-16	5628-5633	since	_	_	_	_	
27-17	5634-5638	they	_	_	_	_	
27-18	5639-5642	can	_	_	_	_	
27-19	5643-5651	conflict	_	_	_	_	
27-20	5652-5655	the	_	_	_	_	
27-21	5656-5663	queries	_	_	_	_	
27-22	5664-5666	on	_	_	_	_	
27-23	5667-5670	the	_	_	_	_	
27-24	5671-5678	replica	_	_	_	_	
27-25	5678-5679	.	_	_	_	_	

#Text=Such locks are WAL-logged and then the startup process applies them on the replica.
28-1	5680-5684	Such	_	_	_	_	
28-2	5685-5690	locks	_	_	_	_	
28-3	5691-5694	are	_	_	_	_	
28-4	5695-5705	WAL-logged	_	_	_	_	
28-5	5706-5709	and	_	_	_	_	
28-6	5710-5714	then	_	_	_	_	
28-7	5715-5718	the	_	_	_	_	
28-8	5719-5726	startup	_	_	_	_	
28-9	5727-5734	process	_	_	_	_	
28-10	5735-5742	applies	_	_	_	_	
28-11	5743-5747	them	_	_	_	_	
28-12	5748-5750	on	_	_	_	_	
28-13	5751-5754	the	_	_	_	_	
28-14	5755-5762	replica	_	_	_	_	
28-15	5762-5763	.	_	_	_	_	

#Text=Second, we need to create data snapshots, and to do this, as we remember, information on the transactions being executed is needed.
29-1	5764-5770	Second	_	_	_	_	
29-2	5770-5771	,	_	_	_	_	
29-3	5772-5774	we	_	_	_	_	
29-4	5775-5779	need	_	_	_	_	
29-5	5780-5782	to	_	_	_	_	
29-6	5783-5789	create	_	_	_	_	
29-7	5790-5794	data	_	_	_	_	
29-8	5795-5804	snapshots	_	_	_	_	
29-9	5804-5805	,	_	_	_	_	
29-10	5806-5809	and	_	_	_	_	
29-11	5810-5812	to	_	_	_	_	
29-12	5813-5815	do	_	_	_	_	
29-13	5816-5820	this	_	_	_	_	
29-14	5820-5821	,	_	_	_	_	
29-15	5822-5824	as	_	_	_	_	
29-16	5825-5827	we	_	_	_	_	
29-17	5828-5836	remember	_	_	_	_	
29-18	5836-5837	,	_	_	_	_	
29-19	5838-5849	information	_	_	_	_	
29-20	5850-5852	on	_	_	_	_	
29-21	5853-5856	the	_	_	_	_	
29-22	5857-5869	transactions	_	_	_	_	
29-23	5870-5875	being	_	_	_	_	
29-24	5876-5884	executed	_	_	_	_	
29-25	5885-5887	is	_	_	_	_	
29-26	5888-5894	needed	_	_	_	_	
29-27	5894-5895	.	_	_	_	_	

#Text=In the case of a replica, not only local transactions are meant, but also transactions on the main server.
30-1	5896-5898	In	_	_	_	_	
30-2	5899-5902	the	_	_	_	_	
30-3	5903-5907	case	_	_	_	_	
30-4	5908-5910	of	_	_	_	_	
30-5	5911-5912	a	_	_	_	_	
30-6	5913-5920	replica	_	_	_	_	
30-7	5920-5921	,	_	_	_	_	
30-8	5922-5925	not	_	_	_	_	
30-9	5926-5930	only	_	_	_	_	
30-10	5931-5936	local	_	_	_	_	
30-11	5937-5949	transactions	_	_	_	_	
30-12	5950-5953	are	_	_	_	_	
30-13	5954-5959	meant	_	_	_	_	
30-14	5959-5960	,	_	_	_	_	
30-15	5961-5964	but	_	_	_	_	
30-16	5965-5969	also	_	_	_	_	
30-17	5970-5982	transactions	_	_	_	_	
30-18	5983-5985	on	_	_	_	_	
30-19	5986-5989	the	_	_	_	_	
30-20	5990-5994	main	_	_	_	_	
30-21	5995-6001	server	_	_	_	_	
30-22	6001-6002	.	_	_	_	_	

#Text=The only way to provide this information is to WAL-log it from time to time (this happens once every 15 seconds).
31-1	6003-6006	The	_	_	_	_	
31-2	6007-6011	only	_	_	_	_	
31-3	6012-6015	way	_	_	_	_	
31-4	6016-6018	to	_	_	_	_	
31-5	6019-6026	provide	_	_	_	_	
31-6	6027-6031	this	_	_	_	_	
31-7	6032-6043	information	_	_	_	_	
31-8	6044-6046	is	_	_	_	_	
31-9	6047-6049	to	_	_	_	_	
31-10	6050-6057	WAL-log	_	_	_	_	
31-11	6058-6060	it	_	_	_	_	
31-12	6061-6065	from	_	_	_	_	
31-13	6066-6070	time	_	_	_	_	
31-14	6071-6073	to	_	_	_	_	
31-15	6074-6078	time	_	_	_	_	
31-16	6079-6080	(	_	_	_	_	
31-17	6080-6084	this	_	_	_	_	
31-18	6085-6092	happens	_	_	_	_	
31-19	6093-6097	once	_	_	_	_	
31-20	6098-6103	every	_	_	_	_	
31-21	6104-6106	15	_	_	_	_	
31-22	6106-6107	 	_	_	_	_	
31-23	6107-6114	seconds	_	_	_	_	
31-24	6114-6115	)	_	_	_	_	
31-25	6115-6116	.	_	_	_	_	

#Text=The level of WAL that ensures both restoring from backup and a possibility of physical replication is set by the value of wal_level = replica.
32-1	6117-6120	The	_	_	_	_	
32-2	6121-6126	level	_	_	_	_	
32-3	6127-6129	of	_	_	_	_	
32-4	6130-6133	WAL	_	_	_	_	
32-5	6134-6138	that	_	_	_	_	
32-6	6139-6146	ensures	_	_	_	_	
32-7	6147-6151	both	_	_	_	_	
32-8	6152-6161	restoring	_	_	_	_	
32-9	6162-6166	from	_	_	_	_	
32-10	6167-6173	backup	_	_	_	_	
32-11	6174-6177	and	_	_	_	_	
32-12	6178-6179	a	_	_	_	_	
32-13	6180-6191	possibility	_	_	_	_	
32-14	6192-6194	of	_	_	_	_	
32-15	6195-6203	physical	_	_	_	_	
32-16	6204-6215	replication	_	_	_	_	
32-17	6216-6218	is	_	_	_	_	
32-18	6219-6222	set	_	_	_	_	
32-19	6223-6225	by	_	_	_	_	
32-20	6226-6229	the	_	_	_	_	
32-21	6230-6235	value	_	_	_	_	
32-22	6236-6238	of	_	_	_	_	
32-23	6239-6248	wal_level	_	_	_	_	
32-24	6249-6250	=	_	_	_	_	
32-25	6251-6258	replica	_	_	_	_	
32-26	6258-6259	.	_	_	_	_	

#Text=(Before version 9.6, two separate levels were available — archive and hot_standby — but later they were combined.)
33-1	6260-6261	(	_	_	_	_	
33-2	6261-6267	Before	_	_	_	_	
33-3	6268-6275	version	_	_	_	_	
33-4	6275-6276	 	_	_	_	_	
33-5	6276-6279	9.6	_	_	_	_	
33-6	6279-6280	,	_	_	_	_	
33-7	6281-6284	two	_	_	_	_	
33-8	6285-6293	separate	_	_	_	_	
33-9	6294-6300	levels	_	_	_	_	
33-10	6301-6305	were	_	_	_	_	
33-11	6306-6315	available	_	_	_	_	
33-12	6315-6316	 	_	_	_	_	
33-13	6316-6317	—	_	_	_	_	
33-14	6318-6325	archive	_	_	_	_	
33-15	6326-6329	and	_	_	_	_	
33-16	6330-6341	hot_standby	_	_	_	_	
33-17	6341-6342	 	_	_	_	_	
33-18	6342-6343	—	_	_	_	_	
33-19	6344-6347	but	_	_	_	_	
33-20	6348-6353	later	_	_	_	_	
33-21	6354-6358	they	_	_	_	_	
33-22	6359-6363	were	_	_	_	_	
33-23	6364-6372	combined	_	_	_	_	
33-24	6372-6373	.	_	_	_	_	
33-25	6373-6374	)	_	_	_	_	

#Text=It's this level that is used by default starting with PostgreSQL 10 (while earlier it was minimal).
34-1	6375-6379	It's	_	_	_	_	
34-2	6380-6384	this	_	_	_	_	
34-3	6385-6390	level	_	_	_	_	
34-4	6391-6395	that	_	_	_	_	
34-5	6396-6398	is	_	_	_	_	
34-6	6399-6403	used	_	_	_	_	
34-7	6404-6406	by	_	_	_	_	
34-8	6407-6414	default	_	_	_	_	
34-9	6415-6423	starting	_	_	_	_	
34-10	6424-6428	with	_	_	_	_	
34-11	6429-6439	PostgreSQL	_	_	_	_	
34-12	6439-6440	 	_	_	_	_	
34-13	6440-6442	10	_	_	_	_	
34-14	6443-6444	(	_	_	_	_	
34-15	6444-6449	while	_	_	_	_	
34-16	6450-6457	earlier	_	_	_	_	
34-17	6458-6460	it	_	_	_	_	
34-18	6461-6464	was	_	_	_	_	
34-19	6465-6472	minimal	_	_	_	_	
34-20	6472-6473	)	_	_	_	_	
34-21	6473-6474	.	_	_	_	_	

#Text=So let's just restore the parameters to their default values:
#Text==> ALTER SYSTEM RESET wal_level;
#Text==> ALTER SYSTEM RESET max_wal_senders;
#Text=student$ sudo pg_ctlcluster 11 main restart
#Text=Deleting the table and redoing exactly the same sequence of steps as last time:
#Text==> DROP TABLE wallevel;
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/353AF21C
#Text=(1 row)
#Text==> CREATE TABLE wallevel AS
#Text=SELECT 1 AS n;
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/353BE51C
#Text=(1 row)
#Text=Now let's check WAL records.
#Text=postgres$ /usr/lib/postgresql/11/bin/pg_waldump -p /var/lib/postgresql/11/main/pg_wal -s 0/353AF21C -e 0/353BE51C
#Text=Vacuuming, getting the OID, creation of the table and registration in the system catalog — same as before so far:
#Text=rmgr: Heap2
#Text=len (rec/tot):
#Text=58/
#Text=58, tx:
#Text=0, lsn: 0/353AF21C, prev 0/353AF044, desc: CLEAN remxid 101128, blkref #0: rel 1663/16386/1247 blk 8
#Text=rmgr: XLOG
#Text=len (rec/tot):
#Text=30/
#Text=30, tx:
#Text=0, lsn: 0/353AF258, prev 0/353AF21C, desc: NEXTOID 82298
#Text=rmgr: Storage
#Text=len (rec/tot):
#Text=42/
#Text=42, tx:
#Text=0, lsn: 0/353AF278, prev 0/353AF258, desc: CREATE base/16386/74106
#Text=rmgr: Heap
#Text=len (rec/tot):
#Text=203/
#Text=203, tx:
#Text=101129, lsn: 0/353AF2A4, prev 0/353AF278, desc: INSERT off 73, blkref #0: rel 1663/16386/1247 blk 8
#Text=rmgr: Btree
#Text=len (rec/tot):
#Text=53/
#Text=717, tx:
#Text=101129, lsn: 0/353AF370, prev 0/353AF2A4, …
#Text=rmgr: Btree
#Text=len (rec/tot):
#Text=53/
#Text=2413, tx:
#Text=101129, lsn: 0/353BD954, prev 0/353BCC44, desc: INSERT_LEAF off 10, blkref #0: rel 1664/0/1233 blk 1 FPW
#Text=And this is something new.
35-1	6475-6477	So	_	_	_	_	
35-2	6478-6483	let's	_	_	_	_	
35-3	6484-6488	just	_	_	_	_	
35-4	6489-6496	restore	_	_	_	_	
35-5	6497-6500	the	_	_	_	_	
35-6	6501-6511	parameters	_	_	_	_	
35-7	6512-6514	to	_	_	_	_	
35-8	6515-6520	their	_	_	_	_	
35-9	6521-6528	default	_	_	_	_	
35-10	6529-6535	values	_	_	_	_	
35-11	6535-6536	:	_	_	_	_	
35-12	6537-6538	=	_	_	_	_	
35-13	6538-6539	>	_	_	_	_	
35-14	6540-6545	ALTER	_	_	_	_	
35-15	6546-6552	SYSTEM	_	_	_	_	
35-16	6553-6558	RESET	_	_	_	_	
35-17	6559-6568	wal_level	_	_	_	_	
35-18	6568-6569	;	_	_	_	_	
35-19	6570-6571	=	_	_	_	_	
35-20	6571-6572	>	_	_	_	_	
35-21	6573-6578	ALTER	_	_	_	_	
35-22	6579-6585	SYSTEM	_	_	_	_	
35-23	6586-6591	RESET	_	_	_	_	
35-24	6592-6607	max_wal_senders	_	_	_	_	
35-25	6607-6608	;	_	_	_	_	
35-26	6609-6616	student	_	_	_	_	
35-27	6616-6617	$	_	_	_	_	
35-28	6618-6622	sudo	_	_	_	_	
35-29	6623-6636	pg_ctlcluster	_	_	_	_	
35-30	6637-6639	11	_	_	_	_	
35-31	6640-6644	main	_	_	_	_	
35-32	6645-6652	restart	_	_	_	_	
35-33	6653-6661	Deleting	_	_	_	_	
35-34	6662-6665	the	_	_	_	_	
35-35	6666-6671	table	_	_	_	_	
35-36	6672-6675	and	_	_	_	_	
35-37	6676-6683	redoing	_	_	_	_	
35-38	6684-6691	exactly	_	_	_	_	
35-39	6692-6695	the	_	_	_	_	
35-40	6696-6700	same	_	_	_	_	
35-41	6701-6709	sequence	_	_	_	_	
35-42	6710-6712	of	_	_	_	_	
35-43	6713-6718	steps	_	_	_	_	
35-44	6719-6721	as	_	_	_	_	
35-45	6722-6726	last	_	_	_	_	
35-46	6727-6731	time	_	_	_	_	
35-47	6731-6732	:	_	_	_	_	
35-48	6733-6734	=	_	_	_	_	
35-49	6734-6735	>	_	_	_	_	
35-50	6736-6740	DROP	_	_	_	_	
35-51	6741-6746	TABLE	_	_	_	_	
35-52	6747-6755	wallevel	_	_	_	_	
35-53	6755-6756	;	_	_	_	_	
35-54	6757-6758	=	_	_	_	_	
35-55	6758-6759	>	_	_	_	_	
35-56	6760-6766	SELECT	_	_	_	_	
35-57	6767-6792	pg_current_wal_insert_lsn	_	_	_	_	
35-58	6792-6793	(	_	_	_	_	
35-59	6793-6794	)	_	_	_	_	
35-60	6794-6795	;	_	_	_	_	
35-61	6796-6821	pg_current_wal_insert_lsn	_	_	_	_	
35-62	6822-6823	-	_	_	_	_	
35-63	6823-6824	-	_	_	_	_	
35-64	6824-6825	-	_	_	_	_	
35-65	6825-6826	-	_	_	_	_	
35-66	6826-6827	-	_	_	_	_	
35-67	6827-6828	-	_	_	_	_	
35-68	6828-6829	-	_	_	_	_	
35-69	6829-6830	-	_	_	_	_	
35-70	6830-6831	-	_	_	_	_	
35-71	6831-6832	-	_	_	_	_	
35-72	6832-6833	-	_	_	_	_	
35-73	6833-6834	-	_	_	_	_	
35-74	6834-6835	-	_	_	_	_	
35-75	6835-6836	-	_	_	_	_	
35-76	6836-6837	-	_	_	_	_	
35-77	6837-6838	-	_	_	_	_	
35-78	6838-6839	-	_	_	_	_	
35-79	6839-6840	-	_	_	_	_	
35-80	6840-6841	-	_	_	_	_	
35-81	6841-6842	-	_	_	_	_	
35-82	6842-6843	-	_	_	_	_	
35-83	6843-6844	-	_	_	_	_	
35-84	6844-6845	-	_	_	_	_	
35-85	6845-6846	-	_	_	_	_	
35-86	6846-6847	-	_	_	_	_	
35-87	6847-6848	-	_	_	_	_	
35-88	6848-6849	-	_	_	_	_	
35-89	6850-6851	0	_	_	_	_	
35-90	6851-6852	/	_	_	_	_	
35-91	6852-6860	353AF21C	_	_	_	_	
35-92	6861-6862	(	_	_	_	_	
35-93	6862-6863	1	_	_	_	_	
35-94	6864-6867	row	_	_	_	_	
35-95	6867-6868	)	_	_	_	_	
35-96	6869-6870	=	_	_	_	_	
35-97	6870-6871	>	_	_	_	_	
35-98	6872-6878	CREATE	_	_	_	_	
35-99	6879-6884	TABLE	_	_	_	_	
35-100	6885-6893	wallevel	_	_	_	_	
35-101	6894-6896	AS	_	_	_	_	
35-102	6897-6903	SELECT	_	_	_	_	
35-103	6904-6905	1	_	_	_	_	
35-104	6906-6908	AS	_	_	_	_	
35-105	6909-6910	n	_	_	_	_	
35-106	6910-6911	;	_	_	_	_	
35-107	6912-6913	=	_	_	_	_	
35-108	6913-6914	>	_	_	_	_	
35-109	6915-6921	SELECT	_	_	_	_	
35-110	6922-6947	pg_current_wal_insert_lsn	_	_	_	_	
35-111	6947-6948	(	_	_	_	_	
35-112	6948-6949	)	_	_	_	_	
35-113	6949-6950	;	_	_	_	_	
35-114	6951-6976	pg_current_wal_insert_lsn	_	_	_	_	
35-115	6977-6978	-	_	_	_	_	
35-116	6978-6979	-	_	_	_	_	
35-117	6979-6980	-	_	_	_	_	
35-118	6980-6981	-	_	_	_	_	
35-119	6981-6982	-	_	_	_	_	
35-120	6982-6983	-	_	_	_	_	
35-121	6983-6984	-	_	_	_	_	
35-122	6984-6985	-	_	_	_	_	
35-123	6985-6986	-	_	_	_	_	
35-124	6986-6987	-	_	_	_	_	
35-125	6987-6988	-	_	_	_	_	
35-126	6988-6989	-	_	_	_	_	
35-127	6989-6990	-	_	_	_	_	
35-128	6990-6991	-	_	_	_	_	
35-129	6991-6992	-	_	_	_	_	
35-130	6992-6993	-	_	_	_	_	
35-131	6993-6994	-	_	_	_	_	
35-132	6994-6995	-	_	_	_	_	
35-133	6995-6996	-	_	_	_	_	
35-134	6996-6997	-	_	_	_	_	
35-135	6997-6998	-	_	_	_	_	
35-136	6998-6999	-	_	_	_	_	
35-137	6999-7000	-	_	_	_	_	
35-138	7000-7001	-	_	_	_	_	
35-139	7001-7002	-	_	_	_	_	
35-140	7002-7003	-	_	_	_	_	
35-141	7003-7004	-	_	_	_	_	
35-142	7005-7006	0	_	_	_	_	
35-143	7006-7007	/	_	_	_	_	
35-144	7007-7015	353BE51C	_	_	_	_	
35-145	7016-7017	(	_	_	_	_	
35-146	7017-7018	1	_	_	_	_	
35-147	7019-7022	row	_	_	_	_	
35-148	7022-7023	)	_	_	_	_	
35-149	7024-7027	Now	_	_	_	_	
35-150	7028-7033	let's	_	_	_	_	
35-151	7034-7039	check	_	_	_	_	
35-152	7040-7043	WAL	_	_	_	_	
35-153	7044-7051	records	_	_	_	_	
35-154	7051-7052	.	_	_	_	_	
35-155	7053-7061	postgres	_	_	_	_	
35-156	7061-7062	$	_	_	_	_	
35-157	7063-7064	/	_	_	_	_	
35-158	7064-7067	usr	_	_	_	_	
35-159	7067-7068	/	_	_	_	_	
35-160	7068-7071	lib	_	_	_	_	
35-161	7071-7072	/	_	_	_	_	
35-162	7072-7082	postgresql	_	_	_	_	
35-163	7082-7083	/	_	_	_	_	
35-164	7083-7085	11	_	_	_	_	
35-165	7085-7086	/	_	_	_	_	
35-166	7086-7089	bin	_	_	_	_	
35-167	7089-7090	/	_	_	_	_	
35-168	7090-7100	pg_waldump	_	_	_	_	
35-169	7101-7102	-	_	_	_	_	
35-170	7102-7103	p	_	_	_	_	
35-171	7104-7105	/	_	_	_	_	
35-172	7105-7108	var	_	_	_	_	
35-173	7108-7109	/	_	_	_	_	
35-174	7109-7112	lib	_	_	_	_	
35-175	7112-7113	/	_	_	_	_	
35-176	7113-7123	postgresql	_	_	_	_	
35-177	7123-7124	/	_	_	_	_	
35-178	7124-7126	11	_	_	_	_	
35-179	7126-7127	/	_	_	_	_	
35-180	7127-7131	main	_	_	_	_	
35-181	7131-7132	/	_	_	_	_	
35-182	7132-7138	pg_wal	_	_	_	_	
35-183	7139-7140	-	_	_	_	_	
35-184	7140-7141	s	_	_	_	_	
35-185	7142-7143	0	_	_	_	_	
35-186	7143-7144	/	_	_	_	_	
35-187	7144-7152	353AF21C	_	_	_	_	
35-188	7153-7154	-	_	_	_	_	
35-189	7154-7155	e	_	_	_	_	
35-190	7156-7157	0	_	_	_	_	
35-191	7157-7158	/	_	_	_	_	
35-192	7158-7166	353BE51C	_	_	_	_	
35-193	7167-7176	Vacuuming	_	_	_	_	
35-194	7176-7177	,	_	_	_	_	
35-195	7178-7185	getting	_	_	_	_	
35-196	7186-7189	the	_	_	_	_	
35-197	7190-7193	OID	_	_	_	_	
35-198	7193-7194	,	_	_	_	_	
35-199	7195-7203	creation	_	_	_	_	
35-200	7204-7206	of	_	_	_	_	
35-201	7207-7210	the	_	_	_	_	
35-202	7211-7216	table	_	_	_	_	
35-203	7217-7220	and	_	_	_	_	
35-204	7221-7233	registration	_	_	_	_	
35-205	7234-7236	in	_	_	_	_	
35-206	7237-7240	the	_	_	_	_	
35-207	7241-7247	system	_	_	_	_	
35-208	7248-7255	catalog	_	_	_	_	
35-209	7255-7256	 	_	_	_	_	
35-210	7256-7257	—	_	_	_	_	
35-211	7258-7262	same	_	_	_	_	
35-212	7263-7265	as	_	_	_	_	
35-213	7266-7272	before	_	_	_	_	
35-214	7273-7275	so	_	_	_	_	
35-215	7276-7279	far	_	_	_	_	
35-216	7279-7280	:	_	_	_	_	
35-217	7281-7285	rmgr	_	_	_	_	
35-218	7285-7286	:	_	_	_	_	
35-219	7287-7292	Heap2	_	_	_	_	
35-220	7293-7296	len	_	_	_	_	
35-221	7297-7298	(	_	_	_	_	
35-222	7298-7301	rec	_	_	_	_	
35-223	7301-7302	/	_	_	_	_	
35-224	7302-7305	tot	_	_	_	_	
35-225	7305-7306	)	_	_	_	_	
35-226	7306-7307	:	_	_	_	_	
35-227	7308-7310	58	_	_	_	_	
35-228	7310-7311	/	_	_	_	_	
35-229	7312-7314	58	_	_	_	_	
35-230	7314-7315	,	_	_	_	_	
35-231	7316-7318	tx	_	_	_	_	
35-232	7318-7319	:	_	_	_	_	
35-233	7320-7321	0	_	_	_	_	
35-234	7321-7322	,	_	_	_	_	
35-235	7323-7326	lsn	_	_	_	_	
35-236	7326-7327	:	_	_	_	_	
35-237	7328-7329	0	_	_	_	_	
35-238	7329-7330	/	_	_	_	_	
35-239	7330-7338	353AF21C	_	_	_	_	
35-240	7338-7339	,	_	_	_	_	
35-241	7340-7344	prev	_	_	_	_	
35-242	7345-7346	0	_	_	_	_	
35-243	7346-7347	/	_	_	_	_	
35-244	7347-7355	353AF044	_	_	_	_	
35-245	7355-7356	,	_	_	_	_	
35-246	7357-7361	desc	_	_	_	_	
35-247	7361-7362	:	_	_	_	_	
35-248	7363-7368	CLEAN	_	_	_	_	
35-249	7369-7375	remxid	_	_	_	_	
35-250	7376-7382	101128	_	_	_	_	
35-251	7382-7383	,	_	_	_	_	
35-252	7384-7390	blkref	_	_	_	_	
35-253	7391-7393	#0	_	_	_	_	
35-254	7393-7394	:	_	_	_	_	
35-255	7395-7398	rel	_	_	_	_	
35-256	7399-7403	1663	_	_	_	_	
35-257	7403-7404	/	_	_	_	_	
35-258	7404-7409	16386	_	_	_	_	
35-259	7409-7410	/	_	_	_	_	
35-260	7410-7414	1247	_	_	_	_	
35-261	7415-7418	blk	_	_	_	_	
35-262	7419-7420	8	_	_	_	_	
35-263	7421-7425	rmgr	_	_	_	_	
35-264	7425-7426	:	_	_	_	_	
35-265	7427-7431	XLOG	_	_	_	_	
35-266	7432-7435	len	_	_	_	_	
35-267	7436-7437	(	_	_	_	_	
35-268	7437-7440	rec	_	_	_	_	
35-269	7440-7441	/	_	_	_	_	
35-270	7441-7444	tot	_	_	_	_	
35-271	7444-7445	)	_	_	_	_	
35-272	7445-7446	:	_	_	_	_	
35-273	7447-7449	30	_	_	_	_	
35-274	7449-7450	/	_	_	_	_	
35-275	7451-7453	30	_	_	_	_	
35-276	7453-7454	,	_	_	_	_	
35-277	7455-7457	tx	_	_	_	_	
35-278	7457-7458	:	_	_	_	_	
35-279	7459-7460	0	_	_	_	_	
35-280	7460-7461	,	_	_	_	_	
35-281	7462-7465	lsn	_	_	_	_	
35-282	7465-7466	:	_	_	_	_	
35-283	7467-7468	0	_	_	_	_	
35-284	7468-7469	/	_	_	_	_	
35-285	7469-7477	353AF258	_	_	_	_	
35-286	7477-7478	,	_	_	_	_	
35-287	7479-7483	prev	_	_	_	_	
35-288	7484-7485	0	_	_	_	_	
35-289	7485-7486	/	_	_	_	_	
35-290	7486-7494	353AF21C	_	_	_	_	
35-291	7494-7495	,	_	_	_	_	
35-292	7496-7500	desc	_	_	_	_	
35-293	7500-7501	:	_	_	_	_	
35-294	7502-7509	NEXTOID	_	_	_	_	
35-295	7510-7515	82298	_	_	_	_	
35-296	7516-7520	rmgr	_	_	_	_	
35-297	7520-7521	:	_	_	_	_	
35-298	7522-7529	Storage	_	_	_	_	
35-299	7530-7533	len	_	_	_	_	
35-300	7534-7535	(	_	_	_	_	
35-301	7535-7538	rec	_	_	_	_	
35-302	7538-7539	/	_	_	_	_	
35-303	7539-7542	tot	_	_	_	_	
35-304	7542-7543	)	_	_	_	_	
35-305	7543-7544	:	_	_	_	_	
35-306	7545-7547	42	_	_	_	_	
35-307	7547-7548	/	_	_	_	_	
35-308	7549-7551	42	_	_	_	_	
35-309	7551-7552	,	_	_	_	_	
35-310	7553-7555	tx	_	_	_	_	
35-311	7555-7556	:	_	_	_	_	
35-312	7557-7558	0	_	_	_	_	
35-313	7558-7559	,	_	_	_	_	
35-314	7560-7563	lsn	_	_	_	_	
35-315	7563-7564	:	_	_	_	_	
35-316	7565-7566	0	_	_	_	_	
35-317	7566-7567	/	_	_	_	_	
35-318	7567-7575	353AF278	_	_	_	_	
35-319	7575-7576	,	_	_	_	_	
35-320	7577-7581	prev	_	_	_	_	
35-321	7582-7583	0	_	_	_	_	
35-322	7583-7584	/	_	_	_	_	
35-323	7584-7592	353AF258	_	_	_	_	
35-324	7592-7593	,	_	_	_	_	
35-325	7594-7598	desc	_	_	_	_	
35-326	7598-7599	:	_	_	_	_	
35-327	7600-7606	CREATE	_	_	_	_	
35-328	7607-7611	base	_	_	_	_	
35-329	7611-7612	/	_	_	_	_	
35-330	7612-7617	16386	_	_	_	_	
35-331	7617-7618	/	_	_	_	_	
35-332	7618-7623	74106	_	_	_	_	
35-333	7624-7628	rmgr	_	_	_	_	
35-334	7628-7629	:	_	_	_	_	
35-335	7630-7634	Heap	_	_	_	_	
35-336	7635-7638	len	_	_	_	_	
35-337	7639-7640	(	_	_	_	_	
35-338	7640-7643	rec	_	_	_	_	
35-339	7643-7644	/	_	_	_	_	
35-340	7644-7647	tot	_	_	_	_	
35-341	7647-7648	)	_	_	_	_	
35-342	7648-7649	:	_	_	_	_	
35-343	7650-7653	203	_	_	_	_	
35-344	7653-7654	/	_	_	_	_	
35-345	7655-7658	203	_	_	_	_	
35-346	7658-7659	,	_	_	_	_	
35-347	7660-7662	tx	_	_	_	_	
35-348	7662-7663	:	_	_	_	_	
35-349	7664-7670	101129	_	_	_	_	
35-350	7670-7671	,	_	_	_	_	
35-351	7672-7675	lsn	_	_	_	_	
35-352	7675-7676	:	_	_	_	_	
35-353	7677-7678	0	_	_	_	_	
35-354	7678-7679	/	_	_	_	_	
35-355	7679-7687	353AF2A4	_	_	_	_	
35-356	7687-7688	,	_	_	_	_	
35-357	7689-7693	prev	_	_	_	_	
35-358	7694-7695	0	_	_	_	_	
35-359	7695-7696	/	_	_	_	_	
35-360	7696-7704	353AF278	_	_	_	_	
35-361	7704-7705	,	_	_	_	_	
35-362	7706-7710	desc	_	_	_	_	
35-363	7710-7711	:	_	_	_	_	
35-364	7712-7718	INSERT	_	_	_	_	
35-365	7719-7722	off	_	_	_	_	
35-366	7723-7725	73	_	_	_	_	
35-367	7725-7726	,	_	_	_	_	
35-368	7727-7733	blkref	_	_	_	_	
35-369	7734-7736	#0	_	_	_	_	
35-370	7736-7737	:	_	_	_	_	
35-371	7738-7741	rel	_	_	_	_	
35-372	7742-7746	1663	_	_	_	_	
35-373	7746-7747	/	_	_	_	_	
35-374	7747-7752	16386	_	_	_	_	
35-375	7752-7753	/	_	_	_	_	
35-376	7753-7757	1247	_	_	_	_	
35-377	7758-7761	blk	_	_	_	_	
35-378	7762-7763	8	_	_	_	_	
35-379	7764-7768	rmgr	_	_	_	_	
35-380	7768-7769	:	_	_	_	_	
35-381	7770-7775	Btree	_	_	_	_	
35-382	7776-7779	len	_	_	_	_	
35-383	7780-7781	(	_	_	_	_	
35-384	7781-7784	rec	_	_	_	_	
35-385	7784-7785	/	_	_	_	_	
35-386	7785-7788	tot	_	_	_	_	
35-387	7788-7789	)	_	_	_	_	
35-388	7789-7790	:	_	_	_	_	
35-389	7791-7793	53	_	_	_	_	
35-390	7793-7794	/	_	_	_	_	
35-391	7795-7798	717	_	_	_	_	
35-392	7798-7799	,	_	_	_	_	
35-393	7800-7802	tx	_	_	_	_	
35-394	7802-7803	:	_	_	_	_	
35-395	7804-7810	101129	_	_	_	_	
35-396	7810-7811	,	_	_	_	_	
35-397	7812-7815	lsn	_	_	_	_	
35-398	7815-7816	:	_	_	_	_	
35-399	7817-7818	0	_	_	_	_	
35-400	7818-7819	/	_	_	_	_	
35-401	7819-7827	353AF370	_	_	_	_	
35-402	7827-7828	,	_	_	_	_	
35-403	7829-7833	prev	_	_	_	_	
35-404	7834-7835	0	_	_	_	_	
35-405	7835-7836	/	_	_	_	_	
35-406	7836-7844	353AF2A4	_	_	_	_	
35-407	7844-7845	,	_	_	_	_	
35-408	7846-7847	…	_	_	_	_	
35-409	7848-7852	rmgr	_	_	_	_	
35-410	7852-7853	:	_	_	_	_	
35-411	7854-7859	Btree	_	_	_	_	
35-412	7860-7863	len	_	_	_	_	
35-413	7864-7865	(	_	_	_	_	
35-414	7865-7868	rec	_	_	_	_	
35-415	7868-7869	/	_	_	_	_	
35-416	7869-7872	tot	_	_	_	_	
35-417	7872-7873	)	_	_	_	_	
35-418	7873-7874	:	_	_	_	_	
35-419	7875-7877	53	_	_	_	_	
35-420	7877-7878	/	_	_	_	_	
35-421	7879-7883	2413	_	_	_	_	
35-422	7883-7884	,	_	_	_	_	
35-423	7885-7887	tx	_	_	_	_	
35-424	7887-7888	:	_	_	_	_	
35-425	7889-7895	101129	_	_	_	_	
35-426	7895-7896	,	_	_	_	_	
35-427	7897-7900	lsn	_	_	_	_	
35-428	7900-7901	:	_	_	_	_	
35-429	7902-7903	0	_	_	_	_	
35-430	7903-7904	/	_	_	_	_	
35-431	7904-7912	353BD954	_	_	_	_	
35-432	7912-7913	,	_	_	_	_	
35-433	7914-7918	prev	_	_	_	_	
35-434	7919-7920	0	_	_	_	_	
35-435	7920-7921	/	_	_	_	_	
35-436	7921-7929	353BCC44	_	_	_	_	
35-437	7929-7930	,	_	_	_	_	
35-438	7931-7935	desc	_	_	_	_	
35-439	7935-7936	:	_	_	_	_	
35-440	7937-7948	INSERT_LEAF	_	_	_	_	
35-441	7949-7952	off	_	_	_	_	
35-442	7953-7955	10	_	_	_	_	
35-443	7955-7956	,	_	_	_	_	
35-444	7957-7963	blkref	_	_	_	_	
35-445	7964-7966	#0	_	_	_	_	
35-446	7966-7967	:	_	_	_	_	
35-447	7968-7971	rel	_	_	_	_	
35-448	7972-7976	1664	_	_	_	_	
35-449	7976-7977	/	_	_	_	_	
35-450	7977-7978	0	_	_	_	_	
35-451	7978-7979	/	_	_	_	_	
35-452	7979-7983	1233	_	_	_	_	
35-453	7984-7987	blk	_	_	_	_	
35-454	7988-7989	1	_	_	_	_	
35-455	7990-7993	FPW	_	_	_	_	
35-456	7994-7997	And	_	_	_	_	
35-457	7998-8002	this	_	_	_	_	
35-458	8003-8005	is	_	_	_	_	
35-459	8006-8015	something	_	_	_	_	
35-460	8016-8019	new	_	_	_	_	
35-461	8019-8020	.	_	_	_	_	

#Text=The record of the exclusive lock, related to the Standby manager — here it is the lock on the transaction ID (we will discuss why it is needed in the next series of articles):
#Text=rmgr: Standby
#Text=len (rec/tot):
#Text=42/
#Text=42, tx:
#Text=101129, lsn: 0/353BE2D8, prev 0/353BD954, desc: LOCK xid 101129 db 16386 rel 74106
#Text=And this is the record of row inserts in our table (compare the file number rel with the one in the CREATE record):
#Text=rmgr: Heap
#Text=len (rec/tot):
#Text=59/
#Text=59, tx:
#Text=101129, lsn: 0/353BE304, prev 0/353BE2D8, desc: INSERT+INIT off 1, blkref #0: rel 1663/16386/74106 blk 0
#Text=This is the commit record:
#Text=rmgr: Transaction len (rec/tot):
#Text=421/
#Text=421, tx:
#Text=101129, lsn: 0/353BE340, prev 0/353BE304, desc: COMMIT 2019-07-23 18:59:37.870333 MSK; inval msgs: catcache 74 catcache 73 catcache 74 catcache 73 catcache 50 catcache 49 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 catcache 7 catcache 6 snapshot 2608 relcache 74106 snapshot 1214
#Text=And there is one more record, which occurs from time to time and is not tied to the completed transaction, relates to the Standby manager and informs of the transactions being executed at this point in time:
#Text=rmgr: Standby
#Text=len (rec/tot):
#Text=50/
#Text=50, tx:
#Text=0, lsn: 0/353BE4E8, prev 0/353BE340, desc: RUNNING_XACTS nextXid 101130 latestCompletedXid 101129 oldestRunningXid 101130
#Text=Logical
#Text=And finally, the last level is specified by the value of wal_level = logical and provides for logical decoding and logical replication.
36-1	8021-8024	The	_	_	_	_	
36-2	8025-8031	record	_	_	_	_	
36-3	8032-8034	of	_	_	_	_	
36-4	8035-8038	the	_	_	_	_	
36-5	8039-8048	exclusive	_	_	_	_	
36-6	8049-8053	lock	_	_	_	_	
36-7	8053-8054	,	_	_	_	_	
36-8	8055-8062	related	_	_	_	_	
36-9	8063-8065	to	_	_	_	_	
36-10	8066-8069	the	_	_	_	_	
36-11	8070-8077	Standby	_	_	_	_	
36-12	8078-8085	manager	_	_	_	_	
36-13	8085-8086	 	_	_	_	_	
36-14	8086-8087	—	_	_	_	_	
36-15	8088-8092	here	_	_	_	_	
36-16	8093-8095	it	_	_	_	_	
36-17	8096-8098	is	_	_	_	_	
36-18	8099-8102	the	_	_	_	_	
36-19	8103-8107	lock	_	_	_	_	
36-20	8108-8110	on	_	_	_	_	
36-21	8111-8114	the	_	_	_	_	
36-22	8115-8126	transaction	_	_	_	_	
36-23	8127-8129	ID	_	_	_	_	
36-24	8130-8131	(	_	_	_	_	
36-25	8131-8133	we	_	_	_	_	
36-26	8134-8138	will	_	_	_	_	
36-27	8139-8146	discuss	_	_	_	_	
36-28	8147-8150	why	_	_	_	_	
36-29	8151-8153	it	_	_	_	_	
36-30	8154-8156	is	_	_	_	_	
36-31	8157-8163	needed	_	_	_	_	
36-32	8164-8166	in	_	_	_	_	
36-33	8167-8170	the	_	_	_	_	
36-34	8171-8175	next	_	_	_	_	
36-35	8176-8182	series	_	_	_	_	
36-36	8183-8185	of	_	_	_	_	
36-37	8186-8194	articles	_	_	_	_	
36-38	8194-8195	)	_	_	_	_	
36-39	8195-8196	:	_	_	_	_	
36-40	8197-8201	rmgr	_	_	_	_	
36-41	8201-8202	:	_	_	_	_	
36-42	8203-8210	Standby	_	_	_	_	
36-43	8211-8214	len	_	_	_	_	
36-44	8215-8216	(	_	_	_	_	
36-45	8216-8219	rec	_	_	_	_	
36-46	8219-8220	/	_	_	_	_	
36-47	8220-8223	tot	_	_	_	_	
36-48	8223-8224	)	_	_	_	_	
36-49	8224-8225	:	_	_	_	_	
36-50	8226-8228	42	_	_	_	_	
36-51	8228-8229	/	_	_	_	_	
36-52	8230-8232	42	_	_	_	_	
36-53	8232-8233	,	_	_	_	_	
36-54	8234-8236	tx	_	_	_	_	
36-55	8236-8237	:	_	_	_	_	
36-56	8238-8244	101129	_	_	_	_	
36-57	8244-8245	,	_	_	_	_	
36-58	8246-8249	lsn	_	_	_	_	
36-59	8249-8250	:	_	_	_	_	
36-60	8251-8252	0	_	_	_	_	
36-61	8252-8253	/	_	_	_	_	
36-62	8253-8261	353BE2D8	_	_	_	_	
36-63	8261-8262	,	_	_	_	_	
36-64	8263-8267	prev	_	_	_	_	
36-65	8268-8269	0	_	_	_	_	
36-66	8269-8270	/	_	_	_	_	
36-67	8270-8278	353BD954	_	_	_	_	
36-68	8278-8279	,	_	_	_	_	
36-69	8280-8284	desc	_	_	_	_	
36-70	8284-8285	:	_	_	_	_	
36-71	8286-8290	LOCK	_	_	_	_	
36-72	8291-8294	xid	_	_	_	_	
36-73	8295-8301	101129	_	_	_	_	
36-74	8302-8304	db	_	_	_	_	
36-75	8305-8310	16386	_	_	_	_	
36-76	8311-8314	rel	_	_	_	_	
36-77	8315-8320	74106	_	_	_	_	
36-78	8321-8324	And	_	_	_	_	
36-79	8325-8329	this	_	_	_	_	
36-80	8330-8332	is	_	_	_	_	
36-81	8333-8336	the	_	_	_	_	
36-82	8337-8343	record	_	_	_	_	
36-83	8344-8346	of	_	_	_	_	
36-84	8347-8350	row	_	_	_	_	
36-85	8351-8358	inserts	_	_	_	_	
36-86	8359-8361	in	_	_	_	_	
36-87	8362-8365	our	_	_	_	_	
36-88	8366-8371	table	_	_	_	_	
36-89	8372-8373	(	_	_	_	_	
36-90	8373-8380	compare	_	_	_	_	
36-91	8381-8384	the	_	_	_	_	
36-92	8385-8389	file	_	_	_	_	
36-93	8390-8396	number	_	_	_	_	
36-94	8397-8400	rel	_	_	_	_	
36-95	8401-8405	with	_	_	_	_	
36-96	8406-8409	the	_	_	_	_	
36-97	8410-8413	one	_	_	_	_	
36-98	8414-8416	in	_	_	_	_	
36-99	8417-8420	the	_	_	_	_	
36-100	8421-8427	CREATE	_	_	_	_	
36-101	8428-8434	record	_	_	_	_	
36-102	8434-8435	)	_	_	_	_	
36-103	8435-8436	:	_	_	_	_	
36-104	8437-8441	rmgr	_	_	_	_	
36-105	8441-8442	:	_	_	_	_	
36-106	8443-8447	Heap	_	_	_	_	
36-107	8448-8451	len	_	_	_	_	
36-108	8452-8453	(	_	_	_	_	
36-109	8453-8456	rec	_	_	_	_	
36-110	8456-8457	/	_	_	_	_	
36-111	8457-8460	tot	_	_	_	_	
36-112	8460-8461	)	_	_	_	_	
36-113	8461-8462	:	_	_	_	_	
36-114	8463-8465	59	_	_	_	_	
36-115	8465-8466	/	_	_	_	_	
36-116	8467-8469	59	_	_	_	_	
36-117	8469-8470	,	_	_	_	_	
36-118	8471-8473	tx	_	_	_	_	
36-119	8473-8474	:	_	_	_	_	
36-120	8475-8481	101129	_	_	_	_	
36-121	8481-8482	,	_	_	_	_	
36-122	8483-8486	lsn	_	_	_	_	
36-123	8486-8487	:	_	_	_	_	
36-124	8488-8489	0	_	_	_	_	
36-125	8489-8490	/	_	_	_	_	
36-126	8490-8498	353BE304	_	_	_	_	
36-127	8498-8499	,	_	_	_	_	
36-128	8500-8504	prev	_	_	_	_	
36-129	8505-8506	0	_	_	_	_	
36-130	8506-8507	/	_	_	_	_	
36-131	8507-8515	353BE2D8	_	_	_	_	
36-132	8515-8516	,	_	_	_	_	
36-133	8517-8521	desc	_	_	_	_	
36-134	8521-8522	:	_	_	_	_	
36-135	8523-8529	INSERT	_	_	_	_	
36-136	8529-8530	+	_	_	_	_	
36-137	8530-8534	INIT	_	_	_	_	
36-138	8535-8538	off	_	_	_	_	
36-139	8539-8540	1	_	_	_	_	
36-140	8540-8541	,	_	_	_	_	
36-141	8542-8548	blkref	_	_	_	_	
36-142	8549-8551	#0	_	_	_	_	
36-143	8551-8552	:	_	_	_	_	
36-144	8553-8556	rel	_	_	_	_	
36-145	8557-8561	1663	_	_	_	_	
36-146	8561-8562	/	_	_	_	_	
36-147	8562-8567	16386	_	_	_	_	
36-148	8567-8568	/	_	_	_	_	
36-149	8568-8573	74106	_	_	_	_	
36-150	8574-8577	blk	_	_	_	_	
36-151	8578-8579	0	_	_	_	_	
36-152	8580-8584	This	_	_	_	_	
36-153	8585-8587	is	_	_	_	_	
36-154	8588-8591	the	_	_	_	_	
36-155	8592-8598	commit	_	_	_	_	
36-156	8599-8605	record	_	_	_	_	
36-157	8605-8606	:	_	_	_	_	
36-158	8607-8611	rmgr	_	_	_	_	
36-159	8611-8612	:	_	_	_	_	
36-160	8613-8624	Transaction	_	_	_	_	
36-161	8625-8628	len	_	_	_	_	
36-162	8629-8630	(	_	_	_	_	
36-163	8630-8633	rec	_	_	_	_	
36-164	8633-8634	/	_	_	_	_	
36-165	8634-8637	tot	_	_	_	_	
36-166	8637-8638	)	_	_	_	_	
36-167	8638-8639	:	_	_	_	_	
36-168	8640-8643	421	_	_	_	_	
36-169	8643-8644	/	_	_	_	_	
36-170	8645-8648	421	_	_	_	_	
36-171	8648-8649	,	_	_	_	_	
36-172	8650-8652	tx	_	_	_	_	
36-173	8652-8653	:	_	_	_	_	
36-174	8654-8660	101129	_	_	_	_	
36-175	8660-8661	,	_	_	_	_	
36-176	8662-8665	lsn	_	_	_	_	
36-177	8665-8666	:	_	_	_	_	
36-178	8667-8668	0	_	_	_	_	
36-179	8668-8669	/	_	_	_	_	
36-180	8669-8677	353BE340	_	_	_	_	
36-181	8677-8678	,	_	_	_	_	
36-182	8679-8683	prev	_	_	_	_	
36-183	8684-8685	0	_	_	_	_	
36-184	8685-8686	/	_	_	_	_	
36-185	8686-8694	353BE304	_	_	_	_	
36-186	8694-8695	,	_	_	_	_	
36-187	8696-8700	desc	_	_	_	_	
36-188	8700-8701	:	_	_	_	_	
36-189	8702-8708	COMMIT	_	_	_	_	
36-190	8709-8713	2019	_	_	_	_	
36-191	8713-8714	-	_	_	_	_	
36-192	8714-8716	07	_	_	_	_	
36-193	8716-8717	-	_	_	_	_	
36-194	8717-8719	23	_	_	_	_	
36-195	8720-8722	18	_	_	_	_	
36-196	8722-8723	:	_	_	_	_	
36-197	8723-8725	59	_	_	_	_	
36-198	8725-8726	:	_	_	_	_	
36-199	8726-8735	37.870333	_	_	_	_	
36-200	8736-8739	MSK	_	_	_	_	
36-201	8739-8740	;	_	_	_	_	
36-202	8741-8746	inval	_	_	_	_	
36-203	8747-8751	msgs	_	_	_	_	
36-204	8751-8752	:	_	_	_	_	
36-205	8753-8761	catcache	_	_	_	_	
36-206	8762-8764	74	_	_	_	_	
36-207	8765-8773	catcache	_	_	_	_	
36-208	8774-8776	73	_	_	_	_	
36-209	8777-8785	catcache	_	_	_	_	
36-210	8786-8788	74	_	_	_	_	
36-211	8789-8797	catcache	_	_	_	_	
36-212	8798-8800	73	_	_	_	_	
36-213	8801-8809	catcache	_	_	_	_	
36-214	8810-8812	50	_	_	_	_	
36-215	8813-8821	catcache	_	_	_	_	
36-216	8822-8824	49	_	_	_	_	
36-217	8825-8833	catcache	_	_	_	_	
36-218	8834-8835	7	_	_	_	_	
36-219	8836-8844	catcache	_	_	_	_	
36-220	8845-8846	6	_	_	_	_	
36-221	8847-8855	catcache	_	_	_	_	
36-222	8856-8857	7	_	_	_	_	
36-223	8858-8866	catcache	_	_	_	_	
36-224	8867-8868	6	_	_	_	_	
36-225	8869-8877	catcache	_	_	_	_	
36-226	8878-8879	7	_	_	_	_	
36-227	8880-8888	catcache	_	_	_	_	
36-228	8889-8890	6	_	_	_	_	
36-229	8891-8899	catcache	_	_	_	_	
36-230	8900-8901	7	_	_	_	_	
36-231	8902-8910	catcache	_	_	_	_	
36-232	8911-8912	6	_	_	_	_	
36-233	8913-8921	catcache	_	_	_	_	
36-234	8922-8923	7	_	_	_	_	
36-235	8924-8932	catcache	_	_	_	_	
36-236	8933-8934	6	_	_	_	_	
36-237	8935-8943	catcache	_	_	_	_	
36-238	8944-8945	7	_	_	_	_	
36-239	8946-8954	catcache	_	_	_	_	
36-240	8955-8956	6	_	_	_	_	
36-241	8957-8965	catcache	_	_	_	_	
36-242	8966-8967	7	_	_	_	_	
36-243	8968-8976	catcache	_	_	_	_	
36-244	8977-8978	6	_	_	_	_	
36-245	8979-8987	snapshot	_	_	_	_	
36-246	8988-8992	2608	_	_	_	_	
36-247	8993-9001	relcache	_	_	_	_	
36-248	9002-9007	74106	_	_	_	_	
36-249	9008-9016	snapshot	_	_	_	_	
36-250	9017-9021	1214	_	_	_	_	
36-251	9022-9025	And	_	_	_	_	
36-252	9026-9031	there	_	_	_	_	
36-253	9032-9034	is	_	_	_	_	
36-254	9035-9038	one	_	_	_	_	
36-255	9039-9043	more	_	_	_	_	
36-256	9044-9050	record	_	_	_	_	
36-257	9050-9051	,	_	_	_	_	
36-258	9052-9057	which	_	_	_	_	
36-259	9058-9064	occurs	_	_	_	_	
36-260	9065-9069	from	_	_	_	_	
36-261	9070-9074	time	_	_	_	_	
36-262	9075-9077	to	_	_	_	_	
36-263	9078-9082	time	_	_	_	_	
36-264	9083-9086	and	_	_	_	_	
36-265	9087-9089	is	_	_	_	_	
36-266	9090-9093	not	_	_	_	_	
36-267	9094-9098	tied	_	_	_	_	
36-268	9099-9101	to	_	_	_	_	
36-269	9102-9105	the	_	_	_	_	
36-270	9106-9115	completed	_	_	_	_	
36-271	9116-9127	transaction	_	_	_	_	
36-272	9127-9128	,	_	_	_	_	
36-273	9129-9136	relates	_	_	_	_	
36-274	9137-9139	to	_	_	_	_	
36-275	9140-9143	the	_	_	_	_	
36-276	9144-9151	Standby	_	_	_	_	
36-277	9152-9159	manager	_	_	_	_	
36-278	9160-9163	and	_	_	_	_	
36-279	9164-9171	informs	_	_	_	_	
36-280	9172-9174	of	_	_	_	_	
36-281	9175-9178	the	_	_	_	_	
36-282	9179-9191	transactions	_	_	_	_	
36-283	9192-9197	being	_	_	_	_	
36-284	9198-9206	executed	_	_	_	_	
36-285	9207-9209	at	_	_	_	_	
36-286	9210-9214	this	_	_	_	_	
36-287	9215-9220	point	_	_	_	_	
36-288	9221-9223	in	_	_	_	_	
36-289	9224-9228	time	_	_	_	_	
36-290	9228-9229	:	_	_	_	_	
36-291	9230-9234	rmgr	_	_	_	_	
36-292	9234-9235	:	_	_	_	_	
36-293	9236-9243	Standby	_	_	_	_	
36-294	9244-9247	len	_	_	_	_	
36-295	9248-9249	(	_	_	_	_	
36-296	9249-9252	rec	_	_	_	_	
36-297	9252-9253	/	_	_	_	_	
36-298	9253-9256	tot	_	_	_	_	
36-299	9256-9257	)	_	_	_	_	
36-300	9257-9258	:	_	_	_	_	
36-301	9259-9261	50	_	_	_	_	
36-302	9261-9262	/	_	_	_	_	
36-303	9263-9265	50	_	_	_	_	
36-304	9265-9266	,	_	_	_	_	
36-305	9267-9269	tx	_	_	_	_	
36-306	9269-9270	:	_	_	_	_	
36-307	9271-9272	0	_	_	_	_	
36-308	9272-9273	,	_	_	_	_	
36-309	9274-9277	lsn	_	_	_	_	
36-310	9277-9278	:	_	_	_	_	
36-311	9279-9280	0	_	_	_	_	
36-312	9280-9281	/	_	_	_	_	
36-313	9281-9289	353BE4E8	_	_	_	_	
36-314	9289-9290	,	_	_	_	_	
36-315	9291-9295	prev	_	_	_	_	
36-316	9296-9297	0	_	_	_	_	
36-317	9297-9298	/	_	_	_	_	
36-318	9298-9306	353BE340	_	_	_	_	
36-319	9306-9307	,	_	_	_	_	
36-320	9308-9312	desc	_	_	_	_	
36-321	9312-9313	:	_	_	_	_	
36-322	9314-9327	RUNNING_XACTS	_	_	_	_	
36-323	9328-9335	nextXid	_	_	_	_	
36-324	9336-9342	101130	_	_	_	_	
36-325	9343-9361	latestCompletedXid	_	_	_	_	
36-326	9362-9368	101129	_	_	_	_	
36-327	9369-9385	oldestRunningXid	_	_	_	_	
36-328	9386-9392	101130	_	_	_	_	
36-329	9393-9400	Logical	_	_	_	_	
36-330	9401-9404	And	_	_	_	_	
36-331	9405-9412	finally	_	_	_	_	
36-332	9412-9413	,	_	_	_	_	
36-333	9414-9417	the	_	_	_	_	
36-334	9418-9422	last	_	_	_	_	
36-335	9423-9428	level	_	_	_	_	
36-336	9429-9431	is	_	_	_	_	
36-337	9432-9441	specified	_	_	_	_	
36-338	9442-9444	by	_	_	_	_	
36-339	9445-9448	the	_	_	_	_	
36-340	9449-9454	value	_	_	_	_	
36-341	9455-9457	of	_	_	_	_	
36-342	9458-9467	wal_level	_	_	_	_	
36-343	9468-9469	=	_	_	_	_	
36-344	9470-9477	logical	_	_	_	_	
36-345	9478-9481	and	_	_	_	_	
36-346	9482-9490	provides	_	_	_	_	
36-347	9491-9494	for	_	_	_	_	
36-348	9495-9502	logical	_	_	_	_	
36-349	9503-9511	decoding	_	_	_	_	
36-350	9512-9515	and	_	_	_	_	
36-351	9516-9523	logical	_	_	_	_	
36-352	9524-9535	replication	_	_	_	_	
36-353	9535-9536	.	_	_	_	_	

#Text=It must be turned on for the publishing server.
37-1	9537-9539	It	_	_	_	_	
37-2	9540-9544	must	_	_	_	_	
37-3	9545-9547	be	_	_	_	_	
37-4	9548-9554	turned	_	_	_	_	
37-5	9555-9557	on	_	_	_	_	
37-6	9558-9561	for	_	_	_	_	
37-7	9562-9565	the	_	_	_	_	
37-8	9566-9576	publishing	_	_	_	_	
37-9	9577-9583	server	_	_	_	_	
37-10	9583-9584	.	_	_	_	_	

#Text=From the perspective of WAL records, this level is virtually the same as replica: records are added that relate to replication origins, as well as arbitrary logical records that applications can add to WAL.
38-1	9585-9589	From	_	_	_	_	
38-2	9590-9593	the	_	_	_	_	
38-3	9594-9605	perspective	_	_	_	_	
38-4	9606-9608	of	_	_	_	_	
38-5	9609-9612	WAL	_	_	_	_	
38-6	9613-9620	records	_	_	_	_	
38-7	9620-9621	,	_	_	_	_	
38-8	9622-9626	this	_	_	_	_	
38-9	9627-9632	level	_	_	_	_	
38-10	9633-9635	is	_	_	_	_	
38-11	9636-9645	virtually	_	_	_	_	
38-12	9646-9649	the	_	_	_	_	
38-13	9650-9654	same	_	_	_	_	
38-14	9655-9657	as	_	_	_	_	
38-15	9658-9665	replica	_	_	_	_	
38-16	9665-9666	:	_	_	_	_	
38-17	9667-9674	records	_	_	_	_	
38-18	9675-9678	are	_	_	_	_	
38-19	9679-9684	added	_	_	_	_	
38-20	9685-9689	that	_	_	_	_	
38-21	9690-9696	relate	_	_	_	_	
38-22	9697-9699	to	_	_	_	_	
38-23	9700-9711	replication	_	_	_	_	
38-24	9712-9719	origins	_	_	_	_	
38-25	9719-9720	,	_	_	_	_	
38-26	9721-9723	as	_	_	_	_	
38-27	9724-9728	well	_	_	_	_	
38-28	9729-9731	as	_	_	_	_	
38-29	9732-9741	arbitrary	_	_	_	_	
38-30	9742-9749	logical	_	_	_	_	
38-31	9750-9757	records	_	_	_	_	
38-32	9758-9762	that	_	_	_	_	
38-33	9763-9775	applications	_	_	_	_	
38-34	9776-9779	can	_	_	_	_	
38-35	9780-9783	add	_	_	_	_	
38-36	9784-9786	to	_	_	_	_	
38-37	9787-9790	WAL	_	_	_	_	
38-38	9790-9791	.	_	_	_	_	

#Text=But logical decoding mainly depends on the information on the transactions being executed since it is needed to create the data snapshot to track changes to the system catalog.
39-1	9792-9795	But	_	_	_	_	
39-2	9796-9803	logical	_	_	_	_	
39-3	9804-9812	decoding	_	_	_	_	
39-4	9813-9819	mainly	_	_	_	_	
39-5	9820-9827	depends	_	_	_	_	
39-6	9828-9830	on	_	_	_	_	
39-7	9831-9834	the	_	_	_	_	
39-8	9835-9846	information	_	_	_	_	
39-9	9847-9849	on	_	_	_	_	
39-10	9850-9853	the	_	_	_	_	
39-11	9854-9866	transactions	_	_	_	_	
39-12	9867-9872	being	_	_	_	_	
39-13	9873-9881	executed	_	_	_	_	
39-14	9882-9887	since	_	_	_	_	
39-15	9888-9890	it	_	_	_	_	
39-16	9891-9893	is	_	_	_	_	
39-17	9894-9900	needed	_	_	_	_	
39-18	9901-9903	to	_	_	_	_	
39-19	9904-9910	create	_	_	_	_	
39-20	9911-9914	the	_	_	_	_	
39-21	9915-9919	data	_	_	_	_	
39-22	9920-9928	snapshot	_	_	_	_	
39-23	9929-9931	to	_	_	_	_	
39-24	9932-9937	track	_	_	_	_	
39-25	9938-9945	changes	_	_	_	_	
39-26	9946-9948	to	_	_	_	_	
39-27	9949-9952	the	_	_	_	_	
39-28	9953-9959	system	_	_	_	_	
39-29	9960-9967	catalog	_	_	_	_	
39-30	9967-9968	.	_	_	_	_	

#Text=We will not go into details of backup and replication now since this is a topic for a separate series of articles.
40-1	9969-9971	We	_	_	_	_	
40-2	9972-9976	will	_	_	_	_	
40-3	9977-9980	not	_	_	_	_	
40-4	9981-9983	go	_	_	_	_	
40-5	9984-9988	into	_	_	_	_	
40-6	9989-9996	details	_	_	_	_	
40-7	9997-9999	of	_	_	_	_	
40-8	10000-10006	backup	_	_	_	_	
40-9	10007-10010	and	_	_	_	_	
40-10	10011-10022	replication	_	_	_	_	
40-11	10023-10026	now	_	_	_	_	
40-12	10027-10032	since	_	_	_	_	
40-13	10033-10037	this	_	_	_	_	
40-14	10038-10040	is	_	_	_	_	
40-15	10041-10042	a	_	_	_	_	
40-16	10043-10048	topic	_	_	_	_	
40-17	10049-10052	for	_	_	_	_	
40-18	10053-10054	a	_	_	_	_	
40-19	10055-10063	separate	_	_	_	_	
40-20	10064-10070	series	_	_	_	_	
40-21	10071-10073	of	_	_	_	_	
40-22	10074-10082	articles	_	_	_	_	
40-23	10082-10083	.	_	_	_	_	

#Text=Reliability of writing
#Text=It's clear that a logging technique must be reliable and ensure recovery whatever the circumstances (certainly, not related to corruption of the data storage media).
41-1	10084-10095	Reliability	_	_	_	_	
41-2	10096-10098	of	_	_	_	_	
41-3	10099-10106	writing	_	_	_	_	
41-4	10107-10111	It's	_	_	_	_	
41-5	10112-10117	clear	_	_	_	_	
41-6	10118-10122	that	_	_	_	_	
41-7	10123-10124	a	_	_	_	_	
41-8	10125-10132	logging	_	_	_	_	
41-9	10133-10142	technique	_	_	_	_	
41-10	10143-10147	must	_	_	_	_	
41-11	10148-10150	be	_	_	_	_	
41-12	10151-10159	reliable	_	_	_	_	
41-13	10160-10163	and	_	_	_	_	
41-14	10164-10170	ensure	_	_	_	_	
41-15	10171-10179	recovery	_	_	_	_	
41-16	10180-10188	whatever	_	_	_	_	
41-17	10189-10192	the	_	_	_	_	
41-18	10193-10206	circumstances	_	_	_	_	
41-19	10207-10208	(	_	_	_	_	
41-20	10208-10217	certainly	_	_	_	_	
41-21	10217-10218	,	_	_	_	_	
41-22	10219-10222	not	_	_	_	_	
41-23	10223-10230	related	_	_	_	_	
41-24	10231-10233	to	_	_	_	_	
41-25	10234-10244	corruption	_	_	_	_	
41-26	10245-10247	of	_	_	_	_	
41-27	10248-10251	the	_	_	_	_	
41-28	10252-10256	data	_	_	_	_	
41-29	10257-10264	storage	_	_	_	_	
41-30	10265-10270	media	_	_	_	_	
41-31	10270-10271	)	_	_	_	_	
41-32	10271-10272	.	_	_	_	_	

#Text=Many things affect reliability, of which we will discuss caching, corruption of data and atomicity of writing.
42-1	10273-10277	Many	_	_	_	_	
42-2	10278-10284	things	_	_	_	_	
42-3	10285-10291	affect	_	_	_	_	
42-4	10292-10303	reliability	_	_	_	_	
42-5	10303-10304	,	_	_	_	_	
42-6	10305-10307	of	_	_	_	_	
42-7	10308-10313	which	_	_	_	_	
42-8	10314-10316	we	_	_	_	_	
42-9	10317-10321	will	_	_	_	_	
42-10	10322-10329	discuss	_	_	_	_	
42-11	10330-10337	caching	_	_	_	_	
42-12	10337-10338	,	_	_	_	_	
42-13	10339-10349	corruption	_	_	_	_	
42-14	10350-10352	of	_	_	_	_	
42-15	10353-10357	data	_	_	_	_	
42-16	10358-10361	and	_	_	_	_	
42-17	10362-10371	atomicity	_	_	_	_	
42-18	10372-10374	of	_	_	_	_	
42-19	10375-10382	writing	_	_	_	_	
42-20	10382-10383	.	_	_	_	_	

#Text=Caching
#Text=Multiple caches stand in the way of data to a nonvolatile storage (such as a hard disk drive platter).
43-1	10384-10391	Caching	_	_	_	_	
43-2	10392-10400	Multiple	_	_	_	_	
43-3	10401-10407	caches	_	_	_	_	
43-4	10408-10413	stand	_	_	_	_	
43-5	10414-10416	in	_	_	_	_	
43-6	10417-10420	the	_	_	_	_	
43-7	10421-10424	way	_	_	_	_	
43-8	10425-10427	of	_	_	_	_	
43-9	10428-10432	data	_	_	_	_	
43-10	10433-10435	to	_	_	_	_	
43-11	10436-10437	a	_	_	_	_	
43-12	10438-10449	nonvolatile	_	_	_	_	
43-13	10450-10457	storage	_	_	_	_	
43-14	10458-10459	(	_	_	_	_	
43-15	10459-10463	such	_	_	_	_	
43-16	10464-10466	as	_	_	_	_	
43-17	10467-10468	a	_	_	_	_	
43-18	10469-10473	hard	_	_	_	_	
43-19	10474-10478	disk	_	_	_	_	
43-20	10479-10484	drive	_	_	_	_	
43-21	10485-10492	platter	_	_	_	_	
43-22	10492-10493	)	_	_	_	_	
43-23	10493-10494	.	_	_	_	_	

#Text=If a program (any, but PostgreSQL in this case) asks the operating system (OS) to write something on disk, the OS transfers the data to its RAM cache.
44-1	10495-10497	If	_	_	_	_	
44-2	10498-10499	a	_	_	_	_	
44-3	10500-10507	program	_	_	_	_	
44-4	10508-10509	(	_	_	_	_	
44-5	10509-10512	any	_	_	_	_	
44-6	10512-10513	,	_	_	_	_	
44-7	10514-10517	but	_	_	_	_	
44-8	10518-10528	PostgreSQL	_	_	_	_	
44-9	10529-10531	in	_	_	_	_	
44-10	10532-10536	this	_	_	_	_	
44-11	10537-10541	case	_	_	_	_	
44-12	10541-10542	)	_	_	_	_	
44-13	10543-10547	asks	_	_	_	_	
44-14	10548-10551	the	_	_	_	_	
44-15	10552-10561	operating	_	_	_	_	
44-16	10562-10568	system	_	_	_	_	
44-17	10569-10570	(	_	_	_	_	
44-18	10570-10572	OS	_	_	_	_	
44-19	10572-10573	)	_	_	_	_	
44-20	10574-10576	to	_	_	_	_	
44-21	10577-10582	write	_	_	_	_	
44-22	10583-10592	something	_	_	_	_	
44-23	10593-10595	on	_	_	_	_	
44-24	10596-10600	disk	_	_	_	_	
44-25	10600-10601	,	_	_	_	_	
44-26	10602-10605	the	_	_	_	_	
44-27	10606-10608	OS	_	_	_	_	
44-28	10609-10618	transfers	_	_	_	_	
44-29	10619-10622	the	_	_	_	_	
44-30	10623-10627	data	_	_	_	_	
44-31	10628-10630	to	_	_	_	_	
44-32	10631-10634	its	_	_	_	_	
44-33	10635-10638	RAM	_	_	_	_	
44-34	10639-10644	cache	_	_	_	_	
44-35	10644-10645	.	_	_	_	_	

#Text=Writing actually happens asynchronously, depending on the settings of I/O scheduler of the OS.
45-1	10646-10653	Writing	_	_	_	_	
45-2	10654-10662	actually	_	_	_	_	
45-3	10663-10670	happens	_	_	_	_	
45-4	10671-10685	asynchronously	_	_	_	_	
45-5	10685-10686	,	_	_	_	_	
45-6	10687-10696	depending	_	_	_	_	
45-7	10697-10699	on	_	_	_	_	
45-8	10700-10703	the	_	_	_	_	
45-9	10704-10712	settings	_	_	_	_	
45-10	10713-10715	of	_	_	_	_	
45-11	10716-10717	I	_	_	_	_	
45-12	10717-10718	/	_	_	_	_	
45-13	10718-10719	O	_	_	_	_	
45-14	10720-10729	scheduler	_	_	_	_	
45-15	10730-10732	of	_	_	_	_	
45-16	10733-10736	the	_	_	_	_	
45-17	10737-10739	OS	_	_	_	_	
45-18	10739-10740	.	_	_	_	_	

#Text=When the OS decides to write the data, they get into the cache of the storage (hard disk).
46-1	10741-10745	When	_	_	_	_	
46-2	10746-10749	the	_	_	_	_	
46-3	10750-10752	OS	_	_	_	_	
46-4	10753-10760	decides	_	_	_	_	
46-5	10761-10763	to	_	_	_	_	
46-6	10764-10769	write	_	_	_	_	
46-7	10770-10773	the	_	_	_	_	
46-8	10774-10778	data	_	_	_	_	
46-9	10778-10779	,	_	_	_	_	
46-10	10780-10784	they	_	_	_	_	
46-11	10785-10788	get	_	_	_	_	
46-12	10789-10793	into	_	_	_	_	
46-13	10794-10797	the	_	_	_	_	
46-14	10798-10803	cache	_	_	_	_	
46-15	10804-10806	of	_	_	_	_	
46-16	10807-10810	the	_	_	_	_	
46-17	10811-10818	storage	_	_	_	_	
46-18	10819-10820	(	_	_	_	_	
46-19	10820-10824	hard	_	_	_	_	
46-20	10825-10829	disk	_	_	_	_	
46-21	10829-10830	)	_	_	_	_	
46-22	10830-10831	.	_	_	_	_	

#Text=Electronics of the storage can also postpone writing, for example, by grouping data that are more efficient to be written together.
47-1	10832-10843	Electronics	_	_	_	_	
47-2	10844-10846	of	_	_	_	_	
47-3	10847-10850	the	_	_	_	_	
47-4	10851-10858	storage	_	_	_	_	
47-5	10859-10862	can	_	_	_	_	
47-6	10863-10867	also	_	_	_	_	
47-7	10868-10876	postpone	_	_	_	_	
47-8	10877-10884	writing	_	_	_	_	
47-9	10884-10885	,	_	_	_	_	
47-10	10886-10889	for	_	_	_	_	
47-11	10890-10897	example	_	_	_	_	
47-12	10897-10898	,	_	_	_	_	
47-13	10899-10901	by	_	_	_	_	
47-14	10902-10910	grouping	_	_	_	_	
47-15	10911-10915	data	_	_	_	_	
47-16	10916-10920	that	_	_	_	_	
47-17	10921-10924	are	_	_	_	_	
47-18	10925-10929	more	_	_	_	_	
47-19	10930-10939	efficient	_	_	_	_	
47-20	10940-10942	to	_	_	_	_	
47-21	10943-10945	be	_	_	_	_	
47-22	10946-10953	written	_	_	_	_	
47-23	10954-10962	together	_	_	_	_	
47-24	10962-10963	.	_	_	_	_	

#Text=And if a RAID controller is used, one more caching level is added between the OS and disk.
48-1	10964-10967	And	_	_	_	_	
48-2	10968-10970	if	_	_	_	_	
48-3	10971-10972	a	_	_	_	_	
48-4	10973-10977	RAID	_	_	_	_	
48-5	10978-10988	controller	_	_	_	_	
48-6	10989-10991	is	_	_	_	_	
48-7	10992-10996	used	_	_	_	_	
48-8	10996-10997	,	_	_	_	_	
48-9	10998-11001	one	_	_	_	_	
48-10	11002-11006	more	_	_	_	_	
48-11	11007-11014	caching	_	_	_	_	
48-12	11015-11020	level	_	_	_	_	
48-13	11021-11023	is	_	_	_	_	
48-14	11024-11029	added	_	_	_	_	
48-15	11030-11037	between	_	_	_	_	
48-16	11038-11041	the	_	_	_	_	
48-17	11042-11044	OS	_	_	_	_	
48-18	11045-11048	and	_	_	_	_	
48-19	11049-11053	disk	_	_	_	_	
48-20	11053-11054	.	_	_	_	_	

#Text=So, without taking special measures, it is absolutely unclear when the data is actually saved in a reliable manner.
49-1	11055-11057	So	_	_	_	_	
49-2	11057-11058	,	_	_	_	_	
49-3	11059-11066	without	_	_	_	_	
49-4	11067-11073	taking	_	_	_	_	
49-5	11074-11081	special	_	_	_	_	
49-6	11082-11090	measures	_	_	_	_	
49-7	11090-11091	,	_	_	_	_	
49-8	11092-11094	it	_	_	_	_	
49-9	11095-11097	is	_	_	_	_	
49-10	11098-11108	absolutely	_	_	_	_	
49-11	11109-11116	unclear	_	_	_	_	
49-12	11117-11121	when	_	_	_	_	
49-13	11122-11125	the	_	_	_	_	
49-14	11126-11130	data	_	_	_	_	
49-15	11131-11133	is	_	_	_	_	
49-16	11134-11142	actually	_	_	_	_	
49-17	11143-11148	saved	_	_	_	_	
49-18	11149-11151	in	_	_	_	_	
49-19	11152-11153	a	_	_	_	_	
49-20	11154-11162	reliable	_	_	_	_	
49-21	11163-11169	manner	_	_	_	_	
49-22	11169-11170	.	_	_	_	_	

#Text=And usually it makes no difference, but there are critical areas where PostgreSQL must be sure that the data are written with due reliability.
50-1	11171-11174	And	_	_	_	_	
50-2	11175-11182	usually	_	_	_	_	
50-3	11183-11185	it	_	_	_	_	
50-4	11186-11191	makes	_	_	_	_	
50-5	11192-11194	no	_	_	_	_	
50-6	11195-11205	difference	_	_	_	_	
50-7	11205-11206	,	_	_	_	_	
50-8	11207-11210	but	_	_	_	_	
50-9	11211-11216	there	_	_	_	_	
50-10	11217-11220	are	_	_	_	_	
50-11	11221-11229	critical	_	_	_	_	
50-12	11230-11235	areas	_	_	_	_	
50-13	11236-11241	where	_	_	_	_	
50-14	11242-11252	PostgreSQL	_	_	_	_	
50-15	11253-11257	must	_	_	_	_	
50-16	11258-11260	be	_	_	_	_	
50-17	11261-11265	sure	_	_	_	_	
50-18	11266-11270	that	_	_	_	_	
50-19	11271-11274	the	_	_	_	_	
50-20	11275-11279	data	_	_	_	_	
50-21	11280-11283	are	_	_	_	_	
50-22	11284-11291	written	_	_	_	_	
50-23	11292-11296	with	_	_	_	_	
50-24	11297-11300	due	_	_	_	_	
50-25	11301-11312	reliability	_	_	_	_	
50-26	11312-11313	.	_	_	_	_	

#Text=This is, primarily, logging (if a WAL record did not reach disk, it will be lost along with the rest of the RAM contents) and a checkpoint (we must be sure that dirty pages are really written to disk).
51-1	11314-11318	This	_	_	_	_	
51-2	11319-11321	is	_	_	_	_	
51-3	11321-11322	,	_	_	_	_	
51-4	11323-11332	primarily	_	_	_	_	
51-5	11332-11333	,	_	_	_	_	
51-6	11334-11341	logging	_	_	_	_	
51-7	11342-11343	(	_	_	_	_	
51-8	11343-11345	if	_	_	_	_	
51-9	11346-11347	a	_	_	_	_	
51-10	11348-11351	WAL	_	_	_	_	
51-11	11352-11358	record	_	_	_	_	
51-12	11359-11362	did	_	_	_	_	
51-13	11363-11366	not	_	_	_	_	
51-14	11367-11372	reach	_	_	_	_	
51-15	11373-11377	disk	_	_	_	_	
51-16	11377-11378	,	_	_	_	_	
51-17	11379-11381	it	_	_	_	_	
51-18	11382-11386	will	_	_	_	_	
51-19	11387-11389	be	_	_	_	_	
51-20	11390-11394	lost	_	_	_	_	
51-21	11395-11400	along	_	_	_	_	
51-22	11401-11405	with	_	_	_	_	
51-23	11406-11409	the	_	_	_	_	
51-24	11410-11414	rest	_	_	_	_	
51-25	11415-11417	of	_	_	_	_	
51-26	11418-11421	the	_	_	_	_	
51-27	11422-11425	RAM	_	_	_	_	
51-28	11426-11434	contents	_	_	_	_	
51-29	11434-11435	)	_	_	_	_	
51-30	11436-11439	and	_	_	_	_	
51-31	11440-11441	a	_	_	_	_	
51-32	11442-11452	checkpoint	_	_	_	_	
51-33	11453-11454	(	_	_	_	_	
51-34	11454-11456	we	_	_	_	_	
51-35	11457-11461	must	_	_	_	_	
51-36	11462-11464	be	_	_	_	_	
51-37	11465-11469	sure	_	_	_	_	
51-38	11470-11474	that	_	_	_	_	
51-39	11475-11480	dirty	_	_	_	_	
51-40	11481-11486	pages	_	_	_	_	
51-41	11487-11490	are	_	_	_	_	
51-42	11491-11497	really	_	_	_	_	
51-43	11498-11505	written	_	_	_	_	
51-44	11506-11508	to	_	_	_	_	
51-45	11509-11513	disk	_	_	_	_	
51-46	11513-11514	)	_	_	_	_	
51-47	11514-11515	.	_	_	_	_	

#Text=But there are other situations, such as performing unlogged operations at the level of minimal and so on.
52-1	11516-11519	But	_	_	_	_	
52-2	11520-11525	there	_	_	_	_	
52-3	11526-11529	are	_	_	_	_	
52-4	11530-11535	other	_	_	_	_	
52-5	11536-11546	situations	_	_	_	_	
52-6	11546-11547	,	_	_	_	_	
52-7	11548-11552	such	_	_	_	_	
52-8	11553-11555	as	_	_	_	_	
52-9	11556-11566	performing	_	_	_	_	
52-10	11567-11575	unlogged	_	_	_	_	
52-11	11576-11586	operations	_	_	_	_	
52-12	11587-11589	at	_	_	_	_	
52-13	11590-11593	the	_	_	_	_	
52-14	11594-11599	level	_	_	_	_	
52-15	11600-11602	of	_	_	_	_	
52-16	11603-11610	minimal	_	_	_	_	
52-17	11611-11614	and	_	_	_	_	
52-18	11615-11617	so	_	_	_	_	
52-19	11618-11620	on	_	_	_	_	
52-20	11620-11621	.	_	_	_	_	

#Text=The OS provides capabilities to ensure immediate writing of the data to nonvolatile memory.
53-1	11622-11625	The	_	_	_	_	
53-2	11626-11628	OS	_	_	_	_	
53-3	11629-11637	provides	_	_	_	_	
53-4	11638-11650	capabilities	_	_	_	_	
53-5	11651-11653	to	_	_	_	_	
53-6	11654-11660	ensure	_	_	_	_	
53-7	11661-11670	immediate	_	_	_	_	
53-8	11671-11678	writing	_	_	_	_	
53-9	11679-11681	of	_	_	_	_	
53-10	11682-11685	the	_	_	_	_	
53-11	11686-11690	data	_	_	_	_	
53-12	11691-11693	to	_	_	_	_	
53-13	11694-11705	nonvolatile	_	_	_	_	
53-14	11706-11712	memory	_	_	_	_	
53-15	11712-11713	.	_	_	_	_	

#Text=There are a few options, but they reduce to the two main: either after a write, the synchronization call is performed (fsync, fdatasync) or after opening a file (or writing to it) a special flag is set to indicate a need for synchronization or even for a direct write bypassing the OS cache.
54-1	11714-11719	There	_	_	_	_	
54-2	11720-11723	are	_	_	_	_	
54-3	11724-11725	a	_	_	_	_	
54-4	11726-11729	few	_	_	_	_	
54-5	11730-11737	options	_	_	_	_	
54-6	11737-11738	,	_	_	_	_	
54-7	11739-11742	but	_	_	_	_	
54-8	11743-11747	they	_	_	_	_	
54-9	11748-11754	reduce	_	_	_	_	
54-10	11755-11757	to	_	_	_	_	
54-11	11758-11761	the	_	_	_	_	
54-12	11762-11765	two	_	_	_	_	
54-13	11766-11770	main	_	_	_	_	
54-14	11770-11771	:	_	_	_	_	
54-15	11772-11778	either	_	_	_	_	
54-16	11779-11784	after	_	_	_	_	
54-17	11785-11786	a	_	_	_	_	
54-18	11787-11792	write	_	_	_	_	
54-19	11792-11793	,	_	_	_	_	
54-20	11794-11797	the	_	_	_	_	
54-21	11798-11813	synchronization	_	_	_	_	
54-22	11814-11818	call	_	_	_	_	
54-23	11819-11821	is	_	_	_	_	
54-24	11822-11831	performed	_	_	_	_	
54-25	11832-11833	(	_	_	_	_	
54-26	11833-11838	fsync	_	_	_	_	
54-27	11838-11839	,	_	_	_	_	
54-28	11840-11849	fdatasync	_	_	_	_	
54-29	11849-11850	)	_	_	_	_	
54-30	11851-11853	or	_	_	_	_	
54-31	11854-11859	after	_	_	_	_	
54-32	11860-11867	opening	_	_	_	_	
54-33	11868-11869	a	_	_	_	_	
54-34	11870-11874	file	_	_	_	_	
54-35	11875-11876	(	_	_	_	_	
54-36	11876-11878	or	_	_	_	_	
54-37	11879-11886	writing	_	_	_	_	
54-38	11887-11889	to	_	_	_	_	
54-39	11890-11892	it	_	_	_	_	
54-40	11892-11893	)	_	_	_	_	
54-41	11894-11895	a	_	_	_	_	
54-42	11896-11903	special	_	_	_	_	
54-43	11904-11908	flag	_	_	_	_	
54-44	11909-11911	is	_	_	_	_	
54-45	11912-11915	set	_	_	_	_	
54-46	11916-11918	to	_	_	_	_	
54-47	11919-11927	indicate	_	_	_	_	
54-48	11928-11929	a	_	_	_	_	
54-49	11930-11934	need	_	_	_	_	
54-50	11935-11938	for	_	_	_	_	
54-51	11939-11954	synchronization	_	_	_	_	
54-52	11955-11957	or	_	_	_	_	
54-53	11958-11962	even	_	_	_	_	
54-54	11963-11966	for	_	_	_	_	
54-55	11967-11968	a	_	_	_	_	
54-56	11969-11975	direct	_	_	_	_	
54-57	11976-11981	write	_	_	_	_	
54-58	11982-11991	bypassing	_	_	_	_	
54-59	11992-11995	the	_	_	_	_	
54-60	11996-11998	OS	_	_	_	_	
54-61	11999-12004	cache	_	_	_	_	
54-62	12004-12005	.	_	_	_	_	

#Text=As for WAL, the pg_test_fsync utility allows us to choose a method that best suits a particular OS and a particular file system, and this method is specified in the wal_sync_method parameter.
55-1	12006-12008	As	_	_	_	_	
55-2	12009-12012	for	_	_	_	_	
55-3	12013-12016	WAL	_	_	_	_	
55-4	12016-12017	,	_	_	_	_	
55-5	12018-12021	the	_	_	_	_	
55-6	12022-12035	pg_test_fsync	_	_	_	_	
55-7	12036-12043	utility	_	_	_	_	
55-8	12044-12050	allows	_	_	_	_	
55-9	12051-12053	us	_	_	_	_	
55-10	12054-12056	to	_	_	_	_	
55-11	12057-12063	choose	_	_	_	_	
55-12	12064-12065	a	_	_	_	_	
55-13	12066-12072	method	_	_	_	_	
55-14	12073-12077	that	_	_	_	_	
55-15	12078-12082	best	_	_	_	_	
55-16	12083-12088	suits	_	_	_	_	
55-17	12089-12090	a	_	_	_	_	
55-18	12091-12101	particular	_	_	_	_	
55-19	12102-12104	OS	_	_	_	_	
55-20	12105-12108	and	_	_	_	_	
55-21	12109-12110	a	_	_	_	_	
55-22	12111-12121	particular	_	_	_	_	
55-23	12122-12126	file	_	_	_	_	
55-24	12127-12133	system	_	_	_	_	
55-25	12133-12134	,	_	_	_	_	
55-26	12135-12138	and	_	_	_	_	
55-27	12139-12143	this	_	_	_	_	
55-28	12144-12150	method	_	_	_	_	
55-29	12151-12153	is	_	_	_	_	
55-30	12154-12163	specified	_	_	_	_	
55-31	12164-12166	in	_	_	_	_	
55-32	12167-12170	the	_	_	_	_	
55-33	12171-12186	wal_sync_method	_	_	_	_	
55-34	12187-12196	parameter	_	_	_	_	
55-35	12196-12197	.	_	_	_	_	

#Text=Normal files are synchronized using fsync.
56-1	12198-12204	Normal	_	_	_	_	
56-2	12205-12210	files	_	_	_	_	
56-3	12211-12214	are	_	_	_	_	
56-4	12215-12227	synchronized	_	_	_	_	
56-5	12228-12233	using	_	_	_	_	
56-6	12234-12239	fsync	_	_	_	_	
56-7	12239-12240	.	_	_	_	_	

#Text=A subtle point is that to choose the method, we need to take into account hardware characteristics.
57-1	12241-12242	A	_	_	_	_	
57-2	12243-12249	subtle	_	_	_	_	
57-3	12250-12255	point	_	_	_	_	
57-4	12256-12258	is	_	_	_	_	
57-5	12259-12263	that	_	_	_	_	
57-6	12264-12266	to	_	_	_	_	
57-7	12267-12273	choose	_	_	_	_	
57-8	12274-12277	the	_	_	_	_	
57-9	12278-12284	method	_	_	_	_	
57-10	12284-12285	,	_	_	_	_	
57-11	12286-12288	we	_	_	_	_	
57-12	12289-12293	need	_	_	_	_	
57-13	12294-12296	to	_	_	_	_	
57-14	12297-12301	take	_	_	_	_	
57-15	12302-12306	into	_	_	_	_	
57-16	12307-12314	account	_	_	_	_	
57-17	12315-12323	hardware	_	_	_	_	
57-18	12324-12339	characteristics	_	_	_	_	
57-19	12339-12340	.	_	_	_	_	

#Text=For example: if a controller employing a battery-backup unit (BBU) is used, there is no reason why we should avoid using the cache of the controller since the BBU enables saving the data in case of power outage.
58-1	12341-12344	For	_	_	_	_	
58-2	12345-12352	example	_	_	_	_	
58-3	12352-12353	:	_	_	_	_	
58-4	12354-12356	if	_	_	_	_	
58-5	12357-12358	a	_	_	_	_	
58-6	12359-12369	controller	_	_	_	_	
58-7	12370-12379	employing	_	_	_	_	
58-8	12380-12381	a	_	_	_	_	
58-9	12382-12396	battery-backup	_	_	_	_	
58-10	12397-12401	unit	_	_	_	_	
58-11	12402-12403	(	_	_	_	_	
58-12	12403-12406	BBU	_	_	_	_	
58-13	12406-12407	)	_	_	_	_	
58-14	12408-12410	is	_	_	_	_	
58-15	12411-12415	used	_	_	_	_	
58-16	12415-12416	,	_	_	_	_	
58-17	12417-12422	there	_	_	_	_	
58-18	12423-12425	is	_	_	_	_	
58-19	12426-12428	no	_	_	_	_	
58-20	12429-12435	reason	_	_	_	_	
58-21	12436-12439	why	_	_	_	_	
58-22	12440-12442	we	_	_	_	_	
58-23	12443-12449	should	_	_	_	_	
58-24	12450-12455	avoid	_	_	_	_	
58-25	12456-12461	using	_	_	_	_	
58-26	12462-12465	the	_	_	_	_	
58-27	12466-12471	cache	_	_	_	_	
58-28	12472-12474	of	_	_	_	_	
58-29	12475-12478	the	_	_	_	_	
58-30	12479-12489	controller	_	_	_	_	
58-31	12490-12495	since	_	_	_	_	
58-32	12496-12499	the	_	_	_	_	
58-33	12500-12503	BBU	_	_	_	_	
58-34	12504-12511	enables	_	_	_	_	
58-35	12512-12518	saving	_	_	_	_	
58-36	12519-12522	the	_	_	_	_	
58-37	12523-12527	data	_	_	_	_	
58-38	12528-12530	in	_	_	_	_	
58-39	12531-12535	case	_	_	_	_	
58-40	12536-12538	of	_	_	_	_	
58-41	12539-12544	power	_	_	_	_	
58-42	12545-12551	outage	_	_	_	_	
58-43	12551-12552	.	_	_	_	_	

#Text=The documentation provides a lot of context on this.
59-1	12553-12556	The	_	_	_	_	
59-2	12557-12570	documentation	_	_	_	_	
59-3	12571-12579	provides	_	_	_	_	
59-4	12580-12581	a	_	_	_	_	
59-5	12582-12585	lot	_	_	_	_	
59-6	12586-12588	of	_	_	_	_	
59-7	12589-12596	context	_	_	_	_	
59-8	12597-12599	on	_	_	_	_	
59-9	12600-12604	this	_	_	_	_	
59-10	12604-12605	.	_	_	_	_	

#Text=In any case, synchronization is expensive and performed at most as often as absolutely necessary (we will get back to this a bit later, when we discuss the performance).
60-1	12606-12608	In	_	_	_	_	
60-2	12609-12612	any	_	_	_	_	
60-3	12613-12617	case	_	_	_	_	
60-4	12617-12618	,	_	_	_	_	
60-5	12619-12634	synchronization	_	_	_	_	
60-6	12635-12637	is	_	_	_	_	
60-7	12638-12647	expensive	_	_	_	_	
60-8	12648-12651	and	_	_	_	_	
60-9	12652-12661	performed	_	_	_	_	
60-10	12662-12664	at	_	_	_	_	
60-11	12665-12669	most	_	_	_	_	
60-12	12670-12672	as	_	_	_	_	
60-13	12673-12678	often	_	_	_	_	
60-14	12679-12681	as	_	_	_	_	
60-15	12682-12692	absolutely	_	_	_	_	
60-16	12693-12702	necessary	_	_	_	_	
60-17	12703-12704	(	_	_	_	_	
60-18	12704-12706	we	_	_	_	_	
60-19	12707-12711	will	_	_	_	_	
60-20	12712-12715	get	_	_	_	_	
60-21	12716-12720	back	_	_	_	_	
60-22	12721-12723	to	_	_	_	_	
60-23	12724-12728	this	_	_	_	_	
60-24	12729-12730	a	_	_	_	_	
60-25	12731-12734	bit	_	_	_	_	
60-26	12735-12740	later	_	_	_	_	
60-27	12740-12741	,	_	_	_	_	
60-28	12742-12746	when	_	_	_	_	
60-29	12747-12749	we	_	_	_	_	
60-30	12750-12757	discuss	_	_	_	_	
60-31	12758-12761	the	_	_	_	_	
60-32	12762-12773	performance	_	_	_	_	
60-33	12773-12774	)	_	_	_	_	
60-34	12774-12775	.	_	_	_	_	

#Text=In general, you can turn off the synchronization (the fsync parameter is responsible for this), but in this case, you have to forget about the reliability of storage.
61-1	12776-12778	In	_	_	_	_	
61-2	12779-12786	general	_	_	_	_	
61-3	12786-12787	,	_	_	_	_	
61-4	12788-12791	you	_	_	_	_	
61-5	12792-12795	can	_	_	_	_	
61-6	12796-12800	turn	_	_	_	_	
61-7	12801-12804	off	_	_	_	_	
61-8	12805-12808	the	_	_	_	_	
61-9	12809-12824	synchronization	_	_	_	_	
61-10	12825-12826	(	_	_	_	_	
61-11	12826-12829	the	_	_	_	_	
61-12	12830-12835	fsync	_	_	_	_	
61-13	12836-12845	parameter	_	_	_	_	
61-14	12846-12848	is	_	_	_	_	
61-15	12849-12860	responsible	_	_	_	_	
61-16	12861-12864	for	_	_	_	_	
61-17	12865-12869	this	_	_	_	_	
61-18	12869-12870	)	_	_	_	_	
61-19	12870-12871	,	_	_	_	_	
61-20	12872-12875	but	_	_	_	_	
61-21	12876-12878	in	_	_	_	_	
61-22	12879-12883	this	_	_	_	_	
61-23	12884-12888	case	_	_	_	_	
61-24	12888-12889	,	_	_	_	_	
61-25	12890-12893	you	_	_	_	_	
61-26	12894-12898	have	_	_	_	_	
61-27	12899-12901	to	_	_	_	_	
61-28	12902-12908	forget	_	_	_	_	
61-29	12909-12914	about	_	_	_	_	
61-30	12915-12918	the	_	_	_	_	
61-31	12919-12930	reliability	_	_	_	_	
61-32	12931-12933	of	_	_	_	_	
61-33	12934-12941	storage	_	_	_	_	
61-34	12941-12942	.	_	_	_	_	

#Text=By turning fsync off you agree that the data can be irreversibly lost at any time.
62-1	12943-12945	By	_	_	_	_	
62-2	12946-12953	turning	_	_	_	_	
62-3	12954-12959	fsync	_	_	_	_	
62-4	12960-12963	off	_	_	_	_	
62-5	12964-12967	you	_	_	_	_	
62-6	12968-12973	agree	_	_	_	_	
62-7	12974-12978	that	_	_	_	_	
62-8	12979-12982	the	_	_	_	_	
62-9	12983-12987	data	_	_	_	_	
62-10	12988-12991	can	_	_	_	_	
62-11	12992-12994	be	_	_	_	_	
62-12	12995-13007	irreversibly	_	_	_	_	
62-13	13008-13012	lost	_	_	_	_	
62-14	13013-13015	at	_	_	_	_	
62-15	13016-13019	any	_	_	_	_	
62-16	13020-13024	time	_	_	_	_	
62-17	13024-13025	.	_	_	_	_	

#Text=Probably, the only reasonable use case for this parameter is a temporary increase of the performance when the data can be easily restored from a different source (like at the initial migration).
63-1	13026-13034	Probably	_	_	_	_	
63-2	13034-13035	,	_	_	_	_	
63-3	13036-13039	the	_	_	_	_	
63-4	13040-13044	only	_	_	_	_	
63-5	13045-13055	reasonable	_	_	_	_	
63-6	13056-13059	use	_	_	_	_	
63-7	13060-13064	case	_	_	_	_	
63-8	13065-13068	for	_	_	_	_	
63-9	13069-13073	this	_	_	_	_	
63-10	13074-13083	parameter	_	_	_	_	
63-11	13084-13086	is	_	_	_	_	
63-12	13087-13088	a	_	_	_	_	
63-13	13089-13098	temporary	_	_	_	_	
63-14	13099-13107	increase	_	_	_	_	
63-15	13108-13110	of	_	_	_	_	
63-16	13111-13114	the	_	_	_	_	
63-17	13115-13126	performance	_	_	_	_	
63-18	13127-13131	when	_	_	_	_	
63-19	13132-13135	the	_	_	_	_	
63-20	13136-13140	data	_	_	_	_	
63-21	13141-13144	can	_	_	_	_	
63-22	13145-13147	be	_	_	_	_	
63-23	13148-13154	easily	_	_	_	_	
63-24	13155-13163	restored	_	_	_	_	
63-25	13164-13168	from	_	_	_	_	
63-26	13169-13170	a	_	_	_	_	
63-27	13171-13180	different	_	_	_	_	
63-28	13181-13187	source	_	_	_	_	
63-29	13188-13189	(	_	_	_	_	
63-30	13189-13193	like	_	_	_	_	
63-31	13194-13196	at	_	_	_	_	
63-32	13197-13200	the	_	_	_	_	
63-33	13201-13208	initial	_	_	_	_	
63-34	13209-13218	migration	_	_	_	_	
63-35	13218-13219	)	_	_	_	_	
63-36	13219-13220	.	_	_	_	_	

#Text=Data corruption
#Text=Hardware is imperfect and the data can be corrupted in the storage when transmitted over interface cables, and so on.
64-1	13221-13225	Data	_	_	_	_	
64-2	13226-13236	corruption	_	_	_	_	
64-3	13237-13245	Hardware	_	_	_	_	
64-4	13246-13248	is	_	_	_	_	
64-5	13249-13258	imperfect	_	_	_	_	
64-6	13259-13262	and	_	_	_	_	
64-7	13263-13266	the	_	_	_	_	
64-8	13267-13271	data	_	_	_	_	
64-9	13272-13275	can	_	_	_	_	
64-10	13276-13278	be	_	_	_	_	
64-11	13279-13288	corrupted	_	_	_	_	
64-12	13289-13291	in	_	_	_	_	
64-13	13292-13295	the	_	_	_	_	
64-14	13296-13303	storage	_	_	_	_	
64-15	13304-13308	when	_	_	_	_	
64-16	13309-13320	transmitted	_	_	_	_	
64-17	13321-13325	over	_	_	_	_	
64-18	13326-13335	interface	_	_	_	_	
64-19	13336-13342	cables	_	_	_	_	
64-20	13342-13343	,	_	_	_	_	
64-21	13344-13347	and	_	_	_	_	
64-22	13348-13350	so	_	_	_	_	
64-23	13351-13353	on	_	_	_	_	
64-24	13353-13354	.	_	_	_	_	

#Text=Some of such errors are handled at the hardware level, but the others are not.
65-1	13355-13359	Some	_	_	_	_	
65-2	13360-13362	of	_	_	_	_	
65-3	13363-13367	such	_	_	_	_	
65-4	13368-13374	errors	_	_	_	_	
65-5	13375-13378	are	_	_	_	_	
65-6	13379-13386	handled	_	_	_	_	
65-7	13387-13389	at	_	_	_	_	
65-8	13390-13393	the	_	_	_	_	
65-9	13394-13402	hardware	_	_	_	_	
65-10	13403-13408	level	_	_	_	_	
65-11	13408-13409	,	_	_	_	_	
65-12	13410-13413	but	_	_	_	_	
65-13	13414-13417	the	_	_	_	_	
65-14	13418-13424	others	_	_	_	_	
65-15	13425-13428	are	_	_	_	_	
65-16	13429-13432	not	_	_	_	_	
65-17	13432-13433	.	_	_	_	_	

#Text=For quick detection of an issue, checksums are provided in WAL records.
66-1	13434-13437	For	_	_	_	_	
66-2	13438-13443	quick	_	_	_	_	
66-3	13444-13453	detection	_	_	_	_	
66-4	13454-13456	of	_	_	_	_	
66-5	13457-13459	an	_	_	_	_	
66-6	13460-13465	issue	_	_	_	_	
66-7	13465-13466	,	_	_	_	_	
66-8	13467-13476	checksums	_	_	_	_	
66-9	13477-13480	are	_	_	_	_	
66-10	13481-13489	provided	_	_	_	_	
66-11	13490-13492	in	_	_	_	_	
66-12	13493-13496	WAL	_	_	_	_	
66-13	13497-13504	records	_	_	_	_	
66-14	13504-13505	.	_	_	_	_	

#Text=Data pages can also be protected by checksums.
67-1	13506-13510	Data	_	_	_	_	
67-2	13511-13516	pages	_	_	_	_	
67-3	13517-13520	can	_	_	_	_	
67-4	13521-13525	also	_	_	_	_	
67-5	13526-13528	be	_	_	_	_	
67-6	13529-13538	protected	_	_	_	_	
67-7	13539-13541	by	_	_	_	_	
67-8	13542-13551	checksums	_	_	_	_	
67-9	13551-13552	.	_	_	_	_	

#Text=Earlier this could be done only at the cluster initialization, but in PostgreSQL 12 it is possible to turn the checksums on and off by means of the pg_checksums utility (but only when the server is shut down rather than «on the fly» so far).
68-1	13553-13560	Earlier	_	_	_	_	
68-2	13561-13565	this	_	_	_	_	
68-3	13566-13571	could	_	_	_	_	
68-4	13572-13574	be	_	_	_	_	
68-5	13575-13579	done	_	_	_	_	
68-6	13580-13584	only	_	_	_	_	
68-7	13585-13587	at	_	_	_	_	
68-8	13588-13591	the	_	_	_	_	
68-9	13592-13599	cluster	_	_	_	_	
68-10	13600-13614	initialization	_	_	_	_	
68-11	13614-13615	,	_	_	_	_	
68-12	13616-13619	but	_	_	_	_	
68-13	13620-13622	in	_	_	_	_	
68-14	13623-13633	PostgreSQL	_	_	_	_	
68-15	13633-13634	 	_	_	_	_	
68-16	13634-13636	12	_	_	_	_	
68-17	13637-13639	it	_	_	_	_	
68-18	13640-13642	is	_	_	_	_	
68-19	13643-13651	possible	_	_	_	_	
68-20	13652-13654	to	_	_	_	_	
68-21	13655-13659	turn	_	_	_	_	
68-22	13660-13663	the	_	_	_	_	
68-23	13664-13673	checksums	_	_	_	_	
68-24	13674-13676	on	_	_	_	_	
68-25	13677-13680	and	_	_	_	_	
68-26	13681-13684	off	_	_	_	_	
68-27	13685-13687	by	_	_	_	_	
68-28	13688-13693	means	_	_	_	_	
68-29	13694-13696	of	_	_	_	_	
68-30	13697-13700	the	_	_	_	_	
68-31	13701-13713	pg_checksums	_	_	_	_	
68-32	13714-13721	utility	_	_	_	_	
68-33	13722-13723	(	_	_	_	_	
68-34	13723-13726	but	_	_	_	_	
68-35	13727-13731	only	_	_	_	_	
68-36	13732-13736	when	_	_	_	_	
68-37	13737-13740	the	_	_	_	_	
68-38	13741-13747	server	_	_	_	_	
68-39	13748-13750	is	_	_	_	_	
68-40	13751-13755	shut	_	_	_	_	
68-41	13756-13760	down	_	_	_	_	
68-42	13761-13767	rather	_	_	_	_	
68-43	13768-13772	than	_	_	_	_	
68-44	13773-13774	«	_	_	_	_	
68-45	13774-13776	on	_	_	_	_	
68-46	13777-13780	the	_	_	_	_	
68-47	13781-13784	fly	_	_	_	_	
68-48	13784-13785	»	_	_	_	_	
68-49	13786-13788	so	_	_	_	_	
68-50	13789-13792	far	_	_	_	_	
68-51	13792-13793	)	_	_	_	_	
68-52	13793-13794	.	_	_	_	_	

#Text=In a production environment, checksums must be obligatory turned on regardless of the overhead costs of computing and verifying them.
69-1	13795-13797	In	_	_	_	_	
69-2	13798-13799	a	_	_	_	_	
69-3	13800-13810	production	_	_	_	_	
69-4	13811-13822	environment	_	_	_	_	
69-5	13822-13823	,	_	_	_	_	
69-6	13824-13833	checksums	_	_	_	_	
69-7	13834-13838	must	_	_	_	_	
69-8	13839-13841	be	_	_	_	_	
69-9	13842-13852	obligatory	_	_	_	_	
69-10	13853-13859	turned	_	_	_	_	
69-11	13860-13862	on	_	_	_	_	
69-12	13863-13873	regardless	_	_	_	_	
69-13	13874-13876	of	_	_	_	_	
69-14	13877-13880	the	_	_	_	_	
69-15	13881-13889	overhead	_	_	_	_	
69-16	13890-13895	costs	_	_	_	_	
69-17	13896-13898	of	_	_	_	_	
69-18	13899-13908	computing	_	_	_	_	
69-19	13909-13912	and	_	_	_	_	
69-20	13913-13922	verifying	_	_	_	_	
69-21	13923-13927	them	_	_	_	_	
69-22	13927-13928	.	_	_	_	_	

#Text=This reduces the probability of not detecting the corruption duly.
70-1	13929-13933	This	_	_	_	_	
70-2	13934-13941	reduces	_	_	_	_	
70-3	13942-13945	the	_	_	_	_	
70-4	13946-13957	probability	_	_	_	_	
70-5	13958-13960	of	_	_	_	_	
70-6	13961-13964	not	_	_	_	_	
70-7	13965-13974	detecting	_	_	_	_	
70-8	13975-13978	the	_	_	_	_	
70-9	13979-13989	corruption	_	_	_	_	
70-10	13990-13994	duly	_	_	_	_	
70-11	13994-13995	.	_	_	_	_	

#Text=It reduces, but not eliminates the probability.
71-1	13996-13998	It	_	_	_	_	
71-2	13999-14006	reduces	_	_	_	_	
71-3	14006-14007	,	_	_	_	_	
71-4	14008-14011	but	_	_	_	_	
71-5	14012-14015	not	_	_	_	_	
71-6	14016-14026	eliminates	_	_	_	_	
71-7	14027-14030	the	_	_	_	_	
71-8	14031-14042	probability	_	_	_	_	
71-9	14042-14043	.	_	_	_	_	

#Text=First, checksums are verified only when the page is accessed; therefore, the corruption may escape detection until the moment when it gets into all backups.
72-1	14044-14049	First	_	_	_	_	
72-2	14049-14050	,	_	_	_	_	
72-3	14051-14060	checksums	_	_	_	_	
72-4	14061-14064	are	_	_	_	_	
72-5	14065-14073	verified	_	_	_	_	
72-6	14074-14078	only	_	_	_	_	
72-7	14079-14083	when	_	_	_	_	
72-8	14084-14087	the	_	_	_	_	
72-9	14088-14092	page	_	_	_	_	
72-10	14093-14095	is	_	_	_	_	
72-11	14096-14104	accessed	_	_	_	_	
72-12	14104-14105	;	_	_	_	_	
72-13	14106-14115	therefore	_	_	_	_	
72-14	14115-14116	,	_	_	_	_	
72-15	14117-14120	the	_	_	_	_	
72-16	14121-14131	corruption	_	_	_	_	
72-17	14132-14135	may	_	_	_	_	
72-18	14136-14142	escape	_	_	_	_	
72-19	14143-14152	detection	_	_	_	_	
72-20	14153-14158	until	_	_	_	_	
72-21	14159-14162	the	_	_	_	_	
72-22	14163-14169	moment	_	_	_	_	
72-23	14170-14174	when	_	_	_	_	
72-24	14175-14177	it	_	_	_	_	
72-25	14178-14182	gets	_	_	_	_	
72-26	14183-14187	into	_	_	_	_	
72-27	14188-14191	all	_	_	_	_	
72-28	14192-14199	backups	_	_	_	_	
72-29	14199-14200	.	_	_	_	_	

#Text=It's for this reason that pg_probackup verifies the checksums of all the cluster pages during the data backup.
73-1	14201-14205	It's	_	_	_	_	
73-2	14206-14209	for	_	_	_	_	
73-3	14210-14214	this	_	_	_	_	
73-4	14215-14221	reason	_	_	_	_	
73-5	14222-14226	that	_	_	_	_	
73-6	14227-14239	pg_probackup	_	_	_	_	
73-7	14240-14248	verifies	_	_	_	_	
73-8	14249-14252	the	_	_	_	_	
73-9	14253-14262	checksums	_	_	_	_	
73-10	14263-14265	of	_	_	_	_	
73-11	14266-14269	all	_	_	_	_	
73-12	14270-14273	the	_	_	_	_	
73-13	14274-14281	cluster	_	_	_	_	
73-14	14282-14287	pages	_	_	_	_	
73-15	14288-14294	during	_	_	_	_	
73-16	14295-14298	the	_	_	_	_	
73-17	14299-14303	data	_	_	_	_	
73-18	14304-14310	backup	_	_	_	_	
73-19	14310-14311	.	_	_	_	_	

#Text=Second, a page filled with zeros is regarded as correct, so if the file system mistakenly «nullifies» a file, this can escape detection.
74-1	14312-14318	Second	_	_	_	_	
74-2	14318-14319	,	_	_	_	_	
74-3	14320-14321	a	_	_	_	_	
74-4	14322-14326	page	_	_	_	_	
74-5	14327-14333	filled	_	_	_	_	
74-6	14334-14338	with	_	_	_	_	
74-7	14339-14344	zeros	_	_	_	_	
74-8	14345-14347	is	_	_	_	_	
74-9	14348-14356	regarded	_	_	_	_	
74-10	14357-14359	as	_	_	_	_	
74-11	14360-14367	correct	_	_	_	_	
74-12	14367-14368	,	_	_	_	_	
74-13	14369-14371	so	_	_	_	_	
74-14	14372-14374	if	_	_	_	_	
74-15	14375-14378	the	_	_	_	_	
74-16	14379-14383	file	_	_	_	_	
74-17	14384-14390	system	_	_	_	_	
74-18	14391-14401	mistakenly	_	_	_	_	
74-19	14402-14403	«	_	_	_	_	
74-20	14403-14412	nullifies	_	_	_	_	
74-21	14412-14413	»	_	_	_	_	
74-22	14414-14415	a	_	_	_	_	
74-23	14416-14420	file	_	_	_	_	
74-24	14420-14421	,	_	_	_	_	
74-25	14422-14426	this	_	_	_	_	
74-26	14427-14430	can	_	_	_	_	
74-27	14431-14437	escape	_	_	_	_	
74-28	14438-14447	detection	_	_	_	_	
74-29	14447-14448	.	_	_	_	_	

#Text=Third, checksums protect only the main fork of the data.
75-1	14449-14454	Third	_	_	_	_	
75-2	14454-14455	,	_	_	_	_	
75-3	14456-14465	checksums	_	_	_	_	
75-4	14466-14473	protect	_	_	_	_	
75-5	14474-14478	only	_	_	_	_	
75-6	14479-14482	the	_	_	_	_	
75-7	14483-14487	main	_	_	_	_	
75-8	14488-14492	fork	_	_	_	_	
75-9	14493-14495	of	_	_	_	_	
75-10	14496-14499	the	_	_	_	_	
75-11	14500-14504	data	_	_	_	_	
75-12	14504-14505	.	_	_	_	_	

#Text=The other forks and the rest of files (for instance, transaction statuses XACT) are not protected at all.
76-1	14506-14509	The	_	_	_	_	
76-2	14510-14515	other	_	_	_	_	
76-3	14516-14521	forks	_	_	_	_	
76-4	14522-14525	and	_	_	_	_	
76-5	14526-14529	the	_	_	_	_	
76-6	14530-14534	rest	_	_	_	_	
76-7	14535-14537	of	_	_	_	_	
76-8	14538-14543	files	_	_	_	_	
76-9	14544-14545	(	_	_	_	_	
76-10	14545-14548	for	_	_	_	_	
76-11	14549-14557	instance	_	_	_	_	
76-12	14557-14558	,	_	_	_	_	
76-13	14559-14570	transaction	_	_	_	_	
76-14	14571-14579	statuses	_	_	_	_	
76-15	14580-14584	XACT	_	_	_	_	
76-16	14584-14585	)	_	_	_	_	
76-17	14586-14589	are	_	_	_	_	
76-18	14590-14593	not	_	_	_	_	
76-19	14594-14603	protected	_	_	_	_	
76-20	14604-14606	at	_	_	_	_	
76-21	14607-14610	all	_	_	_	_	
76-22	14610-14611	.	_	_	_	_	

#Text=Alas.
77-1	14612-14616	Alas	_	_	_	_	
77-2	14616-14617	.	_	_	_	_	

#Text=Let's see how it works.
78-1	14618-14623	Let's	_	_	_	_	
78-2	14624-14627	see	_	_	_	_	
78-3	14628-14631	how	_	_	_	_	
78-4	14632-14634	it	_	_	_	_	
78-5	14635-14640	works	_	_	_	_	
78-6	14640-14641	.	_	_	_	_	

#Text=First we make sure that checksums are turned on (note that in a package installed on Debian-like systems this is not the case by default):
#Text==> SHOW data_checksums;
#Text=data_checksums
#Text=----------------
#Text=(1 row)
#Text=The data_checksums parameter is read-only.
79-1	14642-14647	First	_	_	_	_	
79-2	14648-14650	we	_	_	_	_	
79-3	14651-14655	make	_	_	_	_	
79-4	14656-14660	sure	_	_	_	_	
79-5	14661-14665	that	_	_	_	_	
79-6	14666-14675	checksums	_	_	_	_	
79-7	14676-14679	are	_	_	_	_	
79-8	14680-14686	turned	_	_	_	_	
79-9	14687-14689	on	_	_	_	_	
79-10	14690-14691	(	_	_	_	_	
79-11	14691-14695	note	_	_	_	_	
79-12	14696-14700	that	_	_	_	_	
79-13	14701-14703	in	_	_	_	_	
79-14	14704-14705	a	_	_	_	_	
79-15	14706-14713	package	_	_	_	_	
79-16	14714-14723	installed	_	_	_	_	
79-17	14724-14726	on	_	_	_	_	
79-18	14727-14738	Debian-like	_	_	_	_	
79-19	14739-14746	systems	_	_	_	_	
79-20	14747-14751	this	_	_	_	_	
79-21	14752-14754	is	_	_	_	_	
79-22	14755-14758	not	_	_	_	_	
79-23	14759-14762	the	_	_	_	_	
79-24	14763-14767	case	_	_	_	_	
79-25	14768-14770	by	_	_	_	_	
79-26	14771-14778	default	_	_	_	_	
79-27	14778-14779	)	_	_	_	_	
79-28	14779-14780	:	_	_	_	_	
79-29	14781-14782	=	_	_	_	_	
79-30	14782-14783	>	_	_	_	_	
79-31	14784-14788	SHOW	_	_	_	_	
79-32	14789-14803	data_checksums	_	_	_	_	
79-33	14803-14804	;	_	_	_	_	
79-34	14805-14819	data_checksums	_	_	_	_	
79-35	14820-14821	-	_	_	_	_	
79-36	14821-14822	-	_	_	_	_	
79-37	14822-14823	-	_	_	_	_	
79-38	14823-14824	-	_	_	_	_	
79-39	14824-14825	-	_	_	_	_	
79-40	14825-14826	-	_	_	_	_	
79-41	14826-14827	-	_	_	_	_	
79-42	14827-14828	-	_	_	_	_	
79-43	14828-14829	-	_	_	_	_	
79-44	14829-14830	-	_	_	_	_	
79-45	14830-14831	-	_	_	_	_	
79-46	14831-14832	-	_	_	_	_	
79-47	14832-14833	-	_	_	_	_	
79-48	14833-14834	-	_	_	_	_	
79-49	14834-14835	-	_	_	_	_	
79-50	14835-14836	-	_	_	_	_	
79-51	14837-14838	(	_	_	_	_	
79-52	14838-14839	1	_	_	_	_	
79-53	14840-14843	row	_	_	_	_	
79-54	14843-14844	)	_	_	_	_	
79-55	14845-14848	The	_	_	_	_	
79-56	14849-14863	data_checksums	_	_	_	_	
79-57	14864-14873	parameter	_	_	_	_	
79-58	14874-14876	is	_	_	_	_	
79-59	14877-14886	read-only	_	_	_	_	
79-60	14886-14887	.	_	_	_	_	

#Text=This is the file where our table is located:
#Text==> SELECT pg_relation_filepath('wallevel');
#Text=pg_relation_filepath
#Text=----------------------
#Text=base/16386/24890
#Text=(1 row)
#Text=Let's shut down the server and change a few bytes on the zero page, for example: erase LSN of the last WAL record from the header.
#Text=student$ sudo pg_ctlcluster 11 main stop
#Text=postgres$ dd if=/dev/zero of=/var/lib/postgresql/11/main/base/16386/24890 oflag=dsync conv=notrunc bs=1 count=8
#Text=8+0 records in
#Text=8+0 records out
#Text=8 bytes copied, 0,0083022 s, 1,0 kB/s
#Text=In general, it was not needed to shut down the server.
80-1	14888-14892	This	_	_	_	_	
80-2	14893-14895	is	_	_	_	_	
80-3	14896-14899	the	_	_	_	_	
80-4	14900-14904	file	_	_	_	_	
80-5	14905-14910	where	_	_	_	_	
80-6	14911-14914	our	_	_	_	_	
80-7	14915-14920	table	_	_	_	_	
80-8	14921-14923	is	_	_	_	_	
80-9	14924-14931	located	_	_	_	_	
80-10	14931-14932	:	_	_	_	_	
80-11	14933-14934	=	_	_	_	_	
80-12	14934-14935	>	_	_	_	_	
80-13	14936-14942	SELECT	_	_	_	_	
80-14	14943-14963	pg_relation_filepath	_	_	_	_	
80-15	14963-14964	(	_	_	_	_	
80-16	14964-14965	'	_	_	_	_	
80-17	14965-14973	wallevel	_	_	_	_	
80-18	14973-14974	'	_	_	_	_	
80-19	14974-14975	)	_	_	_	_	
80-20	14975-14976	;	_	_	_	_	
80-21	14977-14997	pg_relation_filepath	_	_	_	_	
80-22	14998-14999	-	_	_	_	_	
80-23	14999-15000	-	_	_	_	_	
80-24	15000-15001	-	_	_	_	_	
80-25	15001-15002	-	_	_	_	_	
80-26	15002-15003	-	_	_	_	_	
80-27	15003-15004	-	_	_	_	_	
80-28	15004-15005	-	_	_	_	_	
80-29	15005-15006	-	_	_	_	_	
80-30	15006-15007	-	_	_	_	_	
80-31	15007-15008	-	_	_	_	_	
80-32	15008-15009	-	_	_	_	_	
80-33	15009-15010	-	_	_	_	_	
80-34	15010-15011	-	_	_	_	_	
80-35	15011-15012	-	_	_	_	_	
80-36	15012-15013	-	_	_	_	_	
80-37	15013-15014	-	_	_	_	_	
80-38	15014-15015	-	_	_	_	_	
80-39	15015-15016	-	_	_	_	_	
80-40	15016-15017	-	_	_	_	_	
80-41	15017-15018	-	_	_	_	_	
80-42	15018-15019	-	_	_	_	_	
80-43	15019-15020	-	_	_	_	_	
80-44	15021-15025	base	_	_	_	_	
80-45	15025-15026	/	_	_	_	_	
80-46	15026-15031	16386	_	_	_	_	
80-47	15031-15032	/	_	_	_	_	
80-48	15032-15037	24890	_	_	_	_	
80-49	15038-15039	(	_	_	_	_	
80-50	15039-15040	1	_	_	_	_	
80-51	15041-15044	row	_	_	_	_	
80-52	15044-15045	)	_	_	_	_	
80-53	15046-15051	Let's	_	_	_	_	
80-54	15052-15056	shut	_	_	_	_	
80-55	15057-15061	down	_	_	_	_	
80-56	15062-15065	the	_	_	_	_	
80-57	15066-15072	server	_	_	_	_	
80-58	15073-15076	and	_	_	_	_	
80-59	15077-15083	change	_	_	_	_	
80-60	15084-15085	a	_	_	_	_	
80-61	15086-15089	few	_	_	_	_	
80-62	15090-15095	bytes	_	_	_	_	
80-63	15096-15098	on	_	_	_	_	
80-64	15099-15102	the	_	_	_	_	
80-65	15103-15107	zero	_	_	_	_	
80-66	15108-15112	page	_	_	_	_	
80-67	15112-15113	,	_	_	_	_	
80-68	15114-15117	for	_	_	_	_	
80-69	15118-15125	example	_	_	_	_	
80-70	15125-15126	:	_	_	_	_	
80-71	15127-15132	erase	_	_	_	_	
80-72	15133-15136	LSN	_	_	_	_	
80-73	15137-15139	of	_	_	_	_	
80-74	15140-15143	the	_	_	_	_	
80-75	15144-15148	last	_	_	_	_	
80-76	15149-15152	WAL	_	_	_	_	
80-77	15153-15159	record	_	_	_	_	
80-78	15160-15164	from	_	_	_	_	
80-79	15165-15168	the	_	_	_	_	
80-80	15169-15175	header	_	_	_	_	
80-81	15175-15176	.	_	_	_	_	
80-82	15177-15184	student	_	_	_	_	
80-83	15184-15185	$	_	_	_	_	
80-84	15186-15190	sudo	_	_	_	_	
80-85	15191-15204	pg_ctlcluster	_	_	_	_	
80-86	15205-15207	11	_	_	_	_	
80-87	15208-15212	main	_	_	_	_	
80-88	15213-15217	stop	_	_	_	_	
80-89	15218-15226	postgres	_	_	_	_	
80-90	15226-15227	$	_	_	_	_	
80-91	15228-15230	dd	_	_	_	_	
80-92	15231-15233	if	_	_	_	_	
80-93	15233-15234	=	_	_	_	_	
80-94	15234-15235	/	_	_	_	_	
80-95	15235-15238	dev	_	_	_	_	
80-96	15238-15239	/	_	_	_	_	
80-97	15239-15243	zero	_	_	_	_	
80-98	15244-15246	of	_	_	_	_	
80-99	15246-15247	=	_	_	_	_	
80-100	15247-15248	/	_	_	_	_	
80-101	15248-15251	var	_	_	_	_	
80-102	15251-15252	/	_	_	_	_	
80-103	15252-15255	lib	_	_	_	_	
80-104	15255-15256	/	_	_	_	_	
80-105	15256-15266	postgresql	_	_	_	_	
80-106	15266-15267	/	_	_	_	_	
80-107	15267-15269	11	_	_	_	_	
80-108	15269-15270	/	_	_	_	_	
80-109	15270-15274	main	_	_	_	_	
80-110	15274-15275	/	_	_	_	_	
80-111	15275-15279	base	_	_	_	_	
80-112	15279-15280	/	_	_	_	_	
80-113	15280-15285	16386	_	_	_	_	
80-114	15285-15286	/	_	_	_	_	
80-115	15286-15291	24890	_	_	_	_	
80-116	15292-15297	oflag	_	_	_	_	
80-117	15297-15298	=	_	_	_	_	
80-118	15298-15303	dsync	_	_	_	_	
80-119	15304-15308	conv	_	_	_	_	
80-120	15308-15309	=	_	_	_	_	
80-121	15309-15316	notrunc	_	_	_	_	
80-122	15317-15319	bs	_	_	_	_	
80-123	15319-15320	=	_	_	_	_	
80-124	15320-15321	1	_	_	_	_	
80-125	15322-15327	count	_	_	_	_	
80-126	15327-15328	=	_	_	_	_	
80-127	15328-15329	8	_	_	_	_	
80-128	15330-15331	8	_	_	_	_	
80-129	15331-15332	+	_	_	_	_	
80-130	15332-15333	0	_	_	_	_	
80-131	15334-15341	records	_	_	_	_	
80-132	15342-15344	in	_	_	_	_	
80-133	15345-15346	8	_	_	_	_	
80-134	15346-15347	+	_	_	_	_	
80-135	15347-15348	0	_	_	_	_	
80-136	15349-15356	records	_	_	_	_	
80-137	15357-15360	out	_	_	_	_	
80-138	15361-15362	8	_	_	_	_	
80-139	15363-15368	bytes	_	_	_	_	
80-140	15369-15375	copied	_	_	_	_	
80-141	15375-15376	,	_	_	_	_	
80-142	15377-15386	0,0083022	_	_	_	_	
80-143	15387-15388	s	_	_	_	_	
80-144	15388-15389	,	_	_	_	_	
80-145	15390-15393	1,0	_	_	_	_	
80-146	15394-15396	kB	_	_	_	_	
80-147	15396-15397	/	_	_	_	_	
80-148	15397-15398	s	_	_	_	_	
80-149	15399-15401	In	_	_	_	_	
80-150	15402-15409	general	_	_	_	_	
80-151	15409-15410	,	_	_	_	_	
80-152	15411-15413	it	_	_	_	_	
80-153	15414-15417	was	_	_	_	_	
80-154	15418-15421	not	_	_	_	_	
80-155	15422-15428	needed	_	_	_	_	
80-156	15429-15431	to	_	_	_	_	
80-157	15432-15436	shut	_	_	_	_	
80-158	15437-15441	down	_	_	_	_	
80-159	15442-15445	the	_	_	_	_	
80-160	15446-15452	server	_	_	_	_	
80-161	15452-15453	.	_	_	_	_	

#Text=It is sufficient that the page is flushed to disk and evicted from the cache (otherwise, the server would continue working with the page in the cache).
81-1	15454-15456	It	_	_	_	_	
81-2	15457-15459	is	_	_	_	_	
81-3	15460-15470	sufficient	_	_	_	_	
81-4	15471-15475	that	_	_	_	_	
81-5	15476-15479	the	_	_	_	_	
81-6	15480-15484	page	_	_	_	_	
81-7	15485-15487	is	_	_	_	_	
81-8	15488-15495	flushed	_	_	_	_	
81-9	15496-15498	to	_	_	_	_	
81-10	15499-15503	disk	_	_	_	_	
81-11	15504-15507	and	_	_	_	_	
81-12	15508-15515	evicted	_	_	_	_	
81-13	15516-15520	from	_	_	_	_	
81-14	15521-15524	the	_	_	_	_	
81-15	15525-15530	cache	_	_	_	_	
81-16	15531-15532	(	_	_	_	_	
81-17	15532-15541	otherwise	_	_	_	_	
81-18	15541-15542	,	_	_	_	_	
81-19	15543-15546	the	_	_	_	_	
81-20	15547-15553	server	_	_	_	_	
81-21	15554-15559	would	_	_	_	_	
81-22	15560-15568	continue	_	_	_	_	
81-23	15569-15576	working	_	_	_	_	
81-24	15577-15581	with	_	_	_	_	
81-25	15582-15585	the	_	_	_	_	
81-26	15586-15590	page	_	_	_	_	
81-27	15591-15593	in	_	_	_	_	
81-28	15594-15597	the	_	_	_	_	
81-29	15598-15603	cache	_	_	_	_	
81-30	15603-15604	)	_	_	_	_	
81-31	15604-15605	.	_	_	_	_	

#Text=But this scenario is more complicated to reproduce.
82-1	15606-15609	But	_	_	_	_	
82-2	15610-15614	this	_	_	_	_	
82-3	15615-15623	scenario	_	_	_	_	
82-4	15624-15626	is	_	_	_	_	
82-5	15627-15631	more	_	_	_	_	
82-6	15632-15643	complicated	_	_	_	_	
82-7	15644-15646	to	_	_	_	_	
82-8	15647-15656	reproduce	_	_	_	_	
82-9	15656-15657	.	_	_	_	_	

#Text=Now we start the server and try to read the table.
#Text=student$ sudo pg_ctlcluster 11 main start
#Text==> SELECT * FROM wallevel;
#Text=WARNING:
#Text=page verification failed, calculated checksum 23222 but expected 50884
#Text=ERROR:
#Text=invalid page in block 0 of relation base/16386/24890
#Text=But what shall we do if it is impossible to restore the data from backup?
83-1	15658-15661	Now	_	_	_	_	
83-2	15662-15664	we	_	_	_	_	
83-3	15665-15670	start	_	_	_	_	
83-4	15671-15674	the	_	_	_	_	
83-5	15675-15681	server	_	_	_	_	
83-6	15682-15685	and	_	_	_	_	
83-7	15686-15689	try	_	_	_	_	
83-8	15690-15692	to	_	_	_	_	
83-9	15693-15697	read	_	_	_	_	
83-10	15698-15701	the	_	_	_	_	
83-11	15702-15707	table	_	_	_	_	
83-12	15707-15708	.	_	_	_	_	
83-13	15709-15716	student	_	_	_	_	
83-14	15716-15717	$	_	_	_	_	
83-15	15718-15722	sudo	_	_	_	_	
83-16	15723-15736	pg_ctlcluster	_	_	_	_	
83-17	15737-15739	11	_	_	_	_	
83-18	15740-15744	main	_	_	_	_	
83-19	15745-15750	start	_	_	_	_	
83-20	15751-15752	=	_	_	_	_	
83-21	15752-15753	>	_	_	_	_	
83-22	15754-15760	SELECT	_	_	_	_	
83-23	15761-15762	*	_	_	_	_	
83-24	15763-15767	FROM	_	_	_	_	
83-25	15768-15776	wallevel	_	_	_	_	
83-26	15776-15777	;	_	_	_	_	
83-27	15778-15785	WARNING	_	_	_	_	
83-28	15785-15786	:	_	_	_	_	
83-29	15787-15791	page	_	_	_	_	
83-30	15792-15804	verification	_	_	_	_	
83-31	15805-15811	failed	_	_	_	_	
83-32	15811-15812	,	_	_	_	_	
83-33	15813-15823	calculated	_	_	_	_	
83-34	15824-15832	checksum	_	_	_	_	
83-35	15833-15838	23222	_	_	_	_	
83-36	15839-15842	but	_	_	_	_	
83-37	15843-15851	expected	_	_	_	_	
83-38	15852-15857	50884	_	_	_	_	
83-39	15858-15863	ERROR	_	_	_	_	
83-40	15863-15864	:	_	_	_	_	
83-41	15865-15872	invalid	_	_	_	_	
83-42	15873-15877	page	_	_	_	_	
83-43	15878-15880	in	_	_	_	_	
83-44	15881-15886	block	_	_	_	_	
83-45	15887-15888	0	_	_	_	_	
83-46	15889-15891	of	_	_	_	_	
83-47	15892-15900	relation	_	_	_	_	
83-48	15901-15905	base	_	_	_	_	
83-49	15905-15906	/	_	_	_	_	
83-50	15906-15911	16386	_	_	_	_	
83-51	15911-15912	/	_	_	_	_	
83-52	15912-15917	24890	_	_	_	_	
83-53	15918-15921	But	_	_	_	_	
83-54	15922-15926	what	_	_	_	_	
83-55	15927-15932	shall	_	_	_	_	
83-56	15933-15935	we	_	_	_	_	
83-57	15936-15938	do	_	_	_	_	
83-58	15939-15941	if	_	_	_	_	
83-59	15942-15944	it	_	_	_	_	
83-60	15945-15947	is	_	_	_	_	
83-61	15948-15958	impossible	_	_	_	_	
83-62	15959-15961	to	_	_	_	_	
83-63	15962-15969	restore	_	_	_	_	
83-64	15970-15973	the	_	_	_	_	
83-65	15974-15978	data	_	_	_	_	
83-66	15979-15983	from	_	_	_	_	
83-67	15984-15990	backup	_	_	_	_	
83-68	15990-15991	?	_	_	_	_	

#Text=The ignore_checksum_failure parameter enables trying to read the table, of course, with a risk of getting corrupted data.
#Text==> SET ignore_checksum_failure = on;
#Text==> SELECT * FROM wallevel;
#Text=WARNING:
#Text=page verification failed, calculated checksum 23222 but expected 50884
#Text=---
#Text=(1 row)
#Text=Of course, everything is fine in this case since we hurt only the header rather than pure data.
84-1	15992-15995	The	_	_	_	_	
84-2	15996-16019	ignore_checksum_failure	_	_	_	_	
84-3	16020-16029	parameter	_	_	_	_	
84-4	16030-16037	enables	_	_	_	_	
84-5	16038-16044	trying	_	_	_	_	
84-6	16045-16047	to	_	_	_	_	
84-7	16048-16052	read	_	_	_	_	
84-8	16053-16056	the	_	_	_	_	
84-9	16057-16062	table	_	_	_	_	
84-10	16062-16063	,	_	_	_	_	
84-11	16064-16066	of	_	_	_	_	
84-12	16067-16073	course	_	_	_	_	
84-13	16073-16074	,	_	_	_	_	
84-14	16075-16079	with	_	_	_	_	
84-15	16080-16081	a	_	_	_	_	
84-16	16082-16086	risk	_	_	_	_	
84-17	16087-16089	of	_	_	_	_	
84-18	16090-16097	getting	_	_	_	_	
84-19	16098-16107	corrupted	_	_	_	_	
84-20	16108-16112	data	_	_	_	_	
84-21	16112-16113	.	_	_	_	_	
84-22	16114-16115	=	_	_	_	_	
84-23	16115-16116	>	_	_	_	_	
84-24	16117-16120	SET	_	_	_	_	
84-25	16121-16144	ignore_checksum_failure	_	_	_	_	
84-26	16145-16146	=	_	_	_	_	
84-27	16147-16149	on	_	_	_	_	
84-28	16149-16150	;	_	_	_	_	
84-29	16151-16152	=	_	_	_	_	
84-30	16152-16153	>	_	_	_	_	
84-31	16154-16160	SELECT	_	_	_	_	
84-32	16161-16162	*	_	_	_	_	
84-33	16163-16167	FROM	_	_	_	_	
84-34	16168-16176	wallevel	_	_	_	_	
84-35	16176-16177	;	_	_	_	_	
84-36	16178-16185	WARNING	_	_	_	_	
84-37	16185-16186	:	_	_	_	_	
84-38	16187-16191	page	_	_	_	_	
84-39	16192-16204	verification	_	_	_	_	
84-40	16205-16211	failed	_	_	_	_	
84-41	16211-16212	,	_	_	_	_	
84-42	16213-16223	calculated	_	_	_	_	
84-43	16224-16232	checksum	_	_	_	_	
84-44	16233-16238	23222	_	_	_	_	
84-45	16239-16242	but	_	_	_	_	
84-46	16243-16251	expected	_	_	_	_	
84-47	16252-16257	50884	_	_	_	_	
84-48	16258-16259	-	_	_	_	_	
84-49	16259-16260	-	_	_	_	_	
84-50	16260-16261	-	_	_	_	_	
84-51	16262-16263	(	_	_	_	_	
84-52	16263-16264	1	_	_	_	_	
84-53	16265-16268	row	_	_	_	_	
84-54	16268-16269	)	_	_	_	_	
84-55	16270-16272	Of	_	_	_	_	
84-56	16273-16279	course	_	_	_	_	
84-57	16279-16280	,	_	_	_	_	
84-58	16281-16291	everything	_	_	_	_	
84-59	16292-16294	is	_	_	_	_	
84-60	16295-16299	fine	_	_	_	_	
84-61	16300-16302	in	_	_	_	_	
84-62	16303-16307	this	_	_	_	_	
84-63	16308-16312	case	_	_	_	_	
84-64	16313-16318	since	_	_	_	_	
84-65	16319-16321	we	_	_	_	_	
84-66	16322-16326	hurt	_	_	_	_	
84-67	16327-16331	only	_	_	_	_	
84-68	16332-16335	the	_	_	_	_	
84-69	16336-16342	header	_	_	_	_	
84-70	16343-16349	rather	_	_	_	_	
84-71	16350-16354	than	_	_	_	_	
84-72	16355-16359	pure	_	_	_	_	
84-73	16360-16364	data	_	_	_	_	
84-74	16364-16365	.	_	_	_	_	

#Text=And there is one more point to note.
85-1	16366-16369	And	_	_	_	_	
85-2	16370-16375	there	_	_	_	_	
85-3	16376-16378	is	_	_	_	_	
85-4	16379-16382	one	_	_	_	_	
85-5	16383-16387	more	_	_	_	_	
85-6	16388-16393	point	_	_	_	_	
85-7	16394-16396	to	_	_	_	_	
85-8	16397-16401	note	_	_	_	_	
85-9	16401-16402	.	_	_	_	_	

#Text=When checksums are turned on, hint bits are WAL-logged (we discussed them earlier) since a change to any, even inessential, bit results in a change to the checksum.
86-1	16403-16407	When	_	_	_	_	
86-2	16408-16417	checksums	_	_	_	_	
86-3	16418-16421	are	_	_	_	_	
86-4	16422-16428	turned	_	_	_	_	
86-5	16429-16431	on	_	_	_	_	
86-6	16431-16432	,	_	_	_	_	
86-7	16433-16437	hint	_	_	_	_	
86-8	16438-16442	bits	_	_	_	_	
86-9	16443-16446	are	_	_	_	_	
86-10	16447-16457	WAL-logged	_	_	_	_	
86-11	16458-16459	(	_	_	_	_	
86-12	16459-16461	we	_	_	_	_	
86-13	16462-16471	discussed	_	_	_	_	
86-14	16472-16476	them	_	_	_	_	
86-15	16477-16484	earlier	_	_	_	_	
86-16	16484-16485	)	_	_	_	_	
86-17	16486-16491	since	_	_	_	_	
86-18	16492-16493	a	_	_	_	_	
86-19	16494-16500	change	_	_	_	_	
86-20	16501-16503	to	_	_	_	_	
86-21	16504-16507	any	_	_	_	_	
86-22	16507-16508	,	_	_	_	_	
86-23	16509-16513	even	_	_	_	_	
86-24	16514-16525	inessential	_	_	_	_	
86-25	16525-16526	,	_	_	_	_	
86-26	16527-16530	bit	_	_	_	_	
86-27	16531-16538	results	_	_	_	_	
86-28	16539-16541	in	_	_	_	_	
86-29	16542-16543	a	_	_	_	_	
86-30	16544-16550	change	_	_	_	_	
86-31	16551-16553	to	_	_	_	_	
86-32	16554-16557	the	_	_	_	_	
86-33	16558-16566	checksum	_	_	_	_	
86-34	16566-16567	.	_	_	_	_	

#Text=When checksums are turned off, the wal_log_hints parameter is responsible for WAL-logging hint bits.
87-1	16568-16572	When	_	_	_	_	
87-2	16573-16582	checksums	_	_	_	_	
87-3	16583-16586	are	_	_	_	_	
87-4	16587-16593	turned	_	_	_	_	
87-5	16594-16597	off	_	_	_	_	
87-6	16597-16598	,	_	_	_	_	
87-7	16599-16602	the	_	_	_	_	
87-8	16603-16616	wal_log_hints	_	_	_	_	
87-9	16617-16626	parameter	_	_	_	_	
87-10	16627-16629	is	_	_	_	_	
87-11	16630-16641	responsible	_	_	_	_	
87-12	16642-16645	for	_	_	_	_	
87-13	16646-16657	WAL-logging	_	_	_	_	
87-14	16658-16662	hint	_	_	_	_	
87-15	16663-16667	bits	_	_	_	_	
87-16	16667-16668	.	_	_	_	_	

#Text=Changes to hint bits are always logged as FPI (full page image), which pretty much increases the WAL size.
88-1	16669-16676	Changes	_	_	_	_	
88-2	16677-16679	to	_	_	_	_	
88-3	16680-16684	hint	_	_	_	_	
88-4	16685-16689	bits	_	_	_	_	
88-5	16690-16693	are	_	_	_	_	
88-6	16694-16700	always	_	_	_	_	
88-7	16701-16707	logged	_	_	_	_	
88-8	16708-16710	as	_	_	_	_	
88-9	16711-16714	FPI	_	_	_	_	
88-10	16715-16716	(	_	_	_	_	
88-11	16716-16720	full	_	_	_	_	
88-12	16721-16725	page	_	_	_	_	
88-13	16726-16731	image	_	_	_	_	
88-14	16731-16732	)	_	_	_	_	
88-15	16732-16733	,	_	_	_	_	
88-16	16734-16739	which	_	_	_	_	
88-17	16740-16746	pretty	_	_	_	_	
88-18	16747-16751	much	_	_	_	_	
88-19	16752-16761	increases	_	_	_	_	
88-20	16762-16765	the	_	_	_	_	
88-21	16766-16769	WAL	_	_	_	_	
88-22	16770-16774	size	_	_	_	_	
88-23	16774-16775	.	_	_	_	_	

#Text=In this case, it makes sense to use the wal_compression parameter to turn on compression of FPIs (this parameter was added in version 9.5).
89-1	16776-16778	In	_	_	_	_	
89-2	16779-16783	this	_	_	_	_	
89-3	16784-16788	case	_	_	_	_	
89-4	16788-16789	,	_	_	_	_	
89-5	16790-16792	it	_	_	_	_	
89-6	16793-16798	makes	_	_	_	_	
89-7	16799-16804	sense	_	_	_	_	
89-8	16805-16807	to	_	_	_	_	
89-9	16808-16811	use	_	_	_	_	
89-10	16812-16815	the	_	_	_	_	
89-11	16816-16831	wal_compression	_	_	_	_	
89-12	16832-16841	parameter	_	_	_	_	
89-13	16842-16844	to	_	_	_	_	
89-14	16845-16849	turn	_	_	_	_	
89-15	16850-16852	on	_	_	_	_	
89-16	16853-16864	compression	_	_	_	_	
89-17	16865-16867	of	_	_	_	_	
89-18	16868-16872	FPIs	_	_	_	_	
89-19	16873-16874	(	_	_	_	_	
89-20	16874-16878	this	_	_	_	_	
89-21	16879-16888	parameter	_	_	_	_	
89-22	16889-16892	was	_	_	_	_	
89-23	16893-16898	added	_	_	_	_	
89-24	16899-16901	in	_	_	_	_	
89-25	16902-16909	version	_	_	_	_	
89-26	16909-16910	 	_	_	_	_	
89-27	16910-16913	9.5	_	_	_	_	
89-28	16913-16914	)	_	_	_	_	
89-29	16914-16915	.	_	_	_	_	

#Text=We will look at specific figures a bit later.
90-1	16916-16918	We	_	_	_	_	
90-2	16919-16923	will	_	_	_	_	
90-3	16924-16928	look	_	_	_	_	
90-4	16929-16931	at	_	_	_	_	
90-5	16932-16940	specific	_	_	_	_	
90-6	16941-16948	figures	_	_	_	_	
90-7	16949-16950	a	_	_	_	_	
90-8	16951-16954	bit	_	_	_	_	
90-9	16955-16960	later	_	_	_	_	
90-10	16960-16961	.	_	_	_	_	

#Text=Atomicity of writing
#Text=And finally, there is an issue with the atomicity of writing.
91-1	16962-16971	Atomicity	_	_	_	_	
91-2	16972-16974	of	_	_	_	_	
91-3	16975-16982	writing	_	_	_	_	
91-4	16983-16986	And	_	_	_	_	
91-5	16987-16994	finally	_	_	_	_	
91-6	16994-16995	,	_	_	_	_	
91-7	16996-17001	there	_	_	_	_	
91-8	17002-17004	is	_	_	_	_	
91-9	17005-17007	an	_	_	_	_	
91-10	17008-17013	issue	_	_	_	_	
91-11	17014-17018	with	_	_	_	_	
91-12	17019-17022	the	_	_	_	_	
91-13	17023-17032	atomicity	_	_	_	_	
91-14	17033-17035	of	_	_	_	_	
91-15	17036-17043	writing	_	_	_	_	
91-16	17043-17044	.	_	_	_	_	

#Text=A database page occupies not less than 8 KB (it may be 16 or 32 KB), and at a low level, a write is done in blocks, which usually have smaller sizes (usually 512 bytes or 4 KB).
92-1	17045-17046	A	_	_	_	_	
92-2	17047-17055	database	_	_	_	_	
92-3	17056-17060	page	_	_	_	_	
92-4	17061-17069	occupies	_	_	_	_	
92-5	17070-17073	not	_	_	_	_	
92-6	17074-17078	less	_	_	_	_	
92-7	17079-17083	than	_	_	_	_	
92-8	17084-17085	8	_	_	_	_	
92-9	17085-17086	 	_	_	_	_	
92-10	17086-17088	KB	_	_	_	_	
92-11	17089-17090	(	_	_	_	_	
92-12	17090-17092	it	_	_	_	_	
92-13	17093-17096	may	_	_	_	_	
92-14	17097-17099	be	_	_	_	_	
92-15	17100-17102	16	_	_	_	_	
92-16	17103-17105	or	_	_	_	_	
92-17	17106-17108	32	_	_	_	_	
92-18	17108-17109	 	_	_	_	_	
92-19	17109-17111	KB	_	_	_	_	
92-20	17111-17112	)	_	_	_	_	
92-21	17112-17113	,	_	_	_	_	
92-22	17114-17117	and	_	_	_	_	
92-23	17118-17120	at	_	_	_	_	
92-24	17121-17122	a	_	_	_	_	
92-25	17123-17126	low	_	_	_	_	
92-26	17127-17132	level	_	_	_	_	
92-27	17132-17133	,	_	_	_	_	
92-28	17134-17135	a	_	_	_	_	
92-29	17136-17141	write	_	_	_	_	
92-30	17142-17144	is	_	_	_	_	
92-31	17145-17149	done	_	_	_	_	
92-32	17150-17152	in	_	_	_	_	
92-33	17153-17159	blocks	_	_	_	_	
92-34	17159-17160	,	_	_	_	_	
92-35	17161-17166	which	_	_	_	_	
92-36	17167-17174	usually	_	_	_	_	
92-37	17175-17179	have	_	_	_	_	
92-38	17180-17187	smaller	_	_	_	_	
92-39	17188-17193	sizes	_	_	_	_	
92-40	17194-17195	(	_	_	_	_	
92-41	17195-17202	usually	_	_	_	_	
92-42	17203-17206	512	_	_	_	_	
92-43	17206-17207	 	_	_	_	_	
92-44	17207-17212	bytes	_	_	_	_	
92-45	17213-17215	or	_	_	_	_	
92-46	17216-17217	4	_	_	_	_	
92-47	17217-17218	 	_	_	_	_	
92-48	17218-17220	KB	_	_	_	_	
92-49	17220-17221	)	_	_	_	_	
92-50	17221-17222	.	_	_	_	_	

#Text=Therefore, in case of a power outage, a data page can be written partially.
93-1	17223-17232	Therefore	_	_	_	_	
93-2	17232-17233	,	_	_	_	_	
93-3	17234-17236	in	_	_	_	_	
93-4	17237-17241	case	_	_	_	_	
93-5	17242-17244	of	_	_	_	_	
93-6	17245-17246	a	_	_	_	_	
93-7	17247-17252	power	_	_	_	_	
93-8	17253-17259	outage	_	_	_	_	
93-9	17259-17260	,	_	_	_	_	
93-10	17261-17262	a	_	_	_	_	
93-11	17263-17267	data	_	_	_	_	
93-12	17268-17272	page	_	_	_	_	
93-13	17273-17276	can	_	_	_	_	
93-14	17277-17279	be	_	_	_	_	
93-15	17280-17287	written	_	_	_	_	
93-16	17288-17297	partially	_	_	_	_	
93-17	17297-17298	.	_	_	_	_	

#Text=It's clear that during a recovery, it makes no sense to apply usual WAL records to such a page.
94-1	17299-17303	It's	_	_	_	_	
94-2	17304-17309	clear	_	_	_	_	
94-3	17310-17314	that	_	_	_	_	
94-4	17315-17321	during	_	_	_	_	
94-5	17322-17323	a	_	_	_	_	
94-6	17324-17332	recovery	_	_	_	_	
94-7	17332-17333	,	_	_	_	_	
94-8	17334-17336	it	_	_	_	_	
94-9	17337-17342	makes	_	_	_	_	
94-10	17343-17345	no	_	_	_	_	
94-11	17346-17351	sense	_	_	_	_	
94-12	17352-17354	to	_	_	_	_	
94-13	17355-17360	apply	_	_	_	_	
94-14	17361-17366	usual	_	_	_	_	
94-15	17367-17370	WAL	_	_	_	_	
94-16	17371-17378	records	_	_	_	_	
94-17	17379-17381	to	_	_	_	_	
94-18	17382-17386	such	_	_	_	_	
94-19	17387-17388	a	_	_	_	_	
94-20	17389-17393	page	_	_	_	_	
94-21	17393-17394	.	_	_	_	_	

#Text=To prevent this, PostgreSQL enables WAL-logging a full page image at the first change of the page since the beginning of a checkpoint cycle (the same image is also logged when hint bits change).
95-1	17395-17397	To	_	_	_	_	
95-2	17398-17405	prevent	_	_	_	_	
95-3	17406-17410	this	_	_	_	_	
95-4	17410-17411	,	_	_	_	_	
95-5	17412-17422	PostgreSQL	_	_	_	_	
95-6	17423-17430	enables	_	_	_	_	
95-7	17431-17442	WAL-logging	_	_	_	_	
95-8	17443-17444	a	_	_	_	_	
95-9	17445-17449	full	_	_	_	_	
95-10	17450-17454	page	_	_	_	_	
95-11	17455-17460	image	_	_	_	_	
95-12	17461-17463	at	_	_	_	_	
95-13	17464-17467	the	_	_	_	_	
95-14	17468-17473	first	_	_	_	_	
95-15	17474-17480	change	_	_	_	_	
95-16	17481-17483	of	_	_	_	_	
95-17	17484-17487	the	_	_	_	_	
95-18	17488-17492	page	_	_	_	_	
95-19	17493-17498	since	_	_	_	_	
95-20	17499-17502	the	_	_	_	_	
95-21	17503-17512	beginning	_	_	_	_	
95-22	17513-17515	of	_	_	_	_	
95-23	17516-17517	a	_	_	_	_	
95-24	17518-17528	checkpoint	_	_	_	_	
95-25	17529-17534	cycle	_	_	_	_	
95-26	17535-17536	(	_	_	_	_	
95-27	17536-17539	the	_	_	_	_	
95-28	17540-17544	same	_	_	_	_	
95-29	17545-17550	image	_	_	_	_	
95-30	17551-17553	is	_	_	_	_	
95-31	17554-17558	also	_	_	_	_	
95-32	17559-17565	logged	_	_	_	_	
95-33	17566-17570	when	_	_	_	_	
95-34	17571-17575	hint	_	_	_	_	
95-35	17576-17580	bits	_	_	_	_	
95-36	17581-17587	change	_	_	_	_	
95-37	17587-17588	)	_	_	_	_	
95-38	17588-17589	.	_	_	_	_	

#Text=The full_page_writes parameter controls this, and it is turned on by default.
96-1	17590-17593	The	_	_	_	_	
96-2	17594-17610	full_page_writes	_	_	_	_	
96-3	17611-17620	parameter	_	_	_	_	
96-4	17621-17629	controls	_	_	_	_	
96-5	17630-17634	this	_	_	_	_	
96-6	17634-17635	,	_	_	_	_	
96-7	17636-17639	and	_	_	_	_	
96-8	17640-17642	it	_	_	_	_	
96-9	17643-17645	is	_	_	_	_	
96-10	17646-17652	turned	_	_	_	_	
96-11	17653-17655	on	_	_	_	_	
96-12	17656-17658	by	_	_	_	_	
96-13	17659-17666	default	_	_	_	_	
96-14	17666-17667	.	_	_	_	_	

#Text=If a recovery process comes across an FPI in WAL, it writes the image to disk unconditionally (without LSN checking): the FPI is more trustworthy since it is protected by a checksum, like each WAL record.
97-1	17668-17670	If	_	_	_	_	
97-2	17671-17672	a	_	_	_	_	
97-3	17673-17681	recovery	_	_	_	_	
97-4	17682-17689	process	_	_	_	_	
97-5	17690-17695	comes	_	_	_	_	
97-6	17696-17702	across	_	_	_	_	
97-7	17703-17705	an	_	_	_	_	
97-8	17706-17709	FPI	_	_	_	_	
97-9	17710-17712	in	_	_	_	_	
97-10	17713-17716	WAL	_	_	_	_	
97-11	17716-17717	,	_	_	_	_	
97-12	17718-17720	it	_	_	_	_	
97-13	17721-17727	writes	_	_	_	_	
97-14	17728-17731	the	_	_	_	_	
97-15	17732-17737	image	_	_	_	_	
97-16	17738-17740	to	_	_	_	_	
97-17	17741-17745	disk	_	_	_	_	
97-18	17746-17761	unconditionally	_	_	_	_	
97-19	17762-17763	(	_	_	_	_	
97-20	17763-17770	without	_	_	_	_	
97-21	17771-17774	LSN	_	_	_	_	
97-22	17775-17783	checking	_	_	_	_	
97-23	17783-17784	)	_	_	_	_	
97-24	17784-17785	:	_	_	_	_	
97-25	17786-17789	the	_	_	_	_	
97-26	17790-17793	FPI	_	_	_	_	
97-27	17794-17796	is	_	_	_	_	
97-28	17797-17801	more	_	_	_	_	
97-29	17802-17813	trustworthy	_	_	_	_	
97-30	17814-17819	since	_	_	_	_	
97-31	17820-17822	it	_	_	_	_	
97-32	17823-17825	is	_	_	_	_	
97-33	17826-17835	protected	_	_	_	_	
97-34	17836-17838	by	_	_	_	_	
97-35	17839-17840	a	_	_	_	_	
97-36	17841-17849	checksum	_	_	_	_	
97-37	17849-17850	,	_	_	_	_	
97-38	17851-17855	like	_	_	_	_	
97-39	17856-17860	each	_	_	_	_	
97-40	17861-17864	WAL	_	_	_	_	
97-41	17865-17871	record	_	_	_	_	
97-42	17871-17872	.	_	_	_	_	

#Text=And it is this reliably correct image, which normal WAL records are applied to.
98-1	17873-17876	And	_	_	_	_	
98-2	17877-17879	it	_	_	_	_	
98-3	17880-17882	is	_	_	_	_	
98-4	17883-17887	this	_	_	_	_	
98-5	17888-17896	reliably	_	_	_	_	
98-6	17897-17904	correct	_	_	_	_	
98-7	17905-17910	image	_	_	_	_	
98-8	17910-17911	,	_	_	_	_	
98-9	17912-17917	which	_	_	_	_	
98-10	17918-17924	normal	_	_	_	_	
98-11	17925-17928	WAL	_	_	_	_	
98-12	17929-17936	records	_	_	_	_	
98-13	17937-17940	are	_	_	_	_	
98-14	17941-17948	applied	_	_	_	_	
98-15	17949-17951	to	_	_	_	_	
98-16	17951-17952	.	_	_	_	_	

#Text=Although in PostgreSQL, an FPI does not include free space (we discussed the block structure earlier), FPIs considerably increase the amount of WAL records generated.
99-1	17953-17961	Although	_	_	_	_	
99-2	17962-17964	in	_	_	_	_	
99-3	17965-17975	PostgreSQL	_	_	_	_	
99-4	17975-17976	,	_	_	_	_	
99-5	17977-17979	an	_	_	_	_	
99-6	17980-17983	FPI	_	_	_	_	
99-7	17984-17988	does	_	_	_	_	
99-8	17989-17992	not	_	_	_	_	
99-9	17993-18000	include	_	_	_	_	
99-10	18001-18005	free	_	_	_	_	
99-11	18006-18011	space	_	_	_	_	
99-12	18012-18013	(	_	_	_	_	
99-13	18013-18015	we	_	_	_	_	
99-14	18016-18025	discussed	_	_	_	_	
99-15	18026-18029	the	_	_	_	_	
99-16	18030-18035	block	_	_	_	_	
99-17	18036-18045	structure	_	_	_	_	
99-18	18046-18053	earlier	_	_	_	_	
99-19	18053-18054	)	_	_	_	_	
99-20	18054-18055	,	_	_	_	_	
99-21	18056-18060	FPIs	_	_	_	_	
99-22	18061-18073	considerably	_	_	_	_	
99-23	18074-18082	increase	_	_	_	_	
99-24	18083-18086	the	_	_	_	_	
99-25	18087-18093	amount	_	_	_	_	
99-26	18094-18096	of	_	_	_	_	
99-27	18097-18100	WAL	_	_	_	_	
99-28	18101-18108	records	_	_	_	_	
99-29	18109-18118	generated	_	_	_	_	
99-30	18118-18119	.	_	_	_	_	

#Text=As already mentioned, the situation can be improved by compression of FPIs (using the wal_compression parameter).
100-1	18120-18122	As	_	_	_	_	
100-2	18123-18130	already	_	_	_	_	
100-3	18131-18140	mentioned	_	_	_	_	
100-4	18140-18141	,	_	_	_	_	
100-5	18142-18145	the	_	_	_	_	
100-6	18146-18155	situation	_	_	_	_	
100-7	18156-18159	can	_	_	_	_	
100-8	18160-18162	be	_	_	_	_	
100-9	18163-18171	improved	_	_	_	_	
100-10	18172-18174	by	_	_	_	_	
100-11	18175-18186	compression	_	_	_	_	
100-12	18187-18189	of	_	_	_	_	
100-13	18190-18194	FPIs	_	_	_	_	
100-14	18195-18196	(	_	_	_	_	
100-15	18196-18201	using	_	_	_	_	
100-16	18202-18205	the	_	_	_	_	
100-17	18206-18221	wal_compression	_	_	_	_	
100-18	18222-18231	parameter	_	_	_	_	
100-19	18231-18232	)	_	_	_	_	
100-20	18232-18233	.	_	_	_	_	

#Text=To get an insight into changing the WAL size, let's conduct a simple experiment using the pgbench utility.
101-1	18234-18236	To	_	_	_	_	
101-2	18237-18240	get	_	_	_	_	
101-3	18241-18243	an	_	_	_	_	
101-4	18244-18251	insight	_	_	_	_	
101-5	18252-18256	into	_	_	_	_	
101-6	18257-18265	changing	_	_	_	_	
101-7	18266-18269	the	_	_	_	_	
101-8	18270-18273	WAL	_	_	_	_	
101-9	18274-18278	size	_	_	_	_	
101-10	18278-18279	,	_	_	_	_	
101-11	18280-18285	let's	_	_	_	_	
101-12	18286-18293	conduct	_	_	_	_	
101-13	18294-18295	a	_	_	_	_	
101-14	18296-18302	simple	_	_	_	_	
101-15	18303-18313	experiment	_	_	_	_	
101-16	18314-18319	using	_	_	_	_	
101-17	18320-18323	the	_	_	_	_	
101-18	18324-18331	pgbench	_	_	_	_	
101-19	18332-18339	utility	_	_	_	_	
101-20	18339-18340	.	_	_	_	_	

#Text=Performing the initialization:
#Text=student$ pgbench -i test
#Text=dropping old tables...
#Text=creating tables...
#Text=generating data...
#Text=100000 of 100000 tuples (100%) done (elapsed 0.15 s, remaining 0.00 s)
#Text=vacuuming...
#Text=creating primary keys...
#Text=done.
102-1	18341-18351	Performing	_	_	_	_	
102-2	18352-18355	the	_	_	_	_	
102-3	18356-18370	initialization	_	_	_	_	
102-4	18370-18371	:	_	_	_	_	
102-5	18372-18379	student	_	_	_	_	
102-6	18379-18380	$	_	_	_	_	
102-7	18381-18388	pgbench	_	_	_	_	
102-8	18389-18390	-	_	_	_	_	
102-9	18390-18391	i	_	_	_	_	
102-10	18392-18396	test	_	_	_	_	
102-11	18397-18405	dropping	_	_	_	_	
102-12	18406-18409	old	_	_	_	_	
102-13	18410-18416	tables	_	_	_	_	
102-14	18416-18417	.	_	_	_	_	
102-15	18417-18418	.	_	_	_	_	
102-16	18418-18419	.	_	_	_	_	
102-17	18420-18428	creating	_	_	_	_	
102-18	18429-18435	tables	_	_	_	_	
102-19	18435-18436	.	_	_	_	_	
102-20	18436-18437	.	_	_	_	_	
102-21	18437-18438	.	_	_	_	_	
102-22	18439-18449	generating	_	_	_	_	
102-23	18450-18454	data	_	_	_	_	
102-24	18454-18455	.	_	_	_	_	
102-25	18455-18456	.	_	_	_	_	
102-26	18456-18457	.	_	_	_	_	
102-27	18458-18464	100000	_	_	_	_	
102-28	18465-18467	of	_	_	_	_	
102-29	18468-18474	100000	_	_	_	_	
102-30	18475-18481	tuples	_	_	_	_	
102-31	18482-18483	(	_	_	_	_	
102-32	18483-18487	100%	_	_	_	_	
102-33	18487-18488	)	_	_	_	_	
102-34	18489-18493	done	_	_	_	_	
102-35	18494-18495	(	_	_	_	_	
102-36	18495-18502	elapsed	_	_	_	_	
102-37	18503-18507	0.15	_	_	_	_	
102-38	18508-18509	s	_	_	_	_	
102-39	18509-18510	,	_	_	_	_	
102-40	18511-18520	remaining	_	_	_	_	
102-41	18521-18525	0.00	_	_	_	_	
102-42	18526-18527	s	_	_	_	_	
102-43	18527-18528	)	_	_	_	_	
102-44	18529-18538	vacuuming	_	_	_	_	
102-45	18538-18539	.	_	_	_	_	
102-46	18539-18540	.	_	_	_	_	
102-47	18540-18541	.	_	_	_	_	
102-48	18542-18550	creating	_	_	_	_	
102-49	18551-18558	primary	_	_	_	_	
102-50	18559-18563	keys	_	_	_	_	
102-51	18563-18564	.	_	_	_	_	
102-52	18564-18565	.	_	_	_	_	
102-53	18565-18566	.	_	_	_	_	
102-54	18567-18571	done	_	_	_	_	
102-55	18571-18572	.	_	_	_	_	

#Text=The full_page_writes parameter is turned on:
#Text==> SHOW full_page_writes;
#Text=full_page_writes
#Text=------------------
#Text=(1 row)
#Text=Let's perform a checkpoint and immediately run a test for 30 seconds.
#Text==> CHECKPOINT;
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/38E04A08
#Text=(1 row)
#Text=student$ pgbench -T 30 test
#Text=starting vacuum...end.
#Text=transaction type: TPC-B (sort of)
#Text=scaling factor: 1
#Text=query mode: simple
#Text=number of clients: 1
#Text=number of threads: 1
#Text=duration: 30 s
#Text=number of transactions actually processed: 26851
#Text=latency average = 1.117 ms
#Text=tps = 895.006720 (including connections establishing)
#Text=tps = 895.095229 (excluding connections establishing)
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/3A69C478
#Text=(1 row)
#Text=Getting the size of WAL records:
#Text==> SELECT pg_size_pretty('0/3A69C478'::pg_lsn - '0/38E04A08'::pg_lsn);
#Text=pg_size_pretty
#Text=----------------
#Text=25 MB
#Text=(1 row)
#Text=Now let's turn off the full_page_writes parameter:
#Text==> ALTER SYSTEM SET full_page_writes = off;
#Text==> SELECT pg_reload_conf();
#Text=And we repeat the experiment.
#Text==> CHECKPOINT;
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/3A69C530
#Text=(1 row)
#Text=student$ pgbench -T 30 test
#Text=starting vacuum...end.
#Text=transaction type: TPC-B (sort of)
#Text=scaling factor: 1
#Text=query mode: simple
#Text=number of clients: 1
#Text=number of threads: 1
#Text=duration: 30 s
#Text=number of transactions actually processed: 27234
#Text=latency average = 1.102 ms
#Text=tps = 907.783080 (including connections establishing)
#Text=tps = 907.895326 (excluding connections establishing)
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/3BE87658
#Text=(1 row)
#Text=Getting the size of WAL records:
#Text==> SELECT pg_size_pretty('0/3BE87658'::pg_lsn - '0/3A69C530'::pg_lsn);
#Text=pg_size_pretty
#Text=----------------
#Text=24 MB
#Text=(1 row)
#Text=Yes, the size decreased, but not so much as we could expect.
103-1	18573-18576	The	_	_	_	_	
103-2	18577-18593	full_page_writes	_	_	_	_	
103-3	18594-18603	parameter	_	_	_	_	
103-4	18604-18606	is	_	_	_	_	
103-5	18607-18613	turned	_	_	_	_	
103-6	18614-18616	on	_	_	_	_	
103-7	18616-18617	:	_	_	_	_	
103-8	18618-18619	=	_	_	_	_	
103-9	18619-18620	>	_	_	_	_	
103-10	18621-18625	SHOW	_	_	_	_	
103-11	18626-18642	full_page_writes	_	_	_	_	
103-12	18642-18643	;	_	_	_	_	
103-13	18644-18660	full_page_writes	_	_	_	_	
103-14	18661-18662	-	_	_	_	_	
103-15	18662-18663	-	_	_	_	_	
103-16	18663-18664	-	_	_	_	_	
103-17	18664-18665	-	_	_	_	_	
103-18	18665-18666	-	_	_	_	_	
103-19	18666-18667	-	_	_	_	_	
103-20	18667-18668	-	_	_	_	_	
103-21	18668-18669	-	_	_	_	_	
103-22	18669-18670	-	_	_	_	_	
103-23	18670-18671	-	_	_	_	_	
103-24	18671-18672	-	_	_	_	_	
103-25	18672-18673	-	_	_	_	_	
103-26	18673-18674	-	_	_	_	_	
103-27	18674-18675	-	_	_	_	_	
103-28	18675-18676	-	_	_	_	_	
103-29	18676-18677	-	_	_	_	_	
103-30	18677-18678	-	_	_	_	_	
103-31	18678-18679	-	_	_	_	_	
103-32	18680-18681	(	_	_	_	_	
103-33	18681-18682	1	_	_	_	_	
103-34	18683-18686	row	_	_	_	_	
103-35	18686-18687	)	_	_	_	_	
103-36	18688-18693	Let's	_	_	_	_	
103-37	18694-18701	perform	_	_	_	_	
103-38	18702-18703	a	_	_	_	_	
103-39	18704-18714	checkpoint	_	_	_	_	
103-40	18715-18718	and	_	_	_	_	
103-41	18719-18730	immediately	_	_	_	_	
103-42	18731-18734	run	_	_	_	_	
103-43	18735-18736	a	_	_	_	_	
103-44	18737-18741	test	_	_	_	_	
103-45	18742-18745	for	_	_	_	_	
103-46	18746-18748	30	_	_	_	_	
103-47	18748-18749	 	_	_	_	_	
103-48	18749-18756	seconds	_	_	_	_	
103-49	18756-18757	.	_	_	_	_	
103-50	18758-18759	=	_	_	_	_	
103-51	18759-18760	>	_	_	_	_	
103-52	18761-18771	CHECKPOINT	_	_	_	_	
103-53	18771-18772	;	_	_	_	_	
103-54	18773-18774	=	_	_	_	_	
103-55	18774-18775	>	_	_	_	_	
103-56	18776-18782	SELECT	_	_	_	_	
103-57	18783-18808	pg_current_wal_insert_lsn	_	_	_	_	
103-58	18808-18809	(	_	_	_	_	
103-59	18809-18810	)	_	_	_	_	
103-60	18810-18811	;	_	_	_	_	
103-61	18812-18837	pg_current_wal_insert_lsn	_	_	_	_	
103-62	18838-18839	-	_	_	_	_	
103-63	18839-18840	-	_	_	_	_	
103-64	18840-18841	-	_	_	_	_	
103-65	18841-18842	-	_	_	_	_	
103-66	18842-18843	-	_	_	_	_	
103-67	18843-18844	-	_	_	_	_	
103-68	18844-18845	-	_	_	_	_	
103-69	18845-18846	-	_	_	_	_	
103-70	18846-18847	-	_	_	_	_	
103-71	18847-18848	-	_	_	_	_	
103-72	18848-18849	-	_	_	_	_	
103-73	18849-18850	-	_	_	_	_	
103-74	18850-18851	-	_	_	_	_	
103-75	18851-18852	-	_	_	_	_	
103-76	18852-18853	-	_	_	_	_	
103-77	18853-18854	-	_	_	_	_	
103-78	18854-18855	-	_	_	_	_	
103-79	18855-18856	-	_	_	_	_	
103-80	18856-18857	-	_	_	_	_	
103-81	18857-18858	-	_	_	_	_	
103-82	18858-18859	-	_	_	_	_	
103-83	18859-18860	-	_	_	_	_	
103-84	18860-18861	-	_	_	_	_	
103-85	18861-18862	-	_	_	_	_	
103-86	18862-18863	-	_	_	_	_	
103-87	18863-18864	-	_	_	_	_	
103-88	18864-18865	-	_	_	_	_	
103-89	18866-18867	0	_	_	_	_	
103-90	18867-18868	/	_	_	_	_	
103-91	18868-18876	38E04A08	_	_	_	_	
103-92	18877-18878	(	_	_	_	_	
103-93	18878-18879	1	_	_	_	_	
103-94	18880-18883	row	_	_	_	_	
103-95	18883-18884	)	_	_	_	_	
103-96	18885-18892	student	_	_	_	_	
103-97	18892-18893	$	_	_	_	_	
103-98	18894-18901	pgbench	_	_	_	_	
103-99	18902-18903	-	_	_	_	_	
103-100	18903-18904	T	_	_	_	_	
103-101	18905-18907	30	_	_	_	_	
103-102	18908-18912	test	_	_	_	_	
103-103	18913-18921	starting	_	_	_	_	
103-104	18922-18928	vacuum	_	_	_	_	
103-105	18928-18929	.	_	_	_	_	
103-106	18929-18930	.	_	_	_	_	
103-107	18930-18931	.	_	_	_	_	
103-108	18931-18934	end	_	_	_	_	
103-109	18934-18935	.	_	_	_	_	
103-110	18936-18947	transaction	_	_	_	_	
103-111	18948-18952	type	_	_	_	_	
103-112	18952-18953	:	_	_	_	_	
103-113	18954-18959	TPC-B	_	_	_	_	
103-114	18960-18961	(	_	_	_	_	
103-115	18961-18965	sort	_	_	_	_	
103-116	18966-18968	of	_	_	_	_	
103-117	18968-18969	)	_	_	_	_	
103-118	18970-18977	scaling	_	_	_	_	
103-119	18978-18984	factor	_	_	_	_	
103-120	18984-18985	:	_	_	_	_	
103-121	18986-18987	1	_	_	_	_	
103-122	18988-18993	query	_	_	_	_	
103-123	18994-18998	mode	_	_	_	_	
103-124	18998-18999	:	_	_	_	_	
103-125	19000-19006	simple	_	_	_	_	
103-126	19007-19013	number	_	_	_	_	
103-127	19014-19016	of	_	_	_	_	
103-128	19017-19024	clients	_	_	_	_	
103-129	19024-19025	:	_	_	_	_	
103-130	19026-19027	1	_	_	_	_	
103-131	19028-19034	number	_	_	_	_	
103-132	19035-19037	of	_	_	_	_	
103-133	19038-19045	threads	_	_	_	_	
103-134	19045-19046	:	_	_	_	_	
103-135	19047-19048	1	_	_	_	_	
103-136	19049-19057	duration	_	_	_	_	
103-137	19057-19058	:	_	_	_	_	
103-138	19059-19061	30	_	_	_	_	
103-139	19062-19063	s	_	_	_	_	
103-140	19064-19070	number	_	_	_	_	
103-141	19071-19073	of	_	_	_	_	
103-142	19074-19086	transactions	_	_	_	_	
103-143	19087-19095	actually	_	_	_	_	
103-144	19096-19105	processed	_	_	_	_	
103-145	19105-19106	:	_	_	_	_	
103-146	19107-19112	26851	_	_	_	_	
103-147	19113-19120	latency	_	_	_	_	
103-148	19121-19128	average	_	_	_	_	
103-149	19129-19130	=	_	_	_	_	
103-150	19131-19136	1.117	_	_	_	_	
103-151	19137-19139	ms	_	_	_	_	
103-152	19140-19143	tps	_	_	_	_	
103-153	19144-19145	=	_	_	_	_	
103-154	19146-19156	895.006720	_	_	_	_	
103-155	19157-19158	(	_	_	_	_	
103-156	19158-19167	including	_	_	_	_	
103-157	19168-19179	connections	_	_	_	_	
103-158	19180-19192	establishing	_	_	_	_	
103-159	19192-19193	)	_	_	_	_	
103-160	19194-19197	tps	_	_	_	_	
103-161	19198-19199	=	_	_	_	_	
103-162	19200-19210	895.095229	_	_	_	_	
103-163	19211-19212	(	_	_	_	_	
103-164	19212-19221	excluding	_	_	_	_	
103-165	19222-19233	connections	_	_	_	_	
103-166	19234-19246	establishing	_	_	_	_	
103-167	19246-19247	)	_	_	_	_	
103-168	19248-19249	=	_	_	_	_	
103-169	19249-19250	>	_	_	_	_	
103-170	19251-19257	SELECT	_	_	_	_	
103-171	19258-19283	pg_current_wal_insert_lsn	_	_	_	_	
103-172	19283-19284	(	_	_	_	_	
103-173	19284-19285	)	_	_	_	_	
103-174	19285-19286	;	_	_	_	_	
103-175	19287-19312	pg_current_wal_insert_lsn	_	_	_	_	
103-176	19313-19314	-	_	_	_	_	
103-177	19314-19315	-	_	_	_	_	
103-178	19315-19316	-	_	_	_	_	
103-179	19316-19317	-	_	_	_	_	
103-180	19317-19318	-	_	_	_	_	
103-181	19318-19319	-	_	_	_	_	
103-182	19319-19320	-	_	_	_	_	
103-183	19320-19321	-	_	_	_	_	
103-184	19321-19322	-	_	_	_	_	
103-185	19322-19323	-	_	_	_	_	
103-186	19323-19324	-	_	_	_	_	
103-187	19324-19325	-	_	_	_	_	
103-188	19325-19326	-	_	_	_	_	
103-189	19326-19327	-	_	_	_	_	
103-190	19327-19328	-	_	_	_	_	
103-191	19328-19329	-	_	_	_	_	
103-192	19329-19330	-	_	_	_	_	
103-193	19330-19331	-	_	_	_	_	
103-194	19331-19332	-	_	_	_	_	
103-195	19332-19333	-	_	_	_	_	
103-196	19333-19334	-	_	_	_	_	
103-197	19334-19335	-	_	_	_	_	
103-198	19335-19336	-	_	_	_	_	
103-199	19336-19337	-	_	_	_	_	
103-200	19337-19338	-	_	_	_	_	
103-201	19338-19339	-	_	_	_	_	
103-202	19339-19340	-	_	_	_	_	
103-203	19341-19342	0	_	_	_	_	
103-204	19342-19343	/	_	_	_	_	
103-205	19343-19351	3A69C478	_	_	_	_	
103-206	19352-19353	(	_	_	_	_	
103-207	19353-19354	1	_	_	_	_	
103-208	19355-19358	row	_	_	_	_	
103-209	19358-19359	)	_	_	_	_	
103-210	19360-19367	Getting	_	_	_	_	
103-211	19368-19371	the	_	_	_	_	
103-212	19372-19376	size	_	_	_	_	
103-213	19377-19379	of	_	_	_	_	
103-214	19380-19383	WAL	_	_	_	_	
103-215	19384-19391	records	_	_	_	_	
103-216	19391-19392	:	_	_	_	_	
103-217	19393-19394	=	_	_	_	_	
103-218	19394-19395	>	_	_	_	_	
103-219	19396-19402	SELECT	_	_	_	_	
103-220	19403-19417	pg_size_pretty	_	_	_	_	
103-221	19417-19418	(	_	_	_	_	
103-222	19418-19419	'	_	_	_	_	
103-223	19419-19420	0	_	_	_	_	
103-224	19420-19421	/	_	_	_	_	
103-225	19421-19429	3A69C478	_	_	_	_	
103-226	19429-19430	'	_	_	_	_	
103-227	19430-19431	:	_	_	_	_	
103-228	19431-19432	:	_	_	_	_	
103-229	19432-19438	pg_lsn	_	_	_	_	
103-230	19439-19440	-	_	_	_	_	
103-231	19441-19442	'	_	_	_	_	
103-232	19442-19443	0	_	_	_	_	
103-233	19443-19444	/	_	_	_	_	
103-234	19444-19452	38E04A08	_	_	_	_	
103-235	19452-19453	'	_	_	_	_	
103-236	19453-19454	:	_	_	_	_	
103-237	19454-19455	:	_	_	_	_	
103-238	19455-19461	pg_lsn	_	_	_	_	
103-239	19461-19462	)	_	_	_	_	
103-240	19462-19463	;	_	_	_	_	
103-241	19464-19478	pg_size_pretty	_	_	_	_	
103-242	19479-19480	-	_	_	_	_	
103-243	19480-19481	-	_	_	_	_	
103-244	19481-19482	-	_	_	_	_	
103-245	19482-19483	-	_	_	_	_	
103-246	19483-19484	-	_	_	_	_	
103-247	19484-19485	-	_	_	_	_	
103-248	19485-19486	-	_	_	_	_	
103-249	19486-19487	-	_	_	_	_	
103-250	19487-19488	-	_	_	_	_	
103-251	19488-19489	-	_	_	_	_	
103-252	19489-19490	-	_	_	_	_	
103-253	19490-19491	-	_	_	_	_	
103-254	19491-19492	-	_	_	_	_	
103-255	19492-19493	-	_	_	_	_	
103-256	19493-19494	-	_	_	_	_	
103-257	19494-19495	-	_	_	_	_	
103-258	19496-19498	25	_	_	_	_	
103-259	19499-19501	MB	_	_	_	_	
103-260	19502-19503	(	_	_	_	_	
103-261	19503-19504	1	_	_	_	_	
103-262	19505-19508	row	_	_	_	_	
103-263	19508-19509	)	_	_	_	_	
103-264	19510-19513	Now	_	_	_	_	
103-265	19514-19519	let's	_	_	_	_	
103-266	19520-19524	turn	_	_	_	_	
103-267	19525-19528	off	_	_	_	_	
103-268	19529-19532	the	_	_	_	_	
103-269	19533-19549	full_page_writes	_	_	_	_	
103-270	19550-19559	parameter	_	_	_	_	
103-271	19559-19560	:	_	_	_	_	
103-272	19561-19562	=	_	_	_	_	
103-273	19562-19563	>	_	_	_	_	
103-274	19564-19569	ALTER	_	_	_	_	
103-275	19570-19576	SYSTEM	_	_	_	_	
103-276	19577-19580	SET	_	_	_	_	
103-277	19581-19597	full_page_writes	_	_	_	_	
103-278	19598-19599	=	_	_	_	_	
103-279	19600-19603	off	_	_	_	_	
103-280	19603-19604	;	_	_	_	_	
103-281	19605-19606	=	_	_	_	_	
103-282	19606-19607	>	_	_	_	_	
103-283	19608-19614	SELECT	_	_	_	_	
103-284	19615-19629	pg_reload_conf	_	_	_	_	
103-285	19629-19630	(	_	_	_	_	
103-286	19630-19631	)	_	_	_	_	
103-287	19631-19632	;	_	_	_	_	
103-288	19633-19636	And	_	_	_	_	
103-289	19637-19639	we	_	_	_	_	
103-290	19640-19646	repeat	_	_	_	_	
103-291	19647-19650	the	_	_	_	_	
103-292	19651-19661	experiment	_	_	_	_	
103-293	19661-19662	.	_	_	_	_	
103-294	19663-19664	=	_	_	_	_	
103-295	19664-19665	>	_	_	_	_	
103-296	19666-19676	CHECKPOINT	_	_	_	_	
103-297	19676-19677	;	_	_	_	_	
103-298	19678-19679	=	_	_	_	_	
103-299	19679-19680	>	_	_	_	_	
103-300	19681-19687	SELECT	_	_	_	_	
103-301	19688-19713	pg_current_wal_insert_lsn	_	_	_	_	
103-302	19713-19714	(	_	_	_	_	
103-303	19714-19715	)	_	_	_	_	
103-304	19715-19716	;	_	_	_	_	
103-305	19717-19742	pg_current_wal_insert_lsn	_	_	_	_	
103-306	19743-19744	-	_	_	_	_	
103-307	19744-19745	-	_	_	_	_	
103-308	19745-19746	-	_	_	_	_	
103-309	19746-19747	-	_	_	_	_	
103-310	19747-19748	-	_	_	_	_	
103-311	19748-19749	-	_	_	_	_	
103-312	19749-19750	-	_	_	_	_	
103-313	19750-19751	-	_	_	_	_	
103-314	19751-19752	-	_	_	_	_	
103-315	19752-19753	-	_	_	_	_	
103-316	19753-19754	-	_	_	_	_	
103-317	19754-19755	-	_	_	_	_	
103-318	19755-19756	-	_	_	_	_	
103-319	19756-19757	-	_	_	_	_	
103-320	19757-19758	-	_	_	_	_	
103-321	19758-19759	-	_	_	_	_	
103-322	19759-19760	-	_	_	_	_	
103-323	19760-19761	-	_	_	_	_	
103-324	19761-19762	-	_	_	_	_	
103-325	19762-19763	-	_	_	_	_	
103-326	19763-19764	-	_	_	_	_	
103-327	19764-19765	-	_	_	_	_	
103-328	19765-19766	-	_	_	_	_	
103-329	19766-19767	-	_	_	_	_	
103-330	19767-19768	-	_	_	_	_	
103-331	19768-19769	-	_	_	_	_	
103-332	19769-19770	-	_	_	_	_	
103-333	19771-19772	0	_	_	_	_	
103-334	19772-19773	/	_	_	_	_	
103-335	19773-19781	3A69C530	_	_	_	_	
103-336	19782-19783	(	_	_	_	_	
103-337	19783-19784	1	_	_	_	_	
103-338	19785-19788	row	_	_	_	_	
103-339	19788-19789	)	_	_	_	_	
103-340	19790-19797	student	_	_	_	_	
103-341	19797-19798	$	_	_	_	_	
103-342	19799-19806	pgbench	_	_	_	_	
103-343	19807-19808	-	_	_	_	_	
103-344	19808-19809	T	_	_	_	_	
103-345	19810-19812	30	_	_	_	_	
103-346	19813-19817	test	_	_	_	_	
103-347	19818-19826	starting	_	_	_	_	
103-348	19827-19833	vacuum	_	_	_	_	
103-349	19833-19834	.	_	_	_	_	
103-350	19834-19835	.	_	_	_	_	
103-351	19835-19836	.	_	_	_	_	
103-352	19836-19839	end	_	_	_	_	
103-353	19839-19840	.	_	_	_	_	
103-354	19841-19852	transaction	_	_	_	_	
103-355	19853-19857	type	_	_	_	_	
103-356	19857-19858	:	_	_	_	_	
103-357	19859-19864	TPC-B	_	_	_	_	
103-358	19865-19866	(	_	_	_	_	
103-359	19866-19870	sort	_	_	_	_	
103-360	19871-19873	of	_	_	_	_	
103-361	19873-19874	)	_	_	_	_	
103-362	19875-19882	scaling	_	_	_	_	
103-363	19883-19889	factor	_	_	_	_	
103-364	19889-19890	:	_	_	_	_	
103-365	19891-19892	1	_	_	_	_	
103-366	19893-19898	query	_	_	_	_	
103-367	19899-19903	mode	_	_	_	_	
103-368	19903-19904	:	_	_	_	_	
103-369	19905-19911	simple	_	_	_	_	
103-370	19912-19918	number	_	_	_	_	
103-371	19919-19921	of	_	_	_	_	
103-372	19922-19929	clients	_	_	_	_	
103-373	19929-19930	:	_	_	_	_	
103-374	19931-19932	1	_	_	_	_	
103-375	19933-19939	number	_	_	_	_	
103-376	19940-19942	of	_	_	_	_	
103-377	19943-19950	threads	_	_	_	_	
103-378	19950-19951	:	_	_	_	_	
103-379	19952-19953	1	_	_	_	_	
103-380	19954-19962	duration	_	_	_	_	
103-381	19962-19963	:	_	_	_	_	
103-382	19964-19966	30	_	_	_	_	
103-383	19967-19968	s	_	_	_	_	
103-384	19969-19975	number	_	_	_	_	
103-385	19976-19978	of	_	_	_	_	
103-386	19979-19991	transactions	_	_	_	_	
103-387	19992-20000	actually	_	_	_	_	
103-388	20001-20010	processed	_	_	_	_	
103-389	20010-20011	:	_	_	_	_	
103-390	20012-20017	27234	_	_	_	_	
103-391	20018-20025	latency	_	_	_	_	
103-392	20026-20033	average	_	_	_	_	
103-393	20034-20035	=	_	_	_	_	
103-394	20036-20041	1.102	_	_	_	_	
103-395	20042-20044	ms	_	_	_	_	
103-396	20045-20048	tps	_	_	_	_	
103-397	20049-20050	=	_	_	_	_	
103-398	20051-20061	907.783080	_	_	_	_	
103-399	20062-20063	(	_	_	_	_	
103-400	20063-20072	including	_	_	_	_	
103-401	20073-20084	connections	_	_	_	_	
103-402	20085-20097	establishing	_	_	_	_	
103-403	20097-20098	)	_	_	_	_	
103-404	20099-20102	tps	_	_	_	_	
103-405	20103-20104	=	_	_	_	_	
103-406	20105-20115	907.895326	_	_	_	_	
103-407	20116-20117	(	_	_	_	_	
103-408	20117-20126	excluding	_	_	_	_	
103-409	20127-20138	connections	_	_	_	_	
103-410	20139-20151	establishing	_	_	_	_	
103-411	20151-20152	)	_	_	_	_	
103-412	20153-20154	=	_	_	_	_	
103-413	20154-20155	>	_	_	_	_	
103-414	20156-20162	SELECT	_	_	_	_	
103-415	20163-20188	pg_current_wal_insert_lsn	_	_	_	_	
103-416	20188-20189	(	_	_	_	_	
103-417	20189-20190	)	_	_	_	_	
103-418	20190-20191	;	_	_	_	_	
103-419	20192-20217	pg_current_wal_insert_lsn	_	_	_	_	
103-420	20218-20219	-	_	_	_	_	
103-421	20219-20220	-	_	_	_	_	
103-422	20220-20221	-	_	_	_	_	
103-423	20221-20222	-	_	_	_	_	
103-424	20222-20223	-	_	_	_	_	
103-425	20223-20224	-	_	_	_	_	
103-426	20224-20225	-	_	_	_	_	
103-427	20225-20226	-	_	_	_	_	
103-428	20226-20227	-	_	_	_	_	
103-429	20227-20228	-	_	_	_	_	
103-430	20228-20229	-	_	_	_	_	
103-431	20229-20230	-	_	_	_	_	
103-432	20230-20231	-	_	_	_	_	
103-433	20231-20232	-	_	_	_	_	
103-434	20232-20233	-	_	_	_	_	
103-435	20233-20234	-	_	_	_	_	
103-436	20234-20235	-	_	_	_	_	
103-437	20235-20236	-	_	_	_	_	
103-438	20236-20237	-	_	_	_	_	
103-439	20237-20238	-	_	_	_	_	
103-440	20238-20239	-	_	_	_	_	
103-441	20239-20240	-	_	_	_	_	
103-442	20240-20241	-	_	_	_	_	
103-443	20241-20242	-	_	_	_	_	
103-444	20242-20243	-	_	_	_	_	
103-445	20243-20244	-	_	_	_	_	
103-446	20244-20245	-	_	_	_	_	
103-447	20246-20247	0	_	_	_	_	
103-448	20247-20248	/	_	_	_	_	
103-449	20248-20256	3BE87658	_	_	_	_	
103-450	20257-20258	(	_	_	_	_	
103-451	20258-20259	1	_	_	_	_	
103-452	20260-20263	row	_	_	_	_	
103-453	20263-20264	)	_	_	_	_	
103-454	20265-20272	Getting	_	_	_	_	
103-455	20273-20276	the	_	_	_	_	
103-456	20277-20281	size	_	_	_	_	
103-457	20282-20284	of	_	_	_	_	
103-458	20285-20288	WAL	_	_	_	_	
103-459	20289-20296	records	_	_	_	_	
103-460	20296-20297	:	_	_	_	_	
103-461	20298-20299	=	_	_	_	_	
103-462	20299-20300	>	_	_	_	_	
103-463	20301-20307	SELECT	_	_	_	_	
103-464	20308-20322	pg_size_pretty	_	_	_	_	
103-465	20322-20323	(	_	_	_	_	
103-466	20323-20324	'	_	_	_	_	
103-467	20324-20325	0	_	_	_	_	
103-468	20325-20326	/	_	_	_	_	
103-469	20326-20334	3BE87658	_	_	_	_	
103-470	20334-20335	'	_	_	_	_	
103-471	20335-20336	:	_	_	_	_	
103-472	20336-20337	:	_	_	_	_	
103-473	20337-20343	pg_lsn	_	_	_	_	
103-474	20344-20345	-	_	_	_	_	
103-475	20346-20347	'	_	_	_	_	
103-476	20347-20348	0	_	_	_	_	
103-477	20348-20349	/	_	_	_	_	
103-478	20349-20357	3A69C530	_	_	_	_	
103-479	20357-20358	'	_	_	_	_	
103-480	20358-20359	:	_	_	_	_	
103-481	20359-20360	:	_	_	_	_	
103-482	20360-20366	pg_lsn	_	_	_	_	
103-483	20366-20367	)	_	_	_	_	
103-484	20367-20368	;	_	_	_	_	
103-485	20369-20383	pg_size_pretty	_	_	_	_	
103-486	20384-20385	-	_	_	_	_	
103-487	20385-20386	-	_	_	_	_	
103-488	20386-20387	-	_	_	_	_	
103-489	20387-20388	-	_	_	_	_	
103-490	20388-20389	-	_	_	_	_	
103-491	20389-20390	-	_	_	_	_	
103-492	20390-20391	-	_	_	_	_	
103-493	20391-20392	-	_	_	_	_	
103-494	20392-20393	-	_	_	_	_	
103-495	20393-20394	-	_	_	_	_	
103-496	20394-20395	-	_	_	_	_	
103-497	20395-20396	-	_	_	_	_	
103-498	20396-20397	-	_	_	_	_	
103-499	20397-20398	-	_	_	_	_	
103-500	20398-20399	-	_	_	_	_	
103-501	20399-20400	-	_	_	_	_	
103-502	20401-20403	24	_	_	_	_	
103-503	20404-20406	MB	_	_	_	_	
103-504	20407-20408	(	_	_	_	_	
103-505	20408-20409	1	_	_	_	_	
103-506	20410-20413	row	_	_	_	_	
103-507	20413-20414	)	_	_	_	_	
103-508	20415-20418	Yes	_	_	_	_	
103-509	20418-20419	,	_	_	_	_	
103-510	20420-20423	the	_	_	_	_	
103-511	20424-20428	size	_	_	_	_	
103-512	20429-20438	decreased	_	_	_	_	
103-513	20438-20439	,	_	_	_	_	
103-514	20440-20443	but	_	_	_	_	
103-515	20444-20447	not	_	_	_	_	
103-516	20448-20450	so	_	_	_	_	
103-517	20451-20455	much	_	_	_	_	
103-518	20456-20458	as	_	_	_	_	
103-519	20459-20461	we	_	_	_	_	
103-520	20462-20467	could	_	_	_	_	
103-521	20468-20474	expect	_	_	_	_	
103-522	20474-20475	.	_	_	_	_	

#Text=The thing is that the cluster was initialized with the checksums on data pages and therefore, FPIs have to be WAL-logged anyway when hint bits change.
104-1	20476-20479	The	_	_	_	_	
104-2	20480-20485	thing	_	_	_	_	
104-3	20486-20488	is	_	_	_	_	
104-4	20489-20493	that	_	_	_	_	
104-5	20494-20497	the	_	_	_	_	
104-6	20498-20505	cluster	_	_	_	_	
104-7	20506-20509	was	_	_	_	_	
104-8	20510-20521	initialized	_	_	_	_	
104-9	20522-20526	with	_	_	_	_	
104-10	20527-20530	the	_	_	_	_	
104-11	20531-20540	checksums	_	_	_	_	
104-12	20541-20543	on	_	_	_	_	
104-13	20544-20548	data	_	_	_	_	
104-14	20549-20554	pages	_	_	_	_	
104-15	20555-20558	and	_	_	_	_	
104-16	20559-20568	therefore	_	_	_	_	
104-17	20568-20569	,	_	_	_	_	
104-18	20570-20574	FPIs	_	_	_	_	
104-19	20575-20579	have	_	_	_	_	
104-20	20580-20582	to	_	_	_	_	
104-21	20583-20585	be	_	_	_	_	
104-22	20586-20596	WAL-logged	_	_	_	_	
104-23	20597-20603	anyway	_	_	_	_	
104-24	20604-20608	when	_	_	_	_	
104-25	20609-20613	hint	_	_	_	_	
104-26	20614-20618	bits	_	_	_	_	
104-27	20619-20625	change	_	_	_	_	
104-28	20625-20626	.	_	_	_	_	

#Text=These data (in the situation above) make up about half of the whole amount, which you can make sure of by looking at the statistics:
#Text=postgres$ /usr/lib/postgresql/11/bin/pg_waldump --stats -p /var/lib/postgresql/11/main/pg_wal -s 0/3A69C530 -e 0/3BE87658
#Text=Type
#Text=(%)
#Text=Record size
#Text=(%)
#Text=FPI size
#Text=(%)
#Text=----
#Text=---
#Text=-----------
#Text=---
#Text=--------
#Text=---
#Text=XLOG
#Text=1721 (
#Text=1,03)
#Text=84329 (
#Text=0,77)
#Text=13916104 (100,00)
#Text=Transaction
#Text=27235 ( 16,32)
#Text=926070 (
#Text=8,46)
#Text=0 (
#Text=0,00)
#Text=Storage
#Text=1 (
#Text=0,00)
#Text=42 (
#Text=0,00)
#Text=0 (
#Text=0,00)
#Text=CLOG
#Text=1 (
#Text=0,00)
#Text=30 (
#Text=0,00)
#Text=0 (
#Text=0,00)
#Text=Standby
#Text=4 (
#Text=0,00)
#Text=240 (
#Text=0,00)
#Text=0 (
#Text=0,00)
#Text=Heap2
#Text=27522 ( 16,49)
#Text=1726352 ( 15,76)
#Text=0 (
#Text=0,00)
#Text=Heap
#Text=109691 ( 65,71)
#Text=8169121 ( 74,59)
#Text=0 (
#Text=0,00)
#Text=Btree
#Text=756 (
#Text=0,45)
#Text=45380 (
#Text=0,41)
#Text=0 (
#Text=0,00)
#Text=--------
#Text=--------
#Text=--------
#Text=Total
#Text=166931
#Text=10951564 [44,04%]
#Text=13916104 [55,96%]
#Text=Zero rows are removed to make the table more compact.
105-1	20627-20632	These	_	_	_	_	
105-2	20633-20637	data	_	_	_	_	
105-3	20638-20639	(	_	_	_	_	
105-4	20639-20641	in	_	_	_	_	
105-5	20642-20645	the	_	_	_	_	
105-6	20646-20655	situation	_	_	_	_	
105-7	20656-20661	above	_	_	_	_	
105-8	20661-20662	)	_	_	_	_	
105-9	20663-20667	make	_	_	_	_	
105-10	20668-20670	up	_	_	_	_	
105-11	20671-20676	about	_	_	_	_	
105-12	20677-20681	half	_	_	_	_	
105-13	20682-20684	of	_	_	_	_	
105-14	20685-20688	the	_	_	_	_	
105-15	20689-20694	whole	_	_	_	_	
105-16	20695-20701	amount	_	_	_	_	
105-17	20701-20702	,	_	_	_	_	
105-18	20703-20708	which	_	_	_	_	
105-19	20709-20712	you	_	_	_	_	
105-20	20713-20716	can	_	_	_	_	
105-21	20717-20721	make	_	_	_	_	
105-22	20722-20726	sure	_	_	_	_	
105-23	20727-20729	of	_	_	_	_	
105-24	20730-20732	by	_	_	_	_	
105-25	20733-20740	looking	_	_	_	_	
105-26	20741-20743	at	_	_	_	_	
105-27	20744-20747	the	_	_	_	_	
105-28	20748-20758	statistics	_	_	_	_	
105-29	20758-20759	:	_	_	_	_	
105-30	20760-20768	postgres	_	_	_	_	
105-31	20768-20769	$	_	_	_	_	
105-32	20770-20771	/	_	_	_	_	
105-33	20771-20774	usr	_	_	_	_	
105-34	20774-20775	/	_	_	_	_	
105-35	20775-20778	lib	_	_	_	_	
105-36	20778-20779	/	_	_	_	_	
105-37	20779-20789	postgresql	_	_	_	_	
105-38	20789-20790	/	_	_	_	_	
105-39	20790-20792	11	_	_	_	_	
105-40	20792-20793	/	_	_	_	_	
105-41	20793-20796	bin	_	_	_	_	
105-42	20796-20797	/	_	_	_	_	
105-43	20797-20807	pg_waldump	_	_	_	_	
105-44	20808-20809	-	_	_	_	_	
105-45	20809-20810	-	_	_	_	_	
105-46	20810-20815	stats	_	_	_	_	
105-47	20816-20817	-	_	_	_	_	
105-48	20817-20818	p	_	_	_	_	
105-49	20819-20820	/	_	_	_	_	
105-50	20820-20823	var	_	_	_	_	
105-51	20823-20824	/	_	_	_	_	
105-52	20824-20827	lib	_	_	_	_	
105-53	20827-20828	/	_	_	_	_	
105-54	20828-20838	postgresql	_	_	_	_	
105-55	20838-20839	/	_	_	_	_	
105-56	20839-20841	11	_	_	_	_	
105-57	20841-20842	/	_	_	_	_	
105-58	20842-20846	main	_	_	_	_	
105-59	20846-20847	/	_	_	_	_	
105-60	20847-20853	pg_wal	_	_	_	_	
105-61	20854-20855	-	_	_	_	_	
105-62	20855-20856	s	_	_	_	_	
105-63	20857-20858	0	_	_	_	_	
105-64	20858-20859	/	_	_	_	_	
105-65	20859-20867	3A69C530	_	_	_	_	
105-66	20868-20869	-	_	_	_	_	
105-67	20869-20870	e	_	_	_	_	
105-68	20871-20872	0	_	_	_	_	
105-69	20872-20873	/	_	_	_	_	
105-70	20873-20881	3BE87658	_	_	_	_	
105-71	20882-20886	Type	_	_	_	_	
105-72	20887-20888	(	_	_	_	_	
105-73	20888-20889	%	_	_	_	_	
105-74	20889-20890	)	_	_	_	_	
105-75	20891-20897	Record	_	_	_	_	
105-76	20898-20902	size	_	_	_	_	
105-77	20903-20904	(	_	_	_	_	
105-78	20904-20905	%	_	_	_	_	
105-79	20905-20906	)	_	_	_	_	
105-80	20907-20910	FPI	_	_	_	_	
105-81	20911-20915	size	_	_	_	_	
105-82	20916-20917	(	_	_	_	_	
105-83	20917-20918	%	_	_	_	_	
105-84	20918-20919	)	_	_	_	_	
105-85	20920-20921	-	_	_	_	_	
105-86	20921-20922	-	_	_	_	_	
105-87	20922-20923	-	_	_	_	_	
105-88	20923-20924	-	_	_	_	_	
105-89	20925-20926	-	_	_	_	_	
105-90	20926-20927	-	_	_	_	_	
105-91	20927-20928	-	_	_	_	_	
105-92	20929-20930	-	_	_	_	_	
105-93	20930-20931	-	_	_	_	_	
105-94	20931-20932	-	_	_	_	_	
105-95	20932-20933	-	_	_	_	_	
105-96	20933-20934	-	_	_	_	_	
105-97	20934-20935	-	_	_	_	_	
105-98	20935-20936	-	_	_	_	_	
105-99	20936-20937	-	_	_	_	_	
105-100	20937-20938	-	_	_	_	_	
105-101	20938-20939	-	_	_	_	_	
105-102	20939-20940	-	_	_	_	_	
105-103	20941-20942	-	_	_	_	_	
105-104	20942-20943	-	_	_	_	_	
105-105	20943-20944	-	_	_	_	_	
105-106	20945-20946	-	_	_	_	_	
105-107	20946-20947	-	_	_	_	_	
105-108	20947-20948	-	_	_	_	_	
105-109	20948-20949	-	_	_	_	_	
105-110	20949-20950	-	_	_	_	_	
105-111	20950-20951	-	_	_	_	_	
105-112	20951-20952	-	_	_	_	_	
105-113	20952-20953	-	_	_	_	_	
105-114	20954-20955	-	_	_	_	_	
105-115	20955-20956	-	_	_	_	_	
105-116	20956-20957	-	_	_	_	_	
105-117	20958-20962	XLOG	_	_	_	_	
105-118	20963-20967	1721	_	_	_	_	
105-119	20968-20969	(	_	_	_	_	
105-120	20970-20974	1,03	_	_	_	_	
105-121	20974-20975	)	_	_	_	_	
105-122	20976-20981	84329	_	_	_	_	
105-123	20982-20983	(	_	_	_	_	
105-124	20984-20988	0,77	_	_	_	_	
105-125	20988-20989	)	_	_	_	_	
105-126	20990-20998	13916104	_	_	_	_	
105-127	20999-21000	(	_	_	_	_	
105-128	21000-21006	100,00	_	_	_	_	
105-129	21006-21007	)	_	_	_	_	
105-130	21008-21019	Transaction	_	_	_	_	
105-131	21020-21025	27235	_	_	_	_	
105-132	21026-21027	(	_	_	_	_	
105-133	21028-21033	16,32	_	_	_	_	
105-134	21033-21034	)	_	_	_	_	
105-135	21035-21041	926070	_	_	_	_	
105-136	21042-21043	(	_	_	_	_	
105-137	21044-21048	8,46	_	_	_	_	
105-138	21048-21049	)	_	_	_	_	
105-139	21050-21051	0	_	_	_	_	
105-140	21052-21053	(	_	_	_	_	
105-141	21054-21058	0,00	_	_	_	_	
105-142	21058-21059	)	_	_	_	_	
105-143	21060-21067	Storage	_	_	_	_	
105-144	21068-21069	1	_	_	_	_	
105-145	21070-21071	(	_	_	_	_	
105-146	21072-21076	0,00	_	_	_	_	
105-147	21076-21077	)	_	_	_	_	
105-148	21078-21080	42	_	_	_	_	
105-149	21081-21082	(	_	_	_	_	
105-150	21083-21087	0,00	_	_	_	_	
105-151	21087-21088	)	_	_	_	_	
105-152	21089-21090	0	_	_	_	_	
105-153	21091-21092	(	_	_	_	_	
105-154	21093-21097	0,00	_	_	_	_	
105-155	21097-21098	)	_	_	_	_	
105-156	21099-21103	CLOG	_	_	_	_	
105-157	21104-21105	1	_	_	_	_	
105-158	21106-21107	(	_	_	_	_	
105-159	21108-21112	0,00	_	_	_	_	
105-160	21112-21113	)	_	_	_	_	
105-161	21114-21116	30	_	_	_	_	
105-162	21117-21118	(	_	_	_	_	
105-163	21119-21123	0,00	_	_	_	_	
105-164	21123-21124	)	_	_	_	_	
105-165	21125-21126	0	_	_	_	_	
105-166	21127-21128	(	_	_	_	_	
105-167	21129-21133	0,00	_	_	_	_	
105-168	21133-21134	)	_	_	_	_	
105-169	21135-21142	Standby	_	_	_	_	
105-170	21143-21144	4	_	_	_	_	
105-171	21145-21146	(	_	_	_	_	
105-172	21147-21151	0,00	_	_	_	_	
105-173	21151-21152	)	_	_	_	_	
105-174	21153-21156	240	_	_	_	_	
105-175	21157-21158	(	_	_	_	_	
105-176	21159-21163	0,00	_	_	_	_	
105-177	21163-21164	)	_	_	_	_	
105-178	21165-21166	0	_	_	_	_	
105-179	21167-21168	(	_	_	_	_	
105-180	21169-21173	0,00	_	_	_	_	
105-181	21173-21174	)	_	_	_	_	
105-182	21175-21180	Heap2	_	_	_	_	
105-183	21181-21186	27522	_	_	_	_	
105-184	21187-21188	(	_	_	_	_	
105-185	21189-21194	16,49	_	_	_	_	
105-186	21194-21195	)	_	_	_	_	
105-187	21196-21203	1726352	_	_	_	_	
105-188	21204-21205	(	_	_	_	_	
105-189	21206-21211	15,76	_	_	_	_	
105-190	21211-21212	)	_	_	_	_	
105-191	21213-21214	0	_	_	_	_	
105-192	21215-21216	(	_	_	_	_	
105-193	21217-21221	0,00	_	_	_	_	
105-194	21221-21222	)	_	_	_	_	
105-195	21223-21227	Heap	_	_	_	_	
105-196	21228-21234	109691	_	_	_	_	
105-197	21235-21236	(	_	_	_	_	
105-198	21237-21242	65,71	_	_	_	_	
105-199	21242-21243	)	_	_	_	_	
105-200	21244-21251	8169121	_	_	_	_	
105-201	21252-21253	(	_	_	_	_	
105-202	21254-21259	74,59	_	_	_	_	
105-203	21259-21260	)	_	_	_	_	
105-204	21261-21262	0	_	_	_	_	
105-205	21263-21264	(	_	_	_	_	
105-206	21265-21269	0,00	_	_	_	_	
105-207	21269-21270	)	_	_	_	_	
105-208	21271-21276	Btree	_	_	_	_	
105-209	21277-21280	756	_	_	_	_	
105-210	21281-21282	(	_	_	_	_	
105-211	21283-21287	0,45	_	_	_	_	
105-212	21287-21288	)	_	_	_	_	
105-213	21289-21294	45380	_	_	_	_	
105-214	21295-21296	(	_	_	_	_	
105-215	21297-21301	0,41	_	_	_	_	
105-216	21301-21302	)	_	_	_	_	
105-217	21303-21304	0	_	_	_	_	
105-218	21305-21306	(	_	_	_	_	
105-219	21307-21311	0,00	_	_	_	_	
105-220	21311-21312	)	_	_	_	_	
105-221	21313-21314	-	_	_	_	_	
105-222	21314-21315	-	_	_	_	_	
105-223	21315-21316	-	_	_	_	_	
105-224	21316-21317	-	_	_	_	_	
105-225	21317-21318	-	_	_	_	_	
105-226	21318-21319	-	_	_	_	_	
105-227	21319-21320	-	_	_	_	_	
105-228	21320-21321	-	_	_	_	_	
105-229	21322-21323	-	_	_	_	_	
105-230	21323-21324	-	_	_	_	_	
105-231	21324-21325	-	_	_	_	_	
105-232	21325-21326	-	_	_	_	_	
105-233	21326-21327	-	_	_	_	_	
105-234	21327-21328	-	_	_	_	_	
105-235	21328-21329	-	_	_	_	_	
105-236	21329-21330	-	_	_	_	_	
105-237	21331-21332	-	_	_	_	_	
105-238	21332-21333	-	_	_	_	_	
105-239	21333-21334	-	_	_	_	_	
105-240	21334-21335	-	_	_	_	_	
105-241	21335-21336	-	_	_	_	_	
105-242	21336-21337	-	_	_	_	_	
105-243	21337-21338	-	_	_	_	_	
105-244	21338-21339	-	_	_	_	_	
105-245	21340-21345	Total	_	_	_	_	
105-246	21346-21352	166931	_	_	_	_	
105-247	21353-21361	10951564	_	_	_	_	
105-248	21362-21363	[	_	_	_	_	
105-249	21363-21369	44,04%	_	_	_	_	
105-250	21369-21370	]	_	_	_	_	
105-251	21371-21379	13916104	_	_	_	_	
105-252	21380-21381	[	_	_	_	_	
105-253	21381-21387	55,96%	_	_	_	_	
105-254	21387-21388	]	_	_	_	_	
105-255	21389-21393	Zero	_	_	_	_	
105-256	21394-21398	rows	_	_	_	_	
105-257	21399-21402	are	_	_	_	_	
105-258	21403-21410	removed	_	_	_	_	
105-259	21411-21413	to	_	_	_	_	
105-260	21414-21418	make	_	_	_	_	
105-261	21419-21422	the	_	_	_	_	
105-262	21423-21428	table	_	_	_	_	
105-263	21429-21433	more	_	_	_	_	
105-264	21434-21441	compact	_	_	_	_	
105-265	21441-21442	.	_	_	_	_	

#Text=Pay attention to the summary row (Total) and compare the size of full images (FPI size) with he size of normal records (Record size).
106-1	21443-21446	Pay	_	_	_	_	
106-2	21447-21456	attention	_	_	_	_	
106-3	21457-21459	to	_	_	_	_	
106-4	21460-21463	the	_	_	_	_	
106-5	21464-21471	summary	_	_	_	_	
106-6	21472-21475	row	_	_	_	_	
106-7	21476-21477	(	_	_	_	_	
106-8	21477-21482	Total	_	_	_	_	
106-9	21482-21483	)	_	_	_	_	
106-10	21484-21487	and	_	_	_	_	
106-11	21488-21495	compare	_	_	_	_	
106-12	21496-21499	the	_	_	_	_	
106-13	21500-21504	size	_	_	_	_	
106-14	21505-21507	of	_	_	_	_	
106-15	21508-21512	full	_	_	_	_	
106-16	21513-21519	images	_	_	_	_	
106-17	21520-21521	(	_	_	_	_	
106-18	21521-21524	FPI	_	_	_	_	
106-19	21525-21529	size	_	_	_	_	
106-20	21529-21530	)	_	_	_	_	
106-21	21531-21535	with	_	_	_	_	
106-22	21536-21538	he	_	_	_	_	
106-23	21539-21543	size	_	_	_	_	
106-24	21544-21546	of	_	_	_	_	
106-25	21547-21553	normal	_	_	_	_	
106-26	21554-21561	records	_	_	_	_	
106-27	21562-21563	(	_	_	_	_	
106-28	21563-21569	Record	_	_	_	_	
106-29	21570-21574	size	_	_	_	_	
106-30	21574-21575	)	_	_	_	_	
106-31	21575-21576	.	_	_	_	_	

#Text=The full_page_writes parameter can be turned off only if the file system and hardware themselves ensure the automicity of writes.
107-1	21577-21580	The	_	_	_	_	
107-2	21581-21597	full_page_writes	_	_	_	_	
107-3	21598-21607	parameter	_	_	_	_	
107-4	21608-21611	can	_	_	_	_	
107-5	21612-21614	be	_	_	_	_	
107-6	21615-21621	turned	_	_	_	_	
107-7	21622-21625	off	_	_	_	_	
107-8	21626-21630	only	_	_	_	_	
107-9	21631-21633	if	_	_	_	_	
107-10	21634-21637	the	_	_	_	_	
107-11	21638-21642	file	_	_	_	_	
107-12	21643-21649	system	_	_	_	_	
107-13	21650-21653	and	_	_	_	_	
107-14	21654-21662	hardware	_	_	_	_	
107-15	21663-21673	themselves	_	_	_	_	
107-16	21674-21680	ensure	_	_	_	_	
107-17	21681-21684	the	_	_	_	_	
107-18	21685-21695	automicity	_	_	_	_	
107-19	21696-21698	of	_	_	_	_	
107-20	21699-21705	writes	_	_	_	_	
107-21	21705-21706	.	_	_	_	_	

#Text=But, as we can see, there isn't much sense in it (provided checksums are turned on).
108-1	21707-21710	But	_	_	_	_	
108-2	21710-21711	,	_	_	_	_	
108-3	21712-21714	as	_	_	_	_	
108-4	21715-21717	we	_	_	_	_	
108-5	21718-21721	can	_	_	_	_	
108-6	21722-21725	see	_	_	_	_	
108-7	21725-21726	,	_	_	_	_	
108-8	21727-21732	there	_	_	_	_	
108-9	21733-21738	isn't	_	_	_	_	
108-10	21739-21743	much	_	_	_	_	
108-11	21744-21749	sense	_	_	_	_	
108-12	21750-21752	in	_	_	_	_	
108-13	21753-21755	it	_	_	_	_	
108-14	21756-21757	(	_	_	_	_	
108-15	21757-21765	provided	_	_	_	_	
108-16	21766-21775	checksums	_	_	_	_	
108-17	21776-21779	are	_	_	_	_	
108-18	21780-21786	turned	_	_	_	_	
108-19	21787-21789	on	_	_	_	_	
108-20	21789-21790	)	_	_	_	_	
108-21	21790-21791	.	_	_	_	_	

#Text=Now let's see how compression can help.
#Text==> ALTER SYSTEM SET full_page_writes = on;
#Text==> ALTER SYSTEM SET wal_compression = on;
#Text==> SELECT pg_reload_conf();
#Text=Repeating the same experiment.
#Text==> CHECKPOINT;
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/3BE87710
#Text=(1 row)
#Text=student$ pgbench -T 30 test
#Text=starting vacuum...end.
#Text=transaction type: TPC-B (sort of)
#Text=scaling factor: 1
#Text=query mode: simple
#Text=number of clients: 1
#Text=number of threads: 1
#Text=duration: 30 s
#Text=number of transactions actually processed: 26833
#Text=latency average = 1.118 ms
#Text=tps = 894.405027 (including connections establishing)
#Text=tps = 894.516845 (excluding connections establishing)
#Text==> SELECT pg_current_wal_insert_lsn();
#Text=pg_current_wal_insert_lsn
#Text=---------------------------
#Text=0/3CBD3EA8
#Text=(1 row)
#Text=Getting the size of WAL records:
#Text==> SELECT pg_size_pretty('0/3CBD3EA8'::pg_lsn - '0/3BE87710'::pg_lsn);
#Text=pg_size_pretty
#Text=----------------
#Text=13 MB
#Text=(1 row)
#Text=Conclusion: if there are many FPIs (due to checksums or full_page_writes, that is, almost always), most likely it makes sense to use compression although it loads the processor.
109-1	21792-21795	Now	_	_	_	_	
109-2	21796-21801	let's	_	_	_	_	
109-3	21802-21805	see	_	_	_	_	
109-4	21806-21809	how	_	_	_	_	
109-5	21810-21821	compression	_	_	_	_	
109-6	21822-21825	can	_	_	_	_	
109-7	21826-21830	help	_	_	_	_	
109-8	21830-21831	.	_	_	_	_	
109-9	21832-21833	=	_	_	_	_	
109-10	21833-21834	>	_	_	_	_	
109-11	21835-21840	ALTER	_	_	_	_	
109-12	21841-21847	SYSTEM	_	_	_	_	
109-13	21848-21851	SET	_	_	_	_	
109-14	21852-21868	full_page_writes	_	_	_	_	
109-15	21869-21870	=	_	_	_	_	
109-16	21871-21873	on	_	_	_	_	
109-17	21873-21874	;	_	_	_	_	
109-18	21875-21876	=	_	_	_	_	
109-19	21876-21877	>	_	_	_	_	
109-20	21878-21883	ALTER	_	_	_	_	
109-21	21884-21890	SYSTEM	_	_	_	_	
109-22	21891-21894	SET	_	_	_	_	
109-23	21895-21910	wal_compression	_	_	_	_	
109-24	21911-21912	=	_	_	_	_	
109-25	21913-21915	on	_	_	_	_	
109-26	21915-21916	;	_	_	_	_	
109-27	21917-21918	=	_	_	_	_	
109-28	21918-21919	>	_	_	_	_	
109-29	21920-21926	SELECT	_	_	_	_	
109-30	21927-21941	pg_reload_conf	_	_	_	_	
109-31	21941-21942	(	_	_	_	_	
109-32	21942-21943	)	_	_	_	_	
109-33	21943-21944	;	_	_	_	_	
109-34	21945-21954	Repeating	_	_	_	_	
109-35	21955-21958	the	_	_	_	_	
109-36	21959-21963	same	_	_	_	_	
109-37	21964-21974	experiment	_	_	_	_	
109-38	21974-21975	.	_	_	_	_	
109-39	21976-21977	=	_	_	_	_	
109-40	21977-21978	>	_	_	_	_	
109-41	21979-21989	CHECKPOINT	_	_	_	_	
109-42	21989-21990	;	_	_	_	_	
109-43	21991-21992	=	_	_	_	_	
109-44	21992-21993	>	_	_	_	_	
109-45	21994-22000	SELECT	_	_	_	_	
109-46	22001-22026	pg_current_wal_insert_lsn	_	_	_	_	
109-47	22026-22027	(	_	_	_	_	
109-48	22027-22028	)	_	_	_	_	
109-49	22028-22029	;	_	_	_	_	
109-50	22030-22055	pg_current_wal_insert_lsn	_	_	_	_	
109-51	22056-22057	-	_	_	_	_	
109-52	22057-22058	-	_	_	_	_	
109-53	22058-22059	-	_	_	_	_	
109-54	22059-22060	-	_	_	_	_	
109-55	22060-22061	-	_	_	_	_	
109-56	22061-22062	-	_	_	_	_	
109-57	22062-22063	-	_	_	_	_	
109-58	22063-22064	-	_	_	_	_	
109-59	22064-22065	-	_	_	_	_	
109-60	22065-22066	-	_	_	_	_	
109-61	22066-22067	-	_	_	_	_	
109-62	22067-22068	-	_	_	_	_	
109-63	22068-22069	-	_	_	_	_	
109-64	22069-22070	-	_	_	_	_	
109-65	22070-22071	-	_	_	_	_	
109-66	22071-22072	-	_	_	_	_	
109-67	22072-22073	-	_	_	_	_	
109-68	22073-22074	-	_	_	_	_	
109-69	22074-22075	-	_	_	_	_	
109-70	22075-22076	-	_	_	_	_	
109-71	22076-22077	-	_	_	_	_	
109-72	22077-22078	-	_	_	_	_	
109-73	22078-22079	-	_	_	_	_	
109-74	22079-22080	-	_	_	_	_	
109-75	22080-22081	-	_	_	_	_	
109-76	22081-22082	-	_	_	_	_	
109-77	22082-22083	-	_	_	_	_	
109-78	22084-22085	0	_	_	_	_	
109-79	22085-22086	/	_	_	_	_	
109-80	22086-22094	3BE87710	_	_	_	_	
109-81	22095-22096	(	_	_	_	_	
109-82	22096-22097	1	_	_	_	_	
109-83	22098-22101	row	_	_	_	_	
109-84	22101-22102	)	_	_	_	_	
109-85	22103-22110	student	_	_	_	_	
109-86	22110-22111	$	_	_	_	_	
109-87	22112-22119	pgbench	_	_	_	_	
109-88	22120-22121	-	_	_	_	_	
109-89	22121-22122	T	_	_	_	_	
109-90	22123-22125	30	_	_	_	_	
109-91	22126-22130	test	_	_	_	_	
109-92	22131-22139	starting	_	_	_	_	
109-93	22140-22146	vacuum	_	_	_	_	
109-94	22146-22147	.	_	_	_	_	
109-95	22147-22148	.	_	_	_	_	
109-96	22148-22149	.	_	_	_	_	
109-97	22149-22152	end	_	_	_	_	
109-98	22152-22153	.	_	_	_	_	
109-99	22154-22165	transaction	_	_	_	_	
109-100	22166-22170	type	_	_	_	_	
109-101	22170-22171	:	_	_	_	_	
109-102	22172-22177	TPC-B	_	_	_	_	
109-103	22178-22179	(	_	_	_	_	
109-104	22179-22183	sort	_	_	_	_	
109-105	22184-22186	of	_	_	_	_	
109-106	22186-22187	)	_	_	_	_	
109-107	22188-22195	scaling	_	_	_	_	
109-108	22196-22202	factor	_	_	_	_	
109-109	22202-22203	:	_	_	_	_	
109-110	22204-22205	1	_	_	_	_	
109-111	22206-22211	query	_	_	_	_	
109-112	22212-22216	mode	_	_	_	_	
109-113	22216-22217	:	_	_	_	_	
109-114	22218-22224	simple	_	_	_	_	
109-115	22225-22231	number	_	_	_	_	
109-116	22232-22234	of	_	_	_	_	
109-117	22235-22242	clients	_	_	_	_	
109-118	22242-22243	:	_	_	_	_	
109-119	22244-22245	1	_	_	_	_	
109-120	22246-22252	number	_	_	_	_	
109-121	22253-22255	of	_	_	_	_	
109-122	22256-22263	threads	_	_	_	_	
109-123	22263-22264	:	_	_	_	_	
109-124	22265-22266	1	_	_	_	_	
109-125	22267-22275	duration	_	_	_	_	
109-126	22275-22276	:	_	_	_	_	
109-127	22277-22279	30	_	_	_	_	
109-128	22280-22281	s	_	_	_	_	
109-129	22282-22288	number	_	_	_	_	
109-130	22289-22291	of	_	_	_	_	
109-131	22292-22304	transactions	_	_	_	_	
109-132	22305-22313	actually	_	_	_	_	
109-133	22314-22323	processed	_	_	_	_	
109-134	22323-22324	:	_	_	_	_	
109-135	22325-22330	26833	_	_	_	_	
109-136	22331-22338	latency	_	_	_	_	
109-137	22339-22346	average	_	_	_	_	
109-138	22347-22348	=	_	_	_	_	
109-139	22349-22354	1.118	_	_	_	_	
109-140	22355-22357	ms	_	_	_	_	
109-141	22358-22361	tps	_	_	_	_	
109-142	22362-22363	=	_	_	_	_	
109-143	22364-22374	894.405027	_	_	_	_	
109-144	22375-22376	(	_	_	_	_	
109-145	22376-22385	including	_	_	_	_	
109-146	22386-22397	connections	_	_	_	_	
109-147	22398-22410	establishing	_	_	_	_	
109-148	22410-22411	)	_	_	_	_	
109-149	22412-22415	tps	_	_	_	_	
109-150	22416-22417	=	_	_	_	_	
109-151	22418-22428	894.516845	_	_	_	_	
109-152	22429-22430	(	_	_	_	_	
109-153	22430-22439	excluding	_	_	_	_	
109-154	22440-22451	connections	_	_	_	_	
109-155	22452-22464	establishing	_	_	_	_	
109-156	22464-22465	)	_	_	_	_	
109-157	22466-22467	=	_	_	_	_	
109-158	22467-22468	>	_	_	_	_	
109-159	22469-22475	SELECT	_	_	_	_	
109-160	22476-22501	pg_current_wal_insert_lsn	_	_	_	_	
109-161	22501-22502	(	_	_	_	_	
109-162	22502-22503	)	_	_	_	_	
109-163	22503-22504	;	_	_	_	_	
109-164	22505-22530	pg_current_wal_insert_lsn	_	_	_	_	
109-165	22531-22532	-	_	_	_	_	
109-166	22532-22533	-	_	_	_	_	
109-167	22533-22534	-	_	_	_	_	
109-168	22534-22535	-	_	_	_	_	
109-169	22535-22536	-	_	_	_	_	
109-170	22536-22537	-	_	_	_	_	
109-171	22537-22538	-	_	_	_	_	
109-172	22538-22539	-	_	_	_	_	
109-173	22539-22540	-	_	_	_	_	
109-174	22540-22541	-	_	_	_	_	
109-175	22541-22542	-	_	_	_	_	
109-176	22542-22543	-	_	_	_	_	
109-177	22543-22544	-	_	_	_	_	
109-178	22544-22545	-	_	_	_	_	
109-179	22545-22546	-	_	_	_	_	
109-180	22546-22547	-	_	_	_	_	
109-181	22547-22548	-	_	_	_	_	
109-182	22548-22549	-	_	_	_	_	
109-183	22549-22550	-	_	_	_	_	
109-184	22550-22551	-	_	_	_	_	
109-185	22551-22552	-	_	_	_	_	
109-186	22552-22553	-	_	_	_	_	
109-187	22553-22554	-	_	_	_	_	
109-188	22554-22555	-	_	_	_	_	
109-189	22555-22556	-	_	_	_	_	
109-190	22556-22557	-	_	_	_	_	
109-191	22557-22558	-	_	_	_	_	
109-192	22559-22560	0	_	_	_	_	
109-193	22560-22561	/	_	_	_	_	
109-194	22561-22569	3CBD3EA8	_	_	_	_	
109-195	22570-22571	(	_	_	_	_	
109-196	22571-22572	1	_	_	_	_	
109-197	22573-22576	row	_	_	_	_	
109-198	22576-22577	)	_	_	_	_	
109-199	22578-22585	Getting	_	_	_	_	
109-200	22586-22589	the	_	_	_	_	
109-201	22590-22594	size	_	_	_	_	
109-202	22595-22597	of	_	_	_	_	
109-203	22598-22601	WAL	_	_	_	_	
109-204	22602-22609	records	_	_	_	_	
109-205	22609-22610	:	_	_	_	_	
109-206	22611-22612	=	_	_	_	_	
109-207	22612-22613	>	_	_	_	_	
109-208	22614-22620	SELECT	_	_	_	_	
109-209	22621-22635	pg_size_pretty	_	_	_	_	
109-210	22635-22636	(	_	_	_	_	
109-211	22636-22637	'	_	_	_	_	
109-212	22637-22638	0	_	_	_	_	
109-213	22638-22639	/	_	_	_	_	
109-214	22639-22647	3CBD3EA8	_	_	_	_	
109-215	22647-22648	'	_	_	_	_	
109-216	22648-22649	:	_	_	_	_	
109-217	22649-22650	:	_	_	_	_	
109-218	22650-22656	pg_lsn	_	_	_	_	
109-219	22657-22658	-	_	_	_	_	
109-220	22659-22660	'	_	_	_	_	
109-221	22660-22661	0	_	_	_	_	
109-222	22661-22662	/	_	_	_	_	
109-223	22662-22670	3BE87710	_	_	_	_	
109-224	22670-22671	'	_	_	_	_	
109-225	22671-22672	:	_	_	_	_	
109-226	22672-22673	:	_	_	_	_	
109-227	22673-22679	pg_lsn	_	_	_	_	
109-228	22679-22680	)	_	_	_	_	
109-229	22680-22681	;	_	_	_	_	
109-230	22682-22696	pg_size_pretty	_	_	_	_	
109-231	22697-22698	-	_	_	_	_	
109-232	22698-22699	-	_	_	_	_	
109-233	22699-22700	-	_	_	_	_	
109-234	22700-22701	-	_	_	_	_	
109-235	22701-22702	-	_	_	_	_	
109-236	22702-22703	-	_	_	_	_	
109-237	22703-22704	-	_	_	_	_	
109-238	22704-22705	-	_	_	_	_	
109-239	22705-22706	-	_	_	_	_	
109-240	22706-22707	-	_	_	_	_	
109-241	22707-22708	-	_	_	_	_	
109-242	22708-22709	-	_	_	_	_	
109-243	22709-22710	-	_	_	_	_	
109-244	22710-22711	-	_	_	_	_	
109-245	22711-22712	-	_	_	_	_	
109-246	22712-22713	-	_	_	_	_	
109-247	22714-22716	13	_	_	_	_	
109-248	22717-22719	MB	_	_	_	_	
109-249	22720-22721	(	_	_	_	_	
109-250	22721-22722	1	_	_	_	_	
109-251	22723-22726	row	_	_	_	_	
109-252	22726-22727	)	_	_	_	_	
109-253	22728-22738	Conclusion	_	_	_	_	
109-254	22738-22739	:	_	_	_	_	
109-255	22740-22742	if	_	_	_	_	
109-256	22743-22748	there	_	_	_	_	
109-257	22749-22752	are	_	_	_	_	
109-258	22753-22757	many	_	_	_	_	
109-259	22758-22762	FPIs	_	_	_	_	
109-260	22763-22764	(	_	_	_	_	
109-261	22764-22767	due	_	_	_	_	
109-262	22768-22770	to	_	_	_	_	
109-263	22771-22780	checksums	_	_	_	_	
109-264	22781-22783	or	_	_	_	_	
109-265	22784-22800	full_page_writes	_	_	_	_	
109-266	22800-22801	,	_	_	_	_	
109-267	22802-22806	that	_	_	_	_	
109-268	22806-22807	 	_	_	_	_	
109-269	22807-22809	is	_	_	_	_	
109-270	22809-22810	,	_	_	_	_	
109-271	22811-22817	almost	_	_	_	_	
109-272	22818-22824	always	_	_	_	_	
109-273	22824-22825	)	_	_	_	_	
109-274	22825-22826	,	_	_	_	_	
109-275	22827-22831	most	_	_	_	_	
109-276	22832-22838	likely	_	_	_	_	
109-277	22839-22841	it	_	_	_	_	
109-278	22842-22847	makes	_	_	_	_	
109-279	22848-22853	sense	_	_	_	_	
109-280	22854-22856	to	_	_	_	_	
109-281	22857-22860	use	_	_	_	_	
109-282	22861-22872	compression	_	_	_	_	
109-283	22873-22881	although	_	_	_	_	
109-284	22882-22884	it	_	_	_	_	
109-285	22885-22890	loads	_	_	_	_	
109-286	22891-22894	the	_	_	_	_	
109-287	22895-22904	processor	_	_	_	_	
109-288	22904-22905	.	_	_	_	_	

#Text=Performance
#Text=During regular work of a server, WAL files are continuously written one by one.
110-1	22906-22917	Performance	_	_	_	_	
110-2	22918-22924	During	_	_	_	_	
110-3	22925-22932	regular	_	_	_	_	
110-4	22933-22937	work	_	_	_	_	
110-5	22938-22940	of	_	_	_	_	
110-6	22941-22942	a	_	_	_	_	
110-7	22943-22949	server	_	_	_	_	
110-8	22949-22950	,	_	_	_	_	
110-9	22951-22954	WAL	_	_	_	_	
110-10	22955-22960	files	_	_	_	_	
110-11	22961-22964	are	_	_	_	_	
110-12	22965-22977	continuously	_	_	_	_	
110-13	22978-22985	written	_	_	_	_	
110-14	22986-22989	one	_	_	_	_	
110-15	22990-22992	by	_	_	_	_	
110-16	22993-22996	one	_	_	_	_	
110-17	22996-22997	.	_	_	_	_	

#Text=Because of no random access, even HDD disks do the job fine.
111-1	22998-23005	Because	_	_	_	_	
111-2	23006-23008	of	_	_	_	_	
111-3	23009-23011	no	_	_	_	_	
111-4	23012-23018	random	_	_	_	_	
111-5	23019-23025	access	_	_	_	_	
111-6	23025-23026	,	_	_	_	_	
111-7	23027-23031	even	_	_	_	_	
111-8	23032-23035	HDD	_	_	_	_	
111-9	23036-23041	disks	_	_	_	_	
111-10	23042-23044	do	_	_	_	_	
111-11	23045-23048	the	_	_	_	_	
111-12	23049-23052	job	_	_	_	_	
111-13	23053-23057	fine	_	_	_	_	
111-14	23057-23058	.	_	_	_	_	

#Text=But this kind of load is pretty much different from the one when data files are accessed.
112-1	23059-23062	But	_	_	_	_	
112-2	23063-23067	this	_	_	_	_	
112-3	23068-23072	kind	_	_	_	_	
112-4	23073-23075	of	_	_	_	_	
112-5	23076-23080	load	_	_	_	_	
112-6	23081-23083	is	_	_	_	_	
112-7	23084-23090	pretty	_	_	_	_	
112-8	23091-23095	much	_	_	_	_	
112-9	23096-23105	different	_	_	_	_	
112-10	23106-23110	from	_	_	_	_	
112-11	23111-23114	the	_	_	_	_	
112-12	23115-23118	one	_	_	_	_	
112-13	23119-23123	when	_	_	_	_	
112-14	23124-23128	data	_	_	_	_	
112-15	23129-23134	files	_	_	_	_	
112-16	23135-23138	are	_	_	_	_	
112-17	23139-23147	accessed	_	_	_	_	
112-18	23147-23148	.	_	_	_	_	

#Text=So, it is usually beneficial to store WAL on a separate physical disk (or disk array) mounted to the file system of the server.
113-1	23149-23151	So	_	_	_	_	
113-2	23151-23152	,	_	_	_	_	
113-3	23153-23155	it	_	_	_	_	
113-4	23156-23158	is	_	_	_	_	
113-5	23159-23166	usually	_	_	_	_	
113-6	23167-23177	beneficial	_	_	_	_	
113-7	23178-23180	to	_	_	_	_	
113-8	23181-23186	store	_	_	_	_	
113-9	23187-23190	WAL	_	_	_	_	
113-10	23191-23193	on	_	_	_	_	
113-11	23194-23195	a	_	_	_	_	
113-12	23196-23204	separate	_	_	_	_	
113-13	23205-23213	physical	_	_	_	_	
113-14	23214-23218	disk	_	_	_	_	
113-15	23219-23220	(	_	_	_	_	
113-16	23220-23222	or	_	_	_	_	
113-17	23223-23227	disk	_	_	_	_	
113-18	23228-23233	array	_	_	_	_	
113-19	23233-23234	)	_	_	_	_	
113-20	23235-23242	mounted	_	_	_	_	
113-21	23243-23245	to	_	_	_	_	
113-22	23246-23249	the	_	_	_	_	
113-23	23250-23254	file	_	_	_	_	
113-24	23255-23261	system	_	_	_	_	
113-25	23262-23264	of	_	_	_	_	
113-26	23265-23268	the	_	_	_	_	
113-27	23269-23275	server	_	_	_	_	
113-28	23275-23276	.	_	_	_	_	

#Text=Instead of the $PGDATA/pg_wal directory, a symbolic link to the appropriate directory must be created.
114-1	23277-23284	Instead	_	_	_	_	
114-2	23285-23287	of	_	_	_	_	
114-3	23288-23291	the	_	_	_	_	
114-4	23292-23293	$	_	_	_	_	
114-5	23293-23299	PGDATA	_	_	_	_	
114-6	23299-23300	/	_	_	_	_	
114-7	23300-23306	pg_wal	_	_	_	_	
114-8	23307-23316	directory	_	_	_	_	
114-9	23316-23317	,	_	_	_	_	
114-10	23318-23319	a	_	_	_	_	
114-11	23320-23328	symbolic	_	_	_	_	
114-12	23329-23333	link	_	_	_	_	
114-13	23334-23336	to	_	_	_	_	
114-14	23337-23340	the	_	_	_	_	
114-15	23341-23352	appropriate	_	_	_	_	
114-16	23353-23362	directory	_	_	_	_	
114-17	23363-23367	must	_	_	_	_	
114-18	23368-23370	be	_	_	_	_	
114-19	23371-23378	created	_	_	_	_	
114-20	23378-23379	.	_	_	_	_	

#Text=There are a couple of situations where WAL files need to be not only written but read.
115-1	23380-23385	There	_	_	_	_	
115-2	23386-23389	are	_	_	_	_	
115-3	23390-23391	a	_	_	_	_	
115-4	23392-23398	couple	_	_	_	_	
115-5	23399-23401	of	_	_	_	_	
115-6	23402-23412	situations	_	_	_	_	
115-7	23413-23418	where	_	_	_	_	
115-8	23419-23422	WAL	_	_	_	_	
115-9	23423-23428	files	_	_	_	_	
115-10	23429-23433	need	_	_	_	_	
115-11	23434-23436	to	_	_	_	_	
115-12	23437-23439	be	_	_	_	_	
115-13	23440-23443	not	_	_	_	_	
115-14	23444-23448	only	_	_	_	_	
115-15	23449-23456	written	_	_	_	_	
115-16	23457-23460	but	_	_	_	_	
115-17	23461-23465	read	_	_	_	_	
115-18	23465-23466	.	_	_	_	_	

#Text=The first one is a clear case of recovery after a failure.
116-1	23467-23470	The	_	_	_	_	
116-2	23471-23476	first	_	_	_	_	
116-3	23477-23480	one	_	_	_	_	
116-4	23481-23483	is	_	_	_	_	
116-5	23484-23485	a	_	_	_	_	
116-6	23486-23491	clear	_	_	_	_	
116-7	23492-23496	case	_	_	_	_	
116-8	23497-23499	of	_	_	_	_	
116-9	23500-23508	recovery	_	_	_	_	
116-10	23509-23514	after	_	_	_	_	
116-11	23515-23516	a	_	_	_	_	
116-12	23517-23524	failure	_	_	_	_	
116-13	23524-23525	.	_	_	_	_	

#Text=The second one is less trivial.
117-1	23526-23529	The	_	_	_	_	
117-2	23530-23536	second	_	_	_	_	
117-3	23537-23540	one	_	_	_	_	
117-4	23541-23543	is	_	_	_	_	
117-5	23544-23548	less	_	_	_	_	
117-6	23549-23556	trivial	_	_	_	_	
117-7	23556-23557	.	_	_	_	_	

#Text=It occurs if stream replication is used and a replica is late to receive WAL records while they are still in the OS buffers of the main server.
118-1	23558-23560	It	_	_	_	_	
118-2	23561-23567	occurs	_	_	_	_	
118-3	23568-23570	if	_	_	_	_	
118-4	23571-23577	stream	_	_	_	_	
118-5	23578-23589	replication	_	_	_	_	
118-6	23590-23592	is	_	_	_	_	
118-7	23593-23597	used	_	_	_	_	
118-8	23598-23601	and	_	_	_	_	
118-9	23602-23603	a	_	_	_	_	
118-10	23604-23611	replica	_	_	_	_	
118-11	23612-23614	is	_	_	_	_	
118-12	23615-23619	late	_	_	_	_	
118-13	23620-23622	to	_	_	_	_	
118-14	23623-23630	receive	_	_	_	_	
118-15	23631-23634	WAL	_	_	_	_	
118-16	23635-23642	records	_	_	_	_	
118-17	23643-23648	while	_	_	_	_	
118-18	23649-23653	they	_	_	_	_	
118-19	23654-23657	are	_	_	_	_	
118-20	23658-23663	still	_	_	_	_	
118-21	23664-23666	in	_	_	_	_	
118-22	23667-23670	the	_	_	_	_	
118-23	23671-23673	OS	_	_	_	_	
118-24	23674-23681	buffers	_	_	_	_	
118-25	23682-23684	of	_	_	_	_	
118-26	23685-23688	the	_	_	_	_	
118-27	23689-23693	main	_	_	_	_	
118-28	23694-23700	server	_	_	_	_	
118-29	23700-23701	.	_	_	_	_	

#Text=In this case, the walsender process has to read the necessary data from disk.
119-1	23702-23704	In	_	_	_	_	
119-2	23705-23709	this	_	_	_	_	
119-3	23710-23714	case	_	_	_	_	
119-4	23714-23715	,	_	_	_	_	
119-5	23716-23719	the	_	_	_	_	
119-6	23720-23729	walsender	_	_	_	_	
119-7	23730-23737	process	_	_	_	_	
119-8	23738-23741	has	_	_	_	_	
119-9	23742-23744	to	_	_	_	_	
119-10	23745-23749	read	_	_	_	_	
119-11	23750-23753	the	_	_	_	_	
119-12	23754-23763	necessary	_	_	_	_	
119-13	23764-23768	data	_	_	_	_	
119-14	23769-23773	from	_	_	_	_	
119-15	23774-23778	disk	_	_	_	_	
119-16	23778-23779	.	_	_	_	_	

#Text=We will discuss this in more detail when we reach replication.
120-1	23780-23782	We	_	_	_	_	
120-2	23783-23787	will	_	_	_	_	
120-3	23788-23795	discuss	_	_	_	_	
120-4	23796-23800	this	_	_	_	_	
120-5	23801-23803	in	_	_	_	_	
120-6	23804-23808	more	_	_	_	_	
120-7	23809-23815	detail	_	_	_	_	
120-8	23816-23820	when	_	_	_	_	
120-9	23821-23823	we	_	_	_	_	
120-10	23824-23829	reach	_	_	_	_	
120-11	23830-23841	replication	_	_	_	_	
120-12	23841-23842	.	_	_	_	_	

#Text=WAL is written in either of the two modes:
#Text=Synchronous — at a transaction commit, the work cannot be continued until all WAL records of this transaction get on disk.
121-1	23843-23846	WAL	_	_	_	_	
121-2	23847-23849	is	_	_	_	_	
121-3	23850-23857	written	_	_	_	_	
121-4	23858-23860	in	_	_	_	_	
121-5	23861-23867	either	_	_	_	_	
121-6	23868-23870	of	_	_	_	_	
121-7	23871-23874	the	_	_	_	_	
121-8	23875-23878	two	_	_	_	_	
121-9	23879-23884	modes	_	_	_	_	
121-10	23884-23885	:	_	_	_	_	
121-11	23886-23897	Synchronous	_	_	_	_	
121-12	23897-23898	 	_	_	_	_	
121-13	23898-23899	—	_	_	_	_	
121-14	23900-23902	at	_	_	_	_	
121-15	23903-23904	a	_	_	_	_	
121-16	23905-23916	transaction	_	_	_	_	
121-17	23917-23923	commit	_	_	_	_	
121-18	23923-23924	,	_	_	_	_	
121-19	23925-23928	the	_	_	_	_	
121-20	23929-23933	work	_	_	_	_	
121-21	23934-23940	cannot	_	_	_	_	
121-22	23941-23943	be	_	_	_	_	
121-23	23944-23953	continued	_	_	_	_	
121-24	23954-23959	until	_	_	_	_	
121-25	23960-23963	all	_	_	_	_	
121-26	23964-23967	WAL	_	_	_	_	
121-27	23968-23975	records	_	_	_	_	
121-28	23976-23978	of	_	_	_	_	
121-29	23979-23983	this	_	_	_	_	
121-30	23984-23995	transaction	_	_	_	_	
121-31	23996-23999	get	_	_	_	_	
121-32	24000-24002	on	_	_	_	_	
121-33	24003-24007	disk	_	_	_	_	
121-34	24007-24008	.	_	_	_	_	

#Text=Asynchronous — a transaction completes immediately, and WAL is written in the background.
122-1	24009-24021	Asynchronous	_	_	_	_	
122-2	24021-24022	 	_	_	_	_	
122-3	24022-24023	—	_	_	_	_	
122-4	24024-24025	a	_	_	_	_	
122-5	24026-24037	transaction	_	_	_	_	
122-6	24038-24047	completes	_	_	_	_	
122-7	24048-24059	immediately	_	_	_	_	
122-8	24059-24060	,	_	_	_	_	
122-9	24061-24064	and	_	_	_	_	
122-10	24065-24068	WAL	_	_	_	_	
122-11	24069-24071	is	_	_	_	_	
122-12	24072-24079	written	_	_	_	_	
122-13	24080-24082	in	_	_	_	_	
122-14	24083-24086	the	_	_	_	_	
122-15	24087-24097	background	_	_	_	_	
122-16	24097-24098	.	_	_	_	_	

#Text=The synchronous_commit parameter, turned on by default, sets the synchronous mode.
123-1	24099-24102	The	_	_	_	_	
123-2	24103-24121	synchronous_commit	_	_	_	_	
123-3	24122-24131	parameter	_	_	_	_	
123-4	24131-24132	,	_	_	_	_	
123-5	24133-24139	turned	_	_	_	_	
123-6	24140-24142	on	_	_	_	_	
123-7	24143-24145	by	_	_	_	_	
123-8	24146-24153	default	_	_	_	_	
123-9	24153-24154	,	_	_	_	_	
123-10	24155-24159	sets	_	_	_	_	
123-11	24160-24163	the	_	_	_	_	
123-12	24164-24175	synchronous	_	_	_	_	
123-13	24176-24180	mode	_	_	_	_	
123-14	24180-24181	.	_	_	_	_	

#Text=Because synchronization is connected with the actual (that is, slow) input/output, it is beneficial to do it as infrequently as possible.
124-1	24182-24189	Because	_	_	_	_	
124-2	24190-24205	synchronization	_	_	_	_	
124-3	24206-24208	is	_	_	_	_	
124-4	24209-24218	connected	_	_	_	_	
124-5	24219-24223	with	_	_	_	_	
124-6	24224-24227	the	_	_	_	_	
124-7	24228-24234	actual	_	_	_	_	
124-8	24235-24236	(	_	_	_	_	
124-9	24236-24240	that	_	_	_	_	
124-10	24240-24241	 	_	_	_	_	
124-11	24241-24243	is	_	_	_	_	
124-12	24243-24244	,	_	_	_	_	
124-13	24245-24249	slow	_	_	_	_	
124-14	24249-24250	)	_	_	_	_	
124-15	24251-24256	input	_	_	_	_	
124-16	24256-24257	/	_	_	_	_	
124-17	24257-24263	output	_	_	_	_	
124-18	24263-24264	,	_	_	_	_	
124-19	24265-24267	it	_	_	_	_	
124-20	24268-24270	is	_	_	_	_	
124-21	24271-24281	beneficial	_	_	_	_	
124-22	24282-24284	to	_	_	_	_	
124-23	24285-24287	do	_	_	_	_	
124-24	24288-24290	it	_	_	_	_	
124-25	24291-24293	as	_	_	_	_	
124-26	24294-24306	infrequently	_	_	_	_	
124-27	24307-24309	as	_	_	_	_	
124-28	24310-24318	possible	_	_	_	_	
124-29	24318-24319	.	_	_	_	_	

#Text=To this end, a backend process that completes a transaction and writes WAL makes a short pause, defined by the commit_delay parameter.
125-1	24320-24322	To	_	_	_	_	
125-2	24323-24327	this	_	_	_	_	
125-3	24328-24331	end	_	_	_	_	
125-4	24331-24332	,	_	_	_	_	
125-5	24333-24334	a	_	_	_	_	
125-6	24335-24342	backend	_	_	_	_	
125-7	24343-24350	process	_	_	_	_	
125-8	24351-24355	that	_	_	_	_	
125-9	24356-24365	completes	_	_	_	_	
125-10	24366-24367	a	_	_	_	_	
125-11	24368-24379	transaction	_	_	_	_	
125-12	24380-24383	and	_	_	_	_	
125-13	24384-24390	writes	_	_	_	_	
125-14	24391-24394	WAL	_	_	_	_	
125-15	24395-24400	makes	_	_	_	_	
125-16	24401-24402	a	_	_	_	_	
125-17	24403-24408	short	_	_	_	_	
125-18	24409-24414	pause	_	_	_	_	
125-19	24414-24415	,	_	_	_	_	
125-20	24416-24423	defined	_	_	_	_	
125-21	24424-24426	by	_	_	_	_	
125-22	24427-24430	the	_	_	_	_	
125-23	24431-24443	commit_delay	_	_	_	_	
125-24	24444-24453	parameter	_	_	_	_	
125-25	24453-24454	.	_	_	_	_	

#Text=But this happens only if the system has not less than commit_siblings active transactions.
126-1	24455-24458	But	_	_	_	_	
126-2	24459-24463	this	_	_	_	_	
126-3	24464-24471	happens	_	_	_	_	
126-4	24472-24476	only	_	_	_	_	
126-5	24477-24479	if	_	_	_	_	
126-6	24480-24483	the	_	_	_	_	
126-7	24484-24490	system	_	_	_	_	
126-8	24491-24494	has	_	_	_	_	
126-9	24495-24498	not	_	_	_	_	
126-10	24499-24503	less	_	_	_	_	
126-11	24504-24508	than	_	_	_	_	
126-12	24509-24524	commit_siblings	_	_	_	_	
126-13	24525-24531	active	_	_	_	_	
126-14	24532-24544	transactions	_	_	_	_	
126-15	24544-24545	.	_	_	_	_	

#Text=This behavior relies on the expectation that during the waiting time some transactions will be completed and it will be possible to synchronize them in one go.
127-1	24546-24550	This	_	_	_	_	
127-2	24551-24559	behavior	_	_	_	_	
127-3	24560-24566	relies	_	_	_	_	
127-4	24567-24569	on	_	_	_	_	
127-5	24570-24573	the	_	_	_	_	
127-6	24574-24585	expectation	_	_	_	_	
127-7	24586-24590	that	_	_	_	_	
127-8	24591-24597	during	_	_	_	_	
127-9	24598-24601	the	_	_	_	_	
127-10	24602-24609	waiting	_	_	_	_	
127-11	24610-24614	time	_	_	_	_	
127-12	24615-24619	some	_	_	_	_	
127-13	24620-24632	transactions	_	_	_	_	
127-14	24633-24637	will	_	_	_	_	
127-15	24638-24640	be	_	_	_	_	
127-16	24641-24650	completed	_	_	_	_	
127-17	24651-24654	and	_	_	_	_	
127-18	24655-24657	it	_	_	_	_	
127-19	24658-24662	will	_	_	_	_	
127-20	24663-24665	be	_	_	_	_	
127-21	24666-24674	possible	_	_	_	_	
127-22	24675-24677	to	_	_	_	_	
127-23	24678-24689	synchronize	_	_	_	_	
127-24	24690-24694	them	_	_	_	_	
127-25	24695-24697	in	_	_	_	_	
127-26	24698-24701	one	_	_	_	_	
127-27	24702-24704	go	_	_	_	_	
127-28	24704-24705	.	_	_	_	_	

#Text=This is similar to how you hold the doors of an elevator so that someone has time to jump into the car.
128-1	24706-24710	This	_	_	_	_	
128-2	24711-24713	is	_	_	_	_	
128-3	24714-24721	similar	_	_	_	_	
128-4	24722-24724	to	_	_	_	_	
128-5	24725-24728	how	_	_	_	_	
128-6	24729-24732	you	_	_	_	_	
128-7	24733-24737	hold	_	_	_	_	
128-8	24738-24741	the	_	_	_	_	
128-9	24742-24747	doors	_	_	_	_	
128-10	24748-24750	of	_	_	_	_	
128-11	24751-24753	an	_	_	_	_	
128-12	24754-24762	elevator	_	_	_	_	
128-13	24763-24765	so	_	_	_	_	
128-14	24766-24770	that	_	_	_	_	
128-15	24771-24778	someone	_	_	_	_	
128-16	24779-24782	has	_	_	_	_	
128-17	24783-24787	time	_	_	_	_	
128-18	24788-24790	to	_	_	_	_	
128-19	24791-24795	jump	_	_	_	_	
128-20	24796-24800	into	_	_	_	_	
128-21	24801-24804	the	_	_	_	_	
128-22	24805-24808	car	_	_	_	_	
128-23	24808-24809	.	_	_	_	_	

#Text=By default, commit_siblings = 5 and commit_delay = 0, so actually there is no wait.
129-1	24810-24812	By	_	_	_	_	
129-2	24813-24820	default	_	_	_	_	
129-3	24820-24821	,	_	_	_	_	
129-4	24822-24837	commit_siblings	*	parameter	_	_	
129-5	24838-24839	=	_	_	_	_	
129-6	24840-24841	5	*	value	Associated-With	129-4	
129-7	24842-24845	and	_	_	_	_	
129-8	24846-24858	commit_delay	*	parameter	_	_	
129-9	24859-24860	=	_	_	_	_	
129-10	24861-24862	0	*	value	Associated-With	129-8	
129-11	24862-24863	,	_	_	_	_	
129-12	24864-24866	so	_	_	_	_	
129-13	24867-24875	actually	_	_	_	_	
129-14	24876-24881	there	_	_	_	_	
129-15	24882-24884	is	_	_	_	_	
129-16	24885-24887	no	_	_	_	_	
129-17	24888-24892	wait	_	_	_	_	
129-18	24892-24893	.	_	_	_	_	

#Text=It makes sense to change the value of commit_delay only for systems that execute a great number of OLTP transactions.
130-1	24894-24896	It	_	_	_	_	
130-2	24897-24902	makes	_	_	_	_	
130-3	24903-24908	sense	_	_	_	_	
130-4	24909-24911	to	_	_	_	_	
130-5	24912-24918	change	_	_	_	_	
130-6	24919-24922	the	_	_	_	_	
130-7	24923-24928	value	_	_	_	_	
130-8	24929-24931	of	_	_	_	_	
130-9	24932-24944	commit_delay	_	_	_	_	
130-10	24945-24949	only	_	_	_	_	
130-11	24950-24953	for	_	_	_	_	
130-12	24954-24961	systems	_	_	_	_	
130-13	24962-24966	that	_	_	_	_	
130-14	24967-24974	execute	_	_	_	_	
130-15	24975-24976	a	_	_	_	_	
130-16	24977-24982	great	_	_	_	_	
130-17	24983-24989	number	_	_	_	_	
130-18	24990-24992	of	_	_	_	_	
130-19	24993-24997	OLTP	_	_	_	_	
130-20	24998-25010	transactions	_	_	_	_	
130-21	25010-25011	.	_	_	_	_	

#Text=Then the process flushes part of WAL up to the LSN needed (or a little more if during the waiting time new records were added).
131-1	25012-25016	Then	_	_	_	_	
131-2	25017-25020	the	_	_	_	_	
131-3	25021-25028	process	_	_	_	_	
131-4	25029-25036	flushes	_	_	_	_	
131-5	25037-25041	part	_	_	_	_	
131-6	25042-25044	of	_	_	_	_	
131-7	25045-25048	WAL	_	_	_	_	
131-8	25049-25051	up	_	_	_	_	
131-9	25052-25054	to	_	_	_	_	
131-10	25055-25058	the	_	_	_	_	
131-11	25059-25062	LSN	_	_	_	_	
131-12	25063-25069	needed	_	_	_	_	
131-13	25070-25071	(	_	_	_	_	
131-14	25071-25073	or	_	_	_	_	
131-15	25074-25075	a	_	_	_	_	
131-16	25076-25082	little	_	_	_	_	
131-17	25083-25087	more	_	_	_	_	
131-18	25088-25090	if	_	_	_	_	
131-19	25091-25097	during	_	_	_	_	
131-20	25098-25101	the	_	_	_	_	
131-21	25102-25109	waiting	_	_	_	_	
131-22	25110-25114	time	_	_	_	_	
131-23	25115-25118	new	_	_	_	_	
131-24	25119-25126	records	_	_	_	_	
131-25	25127-25131	were	_	_	_	_	
131-26	25132-25137	added	_	_	_	_	
131-27	25137-25138	)	_	_	_	_	
131-28	25138-25139	.	_	_	_	_	

#Text=After that the transaction is considered completed.
132-1	25140-25145	After	_	_	_	_	
132-2	25146-25150	that	_	_	_	_	
132-3	25151-25154	the	_	_	_	_	
132-4	25155-25166	transaction	_	_	_	_	
132-5	25167-25169	is	_	_	_	_	
132-6	25170-25180	considered	_	_	_	_	
132-7	25181-25190	completed	_	_	_	_	
132-8	25190-25191	.	_	_	_	_	

#Text=Synchronous writing ensures durability (the letter D in the ACID acronym): if a transaction is committed, all its WAL records are already on disk and won't be lost.
133-1	25192-25203	Synchronous	_	_	_	_	
133-2	25204-25211	writing	_	_	_	_	
133-3	25212-25219	ensures	_	_	_	_	
133-4	25220-25230	durability	_	_	_	_	
133-5	25231-25232	(	_	_	_	_	
133-6	25232-25235	the	_	_	_	_	
133-7	25236-25242	letter	_	_	_	_	
133-8	25243-25244	D	_	_	_	_	
133-9	25245-25247	in	_	_	_	_	
133-10	25248-25251	the	_	_	_	_	
133-11	25252-25256	ACID	_	_	_	_	
133-12	25257-25264	acronym	_	_	_	_	
133-13	25264-25265	)	_	_	_	_	
133-14	25265-25266	:	_	_	_	_	
133-15	25267-25269	if	_	_	_	_	
133-16	25270-25271	a	_	_	_	_	
133-17	25272-25283	transaction	_	_	_	_	
133-18	25284-25286	is	_	_	_	_	
133-19	25287-25296	committed	_	_	_	_	
133-20	25296-25297	,	_	_	_	_	
133-21	25298-25301	all	_	_	_	_	
133-22	25302-25305	its	_	_	_	_	
133-23	25306-25309	WAL	_	_	_	_	
133-24	25310-25317	records	_	_	_	_	
133-25	25318-25321	are	_	_	_	_	
133-26	25322-25329	already	_	_	_	_	
133-27	25330-25332	on	_	_	_	_	
133-28	25333-25337	disk	_	_	_	_	
133-29	25338-25341	and	_	_	_	_	
133-30	25342-25347	won't	_	_	_	_	
133-31	25348-25350	be	_	_	_	_	
133-32	25351-25355	lost	_	_	_	_	
133-33	25355-25356	.	_	_	_	_	

#Text=But a drawback is that synchronous writing increases the response time (the COMMIT command does not return control until the end of the synchronization) and reduces the system performance.
134-1	25357-25360	But	_	_	_	_	
134-2	25361-25362	a	_	_	_	_	
134-3	25363-25371	drawback	_	_	_	_	
134-4	25372-25374	is	_	_	_	_	
134-5	25375-25379	that	_	_	_	_	
134-6	25380-25391	synchronous	_	_	_	_	
134-7	25392-25399	writing	_	_	_	_	
134-8	25400-25409	increases	_	_	_	_	
134-9	25410-25413	the	_	_	_	_	
134-10	25414-25422	response	_	_	_	_	
134-11	25423-25427	time	_	_	_	_	
134-12	25428-25429	(	_	_	_	_	
134-13	25429-25432	the	_	_	_	_	
134-14	25433-25439	COMMIT	_	_	_	_	
134-15	25440-25447	command	_	_	_	_	
134-16	25448-25452	does	_	_	_	_	
134-17	25453-25456	not	_	_	_	_	
134-18	25457-25463	return	_	_	_	_	
134-19	25464-25471	control	_	_	_	_	
134-20	25472-25477	until	_	_	_	_	
134-21	25478-25481	the	_	_	_	_	
134-22	25482-25485	end	_	_	_	_	
134-23	25486-25488	of	_	_	_	_	
134-24	25489-25492	the	_	_	_	_	
134-25	25493-25508	synchronization	_	_	_	_	
134-26	25508-25509	)	_	_	_	_	
134-27	25510-25513	and	_	_	_	_	
134-28	25514-25521	reduces	_	_	_	_	
134-29	25522-25525	the	_	_	_	_	
134-30	25526-25532	system	_	_	_	_	
134-31	25533-25544	performance	_	_	_	_	
134-32	25544-25545	.	_	_	_	_	

#Text=You can make writing asynchronous by setting synchronous_commit = off (or local).
135-1	25546-25549	You	_	_	_	_	
135-2	25550-25553	can	_	_	_	_	
135-3	25554-25558	make	_	_	_	_	
135-4	25559-25566	writing	_	_	_	_	
135-5	25567-25579	asynchronous	_	_	_	_	
135-6	25580-25582	by	_	_	_	_	
135-7	25583-25590	setting	_	_	_	_	
135-8	25591-25609	synchronous_commit	*	parameter	_	_	
135-9	25610-25611	=	_	_	_	_	
135-10	25612-25615	off	*	value	Associated-With	135-8	
135-11	25616-25617	(	_	_	_	_	
135-12	25617-25619	or	_	_	_	_	
135-13	25620-25625	local	_	_	_	_	
135-14	25625-25626	)	_	_	_	_	
135-15	25626-25627	.	_	_	_	_	

#Text=When writing is asynchronous, WAL records are flushed by the wal writer process, which alternates work and waits (the waiting time is specified by the wal_writer_delay parameter with the default value of 200 ms).
136-1	25628-25632	When	_	_	_	_	
136-2	25633-25640	writing	_	_	_	_	
136-3	25641-25643	is	_	_	_	_	
136-4	25644-25656	asynchronous	_	_	_	_	
136-5	25656-25657	,	_	_	_	_	
136-6	25658-25661	WAL	_	_	_	_	
136-7	25662-25669	records	_	_	_	_	
136-8	25670-25673	are	_	_	_	_	
136-9	25674-25681	flushed	_	_	_	_	
136-10	25682-25684	by	_	_	_	_	
136-11	25685-25688	the	_	_	_	_	
136-12	25689-25692	wal	_	_	_	_	
136-13	25693-25699	writer	_	_	_	_	
136-14	25700-25707	process	_	_	_	_	
136-15	25707-25708	,	_	_	_	_	
136-16	25709-25714	which	_	_	_	_	
136-17	25715-25725	alternates	_	_	_	_	
136-18	25726-25730	work	_	_	_	_	
136-19	25731-25734	and	_	_	_	_	
136-20	25735-25740	waits	_	_	_	_	
136-21	25741-25742	(	_	_	_	_	
136-22	25742-25745	the	_	_	_	_	
136-23	25746-25753	waiting	_	_	_	_	
136-24	25754-25758	time	_	_	_	_	
136-25	25759-25761	is	_	_	_	_	
136-26	25762-25771	specified	_	_	_	_	
136-27	25772-25774	by	_	_	_	_	
136-28	25775-25778	the	_	_	_	_	
136-29	25779-25795	wal_writer_delay	*	parameter	_	_	
136-30	25796-25805	parameter	_	_	_	_	
136-31	25806-25810	with	_	_	_	_	
136-32	25811-25814	the	_	_	_	_	
136-33	25815-25822	default	_	_	_	_	
136-34	25823-25828	value	_	_	_	_	
136-35	25829-25831	of	_	_	_	_	
136-36	25832-25835	200	*[1]	value[1]	Associated-With	136-29[0_1]	
136-37	25835-25836	 	*[1]	value[1]	_	_	
136-38	25836-25838	ms	*[1]	value[1]	_	_	
136-39	25838-25839	)	_	_	_	_	
136-40	25839-25840	.	_	_	_	_	

#Text=When the process wakes up after a wait, it checks whether completely filled WAL pages appeared since last time.
137-1	25841-25845	When	_	_	_	_	
137-2	25846-25849	the	_	_	_	_	
137-3	25850-25857	process	_	_	_	_	
137-4	25858-25863	wakes	_	_	_	_	
137-5	25864-25866	up	_	_	_	_	
137-6	25867-25872	after	_	_	_	_	
137-7	25873-25874	a	_	_	_	_	
137-8	25875-25879	wait	_	_	_	_	
137-9	25879-25880	,	_	_	_	_	
137-10	25881-25883	it	_	_	_	_	
137-11	25884-25890	checks	_	_	_	_	
137-12	25891-25898	whether	_	_	_	_	
137-13	25899-25909	completely	_	_	_	_	
137-14	25910-25916	filled	_	_	_	_	
137-15	25917-25920	WAL	_	_	_	_	
137-16	25921-25926	pages	_	_	_	_	
137-17	25927-25935	appeared	_	_	_	_	
137-18	25936-25941	since	_	_	_	_	
137-19	25942-25946	last	_	_	_	_	
137-20	25947-25951	time	_	_	_	_	
137-21	25951-25952	.	_	_	_	_	

#Text=If they did appear, the process ignores the current page, not filled to the end, and writes only completely filled pages.
138-1	25953-25955	If	_	_	_	_	
138-2	25956-25960	they	_	_	_	_	
138-3	25961-25964	did	_	_	_	_	
138-4	25965-25971	appear	_	_	_	_	
138-5	25971-25972	,	_	_	_	_	
138-6	25973-25976	the	_	_	_	_	
138-7	25977-25984	process	_	_	_	_	
138-8	25985-25992	ignores	_	_	_	_	
138-9	25993-25996	the	_	_	_	_	
138-10	25997-26004	current	_	_	_	_	
138-11	26005-26009	page	_	_	_	_	
138-12	26009-26010	,	_	_	_	_	
138-13	26011-26014	not	_	_	_	_	
138-14	26015-26021	filled	_	_	_	_	
138-15	26022-26024	to	_	_	_	_	
138-16	26025-26028	the	_	_	_	_	
138-17	26029-26032	end	_	_	_	_	
138-18	26032-26033	,	_	_	_	_	
138-19	26034-26037	and	_	_	_	_	
138-20	26038-26044	writes	_	_	_	_	
138-21	26045-26049	only	_	_	_	_	
138-22	26050-26060	completely	_	_	_	_	
138-23	26061-26067	filled	_	_	_	_	
138-24	26068-26073	pages	_	_	_	_	
138-25	26073-26074	.	_	_	_	_	

#Text=(However, not all at once: writing stops when it reaches the end of the cache and proceeds from the beginning of the cache next time.)
139-1	26075-26076	(	_	_	_	_	
139-2	26076-26083	However	_	_	_	_	
139-3	26083-26084	,	_	_	_	_	
139-4	26085-26088	not	_	_	_	_	
139-5	26089-26092	all	_	_	_	_	
139-6	26093-26095	at	_	_	_	_	
139-7	26096-26100	once	_	_	_	_	
139-8	26100-26101	:	_	_	_	_	
139-9	26102-26109	writing	_	_	_	_	
139-10	26110-26115	stops	_	_	_	_	
139-11	26116-26120	when	_	_	_	_	
139-12	26121-26123	it	_	_	_	_	
139-13	26124-26131	reaches	_	_	_	_	
139-14	26132-26135	the	_	_	_	_	
139-15	26136-26139	end	_	_	_	_	
139-16	26140-26142	of	_	_	_	_	
139-17	26143-26146	the	_	_	_	_	
139-18	26147-26152	cache	_	_	_	_	
139-19	26153-26156	and	_	_	_	_	
139-20	26157-26165	proceeds	_	_	_	_	
139-21	26166-26170	from	_	_	_	_	
139-22	26171-26174	the	_	_	_	_	
139-23	26175-26184	beginning	_	_	_	_	
139-24	26185-26187	of	_	_	_	_	
139-25	26188-26191	the	_	_	_	_	
139-26	26192-26197	cache	_	_	_	_	
139-27	26198-26202	next	_	_	_	_	
139-28	26203-26207	time	_	_	_	_	
139-29	26207-26208	.	_	_	_	_	
139-30	26208-26209	)	_	_	_	_	

#Text=But if none of the pages are filled, the process writes the current WAL page (not filled to the end) — otherwise, what did it wake up for?
140-1	26210-26213	But	_	_	_	_	
140-2	26214-26216	if	_	_	_	_	
140-3	26217-26221	none	_	_	_	_	
140-4	26222-26224	of	_	_	_	_	
140-5	26225-26228	the	_	_	_	_	
140-6	26229-26234	pages	_	_	_	_	
140-7	26235-26238	are	_	_	_	_	
140-8	26239-26245	filled	_	_	_	_	
140-9	26245-26246	,	_	_	_	_	
140-10	26247-26250	the	_	_	_	_	
140-11	26251-26258	process	_	_	_	_	
140-12	26259-26265	writes	_	_	_	_	
140-13	26266-26269	the	_	_	_	_	
140-14	26270-26277	current	_	_	_	_	
140-15	26278-26281	WAL	_	_	_	_	
140-16	26282-26286	page	_	_	_	_	
140-17	26287-26288	(	_	_	_	_	
140-18	26288-26291	not	_	_	_	_	
140-19	26292-26298	filled	_	_	_	_	
140-20	26299-26301	to	_	_	_	_	
140-21	26302-26305	the	_	_	_	_	
140-22	26306-26309	end	_	_	_	_	
140-23	26309-26310	)	_	_	_	_	
140-24	26310-26311	 	_	_	_	_	
140-25	26311-26312	—	_	_	_	_	
140-26	26313-26322	otherwise	_	_	_	_	
140-27	26322-26323	,	_	_	_	_	
140-28	26324-26328	what	_	_	_	_	
140-29	26329-26332	did	_	_	_	_	
140-30	26333-26335	it	_	_	_	_	
140-31	26336-26340	wake	_	_	_	_	
140-32	26341-26343	up	_	_	_	_	
140-33	26344-26347	for	_	_	_	_	
140-34	26347-26348	?	_	_	_	_	

#Text=This algorithm aims to avoid synchronization of the same page several times wherever possible, which is critical for a large stream of updates.
141-1	26349-26353	This	_	_	_	_	
141-2	26354-26363	algorithm	_	_	_	_	
141-3	26364-26368	aims	_	_	_	_	
141-4	26369-26371	to	_	_	_	_	
141-5	26372-26377	avoid	_	_	_	_	
141-6	26378-26393	synchronization	_	_	_	_	
141-7	26394-26396	of	_	_	_	_	
141-8	26397-26400	the	_	_	_	_	
141-9	26401-26405	same	_	_	_	_	
141-10	26406-26410	page	_	_	_	_	
141-11	26411-26418	several	_	_	_	_	
141-12	26419-26424	times	_	_	_	_	
141-13	26425-26433	wherever	_	_	_	_	
141-14	26434-26442	possible	_	_	_	_	
141-15	26442-26443	,	_	_	_	_	
141-16	26444-26449	which	_	_	_	_	
141-17	26450-26452	is	_	_	_	_	
141-18	26453-26461	critical	_	_	_	_	
141-19	26462-26465	for	_	_	_	_	
141-20	26466-26467	a	_	_	_	_	
141-21	26468-26473	large	_	_	_	_	
141-22	26474-26480	stream	_	_	_	_	
141-23	26481-26483	of	_	_	_	_	
141-24	26484-26491	updates	_	_	_	_	
141-25	26491-26492	.	_	_	_	_	

#Text=Asynchronous writing is more efficient than the synchronous since commits of the changes do not wait for writes of WAL pages.
142-1	26493-26505	Asynchronous	_	_	_	_	
142-2	26506-26513	writing	_	_	_	_	
142-3	26514-26516	is	_	_	_	_	
142-4	26517-26521	more	_	_	_	_	
142-5	26522-26531	efficient	_	_	_	_	
142-6	26532-26536	than	_	_	_	_	
142-7	26537-26540	the	_	_	_	_	
142-8	26541-26552	synchronous	_	_	_	_	
142-9	26553-26558	since	_	_	_	_	
142-10	26559-26566	commits	_	_	_	_	
142-11	26567-26569	of	_	_	_	_	
142-12	26570-26573	the	_	_	_	_	
142-13	26574-26581	changes	_	_	_	_	
142-14	26582-26584	do	_	_	_	_	
142-15	26585-26588	not	_	_	_	_	
142-16	26589-26593	wait	_	_	_	_	
142-17	26594-26597	for	_	_	_	_	
142-18	26598-26604	writes	_	_	_	_	
142-19	26605-26607	of	_	_	_	_	
142-20	26608-26611	WAL	_	_	_	_	
142-21	26612-26617	pages	_	_	_	_	
142-22	26617-26618	.	_	_	_	_	

#Text=But the reliability decreases: committed data can be lost in case of failure if less than 3 × wal_writer_delay units of time elapsed between the commit and failure (with the default settings, this is a little longer than half a second).
143-1	26619-26622	But	_	_	_	_	
143-2	26623-26626	the	_	_	_	_	
143-3	26627-26638	reliability	_	_	_	_	
143-4	26639-26648	decreases	_	_	_	_	
143-5	26648-26649	:	_	_	_	_	
143-6	26650-26659	committed	_	_	_	_	
143-7	26660-26664	data	_	_	_	_	
143-8	26665-26668	can	_	_	_	_	
143-9	26669-26671	be	_	_	_	_	
143-10	26672-26676	lost	_	_	_	_	
143-11	26677-26679	in	_	_	_	_	
143-12	26680-26684	case	_	_	_	_	
143-13	26685-26687	of	_	_	_	_	
143-14	26688-26695	failure	_	_	_	_	
143-15	26696-26698	if	_	_	_	_	
143-16	26699-26703	less	_	_	_	_	
143-17	26704-26708	than	_	_	_	_	
143-18	26709-26710	3	_	_	_	_	
143-19	26710-26711	 	_	_	_	_	
143-20	26711-26712	×	_	_	_	_	
143-21	26712-26713	 	_	_	_	_	
143-22	26713-26729	wal_writer_delay	_	_	_	_	
143-23	26730-26735	units	_	_	_	_	
143-24	26736-26738	of	_	_	_	_	
143-25	26739-26743	time	_	_	_	_	
143-26	26744-26751	elapsed	_	_	_	_	
143-27	26752-26759	between	_	_	_	_	
143-28	26760-26763	the	_	_	_	_	
143-29	26764-26770	commit	_	_	_	_	
143-30	26771-26774	and	_	_	_	_	
143-31	26775-26782	failure	_	_	_	_	
143-32	26783-26784	(	_	_	_	_	
143-33	26784-26788	with	_	_	_	_	
143-34	26789-26792	the	_	_	_	_	
143-35	26793-26800	default	_	_	_	_	
143-36	26801-26809	settings	_	_	_	_	
143-37	26809-26810	,	_	_	_	_	
143-38	26811-26815	this	_	_	_	_	
143-39	26816-26818	is	_	_	_	_	
143-40	26819-26820	a	_	_	_	_	
143-41	26821-26827	little	_	_	_	_	
143-42	26828-26834	longer	_	_	_	_	
143-43	26835-26839	than	_	_	_	_	
143-44	26840-26844	half	_	_	_	_	
143-45	26845-26846	a	_	_	_	_	
143-46	26847-26853	second	_	_	_	_	
143-47	26853-26854	)	_	_	_	_	
143-48	26854-26855	.	_	_	_	_	

#Text=Not an easy choice between efficiency and reliability is up to the system administrator.
144-1	26856-26859	Not	_	_	_	_	
144-2	26860-26862	an	_	_	_	_	
144-3	26863-26867	easy	_	_	_	_	
144-4	26868-26874	choice	_	_	_	_	
144-5	26875-26882	between	_	_	_	_	
144-6	26883-26893	efficiency	_	_	_	_	
144-7	26894-26897	and	_	_	_	_	
144-8	26898-26909	reliability	_	_	_	_	
144-9	26910-26912	is	_	_	_	_	
144-10	26913-26915	up	_	_	_	_	
144-11	26916-26918	to	_	_	_	_	
144-12	26919-26922	the	_	_	_	_	
144-13	26923-26929	system	_	_	_	_	
144-14	26930-26943	administrator	_	_	_	_	
144-15	26943-26944	.	_	_	_	_	

#Text=Note that: unlike turning off synchronization (fsync = off), asynchronous mode does not make recovery impossible.
145-1	26945-26949	Note	_	_	_	_	
145-2	26950-26954	that	_	_	_	_	
145-3	26954-26955	:	_	_	_	_	
145-4	26956-26962	unlike	_	_	_	_	
145-5	26963-26970	turning	_	_	_	_	
145-6	26971-26974	off	_	_	_	_	
145-7	26975-26990	synchronization	_	_	_	_	
145-8	26991-26992	(	_	_	_	_	
145-9	26992-26997	fsync	_	_	_	_	
145-10	26998-26999	=	_	_	_	_	
145-11	27000-27003	off	_	_	_	_	
145-12	27003-27004	)	_	_	_	_	
145-13	27004-27005	,	_	_	_	_	
145-14	27006-27018	asynchronous	_	_	_	_	
145-15	27019-27023	mode	_	_	_	_	
145-16	27024-27028	does	_	_	_	_	
145-17	27029-27032	not	_	_	_	_	
145-18	27033-27037	make	_	_	_	_	
145-19	27038-27046	recovery	_	_	_	_	
145-20	27047-27057	impossible	_	_	_	_	
145-21	27057-27058	.	_	_	_	_	

#Text=In case of failure, the system will restore the consistent state, but maybe, some of the last transactions will not be present there.
146-1	27059-27061	In	_	_	_	_	
146-2	27062-27066	case	_	_	_	_	
146-3	27067-27069	of	_	_	_	_	
146-4	27070-27077	failure	_	_	_	_	
146-5	27077-27078	,	_	_	_	_	
146-6	27079-27082	the	_	_	_	_	
146-7	27083-27089	system	_	_	_	_	
146-8	27090-27094	will	_	_	_	_	
146-9	27095-27102	restore	_	_	_	_	
146-10	27103-27106	the	_	_	_	_	
146-11	27107-27117	consistent	_	_	_	_	
146-12	27118-27123	state	_	_	_	_	
146-13	27123-27124	,	_	_	_	_	
146-14	27125-27128	but	_	_	_	_	
146-15	27129-27134	maybe	_	_	_	_	
146-16	27134-27135	,	_	_	_	_	
146-17	27136-27140	some	_	_	_	_	
146-18	27141-27143	of	_	_	_	_	
146-19	27144-27147	the	_	_	_	_	
146-20	27148-27152	last	_	_	_	_	
146-21	27153-27165	transactions	_	_	_	_	
146-22	27166-27170	will	_	_	_	_	
146-23	27171-27174	not	_	_	_	_	
146-24	27175-27177	be	_	_	_	_	
146-25	27178-27185	present	_	_	_	_	
146-26	27186-27191	there	_	_	_	_	
146-27	27191-27192	.	_	_	_	_	

#Text=You can set the synchronous_commit parameter for separate transactions.
147-1	27193-27196	You	_	_	_	_	
147-2	27197-27200	can	_	_	_	_	
147-3	27201-27204	set	_	_	_	_	
147-4	27205-27208	the	_	_	_	_	
147-5	27209-27227	synchronous_commit	_	_	_	_	
147-6	27228-27237	parameter	_	_	_	_	
147-7	27238-27241	for	_	_	_	_	
147-8	27242-27250	separate	_	_	_	_	
147-9	27251-27263	transactions	_	_	_	_	
147-10	27263-27264	.	_	_	_	_	

#Text=This enables increasing the performance by sacrificing the reliability only of some transactions.
148-1	27265-27269	This	_	_	_	_	
148-2	27270-27277	enables	_	_	_	_	
148-3	27278-27288	increasing	_	_	_	_	
148-4	27289-27292	the	_	_	_	_	
148-5	27293-27304	performance	_	_	_	_	
148-6	27305-27307	by	_	_	_	_	
148-7	27308-27319	sacrificing	_	_	_	_	
148-8	27320-27323	the	_	_	_	_	
148-9	27324-27335	reliability	_	_	_	_	
148-10	27336-27340	only	_	_	_	_	
148-11	27341-27343	of	_	_	_	_	
148-12	27344-27348	some	_	_	_	_	
148-13	27349-27361	transactions	_	_	_	_	
148-14	27361-27362	.	_	_	_	_	

#Text=Say, financial transactions must be committed synchronously, while chat messages can be compromised.
149-1	27363-27366	Say	_	_	_	_	
149-2	27366-27367	,	_	_	_	_	
149-3	27368-27377	financial	_	_	_	_	
149-4	27378-27390	transactions	_	_	_	_	
149-5	27391-27395	must	_	_	_	_	
149-6	27396-27398	be	_	_	_	_	
149-7	27399-27408	committed	_	_	_	_	
149-8	27409-27422	synchronously	_	_	_	_	
149-9	27422-27423	,	_	_	_	_	
149-10	27424-27429	while	_	_	_	_	
149-11	27430-27434	chat	_	_	_	_	
149-12	27435-27443	messages	_	_	_	_	
149-13	27444-27447	can	_	_	_	_	
149-14	27448-27450	be	_	_	_	_	
149-15	27451-27462	compromised	_	_	_	_	
149-16	27462-27463	.	_	_	_	_	

#Text=Actually both modes work together.
150-1	27464-27472	Actually	_	_	_	_	
150-2	27473-27477	both	_	_	_	_	
150-3	27478-27483	modes	_	_	_	_	
150-4	27484-27488	work	_	_	_	_	
150-5	27489-27497	together	_	_	_	_	
150-6	27497-27498	.	_	_	_	_	

#Text=Even with a synchronous commit, WAL records of a long transaction will be written asynchronously in order to free WAL buffers.
151-1	27499-27503	Even	_	_	_	_	
151-2	27504-27508	with	_	_	_	_	
151-3	27509-27510	a	_	_	_	_	
151-4	27511-27522	synchronous	_	_	_	_	
151-5	27523-27529	commit	_	_	_	_	
151-6	27529-27530	,	_	_	_	_	
151-7	27531-27534	WAL	_	_	_	_	
151-8	27535-27542	records	_	_	_	_	
151-9	27543-27545	of	_	_	_	_	
151-10	27546-27547	a	_	_	_	_	
151-11	27548-27552	long	_	_	_	_	
151-12	27553-27564	transaction	_	_	_	_	
151-13	27565-27569	will	_	_	_	_	
151-14	27570-27572	be	_	_	_	_	
151-15	27573-27580	written	_	_	_	_	
151-16	27581-27595	asynchronously	_	_	_	_	
151-17	27596-27598	in	_	_	_	_	
151-18	27599-27604	order	_	_	_	_	
151-19	27605-27607	to	_	_	_	_	
151-20	27608-27612	free	_	_	_	_	
151-21	27613-27616	WAL	_	_	_	_	
151-22	27617-27624	buffers	_	_	_	_	
151-23	27624-27625	.	_	_	_	_	

#Text=And if during a flush of a page from the buffer cache it appears that the corresponding WAL record is not on disk yet, it will be immediately flushed in the synchronous mode.
152-1	27626-27629	And	_	_	_	_	
152-2	27630-27632	if	_	_	_	_	
152-3	27633-27639	during	_	_	_	_	
152-4	27640-27641	a	_	_	_	_	
152-5	27642-27647	flush	_	_	_	_	
152-6	27648-27650	of	_	_	_	_	
152-7	27651-27652	a	_	_	_	_	
152-8	27653-27657	page	_	_	_	_	
152-9	27658-27662	from	_	_	_	_	
152-10	27663-27666	the	_	_	_	_	
152-11	27667-27673	buffer	_	_	_	_	
152-12	27674-27679	cache	_	_	_	_	
152-13	27680-27682	it	_	_	_	_	
152-14	27683-27690	appears	_	_	_	_	
152-15	27691-27695	that	_	_	_	_	
152-16	27696-27699	the	_	_	_	_	
152-17	27700-27713	corresponding	_	_	_	_	
152-18	27714-27717	WAL	_	_	_	_	
152-19	27718-27724	record	_	_	_	_	
152-20	27725-27727	is	_	_	_	_	
152-21	27728-27731	not	_	_	_	_	
152-22	27732-27734	on	_	_	_	_	
152-23	27735-27739	disk	_	_	_	_	
152-24	27740-27743	yet	_	_	_	_	
152-25	27743-27744	,	_	_	_	_	
152-26	27745-27747	it	_	_	_	_	
152-27	27748-27752	will	_	_	_	_	
152-28	27753-27755	be	_	_	_	_	
152-29	27756-27767	immediately	_	_	_	_	
152-30	27768-27775	flushed	_	_	_	_	
152-31	27776-27778	in	_	_	_	_	
152-32	27779-27782	the	_	_	_	_	
152-33	27783-27794	synchronous	_	_	_	_	
152-34	27795-27799	mode	_	_	_	_	
152-35	27799-27800	.	_	_	_	_	

#Text=To get an insight into the gains of an asynchronous commit, let's try to repeat the pgbench test in this mode.
#Text==> ALTER SYSTEM SET synchronous_commit = off;
#Text==> SELECT pg_reload_conf();
#Text=student$ pgbench -T 30 test
#Text=starting vacuum...end.
#Text=transaction type: TPC-B (sort of)
#Text=scaling factor: 1
#Text=query mode: simple
#Text=number of clients: 1
#Text=number of threads: 1
#Text=duration: 30 s
#Text=number of transactions actually processed: 45439
#Text=latency average = 0.660 ms
#Text=tps = 1514.561710 (including connections establishing)
#Text=tps = 1514.710558 (excluding connections establishing)
#Text=With synchronous commits, we got approximately 900 transactions per second (tps) and 1500 tps with asynchronous commits.
153-1	27801-27803	To	_	_	_	_	
153-2	27804-27807	get	_	_	_	_	
153-3	27808-27810	an	_	_	_	_	
153-4	27811-27818	insight	_	_	_	_	
153-5	27819-27823	into	_	_	_	_	
153-6	27824-27827	the	_	_	_	_	
153-7	27828-27833	gains	_	_	_	_	
153-8	27834-27836	of	_	_	_	_	
153-9	27837-27839	an	_	_	_	_	
153-10	27840-27852	asynchronous	_	_	_	_	
153-11	27853-27859	commit	_	_	_	_	
153-12	27859-27860	,	_	_	_	_	
153-13	27861-27866	let's	_	_	_	_	
153-14	27867-27870	try	_	_	_	_	
153-15	27871-27873	to	_	_	_	_	
153-16	27874-27880	repeat	_	_	_	_	
153-17	27881-27884	the	_	_	_	_	
153-18	27885-27892	pgbench	_	_	_	_	
153-19	27893-27897	test	_	_	_	_	
153-20	27898-27900	in	_	_	_	_	
153-21	27901-27905	this	_	_	_	_	
153-22	27906-27910	mode	_	_	_	_	
153-23	27910-27911	.	_	_	_	_	
153-24	27912-27913	=	_	_	_	_	
153-25	27913-27914	>	_	_	_	_	
153-26	27915-27920	ALTER	_	_	_	_	
153-27	27921-27927	SYSTEM	_	_	_	_	
153-28	27928-27931	SET	_	_	_	_	
153-29	27932-27950	synchronous_commit	*	parameter	_	_	
153-30	27951-27952	=	_	_	_	_	
153-31	27953-27956	off	*	value	Associated-With	153-29	
153-32	27956-27957	;	_	_	_	_	
153-33	27958-27959	=	_	_	_	_	
153-34	27959-27960	>	_	_	_	_	
153-35	27961-27967	SELECT	_	_	_	_	
153-36	27968-27982	pg_reload_conf	_	_	_	_	
153-37	27982-27983	(	_	_	_	_	
153-38	27983-27984	)	_	_	_	_	
153-39	27984-27985	;	_	_	_	_	
153-40	27986-27993	student	_	_	_	_	
153-41	27993-27994	$	_	_	_	_	
153-42	27995-28002	pgbench	_	_	_	_	
153-43	28003-28004	-	_	_	_	_	
153-44	28004-28005	T	_	_	_	_	
153-45	28006-28008	30	_	_	_	_	
153-46	28009-28013	test	_	_	_	_	
153-47	28014-28022	starting	_	_	_	_	
153-48	28023-28029	vacuum	_	_	_	_	
153-49	28029-28030	.	_	_	_	_	
153-50	28030-28031	.	_	_	_	_	
153-51	28031-28032	.	_	_	_	_	
153-52	28032-28035	end	_	_	_	_	
153-53	28035-28036	.	_	_	_	_	
153-54	28037-28048	transaction	_	_	_	_	
153-55	28049-28053	type	_	_	_	_	
153-56	28053-28054	:	_	_	_	_	
153-57	28055-28060	TPC-B	_	_	_	_	
153-58	28061-28062	(	_	_	_	_	
153-59	28062-28066	sort	_	_	_	_	
153-60	28067-28069	of	_	_	_	_	
153-61	28069-28070	)	_	_	_	_	
153-62	28071-28078	scaling	_	_	_	_	
153-63	28079-28085	factor	_	_	_	_	
153-64	28085-28086	:	_	_	_	_	
153-65	28087-28088	1	_	_	_	_	
153-66	28089-28094	query	_	_	_	_	
153-67	28095-28099	mode	_	_	_	_	
153-68	28099-28100	:	_	_	_	_	
153-69	28101-28107	simple	_	_	_	_	
153-70	28108-28114	number	_	_	_	_	
153-71	28115-28117	of	_	_	_	_	
153-72	28118-28125	clients	_	_	_	_	
153-73	28125-28126	:	_	_	_	_	
153-74	28127-28128	1	_	_	_	_	
153-75	28129-28135	number	_	_	_	_	
153-76	28136-28138	of	_	_	_	_	
153-77	28139-28146	threads	_	_	_	_	
153-78	28146-28147	:	_	_	_	_	
153-79	28148-28149	1	_	_	_	_	
153-80	28150-28158	duration	_	_	_	_	
153-81	28158-28159	:	_	_	_	_	
153-82	28160-28162	30	_	_	_	_	
153-83	28163-28164	s	_	_	_	_	
153-84	28165-28171	number	_	_	_	_	
153-85	28172-28174	of	_	_	_	_	
153-86	28175-28187	transactions	_	_	_	_	
153-87	28188-28196	actually	_	_	_	_	
153-88	28197-28206	processed	_	_	_	_	
153-89	28206-28207	:	_	_	_	_	
153-90	28208-28213	45439	_	_	_	_	
153-91	28214-28221	latency	_	_	_	_	
153-92	28222-28229	average	_	_	_	_	
153-93	28230-28231	=	_	_	_	_	
153-94	28232-28237	0.660	_	_	_	_	
153-95	28238-28240	ms	_	_	_	_	
153-96	28241-28244	tps	_	_	_	_	
153-97	28245-28246	=	_	_	_	_	
153-98	28247-28258	1514.561710	_	_	_	_	
153-99	28259-28260	(	_	_	_	_	
153-100	28260-28269	including	_	_	_	_	
153-101	28270-28281	connections	_	_	_	_	
153-102	28282-28294	establishing	_	_	_	_	
153-103	28294-28295	)	_	_	_	_	
153-104	28296-28299	tps	_	_	_	_	
153-105	28300-28301	=	_	_	_	_	
153-106	28302-28313	1514.710558	_	_	_	_	
153-107	28314-28315	(	_	_	_	_	
153-108	28315-28324	excluding	_	_	_	_	
153-109	28325-28336	connections	_	_	_	_	
153-110	28337-28349	establishing	_	_	_	_	
153-111	28349-28350	)	_	_	_	_	
153-112	28351-28355	With	_	_	_	_	
153-113	28356-28367	synchronous	_	_	_	_	
153-114	28368-28375	commits	_	_	_	_	
153-115	28375-28376	,	_	_	_	_	
153-116	28377-28379	we	_	_	_	_	
153-117	28380-28383	got	_	_	_	_	
153-118	28384-28397	approximately	_	_	_	_	
153-119	28398-28401	900	_	_	_	_	
153-120	28401-28402	 	_	_	_	_	
153-121	28402-28414	transactions	_	_	_	_	
153-122	28415-28418	per	_	_	_	_	
153-123	28419-28425	second	_	_	_	_	
153-124	28426-28427	(	_	_	_	_	
153-125	28427-28430	tps	_	_	_	_	
153-126	28430-28431	)	_	_	_	_	
153-127	28432-28435	and	_	_	_	_	
153-128	28436-28440	1500	_	_	_	_	
153-129	28440-28441	 	_	_	_	_	
153-130	28441-28444	tps	_	_	_	_	
153-131	28445-28449	with	_	_	_	_	
153-132	28450-28462	asynchronous	_	_	_	_	
153-133	28463-28470	commits	_	_	_	_	
153-134	28470-28471	.	_	_	_	_	

#Text=It goes without saying that in a real-life system under the actual load, the proportion will be different, but it is clear that for short transactions the effect can be pretty considerable.
154-1	28472-28474	It	_	_	_	_	
154-2	28475-28479	goes	_	_	_	_	
154-3	28480-28487	without	_	_	_	_	
154-4	28488-28494	saying	_	_	_	_	
154-5	28495-28499	that	_	_	_	_	
154-6	28500-28502	in	_	_	_	_	
154-7	28503-28504	a	_	_	_	_	
154-8	28505-28514	real-life	_	_	_	_	
154-9	28515-28521	system	_	_	_	_	
154-10	28522-28527	under	_	_	_	_	
154-11	28528-28531	the	_	_	_	_	
154-12	28532-28538	actual	_	_	_	_	
154-13	28539-28543	load	_	_	_	_	
154-14	28543-28544	,	_	_	_	_	
154-15	28545-28548	the	_	_	_	_	
154-16	28549-28559	proportion	_	_	_	_	
154-17	28560-28564	will	_	_	_	_	
154-18	28565-28567	be	_	_	_	_	
154-19	28568-28577	different	_	_	_	_	
154-20	28577-28578	,	_	_	_	_	
154-21	28579-28582	but	_	_	_	_	
154-22	28583-28585	it	_	_	_	_	
154-23	28586-28588	is	_	_	_	_	
154-24	28589-28594	clear	_	_	_	_	
154-25	28595-28599	that	_	_	_	_	
154-26	28600-28603	for	_	_	_	_	
154-27	28604-28609	short	_	_	_	_	
154-28	28610-28622	transactions	_	_	_	_	
154-29	28623-28626	the	_	_	_	_	
154-30	28627-28633	effect	_	_	_	_	
154-31	28634-28637	can	_	_	_	_	
154-32	28638-28640	be	_	_	_	_	
154-33	28641-28647	pretty	_	_	_	_	
154-34	28648-28660	considerable	_	_	_	_	
154-35	28660-28661	.	_	_	_	_	

#Text=Here the series of articles on WAL logging comes to an end.
155-1	28662-28666	Here	_	_	_	_	
155-2	28667-28670	the	_	_	_	_	
155-3	28671-28677	series	_	_	_	_	
155-4	28678-28680	of	_	_	_	_	
155-5	28681-28689	articles	_	_	_	_	
155-6	28690-28692	on	_	_	_	_	
155-7	28693-28696	WAL	_	_	_	_	
155-8	28697-28704	logging	_	_	_	_	
155-9	28705-28710	comes	_	_	_	_	
155-10	28711-28713	to	_	_	_	_	
155-11	28714-28716	an	_	_	_	_	
155-12	28717-28720	end	_	_	_	_	
155-13	28720-28721	.	_	_	_	_	

#Text=If anything critical is unaddressed, I would appreciate if you provide comments.
156-1	28722-28724	If	_	_	_	_	
156-2	28725-28733	anything	_	_	_	_	
156-3	28734-28742	critical	_	_	_	_	
156-4	28743-28745	is	_	_	_	_	
156-5	28746-28757	unaddressed	_	_	_	_	
156-6	28757-28758	,	_	_	_	_	
156-7	28759-28760	I	_	_	_	_	
156-8	28761-28766	would	_	_	_	_	
156-9	28767-28777	appreciate	_	_	_	_	
156-10	28778-28780	if	_	_	_	_	
156-11	28781-28784	you	_	_	_	_	
156-12	28785-28792	provide	_	_	_	_	
156-13	28793-28801	comments	_	_	_	_	
156-14	28801-28802	.	_	_	_	_	

#Text=Thank you all!
157-1	28803-28808	Thank	_	_	_	_	
157-2	28809-28812	you	_	_	_	_	
157-3	28813-28816	all	_	_	_	_	
157-4	28816-28817	!	_	_	_	_	

#Text=And next, amazing adventures are awaiting us in the world of locks, but that's another story.
158-1	28818-28821	And	_	_	_	_	
158-2	28822-28826	next	_	_	_	_	
158-3	28826-28827	,	_	_	_	_	
158-4	28828-28835	amazing	_	_	_	_	
158-5	28836-28846	adventures	_	_	_	_	
158-6	28847-28850	are	_	_	_	_	
158-7	28851-28859	awaiting	_	_	_	_	
158-8	28860-28862	us	_	_	_	_	
158-9	28863-28865	in	_	_	_	_	
158-10	28866-28869	the	_	_	_	_	
158-11	28870-28875	world	_	_	_	_	
158-12	28876-28878	of	_	_	_	_	
158-13	28879-28884	locks	_	_	_	_	
158-14	28884-28885	,	_	_	_	_	
158-15	28886-28889	but	_	_	_	_	
158-16	28890-28896	that's	_	_	_	_	
158-17	28897-28904	another	_	_	_	_	
158-18	28905-28910	story	_	_	_	_	
158-19	28910-28911	.	_	_	_	_	

#Text=Tags:
#Text=postgresql
#Text=wal
#Text=write-ahead log
#Text=Add tags
#Text=Hubs:
#Text=Postgres Professional corporate blog
#Text=PostgreSQL
#Text=SQL
#Text=Specify the reason of the downvote so the author could improve the post
#Text=Send anonymously
#Text=Mark this post with your tags
#Text=You should divide tags with commas.
159-1	28912-28916	Tags	_	_	_	_	
159-2	28916-28917	:	_	_	_	_	
159-3	28918-28928	postgresql	_	_	_	_	
159-4	28929-28932	wal	_	_	_	_	
159-5	28933-28944	write-ahead	_	_	_	_	
159-6	28945-28948	log	_	_	_	_	
159-7	28949-28952	Add	_	_	_	_	
159-8	28953-28957	tags	_	_	_	_	
159-9	28958-28962	Hubs	_	_	_	_	
159-10	28962-28963	:	_	_	_	_	
159-11	28964-28972	Postgres	_	_	_	_	
159-12	28973-28985	Professional	_	_	_	_	
159-13	28986-28995	corporate	_	_	_	_	
159-14	28996-29000	blog	_	_	_	_	
159-15	29001-29011	PostgreSQL	_	_	_	_	
159-16	29012-29015	SQL	_	_	_	_	
159-17	29016-29023	Specify	_	_	_	_	
159-18	29024-29027	the	_	_	_	_	
159-19	29028-29034	reason	_	_	_	_	
159-20	29035-29037	of	_	_	_	_	
159-21	29038-29041	the	_	_	_	_	
159-22	29042-29050	downvote	_	_	_	_	
159-23	29051-29053	so	_	_	_	_	
159-24	29054-29057	the	_	_	_	_	
159-25	29058-29064	author	_	_	_	_	
159-26	29065-29070	could	_	_	_	_	
159-27	29071-29078	improve	_	_	_	_	
159-28	29079-29082	the	_	_	_	_	
159-29	29083-29087	post	_	_	_	_	
159-30	29088-29092	Send	_	_	_	_	
159-31	29093-29104	anonymously	_	_	_	_	
159-32	29105-29109	Mark	_	_	_	_	
159-33	29110-29114	this	_	_	_	_	
159-34	29115-29119	post	_	_	_	_	
159-35	29120-29124	with	_	_	_	_	
159-36	29125-29129	your	_	_	_	_	
159-37	29130-29134	tags	_	_	_	_	
159-38	29135-29138	You	_	_	_	_	
159-39	29139-29145	should	_	_	_	_	
159-40	29146-29152	divide	_	_	_	_	
159-41	29153-29157	tags	_	_	_	_	
159-42	29158-29162	with	_	_	_	_	
159-43	29163-29169	commas	_	_	_	_	
159-44	29169-29170	.	_	_	_	_	

#Text=E.g.: programming, algorithms
#Text=Save
#Text=3.1k
#Text=Comment
#Text=Share
#Text=Copy link
#Text=Facebook
#Text=Twitter
#Text=Telegram
#Text=Pocket
#Text=Violation
#Text=Describe nature of the violation
#Text=Send
#Text=Postgres Professional
#Text=Разработчик СУБД Postgres Pro
#Text=140.5
#Text=Karma
#Text=0.0
#Text=Rating
#Text=Егор Рогов erogov
#Text=Пользователь
#Text=Payment system
#Text=Facebook
#Text=Twitter
#Text=Google+
#Text=LiveJournal
#Text=Similar posts
#Text=April 3, 2020 at 02:37 PM
#Text=WAL in PostgreSQL: 3.
160-1	29171-29174	E.g	_	_	_	_	
160-2	29174-29175	.	_	_	_	_	
160-3	29175-29176	:	_	_	_	_	
160-4	29177-29188	programming	_	_	_	_	
160-5	29188-29189	,	_	_	_	_	
160-6	29190-29200	algorithms	_	_	_	_	
160-7	29201-29205	Save	_	_	_	_	
160-8	29206-29210	3.1k	_	_	_	_	
160-9	29211-29218	Comment	_	_	_	_	
160-10	29219-29224	Share	_	_	_	_	
160-11	29225-29229	Copy	_	_	_	_	
160-12	29230-29234	link	_	_	_	_	
160-13	29235-29243	Facebook	_	_	_	_	
160-14	29244-29251	Twitter	_	_	_	_	
160-15	29252-29260	Telegram	_	_	_	_	
160-16	29261-29267	Pocket	_	_	_	_	
160-17	29268-29277	Violation	_	_	_	_	
160-18	29278-29286	Describe	_	_	_	_	
160-19	29287-29293	nature	_	_	_	_	
160-20	29294-29296	of	_	_	_	_	
160-21	29297-29300	the	_	_	_	_	
160-22	29301-29310	violation	_	_	_	_	
160-23	29311-29315	Send	_	_	_	_	
160-24	29316-29324	Postgres	_	_	_	_	
160-25	29325-29337	Professional	_	_	_	_	
160-26	29338-29349	Разработчик	_	_	_	_	
160-27	29350-29354	СУБД	_	_	_	_	
160-28	29355-29363	Postgres	_	_	_	_	
160-29	29364-29367	Pro	_	_	_	_	
160-30	29368-29373	140.5	_	_	_	_	
160-31	29374-29379	Karma	_	_	_	_	
160-32	29380-29383	0.0	_	_	_	_	
160-33	29384-29390	Rating	_	_	_	_	
160-34	29391-29395	Егор	_	_	_	_	
160-35	29396-29401	Рогов	_	_	_	_	
160-36	29401-29402	 	_	_	_	_	
160-37	29402-29408	erogov	_	_	_	_	
160-38	29409-29421	Пользователь	_	_	_	_	
160-39	29422-29429	Payment	_	_	_	_	
160-40	29430-29436	system	_	_	_	_	
160-41	29437-29445	Facebook	_	_	_	_	
160-42	29446-29453	Twitter	_	_	_	_	
160-43	29454-29460	Google	_	_	_	_	
160-44	29460-29461	+	_	_	_	_	
160-45	29462-29473	LiveJournal	_	_	_	_	
160-46	29474-29481	Similar	_	_	_	_	
160-47	29482-29487	posts	_	_	_	_	
160-48	29488-29493	April	_	_	_	_	
160-49	29494-29495	3	_	_	_	_	
160-50	29495-29496	,	_	_	_	_	
160-51	29497-29501	2020	_	_	_	_	
160-52	29502-29504	at	_	_	_	_	
160-53	29505-29507	02	_	_	_	_	
160-54	29507-29508	:	_	_	_	_	
160-55	29508-29510	37	_	_	_	_	
160-56	29511-29513	PM	_	_	_	_	
160-57	29514-29517	WAL	_	_	_	_	
160-58	29518-29520	in	_	_	_	_	
160-59	29521-29531	PostgreSQL	_	_	_	_	
160-60	29531-29532	:	_	_	_	_	
160-61	29533-29534	3	_	_	_	_	
160-62	29534-29535	.	_	_	_	_	

#Text=Checkpoint
#Text=2.7k
#Text=March 26, 2020 at 05:50 PM
#Text=WAL in PostgreSQL: 2.
161-1	29536-29546	Checkpoint	_	_	_	_	
161-2	29547-29551	2.7k	_	_	_	_	
161-3	29552-29557	March	_	_	_	_	
161-4	29558-29560	26	_	_	_	_	
161-5	29560-29561	,	_	_	_	_	
161-6	29562-29566	2020	_	_	_	_	
161-7	29567-29569	at	_	_	_	_	
161-8	29570-29572	05	_	_	_	_	
161-9	29572-29573	:	_	_	_	_	
161-10	29573-29575	50	_	_	_	_	
161-11	29576-29578	PM	_	_	_	_	
161-12	29579-29582	WAL	_	_	_	_	
161-13	29583-29585	in	_	_	_	_	
161-14	29586-29596	PostgreSQL	_	_	_	_	
161-15	29596-29597	:	_	_	_	_	
161-16	29598-29599	2	_	_	_	_	
161-17	29599-29600	.	_	_	_	_	

#Text=Write-Ahead Log
#Text=2.3k
#Text=March 10, 2020 at 02:12 PM
#Text=WAL in PostgreSQL: 1.
162-1	29601-29612	Write-Ahead	_	_	_	_	
162-2	29613-29616	Log	_	_	_	_	
162-3	29617-29621	2.3k	_	_	_	_	
162-4	29622-29627	March	_	_	_	_	
162-5	29628-29630	10	_	_	_	_	
162-6	29630-29631	,	_	_	_	_	
162-7	29632-29636	2020	_	_	_	_	
162-8	29637-29639	at	_	_	_	_	
162-9	29640-29642	02	_	_	_	_	
162-10	29642-29643	:	_	_	_	_	
162-11	29643-29645	12	_	_	_	_	
162-12	29646-29648	PM	_	_	_	_	
162-13	29649-29652	WAL	_	_	_	_	
162-14	29653-29655	in	_	_	_	_	
162-15	29656-29666	PostgreSQL	_	_	_	_	
162-16	29666-29667	:	_	_	_	_	
162-17	29668-29669	1	_	_	_	_	
162-18	29669-29670	.	_	_	_	_	

#Text=Buffer Cache
#Text=3.4k
#Text=Comments
#Text=Only users with full accounts can post comments.
163-1	29671-29677	Buffer	_	_	_	_	
163-2	29678-29683	Cache	_	_	_	_	
163-3	29684-29688	3.4k	_	_	_	_	
163-4	29689-29697	Comments	_	_	_	_	
163-5	29698-29702	Only	_	_	_	_	
163-6	29703-29708	users	_	_	_	_	
163-7	29709-29713	with	_	_	_	_	
163-8	29713-29714	 	_	_	_	_	
163-9	29714-29718	full	_	_	_	_	
163-10	29719-29727	accounts	_	_	_	_	
163-11	29728-29731	can	_	_	_	_	
163-12	29732-29736	post	_	_	_	_	
163-13	29737-29745	comments	_	_	_	_	
163-14	29745-29746	.	_	_	_	_	

#Text=Log in, please.
164-1	29747-29750	Log	_	_	_	_	
164-2	29751-29753	in	_	_	_	_	
164-3	29753-29754	,	_	_	_	_	
164-4	29755-29761	please	_	_	_	_	
164-5	29761-29762	.	_	_	_	_	

#Text=Information
#Text=Foundation date
#Text=January 27, 2015
#Text=Website
#Text=postgrespro.ru
#Text=Number of employees
#Text=51–100 employees
#Text=Registration date
#Text=September 30, 2015
#Text=Representative
#Text=Иван Панченко
#Text=Links
#Text=Конференция разработчиков и пользователей PostgreSQL PGConf.Russia
#Text=pgconf.ru
#Text=Blog on Habr
#Text=Locks in PostgreSQL: 4.
165-1	29763-29774	Information	_	_	_	_	
165-2	29775-29785	Foundation	_	_	_	_	
165-3	29786-29790	date	_	_	_	_	
165-4	29791-29798	January	_	_	_	_	
165-5	29799-29801	27	_	_	_	_	
165-6	29801-29802	,	_	_	_	_	
165-7	29803-29807	2015	_	_	_	_	
165-8	29808-29815	Website	_	_	_	_	
165-9	29816-29830	postgrespro.ru	_	_	_	_	
165-10	29831-29837	Number	_	_	_	_	
165-11	29838-29840	of	_	_	_	_	
165-12	29841-29850	employees	_	_	_	_	
165-13	29851-29853	51	_	_	_	_	
165-14	29853-29854	–	_	_	_	_	
165-15	29854-29857	100	_	_	_	_	
165-16	29858-29867	employees	_	_	_	_	
165-17	29868-29880	Registration	_	_	_	_	
165-18	29881-29885	date	_	_	_	_	
165-19	29886-29895	September	_	_	_	_	
165-20	29896-29898	30	_	_	_	_	
165-21	29898-29899	,	_	_	_	_	
165-22	29900-29904	2015	_	_	_	_	
165-23	29905-29919	Representative	_	_	_	_	
165-24	29920-29924	Иван	_	_	_	_	
165-25	29925-29933	Панченко	_	_	_	_	
165-26	29934-29939	Links	_	_	_	_	
165-27	29940-29951	Конференция	_	_	_	_	
165-28	29952-29965	разработчиков	_	_	_	_	
165-29	29966-29967	и	_	_	_	_	
165-30	29968-29981	пользователей	_	_	_	_	
165-31	29982-29992	PostgreSQL	_	_	_	_	
165-32	29993-30006	PGConf.Russia	_	_	_	_	
165-33	30007-30016	pgconf.ru	_	_	_	_	
165-34	30017-30021	Blog	_	_	_	_	
165-35	30022-30024	on	_	_	_	_	
165-36	30025-30029	Habr	_	_	_	_	
165-37	30030-30035	Locks	_	_	_	_	
165-38	30036-30038	in	_	_	_	_	
165-39	30039-30049	PostgreSQL	_	_	_	_	
165-40	30049-30050	:	_	_	_	_	
165-41	30051-30052	4	_	_	_	_	
165-42	30052-30053	.	_	_	_	_	

#Text=Locks in memory
#Text=2.9k
#Text=Locks in PostgreSQL: 3.
166-1	30054-30059	Locks	_	_	_	_	
166-2	30060-30062	in	_	_	_	_	
166-3	30063-30069	memory	_	_	_	_	
166-4	30070-30074	2.9k	_	_	_	_	
166-5	30075-30080	Locks	_	_	_	_	
166-6	30081-30083	in	_	_	_	_	
166-7	30084-30094	PostgreSQL	_	_	_	_	
166-8	30094-30095	:	_	_	_	_	
166-9	30096-30097	3	_	_	_	_	
166-10	30097-30098	.	_	_	_	_	

#Text=Other locks
#Text=3.9k
#Text=Locks in PostgreSQL: 2.
167-1	30099-30104	Other	_	_	_	_	
167-2	30105-30110	locks	_	_	_	_	
167-3	30111-30115	3.9k	_	_	_	_	
167-4	30116-30121	Locks	_	_	_	_	
167-5	30122-30124	in	_	_	_	_	
167-6	30125-30135	PostgreSQL	_	_	_	_	
167-7	30135-30136	:	_	_	_	_	
167-8	30137-30138	2	_	_	_	_	
167-9	30138-30139	.	_	_	_	_	

#Text=Row-level locks
#Text=3.8k
#Text=Locks in PostgreSQL: 1.
168-1	30140-30149	Row-level	_	_	_	_	
168-2	30150-30155	locks	_	_	_	_	
168-3	30156-30160	3.8k	_	_	_	_	
168-4	30161-30166	Locks	_	_	_	_	
168-5	30167-30169	in	_	_	_	_	
168-6	30170-30180	PostgreSQL	_	_	_	_	
168-7	30180-30181	:	_	_	_	_	
168-8	30182-30183	1	_	_	_	_	
168-9	30183-30184	.	_	_	_	_	

#Text=Relation-level locks
#Text=3.1k
#Text=Parallelism in PostgreSQL: treatment of trees and conscience
#Text=1.7k
#Text=JSONPath in PostgreSQL: committing patches and selecting apartments
#Text=3.6k
#Text=What is Baked in the Baker's Dozen?
169-1	30185-30199	Relation-level	_	_	_	_	
169-2	30200-30205	locks	_	_	_	_	
169-3	30206-30210	3.1k	_	_	_	_	
169-4	30211-30222	Parallelism	_	_	_	_	
169-5	30223-30225	in	_	_	_	_	
169-6	30226-30236	PostgreSQL	_	_	_	_	
169-7	30236-30237	:	_	_	_	_	
169-8	30238-30247	treatment	_	_	_	_	
169-9	30248-30250	of	_	_	_	_	
169-10	30251-30256	trees	_	_	_	_	
169-11	30257-30260	and	_	_	_	_	
169-12	30261-30271	conscience	_	_	_	_	
169-13	30272-30276	1.7k	_	_	_	_	
169-14	30277-30285	JSONPath	_	_	_	_	
169-15	30286-30288	in	_	_	_	_	
169-16	30289-30299	PostgreSQL	_	_	_	_	
169-17	30299-30300	:	_	_	_	_	
169-18	30301-30311	committing	_	_	_	_	
169-19	30312-30319	patches	_	_	_	_	
169-20	30320-30323	and	_	_	_	_	
169-21	30324-30333	selecting	_	_	_	_	
169-22	30334-30344	apartments	_	_	_	_	
169-23	30345-30349	3.6k	_	_	_	_	
169-24	30350-30354	What	_	_	_	_	
169-25	30355-30357	is	_	_	_	_	
169-26	30358-30363	Baked	_	_	_	_	
169-27	30364-30366	in	_	_	_	_	
169-28	30367-30370	the	_	_	_	_	
169-29	30371-30378	Baker's	_	_	_	_	
169-30	30379-30384	Dozen	_	_	_	_	
169-31	30384-30385	?	_	_	_	_	

#Text=916
#Text=WAL in PostgreSQL: 4.
170-1	30386-30389	916	_	_	_	_	
170-2	30390-30393	WAL	_	_	_	_	
170-3	30394-30396	in	_	_	_	_	
170-4	30397-30407	PostgreSQL	_	_	_	_	
170-5	30407-30408	:	_	_	_	_	
170-6	30409-30410	4	_	_	_	_	
170-7	30410-30411	.	_	_	_	_	

#Text=Setup and Tuning
#Text=3.1k
#Text=WAL in PostgreSQL: 3.
171-1	30412-30417	Setup	_	_	_	_	
171-2	30418-30421	and	_	_	_	_	
171-3	30422-30428	Tuning	_	_	_	_	
171-4	30429-30433	3.1k	_	_	_	_	
171-5	30434-30437	WAL	_	_	_	_	
171-6	30438-30440	in	_	_	_	_	
171-7	30441-30451	PostgreSQL	_	_	_	_	
171-8	30451-30452	:	_	_	_	_	
171-9	30453-30454	3	_	_	_	_	
171-10	30454-30455	.	_	_	_	_	

#Text=Checkpoint
#Text=2.7k
#Text=WAL in PostgreSQL: 2.
172-1	30456-30466	Checkpoint	_	_	_	_	
172-2	30467-30471	2.7k	_	_	_	_	
172-3	30472-30475	WAL	_	_	_	_	
172-4	30476-30478	in	_	_	_	_	
172-5	30479-30489	PostgreSQL	_	_	_	_	
172-6	30489-30490	:	_	_	_	_	
172-7	30491-30492	2	_	_	_	_	
172-8	30492-30493	.	_	_	_	_	

#Text=Write-Ahead Log
#Text=2.3k
#Text=WAL in PostgreSQL: 1.
173-1	30494-30505	Write-Ahead	_	_	_	_	
173-2	30506-30509	Log	_	_	_	_	
173-3	30510-30514	2.3k	_	_	_	_	
173-4	30515-30518	WAL	_	_	_	_	
173-5	30519-30521	in	_	_	_	_	
173-6	30522-30532	PostgreSQL	_	_	_	_	
173-7	30532-30533	:	_	_	_	_	
173-8	30534-30535	1	_	_	_	_	
173-9	30535-30536	.	_	_	_	_	

#Text=Buffer Cache
#Text=3.4k
#Text=On recursive queries
#Text=5.6k
#Text=MVCC in PostgreSQL-8.
174-1	30537-30543	Buffer	_	_	_	_	
174-2	30544-30549	Cache	_	_	_	_	
174-3	30550-30554	3.4k	_	_	_	_	
174-4	30555-30557	On	_	_	_	_	
174-5	30558-30567	recursive	_	_	_	_	
174-6	30568-30575	queries	_	_	_	_	
174-7	30576-30580	5.6k	_	_	_	_	
174-8	30581-30585	MVCC	_	_	_	_	
174-9	30586-30588	in	_	_	_	_	
174-10	30589-30599	PostgreSQL	_	_	_	_	
174-11	30599-30600	-	_	_	_	_	
174-12	30600-30601	8	_	_	_	_	
174-13	30601-30602	.	_	_	_	_	

#Text=Freezing
#Text=1.8k
#Text=MVCC in PostgreSQL-7.
175-1	30603-30611	Freezing	_	_	_	_	
175-2	30612-30616	1.8k	_	_	_	_	
175-3	30617-30621	MVCC	_	_	_	_	
175-4	30622-30624	in	_	_	_	_	
175-5	30625-30635	PostgreSQL	_	_	_	_	
175-6	30635-30636	-	_	_	_	_	
175-7	30636-30637	7	_	_	_	_	
175-8	30637-30638	.	_	_	_	_	

#Text=Autovacuum
#Text=1.1k
#Text=MVCC in PostgreSQL-6.
176-1	30639-30649	Autovacuum	_	_	_	_	
176-2	30650-30654	1.1k	_	_	_	_	
176-3	30655-30659	MVCC	_	_	_	_	
176-4	30660-30662	in	_	_	_	_	
176-5	30663-30673	PostgreSQL	_	_	_	_	
176-6	30673-30674	-	_	_	_	_	
176-7	30674-30675	6	_	_	_	_	
176-8	30675-30676	.	_	_	_	_	

#Text=Vacuum
#Text=1.4k
#Text=MVCC in PostgreSQL-5.
177-1	30677-30683	Vacuum	_	_	_	_	
177-2	30684-30688	1.4k	_	_	_	_	
177-3	30689-30693	MVCC	_	_	_	_	
177-4	30694-30696	in	_	_	_	_	
177-5	30697-30707	PostgreSQL	_	_	_	_	
177-6	30707-30708	-	_	_	_	_	
177-7	30708-30709	5	_	_	_	_	
177-8	30709-30710	.	_	_	_	_	

#Text=In-page vacuum and HOT updates
#Text=1.6k
#Text=MVCC in PostgreSQL-4.
178-1	30711-30718	In-page	_	_	_	_	
178-2	30719-30725	vacuum	_	_	_	_	
178-3	30726-30729	and	_	_	_	_	
178-4	30730-30733	HOT	_	_	_	_	
178-5	30734-30741	updates	_	_	_	_	
178-6	30742-30746	1.6k	_	_	_	_	
178-7	30747-30751	MVCC	_	_	_	_	
178-8	30752-30754	in	_	_	_	_	
178-9	30755-30765	PostgreSQL	_	_	_	_	
178-10	30765-30766	-	_	_	_	_	
178-11	30766-30767	4	_	_	_	_	
178-12	30767-30768	.	_	_	_	_	

#Text=Snapshots
#Text=2.6k
#Text=MVCC in PostgreSQL-3.
179-1	30769-30778	Snapshots	_	_	_	_	
179-2	30779-30783	2.6k	_	_	_	_	
179-3	30784-30788	MVCC	_	_	_	_	
179-4	30789-30791	in	_	_	_	_	
179-5	30792-30802	PostgreSQL	_	_	_	_	
179-6	30802-30803	-	_	_	_	_	
179-7	30803-30804	3	_	_	_	_	
179-8	30804-30805	.	_	_	_	_	

#Text=Row Versions
#Text=2.9k
#Text=MVCC in PostgreSQL-2.
180-1	30806-30809	Row	_	_	_	_	
180-2	30810-30818	Versions	_	_	_	_	
180-3	30819-30823	2.9k	_	_	_	_	
180-4	30824-30828	MVCC	_	_	_	_	
180-5	30829-30831	in	_	_	_	_	
180-6	30832-30842	PostgreSQL	_	_	_	_	
180-7	30842-30843	-	_	_	_	_	
180-8	30843-30844	2	_	_	_	_	
180-9	30844-30845	.	_	_	_	_	

#Text=Forks, files, pages
#Text=2.6k
#Text=MVCC in PostgreSQL-1.
181-1	30846-30851	Forks	_	_	_	_	
181-2	30851-30852	,	_	_	_	_	
181-3	30853-30858	files	_	_	_	_	
181-4	30858-30859	,	_	_	_	_	
181-5	30860-30865	pages	_	_	_	_	
181-6	30866-30870	2.6k	_	_	_	_	
181-7	30871-30875	MVCC	_	_	_	_	
181-8	30876-30878	in	_	_	_	_	
181-9	30879-30889	PostgreSQL	_	_	_	_	
181-10	30889-30890	-	_	_	_	_	
181-11	30890-30891	1	_	_	_	_	
181-12	30891-30892	.	_	_	_	_	

#Text=Isolation
#Text=4.9k
#Text=Top posts
#Text=Day
#Text=Week
#Text=Month
#Text=Various things in MetaPost
#Text=&plus14
#Text=8.4k
#Text=Compilation of math functions into Linq.Expression
#Text=&plus4
#Text=2.6k
#Text=Audio over Bluetooth: most detailed information about profiles, codecs, and devices
#Text=&plus22
#Text=175k
#Text=Algorithms in Go: Bit Manipulation
#Text=&plus2
#Text=294
#Text=11 Kubernetes implementation mistakes – and how to avoid them
#Text=&plus10
#Text=934
#Text=Go Quiz
#Text=&plus3
#Text=679
#Text=Pitfalls in String Pool, or Another Reason to Think Twice Before Interning Instances of String Class in C#
#Text=&plus1
#Text=327
#Text=Build (CI/CD) of non-JVM projects using gradle/kotlin
#Text=&plus1
#Text=315
#Text=Multiple violations of policies in RMS open letter
#Text=&plus16
#Text=2.7k
#Text=Compilation of math functions into Linq.Expression
#Text=&plus4
#Text=2.6k
#Text=High-Quality Text-to-Speech Made Accessible, Simple and Fast
#Text=&plus5
#Text=1.6k
#Text=How to Start Reverse Engineering in 2021
#Text=&plus3
#Text=1.6k
#Text=Your account
#Text=Log in
#Text=Sign up
#Text=Sections
#Text=Posts
#Text=Hubs
#Text=Companies
#Text=Users
#Text=Sandbox
#Text=Info
#Text=How it works
#Text=For Authors
#Text=For Companies
#Text=Documents
#Text=Agreement
#Text=Terms of service
#Text=Services
#Text=Ads
#Text=Subscription plans
#Text=Content
#Text=Seminars
#Text=Megaprojects
#Text=© 2006 – 2021 «Habr»
#Text=Language settings
#Text=About
#Text=Support
#Text=Mobile version
#Text=Language settings
#Text=Interface
#Text=Русский
#Text=English
#Text=Content
#Text=Russian
#Text=English
#Text=Save settings
182-1	30893-30902	Isolation	_	_	_	_	
182-2	30903-30907	4.9k	_	_	_	_	
182-3	30908-30911	Top	_	_	_	_	
182-4	30912-30917	posts	_	_	_	_	
182-5	30918-30921	Day	_	_	_	_	
182-6	30922-30926	Week	_	_	_	_	
182-7	30927-30932	Month	_	_	_	_	
182-8	30933-30940	Various	_	_	_	_	
182-9	30941-30947	things	_	_	_	_	
182-10	30948-30950	in	_	_	_	_	
182-11	30951-30959	MetaPost	_	_	_	_	
182-12	30960-30961	&	_	_	_	_	
182-13	30961-30967	plus14	_	_	_	_	
182-14	30968-30972	8.4k	_	_	_	_	
182-15	30973-30984	Compilation	_	_	_	_	
182-16	30985-30987	of	_	_	_	_	
182-17	30988-30992	math	_	_	_	_	
182-18	30993-31002	functions	_	_	_	_	
182-19	31003-31007	into	_	_	_	_	
182-20	31008-31023	Linq.Expression	_	_	_	_	
182-21	31024-31025	&	_	_	_	_	
182-22	31025-31030	plus4	_	_	_	_	
182-23	31031-31035	2.6k	_	_	_	_	
182-24	31036-31041	Audio	_	_	_	_	
182-25	31042-31046	over	_	_	_	_	
182-26	31047-31056	Bluetooth	_	_	_	_	
182-27	31056-31057	:	_	_	_	_	
182-28	31058-31062	most	_	_	_	_	
182-29	31063-31071	detailed	_	_	_	_	
182-30	31072-31083	information	_	_	_	_	
182-31	31084-31089	about	_	_	_	_	
182-32	31090-31098	profiles	_	_	_	_	
182-33	31098-31099	,	_	_	_	_	
182-34	31100-31106	codecs	_	_	_	_	
182-35	31106-31107	,	_	_	_	_	
182-36	31108-31111	and	_	_	_	_	
182-37	31112-31119	devices	_	_	_	_	
182-38	31120-31121	&	_	_	_	_	
182-39	31121-31127	plus22	_	_	_	_	
182-40	31128-31132	175k	_	_	_	_	
182-41	31133-31143	Algorithms	_	_	_	_	
182-42	31144-31146	in	_	_	_	_	
182-43	31147-31149	Go	_	_	_	_	
182-44	31149-31150	:	_	_	_	_	
182-45	31151-31154	Bit	_	_	_	_	
182-46	31155-31167	Manipulation	_	_	_	_	
182-47	31168-31169	&	_	_	_	_	
182-48	31169-31174	plus2	_	_	_	_	
182-49	31175-31178	294	_	_	_	_	
182-50	31179-31181	11	_	_	_	_	
182-51	31182-31192	Kubernetes	_	_	_	_	
182-52	31193-31207	implementation	_	_	_	_	
182-53	31208-31216	mistakes	_	_	_	_	
182-54	31217-31218	–	_	_	_	_	
182-55	31219-31222	and	_	_	_	_	
182-56	31223-31226	how	_	_	_	_	
182-57	31227-31229	to	_	_	_	_	
182-58	31230-31235	avoid	_	_	_	_	
182-59	31236-31240	them	_	_	_	_	
182-60	31241-31242	&	_	_	_	_	
182-61	31242-31248	plus10	_	_	_	_	
182-62	31249-31252	934	_	_	_	_	
182-63	31253-31255	Go	_	_	_	_	
182-64	31256-31260	Quiz	_	_	_	_	
182-65	31261-31262	&	_	_	_	_	
182-66	31262-31267	plus3	_	_	_	_	
182-67	31268-31271	679	_	_	_	_	
182-68	31272-31280	Pitfalls	_	_	_	_	
182-69	31281-31283	in	_	_	_	_	
182-70	31284-31290	String	_	_	_	_	
182-71	31291-31295	Pool	_	_	_	_	
182-72	31295-31296	,	_	_	_	_	
182-73	31297-31299	or	_	_	_	_	
182-74	31300-31307	Another	_	_	_	_	
182-75	31308-31314	Reason	_	_	_	_	
182-76	31315-31317	to	_	_	_	_	
182-77	31318-31323	Think	_	_	_	_	
182-78	31324-31329	Twice	_	_	_	_	
182-79	31330-31336	Before	_	_	_	_	
182-80	31337-31346	Interning	_	_	_	_	
182-81	31347-31356	Instances	_	_	_	_	
182-82	31357-31359	of	_	_	_	_	
182-83	31360-31366	String	_	_	_	_	
182-84	31367-31372	Class	_	_	_	_	
182-85	31373-31375	in	_	_	_	_	
182-86	31376-31377	C	_	_	_	_	
182-87	31377-31378	#	_	_	_	_	
182-88	31379-31380	&	_	_	_	_	
182-89	31380-31385	plus1	_	_	_	_	
182-90	31386-31389	327	_	_	_	_	
182-91	31390-31395	Build	_	_	_	_	
182-92	31396-31397	(	_	_	_	_	
182-93	31397-31399	CI	_	_	_	_	
182-94	31399-31400	/	_	_	_	_	
182-95	31400-31402	CD	_	_	_	_	
182-96	31402-31403	)	_	_	_	_	
182-97	31404-31406	of	_	_	_	_	
182-98	31407-31414	non-JVM	_	_	_	_	
182-99	31415-31423	projects	_	_	_	_	
182-100	31424-31429	using	_	_	_	_	
182-101	31430-31436	gradle	_	_	_	_	
182-102	31436-31437	/	_	_	_	_	
182-103	31437-31443	kotlin	_	_	_	_	
182-104	31444-31445	&	_	_	_	_	
182-105	31445-31450	plus1	_	_	_	_	
182-106	31451-31454	315	_	_	_	_	
182-107	31455-31463	Multiple	_	_	_	_	
182-108	31464-31474	violations	_	_	_	_	
182-109	31475-31477	of	_	_	_	_	
182-110	31478-31486	policies	_	_	_	_	
182-111	31487-31489	in	_	_	_	_	
182-112	31490-31493	RMS	_	_	_	_	
182-113	31494-31498	open	_	_	_	_	
182-114	31499-31505	letter	_	_	_	_	
182-115	31506-31507	&	_	_	_	_	
182-116	31507-31513	plus16	_	_	_	_	
182-117	31514-31518	2.7k	_	_	_	_	
182-118	31519-31530	Compilation	_	_	_	_	
182-119	31531-31533	of	_	_	_	_	
182-120	31534-31538	math	_	_	_	_	
182-121	31539-31548	functions	_	_	_	_	
182-122	31549-31553	into	_	_	_	_	
182-123	31554-31569	Linq.Expression	_	_	_	_	
182-124	31570-31571	&	_	_	_	_	
182-125	31571-31576	plus4	_	_	_	_	
182-126	31577-31581	2.6k	_	_	_	_	
182-127	31582-31594	High-Quality	_	_	_	_	
182-128	31595-31609	Text-to-Speech	_	_	_	_	
182-129	31610-31614	Made	_	_	_	_	
182-130	31615-31625	Accessible	_	_	_	_	
182-131	31625-31626	,	_	_	_	_	
182-132	31627-31633	Simple	_	_	_	_	
182-133	31634-31637	and	_	_	_	_	
182-134	31638-31642	Fast	_	_	_	_	
182-135	31643-31644	&	_	_	_	_	
182-136	31644-31649	plus5	_	_	_	_	
182-137	31650-31654	1.6k	_	_	_	_	
182-138	31655-31658	How	_	_	_	_	
182-139	31659-31661	to	_	_	_	_	
182-140	31662-31667	Start	_	_	_	_	
182-141	31668-31675	Reverse	_	_	_	_	
182-142	31676-31687	Engineering	_	_	_	_	
182-143	31688-31690	in	_	_	_	_	
182-144	31690-31691	 	_	_	_	_	
182-145	31691-31695	2021	_	_	_	_	
182-146	31696-31697	&	_	_	_	_	
182-147	31697-31702	plus3	_	_	_	_	
182-148	31703-31707	1.6k	_	_	_	_	
182-149	31708-31712	Your	_	_	_	_	
182-150	31713-31720	account	_	_	_	_	
182-151	31721-31724	Log	_	_	_	_	
182-152	31725-31727	in	_	_	_	_	
182-153	31728-31732	Sign	_	_	_	_	
182-154	31733-31735	up	_	_	_	_	
182-155	31736-31744	Sections	_	_	_	_	
182-156	31745-31750	Posts	_	_	_	_	
182-157	31751-31755	Hubs	_	_	_	_	
182-158	31756-31765	Companies	_	_	_	_	
182-159	31766-31771	Users	_	_	_	_	
182-160	31772-31779	Sandbox	_	_	_	_	
182-161	31780-31784	Info	_	_	_	_	
182-162	31785-31788	How	_	_	_	_	
182-163	31789-31791	it	_	_	_	_	
182-164	31792-31797	works	_	_	_	_	
182-165	31798-31801	For	_	_	_	_	
182-166	31802-31809	Authors	_	_	_	_	
182-167	31810-31813	For	_	_	_	_	
182-168	31814-31823	Companies	_	_	_	_	
182-169	31824-31833	Documents	_	_	_	_	
182-170	31834-31843	Agreement	_	_	_	_	
182-171	31844-31849	Terms	_	_	_	_	
182-172	31850-31852	of	_	_	_	_	
182-173	31853-31860	service	_	_	_	_	
182-174	31861-31869	Services	_	_	_	_	
182-175	31870-31873	Ads	_	_	_	_	
182-176	31874-31886	Subscription	_	_	_	_	
182-177	31887-31892	plans	_	_	_	_	
182-178	31893-31900	Content	_	_	_	_	
182-179	31901-31909	Seminars	_	_	_	_	
182-180	31910-31922	Megaprojects	_	_	_	_	
182-181	31923-31924	©	_	_	_	_	
182-182	31925-31929	2006	_	_	_	_	
182-183	31930-31931	–	_	_	_	_	
182-184	31932-31936	2021	_	_	_	_	
182-185	31937-31938	«	_	_	_	_	
182-186	31938-31942	Habr	_	_	_	_	
182-187	31942-31943	»	_	_	_	_	
182-188	31944-31952	Language	_	_	_	_	
182-189	31953-31961	settings	_	_	_	_	
182-190	31962-31967	About	_	_	_	_	
182-191	31968-31975	Support	_	_	_	_	
182-192	31976-31982	Mobile	_	_	_	_	
182-193	31983-31990	version	_	_	_	_	
182-194	31991-31999	Language	_	_	_	_	
182-195	32000-32008	settings	_	_	_	_	
182-196	32009-32018	Interface	_	_	_	_	
182-197	32019-32026	Русский	_	_	_	_	
182-198	32027-32034	English	_	_	_	_	
182-199	32035-32042	Content	_	_	_	_	
182-200	32043-32050	Russian	_	_	_	_	
182-201	32051-32058	English	_	_	_	_	
182-202	32059-32063	Save	_	_	_	_	
182-203	32064-32072	settings	_	_	_	_	
