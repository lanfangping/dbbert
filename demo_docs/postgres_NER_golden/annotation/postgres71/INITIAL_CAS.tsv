#FORMAT=WebAnno TSV 3.3


#Text=JSONB PostgreSQL: How to Store & Index JSON Data in Postgres
#Text=Toggle navigation
#Text=Products
#Text=Managed MySQL
#Text=Overview
#Text=AWS
#Text=Azure
#Text=DigitalOcean
#Text=Google Cloud
#Text=Managed PostgreSQL
#Text=Overview
#Text=AWS
#Text=Azure
#Text=DigitalOcean
#Text=Google Cloud
#Text=Managed Redis™
#Text=Overview
#Text=AWS
#Text=Azure
#Text=DigitalOcean
#Text=Google Cloud
#Text=Managed MongoDB®
#Text=Overview
#Text=AWS
#Text=Azure
#Text=DigitalOcean
#Text=Private/On-Prem
#Text=Pricing
#Text=Enterprise
#Text=Blog
#Text=Login
#Text=Sign Up
#Text=Using JSONB in PostgreSQL: How to Effectively Store & Index JSON Data in PostgreSQL
#Text=Posted:
#Text=July 17, 2020
#Text=+1 Tweet Share Share PinShares 0JSON stands for JavaScript Object Notation.
1-1	0-5	JSONB	
1-2	6-16	PostgreSQL	
1-3	16-17	:	
1-4	18-21	How	
1-5	22-24	to	
1-6	25-30	Store	
1-7	31-32	&	
1-8	33-38	Index	
1-9	39-43	JSON	
1-10	44-48	Data	
1-11	49-51	in	
1-12	52-60	Postgres	
1-13	61-67	Toggle	
1-14	68-78	navigation	
1-15	79-87	Products	
1-16	88-95	Managed	
1-17	96-101	MySQL	
1-18	102-110	Overview	
1-19	111-114	AWS	
1-20	115-120	Azure	
1-21	121-133	DigitalOcean	
1-22	134-140	Google	
1-23	141-146	Cloud	
1-24	147-154	Managed	
1-25	155-165	PostgreSQL	
1-26	166-174	Overview	
1-27	175-178	AWS	
1-28	179-184	Azure	
1-29	185-197	DigitalOcean	
1-30	198-204	Google	
1-31	205-210	Cloud	
1-32	211-218	Managed	
1-33	219-224	Redis	
1-34	224-225	™	
1-35	226-234	Overview	
1-36	235-238	AWS	
1-37	239-244	Azure	
1-38	245-257	DigitalOcean	
1-39	258-264	Google	
1-40	265-270	Cloud	
1-41	271-278	Managed	
1-42	279-286	MongoDB	
1-43	286-287	®	
1-44	288-296	Overview	
1-45	297-300	AWS	
1-46	301-306	Azure	
1-47	307-319	DigitalOcean	
1-48	320-327	Private	
1-49	327-328	/	
1-50	328-335	On-Prem	
1-51	336-343	Pricing	
1-52	344-354	Enterprise	
1-53	355-359	Blog	
1-54	360-365	Login	
1-55	366-370	Sign	
1-56	371-373	Up	
1-57	374-379	Using	
1-58	380-385	JSONB	
1-59	386-388	in	
1-60	389-399	PostgreSQL	
1-61	399-400	:	
1-62	401-404	How	
1-63	405-407	to	
1-64	408-419	Effectively	
1-65	420-425	Store	
1-66	426-427	&	
1-67	428-433	Index	
1-68	434-438	JSON	
1-69	439-443	Data	
1-70	444-446	in	
1-71	447-457	PostgreSQL	
1-72	458-464	Posted	
1-73	464-465	:	
1-74	466-470	July	
1-75	471-473	17	
1-76	473-474	,	
1-77	475-479	2020	
1-78	480-481	+	
1-79	481-482	1	
1-80	483-488	Tweet	
1-81	489-494	Share	
1-82	495-500	Share	
1-83	501-510	PinShares	
1-84	511-516	0JSON	
1-85	517-523	stands	
1-86	524-527	for	
1-87	528-538	JavaScript	
1-88	539-545	Object	
1-89	546-554	Notation	
1-90	554-555	.	

#Text=It is an open standard format which organizes data into key/value pairs and arrays detailed in RFC 7159.
2-1	556-558	It	
2-2	559-561	is	
2-3	562-564	an	
2-4	565-569	open	
2-5	570-578	standard	
2-6	579-585	format	
2-7	586-591	which	
2-8	592-601	organizes	
2-9	602-606	data	
2-10	607-611	into	
2-11	612-615	key	
2-12	615-616	/	
2-13	616-621	value	
2-14	622-627	pairs	
2-15	628-631	and	
2-16	632-638	arrays	
2-17	639-647	detailed	
2-18	648-650	in	
2-19	651-654	RFC	
2-20	655-659	7159	
2-21	659-660	.	

#Text=JSON is the most common format used by web services to exchange data, store documents, unstructured data, etc.
3-1	661-665	JSON	
3-2	666-668	is	
3-3	669-672	the	
3-4	673-677	most	
3-5	678-684	common	
3-6	685-691	format	
3-7	692-696	used	
3-8	697-699	by	
3-9	700-703	web	
3-10	704-712	services	
3-11	713-715	to	
3-12	716-724	exchange	
3-13	725-729	data	
3-14	729-730	,	
3-15	731-736	store	
3-16	737-746	documents	
3-17	746-747	,	
3-18	748-760	unstructured	
3-19	761-765	data	
3-20	765-766	,	
3-21	767-770	etc	
3-22	770-771	.	

#Text=In this post, we are going to show you tips and techniques on how to effectively store and index JSON data in PostgreSQL.
4-1	772-774	In	
4-2	775-779	this	
4-3	780-784	post	
4-4	784-785	,	
4-5	786-788	we	
4-6	789-792	are	
4-7	793-798	going	
4-8	799-801	to	
4-9	802-806	show	
4-10	807-810	you	
4-11	811-815	tips	
4-12	816-819	and	
4-13	820-830	techniques	
4-14	831-833	on	
4-15	834-837	how	
4-16	838-840	to	
4-17	841-852	effectively	
4-18	853-858	store	
4-19	859-862	and	
4-20	863-868	index	
4-21	869-873	JSON	
4-22	874-878	data	
4-23	879-881	in	
4-24	882-892	PostgreSQL	
4-25	892-893	.	

#Text=You can also check out our Working with JSON Data in PostgreSQL vs.
5-1	894-897	You	
5-2	898-901	can	
5-3	902-906	also	
5-4	907-912	check	
5-5	913-916	out	
5-6	917-920	our	
5-7	921-928	Working	
5-8	929-933	with	
5-9	934-938	JSON	
5-10	939-943	Data	
5-11	944-946	in	
5-12	947-957	PostgreSQL	
5-13	958-960	vs	
5-14	960-961	.	

#Text=MongoDB webinar in partnership with PostgresConf to learn more on the topic, and check out our SlideShare page to download the slides.
6-1	962-969	MongoDB	
6-2	970-977	webinar	
6-3	978-980	in	
6-4	981-992	partnership	
6-5	993-997	with	
6-6	998-1010	PostgresConf	
6-7	1011-1013	to	
6-8	1014-1019	learn	
6-9	1020-1024	more	
6-10	1025-1027	on	
6-11	1028-1031	the	
6-12	1032-1037	topic	
6-13	1037-1038	,	
6-14	1039-1042	and	
6-15	1043-1048	check	
6-16	1049-1052	out	
6-17	1053-1056	our	
6-18	1057-1067	SlideShare	
6-19	1068-1072	page	
6-20	1073-1075	to	
6-21	1076-1084	download	
6-22	1085-1088	the	
6-23	1089-1095	slides	
6-24	1095-1096	.	

#Text=What’s in this article?
7-1	1097-1101	What	
7-2	1101-1102	’	
7-3	1102-1103	s	
7-4	1104-1106	in	
7-5	1107-1111	this	
7-6	1112-1119	article	
7-7	1119-1120	?	

#Text=Why Store JSON in PostgreSQL?
8-1	1121-1124	Why	
8-2	1125-1130	Store	
8-3	1131-1135	JSON	
8-4	1136-1138	in	
8-5	1139-1149	PostgreSQL	
8-6	1149-1150	?	

#Text=Timeline of JSON Support in PostgreSQL
#Text=JSONB Patterns & Antipatterns
#Text=JSONB Data Structures
#Text=JSONB Operators & Functions
#Text=JSONB Indexes
#Text=SQL/JSON & JSONPath
#Text=Why Store JSON in PostgreSQL?
9-1	1151-1159	Timeline	
9-2	1160-1162	of	
9-3	1163-1167	JSON	
9-4	1168-1175	Support	
9-5	1176-1178	in	
9-6	1179-1189	PostgreSQL	
9-7	1190-1195	JSONB	
9-8	1196-1204	Patterns	
9-9	1205-1206	&	
9-10	1207-1219	Antipatterns	
9-11	1220-1225	JSONB	
9-12	1226-1230	Data	
9-13	1231-1241	Structures	
9-14	1242-1247	JSONB	
9-15	1248-1257	Operators	
9-16	1258-1259	&	
9-17	1260-1269	Functions	
9-18	1270-1275	JSONB	
9-19	1276-1283	Indexes	
9-20	1284-1287	SQL	
9-21	1287-1288	/	
9-22	1288-1292	JSON	
9-23	1293-1294	&	
9-24	1295-1303	JSONPath	
9-25	1304-1307	Why	
9-26	1308-1313	Store	
9-27	1314-1318	JSON	
9-28	1319-1321	in	
9-29	1322-1332	PostgreSQL	
9-30	1332-1333	?	

#Text=Why should a relational database even care about unstructured data?
10-1	1334-1337	Why	
10-2	1338-1344	should	
10-3	1345-1346	a	
10-4	1347-1357	relational	
10-5	1358-1366	database	
10-6	1367-1371	even	
10-7	1372-1376	care	
10-8	1377-1382	about	
10-9	1383-1395	unstructured	
10-10	1396-1400	data	
10-11	1400-1401	?	

#Text=It turns out that there are a few scenarios where it is useful.
11-1	1402-1404	It	
11-2	1405-1410	turns	
11-3	1411-1414	out	
11-4	1415-1419	that	
11-5	1420-1425	there	
11-6	1426-1429	are	
11-7	1430-1431	a	
11-8	1432-1435	few	
11-9	1436-1445	scenarios	
11-10	1446-1451	where	
11-11	1452-1454	it	
11-12	1455-1457	is	
11-13	1458-1464	useful	
11-14	1464-1465	.	

#Text=Schema flexibility
#Text=One of the main reasons to store data using the JSON format is schema flexibility.
12-1	1466-1472	Schema	
12-2	1473-1484	flexibility	
12-3	1485-1488	One	
12-4	1489-1491	of	
12-5	1492-1495	the	
12-6	1496-1500	main	
12-7	1501-1508	reasons	
12-8	1509-1511	to	
12-9	1512-1517	store	
12-10	1518-1522	data	
12-11	1523-1528	using	
12-12	1529-1532	the	
12-13	1533-1537	JSON	
12-14	1538-1544	format	
12-15	1545-1547	is	
12-16	1548-1554	schema	
12-17	1555-1566	flexibility	
12-18	1566-1567	.	

#Text=Storing your data in JSON is useful when your schema is fluid and is changing frequently.
13-1	1568-1575	Storing	
13-2	1576-1580	your	
13-3	1581-1585	data	
13-4	1586-1588	in	
13-5	1589-1593	JSON	
13-6	1594-1596	is	
13-7	1597-1603	useful	
13-8	1604-1608	when	
13-9	1609-1613	your	
13-10	1614-1620	schema	
13-11	1621-1623	is	
13-12	1624-1629	fluid	
13-13	1630-1633	and	
13-14	1634-1636	is	
13-15	1637-1645	changing	
13-16	1646-1656	frequently	
13-17	1656-1657	.	

#Text=If you store each of the keys as columns, it will result in frequent DML operations – this can be difficult when your data set is large - for example, event tracking, analytics, tags, etc.
14-1	1658-1660	If	
14-2	1661-1664	you	
14-3	1665-1670	store	
14-4	1671-1675	each	
14-5	1676-1678	of	
14-6	1679-1682	the	
14-7	1683-1687	keys	
14-8	1688-1690	as	
14-9	1691-1698	columns	
14-10	1698-1699	,	
14-11	1700-1702	it	
14-12	1703-1707	will	
14-13	1708-1714	result	
14-14	1715-1717	in	
14-15	1718-1726	frequent	
14-16	1727-1730	DML	
14-17	1731-1741	operations	
14-18	1742-1743	–	
14-19	1744-1748	this	
14-20	1749-1752	can	
14-21	1753-1755	be	
14-22	1756-1765	difficult	
14-23	1766-1770	when	
14-24	1771-1775	your	
14-25	1776-1780	data	
14-26	1781-1784	set	
14-27	1785-1787	is	
14-28	1788-1793	large	
14-29	1793-1794	 	
14-30	1794-1795	-	
14-31	1796-1799	for	
14-32	1800-1807	example	
14-33	1807-1808	,	
14-34	1809-1814	event	
14-35	1815-1823	tracking	
14-36	1823-1824	,	
14-37	1825-1834	analytics	
14-38	1834-1835	,	
14-39	1836-1840	tags	
14-40	1840-1841	,	
14-41	1842-1845	etc	
14-42	1845-1846	.	

#Text=Note: If a particular key is always present in your document, it might make sense to store it as a first class column.
15-1	1847-1851	Note	
15-2	1851-1852	:	
15-3	1853-1855	If	
15-4	1856-1857	a	
15-5	1858-1868	particular	
15-6	1869-1872	key	
15-7	1873-1875	is	
15-8	1876-1882	always	
15-9	1883-1890	present	
15-10	1891-1893	in	
15-11	1894-1898	your	
15-12	1899-1907	document	
15-13	1907-1908	,	
15-14	1909-1911	it	
15-15	1912-1917	might	
15-16	1918-1922	make	
15-17	1923-1928	sense	
15-18	1929-1931	to	
15-19	1932-1937	store	
15-20	1938-1940	it	
15-21	1941-1943	as	
15-22	1944-1945	a	
15-23	1946-1951	first	
15-24	1952-1957	class	
15-25	1958-1964	column	
15-26	1964-1965	.	

#Text=We discuss more about this approach in section “JSON Patterns & Antipatterns” below.
16-1	1966-1968	We	
16-2	1969-1976	discuss	
16-3	1977-1981	more	
16-4	1982-1987	about	
16-5	1988-1992	this	
16-6	1993-2001	approach	
16-7	2002-2004	in	
16-8	2005-2012	section	
16-9	2013-2014	“	
16-10	2014-2018	JSON	
16-11	2019-2027	Patterns	
16-12	2028-2029	&	
16-13	2030-2042	Antipatterns	
16-14	2042-2043	”	
16-15	2044-2049	below	
16-16	2049-2050	.	

#Text=Nested objects
#Text=If your data set has nested objects (single or multi-level), in some cases, it is easier to handle them in JSON instead of denormalizing the data into columns or multiple tables.
17-1	2051-2057	Nested	
17-2	2058-2065	objects	
17-3	2066-2068	If	
17-4	2069-2073	your	
17-5	2074-2078	data	
17-6	2079-2082	set	
17-7	2083-2086	has	
17-8	2087-2093	nested	
17-9	2094-2101	objects	
17-10	2102-2103	(	
17-11	2103-2109	single	
17-12	2110-2112	or	
17-13	2113-2124	multi-level	
17-14	2124-2125	)	
17-15	2125-2126	,	
17-16	2127-2129	in	
17-17	2130-2134	some	
17-18	2135-2140	cases	
17-19	2140-2141	,	
17-20	2142-2144	it	
17-21	2145-2147	is	
17-22	2148-2154	easier	
17-23	2155-2157	to	
17-24	2158-2164	handle	
17-25	2165-2169	them	
17-26	2170-2172	in	
17-27	2173-2177	JSON	
17-28	2178-2185	instead	
17-29	2186-2188	of	
17-30	2189-2202	denormalizing	
17-31	2203-2206	the	
17-32	2207-2211	data	
17-33	2212-2216	into	
17-34	2217-2224	columns	
17-35	2225-2227	or	
17-36	2228-2236	multiple	
17-37	2237-2243	tables	
17-38	2243-2244	.	

#Text=Syncing with external data sources
#Text=Often times an external system is providing data as JSON, so it might be a temporary store before data is ingested into other parts of the system. 
18-1	2245-2252	Syncing	
18-2	2253-2257	with	
18-3	2258-2266	external	
18-4	2267-2271	data	
18-5	2272-2279	sources	
18-6	2280-2285	Often	
18-7	2286-2291	times	
18-8	2292-2294	an	
18-9	2295-2303	external	
18-10	2304-2310	system	
18-11	2311-2313	is	
18-12	2314-2323	providing	
18-13	2324-2328	data	
18-14	2329-2331	as	
18-15	2332-2336	JSON	
18-16	2336-2337	,	
18-17	2338-2340	so	
18-18	2341-2343	it	
18-19	2344-2349	might	
18-20	2350-2352	be	
18-21	2353-2354	a	
18-22	2355-2364	temporary	
18-23	2365-2370	store	
18-24	2371-2377	before	
18-25	2378-2382	data	
18-26	2383-2385	is	
18-27	2386-2394	ingested	
18-28	2395-2399	into	
18-29	2400-2405	other	
18-30	2406-2411	parts	
18-31	2412-2414	of	
18-32	2415-2418	the	
18-33	2419-2425	system	
18-34	2425-2426	.	
18-35	2426-2427	 	

#Text=For example, Stripe transactions.
19-1	2427-2430	For	
19-2	2431-2438	example	
19-3	2438-2439	,	
19-4	2440-2446	Stripe	
19-5	2447-2459	transactions	
19-6	2459-2460	.	

#Text=Timeline of JSON Support in PostgreSQL
#Text=JSON support in PostgreSQL was introduced in 9.2 and has steadily improved in every release going forward.
20-1	2461-2469	Timeline	
20-2	2470-2472	of	
20-3	2473-2477	JSON	
20-4	2478-2485	Support	
20-5	2486-2488	in	
20-6	2489-2499	PostgreSQL	
20-7	2500-2504	JSON	
20-8	2505-2512	support	
20-9	2513-2515	in	
20-10	2516-2526	PostgreSQL	
20-11	2527-2530	was	
20-12	2531-2541	introduced	
20-13	2542-2544	in	
20-14	2545-2548	9.2	
20-15	2549-2552	and	
20-16	2553-2556	has	
20-17	2557-2565	steadily	
20-18	2566-2574	improved	
20-19	2575-2577	in	
20-20	2578-2583	every	
20-21	2584-2591	release	
20-22	2592-2597	going	
20-23	2598-2605	forward	
20-24	2605-2606	.	

#Text=Wave 1: PostgreSQL 9.2  (2012) added support for JSON data type
#Text=JSON database in 9.2 was fairly limited (and probably overhyped at that point) – basically a glorified string with some JSON validation thrown in.
21-1	2607-2611	Wave	
21-2	2612-2613	1	
21-3	2613-2614	:	
21-4	2615-2625	PostgreSQL	
21-5	2626-2629	9.2	
21-6	2629-2630	 	
21-7	2631-2632	(	
21-8	2632-2636	2012	
21-9	2636-2637	)	
21-10	2638-2643	added	
21-11	2644-2651	support	
21-12	2652-2655	for	
21-13	2656-2660	JSON	
21-14	2661-2665	data	
21-15	2666-2670	type	
21-16	2671-2675	JSON	
21-17	2675-2676	 	
21-18	2676-2684	database	
21-19	2685-2687	in	
21-20	2688-2691	9.2	
21-21	2692-2695	was	
21-22	2696-2702	fairly	
21-23	2703-2710	limited	
21-24	2711-2712	(	
21-25	2712-2715	and	
21-26	2716-2724	probably	
21-27	2725-2734	overhyped	
21-28	2735-2737	at	
21-29	2738-2742	that	
21-30	2743-2748	point	
21-31	2748-2749	)	
21-32	2750-2751	–	
21-33	2752-2761	basically	
21-34	2762-2763	a	
21-35	2764-2773	glorified	
21-36	2774-2780	string	
21-37	2781-2785	with	
21-38	2786-2790	some	
21-39	2791-2795	JSON	
21-40	2796-2806	validation	
21-41	2807-2813	thrown	
21-42	2814-2816	in	
21-43	2816-2817	.	

#Text=It is useful to validate incoming JSON and store in the database.
22-1	2818-2820	It	
22-2	2821-2823	is	
22-3	2824-2830	useful	
22-4	2831-2833	to	
22-5	2834-2842	validate	
22-6	2843-2851	incoming	
22-7	2852-2856	JSON	
22-8	2857-2860	and	
22-9	2861-2866	store	
22-10	2867-2869	in	
22-11	2870-2873	the	
22-12	2874-2882	database	
22-13	2882-2883	.	

#Text=More details are provided below.
23-1	2884-2888	More	
23-2	2889-2896	details	
23-3	2897-2900	are	
23-4	2901-2909	provided	
23-5	2910-2915	below	
23-6	2915-2916	.	

#Text=Wave 2: PostgreSQL 9.4 (2014) added support for JSONB data type
#Text=JSONB stands for “JSON Binary” or “JSON better” depending on whom you ask.
24-1	2917-2921	Wave	
24-2	2922-2923	2	
24-3	2923-2924	:	
24-4	2925-2935	PostgreSQL	
24-5	2936-2939	9.4	
24-6	2940-2941	(	
24-7	2941-2945	2014	
24-8	2945-2946	)	
24-9	2947-2952	added	
24-10	2953-2960	support	
24-11	2961-2964	for	
24-12	2965-2970	JSONB	
24-13	2971-2975	data	
24-14	2976-2980	type	
24-15	2981-2986	JSONB	
24-16	2987-2993	stands	
24-17	2994-2997	for	
24-18	2998-2999	“	
24-19	2999-3003	JSON	
24-20	3004-3010	Binary	
24-21	3010-3011	”	
24-22	3012-3014	or	
24-23	3015-3016	“	
24-24	3016-3020	JSON	
24-25	3021-3027	better	
24-26	3027-3028	”	
24-27	3029-3038	depending	
24-28	3039-3041	on	
24-29	3042-3046	whom	
24-30	3047-3050	you	
24-31	3051-3054	ask	
24-32	3054-3055	.	

#Text=It is a decomposed binary format to store JSON. 
25-1	3056-3058	It	
25-2	3059-3061	is	
25-3	3062-3063	a	
25-4	3064-3074	decomposed	
25-5	3075-3081	binary	
25-6	3082-3088	format	
25-7	3089-3091	to	
25-8	3092-3097	store	
25-9	3098-3102	JSON	
25-10	3102-3103	.	
25-11	3103-3104	 	

#Text=JSONB supports indexing the JSON data, and is very efficient at parsing and querying the JSON data.
26-1	3104-3109	JSONB	
26-2	3110-3118	supports	
26-3	3119-3127	indexing	
26-4	3128-3131	the	
26-5	3132-3136	JSON	
26-6	3137-3141	data	
26-7	3141-3142	,	
26-8	3143-3146	and	
26-9	3147-3149	is	
26-10	3150-3154	very	
26-11	3155-3164	efficient	
26-12	3165-3167	at	
26-13	3168-3175	parsing	
26-14	3176-3179	and	
26-15	3180-3188	querying	
26-16	3189-3192	the	
26-17	3193-3197	JSON	
26-18	3198-3202	data	
26-19	3202-3203	.	

#Text=In most cases, when you work with JSON in PostgreSQL, you should be using JSONB.
27-1	3204-3206	In	
27-2	3207-3211	most	
27-3	3212-3217	cases	
27-4	3217-3218	,	
27-5	3219-3223	when	
27-6	3224-3227	you	
27-7	3228-3232	work	
27-8	3233-3237	with	
27-9	3238-3242	JSON	
27-10	3243-3245	in	
27-11	3246-3256	PostgreSQL	
27-12	3256-3257	,	
27-13	3258-3261	you	
27-14	3262-3268	should	
27-15	3269-3271	be	
27-16	3272-3277	using	
27-17	3278-3283	JSONB	
27-18	3283-3284	.	

#Text=Wave 3: PostgreSQL 12 (2019) added support for SQL/JSON standard and JSONPATH queries
#Text=JSONPath brings a powerful JSON query engine to PostgreSQL.
28-1	3285-3289	Wave	
28-2	3290-3291	3	
28-3	3291-3292	:	
28-4	3293-3303	PostgreSQL	
28-5	3304-3306	12	
28-6	3307-3308	(	
28-7	3308-3312	2019	
28-8	3312-3313	)	
28-9	3314-3319	added	
28-10	3320-3327	support	
28-11	3328-3331	for	
28-12	3332-3335	SQL	
28-13	3335-3336	/	
28-14	3336-3340	JSON	
28-15	3341-3349	standard	
28-16	3350-3353	and	
28-17	3354-3362	JSONPATH	
28-18	3363-3370	queries	
28-19	3371-3379	JSONPath	
28-20	3380-3386	brings	
28-21	3387-3388	a	
28-22	3389-3397	powerful	
28-23	3398-3402	JSON	
28-24	3403-3408	query	
28-25	3409-3415	engine	
28-26	3416-3418	to	
28-27	3419-3429	PostgreSQL	
28-28	3429-3430	.	

#Text=When Should You Use JSON vs.
29-1	3431-3435	When	
29-2	3436-3442	Should	
29-3	3443-3446	You	
29-4	3447-3450	Use	
29-5	3451-3455	JSON	
29-6	3456-3458	vs	
29-7	3458-3459	.	

#Text=JSONB?
30-1	3460-3465	JSONB	
30-2	3465-3466	?	

#Text=In most cases, JSONB is what you should be using.
31-1	3467-3469	In	
31-2	3470-3474	most	
31-3	3475-3480	cases	
31-4	3480-3481	,	
31-5	3482-3487	JSONB	
31-6	3488-3490	is	
31-7	3491-3495	what	
31-8	3496-3499	you	
31-9	3500-3506	should	
31-10	3507-3509	be	
31-11	3510-3515	using	
31-12	3515-3516	.	

#Text=However, there are some specific cases where JSON works better:
#Text=JSON preserves the original formatting (a.k.a whitespace) and ordering of the keys.
32-1	3517-3524	However	
32-2	3524-3525	,	
32-3	3526-3531	there	
32-4	3532-3535	are	
32-5	3536-3540	some	
32-6	3541-3549	specific	
32-7	3550-3555	cases	
32-8	3556-3561	where	
32-9	3562-3566	JSON	
32-10	3567-3572	works	
32-11	3573-3579	better	
32-12	3579-3580	:	
32-13	3581-3585	JSON	
32-14	3586-3595	preserves	
32-15	3596-3599	the	
32-16	3600-3608	original	
32-17	3609-3619	formatting	
32-18	3620-3621	(	
32-19	3621-3626	a.k.a	
32-20	3627-3637	whitespace	
32-21	3637-3638	)	
32-22	3639-3642	and	
32-23	3643-3651	ordering	
32-24	3652-3654	of	
32-25	3655-3658	the	
32-26	3659-3663	keys	
32-27	3663-3664	.	

#Text=JSON preserves duplicate keys.
33-1	3665-3669	JSON	
33-2	3670-3679	preserves	
33-3	3680-3689	duplicate	
33-4	3690-3694	keys	
33-5	3694-3695	.	

#Text=JSON is faster to ingest vs.
34-1	3696-3700	JSON	
34-2	3701-3703	is	
34-3	3704-3710	faster	
34-4	3711-3713	to	
34-5	3714-3720	ingest	
34-6	3721-3723	vs	
34-7	3723-3724	.	

#Text=JSONB – however, if you do any further processing, JSONB will be faster.
35-1	3725-3730	JSONB	
35-2	3731-3732	–	
35-3	3733-3740	however	
35-4	3740-3741	,	
35-5	3742-3744	if	
35-6	3745-3748	you	
35-7	3749-3751	do	
35-8	3752-3755	any	
35-9	3756-3763	further	
35-10	3764-3774	processing	
35-11	3774-3775	,	
35-12	3776-3781	JSONB	
35-13	3782-3786	will	
35-14	3787-3789	be	
35-15	3790-3796	faster	
35-16	3796-3797	.	

#Text=For example, if you’re just ingesting JSON logs and not querying them in any way, then JSON might be a better option for you.
36-1	3798-3801	For	
36-2	3802-3809	example	
36-3	3809-3810	,	
36-4	3811-3813	if	
36-5	3814-3817	you	
36-6	3817-3818	’	
36-7	3818-3820	re	
36-8	3821-3825	just	
36-9	3826-3835	ingesting	
36-10	3836-3840	JSON	
36-11	3841-3845	logs	
36-12	3846-3849	and	
36-13	3850-3853	not	
36-14	3854-3862	querying	
36-15	3863-3867	them	
36-16	3868-3870	in	
36-17	3871-3874	any	
36-18	3875-3878	way	
36-19	3878-3879	,	
36-20	3880-3884	then	
36-21	3885-3889	JSON	
36-22	3890-3895	might	
36-23	3896-3898	be	
36-24	3899-3900	a	
36-25	3901-3907	better	
36-26	3908-3914	option	
36-27	3915-3918	for	
36-28	3919-3922	you	
36-29	3922-3923	.	

#Text=For the purposes of this blog, when we refer to JSON support in PostgreSQL, we will refer to JSONB going forward.
37-1	3924-3927	For	
37-2	3928-3931	the	
37-3	3932-3940	purposes	
37-4	3941-3943	of	
37-5	3944-3948	this	
37-6	3949-3953	blog	
37-7	3953-3954	,	
37-8	3955-3959	when	
37-9	3960-3962	we	
37-10	3963-3968	refer	
37-11	3969-3971	to	
37-12	3972-3976	JSON	
37-13	3977-3984	support	
37-14	3985-3987	in	
37-15	3988-3998	PostgreSQL	
37-16	3998-3999	,	
37-17	4000-4002	we	
37-18	4003-4007	will	
37-19	4008-4013	refer	
37-20	4014-4016	to	
37-21	4017-4022	JSONB	
37-22	4023-4028	going	
37-23	4029-4036	forward	
37-24	4036-4037	.	

#Text=Using JSONB in PostgreSQL: How to Effectively Store & Index JSON Data in PostgreSQLClick To Tweet
#Text=JSONB Patterns & Antipatterns
#Text=If PostgreSQL has great support for JSONB, why do we need columns anymore?
38-1	4038-4043	Using	
38-2	4044-4049	JSONB	
38-3	4050-4052	in	
38-4	4053-4063	PostgreSQL	
38-5	4063-4064	:	
38-6	4065-4068	How	
38-7	4069-4071	to	
38-8	4072-4083	Effectively	
38-9	4084-4089	Store	
38-10	4090-4091	&	
38-11	4092-4097	Index	
38-12	4098-4102	JSON	
38-13	4103-4107	Data	
38-14	4108-4110	in	
38-15	4111-4126	PostgreSQLClick	
38-16	4127-4129	To	
38-17	4130-4135	Tweet	
38-18	4136-4141	JSONB	
38-19	4142-4150	Patterns	
38-20	4151-4152	&	
38-21	4153-4165	Antipatterns	
38-22	4166-4168	If	
38-23	4169-4179	PostgreSQL	
38-24	4180-4183	has	
38-25	4184-4189	great	
38-26	4190-4197	support	
38-27	4198-4201	for	
38-28	4202-4207	JSONB	
38-29	4207-4208	,	
38-30	4209-4212	why	
38-31	4213-4215	do	
38-32	4216-4218	we	
38-33	4219-4223	need	
38-34	4224-4231	columns	
38-35	4232-4239	anymore	
38-36	4239-4240	?	

#Text=Why not just create a table with a JSONB blob and get rid of all columns like the schema below:
#Text=CREATE TABLE test(id int, data JSONB, PRIMARY KEY (id));
#Text=At the end of the day, columns are still the most efficient technique to work with your data.
39-1	4241-4244	Why	
39-2	4245-4248	not	
39-3	4249-4253	just	
39-4	4254-4260	create	
39-5	4261-4262	a	
39-6	4263-4268	table	
39-7	4269-4273	with	
39-8	4274-4275	a	
39-9	4276-4281	JSONB	
39-10	4282-4286	blob	
39-11	4287-4290	and	
39-12	4291-4294	get	
39-13	4295-4298	rid	
39-14	4299-4301	of	
39-15	4302-4305	all	
39-16	4306-4313	columns	
39-17	4314-4318	like	
39-18	4319-4322	the	
39-19	4323-4329	schema	
39-20	4330-4335	below	
39-21	4335-4336	:	
39-22	4337-4343	CREATE	
39-23	4344-4349	TABLE	
39-24	4350-4354	test	
39-25	4354-4355	(	
39-26	4355-4357	id	
39-27	4358-4361	int	
39-28	4361-4362	,	
39-29	4363-4367	data	
39-30	4368-4373	JSONB	
39-31	4373-4374	,	
39-32	4375-4382	PRIMARY	
39-33	4383-4386	KEY	
39-34	4387-4388	(	
39-35	4388-4390	id	
39-36	4390-4391	)	
39-37	4391-4392	)	
39-38	4392-4393	;	
39-39	4394-4396	At	
39-40	4397-4400	the	
39-41	4401-4404	end	
39-42	4405-4407	of	
39-43	4408-4411	the	
39-44	4412-4415	day	
39-45	4415-4416	,	
39-46	4417-4424	columns	
39-47	4425-4428	are	
39-48	4429-4434	still	
39-49	4435-4438	the	
39-50	4439-4443	most	
39-51	4444-4453	efficient	
39-52	4454-4463	technique	
39-53	4464-4466	to	
39-54	4467-4471	work	
39-55	4472-4476	with	
39-56	4477-4481	your	
39-57	4482-4486	data	
39-58	4486-4487	.	

#Text=JSONB storage has some drawbacks vs. traditional columns:
#Text=PostreSQL does not store column statistics for JSONB columns
#Text=PostgreSQL maintains statistics about the distributions of values in each column of the table - most common values (MCV), NULL entries, histogram of distribution.
40-1	4488-4493	JSONB	
40-2	4494-4501	storage	
40-3	4502-4505	has	
40-4	4506-4510	some	
40-5	4511-4520	drawbacks	
40-6	4521-4523	vs	
40-7	4523-4524	.	
40-8	4525-4536	traditional	
40-9	4537-4544	columns	
40-10	4544-4545	:	
40-11	4546-4555	PostreSQL	
40-12	4556-4560	does	
40-13	4561-4564	not	
40-14	4565-4570	store	
40-15	4571-4577	column	
40-16	4578-4588	statistics	
40-17	4589-4592	for	
40-18	4593-4598	JSONB	
40-19	4599-4606	columns	
40-20	4607-4617	PostgreSQL	
40-21	4618-4627	maintains	
40-22	4628-4638	statistics	
40-23	4639-4644	about	
40-24	4645-4648	the	
40-25	4649-4662	distributions	
40-26	4663-4665	of	
40-27	4666-4672	values	
40-28	4673-4675	in	
40-29	4676-4680	each	
40-30	4681-4687	column	
40-31	4688-4690	of	
40-32	4691-4694	the	
40-33	4695-4700	table	
40-34	4701-4702	-	
40-35	4702-4703	 	
40-36	4703-4707	most	
40-37	4708-4714	common	
40-38	4715-4721	values	
40-39	4722-4723	(	
40-40	4723-4726	MCV	
40-41	4726-4727	)	
40-42	4727-4728	,	
40-43	4729-4733	NULL	
40-44	4734-4741	entries	
40-45	4741-4742	,	
40-46	4743-4752	histogram	
40-47	4753-4755	of	
40-48	4756-4768	distribution	
40-49	4768-4769	.	

#Text=Based on this data, the PostgreSQL query planner makes smart decisions on the plan to use for the query.
41-1	4770-4775	Based	
41-2	4776-4778	on	
41-3	4779-4783	this	
41-4	4784-4788	data	
41-5	4788-4789	,	
41-6	4790-4793	the	
41-7	4794-4804	PostgreSQL	
41-8	4805-4810	query	
41-9	4811-4818	planner	
41-10	4819-4824	makes	
41-11	4825-4830	smart	
41-12	4831-4840	decisions	
41-13	4841-4843	on	
41-14	4844-4847	the	
41-15	4848-4852	plan	
41-16	4853-4855	to	
41-17	4856-4859	use	
41-18	4860-4863	for	
41-19	4864-4867	the	
41-20	4868-4873	query	
41-21	4873-4874	.	

#Text=At this point, PostgreSQL does not store any stats for JSONB columns or keys.
42-1	4875-4877	At	
42-2	4878-4882	this	
42-3	4883-4888	point	
42-4	4888-4889	,	
42-5	4890-4900	PostgreSQL	
42-6	4901-4905	does	
42-7	4906-4909	not	
42-8	4910-4915	store	
42-9	4916-4919	any	
42-10	4920-4925	stats	
42-11	4926-4929	for	
42-12	4930-4935	JSONB	
42-13	4936-4943	columns	
42-14	4944-4946	or	
42-15	4947-4951	keys	
42-16	4951-4952	.	

#Text=This can sometimes result in poor choices like using nested loop joins vs. hash joins, etc.
43-1	4953-4957	This	
43-2	4958-4961	can	
43-3	4962-4971	sometimes	
43-4	4972-4978	result	
43-5	4979-4981	in	
43-6	4982-4986	poor	
43-7	4987-4994	choices	
43-8	4995-4999	like	
43-9	5000-5005	using	
43-10	5006-5012	nested	
43-11	5013-5017	loop	
43-12	5018-5023	joins	
43-13	5024-5026	vs	
43-14	5026-5027	.	
43-15	5028-5032	hash	
43-16	5033-5038	joins	
43-17	5038-5039	,	
43-18	5040-5043	etc	
43-19	5043-5044	.	

#Text=A more detailed example of this is provided in this blog post – When To Avoid JSONB In A PostgreSQL Schema.
44-1	5045-5046	A	
44-2	5047-5051	more	
44-3	5052-5060	detailed	
44-4	5061-5068	example	
44-5	5069-5071	of	
44-6	5072-5076	this	
44-7	5077-5079	is	
44-8	5080-5088	provided	
44-9	5089-5091	in	
44-10	5092-5096	this	
44-11	5097-5101	blog	
44-12	5102-5106	post	
44-13	5107-5108	–	
44-14	5109-5113	When	
44-15	5114-5116	To	
44-16	5117-5122	Avoid	
44-17	5123-5128	JSONB	
44-18	5129-5131	In	
44-19	5132-5133	A	
44-20	5134-5144	PostgreSQL	
44-21	5145-5151	Schema	
44-22	5151-5152	.	

#Text=JSONB storage results in a larger storage footprint
#Text=JSONB storage does not deduplicate the key names in the JSON.
45-1	5153-5158	JSONB	
45-2	5159-5166	storage	
45-3	5167-5174	results	
45-4	5175-5177	in	
45-5	5178-5179	a	
45-6	5180-5186	larger	
45-7	5187-5194	storage	
45-8	5195-5204	footprint	
45-9	5205-5210	JSONB	
45-10	5211-5218	storage	
45-11	5219-5223	does	
45-12	5224-5227	not	
45-13	5228-5239	deduplicate	
45-14	5240-5243	the	
45-15	5244-5247	key	
45-16	5248-5253	names	
45-17	5254-5256	in	
45-18	5257-5260	the	
45-19	5261-5265	JSON	
45-20	5265-5266	.	

#Text=This can result in considerably larger storage footprint compared to MongoDB BSON on WiredTiger or traditional column storage.
46-1	5267-5271	This	
46-2	5272-5275	can	
46-3	5276-5282	result	
46-4	5283-5285	in	
46-5	5286-5298	considerably	
46-6	5299-5305	larger	
46-7	5306-5313	storage	
46-8	5314-5323	footprint	
46-9	5324-5332	compared	
46-10	5333-5335	to	
46-11	5336-5343	MongoDB	
46-12	5344-5348	BSON	
46-13	5349-5351	on	
46-14	5352-5362	WiredTiger	
46-15	5363-5365	or	
46-16	5366-5377	traditional	
46-17	5378-5384	column	
46-18	5385-5392	storage	
46-19	5392-5393	.	

#Text=I ran a simple test with the below JSONB model storing about 10 million rows of data, and here are the results – In some ways this is similar to the MongoDB MMAPV1 storage model where the keys in JSONB were stored as-is without any compression.
47-1	5394-5395	I	
47-2	5396-5399	ran	
47-3	5400-5401	a	
47-4	5402-5408	simple	
47-5	5409-5413	test	
47-6	5414-5418	with	
47-7	5419-5422	the	
47-8	5423-5428	below	
47-9	5429-5434	JSONB	
47-10	5435-5440	model	
47-11	5441-5448	storing	
47-12	5449-5454	about	
47-13	5455-5457	10	
47-14	5458-5465	million	
47-15	5466-5470	rows	
47-16	5471-5473	of	
47-17	5474-5478	data	
47-18	5478-5479	,	
47-19	5480-5483	and	
47-20	5484-5488	here	
47-21	5489-5492	are	
47-22	5493-5496	the	
47-23	5497-5504	results	
47-24	5505-5506	–	
47-25	5507-5509	In	
47-26	5510-5514	some	
47-27	5515-5519	ways	
47-28	5520-5524	this	
47-29	5525-5527	is	
47-30	5528-5535	similar	
47-31	5536-5538	to	
47-32	5539-5542	the	
47-33	5543-5550	MongoDB	
47-34	5551-5557	MMAPV1	
47-35	5558-5565	storage	
47-36	5566-5571	model	
47-37	5572-5577	where	
47-38	5578-5581	the	
47-39	5582-5586	keys	
47-40	5587-5589	in	
47-41	5590-5595	JSONB	
47-42	5596-5600	were	
47-43	5601-5607	stored	
47-44	5608-5613	as-is	
47-45	5614-5621	without	
47-46	5622-5625	any	
47-47	5626-5637	compression	
47-48	5637-5638	.	

#Text=One long-term fix is to move the key names to a table level dictionary and refer this dictionary instead of storing the key names repeatedly. 
48-1	5639-5642	One	
48-2	5643-5652	long-term	
48-3	5653-5656	fix	
48-4	5657-5659	is	
48-5	5660-5662	to	
48-6	5663-5667	move	
48-7	5668-5671	the	
48-8	5672-5675	key	
48-9	5676-5681	names	
48-10	5682-5684	to	
48-11	5685-5686	a	
48-12	5687-5692	table	
48-13	5693-5698	level	
48-14	5699-5709	dictionary	
48-15	5710-5713	and	
48-16	5714-5719	refer	
48-17	5720-5724	this	
48-18	5725-5735	dictionary	
48-19	5736-5743	instead	
48-20	5744-5746	of	
48-21	5747-5754	storing	
48-22	5755-5758	the	
48-23	5759-5762	key	
48-24	5763-5768	names	
48-25	5769-5779	repeatedly	
48-26	5779-5780	.	
48-27	5780-5781	 	

#Text=Until then, the workaround might be to use more compact names (unix-style) instead of more descriptive names. 
49-1	5781-5786	Until	
49-2	5787-5791	then	
49-3	5791-5792	,	
49-4	5793-5796	the	
49-5	5797-5807	workaround	
49-6	5808-5813	might	
49-7	5814-5816	be	
49-8	5817-5819	to	
49-9	5820-5823	use	
49-10	5824-5828	more	
49-11	5829-5836	compact	
49-12	5837-5842	names	
49-13	5843-5844	(	
49-14	5844-5854	unix-style	
49-15	5854-5855	)	
49-16	5856-5863	instead	
49-17	5864-5866	of	
49-18	5867-5871	more	
49-19	5872-5883	descriptive	
49-20	5884-5889	names	
49-21	5889-5890	.	
49-22	5890-5891	 	

#Text=For example, if you’re storing millions of instances of a particular key, it would be better storage-wise to name it “pb” instead of “publisherName”.
50-1	5891-5894	For	
50-2	5895-5902	example	
50-3	5902-5903	,	
50-4	5903-5904	 	
50-5	5904-5906	if	
50-6	5907-5910	you	
50-7	5910-5911	’	
50-8	5911-5913	re	
50-9	5914-5921	storing	
50-10	5922-5930	millions	
50-11	5931-5933	of	
50-12	5934-5943	instances	
50-13	5944-5946	of	
50-14	5947-5948	a	
50-15	5949-5959	particular	
50-16	5960-5963	key	
50-17	5963-5964	,	
50-18	5965-5967	it	
50-19	5968-5973	would	
50-20	5974-5976	be	
50-21	5977-5983	better	
50-22	5984-5996	storage-wise	
50-23	5997-5999	to	
50-24	6000-6004	name	
50-25	6005-6007	it	
50-26	6008-6009	“	
50-27	6009-6011	pb	
50-28	6011-6012	”	
50-29	6013-6020	instead	
50-30	6021-6023	of	
50-31	6024-6025	“	
50-32	6025-6038	publisherName	
50-33	6038-6039	”	
50-34	6039-6040	.	

#Text=The most efficient way to leverage JSONB in PostgreSQL is to combine columns and JSONB.
51-1	6041-6044	The	
51-2	6045-6049	most	
51-3	6050-6059	efficient	
51-4	6060-6063	way	
51-5	6064-6066	to	
51-6	6067-6075	leverage	
51-7	6076-6081	JSONB	
51-8	6082-6084	in	
51-9	6085-6095	PostgreSQL	
51-10	6096-6098	is	
51-11	6099-6101	to	
51-12	6102-6109	combine	
51-13	6110-6117	columns	
51-14	6118-6121	and	
51-15	6122-6127	JSONB	
51-16	6127-6128	.	

#Text=If a key appears very frequently in your JSONB blobs, it is probably better off being stored as a column.
52-1	6129-6131	If	
52-2	6132-6133	a	
52-3	6134-6137	key	
52-4	6138-6145	appears	
52-5	6145-6146	 	
52-6	6146-6150	very	
52-7	6151-6161	frequently	
52-8	6162-6164	in	
52-9	6165-6169	your	
52-10	6170-6175	JSONB	
52-11	6176-6181	blobs	
52-12	6181-6182	,	
52-13	6183-6185	it	
52-14	6186-6188	is	
52-15	6189-6197	probably	
52-16	6198-6204	better	
52-17	6205-6208	off	
52-18	6209-6214	being	
52-19	6215-6221	stored	
52-20	6222-6224	as	
52-21	6225-6226	a	
52-22	6227-6233	column	
52-23	6233-6234	.	

#Text=Use JSONB as a “catch all” to handle the variable parts of your schema while leveraging traditional columns for fields that are more stable.
53-1	6235-6238	Use	
53-2	6239-6244	JSONB	
53-3	6245-6247	as	
53-4	6248-6249	a	
53-5	6250-6251	“	
53-6	6251-6256	catch	
53-7	6257-6260	all	
53-8	6260-6261	”	
53-9	6262-6264	to	
53-10	6265-6271	handle	
53-11	6272-6275	the	
53-12	6276-6284	variable	
53-13	6285-6290	parts	
53-14	6291-6293	of	
53-15	6294-6298	your	
53-16	6299-6305	schema	
53-17	6306-6311	while	
53-18	6312-6322	leveraging	
53-19	6323-6334	traditional	
53-20	6335-6342	columns	
53-21	6343-6346	for	
53-22	6347-6353	fields	
53-23	6354-6358	that	
53-24	6359-6362	are	
53-25	6363-6367	more	
53-26	6368-6374	stable	
53-27	6374-6375	.	

#Text=JSONB Data Structures
#Text=Both JSONB and MongoDB BSON are essentially tree structures, using multi-level nodes to store the parsed JSONB data.
54-1	6376-6381	JSONB	
54-2	6382-6386	Data	
54-3	6387-6397	Structures	
54-4	6398-6402	Both	
54-5	6403-6408	JSONB	
54-6	6408-6409	 	
54-7	6409-6412	and	
54-8	6413-6420	MongoDB	
54-9	6421-6425	BSON	
54-10	6426-6429	are	
54-11	6430-6441	essentially	
54-12	6442-6446	tree	
54-13	6447-6457	structures	
54-14	6457-6458	,	
54-15	6459-6464	using	
54-16	6465-6476	multi-level	
54-17	6477-6482	nodes	
54-18	6483-6485	to	
54-19	6486-6491	store	
54-20	6492-6495	the	
54-21	6496-6502	parsed	
54-22	6503-6508	JSONB	
54-23	6509-6513	data	
54-24	6513-6514	.	

#Text=MongoDB BSON has a very similar structure.
55-1	6515-6522	MongoDB	
55-2	6523-6527	BSON	
55-3	6528-6531	has	
55-4	6532-6533	a	
55-5	6534-6538	very	
55-6	6539-6546	similar	
55-7	6547-6556	structure	
55-8	6556-6557	.	

#Text=Images source
#Text=JSONB & TOAST
#Text=Another important consideration for storage is how JSONB interacts with TOAST (The Oversize Attribute Storage Technique).
56-1	6558-6564	Images	
56-2	6565-6571	source	
56-3	6572-6577	JSONB	
56-4	6578-6579	&	
56-5	6580-6585	TOAST	
56-6	6586-6593	Another	
56-7	6594-6603	important	
56-8	6604-6617	consideration	
56-9	6618-6621	for	
56-10	6622-6629	storage	
56-11	6630-6632	is	
56-12	6633-6636	how	
56-13	6637-6642	JSONB	
56-14	6643-6652	interacts	
56-15	6653-6657	with	
56-16	6658-6663	TOAST	
56-17	6664-6665	(	
56-18	6665-6668	The	
56-19	6669-6677	Oversize	
56-20	6678-6687	Attribute	
56-21	6688-6695	Storage	
56-22	6696-6705	Technique	
56-23	6705-6706	)	
56-24	6706-6707	.	

#Text=Typically, when the size of your column exceeds the TOAST_TUPLE_THRESHOLD (2kb default), PostgreSQL will attempt to compress the data and fit in 2kb.
57-1	6708-6717	Typically	
57-2	6717-6718	,	
57-3	6719-6723	when	
57-4	6724-6727	the	
57-5	6728-6732	size	
57-6	6733-6735	of	
57-7	6736-6740	your	
57-8	6741-6747	column	
57-9	6748-6755	exceeds	
57-10	6756-6759	the	
57-11	6760-6781	TOAST_TUPLE_THRESHOLD	
57-12	6782-6783	(	
57-13	6783-6786	2kb	
57-14	6787-6794	default	
57-15	6794-6795	)	
57-16	6795-6796	,	
57-17	6797-6807	PostgreSQL	
57-18	6808-6812	will	
57-19	6813-6820	attempt	
57-20	6821-6823	to	
57-21	6824-6832	compress	
57-22	6833-6836	the	
57-23	6837-6841	data	
57-24	6842-6845	and	
57-25	6846-6849	fit	
57-26	6850-6852	in	
57-27	6853-6856	2kb	
57-28	6856-6857	.	

#Text=If that doesn’t work, the data is moved to out-of-line storage.
58-1	6858-6860	If	
58-2	6861-6865	that	
58-3	6866-6871	doesn	
58-4	6871-6872	’	
58-5	6872-6873	t	
58-6	6874-6878	work	
58-7	6878-6879	,	
58-8	6880-6883	the	
58-9	6884-6888	data	
58-10	6889-6891	is	
58-11	6892-6897	moved	
58-12	6898-6900	to	
58-13	6901-6912	out-of-line	
58-14	6913-6920	storage	
58-15	6920-6921	.	

#Text=This is what they call “TOASTing” the data.
59-1	6922-6926	This	
59-2	6927-6929	is	
59-3	6930-6934	what	
59-4	6934-6935	 	
59-5	6935-6939	they	
59-6	6940-6944	call	
59-7	6945-6946	“	
59-8	6946-6954	TOASTing	
59-9	6954-6955	”	
59-10	6956-6959	the	
59-11	6960-6964	data	
59-12	6964-6965	.	

#Text=When the data is fetched, the reverse process “deTOASTting” needs to happen.
60-1	6966-6970	When	
60-2	6971-6974	the	
60-3	6975-6979	data	
60-4	6980-6982	is	
60-5	6983-6990	fetched	
60-6	6990-6991	,	
60-7	6992-6995	the	
60-8	6996-7003	reverse	
60-9	7004-7011	process	
60-10	7012-7013	“	
60-11	7013-7024	deTOASTting	
60-12	7024-7025	”	
60-13	7026-7031	needs	
60-14	7032-7034	to	
60-15	7035-7041	happen	
60-16	7041-7042	.	

#Text=You can also control the TOAST storage strategy:
#Text=Extended – Allows for out-of-line storage and compression (using pglz).
61-1	7043-7046	You	
61-2	7047-7050	can	
61-3	7051-7055	also	
61-4	7056-7063	control	
61-5	7064-7067	the	
61-6	7068-7073	TOAST	
61-7	7074-7081	storage	
61-8	7082-7090	strategy	
61-9	7090-7091	:	
61-10	7092-7100	Extended	
61-11	7101-7102	–	
61-12	7103-7109	Allows	
61-13	7110-7113	for	
61-14	7114-7125	out-of-line	
61-15	7126-7133	storage	
61-16	7134-7137	and	
61-17	7138-7149	compression	
61-18	7150-7151	(	
61-19	7151-7156	using	
61-20	7157-7161	pglz	
61-21	7161-7162	)	
61-22	7162-7163	.	

#Text=This is the default option.
62-1	7164-7168	This	
62-2	7169-7171	is	
62-3	7172-7175	the	
62-4	7176-7183	default	
62-5	7184-7190	option	
62-6	7190-7191	.	

#Text=External – Allows for out-of-line storage, but not compression.
63-1	7192-7200	External	
63-2	7201-7202	–	
63-3	7203-7209	Allows	
63-4	7210-7213	for	
63-5	7214-7225	out-of-line	
63-6	7226-7233	storage	
63-7	7233-7234	,	
63-8	7235-7238	but	
63-9	7239-7242	not	
63-10	7243-7254	compression	
63-11	7254-7255	.	

#Text=If you’re experiencing delays due to the TOAST compression or decompression, one option is to proactively set the column storage to ‘EXTENDED’.
64-1	7256-7258	If	
64-2	7259-7262	you	
64-3	7262-7263	’	
64-4	7263-7265	re	
64-5	7266-7278	experiencing	
64-6	7279-7285	delays	
64-7	7286-7289	due	
64-8	7290-7292	to	
64-9	7293-7296	the	
64-10	7297-7302	TOAST	
64-11	7303-7314	compression	
64-12	7314-7315	 	
64-13	7315-7317	or	
64-14	7318-7331	decompression	
64-15	7331-7332	,	
64-16	7333-7336	one	
64-17	7337-7343	option	
64-18	7344-7346	is	
64-19	7347-7349	to	
64-20	7350-7361	proactively	
64-21	7362-7365	set	
64-22	7366-7369	the	
64-23	7370-7376	column	
64-24	7377-7384	storage	
64-25	7385-7387	to	
64-26	7388-7389	‘	
64-27	7389-7397	EXTENDED	
64-28	7397-7398	’	
64-29	7398-7399	.	

#Text=For all of the details, please refer to this PostgreSQL doc.
65-1	7400-7403	For	
65-2	7404-7407	all	
65-3	7408-7410	of	
65-4	7411-7414	the	
65-5	7415-7422	details	
65-6	7422-7423	,	
65-7	7424-7430	please	
65-8	7431-7436	refer	
65-9	7437-7439	to	
65-10	7440-7444	this	
65-11	7444-7445	 	
65-12	7445-7455	PostgreSQL	
65-13	7456-7459	doc	
65-14	7459-7460	.	

#Text=JSONB Operators & Functions
#Text=PostgreSQL provides a variety of operators to work on JSONB.
66-1	7461-7466	JSONB	
66-2	7467-7476	Operators	
66-3	7477-7478	&	
66-4	7479-7488	Functions	
66-5	7489-7499	PostgreSQL	
66-6	7500-7508	provides	
66-7	7509-7510	a	
66-8	7511-7518	variety	
66-9	7519-7521	of	
66-10	7522-7531	operators	
66-11	7532-7534	to	
66-12	7535-7539	work	
66-13	7540-7542	on	
66-14	7543-7548	JSONB	
66-15	7548-7549	.	

#Text=From the docs:
#Text=Operator
#Text=Description
#Text=Get JSON array element (indexed from zero, negative integers count from the end)
#Text=Get JSON object field by key
#Text=->>
#Text=Get JSON array element as text
#Text=->>
#Text=Get JSON object field as text
#Text=Get JSON object at the specified path
#Text=#>>
#Text=Get JSON object at the specified path as text
#Text=Does the left JSON value contain the right JSON path/value entries at the top level?
67-1	7550-7554	From	
67-2	7555-7558	the	
67-3	7559-7563	docs	
67-4	7563-7564	:	
67-5	7565-7573	Operator	
67-6	7574-7585	Description	
67-7	7586-7589	Get	
67-8	7590-7594	JSON	
67-9	7595-7600	array	
67-10	7601-7608	element	
67-11	7609-7610	(	
67-12	7610-7617	indexed	
67-13	7618-7622	from	
67-14	7623-7627	zero	
67-15	7627-7628	,	
67-16	7629-7637	negative	
67-17	7638-7646	integers	
67-18	7647-7652	count	
67-19	7653-7657	from	
67-20	7658-7661	the	
67-21	7662-7665	end	
67-22	7665-7666	)	
67-23	7667-7670	Get	
67-24	7671-7675	JSON	
67-25	7676-7682	object	
67-26	7683-7688	field	
67-27	7689-7691	by	
67-28	7692-7695	key	
67-29	7696-7697	-	
67-30	7697-7698	>	
67-31	7698-7699	>	
67-32	7700-7703	Get	
67-33	7704-7708	JSON	
67-34	7709-7714	array	
67-35	7715-7722	element	
67-36	7723-7725	as	
67-37	7726-7730	text	
67-38	7731-7732	-	
67-39	7732-7733	>	
67-40	7733-7734	>	
67-41	7735-7738	Get	
67-42	7739-7743	JSON	
67-43	7744-7750	object	
67-44	7751-7756	field	
67-45	7757-7759	as	
67-46	7760-7764	text	
67-47	7765-7768	Get	
67-48	7769-7773	JSON	
67-49	7774-7780	object	
67-50	7781-7783	at	
67-51	7784-7787	the	
67-52	7788-7797	specified	
67-53	7798-7802	path	
67-54	7803-7804	#	
67-55	7804-7805	>	
67-56	7805-7806	>	
67-57	7807-7810	Get	
67-58	7811-7815	JSON	
67-59	7816-7822	object	
67-60	7823-7825	at	
67-61	7826-7829	the	
67-62	7830-7839	specified	
67-63	7840-7844	path	
67-64	7845-7847	as	
67-65	7848-7852	text	
67-66	7853-7857	Does	
67-67	7858-7861	the	
67-68	7862-7866	left	
67-69	7867-7871	JSON	
67-70	7872-7877	value	
67-71	7878-7885	contain	
67-72	7886-7889	the	
67-73	7890-7895	right	
67-74	7896-7900	JSON	
67-75	7901-7905	path	
67-76	7905-7906	/	
67-77	7906-7911	value	
67-78	7912-7919	entries	
67-79	7920-7922	at	
67-80	7923-7926	the	
67-81	7927-7930	top	
67-82	7931-7936	level	
67-83	7936-7937	?	

#Text=Are the left JSON path/value entries contained at the top level within the right JSON value?
68-1	7938-7941	Are	
68-2	7942-7945	the	
68-3	7946-7950	left	
68-4	7951-7955	JSON	
68-5	7956-7960	path	
68-6	7960-7961	/	
68-7	7961-7966	value	
68-8	7967-7974	entries	
68-9	7975-7984	contained	
68-10	7985-7987	at	
68-11	7988-7991	the	
68-12	7992-7995	top	
68-13	7996-8001	level	
68-14	8002-8008	within	
68-15	8009-8012	the	
68-16	8013-8018	right	
68-17	8019-8023	JSON	
68-18	8024-8029	value	
68-19	8029-8030	?	

#Text=Does the string exist as a top-level key within the JSON value?
69-1	8031-8035	Does	
69-2	8036-8039	the	
69-3	8040-8046	string	
69-4	8047-8052	exist	
69-5	8053-8055	as	
69-6	8056-8057	a	
69-7	8058-8067	top-level	
69-8	8068-8071	key	
69-9	8072-8078	within	
69-10	8079-8082	the	
69-11	8083-8087	JSON	
69-12	8088-8093	value	
69-13	8093-8094	?	

#Text=Do any of these array strings exist as top-level keys?
70-1	8095-8097	Do	
70-2	8098-8101	any	
70-3	8102-8104	of	
70-4	8105-8110	these	
70-5	8111-8116	array	
70-6	8117-8124	strings	
70-7	8125-8130	exist	
70-8	8131-8133	as	
70-9	8134-8143	top-level	
70-10	8144-8148	keys	
70-11	8148-8149	?	

#Text=Do all of these array strings exist as top-level keys?
71-1	8150-8152	Do	
71-2	8153-8156	all	
71-3	8157-8159	of	
71-4	8160-8165	these	
71-5	8166-8171	array	
71-6	8172-8179	strings	
71-7	8180-8185	exist	
71-8	8186-8188	as	
71-9	8189-8198	top-level	
71-10	8199-8203	keys	
71-11	8203-8204	?	

#Text=Concatenate two jsonb values into a new jsonb value
#Text=Delete key/value pair or string element from left operand.
72-1	8205-8216	Concatenate	
72-2	8217-8220	two	
72-3	8221-8226	jsonb	
72-4	8227-8233	values	
72-5	8234-8238	into	
72-6	8239-8240	a	
72-7	8241-8244	new	
72-8	8245-8250	jsonb	
72-9	8251-8256	value	
72-10	8257-8263	Delete	
72-11	8264-8267	key	
72-12	8267-8268	/	
72-13	8268-8273	value	
72-14	8274-8278	pair	
72-15	8279-8281	or	
72-16	8282-8288	string	
72-17	8289-8296	element	
72-18	8297-8301	from	
72-19	8302-8306	left	
72-20	8307-8314	operand	
72-21	8314-8315	.	

#Text=Key/value pairs are matched based on their key value.
73-1	8316-8319	Key	
73-2	8319-8320	/	
73-3	8320-8325	value	
73-4	8326-8331	pairs	
73-5	8332-8335	are	
73-6	8336-8343	matched	
73-7	8344-8349	based	
73-8	8350-8352	on	
73-9	8353-8358	their	
73-10	8359-8362	key	
73-11	8363-8368	value	
73-12	8368-8369	.	

#Text=Delete multiple key/value pairs or string elements from left operand.
74-1	8370-8376	Delete	
74-2	8377-8385	multiple	
74-3	8386-8389	key	
74-4	8389-8390	/	
74-5	8390-8395	value	
74-6	8396-8401	pairs	
74-7	8402-8404	or	
74-8	8405-8411	string	
74-9	8412-8420	elements	
74-10	8421-8425	from	
74-11	8426-8430	left	
74-12	8431-8438	operand	
74-13	8438-8439	.	

#Text=Key/value pairs are matched based on their key value.
75-1	8440-8443	Key	
75-2	8443-8444	/	
75-3	8444-8449	value	
75-4	8450-8455	pairs	
75-5	8456-8459	are	
75-6	8460-8467	matched	
75-7	8468-8473	based	
75-8	8474-8476	on	
75-9	8477-8482	their	
75-10	8483-8486	key	
75-11	8487-8492	value	
75-12	8492-8493	.	

#Text=Delete the array element with specified index (Negative integers count from the end).
76-1	8494-8500	Delete	
76-2	8501-8504	the	
76-3	8505-8510	array	
76-4	8511-8518	element	
76-5	8519-8523	with	
76-6	8524-8533	specified	
76-7	8534-8539	index	
76-8	8540-8541	(	
76-9	8541-8549	Negative	
76-10	8550-8558	integers	
76-11	8559-8564	count	
76-12	8565-8569	from	
76-13	8570-8573	the	
76-14	8574-8577	end	
76-15	8577-8578	)	
76-16	8578-8579	.	

#Text=Throws an error if top level container is not an array.
77-1	8580-8586	Throws	
77-2	8587-8589	an	
77-3	8590-8595	error	
77-4	8596-8598	if	
77-5	8599-8602	top	
77-6	8603-8608	level	
77-7	8609-8618	container	
77-8	8619-8621	is	
77-9	8622-8625	not	
77-10	8626-8628	an	
77-11	8629-8634	array	
77-12	8634-8635	.	

#Text=Delete the field or element with specified path (for JSON arrays, negative integers count from the end)
#Text=Does JSON path return any item for the specified JSON value?
78-1	8636-8642	Delete	
78-2	8643-8646	the	
78-3	8647-8652	field	
78-4	8653-8655	or	
78-5	8656-8663	element	
78-6	8664-8668	with	
78-7	8669-8678	specified	
78-8	8679-8683	path	
78-9	8684-8685	(	
78-10	8685-8688	for	
78-11	8689-8693	JSON	
78-12	8694-8700	arrays	
78-13	8700-8701	,	
78-14	8702-8710	negative	
78-15	8711-8719	integers	
78-16	8720-8725	count	
78-17	8726-8730	from	
78-18	8731-8734	the	
78-19	8735-8738	end	
78-20	8738-8739	)	
78-21	8740-8744	Does	
78-22	8745-8749	JSON	
78-23	8750-8754	path	
78-24	8755-8761	return	
78-25	8762-8765	any	
78-26	8766-8770	item	
78-27	8771-8774	for	
78-28	8775-8778	the	
78-29	8779-8788	specified	
78-30	8789-8793	JSON	
78-31	8794-8799	value	
78-32	8799-8800	?	

#Text=Returns the result of JSON path predicate check for the specified JSON value.
79-1	8801-8808	Returns	
79-2	8809-8812	the	
79-3	8813-8819	result	
79-4	8820-8822	of	
79-5	8823-8827	JSON	
79-6	8828-8832	path	
79-7	8833-8842	predicate	
79-8	8843-8848	check	
79-9	8849-8852	for	
79-10	8853-8856	the	
79-11	8857-8866	specified	
79-12	8867-8871	JSON	
79-13	8872-8877	value	
79-14	8877-8878	.	

#Text=Only the first item of the result is taken into account.
80-1	8879-8883	Only	
80-2	8884-8887	the	
80-3	8888-8893	first	
80-4	8894-8898	item	
80-5	8899-8901	of	
80-6	8902-8905	the	
80-7	8906-8912	result	
80-8	8913-8915	is	
80-9	8916-8921	taken	
80-10	8922-8926	into	
80-11	8927-8934	account	
80-12	8934-8935	.	

#Text=If the result is not Boolean, then null is returned.
81-1	8936-8938	If	
81-2	8939-8942	the	
81-3	8943-8949	result	
81-4	8950-8952	is	
81-5	8953-8956	not	
81-6	8957-8964	Boolean	
81-7	8964-8965	,	
81-8	8966-8970	then	
81-9	8971-8975	null	
81-10	8976-8978	is	
81-11	8979-8987	returned	
81-12	8987-8988	.	

#Text=PostgreSQL also provides a variety of Creation Functions and Processing Functions to work with the JSONB data.
82-1	8989-8999	PostgreSQL	
82-2	9000-9004	also	
82-3	9005-9013	provides	
82-4	9014-9015	a	
82-5	9016-9023	variety	
82-6	9024-9026	of	
82-7	9027-9035	Creation	
82-8	9036-9045	Functions	
82-9	9046-9049	and	
82-10	9050-9060	Processing	
82-11	9061-9070	Functions	
82-12	9071-9073	to	
82-13	9074-9078	work	
82-14	9079-9083	with	
82-15	9084-9087	the	
82-16	9088-9093	JSONB	
82-17	9094-9098	data	
82-18	9098-9099	.	

#Text=JSONB Indexes
#Text=JSONB provides a wide array of options to index your JSON data.
83-1	9100-9105	JSONB	
83-2	9106-9113	Indexes	
83-3	9114-9119	JSONB	
83-4	9120-9128	provides	
83-5	9129-9130	a	
83-6	9131-9135	wide	
83-7	9136-9141	array	
83-8	9142-9144	of	
83-9	9145-9152	options	
83-10	9153-9155	to	
83-11	9156-9161	index	
83-12	9162-9166	your	
83-13	9167-9171	JSON	
83-14	9172-9176	data	
83-15	9176-9177	.	

#Text=At a high-level, we are going to dig into 3 different types of indexes – GIN, BTREE and HASH.
84-1	9178-9180	At	
84-2	9181-9182	a	
84-3	9183-9193	high-level	
84-4	9193-9194	,	
84-5	9195-9197	we	
84-6	9198-9201	are	
84-7	9202-9207	going	
84-8	9208-9210	to	
84-9	9211-9214	dig	
84-10	9215-9219	into	
84-11	9220-9221	3	
84-12	9222-9231	different	
84-13	9232-9237	types	
84-14	9238-9240	of	
84-15	9241-9248	indexes	
84-16	9249-9250	–	
84-17	9251-9254	GIN	
84-18	9254-9255	,	
84-19	9256-9261	BTREE	
84-20	9261-9262	 	
84-21	9262-9265	and	
84-22	9266-9270	HASH	
84-23	9270-9271	.	

#Text=Not all index types support all operator classes, so planning is needed to design your indexes based on the type of operators and queries that you plan on using.
85-1	9272-9275	Not	
85-2	9276-9279	all	
85-3	9280-9285	index	
85-4	9286-9291	types	
85-5	9292-9299	support	
85-6	9300-9303	all	
85-7	9304-9312	operator	
85-8	9313-9320	classes	
85-9	9320-9321	,	
85-10	9322-9324	so	
85-11	9325-9333	planning	
85-12	9334-9336	is	
85-13	9337-9343	needed	
85-14	9344-9346	to	
85-15	9347-9353	design	
85-16	9354-9358	your	
85-17	9359-9366	indexes	
85-18	9367-9372	based	
85-19	9373-9375	on	
85-20	9376-9379	the	
85-21	9380-9384	type	
85-22	9385-9387	of	
85-23	9388-9397	operators	
85-24	9398-9401	and	
85-25	9402-9409	queries	
85-26	9410-9414	that	
85-27	9415-9418	you	
85-28	9419-9423	plan	
85-29	9424-9426	on	
85-30	9427-9432	using	
85-31	9432-9433	.	

#Text=GIN Indexes
#Text=GIN stands for “Generalized Inverted indexes”.
86-1	9434-9437	GIN	
86-2	9438-9445	Indexes	
86-3	9446-9449	GIN	
86-4	9450-9456	stands	
86-5	9457-9460	for	
86-6	9461-9462	“	
86-7	9462-9473	Generalized	
86-8	9474-9482	Inverted	
86-9	9483-9490	indexes	
86-10	9490-9491	”	
86-11	9491-9492	.	

#Text=From the docs:
#Text=“GIN is designed for handling cases where the items to be indexed are composite values, and the queries to be handled by the index need to search for element values that appear within the composite items.
87-1	9493-9497	From	
87-2	9498-9501	the	
87-3	9502-9506	docs	
87-4	9506-9507	:	
87-5	9508-9509	“	
87-6	9509-9512	GIN	
87-7	9513-9515	is	
87-8	9516-9524	designed	
87-9	9525-9528	for	
87-10	9529-9537	handling	
87-11	9538-9543	cases	
87-12	9544-9549	where	
87-13	9550-9553	the	
87-14	9554-9559	items	
87-15	9560-9562	to	
87-16	9563-9565	be	
87-17	9566-9573	indexed	
87-18	9574-9577	are	
87-19	9578-9587	composite	
87-20	9588-9594	values	
87-21	9594-9595	,	
87-22	9596-9599	and	
87-23	9600-9603	the	
87-24	9604-9611	queries	
87-25	9612-9614	to	
87-26	9615-9617	be	
87-27	9618-9625	handled	
87-28	9626-9628	by	
87-29	9629-9632	the	
87-30	9633-9638	index	
87-31	9639-9643	need	
87-32	9644-9646	to	
87-33	9647-9653	search	
87-34	9654-9657	for	
87-35	9658-9665	element	
87-36	9666-9672	values	
87-37	9673-9677	that	
87-38	9678-9684	appear	
87-39	9685-9691	within	
87-40	9692-9695	the	
87-41	9696-9705	composite	
87-42	9706-9711	items	
87-43	9711-9712	.	

#Text=For example, the items could be documents, and the queries could be searches for documents containing specific words.”
88-1	9713-9716	For	
88-2	9717-9724	example	
88-3	9724-9725	,	
88-4	9726-9729	the	
88-5	9730-9735	items	
88-6	9736-9741	could	
88-7	9742-9744	be	
88-8	9745-9754	documents	
88-9	9754-9755	,	
88-10	9756-9759	and	
88-11	9760-9763	the	
88-12	9764-9771	queries	
88-13	9772-9777	could	
88-14	9778-9780	be	
88-15	9781-9789	searches	
88-16	9790-9793	for	
88-17	9794-9803	documents	
88-18	9804-9814	containing	
88-19	9815-9823	specific	
88-20	9824-9829	words	
88-21	9829-9830	.	
88-22	9830-9831	”	

#Text=GIN supports two operator classes:
#Text=jsonb_ops (default) – ?
89-1	9832-9835	GIN	
89-2	9836-9844	supports	
89-3	9845-9848	two	
89-4	9849-9857	operator	
89-5	9858-9865	classes	
89-6	9865-9866	:	
89-7	9867-9876	jsonb_ops	
89-8	9877-9878	(	
89-9	9878-9885	default	
89-10	9885-9886	)	
89-11	9887-9888	–	
89-12	9889-9890	?	

#Text=, ?
90-1	9890-9891	,	
90-2	9892-9893	?	

#Text=|, ?
91-1	9893-9894	|	
91-2	9894-9895	,	
91-3	9896-9897	?	

#Text=&, @>, @@, @?
92-1	9897-9898	&	
92-2	9898-9899	,	
92-3	9900-9901	@	
92-4	9901-9902	>	
92-5	9902-9903	,	
92-6	9904-9905	@	
92-7	9905-9906	@	
92-8	9906-9907	,	
92-9	9908-9909	@	
92-10	9909-9910	?	

#Text=[Index each key and value in the JSONB element]
#Text=jsonb_pathops – @>, @@, @?
93-1	9911-9912	[	
93-2	9912-9917	Index	
93-3	9918-9922	each	
93-4	9923-9926	key	
93-5	9927-9930	and	
93-6	9931-9936	value	
93-7	9937-9939	in	
93-8	9940-9943	the	
93-9	9944-9949	JSONB	
93-10	9950-9957	element	
93-11	9957-9958	]	
93-12	9959-9972	jsonb_pathops	
93-13	9973-9974	–	
93-14	9975-9976	@	
93-15	9976-9977	>	
93-16	9977-9978	,	
93-17	9979-9980	@	
93-18	9980-9981	@	
93-19	9981-9982	,	
93-20	9983-9984	@	
93-21	9984-9985	?	

#Text=[Index only the values in the JSONB element]
#Text=CREATE INDEX datagin ON books USING gin (data);
#Text=Existence Operators (?
94-1	9986-9987	[	
94-2	9987-9992	Index	
94-3	9993-9997	only	
94-4	9998-10001	the	
94-5	10002-10008	values	
94-6	10009-10011	in	
94-7	10012-10015	the	
94-8	10016-10021	JSONB	
94-9	10022-10029	element	
94-10	10029-10030	]	
94-11	10031-10037	CREATE	
94-12	10038-10043	INDEX	
94-13	10044-10051	datagin	
94-14	10052-10054	ON	
94-15	10055-10060	books	
94-16	10061-10066	USING	
94-17	10067-10070	gin	
94-18	10071-10072	(	
94-19	10072-10076	data	
94-20	10076-10077	)	
94-21	10077-10078	;	
94-22	10079-10088	Existence	
94-23	10089-10098	Operators	
94-24	10099-10100	(	
94-25	10100-10101	?	

#Text=, ?
95-1	10101-10102	,	
95-2	10103-10104	?	

#Text=|, ?
96-1	10104-10105	|	
96-2	10105-10106	,	
96-3	10107-10108	?	

#Text=& )
#Text=These operators can be used to check for the existence of top-level keys in the JSONB.
97-1	10108-10109	&	
97-2	10110-10111	)	
97-3	10112-10117	These	
97-4	10118-10127	operators	
97-5	10128-10131	can	
97-6	10132-10134	be	
97-7	10135-10139	used	
97-8	10140-10142	to	
97-9	10143-10148	check	
97-10	10149-10152	for	
97-11	10153-10156	the	
97-12	10157-10166	existence	
97-13	10167-10169	of	
97-14	10170-10179	top-level	
97-15	10180-10184	keys	
97-16	10185-10187	in	
97-17	10188-10191	the	
97-18	10192-10197	JSONB	
97-19	10197-10198	.	

#Text=Let’s create a GIN index on the data JSONB column.
98-1	10199-10202	Let	
98-2	10202-10203	’	
98-3	10203-10204	s	
98-4	10205-10211	create	
98-5	10212-10213	a	
98-6	10214-10217	GIN	
98-7	10218-10223	index	
98-8	10224-10226	on	
98-9	10227-10230	the	
98-10	10231-10235	data	
98-11	10236-10241	JSONB	
98-12	10242-10248	column	
98-13	10248-10249	.	

#Text=For example, find all books that are available in braille.
99-1	10250-10253	For	
99-2	10254-10261	example	
99-3	10261-10262	,	
99-4	10263-10267	find	
99-5	10268-10271	all	
99-6	10272-10277	books	
99-7	10278-10282	that	
99-8	10283-10286	are	
99-9	10287-10296	available	
99-10	10297-10299	in	
99-11	10300-10307	braille	
99-12	10307-10308	.	

#Text=The JSON looks something like this:
#Text="{"tags": {"nk594127": {"ik71786": "iv678771"}}, "braille": false, "keywords": ["abc", "kef", "keh"], "hardcover": true, "publisher": "EfgdxUdvB0", "criticrating": 1}
#Text=demo=# select * from books where data ?
100-1	10309-10312	The	
100-2	10313-10317	JSON	
100-3	10318-10323	looks	
100-4	10324-10333	something	
100-5	10334-10338	like	
100-6	10339-10343	this	
100-7	10343-10344	:	
100-8	10345-10346	"	
100-9	10346-10347	{	
100-10	10347-10348	"	
100-11	10348-10352	tags	
100-12	10352-10353	"	
100-13	10353-10354	:	
100-14	10355-10356	{	
100-15	10356-10357	"	
100-16	10357-10365	nk594127	
100-17	10365-10366	"	
100-18	10366-10367	:	
100-19	10368-10369	{	
100-20	10369-10370	"	
100-21	10370-10377	ik71786	
100-22	10377-10378	"	
100-23	10378-10379	:	
100-24	10380-10381	"	
100-25	10381-10389	iv678771	
100-26	10389-10390	"	
100-27	10390-10391	}	
100-28	10391-10392	}	
100-29	10392-10393	,	
100-30	10394-10395	"	
100-31	10395-10402	braille	
100-32	10402-10403	"	
100-33	10403-10404	:	
100-34	10405-10410	false	
100-35	10410-10411	,	
100-36	10412-10413	"	
100-37	10413-10421	keywords	
100-38	10421-10422	"	
100-39	10422-10423	:	
100-40	10424-10425	[	
100-41	10425-10426	"	
100-42	10426-10429	abc	
100-43	10429-10430	"	
100-44	10430-10431	,	
100-45	10432-10433	"	
100-46	10433-10436	kef	
100-47	10436-10437	"	
100-48	10437-10438	,	
100-49	10439-10440	"	
100-50	10440-10443	keh	
100-51	10443-10444	"	
100-52	10444-10445	]	
100-53	10445-10446	,	
100-54	10447-10448	"	
100-55	10448-10457	hardcover	
100-56	10457-10458	"	
100-57	10458-10459	:	
100-58	10460-10464	true	
100-59	10464-10465	,	
100-60	10466-10467	"	
100-61	10467-10476	publisher	
100-62	10476-10477	"	
100-63	10477-10478	:	
100-64	10479-10480	"	
100-65	10480-10490	EfgdxUdvB0	
100-66	10490-10491	"	
100-67	10491-10492	,	
100-68	10493-10494	"	
100-69	10494-10506	criticrating	
100-70	10506-10507	"	
100-71	10507-10508	:	
100-72	10509-10510	1	
100-73	10510-10511	}	
100-74	10512-10516	demo	
100-75	10516-10517	=	
100-76	10517-10518	#	
100-77	10519-10525	select	
100-78	10526-10527	*	
100-79	10528-10532	from	
100-80	10533-10538	books	
100-81	10539-10544	where	
100-82	10545-10549	data	
100-83	10550-10551	?	

#Text='braille';
#Text=id | author | isbn | rating | data
#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------
#Text=------------------
#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", "
#Text=criticrating": 4}
#Text=.....
#Text=demo=# explain analyze select * from books where data ?
101-1	10552-10553	'	
101-2	10553-10560	braille	
101-3	10560-10561	'	
101-4	10561-10562	;	
101-5	10563-10565	id	
101-6	10566-10567	|	
101-7	10568-10574	author	
101-8	10575-10576	|	
101-9	10577-10581	isbn	
101-10	10582-10583	|	
101-11	10584-10590	rating	
101-12	10591-10592	|	
101-13	10593-10597	data	
101-14	10598-10599	-	
101-15	10599-10600	-	
101-16	10600-10601	-	
101-17	10601-10602	-	
101-18	10602-10603	-	
101-19	10603-10604	-	
101-20	10604-10605	-	
101-21	10605-10606	-	
101-22	10606-10607	-	
101-23	10607-10608	+	
101-24	10608-10609	-	
101-25	10609-10610	-	
101-26	10610-10611	-	
101-27	10611-10612	-	
101-28	10612-10613	-	
101-29	10613-10614	-	
101-30	10614-10615	-	
101-31	10615-10616	-	
101-32	10616-10617	-	
101-33	10617-10618	-	
101-34	10618-10619	-	
101-35	10619-10620	-	
101-36	10620-10621	-	
101-37	10621-10622	-	
101-38	10622-10623	-	
101-39	10623-10624	-	
101-40	10624-10625	-	
101-41	10625-10626	+	
101-42	10626-10627	-	
101-43	10627-10628	-	
101-44	10628-10629	-	
101-45	10629-10630	-	
101-46	10630-10631	-	
101-47	10631-10632	-	
101-48	10632-10633	-	
101-49	10633-10634	-	
101-50	10634-10635	-	
101-51	10635-10636	-	
101-52	10636-10637	-	
101-53	10637-10638	-	
101-54	10638-10639	+	
101-55	10639-10640	-	
101-56	10640-10641	-	
101-57	10641-10642	-	
101-58	10642-10643	-	
101-59	10643-10644	-	
101-60	10644-10645	-	
101-61	10645-10646	-	
101-62	10646-10647	-	
101-63	10647-10648	+	
101-64	10648-10649	-	
101-65	10649-10650	-	
101-66	10650-10651	-	
101-67	10651-10652	-	
101-68	10652-10653	-	
101-69	10653-10654	-	
101-70	10654-10655	-	
101-71	10655-10656	-	
101-72	10656-10657	-	
101-73	10657-10658	-	
101-74	10658-10659	-	
101-75	10659-10660	-	
101-76	10660-10661	-	
101-77	10661-10662	-	
101-78	10662-10663	-	
101-79	10663-10664	-	
101-80	10664-10665	-	
101-81	10665-10666	-	
101-82	10666-10667	-	
101-83	10667-10668	-	
101-84	10668-10669	-	
101-85	10669-10670	-	
101-86	10670-10671	-	
101-87	10671-10672	-	
101-88	10672-10673	-	
101-89	10673-10674	-	
101-90	10674-10675	-	
101-91	10675-10676	-	
101-92	10676-10677	-	
101-93	10677-10678	-	
101-94	10678-10679	-	
101-95	10679-10680	-	
101-96	10680-10681	-	
101-97	10681-10682	-	
101-98	10682-10683	-	
101-99	10683-10684	-	
101-100	10684-10685	-	
101-101	10685-10686	-	
101-102	10686-10687	-	
101-103	10687-10688	-	
101-104	10688-10689	-	
101-105	10689-10690	-	
101-106	10690-10691	-	
101-107	10691-10692	-	
101-108	10692-10693	-	
101-109	10693-10694	-	
101-110	10694-10695	-	
101-111	10695-10696	-	
101-112	10696-10697	-	
101-113	10697-10698	-	
101-114	10698-10699	-	
101-115	10699-10700	-	
101-116	10700-10701	-	
101-117	10701-10702	-	
101-118	10702-10703	-	
101-119	10703-10704	-	
101-120	10704-10705	-	
101-121	10705-10706	-	
101-122	10706-10707	-	
101-123	10707-10708	-	
101-124	10708-10709	-	
101-125	10709-10710	-	
101-126	10710-10711	-	
101-127	10711-10712	-	
101-128	10712-10713	-	
101-129	10713-10714	-	
101-130	10714-10715	-	
101-131	10715-10716	-	
101-132	10716-10717	-	
101-133	10717-10718	-	
101-134	10718-10719	-	
101-135	10719-10720	-	
101-136	10720-10721	-	
101-137	10721-10722	-	
101-138	10722-10723	-	
101-139	10723-10724	-	
101-140	10724-10725	-	
101-141	10725-10726	-	
101-142	10726-10727	-	
101-143	10727-10728	-	
101-144	10728-10729	-	
101-145	10729-10730	-	
101-146	10730-10731	-	
101-147	10731-10732	-	
101-148	10732-10733	-	
101-149	10733-10734	-	
101-150	10734-10735	-	
101-151	10735-10736	-	
101-152	10736-10737	-	
101-153	10737-10738	-	
101-154	10738-10739	-	
101-155	10739-10740	-	
101-156	10740-10741	-	
101-157	10741-10742	-	
101-158	10742-10743	-	
101-159	10743-10744	-	
101-160	10744-10745	-	
101-161	10745-10746	-	
101-162	10746-10747	-	
101-163	10747-10748	-	
101-164	10748-10749	-	
101-165	10749-10750	-	
101-166	10750-10751	-	
101-167	10751-10752	-	
101-168	10752-10753	-	
101-169	10753-10754	-	
101-170	10754-10755	-	
101-171	10755-10756	-	
101-172	10756-10757	-	
101-173	10757-10758	-	
101-174	10758-10759	-	
101-175	10759-10760	-	
101-176	10760-10761	-	
101-177	10761-10762	-	
101-178	10762-10763	-	
101-179	10763-10764	-	
101-180	10764-10765	-	
101-181	10765-10766	-	
101-182	10766-10767	-	
101-183	10767-10768	-	
101-184	10768-10769	-	
101-185	10769-10770	-	
101-186	10770-10771	-	
101-187	10771-10772	-	
101-188	10772-10773	-	
101-189	10773-10774	-	
101-190	10774-10775	-	
101-191	10775-10776	-	
101-192	10776-10777	-	
101-193	10777-10778	-	
101-194	10778-10779	-	
101-195	10779-10780	-	
101-196	10780-10781	-	
101-197	10781-10782	-	
101-198	10782-10783	-	
101-199	10783-10784	-	
101-200	10784-10785	-	
101-201	10785-10786	-	
101-202	10786-10787	-	
101-203	10787-10788	-	
101-204	10788-10789	-	
101-205	10789-10790	-	
101-206	10790-10791	-	
101-207	10791-10792	-	
101-208	10792-10793	-	
101-209	10793-10794	-	
101-210	10794-10795	-	
101-211	10795-10796	-	
101-212	10796-10797	-	
101-213	10797-10798	-	
101-214	10799-10800	-	
101-215	10800-10801	-	
101-216	10801-10802	-	
101-217	10802-10803	-	
101-218	10803-10804	-	
101-219	10804-10805	-	
101-220	10805-10806	-	
101-221	10806-10807	-	
101-222	10807-10808	-	
101-223	10808-10809	-	
101-224	10809-10810	-	
101-225	10810-10811	-	
101-226	10811-10812	-	
101-227	10812-10813	-	
101-228	10813-10814	-	
101-229	10814-10815	-	
101-230	10815-10816	-	
101-231	10816-10817	-	
101-232	10818-10825	1000005	
101-233	10826-10827	|	
101-234	10828-10843	XEI7xShT8bPu6H7	
101-235	10844-10845	|	
101-236	10846-10856	2kD5XJDZUF	
101-237	10857-10858	|	
101-238	10859-10860	0	
101-239	10861-10862	|	
101-240	10863-10864	{	
101-241	10864-10865	"	
101-242	10865-10869	tags	
101-243	10869-10870	"	
101-244	10870-10871	:	
101-245	10872-10873	{	
101-246	10873-10874	"	
101-247	10874-10882	nk455671	
101-248	10882-10883	"	
101-249	10883-10884	:	
101-250	10885-10886	{	
101-251	10886-10887	"	
101-252	10887-10895	ik937456	
101-253	10895-10896	"	
101-254	10896-10897	:	
101-255	10898-10899	"	
101-256	10899-10907	iv506075	
101-257	10907-10908	"	
101-258	10908-10909	}	
101-259	10909-10910	}	
101-260	10910-10911	,	
101-261	10912-10913	"	
101-262	10913-10920	braille	
101-263	10920-10921	"	
101-264	10921-10922	:	
101-265	10923-10927	true	
101-266	10927-10928	,	
101-267	10929-10930	"	
101-268	10930-10938	keywords	
101-269	10938-10939	"	
101-270	10939-10940	:	
101-271	10941-10942	[	
101-272	10942-10943	"	
101-273	10943-10946	abc	
101-274	10946-10947	"	
101-275	10947-10948	,	
101-276	10949-10950	"	
101-277	10950-10953	kef	
101-278	10953-10954	"	
101-279	10954-10955	,	
101-280	10956-10957	"	
101-281	10957-10960	keh	
101-282	10960-10961	"	
101-283	10961-10962	]	
101-284	10962-10963	,	
101-285	10964-10965	"	
101-286	10965-10974	hardcover	
101-287	10974-10975	"	
101-288	10975-10976	:	
101-289	10977-10982	false	
101-290	10982-10983	,	
101-291	10984-10985	"	
101-292	10985-10994	publisher	
101-293	10994-10995	"	
101-294	10995-10996	:	
101-295	10997-10998	"	
101-296	10998-11008	zSfZIAjGGs	
101-297	11008-11009	"	
101-298	11009-11010	,	
101-299	11011-11012	"	
101-300	11013-11025	criticrating	
101-301	11025-11026	"	
101-302	11026-11027	:	
101-303	11028-11029	4	
101-304	11029-11030	}	
101-305	11031-11032	.	
101-306	11032-11033	.	
101-307	11033-11034	.	
101-308	11034-11035	.	
101-309	11035-11036	.	
101-310	11037-11041	demo	
101-311	11041-11042	=	
101-312	11042-11043	#	
101-313	11044-11051	explain	
101-314	11052-11059	analyze	
101-315	11060-11066	select	
101-316	11067-11068	*	
101-317	11069-11073	from	
101-318	11074-11079	books	
101-319	11080-11085	where	
101-320	11086-11090	data	
101-321	11091-11092	?	

#Text='braille';
#Text=QUERY PLAN
#Text=---------------------------------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books (cost=12.75..1005.25 rows=1000 width=158) (actual time=0.033..0.039 rows=15 loops=1)
#Text=Recheck Cond: (data ?
102-1	11093-11094	'	
102-2	11094-11101	braille	
102-3	11101-11102	'	
102-4	11102-11103	;	
102-5	11104-11109	QUERY	
102-6	11110-11114	PLAN	
102-7	11115-11116	-	
102-8	11116-11117	-	
102-9	11117-11118	-	
102-10	11118-11119	-	
102-11	11119-11120	-	
102-12	11120-11121	-	
102-13	11121-11122	-	
102-14	11122-11123	-	
102-15	11123-11124	-	
102-16	11124-11125	-	
102-17	11125-11126	-	
102-18	11126-11127	-	
102-19	11127-11128	-	
102-20	11128-11129	-	
102-21	11129-11130	-	
102-22	11130-11131	-	
102-23	11131-11132	-	
102-24	11132-11133	-	
102-25	11133-11134	-	
102-26	11134-11135	-	
102-27	11135-11136	-	
102-28	11136-11137	-	
102-29	11137-11138	-	
102-30	11138-11139	-	
102-31	11139-11140	-	
102-32	11140-11141	-	
102-33	11141-11142	-	
102-34	11142-11143	-	
102-35	11143-11144	-	
102-36	11144-11145	-	
102-37	11145-11146	-	
102-38	11146-11147	-	
102-39	11147-11148	-	
102-40	11148-11149	-	
102-41	11149-11150	-	
102-42	11150-11151	-	
102-43	11151-11152	-	
102-44	11152-11153	-	
102-45	11153-11154	-	
102-46	11154-11155	-	
102-47	11155-11156	-	
102-48	11156-11157	-	
102-49	11157-11158	-	
102-50	11158-11159	-	
102-51	11159-11160	-	
102-52	11160-11161	-	
102-53	11161-11162	-	
102-54	11162-11163	-	
102-55	11163-11164	-	
102-56	11164-11165	-	
102-57	11165-11166	-	
102-58	11166-11167	-	
102-59	11167-11168	-	
102-60	11168-11169	-	
102-61	11169-11170	-	
102-62	11170-11171	-	
102-63	11171-11172	-	
102-64	11172-11173	-	
102-65	11173-11174	-	
102-66	11174-11175	-	
102-67	11175-11176	-	
102-68	11176-11177	-	
102-69	11177-11178	-	
102-70	11178-11179	-	
102-71	11179-11180	-	
102-72	11180-11181	-	
102-73	11181-11182	-	
102-74	11182-11183	-	
102-75	11183-11184	-	
102-76	11184-11185	-	
102-77	11185-11186	-	
102-78	11186-11187	-	
102-79	11187-11188	-	
102-80	11188-11189	-	
102-81	11189-11190	-	
102-82	11190-11191	-	
102-83	11191-11192	-	
102-84	11192-11193	-	
102-85	11193-11194	-	
102-86	11194-11195	-	
102-87	11195-11196	-	
102-88	11196-11197	-	
102-89	11197-11198	-	
102-90	11198-11199	-	
102-91	11199-11200	-	
102-92	11200-11201	-	
102-93	11201-11202	-	
102-94	11202-11203	-	
102-95	11203-11204	-	
102-96	11204-11205	-	
102-97	11205-11206	-	
102-98	11206-11207	-	
102-99	11207-11208	-	
102-100	11208-11209	-	
102-101	11209-11210	-	
102-102	11210-11211	-	
102-103	11211-11212	-	
102-104	11212-11213	-	
102-105	11213-11214	-	
102-106	11214-11215	-	
102-107	11215-11216	-	
102-108	11216-11217	-	
102-109	11217-11218	-	
102-110	11218-11219	-	
102-111	11219-11220	-	
102-112	11220-11221	-	
102-113	11221-11222	-	
102-114	11222-11223	-	
102-115	11223-11224	-	
102-116	11224-11225	-	
102-117	11225-11226	-	
102-118	11226-11227	-	
102-119	11227-11228	-	
102-120	11228-11229	-	
102-121	11229-11230	-	
102-122	11230-11231	-	
102-123	11231-11232	-	
102-124	11233-11239	Bitmap	
102-125	11240-11244	Heap	
102-126	11245-11249	Scan	
102-127	11250-11252	on	
102-128	11253-11258	books	
102-129	11259-11260	(	
102-130	11260-11264	cost	
102-131	11264-11265	=	
102-132	11265-11270	12.75	
102-133	11270-11271	.	
102-134	11271-11279	.1005.25	
102-135	11280-11284	rows	
102-136	11284-11285	=	
102-137	11285-11289	1000	
102-138	11290-11295	width	
102-139	11295-11296	=	
102-140	11296-11299	158	
102-141	11299-11300	)	
102-142	11301-11302	(	
102-143	11302-11308	actual	
102-144	11309-11313	time	
102-145	11313-11314	=	
102-146	11314-11319	0.033	
102-147	11319-11320	.	
102-148	11320-11326	.0.039	
102-149	11327-11331	rows	
102-150	11331-11332	=	
102-151	11332-11334	15	
102-152	11335-11340	loops	
102-153	11340-11341	=	
102-154	11341-11342	1	
102-155	11342-11343	)	
102-156	11344-11351	Recheck	
102-157	11352-11356	Cond	
102-158	11356-11357	:	
102-159	11358-11359	(	
102-160	11359-11363	data	
102-161	11364-11365	?	

#Text='braille'::text)
#Text=Heap Blocks: exact=2
#Text=-> Bitmap Index Scan on datagin (cost=0.00..12.50 rows=1000 width=0) (actual time=0.022..0.022 rows=15 loops=1)
#Text=Index Cond: (data ?
103-1	11366-11367	'	
103-2	11367-11374	braille	
103-3	11374-11375	'	
103-4	11375-11376	:	
103-5	11376-11377	:	
103-6	11377-11381	text	
103-7	11381-11382	)	
103-8	11383-11387	Heap	
103-9	11388-11394	Blocks	
103-10	11394-11395	:	
103-11	11396-11401	exact	
103-12	11401-11402	=	
103-13	11402-11403	2	
103-14	11404-11405	-	
103-15	11405-11406	>	
103-16	11407-11413	Bitmap	
103-17	11414-11419	Index	
103-18	11420-11424	Scan	
103-19	11425-11427	on	
103-20	11428-11435	datagin	
103-21	11436-11437	(	
103-22	11437-11441	cost	
103-23	11441-11442	=	
103-24	11442-11446	0.00	
103-25	11446-11447	.	
103-26	11447-11453	.12.50	
103-27	11454-11458	rows	
103-28	11458-11459	=	
103-29	11459-11463	1000	
103-30	11464-11469	width	
103-31	11469-11470	=	
103-32	11470-11471	0	
103-33	11471-11472	)	
103-34	11473-11474	(	
103-35	11474-11480	actual	
103-36	11481-11485	time	
103-37	11485-11486	=	
103-38	11486-11491	0.022	
103-39	11491-11492	.	
103-40	11492-11498	.0.022	
103-41	11499-11503	rows	
103-42	11503-11504	=	
103-43	11504-11506	15	
103-44	11507-11512	loops	
103-45	11512-11513	=	
103-46	11513-11514	1	
103-47	11514-11515	)	
103-48	11516-11521	Index	
103-49	11522-11526	Cond	
103-50	11526-11527	:	
103-51	11528-11529	(	
103-52	11529-11533	data	
103-53	11534-11535	?	

#Text='braille'::text)
#Text=Planning Time: 0.102 ms
#Text=Execution Time: 0.067 ms
#Text=(7 rows)
#Text=As you can see from the explain output, the GIN index that we created is being used for the search.
104-1	11536-11537	'	
104-2	11537-11544	braille	
104-3	11544-11545	'	
104-4	11545-11546	:	
104-5	11546-11547	:	
104-6	11547-11551	text	
104-7	11551-11552	)	
104-8	11553-11561	Planning	
104-9	11562-11566	Time	
104-10	11566-11567	:	
104-11	11568-11573	0.102	
104-12	11574-11576	ms	
104-13	11577-11586	Execution	
104-14	11587-11591	Time	
104-15	11591-11592	:	
104-16	11593-11598	0.067	
104-17	11599-11601	ms	
104-18	11602-11603	(	
104-19	11603-11604	7	
104-20	11605-11609	rows	
104-21	11609-11610	)	
104-22	11611-11613	As	
104-23	11614-11617	you	
104-24	11618-11621	can	
104-25	11622-11625	see	
104-26	11626-11630	from	
104-27	11631-11634	the	
104-28	11635-11642	explain	
104-29	11643-11649	output	
104-30	11649-11650	,	
104-31	11651-11654	the	
104-32	11655-11658	GIN	
104-33	11659-11664	index	
104-34	11665-11669	that	
104-35	11670-11672	we	
104-36	11673-11680	created	
104-37	11681-11683	is	
104-38	11684-11689	being	
104-39	11690-11694	used	
104-40	11695-11698	for	
104-41	11699-11702	the	
104-42	11703-11709	search	
104-43	11709-11710	.	

#Text=What if we wanted to find books that were in braille or in hardcover?
105-1	11711-11715	What	
105-2	11716-11718	if	
105-3	11719-11721	we	
105-4	11722-11728	wanted	
105-5	11729-11731	to	
105-6	11732-11736	find	
105-7	11737-11742	books	
105-8	11743-11747	that	
105-9	11748-11752	were	
105-10	11753-11755	in	
105-11	11756-11763	braille	
105-12	11764-11766	or	
105-13	11767-11769	in	
105-14	11770-11779	hardcover	
105-15	11779-11780	?	

#Text=demo=# explain analyze select * from books where data ?
106-1	11781-11785	demo	
106-2	11785-11786	=	
106-3	11786-11787	#	
106-4	11788-11795	explain	
106-5	11796-11803	analyze	
106-6	11804-11810	select	
106-7	11811-11812	*	
106-8	11813-11817	from	
106-9	11818-11823	books	
106-10	11824-11829	where	
106-11	11830-11834	data	
106-12	11835-11836	?	

#Text=| array['braille','hardcover'];
#Text=QUERY PLAN
#Text=---------------------------------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books (cost=16.75..1009.25 rows=1000 width=158) (actual time=0.029..0.035 rows=15 loops=1)
#Text=Recheck Cond: (data ?
107-1	11836-11837	|	
107-2	11838-11843	array	
107-3	11843-11844	[	
107-4	11844-11845	'	
107-5	11845-11852	braille	
107-6	11852-11853	'	
107-7	11853-11854	,	
107-8	11854-11855	'	
107-9	11855-11864	hardcover	
107-10	11864-11865	'	
107-11	11865-11866	]	
107-12	11866-11867	;	
107-13	11868-11873	QUERY	
107-14	11874-11878	PLAN	
107-15	11879-11880	-	
107-16	11880-11881	-	
107-17	11881-11882	-	
107-18	11882-11883	-	
107-19	11883-11884	-	
107-20	11884-11885	-	
107-21	11885-11886	-	
107-22	11886-11887	-	
107-23	11887-11888	-	
107-24	11888-11889	-	
107-25	11889-11890	-	
107-26	11890-11891	-	
107-27	11891-11892	-	
107-28	11892-11893	-	
107-29	11893-11894	-	
107-30	11894-11895	-	
107-31	11895-11896	-	
107-32	11896-11897	-	
107-33	11897-11898	-	
107-34	11898-11899	-	
107-35	11899-11900	-	
107-36	11900-11901	-	
107-37	11901-11902	-	
107-38	11902-11903	-	
107-39	11903-11904	-	
107-40	11904-11905	-	
107-41	11905-11906	-	
107-42	11906-11907	-	
107-43	11907-11908	-	
107-44	11908-11909	-	
107-45	11909-11910	-	
107-46	11910-11911	-	
107-47	11911-11912	-	
107-48	11912-11913	-	
107-49	11913-11914	-	
107-50	11914-11915	-	
107-51	11915-11916	-	
107-52	11916-11917	-	
107-53	11917-11918	-	
107-54	11918-11919	-	
107-55	11919-11920	-	
107-56	11920-11921	-	
107-57	11921-11922	-	
107-58	11922-11923	-	
107-59	11923-11924	-	
107-60	11924-11925	-	
107-61	11925-11926	-	
107-62	11926-11927	-	
107-63	11927-11928	-	
107-64	11928-11929	-	
107-65	11929-11930	-	
107-66	11930-11931	-	
107-67	11931-11932	-	
107-68	11932-11933	-	
107-69	11933-11934	-	
107-70	11934-11935	-	
107-71	11935-11936	-	
107-72	11936-11937	-	
107-73	11937-11938	-	
107-74	11938-11939	-	
107-75	11939-11940	-	
107-76	11940-11941	-	
107-77	11941-11942	-	
107-78	11942-11943	-	
107-79	11943-11944	-	
107-80	11944-11945	-	
107-81	11945-11946	-	
107-82	11946-11947	-	
107-83	11947-11948	-	
107-84	11948-11949	-	
107-85	11949-11950	-	
107-86	11950-11951	-	
107-87	11951-11952	-	
107-88	11952-11953	-	
107-89	11953-11954	-	
107-90	11954-11955	-	
107-91	11955-11956	-	
107-92	11956-11957	-	
107-93	11957-11958	-	
107-94	11958-11959	-	
107-95	11959-11960	-	
107-96	11960-11961	-	
107-97	11961-11962	-	
107-98	11962-11963	-	
107-99	11963-11964	-	
107-100	11964-11965	-	
107-101	11965-11966	-	
107-102	11966-11967	-	
107-103	11967-11968	-	
107-104	11968-11969	-	
107-105	11969-11970	-	
107-106	11970-11971	-	
107-107	11971-11972	-	
107-108	11972-11973	-	
107-109	11973-11974	-	
107-110	11974-11975	-	
107-111	11975-11976	-	
107-112	11976-11977	-	
107-113	11977-11978	-	
107-114	11978-11979	-	
107-115	11979-11980	-	
107-116	11980-11981	-	
107-117	11981-11982	-	
107-118	11982-11983	-	
107-119	11983-11984	-	
107-120	11984-11985	-	
107-121	11985-11986	-	
107-122	11986-11987	-	
107-123	11987-11988	-	
107-124	11988-11989	-	
107-125	11989-11990	-	
107-126	11990-11991	-	
107-127	11991-11992	-	
107-128	11992-11993	-	
107-129	11993-11994	-	
107-130	11994-11995	-	
107-131	11995-11996	-	
107-132	11997-12003	Bitmap	
107-133	12004-12008	Heap	
107-134	12009-12013	Scan	
107-135	12014-12016	on	
107-136	12017-12022	books	
107-137	12023-12024	(	
107-138	12024-12028	cost	
107-139	12028-12029	=	
107-140	12029-12034	16.75	
107-141	12034-12035	.	
107-142	12035-12043	.1009.25	
107-143	12044-12048	rows	
107-144	12048-12049	=	
107-145	12049-12053	1000	
107-146	12054-12059	width	
107-147	12059-12060	=	
107-148	12060-12063	158	
107-149	12063-12064	)	
107-150	12065-12066	(	
107-151	12066-12072	actual	
107-152	12073-12077	time	
107-153	12077-12078	=	
107-154	12078-12083	0.029	
107-155	12083-12084	.	
107-156	12084-12090	.0.035	
107-157	12091-12095	rows	
107-158	12095-12096	=	
107-159	12096-12098	15	
107-160	12099-12104	loops	
107-161	12104-12105	=	
107-162	12105-12106	1	
107-163	12106-12107	)	
107-164	12108-12115	Recheck	
107-165	12116-12120	Cond	
107-166	12120-12121	:	
107-167	12122-12123	(	
107-168	12123-12127	data	
107-169	12128-12129	?	

#Text=| '{braille,hardcover}'::text[])
#Text=Heap Blocks: exact=2
#Text=-> Bitmap Index Scan on datagin (cost=0.00..16.50 rows=1000 width=0) (actual time=0.023..0.023 rows=15 loops=1)
#Text=Index Cond: (data ?
108-1	12129-12130	|	
108-2	12131-12132	'	
108-3	12132-12133	{	
108-4	12133-12140	braille	
108-5	12140-12141	,	
108-6	12141-12150	hardcover	
108-7	12150-12151	}	
108-8	12151-12152	'	
108-9	12152-12153	:	
108-10	12153-12154	:	
108-11	12154-12158	text	
108-12	12158-12159	[	
108-13	12159-12160	]	
108-14	12160-12161	)	
108-15	12162-12166	Heap	
108-16	12167-12173	Blocks	
108-17	12173-12174	:	
108-18	12175-12180	exact	
108-19	12180-12181	=	
108-20	12181-12182	2	
108-21	12183-12184	-	
108-22	12184-12185	>	
108-23	12186-12192	Bitmap	
108-24	12193-12198	Index	
108-25	12199-12203	Scan	
108-26	12204-12206	on	
108-27	12207-12214	datagin	
108-28	12215-12216	(	
108-29	12216-12220	cost	
108-30	12220-12221	=	
108-31	12221-12225	0.00	
108-32	12225-12226	.	
108-33	12226-12232	.16.50	
108-34	12233-12237	rows	
108-35	12237-12238	=	
108-36	12238-12242	1000	
108-37	12243-12248	width	
108-38	12248-12249	=	
108-39	12249-12250	0	
108-40	12250-12251	)	
108-41	12252-12253	(	
108-42	12253-12259	actual	
108-43	12260-12264	time	
108-44	12264-12265	=	
108-45	12265-12270	0.023	
108-46	12270-12271	.	
108-47	12271-12277	.0.023	
108-48	12278-12282	rows	
108-49	12282-12283	=	
108-50	12283-12285	15	
108-51	12286-12291	loops	
108-52	12291-12292	=	
108-53	12292-12293	1	
108-54	12293-12294	)	
108-55	12295-12300	Index	
108-56	12301-12305	Cond	
108-57	12305-12306	:	
108-58	12307-12308	(	
108-59	12308-12312	data	
108-60	12313-12314	?	

#Text=| '{braille,hardcover}'::text[])
#Text=Planning Time: 0.138 ms
#Text=Execution Time: 0.057 ms
#Text=(7 rows)
#Text=The GIN index supports the “existence” operators only on “top-level” keys.
109-1	12314-12315	|	
109-2	12316-12317	'	
109-3	12317-12318	{	
109-4	12318-12325	braille	
109-5	12325-12326	,	
109-6	12326-12335	hardcover	
109-7	12335-12336	}	
109-8	12336-12337	'	
109-9	12337-12338	:	
109-10	12338-12339	:	
109-11	12339-12343	text	
109-12	12343-12344	[	
109-13	12344-12345	]	
109-14	12345-12346	)	
109-15	12347-12355	Planning	
109-16	12356-12360	Time	
109-17	12360-12361	:	
109-18	12362-12367	0.138	
109-19	12368-12370	ms	
109-20	12371-12380	Execution	
109-21	12381-12385	Time	
109-22	12385-12386	:	
109-23	12387-12392	0.057	
109-24	12393-12395	ms	
109-25	12396-12397	(	
109-26	12397-12398	7	
109-27	12399-12403	rows	
109-28	12403-12404	)	
109-29	12405-12408	The	
109-30	12409-12412	GIN	
109-31	12413-12418	index	
109-32	12419-12427	supports	
109-33	12428-12431	the	
109-34	12432-12433	“	
109-35	12433-12442	existence	
109-36	12442-12443	”	
109-37	12444-12453	operators	
109-38	12454-12458	only	
109-39	12459-12461	on	
109-40	12462-12463	“	
109-41	12463-12472	top-level	
109-42	12472-12473	”	
109-43	12474-12478	keys	
109-44	12478-12479	.	

#Text=If the key is not at the top level, then the index will not be used.
110-1	12480-12482	If	
110-2	12483-12486	the	
110-3	12487-12490	key	
110-4	12491-12493	is	
110-5	12494-12497	not	
110-6	12498-12500	at	
110-7	12501-12504	the	
110-8	12505-12508	top	
110-9	12509-12514	level	
110-10	12514-12515	,	
110-11	12516-12520	then	
110-12	12521-12524	the	
110-13	12525-12530	index	
110-14	12531-12535	will	
110-15	12536-12539	not	
110-16	12540-12542	be	
110-17	12543-12547	used	
110-18	12547-12548	.	

#Text=It will result in a sequential scan:
#Text=demo=# select * from books where data->'tags' ?
111-1	12549-12551	It	
111-2	12552-12556	will	
111-3	12557-12563	result	
111-4	12564-12566	in	
111-5	12567-12568	a	
111-6	12569-12579	sequential	
111-7	12580-12584	scan	
111-8	12584-12585	:	
111-9	12586-12590	demo	
111-10	12590-12591	=	
111-11	12591-12592	#	
111-12	12593-12599	select	
111-13	12600-12601	*	
111-14	12602-12606	from	
111-15	12607-12612	books	
111-16	12613-12618	where	
111-17	12619-12623	data	
111-18	12623-12624	-	
111-19	12624-12625	>	
111-20	12625-12626	'	
111-21	12626-12630	tags	
111-22	12630-12631	'	
111-23	12632-12633	?	

#Text='nk455671';
#Text=id | author | isbn | rating | data
#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------
#Text=------------------
#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", "
#Text=criticrating": 4}
#Text=685122 | GWfuvKfQ1PCe1IL | jnyhYYcF66 | 3 | {"tags": {"nk455671": {"ik615925": "iv253423"}}, "publisher": "b2NwVg7VY3", "criticrating": 0}
#Text=(2 rows)
#Text=demo=# explain analyze select * from books where data->'tags' ?
112-1	12634-12635	'	
112-2	12635-12643	nk455671	
112-3	12643-12644	'	
112-4	12644-12645	;	
112-5	12646-12648	id	
112-6	12649-12650	|	
112-7	12651-12657	author	
112-8	12658-12659	|	
112-9	12660-12664	isbn	
112-10	12665-12666	|	
112-11	12667-12673	rating	
112-12	12674-12675	|	
112-13	12676-12680	data	
112-14	12681-12682	-	
112-15	12682-12683	-	
112-16	12683-12684	-	
112-17	12684-12685	-	
112-18	12685-12686	-	
112-19	12686-12687	-	
112-20	12687-12688	-	
112-21	12688-12689	-	
112-22	12689-12690	-	
112-23	12690-12691	+	
112-24	12691-12692	-	
112-25	12692-12693	-	
112-26	12693-12694	-	
112-27	12694-12695	-	
112-28	12695-12696	-	
112-29	12696-12697	-	
112-30	12697-12698	-	
112-31	12698-12699	-	
112-32	12699-12700	-	
112-33	12700-12701	-	
112-34	12701-12702	-	
112-35	12702-12703	-	
112-36	12703-12704	-	
112-37	12704-12705	-	
112-38	12705-12706	-	
112-39	12706-12707	-	
112-40	12707-12708	-	
112-41	12708-12709	+	
112-42	12709-12710	-	
112-43	12710-12711	-	
112-44	12711-12712	-	
112-45	12712-12713	-	
112-46	12713-12714	-	
112-47	12714-12715	-	
112-48	12715-12716	-	
112-49	12716-12717	-	
112-50	12717-12718	-	
112-51	12718-12719	-	
112-52	12719-12720	-	
112-53	12720-12721	-	
112-54	12721-12722	+	
112-55	12722-12723	-	
112-56	12723-12724	-	
112-57	12724-12725	-	
112-58	12725-12726	-	
112-59	12726-12727	-	
112-60	12727-12728	-	
112-61	12728-12729	-	
112-62	12729-12730	-	
112-63	12730-12731	+	
112-64	12731-12732	-	
112-65	12732-12733	-	
112-66	12733-12734	-	
112-67	12734-12735	-	
112-68	12735-12736	-	
112-69	12736-12737	-	
112-70	12737-12738	-	
112-71	12738-12739	-	
112-72	12739-12740	-	
112-73	12740-12741	-	
112-74	12741-12742	-	
112-75	12742-12743	-	
112-76	12743-12744	-	
112-77	12744-12745	-	
112-78	12745-12746	-	
112-79	12746-12747	-	
112-80	12747-12748	-	
112-81	12748-12749	-	
112-82	12749-12750	-	
112-83	12750-12751	-	
112-84	12751-12752	-	
112-85	12752-12753	-	
112-86	12753-12754	-	
112-87	12754-12755	-	
112-88	12755-12756	-	
112-89	12756-12757	-	
112-90	12757-12758	-	
112-91	12758-12759	-	
112-92	12759-12760	-	
112-93	12760-12761	-	
112-94	12761-12762	-	
112-95	12762-12763	-	
112-96	12763-12764	-	
112-97	12764-12765	-	
112-98	12765-12766	-	
112-99	12766-12767	-	
112-100	12767-12768	-	
112-101	12768-12769	-	
112-102	12769-12770	-	
112-103	12770-12771	-	
112-104	12771-12772	-	
112-105	12772-12773	-	
112-106	12773-12774	-	
112-107	12774-12775	-	
112-108	12775-12776	-	
112-109	12776-12777	-	
112-110	12777-12778	-	
112-111	12778-12779	-	
112-112	12779-12780	-	
112-113	12780-12781	-	
112-114	12781-12782	-	
112-115	12782-12783	-	
112-116	12783-12784	-	
112-117	12784-12785	-	
112-118	12785-12786	-	
112-119	12786-12787	-	
112-120	12787-12788	-	
112-121	12788-12789	-	
112-122	12789-12790	-	
112-123	12790-12791	-	
112-124	12791-12792	-	
112-125	12792-12793	-	
112-126	12793-12794	-	
112-127	12794-12795	-	
112-128	12795-12796	-	
112-129	12796-12797	-	
112-130	12797-12798	-	
112-131	12798-12799	-	
112-132	12799-12800	-	
112-133	12800-12801	-	
112-134	12801-12802	-	
112-135	12802-12803	-	
112-136	12803-12804	-	
112-137	12804-12805	-	
112-138	12805-12806	-	
112-139	12806-12807	-	
112-140	12807-12808	-	
112-141	12808-12809	-	
112-142	12809-12810	-	
112-143	12810-12811	-	
112-144	12811-12812	-	
112-145	12812-12813	-	
112-146	12813-12814	-	
112-147	12814-12815	-	
112-148	12815-12816	-	
112-149	12816-12817	-	
112-150	12817-12818	-	
112-151	12818-12819	-	
112-152	12819-12820	-	
112-153	12820-12821	-	
112-154	12821-12822	-	
112-155	12822-12823	-	
112-156	12823-12824	-	
112-157	12824-12825	-	
112-158	12825-12826	-	
112-159	12826-12827	-	
112-160	12827-12828	-	
112-161	12828-12829	-	
112-162	12829-12830	-	
112-163	12830-12831	-	
112-164	12831-12832	-	
112-165	12832-12833	-	
112-166	12833-12834	-	
112-167	12834-12835	-	
112-168	12835-12836	-	
112-169	12836-12837	-	
112-170	12837-12838	-	
112-171	12838-12839	-	
112-172	12839-12840	-	
112-173	12840-12841	-	
112-174	12841-12842	-	
112-175	12842-12843	-	
112-176	12843-12844	-	
112-177	12844-12845	-	
112-178	12845-12846	-	
112-179	12846-12847	-	
112-180	12847-12848	-	
112-181	12848-12849	-	
112-182	12849-12850	-	
112-183	12850-12851	-	
112-184	12851-12852	-	
112-185	12852-12853	-	
112-186	12853-12854	-	
112-187	12854-12855	-	
112-188	12855-12856	-	
112-189	12856-12857	-	
112-190	12857-12858	-	
112-191	12858-12859	-	
112-192	12859-12860	-	
112-193	12860-12861	-	
112-194	12861-12862	-	
112-195	12862-12863	-	
112-196	12863-12864	-	
112-197	12864-12865	-	
112-198	12865-12866	-	
112-199	12866-12867	-	
112-200	12867-12868	-	
112-201	12868-12869	-	
112-202	12869-12870	-	
112-203	12870-12871	-	
112-204	12871-12872	-	
112-205	12872-12873	-	
112-206	12873-12874	-	
112-207	12874-12875	-	
112-208	12875-12876	-	
112-209	12876-12877	-	
112-210	12877-12878	-	
112-211	12878-12879	-	
112-212	12879-12880	-	
112-213	12880-12881	-	
112-214	12882-12883	-	
112-215	12883-12884	-	
112-216	12884-12885	-	
112-217	12885-12886	-	
112-218	12886-12887	-	
112-219	12887-12888	-	
112-220	12888-12889	-	
112-221	12889-12890	-	
112-222	12890-12891	-	
112-223	12891-12892	-	
112-224	12892-12893	-	
112-225	12893-12894	-	
112-226	12894-12895	-	
112-227	12895-12896	-	
112-228	12896-12897	-	
112-229	12897-12898	-	
112-230	12898-12899	-	
112-231	12899-12900	-	
112-232	12901-12908	1000005	
112-233	12909-12910	|	
112-234	12911-12926	XEI7xShT8bPu6H7	
112-235	12927-12928	|	
112-236	12929-12939	2kD5XJDZUF	
112-237	12940-12941	|	
112-238	12942-12943	0	
112-239	12944-12945	|	
112-240	12946-12947	{	
112-241	12947-12948	"	
112-242	12948-12952	tags	
112-243	12952-12953	"	
112-244	12953-12954	:	
112-245	12955-12956	{	
112-246	12956-12957	"	
112-247	12957-12965	nk455671	
112-248	12965-12966	"	
112-249	12966-12967	:	
112-250	12968-12969	{	
112-251	12969-12970	"	
112-252	12970-12978	ik937456	
112-253	12978-12979	"	
112-254	12979-12980	:	
112-255	12981-12982	"	
112-256	12982-12990	iv506075	
112-257	12990-12991	"	
112-258	12991-12992	}	
112-259	12992-12993	}	
112-260	12993-12994	,	
112-261	12995-12996	"	
112-262	12996-13003	braille	
112-263	13003-13004	"	
112-264	13004-13005	:	
112-265	13006-13010	true	
112-266	13010-13011	,	
112-267	13012-13013	"	
112-268	13013-13021	keywords	
112-269	13021-13022	"	
112-270	13022-13023	:	
112-271	13024-13025	[	
112-272	13025-13026	"	
112-273	13026-13029	abc	
112-274	13029-13030	"	
112-275	13030-13031	,	
112-276	13032-13033	"	
112-277	13033-13036	kef	
112-278	13036-13037	"	
112-279	13037-13038	,	
112-280	13039-13040	"	
112-281	13040-13043	keh	
112-282	13043-13044	"	
112-283	13044-13045	]	
112-284	13045-13046	,	
112-285	13047-13048	"	
112-286	13048-13057	hardcover	
112-287	13057-13058	"	
112-288	13058-13059	:	
112-289	13060-13065	false	
112-290	13065-13066	,	
112-291	13067-13068	"	
112-292	13068-13077	publisher	
112-293	13077-13078	"	
112-294	13078-13079	:	
112-295	13080-13081	"	
112-296	13081-13091	zSfZIAjGGs	
112-297	13091-13092	"	
112-298	13092-13093	,	
112-299	13094-13095	"	
112-300	13096-13108	criticrating	
112-301	13108-13109	"	
112-302	13109-13110	:	
112-303	13111-13112	4	
112-304	13112-13113	}	
112-305	13114-13120	685122	
112-306	13121-13122	|	
112-307	13123-13138	GWfuvKfQ1PCe1IL	
112-308	13139-13140	|	
112-309	13141-13151	jnyhYYcF66	
112-310	13152-13153	|	
112-311	13154-13155	3	
112-312	13156-13157	|	
112-313	13158-13159	{	
112-314	13159-13160	"	
112-315	13160-13164	tags	
112-316	13164-13165	"	
112-317	13165-13166	:	
112-318	13167-13168	{	
112-319	13168-13169	"	
112-320	13169-13177	nk455671	
112-321	13177-13178	"	
112-322	13178-13179	:	
112-323	13180-13181	{	
112-324	13181-13182	"	
112-325	13182-13190	ik615925	
112-326	13190-13191	"	
112-327	13191-13192	:	
112-328	13193-13194	"	
112-329	13194-13202	iv253423	
112-330	13202-13203	"	
112-331	13203-13204	}	
112-332	13204-13205	}	
112-333	13205-13206	,	
112-334	13207-13208	"	
112-335	13208-13217	publisher	
112-336	13217-13218	"	
112-337	13218-13219	:	
112-338	13220-13221	"	
112-339	13221-13231	b2NwVg7VY3	
112-340	13231-13232	"	
112-341	13232-13233	,	
112-342	13234-13235	"	
112-343	13235-13247	criticrating	
112-344	13247-13248	"	
112-345	13248-13249	:	
112-346	13250-13251	0	
112-347	13251-13252	}	
112-348	13253-13254	(	
112-349	13254-13255	2	
112-350	13256-13260	rows	
112-351	13260-13261	)	
112-352	13262-13266	demo	
112-353	13266-13267	=	
112-354	13267-13268	#	
112-355	13269-13276	explain	
112-356	13277-13284	analyze	
112-357	13285-13291	select	
112-358	13292-13293	*	
112-359	13294-13298	from	
112-360	13299-13304	books	
112-361	13305-13310	where	
112-362	13311-13315	data	
112-363	13315-13316	-	
112-364	13316-13317	>	
112-365	13317-13318	'	
112-366	13318-13322	tags	
112-367	13322-13323	'	
112-368	13324-13325	?	

#Text='nk455671';
#Text=QUERY PLAN
#Text=----------------------------------------------------------------------------------------------------------
#Text=Seq Scan on books (cost=0.00..38807.29 rows=1000 width=158) (actual time=0.018..270.641 rows=2 loops=1)
#Text=Filter: ((data -> 'tags'::text) ?
113-1	13326-13327	'	
113-2	13327-13335	nk455671	
113-3	13335-13336	'	
113-4	13336-13337	;	
113-5	13338-13343	QUERY	
113-6	13344-13348	PLAN	
113-7	13349-13350	-	
113-8	13350-13351	-	
113-9	13351-13352	-	
113-10	13352-13353	-	
113-11	13353-13354	-	
113-12	13354-13355	-	
113-13	13355-13356	-	
113-14	13356-13357	-	
113-15	13357-13358	-	
113-16	13358-13359	-	
113-17	13359-13360	-	
113-18	13360-13361	-	
113-19	13361-13362	-	
113-20	13362-13363	-	
113-21	13363-13364	-	
113-22	13364-13365	-	
113-23	13365-13366	-	
113-24	13366-13367	-	
113-25	13367-13368	-	
113-26	13368-13369	-	
113-27	13369-13370	-	
113-28	13370-13371	-	
113-29	13371-13372	-	
113-30	13372-13373	-	
113-31	13373-13374	-	
113-32	13374-13375	-	
113-33	13375-13376	-	
113-34	13376-13377	-	
113-35	13377-13378	-	
113-36	13378-13379	-	
113-37	13379-13380	-	
113-38	13380-13381	-	
113-39	13381-13382	-	
113-40	13382-13383	-	
113-41	13383-13384	-	
113-42	13384-13385	-	
113-43	13385-13386	-	
113-44	13386-13387	-	
113-45	13387-13388	-	
113-46	13388-13389	-	
113-47	13389-13390	-	
113-48	13390-13391	-	
113-49	13391-13392	-	
113-50	13392-13393	-	
113-51	13393-13394	-	
113-52	13394-13395	-	
113-53	13395-13396	-	
113-54	13396-13397	-	
113-55	13397-13398	-	
113-56	13398-13399	-	
113-57	13399-13400	-	
113-58	13400-13401	-	
113-59	13401-13402	-	
113-60	13402-13403	-	
113-61	13403-13404	-	
113-62	13404-13405	-	
113-63	13405-13406	-	
113-64	13406-13407	-	
113-65	13407-13408	-	
113-66	13408-13409	-	
113-67	13409-13410	-	
113-68	13410-13411	-	
113-69	13411-13412	-	
113-70	13412-13413	-	
113-71	13413-13414	-	
113-72	13414-13415	-	
113-73	13415-13416	-	
113-74	13416-13417	-	
113-75	13417-13418	-	
113-76	13418-13419	-	
113-77	13419-13420	-	
113-78	13420-13421	-	
113-79	13421-13422	-	
113-80	13422-13423	-	
113-81	13423-13424	-	
113-82	13424-13425	-	
113-83	13425-13426	-	
113-84	13426-13427	-	
113-85	13427-13428	-	
113-86	13428-13429	-	
113-87	13429-13430	-	
113-88	13430-13431	-	
113-89	13431-13432	-	
113-90	13432-13433	-	
113-91	13433-13434	-	
113-92	13434-13435	-	
113-93	13435-13436	-	
113-94	13436-13437	-	
113-95	13437-13438	-	
113-96	13438-13439	-	
113-97	13439-13440	-	
113-98	13440-13441	-	
113-99	13441-13442	-	
113-100	13442-13443	-	
113-101	13443-13444	-	
113-102	13444-13445	-	
113-103	13445-13446	-	
113-104	13446-13447	-	
113-105	13447-13448	-	
113-106	13448-13449	-	
113-107	13449-13450	-	
113-108	13450-13451	-	
113-109	13451-13452	-	
113-110	13452-13453	-	
113-111	13453-13454	-	
113-112	13454-13455	-	
113-113	13456-13459	Seq	
113-114	13460-13464	Scan	
113-115	13465-13467	on	
113-116	13468-13473	books	
113-117	13474-13475	(	
113-118	13475-13479	cost	
113-119	13479-13480	=	
113-120	13480-13484	0.00	
113-121	13484-13485	.	
113-122	13485-13494	.38807.29	
113-123	13495-13499	rows	
113-124	13499-13500	=	
113-125	13500-13504	1000	
113-126	13505-13510	width	
113-127	13510-13511	=	
113-128	13511-13514	158	
113-129	13514-13515	)	
113-130	13516-13517	(	
113-131	13517-13523	actual	
113-132	13524-13528	time	
113-133	13528-13529	=	
113-134	13529-13534	0.018	
113-135	13534-13535	.	
113-136	13535-13543	.270.641	
113-137	13544-13548	rows	
113-138	13548-13549	=	
113-139	13549-13550	2	
113-140	13551-13556	loops	
113-141	13556-13557	=	
113-142	13557-13558	1	
113-143	13558-13559	)	
113-144	13560-13566	Filter	
113-145	13566-13567	:	
113-146	13568-13569	(	
113-147	13569-13570	(	
113-148	13570-13574	data	
113-149	13575-13576	-	
113-150	13576-13577	>	
113-151	13578-13579	'	
113-152	13579-13583	tags	
113-153	13583-13584	'	
113-154	13584-13585	:	
113-155	13585-13586	:	
113-156	13586-13590	text	
113-157	13590-13591	)	
113-158	13592-13593	?	

#Text='nk455671'::text)
#Text=Rows Removed by Filter: 1000017
#Text=Planning Time: 0.078 ms
#Text=Execution Time: 270.728 ms
#Text=(5 rows)
#Text=The way to check for existence in nested docs is to use “expression indexes”.
114-1	13594-13595	'	
114-2	13595-13603	nk455671	
114-3	13603-13604	'	
114-4	13604-13605	:	
114-5	13605-13606	:	
114-6	13606-13610	text	
114-7	13610-13611	)	
114-8	13612-13616	Rows	
114-9	13617-13624	Removed	
114-10	13625-13627	by	
114-11	13628-13634	Filter	
114-12	13634-13635	:	
114-13	13636-13643	1000017	
114-14	13644-13652	Planning	
114-15	13653-13657	Time	
114-16	13657-13658	:	
114-17	13659-13664	0.078	
114-18	13665-13667	ms	
114-19	13668-13677	Execution	
114-20	13678-13682	Time	
114-21	13682-13683	:	
114-22	13684-13691	270.728	
114-23	13692-13694	ms	
114-24	13695-13696	(	
114-25	13696-13697	5	
114-26	13698-13702	rows	
114-27	13702-13703	)	
114-28	13704-13707	The	
114-29	13708-13711	way	
114-30	13712-13714	to	
114-31	13715-13720	check	
114-32	13721-13724	for	
114-33	13725-13734	existence	
114-34	13735-13737	in	
114-35	13738-13744	nested	
114-36	13745-13749	docs	
114-37	13750-13752	is	
114-38	13753-13755	to	
114-39	13756-13759	use	
114-40	13760-13761	“	
114-41	13761-13771	expression	
114-42	13772-13779	indexes	
114-43	13779-13780	”	
114-44	13780-13781	.	

#Text=Let’s create an index on data->tags:
#Text=CREATE INDEX datatagsgin ON books USING gin (data->'tags');
#Text=demo=# select * from books where data->'tags' ?
115-1	13782-13785	Let	
115-2	13785-13786	’	
115-3	13786-13787	s	
115-4	13788-13794	create	
115-5	13795-13797	an	
115-6	13798-13803	index	
115-7	13804-13806	on	
115-8	13807-13811	data	
115-9	13811-13812	-	
115-10	13812-13813	>	
115-11	13813-13817	tags	
115-12	13817-13818	:	
115-13	13819-13825	CREATE	
115-14	13826-13831	INDEX	
115-15	13832-13843	datatagsgin	
115-16	13844-13846	ON	
115-17	13847-13852	books	
115-18	13853-13858	USING	
115-19	13859-13862	gin	
115-20	13863-13864	(	
115-21	13864-13868	data	
115-22	13868-13869	-	
115-23	13869-13870	>	
115-24	13870-13871	'	
115-25	13871-13875	tags	
115-26	13875-13876	'	
115-27	13876-13877	)	
115-28	13877-13878	;	
115-29	13879-13883	demo	
115-30	13883-13884	=	
115-31	13884-13885	#	
115-32	13886-13892	select	
115-33	13893-13894	*	
115-34	13895-13899	from	
115-35	13900-13905	books	
115-36	13906-13911	where	
115-37	13912-13916	data	
115-38	13916-13917	-	
115-39	13917-13918	>	
115-40	13918-13919	'	
115-41	13919-13923	tags	
115-42	13923-13924	'	
115-43	13925-13926	?	

#Text='nk455671';
#Text=id | author | isbn | rating | data
#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------
#Text=------------------
#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", "
#Text=criticrating": 4}
#Text=685122 | GWfuvKfQ1PCe1IL | jnyhYYcF66 | 3 | {"tags": {"nk455671": {"ik615925": "iv253423"}}, "publisher": "b2NwVg7VY3", "criticrating": 0}
#Text=(2 rows)
#Text=demo=# explain analyze select * from books where data->'tags' ?
116-1	13927-13928	'	
116-2	13928-13936	nk455671	
116-3	13936-13937	'	
116-4	13937-13938	;	
116-5	13939-13941	id	
116-6	13942-13943	|	
116-7	13944-13950	author	
116-8	13951-13952	|	
116-9	13953-13957	isbn	
116-10	13958-13959	|	
116-11	13960-13966	rating	
116-12	13967-13968	|	
116-13	13969-13973	data	
116-14	13974-13975	-	
116-15	13975-13976	-	
116-16	13976-13977	-	
116-17	13977-13978	-	
116-18	13978-13979	-	
116-19	13979-13980	-	
116-20	13980-13981	-	
116-21	13981-13982	-	
116-22	13982-13983	-	
116-23	13983-13984	+	
116-24	13984-13985	-	
116-25	13985-13986	-	
116-26	13986-13987	-	
116-27	13987-13988	-	
116-28	13988-13989	-	
116-29	13989-13990	-	
116-30	13990-13991	-	
116-31	13991-13992	-	
116-32	13992-13993	-	
116-33	13993-13994	-	
116-34	13994-13995	-	
116-35	13995-13996	-	
116-36	13996-13997	-	
116-37	13997-13998	-	
116-38	13998-13999	-	
116-39	13999-14000	-	
116-40	14000-14001	-	
116-41	14001-14002	+	
116-42	14002-14003	-	
116-43	14003-14004	-	
116-44	14004-14005	-	
116-45	14005-14006	-	
116-46	14006-14007	-	
116-47	14007-14008	-	
116-48	14008-14009	-	
116-49	14009-14010	-	
116-50	14010-14011	-	
116-51	14011-14012	-	
116-52	14012-14013	-	
116-53	14013-14014	-	
116-54	14014-14015	+	
116-55	14015-14016	-	
116-56	14016-14017	-	
116-57	14017-14018	-	
116-58	14018-14019	-	
116-59	14019-14020	-	
116-60	14020-14021	-	
116-61	14021-14022	-	
116-62	14022-14023	-	
116-63	14023-14024	+	
116-64	14024-14025	-	
116-65	14025-14026	-	
116-66	14026-14027	-	
116-67	14027-14028	-	
116-68	14028-14029	-	
116-69	14029-14030	-	
116-70	14030-14031	-	
116-71	14031-14032	-	
116-72	14032-14033	-	
116-73	14033-14034	-	
116-74	14034-14035	-	
116-75	14035-14036	-	
116-76	14036-14037	-	
116-77	14037-14038	-	
116-78	14038-14039	-	
116-79	14039-14040	-	
116-80	14040-14041	-	
116-81	14041-14042	-	
116-82	14042-14043	-	
116-83	14043-14044	-	
116-84	14044-14045	-	
116-85	14045-14046	-	
116-86	14046-14047	-	
116-87	14047-14048	-	
116-88	14048-14049	-	
116-89	14049-14050	-	
116-90	14050-14051	-	
116-91	14051-14052	-	
116-92	14052-14053	-	
116-93	14053-14054	-	
116-94	14054-14055	-	
116-95	14055-14056	-	
116-96	14056-14057	-	
116-97	14057-14058	-	
116-98	14058-14059	-	
116-99	14059-14060	-	
116-100	14060-14061	-	
116-101	14061-14062	-	
116-102	14062-14063	-	
116-103	14063-14064	-	
116-104	14064-14065	-	
116-105	14065-14066	-	
116-106	14066-14067	-	
116-107	14067-14068	-	
116-108	14068-14069	-	
116-109	14069-14070	-	
116-110	14070-14071	-	
116-111	14071-14072	-	
116-112	14072-14073	-	
116-113	14073-14074	-	
116-114	14074-14075	-	
116-115	14075-14076	-	
116-116	14076-14077	-	
116-117	14077-14078	-	
116-118	14078-14079	-	
116-119	14079-14080	-	
116-120	14080-14081	-	
116-121	14081-14082	-	
116-122	14082-14083	-	
116-123	14083-14084	-	
116-124	14084-14085	-	
116-125	14085-14086	-	
116-126	14086-14087	-	
116-127	14087-14088	-	
116-128	14088-14089	-	
116-129	14089-14090	-	
116-130	14090-14091	-	
116-131	14091-14092	-	
116-132	14092-14093	-	
116-133	14093-14094	-	
116-134	14094-14095	-	
116-135	14095-14096	-	
116-136	14096-14097	-	
116-137	14097-14098	-	
116-138	14098-14099	-	
116-139	14099-14100	-	
116-140	14100-14101	-	
116-141	14101-14102	-	
116-142	14102-14103	-	
116-143	14103-14104	-	
116-144	14104-14105	-	
116-145	14105-14106	-	
116-146	14106-14107	-	
116-147	14107-14108	-	
116-148	14108-14109	-	
116-149	14109-14110	-	
116-150	14110-14111	-	
116-151	14111-14112	-	
116-152	14112-14113	-	
116-153	14113-14114	-	
116-154	14114-14115	-	
116-155	14115-14116	-	
116-156	14116-14117	-	
116-157	14117-14118	-	
116-158	14118-14119	-	
116-159	14119-14120	-	
116-160	14120-14121	-	
116-161	14121-14122	-	
116-162	14122-14123	-	
116-163	14123-14124	-	
116-164	14124-14125	-	
116-165	14125-14126	-	
116-166	14126-14127	-	
116-167	14127-14128	-	
116-168	14128-14129	-	
116-169	14129-14130	-	
116-170	14130-14131	-	
116-171	14131-14132	-	
116-172	14132-14133	-	
116-173	14133-14134	-	
116-174	14134-14135	-	
116-175	14135-14136	-	
116-176	14136-14137	-	
116-177	14137-14138	-	
116-178	14138-14139	-	
116-179	14139-14140	-	
116-180	14140-14141	-	
116-181	14141-14142	-	
116-182	14142-14143	-	
116-183	14143-14144	-	
116-184	14144-14145	-	
116-185	14145-14146	-	
116-186	14146-14147	-	
116-187	14147-14148	-	
116-188	14148-14149	-	
116-189	14149-14150	-	
116-190	14150-14151	-	
116-191	14151-14152	-	
116-192	14152-14153	-	
116-193	14153-14154	-	
116-194	14154-14155	-	
116-195	14155-14156	-	
116-196	14156-14157	-	
116-197	14157-14158	-	
116-198	14158-14159	-	
116-199	14159-14160	-	
116-200	14160-14161	-	
116-201	14161-14162	-	
116-202	14162-14163	-	
116-203	14163-14164	-	
116-204	14164-14165	-	
116-205	14165-14166	-	
116-206	14166-14167	-	
116-207	14167-14168	-	
116-208	14168-14169	-	
116-209	14169-14170	-	
116-210	14170-14171	-	
116-211	14171-14172	-	
116-212	14172-14173	-	
116-213	14173-14174	-	
116-214	14175-14176	-	
116-215	14176-14177	-	
116-216	14177-14178	-	
116-217	14178-14179	-	
116-218	14179-14180	-	
116-219	14180-14181	-	
116-220	14181-14182	-	
116-221	14182-14183	-	
116-222	14183-14184	-	
116-223	14184-14185	-	
116-224	14185-14186	-	
116-225	14186-14187	-	
116-226	14187-14188	-	
116-227	14188-14189	-	
116-228	14189-14190	-	
116-229	14190-14191	-	
116-230	14191-14192	-	
116-231	14192-14193	-	
116-232	14194-14201	1000005	
116-233	14202-14203	|	
116-234	14204-14219	XEI7xShT8bPu6H7	
116-235	14220-14221	|	
116-236	14222-14232	2kD5XJDZUF	
116-237	14233-14234	|	
116-238	14235-14236	0	
116-239	14237-14238	|	
116-240	14239-14240	{	
116-241	14240-14241	"	
116-242	14241-14245	tags	
116-243	14245-14246	"	
116-244	14246-14247	:	
116-245	14248-14249	{	
116-246	14249-14250	"	
116-247	14250-14258	nk455671	
116-248	14258-14259	"	
116-249	14259-14260	:	
116-250	14261-14262	{	
116-251	14262-14263	"	
116-252	14263-14271	ik937456	
116-253	14271-14272	"	
116-254	14272-14273	:	
116-255	14274-14275	"	
116-256	14275-14283	iv506075	
116-257	14283-14284	"	
116-258	14284-14285	}	
116-259	14285-14286	}	
116-260	14286-14287	,	
116-261	14288-14289	"	
116-262	14289-14296	braille	
116-263	14296-14297	"	
116-264	14297-14298	:	
116-265	14299-14303	true	
116-266	14303-14304	,	
116-267	14305-14306	"	
116-268	14306-14314	keywords	
116-269	14314-14315	"	
116-270	14315-14316	:	
116-271	14317-14318	[	
116-272	14318-14319	"	
116-273	14319-14322	abc	
116-274	14322-14323	"	
116-275	14323-14324	,	
116-276	14325-14326	"	
116-277	14326-14329	kef	
116-278	14329-14330	"	
116-279	14330-14331	,	
116-280	14332-14333	"	
116-281	14333-14336	keh	
116-282	14336-14337	"	
116-283	14337-14338	]	
116-284	14338-14339	,	
116-285	14340-14341	"	
116-286	14341-14350	hardcover	
116-287	14350-14351	"	
116-288	14351-14352	:	
116-289	14353-14358	false	
116-290	14358-14359	,	
116-291	14360-14361	"	
116-292	14361-14370	publisher	
116-293	14370-14371	"	
116-294	14371-14372	:	
116-295	14373-14374	"	
116-296	14374-14384	zSfZIAjGGs	
116-297	14384-14385	"	
116-298	14385-14386	,	
116-299	14387-14388	"	
116-300	14389-14401	criticrating	
116-301	14401-14402	"	
116-302	14402-14403	:	
116-303	14404-14405	4	
116-304	14405-14406	}	
116-305	14407-14413	685122	
116-306	14414-14415	|	
116-307	14416-14431	GWfuvKfQ1PCe1IL	
116-308	14432-14433	|	
116-309	14434-14444	jnyhYYcF66	
116-310	14445-14446	|	
116-311	14447-14448	3	
116-312	14449-14450	|	
116-313	14451-14452	{	
116-314	14452-14453	"	
116-315	14453-14457	tags	
116-316	14457-14458	"	
116-317	14458-14459	:	
116-318	14460-14461	{	
116-319	14461-14462	"	
116-320	14462-14470	nk455671	
116-321	14470-14471	"	
116-322	14471-14472	:	
116-323	14473-14474	{	
116-324	14474-14475	"	
116-325	14475-14483	ik615925	
116-326	14483-14484	"	
116-327	14484-14485	:	
116-328	14486-14487	"	
116-329	14487-14495	iv253423	
116-330	14495-14496	"	
116-331	14496-14497	}	
116-332	14497-14498	}	
116-333	14498-14499	,	
116-334	14500-14501	"	
116-335	14501-14510	publisher	
116-336	14510-14511	"	
116-337	14511-14512	:	
116-338	14513-14514	"	
116-339	14514-14524	b2NwVg7VY3	
116-340	14524-14525	"	
116-341	14525-14526	,	
116-342	14527-14528	"	
116-343	14528-14540	criticrating	
116-344	14540-14541	"	
116-345	14541-14542	:	
116-346	14543-14544	0	
116-347	14544-14545	}	
116-348	14546-14547	(	
116-349	14547-14548	2	
116-350	14549-14553	rows	
116-351	14553-14554	)	
116-352	14555-14559	demo	
116-353	14559-14560	=	
116-354	14560-14561	#	
116-355	14562-14569	explain	
116-356	14570-14577	analyze	
116-357	14578-14584	select	
116-358	14585-14586	*	
116-359	14587-14591	from	
116-360	14592-14597	books	
116-361	14598-14603	where	
116-362	14604-14608	data	
116-363	14608-14609	-	
116-364	14609-14610	>	
116-365	14610-14611	'	
116-366	14611-14615	tags	
116-367	14615-14616	'	
116-368	14617-14618	?	

#Text='nk455671';
#Text=QUERY PLAN
#Text=------------------------------------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books (cost=12.75..1007.75 rows=1000 width=158) (actual time=0.031..0.035 rows=2 loops=1)
#Text=Recheck Cond: ((data ->'tags'::text) ?
117-1	14619-14620	'	
117-2	14620-14628	nk455671	
117-3	14628-14629	'	
117-4	14629-14630	;	
117-5	14631-14636	QUERY	
117-6	14637-14641	PLAN	
117-7	14642-14643	-	
117-8	14643-14644	-	
117-9	14644-14645	-	
117-10	14645-14646	-	
117-11	14646-14647	-	
117-12	14647-14648	-	
117-13	14648-14649	-	
117-14	14649-14650	-	
117-15	14650-14651	-	
117-16	14651-14652	-	
117-17	14652-14653	-	
117-18	14653-14654	-	
117-19	14654-14655	-	
117-20	14655-14656	-	
117-21	14656-14657	-	
117-22	14657-14658	-	
117-23	14658-14659	-	
117-24	14659-14660	-	
117-25	14660-14661	-	
117-26	14661-14662	-	
117-27	14662-14663	-	
117-28	14663-14664	-	
117-29	14664-14665	-	
117-30	14665-14666	-	
117-31	14666-14667	-	
117-32	14667-14668	-	
117-33	14668-14669	-	
117-34	14669-14670	-	
117-35	14670-14671	-	
117-36	14671-14672	-	
117-37	14672-14673	-	
117-38	14673-14674	-	
117-39	14674-14675	-	
117-40	14675-14676	-	
117-41	14676-14677	-	
117-42	14677-14678	-	
117-43	14678-14679	-	
117-44	14679-14680	-	
117-45	14680-14681	-	
117-46	14681-14682	-	
117-47	14682-14683	-	
117-48	14683-14684	-	
117-49	14684-14685	-	
117-50	14685-14686	-	
117-51	14686-14687	-	
117-52	14687-14688	-	
117-53	14688-14689	-	
117-54	14689-14690	-	
117-55	14690-14691	-	
117-56	14691-14692	-	
117-57	14692-14693	-	
117-58	14693-14694	-	
117-59	14694-14695	-	
117-60	14695-14696	-	
117-61	14696-14697	-	
117-62	14697-14698	-	
117-63	14698-14699	-	
117-64	14699-14700	-	
117-65	14700-14701	-	
117-66	14701-14702	-	
117-67	14702-14703	-	
117-68	14703-14704	-	
117-69	14704-14705	-	
117-70	14705-14706	-	
117-71	14706-14707	-	
117-72	14707-14708	-	
117-73	14708-14709	-	
117-74	14709-14710	-	
117-75	14710-14711	-	
117-76	14711-14712	-	
117-77	14712-14713	-	
117-78	14713-14714	-	
117-79	14714-14715	-	
117-80	14715-14716	-	
117-81	14716-14717	-	
117-82	14717-14718	-	
117-83	14718-14719	-	
117-84	14719-14720	-	
117-85	14720-14721	-	
117-86	14721-14722	-	
117-87	14722-14723	-	
117-88	14723-14724	-	
117-89	14724-14725	-	
117-90	14725-14726	-	
117-91	14726-14727	-	
117-92	14727-14728	-	
117-93	14728-14729	-	
117-94	14729-14730	-	
117-95	14730-14731	-	
117-96	14731-14732	-	
117-97	14732-14733	-	
117-98	14733-14734	-	
117-99	14734-14735	-	
117-100	14735-14736	-	
117-101	14736-14737	-	
117-102	14737-14738	-	
117-103	14738-14739	-	
117-104	14739-14740	-	
117-105	14740-14741	-	
117-106	14741-14742	-	
117-107	14742-14743	-	
117-108	14743-14744	-	
117-109	14744-14745	-	
117-110	14745-14746	-	
117-111	14746-14747	-	
117-112	14747-14748	-	
117-113	14748-14749	-	
117-114	14749-14750	-	
117-115	14750-14751	-	
117-116	14751-14752	-	
117-117	14752-14753	-	
117-118	14753-14754	-	
117-119	14754-14755	-	
117-120	14755-14756	-	
117-121	14756-14757	-	
117-122	14757-14758	-	
117-123	14758-14759	-	
117-124	14759-14760	-	
117-125	14760-14761	-	
117-126	14761-14762	-	
117-127	14763-14769	Bitmap	
117-128	14770-14774	Heap	
117-129	14775-14779	Scan	
117-130	14780-14782	on	
117-131	14783-14788	books	
117-132	14789-14790	(	
117-133	14790-14794	cost	
117-134	14794-14795	=	
117-135	14795-14800	12.75	
117-136	14800-14801	.	
117-137	14801-14809	.1007.75	
117-138	14810-14814	rows	
117-139	14814-14815	=	
117-140	14815-14819	1000	
117-141	14820-14825	width	
117-142	14825-14826	=	
117-143	14826-14829	158	
117-144	14829-14830	)	
117-145	14831-14832	(	
117-146	14832-14838	actual	
117-147	14839-14843	time	
117-148	14843-14844	=	
117-149	14844-14849	0.031	
117-150	14849-14850	.	
117-151	14850-14856	.0.035	
117-152	14857-14861	rows	
117-153	14861-14862	=	
117-154	14862-14863	2	
117-155	14864-14869	loops	
117-156	14869-14870	=	
117-157	14870-14871	1	
117-158	14871-14872	)	
117-159	14873-14880	Recheck	
117-160	14881-14885	Cond	
117-161	14885-14886	:	
117-162	14887-14888	(	
117-163	14888-14889	(	
117-164	14889-14893	data	
117-165	14894-14895	-	
117-166	14895-14896	>	
117-167	14896-14897	'	
117-168	14897-14901	tags	
117-169	14901-14902	'	
117-170	14902-14903	:	
117-171	14903-14904	:	
117-172	14904-14908	text	
117-173	14908-14909	)	
117-174	14910-14911	?	

#Text='nk455671'::text)
#Text=Heap Blocks: exact=2
#Text=-> Bitmap Index Scan on datatagsgin (cost=0.00..12.50 rows=1000 width=0) (actual time=0.021..0.021 rows=2 loops=1)
#Text=Index Cond: ((data ->'tags'::text) ?
118-1	14912-14913	'	
118-2	14913-14921	nk455671	
118-3	14921-14922	'	
118-4	14922-14923	:	
118-5	14923-14924	:	
118-6	14924-14928	text	
118-7	14928-14929	)	
118-8	14930-14934	Heap	
118-9	14935-14941	Blocks	
118-10	14941-14942	:	
118-11	14943-14948	exact	
118-12	14948-14949	=	
118-13	14949-14950	2	
118-14	14951-14952	-	
118-15	14952-14953	>	
118-16	14954-14960	Bitmap	
118-17	14961-14966	Index	
118-18	14967-14971	Scan	
118-19	14972-14974	on	
118-20	14975-14986	datatagsgin	
118-21	14987-14988	(	
118-22	14988-14992	cost	
118-23	14992-14993	=	
118-24	14993-14997	0.00	
118-25	14997-14998	.	
118-26	14998-15004	.12.50	
118-27	15005-15009	rows	
118-28	15009-15010	=	
118-29	15010-15014	1000	
118-30	15015-15020	width	
118-31	15020-15021	=	
118-32	15021-15022	0	
118-33	15022-15023	)	
118-34	15024-15025	(	
118-35	15025-15031	actual	
118-36	15032-15036	time	
118-37	15036-15037	=	
118-38	15037-15042	0.021	
118-39	15042-15043	.	
118-40	15043-15049	.0.021	
118-41	15050-15054	rows	
118-42	15054-15055	=	
118-43	15055-15056	2	
118-44	15057-15062	loops	
118-45	15062-15063	=	
118-46	15063-15064	1	
118-47	15064-15065	)	
118-48	15066-15071	Index	
118-49	15072-15076	Cond	
118-50	15076-15077	:	
118-51	15078-15079	(	
118-52	15079-15080	(	
118-53	15080-15084	data	
118-54	15085-15086	-	
118-55	15086-15087	>	
118-56	15087-15088	'	
118-57	15088-15092	tags	
118-58	15092-15093	'	
118-59	15093-15094	:	
118-60	15094-15095	:	
118-61	15095-15099	text	
118-62	15099-15100	)	
118-63	15101-15102	?	

#Text='nk455671'::text)
#Text=Planning Time: 0.098 ms
#Text=Execution Time: 0.061 ms
#Text=(7 rows)
#Text=Note: An alternative here is to use the @> operator:
#Text=select * from books where data @> '{"tags":{"nk455671":{}}}'::jsonb;
#Text=However, this only works if the value is an object.
119-1	15103-15104	'	
119-2	15104-15112	nk455671	
119-3	15112-15113	'	
119-4	15113-15114	:	
119-5	15114-15115	:	
119-6	15115-15119	text	
119-7	15119-15120	)	
119-8	15121-15129	Planning	
119-9	15130-15134	Time	
119-10	15134-15135	:	
119-11	15136-15141	0.098	
119-12	15142-15144	ms	
119-13	15145-15154	Execution	
119-14	15155-15159	Time	
119-15	15159-15160	:	
119-16	15161-15166	0.061	
119-17	15167-15169	ms	
119-18	15170-15171	(	
119-19	15171-15172	7	
119-20	15173-15177	rows	
119-21	15177-15178	)	
119-22	15179-15183	Note	
119-23	15183-15184	:	
119-24	15185-15187	An	
119-25	15188-15199	alternative	
119-26	15200-15204	here	
119-27	15205-15207	is	
119-28	15208-15210	to	
119-29	15211-15214	use	
119-30	15215-15218	the	
119-31	15219-15220	@	
119-32	15220-15221	>	
119-33	15222-15230	operator	
119-34	15230-15231	:	
119-35	15232-15238	select	
119-36	15239-15240	*	
119-37	15241-15245	from	
119-38	15246-15251	books	
119-39	15252-15257	where	
119-40	15258-15262	data	
119-41	15263-15264	@	
119-42	15264-15265	>	
119-43	15266-15267	'	
119-44	15267-15268	{	
119-45	15268-15269	"	
119-46	15269-15273	tags	
119-47	15273-15274	"	
119-48	15274-15275	:	
119-49	15275-15276	{	
119-50	15276-15277	"	
119-51	15277-15285	nk455671	
119-52	15285-15286	"	
119-53	15286-15287	:	
119-54	15287-15288	{	
119-55	15288-15289	}	
119-56	15289-15290	}	
119-57	15290-15291	}	
119-58	15291-15292	'	
119-59	15292-15293	:	
119-60	15293-15294	:	
119-61	15294-15299	jsonb	
119-62	15299-15300	;	
119-63	15301-15308	However	
119-64	15308-15309	,	
119-65	15310-15314	this	
119-66	15315-15319	only	
119-67	15320-15325	works	
119-68	15326-15328	if	
119-69	15329-15332	the	
119-70	15333-15338	value	
119-71	15339-15341	is	
119-72	15342-15344	an	
119-73	15345-15351	object	
119-74	15351-15352	.	

#Text=So, if you’re unsure if the value is an object or a primitive value, it could lead to incorrect results.
120-1	15353-15355	So	
120-2	15355-15356	,	
120-3	15357-15359	if	
120-4	15360-15363	you	
120-5	15363-15364	’	
120-6	15364-15366	re	
120-7	15367-15373	unsure	
120-8	15374-15376	if	
120-9	15377-15380	the	
120-10	15381-15386	value	
120-11	15387-15389	is	
120-12	15390-15392	an	
120-13	15393-15399	object	
120-14	15400-15402	or	
120-15	15403-15404	a	
120-16	15405-15414	primitive	
120-17	15415-15420	value	
120-18	15420-15421	,	
120-19	15422-15424	it	
120-20	15425-15430	could	
120-21	15431-15435	lead	
120-22	15436-15438	to	
120-23	15439-15448	incorrect	
120-24	15449-15456	results	
120-25	15456-15457	.	

#Text=Path Operators @>, <@
#Text=The “path” operator can be used for multi-level queries of your JSONB data.
121-1	15458-15462	Path	
121-2	15463-15472	Operators	
121-3	15473-15474	@	
121-4	15474-15475	>	
121-5	15475-15476	,	
121-6	15477-15478	<	
121-7	15478-15479	@	
121-8	15480-15483	The	
121-9	15484-15485	“	
121-10	15485-15489	path	
121-11	15489-15490	”	
121-12	15491-15499	operator	
121-13	15500-15503	can	
121-14	15504-15506	be	
121-15	15507-15511	used	
121-16	15512-15515	for	
121-17	15516-15527	multi-level	
121-18	15528-15535	queries	
121-19	15536-15538	of	
121-20	15539-15543	your	
121-21	15544-15549	JSONB	
121-22	15550-15554	data	
121-23	15554-15555	.	

#Text=Let’s use it similar to the ?
122-1	15556-15559	Let	
122-2	15559-15560	’	
122-3	15560-15561	s	
122-4	15562-15565	use	
122-5	15566-15568	it	
122-6	15569-15576	similar	
122-7	15577-15579	to	
122-8	15580-15583	the	
122-9	15584-15585	?	

#Text=operator above:
#Text=select * from books where data @> '{"braille":true}'::jsonb;
#Text=demo=# explain analyze select * from books where data @> '{"braille":true}'::jsonb;
#Text=QUERY PLAN
#Text=---------------------------------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books (cost=16.75..1009.25 rows=1000 width=158) (actual time=0.040..0.048 rows=6 loops=1)
#Text=Recheck Cond: (data @> '{"braille": true}'::jsonb)
#Text=Rows Removed by Index Recheck: 9
#Text=Heap Blocks: exact=2
#Text=-> Bitmap Index Scan on datagin (cost=0.00..16.50 rows=1000 width=0) (actual time=0.030..0.030 rows=15 loops=1)
#Text=Index Cond: (data @> '{"braille": true}'::jsonb)
#Text=Planning Time: 0.100 ms
#Text=Execution Time: 0.076 ms
#Text=(8 rows)
#Text=The path operators support querying nested objects or top-level objects:
#Text=demo=# select * from books where data @> '{"publisher":"XlekfkLOtL"}'::jsonb;
#Text=id | author | isbn | rating | data
#Text=-----+-----------------+------------+--------+-------------------------------------------------------------------------------------
#Text=346 | uD3QOvHfJdxq2ez | KiAaIRu8QE | 1 | {"tags": {"nk88": {"ik37": "iv161"}}, "publisher": "XlekfkLOtL", "criticrating": 3}
#Text=(1 row)
#Text=demo=# explain analyze select * from books where data @> '{"publisher":"XlekfkLOtL"}'::jsonb;
#Text=QUERY PLAN
#Text=--------------------------------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books (cost=16.75..1009.25 rows=1000 width=158) (actual time=0.491..0.492 rows=1 loops=1)
#Text=Recheck Cond: (data @> '{"publisher": "XlekfkLOtL"}'::jsonb)
#Text=Heap Blocks: exact=1
#Text=-> Bitmap Index Scan on datagin (cost=0.00..16.50 rows=1000 width=0) (actual time=0.092..0.092 rows=1 loops=1)
#Text=Index Cond: (data @> '{"publisher": "XlekfkLOtL"}'::jsonb)
#Text=Planning Time: 0.090 ms
#Text=Execution Time: 0.523 ms
#Text=The queries can be multi-level as well:
#Text=demo=# select * from books where data @> '{"tags":{"nk455671":{"ik937456":"iv506075"}}}'::jsonb;
#Text=id | author | isbn | rating | data
#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------
#Text=------------------
#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", "
#Text=criticrating": 4}
#Text=(1 row)
#Text=GIN Index “pathops” Operator Class
#Text=GIN also supports a “pathops” option to reduce the size of the GIN index.
123-1	15586-15594	operator	
123-2	15595-15600	above	
123-3	15600-15601	:	
123-4	15602-15608	select	
123-5	15609-15610	*	
123-6	15611-15615	from	
123-7	15616-15621	books	
123-8	15622-15627	where	
123-9	15628-15632	data	
123-10	15633-15634	@	
123-11	15634-15635	>	
123-12	15636-15637	'	
123-13	15637-15638	{	
123-14	15638-15639	"	
123-15	15639-15646	braille	
123-16	15646-15647	"	
123-17	15647-15648	:	
123-18	15648-15652	true	
123-19	15652-15653	}	
123-20	15653-15654	'	
123-21	15654-15655	:	
123-22	15655-15656	:	
123-23	15656-15661	jsonb	
123-24	15661-15662	;	
123-25	15663-15667	demo	
123-26	15667-15668	=	
123-27	15668-15669	#	
123-28	15670-15677	explain	
123-29	15678-15685	analyze	
123-30	15686-15692	select	
123-31	15693-15694	*	
123-32	15695-15699	from	
123-33	15700-15705	books	
123-34	15706-15711	where	
123-35	15712-15716	data	
123-36	15717-15718	@	
123-37	15718-15719	>	
123-38	15720-15721	'	
123-39	15721-15722	{	
123-40	15722-15723	"	
123-41	15723-15730	braille	
123-42	15730-15731	"	
123-43	15731-15732	:	
123-44	15732-15736	true	
123-45	15736-15737	}	
123-46	15737-15738	'	
123-47	15738-15739	:	
123-48	15739-15740	:	
123-49	15740-15745	jsonb	
123-50	15745-15746	;	
123-51	15747-15752	QUERY	
123-52	15753-15757	PLAN	
123-53	15758-15759	-	
123-54	15759-15760	-	
123-55	15760-15761	-	
123-56	15761-15762	-	
123-57	15762-15763	-	
123-58	15763-15764	-	
123-59	15764-15765	-	
123-60	15765-15766	-	
123-61	15766-15767	-	
123-62	15767-15768	-	
123-63	15768-15769	-	
123-64	15769-15770	-	
123-65	15770-15771	-	
123-66	15771-15772	-	
123-67	15772-15773	-	
123-68	15773-15774	-	
123-69	15774-15775	-	
123-70	15775-15776	-	
123-71	15776-15777	-	
123-72	15777-15778	-	
123-73	15778-15779	-	
123-74	15779-15780	-	
123-75	15780-15781	-	
123-76	15781-15782	-	
123-77	15782-15783	-	
123-78	15783-15784	-	
123-79	15784-15785	-	
123-80	15785-15786	-	
123-81	15786-15787	-	
123-82	15787-15788	-	
123-83	15788-15789	-	
123-84	15789-15790	-	
123-85	15790-15791	-	
123-86	15791-15792	-	
123-87	15792-15793	-	
123-88	15793-15794	-	
123-89	15794-15795	-	
123-90	15795-15796	-	
123-91	15796-15797	-	
123-92	15797-15798	-	
123-93	15798-15799	-	
123-94	15799-15800	-	
123-95	15800-15801	-	
123-96	15801-15802	-	
123-97	15802-15803	-	
123-98	15803-15804	-	
123-99	15804-15805	-	
123-100	15805-15806	-	
123-101	15806-15807	-	
123-102	15807-15808	-	
123-103	15808-15809	-	
123-104	15809-15810	-	
123-105	15810-15811	-	
123-106	15811-15812	-	
123-107	15812-15813	-	
123-108	15813-15814	-	
123-109	15814-15815	-	
123-110	15815-15816	-	
123-111	15816-15817	-	
123-112	15817-15818	-	
123-113	15818-15819	-	
123-114	15819-15820	-	
123-115	15820-15821	-	
123-116	15821-15822	-	
123-117	15822-15823	-	
123-118	15823-15824	-	
123-119	15824-15825	-	
123-120	15825-15826	-	
123-121	15826-15827	-	
123-122	15827-15828	-	
123-123	15828-15829	-	
123-124	15829-15830	-	
123-125	15830-15831	-	
123-126	15831-15832	-	
123-127	15832-15833	-	
123-128	15833-15834	-	
123-129	15834-15835	-	
123-130	15835-15836	-	
123-131	15836-15837	-	
123-132	15837-15838	-	
123-133	15838-15839	-	
123-134	15839-15840	-	
123-135	15840-15841	-	
123-136	15841-15842	-	
123-137	15842-15843	-	
123-138	15843-15844	-	
123-139	15844-15845	-	
123-140	15845-15846	-	
123-141	15846-15847	-	
123-142	15847-15848	-	
123-143	15848-15849	-	
123-144	15849-15850	-	
123-145	15850-15851	-	
123-146	15851-15852	-	
123-147	15852-15853	-	
123-148	15853-15854	-	
123-149	15854-15855	-	
123-150	15855-15856	-	
123-151	15856-15857	-	
123-152	15857-15858	-	
123-153	15858-15859	-	
123-154	15859-15860	-	
123-155	15860-15861	-	
123-156	15861-15862	-	
123-157	15862-15863	-	
123-158	15863-15864	-	
123-159	15864-15865	-	
123-160	15865-15866	-	
123-161	15866-15867	-	
123-162	15867-15868	-	
123-163	15868-15869	-	
123-164	15869-15870	-	
123-165	15870-15871	-	
123-166	15871-15872	-	
123-167	15872-15873	-	
123-168	15873-15874	-	
123-169	15874-15875	-	
123-170	15876-15882	Bitmap	
123-171	15883-15887	Heap	
123-172	15888-15892	Scan	
123-173	15893-15895	on	
123-174	15896-15901	books	
123-175	15902-15903	(	
123-176	15903-15907	cost	
123-177	15907-15908	=	
123-178	15908-15913	16.75	
123-179	15913-15914	.	
123-180	15914-15922	.1009.25	
123-181	15923-15927	rows	
123-182	15927-15928	=	
123-183	15928-15932	1000	
123-184	15933-15938	width	
123-185	15938-15939	=	
123-186	15939-15942	158	
123-187	15942-15943	)	
123-188	15944-15945	(	
123-189	15945-15951	actual	
123-190	15952-15956	time	
123-191	15956-15957	=	
123-192	15957-15962	0.040	
123-193	15962-15963	.	
123-194	15963-15969	.0.048	
123-195	15970-15974	rows	
123-196	15974-15975	=	
123-197	15975-15976	6	
123-198	15977-15982	loops	
123-199	15982-15983	=	
123-200	15983-15984	1	
123-201	15984-15985	)	
123-202	15986-15993	Recheck	
123-203	15994-15998	Cond	
123-204	15998-15999	:	
123-205	16000-16001	(	
123-206	16001-16005	data	
123-207	16006-16007	@	
123-208	16007-16008	>	
123-209	16009-16010	'	
123-210	16010-16011	{	
123-211	16011-16012	"	
123-212	16012-16019	braille	
123-213	16019-16020	"	
123-214	16020-16021	:	
123-215	16022-16026	true	
123-216	16026-16027	}	
123-217	16027-16028	'	
123-218	16028-16029	:	
123-219	16029-16030	:	
123-220	16030-16035	jsonb	
123-221	16035-16036	)	
123-222	16037-16041	Rows	
123-223	16042-16049	Removed	
123-224	16050-16052	by	
123-225	16053-16058	Index	
123-226	16059-16066	Recheck	
123-227	16066-16067	:	
123-228	16068-16069	9	
123-229	16070-16074	Heap	
123-230	16075-16081	Blocks	
123-231	16081-16082	:	
123-232	16083-16088	exact	
123-233	16088-16089	=	
123-234	16089-16090	2	
123-235	16091-16092	-	
123-236	16092-16093	>	
123-237	16094-16100	Bitmap	
123-238	16101-16106	Index	
123-239	16107-16111	Scan	
123-240	16112-16114	on	
123-241	16115-16122	datagin	
123-242	16123-16124	(	
123-243	16124-16128	cost	
123-244	16128-16129	=	
123-245	16129-16133	0.00	
123-246	16133-16134	.	
123-247	16134-16140	.16.50	
123-248	16141-16145	rows	
123-249	16145-16146	=	
123-250	16146-16150	1000	
123-251	16151-16156	width	
123-252	16156-16157	=	
123-253	16157-16158	0	
123-254	16158-16159	)	
123-255	16160-16161	(	
123-256	16161-16167	actual	
123-257	16168-16172	time	
123-258	16172-16173	=	
123-259	16173-16178	0.030	
123-260	16178-16179	.	
123-261	16179-16185	.0.030	
123-262	16186-16190	rows	
123-263	16190-16191	=	
123-264	16191-16193	15	
123-265	16194-16199	loops	
123-266	16199-16200	=	
123-267	16200-16201	1	
123-268	16201-16202	)	
123-269	16203-16208	Index	
123-270	16209-16213	Cond	
123-271	16213-16214	:	
123-272	16215-16216	(	
123-273	16216-16220	data	
123-274	16221-16222	@	
123-275	16222-16223	>	
123-276	16224-16225	'	
123-277	16225-16226	{	
123-278	16226-16227	"	
123-279	16227-16234	braille	
123-280	16234-16235	"	
123-281	16235-16236	:	
123-282	16237-16241	true	
123-283	16241-16242	}	
123-284	16242-16243	'	
123-285	16243-16244	:	
123-286	16244-16245	:	
123-287	16245-16250	jsonb	
123-288	16250-16251	)	
123-289	16252-16260	Planning	
123-290	16261-16265	Time	
123-291	16265-16266	:	
123-292	16267-16272	0.100	
123-293	16273-16275	ms	
123-294	16276-16285	Execution	
123-295	16286-16290	Time	
123-296	16290-16291	:	
123-297	16292-16297	0.076	
123-298	16298-16300	ms	
123-299	16301-16302	(	
123-300	16302-16303	8	
123-301	16304-16308	rows	
123-302	16308-16309	)	
123-303	16310-16313	The	
123-304	16314-16318	path	
123-305	16319-16328	operators	
123-306	16329-16336	support	
123-307	16337-16345	querying	
123-308	16346-16352	nested	
123-309	16353-16360	objects	
123-310	16361-16363	or	
123-311	16364-16373	top-level	
123-312	16374-16381	objects	
123-313	16381-16382	:	
123-314	16383-16387	demo	
123-315	16387-16388	=	
123-316	16388-16389	#	
123-317	16390-16396	select	
123-318	16397-16398	*	
123-319	16399-16403	from	
123-320	16404-16409	books	
123-321	16410-16415	where	
123-322	16416-16420	data	
123-323	16421-16422	@	
123-324	16422-16423	>	
123-325	16424-16425	'	
123-326	16425-16426	{	
123-327	16426-16427	"	
123-328	16427-16436	publisher	
123-329	16436-16437	"	
123-330	16437-16438	:	
123-331	16438-16439	"	
123-332	16439-16449	XlekfkLOtL	
123-333	16449-16450	"	
123-334	16450-16451	}	
123-335	16451-16452	'	
123-336	16452-16453	:	
123-337	16453-16454	:	
123-338	16454-16459	jsonb	
123-339	16459-16460	;	
123-340	16461-16463	id	
123-341	16464-16465	|	
123-342	16466-16472	author	
123-343	16473-16474	|	
123-344	16475-16479	isbn	
123-345	16480-16481	|	
123-346	16482-16488	rating	
123-347	16489-16490	|	
123-348	16491-16495	data	
123-349	16496-16497	-	
123-350	16497-16498	-	
123-351	16498-16499	-	
123-352	16499-16500	-	
123-353	16500-16501	-	
123-354	16501-16502	+	
123-355	16502-16503	-	
123-356	16503-16504	-	
123-357	16504-16505	-	
123-358	16505-16506	-	
123-359	16506-16507	-	
123-360	16507-16508	-	
123-361	16508-16509	-	
123-362	16509-16510	-	
123-363	16510-16511	-	
123-364	16511-16512	-	
123-365	16512-16513	-	
123-366	16513-16514	-	
123-367	16514-16515	-	
123-368	16515-16516	-	
123-369	16516-16517	-	
123-370	16517-16518	-	
123-371	16518-16519	-	
123-372	16519-16520	+	
123-373	16520-16521	-	
123-374	16521-16522	-	
123-375	16522-16523	-	
123-376	16523-16524	-	
123-377	16524-16525	-	
123-378	16525-16526	-	
123-379	16526-16527	-	
123-380	16527-16528	-	
123-381	16528-16529	-	
123-382	16529-16530	-	
123-383	16530-16531	-	
123-384	16531-16532	-	
123-385	16532-16533	+	
123-386	16533-16534	-	
123-387	16534-16535	-	
123-388	16535-16536	-	
123-389	16536-16537	-	
123-390	16537-16538	-	
123-391	16538-16539	-	
123-392	16539-16540	-	
123-393	16540-16541	-	
123-394	16541-16542	+	
123-395	16542-16543	-	
123-396	16543-16544	-	
123-397	16544-16545	-	
123-398	16545-16546	-	
123-399	16546-16547	-	
123-400	16547-16548	-	
123-401	16548-16549	-	
123-402	16549-16550	-	
123-403	16550-16551	-	
123-404	16551-16552	-	
123-405	16552-16553	-	
123-406	16553-16554	-	
123-407	16554-16555	-	
123-408	16555-16556	-	
123-409	16556-16557	-	
123-410	16557-16558	-	
123-411	16558-16559	-	
123-412	16559-16560	-	
123-413	16560-16561	-	
123-414	16561-16562	-	
123-415	16562-16563	-	
123-416	16563-16564	-	
123-417	16564-16565	-	
123-418	16565-16566	-	
123-419	16566-16567	-	
123-420	16567-16568	-	
123-421	16568-16569	-	
123-422	16569-16570	-	
123-423	16570-16571	-	
123-424	16571-16572	-	
123-425	16572-16573	-	
123-426	16573-16574	-	
123-427	16574-16575	-	
123-428	16575-16576	-	
123-429	16576-16577	-	
123-430	16577-16578	-	
123-431	16578-16579	-	
123-432	16579-16580	-	
123-433	16580-16581	-	
123-434	16581-16582	-	
123-435	16582-16583	-	
123-436	16583-16584	-	
123-437	16584-16585	-	
123-438	16585-16586	-	
123-439	16586-16587	-	
123-440	16587-16588	-	
123-441	16588-16589	-	
123-442	16589-16590	-	
123-443	16590-16591	-	
123-444	16591-16592	-	
123-445	16592-16593	-	
123-446	16593-16594	-	
123-447	16594-16595	-	
123-448	16595-16596	-	
123-449	16596-16597	-	
123-450	16597-16598	-	
123-451	16598-16599	-	
123-452	16599-16600	-	
123-453	16600-16601	-	
123-454	16601-16602	-	
123-455	16602-16603	-	
123-456	16603-16604	-	
123-457	16604-16605	-	
123-458	16605-16606	-	
123-459	16606-16607	-	
123-460	16607-16608	-	
123-461	16608-16609	-	
123-462	16609-16610	-	
123-463	16610-16611	-	
123-464	16611-16612	-	
123-465	16612-16613	-	
123-466	16613-16614	-	
123-467	16614-16615	-	
123-468	16615-16616	-	
123-469	16616-16617	-	
123-470	16617-16618	-	
123-471	16618-16619	-	
123-472	16619-16620	-	
123-473	16620-16621	-	
123-474	16621-16622	-	
123-475	16622-16623	-	
123-476	16623-16624	-	
123-477	16624-16625	-	
123-478	16625-16626	-	
123-479	16626-16627	-	
123-480	16628-16631	346	
123-481	16632-16633	|	
123-482	16634-16649	uD3QOvHfJdxq2ez	
123-483	16650-16651	|	
123-484	16652-16662	KiAaIRu8QE	
123-485	16663-16664	|	
123-486	16665-16666	1	
123-487	16667-16668	|	
123-488	16669-16670	{	
123-489	16670-16671	"	
123-490	16671-16675	tags	
123-491	16675-16676	"	
123-492	16676-16677	:	
123-493	16678-16679	{	
123-494	16679-16680	"	
123-495	16680-16684	nk88	
123-496	16684-16685	"	
123-497	16685-16686	:	
123-498	16687-16688	{	
123-499	16688-16689	"	
123-500	16689-16693	ik37	
123-501	16693-16694	"	
123-502	16694-16695	:	
123-503	16696-16697	"	
123-504	16697-16702	iv161	
123-505	16702-16703	"	
123-506	16703-16704	}	
123-507	16704-16705	}	
123-508	16705-16706	,	
123-509	16707-16708	"	
123-510	16708-16717	publisher	
123-511	16717-16718	"	
123-512	16718-16719	:	
123-513	16720-16721	"	
123-514	16721-16731	XlekfkLOtL	
123-515	16731-16732	"	
123-516	16732-16733	,	
123-517	16734-16735	"	
123-518	16735-16747	criticrating	
123-519	16747-16748	"	
123-520	16748-16749	:	
123-521	16750-16751	3	
123-522	16751-16752	}	
123-523	16753-16754	(	
123-524	16754-16755	1	
123-525	16756-16759	row	
123-526	16759-16760	)	
123-527	16761-16765	demo	
123-528	16765-16766	=	
123-529	16766-16767	#	
123-530	16768-16775	explain	
123-531	16776-16783	analyze	
123-532	16784-16790	select	
123-533	16791-16792	*	
123-534	16793-16797	from	
123-535	16798-16803	books	
123-536	16804-16809	where	
123-537	16810-16814	data	
123-538	16815-16816	@	
123-539	16816-16817	>	
123-540	16818-16819	'	
123-541	16819-16820	{	
123-542	16820-16821	"	
123-543	16821-16830	publisher	
123-544	16830-16831	"	
123-545	16831-16832	:	
123-546	16832-16833	"	
123-547	16833-16843	XlekfkLOtL	
123-548	16843-16844	"	
123-549	16844-16845	}	
123-550	16845-16846	'	
123-551	16846-16847	:	
123-552	16847-16848	:	
123-553	16848-16853	jsonb	
123-554	16853-16854	;	
123-555	16855-16860	QUERY	
123-556	16861-16865	PLAN	
123-557	16866-16867	-	
123-558	16867-16868	-	
123-559	16868-16869	-	
123-560	16869-16870	-	
123-561	16870-16871	-	
123-562	16871-16872	-	
123-563	16872-16873	-	
123-564	16873-16874	-	
123-565	16874-16875	-	
123-566	16875-16876	-	
123-567	16876-16877	-	
123-568	16877-16878	-	
123-569	16878-16879	-	
123-570	16879-16880	-	
123-571	16880-16881	-	
123-572	16881-16882	-	
123-573	16882-16883	-	
123-574	16883-16884	-	
123-575	16884-16885	-	
123-576	16885-16886	-	
123-577	16886-16887	-	
123-578	16887-16888	-	
123-579	16888-16889	-	
123-580	16889-16890	-	
123-581	16890-16891	-	
123-582	16891-16892	-	
123-583	16892-16893	-	
123-584	16893-16894	-	
123-585	16894-16895	-	
123-586	16895-16896	-	
123-587	16896-16897	-	
123-588	16897-16898	-	
123-589	16898-16899	-	
123-590	16899-16900	-	
123-591	16900-16901	-	
123-592	16901-16902	-	
123-593	16902-16903	-	
123-594	16903-16904	-	
123-595	16904-16905	-	
123-596	16905-16906	-	
123-597	16906-16907	-	
123-598	16907-16908	-	
123-599	16908-16909	-	
123-600	16909-16910	-	
123-601	16910-16911	-	
123-602	16911-16912	-	
123-603	16912-16913	-	
123-604	16913-16914	-	
123-605	16914-16915	-	
123-606	16915-16916	-	
123-607	16916-16917	-	
123-608	16917-16918	-	
123-609	16918-16919	-	
123-610	16919-16920	-	
123-611	16920-16921	-	
123-612	16921-16922	-	
123-613	16922-16923	-	
123-614	16923-16924	-	
123-615	16924-16925	-	
123-616	16925-16926	-	
123-617	16926-16927	-	
123-618	16927-16928	-	
123-619	16928-16929	-	
123-620	16929-16930	-	
123-621	16930-16931	-	
123-622	16931-16932	-	
123-623	16932-16933	-	
123-624	16933-16934	-	
123-625	16934-16935	-	
123-626	16935-16936	-	
123-627	16936-16937	-	
123-628	16937-16938	-	
123-629	16938-16939	-	
123-630	16939-16940	-	
123-631	16940-16941	-	
123-632	16941-16942	-	
123-633	16942-16943	-	
123-634	16943-16944	-	
123-635	16944-16945	-	
123-636	16945-16946	-	
123-637	16946-16947	-	
123-638	16947-16948	-	
123-639	16948-16949	-	
123-640	16949-16950	-	
123-641	16950-16951	-	
123-642	16951-16952	-	
123-643	16952-16953	-	
123-644	16953-16954	-	
123-645	16954-16955	-	
123-646	16955-16956	-	
123-647	16956-16957	-	
123-648	16957-16958	-	
123-649	16958-16959	-	
123-650	16959-16960	-	
123-651	16960-16961	-	
123-652	16961-16962	-	
123-653	16962-16963	-	
123-654	16963-16964	-	
123-655	16964-16965	-	
123-656	16965-16966	-	
123-657	16966-16967	-	
123-658	16967-16968	-	
123-659	16968-16969	-	
123-660	16969-16970	-	
123-661	16970-16971	-	
123-662	16971-16972	-	
123-663	16972-16973	-	
123-664	16973-16974	-	
123-665	16974-16975	-	
123-666	16975-16976	-	
123-667	16976-16977	-	
123-668	16977-16978	-	
123-669	16978-16979	-	
123-670	16979-16980	-	
123-671	16980-16981	-	
123-672	16981-16982	-	
123-673	16983-16989	Bitmap	
123-674	16990-16994	Heap	
123-675	16995-16999	Scan	
123-676	17000-17002	on	
123-677	17003-17008	books	
123-678	17009-17010	(	
123-679	17010-17014	cost	
123-680	17014-17015	=	
123-681	17015-17020	16.75	
123-682	17020-17021	.	
123-683	17021-17029	.1009.25	
123-684	17030-17034	rows	
123-685	17034-17035	=	
123-686	17035-17039	1000	
123-687	17040-17045	width	
123-688	17045-17046	=	
123-689	17046-17049	158	
123-690	17049-17050	)	
123-691	17051-17052	(	
123-692	17052-17058	actual	
123-693	17059-17063	time	
123-694	17063-17064	=	
123-695	17064-17069	0.491	
123-696	17069-17070	.	
123-697	17070-17076	.0.492	
123-698	17077-17081	rows	
123-699	17081-17082	=	
123-700	17082-17083	1	
123-701	17084-17089	loops	
123-702	17089-17090	=	
123-703	17090-17091	1	
123-704	17091-17092	)	
123-705	17093-17100	Recheck	
123-706	17101-17105	Cond	
123-707	17105-17106	:	
123-708	17107-17108	(	
123-709	17108-17112	data	
123-710	17113-17114	@	
123-711	17114-17115	>	
123-712	17116-17117	'	
123-713	17117-17118	{	
123-714	17118-17119	"	
123-715	17119-17128	publisher	
123-716	17128-17129	"	
123-717	17129-17130	:	
123-718	17131-17132	"	
123-719	17132-17142	XlekfkLOtL	
123-720	17142-17143	"	
123-721	17143-17144	}	
123-722	17144-17145	'	
123-723	17145-17146	:	
123-724	17146-17147	:	
123-725	17147-17152	jsonb	
123-726	17152-17153	)	
123-727	17154-17158	Heap	
123-728	17159-17165	Blocks	
123-729	17165-17166	:	
123-730	17167-17172	exact	
123-731	17172-17173	=	
123-732	17173-17174	1	
123-733	17175-17176	-	
123-734	17176-17177	>	
123-735	17178-17184	Bitmap	
123-736	17185-17190	Index	
123-737	17191-17195	Scan	
123-738	17196-17198	on	
123-739	17199-17206	datagin	
123-740	17207-17208	(	
123-741	17208-17212	cost	
123-742	17212-17213	=	
123-743	17213-17217	0.00	
123-744	17217-17218	.	
123-745	17218-17224	.16.50	
123-746	17225-17229	rows	
123-747	17229-17230	=	
123-748	17230-17234	1000	
123-749	17235-17240	width	
123-750	17240-17241	=	
123-751	17241-17242	0	
123-752	17242-17243	)	
123-753	17244-17245	(	
123-754	17245-17251	actual	
123-755	17252-17256	time	
123-756	17256-17257	=	
123-757	17257-17262	0.092	
123-758	17262-17263	.	
123-759	17263-17269	.0.092	
123-760	17270-17274	rows	
123-761	17274-17275	=	
123-762	17275-17276	1	
123-763	17277-17282	loops	
123-764	17282-17283	=	
123-765	17283-17284	1	
123-766	17284-17285	)	
123-767	17286-17291	Index	
123-768	17292-17296	Cond	
123-769	17296-17297	:	
123-770	17298-17299	(	
123-771	17299-17303	data	
123-772	17304-17305	@	
123-773	17305-17306	>	
123-774	17307-17308	'	
123-775	17308-17309	{	
123-776	17309-17310	"	
123-777	17310-17319	publisher	
123-778	17319-17320	"	
123-779	17320-17321	:	
123-780	17322-17323	"	
123-781	17323-17333	XlekfkLOtL	
123-782	17333-17334	"	
123-783	17334-17335	}	
123-784	17335-17336	'	
123-785	17336-17337	:	
123-786	17337-17338	:	
123-787	17338-17343	jsonb	
123-788	17343-17344	)	
123-789	17345-17353	Planning	
123-790	17354-17358	Time	
123-791	17358-17359	:	
123-792	17360-17365	0.090	
123-793	17366-17368	ms	
123-794	17369-17378	Execution	
123-795	17379-17383	Time	
123-796	17383-17384	:	
123-797	17385-17390	0.523	
123-798	17391-17393	ms	
123-799	17394-17397	The	
123-800	17398-17405	queries	
123-801	17406-17409	can	
123-802	17410-17412	be	
123-803	17413-17424	multi-level	
123-804	17425-17427	as	
123-805	17428-17432	well	
123-806	17432-17433	:	
123-807	17434-17438	demo	
123-808	17438-17439	=	
123-809	17439-17440	#	
123-810	17441-17447	select	
123-811	17448-17449	*	
123-812	17450-17454	from	
123-813	17455-17460	books	
123-814	17461-17466	where	
123-815	17467-17471	data	
123-816	17472-17473	@	
123-817	17473-17474	>	
123-818	17475-17476	'	
123-819	17476-17477	{	
123-820	17477-17478	"	
123-821	17478-17482	tags	
123-822	17482-17483	"	
123-823	17483-17484	:	
123-824	17484-17485	{	
123-825	17485-17486	"	
123-826	17486-17494	nk455671	
123-827	17494-17495	"	
123-828	17495-17496	:	
123-829	17496-17497	{	
123-830	17497-17498	"	
123-831	17498-17506	ik937456	
123-832	17506-17507	"	
123-833	17507-17508	:	
123-834	17508-17509	"	
123-835	17509-17517	iv506075	
123-836	17517-17518	"	
123-837	17518-17519	}	
123-838	17519-17520	}	
123-839	17520-17521	}	
123-840	17521-17522	'	
123-841	17522-17523	:	
123-842	17523-17524	:	
123-843	17524-17529	jsonb	
123-844	17529-17530	;	
123-845	17531-17533	id	
123-846	17534-17535	|	
123-847	17536-17542	author	
123-848	17543-17544	|	
123-849	17545-17549	isbn	
123-850	17550-17551	|	
123-851	17552-17558	rating	
123-852	17559-17560	|	
123-853	17561-17565	data	
123-854	17566-17567	-	
123-855	17567-17568	-	
123-856	17568-17569	-	
123-857	17569-17570	-	
123-858	17570-17571	-	
123-859	17571-17572	-	
123-860	17572-17573	-	
123-861	17573-17574	-	
123-862	17574-17575	-	
123-863	17575-17576	+	
123-864	17576-17577	-	
123-865	17577-17578	-	
123-866	17578-17579	-	
123-867	17579-17580	-	
123-868	17580-17581	-	
123-869	17581-17582	-	
123-870	17582-17583	-	
123-871	17583-17584	-	
123-872	17584-17585	-	
123-873	17585-17586	-	
123-874	17586-17587	-	
123-875	17587-17588	-	
123-876	17588-17589	-	
123-877	17589-17590	-	
123-878	17590-17591	-	
123-879	17591-17592	-	
123-880	17592-17593	-	
123-881	17593-17594	+	
123-882	17594-17595	-	
123-883	17595-17596	-	
123-884	17596-17597	-	
123-885	17597-17598	-	
123-886	17598-17599	-	
123-887	17599-17600	-	
123-888	17600-17601	-	
123-889	17601-17602	-	
123-890	17602-17603	-	
123-891	17603-17604	-	
123-892	17604-17605	-	
123-893	17605-17606	-	
123-894	17606-17607	+	
123-895	17607-17608	-	
123-896	17608-17609	-	
123-897	17609-17610	-	
123-898	17610-17611	-	
123-899	17611-17612	-	
123-900	17612-17613	-	
123-901	17613-17614	-	
123-902	17614-17615	-	
123-903	17615-17616	+	
123-904	17616-17617	-	
123-905	17617-17618	-	
123-906	17618-17619	-	
123-907	17619-17620	-	
123-908	17620-17621	-	
123-909	17621-17622	-	
123-910	17622-17623	-	
123-911	17623-17624	-	
123-912	17624-17625	-	
123-913	17625-17626	-	
123-914	17626-17627	-	
123-915	17627-17628	-	
123-916	17628-17629	-	
123-917	17629-17630	-	
123-918	17630-17631	-	
123-919	17631-17632	-	
123-920	17632-17633	-	
123-921	17633-17634	-	
123-922	17634-17635	-	
123-923	17635-17636	-	
123-924	17636-17637	-	
123-925	17637-17638	-	
123-926	17638-17639	-	
123-927	17639-17640	-	
123-928	17640-17641	-	
123-929	17641-17642	-	
123-930	17642-17643	-	
123-931	17643-17644	-	
123-932	17644-17645	-	
123-933	17645-17646	-	
123-934	17646-17647	-	
123-935	17647-17648	-	
123-936	17648-17649	-	
123-937	17649-17650	-	
123-938	17650-17651	-	
123-939	17651-17652	-	
123-940	17652-17653	-	
123-941	17653-17654	-	
123-942	17654-17655	-	
123-943	17655-17656	-	
123-944	17656-17657	-	
123-945	17657-17658	-	
123-946	17658-17659	-	
123-947	17659-17660	-	
123-948	17660-17661	-	
123-949	17661-17662	-	
123-950	17662-17663	-	
123-951	17663-17664	-	
123-952	17664-17665	-	
123-953	17665-17666	-	
123-954	17666-17667	-	
123-955	17667-17668	-	
123-956	17668-17669	-	
123-957	17669-17670	-	
123-958	17670-17671	-	
123-959	17671-17672	-	
123-960	17672-17673	-	
123-961	17673-17674	-	
123-962	17674-17675	-	
123-963	17675-17676	-	
123-964	17676-17677	-	
123-965	17677-17678	-	
123-966	17678-17679	-	
123-967	17679-17680	-	
123-968	17680-17681	-	
123-969	17681-17682	-	
123-970	17682-17683	-	
123-971	17683-17684	-	
123-972	17684-17685	-	
123-973	17685-17686	-	
123-974	17686-17687	-	
123-975	17687-17688	-	
123-976	17688-17689	-	
123-977	17689-17690	-	
123-978	17690-17691	-	
123-979	17691-17692	-	
123-980	17692-17693	-	
123-981	17693-17694	-	
123-982	17694-17695	-	
123-983	17695-17696	-	
123-984	17696-17697	-	
123-985	17697-17698	-	
123-986	17698-17699	-	
123-987	17699-17700	-	
123-988	17700-17701	-	
123-989	17701-17702	-	
123-990	17702-17703	-	
123-991	17703-17704	-	
123-992	17704-17705	-	
123-993	17705-17706	-	
123-994	17706-17707	-	
123-995	17707-17708	-	
123-996	17708-17709	-	
123-997	17709-17710	-	
123-998	17710-17711	-	
123-999	17711-17712	-	
123-1000	17712-17713	-	
123-1001	17713-17714	-	
123-1002	17714-17715	-	
123-1003	17715-17716	-	
123-1004	17716-17717	-	
123-1005	17717-17718	-	
123-1006	17718-17719	-	
123-1007	17719-17720	-	
123-1008	17720-17721	-	
123-1009	17721-17722	-	
123-1010	17722-17723	-	
123-1011	17723-17724	-	
123-1012	17724-17725	-	
123-1013	17725-17726	-	
123-1014	17726-17727	-	
123-1015	17727-17728	-	
123-1016	17728-17729	-	
123-1017	17729-17730	-	
123-1018	17730-17731	-	
123-1019	17731-17732	-	
123-1020	17732-17733	-	
123-1021	17733-17734	-	
123-1022	17734-17735	-	
123-1023	17735-17736	-	
123-1024	17736-17737	-	
123-1025	17737-17738	-	
123-1026	17738-17739	-	
123-1027	17739-17740	-	
123-1028	17740-17741	-	
123-1029	17741-17742	-	
123-1030	17742-17743	-	
123-1031	17743-17744	-	
123-1032	17744-17745	-	
123-1033	17745-17746	-	
123-1034	17746-17747	-	
123-1035	17747-17748	-	
123-1036	17748-17749	-	
123-1037	17749-17750	-	
123-1038	17750-17751	-	
123-1039	17751-17752	-	
123-1040	17752-17753	-	
123-1041	17753-17754	-	
123-1042	17754-17755	-	
123-1043	17755-17756	-	
123-1044	17756-17757	-	
123-1045	17757-17758	-	
123-1046	17758-17759	-	
123-1047	17759-17760	-	
123-1048	17760-17761	-	
123-1049	17761-17762	-	
123-1050	17762-17763	-	
123-1051	17763-17764	-	
123-1052	17764-17765	-	
123-1053	17765-17766	-	
123-1054	17767-17768	-	
123-1055	17768-17769	-	
123-1056	17769-17770	-	
123-1057	17770-17771	-	
123-1058	17771-17772	-	
123-1059	17772-17773	-	
123-1060	17773-17774	-	
123-1061	17774-17775	-	
123-1062	17775-17776	-	
123-1063	17776-17777	-	
123-1064	17777-17778	-	
123-1065	17778-17779	-	
123-1066	17779-17780	-	
123-1067	17780-17781	-	
123-1068	17781-17782	-	
123-1069	17782-17783	-	
123-1070	17783-17784	-	
123-1071	17784-17785	-	
123-1072	17786-17793	1000005	
123-1073	17794-17795	|	
123-1074	17796-17811	XEI7xShT8bPu6H7	
123-1075	17812-17813	|	
123-1076	17814-17824	2kD5XJDZUF	
123-1077	17825-17826	|	
123-1078	17827-17828	0	
123-1079	17829-17830	|	
123-1080	17831-17832	{	
123-1081	17832-17833	"	
123-1082	17833-17837	tags	
123-1083	17837-17838	"	
123-1084	17838-17839	:	
123-1085	17840-17841	{	
123-1086	17841-17842	"	
123-1087	17842-17850	nk455671	
123-1088	17850-17851	"	
123-1089	17851-17852	:	
123-1090	17853-17854	{	
123-1091	17854-17855	"	
123-1092	17855-17863	ik937456	
123-1093	17863-17864	"	
123-1094	17864-17865	:	
123-1095	17866-17867	"	
123-1096	17867-17875	iv506075	
123-1097	17875-17876	"	
123-1098	17876-17877	}	
123-1099	17877-17878	}	
123-1100	17878-17879	,	
123-1101	17880-17881	"	
123-1102	17881-17888	braille	
123-1103	17888-17889	"	
123-1104	17889-17890	:	
123-1105	17891-17895	true	
123-1106	17895-17896	,	
123-1107	17897-17898	"	
123-1108	17898-17906	keywords	
123-1109	17906-17907	"	
123-1110	17907-17908	:	
123-1111	17909-17910	[	
123-1112	17910-17911	"	
123-1113	17911-17914	abc	
123-1114	17914-17915	"	
123-1115	17915-17916	,	
123-1116	17917-17918	"	
123-1117	17918-17921	kef	
123-1118	17921-17922	"	
123-1119	17922-17923	,	
123-1120	17924-17925	"	
123-1121	17925-17928	keh	
123-1122	17928-17929	"	
123-1123	17929-17930	]	
123-1124	17930-17931	,	
123-1125	17932-17933	"	
123-1126	17933-17942	hardcover	
123-1127	17942-17943	"	
123-1128	17943-17944	:	
123-1129	17945-17950	false	
123-1130	17950-17951	,	
123-1131	17952-17953	"	
123-1132	17953-17962	publisher	
123-1133	17962-17963	"	
123-1134	17963-17964	:	
123-1135	17965-17966	"	
123-1136	17966-17976	zSfZIAjGGs	
123-1137	17976-17977	"	
123-1138	17977-17978	,	
123-1139	17979-17980	"	
123-1140	17981-17993	criticrating	
123-1141	17993-17994	"	
123-1142	17994-17995	:	
123-1143	17996-17997	4	
123-1144	17997-17998	}	
123-1145	17999-18000	(	
123-1146	18000-18001	1	
123-1147	18002-18005	row	
123-1148	18005-18006	)	
123-1149	18007-18010	GIN	
123-1150	18010-18011	 	
123-1151	18011-18016	Index	
123-1152	18017-18018	“	
123-1153	18018-18025	pathops	
123-1154	18025-18026	”	
123-1155	18027-18035	Operator	
123-1156	18036-18041	Class	
123-1157	18042-18045	GIN	
123-1158	18046-18050	also	
123-1159	18051-18059	supports	
123-1160	18060-18061	a	
123-1161	18062-18063	“	
123-1162	18063-18070	pathops	
123-1163	18070-18071	”	
123-1164	18072-18078	option	
123-1165	18079-18081	to	
123-1166	18082-18088	reduce	
123-1167	18089-18092	the	
123-1168	18093-18097	size	
123-1169	18098-18100	of	
123-1170	18101-18104	the	
123-1171	18105-18108	GIN	
123-1172	18109-18114	index	
123-1173	18114-18115	.	

#Text=When you use the pathops option, the only operator support is the “@>” so you need to be careful with your queries.
124-1	18116-18120	When	
124-2	18121-18124	you	
124-3	18125-18128	use	
124-4	18129-18132	the	
124-5	18133-18140	pathops	
124-6	18141-18147	option	
124-7	18147-18148	,	
124-8	18149-18152	the	
124-9	18153-18157	only	
124-10	18158-18166	operator	
124-11	18167-18174	support	
124-12	18175-18177	is	
124-13	18178-18181	the	
124-14	18182-18183	“	
124-15	18183-18184	@	
124-16	18184-18185	>	
124-17	18185-18186	”	
124-18	18187-18189	so	
124-19	18190-18193	you	
124-20	18194-18198	need	
124-21	18199-18201	to	
124-22	18202-18204	be	
124-23	18205-18212	careful	
124-24	18213-18217	with	
124-25	18218-18222	your	
124-26	18223-18230	queries	
124-27	18230-18231	.	

#Text=From the docs:
#Text=“The technical difference between a jsonb_ops and a jsonb_path_ops GIN index is that the former creates independent index items for each key and value in the data, while the latter creates index items only for each value in the data”
#Text=You can create a GIN pathops index as follows:
#Text=CREATE INDEX dataginpathops ON books USING gin (data jsonb_path_ops);
#Text=On my small dataset of 1 million books, you can see that the pathops GIN index is smaller – you should test with your dataset to understand the savings:
#Text=public | dataginpathops | index | sgpostgres | books | 67 MB |
#Text=public | datatagsgin | index | sgpostgres | books | 84 MB |
#Text=Let’s rerun our query from before with the pathops index:
#Text=demo=# select * from books where data @> '{"tags":{"nk455671":{"ik937456":"iv506075"}}}'::jsonb;
#Text=id | author | isbn | rating | data
#Text=---------+-----------------+------------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------
#Text=------------------
#Text=1000005 | XEI7xShT8bPu6H7 | 2kD5XJDZUF | 0 | {"tags": {"nk455671": {"ik937456": "iv506075"}}, "braille": true, "keywords": ["abc", "kef", "keh"], "hardcover": false, "publisher": "zSfZIAjGGs", "
#Text=criticrating": 4}
#Text=(1 row)
#Text=demo=# explain select * from books where data @> '{"tags":{"nk455671":{"ik937456":"iv506075"}}}'::jsonb;
#Text=QUERY PLAN
#Text=-----------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books (cost=12.75..1005.25 rows=1000 width=158)
#Text=Recheck Cond: (data @> '{"tags": {"nk455671": {"ik937456": "iv506075"}}}'::jsonb)
#Text=-> Bitmap Index Scan on dataginpathops (cost=0.00..12.50 rows=1000 width=0)
#Text=Index Cond: (data @> '{"tags": {"nk455671": {"ik937456": "iv506075"}}}'::jsonb)
#Text=(4 rows)
#Text=However, as mentioned above, the “pathops” option does not support all of the scenarios that the default operator class supports.
125-1	18232-18236	From	
125-2	18237-18240	the	
125-3	18241-18245	docs	
125-4	18245-18246	:	
125-5	18247-18248	“	
125-6	18248-18251	The	
125-7	18252-18261	technical	
125-8	18262-18272	difference	
125-9	18273-18280	between	
125-10	18281-18282	a	
125-11	18283-18292	jsonb_ops	
125-12	18293-18296	and	
125-13	18297-18298	a	
125-14	18299-18313	jsonb_path_ops	
125-15	18314-18317	GIN	
125-16	18318-18323	index	
125-17	18324-18326	is	
125-18	18327-18331	that	
125-19	18332-18335	the	
125-20	18336-18342	former	
125-21	18343-18350	creates	
125-22	18351-18362	independent	
125-23	18363-18368	index	
125-24	18369-18374	items	
125-25	18375-18378	for	
125-26	18379-18383	each	
125-27	18384-18387	key	
125-28	18388-18391	and	
125-29	18392-18397	value	
125-30	18398-18400	in	
125-31	18401-18404	the	
125-32	18405-18409	data	
125-33	18409-18410	,	
125-34	18411-18416	while	
125-35	18417-18420	the	
125-36	18421-18427	latter	
125-37	18428-18435	creates	
125-38	18436-18441	index	
125-39	18442-18447	items	
125-40	18448-18452	only	
125-41	18453-18456	for	
125-42	18457-18461	each	
125-43	18462-18467	value	
125-44	18468-18470	in	
125-45	18471-18474	the	
125-46	18475-18479	data	
125-47	18479-18480	”	
125-48	18481-18484	You	
125-49	18485-18488	can	
125-50	18489-18495	create	
125-51	18496-18497	a	
125-52	18498-18501	GIN	
125-53	18502-18509	pathops	
125-54	18510-18515	index	
125-55	18516-18518	as	
125-56	18519-18526	follows	
125-57	18526-18527	:	
125-58	18528-18534	CREATE	
125-59	18535-18540	INDEX	
125-60	18541-18555	dataginpathops	
125-61	18556-18558	ON	
125-62	18559-18564	books	
125-63	18565-18570	USING	
125-64	18571-18574	gin	
125-65	18575-18576	(	
125-66	18576-18580	data	
125-67	18581-18595	jsonb_path_ops	
125-68	18595-18596	)	
125-69	18596-18597	;	
125-70	18598-18600	On	
125-71	18601-18603	my	
125-72	18604-18609	small	
125-73	18610-18617	dataset	
125-74	18618-18620	of	
125-75	18621-18622	1	
125-76	18622-18623	 	
125-77	18623-18630	million	
125-78	18631-18636	books	
125-79	18636-18637	,	
125-80	18638-18641	you	
125-81	18642-18645	can	
125-82	18646-18649	see	
125-83	18650-18654	that	
125-84	18655-18658	the	
125-85	18659-18666	pathops	
125-86	18667-18670	GIN	
125-87	18671-18676	index	
125-88	18677-18679	is	
125-89	18680-18687	smaller	
125-90	18688-18689	–	
125-91	18690-18693	you	
125-92	18694-18700	should	
125-93	18701-18705	test	
125-94	18706-18710	with	
125-95	18711-18715	your	
125-96	18716-18723	dataset	
125-97	18724-18726	to	
125-98	18727-18737	understand	
125-99	18738-18741	the	
125-100	18742-18749	savings	
125-101	18749-18750	:	
125-102	18751-18757	public	
125-103	18758-18759	|	
125-104	18760-18774	dataginpathops	
125-105	18775-18776	|	
125-106	18777-18782	index	
125-107	18783-18784	|	
125-108	18785-18795	sgpostgres	
125-109	18796-18797	|	
125-110	18798-18803	books	
125-111	18804-18805	|	
125-112	18806-18808	67	
125-113	18809-18811	MB	
125-114	18812-18813	|	
125-115	18814-18820	public	
125-116	18821-18822	|	
125-117	18823-18834	datatagsgin	
125-118	18835-18836	|	
125-119	18837-18842	index	
125-120	18843-18844	|	
125-121	18845-18855	sgpostgres	
125-122	18856-18857	|	
125-123	18858-18863	books	
125-124	18864-18865	|	
125-125	18866-18868	84	
125-126	18869-18871	MB	
125-127	18872-18873	|	
125-128	18874-18877	Let	
125-129	18877-18878	’	
125-130	18878-18879	s	
125-131	18880-18885	rerun	
125-132	18886-18889	our	
125-133	18890-18895	query	
125-134	18896-18900	from	
125-135	18901-18907	before	
125-136	18908-18912	with	
125-137	18913-18916	the	
125-138	18917-18924	pathops	
125-139	18925-18930	index	
125-140	18930-18931	:	
125-141	18932-18936	demo	
125-142	18936-18937	=	
125-143	18937-18938	#	
125-144	18939-18945	select	
125-145	18946-18947	*	
125-146	18948-18952	from	
125-147	18953-18958	books	
125-148	18959-18964	where	
125-149	18965-18969	data	
125-150	18970-18971	@	
125-151	18971-18972	>	
125-152	18973-18974	'	
125-153	18974-18975	{	
125-154	18975-18976	"	
125-155	18976-18980	tags	
125-156	18980-18981	"	
125-157	18981-18982	:	
125-158	18982-18983	{	
125-159	18983-18984	"	
125-160	18984-18992	nk455671	
125-161	18992-18993	"	
125-162	18993-18994	:	
125-163	18994-18995	{	
125-164	18995-18996	"	
125-165	18996-19004	ik937456	
125-166	19004-19005	"	
125-167	19005-19006	:	
125-168	19006-19007	"	
125-169	19007-19015	iv506075	
125-170	19015-19016	"	
125-171	19016-19017	}	
125-172	19017-19018	}	
125-173	19018-19019	}	
125-174	19019-19020	'	
125-175	19020-19021	:	
125-176	19021-19022	:	
125-177	19022-19027	jsonb	
125-178	19027-19028	;	
125-179	19029-19031	id	
125-180	19032-19033	|	
125-181	19034-19040	author	
125-182	19041-19042	|	
125-183	19043-19047	isbn	
125-184	19048-19049	|	
125-185	19050-19056	rating	
125-186	19057-19058	|	
125-187	19059-19063	data	
125-188	19064-19065	-	
125-189	19065-19066	-	
125-190	19066-19067	-	
125-191	19067-19068	-	
125-192	19068-19069	-	
125-193	19069-19070	-	
125-194	19070-19071	-	
125-195	19071-19072	-	
125-196	19072-19073	-	
125-197	19073-19074	+	
125-198	19074-19075	-	
125-199	19075-19076	-	
125-200	19076-19077	-	
125-201	19077-19078	-	
125-202	19078-19079	-	
125-203	19079-19080	-	
125-204	19080-19081	-	
125-205	19081-19082	-	
125-206	19082-19083	-	
125-207	19083-19084	-	
125-208	19084-19085	-	
125-209	19085-19086	-	
125-210	19086-19087	-	
125-211	19087-19088	-	
125-212	19088-19089	-	
125-213	19089-19090	-	
125-214	19090-19091	-	
125-215	19091-19092	+	
125-216	19092-19093	-	
125-217	19093-19094	-	
125-218	19094-19095	-	
125-219	19095-19096	-	
125-220	19096-19097	-	
125-221	19097-19098	-	
125-222	19098-19099	-	
125-223	19099-19100	-	
125-224	19100-19101	-	
125-225	19101-19102	-	
125-226	19102-19103	-	
125-227	19103-19104	-	
125-228	19104-19105	+	
125-229	19105-19106	-	
125-230	19106-19107	-	
125-231	19107-19108	-	
125-232	19108-19109	-	
125-233	19109-19110	-	
125-234	19110-19111	-	
125-235	19111-19112	-	
125-236	19112-19113	-	
125-237	19113-19114	+	
125-238	19114-19115	-	
125-239	19115-19116	-	
125-240	19116-19117	-	
125-241	19117-19118	-	
125-242	19118-19119	-	
125-243	19119-19120	-	
125-244	19120-19121	-	
125-245	19121-19122	-	
125-246	19122-19123	-	
125-247	19123-19124	-	
125-248	19124-19125	-	
125-249	19125-19126	-	
125-250	19126-19127	-	
125-251	19127-19128	-	
125-252	19128-19129	-	
125-253	19129-19130	-	
125-254	19130-19131	-	
125-255	19131-19132	-	
125-256	19132-19133	-	
125-257	19133-19134	-	
125-258	19134-19135	-	
125-259	19135-19136	-	
125-260	19136-19137	-	
125-261	19137-19138	-	
125-262	19138-19139	-	
125-263	19139-19140	-	
125-264	19140-19141	-	
125-265	19141-19142	-	
125-266	19142-19143	-	
125-267	19143-19144	-	
125-268	19144-19145	-	
125-269	19145-19146	-	
125-270	19146-19147	-	
125-271	19147-19148	-	
125-272	19148-19149	-	
125-273	19149-19150	-	
125-274	19150-19151	-	
125-275	19151-19152	-	
125-276	19152-19153	-	
125-277	19153-19154	-	
125-278	19154-19155	-	
125-279	19155-19156	-	
125-280	19156-19157	-	
125-281	19157-19158	-	
125-282	19158-19159	-	
125-283	19159-19160	-	
125-284	19160-19161	-	
125-285	19161-19162	-	
125-286	19162-19163	-	
125-287	19163-19164	-	
125-288	19164-19165	-	
125-289	19165-19166	-	
125-290	19166-19167	-	
125-291	19167-19168	-	
125-292	19168-19169	-	
125-293	19169-19170	-	
125-294	19170-19171	-	
125-295	19171-19172	-	
125-296	19172-19173	-	
125-297	19173-19174	-	
125-298	19174-19175	-	
125-299	19175-19176	-	
125-300	19176-19177	-	
125-301	19177-19178	-	
125-302	19178-19179	-	
125-303	19179-19180	-	
125-304	19180-19181	-	
125-305	19181-19182	-	
125-306	19182-19183	-	
125-307	19183-19184	-	
125-308	19184-19185	-	
125-309	19185-19186	-	
125-310	19186-19187	-	
125-311	19187-19188	-	
125-312	19188-19189	-	
125-313	19189-19190	-	
125-314	19190-19191	-	
125-315	19191-19192	-	
125-316	19192-19193	-	
125-317	19193-19194	-	
125-318	19194-19195	-	
125-319	19195-19196	-	
125-320	19196-19197	-	
125-321	19197-19198	-	
125-322	19198-19199	-	
125-323	19199-19200	-	
125-324	19200-19201	-	
125-325	19201-19202	-	
125-326	19202-19203	-	
125-327	19203-19204	-	
125-328	19204-19205	-	
125-329	19205-19206	-	
125-330	19206-19207	-	
125-331	19207-19208	-	
125-332	19208-19209	-	
125-333	19209-19210	-	
125-334	19210-19211	-	
125-335	19211-19212	-	
125-336	19212-19213	-	
125-337	19213-19214	-	
125-338	19214-19215	-	
125-339	19215-19216	-	
125-340	19216-19217	-	
125-341	19217-19218	-	
125-342	19218-19219	-	
125-343	19219-19220	-	
125-344	19220-19221	-	
125-345	19221-19222	-	
125-346	19222-19223	-	
125-347	19223-19224	-	
125-348	19224-19225	-	
125-349	19225-19226	-	
125-350	19226-19227	-	
125-351	19227-19228	-	
125-352	19228-19229	-	
125-353	19229-19230	-	
125-354	19230-19231	-	
125-355	19231-19232	-	
125-356	19232-19233	-	
125-357	19233-19234	-	
125-358	19234-19235	-	
125-359	19235-19236	-	
125-360	19236-19237	-	
125-361	19237-19238	-	
125-362	19238-19239	-	
125-363	19239-19240	-	
125-364	19240-19241	-	
125-365	19241-19242	-	
125-366	19242-19243	-	
125-367	19243-19244	-	
125-368	19244-19245	-	
125-369	19245-19246	-	
125-370	19246-19247	-	
125-371	19247-19248	-	
125-372	19248-19249	-	
125-373	19249-19250	-	
125-374	19250-19251	-	
125-375	19251-19252	-	
125-376	19252-19253	-	
125-377	19253-19254	-	
125-378	19254-19255	-	
125-379	19255-19256	-	
125-380	19256-19257	-	
125-381	19257-19258	-	
125-382	19258-19259	-	
125-383	19259-19260	-	
125-384	19260-19261	-	
125-385	19261-19262	-	
125-386	19262-19263	-	
125-387	19263-19264	-	
125-388	19265-19266	-	
125-389	19266-19267	-	
125-390	19267-19268	-	
125-391	19268-19269	-	
125-392	19269-19270	-	
125-393	19270-19271	-	
125-394	19271-19272	-	
125-395	19272-19273	-	
125-396	19273-19274	-	
125-397	19274-19275	-	
125-398	19275-19276	-	
125-399	19276-19277	-	
125-400	19277-19278	-	
125-401	19278-19279	-	
125-402	19279-19280	-	
125-403	19280-19281	-	
125-404	19281-19282	-	
125-405	19282-19283	-	
125-406	19284-19291	1000005	
125-407	19292-19293	|	
125-408	19294-19309	XEI7xShT8bPu6H7	
125-409	19310-19311	|	
125-410	19312-19322	2kD5XJDZUF	
125-411	19323-19324	|	
125-412	19325-19326	0	
125-413	19327-19328	|	
125-414	19329-19330	{	
125-415	19330-19331	"	
125-416	19331-19335	tags	
125-417	19335-19336	"	
125-418	19336-19337	:	
125-419	19338-19339	{	
125-420	19339-19340	"	
125-421	19340-19348	nk455671	
125-422	19348-19349	"	
125-423	19349-19350	:	
125-424	19351-19352	{	
125-425	19352-19353	"	
125-426	19353-19361	ik937456	
125-427	19361-19362	"	
125-428	19362-19363	:	
125-429	19364-19365	"	
125-430	19365-19373	iv506075	
125-431	19373-19374	"	
125-432	19374-19375	}	
125-433	19375-19376	}	
125-434	19376-19377	,	
125-435	19378-19379	"	
125-436	19379-19386	braille	
125-437	19386-19387	"	
125-438	19387-19388	:	
125-439	19389-19393	true	
125-440	19393-19394	,	
125-441	19395-19396	"	
125-442	19396-19404	keywords	
125-443	19404-19405	"	
125-444	19405-19406	:	
125-445	19407-19408	[	
125-446	19408-19409	"	
125-447	19409-19412	abc	
125-448	19412-19413	"	
125-449	19413-19414	,	
125-450	19415-19416	"	
125-451	19416-19419	kef	
125-452	19419-19420	"	
125-453	19420-19421	,	
125-454	19422-19423	"	
125-455	19423-19426	keh	
125-456	19426-19427	"	
125-457	19427-19428	]	
125-458	19428-19429	,	
125-459	19430-19431	"	
125-460	19431-19440	hardcover	
125-461	19440-19441	"	
125-462	19441-19442	:	
125-463	19443-19448	false	
125-464	19448-19449	,	
125-465	19450-19451	"	
125-466	19451-19460	publisher	
125-467	19460-19461	"	
125-468	19461-19462	:	
125-469	19463-19464	"	
125-470	19464-19474	zSfZIAjGGs	
125-471	19474-19475	"	
125-472	19475-19476	,	
125-473	19477-19478	"	
125-474	19479-19491	criticrating	
125-475	19491-19492	"	
125-476	19492-19493	:	
125-477	19494-19495	4	
125-478	19495-19496	}	
125-479	19497-19498	(	
125-480	19498-19499	1	
125-481	19500-19503	row	
125-482	19503-19504	)	
125-483	19505-19509	demo	
125-484	19509-19510	=	
125-485	19510-19511	#	
125-486	19512-19519	explain	
125-487	19520-19526	select	
125-488	19527-19528	*	
125-489	19529-19533	from	
125-490	19534-19539	books	
125-491	19540-19545	where	
125-492	19546-19550	data	
125-493	19551-19552	@	
125-494	19552-19553	>	
125-495	19554-19555	'	
125-496	19555-19556	{	
125-497	19556-19557	"	
125-498	19557-19561	tags	
125-499	19561-19562	"	
125-500	19562-19563	:	
125-501	19563-19564	{	
125-502	19564-19565	"	
125-503	19565-19573	nk455671	
125-504	19573-19574	"	
125-505	19574-19575	:	
125-506	19575-19576	{	
125-507	19576-19577	"	
125-508	19577-19585	ik937456	
125-509	19585-19586	"	
125-510	19586-19587	:	
125-511	19587-19588	"	
125-512	19588-19596	iv506075	
125-513	19596-19597	"	
125-514	19597-19598	}	
125-515	19598-19599	}	
125-516	19599-19600	}	
125-517	19600-19601	'	
125-518	19601-19602	:	
125-519	19602-19603	:	
125-520	19603-19608	jsonb	
125-521	19608-19609	;	
125-522	19610-19615	QUERY	
125-523	19616-19620	PLAN	
125-524	19621-19622	-	
125-525	19622-19623	-	
125-526	19623-19624	-	
125-527	19624-19625	-	
125-528	19625-19626	-	
125-529	19626-19627	-	
125-530	19627-19628	-	
125-531	19628-19629	-	
125-532	19629-19630	-	
125-533	19630-19631	-	
125-534	19631-19632	-	
125-535	19632-19633	-	
125-536	19633-19634	-	
125-537	19634-19635	-	
125-538	19635-19636	-	
125-539	19636-19637	-	
125-540	19637-19638	-	
125-541	19638-19639	-	
125-542	19639-19640	-	
125-543	19640-19641	-	
125-544	19641-19642	-	
125-545	19642-19643	-	
125-546	19643-19644	-	
125-547	19644-19645	-	
125-548	19645-19646	-	
125-549	19646-19647	-	
125-550	19647-19648	-	
125-551	19648-19649	-	
125-552	19649-19650	-	
125-553	19650-19651	-	
125-554	19651-19652	-	
125-555	19652-19653	-	
125-556	19653-19654	-	
125-557	19654-19655	-	
125-558	19655-19656	-	
125-559	19656-19657	-	
125-560	19657-19658	-	
125-561	19658-19659	-	
125-562	19659-19660	-	
125-563	19660-19661	-	
125-564	19661-19662	-	
125-565	19662-19663	-	
125-566	19663-19664	-	
125-567	19664-19665	-	
125-568	19665-19666	-	
125-569	19666-19667	-	
125-570	19667-19668	-	
125-571	19668-19669	-	
125-572	19669-19670	-	
125-573	19670-19671	-	
125-574	19671-19672	-	
125-575	19672-19673	-	
125-576	19673-19674	-	
125-577	19674-19675	-	
125-578	19675-19676	-	
125-579	19676-19677	-	
125-580	19677-19678	-	
125-581	19678-19679	-	
125-582	19679-19680	-	
125-583	19680-19681	-	
125-584	19681-19682	-	
125-585	19682-19683	-	
125-586	19683-19684	-	
125-587	19684-19685	-	
125-588	19685-19686	-	
125-589	19686-19687	-	
125-590	19687-19688	-	
125-591	19688-19689	-	
125-592	19689-19690	-	
125-593	19690-19691	-	
125-594	19691-19692	-	
125-595	19692-19693	-	
125-596	19693-19694	-	
125-597	19694-19695	-	
125-598	19695-19696	-	
125-599	19696-19697	-	
125-600	19697-19698	-	
125-601	19698-19699	-	
125-602	19699-19700	-	
125-603	19700-19701	-	
125-604	19701-19702	-	
125-605	19702-19703	-	
125-606	19703-19704	-	
125-607	19704-19705	-	
125-608	19705-19706	-	
125-609	19706-19707	-	
125-610	19707-19708	-	
125-611	19708-19709	-	
125-612	19709-19710	-	
125-613	19711-19717	Bitmap	
125-614	19718-19722	Heap	
125-615	19723-19727	Scan	
125-616	19728-19730	on	
125-617	19731-19736	books	
125-618	19737-19738	(	
125-619	19738-19742	cost	
125-620	19742-19743	=	
125-621	19743-19748	12.75	
125-622	19748-19749	.	
125-623	19749-19757	.1005.25	
125-624	19758-19762	rows	
125-625	19762-19763	=	
125-626	19763-19767	1000	
125-627	19768-19773	width	
125-628	19773-19774	=	
125-629	19774-19777	158	
125-630	19777-19778	)	
125-631	19779-19786	Recheck	
125-632	19787-19791	Cond	
125-633	19791-19792	:	
125-634	19793-19794	(	
125-635	19794-19798	data	
125-636	19799-19800	@	
125-637	19800-19801	>	
125-638	19802-19803	'	
125-639	19803-19804	{	
125-640	19804-19805	"	
125-641	19805-19809	tags	
125-642	19809-19810	"	
125-643	19810-19811	:	
125-644	19812-19813	{	
125-645	19813-19814	"	
125-646	19814-19822	nk455671	
125-647	19822-19823	"	
125-648	19823-19824	:	
125-649	19825-19826	{	
125-650	19826-19827	"	
125-651	19827-19835	ik937456	
125-652	19835-19836	"	
125-653	19836-19837	:	
125-654	19838-19839	"	
125-655	19839-19847	iv506075	
125-656	19847-19848	"	
125-657	19848-19849	}	
125-658	19849-19850	}	
125-659	19850-19851	}	
125-660	19851-19852	'	
125-661	19852-19853	:	
125-662	19853-19854	:	
125-663	19854-19859	jsonb	
125-664	19859-19860	)	
125-665	19861-19862	-	
125-666	19862-19863	>	
125-667	19864-19870	Bitmap	
125-668	19871-19876	Index	
125-669	19877-19881	Scan	
125-670	19882-19884	on	
125-671	19885-19899	dataginpathops	
125-672	19900-19901	(	
125-673	19901-19905	cost	
125-674	19905-19906	=	
125-675	19906-19910	0.00	
125-676	19910-19911	.	
125-677	19911-19917	.12.50	
125-678	19918-19922	rows	
125-679	19922-19923	=	
125-680	19923-19927	1000	
125-681	19928-19933	width	
125-682	19933-19934	=	
125-683	19934-19935	0	
125-684	19935-19936	)	
125-685	19937-19942	Index	
125-686	19943-19947	Cond	
125-687	19947-19948	:	
125-688	19949-19950	(	
125-689	19950-19954	data	
125-690	19955-19956	@	
125-691	19956-19957	>	
125-692	19958-19959	'	
125-693	19959-19960	{	
125-694	19960-19961	"	
125-695	19961-19965	tags	
125-696	19965-19966	"	
125-697	19966-19967	:	
125-698	19968-19969	{	
125-699	19969-19970	"	
125-700	19970-19978	nk455671	
125-701	19978-19979	"	
125-702	19979-19980	:	
125-703	19981-19982	{	
125-704	19982-19983	"	
125-705	19983-19991	ik937456	
125-706	19991-19992	"	
125-707	19992-19993	:	
125-708	19994-19995	"	
125-709	19995-20003	iv506075	
125-710	20003-20004	"	
125-711	20004-20005	}	
125-712	20005-20006	}	
125-713	20006-20007	}	
125-714	20007-20008	'	
125-715	20008-20009	:	
125-716	20009-20010	:	
125-717	20010-20015	jsonb	
125-718	20015-20016	)	
125-719	20017-20018	(	
125-720	20018-20019	4	
125-721	20020-20024	rows	
125-722	20024-20025	)	
125-723	20026-20033	However	
125-724	20033-20034	,	
125-725	20035-20037	as	
125-726	20038-20047	mentioned	
125-727	20048-20053	above	
125-728	20053-20054	,	
125-729	20055-20058	the	
125-730	20059-20060	“	
125-731	20060-20067	pathops	
125-732	20067-20068	”	
125-733	20069-20075	option	
125-734	20076-20080	does	
125-735	20081-20084	not	
125-736	20085-20092	support	
125-737	20093-20096	all	
125-738	20097-20099	of	
125-739	20100-20103	the	
125-740	20104-20113	scenarios	
125-741	20114-20118	that	
125-742	20119-20122	the	
125-743	20123-20130	default	
125-744	20131-20139	operator	
125-745	20140-20145	class	
125-746	20146-20154	supports	
125-747	20154-20155	.	

#Text=With a “pathops” GIN index, all these queries are not able to leverage the GIN index.
126-1	20156-20160	With	
126-2	20161-20162	a	
126-3	20163-20164	“	
126-4	20164-20171	pathops	
126-5	20171-20172	”	
126-6	20173-20176	GIN	
126-7	20177-20182	index	
126-8	20182-20183	,	
126-9	20184-20187	all	
126-10	20188-20193	these	
126-11	20194-20201	queries	
126-12	20202-20205	are	
126-13	20206-20209	not	
126-14	20210-20214	able	
126-15	20215-20217	to	
126-16	20218-20226	leverage	
126-17	20227-20230	the	
126-18	20231-20234	GIN	
126-19	20235-20240	index	
126-20	20240-20241	.	

#Text=To summarize, you have a smaller index but it supports a more limited use case.
#Text=select * from books where data ?
127-1	20242-20244	To	
127-2	20245-20254	summarize	
127-3	20254-20255	,	
127-4	20256-20259	you	
127-5	20260-20264	have	
127-6	20265-20266	a	
127-7	20267-20274	smaller	
127-8	20275-20280	index	
127-9	20281-20284	but	
127-10	20285-20287	it	
127-11	20288-20296	supports	
127-12	20297-20298	a	
127-13	20299-20303	more	
127-14	20304-20311	limited	
127-15	20312-20315	use	
127-16	20316-20320	case	
127-17	20320-20321	.	
127-18	20322-20328	select	
127-19	20329-20330	*	
127-20	20331-20335	from	
127-21	20336-20341	books	
127-22	20342-20347	where	
127-23	20348-20352	data	
127-24	20353-20354	?	

#Text='tags'; => Sequential scan
#Text=select * from books where data @> '{"tags" :{}}'; => Sequential scan
#Text=select * from books where data @> '{"tags" :{"k7888":{}}}' => Sequential scan
#Text=B-Tree indexes
#Text=B-tree indexes are the most common index type in relational databases.
128-1	20355-20356	'	
128-2	20356-20360	tags	
128-3	20360-20361	'	
128-4	20361-20362	;	
128-5	20363-20364	=	
128-6	20364-20365	>	
128-7	20366-20376	Sequential	
128-8	20377-20381	scan	
128-9	20382-20388	select	
128-10	20389-20390	*	
128-11	20391-20395	from	
128-12	20396-20401	books	
128-13	20402-20407	where	
128-14	20408-20412	data	
128-15	20413-20414	@	
128-16	20414-20415	>	
128-17	20416-20417	'	
128-18	20417-20418	{	
128-19	20418-20419	"	
128-20	20419-20423	tags	
128-21	20423-20424	"	
128-22	20425-20426	:	
128-23	20426-20427	{	
128-24	20427-20428	}	
128-25	20428-20429	}	
128-26	20429-20430	'	
128-27	20430-20431	;	
128-28	20432-20433	=	
128-29	20433-20434	>	
128-30	20435-20445	Sequential	
128-31	20446-20450	scan	
128-32	20451-20457	select	
128-33	20458-20459	*	
128-34	20460-20464	from	
128-35	20465-20470	books	
128-36	20471-20476	where	
128-37	20477-20481	data	
128-38	20482-20483	@	
128-39	20483-20484	>	
128-40	20485-20486	'	
128-41	20486-20487	{	
128-42	20487-20488	"	
128-43	20488-20492	tags	
128-44	20492-20493	"	
128-45	20494-20495	:	
128-46	20495-20496	{	
128-47	20496-20497	"	
128-48	20497-20502	k7888	
128-49	20502-20503	"	
128-50	20503-20504	:	
128-51	20504-20505	{	
128-52	20505-20506	}	
128-53	20506-20507	}	
128-54	20507-20508	}	
128-55	20508-20509	'	
128-56	20510-20511	=	
128-57	20511-20512	>	
128-58	20513-20523	Sequential	
128-59	20524-20528	scan	
128-60	20529-20535	B-Tree	
128-61	20536-20543	indexes	
128-62	20544-20550	B-tree	
128-63	20551-20558	indexes	
128-64	20559-20562	are	
128-65	20563-20566	the	
128-66	20567-20571	most	
128-67	20572-20578	common	
128-68	20579-20584	index	
128-69	20585-20589	type	
128-70	20590-20592	in	
128-71	20593-20603	relational	
128-72	20604-20613	databases	
128-73	20613-20614	.	

#Text=However, if you index an entire JSONB column with a B-tree index, the only useful operators are “=”, <, <=, >, >=.
129-1	20615-20622	However	
129-2	20622-20623	,	
129-3	20624-20626	if	
129-4	20627-20630	you	
129-5	20631-20636	index	
129-6	20637-20639	an	
129-7	20640-20646	entire	
129-8	20647-20652	JSONB	
129-9	20653-20659	column	
129-10	20660-20664	with	
129-11	20665-20666	a	
129-12	20666-20667	 	
129-13	20667-20673	B-tree	
129-14	20674-20679	index	
129-15	20679-20680	,	
129-16	20681-20684	the	
129-17	20685-20689	only	
129-18	20690-20696	useful	
129-19	20697-20706	operators	
129-20	20707-20710	are	
129-21	20711-20712	“	
129-22	20712-20713	=	
129-23	20713-20714	”	
129-24	20714-20715	,	
129-25	20716-20717	<	
129-26	20717-20718	,	
129-27	20719-20720	<	
129-28	20720-20721	=	
129-29	20721-20722	,	
129-30	20723-20724	>	
129-31	20724-20725	,	
129-32	20726-20727	>	
129-33	20727-20728	=	
129-34	20728-20729	.	

#Text=Essentially, this can only be used for whole object comparisons, which has a very limited use case.
130-1	20730-20741	Essentially	
130-2	20741-20742	,	
130-3	20743-20747	this	
130-4	20748-20751	can	
130-5	20752-20756	only	
130-6	20757-20759	be	
130-7	20760-20764	used	
130-8	20765-20768	for	
130-9	20769-20774	whole	
130-10	20775-20781	object	
130-11	20782-20793	comparisons	
130-12	20793-20794	,	
130-13	20795-20800	which	
130-14	20801-20804	has	
130-15	20805-20806	a	
130-16	20807-20811	very	
130-17	20812-20819	limited	
130-18	20820-20823	use	
130-19	20824-20828	case	
130-20	20828-20829	.	

#Text=A more common scenario is to use B-tree “expression indexes”.
131-1	20830-20831	A	
131-2	20832-20836	more	
131-3	20837-20843	common	
131-4	20844-20852	scenario	
131-5	20853-20855	is	
131-6	20856-20858	to	
131-7	20859-20862	use	
131-8	20862-20863	 	
131-9	20863-20869	B-tree	
131-10	20870-20871	“	
131-11	20871-20881	expression	
131-12	20882-20889	indexes	
131-13	20889-20890	”	
131-14	20890-20891	.	

#Text=For a primer, refer here – Indexes on Expressions. 
132-1	20892-20895	For	
132-2	20896-20897	a	
132-3	20898-20904	primer	
132-4	20904-20905	,	
132-5	20906-20911	refer	
132-6	20912-20916	here	
132-7	20917-20918	–	
132-8	20919-20926	Indexes	
132-9	20927-20929	on	
132-10	20930-20941	Expressions	
132-11	20941-20942	.	
132-12	20942-20943	 	

#Text=B-tree expression indexes can support the common comparison operators ‘=’, ‘<’, ‘>’, ‘>=’, ‘<=’.
133-1	20943-20949	B-tree	
133-2	20950-20960	expression	
133-3	20961-20968	indexes	
133-4	20969-20972	can	
133-5	20973-20980	support	
133-6	20981-20984	the	
133-7	20985-20991	common	
133-8	20992-21002	comparison	
133-9	21003-21012	operators	
133-10	21013-21014	‘	
133-11	21014-21015	=	
133-12	21015-21016	’	
133-13	21016-21017	,	
133-14	21018-21019	‘	
133-15	21019-21020	<	
133-16	21020-21021	’	
133-17	21021-21022	,	
133-18	21023-21024	‘	
133-19	21024-21025	>	
133-20	21025-21026	’	
133-21	21026-21027	,	
133-22	21028-21029	‘	
133-23	21029-21030	>	
133-24	21030-21031	=	
133-25	21031-21032	’	
133-26	21032-21033	,	
133-27	21034-21035	‘	
133-28	21035-21036	<	
133-29	21036-21037	=	
133-30	21037-21038	’	
133-31	21038-21039	.	

#Text=As you might recall, GIN indexes don’t support these operators.
134-1	21040-21042	As	
134-2	21043-21046	you	
134-3	21047-21052	might	
134-4	21053-21059	recall	
134-5	21059-21060	,	
134-6	21061-21064	GIN	
134-7	21065-21072	indexes	
134-8	21073-21076	don	
134-9	21076-21077	’	
134-10	21077-21078	t	
134-11	21079-21086	support	
134-12	21087-21092	these	
134-13	21093-21102	operators	
134-14	21102-21103	.	

#Text=Let’s consider the case when we want to retrieve all books with a data->criticrating > 4.
135-1	21104-21107	Let	
135-2	21107-21108	’	
135-3	21108-21109	s	
135-4	21110-21118	consider	
135-5	21119-21122	the	
135-6	21123-21127	case	
135-7	21128-21132	when	
135-8	21133-21135	we	
135-9	21136-21140	want	
135-10	21141-21143	to	
135-11	21144-21152	retrieve	
135-12	21153-21156	all	
135-13	21157-21162	books	
135-14	21163-21167	with	
135-15	21168-21169	a	
135-16	21170-21174	data	
135-17	21174-21175	-	
135-18	21175-21176	>	
135-19	21176-21188	criticrating	
135-20	21189-21190	>	
135-21	21191-21192	4	
135-22	21192-21193	.	

#Text=So, you would build a query something like this:
#Text=demo=# select * from books where data->'criticrating' > 4;
#Text=ERROR: operator does not exist: jsonb >= integer
#Text=LINE 1: select * from books where data->'criticrating'
#Text=>= 4;
#Text=HINT: No operator matches the given name and argument types.
136-1	21194-21196	So	
136-2	21196-21197	,	
136-3	21198-21201	you	
136-4	21202-21207	would	
136-5	21208-21213	build	
136-6	21214-21215	a	
136-7	21216-21221	query	
136-8	21222-21231	something	
136-9	21232-21236	like	
136-10	21237-21241	this	
136-11	21241-21242	:	
136-12	21243-21247	demo	
136-13	21247-21248	=	
136-14	21248-21249	#	
136-15	21250-21256	select	
136-16	21257-21258	*	
136-17	21259-21263	from	
136-18	21264-21269	books	
136-19	21270-21275	where	
136-20	21276-21280	data	
136-21	21280-21281	-	
136-22	21281-21282	>	
136-23	21282-21283	'	
136-24	21283-21295	criticrating	
136-25	21295-21296	'	
136-26	21297-21298	>	
136-27	21299-21300	4	
136-28	21300-21301	;	
136-29	21302-21307	ERROR	
136-30	21307-21308	:	
136-31	21309-21317	operator	
136-32	21318-21322	does	
136-33	21323-21326	not	
136-34	21327-21332	exist	
136-35	21332-21333	:	
136-36	21334-21339	jsonb	
136-37	21340-21341	>	
136-38	21341-21342	=	
136-39	21343-21350	integer	
136-40	21351-21355	LINE	
136-41	21356-21357	1	
136-42	21357-21358	:	
136-43	21359-21365	select	
136-44	21366-21367	*	
136-45	21368-21372	from	
136-46	21373-21378	books	
136-47	21379-21384	where	
136-48	21385-21389	data	
136-49	21389-21390	-	
136-50	21390-21391	>	
136-51	21391-21392	'	
136-52	21392-21404	criticrating	
136-53	21404-21405	'	
136-54	21406-21407	>	
136-55	21407-21408	=	
136-56	21409-21410	4	
136-57	21410-21411	;	
136-58	21412-21416	HINT	
136-59	21416-21417	:	
136-60	21418-21420	No	
136-61	21421-21429	operator	
136-62	21430-21437	matches	
136-63	21438-21441	the	
136-64	21442-21447	given	
136-65	21448-21452	name	
136-66	21453-21456	and	
136-67	21457-21465	argument	
136-68	21466-21471	types	
136-69	21471-21472	.	

#Text=You might need to add explicit type casts.
137-1	21473-21476	You	
137-2	21477-21482	might	
137-3	21483-21487	need	
137-4	21488-21490	to	
137-5	21491-21494	add	
137-6	21495-21503	explicit	
137-7	21504-21508	type	
137-8	21509-21514	casts	
137-9	21514-21515	.	

#Text=Well, that doesn’t work since the ‘->’ operator returns a JSONB type.
138-1	21516-21520	Well	
138-2	21520-21521	,	
138-3	21522-21526	that	
138-4	21527-21532	doesn	
138-5	21532-21533	’	
138-6	21533-21534	t	
138-7	21535-21539	work	
138-8	21540-21545	since	
138-9	21546-21549	the	
138-10	21550-21551	‘	
138-11	21551-21552	-	
138-12	21552-21553	>	
138-13	21553-21554	’	
138-14	21555-21563	operator	
138-15	21564-21571	returns	
138-16	21572-21573	a	
138-17	21573-21574	 	
138-18	21574-21579	JSONB	
138-19	21580-21584	type	
138-20	21584-21585	.	

#Text=So we need to use something like this:
#Text=demo=# select * from books where (data->'criticrating')::int4 > 4;
#Text=If you’re using a version prior to PostgreSQL 11, it gets more ugly.
139-1	21586-21588	So	
139-2	21589-21591	we	
139-3	21592-21596	need	
139-4	21597-21599	to	
139-5	21600-21603	use	
139-6	21604-21613	something	
139-7	21614-21618	like	
139-8	21619-21623	this	
139-9	21623-21624	:	
139-10	21625-21629	demo	
139-11	21629-21630	=	
139-12	21630-21631	#	
139-13	21632-21638	select	
139-14	21639-21640	*	
139-15	21641-21645	from	
139-16	21646-21651	books	
139-17	21652-21657	where	
139-18	21658-21659	(	
139-19	21659-21663	data	
139-20	21663-21664	-	
139-21	21664-21665	>	
139-22	21665-21666	'	
139-23	21666-21678	criticrating	
139-24	21678-21679	'	
139-25	21679-21680	)	
139-26	21680-21681	:	
139-27	21681-21682	:	
139-28	21682-21686	int4	
139-29	21687-21688	>	
139-30	21689-21690	4	
139-31	21690-21691	;	
139-32	21692-21694	If	
139-33	21695-21698	you	
139-34	21698-21699	’	
139-35	21699-21701	re	
139-36	21702-21707	using	
139-37	21708-21709	a	
139-38	21710-21717	version	
139-39	21718-21723	prior	
139-40	21724-21726	to	
139-41	21727-21737	PostgreSQL	
139-42	21738-21740	11	
139-43	21740-21741	,	
139-44	21742-21744	it	
139-45	21745-21749	gets	
139-46	21750-21754	more	
139-47	21755-21759	ugly	
139-48	21759-21760	.	

#Text=You need to first query as text and then cast it to integer:
#Text=demo=# select * from books where (data->'criticrating')::int4 > 4;
#Text=For expression indexes, the index needs to be an exact match with the query expression.
140-1	21761-21764	You	
140-2	21765-21769	need	
140-3	21770-21772	to	
140-4	21773-21778	first	
140-5	21779-21784	query	
140-6	21785-21787	as	
140-7	21788-21792	text	
140-8	21793-21796	and	
140-9	21797-21801	then	
140-10	21802-21806	cast	
140-11	21807-21809	it	
140-12	21810-21812	to	
140-13	21813-21820	integer	
140-14	21820-21821	:	
140-15	21822-21826	demo	
140-16	21826-21827	=	
140-17	21827-21828	#	
140-18	21829-21835	select	
140-19	21836-21837	*	
140-20	21838-21842	from	
140-21	21843-21848	books	
140-22	21849-21854	where	
140-23	21855-21856	(	
140-24	21856-21860	data	
140-25	21860-21861	-	
140-26	21861-21862	>	
140-27	21862-21863	'	
140-28	21863-21875	criticrating	
140-29	21875-21876	'	
140-30	21876-21877	)	
140-31	21877-21878	:	
140-32	21878-21879	:	
140-33	21879-21883	int4	
140-34	21884-21885	>	
140-35	21886-21887	4	
140-36	21887-21888	;	
140-37	21889-21892	For	
140-38	21893-21903	expression	
140-39	21904-21911	indexes	
140-40	21911-21912	,	
140-41	21913-21916	the	
140-42	21917-21922	index	
140-43	21923-21928	needs	
140-44	21929-21931	to	
140-45	21932-21934	be	
140-46	21935-21937	an	
140-47	21938-21943	exact	
140-48	21944-21949	match	
140-49	21950-21954	with	
140-50	21955-21958	the	
140-51	21959-21964	query	
140-52	21965-21975	expression	
140-53	21975-21976	.	

#Text=So, our index would look something like this:
#Text=demo=# CREATE INDEX criticrating ON books USING BTREE (((data->'criticrating')::int4));
#Text=CREATE INDEX
#Text=demo=# explain analyze select * from books where (data->'criticrating')::int4 = 3;
#Text=QUERY PLAN
#Text=----------------------------------------------------------------------------------------------------------------------------------
#Text=Index Scan using criticrating on books (cost=0.42..4626.93 rows=5000 width=158) (actual time=0.069..70.221 rows=199883 loops=1)
#Text=Index Cond: (((data -> 'criticrating'::text))::integer = 3)
#Text=Planning Time: 0.103 ms
#Text=Execution Time: 79.019 ms
#Text=(4 rows)
#Text=demo=# explain analyze select * from books where (data->'criticrating')::int4 = 3;
#Text=QUERY PLAN
#Text=----------------------------------------------------------------------------------------------------------------------------------
#Text=Index Scan using criticrating on books (cost=0.42..4626.93 rows=5000 width=158) (actual time=0.069..70.221 rows=199883 loops=1)
#Text=Index Cond: (((data -> 'criticrating'::text))::integer = 3)
#Text=Planning Time: 0.103 ms
#Text=Execution Time: 79.019 ms
#Text=(4 rows)
#Text=From above we can see that the BTREE index is being used as expected.
141-1	21977-21979	So	
141-2	21979-21980	,	
141-3	21981-21984	our	
141-4	21985-21990	index	
141-5	21991-21996	would	
141-6	21997-22001	look	
141-7	22002-22011	something	
141-8	22012-22016	like	
141-9	22017-22021	this	
141-10	22021-22022	:	
141-11	22023-22027	demo	
141-12	22027-22028	=	
141-13	22028-22029	#	
141-14	22030-22036	CREATE	
141-15	22037-22042	INDEX	
141-16	22043-22055	criticrating	
141-17	22056-22058	ON	
141-18	22059-22064	books	
141-19	22065-22070	USING	
141-20	22071-22076	BTREE	
141-21	22077-22078	(	
141-22	22078-22079	(	
141-23	22079-22080	(	
141-24	22080-22084	data	
141-25	22084-22085	-	
141-26	22085-22086	>	
141-27	22086-22087	'	
141-28	22087-22099	criticrating	
141-29	22099-22100	'	
141-30	22100-22101	)	
141-31	22101-22102	:	
141-32	22102-22103	:	
141-33	22103-22107	int4	
141-34	22107-22108	)	
141-35	22108-22109	)	
141-36	22109-22110	;	
141-37	22111-22117	CREATE	
141-38	22118-22123	INDEX	
141-39	22124-22128	demo	
141-40	22128-22129	=	
141-41	22129-22130	#	
141-42	22131-22138	explain	
141-43	22139-22146	analyze	
141-44	22147-22153	select	
141-45	22154-22155	*	
141-46	22156-22160	from	
141-47	22161-22166	books	
141-48	22167-22172	where	
141-49	22173-22174	(	
141-50	22174-22178	data	
141-51	22178-22179	-	
141-52	22179-22180	>	
141-53	22180-22181	'	
141-54	22181-22193	criticrating	
141-55	22193-22194	'	
141-56	22194-22195	)	
141-57	22195-22196	:	
141-58	22196-22197	:	
141-59	22197-22201	int4	
141-60	22202-22203	=	
141-61	22204-22205	3	
141-62	22205-22206	;	
141-63	22207-22212	QUERY	
141-64	22213-22217	PLAN	
141-65	22218-22219	-	
141-66	22219-22220	-	
141-67	22220-22221	-	
141-68	22221-22222	-	
141-69	22222-22223	-	
141-70	22223-22224	-	
141-71	22224-22225	-	
141-72	22225-22226	-	
141-73	22226-22227	-	
141-74	22227-22228	-	
141-75	22228-22229	-	
141-76	22229-22230	-	
141-77	22230-22231	-	
141-78	22231-22232	-	
141-79	22232-22233	-	
141-80	22233-22234	-	
141-81	22234-22235	-	
141-82	22235-22236	-	
141-83	22236-22237	-	
141-84	22237-22238	-	
141-85	22238-22239	-	
141-86	22239-22240	-	
141-87	22240-22241	-	
141-88	22241-22242	-	
141-89	22242-22243	-	
141-90	22243-22244	-	
141-91	22244-22245	-	
141-92	22245-22246	-	
141-93	22246-22247	-	
141-94	22247-22248	-	
141-95	22248-22249	-	
141-96	22249-22250	-	
141-97	22250-22251	-	
141-98	22251-22252	-	
141-99	22252-22253	-	
141-100	22253-22254	-	
141-101	22254-22255	-	
141-102	22255-22256	-	
141-103	22256-22257	-	
141-104	22257-22258	-	
141-105	22258-22259	-	
141-106	22259-22260	-	
141-107	22260-22261	-	
141-108	22261-22262	-	
141-109	22262-22263	-	
141-110	22263-22264	-	
141-111	22264-22265	-	
141-112	22265-22266	-	
141-113	22266-22267	-	
141-114	22267-22268	-	
141-115	22268-22269	-	
141-116	22269-22270	-	
141-117	22270-22271	-	
141-118	22271-22272	-	
141-119	22272-22273	-	
141-120	22273-22274	-	
141-121	22274-22275	-	
141-122	22275-22276	-	
141-123	22276-22277	-	
141-124	22277-22278	-	
141-125	22278-22279	-	
141-126	22279-22280	-	
141-127	22280-22281	-	
141-128	22281-22282	-	
141-129	22282-22283	-	
141-130	22283-22284	-	
141-131	22284-22285	-	
141-132	22285-22286	-	
141-133	22286-22287	-	
141-134	22287-22288	-	
141-135	22288-22289	-	
141-136	22289-22290	-	
141-137	22290-22291	-	
141-138	22291-22292	-	
141-139	22292-22293	-	
141-140	22293-22294	-	
141-141	22294-22295	-	
141-142	22295-22296	-	
141-143	22296-22297	-	
141-144	22297-22298	-	
141-145	22298-22299	-	
141-146	22299-22300	-	
141-147	22300-22301	-	
141-148	22301-22302	-	
141-149	22302-22303	-	
141-150	22303-22304	-	
141-151	22304-22305	-	
141-152	22305-22306	-	
141-153	22306-22307	-	
141-154	22307-22308	-	
141-155	22308-22309	-	
141-156	22309-22310	-	
141-157	22310-22311	-	
141-158	22311-22312	-	
141-159	22312-22313	-	
141-160	22313-22314	-	
141-161	22314-22315	-	
141-162	22315-22316	-	
141-163	22316-22317	-	
141-164	22317-22318	-	
141-165	22318-22319	-	
141-166	22319-22320	-	
141-167	22320-22321	-	
141-168	22321-22322	-	
141-169	22322-22323	-	
141-170	22323-22324	-	
141-171	22324-22325	-	
141-172	22325-22326	-	
141-173	22326-22327	-	
141-174	22327-22328	-	
141-175	22328-22329	-	
141-176	22329-22330	-	
141-177	22330-22331	-	
141-178	22331-22332	-	
141-179	22332-22333	-	
141-180	22333-22334	-	
141-181	22334-22335	-	
141-182	22335-22336	-	
141-183	22336-22337	-	
141-184	22337-22338	-	
141-185	22338-22339	-	
141-186	22339-22340	-	
141-187	22340-22341	-	
141-188	22341-22342	-	
141-189	22342-22343	-	
141-190	22343-22344	-	
141-191	22344-22345	-	
141-192	22345-22346	-	
141-193	22346-22347	-	
141-194	22347-22348	-	
141-195	22349-22354	Index	
141-196	22355-22359	Scan	
141-197	22360-22365	using	
141-198	22366-22378	criticrating	
141-199	22379-22381	on	
141-200	22382-22387	books	
141-201	22388-22389	(	
141-202	22389-22393	cost	
141-203	22393-22394	=	
141-204	22394-22398	0.42	
141-205	22398-22399	.	
141-206	22399-22407	.4626.93	
141-207	22408-22412	rows	
141-208	22412-22413	=	
141-209	22413-22417	5000	
141-210	22418-22423	width	
141-211	22423-22424	=	
141-212	22424-22427	158	
141-213	22427-22428	)	
141-214	22429-22430	(	
141-215	22430-22436	actual	
141-216	22437-22441	time	
141-217	22441-22442	=	
141-218	22442-22447	0.069	
141-219	22447-22448	.	
141-220	22448-22455	.70.221	
141-221	22456-22460	rows	
141-222	22460-22461	=	
141-223	22461-22467	199883	
141-224	22468-22473	loops	
141-225	22473-22474	=	
141-226	22474-22475	1	
141-227	22475-22476	)	
141-228	22477-22482	Index	
141-229	22483-22487	Cond	
141-230	22487-22488	:	
141-231	22489-22490	(	
141-232	22490-22491	(	
141-233	22491-22492	(	
141-234	22492-22496	data	
141-235	22497-22498	-	
141-236	22498-22499	>	
141-237	22500-22501	'	
141-238	22501-22513	criticrating	
141-239	22513-22514	'	
141-240	22514-22515	:	
141-241	22515-22516	:	
141-242	22516-22520	text	
141-243	22520-22521	)	
141-244	22521-22522	)	
141-245	22522-22523	:	
141-246	22523-22524	:	
141-247	22524-22531	integer	
141-248	22532-22533	=	
141-249	22534-22535	3	
141-250	22535-22536	)	
141-251	22537-22545	Planning	
141-252	22546-22550	Time	
141-253	22550-22551	:	
141-254	22552-22557	0.103	
141-255	22558-22560	ms	
141-256	22561-22570	Execution	
141-257	22571-22575	Time	
141-258	22575-22576	:	
141-259	22577-22583	79.019	
141-260	22584-22586	ms	
141-261	22587-22588	(	
141-262	22588-22589	4	
141-263	22590-22594	rows	
141-264	22594-22595	)	
141-265	22596-22600	demo	
141-266	22600-22601	=	
141-267	22601-22602	#	
141-268	22603-22610	explain	
141-269	22611-22618	analyze	
141-270	22619-22625	select	
141-271	22626-22627	*	
141-272	22628-22632	from	
141-273	22633-22638	books	
141-274	22639-22644	where	
141-275	22645-22646	(	
141-276	22646-22650	data	
141-277	22650-22651	-	
141-278	22651-22652	>	
141-279	22652-22653	'	
141-280	22653-22665	criticrating	
141-281	22665-22666	'	
141-282	22666-22667	)	
141-283	22667-22668	:	
141-284	22668-22669	:	
141-285	22669-22673	int4	
141-286	22674-22675	=	
141-287	22676-22677	3	
141-288	22677-22678	;	
141-289	22679-22684	QUERY	
141-290	22685-22689	PLAN	
141-291	22690-22691	-	
141-292	22691-22692	-	
141-293	22692-22693	-	
141-294	22693-22694	-	
141-295	22694-22695	-	
141-296	22695-22696	-	
141-297	22696-22697	-	
141-298	22697-22698	-	
141-299	22698-22699	-	
141-300	22699-22700	-	
141-301	22700-22701	-	
141-302	22701-22702	-	
141-303	22702-22703	-	
141-304	22703-22704	-	
141-305	22704-22705	-	
141-306	22705-22706	-	
141-307	22706-22707	-	
141-308	22707-22708	-	
141-309	22708-22709	-	
141-310	22709-22710	-	
141-311	22710-22711	-	
141-312	22711-22712	-	
141-313	22712-22713	-	
141-314	22713-22714	-	
141-315	22714-22715	-	
141-316	22715-22716	-	
141-317	22716-22717	-	
141-318	22717-22718	-	
141-319	22718-22719	-	
141-320	22719-22720	-	
141-321	22720-22721	-	
141-322	22721-22722	-	
141-323	22722-22723	-	
141-324	22723-22724	-	
141-325	22724-22725	-	
141-326	22725-22726	-	
141-327	22726-22727	-	
141-328	22727-22728	-	
141-329	22728-22729	-	
141-330	22729-22730	-	
141-331	22730-22731	-	
141-332	22731-22732	-	
141-333	22732-22733	-	
141-334	22733-22734	-	
141-335	22734-22735	-	
141-336	22735-22736	-	
141-337	22736-22737	-	
141-338	22737-22738	-	
141-339	22738-22739	-	
141-340	22739-22740	-	
141-341	22740-22741	-	
141-342	22741-22742	-	
141-343	22742-22743	-	
141-344	22743-22744	-	
141-345	22744-22745	-	
141-346	22745-22746	-	
141-347	22746-22747	-	
141-348	22747-22748	-	
141-349	22748-22749	-	
141-350	22749-22750	-	
141-351	22750-22751	-	
141-352	22751-22752	-	
141-353	22752-22753	-	
141-354	22753-22754	-	
141-355	22754-22755	-	
141-356	22755-22756	-	
141-357	22756-22757	-	
141-358	22757-22758	-	
141-359	22758-22759	-	
141-360	22759-22760	-	
141-361	22760-22761	-	
141-362	22761-22762	-	
141-363	22762-22763	-	
141-364	22763-22764	-	
141-365	22764-22765	-	
141-366	22765-22766	-	
141-367	22766-22767	-	
141-368	22767-22768	-	
141-369	22768-22769	-	
141-370	22769-22770	-	
141-371	22770-22771	-	
141-372	22771-22772	-	
141-373	22772-22773	-	
141-374	22773-22774	-	
141-375	22774-22775	-	
141-376	22775-22776	-	
141-377	22776-22777	-	
141-378	22777-22778	-	
141-379	22778-22779	-	
141-380	22779-22780	-	
141-381	22780-22781	-	
141-382	22781-22782	-	
141-383	22782-22783	-	
141-384	22783-22784	-	
141-385	22784-22785	-	
141-386	22785-22786	-	
141-387	22786-22787	-	
141-388	22787-22788	-	
141-389	22788-22789	-	
141-390	22789-22790	-	
141-391	22790-22791	-	
141-392	22791-22792	-	
141-393	22792-22793	-	
141-394	22793-22794	-	
141-395	22794-22795	-	
141-396	22795-22796	-	
141-397	22796-22797	-	
141-398	22797-22798	-	
141-399	22798-22799	-	
141-400	22799-22800	-	
141-401	22800-22801	-	
141-402	22801-22802	-	
141-403	22802-22803	-	
141-404	22803-22804	-	
141-405	22804-22805	-	
141-406	22805-22806	-	
141-407	22806-22807	-	
141-408	22807-22808	-	
141-409	22808-22809	-	
141-410	22809-22810	-	
141-411	22810-22811	-	
141-412	22811-22812	-	
141-413	22812-22813	-	
141-414	22813-22814	-	
141-415	22814-22815	-	
141-416	22815-22816	-	
141-417	22816-22817	-	
141-418	22817-22818	-	
141-419	22818-22819	-	
141-420	22819-22820	-	
141-421	22821-22826	Index	
141-422	22827-22831	Scan	
141-423	22832-22837	using	
141-424	22838-22850	criticrating	
141-425	22851-22853	on	
141-426	22854-22859	books	
141-427	22860-22861	(	
141-428	22861-22865	cost	
141-429	22865-22866	=	
141-430	22866-22870	0.42	
141-431	22870-22871	.	
141-432	22871-22879	.4626.93	
141-433	22880-22884	rows	
141-434	22884-22885	=	
141-435	22885-22889	5000	
141-436	22890-22895	width	
141-437	22895-22896	=	
141-438	22896-22899	158	
141-439	22899-22900	)	
141-440	22901-22902	(	
141-441	22902-22908	actual	
141-442	22909-22913	time	
141-443	22913-22914	=	
141-444	22914-22919	0.069	
141-445	22919-22920	.	
141-446	22920-22927	.70.221	
141-447	22928-22932	rows	
141-448	22932-22933	=	
141-449	22933-22939	199883	
141-450	22940-22945	loops	
141-451	22945-22946	=	
141-452	22946-22947	1	
141-453	22947-22948	)	
141-454	22949-22954	Index	
141-455	22955-22959	Cond	
141-456	22959-22960	:	
141-457	22961-22962	(	
141-458	22962-22963	(	
141-459	22963-22964	(	
141-460	22964-22968	data	
141-461	22969-22970	-	
141-462	22970-22971	>	
141-463	22972-22973	'	
141-464	22973-22985	criticrating	
141-465	22985-22986	'	
141-466	22986-22987	:	
141-467	22987-22988	:	
141-468	22988-22992	text	
141-469	22992-22993	)	
141-470	22993-22994	)	
141-471	22994-22995	:	
141-472	22995-22996	:	
141-473	22996-23003	integer	
141-474	23004-23005	=	
141-475	23006-23007	3	
141-476	23007-23008	)	
141-477	23009-23017	Planning	
141-478	23018-23022	Time	
141-479	23022-23023	:	
141-480	23024-23029	0.103	
141-481	23030-23032	ms	
141-482	23033-23042	Execution	
141-483	23043-23047	Time	
141-484	23047-23048	:	
141-485	23049-23055	79.019	
141-486	23056-23058	ms	
141-487	23059-23060	(	
141-488	23060-23061	4	
141-489	23062-23066	rows	
141-490	23066-23067	)	
141-491	23068-23072	From	
141-492	23073-23078	above	
141-493	23079-23081	we	
141-494	23082-23085	can	
141-495	23086-23089	see	
141-496	23090-23094	that	
141-497	23095-23098	the	
141-498	23099-23104	BTREE	
141-499	23105-23110	index	
141-500	23111-23113	is	
141-501	23114-23119	being	
141-502	23120-23124	used	
141-503	23125-23127	as	
141-504	23128-23136	expected	
141-505	23136-23137	.	

#Text=Hash Indexes
#Text=If you are only interested in the "=" operator, then Hash indexes become interesting.
142-1	23138-23142	Hash	
142-2	23143-23150	Indexes	
142-3	23151-23153	If	
142-4	23154-23157	you	
142-5	23158-23161	are	
142-6	23162-23166	only	
142-7	23167-23177	interested	
142-8	23178-23180	in	
142-9	23181-23184	the	
142-10	23185-23186	"	
142-11	23186-23187	=	
142-12	23187-23188	"	
142-13	23189-23197	operator	
142-14	23197-23198	,	
142-15	23199-23203	then	
142-16	23204-23208	Hash	
142-17	23209-23216	indexes	
142-18	23217-23223	become	
142-19	23224-23235	interesting	
142-20	23235-23236	.	

#Text=For example, consider the case when we are looking for a particular tag on a book.
143-1	23237-23240	For	
143-2	23241-23248	example	
143-3	23248-23249	,	
143-4	23250-23258	consider	
143-5	23259-23262	the	
143-6	23263-23267	case	
143-7	23268-23272	when	
143-8	23273-23275	we	
143-9	23276-23279	are	
143-10	23280-23287	looking	
143-11	23288-23291	for	
143-12	23292-23293	a	
143-13	23294-23304	particular	
143-14	23305-23308	tag	
143-15	23309-23311	on	
143-16	23312-23313	a	
143-17	23314-23318	book	
143-18	23318-23319	.	

#Text=The element to be indexed can be a top level element or deeply nested.
144-1	23320-23323	The	
144-2	23324-23331	element	
144-3	23332-23334	to	
144-4	23335-23337	be	
144-5	23338-23345	indexed	
144-6	23346-23349	can	
144-7	23350-23352	be	
144-8	23353-23354	a	
144-9	23355-23358	top	
144-10	23359-23364	level	
144-11	23365-23372	element	
144-12	23373-23375	or	
144-13	23376-23382	deeply	
144-14	23383-23389	nested	
144-15	23389-23390	.	

#Text=E.g. tags->publisher = XlekfkLOtL
#Text=CREATE INDEX publisherhash ON books USING HASH ((data->'publisher'));
#Text=Hash indexes also tend to be smaller in size than B-tree or GIN indexes.
145-1	23391-23394	E.g	
145-2	23394-23395	.	
145-3	23396-23400	tags	
145-4	23400-23401	-	
145-5	23401-23402	>	
145-6	23402-23411	publisher	
145-7	23412-23413	=	
145-8	23414-23424	XlekfkLOtL	
145-9	23425-23431	CREATE	
145-10	23432-23437	INDEX	
145-11	23438-23451	publisherhash	
145-12	23452-23454	ON	
145-13	23455-23460	books	
145-14	23461-23466	USING	
145-15	23467-23471	HASH	
145-16	23472-23473	(	
145-17	23473-23474	(	
145-18	23474-23478	data	
145-19	23478-23479	-	
145-20	23479-23480	>	
145-21	23480-23481	'	
145-22	23481-23490	publisher	
145-23	23490-23491	'	
145-24	23491-23492	)	
145-25	23492-23493	)	
145-26	23493-23494	;	
145-27	23495-23499	Hash	
145-28	23500-23507	indexes	
145-29	23508-23512	also	
145-30	23513-23517	tend	
145-31	23518-23520	to	
145-32	23521-23523	be	
145-33	23524-23531	smaller	
145-34	23532-23534	in	
145-35	23535-23539	size	
145-36	23540-23544	than	
145-37	23544-23545	 	
145-38	23545-23551	B-tree	
145-39	23552-23554	or	
145-40	23555-23558	GIN	
145-41	23559-23566	indexes	
145-42	23566-23567	.	

#Text=Of course, this ultimately depends on your data set.
#Text=demo=# select * from books where data->'publisher' = 'XlekfkLOtL'
#Text=demo-# ;
#Text=id | author | isbn | rating | data
#Text=-----+-----------------+------------+--------+-------------------------------------------------------------------------------------
#Text=346 | uD3QOvHfJdxq2ez | KiAaIRu8QE | 1 | {"tags": {"nk88": {"ik37": "iv161"}}, "publisher": "XlekfkLOtL", "criticrating": 3}
#Text=(1 row)
#Text=demo=# explain analyze select * from books where data->'publisher' = 'XlekfkLOtL';
#Text=QUERY PLAN
#Text=-----------------------------------------------------------------------------------------------------------------------
#Text=Index Scan using publisherhash on books (cost=0.00..2.02 rows=1 width=158) (actual time=0.016..0.017 rows=1 loops=1)
#Text=Index Cond: ((data -> 'publisher'::text) = 'XlekfkLOtL'::text)
#Text=Planning Time: 0.080 ms
#Text=Execution Time: 0.035 ms
#Text=(4 rows)
#Text=Special Mention: GIN Trigram Indexes
#Text=PostgreSQL supports string matching using trigram indexes.
146-1	23568-23570	Of	
146-2	23571-23577	course	
146-3	23577-23578	,	
146-4	23579-23583	this	
146-5	23584-23594	ultimately	
146-6	23595-23602	depends	
146-7	23603-23605	on	
146-8	23606-23610	your	
146-9	23611-23615	data	
146-10	23616-23619	set	
146-11	23619-23620	.	
146-12	23621-23625	demo	
146-13	23625-23626	=	
146-14	23626-23627	#	
146-15	23628-23634	select	
146-16	23635-23636	*	
146-17	23637-23641	from	
146-18	23642-23647	books	
146-19	23648-23653	where	
146-20	23654-23658	data	
146-21	23658-23659	-	
146-22	23659-23660	>	
146-23	23660-23661	'	
146-24	23661-23670	publisher	
146-25	23670-23671	'	
146-26	23672-23673	=	
146-27	23674-23675	'	
146-28	23675-23685	XlekfkLOtL	
146-29	23685-23686	'	
146-30	23687-23691	demo	
146-31	23691-23692	-	
146-32	23692-23693	#	
146-33	23694-23695	;	
146-34	23696-23698	id	
146-35	23699-23700	|	
146-36	23701-23707	author	
146-37	23708-23709	|	
146-38	23710-23714	isbn	
146-39	23715-23716	|	
146-40	23717-23723	rating	
146-41	23724-23725	|	
146-42	23726-23730	data	
146-43	23731-23732	-	
146-44	23732-23733	-	
146-45	23733-23734	-	
146-46	23734-23735	-	
146-47	23735-23736	-	
146-48	23736-23737	+	
146-49	23737-23738	-	
146-50	23738-23739	-	
146-51	23739-23740	-	
146-52	23740-23741	-	
146-53	23741-23742	-	
146-54	23742-23743	-	
146-55	23743-23744	-	
146-56	23744-23745	-	
146-57	23745-23746	-	
146-58	23746-23747	-	
146-59	23747-23748	-	
146-60	23748-23749	-	
146-61	23749-23750	-	
146-62	23750-23751	-	
146-63	23751-23752	-	
146-64	23752-23753	-	
146-65	23753-23754	-	
146-66	23754-23755	+	
146-67	23755-23756	-	
146-68	23756-23757	-	
146-69	23757-23758	-	
146-70	23758-23759	-	
146-71	23759-23760	-	
146-72	23760-23761	-	
146-73	23761-23762	-	
146-74	23762-23763	-	
146-75	23763-23764	-	
146-76	23764-23765	-	
146-77	23765-23766	-	
146-78	23766-23767	-	
146-79	23767-23768	+	
146-80	23768-23769	-	
146-81	23769-23770	-	
146-82	23770-23771	-	
146-83	23771-23772	-	
146-84	23772-23773	-	
146-85	23773-23774	-	
146-86	23774-23775	-	
146-87	23775-23776	-	
146-88	23776-23777	+	
146-89	23777-23778	-	
146-90	23778-23779	-	
146-91	23779-23780	-	
146-92	23780-23781	-	
146-93	23781-23782	-	
146-94	23782-23783	-	
146-95	23783-23784	-	
146-96	23784-23785	-	
146-97	23785-23786	-	
146-98	23786-23787	-	
146-99	23787-23788	-	
146-100	23788-23789	-	
146-101	23789-23790	-	
146-102	23790-23791	-	
146-103	23791-23792	-	
146-104	23792-23793	-	
146-105	23793-23794	-	
146-106	23794-23795	-	
146-107	23795-23796	-	
146-108	23796-23797	-	
146-109	23797-23798	-	
146-110	23798-23799	-	
146-111	23799-23800	-	
146-112	23800-23801	-	
146-113	23801-23802	-	
146-114	23802-23803	-	
146-115	23803-23804	-	
146-116	23804-23805	-	
146-117	23805-23806	-	
146-118	23806-23807	-	
146-119	23807-23808	-	
146-120	23808-23809	-	
146-121	23809-23810	-	
146-122	23810-23811	-	
146-123	23811-23812	-	
146-124	23812-23813	-	
146-125	23813-23814	-	
146-126	23814-23815	-	
146-127	23815-23816	-	
146-128	23816-23817	-	
146-129	23817-23818	-	
146-130	23818-23819	-	
146-131	23819-23820	-	
146-132	23820-23821	-	
146-133	23821-23822	-	
146-134	23822-23823	-	
146-135	23823-23824	-	
146-136	23824-23825	-	
146-137	23825-23826	-	
146-138	23826-23827	-	
146-139	23827-23828	-	
146-140	23828-23829	-	
146-141	23829-23830	-	
146-142	23830-23831	-	
146-143	23831-23832	-	
146-144	23832-23833	-	
146-145	23833-23834	-	
146-146	23834-23835	-	
146-147	23835-23836	-	
146-148	23836-23837	-	
146-149	23837-23838	-	
146-150	23838-23839	-	
146-151	23839-23840	-	
146-152	23840-23841	-	
146-153	23841-23842	-	
146-154	23842-23843	-	
146-155	23843-23844	-	
146-156	23844-23845	-	
146-157	23845-23846	-	
146-158	23846-23847	-	
146-159	23847-23848	-	
146-160	23848-23849	-	
146-161	23849-23850	-	
146-162	23850-23851	-	
146-163	23851-23852	-	
146-164	23852-23853	-	
146-165	23853-23854	-	
146-166	23854-23855	-	
146-167	23855-23856	-	
146-168	23856-23857	-	
146-169	23857-23858	-	
146-170	23858-23859	-	
146-171	23859-23860	-	
146-172	23860-23861	-	
146-173	23861-23862	-	
146-174	23863-23866	346	
146-175	23867-23868	|	
146-176	23869-23884	uD3QOvHfJdxq2ez	
146-177	23885-23886	|	
146-178	23887-23897	KiAaIRu8QE	
146-179	23898-23899	|	
146-180	23900-23901	1	
146-181	23902-23903	|	
146-182	23904-23905	{	
146-183	23905-23906	"	
146-184	23906-23910	tags	
146-185	23910-23911	"	
146-186	23911-23912	:	
146-187	23913-23914	{	
146-188	23914-23915	"	
146-189	23915-23919	nk88	
146-190	23919-23920	"	
146-191	23920-23921	:	
146-192	23922-23923	{	
146-193	23923-23924	"	
146-194	23924-23928	ik37	
146-195	23928-23929	"	
146-196	23929-23930	:	
146-197	23931-23932	"	
146-198	23932-23937	iv161	
146-199	23937-23938	"	
146-200	23938-23939	}	
146-201	23939-23940	}	
146-202	23940-23941	,	
146-203	23942-23943	"	
146-204	23943-23952	publisher	
146-205	23952-23953	"	
146-206	23953-23954	:	
146-207	23955-23956	"	
146-208	23956-23966	XlekfkLOtL	
146-209	23966-23967	"	
146-210	23967-23968	,	
146-211	23969-23970	"	
146-212	23970-23982	criticrating	
146-213	23982-23983	"	
146-214	23983-23984	:	
146-215	23985-23986	3	
146-216	23986-23987	}	
146-217	23988-23989	(	
146-218	23989-23990	1	
146-219	23991-23994	row	
146-220	23994-23995	)	
146-221	23996-24000	demo	
146-222	24000-24001	=	
146-223	24001-24002	#	
146-224	24003-24010	explain	
146-225	24011-24018	analyze	
146-226	24019-24025	select	
146-227	24026-24027	*	
146-228	24028-24032	from	
146-229	24033-24038	books	
146-230	24039-24044	where	
146-231	24045-24049	data	
146-232	24049-24050	-	
146-233	24050-24051	>	
146-234	24051-24052	'	
146-235	24052-24061	publisher	
146-236	24061-24062	'	
146-237	24063-24064	=	
146-238	24065-24066	'	
146-239	24066-24076	XlekfkLOtL	
146-240	24076-24077	'	
146-241	24077-24078	;	
146-242	24079-24084	QUERY	
146-243	24085-24089	PLAN	
146-244	24090-24091	-	
146-245	24091-24092	-	
146-246	24092-24093	-	
146-247	24093-24094	-	
146-248	24094-24095	-	
146-249	24095-24096	-	
146-250	24096-24097	-	
146-251	24097-24098	-	
146-252	24098-24099	-	
146-253	24099-24100	-	
146-254	24100-24101	-	
146-255	24101-24102	-	
146-256	24102-24103	-	
146-257	24103-24104	-	
146-258	24104-24105	-	
146-259	24105-24106	-	
146-260	24106-24107	-	
146-261	24107-24108	-	
146-262	24108-24109	-	
146-263	24109-24110	-	
146-264	24110-24111	-	
146-265	24111-24112	-	
146-266	24112-24113	-	
146-267	24113-24114	-	
146-268	24114-24115	-	
146-269	24115-24116	-	
146-270	24116-24117	-	
146-271	24117-24118	-	
146-272	24118-24119	-	
146-273	24119-24120	-	
146-274	24120-24121	-	
146-275	24121-24122	-	
146-276	24122-24123	-	
146-277	24123-24124	-	
146-278	24124-24125	-	
146-279	24125-24126	-	
146-280	24126-24127	-	
146-281	24127-24128	-	
146-282	24128-24129	-	
146-283	24129-24130	-	
146-284	24130-24131	-	
146-285	24131-24132	-	
146-286	24132-24133	-	
146-287	24133-24134	-	
146-288	24134-24135	-	
146-289	24135-24136	-	
146-290	24136-24137	-	
146-291	24137-24138	-	
146-292	24138-24139	-	
146-293	24139-24140	-	
146-294	24140-24141	-	
146-295	24141-24142	-	
146-296	24142-24143	-	
146-297	24143-24144	-	
146-298	24144-24145	-	
146-299	24145-24146	-	
146-300	24146-24147	-	
146-301	24147-24148	-	
146-302	24148-24149	-	
146-303	24149-24150	-	
146-304	24150-24151	-	
146-305	24151-24152	-	
146-306	24152-24153	-	
146-307	24153-24154	-	
146-308	24154-24155	-	
146-309	24155-24156	-	
146-310	24156-24157	-	
146-311	24157-24158	-	
146-312	24158-24159	-	
146-313	24159-24160	-	
146-314	24160-24161	-	
146-315	24161-24162	-	
146-316	24162-24163	-	
146-317	24163-24164	-	
146-318	24164-24165	-	
146-319	24165-24166	-	
146-320	24166-24167	-	
146-321	24167-24168	-	
146-322	24168-24169	-	
146-323	24169-24170	-	
146-324	24170-24171	-	
146-325	24171-24172	-	
146-326	24172-24173	-	
146-327	24173-24174	-	
146-328	24174-24175	-	
146-329	24175-24176	-	
146-330	24176-24177	-	
146-331	24177-24178	-	
146-332	24178-24179	-	
146-333	24179-24180	-	
146-334	24180-24181	-	
146-335	24181-24182	-	
146-336	24182-24183	-	
146-337	24183-24184	-	
146-338	24184-24185	-	
146-339	24185-24186	-	
146-340	24186-24187	-	
146-341	24187-24188	-	
146-342	24188-24189	-	
146-343	24189-24190	-	
146-344	24190-24191	-	
146-345	24191-24192	-	
146-346	24192-24193	-	
146-347	24193-24194	-	
146-348	24194-24195	-	
146-349	24195-24196	-	
146-350	24196-24197	-	
146-351	24197-24198	-	
146-352	24198-24199	-	
146-353	24199-24200	-	
146-354	24200-24201	-	
146-355	24201-24202	-	
146-356	24202-24203	-	
146-357	24203-24204	-	
146-358	24204-24205	-	
146-359	24205-24206	-	
146-360	24206-24207	-	
146-361	24207-24208	-	
146-362	24208-24209	-	
146-363	24210-24215	Index	
146-364	24216-24220	Scan	
146-365	24221-24226	using	
146-366	24227-24240	publisherhash	
146-367	24241-24243	on	
146-368	24244-24249	books	
146-369	24250-24251	(	
146-370	24251-24255	cost	
146-371	24255-24256	=	
146-372	24256-24260	0.00	
146-373	24260-24261	.	
146-374	24261-24266	.2.02	
146-375	24267-24271	rows	
146-376	24271-24272	=	
146-377	24272-24273	1	
146-378	24274-24279	width	
146-379	24279-24280	=	
146-380	24280-24283	158	
146-381	24283-24284	)	
146-382	24285-24286	(	
146-383	24286-24292	actual	
146-384	24293-24297	time	
146-385	24297-24298	=	
146-386	24298-24303	0.016	
146-387	24303-24304	.	
146-388	24304-24310	.0.017	
146-389	24311-24315	rows	
146-390	24315-24316	=	
146-391	24316-24317	1	
146-392	24318-24323	loops	
146-393	24323-24324	=	
146-394	24324-24325	1	
146-395	24325-24326	)	
146-396	24327-24332	Index	
146-397	24333-24337	Cond	
146-398	24337-24338	:	
146-399	24339-24340	(	
146-400	24340-24341	(	
146-401	24341-24345	data	
146-402	24346-24347	-	
146-403	24347-24348	>	
146-404	24349-24350	'	
146-405	24350-24359	publisher	
146-406	24359-24360	'	
146-407	24360-24361	:	
146-408	24361-24362	:	
146-409	24362-24366	text	
146-410	24366-24367	)	
146-411	24368-24369	=	
146-412	24370-24371	'	
146-413	24371-24381	XlekfkLOtL	
146-414	24381-24382	'	
146-415	24382-24383	:	
146-416	24383-24384	:	
146-417	24384-24388	text	
146-418	24388-24389	)	
146-419	24390-24398	Planning	
146-420	24399-24403	Time	
146-421	24403-24404	:	
146-422	24405-24410	0.080	
146-423	24411-24413	ms	
146-424	24414-24423	Execution	
146-425	24424-24428	Time	
146-426	24428-24429	:	
146-427	24430-24435	0.035	
146-428	24436-24438	ms	
146-429	24439-24440	(	
146-430	24440-24441	4	
146-431	24442-24446	rows	
146-432	24446-24447	)	
146-433	24448-24455	Special	
146-434	24456-24463	Mention	
146-435	24463-24464	:	
146-436	24465-24468	GIN	
146-437	24469-24476	Trigram	
146-438	24477-24484	Indexes	
146-439	24485-24495	PostgreSQL	
146-440	24496-24504	supports	
146-441	24505-24511	string	
146-442	24512-24520	matching	
146-443	24521-24526	using	
146-444	24527-24534	trigram	
146-445	24535-24542	indexes	
146-446	24542-24543	.	

#Text=Trigram indexes work by breaking up text into trigrams.
147-1	24544-24551	Trigram	
147-2	24552-24559	indexes	
147-3	24560-24564	work	
147-4	24565-24567	by	
147-5	24568-24576	breaking	
147-6	24577-24579	up	
147-7	24580-24584	text	
147-8	24585-24589	into	
147-9	24590-24598	trigrams	
147-10	24598-24599	.	

#Text=Trigrams are basically words broken up into sequences of 3 letters.
148-1	24600-24608	Trigrams	
148-2	24609-24612	are	
148-3	24613-24622	basically	
148-4	24623-24628	words	
148-5	24629-24635	broken	
148-6	24636-24638	up	
148-7	24639-24643	into	
148-8	24644-24653	sequences	
148-9	24654-24656	of	
148-10	24657-24658	3	
148-11	24659-24666	letters	
148-12	24666-24667	.	

#Text=More information can be found in the documentation.
149-1	24668-24672	More	
149-2	24673-24684	information	
149-3	24685-24688	can	
149-4	24689-24691	be	
149-5	24692-24697	found	
149-6	24698-24700	in	
149-7	24701-24704	the	
149-8	24705-24718	documentation	
149-9	24718-24719	.	

#Text=GIN indexes support the “gin_trgm_ops” class that can be used to index the data in JSONB.
150-1	24720-24723	GIN	
150-2	24724-24731	indexes	
150-3	24732-24739	support	
150-4	24740-24743	the	
150-5	24744-24745	“	
150-6	24745-24757	gin_trgm_ops	
150-7	24757-24758	”	
150-8	24759-24764	class	
150-9	24765-24769	that	
150-10	24770-24773	can	
150-11	24774-24776	be	
150-12	24777-24781	used	
150-13	24782-24784	to	
150-14	24785-24790	index	
150-15	24791-24794	the	
150-16	24795-24799	data	
150-17	24800-24802	in	
150-18	24803-24808	JSONB	
150-19	24808-24809	.	

#Text=You can choose to use expression indexes to build the trigram index on a particular column.
151-1	24810-24813	You	
151-2	24814-24817	can	
151-3	24818-24824	choose	
151-4	24825-24827	to	
151-5	24828-24831	use	
151-6	24832-24842	expression	
151-7	24843-24850	indexes	
151-8	24851-24853	to	
151-9	24854-24859	build	
151-10	24860-24863	the	
151-11	24864-24871	trigram	
151-12	24872-24877	index	
151-13	24878-24880	on	
151-14	24881-24882	a	
151-15	24883-24893	particular	
151-16	24894-24900	column	
151-17	24900-24901	.	

#Text=CREATE EXTENSION pg_trgm;
#Text=CREATE INDEX publisher ON books USING GIN ((data->'publisher') gin_trgm_ops);
#Text=demo=# select * from books where data->'publisher' LIKE '%I0UB%';
#Text=id |
#Text=author
#Text=isbn
#Text=| rating |
#Text=data
#Text=----+-----------------+------------+--------+---------------------------------------------------------------------------------
#Text=4 | KiEk3xjqvTpmZeS | EYqXO9Nwmm |
#Text=0 | {"tags": {"nk3": {"ik1": "iv1"}}, "publisher": "MI0UBqZJDt", "criticrating": 1}
#Text=(1 row)
#Text=As you can see in the query above, we can search for any arbitrary string occurring at any potion.
152-1	24902-24908	CREATE	
152-2	24909-24918	EXTENSION	
152-3	24919-24926	pg_trgm	
152-4	24926-24927	;	
152-5	24928-24934	CREATE	
152-6	24935-24940	INDEX	
152-7	24941-24950	publisher	
152-8	24951-24953	ON	
152-9	24954-24959	books	
152-10	24960-24965	USING	
152-11	24966-24969	GIN	
152-12	24970-24971	(	
152-13	24971-24972	(	
152-14	24972-24976	data	
152-15	24976-24977	-	
152-16	24977-24978	>	
152-17	24978-24979	'	
152-18	24979-24988	publisher	
152-19	24988-24989	'	
152-20	24989-24990	)	
152-21	24991-25003	gin_trgm_ops	
152-22	25003-25004	)	
152-23	25004-25005	;	
152-24	25006-25010	demo	
152-25	25010-25011	=	
152-26	25011-25012	#	
152-27	25013-25019	select	
152-28	25020-25021	*	
152-29	25022-25026	from	
152-30	25027-25032	books	
152-31	25033-25038	where	
152-32	25039-25043	data	
152-33	25043-25044	-	
152-34	25044-25045	>	
152-35	25045-25046	'	
152-36	25046-25055	publisher	
152-37	25055-25056	'	
152-38	25057-25061	LIKE	
152-39	25062-25063	'	
152-40	25063-25064	%	
152-41	25064-25068	I0UB	
152-42	25068-25069	%	
152-43	25069-25070	'	
152-44	25070-25071	;	
152-45	25072-25074	id	
152-46	25075-25076	|	
152-47	25077-25083	author	
152-48	25084-25088	isbn	
152-49	25089-25090	|	
152-50	25091-25097	rating	
152-51	25098-25099	|	
152-52	25100-25104	data	
152-53	25105-25106	-	
152-54	25106-25107	-	
152-55	25107-25108	-	
152-56	25108-25109	-	
152-57	25109-25110	+	
152-58	25110-25111	-	
152-59	25111-25112	-	
152-60	25112-25113	-	
152-61	25113-25114	-	
152-62	25114-25115	-	
152-63	25115-25116	-	
152-64	25116-25117	-	
152-65	25117-25118	-	
152-66	25118-25119	-	
152-67	25119-25120	-	
152-68	25120-25121	-	
152-69	25121-25122	-	
152-70	25122-25123	-	
152-71	25123-25124	-	
152-72	25124-25125	-	
152-73	25125-25126	-	
152-74	25126-25127	-	
152-75	25127-25128	+	
152-76	25128-25129	-	
152-77	25129-25130	-	
152-78	25130-25131	-	
152-79	25131-25132	-	
152-80	25132-25133	-	
152-81	25133-25134	-	
152-82	25134-25135	-	
152-83	25135-25136	-	
152-84	25136-25137	-	
152-85	25137-25138	-	
152-86	25138-25139	-	
152-87	25139-25140	-	
152-88	25140-25141	+	
152-89	25141-25142	-	
152-90	25142-25143	-	
152-91	25143-25144	-	
152-92	25144-25145	-	
152-93	25145-25146	-	
152-94	25146-25147	-	
152-95	25147-25148	-	
152-96	25148-25149	-	
152-97	25149-25150	+	
152-98	25150-25151	-	
152-99	25151-25152	-	
152-100	25152-25153	-	
152-101	25153-25154	-	
152-102	25154-25155	-	
152-103	25155-25156	-	
152-104	25156-25157	-	
152-105	25157-25158	-	
152-106	25158-25159	-	
152-107	25159-25160	-	
152-108	25160-25161	-	
152-109	25161-25162	-	
152-110	25162-25163	-	
152-111	25163-25164	-	
152-112	25164-25165	-	
152-113	25165-25166	-	
152-114	25166-25167	-	
152-115	25167-25168	-	
152-116	25168-25169	-	
152-117	25169-25170	-	
152-118	25170-25171	-	
152-119	25171-25172	-	
152-120	25172-25173	-	
152-121	25173-25174	-	
152-122	25174-25175	-	
152-123	25175-25176	-	
152-124	25176-25177	-	
152-125	25177-25178	-	
152-126	25178-25179	-	
152-127	25179-25180	-	
152-128	25180-25181	-	
152-129	25181-25182	-	
152-130	25182-25183	-	
152-131	25183-25184	-	
152-132	25184-25185	-	
152-133	25185-25186	-	
152-134	25186-25187	-	
152-135	25187-25188	-	
152-136	25188-25189	-	
152-137	25189-25190	-	
152-138	25190-25191	-	
152-139	25191-25192	-	
152-140	25192-25193	-	
152-141	25193-25194	-	
152-142	25194-25195	-	
152-143	25195-25196	-	
152-144	25196-25197	-	
152-145	25197-25198	-	
152-146	25198-25199	-	
152-147	25199-25200	-	
152-148	25200-25201	-	
152-149	25201-25202	-	
152-150	25202-25203	-	
152-151	25203-25204	-	
152-152	25204-25205	-	
152-153	25205-25206	-	
152-154	25206-25207	-	
152-155	25207-25208	-	
152-156	25208-25209	-	
152-157	25209-25210	-	
152-158	25210-25211	-	
152-159	25211-25212	-	
152-160	25212-25213	-	
152-161	25213-25214	-	
152-162	25214-25215	-	
152-163	25215-25216	-	
152-164	25216-25217	-	
152-165	25217-25218	-	
152-166	25218-25219	-	
152-167	25219-25220	-	
152-168	25220-25221	-	
152-169	25221-25222	-	
152-170	25222-25223	-	
152-171	25223-25224	-	
152-172	25224-25225	-	
152-173	25225-25226	-	
152-174	25226-25227	-	
152-175	25227-25228	-	
152-176	25228-25229	-	
152-177	25229-25230	-	
152-178	25230-25231	-	
152-179	25232-25233	4	
152-180	25234-25235	|	
152-181	25236-25251	KiEk3xjqvTpmZeS	
152-182	25252-25253	|	
152-183	25254-25264	EYqXO9Nwmm	
152-184	25265-25266	|	
152-185	25267-25268	0	
152-186	25269-25270	|	
152-187	25271-25272	{	
152-188	25272-25273	"	
152-189	25273-25277	tags	
152-190	25277-25278	"	
152-191	25278-25279	:	
152-192	25280-25281	{	
152-193	25281-25282	"	
152-194	25282-25285	nk3	
152-195	25285-25286	"	
152-196	25286-25287	:	
152-197	25288-25289	{	
152-198	25289-25290	"	
152-199	25290-25293	ik1	
152-200	25293-25294	"	
152-201	25294-25295	:	
152-202	25296-25297	"	
152-203	25297-25300	iv1	
152-204	25300-25301	"	
152-205	25301-25302	}	
152-206	25302-25303	}	
152-207	25303-25304	,	
152-208	25305-25306	"	
152-209	25306-25315	publisher	
152-210	25315-25316	"	
152-211	25316-25317	:	
152-212	25318-25319	"	
152-213	25319-25329	MI0UBqZJDt	
152-214	25329-25330	"	
152-215	25330-25331	,	
152-216	25332-25333	"	
152-217	25333-25345	criticrating	
152-218	25345-25346	"	
152-219	25346-25347	:	
152-220	25348-25349	1	
152-221	25349-25350	}	
152-222	25351-25352	(	
152-223	25352-25353	1	
152-224	25354-25357	row	
152-225	25357-25358	)	
152-226	25359-25361	As	
152-227	25362-25365	you	
152-228	25366-25369	can	
152-229	25370-25373	see	
152-230	25374-25376	in	
152-231	25377-25380	the	
152-232	25381-25386	query	
152-233	25387-25392	above	
152-234	25392-25393	,	
152-235	25394-25396	we	
152-236	25397-25400	can	
152-237	25401-25407	search	
152-238	25408-25411	for	
152-239	25412-25415	any	
152-240	25416-25425	arbitrary	
152-241	25426-25432	string	
152-242	25433-25442	occurring	
152-243	25443-25445	at	
152-244	25446-25449	any	
152-245	25450-25456	potion	
152-246	25456-25457	.	

#Text=Unlike the B-tree indexes, we are not restricted to left anchored expressions.
#Text=demo=# explain analyze select * from books where data->'publisher' LIKE '%I0UB%';
#Text=QUERY PLAN
#Text=--------------------------------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books
#Text=(cost=9.78..111.28 rows=100 width=158) (actual time=0.033..0.033 rows=1 loops=1)
#Text=Recheck Cond: ((data -> 'publisher'::text) ~~ '%I0UB%'::text)
#Text=Heap Blocks: exact=1
#Text=Bitmap Index Scan on publisher
#Text=(cost=0.00..9.75 rows=100 width=0) (actual time=0.025..0.025 rows=1 loops=1)
#Text=Index Cond: ((data -> 'publisher'::text) ~~ '%I0UB%'::text)
#Text=Planning Time: 0.213 ms
#Text=Execution Time: 0.058 ms
#Text=(7 rows)
#Text=Special Mention: GIN Array Indexes
#Text=JSONB has great built-in support for indexing arrays.
153-1	25458-25464	Unlike	
153-2	25465-25468	the	
153-3	25468-25469	 	
153-4	25469-25475	B-tree	
153-5	25476-25483	indexes	
153-6	25483-25484	,	
153-7	25485-25487	we	
153-8	25488-25491	are	
153-9	25492-25495	not	
153-10	25496-25506	restricted	
153-11	25507-25509	to	
153-12	25510-25514	left	
153-13	25515-25523	anchored	
153-14	25524-25535	expressions	
153-15	25535-25536	.	
153-16	25537-25541	demo	
153-17	25541-25542	=	
153-18	25542-25543	#	
153-19	25544-25551	explain	
153-20	25552-25559	analyze	
153-21	25560-25566	select	
153-22	25567-25568	*	
153-23	25569-25573	from	
153-24	25574-25579	books	
153-25	25580-25585	where	
153-26	25586-25590	data	
153-27	25590-25591	-	
153-28	25591-25592	>	
153-29	25592-25593	'	
153-30	25593-25602	publisher	
153-31	25602-25603	'	
153-32	25604-25608	LIKE	
153-33	25609-25610	'	
153-34	25610-25611	%	
153-35	25611-25615	I0UB	
153-36	25615-25616	%	
153-37	25616-25617	'	
153-38	25617-25618	;	
153-39	25619-25624	QUERY	
153-40	25625-25629	PLAN	
153-41	25630-25631	-	
153-42	25631-25632	-	
153-43	25632-25633	-	
153-44	25633-25634	-	
153-45	25634-25635	-	
153-46	25635-25636	-	
153-47	25636-25637	-	
153-48	25637-25638	-	
153-49	25638-25639	-	
153-50	25639-25640	-	
153-51	25640-25641	-	
153-52	25641-25642	-	
153-53	25642-25643	-	
153-54	25643-25644	-	
153-55	25644-25645	-	
153-56	25645-25646	-	
153-57	25646-25647	-	
153-58	25647-25648	-	
153-59	25648-25649	-	
153-60	25649-25650	-	
153-61	25650-25651	-	
153-62	25651-25652	-	
153-63	25652-25653	-	
153-64	25653-25654	-	
153-65	25654-25655	-	
153-66	25655-25656	-	
153-67	25656-25657	-	
153-68	25657-25658	-	
153-69	25658-25659	-	
153-70	25659-25660	-	
153-71	25660-25661	-	
153-72	25661-25662	-	
153-73	25662-25663	-	
153-74	25663-25664	-	
153-75	25664-25665	-	
153-76	25665-25666	-	
153-77	25666-25667	-	
153-78	25667-25668	-	
153-79	25668-25669	-	
153-80	25669-25670	-	
153-81	25670-25671	-	
153-82	25671-25672	-	
153-83	25672-25673	-	
153-84	25673-25674	-	
153-85	25674-25675	-	
153-86	25675-25676	-	
153-87	25676-25677	-	
153-88	25677-25678	-	
153-89	25678-25679	-	
153-90	25679-25680	-	
153-91	25680-25681	-	
153-92	25681-25682	-	
153-93	25682-25683	-	
153-94	25683-25684	-	
153-95	25684-25685	-	
153-96	25685-25686	-	
153-97	25686-25687	-	
153-98	25687-25688	-	
153-99	25688-25689	-	
153-100	25689-25690	-	
153-101	25690-25691	-	
153-102	25691-25692	-	
153-103	25692-25693	-	
153-104	25693-25694	-	
153-105	25694-25695	-	
153-106	25695-25696	-	
153-107	25696-25697	-	
153-108	25697-25698	-	
153-109	25698-25699	-	
153-110	25699-25700	-	
153-111	25700-25701	-	
153-112	25701-25702	-	
153-113	25702-25703	-	
153-114	25703-25704	-	
153-115	25704-25705	-	
153-116	25705-25706	-	
153-117	25706-25707	-	
153-118	25707-25708	-	
153-119	25708-25709	-	
153-120	25709-25710	-	
153-121	25710-25711	-	
153-122	25711-25712	-	
153-123	25712-25713	-	
153-124	25713-25714	-	
153-125	25714-25715	-	
153-126	25715-25716	-	
153-127	25716-25717	-	
153-128	25717-25718	-	
153-129	25718-25719	-	
153-130	25719-25720	-	
153-131	25720-25721	-	
153-132	25721-25722	-	
153-133	25722-25723	-	
153-134	25723-25724	-	
153-135	25724-25725	-	
153-136	25725-25726	-	
153-137	25726-25727	-	
153-138	25727-25728	-	
153-139	25728-25729	-	
153-140	25729-25730	-	
153-141	25730-25731	-	
153-142	25731-25732	-	
153-143	25732-25733	-	
153-144	25733-25734	-	
153-145	25734-25735	-	
153-146	25735-25736	-	
153-147	25736-25737	-	
153-148	25737-25738	-	
153-149	25738-25739	-	
153-150	25739-25740	-	
153-151	25740-25741	-	
153-152	25741-25742	-	
153-153	25742-25743	-	
153-154	25743-25744	-	
153-155	25744-25745	-	
153-156	25745-25746	-	
153-157	25747-25753	Bitmap	
153-158	25754-25758	Heap	
153-159	25759-25763	Scan	
153-160	25764-25766	on	
153-161	25767-25772	books	
153-162	25773-25774	(	
153-163	25774-25778	cost	
153-164	25778-25779	=	
153-165	25779-25783	9.78	
153-166	25783-25784	.	
153-167	25784-25791	.111.28	
153-168	25792-25796	rows	
153-169	25796-25797	=	
153-170	25797-25800	100	
153-171	25801-25806	width	
153-172	25806-25807	=	
153-173	25807-25810	158	
153-174	25810-25811	)	
153-175	25812-25813	(	
153-176	25813-25819	actual	
153-177	25820-25824	time	
153-178	25824-25825	=	
153-179	25825-25830	0.033	
153-180	25830-25831	.	
153-181	25831-25837	.0.033	
153-182	25838-25842	rows	
153-183	25842-25843	=	
153-184	25843-25844	1	
153-185	25845-25850	loops	
153-186	25850-25851	=	
153-187	25851-25852	1	
153-188	25852-25853	)	
153-189	25854-25861	Recheck	
153-190	25862-25866	Cond	
153-191	25866-25867	:	
153-192	25868-25869	(	
153-193	25869-25870	(	
153-194	25870-25874	data	
153-195	25875-25876	-	
153-196	25876-25877	>	
153-197	25878-25879	'	
153-198	25879-25888	publisher	
153-199	25888-25889	'	
153-200	25889-25890	:	
153-201	25890-25891	:	
153-202	25891-25895	text	
153-203	25895-25896	)	
153-204	25897-25898	~	
153-205	25898-25899	~	
153-206	25900-25901	'	
153-207	25901-25902	%	
153-208	25902-25906	I0UB	
153-209	25906-25907	%	
153-210	25907-25908	'	
153-211	25908-25909	:	
153-212	25909-25910	:	
153-213	25910-25914	text	
153-214	25914-25915	)	
153-215	25916-25920	Heap	
153-216	25921-25927	Blocks	
153-217	25927-25928	:	
153-218	25929-25934	exact	
153-219	25934-25935	=	
153-220	25935-25936	1	
153-221	25937-25943	Bitmap	
153-222	25944-25949	Index	
153-223	25950-25954	Scan	
153-224	25955-25957	on	
153-225	25958-25967	publisher	
153-226	25968-25969	(	
153-227	25969-25973	cost	
153-228	25973-25974	=	
153-229	25974-25978	0.00	
153-230	25978-25979	.	
153-231	25979-25984	.9.75	
153-232	25985-25989	rows	
153-233	25989-25990	=	
153-234	25990-25993	100	
153-235	25994-25999	width	
153-236	25999-26000	=	
153-237	26000-26001	0	
153-238	26001-26002	)	
153-239	26003-26004	(	
153-240	26004-26010	actual	
153-241	26011-26015	time	
153-242	26015-26016	=	
153-243	26016-26021	0.025	
153-244	26021-26022	.	
153-245	26022-26028	.0.025	
153-246	26029-26033	rows	
153-247	26033-26034	=	
153-248	26034-26035	1	
153-249	26036-26041	loops	
153-250	26041-26042	=	
153-251	26042-26043	1	
153-252	26043-26044	)	
153-253	26045-26050	Index	
153-254	26051-26055	Cond	
153-255	26055-26056	:	
153-256	26057-26058	(	
153-257	26058-26059	(	
153-258	26059-26063	data	
153-259	26064-26065	-	
153-260	26065-26066	>	
153-261	26067-26068	'	
153-262	26068-26077	publisher	
153-263	26077-26078	'	
153-264	26078-26079	:	
153-265	26079-26080	:	
153-266	26080-26084	text	
153-267	26084-26085	)	
153-268	26086-26087	~	
153-269	26087-26088	~	
153-270	26089-26090	'	
153-271	26090-26091	%	
153-272	26091-26095	I0UB	
153-273	26095-26096	%	
153-274	26096-26097	'	
153-275	26097-26098	:	
153-276	26098-26099	:	
153-277	26099-26103	text	
153-278	26103-26104	)	
153-279	26105-26113	Planning	
153-280	26114-26118	Time	
153-281	26118-26119	:	
153-282	26120-26125	0.213	
153-283	26126-26128	ms	
153-284	26129-26138	Execution	
153-285	26139-26143	Time	
153-286	26143-26144	:	
153-287	26145-26150	0.058	
153-288	26151-26153	ms	
153-289	26154-26155	(	
153-290	26155-26156	7	
153-291	26157-26161	rows	
153-292	26161-26162	)	
153-293	26163-26170	Special	
153-294	26171-26178	Mention	
153-295	26178-26179	:	
153-296	26180-26183	GIN	
153-297	26184-26189	Array	
153-298	26190-26197	Indexes	
153-299	26198-26203	JSONB	
153-300	26204-26207	has	
153-301	26208-26213	great	
153-302	26214-26222	built-in	
153-303	26223-26230	support	
153-304	26231-26234	for	
153-305	26235-26243	indexing	
153-306	26244-26250	arrays	
153-307	26250-26251	.	

#Text=Let's consider an example of indexing an array of strings using a GIN index in the case when our JSONB data contains a "keyword" element and we would like to find rows with particular keywords:
#Text={"tags": {"nk780341": {"ik397357": "iv632731"}}, "keywords": ["abc", "kef", "keh"], "publisher": "fqaJuAdjP5", "criticrating": 2}
#Text=CREATE INDEX keywords ON books USING GIN ((data->'keywords') jsonb_path_ops);
#Text=demo=# select * from books where data->'keywords' @> '["abc", "keh"]'::jsonb;
#Text=author
#Text=isbn
#Text=| rating |
#Text=data
#Text=---------+-----------------+------------+--------+-----------------------------------------------------------------------------------------------------------------------------------
#Text=1000003 | zEG406sLKQ2IU8O | viPdlu3DZm |
#Text=4 | {"tags": {"nk263020": {"ik203820": "iv817928"}}, "keywords": ["abc", "kef", "keh"], "publisher": "7NClevxuTM", "criticrating": 2}
#Text=1000004 | GCe9NypHYKDH4rD | so6TQDYzZ3 |
#Text=4 | {"tags": {"nk780341": {"ik397357": "iv632731"}}, "keywords": ["abc", "kef", "keh"], "publisher": "fqaJuAdjP5", "criticrating": 2}
#Text=(2 rows)
#Text=demo=# explain analyze select * from books where data->'keywords' @> '["abc", "keh"]'::jsonb;
#Text=QUERY PLAN
#Text=---------------------------------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books
#Text=(cost=54.75..1049.75 rows=1000 width=158) (actual time=0.026..0.028 rows=2 loops=1)
#Text=Recheck Cond: ((data -> 'keywords'::text) @> '["abc", "keh"]'::jsonb)
#Text=Heap Blocks: exact=1
#Text=Bitmap Index Scan on keywords
#Text=(cost=0.00..54.50 rows=1000 width=0) (actual time=0.014..0.014 rows=2 loops=1)
#Text=Index Cond: ((data -> 'keywords'::text) @&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; '["abc", "keh"]'::jsonb)
#Text=Planning Time: 0.131 ms
#Text=Execution Time: 0.063 ms
#Text=(7 rows)
#Text=The order of the items in the array on the right does not matter.
154-1	26252-26257	Let's	
154-2	26258-26266	consider	
154-3	26267-26269	an	
154-4	26270-26277	example	
154-5	26278-26280	of	
154-6	26281-26289	indexing	
154-7	26290-26292	an	
154-8	26293-26298	array	
154-9	26299-26301	of	
154-10	26302-26309	strings	
154-11	26310-26315	using	
154-12	26316-26317	a	
154-13	26318-26321	GIN	
154-14	26322-26327	index	
154-15	26327-26328	 	
154-16	26328-26330	in	
154-17	26330-26331	 	
154-18	26331-26334	the	
154-19	26335-26339	case	
154-20	26340-26344	when	
154-21	26345-26348	our	
154-22	26348-26349	 	
154-23	26349-26354	JSONB	
154-24	26355-26359	data	
154-25	26360-26368	contains	
154-26	26369-26370	a	
154-27	26371-26372	"	
154-28	26372-26379	keyword	
154-29	26379-26380	"	
154-30	26381-26388	element	
154-31	26389-26392	and	
154-32	26393-26395	we	
154-33	26396-26401	would	
154-34	26402-26406	like	
154-35	26407-26409	to	
154-36	26410-26414	find	
154-37	26415-26419	rows	
154-38	26420-26424	with	
154-39	26425-26435	particular	
154-40	26436-26444	keywords	
154-41	26444-26445	:	
154-42	26446-26447	{	
154-43	26447-26448	"	
154-44	26448-26452	tags	
154-45	26452-26453	"	
154-46	26453-26454	:	
154-47	26455-26456	{	
154-48	26456-26457	"	
154-49	26457-26465	nk780341	
154-50	26465-26466	"	
154-51	26466-26467	:	
154-52	26468-26469	{	
154-53	26469-26470	"	
154-54	26470-26478	ik397357	
154-55	26478-26479	"	
154-56	26479-26480	:	
154-57	26481-26482	"	
154-58	26482-26490	iv632731	
154-59	26490-26491	"	
154-60	26491-26492	}	
154-61	26492-26493	}	
154-62	26493-26494	,	
154-63	26495-26496	"	
154-64	26496-26504	keywords	
154-65	26504-26505	"	
154-66	26505-26506	:	
154-67	26507-26508	[	
154-68	26508-26509	"	
154-69	26509-26512	abc	
154-70	26512-26513	"	
154-71	26513-26514	,	
154-72	26515-26516	"	
154-73	26516-26519	kef	
154-74	26519-26520	"	
154-75	26520-26521	,	
154-76	26522-26523	"	
154-77	26523-26526	keh	
154-78	26526-26527	"	
154-79	26527-26528	]	
154-80	26528-26529	,	
154-81	26530-26531	"	
154-82	26531-26540	publisher	
154-83	26540-26541	"	
154-84	26541-26542	:	
154-85	26543-26544	"	
154-86	26544-26554	fqaJuAdjP5	
154-87	26554-26555	"	
154-88	26555-26556	,	
154-89	26557-26558	"	
154-90	26558-26570	criticrating	
154-91	26570-26571	"	
154-92	26571-26572	:	
154-93	26573-26574	2	
154-94	26574-26575	}	
154-95	26576-26582	CREATE	
154-96	26583-26588	INDEX	
154-97	26589-26597	keywords	
154-98	26598-26600	ON	
154-99	26601-26606	books	
154-100	26607-26612	USING	
154-101	26613-26616	GIN	
154-102	26617-26618	(	
154-103	26618-26619	(	
154-104	26619-26623	data	
154-105	26623-26624	-	
154-106	26624-26625	>	
154-107	26625-26626	'	
154-108	26626-26634	keywords	
154-109	26634-26635	'	
154-110	26635-26636	)	
154-111	26637-26651	jsonb_path_ops	
154-112	26651-26652	)	
154-113	26652-26653	;	
154-114	26654-26658	demo	
154-115	26658-26659	=	
154-116	26659-26660	#	
154-117	26661-26667	select	
154-118	26668-26669	*	
154-119	26670-26674	from	
154-120	26675-26680	books	
154-121	26681-26686	where	
154-122	26687-26691	data	
154-123	26691-26692	-	
154-124	26692-26693	>	
154-125	26693-26694	'	
154-126	26694-26702	keywords	
154-127	26702-26703	'	
154-128	26704-26705	@	
154-129	26705-26706	>	
154-130	26707-26708	'	
154-131	26708-26709	[	
154-132	26709-26710	"	
154-133	26710-26713	abc	
154-134	26713-26714	"	
154-135	26714-26715	,	
154-136	26716-26717	"	
154-137	26717-26720	keh	
154-138	26720-26721	"	
154-139	26721-26722	]	
154-140	26722-26723	'	
154-141	26723-26724	:	
154-142	26724-26725	:	
154-143	26725-26730	jsonb	
154-144	26730-26731	;	
154-145	26732-26738	author	
154-146	26739-26743	isbn	
154-147	26744-26745	|	
154-148	26746-26752	rating	
154-149	26753-26754	|	
154-150	26755-26759	data	
154-151	26760-26761	-	
154-152	26761-26762	-	
154-153	26762-26763	-	
154-154	26763-26764	-	
154-155	26764-26765	-	
154-156	26765-26766	-	
154-157	26766-26767	-	
154-158	26767-26768	-	
154-159	26768-26769	-	
154-160	26769-26770	+	
154-161	26770-26771	-	
154-162	26771-26772	-	
154-163	26772-26773	-	
154-164	26773-26774	-	
154-165	26774-26775	-	
154-166	26775-26776	-	
154-167	26776-26777	-	
154-168	26777-26778	-	
154-169	26778-26779	-	
154-170	26779-26780	-	
154-171	26780-26781	-	
154-172	26781-26782	-	
154-173	26782-26783	-	
154-174	26783-26784	-	
154-175	26784-26785	-	
154-176	26785-26786	-	
154-177	26786-26787	-	
154-178	26787-26788	+	
154-179	26788-26789	-	
154-180	26789-26790	-	
154-181	26790-26791	-	
154-182	26791-26792	-	
154-183	26792-26793	-	
154-184	26793-26794	-	
154-185	26794-26795	-	
154-186	26795-26796	-	
154-187	26796-26797	-	
154-188	26797-26798	-	
154-189	26798-26799	-	
154-190	26799-26800	-	
154-191	26800-26801	+	
154-192	26801-26802	-	
154-193	26802-26803	-	
154-194	26803-26804	-	
154-195	26804-26805	-	
154-196	26805-26806	-	
154-197	26806-26807	-	
154-198	26807-26808	-	
154-199	26808-26809	-	
154-200	26809-26810	+	
154-201	26810-26811	-	
154-202	26811-26812	-	
154-203	26812-26813	-	
154-204	26813-26814	-	
154-205	26814-26815	-	
154-206	26815-26816	-	
154-207	26816-26817	-	
154-208	26817-26818	-	
154-209	26818-26819	-	
154-210	26819-26820	-	
154-211	26820-26821	-	
154-212	26821-26822	-	
154-213	26822-26823	-	
154-214	26823-26824	-	
154-215	26824-26825	-	
154-216	26825-26826	-	
154-217	26826-26827	-	
154-218	26827-26828	-	
154-219	26828-26829	-	
154-220	26829-26830	-	
154-221	26830-26831	-	
154-222	26831-26832	-	
154-223	26832-26833	-	
154-224	26833-26834	-	
154-225	26834-26835	-	
154-226	26835-26836	-	
154-227	26836-26837	-	
154-228	26837-26838	-	
154-229	26838-26839	-	
154-230	26839-26840	-	
154-231	26840-26841	-	
154-232	26841-26842	-	
154-233	26842-26843	-	
154-234	26843-26844	-	
154-235	26844-26845	-	
154-236	26845-26846	-	
154-237	26846-26847	-	
154-238	26847-26848	-	
154-239	26848-26849	-	
154-240	26849-26850	-	
154-241	26850-26851	-	
154-242	26851-26852	-	
154-243	26852-26853	-	
154-244	26853-26854	-	
154-245	26854-26855	-	
154-246	26855-26856	-	
154-247	26856-26857	-	
154-248	26857-26858	-	
154-249	26858-26859	-	
154-250	26859-26860	-	
154-251	26860-26861	-	
154-252	26861-26862	-	
154-253	26862-26863	-	
154-254	26863-26864	-	
154-255	26864-26865	-	
154-256	26865-26866	-	
154-257	26866-26867	-	
154-258	26867-26868	-	
154-259	26868-26869	-	
154-260	26869-26870	-	
154-261	26870-26871	-	
154-262	26871-26872	-	
154-263	26872-26873	-	
154-264	26873-26874	-	
154-265	26874-26875	-	
154-266	26875-26876	-	
154-267	26876-26877	-	
154-268	26877-26878	-	
154-269	26878-26879	-	
154-270	26879-26880	-	
154-271	26880-26881	-	
154-272	26881-26882	-	
154-273	26882-26883	-	
154-274	26883-26884	-	
154-275	26884-26885	-	
154-276	26885-26886	-	
154-277	26886-26887	-	
154-278	26887-26888	-	
154-279	26888-26889	-	
154-280	26889-26890	-	
154-281	26890-26891	-	
154-282	26891-26892	-	
154-283	26892-26893	-	
154-284	26893-26894	-	
154-285	26894-26895	-	
154-286	26895-26896	-	
154-287	26896-26897	-	
154-288	26897-26898	-	
154-289	26898-26899	-	
154-290	26899-26900	-	
154-291	26900-26901	-	
154-292	26901-26902	-	
154-293	26902-26903	-	
154-294	26903-26904	-	
154-295	26904-26905	-	
154-296	26905-26906	-	
154-297	26906-26907	-	
154-298	26907-26908	-	
154-299	26908-26909	-	
154-300	26909-26910	-	
154-301	26910-26911	-	
154-302	26911-26912	-	
154-303	26912-26913	-	
154-304	26913-26914	-	
154-305	26914-26915	-	
154-306	26915-26916	-	
154-307	26916-26917	-	
154-308	26917-26918	-	
154-309	26918-26919	-	
154-310	26919-26920	-	
154-311	26920-26921	-	
154-312	26921-26922	-	
154-313	26922-26923	-	
154-314	26923-26924	-	
154-315	26924-26925	-	
154-316	26925-26926	-	
154-317	26926-26927	-	
154-318	26927-26928	-	
154-319	26928-26929	-	
154-320	26929-26930	-	
154-321	26930-26931	-	
154-322	26931-26932	-	
154-323	26932-26933	-	
154-324	26933-26934	-	
154-325	26934-26935	-	
154-326	26935-26936	-	
154-327	26936-26937	-	
154-328	26937-26938	-	
154-329	26938-26939	-	
154-330	26939-26940	-	
154-331	26940-26941	-	
154-332	26942-26949	1000003	
154-333	26950-26951	|	
154-334	26952-26967	zEG406sLKQ2IU8O	
154-335	26968-26969	|	
154-336	26970-26980	viPdlu3DZm	
154-337	26981-26982	|	
154-338	26983-26984	4	
154-339	26985-26986	|	
154-340	26987-26988	{	
154-341	26988-26989	"	
154-342	26989-26993	tags	
154-343	26993-26994	"	
154-344	26994-26995	:	
154-345	26996-26997	{	
154-346	26997-26998	"	
154-347	26998-27006	nk263020	
154-348	27006-27007	"	
154-349	27007-27008	:	
154-350	27009-27010	{	
154-351	27010-27011	"	
154-352	27011-27019	ik203820	
154-353	27019-27020	"	
154-354	27020-27021	:	
154-355	27022-27023	"	
154-356	27023-27031	iv817928	
154-357	27031-27032	"	
154-358	27032-27033	}	
154-359	27033-27034	}	
154-360	27034-27035	,	
154-361	27036-27037	"	
154-362	27037-27045	keywords	
154-363	27045-27046	"	
154-364	27046-27047	:	
154-365	27048-27049	[	
154-366	27049-27050	"	
154-367	27050-27053	abc	
154-368	27053-27054	"	
154-369	27054-27055	,	
154-370	27056-27057	"	
154-371	27057-27060	kef	
154-372	27060-27061	"	
154-373	27061-27062	,	
154-374	27063-27064	"	
154-375	27064-27067	keh	
154-376	27067-27068	"	
154-377	27068-27069	]	
154-378	27069-27070	,	
154-379	27071-27072	"	
154-380	27072-27081	publisher	
154-381	27081-27082	"	
154-382	27082-27083	:	
154-383	27084-27085	"	
154-384	27085-27095	7NClevxuTM	
154-385	27095-27096	"	
154-386	27096-27097	,	
154-387	27098-27099	"	
154-388	27099-27111	criticrating	
154-389	27111-27112	"	
154-390	27112-27113	:	
154-391	27114-27115	2	
154-392	27115-27116	}	
154-393	27117-27124	1000004	
154-394	27125-27126	|	
154-395	27127-27142	GCe9NypHYKDH4rD	
154-396	27143-27144	|	
154-397	27145-27155	so6TQDYzZ3	
154-398	27156-27157	|	
154-399	27158-27159	4	
154-400	27160-27161	|	
154-401	27162-27163	{	
154-402	27163-27164	"	
154-403	27164-27168	tags	
154-404	27168-27169	"	
154-405	27169-27170	:	
154-406	27171-27172	{	
154-407	27172-27173	"	
154-408	27173-27181	nk780341	
154-409	27181-27182	"	
154-410	27182-27183	:	
154-411	27184-27185	{	
154-412	27185-27186	"	
154-413	27186-27194	ik397357	
154-414	27194-27195	"	
154-415	27195-27196	:	
154-416	27197-27198	"	
154-417	27198-27206	iv632731	
154-418	27206-27207	"	
154-419	27207-27208	}	
154-420	27208-27209	}	
154-421	27209-27210	,	
154-422	27211-27212	"	
154-423	27212-27220	keywords	
154-424	27220-27221	"	
154-425	27221-27222	:	
154-426	27223-27224	[	
154-427	27224-27225	"	
154-428	27225-27228	abc	
154-429	27228-27229	"	
154-430	27229-27230	,	
154-431	27231-27232	"	
154-432	27232-27235	kef	
154-433	27235-27236	"	
154-434	27236-27237	,	
154-435	27238-27239	"	
154-436	27239-27242	keh	
154-437	27242-27243	"	
154-438	27243-27244	]	
154-439	27244-27245	,	
154-440	27246-27247	"	
154-441	27247-27256	publisher	
154-442	27256-27257	"	
154-443	27257-27258	:	
154-444	27259-27260	"	
154-445	27260-27270	fqaJuAdjP5	
154-446	27270-27271	"	
154-447	27271-27272	,	
154-448	27273-27274	"	
154-449	27274-27286	criticrating	
154-450	27286-27287	"	
154-451	27287-27288	:	
154-452	27289-27290	2	
154-453	27290-27291	}	
154-454	27292-27293	(	
154-455	27293-27294	2	
154-456	27295-27299	rows	
154-457	27299-27300	)	
154-458	27301-27305	demo	
154-459	27305-27306	=	
154-460	27306-27307	#	
154-461	27308-27315	explain	
154-462	27316-27323	analyze	
154-463	27324-27330	select	
154-464	27331-27332	*	
154-465	27333-27337	from	
154-466	27338-27343	books	
154-467	27344-27349	where	
154-468	27350-27354	data	
154-469	27354-27355	-	
154-470	27355-27356	>	
154-471	27356-27357	'	
154-472	27357-27365	keywords	
154-473	27365-27366	'	
154-474	27367-27368	@	
154-475	27368-27369	>	
154-476	27370-27371	'	
154-477	27371-27372	[	
154-478	27372-27373	"	
154-479	27373-27376	abc	
154-480	27376-27377	"	
154-481	27377-27378	,	
154-482	27379-27380	"	
154-483	27380-27383	keh	
154-484	27383-27384	"	
154-485	27384-27385	]	
154-486	27385-27386	'	
154-487	27386-27387	:	
154-488	27387-27388	:	
154-489	27388-27393	jsonb	
154-490	27393-27394	;	
154-491	27395-27400	QUERY	
154-492	27401-27405	PLAN	
154-493	27406-27407	-	
154-494	27407-27408	-	
154-495	27408-27409	-	
154-496	27409-27410	-	
154-497	27410-27411	-	
154-498	27411-27412	-	
154-499	27412-27413	-	
154-500	27413-27414	-	
154-501	27414-27415	-	
154-502	27415-27416	-	
154-503	27416-27417	-	
154-504	27417-27418	-	
154-505	27418-27419	-	
154-506	27419-27420	-	
154-507	27420-27421	-	
154-508	27421-27422	-	
154-509	27422-27423	-	
154-510	27423-27424	-	
154-511	27424-27425	-	
154-512	27425-27426	-	
154-513	27426-27427	-	
154-514	27427-27428	-	
154-515	27428-27429	-	
154-516	27429-27430	-	
154-517	27430-27431	-	
154-518	27431-27432	-	
154-519	27432-27433	-	
154-520	27433-27434	-	
154-521	27434-27435	-	
154-522	27435-27436	-	
154-523	27436-27437	-	
154-524	27437-27438	-	
154-525	27438-27439	-	
154-526	27439-27440	-	
154-527	27440-27441	-	
154-528	27441-27442	-	
154-529	27442-27443	-	
154-530	27443-27444	-	
154-531	27444-27445	-	
154-532	27445-27446	-	
154-533	27446-27447	-	
154-534	27447-27448	-	
154-535	27448-27449	-	
154-536	27449-27450	-	
154-537	27450-27451	-	
154-538	27451-27452	-	
154-539	27452-27453	-	
154-540	27453-27454	-	
154-541	27454-27455	-	
154-542	27455-27456	-	
154-543	27456-27457	-	
154-544	27457-27458	-	
154-545	27458-27459	-	
154-546	27459-27460	-	
154-547	27460-27461	-	
154-548	27461-27462	-	
154-549	27462-27463	-	
154-550	27463-27464	-	
154-551	27464-27465	-	
154-552	27465-27466	-	
154-553	27466-27467	-	
154-554	27467-27468	-	
154-555	27468-27469	-	
154-556	27469-27470	-	
154-557	27470-27471	-	
154-558	27471-27472	-	
154-559	27472-27473	-	
154-560	27473-27474	-	
154-561	27474-27475	-	
154-562	27475-27476	-	
154-563	27476-27477	-	
154-564	27477-27478	-	
154-565	27478-27479	-	
154-566	27479-27480	-	
154-567	27480-27481	-	
154-568	27481-27482	-	
154-569	27482-27483	-	
154-570	27483-27484	-	
154-571	27484-27485	-	
154-572	27485-27486	-	
154-573	27486-27487	-	
154-574	27487-27488	-	
154-575	27488-27489	-	
154-576	27489-27490	-	
154-577	27490-27491	-	
154-578	27491-27492	-	
154-579	27492-27493	-	
154-580	27493-27494	-	
154-581	27494-27495	-	
154-582	27495-27496	-	
154-583	27496-27497	-	
154-584	27497-27498	-	
154-585	27498-27499	-	
154-586	27499-27500	-	
154-587	27500-27501	-	
154-588	27501-27502	-	
154-589	27502-27503	-	
154-590	27503-27504	-	
154-591	27504-27505	-	
154-592	27505-27506	-	
154-593	27506-27507	-	
154-594	27507-27508	-	
154-595	27508-27509	-	
154-596	27509-27510	-	
154-597	27510-27511	-	
154-598	27511-27512	-	
154-599	27512-27513	-	
154-600	27513-27514	-	
154-601	27514-27515	-	
154-602	27515-27516	-	
154-603	27516-27517	-	
154-604	27517-27518	-	
154-605	27518-27519	-	
154-606	27519-27520	-	
154-607	27520-27521	-	
154-608	27521-27522	-	
154-609	27522-27523	-	
154-610	27524-27530	Bitmap	
154-611	27531-27535	Heap	
154-612	27536-27540	Scan	
154-613	27541-27543	on	
154-614	27544-27549	books	
154-615	27550-27551	(	
154-616	27551-27555	cost	
154-617	27555-27556	=	
154-618	27556-27561	54.75	
154-619	27561-27562	.	
154-620	27562-27570	.1049.75	
154-621	27571-27575	rows	
154-622	27575-27576	=	
154-623	27576-27580	1000	
154-624	27581-27586	width	
154-625	27586-27587	=	
154-626	27587-27590	158	
154-627	27590-27591	)	
154-628	27592-27593	(	
154-629	27593-27599	actual	
154-630	27600-27604	time	
154-631	27604-27605	=	
154-632	27605-27610	0.026	
154-633	27610-27611	.	
154-634	27611-27617	.0.028	
154-635	27618-27622	rows	
154-636	27622-27623	=	
154-637	27623-27624	2	
154-638	27625-27630	loops	
154-639	27630-27631	=	
154-640	27631-27632	1	
154-641	27632-27633	)	
154-642	27634-27641	Recheck	
154-643	27642-27646	Cond	
154-644	27646-27647	:	
154-645	27648-27649	(	
154-646	27649-27650	(	
154-647	27650-27654	data	
154-648	27655-27656	-	
154-649	27656-27657	>	
154-650	27658-27659	'	
154-651	27659-27667	keywords	
154-652	27667-27668	'	
154-653	27668-27669	:	
154-654	27669-27670	:	
154-655	27670-27674	text	
154-656	27674-27675	)	
154-657	27676-27677	@	
154-658	27677-27678	>	
154-659	27679-27680	'	
154-660	27680-27681	[	
154-661	27681-27682	"	
154-662	27682-27685	abc	
154-663	27685-27686	"	
154-664	27686-27687	,	
154-665	27688-27689	"	
154-666	27689-27692	keh	
154-667	27692-27693	"	
154-668	27693-27694	]	
154-669	27694-27695	'	
154-670	27695-27696	:	
154-671	27696-27697	:	
154-672	27697-27702	jsonb	
154-673	27702-27703	)	
154-674	27704-27708	Heap	
154-675	27709-27715	Blocks	
154-676	27715-27716	:	
154-677	27717-27722	exact	
154-678	27722-27723	=	
154-679	27723-27724	1	
154-680	27725-27731	Bitmap	
154-681	27732-27737	Index	
154-682	27738-27742	Scan	
154-683	27743-27745	on	
154-684	27746-27754	keywords	
154-685	27755-27756	(	
154-686	27756-27760	cost	
154-687	27760-27761	=	
154-688	27761-27765	0.00	
154-689	27765-27766	.	
154-690	27766-27772	.54.50	
154-691	27773-27777	rows	
154-692	27777-27778	=	
154-693	27778-27782	1000	
154-694	27783-27788	width	
154-695	27788-27789	=	
154-696	27789-27790	0	
154-697	27790-27791	)	
154-698	27792-27793	(	
154-699	27793-27799	actual	
154-700	27800-27804	time	
154-701	27804-27805	=	
154-702	27805-27810	0.014	
154-703	27810-27811	.	
154-704	27811-27817	.0.014	
154-705	27818-27822	rows	
154-706	27822-27823	=	
154-707	27823-27824	2	
154-708	27825-27830	loops	
154-709	27830-27831	=	
154-710	27831-27832	1	
154-711	27832-27833	)	
154-712	27834-27839	Index	
154-713	27840-27844	Cond	
154-714	27844-27845	:	
154-715	27846-27847	(	
154-716	27847-27848	(	
154-717	27848-27852	data	
154-718	27853-27854	-	
154-719	27854-27855	>	
154-720	27856-27857	'	
154-721	27857-27865	keywords	
154-722	27865-27866	'	
154-723	27866-27867	:	
154-724	27867-27868	:	
154-725	27868-27872	text	
154-726	27872-27873	)	
154-727	27874-27875	@	
154-728	27875-27876	&	
154-729	27876-27879	amp	
154-730	27879-27880	;	
154-731	27880-27883	amp	
154-732	27883-27884	;	
154-733	27884-27887	amp	
154-734	27887-27888	;	
154-735	27888-27891	amp	
154-736	27891-27892	;	
154-737	27892-27895	amp	
154-738	27895-27896	;	
154-739	27896-27899	amp	
154-740	27899-27900	;	
154-741	27900-27903	amp	
154-742	27903-27904	;	
154-743	27904-27907	amp	
154-744	27907-27908	;	
154-745	27908-27911	amp	
154-746	27911-27912	;	
154-747	27912-27915	amp	
154-748	27915-27916	;	
154-749	27916-27918	gt	
154-750	27918-27919	;	
154-751	27920-27921	'	
154-752	27921-27922	[	
154-753	27922-27923	"	
154-754	27923-27926	abc	
154-755	27926-27927	"	
154-756	27927-27928	,	
154-757	27929-27930	"	
154-758	27930-27933	keh	
154-759	27933-27934	"	
154-760	27934-27935	]	
154-761	27935-27936	'	
154-762	27936-27937	:	
154-763	27937-27938	:	
154-764	27938-27943	jsonb	
154-765	27943-27944	)	
154-766	27945-27953	Planning	
154-767	27954-27958	Time	
154-768	27958-27959	:	
154-769	27960-27965	0.131	
154-770	27966-27968	ms	
154-771	27969-27978	Execution	
154-772	27979-27983	Time	
154-773	27983-27984	:	
154-774	27985-27990	0.063	
154-775	27991-27993	ms	
154-776	27994-27995	(	
154-777	27995-27996	7	
154-778	27997-28001	rows	
154-779	28001-28002	)	
154-780	28003-28006	The	
154-781	28007-28012	order	
154-782	28013-28015	of	
154-783	28016-28019	the	
154-784	28020-28025	items	
154-785	28026-28028	in	
154-786	28029-28032	the	
154-787	28033-28038	array	
154-788	28039-28041	on	
154-789	28042-28045	the	
154-790	28046-28051	right	
154-791	28052-28056	does	
154-792	28057-28060	not	
154-793	28061-28067	matter	
154-794	28067-28068	.	

#Text=For example, the following query would return the same result as the previous:
#Text=demo=# explain analyze select * from books where data->'keywords' @> '["keh","abc"]'::jsonb;
#Text=All elements in the right side array of the containment operator need to be present - basically like an "AND" operator.
155-1	28069-28072	For	
155-2	28073-28080	example	
155-3	28080-28081	,	
155-4	28082-28085	the	
155-5	28086-28095	following	
155-6	28096-28101	query	
155-7	28102-28107	would	
155-8	28108-28114	return	
155-9	28115-28118	the	
155-10	28119-28123	same	
155-11	28124-28130	result	
155-12	28131-28133	as	
155-13	28134-28137	the	
155-14	28138-28146	previous	
155-15	28146-28147	:	
155-16	28148-28152	demo	
155-17	28152-28153	=	
155-18	28153-28154	#	
155-19	28155-28162	explain	
155-20	28163-28170	analyze	
155-21	28171-28177	select	
155-22	28178-28179	*	
155-23	28180-28184	from	
155-24	28185-28190	books	
155-25	28191-28196	where	
155-26	28197-28201	data	
155-27	28201-28202	-	
155-28	28202-28203	>	
155-29	28203-28204	'	
155-30	28204-28212	keywords	
155-31	28212-28213	'	
155-32	28214-28215	@	
155-33	28215-28216	>	
155-34	28217-28218	'	
155-35	28218-28219	[	
155-36	28219-28220	"	
155-37	28220-28223	keh	
155-38	28223-28224	"	
155-39	28224-28225	,	
155-40	28225-28226	"	
155-41	28226-28229	abc	
155-42	28229-28230	"	
155-43	28230-28231	]	
155-44	28231-28232	'	
155-45	28232-28233	:	
155-46	28233-28234	:	
155-47	28234-28239	jsonb	
155-48	28239-28240	;	
155-49	28241-28244	All	
155-50	28245-28253	elements	
155-51	28254-28256	in	
155-52	28257-28260	the	
155-53	28261-28266	right	
155-54	28267-28271	side	
155-55	28272-28277	array	
155-56	28278-28280	of	
155-57	28281-28284	the	
155-58	28285-28296	containment	
155-59	28297-28305	operator	
155-60	28306-28310	need	
155-61	28311-28313	to	
155-62	28314-28316	be	
155-63	28317-28324	present	
155-64	28325-28326	-	
155-65	28327-28336	basically	
155-66	28337-28341	like	
155-67	28342-28344	an	
155-68	28345-28346	"	
155-69	28346-28349	AND	
155-70	28349-28350	"	
155-71	28351-28359	operator	
155-72	28359-28360	.	

#Text=If you want "OR" behavior, you can construct it in the WHERE clause:
#Text=demo=# explain analyze select * from books where (data->'keywords' @> '["abc"]'::jsonb OR data->'keywords' @> '["keh"]'::jsonb);
#Text=More details on the behavior of the containment operators with arrays can be found in the documentation.
156-1	28361-28363	If	
156-2	28364-28367	you	
156-3	28368-28372	want	
156-4	28373-28374	"	
156-5	28374-28376	OR	
156-6	28376-28377	"	
156-7	28378-28386	behavior	
156-8	28386-28387	,	
156-9	28388-28391	you	
156-10	28392-28395	can	
156-11	28396-28405	construct	
156-12	28406-28408	it	
156-13	28409-28411	in	
156-14	28412-28415	the	
156-15	28416-28421	WHERE	
156-16	28422-28428	clause	
156-17	28428-28429	:	
156-18	28430-28434	demo	
156-19	28434-28435	=	
156-20	28435-28436	#	
156-21	28437-28444	explain	
156-22	28445-28452	analyze	
156-23	28453-28459	select	
156-24	28460-28461	*	
156-25	28462-28466	from	
156-26	28467-28472	books	
156-27	28473-28478	where	
156-28	28479-28480	(	
156-29	28480-28484	data	
156-30	28484-28485	-	
156-31	28485-28486	>	
156-32	28486-28487	'	
156-33	28487-28495	keywords	
156-34	28495-28496	'	
156-35	28497-28498	@	
156-36	28498-28499	>	
156-37	28500-28501	'	
156-38	28501-28502	[	
156-39	28502-28503	"	
156-40	28503-28506	abc	
156-41	28506-28507	"	
156-42	28507-28508	]	
156-43	28508-28509	'	
156-44	28509-28510	:	
156-45	28510-28511	:	
156-46	28511-28516	jsonb	
156-47	28517-28519	OR	
156-48	28520-28524	data	
156-49	28524-28525	-	
156-50	28525-28526	>	
156-51	28526-28527	'	
156-52	28527-28535	keywords	
156-53	28535-28536	'	
156-54	28537-28538	@	
156-55	28538-28539	>	
156-56	28540-28541	'	
156-57	28541-28542	[	
156-58	28542-28543	"	
156-59	28543-28546	keh	
156-60	28546-28547	"	
156-61	28547-28548	]	
156-62	28548-28549	'	
156-63	28549-28550	:	
156-64	28550-28551	:	
156-65	28551-28556	jsonb	
156-66	28556-28557	)	
156-67	28557-28558	;	
156-68	28559-28563	More	
156-69	28564-28571	details	
156-70	28572-28574	on	
156-71	28575-28578	the	
156-72	28579-28587	behavior	
156-73	28588-28590	of	
156-74	28591-28594	the	
156-75	28595-28606	containment	
156-76	28607-28616	operators	
156-77	28617-28621	with	
156-78	28622-28628	arrays	
156-79	28629-28632	can	
156-80	28633-28635	be	
156-81	28636-28641	found	
156-82	28642-28644	in	
156-83	28645-28648	the	
156-84	28649-28662	documentation	
156-85	28662-28663	.	

#Text=SQL/JSON & JSONPath
#Text=SQL standard added support for JSON  in SQL - SQL/JSON Standard-2016.
157-1	28664-28667	SQL	
157-2	28667-28668	/	
157-3	28668-28672	JSON	
157-4	28673-28674	&	
157-5	28675-28683	JSONPath	
157-6	28684-28687	SQL	
157-7	28688-28696	standard	
157-8	28697-28702	added	
157-9	28703-28710	support	
157-10	28711-28714	for	
157-11	28715-28719	JSON	
157-12	28719-28720	 	
157-13	28721-28723	in	
157-14	28724-28727	SQL	
157-15	28728-28729	-	
157-16	28730-28733	SQL	
157-17	28733-28734	/	
157-18	28734-28738	JSON	
157-19	28739-28747	Standard	
157-20	28747-28748	-	
157-21	28748-28752	2016	
157-22	28752-28753	.	

#Text=With the PostgreSQL 12/13 releases, PostgreSQL has one of the best implementations of the SQL/JSON standard.
158-1	28754-28758	With	
158-2	28758-28759	 	
158-3	28759-28762	the	
158-4	28763-28773	PostgreSQL	
158-5	28773-28774	 	
158-6	28774-28776	12	
158-7	28776-28777	/	
158-8	28777-28779	13	
158-9	28780-28788	releases	
158-10	28788-28789	,	
158-11	28790-28800	PostgreSQL	
158-12	28801-28804	has	
158-13	28805-28808	one	
158-14	28809-28811	of	
158-15	28812-28815	the	
158-16	28816-28820	best	
158-17	28821-28836	implementations	
158-18	28837-28839	of	
158-19	28840-28843	the	
158-20	28844-28847	SQL	
158-21	28847-28848	/	
158-22	28848-28852	JSON	
158-23	28853-28861	standard	
158-24	28861-28862	.	

#Text=For more details refer to the PostgreSQL 12 announcement.
159-1	28863-28866	For	
159-2	28867-28871	more	
159-3	28872-28879	details	
159-4	28880-28885	refer	
159-5	28886-28888	to	
159-6	28889-28892	the	
159-7	28893-28903	PostgreSQL	
159-8	28904-28906	12	
159-9	28907-28919	announcement	
159-10	28919-28920	.	

#Text=One of the core features of SQL/JSON is support for the JSONPath language to query JSONB data.
160-1	28921-28924	One	
160-2	28925-28927	of	
160-3	28928-28931	the	
160-4	28932-28936	core	
160-5	28937-28945	features	
160-6	28946-28948	of	
160-7	28949-28952	SQL	
160-8	28952-28953	/	
160-9	28953-28957	JSON	
160-10	28958-28960	is	
160-11	28961-28968	support	
160-12	28969-28972	for	
160-13	28973-28976	the	
160-14	28977-28985	JSONPath	
160-15	28986-28994	language	
160-16	28995-28997	to	
160-17	28998-29003	query	
160-18	29004-29009	JSONB	
160-19	29010-29014	data	
160-20	29014-29015	.	

#Text=JSONPath allows you to specify an expression (using a syntax similar to the property access notation in Javascript) to query your JSONB data.
161-1	29016-29024	JSONPath	
161-2	29025-29031	allows	
161-3	29032-29035	you	
161-4	29036-29038	to	
161-5	29039-29046	specify	
161-6	29047-29049	an	
161-7	29050-29060	expression	
161-8	29061-29062	(	
161-9	29062-29067	using	
161-10	29068-29069	a	
161-11	29070-29076	syntax	
161-12	29077-29084	similar	
161-13	29085-29087	to	
161-14	29088-29091	the	
161-15	29092-29100	property	
161-16	29101-29107	access	
161-17	29108-29116	notation	
161-18	29117-29119	in	
161-19	29120-29130	Javascript	
161-20	29130-29131	)	
161-21	29132-29134	to	
161-22	29135-29140	query	
161-23	29141-29145	your	
161-24	29146-29151	JSONB	
161-25	29152-29156	data	
161-26	29156-29157	.	

#Text=This makes it simple and intuitive, but is also very powerful to query your JSONB data.
162-1	29158-29162	This	
162-2	29163-29168	makes	
162-3	29169-29171	it	
162-4	29172-29178	simple	
162-5	29178-29179	 	
162-6	29179-29182	and	
162-7	29183-29192	intuitive	
162-8	29192-29193	,	
162-9	29194-29197	but	
162-10	29198-29200	is	
162-11	29201-29205	also	
162-12	29206-29210	very	
162-13	29211-29219	powerful	
162-14	29220-29222	to	
162-15	29223-29228	query	
162-16	29229-29233	your	
162-17	29234-29239	JSONB	
162-18	29240-29244	data	
162-19	29244-29245	.	

#Text=Think of  JSONPath as the logical equivalent of XPath for XML.
#Text=.key
#Text=Returns an object member with the specified key.
#Text=[*]
#Text=Wildcard array element accessor that returns all array elements.
163-1	29246-29251	Think	
163-2	29252-29254	of	
163-3	29254-29255	 	
163-4	29256-29264	JSONPath	
163-5	29265-29267	as	
163-6	29268-29271	the	
163-7	29272-29279	logical	
163-8	29280-29290	equivalent	
163-9	29291-29293	of	
163-10	29294-29299	XPath	
163-11	29300-29303	for	
163-12	29304-29307	XML	
163-13	29307-29308	.	
163-14	29309-29310	.	
163-15	29310-29313	key	
163-16	29314-29321	Returns	
163-17	29322-29324	an	
163-18	29325-29331	object	
163-19	29332-29338	member	
163-20	29339-29343	with	
163-21	29344-29347	the	
163-22	29348-29357	specified	
163-23	29358-29361	key	
163-24	29361-29362	.	
163-25	29363-29364	[	
163-26	29364-29365	*	
163-27	29365-29366	]	
163-28	29367-29375	Wildcard	
163-29	29376-29381	array	
163-30	29382-29389	element	
163-31	29390-29398	accessor	
163-32	29399-29403	that	
163-33	29404-29411	returns	
163-34	29412-29415	all	
163-35	29416-29421	array	
163-36	29422-29430	elements	
163-37	29430-29431	.	

#Text=Wildcard member accessor that returns the values of all members located at the top level of the current object.
#Text=.**
#Text=Recursive wildcard member accessor that processes all levels of the JSON hierarchy of the current object and returns all the member values, regardless of their nesting level.
164-1	29432-29440	Wildcard	
164-2	29441-29447	member	
164-3	29448-29456	accessor	
164-4	29457-29461	that	
164-5	29462-29469	returns	
164-6	29470-29473	the	
164-7	29474-29480	values	
164-8	29481-29483	of	
164-9	29484-29487	all	
164-10	29488-29495	members	
164-11	29496-29503	located	
164-12	29504-29506	at	
164-13	29507-29510	the	
164-14	29511-29514	top	
164-15	29515-29520	level	
164-16	29521-29523	of	
164-17	29524-29527	the	
164-18	29528-29535	current	
164-19	29536-29542	object	
164-20	29542-29543	.	
164-21	29544-29545	.	
164-22	29545-29546	*	
164-23	29546-29547	*	
164-24	29548-29557	Recursive	
164-25	29558-29566	wildcard	
164-26	29567-29573	member	
164-27	29574-29582	accessor	
164-28	29583-29587	that	
164-29	29588-29597	processes	
164-30	29598-29601	all	
164-31	29602-29608	levels	
164-32	29609-29611	of	
164-33	29612-29615	the	
164-34	29616-29620	JSON	
164-35	29621-29630	hierarchy	
164-36	29631-29633	of	
164-37	29634-29637	the	
164-38	29638-29645	current	
164-39	29646-29652	object	
164-40	29653-29656	and	
164-41	29657-29664	returns	
164-42	29665-29668	all	
164-43	29669-29672	the	
164-44	29673-29679	member	
164-45	29680-29686	values	
164-46	29686-29687	,	
164-47	29688-29698	regardless	
164-48	29699-29701	of	
164-49	29702-29707	their	
164-50	29708-29715	nesting	
164-51	29716-29721	level	
164-52	29721-29722	.	

#Text=Refer to JSONPath documentation for the full list of operators.
165-1	29723-29728	Refer	
165-2	29729-29731	to	
165-3	29732-29740	JSONPath	
165-4	29741-29754	documentation	
165-5	29755-29758	for	
165-6	29759-29762	the	
165-7	29763-29767	full	
165-8	29768-29772	list	
165-9	29773-29775	of	
165-10	29776-29785	operators	
165-11	29785-29786	.	

#Text=JSONPath also supports a variety of filter expressions.
166-1	29787-29795	JSONPath	
166-2	29796-29800	also	
166-3	29801-29809	supports	
166-4	29810-29811	a	
166-5	29812-29819	variety	
166-6	29820-29822	of	
166-7	29823-29829	filter	
166-8	29830-29841	expressions	
166-9	29841-29842	.	

#Text=JSONPath Functions
#Text=PostgreSQL 12 provides several functions to use JSONPath to query your JSONB data.
167-1	29843-29851	JSONPath	
167-2	29852-29861	Functions	
167-3	29862-29872	PostgreSQL	
167-4	29873-29875	12	
167-5	29876-29884	provides	
167-6	29885-29892	several	
167-7	29893-29902	functions	
167-8	29903-29905	to	
167-9	29906-29909	use	
167-10	29910-29918	JSONPath	
167-11	29919-29921	to	
167-12	29922-29927	query	
167-13	29928-29932	your	
167-14	29933-29938	JSONB	
167-15	29939-29943	data	
167-16	29943-29944	.	

#Text=From the docs:
#Text=jsonb_path_exists - Checks whether JSONB path returns any item for the specified JSON value.
#Text=jsonb_path_match - Returns the result of JSONB path predicate check for the specified JSONB value.
168-1	29945-29949	From	
168-2	29950-29953	the	
168-3	29954-29958	docs	
168-4	29958-29959	:	
168-5	29960-29977	jsonb_path_exists	
168-6	29978-29979	-	
168-7	29980-29986	Checks	
168-8	29987-29994	whether	
168-9	29995-30000	JSONB	
168-10	30001-30005	path	
168-11	30006-30013	returns	
168-12	30014-30017	any	
168-13	30018-30022	item	
168-14	30023-30026	for	
168-15	30027-30030	the	
168-16	30031-30040	specified	
168-17	30041-30045	JSON	
168-18	30046-30051	value	
168-19	30051-30052	.	
168-20	30053-30069	jsonb_path_match	
168-21	30070-30071	-	
168-22	30072-30079	Returns	
168-23	30080-30083	the	
168-24	30084-30090	result	
168-25	30091-30093	of	
168-26	30094-30099	JSONB	
168-27	30100-30104	path	
168-28	30105-30114	predicate	
168-29	30115-30120	check	
168-30	30121-30124	for	
168-31	30125-30128	the	
168-32	30129-30138	specified	
168-33	30139-30144	JSONB	
168-34	30145-30150	value	
168-35	30150-30151	.	

#Text=Only the first item of the result is taken into account.
169-1	30152-30156	Only	
169-2	30157-30160	the	
169-3	30161-30166	first	
169-4	30167-30171	item	
169-5	30172-30174	of	
169-6	30175-30178	the	
169-7	30179-30185	result	
169-8	30186-30188	is	
169-9	30189-30194	taken	
169-10	30195-30199	into	
169-11	30200-30207	account	
169-12	30207-30208	.	

#Text=If the result is not Boolean, then null is returned.
#Text=jsonb_path_query - Gets all JSONB items returned by JSONB path for the specified JSONB value.
170-1	30209-30211	If	
170-2	30212-30215	the	
170-3	30216-30222	result	
170-4	30223-30225	is	
170-5	30226-30229	not	
170-6	30230-30237	Boolean	
170-7	30237-30238	,	
170-8	30239-30243	then	
170-9	30244-30248	null	
170-10	30249-30251	is	
170-11	30252-30260	returned	
170-12	30260-30261	.	
170-13	30262-30278	jsonb_path_query	
170-14	30279-30280	-	
170-15	30281-30285	Gets	
170-16	30286-30289	all	
170-17	30290-30295	JSONB	
170-18	30296-30301	items	
170-19	30302-30310	returned	
170-20	30311-30313	by	
170-21	30314-30319	JSONB	
170-22	30320-30324	path	
170-23	30325-30328	for	
170-24	30329-30332	the	
170-25	30333-30342	specified	
170-26	30343-30348	JSONB	
170-27	30349-30354	value	
170-28	30354-30355	.	

#Text=There are also a couple of other variants of this function that handle arrays of objects.
171-1	30356-30361	There	
171-2	30362-30365	are	
171-3	30366-30370	also	
171-4	30371-30372	a	
171-5	30373-30379	couple	
171-6	30380-30382	of	
171-7	30383-30388	other	
171-8	30389-30397	variants	
171-9	30398-30400	of	
171-10	30401-30405	this	
171-11	30406-30414	function	
171-12	30415-30419	that	
171-13	30420-30426	handle	
171-14	30427-30433	arrays	
171-15	30434-30436	of	
171-16	30437-30444	objects	
171-17	30444-30445	.	

#Text=Let's start with a simple query - finding books by publisher:
#Text=demo=# select * from books where data @@ '$.publisher == "ktjKEZ1tvq"';
#Text=id | author | isbn | rating | data
#Text=---------+-----------------+------------+--------+----------------------------------------------------------------------------------------------------------------------------------
#Text=1000001 | 4RNsovI2haTgU7l | GwSoX67gLS | 2 | {"tags": {"nk542369": {"ik55240": "iv305393"}}, "keywords": ["abc", "def", "geh"], "publisher": "ktjKEZ1tvq", "criticrating": 0}
#Text=(1 row)
#Text=demo=# explain analyze select * from books where data @@ '$.publisher == "ktjKEZ1tvq"';
#Text=QUERY PLAN
#Text=--------------------------------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on books (cost=21.75..1014.25 rows=1000 width=158) (actual time=0.123..0.124 rows=1 loops=1)
#Text=Recheck Cond: (data @@ '($."
172-1	30446-30451	Let's	
172-2	30452-30457	start	
172-3	30458-30462	with	
172-4	30463-30464	a	
172-5	30465-30471	simple	
172-6	30472-30477	query	
172-7	30478-30479	-	
172-8	30480-30487	finding	
172-9	30488-30493	books	
172-10	30494-30496	by	
172-11	30497-30506	publisher	
172-12	30506-30507	:	
172-13	30508-30512	demo	
172-14	30512-30513	=	
172-15	30513-30514	#	
172-16	30515-30521	select	
172-17	30522-30523	*	
172-18	30524-30528	from	
172-19	30529-30534	books	
172-20	30535-30540	where	
172-21	30541-30545	data	
172-22	30546-30547	@	
172-23	30547-30548	@	
172-24	30549-30550	'	
172-25	30550-30551	$	
172-26	30551-30552	.	
172-27	30552-30561	publisher	
172-28	30562-30563	=	
172-29	30563-30564	=	
172-30	30565-30566	"	
172-31	30566-30576	ktjKEZ1tvq	
172-32	30576-30577	"	
172-33	30577-30578	'	
172-34	30578-30579	;	
172-35	30580-30582	id	
172-36	30583-30584	|	
172-37	30585-30591	author	
172-38	30592-30593	|	
172-39	30594-30598	isbn	
172-40	30599-30600	|	
172-41	30601-30607	rating	
172-42	30608-30609	|	
172-43	30610-30614	data	
172-44	30615-30616	-	
172-45	30616-30617	-	
172-46	30617-30618	-	
172-47	30618-30619	-	
172-48	30619-30620	-	
172-49	30620-30621	-	
172-50	30621-30622	-	
172-51	30622-30623	-	
172-52	30623-30624	-	
172-53	30624-30625	+	
172-54	30625-30626	-	
172-55	30626-30627	-	
172-56	30627-30628	-	
172-57	30628-30629	-	
172-58	30629-30630	-	
172-59	30630-30631	-	
172-60	30631-30632	-	
172-61	30632-30633	-	
172-62	30633-30634	-	
172-63	30634-30635	-	
172-64	30635-30636	-	
172-65	30636-30637	-	
172-66	30637-30638	-	
172-67	30638-30639	-	
172-68	30639-30640	-	
172-69	30640-30641	-	
172-70	30641-30642	-	
172-71	30642-30643	+	
172-72	30643-30644	-	
172-73	30644-30645	-	
172-74	30645-30646	-	
172-75	30646-30647	-	
172-76	30647-30648	-	
172-77	30648-30649	-	
172-78	30649-30650	-	
172-79	30650-30651	-	
172-80	30651-30652	-	
172-81	30652-30653	-	
172-82	30653-30654	-	
172-83	30654-30655	-	
172-84	30655-30656	+	
172-85	30656-30657	-	
172-86	30657-30658	-	
172-87	30658-30659	-	
172-88	30659-30660	-	
172-89	30660-30661	-	
172-90	30661-30662	-	
172-91	30662-30663	-	
172-92	30663-30664	-	
172-93	30664-30665	+	
172-94	30665-30666	-	
172-95	30666-30667	-	
172-96	30667-30668	-	
172-97	30668-30669	-	
172-98	30669-30670	-	
172-99	30670-30671	-	
172-100	30671-30672	-	
172-101	30672-30673	-	
172-102	30673-30674	-	
172-103	30674-30675	-	
172-104	30675-30676	-	
172-105	30676-30677	-	
172-106	30677-30678	-	
172-107	30678-30679	-	
172-108	30679-30680	-	
172-109	30680-30681	-	
172-110	30681-30682	-	
172-111	30682-30683	-	
172-112	30683-30684	-	
172-113	30684-30685	-	
172-114	30685-30686	-	
172-115	30686-30687	-	
172-116	30687-30688	-	
172-117	30688-30689	-	
172-118	30689-30690	-	
172-119	30690-30691	-	
172-120	30691-30692	-	
172-121	30692-30693	-	
172-122	30693-30694	-	
172-123	30694-30695	-	
172-124	30695-30696	-	
172-125	30696-30697	-	
172-126	30697-30698	-	
172-127	30698-30699	-	
172-128	30699-30700	-	
172-129	30700-30701	-	
172-130	30701-30702	-	
172-131	30702-30703	-	
172-132	30703-30704	-	
172-133	30704-30705	-	
172-134	30705-30706	-	
172-135	30706-30707	-	
172-136	30707-30708	-	
172-137	30708-30709	-	
172-138	30709-30710	-	
172-139	30710-30711	-	
172-140	30711-30712	-	
172-141	30712-30713	-	
172-142	30713-30714	-	
172-143	30714-30715	-	
172-144	30715-30716	-	
172-145	30716-30717	-	
172-146	30717-30718	-	
172-147	30718-30719	-	
172-148	30719-30720	-	
172-149	30720-30721	-	
172-150	30721-30722	-	
172-151	30722-30723	-	
172-152	30723-30724	-	
172-153	30724-30725	-	
172-154	30725-30726	-	
172-155	30726-30727	-	
172-156	30727-30728	-	
172-157	30728-30729	-	
172-158	30729-30730	-	
172-159	30730-30731	-	
172-160	30731-30732	-	
172-161	30732-30733	-	
172-162	30733-30734	-	
172-163	30734-30735	-	
172-164	30735-30736	-	
172-165	30736-30737	-	
172-166	30737-30738	-	
172-167	30738-30739	-	
172-168	30739-30740	-	
172-169	30740-30741	-	
172-170	30741-30742	-	
172-171	30742-30743	-	
172-172	30743-30744	-	
172-173	30744-30745	-	
172-174	30745-30746	-	
172-175	30746-30747	-	
172-176	30747-30748	-	
172-177	30748-30749	-	
172-178	30749-30750	-	
172-179	30750-30751	-	
172-180	30751-30752	-	
172-181	30752-30753	-	
172-182	30753-30754	-	
172-183	30754-30755	-	
172-184	30755-30756	-	
172-185	30756-30757	-	
172-186	30757-30758	-	
172-187	30758-30759	-	
172-188	30759-30760	-	
172-189	30760-30761	-	
172-190	30761-30762	-	
172-191	30762-30763	-	
172-192	30763-30764	-	
172-193	30764-30765	-	
172-194	30765-30766	-	
172-195	30766-30767	-	
172-196	30767-30768	-	
172-197	30768-30769	-	
172-198	30769-30770	-	
172-199	30770-30771	-	
172-200	30771-30772	-	
172-201	30772-30773	-	
172-202	30773-30774	-	
172-203	30774-30775	-	
172-204	30775-30776	-	
172-205	30776-30777	-	
172-206	30777-30778	-	
172-207	30778-30779	-	
172-208	30779-30780	-	
172-209	30780-30781	-	
172-210	30781-30782	-	
172-211	30782-30783	-	
172-212	30783-30784	-	
172-213	30784-30785	-	
172-214	30785-30786	-	
172-215	30786-30787	-	
172-216	30787-30788	-	
172-217	30788-30789	-	
172-218	30789-30790	-	
172-219	30790-30791	-	
172-220	30791-30792	-	
172-221	30792-30793	-	
172-222	30793-30794	-	
172-223	30794-30795	-	
172-224	30796-30803	1000001	
172-225	30804-30805	|	
172-226	30806-30821	4RNsovI2haTgU7l	
172-227	30822-30823	|	
172-228	30824-30834	GwSoX67gLS	
172-229	30835-30836	|	
172-230	30837-30838	2	
172-231	30839-30840	|	
172-232	30841-30842	{	
172-233	30842-30843	"	
172-234	30843-30847	tags	
172-235	30847-30848	"	
172-236	30848-30849	:	
172-237	30850-30851	{	
172-238	30851-30852	"	
172-239	30852-30860	nk542369	
172-240	30860-30861	"	
172-241	30861-30862	:	
172-242	30863-30864	{	
172-243	30864-30865	"	
172-244	30865-30872	ik55240	
172-245	30872-30873	"	
172-246	30873-30874	:	
172-247	30875-30876	"	
172-248	30876-30884	iv305393	
172-249	30884-30885	"	
172-250	30885-30886	}	
172-251	30886-30887	}	
172-252	30887-30888	,	
172-253	30889-30890	"	
172-254	30890-30898	keywords	
172-255	30898-30899	"	
172-256	30899-30900	:	
172-257	30901-30902	[	
172-258	30902-30903	"	
172-259	30903-30906	abc	
172-260	30906-30907	"	
172-261	30907-30908	,	
172-262	30909-30910	"	
172-263	30910-30913	def	
172-264	30913-30914	"	
172-265	30914-30915	,	
172-266	30916-30917	"	
172-267	30917-30920	geh	
172-268	30920-30921	"	
172-269	30921-30922	]	
172-270	30922-30923	,	
172-271	30924-30925	"	
172-272	30925-30934	publisher	
172-273	30934-30935	"	
172-274	30935-30936	:	
172-275	30937-30938	"	
172-276	30938-30948	ktjKEZ1tvq	
172-277	30948-30949	"	
172-278	30949-30950	,	
172-279	30951-30952	"	
172-280	30952-30964	criticrating	
172-281	30964-30965	"	
172-282	30965-30966	:	
172-283	30967-30968	0	
172-284	30968-30969	}	
172-285	30970-30971	(	
172-286	30971-30972	1	
172-287	30973-30976	row	
172-288	30976-30977	)	
172-289	30978-30982	demo	
172-290	30982-30983	=	
172-291	30983-30984	#	
172-292	30985-30992	explain	
172-293	30993-31000	analyze	
172-294	31001-31007	select	
172-295	31008-31009	*	
172-296	31010-31014	from	
172-297	31015-31020	books	
172-298	31021-31026	where	
172-299	31027-31031	data	
172-300	31032-31033	@	
172-301	31033-31034	@	
172-302	31035-31036	'	
172-303	31036-31037	$	
172-304	31037-31038	.	
172-305	31038-31047	publisher	
172-306	31048-31049	=	
172-307	31049-31050	=	
172-308	31051-31052	"	
172-309	31052-31062	ktjKEZ1tvq	
172-310	31062-31063	"	
172-311	31063-31064	'	
172-312	31064-31065	;	
172-313	31066-31071	QUERY	
172-314	31072-31076	PLAN	
172-315	31077-31078	-	
172-316	31078-31079	-	
172-317	31079-31080	-	
172-318	31080-31081	-	
172-319	31081-31082	-	
172-320	31082-31083	-	
172-321	31083-31084	-	
172-322	31084-31085	-	
172-323	31085-31086	-	
172-324	31086-31087	-	
172-325	31087-31088	-	
172-326	31088-31089	-	
172-327	31089-31090	-	
172-328	31090-31091	-	
172-329	31091-31092	-	
172-330	31092-31093	-	
172-331	31093-31094	-	
172-332	31094-31095	-	
172-333	31095-31096	-	
172-334	31096-31097	-	
172-335	31097-31098	-	
172-336	31098-31099	-	
172-337	31099-31100	-	
172-338	31100-31101	-	
172-339	31101-31102	-	
172-340	31102-31103	-	
172-341	31103-31104	-	
172-342	31104-31105	-	
172-343	31105-31106	-	
172-344	31106-31107	-	
172-345	31107-31108	-	
172-346	31108-31109	-	
172-347	31109-31110	-	
172-348	31110-31111	-	
172-349	31111-31112	-	
172-350	31112-31113	-	
172-351	31113-31114	-	
172-352	31114-31115	-	
172-353	31115-31116	-	
172-354	31116-31117	-	
172-355	31117-31118	-	
172-356	31118-31119	-	
172-357	31119-31120	-	
172-358	31120-31121	-	
172-359	31121-31122	-	
172-360	31122-31123	-	
172-361	31123-31124	-	
172-362	31124-31125	-	
172-363	31125-31126	-	
172-364	31126-31127	-	
172-365	31127-31128	-	
172-366	31128-31129	-	
172-367	31129-31130	-	
172-368	31130-31131	-	
172-369	31131-31132	-	
172-370	31132-31133	-	
172-371	31133-31134	-	
172-372	31134-31135	-	
172-373	31135-31136	-	
172-374	31136-31137	-	
172-375	31137-31138	-	
172-376	31138-31139	-	
172-377	31139-31140	-	
172-378	31140-31141	-	
172-379	31141-31142	-	
172-380	31142-31143	-	
172-381	31143-31144	-	
172-382	31144-31145	-	
172-383	31145-31146	-	
172-384	31146-31147	-	
172-385	31147-31148	-	
172-386	31148-31149	-	
172-387	31149-31150	-	
172-388	31150-31151	-	
172-389	31151-31152	-	
172-390	31152-31153	-	
172-391	31153-31154	-	
172-392	31154-31155	-	
172-393	31155-31156	-	
172-394	31156-31157	-	
172-395	31157-31158	-	
172-396	31158-31159	-	
172-397	31159-31160	-	
172-398	31160-31161	-	
172-399	31161-31162	-	
172-400	31162-31163	-	
172-401	31163-31164	-	
172-402	31164-31165	-	
172-403	31165-31166	-	
172-404	31166-31167	-	
172-405	31167-31168	-	
172-406	31168-31169	-	
172-407	31169-31170	-	
172-408	31170-31171	-	
172-409	31171-31172	-	
172-410	31172-31173	-	
172-411	31173-31174	-	
172-412	31174-31175	-	
172-413	31175-31176	-	
172-414	31176-31177	-	
172-415	31177-31178	-	
172-416	31178-31179	-	
172-417	31179-31180	-	
172-418	31180-31181	-	
172-419	31181-31182	-	
172-420	31182-31183	-	
172-421	31183-31184	-	
172-422	31184-31185	-	
172-423	31185-31186	-	
172-424	31186-31187	-	
172-425	31187-31188	-	
172-426	31188-31189	-	
172-427	31189-31190	-	
172-428	31190-31191	-	
172-429	31191-31192	-	
172-430	31192-31193	-	
172-431	31194-31200	Bitmap	
172-432	31201-31205	Heap	
172-433	31206-31210	Scan	
172-434	31211-31213	on	
172-435	31214-31219	books	
172-436	31220-31221	(	
172-437	31221-31225	cost	
172-438	31225-31226	=	
172-439	31226-31231	21.75	
172-440	31231-31232	.	
172-441	31232-31240	.1014.25	
172-442	31241-31245	rows	
172-443	31245-31246	=	
172-444	31246-31250	1000	
172-445	31251-31256	width	
172-446	31256-31257	=	
172-447	31257-31260	158	
172-448	31260-31261	)	
172-449	31262-31263	(	
172-450	31263-31269	actual	
172-451	31270-31274	time	
172-452	31274-31275	=	
172-453	31275-31280	0.123	
172-454	31280-31281	.	
172-455	31281-31287	.0.124	
172-456	31288-31292	rows	
172-457	31292-31293	=	
172-458	31293-31294	1	
172-459	31295-31300	loops	
172-460	31300-31301	=	
172-461	31301-31302	1	
172-462	31302-31303	)	
172-463	31304-31311	Recheck	
172-464	31312-31316	Cond	
172-465	31316-31317	:	
172-466	31318-31319	(	
172-467	31319-31323	data	
172-468	31324-31325	@	
172-469	31325-31326	@	
172-470	31327-31328	'	
172-471	31328-31329	(	
172-472	31329-31330	$	
172-473	31330-31331	.	
172-474	31331-31332	"	

#Text=publisher" == "ktjKEZ1tvq")'::jsonpath)
#Text=Heap Blocks: exact=1
#Text=-> Bitmap Index Scan on datagin (cost=0.00..21.50 rows=1000 width=0) (actual time=0.110..0.110 rows=1 loops=1)
#Text=Index Cond: (data @@ '($."
173-1	31332-31341	publisher	
173-2	31341-31342	"	
173-3	31343-31344	=	
173-4	31344-31345	=	
173-5	31346-31347	"	
173-6	31347-31357	ktjKEZ1tvq	
173-7	31357-31358	"	
173-8	31358-31359	)	
173-9	31359-31360	'	
173-10	31360-31361	:	
173-11	31361-31362	:	
173-12	31362-31370	jsonpath	
173-13	31370-31371	)	
173-14	31372-31376	Heap	
173-15	31377-31383	Blocks	
173-16	31383-31384	:	
173-17	31385-31390	exact	
173-18	31390-31391	=	
173-19	31391-31392	1	
173-20	31393-31394	-	
173-21	31394-31395	>	
173-22	31396-31402	Bitmap	
173-23	31403-31408	Index	
173-24	31409-31413	Scan	
173-25	31414-31416	on	
173-26	31417-31424	datagin	
173-27	31425-31426	(	
173-28	31426-31430	cost	
173-29	31430-31431	=	
173-30	31431-31435	0.00	
173-31	31435-31436	.	
173-32	31436-31442	.21.50	
173-33	31443-31447	rows	
173-34	31447-31448	=	
173-35	31448-31452	1000	
173-36	31453-31458	width	
173-37	31458-31459	=	
173-38	31459-31460	0	
173-39	31460-31461	)	
173-40	31462-31463	(	
173-41	31463-31469	actual	
173-42	31470-31474	time	
173-43	31474-31475	=	
173-44	31475-31480	0.110	
173-45	31480-31481	.	
173-46	31481-31487	.0.110	
173-47	31488-31492	rows	
173-48	31492-31493	=	
173-49	31493-31494	1	
173-50	31495-31500	loops	
173-51	31500-31501	=	
173-52	31501-31502	1	
173-53	31502-31503	)	
173-54	31504-31509	Index	
173-55	31510-31514	Cond	
173-56	31514-31515	:	
173-57	31516-31517	(	
173-58	31517-31521	data	
173-59	31522-31523	@	
173-60	31523-31524	@	
173-61	31525-31526	'	
173-62	31526-31527	(	
173-63	31527-31528	$	
173-64	31528-31529	.	
173-65	31529-31530	"	

#Text=publisher" == "ktjKEZ1tvq")'::jsonpath)
#Text=Planning Time: 0.137 ms
#Text=Execution Time: 0.194 ms
#Text=(7 rows)
#Text=You can rewrite this expression as a JSONPath filter:
#Text=demo=# select * from books where jsonb_path_exists(data,'$.publisher ?
174-1	31530-31539	publisher	
174-2	31539-31540	"	
174-3	31541-31542	=	
174-4	31542-31543	=	
174-5	31544-31545	"	
174-6	31545-31555	ktjKEZ1tvq	
174-7	31555-31556	"	
174-8	31556-31557	)	
174-9	31557-31558	'	
174-10	31558-31559	:	
174-11	31559-31560	:	
174-12	31560-31568	jsonpath	
174-13	31568-31569	)	
174-14	31570-31578	Planning	
174-15	31579-31583	Time	
174-16	31583-31584	:	
174-17	31585-31590	0.137	
174-18	31591-31593	ms	
174-19	31594-31603	Execution	
174-20	31604-31608	Time	
174-21	31608-31609	:	
174-22	31610-31615	0.194	
174-23	31616-31618	ms	
174-24	31619-31620	(	
174-25	31620-31621	7	
174-26	31622-31626	rows	
174-27	31626-31627	)	
174-28	31628-31631	You	
174-29	31632-31635	can	
174-30	31636-31643	rewrite	
174-31	31644-31648	this	
174-32	31649-31659	expression	
174-33	31660-31662	as	
174-34	31663-31664	a	
174-35	31665-31673	JSONPath	
174-36	31674-31680	filter	
174-37	31680-31681	:	
174-38	31682-31686	demo	
174-39	31686-31687	=	
174-40	31687-31688	#	
174-41	31689-31695	select	
174-42	31696-31697	*	
174-43	31698-31702	from	
174-44	31703-31708	books	
174-45	31709-31714	where	
174-46	31715-31732	jsonb_path_exists	
174-47	31732-31733	(	
174-48	31733-31737	data	
174-49	31737-31738	,	
174-50	31738-31739	'	
174-51	31739-31740	$	
174-52	31740-31741	.	
174-53	31741-31750	publisher	
174-54	31751-31752	?	

#Text=(@ == "ktjKEZ1tvq")');
#Text=You can also use very complex query expressions. 
175-1	31752-31753	(	
175-2	31753-31754	@	
175-3	31755-31756	=	
175-4	31756-31757	=	
175-5	31758-31759	"	
175-6	31759-31769	ktjKEZ1tvq	
175-7	31769-31770	"	
175-8	31770-31771	)	
175-9	31771-31772	'	
175-10	31772-31773	)	
175-11	31773-31774	;	
175-12	31775-31778	You	
175-13	31779-31782	can	
175-14	31783-31787	also	
175-15	31788-31791	use	
175-16	31792-31796	very	
175-17	31797-31804	complex	
175-18	31805-31810	query	
175-19	31811-31822	expressions	
175-20	31822-31823	.	
175-21	31823-31824	 	

#Text=For example, let's select books where print style = hardcover and price = 100:
#Text=select * from books where jsonb_path_exists(data, '$.prints[*] ?
176-1	31824-31827	For	
176-2	31828-31835	example	
176-3	31835-31836	,	
176-4	31837-31842	let's	
176-5	31842-31843	 	
176-6	31843-31849	select	
176-7	31850-31855	books	
176-8	31856-31861	where	
176-9	31862-31867	print	
176-10	31868-31873	style	
176-11	31874-31875	=	
176-12	31876-31885	hardcover	
176-13	31886-31889	and	
176-14	31890-31895	price	
176-15	31896-31897	=	
176-16	31898-31901	100	
176-17	31901-31902	:	
176-18	31903-31909	select	
176-19	31910-31911	*	
176-20	31912-31916	from	
176-21	31917-31922	books	
176-22	31923-31928	where	
176-23	31929-31946	jsonb_path_exists	
176-24	31946-31947	(	
176-25	31947-31951	data	
176-26	31951-31952	,	
176-27	31953-31954	'	
176-28	31954-31955	$	
176-29	31955-31956	.	
176-30	31956-31962	prints	
176-31	31962-31963	[	
176-32	31963-31964	*	
176-33	31964-31965	]	
176-34	31966-31967	?	

#Text=(@.style=="hc" &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; @.price == 100)');
#Text=However, index support for JSONPath is very limited at this point - this makes it dangerous to use JSONPath in the where clause.
177-1	31967-31968	(	
177-2	31968-31969	@	
177-3	31969-31970	.	
177-4	31970-31975	style	
177-5	31975-31976	=	
177-6	31976-31977	=	
177-7	31977-31978	"	
177-8	31978-31980	hc	
177-9	31980-31981	"	
177-10	31982-31983	&	
177-11	31983-31986	amp	
177-12	31986-31987	;	
177-13	31987-31990	amp	
177-14	31990-31991	;	
177-15	31991-31994	amp	
177-16	31994-31995	;	
177-17	31995-31998	amp	
177-18	31998-31999	;	
177-19	31999-32002	amp	
177-20	32002-32003	;	
177-21	32003-32004	&	
177-22	32004-32007	amp	
177-23	32007-32008	;	
177-24	32008-32011	amp	
177-25	32011-32012	;	
177-26	32012-32015	amp	
177-27	32015-32016	;	
177-28	32016-32019	amp	
177-29	32019-32020	;	
177-30	32020-32023	amp	
177-31	32023-32024	;	
177-32	32025-32026	@	
177-33	32026-32027	.	
177-34	32027-32032	price	
177-35	32033-32034	=	
177-36	32034-32035	=	
177-37	32036-32039	100	
177-38	32039-32040	)	
177-39	32040-32041	'	
177-40	32041-32042	)	
177-41	32042-32043	;	
177-42	32044-32051	However	
177-43	32051-32052	,	
177-44	32053-32058	index	
177-45	32059-32066	support	
177-46	32067-32070	for	
177-47	32071-32079	JSONPath	
177-48	32080-32082	is	
177-49	32083-32087	very	
177-50	32088-32095	limited	
177-51	32096-32098	at	
177-52	32099-32103	this	
177-53	32104-32109	point	
177-54	32110-32111	-	
177-55	32112-32116	this	
177-56	32117-32122	makes	
177-57	32123-32125	it	
177-58	32125-32126	 	
177-59	32126-32135	dangerous	
177-60	32136-32138	to	
177-61	32139-32142	use	
177-62	32143-32151	JSONPath	
177-63	32152-32154	in	
177-64	32155-32158	the	
177-65	32159-32164	where	
177-66	32165-32171	clause	
177-67	32171-32172	.	

#Text=JSONPath support for indexes will be improved in subsequent releases.
#Text=demo=# explain analyze select * from books where jsonb_path_exists(data,'$.publisher ?
178-1	32173-32181	JSONPath	
178-2	32182-32189	support	
178-3	32190-32193	for	
178-4	32194-32201	indexes	
178-5	32202-32206	will	
178-6	32207-32209	be	
178-7	32210-32218	improved	
178-8	32219-32221	in	
178-9	32222-32232	subsequent	
178-10	32233-32241	releases	
178-11	32241-32242	.	
178-12	32243-32247	demo	
178-13	32247-32248	=	
178-14	32248-32249	#	
178-15	32250-32257	explain	
178-16	32258-32265	analyze	
178-17	32266-32272	select	
178-18	32273-32274	*	
178-19	32275-32279	from	
178-20	32280-32285	books	
178-21	32286-32291	where	
178-22	32292-32309	jsonb_path_exists	
178-23	32309-32310	(	
178-24	32310-32314	data	
178-25	32314-32315	,	
178-26	32315-32316	'	
178-27	32316-32317	$	
178-28	32317-32318	.	
178-29	32318-32327	publisher	
178-30	32328-32329	?	

#Text=(@ == "ktjKEZ1tvq")');
#Text=QUERY PLAN
#Text=------------------------------------------------------------------------------------------------------------
#Text=Seq Scan on books (cost=0.00..36307.24 rows=333340 width=158) (actual time=0.019..480.268 rows=1 loops=1)
#Text=Filter: jsonb_path_exists(data, '$."
179-1	32329-32330	(	
179-2	32330-32331	@	
179-3	32332-32333	=	
179-4	32333-32334	=	
179-5	32335-32336	"	
179-6	32336-32346	ktjKEZ1tvq	
179-7	32346-32347	"	
179-8	32347-32348	)	
179-9	32348-32349	'	
179-10	32349-32350	)	
179-11	32350-32351	;	
179-12	32352-32357	QUERY	
179-13	32358-32362	PLAN	
179-14	32363-32364	-	
179-15	32364-32365	-	
179-16	32365-32366	-	
179-17	32366-32367	-	
179-18	32367-32368	-	
179-19	32368-32369	-	
179-20	32369-32370	-	
179-21	32370-32371	-	
179-22	32371-32372	-	
179-23	32372-32373	-	
179-24	32373-32374	-	
179-25	32374-32375	-	
179-26	32375-32376	-	
179-27	32376-32377	-	
179-28	32377-32378	-	
179-29	32378-32379	-	
179-30	32379-32380	-	
179-31	32380-32381	-	
179-32	32381-32382	-	
179-33	32382-32383	-	
179-34	32383-32384	-	
179-35	32384-32385	-	
179-36	32385-32386	-	
179-37	32386-32387	-	
179-38	32387-32388	-	
179-39	32388-32389	-	
179-40	32389-32390	-	
179-41	32390-32391	-	
179-42	32391-32392	-	
179-43	32392-32393	-	
179-44	32393-32394	-	
179-45	32394-32395	-	
179-46	32395-32396	-	
179-47	32396-32397	-	
179-48	32397-32398	-	
179-49	32398-32399	-	
179-50	32399-32400	-	
179-51	32400-32401	-	
179-52	32401-32402	-	
179-53	32402-32403	-	
179-54	32403-32404	-	
179-55	32404-32405	-	
179-56	32405-32406	-	
179-57	32406-32407	-	
179-58	32407-32408	-	
179-59	32408-32409	-	
179-60	32409-32410	-	
179-61	32410-32411	-	
179-62	32411-32412	-	
179-63	32412-32413	-	
179-64	32413-32414	-	
179-65	32414-32415	-	
179-66	32415-32416	-	
179-67	32416-32417	-	
179-68	32417-32418	-	
179-69	32418-32419	-	
179-70	32419-32420	-	
179-71	32420-32421	-	
179-72	32421-32422	-	
179-73	32422-32423	-	
179-74	32423-32424	-	
179-75	32424-32425	-	
179-76	32425-32426	-	
179-77	32426-32427	-	
179-78	32427-32428	-	
179-79	32428-32429	-	
179-80	32429-32430	-	
179-81	32430-32431	-	
179-82	32431-32432	-	
179-83	32432-32433	-	
179-84	32433-32434	-	
179-85	32434-32435	-	
179-86	32435-32436	-	
179-87	32436-32437	-	
179-88	32437-32438	-	
179-89	32438-32439	-	
179-90	32439-32440	-	
179-91	32440-32441	-	
179-92	32441-32442	-	
179-93	32442-32443	-	
179-94	32443-32444	-	
179-95	32444-32445	-	
179-96	32445-32446	-	
179-97	32446-32447	-	
179-98	32447-32448	-	
179-99	32448-32449	-	
179-100	32449-32450	-	
179-101	32450-32451	-	
179-102	32451-32452	-	
179-103	32452-32453	-	
179-104	32453-32454	-	
179-105	32454-32455	-	
179-106	32455-32456	-	
179-107	32456-32457	-	
179-108	32457-32458	-	
179-109	32458-32459	-	
179-110	32459-32460	-	
179-111	32460-32461	-	
179-112	32461-32462	-	
179-113	32462-32463	-	
179-114	32463-32464	-	
179-115	32464-32465	-	
179-116	32465-32466	-	
179-117	32466-32467	-	
179-118	32467-32468	-	
179-119	32468-32469	-	
179-120	32469-32470	-	
179-121	32470-32471	-	
179-122	32472-32475	Seq	
179-123	32476-32480	Scan	
179-124	32481-32483	on	
179-125	32484-32489	books	
179-126	32490-32491	(	
179-127	32491-32495	cost	
179-128	32495-32496	=	
179-129	32496-32500	0.00	
179-130	32500-32501	.	
179-131	32501-32510	.36307.24	
179-132	32511-32515	rows	
179-133	32515-32516	=	
179-134	32516-32522	333340	
179-135	32523-32528	width	
179-136	32528-32529	=	
179-137	32529-32532	158	
179-138	32532-32533	)	
179-139	32534-32535	(	
179-140	32535-32541	actual	
179-141	32542-32546	time	
179-142	32546-32547	=	
179-143	32547-32552	0.019	
179-144	32552-32553	.	
179-145	32553-32561	.480.268	
179-146	32562-32566	rows	
179-147	32566-32567	=	
179-148	32567-32568	1	
179-149	32569-32574	loops	
179-150	32574-32575	=	
179-151	32575-32576	1	
179-152	32576-32577	)	
179-153	32578-32584	Filter	
179-154	32584-32585	:	
179-155	32586-32603	jsonb_path_exists	
179-156	32603-32604	(	
179-157	32604-32608	data	
179-158	32608-32609	,	
179-159	32610-32611	'	
179-160	32611-32612	$	
179-161	32612-32613	.	
179-162	32613-32614	"	

#Text=publisher"?
180-1	32614-32623	publisher	
180-2	32623-32624	"	
180-3	32624-32625	?	

#Text=(@ == "ktjKEZ1tvq")'::jsonpath, '{}'::jsonb, false)
#Text=Rows Removed by Filter: 1000028
#Text=Planning Time: 0.095 ms
#Text=Execution Time: 480.348 ms
#Text=(5 rows)
#Text=Projecting Partial JSON
#Text=Another great use case for JSONPath is projecting partial JSONB from the row that matches.
181-1	32625-32626	(	
181-2	32626-32627	@	
181-3	32628-32629	=	
181-4	32629-32630	=	
181-5	32631-32632	"	
181-6	32632-32642	ktjKEZ1tvq	
181-7	32642-32643	"	
181-8	32643-32644	)	
181-9	32644-32645	'	
181-10	32645-32646	:	
181-11	32646-32647	:	
181-12	32647-32655	jsonpath	
181-13	32655-32656	,	
181-14	32657-32658	'	
181-15	32658-32659	{	
181-16	32659-32660	}	
181-17	32660-32661	'	
181-18	32661-32662	:	
181-19	32662-32663	:	
181-20	32663-32668	jsonb	
181-21	32668-32669	,	
181-22	32670-32675	false	
181-23	32675-32676	)	
181-24	32677-32681	Rows	
181-25	32682-32689	Removed	
181-26	32690-32692	by	
181-27	32693-32699	Filter	
181-28	32699-32700	:	
181-29	32701-32708	1000028	
181-30	32709-32717	Planning	
181-31	32718-32722	Time	
181-32	32722-32723	:	
181-33	32724-32729	0.095	
181-34	32730-32732	ms	
181-35	32733-32742	Execution	
181-36	32743-32747	Time	
181-37	32747-32748	:	
181-38	32749-32756	480.348	
181-39	32757-32759	ms	
181-40	32760-32761	(	
181-41	32761-32762	5	
181-42	32763-32767	rows	
181-43	32767-32768	)	
181-44	32769-32779	Projecting	
181-45	32780-32787	Partial	
181-46	32788-32792	JSON	
181-47	32793-32800	Another	
181-48	32801-32806	great	
181-49	32807-32810	use	
181-50	32811-32815	case	
181-51	32816-32819	for	
181-52	32820-32828	JSONPath	
181-53	32829-32831	is	
181-54	32832-32842	projecting	
181-55	32843-32850	partial	
181-56	32850-32851	 	
181-57	32851-32856	JSONB	
181-58	32857-32861	from	
181-59	32862-32865	the	
181-60	32866-32869	row	
181-61	32870-32874	that	
181-62	32875-32882	matches	
181-63	32882-32883	.	

#Text=Consider the following sample JSONB:
#Text=demo=# select jsonb_pretty(data) from books where id = 1000029;
#Text=jsonb_pretty
#Text=-----------------------------------
#Text="tags": {
#Text="nk678947": {
#Text="ik159670": "iv32358
#Text="prints": [
#Text="price": 100,
#Text="style": "hc"
#Text="price": 50,
#Text="style": "pb"
#Text="braille": false,
#Text="keywords": [
#Text="abc",
#Text="kef",
#Text="keh"
#Text="hardcover": true,
#Text="publisher": "ppc3YXL8kK",
#Text="criticrating": 3
#Text=Select only the publisher field:
#Text=demo=# select jsonb_path_query(data, '$.publisher') from books where id = 1000029;
#Text=jsonb_path_query
#Text=------------------
#Text="ppc3YXL8kK"
#Text=(1 row)
#Text=Select the prints field (which is an array of objects):
#Text=demo=# select jsonb_path_query(data, '$.prints') from books where id = 1000029;
#Text=jsonb_path_query
#Text=---------------------------------------------------------------
#Text=[{"price": 100, "style": "hc"}, {"price": 50, "style": "pb"}]
#Text=(1 row)
#Text=Select the first element in the array prints:
#Text=demo=# select jsonb_path_query(data, '$.prints[0]') from books where id = 1000029;
#Text=jsonb_path_query
#Text=-------------------------------
#Text={"price": 100, "style": "hc"}
#Text=(1 row)
#Text=Select the last element in the array prints:
#Text=demo=# select jsonb_path_query(data, '$.prints[$.size()]') from books where id = 1000029;
#Text=jsonb_path_query
#Text=------------------------------
#Text={"price": 50, "style": "pb"}
#Text=(1 row)
#Text=Select only the hardcover prints from the array:
#Text=demo=# select jsonb_path_query(data, '$.prints[*] ?
182-1	32884-32892	Consider	
182-2	32893-32896	the	
182-3	32897-32906	following	
182-4	32907-32913	sample	
182-5	32913-32914	 	
182-6	32914-32919	JSONB	
182-7	32919-32920	:	
182-8	32921-32925	demo	
182-9	32925-32926	=	
182-10	32926-32927	#	
182-11	32928-32934	select	
182-12	32935-32947	jsonb_pretty	
182-13	32947-32948	(	
182-14	32948-32952	data	
182-15	32952-32953	)	
182-16	32954-32958	from	
182-17	32959-32964	books	
182-18	32965-32970	where	
182-19	32971-32973	id	
182-20	32974-32975	=	
182-21	32976-32983	1000029	
182-22	32983-32984	;	
182-23	32985-32997	jsonb_pretty	
182-24	32998-32999	-	
182-25	32999-33000	-	
182-26	33000-33001	-	
182-27	33001-33002	-	
182-28	33002-33003	-	
182-29	33003-33004	-	
182-30	33004-33005	-	
182-31	33005-33006	-	
182-32	33006-33007	-	
182-33	33007-33008	-	
182-34	33008-33009	-	
182-35	33009-33010	-	
182-36	33010-33011	-	
182-37	33011-33012	-	
182-38	33012-33013	-	
182-39	33013-33014	-	
182-40	33014-33015	-	
182-41	33015-33016	-	
182-42	33016-33017	-	
182-43	33017-33018	-	
182-44	33018-33019	-	
182-45	33019-33020	-	
182-46	33020-33021	-	
182-47	33021-33022	-	
182-48	33022-33023	-	
182-49	33023-33024	-	
182-50	33024-33025	-	
182-51	33025-33026	-	
182-52	33026-33027	-	
182-53	33027-33028	-	
182-54	33028-33029	-	
182-55	33029-33030	-	
182-56	33030-33031	-	
182-57	33031-33032	-	
182-58	33032-33033	-	
182-59	33034-33035	"	
182-60	33035-33039	tags	
182-61	33039-33040	"	
182-62	33040-33041	:	
182-63	33042-33043	{	
182-64	33044-33045	"	
182-65	33045-33053	nk678947	
182-66	33053-33054	"	
182-67	33054-33055	:	
182-68	33056-33057	{	
182-69	33058-33059	"	
182-70	33059-33067	ik159670	
182-71	33067-33068	"	
182-72	33068-33069	:	
182-73	33070-33071	"	
182-74	33071-33078	iv32358	
182-75	33079-33080	"	
182-76	33080-33086	prints	
182-77	33086-33087	"	
182-78	33087-33088	:	
182-79	33089-33090	[	
182-80	33091-33092	"	
182-81	33092-33097	price	
182-82	33097-33098	"	
182-83	33098-33099	:	
182-84	33100-33103	100	
182-85	33103-33104	,	
182-86	33105-33106	"	
182-87	33106-33111	style	
182-88	33111-33112	"	
182-89	33112-33113	:	
182-90	33114-33115	"	
182-91	33115-33117	hc	
182-92	33117-33118	"	
182-93	33119-33120	"	
182-94	33120-33125	price	
182-95	33125-33126	"	
182-96	33126-33127	:	
182-97	33128-33130	50	
182-98	33130-33131	,	
182-99	33132-33133	"	
182-100	33133-33138	style	
182-101	33138-33139	"	
182-102	33139-33140	:	
182-103	33141-33142	"	
182-104	33142-33144	pb	
182-105	33144-33145	"	
182-106	33146-33147	"	
182-107	33147-33154	braille	
182-108	33154-33155	"	
182-109	33155-33156	:	
182-110	33157-33162	false	
182-111	33162-33163	,	
182-112	33164-33165	"	
182-113	33165-33173	keywords	
182-114	33173-33174	"	
182-115	33174-33175	:	
182-116	33176-33177	[	
182-117	33178-33179	"	
182-118	33179-33182	abc	
182-119	33182-33183	"	
182-120	33183-33184	,	
182-121	33185-33186	"	
182-122	33186-33189	kef	
182-123	33189-33190	"	
182-124	33190-33191	,	
182-125	33192-33193	"	
182-126	33193-33196	keh	
182-127	33196-33197	"	
182-128	33198-33199	"	
182-129	33199-33208	hardcover	
182-130	33208-33209	"	
182-131	33209-33210	:	
182-132	33211-33215	true	
182-133	33215-33216	,	
182-134	33217-33218	"	
182-135	33218-33227	publisher	
182-136	33227-33228	"	
182-137	33228-33229	:	
182-138	33230-33231	"	
182-139	33231-33241	ppc3YXL8kK	
182-140	33241-33242	"	
182-141	33242-33243	,	
182-142	33244-33245	"	
182-143	33245-33257	criticrating	
182-144	33257-33258	"	
182-145	33258-33259	:	
182-146	33260-33261	3	
182-147	33262-33268	Select	
182-148	33269-33273	only	
182-149	33274-33277	the	
182-150	33278-33287	publisher	
182-151	33288-33293	field	
182-152	33293-33294	:	
182-153	33295-33299	demo	
182-154	33299-33300	=	
182-155	33300-33301	#	
182-156	33302-33308	select	
182-157	33309-33325	jsonb_path_query	
182-158	33325-33326	(	
182-159	33326-33330	data	
182-160	33330-33331	,	
182-161	33332-33333	'	
182-162	33333-33334	$	
182-163	33334-33335	.	
182-164	33335-33344	publisher	
182-165	33344-33345	'	
182-166	33345-33346	)	
182-167	33347-33351	from	
182-168	33352-33357	books	
182-169	33358-33363	where	
182-170	33364-33366	id	
182-171	33367-33368	=	
182-172	33369-33376	1000029	
182-173	33376-33377	;	
182-174	33378-33394	jsonb_path_query	
182-175	33395-33396	-	
182-176	33396-33397	-	
182-177	33397-33398	-	
182-178	33398-33399	-	
182-179	33399-33400	-	
182-180	33400-33401	-	
182-181	33401-33402	-	
182-182	33402-33403	-	
182-183	33403-33404	-	
182-184	33404-33405	-	
182-185	33405-33406	-	
182-186	33406-33407	-	
182-187	33407-33408	-	
182-188	33408-33409	-	
182-189	33409-33410	-	
182-190	33410-33411	-	
182-191	33411-33412	-	
182-192	33412-33413	-	
182-193	33414-33415	"	
182-194	33415-33425	ppc3YXL8kK	
182-195	33425-33426	"	
182-196	33427-33428	(	
182-197	33428-33429	1	
182-198	33430-33433	row	
182-199	33433-33434	)	
182-200	33435-33441	Select	
182-201	33442-33445	the	
182-202	33446-33452	prints	
182-203	33453-33458	field	
182-204	33459-33460	(	
182-205	33460-33465	which	
182-206	33466-33468	is	
182-207	33469-33471	an	
182-208	33472-33477	array	
182-209	33478-33480	of	
182-210	33481-33488	objects	
182-211	33488-33489	)	
182-212	33489-33490	:	
182-213	33491-33495	demo	
182-214	33495-33496	=	
182-215	33496-33497	#	
182-216	33498-33504	select	
182-217	33505-33521	jsonb_path_query	
182-218	33521-33522	(	
182-219	33522-33526	data	
182-220	33526-33527	,	
182-221	33528-33529	'	
182-222	33529-33530	$	
182-223	33530-33531	.	
182-224	33531-33537	prints	
182-225	33537-33538	'	
182-226	33538-33539	)	
182-227	33540-33544	from	
182-228	33545-33550	books	
182-229	33551-33556	where	
182-230	33557-33559	id	
182-231	33560-33561	=	
182-232	33562-33569	1000029	
182-233	33569-33570	;	
182-234	33571-33587	jsonb_path_query	
182-235	33588-33589	-	
182-236	33589-33590	-	
182-237	33590-33591	-	
182-238	33591-33592	-	
182-239	33592-33593	-	
182-240	33593-33594	-	
182-241	33594-33595	-	
182-242	33595-33596	-	
182-243	33596-33597	-	
182-244	33597-33598	-	
182-245	33598-33599	-	
182-246	33599-33600	-	
182-247	33600-33601	-	
182-248	33601-33602	-	
182-249	33602-33603	-	
182-250	33603-33604	-	
182-251	33604-33605	-	
182-252	33605-33606	-	
182-253	33606-33607	-	
182-254	33607-33608	-	
182-255	33608-33609	-	
182-256	33609-33610	-	
182-257	33610-33611	-	
182-258	33611-33612	-	
182-259	33612-33613	-	
182-260	33613-33614	-	
182-261	33614-33615	-	
182-262	33615-33616	-	
182-263	33616-33617	-	
182-264	33617-33618	-	
182-265	33618-33619	-	
182-266	33619-33620	-	
182-267	33620-33621	-	
182-268	33621-33622	-	
182-269	33622-33623	-	
182-270	33623-33624	-	
182-271	33624-33625	-	
182-272	33625-33626	-	
182-273	33626-33627	-	
182-274	33627-33628	-	
182-275	33628-33629	-	
182-276	33629-33630	-	
182-277	33630-33631	-	
182-278	33631-33632	-	
182-279	33632-33633	-	
182-280	33633-33634	-	
182-281	33634-33635	-	
182-282	33635-33636	-	
182-283	33636-33637	-	
182-284	33637-33638	-	
182-285	33638-33639	-	
182-286	33639-33640	-	
182-287	33640-33641	-	
182-288	33641-33642	-	
182-289	33642-33643	-	
182-290	33643-33644	-	
182-291	33644-33645	-	
182-292	33645-33646	-	
182-293	33646-33647	-	
182-294	33647-33648	-	
182-295	33648-33649	-	
182-296	33649-33650	-	
182-297	33650-33651	-	
182-298	33652-33653	[	
182-299	33653-33654	{	
182-300	33654-33655	"	
182-301	33655-33660	price	
182-302	33660-33661	"	
182-303	33661-33662	:	
182-304	33663-33666	100	
182-305	33666-33667	,	
182-306	33668-33669	"	
182-307	33669-33674	style	
182-308	33674-33675	"	
182-309	33675-33676	:	
182-310	33677-33678	"	
182-311	33678-33680	hc	
182-312	33680-33681	"	
182-313	33681-33682	}	
182-314	33682-33683	,	
182-315	33684-33685	{	
182-316	33685-33686	"	
182-317	33686-33691	price	
182-318	33691-33692	"	
182-319	33692-33693	:	
182-320	33694-33696	50	
182-321	33696-33697	,	
182-322	33698-33699	"	
182-323	33699-33704	style	
182-324	33704-33705	"	
182-325	33705-33706	:	
182-326	33707-33708	"	
182-327	33708-33710	pb	
182-328	33710-33711	"	
182-329	33711-33712	}	
182-330	33712-33713	]	
182-331	33714-33715	(	
182-332	33715-33716	1	
182-333	33717-33720	row	
182-334	33720-33721	)	
182-335	33722-33728	Select	
182-336	33729-33732	the	
182-337	33733-33738	first	
182-338	33739-33746	element	
182-339	33747-33749	in	
182-340	33750-33753	the	
182-341	33754-33759	array	
182-342	33760-33766	prints	
182-343	33766-33767	:	
182-344	33768-33772	demo	
182-345	33772-33773	=	
182-346	33773-33774	#	
182-347	33775-33781	select	
182-348	33782-33798	jsonb_path_query	
182-349	33798-33799	(	
182-350	33799-33803	data	
182-351	33803-33804	,	
182-352	33805-33806	'	
182-353	33806-33807	$	
182-354	33807-33808	.	
182-355	33808-33814	prints	
182-356	33814-33815	[	
182-357	33815-33816	0	
182-358	33816-33817	]	
182-359	33817-33818	'	
182-360	33818-33819	)	
182-361	33820-33824	from	
182-362	33825-33830	books	
182-363	33831-33836	where	
182-364	33837-33839	id	
182-365	33840-33841	=	
182-366	33842-33849	1000029	
182-367	33849-33850	;	
182-368	33851-33867	jsonb_path_query	
182-369	33868-33869	-	
182-370	33869-33870	-	
182-371	33870-33871	-	
182-372	33871-33872	-	
182-373	33872-33873	-	
182-374	33873-33874	-	
182-375	33874-33875	-	
182-376	33875-33876	-	
182-377	33876-33877	-	
182-378	33877-33878	-	
182-379	33878-33879	-	
182-380	33879-33880	-	
182-381	33880-33881	-	
182-382	33881-33882	-	
182-383	33882-33883	-	
182-384	33883-33884	-	
182-385	33884-33885	-	
182-386	33885-33886	-	
182-387	33886-33887	-	
182-388	33887-33888	-	
182-389	33888-33889	-	
182-390	33889-33890	-	
182-391	33890-33891	-	
182-392	33891-33892	-	
182-393	33892-33893	-	
182-394	33893-33894	-	
182-395	33894-33895	-	
182-396	33895-33896	-	
182-397	33896-33897	-	
182-398	33897-33898	-	
182-399	33898-33899	-	
182-400	33900-33901	{	
182-401	33901-33902	"	
182-402	33902-33907	price	
182-403	33907-33908	"	
182-404	33908-33909	:	
182-405	33910-33913	100	
182-406	33913-33914	,	
182-407	33915-33916	"	
182-408	33916-33921	style	
182-409	33921-33922	"	
182-410	33922-33923	:	
182-411	33924-33925	"	
182-412	33925-33927	hc	
182-413	33927-33928	"	
182-414	33928-33929	}	
182-415	33930-33931	(	
182-416	33931-33932	1	
182-417	33933-33936	row	
182-418	33936-33937	)	
182-419	33938-33944	Select	
182-420	33945-33948	the	
182-421	33949-33953	last	
182-422	33954-33961	element	
182-423	33962-33964	in	
182-424	33965-33968	the	
182-425	33969-33974	array	
182-426	33975-33981	prints	
182-427	33981-33982	:	
182-428	33983-33987	demo	
182-429	33987-33988	=	
182-430	33988-33989	#	
182-431	33990-33996	select	
182-432	33997-34013	jsonb_path_query	
182-433	34013-34014	(	
182-434	34014-34018	data	
182-435	34018-34019	,	
182-436	34020-34021	'	
182-437	34021-34022	$	
182-438	34022-34023	.	
182-439	34023-34029	prints	
182-440	34029-34030	[	
182-441	34030-34031	$	
182-442	34031-34032	.	
182-443	34032-34036	size	
182-444	34036-34037	(	
182-445	34037-34038	)	
182-446	34038-34039	]	
182-447	34039-34040	'	
182-448	34040-34041	)	
182-449	34042-34046	from	
182-450	34047-34052	books	
182-451	34053-34058	where	
182-452	34059-34061	id	
182-453	34062-34063	=	
182-454	34064-34071	1000029	
182-455	34071-34072	;	
182-456	34073-34089	jsonb_path_query	
182-457	34090-34091	-	
182-458	34091-34092	-	
182-459	34092-34093	-	
182-460	34093-34094	-	
182-461	34094-34095	-	
182-462	34095-34096	-	
182-463	34096-34097	-	
182-464	34097-34098	-	
182-465	34098-34099	-	
182-466	34099-34100	-	
182-467	34100-34101	-	
182-468	34101-34102	-	
182-469	34102-34103	-	
182-470	34103-34104	-	
182-471	34104-34105	-	
182-472	34105-34106	-	
182-473	34106-34107	-	
182-474	34107-34108	-	
182-475	34108-34109	-	
182-476	34109-34110	-	
182-477	34110-34111	-	
182-478	34111-34112	-	
182-479	34112-34113	-	
182-480	34113-34114	-	
182-481	34114-34115	-	
182-482	34115-34116	-	
182-483	34116-34117	-	
182-484	34117-34118	-	
182-485	34118-34119	-	
182-486	34119-34120	-	
182-487	34121-34122	{	
182-488	34122-34123	"	
182-489	34123-34128	price	
182-490	34128-34129	"	
182-491	34129-34130	:	
182-492	34131-34133	50	
182-493	34133-34134	,	
182-494	34135-34136	"	
182-495	34136-34141	style	
182-496	34141-34142	"	
182-497	34142-34143	:	
182-498	34144-34145	"	
182-499	34145-34147	pb	
182-500	34147-34148	"	
182-501	34148-34149	}	
182-502	34150-34151	(	
182-503	34151-34152	1	
182-504	34153-34156	row	
182-505	34156-34157	)	
182-506	34158-34164	Select	
182-507	34165-34169	only	
182-508	34170-34173	the	
182-509	34174-34183	hardcover	
182-510	34184-34190	prints	
182-511	34191-34195	from	
182-512	34196-34199	the	
182-513	34200-34205	array	
182-514	34205-34206	:	
182-515	34207-34211	demo	
182-516	34211-34212	=	
182-517	34212-34213	#	
182-518	34214-34220	select	
182-519	34221-34237	jsonb_path_query	
182-520	34237-34238	(	
182-521	34238-34242	data	
182-522	34242-34243	,	
182-523	34244-34245	'	
182-524	34245-34246	$	
182-525	34246-34247	.	
182-526	34247-34253	prints	
182-527	34253-34254	[	
182-528	34254-34255	*	
182-529	34255-34256	]	
182-530	34257-34258	?	

#Text=(@.style=="hc")') from books where id = 1000029;
#Text=jsonb_path_query
#Text=-------------------------------
#Text={"price": 100, "style": "hc"}
#Text=(1 row)
#Text=We can also chain the filters:
#Text=demo=# select jsonb_path_query(data, '$.prints[*] ?
183-1	34258-34259	(	
183-2	34259-34260	@	
183-3	34260-34261	.	
183-4	34261-34266	style	
183-5	34266-34267	=	
183-6	34267-34268	=	
183-7	34268-34269	"	
183-8	34269-34271	hc	
183-9	34271-34272	"	
183-10	34272-34273	)	
183-11	34273-34274	'	
183-12	34274-34275	)	
183-13	34276-34280	from	
183-14	34281-34286	books	
183-15	34287-34292	where	
183-16	34293-34295	id	
183-17	34296-34297	=	
183-18	34298-34305	1000029	
183-19	34305-34306	;	
183-20	34307-34323	jsonb_path_query	
183-21	34324-34325	-	
183-22	34325-34326	-	
183-23	34326-34327	-	
183-24	34327-34328	-	
183-25	34328-34329	-	
183-26	34329-34330	-	
183-27	34330-34331	-	
183-28	34331-34332	-	
183-29	34332-34333	-	
183-30	34333-34334	-	
183-31	34334-34335	-	
183-32	34335-34336	-	
183-33	34336-34337	-	
183-34	34337-34338	-	
183-35	34338-34339	-	
183-36	34339-34340	-	
183-37	34340-34341	-	
183-38	34341-34342	-	
183-39	34342-34343	-	
183-40	34343-34344	-	
183-41	34344-34345	-	
183-42	34345-34346	-	
183-43	34346-34347	-	
183-44	34347-34348	-	
183-45	34348-34349	-	
183-46	34349-34350	-	
183-47	34350-34351	-	
183-48	34351-34352	-	
183-49	34352-34353	-	
183-50	34353-34354	-	
183-51	34354-34355	-	
183-52	34356-34357	{	
183-53	34357-34358	"	
183-54	34358-34363	price	
183-55	34363-34364	"	
183-56	34364-34365	:	
183-57	34366-34369	100	
183-58	34369-34370	,	
183-59	34371-34372	"	
183-60	34372-34377	style	
183-61	34377-34378	"	
183-62	34378-34379	:	
183-63	34380-34381	"	
183-64	34381-34383	hc	
183-65	34383-34384	"	
183-66	34384-34385	}	
183-67	34386-34387	(	
183-68	34387-34388	1	
183-69	34389-34392	row	
183-70	34392-34393	)	
183-71	34394-34396	We	
183-72	34397-34400	can	
183-73	34401-34405	also	
183-74	34406-34411	chain	
183-75	34412-34415	the	
183-76	34416-34423	filters	
183-77	34423-34424	:	
183-78	34425-34429	demo	
183-79	34429-34430	=	
183-80	34430-34431	#	
183-81	34432-34438	select	
183-82	34439-34455	jsonb_path_query	
183-83	34455-34456	(	
183-84	34456-34460	data	
183-85	34460-34461	,	
183-86	34462-34463	'	
183-87	34463-34464	$	
183-88	34464-34465	.	
183-89	34465-34471	prints	
183-90	34471-34472	[	
183-91	34472-34473	*	
183-92	34473-34474	]	
183-93	34475-34476	?	

#Text=(@.style=="hc") ?
184-1	34476-34477	(	
184-2	34477-34478	@	
184-3	34478-34479	.	
184-4	34479-34484	style	
184-5	34484-34485	=	
184-6	34485-34486	=	
184-7	34486-34487	"	
184-8	34487-34489	hc	
184-9	34489-34490	"	
184-10	34490-34491	)	
184-11	34492-34493	?	

#Text=(@.price ==100)') from books where id = 1000029;
#Text=jsonb_path_query
#Text=-------------------------------
#Text={"price": 100, "style": "hc"}
#Text=(1 row)
#Text=In summary, PostgreSQL provides a powerful and versatile platform to store and process JSON data.
185-1	34493-34494	(	
185-2	34494-34495	@	
185-3	34495-34496	.	
185-4	34496-34501	price	
185-5	34502-34503	=	
185-6	34503-34504	=	
185-7	34504-34507	100	
185-8	34507-34508	)	
185-9	34508-34509	'	
185-10	34509-34510	)	
185-11	34511-34515	from	
185-12	34516-34521	books	
185-13	34522-34527	where	
185-14	34528-34530	id	
185-15	34531-34532	=	
185-16	34533-34540	1000029	
185-17	34540-34541	;	
185-18	34542-34558	jsonb_path_query	
185-19	34559-34560	-	
185-20	34560-34561	-	
185-21	34561-34562	-	
185-22	34562-34563	-	
185-23	34563-34564	-	
185-24	34564-34565	-	
185-25	34565-34566	-	
185-26	34566-34567	-	
185-27	34567-34568	-	
185-28	34568-34569	-	
185-29	34569-34570	-	
185-30	34570-34571	-	
185-31	34571-34572	-	
185-32	34572-34573	-	
185-33	34573-34574	-	
185-34	34574-34575	-	
185-35	34575-34576	-	
185-36	34576-34577	-	
185-37	34577-34578	-	
185-38	34578-34579	-	
185-39	34579-34580	-	
185-40	34580-34581	-	
185-41	34581-34582	-	
185-42	34582-34583	-	
185-43	34583-34584	-	
185-44	34584-34585	-	
185-45	34585-34586	-	
185-46	34586-34587	-	
185-47	34587-34588	-	
185-48	34588-34589	-	
185-49	34589-34590	-	
185-50	34591-34592	{	
185-51	34592-34593	"	
185-52	34593-34598	price	
185-53	34598-34599	"	
185-54	34599-34600	:	
185-55	34601-34604	100	
185-56	34604-34605	,	
185-57	34606-34607	"	
185-58	34607-34612	style	
185-59	34612-34613	"	
185-60	34613-34614	:	
185-61	34615-34616	"	
185-62	34616-34618	hc	
185-63	34618-34619	"	
185-64	34619-34620	}	
185-65	34621-34622	(	
185-66	34622-34623	1	
185-67	34624-34627	row	
185-68	34627-34628	)	
185-69	34629-34631	In	
185-70	34632-34639	summary	
185-71	34639-34640	,	
185-72	34641-34651	PostgreSQL	
185-73	34652-34660	provides	
185-74	34661-34662	a	
185-75	34663-34671	powerful	
185-76	34672-34675	and	
185-77	34676-34685	versatile	
185-78	34686-34694	platform	
185-79	34695-34697	to	
185-80	34697-34698	 	
185-81	34698-34703	store	
185-82	34704-34707	and	
185-83	34708-34715	process	
185-84	34715-34716	 	
185-85	34716-34720	JSON	
185-86	34721-34725	data	
185-87	34725-34726	.	

#Text=There are several gotcha's that you need to be aware of, but we are optimistic that it will be fixed in future releases.
186-1	34727-34732	There	
186-2	34733-34736	are	
186-3	34737-34744	several	
186-4	34745-34753	gotcha's	
186-5	34754-34758	that	
186-6	34759-34762	you	
186-7	34763-34767	need	
186-8	34768-34770	to	
186-9	34771-34773	be	
186-10	34774-34779	aware	
186-11	34780-34782	of	
186-12	34782-34783	,	
186-13	34784-34787	but	
186-14	34788-34790	we	
186-15	34791-34794	are	
186-16	34795-34805	optimistic	
186-17	34806-34810	that	
186-18	34811-34813	it	
186-19	34814-34818	will	
186-20	34819-34821	be	
186-21	34822-34827	fixed	
186-22	34828-34830	in	
186-23	34831-34837	future	
186-24	34838-34846	releases	
186-25	34846-34847	.	

#Text=More tips for you
#Text=Which Is the Best PostgreSQL GUI?
187-1	34848-34852	More	
187-2	34853-34857	tips	
187-3	34858-34861	for	
187-4	34862-34865	you	
187-5	34866-34871	Which	
187-6	34872-34874	Is	
187-7	34875-34878	the	
187-8	34879-34883	Best	
187-9	34884-34894	PostgreSQL	
187-10	34895-34898	GUI	
187-11	34898-34899	?	

#Text=PostgreSQL graphical user interface (GUI) tools help these open source database users to manage, manipulate, and visualize their data.
188-1	34900-34910	PostgreSQL	
188-2	34911-34920	graphical	
188-3	34921-34925	user	
188-4	34926-34935	interface	
188-5	34936-34937	(	
188-6	34937-34940	GUI	
188-7	34940-34941	)	
188-8	34942-34947	tools	
188-9	34948-34952	help	
188-10	34953-34958	these	
188-11	34959-34963	open	
188-12	34964-34970	source	
188-13	34971-34979	database	
188-14	34980-34985	users	
188-15	34986-34988	to	
188-16	34989-34995	manage	
188-17	34995-34996	,	
188-18	34997-35007	manipulate	
188-19	35007-35008	,	
188-20	35009-35012	and	
188-21	35013-35022	visualize	
188-22	35023-35028	their	
188-23	35029-35033	data	
188-24	35033-35034	.	

#Text=In this post, we discuss the top 5 GUI tools for administering your PostgreSQL deployments.
189-1	35035-35037	In	
189-2	35038-35042	this	
189-3	35043-35047	post	
189-4	35047-35048	,	
189-5	35049-35051	we	
189-6	35052-35059	discuss	
189-7	35060-35063	the	
189-8	35064-35067	top	
189-9	35068-35069	5	
189-10	35070-35073	GUI	
189-11	35074-35079	tools	
189-12	35080-35083	for	
189-13	35084-35097	administering	
189-14	35098-35102	your	
189-15	35103-35113	PostgreSQL	
189-16	35114-35125	deployments	
189-17	35125-35126	.	

#Text=Learn more
#Text=Managing High Availability in PostgreSQL
#Text=Managing high availability in your PostgreSQL hosting is very important to ensuring your clusters maintain exceptional uptime and strong operational performance so your data is always available to your application.
190-1	35127-35132	Learn	
190-2	35133-35137	more	
190-3	35138-35146	Managing	
190-4	35147-35151	High	
190-5	35152-35164	Availability	
190-6	35165-35167	in	
190-7	35168-35178	PostgreSQL	
190-8	35179-35187	Managing	
190-9	35188-35192	high	
190-10	35193-35205	availability	
190-11	35206-35208	in	
190-12	35209-35213	your	
190-13	35214-35224	PostgreSQL	
190-14	35225-35232	hosting	
190-15	35233-35235	is	
190-16	35236-35240	very	
190-17	35241-35250	important	
190-18	35251-35253	to	
190-19	35254-35262	ensuring	
190-20	35263-35267	your	
190-21	35268-35276	clusters	
190-22	35277-35285	maintain	
190-23	35286-35297	exceptional	
190-24	35298-35304	uptime	
190-25	35305-35308	and	
190-26	35309-35315	strong	
190-27	35316-35327	operational	
190-28	35328-35339	performance	
190-29	35340-35342	so	
190-30	35343-35347	your	
190-31	35348-35352	data	
190-32	35353-35355	is	
190-33	35356-35362	always	
190-34	35363-35372	available	
190-35	35373-35375	to	
190-36	35376-35380	your	
190-37	35381-35392	application	
190-38	35392-35393	.	

#Text=Learn more
#Text=PostgreSQL Connection Pooling: Part 1 – Pros & Cons
#Text=In modern apps, clients open a lot of connections.
191-1	35394-35399	Learn	
191-2	35400-35404	more	
191-3	35405-35415	PostgreSQL	
191-4	35416-35426	Connection	
191-5	35427-35434	Pooling	
191-6	35434-35435	:	
191-7	35436-35440	Part	
191-8	35441-35442	1	
191-9	35443-35444	–	
191-10	35445-35449	Pros	
191-11	35450-35451	&	
191-12	35452-35456	Cons	
191-13	35457-35459	In	
191-14	35460-35466	modern	
191-15	35467-35471	apps	
191-16	35471-35472	,	
191-17	35473-35480	clients	
191-18	35481-35485	open	
191-19	35486-35487	a	
191-20	35488-35491	lot	
191-21	35492-35494	of	
191-22	35495-35506	connections	
191-23	35506-35507	.	

#Text=Developers are discouraged from holding a database connection while other operations take place.
192-1	35508-35518	Developers	
192-2	35519-35522	are	
192-3	35523-35534	discouraged	
192-4	35535-35539	from	
192-5	35540-35547	holding	
192-6	35548-35549	a	
192-7	35550-35558	database	
192-8	35559-35569	connection	
192-9	35570-35575	while	
192-10	35576-35581	other	
192-11	35582-35592	operations	
192-12	35593-35597	take	
192-13	35598-35603	place	
192-14	35603-35604	.	

#Text=“Open a connection as late as possible, close as soon as possible”.
193-1	35605-35606	“	
193-2	35606-35610	Open	
193-3	35611-35612	a	
193-4	35613-35623	connection	
193-5	35624-35626	as	
193-6	35627-35631	late	
193-7	35632-35634	as	
193-8	35635-35643	possible	
193-9	35643-35644	,	
193-10	35645-35650	close	
193-11	35651-35653	as	
193-12	35654-35658	soon	
193-13	35659-35661	as	
193-14	35662-35670	possible	
193-15	35670-35671	”	
193-16	35671-35672	.	

#Text=Learn more
#Text=+1 Tweet Share Share PinShares 0
#Text=Join the ScaleGrid Newsletter and never miss out!
194-1	35673-35678	Learn	
194-2	35679-35683	more	
194-3	35684-35685	+	
194-4	35685-35686	1	
194-5	35687-35692	Tweet	
194-6	35693-35698	Share	
194-7	35699-35704	Share	
194-8	35705-35714	PinShares	
194-9	35715-35716	0	
194-10	35717-35721	Join	
194-11	35722-35725	the	
194-12	35726-35735	ScaleGrid	
194-13	35736-35746	Newsletter	
194-14	35747-35750	and	
194-15	35751-35756	never	
194-16	35757-35761	miss	
194-17	35762-35765	out	
194-18	35765-35766	!	

#Text=Check out Related PostsWhich Is The Best PostgreSQL GUI?
195-1	35767-35772	Check	
195-2	35773-35776	out	
195-3	35777-35784	Related	
195-4	35785-35795	PostsWhich	
195-5	35796-35798	Is	
195-6	35799-35802	The	
195-7	35803-35807	Best	
195-8	35808-35818	PostgreSQL	
195-9	35819-35822	GUI	
195-10	35822-35823	?	

#Text=2021 ComparisonPostgreSQL graphical user interface (GUI) tools help open source database users to manage, manipulat...Read Full ArticleScaleGrid DigitalOcean Support for MySQL, PostgreSQL and Redis™ Now Av...PALO ALTO, Calif., June 9, 2020 – ScaleGrid, a leading Database-as-a-Service (DBaaS) provider, has j...Read Full ArticlePostgreSQL Connection Pooling: Part 1 - Pros & ConsA long time ago, in a galaxy far far away, ‘threads’ were a programming novelty rarely used and seld...Read Full Article
#Text=Dharshan is the founder of ScaleGrid.io (formerly MongoDirector.com).
196-1	35824-35828	2021	
196-2	35829-35849	ComparisonPostgreSQL	
196-3	35850-35859	graphical	
196-4	35860-35864	user	
196-5	35865-35874	interface	
196-6	35875-35876	(	
196-7	35876-35879	GUI	
196-8	35879-35880	)	
196-9	35881-35886	tools	
196-10	35887-35891	help	
196-11	35892-35896	open	
196-12	35897-35903	source	
196-13	35904-35912	database	
196-14	35913-35918	users	
196-15	35919-35921	to	
196-16	35922-35928	manage	
196-17	35928-35929	,	
196-18	35930-35939	manipulat	
196-19	35939-35940	.	
196-20	35940-35941	.	
196-21	35941-35942	.	
196-22	35942-35946	Read	
196-23	35947-35951	Full	
196-24	35952-35968	ArticleScaleGrid	
196-25	35969-35981	DigitalOcean	
196-26	35982-35989	Support	
196-27	35990-35993	for	
196-28	35994-35999	MySQL	
196-29	35999-36000	,	
196-30	36001-36011	PostgreSQL	
196-31	36012-36015	and	
196-32	36016-36021	Redis	
196-33	36021-36022	™	
196-34	36023-36026	Now	
196-35	36027-36029	Av	
196-36	36029-36030	.	
196-37	36030-36031	.	
196-38	36031-36032	.	
196-39	36032-36036	PALO	
196-40	36037-36041	ALTO	
196-41	36041-36042	,	
196-42	36043-36048	Calif	
196-43	36048-36049	.	
196-44	36049-36050	,	
196-45	36051-36055	June	
196-46	36056-36057	9	
196-47	36057-36058	,	
196-48	36059-36063	2020	
196-49	36064-36065	–	
196-50	36066-36075	ScaleGrid	
196-51	36075-36076	,	
196-52	36077-36078	a	
196-53	36079-36086	leading	
196-54	36087-36108	Database-as-a-Service	
196-55	36109-36110	(	
196-56	36110-36115	DBaaS	
196-57	36115-36116	)	
196-58	36117-36125	provider	
196-59	36125-36126	,	
196-60	36127-36130	has	
196-61	36131-36132	j	
196-62	36132-36133	.	
196-63	36133-36134	.	
196-64	36134-36135	.	
196-65	36135-36139	Read	
196-66	36140-36144	Full	
196-67	36145-36162	ArticlePostgreSQL	
196-68	36163-36173	Connection	
196-69	36174-36181	Pooling	
196-70	36181-36182	:	
196-71	36183-36187	Part	
196-72	36188-36189	1	
196-73	36190-36191	-	
196-74	36192-36196	Pros	
196-75	36197-36198	&	
196-76	36199-36204	ConsA	
196-77	36205-36209	long	
196-78	36210-36214	time	
196-79	36215-36218	ago	
196-80	36218-36219	,	
196-81	36220-36222	in	
196-82	36223-36224	a	
196-83	36225-36231	galaxy	
196-84	36232-36235	far	
196-85	36236-36239	far	
196-86	36240-36244	away	
196-87	36244-36245	,	
196-88	36246-36247	‘	
196-89	36247-36254	threads	
196-90	36254-36255	’	
196-91	36256-36260	were	
196-92	36261-36262	a	
196-93	36263-36274	programming	
196-94	36275-36282	novelty	
196-95	36283-36289	rarely	
196-96	36290-36294	used	
196-97	36295-36298	and	
196-98	36299-36303	seld	
196-99	36303-36304	.	
196-100	36304-36305	.	
196-101	36305-36306	.	
196-102	36306-36310	Read	
196-103	36311-36315	Full	
196-104	36316-36323	Article	
196-105	36324-36332	Dharshan	
196-106	36333-36335	is	
196-107	36336-36339	the	
196-108	36340-36347	founder	
196-109	36348-36350	of	
196-110	36351-36363	ScaleGrid.io	
196-111	36364-36365	(	
196-112	36365-36373	formerly	
196-113	36374-36391	MongoDirector.com	
196-114	36391-36392	)	
196-115	36392-36393	.	

#Text=He is an experienced MongoDB developer and administrator.
197-1	36394-36396	He	
197-2	36397-36399	is	
197-3	36400-36402	an	
197-4	36403-36414	experienced	
197-5	36415-36422	MongoDB	
197-6	36423-36432	developer	
197-7	36433-36436	and	
197-8	36437-36450	administrator	
197-9	36450-36451	.	

#Text=He can be reached for further comment at @dharshanrg
#Text=Start Your Free 30 Day Trial
#Text=ASDFADSF FDASFDA
#Text=Syntax error at
#Text=CREATE INDEX datatagsgin ON books USING gin (data->’tags’);
#Text=should be
#Text=CREATE INDEX datatagsgin ON books USING gin ((data->’tags’));
#Text=machty
#Text=It’s pretty hard to follow some of the examples when you’re using machine-y sample data like `”{“tags”: {“nk594127″: {“ik71786″: “iv678771″}}`.
198-1	36452-36454	He	
198-2	36455-36458	can	
198-3	36459-36461	be	
198-4	36462-36469	reached	
198-5	36470-36473	for	
198-6	36474-36481	further	
198-7	36482-36489	comment	
198-8	36490-36492	at	
198-9	36493-36494	@	
198-10	36494-36504	dharshanrg	
198-11	36505-36510	Start	
198-12	36511-36515	Your	
198-13	36516-36520	Free	
198-14	36521-36523	30	
198-15	36524-36527	Day	
198-16	36528-36533	Trial	
198-17	36534-36542	ASDFADSF	
198-18	36543-36550	FDASFDA	
198-19	36551-36557	Syntax	
198-20	36558-36563	error	
198-21	36564-36566	at	
198-22	36567-36573	CREATE	
198-23	36574-36579	INDEX	
198-24	36580-36591	datatagsgin	
198-25	36592-36594	ON	
198-26	36595-36600	books	
198-27	36601-36606	USING	
198-28	36607-36610	gin	
198-29	36611-36612	(	
198-30	36612-36616	data	
198-31	36616-36617	-	
198-32	36617-36618	>	
198-33	36618-36619	’	
198-34	36619-36623	tags	
198-35	36623-36624	’	
198-36	36624-36625	)	
198-37	36625-36626	;	
198-38	36627-36633	should	
198-39	36634-36636	be	
198-40	36637-36643	CREATE	
198-41	36644-36649	INDEX	
198-42	36650-36661	datatagsgin	
198-43	36662-36664	ON	
198-44	36665-36670	books	
198-45	36671-36676	USING	
198-46	36677-36680	gin	
198-47	36681-36682	(	
198-48	36682-36683	(	
198-49	36683-36687	data	
198-50	36687-36688	-	
198-51	36688-36689	>	
198-52	36689-36690	’	
198-53	36690-36694	tags	
198-54	36694-36695	’	
198-55	36695-36696	)	
198-56	36696-36697	)	
198-57	36697-36698	;	
198-58	36699-36705	machty	
198-59	36706-36708	It	
198-60	36708-36709	’	
198-61	36709-36710	s	
198-62	36711-36717	pretty	
198-63	36718-36722	hard	
198-64	36723-36725	to	
198-65	36726-36732	follow	
198-66	36733-36737	some	
198-67	36738-36740	of	
198-68	36741-36744	the	
198-69	36745-36753	examples	
198-70	36754-36758	when	
198-71	36759-36762	you	
198-72	36762-36763	’	
198-73	36763-36765	re	
198-74	36766-36771	using	
198-75	36772-36781	machine-y	
198-76	36782-36788	sample	
198-77	36789-36793	data	
198-78	36794-36798	like	
198-79	36799-36800	`	
198-80	36800-36801	”	
198-81	36801-36802	{	
198-82	36802-36803	“	
198-83	36803-36807	tags	
198-84	36807-36808	”	
198-85	36808-36809	:	
198-86	36810-36811	{	
198-87	36811-36812	“	
198-88	36812-36820	nk594127	
198-89	36820-36821	″	
198-90	36821-36822	:	
198-91	36823-36824	{	
198-92	36824-36825	“	
198-93	36825-36832	ik71786	
198-94	36832-36833	″	
198-95	36833-36834	:	
198-96	36835-36836	“	
198-97	36836-36844	iv678771	
198-98	36844-36845	″	
198-99	36845-36846	}	
198-100	36846-36847	}	
198-101	36847-36848	`	
198-102	36848-36849	.	

#Text=Search:
#Text=About us:
#Text=ScaleGrid is a fully managed database hosting service for
#Text=MongoDB® , Redis™, MySQL, and PostgreSQL
#Text=on public and private clouds.
199-1	36850-36856	Search	
199-2	36856-36857	:	
199-3	36858-36863	About	
199-4	36864-36866	us	
199-5	36866-36867	:	
199-6	36868-36877	ScaleGrid	
199-7	36878-36880	is	
199-8	36881-36882	a	
199-9	36883-36888	fully	
199-10	36889-36896	managed	
199-11	36897-36905	database	
199-12	36906-36913	hosting	
199-13	36914-36921	service	
199-14	36922-36925	for	
199-15	36926-36933	MongoDB	
199-16	36933-36934	®	
199-17	36935-36936	,	
199-18	36937-36942	Redis	
199-19	36942-36943	™	
199-20	36943-36944	,	
199-21	36945-36950	MySQL	
199-22	36950-36951	,	
199-23	36952-36955	and	
199-24	36956-36966	PostgreSQL	
199-25	36967-36969	on	
199-26	36970-36976	public	
199-27	36977-36980	and	
199-28	36981-36988	private	
199-29	36989-36995	clouds	
199-30	36995-36996	.	

#Text=You may also be interested in
#Text=mysqldump Best Practices: Part 2 – Migrations Guide
#Text=ScaleGrid Adds Oracle Cloud for Managed Database Hosting
#Text=Which Is The Best PostgreSQL GUI?
200-1	36997-37000	You	
200-2	37001-37004	may	
200-3	37005-37009	also	
200-4	37010-37012	be	
200-5	37013-37023	interested	
200-6	37024-37026	in	
200-7	37027-37036	mysqldump	
200-8	37037-37041	Best	
200-9	37042-37051	Practices	
200-10	37051-37052	:	
200-11	37053-37057	Part	
200-12	37058-37059	2	
200-13	37060-37061	–	
200-14	37062-37072	Migrations	
200-15	37073-37078	Guide	
200-16	37079-37088	ScaleGrid	
200-17	37089-37093	Adds	
200-18	37094-37100	Oracle	
200-19	37101-37106	Cloud	
200-20	37107-37110	for	
200-21	37111-37118	Managed	
200-22	37119-37127	Database	
200-23	37128-37135	Hosting	
200-24	37136-37141	Which	
200-25	37142-37144	Is	
200-26	37145-37148	The	
200-27	37149-37153	Best	
200-28	37154-37164	PostgreSQL	
200-29	37165-37168	GUI	
200-30	37168-37169	?	

#Text=2021 Comparison
#Text=Oracle Cloud Breakdown – Database Hosting Costs on OCI
#Text=How To Set Up MySQL on DigitalOcean
#Text=0 Shares +1 Tweet Share Share Pin
#Text=ScaleGrid provides a fully managed Database-as-a-Service (DBaaS) solution used by thousands of developers, startups, and enterprise customers including UPS, Polaris, and Adobe.
201-1	37170-37174	2021	
201-2	37175-37185	Comparison	
201-3	37186-37192	Oracle	
201-4	37193-37198	Cloud	
201-5	37199-37208	Breakdown	
201-6	37209-37210	–	
201-7	37211-37219	Database	
201-8	37220-37227	Hosting	
201-9	37228-37233	Costs	
201-10	37234-37236	on	
201-11	37237-37240	OCI	
201-12	37241-37244	How	
201-13	37245-37247	To	
201-14	37248-37251	Set	
201-15	37252-37254	Up	
201-16	37255-37260	MySQL	
201-17	37261-37263	on	
201-18	37264-37276	DigitalOcean	
201-19	37277-37278	0	
201-20	37279-37285	Shares	
201-21	37286-37287	+	
201-22	37287-37288	1	
201-23	37289-37294	Tweet	
201-24	37295-37300	Share	
201-25	37301-37306	Share	
201-26	37307-37310	Pin	
201-27	37311-37320	ScaleGrid	
201-28	37321-37329	provides	
201-29	37330-37331	a	
201-30	37332-37337	fully	
201-31	37338-37345	managed	
201-32	37346-37367	Database-as-a-Service	
201-33	37368-37369	(	
201-34	37369-37374	DBaaS	
201-35	37374-37375	)	
201-36	37376-37384	solution	
201-37	37385-37389	used	
201-38	37390-37392	by	
201-39	37393-37402	thousands	
201-40	37403-37405	of	
201-41	37406-37416	developers	
201-42	37416-37417	,	
201-43	37418-37426	startups	
201-44	37426-37427	,	
201-45	37428-37431	and	
201-46	37432-37442	enterprise	
201-47	37443-37452	customers	
201-48	37453-37462	including	
201-49	37463-37466	UPS	
201-50	37466-37467	,	
201-51	37468-37475	Polaris	
201-52	37475-37476	,	
201-53	37477-37480	and	
201-54	37481-37486	Adobe	
201-55	37486-37487	.	

#Text=The ScaleGrid platform supports MongoDB® Database, Redis™, MySQL, and PostgreSQL on both public and private clouds, including Amazon AWS, Microsoft Azure, Google Cloud Platform, DigitalOcean, and VMware, and automates your time-consuming tasks at any scale so you can focus on your product instead of operations.
202-1	37488-37491	The	
202-2	37492-37501	ScaleGrid	
202-3	37502-37510	platform	
202-4	37511-37519	supports	
202-5	37520-37527	MongoDB	
202-6	37527-37528	®	
202-7	37529-37537	Database	
202-8	37537-37538	,	
202-9	37539-37544	Redis	
202-10	37544-37545	™	
202-11	37545-37546	,	
202-12	37547-37552	MySQL	
202-13	37552-37553	,	
202-14	37554-37557	and	
202-15	37558-37568	PostgreSQL	
202-16	37569-37571	on	
202-17	37572-37576	both	
202-18	37577-37583	public	
202-19	37584-37587	and	
202-20	37588-37595	private	
202-21	37596-37602	clouds	
202-22	37602-37603	,	
202-23	37604-37613	including	
202-24	37614-37620	Amazon	
202-25	37621-37624	AWS	
202-26	37624-37625	,	
202-27	37626-37635	Microsoft	
202-28	37636-37641	Azure	
202-29	37641-37642	,	
202-30	37643-37649	Google	
202-31	37650-37655	Cloud	
202-32	37656-37664	Platform	
202-33	37664-37665	,	
202-34	37666-37678	DigitalOcean	
202-35	37678-37679	,	
202-36	37680-37683	and	
202-37	37684-37690	VMware	
202-38	37690-37691	,	
202-39	37692-37695	and	
202-40	37696-37705	automates	
202-41	37706-37710	your	
202-42	37711-37725	time-consuming	
202-43	37726-37731	tasks	
202-44	37732-37734	at	
202-45	37735-37738	any	
202-46	37739-37744	scale	
202-47	37745-37747	so	
202-48	37748-37751	you	
202-49	37752-37755	can	
202-50	37756-37761	focus	
202-51	37762-37764	on	
202-52	37765-37769	your	
202-53	37770-37777	product	
202-54	37778-37785	instead	
202-55	37786-37788	of	
202-56	37789-37799	operations	
202-57	37799-37800	.	

#Text=Start a FREE 30-Day Trial
#Text=MongoDB
#Text=Compare MongoDB DBaaS AWS Azure DigitalOcean
#Text=Redis™
#Text=Compare Redis™ DBaaS AWS
#Text=Azure
#Text=DigitalOcean
#Text=Google Cloud Platform
#Text=MySQL
#Text=Compare MySQL DBaaS AWS Azure
#Text=DigitalOcean
#Text=Google Cloud Platform
#Text=PostgreSQL
#Text=Compare PostgreSQL DBaaS AWS Azure
#Text=DigitalOcean
#Text=Google Cloud Platform
#Text=Pricing
#Text=Startup Program
#Text=Switching Providers
#Text=About Us
#Text=Customer Stories
#Text=Press
#Text=Contact
#Text=Email support@scalegrid.io
#Text=Resources
#Text=Blog
#Text=Documentation
#Text=Support Status
#Text=API Reference
#Text=Terms of Service
#Text=GDPR DPA
#Text=CCPA DPA
#Text=Privacy Policy Subprocessors
#Text=MONGO®, MongoDB® and MongoDB® & Design are registered trademarks of MongoDB®, Inc.
203-1	37801-37806	Start	
203-2	37807-37808	a	
203-3	37809-37813	FREE	
203-4	37814-37816	30	
203-5	37816-37817	-	
203-6	37817-37820	Day	
203-7	37821-37826	Trial	
203-8	37827-37834	MongoDB	
203-9	37835-37842	Compare	
203-10	37843-37850	MongoDB	
203-11	37851-37856	DBaaS	
203-12	37857-37860	AWS	
203-13	37861-37866	Azure	
203-14	37867-37879	DigitalOcean	
203-15	37880-37885	Redis	
203-16	37885-37886	™	
203-17	37887-37894	Compare	
203-18	37895-37900	Redis	
203-19	37900-37901	™	
203-20	37902-37907	DBaaS	
203-21	37908-37911	AWS	
203-22	37912-37917	Azure	
203-23	37918-37930	DigitalOcean	
203-24	37931-37937	Google	
203-25	37938-37943	Cloud	
203-26	37944-37952	Platform	
203-27	37953-37958	MySQL	
203-28	37959-37966	Compare	
203-29	37967-37972	MySQL	
203-30	37973-37978	DBaaS	
203-31	37979-37982	AWS	
203-32	37983-37988	Azure	
203-33	37989-38001	DigitalOcean	
203-34	38002-38008	Google	
203-35	38009-38014	Cloud	
203-36	38015-38023	Platform	
203-37	38024-38034	PostgreSQL	
203-38	38035-38042	Compare	
203-39	38043-38053	PostgreSQL	
203-40	38054-38059	DBaaS	
203-41	38060-38063	AWS	
203-42	38064-38069	Azure	
203-43	38070-38082	DigitalOcean	
203-44	38083-38089	Google	
203-45	38090-38095	Cloud	
203-46	38096-38104	Platform	
203-47	38105-38112	Pricing	
203-48	38113-38120	Startup	
203-49	38121-38128	Program	
203-50	38129-38138	Switching	
203-51	38139-38148	Providers	
203-52	38149-38154	About	
203-53	38155-38157	Us	
203-54	38158-38166	Customer	
203-55	38167-38174	Stories	
203-56	38175-38180	Press	
203-57	38181-38188	Contact	
203-58	38189-38194	Email	
203-59	38195-38202	support	
203-60	38202-38203	@	
203-61	38203-38215	scalegrid.io	
203-62	38216-38225	Resources	
203-63	38226-38230	Blog	
203-64	38231-38244	Documentation	
203-65	38245-38252	Support	
203-66	38253-38259	Status	
203-67	38260-38263	API	
203-68	38264-38273	Reference	
203-69	38274-38279	Terms	
203-70	38280-38282	of	
203-71	38283-38290	Service	
203-72	38291-38295	GDPR	
203-73	38296-38299	DPA	
203-74	38300-38304	CCPA	
203-75	38305-38308	DPA	
203-76	38309-38316	Privacy	
203-77	38317-38323	Policy	
203-78	38324-38337	Subprocessors	
203-79	38338-38343	MONGO	
203-80	38343-38344	®	
203-81	38344-38345	,	
203-82	38346-38353	MongoDB	
203-83	38353-38354	®	
203-84	38355-38358	and	
203-85	38359-38366	MongoDB	
203-86	38366-38367	®	
203-87	38368-38369	&	
203-88	38370-38376	Design	
203-89	38377-38380	are	
203-90	38381-38391	registered	
203-91	38392-38402	trademarks	
203-92	38403-38405	of	
203-93	38406-38413	MongoDB	
203-94	38413-38414	®	
203-95	38414-38415	,	
203-96	38416-38419	Inc	
203-97	38419-38420	.	

#Text=Redis is a trademark of Redis Labs Ltd.
204-1	38421-38426	Redis	
204-2	38427-38429	is	
204-3	38430-38431	a	
204-4	38432-38441	trademark	
204-5	38442-38444	of	
204-6	38445-38450	Redis	
204-7	38451-38455	Labs	
204-8	38456-38459	Ltd	
204-9	38459-38460	.	

#Text=Any rights therein are reserved to Redis Labs Ltd.
205-1	38461-38464	Any	
205-2	38465-38471	rights	
205-3	38472-38479	therein	
205-4	38480-38483	are	
205-5	38484-38492	reserved	
205-6	38493-38495	to	
205-7	38496-38501	Redis	
205-8	38502-38506	Labs	
205-9	38507-38510	Ltd	
205-10	38510-38511	.	

#Text=Any use by ScaleGrid is for referential purposes only and does not indicate any sponsorship, endorsement or affiliation between Redis and ScaleGrid.Greenplum™ is a trademark of Pivotal Software, Inc. in the U.S. and other countries.
206-1	38512-38515	Any	
206-2	38516-38519	use	
206-3	38520-38522	by	
206-4	38523-38532	ScaleGrid	
206-5	38533-38535	is	
206-6	38536-38539	for	
206-7	38540-38551	referential	
206-8	38552-38560	purposes	
206-9	38561-38565	only	
206-10	38566-38569	and	
206-11	38570-38574	does	
206-12	38575-38578	not	
206-13	38579-38587	indicate	
206-14	38588-38591	any	
206-15	38592-38603	sponsorship	
206-16	38603-38604	,	
206-17	38605-38616	endorsement	
206-18	38617-38619	or	
206-19	38620-38631	affiliation	
206-20	38632-38639	between	
206-21	38640-38645	Redis	
206-22	38646-38649	and	
206-23	38650-38669	ScaleGrid.Greenplum	
206-24	38669-38670	™	
206-25	38671-38673	is	
206-26	38674-38675	a	
206-27	38676-38685	trademark	
206-28	38686-38688	of	
206-29	38689-38696	Pivotal	
206-30	38697-38705	Software	
206-31	38705-38706	,	
206-32	38707-38710	Inc	
206-33	38710-38711	.	
206-34	38712-38714	in	
206-35	38715-38718	the	
206-36	38719-38722	U.S	
206-37	38722-38723	.	
206-38	38724-38727	and	
206-39	38728-38733	other	
206-40	38734-38743	countries	
206-41	38743-38744	.	
