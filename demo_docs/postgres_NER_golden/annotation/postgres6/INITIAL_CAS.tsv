#FORMAT=WebAnno TSV 3.3


#Text=13 Tips to Improve PostgreSQL Insert Performance - DZone Database
#Text=Database Zone
#Text=Thanks for visiting DZone today,
#Text=Edit Profile
#Text=Manage Email Subscriptions
#Text=How to Post to DZone
#Text=Sign Out
#Text=View Profile
#Text=Post
#Text=Over 2 million developers have joined DZone.
1-1	0-2	13	
1-2	3-7	Tips	
1-3	8-10	to	
1-4	11-18	Improve	
1-5	19-29	PostgreSQL	
1-6	30-36	Insert	
1-7	37-48	Performance	
1-8	49-50	-	
1-9	51-56	DZone	
1-10	57-65	Database	
1-11	66-74	Database	
1-12	75-79	Zone	
1-13	80-86	Thanks	
1-14	87-90	for	
1-15	91-99	visiting	
1-16	100-105	DZone	
1-17	106-111	today	
1-18	111-112	,	
1-19	113-117	Edit	
1-20	118-125	Profile	
1-21	126-132	Manage	
1-22	133-138	Email	
1-23	139-152	Subscriptions	
1-24	153-156	How	
1-25	157-159	to	
1-26	160-164	Post	
1-27	165-167	to	
1-28	168-173	DZone	
1-29	174-178	Sign	
1-30	179-182	Out	
1-31	183-187	View	
1-32	188-195	Profile	
1-33	196-200	Post	
1-34	201-205	Over	
1-35	206-207	2	
1-36	208-215	million	
1-37	216-226	developers	
1-38	227-231	have	
1-39	232-238	joined	
1-40	239-244	DZone	
1-41	244-245	.	

#Text=Log In
#Text=Join
#Text=Refcardz
#Text=Research
#Text=Webinars
#Text=Zones
#Text=Agile
#Text=Big Data
#Text=Cloud
#Text=Database
#Text=DevOps
#Text=Integration
#Text=IoT
#Text=Java
#Text=Microservices
#Text=Open Source
#Text=Performance
#Text=Security
#Text=Web Dev
#Text=DZone
#Text=Database Zone
#Text=13 Tips to Improve PostgreSQL Insert Performance
#Text=13 Tips to Improve PostgreSQL Insert Performance
#Text=Get a cheatsheet full of ways to improve your database ingest (INSERT) performance and speed up your time-series queries using PostgreSQL.
2-1	246-249	Log	
2-2	250-252	In	
2-3	253-257	Join	
2-4	258-266	Refcardz	
2-5	267-275	Research	
2-6	276-284	Webinars	
2-7	285-290	Zones	
2-8	291-296	Agile	
2-9	297-300	Big	
2-10	301-305	Data	
2-11	306-311	Cloud	
2-12	312-320	Database	
2-13	321-327	DevOps	
2-14	328-339	Integration	
2-15	340-343	IoT	
2-16	344-348	Java	
2-17	349-362	Microservices	
2-18	363-367	Open	
2-19	368-374	Source	
2-20	375-386	Performance	
2-21	387-395	Security	
2-22	396-399	Web	
2-23	400-403	Dev	
2-24	404-409	DZone	
2-25	410-418	Database	
2-26	419-423	Zone	
2-27	424-426	13	
2-28	427-431	Tips	
2-29	432-434	to	
2-30	435-442	Improve	
2-31	443-453	PostgreSQL	
2-32	454-460	Insert	
2-33	461-472	Performance	
2-34	473-475	13	
2-35	476-480	Tips	
2-36	481-483	to	
2-37	484-491	Improve	
2-38	492-502	PostgreSQL	
2-39	503-509	Insert	
2-40	510-521	Performance	
2-41	522-525	Get	
2-42	526-527	a	
2-43	528-538	cheatsheet	
2-44	539-543	full	
2-45	544-546	of	
2-46	547-551	ways	
2-47	552-554	to	
2-48	555-562	improve	
2-49	563-567	your	
2-50	568-576	database	
2-51	577-583	ingest	
2-52	584-585	(	
2-53	585-591	INSERT	
2-54	591-592	)	
2-55	593-604	performance	
2-56	605-608	and	
2-57	609-614	speed	
2-58	615-617	up	
2-59	618-622	your	
2-60	623-634	time-series	
2-61	635-642	queries	
2-62	643-648	using	
2-63	649-659	PostgreSQL	
2-64	659-660	.	

#Text=Mike Freedman
#Text=Jul. 08, 20
#Text=Database Zone
#Text=Tutorial
#Text=Like
#Text=(2)
#Text=Comment
#Text=Save
#Text=Tweet
#Text=11.98K
#Text=Views
#Text=Join the DZone community and get the full member experience.
3-1	661-665	Mike	
3-2	666-674	Freedman	
3-3	675-678	Jul	
3-4	678-679	.	
3-5	680-682	08	
3-6	682-683	,	
3-7	684-686	20	
3-8	687-695	Database	
3-9	696-700	Zone	
3-10	701-709	Tutorial	
3-11	710-714	Like	
3-12	715-716	(	
3-13	716-717	2	
3-14	717-718	)	
3-15	719-726	Comment	
3-16	727-731	Save	
3-17	732-737	Tweet	
3-18	738-744	11.98K	
3-19	745-750	Views	
3-20	751-755	Join	
3-21	756-759	the	
3-22	760-765	DZone	
3-23	766-775	community	
3-24	776-779	and	
3-25	780-783	get	
3-26	784-787	the	
3-27	788-792	full	
3-28	793-799	member	
3-29	800-810	experience	
3-30	810-811	.	

#Text=Join For Free
#Text=Ingest performance is critical for many common PostgreSQL use cases, including application monitoring, application analytics, IoT monitoring, and more.
4-1	812-816	Join	
4-2	817-820	For	
4-3	821-825	Free	
4-4	826-832	Ingest	
4-5	833-844	performance	
4-6	845-847	is	
4-7	848-856	critical	
4-8	857-860	for	
4-9	861-865	many	
4-10	866-872	common	
4-11	873-883	PostgreSQL	
4-12	884-887	use	
4-13	888-893	cases	
4-14	893-894	,	
4-15	895-904	including	
4-16	905-916	application	
4-17	917-927	monitoring	
4-18	927-928	,	
4-19	929-940	application	
4-20	941-950	analytics	
4-21	950-951	,	
4-22	952-955	IoT	
4-23	956-966	monitoring	
4-24	966-967	,	
4-25	968-971	and	
4-26	972-976	more	
4-27	976-977	.	

#Text=While databases have long had time fields, there's a key difference in the type of data these use cases collect: unlike standard relational "business" data, changes are treated as inserts, not overwrites (in other words, every new value becomes a new row in the database, instead of replacing the row's prior value with the latest one).
5-1	978-983	While	
5-2	984-993	databases	
5-3	994-998	have	
5-4	999-1003	long	
5-5	1004-1007	had	
5-6	1008-1012	time	
5-7	1013-1019	fields	
5-8	1019-1020	,	
5-9	1021-1028	there's	
5-10	1029-1030	a	
5-11	1031-1034	key	
5-12	1035-1045	difference	
5-13	1046-1048	in	
5-14	1049-1052	the	
5-15	1053-1057	type	
5-16	1058-1060	of	
5-17	1061-1065	data	
5-18	1066-1071	these	
5-19	1072-1075	use	
5-20	1076-1081	cases	
5-21	1082-1089	collect	
5-22	1089-1090	:	
5-23	1091-1097	unlike	
5-24	1098-1106	standard	
5-25	1107-1117	relational	
5-26	1118-1119	"	
5-27	1119-1127	business	
5-28	1127-1128	"	
5-29	1129-1133	data	
5-30	1133-1134	,	
5-31	1135-1142	changes	
5-32	1143-1146	are	
5-33	1147-1154	treated	
5-34	1155-1157	as	
5-35	1158-1165	inserts	
5-36	1165-1166	,	
5-37	1167-1170	not	
5-38	1171-1181	overwrites	
5-39	1182-1183	(	
5-40	1183-1185	in	
5-41	1186-1191	other	
5-42	1192-1197	words	
5-43	1197-1198	,	
5-44	1199-1204	every	
5-45	1205-1208	new	
5-46	1209-1214	value	
5-47	1215-1222	becomes	
5-48	1223-1224	a	
5-49	1225-1228	new	
5-50	1228-1229	 	
5-51	1229-1232	row	
5-52	1233-1235	in	
5-53	1236-1239	the	
5-54	1240-1248	database	
5-55	1248-1249	,	
5-56	1250-1257	instead	
5-57	1258-1260	of	
5-58	1261-1270	replacing	
5-59	1271-1274	the	
5-60	1275-1280	row's	
5-61	1281-1286	prior	
5-62	1287-1292	value	
5-63	1293-1297	with	
5-64	1298-1301	the	
5-65	1302-1308	latest	
5-66	1309-1312	one	
5-67	1312-1313	)	
5-68	1313-1314	.	

#Text=If you're operating in a scenario where you need to retain all data v. overwriting past values, optimizing the speed in which your database can ingest new data becomes essential.
6-1	1315-1317	If	
6-2	1318-1324	you're	
6-3	1325-1334	operating	
6-4	1335-1337	in	
6-5	1338-1339	a	
6-6	1340-1348	scenario	
6-7	1349-1354	where	
6-8	1355-1358	you	
6-9	1359-1363	need	
6-10	1364-1366	to	
6-11	1367-1373	retain	
6-12	1374-1377	all	
6-13	1378-1382	data	
6-14	1383-1384	v	
6-15	1384-1385	.	
6-16	1386-1397	overwriting	
6-17	1398-1402	past	
6-18	1403-1409	values	
6-19	1409-1410	,	
6-20	1411-1421	optimizing	
6-21	1422-1425	the	
6-22	1426-1431	speed	
6-23	1432-1434	in	
6-24	1435-1440	which	
6-25	1441-1445	your	
6-26	1446-1454	database	
6-27	1455-1458	can	
6-28	1459-1465	ingest	
6-29	1466-1469	new	
6-30	1470-1474	data	
6-31	1475-1482	becomes	
6-32	1483-1492	essential	
6-33	1492-1493	.	

#Text=We have a lot of experience optimizing performance for ourselves and our community members, and we’ve broken our top tips into two categories.
7-1	1494-1496	We	
7-2	1497-1501	have	
7-3	1502-1503	a	
7-4	1504-1507	lot	
7-5	1508-1510	of	
7-6	1511-1521	experience	
7-7	1522-1532	optimizing	
7-8	1533-1544	performance	
7-9	1545-1548	for	
7-10	1549-1558	ourselves	
7-11	1559-1562	and	
7-12	1563-1566	our	
7-13	1567-1576	community	
7-14	1577-1584	members	
7-15	1584-1585	,	
7-16	1586-1589	and	
7-17	1590-1592	we	
7-18	1592-1593	’	
7-19	1593-1595	ve	
7-20	1596-1602	broken	
7-21	1603-1606	our	
7-22	1607-1610	top	
7-23	1611-1615	tips	
7-24	1616-1620	into	
7-25	1621-1624	two	
7-26	1625-1635	categories	
7-27	1635-1636	.	

#Text=First, we’ve outlined a few tips that are useful for improving PostgreSQL in general. 
8-1	1637-1642	First	
8-2	1642-1643	,	
8-3	1644-1646	we	
8-4	1646-1647	’	
8-5	1647-1649	ve	
8-6	1650-1658	outlined	
8-7	1659-1660	a	
8-8	1661-1664	few	
8-9	1665-1669	tips	
8-10	1670-1674	that	
8-11	1675-1678	are	
8-12	1679-1685	useful	
8-13	1686-1689	for	
8-14	1690-1699	improving	
8-15	1700-1710	PostgreSQL	
8-16	1711-1713	in	
8-17	1714-1721	general	
8-18	1721-1722	.	
8-19	1722-1723	 	

#Text=After that, we’ve outlined a few that are specific to TimescaleDB.
9-1	1723-1728	After	
9-2	1729-1733	that	
9-3	1733-1734	,	
9-4	1735-1737	we	
9-5	1737-1738	’	
9-6	1738-1740	ve	
9-7	1741-1749	outlined	
9-8	1750-1751	a	
9-9	1752-1755	few	
9-10	1756-1760	that	
9-11	1761-1764	are	
9-12	1765-1773	specific	
9-13	1774-1776	to	
9-14	1777-1788	TimescaleDB	
9-15	1788-1789	.	

#Text=Improve PostgreSQL Performance
#Text=Here are some best practices for improving ingest performance in vanilla PostgreSQL:
#Text=1.
10-1	1790-1797	Improve	
10-2	1798-1808	PostgreSQL	
10-3	1809-1820	Performance	
10-4	1821-1825	Here	
10-5	1826-1829	are	
10-6	1830-1834	some	
10-7	1835-1839	best	
10-8	1840-1849	practices	
10-9	1850-1853	for	
10-10	1854-1863	improving	
10-11	1864-1870	ingest	
10-12	1871-1882	performance	
10-13	1883-1885	in	
10-14	1886-1893	vanilla	
10-15	1894-1904	PostgreSQL	
10-16	1904-1905	:	
10-17	1906-1907	1	
10-18	1907-1908	.	

#Text=Use Indexes in Moderation
#Text=Having the right indexes can speed up your queries, but they’re not a silver bullet.
11-1	1909-1912	Use	
11-2	1913-1920	Indexes	
11-3	1921-1923	in	
11-4	1924-1934	Moderation	
11-5	1935-1941	Having	
11-6	1942-1945	the	
11-7	1946-1951	right	
11-8	1952-1959	indexes	
11-9	1960-1963	can	
11-10	1964-1969	speed	
11-11	1970-1972	up	
11-12	1973-1977	your	
11-13	1978-1985	queries	
11-14	1985-1986	,	
11-15	1987-1990	but	
11-16	1991-1995	they	
11-17	1995-1996	’	
11-18	1996-1998	re	
11-19	1999-2002	not	
11-20	2003-2004	a	
11-21	2005-2011	silver	
11-22	2012-2018	bullet	
11-23	2018-2019	.	

#Text=Incrementally maintaining indexes with each new row requires additional work.
12-1	2020-2033	Incrementally	
12-2	2034-2045	maintaining	
12-3	2046-2053	indexes	
12-4	2054-2058	with	
12-5	2059-2063	each	
12-6	2064-2067	new	
12-7	2068-2071	row	
12-8	2072-2080	requires	
12-9	2081-2091	additional	
12-10	2092-2096	work	
12-11	2096-2097	.	

#Text=Check the number of indexes you’ve defined on your table (use the psql command \\d table_name), and determine whether their potential query benefits outweigh the storage and insert overhead.
13-1	2098-2103	Check	
13-2	2104-2107	the	
13-3	2108-2114	number	
13-4	2115-2117	of	
13-5	2118-2125	indexes	
13-6	2126-2129	you	
13-7	2129-2130	’	
13-8	2130-2132	ve	
13-9	2133-2140	defined	
13-10	2141-2143	on	
13-11	2144-2148	your	
13-12	2149-2154	table	
13-13	2155-2156	(	
13-14	2156-2159	use	
13-15	2160-2163	the	
13-16	2164-2168	psql	
13-17	2169-2176	command	
13-18	2177-2178	\	
13-19	2178-2179	d	
13-20	2180-2190	table_name	
13-21	2190-2191	)	
13-22	2191-2192	,	
13-23	2193-2196	and	
13-24	2197-2206	determine	
13-25	2207-2214	whether	
13-26	2215-2220	their	
13-27	2221-2230	potential	
13-28	2231-2236	query	
13-29	2237-2245	benefits	
13-30	2246-2254	outweigh	
13-31	2255-2258	the	
13-32	2259-2266	storage	
13-33	2267-2270	and	
13-34	2271-2277	insert	
13-35	2278-2286	overhead	
13-36	2286-2287	.	

#Text=Since every system is different, there aren’t any hard and fast rules or “magic number” of indexes – just be reasonable.
#Text=2.
14-1	2288-2293	Since	
14-2	2294-2299	every	
14-3	2300-2306	system	
14-4	2307-2309	is	
14-5	2310-2319	different	
14-6	2319-2320	,	
14-7	2321-2326	there	
14-8	2327-2331	aren	
14-9	2331-2332	’	
14-10	2332-2333	t	
14-11	2334-2337	any	
14-12	2338-2342	hard	
14-13	2343-2346	and	
14-14	2347-2351	fast	
14-15	2352-2357	rules	
14-16	2358-2360	or	
14-17	2361-2362	“	
14-18	2362-2367	magic	
14-19	2368-2374	number	
14-20	2374-2375	”	
14-21	2376-2378	of	
14-22	2379-2386	indexes	
14-23	2387-2388	–	
14-24	2389-2393	just	
14-25	2394-2396	be	
14-26	2397-2407	reasonable	
14-27	2407-2408	.	
14-28	2409-2410	2	
14-29	2410-2411	.	

#Text=Reconsider Foreign Key Constraints
#Text=Sometimes it's necessary to build foreign keys (FK) from one table to other relational tables.
15-1	2412-2422	Reconsider	
15-2	2423-2430	Foreign	
15-3	2431-2434	Key	
15-4	2435-2446	Constraints	
15-5	2447-2456	Sometimes	
15-6	2457-2461	it's	
15-7	2462-2471	necessary	
15-8	2472-2474	to	
15-9	2475-2480	build	
15-10	2481-2488	foreign	
15-11	2489-2493	keys	
15-12	2494-2495	(	
15-13	2495-2497	FK	
15-14	2497-2498	)	
15-15	2499-2503	from	
15-16	2504-2507	one	
15-17	2508-2513	table	
15-18	2514-2516	to	
15-19	2517-2522	other	
15-20	2523-2533	relational	
15-21	2534-2540	tables	
15-22	2540-2541	.	

#Text=When you have an FK constraint, every INSERT will typically then need to read from your referenced table, which can degrade performance.
16-1	2542-2546	When	
16-2	2547-2550	you	
16-3	2551-2555	have	
16-4	2556-2558	an	
16-5	2559-2561	FK	
16-6	2562-2572	constraint	
16-7	2572-2573	,	
16-8	2574-2579	every	
16-9	2580-2586	INSERT	
16-10	2587-2591	will	
16-11	2592-2601	typically	
16-12	2602-2606	then	
16-13	2607-2611	need	
16-14	2612-2614	to	
16-15	2615-2619	read	
16-16	2620-2624	from	
16-17	2625-2629	your	
16-18	2630-2640	referenced	
16-19	2641-2646	table	
16-20	2646-2647	,	
16-21	2648-2653	which	
16-22	2654-2657	can	
16-23	2658-2665	degrade	
16-24	2666-2677	performance	
16-25	2677-2678	.	

#Text=Consider if you can denormalize your data – we sometimes see pretty extreme use of FK constraints, done from a sense of “elegance” rather than engineering tradeoffs.
#Text=3.
17-1	2679-2687	Consider	
17-2	2688-2690	if	
17-3	2691-2694	you	
17-4	2695-2698	can	
17-5	2699-2710	denormalize	
17-6	2711-2715	your	
17-7	2716-2720	data	
17-8	2721-2722	–	
17-9	2723-2725	we	
17-10	2726-2735	sometimes	
17-11	2736-2739	see	
17-12	2740-2746	pretty	
17-13	2747-2754	extreme	
17-14	2755-2758	use	
17-15	2759-2761	of	
17-16	2762-2764	FK	
17-17	2765-2776	constraints	
17-18	2776-2777	,	
17-19	2778-2782	done	
17-20	2783-2787	from	
17-21	2788-2789	a	
17-22	2790-2795	sense	
17-23	2796-2798	of	
17-24	2799-2800	“	
17-25	2800-2808	elegance	
17-26	2808-2809	”	
17-27	2810-2816	rather	
17-28	2817-2821	than	
17-29	2822-2833	engineering	
17-30	2834-2843	tradeoffs	
17-31	2843-2844	.	
17-32	2845-2846	3	
17-33	2846-2847	.	

#Text=Avoid Unnecessary UNIQUE Keys
#Text=Developers are often trained to specify primary keys in database tables, and many ORMs love them.
18-1	2848-2853	Avoid	
18-2	2854-2865	Unnecessary	
18-3	2866-2872	UNIQUE	
18-4	2873-2877	Keys	
18-5	2878-2888	Developers	
18-6	2889-2892	are	
18-7	2893-2898	often	
18-8	2899-2906	trained	
18-9	2907-2909	to	
18-10	2910-2917	specify	
18-11	2918-2925	primary	
18-12	2926-2930	keys	
18-13	2931-2933	in	
18-14	2934-2942	database	
18-15	2943-2949	tables	
18-16	2949-2950	,	
18-17	2951-2954	and	
18-18	2955-2959	many	
18-19	2960-2964	ORMs	
18-20	2965-2969	love	
18-21	2970-2974	them	
18-22	2974-2975	.	

#Text=Yet, many use cases – including common monitoring or time-series applications – don’t require them, as each event or sensor reading can simply be logged as a separate event by inserting it at the tail of a hypertable's current chunk during write time.
19-1	2976-2979	Yet	
19-2	2979-2980	,	
19-3	2981-2985	many	
19-4	2986-2989	use	
19-5	2990-2995	cases	
19-6	2996-2997	–	
19-7	2998-3007	including	
19-8	3008-3014	common	
19-9	3015-3025	monitoring	
19-10	3026-3028	or	
19-11	3029-3040	time-series	
19-12	3041-3053	applications	
19-13	3054-3055	–	
19-14	3056-3059	don	
19-15	3059-3060	’	
19-16	3060-3061	t	
19-17	3062-3069	require	
19-18	3070-3074	them	
19-19	3074-3075	,	
19-20	3076-3078	as	
19-21	3079-3083	each	
19-22	3084-3089	event	
19-23	3090-3092	or	
19-24	3093-3099	sensor	
19-25	3100-3107	reading	
19-26	3108-3111	can	
19-27	3112-3118	simply	
19-28	3119-3121	be	
19-29	3122-3128	logged	
19-30	3129-3131	as	
19-31	3132-3133	a	
19-32	3134-3142	separate	
19-33	3143-3148	event	
19-34	3149-3151	by	
19-35	3152-3161	inserting	
19-36	3162-3164	it	
19-37	3165-3167	at	
19-38	3168-3171	the	
19-39	3172-3176	tail	
19-40	3177-3179	of	
19-41	3180-3181	a	
19-42	3182-3194	hypertable's	
19-43	3195-3202	current	
19-44	3203-3208	chunk	
19-45	3209-3215	during	
19-46	3216-3221	write	
19-47	3222-3226	time	
19-48	3226-3227	.	

#Text=If a UNIQUE constraint is otherwise defined, that insert can necessitate an index lookup to determine if the row already exists, which will adversely impact the speed of your INSERT.
#Text=4.
20-1	3228-3230	If	
20-2	3231-3232	a	
20-3	3233-3239	UNIQUE	
20-4	3240-3250	constraint	
20-5	3251-3253	is	
20-6	3254-3263	otherwise	
20-7	3264-3271	defined	
20-8	3271-3272	,	
20-9	3273-3277	that	
20-10	3278-3284	insert	
20-11	3285-3288	can	
20-12	3289-3300	necessitate	
20-13	3301-3303	an	
20-14	3304-3309	index	
20-15	3310-3316	lookup	
20-16	3317-3319	to	
20-17	3320-3329	determine	
20-18	3330-3332	if	
20-19	3333-3336	the	
20-20	3337-3340	row	
20-21	3341-3348	already	
20-22	3349-3355	exists	
20-23	3355-3356	,	
20-24	3357-3362	which	
20-25	3363-3367	will	
20-26	3368-3377	adversely	
20-27	3378-3384	impact	
20-28	3385-3388	the	
20-29	3389-3394	speed	
20-30	3395-3397	of	
20-31	3398-3402	your	
20-32	3403-3409	INSERT	
20-33	3409-3410	.	
20-34	3411-3412	4	
20-35	3412-3413	.	

#Text=Use Separate Disks for WAL and Data
#Text=While this is a more advanced optimization that isn't always needed, if your disk becomes a bottleneck, you can further increase throughput by using a separate disk (tablespace) for the database's write-ahead log (WAL) and data.
#Text=5.
21-1	3414-3417	Use	
21-2	3418-3426	Separate	
21-3	3427-3432	Disks	
21-4	3433-3436	for	
21-5	3437-3440	WAL	
21-6	3441-3444	and	
21-7	3445-3449	Data	
21-8	3450-3455	While	
21-9	3456-3460	this	
21-10	3461-3463	is	
21-11	3464-3465	a	
21-12	3466-3470	more	
21-13	3471-3479	advanced	
21-14	3480-3492	optimization	
21-15	3493-3497	that	
21-16	3498-3503	isn't	
21-17	3504-3510	always	
21-18	3511-3517	needed	
21-19	3517-3518	,	
21-20	3519-3521	if	
21-21	3522-3526	your	
21-22	3527-3531	disk	
21-23	3532-3539	becomes	
21-24	3540-3541	a	
21-25	3542-3552	bottleneck	
21-26	3552-3553	,	
21-27	3554-3557	you	
21-28	3558-3561	can	
21-29	3562-3569	further	
21-30	3570-3578	increase	
21-31	3579-3589	throughput	
21-32	3590-3592	by	
21-33	3593-3598	using	
21-34	3599-3600	a	
21-35	3601-3609	separate	
21-36	3610-3614	disk	
21-37	3615-3616	(	
21-38	3616-3626	tablespace	
21-39	3626-3627	)	
21-40	3628-3631	for	
21-41	3632-3635	the	
21-42	3636-3646	database's	
21-43	3647-3658	write-ahead	
21-44	3659-3662	log	
21-45	3663-3664	(	
21-46	3664-3667	WAL	
21-47	3667-3668	)	
21-48	3669-3672	and	
21-49	3673-3677	data	
21-50	3677-3678	.	
21-51	3679-3680	5	
21-52	3680-3681	.	

#Text=Use Performant Disks
#Text=Sometimes developers deploy their database in environments with slower disks, whether due to poorly-performing HDD, remote SANs, or other types of configurations.
22-1	3682-3685	Use	
22-2	3686-3696	Performant	
22-3	3697-3702	Disks	
22-4	3703-3712	Sometimes	
22-5	3713-3723	developers	
22-6	3724-3730	deploy	
22-7	3731-3736	their	
22-8	3737-3745	database	
22-9	3746-3748	in	
22-10	3749-3761	environments	
22-11	3762-3766	with	
22-12	3767-3773	slower	
22-13	3774-3779	disks	
22-14	3779-3780	,	
22-15	3781-3788	whether	
22-16	3789-3792	due	
22-17	3793-3795	to	
22-18	3796-3813	poorly-performing	
22-19	3814-3817	HDD	
22-20	3817-3818	,	
22-21	3819-3825	remote	
22-22	3826-3830	SANs	
22-23	3830-3831	,	
22-24	3832-3834	or	
22-25	3835-3840	other	
22-26	3841-3846	types	
22-27	3847-3849	of	
22-28	3850-3864	configurations	
22-29	3864-3865	.	

#Text=And because when you are inserting rows, the data is durably stored to the write-ahead log (WAL) before the transaction completes, slow disks can impact insert performance.
23-1	3866-3869	And	
23-2	3870-3877	because	
23-3	3878-3882	when	
23-4	3883-3886	you	
23-5	3887-3890	are	
23-6	3891-3900	inserting	
23-7	3901-3905	rows	
23-8	3905-3906	,	
23-9	3907-3910	the	
23-10	3911-3915	data	
23-11	3916-3918	is	
23-12	3919-3926	durably	
23-13	3927-3933	stored	
23-14	3934-3936	to	
23-15	3937-3940	the	
23-16	3941-3952	write-ahead	
23-17	3953-3956	log	
23-18	3957-3958	(	
23-19	3958-3961	WAL	
23-20	3961-3962	)	
23-21	3963-3969	before	
23-22	3970-3973	the	
23-23	3974-3985	transaction	
23-24	3986-3995	completes	
23-25	3995-3996	,	
23-26	3997-4001	slow	
23-27	4002-4007	disks	
23-28	4008-4011	can	
23-29	4012-4018	impact	
23-30	4019-4025	insert	
23-31	4026-4037	performance	
23-32	4037-4038	.	

#Text=One thing to do is check your disk IOPS using the ioping command.Read test:
#Text=SQL
#Text=$ ioping -q -c 10 -s 8k .
#Text=--- .
24-1	4039-4042	One	
24-2	4043-4048	thing	
24-3	4049-4051	to	
24-4	4052-4054	do	
24-5	4055-4057	is	
24-6	4058-4063	check	
24-7	4064-4068	your	
24-8	4069-4073	disk	
24-9	4074-4078	IOPS	
24-10	4079-4084	using	
24-11	4085-4088	the	
24-12	4089-4095	ioping	
24-13	4096-4108	command.Read	
24-14	4109-4113	test	
24-15	4113-4114	:	
24-16	4115-4118	SQL	
24-17	4119-4120	$	
24-18	4121-4127	ioping	
24-19	4128-4129	-	
24-20	4129-4130	q	
24-21	4131-4132	-	
24-22	4132-4133	c	
24-23	4134-4136	10	
24-24	4137-4138	-	
24-25	4138-4139	s	
24-26	4140-4142	8k	
24-27	4143-4144	.	
24-28	4145-4146	-	
24-29	4146-4147	-	
24-30	4147-4148	-	
24-31	4149-4150	.	

#Text=(hfs /dev/disk1 930.7 GiB) ioping statistics ---
#Text=9 requests completed in 208 us, 72 KiB read, 43.3 k iops, 338.0 MiB/s
#Text=generated 10 requests in 9.00 s, 80 KiB, 1 iops, 8.88 KiB/s
#Text=min/avg/max/mdev = 18 us / 23.1 us / 35 us / 6.17 us
#Text=Write test:
#Text=Java
#Text=xxxxxxxxxx
#Text=$ ioping -q -c 10 -s 8k -W .
#Text=--- .
25-1	4151-4152	(	
25-2	4152-4155	hfs	
25-3	4156-4157	/	
25-4	4157-4160	dev	
25-5	4160-4161	/	
25-6	4161-4166	disk1	
25-7	4167-4172	930.7	
25-8	4173-4176	GiB	
25-9	4176-4177	)	
25-10	4178-4184	ioping	
25-11	4185-4195	statistics	
25-12	4196-4197	-	
25-13	4197-4198	-	
25-14	4198-4199	-	
25-15	4200-4201	9	
25-16	4202-4210	requests	
25-17	4211-4220	completed	
25-18	4221-4223	in	
25-19	4224-4227	208	
25-20	4228-4230	us	
25-21	4230-4231	,	
25-22	4232-4234	72	
25-23	4235-4238	KiB	
25-24	4239-4243	read	
25-25	4243-4244	,	
25-26	4245-4249	43.3	
25-27	4250-4251	k	
25-28	4252-4256	iops	
25-29	4256-4257	,	
25-30	4258-4263	338.0	
25-31	4264-4267	MiB	
25-32	4267-4268	/	
25-33	4268-4269	s	
25-34	4270-4279	generated	
25-35	4280-4282	10	
25-36	4283-4291	requests	
25-37	4292-4294	in	
25-38	4295-4299	9.00	
25-39	4300-4301	s	
25-40	4301-4302	,	
25-41	4303-4305	80	
25-42	4306-4309	KiB	
25-43	4309-4310	,	
25-44	4311-4312	1	
25-45	4313-4317	iops	
25-46	4317-4318	,	
25-47	4319-4323	8.88	
25-48	4324-4327	KiB	
25-49	4327-4328	/	
25-50	4328-4329	s	
25-51	4330-4333	min	
25-52	4333-4334	/	
25-53	4334-4337	avg	
25-54	4337-4338	/	
25-55	4338-4341	max	
25-56	4341-4342	/	
25-57	4342-4346	mdev	
25-58	4347-4348	=	
25-59	4349-4351	18	
25-60	4352-4354	us	
25-61	4355-4356	/	
25-62	4357-4361	23.1	
25-63	4362-4364	us	
25-64	4365-4366	/	
25-65	4367-4369	35	
25-66	4370-4372	us	
25-67	4373-4374	/	
25-68	4375-4379	6.17	
25-69	4380-4382	us	
25-70	4383-4388	Write	
25-71	4389-4393	test	
25-72	4393-4394	:	
25-73	4395-4399	Java	
25-74	4400-4410	xxxxxxxxxx	
25-75	4411-4412	$	
25-76	4413-4419	ioping	
25-77	4420-4421	-	
25-78	4421-4422	q	
25-79	4423-4424	-	
25-80	4424-4425	c	
25-81	4426-4428	10	
25-82	4429-4430	-	
25-83	4430-4431	s	
25-84	4432-4434	8k	
25-85	4435-4436	-	
25-86	4436-4437	W	
25-87	4438-4439	.	
25-88	4440-4441	-	
25-89	4441-4442	-	
25-90	4442-4443	-	
25-91	4444-4445	.	

#Text=(hfs /dev/disk1 930.7 GiB) ioping statistics ---
#Text=9 requests completed in 10.8 ms, 72 KiB written, 830 iops, 6.49 MiB/s
#Text=generated 10 requests in 9.00 s, 80 KiB, 1 iops, 8.89 KiB/s
#Text=min/avg/max/mdev = 99 us / 1.20 ms / 2.23 ms / 919.3 us
#Text=You should see at least 1000s of read IOPS and many 100s of write IOPS.  
26-1	4446-4447	(	
26-2	4447-4450	hfs	
26-3	4451-4452	/	
26-4	4452-4455	dev	
26-5	4455-4456	/	
26-6	4456-4461	disk1	
26-7	4462-4467	930.7	
26-8	4468-4471	GiB	
26-9	4471-4472	)	
26-10	4473-4479	ioping	
26-11	4480-4490	statistics	
26-12	4491-4492	-	
26-13	4492-4493	-	
26-14	4493-4494	-	
26-15	4495-4496	9	
26-16	4497-4505	requests	
26-17	4506-4515	completed	
26-18	4516-4518	in	
26-19	4519-4523	10.8	
26-20	4524-4526	ms	
26-21	4526-4527	,	
26-22	4528-4530	72	
26-23	4531-4534	KiB	
26-24	4535-4542	written	
26-25	4542-4543	,	
26-26	4544-4547	830	
26-27	4548-4552	iops	
26-28	4552-4553	,	
26-29	4554-4558	6.49	
26-30	4559-4562	MiB	
26-31	4562-4563	/	
26-32	4563-4564	s	
26-33	4565-4574	generated	
26-34	4575-4577	10	
26-35	4578-4586	requests	
26-36	4587-4589	in	
26-37	4590-4594	9.00	
26-38	4595-4596	s	
26-39	4596-4597	,	
26-40	4598-4600	80	
26-41	4601-4604	KiB	
26-42	4604-4605	,	
26-43	4606-4607	1	
26-44	4608-4612	iops	
26-45	4612-4613	,	
26-46	4614-4618	8.89	
26-47	4619-4622	KiB	
26-48	4622-4623	/	
26-49	4623-4624	s	
26-50	4625-4628	min	
26-51	4628-4629	/	
26-52	4629-4632	avg	
26-53	4632-4633	/	
26-54	4633-4636	max	
26-55	4636-4637	/	
26-56	4637-4641	mdev	
26-57	4642-4643	=	
26-58	4644-4646	99	
26-59	4647-4649	us	
26-60	4650-4651	/	
26-61	4652-4656	1.20	
26-62	4657-4659	ms	
26-63	4660-4661	/	
26-64	4662-4666	2.23	
26-65	4667-4669	ms	
26-66	4670-4671	/	
26-67	4672-4677	919.3	
26-68	4678-4680	us	
26-69	4681-4684	You	
26-70	4685-4691	should	
26-71	4692-4695	see	
26-72	4696-4698	at	
26-73	4699-4704	least	
26-74	4705-4710	1000s	
26-75	4711-4713	of	
26-76	4714-4718	read	
26-77	4719-4723	IOPS	
26-78	4724-4727	and	
26-79	4728-4732	many	
26-80	4733-4737	100s	
26-81	4738-4740	of	
26-82	4741-4746	write	
26-83	4747-4751	IOPS	
26-84	4751-4752	.	
26-85	4753-4754	 	

#Text=If you are seeing far fewer, your INSERT performance is likely to be impacted by your disk hardware.  
27-1	4754-4756	If	
27-2	4757-4760	you	
27-3	4761-4764	are	
27-4	4765-4771	seeing	
27-5	4772-4775	far	
27-6	4776-4781	fewer	
27-7	4781-4782	,	
27-8	4783-4787	your	
27-9	4788-4794	INSERT	
27-10	4795-4806	performance	
27-11	4807-4809	is	
27-12	4810-4816	likely	
27-13	4817-4819	to	
27-14	4820-4822	be	
27-15	4823-4831	impacted	
27-16	4832-4834	by	
27-17	4835-4839	your	
27-18	4840-4844	disk	
27-19	4845-4853	hardware	
27-20	4853-4854	.	
27-21	4855-4856	 	

#Text=See if alternative storage configurations are feasible.
28-1	4856-4859	See	
28-2	4860-4862	if	
28-3	4863-4874	alternative	
28-4	4875-4882	storage	
28-5	4883-4897	configurations	
28-6	4898-4901	are	
28-7	4902-4910	feasible	
28-8	4910-4911	.	

#Text=Choose and Configure TimescaleDB for Better Ingest Performance
#Text=TimescaleDB is tuned to improve ingest performance.
29-1	4912-4918	Choose	
29-2	4919-4922	and	
29-3	4923-4932	Configure	
29-4	4933-4944	TimescaleDB	
29-5	4945-4948	for	
29-6	4949-4955	Better	
29-7	4956-4962	Ingest	
29-8	4963-4974	Performance	
29-9	4975-4986	TimescaleDB	
29-10	4987-4989	is	
29-11	4990-4995	tuned	
29-12	4996-4998	to	
29-13	4999-5006	improve	
29-14	5007-5013	ingest	
29-15	5014-5025	performance	
29-16	5025-5026	.	

#Text=The most common uses for TimescaleDB involve storing massive amounts of data for cloud infrastructure metrics, product analytics, web analytics, IoT devices, and many other time-series use cases.
30-1	5027-5030	The	
30-2	5031-5035	most	
30-3	5036-5042	common	
30-4	5043-5047	uses	
30-5	5048-5051	for	
30-6	5052-5063	TimescaleDB	
30-7	5064-5071	involve	
30-8	5072-5079	storing	
30-9	5080-5087	massive	
30-10	5088-5095	amounts	
30-11	5096-5098	of	
30-12	5099-5103	data	
30-13	5104-5107	for	
30-14	5108-5113	cloud	
30-15	5114-5128	infrastructure	
30-16	5129-5136	metrics	
30-17	5136-5137	,	
30-18	5138-5145	product	
30-19	5146-5155	analytics	
30-20	5155-5156	,	
30-21	5157-5160	web	
30-22	5161-5170	analytics	
30-23	5170-5171	,	
30-24	5172-5175	IoT	
30-25	5176-5183	devices	
30-26	5183-5184	,	
30-27	5185-5188	and	
30-28	5189-5193	many	
30-29	5194-5199	other	
30-30	5200-5211	time-series	
30-31	5212-5215	use	
30-32	5216-5221	cases	
30-33	5221-5222	.	

#Text=As is typical with time-series data, these scenarios are time-centric, almost solely append-only (lots of INSERTs), and require fast ingestion of large amounts of data within small time windows.
31-1	5223-5225	As	
31-2	5226-5228	is	
31-3	5229-5236	typical	
31-4	5237-5241	with	
31-5	5242-5253	time-series	
31-6	5254-5258	data	
31-7	5258-5259	,	
31-8	5260-5265	these	
31-9	5266-5275	scenarios	
31-10	5276-5279	are	
31-11	5280-5292	time-centric	
31-12	5292-5293	,	
31-13	5294-5300	almost	
31-14	5301-5307	solely	
31-15	5308-5319	append-only	
31-16	5320-5321	(	
31-17	5321-5325	lots	
31-18	5326-5328	of	
31-19	5329-5336	INSERTs	
31-20	5336-5337	)	
31-21	5337-5338	,	
31-22	5339-5342	and	
31-23	5343-5350	require	
31-24	5351-5355	fast	
31-25	5356-5365	ingestion	
31-26	5366-5368	of	
31-27	5369-5374	large	
31-28	5375-5382	amounts	
31-29	5383-5385	of	
31-30	5386-5390	data	
31-31	5391-5397	within	
31-32	5398-5403	small	
31-33	5404-5408	time	
31-34	5409-5416	windows	
31-35	5416-5417	.	

#Text=TimescaleDB is packaged as an extension to PostgreSQL and is purpose-built for time-series use cases.
32-1	5418-5429	TimescaleDB	
32-2	5430-5432	is	
32-3	5433-5441	packaged	
32-4	5442-5444	as	
32-5	5445-5447	an	
32-6	5448-5457	extension	
32-7	5458-5460	to	
32-8	5461-5471	PostgreSQL	
32-9	5472-5475	and	
32-10	5476-5478	is	
32-11	5479-5492	purpose-built	
32-12	5493-5496	for	
32-13	5497-5508	time-series	
32-14	5509-5512	use	
32-15	5513-5518	cases	
32-16	5518-5519	.	

#Text=So, if getting faster ingest performance out of PostgreSQL is necessary for your applications or systems, consider using TimescaleDB (available fully-managed via Timescale Cloud – our database-as-a-service offering, or self-managed via our free Community Edition).
#Text=...and here are 8 more techniques for improving ingest performance with TimescaleDB:
#Text=6.
33-1	5520-5522	So	
33-2	5522-5523	,	
33-3	5524-5526	if	
33-4	5527-5534	getting	
33-5	5535-5541	faster	
33-6	5542-5548	ingest	
33-7	5549-5560	performance	
33-8	5561-5564	out	
33-9	5565-5567	of	
33-10	5568-5578	PostgreSQL	
33-11	5579-5581	is	
33-12	5582-5591	necessary	
33-13	5592-5595	for	
33-14	5596-5600	your	
33-15	5601-5613	applications	
33-16	5614-5616	or	
33-17	5617-5624	systems	
33-18	5624-5625	,	
33-19	5626-5634	consider	
33-20	5635-5640	using	
33-21	5641-5652	TimescaleDB	
33-22	5653-5654	(	
33-23	5654-5663	available	
33-24	5664-5677	fully-managed	
33-25	5678-5681	via	
33-26	5682-5691	Timescale	
33-27	5692-5697	Cloud	
33-28	5698-5699	–	
33-29	5700-5703	our	
33-30	5704-5725	database-as-a-service	
33-31	5726-5734	offering	
33-32	5734-5735	,	
33-33	5736-5738	or	
33-34	5739-5751	self-managed	
33-35	5752-5755	via	
33-36	5756-5759	our	
33-37	5760-5764	free	
33-38	5765-5774	Community	
33-39	5775-5782	Edition	
33-40	5782-5783	)	
33-41	5783-5784	.	
33-42	5785-5786	.	
33-43	5786-5787	.	
33-44	5787-5788	.	
33-45	5788-5791	and	
33-46	5792-5796	here	
33-47	5797-5800	are	
33-48	5801-5802	8	
33-49	5803-5807	more	
33-50	5808-5818	techniques	
33-51	5819-5822	for	
33-52	5823-5832	improving	
33-53	5833-5839	ingest	
33-54	5840-5851	performance	
33-55	5852-5856	with	
33-56	5857-5868	TimescaleDB	
33-57	5868-5869	:	
33-58	5870-5871	6	
33-59	5871-5872	.	

#Text=Use Parallel Writes
#Text=Each INSERT or COPY command to TimescaleDB (as in PostgreSQL) is executed as a single transaction and thus runs in a single-threaded fashion.
34-1	5873-5876	Use	
34-2	5877-5885	Parallel	
34-3	5886-5892	Writes	
34-4	5893-5897	Each	
34-5	5898-5904	INSERT	
34-6	5905-5907	or	
34-7	5908-5912	COPY	
34-8	5913-5920	command	
34-9	5921-5923	to	
34-10	5924-5935	TimescaleDB	
34-11	5936-5937	(	
34-12	5937-5939	as	
34-13	5940-5942	in	
34-14	5943-5953	PostgreSQL	
34-15	5953-5954	)	
34-16	5955-5957	is	
34-17	5958-5966	executed	
34-18	5967-5969	as	
34-19	5970-5971	a	
34-20	5972-5978	single	
34-21	5979-5990	transaction	
34-22	5991-5994	and	
34-23	5995-5999	thus	
34-24	6000-6004	runs	
34-25	6005-6007	in	
34-26	6008-6009	a	
34-27	6010-6025	single-threaded	
34-28	6026-6033	fashion	
34-29	6033-6034	.	

#Text=To achieve higher ingest, you should execute multiple INSERTS or COPY commands in parallel.
35-1	6035-6037	To	
35-2	6038-6045	achieve	
35-3	6046-6052	higher	
35-4	6053-6059	ingest	
35-5	6059-6060	,	
35-6	6061-6064	you	
35-7	6065-6071	should	
35-8	6072-6079	execute	
35-9	6080-6088	multiple	
35-10	6089-6096	INSERTS	
35-11	6097-6099	or	
35-12	6100-6104	COPY	
35-13	6105-6113	commands	
35-14	6114-6116	in	
35-15	6117-6125	parallel	
35-16	6125-6126	.	

#Text=For help with bulk loading large CSV files in parallel, check out  TimescaleDB's parallel copy command.
36-1	6127-6130	For	
36-2	6131-6135	help	
36-3	6136-6140	with	
36-4	6141-6145	bulk	
36-5	6146-6153	loading	
36-6	6154-6159	large	
36-7	6160-6163	CSV	
36-8	6164-6169	files	
36-9	6170-6172	in	
36-10	6173-6181	parallel	
36-11	6181-6182	,	
36-12	6183-6188	check	
36-13	6189-6192	out	
36-14	6193-6194	 	
36-15	6194-6207	TimescaleDB's	
36-16	6208-6216	parallel	
36-17	6217-6221	copy	
36-18	6222-6229	command	
36-19	6229-6230	.	

#Text=Pro tip: make sure your client machine has enough cores to execute this parallelism (running 32 client workers on a 2 vCPU machine doesn’t help much – the workers won’t actually be executed in parallel).
#Text=7.
37-1	6231-6234	Pro	
37-2	6235-6238	tip	
37-3	6238-6239	:	
37-4	6240-6244	make	
37-5	6245-6249	sure	
37-6	6250-6254	your	
37-7	6255-6261	client	
37-8	6262-6269	machine	
37-9	6270-6273	has	
37-10	6274-6280	enough	
37-11	6281-6286	cores	
37-12	6287-6289	to	
37-13	6290-6297	execute	
37-14	6298-6302	this	
37-15	6303-6314	parallelism	
37-16	6315-6316	(	
37-17	6316-6323	running	
37-18	6324-6326	32	
37-19	6327-6333	client	
37-20	6334-6341	workers	
37-21	6342-6344	on	
37-22	6345-6346	a	
37-23	6347-6348	2	
37-24	6349-6353	vCPU	
37-25	6354-6361	machine	
37-26	6362-6367	doesn	
37-27	6367-6368	’	
37-28	6368-6369	t	
37-29	6370-6374	help	
37-30	6375-6379	much	
37-31	6380-6381	–	
37-32	6382-6385	the	
37-33	6386-6393	workers	
37-34	6394-6397	won	
37-35	6397-6398	’	
37-36	6398-6399	t	
37-37	6400-6408	actually	
37-38	6409-6411	be	
37-39	6412-6420	executed	
37-40	6421-6423	in	
37-41	6424-6432	parallel	
37-42	6432-6433	)	
37-43	6433-6434	.	
37-44	6435-6436	7	
37-45	6436-6437	.	

#Text=Insert Rows in Batches
#Text=In order to achieve higher ingest rates, you should insert your data with many rows in each INSERT call (or else use some bulk insert command, like COPY or our parallel copy tool).
38-1	6438-6444	Insert	
38-2	6445-6449	Rows	
38-3	6450-6452	in	
38-4	6453-6460	Batches	
38-5	6461-6463	In	
38-6	6464-6469	order	
38-7	6470-6472	to	
38-8	6473-6480	achieve	
38-9	6481-6487	higher	
38-10	6488-6494	ingest	
38-11	6495-6500	rates	
38-12	6500-6501	,	
38-13	6502-6505	you	
38-14	6506-6512	should	
38-15	6513-6519	insert	
38-16	6520-6524	your	
38-17	6525-6529	data	
38-18	6530-6534	with	
38-19	6535-6539	many	
38-20	6540-6544	rows	
38-21	6545-6547	in	
38-22	6548-6552	each	
38-23	6553-6559	INSERT	
38-24	6560-6564	call	
38-25	6565-6566	(	
38-26	6566-6568	or	
38-27	6569-6573	else	
38-28	6574-6577	use	
38-29	6578-6582	some	
38-30	6583-6587	bulk	
38-31	6588-6594	insert	
38-32	6595-6602	command	
38-33	6602-6603	,	
38-34	6604-6608	like	
38-35	6609-6613	COPY	
38-36	6614-6616	or	
38-37	6617-6620	our	
38-38	6621-6629	parallel	
38-39	6630-6634	copy	
38-40	6635-6639	tool	
38-41	6639-6640	)	
38-42	6640-6641	.	

#Text=Don't insert your data row-by-row – instead, try at least hundreds (or thousands) of rows per INSERT.
39-1	6642-6647	Don't	
39-2	6648-6654	insert	
39-3	6655-6659	your	
39-4	6660-6664	data	
39-5	6665-6675	row-by-row	
39-6	6676-6677	–	
39-7	6678-6685	instead	
39-8	6685-6686	,	
39-9	6687-6690	try	
39-10	6691-6693	at	
39-11	6694-6699	least	
39-12	6700-6708	hundreds	
39-13	6709-6710	(	
39-14	6710-6712	or	
39-15	6713-6722	thousands	
39-16	6722-6723	)	
39-17	6724-6726	of	
39-18	6727-6731	rows	
39-19	6732-6735	per	
39-20	6736-6742	INSERT	
39-21	6742-6743	.	

#Text=This allows the database to spend less time on connection management, transaction overhead, SQL parsing, etc., and more time on data processing.
#Text=8.
40-1	6744-6748	This	
40-2	6749-6755	allows	
40-3	6756-6759	the	
40-4	6760-6768	database	
40-5	6769-6771	to	
40-6	6772-6777	spend	
40-7	6778-6782	less	
40-8	6783-6787	time	
40-9	6788-6790	on	
40-10	6791-6801	connection	
40-11	6802-6812	management	
40-12	6812-6813	,	
40-13	6814-6825	transaction	
40-14	6826-6834	overhead	
40-15	6834-6835	,	
40-16	6836-6839	SQL	
40-17	6840-6847	parsing	
40-18	6847-6848	,	
40-19	6849-6852	etc	
40-20	6852-6853	.	
40-21	6853-6854	,	
40-22	6855-6858	and	
40-23	6859-6863	more	
40-24	6864-6868	time	
40-25	6869-6871	on	
40-26	6872-6876	data	
40-27	6877-6887	processing	
40-28	6887-6888	.	
40-29	6889-6890	8	
40-30	6890-6891	.	

#Text=Properly Configure shared_buffers
#Text=We typically recommend 25% of available RAM.
41-1	6892-6900	Properly	
41-2	6901-6910	Configure	
41-3	6911-6925	shared_buffers	
41-4	6926-6928	We	
41-5	6929-6938	typically	
41-6	6939-6948	recommend	
41-7	6949-6952	25%	
41-8	6953-6955	of	
41-9	6956-6965	available	
41-10	6966-6969	RAM	
41-11	6969-6970	.	

#Text=If you install TimescaleDB via a method that runs timescaledb-tune, it should automatically configure shared_buffers to something well-suited to your hardware specs.
42-1	6971-6973	If	
42-2	6974-6977	you	
42-3	6978-6985	install	
42-4	6986-6997	TimescaleDB	
42-5	6998-7001	via	
42-6	7002-7003	a	
42-7	7004-7010	method	
42-8	7011-7015	that	
42-9	7016-7020	runs	
42-10	7021-7037	timescaledb-tune	
42-11	7037-7038	,	
42-12	7039-7041	it	
42-13	7042-7048	should	
42-14	7049-7062	automatically	
42-15	7063-7072	configure	
42-16	7073-7087	shared_buffers	
42-17	7088-7090	to	
42-18	7091-7100	something	
42-19	7101-7112	well-suited	
42-20	7113-7115	to	
42-21	7116-7120	your	
42-22	7121-7129	hardware	
42-23	7130-7135	specs	
42-24	7135-7136	.	

#Text=Note: in some cases, typically with virtualization and constrained cgroups memory allocation, these automatically-configured settings may not be ideal.
43-1	7137-7141	Note	
43-2	7141-7142	:	
43-3	7143-7145	in	
43-4	7146-7150	some	
43-5	7151-7156	cases	
43-6	7156-7157	,	
43-7	7158-7167	typically	
43-8	7168-7172	with	
43-9	7173-7187	virtualization	
43-10	7188-7191	and	
43-11	7192-7203	constrained	
43-12	7204-7211	cgroups	
43-13	7212-7218	memory	
43-14	7219-7229	allocation	
43-15	7229-7230	,	
43-16	7231-7236	these	
43-17	7237-7261	automatically-configured	
43-18	7262-7270	settings	
43-19	7271-7274	may	
43-20	7275-7278	not	
43-21	7279-7281	be	
43-22	7282-7287	ideal	
43-23	7287-7288	.	

#Text=To check that your shared_buffers are set to within the 25% range,  run SHOW shared_buffers from your psql connection.
#Text=9.
44-1	7289-7291	To	
44-2	7292-7297	check	
44-3	7298-7302	that	
44-4	7303-7307	your	
44-5	7308-7322	shared_buffers	
44-6	7323-7326	are	
44-7	7327-7330	set	
44-8	7331-7333	to	
44-9	7334-7340	within	
44-10	7341-7344	the	
44-11	7345-7348	25%	
44-12	7349-7354	range	
44-13	7354-7355	,	
44-14	7356-7357	 	
44-15	7357-7360	run	
44-16	7361-7365	SHOW	
44-17	7366-7380	shared_buffers	
44-18	7381-7385	from	
44-19	7386-7390	your	
44-20	7391-7395	psql	
44-21	7396-7406	connection	
44-22	7406-7407	.	
44-23	7408-7409	9	
44-24	7409-7410	.	

#Text=Run our Docker Images on Linux Hosts
#Text=If you are running a TimescaleDB Docker container (which runs Linux) on top of another Linux operating system, you're in great shape.
45-1	7411-7414	Run	
45-2	7415-7418	our	
45-3	7419-7425	Docker	
45-4	7426-7432	Images	
45-5	7433-7435	on	
45-6	7436-7441	Linux	
45-7	7442-7447	Hosts	
45-8	7448-7450	If	
45-9	7451-7454	you	
45-10	7455-7458	are	
45-11	7458-7459	 	
45-12	7459-7466	running	
45-13	7467-7468	a	
45-14	7469-7480	TimescaleDB	
45-15	7481-7487	Docker	
45-16	7488-7497	container	
45-17	7498-7499	(	
45-18	7499-7504	which	
45-19	7505-7509	runs	
45-20	7510-7515	Linux	
45-21	7515-7516	)	
45-22	7516-7517	 	
45-23	7517-7519	on	
45-24	7520-7523	top	
45-25	7524-7526	of	
45-26	7527-7534	another	
45-27	7535-7540	Linux	
45-28	7541-7550	operating	
45-29	7551-7557	system	
45-30	7557-7558	,	
45-31	7559-7565	you're	
45-32	7566-7568	in	
45-33	7569-7574	great	
45-34	7575-7580	shape	
45-35	7580-7581	.	

#Text=The container is basically providing process isolation, and the overhead is extremely minimal.
46-1	7582-7585	The	
46-2	7586-7595	container	
46-3	7596-7598	is	
46-4	7599-7608	basically	
46-5	7609-7618	providing	
46-6	7619-7626	process	
46-7	7627-7636	isolation	
46-8	7636-7637	,	
46-9	7638-7641	and	
46-10	7642-7645	the	
46-11	7646-7654	overhead	
46-12	7655-7657	is	
46-13	7658-7667	extremely	
46-14	7668-7675	minimal	
46-15	7675-7676	.	

#Text=If you're running the container on a Mac or Windows machine, you'll see some performance hits for the OS virtualization, including for I/O.
47-1	7677-7679	If	
47-2	7680-7686	you're	
47-3	7687-7694	running	
47-4	7695-7698	the	
47-5	7699-7708	container	
47-6	7709-7711	on	
47-7	7712-7713	a	
47-8	7714-7717	Mac	
47-9	7718-7720	or	
47-10	7721-7728	Windows	
47-11	7729-7736	machine	
47-12	7736-7737	,	
47-13	7738-7744	you'll	
47-14	7745-7748	see	
47-15	7749-7753	some	
47-16	7754-7765	performance	
47-17	7766-7770	hits	
47-18	7771-7774	for	
47-19	7775-7778	the	
47-20	7779-7781	OS	
47-21	7782-7796	virtualization	
47-22	7796-7797	,	
47-23	7798-7807	including	
47-24	7808-7811	for	
47-25	7812-7813	I	
47-26	7813-7814	/	
47-27	7814-7815	O	
47-28	7815-7816	.	

#Text=Instead, if you need to run on Mac or Windows, we recommend installing directly instead of using a Docker image.
#Text=10.
48-1	7817-7824	Instead	
48-2	7824-7825	,	
48-3	7826-7828	if	
48-4	7829-7832	you	
48-5	7833-7837	need	
48-6	7838-7840	to	
48-7	7841-7844	run	
48-8	7845-7847	on	
48-9	7848-7851	Mac	
48-10	7852-7854	or	
48-11	7855-7862	Windows	
48-12	7862-7863	,	
48-13	7864-7866	we	
48-14	7867-7876	recommend	
48-15	7877-7887	installing	
48-16	7888-7896	directly	
48-17	7897-7904	instead	
48-18	7905-7907	of	
48-19	7908-7913	using	
48-20	7914-7915	a	
48-21	7916-7922	Docker	
48-22	7923-7928	image	
48-23	7928-7929	.	
48-24	7930-7932	10	
48-25	7932-7933	.	

#Text=Write Data in Loose Time Order
#Text=When chunks are sized appropriately (see #11 and #12), the latest chunk(s) and their associated indexes are naturally maintained in memory.
49-1	7934-7939	Write	
49-2	7940-7944	Data	
49-3	7945-7947	in	
49-4	7948-7953	Loose	
49-5	7954-7958	Time	
49-6	7959-7964	Order	
49-7	7965-7969	When	
49-8	7970-7976	chunks	
49-9	7977-7980	are	
49-10	7981-7986	sized	
49-11	7987-8000	appropriately	
49-12	8001-8002	(	
49-13	8002-8005	see	
49-14	8006-8009	#11	
49-15	8010-8013	and	
49-16	8014-8017	#12	
49-17	8017-8018	)	
49-18	8018-8019	,	
49-19	8020-8023	the	
49-20	8024-8030	latest	
49-21	8031-8036	chunk	
49-22	8036-8037	(	
49-23	8037-8038	s	
49-24	8038-8039	)	
49-25	8040-8043	and	
49-26	8044-8049	their	
49-27	8050-8060	associated	
49-28	8061-8068	indexes	
49-29	8069-8072	are	
49-30	8073-8082	naturally	
49-31	8083-8093	maintained	
49-32	8094-8096	in	
49-33	8097-8103	memory	
49-34	8103-8104	.	

#Text=New rows inserted with recent timestamps will be written to these chunks and indexes already in memory.
50-1	8105-8108	New	
50-2	8109-8113	rows	
50-3	8114-8122	inserted	
50-4	8123-8127	with	
50-5	8128-8134	recent	
50-6	8135-8145	timestamps	
50-7	8146-8150	will	
50-8	8151-8153	be	
50-9	8154-8161	written	
50-10	8162-8164	to	
50-11	8165-8170	these	
50-12	8171-8177	chunks	
50-13	8178-8181	and	
50-14	8182-8189	indexes	
50-15	8190-8197	already	
50-16	8198-8200	in	
50-17	8201-8207	memory	
50-18	8207-8208	.	

#Text=If a row with a sufficiently older timestamp is inserted – i.e., it's an out-of-order or backfilled write – the disk pages corresponding to the older chunk (and its indexes) will need to be read in from disk.
51-1	8209-8211	If	
51-2	8212-8213	a	
51-3	8214-8217	row	
51-4	8218-8222	with	
51-5	8223-8224	a	
51-6	8225-8237	sufficiently	
51-7	8238-8243	older	
51-8	8244-8253	timestamp	
51-9	8254-8256	is	
51-10	8257-8265	inserted	
51-11	8266-8267	–	
51-12	8268-8271	i.e	
51-13	8271-8272	.	
51-14	8272-8273	,	
51-15	8274-8278	it's	
51-16	8279-8281	an	
51-17	8282-8294	out-of-order	
51-18	8295-8297	or	
51-19	8298-8308	backfilled	
51-20	8309-8314	write	
51-21	8315-8316	–	
51-22	8317-8320	the	
51-23	8321-8325	disk	
51-24	8326-8331	pages	
51-25	8332-8345	corresponding	
51-26	8346-8348	to	
51-27	8349-8352	the	
51-28	8353-8358	older	
51-29	8359-8364	chunk	
51-30	8365-8366	(	
51-31	8366-8369	and	
51-32	8370-8373	its	
51-33	8374-8381	indexes	
51-34	8381-8382	)	
51-35	8383-8387	will	
51-36	8388-8392	need	
51-37	8393-8395	to	
51-38	8396-8398	be	
51-39	8399-8403	read	
51-40	8404-8406	in	
51-41	8407-8411	from	
51-42	8412-8416	disk	
51-43	8416-8417	.	

#Text=This will significantly increase write latency and lower insert throughput.
52-1	8418-8422	This	
52-2	8423-8427	will	
52-3	8428-8441	significantly	
52-4	8442-8450	increase	
52-5	8451-8456	write	
52-6	8457-8464	latency	
52-7	8465-8468	and	
52-8	8469-8474	lower	
52-9	8475-8481	insert	
52-10	8482-8492	throughput	
52-11	8492-8493	.	

#Text=Particularly, when you are loading data for the first time, try to load data in sorted, increasing timestamp order.
53-1	8494-8506	Particularly	
53-2	8506-8507	,	
53-3	8508-8512	when	
53-4	8513-8516	you	
53-5	8517-8520	are	
53-6	8521-8528	loading	
53-7	8529-8533	data	
53-8	8534-8537	for	
53-9	8538-8541	the	
53-10	8542-8547	first	
53-11	8548-8552	time	
53-12	8552-8553	,	
53-13	8554-8557	try	
53-14	8558-8560	to	
53-15	8561-8565	load	
53-16	8566-8570	data	
53-17	8571-8573	in	
53-18	8574-8580	sorted	
53-19	8580-8581	,	
53-20	8582-8592	increasing	
53-21	8593-8602	timestamp	
53-22	8603-8608	order	
53-23	8608-8609	.	

#Text=Be careful if you're bulk loading data about many different servers, devices, and so forth:
#Text=Do not bulk insert data sequentially by server  (i.e., all data for server A, then server B, then C, and so forth).
54-1	8610-8612	Be	
54-2	8613-8620	careful	
54-3	8621-8623	if	
54-4	8624-8630	you're	
54-5	8631-8635	bulk	
54-6	8636-8643	loading	
54-7	8644-8648	data	
54-8	8649-8654	about	
54-9	8655-8659	many	
54-10	8660-8669	different	
54-11	8670-8677	servers	
54-12	8677-8678	,	
54-13	8679-8686	devices	
54-14	8686-8687	,	
54-15	8688-8691	and	
54-16	8692-8694	so	
54-17	8695-8700	forth	
54-18	8700-8701	:	
54-19	8702-8704	Do	
54-20	8705-8708	not	
54-21	8709-8713	bulk	
54-22	8714-8720	insert	
54-23	8721-8725	data	
54-24	8726-8738	sequentially	
54-25	8739-8741	by	
54-26	8742-8748	server	
54-27	8749-8750	 	
54-28	8750-8751	(	
54-29	8751-8754	i.e	
54-30	8754-8755	.	
54-31	8755-8756	,	
54-32	8757-8760	all	
54-33	8761-8765	data	
54-34	8766-8769	for	
54-35	8770-8776	server	
54-36	8777-8778	A	
54-37	8778-8779	,	
54-38	8780-8784	then	
54-39	8785-8791	server	
54-40	8792-8793	B	
54-41	8793-8794	,	
54-42	8795-8799	then	
54-43	8800-8801	C	
54-44	8801-8802	,	
54-45	8803-8806	and	
54-46	8807-8809	so	
54-47	8810-8815	forth	
54-48	8815-8816	)	
54-49	8816-8817	.	

#Text=This will cause disk thrashing as loading each server will walk through all chunks before starting anew.
55-1	8818-8822	This	
55-2	8823-8827	will	
55-3	8828-8833	cause	
55-4	8834-8838	disk	
55-5	8839-8848	thrashing	
55-6	8849-8851	as	
55-7	8852-8859	loading	
55-8	8860-8864	each	
55-9	8865-8871	server	
55-10	8872-8876	will	
55-11	8877-8881	walk	
55-12	8882-8889	through	
55-13	8890-8893	all	
55-14	8894-8900	chunks	
55-15	8901-8907	before	
55-16	8908-8916	starting	
55-17	8917-8921	anew	
55-18	8921-8922	.	

#Text=Instead, arrange your bulk load so that data from all servers are inserted in loose timestamp order (e.g., day 1 across all servers in parallel, then day 2 across all servers in parallel, etc.)
#Text=11.
56-1	8923-8930	Instead	
56-2	8930-8931	,	
56-3	8932-8939	arrange	
56-4	8940-8944	your	
56-5	8945-8949	bulk	
56-6	8950-8954	load	
56-7	8955-8957	so	
56-8	8958-8962	that	
56-9	8963-8967	data	
56-10	8968-8972	from	
56-11	8973-8976	all	
56-12	8977-8984	servers	
56-13	8985-8988	are	
56-14	8989-8997	inserted	
56-15	8998-9000	in	
56-16	9001-9006	loose	
56-17	9007-9016	timestamp	
56-18	9017-9022	order	
56-19	9023-9024	(	
56-20	9024-9027	e.g	
56-21	9027-9028	.	
56-22	9028-9029	,	
56-23	9030-9033	day	
56-24	9034-9035	1	
56-25	9036-9042	across	
56-26	9043-9046	all	
56-27	9047-9054	servers	
56-28	9055-9057	in	
56-29	9058-9066	parallel	
56-30	9066-9067	,	
56-31	9068-9072	then	
56-32	9073-9076	day	
56-33	9077-9078	2	
56-34	9079-9085	across	
56-35	9086-9089	all	
56-36	9090-9097	servers	
56-37	9098-9100	in	
56-38	9101-9109	parallel	
56-39	9109-9110	,	
56-40	9111-9114	etc	
56-41	9114-9115	.	
56-42	9115-9116	)	
56-43	9117-9119	11	
56-44	9119-9120	.	

#Text=Avoid “Too Large” Chunks
#Text=To maintain higher ingest rates, you want your latest chunk, as well as all its associated indexes, to stay in memory, so that writes to the chunk and index updates merely update memory.
57-1	9121-9126	Avoid	
57-2	9127-9128	“	
57-3	9128-9131	Too	
57-4	9132-9137	Large	
57-5	9137-9138	”	
57-6	9139-9145	Chunks	
57-7	9146-9148	To	
57-8	9149-9157	maintain	
57-9	9158-9164	higher	
57-10	9165-9171	ingest	
57-11	9172-9177	rates	
57-12	9177-9178	,	
57-13	9179-9182	you	
57-14	9183-9187	want	
57-15	9188-9192	your	
57-16	9193-9199	latest	
57-17	9200-9205	chunk	
57-18	9205-9206	,	
57-19	9207-9209	as	
57-20	9210-9214	well	
57-21	9215-9217	as	
57-22	9218-9221	all	
57-23	9222-9225	its	
57-24	9226-9236	associated	
57-25	9237-9244	indexes	
57-26	9244-9245	,	
57-27	9246-9248	to	
57-28	9249-9253	stay	
57-29	9254-9256	in	
57-30	9257-9263	memory	
57-31	9263-9264	,	
57-32	9265-9267	so	
57-33	9268-9272	that	
57-34	9273-9279	writes	
57-35	9280-9282	to	
57-36	9283-9286	the	
57-37	9287-9292	chunk	
57-38	9293-9296	and	
57-39	9297-9302	index	
57-40	9303-9310	updates	
57-41	9311-9317	merely	
57-42	9318-9324	update	
57-43	9325-9331	memory	
57-44	9331-9332	.	

#Text=(The write is still durable, as inserts are written to the WAL on disk before the database pages are updated.)
58-1	9333-9334	(	
58-2	9334-9337	The	
58-3	9338-9343	write	
58-4	9344-9346	is	
58-5	9347-9352	still	
58-6	9353-9360	durable	
58-7	9360-9361	,	
58-8	9362-9364	as	
58-9	9365-9372	inserts	
58-10	9373-9376	are	
58-11	9377-9384	written	
58-12	9385-9387	to	
58-13	9388-9391	the	
58-14	9392-9395	WAL	
58-15	9396-9398	on	
58-16	9399-9403	disk	
58-17	9404-9410	before	
58-18	9411-9414	the	
58-19	9415-9423	database	
58-20	9424-9429	pages	
58-21	9430-9433	are	
58-22	9434-9441	updated	
58-23	9441-9442	.	
58-24	9442-9443	)	

#Text=If your chunks are too large, then writes to even the latest chunk will start swapping to disk.
59-1	9444-9446	If	
59-2	9447-9451	your	
59-3	9452-9458	chunks	
59-4	9459-9462	are	
59-5	9463-9466	too	
59-6	9467-9472	large	
59-7	9472-9473	,	
59-8	9474-9478	then	
59-9	9479-9485	writes	
59-10	9486-9488	to	
59-11	9489-9493	even	
59-12	9494-9497	the	
59-13	9498-9504	latest	
59-14	9505-9510	chunk	
59-15	9511-9515	will	
59-16	9516-9521	start	
59-17	9522-9530	swapping	
59-18	9531-9533	to	
59-19	9534-9538	disk	
59-20	9538-9539	.	

#Text=As a rule-of-thumb, we recommend that the latest chunks and all their indexes fit comfortably within the database's shared_buffers.
60-1	9540-9542	As	
60-2	9543-9544	a	
60-3	9545-9558	rule-of-thumb	
60-4	9558-9559	,	
60-5	9560-9562	we	
60-6	9563-9572	recommend	
60-7	9573-9577	that	
60-8	9578-9581	the	
60-9	9582-9588	latest	
60-10	9589-9595	chunks	
60-11	9596-9599	and	
60-12	9600-9603	all	
60-13	9604-9609	their	
60-14	9610-9617	indexes	
60-15	9618-9621	fit	
60-16	9622-9633	comfortably	
60-17	9634-9640	within	
60-18	9641-9644	the	
60-19	9645-9655	database's	
60-20	9656-9670	shared_buffers	
60-21	9670-9671	.	

#Text=You can check your chunk sizes via the chunk_relation_size_pretty SQL command.
61-1	9672-9675	You	
61-2	9676-9679	can	
61-3	9680-9685	check	
61-4	9686-9690	your	
61-5	9691-9696	chunk	
61-6	9697-9702	sizes	
61-7	9703-9706	via	
61-8	9707-9710	the	
61-9	9711-9737	chunk_relation_size_pretty	
61-10	9738-9741	SQL	
61-11	9742-9749	command	
61-12	9749-9750	.	

#Text=SQL
#Text=xxxxxxxxxx
#Text==> SELECT chunk_table, table_size, index_size, toast_size, total_sizeFROM chunk_relation_size_pretty('hypertable_name')ORDER BY ranges DESC LIMIT 4;
#Text=chunk_table                             | table_size | index_size | toast_size | total_size
#Text=-----------------------------------------+------------+------------+------------+------------
#Text=_timescaledb_internal.
62-1	9751-9754	SQL	
62-2	9755-9765	xxxxxxxxxx	
62-3	9766-9767	=	
62-4	9767-9768	>	
62-5	9769-9775	SELECT	
62-6	9776-9787	chunk_table	
62-7	9787-9788	,	
62-8	9789-9799	table_size	
62-9	9799-9800	,	
62-10	9801-9811	index_size	
62-11	9811-9812	,	
62-12	9813-9823	toast_size	
62-13	9823-9824	,	
62-14	9825-9839	total_sizeFROM	
62-15	9840-9866	chunk_relation_size_pretty	
62-16	9866-9867	(	
62-17	9867-9868	'	
62-18	9868-9883	hypertable_name	
62-19	9883-9884	'	
62-20	9884-9885	)	
62-21	9885-9890	ORDER	
62-22	9891-9893	BY	
62-23	9894-9900	ranges	
62-24	9901-9905	DESC	
62-25	9906-9911	LIMIT	
62-26	9912-9913	4	
62-27	9913-9914	;	
62-28	9915-9926	chunk_table	
62-29	9927-9954	                           	
62-30	9955-9956	|	
62-31	9957-9967	table_size	
62-32	9968-9969	|	
62-33	9970-9980	index_size	
62-34	9981-9982	|	
62-35	9983-9993	toast_size	
62-36	9994-9995	|	
62-37	9996-10006	total_size	
62-38	10007-10008	-	
62-39	10008-10009	-	
62-40	10009-10010	-	
62-41	10010-10011	-	
62-42	10011-10012	-	
62-43	10012-10013	-	
62-44	10013-10014	-	
62-45	10014-10015	-	
62-46	10015-10016	-	
62-47	10016-10017	-	
62-48	10017-10018	-	
62-49	10018-10019	-	
62-50	10019-10020	-	
62-51	10020-10021	-	
62-52	10021-10022	-	
62-53	10022-10023	-	
62-54	10023-10024	-	
62-55	10024-10025	-	
62-56	10025-10026	-	
62-57	10026-10027	-	
62-58	10027-10028	-	
62-59	10028-10029	-	
62-60	10029-10030	-	
62-61	10030-10031	-	
62-62	10031-10032	-	
62-63	10032-10033	-	
62-64	10033-10034	-	
62-65	10034-10035	-	
62-66	10035-10036	-	
62-67	10036-10037	-	
62-68	10037-10038	-	
62-69	10038-10039	-	
62-70	10039-10040	-	
62-71	10040-10041	-	
62-72	10041-10042	-	
62-73	10042-10043	-	
62-74	10043-10044	-	
62-75	10044-10045	-	
62-76	10045-10046	-	
62-77	10046-10047	-	
62-78	10047-10048	-	
62-79	10048-10049	+	
62-80	10049-10050	-	
62-81	10050-10051	-	
62-82	10051-10052	-	
62-83	10052-10053	-	
62-84	10053-10054	-	
62-85	10054-10055	-	
62-86	10055-10056	-	
62-87	10056-10057	-	
62-88	10057-10058	-	
62-89	10058-10059	-	
62-90	10059-10060	-	
62-91	10060-10061	-	
62-92	10061-10062	+	
62-93	10062-10063	-	
62-94	10063-10064	-	
62-95	10064-10065	-	
62-96	10065-10066	-	
62-97	10066-10067	-	
62-98	10067-10068	-	
62-99	10068-10069	-	
62-100	10069-10070	-	
62-101	10070-10071	-	
62-102	10071-10072	-	
62-103	10072-10073	-	
62-104	10073-10074	-	
62-105	10074-10075	+	
62-106	10075-10076	-	
62-107	10076-10077	-	
62-108	10077-10078	-	
62-109	10078-10079	-	
62-110	10079-10080	-	
62-111	10080-10081	-	
62-112	10081-10082	-	
62-113	10082-10083	-	
62-114	10083-10084	-	
62-115	10084-10085	-	
62-116	10085-10086	-	
62-117	10086-10087	-	
62-118	10087-10088	+	
62-119	10088-10089	-	
62-120	10089-10090	-	
62-121	10090-10091	-	
62-122	10091-10092	-	
62-123	10092-10093	-	
62-124	10093-10094	-	
62-125	10094-10095	-	
62-126	10095-10096	-	
62-127	10096-10097	-	
62-128	10097-10098	-	
62-129	10098-10099	-	
62-130	10099-10100	-	
62-131	10101-10102	_	
62-132	10102-10122	timescaledb_internal	
62-133	10122-10123	.	

#Text=_hyper_1_96_chunk | 200 MB     | 64 MB
#Text=| 8192 bytes | 272 MB
#Text=_timescaledb_internal.
63-1	10123-10124	_	
63-2	10124-10129	hyper	
63-3	10129-10130	_	
63-4	10130-10131	1	
63-5	10131-10132	_	
63-6	10132-10134	96	
63-7	10134-10135	_	
63-8	10135-10140	chunk	
63-9	10141-10142	|	
63-10	10143-10146	200	
63-11	10147-10149	MB	
63-12	10150-10153	   	
63-13	10154-10155	|	
63-14	10156-10158	64	
63-15	10159-10161	MB	
63-16	10162-10163	|	
63-17	10164-10168	8192	
63-18	10169-10174	bytes	
63-19	10175-10176	|	
63-20	10177-10180	272	
63-21	10181-10183	MB	
63-22	10184-10185	_	
63-23	10185-10205	timescaledb_internal	
63-24	10205-10206	.	

#Text=_hyper_1_95_chunk | 388 MB     | 108 MB     | 8192 bytes | 500 MB
#Text=_timescaledb_internal.
64-1	10206-10207	_	
64-2	10207-10212	hyper	
64-3	10212-10213	_	
64-4	10213-10214	1	
64-5	10214-10215	_	
64-6	10215-10217	95	
64-7	10217-10218	_	
64-8	10218-10223	chunk	
64-9	10224-10225	|	
64-10	10226-10229	388	
64-11	10230-10232	MB	
64-12	10233-10236	   	
64-13	10237-10238	|	
64-14	10239-10242	108	
64-15	10243-10245	MB	
64-16	10246-10249	   	
64-17	10250-10251	|	
64-18	10252-10256	8192	
64-19	10257-10262	bytes	
64-20	10263-10264	|	
64-21	10265-10268	500	
64-22	10269-10271	MB	
64-23	10272-10273	_	
64-24	10273-10293	timescaledb_internal	
64-25	10293-10294	.	

#Text=_hyper_1_94_chunk | 388 MB     | 108 MB     | 8192 bytes | 500 MB
#Text=_timescaledb_internal.
65-1	10294-10295	_	
65-2	10295-10300	hyper	
65-3	10300-10301	_	
65-4	10301-10302	1	
65-5	10302-10303	_	
65-6	10303-10305	94	
65-7	10305-10306	_	
65-8	10306-10311	chunk	
65-9	10312-10313	|	
65-10	10314-10317	388	
65-11	10318-10320	MB	
65-12	10321-10324	   	
65-13	10325-10326	|	
65-14	10327-10330	108	
65-15	10331-10333	MB	
65-16	10334-10337	   	
65-17	10338-10339	|	
65-18	10340-10344	8192	
65-19	10345-10350	bytes	
65-20	10351-10352	|	
65-21	10353-10356	500	
65-22	10357-10359	MB	
65-23	10360-10361	_	
65-24	10361-10381	timescaledb_internal	
65-25	10381-10382	.	

#Text=_hyper_1_93_chunk | 388 MB     | 108 MB     | 8192 bytes | 500 MB
#Text=If your chunks are too large, you can update the range for future chunks via the set_chunk_time_interval command.
66-1	10382-10383	_	
66-2	10383-10388	hyper	
66-3	10388-10389	_	
66-4	10389-10390	1	
66-5	10390-10391	_	
66-6	10391-10393	93	
66-7	10393-10394	_	
66-8	10394-10399	chunk	
66-9	10400-10401	|	
66-10	10402-10405	388	
66-11	10406-10408	MB	
66-12	10409-10412	   	
66-13	10413-10414	|	
66-14	10415-10418	108	
66-15	10419-10421	MB	
66-16	10422-10425	   	
66-17	10426-10427	|	
66-18	10428-10432	8192	
66-19	10433-10438	bytes	
66-20	10439-10440	|	
66-21	10441-10444	500	
66-22	10445-10447	MB	
66-23	10448-10450	If	
66-24	10451-10455	your	
66-25	10456-10462	chunks	
66-26	10463-10466	are	
66-27	10467-10470	too	
66-28	10471-10476	large	
66-29	10476-10477	,	
66-30	10478-10481	you	
66-31	10482-10485	can	
66-32	10486-10492	update	
66-33	10493-10496	the	
66-34	10497-10502	range	
66-35	10503-10506	for	
66-36	10507-10513	future	
66-37	10514-10520	chunks	
66-38	10521-10524	via	
66-39	10525-10528	the	
66-40	10529-10552	set_chunk_time_interval	
66-41	10553-10560	command	
66-42	10560-10561	.	

#Text=However, this does not modify the range of existing chunks (e.g., by rewriting large chunks into multiple small chunks).
67-1	10562-10569	However	
67-2	10569-10570	,	
67-3	10571-10575	this	
67-4	10576-10580	does	
67-5	10581-10584	not	
67-6	10585-10591	modify	
67-7	10592-10595	the	
67-8	10596-10601	range	
67-9	10602-10604	of	
67-10	10605-10613	existing	
67-11	10614-10620	chunks	
67-12	10621-10622	(	
67-13	10622-10625	e.g	
67-14	10625-10626	.	
67-15	10626-10627	,	
67-16	10628-10630	by	
67-17	10631-10640	rewriting	
67-18	10641-10646	large	
67-19	10647-10653	chunks	
67-20	10654-10658	into	
67-21	10659-10667	multiple	
67-22	10668-10673	small	
67-23	10674-10680	chunks	
67-24	10680-10681	)	
67-25	10681-10682	.	

#Text=For configurations where individual chunks are much larger than your available memory, we recommend dumping and reloading your hypertable data to properly sized chunks.
68-1	10683-10686	For	
68-2	10687-10701	configurations	
68-3	10702-10707	where	
68-4	10708-10718	individual	
68-5	10719-10725	chunks	
68-6	10726-10729	are	
68-7	10730-10734	much	
68-8	10735-10741	larger	
68-9	10742-10746	than	
68-10	10747-10751	your	
68-11	10752-10761	available	
68-12	10762-10768	memory	
68-13	10768-10769	,	
68-14	10770-10772	we	
68-15	10773-10782	recommend	
68-16	10783-10790	dumping	
68-17	10791-10794	and	
68-18	10795-10804	reloading	
68-19	10805-10809	your	
68-20	10810-10820	hypertable	
68-21	10821-10825	data	
68-22	10826-10828	to	
68-23	10829-10837	properly	
68-24	10838-10843	sized	
68-25	10844-10850	chunks	
68-26	10850-10851	.	

#Text=Keeping the latest chunk applies to all active hypertables; if you are actively writing to two hypertables, the latest chunks from both should fit within shared_buffers.
#Text=12.
69-1	10852-10859	Keeping	
69-2	10860-10863	the	
69-3	10864-10870	latest	
69-4	10871-10876	chunk	
69-5	10877-10884	applies	
69-6	10885-10887	to	
69-7	10888-10891	all	
69-8	10892-10898	active	
69-9	10899-10910	hypertables	
69-10	10910-10911	;	
69-11	10912-10914	if	
69-12	10915-10918	you	
69-13	10919-10922	are	
69-14	10923-10931	actively	
69-15	10932-10939	writing	
69-16	10940-10942	to	
69-17	10943-10946	two	
69-18	10947-10958	hypertables	
69-19	10958-10959	,	
69-20	10960-10963	the	
69-21	10964-10970	latest	
69-22	10971-10977	chunks	
69-23	10978-10982	from	
69-24	10983-10987	both	
69-25	10988-10994	should	
69-26	10995-10998	fit	
69-27	10999-11005	within	
69-28	11006-11020	shared_buffers	
69-29	11020-11021	.	
69-30	11022-11024	12	
69-31	11024-11025	.	

#Text=Avoid Too Many or Too Small Chunks
#Text=Unless you're running multi-node TimescaleDB, we don't currently recommend using space partitioning.
70-1	11026-11031	Avoid	
70-2	11032-11035	Too	
70-3	11036-11040	Many	
70-4	11041-11043	or	
70-5	11044-11047	Too	
70-6	11048-11053	Small	
70-7	11054-11060	Chunks	
70-8	11061-11067	Unless	
70-9	11068-11074	you're	
70-10	11075-11082	running	
70-11	11083-11093	multi-node	
70-12	11094-11105	TimescaleDB	
70-13	11105-11106	,	
70-14	11107-11109	we	
70-15	11110-11115	don't	
70-16	11116-11125	currently	
70-17	11126-11135	recommend	
70-18	11136-11141	using	
70-19	11142-11147	space	
70-20	11148-11160	partitioning	
70-21	11160-11161	.	

#Text=And if you do, remember that this number of chunks is created for every time interval.
71-1	11162-11165	And	
71-2	11166-11168	if	
71-3	11169-11172	you	
71-4	11173-11175	do	
71-5	11175-11176	,	
71-6	11177-11185	remember	
71-7	11186-11190	that	
71-8	11191-11195	this	
71-9	11196-11202	number	
71-10	11203-11205	of	
71-11	11206-11212	chunks	
71-12	11213-11215	is	
71-13	11216-11223	created	
71-14	11224-11227	for	
71-15	11228-11233	every	
71-16	11234-11238	time	
71-17	11239-11247	interval	
71-18	11247-11248	.	

#Text=So, if you create 64 space partitions and daily chunks, you'll have 24,640 chunks per year.
72-1	11249-11251	So	
72-2	11251-11252	,	
72-3	11253-11255	if	
72-4	11256-11259	you	
72-5	11260-11266	create	
72-6	11267-11269	64	
72-7	11270-11275	space	
72-8	11276-11286	partitions	
72-9	11287-11290	and	
72-10	11291-11296	daily	
72-11	11297-11303	chunks	
72-12	11303-11304	,	
72-13	11305-11311	you'll	
72-14	11312-11316	have	
72-15	11317-11323	24,640	
72-16	11324-11330	chunks	
72-17	11331-11334	per	
72-18	11335-11339	year	
72-19	11339-11340	.	

#Text=This may lead to a bigger performance hit during query time (due to planning overhead) compared to insert time, but something to consider nonetheless.Another thing to avoid: using an incorrect integer value when you specify the time interval range in create_hypertable.
73-1	11341-11345	This	
73-2	11346-11349	may	
73-3	11350-11354	lead	
73-4	11355-11357	to	
73-5	11358-11359	a	
73-6	11360-11366	bigger	
73-7	11367-11378	performance	
73-8	11379-11382	hit	
73-9	11383-11389	during	
73-10	11390-11395	query	
73-11	11396-11400	time	
73-12	11401-11402	(	
73-13	11402-11405	due	
73-14	11406-11408	to	
73-15	11409-11417	planning	
73-16	11418-11426	overhead	
73-17	11426-11427	)	
73-18	11428-11436	compared	
73-19	11437-11439	to	
73-20	11440-11446	insert	
73-21	11447-11451	time	
73-22	11451-11452	,	
73-23	11453-11456	but	
73-24	11457-11466	something	
73-25	11467-11469	to	
73-26	11470-11478	consider	
73-27	11479-11498	nonetheless.Another	
73-28	11499-11504	thing	
73-29	11505-11507	to	
73-30	11508-11513	avoid	
73-31	11513-11514	:	
73-32	11515-11520	using	
73-33	11521-11523	an	
73-34	11524-11533	incorrect	
73-35	11534-11541	integer	
73-36	11542-11547	value	
73-37	11548-11552	when	
73-38	11553-11556	you	
73-39	11557-11564	specify	
73-40	11565-11568	the	
73-41	11569-11573	time	
73-42	11574-11582	interval	
73-43	11583-11588	range	
73-44	11589-11591	in	
73-45	11592-11609	create_hypertable	
73-46	11609-11610	.	

#Text=Pro tip:
#Text=If your time column uses a native timestamp type, then any integer value should be in terms of microseconds (so one day = 86400000000).
74-1	11611-11614	Pro	
74-2	11615-11618	tip	
74-3	11618-11619	:	
74-4	11620-11622	If	
74-5	11623-11627	your	
74-6	11628-11632	time	
74-7	11633-11639	column	
74-8	11640-11644	uses	
74-9	11645-11646	a	
74-10	11647-11653	native	
74-11	11654-11663	timestamp	
74-12	11664-11668	type	
74-13	11668-11669	,	
74-14	11670-11674	then	
74-15	11675-11678	any	
74-16	11679-11686	integer	
74-17	11687-11692	value	
74-18	11693-11699	should	
74-19	11700-11702	be	
74-20	11703-11705	in	
74-21	11706-11711	terms	
74-22	11712-11714	of	
74-23	11715-11727	microseconds	
74-24	11728-11729	(	
74-25	11729-11731	so	
74-26	11732-11735	one	
74-27	11736-11739	day	
74-28	11740-11741	=	
74-29	11742-11753	86400000000	
74-30	11753-11754	)	
74-31	11754-11755	.	

#Text=We recommend using interval types ('1 day') to avoid potential for any confusion.
75-1	11756-11758	We	
75-2	11759-11768	recommend	
75-3	11769-11774	using	
75-4	11775-11783	interval	
75-5	11784-11789	types	
75-6	11790-11791	(	
75-7	11791-11792	'	
75-8	11792-11793	1	
75-9	11794-11797	day	
75-10	11797-11798	'	
75-11	11798-11799	)	
75-12	11800-11802	to	
75-13	11803-11808	avoid	
75-14	11809-11818	potential	
75-15	11819-11822	for	
75-16	11823-11826	any	
75-17	11827-11836	confusion	
75-18	11836-11837	.	

#Text=If your time column is an integer or bigint itself,  use the appropriate range: if the integer timestamp is in seconds, use 86400; if the bigint timestamp is in nanoseconds, use 86400000000000.In both cases, you can use chunk_relation_size_pretty to make sure your chunk sizes or partition ranges seem reasonable:
#Text=SQL
#Text=xxxxxxxxxx
#Text==> SELECT chunk_table, ranges, total_size
#Text=FROM chunk_relation_size_pretty('hypertable_name')
#Text=ORDER BY ranges DESC LIMIT 4;
#Text=chunk_table                             |                         ranges
#Text=| total_size
#Text=-----------------------------------------+---------------------------------------------------------+------------
#Text=_timescaledb_internal.
76-1	11838-11840	If	
76-2	11841-11845	your	
76-3	11846-11850	time	
76-4	11851-11857	column	
76-5	11858-11860	is	
76-6	11861-11863	an	
76-7	11864-11871	integer	
76-8	11872-11874	or	
76-9	11875-11881	bigint	
76-10	11882-11888	itself	
76-11	11888-11889	,	
76-12	11890-11891	 	
76-13	11891-11894	use	
76-14	11895-11898	the	
76-15	11899-11910	appropriate	
76-16	11911-11916	range	
76-17	11916-11917	:	
76-18	11918-11920	if	
76-19	11921-11924	the	
76-20	11925-11932	integer	
76-21	11933-11942	timestamp	
76-22	11943-11945	is	
76-23	11946-11948	in	
76-24	11949-11956	seconds	
76-25	11956-11957	,	
76-26	11958-11961	use	
76-27	11962-11967	86400	
76-28	11967-11968	;	
76-29	11969-11971	if	
76-30	11972-11975	the	
76-31	11976-11982	bigint	
76-32	11983-11992	timestamp	
76-33	11993-11995	is	
76-34	11996-11998	in	
76-35	11999-12010	nanoseconds	
76-36	12010-12011	,	
76-37	12012-12015	use	
76-38	12016-12030	86400000000000	
76-39	12030-12031	.	
76-40	12031-12033	In	
76-41	12034-12038	both	
76-42	12039-12044	cases	
76-43	12044-12045	,	
76-44	12046-12049	you	
76-45	12050-12053	can	
76-46	12054-12057	use	
76-47	12058-12084	chunk_relation_size_pretty	
76-48	12085-12087	to	
76-49	12088-12092	make	
76-50	12093-12097	sure	
76-51	12098-12102	your	
76-52	12103-12108	chunk	
76-53	12109-12114	sizes	
76-54	12115-12117	or	
76-55	12118-12127	partition	
76-56	12128-12134	ranges	
76-57	12135-12139	seem	
76-58	12140-12150	reasonable	
76-59	12150-12151	:	
76-60	12152-12155	SQL	
76-61	12156-12166	xxxxxxxxxx	
76-62	12167-12168	=	
76-63	12168-12169	>	
76-64	12170-12176	SELECT	
76-65	12177-12188	chunk_table	
76-66	12188-12189	,	
76-67	12190-12196	ranges	
76-68	12196-12197	,	
76-69	12198-12208	total_size	
76-70	12209-12213	FROM	
76-71	12214-12240	chunk_relation_size_pretty	
76-72	12240-12241	(	
76-73	12241-12242	'	
76-74	12242-12257	hypertable_name	
76-75	12257-12258	'	
76-76	12258-12259	)	
76-77	12260-12265	ORDER	
76-78	12266-12268	BY	
76-79	12269-12275	ranges	
76-80	12276-12280	DESC	
76-81	12281-12286	LIMIT	
76-82	12287-12288	4	
76-83	12288-12289	;	
76-84	12290-12301	chunk_table	
76-85	12302-12329	                           	
76-86	12330-12331	|	
76-87	12332-12355	                       	
76-88	12356-12362	ranges	
76-89	12363-12364	|	
76-90	12365-12375	total_size	
76-91	12376-12377	-	
76-92	12377-12378	-	
76-93	12378-12379	-	
76-94	12379-12380	-	
76-95	12380-12381	-	
76-96	12381-12382	-	
76-97	12382-12383	-	
76-98	12383-12384	-	
76-99	12384-12385	-	
76-100	12385-12386	-	
76-101	12386-12387	-	
76-102	12387-12388	-	
76-103	12388-12389	-	
76-104	12389-12390	-	
76-105	12390-12391	-	
76-106	12391-12392	-	
76-107	12392-12393	-	
76-108	12393-12394	-	
76-109	12394-12395	-	
76-110	12395-12396	-	
76-111	12396-12397	-	
76-112	12397-12398	-	
76-113	12398-12399	-	
76-114	12399-12400	-	
76-115	12400-12401	-	
76-116	12401-12402	-	
76-117	12402-12403	-	
76-118	12403-12404	-	
76-119	12404-12405	-	
76-120	12405-12406	-	
76-121	12406-12407	-	
76-122	12407-12408	-	
76-123	12408-12409	-	
76-124	12409-12410	-	
76-125	12410-12411	-	
76-126	12411-12412	-	
76-127	12412-12413	-	
76-128	12413-12414	-	
76-129	12414-12415	-	
76-130	12415-12416	-	
76-131	12416-12417	-	
76-132	12417-12418	+	
76-133	12418-12419	-	
76-134	12419-12420	-	
76-135	12420-12421	-	
76-136	12421-12422	-	
76-137	12422-12423	-	
76-138	12423-12424	-	
76-139	12424-12425	-	
76-140	12425-12426	-	
76-141	12426-12427	-	
76-142	12427-12428	-	
76-143	12428-12429	-	
76-144	12429-12430	-	
76-145	12430-12431	-	
76-146	12431-12432	-	
76-147	12432-12433	-	
76-148	12433-12434	-	
76-149	12434-12435	-	
76-150	12435-12436	-	
76-151	12436-12437	-	
76-152	12437-12438	-	
76-153	12438-12439	-	
76-154	12439-12440	-	
76-155	12440-12441	-	
76-156	12441-12442	-	
76-157	12442-12443	-	
76-158	12443-12444	-	
76-159	12444-12445	-	
76-160	12445-12446	-	
76-161	12446-12447	-	
76-162	12447-12448	-	
76-163	12448-12449	-	
76-164	12449-12450	-	
76-165	12450-12451	-	
76-166	12451-12452	-	
76-167	12452-12453	-	
76-168	12453-12454	-	
76-169	12454-12455	-	
76-170	12455-12456	-	
76-171	12456-12457	-	
76-172	12457-12458	-	
76-173	12458-12459	-	
76-174	12459-12460	-	
76-175	12460-12461	-	
76-176	12461-12462	-	
76-177	12462-12463	-	
76-178	12463-12464	-	
76-179	12464-12465	-	
76-180	12465-12466	-	
76-181	12466-12467	-	
76-182	12467-12468	-	
76-183	12468-12469	-	
76-184	12469-12470	-	
76-185	12470-12471	-	
76-186	12471-12472	-	
76-187	12472-12473	-	
76-188	12473-12474	-	
76-189	12474-12475	-	
76-190	12475-12476	+	
76-191	12476-12477	-	
76-192	12477-12478	-	
76-193	12478-12479	-	
76-194	12479-12480	-	
76-195	12480-12481	-	
76-196	12481-12482	-	
76-197	12482-12483	-	
76-198	12483-12484	-	
76-199	12484-12485	-	
76-200	12485-12486	-	
76-201	12486-12487	-	
76-202	12487-12488	-	
76-203	12489-12490	_	
76-204	12490-12510	timescaledb_internal	
76-205	12510-12511	.	

#Text=_hyper_1_96_chunk | {"['2020-02-13 23:00:00+00','2020-02-14 00:00:00+00')"} | 272 MB
#Text=_timescaledb_internal.
77-1	12511-12512	_	
77-2	12512-12517	hyper	
77-3	12517-12518	_	
77-4	12518-12519	1	
77-5	12519-12520	_	
77-6	12520-12522	96	
77-7	12522-12523	_	
77-8	12523-12528	chunk	
77-9	12529-12530	|	
77-10	12531-12532	{	
77-11	12532-12533	"	
77-12	12533-12534	[	
77-13	12534-12535	'	
77-14	12535-12539	2020	
77-15	12539-12540	-	
77-16	12540-12542	02	
77-17	12542-12543	-	
77-18	12543-12545	13	
77-19	12546-12548	23	
77-20	12548-12549	:	
77-21	12549-12551	00	
77-22	12551-12552	:	
77-23	12552-12554	00	
77-24	12554-12555	+	
77-25	12555-12557	00	
77-26	12557-12558	'	
77-27	12558-12559	,	
77-28	12559-12560	'	
77-29	12560-12564	2020	
77-30	12564-12565	-	
77-31	12565-12567	02	
77-32	12567-12568	-	
77-33	12568-12570	14	
77-34	12571-12573	00	
77-35	12573-12574	:	
77-36	12574-12576	00	
77-37	12576-12577	:	
77-38	12577-12579	00	
77-39	12579-12580	+	
77-40	12580-12582	00	
77-41	12582-12583	'	
77-42	12583-12584	)	
77-43	12584-12585	"	
77-44	12585-12586	}	
77-45	12587-12588	|	
77-46	12589-12592	272	
77-47	12593-12595	MB	
77-48	12596-12597	_	
77-49	12597-12617	timescaledb_internal	
77-50	12617-12618	.	

#Text=_hyper_1_95_chunk | {"['2020-02-13 22:00:00+00','2020-02-13 23:00:00+00')"} | 500 MB
#Text=_timescaledb_internal.
78-1	12618-12619	_	
78-2	12619-12624	hyper	
78-3	12624-12625	_	
78-4	12625-12626	1	
78-5	12626-12627	_	
78-6	12627-12629	95	
78-7	12629-12630	_	
78-8	12630-12635	chunk	
78-9	12636-12637	|	
78-10	12638-12639	{	
78-11	12639-12640	"	
78-12	12640-12641	[	
78-13	12641-12642	'	
78-14	12642-12646	2020	
78-15	12646-12647	-	
78-16	12647-12649	02	
78-17	12649-12650	-	
78-18	12650-12652	13	
78-19	12653-12655	22	
78-20	12655-12656	:	
78-21	12656-12658	00	
78-22	12658-12659	:	
78-23	12659-12661	00	
78-24	12661-12662	+	
78-25	12662-12664	00	
78-26	12664-12665	'	
78-27	12665-12666	,	
78-28	12666-12667	'	
78-29	12667-12671	2020	
78-30	12671-12672	-	
78-31	12672-12674	02	
78-32	12674-12675	-	
78-33	12675-12677	13	
78-34	12678-12680	23	
78-35	12680-12681	:	
78-36	12681-12683	00	
78-37	12683-12684	:	
78-38	12684-12686	00	
78-39	12686-12687	+	
78-40	12687-12689	00	
78-41	12689-12690	'	
78-42	12690-12691	)	
78-43	12691-12692	"	
78-44	12692-12693	}	
78-45	12694-12695	|	
78-46	12696-12699	500	
78-47	12700-12702	MB	
78-48	12703-12704	_	
78-49	12704-12724	timescaledb_internal	
78-50	12724-12725	.	

#Text=_hyper_1_94_chunk | {"['2020-02-13 21:30:00+00','2020-02-13 22:00:00+00')"} | 500 MB
#Text=_timescaledb_internal.
79-1	12725-12726	_	
79-2	12726-12731	hyper	
79-3	12731-12732	_	
79-4	12732-12733	1	
79-5	12733-12734	_	
79-6	12734-12736	94	
79-7	12736-12737	_	
79-8	12737-12742	chunk	
79-9	12743-12744	|	
79-10	12745-12746	{	
79-11	12746-12747	"	
79-12	12747-12748	[	
79-13	12748-12749	'	
79-14	12749-12753	2020	
79-15	12753-12754	-	
79-16	12754-12756	02	
79-17	12756-12757	-	
79-18	12757-12759	13	
79-19	12760-12762	21	
79-20	12762-12763	:	
79-21	12763-12765	30	
79-22	12765-12766	:	
79-23	12766-12768	00	
79-24	12768-12769	+	
79-25	12769-12771	00	
79-26	12771-12772	'	
79-27	12772-12773	,	
79-28	12773-12774	'	
79-29	12774-12778	2020	
79-30	12778-12779	-	
79-31	12779-12781	02	
79-32	12781-12782	-	
79-33	12782-12784	13	
79-34	12785-12787	22	
79-35	12787-12788	:	
79-36	12788-12790	00	
79-37	12790-12791	:	
79-38	12791-12793	00	
79-39	12793-12794	+	
79-40	12794-12796	00	
79-41	12796-12797	'	
79-42	12797-12798	)	
79-43	12798-12799	"	
79-44	12799-12800	}	
79-45	12801-12802	|	
79-46	12803-12806	500	
79-47	12807-12809	MB	
79-48	12810-12811	_	
79-49	12811-12831	timescaledb_internal	
79-50	12831-12832	.	

#Text=_hyper_1_93_chunk | {"['2020-02-13 20:00:00+00','2020-02-13 21:00:00+00')"} | 500 MB
#Text=13.
80-1	12832-12833	_	
80-2	12833-12838	hyper	
80-3	12838-12839	_	
80-4	12839-12840	1	
80-5	12840-12841	_	
80-6	12841-12843	93	
80-7	12843-12844	_	
80-8	12844-12849	chunk	
80-9	12850-12851	|	
80-10	12852-12853	{	
80-11	12853-12854	"	
80-12	12854-12855	[	
80-13	12855-12856	'	
80-14	12856-12860	2020	
80-15	12860-12861	-	
80-16	12861-12863	02	
80-17	12863-12864	-	
80-18	12864-12866	13	
80-19	12867-12869	20	
80-20	12869-12870	:	
80-21	12870-12872	00	
80-22	12872-12873	:	
80-23	12873-12875	00	
80-24	12875-12876	+	
80-25	12876-12878	00	
80-26	12878-12879	'	
80-27	12879-12880	,	
80-28	12880-12881	'	
80-29	12881-12885	2020	
80-30	12885-12886	-	
80-31	12886-12888	02	
80-32	12888-12889	-	
80-33	12889-12891	13	
80-34	12892-12894	21	
80-35	12894-12895	:	
80-36	12895-12897	00	
80-37	12897-12898	:	
80-38	12898-12900	00	
80-39	12900-12901	+	
80-40	12901-12903	00	
80-41	12903-12904	'	
80-42	12904-12905	)	
80-43	12905-12906	"	
80-44	12906-12907	}	
80-45	12908-12909	|	
80-46	12910-12913	500	
80-47	12914-12916	MB	
80-48	12917-12919	13	
80-49	12919-12920	.	

#Text=Watch Row Width
#Text=The overhead from inserting a wide row (say, 50, 100, 250 columns) is going to be much higher than inserting a narrower row (more network I/O, more parsing and data processing, larger writes to WAL, etc.).
81-1	12921-12926	Watch	
81-2	12927-12930	Row	
81-3	12931-12936	Width	
81-4	12937-12940	The	
81-5	12941-12949	overhead	
81-6	12950-12954	from	
81-7	12955-12964	inserting	
81-8	12965-12966	a	
81-9	12967-12971	wide	
81-10	12972-12975	row	
81-11	12976-12977	(	
81-12	12977-12980	say	
81-13	12980-12981	,	
81-14	12982-12984	50	
81-15	12984-12985	,	
81-16	12986-12989	100	
81-17	12989-12990	,	
81-18	12991-12994	250	
81-19	12995-13002	columns	
81-20	13002-13003	)	
81-21	13004-13006	is	
81-22	13007-13012	going	
81-23	13013-13015	to	
81-24	13016-13018	be	
81-25	13019-13023	much	
81-26	13024-13030	higher	
81-27	13031-13035	than	
81-28	13036-13045	inserting	
81-29	13046-13047	a	
81-30	13048-13056	narrower	
81-31	13057-13060	row	
81-32	13061-13062	(	
81-33	13062-13066	more	
81-34	13067-13074	network	
81-35	13075-13076	I	
81-36	13076-13077	/	
81-37	13077-13078	O	
81-38	13078-13079	,	
81-39	13080-13084	more	
81-40	13085-13092	parsing	
81-41	13093-13096	and	
81-42	13097-13101	data	
81-43	13102-13112	processing	
81-44	13112-13113	,	
81-45	13114-13120	larger	
81-46	13121-13127	writes	
81-47	13128-13130	to	
81-48	13131-13134	WAL	
81-49	13134-13135	,	
81-50	13136-13139	etc	
81-51	13139-13140	.	
81-52	13140-13141	)	
81-53	13141-13142	.	

#Text=Most of our published benchmarks are using TSBS, which uses 12 columns per row.
82-1	13143-13147	Most	
82-2	13148-13150	of	
82-3	13151-13154	our	
82-4	13155-13164	published	
82-5	13165-13175	benchmarks	
82-6	13176-13179	are	
82-7	13180-13185	using	
82-8	13186-13190	TSBS	
82-9	13190-13191	,	
82-10	13192-13197	which	
82-11	13198-13202	uses	
82-12	13203-13205	12	
82-13	13206-13213	columns	
82-14	13214-13217	per	
82-15	13218-13221	row	
82-16	13221-13222	.	

#Text=So you'll correspondingly see lower insert rates if you have very wide rows.
83-1	13223-13225	So	
83-2	13226-13232	you'll	
83-3	13233-13248	correspondingly	
83-4	13249-13252	see	
83-5	13253-13258	lower	
83-6	13259-13265	insert	
83-7	13266-13271	rates	
83-8	13272-13274	if	
83-9	13275-13278	you	
83-10	13279-13283	have	
83-11	13284-13288	very	
83-12	13289-13293	wide	
83-13	13294-13298	rows	
83-14	13298-13299	.	

#Text=If you are considering very wide rows because you have different types of records, and each type has a disjoint set of columns, you might want to try using multiple hypertables (one per record type) – particularly if you don't often query across these types.
84-1	13300-13302	If	
84-2	13303-13306	you	
84-3	13307-13310	are	
84-4	13311-13322	considering	
84-5	13323-13327	very	
84-6	13328-13332	wide	
84-7	13333-13337	rows	
84-8	13338-13345	because	
84-9	13346-13349	you	
84-10	13350-13354	have	
84-11	13355-13364	different	
84-12	13365-13370	types	
84-13	13371-13373	of	
84-14	13374-13381	records	
84-15	13381-13382	,	
84-16	13383-13386	and	
84-17	13387-13391	each	
84-18	13392-13396	type	
84-19	13397-13400	has	
84-20	13401-13402	a	
84-21	13403-13411	disjoint	
84-22	13412-13415	set	
84-23	13416-13418	of	
84-24	13419-13426	columns	
84-25	13426-13427	,	
84-26	13428-13431	you	
84-27	13432-13437	might	
84-28	13438-13442	want	
84-29	13443-13445	to	
84-30	13446-13449	try	
84-31	13450-13455	using	
84-32	13456-13464	multiple	
84-33	13465-13476	hypertables	
84-34	13477-13478	(	
84-35	13478-13481	one	
84-36	13482-13485	per	
84-37	13486-13492	record	
84-38	13493-13497	type	
84-39	13497-13498	)	
84-40	13499-13500	–	
84-41	13501-13513	particularly	
84-42	13514-13516	if	
84-43	13517-13520	you	
84-44	13521-13526	don't	
84-45	13527-13532	often	
84-46	13533-13538	query	
84-47	13539-13545	across	
84-48	13546-13551	these	
84-49	13552-13557	types	
84-50	13557-13558	.	

#Text=Additionally, JSONB records are another good option if virtually all columns are sparse.
85-1	13559-13571	Additionally	
85-2	13571-13572	,	
85-3	13573-13578	JSONB	
85-4	13579-13586	records	
85-5	13587-13590	are	
85-6	13591-13598	another	
85-7	13599-13603	good	
85-8	13604-13610	option	
85-9	13611-13613	if	
85-10	13614-13623	virtually	
85-11	13624-13627	all	
85-12	13628-13635	columns	
85-13	13636-13639	are	
85-14	13640-13646	sparse	
85-15	13646-13647	.	

#Text=That said, if you're using sparse wide rows, use NULLs for missing records whenever possible, not default values, for the most performance gains (NULLs are much cheaper to store and query).
86-1	13648-13652	That	
86-2	13653-13657	said	
86-3	13657-13658	,	
86-4	13659-13661	if	
86-5	13662-13668	you're	
86-6	13669-13674	using	
86-7	13675-13681	sparse	
86-8	13682-13686	wide	
86-9	13687-13691	rows	
86-10	13691-13692	,	
86-11	13693-13696	use	
86-12	13697-13702	NULLs	
86-13	13703-13706	for	
86-14	13707-13714	missing	
86-15	13715-13722	records	
86-16	13723-13731	whenever	
86-17	13732-13740	possible	
86-18	13740-13741	,	
86-19	13742-13745	not	
86-20	13746-13753	default	
86-21	13754-13760	values	
86-22	13760-13761	,	
86-23	13762-13765	for	
86-24	13766-13769	the	
86-25	13770-13774	most	
86-26	13775-13786	performance	
86-27	13787-13792	gains	
86-28	13793-13794	(	
86-29	13794-13799	NULLs	
86-30	13800-13803	are	
86-31	13804-13808	much	
86-32	13809-13816	cheaper	
86-33	13817-13819	to	
86-34	13820-13825	store	
86-35	13826-13829	and	
86-36	13830-13835	query	
86-37	13835-13836	)	
86-38	13836-13837	.	

#Text=Finally, the cost of wide rows are actually much less once you compress rows using TimescaleDB’s native compression.  
87-1	13838-13845	Finally	
87-2	13845-13846	,	
87-3	13847-13850	the	
87-4	13851-13855	cost	
87-5	13856-13858	of	
87-6	13859-13863	wide	
87-7	13864-13868	rows	
87-8	13869-13872	are	
87-9	13873-13881	actually	
87-10	13882-13886	much	
87-11	13887-13891	less	
87-12	13892-13896	once	
87-13	13897-13900	you	
87-14	13901-13909	compress	
87-15	13910-13914	rows	
87-16	13915-13920	using	
87-17	13921-13932	TimescaleDB	
87-18	13932-13933	’	
87-19	13933-13934	s	
87-20	13935-13941	native	
87-21	13942-13953	compression	
87-22	13953-13954	.	
87-23	13955-13956	 	

#Text=Rows are converted into more columnar compressed form, sparse columns compress extremely well, and compressed columns aren’t read from disk for queries that don’t fetch individual columns.
88-1	13956-13960	Rows	
88-2	13961-13964	are	
88-3	13965-13974	converted	
88-4	13975-13979	into	
88-5	13980-13984	more	
88-6	13985-13993	columnar	
88-7	13994-14004	compressed	
88-8	14005-14009	form	
88-9	14009-14010	,	
88-10	14011-14017	sparse	
88-11	14018-14025	columns	
88-12	14026-14034	compress	
88-13	14035-14044	extremely	
88-14	14045-14049	well	
88-15	14049-14050	,	
88-16	14051-14054	and	
88-17	14055-14065	compressed	
88-18	14066-14073	columns	
88-19	14074-14078	aren	
88-20	14078-14079	’	
88-21	14079-14080	t	
88-22	14081-14085	read	
88-23	14086-14090	from	
88-24	14091-14095	disk	
88-25	14096-14099	for	
88-26	14100-14107	queries	
88-27	14108-14112	that	
88-28	14113-14116	don	
88-29	14116-14117	’	
88-30	14117-14118	t	
88-31	14119-14124	fetch	
88-32	14125-14135	individual	
88-33	14136-14143	columns	
88-34	14143-14144	.	

#Text=Summary
#Text=If ingest performance is critical to your use case, consider using TimescaleDB.
89-1	14145-14152	Summary	
89-2	14153-14155	If	
89-3	14156-14162	ingest	
89-4	14163-14174	performance	
89-5	14175-14177	is	
89-6	14178-14186	critical	
89-7	14187-14189	to	
89-8	14190-14194	your	
89-9	14195-14198	use	
89-10	14199-14203	case	
89-11	14203-14204	,	
89-12	14205-14213	consider	
89-13	14214-14219	using	
89-14	14220-14231	TimescaleDB	
89-15	14231-14232	.	

#Text=You can get started with Timescale Cloud for free today, or download TimescaleDB to your own machine or cloud instance for free.
90-1	14233-14236	You	
90-2	14237-14240	can	
90-3	14241-14244	get	
90-4	14245-14252	started	
90-5	14253-14257	with	
90-6	14258-14267	Timescale	
90-7	14268-14273	Cloud	
90-8	14274-14277	for	
90-9	14278-14282	free	
90-10	14283-14288	today	
90-11	14288-14289	,	
90-12	14290-14292	or	
90-13	14293-14301	download	
90-14	14302-14313	TimescaleDB	
90-15	14314-14316	to	
90-16	14317-14321	your	
90-17	14322-14325	own	
90-18	14326-14333	machine	
90-19	14334-14336	or	
90-20	14337-14342	cloud	
90-21	14343-14351	instance	
90-22	14352-14355	for	
90-23	14356-14360	free	
90-24	14360-14361	.	

#Text=Our approach to support is to address your whole solution, so we're here to help help you achieve your desired performance results (see more details about our Customer Care team and ethos).
91-1	14362-14365	Our	
91-2	14366-14374	approach	
91-3	14375-14377	to	
91-4	14378-14385	support	
91-5	14386-14388	is	
91-6	14389-14391	to	
91-7	14392-14399	address	
91-8	14400-14404	your	
91-9	14405-14410	whole	
91-10	14411-14419	solution	
91-11	14419-14420	,	
91-12	14421-14423	so	
91-13	14424-14429	we're	
91-14	14430-14434	here	
91-15	14435-14437	to	
91-16	14438-14442	help	
91-17	14443-14447	help	
91-18	14448-14451	you	
91-19	14452-14459	achieve	
91-20	14460-14464	your	
91-21	14465-14472	desired	
91-22	14473-14484	performance	
91-23	14485-14492	results	
91-24	14493-14494	(	
91-25	14494-14497	see	
91-26	14498-14502	more	
91-27	14503-14510	details	
91-28	14511-14516	about	
91-29	14517-14520	our	
91-30	14521-14529	Customer	
91-31	14530-14534	Care	
91-32	14535-14539	team	
91-33	14540-14543	and	
91-34	14544-14549	ethos	
91-35	14549-14550	)	
91-36	14550-14551	.	

#Text=Lastly, our Slack community is a great place to connect with 4K+ other developers with similar use cases, as well as myself, Timescale engineers, product team members, and Developer Advocates.
92-1	14552-14558	Lastly	
92-2	14558-14559	,	
92-3	14560-14563	our	
92-4	14564-14569	Slack	
92-5	14570-14579	community	
92-6	14580-14582	is	
92-7	14583-14584	a	
92-8	14585-14590	great	
92-9	14591-14596	place	
92-10	14597-14599	to	
92-11	14600-14607	connect	
92-12	14608-14612	with	
92-13	14613-14615	4K	
92-14	14615-14616	+	
92-15	14617-14622	other	
92-16	14623-14633	developers	
92-17	14634-14638	with	
92-18	14639-14646	similar	
92-19	14647-14650	use	
92-20	14651-14656	cases	
92-21	14656-14657	,	
92-22	14658-14660	as	
92-23	14661-14665	well	
92-24	14666-14668	as	
92-25	14669-14675	myself	
92-26	14675-14676	,	
92-27	14677-14686	Timescale	
92-28	14687-14696	engineers	
92-29	14696-14697	,	
92-30	14698-14705	product	
92-31	14706-14710	team	
92-32	14711-14718	members	
92-33	14718-14719	,	
92-34	14720-14723	and	
92-35	14724-14733	Developer	
92-36	14734-14743	Advocates	
92-37	14743-14744	.	

#Text=Topics:
#Text=postgresql,
#Text=database performance,
#Text=time-series data,
#Text=sql (structured query language),
#Text=database,
#Text=performance
#Text=Published at DZone with permission of Mike Freedman.
93-1	14745-14751	Topics	
93-2	14751-14752	:	
93-3	14753-14763	postgresql	
93-4	14763-14764	,	
93-5	14765-14773	database	
93-6	14774-14785	performance	
93-7	14785-14786	,	
93-8	14787-14798	time-series	
93-9	14799-14803	data	
93-10	14803-14804	,	
93-11	14805-14808	sql	
93-12	14809-14810	(	
93-13	14810-14820	structured	
93-14	14821-14826	query	
93-15	14827-14835	language	
93-16	14835-14836	)	
93-17	14836-14837	,	
93-18	14838-14846	database	
93-19	14846-14847	,	
93-20	14848-14859	performance	
93-21	14860-14869	Published	
93-22	14870-14872	at	
93-23	14873-14878	DZone	
93-24	14879-14883	with	
93-25	14884-14894	permission	
93-26	14895-14897	of	
93-27	14898-14902	Mike	
93-28	14903-14911	Freedman	
93-29	14911-14912	.	

#Text=See the original article here.
94-1	14913-14916	See	
94-2	14917-14920	the	
94-3	14921-14929	original	
94-4	14930-14937	article	
94-5	14938-14942	here	
94-6	14942-14943	.	

#Text=Opinions expressed by DZone contributors are their own.
95-1	14944-14952	Opinions	
95-2	14953-14962	expressed	
95-3	14963-14965	by	
95-4	14966-14971	DZone	
95-5	14972-14984	contributors	
95-6	14985-14988	are	
95-7	14989-14994	their	
95-8	14995-14998	own	
95-9	14998-14999	.	

#Text=Popular on DZone
#Text=The State of Serverless Computing 2021
#Text=Top 20 Dockerfile Best Practices
#Text=Predicting Housing Prices Using Google AutoML Tables
#Text=An Examination of Open Source
#Text=Comments
#Text=Database Partner Resources
#Text=ABOUT US
#Text=About DZone
#Text=Send feedback
#Text=Careers
#Text=ADVERTISE
#Text=Developer
#Text=Marketing Blog
#Text=Advertise with DZone
#Text=+1 (919) 238-7100
#Text=CONTRIBUTE ON DZONE
#Text=MVB Program
#Text=Become a Contributor
#Text=Visit the Writers' Zone
#Text=LEGAL
#Text=Terms of Service
#Text=Privacy Policy
#Text=CONTACT US
#Text=600 Park Offices Drive
#Text=Suite 150
#Text=Research Triangle Park, NC 27709
#Text=support@dzone.com
#Text=+1 (919) 678-0300
#Text=Let's be friends:
#Text=DZone.com is powered by
96-1	15000-15007	Popular	
96-2	15008-15010	on	
96-3	15011-15016	DZone	
96-4	15017-15020	The	
96-5	15021-15026	State	
96-6	15027-15029	of	
96-7	15030-15040	Serverless	
96-8	15041-15050	Computing	
96-9	15051-15055	2021	
96-10	15056-15059	Top	
96-11	15060-15062	20	
96-12	15063-15073	Dockerfile	
96-13	15074-15078	Best	
96-14	15079-15088	Practices	
96-15	15089-15099	Predicting	
96-16	15100-15107	Housing	
96-17	15108-15114	Prices	
96-18	15115-15120	Using	
96-19	15121-15127	Google	
96-20	15128-15134	AutoML	
96-21	15135-15141	Tables	
96-22	15142-15144	An	
96-23	15145-15156	Examination	
96-24	15157-15159	of	
96-25	15160-15164	Open	
96-26	15165-15171	Source	
96-27	15172-15180	Comments	
96-28	15181-15189	Database	
96-29	15190-15197	Partner	
96-30	15198-15207	Resources	
96-31	15208-15213	ABOUT	
96-32	15214-15216	US	
96-33	15217-15222	About	
96-34	15223-15228	DZone	
96-35	15229-15233	Send	
96-36	15234-15242	feedback	
96-37	15243-15250	Careers	
96-38	15251-15260	ADVERTISE	
96-39	15261-15270	Developer	
96-40	15271-15280	Marketing	
96-41	15281-15285	Blog	
96-42	15286-15295	Advertise	
96-43	15296-15300	with	
96-44	15301-15306	DZone	
96-45	15307-15308	+	
96-46	15308-15309	1	
96-47	15310-15311	(	
96-48	15311-15314	919	
96-49	15314-15315	)	
96-50	15316-15319	238	
96-51	15319-15320	-	
96-52	15320-15324	7100	
96-53	15325-15335	CONTRIBUTE	
96-54	15336-15338	ON	
96-55	15339-15344	DZONE	
96-56	15345-15348	MVB	
96-57	15349-15356	Program	
96-58	15357-15363	Become	
96-59	15364-15365	a	
96-60	15366-15377	Contributor	
96-61	15378-15383	Visit	
96-62	15384-15387	the	
96-63	15388-15395	Writers	
96-64	15395-15396	'	
96-65	15397-15401	Zone	
96-66	15402-15407	LEGAL	
96-67	15408-15413	Terms	
96-68	15414-15416	of	
96-69	15417-15424	Service	
96-70	15425-15432	Privacy	
96-71	15433-15439	Policy	
96-72	15440-15447	CONTACT	
96-73	15448-15450	US	
96-74	15451-15454	600	
96-75	15455-15459	Park	
96-76	15460-15467	Offices	
96-77	15468-15473	Drive	
96-78	15474-15479	Suite	
96-79	15480-15483	150	
96-80	15484-15492	Research	
96-81	15493-15501	Triangle	
96-82	15502-15506	Park	
96-83	15506-15507	,	
96-84	15508-15510	NC	
96-85	15511-15516	27709	
96-86	15517-15524	support	
96-87	15524-15525	@	
96-88	15525-15534	dzone.com	
96-89	15535-15536	+	
96-90	15536-15537	1	
96-91	15538-15539	(	
96-92	15539-15542	919	
96-93	15542-15543	)	
96-94	15544-15547	678	
96-95	15547-15548	-	
96-96	15548-15552	0300	
96-97	15553-15558	Let's	
96-98	15559-15561	be	
96-99	15562-15569	friends	
96-100	15569-15570	:	
96-101	15571-15580	DZone.com	
96-102	15581-15583	is	
96-103	15584-15591	powered	
96-104	15592-15594	by	
