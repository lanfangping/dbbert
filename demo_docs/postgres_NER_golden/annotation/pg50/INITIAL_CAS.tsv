#FORMAT=WebAnno TSV 3.3


#Text=Chapter 3. PostGIS AdministrationChapter 3. PostGIS AdministrationPrev   NextChapter 3. PostGIS AdministrationTable of Contents3.1. Performance Tuning3.1.1. Startup3.1.2. Runtime3.2. Configuring raster support3.3. Creating spatial databases3.3.1. Spatially enable database using EXTENSION3.3.2. Spatially enable database without using EXTENSION (discouraged)3.3.3. Create a spatially-enabled database from a template3.4. Upgrading spatial databases3.4.1. Soft upgrade3.4.2. Hard upgrade3.1. Performance Tuning3.1.1. Startup3.1.2. RuntimeTuning for PostGIS performance is much like tuning for any PostgreSQL workload. The only additional consideration is that geometries and rasters are usually large,
1-1	1-8	Chapter	
1-2	8-9	 	
1-3	9-10	3	
1-4	10-11	.	
1-5	11-12	 	
1-6	12-19	PostGIS	
1-7	20-41	AdministrationChapter	
1-8	41-42	 	
1-9	42-43	3	
1-10	43-44	.	
1-11	44-45	 	
1-12	45-52	PostGIS	
1-13	53-71	AdministrationPrev	
1-14	71-74	   	
1-15	74-85	NextChapter	
1-16	85-86	 	
1-17	86-87	3	
1-18	87-88	.	
1-19	88-89	 	
1-20	89-96	PostGIS	
1-21	97-116	AdministrationTable	
1-22	117-119	of	
1-23	120-131	Contents3.1	
1-24	131-132	.	
1-25	133-144	Performance	
1-26	145-156	Tuning3.1.1	
1-27	156-157	.	
1-28	158-170	Startup3.1.2	
1-29	170-171	.	
1-30	172-182	Runtime3.2	
1-31	182-183	.	
1-32	184-195	Configuring	
1-33	196-202	raster	
1-34	203-213	support3.3	
1-35	213-214	.	
1-36	215-223	Creating	
1-37	224-231	spatial	
1-38	232-246	databases3.3.1	
1-39	246-247	.	
1-40	248-257	Spatially	
1-41	258-264	enable	
1-42	265-273	database	
1-43	274-279	using	
1-44	280-294	EXTENSION3.3.2	
1-45	294-295	.	
1-46	296-305	Spatially	
1-47	306-312	enable	
1-48	313-321	database	
1-49	322-329	without	
1-50	330-335	using	
1-51	336-345	EXTENSION	
1-52	346-347	(	
1-53	347-358	discouraged	
1-54	358-359	)	
1-55	359-364	3.3.3	
1-56	364-365	.	
1-57	366-372	Create	
1-58	373-374	a	
1-59	375-392	spatially-enabled	
1-60	393-401	database	
1-61	402-406	from	
1-62	407-408	a	
1-63	409-420	template3.4	
1-64	420-421	.	
1-65	422-431	Upgrading	
1-66	432-439	spatial	
1-67	440-454	databases3.4.1	
1-68	454-455	.	
1-69	456-460	Soft	
1-70	461-473	upgrade3.4.2	
1-71	473-474	.	
1-72	475-479	Hard	
1-73	480-490	upgrade3.1	
1-74	490-491	.	
1-75	491-492	 	
1-76	492-503	Performance	
1-77	504-515	Tuning3.1.1	
1-78	515-516	.	
1-79	517-529	Startup3.1.2	
1-80	529-530	.	
1-81	531-544	RuntimeTuning	
1-82	545-548	for	
1-83	549-556	PostGIS	
1-84	557-568	performance	
1-85	569-571	is	
1-86	572-576	much	
1-87	577-581	like	
1-88	582-588	tuning	
1-89	589-592	for	
1-90	593-596	any	
1-91	597-607	PostgreSQL	
1-92	608-616	workload	
1-93	616-617	.	
1-94	618-621	The	
1-95	622-626	only	
1-96	627-637	additional	
1-97	638-651	consideration	
1-98	652-654	is	
1-99	655-659	that	
1-100	660-670	geometries	
1-101	671-674	and	
1-102	675-682	rasters	
1-103	683-686	are	
1-104	687-694	usually	
1-105	695-700	large	
1-106	700-701	,	

#Text=so memory-related optimizations generally have more of an impact on PostGIS than other types of PostgreSQL queries.For general details about optimizing PostgreSQL, refer to Tuning your PostgreSQL Server.For PostgreSQL 9.4+ configuration can be set at the server level without touching postgresql.conf or postgresql.auto.conf by using the ALTER SYSTEM command.ALTER SYSTEM SET work_mem = '256MB'; -- this forces non-startup configs to take effect for new connections SELECT pg_reload_conf();
2-1	702-704	so	
2-2	705-719	memory-related	
2-3	720-733	optimizations	
2-4	734-743	generally	
2-5	744-748	have	
2-6	749-753	more	
2-7	754-756	of	
2-8	757-759	an	
2-9	760-766	impact	
2-10	767-769	on	
2-11	770-777	PostGIS	
2-12	778-782	than	
2-13	783-788	other	
2-14	789-794	types	
2-15	795-797	of	
2-16	798-808	PostgreSQL	
2-17	809-820	queries.For	
2-18	821-828	general	
2-19	829-836	details	
2-20	837-842	about	
2-21	843-853	optimizing	
2-22	854-864	PostgreSQL	
2-23	864-865	,	
2-24	866-871	refer	
2-25	872-874	to	
2-26	875-881	Tuning	
2-27	882-886	your	
2-28	887-897	PostgreSQL	
2-29	898-908	Server.For	
2-30	909-919	PostgreSQL	
2-31	920-923	9.4	
2-32	923-924	+	
2-33	925-938	configuration	
2-34	939-942	can	
2-35	943-945	be	
2-36	946-949	set	
2-37	950-952	at	
2-38	953-956	the	
2-39	957-963	server	
2-40	964-969	level	
2-41	970-977	without	
2-42	978-986	touching	
2-43	987-1002	postgresql.conf	
2-44	1003-1005	or	
2-45	1006-1026	postgresql.auto.conf	
2-46	1027-1029	by	
2-47	1030-1035	using	
2-48	1036-1039	the	
2-49	1040-1045	ALTER	
2-50	1046-1052	SYSTEM	
2-51	1053-1066	command.ALTER	
2-52	1067-1073	SYSTEM	
2-53	1074-1077	SET	
2-54	1078-1086	work_mem	
2-55	1087-1088	=	
2-56	1089-1090	'	
2-57	1090-1095	256MB	
2-58	1095-1096	'	
2-59	1096-1097	;	
2-60	1098-1099	-	
2-61	1099-1100	-	
2-62	1101-1105	this	
2-63	1106-1112	forces	
2-64	1113-1124	non-startup	
2-65	1125-1132	configs	
2-66	1133-1135	to	
2-67	1136-1140	take	
2-68	1141-1147	effect	
2-69	1148-1151	for	
2-70	1152-1155	new	
2-71	1156-1167	connections	
2-72	1168-1174	SELECT	
2-73	1175-1189	pg_reload_conf	
2-74	1189-1190	(	
2-75	1190-1191	)	
2-76	1191-1192	;	

#Text=-- show current setting value -- use SHOW ALL to see all settings SHOW work_mem;In addition to the Postgres settings, PostGIS has some custom settings which are listed in Section 5.23, “Grand Unified Custom Variables (GUCs)”.3.1.1. Startup
3-1	1193-1194	-	
3-2	1194-1195	-	
3-3	1196-1200	show	
3-4	1201-1208	current	
3-5	1209-1216	setting	
3-6	1217-1222	value	
3-7	1223-1224	-	
3-8	1224-1225	-	
3-9	1226-1229	use	
3-10	1230-1234	SHOW	
3-11	1235-1238	ALL	
3-12	1239-1241	to	
3-13	1242-1245	see	
3-14	1246-1249	all	
3-15	1250-1258	settings	
3-16	1259-1263	SHOW	
3-17	1264-1272	work_mem	
3-18	1272-1273	;	
3-19	1273-1275	In	
3-20	1276-1284	addition	
3-21	1285-1287	to	
3-22	1288-1291	the	
3-23	1292-1300	Postgres	
3-24	1301-1309	settings	
3-25	1309-1310	,	
3-26	1311-1318	PostGIS	
3-27	1319-1322	has	
3-28	1323-1327	some	
3-29	1328-1334	custom	
3-30	1335-1343	settings	
3-31	1344-1349	which	
3-32	1350-1353	are	
3-33	1354-1360	listed	
3-34	1361-1363	in	
3-35	1364-1371	Section	
3-36	1371-1372	 	
3-37	1372-1376	5.23	
3-38	1376-1377	,	
3-39	1378-1379	“	
3-40	1379-1384	Grand	
3-41	1385-1392	Unified	
3-42	1393-1399	Custom	
3-43	1400-1409	Variables	
3-44	1410-1411	(	
3-45	1411-1415	GUCs	
3-46	1415-1416	)	
3-47	1416-1417	”	
3-48	1417-1423	.3.1.1	
3-49	1423-1424	.	
3-50	1424-1425	 	
3-51	1425-1432	Startup	

#Text=These settings are configured in postgresql.conf: constraint_exclusion Default: partition This is generally used for table partitioning. The default for this is set to "partition" which is ideal for PostgreSQL 8.4 and above since it will force the planner to only analyze tables for constraint consideration if they are in an inherited hierarchy
4-1	1433-1438	These	
4-2	1439-1447	settings	
4-3	1448-1451	are	
4-4	1452-1462	configured	
4-5	1463-1465	in	
4-6	1466-1481	postgresql.conf	
4-7	1481-1482	:	
4-8	1483-1503	constraint_exclusion	
4-9	1504-1511	Default	
4-10	1511-1512	:	
4-11	1513-1522	partition	
4-12	1523-1527	This	
4-13	1528-1530	is	
4-14	1531-1540	generally	
4-15	1541-1545	used	
4-16	1546-1549	for	
4-17	1550-1555	table	
4-18	1556-1568	partitioning	
4-19	1568-1569	.	
4-20	1570-1573	The	
4-21	1574-1581	default	
4-22	1582-1585	for	
4-23	1586-1590	this	
4-24	1591-1593	is	
4-25	1594-1597	set	
4-26	1598-1600	to	
4-27	1601-1602	"	
4-28	1602-1611	partition	
4-29	1611-1612	"	
4-30	1613-1618	which	
4-31	1619-1621	is	
4-32	1622-1627	ideal	
4-33	1628-1631	for	
4-34	1632-1642	PostgreSQL	
4-35	1643-1646	8.4	
4-36	1647-1650	and	
4-37	1651-1656	above	
4-38	1657-1662	since	
4-39	1663-1665	it	
4-40	1666-1670	will	
4-41	1671-1676	force	
4-42	1677-1680	the	
4-43	1681-1688	planner	
4-44	1689-1691	to	
4-45	1692-1696	only	
4-46	1697-1704	analyze	
4-47	1705-1711	tables	
4-48	1712-1715	for	
4-49	1716-1726	constraint	
4-50	1727-1740	consideration	
4-51	1741-1743	if	
4-52	1744-1748	they	
4-53	1749-1752	are	
4-54	1753-1755	in	
4-55	1756-1758	an	
4-56	1759-1768	inherited	
4-57	1769-1778	hierarchy	

#Text=and not pay the planner penalty otherwise. shared_buffers Default: ~128MB in PostgreSQL 9.6 Set to about 25% to 40% of available RAM. On windows you may not be able to set as high. max_worker_processes
5-1	1779-1782	and	
5-2	1783-1786	not	
5-3	1787-1790	pay	
5-4	1791-1794	the	
5-5	1795-1802	planner	
5-6	1803-1810	penalty	
5-7	1811-1820	otherwise	
5-8	1820-1821	.	
5-9	1822-1836	shared_buffers	
5-10	1837-1844	Default	
5-11	1844-1845	:	
5-12	1846-1847	~	
5-13	1847-1852	128MB	
5-14	1853-1855	in	
5-15	1856-1866	PostgreSQL	
5-16	1867-1870	9.6	
5-17	1871-1874	Set	
5-18	1875-1877	to	
5-19	1878-1883	about	
5-20	1884-1887	25%	
5-21	1888-1890	to	
5-22	1891-1894	40%	
5-23	1895-1897	of	
5-24	1898-1907	available	
5-25	1908-1911	RAM	
5-26	1911-1912	.	
5-27	1913-1915	On	
5-28	1916-1923	windows	
5-29	1924-1927	you	
5-30	1928-1931	may	
5-31	1932-1935	not	
5-32	1936-1938	be	
5-33	1939-1943	able	
5-34	1944-1946	to	
5-35	1947-1950	set	
5-36	1951-1953	as	
5-37	1954-1958	high	
5-38	1958-1959	.	
5-39	1960-1980	max_worker_processes	

#Text=This setting is only available for PostgreSQL 9.4+. For PostgreSQL 9.6+ this setting has additional importance in that it controls the max number of processes you can have for parallel queries. Default: 8 Sets the maximum number of background processes that the system can support. This parameter can only be set at
6-1	1981-1985	This	
6-2	1986-1993	setting	
6-3	1994-1996	is	
6-4	1997-2001	only	
6-5	2002-2011	available	
6-6	2012-2015	for	
6-7	2016-2026	PostgreSQL	
6-8	2027-2030	9.4	
6-9	2030-2031	+	
6-10	2031-2032	.	
6-11	2033-2036	For	
6-12	2037-2047	PostgreSQL	
6-13	2048-2051	9.6	
6-14	2051-2052	+	
6-15	2053-2057	this	
6-16	2058-2065	setting	
6-17	2066-2069	has	
6-18	2070-2080	additional	
6-19	2081-2091	importance	
6-20	2092-2094	in	
6-21	2095-2099	that	
6-22	2100-2102	it	
6-23	2103-2111	controls	
6-24	2112-2115	the	
6-25	2116-2119	max	
6-26	2120-2126	number	
6-27	2127-2129	of	
6-28	2130-2139	processes	
6-29	2140-2143	you	
6-30	2144-2147	can	
6-31	2148-2152	have	
6-32	2153-2156	for	
6-33	2157-2165	parallel	
6-34	2166-2173	queries	
6-35	2173-2174	.	
6-36	2175-2182	Default	
6-37	2182-2183	:	
6-38	2184-2185	8	
6-39	2186-2190	Sets	
6-40	2191-2194	the	
6-41	2195-2202	maximum	
6-42	2203-2209	number	
6-43	2210-2212	of	
6-44	2213-2223	background	
6-45	2224-2233	processes	
6-46	2234-2238	that	
6-47	2239-2242	the	
6-48	2243-2249	system	
6-49	2250-2253	can	
6-50	2254-2261	support	
6-51	2261-2262	.	
6-52	2263-2267	This	
6-53	2268-2277	parameter	
6-54	2278-2281	can	
6-55	2282-2286	only	
6-56	2287-2289	be	
6-57	2290-2293	set	
6-58	2294-2296	at	

#Text=server start. 3.1.2. Runtime work_mem - sets the size of memory used for sort operations and complex queries Default: 1-4MB Adjust up for large dbs, complex queries, lots of RAM
7-1	2297-2303	server	
7-2	2304-2309	start	
7-3	2309-2310	.	
7-4	2311-2316	3.1.2	
7-5	2316-2317	.	
7-6	2317-2318	 	
7-7	2318-2325	Runtime	
7-8	2326-2334	work_mem	
7-9	2335-2336	-	
7-10	2337-2341	sets	
7-11	2342-2345	the	
7-12	2346-2350	size	
7-13	2351-2353	of	
7-14	2354-2360	memory	
7-15	2361-2365	used	
7-16	2366-2369	for	
7-17	2370-2374	sort	
7-18	2375-2385	operations	
7-19	2386-2389	and	
7-20	2390-2397	complex	
7-21	2398-2405	queries	
7-22	2406-2413	Default	
7-23	2413-2414	:	
7-24	2415-2416	1	
7-25	2416-2417	-	
7-26	2417-2420	4MB	
7-27	2421-2427	Adjust	
7-28	2428-2430	up	
7-29	2431-2434	for	
7-30	2435-2440	large	
7-31	2441-2444	dbs	
7-32	2444-2445	,	
7-33	2446-2453	complex	
7-34	2454-2461	queries	
7-35	2461-2462	,	
7-36	2463-2467	lots	
7-37	2468-2470	of	
7-38	2471-2474	RAM	

#Text=Adjust down for many concurrent users or low RAM. If you have lots of RAM and few developers: SET work_mem TO '256MB'; maintenance_work_mem - the memory size used for VACUUM, CREATE INDEX, etc. Default: 16-64MB
8-1	2475-2481	Adjust	
8-2	2482-2486	down	
8-3	2487-2490	for	
8-4	2491-2495	many	
8-5	2496-2506	concurrent	
8-6	2507-2512	users	
8-7	2513-2515	or	
8-8	2516-2519	low	
8-9	2520-2523	RAM	
8-10	2523-2524	.	
8-11	2525-2527	If	
8-12	2528-2531	you	
8-13	2532-2536	have	
8-14	2537-2541	lots	
8-15	2542-2544	of	
8-16	2545-2548	RAM	
8-17	2549-2552	and	
8-18	2553-2556	few	
8-19	2557-2567	developers	
8-20	2567-2568	:	
8-21	2569-2572	SET	
8-22	2573-2581	work_mem	
8-23	2582-2584	TO	
8-24	2585-2586	'	
8-25	2586-2591	256MB	
8-26	2591-2592	'	
8-27	2592-2593	;	
8-28	2594-2614	maintenance_work_mem	
8-29	2615-2616	-	
8-30	2617-2620	the	
8-31	2621-2627	memory	
8-32	2628-2632	size	
8-33	2633-2637	used	
8-34	2638-2641	for	
8-35	2642-2648	VACUUM	
8-36	2648-2649	,	
8-37	2650-2656	CREATE	
8-38	2657-2662	INDEX	
8-39	2662-2663	,	
8-40	2664-2667	etc	
8-41	2667-2668	.	
8-42	2669-2676	Default	
8-43	2676-2677	:	
8-44	2678-2680	16	
8-45	2680-2681	-	
8-46	2681-2685	64MB	

#Text=Generally too low - ties up I/O, locks objects while swapping memory Recommend 32MB to 1GB on production servers w/lots of RAM, but depends on the # of concurrent users. If you have lots of RAM and few developers: SET maintenance_work_mem TO '1GB';
9-1	2686-2695	Generally	
9-2	2696-2699	too	
9-3	2700-2703	low	
9-4	2704-2705	-	
9-5	2706-2710	ties	
9-6	2711-2713	up	
9-7	2714-2715	I	
9-8	2715-2716	/	
9-9	2716-2717	O	
9-10	2717-2718	,	
9-11	2719-2724	locks	
9-12	2725-2732	objects	
9-13	2733-2738	while	
9-14	2739-2747	swapping	
9-15	2748-2754	memory	
9-16	2755-2764	Recommend	
9-17	2765-2769	32MB	
9-18	2770-2772	to	
9-19	2773-2776	1GB	
9-20	2777-2779	on	
9-21	2780-2790	production	
9-22	2791-2798	servers	
9-23	2799-2800	w	
9-24	2800-2801	/	
9-25	2801-2805	lots	
9-26	2806-2808	of	
9-27	2809-2812	RAM	
9-28	2812-2813	,	
9-29	2814-2817	but	
9-30	2818-2825	depends	
9-31	2826-2828	on	
9-32	2829-2832	the	
9-33	2833-2834	#	
9-34	2835-2837	of	
9-35	2838-2848	concurrent	
9-36	2849-2854	users	
9-37	2854-2855	.	
9-38	2856-2858	If	
9-39	2859-2862	you	
9-40	2863-2867	have	
9-41	2868-2872	lots	
9-42	2873-2875	of	
9-43	2876-2879	RAM	
9-44	2880-2883	and	
9-45	2884-2887	few	
9-46	2888-2898	developers	
9-47	2898-2899	:	
9-48	2900-2903	SET	
9-49	2904-2924	maintenance_work_mem	
9-50	2925-2927	TO	
9-51	2928-2929	'	
9-52	2929-2932	1GB	
9-53	2932-2933	'	
9-54	2933-2934	;	

#Text=max_parallel_workers_per_gather This setting is only available for PostgreSQL 9.6+ and will only affect PostGIS 2.3+, since only PostGIS 2.3+ supports parallel queries. If set to higher than 0, then some queries such as those involving relation functions like ST_Intersects can use multiple processes and can run
10-1	2935-2966	max_parallel_workers_per_gather	
10-2	2967-2971	This	
10-3	2972-2979	setting	
10-4	2980-2982	is	
10-5	2983-2987	only	
10-6	2988-2997	available	
10-7	2998-3001	for	
10-8	3002-3012	PostgreSQL	
10-9	3013-3016	9.6	
10-10	3016-3017	+	
10-11	3018-3021	and	
10-12	3022-3026	will	
10-13	3027-3031	only	
10-14	3032-3038	affect	
10-15	3039-3046	PostGIS	
10-16	3047-3050	2.3	
10-17	3050-3051	+	
10-18	3051-3052	,	
10-19	3053-3058	since	
10-20	3059-3063	only	
10-21	3064-3071	PostGIS	
10-22	3072-3075	2.3	
10-23	3075-3076	+	
10-24	3077-3085	supports	
10-25	3086-3094	parallel	
10-26	3095-3102	queries	
10-27	3102-3103	.	
10-28	3104-3106	If	
10-29	3107-3110	set	
10-30	3111-3113	to	
10-31	3114-3120	higher	
10-32	3121-3125	than	
10-33	3126-3127	0	
10-34	3127-3128	,	
10-35	3129-3133	then	
10-36	3134-3138	some	
10-37	3139-3146	queries	
10-38	3147-3151	such	
10-39	3152-3154	as	
10-40	3155-3160	those	
10-41	3161-3170	involving	
10-42	3171-3179	relation	
10-43	3180-3189	functions	
10-44	3190-3194	like	
10-45	3195-3208	ST_Intersects	
10-46	3209-3212	can	
10-47	3213-3216	use	
10-48	3217-3225	multiple	
10-49	3226-3235	processes	
10-50	3236-3239	and	
10-51	3240-3243	can	
10-52	3244-3247	run	

#Text=more than twice as fast when doing so. If you have a lot of processors to spare, you should change the value of this to as many processors as you have. Also make sure to bump up max_worker_processes to at least as high as this number. Default: 0 Sets the maximum number of workers that can be started
11-1	3248-3252	more	
11-2	3253-3257	than	
11-3	3258-3263	twice	
11-4	3264-3266	as	
11-5	3267-3271	fast	
11-6	3272-3276	when	
11-7	3277-3282	doing	
11-8	3283-3285	so	
11-9	3285-3286	.	
11-10	3287-3289	If	
11-11	3290-3293	you	
11-12	3294-3298	have	
11-13	3299-3300	a	
11-14	3301-3304	lot	
11-15	3305-3307	of	
11-16	3308-3318	processors	
11-17	3319-3321	to	
11-18	3322-3327	spare	
11-19	3327-3328	,	
11-20	3329-3332	you	
11-21	3333-3339	should	
11-22	3340-3346	change	
11-23	3347-3350	the	
11-24	3351-3356	value	
11-25	3357-3359	of	
11-26	3360-3364	this	
11-27	3365-3367	to	
11-28	3368-3370	as	
11-29	3371-3375	many	
11-30	3376-3386	processors	
11-31	3387-3389	as	
11-32	3390-3393	you	
11-33	3394-3398	have	
11-34	3398-3399	.	
11-35	3400-3404	Also	
11-36	3405-3409	make	
11-37	3410-3414	sure	
11-38	3415-3417	to	
11-39	3418-3422	bump	
11-40	3423-3425	up	
11-41	3426-3446	max_worker_processes	
11-42	3447-3449	to	
11-43	3450-3452	at	
11-44	3453-3458	least	
11-45	3459-3461	as	
11-46	3462-3466	high	
11-47	3467-3469	as	
11-48	3470-3474	this	
11-49	3475-3481	number	
11-50	3481-3482	.	
11-51	3483-3490	Default	
11-52	3490-3491	:	
11-53	3492-3493	0	
11-54	3494-3498	Sets	
11-55	3499-3502	the	
11-56	3503-3510	maximum	
11-57	3511-3517	number	
11-58	3518-3520	of	
11-59	3521-3528	workers	
11-60	3529-3533	that	
11-61	3534-3537	can	
11-62	3538-3540	be	
11-63	3541-3548	started	

#Text=by a single Gather node. Parallel workers are taken from the pool of processes established by max_worker_processes. Note that the requested number of workers may not actually be available at run time. If this occurs, the plan will run with fewer workers than expected, which may
12-1	3549-3551	by	
12-2	3552-3553	a	
12-3	3554-3560	single	
12-4	3561-3567	Gather	
12-5	3568-3572	node	
12-6	3572-3573	.	
12-7	3574-3582	Parallel	
12-8	3583-3590	workers	
12-9	3591-3594	are	
12-10	3595-3600	taken	
12-11	3601-3605	from	
12-12	3606-3609	the	
12-13	3610-3614	pool	
12-14	3615-3617	of	
12-15	3618-3627	processes	
12-16	3628-3639	established	
12-17	3640-3642	by	
12-18	3643-3663	max_worker_processes	
12-19	3663-3664	.	
12-20	3665-3669	Note	
12-21	3670-3674	that	
12-22	3675-3678	the	
12-23	3679-3688	requested	
12-24	3689-3695	number	
12-25	3696-3698	of	
12-26	3699-3706	workers	
12-27	3707-3710	may	
12-28	3711-3714	not	
12-29	3715-3723	actually	
12-30	3724-3726	be	
12-31	3727-3736	available	
12-32	3737-3739	at	
12-33	3740-3743	run	
12-34	3744-3748	time	
12-35	3748-3749	.	
12-36	3750-3752	If	
12-37	3753-3757	this	
12-38	3758-3764	occurs	
12-39	3764-3765	,	
12-40	3766-3769	the	
12-41	3770-3774	plan	
12-42	3775-3779	will	
12-43	3780-3783	run	
12-44	3784-3788	with	
12-45	3789-3794	fewer	
12-46	3795-3802	workers	
12-47	3803-3807	than	
12-48	3808-3816	expected	
12-49	3816-3817	,	
12-50	3818-3823	which	
12-51	3824-3827	may	

#Text=be inefficient. Setting this value to 0, which is the default, disables parallel query execution. 3.2. Configuring raster support If you enabled raster support you may want to read below how to properly configure it.
13-1	3828-3830	be	
13-2	3831-3842	inefficient	
13-3	3842-3843	.	
13-4	3844-3851	Setting	
13-5	3852-3856	this	
13-6	3857-3862	value	
13-7	3863-3865	to	
13-8	3866-3867	0	
13-9	3867-3868	,	
13-10	3869-3874	which	
13-11	3875-3877	is	
13-12	3878-3881	the	
13-13	3882-3889	default	
13-14	3889-3890	,	
13-15	3891-3899	disables	
13-16	3900-3908	parallel	
13-17	3909-3914	query	
13-18	3915-3924	execution	
13-19	3924-3925	.	
13-20	3926-3929	3.2	
13-21	3929-3930	.	
13-22	3930-3931	 	
13-23	3931-3942	Configuring	
13-24	3943-3949	raster	
13-25	3950-3957	support	
13-26	3958-3960	If	
13-27	3961-3964	you	
13-28	3965-3972	enabled	
13-29	3973-3979	raster	
13-30	3980-3987	support	
13-31	3988-3991	you	
13-32	3992-3995	may	
13-33	3996-4000	want	
13-34	4001-4003	to	
13-35	4004-4008	read	
13-36	4009-4014	below	
13-37	4015-4018	how	
13-38	4019-4021	to	
13-39	4022-4030	properly	
13-40	4031-4040	configure	
13-41	4041-4043	it	
13-42	4043-4044	.	

#Text=As of PostGIS 2.1.3, out-of-db rasters and all raster drivers are disabled by default. In order to re-enable these, you need to set the following environment variables
14-1	4045-4047	As	
14-2	4048-4050	of	
14-3	4051-4058	PostGIS	
14-4	4059-4064	2.1.3	
14-5	4064-4065	,	
14-6	4066-4075	out-of-db	
14-7	4076-4083	rasters	
14-8	4084-4087	and	
14-9	4088-4091	all	
14-10	4092-4098	raster	
14-11	4099-4106	drivers	
14-12	4107-4110	are	
14-13	4111-4119	disabled	
14-14	4120-4122	by	
14-15	4123-4130	default	
14-16	4130-4131	.	
14-17	4132-4134	In	
14-18	4135-4140	order	
14-19	4141-4143	to	
14-20	4144-4153	re-enable	
14-21	4154-4159	these	
14-22	4159-4160	,	
14-23	4161-4164	you	
14-24	4165-4169	need	
14-25	4170-4172	to	
14-26	4173-4176	set	
14-27	4177-4180	the	
14-28	4181-4190	following	
14-29	4191-4202	environment	
14-30	4203-4212	variables	

#Text=POSTGIS_GDAL_ENABLED_DRIVERS and POSTGIS_ENABLE_OUTDB_RASTERS in the server environment. For PostGIS 2.2, you can use the more cross-platform approach of setting the corresponding Section 5.23, “Grand Unified Custom Variables (GUCs)”.If you want to enable offline raster:POSTGIS_ENABLE_OUTDB_RASTERS=1Any other setting or no setting at all will disable out of db rasters.In order to enable all GDAL drivers available in your GDAL install, set this environment variable as followsPOSTGIS_GDAL_ENABLED_DRIVERS=ENABLE_ALLIf you want to only enable specific drivers, set your environment variable as follows:POSTGIS_GDAL_ENABLED_DRIVERS="GTiff PNG JPEG GIF XYZ"If you are on windows, do not quote the driver listSetting environment variables varies depending on OS. For PostgreSQL installed on Ubuntu or Debian via apt-postgresql, the preferred way is to
15-1	4213-4241	POSTGIS_GDAL_ENABLED_DRIVERS	
15-2	4242-4245	and	
15-3	4246-4274	POSTGIS_ENABLE_OUTDB_RASTERS	
15-4	4275-4277	in	
15-5	4278-4281	the	
15-6	4282-4288	server	
15-7	4289-4300	environment	
15-8	4300-4301	.	
15-9	4302-4305	For	
15-10	4306-4313	PostGIS	
15-11	4314-4317	2.2	
15-12	4317-4318	,	
15-13	4319-4322	you	
15-14	4323-4326	can	
15-15	4327-4330	use	
15-16	4331-4334	the	
15-17	4335-4339	more	
15-18	4340-4354	cross-platform	
15-19	4355-4363	approach	
15-20	4364-4366	of	
15-21	4367-4374	setting	
15-22	4375-4378	the	
15-23	4379-4392	corresponding	
15-24	4393-4400	Section	
15-25	4400-4401	 	
15-26	4401-4405	5.23	
15-27	4405-4406	,	
15-28	4407-4408	“	
15-29	4408-4413	Grand	
15-30	4414-4421	Unified	
15-31	4422-4428	Custom	
15-32	4429-4438	Variables	
15-33	4439-4440	(	
15-34	4440-4444	GUCs	
15-35	4444-4445	)	
15-36	4445-4446	”	
15-37	4446-4447	.	
15-38	4447-4449	If	
15-39	4450-4453	you	
15-40	4454-4458	want	
15-41	4459-4461	to	
15-42	4462-4468	enable	
15-43	4469-4476	offline	
15-44	4477-4483	raster	
15-45	4483-4484	:	
15-46	4484-4512	POSTGIS_ENABLE_OUTDB_RASTERS	
15-47	4512-4513	=	
15-48	4513-4517	1Any	
15-49	4518-4523	other	
15-50	4524-4531	setting	
15-51	4532-4534	or	
15-52	4535-4537	no	
15-53	4538-4545	setting	
15-54	4546-4548	at	
15-55	4549-4552	all	
15-56	4553-4557	will	
15-57	4558-4565	disable	
15-58	4566-4569	out	
15-59	4570-4572	of	
15-60	4573-4575	db	
15-61	4576-4586	rasters.In	
15-62	4587-4592	order	
15-63	4593-4595	to	
15-64	4596-4602	enable	
15-65	4603-4606	all	
15-66	4607-4611	GDAL	
15-67	4612-4619	drivers	
15-68	4620-4629	available	
15-69	4630-4632	in	
15-70	4633-4637	your	
15-71	4638-4642	GDAL	
15-72	4643-4650	install	
15-73	4650-4651	,	
15-74	4652-4655	set	
15-75	4656-4660	this	
15-76	4661-4672	environment	
15-77	4673-4681	variable	
15-78	4682-4684	as	
15-79	4685-4720	followsPOSTGIS_GDAL_ENABLED_DRIVERS	
15-80	4720-4721	=	
15-81	4721-4733	ENABLE_ALLIf	
15-82	4734-4737	you	
15-83	4738-4742	want	
15-84	4743-4745	to	
15-85	4746-4750	only	
15-86	4751-4757	enable	
15-87	4758-4766	specific	
15-88	4767-4774	drivers	
15-89	4774-4775	,	
15-90	4776-4779	set	
15-91	4780-4784	your	
15-92	4785-4796	environment	
15-93	4797-4805	variable	
15-94	4806-4808	as	
15-95	4809-4816	follows	
15-96	4816-4817	:	
15-97	4817-4845	POSTGIS_GDAL_ENABLED_DRIVERS	
15-98	4845-4846	=	
15-99	4846-4847	"	
15-100	4847-4852	GTiff	
15-101	4853-4856	PNG	
15-102	4857-4861	JPEG	
15-103	4862-4865	GIF	
15-104	4866-4872	XYZ"If	
15-105	4873-4876	you	
15-106	4877-4880	are	
15-107	4881-4883	on	
15-108	4884-4891	windows	
15-109	4891-4892	,	
15-110	4893-4895	do	
15-111	4896-4899	not	
15-112	4900-4905	quote	
15-113	4906-4909	the	
15-114	4910-4916	driver	
15-115	4917-4928	listSetting	
15-116	4929-4940	environment	
15-117	4941-4950	variables	
15-118	4951-4957	varies	
15-119	4958-4967	depending	
15-120	4968-4970	on	
15-121	4971-4973	OS	
15-122	4973-4974	.	
15-123	4975-4978	For	
15-124	4979-4989	PostgreSQL	
15-125	4990-4999	installed	
15-126	5000-5002	on	
15-127	5003-5009	Ubuntu	
15-128	5010-5012	or	
15-129	5013-5019	Debian	
15-130	5020-5023	via	
15-131	5024-5038	apt-postgresql	
15-132	5038-5039	,	
15-133	5040-5043	the	
15-134	5044-5053	preferred	
15-135	5054-5057	way	
15-136	5058-5060	is	
15-137	5061-5063	to	

#Text=edit /etc/postgresql/10/main/environment where 10 refers to version of PostgreSQL and main refers to the cluster.On windows, if you are running as a service, you can set via System variables which for Windows 7 you can get to by right-clicking on Computer->Properties Advanced System Settings or in explorer navigating to Control Panel\\All Control Panel Items\\System.
16-1	5064-5068	edit	
16-2	5069-5070	/	
16-3	5070-5073	etc	
16-4	5073-5074	/	
16-5	5074-5084	postgresql	
16-6	5084-5085	/	
16-7	5085-5087	10	
16-8	5087-5088	/	
16-9	5088-5092	main	
16-10	5092-5093	/	
16-11	5093-5104	environment	
16-12	5105-5110	where	
16-13	5111-5113	10	
16-14	5114-5120	refers	
16-15	5121-5123	to	
16-16	5124-5131	version	
16-17	5132-5134	of	
16-18	5135-5145	PostgreSQL	
16-19	5146-5149	and	
16-20	5150-5154	main	
16-21	5155-5161	refers	
16-22	5162-5164	to	
16-23	5165-5168	the	
16-24	5169-5179	cluster.On	
16-25	5180-5187	windows	
16-26	5187-5188	,	
16-27	5189-5191	if	
16-28	5192-5195	you	
16-29	5196-5199	are	
16-30	5200-5207	running	
16-31	5208-5210	as	
16-32	5211-5212	a	
16-33	5213-5220	service	
16-34	5220-5221	,	
16-35	5222-5225	you	
16-36	5226-5229	can	
16-37	5230-5233	set	
16-38	5234-5237	via	
16-39	5238-5244	System	
16-40	5245-5254	variables	
16-41	5255-5260	which	
16-42	5261-5264	for	
16-43	5265-5272	Windows	
16-44	5273-5274	7	
16-45	5275-5278	you	
16-46	5279-5282	can	
16-47	5283-5286	get	
16-48	5287-5289	to	
16-49	5290-5292	by	
16-50	5293-5307	right-clicking	
16-51	5308-5310	on	
16-52	5311-5319	Computer	
16-53	5319-5320	-	
16-54	5320-5321	>	
16-55	5321-5331	Properties	
16-56	5332-5340	Advanced	
16-57	5341-5347	System	
16-58	5348-5356	Settings	
16-59	5357-5359	or	
16-60	5360-5362	in	
16-61	5363-5371	explorer	
16-62	5372-5382	navigating	
16-63	5383-5385	to	
16-64	5386-5393	Control	
16-65	5394-5399	Panel	
16-66	5399-5400	\	
16-67	5400-5403	All	
16-68	5404-5411	Control	
16-69	5412-5417	Panel	
16-70	5418-5423	Items	
16-71	5423-5424	\	
16-72	5424-5430	System	
16-73	5430-5431	.	

#Text=Then clicking Advanced System Settings ->Advanced->Environment Variables and adding new system variables.After you set the environment variables, you'll need to restart your PostgreSQL service for the changes to take effect.3.3. Creating spatial databases3.3.1. Spatially enable database using EXTENSION3.3.2. Spatially enable database without using EXTENSION (discouraged)3.3.3. Create a spatially-enabled database from a template3.3.1. Spatially enable database using EXTENSION If you are using PostgreSQL 9.1+ and have compiled and installed the extensions/postgis modules, you can turn a database into a spatial one using the EXTENSION mechanism. Core postgis extension includes geometry, geography,
17-1	5432-5436	Then	
17-2	5437-5445	clicking	
17-3	5446-5454	Advanced	
17-4	5455-5461	System	
17-5	5462-5470	Settings	
17-6	5471-5472	-	
17-7	5472-5473	>	
17-8	5473-5481	Advanced	
17-9	5481-5482	-	
17-10	5482-5483	>	
17-11	5483-5494	Environment	
17-12	5495-5504	Variables	
17-13	5505-5508	and	
17-14	5509-5515	adding	
17-15	5516-5519	new	
17-16	5520-5526	system	
17-17	5527-5542	variables.After	
17-18	5543-5546	you	
17-19	5547-5550	set	
17-20	5551-5554	the	
17-21	5555-5566	environment	
17-22	5567-5576	variables	
17-23	5576-5577	,	
17-24	5578-5584	you'll	
17-25	5585-5589	need	
17-26	5590-5592	to	
17-27	5593-5600	restart	
17-28	5601-5605	your	
17-29	5606-5616	PostgreSQL	
17-30	5617-5624	service	
17-31	5625-5628	for	
17-32	5629-5632	the	
17-33	5633-5640	changes	
17-34	5641-5643	to	
17-35	5644-5648	take	
17-36	5649-5655	effect	
17-37	5655-5659	.3.3	
17-38	5659-5660	.	
17-39	5660-5661	 	
17-40	5661-5669	Creating	
17-41	5670-5677	spatial	
17-42	5678-5692	databases3.3.1	
17-43	5692-5693	.	
17-44	5694-5703	Spatially	
17-45	5704-5710	enable	
17-46	5711-5719	database	
17-47	5720-5725	using	
17-48	5726-5740	EXTENSION3.3.2	
17-49	5740-5741	.	
17-50	5742-5751	Spatially	
17-51	5752-5758	enable	
17-52	5759-5767	database	
17-53	5768-5775	without	
17-54	5776-5781	using	
17-55	5782-5791	EXTENSION	
17-56	5792-5793	(	
17-57	5793-5804	discouraged	
17-58	5804-5805	)	
17-59	5805-5810	3.3.3	
17-60	5810-5811	.	
17-61	5812-5818	Create	
17-62	5819-5820	a	
17-63	5821-5838	spatially-enabled	
17-64	5839-5847	database	
17-65	5848-5852	from	
17-66	5853-5854	a	
17-67	5855-5868	template3.3.1	
17-68	5868-5869	.	
17-69	5869-5870	 	
17-70	5870-5879	Spatially	
17-71	5880-5886	enable	
17-72	5887-5895	database	
17-73	5896-5901	using	
17-74	5902-5911	EXTENSION	
17-75	5912-5914	If	
17-76	5915-5918	you	
17-77	5919-5922	are	
17-78	5923-5928	using	
17-79	5929-5939	PostgreSQL	
17-80	5940-5943	9.1	
17-81	5943-5944	+	
17-82	5945-5948	and	
17-83	5949-5953	have	
17-84	5954-5962	compiled	
17-85	5963-5966	and	
17-86	5967-5976	installed	
17-87	5977-5980	the	
17-88	5981-5991	extensions	
17-89	5991-5992	/	
17-90	5992-5999	postgis	
17-91	6000-6007	modules	
17-92	6007-6008	,	
17-93	6009-6012	you	
17-94	6013-6016	can	
17-95	6017-6021	turn	
17-96	6022-6023	a	
17-97	6024-6032	database	
17-98	6033-6037	into	
17-99	6038-6039	a	
17-100	6040-6047	spatial	
17-101	6048-6051	one	
17-102	6052-6057	using	
17-103	6058-6061	the	
17-104	6062-6071	EXTENSION	
17-105	6072-6081	mechanism	
17-106	6081-6082	.	
17-107	6083-6087	Core	
17-108	6088-6095	postgis	
17-109	6096-6105	extension	
17-110	6106-6114	includes	
17-111	6115-6123	geometry	
17-112	6123-6124	,	
17-113	6125-6134	geography	
17-114	6134-6135	,	

#Text=spatial_ref_sys and all the functions and comments. Raster and topology are packaged as a separate extension. Run the following SQL snippet in the database you want to enable spatially: CREATE EXTENSION IF NOT EXISTS plpgsql;
18-1	6136-6151	spatial_ref_sys	
18-2	6152-6155	and	
18-3	6156-6159	all	
18-4	6160-6163	the	
18-5	6164-6173	functions	
18-6	6174-6177	and	
18-7	6178-6186	comments	
18-8	6186-6187	.	
18-9	6188-6194	Raster	
18-10	6195-6198	and	
18-11	6199-6207	topology	
18-12	6208-6211	are	
18-13	6212-6220	packaged	
18-14	6221-6223	as	
18-15	6224-6225	a	
18-16	6226-6234	separate	
18-17	6235-6244	extension	
18-18	6244-6245	.	
18-19	6246-6249	Run	
18-20	6250-6253	the	
18-21	6254-6263	following	
18-22	6264-6267	SQL	
18-23	6268-6275	snippet	
18-24	6276-6278	in	
18-25	6279-6282	the	
18-26	6283-6291	database	
18-27	6292-6295	you	
18-28	6296-6300	want	
18-29	6301-6303	to	
18-30	6304-6310	enable	
18-31	6311-6320	spatially	
18-32	6320-6321	:	
18-33	6322-6328	CREATE	
18-34	6329-6338	EXTENSION	
18-35	6339-6341	IF	
18-36	6342-6345	NOT	
18-37	6346-6352	EXISTS	
18-38	6353-6360	plpgsql	
18-39	6360-6361	;	

#Text=CREATE EXTENSION postgis; CREATE EXTENSION postgis_raster; -- OPTIONAL CREATE EXTENSION postgis_topology; -- OPTIONAL 3.3.2. Spatially enable database without using EXTENSION (discouraged)This is generally only needed if you cannot or don't
19-1	6362-6368	CREATE	
19-2	6369-6378	EXTENSION	
19-3	6379-6386	postgis	
19-4	6386-6387	;	
19-5	6388-6394	CREATE	
19-6	6395-6404	EXTENSION	
19-7	6405-6419	postgis_raster	
19-8	6419-6420	;	
19-9	6421-6422	-	
19-10	6422-6423	-	
19-11	6424-6432	OPTIONAL	
19-12	6433-6439	CREATE	
19-13	6440-6449	EXTENSION	
19-14	6450-6466	postgis_topology	
19-15	6466-6467	;	
19-16	6468-6469	-	
19-17	6469-6470	-	
19-18	6471-6479	OPTIONAL	
19-19	6480-6485	3.3.2	
19-20	6485-6486	.	
19-21	6486-6487	 	
19-22	6487-6496	Spatially	
19-23	6497-6503	enable	
19-24	6504-6512	database	
19-25	6513-6520	without	
19-26	6521-6526	using	
19-27	6527-6536	EXTENSION	
19-28	6537-6538	(	
19-29	6538-6549	discouraged	
19-30	6549-6550	)	
19-31	6550-6554	This	
19-32	6555-6557	is	
19-33	6558-6567	generally	
19-34	6568-6572	only	
19-35	6573-6579	needed	
19-36	6580-6582	if	
19-37	6583-6586	you	
19-38	6587-6593	cannot	
19-39	6594-6596	or	
19-40	6597-6602	don't	

#Text=want to get PostGIS installed in the PostgreSQL extension directory (for example during testing, development or in a restricted environment). Adding PostGIS objects and function definitions into your database is done by loading the various sql files located in [prefix]/share/contrib as specified during the build phase.
20-1	6603-6607	want	
20-2	6608-6610	to	
20-3	6611-6614	get	
20-4	6615-6622	PostGIS	
20-5	6623-6632	installed	
20-6	6633-6635	in	
20-7	6636-6639	the	
20-8	6640-6650	PostgreSQL	
20-9	6651-6660	extension	
20-10	6661-6670	directory	
20-11	6671-6672	(	
20-12	6672-6675	for	
20-13	6676-6683	example	
20-14	6684-6690	during	
20-15	6691-6698	testing	
20-16	6698-6699	,	
20-17	6700-6711	development	
20-18	6712-6714	or	
20-19	6715-6717	in	
20-20	6718-6719	a	
20-21	6720-6730	restricted	
20-22	6731-6742	environment	
20-23	6742-6743	)	
20-24	6743-6744	.	
20-25	6745-6751	Adding	
20-26	6752-6759	PostGIS	
20-27	6760-6767	objects	
20-28	6768-6771	and	
20-29	6772-6780	function	
20-30	6781-6792	definitions	
20-31	6793-6797	into	
20-32	6798-6802	your	
20-33	6803-6811	database	
20-34	6812-6814	is	
20-35	6815-6819	done	
20-36	6820-6822	by	
20-37	6823-6830	loading	
20-38	6831-6834	the	
20-39	6835-6842	various	
20-40	6843-6846	sql	
20-41	6847-6852	files	
20-42	6853-6860	located	
20-43	6861-6863	in	
20-44	6864-6865	[	
20-45	6865-6871	prefix	
20-46	6871-6872	]	
20-47	6872-6873	/	
20-48	6873-6878	share	
20-49	6878-6879	/	
20-50	6879-6886	contrib	
20-51	6887-6889	as	
20-52	6890-6899	specified	
20-53	6900-6906	during	
20-54	6907-6910	the	
20-55	6911-6916	build	
20-56	6917-6922	phase	
20-57	6922-6923	.	

#Text=The core PostGIS objects (geometry and geography types, and their support functions) are in the postgis.sql script. Raster objects are in the rtpostgis.sql script. Topology objects are in the topology.sql script. For a complete set of EPSG coordinate system definition identifiers, you
21-1	6924-6927	The	
21-2	6928-6932	core	
21-3	6933-6940	PostGIS	
21-4	6941-6948	objects	
21-5	6949-6950	(	
21-6	6950-6958	geometry	
21-7	6959-6962	and	
21-8	6963-6972	geography	
21-9	6973-6978	types	
21-10	6978-6979	,	
21-11	6980-6983	and	
21-12	6984-6989	their	
21-13	6990-6997	support	
21-14	6998-7007	functions	
21-15	7007-7008	)	
21-16	7009-7012	are	
21-17	7013-7015	in	
21-18	7016-7019	the	
21-19	7020-7031	postgis.sql	
21-20	7032-7038	script	
21-21	7038-7039	.	
21-22	7040-7046	Raster	
21-23	7047-7054	objects	
21-24	7055-7058	are	
21-25	7059-7061	in	
21-26	7062-7065	the	
21-27	7066-7079	rtpostgis.sql	
21-28	7080-7086	script	
21-29	7086-7087	.	
21-30	7088-7096	Topology	
21-31	7097-7104	objects	
21-32	7105-7108	are	
21-33	7109-7111	in	
21-34	7112-7115	the	
21-35	7116-7128	topology.sql	
21-36	7129-7135	script	
21-37	7135-7136	.	
21-38	7137-7140	For	
21-39	7141-7142	a	
21-40	7143-7151	complete	
21-41	7152-7155	set	
21-42	7156-7158	of	
21-43	7159-7163	EPSG	
21-44	7164-7174	coordinate	
21-45	7175-7181	system	
21-46	7182-7192	definition	
21-47	7193-7204	identifiers	
21-48	7204-7205	,	
21-49	7206-7209	you	

#Text=can also load the spatial_ref_sys.sql definitions file and populate the spatial_ref_sys table. This will permit you to perform ST_Transform() operations on geometries. If you wish to add comments to the PostGIS functions, you can find them in the postgis_comments.sql script.
22-1	7210-7213	can	
22-2	7214-7218	also	
22-3	7219-7223	load	
22-4	7224-7227	the	
22-5	7228-7247	spatial_ref_sys.sql	
22-6	7248-7259	definitions	
22-7	7260-7264	file	
22-8	7265-7268	and	
22-9	7269-7277	populate	
22-10	7278-7281	the	
22-11	7282-7297	spatial_ref_sys	
22-12	7298-7303	table	
22-13	7303-7304	.	
22-14	7305-7309	This	
22-15	7310-7314	will	
22-16	7315-7321	permit	
22-17	7322-7325	you	
22-18	7326-7328	to	
22-19	7329-7336	perform	
22-20	7337-7349	ST_Transform	
22-21	7349-7350	(	
22-22	7350-7351	)	
22-23	7352-7362	operations	
22-24	7363-7365	on	
22-25	7366-7376	geometries	
22-26	7376-7377	.	
22-27	7378-7380	If	
22-28	7381-7384	you	
22-29	7385-7389	wish	
22-30	7390-7392	to	
22-31	7393-7396	add	
22-32	7397-7405	comments	
22-33	7406-7408	to	
22-34	7409-7412	the	
22-35	7413-7420	PostGIS	
22-36	7421-7430	functions	
22-37	7430-7431	,	
22-38	7432-7435	you	
22-39	7436-7439	can	
22-40	7440-7444	find	
22-41	7445-7449	them	
22-42	7450-7452	in	
22-43	7453-7456	the	
22-44	7457-7477	postgis_comments.sql	
22-45	7478-7484	script	
22-46	7484-7485	.	

#Text=Comments can be viewed by simply typing \\dd [function_name] from a psql terminal window. Run the following Shell commands in your terminal: DB=[yourdatabase] SCRIPTSDIR=`pg_config --sharedir`/contrib/postgis-3.1/
23-1	7486-7494	Comments	
23-2	7495-7498	can	
23-3	7499-7501	be	
23-4	7502-7508	viewed	
23-5	7509-7511	by	
23-6	7512-7518	simply	
23-7	7519-7525	typing	
23-8	7526-7527	\	
23-9	7527-7529	dd	
23-10	7530-7531	[	
23-11	7531-7544	function_name	
23-12	7544-7545	]	
23-13	7546-7550	from	
23-14	7551-7552	a	
23-15	7553-7557	psql	
23-16	7558-7566	terminal	
23-17	7567-7573	window	
23-18	7573-7574	.	
23-19	7575-7578	Run	
23-20	7579-7582	the	
23-21	7583-7592	following	
23-22	7593-7598	Shell	
23-23	7599-7607	commands	
23-24	7608-7610	in	
23-25	7611-7615	your	
23-26	7616-7624	terminal	
23-27	7624-7625	:	
23-28	7626-7628	DB	
23-29	7628-7629	=	
23-30	7629-7630	[	
23-31	7630-7642	yourdatabase	
23-32	7642-7643	]	
23-33	7644-7654	SCRIPTSDIR	
23-34	7654-7655	=	
23-35	7655-7656	`	
23-36	7656-7665	pg_config	
23-37	7666-7667	-	
23-38	7667-7668	-	
23-39	7668-7676	sharedir	
23-40	7676-7677	`	
23-41	7677-7678	/	
23-42	7678-7685	contrib	
23-43	7685-7686	/	
23-44	7686-7693	postgis	
23-45	7693-7694	-	
23-46	7694-7697	3.1	
23-47	7697-7698	/	

#Text=# Core objects psql -d ${DB} -f ${SCRIPTSDIR}/postgis.sql psql -d ${DB} -f ${SCRIPTSDIR}/spatial_ref_sys.sql
24-1	7699-7700	#	
24-2	7701-7705	Core	
24-3	7706-7713	objects	
24-4	7714-7718	psql	
24-5	7719-7720	-	
24-6	7720-7721	d	
24-7	7722-7723	$	
24-8	7723-7724	{	
24-9	7724-7726	DB	
24-10	7726-7727	}	
24-11	7728-7729	-	
24-12	7729-7730	f	
24-13	7731-7732	$	
24-14	7732-7733	{	
24-15	7733-7743	SCRIPTSDIR	
24-16	7743-7744	}	
24-17	7744-7745	/	
24-18	7745-7756	postgis.sql	
24-19	7757-7761	psql	
24-20	7762-7763	-	
24-21	7763-7764	d	
24-22	7765-7766	$	
24-23	7766-7767	{	
24-24	7767-7769	DB	
24-25	7769-7770	}	
24-26	7771-7772	-	
24-27	7772-7773	f	
24-28	7774-7775	$	
24-29	7775-7776	{	
24-30	7776-7786	SCRIPTSDIR	
24-31	7786-7787	}	
24-32	7787-7788	/	
24-33	7788-7807	spatial_ref_sys.sql	

#Text=psql -d ${DB} -f ${SCRIPTSDIR}/postgis_comments.sql # OPTIONAL # Raster support (OPTIONAL) psql -d ${DB} -f ${SCRIPTSDIR}/rtpostgis.sql psql -d ${DB} -f ${SCRIPTSDIR}/raster_comments.sql # OPTIONAL
25-1	7808-7812	psql	
25-2	7813-7814	-	
25-3	7814-7815	d	
25-4	7816-7817	$	
25-5	7817-7818	{	
25-6	7818-7820	DB	
25-7	7820-7821	}	
25-8	7822-7823	-	
25-9	7823-7824	f	
25-10	7825-7826	$	
25-11	7826-7827	{	
25-12	7827-7837	SCRIPTSDIR	
25-13	7837-7838	}	
25-14	7838-7839	/	
25-15	7839-7859	postgis_comments.sql	
25-16	7860-7861	#	
25-17	7862-7870	OPTIONAL	
25-18	7871-7872	#	
25-19	7873-7879	Raster	
25-20	7880-7887	support	
25-21	7888-7889	(	
25-22	7889-7897	OPTIONAL	
25-23	7897-7898	)	
25-24	7899-7903	psql	
25-25	7904-7905	-	
25-26	7905-7906	d	
25-27	7907-7908	$	
25-28	7908-7909	{	
25-29	7909-7911	DB	
25-30	7911-7912	}	
25-31	7913-7914	-	
25-32	7914-7915	f	
25-33	7916-7917	$	
25-34	7917-7918	{	
25-35	7918-7928	SCRIPTSDIR	
25-36	7928-7929	}	
25-37	7929-7930	/	
25-38	7930-7943	rtpostgis.sql	
25-39	7944-7948	psql	
25-40	7949-7950	-	
25-41	7950-7951	d	
25-42	7952-7953	$	
25-43	7953-7954	{	
25-44	7954-7956	DB	
25-45	7956-7957	}	
25-46	7958-7959	-	
25-47	7959-7960	f	
25-48	7961-7962	$	
25-49	7962-7963	{	
25-50	7963-7973	SCRIPTSDIR	
25-51	7973-7974	}	
25-52	7974-7975	/	
25-53	7975-7994	raster_comments.sql	
25-54	7995-7996	#	
25-55	7997-8005	OPTIONAL	

#Text=# Topology support (OPTIONAL) psql -d ${DB} -f ${SCRIPTSDIR}/topology.sql psql -d ${DB} -f ${SCRIPTSDIR}/topology_comments.sql # OPTIONAL
26-1	8006-8007	#	
26-2	8008-8016	Topology	
26-3	8017-8024	support	
26-4	8025-8026	(	
26-5	8026-8034	OPTIONAL	
26-6	8034-8035	)	
26-7	8036-8040	psql	
26-8	8041-8042	-	
26-9	8042-8043	d	
26-10	8044-8045	$	
26-11	8045-8046	{	
26-12	8046-8048	DB	
26-13	8048-8049	}	
26-14	8050-8051	-	
26-15	8051-8052	f	
26-16	8053-8054	$	
26-17	8054-8055	{	
26-18	8055-8065	SCRIPTSDIR	
26-19	8065-8066	}	
26-20	8066-8067	/	
26-21	8067-8079	topology.sql	
26-22	8080-8084	psql	
26-23	8085-8086	-	
26-24	8086-8087	d	
26-25	8088-8089	$	
26-26	8089-8090	{	
26-27	8090-8092	DB	
26-28	8092-8093	}	
26-29	8094-8095	-	
26-30	8095-8096	f	
26-31	8097-8098	$	
26-32	8098-8099	{	
26-33	8099-8109	SCRIPTSDIR	
26-34	8109-8110	}	
26-35	8110-8111	/	
26-36	8111-8132	topology_comments.sql	
26-37	8133-8134	#	
26-38	8135-8143	OPTIONAL	

#Text=3.3.3. Create a spatially-enabled database from a template Some packaged distributions of PostGIS (in particular the Win32 installers for PostGIS >= 1.1.5) load the PostGIS functions into a template database called template_postgis. If the template_postgis database exists in your PostgreSQL
27-1	8144-8149	3.3.3	
27-2	8149-8150	.	
27-3	8150-8151	 	
27-4	8151-8157	Create	
27-5	8158-8159	a	
27-6	8160-8177	spatially-enabled	
27-7	8178-8186	database	
27-8	8187-8191	from	
27-9	8192-8193	a	
27-10	8194-8202	template	
27-11	8203-8207	Some	
27-12	8208-8216	packaged	
27-13	8217-8230	distributions	
27-14	8231-8233	of	
27-15	8234-8241	PostGIS	
27-16	8242-8243	(	
27-17	8243-8245	in	
27-18	8246-8256	particular	
27-19	8257-8260	the	
27-20	8261-8266	Win32	
27-21	8267-8277	installers	
27-22	8278-8281	for	
27-23	8282-8289	PostGIS	
27-24	8290-8291	>	
27-25	8291-8292	=	
27-26	8293-8298	1.1.5	
27-27	8298-8299	)	
27-28	8300-8304	load	
27-29	8305-8308	the	
27-30	8309-8316	PostGIS	
27-31	8317-8326	functions	
27-32	8327-8331	into	
27-33	8332-8333	a	
27-34	8334-8342	template	
27-35	8343-8351	database	
27-36	8352-8358	called	
27-37	8359-8375	template_postgis	
27-38	8375-8376	.	
27-39	8377-8379	If	
27-40	8380-8383	the	
27-41	8384-8400	template_postgis	
27-42	8401-8409	database	
27-43	8410-8416	exists	
27-44	8417-8419	in	
27-45	8420-8424	your	
27-46	8425-8435	PostgreSQL	

#Text=installation then it is possible for users and/or applications to create spatially-enabled databases using a single command. Note that in both cases, the database user must have been granted the privilege to create new databases. From the shell: # createdb -T template_postgis my_spatial_db From SQL:
28-1	8436-8448	installation	
28-2	8449-8453	then	
28-3	8454-8456	it	
28-4	8457-8459	is	
28-5	8460-8468	possible	
28-6	8469-8472	for	
28-7	8473-8478	users	
28-8	8479-8482	and	
28-9	8482-8483	/	
28-10	8483-8485	or	
28-11	8486-8498	applications	
28-12	8499-8501	to	
28-13	8502-8508	create	
28-14	8509-8526	spatially-enabled	
28-15	8527-8536	databases	
28-16	8537-8542	using	
28-17	8543-8544	a	
28-18	8545-8551	single	
28-19	8552-8559	command	
28-20	8559-8560	.	
28-21	8561-8565	Note	
28-22	8566-8570	that	
28-23	8571-8573	in	
28-24	8574-8578	both	
28-25	8579-8584	cases	
28-26	8584-8585	,	
28-27	8586-8589	the	
28-28	8590-8598	database	
28-29	8599-8603	user	
28-30	8604-8608	must	
28-31	8609-8613	have	
28-32	8614-8618	been	
28-33	8619-8626	granted	
28-34	8627-8630	the	
28-35	8631-8640	privilege	
28-36	8641-8643	to	
28-37	8644-8650	create	
28-38	8651-8654	new	
28-39	8655-8664	databases	
28-40	8664-8665	.	
28-41	8666-8670	From	
28-42	8671-8674	the	
28-43	8675-8680	shell	
28-44	8680-8681	:	
28-45	8682-8683	#	
28-46	8684-8692	createdb	
28-47	8693-8694	-	
28-48	8694-8695	T	
28-49	8696-8712	template_postgis	
28-50	8713-8726	my_spatial_db	
28-51	8727-8731	From	
28-52	8732-8735	SQL	
28-53	8735-8736	:	

#Text=postgres=# CREATE DATABASE my_spatial_db TEMPLATE=template_postgis3.4. Upgrading spatial databases3.4.1. Soft upgrade3.4.2. Hard upgrade Upgrading existing spatial databases can be tricky as it requires replacement or introduction of new PostGIS object definitions. Unfortunately not all definitions can be easily replaced in a live database, so sometimes your best bet is a dump/reload process.
29-1	8737-8745	postgres	
29-2	8745-8746	=	
29-3	8746-8747	#	
29-4	8748-8754	CREATE	
29-5	8755-8763	DATABASE	
29-6	8764-8777	my_spatial_db	
29-7	8778-8786	TEMPLATE	
29-8	8786-8787	=	
29-9	8787-8806	template_postgis3.4	
29-10	8806-8807	.	
29-11	8807-8808	 	
29-12	8808-8817	Upgrading	
29-13	8818-8825	spatial	
29-14	8826-8840	databases3.4.1	
29-15	8840-8841	.	
29-16	8842-8846	Soft	
29-17	8847-8859	upgrade3.4.2	
29-18	8859-8860	.	
29-19	8861-8865	Hard	
29-20	8866-8873	upgrade	
29-21	8874-8883	Upgrading	
29-22	8884-8892	existing	
29-23	8893-8900	spatial	
29-24	8901-8910	databases	
29-25	8911-8914	can	
29-26	8915-8917	be	
29-27	8918-8924	tricky	
29-28	8925-8927	as	
29-29	8928-8930	it	
29-30	8931-8939	requires	
29-31	8940-8951	replacement	
29-32	8952-8954	or	
29-33	8955-8967	introduction	
29-34	8968-8970	of	
29-35	8971-8974	new	
29-36	8975-8982	PostGIS	
29-37	8983-8989	object	
29-38	8990-9001	definitions	
29-39	9001-9002	.	
29-40	9003-9016	Unfortunately	
29-41	9017-9020	not	
29-42	9021-9024	all	
29-43	9025-9036	definitions	
29-44	9037-9040	can	
29-45	9041-9043	be	
29-46	9044-9050	easily	
29-47	9051-9059	replaced	
29-48	9060-9062	in	
29-49	9063-9064	a	
29-50	9065-9069	live	
29-51	9070-9078	database	
29-52	9078-9079	,	
29-53	9080-9082	so	
29-54	9083-9092	sometimes	
29-55	9093-9097	your	
29-56	9098-9102	best	
29-57	9103-9106	bet	
29-58	9107-9109	is	
29-59	9110-9111	a	
29-60	9112-9116	dump	
29-61	9116-9117	/	
29-62	9117-9123	reload	
29-63	9124-9131	process	
29-64	9131-9132	.	

#Text=PostGIS provides a SOFT UPGRADE procedure for minor or bugfix releases, and a HARD UPGRADE procedure for major releases. Before attempting to upgrade PostGIS, it is always worth to backup your data. If you use the -Fc flag to pg_dump you will always be able to restore the dump with a HARD UPGRADE.
30-1	9133-9140	PostGIS	
30-2	9141-9149	provides	
30-3	9150-9151	a	
30-4	9152-9156	SOFT	
30-5	9157-9164	UPGRADE	
30-6	9165-9174	procedure	
30-7	9175-9178	for	
30-8	9179-9184	minor	
30-9	9185-9187	or	
30-10	9188-9194	bugfix	
30-11	9195-9203	releases	
30-12	9203-9204	,	
30-13	9205-9208	and	
30-14	9209-9210	a	
30-15	9211-9215	HARD	
30-16	9216-9223	UPGRADE	
30-17	9224-9233	procedure	
30-18	9234-9237	for	
30-19	9238-9243	major	
30-20	9244-9252	releases	
30-21	9252-9253	.	
30-22	9254-9260	Before	
30-23	9261-9271	attempting	
30-24	9272-9274	to	
30-25	9275-9282	upgrade	
30-26	9283-9290	PostGIS	
30-27	9290-9291	,	
30-28	9292-9294	it	
30-29	9295-9297	is	
30-30	9298-9304	always	
30-31	9305-9310	worth	
30-32	9311-9313	to	
30-33	9314-9320	backup	
30-34	9321-9325	your	
30-35	9326-9330	data	
30-36	9330-9331	.	
30-37	9332-9334	If	
30-38	9335-9338	you	
30-39	9339-9342	use	
30-40	9343-9346	the	
30-41	9347-9348	-	
30-42	9348-9350	Fc	
30-43	9351-9355	flag	
30-44	9356-9358	to	
30-45	9359-9366	pg_dump	
30-46	9367-9370	you	
30-47	9371-9375	will	
30-48	9376-9382	always	
30-49	9383-9385	be	
30-50	9386-9390	able	
30-51	9391-9393	to	
30-52	9394-9401	restore	
30-53	9402-9405	the	
30-54	9406-9410	dump	
30-55	9411-9415	with	
30-56	9416-9417	a	
30-57	9418-9422	HARD	
30-58	9423-9430	UPGRADE	
30-59	9430-9431	.	

#Text=3.4.1. Soft upgrade3.4.1.1. Soft Upgrade Pre 9.1+ or without extensions3.4.1.2. Soft Upgrade 9.1+ using extensionsIf you installed your database using extensions, you'll need to upgrade using the extension model as well. If you installed using the old sql script way, then you should upgrade using the sql script way. Please refer to the appropriate.3.4.1.1. Soft Upgrade Pre 9.1+ or without extensionsThis section applies only to those who installed PostGIS
31-1	9432-9437	3.4.1	
31-2	9437-9438	.	
31-3	9438-9439	 	
31-4	9439-9443	Soft	
31-5	9444-9458	upgrade3.4.1.1	
31-6	9458-9459	.	
31-7	9460-9464	Soft	
31-8	9465-9472	Upgrade	
31-9	9473-9476	Pre	
31-10	9477-9480	9.1	
31-11	9480-9481	+	
31-12	9482-9484	or	
31-13	9485-9492	without	
31-14	9493-9510	extensions3.4.1.2	
31-15	9510-9511	.	
31-16	9512-9516	Soft	
31-17	9517-9524	Upgrade	
31-18	9525-9528	9.1	
31-19	9528-9529	+	
31-20	9530-9535	using	
31-21	9536-9548	extensionsIf	
31-22	9549-9552	you	
31-23	9553-9562	installed	
31-24	9563-9567	your	
31-25	9568-9576	database	
31-26	9577-9582	using	
31-27	9583-9593	extensions	
31-28	9593-9594	,	
31-29	9595-9601	you'll	
31-30	9602-9606	need	
31-31	9607-9609	to	
31-32	9610-9617	upgrade	
31-33	9618-9623	using	
31-34	9624-9627	the	
31-35	9628-9637	extension	
31-36	9638-9643	model	
31-37	9644-9646	as	
31-38	9647-9651	well	
31-39	9651-9652	.	
31-40	9653-9655	If	
31-41	9656-9659	you	
31-42	9660-9669	installed	
31-43	9670-9675	using	
31-44	9676-9679	the	
31-45	9680-9683	old	
31-46	9684-9687	sql	
31-47	9688-9694	script	
31-48	9695-9698	way	
31-49	9698-9699	,	
31-50	9700-9704	then	
31-51	9705-9708	you	
31-52	9709-9715	should	
31-53	9716-9723	upgrade	
31-54	9724-9729	using	
31-55	9730-9733	the	
31-56	9734-9737	sql	
31-57	9738-9744	script	
31-58	9745-9748	way	
31-59	9748-9749	.	
31-60	9750-9756	Please	
31-61	9757-9762	refer	
31-62	9763-9765	to	
31-63	9766-9769	the	
31-64	9770-9781	appropriate	
31-65	9781-9789	.3.4.1.1	
31-66	9789-9790	.	
31-67	9790-9791	 	
31-68	9791-9795	Soft	
31-69	9796-9803	Upgrade	
31-70	9804-9807	Pre	
31-71	9808-9811	9.1	
31-72	9811-9812	+	
31-73	9813-9815	or	
31-74	9816-9823	without	
31-75	9824-9838	extensionsThis	
31-76	9839-9846	section	
31-77	9847-9854	applies	
31-78	9855-9859	only	
31-79	9860-9862	to	
31-80	9863-9868	those	
31-81	9869-9872	who	
31-82	9873-9882	installed	
31-83	9883-9890	PostGIS	

#Text=not using extensions. If you have extensions and try to upgrade with this approach you'll get messages like:can't drop ... because postgis extension depends on itNOTE: if you are moving from PostGIS 1.* to PostGIS 2.* or from
32-1	9891-9894	not	
32-2	9895-9900	using	
32-3	9901-9911	extensions	
32-4	9911-9912	.	
32-5	9913-9915	If	
32-6	9916-9919	you	
32-7	9920-9924	have	
32-8	9925-9935	extensions	
32-9	9936-9939	and	
32-10	9940-9943	try	
32-11	9944-9946	to	
32-12	9947-9954	upgrade	
32-13	9955-9959	with	
32-14	9960-9964	this	
32-15	9965-9973	approach	
32-16	9974-9980	you'll	
32-17	9981-9984	get	
32-18	9985-9993	messages	
32-19	9994-9998	like	
32-20	9998-9999	:	
32-21	9999-10004	can't	
32-22	10005-10009	drop	
32-23	10010-10011	.	
32-24	10011-10012	.	
32-25	10012-10013	.	
32-26	10014-10021	because	
32-27	10022-10029	postgis	
32-28	10030-10039	extension	
32-29	10040-10047	depends	
32-30	10048-10050	on	
32-31	10051-10057	itNOTE	
32-32	10057-10058	:	
32-33	10059-10061	if	
32-34	10062-10065	you	
32-35	10066-10069	are	
32-36	10070-10076	moving	
32-37	10077-10081	from	
32-38	10082-10089	PostGIS	
32-39	10090-10091	1	
32-40	10091-10092	.	
32-41	10092-10093	*	
32-42	10094-10096	to	
32-43	10097-10104	PostGIS	
32-44	10105-10106	2	
32-45	10106-10107	.	
32-46	10107-10108	*	
32-47	10109-10111	or	
32-48	10112-10116	from	

#Text=PostGIS 2.* prior to r7409, you cannot use this procedure but would rather need to do a HARD UPGRADE. After compiling and installing (make install) you should find a set of\t*_upgrade.sql files in the installation folders. You can list them all with:
33-1	10117-10124	PostGIS	
33-2	10125-10126	2	
33-3	10126-10127	.	
33-4	10127-10128	*	
33-5	10129-10134	prior	
33-6	10135-10137	to	
33-7	10138-10143	r7409	
33-8	10143-10144	,	
33-9	10145-10148	you	
33-10	10149-10155	cannot	
33-11	10156-10159	use	
33-12	10160-10164	this	
33-13	10165-10174	procedure	
33-14	10175-10178	but	
33-15	10179-10184	would	
33-16	10185-10191	rather	
33-17	10192-10196	need	
33-18	10197-10199	to	
33-19	10200-10202	do	
33-20	10203-10204	a	
33-21	10205-10209	HARD	
33-22	10210-10217	UPGRADE	
33-23	10217-10218	.	
33-24	10219-10224	After	
33-25	10225-10234	compiling	
33-26	10235-10238	and	
33-27	10239-10249	installing	
33-28	10250-10251	(	
33-29	10251-10255	make	
33-30	10256-10263	install	
33-31	10263-10264	)	
33-32	10265-10268	you	
33-33	10269-10275	should	
33-34	10276-10280	find	
33-35	10281-10282	a	
33-36	10283-10286	set	
33-37	10287-10289	of	
33-38	10290-10291	*	
33-39	10291-10292	_	
33-40	10292-10303	upgrade.sql	
33-41	10304-10309	files	
33-42	10310-10312	in	
33-43	10313-10316	the	
33-44	10317-10329	installation	
33-45	10330-10337	folders	
33-46	10337-10338	.	
33-47	10339-10342	You	
33-48	10343-10346	can	
33-49	10347-10351	list	
33-50	10352-10356	them	
33-51	10357-10360	all	
33-52	10361-10365	with	
33-53	10365-10366	:	

#Text=ls `pg_config --sharedir`/contrib/postgis-3.1.2dev/*_upgrade.sql Load them all in turn, starting from postgis_upgrade.sql. psql -f postgis_upgrade.sql -d your_spatial_database The same procedure applies to raster, topology and sfcgal extensions, with upgrade files named
34-1	10367-10369	ls	
34-2	10370-10371	`	
34-3	10371-10380	pg_config	
34-4	10381-10382	-	
34-5	10382-10383	-	
34-6	10383-10391	sharedir	
34-7	10391-10392	`	
34-8	10392-10393	/	
34-9	10393-10400	contrib	
34-10	10400-10401	/	
34-11	10401-10408	postgis	
34-12	10408-10409	-	
34-13	10409-10417	3.1.2dev	
34-14	10417-10418	/	
34-15	10418-10419	*	
34-16	10419-10420	_	
34-17	10420-10431	upgrade.sql	
34-18	10432-10436	Load	
34-19	10437-10441	them	
34-20	10442-10445	all	
34-21	10446-10448	in	
34-22	10449-10453	turn	
34-23	10453-10454	,	
34-24	10455-10463	starting	
34-25	10464-10468	from	
34-26	10469-10488	postgis_upgrade.sql	
34-27	10488-10489	.	
34-28	10490-10494	psql	
34-29	10495-10496	-	
34-30	10496-10497	f	
34-31	10498-10517	postgis_upgrade.sql	
34-32	10518-10519	-	
34-33	10519-10520	d	
34-34	10521-10542	your_spatial_database	
34-35	10543-10546	The	
34-36	10547-10551	same	
34-37	10552-10561	procedure	
34-38	10562-10569	applies	
34-39	10570-10572	to	
34-40	10573-10579	raster	
34-41	10579-10580	,	
34-42	10581-10589	topology	
34-43	10590-10593	and	
34-44	10594-10600	sfcgal	
34-45	10601-10611	extensions	
34-46	10611-10612	,	
34-47	10613-10617	with	
34-48	10618-10625	upgrade	
34-49	10626-10631	files	
34-50	10632-10637	named	

#Text=rtpostgis_upgrade.sql, topology_upgrade.sql and sfcgal_upgrade.sql respectively. If you need them: psql -f rtpostgis_upgrade.sql -d your_spatial_databasepsql -f topology_upgrade.sql -d your_spatial_databasepsql -f sfcgal_upgrade.sql -d your_spatial_database
35-1	10638-10659	rtpostgis_upgrade.sql	
35-2	10659-10660	,	
35-3	10661-10681	topology_upgrade.sql	
35-4	10682-10685	and	
35-5	10686-10704	sfcgal_upgrade.sql	
35-6	10705-10717	respectively	
35-7	10717-10718	.	
35-8	10719-10721	If	
35-9	10722-10725	you	
35-10	10726-10730	need	
35-11	10731-10735	them	
35-12	10735-10736	:	
35-13	10737-10741	psql	
35-14	10742-10743	-	
35-15	10743-10744	f	
35-16	10745-10766	rtpostgis_upgrade.sql	
35-17	10767-10768	-	
35-18	10768-10769	d	
35-19	10770-10795	your_spatial_databasepsql	
35-20	10796-10797	-	
35-21	10797-10798	f	
35-22	10799-10819	topology_upgrade.sql	
35-23	10820-10821	-	
35-24	10821-10822	d	
35-25	10823-10848	your_spatial_databasepsql	
35-26	10849-10850	-	
35-27	10850-10851	f	
35-28	10852-10870	sfcgal_upgrade.sql	
35-29	10871-10872	-	
35-30	10872-10873	d	
35-31	10874-10895	your_spatial_database	

#Text=If you can't find the postgis_upgrade.sql specific for upgrading your version you are using a version too early for a soft upgrade and need to do a HARD UPGRADE. The PostGIS_Full_Version function should inform you about the need to run this kind of
36-1	10896-10898	If	
36-2	10899-10902	you	
36-3	10903-10908	can't	
36-4	10909-10913	find	
36-5	10914-10917	the	
36-6	10918-10937	postgis_upgrade.sql	
36-7	10938-10946	specific	
36-8	10947-10950	for	
36-9	10951-10960	upgrading	
36-10	10961-10965	your	
36-11	10966-10973	version	
36-12	10974-10977	you	
36-13	10978-10981	are	
36-14	10982-10987	using	
36-15	10988-10989	a	
36-16	10990-10997	version	
36-17	10998-11001	too	
36-18	11002-11007	early	
36-19	11008-11011	for	
36-20	11012-11013	a	
36-21	11014-11018	soft	
36-22	11019-11026	upgrade	
36-23	11027-11030	and	
36-24	11031-11035	need	
36-25	11036-11038	to	
36-26	11039-11041	do	
36-27	11042-11043	a	
36-28	11044-11048	HARD	
36-29	11049-11056	UPGRADE	
36-30	11056-11057	.	
36-31	11058-11061	The	
36-32	11062-11082	PostGIS_Full_Version	
36-33	11083-11091	function	
36-34	11092-11098	should	
36-35	11099-11105	inform	
36-36	11106-11109	you	
36-37	11110-11115	about	
36-38	11116-11119	the	
36-39	11120-11124	need	
36-40	11125-11127	to	
36-41	11128-11131	run	
36-42	11132-11136	this	
36-43	11137-11141	kind	
36-44	11142-11144	of	

#Text=upgrade using a "procs need upgrade" message. 3.4.1.2. Soft Upgrade 9.1+ using extensionsIf you originally installed PostGIS with extensions, then you need to upgrade using extensions as well. Doing a minor upgrade with extensions, is fairly painless.ALTER EXTENSION postgis UPDATE TO "3.1.2dev";
37-1	11145-11152	upgrade	
37-2	11153-11158	using	
37-3	11159-11160	a	
37-4	11161-11162	"	
37-5	11162-11167	procs	
37-6	11168-11172	need	
37-7	11173-11180	upgrade	
37-8	11180-11181	"	
37-9	11182-11189	message	
37-10	11189-11190	.	
37-11	11191-11198	3.4.1.2	
37-12	11198-11199	.	
37-13	11199-11200	 	
37-14	11200-11204	Soft	
37-15	11205-11212	Upgrade	
37-16	11213-11216	9.1	
37-17	11216-11217	+	
37-18	11218-11223	using	
37-19	11224-11236	extensionsIf	
37-20	11237-11240	you	
37-21	11241-11251	originally	
37-22	11252-11261	installed	
37-23	11262-11269	PostGIS	
37-24	11270-11274	with	
37-25	11275-11285	extensions	
37-26	11285-11286	,	
37-27	11287-11291	then	
37-28	11292-11295	you	
37-29	11296-11300	need	
37-30	11301-11303	to	
37-31	11304-11311	upgrade	
37-32	11312-11317	using	
37-33	11318-11328	extensions	
37-34	11329-11331	as	
37-35	11332-11336	well	
37-36	11336-11337	.	
37-37	11338-11343	Doing	
37-38	11344-11345	a	
37-39	11346-11351	minor	
37-40	11352-11359	upgrade	
37-41	11360-11364	with	
37-42	11365-11375	extensions	
37-43	11375-11376	,	
37-44	11377-11379	is	
37-45	11380-11386	fairly	
37-46	11387-11401	painless.ALTER	
37-47	11402-11411	EXTENSION	
37-48	11412-11419	postgis	
37-49	11420-11426	UPDATE	
37-50	11427-11429	TO	
37-51	11430-11431	"	
37-52	11431-11439	3.1.2dev	
37-53	11439-11440	"	
37-54	11440-11441	;	

#Text=ALTER EXTENSION postgis_topology UPDATE TO "3.1.2dev";If you get an error notice something like:No migration path defined for ... to 3.1.2devThen you'll need to backup your database, create a fresh one as described in Section 3.3.1, “Spatially enable database using EXTENSION” and then restore your backup ontop of this new database.If you get a notice message like:Version "3.1.2dev" of extension "postgis" is already installed Then everything is already up to date and you can safely ignore it. UNLESS you're attempting to upgrade from an development version to the next (which doesn't get a new version number); in that case you can append "next" to the version
38-1	11442-11447	ALTER	
38-2	11448-11457	EXTENSION	
38-3	11458-11474	postgis_topology	
38-4	11475-11481	UPDATE	
38-5	11482-11484	TO	
38-6	11485-11486	"	
38-7	11486-11494	3.1.2dev	
38-8	11494-11495	"	
38-9	11495-11496	;	
38-10	11496-11498	If	
38-11	11499-11502	you	
38-12	11503-11506	get	
38-13	11507-11509	an	
38-14	11510-11515	error	
38-15	11516-11522	notice	
38-16	11523-11532	something	
38-17	11533-11537	like	
38-18	11537-11538	:	
38-19	11538-11540	No	
38-20	11541-11550	migration	
38-21	11551-11555	path	
38-22	11556-11563	defined	
38-23	11564-11567	for	
38-24	11568-11569	.	
38-25	11569-11570	.	
38-26	11570-11571	.	
38-27	11572-11574	to	
38-28	11575-11587	3.1.2devThen	
38-29	11588-11594	you'll	
38-30	11595-11599	need	
38-31	11600-11602	to	
38-32	11603-11609	backup	
38-33	11610-11614	your	
38-34	11615-11623	database	
38-35	11623-11624	,	
38-36	11625-11631	create	
38-37	11632-11633	a	
38-38	11634-11639	fresh	
38-39	11640-11643	one	
38-40	11644-11646	as	
38-41	11647-11656	described	
38-42	11657-11659	in	
38-43	11660-11667	Section	
38-44	11667-11668	 	
38-45	11668-11673	3.3.1	
38-46	11673-11674	,	
38-47	11675-11676	“	
38-48	11676-11685	Spatially	
38-49	11686-11692	enable	
38-50	11693-11701	database	
38-51	11702-11707	using	
38-52	11708-11717	EXTENSION	
38-53	11717-11718	”	
38-54	11719-11722	and	
38-55	11723-11727	then	
38-56	11728-11735	restore	
38-57	11736-11740	your	
38-58	11741-11747	backup	
38-59	11748-11753	ontop	
38-60	11754-11756	of	
38-61	11757-11761	this	
38-62	11762-11765	new	
38-63	11766-11777	database.If	
38-64	11778-11781	you	
38-65	11782-11785	get	
38-66	11786-11787	a	
38-67	11788-11794	notice	
38-68	11795-11802	message	
38-69	11803-11807	like	
38-70	11807-11808	:	
38-71	11808-11815	Version	
38-72	11816-11817	"	
38-73	11817-11825	3.1.2dev	
38-74	11825-11826	"	
38-75	11827-11829	of	
38-76	11830-11839	extension	
38-77	11840-11841	"	
38-78	11841-11848	postgis	
38-79	11848-11849	"	
38-80	11850-11852	is	
38-81	11853-11860	already	
38-82	11861-11870	installed	
38-83	11871-11875	Then	
38-84	11876-11886	everything	
38-85	11887-11889	is	
38-86	11890-11897	already	
38-87	11898-11900	up	
38-88	11901-11903	to	
38-89	11904-11908	date	
38-90	11909-11912	and	
38-91	11913-11916	you	
38-92	11917-11920	can	
38-93	11921-11927	safely	
38-94	11928-11934	ignore	
38-95	11935-11937	it	
38-96	11937-11938	.	
38-97	11939-11945	UNLESS	
38-98	11946-11952	you're	
38-99	11953-11963	attempting	
38-100	11964-11966	to	
38-101	11967-11974	upgrade	
38-102	11975-11979	from	
38-103	11980-11982	an	
38-104	11983-11994	development	
38-105	11995-12002	version	
38-106	12003-12005	to	
38-107	12006-12009	the	
38-108	12010-12014	next	
38-109	12015-12016	(	
38-110	12016-12021	which	
38-111	12022-12029	doesn't	
38-112	12030-12033	get	
38-113	12034-12035	a	
38-114	12036-12039	new	
38-115	12040-12047	version	
38-116	12048-12054	number	
38-117	12054-12055	)	
38-118	12055-12056	;	
38-119	12057-12059	in	
38-120	12060-12064	that	
38-121	12065-12069	case	
38-122	12070-12073	you	
38-123	12074-12077	can	
38-124	12078-12084	append	
38-125	12085-12086	"	
38-126	12086-12090	next	
38-127	12090-12091	"	
38-128	12092-12094	to	
38-129	12095-12098	the	
38-130	12099-12106	version	

#Text=string, and next time you'll need to drop the "next" suffix again: ALTER EXTENSION postgis UPDATE TO "3.1.2devnext"; ALTER EXTENSION postgis_topology UPDATE TO "3.1.2devnext";If you installed PostGIS originally without a version specified, you can often skip the reinstallation of postgis extension before restoring since the backup just has CREATE EXTENSION postgis and thus
39-1	12107-12113	string	
39-2	12113-12114	,	
39-3	12115-12118	and	
39-4	12119-12123	next	
39-5	12124-12128	time	
39-6	12129-12135	you'll	
39-7	12136-12140	need	
39-8	12141-12143	to	
39-9	12144-12148	drop	
39-10	12149-12152	the	
39-11	12153-12154	"	
39-12	12154-12158	next	
39-13	12158-12159	"	
39-14	12160-12166	suffix	
39-15	12167-12172	again	
39-16	12172-12173	:	
39-17	12174-12179	ALTER	
39-18	12180-12189	EXTENSION	
39-19	12190-12197	postgis	
39-20	12198-12204	UPDATE	
39-21	12205-12207	TO	
39-22	12208-12209	"	
39-23	12209-12221	3.1.2devnext	
39-24	12221-12222	"	
39-25	12222-12223	;	
39-26	12224-12229	ALTER	
39-27	12230-12239	EXTENSION	
39-28	12240-12256	postgis_topology	
39-29	12257-12263	UPDATE	
39-30	12264-12266	TO	
39-31	12267-12268	"	
39-32	12268-12280	3.1.2devnext	
39-33	12280-12281	"	
39-34	12281-12282	;	
39-35	12282-12284	If	
39-36	12285-12288	you	
39-37	12289-12298	installed	
39-38	12299-12306	PostGIS	
39-39	12307-12317	originally	
39-40	12318-12325	without	
39-41	12326-12327	a	
39-42	12328-12335	version	
39-43	12336-12345	specified	
39-44	12345-12346	,	
39-45	12347-12350	you	
39-46	12351-12354	can	
39-47	12355-12360	often	
39-48	12361-12365	skip	
39-49	12366-12369	the	
39-50	12370-12384	reinstallation	
39-51	12385-12387	of	
39-52	12388-12395	postgis	
39-53	12396-12405	extension	
39-54	12406-12412	before	
39-55	12413-12422	restoring	
39-56	12423-12428	since	
39-57	12429-12432	the	
39-58	12433-12439	backup	
39-59	12440-12444	just	
39-60	12445-12448	has	
39-61	12449-12455	CREATE	
39-62	12456-12465	EXTENSION	
39-63	12466-12473	postgis	
39-64	12474-12477	and	
39-65	12478-12482	thus	

#Text=picks up the newest latest version during restore. If you are upgrading PostGIS extension from a version prior to 3.0.0 you'll end up with an unpackaged PostGIS Raster support. You can repackage the raster support using: CREATE EXTENSION postgis_raster FROM unpackaged;
40-1	12483-12488	picks	
40-2	12489-12491	up	
40-3	12492-12495	the	
40-4	12496-12502	newest	
40-5	12503-12509	latest	
40-6	12510-12517	version	
40-7	12518-12524	during	
40-8	12525-12532	restore	
40-9	12532-12533	.	
40-10	12534-12536	If	
40-11	12537-12540	you	
40-12	12541-12544	are	
40-13	12545-12554	upgrading	
40-14	12555-12562	PostGIS	
40-15	12563-12572	extension	
40-16	12573-12577	from	
40-17	12578-12579	a	
40-18	12580-12587	version	
40-19	12588-12593	prior	
40-20	12594-12596	to	
40-21	12597-12602	3.0.0	
40-22	12603-12609	you'll	
40-23	12610-12613	end	
40-24	12614-12616	up	
40-25	12617-12621	with	
40-26	12622-12624	an	
40-27	12625-12635	unpackaged	
40-28	12636-12643	PostGIS	
40-29	12644-12650	Raster	
40-30	12651-12658	support	
40-31	12658-12659	.	
40-32	12660-12663	You	
40-33	12664-12667	can	
40-34	12668-12677	repackage	
40-35	12678-12681	the	
40-36	12682-12688	raster	
40-37	12689-12696	support	
40-38	12697-12702	using	
40-39	12702-12703	:	
40-40	12704-12710	CREATE	
40-41	12711-12720	EXTENSION	
40-42	12721-12735	postgis_raster	
40-43	12736-12740	FROM	
40-44	12741-12751	unpackaged	
40-45	12751-12752	;	

#Text=And then, if you don't need it, drop it with: DROP EXTENSION postgis_raster; 3.4.2. Hard upgrade By HARD UPGRADE we mean full dump/reload of postgis-enabled databases. You need a HARD UPGRADE when PostGIS objects' internal storage changes
41-1	12753-12756	And	
41-2	12757-12761	then	
41-3	12761-12762	,	
41-4	12763-12765	if	
41-5	12766-12769	you	
41-6	12770-12775	don't	
41-7	12776-12780	need	
41-8	12781-12783	it	
41-9	12783-12784	,	
41-10	12785-12789	drop	
41-11	12790-12792	it	
41-12	12793-12797	with	
41-13	12797-12798	:	
41-14	12799-12803	DROP	
41-15	12804-12813	EXTENSION	
41-16	12814-12828	postgis_raster	
41-17	12828-12829	;	
41-18	12830-12835	3.4.2	
41-19	12835-12836	.	
41-20	12836-12837	 	
41-21	12837-12841	Hard	
41-22	12842-12849	upgrade	
41-23	12850-12852	By	
41-24	12853-12857	HARD	
41-25	12858-12865	UPGRADE	
41-26	12866-12868	we	
41-27	12869-12873	mean	
41-28	12874-12878	full	
41-29	12879-12883	dump	
41-30	12883-12884	/	
41-31	12884-12890	reload	
41-32	12891-12893	of	
41-33	12894-12909	postgis-enabled	
41-34	12910-12919	databases	
41-35	12919-12920	.	
41-36	12921-12924	You	
41-37	12925-12929	need	
41-38	12930-12931	a	
41-39	12932-12936	HARD	
41-40	12937-12944	UPGRADE	
41-41	12945-12949	when	
41-42	12950-12957	PostGIS	
41-43	12958-12965	objects	
41-44	12965-12966	'	
41-45	12967-12975	internal	
41-46	12976-12983	storage	
41-47	12984-12991	changes	

#Text=or when SOFT UPGRADE is not possible. The Release Notes appendix reports for each version whether you need a dump/reload (HARD UPGRADE) to upgrade. The dump/reload process is assisted by the postgis_restore.pl script which takes care of skipping from the dump all
42-1	12992-12994	or	
42-2	12995-12999	when	
42-3	13000-13004	SOFT	
42-4	13005-13012	UPGRADE	
42-5	13013-13015	is	
42-6	13016-13019	not	
42-7	13020-13028	possible	
42-8	13028-13029	.	
42-9	13030-13033	The	
42-10	13034-13041	Release	
42-11	13042-13047	Notes	
42-12	13048-13056	appendix	
42-13	13057-13064	reports	
42-14	13065-13068	for	
42-15	13069-13073	each	
42-16	13074-13081	version	
42-17	13082-13089	whether	
42-18	13090-13093	you	
42-19	13094-13098	need	
42-20	13099-13100	a	
42-21	13101-13105	dump	
42-22	13105-13106	/	
42-23	13106-13112	reload	
42-24	13113-13114	(	
42-25	13114-13118	HARD	
42-26	13119-13126	UPGRADE	
42-27	13126-13127	)	
42-28	13128-13130	to	
42-29	13131-13138	upgrade	
42-30	13138-13139	.	
42-31	13140-13143	The	
42-32	13144-13148	dump	
42-33	13148-13149	/	
42-34	13149-13155	reload	
42-35	13156-13163	process	
42-36	13164-13166	is	
42-37	13167-13175	assisted	
42-38	13176-13178	by	
42-39	13179-13182	the	
42-40	13183-13201	postgis_restore.pl	
42-41	13202-13208	script	
42-42	13209-13214	which	
42-43	13215-13220	takes	
42-44	13221-13225	care	
42-45	13226-13228	of	
42-46	13229-13237	skipping	
42-47	13238-13242	from	
42-48	13243-13246	the	
42-49	13247-13251	dump	
42-50	13252-13255	all	

#Text=definitions which belong to PostGIS (including old ones), allowing you to restore your schemas and data into a database with PostGIS installed without getting duplicate symbol errors or bringing forward deprecated objects. Supplementary instructions for windows users are available at Windows Hard upgrade. The Procedure is as follows:
43-1	13256-13267	definitions	
43-2	13268-13273	which	
43-3	13274-13280	belong	
43-4	13281-13283	to	
43-5	13284-13291	PostGIS	
43-6	13292-13293	(	
43-7	13293-13302	including	
43-8	13303-13306	old	
43-9	13307-13311	ones	
43-10	13311-13312	)	
43-11	13312-13313	,	
43-12	13314-13322	allowing	
43-13	13323-13326	you	
43-14	13327-13329	to	
43-15	13330-13337	restore	
43-16	13338-13342	your	
43-17	13343-13350	schemas	
43-18	13351-13354	and	
43-19	13355-13359	data	
43-20	13360-13364	into	
43-21	13365-13366	a	
43-22	13367-13375	database	
43-23	13376-13380	with	
43-24	13381-13388	PostGIS	
43-25	13389-13398	installed	
43-26	13399-13406	without	
43-27	13407-13414	getting	
43-28	13415-13424	duplicate	
43-29	13425-13431	symbol	
43-30	13432-13438	errors	
43-31	13439-13441	or	
43-32	13442-13450	bringing	
43-33	13451-13458	forward	
43-34	13459-13469	deprecated	
43-35	13470-13477	objects	
43-36	13477-13478	.	
43-37	13479-13492	Supplementary	
43-38	13493-13505	instructions	
43-39	13506-13509	for	
43-40	13510-13517	windows	
43-41	13518-13523	users	
43-42	13524-13527	are	
43-43	13528-13537	available	
43-44	13538-13540	at	
43-45	13541-13548	Windows	
43-46	13549-13553	Hard	
43-47	13554-13561	upgrade	
43-48	13561-13562	.	
43-49	13563-13566	The	
43-50	13567-13576	Procedure	
43-51	13577-13579	is	
43-52	13580-13582	as	
43-53	13583-13590	follows	
43-54	13590-13591	:	

#Text=Create a "custom-format" dump of the database you want to upgrade (let's call it olddb) include binary blobs (-b) and verbose (-v) output. The user can be the owner of the db, need not be postgres super account.
44-1	13592-13598	Create	
44-2	13599-13600	a	
44-3	13601-13602	"	
44-4	13602-13615	custom-format	
44-5	13615-13616	"	
44-6	13617-13621	dump	
44-7	13622-13624	of	
44-8	13625-13628	the	
44-9	13629-13637	database	
44-10	13638-13641	you	
44-11	13642-13646	want	
44-12	13647-13649	to	
44-13	13650-13657	upgrade	
44-14	13658-13659	(	
44-15	13659-13664	let's	
44-16	13665-13669	call	
44-17	13670-13672	it	
44-18	13673-13678	olddb	
44-19	13678-13679	)	
44-20	13680-13687	include	
44-21	13688-13694	binary	
44-22	13695-13700	blobs	
44-23	13701-13702	(	
44-24	13702-13703	-	
44-25	13703-13704	b	
44-26	13704-13705	)	
44-27	13706-13709	and	
44-28	13710-13717	verbose	
44-29	13718-13719	(	
44-30	13719-13720	-	
44-31	13720-13721	v	
44-32	13721-13722	)	
44-33	13723-13729	output	
44-34	13729-13730	.	
44-35	13731-13734	The	
44-36	13735-13739	user	
44-37	13740-13743	can	
44-38	13744-13746	be	
44-39	13747-13750	the	
44-40	13751-13756	owner	
44-41	13757-13759	of	
44-42	13760-13763	the	
44-43	13764-13766	db	
44-44	13766-13767	,	
44-45	13768-13772	need	
44-46	13773-13776	not	
44-47	13777-13779	be	
44-48	13780-13788	postgres	
44-49	13789-13794	super	
44-50	13795-13802	account	
44-51	13802-13803	.	

#Text=pg_dump -h localhost -p 5432 -U postgres -Fc -b -v -f "/somepath/olddb.backup" olddb Do a fresh install of PostGIS in a new database -- we'll refer to this database as newdb. Please refer to Section 3.3.2, “Spatially enable database without using EXTENSION (discouraged)” and Section 3.3.1, “Spatially enable database using EXTENSION” for
45-1	13804-13811	pg_dump	
45-2	13812-13813	-	
45-3	13813-13814	h	
45-4	13815-13824	localhost	
45-5	13825-13826	-	
45-6	13826-13827	p	
45-7	13828-13832	5432	
45-8	13833-13834	-	
45-9	13834-13835	U	
45-10	13836-13844	postgres	
45-11	13845-13846	-	
45-12	13846-13848	Fc	
45-13	13849-13850	-	
45-14	13850-13851	b	
45-15	13852-13853	-	
45-16	13853-13854	v	
45-17	13855-13856	-	
45-18	13856-13857	f	
45-19	13858-13859	"	
45-20	13859-13860	/	
45-21	13860-13868	somepath	
45-22	13868-13869	/	
45-23	13869-13881	olddb.backup	
45-24	13881-13882	"	
45-25	13883-13888	olddb	
45-26	13889-13891	Do	
45-27	13892-13893	a	
45-28	13894-13899	fresh	
45-29	13900-13907	install	
45-30	13908-13910	of	
45-31	13911-13918	PostGIS	
45-32	13919-13921	in	
45-33	13922-13923	a	
45-34	13924-13927	new	
45-35	13928-13936	database	
45-36	13937-13938	-	
45-37	13938-13939	-	
45-38	13940-13945	we'll	
45-39	13946-13951	refer	
45-40	13952-13954	to	
45-41	13955-13959	this	
45-42	13960-13968	database	
45-43	13969-13971	as	
45-44	13972-13977	newdb	
45-45	13977-13978	.	
45-46	13979-13985	Please	
45-47	13986-13991	refer	
45-48	13992-13994	to	
45-49	13995-14002	Section	
45-50	14002-14003	 	
45-51	14003-14008	3.3.2	
45-52	14008-14009	,	
45-53	14010-14011	“	
45-54	14011-14020	Spatially	
45-55	14021-14027	enable	
45-56	14028-14036	database	
45-57	14037-14044	without	
45-58	14045-14050	using	
45-59	14051-14060	EXTENSION	
45-60	14061-14062	(	
45-61	14062-14073	discouraged	
45-62	14073-14074	)	
45-63	14074-14075	”	
45-64	14076-14079	and	
45-65	14080-14087	Section	
45-66	14087-14088	 	
45-67	14088-14093	3.3.1	
45-68	14093-14094	,	
45-69	14095-14096	“	
45-70	14096-14105	Spatially	
45-71	14106-14112	enable	
45-72	14113-14121	database	
45-73	14122-14127	using	
45-74	14128-14137	EXTENSION	
45-75	14137-14138	”	
45-76	14139-14142	for	

#Text=instructions on how to do this. The spatial_ref_sys entries found in your dump will be restored, but they will not override existing ones in spatial_ref_sys. This is to ensure that fixes in the official set will be properly propagated to restored
46-1	14143-14155	instructions	
46-2	14156-14158	on	
46-3	14159-14162	how	
46-4	14163-14165	to	
46-5	14166-14168	do	
46-6	14169-14173	this	
46-7	14173-14174	.	
46-8	14175-14178	The	
46-9	14179-14194	spatial_ref_sys	
46-10	14195-14202	entries	
46-11	14203-14208	found	
46-12	14209-14211	in	
46-13	14212-14216	your	
46-14	14217-14221	dump	
46-15	14222-14226	will	
46-16	14227-14229	be	
46-17	14230-14238	restored	
46-18	14238-14239	,	
46-19	14240-14243	but	
46-20	14244-14248	they	
46-21	14249-14253	will	
46-22	14254-14257	not	
46-23	14258-14266	override	
46-24	14267-14275	existing	
46-25	14276-14280	ones	
46-26	14281-14283	in	
46-27	14284-14299	spatial_ref_sys	
46-28	14299-14300	.	
46-29	14301-14305	This	
46-30	14306-14308	is	
46-31	14309-14311	to	
46-32	14312-14318	ensure	
46-33	14319-14323	that	
46-34	14324-14329	fixes	
46-35	14330-14332	in	
46-36	14333-14336	the	
46-37	14337-14345	official	
46-38	14346-14349	set	
46-39	14350-14354	will	
46-40	14355-14357	be	
46-41	14358-14366	properly	
46-42	14367-14377	propagated	
46-43	14378-14380	to	
46-44	14381-14389	restored	

#Text=databases. If for any reason you really want your own overrides of standard entries just don't load the spatial_ref_sys.sql file when creating the new db. If your database is really old or you know you've been using long deprecated functions in your
47-1	14390-14399	databases	
47-2	14399-14400	.	
47-3	14401-14403	If	
47-4	14404-14407	for	
47-5	14408-14411	any	
47-6	14412-14418	reason	
47-7	14419-14422	you	
47-8	14423-14429	really	
47-9	14430-14434	want	
47-10	14435-14439	your	
47-11	14440-14443	own	
47-12	14444-14453	overrides	
47-13	14454-14456	of	
47-14	14457-14465	standard	
47-15	14466-14473	entries	
47-16	14474-14478	just	
47-17	14479-14484	don't	
47-18	14485-14489	load	
47-19	14490-14493	the	
47-20	14494-14513	spatial_ref_sys.sql	
47-21	14514-14518	file	
47-22	14519-14523	when	
47-23	14524-14532	creating	
47-24	14533-14536	the	
47-25	14537-14540	new	
47-26	14541-14543	db	
47-27	14543-14544	.	
47-28	14545-14547	If	
47-29	14548-14552	your	
47-30	14553-14561	database	
47-31	14562-14564	is	
47-32	14565-14571	really	
47-33	14572-14575	old	
47-34	14576-14578	or	
47-35	14579-14582	you	
47-36	14583-14587	know	
47-37	14588-14594	you've	
47-38	14595-14599	been	
47-39	14600-14605	using	
47-40	14606-14610	long	
47-41	14611-14621	deprecated	
47-42	14622-14631	functions	
47-43	14632-14634	in	
47-44	14635-14639	your	

#Text=views and functions, you might need to load legacy.sql for all your functions and views etc. to properly come back. Only do this if _really_ needed. Consider upgrading your views and functions before dumping instead, if possible. The deprecated functions can be later removed by loading
48-1	14640-14645	views	
48-2	14646-14649	and	
48-3	14650-14659	functions	
48-4	14659-14660	,	
48-5	14661-14664	you	
48-6	14665-14670	might	
48-7	14671-14675	need	
48-8	14676-14678	to	
48-9	14679-14683	load	
48-10	14684-14694	legacy.sql	
48-11	14695-14698	for	
48-12	14699-14702	all	
48-13	14703-14707	your	
48-14	14708-14717	functions	
48-15	14718-14721	and	
48-16	14722-14727	views	
48-17	14728-14731	etc	
48-18	14731-14732	.	
48-19	14733-14735	to	
48-20	14736-14744	properly	
48-21	14745-14749	come	
48-22	14750-14754	back	
48-23	14754-14755	.	
48-24	14756-14760	Only	
48-25	14761-14763	do	
48-26	14764-14768	this	
48-27	14769-14771	if	
48-28	14772-14773	_	
48-29	14773-14779	really	
48-30	14779-14780	_	
48-31	14781-14787	needed	
48-32	14787-14788	.	
48-33	14789-14797	Consider	
48-34	14798-14807	upgrading	
48-35	14808-14812	your	
48-36	14813-14818	views	
48-37	14819-14822	and	
48-38	14823-14832	functions	
48-39	14833-14839	before	
48-40	14840-14847	dumping	
48-41	14848-14855	instead	
48-42	14855-14856	,	
48-43	14857-14859	if	
48-44	14860-14868	possible	
48-45	14868-14869	.	
48-46	14870-14873	The	
48-47	14874-14884	deprecated	
48-48	14885-14894	functions	
48-49	14895-14898	can	
48-50	14899-14901	be	
48-51	14902-14907	later	
48-52	14908-14915	removed	
48-53	14916-14918	by	
48-54	14919-14926	loading	

#Text=uninstall_legacy.sql. Restore your backup into your fresh newdb database using postgis_restore.pl. Unexpected errors, if any, will be printed to the standard error stream by psql. Keep a log of those.
49-1	14927-14947	uninstall_legacy.sql	
49-2	14947-14948	.	
49-3	14949-14956	Restore	
49-4	14957-14961	your	
49-5	14962-14968	backup	
49-6	14969-14973	into	
49-7	14974-14978	your	
49-8	14979-14984	fresh	
49-9	14985-14990	newdb	
49-10	14991-14999	database	
49-11	15000-15005	using	
49-12	15006-15024	postgis_restore.pl	
49-13	15024-15025	.	
49-14	15026-15036	Unexpected	
49-15	15037-15043	errors	
49-16	15043-15044	,	
49-17	15045-15047	if	
49-18	15048-15051	any	
49-19	15051-15052	,	
49-20	15053-15057	will	
49-21	15058-15060	be	
49-22	15061-15068	printed	
49-23	15069-15071	to	
49-24	15072-15075	the	
49-25	15076-15084	standard	
49-26	15085-15090	error	
49-27	15091-15097	stream	
49-28	15098-15100	by	
49-29	15101-15105	psql	
49-30	15105-15106	.	
49-31	15107-15111	Keep	
49-32	15112-15113	a	
49-33	15114-15117	log	
49-34	15118-15120	of	
49-35	15121-15126	those	
49-36	15126-15127	.	

#Text=perl utils/postgis_restore.pl "/somepath/olddb.backup" | psql -h localhost -p 5432 -U postgres newdb 2> errors.txt Errors may arise in the following cases: Some of your views or functions make use of deprecated PostGIS objects. In order to fix this you may try loading legacy.sql script prior to restore or you'll have to restore to a
50-1	15128-15132	perl	
50-2	15133-15138	utils	
50-3	15138-15139	/	
50-4	15139-15157	postgis_restore.pl	
50-5	15158-15159	"	
50-6	15159-15160	/	
50-7	15160-15168	somepath	
50-8	15168-15169	/	
50-9	15169-15181	olddb.backup	
50-10	15181-15182	"	
50-11	15183-15184	|	
50-12	15185-15189	psql	
50-13	15190-15191	-	
50-14	15191-15192	h	
50-15	15193-15202	localhost	
50-16	15203-15204	-	
50-17	15204-15205	p	
50-18	15206-15210	5432	
50-19	15211-15212	-	
50-20	15212-15213	U	
50-21	15214-15222	postgres	
50-22	15223-15228	newdb	
50-23	15229-15230	2	
50-24	15230-15231	>	
50-25	15232-15242	errors.txt	
50-26	15243-15249	Errors	
50-27	15250-15253	may	
50-28	15254-15259	arise	
50-29	15260-15262	in	
50-30	15263-15266	the	
50-31	15267-15276	following	
50-32	15277-15282	cases	
50-33	15282-15283	:	
50-34	15284-15288	Some	
50-35	15289-15291	of	
50-36	15292-15296	your	
50-37	15297-15302	views	
50-38	15303-15305	or	
50-39	15306-15315	functions	
50-40	15316-15320	make	
50-41	15321-15324	use	
50-42	15325-15327	of	
50-43	15328-15338	deprecated	
50-44	15339-15346	PostGIS	
50-45	15347-15354	objects	
50-46	15354-15355	.	
50-47	15356-15358	In	
50-48	15359-15364	order	
50-49	15365-15367	to	
50-50	15368-15371	fix	
50-51	15372-15376	this	
50-52	15377-15380	you	
50-53	15381-15384	may	
50-54	15385-15388	try	
50-55	15389-15396	loading	
50-56	15397-15407	legacy.sql	
50-57	15408-15414	script	
50-58	15415-15420	prior	
50-59	15421-15423	to	
50-60	15424-15431	restore	
50-61	15432-15434	or	
50-62	15435-15441	you'll	
50-63	15442-15446	have	
50-64	15447-15449	to	
50-65	15450-15457	restore	
50-66	15458-15460	to	
50-67	15461-15462	a	

#Text=version of PostGIS which still contains those objects and try a migration again after porting your code. If the legacy.sql way works for you, don't forget to fix your code to stop using deprecated functions and drop them loading uninstall_legacy.sql.
51-1	15463-15470	version	
51-2	15471-15473	of	
51-3	15474-15481	PostGIS	
51-4	15482-15487	which	
51-5	15488-15493	still	
51-6	15494-15502	contains	
51-7	15503-15508	those	
51-8	15509-15516	objects	
51-9	15517-15520	and	
51-10	15521-15524	try	
51-11	15525-15526	a	
51-12	15527-15536	migration	
51-13	15537-15542	again	
51-14	15543-15548	after	
51-15	15549-15556	porting	
51-16	15557-15561	your	
51-17	15562-15566	code	
51-18	15566-15567	.	
51-19	15568-15570	If	
51-20	15571-15574	the	
51-21	15575-15585	legacy.sql	
51-22	15586-15589	way	
51-23	15590-15595	works	
51-24	15596-15599	for	
51-25	15600-15603	you	
51-26	15603-15604	,	
51-27	15605-15610	don't	
51-28	15611-15617	forget	
51-29	15618-15620	to	
51-30	15621-15624	fix	
51-31	15625-15629	your	
51-32	15630-15634	code	
51-33	15635-15637	to	
51-34	15638-15642	stop	
51-35	15643-15648	using	
51-36	15649-15659	deprecated	
51-37	15660-15669	functions	
51-38	15670-15673	and	
51-39	15674-15678	drop	
51-40	15679-15683	them	
51-41	15684-15691	loading	
51-42	15692-15712	uninstall_legacy.sql	
51-43	15712-15713	.	

#Text=Some custom records of spatial_ref_sys in dump file have an invalid SRID value. Valid SRID values are bigger than 0 and smaller than 999000. Values in the 999000.999999 range are reserved for internal use while values > 999999 can't be used at all.
52-1	15714-15718	Some	
52-2	15719-15725	custom	
52-3	15726-15733	records	
52-4	15734-15736	of	
52-5	15737-15752	spatial_ref_sys	
52-6	15753-15755	in	
52-7	15756-15760	dump	
52-8	15761-15765	file	
52-9	15766-15770	have	
52-10	15771-15773	an	
52-11	15774-15781	invalid	
52-12	15782-15786	SRID	
52-13	15787-15792	value	
52-14	15792-15793	.	
52-15	15794-15799	Valid	
52-16	15800-15804	SRID	
52-17	15805-15811	values	
52-18	15812-15815	are	
52-19	15816-15822	bigger	
52-20	15823-15827	than	
52-21	15828-15829	0	
52-22	15830-15833	and	
52-23	15834-15841	smaller	
52-24	15842-15846	than	
52-25	15847-15853	999000	
52-26	15853-15854	.	
52-27	15855-15861	Values	
52-28	15862-15864	in	
52-29	15865-15868	the	
52-30	15869-15882	999000.999999	
52-31	15883-15888	range	
52-32	15889-15892	are	
52-33	15893-15901	reserved	
52-34	15902-15905	for	
52-35	15906-15914	internal	
52-36	15915-15918	use	
52-37	15919-15924	while	
52-38	15925-15931	values	
52-39	15932-15933	>	
52-40	15934-15940	999999	
52-41	15941-15946	can't	
52-42	15947-15949	be	
52-43	15950-15954	used	
52-44	15955-15957	at	
52-45	15958-15961	all	
52-46	15961-15962	.	

#Text=All your custom records with invalid SRIDs will be retained, with those > 999999 moved into the reserved range, but the spatial_ref_sys table would lose a check constraint guarding for that invariant to hold and possibly also its primary key ( when multiple invalid SRIDS get converted to the same reserved
53-1	15963-15966	All	
53-2	15967-15971	your	
53-3	15972-15978	custom	
53-4	15979-15986	records	
53-5	15987-15991	with	
53-6	15992-15999	invalid	
53-7	16000-16005	SRIDs	
53-8	16006-16010	will	
53-9	16011-16013	be	
53-10	16014-16022	retained	
53-11	16022-16023	,	
53-12	16024-16028	with	
53-13	16029-16034	those	
53-14	16035-16036	>	
53-15	16037-16043	999999	
53-16	16044-16049	moved	
53-17	16050-16054	into	
53-18	16055-16058	the	
53-19	16059-16067	reserved	
53-20	16068-16073	range	
53-21	16073-16074	,	
53-22	16075-16078	but	
53-23	16079-16082	the	
53-24	16083-16098	spatial_ref_sys	
53-25	16099-16104	table	
53-26	16105-16110	would	
53-27	16111-16115	lose	
53-28	16116-16117	a	
53-29	16118-16123	check	
53-30	16124-16134	constraint	
53-31	16135-16143	guarding	
53-32	16144-16147	for	
53-33	16148-16152	that	
53-34	16153-16162	invariant	
53-35	16163-16165	to	
53-36	16166-16170	hold	
53-37	16171-16174	and	
53-38	16175-16183	possibly	
53-39	16184-16188	also	
53-40	16189-16192	its	
53-41	16193-16200	primary	
53-42	16201-16204	key	
53-43	16205-16206	(	
53-44	16207-16211	when	
53-45	16212-16220	multiple	
53-46	16221-16228	invalid	
53-47	16229-16234	SRIDS	
53-48	16235-16238	get	
53-49	16239-16248	converted	
53-50	16249-16251	to	
53-51	16252-16255	the	
53-52	16256-16260	same	
53-53	16261-16269	reserved	

#Text=SRID value ). In order to fix this you should copy your custom SRS to a SRID with a valid value (maybe in the 910000..910999 range), convert all your tables to the new srid (see UpdateGeometrySRID), delete the invalid
54-1	16270-16274	SRID	
54-2	16275-16280	value	
54-3	16281-16282	)	
54-4	16282-16283	.	
54-5	16284-16286	In	
54-6	16287-16292	order	
54-7	16293-16295	to	
54-8	16296-16299	fix	
54-9	16300-16304	this	
54-10	16305-16308	you	
54-11	16309-16315	should	
54-12	16316-16320	copy	
54-13	16321-16325	your	
54-14	16326-16332	custom	
54-15	16333-16336	SRS	
54-16	16337-16339	to	
54-17	16340-16341	a	
54-18	16342-16346	SRID	
54-19	16347-16351	with	
54-20	16352-16353	a	
54-21	16354-16359	valid	
54-22	16360-16365	value	
54-23	16366-16367	(	
54-24	16367-16372	maybe	
54-25	16373-16375	in	
54-26	16376-16379	the	
54-27	16380-16386	910000	
54-28	16386-16387	.	
54-29	16387-16394	.910999	
54-30	16395-16400	range	
54-31	16400-16401	)	
54-32	16401-16402	,	
54-33	16403-16410	convert	
54-34	16411-16414	all	
54-35	16415-16419	your	
54-36	16420-16426	tables	
54-37	16427-16429	to	
54-38	16430-16433	the	
54-39	16434-16437	new	
54-40	16438-16442	srid	
54-41	16443-16444	(	
54-42	16444-16447	see	
54-43	16448-16466	UpdateGeometrySRID	
54-44	16466-16467	)	
54-45	16467-16468	,	
54-46	16469-16475	delete	
54-47	16476-16479	the	
54-48	16480-16487	invalid	

#Text=entry from spatial_ref_sys and re-construct the check(s) with: ALTER TABLE spatial_ref_sys ADD CONSTRAINT spatial_ref_sys_srid_check check (srid > 0 AND srid < 999000 );
55-1	16488-16493	entry	
55-2	16494-16498	from	
55-3	16499-16514	spatial_ref_sys	
55-4	16515-16518	and	
55-5	16519-16531	re-construct	
55-6	16532-16535	the	
55-7	16536-16541	check	
55-8	16541-16542	(	
55-9	16542-16543	s	
55-10	16543-16544	)	
55-11	16545-16549	with	
55-12	16549-16550	:	
55-13	16551-16556	ALTER	
55-14	16557-16562	TABLE	
55-15	16563-16578	spatial_ref_sys	
55-16	16579-16582	ADD	
55-17	16583-16593	CONSTRAINT	
55-18	16594-16620	spatial_ref_sys_srid_check	
55-19	16621-16626	check	
55-20	16627-16628	(	
55-21	16628-16632	srid	
55-22	16633-16634	>	
55-23	16635-16636	0	
55-24	16637-16640	AND	
55-25	16641-16645	srid	
55-26	16646-16647	<	
55-27	16648-16654	999000	
55-28	16655-16656	)	
55-29	16656-16657	;	

#Text=ALTER TABLE spatial_ref_sys ADD PRIMARY KEY(srid)); If you are upgrading an old database containing french IGN cartography, you will have probably SRIDs out of range and you will see, when importing your database, issues like this : WARNING: SRID 310642222 converted to 999175 (in reserved zone)
56-1	16658-16663	ALTER	
56-2	16664-16669	TABLE	
56-3	16670-16685	spatial_ref_sys	
56-4	16686-16689	ADD	
56-5	16690-16697	PRIMARY	
56-6	16698-16701	KEY	
56-7	16701-16702	(	
56-8	16702-16706	srid	
56-9	16706-16707	)	
56-10	16707-16708	)	
56-11	16708-16709	;	
56-12	16710-16712	If	
56-13	16713-16716	you	
56-14	16717-16720	are	
56-15	16721-16730	upgrading	
56-16	16731-16733	an	
56-17	16734-16737	old	
56-18	16738-16746	database	
56-19	16747-16757	containing	
56-20	16758-16764	french	
56-21	16765-16768	IGN	
56-22	16769-16780	cartography	
56-23	16780-16781	,	
56-24	16782-16785	you	
56-25	16786-16790	will	
56-26	16791-16795	have	
56-27	16796-16804	probably	
56-28	16805-16810	SRIDs	
56-29	16811-16814	out	
56-30	16815-16817	of	
56-31	16818-16823	range	
56-32	16824-16827	and	
56-33	16828-16831	you	
56-34	16832-16836	will	
56-35	16837-16840	see	
56-36	16840-16841	,	
56-37	16842-16846	when	
56-38	16847-16856	importing	
56-39	16857-16861	your	
56-40	16862-16870	database	
56-41	16870-16871	,	
56-42	16872-16878	issues	
56-43	16879-16883	like	
56-44	16884-16888	this	
56-45	16889-16890	:	
56-46	16891-16898	WARNING	
56-47	16898-16899	:	
56-48	16900-16904	SRID	
56-49	16905-16914	310642222	
56-50	16915-16924	converted	
56-51	16925-16927	to	
56-52	16928-16934	999175	
56-53	16935-16936	(	
56-54	16936-16938	in	
56-55	16939-16947	reserved	
56-56	16948-16952	zone	
56-57	16952-16953	)	

#Text=In this case, you can try following steps : first throw out completely the IGN from the sql which is resulting from postgis_restore.pl. So, after having run : perl utils/postgis_restore.pl "/somepath/olddb.backup" > olddb.sql
57-1	16954-16956	In	
57-2	16957-16961	this	
57-3	16962-16966	case	
57-4	16966-16967	,	
57-5	16968-16971	you	
57-6	16972-16975	can	
57-7	16976-16979	try	
57-8	16980-16989	following	
57-9	16990-16995	steps	
57-10	16996-16997	:	
57-11	16998-17003	first	
57-12	17004-17009	throw	
57-13	17010-17013	out	
57-14	17014-17024	completely	
57-15	17025-17028	the	
57-16	17029-17032	IGN	
57-17	17033-17037	from	
57-18	17038-17041	the	
57-19	17042-17045	sql	
57-20	17046-17051	which	
57-21	17052-17054	is	
57-22	17055-17064	resulting	
57-23	17065-17069	from	
57-24	17070-17088	postgis_restore.pl	
57-25	17088-17089	.	
57-26	17090-17092	So	
57-27	17092-17093	,	
57-28	17094-17099	after	
57-29	17100-17106	having	
57-30	17107-17110	run	
57-31	17111-17112	:	
57-32	17113-17117	perl	
57-33	17118-17123	utils	
57-34	17123-17124	/	
57-35	17124-17142	postgis_restore.pl	
57-36	17143-17144	"	
57-37	17144-17145	/	
57-38	17145-17153	somepath	
57-39	17153-17154	/	
57-40	17154-17166	olddb.backup	
57-41	17166-17167	"	
57-42	17168-17169	>	
57-43	17170-17179	olddb.sql	

#Text=run this command : grep -v IGNF olddb.sql > olddb-without-IGN.sql Create then your newdb, activate the required Postgis extensions, and insert properly the french system IGN with : this script After these operations, import your data :
58-1	17180-17183	run	
58-2	17184-17188	this	
58-3	17189-17196	command	
58-4	17197-17198	:	
58-5	17199-17203	grep	
58-6	17204-17205	-	
58-7	17205-17206	v	
58-8	17207-17211	IGNF	
58-9	17212-17221	olddb.sql	
58-10	17222-17223	>	
58-11	17224-17245	olddb-without-IGN.sql	
58-12	17246-17252	Create	
58-13	17253-17257	then	
58-14	17258-17262	your	
58-15	17263-17268	newdb	
58-16	17268-17269	,	
58-17	17270-17278	activate	
58-18	17279-17282	the	
58-19	17283-17291	required	
58-20	17292-17299	Postgis	
58-21	17300-17310	extensions	
58-22	17310-17311	,	
58-23	17312-17315	and	
58-24	17316-17322	insert	
58-25	17323-17331	properly	
58-26	17332-17335	the	
58-27	17336-17342	french	
58-28	17343-17349	system	
58-29	17350-17353	IGN	
58-30	17354-17358	with	
58-31	17359-17360	:	
58-32	17361-17365	this	
58-33	17366-17372	script	
58-34	17373-17378	After	
58-35	17379-17384	these	
58-36	17385-17395	operations	
58-37	17395-17396	,	
58-38	17397-17403	import	
58-39	17404-17408	your	
58-40	17409-17413	data	
58-41	17414-17415	:	
