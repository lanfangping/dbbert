#FORMAT=WebAnno TSV 3.3


#Text=Tips for Java Developers |
#Text=Cloud Foundry Docs
#Text=Cloud Foundry Documentation
#Text=Get Involved
#Text=Doc Index
#Text=General Information
#Text=Contributing Documentation
#Text=Cloud Foundry Concepts
#Text=Cloud Foundry Overview
#Text=Security and Networking
#Text=Cloud Foundry Security
#Text=Container Security
#Text=Container-to-Container Networking
#Text=Orgs, Spaces, Roles, and Permissions
#Text=Planning Orgs and Spaces
#Text=App Security Groups
#Text=App SSH Components and Processes
#Text=High Availability
#Text=High Availability in Cloud Foundry
#Text=How Cloud Foundry Maintains High Availability
#Text=How Cloud Foundry Manages Apps
#Text=How Apps Are Staged
#Text=App Container Lifecycle
#Text=How the Diego Auction Allocates Jobs
#Text=Cloud Foundry Components
#Text=Diego Architecture
#Text=Cloud Foundry Routing Architecture
#Text=Cloud Controller
#Text=Cloud Controller Blobstore
#Text=User Account and Authentication (UAA) Server
#Text=Garden
#Text=GrootFS Disk Usage
#Text=HTTP Routing
#Text=Cloud Foundry Command Line Interface (cf CLI)
#Text=Installing the cf CLI
#Text=Upgrading to cf CLI v7
#Text=Getting Started with the cf CLI
#Text=Using the cf CLI with a Proxy Server
#Text=Using the cf CLI with a Self-Signed Certificate
#Text=Using cf CLI Plugins
#Text=Developing cf CLI Plugins
#Text=cf CLI v6 Reference Guide
#Text=cf CLI v7 Reference Guide
#Text=Using Experimental cf CLI Commands
#Text=Information for Operators
#Text=Deploying Cloud Foundry
#Text=Setting Up DNS for Your Environment
#Text=Deploying Cloud Foundry with cf-deployment
#Text=Deploying BOSH on AWS
#Text=Deploying BOSH on GCP
#Text=Deploying Cloud Foundry
#Text=Migrating from cf-release to cf-deployment
#Text=Configuring Your Cloud Foundry for BOSH Backup and Restore
#Text=Backup and Restore for External Blobstores
#Text=Additional Configuration
#Text=High Availability in Cloud Foundry
#Text=How Cloud Foundry Maintains High Availability
#Text=Cloud Controller Blobstore Configuration
#Text=Administering Cloud Foundry
#Text=Managing the Runtime
#Text=Stopping and Starting Virtual Machines
#Text=Creating and Modifying Quota Plans
#Text=Using Feature Flags
#Text=Examining GrootFS Disk Usage
#Text=Using Metadata
#Text=Managing Custom Buildpacks
#Text=Using Docker in Cloud Foundry
#Text=User Accounts and Communications
#Text=Creating and Managing Users with the cf CLI
#Text=Creating and Managing Users with the UAA CLI (UAAC)
#Text=Getting Started with the Notifications Service
#Text=Routing
#Text=Enabling IPv6 for Hosted Apps
#Text=Supporting WebSockets
#Text=Configuring Load Balancer Health Checks for CF Routers
#Text=Securing Traffic into CF
#Text=Enabling TCP Routing
#Text=Isolation Segments
#Text=Managing Isolation Segments
#Text=Routing for Isolation Segments
#Text=Running and Troubleshooting Cloud Foundry
#Text=Cloud Foundry Logging
#Text=Configuring System Logging
#Text=Configuring Diego for Upgrades
#Text=Audit Events
#Text=UAA Audit Requirements
#Text=Usage Events and Billing
#Text=Configuring SSH Access for Cloud Foundry
#Text=Configuring Diego Cell Disk Cleanup Scheduling
#Text=Configuring Health Monitor Notifications
#Text=Monitoring and Testing Diego Components
#Text=Troubleshooting Cloud Foundry
#Text=UAA Performance
#Text=UAA Performance Metrics
#Text=Scaling Cloud Controller
#Text=Scaling Cloud Controller (cf-for-k8s)
#Text=Logging and Metrics in Cloud Foundry
#Text=Loggregator Architecture
#Text=Installing the Loggregator Plugin for cf CLI
#Text=Security Event Logging
#Text=Cloud Foundry Component Metrics
#Text=Container Metrics
#Text=Loggregator Guide for CF Operators
#Text=Overview of Logging and Metrics
#Text=Deploying a Nozzle to the Loggregator Firehose
#Text=BOSH Documentation
#Text=BOSH Backup and Restore
#Text=Installing BBR
#Text=Release Notes for BBR
#Text=Backing Up with BBR
#Text=Restoring with BBR
#Text=BBR Logging
#Text=Experimental Features
#Text=BBR Developer's Guide
#Text=Information for Developers
#Text=Developing and Managing Apps
#Text=cf push
#Text=Pushing an App
#Text=Deploying with App Manifests
#Text=App Manifest Attribute Reference
#Text=Deploying an App with Docker
#Text=Deploying a Large App
#Text=Starting, Restarting, and Restaging Apps
#Text=Pushing an App with Multiple Processes
#Text=Running cf push Sub-Step Commands
#Text=Rolling App Deployments
#Text=Pushing Apps with Sidecar Processes
#Text=Using Blue-Green Deployment to Reduce Downtime and Risk
#Text=Troubleshooting App Deployment and Health
#Text=SSH for Apps and Services
#Text=App SSH Overview
#Text=Accessing Apps with SSH
#Text=Accessing Services with SSH
#Text=Routes and Domains
#Text=Configuring Routes and Domains
#Text=Configuring CF to Route Traffic to Apps on Custom Ports
#Text=Managing Services
#Text=Services Overview
#Text=Managing Service Instances
#Text=Sharing Service Instances
#Text=Delivering Service Credentials to an App
#Text=Managing Service Keys
#Text=Configuring Play Framework Service Connections
#Text=Using an External File System (Volume Services)
#Text=User-Provided Service Instances
#Text=Streaming App Logs
#Text=Streaming App Logs to Log Management Services
#Text=Service-Specific Instructions for Streaming App Logs
#Text=Streaming App Logs to Splunk
#Text=Streaming App Logs with Fluentd
#Text=Streaming App Logs to Azure OMS Log Analytics
#Text=Managing Apps with the cf CLI
#Text=Running Tasks
#Text=Scaling an App Using cf scale
#Text=Using App Health Checks
#Text=Configuring Container-to-Container Networking
#Text=CF Environment Variables
#Text=Cloud Controller API Client Libraries
#Text=Considerations for Designing and Running an App in the Cloud
#Text=App Revisions
#Text=Buildpacks
#Text=About Buildpacks
#Text=How Buildpacks Work
#Text=Stack Association
#Text=Pushing an App with Multiple Buildpacks
#Text=Using a Proxy
#Text=Supported Binary Dependencies
#Text=Production Server Configuration
#Text=Binary
#Text=HWC
#Text=Java
#Text=Tips for Java Developers
#Text=Getting Started Deploying Apps
#Text=Grails
#Text=Ratpack
#Text=Spring
#Text=Configuring Service Connections
#Text=Grails
#Text=Play
#Text=Spring
#Text=Cloud Foundry Java Client Library
#Text=.NET Core
#Text=NGINX Buildpack
#Text=Node.js
#Text=Tips for Node.js Developers
#Text=Environment Variables Defined by the Node Buildpack
#Text=Configuring Service Connections for Node.js
#Text=PHP
#Text=Tips for PHP Developers
#Text=Getting Started Deploying PHP Apps
#Text=PHP Buildpack Configuration
#Text=Composer
#Text=Sessions
#Text=New Relic
#Text=Python
#Text=Ruby
#Text=Tips for Ruby Developers
#Text=Getting Started Deploying Apps
#Text=Ruby
#Text=Ruby on Rails
#Text=Configure Rake Tasks for Deployed Apps
#Text=Environment Variables Defined by the Ruby Buildpack
#Text=Configure Service Connections for Ruby
#Text=Support for Windows Gemfiles
#Text=Staticfile
#Text=Customizing and Developing Buildpacks
#Text=Creating Custom Buildpacks
#Text=Packaging Dependencies for Offline Buildpacks
#Text=Merging from Upstream Buildpacks
#Text=Upgrading Dependency Versions
#Text=Using CI for Buildpacks
#Text=Releasing a New Buildpack Version
#Text=Updating Buildpack-Related Gems
#Text=Information for Managed Service Authors
#Text=Services
#Text=Overview
#Text=Service Broker API
#Text=Open Service Broker API
#Text=Platform Profiles
#Text=Catalog Metadata
#Text=Volume Services
#Text=Release Notes
#Text=Managing Service Brokers
#Text=Access Control
#Text=Binding Credentials
#Text=CredHub
#Text=Setting Up and Deploying CredHub with BOSH
#Text=Configuring a Hardware Security Module
#Text=Using a Key Management Service with CredHub
#Text=CredHub Credential Types
#Text=Backing Up and Restoring CredHub Instances
#Text=Troubleshooting CredHub
#Text=Dashboard Single Sign-On
#Text=Enabling Service Instance Sharing
#Text=Example Service Brokers
#Text=App Log Streaming
#Text=Route Services
#Text=Supporting Multiple CF Instances
#Text=API Reference
#Text=UAA API
#Text=CAPI API
#Text=Client Libraries
#Text=Rate Limit Information Returned by the Cloud Controller API
#Text=CAPI V2
#Text=CAPI V3
#Text=Tips for Java Developers
#Text=Java Buildpack
#Text=Design
#Text=Configuration
#Text=Java Client Library
#Text=Grails
#Text=Groovy
#Text=Ratpack
#Text=Raw Groovy
#Text=Java Main
#Text=Maven
#Text=Gradle
#Text=Play Framework
#Text=Spring Boot CLI
#Text=Servlet
#Text=Maven
#Text=Gradle
#Text=Binding to Services
#Text=Java and Grails Best Practices
#Text=Provide a JDBC Driver
#Text=Allocate Sufficient Memory
#Text=Troubleshoot Out of Memory
#Text=Troubleshoot Failed Upload
#Text=Debug Java Apps on Cloud Foundry
#Text=Slow Starting Java or Grails Apps
#Text=Extension
#Text=Environment Variables
#Text=Page last updated:
#Text=Cloud Foundry can deploy a number of different JVM-based artifact types.
1-1	0-4	Tips	
1-2	5-8	for	
1-3	9-13	Java	
1-4	14-24	Developers	
1-5	25-26	|	
1-6	27-32	Cloud	
1-7	33-40	Foundry	
1-8	41-45	Docs	
1-9	46-51	Cloud	
1-10	52-59	Foundry	
1-11	60-73	Documentation	
1-12	74-77	Get	
1-13	78-86	Involved	
1-14	87-90	Doc	
1-15	91-96	Index	
1-16	97-104	General	
1-17	105-116	Information	
1-18	117-129	Contributing	
1-19	130-143	Documentation	
1-20	144-149	Cloud	
1-21	150-157	Foundry	
1-22	158-166	Concepts	
1-23	167-172	Cloud	
1-24	173-180	Foundry	
1-25	181-189	Overview	
1-26	190-198	Security	
1-27	199-202	and	
1-28	203-213	Networking	
1-29	214-219	Cloud	
1-30	220-227	Foundry	
1-31	228-236	Security	
1-32	237-246	Container	
1-33	247-255	Security	
1-34	256-278	Container-to-Container	
1-35	279-289	Networking	
1-36	290-294	Orgs	
1-37	294-295	,	
1-38	296-302	Spaces	
1-39	302-303	,	
1-40	304-309	Roles	
1-41	309-310	,	
1-42	311-314	and	
1-43	315-326	Permissions	
1-44	327-335	Planning	
1-45	336-340	Orgs	
1-46	341-344	and	
1-47	345-351	Spaces	
1-48	352-355	App	
1-49	356-364	Security	
1-50	365-371	Groups	
1-51	372-375	App	
1-52	376-379	SSH	
1-53	380-390	Components	
1-54	391-394	and	
1-55	395-404	Processes	
1-56	405-409	High	
1-57	410-422	Availability	
1-58	423-427	High	
1-59	428-440	Availability	
1-60	441-443	in	
1-61	444-449	Cloud	
1-62	450-457	Foundry	
1-63	458-461	How	
1-64	462-467	Cloud	
1-65	468-475	Foundry	
1-66	476-485	Maintains	
1-67	486-490	High	
1-68	491-503	Availability	
1-69	504-507	How	
1-70	508-513	Cloud	
1-71	514-521	Foundry	
1-72	522-529	Manages	
1-73	530-534	Apps	
1-74	535-538	How	
1-75	539-543	Apps	
1-76	544-547	Are	
1-77	548-554	Staged	
1-78	555-558	App	
1-79	559-568	Container	
1-80	569-578	Lifecycle	
1-81	579-582	How	
1-82	583-586	the	
1-83	587-592	Diego	
1-84	593-600	Auction	
1-85	601-610	Allocates	
1-86	611-615	Jobs	
1-87	616-621	Cloud	
1-88	622-629	Foundry	
1-89	630-640	Components	
1-90	641-646	Diego	
1-91	647-659	Architecture	
1-92	660-665	Cloud	
1-93	666-673	Foundry	
1-94	674-681	Routing	
1-95	682-694	Architecture	
1-96	695-700	Cloud	
1-97	701-711	Controller	
1-98	712-717	Cloud	
1-99	718-728	Controller	
1-100	729-738	Blobstore	
1-101	739-743	User	
1-102	744-751	Account	
1-103	752-755	and	
1-104	756-770	Authentication	
1-105	771-772	(	
1-106	772-775	UAA	
1-107	775-776	)	
1-108	777-783	Server	
1-109	784-790	Garden	
1-110	791-798	GrootFS	
1-111	799-803	Disk	
1-112	804-809	Usage	
1-113	810-814	HTTP	
1-114	815-822	Routing	
1-115	823-828	Cloud	
1-116	829-836	Foundry	
1-117	837-844	Command	
1-118	845-849	Line	
1-119	850-859	Interface	
1-120	860-861	(	
1-121	861-863	cf	
1-122	864-867	CLI	
1-123	867-868	)	
1-124	869-879	Installing	
1-125	880-883	the	
1-126	884-886	cf	
1-127	887-890	CLI	
1-128	891-900	Upgrading	
1-129	901-903	to	
1-130	904-906	cf	
1-131	907-910	CLI	
1-132	911-913	v7	
1-133	914-921	Getting	
1-134	922-929	Started	
1-135	930-934	with	
1-136	935-938	the	
1-137	939-941	cf	
1-138	942-945	CLI	
1-139	946-951	Using	
1-140	952-955	the	
1-141	956-958	cf	
1-142	959-962	CLI	
1-143	963-967	with	
1-144	968-969	a	
1-145	970-975	Proxy	
1-146	976-982	Server	
1-147	983-988	Using	
1-148	989-992	the	
1-149	993-995	cf	
1-150	996-999	CLI	
1-151	1000-1004	with	
1-152	1005-1006	a	
1-153	1007-1018	Self-Signed	
1-154	1019-1030	Certificate	
1-155	1031-1036	Using	
1-156	1037-1039	cf	
1-157	1040-1043	CLI	
1-158	1044-1051	Plugins	
1-159	1052-1062	Developing	
1-160	1063-1065	cf	
1-161	1066-1069	CLI	
1-162	1070-1077	Plugins	
1-163	1078-1080	cf	
1-164	1081-1084	CLI	
1-165	1085-1087	v6	
1-166	1088-1097	Reference	
1-167	1098-1103	Guide	
1-168	1104-1106	cf	
1-169	1107-1110	CLI	
1-170	1111-1113	v7	
1-171	1114-1123	Reference	
1-172	1124-1129	Guide	
1-173	1130-1135	Using	
1-174	1136-1148	Experimental	
1-175	1149-1151	cf	
1-176	1152-1155	CLI	
1-177	1156-1164	Commands	
1-178	1165-1176	Information	
1-179	1177-1180	for	
1-180	1181-1190	Operators	
1-181	1191-1200	Deploying	
1-182	1201-1206	Cloud	
1-183	1207-1214	Foundry	
1-184	1215-1222	Setting	
1-185	1223-1225	Up	
1-186	1226-1229	DNS	
1-187	1230-1233	for	
1-188	1234-1238	Your	
1-189	1239-1250	Environment	
1-190	1251-1260	Deploying	
1-191	1261-1266	Cloud	
1-192	1267-1274	Foundry	
1-193	1275-1279	with	
1-194	1280-1293	cf-deployment	
1-195	1294-1303	Deploying	
1-196	1304-1308	BOSH	
1-197	1309-1311	on	
1-198	1312-1315	AWS	
1-199	1316-1325	Deploying	
1-200	1326-1330	BOSH	
1-201	1331-1333	on	
1-202	1334-1337	GCP	
1-203	1338-1347	Deploying	
1-204	1348-1353	Cloud	
1-205	1354-1361	Foundry	
1-206	1362-1371	Migrating	
1-207	1372-1376	from	
1-208	1377-1387	cf-release	
1-209	1388-1390	to	
1-210	1391-1404	cf-deployment	
1-211	1405-1416	Configuring	
1-212	1417-1421	Your	
1-213	1422-1427	Cloud	
1-214	1428-1435	Foundry	
1-215	1436-1439	for	
1-216	1440-1444	BOSH	
1-217	1445-1451	Backup	
1-218	1452-1455	and	
1-219	1456-1463	Restore	
1-220	1464-1470	Backup	
1-221	1471-1474	and	
1-222	1475-1482	Restore	
1-223	1483-1486	for	
1-224	1487-1495	External	
1-225	1496-1506	Blobstores	
1-226	1507-1517	Additional	
1-227	1518-1531	Configuration	
1-228	1532-1536	High	
1-229	1537-1549	Availability	
1-230	1550-1552	in	
1-231	1553-1558	Cloud	
1-232	1559-1566	Foundry	
1-233	1567-1570	How	
1-234	1571-1576	Cloud	
1-235	1577-1584	Foundry	
1-236	1585-1594	Maintains	
1-237	1595-1599	High	
1-238	1600-1612	Availability	
1-239	1613-1618	Cloud	
1-240	1619-1629	Controller	
1-241	1630-1639	Blobstore	
1-242	1640-1653	Configuration	
1-243	1654-1667	Administering	
1-244	1668-1673	Cloud	
1-245	1674-1681	Foundry	
1-246	1682-1690	Managing	
1-247	1691-1694	the	
1-248	1695-1702	Runtime	
1-249	1703-1711	Stopping	
1-250	1712-1715	and	
1-251	1716-1724	Starting	
1-252	1725-1732	Virtual	
1-253	1733-1741	Machines	
1-254	1742-1750	Creating	
1-255	1751-1754	and	
1-256	1755-1764	Modifying	
1-257	1765-1770	Quota	
1-258	1771-1776	Plans	
1-259	1777-1782	Using	
1-260	1783-1790	Feature	
1-261	1791-1796	Flags	
1-262	1797-1806	Examining	
1-263	1807-1814	GrootFS	
1-264	1815-1819	Disk	
1-265	1820-1825	Usage	
1-266	1826-1831	Using	
1-267	1832-1840	Metadata	
1-268	1841-1849	Managing	
1-269	1850-1856	Custom	
1-270	1857-1867	Buildpacks	
1-271	1868-1873	Using	
1-272	1874-1880	Docker	
1-273	1881-1883	in	
1-274	1884-1889	Cloud	
1-275	1890-1897	Foundry	
1-276	1898-1902	User	
1-277	1903-1911	Accounts	
1-278	1912-1915	and	
1-279	1916-1930	Communications	
1-280	1931-1939	Creating	
1-281	1940-1943	and	
1-282	1944-1952	Managing	
1-283	1953-1958	Users	
1-284	1959-1963	with	
1-285	1964-1967	the	
1-286	1968-1970	cf	
1-287	1971-1974	CLI	
1-288	1975-1983	Creating	
1-289	1984-1987	and	
1-290	1988-1996	Managing	
1-291	1997-2002	Users	
1-292	2003-2007	with	
1-293	2008-2011	the	
1-294	2012-2015	UAA	
1-295	2016-2019	CLI	
1-296	2020-2021	(	
1-297	2021-2025	UAAC	
1-298	2025-2026	)	
1-299	2027-2034	Getting	
1-300	2035-2042	Started	
1-301	2043-2047	with	
1-302	2048-2051	the	
1-303	2052-2065	Notifications	
1-304	2066-2073	Service	
1-305	2074-2081	Routing	
1-306	2082-2090	Enabling	
1-307	2091-2095	IPv6	
1-308	2096-2099	for	
1-309	2100-2106	Hosted	
1-310	2107-2111	Apps	
1-311	2112-2122	Supporting	
1-312	2123-2133	WebSockets	
1-313	2134-2145	Configuring	
1-314	2146-2150	Load	
1-315	2151-2159	Balancer	
1-316	2160-2166	Health	
1-317	2167-2173	Checks	
1-318	2174-2177	for	
1-319	2178-2180	CF	
1-320	2181-2188	Routers	
1-321	2189-2197	Securing	
1-322	2198-2205	Traffic	
1-323	2206-2210	into	
1-324	2211-2213	CF	
1-325	2214-2222	Enabling	
1-326	2223-2226	TCP	
1-327	2227-2234	Routing	
1-328	2235-2244	Isolation	
1-329	2245-2253	Segments	
1-330	2254-2262	Managing	
1-331	2263-2272	Isolation	
1-332	2273-2281	Segments	
1-333	2282-2289	Routing	
1-334	2290-2293	for	
1-335	2294-2303	Isolation	
1-336	2304-2312	Segments	
1-337	2313-2320	Running	
1-338	2321-2324	and	
1-339	2325-2340	Troubleshooting	
1-340	2341-2346	Cloud	
1-341	2347-2354	Foundry	
1-342	2355-2360	Cloud	
1-343	2361-2368	Foundry	
1-344	2369-2376	Logging	
1-345	2377-2388	Configuring	
1-346	2389-2395	System	
1-347	2396-2403	Logging	
1-348	2404-2415	Configuring	
1-349	2416-2421	Diego	
1-350	2422-2425	for	
1-351	2426-2434	Upgrades	
1-352	2435-2440	Audit	
1-353	2441-2447	Events	
1-354	2448-2451	UAA	
1-355	2452-2457	Audit	
1-356	2458-2470	Requirements	
1-357	2471-2476	Usage	
1-358	2477-2483	Events	
1-359	2484-2487	and	
1-360	2488-2495	Billing	
1-361	2496-2507	Configuring	
1-362	2508-2511	SSH	
1-363	2512-2518	Access	
1-364	2519-2522	for	
1-365	2523-2528	Cloud	
1-366	2529-2536	Foundry	
1-367	2537-2548	Configuring	
1-368	2549-2554	Diego	
1-369	2555-2559	Cell	
1-370	2560-2564	Disk	
1-371	2565-2572	Cleanup	
1-372	2573-2583	Scheduling	
1-373	2584-2595	Configuring	
1-374	2596-2602	Health	
1-375	2603-2610	Monitor	
1-376	2611-2624	Notifications	
1-377	2625-2635	Monitoring	
1-378	2636-2639	and	
1-379	2640-2647	Testing	
1-380	2648-2653	Diego	
1-381	2654-2664	Components	
1-382	2665-2680	Troubleshooting	
1-383	2681-2686	Cloud	
1-384	2687-2694	Foundry	
1-385	2695-2698	UAA	
1-386	2699-2710	Performance	
1-387	2711-2714	UAA	
1-388	2715-2726	Performance	
1-389	2727-2734	Metrics	
1-390	2735-2742	Scaling	
1-391	2743-2748	Cloud	
1-392	2749-2759	Controller	
1-393	2760-2767	Scaling	
1-394	2768-2773	Cloud	
1-395	2774-2784	Controller	
1-396	2785-2786	(	
1-397	2786-2796	cf-for-k8s	
1-398	2796-2797	)	
1-399	2798-2805	Logging	
1-400	2806-2809	and	
1-401	2810-2817	Metrics	
1-402	2818-2820	in	
1-403	2821-2826	Cloud	
1-404	2827-2834	Foundry	
1-405	2835-2846	Loggregator	
1-406	2847-2859	Architecture	
1-407	2860-2870	Installing	
1-408	2871-2874	the	
1-409	2875-2886	Loggregator	
1-410	2887-2893	Plugin	
1-411	2894-2897	for	
1-412	2898-2900	cf	
1-413	2901-2904	CLI	
1-414	2905-2913	Security	
1-415	2914-2919	Event	
1-416	2920-2927	Logging	
1-417	2928-2933	Cloud	
1-418	2934-2941	Foundry	
1-419	2942-2951	Component	
1-420	2952-2959	Metrics	
1-421	2960-2969	Container	
1-422	2970-2977	Metrics	
1-423	2978-2989	Loggregator	
1-424	2990-2995	Guide	
1-425	2996-2999	for	
1-426	3000-3002	CF	
1-427	3003-3012	Operators	
1-428	3013-3021	Overview	
1-429	3022-3024	of	
1-430	3025-3032	Logging	
1-431	3033-3036	and	
1-432	3037-3044	Metrics	
1-433	3045-3054	Deploying	
1-434	3055-3056	a	
1-435	3057-3063	Nozzle	
1-436	3064-3066	to	
1-437	3067-3070	the	
1-438	3071-3082	Loggregator	
1-439	3083-3091	Firehose	
1-440	3092-3096	BOSH	
1-441	3097-3110	Documentation	
1-442	3111-3115	BOSH	
1-443	3116-3122	Backup	
1-444	3123-3126	and	
1-445	3127-3134	Restore	
1-446	3135-3145	Installing	
1-447	3146-3149	BBR	
1-448	3150-3157	Release	
1-449	3158-3163	Notes	
1-450	3164-3167	for	
1-451	3168-3171	BBR	
1-452	3172-3179	Backing	
1-453	3180-3182	Up	
1-454	3183-3187	with	
1-455	3188-3191	BBR	
1-456	3192-3201	Restoring	
1-457	3202-3206	with	
1-458	3207-3210	BBR	
1-459	3211-3214	BBR	
1-460	3215-3222	Logging	
1-461	3223-3235	Experimental	
1-462	3236-3244	Features	
1-463	3245-3248	BBR	
1-464	3249-3260	Developer's	
1-465	3261-3266	Guide	
1-466	3267-3278	Information	
1-467	3279-3282	for	
1-468	3283-3293	Developers	
1-469	3294-3304	Developing	
1-470	3305-3308	and	
1-471	3309-3317	Managing	
1-472	3318-3322	Apps	
1-473	3323-3325	cf	
1-474	3326-3330	push	
1-475	3331-3338	Pushing	
1-476	3339-3341	an	
1-477	3342-3345	App	
1-478	3346-3355	Deploying	
1-479	3356-3360	with	
1-480	3361-3364	App	
1-481	3365-3374	Manifests	
1-482	3375-3378	App	
1-483	3379-3387	Manifest	
1-484	3388-3397	Attribute	
1-485	3398-3407	Reference	
1-486	3408-3417	Deploying	
1-487	3418-3420	an	
1-488	3421-3424	App	
1-489	3425-3429	with	
1-490	3430-3436	Docker	
1-491	3437-3446	Deploying	
1-492	3447-3448	a	
1-493	3449-3454	Large	
1-494	3455-3458	App	
1-495	3459-3467	Starting	
1-496	3467-3468	,	
1-497	3469-3479	Restarting	
1-498	3479-3480	,	
1-499	3481-3484	and	
1-500	3485-3494	Restaging	
1-501	3495-3499	Apps	
1-502	3500-3507	Pushing	
1-503	3508-3510	an	
1-504	3511-3514	App	
1-505	3515-3519	with	
1-506	3520-3528	Multiple	
1-507	3529-3538	Processes	
1-508	3539-3546	Running	
1-509	3547-3549	cf	
1-510	3550-3554	push	
1-511	3555-3563	Sub-Step	
1-512	3564-3572	Commands	
1-513	3573-3580	Rolling	
1-514	3581-3584	App	
1-515	3585-3596	Deployments	
1-516	3597-3604	Pushing	
1-517	3605-3609	Apps	
1-518	3610-3614	with	
1-519	3615-3622	Sidecar	
1-520	3623-3632	Processes	
1-521	3633-3638	Using	
1-522	3639-3649	Blue-Green	
1-523	3650-3660	Deployment	
1-524	3661-3663	to	
1-525	3664-3670	Reduce	
1-526	3671-3679	Downtime	
1-527	3680-3683	and	
1-528	3684-3688	Risk	
1-529	3689-3704	Troubleshooting	
1-530	3705-3708	App	
1-531	3709-3719	Deployment	
1-532	3720-3723	and	
1-533	3724-3730	Health	
1-534	3731-3734	SSH	
1-535	3735-3738	for	
1-536	3739-3743	Apps	
1-537	3744-3747	and	
1-538	3748-3756	Services	
1-539	3757-3760	App	
1-540	3761-3764	SSH	
1-541	3765-3773	Overview	
1-542	3774-3783	Accessing	
1-543	3784-3788	Apps	
1-544	3789-3793	with	
1-545	3794-3797	SSH	
1-546	3798-3807	Accessing	
1-547	3808-3816	Services	
1-548	3817-3821	with	
1-549	3822-3825	SSH	
1-550	3826-3832	Routes	
1-551	3833-3836	and	
1-552	3837-3844	Domains	
1-553	3845-3856	Configuring	
1-554	3857-3863	Routes	
1-555	3864-3867	and	
1-556	3868-3875	Domains	
1-557	3876-3887	Configuring	
1-558	3888-3890	CF	
1-559	3891-3893	to	
1-560	3894-3899	Route	
1-561	3900-3907	Traffic	
1-562	3908-3910	to	
1-563	3911-3915	Apps	
1-564	3916-3918	on	
1-565	3919-3925	Custom	
1-566	3926-3931	Ports	
1-567	3932-3940	Managing	
1-568	3941-3949	Services	
1-569	3950-3958	Services	
1-570	3959-3967	Overview	
1-571	3968-3976	Managing	
1-572	3977-3984	Service	
1-573	3985-3994	Instances	
1-574	3995-4002	Sharing	
1-575	4003-4010	Service	
1-576	4011-4020	Instances	
1-577	4021-4031	Delivering	
1-578	4032-4039	Service	
1-579	4040-4051	Credentials	
1-580	4052-4054	to	
1-581	4055-4057	an	
1-582	4058-4061	App	
1-583	4062-4070	Managing	
1-584	4071-4078	Service	
1-585	4079-4083	Keys	
1-586	4084-4095	Configuring	
1-587	4096-4100	Play	
1-588	4101-4110	Framework	
1-589	4111-4118	Service	
1-590	4119-4130	Connections	
1-591	4131-4136	Using	
1-592	4137-4139	an	
1-593	4140-4148	External	
1-594	4149-4153	File	
1-595	4154-4160	System	
1-596	4161-4162	(	
1-597	4162-4168	Volume	
1-598	4169-4177	Services	
1-599	4177-4178	)	
1-600	4179-4192	User-Provided	
1-601	4193-4200	Service	
1-602	4201-4210	Instances	
1-603	4211-4220	Streaming	
1-604	4221-4224	App	
1-605	4225-4229	Logs	
1-606	4230-4239	Streaming	
1-607	4240-4243	App	
1-608	4244-4248	Logs	
1-609	4249-4251	to	
1-610	4252-4255	Log	
1-611	4256-4266	Management	
1-612	4267-4275	Services	
1-613	4276-4292	Service-Specific	
1-614	4293-4305	Instructions	
1-615	4306-4309	for	
1-616	4310-4319	Streaming	
1-617	4320-4323	App	
1-618	4324-4328	Logs	
1-619	4329-4338	Streaming	
1-620	4339-4342	App	
1-621	4343-4347	Logs	
1-622	4348-4350	to	
1-623	4351-4357	Splunk	
1-624	4358-4367	Streaming	
1-625	4368-4371	App	
1-626	4372-4376	Logs	
1-627	4377-4381	with	
1-628	4382-4389	Fluentd	
1-629	4390-4399	Streaming	
1-630	4400-4403	App	
1-631	4404-4408	Logs	
1-632	4409-4411	to	
1-633	4412-4417	Azure	
1-634	4418-4421	OMS	
1-635	4422-4425	Log	
1-636	4426-4435	Analytics	
1-637	4436-4444	Managing	
1-638	4445-4449	Apps	
1-639	4450-4454	with	
1-640	4455-4458	the	
1-641	4459-4461	cf	
1-642	4462-4465	CLI	
1-643	4466-4473	Running	
1-644	4474-4479	Tasks	
1-645	4480-4487	Scaling	
1-646	4488-4490	an	
1-647	4491-4494	App	
1-648	4495-4500	Using	
1-649	4501-4503	cf	
1-650	4504-4509	scale	
1-651	4510-4515	Using	
1-652	4516-4519	App	
1-653	4520-4526	Health	
1-654	4527-4533	Checks	
1-655	4534-4545	Configuring	
1-656	4546-4568	Container-to-Container	
1-657	4569-4579	Networking	
1-658	4580-4582	CF	
1-659	4583-4594	Environment	
1-660	4595-4604	Variables	
1-661	4605-4610	Cloud	
1-662	4611-4621	Controller	
1-663	4622-4625	API	
1-664	4626-4632	Client	
1-665	4633-4642	Libraries	
1-666	4643-4657	Considerations	
1-667	4658-4661	for	
1-668	4662-4671	Designing	
1-669	4672-4675	and	
1-670	4676-4683	Running	
1-671	4684-4686	an	
1-672	4687-4690	App	
1-673	4691-4693	in	
1-674	4694-4697	the	
1-675	4698-4703	Cloud	
1-676	4704-4707	App	
1-677	4708-4717	Revisions	
1-678	4718-4728	Buildpacks	
1-679	4729-4734	About	
1-680	4735-4745	Buildpacks	
1-681	4746-4749	How	
1-682	4750-4760	Buildpacks	
1-683	4761-4765	Work	
1-684	4766-4771	Stack	
1-685	4772-4783	Association	
1-686	4784-4791	Pushing	
1-687	4792-4794	an	
1-688	4795-4798	App	
1-689	4799-4803	with	
1-690	4804-4812	Multiple	
1-691	4813-4823	Buildpacks	
1-692	4824-4829	Using	
1-693	4830-4831	a	
1-694	4832-4837	Proxy	
1-695	4838-4847	Supported	
1-696	4848-4854	Binary	
1-697	4855-4867	Dependencies	
1-698	4868-4878	Production	
1-699	4879-4885	Server	
1-700	4886-4899	Configuration	
1-701	4900-4906	Binary	
1-702	4907-4910	HWC	
1-703	4911-4915	Java	
1-704	4916-4920	Tips	
1-705	4921-4924	for	
1-706	4925-4929	Java	
1-707	4930-4940	Developers	
1-708	4941-4948	Getting	
1-709	4949-4956	Started	
1-710	4957-4966	Deploying	
1-711	4967-4971	Apps	
1-712	4972-4978	Grails	
1-713	4979-4986	Ratpack	
1-714	4987-4993	Spring	
1-715	4994-5005	Configuring	
1-716	5006-5013	Service	
1-717	5014-5025	Connections	
1-718	5026-5032	Grails	
1-719	5033-5037	Play	
1-720	5038-5044	Spring	
1-721	5045-5050	Cloud	
1-722	5051-5058	Foundry	
1-723	5059-5063	Java	
1-724	5064-5070	Client	
1-725	5071-5078	Library	
1-726	5079-5080	.	
1-727	5080-5083	NET	
1-728	5084-5088	Core	
1-729	5089-5094	NGINX	
1-730	5095-5104	Buildpack	
1-731	5105-5112	Node.js	
1-732	5113-5117	Tips	
1-733	5118-5121	for	
1-734	5122-5129	Node.js	
1-735	5130-5140	Developers	
1-736	5141-5152	Environment	
1-737	5153-5162	Variables	
1-738	5163-5170	Defined	
1-739	5171-5173	by	
1-740	5174-5177	the	
1-741	5178-5182	Node	
1-742	5183-5192	Buildpack	
1-743	5193-5204	Configuring	
1-744	5205-5212	Service	
1-745	5213-5224	Connections	
1-746	5225-5228	for	
1-747	5229-5236	Node.js	
1-748	5237-5240	PHP	
1-749	5241-5245	Tips	
1-750	5246-5249	for	
1-751	5250-5253	PHP	
1-752	5254-5264	Developers	
1-753	5265-5272	Getting	
1-754	5273-5280	Started	
1-755	5281-5290	Deploying	
1-756	5291-5294	PHP	
1-757	5295-5299	Apps	
1-758	5300-5303	PHP	
1-759	5304-5313	Buildpack	
1-760	5314-5327	Configuration	
1-761	5328-5336	Composer	
1-762	5337-5345	Sessions	
1-763	5346-5349	New	
1-764	5350-5355	Relic	
1-765	5356-5362	Python	
1-766	5363-5367	Ruby	
1-767	5368-5372	Tips	
1-768	5373-5376	for	
1-769	5377-5381	Ruby	
1-770	5382-5392	Developers	
1-771	5393-5400	Getting	
1-772	5401-5408	Started	
1-773	5409-5418	Deploying	
1-774	5419-5423	Apps	
1-775	5424-5428	Ruby	
1-776	5429-5433	Ruby	
1-777	5434-5436	on	
1-778	5437-5442	Rails	
1-779	5443-5452	Configure	
1-780	5453-5457	Rake	
1-781	5458-5463	Tasks	
1-782	5464-5467	for	
1-783	5468-5476	Deployed	
1-784	5477-5481	Apps	
1-785	5482-5493	Environment	
1-786	5494-5503	Variables	
1-787	5504-5511	Defined	
1-788	5512-5514	by	
1-789	5515-5518	the	
1-790	5519-5523	Ruby	
1-791	5524-5533	Buildpack	
1-792	5534-5543	Configure	
1-793	5544-5551	Service	
1-794	5552-5563	Connections	
1-795	5564-5567	for	
1-796	5568-5572	Ruby	
1-797	5573-5580	Support	
1-798	5581-5584	for	
1-799	5585-5592	Windows	
1-800	5593-5601	Gemfiles	
1-801	5602-5612	Staticfile	
1-802	5613-5624	Customizing	
1-803	5625-5628	and	
1-804	5629-5639	Developing	
1-805	5640-5650	Buildpacks	
1-806	5651-5659	Creating	
1-807	5660-5666	Custom	
1-808	5667-5677	Buildpacks	
1-809	5678-5687	Packaging	
1-810	5688-5700	Dependencies	
1-811	5701-5704	for	
1-812	5705-5712	Offline	
1-813	5713-5723	Buildpacks	
1-814	5724-5731	Merging	
1-815	5732-5736	from	
1-816	5737-5745	Upstream	
1-817	5746-5756	Buildpacks	
1-818	5757-5766	Upgrading	
1-819	5767-5777	Dependency	
1-820	5778-5786	Versions	
1-821	5787-5792	Using	
1-822	5793-5795	CI	
1-823	5796-5799	for	
1-824	5800-5810	Buildpacks	
1-825	5811-5820	Releasing	
1-826	5821-5822	a	
1-827	5823-5826	New	
1-828	5827-5836	Buildpack	
1-829	5837-5844	Version	
1-830	5845-5853	Updating	
1-831	5854-5871	Buildpack-Related	
1-832	5872-5876	Gems	
1-833	5877-5888	Information	
1-834	5889-5892	for	
1-835	5893-5900	Managed	
1-836	5901-5908	Service	
1-837	5909-5916	Authors	
1-838	5917-5925	Services	
1-839	5926-5934	Overview	
1-840	5935-5942	Service	
1-841	5943-5949	Broker	
1-842	5950-5953	API	
1-843	5954-5958	Open	
1-844	5959-5966	Service	
1-845	5967-5973	Broker	
1-846	5974-5977	API	
1-847	5978-5986	Platform	
1-848	5987-5995	Profiles	
1-849	5996-6003	Catalog	
1-850	6004-6012	Metadata	
1-851	6013-6019	Volume	
1-852	6020-6028	Services	
1-853	6029-6036	Release	
1-854	6037-6042	Notes	
1-855	6043-6051	Managing	
1-856	6052-6059	Service	
1-857	6060-6067	Brokers	
1-858	6068-6074	Access	
1-859	6075-6082	Control	
1-860	6083-6090	Binding	
1-861	6091-6102	Credentials	
1-862	6103-6110	CredHub	
1-863	6111-6118	Setting	
1-864	6119-6121	Up	
1-865	6122-6125	and	
1-866	6126-6135	Deploying	
1-867	6136-6143	CredHub	
1-868	6144-6148	with	
1-869	6149-6153	BOSH	
1-870	6154-6165	Configuring	
1-871	6166-6167	a	
1-872	6168-6176	Hardware	
1-873	6177-6185	Security	
1-874	6186-6192	Module	
1-875	6193-6198	Using	
1-876	6199-6200	a	
1-877	6201-6204	Key	
1-878	6205-6215	Management	
1-879	6216-6223	Service	
1-880	6224-6228	with	
1-881	6229-6236	CredHub	
1-882	6237-6244	CredHub	
1-883	6245-6255	Credential	
1-884	6256-6261	Types	
1-885	6262-6269	Backing	
1-886	6270-6272	Up	
1-887	6273-6276	and	
1-888	6277-6286	Restoring	
1-889	6287-6294	CredHub	
1-890	6295-6304	Instances	
1-891	6305-6320	Troubleshooting	
1-892	6321-6328	CredHub	
1-893	6329-6338	Dashboard	
1-894	6339-6345	Single	
1-895	6346-6353	Sign-On	
1-896	6354-6362	Enabling	
1-897	6363-6370	Service	
1-898	6371-6379	Instance	
1-899	6380-6387	Sharing	
1-900	6388-6395	Example	
1-901	6396-6403	Service	
1-902	6404-6411	Brokers	
1-903	6412-6415	App	
1-904	6416-6419	Log	
1-905	6420-6429	Streaming	
1-906	6430-6435	Route	
1-907	6436-6444	Services	
1-908	6445-6455	Supporting	
1-909	6456-6464	Multiple	
1-910	6465-6467	CF	
1-911	6468-6477	Instances	
1-912	6478-6481	API	
1-913	6482-6491	Reference	
1-914	6492-6495	UAA	
1-915	6496-6499	API	
1-916	6500-6504	CAPI	
1-917	6505-6508	API	
1-918	6509-6515	Client	
1-919	6516-6525	Libraries	
1-920	6526-6530	Rate	
1-921	6531-6536	Limit	
1-922	6537-6548	Information	
1-923	6549-6557	Returned	
1-924	6558-6560	by	
1-925	6561-6564	the	
1-926	6565-6570	Cloud	
1-927	6571-6581	Controller	
1-928	6582-6585	API	
1-929	6586-6590	CAPI	
1-930	6591-6593	V2	
1-931	6594-6598	CAPI	
1-932	6599-6601	V3	
1-933	6602-6606	Tips	
1-934	6607-6610	for	
1-935	6611-6615	Java	
1-936	6616-6626	Developers	
1-937	6627-6631	Java	
1-938	6632-6641	Buildpack	
1-939	6642-6648	Design	
1-940	6649-6662	Configuration	
1-941	6663-6667	Java	
1-942	6668-6674	Client	
1-943	6675-6682	Library	
1-944	6683-6689	Grails	
1-945	6690-6696	Groovy	
1-946	6697-6704	Ratpack	
1-947	6705-6708	Raw	
1-948	6709-6715	Groovy	
1-949	6716-6720	Java	
1-950	6721-6725	Main	
1-951	6726-6731	Maven	
1-952	6732-6738	Gradle	
1-953	6739-6743	Play	
1-954	6744-6753	Framework	
1-955	6754-6760	Spring	
1-956	6761-6765	Boot	
1-957	6766-6769	CLI	
1-958	6770-6777	Servlet	
1-959	6778-6783	Maven	
1-960	6784-6790	Gradle	
1-961	6791-6798	Binding	
1-962	6799-6801	to	
1-963	6802-6810	Services	
1-964	6811-6815	Java	
1-965	6816-6819	and	
1-966	6820-6826	Grails	
1-967	6827-6831	Best	
1-968	6832-6841	Practices	
1-969	6842-6849	Provide	
1-970	6850-6851	a	
1-971	6852-6856	JDBC	
1-972	6857-6863	Driver	
1-973	6864-6872	Allocate	
1-974	6873-6883	Sufficient	
1-975	6884-6890	Memory	
1-976	6891-6903	Troubleshoot	
1-977	6904-6907	Out	
1-978	6908-6910	of	
1-979	6911-6917	Memory	
1-980	6918-6930	Troubleshoot	
1-981	6931-6937	Failed	
1-982	6938-6944	Upload	
1-983	6945-6950	Debug	
1-984	6951-6955	Java	
1-985	6956-6960	Apps	
1-986	6961-6963	on	
1-987	6964-6969	Cloud	
1-988	6970-6977	Foundry	
1-989	6978-6982	Slow	
1-990	6983-6991	Starting	
1-991	6992-6996	Java	
1-992	6997-6999	or	
1-993	7000-7006	Grails	
1-994	7007-7011	Apps	
1-995	7012-7021	Extension	
1-996	7022-7033	Environment	
1-997	7034-7043	Variables	
1-998	7044-7048	Page	
1-999	7049-7053	last	
1-1000	7054-7061	updated	
1-1001	7061-7062	:	
1-1002	7063-7068	Cloud	
1-1003	7069-7076	Foundry	
1-1004	7077-7080	can	
1-1005	7081-7087	deploy	
1-1006	7088-7089	a	
1-1007	7090-7096	number	
1-1008	7097-7099	of	
1-1009	7100-7109	different	
1-1010	7110-7119	JVM-based	
1-1011	7120-7128	artifact	
1-1012	7129-7134	types	
1-1013	7134-7135	.	

#Text=For a more detailed explanation of what it supports, see Additional Documentation in the Cloud Foundry Java Buildpack repository on GitHub.
2-1	7136-7139	For	
2-2	7140-7141	a	
2-3	7142-7146	more	
2-4	7147-7155	detailed	
2-5	7156-7167	explanation	
2-6	7168-7170	of	
2-7	7171-7175	what	
2-8	7176-7178	it	
2-9	7179-7187	supports	
2-10	7187-7188	,	
2-11	7189-7192	see	
2-12	7193-7203	Additional	
2-13	7204-7217	Documentation	
2-14	7218-7220	in	
2-15	7221-7224	the	
2-16	7225-7230	Cloud	
2-17	7231-7238	Foundry	
2-18	7239-7243	Java	
2-19	7244-7253	Buildpack	
2-20	7254-7264	repository	
2-21	7265-7267	on	
2-22	7268-7274	GitHub	
2-23	7274-7275	.	

#Text=Java Buildpack
#Text=For information about using, configuring, and extending the Cloud Foundry Java buildpack, see the Cloud Foundry Java Buildpack repository on GitHub.
3-1	7276-7280	Java	
3-2	7281-7290	Buildpack	
3-3	7291-7294	For	
3-4	7295-7306	information	
3-5	7307-7312	about	
3-6	7313-7318	using	
3-7	7318-7319	,	
3-8	7320-7331	configuring	
3-9	7331-7332	,	
3-10	7333-7336	and	
3-11	7337-7346	extending	
3-12	7347-7350	the	
3-13	7351-7356	Cloud	
3-14	7357-7364	Foundry	
3-15	7365-7369	Java	
3-16	7370-7379	buildpack	
3-17	7379-7380	,	
3-18	7381-7384	see	
3-19	7385-7388	the	
3-20	7389-7394	Cloud	
3-21	7395-7402	Foundry	
3-22	7403-7407	Java	
3-23	7408-7417	Buildpack	
3-24	7418-7428	repository	
3-25	7429-7431	on	
3-26	7432-7438	GitHub	
3-27	7438-7439	.	

#Text=Design
#Text=The Java buildpack is designed to convert artifacts that run on the JVM into executable apps.
4-1	7440-7446	Design	
4-2	7447-7450	The	
4-3	7451-7455	Java	
4-4	7456-7465	buildpack	
4-5	7466-7468	is	
4-6	7469-7477	designed	
4-7	7478-7480	to	
4-8	7481-7488	convert	
4-9	7489-7498	artifacts	
4-10	7499-7503	that	
4-11	7504-7507	run	
4-12	7508-7510	on	
4-13	7511-7514	the	
4-14	7515-7518	JVM	
4-15	7519-7523	into	
4-16	7524-7534	executable	
4-17	7535-7539	apps	
4-18	7539-7540	.	

#Text=It does this by identifying one of the supported artifact types (Grails, Groovy, Java, Play Framework, Spring Boot, and Servlet) and downloading all additional dependencies needed to run.
5-1	7541-7543	It	
5-2	7544-7548	does	
5-3	7549-7553	this	
5-4	7554-7556	by	
5-5	7557-7568	identifying	
5-6	7569-7572	one	
5-7	7573-7575	of	
5-8	7576-7579	the	
5-9	7580-7589	supported	
5-10	7590-7598	artifact	
5-11	7599-7604	types	
5-12	7605-7606	(	
5-13	7606-7612	Grails	
5-14	7612-7613	,	
5-15	7614-7620	Groovy	
5-16	7620-7621	,	
5-17	7622-7626	Java	
5-18	7626-7627	,	
5-19	7628-7632	Play	
5-20	7633-7642	Framework	
5-21	7642-7643	,	
5-22	7644-7650	Spring	
5-23	7651-7655	Boot	
5-24	7655-7656	,	
5-25	7657-7660	and	
5-26	7661-7668	Servlet	
5-27	7668-7669	)	
5-28	7670-7673	and	
5-29	7674-7685	downloading	
5-30	7686-7689	all	
5-31	7690-7700	additional	
5-32	7701-7713	dependencies	
5-33	7714-7720	needed	
5-34	7721-7723	to	
5-35	7724-7727	run	
5-36	7727-7728	.	

#Text=It also analyzes the collection of services bound to the app and downloads any dependencies related to those services.
6-1	7729-7731	It	
6-2	7732-7736	also	
6-3	7737-7745	analyzes	
6-4	7746-7749	the	
6-5	7750-7760	collection	
6-6	7761-7763	of	
6-7	7764-7772	services	
6-8	7773-7778	bound	
6-9	7779-7781	to	
6-10	7782-7785	the	
6-11	7786-7789	app	
6-12	7790-7793	and	
6-13	7794-7803	downloads	
6-14	7804-7807	any	
6-15	7808-7820	dependencies	
6-16	7821-7828	related	
6-17	7829-7831	to	
6-18	7832-7837	those	
6-19	7838-7846	services	
6-20	7846-7847	.	

#Text=As an example, pushing a WAR file that is bound to a PostgreSQL database and New Relic for performance monitoring results in the following:
#Text=Initialized empty Git repository in /tmp/buildpacks/java-buildpack/.git/
#Text=--> Java Buildpack source: https://github.com/cloudfoundry/java-buildpack#0928916a2dd78e9faf9469c558046eef09f60e5d
#Text=--> Downloading Open Jdk JRE 1.7.0_51 from
#Text=http://...
7-1	7848-7850	As	
7-2	7851-7853	an	
7-3	7854-7861	example	
7-4	7861-7862	,	
7-5	7863-7870	pushing	
7-6	7871-7872	a	
7-7	7873-7876	WAR	
7-8	7877-7881	file	
7-9	7882-7886	that	
7-10	7887-7889	is	
7-11	7890-7895	bound	
7-12	7896-7898	to	
7-13	7899-7900	a	
7-14	7901-7911	PostgreSQL	
7-15	7912-7920	database	
7-16	7921-7924	and	
7-17	7925-7928	New	
7-18	7929-7934	Relic	
7-19	7935-7938	for	
7-20	7939-7950	performance	
7-21	7951-7961	monitoring	
7-22	7962-7969	results	
7-23	7970-7972	in	
7-24	7973-7976	the	
7-25	7977-7986	following	
7-26	7986-7987	:	
7-27	7988-7999	Initialized	
7-28	8000-8005	empty	
7-29	8006-8009	Git	
7-30	8010-8020	repository	
7-31	8021-8023	in	
7-32	8024-8025	/	
7-33	8025-8028	tmp	
7-34	8028-8029	/	
7-35	8029-8039	buildpacks	
7-36	8039-8040	/	
7-37	8040-8054	java-buildpack	
7-38	8054-8055	/	
7-39	8055-8056	.	
7-40	8056-8059	git	
7-41	8059-8060	/	
7-42	8061-8062	-	
7-43	8062-8063	-	
7-44	8063-8064	>	
7-45	8065-8069	Java	
7-46	8070-8079	Buildpack	
7-47	8080-8086	source	
7-48	8086-8087	:	
7-49	8088-8093	https	
7-50	8093-8094	:	
7-51	8094-8095	/	
7-52	8095-8096	/	
7-53	8096-8106	github.com	
7-54	8106-8107	/	
7-55	8107-8119	cloudfoundry	
7-56	8119-8120	/	
7-57	8120-8134	java-buildpack	
7-58	8134-8175	#0928916a2dd78e9faf9469c558046eef09f60e5d	
7-59	8176-8177	-	
7-60	8177-8178	-	
7-61	8178-8179	>	
7-62	8180-8191	Downloading	
7-63	8192-8196	Open	
7-64	8197-8200	Jdk	
7-65	8201-8204	JRE	
7-66	8205-8210	1.7.0	
7-67	8210-8211	_	
7-68	8211-8213	51	
7-69	8214-8218	from	
7-70	8219-8223	http	
7-71	8223-8224	:	
7-72	8224-8225	/	
7-73	8225-8226	/	
7-74	8226-8227	.	
7-75	8227-8228	.	
7-76	8228-8229	.	

#Text=/openjdk/lucid/x86_64/openjdk-1.7.0_51.tar.gz (0.0s)
#Text=Expanding Open Jdk JRE to .java-buildpack/open_jdk_jre (1.9s)
#Text=--> Downloading New Relic Agent 3.4.1 from
#Text=http://...
8-1	8229-8230	/	
8-2	8230-8237	openjdk	
8-3	8237-8238	/	
8-4	8238-8243	lucid	
8-5	8243-8244	/	
8-6	8244-8247	x86	
8-7	8247-8248	_	
8-8	8248-8250	64	
8-9	8250-8251	/	
8-10	8251-8258	openjdk	
8-11	8258-8259	-	
8-12	8259-8264	1.7.0	
8-13	8264-8265	_	
8-14	8265-8267	51	
8-15	8267-8268	.	
8-16	8268-8274	tar.gz	
8-17	8275-8276	(	
8-18	8276-8280	0.0s	
8-19	8280-8281	)	
8-20	8282-8291	Expanding	
8-21	8292-8296	Open	
8-22	8297-8300	Jdk	
8-23	8301-8304	JRE	
8-24	8305-8307	to	
8-25	8308-8309	.	
8-26	8309-8323	java-buildpack	
8-27	8323-8324	/	
8-28	8324-8336	open_jdk_jre	
8-29	8337-8338	(	
8-30	8338-8342	1.9s	
8-31	8342-8343	)	
8-32	8344-8345	-	
8-33	8345-8346	-	
8-34	8346-8347	>	
8-35	8348-8359	Downloading	
8-36	8360-8363	New	
8-37	8364-8369	Relic	
8-38	8370-8375	Agent	
8-39	8376-8381	3.4.1	
8-40	8382-8386	from	
8-41	8387-8391	http	
8-42	8391-8392	:	
8-43	8392-8393	/	
8-44	8393-8394	/	
8-45	8394-8395	.	
8-46	8395-8396	.	
8-47	8396-8397	.	

#Text=/new-relic/new-relic-3.4.1.jar (0.4s)
#Text=--> Downloading Postgresql JDBC 9.3.1100 from
#Text=http://...
9-1	8397-8398	/	
9-2	8398-8407	new-relic	
9-3	8407-8408	/	
9-4	8408-8417	new-relic	
9-5	8417-8418	-	
9-6	8418-8423	3.4.1	
9-7	8423-8424	.	
9-8	8424-8427	jar	
9-9	8428-8429	(	
9-10	8429-8433	0.4s	
9-11	8433-8434	)	
9-12	8435-8436	-	
9-13	8436-8437	-	
9-14	8437-8438	>	
9-15	8439-8450	Downloading	
9-16	8451-8461	Postgresql	
9-17	8462-8466	JDBC	
9-18	8467-8475	9.3.1100	
9-19	8476-8480	from	
9-20	8481-8485	http	
9-21	8485-8486	:	
9-22	8486-8487	/	
9-23	8487-8488	/	
9-24	8488-8489	.	
9-25	8489-8490	.	
9-26	8490-8491	.	

#Text=/postgresql-jdbc/postgresql-jdbc-9.3.1100.jar (0.0s)
#Text=--> Downloading Spring Auto Reconfiguration 0.8.7 from
#Text=http://...
10-1	8491-8492	/	
10-2	8492-8507	postgresql-jdbc	
10-3	8507-8508	/	
10-4	8508-8523	postgresql-jdbc	
10-5	8523-8524	-	
10-6	8524-8532	9.3.1100	
10-7	8532-8533	.	
10-8	8533-8536	jar	
10-9	8537-8538	(	
10-10	8538-8542	0.0s	
10-11	8542-8543	)	
10-12	8544-8545	-	
10-13	8545-8546	-	
10-14	8546-8547	>	
10-15	8548-8559	Downloading	
10-16	8560-8566	Spring	
10-17	8567-8571	Auto	
10-18	8572-8587	Reconfiguration	
10-19	8588-8593	0.8.7	
10-20	8594-8598	from	
10-21	8599-8603	http	
10-22	8603-8604	:	
10-23	8604-8605	/	
10-24	8605-8606	/	
10-25	8606-8607	.	
10-26	8607-8608	.	
10-27	8608-8609	.	

#Text=/auto-reconfiguration/auto-reconfiguration-0.8.7.jar (0.0s)
#Text=Modifying /WEB-INF/web.xml for Auto Reconfiguration
#Text=--> Downloading Tomcat 7.0.50 from
#Text=http://...
11-1	8609-8610	/	
11-2	8610-8630	auto-reconfiguration	
11-3	8630-8631	/	
11-4	8631-8651	auto-reconfiguration	
11-5	8651-8652	-	
11-6	8652-8657	0.8.7	
11-7	8657-8658	.	
11-8	8658-8661	jar	
11-9	8662-8663	(	
11-10	8663-8667	0.0s	
11-11	8667-8668	)	
11-12	8669-8678	Modifying	
11-13	8679-8680	/	
11-14	8680-8687	WEB-INF	
11-15	8687-8688	/	
11-16	8688-8695	web.xml	
11-17	8696-8699	for	
11-18	8700-8704	Auto	
11-19	8705-8720	Reconfiguration	
11-20	8721-8722	-	
11-21	8722-8723	-	
11-22	8723-8724	>	
11-23	8725-8736	Downloading	
11-24	8737-8743	Tomcat	
11-25	8744-8750	7.0.50	
11-26	8751-8755	from	
11-27	8756-8760	http	
11-28	8760-8761	:	
11-29	8761-8762	/	
11-30	8762-8763	/	
11-31	8763-8764	.	
11-32	8764-8765	.	
11-33	8765-8766	.	

#Text=/tomcat/tomcat-7.0.50.tar.gz (0.0s)
#Text=Expanding Tomcat to .java-buildpack/tomcat (0.1s)
#Text=--> Downloading Buildpack Tomcat Support 1.1.1 from
#Text=http://...
12-1	8766-8767	/	
12-2	8767-8773	tomcat	
12-3	8773-8774	/	
12-4	8774-8780	tomcat	
12-5	8780-8781	-	
12-6	8781-8787	7.0.50	
12-7	8787-8788	.	
12-8	8788-8794	tar.gz	
12-9	8795-8796	(	
12-10	8796-8800	0.0s	
12-11	8800-8801	)	
12-12	8802-8811	Expanding	
12-13	8812-8818	Tomcat	
12-14	8819-8821	to	
12-15	8822-8823	.	
12-16	8823-8837	java-buildpack	
12-17	8837-8838	/	
12-18	8838-8844	tomcat	
12-19	8845-8846	(	
12-20	8846-8850	0.1s	
12-21	8850-8851	)	
12-22	8852-8853	-	
12-23	8853-8854	-	
12-24	8854-8855	>	
12-25	8856-8867	Downloading	
12-26	8868-8877	Buildpack	
12-27	8878-8884	Tomcat	
12-28	8885-8892	Support	
12-29	8893-8898	1.1.1	
12-30	8899-8903	from	
12-31	8904-8908	http	
12-32	8908-8909	:	
12-33	8909-8910	/	
12-34	8910-8911	/	
12-35	8911-8912	.	
12-36	8912-8913	.	
12-37	8913-8914	.	

#Text=/tomcat-buildpack-support/tomcat-buildpack-support-1.1.1.jar (0.1s)
#Text=--> Uploading droplet (57M)
#Text=Configuration
#Text=In most cases, the buildpack should work without any configuration.
13-1	8914-8915	/	
13-2	8915-8939	tomcat-buildpack-support	
13-3	8939-8940	/	
13-4	8940-8964	tomcat-buildpack-support	
13-5	8964-8965	-	
13-6	8965-8970	1.1.1	
13-7	8970-8971	.	
13-8	8971-8974	jar	
13-9	8975-8976	(	
13-10	8976-8980	0.1s	
13-11	8980-8981	)	
13-12	8982-8983	-	
13-13	8983-8984	-	
13-14	8984-8985	>	
13-15	8986-8995	Uploading	
13-16	8996-9003	droplet	
13-17	9004-9005	(	
13-18	9005-9008	57M	
13-19	9008-9009	)	
13-20	9010-9023	Configuration	
13-21	9024-9026	In	
13-22	9027-9031	most	
13-23	9032-9037	cases	
13-24	9037-9038	,	
13-25	9039-9042	the	
13-26	9043-9052	buildpack	
13-27	9053-9059	should	
13-28	9060-9064	work	
13-29	9065-9072	without	
13-30	9073-9076	any	
13-31	9077-9090	configuration	
13-32	9090-9091	.	

#Text=If you are new to Cloud Foundry, Cloud Foundry recommends that you make your first attempts without modifying the buildpack configuration.
14-1	9092-9094	If	
14-2	9095-9098	you	
14-3	9099-9102	are	
14-4	9103-9106	new	
14-5	9107-9109	to	
14-6	9110-9115	Cloud	
14-7	9116-9123	Foundry	
14-8	9123-9124	,	
14-9	9125-9130	Cloud	
14-10	9131-9138	Foundry	
14-11	9139-9149	recommends	
14-12	9150-9154	that	
14-13	9155-9158	you	
14-14	9159-9163	make	
14-15	9164-9168	your	
14-16	9169-9174	first	
14-17	9175-9183	attempts	
14-18	9184-9191	without	
14-19	9192-9201	modifying	
14-20	9202-9205	the	
14-21	9206-9215	buildpack	
14-22	9216-9229	configuration	
14-23	9229-9230	.	

#Text=If the buildpack requires some configuration, use a fork of the buildpack.
15-1	9231-9233	If	
15-2	9234-9237	the	
15-3	9238-9247	buildpack	
15-4	9248-9256	requires	
15-5	9257-9261	some	
15-6	9262-9275	configuration	
15-7	9275-9276	,	
15-8	9277-9280	use	
15-9	9281-9282	a	
15-10	9283-9287	fork	
15-11	9288-9290	of	
15-12	9291-9294	the	
15-13	9295-9304	buildpack	
15-14	9304-9305	.	

#Text=For more information, see Configuration and Extension in the Cloud Foundry Java Buildpack repository on GitHub.
16-1	9306-9309	For	
16-2	9310-9314	more	
16-3	9315-9326	information	
16-4	9326-9327	,	
16-5	9328-9331	see	
16-6	9332-9345	Configuration	
16-7	9346-9349	and	
16-8	9350-9359	Extension	
16-9	9360-9362	in	
16-10	9363-9366	the	
16-11	9367-9372	Cloud	
16-12	9373-9380	Foundry	
16-13	9381-9385	Java	
16-14	9386-9395	Buildpack	
16-15	9396-9406	repository	
16-16	9407-9409	on	
16-17	9410-9416	GitHub	
16-18	9416-9417	.	

#Text=Java Client Library
#Text=The Cloud Foundry Client Library provides a Java API for interacting with a Cloud Foundry instance.
17-1	9418-9422	Java	
17-2	9423-9429	Client	
17-3	9430-9437	Library	
17-4	9438-9441	The	
17-5	9442-9447	Cloud	
17-6	9448-9455	Foundry	
17-7	9456-9462	Client	
17-8	9463-9470	Library	
17-9	9471-9479	provides	
17-10	9480-9481	a	
17-11	9482-9486	Java	
17-12	9487-9490	API	
17-13	9491-9494	for	
17-14	9495-9506	interacting	
17-15	9507-9511	with	
17-16	9512-9513	a	
17-17	9514-9519	Cloud	
17-18	9520-9527	Foundry	
17-19	9528-9536	instance	
17-20	9536-9537	.	

#Text=This library, cloudfoundry-client-lib, is used by the Cloud Foundry Maven plugin, the Cloud Foundry Gradle plugin, and other Java-based tools.
18-1	9538-9542	This	
18-2	9543-9550	library	
18-3	9550-9551	,	
18-4	9552-9575	cloudfoundry-client-lib	
18-5	9575-9576	,	
18-6	9577-9579	is	
18-7	9580-9584	used	
18-8	9585-9587	by	
18-9	9588-9591	the	
18-10	9592-9597	Cloud	
18-11	9598-9605	Foundry	
18-12	9606-9611	Maven	
18-13	9612-9618	plugin	
18-14	9618-9619	,	
18-15	9620-9623	the	
18-16	9624-9629	Cloud	
18-17	9630-9637	Foundry	
18-18	9638-9644	Gradle	
18-19	9645-9651	plugin	
18-20	9651-9652	,	
18-21	9653-9656	and	
18-22	9657-9662	other	
18-23	9663-9673	Java-based	
18-24	9674-9679	tools	
18-25	9679-9680	.	

#Text=For information about using this library, see Java Cloud Foundry Library.
19-1	9681-9684	For	
19-2	9685-9696	information	
19-3	9697-9702	about	
19-4	9703-9708	using	
19-5	9709-9713	this	
19-6	9714-9721	library	
19-7	9721-9722	,	
19-8	9723-9726	see	
19-9	9727-9731	Java	
19-10	9732-9737	Cloud	
19-11	9738-9745	Foundry	
19-12	9746-9753	Library	
19-13	9753-9754	.	

#Text=Grails
#Text=Grails packages apps into WAR files for deployment into a Servlet container.
20-1	9755-9761	Grails	
20-2	9762-9768	Grails	
20-3	9769-9777	packages	
20-4	9778-9782	apps	
20-5	9783-9787	into	
20-6	9788-9791	WAR	
20-7	9792-9797	files	
20-8	9798-9801	for	
20-9	9802-9812	deployment	
20-10	9813-9817	into	
20-11	9818-9819	a	
20-12	9820-9827	Servlet	
20-13	9828-9837	container	
20-14	9837-9838	.	

#Text=To build the WAR file and deploy it, run:
#Text=grails prod war
#Text=cf push YOUR-APP -p target/YOUR-APP-VERSION.war
#Text=Where:
#Text=YOUR-APP is the name of your app.
21-1	9839-9841	To	
21-2	9842-9847	build	
21-3	9848-9851	the	
21-4	9852-9855	WAR	
21-5	9856-9860	file	
21-6	9861-9864	and	
21-7	9865-9871	deploy	
21-8	9872-9874	it	
21-9	9874-9875	,	
21-10	9876-9879	run	
21-11	9879-9880	:	
21-12	9881-9887	grails	
21-13	9888-9892	prod	
21-14	9893-9896	war	
21-15	9897-9899	cf	
21-16	9900-9904	push	
21-17	9905-9913	YOUR-APP	
21-18	9914-9915	-	
21-19	9915-9916	p	
21-20	9917-9923	target	
21-21	9923-9924	/	
21-22	9924-9944	YOUR-APP-VERSION.war	
21-23	9945-9950	Where	
21-24	9950-9951	:	
21-25	9952-9960	YOUR-APP	
21-26	9961-9963	is	
21-27	9964-9967	the	
21-28	9968-9972	name	
21-29	9973-9975	of	
21-30	9976-9980	your	
21-31	9981-9984	app	
21-32	9984-9985	.	

#Text=YOUR-APP-VERSION is the name of the WAR file you want to build and deploy.
22-1	9986-10002	YOUR-APP-VERSION	
22-2	10003-10005	is	
22-3	10006-10009	the	
22-4	10010-10014	name	
22-5	10015-10017	of	
22-6	10018-10021	the	
22-7	10022-10025	WAR	
22-8	10026-10030	file	
22-9	10031-10034	you	
22-10	10035-10039	want	
22-11	10040-10042	to	
22-12	10043-10048	build	
22-13	10049-10052	and	
22-14	10053-10059	deploy	
22-15	10059-10060	.	

#Text=Groovy
#Text=Cloud Foundry supports Groovy apps based on both Ratpack and a simple collection of files.
23-1	10061-10067	Groovy	
23-2	10068-10073	Cloud	
23-3	10074-10081	Foundry	
23-4	10082-10090	supports	
23-5	10091-10097	Groovy	
23-6	10098-10102	apps	
23-7	10103-10108	based	
23-8	10109-10111	on	
23-9	10112-10116	both	
23-10	10117-10124	Ratpack	
23-11	10125-10128	and	
23-12	10129-10130	a	
23-13	10131-10137	simple	
23-14	10138-10148	collection	
23-15	10149-10151	of	
23-16	10152-10157	files	
23-17	10157-10158	.	

#Text=Ratpack
#Text=Ratpack packages apps into two different styles.
24-1	10159-10166	Ratpack	
24-2	10167-10174	Ratpack	
24-3	10175-10183	packages	
24-4	10184-10188	apps	
24-5	10189-10193	into	
24-6	10194-10197	two	
24-7	10198-10207	different	
24-8	10208-10214	styles	
24-9	10214-10215	.	

#Text=Cloud Foundry supports the distZip style.
25-1	10216-10221	Cloud	
25-2	10222-10229	Foundry	
25-3	10230-10238	supports	
25-4	10239-10242	the	
25-5	10243-10250	distZip	
25-6	10251-10256	style	
25-7	10256-10257	.	

#Text=To build the ZIP file and deploy it, run:
#Text=gradle distZip
#Text=cf push YOUR-APP -p build/distributions/YOUR-ZIP-FILE.zip
#Text=Where:
#Text=YOUR-APP is the name of your app.
26-1	10258-10260	To	
26-2	10261-10266	build	
26-3	10267-10270	the	
26-4	10271-10274	ZIP	
26-5	10275-10279	file	
26-6	10280-10283	and	
26-7	10284-10290	deploy	
26-8	10291-10293	it	
26-9	10293-10294	,	
26-10	10295-10298	run	
26-11	10298-10299	:	
26-12	10300-10306	gradle	
26-13	10307-10314	distZip	
26-14	10315-10317	cf	
26-15	10318-10322	push	
26-16	10323-10331	YOUR-APP	
26-17	10332-10333	-	
26-18	10333-10334	p	
26-19	10335-10340	build	
26-20	10340-10341	/	
26-21	10341-10354	distributions	
26-22	10354-10355	/	
26-23	10355-10372	YOUR-ZIP-FILE.zip	
26-24	10373-10378	Where	
26-25	10378-10379	:	
26-26	10380-10388	YOUR-APP	
26-27	10389-10391	is	
26-28	10392-10395	the	
26-29	10396-10400	name	
26-30	10401-10403	of	
26-31	10404-10408	your	
26-32	10409-10412	app	
26-33	10412-10413	.	

#Text=YOUR-ZIP-FILE is the name of the ZIP file you want to build and deploy.
27-1	10414-10427	YOUR-ZIP-FILE	
27-2	10428-10430	is	
27-3	10431-10434	the	
27-4	10435-10439	name	
27-5	10440-10442	of	
27-6	10443-10446	the	
27-7	10447-10450	ZIP	
27-8	10451-10455	file	
27-9	10456-10459	you	
27-10	10460-10464	want	
27-11	10465-10467	to	
27-12	10468-10473	build	
27-13	10474-10477	and	
27-14	10478-10484	deploy	
27-15	10484-10485	.	

#Text=For more information, see the Ratpack website.
28-1	10486-10489	For	
28-2	10490-10494	more	
28-3	10495-10506	information	
28-4	10506-10507	,	
28-5	10508-10511	see	
28-6	10512-10515	the	
28-7	10516-10523	Ratpack	
28-8	10524-10531	website	
28-9	10531-10532	.	

#Text=Raw Groovy
#Text=You can run Groovy apps that are made up of a single entry point and any supporting files without any other work.
29-1	10533-10536	Raw	
29-2	10537-10543	Groovy	
29-3	10544-10547	You	
29-4	10548-10551	can	
29-5	10552-10555	run	
29-6	10556-10562	Groovy	
29-7	10563-10567	apps	
29-8	10568-10572	that	
29-9	10573-10576	are	
29-10	10577-10581	made	
29-11	10582-10584	up	
29-12	10585-10587	of	
29-13	10588-10589	a	
29-14	10590-10596	single	
29-15	10597-10602	entry	
29-16	10603-10608	point	
29-17	10609-10612	and	
29-18	10613-10616	any	
29-19	10617-10627	supporting	
29-20	10628-10633	files	
29-21	10634-10641	without	
29-22	10642-10645	any	
29-23	10646-10651	other	
29-24	10652-10656	work	
29-25	10656-10657	.	

#Text=To deploy them, run:
#Text=cf push YOUR-APP
#Text=Where YOUR-APP is the name of your app.
30-1	10658-10660	To	
30-2	10661-10667	deploy	
30-3	10668-10672	them	
30-4	10672-10673	,	
30-5	10674-10677	run	
30-6	10677-10678	:	
30-7	10679-10681	cf	
30-8	10682-10686	push	
30-9	10687-10695	YOUR-APP	
30-10	10696-10701	Where	
30-11	10702-10710	YOUR-APP	
30-12	10711-10713	is	
30-13	10714-10717	the	
30-14	10718-10722	name	
30-15	10723-10725	of	
30-16	10726-10730	your	
30-17	10731-10734	app	
30-18	10734-10735	.	

#Text=For more information, see Groovy Container in the Cloud Foundry Java Buildpack repository on GitHub.
31-1	10736-10739	For	
31-2	10740-10744	more	
31-3	10745-10756	information	
31-4	10756-10757	,	
31-5	10758-10761	see	
31-6	10762-10768	Groovy	
31-7	10769-10778	Container	
31-8	10779-10781	in	
31-9	10782-10785	the	
31-10	10786-10791	Cloud	
31-11	10792-10799	Foundry	
31-12	10800-10804	Java	
31-13	10805-10814	Buildpack	
31-14	10815-10825	repository	
31-15	10826-10828	on	
31-16	10829-10835	GitHub	
31-17	10835-10836	.	

#Text=Java Main
#Text=Java apps with a main() method can be run provided that they are packaged as self-executable JARs.
32-1	10837-10841	Java	
32-2	10842-10846	Main	
32-3	10847-10851	Java	
32-4	10852-10856	apps	
32-5	10857-10861	with	
32-6	10862-10863	a	
32-7	10864-10868	main	
32-8	10868-10869	(	
32-9	10869-10870	)	
32-10	10871-10877	method	
32-11	10878-10881	can	
32-12	10882-10884	be	
32-13	10885-10888	run	
32-14	10889-10897	provided	
32-15	10898-10902	that	
32-16	10903-10907	they	
32-17	10908-10911	are	
32-18	10912-10920	packaged	
32-19	10921-10923	as	
32-20	10924-10939	self-executable	
32-21	10940-10944	JARs	
32-22	10944-10945	.	

#Text=For more information, see Java Main Container in the Cloud Foundry Java Buildpack repository on GitHub.
33-1	10946-10949	For	
33-2	10950-10954	more	
33-3	10955-10966	information	
33-4	10966-10967	,	
33-5	10968-10971	see	
33-6	10972-10976	Java	
33-7	10977-10981	Main	
33-8	10982-10991	Container	
33-9	10992-10994	in	
33-10	10995-10998	the	
33-11	10999-11004	Cloud	
33-12	11005-11012	Foundry	
33-13	11013-11017	Java	
33-14	11018-11027	Buildpack	
33-15	11028-11038	repository	
33-16	11039-11041	on	
33-17	11042-11048	GitHub	
33-18	11048-11049	.	

#Text=Note: If your app is not web-enabled, you must suppress route creation to avoid a failed to start accepting connections error.
34-1	11050-11054	Note	
34-2	11054-11055	:	
34-3	11056-11058	If	
34-4	11059-11063	your	
34-5	11064-11067	app	
34-6	11068-11070	is	
34-7	11071-11074	not	
34-8	11075-11086	web-enabled	
34-9	11086-11087	,	
34-10	11088-11091	you	
34-11	11092-11096	must	
34-12	11097-11105	suppress	
34-13	11106-11111	route	
34-14	11112-11120	creation	
34-15	11121-11123	to	
34-16	11124-11129	avoid	
34-17	11130-11131	a	
34-18	11132-11138	failed	
34-19	11139-11141	to	
34-20	11142-11147	start	
34-21	11148-11157	accepting	
34-22	11158-11169	connections	
34-23	11170-11175	error	
34-24	11175-11176	.	

#Text=To suppress route creation, add no-route: true to the app manifest or use the --no-route flag with the cf push command.
35-1	11177-11179	To	
35-2	11180-11188	suppress	
35-3	11189-11194	route	
35-4	11195-11203	creation	
35-5	11203-11204	,	
35-6	11205-11208	add	
35-7	11209-11217	no-route	
35-8	11217-11218	:	
35-9	11219-11223	true	
35-10	11224-11226	to	
35-11	11227-11230	the	
35-12	11231-11234	app	
35-13	11235-11243	manifest	
35-14	11244-11246	or	
35-15	11247-11250	use	
35-16	11251-11254	the	
35-17	11255-11256	-	
35-18	11256-11257	-	
35-19	11257-11265	no-route	
35-20	11266-11270	flag	
35-21	11271-11275	with	
35-22	11276-11279	the	
35-23	11280-11282	cf	
35-24	11283-11287	push	
35-25	11288-11295	command	
35-26	11295-11296	.	

#Text=For more information about the no-route attribute, see Deploying with App Manifests.
36-1	11297-11300	For	
36-2	11301-11305	more	
36-3	11306-11317	information	
36-4	11318-11323	about	
36-5	11324-11327	the	
36-6	11328-11336	no-route	
36-7	11337-11346	attribute	
36-8	11346-11347	,	
36-9	11348-11351	see	
36-10	11352-11361	Deploying	
36-11	11362-11366	with	
36-12	11367-11370	App	
36-13	11371-11380	Manifests	
36-14	11380-11381	.	

#Text=Maven
#Text=A Maven build can create a self-executable JAR.
37-1	11382-11387	Maven	
37-2	11388-11389	A	
37-3	11390-11395	Maven	
37-4	11396-11401	build	
37-5	11402-11405	can	
37-6	11406-11412	create	
37-7	11413-11414	a	
37-8	11415-11430	self-executable	
37-9	11431-11434	JAR	
37-10	11434-11435	.	

#Text=To build and deploy the JAR, run:
#Text=mvn package
#Text=cf push YOUR-APP -p target/YOUR-APP-VERSION.jar
#Text=Where:
#Text=YOUR-APP is the name of your app.
38-1	11436-11438	To	
38-2	11439-11444	build	
38-3	11445-11448	and	
38-4	11449-11455	deploy	
38-5	11456-11459	the	
38-6	11460-11463	JAR	
38-7	11463-11464	,	
38-8	11465-11468	run	
38-9	11468-11469	:	
38-10	11470-11473	mvn	
38-11	11474-11481	package	
38-12	11482-11484	cf	
38-13	11485-11489	push	
38-14	11490-11498	YOUR-APP	
38-15	11499-11500	-	
38-16	11500-11501	p	
38-17	11502-11508	target	
38-18	11508-11509	/	
38-19	11509-11529	YOUR-APP-VERSION.jar	
38-20	11530-11535	Where	
38-21	11535-11536	:	
38-22	11537-11545	YOUR-APP	
38-23	11546-11548	is	
38-24	11549-11552	the	
38-25	11553-11557	name	
38-26	11558-11560	of	
38-27	11561-11565	your	
38-28	11566-11569	app	
38-29	11569-11570	.	

#Text=YOUR-APP-VERSION is the name of the JAR you want to build and deploy.
39-1	11571-11587	YOUR-APP-VERSION	
39-2	11588-11590	is	
39-3	11591-11594	the	
39-4	11595-11599	name	
39-5	11600-11602	of	
39-6	11603-11606	the	
39-7	11607-11610	JAR	
39-8	11611-11614	you	
39-9	11615-11619	want	
39-10	11620-11622	to	
39-11	11623-11628	build	
39-12	11629-11632	and	
39-13	11633-11639	deploy	
39-14	11639-11640	.	

#Text=Gradle
#Text=A Gradle build can create a self-executable JAR.
40-1	11641-11647	Gradle	
40-2	11648-11649	A	
40-3	11650-11656	Gradle	
40-4	11657-11662	build	
40-5	11663-11666	can	
40-6	11667-11673	create	
40-7	11674-11675	a	
40-8	11676-11691	self-executable	
40-9	11692-11695	JAR	
40-10	11695-11696	.	

#Text=To build and deploy the JAR, run:
#Text=gradle build
#Text=cf push YOUR-APP -p build/libs/YOUR-APP-VERSION.jar
#Text=Where:
#Text=YOUR-APP is the name of your app.
41-1	11697-11699	To	
41-2	11700-11705	build	
41-3	11706-11709	and	
41-4	11710-11716	deploy	
41-5	11717-11720	the	
41-6	11721-11724	JAR	
41-7	11724-11725	,	
41-8	11726-11729	run	
41-9	11729-11730	:	
41-10	11731-11737	gradle	
41-11	11738-11743	build	
41-12	11744-11746	cf	
41-13	11747-11751	push	
41-14	11752-11760	YOUR-APP	
41-15	11761-11762	-	
41-16	11762-11763	p	
41-17	11764-11769	build	
41-18	11769-11770	/	
41-19	11770-11774	libs	
41-20	11774-11775	/	
41-21	11775-11795	YOUR-APP-VERSION.jar	
41-22	11796-11801	Where	
41-23	11801-11802	:	
41-24	11803-11811	YOUR-APP	
41-25	11812-11814	is	
41-26	11815-11818	the	
41-27	11819-11823	name	
41-28	11824-11826	of	
41-29	11827-11831	your	
41-30	11832-11835	app	
41-31	11835-11836	.	

#Text=YOUR-APP-VERSION is the name of the JAR you want to build and deploy.
42-1	11837-11853	YOUR-APP-VERSION	
42-2	11854-11856	is	
42-3	11857-11860	the	
42-4	11861-11865	name	
42-5	11866-11868	of	
42-6	11869-11872	the	
42-7	11873-11876	JAR	
42-8	11877-11880	you	
42-9	11881-11885	want	
42-10	11886-11888	to	
42-11	11889-11894	build	
42-12	11895-11898	and	
42-13	11899-11905	deploy	
42-14	11905-11906	.	

#Text=Play Framework
#Text=The Play Framework packages apps into two different styles.
43-1	11907-11911	Play	
43-2	11912-11921	Framework	
43-3	11922-11925	The	
43-4	11926-11930	Play	
43-5	11931-11940	Framework	
43-6	11941-11949	packages	
43-7	11950-11954	apps	
43-8	11955-11959	into	
43-9	11960-11963	two	
43-10	11964-11973	different	
43-11	11974-11980	styles	
43-12	11980-11981	.	

#Text=Cloud Foundry supports both the staged and dist styles.
44-1	11982-11987	Cloud	
44-2	11988-11995	Foundry	
44-3	11996-12004	supports	
44-4	12005-12009	both	
44-5	12010-12013	the	
44-6	12014-12020	staged	
44-7	12021-12024	and	
44-8	12025-12029	dist	
44-9	12030-12036	styles	
44-10	12036-12037	.	

#Text=To build the dist style and deploy it, run:
#Text=play dist
#Text=cf push YOUR-APP -p target/universal/YOUR-APP-VERSION.zip
#Text=Where:
#Text=YOUR-APP is the name of your app.
45-1	12038-12040	To	
45-2	12041-12046	build	
45-3	12047-12050	the	
45-4	12051-12055	dist	
45-5	12056-12061	style	
45-6	12062-12065	and	
45-7	12066-12072	deploy	
45-8	12073-12075	it	
45-9	12075-12076	,	
45-10	12077-12080	run	
45-11	12080-12081	:	
45-12	12082-12086	play	
45-13	12087-12091	dist	
45-14	12092-12094	cf	
45-15	12095-12099	push	
45-16	12100-12108	YOUR-APP	
45-17	12109-12110	-	
45-18	12110-12111	p	
45-19	12112-12118	target	
45-20	12118-12119	/	
45-21	12119-12128	universal	
45-22	12128-12129	/	
45-23	12129-12149	YOUR-APP-VERSION.zip	
45-24	12150-12155	Where	
45-25	12155-12156	:	
45-26	12157-12165	YOUR-APP	
45-27	12166-12168	is	
45-28	12169-12172	the	
45-29	12173-12177	name	
45-30	12178-12180	of	
45-31	12181-12185	your	
45-32	12186-12189	app	
45-33	12189-12190	.	

#Text=YOUR-APP-VERSION is the name of the dist style ZIP you want to build and deploy.
46-1	12191-12207	YOUR-APP-VERSION	
46-2	12208-12210	is	
46-3	12211-12214	the	
46-4	12215-12219	name	
46-5	12220-12222	of	
46-6	12223-12226	the	
46-7	12227-12231	dist	
46-8	12232-12237	style	
46-9	12238-12241	ZIP	
46-10	12242-12245	you	
46-11	12246-12250	want	
46-12	12251-12253	to	
46-13	12254-12259	build	
46-14	12260-12263	and	
46-15	12264-12270	deploy	
46-16	12270-12271	.	

#Text=For more information, see the Play Framework website.
47-1	12272-12275	For	
47-2	12276-12280	more	
47-3	12281-12292	information	
47-4	12292-12293	,	
47-5	12294-12297	see	
47-6	12298-12301	the	
47-7	12302-12306	Play	
47-8	12307-12316	Framework	
47-9	12317-12324	website	
47-10	12324-12325	.	

#Text=Spring Boot CLI
#Text=Spring Boot can run apps comprised entirely of POGOs.
48-1	12326-12332	Spring	
48-2	12333-12337	Boot	
48-3	12338-12341	CLI	
48-4	12342-12348	Spring	
48-5	12349-12353	Boot	
48-6	12354-12357	can	
48-7	12358-12361	run	
48-8	12362-12366	apps	
48-9	12367-12376	comprised	
48-10	12377-12385	entirely	
48-11	12386-12388	of	
48-12	12389-12394	POGOs	
48-13	12394-12395	.	

#Text=To deploy them, run:
#Text=spring grab *.groovy
#Text=cf push YOUR-APP
#Text=Where YOUR-APP is the name of your app.
49-1	12396-12398	To	
49-2	12399-12405	deploy	
49-3	12406-12410	them	
49-4	12410-12411	,	
49-5	12412-12415	run	
49-6	12415-12416	:	
49-7	12417-12423	spring	
49-8	12424-12428	grab	
49-9	12429-12430	*	
49-10	12430-12431	.	
49-11	12431-12437	groovy	
49-12	12438-12440	cf	
49-13	12441-12445	push	
49-14	12446-12454	YOUR-APP	
49-15	12455-12460	Where	
49-16	12461-12469	YOUR-APP	
49-17	12470-12472	is	
49-18	12473-12476	the	
49-19	12477-12481	name	
49-20	12482-12484	of	
49-21	12485-12489	your	
49-22	12490-12493	app	
49-23	12493-12494	.	

#Text=For more information, see Spring Boot on the Spring website and Spring Boot CLI Container in the Cloud Foundry Java Buildpack repository on GitHub.
50-1	12495-12498	For	
50-2	12499-12503	more	
50-3	12504-12515	information	
50-4	12515-12516	,	
50-5	12517-12520	see	
50-6	12521-12527	Spring	
50-7	12528-12532	Boot	
50-8	12533-12535	on	
50-9	12536-12539	the	
50-10	12540-12546	Spring	
50-11	12547-12554	website	
50-12	12555-12558	and	
50-13	12559-12565	Spring	
50-14	12566-12570	Boot	
50-15	12571-12574	CLI	
50-16	12575-12584	Container	
50-17	12585-12587	in	
50-18	12588-12591	the	
50-19	12592-12597	Cloud	
50-20	12598-12605	Foundry	
50-21	12606-12610	Java	
50-22	12611-12620	Buildpack	
50-23	12621-12631	repository	
50-24	12632-12634	on	
50-25	12635-12641	GitHub	
50-26	12641-12642	.	

#Text=Servlet
#Text=Java apps can be packaged as Servlet apps.
51-1	12643-12650	Servlet	
51-2	12651-12655	Java	
51-3	12656-12660	apps	
51-4	12661-12664	can	
51-5	12665-12667	be	
51-6	12668-12676	packaged	
51-7	12677-12679	as	
51-8	12680-12687	Servlet	
51-9	12688-12692	apps	
51-10	12692-12693	.	

#Text=Maven
#Text=A Maven build can create a Servlet WAR.
52-1	12694-12699	Maven	
52-2	12700-12701	A	
52-3	12702-12707	Maven	
52-4	12708-12713	build	
52-5	12714-12717	can	
52-6	12718-12724	create	
52-7	12725-12726	a	
52-8	12727-12734	Servlet	
52-9	12735-12738	WAR	
52-10	12738-12739	.	

#Text=To build and deploy the WAR, run:
#Text=mvn package
#Text=cf push YOUR-APP -p target/YOUR-APP-VERSION.war
#Text=Where:
#Text=YOUR-APP is the name of your app.
53-1	12740-12742	To	
53-2	12743-12748	build	
53-3	12749-12752	and	
53-4	12753-12759	deploy	
53-5	12760-12763	the	
53-6	12764-12767	WAR	
53-7	12767-12768	,	
53-8	12769-12772	run	
53-9	12772-12773	:	
53-10	12774-12777	mvn	
53-11	12778-12785	package	
53-12	12786-12788	cf	
53-13	12789-12793	push	
53-14	12794-12802	YOUR-APP	
53-15	12803-12804	-	
53-16	12804-12805	p	
53-17	12806-12812	target	
53-18	12812-12813	/	
53-19	12813-12833	YOUR-APP-VERSION.war	
53-20	12834-12839	Where	
53-21	12839-12840	:	
53-22	12841-12849	YOUR-APP	
53-23	12850-12852	is	
53-24	12853-12856	the	
53-25	12857-12861	name	
53-26	12862-12864	of	
53-27	12865-12869	your	
53-28	12870-12873	app	
53-29	12873-12874	.	

#Text=YOUR-APP-VERSION is the name of the WAR you want to build and deploy.
54-1	12875-12891	YOUR-APP-VERSION	
54-2	12892-12894	is	
54-3	12895-12898	the	
54-4	12899-12903	name	
54-5	12904-12906	of	
54-6	12907-12910	the	
54-7	12911-12914	WAR	
54-8	12915-12918	you	
54-9	12919-12923	want	
54-10	12924-12926	to	
54-11	12927-12932	build	
54-12	12933-12936	and	
54-13	12937-12943	deploy	
54-14	12943-12944	.	

#Text=Gradle
#Text=A Gradle build can create a Servlet WAR.
55-1	12945-12951	Gradle	
55-2	12952-12953	A	
55-3	12954-12960	Gradle	
55-4	12961-12966	build	
55-5	12967-12970	can	
55-6	12971-12977	create	
55-7	12978-12979	a	
55-8	12980-12987	Servlet	
55-9	12988-12991	WAR	
55-10	12991-12992	.	

#Text=To build and deploy the WAR, run:
#Text=gradle build
#Text=cf push YOUR-APP -p build/libs/YOUR-APP-VERSION.war
#Text=Where:
#Text=YOUR-APP is the name of your app.
56-1	12993-12995	To	
56-2	12996-13001	build	
56-3	13002-13005	and	
56-4	13006-13012	deploy	
56-5	13013-13016	the	
56-6	13017-13020	WAR	
56-7	13020-13021	,	
56-8	13022-13025	run	
56-9	13025-13026	:	
56-10	13027-13033	gradle	
56-11	13034-13039	build	
56-12	13040-13042	cf	
56-13	13043-13047	push	
56-14	13048-13056	YOUR-APP	
56-15	13057-13058	-	
56-16	13058-13059	p	
56-17	13060-13065	build	
56-18	13065-13066	/	
56-19	13066-13070	libs	
56-20	13070-13071	/	
56-21	13071-13091	YOUR-APP-VERSION.war	
56-22	13092-13097	Where	
56-23	13097-13098	:	
56-24	13099-13107	YOUR-APP	
56-25	13108-13110	is	
56-26	13111-13114	the	
56-27	13115-13119	name	
56-28	13120-13122	of	
56-29	13123-13127	your	
56-30	13128-13131	app	
56-31	13131-13132	.	

#Text=YOUR-APP-VERSION is the name of the WAR you want to build and deploy.
57-1	13133-13149	YOUR-APP-VERSION	
57-2	13150-13152	is	
57-3	13153-13156	the	
57-4	13157-13161	name	
57-5	13162-13164	of	
57-6	13165-13168	the	
57-7	13169-13172	WAR	
57-8	13173-13176	you	
57-9	13177-13181	want	
57-10	13182-13184	to	
57-11	13185-13190	build	
57-12	13191-13194	and	
57-13	13195-13201	deploy	
57-14	13201-13202	.	

#Text=Binding to Services
#Text=For more information about binding apps to services, see:
#Text=Configuring Service Connections for Grails
#Text=Configuring Service Connections for Play Framework
#Text=Configuring Service Connections for Spring
#Text=Java and Grails Best Practices
#Text=Provide a JDBC Driver
#Text=The Java buildpack does not bundle a JDBC driver with your app.
58-1	13203-13210	Binding	
58-2	13211-13213	to	
58-3	13214-13222	Services	
58-4	13223-13226	For	
58-5	13227-13231	more	
58-6	13232-13243	information	
58-7	13244-13249	about	
58-8	13250-13257	binding	
58-9	13258-13262	apps	
58-10	13263-13265	to	
58-11	13266-13274	services	
58-12	13274-13275	,	
58-13	13276-13279	see	
58-14	13279-13280	:	
58-15	13281-13292	Configuring	
58-16	13293-13300	Service	
58-17	13301-13312	Connections	
58-18	13313-13316	for	
58-19	13317-13323	Grails	
58-20	13324-13335	Configuring	
58-21	13336-13343	Service	
58-22	13344-13355	Connections	
58-23	13356-13359	for	
58-24	13360-13364	Play	
58-25	13365-13374	Framework	
58-26	13375-13386	Configuring	
58-27	13387-13394	Service	
58-28	13395-13406	Connections	
58-29	13407-13410	for	
58-30	13411-13417	Spring	
58-31	13418-13422	Java	
58-32	13423-13426	and	
58-33	13427-13433	Grails	
58-34	13434-13438	Best	
58-35	13439-13448	Practices	
58-36	13449-13456	Provide	
58-37	13457-13458	a	
58-38	13459-13463	JDBC	
58-39	13464-13470	Driver	
58-40	13471-13474	The	
58-41	13475-13479	Java	
58-42	13480-13489	buildpack	
58-43	13490-13494	does	
58-44	13495-13498	not	
58-45	13499-13505	bundle	
58-46	13506-13507	a	
58-47	13508-13512	JDBC	
58-48	13513-13519	driver	
58-49	13520-13524	with	
58-50	13525-13529	your	
58-51	13530-13533	app	
58-52	13533-13534	.	

#Text=If you want your app to access a SQL RDBMS, include the appropriate driver in your app.
59-1	13535-13537	If	
59-2	13538-13541	you	
59-3	13542-13546	want	
59-4	13547-13551	your	
59-5	13552-13555	app	
59-6	13556-13558	to	
59-7	13559-13565	access	
59-8	13566-13567	a	
59-9	13568-13571	SQL	
59-10	13572-13577	RDBMS	
59-11	13577-13578	,	
59-12	13579-13586	include	
59-13	13587-13590	the	
59-14	13591-13602	appropriate	
59-15	13603-13609	driver	
59-16	13610-13612	in	
59-17	13613-13617	your	
59-18	13618-13621	app	
59-19	13621-13622	.	

#Text=Allocate Sufficient Memory
#Text=If you do not allocate sufficient memory to a Java app when you deploy it, it may fail to start, or Cloud Foundry may terminate it.
60-1	13623-13631	Allocate	
60-2	13632-13642	Sufficient	
60-3	13643-13649	Memory	
60-4	13650-13652	If	
60-5	13653-13656	you	
60-6	13657-13659	do	
60-7	13660-13663	not	
60-8	13664-13672	allocate	
60-9	13673-13683	sufficient	
60-10	13684-13690	memory	
60-11	13691-13693	to	
60-12	13694-13695	a	
60-13	13696-13700	Java	
60-14	13701-13704	app	
60-15	13705-13709	when	
60-16	13710-13713	you	
60-17	13714-13720	deploy	
60-18	13721-13723	it	
60-19	13723-13724	,	
60-20	13725-13727	it	
60-21	13728-13731	may	
60-22	13732-13736	fail	
60-23	13737-13739	to	
60-24	13740-13745	start	
60-25	13745-13746	,	
60-26	13747-13749	or	
60-27	13750-13755	Cloud	
60-28	13756-13763	Foundry	
60-29	13764-13767	may	
60-30	13768-13777	terminate	
60-31	13778-13780	it	
60-32	13780-13781	.	

#Text=You must allocate enough memory to allow for:
#Text=Java heap
#Text=Metaspace, if using Java 8
#Text=PermGen, if using Java 7 or earlier
#Text=Stack size per Thread
#Text=JVM overhead
#Text=The config/open_jdk_jre.yml file of the Java buildpack contains default memory size and weighting settings for the JRE.
61-1	13782-13785	You	
61-2	13786-13790	must	
61-3	13791-13799	allocate	
61-4	13800-13806	enough	
61-5	13807-13813	memory	
61-6	13814-13816	to	
61-7	13817-13822	allow	
61-8	13823-13826	for	
61-9	13826-13827	:	
61-10	13828-13832	Java	
61-11	13833-13837	heap	
61-12	13838-13847	Metaspace	
61-13	13847-13848	,	
61-14	13849-13851	if	
61-15	13852-13857	using	
61-16	13858-13862	Java	
61-17	13863-13864	8	
61-18	13865-13872	PermGen	
61-19	13872-13873	,	
61-20	13874-13876	if	
61-21	13877-13882	using	
61-22	13883-13887	Java	
61-23	13888-13889	7	
61-24	13890-13892	or	
61-25	13893-13900	earlier	
61-26	13901-13906	Stack	
61-27	13907-13911	size	
61-28	13912-13915	per	
61-29	13916-13922	Thread	
61-30	13923-13926	JVM	
61-31	13927-13935	overhead	
61-32	13936-13939	The	
61-33	13940-13946	config	
61-34	13946-13947	/	
61-35	13947-13963	open_jdk_jre.yml	
61-36	13964-13968	file	
61-37	13969-13971	of	
61-38	13972-13975	the	
61-39	13976-13980	Java	
61-40	13981-13990	buildpack	
61-41	13991-13999	contains	
61-42	14000-14007	default	
61-43	14008-14014	memory	
61-44	14015-14019	size	
61-45	14020-14023	and	
61-46	14024-14033	weighting	
61-47	14034-14042	settings	
61-48	14043-14046	for	
61-49	14047-14050	the	
61-50	14051-14054	JRE	
61-51	14054-14055	.	

#Text=For an explanation of JRE memory sizes and weightings and how the Java buildpack calculates and allocates memory to the JRE for your app, see Open JDK JRE in the Cloud Foundry Java Buildpack on GitHub.
62-1	14056-14059	For	
62-2	14060-14062	an	
62-3	14063-14074	explanation	
62-4	14075-14077	of	
62-5	14078-14081	JRE	
62-6	14082-14088	memory	
62-7	14089-14094	sizes	
62-8	14095-14098	and	
62-9	14099-14109	weightings	
62-10	14110-14113	and	
62-11	14114-14117	how	
62-12	14118-14121	the	
62-13	14122-14126	Java	
62-14	14127-14136	buildpack	
62-15	14137-14147	calculates	
62-16	14148-14151	and	
62-17	14152-14161	allocates	
62-18	14162-14168	memory	
62-19	14169-14171	to	
62-20	14172-14175	the	
62-21	14176-14179	JRE	
62-22	14180-14183	for	
62-23	14184-14188	your	
62-24	14189-14192	app	
62-25	14192-14193	,	
62-26	14194-14197	see	
62-27	14198-14202	Open	
62-28	14203-14206	JDK	
62-29	14207-14210	JRE	
62-30	14211-14213	in	
62-31	14214-14217	the	
62-32	14218-14223	Cloud	
62-33	14224-14231	Foundry	
62-34	14232-14236	Java	
62-35	14237-14246	Buildpack	
62-36	14247-14249	on	
62-37	14250-14256	GitHub	
62-38	14256-14257	.	

#Text=To configure memory-related JRE options for your app, either create a custom buildpack and specify this buildpack in your deployment manifest, or override the default memory settings of your buildpack as described in Configuration and Extension with the properties listed in the Open JDK JRE README in the Cloud Foundry Java Buildpack on GitHub.
63-1	14258-14260	To	
63-2	14261-14270	configure	
63-3	14271-14285	memory-related	
63-4	14286-14289	JRE	
63-5	14290-14297	options	
63-6	14298-14301	for	
63-7	14302-14306	your	
63-8	14307-14310	app	
63-9	14310-14311	,	
63-10	14312-14318	either	
63-11	14319-14325	create	
63-12	14326-14327	a	
63-13	14328-14334	custom	
63-14	14335-14344	buildpack	
63-15	14345-14348	and	
63-16	14349-14356	specify	
63-17	14357-14361	this	
63-18	14362-14371	buildpack	
63-19	14372-14374	in	
63-20	14375-14379	your	
63-21	14380-14390	deployment	
63-22	14391-14399	manifest	
63-23	14399-14400	,	
63-24	14401-14403	or	
63-25	14404-14412	override	
63-26	14413-14416	the	
63-27	14417-14424	default	
63-28	14425-14431	memory	
63-29	14432-14440	settings	
63-30	14441-14443	of	
63-31	14444-14448	your	
63-32	14449-14458	buildpack	
63-33	14459-14461	as	
63-34	14462-14471	described	
63-35	14472-14474	in	
63-36	14475-14488	Configuration	
63-37	14489-14492	and	
63-38	14493-14502	Extension	
63-39	14503-14507	with	
63-40	14508-14511	the	
63-41	14512-14522	properties	
63-42	14523-14529	listed	
63-43	14530-14532	in	
63-44	14533-14536	the	
63-45	14537-14541	Open	
63-46	14542-14545	JDK	
63-47	14546-14549	JRE	
63-48	14550-14556	README	
63-49	14557-14559	in	
63-50	14560-14563	the	
63-51	14564-14569	Cloud	
63-52	14570-14577	Foundry	
63-53	14578-14582	Java	
63-54	14583-14592	Buildpack	
63-55	14593-14595	on	
63-56	14596-14602	GitHub	
63-57	14602-14603	.	

#Text=For more information about configuring custom buildpacks and manifests, see Custom Buildpacks and Deploying with App Manifests.
64-1	14604-14607	For	
64-2	14608-14612	more	
64-3	14613-14624	information	
64-4	14625-14630	about	
64-5	14631-14642	configuring	
64-6	14643-14649	custom	
64-7	14650-14660	buildpacks	
64-8	14661-14664	and	
64-9	14665-14674	manifests	
64-10	14674-14675	,	
64-11	14676-14679	see	
64-12	14680-14686	Custom	
64-13	14687-14697	Buildpacks	
64-14	14698-14701	and	
64-15	14702-14711	Deploying	
64-16	14712-14716	with	
64-17	14717-14720	App	
64-18	14721-14730	Manifests	
64-19	14730-14731	.	

#Text=To see memory utilization when your app is running, run:
#Text=cf app YOUR-APP
#Text=Where YOUR-APP is the name of your app.
65-1	14732-14734	To	
65-2	14735-14738	see	
65-3	14739-14745	memory	
65-4	14746-14757	utilization	
65-5	14758-14762	when	
65-6	14763-14767	your	
65-7	14768-14771	app	
65-8	14772-14774	is	
65-9	14775-14782	running	
65-10	14782-14783	,	
65-11	14784-14787	run	
65-12	14787-14788	:	
65-13	14789-14791	cf	
65-14	14792-14795	app	
65-15	14796-14804	YOUR-APP	
65-16	14805-14810	Where	
65-17	14811-14819	YOUR-APP	
65-18	14820-14822	is	
65-19	14823-14826	the	
65-20	14827-14831	name	
65-21	14832-14834	of	
65-22	14835-14839	your	
65-23	14840-14843	app	
65-24	14843-14844	.	

#Text=Troubleshoot Out of Memory
#Text=A Java app may crash because of insufficient memory on the Garden container or the JVM on which it runs.
66-1	14845-14857	Troubleshoot	
66-2	14858-14861	Out	
66-3	14862-14864	of	
66-4	14865-14871	Memory	
66-5	14872-14873	A	
66-6	14874-14878	Java	
66-7	14879-14882	app	
66-8	14883-14886	may	
66-9	14887-14892	crash	
66-10	14893-14900	because	
66-11	14901-14903	of	
66-12	14904-14916	insufficient	
66-13	14917-14923	memory	
66-14	14924-14926	on	
66-15	14927-14930	the	
66-16	14931-14937	Garden	
66-17	14938-14947	container	
66-18	14948-14950	or	
66-19	14951-14954	the	
66-20	14955-14958	JVM	
66-21	14959-14961	on	
66-22	14962-14967	which	
66-23	14968-14970	it	
66-24	14971-14975	runs	
66-25	14975-14976	.	

#Text=The sections below provide guidance for help diagnosing and resolving such issues.
67-1	14977-14980	The	
67-2	14981-14989	sections	
67-3	14990-14995	below	
67-4	14996-15003	provide	
67-5	15004-15012	guidance	
67-6	15013-15016	for	
67-7	15017-15021	help	
67-8	15022-15032	diagnosing	
67-9	15033-15036	and	
67-10	15037-15046	resolving	
67-11	15047-15051	such	
67-12	15052-15058	issues	
67-13	15058-15059	.	

#Text=JVM
#Text=Error: java.lang.OutOfMemoryError.
68-1	15060-15063	JVM	
68-2	15064-15069	Error	
68-3	15069-15070	:	
68-4	15071-15097	java.lang.OutOfMemoryError	
68-5	15097-15098	.	

#Text=For example:
#Text=$ cf logs YOUR-APP --recent
#Text=2016-06-20T09:18:51.00+0100 [APP/0] OUT java.lang.OutOfMemoryError: Metaspace
#Text=Where YOUR-APP is the name of your app.
69-1	15099-15102	For	
69-2	15103-15110	example	
69-3	15110-15111	:	
69-4	15112-15113	$	
69-5	15114-15116	cf	
69-6	15117-15121	logs	
69-7	15122-15130	YOUR-APP	
69-8	15131-15132	-	
69-9	15132-15133	-	
69-10	15133-15139	recent	
69-11	15140-15144	2016	
69-12	15144-15145	-	
69-13	15145-15147	06	
69-14	15147-15148	-	
69-15	15148-15153	20T09	
69-16	15153-15154	:	
69-17	15154-15156	18	
69-18	15156-15157	:	
69-19	15157-15162	51.00	
69-20	15162-15163	+	
69-21	15163-15167	0100	
69-22	15168-15169	[	
69-23	15169-15172	APP	
69-24	15172-15173	/	
69-25	15173-15174	0	
69-26	15174-15175	]	
69-27	15176-15179	OUT	
69-28	15180-15206	java.lang.OutOfMemoryError	
69-29	15206-15207	:	
69-30	15208-15217	Metaspace	
69-31	15218-15223	Where	
69-32	15224-15232	YOUR-APP	
69-33	15233-15235	is	
69-34	15236-15239	the	
69-35	15240-15244	name	
69-36	15245-15247	of	
69-37	15248-15252	your	
69-38	15253-15256	app	
69-39	15256-15257	.	

#Text=Cause: If the JVM cannot garbage-collect enough space to ensure the allocation of a data-structure, it fails with java.lang.OutOfMemoryError.
70-1	15258-15263	Cause	
70-2	15263-15264	:	
70-3	15265-15267	If	
70-4	15268-15271	the	
70-5	15272-15275	JVM	
70-6	15276-15282	cannot	
70-7	15283-15298	garbage-collect	
70-8	15299-15305	enough	
70-9	15306-15311	space	
70-10	15312-15314	to	
70-11	15315-15321	ensure	
70-12	15322-15325	the	
70-13	15326-15336	allocation	
70-14	15337-15339	of	
70-15	15340-15341	a	
70-16	15342-15356	data-structure	
70-17	15356-15357	,	
70-18	15358-15360	it	
70-19	15361-15366	fails	
70-20	15367-15371	with	
70-21	15372-15398	java.lang.OutOfMemoryError	
70-22	15398-15399	.	

#Text=In the example above, JVM has an under-sized metaspace.
71-1	15400-15402	In	
71-2	15403-15406	the	
71-3	15407-15414	example	
71-4	15415-15420	above	
71-5	15420-15421	,	
71-6	15422-15425	JVM	
71-7	15426-15429	has	
71-8	15430-15432	an	
71-9	15433-15444	under-sized	
71-10	15445-15454	metaspace	
71-11	15454-15455	.	

#Text=You may see failures in other memory pools, such as heap.
72-1	15456-15459	You	
72-2	15460-15463	may	
72-3	15464-15467	see	
72-4	15468-15476	failures	
72-5	15477-15479	in	
72-6	15480-15485	other	
72-7	15486-15492	memory	
72-8	15493-15498	pools	
72-9	15498-15499	,	
72-10	15500-15504	such	
72-11	15505-15507	as	
72-12	15508-15512	heap	
72-13	15512-15513	.	

#Text=Solution: Configure the JVM correctly for your app.
73-1	15514-15522	Solution	
73-2	15522-15523	:	
73-3	15524-15533	Configure	
73-4	15534-15537	the	
73-5	15538-15541	JVM	
73-6	15542-15551	correctly	
73-7	15552-15555	for	
73-8	15556-15560	your	
73-9	15561-15564	app	
73-10	15564-15565	.	

#Text=For more information, see Allocate Sufficient Memory.
74-1	15566-15569	For	
74-2	15570-15574	more	
74-3	15575-15586	information	
74-4	15586-15587	,	
74-5	15588-15591	see	
74-6	15592-15600	Allocate	
74-7	15601-15611	Sufficient	
74-8	15612-15618	Memory	
74-9	15618-15619	.	

#Text=Garden Container
#Text=Note: The solutions in this section require configuring the memory calculator, which is a sub-project of the Java buildpack that calculates suitable memory settings for Java apps when you push them.
75-1	15620-15626	Garden	
75-2	15627-15636	Container	
75-3	15637-15641	Note	
75-4	15641-15642	:	
75-5	15643-15646	The	
75-6	15647-15656	solutions	
75-7	15657-15659	in	
75-8	15660-15664	this	
75-9	15665-15672	section	
75-10	15673-15680	require	
75-11	15681-15692	configuring	
75-12	15693-15696	the	
75-13	15697-15703	memory	
75-14	15704-15714	calculator	
75-15	15714-15715	,	
75-16	15716-15721	which	
75-17	15722-15724	is	
75-18	15725-15726	a	
75-19	15727-15738	sub-project	
75-20	15739-15741	of	
75-21	15742-15745	the	
75-22	15746-15750	Java	
75-23	15751-15760	buildpack	
75-24	15761-15765	that	
75-25	15766-15776	calculates	
75-26	15777-15785	suitable	
75-27	15786-15792	memory	
75-28	15793-15801	settings	
75-29	15802-15805	for	
75-30	15806-15810	Java	
75-31	15811-15815	apps	
75-32	15816-15820	when	
75-33	15821-15824	you	
75-34	15825-15829	push	
75-35	15830-15834	them	
75-36	15834-15835	.	

#Text=For more information, see the java-buildpack-memory-calculator repository on GitHub.
76-1	15836-15839	For	
76-2	15840-15844	more	
76-3	15845-15856	information	
76-4	15856-15857	,	
76-5	15858-15861	see	
76-6	15862-15865	the	
76-7	15866-15898	java-buildpack-memory-calculator	
76-8	15899-15909	repository	
76-9	15910-15912	on	
76-10	15913-15919	GitHub	
76-11	15919-15920	.	

#Text=If you have questions about the memory calculator, you can ask them in the #java-buildpack channel of the Cloud Foundry Slack organization.
77-1	15921-15923	If	
77-2	15924-15927	you	
77-3	15928-15932	have	
77-4	15933-15942	questions	
77-5	15943-15948	about	
77-6	15949-15952	the	
77-7	15953-15959	memory	
77-8	15960-15970	calculator	
77-9	15970-15971	,	
77-10	15972-15975	you	
77-11	15976-15979	can	
77-12	15980-15983	ask	
77-13	15984-15988	them	
77-14	15989-15991	in	
77-15	15992-15995	the	
77-16	15996-15997	#	
77-17	15997-16011	java-buildpack	
77-18	16012-16019	channel	
77-19	16020-16022	of	
77-20	16023-16026	the	
77-21	16027-16032	Cloud	
77-22	16033-16040	Foundry	
77-23	16041-16046	Slack	
77-24	16047-16059	organization	
77-25	16059-16060	.	

#Text=Error: The Garden container terminates the Java process with the out of memory event.
78-1	16061-16066	Error	
78-2	16066-16067	:	
78-3	16068-16071	The	
78-4	16072-16078	Garden	
78-5	16079-16088	container	
78-6	16089-16099	terminates	
78-7	16100-16103	the	
78-8	16104-16108	Java	
78-9	16109-16116	process	
78-10	16117-16121	with	
78-11	16122-16125	the	
78-12	16126-16129	out	
78-13	16130-16132	of	
78-14	16133-16139	memory	
78-15	16140-16145	event	
78-16	16145-16146	.	

#Text=For example:
#Text=$ cf events YOUR-APP
#Text=time
#Text=event
#Text=actor
#Text=description
#Text=2016-06-20T09:18:51.00+0100
#Text=app.crash
#Text=app-name
#Text=index: 0, reason: CRASHED, exit_description: out of memory, exit_status: 255
#Text=Where YOUR-APP is the name of your app.
79-1	16147-16150	For	
79-2	16151-16158	example	
79-3	16158-16159	:	
79-4	16160-16161	$	
79-5	16162-16164	cf	
79-6	16165-16171	events	
79-7	16172-16180	YOUR-APP	
79-8	16181-16185	time	
79-9	16186-16191	event	
79-10	16192-16197	actor	
79-11	16198-16209	description	
79-12	16210-16214	2016	
79-13	16214-16215	-	
79-14	16215-16217	06	
79-15	16217-16218	-	
79-16	16218-16223	20T09	
79-17	16223-16224	:	
79-18	16224-16226	18	
79-19	16226-16227	:	
79-20	16227-16232	51.00	
79-21	16232-16233	+	
79-22	16233-16237	0100	
79-23	16238-16247	app.crash	
79-24	16248-16256	app-name	
79-25	16257-16262	index	
79-26	16262-16263	:	
79-27	16264-16265	0	
79-28	16265-16266	,	
79-29	16267-16273	reason	
79-30	16273-16274	:	
79-31	16275-16282	CRASHED	
79-32	16282-16283	,	
79-33	16284-16300	exit_description	
79-34	16300-16301	:	
79-35	16302-16305	out	
79-36	16306-16308	of	
79-37	16309-16315	memory	
79-38	16315-16316	,	
79-39	16317-16328	exit_status	
79-40	16328-16329	:	
79-41	16330-16333	255	
79-42	16334-16339	Where	
79-43	16340-16348	YOUR-APP	
79-44	16349-16351	is	
79-45	16352-16355	the	
79-46	16356-16360	name	
79-47	16361-16363	of	
79-48	16364-16368	your	
79-49	16369-16372	app	
79-50	16372-16373	.	

#Text=This error appears when the JVM allocates more OS-level memory than the quota requested by the app, such as through the manifest.
80-1	16374-16378	This	
80-2	16379-16384	error	
80-3	16385-16392	appears	
80-4	16393-16397	when	
80-5	16398-16401	the	
80-6	16402-16405	JVM	
80-7	16406-16415	allocates	
80-8	16416-16420	more	
80-9	16421-16429	OS-level	
80-10	16430-16436	memory	
80-11	16437-16441	than	
80-12	16442-16445	the	
80-13	16446-16451	quota	
80-14	16452-16461	requested	
80-15	16462-16464	by	
80-16	16465-16468	the	
80-17	16469-16472	app	
80-18	16472-16473	,	
80-19	16474-16478	such	
80-20	16479-16481	as	
80-21	16482-16489	through	
80-22	16490-16493	the	
80-23	16494-16502	manifest	
80-24	16502-16503	.	

#Text=Cause 1 - Insufficient native memory: This error commonly means that the JVM requires more native memory.
81-1	16504-16509	Cause	
81-2	16510-16511	1	
81-3	16512-16513	-	
81-4	16514-16526	Insufficient	
81-5	16527-16533	native	
81-6	16534-16540	memory	
81-7	16540-16541	:	
81-8	16542-16546	This	
81-9	16547-16552	error	
81-10	16553-16561	commonly	
81-11	16562-16567	means	
81-12	16568-16572	that	
81-13	16573-16576	the	
81-14	16577-16580	JVM	
81-15	16581-16589	requires	
81-16	16590-16594	more	
81-17	16595-16601	native	
81-18	16602-16608	memory	
81-19	16608-16609	.	

#Text=In the scope of the Java buildpack and the memory calculator, the term native means the memory required for the JVM to work, along with forms of memory not covered in the other classifications of the memory calculator.
82-1	16610-16612	In	
82-2	16613-16616	the	
82-3	16617-16622	scope	
82-4	16623-16625	of	
82-5	16626-16629	the	
82-6	16630-16634	Java	
82-7	16635-16644	buildpack	
82-8	16645-16648	and	
82-9	16649-16652	the	
82-10	16653-16659	memory	
82-11	16660-16670	calculator	
82-12	16670-16671	,	
82-13	16672-16675	the	
82-14	16676-16680	term	
82-15	16681-16687	native	
82-16	16688-16693	means	
82-17	16694-16697	the	
82-18	16698-16704	memory	
82-19	16705-16713	required	
82-20	16714-16717	for	
82-21	16718-16721	the	
82-22	16722-16725	JVM	
82-23	16726-16728	to	
82-24	16729-16733	work	
82-25	16733-16734	,	
82-26	16735-16740	along	
82-27	16741-16745	with	
82-28	16746-16751	forms	
82-29	16752-16754	of	
82-30	16755-16761	memory	
82-31	16762-16765	not	
82-32	16766-16773	covered	
82-33	16774-16776	in	
82-34	16777-16780	the	
82-35	16781-16786	other	
82-36	16787-16802	classifications	
82-37	16803-16805	of	
82-38	16806-16809	the	
82-39	16810-16816	memory	
82-40	16817-16827	calculator	
82-41	16827-16828	.	

#Text=This includes the memory footprint of OS-level threads, direct NIO buffers, code cache, program counters, and others.
83-1	16829-16833	This	
83-2	16834-16842	includes	
83-3	16843-16846	the	
83-4	16847-16853	memory	
83-5	16854-16863	footprint	
83-6	16864-16866	of	
83-7	16867-16875	OS-level	
83-8	16876-16883	threads	
83-9	16883-16884	,	
83-10	16885-16891	direct	
83-11	16892-16895	NIO	
83-12	16896-16903	buffers	
83-13	16903-16904	,	
83-14	16905-16909	code	
83-15	16910-16915	cache	
83-16	16915-16916	,	
83-17	16917-16924	program	
83-18	16925-16933	counters	
83-19	16933-16934	,	
83-20	16935-16938	and	
83-21	16939-16945	others	
83-22	16945-16946	.	

#Text=Solution 1: Determine how much native memory a Java app needs by measuring it with realistic workloads and fine-tuning it accordingly.
84-1	16947-16955	Solution	
84-2	16956-16957	1	
84-3	16957-16958	:	
84-4	16959-16968	Determine	
84-5	16969-16972	how	
84-6	16973-16977	much	
84-7	16978-16984	native	
84-8	16985-16991	memory	
84-9	16992-16993	a	
84-10	16994-16998	Java	
84-11	16999-17002	app	
84-12	17003-17008	needs	
84-13	17009-17011	by	
84-14	17012-17021	measuring	
84-15	17022-17024	it	
84-16	17025-17029	with	
84-17	17030-17039	realistic	
84-18	17040-17049	workloads	
84-19	17050-17053	and	
84-20	17054-17065	fine-tuning	
84-21	17066-17068	it	
84-22	17069-17080	accordingly	
84-23	17080-17081	.	

#Text=You can then configure the Java buildpack using the native setting of the memory calculator, as in the example below:
#Text=---
#Text=applications:
#Text=- name: YOUR-APP
#Text=memory: 1G
#Text=env:
#Text=JBP_CONFIG_OPEN_JDK_JRE: '[memory_calculator: {memory_sizes: {native: 150m}}]'
#Text=Where YOUR-APP is the name of your app.
85-1	17082-17085	You	
85-2	17086-17089	can	
85-3	17090-17094	then	
85-4	17095-17104	configure	
85-5	17105-17108	the	
85-6	17109-17113	Java	
85-7	17114-17123	buildpack	
85-8	17124-17129	using	
85-9	17130-17133	the	
85-10	17134-17140	native	
85-11	17141-17148	setting	
85-12	17149-17151	of	
85-13	17152-17155	the	
85-14	17156-17162	memory	
85-15	17163-17173	calculator	
85-16	17173-17174	,	
85-17	17175-17177	as	
85-18	17178-17180	in	
85-19	17181-17184	the	
85-20	17185-17192	example	
85-21	17193-17198	below	
85-22	17198-17199	:	
85-23	17200-17201	-	
85-24	17201-17202	-	
85-25	17202-17203	-	
85-26	17204-17216	applications	
85-27	17216-17217	:	
85-28	17218-17219	-	
85-29	17220-17224	name	
85-30	17224-17225	:	
85-31	17226-17234	YOUR-APP	
85-32	17235-17241	memory	
85-33	17241-17242	:	
85-34	17243-17245	1G	
85-35	17246-17249	env	
85-36	17249-17250	:	
85-37	17251-17274	JBP_CONFIG_OPEN_JDK_JRE	
85-38	17274-17275	:	
85-39	17276-17277	'	
85-40	17277-17278	[	
85-41	17278-17295	memory_calculator	
85-42	17295-17296	:	
85-43	17297-17298	{	
85-44	17298-17310	memory_sizes	
85-45	17310-17311	:	
85-46	17312-17313	{	
85-47	17313-17319	native	
85-48	17319-17320	:	
85-49	17321-17325	150m	
85-50	17325-17326	}	
85-51	17326-17327	}	
85-52	17327-17328	]	
85-53	17328-17329	'	
85-54	17330-17335	Where	
85-55	17336-17344	YOUR-APP	
85-56	17345-17347	is	
85-57	17348-17351	the	
85-58	17352-17356	name	
85-59	17357-17359	of	
85-60	17360-17364	your	
85-61	17365-17368	app	
85-62	17368-17369	.	

#Text=This example shows that 150m of the overall available 1G is reserved for anything that is not heap, metaspace, or permgen.
86-1	17370-17374	This	
86-2	17375-17382	example	
86-3	17383-17388	shows	
86-4	17389-17393	that	
86-5	17394-17398	150m	
86-6	17399-17401	of	
86-7	17402-17405	the	
86-8	17406-17413	overall	
86-9	17414-17423	available	
86-10	17424-17426	1G	
86-11	17427-17429	is	
86-12	17430-17438	reserved	
86-13	17439-17442	for	
86-14	17443-17451	anything	
86-15	17452-17456	that	
86-16	17457-17459	is	
86-17	17460-17463	not	
86-18	17464-17468	heap	
86-19	17468-17469	,	
86-20	17470-17479	metaspace	
86-21	17479-17480	,	
86-22	17481-17483	or	
86-23	17484-17491	permgen	
86-24	17491-17492	.	

#Text=In less common cases, this may come from companion processes started by the JVM, such as the Process API.
87-1	17493-17495	In	
87-2	17496-17500	less	
87-3	17501-17507	common	
87-4	17508-17513	cases	
87-5	17513-17514	,	
87-6	17515-17519	this	
87-7	17520-17523	may	
87-8	17524-17528	come	
87-9	17529-17533	from	
87-10	17534-17543	companion	
87-11	17544-17553	processes	
87-12	17554-17561	started	
87-13	17562-17564	by	
87-14	17565-17568	the	
87-15	17569-17572	JVM	
87-16	17572-17573	,	
87-17	17574-17578	such	
87-18	17579-17581	as	
87-19	17582-17585	the	
87-20	17586-17593	Process	
87-21	17594-17597	API	
87-22	17597-17598	.	

#Text=For more information about measuring how much native memory a Java app needs, see Native Memory Tracking in the Java documentation.
88-1	17599-17602	For	
88-2	17603-17607	more	
88-3	17608-17619	information	
88-4	17620-17625	about	
88-5	17626-17635	measuring	
88-6	17636-17639	how	
88-7	17640-17644	much	
88-8	17645-17651	native	
88-9	17652-17658	memory	
88-10	17659-17660	a	
88-11	17661-17665	Java	
88-12	17666-17669	app	
88-13	17670-17675	needs	
88-14	17675-17676	,	
88-15	17677-17680	see	
88-16	17681-17687	Native	
88-17	17688-17694	Memory	
88-18	17695-17703	Tracking	
88-19	17704-17706	in	
88-20	17707-17710	the	
88-21	17711-17715	Java	
88-22	17716-17729	documentation	
88-23	17729-17730	.	

#Text=For more information about configuring the Java buildpack using the native setting, see OpenJDK JRE in the Cloud Foundry Java Buildpack on GitHub.
89-1	17731-17734	For	
89-2	17735-17739	more	
89-3	17740-17751	information	
89-4	17752-17757	about	
89-5	17758-17769	configuring	
89-6	17770-17773	the	
89-7	17774-17778	Java	
89-8	17779-17788	buildpack	
89-9	17789-17794	using	
89-10	17795-17798	the	
89-11	17799-17805	native	
89-12	17806-17813	setting	
89-13	17813-17814	,	
89-14	17815-17818	see	
89-15	17819-17826	OpenJDK	
89-16	17827-17830	JRE	
89-17	17831-17833	in	
89-18	17834-17837	the	
89-19	17838-17843	Cloud	
89-20	17844-17851	Foundry	
89-21	17852-17856	Java	
89-22	17857-17866	Buildpack	
89-23	17867-17869	on	
89-24	17870-17876	GitHub	
89-25	17876-17877	.	

#Text=For more information about the Process API, see Class Process in the Java documentation.
90-1	17878-17881	For	
90-2	17882-17886	more	
90-3	17887-17898	information	
90-4	17899-17904	about	
90-5	17905-17908	the	
90-6	17909-17916	Process	
90-7	17917-17920	API	
90-8	17920-17921	,	
90-9	17922-17925	see	
90-10	17926-17931	Class	
90-11	17932-17939	Process	
90-12	17940-17942	in	
90-13	17943-17946	the	
90-14	17947-17951	Java	
90-15	17952-17965	documentation	
90-16	17965-17966	.	

#Text=Cause 2 - High thread count: Java threads in the JVM can cause memory errors at the Garden level.
91-1	17967-17972	Cause	
91-2	17973-17974	2	
91-3	17975-17976	-	
91-4	17977-17981	High	
91-5	17982-17988	thread	
91-6	17989-17994	count	
91-7	17994-17995	:	
91-8	17996-18000	Java	
91-9	18001-18008	threads	
91-10	18009-18011	in	
91-11	18012-18015	the	
91-12	18016-18019	JVM	
91-13	18020-18023	can	
91-14	18024-18029	cause	
91-15	18030-18036	memory	
91-16	18037-18043	errors	
91-17	18044-18046	at	
91-18	18047-18050	the	
91-19	18051-18057	Garden	
91-20	18058-18063	level	
91-21	18063-18064	.	

#Text=When an app is under heavy load, it uses a high number of threads and consumes a significant amount of memory.
92-1	18065-18069	When	
92-2	18070-18072	an	
92-3	18073-18076	app	
92-4	18077-18079	is	
92-5	18080-18085	under	
92-6	18086-18091	heavy	
92-7	18092-18096	load	
92-8	18096-18097	,	
92-9	18098-18100	it	
92-10	18101-18105	uses	
92-11	18106-18107	a	
92-12	18108-18112	high	
92-13	18113-18119	number	
92-14	18120-18122	of	
92-15	18123-18130	threads	
92-16	18131-18134	and	
92-17	18135-18143	consumes	
92-18	18144-18145	a	
92-19	18146-18157	significant	
92-20	18158-18164	amount	
92-21	18165-18167	of	
92-22	18168-18174	memory	
92-23	18174-18175	.	

#Text=Solution 2: Set the reserved memory for stack traces to the correct value for your app.
93-1	18176-18184	Solution	
93-2	18185-18186	2	
93-3	18186-18187	:	
93-4	18188-18191	Set	
93-5	18192-18195	the	
93-6	18196-18204	reserved	
93-7	18205-18211	memory	
93-8	18212-18215	for	
93-9	18216-18221	stack	
93-10	18222-18228	traces	
93-11	18229-18231	to	
93-12	18232-18235	the	
93-13	18236-18243	correct	
93-14	18244-18249	value	
93-15	18250-18253	for	
93-16	18254-18258	your	
93-17	18259-18262	app	
93-18	18262-18263	.	

#Text=You can use the stack setting of the memory calculator to configure the amount of space the JVM reserves for each Java thread.
94-1	18264-18267	You	
94-2	18268-18271	can	
94-3	18272-18275	use	
94-4	18276-18279	the	
94-5	18280-18285	stack	
94-6	18286-18293	setting	
94-7	18294-18296	of	
94-8	18297-18300	the	
94-9	18301-18307	memory	
94-10	18308-18318	calculator	
94-11	18319-18321	to	
94-12	18322-18331	configure	
94-13	18332-18335	the	
94-14	18336-18342	amount	
94-15	18343-18345	of	
94-16	18346-18351	space	
94-17	18352-18355	the	
94-18	18356-18359	JVM	
94-19	18360-18368	reserves	
94-20	18369-18372	for	
94-21	18373-18377	each	
94-22	18378-18382	Java	
94-23	18383-18389	thread	
94-24	18389-18390	.	

#Text=You must multiply this value by the number of threads your app requires.
95-1	18391-18394	You	
95-2	18395-18399	must	
95-3	18400-18408	multiply	
95-4	18409-18413	this	
95-5	18414-18419	value	
95-6	18420-18422	by	
95-7	18423-18426	the	
95-8	18427-18433	number	
95-9	18434-18436	of	
95-10	18437-18444	threads	
95-11	18445-18449	your	
95-12	18450-18453	app	
95-13	18454-18462	requires	
95-14	18462-18463	.	

#Text=Specify the number of threads in the stack_threads setting of the memory calculator.
96-1	18464-18471	Specify	
96-2	18472-18475	the	
96-3	18476-18482	number	
96-4	18483-18485	of	
96-5	18486-18493	threads	
96-6	18494-18496	in	
96-7	18497-18500	the	
96-8	18501-18514	stack_threads	
96-9	18515-18522	setting	
96-10	18523-18525	of	
96-11	18526-18529	the	
96-12	18530-18536	memory	
96-13	18537-18547	calculator	
96-14	18547-18548	.	

#Text=For example, if you estimate the max thread count for an app at 800 and the amount of memory needed to represent the deepest stacktrace of a Java thread is 512KB, configure the memory calculator as follows:
#Text=---
#Text=applications:
#Text=- name: YOUR-APP
#Text=memory: 1G
#Text=env:
#Text=JBP_CONFIG_OPEN_JDK_JRE: '[memory_calculator: {stack_threads: 800, memory_sizes: {stack: 512k}}]'
#Text=Where YOUR-APP is the name of your app.
97-1	18549-18552	For	
97-2	18553-18560	example	
97-3	18560-18561	,	
97-4	18562-18564	if	
97-5	18565-18568	you	
97-6	18569-18577	estimate	
97-7	18578-18581	the	
97-8	18582-18585	max	
97-9	18586-18592	thread	
97-10	18593-18598	count	
97-11	18599-18602	for	
97-12	18603-18605	an	
97-13	18606-18609	app	
97-14	18610-18612	at	
97-15	18613-18616	800	
97-16	18617-18620	and	
97-17	18621-18624	the	
97-18	18625-18631	amount	
97-19	18632-18634	of	
97-20	18635-18641	memory	
97-21	18642-18648	needed	
97-22	18649-18651	to	
97-23	18652-18661	represent	
97-24	18662-18665	the	
97-25	18666-18673	deepest	
97-26	18674-18684	stacktrace	
97-27	18685-18687	of	
97-28	18688-18689	a	
97-29	18690-18694	Java	
97-30	18695-18701	thread	
97-31	18702-18704	is	
97-32	18705-18710	512KB	
97-33	18710-18711	,	
97-34	18712-18721	configure	
97-35	18722-18725	the	
97-36	18726-18732	memory	
97-37	18733-18743	calculator	
97-38	18744-18746	as	
97-39	18747-18754	follows	
97-40	18754-18755	:	
97-41	18756-18757	-	
97-42	18757-18758	-	
97-43	18758-18759	-	
97-44	18760-18772	applications	
97-45	18772-18773	:	
97-46	18774-18775	-	
97-47	18776-18780	name	
97-48	18780-18781	:	
97-49	18782-18790	YOUR-APP	
97-50	18791-18797	memory	
97-51	18797-18798	:	
97-52	18799-18801	1G	
97-53	18802-18805	env	
97-54	18805-18806	:	
97-55	18807-18830	JBP_CONFIG_OPEN_JDK_JRE	
97-56	18830-18831	:	
97-57	18832-18833	'	
97-58	18833-18834	[	
97-59	18834-18851	memory_calculator	
97-60	18851-18852	:	
97-61	18853-18854	{	
97-62	18854-18867	stack_threads	
97-63	18867-18868	:	
97-64	18869-18872	800	
97-65	18872-18873	,	
97-66	18874-18886	memory_sizes	
97-67	18886-18887	:	
97-68	18888-18889	{	
97-69	18889-18894	stack	
97-70	18894-18895	:	
97-71	18896-18900	512k	
97-72	18900-18901	}	
97-73	18901-18902	}	
97-74	18902-18903	]	
97-75	18903-18904	'	
97-76	18905-18910	Where	
97-77	18911-18919	YOUR-APP	
97-78	18920-18922	is	
97-79	18923-18926	the	
97-80	18927-18931	name	
97-81	18932-18934	of	
97-82	18935-18939	your	
97-83	18940-18943	app	
97-84	18943-18944	.	

#Text=In this example, the overall memory amount reserved by the JVM for representing the stacks of Java threads is 800 * 512k = 400m.
98-1	18945-18947	In	
98-2	18948-18952	this	
98-3	18953-18960	example	
98-4	18960-18961	,	
98-5	18962-18965	the	
98-6	18966-18973	overall	
98-7	18974-18980	memory	
98-8	18981-18987	amount	
98-9	18988-18996	reserved	
98-10	18997-18999	by	
98-11	19000-19003	the	
98-12	19004-19007	JVM	
98-13	19008-19011	for	
98-14	19012-19024	representing	
98-15	19025-19028	the	
98-16	19029-19035	stacks	
98-17	19036-19038	of	
98-18	19039-19043	Java	
98-19	19044-19051	threads	
98-20	19052-19054	is	
98-21	19055-19058	800	
98-22	19059-19060	*	
98-23	19061-19065	512k	
98-24	19066-19067	=	
98-25	19068-19072	400m	
98-26	19072-19073	.	

#Text=The correct settings for stack and stack_threads depend on your app code, including the libraries it uses.
99-1	19074-19077	The	
99-2	19078-19085	correct	
99-3	19086-19094	settings	
99-4	19095-19098	for	
99-5	19099-19104	stack	
99-6	19105-19108	and	
99-7	19109-19122	stack_threads	
99-8	19123-19129	depend	
99-9	19130-19132	on	
99-10	19133-19137	your	
99-11	19138-19141	app	
99-12	19142-19146	code	
99-13	19146-19147	,	
99-14	19148-19157	including	
99-15	19158-19161	the	
99-16	19162-19171	libraries	
99-17	19172-19174	it	
99-18	19175-19179	uses	
99-19	19179-19180	.	

#Text=Your app may technically have no upper limit, such as in the case of cavalier usage of CachedThreadPool executors.
100-1	19181-19185	Your	
100-2	19186-19189	app	
100-3	19190-19193	may	
100-4	19194-19205	technically	
100-5	19206-19210	have	
100-6	19211-19213	no	
100-7	19214-19219	upper	
100-8	19220-19225	limit	
100-9	19225-19226	,	
100-10	19227-19231	such	
100-11	19232-19234	as	
100-12	19235-19237	in	
100-13	19238-19241	the	
100-14	19242-19246	case	
100-15	19247-19249	of	
100-16	19250-19258	cavalier	
100-17	19259-19264	usage	
100-18	19265-19267	of	
100-19	19268-19284	CachedThreadPool	
100-20	19285-19294	executors	
100-21	19294-19295	.	

#Text=However, you still must calculate the depth of the thread stacks and the amount of space the JVM should reserve for each of them.
101-1	19296-19303	However	
101-2	19303-19304	,	
101-3	19305-19308	you	
101-4	19309-19314	still	
101-5	19315-19319	must	
101-6	19320-19329	calculate	
101-7	19330-19333	the	
101-8	19334-19339	depth	
101-9	19340-19342	of	
101-10	19343-19346	the	
101-11	19347-19353	thread	
101-12	19354-19360	stacks	
101-13	19361-19364	and	
101-14	19365-19368	the	
101-15	19369-19375	amount	
101-16	19376-19378	of	
101-17	19379-19384	space	
101-18	19385-19388	the	
101-19	19389-19392	JVM	
101-20	19393-19399	should	
101-21	19400-19407	reserve	
101-22	19408-19411	for	
101-23	19412-19416	each	
101-24	19417-19419	of	
101-25	19420-19424	them	
101-26	19424-19425	.	

#Text=For more information, see Executors.newCachedThreadPool() considered harmful on the Bizo website and the newCachedThreadPool section of the Class Executors topic in the Java documentation.
102-1	19426-19429	For	
102-2	19430-19434	more	
102-3	19435-19446	information	
102-4	19446-19447	,	
102-5	19448-19451	see	
102-6	19452-19481	Executors.newCachedThreadPool	
102-7	19481-19482	(	
102-8	19482-19483	)	
102-9	19484-19494	considered	
102-10	19495-19502	harmful	
102-11	19503-19505	on	
102-12	19506-19509	the	
102-13	19510-19514	Bizo	
102-14	19515-19522	website	
102-15	19523-19526	and	
102-16	19527-19530	the	
102-17	19531-19550	newCachedThreadPool	
102-18	19551-19558	section	
102-19	19559-19561	of	
102-20	19562-19565	the	
102-21	19566-19571	Class	
102-22	19572-19581	Executors	
102-23	19582-19587	topic	
102-24	19588-19590	in	
102-25	19591-19594	the	
102-26	19595-19599	Java	
102-27	19600-19613	documentation	
102-28	19613-19614	.	

#Text=Troubleshoot Failed Upload
#Text=If your app fails to upload when you push it to Cloud Foundry, it may be for one of the following reasons:
#Text=WAR is too large: An upload may fail due to the size of the WAR file.
103-1	19615-19627	Troubleshoot	
103-2	19628-19634	Failed	
103-3	19635-19641	Upload	
103-4	19642-19644	If	
103-5	19645-19649	your	
103-6	19650-19653	app	
103-7	19654-19659	fails	
103-8	19660-19662	to	
103-9	19663-19669	upload	
103-10	19670-19674	when	
103-11	19675-19678	you	
103-12	19679-19683	push	
103-13	19684-19686	it	
103-14	19687-19689	to	
103-15	19690-19695	Cloud	
103-16	19696-19703	Foundry	
103-17	19703-19704	,	
103-18	19705-19707	it	
103-19	19708-19711	may	
103-20	19712-19714	be	
103-21	19715-19718	for	
103-22	19719-19722	one	
103-23	19723-19725	of	
103-24	19726-19729	the	
103-25	19730-19739	following	
103-26	19740-19747	reasons	
103-27	19747-19748	:	
103-28	19749-19752	WAR	
103-29	19753-19755	is	
103-30	19756-19759	too	
103-31	19760-19765	large	
103-32	19765-19766	:	
103-33	19767-19769	An	
103-34	19770-19776	upload	
103-35	19777-19780	may	
103-36	19781-19785	fail	
103-37	19786-19789	due	
103-38	19790-19792	to	
103-39	19793-19796	the	
103-40	19797-19801	size	
103-41	19802-19804	of	
103-42	19805-19808	the	
103-43	19809-19812	WAR	
103-44	19813-19817	file	
103-45	19817-19818	.	

#Text=Cloud Foundry testing indicates WAR files as large as 250 MB upload successfully.
104-1	19819-19824	Cloud	
104-2	19825-19832	Foundry	
104-3	19833-19840	testing	
104-4	19841-19850	indicates	
104-5	19851-19854	WAR	
104-6	19855-19860	files	
104-7	19861-19863	as	
104-8	19864-19869	large	
104-9	19870-19872	as	
104-10	19873-19876	250	
104-11	19876-19877	 	
104-12	19877-19879	MB	
104-13	19880-19886	upload	
104-14	19887-19899	successfully	
104-15	19899-19900	.	

#Text=If a WAR file larger than that fails to upload, it may be a result of the file size.
105-1	19901-19903	If	
105-2	19904-19905	a	
105-3	19906-19909	WAR	
105-4	19910-19914	file	
105-5	19915-19921	larger	
105-6	19922-19926	than	
105-7	19927-19931	that	
105-8	19932-19937	fails	
105-9	19938-19940	to	
105-10	19941-19947	upload	
105-11	19947-19948	,	
105-12	19949-19951	it	
105-13	19952-19955	may	
105-14	19956-19958	be	
105-15	19959-19960	a	
105-16	19961-19967	result	
105-17	19968-19970	of	
105-18	19971-19974	the	
105-19	19975-19979	file	
105-20	19980-19984	size	
105-21	19984-19985	.	

#Text=Connection issues: App uploads can fail if you have a slow Internet connection, or if you upload from a location that is very remote from the target Cloud Foundry instance.
106-1	19986-19996	Connection	
106-2	19997-20003	issues	
106-3	20003-20004	:	
106-4	20005-20008	App	
106-5	20009-20016	uploads	
106-6	20017-20020	can	
106-7	20021-20025	fail	
106-8	20026-20028	if	
106-9	20029-20032	you	
106-10	20033-20037	have	
106-11	20038-20039	a	
106-12	20040-20044	slow	
106-13	20045-20053	Internet	
106-14	20054-20064	connection	
106-15	20064-20065	,	
106-16	20066-20068	or	
106-17	20069-20071	if	
106-18	20072-20075	you	
106-19	20076-20082	upload	
106-20	20083-20087	from	
106-21	20088-20089	a	
106-22	20090-20098	location	
106-23	20099-20103	that	
106-24	20104-20106	is	
106-25	20107-20111	very	
106-26	20112-20118	remote	
106-27	20119-20123	from	
106-28	20124-20127	the	
106-29	20128-20134	target	
106-30	20135-20140	Cloud	
106-31	20141-20148	Foundry	
106-32	20149-20157	instance	
106-33	20157-20158	.	

#Text=If an app upload takes a long time, your authorization token can expire before the upload completes.
107-1	20159-20161	If	
107-2	20162-20164	an	
107-3	20165-20168	app	
107-4	20169-20175	upload	
107-5	20176-20181	takes	
107-6	20182-20183	a	
107-7	20184-20188	long	
107-8	20189-20193	time	
107-9	20193-20194	,	
107-10	20195-20199	your	
107-11	20200-20213	authorization	
107-12	20214-20219	token	
107-13	20220-20223	can	
107-14	20224-20230	expire	
107-15	20231-20237	before	
107-16	20238-20241	the	
107-17	20242-20248	upload	
107-18	20249-20258	completes	
107-19	20258-20259	.	

#Text=A workaround is to copy the WAR to a server that is closer to the Cloud Foundry instance, and then push it from there.
108-1	20260-20261	A	
108-2	20262-20272	workaround	
108-3	20273-20275	is	
108-4	20276-20278	to	
108-5	20279-20283	copy	
108-6	20284-20287	the	
108-7	20288-20291	WAR	
108-8	20292-20294	to	
108-9	20295-20296	a	
108-10	20297-20303	server	
108-11	20304-20308	that	
108-12	20309-20311	is	
108-13	20312-20318	closer	
108-14	20319-20321	to	
108-15	20322-20325	the	
108-16	20326-20331	Cloud	
108-17	20332-20339	Foundry	
108-18	20340-20348	instance	
108-19	20348-20349	,	
108-20	20350-20353	and	
108-21	20354-20358	then	
108-22	20359-20363	push	
108-23	20364-20366	it	
108-24	20367-20371	from	
108-25	20372-20377	there	
108-26	20377-20378	.	

#Text=Out-of-date Cloud Foundry Command-Line Interface (cf CLI) client: Upload of a large WAR is faster and hence less likely to fail if you are using a recent version of the cf CLI.
109-1	20379-20390	Out-of-date	
109-2	20391-20396	Cloud	
109-3	20397-20404	Foundry	
109-4	20405-20417	Command-Line	
109-5	20418-20427	Interface	
109-6	20428-20429	(	
109-7	20429-20431	cf	
109-8	20432-20435	CLI	
109-9	20435-20436	)	
109-10	20437-20443	client	
109-11	20443-20444	:	
109-12	20445-20451	Upload	
109-13	20452-20454	of	
109-14	20455-20456	a	
109-15	20457-20462	large	
109-16	20463-20466	WAR	
109-17	20467-20469	is	
109-18	20470-20476	faster	
109-19	20477-20480	and	
109-20	20481-20486	hence	
109-21	20487-20491	less	
109-22	20492-20498	likely	
109-23	20499-20501	to	
109-24	20502-20506	fail	
109-25	20507-20509	if	
109-26	20510-20513	you	
109-27	20514-20517	are	
109-28	20518-20523	using	
109-29	20524-20525	a	
109-30	20526-20532	recent	
109-31	20533-20540	version	
109-32	20541-20543	of	
109-33	20544-20547	the	
109-34	20548-20550	cf	
109-35	20551-20554	CLI	
109-36	20554-20555	.	

#Text=If you are using an older version of the cf CLI client to upload a large WAR, and having problems, try updating to the latest version of the cf CLI.
110-1	20556-20558	If	
110-2	20559-20562	you	
110-3	20563-20566	are	
110-4	20567-20572	using	
110-5	20573-20575	an	
110-6	20576-20581	older	
110-7	20582-20589	version	
110-8	20590-20592	of	
110-9	20593-20596	the	
110-10	20597-20599	cf	
110-11	20600-20603	CLI	
110-12	20604-20610	client	
110-13	20611-20613	to	
110-14	20614-20620	upload	
110-15	20621-20622	a	
110-16	20623-20628	large	
110-17	20629-20632	WAR	
110-18	20632-20633	,	
110-19	20634-20637	and	
110-20	20638-20644	having	
110-21	20645-20653	problems	
110-22	20653-20654	,	
110-23	20655-20658	try	
110-24	20659-20667	updating	
110-25	20668-20670	to	
110-26	20671-20674	the	
110-27	20675-20681	latest	
110-28	20682-20689	version	
110-29	20690-20692	of	
110-30	20693-20696	the	
110-31	20697-20699	cf	
110-32	20700-20703	CLI	
110-33	20703-20704	.	

#Text=Incorrect WAR targeting: By default, cf push uploads everything in the current directory.
111-1	20705-20714	Incorrect	
111-2	20715-20718	WAR	
111-3	20719-20728	targeting	
111-4	20728-20729	:	
111-5	20730-20732	By	
111-6	20733-20740	default	
111-7	20740-20741	,	
111-8	20742-20744	cf	
111-9	20745-20749	push	
111-10	20750-20757	uploads	
111-11	20758-20768	everything	
111-12	20769-20771	in	
111-13	20772-20775	the	
111-14	20776-20783	current	
111-15	20784-20793	directory	
111-16	20793-20794	.	

#Text=For a Java app, cf push with no option flags uploads source code and other unnecessary files, in addition to the WAR.
112-1	20795-20798	For	
112-2	20799-20800	a	
112-3	20801-20805	Java	
112-4	20806-20809	app	
112-5	20809-20810	,	
112-6	20811-20813	cf	
112-7	20814-20818	push	
112-8	20819-20823	with	
112-9	20824-20826	no	
112-10	20827-20833	option	
112-11	20834-20839	flags	
112-12	20840-20847	uploads	
112-13	20848-20854	source	
112-14	20855-20859	code	
112-15	20860-20863	and	
112-16	20864-20869	other	
112-17	20870-20881	unnecessary	
112-18	20882-20887	files	
112-19	20887-20888	,	
112-20	20889-20891	in	
112-21	20892-20900	addition	
112-22	20901-20903	to	
112-23	20904-20907	the	
112-24	20908-20911	WAR	
112-25	20911-20912	.	

#Text=When you push a Java app, specify the path to the WAR by running:
#Text=cf push YOUR-APP -p PATH/TO/WAR-FILE
#Text=Where:
#Text=YOUR-APP is the name of your app.
113-1	20913-20917	When	
113-2	20918-20921	you	
113-3	20922-20926	push	
113-4	20927-20928	a	
113-5	20929-20933	Java	
113-6	20934-20937	app	
113-7	20937-20938	,	
113-8	20939-20946	specify	
113-9	20947-20950	the	
113-10	20951-20955	path	
113-11	20956-20958	to	
113-12	20959-20962	the	
113-13	20963-20966	WAR	
113-14	20967-20969	by	
113-15	20970-20977	running	
113-16	20977-20978	:	
113-17	20979-20981	cf	
113-18	20982-20986	push	
113-19	20987-20995	YOUR-APP	
113-20	20996-20997	-	
113-21	20997-20998	p	
113-22	20999-21003	PATH	
113-23	21003-21004	/	
113-24	21004-21006	TO	
113-25	21006-21007	/	
113-26	21007-21015	WAR-FILE	
113-27	21016-21021	Where	
113-28	21021-21022	:	
113-29	21023-21031	YOUR-APP	
113-30	21032-21034	is	
113-31	21035-21038	the	
113-32	21039-21043	name	
113-33	21044-21046	of	
113-34	21047-21051	your	
113-35	21052-21055	app	
113-36	21055-21056	.	

#Text=PATH/TO/WAR-FILE is the path to the WAR.
114-1	21057-21061	PATH	
114-2	21061-21062	/	
114-3	21062-21064	TO	
114-4	21064-21065	/	
114-5	21065-21073	WAR-FILE	
114-6	21074-21076	is	
114-7	21077-21080	the	
114-8	21081-21085	path	
114-9	21086-21088	to	
114-10	21089-21092	the	
114-11	21093-21096	WAR	
114-12	21096-21097	.	

#Text=You can determine whether or not the path was specified for a previously pushed app by examining the app deployment manifest, manifest.yml.
115-1	21098-21101	You	
115-2	21102-21105	can	
115-3	21106-21115	determine	
115-4	21116-21123	whether	
115-5	21124-21126	or	
115-6	21127-21130	not	
115-7	21131-21134	the	
115-8	21135-21139	path	
115-9	21140-21143	was	
115-10	21144-21153	specified	
115-11	21154-21157	for	
115-12	21158-21159	a	
115-13	21160-21170	previously	
115-14	21171-21177	pushed	
115-15	21178-21181	app	
115-16	21182-21184	by	
115-17	21185-21194	examining	
115-18	21195-21198	the	
115-19	21199-21202	app	
115-20	21203-21213	deployment	
115-21	21214-21222	manifest	
115-22	21222-21223	,	
115-23	21224-21236	manifest.yml	
115-24	21236-21237	.	

#Text=If the path attribute specifies the current directory, the manifest includes a line like:
#Text=path: .
116-1	21238-21240	If	
116-2	21241-21244	the	
116-3	21245-21249	path	
116-4	21250-21259	attribute	
116-5	21260-21269	specifies	
116-6	21270-21273	the	
116-7	21274-21281	current	
116-8	21282-21291	directory	
116-9	21291-21292	,	
116-10	21293-21296	the	
116-11	21297-21305	manifest	
116-12	21306-21314	includes	
116-13	21315-21316	a	
116-14	21317-21321	line	
116-15	21322-21326	like	
116-16	21326-21327	:	
116-17	21328-21332	path	
116-18	21332-21333	:	
116-19	21334-21335	.	

#Text=To re-push just the WAR, either:
#Text=Delete manifest.yml and run cf push again, specifying the location of the WAR using the -p flag.
117-1	21336-21338	To	
117-2	21339-21346	re-push	
117-3	21347-21351	just	
117-4	21352-21355	the	
117-5	21356-21359	WAR	
117-6	21359-21360	,	
117-7	21361-21367	either	
117-8	21367-21368	:	
117-9	21369-21375	Delete	
117-10	21376-21388	manifest.yml	
117-11	21389-21392	and	
117-12	21393-21396	run	
117-13	21397-21399	cf	
117-14	21400-21404	push	
117-15	21405-21410	again	
117-16	21410-21411	,	
117-17	21412-21422	specifying	
117-18	21423-21426	the	
117-19	21427-21435	location	
117-20	21436-21438	of	
117-21	21439-21442	the	
117-22	21443-21446	WAR	
117-23	21447-21452	using	
117-24	21453-21456	the	
117-25	21457-21458	-	
117-26	21458-21459	p	
117-27	21460-21464	flag	
117-28	21464-21465	.	

#Text=Edit the path argument in manifest.yml to point to the WAR, and re-push the app.
118-1	21466-21470	Edit	
118-2	21471-21474	the	
118-3	21475-21479	path	
118-4	21480-21488	argument	
118-5	21489-21491	in	
118-6	21492-21504	manifest.yml	
118-7	21505-21507	to	
118-8	21508-21513	point	
118-9	21514-21516	to	
118-10	21517-21520	the	
118-11	21521-21524	WAR	
118-12	21524-21525	,	
118-13	21526-21529	and	
118-14	21530-21537	re-push	
118-15	21538-21541	the	
118-16	21542-21545	app	
118-17	21545-21546	.	

#Text=Debug Java Apps on Cloud Foundry
#Text=Because of the way that Cloud Foundry deploys your apps and isolates them, it is not possible to connect to your app with the remote Java debugger.
119-1	21547-21552	Debug	
119-2	21553-21557	Java	
119-3	21558-21562	Apps	
119-4	21563-21565	on	
119-5	21566-21571	Cloud	
119-6	21572-21579	Foundry	
119-7	21580-21587	Because	
119-8	21588-21590	of	
119-9	21591-21594	the	
119-10	21595-21598	way	
119-11	21599-21603	that	
119-12	21604-21609	Cloud	
119-13	21610-21617	Foundry	
119-14	21618-21625	deploys	
119-15	21626-21630	your	
119-16	21631-21635	apps	
119-17	21636-21639	and	
119-18	21640-21648	isolates	
119-19	21649-21653	them	
119-20	21653-21654	,	
119-21	21655-21657	it	
119-22	21658-21660	is	
119-23	21661-21664	not	
119-24	21665-21673	possible	
119-25	21674-21676	to	
119-26	21677-21684	connect	
119-27	21685-21687	to	
119-28	21688-21692	your	
119-29	21693-21696	app	
119-30	21697-21701	with	
119-31	21702-21705	the	
119-32	21706-21712	remote	
119-33	21713-21717	Java	
119-34	21718-21726	debugger	
119-35	21726-21727	.	

#Text=Instead, instruct the app to connect to the Java debugger on your local machine.
120-1	21728-21735	Instead	
120-2	21735-21736	,	
120-3	21737-21745	instruct	
120-4	21746-21749	the	
120-5	21750-21753	app	
120-6	21754-21756	to	
120-7	21757-21764	connect	
120-8	21765-21767	to	
120-9	21768-21771	the	
120-10	21772-21776	Java	
120-11	21777-21785	debugger	
120-12	21786-21788	on	
120-13	21789-21793	your	
120-14	21794-21799	local	
120-15	21800-21807	machine	
120-16	21807-21808	.	

#Text=To set up remote debugging when using BOSH Lite or a Cloud Foundry installation:
#Text=Open your project in Eclipse.
121-1	21809-21811	To	
121-2	21812-21815	set	
121-3	21816-21818	up	
121-4	21819-21825	remote	
121-5	21826-21835	debugging	
121-6	21836-21840	when	
121-7	21841-21846	using	
121-8	21847-21851	BOSH	
121-9	21852-21856	Lite	
121-10	21857-21859	or	
121-11	21860-21861	a	
121-12	21862-21867	Cloud	
121-13	21868-21875	Foundry	
121-14	21876-21888	installation	
121-15	21888-21889	:	
121-16	21890-21894	Open	
121-17	21895-21899	your	
121-18	21900-21907	project	
121-19	21908-21910	in	
121-20	21911-21918	Eclipse	
121-21	21918-21919	.	

#Text=Right-click on your project, go to Debug as and pick Debug Configurations.
122-1	21920-21931	Right-click	
122-2	21932-21934	on	
122-3	21935-21939	your	
122-4	21940-21947	project	
122-5	21947-21948	,	
122-6	21949-21951	go	
122-7	21952-21954	to	
122-8	21955-21960	Debug	
122-9	21961-21963	as	
122-10	21964-21967	and	
122-11	21968-21972	pick	
122-12	21973-21978	Debug	
122-13	21979-21993	Configurations	
122-14	21993-21994	.	

#Text=Create a new Remote Java Application.
123-1	21995-22001	Create	
123-2	22002-22003	a	
123-3	22004-22007	new	
123-4	22008-22014	Remote	
123-5	22015-22019	Java	
123-6	22020-22031	Application	
123-7	22031-22032	.	

#Text=Make sure your project is selected, pick Standard (Socket Listen) from the Connection Type drop down and set a port.
124-1	22033-22037	Make	
124-2	22038-22042	sure	
124-3	22043-22047	your	
124-4	22048-22055	project	
124-5	22056-22058	is	
124-6	22059-22067	selected	
124-7	22067-22068	,	
124-8	22069-22073	pick	
124-9	22074-22082	Standard	
124-10	22083-22084	(	
124-11	22084-22090	Socket	
124-12	22091-22097	Listen	
124-13	22097-22098	)	
124-14	22099-22103	from	
124-15	22104-22107	the	
124-16	22108-22118	Connection	
124-17	22119-22123	Type	
124-18	22124-22128	drop	
124-19	22129-22133	down	
124-20	22134-22137	and	
124-21	22138-22141	set	
124-22	22142-22143	a	
124-23	22144-22148	port	
124-24	22148-22149	.	

#Text=Make sure this port is open if you are running a firewall.
125-1	22150-22154	Make	
125-2	22155-22159	sure	
125-3	22160-22164	this	
125-4	22165-22169	port	
125-5	22170-22172	is	
125-6	22173-22177	open	
125-7	22178-22180	if	
125-8	22181-22184	you	
125-9	22185-22188	are	
125-10	22189-22196	running	
125-11	22197-22198	a	
125-12	22199-22207	firewall	
125-13	22207-22208	.	

#Text=Click Debug.
126-1	22209-22214	Click	
126-2	22215-22220	Debug	
126-3	22220-22221	.	

#Text=The debugger should now be running.
127-1	22222-22225	The	
127-2	22226-22234	debugger	
127-3	22235-22241	should	
127-4	22242-22245	now	
127-5	22246-22248	be	
127-6	22249-22256	running	
127-7	22256-22257	.	

#Text=If you switch to the Debug perspective, you should see your app listed in the Debug panel, and it should say Waiting for vm to connect at port.
128-1	22258-22260	If	
128-2	22261-22264	you	
128-3	22265-22271	switch	
128-4	22272-22274	to	
128-5	22275-22278	the	
128-6	22279-22284	Debug	
128-7	22285-22296	perspective	
128-8	22296-22297	,	
128-9	22298-22301	you	
128-10	22302-22308	should	
128-11	22309-22312	see	
128-12	22313-22317	your	
128-13	22318-22321	app	
128-14	22322-22328	listed	
128-15	22329-22331	in	
128-16	22332-22335	the	
128-17	22336-22341	Debug	
128-18	22342-22347	panel	
128-19	22347-22348	,	
128-20	22349-22352	and	
128-21	22353-22355	it	
128-22	22356-22362	should	
128-23	22363-22366	say	
128-24	22367-22374	Waiting	
128-25	22375-22378	for	
128-26	22379-22381	vm	
128-27	22382-22384	to	
128-28	22385-22392	connect	
128-29	22393-22395	at	
128-30	22396-22400	port	
128-31	22400-22401	.	

#Text=Next, to push your app to Cloud Foundry and instruct Cloud Foundry to connect to the debugger running on your local machine:
#Text=Edit your manifest.yml file.
129-1	22402-22406	Next	
129-2	22406-22407	,	
129-3	22408-22410	to	
129-4	22411-22415	push	
129-5	22416-22420	your	
129-6	22421-22424	app	
129-7	22425-22427	to	
129-8	22428-22433	Cloud	
129-9	22434-22441	Foundry	
129-10	22442-22445	and	
129-11	22446-22454	instruct	
129-12	22455-22460	Cloud	
129-13	22461-22468	Foundry	
129-14	22469-22471	to	
129-15	22472-22479	connect	
129-16	22480-22482	to	
129-17	22483-22486	the	
129-18	22487-22495	debugger	
129-19	22496-22503	running	
129-20	22504-22506	on	
129-21	22507-22511	your	
129-22	22512-22517	local	
129-23	22518-22525	machine	
129-24	22525-22526	:	
129-25	22527-22531	Edit	
129-26	22532-22536	your	
129-27	22537-22549	manifest.yml	
129-28	22550-22554	file	
129-29	22554-22555	.	

#Text=Set the instances count to 1.
130-1	22556-22559	Set	
130-2	22560-22563	the	
130-3	22564-22573	instances	
130-4	22574-22579	count	
130-5	22580-22582	to	
130-6	22583-22584	1	
130-7	22584-22585	.	

#Text=If you set this greater than one, multiple apps try to connect to your debugger.
131-1	22586-22588	If	
131-2	22589-22592	you	
131-3	22593-22596	set	
131-4	22597-22601	this	
131-5	22602-22609	greater	
131-6	22610-22614	than	
131-7	22615-22618	one	
131-8	22618-22619	,	
131-9	22620-22628	multiple	
131-10	22629-22633	apps	
131-11	22634-22637	try	
131-12	22638-22640	to	
131-13	22641-22648	connect	
131-14	22649-22651	to	
131-15	22652-22656	your	
131-16	22657-22665	debugger	
131-17	22665-22666	.	

#Text=Also in manifest.yml, add an env block and create a variable named JAVA_OPTS.
132-1	22667-22671	Also	
132-2	22672-22674	in	
132-3	22675-22687	manifest.yml	
132-4	22687-22688	,	
132-5	22689-22692	add	
132-6	22693-22695	an	
132-7	22696-22699	env	
132-8	22700-22705	block	
132-9	22706-22709	and	
132-10	22710-22716	create	
132-11	22717-22718	a	
132-12	22719-22727	variable	
132-13	22728-22733	named	
132-14	22734-22743	JAVA_OPTS	
132-15	22743-22744	.	

#Text=For more information about the env block, see Deploying with App Manifests.
133-1	22745-22748	For	
133-2	22749-22753	more	
133-3	22754-22765	information	
133-4	22766-22771	about	
133-5	22772-22775	the	
133-6	22776-22779	env	
133-7	22780-22785	block	
133-8	22785-22786	,	
133-9	22787-22790	see	
133-10	22791-22800	Deploying	
133-11	22801-22805	with	
133-12	22806-22809	App	
133-13	22810-22819	Manifests	
133-14	22819-22820	.	

#Text=Add the remote debugger configuration to the JAVA_OPTS variable: -agentlib:jdwp=transport=dt_socket,address=YOUR-IP-ADDRESS:YOUR-PORT.
134-1	22821-22824	Add	
134-2	22825-22828	the	
134-3	22829-22835	remote	
134-4	22836-22844	debugger	
134-5	22845-22858	configuration	
134-6	22859-22861	to	
134-7	22862-22865	the	
134-8	22866-22875	JAVA_OPTS	
134-9	22876-22884	variable	
134-10	22884-22885	:	
134-11	22886-22887	-	
134-12	22887-22895	agentlib	
134-13	22895-22896	:	
134-14	22896-22900	jdwp	
134-15	22900-22901	=	
134-16	22901-22910	transport	
134-17	22910-22911	=	
134-18	22911-22920	dt_socket	
134-19	22920-22921	,	
134-20	22921-22928	address	
134-21	22928-22929	=	
134-22	22929-22944	YOUR-IP-ADDRESS	
134-23	22944-22945	:	
134-24	22945-22954	YOUR-PORT	
134-25	22954-22955	.	

#Text=Save the manifest.yml file.
135-1	22956-22960	Save	
135-2	22961-22964	the	
135-3	22965-22977	manifest.yml	
135-4	22978-22982	file	
135-5	22982-22983	.	

#Text=Run:
#Text=cf push
#Text=Upon completion, you should see that your app has started and is now connected to the debugger running in your IDE.
136-1	22984-22987	Run	
136-2	22987-22988	:	
136-3	22989-22991	cf	
136-4	22992-22996	push	
136-5	22997-23001	Upon	
136-6	23002-23012	completion	
136-7	23012-23013	,	
136-8	23014-23017	you	
136-9	23018-23024	should	
136-10	23025-23028	see	
136-11	23029-23033	that	
136-12	23034-23038	your	
136-13	23039-23042	app	
136-14	23043-23046	has	
136-15	23047-23054	started	
136-16	23055-23058	and	
136-17	23059-23061	is	
136-18	23062-23065	now	
136-19	23066-23075	connected	
136-20	23076-23078	to	
136-21	23079-23082	the	
136-22	23083-23091	debugger	
136-23	23092-23099	running	
136-24	23100-23102	in	
136-25	23103-23107	your	
136-26	23108-23111	IDE	
136-27	23111-23112	.	

#Text=You can now add breakpoints and interrogate the app just as you would if it were running locally.
137-1	23113-23116	You	
137-2	23117-23120	can	
137-3	23121-23124	now	
137-4	23125-23128	add	
137-5	23129-23140	breakpoints	
137-6	23141-23144	and	
137-7	23145-23156	interrogate	
137-8	23157-23160	the	
137-9	23161-23164	app	
137-10	23165-23169	just	
137-11	23170-23172	as	
137-12	23173-23176	you	
137-13	23177-23182	would	
137-14	23183-23185	if	
137-15	23186-23188	it	
137-16	23189-23193	were	
137-17	23194-23201	running	
137-18	23202-23209	locally	
137-19	23209-23210	.	

#Text=Slow Starting Java or Grails Apps
#Text=Some Java and Grails apps do not start quickly, and the health check for an app can fail if an app starts too slowly.
138-1	23211-23215	Slow	
138-2	23216-23224	Starting	
138-3	23225-23229	Java	
138-4	23230-23232	or	
138-5	23233-23239	Grails	
138-6	23240-23244	Apps	
138-7	23245-23249	Some	
138-8	23250-23254	Java	
138-9	23255-23258	and	
138-10	23259-23265	Grails	
138-11	23266-23270	apps	
138-12	23271-23273	do	
138-13	23274-23277	not	
138-14	23278-23283	start	
138-15	23284-23291	quickly	
138-16	23291-23292	,	
138-17	23293-23296	and	
138-18	23297-23300	the	
138-19	23301-23307	health	
138-20	23308-23313	check	
138-21	23314-23317	for	
138-22	23318-23320	an	
138-23	23321-23324	app	
138-24	23325-23328	can	
138-25	23329-23333	fail	
138-26	23334-23336	if	
138-27	23337-23339	an	
138-28	23340-23343	app	
138-29	23344-23350	starts	
138-30	23351-23354	too	
138-31	23355-23361	slowly	
138-32	23361-23362	.	

#Text=The current Java buildpack implementation sets the Tomcat bindOnInit property to false.
139-1	23363-23366	The	
139-2	23367-23374	current	
139-3	23375-23379	Java	
139-4	23380-23389	buildpack	
139-5	23390-23404	implementation	
139-6	23405-23409	sets	
139-7	23410-23413	the	
139-8	23414-23420	Tomcat	
139-9	23421-23431	bindOnInit	
139-10	23432-23440	property	
139-11	23441-23443	to	
139-12	23444-23449	false	
139-13	23449-23450	.	

#Text=This prevents Tomcat from listening for HTTP requests until an app has fully deployed.
140-1	23451-23455	This	
140-2	23456-23464	prevents	
140-3	23465-23471	Tomcat	
140-4	23472-23476	from	
140-5	23477-23486	listening	
140-6	23487-23490	for	
140-7	23491-23495	HTTP	
140-8	23496-23504	requests	
140-9	23505-23510	until	
140-10	23511-23513	an	
140-11	23514-23517	app	
140-12	23518-23521	has	
140-13	23522-23527	fully	
140-14	23528-23536	deployed	
140-15	23536-23537	.	

#Text=If your app does not start quickly, the health check may fail because it checks the health of the app before the app can accept requests.
141-1	23538-23540	If	
141-2	23541-23545	your	
141-3	23546-23549	app	
141-4	23550-23554	does	
141-5	23555-23558	not	
141-6	23559-23564	start	
141-7	23565-23572	quickly	
141-8	23572-23573	,	
141-9	23574-23577	the	
141-10	23578-23584	health	
141-11	23585-23590	check	
141-12	23591-23594	may	
141-13	23595-23599	fail	
141-14	23600-23607	because	
141-15	23608-23610	it	
141-16	23611-23617	checks	
141-17	23618-23621	the	
141-18	23622-23628	health	
141-19	23629-23631	of	
141-20	23632-23635	the	
141-21	23636-23639	app	
141-22	23640-23646	before	
141-23	23647-23650	the	
141-24	23651-23654	app	
141-25	23655-23658	can	
141-26	23659-23665	accept	
141-27	23666-23674	requests	
141-28	23674-23675	.	

#Text=By default, the health check fails after a timeout threshold of 60 seconds.
142-1	23676-23678	By	
142-2	23679-23686	default	
142-3	23686-23687	,	
142-4	23688-23691	the	
142-5	23692-23698	health	
142-6	23699-23704	check	
142-7	23705-23710	fails	
142-8	23711-23716	after	
142-9	23717-23718	a	
142-10	23719-23726	timeout	
142-11	23727-23736	threshold	
142-12	23737-23739	of	
142-13	23740-23742	60	
142-14	23743-23750	seconds	
142-15	23750-23751	.	

#Text=To resolve this issue, run cf push with the -t TIMEOUT-THRESHOLD option to increase the timeout threshold.
143-1	23752-23754	To	
143-2	23755-23762	resolve	
143-3	23763-23767	this	
143-4	23768-23773	issue	
143-5	23773-23774	,	
143-6	23775-23778	run	
143-7	23779-23781	cf	
143-8	23782-23786	push	
143-9	23787-23791	with	
143-10	23792-23795	the	
143-11	23796-23797	-	
143-12	23797-23798	t	
143-13	23799-23816	TIMEOUT-THRESHOLD	
143-14	23817-23823	option	
143-15	23824-23826	to	
143-16	23827-23835	increase	
143-17	23836-23839	the	
143-18	23840-23847	timeout	
143-19	23848-23857	threshold	
143-20	23857-23858	.	

#Text=Run:
#Text=$ cf push YOUR-APP -t TIMEOUT-THRESHOLD
#Text=Where:
#Text=YOUR-APP is the name of your app.
144-1	23859-23862	Run	
144-2	23862-23863	:	
144-3	23864-23865	$	
144-4	23866-23868	cf	
144-5	23869-23873	push	
144-6	23874-23882	YOUR-APP	
144-7	23883-23884	-	
144-8	23884-23885	t	
144-9	23886-23903	TIMEOUT-THRESHOLD	
144-10	23904-23909	Where	
144-11	23909-23910	:	
144-12	23911-23919	YOUR-APP	
144-13	23920-23922	is	
144-14	23923-23926	the	
144-15	23927-23931	name	
144-16	23932-23934	of	
144-17	23935-23939	your	
144-18	23940-23943	app	
144-19	23943-23944	.	

#Text=TIMEOUT-THRESHOLD is the number of seconds to which you want to increase the timeout threshold.
145-1	23945-23962	TIMEOUT-THRESHOLD	
145-2	23963-23965	is	
145-3	23966-23969	the	
145-4	23970-23976	number	
145-5	23977-23979	of	
145-6	23980-23987	seconds	
145-7	23988-23990	to	
145-8	23991-23996	which	
145-9	23997-24000	you	
145-10	24001-24005	want	
145-11	24006-24008	to	
145-12	24009-24017	increase	
145-13	24018-24021	the	
145-14	24022-24029	timeout	
145-15	24030-24039	threshold	
145-16	24039-24040	.	

#Text=Note: The timeout threshold cannot exceed 180 seconds.
146-1	24041-24045	Note	
146-2	24045-24046	:	
146-3	24047-24050	The	
146-4	24051-24058	timeout	
146-5	24059-24068	threshold	
146-6	24069-24075	cannot	
146-7	24076-24082	exceed	
146-8	24083-24086	180	
146-9	24087-24094	seconds	
146-10	24094-24095	.	

#Text=Specifying a timeout threshold greater than 180 seconds results in the following error: Server error, status code: 400, error code: 100001, message: The app is invalid: health_check_timeout maximum_exceeded
#Text=Extension
#Text=The Java buildpack is also designed to be easily extended.
147-1	24096-24106	Specifying	
147-2	24107-24108	a	
147-3	24109-24116	timeout	
147-4	24117-24126	threshold	
147-5	24127-24134	greater	
147-6	24135-24139	than	
147-7	24140-24143	180	
147-8	24144-24151	seconds	
147-9	24152-24159	results	
147-10	24160-24162	in	
147-11	24163-24166	the	
147-12	24167-24176	following	
147-13	24177-24182	error	
147-14	24182-24183	:	
147-15	24184-24190	Server	
147-16	24191-24196	error	
147-17	24196-24197	,	
147-18	24198-24204	status	
147-19	24205-24209	code	
147-20	24209-24210	:	
147-21	24211-24214	400	
147-22	24214-24215	,	
147-23	24216-24221	error	
147-24	24222-24226	code	
147-25	24226-24227	:	
147-26	24228-24234	100001	
147-27	24234-24235	,	
147-28	24236-24243	message	
147-29	24243-24244	:	
147-30	24245-24248	The	
147-31	24249-24252	app	
147-32	24253-24255	is	
147-33	24256-24263	invalid	
147-34	24263-24264	:	
147-35	24265-24285	health_check_timeout	
147-36	24286-24302	maximum_exceeded	
147-37	24303-24312	Extension	
147-38	24313-24316	The	
147-39	24317-24321	Java	
147-40	24322-24331	buildpack	
147-41	24332-24334	is	
147-42	24335-24339	also	
147-43	24340-24348	designed	
147-44	24349-24351	to	
147-45	24352-24354	be	
147-46	24355-24361	easily	
147-47	24362-24370	extended	
147-48	24370-24371	.	

#Text=It creates abstractions for three types of components (containers, frameworks, and JREs) in order to allow users to easily add functionality.
148-1	24372-24374	It	
148-2	24375-24382	creates	
148-3	24383-24395	abstractions	
148-4	24396-24399	for	
148-5	24400-24405	three	
148-6	24406-24411	types	
148-7	24412-24414	of	
148-8	24415-24425	components	
148-9	24426-24427	(	
148-10	24427-24437	containers	
148-11	24437-24438	,	
148-12	24439-24449	frameworks	
148-13	24449-24450	,	
148-14	24451-24454	and	
148-15	24455-24459	JREs	
148-16	24459-24460	)	
148-17	24461-24463	in	
148-18	24464-24469	order	
148-19	24470-24472	to	
148-20	24473-24478	allow	
148-21	24479-24484	users	
148-22	24485-24487	to	
148-23	24488-24494	easily	
148-24	24495-24498	add	
148-25	24499-24512	functionality	
148-26	24512-24513	.	

#Text=In addition to these abstractions, there are a number of utility classes for simplifying typical buildpack behaviors.
149-1	24514-24516	In	
149-2	24517-24525	addition	
149-3	24526-24528	to	
149-4	24529-24534	these	
149-5	24535-24547	abstractions	
149-6	24547-24548	,	
149-7	24549-24554	there	
149-8	24555-24558	are	
149-9	24559-24560	a	
149-10	24561-24567	number	
149-11	24568-24570	of	
149-12	24571-24578	utility	
149-13	24579-24586	classes	
149-14	24587-24590	for	
149-15	24591-24602	simplifying	
149-16	24603-24610	typical	
149-17	24611-24620	buildpack	
149-18	24621-24630	behaviors	
149-19	24630-24631	.	

#Text=As an example, the New Relic framework looks like the below:
#Text=class NewRelicAgent < JavaBuildpack::Component::VersionedDependencyComponent
#Text=# @macro base_component_compile
#Text=def compile
#Text=FileUtils.mkdir_p logs_dir
#Text=download_jar
#Text=@droplet.copy_resources
#Text=end
#Text=# @macro base_component_release
#Text=def release
#Text=@droplet.java_opts
#Text=.add_javaagent(@droplet.sandbox + jar_name)
#Text=.add_system_property('newrelic.home', @droplet.sandbox)
#Text=.add_system_property('newrelic.config.license_key', license_key)
#Text=.add_system_property('newrelic.config.app_name', "'#{application_name}'")
#Text=.add_system_property('newrelic.config.log_file_path', logs_dir)
#Text=end
#Text=protected
#Text=# @macro versioned_dependency_component_supports
#Text=def supports?
150-1	24632-24634	As	
150-2	24635-24637	an	
150-3	24638-24645	example	
150-4	24645-24646	,	
150-5	24647-24650	the	
150-6	24651-24654	New	
150-7	24655-24660	Relic	
150-8	24661-24670	framework	
150-9	24671-24676	looks	
150-10	24677-24681	like	
150-11	24682-24685	the	
150-12	24686-24691	below	
150-13	24691-24692	:	
150-14	24693-24698	class	
150-15	24699-24712	NewRelicAgent	
150-16	24713-24714	<	
150-17	24715-24728	JavaBuildpack	
150-18	24728-24729	:	
150-19	24729-24730	:	
150-20	24730-24739	Component	
150-21	24739-24740	:	
150-22	24740-24741	:	
150-23	24741-24769	VersionedDependencyComponent	
150-24	24770-24771	#	
150-25	24772-24773	@	
150-26	24773-24778	macro	
150-27	24779-24801	base_component_compile	
150-28	24802-24805	def	
150-29	24806-24813	compile	
150-30	24814-24831	FileUtils.mkdir_p	
150-31	24832-24840	logs_dir	
150-32	24841-24853	download_jar	
150-33	24854-24855	@	
150-34	24855-24877	droplet.copy_resources	
150-35	24878-24881	end	
150-36	24882-24883	#	
150-37	24884-24885	@	
150-38	24885-24890	macro	
150-39	24891-24913	base_component_release	
150-40	24914-24917	def	
150-41	24918-24925	release	
150-42	24926-24927	@	
150-43	24927-24944	droplet.java_opts	
150-44	24945-24946	.	
150-45	24946-24959	add_javaagent	
150-46	24959-24960	(	
150-47	24960-24961	@	
150-48	24961-24976	droplet.sandbox	
150-49	24977-24978	+	
150-50	24979-24987	jar_name	
150-51	24987-24988	)	
150-52	24989-24990	.	
150-53	24990-25009	add_system_property	
150-54	25009-25010	(	
150-55	25010-25011	'	
150-56	25011-25024	newrelic.home	
150-57	25024-25025	'	
150-58	25025-25026	,	
150-59	25027-25028	@	
150-60	25028-25043	droplet.sandbox	
150-61	25043-25044	)	
150-62	25045-25046	.	
150-63	25046-25065	add_system_property	
150-64	25065-25066	(	
150-65	25066-25067	'	
150-66	25067-25094	newrelic.config.license_key	
150-67	25094-25095	'	
150-68	25095-25096	,	
150-69	25097-25108	license_key	
150-70	25108-25109	)	
150-71	25110-25111	.	
150-72	25111-25130	add_system_property	
150-73	25130-25131	(	
150-74	25131-25132	'	
150-75	25132-25156	newrelic.config.app_name	
150-76	25156-25157	'	
150-77	25157-25158	,	
150-78	25159-25160	"	
150-79	25160-25161	'	
150-80	25161-25162	#	
150-81	25162-25163	{	
150-82	25163-25179	application_name	
150-83	25179-25180	}	
150-84	25180-25181	'	
150-85	25181-25182	"	
150-86	25182-25183	)	
150-87	25184-25185	.	
150-88	25185-25204	add_system_property	
150-89	25204-25205	(	
150-90	25205-25206	'	
150-91	25206-25235	newrelic.config.log_file_path	
150-92	25235-25236	'	
150-93	25236-25237	,	
150-94	25238-25246	logs_dir	
150-95	25246-25247	)	
150-96	25248-25251	end	
150-97	25252-25261	protected	
150-98	25262-25263	#	
150-99	25264-25265	@	
150-100	25265-25270	macro	
150-101	25271-25310	versioned_dependency_component_supports	
150-102	25311-25314	def	
150-103	25315-25323	supports	
150-104	25323-25324	?	

#Text=@application.services.one_service?
151-1	25325-25326	@	
151-2	25326-25358	application.services.one_service	
151-3	25358-25359	?	

#Text=FILTER, 'licenseKey'
#Text=end
#Text=private
#Text=FILTER = /newrelic/.freeze
#Text=def application_name
#Text=@application.details['application_name']
#Text=end
#Text=def license_key
#Text=@application.services.find_service(FILTER)['credentials']['licenseKey']
#Text=end
#Text=def logs_dir
#Text=@droplet.sandbox + 'logs'
#Text=end
#Text=end
#Text=For more information, see Design, Extending, and Configuration and Extension in the Cloud Foundry Java Buildpack repository on GitHub.
152-1	25360-25366	FILTER	
152-2	25366-25367	,	
152-3	25368-25369	'	
152-4	25369-25379	licenseKey	
152-5	25379-25380	'	
152-6	25381-25384	end	
152-7	25385-25392	private	
152-8	25393-25399	FILTER	
152-9	25400-25401	=	
152-10	25402-25403	/	
152-11	25403-25411	newrelic	
152-12	25411-25412	/	
152-13	25412-25413	.	
152-14	25413-25419	freeze	
152-15	25420-25423	def	
152-16	25424-25440	application_name	
152-17	25441-25442	@	
152-18	25442-25461	application.details	
152-19	25461-25462	[	
152-20	25462-25463	'	
152-21	25463-25479	application_name	
152-22	25479-25480	'	
152-23	25480-25481	]	
152-24	25482-25485	end	
152-25	25486-25489	def	
152-26	25490-25501	license_key	
152-27	25502-25503	@	
152-28	25503-25536	application.services.find_service	
152-29	25536-25537	(	
152-30	25537-25543	FILTER	
152-31	25543-25544	)	
152-32	25544-25545	[	
152-33	25545-25546	'	
152-34	25546-25557	credentials	
152-35	25557-25558	'	
152-36	25558-25559	]	
152-37	25559-25560	[	
152-38	25560-25561	'	
152-39	25561-25571	licenseKey	
152-40	25571-25572	'	
152-41	25572-25573	]	
152-42	25574-25577	end	
152-43	25578-25581	def	
152-44	25582-25590	logs_dir	
152-45	25591-25592	@	
152-46	25592-25607	droplet.sandbox	
152-47	25608-25609	+	
152-48	25610-25611	'	
152-49	25611-25615	logs	
152-50	25615-25616	'	
152-51	25617-25620	end	
152-52	25621-25624	end	
152-53	25625-25628	For	
152-54	25629-25633	more	
152-55	25634-25645	information	
152-56	25645-25646	,	
152-57	25647-25650	see	
152-58	25651-25657	Design	
152-59	25657-25658	,	
152-60	25659-25668	Extending	
152-61	25668-25669	,	
152-62	25670-25673	and	
152-63	25674-25687	Configuration	
152-64	25688-25691	and	
152-65	25692-25701	Extension	
152-66	25702-25704	in	
152-67	25705-25708	the	
152-68	25709-25714	Cloud	
152-69	25715-25722	Foundry	
152-70	25723-25727	Java	
152-71	25728-25737	Buildpack	
152-72	25738-25748	repository	
152-73	25749-25751	on	
152-74	25752-25758	GitHub	
152-75	25758-25759	.	

#Text=Environment Variables
#Text=You can access environments variable programmatically.
153-1	25760-25771	Environment	
153-2	25772-25781	Variables	
153-3	25782-25785	You	
153-4	25786-25789	can	
153-5	25790-25796	access	
153-6	25797-25809	environments	
153-7	25810-25818	variable	
153-8	25819-25835	programmatically	
153-9	25835-25836	.	

#Text=For example, you can obtain VCAP_SERVICES by running:
#Text=System.getenv("VCAP_SERVICES");
#Text=For more information, see CF Environment Variables.
154-1	25837-25840	For	
154-2	25841-25848	example	
154-3	25848-25849	,	
154-4	25850-25853	you	
154-5	25854-25857	can	
154-6	25858-25864	obtain	
154-7	25865-25878	VCAP_SERVICES	
154-8	25879-25881	by	
154-9	25882-25889	running	
154-10	25889-25890	:	
154-11	25891-25904	System.getenv	
154-12	25904-25905	(	
154-13	25905-25906	"	
154-14	25906-25919	VCAP_SERVICES	
154-15	25919-25920	"	
154-16	25920-25921	)	
154-17	25921-25922	;	
154-18	25923-25926	For	
154-19	25927-25931	more	
154-20	25932-25943	information	
154-21	25943-25944	,	
154-22	25945-25948	see	
154-23	25949-25951	CF	
154-24	25952-25963	Environment	
154-25	25964-25973	Variables	
154-26	25973-25974	.	

#Text=Create a pull request or raise an issue on the source for this page in GitHub
#Text=Cloud Foundry Documentation
#Text=© 2021 Cloud Foundry Foundation.
155-1	25975-25981	Create	
155-2	25982-25983	a	
155-3	25984-25988	pull	
155-4	25989-25996	request	
155-5	25997-25999	or	
155-6	26000-26005	raise	
155-7	26006-26008	an	
155-8	26009-26014	issue	
155-9	26015-26017	on	
155-10	26018-26021	the	
155-11	26022-26028	source	
155-12	26029-26032	for	
155-13	26033-26037	this	
155-14	26038-26042	page	
155-15	26043-26045	in	
155-16	26046-26052	GitHub	
155-17	26053-26058	Cloud	
155-18	26059-26066	Foundry	
155-19	26067-26080	Documentation	
155-20	26081-26082	©	
155-21	26083-26087	2021	
155-22	26088-26093	Cloud	
155-23	26094-26101	Foundry	
155-24	26102-26112	Foundation	
155-25	26112-26113	.	

#Text=All Rights Reserved.
156-1	26114-26117	All	
156-2	26118-26124	Rights	
156-3	26125-26133	Reserved	
156-4	26133-26134	.	

#Text=Get Involved
157-1	26135-26138	Get	
157-2	26139-26147	Involved	
