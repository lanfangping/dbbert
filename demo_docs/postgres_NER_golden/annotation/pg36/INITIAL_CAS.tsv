#FORMAT=WebAnno TSV 3.3


#Text=Optimizing PostgreSQL for gvmd - Greenbone Source Edition (GSE) - Greenbone Community Portal Optimizing PostgreSQL for gvmd Greenbone Source Edition (GSE) tatooin September 14, 2020,
1-1	0-10	Optimizing	
1-2	11-21	PostgreSQL	
1-3	22-25	for	
1-4	26-30	gvmd	
1-5	31-32	-	
1-6	33-42	Greenbone	
1-7	43-49	Source	
1-8	50-57	Edition	
1-9	58-59	(	
1-10	59-62	GSE	
1-11	62-63	)	
1-12	64-65	-	
1-13	66-75	Greenbone	
1-14	76-85	Community	
1-15	86-92	Portal	
1-16	93-103	Optimizing	
1-17	104-114	PostgreSQL	
1-18	115-118	for	
1-19	119-123	gvmd	
1-20	124-133	Greenbone	
1-21	134-140	Source	
1-22	141-148	Edition	
1-23	149-150	(	
1-24	150-153	GSE	
1-25	153-154	)	
1-26	155-162	tatooin	
1-27	163-172	September	
1-28	173-175	14	
1-29	175-176	,	
1-30	177-181	2020	
1-31	181-182	,	

#Text=2:26pm Hello Is there any tweaks / hints to optimize / fine-tune PostgreSQL for gvmd ? My installation has plenty of CPU / Memory available; but still gsad is often very slow to answer queries, and very often it fails to receive answers from gvmd due to time out.
2-1	183-184	2	
2-2	184-185	:	
2-3	185-189	26pm	
2-4	190-195	Hello	
2-5	196-198	Is	
2-6	199-204	there	
2-7	205-208	any	
2-8	209-215	tweaks	
2-9	216-217	/	
2-10	218-223	hints	
2-11	224-226	to	
2-12	227-235	optimize	
2-13	236-237	/	
2-14	238-247	fine-tune	
2-15	248-258	PostgreSQL	
2-16	259-262	for	
2-17	263-267	gvmd	
2-18	268-269	?	
2-19	270-272	My	
2-20	273-285	installation	
2-21	286-289	has	
2-22	290-296	plenty	
2-23	297-299	of	
2-24	300-303	CPU	
2-25	304-305	/	
2-26	306-312	Memory	
2-27	313-322	available	
2-28	322-323	;	
2-29	324-327	but	
2-30	328-333	still	
2-31	334-338	gsad	
2-32	339-341	is	
2-33	342-347	often	
2-34	348-352	very	
2-35	353-357	slow	
2-36	358-360	to	
2-37	361-367	answer	
2-38	368-375	queries	
2-39	375-376	,	
2-40	377-380	and	
2-41	381-385	very	
2-42	386-391	often	
2-43	392-394	it	
2-44	395-400	fails	
2-45	401-403	to	
2-46	404-411	receive	
2-47	412-419	answers	
2-48	420-424	from	
2-49	425-429	gvmd	
2-50	430-433	due	
2-51	434-436	to	
2-52	437-441	time	
2-53	442-445	out	
2-54	445-446	.	

#Text=Looking at the processes clearly show that postgresql daemons are taking most of the CPU power, but still this remains very low considering the global CPU power of the system. So clearly, it doesn’t seem optimized. Any clue ? Thanks tux September 15, 2020, 4:56am Which version of PostgreSQL do you use? Lukas September 15, 2020, 8:46am Are you sure that is a CPU or IO issue ?
3-1	447-454	Looking	
3-2	455-457	at	
3-3	458-461	the	
3-4	462-471	processes	
3-5	472-479	clearly	
3-6	480-484	show	
3-7	485-489	that	
3-8	490-500	postgresql	
3-9	501-508	daemons	
3-10	509-512	are	
3-11	513-519	taking	
3-12	520-524	most	
3-13	525-527	of	
3-14	528-531	the	
3-15	532-535	CPU	
3-16	536-541	power	
3-17	541-542	,	
3-18	543-546	but	
3-19	547-552	still	
3-20	553-557	this	
3-21	558-565	remains	
3-22	566-570	very	
3-23	571-574	low	
3-24	575-586	considering	
3-25	587-590	the	
3-26	591-597	global	
3-27	598-601	CPU	
3-28	602-607	power	
3-29	608-610	of	
3-30	611-614	the	
3-31	615-621	system	
3-32	621-622	.	
3-33	623-625	So	
3-34	626-633	clearly	
3-35	633-634	,	
3-36	635-637	it	
3-37	638-643	doesn	
3-38	643-644	’	
3-39	644-645	t	
3-40	646-650	seem	
3-41	651-660	optimized	
3-42	660-661	.	
3-43	662-665	Any	
3-44	666-670	clue	
3-45	671-672	?	
3-46	673-679	Thanks	
3-47	680-683	tux	
3-48	684-693	September	
3-49	694-696	15	
3-50	696-697	,	
3-51	698-702	2020	
3-52	702-703	,	
3-53	704-705	4	
3-54	705-706	:	
3-55	706-710	56am	
3-56	711-716	Which	
3-57	717-724	version	
3-58	725-727	of	
3-59	728-738	PostgreSQL	
3-60	739-741	do	
3-61	742-745	you	
3-62	746-749	use	
3-63	749-750	?	
3-64	751-756	Lukas	
3-65	757-766	September	
3-66	767-769	15	
3-67	769-770	,	
3-68	771-775	2020	
3-69	775-776	,	
3-70	777-778	8	
3-71	778-779	:	
3-72	779-783	46am	
3-73	784-787	Are	
3-74	788-791	you	
3-75	792-796	sure	
3-76	797-801	that	
3-77	802-804	is	
3-78	805-806	a	
3-79	807-810	CPU	
3-80	811-813	or	
3-81	814-816	IO	
3-82	817-822	issue	
3-83	823-824	?	

#Text=What does “iotop” and the other process debug features say ? Are you running on bare metal NVMEs ? Big installations seems to struggle with limited I/O on virtual systems, and should run on very fast NVMEs. bricks September 15, 2020, 2:30pm
4-1	825-829	What	
4-2	830-834	does	
4-3	835-836	“	
4-4	836-841	iotop	
4-5	841-842	”	
4-6	843-846	and	
4-7	847-850	the	
4-8	851-856	other	
4-9	857-864	process	
4-10	865-870	debug	
4-11	871-879	features	
4-12	880-883	say	
4-13	884-885	?	
4-14	886-889	Are	
4-15	890-893	you	
4-16	894-901	running	
4-17	902-904	on	
4-18	905-909	bare	
4-19	910-915	metal	
4-20	916-921	NVMEs	
4-21	922-923	?	
4-22	924-927	Big	
4-23	928-941	installations	
4-24	942-947	seems	
4-25	948-950	to	
4-26	951-959	struggle	
4-27	960-964	with	
4-28	965-972	limited	
4-29	973-974	I	
4-30	974-975	/	
4-31	975-976	O	
4-32	977-979	on	
4-33	980-987	virtual	
4-34	988-995	systems	
4-35	995-996	,	
4-36	997-1000	and	
4-37	1001-1007	should	
4-38	1008-1011	run	
4-39	1012-1014	on	
4-40	1015-1019	very	
4-41	1020-1024	fast	
4-42	1025-1030	NVMEs	
4-43	1030-1031	.	
4-44	1032-1038	bricks	
4-45	1039-1048	September	
4-46	1049-1051	15	
4-47	1051-1052	,	
4-48	1053-1057	2020	
4-49	1057-1058	,	
4-50	1059-1060	2	
4-51	1060-1061	:	
4-52	1061-1065	30pm	

#Text=It seems that requesting the results is very very slow with Postgres 12 compared to Postgres 11. Postgres 11 is of course recommended because that’s the version in Debian Stable which is our reference system. tatooin September 16, 2020, 6:42am Hi Everyone and thanks for your interest in the subject. A couple of informations: System is bare metal with OS Linux Mint 19.3 64 bit (Ubuntu 18.04 LTS)
5-1	1066-1068	It	
5-2	1069-1074	seems	
5-3	1075-1079	that	
5-4	1080-1090	requesting	
5-5	1091-1094	the	
5-6	1095-1102	results	
5-7	1103-1105	is	
5-8	1106-1110	very	
5-9	1111-1115	very	
5-10	1116-1120	slow	
5-11	1121-1125	with	
5-12	1126-1134	Postgres	
5-13	1135-1137	12	
5-14	1138-1146	compared	
5-15	1147-1149	to	
5-16	1150-1158	Postgres	
5-17	1159-1161	11	
5-18	1161-1162	.	
5-19	1163-1171	Postgres	
5-20	1172-1174	11	
5-21	1175-1177	is	
5-22	1178-1180	of	
5-23	1181-1187	course	
5-24	1188-1199	recommended	
5-25	1200-1207	because	
5-26	1208-1212	that	
5-27	1212-1213	’	
5-28	1213-1214	s	
5-29	1215-1218	the	
5-30	1219-1226	version	
5-31	1227-1229	in	
5-32	1230-1236	Debian	
5-33	1237-1243	Stable	
5-34	1244-1249	which	
5-35	1250-1252	is	
5-36	1253-1256	our	
5-37	1257-1266	reference	
5-38	1267-1273	system	
5-39	1273-1274	.	
5-40	1275-1282	tatooin	
5-41	1283-1292	September	
5-42	1293-1295	16	
5-43	1295-1296	,	
5-44	1297-1301	2020	
5-45	1301-1302	,	
5-46	1303-1304	6	
5-47	1304-1305	:	
5-48	1305-1309	42am	
5-49	1310-1312	Hi	
5-50	1313-1321	Everyone	
5-51	1322-1325	and	
5-52	1326-1332	thanks	
5-53	1333-1336	for	
5-54	1337-1341	your	
5-55	1342-1350	interest	
5-56	1351-1353	in	
5-57	1354-1357	the	
5-58	1358-1365	subject	
5-59	1365-1366	.	
5-60	1367-1368	A	
5-61	1369-1375	couple	
5-62	1376-1378	of	
5-63	1379-1391	informations	
5-64	1391-1392	:	
5-65	1393-1399	System	
5-66	1400-1402	is	
5-67	1403-1407	bare	
5-68	1408-1413	metal	
5-69	1414-1418	with	
5-70	1419-1421	OS	
5-71	1422-1427	Linux	
5-72	1428-1432	Mint	
5-73	1433-1437	19.3	
5-74	1438-1440	64	
5-75	1441-1444	bit	
5-76	1445-1446	(	
5-77	1446-1452	Ubuntu	
5-78	1453-1458	18.04	
5-79	1459-1462	LTS	
5-80	1462-1463	)	

#Text=Installed version of PostgreSQL is 10. 94 Gb RAM and Intel® Xeon® CPU X5680 @ 3.33GHz 23 cores iostat gives the following: avg-cpu: %user %nice %system %iowait
6-1	1464-1473	Installed	
6-2	1474-1481	version	
6-3	1482-1484	of	
6-4	1485-1495	PostgreSQL	
6-5	1496-1498	is	
6-6	1499-1501	10	
6-7	1501-1502	.	
6-8	1503-1505	94	
6-9	1506-1508	Gb	
6-10	1509-1512	RAM	
6-11	1513-1516	and	
6-12	1517-1522	Intel	
6-13	1522-1523	®	
6-14	1524-1528	Xeon	
6-15	1528-1529	®	
6-16	1530-1533	CPU	
6-17	1534-1539	X5680	
6-18	1540-1541	@	
6-19	1542-1549	3.33GHz	
6-20	1550-1552	23	
6-21	1553-1558	cores	
6-22	1559-1565	iostat	
6-23	1566-1571	gives	
6-24	1572-1575	the	
6-25	1576-1585	following	
6-26	1585-1586	:	
6-27	1587-1594	avg-cpu	
6-28	1594-1595	:	
6-29	1596-1597	%	
6-30	1597-1601	user	
6-31	1602-1603	%	
6-32	1603-1607	nice	
6-33	1608-1609	%	
6-34	1609-1615	system	
6-35	1616-1617	%	
6-36	1617-1623	iowait	

#Text=%steal %idle 8,10 1,19 9,17 1,37 0,00 80,17 Device tps kB_read/s kB_wrtn/s kB_read
7-1	1624-1625	%	
7-2	1625-1630	steal	
7-3	1631-1632	%	
7-4	1632-1636	idle	
7-5	1637-1641	8,10	
7-6	1642-1646	1,19	
7-7	1647-1651	9,17	
7-8	1652-1656	1,37	
7-9	1657-1661	0,00	
7-10	1662-1667	80,17	
7-11	1668-1674	Device	
7-12	1675-1678	tps	
7-13	1679-1686	kB_read	
7-14	1686-1687	/	
7-15	1687-1688	s	
7-16	1689-1696	kB_wrtn	
7-17	1696-1697	/	
7-18	1697-1698	s	
7-19	1699-1706	kB_read	

#Text=kB_wrtn sda 99,82 11,23 968,80 40585011 3500199664 sdb 0,65 0,97 8,32 3505669 30047876
8-1	1707-1714	kB_wrtn	
8-2	1715-1718	sda	
8-3	1719-1724	99,82	
8-4	1725-1730	11,23	
8-5	1731-1737	968,80	
8-6	1738-1746	40585011	
8-7	1747-1757	3500199664	
8-8	1758-1761	sdb	
8-9	1762-1766	0,65	
8-10	1767-1771	0,97	
8-11	1772-1776	8,32	
8-12	1777-1784	3505669	
8-13	1785-1793	30047876	

#Text=sdc 0,00 0,00 0,00 5480 gvm@ov-master-eqi:~$ free -g total used free shared buff/cache available Mem:
9-1	1794-1797	sdc	
9-2	1798-1802	0,00	
9-3	1803-1807	0,00	
9-4	1808-1812	0,00	
9-5	1813-1817	5480	
9-6	1818-1821	gvm	
9-7	1821-1822	@	
9-8	1822-1835	ov-master-eqi	
9-9	1835-1836	:	
9-10	1836-1837	~	
9-11	1837-1838	$	
9-12	1839-1843	free	
9-13	1844-1845	-	
9-14	1845-1846	g	
9-15	1847-1852	total	
9-16	1853-1857	used	
9-17	1858-1862	free	
9-18	1863-1869	shared	
9-19	1870-1874	buff	
9-20	1874-1875	/	
9-21	1875-1880	cache	
9-22	1881-1890	available	
9-23	1891-1894	Mem	
9-24	1894-1895	:	

#Text=Swap: So as you can notice, CPU / Memory isn’t the bottleneck here. Thanks Lukas September 16, 2020, 7:58am bricks: Postgres 11 is of course recommended
10-1	1896-1900	Swap	
10-2	1900-1901	:	
10-3	1902-1904	So	
10-4	1905-1907	as	
10-5	1908-1911	you	
10-6	1912-1915	can	
10-7	1916-1922	notice	
10-8	1922-1923	,	
10-9	1924-1927	CPU	
10-10	1928-1929	/	
10-11	1930-1936	Memory	
10-12	1937-1940	isn	
10-13	1940-1941	’	
10-14	1941-1942	t	
10-15	1943-1946	the	
10-16	1947-1957	bottleneck	
10-17	1958-1962	here	
10-18	1962-1963	.	
10-19	1964-1970	Thanks	
10-20	1971-1976	Lukas	
10-21	1977-1986	September	
10-22	1987-1989	16	
10-23	1989-1990	,	
10-24	1991-1995	2020	
10-25	1995-1996	,	
10-26	1997-1998	7	
10-27	1998-1999	:	
10-28	1999-2003	58am	
10-29	2004-2010	bricks	
10-30	2010-2011	:	
10-31	2012-2020	Postgres	
10-32	2021-2023	11	
10-33	2024-2026	is	
10-34	2027-2029	of	
10-35	2030-2036	course	
10-36	2037-2048	recommended	

#Text=As you use PSQL 10 and not 11 i would upgrade, and then trying to fine tune your database and looking into your system issues. Still you did not answer any questions regarding your storage. I don´t see any native NVMEs that is what we use for accelerate in our enterprise appliances. They are 10 times faster then spinning rust if you have a huge database, that would kill your performance due to seek times.
11-1	2049-2051	As	
11-2	2052-2055	you	
11-3	2056-2059	use	
11-4	2060-2064	PSQL	
11-5	2065-2067	10	
11-6	2068-2071	and	
11-7	2072-2075	not	
11-8	2076-2078	11	
11-9	2079-2080	i	
11-10	2081-2086	would	
11-11	2087-2094	upgrade	
11-12	2094-2095	,	
11-13	2096-2099	and	
11-14	2100-2104	then	
11-15	2105-2111	trying	
11-16	2112-2114	to	
11-17	2115-2119	fine	
11-18	2120-2124	tune	
11-19	2125-2129	your	
11-20	2130-2138	database	
11-21	2139-2142	and	
11-22	2143-2150	looking	
11-23	2151-2155	into	
11-24	2156-2160	your	
11-25	2161-2167	system	
11-26	2168-2174	issues	
11-27	2174-2175	.	
11-28	2176-2181	Still	
11-29	2182-2185	you	
11-30	2186-2189	did	
11-31	2190-2193	not	
11-32	2194-2200	answer	
11-33	2201-2204	any	
11-34	2205-2214	questions	
11-35	2215-2224	regarding	
11-36	2225-2229	your	
11-37	2230-2237	storage	
11-38	2237-2238	.	
11-39	2239-2240	I	
11-40	2241-2244	don	
11-41	2244-2245	´	
11-42	2245-2246	t	
11-43	2247-2250	see	
11-44	2251-2254	any	
11-45	2255-2261	native	
11-46	2262-2267	NVMEs	
11-47	2268-2272	that	
11-48	2273-2275	is	
11-49	2276-2280	what	
11-50	2281-2283	we	
11-51	2284-2287	use	
11-52	2288-2291	for	
11-53	2292-2302	accelerate	
11-54	2303-2305	in	
11-55	2306-2309	our	
11-56	2310-2320	enterprise	
11-57	2321-2331	appliances	
11-58	2331-2332	.	
11-59	2333-2337	They	
11-60	2338-2341	are	
11-61	2342-2344	10	
11-62	2345-2350	times	
11-63	2351-2357	faster	
11-64	2358-2362	then	
11-65	2363-2371	spinning	
11-66	2372-2376	rust	
11-67	2377-2379	if	
11-68	2380-2383	you	
11-69	2384-2388	have	
11-70	2389-2390	a	
11-71	2391-2395	huge	
11-72	2396-2404	database	
11-73	2404-2405	,	
11-74	2406-2410	that	
11-75	2411-2416	would	
11-76	2417-2421	kill	
11-77	2422-2426	your	
11-78	2427-2438	performance	
11-79	2439-2442	due	
11-80	2443-2445	to	
11-81	2446-2450	seek	
11-82	2451-2456	times	
11-83	2456-2457	.	

#Text=As well your amount of swap is far to high, i would turn swap off with that amount of ram. So classic debugging and performance optimization would be my next steps. tatooin September 16, 2020, 8:37am OK, I take the point of PSQL 11. Didn’t know this was the recommended version.
12-1	2458-2460	As	
12-2	2461-2465	well	
12-3	2466-2470	your	
12-4	2471-2477	amount	
12-5	2478-2480	of	
12-6	2481-2485	swap	
12-7	2486-2488	is	
12-8	2489-2492	far	
12-9	2493-2495	to	
12-10	2496-2500	high	
12-11	2500-2501	,	
12-12	2502-2503	i	
12-13	2504-2509	would	
12-14	2510-2514	turn	
12-15	2515-2519	swap	
12-16	2520-2523	off	
12-17	2524-2528	with	
12-18	2529-2533	that	
12-19	2534-2540	amount	
12-20	2541-2543	of	
12-21	2544-2547	ram	
12-22	2547-2548	.	
12-23	2549-2551	So	
12-24	2552-2559	classic	
12-25	2560-2569	debugging	
12-26	2570-2573	and	
12-27	2574-2585	performance	
12-28	2586-2598	optimization	
12-29	2599-2604	would	
12-30	2605-2607	be	
12-31	2608-2610	my	
12-32	2611-2615	next	
12-33	2616-2621	steps	
12-34	2621-2622	.	
12-35	2623-2630	tatooin	
12-36	2631-2640	September	
12-37	2641-2643	16	
12-38	2643-2644	,	
12-39	2645-2649	2020	
12-40	2649-2650	,	
12-41	2651-2652	8	
12-42	2652-2653	:	
12-43	2653-2657	37am	
12-44	2658-2660	OK	
12-45	2660-2661	,	
12-46	2662-2663	I	
12-47	2664-2668	take	
12-48	2669-2672	the	
12-49	2673-2678	point	
12-50	2679-2681	of	
12-51	2682-2686	PSQL	
12-52	2687-2689	11	
12-53	2689-2690	.	
12-54	2691-2695	Didn	
12-55	2695-2696	’	
12-56	2696-2697	t	
12-57	2698-2702	know	
12-58	2703-2707	this	
12-59	2708-2711	was	
12-60	2712-2715	the	
12-61	2716-2727	recommended	
12-62	2728-2735	version	
12-63	2735-2736	.	

#Text=Regarding the storage, sorry I missed it. I’m not using NVMEs drives; currently only ATA. If you guys believe this would really improve things, then I’ll see how to invest in that. Last point is SWAP; perhaps I’m wrong but I always thought that: disabling SWAP is a bad idea System will always use memory first, then swap if no more memory is available.
13-1	2737-2746	Regarding	
13-2	2747-2750	the	
13-3	2751-2758	storage	
13-4	2758-2759	,	
13-5	2760-2765	sorry	
13-6	2766-2767	I	
13-7	2768-2774	missed	
13-8	2775-2777	it	
13-9	2777-2778	.	
13-10	2779-2780	I	
13-11	2780-2781	’	
13-12	2781-2782	m	
13-13	2783-2786	not	
13-14	2787-2792	using	
13-15	2793-2798	NVMEs	
13-16	2799-2805	drives	
13-17	2805-2806	;	
13-18	2807-2816	currently	
13-19	2817-2821	only	
13-20	2822-2825	ATA	
13-21	2825-2826	.	
13-22	2827-2829	If	
13-23	2830-2833	you	
13-24	2834-2838	guys	
13-25	2839-2846	believe	
13-26	2847-2851	this	
13-27	2852-2857	would	
13-28	2858-2864	really	
13-29	2865-2872	improve	
13-30	2873-2879	things	
13-31	2879-2880	,	
13-32	2881-2885	then	
13-33	2886-2887	I	
13-34	2887-2888	’	
13-35	2888-2890	ll	
13-36	2891-2894	see	
13-37	2895-2898	how	
13-38	2899-2901	to	
13-39	2902-2908	invest	
13-40	2909-2911	in	
13-41	2912-2916	that	
13-42	2916-2917	.	
13-43	2918-2922	Last	
13-44	2923-2928	point	
13-45	2929-2931	is	
13-46	2932-2936	SWAP	
13-47	2936-2937	;	
13-48	2938-2945	perhaps	
13-49	2946-2947	I	
13-50	2947-2948	’	
13-51	2948-2949	m	
13-52	2950-2955	wrong	
13-53	2956-2959	but	
13-54	2960-2961	I	
13-55	2962-2968	always	
13-56	2969-2976	thought	
13-57	2977-2981	that	
13-58	2981-2982	:	
13-59	2983-2992	disabling	
13-60	2993-2997	SWAP	
13-61	2998-3000	is	
13-62	3001-3002	a	
13-63	3003-3006	bad	
13-64	3007-3011	idea	
13-65	3012-3018	System	
13-66	3019-3023	will	
13-67	3024-3030	always	
13-68	3031-3034	use	
13-69	3035-3041	memory	
13-70	3042-3047	first	
13-71	3047-3048	,	
13-72	3049-3053	then	
13-73	3054-3058	swap	
13-74	3059-3061	if	
13-75	3062-3064	no	
13-76	3065-3069	more	
13-77	3070-3076	memory	
13-78	3077-3079	is	
13-79	3080-3089	available	
13-80	3089-3090	.	

#Text=Isn’t that correct ? tatooin September 23, 2020, 5:14pm Does GVM-11 actually works with PostgreSQL-11, or were you only talking about GVM 20.08 ? On a pre-prod system I have updated my PSQL from 10 to 11, but then I get the following errors when starting gvmd:
14-1	3091-3094	Isn	
14-2	3094-3095	’	
14-3	3095-3096	t	
14-4	3097-3101	that	
14-5	3102-3109	correct	
14-6	3110-3111	?	
14-7	3112-3119	tatooin	
14-8	3120-3129	September	
14-9	3130-3132	23	
14-10	3132-3133	,	
14-11	3134-3138	2020	
14-12	3138-3139	,	
14-13	3140-3141	5	
14-14	3141-3142	:	
14-15	3142-3146	14pm	
14-16	3147-3151	Does	
14-17	3152-3155	GVM	
14-18	3155-3156	-	
14-19	3156-3158	11	
14-20	3159-3167	actually	
14-21	3168-3173	works	
14-22	3174-3178	with	
14-23	3179-3189	PostgreSQL	
14-24	3189-3190	-	
14-25	3190-3192	11	
14-26	3192-3193	,	
14-27	3194-3196	or	
14-28	3197-3201	were	
14-29	3202-3205	you	
14-30	3206-3210	only	
14-31	3211-3218	talking	
14-32	3219-3224	about	
14-33	3225-3228	GVM	
14-34	3229-3234	20.08	
14-35	3235-3236	?	
14-36	3237-3239	On	
14-37	3240-3241	a	
14-38	3242-3250	pre-prod	
14-39	3251-3257	system	
14-40	3258-3259	I	
14-41	3260-3264	have	
14-42	3265-3272	updated	
14-43	3273-3275	my	
14-44	3276-3280	PSQL	
14-45	3281-3285	from	
14-46	3286-3288	10	
14-47	3289-3291	to	
14-48	3292-3294	11	
14-49	3294-3295	,	
14-50	3296-3299	but	
14-51	3300-3304	then	
14-52	3305-3306	I	
14-53	3307-3310	get	
14-54	3311-3314	the	
14-55	3315-3324	following	
14-56	3325-3331	errors	
14-57	3332-3336	when	
14-58	3337-3345	starting	
14-59	3346-3350	gvmd	
14-60	3350-3351	:	

#Text=main:MESSAGE:2020-09-23 17h09.44 utc:9172: Greenbone Vulnerability Manager version 9.0.0 (DB revision 221) md manage:MESSAGE:2020-09-23 17h09.44 utc:9173: check_db_versions: database version of SCAP database: 16
15-1	3352-3356	main	
15-2	3356-3357	:	
15-3	3357-3364	MESSAGE	
15-4	3364-3365	:	
15-5	3365-3369	2020	
15-6	3369-3370	-	
15-7	3370-3372	09	
15-8	3372-3373	-	
15-9	3373-3375	23	
15-10	3376-3384	17h09.44	
15-11	3385-3388	utc	
15-12	3388-3389	:	
15-13	3389-3393	9172	
15-14	3393-3394	:	
15-15	3395-3404	Greenbone	
15-16	3405-3418	Vulnerability	
15-17	3419-3426	Manager	
15-18	3427-3434	version	
15-19	3435-3440	9.0.0	
15-20	3441-3442	(	
15-21	3442-3444	DB	
15-22	3445-3453	revision	
15-23	3454-3457	221	
15-24	3457-3458	)	
15-25	3459-3461	md	
15-26	3462-3468	manage	
15-27	3468-3469	:	
15-28	3469-3476	MESSAGE	
15-29	3476-3477	:	
15-30	3477-3481	2020	
15-31	3481-3482	-	
15-32	3482-3484	09	
15-33	3484-3485	-	
15-34	3485-3487	23	
15-35	3488-3496	17h09.44	
15-36	3497-3500	utc	
15-37	3500-3501	:	
15-38	3501-3505	9173	
15-39	3505-3506	:	
15-40	3507-3524	check_db_versions	
15-41	3524-3525	:	
15-42	3526-3534	database	
15-43	3535-3542	version	
15-44	3543-3545	of	
15-45	3546-3550	SCAP	
15-46	3551-3559	database	
15-47	3559-3560	:	
15-48	3561-3563	16	

#Text=md manage:MESSAGE:2020-09-23 17h09.44 utc:9173: check_db_versions: SCAP database version supported by manager: 15 main:CRITICAL:2020-09-23 17h09.44 utc:9173: gvmd: database is wrong version I don’t really understand this error, as I don’t see how my SCAP database version could be newer than the one supported by the manager, since I havn’t actually changed the SCAP data during the PSQL upgrade.
16-1	3564-3566	md	
16-2	3567-3573	manage	
16-3	3573-3574	:	
16-4	3574-3581	MESSAGE	
16-5	3581-3582	:	
16-6	3582-3586	2020	
16-7	3586-3587	-	
16-8	3587-3589	09	
16-9	3589-3590	-	
16-10	3590-3592	23	
16-11	3593-3601	17h09.44	
16-12	3602-3605	utc	
16-13	3605-3606	:	
16-14	3606-3610	9173	
16-15	3610-3611	:	
16-16	3612-3629	check_db_versions	
16-17	3629-3630	:	
16-18	3631-3635	SCAP	
16-19	3636-3644	database	
16-20	3645-3652	version	
16-21	3653-3662	supported	
16-22	3663-3665	by	
16-23	3666-3673	manager	
16-24	3673-3674	:	
16-25	3675-3677	15	
16-26	3678-3682	main	
16-27	3682-3683	:	
16-28	3683-3691	CRITICAL	
16-29	3691-3692	:	
16-30	3692-3696	2020	
16-31	3696-3697	-	
16-32	3697-3699	09	
16-33	3699-3700	-	
16-34	3700-3702	23	
16-35	3703-3711	17h09.44	
16-36	3712-3715	utc	
16-37	3715-3716	:	
16-38	3716-3720	9173	
16-39	3720-3721	:	
16-40	3722-3726	gvmd	
16-41	3726-3727	:	
16-42	3728-3736	database	
16-43	3737-3739	is	
16-44	3740-3745	wrong	
16-45	3746-3753	version	
16-46	3754-3755	I	
16-47	3756-3759	don	
16-48	3759-3760	’	
16-49	3760-3761	t	
16-50	3762-3768	really	
16-51	3769-3779	understand	
16-52	3780-3784	this	
16-53	3785-3790	error	
16-54	3790-3791	,	
16-55	3792-3794	as	
16-56	3795-3796	I	
16-57	3797-3800	don	
16-58	3800-3801	’	
16-59	3801-3802	t	
16-60	3803-3806	see	
16-61	3807-3810	how	
16-62	3811-3813	my	
16-63	3814-3818	SCAP	
16-64	3819-3827	database	
16-65	3828-3835	version	
16-66	3836-3841	could	
16-67	3842-3844	be	
16-68	3845-3850	newer	
16-69	3851-3855	than	
16-70	3856-3859	the	
16-71	3860-3863	one	
16-72	3864-3873	supported	
16-73	3874-3876	by	
16-74	3877-3880	the	
16-75	3881-3888	manager	
16-76	3888-3889	,	
16-77	3890-3895	since	
16-78	3896-3897	I	
16-79	3898-3902	havn	
16-80	3902-3903	’	
16-81	3903-3904	t	
16-82	3905-3913	actually	
16-83	3914-3921	changed	
16-84	3922-3925	the	
16-85	3926-3930	SCAP	
16-86	3931-3935	data	
16-87	3936-3942	during	
16-88	3943-3946	the	
16-89	3947-3951	PSQL	
16-90	3952-3959	upgrade	
16-91	3959-3960	.	

#Text=bricks September 24, 2020, 8:42am For gvmd-20.08 and gvmd-21.04/master PostgreSQL 11 is our reference. The PostgreSQL 12 issue might get fixed but we can’t promise anything at the moment.
17-1	3961-3967	bricks	
17-2	3968-3977	September	
17-3	3978-3980	24	
17-4	3980-3981	,	
17-5	3982-3986	2020	
17-6	3986-3987	,	
17-7	3988-3989	8	
17-8	3989-3990	:	
17-9	3990-3994	42am	
17-10	3995-3998	For	
17-11	3999-4003	gvmd	
17-12	4003-4004	-	
17-13	4004-4009	20.08	
17-14	4010-4013	and	
17-15	4014-4018	gvmd	
17-16	4018-4019	-	
17-17	4019-4024	21.04	
17-18	4024-4025	/	
17-19	4025-4031	master	
17-20	4032-4042	PostgreSQL	
17-21	4043-4045	11	
17-22	4046-4048	is	
17-23	4049-4052	our	
17-24	4053-4062	reference	
17-25	4062-4063	.	
17-26	4064-4067	The	
17-27	4068-4078	PostgreSQL	
17-28	4079-4081	12	
17-29	4082-4087	issue	
17-30	4088-4093	might	
17-31	4094-4097	get	
17-32	4098-4103	fixed	
17-33	4104-4107	but	
17-34	4108-4110	we	
17-35	4111-4114	can	
17-36	4114-4115	’	
17-37	4115-4116	t	
17-38	4117-4124	promise	
17-39	4125-4133	anything	
17-40	4134-4136	at	
17-41	4137-4140	the	
17-42	4141-4147	moment	
17-43	4147-4148	.	

#Text=For other versions below gvmd-20.08 Debian Stretch is the base system and therefore PostgreSQL 9.6 is recommended. For your current issue with the SCAP db, please try to use gvmd-9.0.1 the latest bugfix release instead of 9.0.0. I can remember either a ticket a GitHub or a topic in this forum where this issue was mentioned to and updating to the bugfix release fixed it.
18-1	4149-4152	For	
18-2	4153-4158	other	
18-3	4159-4167	versions	
18-4	4168-4173	below	
18-5	4174-4178	gvmd	
18-6	4178-4179	-	
18-7	4179-4184	20.08	
18-8	4185-4191	Debian	
18-9	4192-4199	Stretch	
18-10	4200-4202	is	
18-11	4203-4206	the	
18-12	4207-4211	base	
18-13	4212-4218	system	
18-14	4219-4222	and	
18-15	4223-4232	therefore	
18-16	4233-4243	PostgreSQL	
18-17	4244-4247	9.6	
18-18	4248-4250	is	
18-19	4251-4262	recommended	
18-20	4262-4263	.	
18-21	4264-4267	For	
18-22	4268-4272	your	
18-23	4273-4280	current	
18-24	4281-4286	issue	
18-25	4287-4291	with	
18-26	4292-4295	the	
18-27	4296-4300	SCAP	
18-28	4301-4303	db	
18-29	4303-4304	,	
18-30	4305-4311	please	
18-31	4312-4315	try	
18-32	4316-4318	to	
18-33	4319-4322	use	
18-34	4323-4327	gvmd	
18-35	4327-4328	-	
18-36	4328-4333	9.0.1	
18-37	4334-4337	the	
18-38	4338-4344	latest	
18-39	4345-4351	bugfix	
18-40	4352-4359	release	
18-41	4360-4367	instead	
18-42	4368-4370	of	
18-43	4371-4376	9.0.0	
18-44	4376-4377	.	
18-45	4378-4379	I	
18-46	4380-4383	can	
18-47	4384-4392	remember	
18-48	4393-4399	either	
18-49	4400-4401	a	
18-50	4402-4408	ticket	
18-51	4409-4410	a	
18-52	4411-4417	GitHub	
18-53	4418-4420	or	
18-54	4421-4422	a	
18-55	4423-4428	topic	
18-56	4429-4431	in	
18-57	4432-4436	this	
18-58	4437-4442	forum	
18-59	4443-4448	where	
18-60	4449-4453	this	
18-61	4454-4459	issue	
18-62	4460-4463	was	
18-63	4464-4473	mentioned	
18-64	4474-4476	to	
18-65	4477-4480	and	
18-66	4481-4489	updating	
18-67	4490-4492	to	
18-68	4493-4496	the	
18-69	4497-4503	bugfix	
18-70	4504-4511	release	
18-71	4512-4517	fixed	
18-72	4518-4520	it	
18-73	4520-4521	.	

#Text=1 Like tatooin September 24, 2020, 8:45am #10 Thanks bricks. That actually answer my question. So there is no point to try mixing gvmd-11 with PSQL-11 if the reference is 9.6.
19-1	4522-4523	1	
19-2	4524-4528	Like	
19-3	4529-4536	tatooin	
19-4	4537-4546	September	
19-5	4547-4549	24	
19-6	4549-4550	,	
19-7	4551-4555	2020	
19-8	4555-4556	,	
19-9	4557-4558	8	
19-10	4558-4559	:	
19-11	4559-4563	45am	
19-12	4564-4567	#10	
19-13	4568-4574	Thanks	
19-14	4575-4581	bricks	
19-15	4581-4582	.	
19-16	4583-4587	That	
19-17	4588-4596	actually	
19-18	4597-4603	answer	
19-19	4604-4606	my	
19-20	4607-4615	question	
19-21	4615-4616	.	
19-22	4617-4619	So	
19-23	4620-4625	there	
19-24	4626-4628	is	
19-25	4629-4631	no	
19-26	4632-4637	point	
19-27	4638-4640	to	
19-28	4641-4644	try	
19-29	4645-4651	mixing	
19-30	4652-4656	gvmd	
19-31	4656-4657	-	
19-32	4657-4659	11	
19-33	4660-4664	with	
19-34	4665-4669	PSQL	
19-35	4669-4670	-	
19-36	4670-4672	11	
19-37	4673-4675	if	
19-38	4676-4679	the	
19-39	4680-4689	reference	
19-40	4690-4692	is	
19-41	4693-4696	9.6	
19-42	4696-4697	.	

#Text=I’ll focus my effort on upgrading to 20.08 AND PSQL-11 at once. Hopefully, this should solve the huge performance issues I’m facing at the moment. Thanks a lot bricks September 24, 2020, 8:57am #11
20-1	4698-4699	I	
20-2	4699-4700	’	
20-3	4700-4702	ll	
20-4	4703-4708	focus	
20-5	4709-4711	my	
20-6	4712-4718	effort	
20-7	4719-4721	on	
20-8	4722-4731	upgrading	
20-9	4732-4734	to	
20-10	4735-4740	20.08	
20-11	4741-4744	AND	
20-12	4745-4749	PSQL	
20-13	4749-4750	-	
20-14	4750-4752	11	
20-15	4753-4755	at	
20-16	4756-4760	once	
20-17	4760-4761	.	
20-18	4762-4771	Hopefully	
20-19	4771-4772	,	
20-20	4773-4777	this	
20-21	4778-4784	should	
20-22	4785-4790	solve	
20-23	4791-4794	the	
20-24	4795-4799	huge	
20-25	4800-4811	performance	
20-26	4812-4818	issues	
20-27	4819-4820	I	
20-28	4820-4821	’	
20-29	4821-4822	m	
20-30	4823-4829	facing	
20-31	4830-4832	at	
20-32	4833-4836	the	
20-33	4837-4843	moment	
20-34	4843-4844	.	
20-35	4845-4851	Thanks	
20-36	4852-4853	a	
20-37	4854-4857	lot	
20-38	4858-4864	bricks	
20-39	4865-4874	September	
20-40	4875-4877	24	
20-41	4877-4878	,	
20-42	4879-4883	2020	
20-43	4883-4884	,	
20-44	4885-4886	8	
20-45	4886-4887	:	
20-46	4887-4891	57am	
20-47	4892-4895	#11	

#Text=Using GVM-11/gvmd-9 with PostgreSQL 11 should work. I’ve used that for a longer period on my personal development computer. But it isn’t tested and there is no guarantee because our corresponding products (GOS 5 and 6) are based on Debian Stretch and therefore PostgreSQL 9.6. We are developing and testing for our products of course. If the community is facing issues with other systems varying from our reference system we sometimes can’t give any promises for fixes. 1 Like tatooin September 25, 2020, 7:52am #12
21-1	4896-4901	Using	
21-2	4902-4905	GVM	
21-3	4905-4906	-	
21-4	4906-4908	11	
21-5	4908-4909	/	
21-6	4909-4913	gvmd	
21-7	4913-4914	-	
21-8	4914-4915	9	
21-9	4916-4920	with	
21-10	4921-4931	PostgreSQL	
21-11	4932-4934	11	
21-12	4935-4941	should	
21-13	4942-4946	work	
21-14	4946-4947	.	
21-15	4948-4949	I	
21-16	4949-4950	’	
21-17	4950-4952	ve	
21-18	4953-4957	used	
21-19	4958-4962	that	
21-20	4963-4966	for	
21-21	4967-4968	a	
21-22	4969-4975	longer	
21-23	4976-4982	period	
21-24	4983-4985	on	
21-25	4986-4988	my	
21-26	4989-4997	personal	
21-27	4998-5009	development	
21-28	5010-5018	computer	
21-29	5018-5019	.	
21-30	5020-5023	But	
21-31	5024-5026	it	
21-32	5027-5030	isn	
21-33	5030-5031	’	
21-34	5031-5032	t	
21-35	5033-5039	tested	
21-36	5040-5043	and	
21-37	5044-5049	there	
21-38	5050-5052	is	
21-39	5053-5055	no	
21-40	5056-5065	guarantee	
21-41	5066-5073	because	
21-42	5074-5077	our	
21-43	5078-5091	corresponding	
21-44	5092-5100	products	
21-45	5101-5102	(	
21-46	5102-5105	GOS	
21-47	5106-5107	5	
21-48	5108-5111	and	
21-49	5112-5113	6	
21-50	5113-5114	)	
21-51	5115-5118	are	
21-52	5119-5124	based	
21-53	5125-5127	on	
21-54	5128-5134	Debian	
21-55	5135-5142	Stretch	
21-56	5143-5146	and	
21-57	5147-5156	therefore	
21-58	5157-5167	PostgreSQL	
21-59	5168-5171	9.6	
21-60	5171-5172	.	
21-61	5173-5175	We	
21-62	5176-5179	are	
21-63	5180-5190	developing	
21-64	5191-5194	and	
21-65	5195-5202	testing	
21-66	5203-5206	for	
21-67	5207-5210	our	
21-68	5211-5219	products	
21-69	5220-5222	of	
21-70	5223-5229	course	
21-71	5229-5230	.	
21-72	5231-5233	If	
21-73	5234-5237	the	
21-74	5238-5247	community	
21-75	5248-5250	is	
21-76	5251-5257	facing	
21-77	5258-5264	issues	
21-78	5265-5269	with	
21-79	5270-5275	other	
21-80	5276-5283	systems	
21-81	5284-5291	varying	
21-82	5292-5296	from	
21-83	5297-5300	our	
21-84	5301-5310	reference	
21-85	5311-5317	system	
21-86	5318-5320	we	
21-87	5321-5330	sometimes	
21-88	5331-5334	can	
21-89	5334-5335	’	
21-90	5335-5336	t	
21-91	5337-5341	give	
21-92	5342-5345	any	
21-93	5346-5354	promises	
21-94	5355-5358	for	
21-95	5359-5364	fixes	
21-96	5364-5365	.	
21-97	5366-5367	1	
21-98	5368-5372	Like	
21-99	5373-5380	tatooin	
21-100	5381-5390	September	
21-101	5391-5393	25	
21-102	5393-5394	,	
21-103	5395-5399	2020	
21-104	5399-5400	,	
21-105	5401-5402	7	
21-106	5402-5403	:	
21-107	5403-5407	52am	
21-108	5408-5411	#12	

#Text=Using GVM-11/gvmd-9 with PostgreSQL 11 does work, actually. It just that in our production environment, it is pain slow. Perhaps it has nothing to do with the version of PSQL. It’s possible gvmd is just not designed to handle such big database (57GB), that’s why I want to explore all options at this point. Thanks Lukas September 25, 2020, 9:28pm #13 I have seen DBs with more then 10 /8 networks and 16 millions of results. But they are never at this size, do you store all “log” and “scan-meta” data there ?
22-1	5412-5417	Using	
22-2	5418-5421	GVM	
22-3	5421-5422	-	
22-4	5422-5424	11	
22-5	5424-5425	/	
22-6	5425-5429	gvmd	
22-7	5429-5430	-	
22-8	5430-5431	9	
22-9	5432-5436	with	
22-10	5437-5447	PostgreSQL	
22-11	5448-5450	11	
22-12	5451-5455	does	
22-13	5456-5460	work	
22-14	5460-5461	,	
22-15	5462-5470	actually	
22-16	5470-5471	.	
22-17	5472-5474	It	
22-18	5475-5479	just	
22-19	5480-5484	that	
22-20	5485-5487	in	
22-21	5488-5491	our	
22-22	5492-5502	production	
22-23	5503-5514	environment	
22-24	5514-5515	,	
22-25	5516-5518	it	
22-26	5519-5521	is	
22-27	5522-5526	pain	
22-28	5527-5531	slow	
22-29	5531-5532	.	
22-30	5533-5540	Perhaps	
22-31	5541-5543	it	
22-32	5544-5547	has	
22-33	5548-5555	nothing	
22-34	5556-5558	to	
22-35	5559-5561	do	
22-36	5562-5566	with	
22-37	5567-5570	the	
22-38	5571-5578	version	
22-39	5579-5581	of	
22-40	5582-5586	PSQL	
22-41	5586-5587	.	
22-42	5588-5590	It	
22-43	5590-5591	’	
22-44	5591-5592	s	
22-45	5593-5601	possible	
22-46	5602-5606	gvmd	
22-47	5607-5609	is	
22-48	5610-5614	just	
22-49	5615-5618	not	
22-50	5619-5627	designed	
22-51	5628-5630	to	
22-52	5631-5637	handle	
22-53	5638-5642	such	
22-54	5643-5646	big	
22-55	5647-5655	database	
22-56	5656-5657	(	
22-57	5657-5661	57GB	
22-58	5661-5662	)	
22-59	5662-5663	,	
22-60	5664-5668	that	
22-61	5668-5669	’	
22-62	5669-5670	s	
22-63	5671-5674	why	
22-64	5675-5676	I	
22-65	5677-5681	want	
22-66	5682-5684	to	
22-67	5685-5692	explore	
22-68	5693-5696	all	
22-69	5697-5704	options	
22-70	5705-5707	at	
22-71	5708-5712	this	
22-72	5713-5718	point	
22-73	5718-5719	.	
22-74	5720-5726	Thanks	
22-75	5727-5732	Lukas	
22-76	5733-5742	September	
22-77	5743-5745	25	
22-78	5745-5746	,	
22-79	5747-5751	2020	
22-80	5751-5752	,	
22-81	5753-5754	9	
22-82	5754-5755	:	
22-83	5755-5759	28pm	
22-84	5760-5763	#13	
22-85	5764-5765	I	
22-86	5766-5770	have	
22-87	5771-5775	seen	
22-88	5776-5779	DBs	
22-89	5780-5784	with	
22-90	5785-5789	more	
22-91	5790-5794	then	
22-92	5795-5797	10	
22-93	5798-5799	/	
22-94	5799-5800	8	
22-95	5801-5809	networks	
22-96	5810-5813	and	
22-97	5814-5816	16	
22-98	5817-5825	millions	
22-99	5826-5828	of	
22-100	5829-5836	results	
22-101	5836-5837	.	
22-102	5838-5841	But	
22-103	5842-5846	they	
22-104	5847-5850	are	
22-105	5851-5856	never	
22-106	5857-5859	at	
22-107	5860-5864	this	
22-108	5865-5869	size	
22-109	5869-5870	,	
22-110	5871-5873	do	
22-111	5874-5877	you	
22-112	5878-5883	store	
22-113	5884-5887	all	
22-114	5888-5889	“	
22-115	5889-5892	log	
22-116	5892-5893	”	
22-117	5894-5897	and	
22-118	5898-5899	“	
22-119	5899-5908	scan-meta	
22-120	5908-5909	”	
22-121	5910-5914	data	
22-122	5915-5920	there	
22-123	5921-5922	?	

#Text=How often do you do DB maintenance ? It looks like a non optimal scan configuration and/or missing db-maintenance. Plus our enterprise appliances designed for that type of DBs have a block-acceleration based on special hardware so speed up the DB in hardware. tatooin September 26, 2020,
23-1	5923-5926	How	
23-2	5927-5932	often	
23-3	5933-5935	do	
23-4	5936-5939	you	
23-5	5940-5942	do	
23-6	5943-5945	DB	
23-7	5946-5957	maintenance	
23-8	5958-5959	?	
23-9	5960-5962	It	
23-10	5963-5968	looks	
23-11	5969-5973	like	
23-12	5974-5975	a	
23-13	5976-5979	non	
23-14	5980-5987	optimal	
23-15	5988-5992	scan	
23-16	5993-6006	configuration	
23-17	6007-6010	and	
23-18	6010-6011	/	
23-19	6011-6013	or	
23-20	6014-6021	missing	
23-21	6022-6036	db-maintenance	
23-22	6036-6037	.	
23-23	6038-6042	Plus	
23-24	6043-6046	our	
23-25	6047-6057	enterprise	
23-26	6058-6068	appliances	
23-27	6069-6077	designed	
23-28	6078-6081	for	
23-29	6082-6086	that	
23-30	6087-6091	type	
23-31	6092-6094	of	
23-32	6095-6098	DBs	
23-33	6099-6103	have	
23-34	6104-6105	a	
23-35	6106-6124	block-acceleration	
23-36	6125-6130	based	
23-37	6131-6133	on	
23-38	6134-6141	special	
23-39	6142-6150	hardware	
23-40	6151-6153	so	
23-41	6154-6159	speed	
23-42	6160-6162	up	
23-43	6163-6166	the	
23-44	6167-6169	DB	
23-45	6170-6172	in	
23-46	6173-6181	hardware	
23-47	6181-6182	.	
23-48	6183-6190	tatooin	
23-49	6191-6200	September	
23-50	6201-6203	26	
23-51	6203-6204	,	
23-52	6205-6209	2020	
23-53	6209-6210	,	

#Text=8:01am #14 I have not tweaked any openvas configuration; as the default values looks good enough: non_simult_ports = 139, 445, 3389, Services/irc vendor_version = safe_checks = yes
24-1	6211-6212	8	
24-2	6212-6213	:	
24-3	6213-6217	01am	
24-4	6218-6221	#14	
24-5	6222-6223	I	
24-6	6224-6228	have	
24-7	6229-6232	not	
24-8	6233-6240	tweaked	
24-9	6241-6244	any	
24-10	6245-6252	openvas	
24-11	6253-6266	configuration	
24-12	6266-6267	;	
24-13	6268-6270	as	
24-14	6271-6274	the	
24-15	6275-6282	default	
24-16	6283-6289	values	
24-17	6290-6295	looks	
24-18	6296-6300	good	
24-19	6301-6307	enough	
24-20	6307-6308	:	
24-21	6309-6325	non_simult_ports	
24-22	6326-6327	=	
24-23	6328-6331	139	
24-24	6331-6332	,	
24-25	6333-6336	445	
24-26	6336-6337	,	
24-27	6338-6342	3389	
24-28	6342-6343	,	
24-29	6344-6352	Services	
24-30	6352-6353	/	
24-31	6353-6356	irc	
24-32	6357-6371	vendor_version	
24-33	6372-6373	=	
24-34	6374-6385	safe_checks	
24-35	6386-6387	=	
24-36	6388-6391	yes	

#Text=nasl_no_signature_check = yes time_between_request = 0 expand_vhosts = yes max_checks = 10 optimize_test = yes report_host_details = yes config_file = /opt/gvm/etc/openvas/openvas.conf
25-1	6392-6415	nasl_no_signature_check	
25-2	6416-6417	=	
25-3	6418-6421	yes	
25-4	6422-6442	time_between_request	
25-5	6443-6444	=	
25-6	6445-6446	0	
25-7	6447-6460	expand_vhosts	
25-8	6461-6462	=	
25-9	6463-6466	yes	
25-10	6467-6477	max_checks	
25-11	6478-6479	=	
25-12	6480-6482	10	
25-13	6483-6496	optimize_test	
25-14	6497-6498	=	
25-15	6499-6502	yes	
25-16	6503-6522	report_host_details	
25-17	6523-6524	=	
25-18	6525-6528	yes	
25-19	6529-6540	config_file	
25-20	6541-6542	=	
25-21	6543-6544	/	
25-22	6544-6547	opt	
25-23	6547-6548	/	
25-24	6548-6551	gvm	
25-25	6551-6552	/	
25-26	6552-6555	etc	
25-27	6555-6556	/	
25-28	6556-6563	openvas	
25-29	6563-6564	/	
25-30	6564-6576	openvas.conf	

#Text=unscanned_closed_udp = yes include_folders = /opt/gvm/var/lib/openvas/plugins test_empty_vhost = no plugins_timeout = 320 cgi_path = /cgi-bin:/scripts
26-1	6577-6597	unscanned_closed_udp	
26-2	6598-6599	=	
26-3	6600-6603	yes	
26-4	6604-6619	include_folders	
26-5	6620-6621	=	
26-6	6622-6623	/	
26-7	6623-6626	opt	
26-8	6626-6627	/	
26-9	6627-6630	gvm	
26-10	6630-6631	/	
26-11	6631-6634	var	
26-12	6634-6635	/	
26-13	6635-6638	lib	
26-14	6638-6639	/	
26-15	6639-6646	openvas	
26-16	6646-6647	/	
26-17	6647-6654	plugins	
26-18	6655-6671	test_empty_vhost	
26-19	6672-6673	=	
26-20	6674-6676	no	
26-21	6677-6692	plugins_timeout	
26-22	6693-6694	=	
26-23	6695-6698	320	
26-24	6699-6707	cgi_path	
26-25	6708-6709	=	
26-26	6710-6711	/	
26-27	6711-6718	cgi-bin	
26-28	6718-6719	:	
26-29	6719-6720	/	
26-30	6720-6727	scripts	

#Text=checks_read_timeout = 5 unscanned_closed = yes auto_enable_dependencies = yes log_whole_attack = no db_address = /var/run/redis/redis.sock drop_privileges = no log_plugins_name_at_load = no
27-1	6728-6747	checks_read_timeout	
27-2	6748-6749	=	
27-3	6750-6751	5	
27-4	6752-6768	unscanned_closed	
27-5	6769-6770	=	
27-6	6771-6774	yes	
27-7	6775-6799	auto_enable_dependencies	
27-8	6800-6801	=	
27-9	6802-6805	yes	
27-10	6806-6822	log_whole_attack	
27-11	6823-6824	=	
27-12	6825-6827	no	
27-13	6828-6838	db_address	
27-14	6839-6840	=	
27-15	6841-6842	/	
27-16	6842-6845	var	
27-17	6845-6846	/	
27-18	6846-6849	run	
27-19	6849-6850	/	
27-20	6850-6855	redis	
27-21	6855-6856	/	
27-22	6856-6866	redis.sock	
27-23	6867-6882	drop_privileges	
27-24	6883-6884	=	
27-25	6885-6887	no	
27-26	6888-6912	log_plugins_name_at_load	
27-27	6913-6914	=	
27-28	6915-6917	no	

#Text=scanner_plugins_timeout = 36000 timeout_retry = 3 max_hosts = 30 network_scan = no open_sock_max_attempts = 5 plugins_folder = /opt/gvm/var/lib/openvas/plugins
28-1	6918-6941	scanner_plugins_timeout	
28-2	6942-6943	=	
28-3	6944-6949	36000	
28-4	6950-6963	timeout_retry	
28-5	6964-6965	=	
28-6	6966-6967	3	
28-7	6968-6977	max_hosts	
28-8	6978-6979	=	
28-9	6980-6982	30	
28-10	6983-6995	network_scan	
28-11	6996-6997	=	
28-12	6998-7000	no	
28-13	7001-7023	open_sock_max_attempts	
28-14	7024-7025	=	
28-15	7026-7027	5	
28-16	7028-7042	plugins_folder	
28-17	7043-7044	=	
28-18	7045-7046	/	
28-19	7046-7049	opt	
28-20	7049-7050	/	
28-21	7050-7053	gvm	
28-22	7053-7054	/	
28-23	7054-7057	var	
28-24	7057-7058	/	
28-25	7058-7061	lib	
28-26	7061-7062	/	
28-27	7062-7069	openvas	
28-28	7069-7070	/	
28-29	7070-7077	plugins	

#Text=Regarding the DB maintenance; I’m doing the following weekly: Freeing some unused storage space in the database /opt/gvm/sbin/gvmd --optimize=vacuum Optimize DB queries /opt/gvm/sbin/gvmd --optimize=analyze
29-1	7078-7087	Regarding	
29-2	7088-7091	the	
29-3	7092-7094	DB	
29-4	7095-7106	maintenance	
29-5	7106-7107	;	
29-6	7108-7109	I	
29-7	7109-7110	’	
29-8	7110-7111	m	
29-9	7112-7117	doing	
29-10	7118-7121	the	
29-11	7122-7131	following	
29-12	7132-7138	weekly	
29-13	7138-7139	:	
29-14	7140-7147	Freeing	
29-15	7148-7152	some	
29-16	7153-7159	unused	
29-17	7160-7167	storage	
29-18	7168-7173	space	
29-19	7174-7176	in	
29-20	7177-7180	the	
29-21	7181-7189	database	
29-22	7190-7191	/	
29-23	7191-7194	opt	
29-24	7194-7195	/	
29-25	7195-7198	gvm	
29-26	7198-7199	/	
29-27	7199-7203	sbin	
29-28	7203-7204	/	
29-29	7204-7208	gvmd	
29-30	7209-7210	-	
29-31	7210-7211	-	
29-32	7211-7219	optimize	
29-33	7219-7220	=	
29-34	7220-7226	vacuum	
29-35	7227-7235	Optimize	
29-36	7236-7238	DB	
29-37	7239-7246	queries	
29-38	7247-7248	/	
29-39	7248-7251	opt	
29-40	7251-7252	/	
29-41	7252-7255	gvm	
29-42	7255-7256	/	
29-43	7256-7260	sbin	
29-44	7260-7261	/	
29-45	7261-7265	gvmd	
29-46	7266-7267	-	
29-47	7267-7268	-	
29-48	7268-7276	optimize	
29-49	7276-7277	=	
29-50	7277-7284	analyze	

#Text=Cleans up references to report formats that have been removed without using the DELETE_REPORT_FORMAT GMP command, for example after a built-in report format has been removed. /opt/gvm/sbin/gvmd --optimize=cleanup-report-formats This cleans up results with missing result_nvt entries which can result in filters and overrides not working properly.
30-1	7285-7291	Cleans	
30-2	7292-7294	up	
30-3	7295-7305	references	
30-4	7306-7308	to	
30-5	7309-7315	report	
30-6	7316-7323	formats	
30-7	7324-7328	that	
30-8	7329-7333	have	
30-9	7334-7338	been	
30-10	7339-7346	removed	
30-11	7347-7354	without	
30-12	7355-7360	using	
30-13	7361-7364	the	
30-14	7365-7385	DELETE_REPORT_FORMAT	
30-15	7386-7389	GMP	
30-16	7390-7397	command	
30-17	7397-7398	,	
30-18	7399-7402	for	
30-19	7403-7410	example	
30-20	7411-7416	after	
30-21	7417-7418	a	
30-22	7419-7427	built-in	
30-23	7428-7434	report	
30-24	7435-7441	format	
30-25	7442-7445	has	
30-26	7446-7450	been	
30-27	7451-7458	removed	
30-28	7458-7459	.	
30-29	7460-7461	/	
30-30	7461-7464	opt	
30-31	7464-7465	/	
30-32	7465-7468	gvm	
30-33	7468-7469	/	
30-34	7469-7473	sbin	
30-35	7473-7474	/	
30-36	7474-7478	gvmd	
30-37	7479-7480	-	
30-38	7480-7481	-	
30-39	7481-7489	optimize	
30-40	7489-7490	=	
30-41	7490-7512	cleanup-report-formats	
30-42	7513-7517	This	
30-43	7518-7524	cleans	
30-44	7525-7527	up	
30-45	7528-7535	results	
30-46	7536-7540	with	
30-47	7541-7548	missing	
30-48	7549-7559	result_nvt	
30-49	7560-7567	entries	
30-50	7568-7573	which	
30-51	7574-7577	can	
30-52	7578-7584	result	
30-53	7585-7587	in	
30-54	7588-7595	filters	
30-55	7596-7599	and	
30-56	7600-7609	overrides	
30-57	7610-7613	not	
30-58	7614-7621	working	
30-59	7622-7630	properly	
30-60	7630-7631	.	

#Text=/opt/gvm/sbin/gvmd --optimize=cleanup-result-nvts This option removes duplicate preferences from Scan Configs and corrects some broken preference values /opt/gvm/sbin/gvmd --optimize=cleanup-config-prefs
31-1	7632-7633	/	
31-2	7633-7636	opt	
31-3	7636-7637	/	
31-4	7637-7640	gvm	
31-5	7640-7641	/	
31-6	7641-7645	sbin	
31-7	7645-7646	/	
31-8	7646-7650	gvmd	
31-9	7651-7652	-	
31-10	7652-7653	-	
31-11	7653-7661	optimize	
31-12	7661-7662	=	
31-13	7662-7681	cleanup-result-nvts	
31-14	7682-7686	This	
31-15	7687-7693	option	
31-16	7694-7701	removes	
31-17	7702-7711	duplicate	
31-18	7712-7723	preferences	
31-19	7724-7728	from	
31-20	7729-7733	Scan	
31-21	7734-7741	Configs	
31-22	7742-7745	and	
31-23	7746-7754	corrects	
31-24	7755-7759	some	
31-25	7760-7766	broken	
31-26	7767-7777	preference	
31-27	7778-7784	values	
31-28	7785-7786	/	
31-29	7786-7789	opt	
31-30	7789-7790	/	
31-31	7790-7793	gvm	
31-32	7793-7794	/	
31-33	7794-7798	sbin	
31-34	7798-7799	/	
31-35	7799-7803	gvmd	
31-36	7804-7805	-	
31-37	7805-7806	-	
31-38	7806-7814	optimize	
31-39	7814-7815	=	
31-40	7815-7835	cleanup-config-prefs	

#Text=This cleans up results with no severity by assigning the default severity set by the user owning the result. /opt/gvm/sbin/gvmd --optimize=cleanup-result-severities This creates the cache containing the unfiltered result counts of all reports that are not cached yet.
32-1	7836-7840	This	
32-2	7841-7847	cleans	
32-3	7848-7850	up	
32-4	7851-7858	results	
32-5	7859-7863	with	
32-6	7864-7866	no	
32-7	7867-7875	severity	
32-8	7876-7878	by	
32-9	7879-7888	assigning	
32-10	7889-7892	the	
32-11	7893-7900	default	
32-12	7901-7909	severity	
32-13	7910-7913	set	
32-14	7914-7916	by	
32-15	7917-7920	the	
32-16	7921-7925	user	
32-17	7926-7932	owning	
32-18	7933-7936	the	
32-19	7937-7943	result	
32-20	7943-7944	.	
32-21	7945-7946	/	
32-22	7946-7949	opt	
32-23	7949-7950	/	
32-24	7950-7953	gvm	
32-25	7953-7954	/	
32-26	7954-7958	sbin	
32-27	7958-7959	/	
32-28	7959-7963	gvmd	
32-29	7964-7965	-	
32-30	7965-7966	-	
32-31	7966-7974	optimize	
32-32	7974-7975	=	
32-33	7975-8000	cleanup-result-severities	
32-34	8001-8005	This	
32-35	8006-8013	creates	
32-36	8014-8017	the	
32-37	8018-8023	cache	
32-38	8024-8034	containing	
32-39	8035-8038	the	
32-40	8039-8049	unfiltered	
32-41	8050-8056	result	
32-42	8057-8063	counts	
32-43	8064-8066	of	
32-44	8067-8070	all	
32-45	8071-8078	reports	
32-46	8079-8083	that	
32-47	8084-8087	are	
32-48	8088-8091	not	
32-49	8092-8098	cached	
32-50	8099-8102	yet	
32-51	8102-8103	.	

#Text=/opt/gvm/sbin/gvmd --optimize=update-report-cache I havn’t found any other information to optimize SQL database for GVM usage, so if you have other informations I miss, please share. However you are right on one point; we store log information as well as low/medium/high… Thanks
33-1	8104-8105	/	
33-2	8105-8108	opt	
33-3	8108-8109	/	
33-4	8109-8112	gvm	
33-5	8112-8113	/	
33-6	8113-8117	sbin	
33-7	8117-8118	/	
33-8	8118-8122	gvmd	
33-9	8123-8124	-	
33-10	8124-8125	-	
33-11	8125-8133	optimize	
33-12	8133-8134	=	
33-13	8134-8153	update-report-cache	
33-14	8154-8155	I	
33-15	8156-8160	havn	
33-16	8160-8161	’	
33-17	8161-8162	t	
33-18	8163-8168	found	
33-19	8169-8172	any	
33-20	8173-8178	other	
33-21	8179-8190	information	
33-22	8191-8193	to	
33-23	8194-8202	optimize	
33-24	8203-8206	SQL	
33-25	8207-8215	database	
33-26	8216-8219	for	
33-27	8220-8223	GVM	
33-28	8224-8229	usage	
33-29	8229-8230	,	
33-30	8231-8233	so	
33-31	8234-8236	if	
33-32	8237-8240	you	
33-33	8241-8245	have	
33-34	8246-8251	other	
33-35	8252-8264	informations	
33-36	8265-8266	I	
33-37	8267-8271	miss	
33-38	8271-8272	,	
33-39	8273-8279	please	
33-40	8280-8285	share	
33-41	8285-8286	.	
33-42	8287-8294	However	
33-43	8295-8298	you	
33-44	8299-8302	are	
33-45	8303-8308	right	
33-46	8309-8311	on	
33-47	8312-8315	one	
33-48	8316-8321	point	
33-49	8321-8322	;	
33-50	8323-8325	we	
33-51	8326-8331	store	
33-52	8332-8335	log	
33-53	8336-8347	information	
33-54	8348-8350	as	
33-55	8351-8355	well	
33-56	8356-8358	as	
33-57	8359-8362	low	
33-58	8362-8363	/	
33-59	8363-8369	medium	
33-60	8369-8370	/	
33-61	8370-8374	high	
33-62	8374-8375	…	
33-63	8376-8382	Thanks	

#Text=Lukas September 26, 2020, 8:07am #15 tatooin: Freeing some unused storage space in the database /opt/gvm/sbin/gvmd --optimize=vacuum Optimize DB queries
34-1	8383-8388	Lukas	
34-2	8389-8398	September	
34-3	8399-8401	26	
34-4	8401-8402	,	
34-5	8403-8407	2020	
34-6	8407-8408	,	
34-7	8409-8410	8	
34-8	8410-8411	:	
34-9	8411-8415	07am	
34-10	8416-8419	#15	
34-11	8420-8427	tatooin	
34-12	8427-8428	:	
34-13	8429-8436	Freeing	
34-14	8437-8441	some	
34-15	8442-8448	unused	
34-16	8449-8456	storage	
34-17	8457-8462	space	
34-18	8463-8465	in	
34-19	8466-8469	the	
34-20	8470-8478	database	
34-21	8479-8480	/	
34-22	8480-8483	opt	
34-23	8483-8484	/	
34-24	8484-8487	gvm	
34-25	8487-8488	/	
34-26	8488-8492	sbin	
34-27	8492-8493	/	
34-28	8493-8497	gvmd	
34-29	8498-8499	-	
34-30	8499-8500	-	
34-31	8500-8508	optimize	
34-32	8508-8509	=	
34-33	8509-8515	vacuum	
34-34	8516-8524	Optimize	
34-35	8525-8527	DB	
34-36	8528-8535	queries	

#Text=/opt/gvm/sbin/gvmd --optimize=analyze That is not enough with that DB size, as well your default config is not intended for that extra big enterprise environment. I would run offline optimizations first. I would go with multiple enterprise appliances with that big environment. Otherwise you have to re-invent the wheel based on our OpenSource.
35-1	8536-8537	/	
35-2	8537-8540	opt	
35-3	8540-8541	/	
35-4	8541-8544	gvm	
35-5	8544-8545	/	
35-6	8545-8549	sbin	
35-7	8549-8550	/	
35-8	8550-8554	gvmd	
35-9	8555-8556	-	
35-10	8556-8557	-	
35-11	8557-8565	optimize	
35-12	8565-8566	=	
35-13	8566-8573	analyze	
35-14	8574-8578	That	
35-15	8579-8581	is	
35-16	8582-8585	not	
35-17	8586-8592	enough	
35-18	8593-8597	with	
35-19	8598-8602	that	
35-20	8603-8605	DB	
35-21	8606-8610	size	
35-22	8610-8611	,	
35-23	8612-8614	as	
35-24	8615-8619	well	
35-25	8620-8624	your	
35-26	8625-8632	default	
35-27	8633-8639	config	
35-28	8640-8642	is	
35-29	8643-8646	not	
35-30	8647-8655	intended	
35-31	8656-8659	for	
35-32	8660-8664	that	
35-33	8665-8670	extra	
35-34	8671-8674	big	
35-35	8675-8685	enterprise	
35-36	8686-8697	environment	
35-37	8697-8698	.	
35-38	8699-8700	I	
35-39	8701-8706	would	
35-40	8707-8710	run	
35-41	8711-8718	offline	
35-42	8719-8732	optimizations	
35-43	8733-8738	first	
35-44	8738-8739	.	
35-45	8740-8741	I	
35-46	8742-8747	would	
35-47	8748-8750	go	
35-48	8751-8755	with	
35-49	8756-8764	multiple	
35-50	8765-8775	enterprise	
35-51	8776-8786	appliances	
35-52	8787-8791	with	
35-53	8792-8796	that	
35-54	8797-8800	big	
35-55	8801-8812	environment	
35-56	8812-8813	.	
35-57	8814-8823	Otherwise	
35-58	8824-8827	you	
35-59	8828-8832	have	
35-60	8833-8835	to	
35-61	8836-8845	re-invent	
35-62	8846-8849	the	
35-63	8850-8855	wheel	
35-64	8856-8861	based	
35-65	8862-8864	on	
35-66	8865-8868	our	
35-67	8869-8879	OpenSource	
35-68	8879-8880	.	

#Text=tatooin September 26, 2020, 8:15am #16 What do you call offline optimization ? Please share informations if you have it. Also you mention log data; is there a way to stop logging it ? I havn’t found any documentation on this; it only apply to reports.
36-1	8881-8888	tatooin	
36-2	8889-8898	September	
36-3	8899-8901	26	
36-4	8901-8902	,	
36-5	8903-8907	2020	
36-6	8907-8908	,	
36-7	8909-8910	8	
36-8	8910-8911	:	
36-9	8911-8915	15am	
36-10	8916-8919	#16	
36-11	8920-8924	What	
36-12	8925-8927	do	
36-13	8928-8931	you	
36-14	8932-8936	call	
36-15	8937-8944	offline	
36-16	8945-8957	optimization	
36-17	8958-8959	?	
36-18	8960-8966	Please	
36-19	8967-8972	share	
36-20	8973-8985	informations	
36-21	8986-8988	if	
36-22	8989-8992	you	
36-23	8993-8997	have	
36-24	8998-9000	it	
36-25	9000-9001	.	
36-26	9002-9006	Also	
36-27	9007-9010	you	
36-28	9011-9018	mention	
36-29	9019-9022	log	
36-30	9023-9027	data	
36-31	9027-9028	;	
36-32	9029-9031	is	
36-33	9032-9037	there	
36-34	9038-9039	a	
36-35	9040-9043	way	
36-36	9044-9046	to	
36-37	9047-9051	stop	
36-38	9052-9059	logging	
36-39	9060-9062	it	
36-40	9063-9064	?	
36-41	9065-9066	I	
36-42	9067-9071	havn	
36-43	9071-9072	’	
36-44	9072-9073	t	
36-45	9074-9079	found	
36-46	9080-9083	any	
36-47	9084-9097	documentation	
36-48	9098-9100	on	
36-49	9101-9105	this	
36-50	9105-9106	;	
36-51	9107-9109	it	
36-52	9110-9114	only	
36-53	9115-9120	apply	
36-54	9121-9123	to	
36-55	9124-9131	reports	
36-56	9131-9132	.	

#Text=The appliance is unfortunately not an option in my context; due to prohibitive restrictions to install hardwares in our DCs. And in all case, I understand my DB isn’t optimized since you said you’ve seen DBs with more than 10 /8 networks never reaching that size. Currently I have no other option but to optimize to the maximum what I have. Again, help is welcome here if you have advices. Thanks Home Categories FAQ/Guidelines Terms of Service Privacy Policy
37-1	9133-9136	The	
37-2	9137-9146	appliance	
37-3	9147-9149	is	
37-4	9150-9163	unfortunately	
37-5	9164-9167	not	
37-6	9168-9170	an	
37-7	9171-9177	option	
37-8	9178-9180	in	
37-9	9181-9183	my	
37-10	9184-9191	context	
37-11	9191-9192	;	
37-12	9193-9196	due	
37-13	9197-9199	to	
37-14	9200-9211	prohibitive	
37-15	9212-9224	restrictions	
37-16	9225-9227	to	
37-17	9228-9235	install	
37-18	9236-9245	hardwares	
37-19	9246-9248	in	
37-20	9249-9252	our	
37-21	9253-9256	DCs	
37-22	9256-9257	.	
37-23	9258-9261	And	
37-24	9262-9264	in	
37-25	9265-9268	all	
37-26	9269-9273	case	
37-27	9273-9274	,	
37-28	9275-9276	I	
37-29	9277-9287	understand	
37-30	9288-9290	my	
37-31	9291-9293	DB	
37-32	9294-9297	isn	
37-33	9297-9298	’	
37-34	9298-9299	t	
37-35	9300-9309	optimized	
37-36	9310-9315	since	
37-37	9316-9319	you	
37-38	9320-9324	said	
37-39	9325-9328	you	
37-40	9328-9329	’	
37-41	9329-9331	ve	
37-42	9332-9336	seen	
37-43	9337-9340	DBs	
37-44	9341-9345	with	
37-45	9346-9350	more	
37-46	9351-9355	than	
37-47	9356-9358	10	
37-48	9359-9360	/	
37-49	9360-9361	8	
37-50	9362-9370	networks	
37-51	9371-9376	never	
37-52	9377-9385	reaching	
37-53	9386-9390	that	
37-54	9391-9395	size	
37-55	9395-9396	.	
37-56	9397-9406	Currently	
37-57	9407-9408	I	
37-58	9409-9413	have	
37-59	9414-9416	no	
37-60	9417-9422	other	
37-61	9423-9429	option	
37-62	9430-9433	but	
37-63	9434-9436	to	
37-64	9437-9445	optimize	
37-65	9446-9448	to	
37-66	9449-9452	the	
37-67	9453-9460	maximum	
37-68	9461-9465	what	
37-69	9466-9467	I	
37-70	9468-9472	have	
37-71	9472-9473	.	
37-72	9474-9479	Again	
37-73	9479-9480	,	
37-74	9481-9485	help	
37-75	9486-9488	is	
37-76	9489-9496	welcome	
37-77	9497-9501	here	
37-78	9502-9504	if	
37-79	9505-9508	you	
37-80	9509-9513	have	
37-81	9514-9521	advices	
37-82	9521-9522	.	
37-83	9523-9529	Thanks	
37-84	9530-9534	Home	
37-85	9535-9545	Categories	
37-86	9546-9549	FAQ	
37-87	9549-9550	/	
37-88	9550-9560	Guidelines	
37-89	9561-9566	Terms	
37-90	9567-9569	of	
37-91	9570-9577	Service	
37-92	9578-9585	Privacy	
37-93	9586-9592	Policy	
