#FORMAT=WebAnno TSV 3.3


#Text=Top 3 Snowflake Performance Tuning Tactics — Analytics.Today Skip to Content Analytics.Today Current Page: Blog About Contact Open Menu Close Menu Open Menu
1-1	0-3	Top	
1-2	4-5	3	
1-3	6-15	Snowflake	
1-4	16-27	Performance	
1-5	28-34	Tuning	
1-6	35-42	Tactics	
1-7	43-44	—	
1-8	45-60	Analytics.Today	
1-9	61-65	Skip	
1-10	66-68	to	
1-11	69-76	Content	
1-12	77-92	Analytics.Today	
1-13	93-100	Current	
1-14	101-105	Page	
1-15	105-106	:	
1-16	107-111	Blog	
1-17	112-117	About	
1-18	118-125	Contact	
1-19	126-130	Open	
1-20	131-135	Menu	
1-21	136-141	Close	
1-22	142-146	Menu	
1-23	147-151	Open	
1-24	152-156	Menu	

#Text=Close Menu Analytics.Today Current Page: Blog About Contact Current Page: Blog About Contact Top 3 Snowflake Performance Tuning Tactics Jul 17 Written By John Ryan
2-1	157-162	Close	
2-2	163-167	Menu	
2-3	168-183	Analytics.Today	
2-4	184-191	Current	
2-5	192-196	Page	
2-6	196-197	:	
2-7	198-202	Blog	
2-8	203-208	About	
2-9	209-216	Contact	
2-10	217-224	Current	
2-11	225-229	Page	
2-12	229-230	:	
2-13	231-235	Blog	
2-14	236-241	About	
2-15	242-249	Contact	
2-16	250-253	Top	
2-17	254-255	3	
2-18	256-265	Snowflake	
2-19	266-277	Performance	
2-20	278-284	Tuning	
2-21	285-292	Tactics	
2-22	293-296	Jul	
2-23	297-299	17	
2-24	300-307	Written	
2-25	308-310	By	
2-26	311-315	John	
2-27	316-320	Ryan	

#Text=Image by Gino Crescoli from Pixabay
3-1	321-326	Image	
3-2	327-329	by	
3-3	329-330	 	
3-4	330-334	Gino	
3-5	335-343	Crescoli	
3-6	343-344	 	
3-7	344-348	from	
3-8	348-349	 	
3-9	349-356	Pixabay	

#Text=The Snowflake Data Cloud has an excellent reputation as an analytics platform for blisteringly fast query performance, but without indexes. So, how can you tune the Snowflake database to maximize query performance? This article explains the top three techniques to tune your system to maximum throughput, including data ingestion, data transformation, and end-user queries.Snowflake Query PerformanceOne of my favourite phrases is: What problem are we trying to solve? As techies, we often launch into solutions before we even understand the true nature of the problem. The performance issues on any analytics platform generally fall into one of three categories: 1.Data Load Speed: The ability to load massive volumes of data as quickly as possible.2.Data Transformation: The ability to maximize throughput, and rapidly transform the raw data into a form suitable for queries.3.Data Query Speed: Which aims to minimize the latency of each query and deliver results to business intelligence users as fast as possible.1. Snowflake Data LoadingAvoid Scanning FilesThe diagram below illustrates the most common method of bulk loading data into Snowflake, which involves transferring the data from the on-premise system to cloud storage, and then using the COPY command to load to Snowflake. Before copying data, Snowflake checks the file has not already been loaded, and this leads the first and easiest way to maximize load performance by partitioning staged data files to avoid scanning terabytes of files that have already been loaded. The code snippet below shows a COPY using a range of options:-- Simple method:
4-1	357-360	The	
4-2	361-370	Snowflake	
4-3	371-375	Data	
4-4	376-381	Cloud	
4-5	382-385	has	
4-6	386-388	an	
4-7	389-398	excellent	
4-8	399-409	reputation	
4-9	410-412	as	
4-10	413-415	an	
4-11	416-425	analytics	
4-12	426-434	platform	
4-13	435-438	for	
4-14	439-451	blisteringly	
4-15	452-456	fast	
4-16	457-462	query	
4-17	463-474	performance	
4-18	474-475	,	
4-19	476-479	but	
4-20	480-487	without	
4-21	488-495	indexes	
4-22	495-496	.	
4-23	497-499	So	
4-24	499-500	,	
4-25	501-504	how	
4-26	505-508	can	
4-27	509-512	you	
4-28	513-517	tune	
4-29	518-521	the	
4-30	522-531	Snowflake	
4-31	532-540	database	
4-32	541-543	to	
4-33	544-552	maximize	
4-34	553-558	query	
4-35	559-570	performance	
4-36	570-571	?	
4-37	572-576	This	
4-38	577-584	article	
4-39	585-593	explains	
4-40	594-597	the	
4-41	598-601	top	
4-42	602-607	three	
4-43	608-618	techniques	
4-44	619-621	to	
4-45	622-626	tune	
4-46	627-631	your	
4-47	632-638	system	
4-48	639-641	to	
4-49	642-649	maximum	
4-50	650-660	throughput	
4-51	660-661	,	
4-52	662-671	including	
4-53	672-676	data	
4-54	677-686	ingestion	
4-55	686-687	,	
4-56	688-692	data	
4-57	693-707	transformation	
4-58	707-708	,	
4-59	709-712	and	
4-60	713-721	end-user	
4-61	722-739	queries.Snowflake	
4-62	740-745	Query	
4-63	746-760	PerformanceOne	
4-64	761-763	of	
4-65	764-766	my	
4-66	767-776	favourite	
4-67	777-784	phrases	
4-68	785-787	is	
4-69	787-788	:	
4-70	788-789	 	
4-71	789-793	What	
4-72	794-801	problem	
4-73	802-805	are	
4-74	806-808	we	
4-75	809-815	trying	
4-76	816-818	to	
4-77	819-824	solve	
4-78	824-825	?	
4-79	825-826	 	
4-80	826-828	As	
4-81	829-836	techies	
4-82	836-837	,	
4-83	838-840	we	
4-84	841-846	often	
4-85	847-853	launch	
4-86	854-858	into	
4-87	859-868	solutions	
4-88	869-875	before	
4-89	876-878	we	
4-90	879-883	even	
4-91	884-894	understand	
4-92	895-898	the	
4-93	899-903	true	
4-94	904-910	nature	
4-95	911-913	of	
4-96	914-917	the	
4-97	918-925	problem	
4-98	925-926	.	
4-99	927-930	The	
4-100	931-942	performance	
4-101	943-949	issues	
4-102	950-952	on	
4-103	953-956	any	
4-104	957-966	analytics	
4-105	967-975	platform	
4-106	976-985	generally	
4-107	986-990	fall	
4-108	991-995	into	
4-109	996-999	one	
4-110	1000-1002	of	
4-111	1003-1008	three	
4-112	1009-1019	categories	
4-113	1019-1020	:	
4-114	1020-1021	 	
4-115	1021-1022	1	
4-116	1022-1023	.	
4-117	1023-1027	Data	
4-118	1028-1032	Load	
4-119	1033-1038	Speed	
4-120	1038-1039	:	
4-121	1039-1040	 	
4-122	1040-1043	The	
4-123	1044-1051	ability	
4-124	1052-1054	to	
4-125	1055-1059	load	
4-126	1060-1067	massive	
4-127	1068-1075	volumes	
4-128	1076-1078	of	
4-129	1079-1083	data	
4-130	1084-1086	as	
4-131	1087-1094	quickly	
4-132	1095-1097	as	
4-133	1098-1106	possible	
4-134	1106-1108	.2	
4-135	1108-1109	.	
4-136	1109-1113	Data	
4-137	1114-1128	Transformation	
4-138	1128-1129	:	
4-139	1129-1130	 	
4-140	1130-1133	The	
4-141	1134-1141	ability	
4-142	1142-1144	to	
4-143	1145-1153	maximize	
4-144	1154-1164	throughput	
4-145	1164-1165	,	
4-146	1166-1169	and	
4-147	1170-1177	rapidly	
4-148	1178-1187	transform	
4-149	1188-1191	the	
4-150	1192-1195	raw	
4-151	1196-1200	data	
4-152	1201-1205	into	
4-153	1206-1207	a	
4-154	1208-1212	form	
4-155	1213-1221	suitable	
4-156	1222-1225	for	
4-157	1226-1233	queries	
4-158	1233-1235	.3	
4-159	1235-1236	.	
4-160	1236-1240	Data	
4-161	1241-1246	Query	
4-162	1247-1252	Speed	
4-163	1252-1253	:	
4-164	1253-1254	 	
4-165	1254-1259	Which	
4-166	1260-1264	aims	
4-167	1265-1267	to	
4-168	1268-1276	minimize	
4-169	1277-1280	the	
4-170	1281-1288	latency	
4-171	1289-1291	of	
4-172	1292-1296	each	
4-173	1297-1302	query	
4-174	1303-1306	and	
4-175	1307-1314	deliver	
4-176	1315-1322	results	
4-177	1323-1325	to	
4-178	1326-1334	business	
4-179	1335-1347	intelligence	
4-180	1348-1353	users	
4-181	1354-1356	as	
4-182	1357-1361	fast	
4-183	1362-1364	as	
4-184	1365-1373	possible	
4-185	1373-1375	.1	
4-186	1375-1376	.	
4-187	1377-1386	Snowflake	
4-188	1387-1391	Data	
4-189	1392-1404	LoadingAvoid	
4-190	1405-1413	Scanning	
4-191	1414-1422	FilesThe	
4-192	1423-1430	diagram	
4-193	1431-1436	below	
4-194	1437-1448	illustrates	
4-195	1449-1452	the	
4-196	1453-1457	most	
4-197	1458-1464	common	
4-198	1465-1471	method	
4-199	1472-1474	of	
4-200	1475-1479	bulk	
4-201	1480-1487	loading	
4-202	1488-1492	data	
4-203	1493-1497	into	
4-204	1498-1507	Snowflake	
4-205	1507-1508	,	
4-206	1509-1514	which	
4-207	1515-1523	involves	
4-208	1524-1536	transferring	
4-209	1537-1540	the	
4-210	1541-1545	data	
4-211	1546-1550	from	
4-212	1551-1554	the	
4-213	1555-1565	on-premise	
4-214	1566-1572	system	
4-215	1573-1575	to	
4-216	1576-1581	cloud	
4-217	1582-1589	storage	
4-218	1589-1590	,	
4-219	1591-1594	and	
4-220	1595-1599	then	
4-221	1600-1605	using	
4-222	1606-1609	the	
4-223	1609-1610	 	
4-224	1610-1614	COPY	
4-225	1615-1622	command	
4-226	1622-1623	 	
4-227	1623-1625	to	
4-228	1626-1630	load	
4-229	1631-1633	to	
4-230	1634-1643	Snowflake	
4-231	1643-1644	.	
4-232	1645-1651	Before	
4-233	1652-1659	copying	
4-234	1660-1664	data	
4-235	1664-1665	,	
4-236	1665-1666	 	
4-237	1666-1675	Snowflake	
4-238	1676-1682	checks	
4-239	1682-1683	 	
4-240	1683-1686	the	
4-241	1687-1691	file	
4-242	1692-1695	has	
4-243	1696-1699	not	
4-244	1700-1707	already	
4-245	1708-1712	been	
4-246	1713-1719	loaded	
4-247	1719-1720	,	
4-248	1721-1724	and	
4-249	1725-1729	this	
4-250	1730-1735	leads	
4-251	1736-1739	the	
4-252	1740-1745	first	
4-253	1746-1749	and	
4-254	1750-1757	easiest	
4-255	1758-1761	way	
4-256	1762-1764	to	
4-257	1765-1773	maximize	
4-258	1774-1778	load	
4-259	1779-1790	performance	
4-260	1791-1793	by	
4-261	1793-1794	 	
4-262	1794-1806	partitioning	
4-263	1807-1813	staged	
4-264	1814-1818	data	
4-265	1819-1824	files	
4-266	1824-1825	 	
4-267	1825-1827	to	
4-268	1828-1833	avoid	
4-269	1834-1842	scanning	
4-270	1843-1852	terabytes	
4-271	1853-1855	of	
4-272	1856-1861	files	
4-273	1862-1866	that	
4-274	1867-1871	have	
4-275	1872-1879	already	
4-276	1880-1884	been	
4-277	1885-1891	loaded	
4-278	1891-1892	.	
4-279	1893-1896	The	
4-280	1897-1901	code	
4-281	1902-1909	snippet	
4-282	1910-1915	below	
4-283	1916-1921	shows	
4-284	1922-1923	a	
4-285	1924-1928	COPY	
4-286	1929-1934	using	
4-287	1935-1936	a	
4-288	1937-1942	range	
4-289	1943-1945	of	
4-290	1946-1953	options	
4-291	1953-1954	:	
4-292	1954-1955	-	
4-293	1955-1956	-	
4-294	1957-1963	Simple	
4-295	1964-1970	method	
4-296	1970-1971	:	

#Text=Scan entire stage copy into sales_table from @landing_data pattern='.*[.]csv'; -- Most Flexible method: Limit within directory copy into sales_table from @landing_data/sales/transactions/2020/05
5-1	1972-1976	Scan	
5-2	1977-1983	entire	
5-3	1984-1989	stage	
5-4	1990-1994	copy	
5-5	1995-1999	into	
5-6	2000-2011	sales_table	
5-7	2012-2016	from	
5-8	2017-2018	@	
5-9	2018-2030	landing_data	
5-10	2031-2038	pattern	
5-11	2038-2039	=	
5-12	2039-2040	'	
5-13	2040-2041	.	
5-14	2041-2042	*	
5-15	2042-2043	[	
5-16	2043-2044	.	
5-17	2044-2045	]	
5-18	2045-2048	csv	
5-19	2048-2049	'	
5-20	2049-2050	;	
5-21	2051-2052	-	
5-22	2052-2053	-	
5-23	2054-2058	Most	
5-24	2059-2067	Flexible	
5-25	2068-2074	method	
5-26	2074-2075	:	
5-27	2076-2081	Limit	
5-28	2082-2088	within	
5-29	2089-2098	directory	
5-30	2099-2103	copy	
5-31	2104-2108	into	
5-32	2109-2120	sales_table	
5-33	2121-2125	from	
5-34	2126-2127	@	
5-35	2127-2139	landing_data	
5-36	2139-2140	/	
5-37	2140-2145	sales	
5-38	2145-2146	/	
5-39	2146-2158	transactions	
5-40	2158-2159	/	
5-41	2159-2163	2020	
5-42	2163-2164	/	
5-43	2164-2166	05	

#Text=pattern='.*[.]csv'; -- Fastest method: A named file copy into sales_table from @landing_data/sales/transactions/2020/05/sales_050.csv;
6-1	2167-2174	pattern	
6-2	2174-2175	=	
6-3	2175-2176	'	
6-4	2176-2177	.	
6-5	2177-2178	*	
6-6	2178-2179	[	
6-7	2179-2180	.	
6-8	2180-2181	]	
6-9	2181-2184	csv	
6-10	2184-2185	'	
6-11	2185-2186	;	
6-12	2187-2188	-	
6-13	2188-2189	-	
6-14	2190-2197	Fastest	
6-15	2198-2204	method	
6-16	2204-2205	:	
6-17	2206-2207	A	
6-18	2208-2213	named	
6-19	2214-2218	file	
6-20	2219-2223	copy	
6-21	2224-2228	into	
6-22	2229-2240	sales_table	
6-23	2241-2245	from	
6-24	2246-2247	@	
6-25	2247-2259	landing_data	
6-26	2259-2260	/	
6-27	2260-2265	sales	
6-28	2265-2266	/	
6-29	2266-2278	transactions	
6-30	2278-2279	/	
6-31	2279-2283	2020	
6-32	2283-2284	/	
6-33	2284-2286	05	
6-34	2286-2287	/	
6-35	2287-2292	sales	
6-36	2292-2293	_	
6-37	2293-2296	050	
6-38	2296-2297	.	
6-39	2297-2300	csv	
6-40	2300-2301	;	

#Text=While the absolute fastest method is to name a specific file, using pattern matching to identify the files is the most flexible. The alternative option is to remove the files immediately after loading.Choose a sensible virtual warehouse sizeThe diagram below illustrates a common mistake made by designers when loading large data files into Snowflake, which involves scaling up to a bigger virtual warehouse to speed the load process. In reality, scaling up the warehouse has no performance benefit in this case. Snowflake: Loading large data files
7-1	2302-2307	While	
7-2	2308-2311	the	
7-3	2312-2320	absolute	
7-4	2321-2328	fastest	
7-5	2329-2335	method	
7-6	2336-2338	is	
7-7	2339-2341	to	
7-8	2342-2346	name	
7-9	2347-2348	a	
7-10	2349-2357	specific	
7-11	2358-2362	file	
7-12	2362-2363	,	
7-13	2363-2364	 	
7-14	2364-2369	using	
7-15	2370-2377	pattern	
7-16	2378-2386	matching	
7-17	2386-2387	 	
7-18	2387-2389	to	
7-19	2390-2398	identify	
7-20	2399-2402	the	
7-21	2403-2408	files	
7-22	2409-2411	is	
7-23	2412-2415	the	
7-24	2416-2420	most	
7-25	2421-2429	flexible	
7-26	2429-2430	.	
7-27	2431-2434	The	
7-28	2435-2446	alternative	
7-29	2447-2453	option	
7-30	2454-2456	is	
7-31	2457-2459	to	
7-32	2459-2460	 	
7-33	2460-2466	remove	
7-34	2467-2470	the	
7-35	2471-2476	files	
7-36	2476-2477	 	
7-37	2477-2488	immediately	
7-38	2489-2494	after	
7-39	2495-2509	loading.Choose	
7-40	2510-2511	a	
7-41	2512-2520	sensible	
7-42	2521-2528	virtual	
7-43	2529-2538	warehouse	
7-44	2539-2546	sizeThe	
7-45	2547-2554	diagram	
7-46	2555-2560	below	
7-47	2561-2572	illustrates	
7-48	2573-2574	a	
7-49	2575-2581	common	
7-50	2582-2589	mistake	
7-51	2590-2594	made	
7-52	2595-2597	by	
7-53	2598-2607	designers	
7-54	2608-2612	when	
7-55	2613-2620	loading	
7-56	2621-2626	large	
7-57	2627-2631	data	
7-58	2632-2637	files	
7-59	2638-2642	into	
7-60	2643-2652	Snowflake	
7-61	2652-2653	,	
7-62	2654-2659	which	
7-63	2660-2668	involves	
7-64	2669-2676	scaling	
7-65	2677-2679	up	
7-66	2680-2682	to	
7-67	2683-2684	a	
7-68	2685-2691	bigger	
7-69	2691-2692	 	
7-70	2692-2699	virtual	
7-71	2700-2709	warehouse	
7-72	2709-2710	 	
7-73	2710-2712	to	
7-74	2713-2718	speed	
7-75	2719-2722	the	
7-76	2723-2727	load	
7-77	2728-2735	process	
7-78	2735-2736	.	
7-79	2737-2739	In	
7-80	2740-2747	reality	
7-81	2747-2748	,	
7-82	2748-2749	 	
7-83	2749-2756	scaling	
7-84	2757-2759	up	
7-85	2760-2763	the	
7-86	2764-2773	warehouse	
7-87	2774-2777	has	
7-88	2778-2780	no	
7-89	2781-2792	performance	
7-90	2793-2800	benefit	
7-91	2800-2801	 	
7-92	2801-2803	in	
7-93	2804-2808	this	
7-94	2809-2813	case	
7-95	2813-2814	.	
7-96	2815-2824	Snowflake	
7-97	2824-2825	:	
7-98	2826-2833	Loading	
7-99	2834-2839	large	
7-100	2840-2844	data	
7-101	2845-2850	files	

#Text=The above COPY statement will open the 10Gb data file and sequentially load the data using a single thread on one node, leaving the remaining servers idle. Benchmark tests demonstrate a load rate of around 9 Gb per minute, which is fast but could be improved. Unless you have other parallel loads using the same virtual warehouse, the above solution is also remarkably inefficient, as you will pay for four servers, while using only one.The diagram below illustrates a much better approach, which involves breaking up the single 10Gb file into 100 x 100Mb files to make use of Snowflake’s automatic parallel execution. Snowflake: Fast parallel loading multiple data files
8-1	2851-2854	The	
8-2	2855-2860	above	
8-3	2861-2865	COPY	
8-4	2866-2875	statement	
8-5	2876-2880	will	
8-6	2881-2885	open	
8-7	2886-2889	the	
8-8	2890-2894	10Gb	
8-9	2895-2899	data	
8-10	2900-2904	file	
8-11	2905-2908	and	
8-12	2909-2921	sequentially	
8-13	2922-2926	load	
8-14	2927-2930	the	
8-15	2931-2935	data	
8-16	2936-2941	using	
8-17	2942-2943	a	
8-18	2944-2950	single	
8-19	2951-2957	thread	
8-20	2958-2960	on	
8-21	2961-2964	one	
8-22	2965-2969	node	
8-23	2969-2970	,	
8-24	2971-2978	leaving	
8-25	2979-2982	the	
8-26	2983-2992	remaining	
8-27	2993-3000	servers	
8-28	3001-3005	idle	
8-29	3005-3006	.	
8-30	3007-3016	Benchmark	
8-31	3017-3022	tests	
8-32	3023-3034	demonstrate	
8-33	3035-3036	a	
8-34	3037-3041	load	
8-35	3042-3046	rate	
8-36	3047-3049	of	
8-37	3050-3056	around	
8-38	3057-3058	9	
8-39	3059-3061	Gb	
8-40	3062-3065	per	
8-41	3066-3072	minute	
8-42	3072-3073	,	
8-43	3074-3079	which	
8-44	3080-3082	is	
8-45	3083-3087	fast	
8-46	3088-3091	but	
8-47	3092-3097	could	
8-48	3098-3100	be	
8-49	3101-3109	improved	
8-50	3109-3110	.	
8-51	3111-3117	Unless	
8-52	3118-3121	you	
8-53	3122-3126	have	
8-54	3127-3132	other	
8-55	3133-3141	parallel	
8-56	3142-3147	loads	
8-57	3148-3153	using	
8-58	3154-3157	the	
8-59	3158-3162	same	
8-60	3163-3170	virtual	
8-61	3171-3180	warehouse	
8-62	3180-3181	,	
8-63	3182-3185	the	
8-64	3186-3191	above	
8-65	3192-3200	solution	
8-66	3201-3203	is	
8-67	3204-3208	also	
8-68	3209-3219	remarkably	
8-69	3220-3231	inefficient	
8-70	3231-3232	,	
8-71	3233-3235	as	
8-72	3236-3239	you	
8-73	3240-3244	will	
8-74	3245-3248	pay	
8-75	3249-3252	for	
8-76	3253-3257	four	
8-77	3258-3265	servers	
8-78	3265-3266	,	
8-79	3267-3272	while	
8-80	3273-3278	using	
8-81	3279-3283	only	
8-82	3284-3291	one.The	
8-83	3292-3299	diagram	
8-84	3300-3305	below	
8-85	3306-3317	illustrates	
8-86	3318-3319	a	
8-87	3319-3320	 	
8-88	3320-3324	much	
8-89	3325-3331	better	
8-90	3332-3340	approach	
8-91	3340-3341	,	
8-92	3342-3347	which	
8-93	3348-3356	involves	
8-94	3357-3365	breaking	
8-95	3366-3368	up	
8-96	3369-3372	the	
8-97	3373-3379	single	
8-98	3380-3384	10Gb	
8-99	3385-3389	file	
8-100	3390-3394	into	
8-101	3395-3398	100	
8-102	3399-3400	x	
8-103	3401-3406	100Mb	
8-104	3407-3412	files	
8-105	3413-3415	to	
8-106	3416-3420	make	
8-107	3421-3424	use	
8-108	3425-3427	of	
8-109	3428-3437	Snowflake	
8-110	3437-3438	’	
8-111	3438-3439	s	
8-112	3440-3449	automatic	
8-113	3450-3458	parallel	
8-114	3459-3468	execution	
8-115	3468-3469	.	
8-116	3470-3479	Snowflake	
8-117	3479-3480	:	
8-118	3481-3485	Fast	
8-119	3486-3494	parallel	
8-120	3495-3502	loading	
8-121	3503-3511	multiple	
8-122	3512-3516	data	
8-123	3517-3522	files	

#Text=Using the above method, Snowflake spreads the load across all servers to maximize throughput and achieves a load rate of around 31 Gb per minute. Furthermore, once the task has completed, the server can auto-suspend, which reduces spend2. Snowflake Transformation PerformanceLatency Vs. ThroughputWhile tuning the SQL is often a very effective way to reduce the elapsed time for long running queries, designers often miss an opportunity. As Abraham Maslow said, "If the only tool you have is a hammer, you tend to see every problem as a nail".In addition to reducing the latency (I.E. maximising performance) of individual queries, it’s also important to maximize throughput – to achieve the greatest amount of work in the shortest possible time. Of course, it depends upon "the problem you're trying to solve". As I have indicated before, by increasing virtual warehouse size, it is possible to reduce elapsed time from seven hours to just four minutes. But that's not the solution for every use-case.The diagram below illustrates a typical data transformation pattern that involves executing a sequence of batch tasks on a given virtual warehouse. As each task completes, the next task is started: Snowflake: Serial processing
9-1	3523-3528	Using	
9-2	3529-3532	the	
9-3	3533-3538	above	
9-4	3539-3545	method	
9-5	3545-3546	,	
9-6	3547-3556	Snowflake	
9-7	3557-3564	spreads	
9-8	3565-3568	the	
9-9	3569-3573	load	
9-10	3574-3580	across	
9-11	3581-3584	all	
9-12	3585-3592	servers	
9-13	3593-3595	to	
9-14	3596-3604	maximize	
9-15	3605-3615	throughput	
9-16	3616-3619	and	
9-17	3620-3628	achieves	
9-18	3629-3630	a	
9-19	3631-3635	load	
9-20	3636-3640	rate	
9-21	3641-3643	of	
9-22	3644-3650	around	
9-23	3651-3653	31	
9-24	3654-3656	Gb	
9-25	3657-3660	per	
9-26	3661-3667	minute	
9-27	3667-3668	.	
9-28	3669-3680	Furthermore	
9-29	3680-3681	,	
9-30	3682-3686	once	
9-31	3687-3690	the	
9-32	3691-3695	task	
9-33	3696-3699	has	
9-34	3700-3709	completed	
9-35	3709-3710	,	
9-36	3711-3714	the	
9-37	3715-3721	server	
9-38	3722-3725	can	
9-39	3726-3738	auto-suspend	
9-40	3738-3739	,	
9-41	3740-3745	which	
9-42	3746-3753	reduces	
9-43	3754-3760	spend2	
9-44	3760-3761	.	
9-45	3762-3771	Snowflake	
9-46	3772-3786	Transformation	
9-47	3787-3805	PerformanceLatency	
9-48	3806-3808	Vs	
9-49	3808-3809	.	
9-50	3810-3825	ThroughputWhile	
9-51	3826-3832	tuning	
9-52	3833-3836	the	
9-53	3837-3840	SQL	
9-54	3841-3843	is	
9-55	3844-3849	often	
9-56	3850-3851	a	
9-57	3852-3856	very	
9-58	3857-3866	effective	
9-59	3867-3870	way	
9-60	3871-3873	to	
9-61	3874-3880	reduce	
9-62	3881-3884	the	
9-63	3885-3892	elapsed	
9-64	3893-3897	time	
9-65	3898-3901	for	
9-66	3902-3906	long	
9-67	3907-3914	running	
9-68	3915-3922	queries	
9-69	3922-3923	,	
9-70	3924-3933	designers	
9-71	3934-3939	often	
9-72	3940-3944	miss	
9-73	3945-3947	an	
9-74	3948-3959	opportunity	
9-75	3959-3960	.	
9-76	3961-3963	As	
9-77	3963-3964	 	
9-78	3964-3971	Abraham	
9-79	3972-3978	Maslow	
9-80	3979-3983	said	
9-81	3983-3984	,	
9-82	3984-3985	 	
9-83	3985-3986	"	
9-84	3986-3988	If	
9-85	3989-3992	the	
9-86	3993-3997	only	
9-87	3998-4002	tool	
9-88	4003-4006	you	
9-89	4007-4011	have	
9-90	4012-4014	is	
9-91	4015-4016	a	
9-92	4017-4023	hammer	
9-93	4023-4024	,	
9-94	4025-4028	you	
9-95	4029-4033	tend	
9-96	4034-4036	to	
9-97	4037-4040	see	
9-98	4041-4046	every	
9-99	4047-4054	problem	
9-100	4055-4057	as	
9-101	4058-4059	a	
9-102	4060-4064	nail	
9-103	4064-4065	"	
9-104	4065-4066	.	
9-105	4066-4068	In	
9-106	4069-4077	addition	
9-107	4078-4080	to	
9-108	4081-4089	reducing	
9-109	4090-4093	the	
9-110	4094-4101	latency	
9-111	4102-4103	(	
9-112	4103-4106	I.E	
9-113	4106-4107	.	
9-114	4108-4118	maximising	
9-115	4119-4130	performance	
9-116	4130-4131	)	
9-117	4132-4134	of	
9-118	4135-4145	individual	
9-119	4146-4153	queries	
9-120	4153-4154	,	
9-121	4155-4157	it	
9-122	4157-4158	’	
9-123	4158-4159	s	
9-124	4160-4164	also	
9-125	4165-4174	important	
9-126	4175-4177	to	
9-127	4178-4186	maximize	
9-128	4186-4187	 	
9-129	4187-4197	throughput	
9-130	4197-4198	 	
9-131	4198-4199	–	
9-132	4200-4202	to	
9-133	4203-4210	achieve	
9-134	4211-4214	the	
9-135	4215-4223	greatest	
9-136	4224-4230	amount	
9-137	4231-4233	of	
9-138	4234-4238	work	
9-139	4239-4241	in	
9-140	4242-4245	the	
9-141	4246-4254	shortest	
9-142	4255-4263	possible	
9-143	4264-4268	time	
9-144	4268-4269	.	
9-145	4270-4272	Of	
9-146	4273-4279	course	
9-147	4279-4280	,	
9-148	4281-4283	it	
9-149	4284-4291	depends	
9-150	4292-4296	upon	
9-151	4297-4298	"	
9-152	4298-4301	the	
9-153	4302-4309	problem	
9-154	4310-4316	you're	
9-155	4317-4323	trying	
9-156	4324-4326	to	
9-157	4327-4332	solve	
9-158	4332-4333	"	
9-159	4333-4334	.	
9-160	4334-4335	 	
9-161	4335-4337	As	
9-162	4338-4339	I	
9-163	4340-4344	have	
9-164	4345-4354	indicated	
9-165	4355-4361	before	
9-166	4361-4362	,	
9-167	4363-4365	by	
9-168	4365-4366	 	
9-169	4366-4376	increasing	
9-170	4377-4384	virtual	
9-171	4385-4394	warehouse	
9-172	4395-4399	size	
9-173	4399-4400	,	
9-174	4401-4403	it	
9-175	4404-4406	is	
9-176	4407-4415	possible	
9-177	4416-4418	to	
9-178	4419-4425	reduce	
9-179	4426-4433	elapsed	
9-180	4434-4438	time	
9-181	4439-4443	from	
9-182	4443-4444	 	
9-183	4444-4449	seven	
9-184	4450-4455	hours	
9-185	4456-4458	to	
9-186	4459-4463	just	
9-187	4464-4468	four	
9-188	4469-4476	minutes	
9-189	4476-4477	.	
9-190	4478-4481	But	
9-191	4482-4488	that's	
9-192	4489-4492	not	
9-193	4493-4496	the	
9-194	4497-4505	solution	
9-195	4506-4509	for	
9-196	4510-4515	every	
9-197	4516-4528	use-case.The	
9-198	4529-4536	diagram	
9-199	4537-4542	below	
9-200	4543-4554	illustrates	
9-201	4555-4556	a	
9-202	4557-4564	typical	
9-203	4565-4569	data	
9-204	4570-4584	transformation	
9-205	4585-4592	pattern	
9-206	4593-4597	that	
9-207	4598-4606	involves	
9-208	4607-4616	executing	
9-209	4617-4618	a	
9-210	4619-4627	sequence	
9-211	4628-4630	of	
9-212	4631-4636	batch	
9-213	4637-4642	tasks	
9-214	4643-4645	on	
9-215	4646-4647	a	
9-216	4648-4653	given	
9-217	4654-4661	virtual	
9-218	4662-4671	warehouse	
9-219	4671-4672	.	
9-220	4673-4675	As	
9-221	4676-4680	each	
9-222	4681-4685	task	
9-223	4686-4695	completes	
9-224	4695-4696	,	
9-225	4697-4700	the	
9-226	4701-4705	next	
9-227	4706-4710	task	
9-228	4711-4713	is	
9-229	4714-4721	started	
9-230	4721-4722	:	
9-231	4723-4732	Snowflake	
9-232	4732-4733	:	
9-233	4734-4740	Serial	
9-234	4741-4751	processing	

#Text=One solution to improve throughput is to scale up to a bigger virtual warehouse to complete the work faster, but even this technique will eventually reach a limit (I'll explain why in another article).Furthermore, while it might improve query performance, there's also a greater chance of inefficient use of resources on a larger warehouse. Let's face it, if you're running an X-SMALL warehouse at 60% of its capacity you are wasting 40% of the machine resources. If however you're running a monster X4-LARGE warehouse at 60% capacity, you are wasting around 128 times the resources. Snowflake: Parallel scale-out processing
10-1	4752-4755	One	
10-2	4756-4764	solution	
10-3	4765-4767	to	
10-4	4768-4775	improve	
10-5	4775-4776	 	
10-6	4776-4786	throughput	
10-7	4786-4787	 	
10-8	4787-4789	is	
10-9	4790-4792	to	
10-10	4793-4798	scale	
10-11	4799-4801	up	
10-12	4802-4804	to	
10-13	4805-4806	a	
10-14	4807-4813	bigger	
10-15	4814-4821	virtual	
10-16	4822-4831	warehouse	
10-17	4832-4834	to	
10-18	4835-4843	complete	
10-19	4844-4847	the	
10-20	4848-4852	work	
10-21	4853-4859	faster	
10-22	4859-4860	,	
10-23	4861-4864	but	
10-24	4865-4869	even	
10-25	4870-4874	this	
10-26	4875-4884	technique	
10-27	4885-4889	will	
10-28	4890-4900	eventually	
10-29	4901-4906	reach	
10-30	4907-4908	a	
10-31	4909-4914	limit	
10-32	4915-4916	(	
10-33	4916-4920	I'll	
10-34	4921-4928	explain	
10-35	4929-4932	why	
10-36	4933-4935	in	
10-37	4936-4943	another	
10-38	4944-4951	article	
10-39	4951-4952	)	
10-40	4952-4953	.	
10-41	4953-4964	Furthermore	
10-42	4964-4965	,	
10-43	4966-4971	while	
10-44	4972-4974	it	
10-45	4974-4975	 	
10-46	4975-4980	might	
10-47	4980-4981	 	
10-48	4981-4988	improve	
10-49	4989-4994	query	
10-50	4995-5006	performance	
10-51	5006-5007	,	
10-52	5008-5015	there's	
10-53	5016-5020	also	
10-54	5021-5022	a	
10-55	5023-5030	greater	
10-56	5031-5037	chance	
10-57	5038-5040	of	
10-58	5041-5052	inefficient	
10-59	5053-5056	use	
10-60	5057-5059	of	
10-61	5060-5069	resources	
10-62	5070-5072	on	
10-63	5073-5074	a	
10-64	5075-5081	larger	
10-65	5082-5091	warehouse	
10-66	5091-5092	.	
10-67	5093-5098	Let's	
10-68	5099-5103	face	
10-69	5104-5106	it	
10-70	5106-5107	,	
10-71	5108-5110	if	
10-72	5111-5117	you're	
10-73	5118-5125	running	
10-74	5126-5128	an	
10-75	5129-5136	X-SMALL	
10-76	5137-5146	warehouse	
10-77	5147-5149	at	
10-78	5150-5153	60%	
10-79	5154-5156	of	
10-80	5157-5160	its	
10-81	5161-5169	capacity	
10-82	5170-5173	you	
10-83	5174-5177	are	
10-84	5178-5185	wasting	
10-85	5186-5189	40%	
10-86	5190-5192	of	
10-87	5193-5196	the	
10-88	5197-5204	machine	
10-89	5205-5214	resources	
10-90	5214-5215	.	
10-91	5216-5218	If	
10-92	5219-5226	however	
10-93	5227-5233	you're	
10-94	5234-5241	running	
10-95	5242-5243	a	
10-96	5244-5251	monster	
10-97	5252-5254	X4	
10-98	5254-5255	-	
10-99	5255-5260	LARGE	
10-100	5261-5270	warehouse	
10-101	5271-5273	at	
10-102	5274-5277	60%	
10-103	5278-5286	capacity	
10-104	5286-5287	,	
10-105	5288-5291	you	
10-106	5292-5295	are	
10-107	5296-5303	wasting	
10-108	5304-5310	around	
10-109	5311-5314	128	
10-110	5315-5320	times	
10-111	5321-5324	the	
10-112	5325-5334	resources	
10-113	5334-5335	.	
10-114	5336-5345	Snowflake	
10-115	5345-5346	:	
10-116	5347-5355	Parallel	
10-117	5356-5365	scale-out	
10-118	5366-5376	processing	

#Text=In the above example, Apache Airflow is used to execute multiple parallel tasks (each with a different connection to Snowflake), and each task uses the same virtual warehouse. As the workload increases, jobs begin to queue as there are insufficient resources available. However, the Snowflake multi-cluster feature can be configured to automatically create another same-size virtual warehouse, and this continues to take up the load.As tasks complete, the above solution automatically scales back down to a single cluster, and once the last task finishes, the last running cluster will suspend. This is by far the most efficient method of completing batch parallel tasks, and we still have the option of scaling up.The SQL snippet below illustrates the command needed to create a multi-cluster warehouse, which will automatically suspend after 60 seconds idle time, but use the ECONOMY scaling policy to favour throughput and saving credits over individual query latency.-- Create a multi-cluster warehouse for batch processing create or replace warehouse batch_vwh with warehouse_size = SMALL min_cluster_count = 1 max_cluster_count = 10 scaling_policy = economy auto_suspend
11-1	5377-5379	In	
11-2	5380-5383	the	
11-3	5384-5389	above	
11-4	5390-5397	example	
11-5	5397-5398	,	
11-6	5398-5399	 	
11-7	5399-5405	Apache	
11-8	5406-5413	Airflow	
11-9	5413-5414	 	
11-10	5414-5416	is	
11-11	5417-5421	used	
11-12	5422-5424	to	
11-13	5425-5432	execute	
11-14	5432-5433	 	
11-15	5433-5441	multiple	
11-16	5442-5450	parallel	
11-17	5451-5456	tasks	
11-18	5456-5457	 	
11-19	5457-5458	(	
11-20	5458-5462	each	
11-21	5463-5467	with	
11-22	5468-5469	a	
11-23	5470-5479	different	
11-24	5480-5490	connection	
11-25	5491-5493	to	
11-26	5494-5503	Snowflake	
11-27	5503-5504	)	
11-28	5504-5505	,	
11-29	5506-5509	and	
11-30	5510-5514	each	
11-31	5515-5519	task	
11-32	5520-5524	uses	
11-33	5525-5528	the	
11-34	5529-5533	same	
11-35	5534-5541	virtual	
11-36	5542-5551	warehouse	
11-37	5551-5552	.	
11-38	5553-5555	As	
11-39	5556-5559	the	
11-40	5560-5568	workload	
11-41	5569-5578	increases	
11-42	5578-5579	,	
11-43	5580-5584	jobs	
11-44	5585-5590	begin	
11-45	5591-5593	to	
11-46	5594-5599	queue	
11-47	5600-5602	as	
11-48	5603-5608	there	
11-49	5609-5612	are	
11-50	5613-5625	insufficient	
11-51	5626-5635	resources	
11-52	5636-5645	available	
11-53	5645-5646	.	
11-54	5647-5654	However	
11-55	5654-5655	,	
11-56	5656-5659	the	
11-57	5659-5660	 	
11-58	5660-5669	Snowflake	
11-59	5670-5683	multi-cluster	
11-60	5684-5691	feature	
11-61	5691-5692	 	
11-62	5692-5695	can	
11-63	5696-5698	be	
11-64	5699-5709	configured	
11-65	5710-5712	to	
11-66	5713-5726	automatically	
11-67	5727-5733	create	
11-68	5734-5741	another	
11-69	5742-5751	same-size	
11-70	5752-5759	virtual	
11-71	5760-5769	warehouse	
11-72	5769-5770	,	
11-73	5771-5774	and	
11-74	5775-5779	this	
11-75	5780-5789	continues	
11-76	5790-5792	to	
11-77	5793-5797	take	
11-78	5798-5800	up	
11-79	5801-5804	the	
11-80	5805-5812	load.As	
11-81	5813-5818	tasks	
11-82	5819-5827	complete	
11-83	5827-5828	,	
11-84	5829-5832	the	
11-85	5833-5838	above	
11-86	5839-5847	solution	
11-87	5848-5861	automatically	
11-88	5862-5868	scales	
11-89	5869-5873	back	
11-90	5874-5878	down	
11-91	5879-5881	to	
11-92	5882-5883	a	
11-93	5884-5890	single	
11-94	5891-5898	cluster	
11-95	5898-5899	,	
11-96	5900-5903	and	
11-97	5904-5908	once	
11-98	5909-5912	the	
11-99	5913-5917	last	
11-100	5918-5922	task	
11-101	5923-5931	finishes	
11-102	5931-5932	,	
11-103	5933-5936	the	
11-104	5937-5941	last	
11-105	5942-5949	running	
11-106	5950-5957	cluster	
11-107	5958-5962	will	
11-108	5963-5970	suspend	
11-109	5970-5971	.	
11-110	5972-5976	This	
11-111	5977-5979	is	
11-112	5980-5982	by	
11-113	5983-5986	far	
11-114	5987-5990	the	
11-115	5991-5995	most	
11-116	5996-6005	efficient	
11-117	6006-6012	method	
11-118	6013-6015	of	
11-119	6016-6026	completing	
11-120	6027-6032	batch	
11-121	6033-6041	parallel	
11-122	6042-6047	tasks	
11-123	6047-6048	,	
11-124	6049-6052	and	
11-125	6053-6055	we	
11-126	6056-6061	still	
11-127	6062-6066	have	
11-128	6067-6070	the	
11-129	6071-6077	option	
11-130	6078-6080	of	
11-131	6081-6088	scaling	
11-132	6089-6095	up.The	
11-133	6096-6099	SQL	
11-134	6100-6107	snippet	
11-135	6108-6113	below	
11-136	6114-6125	illustrates	
11-137	6126-6129	the	
11-138	6130-6137	command	
11-139	6138-6144	needed	
11-140	6145-6147	to	
11-141	6147-6148	 	
11-142	6148-6154	create	
11-143	6155-6156	a	
11-144	6157-6170	multi-cluster	
11-145	6171-6180	warehouse	
11-146	6180-6181	,	
11-147	6181-6182	 	
11-148	6182-6187	which	
11-149	6188-6192	will	
11-150	6193-6206	automatically	
11-151	6207-6214	suspend	
11-152	6215-6220	after	
11-153	6221-6223	60	
11-154	6224-6231	seconds	
11-155	6232-6236	idle	
11-156	6237-6241	time	
11-157	6241-6242	,	
11-158	6243-6246	but	
11-159	6247-6250	use	
11-160	6251-6254	the	
11-161	6255-6262	ECONOMY	
11-162	6263-6270	scaling	
11-163	6271-6277	policy	
11-164	6278-6280	to	
11-165	6281-6287	favour	
11-166	6288-6298	throughput	
11-167	6299-6302	and	
11-168	6303-6309	saving	
11-169	6310-6317	credits	
11-170	6318-6322	over	
11-171	6323-6333	individual	
11-172	6334-6339	query	
11-173	6340-6347	latency	
11-174	6347-6348	.	
11-175	6348-6349	-	
11-176	6349-6350	-	
11-177	6351-6357	Create	
11-178	6358-6359	a	
11-179	6360-6373	multi-cluster	
11-180	6374-6383	warehouse	
11-181	6384-6387	for	
11-182	6388-6393	batch	
11-183	6394-6404	processing	
11-184	6405-6411	create	
11-185	6412-6414	or	
11-186	6415-6422	replace	
11-187	6423-6432	warehouse	
11-188	6433-6442	batch_vwh	
11-189	6443-6447	with	
11-190	6448-6462	warehouse_size	
11-191	6463-6464	=	
11-192	6465-6470	SMALL	
11-193	6471-6488	min_cluster_count	
11-194	6489-6490	=	
11-195	6491-6492	1	
11-196	6493-6510	max_cluster_count	
11-197	6511-6512	=	
11-198	6513-6515	10	
11-199	6516-6530	scaling_policy	
11-200	6531-6532	=	
11-201	6533-6540	economy	
11-202	6541-6553	auto_suspend	

#Text== 60 initially_suspended = true;
12-1	6554-6555	=	
12-2	6556-6558	60	
12-3	6559-6578	initially_suspended	
12-4	6579-6580	=	
12-5	6581-6585	true	
12-6	6585-6586	;	

#Text=3. Tuning Snowflake Query PerformanceSelect Only Required ColumnsLike many other data analytic platforms, Snowflake uses a columnar data store. As Turning Medal award winnerProfessor Michael Stonebraker indicates, in a seminal YouTube lecture on databases, "....a column store is over a hundred times faster than than a row-store". He demonstrated this fact with the C-Store Database which he demonstrated was 164 times faster than a commercially available database. For the record, Oracle, Exadata, SQLServer and PostgreSQL are all row store databases, designed for OLTP systems.One feature of column-store databases, is they achieve the remarkable performance gains by physically organising the data in columns rather than rows. Storing data in columns makes it much more efficient to retrieve a small sub-set of columns from the entire table. Snowflake: Column optimised database storage
13-1	6587-6588	3	
13-2	6588-6589	.	
13-3	6590-6596	Tuning	
13-4	6597-6606	Snowflake	
13-5	6607-6612	Query	
13-6	6613-6630	PerformanceSelect	
13-7	6631-6635	Only	
13-8	6636-6644	Required	
13-9	6645-6656	ColumnsLike	
13-10	6657-6661	many	
13-11	6662-6667	other	
13-12	6668-6672	data	
13-13	6673-6681	analytic	
13-14	6682-6691	platforms	
13-15	6691-6692	,	
13-16	6693-6702	Snowflake	
13-17	6703-6707	uses	
13-18	6708-6709	a	
13-19	6709-6710	 	
13-20	6710-6718	columnar	
13-21	6719-6723	data	
13-22	6724-6729	store	
13-23	6729-6730	.	
13-24	6731-6733	As	
13-25	6733-6734	 	
13-26	6734-6741	Turning	
13-27	6742-6747	Medal	
13-28	6748-6753	award	
13-29	6754-6769	winnerProfessor	
13-30	6770-6777	Michael	
13-31	6778-6789	Stonebraker	
13-32	6790-6799	indicates	
13-33	6799-6800	,	
13-34	6801-6803	in	
13-35	6804-6805	a	
13-36	6806-6813	seminal	
13-37	6814-6821	YouTube	
13-38	6822-6829	lecture	
13-39	6830-6832	on	
13-40	6833-6842	databases	
13-41	6842-6843	,	
13-42	6843-6844	 	
13-43	6844-6845	"	
13-44	6845-6846	.	
13-45	6846-6847	.	
13-46	6847-6848	.	
13-47	6848-6849	.	
13-48	6849-6850	a	
13-49	6851-6857	column	
13-50	6858-6863	store	
13-51	6864-6866	is	
13-52	6867-6871	over	
13-53	6872-6873	a	
13-54	6874-6881	hundred	
13-55	6882-6887	times	
13-56	6888-6894	faster	
13-57	6895-6899	than	
13-58	6900-6904	than	
13-59	6905-6906	a	
13-60	6907-6916	row-store	
13-61	6916-6917	"	
13-62	6917-6918	.	
13-63	6919-6921	He	
13-64	6922-6934	demonstrated	
13-65	6935-6939	this	
13-66	6940-6944	fact	
13-67	6945-6949	with	
13-68	6950-6953	the	
13-69	6953-6954	 	
13-70	6954-6961	C-Store	
13-71	6962-6970	Database	
13-72	6970-6971	 	
13-73	6971-6976	which	
13-74	6977-6979	he	
13-75	6980-6992	demonstrated	
13-76	6993-6996	was	
13-77	6997-7000	164	
13-78	7001-7006	times	
13-79	7007-7013	faster	
13-80	7014-7018	than	
13-81	7019-7020	a	
13-82	7020-7021	 	
13-83	7021-7033	commercially	
13-84	7034-7043	available	
13-85	7043-7044	 	
13-86	7044-7052	database	
13-87	7052-7053	.	
13-88	7054-7057	For	
13-89	7058-7061	the	
13-90	7062-7068	record	
13-91	7068-7069	,	
13-92	7070-7076	Oracle	
13-93	7076-7077	,	
13-94	7078-7085	Exadata	
13-95	7085-7086	,	
13-96	7087-7096	SQLServer	
13-97	7097-7100	and	
13-98	7101-7111	PostgreSQL	
13-99	7112-7115	are	
13-100	7116-7119	all	
13-101	7120-7123	row	
13-102	7124-7129	store	
13-103	7130-7139	databases	
13-104	7139-7140	,	
13-105	7141-7149	designed	
13-106	7150-7153	for	
13-107	7154-7158	OLTP	
13-108	7159-7170	systems.One	
13-109	7171-7178	feature	
13-110	7179-7181	of	
13-111	7182-7194	column-store	
13-112	7195-7204	databases	
13-113	7204-7205	,	
13-114	7206-7208	is	
13-115	7209-7213	they	
13-116	7214-7221	achieve	
13-117	7222-7225	the	
13-118	7226-7236	remarkable	
13-119	7237-7248	performance	
13-120	7249-7254	gains	
13-121	7255-7257	by	
13-122	7258-7268	physically	
13-123	7269-7279	organising	
13-124	7280-7283	the	
13-125	7284-7288	data	
13-126	7289-7291	in	
13-127	7291-7292	 	
13-128	7292-7299	columns	
13-129	7299-7300	 	
13-130	7300-7306	rather	
13-131	7307-7311	than	
13-132	7311-7312	 	
13-133	7312-7316	rows	
13-134	7316-7317	.	
13-135	7318-7325	Storing	
13-136	7326-7330	data	
13-137	7331-7333	in	
13-138	7334-7341	columns	
13-139	7342-7347	makes	
13-140	7348-7350	it	
13-141	7351-7355	much	
13-142	7356-7360	more	
13-143	7361-7370	efficient	
13-144	7371-7373	to	
13-145	7374-7382	retrieve	
13-146	7383-7384	a	
13-147	7385-7390	small	
13-148	7391-7398	sub-set	
13-149	7399-7401	of	
13-150	7402-7409	columns	
13-151	7410-7414	from	
13-152	7415-7418	the	
13-153	7419-7425	entire	
13-154	7426-7431	table	
13-155	7431-7432	.	
13-156	7433-7442	Snowflake	
13-157	7442-7443	:	
13-158	7444-7450	Column	
13-159	7451-7460	optimised	
13-160	7461-7469	database	
13-161	7470-7477	storage	

#Text=In the above diagram, the query fetches just two columns, and on a table with 100 columns, this will be 98% faster than a traditional row-store, which needs to read all the data from disk.This leads to a simple best practice (in production systems). Avoid selecting all the columns from a table or view using a select * from. While it's OK for ad-hoc queries, you'll find it much faster to indicate the specific columns you need.Maximize Cache UsageThe diagram below illustrates a vital component of the Snowflake internal architecture that it caches data in both the virtual warehouse and the cloud services layer. As I have indicated before, taking steps to maximise cache usage is a simple method to improve overall query performance on Snowflake. Snowflake: Cache Layers
14-1	7478-7480	In	
14-2	7481-7484	the	
14-3	7485-7490	above	
14-4	7491-7498	diagram	
14-5	7498-7499	,	
14-6	7500-7503	the	
14-7	7504-7509	query	
14-8	7510-7517	fetches	
14-9	7518-7522	just	
14-10	7523-7526	two	
14-11	7527-7534	columns	
14-12	7534-7535	,	
14-13	7536-7539	and	
14-14	7540-7542	on	
14-15	7543-7544	a	
14-16	7545-7550	table	
14-17	7551-7555	with	
14-18	7556-7559	100	
14-19	7560-7567	columns	
14-20	7567-7568	,	
14-21	7569-7573	this	
14-22	7574-7578	will	
14-23	7579-7581	be	
14-24	7582-7585	98%	
14-25	7586-7592	faster	
14-26	7593-7597	than	
14-27	7598-7599	a	
14-28	7600-7611	traditional	
14-29	7612-7621	row-store	
14-30	7621-7622	,	
14-31	7623-7628	which	
14-32	7629-7634	needs	
14-33	7635-7637	to	
14-34	7638-7642	read	
14-35	7643-7646	all	
14-36	7647-7650	the	
14-37	7651-7655	data	
14-38	7656-7660	from	
14-39	7661-7670	disk.This	
14-40	7671-7676	leads	
14-41	7677-7679	to	
14-42	7680-7681	a	
14-43	7682-7688	simple	
14-44	7689-7693	best	
14-45	7694-7702	practice	
14-46	7703-7704	(	
14-47	7704-7706	in	
14-48	7707-7717	production	
14-49	7718-7725	systems	
14-50	7725-7726	)	
14-51	7726-7727	.	
14-52	7728-7733	Avoid	
14-53	7734-7743	selecting	
14-54	7744-7747	all	
14-55	7748-7751	the	
14-56	7752-7759	columns	
14-57	7760-7764	from	
14-58	7765-7766	a	
14-59	7767-7772	table	
14-60	7773-7775	or	
14-61	7776-7780	view	
14-62	7781-7786	using	
14-63	7787-7788	a	
14-64	7788-7789	 	
14-65	7789-7795	select	
14-66	7796-7797	*	
14-67	7798-7802	from	
14-68	7802-7803	.	
14-69	7803-7804	 	
14-70	7804-7809	While	
14-71	7810-7814	it's	
14-72	7815-7817	OK	
14-73	7818-7821	for	
14-74	7822-7828	ad-hoc	
14-75	7829-7836	queries	
14-76	7836-7837	,	
14-77	7838-7844	you'll	
14-78	7845-7849	find	
14-79	7850-7852	it	
14-80	7853-7857	much	
14-81	7858-7864	faster	
14-82	7865-7867	to	
14-83	7868-7876	indicate	
14-84	7877-7880	the	
14-85	7881-7889	specific	
14-86	7890-7897	columns	
14-87	7898-7901	you	
14-88	7902-7915	need.Maximize	
14-89	7916-7921	Cache	
14-90	7922-7930	UsageThe	
14-91	7931-7938	diagram	
14-92	7939-7944	below	
14-93	7945-7956	illustrates	
14-94	7957-7958	a	
14-95	7959-7964	vital	
14-96	7965-7974	component	
14-97	7975-7977	of	
14-98	7978-7981	the	
14-99	7982-7991	Snowflake	
14-100	7992-8000	internal	
14-101	8001-8013	architecture	
14-102	8014-8018	that	
14-103	8019-8021	it	
14-104	8022-8028	caches	
14-105	8029-8033	data	
14-106	8034-8036	in	
14-107	8037-8041	both	
14-108	8042-8045	the	
14-109	8046-8053	virtual	
14-110	8054-8063	warehouse	
14-111	8064-8067	and	
14-112	8068-8071	the	
14-113	8072-8077	cloud	
14-114	8078-8086	services	
14-115	8087-8092	layer	
14-116	8092-8093	.	
14-117	8094-8096	As	
14-118	8097-8098	I	
14-119	8099-8103	have	
14-120	8104-8113	indicated	
14-121	8114-8120	before	
14-122	8120-8121	,	
14-123	8122-8128	taking	
14-124	8129-8134	steps	
14-125	8135-8137	to	
14-126	8137-8138	 	
14-127	8138-8146	maximise	
14-128	8147-8152	cache	
14-129	8153-8158	usage	
14-130	8158-8159	 	
14-131	8159-8161	is	
14-132	8162-8163	a	
14-133	8164-8170	simple	
14-134	8171-8177	method	
14-135	8178-8180	to	
14-136	8181-8188	improve	
14-137	8189-8196	overall	
14-138	8197-8202	query	
14-139	8203-8214	performance	
14-140	8215-8217	on	
14-141	8218-8227	Snowflake	
14-142	8227-8228	.	
14-143	8229-8238	Snowflake	
14-144	8238-8239	:	
14-145	8240-8245	Cache	
14-146	8246-8252	Layers	

#Text=Business intelligence dashboards frequently re-execute the same query to refresh the screen showing changed values. Snowflake automatically optimizes these queries by returning results from the Results Cache with results available for 24 hours after each query execution.Data is also cached within the virtual warehouse on fast SSD, but unlike the Results Cache, the virtual warehouse holds raw data which is aged out on a least recently used basis. While it’s not possible to directly adjust the virtual warehouse cache, it is possible to optimize usage with the following steps:Fetch required attributes:  Avoid using SELECT * in queries as this fetches all data attributes from Database Storage to the Warehouse Cache.  Not only is this slow, but it potentially fills the warehouse cache with data that is not needed.Scale Up:  While you should never scale up to tune a specific query, it may be sensible to resize the warehouse to improve overall query performance.  As scaling up adds additional servers, it spreads the workload and effectively increases the overall warehouse cache size.Consider Data Clustering:  For tables over a terabyte in size, consider creating a cluster key to maximize partition elimination.  This solution both maximizes query performance for individual queries and returns fewer micro-partitions making the best use of the Warehouse Cache.-- Identify slow performing SQL statements select query_id as query_id round(bytes_scanned/1024/1024) as mb_scanned total_elapsed_time / 1000 as elapsed_seconds (partitions_scanned /
15-1	8253-8261	Business	
15-2	8262-8274	intelligence	
15-3	8275-8285	dashboards	
15-4	8286-8296	frequently	
15-5	8297-8307	re-execute	
15-6	8308-8311	the	
15-7	8312-8316	same	
15-8	8317-8322	query	
15-9	8323-8325	to	
15-10	8326-8333	refresh	
15-11	8334-8337	the	
15-12	8338-8344	screen	
15-13	8345-8352	showing	
15-14	8353-8360	changed	
15-15	8361-8367	values	
15-16	8367-8368	.	
15-17	8369-8378	Snowflake	
15-18	8379-8392	automatically	
15-19	8393-8402	optimizes	
15-20	8403-8408	these	
15-21	8409-8416	queries	
15-22	8417-8419	by	
15-23	8420-8429	returning	
15-24	8430-8437	results	
15-25	8438-8442	from	
15-26	8443-8446	the	
15-27	8447-8454	Results	
15-28	8455-8460	Cache	
15-29	8461-8465	with	
15-30	8466-8473	results	
15-31	8474-8483	available	
15-32	8484-8487	for	
15-33	8488-8490	24	
15-34	8491-8496	hours	
15-35	8497-8502	after	
15-36	8503-8507	each	
15-37	8508-8513	query	
15-38	8514-8528	execution.Data	
15-39	8529-8531	is	
15-40	8532-8536	also	
15-41	8537-8543	cached	
15-42	8544-8550	within	
15-43	8551-8554	the	
15-44	8555-8562	virtual	
15-45	8563-8572	warehouse	
15-46	8573-8575	on	
15-47	8576-8580	fast	
15-48	8581-8584	SSD	
15-49	8584-8585	,	
15-50	8586-8589	but	
15-51	8590-8596	unlike	
15-52	8597-8600	the	
15-53	8601-8608	Results	
15-54	8609-8614	Cache	
15-55	8614-8615	,	
15-56	8616-8619	the	
15-57	8620-8627	virtual	
15-58	8628-8637	warehouse	
15-59	8638-8643	holds	
15-60	8644-8647	raw	
15-61	8648-8652	data	
15-62	8653-8658	which	
15-63	8659-8661	is	
15-64	8662-8666	aged	
15-65	8667-8670	out	
15-66	8671-8673	on	
15-67	8674-8675	a	
15-68	8676-8681	least	
15-69	8682-8690	recently	
15-70	8691-8695	used	
15-71	8696-8701	basis	
15-72	8701-8702	.	
15-73	8703-8708	While	
15-74	8709-8711	it	
15-75	8711-8712	’	
15-76	8712-8713	s	
15-77	8714-8717	not	
15-78	8718-8726	possible	
15-79	8727-8729	to	
15-80	8730-8738	directly	
15-81	8739-8745	adjust	
15-82	8746-8749	the	
15-83	8750-8757	virtual	
15-84	8758-8767	warehouse	
15-85	8768-8773	cache	
15-86	8773-8774	,	
15-87	8775-8777	it	
15-88	8778-8780	is	
15-89	8781-8789	possible	
15-90	8790-8792	to	
15-91	8793-8801	optimize	
15-92	8802-8807	usage	
15-93	8808-8812	with	
15-94	8813-8816	the	
15-95	8817-8826	following	
15-96	8827-8832	steps	
15-97	8832-8833	:	
15-98	8833-8838	Fetch	
15-99	8839-8847	required	
15-100	8848-8858	attributes	
15-101	8858-8859	:	
15-102	8859-8861	  	
15-103	8861-8866	Avoid	
15-104	8867-8872	using	
15-105	8873-8879	SELECT	
15-106	8880-8881	*	
15-107	8882-8884	in	
15-108	8885-8892	queries	
15-109	8893-8895	as	
15-110	8896-8900	this	
15-111	8901-8908	fetches	
15-112	8909-8912	all	
15-113	8913-8917	data	
15-114	8918-8928	attributes	
15-115	8929-8933	from	
15-116	8934-8942	Database	
15-117	8943-8950	Storage	
15-118	8951-8953	to	
15-119	8954-8957	the	
15-120	8958-8967	Warehouse	
15-121	8968-8973	Cache	
15-122	8973-8974	.	
15-123	8974-8976	  	
15-124	8976-8979	Not	
15-125	8980-8984	only	
15-126	8985-8987	is	
15-127	8988-8992	this	
15-128	8993-8997	slow	
15-129	8997-8998	,	
15-130	8999-9002	but	
15-131	9003-9005	it	
15-132	9006-9017	potentially	
15-133	9018-9023	fills	
15-134	9024-9027	the	
15-135	9028-9037	warehouse	
15-136	9038-9043	cache	
15-137	9044-9048	with	
15-138	9049-9053	data	
15-139	9054-9058	that	
15-140	9059-9061	is	
15-141	9062-9065	not	
15-142	9066-9078	needed.Scale	
15-143	9079-9081	Up	
15-144	9081-9082	:	
15-145	9082-9084	  	
15-146	9084-9089	While	
15-147	9090-9093	you	
15-148	9094-9100	should	
15-149	9101-9106	never	
15-150	9107-9112	scale	
15-151	9113-9115	up	
15-152	9116-9118	to	
15-153	9119-9123	tune	
15-154	9124-9125	a	
15-155	9126-9134	specific	
15-156	9135-9140	query	
15-157	9140-9141	,	
15-158	9142-9144	it	
15-159	9145-9148	may	
15-160	9149-9151	be	
15-161	9152-9160	sensible	
15-162	9161-9163	to	
15-163	9164-9170	resize	
15-164	9171-9174	the	
15-165	9175-9184	warehouse	
15-166	9185-9187	to	
15-167	9188-9195	improve	
15-168	9196-9203	overall	
15-169	9204-9209	query	
15-170	9210-9221	performance	
15-171	9221-9222	.	
15-172	9222-9224	  	
15-173	9224-9226	As	
15-174	9227-9234	scaling	
15-175	9235-9237	up	
15-176	9238-9242	adds	
15-177	9243-9253	additional	
15-178	9254-9261	servers	
15-179	9261-9262	,	
15-180	9263-9265	it	
15-181	9266-9273	spreads	
15-182	9274-9277	the	
15-183	9278-9286	workload	
15-184	9287-9290	and	
15-185	9291-9302	effectively	
15-186	9303-9312	increases	
15-187	9313-9316	the	
15-188	9317-9324	overall	
15-189	9325-9334	warehouse	
15-190	9335-9340	cache	
15-191	9341-9354	size.Consider	
15-192	9355-9359	Data	
15-193	9360-9370	Clustering	
15-194	9370-9371	:	
15-195	9371-9373	  	
15-196	9373-9376	For	
15-197	9377-9383	tables	
15-198	9384-9388	over	
15-199	9389-9390	a	
15-200	9391-9399	terabyte	
15-201	9400-9402	in	
15-202	9403-9407	size	
15-203	9407-9408	,	
15-204	9409-9417	consider	
15-205	9418-9426	creating	
15-206	9427-9428	a	
15-207	9428-9429	 	
15-208	9429-9436	cluster	
15-209	9437-9440	key	
15-210	9440-9441	 	
15-211	9441-9443	to	
15-212	9444-9452	maximize	
15-213	9453-9462	partition	
15-214	9463-9474	elimination	
15-215	9474-9475	.	
15-216	9475-9477	  	
15-217	9477-9481	This	
15-218	9482-9490	solution	
15-219	9491-9495	both	
15-220	9496-9505	maximizes	
15-221	9506-9511	query	
15-222	9512-9523	performance	
15-223	9524-9527	for	
15-224	9528-9538	individual	
15-225	9539-9546	queries	
15-226	9547-9550	and	
15-227	9551-9558	returns	
15-228	9559-9564	fewer	
15-229	9565-9581	micro-partitions	
15-230	9582-9588	making	
15-231	9589-9592	the	
15-232	9593-9597	best	
15-233	9598-9601	use	
15-234	9602-9604	of	
15-235	9605-9608	the	
15-236	9609-9618	Warehouse	
15-237	9619-9624	Cache	
15-238	9624-9625	.	
15-239	9625-9626	-	
15-240	9626-9627	-	
15-241	9628-9636	Identify	
15-242	9637-9641	slow	
15-243	9642-9652	performing	
15-244	9653-9656	SQL	
15-245	9657-9667	statements	
15-246	9668-9674	select	
15-247	9675-9683	query_id	
15-248	9684-9686	as	
15-249	9687-9695	query_id	
15-250	9696-9701	round	
15-251	9701-9702	(	
15-252	9702-9715	bytes_scanned	
15-253	9715-9716	/	
15-254	9716-9720	1024	
15-255	9720-9721	/	
15-256	9721-9725	1024	
15-257	9725-9726	)	
15-258	9727-9729	as	
15-259	9730-9740	mb_scanned	
15-260	9741-9759	total_elapsed_time	
15-261	9760-9761	/	
15-262	9762-9766	1000	
15-263	9767-9769	as	
15-264	9770-9785	elapsed_seconds	
15-265	9786-9787	(	
15-266	9787-9805	partitions_scanned	
15-267	9806-9807	/	

#Text=nullif(partitions_total,0)) * 100 as pct_table_scan percent_scanned_from_cache * 100 as pct_from cache bytes_spilled_to_local_storage as spill_to_local bytes_spilled_to_remote_storage as spill_to_remote from
16-1	9808-9814	nullif	
16-2	9814-9815	(	
16-3	9815-9831	partitions_total	
16-4	9831-9832	,	
16-5	9832-9833	0	
16-6	9833-9834	)	
16-7	9834-9835	)	
16-8	9836-9837	*	
16-9	9838-9841	100	
16-10	9842-9844	as	
16-11	9845-9859	pct_table_scan	
16-12	9860-9886	percent_scanned_from_cache	
16-13	9887-9888	*	
16-14	9889-9892	100	
16-15	9893-9895	as	
16-16	9896-9904	pct_from	
16-17	9905-9910	cache	
16-18	9911-9941	bytes_spilled_to_local_storage	
16-19	9942-9944	as	
16-20	9945-9959	spill_to_local	
16-21	9960-9991	bytes_spilled_to_remote_storage	
16-22	9992-9994	as	
16-23	9995-10010	spill_to_remote	
16-24	10011-10015	from	

#Text=snowflake.account_usage.query_history where (bytes_spilled_to_local_storage > 1024 * 1024 or bytes_spilled_to_remote_storage > 1024 * 1024 or percentage_scanned_from_cache < 0.1) and elapsed_seconds > 120
17-1	10016-10053	snowflake.account_usage.query_history	
17-2	10054-10059	where	
17-3	10060-10061	(	
17-4	10061-10091	bytes_spilled_to_local_storage	
17-5	10092-10093	>	
17-6	10094-10098	1024	
17-7	10099-10100	*	
17-8	10101-10105	1024	
17-9	10106-10108	or	
17-10	10109-10140	bytes_spilled_to_remote_storage	
17-11	10141-10142	>	
17-12	10143-10147	1024	
17-13	10148-10149	*	
17-14	10150-10154	1024	
17-15	10155-10157	or	
17-16	10158-10187	percentage_scanned_from_cache	
17-17	10188-10189	<	
17-18	10190-10193	0.1	
17-19	10193-10194	)	
17-20	10195-10198	and	
17-21	10199-10214	elapsed_seconds	
17-22	10215-10216	>	
17-23	10217-10220	120	

#Text=and bytes_scanned > 1024 * 1024 order by elapsed_seconds desc;
18-1	10221-10224	and	
18-2	10225-10238	bytes_scanned	
18-3	10239-10240	>	
18-4	10241-10245	1024	
18-5	10246-10247	*	
18-6	10248-10252	1024	
18-7	10253-10258	order	
18-8	10259-10261	by	
18-9	10262-10277	elapsed_seconds	
18-10	10278-10282	desc	
18-11	10282-10283	;	

#Text=The SQL snippet above can help identify potential query performance issues on queries that run for more than 2 minutes and scan over a megabyte of data. In particular, look out for:Table Scans:  A high value of PCT_TABLE_SCAN and a large number of MB_SCANNED indicates potential poor query selectivity on large tables.  Check the query WHERE clause and consider using a cluster key if appropriate.Spilling:  Any value in SPILL_TO_LOCAL or SPILL_TO_REMOTE indicates a potentially large sort of operation on a small virtual warehouse.  Consider moving the query to a bigger warehouse or scaling up the existing warehouse if appropriate.ConclusionA common misconception about Snowflake is the only solution available to improve query performance is to scale up to a bigger warehouse, but this is a potentially poor strategy. In reality, the best approach depends upon the problem area, which is most often in ingestion, transformation, or end-user queries, and often the most effective solutions are based upon a design approach rather than pure query tuning.By all means, consider scaling up to a large warehouse to improve query performance, but first identify and focus on the actual problem. You may find there are more effective and efficient solutions available.Notice Anything Missing?No annoying pop-ups or adverts. No bull, just facts, insights and opinions. Sign up below and I will ping you a mail when new content is available. I will never spam you or abuse your trust. Alternatively, you can leave a comment below.Disclaimer: The opinions expressed on this site are entirely my own, and will not necessarily reflect those of my employer.
19-1	10284-10287	The	
19-2	10288-10291	SQL	
19-3	10292-10299	snippet	
19-4	10300-10305	above	
19-5	10306-10309	can	
19-6	10310-10314	help	
19-7	10315-10323	identify	
19-8	10324-10333	potential	
19-9	10334-10339	query	
19-10	10340-10351	performance	
19-11	10352-10358	issues	
19-12	10359-10361	on	
19-13	10362-10369	queries	
19-14	10370-10374	that	
19-15	10375-10378	run	
19-16	10379-10382	for	
19-17	10383-10387	more	
19-18	10388-10392	than	
19-19	10393-10394	2	
19-20	10395-10402	minutes	
19-21	10403-10406	and	
19-22	10407-10411	scan	
19-23	10412-10416	over	
19-24	10417-10418	a	
19-25	10419-10427	megabyte	
19-26	10428-10430	of	
19-27	10431-10435	data	
19-28	10435-10436	.	
19-29	10437-10439	In	
19-30	10440-10450	particular	
19-31	10450-10451	,	
19-32	10452-10456	look	
19-33	10457-10460	out	
19-34	10461-10464	for	
19-35	10464-10465	:	
19-36	10465-10470	Table	
19-37	10471-10476	Scans	
19-38	10476-10477	:	
19-39	10477-10479	  	
19-40	10479-10480	A	
19-41	10481-10485	high	
19-42	10486-10491	value	
19-43	10492-10494	of	
19-44	10495-10509	PCT_TABLE_SCAN	
19-45	10510-10513	and	
19-46	10514-10515	a	
19-47	10516-10521	large	
19-48	10522-10528	number	
19-49	10529-10531	of	
19-50	10532-10542	MB_SCANNED	
19-51	10543-10552	indicates	
19-52	10553-10562	potential	
19-53	10563-10567	poor	
19-54	10568-10573	query	
19-55	10574-10585	selectivity	
19-56	10586-10588	on	
19-57	10589-10594	large	
19-58	10595-10601	tables	
19-59	10601-10602	.	
19-60	10602-10604	  	
19-61	10604-10609	Check	
19-62	10610-10613	the	
19-63	10614-10619	query	
19-64	10620-10625	WHERE	
19-65	10626-10632	clause	
19-66	10633-10636	and	
19-67	10637-10645	consider	
19-68	10646-10651	using	
19-69	10652-10653	a	
19-70	10654-10661	cluster	
19-71	10662-10665	key	
19-72	10666-10668	if	
19-73	10669-10689	appropriate.Spilling	
19-74	10689-10690	:	
19-75	10690-10692	  	
19-76	10692-10695	Any	
19-77	10696-10701	value	
19-78	10702-10704	in	
19-79	10705-10719	SPILL_TO_LOCAL	
19-80	10720-10722	or	
19-81	10723-10738	SPILL_TO_REMOTE	
19-82	10739-10748	indicates	
19-83	10749-10750	a	
19-84	10751-10762	potentially	
19-85	10763-10768	large	
19-86	10769-10773	sort	
19-87	10774-10776	of	
19-88	10777-10786	operation	
19-89	10787-10789	on	
19-90	10790-10791	a	
19-91	10792-10797	small	
19-92	10798-10805	virtual	
19-93	10806-10815	warehouse	
19-94	10815-10816	.	
19-95	10816-10818	  	
19-96	10818-10826	Consider	
19-97	10827-10833	moving	
19-98	10834-10837	the	
19-99	10838-10843	query	
19-100	10844-10846	to	
19-101	10847-10848	a	
19-102	10849-10855	bigger	
19-103	10856-10865	warehouse	
19-104	10866-10868	or	
19-105	10869-10876	scaling	
19-106	10877-10879	up	
19-107	10880-10883	the	
19-108	10884-10892	existing	
19-109	10893-10902	warehouse	
19-110	10903-10905	if	
19-111	10906-10929	appropriate.ConclusionA	
19-112	10930-10936	common	
19-113	10937-10950	misconception	
19-114	10951-10956	about	
19-115	10957-10966	Snowflake	
19-116	10967-10969	is	
19-117	10970-10973	the	
19-118	10974-10978	only	
19-119	10979-10987	solution	
19-120	10988-10997	available	
19-121	10998-11000	to	
19-122	11001-11008	improve	
19-123	11009-11014	query	
19-124	11015-11026	performance	
19-125	11027-11029	is	
19-126	11030-11032	to	
19-127	11033-11038	scale	
19-128	11039-11041	up	
19-129	11042-11044	to	
19-130	11045-11046	a	
19-131	11047-11053	bigger	
19-132	11054-11063	warehouse	
19-133	11063-11064	,	
19-134	11065-11068	but	
19-135	11069-11073	this	
19-136	11074-11076	is	
19-137	11077-11078	a	
19-138	11079-11090	potentially	
19-139	11091-11095	poor	
19-140	11096-11104	strategy	
19-141	11104-11105	.	
19-142	11106-11108	In	
19-143	11109-11116	reality	
19-144	11116-11117	,	
19-145	11118-11121	the	
19-146	11122-11126	best	
19-147	11127-11135	approach	
19-148	11136-11143	depends	
19-149	11144-11148	upon	
19-150	11149-11152	the	
19-151	11153-11160	problem	
19-152	11161-11165	area	
19-153	11165-11166	,	
19-154	11167-11172	which	
19-155	11173-11175	is	
19-156	11176-11180	most	
19-157	11181-11186	often	
19-158	11187-11189	in	
19-159	11190-11199	ingestion	
19-160	11199-11200	,	
19-161	11201-11215	transformation	
19-162	11215-11216	,	
19-163	11217-11219	or	
19-164	11220-11228	end-user	
19-165	11229-11236	queries	
19-166	11236-11237	,	
19-167	11238-11241	and	
19-168	11242-11247	often	
19-169	11248-11251	the	
19-170	11252-11256	most	
19-171	11257-11266	effective	
19-172	11267-11276	solutions	
19-173	11277-11280	are	
19-174	11281-11286	based	
19-175	11287-11291	upon	
19-176	11292-11293	a	
19-177	11294-11300	design	
19-178	11301-11309	approach	
19-179	11310-11316	rather	
19-180	11317-11321	than	
19-181	11322-11326	pure	
19-182	11327-11332	query	
19-183	11333-11342	tuning.By	
19-184	11343-11346	all	
19-185	11347-11352	means	
19-186	11352-11353	,	
19-187	11354-11362	consider	
19-188	11363-11370	scaling	
19-189	11371-11373	up	
19-190	11374-11376	to	
19-191	11377-11378	a	
19-192	11379-11384	large	
19-193	11385-11394	warehouse	
19-194	11395-11397	to	
19-195	11398-11405	improve	
19-196	11406-11411	query	
19-197	11412-11423	performance	
19-198	11423-11424	,	
19-199	11425-11428	but	
19-200	11429-11434	first	
19-201	11435-11443	identify	
19-202	11444-11447	and	
19-203	11448-11453	focus	
19-204	11454-11456	on	
19-205	11457-11460	the	
19-206	11461-11467	actual	
19-207	11468-11475	problem	
19-208	11475-11476	.	
19-209	11477-11480	You	
19-210	11481-11484	may	
19-211	11485-11489	find	
19-212	11490-11495	there	
19-213	11496-11499	are	
19-214	11500-11504	more	
19-215	11505-11514	effective	
19-216	11515-11518	and	
19-217	11519-11528	efficient	
19-218	11529-11538	solutions	
19-219	11539-11555	available.Notice	
19-220	11556-11564	Anything	
19-221	11565-11572	Missing	
19-222	11572-11573	?	
19-223	11573-11575	No	
19-224	11576-11584	annoying	
19-225	11585-11592	pop-ups	
19-226	11593-11595	or	
19-227	11596-11603	adverts	
19-228	11603-11604	.	
19-229	11605-11607	No	
19-230	11608-11612	bull	
19-231	11612-11613	,	
19-232	11614-11618	just	
19-233	11619-11624	facts	
19-234	11624-11625	,	
19-235	11626-11634	insights	
19-236	11635-11638	and	
19-237	11639-11647	opinions	
19-238	11647-11648	.	
19-239	11649-11653	Sign	
19-240	11654-11656	up	
19-241	11657-11662	below	
19-242	11663-11666	and	
19-243	11667-11668	I	
19-244	11669-11673	will	
19-245	11674-11678	ping	
19-246	11679-11682	you	
19-247	11683-11684	a	
19-248	11685-11689	mail	
19-249	11690-11694	when	
19-250	11695-11698	new	
19-251	11699-11706	content	
19-252	11707-11709	is	
19-253	11710-11719	available	
19-254	11719-11720	.	
19-255	11721-11722	I	
19-256	11723-11727	will	
19-257	11728-11733	never	
19-258	11734-11738	spam	
19-259	11739-11742	you	
19-260	11743-11745	or	
19-261	11746-11751	abuse	
19-262	11752-11756	your	
19-263	11757-11762	trust	
19-264	11762-11763	.	
19-265	11764-11777	Alternatively	
19-266	11777-11778	,	
19-267	11779-11782	you	
19-268	11783-11786	can	
19-269	11787-11792	leave	
19-270	11793-11794	a	
19-271	11795-11802	comment	
19-272	11803-11819	below.Disclaimer	
19-273	11819-11820	:	
19-274	11820-11821	 	
19-275	11821-11824	The	
19-276	11825-11833	opinions	
19-277	11834-11843	expressed	
19-278	11844-11846	on	
19-279	11847-11851	this	
19-280	11852-11856	site	
19-281	11857-11860	are	
19-282	11861-11869	entirely	
19-283	11870-11872	my	
19-284	11873-11876	own	
19-285	11876-11877	,	
19-286	11878-11881	and	
19-287	11882-11886	will	
19-288	11887-11890	not	
19-289	11891-11902	necessarily	
19-290	11903-11910	reflect	
19-291	11911-11916	those	
19-292	11917-11919	of	
19-293	11920-11922	my	
19-294	11923-11931	employer	
19-295	11931-11932	.	

#Text=Email Thank you! John Ryan Previous Previous What is a Snowflake Virtual Warehouse? Next Next When should I use Data Vault? Designed by me and hosted on Squarespace.(c) Copyright John Ryan 2020.
20-1	11933-11938	Email	
20-2	11939-11944	Thank	
20-3	11945-11948	you	
20-4	11948-11949	!	
20-5	11950-11954	John	
20-6	11955-11959	Ryan	
20-7	11960-11968	Previous	
20-8	11969-11977	Previous	
20-9	11978-11982	What	
20-10	11983-11985	is	
20-11	11986-11987	a	
20-12	11988-11997	Snowflake	
20-13	11998-12005	Virtual	
20-14	12006-12015	Warehouse	
20-15	12015-12016	?	
20-16	12017-12021	Next	
20-17	12022-12026	Next	
20-18	12027-12031	When	
20-19	12032-12038	should	
20-20	12039-12040	I	
20-21	12041-12044	use	
20-22	12045-12049	Data	
20-23	12050-12055	Vault	
20-24	12055-12056	?	
20-25	12057-12065	Designed	
20-26	12066-12068	by	
20-27	12069-12071	me	
20-28	12072-12075	and	
20-29	12076-12082	hosted	
20-30	12083-12085	on	
20-31	12086-12097	Squarespace	
20-32	12097-12098	.	
20-33	12098-12099	(	
20-34	12099-12100	c	
20-35	12100-12101	)	
20-36	12102-12111	Copyright	
20-37	12112-12116	John	
20-38	12117-12121	Ryan	
20-39	12122-12126	2020	
20-40	12126-12127	.	
