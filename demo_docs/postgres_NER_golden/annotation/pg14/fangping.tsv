#FORMAT=WebAnno TSV 3.3


#Text=Hibernate - Vlad Mihalcea Vlad Mihalcea Home Blog Store Books Courses Hypersistence Optimizer Documentation Installation Guide User Guide Examples Release Notes
1-1	0-9	Hibernate	
1-2	10-11	-	
1-3	12-16	Vlad	
1-4	17-25	Mihalcea	
1-5	26-30	Vlad	
1-6	31-39	Mihalcea	
1-7	40-44	Home	
1-8	45-49	Blog	
1-9	50-55	Store	
1-10	56-61	Books	
1-11	62-69	Courses	
1-12	70-83	Hypersistence	
1-13	84-93	Optimizer	
1-14	94-107	Documentation	
1-15	108-120	Installation	
1-16	121-126	Guide	
1-17	127-131	User	
1-18	132-137	Guide	
1-19	138-146	Examples	
1-20	147-154	Release	
1-21	155-160	Notes	

#Text=Issue Tracker Trial Version Full Version Training High-Performance SQL High-Performance Java Persistence Consulting Tutorials Hibernate SQL Spring Videos Talks Hibernate Last modified:
2-1	161-166	Issue	
2-2	167-174	Tracker	
2-3	175-180	Trial	
2-4	181-188	Version	
2-5	189-193	Full	
2-6	194-201	Version	
2-7	202-210	Training	
2-8	211-227	High-Performance	
2-9	228-231	SQL	
2-10	232-248	High-Performance	
2-11	249-253	Java	
2-12	254-265	Persistence	
2-13	266-276	Consulting	
2-14	277-286	Tutorials	
2-15	287-296	Hibernate	
2-16	297-300	SQL	
2-17	301-307	Spring	
2-18	308-314	Videos	
2-19	315-320	Talks	
2-20	321-330	Hibernate	
2-21	331-335	Last	
2-22	336-344	modified	
2-23	344-345	:	

#Text=Follow @vlad_mihalcea Imagine having a tool that can automatically detect JPA and Hibernate performance issues. Hypersistence Optimizer is that tool! High-Performance Hibernate Tutorial
3-1	346-352	Follow	
3-2	353-354	@	
3-3	354-367	vlad_mihalcea	
3-4	368-375	Imagine	
3-5	376-382	having	
3-6	383-384	a	
3-7	385-389	tool	
3-8	390-394	that	
3-9	395-398	can	
3-10	399-412	automatically	
3-11	413-419	detect	
3-12	420-423	JPA	
3-13	424-427	and	
3-14	428-437	Hibernate	
3-15	438-449	performance	
3-16	450-456	issues	
3-17	456-457	.	
3-18	458-471	Hypersistence	
3-19	472-481	Optimizer	
3-20	482-484	is	
3-21	485-489	that	
3-22	490-494	tool	
3-23	494-495	!	
3-24	496-512	High-Performance	
3-25	513-522	Hibernate	
3-26	523-531	Tutorial	

#Text=I’ve been using Hibernate for almost a decade and I admit it was not an easy journey. These tutorials are snippets from my High-Performance Java Persistence book, whose main goal is to show you how to make your data access layer run a high-speeds. This material is useful for both beginners and experienced developers, so enjoy reading it. The best Tutorials on High-Performance Hibernate #Hibernate #Java #Tutorials #NewYearsResolution #Career https://t.co/wQNjz6kK24 pic.twitter.com/4wDmQYvswq— Java (@java) January 1, 2019
4-1	532-533	I	
4-2	533-534	’	
4-3	534-536	ve	
4-4	537-541	been	
4-5	542-547	using	
4-6	548-557	Hibernate	
4-7	558-561	for	
4-8	562-568	almost	
4-9	569-570	a	
4-10	571-577	decade	
4-11	578-581	and	
4-12	582-583	I	
4-13	584-589	admit	
4-14	590-592	it	
4-15	593-596	was	
4-16	597-600	not	
4-17	601-603	an	
4-18	604-608	easy	
4-19	609-616	journey	
4-20	616-617	.	
4-21	618-623	These	
4-22	624-633	tutorials	
4-23	634-637	are	
4-24	638-646	snippets	
4-25	647-651	from	
4-26	652-654	my	
4-27	655-671	High-Performance	
4-28	672-676	Java	
4-29	677-688	Persistence	
4-30	689-693	book	
4-31	693-694	,	
4-32	695-700	whose	
4-33	701-705	main	
4-34	706-710	goal	
4-35	711-713	is	
4-36	714-716	to	
4-37	717-721	show	
4-38	722-725	you	
4-39	726-729	how	
4-40	730-732	to	
4-41	733-737	make	
4-42	738-742	your	
4-43	743-747	data	
4-44	748-754	access	
4-45	755-760	layer	
4-46	761-764	run	
4-47	765-766	a	
4-48	767-778	high-speeds	
4-49	778-779	.	
4-50	780-784	This	
4-51	785-793	material	
4-52	794-796	is	
4-53	797-803	useful	
4-54	804-807	for	
4-55	808-812	both	
4-56	813-822	beginners	
4-57	823-826	and	
4-58	827-838	experienced	
4-59	839-849	developers	
4-60	849-850	,	
4-61	851-853	so	
4-62	854-859	enjoy	
4-63	860-867	reading	
4-64	868-870	it	
4-65	870-871	.	
4-66	872-875	The	
4-67	876-880	best	
4-68	881-890	Tutorials	
4-69	891-893	on	
4-70	894-910	High-Performance	
4-71	911-920	Hibernate	
4-72	921-922	#	
4-73	922-931	Hibernate	
4-74	932-933	#	
4-75	933-937	Java	
4-76	938-939	#	
4-77	939-948	Tutorials	
4-78	949-950	#	
4-79	950-968	NewYearsResolution	
4-80	969-970	#	
4-81	970-976	Career	
4-82	977-982	https	
4-83	982-983	:	
4-84	983-984	/	
4-85	984-985	/	
4-86	985-989	t.co	
4-87	989-990	/	
4-88	990-1000	wQNjz6kK24	
4-89	1001-1016	pic.twitter.com	
4-90	1016-1017	/	
4-91	1017-1027	4wDmQYvswq	
4-92	1027-1028	—	
4-93	1029-1033	Java	
4-94	1034-1035	(	
4-95	1035-1036	@	
4-96	1036-1040	java	
4-97	1040-1041	)	
4-98	1042-1049	January	
4-99	1050-1051	1	
4-100	1051-1052	,	
4-101	1053-1057	2019	

#Text=Tips and Best Practices Why and when you should use JPA The best way to prevent JPA and Hibernate performance issues How to detect JPA and Hibernate performance issues automatically using Hypersistence Optimizer Tuning Spring Petclinic JPA and Hibernate configuration with Hypersistence Optimizer
5-1	1058-1062	Tips	
5-2	1063-1066	and	
5-3	1067-1071	Best	
5-4	1072-1081	Practices	
5-5	1082-1085	Why	
5-6	1086-1089	and	
5-7	1090-1094	when	
5-8	1095-1098	you	
5-9	1099-1105	should	
5-10	1106-1109	use	
5-11	1110-1113	JPA	
5-12	1114-1117	The	
5-13	1118-1122	best	
5-14	1123-1126	way	
5-15	1127-1129	to	
5-16	1130-1137	prevent	
5-17	1138-1141	JPA	
5-18	1142-1145	and	
5-19	1146-1155	Hibernate	
5-20	1156-1167	performance	
5-21	1168-1174	issues	
5-22	1175-1178	How	
5-23	1179-1181	to	
5-24	1182-1188	detect	
5-25	1189-1192	JPA	
5-26	1193-1196	and	
5-27	1197-1206	Hibernate	
5-28	1207-1218	performance	
5-29	1219-1225	issues	
5-30	1226-1239	automatically	
5-31	1240-1245	using	
5-32	1246-1259	Hypersistence	
5-33	1260-1269	Optimizer	
5-34	1270-1276	Tuning	
5-35	1277-1283	Spring	
5-36	1284-1293	Petclinic	
5-37	1294-1297	JPA	
5-38	1298-1301	and	
5-39	1302-1311	Hibernate	
5-40	1312-1325	configuration	
5-41	1326-1330	with	
5-42	1331-1344	Hypersistence	
5-43	1345-1354	Optimizer	

#Text=Hibernate Query Performance Tuning Spring Boot performance tuning Spring Boot performance monitoring A beginner’s guide to the high-performance-java-persistence GitHub repository Hibernate performance tuning tips 14 High-Performance Java Persistence tips
6-1	1355-1364	Hibernate	
6-2	1365-1370	Query	
6-3	1371-1382	Performance	
6-4	1383-1389	Tuning	
6-5	1390-1396	Spring	
6-6	1397-1401	Boot	
6-7	1402-1413	performance	
6-8	1414-1420	tuning	
6-9	1421-1427	Spring	
6-10	1428-1432	Boot	
6-11	1433-1444	performance	
6-12	1445-1455	monitoring	
6-13	1456-1457	A	
6-14	1458-1466	beginner	
6-15	1466-1467	’	
6-16	1467-1468	s	
6-17	1469-1474	guide	
6-18	1475-1477	to	
6-19	1478-1481	the	
6-20	1482-1515	high-performance-java-persistence	
6-21	1516-1522	GitHub	
6-22	1523-1533	repository	
6-23	1534-1543	Hibernate	
6-24	1544-1555	performance	
6-25	1556-1562	tuning	
6-26	1563-1567	tips	
6-27	1568-1570	14	
6-28	1571-1587	High-Performance	
6-29	1588-1592	Java	
6-30	1593-1604	Persistence	
6-31	1605-1609	tips	

#Text=9 High-Performance Tips when using MySQL with JPA and Hibernate 9 High-Performance Tips when using PostgreSQL with JPA and Hibernate How to detect the Hibernate N+1 query problem during testing Hibernate slow query log A beginner’s guide to SQL injection and how you should prevent it
7-1	1610-1611	9	
7-2	1612-1628	High-Performance	
7-3	1629-1633	Tips	
7-4	1634-1638	when	
7-5	1639-1644	using	
7-6	1645-1650	MySQL	
7-7	1651-1655	with	
7-8	1656-1659	JPA	
7-9	1660-1663	and	
7-10	1664-1673	Hibernate	
7-11	1674-1675	9	
7-12	1676-1692	High-Performance	
7-13	1693-1697	Tips	
7-14	1698-1702	when	
7-15	1703-1708	using	
7-16	1709-1719	PostgreSQL	
7-17	1720-1724	with	
7-18	1725-1728	JPA	
7-19	1729-1732	and	
7-20	1733-1742	Hibernate	
7-21	1743-1746	How	
7-22	1747-1749	to	
7-23	1750-1756	detect	
7-24	1757-1760	the	
7-25	1761-1770	Hibernate	
7-26	1771-1772	N	
7-27	1772-1773	+	
7-28	1773-1774	1	
7-29	1775-1780	query	
7-30	1781-1788	problem	
7-31	1789-1795	during	
7-32	1796-1803	testing	
7-33	1804-1813	Hibernate	
7-34	1814-1818	slow	
7-35	1819-1824	query	
7-36	1825-1828	log	
7-37	1829-1830	A	
7-38	1831-1839	beginner	
7-39	1839-1840	’	
7-40	1840-1841	s	
7-41	1842-1847	guide	
7-42	1848-1850	to	
7-43	1851-1854	SQL	
7-44	1855-1864	injection	
7-45	1865-1868	and	
7-46	1869-1872	how	
7-47	1873-1876	you	
7-48	1877-1883	should	
7-49	1884-1891	prevent	
7-50	1892-1894	it	

#Text=How to store date, time, and timestamps in UTC time zone with JDBC and Hibernate The fastest way to update a table row when using Hibernate and Oracle How to use database-specific or Hibernate-specific features without sacrificing portability How to use the Hibernate Session doWork and doReturningWork methods
8-1	1895-1898	How	
8-2	1899-1901	to	
8-3	1902-1907	store	
8-4	1908-1912	date	
8-5	1912-1913	,	
8-6	1914-1918	time	
8-7	1918-1919	,	
8-8	1920-1923	and	
8-9	1924-1934	timestamps	
8-10	1935-1937	in	
8-11	1938-1941	UTC	
8-12	1942-1946	time	
8-13	1947-1951	zone	
8-14	1952-1956	with	
8-15	1957-1961	JDBC	
8-16	1962-1965	and	
8-17	1966-1975	Hibernate	
8-18	1976-1979	The	
8-19	1980-1987	fastest	
8-20	1988-1991	way	
8-21	1992-1994	to	
8-22	1995-2001	update	
8-23	2002-2003	a	
8-24	2004-2009	table	
8-25	2010-2013	row	
8-26	2014-2018	when	
8-27	2019-2024	using	
8-28	2025-2034	Hibernate	
8-29	2035-2038	and	
8-30	2039-2045	Oracle	
8-31	2046-2049	How	
8-32	2050-2052	to	
8-33	2053-2056	use	
8-34	2057-2074	database-specific	
8-35	2075-2077	or	
8-36	2078-2096	Hibernate-specific	
8-37	2097-2105	features	
8-38	2106-2113	without	
8-39	2114-2125	sacrificing	
8-40	2126-2137	portability	
8-41	2138-2141	How	
8-42	2142-2144	to	
8-43	2145-2148	use	
8-44	2149-2152	the	
8-45	2153-2162	Hibernate	
8-46	2163-2170	Session	
8-47	2171-2177	doWork	
8-48	2178-2181	and	
8-49	2182-2197	doReturningWork	
8-50	2198-2205	methods	

#Text=JPA providers market share Bootstrapping A beginner’s guide to JPA persistence.xml file How to bootstrap Hibernate without the persistence.xml configuration file How to bootstrap JPA programmatically without the persistence.xml configuration file
9-1	2206-2209	JPA	
9-2	2210-2219	providers	
9-3	2220-2226	market	
9-4	2227-2232	share	
9-5	2233-2246	Bootstrapping	
9-6	2247-2248	A	
9-7	2249-2257	beginner	
9-8	2257-2258	’	
9-9	2258-2259	s	
9-10	2260-2265	guide	
9-11	2266-2268	to	
9-12	2269-2272	JPA	
9-13	2273-2288	persistence.xml	
9-14	2289-2293	file	
9-15	2294-2297	How	
9-16	2298-2300	to	
9-17	2301-2310	bootstrap	
9-18	2311-2320	Hibernate	
9-19	2321-2328	without	
9-20	2329-2332	the	
9-21	2333-2348	persistence.xml	
9-22	2349-2362	configuration	
9-23	2363-2367	file	
9-24	2368-2371	How	
9-25	2372-2374	to	
9-26	2375-2384	bootstrap	
9-27	2385-2388	JPA	
9-28	2389-2405	programmatically	
9-29	2406-2413	without	
9-30	2414-2417	the	
9-31	2418-2433	persistence.xml	
9-32	2434-2447	configuration	
9-33	2448-2452	file	

#Text=JDBC Driver Connection URL strings JDBC Driver Maven dependency list How to get access to database table metadata with Hibernate 5 How to get the entity mapping to database table binding metadata from Hibernate Schema Management Flyway Database Schema Migrations
10-1	2453-2457	JDBC	
10-2	2458-2464	Driver	
10-3	2465-2475	Connection	
10-4	2476-2479	URL	
10-5	2480-2487	strings	
10-6	2488-2492	JDBC	
10-7	2493-2499	Driver	
10-8	2500-2505	Maven	
10-9	2506-2516	dependency	
10-10	2517-2521	list	
10-11	2522-2525	How	
10-12	2526-2528	to	
10-13	2529-2532	get	
10-14	2533-2539	access	
10-15	2540-2542	to	
10-16	2543-2551	database	
10-17	2552-2557	table	
10-18	2558-2566	metadata	
10-19	2567-2571	with	
10-20	2572-2581	Hibernate	
10-21	2582-2583	5	
10-22	2584-2587	How	
10-23	2588-2590	to	
10-24	2591-2594	get	
10-25	2595-2598	the	
10-26	2599-2605	entity	
10-27	2606-2613	mapping	
10-28	2614-2616	to	
10-29	2617-2625	database	
10-30	2626-2631	table	
10-31	2632-2639	binding	
10-32	2640-2648	metadata	
10-33	2649-2653	from	
10-34	2654-2663	Hibernate	
10-35	2664-2670	Schema	
10-36	2671-2681	Management	
10-37	2682-2688	Flyway	
10-38	2689-2697	Database	
10-39	2698-2704	Schema	
10-40	2705-2715	Migrations	

#Text=Hibernate hbm2ddl.auto schema generation Mappings Basic Types A beginner’s guide to Hibernate Types How to implement a custom basic type using Hibernate UserType JPA AttributeConverter – A Beginner’s Guide
11-1	2716-2725	Hibernate	
11-2	2726-2738	hbm2ddl.auto	
11-3	2739-2745	schema	
11-4	2746-2756	generation	
11-5	2757-2765	Mappings	
11-6	2766-2771	Basic	
11-7	2772-2777	Types	
11-8	2778-2779	A	
11-9	2780-2788	beginner	
11-10	2788-2789	’	
11-11	2789-2790	s	
11-12	2791-2796	guide	
11-13	2797-2799	to	
11-14	2800-2809	Hibernate	
11-15	2810-2815	Types	
11-16	2816-2819	How	
11-17	2820-2822	to	
11-18	2823-2832	implement	
11-19	2833-2834	a	
11-20	2835-2841	custom	
11-21	2842-2847	basic	
11-22	2848-2852	type	
11-23	2853-2858	using	
11-24	2859-2868	Hibernate	
11-25	2869-2877	UserType	
11-26	2878-2881	JPA	
11-27	2882-2900	AttributeConverter	
11-28	2901-2902	–	
11-29	2903-2904	A	
11-30	2905-2913	Beginner	
11-31	2913-2914	’	
11-32	2914-2915	s	
11-33	2916-2921	Guide	

#Text=How to map calculated properties with JPA and Hibernate @Formula annotation How to map calculated properties with Hibernate @Generated annotation How to emulate @CreatedBy and @LastModifiedBy from Spring Data using the @GeneratorType Hibernate annotation How to map Date and Timestamp with JPA and Hibernate
12-1	2922-2925	How	
12-2	2926-2928	to	
12-3	2929-2932	map	
12-4	2933-2943	calculated	
12-5	2944-2954	properties	
12-6	2955-2959	with	
12-7	2960-2963	JPA	
12-8	2964-2967	and	
12-9	2968-2977	Hibernate	
12-10	2978-2979	@	
12-11	2979-2986	Formula	
12-12	2987-2997	annotation	
12-13	2998-3001	How	
12-14	3002-3004	to	
12-15	3005-3008	map	
12-16	3009-3019	calculated	
12-17	3020-3030	properties	
12-18	3031-3035	with	
12-19	3036-3045	Hibernate	
12-20	3046-3047	@	
12-21	3047-3056	Generated	
12-22	3057-3067	annotation	
12-23	3068-3071	How	
12-24	3072-3074	to	
12-25	3075-3082	emulate	
12-26	3083-3084	@	
12-27	3084-3093	CreatedBy	
12-28	3094-3097	and	
12-29	3098-3099	@	
12-30	3099-3113	LastModifiedBy	
12-31	3114-3118	from	
12-32	3119-3125	Spring	
12-33	3126-3130	Data	
12-34	3131-3136	using	
12-35	3137-3140	the	
12-36	3141-3142	@	
12-37	3142-3155	GeneratorType	
12-38	3156-3165	Hibernate	
12-39	3166-3176	annotation	
12-40	3177-3180	How	
12-41	3181-3183	to	
12-42	3184-3187	map	
12-43	3188-3192	Date	
12-44	3193-3196	and	
12-45	3197-3206	Timestamp	
12-46	3207-3211	with	
12-47	3212-3215	JPA	
12-48	3216-3219	and	
12-49	3220-3229	Hibernate	

#Text=What’s new in JPA 2.2 – Java 8 Date and Time Types The best way to map a Java 1.8 Optional entity attribute with JPA and Hibernate The best way to map an Enum Type with JPA and Hibernate How to map a JPA entity to a View or SQL query using Hibernate
13-1	3230-3234	What	
13-2	3234-3235	’	
13-3	3235-3236	s	
13-4	3237-3240	new	
13-5	3241-3243	in	
13-6	3244-3247	JPA	
13-7	3248-3251	2.2	
13-8	3252-3253	–	
13-9	3254-3258	Java	
13-10	3259-3260	8	
13-11	3261-3265	Date	
13-12	3266-3269	and	
13-13	3270-3274	Time	
13-14	3275-3280	Types	
13-15	3281-3284	The	
13-16	3285-3289	best	
13-17	3290-3293	way	
13-18	3294-3296	to	
13-19	3297-3300	map	
13-20	3301-3302	a	
13-21	3303-3307	Java	
13-22	3308-3311	1.8	
13-23	3312-3320	Optional	
13-24	3321-3327	entity	
13-25	3328-3337	attribute	
13-26	3338-3342	with	
13-27	3343-3346	JPA	
13-28	3347-3350	and	
13-29	3351-3360	Hibernate	
13-30	3361-3364	The	
13-31	3365-3369	best	
13-32	3370-3373	way	
13-33	3374-3376	to	
13-34	3377-3380	map	
13-35	3381-3383	an	
13-36	3384-3388	Enum	
13-37	3389-3393	Type	
13-38	3394-3398	with	
13-39	3399-3402	JPA	
13-40	3403-3406	and	
13-41	3407-3416	Hibernate	
13-42	3417-3420	How	
13-43	3421-3423	to	
13-44	3424-3427	map	
13-45	3428-3429	a	
13-46	3430-3433	JPA	
13-47	3434-3440	entity	
13-48	3441-3443	to	
13-49	3444-3445	a	
13-50	3446-3450	View	
13-51	3451-3453	or	
13-52	3454-3457	SQL	
13-53	3458-3463	query	
13-54	3464-3469	using	
13-55	3470-3479	Hibernate	

#Text=How to map the PostgreSQL inet type with JPA and Hibernate How to map a PostgreSQL Range column type with JPA and Hibernate How to map the Java YearMonth type with JPA and Hibernate How to map java.time.Year and java.time.Month with JPA and Hibernate
14-1	3480-3483	How	
14-2	3484-3486	to	
14-3	3487-3490	map	
14-4	3491-3494	the	
14-5	3495-3505	PostgreSQL	
14-6	3506-3510	inet	
14-7	3511-3515	type	
14-8	3516-3520	with	
14-9	3521-3524	JPA	
14-10	3525-3528	and	
14-11	3529-3538	Hibernate	
14-12	3539-3542	How	
14-13	3543-3545	to	
14-14	3546-3549	map	
14-15	3550-3551	a	
14-16	3552-3562	PostgreSQL	
14-17	3563-3568	Range	
14-18	3569-3575	column	
14-19	3576-3580	type	
14-20	3581-3585	with	
14-21	3586-3589	JPA	
14-22	3590-3593	and	
14-23	3594-3603	Hibernate	
14-24	3604-3607	How	
14-25	3608-3610	to	
14-26	3611-3614	map	
14-27	3615-3618	the	
14-28	3619-3623	Java	
14-29	3624-3633	YearMonth	
14-30	3634-3638	type	
14-31	3639-3643	with	
14-32	3644-3647	JPA	
14-33	3648-3651	and	
14-34	3652-3661	Hibernate	
14-35	3662-3665	How	
14-36	3666-3668	to	
14-37	3669-3672	map	
14-38	3673-3687	java.time.Year	
14-39	3688-3691	and	
14-40	3692-3707	java.time.Month	
14-41	3708-3712	with	
14-42	3713-3716	JPA	
14-43	3717-3720	and	
14-44	3721-3730	Hibernate	

#Text=How to map a PostgreSQL Interval to a Java Duration with Hibernate How to escape SQL reserved keywords with JPA and Hibernate JSON The hibernate-types open-source project offers extra Hibernate Types (e.g. JSON, ARRAY) How to map JSON objects using generic Hibernate Types
15-1	3731-3734	How	
15-2	3735-3737	to	
15-3	3738-3741	map	
15-4	3742-3743	a	
15-5	3744-3754	PostgreSQL	
15-6	3755-3763	Interval	
15-7	3764-3766	to	
15-8	3767-3768	a	
15-9	3769-3773	Java	
15-10	3774-3782	Duration	
15-11	3783-3787	with	
15-12	3788-3797	Hibernate	
15-13	3798-3801	How	
15-14	3802-3804	to	
15-15	3805-3811	escape	
15-16	3812-3815	SQL	
15-17	3816-3824	reserved	
15-18	3825-3833	keywords	
15-19	3834-3838	with	
15-20	3839-3842	JPA	
15-21	3843-3846	and	
15-22	3847-3856	Hibernate	
15-23	3857-3861	JSON	
15-24	3862-3865	The	
15-25	3866-3881	hibernate-types	
15-26	3882-3893	open-source	
15-27	3894-3901	project	
15-28	3902-3908	offers	
15-29	3909-3914	extra	
15-30	3915-3924	Hibernate	
15-31	3925-3930	Types	
15-32	3931-3932	(	
15-33	3932-3935	e.g	
15-34	3935-3936	.	
15-35	3937-3941	JSON	
15-36	3941-3942	,	
15-37	3943-3948	ARRAY	
15-38	3948-3949	)	
15-39	3950-3953	How	
15-40	3954-3956	to	
15-41	3957-3960	map	
15-42	3961-3965	JSON	
15-43	3966-3973	objects	
15-44	3974-3979	using	
15-45	3980-3987	generic	
15-46	3988-3997	Hibernate	
15-47	3998-4003	Types	

#Text=How to map Oracle JSON columns using JPA and Hibernate How to map SQL Server JSON columns using JPA and Hibernate How to store schema-less EAV (Entity-Attribute-Value) data using JSON and Hibernate How to map a String JPA property to a JSON column using Hibernate
16-1	4004-4007	How	
16-2	4008-4010	to	
16-3	4011-4014	map	
16-4	4015-4021	Oracle	
16-5	4022-4026	JSON	
16-6	4027-4034	columns	
16-7	4035-4040	using	
16-8	4041-4044	JPA	
16-9	4045-4048	and	
16-10	4049-4058	Hibernate	
16-11	4059-4062	How	
16-12	4063-4065	to	
16-13	4066-4069	map	
16-14	4070-4073	SQL	
16-15	4074-4080	Server	
16-16	4081-4085	JSON	
16-17	4086-4093	columns	
16-18	4094-4099	using	
16-19	4100-4103	JPA	
16-20	4104-4107	and	
16-21	4108-4117	Hibernate	
16-22	4118-4121	How	
16-23	4122-4124	to	
16-24	4125-4130	store	
16-25	4131-4142	schema-less	
16-26	4143-4146	EAV	
16-27	4147-4148	(	
16-28	4148-4170	Entity-Attribute-Value	
16-29	4170-4171	)	
16-30	4172-4176	data	
16-31	4177-4182	using	
16-32	4183-4187	JSON	
16-33	4188-4191	and	
16-34	4192-4201	Hibernate	
16-35	4202-4205	How	
16-36	4206-4208	to	
16-37	4209-4212	map	
16-38	4213-4214	a	
16-39	4215-4221	String	
16-40	4222-4225	JPA	
16-41	4226-4234	property	
16-42	4235-4237	to	
16-43	4238-4239	a	
16-44	4240-4244	JSON	
16-45	4245-4251	column	
16-46	4252-4257	using	
16-47	4258-4267	Hibernate	

#Text=How to map JSON collections using JPA and Hibernate Java Map to JSON mapping with JPA and Hibernate How to map Java Records to JSON columns using Hibernate How to encrypt and decrypt JSON properties with JPA and Hibernate
17-1	4268-4271	How	
17-2	4272-4274	to	
17-3	4275-4278	map	
17-4	4279-4283	JSON	
17-5	4284-4295	collections	
17-6	4296-4301	using	
17-7	4302-4305	JPA	
17-8	4306-4309	and	
17-9	4310-4319	Hibernate	
17-10	4320-4324	Java	
17-11	4325-4328	Map	
17-12	4329-4331	to	
17-13	4332-4336	JSON	
17-14	4337-4344	mapping	
17-15	4345-4349	with	
17-16	4350-4353	JPA	
17-17	4354-4357	and	
17-18	4358-4367	Hibernate	
17-19	4368-4371	How	
17-20	4372-4374	to	
17-21	4375-4378	map	
17-22	4379-4383	Java	
17-23	4384-4391	Records	
17-24	4392-4394	to	
17-25	4395-4399	JSON	
17-26	4400-4407	columns	
17-27	4408-4413	using	
17-28	4414-4423	Hibernate	
17-29	4424-4427	How	
17-30	4428-4430	to	
17-31	4431-4438	encrypt	
17-32	4439-4442	and	
17-33	4443-4450	decrypt	
17-34	4451-4455	JSON	
17-35	4456-4466	properties	
17-36	4467-4471	with	
17-37	4472-4475	JPA	
17-38	4476-4479	and	
17-39	4480-4489	Hibernate	

#Text=How to customize the Jackson ObjectMapper used by Hibernate-Types How to customize the JSON Serializer used by Hibernate-Types How to fix the Hibernate “No Dialect mapping for JDBC type” issue How to fix the Hibernate “column is of type jsonb but expression is of type bytes” issue
18-1	4490-4493	How	
18-2	4494-4496	to	
18-3	4497-4506	customize	
18-4	4507-4510	the	
18-5	4511-4518	Jackson	
18-6	4519-4531	ObjectMapper	
18-7	4532-4536	used	
18-8	4537-4539	by	
18-9	4540-4555	Hibernate-Types	
18-10	4556-4559	How	
18-11	4560-4562	to	
18-12	4563-4572	customize	
18-13	4573-4576	the	
18-14	4577-4581	JSON	
18-15	4582-4592	Serializer	
18-16	4593-4597	used	
18-17	4598-4600	by	
18-18	4601-4616	Hibernate-Types	
18-19	4617-4620	How	
18-20	4621-4623	to	
18-21	4624-4627	fix	
18-22	4628-4631	the	
18-23	4632-4641	Hibernate	
18-24	4642-4643	“	
18-25	4643-4645	No	
18-26	4646-4653	Dialect	
18-27	4654-4661	mapping	
18-28	4662-4665	for	
18-29	4666-4670	JDBC	
18-30	4671-4675	type	
18-31	4675-4676	”	
18-32	4677-4682	issue	
18-33	4683-4686	How	
18-34	4687-4689	to	
18-35	4690-4693	fix	
18-36	4694-4697	the	
18-37	4698-4707	Hibernate	
18-38	4708-4709	“	
18-39	4709-4715	column	
18-40	4716-4718	is	
18-41	4719-4721	of	
18-42	4722-4726	type	
18-43	4727-4732	jsonb	
18-44	4733-4736	but	
18-45	4737-4747	expression	
18-46	4748-4750	is	
18-47	4751-4753	of	
18-48	4754-4758	type	
18-49	4759-4764	bytes	
18-50	4764-4765	”	
18-51	4766-4771	issue	

#Text=ARRAY How to map a PostgreSQL ARRAY to a Java List with JPA and Hibernate How to map Java and SQL arrays with JPA and Hibernate How to map a PostgreSQL Enum ARRAY to a JPA entity property using Hibernate
19-1	4772-4777	ARRAY	
19-2	4778-4781	How	
19-3	4782-4784	to	
19-4	4785-4788	map	
19-5	4789-4790	a	
19-6	4791-4801	PostgreSQL	
19-7	4802-4807	ARRAY	
19-8	4808-4810	to	
19-9	4811-4812	a	
19-10	4813-4817	Java	
19-11	4818-4822	List	
19-12	4823-4827	with	
19-13	4828-4831	JPA	
19-14	4832-4835	and	
19-15	4836-4845	Hibernate	
19-16	4846-4849	How	
19-17	4850-4852	to	
19-18	4853-4856	map	
19-19	4857-4861	Java	
19-20	4862-4865	and	
19-21	4866-4869	SQL	
19-22	4870-4876	arrays	
19-23	4877-4881	with	
19-24	4882-4885	JPA	
19-25	4886-4889	and	
19-26	4890-4899	Hibernate	
19-27	4900-4903	How	
19-28	4904-4906	to	
19-29	4907-4910	map	
19-30	4911-4912	a	
19-31	4913-4923	PostgreSQL	
19-32	4924-4928	Enum	
19-33	4929-4934	ARRAY	
19-34	4935-4937	to	
19-35	4938-4939	a	
19-36	4940-4943	JPA	
19-37	4944-4950	entity	
19-38	4951-4959	property	
19-39	4960-4965	using	
19-40	4966-4975	Hibernate	

#Text=Multidimensional array mapping with JPA and Hibernate Hibernate HSQLDB ARRAY Type Equals and HashCode The best way to implement equals, hashCode, and toString with JPA and Hibernate How to implement equals and hashCode using the entity identifier (primary key)
20-1	4976-4992	Multidimensional	
20-2	4993-4998	array	
20-3	4999-5006	mapping	
20-4	5007-5011	with	
20-5	5012-5015	JPA	
20-6	5016-5019	and	
20-7	5020-5029	Hibernate	
20-8	5030-5039	Hibernate	
20-9	5040-5046	HSQLDB	
20-10	5047-5052	ARRAY	
20-11	5053-5057	Type	
20-12	5058-5064	Equals	
20-13	5065-5068	and	
20-14	5069-5077	HashCode	
20-15	5078-5081	The	
20-16	5082-5086	best	
20-17	5087-5090	way	
20-18	5091-5093	to	
20-19	5094-5103	implement	
20-20	5104-5110	equals	
20-21	5110-5111	,	
20-22	5112-5120	hashCode	
20-23	5120-5121	,	
20-24	5122-5125	and	
20-25	5126-5134	toString	
20-26	5135-5139	with	
20-27	5140-5143	JPA	
20-28	5144-5147	and	
20-29	5148-5157	Hibernate	
20-30	5158-5161	How	
20-31	5162-5164	to	
20-32	5165-5174	implement	
20-33	5175-5181	equals	
20-34	5182-5185	and	
20-35	5186-5194	hashCode	
20-36	5195-5200	using	
20-37	5201-5204	the	
20-38	5205-5211	entity	
20-39	5212-5222	identifier	
20-40	5223-5224	(	
20-41	5224-5231	primary	
20-42	5232-5235	key	
20-43	5235-5236	)	

#Text=How to implement equals and hashCode using the entity natural identifier Relationships A beginner’s guide to database table relationships ManyToOne JPA and Hibernate association best practices The best way to map a @OneToOne relationship with JPA and Hibernate
21-1	5237-5240	How	
21-2	5241-5243	to	
21-3	5244-5253	implement	
21-4	5254-5260	equals	
21-5	5261-5264	and	
21-6	5265-5273	hashCode	
21-7	5274-5279	using	
21-8	5280-5283	the	
21-9	5284-5290	entity	
21-10	5291-5298	natural	
21-11	5299-5309	identifier	
21-12	5310-5323	Relationships	
21-13	5324-5325	A	
21-14	5326-5334	beginner	
21-15	5334-5335	’	
21-16	5335-5336	s	
21-17	5337-5342	guide	
21-18	5343-5345	to	
21-19	5346-5354	database	
21-20	5355-5360	table	
21-21	5361-5374	relationships	
21-22	5375-5384	ManyToOne	
21-23	5385-5388	JPA	
21-24	5389-5392	and	
21-25	5393-5402	Hibernate	
21-26	5403-5414	association	
21-27	5415-5419	best	
21-28	5420-5429	practices	
21-29	5430-5433	The	
21-30	5434-5438	best	
21-31	5439-5442	way	
21-32	5443-5445	to	
21-33	5446-5449	map	
21-34	5450-5451	a	
21-35	5452-5453	@	
21-36	5453-5461	OneToOne	
21-37	5462-5474	relationship	
21-38	5475-5479	with	
21-39	5480-5483	JPA	
21-40	5484-5487	and	
21-41	5488-5497	Hibernate	

#Text=How to change the @OneToOne shared primary key column name with JPA and Hibernate The best way to map a @OneToMany relationship with JPA and Hibernate The best way to use the @ManyToMany annotation with JPA and Hibernate The best way to map a many-to-many association with extra columns when using JPA and Hibernate
22-1	5498-5501	How	
22-2	5502-5504	to	
22-3	5505-5511	change	
22-4	5512-5515	the	
22-5	5516-5517	@	
22-6	5517-5525	OneToOne	
22-7	5526-5532	shared	
22-8	5533-5540	primary	
22-9	5541-5544	key	
22-10	5545-5551	column	
22-11	5552-5556	name	
22-12	5557-5561	with	
22-13	5562-5565	JPA	
22-14	5566-5569	and	
22-15	5570-5579	Hibernate	
22-16	5580-5583	The	
22-17	5584-5588	best	
22-18	5589-5592	way	
22-19	5593-5595	to	
22-20	5596-5599	map	
22-21	5600-5601	a	
22-22	5602-5603	@	
22-23	5603-5612	OneToMany	
22-24	5613-5625	relationship	
22-25	5626-5630	with	
22-26	5631-5634	JPA	
22-27	5635-5638	and	
22-28	5639-5648	Hibernate	
22-29	5649-5652	The	
22-30	5653-5657	best	
22-31	5658-5661	way	
22-32	5662-5664	to	
22-33	5665-5668	use	
22-34	5669-5672	the	
22-35	5673-5674	@	
22-36	5674-5684	ManyToMany	
22-37	5685-5695	annotation	
22-38	5696-5700	with	
22-39	5701-5704	JPA	
22-40	5705-5708	and	
22-41	5709-5718	Hibernate	
22-42	5719-5722	The	
22-43	5723-5727	best	
22-44	5728-5731	way	
22-45	5732-5734	to	
22-46	5735-5738	map	
22-47	5739-5740	a	
22-48	5741-5753	many-to-many	
22-49	5754-5765	association	
22-50	5766-5770	with	
22-51	5771-5776	extra	
22-52	5777-5784	columns	
22-53	5785-5789	when	
22-54	5790-5795	using	
22-55	5796-5799	JPA	
22-56	5800-5803	and	
22-57	5804-5813	Hibernate	

#Text=The best way to map a Composite Primary Key with JPA and Hibernate How to map a composite identifier using an automatically @GeneratedValue with JPA and Hibernate How to synchronize bidirectional entity associations with JPA and Hibernate How to map a @ManyToOne association using a non-Primary Key column
23-1	5814-5817	The	
23-2	5818-5822	best	
23-3	5823-5826	way	
23-4	5827-5829	to	
23-5	5830-5833	map	
23-6	5834-5835	a	
23-7	5836-5845	Composite	
23-8	5846-5853	Primary	
23-9	5854-5857	Key	
23-10	5858-5862	with	
23-11	5863-5866	JPA	
23-12	5867-5870	and	
23-13	5871-5880	Hibernate	
23-14	5881-5884	How	
23-15	5885-5887	to	
23-16	5888-5891	map	
23-17	5892-5893	a	
23-18	5894-5903	composite	
23-19	5904-5914	identifier	
23-20	5915-5920	using	
23-21	5921-5923	an	
23-22	5924-5937	automatically	
23-23	5938-5939	@	
23-24	5939-5953	GeneratedValue	
23-25	5954-5958	with	
23-26	5959-5962	JPA	
23-27	5963-5966	and	
23-28	5967-5976	Hibernate	
23-29	5977-5980	How	
23-30	5981-5983	to	
23-31	5984-5995	synchronize	
23-32	5996-6009	bidirectional	
23-33	6010-6016	entity	
23-34	6017-6029	associations	
23-35	6030-6034	with	
23-36	6035-6038	JPA	
23-37	6039-6042	and	
23-38	6043-6052	Hibernate	
23-39	6053-6056	How	
23-40	6057-6059	to	
23-41	6060-6063	map	
23-42	6064-6065	a	
23-43	6066-6067	@	
23-44	6067-6076	ManyToOne	
23-45	6077-6088	association	
23-46	6089-6094	using	
23-47	6095-6096	a	
23-48	6097-6108	non-Primary	
23-49	6109-6112	Key	
23-50	6113-6119	column	

#Text=How to customize an entity association JOIN ON clause with Hibernate @JoinFormula How to map a JPA @ManyToOne relationship to a SQL query using the Hibernate @JoinFormula annotation How to optimize unidirectional collections with JPA and Hibernate How do Set and List collections behave with JPA and Hibernate
24-1	6120-6123	How	
24-2	6124-6126	to	
24-3	6127-6136	customize	
24-4	6137-6139	an	
24-5	6140-6146	entity	
24-6	6147-6158	association	
24-7	6159-6163	JOIN	
24-8	6164-6166	ON	
24-9	6167-6173	clause	
24-10	6174-6178	with	
24-11	6179-6188	Hibernate	
24-12	6189-6190	@	
24-13	6190-6201	JoinFormula	
24-14	6202-6205	How	
24-15	6206-6208	to	
24-16	6209-6212	map	
24-17	6213-6214	a	
24-18	6215-6218	JPA	
24-19	6219-6220	@	
24-20	6220-6229	ManyToOne	
24-21	6230-6242	relationship	
24-22	6243-6245	to	
24-23	6246-6247	a	
24-24	6248-6251	SQL	
24-25	6252-6257	query	
24-26	6258-6263	using	
24-27	6264-6267	the	
24-28	6268-6277	Hibernate	
24-29	6278-6279	@	
24-30	6279-6290	JoinFormula	
24-31	6291-6301	annotation	
24-32	6302-6305	How	
24-33	6306-6308	to	
24-34	6309-6317	optimize	
24-35	6318-6332	unidirectional	
24-36	6333-6344	collections	
24-37	6345-6349	with	
24-38	6350-6353	JPA	
24-39	6354-6357	and	
24-40	6358-6367	Hibernate	
24-41	6368-6371	How	
24-42	6372-6374	do	
24-43	6375-6378	Set	
24-44	6379-6382	and	
24-45	6383-6387	List	
24-46	6388-6399	collections	
24-47	6400-6406	behave	
24-48	6407-6411	with	
24-49	6412-6415	JPA	
24-50	6416-6419	and	
24-51	6420-6429	Hibernate	

#Text=Advanced mapping techniques Fluent API entity building with JPA and Hibernate How to map an immutable entity with JPA and Hibernate How to map the latest child of a parent entity using Hibernate @JoinFormula How to map multiple JPA entities to one database table with Hibernate
25-1	6430-6438	Advanced	
25-2	6439-6446	mapping	
25-3	6447-6457	techniques	
25-4	6458-6464	Fluent	
25-5	6465-6468	API	
25-6	6469-6475	entity	
25-7	6476-6484	building	
25-8	6485-6489	with	
25-9	6490-6493	JPA	
25-10	6494-6497	and	
25-11	6498-6507	Hibernate	
25-12	6508-6511	How	
25-13	6512-6514	to	
25-14	6515-6518	map	
25-15	6519-6521	an	
25-16	6522-6531	immutable	
25-17	6532-6538	entity	
25-18	6539-6543	with	
25-19	6544-6547	JPA	
25-20	6548-6551	and	
25-21	6552-6561	Hibernate	
25-22	6562-6565	How	
25-23	6566-6568	to	
25-24	6569-6572	map	
25-25	6573-6576	the	
25-26	6577-6583	latest	
25-27	6584-6589	child	
25-28	6590-6592	of	
25-29	6593-6594	a	
25-30	6595-6601	parent	
25-31	6602-6608	entity	
25-32	6609-6614	using	
25-33	6615-6624	Hibernate	
25-34	6625-6626	@	
25-35	6626-6637	JoinFormula	
25-36	6638-6641	How	
25-37	6642-6644	to	
25-38	6645-6648	map	
25-39	6649-6657	multiple	
25-40	6658-6661	JPA	
25-41	6662-6670	entities	
25-42	6671-6673	to	
25-43	6674-6677	one	
25-44	6678-6686	database	
25-45	6687-6692	table	
25-46	6693-6697	with	
25-47	6698-6707	Hibernate	

#Text=How to update only a subset of entity attributes using JPA and Hibernate @DynamicUpdate How to use external XML mappings files with JPA and Hibernate How to encrypt and decrypt data with Hibernate The best way to soft delete with Hibernate How to fix “wrong column type encountered” schema-validation errors with JPA and Hibernate
26-1	6708-6711	How	
26-2	6712-6714	to	
26-3	6715-6721	update	
26-4	6722-6726	only	
26-5	6727-6728	a	
26-6	6729-6735	subset	
26-7	6736-6738	of	
26-8	6739-6745	entity	
26-9	6746-6756	attributes	
26-10	6757-6762	using	
26-11	6763-6766	JPA	
26-12	6767-6770	and	
26-13	6771-6780	Hibernate	
26-14	6781-6782	@	
26-15	6782-6795	DynamicUpdate	
26-16	6796-6799	How	
26-17	6800-6802	to	
26-18	6803-6806	use	
26-19	6807-6815	external	
26-20	6816-6819	XML	
26-21	6820-6828	mappings	
26-22	6829-6834	files	
26-23	6835-6839	with	
26-24	6840-6843	JPA	
26-25	6844-6847	and	
26-26	6848-6857	Hibernate	
26-27	6858-6861	How	
26-28	6862-6864	to	
26-29	6865-6872	encrypt	
26-30	6873-6876	and	
26-31	6877-6884	decrypt	
26-32	6885-6889	data	
26-33	6890-6894	with	
26-34	6895-6904	Hibernate	
26-35	6905-6908	The	
26-36	6909-6913	best	
26-37	6914-6917	way	
26-38	6918-6920	to	
26-39	6921-6925	soft	
26-40	6926-6932	delete	
26-41	6933-6937	with	
26-42	6938-6947	Hibernate	
26-43	6948-6951	How	
26-44	6952-6954	to	
26-45	6955-6958	fix	
26-46	6959-6960	“	
26-47	6960-6965	wrong	
26-48	6966-6972	column	
26-49	6973-6977	type	
26-50	6978-6989	encountered	
26-51	6989-6990	”	
26-52	6991-7008	schema-validation	
26-53	7009-7015	errors	
26-54	7016-7020	with	
26-55	7021-7024	JPA	
26-56	7025-7028	and	
26-57	7029-7038	Hibernate	

#Text=How to audit entity modifications using the JPA @EntityListeners, @Embedded, and @Embeddable annotations How to use @PrePersist and @PreUpdate on Embeddable with JPA and Hibernate How to map camelCase properties to snake_case column names with Hibernate Identifiers A beginner’s guide to natural and surrogate database keys
27-1	7039-7042	How	
27-2	7043-7045	to	
27-3	7046-7051	audit	
27-4	7052-7058	entity	
27-5	7059-7072	modifications	
27-6	7073-7078	using	
27-7	7079-7082	the	
27-8	7083-7086	JPA	
27-9	7087-7088	@	
27-10	7088-7103	EntityListeners	
27-11	7103-7104	,	
27-12	7105-7106	@	
27-13	7106-7114	Embedded	
27-14	7114-7115	,	
27-15	7116-7119	and	
27-16	7120-7121	@	
27-17	7121-7131	Embeddable	
27-18	7132-7143	annotations	
27-19	7144-7147	How	
27-20	7148-7150	to	
27-21	7151-7154	use	
27-22	7155-7156	@	
27-23	7156-7166	PrePersist	
27-24	7167-7170	and	
27-25	7171-7172	@	
27-26	7172-7181	PreUpdate	
27-27	7182-7184	on	
27-28	7185-7195	Embeddable	
27-29	7196-7200	with	
27-30	7201-7204	JPA	
27-31	7205-7208	and	
27-32	7209-7218	Hibernate	
27-33	7219-7222	How	
27-34	7223-7225	to	
27-35	7226-7229	map	
27-36	7230-7239	camelCase	
27-37	7240-7250	properties	
27-38	7251-7253	to	
27-39	7254-7264	snake_case	
27-40	7265-7271	column	
27-41	7272-7277	names	
27-42	7278-7282	with	
27-43	7283-7292	Hibernate	
27-44	7293-7304	Identifiers	
27-45	7305-7306	A	
27-46	7307-7315	beginner	
27-47	7315-7316	’	
27-48	7316-7317	s	
27-49	7318-7323	guide	
27-50	7324-7326	to	
27-51	7327-7334	natural	
27-52	7335-7338	and	
27-53	7339-7348	surrogate	
27-54	7349-7357	database	
27-55	7358-7362	keys	

#Text=Hibernate Identity, Sequence, and Table (Sequence) generator How to generate JPA entity identifier values using a database sequence The hi/lo algorithm Hibernate pooled and pooled-lo identifier generators A beginner’s guide to Hibernate enhanced identifier generators
28-1	7363-7372	Hibernate	
28-2	7373-7381	Identity	
28-3	7381-7382	,	
28-4	7383-7391	Sequence	
28-5	7391-7392	,	
28-6	7393-7396	and	
28-7	7397-7402	Table	
28-8	7403-7404	(	
28-9	7404-7412	Sequence	
28-10	7412-7413	)	
28-11	7414-7423	generator	
28-12	7424-7427	How	
28-13	7428-7430	to	
28-14	7431-7439	generate	
28-15	7440-7443	JPA	
28-16	7444-7450	entity	
28-17	7451-7461	identifier	
28-18	7462-7468	values	
28-19	7469-7474	using	
28-20	7475-7476	a	
28-21	7477-7485	database	
28-22	7486-7494	sequence	
28-23	7495-7498	The	
28-24	7499-7501	hi	
28-25	7501-7502	/	
28-26	7502-7504	lo	
28-27	7505-7514	algorithm	
28-28	7515-7524	Hibernate	
28-29	7525-7531	pooled	
28-30	7532-7535	and	
28-31	7536-7545	pooled-lo	
28-32	7546-7556	identifier	
28-33	7557-7567	generators	
28-34	7568-7569	A	
28-35	7570-7578	beginner	
28-36	7578-7579	’	
28-37	7579-7580	s	
28-38	7581-7586	guide	
28-39	7587-7589	to	
28-40	7590-7599	Hibernate	
28-41	7600-7608	enhanced	
28-42	7609-7619	identifier	
28-43	7620-7630	generators	

#Text=How to migrate the hilo Hibernate identifier optimizer to the pooled strategy Why you should never use the TABLE identifier generator with JPA and Hibernate Why should not use the AUTO JPA GenerationType with MySQL and Hibernate How to replace the TABLE identifier generator with either SEQUENCE or IDENTITY in a portable way
29-1	7631-7634	How	
29-2	7635-7637	to	
29-3	7638-7645	migrate	
29-4	7646-7649	the	
29-5	7650-7654	hilo	
29-6	7655-7664	Hibernate	
29-7	7665-7675	identifier	
29-8	7676-7685	optimizer	
29-9	7686-7688	to	
29-10	7689-7692	the	
29-11	7693-7699	pooled	
29-12	7700-7708	strategy	
29-13	7709-7712	Why	
29-14	7713-7716	you	
29-15	7717-7723	should	
29-16	7724-7729	never	
29-17	7730-7733	use	
29-18	7734-7737	the	
29-19	7738-7743	TABLE	
29-20	7744-7754	identifier	
29-21	7755-7764	generator	
29-22	7765-7769	with	
29-23	7770-7773	JPA	
29-24	7774-7777	and	
29-25	7778-7787	Hibernate	
29-26	7788-7791	Why	
29-27	7792-7798	should	
29-28	7799-7802	not	
29-29	7803-7806	use	
29-30	7807-7810	the	
29-31	7811-7815	AUTO	
29-32	7816-7819	JPA	
29-33	7820-7834	GenerationType	
29-34	7835-7839	with	
29-35	7840-7845	MySQL	
29-36	7846-7849	and	
29-37	7850-7859	Hibernate	
29-38	7860-7863	How	
29-39	7864-7866	to	
29-40	7867-7874	replace	
29-41	7875-7878	the	
29-42	7879-7884	TABLE	
29-43	7885-7895	identifier	
29-44	7896-7905	generator	
29-45	7906-7910	with	
29-46	7911-7917	either	
29-47	7918-7926	SEQUENCE	
29-48	7927-7929	or	
29-49	7930-7938	IDENTITY	
29-50	7939-7941	in	
29-51	7942-7943	a	
29-52	7944-7952	portable	
29-53	7953-7956	way	

#Text=PostgreSQL SERIAL column and Hibernate IDENTITY generator How to combine the Hibernate assigned generator with a sequence or an identity column How to implement a custom String-based sequence identifier generator with Hibernate MariaDB 10.3 supports database sequences Hibernate and UUID identifiers
30-1	7957-7967	PostgreSQL	
30-2	7968-7974	SERIAL	
30-3	7975-7981	column	
30-4	7982-7985	and	
30-5	7986-7995	Hibernate	
30-6	7996-8004	IDENTITY	
30-7	8005-8014	generator	
30-8	8015-8018	How	
30-9	8019-8021	to	
30-10	8022-8029	combine	
30-11	8030-8033	the	
30-12	8034-8043	Hibernate	
30-13	8044-8052	assigned	
30-14	8053-8062	generator	
30-15	8063-8067	with	
30-16	8068-8069	a	
30-17	8070-8078	sequence	
30-18	8079-8081	or	
30-19	8082-8084	an	
30-20	8085-8093	identity	
30-21	8094-8100	column	
30-22	8101-8104	How	
30-23	8105-8107	to	
30-24	8108-8117	implement	
30-25	8118-8119	a	
30-26	8120-8126	custom	
30-27	8127-8139	String-based	
30-28	8140-8148	sequence	
30-29	8149-8159	identifier	
30-30	8160-8169	generator	
30-31	8170-8174	with	
30-32	8175-8184	Hibernate	
30-33	8185-8192	MariaDB	
30-34	8193-8197	10.3	
30-35	8198-8206	supports	
30-36	8207-8215	database	
30-37	8216-8225	sequences	
30-38	8226-8235	Hibernate	
30-39	8236-8239	and	
30-40	8240-8244	UUID	
30-41	8245-8256	identifiers	

#Text=How to use a JVM or database auto-generated UUID identifier with JPA and Hibernate The best way to map a @NaturalId business key with JPA and Hibernate Inheritance The best way to use entity inheritance with JPA and Hibernate The best way to map the SINGLE_TABLE inheritance with JPA and Hibernate
31-1	8257-8260	How	
31-2	8261-8263	to	
31-3	8264-8267	use	
31-4	8268-8269	a	
31-5	8270-8273	JVM	
31-6	8274-8276	or	
31-7	8277-8285	database	
31-8	8286-8300	auto-generated	
31-9	8301-8305	UUID	
31-10	8306-8316	identifier	
31-11	8317-8321	with	
31-12	8322-8325	JPA	
31-13	8326-8329	and	
31-14	8330-8339	Hibernate	
31-15	8340-8343	The	
31-16	8344-8348	best	
31-17	8349-8352	way	
31-18	8353-8355	to	
31-19	8356-8359	map	
31-20	8360-8361	a	
31-21	8362-8363	@	
31-22	8363-8372	NaturalId	
31-23	8373-8381	business	
31-24	8382-8385	key	
31-25	8386-8390	with	
31-26	8391-8394	JPA	
31-27	8395-8398	and	
31-28	8399-8408	Hibernate	
31-29	8409-8420	Inheritance	
31-30	8421-8424	The	
31-31	8425-8429	best	
31-32	8430-8433	way	
31-33	8434-8436	to	
31-34	8437-8440	use	
31-35	8441-8447	entity	
31-36	8448-8459	inheritance	
31-37	8460-8464	with	
31-38	8465-8468	JPA	
31-39	8469-8472	and	
31-40	8473-8482	Hibernate	
31-41	8483-8486	The	
31-42	8487-8491	best	
31-43	8492-8495	way	
31-44	8496-8498	to	
31-45	8499-8502	map	
31-46	8503-8506	the	
31-47	8507-8519	SINGLE_TABLE	
31-48	8520-8531	inheritance	
31-49	8532-8536	with	
31-50	8537-8540	JPA	
31-51	8541-8544	and	
31-52	8545-8554	Hibernate	

#Text=MySQL 8 support for custom SQL CHECK constraints simplifies SINGLE_TABLE inheritance data integrity validation rules The best way to map the @DiscriminatorColumn with JPA and Hibernate How to inherit properties from a base class entity using @MappedSuperclass with JPA and Hibernate How to order entity subclasses by their class type using JPA and Hibernate
32-1	8555-8560	MySQL	
32-2	8561-8562	8	
32-3	8563-8570	support	
32-4	8571-8574	for	
32-5	8575-8581	custom	
32-6	8582-8585	SQL	
32-7	8586-8591	CHECK	
32-8	8592-8603	constraints	
32-9	8604-8614	simplifies	
32-10	8615-8627	SINGLE_TABLE	
32-11	8628-8639	inheritance	
32-12	8640-8644	data	
32-13	8645-8654	integrity	
32-14	8655-8665	validation	
32-15	8666-8671	rules	
32-16	8672-8675	The	
32-17	8676-8680	best	
32-18	8681-8684	way	
32-19	8685-8687	to	
32-20	8688-8691	map	
32-21	8692-8695	the	
32-22	8696-8697	@	
32-23	8697-8716	DiscriminatorColumn	
32-24	8717-8721	with	
32-25	8722-8725	JPA	
32-26	8726-8729	and	
32-27	8730-8739	Hibernate	
32-28	8740-8743	How	
32-29	8744-8746	to	
32-30	8747-8754	inherit	
32-31	8755-8765	properties	
32-32	8766-8770	from	
32-33	8771-8772	a	
32-34	8773-8777	base	
32-35	8778-8783	class	
32-36	8784-8790	entity	
32-37	8791-8796	using	
32-38	8797-8798	@	
32-39	8798-8814	MappedSuperclass	
32-40	8815-8819	with	
32-41	8820-8823	JPA	
32-42	8824-8827	and	
32-43	8828-8837	Hibernate	
32-44	8838-8841	How	
32-45	8842-8844	to	
32-46	8845-8850	order	
32-47	8851-8857	entity	
32-48	8858-8868	subclasses	
32-49	8869-8871	by	
32-50	8872-8877	their	
32-51	8878-8883	class	
32-52	8884-8888	type	
32-53	8889-8894	using	
32-54	8895-8898	JPA	
32-55	8899-8902	and	
32-56	8903-8912	Hibernate	

#Text=Connection Management The simple scalability equation The anatomy of Connection Pooling Why you should use FlexyPool How to monitor your connection pool with FlexyPool How to monitor a Java EE DataSource
33-1	8913-8923	Connection	
33-2	8924-8934	Management	
33-3	8935-8938	The	
33-4	8939-8945	simple	
33-5	8946-8957	scalability	
33-6	8958-8966	equation	
33-7	8967-8970	The	
33-8	8971-8978	anatomy	
33-9	8979-8981	of	
33-10	8982-8992	Connection	
33-11	8993-9000	Pooling	
33-12	9001-9004	Why	
33-13	9005-9008	you	
33-14	9009-9015	should	
33-15	9016-9019	use	
33-16	9020-9029	FlexyPool	
33-17	9030-9033	How	
33-18	9034-9036	to	
33-19	9037-9044	monitor	
33-20	9045-9049	your	
33-21	9050-9060	connection	
33-22	9061-9065	pool	
33-23	9066-9070	with	
33-24	9071-9080	FlexyPool	
33-25	9081-9084	How	
33-26	9085-9087	to	
33-27	9088-9095	monitor	
33-28	9096-9097	a	
33-29	9098-9102	Java	
33-30	9103-9105	EE	
33-31	9106-9116	DataSource	

#Text=Why you should always use hibernate.connection.provider_disables_autocommit for resource-local JPA transactions How does aggressive connection release work in Hibernate Persistence Context The JPA and Hibernate first-level cache A beginner’s guide to JPA/Hibernate entity state transitions A beginner’s guide to JPA and Hibernate Cascade Types
34-1	9117-9120	Why	
34-2	9121-9124	you	
34-3	9125-9131	should	
34-4	9132-9138	always	
34-5	9139-9142	use	
34-6	9143-9192	hibernate.connection.provider_disables_autocommit	
34-7	9193-9196	for	
34-8	9197-9211	resource-local	
34-9	9212-9215	JPA	
34-10	9216-9228	transactions	
34-11	9229-9232	How	
34-12	9233-9237	does	
34-13	9238-9248	aggressive	
34-14	9249-9259	connection	
34-15	9260-9267	release	
34-16	9268-9272	work	
34-17	9273-9275	in	
34-18	9276-9285	Hibernate	
34-19	9286-9297	Persistence	
34-20	9298-9305	Context	
34-21	9306-9309	The	
34-22	9310-9313	JPA	
34-23	9314-9317	and	
34-24	9318-9327	Hibernate	
34-25	9328-9339	first-level	
34-26	9340-9345	cache	
34-27	9346-9347	A	
34-28	9348-9356	beginner	
34-29	9356-9357	’	
34-30	9357-9358	s	
34-31	9359-9364	guide	
34-32	9365-9367	to	
34-33	9368-9371	JPA	
34-34	9371-9372	/	
34-35	9372-9381	Hibernate	
34-36	9382-9388	entity	
34-37	9389-9394	state	
34-38	9395-9406	transitions	
34-39	9407-9408	A	
34-40	9409-9417	beginner	
34-41	9417-9418	’	
34-42	9418-9419	s	
34-43	9420-9425	guide	
34-44	9426-9428	to	
34-45	9429-9432	JPA	
34-46	9433-9436	and	
34-47	9437-9446	Hibernate	
34-48	9447-9454	Cascade	
34-49	9455-9460	Types	

#Text=How does orphanRemoval work with JPA and Hibernate A beginner’s guide to flush strategies in JPA and Hibernate How does persist and merge work in JPA How do JPA persist, merge and Hibernate save, update, saveOrUpdate work How to merge entity collections with JPA and Hibernate
35-1	9461-9464	How	
35-2	9465-9469	does	
35-3	9470-9483	orphanRemoval	
35-4	9484-9488	work	
35-5	9489-9493	with	
35-6	9494-9497	JPA	
35-7	9498-9501	and	
35-8	9502-9511	Hibernate	
35-9	9512-9513	A	
35-10	9514-9522	beginner	
35-11	9522-9523	’	
35-12	9523-9524	s	
35-13	9525-9530	guide	
35-14	9531-9533	to	
35-15	9534-9539	flush	
35-16	9540-9550	strategies	
35-17	9551-9553	in	
35-18	9554-9557	JPA	
35-19	9558-9561	and	
35-20	9562-9571	Hibernate	
35-21	9572-9575	How	
35-22	9576-9580	does	
35-23	9581-9588	persist	
35-24	9589-9592	and	
35-25	9593-9598	merge	
35-26	9599-9603	work	
35-27	9604-9606	in	
35-28	9607-9610	JPA	
35-29	9611-9614	How	
35-30	9615-9617	do	
35-31	9618-9621	JPA	
35-32	9622-9629	persist	
35-33	9629-9630	,	
35-34	9631-9636	merge	
35-35	9637-9640	and	
35-36	9641-9650	Hibernate	
35-37	9651-9655	save	
35-38	9655-9656	,	
35-39	9657-9663	update	
35-40	9663-9664	,	
35-41	9665-9677	saveOrUpdate	
35-42	9678-9682	work	
35-43	9683-9686	How	
35-44	9687-9689	to	
35-45	9690-9695	merge	
35-46	9696-9702	entity	
35-47	9703-9714	collections	
35-48	9715-9719	with	
35-49	9720-9723	JPA	
35-50	9724-9727	and	
35-51	9728-9737	Hibernate	

#Text=How does AUTO flush strategy work in Hibernate How to override the default Hibernate Session FlushMode How do JPA and Hibernate define the AUTO flush mode A beginner’s guide to Hibernate flush operation order The best way to clone or duplicate an entity with JPA and Hibernate
36-1	9738-9741	How	
36-2	9742-9746	does	
36-3	9747-9751	AUTO	
36-4	9752-9757	flush	
36-5	9758-9766	strategy	
36-6	9767-9771	work	
36-7	9772-9774	in	
36-8	9775-9784	Hibernate	
36-9	9785-9788	How	
36-10	9789-9791	to	
36-11	9792-9800	override	
36-12	9801-9804	the	
36-13	9805-9812	default	
36-14	9813-9822	Hibernate	
36-15	9823-9830	Session	
36-16	9831-9840	FlushMode	
36-17	9841-9844	How	
36-18	9845-9847	do	
36-19	9848-9851	JPA	
36-20	9852-9855	and	
36-21	9856-9865	Hibernate	
36-22	9866-9872	define	
36-23	9873-9876	the	
36-24	9877-9881	AUTO	
36-25	9882-9887	flush	
36-26	9888-9892	mode	
36-27	9893-9894	A	
36-28	9895-9903	beginner	
36-29	9903-9904	’	
36-30	9904-9905	s	
36-31	9906-9911	guide	
36-32	9912-9914	to	
36-33	9915-9924	Hibernate	
36-34	9925-9930	flush	
36-35	9931-9940	operation	
36-36	9941-9946	order	
36-37	9947-9950	The	
36-38	9951-9955	best	
36-39	9956-9959	way	
36-40	9960-9962	to	
36-41	9963-9968	clone	
36-42	9969-9971	or	
36-43	9972-9981	duplicate	
36-44	9982-9984	an	
36-45	9985-9991	entity	
36-46	9992-9996	with	
36-47	9997-10000	JPA	
36-48	10001-10004	and	
36-49	10005-10014	Hibernate	

#Text=How to intercept entity changes with Hibernate event listeners The anatomy of Hibernate dirty checking mechanism How to customize Hibernate dirty checking mechanism Fetching Pagination best practices JPA Default Fetch Plan How do find and getReference EntityManager methods work when using JPA and Hibernate
37-1	10015-10018	How	
37-2	10019-10021	to	
37-3	10022-10031	intercept	
37-4	10032-10038	entity	
37-5	10039-10046	changes	
37-6	10047-10051	with	
37-7	10052-10061	Hibernate	
37-8	10062-10067	event	
37-9	10068-10077	listeners	
37-10	10078-10081	The	
37-11	10082-10089	anatomy	
37-12	10090-10092	of	
37-13	10093-10102	Hibernate	
37-14	10103-10108	dirty	
37-15	10109-10117	checking	
37-16	10118-10127	mechanism	
37-17	10128-10131	How	
37-18	10132-10134	to	
37-19	10135-10144	customize	
37-20	10145-10154	Hibernate	
37-21	10155-10160	dirty	
37-22	10161-10169	checking	
37-23	10170-10179	mechanism	
37-24	10180-10188	Fetching	
37-25	10189-10199	Pagination	
37-26	10200-10204	best	
37-27	10205-10214	practices	
37-28	10215-10218	JPA	
37-29	10219-10226	Default	
37-30	10227-10232	Fetch	
37-31	10233-10237	Plan	
37-32	10238-10241	How	
37-33	10242-10244	do	
37-34	10245-10249	find	
37-35	10250-10253	and	
37-36	10254-10266	getReference	
37-37	10267-10280	EntityManager	
37-38	10281-10288	methods	
37-39	10289-10293	work	
37-40	10294-10298	when	
37-41	10299-10304	using	
37-42	10305-10308	JPA	
37-43	10309-10312	and	
37-44	10313-10322	Hibernate	

#Text=N+1 query problem with JPA and Hibernate The best way to fetch multiple entities by id using JPA and Hibernate A beginner’s guide to Hibernate fetching strategies EAGER fetching is a code smell The best way to map a projection query to a DTO (Data Transfer Object) with JPA and Hibernate
38-1	10323-10324	N	
38-2	10324-10325	+	
38-3	10325-10326	1	
38-4	10327-10332	query	
38-5	10333-10340	problem	
38-6	10341-10345	with	
38-7	10346-10349	JPA	
38-8	10350-10353	and	
38-9	10354-10363	Hibernate	
38-10	10364-10367	The	
38-11	10368-10372	best	
38-12	10373-10376	way	
38-13	10377-10379	to	
38-14	10380-10385	fetch	
38-15	10386-10394	multiple	
38-16	10395-10403	entities	
38-17	10404-10406	by	
38-18	10407-10409	id	
38-19	10410-10415	using	
38-20	10416-10419	JPA	
38-21	10420-10423	and	
38-22	10424-10433	Hibernate	
38-23	10434-10435	A	
38-24	10436-10444	beginner	
38-25	10444-10445	’	
38-26	10445-10446	s	
38-27	10447-10452	guide	
38-28	10453-10455	to	
38-29	10456-10465	Hibernate	
38-30	10466-10474	fetching	
38-31	10475-10485	strategies	
38-32	10486-10491	EAGER	
38-33	10492-10500	fetching	
38-34	10501-10503	is	
38-35	10504-10505	a	
38-36	10506-10510	code	
38-37	10511-10516	smell	
38-38	10517-10520	The	
38-39	10521-10525	best	
38-40	10526-10529	way	
38-41	10530-10532	to	
38-42	10533-10536	map	
38-43	10537-10538	a	
38-44	10539-10549	projection	
38-45	10550-10555	query	
38-46	10556-10558	to	
38-47	10559-10560	a	
38-48	10561-10564	DTO	
38-49	10565-10566	(	
38-50	10566-10570	Data	
38-51	10571-10579	Transfer	
38-52	10580-10586	Object	
38-53	10586-10587	)	
38-54	10588-10592	with	
38-55	10593-10596	JPA	
38-56	10597-10600	and	
38-57	10601-10610	Hibernate	

#Text=How to write a compact DTO projection query with JPA How to fetch a one-to-many DTO projection with JPA and Hibernate The best way to handle the LazyInitializationException The best way to lazy load entity attributes using JPA and Hibernate Hibernate LazyToOne annotation
39-1	10611-10614	How	
39-2	10615-10617	to	
39-3	10618-10623	write	
39-4	10624-10625	a	
39-5	10626-10633	compact	
39-6	10634-10637	DTO	
39-7	10638-10648	projection	
39-8	10649-10654	query	
39-9	10655-10659	with	
39-10	10660-10663	JPA	
39-11	10664-10667	How	
39-12	10668-10670	to	
39-13	10671-10676	fetch	
39-14	10677-10678	a	
39-15	10679-10690	one-to-many	
39-16	10691-10694	DTO	
39-17	10695-10705	projection	
39-18	10706-10710	with	
39-19	10711-10714	JPA	
39-20	10715-10718	and	
39-21	10719-10728	Hibernate	
39-22	10729-10732	The	
39-23	10733-10737	best	
39-24	10738-10741	way	
39-25	10742-10744	to	
39-26	10745-10751	handle	
39-27	10752-10755	the	
39-28	10756-10783	LazyInitializationException	
39-29	10784-10787	The	
39-30	10788-10792	best	
39-31	10793-10796	way	
39-32	10797-10799	to	
39-33	10800-10804	lazy	
39-34	10805-10809	load	
39-35	10810-10816	entity	
39-36	10817-10827	attributes	
39-37	10828-10833	using	
39-38	10834-10837	JPA	
39-39	10838-10841	and	
39-40	10842-10851	Hibernate	
39-41	10852-10861	Hibernate	
39-42	10862-10871	LazyToOne	
39-43	10872-10882	annotation	

#Text=The best way to initialize LAZY entity and collection proxies with JPA and Hibernate Why you should avoid EXTRA Lazy Collections with Hibernate ResultSet statement fetching with JDBC and Hibernate The best way to fix the Hibernate MultipleBagFetchException How to fetch entities multiple levels deep with Hibernate
40-1	10883-10886	The	
40-2	10887-10891	best	
40-3	10892-10895	way	
40-4	10896-10898	to	
40-5	10899-10909	initialize	
40-6	10910-10914	LAZY	
40-7	10915-10921	entity	
40-8	10922-10925	and	
40-9	10926-10936	collection	
40-10	10937-10944	proxies	
40-11	10945-10949	with	
40-12	10950-10953	JPA	
40-13	10954-10957	and	
40-14	10958-10967	Hibernate	
40-15	10968-10971	Why	
40-16	10972-10975	you	
40-17	10976-10982	should	
40-18	10983-10988	avoid	
40-19	10989-10994	EXTRA	
40-20	10995-10999	Lazy	
40-21	11000-11011	Collections	
40-22	11012-11016	with	
40-23	11017-11026	Hibernate	
40-24	11027-11036	ResultSet	
40-25	11037-11046	statement	
40-26	11047-11055	fetching	
40-27	11056-11060	with	
40-28	11061-11065	JDBC	
40-29	11066-11069	and	
40-30	11070-11079	Hibernate	
40-31	11080-11083	The	
40-32	11084-11088	best	
40-33	11089-11092	way	
40-34	11093-11095	to	
40-35	11096-11099	fix	
40-36	11100-11103	the	
40-37	11104-11113	Hibernate	
40-38	11114-11139	MultipleBagFetchException	
40-39	11140-11143	How	
40-40	11144-11146	to	
40-41	11147-11152	fetch	
40-42	11153-11161	entities	
40-43	11162-11170	multiple	
40-44	11171-11177	levels	
40-45	11178-11182	deep	
40-46	11183-11187	with	
40-47	11188-11197	Hibernate	

#Text=The Open Session In View Anti-Pattern The hibernate.enable_lazy_load_no_trans Anti-Pattern How does MySQL result set streaming perform vs fetching the whole JDBC ResultSet at once How does a JPA Proxy work and how to unproxy it with Hibernate
41-1	11198-11201	The	
41-2	11202-11206	Open	
41-3	11207-11214	Session	
41-4	11215-11217	In	
41-5	11218-11222	View	
41-6	11223-11235	Anti-Pattern	
41-7	11236-11239	The	
41-8	11240-11275	hibernate.enable_lazy_load_no_trans	
41-9	11276-11288	Anti-Pattern	
41-10	11289-11292	How	
41-11	11293-11297	does	
41-12	11298-11303	MySQL	
41-13	11304-11310	result	
41-14	11311-11314	set	
41-15	11315-11324	streaming	
41-16	11325-11332	perform	
41-17	11333-11335	vs	
41-18	11336-11344	fetching	
41-19	11345-11348	the	
41-20	11349-11354	whole	
41-21	11355-11359	JDBC	
41-22	11360-11369	ResultSet	
41-23	11370-11372	at	
41-24	11373-11377	once	
41-25	11378-11381	How	
41-26	11382-11386	does	
41-27	11387-11388	a	
41-28	11389-11392	JPA	
41-29	11393-11398	Proxy	
41-30	11399-11403	work	
41-31	11404-11407	and	
41-32	11408-11411	how	
41-33	11412-11414	to	
41-34	11415-11422	unproxy	
41-35	11423-11425	it	
41-36	11426-11430	with	
41-37	11431-11440	Hibernate	

#Text=The best way to fix the Hibernate “HHH000104: firstResult/maxResults specified with collection fetch; applying in memory!” warning message How to detect HHH000104 issues with the hibernate.query.fail_on_pagination_over_collection_fetch configuration property Bytecode Enhancement Maven and Gradle Hibernate Enhance Plugin
42-1	11441-11444	The	
42-2	11445-11449	best	
42-3	11450-11453	way	
42-4	11454-11456	to	
42-5	11457-11460	fix	
42-6	11461-11464	the	
42-7	11465-11474	Hibernate	
42-8	11475-11476	“	
42-9	11476-11485	HHH000104	
42-10	11485-11486	:	
42-11	11487-11498	firstResult	
42-12	11498-11499	/	
42-13	11499-11509	maxResults	
42-14	11510-11519	specified	
42-15	11520-11524	with	
42-16	11525-11535	collection	
42-17	11536-11541	fetch	
42-18	11541-11542	;	
42-19	11543-11551	applying	
42-20	11552-11554	in	
42-21	11555-11561	memory	
42-22	11561-11562	!	
42-23	11562-11563	”	
42-24	11564-11571	warning	
42-25	11572-11579	message	
42-26	11580-11583	How	
42-27	11584-11586	to	
42-28	11587-11593	detect	
42-29	11594-11603	HHH000104	
42-30	11604-11610	issues	
42-31	11611-11615	with	
42-32	11616-11619	the	
42-33	11620-11676	hibernate.query.fail_on_pagination_over_collection_fetch	
42-34	11677-11690	configuration	
42-35	11691-11699	property	
42-36	11700-11708	Bytecode	
42-37	11709-11720	Enhancement	
42-38	11721-11726	Maven	
42-39	11727-11730	and	
42-40	11731-11737	Gradle	
42-41	11738-11747	Hibernate	
42-42	11748-11755	Enhance	
42-43	11756-11762	Plugin	

#Text=How to enable bytecode enhancement dirty checking in Hibernate How does the bytecode enhancement dirty checking mechanism work in Hibernate 4.3 Concurrency Control Data knowledge stack A beginner’s guide to ACID and database transactions Optimistc vs. Pessimistic Locking
43-1	11763-11766	How	
43-2	11767-11769	to	
43-3	11770-11776	enable	
43-4	11777-11785	bytecode	
43-5	11786-11797	enhancement	
43-6	11798-11803	dirty	
43-7	11804-11812	checking	
43-8	11813-11815	in	
43-9	11816-11825	Hibernate	
43-10	11826-11829	How	
43-11	11830-11834	does	
43-12	11835-11838	the	
43-13	11839-11847	bytecode	
43-14	11848-11859	enhancement	
43-15	11860-11865	dirty	
43-16	11866-11874	checking	
43-17	11875-11884	mechanism	
43-18	11885-11889	work	
43-19	11890-11892	in	
43-20	11893-11902	Hibernate	
43-21	11903-11906	4.3	
43-22	11907-11918	Concurrency	
43-23	11919-11926	Control	
43-24	11927-11931	Data	
43-25	11932-11941	knowledge	
43-26	11942-11947	stack	
43-27	11948-11949	A	
43-28	11950-11958	beginner	
43-29	11958-11959	’	
43-30	11959-11960	s	
43-31	11961-11966	guide	
43-32	11967-11969	to	
43-33	11970-11974	ACID	
43-34	11975-11978	and	
43-35	11979-11987	database	
43-36	11988-12000	transactions	
43-37	12001-12010	Optimistc	
43-38	12011-12013	vs	
43-39	12013-12014	.	
43-40	12015-12026	Pessimistic	
43-41	12027-12034	Locking	

#Text=A beginner’s guide to database deadlock How does the 2PL (Two-Phase Locking) algorithm work How does MVCC (Multi-Version Concurrency Control) work How to get the current database transaction id How to log the database transaction id using MDC (Mapped Diagnostic Context)
44-1	12035-12036	A	
44-2	12037-12045	beginner	
44-3	12045-12046	’	
44-4	12046-12047	s	
44-5	12048-12053	guide	
44-6	12054-12056	to	
44-7	12057-12065	database	
44-8	12066-12074	deadlock	
44-9	12075-12078	How	
44-10	12079-12083	does	
44-11	12084-12087	the	
44-12	12088-12091	2PL	
44-13	12092-12093	(	
44-14	12093-12102	Two-Phase	
44-15	12103-12110	Locking	
44-16	12110-12111	)	
44-17	12112-12121	algorithm	
44-18	12122-12126	work	
44-19	12127-12130	How	
44-20	12131-12135	does	
44-21	12136-12140	MVCC	
44-22	12141-12142	(	
44-23	12142-12155	Multi-Version	
44-24	12156-12167	Concurrency	
44-25	12168-12175	Control	
44-26	12175-12176	)	
44-27	12177-12181	work	
44-28	12182-12185	How	
44-29	12186-12188	to	
44-30	12189-12192	get	
44-31	12193-12196	the	
44-32	12197-12204	current	
44-33	12205-12213	database	
44-34	12214-12225	transaction	
44-35	12226-12228	id	
44-36	12229-12232	How	
44-37	12233-12235	to	
44-38	12236-12239	log	
44-39	12240-12243	the	
44-40	12244-12252	database	
44-41	12253-12264	transaction	
44-42	12265-12267	id	
44-43	12268-12273	using	
44-44	12274-12277	MDC	
44-45	12278-12279	(	
44-46	12279-12285	Mapped	
44-47	12286-12296	Diagnostic	
44-48	12297-12304	Context	
44-49	12304-12305	)	

#Text=How does the entity version property work when merging with JPA and Hibernate Optimistic locking version property with JPA and Hibernate The best way to map an entity version property with JPA and Hibernate How do PostgreSQL advisory locks work How to implement a database job queue using SKIP LOCKED
45-1	12306-12309	How	
45-2	12310-12314	does	
45-3	12315-12318	the	
45-4	12319-12325	entity	
45-5	12326-12333	version	
45-6	12334-12342	property	
45-7	12343-12347	work	
45-8	12348-12352	when	
45-9	12353-12360	merging	
45-10	12361-12365	with	
45-11	12366-12369	JPA	
45-12	12370-12373	and	
45-13	12374-12383	Hibernate	
45-14	12384-12394	Optimistic	
45-15	12395-12402	locking	
45-16	12403-12410	version	
45-17	12411-12419	property	
45-18	12420-12424	with	
45-19	12425-12428	JPA	
45-20	12429-12432	and	
45-21	12433-12442	Hibernate	
45-22	12443-12446	The	
45-23	12447-12451	best	
45-24	12452-12455	way	
45-25	12456-12458	to	
45-26	12459-12462	map	
45-27	12463-12465	an	
45-28	12466-12472	entity	
45-29	12473-12480	version	
45-30	12481-12489	property	
45-31	12490-12494	with	
45-32	12495-12498	JPA	
45-33	12499-12502	and	
45-34	12503-12512	Hibernate	
45-35	12513-12516	How	
45-36	12517-12519	do	
45-37	12520-12530	PostgreSQL	
45-38	12531-12539	advisory	
45-39	12540-12545	locks	
45-40	12546-12550	work	
45-41	12551-12554	How	
45-42	12555-12557	to	
45-43	12558-12567	implement	
45-44	12568-12569	a	
45-45	12570-12578	database	
45-46	12579-12582	job	
45-47	12583-12588	queue	
45-48	12589-12594	using	
45-49	12595-12599	SKIP	
45-50	12600-12606	LOCKED	

#Text=A beginner’s guide to database locking and the lost update phenomena How to prevent lost updates in long conversations A beginner’s guide to Dirty Read anomaly A beginner’s guide to Non-Repeatable Read anomaly A beginner’s guide to Phantom Read anomaly
46-1	12607-12608	A	
46-2	12609-12617	beginner	
46-3	12617-12618	’	
46-4	12618-12619	s	
46-5	12620-12625	guide	
46-6	12626-12628	to	
46-7	12629-12637	database	
46-8	12638-12645	locking	
46-9	12646-12649	and	
46-10	12650-12653	the	
46-11	12654-12658	lost	
46-12	12659-12665	update	
46-13	12666-12675	phenomena	
46-14	12676-12679	How	
46-15	12680-12682	to	
46-16	12683-12690	prevent	
46-17	12691-12695	lost	
46-18	12696-12703	updates	
46-19	12704-12706	in	
46-20	12707-12711	long	
46-21	12712-12725	conversations	
46-22	12726-12727	A	
46-23	12728-12736	beginner	
46-24	12736-12737	’	
46-25	12737-12738	s	
46-26	12739-12744	guide	
46-27	12745-12747	to	
46-28	12748-12753	Dirty	
46-29	12754-12758	Read	
46-30	12759-12766	anomaly	
46-31	12767-12768	A	
46-32	12769-12777	beginner	
46-33	12777-12778	’	
46-34	12778-12779	s	
46-35	12780-12785	guide	
46-36	12786-12788	to	
46-37	12789-12803	Non-Repeatable	
46-38	12804-12808	Read	
46-39	12809-12816	anomaly	
46-40	12817-12818	A	
46-41	12819-12827	beginner	
46-42	12827-12828	’	
46-43	12828-12829	s	
46-44	12830-12835	guide	
46-45	12836-12838	to	
46-46	12839-12846	Phantom	
46-47	12847-12851	Read	
46-48	12852-12859	anomaly	

#Text=A beginner’s guide to Read and Write Skew phenomena A beginner’s guide to the Write Skew anomaly, and how it differs between 2PL and MVCC How does database pessimistic locking interact with INSERT, UPDATE, and DELETE SQL statements
47-1	12860-12861	A	
47-2	12862-12870	beginner	
47-3	12870-12871	’	
47-4	12871-12872	s	
47-5	12873-12878	guide	
47-6	12879-12881	to	
47-7	12882-12886	Read	
47-8	12887-12890	and	
47-9	12891-12896	Write	
47-10	12897-12901	Skew	
47-11	12902-12911	phenomena	
47-12	12912-12913	A	
47-13	12914-12922	beginner	
47-14	12922-12923	’	
47-15	12923-12924	s	
47-16	12925-12930	guide	
47-17	12931-12933	to	
47-18	12934-12937	the	
47-19	12938-12943	Write	
47-20	12944-12948	Skew	
47-21	12949-12956	anomaly	
47-22	12956-12957	,	
47-23	12958-12961	and	
47-24	12962-12965	how	
47-25	12966-12968	it	
47-26	12969-12976	differs	
47-27	12977-12984	between	
47-28	12985-12988	2PL	
47-29	12989-12992	and	
47-30	12993-12997	MVCC	
47-31	12998-13001	How	
47-32	13002-13006	does	
47-33	13007-13015	database	
47-34	13016-13027	pessimistic	
47-35	13028-13035	locking	
47-36	13036-13044	interact	
47-37	13045-13049	with	
47-38	13050-13056	INSERT	
47-39	13056-13057	,	
47-40	13058-13064	UPDATE	
47-41	13064-13065	,	
47-42	13066-13069	and	
47-43	13070-13076	DELETE	
47-44	13077-13080	SQL	
47-45	13081-13091	statements	

#Text=How do UPSERT and MERGE work in Oracle, SQL Server, PostgreSQL, and MySQL Logical vs physical clock optimistic locking How to retry JPA transactions after an OptimisticLockException How does Hibernate guarantee application-level repeatable reads Hibernate collections optimistic locking How to address the OptimisticLockException in JPA and Hibernate
48-1	13092-13095	How	
48-2	13096-13098	do	
48-3	13099-13105	UPSERT	
48-4	13106-13109	and	
48-5	13110-13115	MERGE	
48-6	13116-13120	work	
48-7	13121-13123	in	
48-8	13124-13130	Oracle	
48-9	13130-13131	,	
48-10	13132-13135	SQL	
48-11	13136-13142	Server	
48-12	13142-13143	,	
48-13	13144-13154	PostgreSQL	
48-14	13154-13155	,	
48-15	13156-13159	and	
48-16	13160-13165	MySQL	
48-17	13166-13173	Logical	
48-18	13174-13176	vs	
48-19	13177-13185	physical	
48-20	13186-13191	clock	
48-21	13192-13202	optimistic	
48-22	13203-13210	locking	
48-23	13211-13214	How	
48-24	13215-13217	to	
48-25	13218-13223	retry	
48-26	13224-13227	JPA	
48-27	13228-13240	transactions	
48-28	13241-13246	after	
48-29	13247-13249	an	
48-30	13250-13273	OptimisticLockException	
48-31	13274-13277	How	
48-32	13278-13282	does	
48-33	13283-13292	Hibernate	
48-34	13293-13302	guarantee	
48-35	13303-13320	application-level	
48-36	13321-13331	repeatable	
48-37	13332-13337	reads	
48-38	13338-13347	Hibernate	
48-39	13348-13359	collections	
48-40	13360-13370	optimistic	
48-41	13371-13378	locking	
48-42	13379-13382	How	
48-43	13383-13385	to	
48-44	13386-13393	address	
48-45	13394-13397	the	
48-46	13398-13421	OptimisticLockException	
48-47	13422-13424	in	
48-48	13425-13428	JPA	
48-49	13429-13432	and	
48-50	13433-13442	Hibernate	

#Text=How to prevent OptimisticLockException with Hibernate versionless optimistic locking A beginner’s guide to transaction isolation levels in enterprise Java A beginner’s guide to Java Persistence locking How does LockModeType.OPTIMISTIC work in JPA and Hibernate How to fix optimistic locking race conditions with pessimistic locking
49-1	13443-13446	How	
49-2	13447-13449	to	
49-3	13450-13457	prevent	
49-4	13458-13481	OptimisticLockException	
49-5	13482-13486	with	
49-6	13487-13496	Hibernate	
49-7	13497-13508	versionless	
49-8	13509-13519	optimistic	
49-9	13520-13527	locking	
49-10	13528-13529	A	
49-11	13530-13538	beginner	
49-12	13538-13539	’	
49-13	13539-13540	s	
49-14	13541-13546	guide	
49-15	13547-13549	to	
49-16	13550-13561	transaction	
49-17	13562-13571	isolation	
49-18	13572-13578	levels	
49-19	13579-13581	in	
49-20	13582-13592	enterprise	
49-21	13593-13597	Java	
49-22	13598-13599	A	
49-23	13600-13608	beginner	
49-24	13608-13609	’	
49-25	13609-13610	s	
49-26	13611-13616	guide	
49-27	13617-13619	to	
49-28	13620-13624	Java	
49-29	13625-13636	Persistence	
49-30	13637-13644	locking	
49-31	13645-13648	How	
49-32	13649-13653	does	
49-33	13654-13677	LockModeType.OPTIMISTIC	
49-34	13678-13682	work	
49-35	13683-13685	in	
49-36	13686-13689	JPA	
49-37	13690-13693	and	
49-38	13694-13703	Hibernate	
49-39	13704-13707	How	
49-40	13708-13710	to	
49-41	13711-13714	fix	
49-42	13715-13725	optimistic	
49-43	13726-13733	locking	
49-44	13734-13738	race	
49-45	13739-13749	conditions	
49-46	13750-13754	with	
49-47	13755-13766	pessimistic	
49-48	13767-13774	locking	

#Text=How does LockModeType.OPTIMISTIC_FORCE_INCREMENT work in JPA and Hibernate How does LockModeType.PESSIMISTIC_FORCE_INCREMENT work in JPA and Hibernate How do LockModeType.PESSIMISTIC_READ and LockModeType.PESSIMISTIC_WRITE work in JPA and Hibernate
50-1	13775-13778	How	
50-2	13779-13783	does	
50-3	13784-13823	LockModeType.OPTIMISTIC_FORCE_INCREMENT	
50-4	13824-13828	work	
50-5	13829-13831	in	
50-6	13832-13835	JPA	
50-7	13836-13839	and	
50-8	13840-13849	Hibernate	
50-9	13850-13853	How	
50-10	13854-13858	does	
50-11	13859-13899	LockModeType.PESSIMISTIC_FORCE_INCREMENT	
50-12	13900-13904	work	
50-13	13905-13907	in	
50-14	13908-13911	JPA	
50-15	13912-13915	and	
50-16	13916-13925	Hibernate	
50-17	13926-13929	How	
50-18	13930-13932	do	
50-19	13933-13962	LockModeType.PESSIMISTIC_READ	
50-20	13963-13966	and	
50-21	13967-13997	LockModeType.PESSIMISTIC_WRITE	
50-22	13998-14002	work	
50-23	14003-14005	in	
50-24	14006-14009	JPA	
50-25	14010-14013	and	
50-26	14014-14023	Hibernate	

#Text=How does CascadeType.LOCK works in JPA and Hibernate How to increment the parent entity version whenever a child entity gets modified with JPA and Hibernate Spring read-only transaction Hibernate optimization Read-write and read-only transaction routing with Spring Batching Batch processing best practices
51-1	14024-14027	How	
51-2	14028-14032	does	
51-3	14033-14049	CascadeType.LOCK	
51-4	14050-14055	works	
51-5	14056-14058	in	
51-6	14059-14062	JPA	
51-7	14063-14066	and	
51-8	14067-14076	Hibernate	
51-9	14077-14080	How	
51-10	14081-14083	to	
51-11	14084-14093	increment	
51-12	14094-14097	the	
51-13	14098-14104	parent	
51-14	14105-14111	entity	
51-15	14112-14119	version	
51-16	14120-14128	whenever	
51-17	14129-14130	a	
51-18	14131-14136	child	
51-19	14137-14143	entity	
51-20	14144-14148	gets	
51-21	14149-14157	modified	
51-22	14158-14162	with	
51-23	14163-14166	JPA	
51-24	14167-14170	and	
51-25	14171-14180	Hibernate	
51-26	14181-14187	Spring	
51-27	14188-14197	read-only	
51-28	14198-14209	transaction	
51-29	14210-14219	Hibernate	
51-30	14220-14232	optimization	
51-31	14233-14243	Read-write	
51-32	14244-14247	and	
51-33	14248-14257	read-only	
51-34	14258-14269	transaction	
51-35	14270-14277	routing	
51-36	14278-14282	with	
51-37	14283-14289	Spring	
51-38	14290-14298	Batching	
51-39	14299-14304	Batch	
51-40	14305-14315	processing	
51-41	14316-14320	best	
51-42	14321-14330	practices	

#Text=The best way to do batch processing with JPA and Hibernate How to batch INSERT and UPDATE statements with Hibernate How to batch DELETE statements with Hibernate How to customize the JDBC batch size for each Persistence Context with Hibernate How to find which statement failed in a JDBC Batch Update
52-1	14331-14334	The	
52-2	14335-14339	best	
52-3	14340-14343	way	
52-4	14344-14346	to	
52-5	14347-14349	do	
52-6	14350-14355	batch	
52-7	14356-14366	processing	
52-8	14367-14371	with	
52-9	14372-14375	JPA	
52-10	14376-14379	and	
52-11	14380-14389	Hibernate	
52-12	14390-14393	How	
52-13	14394-14396	to	
52-14	14397-14402	batch	
52-15	14403-14409	INSERT	
52-16	14410-14413	and	
52-17	14414-14420	UPDATE	
52-18	14421-14431	statements	
52-19	14432-14436	with	
52-20	14437-14446	Hibernate	
52-21	14447-14450	How	
52-22	14451-14453	to	
52-23	14454-14459	batch	
52-24	14460-14466	DELETE	
52-25	14467-14477	statements	
52-26	14478-14482	with	
52-27	14483-14492	Hibernate	
52-28	14493-14496	How	
52-29	14497-14499	to	
52-30	14500-14509	customize	
52-31	14510-14513	the	
52-32	14514-14518	JDBC	
52-33	14519-14524	batch	
52-34	14525-14529	size	
52-35	14530-14533	for	
52-36	14534-14538	each	
52-37	14539-14550	Persistence	
52-38	14551-14558	Context	
52-39	14559-14563	with	
52-40	14564-14573	Hibernate	
52-41	14574-14577	How	
52-42	14578-14580	to	
52-43	14581-14585	find	
52-44	14586-14591	which	
52-45	14592-14601	statement	
52-46	14602-14608	failed	
52-47	14609-14611	in	
52-48	14612-14613	a	
52-49	14614-14618	JDBC	
52-50	14619-14624	Batch	
52-51	14625-14631	Update	

#Text=How to optimize the merge operation using update while batching with JPA and Hibernate How to enable multi-row inserts with the PostgreSQL reWriteBatchedInserts configuration property Queries A beginner’s guide to JPA and Hibernate Query setParameter method A beginner’s guide to JPA and Hibernate query hints
53-1	14632-14635	How	
53-2	14636-14638	to	
53-3	14639-14647	optimize	
53-4	14648-14651	the	
53-5	14652-14657	merge	
53-6	14658-14667	operation	
53-7	14668-14673	using	
53-8	14674-14680	update	
53-9	14681-14686	while	
53-10	14687-14695	batching	
53-11	14696-14700	with	
53-12	14701-14704	JPA	
53-13	14705-14708	and	
53-14	14709-14718	Hibernate	
53-15	14719-14722	How	
53-16	14723-14725	to	
53-17	14726-14732	enable	
53-18	14733-14742	multi-row	
53-19	14743-14750	inserts	
53-20	14751-14755	with	
53-21	14756-14759	the	
53-22	14760-14770	PostgreSQL	
53-23	14771-14792	reWriteBatchedInserts	
53-24	14793-14806	configuration	
53-25	14807-14815	property	
53-26	14816-14823	Queries	
53-27	14824-14825	A	
53-28	14826-14834	beginner	
53-29	14834-14835	’	
53-30	14835-14836	s	
53-31	14837-14842	guide	
53-32	14843-14845	to	
53-33	14846-14849	JPA	
53-34	14850-14853	and	
53-35	14854-14863	Hibernate	
53-36	14864-14869	Query	
53-37	14870-14882	setParameter	
53-38	14883-14889	method	
53-39	14890-14891	A	
53-40	14892-14900	beginner	
53-41	14900-14901	’	
53-42	14901-14902	s	
53-43	14903-14908	guide	
53-44	14909-14911	to	
53-45	14912-14915	JPA	
53-46	14916-14919	and	
53-47	14920-14929	Hibernate	
53-48	14930-14935	query	
53-49	14936-14941	hints	

#Text=Query timeout with JPA and Hibernate The best way to use the JPA SqlResultSetMapping How to return a Map result from a JPA or Hibernate query How to improve statement caching efficiency with IN clause parameter padding
54-1	14942-14947	Query	
54-2	14948-14955	timeout	
54-3	14956-14960	with	
54-4	14961-14964	JPA	
54-5	14965-14968	and	
54-6	14969-14978	Hibernate	
54-7	14979-14982	The	
54-8	14983-14987	best	
54-9	14988-14991	way	
54-10	14992-14994	to	
54-11	14995-14998	use	
54-12	14999-15002	the	
54-13	15003-15006	JPA	
54-14	15007-15026	SqlResultSetMapping	
54-15	15027-15030	How	
54-16	15031-15033	to	
54-17	15034-15040	return	
54-18	15041-15042	a	
54-19	15043-15046	Map	
54-20	15047-15053	result	
54-21	15054-15058	from	
54-22	15059-15060	a	
54-23	15061-15064	JPA	
54-24	15065-15067	or	
54-25	15068-15077	Hibernate	
54-26	15078-15083	query	
54-27	15084-15087	How	
54-28	15088-15090	to	
54-29	15091-15098	improve	
54-30	15099-15108	statement	
54-31	15109-15116	caching	
54-32	15117-15127	efficiency	
54-33	15128-15132	with	
54-34	15133-15135	IN	
54-35	15136-15142	clause	
54-36	15143-15152	parameter	
54-37	15153-15160	padding	

#Text=A beginner’s guide to the Hibernate JPQL and Native Query Plan Cache How to optimize JPQL and Criteria API query plans with Hibernate Statistics How to intercept and modify SQL queries with the Hibernate StatementInspector The best way to use the JPQL DISTINCT keyword with JPA and Hibernate
55-1	15161-15162	A	
55-2	15163-15171	beginner	
55-3	15171-15172	’	
55-4	15172-15173	s	
55-5	15174-15179	guide	
55-6	15180-15182	to	
55-7	15183-15186	the	
55-8	15187-15196	Hibernate	
55-9	15197-15201	JPQL	
55-10	15202-15205	and	
55-11	15206-15212	Native	
55-12	15213-15218	Query	
55-13	15219-15223	Plan	
55-14	15224-15229	Cache	
55-15	15230-15233	How	
55-16	15234-15236	to	
55-17	15237-15245	optimize	
55-18	15246-15250	JPQL	
55-19	15251-15254	and	
55-20	15255-15263	Criteria	
55-21	15264-15267	API	
55-22	15268-15273	query	
55-23	15274-15279	plans	
55-24	15280-15284	with	
55-25	15285-15294	Hibernate	
55-26	15295-15305	Statistics	
55-27	15306-15309	How	
55-28	15310-15312	to	
55-29	15313-15322	intercept	
55-30	15323-15326	and	
55-31	15327-15333	modify	
55-32	15334-15337	SQL	
55-33	15338-15345	queries	
55-34	15346-15350	with	
55-35	15351-15354	the	
55-36	15355-15364	Hibernate	
55-37	15365-15383	StatementInspector	
55-38	15384-15387	The	
55-39	15388-15392	best	
55-40	15393-15396	way	
55-41	15397-15399	to	
55-42	15400-15403	use	
55-43	15404-15407	the	
55-44	15408-15412	JPQL	
55-45	15413-15421	DISTINCT	
55-46	15422-15429	keyword	
55-47	15430-15434	with	
55-48	15435-15438	JPA	
55-49	15439-15442	and	
55-50	15443-15452	Hibernate	

#Text=How to JOIN unrelated entities with JPA and Hibernate How to resolve the Hibernate global database schema and catalog for native SQL queries How to map table rows to columns using SQL PIVOT or CASE expressions The JPA EntityManager createNativeQuery is a Magic Wand
56-1	15453-15456	How	
56-2	15457-15459	to	
56-3	15460-15464	JOIN	
56-4	15465-15474	unrelated	
56-5	15475-15483	entities	
56-6	15484-15488	with	
56-7	15489-15492	JPA	
56-8	15493-15496	and	
56-9	15497-15506	Hibernate	
56-10	15507-15510	How	
56-11	15511-15513	to	
56-12	15514-15521	resolve	
56-13	15522-15525	the	
56-14	15526-15535	Hibernate	
56-15	15536-15542	global	
56-16	15543-15551	database	
56-17	15552-15558	schema	
56-18	15559-15562	and	
56-19	15563-15570	catalog	
56-20	15571-15574	for	
56-21	15575-15581	native	
56-22	15582-15585	SQL	
56-23	15586-15593	queries	
56-24	15594-15597	How	
56-25	15598-15600	to	
56-26	15601-15604	map	
56-27	15605-15610	table	
56-28	15611-15615	rows	
56-29	15616-15618	to	
56-30	15619-15626	columns	
56-31	15627-15632	using	
56-32	15633-15636	SQL	
56-33	15637-15642	PIVOT	
56-34	15643-15645	or	
56-35	15646-15650	CASE	
56-36	15651-15662	expressions	
56-37	15663-15666	The	
56-38	15667-15670	JPA	
56-39	15671-15684	EntityManager	
56-40	15685-15702	createNativeQuery	
56-41	15703-15705	is	
56-42	15706-15707	a	
56-43	15708-15713	Magic	
56-44	15714-15718	Wand	

#Text=Why you should use the Hibernate ResultTransformer to customize result set mappings The best way to use a Hibernate ResultTransformer Why you should definitely learn SQL Window Functions Query pagination with JPA and Hibernate What’s new in JPA 2.2 – Stream the result of a Query execution
57-1	15719-15722	Why	
57-2	15723-15726	you	
57-3	15727-15733	should	
57-4	15734-15737	use	
57-5	15738-15741	the	
57-6	15742-15751	Hibernate	
57-7	15752-15769	ResultTransformer	
57-8	15770-15772	to	
57-9	15773-15782	customize	
57-10	15783-15789	result	
57-11	15790-15793	set	
57-12	15794-15802	mappings	
57-13	15803-15806	The	
57-14	15807-15811	best	
57-15	15812-15815	way	
57-16	15816-15818	to	
57-17	15819-15822	use	
57-18	15823-15824	a	
57-19	15825-15834	Hibernate	
57-20	15835-15852	ResultTransformer	
57-21	15853-15856	Why	
57-22	15857-15860	you	
57-23	15861-15867	should	
57-24	15868-15878	definitely	
57-25	15879-15884	learn	
57-26	15885-15888	SQL	
57-27	15889-15895	Window	
57-28	15896-15905	Functions	
57-29	15906-15911	Query	
57-30	15912-15922	pagination	
57-31	15923-15927	with	
57-32	15928-15931	JPA	
57-33	15932-15935	and	
57-34	15936-15945	Hibernate	
57-35	15946-15950	What	
57-36	15950-15951	’	
57-37	15951-15952	s	
57-38	15953-15956	new	
57-39	15957-15959	in	
57-40	15960-15963	JPA	
57-41	15964-15967	2.2	
57-42	15968-15969	–	
57-43	15970-15976	Stream	
57-44	15977-15980	the	
57-45	15981-15987	result	
57-46	15988-15990	of	
57-47	15991-15992	a	
57-48	15993-15998	Query	
57-49	15999-16008	execution	

#Text=How to get the actual execution plan for an Oracle SQL query using Hibernate query hints How to solve the PostgreSQL :: cast operator issue with JPA and Hibernate The best way to use SQL functions in JPQL or Criteria API queries with JPA and Hibernate How to execute SQL functions with multiple parameters in a JPQL query with Hibernate
58-1	16009-16012	How	
58-2	16013-16015	to	
58-3	16016-16019	get	
58-4	16020-16023	the	
58-5	16024-16030	actual	
58-6	16031-16040	execution	
58-7	16041-16045	plan	
58-8	16046-16049	for	
58-9	16050-16052	an	
58-10	16053-16059	Oracle	
58-11	16060-16063	SQL	
58-12	16064-16069	query	
58-13	16070-16075	using	
58-14	16076-16085	Hibernate	
58-15	16086-16091	query	
58-16	16092-16097	hints	
58-17	16098-16101	How	
58-18	16102-16104	to	
58-19	16105-16110	solve	
58-20	16111-16114	the	
58-21	16115-16125	PostgreSQL	
58-22	16126-16127	:	
58-23	16127-16128	:	
58-24	16129-16133	cast	
58-25	16134-16142	operator	
58-26	16143-16148	issue	
58-27	16149-16153	with	
58-28	16154-16157	JPA	
58-29	16158-16161	and	
58-30	16162-16171	Hibernate	
58-31	16172-16175	The	
58-32	16176-16180	best	
58-33	16181-16184	way	
58-34	16185-16187	to	
58-35	16188-16191	use	
58-36	16192-16195	SQL	
58-37	16196-16205	functions	
58-38	16206-16208	in	
58-39	16209-16213	JPQL	
58-40	16214-16216	or	
58-41	16217-16225	Criteria	
58-42	16226-16229	API	
58-43	16230-16237	queries	
58-44	16238-16242	with	
58-45	16243-16246	JPA	
58-46	16247-16250	and	
58-47	16251-16260	Hibernate	
58-48	16261-16264	How	
58-49	16265-16267	to	
58-50	16268-16275	execute	
58-51	16276-16279	SQL	
58-52	16280-16289	functions	
58-53	16290-16294	with	
58-54	16295-16303	multiple	
58-55	16304-16314	parameters	
58-56	16315-16317	in	
58-57	16318-16319	a	
58-58	16320-16324	JPQL	
58-59	16325-16330	query	
58-60	16331-16335	with	
58-61	16336-16345	Hibernate	

#Text=How to query parent rows when all children must match the filtering criteria with SQL and Hibernate How to bind custom Hibernate parameter types to JPA queries Statement Caching How does a relational database execute SQL statements and prepared statements MySQL JDBC Statement Caching Bulk Processing
59-1	16346-16349	How	
59-2	16350-16352	to	
59-3	16353-16358	query	
59-4	16359-16365	parent	
59-5	16366-16370	rows	
59-6	16371-16375	when	
59-7	16376-16379	all	
59-8	16380-16388	children	
59-9	16389-16393	must	
59-10	16394-16399	match	
59-11	16400-16403	the	
59-12	16404-16413	filtering	
59-13	16414-16422	criteria	
59-14	16423-16427	with	
59-15	16428-16431	SQL	
59-16	16432-16435	and	
59-17	16436-16445	Hibernate	
59-18	16446-16449	How	
59-19	16450-16452	to	
59-20	16453-16457	bind	
59-21	16458-16464	custom	
59-22	16465-16474	Hibernate	
59-23	16475-16484	parameter	
59-24	16485-16490	types	
59-25	16491-16493	to	
59-26	16494-16497	JPA	
59-27	16498-16505	queries	
59-28	16506-16515	Statement	
59-29	16516-16523	Caching	
59-30	16524-16527	How	
59-31	16528-16532	does	
59-32	16533-16534	a	
59-33	16535-16545	relational	
59-34	16546-16554	database	
59-35	16555-16562	execute	
59-36	16563-16566	SQL	
59-37	16567-16577	statements	
59-38	16578-16581	and	
59-39	16582-16590	prepared	
59-40	16591-16601	statements	
59-41	16602-16607	MySQL	
59-42	16608-16612	JDBC	
59-43	16613-16622	Statement	
59-44	16623-16630	Caching	
59-45	16631-16635	Bulk	
59-46	16636-16646	Processing	

#Text=Bulk Update and Delete with JPA and Hibernate JPA Criteria API Bulk Update and Delete Bulk Update optimistic locking with JPA and Hibernate Criteria Queries How to write JPA Criteria API queries using Codota JPA Criteria Metamodel Generation and Usage Guide
60-1	16647-16651	Bulk	
60-2	16652-16658	Update	
60-3	16659-16662	and	
60-4	16663-16669	Delete	
60-5	16670-16674	with	
60-6	16675-16678	JPA	
60-7	16679-16682	and	
60-8	16683-16692	Hibernate	
60-9	16693-16696	JPA	
60-10	16697-16705	Criteria	
60-11	16706-16709	API	
60-12	16710-16714	Bulk	
60-13	16715-16721	Update	
60-14	16722-16725	and	
60-15	16726-16732	Delete	
60-16	16733-16737	Bulk	
60-17	16738-16744	Update	
60-18	16745-16755	optimistic	
60-19	16756-16763	locking	
60-20	16764-16768	with	
60-21	16769-16772	JPA	
60-22	16773-16776	and	
60-23	16777-16786	Hibernate	
60-24	16787-16795	Criteria	
60-25	16796-16803	Queries	
60-26	16804-16807	How	
60-27	16808-16810	to	
60-28	16811-16816	write	
60-29	16817-16820	JPA	
60-30	16821-16829	Criteria	
60-31	16830-16833	API	
60-32	16834-16841	queries	
60-33	16842-16847	using	
60-34	16848-16854	Codota	
60-35	16855-16858	JPA	
60-36	16859-16867	Criteria	
60-37	16868-16877	Metamodel	
60-38	16878-16888	Generation	
60-39	16889-16892	and	
60-40	16893-16898	Usage	
60-41	16899-16904	Guide	

#Text=How to query by entity type using JPA Criteria API Why you should always check the SQL statements generated by Criteria API The performance penalty of Class.forName when parsing JPQL and Criteria queries How does Hibernate handle JPA Criteria API literals Stored Procedures
61-1	16905-16908	How	
61-2	16909-16911	to	
61-3	16912-16917	query	
61-4	16918-16920	by	
61-5	16921-16927	entity	
61-6	16928-16932	type	
61-7	16933-16938	using	
61-8	16939-16942	JPA	
61-9	16943-16951	Criteria	
61-10	16952-16955	API	
61-11	16956-16959	Why	
61-12	16960-16963	you	
61-13	16964-16970	should	
61-14	16971-16977	always	
61-15	16978-16983	check	
61-16	16984-16987	the	
61-17	16988-16991	SQL	
61-18	16992-17002	statements	
61-19	17003-17012	generated	
61-20	17013-17015	by	
61-21	17016-17024	Criteria	
61-22	17025-17028	API	
61-23	17029-17032	The	
61-24	17033-17044	performance	
61-25	17045-17052	penalty	
61-26	17053-17055	of	
61-27	17056-17069	Class.forName	
61-28	17070-17074	when	
61-29	17075-17082	parsing	
61-30	17083-17087	JPQL	
61-31	17088-17091	and	
61-32	17092-17100	Criteria	
61-33	17101-17108	queries	
61-34	17109-17112	How	
61-35	17113-17117	does	
61-36	17118-17127	Hibernate	
61-37	17128-17134	handle	
61-38	17135-17138	JPA	
61-39	17139-17147	Criteria	
61-40	17148-17151	API	
61-41	17152-17160	literals	
61-42	17161-17167	Stored	
61-43	17168-17178	Procedures	

#Text=The best way to call a stored procedure with JPA and Hibernate How to call Oracle stored procedures and functions with JPA and Hibernate How to call SQL Server stored procedures and functions with JPA and Hibernate How to call PostgreSQL functions (stored procedures) with JPA and Hibernate
62-1	17179-17182	The	
62-2	17183-17187	best	
62-3	17188-17191	way	
62-4	17192-17194	to	
62-5	17195-17199	call	
62-6	17200-17201	a	
62-7	17202-17208	stored	
62-8	17209-17218	procedure	
62-9	17219-17223	with	
62-10	17224-17227	JPA	
62-11	17228-17231	and	
62-12	17232-17241	Hibernate	
62-13	17242-17245	How	
62-14	17246-17248	to	
62-15	17249-17253	call	
62-16	17254-17260	Oracle	
62-17	17261-17267	stored	
62-18	17268-17278	procedures	
62-19	17279-17282	and	
62-20	17283-17292	functions	
62-21	17293-17297	with	
62-22	17298-17301	JPA	
62-23	17302-17305	and	
62-24	17306-17315	Hibernate	
62-25	17316-17319	How	
62-26	17320-17322	to	
62-27	17323-17327	call	
62-28	17328-17331	SQL	
62-29	17332-17338	Server	
62-30	17339-17345	stored	
62-31	17346-17356	procedures	
62-32	17357-17360	and	
62-33	17361-17370	functions	
62-34	17371-17375	with	
62-35	17376-17379	JPA	
62-36	17380-17383	and	
62-37	17384-17393	Hibernate	
62-38	17394-17397	How	
62-39	17398-17400	to	
62-40	17401-17405	call	
62-41	17406-17416	PostgreSQL	
62-42	17417-17426	functions	
62-43	17427-17428	(	
62-44	17428-17434	stored	
62-45	17435-17445	procedures	
62-46	17445-17446	)	
62-47	17447-17451	with	
62-48	17452-17455	JPA	
62-49	17456-17459	and	
62-50	17460-17469	Hibernate	

#Text=How to call MySQL stored procedures and functions with JPA and Hibernate Caching A beginner’s guide to Cache synchronization strategies Things to consider before jumping to enterprise caching Caching best practices How does Hibernate store second-level cache entries
63-1	17470-17473	How	
63-2	17474-17476	to	
63-3	17477-17481	call	
63-4	17482-17487	MySQL	
63-5	17488-17494	stored	
63-6	17495-17505	procedures	
63-7	17506-17509	and	
63-8	17510-17519	functions	
63-9	17520-17524	with	
63-10	17525-17528	JPA	
63-11	17529-17532	and	
63-12	17533-17542	Hibernate	
63-13	17543-17550	Caching	
63-14	17551-17552	A	
63-15	17553-17561	beginner	
63-16	17561-17562	’	
63-17	17562-17563	s	
63-18	17564-17569	guide	
63-19	17570-17572	to	
63-20	17573-17578	Cache	
63-21	17579-17594	synchronization	
63-22	17595-17605	strategies	
63-23	17606-17612	Things	
63-24	17613-17615	to	
63-25	17616-17624	consider	
63-26	17625-17631	before	
63-27	17632-17639	jumping	
63-28	17640-17642	to	
63-29	17643-17653	enterprise	
63-30	17654-17661	caching	
63-31	17662-17669	Caching	
63-32	17670-17674	best	
63-33	17675-17684	practices	
63-34	17685-17688	How	
63-35	17689-17693	does	
63-36	17694-17703	Hibernate	
63-37	17704-17709	store	
63-38	17710-17722	second-level	
63-39	17723-17728	cache	
63-40	17729-17736	entries	

#Text=How does Hibernate READ_ONLY CacheConcurrencyStrategy work How does Hibernate NONSTRICT_READ_WRITE CacheConcurrencyStrategy work How does Hibernate READ_WRITE CacheConcurrencyStrategy work
64-1	17737-17740	How	
64-2	17741-17745	does	
64-3	17746-17755	Hibernate	
64-4	17756-17765	READ_ONLY	
64-5	17766-17790	CacheConcurrencyStrategy	
64-6	17791-17795	work	
64-7	17796-17799	How	
64-8	17800-17804	does	
64-9	17805-17814	Hibernate	
64-10	17815-17835	NONSTRICT_READ_WRITE	
64-11	17836-17860	CacheConcurrencyStrategy	
64-12	17861-17865	work	
64-13	17866-17869	How	
64-14	17870-17874	does	
64-15	17875-17884	Hibernate	
64-16	17885-17895	READ_WRITE	
64-17	17896-17920	CacheConcurrencyStrategy	
64-18	17921-17925	work	

#Text=How does Hibernate TRANSACTIONAL CacheConcurrencyStrategy work How does Hibernate Collection Cache work How does Hibernate Query Cache work How to use the Hibernate Query Cache for DTO projections How to avoid the Hibernate Query Cache N+1 issue
65-1	17926-17929	How	
65-2	17930-17934	does	
65-3	17935-17944	Hibernate	
65-4	17945-17958	TRANSACTIONAL	
65-5	17959-17983	CacheConcurrencyStrategy	
65-6	17984-17988	work	
65-7	17989-17992	How	
65-8	17993-17997	does	
65-9	17998-18007	Hibernate	
65-10	18008-18018	Collection	
65-11	18019-18024	Cache	
65-12	18025-18029	work	
65-13	18030-18033	How	
65-14	18034-18038	does	
65-15	18039-18048	Hibernate	
65-16	18049-18054	Query	
65-17	18055-18060	Cache	
65-18	18061-18065	work	
65-19	18066-18069	How	
65-20	18070-18072	to	
65-21	18073-18076	use	
65-22	18077-18080	the	
65-23	18081-18090	Hibernate	
65-24	18091-18096	Query	
65-25	18097-18102	Cache	
65-26	18103-18106	for	
65-27	18107-18110	DTO	
65-28	18111-18122	projections	
65-29	18123-18126	How	
65-30	18127-18129	to	
65-31	18130-18135	avoid	
65-32	18136-18139	the	
65-33	18140-18149	Hibernate	
65-34	18150-18155	Query	
65-35	18156-18161	Cache	
65-36	18162-18163	N	
65-37	18163-18164	+	
65-38	18164-18165	1	
65-39	18166-18171	issue	

#Text=How to cache non-existing entity fetch results with JPA and Hibernate Statistics A beginner’s guide to Hibernate Statistics How to expose Hibernate Statistics via JMX Audit Logging A beginner’s guide to CDC (Change Data Capture) MySQL audit logging using triggers
66-1	18172-18175	How	
66-2	18176-18178	to	
66-3	18179-18184	cache	
66-4	18185-18197	non-existing	
66-5	18198-18204	entity	
66-6	18205-18210	fetch	
66-7	18211-18218	results	
66-8	18219-18223	with	
66-9	18224-18227	JPA	
66-10	18228-18231	and	
66-11	18232-18241	Hibernate	
66-12	18242-18252	Statistics	
66-13	18253-18254	A	
66-14	18255-18263	beginner	
66-15	18263-18264	’	
66-16	18264-18265	s	
66-17	18266-18271	guide	
66-18	18272-18274	to	
66-19	18275-18284	Hibernate	
66-20	18285-18295	Statistics	
66-21	18296-18299	How	
66-22	18300-18302	to	
66-23	18303-18309	expose	
66-24	18310-18319	Hibernate	
66-25	18320-18330	Statistics	
66-26	18331-18334	via	
66-27	18335-18338	JMX	
66-28	18339-18344	Audit	
66-29	18345-18352	Logging	
66-30	18353-18354	A	
66-31	18355-18363	beginner	
66-32	18363-18364	’	
66-33	18364-18365	s	
66-34	18366-18371	guide	
66-35	18372-18374	to	
66-36	18375-18378	CDC	
66-37	18379-18380	(	
66-38	18380-18386	Change	
66-39	18387-18391	Data	
66-40	18392-18399	Capture	
66-41	18399-18400	)	
66-42	18401-18406	MySQL	
66-43	18407-18412	audit	
66-44	18413-18420	logging	
66-45	18421-18426	using	
66-46	18427-18435	triggers	

#Text=The best way to implement an audit log using Hibernate Envers How to extract change data events from MySQL to Kafka using Debezium Multitenancy A beginner’s guide to database multitenancy Hibernate database catalog multitenancy Hibernate database schema multitenancy Testing
67-1	18436-18439	The	
67-2	18440-18444	best	
67-3	18445-18448	way	
67-4	18449-18451	to	
67-5	18452-18461	implement	
67-6	18462-18464	an	
67-7	18465-18470	audit	
67-8	18471-18474	log	
67-9	18475-18480	using	
67-10	18481-18490	Hibernate	
67-11	18491-18497	Envers	
67-12	18498-18501	How	
67-13	18502-18504	to	
67-14	18505-18512	extract	
67-15	18513-18519	change	
67-16	18520-18524	data	
67-17	18525-18531	events	
67-18	18532-18536	from	
67-19	18537-18542	MySQL	
67-20	18543-18545	to	
67-21	18546-18551	Kafka	
67-22	18552-18557	using	
67-23	18558-18566	Debezium	
67-24	18567-18579	Multitenancy	
67-25	18580-18581	A	
67-26	18582-18590	beginner	
67-27	18590-18591	’	
67-28	18591-18592	s	
67-29	18593-18598	guide	
67-30	18599-18601	to	
67-31	18602-18610	database	
67-32	18611-18623	multitenancy	
67-33	18624-18633	Hibernate	
67-34	18634-18642	database	
67-35	18643-18650	catalog	
67-36	18651-18663	multitenancy	
67-37	18664-18673	Hibernate	
67-38	18674-18682	database	
67-39	18683-18689	schema	
67-40	18690-18702	multitenancy	
67-41	18703-18710	Testing	

#Text=The minimal configuration for testing Hibernate Hibernate integration testing strategies How to run database integration tests 20 times faster How to run integration tests at warp-speed using Docker and tmpfs The best way to log JDBC statements The best way to detect database connection leaks
68-1	18711-18714	The	
68-2	18715-18722	minimal	
68-3	18723-18736	configuration	
68-4	18737-18740	for	
68-5	18741-18748	testing	
68-6	18749-18758	Hibernate	
68-7	18759-18768	Hibernate	
68-8	18769-18780	integration	
68-9	18781-18788	testing	
68-10	18789-18799	strategies	
68-11	18800-18803	How	
68-12	18804-18806	to	
68-13	18807-18810	run	
68-14	18811-18819	database	
68-15	18820-18831	integration	
68-16	18832-18837	tests	
68-17	18838-18840	20	
68-18	18841-18846	times	
68-19	18847-18853	faster	
68-20	18854-18857	How	
68-21	18858-18860	to	
68-22	18861-18864	run	
68-23	18865-18876	integration	
68-24	18877-18882	tests	
68-25	18883-18885	at	
68-26	18886-18896	warp-speed	
68-27	18897-18902	using	
68-28	18903-18909	Docker	
68-29	18910-18913	and	
68-30	18914-18919	tmpfs	
68-31	18920-18923	The	
68-32	18924-18928	best	
68-33	18929-18932	way	
68-34	18933-18935	to	
68-35	18936-18939	log	
68-36	18940-18944	JDBC	
68-37	18945-18955	statements	
68-38	18956-18959	The	
68-39	18960-18964	best	
68-40	18965-18968	way	
68-41	18969-18971	to	
68-42	18972-18978	detect	
68-43	18979-18987	database	
68-44	18988-18998	connection	
68-45	18999-19004	leaks	

#Text=How to install DB2 Express-C on Docker and set up the JDBC connection properties How to get started with CockroachDB and Hibernate Online Workshops If you enjoyed this article, I bet you are going to love my upcoming 4-day x 4 hours High-Performance Java Persistence Online Workshop Follow @vlad_mihalcea
69-1	19005-19008	How	
69-2	19009-19011	to	
69-3	19012-19019	install	
69-4	19020-19023	DB2	
69-5	19024-19033	Express-C	
69-6	19034-19036	on	
69-7	19037-19043	Docker	
69-8	19044-19047	and	
69-9	19048-19051	set	
69-10	19052-19054	up	
69-11	19055-19058	the	
69-12	19059-19063	JDBC	
69-13	19064-19074	connection	
69-14	19075-19085	properties	
69-15	19086-19089	How	
69-16	19090-19092	to	
69-17	19093-19096	get	
69-18	19097-19104	started	
69-19	19105-19109	with	
69-20	19110-19121	CockroachDB	
69-21	19122-19125	and	
69-22	19126-19135	Hibernate	
69-23	19136-19142	Online	
69-24	19143-19152	Workshops	
69-25	19153-19155	If	
69-26	19156-19159	you	
69-27	19160-19167	enjoyed	
69-28	19168-19172	this	
69-29	19173-19180	article	
69-30	19180-19181	,	
69-31	19182-19183	I	
69-32	19184-19187	bet	
69-33	19188-19191	you	
69-34	19192-19195	are	
69-35	19196-19201	going	
69-36	19202-19204	to	
69-37	19205-19209	love	
69-38	19210-19212	my	
69-39	19213-19221	upcoming	
69-40	19222-19223	4	
69-41	19223-19224	-	
69-42	19224-19227	day	
69-43	19228-19229	x	
69-44	19230-19231	4	
69-45	19232-19237	hours	
69-46	19238-19254	High-Performance	
69-47	19255-19259	Java	
69-48	19260-19271	Persistence	
69-49	19272-19278	Online	
69-50	19279-19287	Workshop	
69-51	19288-19294	Follow	
69-52	19295-19296	@	
69-53	19296-19309	vlad_mihalcea	

#Text=Insert details about how the information is going to be processedDOWNLOAD NOW Leave a Reply Cancel replyYour email address will not be published. Required fields are marked *Comment Name * Email * Website This site uses Akismet to reduce spam. Learn how your comment data is processed. Let’s connect
70-1	19310-19316	Insert	
70-2	19317-19324	details	
70-3	19325-19330	about	
70-4	19331-19334	how	
70-5	19335-19338	the	
70-6	19339-19350	information	
70-7	19351-19353	is	
70-8	19354-19359	going	
70-9	19360-19362	to	
70-10	19363-19365	be	
70-11	19366-19383	processedDOWNLOAD	
70-12	19384-19387	NOW	
70-13	19388-19393	Leave	
70-14	19394-19395	a	
70-15	19396-19401	Reply	
70-16	19402-19408	Cancel	
70-17	19409-19418	replyYour	
70-18	19419-19424	email	
70-19	19425-19432	address	
70-20	19433-19437	will	
70-21	19438-19441	not	
70-22	19442-19444	be	
70-23	19445-19454	published	
70-24	19454-19455	.	
70-25	19456-19464	Required	
70-26	19465-19471	fields	
70-27	19472-19475	are	
70-28	19476-19482	marked	
70-29	19483-19484	*	
70-30	19484-19491	Comment	
70-31	19492-19496	Name	
70-32	19497-19498	*	
70-33	19499-19504	Email	
70-34	19505-19506	*	
70-35	19507-19514	Website	
70-36	19515-19519	This	
70-37	19520-19524	site	
70-38	19525-19529	uses	
70-39	19530-19537	Akismet	
70-40	19538-19540	to	
70-41	19541-19547	reduce	
70-42	19548-19552	spam	
70-43	19552-19553	.	
70-44	19554-19559	Learn	
70-45	19560-19563	how	
70-46	19564-19568	your	
70-47	19569-19576	comment	
70-48	19577-19581	data	
70-49	19582-19584	is	
70-50	19585-19594	processed	
70-51	19594-19595	.	
70-52	19596-19599	Let	
70-53	19599-19600	’	
70-54	19600-19601	s	
70-55	19602-19609	connect	

#Text=Twitter YouTube LinkedIn Email Facebook Amazon GitHub Find Article Search Book Video Course Hypersistence Optimizer Training ERP Contact TutorialsHibernate
71-1	19610-19617	Twitter	
71-2	19618-19625	YouTube	
71-3	19626-19634	LinkedIn	
71-4	19635-19640	Email	
71-5	19641-19649	Facebook	
71-6	19650-19656	Amazon	
71-7	19657-19663	GitHub	
71-8	19664-19668	Find	
71-9	19669-19676	Article	
71-10	19677-19683	Search	
71-11	19684-19688	Book	
71-12	19689-19694	Video	
71-13	19695-19701	Course	
71-14	19702-19715	Hypersistence	
71-15	19716-19725	Optimizer	
71-16	19726-19734	Training	
71-17	19735-19738	ERP	
71-18	19739-19746	Contact	
71-19	19747-19765	TutorialsHibernate	

#Text=SQL Spring Git FlexyPool Social MediaTwitter Facebook YouTube GitHub LinkedIn AboutAbout FAQ Archive Privacy Policy Terms of Service
72-1	19766-19769	SQL	
72-2	19770-19776	Spring	
72-3	19777-19780	Git	
72-4	19781-19790	FlexyPool	
72-5	19791-19797	Social	
72-6	19798-19810	MediaTwitter	
72-7	19811-19819	Facebook	
72-8	19820-19827	YouTube	
72-9	19828-19834	GitHub	
72-10	19835-19843	LinkedIn	
72-11	19844-19854	AboutAbout	
72-12	19855-19858	FAQ	
72-13	19859-19866	Archive	
72-14	19867-19874	Privacy	
72-15	19875-19881	Policy	
72-16	19882-19887	Terms	
72-17	19888-19890	of	
72-18	19891-19898	Service	

#Text=Meta Log in Entries feed Comments feed WordPress.org Privacy & Cookies: This site uses cookies. By continuing to use this website, you agree to their use. To find out more, including how to control cookies, see here:
73-1	19899-19903	Meta	
73-2	19904-19907	Log	
73-3	19908-19910	in	
73-4	19911-19918	Entries	
73-5	19919-19923	feed	
73-6	19924-19932	Comments	
73-7	19933-19937	feed	
73-8	19938-19951	WordPress.org	
73-9	19952-19959	Privacy	
73-10	19960-19961	&	
73-11	19962-19969	Cookies	
73-12	19969-19970	:	
73-13	19971-19975	This	
73-14	19976-19980	site	
73-15	19981-19985	uses	
73-16	19986-19993	cookies	
73-17	19993-19994	.	
73-18	19995-19997	By	
73-19	19998-20008	continuing	
73-20	20009-20011	to	
73-21	20012-20015	use	
73-22	20016-20020	this	
73-23	20021-20028	website	
73-24	20028-20029	,	
73-25	20030-20033	you	
73-26	20034-20039	agree	
73-27	20040-20042	to	
73-28	20043-20048	their	
73-29	20049-20052	use	
73-30	20052-20053	.	
73-31	20054-20056	To	
73-32	20057-20061	find	
73-33	20062-20065	out	
73-34	20066-20070	more	
73-35	20070-20071	,	
73-36	20072-20081	including	
73-37	20082-20085	how	
73-38	20086-20088	to	
73-39	20089-20096	control	
73-40	20097-20104	cookies	
73-41	20104-20105	,	
73-42	20106-20109	see	
73-43	20110-20114	here	
73-44	20114-20115	:	

#Text=Our Cookie Policy Vlad Mihalcea Powered by WordPress.com. High-Performance Java Persistence19th - 22nd of April Prepare yourself to be amazed!The best way to map JPA and Hibernate entities and associationsBatch processing best practicesThe best way to fetch data with JPA and HibernateTransactions and Concurrency ControlCaching best practices
74-1	20116-20119	Our	
74-2	20120-20126	Cookie	
74-3	20127-20133	Policy	
74-4	20134-20138	Vlad	
74-5	20139-20147	Mihalcea	
74-6	20148-20155	Powered	
74-7	20156-20158	by	
74-8	20159-20172	WordPress.com	
74-9	20172-20173	.	
74-10	20174-20190	High-Performance	
74-11	20191-20195	Java	
74-12	20196-20211	Persistence19th	
74-13	20211-20212	 	
74-14	20212-20213	-	
74-15	20214-20218	22nd	
74-16	20218-20219	 	
74-17	20219-20221	of	
74-18	20222-20227	April	
74-19	20228-20235	Prepare	
74-20	20236-20244	yourself	
74-21	20245-20247	to	
74-22	20248-20250	be	
74-23	20251-20257	amazed	
74-24	20257-20258	!	
74-25	20258-20261	The	
74-26	20262-20266	best	
74-27	20267-20270	way	
74-28	20271-20273	to	
74-29	20274-20277	map	
74-30	20278-20281	JPA	
74-31	20282-20285	and	
74-32	20286-20295	Hibernate	
74-33	20296-20304	entities	
74-34	20305-20308	and	
74-35	20309-20326	associationsBatch	
74-36	20327-20337	processing	
74-37	20338-20342	best	
74-38	20343-20355	practicesThe	
74-39	20356-20360	best	
74-40	20361-20364	way	
74-41	20365-20367	to	
74-42	20368-20373	fetch	
74-43	20374-20378	data	
74-44	20379-20383	with	
74-45	20384-20387	JPA	
74-46	20388-20391	and	
74-47	20392-20413	HibernateTransactions	
74-48	20414-20417	and	
74-49	20418-20429	Concurrency	
74-50	20430-20444	ControlCaching	
74-51	20445-20449	best	
74-52	20450-20459	practices	
