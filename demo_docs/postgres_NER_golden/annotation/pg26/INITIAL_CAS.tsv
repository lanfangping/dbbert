#FORMAT=WebAnno TSV 3.3


#Text=Top 10 performance tuning techniques for Amazon Redshift | AWS Big Data Blog Click here to return to Amazon Web Services homepage Contact Sales Support English My Account Create an AWS Account Products Solutions
1-1	0-3	Top	
1-2	4-6	10	
1-3	7-18	performance	
1-4	19-25	tuning	
1-5	26-36	techniques	
1-6	37-40	for	
1-7	41-47	Amazon	
1-8	48-56	Redshift	
1-9	57-58	|	
1-10	59-62	AWS	
1-11	63-66	Big	
1-12	67-71	Data	
1-13	72-76	Blog	
1-14	77-82	Click	
1-15	83-87	here	
1-16	88-90	to	
1-17	91-97	return	
1-18	98-100	to	
1-19	101-107	Amazon	
1-20	108-111	Web	
1-21	112-120	Services	
1-22	121-129	homepage	
1-23	130-137	Contact	
1-24	138-143	Sales	
1-25	144-151	Support	
1-26	152-159	English	
1-27	160-162	My	
1-28	163-170	Account	
1-29	171-177	Create	
1-30	178-180	an	
1-31	181-184	AWS	
1-32	185-192	Account	
1-33	193-201	Products	
1-34	202-211	Solutions	

#Text=Pricing Documentation Learn Partner Network AWS Marketplace Customer Enablement Events Explore More عربي Bahasa Indonesia Deutsch English Español Français
2-1	212-219	Pricing	
2-2	220-233	Documentation	
2-3	234-239	Learn	
2-4	240-247	Partner	
2-5	248-255	Network	
2-6	256-259	AWS	
2-7	260-271	Marketplace	
2-8	272-280	Customer	
2-9	281-291	Enablement	
2-10	292-298	Events	
2-11	299-306	Explore	
2-12	307-311	More	
2-13	312-316	عربي	
2-14	317-323	Bahasa	
2-15	324-333	Indonesia	
2-16	334-341	Deutsch	
2-17	342-349	English	
2-18	350-357	Español	
2-19	358-366	Français	

#Text=Italiano Português Tiếng Việt Türkçe Ρусский ไทย 日本語 한국어 中文 (简体) 中文 (繁體) AWS Management Console
3-1	367-375	Italiano	
3-2	376-385	Português	
3-3	386-391	Tiếng	
3-4	392-396	Việt	
3-5	397-403	Türkçe	
3-6	404-411	Ρусский	
3-7	412-415	ไทย	
3-8	416-419	日本語	
3-9	420-423	한국어	
3-10	424-426	中文	
3-11	427-428	(	
3-12	428-430	简体	
3-13	430-431	)	
3-14	432-434	中文	
3-15	435-436	(	
3-16	436-438	繁體	
3-17	438-439	)	
3-18	440-443	AWS	
3-19	444-454	Management	
3-20	455-462	Console	

#Text=Account Settings Billing & Cost Management Security Credentials AWS Personal Health Dashboard Support Center Knowledge Center AWS Support Overview Click here to return to Amazon Web Services homepage Products Solutions Pricing
4-1	463-470	Account	
4-2	471-479	Settings	
4-3	480-487	Billing	
4-4	488-489	&	
4-5	490-494	Cost	
4-6	495-505	Management	
4-7	506-514	Security	
4-8	515-526	Credentials	
4-9	527-530	AWS	
4-10	531-539	Personal	
4-11	540-546	Health	
4-12	547-556	Dashboard	
4-13	557-564	Support	
4-14	565-571	Center	
4-15	572-581	Knowledge	
4-16	582-588	Center	
4-17	589-592	AWS	
4-18	593-600	Support	
4-19	601-609	Overview	
4-20	610-615	Click	
4-21	616-620	here	
4-22	621-623	to	
4-23	624-630	return	
4-24	631-633	to	
4-25	634-640	Amazon	
4-26	641-644	Web	
4-27	645-653	Services	
4-28	654-662	homepage	
4-29	663-671	Products	
4-30	672-681	Solutions	
4-31	682-689	Pricing	

#Text=Introduction to AWS Getting Started Documentation Training and Certification Developer Center Customer Success Partner Network AWS Marketplace Support Log into Console Download the Mobile App Blog Home Category
5-1	690-702	Introduction	
5-2	703-705	to	
5-3	706-709	AWS	
5-4	710-717	Getting	
5-5	718-725	Started	
5-6	726-739	Documentation	
5-7	740-748	Training	
5-8	749-752	and	
5-9	753-766	Certification	
5-10	767-776	Developer	
5-11	777-783	Center	
5-12	784-792	Customer	
5-13	793-800	Success	
5-14	801-808	Partner	
5-15	809-816	Network	
5-16	817-820	AWS	
5-17	821-832	Marketplace	
5-18	833-840	Support	
5-19	841-844	Log	
5-20	845-849	into	
5-21	850-857	Console	
5-22	858-866	Download	
5-23	867-870	the	
5-24	871-877	Mobile	
5-25	878-881	App	
5-26	882-886	Blog	
5-27	887-891	Home	
5-28	892-900	Category	

#Text=Edition Follow Architecture AWS Cost Management AWS Partner Network AWS Podcast AWS Marketplace AWS News Big Data Business Productivity Compute Contact Center Containers Database
6-1	901-908	Edition	
6-2	909-915	Follow	
6-3	916-928	Architecture	
6-4	929-932	AWS	
6-5	933-937	Cost	
6-6	938-948	Management	
6-7	949-952	AWS	
6-8	953-960	Partner	
6-9	961-968	Network	
6-10	969-972	AWS	
6-11	973-980	Podcast	
6-12	981-984	AWS	
6-13	985-996	Marketplace	
6-14	997-1000	AWS	
6-15	1001-1005	News	
6-16	1006-1009	Big	
6-17	1010-1014	Data	
6-18	1015-1023	Business	
6-19	1024-1036	Productivity	
6-20	1037-1044	Compute	
6-21	1045-1052	Contact	
6-22	1053-1059	Center	
6-23	1060-1070	Containers	
6-24	1071-1079	Database	

#Text=Desktop & Application Streaming Developer DevOps Enterprise Strategy Front-End Web & Mobile Game Tech HPC Infrastructure & Automation Industries Internet of Things Machine Learning Management & Governance Media Messaging & Targeting
7-1	1080-1087	Desktop	
7-2	1088-1089	&	
7-3	1090-1101	Application	
7-4	1102-1111	Streaming	
7-5	1112-1121	Developer	
7-6	1122-1128	DevOps	
7-7	1129-1139	Enterprise	
7-8	1140-1148	Strategy	
7-9	1149-1158	Front-End	
7-10	1159-1162	Web	
7-11	1163-1164	&	
7-12	1165-1171	Mobile	
7-13	1172-1176	Game	
7-14	1177-1181	Tech	
7-15	1182-1185	HPC	
7-16	1186-1200	Infrastructure	
7-17	1201-1202	&	
7-18	1203-1213	Automation	
7-19	1214-1224	Industries	
7-20	1225-1233	Internet	
7-21	1234-1236	of	
7-22	1237-1243	Things	
7-23	1244-1251	Machine	
7-24	1252-1260	Learning	
7-25	1261-1271	Management	
7-26	1272-1273	&	
7-27	1274-1284	Governance	
7-28	1285-1290	Media	
7-29	1291-1300	Messaging	
7-30	1301-1302	&	
7-31	1303-1312	Targeting	

#Text=Modernizing with AWS Networking & Content Delivery Open Source Public Sector Quantum Computing Robotics SAP Security, Identity, & Compliance Startups Storage Training & Certification 中国版 Édition Française
8-1	1313-1324	Modernizing	
8-2	1325-1329	with	
8-3	1330-1333	AWS	
8-4	1334-1344	Networking	
8-5	1345-1346	&	
8-6	1347-1354	Content	
8-7	1355-1363	Delivery	
8-8	1364-1368	Open	
8-9	1369-1375	Source	
8-10	1376-1382	Public	
8-11	1383-1389	Sector	
8-12	1390-1397	Quantum	
8-13	1398-1407	Computing	
8-14	1408-1416	Robotics	
8-15	1417-1420	SAP	
8-16	1421-1429	Security	
8-17	1429-1430	,	
8-18	1431-1439	Identity	
8-19	1439-1440	,	
8-20	1441-1442	&	
8-21	1443-1453	Compliance	
8-22	1454-1462	Startups	
8-23	1463-1470	Storage	
8-24	1471-1479	Training	
8-25	1480-1481	&	
8-26	1482-1495	Certification	
8-27	1496-1499	中国版	
8-28	1500-1507	Édition	
8-29	1508-1517	Française	

#Text=Deutsche Edition 日本版 한국 에디션 Edição em Português Edición en Español English Edition Версия на русском Edisi Bahasa Indonesia Mailing List
9-1	1518-1526	Deutsche	
9-2	1527-1534	Edition	
9-3	1535-1538	日本版	
9-4	1539-1541	한국	
9-5	1542-1545	에디션	
9-6	1546-1552	Edição	
9-7	1553-1555	em	
9-8	1556-1565	Português	
9-9	1566-1573	Edición	
9-10	1574-1576	en	
9-11	1577-1584	Español	
9-12	1585-1592	English	
9-13	1593-1600	Edition	
9-14	1601-1607	Версия	
9-15	1608-1610	на	
9-16	1611-1618	русском	
9-17	1619-1624	Edisi	
9-18	1625-1631	Bahasa	
9-19	1632-1641	Indonesia	
9-20	1642-1649	Mailing	
9-21	1650-1654	List	

#Text=RSS Feed AWS Big Data Blog Top 10 performance tuning techniques for Amazon Redshift Matt Scaer, Manish Vazirani, and Tarun Chaudhary | on 28 AUG 2020 | in
10-1	1655-1658	RSS	
10-2	1659-1663	Feed	
10-3	1664-1667	AWS	
10-4	1668-1671	Big	
10-5	1672-1676	Data	
10-6	1677-1681	Blog	
10-7	1682-1685	Top	
10-8	1686-1688	10	
10-9	1689-1700	performance	
10-10	1701-1707	tuning	
10-11	1708-1718	techniques	
10-12	1719-1722	for	
10-13	1723-1729	Amazon	
10-14	1730-1738	Redshift	
10-15	1739-1743	Matt	
10-16	1744-1749	Scaer	
10-17	1749-1750	,	
10-18	1751-1757	Manish	
10-19	1758-1766	Vazirani	
10-20	1766-1767	,	
10-21	1768-1771	and	
10-22	1772-1777	Tarun	
10-23	1778-1787	Chaudhary	
10-24	1788-1789	|	
10-25	1790-1792	on	
10-26	1793-1795	28	
10-27	1796-1799	AUG	
10-28	1800-1804	2020	
10-29	1805-1806	|	
10-30	1807-1809	in	

#Text=Amazon Redshift, Amazon Redshift, Analytics, AWS Big Data, Database | Permalink | Comments | Share
11-1	1810-1816	Amazon	
11-2	1817-1825	Redshift	
11-3	1825-1826	,	
11-4	1827-1833	Amazon	
11-5	1834-1842	Redshift	
11-6	1842-1843	,	
11-7	1844-1853	Analytics	
11-8	1853-1854	,	
11-9	1855-1858	AWS	
11-10	1859-1862	Big	
11-11	1863-1867	Data	
11-12	1867-1868	,	
11-13	1869-1877	Database	
11-14	1878-1879	|	
11-15	1880-1889	Permalink	
11-16	1890-1891	|	
11-17	1892-1900	Comments	
11-18	1901-1902	|	
11-19	1903-1908	Share	

#Text=Customers use Amazon Redshift for everything from accelerating existing database environments, to ingesting weblogs for big data analytics. Amazon Redshift is a fully managed, petabyte-scale, massively parallel data warehouse that offers simple operations and high performance. Amazon Redshift provides an open standard JDBC/ODBC driver interface, which allows you to connect your existing business intelligence (BI) tools and reuse existing analytics queries. Amazon Redshift can run any type of data model, from a production transaction system third-normal-form model to star and snowflake schemas, data vault, or simple flat tables. This post takes you through the most common performance-related opportunities when adopting Amazon Redshift and gives you concrete guidance on how to optimize each one.
12-1	1909-1918	Customers	
12-2	1919-1922	use	
12-3	1923-1929	Amazon	
12-4	1930-1938	Redshift	
12-5	1939-1942	for	
12-6	1943-1953	everything	
12-7	1954-1958	from	
12-8	1959-1971	accelerating	
12-9	1972-1980	existing	
12-10	1981-1989	database	
12-11	1990-2002	environments	
12-12	2002-2003	,	
12-13	2004-2006	to	
12-14	2007-2016	ingesting	
12-15	2017-2024	weblogs	
12-16	2025-2028	for	
12-17	2029-2032	big	
12-18	2033-2037	data	
12-19	2038-2047	analytics	
12-20	2047-2048	.	
12-21	2049-2055	Amazon	
12-22	2056-2064	Redshift	
12-23	2065-2067	is	
12-24	2068-2069	a	
12-25	2070-2075	fully	
12-26	2076-2083	managed	
12-27	2083-2084	,	
12-28	2085-2099	petabyte-scale	
12-29	2099-2100	,	
12-30	2101-2110	massively	
12-31	2111-2119	parallel	
12-32	2120-2124	data	
12-33	2125-2134	warehouse	
12-34	2135-2139	that	
12-35	2140-2146	offers	
12-36	2147-2153	simple	
12-37	2154-2164	operations	
12-38	2165-2168	and	
12-39	2169-2173	high	
12-40	2174-2185	performance	
12-41	2185-2186	.	
12-42	2187-2193	Amazon	
12-43	2194-2202	Redshift	
12-44	2203-2211	provides	
12-45	2212-2214	an	
12-46	2215-2219	open	
12-47	2220-2228	standard	
12-48	2229-2233	JDBC	
12-49	2233-2234	/	
12-50	2234-2238	ODBC	
12-51	2239-2245	driver	
12-52	2246-2255	interface	
12-53	2255-2256	,	
12-54	2257-2262	which	
12-55	2263-2269	allows	
12-56	2270-2273	you	
12-57	2274-2276	to	
12-58	2277-2284	connect	
12-59	2285-2289	your	
12-60	2290-2298	existing	
12-61	2299-2307	business	
12-62	2308-2320	intelligence	
12-63	2321-2322	(	
12-64	2322-2324	BI	
12-65	2324-2325	)	
12-66	2326-2331	tools	
12-67	2332-2335	and	
12-68	2336-2341	reuse	
12-69	2342-2350	existing	
12-70	2351-2360	analytics	
12-71	2361-2368	queries	
12-72	2368-2369	.	
12-73	2370-2376	Amazon	
12-74	2377-2385	Redshift	
12-75	2386-2389	can	
12-76	2390-2393	run	
12-77	2394-2397	any	
12-78	2398-2402	type	
12-79	2403-2405	of	
12-80	2406-2410	data	
12-81	2411-2416	model	
12-82	2416-2417	,	
12-83	2418-2422	from	
12-84	2423-2424	a	
12-85	2425-2435	production	
12-86	2436-2447	transaction	
12-87	2448-2454	system	
12-88	2455-2472	third-normal-form	
12-89	2473-2478	model	
12-90	2479-2481	to	
12-91	2482-2486	star	
12-92	2487-2490	and	
12-93	2491-2500	snowflake	
12-94	2501-2508	schemas	
12-95	2508-2509	,	
12-96	2510-2514	data	
12-97	2515-2520	vault	
12-98	2520-2521	,	
12-99	2522-2524	or	
12-100	2525-2531	simple	
12-101	2532-2536	flat	
12-102	2537-2543	tables	
12-103	2543-2544	.	
12-104	2545-2549	This	
12-105	2550-2554	post	
12-106	2555-2560	takes	
12-107	2561-2564	you	
12-108	2565-2572	through	
12-109	2573-2576	the	
12-110	2577-2581	most	
12-111	2582-2588	common	
12-112	2589-2608	performance-related	
12-113	2609-2622	opportunities	
12-114	2623-2627	when	
12-115	2628-2636	adopting	
12-116	2637-2643	Amazon	
12-117	2644-2652	Redshift	
12-118	2653-2656	and	
12-119	2657-2662	gives	
12-120	2663-2666	you	
12-121	2667-2675	concrete	
12-122	2676-2684	guidance	
12-123	2685-2687	on	
12-124	2688-2691	how	
12-125	2692-2694	to	
12-126	2695-2703	optimize	
12-127	2704-2708	each	
12-128	2709-2712	one	
12-129	2712-2713	.	

#Text=What’s new This post refreshes the Top 10 post from early 2019. We’re pleased to share the advances we’ve made since then, and want to highlight a few key points. Query throughput is more important than query concurrency.
13-1	2714-2718	What	
13-2	2718-2719	’	
13-3	2719-2720	s	
13-4	2721-2724	new	
13-5	2725-2729	This	
13-6	2730-2734	post	
13-7	2735-2744	refreshes	
13-8	2745-2748	the	
13-9	2749-2752	Top	
13-10	2753-2755	10	
13-11	2756-2760	post	
13-12	2761-2765	from	
13-13	2766-2771	early	
13-14	2772-2776	2019	
13-15	2776-2777	.	
13-16	2778-2780	We	
13-17	2780-2781	’	
13-18	2781-2783	re	
13-19	2784-2791	pleased	
13-20	2792-2794	to	
13-21	2795-2800	share	
13-22	2801-2804	the	
13-23	2805-2813	advances	
13-24	2814-2816	we	
13-25	2816-2817	’	
13-26	2817-2819	ve	
13-27	2820-2824	made	
13-28	2825-2830	since	
13-29	2831-2835	then	
13-30	2835-2836	,	
13-31	2837-2840	and	
13-32	2841-2845	want	
13-33	2846-2848	to	
13-34	2849-2858	highlight	
13-35	2859-2860	a	
13-36	2861-2864	few	
13-37	2865-2868	key	
13-38	2869-2875	points	
13-39	2875-2876	.	
13-40	2877-2882	Query	
13-41	2883-2893	throughput	
13-42	2894-2896	is	
13-43	2897-2901	more	
13-44	2902-2911	important	
13-45	2912-2916	than	
13-46	2917-2922	query	
13-47	2923-2934	concurrency	
13-48	2934-2935	.	

#Text=Configuring concurrency, like memory management, can be relegated to Amazon Redshift’s internal ML models through Automatic WLM with Query Priorities. On production clusters across the fleet, we see the automated process assigning a much higher number of active statements for certain workloads, while a lower number for other types of use-cases. This is done to maximize throughput, a measure of how much work the Amazon Redshift cluster can do over a period of time. Examples are 300 queries a minute, or 1,500 SQL statements an hour. It’s recommended to focus on increasing throughput over concurrency, because throughput is the metric with much more direct impact on the cluster’s users. In addition to the optimized Automatic WLM settings to maximize throughput, the concurrency scaling functionality in Amazon Redshift extends the throughput capability of the cluster to up to 10 times greater than what’s delivered with the original cluster. The tenfold increase is a current soft limit, you can reach out to your account team to increase it.
14-1	2936-2947	Configuring	
14-2	2948-2959	concurrency	
14-3	2959-2960	,	
14-4	2961-2965	like	
14-5	2966-2972	memory	
14-6	2973-2983	management	
14-7	2983-2984	,	
14-8	2985-2988	can	
14-9	2989-2991	be	
14-10	2992-3001	relegated	
14-11	3002-3004	to	
14-12	3005-3011	Amazon	
14-13	3012-3020	Redshift	
14-14	3020-3021	’	
14-15	3021-3022	s	
14-16	3023-3031	internal	
14-17	3032-3034	ML	
14-18	3035-3041	models	
14-19	3042-3049	through	
14-20	3050-3059	Automatic	
14-21	3060-3063	WLM	
14-22	3064-3068	with	
14-23	3069-3074	Query	
14-24	3075-3085	Priorities	
14-25	3085-3086	.	
14-26	3087-3089	On	
14-27	3090-3100	production	
14-28	3101-3109	clusters	
14-29	3110-3116	across	
14-30	3117-3120	the	
14-31	3121-3126	fleet	
14-32	3126-3127	,	
14-33	3128-3130	we	
14-34	3131-3134	see	
14-35	3135-3138	the	
14-36	3139-3148	automated	
14-37	3149-3156	process	
14-38	3157-3166	assigning	
14-39	3167-3168	a	
14-40	3169-3173	much	
14-41	3174-3180	higher	
14-42	3181-3187	number	
14-43	3188-3190	of	
14-44	3191-3197	active	
14-45	3198-3208	statements	
14-46	3209-3212	for	
14-47	3213-3220	certain	
14-48	3221-3230	workloads	
14-49	3230-3231	,	
14-50	3232-3237	while	
14-51	3238-3239	a	
14-52	3240-3245	lower	
14-53	3246-3252	number	
14-54	3253-3256	for	
14-55	3257-3262	other	
14-56	3263-3268	types	
14-57	3269-3271	of	
14-58	3272-3281	use-cases	
14-59	3281-3282	.	
14-60	3283-3287	This	
14-61	3288-3290	is	
14-62	3291-3295	done	
14-63	3296-3298	to	
14-64	3299-3307	maximize	
14-65	3308-3318	throughput	
14-66	3318-3319	,	
14-67	3320-3321	a	
14-68	3322-3329	measure	
14-69	3330-3332	of	
14-70	3333-3336	how	
14-71	3337-3341	much	
14-72	3342-3346	work	
14-73	3347-3350	the	
14-74	3351-3357	Amazon	
14-75	3358-3366	Redshift	
14-76	3367-3374	cluster	
14-77	3375-3378	can	
14-78	3379-3381	do	
14-79	3382-3386	over	
14-80	3387-3388	a	
14-81	3389-3395	period	
14-82	3396-3398	of	
14-83	3399-3403	time	
14-84	3403-3404	.	
14-85	3405-3413	Examples	
14-86	3414-3417	are	
14-87	3418-3421	300	
14-88	3422-3429	queries	
14-89	3430-3431	a	
14-90	3432-3438	minute	
14-91	3438-3439	,	
14-92	3440-3442	or	
14-93	3443-3448	1,500	
14-94	3449-3452	SQL	
14-95	3453-3463	statements	
14-96	3464-3466	an	
14-97	3467-3471	hour	
14-98	3471-3472	.	
14-99	3473-3475	It	
14-100	3475-3476	’	
14-101	3476-3477	s	
14-102	3478-3489	recommended	
14-103	3490-3492	to	
14-104	3493-3498	focus	
14-105	3499-3501	on	
14-106	3502-3512	increasing	
14-107	3513-3523	throughput	
14-108	3524-3528	over	
14-109	3529-3540	concurrency	
14-110	3540-3541	,	
14-111	3542-3549	because	
14-112	3549-3550	 	
14-113	3550-3560	throughput	
14-114	3561-3563	is	
14-115	3564-3567	the	
14-116	3568-3574	metric	
14-117	3575-3579	with	
14-118	3580-3584	much	
14-119	3585-3589	more	
14-120	3590-3596	direct	
14-121	3597-3603	impact	
14-122	3604-3606	on	
14-123	3607-3610	the	
14-124	3611-3618	cluster	
14-125	3618-3619	’	
14-126	3619-3620	s	
14-127	3621-3626	users	
14-128	3626-3627	.	
14-129	3628-3630	In	
14-130	3631-3639	addition	
14-131	3640-3642	to	
14-132	3643-3646	the	
14-133	3647-3656	optimized	
14-134	3657-3666	Automatic	
14-135	3667-3670	WLM	
14-136	3671-3679	settings	
14-137	3680-3682	to	
14-138	3683-3691	maximize	
14-139	3692-3702	throughput	
14-140	3702-3703	,	
14-141	3704-3707	the	
14-142	3708-3719	concurrency	
14-143	3720-3727	scaling	
14-144	3728-3741	functionality	
14-145	3742-3744	in	
14-146	3745-3751	Amazon	
14-147	3752-3760	Redshift	
14-148	3761-3768	extends	
14-149	3769-3772	the	
14-150	3773-3783	throughput	
14-151	3784-3794	capability	
14-152	3795-3797	of	
14-153	3798-3801	the	
14-154	3802-3809	cluster	
14-155	3810-3812	to	
14-156	3813-3815	up	
14-157	3816-3818	to	
14-158	3819-3821	10	
14-159	3822-3827	times	
14-160	3828-3835	greater	
14-161	3836-3840	than	
14-162	3841-3845	what	
14-163	3845-3846	’	
14-164	3846-3847	s	
14-165	3848-3857	delivered	
14-166	3858-3862	with	
14-167	3863-3866	the	
14-168	3867-3875	original	
14-169	3876-3883	cluster	
14-170	3883-3884	.	
14-171	3885-3888	The	
14-172	3889-3896	tenfold	
14-173	3897-3905	increase	
14-174	3906-3908	is	
14-175	3909-3910	a	
14-176	3911-3918	current	
14-177	3919-3923	soft	
14-178	3924-3929	limit	
14-179	3929-3930	,	
14-180	3931-3934	you	
14-181	3935-3938	can	
14-182	3939-3944	reach	
14-183	3945-3948	out	
14-184	3949-3951	to	
14-185	3952-3956	your	
14-186	3957-3964	account	
14-187	3965-3969	team	
14-188	3970-3972	to	
14-189	3973-3981	increase	
14-190	3982-3984	it	
14-191	3984-3985	.	

#Text=Investing in the Amazon Redshift driver. AWS now recommends the Amazon Redshift JDBC or ODBC driver for improved performance. Each driver has optional configurations to further tune it for higher or lower number of statements, with either fewer or greater row counts in the result set. Ease of use by automating all the common DBA tasks.
15-1	3986-3995	Investing	
15-2	3996-3998	in	
15-3	3999-4002	the	
15-4	4003-4009	Amazon	
15-5	4010-4018	Redshift	
15-6	4019-4025	driver	
15-7	4025-4026	.	
15-8	4027-4030	AWS	
15-9	4031-4034	now	
15-10	4035-4045	recommends	
15-11	4046-4049	the	
15-12	4050-4056	Amazon	
15-13	4057-4065	Redshift	
15-14	4066-4070	JDBC	
15-15	4071-4073	or	
15-16	4074-4078	ODBC	
15-17	4079-4085	driver	
15-18	4086-4089	for	
15-19	4090-4098	improved	
15-20	4099-4110	performance	
15-21	4110-4111	.	
15-22	4112-4116	Each	
15-23	4117-4123	driver	
15-24	4124-4127	has	
15-25	4128-4136	optional	
15-26	4137-4151	configurations	
15-27	4152-4154	to	
15-28	4155-4162	further	
15-29	4163-4167	tune	
15-30	4168-4170	it	
15-31	4171-4174	for	
15-32	4175-4181	higher	
15-33	4182-4184	or	
15-34	4185-4190	lower	
15-35	4191-4197	number	
15-36	4198-4200	of	
15-37	4201-4211	statements	
15-38	4211-4212	,	
15-39	4213-4217	with	
15-40	4218-4224	either	
15-41	4225-4230	fewer	
15-42	4231-4233	or	
15-43	4234-4241	greater	
15-44	4242-4245	row	
15-45	4246-4252	counts	
15-46	4253-4255	in	
15-47	4256-4259	the	
15-48	4260-4266	result	
15-49	4267-4270	set	
15-50	4270-4271	.	
15-51	4272-4276	Ease	
15-52	4277-4279	of	
15-53	4280-4283	use	
15-54	4284-4286	by	
15-55	4287-4297	automating	
15-56	4298-4301	all	
15-57	4302-4305	the	
15-58	4306-4312	common	
15-59	4313-4316	DBA	
15-60	4317-4322	tasks	
15-61	4322-4323	.	

#Text=In 2018, the SET DW “backronym” summarized the key considerations to drive performance (sort key, encoding, table maintenance, distribution, and workload management). Since then, Amazon Redshift has added automation to inform 100% of SET DW, absorbed table maintenance into the service’s (and no longer the user’s) responsibility, and enhanced out-of-the-box performance with smarter default settings. Amazon Redshift Advisor continuously monitors the cluster for additional optimization opportunities, even if the mission of a table changes over time. AWS publishes the benchmark used to quantify Amazon Redshift performance, so anyone can reproduce the results. Scaling compute separately from storage with RA3 nodes and Amazon Redshift Spectrum.
16-1	4324-4326	In	
16-2	4327-4331	2018	
16-3	4331-4332	,	
16-4	4333-4336	the	
16-5	4337-4340	SET	
16-6	4341-4343	DW	
16-7	4344-4345	“	
16-8	4345-4354	backronym	
16-9	4354-4355	”	
16-10	4356-4366	summarized	
16-11	4367-4370	the	
16-12	4371-4374	key	
16-13	4375-4389	considerations	
16-14	4390-4392	to	
16-15	4393-4398	drive	
16-16	4399-4410	performance	
16-17	4411-4412	(	
16-18	4412-4416	sort	
16-19	4417-4420	key	
16-20	4420-4421	,	
16-21	4422-4430	encoding	
16-22	4430-4431	,	
16-23	4432-4437	table	
16-24	4438-4449	maintenance	
16-25	4449-4450	,	
16-26	4451-4463	distribution	
16-27	4463-4464	,	
16-28	4465-4468	and	
16-29	4469-4477	workload	
16-30	4478-4488	management	
16-31	4488-4489	)	
16-32	4489-4490	.	
16-33	4491-4496	Since	
16-34	4497-4501	then	
16-35	4501-4502	,	
16-36	4503-4509	Amazon	
16-37	4510-4518	Redshift	
16-38	4519-4522	has	
16-39	4523-4528	added	
16-40	4529-4539	automation	
16-41	4540-4542	to	
16-42	4543-4549	inform	
16-43	4550-4554	100%	
16-44	4555-4557	of	
16-45	4558-4561	SET	
16-46	4562-4564	DW	
16-47	4564-4565	,	
16-48	4566-4574	absorbed	
16-49	4575-4580	table	
16-50	4581-4592	maintenance	
16-51	4593-4597	into	
16-52	4598-4601	the	
16-53	4602-4609	service	
16-54	4609-4610	’	
16-55	4610-4611	s	
16-56	4612-4613	(	
16-57	4613-4616	and	
16-58	4617-4619	no	
16-59	4620-4626	longer	
16-60	4627-4630	the	
16-61	4631-4635	user	
16-62	4635-4636	’	
16-63	4636-4637	s	
16-64	4637-4638	)	
16-65	4639-4653	responsibility	
16-66	4653-4654	,	
16-67	4655-4658	and	
16-68	4659-4667	enhanced	
16-69	4668-4682	out-of-the-box	
16-70	4683-4694	performance	
16-71	4695-4699	with	
16-72	4700-4707	smarter	
16-73	4708-4715	default	
16-74	4716-4724	settings	
16-75	4724-4725	.	
16-76	4726-4732	Amazon	
16-77	4733-4741	Redshift	
16-78	4742-4749	Advisor	
16-79	4750-4762	continuously	
16-80	4763-4771	monitors	
16-81	4772-4775	the	
16-82	4776-4783	cluster	
16-83	4784-4787	for	
16-84	4788-4798	additional	
16-85	4799-4811	optimization	
16-86	4812-4825	opportunities	
16-87	4825-4826	,	
16-88	4827-4831	even	
16-89	4832-4834	if	
16-90	4835-4838	the	
16-91	4839-4846	mission	
16-92	4847-4849	of	
16-93	4850-4851	a	
16-94	4852-4857	table	
16-95	4858-4865	changes	
16-96	4866-4870	over	
16-97	4871-4875	time	
16-98	4875-4876	.	
16-99	4877-4880	AWS	
16-100	4881-4890	publishes	
16-101	4891-4894	the	
16-102	4895-4904	benchmark	
16-103	4905-4909	used	
16-104	4910-4912	to	
16-105	4913-4921	quantify	
16-106	4922-4928	Amazon	
16-107	4929-4937	Redshift	
16-108	4938-4949	performance	
16-109	4949-4950	,	
16-110	4951-4953	so	
16-111	4954-4960	anyone	
16-112	4961-4964	can	
16-113	4965-4974	reproduce	
16-114	4975-4978	the	
16-115	4979-4986	results	
16-116	4986-4987	.	
16-117	4988-4995	Scaling	
16-118	4996-5003	compute	
16-119	5004-5014	separately	
16-120	5015-5019	from	
16-121	5020-5027	storage	
16-122	5028-5032	with	
16-123	5033-5036	RA3	
16-124	5037-5042	nodes	
16-125	5043-5046	and	
16-126	5047-5053	Amazon	
16-127	5054-5062	Redshift	
16-128	5063-5071	Spectrum	
16-129	5071-5072	.	

#Text=Although the convenient cluster building blocks of the Dense Compute and Dense Storage nodes continue to be available, you now have a variety of tools to further scale compute and storage separately. Amazon Redshift Managed Storage (the RA3 node family) allows for focusing on using the right amount of compute, without worrying about sizing for storage. Concurrency scaling lets you specify entire additional clusters of compute to be applied dynamically as-needed. Amazon Redshift Spectrum uses the functionally-infinite capacity of Amazon Simple Storage Service (Amazon S3) to support an on-demand compute layer up to 10 times the power of the main cluster, and is now bolstered with materialized view support. Pause and resume feature to optimize cost of environments All Amazon Redshift clusters can use the pause and resume feature. For clusters created using On Demand, the per-second grain billing is stopped when the cluster is paused. Reserved Instance clusters can use the pause and resume feature to define access times or freeze a dataset at a point in time.
17-1	5073-5081	Although	
17-2	5082-5085	the	
17-3	5086-5096	convenient	
17-4	5097-5104	cluster	
17-5	5105-5113	building	
17-6	5114-5120	blocks	
17-7	5121-5123	of	
17-8	5124-5127	the	
17-9	5128-5133	Dense	
17-10	5134-5141	Compute	
17-11	5142-5145	and	
17-12	5146-5151	Dense	
17-13	5152-5159	Storage	
17-14	5160-5165	nodes	
17-15	5166-5174	continue	
17-16	5175-5177	to	
17-17	5178-5180	be	
17-18	5181-5190	available	
17-19	5190-5191	,	
17-20	5192-5195	you	
17-21	5196-5199	now	
17-22	5200-5204	have	
17-23	5205-5206	a	
17-24	5207-5214	variety	
17-25	5215-5217	of	
17-26	5218-5223	tools	
17-27	5224-5226	to	
17-28	5227-5234	further	
17-29	5235-5240	scale	
17-30	5241-5248	compute	
17-31	5249-5252	and	
17-32	5253-5260	storage	
17-33	5261-5271	separately	
17-34	5271-5272	.	
17-35	5273-5279	Amazon	
17-36	5280-5288	Redshift	
17-37	5289-5296	Managed	
17-38	5297-5304	Storage	
17-39	5305-5306	(	
17-40	5306-5309	the	
17-41	5310-5313	RA3	
17-42	5314-5318	node	
17-43	5319-5325	family	
17-44	5325-5326	)	
17-45	5327-5333	allows	
17-46	5334-5337	for	
17-47	5338-5346	focusing	
17-48	5347-5349	on	
17-49	5350-5355	using	
17-50	5356-5359	the	
17-51	5360-5365	right	
17-52	5366-5372	amount	
17-53	5373-5375	of	
17-54	5376-5383	compute	
17-55	5383-5384	,	
17-56	5385-5392	without	
17-57	5393-5401	worrying	
17-58	5402-5407	about	
17-59	5408-5414	sizing	
17-60	5415-5418	for	
17-61	5419-5426	storage	
17-62	5426-5427	.	
17-63	5428-5439	Concurrency	
17-64	5440-5447	scaling	
17-65	5448-5452	lets	
17-66	5453-5456	you	
17-67	5457-5464	specify	
17-68	5465-5471	entire	
17-69	5472-5482	additional	
17-70	5483-5491	clusters	
17-71	5492-5494	of	
17-72	5495-5502	compute	
17-73	5503-5505	to	
17-74	5506-5508	be	
17-75	5509-5516	applied	
17-76	5517-5528	dynamically	
17-77	5529-5538	as-needed	
17-78	5538-5539	.	
17-79	5540-5546	Amazon	
17-80	5547-5555	Redshift	
17-81	5556-5564	Spectrum	
17-82	5565-5569	uses	
17-83	5570-5573	the	
17-84	5574-5595	functionally-infinite	
17-85	5596-5604	capacity	
17-86	5605-5607	of	
17-87	5608-5614	Amazon	
17-88	5615-5621	Simple	
17-89	5622-5629	Storage	
17-90	5630-5637	Service	
17-91	5638-5639	(	
17-92	5639-5645	Amazon	
17-93	5646-5648	S3	
17-94	5648-5649	)	
17-95	5650-5652	to	
17-96	5653-5660	support	
17-97	5661-5663	an	
17-98	5664-5673	on-demand	
17-99	5674-5681	compute	
17-100	5682-5687	layer	
17-101	5688-5690	up	
17-102	5691-5693	to	
17-103	5694-5696	10	
17-104	5697-5702	times	
17-105	5703-5706	the	
17-106	5707-5712	power	
17-107	5713-5715	of	
17-108	5716-5719	the	
17-109	5720-5724	main	
17-110	5725-5732	cluster	
17-111	5732-5733	,	
17-112	5734-5737	and	
17-113	5738-5740	is	
17-114	5741-5744	now	
17-115	5745-5754	bolstered	
17-116	5755-5759	with	
17-117	5760-5772	materialized	
17-118	5773-5777	view	
17-119	5778-5785	support	
17-120	5785-5786	.	
17-121	5787-5792	Pause	
17-122	5793-5796	and	
17-123	5797-5803	resume	
17-124	5804-5811	feature	
17-125	5812-5814	to	
17-126	5815-5823	optimize	
17-127	5824-5828	cost	
17-128	5829-5831	of	
17-129	5832-5844	environments	
17-130	5845-5848	All	
17-131	5849-5855	Amazon	
17-132	5856-5864	Redshift	
17-133	5865-5873	clusters	
17-134	5874-5877	can	
17-135	5878-5881	use	
17-136	5882-5885	the	
17-137	5886-5891	pause	
17-138	5892-5895	and	
17-139	5896-5902	resume	
17-140	5903-5910	feature	
17-141	5910-5911	.	
17-142	5912-5915	For	
17-143	5916-5924	clusters	
17-144	5925-5932	created	
17-145	5933-5938	using	
17-146	5939-5941	On	
17-147	5942-5948	Demand	
17-148	5948-5949	,	
17-149	5950-5953	the	
17-150	5954-5964	per-second	
17-151	5965-5970	grain	
17-152	5971-5978	billing	
17-153	5979-5981	is	
17-154	5982-5989	stopped	
17-155	5990-5994	when	
17-156	5995-5998	the	
17-157	5999-6006	cluster	
17-158	6007-6009	is	
17-159	6010-6016	paused	
17-160	6016-6017	.	
17-161	6018-6026	Reserved	
17-162	6027-6035	Instance	
17-163	6036-6044	clusters	
17-164	6045-6048	can	
17-165	6049-6052	use	
17-166	6053-6056	the	
17-167	6057-6062	pause	
17-168	6063-6066	and	
17-169	6067-6073	resume	
17-170	6074-6081	feature	
17-171	6082-6084	to	
17-172	6085-6091	define	
17-173	6092-6098	access	
17-174	6099-6104	times	
17-175	6105-6107	or	
17-176	6108-6114	freeze	
17-177	6115-6116	a	
17-178	6117-6124	dataset	
17-179	6125-6127	at	
17-180	6128-6129	a	
17-181	6130-6135	point	
17-182	6136-6138	in	
17-183	6139-6143	time	
17-184	6143-6144	.	

#Text=Tip #1: Precomputing results with Amazon Redshift materialized views Materialized views can significantly boost query performance for repeated and predictable analytical workloads such as dash-boarding, queries from BI tools, and extract, load, transform (ELT) data processing. Data engineers can easily create and maintain efficient data-processing pipelines with materialized views while seamlessly extending the performance benefits to data analysts and BI tools.
18-1	6145-6148	Tip	
18-2	6149-6151	#1	
18-3	6151-6152	:	
18-4	6153-6165	Precomputing	
18-5	6166-6173	results	
18-6	6174-6178	with	
18-7	6179-6185	Amazon	
18-8	6186-6194	Redshift	
18-9	6195-6207	materialized	
18-10	6208-6213	views	
18-11	6214-6226	Materialized	
18-12	6227-6232	views	
18-13	6233-6236	can	
18-14	6237-6250	significantly	
18-15	6251-6256	boost	
18-16	6257-6262	query	
18-17	6263-6274	performance	
18-18	6275-6278	for	
18-19	6279-6287	repeated	
18-20	6288-6291	and	
18-21	6292-6303	predictable	
18-22	6304-6314	analytical	
18-23	6315-6324	workloads	
18-24	6325-6329	such	
18-25	6330-6332	as	
18-26	6333-6346	dash-boarding	
18-27	6346-6347	,	
18-28	6348-6355	queries	
18-29	6356-6360	from	
18-30	6361-6363	BI	
18-31	6364-6369	tools	
18-32	6369-6370	,	
18-33	6371-6374	and	
18-34	6375-6382	extract	
18-35	6382-6383	,	
18-36	6384-6388	load	
18-37	6388-6389	,	
18-38	6390-6399	transform	
18-39	6400-6401	(	
18-40	6401-6404	ELT	
18-41	6404-6405	)	
18-42	6406-6410	data	
18-43	6411-6421	processing	
18-44	6421-6422	.	
18-45	6423-6427	Data	
18-46	6428-6437	engineers	
18-47	6438-6441	can	
18-48	6442-6448	easily	
18-49	6449-6455	create	
18-50	6456-6459	and	
18-51	6460-6468	maintain	
18-52	6469-6478	efficient	
18-53	6479-6494	data-processing	
18-54	6495-6504	pipelines	
18-55	6505-6509	with	
18-56	6510-6522	materialized	
18-57	6523-6528	views	
18-58	6529-6534	while	
18-59	6535-6545	seamlessly	
18-60	6546-6555	extending	
18-61	6556-6559	the	
18-62	6560-6571	performance	
18-63	6572-6580	benefits	
18-64	6581-6583	to	
18-65	6584-6588	data	
18-66	6589-6597	analysts	
18-67	6598-6601	and	
18-68	6602-6604	BI	
18-69	6605-6610	tools	
18-70	6610-6611	.	

#Text=Materialized views are especially useful for queries that are predictable and repeated over and over. Instead of performing resource-intensive queries on large tables, applications can query the pre-computed data stored in the materialized view. When the data in the base tables changes, you refresh the materialized view by issuing the Amazon Redshift SQL statement “refresh materialized view“. After issuing a refresh statement, your materialized view contains the same data as a regular view. Refreshes can be incremental or full refreshes (recompute). When possible, Amazon Redshift incrementally refreshes data that changed in the base tables since the materialized view was last refreshed.
19-1	6612-6624	Materialized	
19-2	6625-6630	views	
19-3	6631-6634	are	
19-4	6635-6645	especially	
19-5	6646-6652	useful	
19-6	6653-6656	for	
19-7	6657-6664	queries	
19-8	6665-6669	that	
19-9	6670-6673	are	
19-10	6674-6685	predictable	
19-11	6686-6689	and	
19-12	6690-6698	repeated	
19-13	6699-6703	over	
19-14	6704-6707	and	
19-15	6708-6712	over	
19-16	6712-6713	.	
19-17	6714-6721	Instead	
19-18	6722-6724	of	
19-19	6725-6735	performing	
19-20	6736-6754	resource-intensive	
19-21	6755-6762	queries	
19-22	6763-6765	on	
19-23	6766-6771	large	
19-24	6772-6778	tables	
19-25	6778-6779	,	
19-26	6780-6792	applications	
19-27	6793-6796	can	
19-28	6797-6802	query	
19-29	6803-6806	the	
19-30	6807-6819	pre-computed	
19-31	6820-6824	data	
19-32	6825-6831	stored	
19-33	6832-6834	in	
19-34	6835-6838	the	
19-35	6839-6851	materialized	
19-36	6852-6856	view	
19-37	6856-6857	.	
19-38	6858-6862	When	
19-39	6863-6866	the	
19-40	6867-6871	data	
19-41	6872-6874	in	
19-42	6875-6878	the	
19-43	6879-6883	base	
19-44	6884-6890	tables	
19-45	6891-6898	changes	
19-46	6898-6899	,	
19-47	6900-6903	you	
19-48	6904-6911	refresh	
19-49	6912-6915	the	
19-50	6916-6928	materialized	
19-51	6929-6933	view	
19-52	6934-6936	by	
19-53	6937-6944	issuing	
19-54	6945-6948	the	
19-55	6949-6955	Amazon	
19-56	6955-6956	 	
19-57	6956-6964	Redshift	
19-58	6964-6965	 	
19-59	6965-6968	SQL	
19-60	6969-6978	statement	
19-61	6979-6980	“	
19-62	6980-6987	refresh	
19-63	6988-7000	materialized	
19-64	7001-7005	view	
19-65	7005-7006	“	
19-66	7006-7007	.	
19-67	7008-7013	After	
19-68	7014-7021	issuing	
19-69	7022-7023	a	
19-70	7024-7031	refresh	
19-71	7032-7041	statement	
19-72	7041-7042	,	
19-73	7043-7047	your	
19-74	7048-7060	materialized	
19-75	7061-7065	view	
19-76	7066-7074	contains	
19-77	7075-7078	the	
19-78	7079-7083	same	
19-79	7084-7088	data	
19-80	7089-7091	as	
19-81	7092-7093	a	
19-82	7094-7101	regular	
19-83	7102-7106	view	
19-84	7106-7107	.	
19-85	7108-7117	Refreshes	
19-86	7118-7121	can	
19-87	7122-7124	be	
19-88	7125-7136	incremental	
19-89	7137-7139	or	
19-90	7140-7144	full	
19-91	7145-7154	refreshes	
19-92	7155-7156	(	
19-93	7156-7165	recompute	
19-94	7165-7166	)	
19-95	7166-7167	.	
19-96	7168-7172	When	
19-97	7173-7181	possible	
19-98	7181-7182	,	
19-99	7183-7189	Amazon	
19-100	7190-7198	Redshift	
19-101	7198-7199	 	
19-102	7199-7212	incrementally	
19-103	7213-7222	refreshes	
19-104	7223-7227	data	
19-105	7228-7232	that	
19-106	7233-7240	changed	
19-107	7241-7243	in	
19-108	7244-7247	the	
19-109	7248-7252	base	
19-110	7253-7259	tables	
19-111	7260-7265	since	
19-112	7266-7269	the	
19-113	7270-7282	materialized	
19-114	7283-7287	view	
19-115	7288-7291	was	
19-116	7292-7296	last	
19-117	7297-7306	refreshed	
19-118	7306-7307	.	

#Text=To demonstrate how it works, we can create an example schema to store sales information, each sale transaction and details about the store where the sales took place. To view the total amount of sales per city, we create a materialized view with the create materialized view SQL statement (city_sales) joining records from two tables and aggregating sales amount (sum(sales.amount)) per city (group by city):
20-1	7308-7310	To	
20-2	7311-7322	demonstrate	
20-3	7323-7326	how	
20-4	7327-7329	it	
20-5	7330-7335	works	
20-6	7335-7336	,	
20-7	7337-7339	we	
20-8	7340-7343	can	
20-9	7344-7350	create	
20-10	7351-7353	an	
20-11	7354-7361	example	
20-12	7362-7368	schema	
20-13	7369-7371	to	
20-14	7372-7377	store	
20-15	7378-7383	sales	
20-16	7384-7395	information	
20-17	7395-7396	,	
20-18	7397-7401	each	
20-19	7402-7406	sale	
20-20	7407-7418	transaction	
20-21	7419-7422	and	
20-22	7423-7430	details	
20-23	7431-7436	about	
20-24	7437-7440	the	
20-25	7441-7446	store	
20-26	7447-7452	where	
20-27	7453-7456	the	
20-28	7457-7462	sales	
20-29	7463-7467	took	
20-30	7468-7473	place	
20-31	7473-7474	.	
20-32	7475-7477	To	
20-33	7478-7482	view	
20-34	7483-7486	the	
20-35	7487-7492	total	
20-36	7493-7499	amount	
20-37	7500-7502	of	
20-38	7503-7508	sales	
20-39	7509-7512	per	
20-40	7513-7517	city	
20-41	7517-7518	,	
20-42	7519-7521	we	
20-43	7522-7528	create	
20-44	7529-7530	a	
20-45	7531-7543	materialized	
20-46	7544-7548	view	
20-47	7549-7553	with	
20-48	7554-7557	the	
20-49	7558-7564	create	
20-50	7565-7577	materialized	
20-51	7578-7582	view	
20-52	7583-7586	SQL	
20-53	7587-7596	statement	
20-54	7597-7598	(	
20-55	7598-7608	city_sales	
20-56	7608-7609	)	
20-57	7610-7617	joining	
20-58	7618-7625	records	
20-59	7626-7630	from	
20-60	7631-7634	two	
20-61	7635-7641	tables	
20-62	7642-7645	and	
20-63	7646-7657	aggregating	
20-64	7658-7663	sales	
20-65	7664-7670	amount	
20-66	7671-7672	(	
20-67	7672-7675	sum	
20-68	7675-7676	(	
20-69	7676-7688	sales.amount	
20-70	7688-7689	)	
20-71	7689-7690	)	
20-72	7691-7694	per	
20-73	7695-7699	city	
20-74	7700-7701	(	
20-75	7701-7706	group	
20-76	7707-7709	by	
20-77	7710-7714	city	
20-78	7714-7715	)	
20-79	7715-7716	:	

#Text=CREATE MATERIALIZED VIEW city_sales AS SELECT st.city, SUM(sa.amount) as total_sales FROM sales sa, store st WHERE sa.store_id = st.id GROUP BY st.city
21-1	7717-7723	CREATE	
21-2	7724-7736	MATERIALIZED	
21-3	7737-7741	VIEW	
21-4	7742-7752	city_sales	
21-5	7753-7755	AS	
21-6	7756-7762	SELECT	
21-7	7763-7770	st.city	
21-8	7770-7771	,	
21-9	7772-7775	SUM	
21-10	7775-7776	(	
21-11	7776-7785	sa.amount	
21-12	7785-7786	)	
21-13	7787-7789	as	
21-14	7790-7801	total_sales	
21-15	7802-7806	FROM	
21-16	7807-7812	sales	
21-17	7813-7815	sa	
21-18	7815-7816	,	
21-19	7817-7822	store	
21-20	7823-7825	st	
21-21	7826-7831	WHERE	
21-22	7832-7843	sa.store_id	
21-23	7844-7845	=	
21-24	7846-7851	st.id	
21-25	7852-7857	GROUP	
21-26	7858-7860	BY	
21-27	7861-7868	st.city	

#Text=Now we can query the materialized view just like a regular view or table and issue statements like “SELECT city, total_sales FROM city_sales” to get the following results. The join between the two tables and the aggregate (sum and group by) are already computed, resulting in significantly less data to scan. When the data in the underlying base tables changes, the materialized view doesn’t automatically reflect those changes. You can refresh the data stored in the materialized view on demand with the latest changes from the base tables using the SQL refresh materialized view command. For example, see the following code:
22-1	7869-7872	Now	
22-2	7873-7875	we	
22-3	7876-7879	can	
22-4	7880-7885	query	
22-5	7886-7889	the	
22-6	7890-7902	materialized	
22-7	7903-7907	view	
22-8	7908-7912	just	
22-9	7913-7917	like	
22-10	7918-7919	a	
22-11	7920-7927	regular	
22-12	7928-7932	view	
22-13	7933-7935	or	
22-14	7936-7941	table	
22-15	7942-7945	and	
22-16	7946-7951	issue	
22-17	7952-7962	statements	
22-18	7963-7967	like	
22-19	7968-7969	“	
22-20	7969-7975	SELECT	
22-21	7976-7980	city	
22-22	7980-7981	,	
22-23	7982-7993	total_sales	
22-24	7994-7998	FROM	
22-25	7999-8009	city_sales	
22-26	8009-8010	”	
22-27	8011-8013	to	
22-28	8014-8017	get	
22-29	8018-8021	the	
22-30	8022-8031	following	
22-31	8032-8039	results	
22-32	8039-8040	.	
22-33	8041-8044	The	
22-34	8045-8049	join	
22-35	8050-8057	between	
22-36	8058-8061	the	
22-37	8062-8065	two	
22-38	8066-8072	tables	
22-39	8073-8076	and	
22-40	8077-8080	the	
22-41	8081-8090	aggregate	
22-42	8091-8092	(	
22-43	8092-8095	sum	
22-44	8096-8099	and	
22-45	8100-8105	group	
22-46	8106-8108	by	
22-47	8108-8109	)	
22-48	8110-8113	are	
22-49	8114-8121	already	
22-50	8122-8130	computed	
22-51	8130-8131	,	
22-52	8132-8141	resulting	
22-53	8142-8144	in	
22-54	8145-8158	significantly	
22-55	8159-8163	less	
22-56	8164-8168	data	
22-57	8169-8171	to	
22-58	8172-8176	scan	
22-59	8176-8177	.	
22-60	8178-8182	When	
22-61	8183-8186	the	
22-62	8187-8191	data	
22-63	8192-8194	in	
22-64	8195-8198	the	
22-65	8199-8209	underlying	
22-66	8210-8214	base	
22-67	8215-8221	tables	
22-68	8222-8229	changes	
22-69	8229-8230	,	
22-70	8231-8234	the	
22-71	8235-8247	materialized	
22-72	8248-8252	view	
22-73	8253-8258	doesn	
22-74	8258-8259	’	
22-75	8259-8260	t	
22-76	8261-8274	automatically	
22-77	8275-8282	reflect	
22-78	8283-8288	those	
22-79	8289-8296	changes	
22-80	8296-8297	.	
22-81	8298-8301	You	
22-82	8302-8305	can	
22-83	8306-8313	refresh	
22-84	8314-8317	the	
22-85	8318-8322	data	
22-86	8323-8329	stored	
22-87	8330-8332	in	
22-88	8333-8336	the	
22-89	8337-8349	materialized	
22-90	8350-8354	view	
22-91	8355-8357	on	
22-92	8358-8364	demand	
22-93	8365-8369	with	
22-94	8370-8373	the	
22-95	8374-8380	latest	
22-96	8381-8388	changes	
22-97	8389-8393	from	
22-98	8394-8397	the	
22-99	8398-8402	base	
22-100	8403-8409	tables	
22-101	8410-8415	using	
22-102	8416-8419	the	
22-103	8420-8423	SQL	
22-104	8424-8431	refresh	
22-105	8431-8432	 	
22-106	8432-8444	materialized	
22-107	8445-8449	view	
22-108	8450-8457	command	
22-109	8457-8458	.	
22-110	8459-8462	For	
22-111	8463-8470	example	
22-112	8470-8471	,	
22-113	8472-8475	see	
22-114	8476-8479	the	
22-115	8480-8489	following	
22-116	8490-8494	code	
22-117	8494-8495	:	

#Text=!-- let's add a row in the sales base table INSERT INTO sales (id, item, store_id, customer_id, amount) VALUES(8, 'Gaming PC Super ProXXL', 1, 1, 3000); SELECT city, total_sales FROM city_sales WHERE city = 'Paris'
23-1	8496-8497	!	
23-2	8497-8498	-	
23-3	8498-8499	-	
23-4	8500-8505	let's	
23-5	8506-8509	add	
23-6	8510-8511	a	
23-7	8512-8515	row	
23-8	8516-8518	in	
23-9	8519-8522	the	
23-10	8523-8528	sales	
23-11	8529-8533	base	
23-12	8534-8539	table	
23-13	8540-8546	INSERT	
23-14	8547-8551	INTO	
23-15	8552-8557	sales	
23-16	8558-8559	(	
23-17	8559-8561	id	
23-18	8561-8562	,	
23-19	8563-8567	item	
23-20	8567-8568	,	
23-21	8569-8577	store_id	
23-22	8577-8578	,	
23-23	8579-8590	customer_id	
23-24	8590-8591	,	
23-25	8592-8598	amount	
23-26	8598-8599	)	
23-27	8600-8606	VALUES	
23-28	8606-8607	(	
23-29	8607-8608	8	
23-30	8608-8609	,	
23-31	8610-8611	'	
23-32	8611-8617	Gaming	
23-33	8618-8620	PC	
23-34	8621-8626	Super	
23-35	8627-8633	ProXXL	
23-36	8633-8634	'	
23-37	8634-8635	,	
23-38	8636-8637	1	
23-39	8637-8638	,	
23-40	8639-8640	1	
23-41	8640-8641	,	
23-42	8642-8646	3000	
23-43	8646-8647	)	
23-44	8647-8648	;	
23-45	8649-8655	SELECT	
23-46	8656-8660	city	
23-47	8660-8661	,	
23-48	8662-8673	total_sales	
23-49	8674-8678	FROM	
23-50	8679-8689	city_sales	
23-51	8690-8695	WHERE	
23-52	8696-8700	city	
23-53	8701-8702	=	
23-54	8703-8704	'	
23-55	8704-8709	Paris	
23-56	8709-8710	'	

#Text=|city |total_sales| |-----|-----------| |Paris| 690| !-- the new sale is not taken into account !! -- let's refresh the materialized view
24-1	8711-8712	|	
24-2	8712-8716	city	
24-3	8717-8718	|	
24-4	8718-8729	total_sales	
24-5	8729-8730	|	
24-6	8731-8732	|	
24-7	8732-8733	-	
24-8	8733-8734	-	
24-9	8734-8735	-	
24-10	8735-8736	-	
24-11	8736-8737	-	
24-12	8737-8738	|	
24-13	8738-8739	-	
24-14	8739-8740	-	
24-15	8740-8741	-	
24-16	8741-8742	-	
24-17	8742-8743	-	
24-18	8743-8744	-	
24-19	8744-8745	-	
24-20	8745-8746	-	
24-21	8746-8747	-	
24-22	8747-8748	-	
24-23	8748-8749	-	
24-24	8749-8750	|	
24-25	8751-8752	|	
24-26	8752-8757	Paris	
24-27	8757-8758	|	
24-28	8759-8762	690	
24-29	8762-8763	|	
24-30	8764-8765	!	
24-31	8765-8766	-	
24-32	8766-8767	-	
24-33	8768-8771	the	
24-34	8772-8775	new	
24-35	8776-8780	sale	
24-36	8781-8783	is	
24-37	8784-8787	not	
24-38	8788-8793	taken	
24-39	8794-8798	into	
24-40	8799-8806	account	
24-41	8807-8808	!	
24-42	8808-8809	!	
24-43	8810-8811	-	
24-44	8811-8812	-	
24-45	8813-8818	let's	
24-46	8819-8826	refresh	
24-47	8827-8830	the	
24-48	8831-8843	materialized	
24-49	8844-8848	view	

#Text=REFRESH MATERIALIZED VIEW city_sales; SELECT city, total_sales FROM city_sales WHERE city = 'Paris' |city |total_sales| |-----|-----------| |Paris| 3690|
25-1	8849-8856	REFRESH	
25-2	8857-8869	MATERIALIZED	
25-3	8870-8874	VIEW	
25-4	8875-8885	city_sales	
25-5	8885-8886	;	
25-6	8887-8893	SELECT	
25-7	8894-8898	city	
25-8	8898-8899	,	
25-9	8900-8911	total_sales	
25-10	8912-8916	FROM	
25-11	8917-8927	city_sales	
25-12	8928-8933	WHERE	
25-13	8934-8938	city	
25-14	8939-8940	=	
25-15	8941-8942	'	
25-16	8942-8947	Paris	
25-17	8947-8948	'	
25-18	8949-8950	|	
25-19	8950-8954	city	
25-20	8955-8956	|	
25-21	8956-8967	total_sales	
25-22	8967-8968	|	
25-23	8969-8970	|	
25-24	8970-8971	-	
25-25	8971-8972	-	
25-26	8972-8973	-	
25-27	8973-8974	-	
25-28	8974-8975	-	
25-29	8975-8976	|	
25-30	8976-8977	-	
25-31	8977-8978	-	
25-32	8978-8979	-	
25-33	8979-8980	-	
25-34	8980-8981	-	
25-35	8981-8982	-	
25-36	8982-8983	-	
25-37	8983-8984	-	
25-38	8984-8985	-	
25-39	8985-8986	-	
25-40	8986-8987	-	
25-41	8987-8988	|	
25-42	8989-8990	|	
25-43	8990-8995	Paris	
25-44	8995-8996	|	
25-45	8997-9001	3690	
25-46	9001-9002	|	

#Text=!-- now the view has the latest sales data The full code for this use case is available as a gist in GitHub.
26-1	9003-9004	!	
26-2	9004-9005	-	
26-3	9005-9006	-	
26-4	9007-9010	now	
26-5	9011-9014	the	
26-6	9015-9019	view	
26-7	9020-9023	has	
26-8	9024-9027	the	
26-9	9028-9034	latest	
26-10	9035-9040	sales	
26-11	9041-9045	data	
26-12	9046-9049	The	
26-13	9050-9054	full	
26-14	9055-9059	code	
26-15	9060-9063	for	
26-16	9064-9068	this	
26-17	9069-9072	use	
26-18	9073-9077	case	
26-19	9078-9080	is	
26-20	9081-9090	available	
26-21	9091-9093	as	
26-22	9094-9095	a	
26-23	9096-9100	gist	
26-24	9101-9103	in	
26-25	9104-9110	GitHub	
26-26	9110-9111	.	

#Text=You can also extend the benefits of materialized views to external data in your Amazon S3 data lake and federated data sources. With materialized views, you can easily store and manage the pre-computed results of a SELECT statement referencing both external tables and Amazon Redshift tables. Subsequent queries referencing the materialized views run much faster because they use the pre-computed results stored in Amazon Redshift, instead of accessing the external tables. This also helps you reduce the associated costs of repeatedly accessing the external data sources, because you can only access them when you explicitly refresh the materialized views. Tip #2: Handling bursts of workload with concurrency scaling and elastic resize The legacy, on-premises model requires you to estimate what the system will need 3-4 years in the future to make sure you’re leasing enough horsepower at the time of purchase. But the ability to resize a cluster allows for right-sizing your resources as you go. Amazon Redshift extends this ability with elastic resize and concurrency scaling.
27-1	9112-9115	You	
27-2	9116-9119	can	
27-3	9120-9124	also	
27-4	9125-9131	extend	
27-5	9132-9135	the	
27-6	9136-9144	benefits	
27-7	9145-9147	of	
27-8	9148-9160	materialized	
27-9	9161-9166	views	
27-10	9167-9169	to	
27-11	9170-9178	external	
27-12	9179-9183	data	
27-13	9184-9186	in	
27-14	9187-9191	your	
27-15	9192-9198	Amazon	
27-16	9199-9201	S3	
27-17	9202-9206	data	
27-18	9207-9211	lake	
27-19	9212-9215	and	
27-20	9216-9225	federated	
27-21	9226-9230	data	
27-22	9231-9238	sources	
27-23	9238-9239	.	
27-24	9240-9244	With	
27-25	9245-9257	materialized	
27-26	9258-9263	views	
27-27	9263-9264	,	
27-28	9265-9268	you	
27-29	9269-9272	can	
27-30	9273-9279	easily	
27-31	9280-9285	store	
27-32	9286-9289	and	
27-33	9290-9296	manage	
27-34	9297-9300	the	
27-35	9301-9313	pre-computed	
27-36	9314-9321	results	
27-37	9322-9324	of	
27-38	9325-9326	a	
27-39	9327-9333	SELECT	
27-40	9334-9343	statement	
27-41	9344-9355	referencing	
27-42	9356-9360	both	
27-43	9361-9369	external	
27-44	9370-9376	tables	
27-45	9377-9380	and	
27-46	9381-9387	Amazon	
27-47	9388-9396	Redshift	
27-48	9397-9403	tables	
27-49	9403-9404	.	
27-50	9405-9415	Subsequent	
27-51	9416-9423	queries	
27-52	9424-9435	referencing	
27-53	9436-9439	the	
27-54	9440-9452	materialized	
27-55	9453-9458	views	
27-56	9459-9462	run	
27-57	9463-9467	much	
27-58	9468-9474	faster	
27-59	9475-9482	because	
27-60	9483-9487	they	
27-61	9488-9491	use	
27-62	9492-9495	the	
27-63	9496-9508	pre-computed	
27-64	9509-9516	results	
27-65	9517-9523	stored	
27-66	9524-9526	in	
27-67	9527-9533	Amazon	
27-68	9534-9542	Redshift	
27-69	9542-9543	,	
27-70	9544-9551	instead	
27-71	9552-9554	of	
27-72	9555-9564	accessing	
27-73	9565-9568	the	
27-74	9569-9577	external	
27-75	9578-9584	tables	
27-76	9584-9585	.	
27-77	9586-9590	This	
27-78	9591-9595	also	
27-79	9596-9601	helps	
27-80	9602-9605	you	
27-81	9606-9612	reduce	
27-82	9613-9616	the	
27-83	9617-9627	associated	
27-84	9628-9633	costs	
27-85	9634-9636	of	
27-86	9637-9647	repeatedly	
27-87	9648-9657	accessing	
27-88	9658-9661	the	
27-89	9662-9670	external	
27-90	9671-9675	data	
27-91	9676-9683	sources	
27-92	9683-9684	,	
27-93	9685-9692	because	
27-94	9693-9696	you	
27-95	9697-9700	can	
27-96	9701-9705	only	
27-97	9706-9712	access	
27-98	9713-9717	them	
27-99	9718-9722	when	
27-100	9723-9726	you	
27-101	9727-9737	explicitly	
27-102	9738-9745	refresh	
27-103	9746-9749	the	
27-104	9750-9762	materialized	
27-105	9763-9768	views	
27-106	9768-9769	.	
27-107	9770-9773	Tip	
27-108	9774-9776	#2	
27-109	9776-9777	:	
27-110	9777-9778	 	
27-111	9778-9786	Handling	
27-112	9787-9793	bursts	
27-113	9794-9796	of	
27-114	9797-9805	workload	
27-115	9806-9810	with	
27-116	9811-9822	concurrency	
27-117	9823-9830	scaling	
27-118	9831-9834	and	
27-119	9835-9842	elastic	
27-120	9843-9849	resize	
27-121	9850-9853	The	
27-122	9854-9860	legacy	
27-123	9860-9861	,	
27-124	9862-9873	on-premises	
27-125	9874-9879	model	
27-126	9880-9888	requires	
27-127	9889-9892	you	
27-128	9893-9895	to	
27-129	9896-9904	estimate	
27-130	9905-9909	what	
27-131	9910-9913	the	
27-132	9914-9920	system	
27-133	9921-9925	will	
27-134	9926-9930	need	
27-135	9931-9932	3	
27-136	9932-9933	-	
27-137	9933-9934	4	
27-138	9935-9940	years	
27-139	9941-9943	in	
27-140	9944-9947	the	
27-141	9948-9954	future	
27-142	9955-9957	to	
27-143	9958-9962	make	
27-144	9963-9967	sure	
27-145	9968-9971	you	
27-146	9971-9972	’	
27-147	9972-9974	re	
27-148	9975-9982	leasing	
27-149	9983-9989	enough	
27-150	9990-10000	horsepower	
27-151	10001-10003	at	
27-152	10004-10007	the	
27-153	10008-10012	time	
27-154	10013-10015	of	
27-155	10016-10024	purchase	
27-156	10024-10025	.	
27-157	10026-10029	But	
27-158	10030-10033	the	
27-159	10034-10041	ability	
27-160	10042-10044	to	
27-161	10045-10051	resize	
27-162	10052-10053	a	
27-163	10054-10061	cluster	
27-164	10062-10068	allows	
27-165	10069-10072	for	
27-166	10073-10085	right-sizing	
27-167	10086-10090	your	
27-168	10091-10100	resources	
27-169	10101-10103	as	
27-170	10104-10107	you	
27-171	10108-10110	go	
27-172	10110-10111	.	
27-173	10112-10118	Amazon	
27-174	10119-10127	Redshift	
27-175	10128-10135	extends	
27-176	10136-10140	this	
27-177	10141-10148	ability	
27-178	10149-10153	with	
27-179	10154-10161	elastic	
27-180	10162-10168	resize	
27-181	10169-10172	and	
27-182	10173-10184	concurrency	
27-183	10185-10192	scaling	
27-184	10192-10193	.	

#Text=Elastic resize lets you quickly increase or decrease the number of compute nodes, doubling or halving the original cluster’s node count, or even change the node type. You can expand the cluster to provide additional processing power to accommodate an expected increase in workload, such as Black Friday for internet shopping, or a championship game for a team’s web business. Choose classic resize when you’re resizing to a configuration that isn’t available through elastic resize. Classic resize is slower but allows you to change the node type or expand beyond the doubling or halving size limitations of an elastic resize. Elastic resize completes in minutes and doesn’t require a cluster restart. For anticipated workload spikes that occur on a predictable schedule, you can automate the resize operation using the elastic resize scheduler feature on the Amazon Redshift console, the AWS Command Line Interface (AWS CLI), or API.
28-1	10194-10201	Elastic	
28-2	10202-10208	resize	
28-3	10209-10213	lets	
28-4	10214-10217	you	
28-5	10218-10225	quickly	
28-6	10226-10234	increase	
28-7	10235-10237	or	
28-8	10238-10246	decrease	
28-9	10247-10250	the	
28-10	10251-10257	number	
28-11	10258-10260	of	
28-12	10261-10268	compute	
28-13	10269-10274	nodes	
28-14	10274-10275	,	
28-15	10276-10284	doubling	
28-16	10285-10287	or	
28-17	10288-10295	halving	
28-18	10296-10299	the	
28-19	10300-10308	original	
28-20	10309-10316	cluster	
28-21	10316-10317	’	
28-22	10317-10318	s	
28-23	10319-10323	node	
28-24	10324-10329	count	
28-25	10329-10330	,	
28-26	10331-10333	or	
28-27	10334-10338	even	
28-28	10338-10339	 	
28-29	10339-10345	change	
28-30	10346-10349	the	
28-31	10350-10354	node	
28-32	10355-10359	type	
28-33	10359-10360	.	
28-34	10360-10361	 	
28-35	10361-10364	You	
28-36	10365-10368	can	
28-37	10369-10375	expand	
28-38	10376-10379	the	
28-39	10380-10387	cluster	
28-40	10388-10390	to	
28-41	10391-10398	provide	
28-42	10399-10409	additional	
28-43	10410-10420	processing	
28-44	10421-10426	power	
28-45	10427-10429	to	
28-46	10430-10441	accommodate	
28-47	10442-10444	an	
28-48	10445-10453	expected	
28-49	10454-10462	increase	
28-50	10463-10465	in	
28-51	10466-10474	workload	
28-52	10474-10475	,	
28-53	10476-10480	such	
28-54	10481-10483	as	
28-55	10484-10489	Black	
28-56	10490-10496	Friday	
28-57	10497-10500	for	
28-58	10501-10509	internet	
28-59	10510-10518	shopping	
28-60	10518-10519	,	
28-61	10520-10522	or	
28-62	10523-10524	a	
28-63	10525-10537	championship	
28-64	10538-10542	game	
28-65	10543-10546	for	
28-66	10547-10548	a	
28-67	10549-10553	team	
28-68	10553-10554	’	
28-69	10554-10555	s	
28-70	10556-10559	web	
28-71	10560-10568	business	
28-72	10568-10569	.	
28-73	10569-10570	 	
28-74	10570-10576	Choose	
28-75	10577-10584	classic	
28-76	10585-10591	resize	
28-77	10592-10596	when	
28-78	10597-10600	you	
28-79	10600-10601	’	
28-80	10601-10603	re	
28-81	10604-10612	resizing	
28-82	10613-10615	to	
28-83	10616-10617	a	
28-84	10618-10631	configuration	
28-85	10632-10636	that	
28-86	10637-10640	isn	
28-87	10640-10641	’	
28-88	10641-10642	t	
28-89	10643-10652	available	
28-90	10653-10660	through	
28-91	10661-10668	elastic	
28-92	10669-10675	resize	
28-93	10675-10676	.	
28-94	10677-10684	Classic	
28-95	10685-10691	resize	
28-96	10692-10694	is	
28-97	10695-10701	slower	
28-98	10702-10705	but	
28-99	10706-10712	allows	
28-100	10713-10716	you	
28-101	10717-10719	to	
28-102	10720-10726	change	
28-103	10727-10730	the	
28-104	10731-10735	node	
28-105	10736-10740	type	
28-106	10741-10743	or	
28-107	10744-10750	expand	
28-108	10751-10757	beyond	
28-109	10758-10761	the	
28-110	10762-10770	doubling	
28-111	10771-10773	or	
28-112	10774-10781	halving	
28-113	10782-10786	size	
28-114	10787-10798	limitations	
28-115	10799-10801	of	
28-116	10802-10804	an	
28-117	10805-10812	elastic	
28-118	10813-10819	resize	
28-119	10819-10820	.	
28-120	10821-10828	Elastic	
28-121	10829-10835	resize	
28-122	10836-10845	completes	
28-123	10846-10848	in	
28-124	10849-10856	minutes	
28-125	10857-10860	and	
28-126	10861-10866	doesn	
28-127	10866-10867	’	
28-128	10867-10868	t	
28-129	10869-10876	require	
28-130	10877-10878	a	
28-131	10879-10886	cluster	
28-132	10887-10894	restart	
28-133	10894-10895	.	
28-134	10896-10899	For	
28-135	10900-10911	anticipated	
28-136	10912-10920	workload	
28-137	10921-10927	spikes	
28-138	10928-10932	that	
28-139	10933-10938	occur	
28-140	10939-10941	on	
28-141	10942-10943	a	
28-142	10944-10955	predictable	
28-143	10956-10964	schedule	
28-144	10964-10965	,	
28-145	10966-10969	you	
28-146	10970-10973	can	
28-147	10974-10982	automate	
28-148	10983-10986	the	
28-149	10987-10993	resize	
28-150	10994-11003	operation	
28-151	11004-11009	using	
28-152	11010-11013	the	
28-153	11014-11021	elastic	
28-154	11022-11028	resize	
28-155	11029-11038	scheduler	
28-156	11039-11046	feature	
28-157	11047-11049	on	
28-158	11050-11053	the	
28-159	11054-11060	Amazon	
28-160	11061-11069	Redshift	
28-161	11070-11077	console	
28-162	11077-11078	,	
28-163	11079-11082	the	
28-164	11083-11086	AWS	
28-165	11087-11094	Command	
28-166	11095-11099	Line	
28-167	11100-11109	Interface	
28-168	11110-11111	(	
28-169	11111-11114	AWS	
28-170	11115-11118	CLI	
28-171	11118-11119	)	
28-172	11119-11120	,	
28-173	11121-11123	or	
28-174	11124-11127	API	
28-175	11127-11128	.	

#Text=Concurrency scaling allows your Amazon Redshift cluster to add capacity dynamically in response to the workload arriving at the cluster.
29-1	11129-11140	Concurrency	
29-2	11141-11148	scaling	
29-3	11149-11155	allows	
29-4	11156-11160	your	
29-5	11161-11167	Amazon	
29-6	11168-11176	Redshift	
29-7	11177-11184	cluster	
29-8	11185-11187	to	
29-9	11188-11191	add	
29-10	11192-11200	capacity	
29-11	11201-11212	dynamically	
29-12	11213-11215	in	
29-13	11216-11224	response	
29-14	11225-11227	to	
29-15	11228-11231	the	
29-16	11232-11240	workload	
29-17	11241-11249	arriving	
29-18	11250-11252	at	
29-19	11253-11256	the	
29-20	11257-11264	cluster	
29-21	11264-11265	.	

#Text=By default, concurrency scaling is disabled, and you can enable it for any workload management (WLM) queue to scale to a virtually unlimited number of concurrent queries, with consistently fast query performance. You can control the maximum number of concurrency scaling clusters allowed by setting the “max_concurrency_scaling_clusters” parameter value from 1 (default) to 10 (contact support to raise this soft limit). The free billing credits provided for concurrency scaling is often enough and the majority of customers using this feature don’t end up paying extra for it. For more information about the concurrency scaling billing model see Concurrency Scaling pricing. You can monitor and control the concurrency scaling usage and cost by creating daily, weekly, or monthly usage limits and instruct Amazon Redshift to automatically take action (such as logging, alerting or disabling further usage) if those limits are reached. For more information, see Managing usage limits in Amazon Redshift.
30-1	11266-11268	By	
30-2	11269-11276	default	
30-3	11276-11277	,	
30-4	11278-11289	concurrency	
30-5	11290-11297	scaling	
30-6	11298-11300	is	
30-7	11301-11309	disabled	
30-8	11309-11310	,	
30-9	11311-11314	and	
30-10	11315-11318	you	
30-11	11319-11322	can	
30-12	11323-11329	enable	
30-13	11330-11332	it	
30-14	11333-11336	for	
30-15	11337-11340	any	
30-16	11341-11349	workload	
30-17	11350-11360	management	
30-18	11361-11362	(	
30-19	11362-11365	WLM	
30-20	11365-11366	)	
30-21	11367-11372	queue	
30-22	11373-11375	to	
30-23	11376-11381	scale	
30-24	11382-11384	to	
30-25	11385-11386	a	
30-26	11387-11396	virtually	
30-27	11397-11406	unlimited	
30-28	11407-11413	number	
30-29	11414-11416	of	
30-30	11417-11427	concurrent	
30-31	11428-11435	queries	
30-32	11435-11436	,	
30-33	11437-11441	with	
30-34	11442-11454	consistently	
30-35	11455-11459	fast	
30-36	11460-11465	query	
30-37	11466-11477	performance	
30-38	11477-11478	.	
30-39	11479-11482	You	
30-40	11483-11486	can	
30-41	11487-11494	control	
30-42	11495-11498	the	
30-43	11499-11506	maximum	
30-44	11507-11513	number	
30-45	11514-11516	of	
30-46	11517-11528	concurrency	
30-47	11529-11536	scaling	
30-48	11537-11545	clusters	
30-49	11546-11553	allowed	
30-50	11554-11556	by	
30-51	11557-11564	setting	
30-52	11565-11568	the	
30-53	11569-11570	“	
30-54	11570-11602	max_concurrency_scaling_clusters	
30-55	11602-11603	”	
30-56	11604-11613	parameter	
30-57	11614-11619	value	
30-58	11620-11624	from	
30-59	11625-11626	1	
30-60	11627-11628	(	
30-61	11628-11635	default	
30-62	11635-11636	)	
30-63	11637-11639	to	
30-64	11640-11642	10	
30-65	11643-11644	(	
30-66	11644-11651	contact	
30-67	11652-11659	support	
30-68	11660-11662	to	
30-69	11663-11668	raise	
30-70	11669-11673	this	
30-71	11674-11678	soft	
30-72	11679-11684	limit	
30-73	11684-11685	)	
30-74	11685-11686	.	
30-75	11687-11690	The	
30-76	11691-11695	free	
30-77	11696-11703	billing	
30-78	11704-11711	credits	
30-79	11712-11720	provided	
30-80	11721-11724	for	
30-81	11725-11736	concurrency	
30-82	11737-11744	scaling	
30-83	11745-11747	is	
30-84	11748-11753	often	
30-85	11754-11760	enough	
30-86	11761-11764	and	
30-87	11765-11768	the	
30-88	11769-11777	majority	
30-89	11778-11780	of	
30-90	11781-11790	customers	
30-91	11791-11796	using	
30-92	11797-11801	this	
30-93	11802-11809	feature	
30-94	11810-11813	don	
30-95	11813-11814	’	
30-96	11814-11815	t	
30-97	11816-11819	end	
30-98	11820-11822	up	
30-99	11823-11829	paying	
30-100	11830-11835	extra	
30-101	11836-11839	for	
30-102	11840-11842	it	
30-103	11842-11843	.	
30-104	11844-11847	For	
30-105	11848-11852	more	
30-106	11853-11864	information	
30-107	11865-11870	about	
30-108	11871-11874	the	
30-109	11875-11886	concurrency	
30-110	11887-11894	scaling	
30-111	11895-11902	billing	
30-112	11903-11908	model	
30-113	11909-11912	see	
30-114	11913-11924	Concurrency	
30-115	11925-11932	Scaling	
30-116	11933-11940	pricing	
30-117	11940-11941	.	
30-118	11942-11945	You	
30-119	11946-11949	can	
30-120	11950-11957	monitor	
30-121	11958-11961	and	
30-122	11962-11969	control	
30-123	11970-11973	the	
30-124	11974-11985	concurrency	
30-125	11986-11993	scaling	
30-126	11994-11999	usage	
30-127	12000-12003	and	
30-128	12004-12008	cost	
30-129	12009-12011	by	
30-130	12012-12020	creating	
30-131	12021-12026	daily	
30-132	12026-12027	,	
30-133	12028-12034	weekly	
30-134	12034-12035	,	
30-135	12036-12038	or	
30-136	12039-12046	monthly	
30-137	12047-12052	usage	
30-138	12053-12059	limits	
30-139	12060-12063	and	
30-140	12064-12072	instruct	
30-141	12073-12079	Amazon	
30-142	12080-12088	Redshift	
30-143	12089-12091	to	
30-144	12092-12105	automatically	
30-145	12106-12110	take	
30-146	12111-12117	action	
30-147	12118-12119	(	
30-148	12119-12123	such	
30-149	12124-12126	as	
30-150	12127-12134	logging	
30-151	12134-12135	,	
30-152	12136-12144	alerting	
30-153	12145-12147	or	
30-154	12148-12157	disabling	
30-155	12158-12165	further	
30-156	12166-12171	usage	
30-157	12171-12172	)	
30-158	12173-12175	if	
30-159	12176-12181	those	
30-160	12182-12188	limits	
30-161	12189-12192	are	
30-162	12193-12200	reached	
30-163	12200-12201	.	
30-164	12202-12205	For	
30-165	12206-12210	more	
30-166	12211-12222	information	
30-167	12222-12223	,	
30-168	12224-12227	see	
30-169	12228-12236	Managing	
30-170	12237-12242	usage	
30-171	12243-12249	limits	
30-172	12250-12252	in	
30-173	12253-12259	Amazon	
30-174	12260-12268	Redshift	
30-175	12268-12269	.	

#Text=Together, these options open up new ways to right-size the platform to meet demand. Before these options, you needed to size your WLM queue, or even an entire Amazon Redshift cluster, beforehand in anticipation of upcoming peaks. Tip #3: Using the Amazon Redshift Advisor to minimize administrative work Amazon Redshift Advisor offers recommendations specific to your Amazon Redshift cluster to help you improve its performance and decrease operating costs.
31-1	12270-12278	Together	
31-2	12278-12279	,	
31-3	12280-12285	these	
31-4	12286-12293	options	
31-5	12294-12298	open	
31-6	12299-12301	up	
31-7	12302-12305	new	
31-8	12306-12310	ways	
31-9	12311-12313	to	
31-10	12314-12324	right-size	
31-11	12325-12328	the	
31-12	12329-12337	platform	
31-13	12338-12340	to	
31-14	12341-12345	meet	
31-15	12346-12352	demand	
31-16	12352-12353	.	
31-17	12354-12360	Before	
31-18	12361-12366	these	
31-19	12367-12374	options	
31-20	12374-12375	,	
31-21	12376-12379	you	
31-22	12380-12386	needed	
31-23	12387-12389	to	
31-24	12390-12394	size	
31-25	12395-12399	your	
31-26	12400-12403	WLM	
31-27	12404-12409	queue	
31-28	12409-12410	,	
31-29	12411-12413	or	
31-30	12414-12418	even	
31-31	12419-12421	an	
31-32	12422-12428	entire	
31-33	12429-12435	Amazon	
31-34	12436-12444	Redshift	
31-35	12445-12452	cluster	
31-36	12452-12453	,	
31-37	12454-12464	beforehand	
31-38	12465-12467	in	
31-39	12468-12480	anticipation	
31-40	12481-12483	of	
31-41	12484-12492	upcoming	
31-42	12493-12498	peaks	
31-43	12498-12499	.	
31-44	12500-12503	Tip	
31-45	12504-12506	#3	
31-46	12506-12507	:	
31-47	12508-12513	Using	
31-48	12514-12517	the	
31-49	12518-12524	Amazon	
31-50	12525-12533	Redshift	
31-51	12534-12541	Advisor	
31-52	12542-12544	to	
31-53	12545-12553	minimize	
31-54	12554-12568	administrative	
31-55	12569-12573	work	
31-56	12574-12580	Amazon	
31-57	12581-12589	Redshift	
31-58	12590-12597	Advisor	
31-59	12598-12604	offers	
31-60	12605-12620	recommendations	
31-61	12621-12629	specific	
31-62	12630-12632	to	
31-63	12633-12637	your	
31-64	12638-12644	Amazon	
31-65	12645-12653	Redshift	
31-66	12654-12661	cluster	
31-67	12662-12664	to	
31-68	12665-12669	help	
31-69	12670-12673	you	
31-70	12674-12681	improve	
31-71	12682-12685	its	
31-72	12686-12697	performance	
31-73	12698-12701	and	
31-74	12702-12710	decrease	
31-75	12711-12720	operating	
31-76	12721-12726	costs	
31-77	12726-12727	.	

#Text=Advisor bases its recommendations on observations regarding performance statistics or operations data. Advisor develops observations by running tests on your clusters to determine if a test value is within a specified range. If the test result is outside of that range, Advisor generates an observation for your cluster. At the same time, Advisor creates a recommendation about how to bring the observed value back into the best-practice range. Advisor only displays recommendations that can have a significant impact on performance and operations. When Advisor determines that a recommendation has been addressed, it removes it from your recommendation list. In this section, we share some examples of Advisor recommendations: Distribution key recommendation Advisor analyzes your cluster’s workload to identify the most appropriate distribution key for the tables that can significantly benefit from a KEY distribution style. Advisor provides ALTER TABLE statements that alter the DISTSTYLE and DISTKEY of a table based on its analysis. To realize a significant performance benefit, make sure to implement all SQL statements within a recommendation group.
32-1	12728-12735	Advisor	
32-2	12736-12741	bases	
32-3	12742-12745	its	
32-4	12746-12761	recommendations	
32-5	12762-12764	on	
32-6	12765-12777	observations	
32-7	12778-12787	regarding	
32-8	12788-12799	performance	
32-9	12800-12810	statistics	
32-10	12811-12813	or	
32-11	12814-12824	operations	
32-12	12825-12829	data	
32-13	12829-12830	.	
32-14	12831-12838	Advisor	
32-15	12839-12847	develops	
32-16	12848-12860	observations	
32-17	12861-12863	by	
32-18	12864-12871	running	
32-19	12872-12877	tests	
32-20	12878-12880	on	
32-21	12881-12885	your	
32-22	12886-12894	clusters	
32-23	12895-12897	to	
32-24	12898-12907	determine	
32-25	12908-12910	if	
32-26	12911-12912	a	
32-27	12913-12917	test	
32-28	12918-12923	value	
32-29	12924-12926	is	
32-30	12927-12933	within	
32-31	12934-12935	a	
32-32	12936-12945	specified	
32-33	12946-12951	range	
32-34	12951-12952	.	
32-35	12953-12955	If	
32-36	12956-12959	the	
32-37	12960-12964	test	
32-38	12965-12971	result	
32-39	12972-12974	is	
32-40	12975-12982	outside	
32-41	12983-12985	of	
32-42	12986-12990	that	
32-43	12991-12996	range	
32-44	12996-12997	,	
32-45	12998-13005	Advisor	
32-46	13006-13015	generates	
32-47	13016-13018	an	
32-48	13019-13030	observation	
32-49	13031-13034	for	
32-50	13035-13039	your	
32-51	13040-13047	cluster	
32-52	13047-13048	.	
32-53	13049-13051	At	
32-54	13052-13055	the	
32-55	13056-13060	same	
32-56	13061-13065	time	
32-57	13065-13066	,	
32-58	13067-13074	Advisor	
32-59	13075-13082	creates	
32-60	13083-13084	a	
32-61	13085-13099	recommendation	
32-62	13100-13105	about	
32-63	13106-13109	how	
32-64	13110-13112	to	
32-65	13113-13118	bring	
32-66	13119-13122	the	
32-67	13123-13131	observed	
32-68	13132-13137	value	
32-69	13138-13142	back	
32-70	13143-13147	into	
32-71	13148-13151	the	
32-72	13152-13165	best-practice	
32-73	13166-13171	range	
32-74	13171-13172	.	
32-75	13173-13180	Advisor	
32-76	13181-13185	only	
32-77	13186-13194	displays	
32-78	13195-13210	recommendations	
32-79	13211-13215	that	
32-80	13215-13216	 	
32-81	13216-13219	can	
32-82	13220-13224	have	
32-83	13225-13226	a	
32-84	13227-13238	significant	
32-85	13239-13245	impact	
32-86	13246-13248	on	
32-87	13249-13260	performance	
32-88	13261-13264	and	
32-89	13265-13275	operations	
32-90	13275-13276	.	
32-91	13277-13281	When	
32-92	13282-13289	Advisor	
32-93	13290-13300	determines	
32-94	13301-13305	that	
32-95	13306-13307	a	
32-96	13308-13322	recommendation	
32-97	13323-13326	has	
32-98	13327-13331	been	
32-99	13332-13341	addressed	
32-100	13341-13342	,	
32-101	13343-13345	it	
32-102	13346-13353	removes	
32-103	13354-13356	it	
32-104	13357-13361	from	
32-105	13362-13366	your	
32-106	13367-13381	recommendation	
32-107	13382-13386	list	
32-108	13386-13387	.	
32-109	13388-13390	In	
32-110	13391-13395	this	
32-111	13396-13403	section	
32-112	13403-13404	,	
32-113	13405-13407	we	
32-114	13408-13413	share	
32-115	13414-13418	some	
32-116	13419-13427	examples	
32-117	13428-13430	of	
32-118	13431-13438	Advisor	
32-119	13439-13454	recommendations	
32-120	13454-13455	:	
32-121	13456-13468	Distribution	
32-122	13469-13472	key	
32-123	13473-13487	recommendation	
32-124	13488-13495	Advisor	
32-125	13496-13504	analyzes	
32-126	13505-13509	your	
32-127	13510-13517	cluster	
32-128	13517-13518	’	
32-129	13518-13519	s	
32-130	13520-13528	workload	
32-131	13529-13531	to	
32-132	13532-13540	identify	
32-133	13541-13544	the	
32-134	13545-13549	most	
32-135	13550-13561	appropriate	
32-136	13562-13574	distribution	
32-137	13575-13578	key	
32-138	13579-13582	for	
32-139	13583-13586	the	
32-140	13587-13593	tables	
32-141	13594-13598	that	
32-142	13599-13602	can	
32-143	13603-13616	significantly	
32-144	13617-13624	benefit	
32-145	13625-13629	from	
32-146	13630-13631	a	
32-147	13632-13635	KEY	
32-148	13636-13648	distribution	
32-149	13649-13654	style	
32-150	13654-13655	.	
32-151	13655-13656	 	
32-152	13656-13663	Advisor	
32-153	13664-13672	provides	
32-154	13673-13678	ALTER	
32-155	13679-13684	TABLE	
32-156	13685-13695	statements	
32-157	13696-13700	that	
32-158	13701-13706	alter	
32-159	13707-13710	the	
32-160	13711-13720	DISTSTYLE	
32-161	13721-13724	and	
32-162	13725-13732	DISTKEY	
32-163	13733-13735	of	
32-164	13736-13737	a	
32-165	13738-13743	table	
32-166	13744-13749	based	
32-167	13750-13752	on	
32-168	13753-13756	its	
32-169	13757-13765	analysis	
32-170	13765-13766	.	
32-171	13767-13769	To	
32-172	13770-13777	realize	
32-173	13778-13779	a	
32-174	13780-13791	significant	
32-175	13792-13803	performance	
32-176	13804-13811	benefit	
32-177	13811-13812	,	
32-178	13813-13817	make	
32-179	13818-13822	sure	
32-180	13823-13825	to	
32-181	13826-13835	implement	
32-182	13836-13839	all	
32-183	13840-13843	SQL	
32-184	13844-13854	statements	
32-185	13855-13861	within	
32-186	13862-13863	a	
32-187	13864-13878	recommendation	
32-188	13879-13884	group	
32-189	13884-13885	.	

#Text=The following screenshot shows recommendations regarding distribution keys. If you don’t see a recommendation, that doesn’t necessarily mean that the current distribution styles are the most appropriate. Advisor doesn’t provide recommendations when there isn’t enough data or the expected benefit of redistribution is small. Sort key recommendation
33-1	13886-13889	The	
33-2	13890-13899	following	
33-3	13900-13910	screenshot	
33-4	13911-13916	shows	
33-5	13917-13932	recommendations	
33-6	13933-13942	regarding	
33-7	13943-13955	distribution	
33-8	13956-13960	keys	
33-9	13960-13961	.	
33-10	13962-13964	If	
33-11	13965-13968	you	
33-12	13969-13972	don	
33-13	13972-13973	’	
33-14	13973-13974	t	
33-15	13975-13978	see	
33-16	13979-13980	a	
33-17	13981-13995	recommendation	
33-18	13995-13996	,	
33-19	13997-14001	that	
33-20	14002-14007	doesn	
33-21	14007-14008	’	
33-22	14008-14009	t	
33-23	14010-14021	necessarily	
33-24	14022-14026	mean	
33-25	14027-14031	that	
33-26	14032-14035	the	
33-27	14036-14043	current	
33-28	14044-14056	distribution	
33-29	14057-14063	styles	
33-30	14064-14067	are	
33-31	14068-14071	the	
33-32	14072-14076	most	
33-33	14077-14088	appropriate	
33-34	14088-14089	.	
33-35	14090-14097	Advisor	
33-36	14098-14103	doesn	
33-37	14103-14104	’	
33-38	14104-14105	t	
33-39	14106-14113	provide	
33-40	14114-14129	recommendations	
33-41	14130-14134	when	
33-42	14135-14140	there	
33-43	14141-14144	isn	
33-44	14144-14145	’	
33-45	14145-14146	t	
33-46	14147-14153	enough	
33-47	14154-14158	data	
33-48	14159-14161	or	
33-49	14162-14165	the	
33-50	14166-14174	expected	
33-51	14175-14182	benefit	
33-52	14183-14185	of	
33-53	14186-14200	redistribution	
33-54	14201-14203	is	
33-55	14204-14209	small	
33-56	14209-14210	.	
33-57	14211-14215	Sort	
33-58	14216-14219	key	
33-59	14220-14234	recommendation	

#Text=Sorting a table on an appropriate sort key can accelerate query performance, especially queries with range-restricted predicates, by requiring fewer table blocks to be read from disk. Advisor analyzes your cluster’s workload over several days to identify a beneficial sort key for your tables. See the following screenshot. If you don’t see a recommendation for a table, that doesn’t necessarily mean that the current configuration is the best. Advisor doesn’t provide recommendations when there isn’t enough data or the expected benefit of sorting is small.
34-1	14235-14242	Sorting	
34-2	14243-14244	a	
34-3	14245-14250	table	
34-4	14251-14253	on	
34-5	14254-14256	an	
34-6	14257-14268	appropriate	
34-7	14269-14273	sort	
34-8	14274-14277	key	
34-9	14278-14281	can	
34-10	14282-14292	accelerate	
34-11	14293-14298	query	
34-12	14299-14310	performance	
34-13	14310-14311	,	
34-14	14312-14322	especially	
34-15	14323-14330	queries	
34-16	14331-14335	with	
34-17	14336-14352	range-restricted	
34-18	14353-14363	predicates	
34-19	14363-14364	,	
34-20	14365-14367	by	
34-21	14368-14377	requiring	
34-22	14378-14383	fewer	
34-23	14384-14389	table	
34-24	14390-14396	blocks	
34-25	14397-14399	to	
34-26	14400-14402	be	
34-27	14403-14407	read	
34-28	14408-14412	from	
34-29	14413-14417	disk	
34-30	14417-14418	.	
34-31	14419-14426	Advisor	
34-32	14427-14435	analyzes	
34-33	14436-14440	your	
34-34	14441-14448	cluster	
34-35	14448-14449	’	
34-36	14449-14450	s	
34-37	14451-14459	workload	
34-38	14460-14464	over	
34-39	14465-14472	several	
34-40	14473-14477	days	
34-41	14478-14480	to	
34-42	14481-14489	identify	
34-43	14490-14491	a	
34-44	14492-14502	beneficial	
34-45	14503-14507	sort	
34-46	14508-14511	key	
34-47	14512-14515	for	
34-48	14516-14520	your	
34-49	14521-14527	tables	
34-50	14527-14528	.	
34-51	14529-14532	See	
34-52	14533-14536	the	
34-53	14537-14546	following	
34-54	14547-14557	screenshot	
34-55	14557-14558	.	
34-56	14559-14561	If	
34-57	14562-14565	you	
34-58	14566-14569	don	
34-59	14569-14570	’	
34-60	14570-14571	t	
34-61	14572-14575	see	
34-62	14576-14577	a	
34-63	14578-14592	recommendation	
34-64	14593-14596	for	
34-65	14597-14598	a	
34-66	14599-14604	table	
34-67	14604-14605	,	
34-68	14606-14610	that	
34-69	14611-14616	doesn	
34-70	14616-14617	’	
34-71	14617-14618	t	
34-72	14619-14630	necessarily	
34-73	14631-14635	mean	
34-74	14636-14640	that	
34-75	14641-14644	the	
34-76	14645-14652	current	
34-77	14653-14666	configuration	
34-78	14667-14669	is	
34-79	14670-14673	the	
34-80	14674-14678	best	
34-81	14678-14679	.	
34-82	14680-14687	Advisor	
34-83	14688-14693	doesn	
34-84	14693-14694	’	
34-85	14694-14695	t	
34-86	14696-14703	provide	
34-87	14704-14719	recommendations	
34-88	14720-14724	when	
34-89	14725-14730	there	
34-90	14731-14734	isn	
34-91	14734-14735	’	
34-92	14735-14736	t	
34-93	14737-14743	enough	
34-94	14744-14748	data	
34-95	14749-14751	or	
34-96	14752-14755	the	
34-97	14756-14764	expected	
34-98	14765-14772	benefit	
34-99	14773-14775	of	
34-100	14776-14783	sorting	
34-101	14784-14786	is	
34-102	14787-14792	small	
34-103	14792-14793	.	

#Text=Table compression recommendation Amazon Redshift is optimized to reduce your storage footprint and improve query performance by using compression encodings. When you don’t use compression, data consumes additional space and requires additional disk I/O. Applying compression to large uncompressed columns can have a big impact on your cluster.
35-1	14794-14799	Table	
35-2	14800-14811	compression	
35-3	14812-14826	recommendation	
35-4	14827-14833	Amazon	
35-5	14834-14842	Redshift	
35-6	14843-14845	is	
35-7	14846-14855	optimized	
35-8	14856-14858	to	
35-9	14859-14865	reduce	
35-10	14866-14870	your	
35-11	14871-14878	storage	
35-12	14879-14888	footprint	
35-13	14889-14892	and	
35-14	14893-14900	improve	
35-15	14901-14906	query	
35-16	14907-14918	performance	
35-17	14919-14921	by	
35-18	14922-14927	using	
35-19	14928-14939	compression	
35-20	14940-14949	encodings	
35-21	14949-14950	.	
35-22	14951-14955	When	
35-23	14956-14959	you	
35-24	14960-14963	don	
35-25	14963-14964	’	
35-26	14964-14965	t	
35-27	14966-14969	use	
35-28	14970-14981	compression	
35-29	14981-14982	,	
35-30	14983-14987	data	
35-31	14988-14996	consumes	
35-32	14997-15007	additional	
35-33	15008-15013	space	
35-34	15014-15017	and	
35-35	15018-15026	requires	
35-36	15027-15037	additional	
35-37	15038-15042	disk	
35-38	15043-15044	I	
35-39	15044-15045	/	
35-40	15045-15046	O	
35-41	15046-15047	.	
35-42	15048-15056	Applying	
35-43	15057-15068	compression	
35-44	15069-15071	to	
35-45	15072-15077	large	
35-46	15078-15090	uncompressed	
35-47	15091-15098	columns	
35-48	15099-15102	can	
35-49	15103-15107	have	
35-50	15108-15109	a	
35-51	15110-15113	big	
35-52	15114-15120	impact	
35-53	15121-15123	on	
35-54	15124-15128	your	
35-55	15129-15136	cluster	
35-56	15136-15137	.	

#Text=The compression analysis in Advisor tracks uncompressed storage allocated to permanent user tables. It reviews storage metadata associated with large uncompressed columns that aren’t sort key columns. The following screenshot shows an example of table compression recommendation. Table statistics recommendation
36-1	15138-15141	The	
36-2	15142-15153	compression	
36-3	15154-15162	analysis	
36-4	15163-15165	in	
36-5	15166-15173	Advisor	
36-6	15174-15180	tracks	
36-7	15181-15193	uncompressed	
36-8	15194-15201	storage	
36-9	15202-15211	allocated	
36-10	15212-15214	to	
36-11	15215-15224	permanent	
36-12	15225-15229	user	
36-13	15230-15236	tables	
36-14	15236-15237	.	
36-15	15238-15240	It	
36-16	15241-15248	reviews	
36-17	15249-15256	storage	
36-18	15257-15265	metadata	
36-19	15266-15276	associated	
36-20	15277-15281	with	
36-21	15282-15287	large	
36-22	15288-15300	uncompressed	
36-23	15301-15308	columns	
36-24	15309-15313	that	
36-25	15314-15318	aren	
36-26	15318-15319	’	
36-27	15319-15320	t	
36-28	15321-15325	sort	
36-29	15326-15329	key	
36-30	15330-15337	columns	
36-31	15337-15338	.	
36-32	15339-15342	The	
36-33	15343-15352	following	
36-34	15353-15363	screenshot	
36-35	15364-15369	shows	
36-36	15370-15372	an	
36-37	15373-15380	example	
36-38	15381-15383	of	
36-39	15384-15389	table	
36-40	15390-15401	compression	
36-41	15402-15416	recommendation	
36-42	15416-15417	.	
36-43	15418-15423	Table	
36-44	15424-15434	statistics	
36-45	15435-15449	recommendation	

#Text=Maintaining current statistics helps complex queries run in the shortest possible time. The Advisor analysis tracks tables whose statistics are out-of-date or missing. It reviews table access metadata associated with complex queries. If tables that are frequently accessed with complex patterns are missing statistics, Amazon Redshift Advisor creates a critical recommendation to run ANALYZE. If tables that are frequently accessed with complex patterns have out-of-date statistics, Advisor creates a suggested recommendation to run ANALYZE. The following screenshot shows a table statistics recommendation. Tip #4: Using Auto WLM with priorities to increase throughput Auto WLM simplifies workload management and maximizes query throughput by using ML to dynamically manage memory and concurrency, which ensures optimal utilization of the cluster resources
37-1	15450-15461	Maintaining	
37-2	15462-15469	current	
37-3	15470-15480	statistics	
37-4	15481-15486	helps	
37-5	15487-15494	complex	
37-6	15495-15502	queries	
37-7	15503-15506	run	
37-8	15507-15509	in	
37-9	15510-15513	the	
37-10	15514-15522	shortest	
37-11	15523-15531	possible	
37-12	15532-15536	time	
37-13	15536-15537	.	
37-14	15538-15541	The	
37-15	15542-15549	Advisor	
37-16	15550-15558	analysis	
37-17	15559-15565	tracks	
37-18	15566-15572	tables	
37-19	15573-15578	whose	
37-20	15579-15589	statistics	
37-21	15590-15593	are	
37-22	15594-15605	out-of-date	
37-23	15606-15608	or	
37-24	15609-15616	missing	
37-25	15616-15617	.	
37-26	15618-15620	It	
37-27	15621-15628	reviews	
37-28	15629-15634	table	
37-29	15635-15641	access	
37-30	15642-15650	metadata	
37-31	15651-15661	associated	
37-32	15662-15666	with	
37-33	15667-15674	complex	
37-34	15675-15682	queries	
37-35	15682-15683	.	
37-36	15684-15686	If	
37-37	15687-15693	tables	
37-38	15694-15698	that	
37-39	15699-15702	are	
37-40	15703-15713	frequently	
37-41	15714-15722	accessed	
37-42	15723-15727	with	
37-43	15728-15735	complex	
37-44	15736-15744	patterns	
37-45	15745-15748	are	
37-46	15749-15756	missing	
37-47	15757-15767	statistics	
37-48	15767-15768	,	
37-49	15769-15775	Amazon	
37-50	15776-15784	Redshift	
37-51	15785-15792	Advisor	
37-52	15793-15800	creates	
37-53	15801-15802	a	
37-54	15803-15811	critical	
37-55	15812-15826	recommendation	
37-56	15827-15829	to	
37-57	15830-15833	run	
37-58	15834-15841	ANALYZE	
37-59	15841-15842	.	
37-60	15843-15845	If	
37-61	15846-15852	tables	
37-62	15853-15857	that	
37-63	15858-15861	are	
37-64	15862-15872	frequently	
37-65	15873-15881	accessed	
37-66	15882-15886	with	
37-67	15887-15894	complex	
37-68	15895-15903	patterns	
37-69	15904-15908	have	
37-70	15909-15920	out-of-date	
37-71	15921-15931	statistics	
37-72	15931-15932	,	
37-73	15933-15940	Advisor	
37-74	15941-15948	creates	
37-75	15949-15950	a	
37-76	15951-15960	suggested	
37-77	15961-15975	recommendation	
37-78	15976-15978	to	
37-79	15979-15982	run	
37-80	15983-15990	ANALYZE	
37-81	15990-15991	.	
37-82	15992-15995	The	
37-83	15996-16005	following	
37-84	16006-16016	screenshot	
37-85	16017-16022	shows	
37-86	16023-16024	a	
37-87	16025-16030	table	
37-88	16031-16041	statistics	
37-89	16042-16056	recommendation	
37-90	16056-16057	.	
37-91	16058-16061	Tip	
37-92	16062-16064	#4	
37-93	16064-16065	:	
37-94	16066-16071	Using	
37-95	16072-16076	Auto	
37-96	16077-16080	WLM	
37-97	16081-16085	with	
37-98	16086-16096	priorities	
37-99	16097-16099	to	
37-100	16100-16108	increase	
37-101	16109-16119	throughput	
37-102	16120-16124	Auto	
37-103	16125-16128	WLM	
37-104	16129-16139	simplifies	
37-105	16140-16148	workload	
37-106	16149-16159	management	
37-107	16160-16163	and	
37-108	16164-16173	maximizes	
37-109	16174-16179	query	
37-110	16180-16190	throughput	
37-111	16191-16193	by	
37-112	16194-16199	using	
37-113	16200-16202	ML	
37-114	16203-16205	to	
37-115	16206-16217	dynamically	
37-116	16218-16224	manage	
37-117	16225-16231	memory	
37-118	16232-16235	and	
37-119	16236-16247	concurrency	
37-120	16247-16248	,	
37-121	16249-16254	which	
37-122	16255-16262	ensures	
37-123	16263-16270	optimal	
37-124	16271-16282	utilization	
37-125	16283-16285	of	
37-126	16286-16289	the	
37-127	16290-16297	cluster	
37-128	16298-16307	resources	

#Text=Amazon Redshift runs queries using the queuing system (WLM). You can define up to eight queues to separate workloads from each other. Amazon Redshift Advisor automatically analyzes the current WLM usage and can make recommendations to get more throughput from your cluster. Periodically reviewing the suggestions from Advisor helps you get the best performance.
38-1	16308-16314	Amazon	
38-2	16315-16323	Redshift	
38-3	16324-16328	runs	
38-4	16329-16336	queries	
38-5	16337-16342	using	
38-6	16343-16346	the	
38-7	16347-16354	queuing	
38-8	16355-16361	system	
38-9	16362-16363	(	
38-10	16363-16366	WLM	
38-11	16366-16367	)	
38-12	16367-16368	.	
38-13	16369-16372	You	
38-14	16373-16376	can	
38-15	16377-16383	define	
38-16	16384-16386	up	
38-17	16387-16389	to	
38-18	16390-16395	eight	
38-19	16396-16402	queues	
38-20	16403-16405	to	
38-21	16406-16414	separate	
38-22	16415-16424	workloads	
38-23	16425-16429	from	
38-24	16430-16434	each	
38-25	16435-16440	other	
38-26	16440-16441	.	
38-27	16442-16448	Amazon	
38-28	16449-16457	Redshift	
38-29	16458-16465	Advisor	
38-30	16466-16479	automatically	
38-31	16480-16488	analyzes	
38-32	16489-16492	the	
38-33	16493-16500	current	
38-34	16501-16504	WLM	
38-35	16505-16510	usage	
38-36	16511-16514	and	
38-37	16515-16518	can	
38-38	16519-16523	make	
38-39	16524-16539	recommendations	
38-40	16540-16542	to	
38-41	16543-16546	get	
38-42	16547-16551	more	
38-43	16552-16562	throughput	
38-44	16563-16567	from	
38-45	16568-16572	your	
38-46	16573-16580	cluster	
38-47	16580-16581	.	
38-48	16582-16594	Periodically	
38-49	16595-16604	reviewing	
38-50	16605-16608	the	
38-51	16609-16620	suggestions	
38-52	16621-16625	from	
38-53	16626-16633	Advisor	
38-54	16634-16639	helps	
38-55	16640-16643	you	
38-56	16644-16647	get	
38-57	16648-16651	the	
38-58	16652-16656	best	
38-59	16657-16668	performance	
38-60	16668-16669	.	

#Text=Query priorities is a feature of Auto WLM that lets you assign priority ranks to different user groups or query groups, to ensure that higher priority workloads get more resources for consistent query performance, even during busy times. It is a good practice to set up query monitoring rules (QMR) to monitor and manage resource intensive or runaway queries. QMR also enables you to dynamically change a query’s priority based on its runtime performance and metrics-based rules you define. For more information on migrating from manual to automatic WLM with query priorities, see Modifying the WLM configuration.
39-1	16670-16675	Query	
39-2	16676-16686	priorities	
39-3	16687-16689	is	
39-4	16690-16691	a	
39-5	16692-16699	feature	
39-6	16700-16702	of	
39-7	16703-16707	Auto	
39-8	16708-16711	WLM	
39-9	16712-16716	that	
39-10	16717-16721	lets	
39-11	16722-16725	you	
39-12	16726-16732	assign	
39-13	16733-16741	priority	
39-14	16742-16747	ranks	
39-15	16748-16750	to	
39-16	16751-16760	different	
39-17	16761-16765	user	
39-18	16766-16772	groups	
39-19	16773-16775	or	
39-20	16776-16781	query	
39-21	16782-16788	groups	
39-22	16788-16789	,	
39-23	16790-16792	to	
39-24	16793-16799	ensure	
39-25	16800-16804	that	
39-26	16805-16811	higher	
39-27	16812-16820	priority	
39-28	16821-16830	workloads	
39-29	16831-16834	get	
39-30	16835-16839	more	
39-31	16840-16849	resources	
39-32	16850-16853	for	
39-33	16854-16864	consistent	
39-34	16865-16870	query	
39-35	16871-16882	performance	
39-36	16882-16883	,	
39-37	16884-16888	even	
39-38	16889-16895	during	
39-39	16896-16900	busy	
39-40	16901-16906	times	
39-41	16906-16907	.	
39-42	16908-16910	It	
39-43	16911-16913	is	
39-44	16914-16915	a	
39-45	16916-16920	good	
39-46	16921-16929	practice	
39-47	16930-16932	to	
39-48	16933-16936	set	
39-49	16937-16939	up	
39-50	16939-16940	 	
39-51	16940-16945	query	
39-52	16946-16956	monitoring	
39-53	16957-16962	rules	
39-54	16963-16964	(	
39-55	16964-16967	QMR	
39-56	16967-16968	)	
39-57	16969-16971	to	
39-58	16972-16979	monitor	
39-59	16980-16983	and	
39-60	16984-16990	manage	
39-61	16991-16999	resource	
39-62	17000-17009	intensive	
39-63	17010-17012	or	
39-64	17013-17020	runaway	
39-65	17021-17028	queries	
39-66	17028-17029	.	
39-67	17030-17033	QMR	
39-68	17034-17038	also	
39-69	17039-17046	enables	
39-70	17047-17050	you	
39-71	17051-17053	to	
39-72	17054-17065	dynamically	
39-73	17066-17072	change	
39-74	17073-17074	a	
39-75	17075-17080	query	
39-76	17080-17081	’	
39-77	17081-17082	s	
39-78	17083-17091	priority	
39-79	17092-17097	based	
39-80	17098-17100	on	
39-81	17101-17104	its	
39-82	17105-17112	runtime	
39-83	17113-17124	performance	
39-84	17125-17128	and	
39-85	17129-17142	metrics-based	
39-86	17143-17148	rules	
39-87	17149-17152	you	
39-88	17153-17159	define	
39-89	17159-17160	.	
39-90	17161-17164	For	
39-91	17165-17169	more	
39-92	17170-17181	information	
39-93	17182-17184	on	
39-94	17185-17194	migrating	
39-95	17195-17199	from	
39-96	17200-17206	manual	
39-97	17207-17209	to	
39-98	17210-17219	automatic	
39-99	17220-17223	WLM	
39-100	17224-17228	with	
39-101	17229-17234	query	
39-102	17235-17245	priorities	
39-103	17245-17246	,	
39-104	17247-17250	see	
39-105	17251-17260	Modifying	
39-106	17261-17264	the	
39-107	17265-17268	WLM	
39-108	17269-17282	configuration	
39-109	17282-17283	.	

#Text=It’s recommended to take advantage of Amazon Redshift’s short query acceleration (SQA). SQA uses ML to run short-running jobs in their own queue. This keeps small jobs processing, rather than waiting behind longer-running SQL statements. SQA is enabled by default in the default parameter group and for all new parameter groups. You can enable and disable SQA via a check box on the Amazon Redshift console, or by using the Amazon Redshift CLI. If you enable concurrency scaling, Amazon Redshift can automatically and quickly provision additional clusters should your workload begin to back up. This is an important consideration when deciding the cluster’s WLM configuration.
40-1	17284-17286	It	
40-2	17286-17287	’	
40-3	17287-17288	s	
40-4	17289-17300	recommended	
40-5	17301-17303	to	
40-6	17304-17308	take	
40-7	17309-17318	advantage	
40-8	17319-17321	of	
40-9	17322-17328	Amazon	
40-10	17329-17337	Redshift	
40-11	17337-17338	’	
40-12	17338-17339	s	
40-13	17340-17345	short	
40-14	17346-17351	query	
40-15	17352-17364	acceleration	
40-16	17365-17366	(	
40-17	17366-17369	SQA	
40-18	17369-17370	)	
40-19	17370-17371	.	
40-20	17372-17375	SQA	
40-21	17376-17380	uses	
40-22	17381-17383	ML	
40-23	17384-17386	to	
40-24	17387-17390	run	
40-25	17391-17404	short-running	
40-26	17405-17409	jobs	
40-27	17410-17412	in	
40-28	17413-17418	their	
40-29	17419-17422	own	
40-30	17423-17428	queue	
40-31	17428-17429	.	
40-32	17430-17434	This	
40-33	17435-17440	keeps	
40-34	17441-17446	small	
40-35	17447-17451	jobs	
40-36	17452-17462	processing	
40-37	17462-17463	,	
40-38	17464-17470	rather	
40-39	17471-17475	than	
40-40	17476-17483	waiting	
40-41	17484-17490	behind	
40-42	17491-17505	longer-running	
40-43	17506-17509	SQL	
40-44	17510-17520	statements	
40-45	17520-17521	.	
40-46	17522-17525	SQA	
40-47	17526-17528	is	
40-48	17529-17536	enabled	
40-49	17537-17539	by	
40-50	17540-17547	default	
40-51	17548-17550	in	
40-52	17551-17554	the	
40-53	17555-17562	default	
40-54	17563-17572	parameter	
40-55	17573-17578	group	
40-56	17579-17582	and	
40-57	17583-17586	for	
40-58	17587-17590	all	
40-59	17591-17594	new	
40-60	17595-17604	parameter	
40-61	17605-17611	groups	
40-62	17611-17612	.	
40-63	17612-17613	 	
40-64	17613-17616	You	
40-65	17617-17620	can	
40-66	17621-17627	enable	
40-67	17628-17631	and	
40-68	17632-17639	disable	
40-69	17640-17643	SQA	
40-70	17644-17647	via	
40-71	17648-17649	a	
40-72	17650-17655	check	
40-73	17656-17659	box	
40-74	17660-17662	on	
40-75	17663-17666	the	
40-76	17667-17673	Amazon	
40-77	17674-17682	Redshift	
40-78	17683-17690	console	
40-79	17690-17691	,	
40-80	17692-17694	or	
40-81	17695-17697	by	
40-82	17698-17703	using	
40-83	17704-17707	the	
40-84	17708-17714	Amazon	
40-85	17715-17723	Redshift	
40-86	17724-17727	CLI	
40-87	17727-17728	.	
40-88	17729-17731	If	
40-89	17732-17735	you	
40-90	17736-17742	enable	
40-91	17743-17754	concurrency	
40-92	17755-17762	scaling	
40-93	17762-17763	,	
40-94	17764-17770	Amazon	
40-95	17771-17779	Redshift	
40-96	17780-17783	can	
40-97	17784-17797	automatically	
40-98	17798-17801	and	
40-99	17802-17809	quickly	
40-100	17810-17819	provision	
40-101	17820-17830	additional	
40-102	17831-17839	clusters	
40-103	17840-17846	should	
40-104	17847-17851	your	
40-105	17852-17860	workload	
40-106	17861-17866	begin	
40-107	17867-17869	to	
40-108	17870-17874	back	
40-109	17875-17877	up	
40-110	17877-17878	.	
40-111	17879-17883	This	
40-112	17884-17886	is	
40-113	17887-17889	an	
40-114	17890-17899	important	
40-115	17900-17913	consideration	
40-116	17914-17918	when	
40-117	17919-17927	deciding	
40-118	17928-17931	the	
40-119	17932-17939	cluster	
40-120	17939-17940	’	
40-121	17940-17941	s	
40-122	17942-17945	WLM	
40-123	17946-17959	configuration	
40-124	17959-17960	.	

#Text=A common pattern is to optimize the WLM configuration to run most SQL statements without the assistance of supplemental memory, reserving additional processing power for short jobs. Some queueing is acceptable because additional clusters spin up if your needs suddenly expand. To enable concurrency scaling on a WLM queue, set the concurrency scaling mode value to AUTO. You can best inform your decisions by reviewing the concurrency scaling billing model. You can also monitor and control the concurrency scaling usage and cost by using the Amazon Redshift usage limit feature. In some cases, unless you enable concurrency scaling for the queue, the user or query’s assigned queue may be busy, and you must wait for a queue slot to open. During this time, the system isn’t running the query at all. If this becomes a frequent problem, you may have to increase concurrency.
41-1	17961-17962	A	
41-2	17963-17969	common	
41-3	17970-17977	pattern	
41-4	17978-17980	is	
41-5	17981-17983	to	
41-6	17984-17992	optimize	
41-7	17993-17996	the	
41-8	17997-18000	WLM	
41-9	18001-18014	configuration	
41-10	18015-18017	to	
41-11	18018-18021	run	
41-12	18022-18026	most	
41-13	18027-18030	SQL	
41-14	18031-18041	statements	
41-15	18042-18049	without	
41-16	18050-18053	the	
41-17	18054-18064	assistance	
41-18	18065-18067	of	
41-19	18068-18080	supplemental	
41-20	18081-18087	memory	
41-21	18087-18088	,	
41-22	18089-18098	reserving	
41-23	18099-18109	additional	
41-24	18110-18120	processing	
41-25	18121-18126	power	
41-26	18127-18130	for	
41-27	18131-18136	short	
41-28	18137-18141	jobs	
41-29	18141-18142	.	
41-30	18143-18147	Some	
41-31	18148-18156	queueing	
41-32	18157-18159	is	
41-33	18160-18170	acceptable	
41-34	18171-18178	because	
41-35	18179-18189	additional	
41-36	18190-18198	clusters	
41-37	18199-18203	spin	
41-38	18204-18206	up	
41-39	18207-18209	if	
41-40	18210-18214	your	
41-41	18215-18220	needs	
41-42	18221-18229	suddenly	
41-43	18230-18236	expand	
41-44	18236-18237	.	
41-45	18238-18240	To	
41-46	18241-18247	enable	
41-47	18248-18259	concurrency	
41-48	18260-18267	scaling	
41-49	18268-18270	on	
41-50	18271-18272	a	
41-51	18273-18276	WLM	
41-52	18277-18282	queue	
41-53	18282-18283	,	
41-54	18284-18287	set	
41-55	18288-18291	the	
41-56	18292-18303	concurrency	
41-57	18304-18311	scaling	
41-58	18312-18316	mode	
41-59	18317-18322	value	
41-60	18323-18325	to	
41-61	18326-18330	AUTO	
41-62	18330-18331	.	
41-63	18332-18335	You	
41-64	18336-18339	can	
41-65	18340-18344	best	
41-66	18345-18351	inform	
41-67	18352-18356	your	
41-68	18357-18366	decisions	
41-69	18367-18369	by	
41-70	18370-18379	reviewing	
41-71	18380-18383	the	
41-72	18384-18395	concurrency	
41-73	18396-18403	scaling	
41-74	18404-18411	billing	
41-75	18412-18417	model	
41-76	18417-18418	.	
41-77	18418-18419	 	
41-78	18419-18422	You	
41-79	18423-18426	can	
41-80	18427-18431	also	
41-81	18432-18439	monitor	
41-82	18440-18443	and	
41-83	18444-18451	control	
41-84	18452-18455	the	
41-85	18456-18467	concurrency	
41-86	18468-18475	scaling	
41-87	18476-18481	usage	
41-88	18482-18485	and	
41-89	18486-18490	cost	
41-90	18491-18493	by	
41-91	18494-18499	using	
41-92	18500-18503	the	
41-93	18504-18510	Amazon	
41-94	18511-18519	Redshift	
41-95	18520-18525	usage	
41-96	18526-18531	limit	
41-97	18532-18539	feature	
41-98	18539-18540	.	
41-99	18541-18543	In	
41-100	18544-18548	some	
41-101	18549-18554	cases	
41-102	18554-18555	,	
41-103	18556-18562	unless	
41-104	18563-18566	you	
41-105	18567-18573	enable	
41-106	18574-18585	concurrency	
41-107	18586-18593	scaling	
41-108	18594-18597	for	
41-109	18598-18601	the	
41-110	18602-18607	queue	
41-111	18607-18608	,	
41-112	18609-18612	the	
41-113	18613-18617	user	
41-114	18618-18620	or	
41-115	18621-18626	query	
41-116	18626-18627	’	
41-117	18627-18628	s	
41-118	18629-18637	assigned	
41-119	18638-18643	queue	
41-120	18644-18647	may	
41-121	18648-18650	be	
41-122	18651-18655	busy	
41-123	18655-18656	,	
41-124	18657-18660	and	
41-125	18661-18664	you	
41-126	18665-18669	must	
41-127	18670-18674	wait	
41-128	18675-18678	for	
41-129	18679-18680	a	
41-130	18681-18686	queue	
41-131	18687-18691	slot	
41-132	18692-18694	to	
41-133	18695-18699	open	
41-134	18699-18700	.	
41-135	18701-18707	During	
41-136	18708-18712	this	
41-137	18713-18717	time	
41-138	18717-18718	,	
41-139	18719-18722	the	
41-140	18723-18729	system	
41-141	18730-18733	isn	
41-142	18733-18734	’	
41-143	18734-18735	t	
41-144	18736-18743	running	
41-145	18744-18747	the	
41-146	18748-18753	query	
41-147	18754-18756	at	
41-148	18757-18760	all	
41-149	18760-18761	.	
41-150	18762-18764	If	
41-151	18765-18769	this	
41-152	18770-18777	becomes	
41-153	18778-18779	a	
41-154	18780-18788	frequent	
41-155	18789-18796	problem	
41-156	18796-18797	,	
41-157	18798-18801	you	
41-158	18802-18805	may	
41-159	18806-18810	have	
41-160	18811-18813	to	
41-161	18814-18822	increase	
41-162	18823-18834	concurrency	
41-163	18834-18835	.	

#Text=First, determine if any queries are queuing, using the queuing_queries.sql admin script. Review the maximum concurrency that your cluster needed in the past with wlm_apex.sql, or get an hour-by-hour historical analysis with wlm_apex_hourly.sql. Keep in mind that increasing concurrency allows more queries to run, but each query gets a smaller share of the memory. You may find that by increasing concurrency, some queries must use temporary disk storage to complete, which is also sub-optimal. Tip #5: Taking advantage of Amazon Redshift data lake integration Amazon Redshift is tightly integrated with other AWS-native services such as Amazon S3 which let’s the Amazon Redshift cluster interact with the data lake in several useful ways.
42-1	18836-18841	First	
42-2	18841-18842	,	
42-3	18843-18852	determine	
42-4	18853-18855	if	
42-5	18856-18859	any	
42-6	18860-18867	queries	
42-7	18868-18871	are	
42-8	18872-18879	queuing	
42-9	18879-18880	,	
42-10	18881-18886	using	
42-11	18887-18890	the	
42-12	18891-18910	queuing_queries.sql	
42-13	18911-18916	admin	
42-14	18917-18923	script	
42-15	18923-18924	.	
42-16	18925-18931	Review	
42-17	18932-18935	the	
42-18	18936-18943	maximum	
42-19	18944-18955	concurrency	
42-20	18956-18960	that	
42-21	18961-18965	your	
42-22	18966-18973	cluster	
42-23	18974-18980	needed	
42-24	18981-18983	in	
42-25	18984-18987	the	
42-26	18988-18992	past	
42-27	18993-18997	with	
42-28	18998-19010	wlm_apex.sql	
42-29	19010-19011	,	
42-30	19012-19014	or	
42-31	19015-19018	get	
42-32	19019-19021	an	
42-33	19022-19034	hour-by-hour	
42-34	19035-19045	historical	
42-35	19046-19054	analysis	
42-36	19055-19059	with	
42-37	19060-19079	wlm_apex_hourly.sql	
42-38	19079-19080	.	
42-39	19081-19085	Keep	
42-40	19086-19088	in	
42-41	19089-19093	mind	
42-42	19094-19098	that	
42-43	19099-19109	increasing	
42-44	19110-19121	concurrency	
42-45	19122-19128	allows	
42-46	19129-19133	more	
42-47	19134-19141	queries	
42-48	19142-19144	to	
42-49	19145-19148	run	
42-50	19148-19149	,	
42-51	19150-19153	but	
42-52	19154-19158	each	
42-53	19159-19164	query	
42-54	19165-19169	gets	
42-55	19170-19171	a	
42-56	19172-19179	smaller	
42-57	19180-19185	share	
42-58	19186-19188	of	
42-59	19189-19192	the	
42-60	19193-19199	memory	
42-61	19199-19200	.	
42-62	19201-19204	You	
42-63	19205-19208	may	
42-64	19209-19213	find	
42-65	19214-19218	that	
42-66	19219-19221	by	
42-67	19222-19232	increasing	
42-68	19233-19244	concurrency	
42-69	19244-19245	,	
42-70	19246-19250	some	
42-71	19251-19258	queries	
42-72	19259-19263	must	
42-73	19264-19267	use	
42-74	19268-19277	temporary	
42-75	19278-19282	disk	
42-76	19283-19290	storage	
42-77	19291-19293	to	
42-78	19294-19302	complete	
42-79	19302-19303	,	
42-80	19304-19309	which	
42-81	19310-19312	is	
42-82	19313-19317	also	
42-83	19318-19329	sub-optimal	
42-84	19329-19330	.	
42-85	19331-19334	Tip	
42-86	19335-19337	#5	
42-87	19337-19338	:	
42-88	19339-19345	Taking	
42-89	19346-19355	advantage	
42-90	19356-19358	of	
42-91	19359-19365	Amazon	
42-92	19366-19374	Redshift	
42-93	19375-19379	data	
42-94	19380-19384	lake	
42-95	19385-19396	integration	
42-96	19397-19403	Amazon	
42-97	19404-19412	Redshift	
42-98	19413-19415	is	
42-99	19416-19423	tightly	
42-100	19424-19434	integrated	
42-101	19435-19439	with	
42-102	19440-19445	other	
42-103	19446-19456	AWS-native	
42-104	19457-19465	services	
42-105	19466-19470	such	
42-106	19471-19473	as	
42-107	19474-19480	Amazon	
42-108	19481-19483	S3	
42-109	19484-19489	which	
42-110	19490-19493	let	
42-111	19493-19494	’	
42-112	19494-19495	s	
42-113	19496-19499	the	
42-114	19500-19506	Amazon	
42-115	19507-19515	Redshift	
42-116	19516-19523	cluster	
42-117	19524-19532	interact	
42-118	19533-19537	with	
42-119	19538-19541	the	
42-120	19542-19546	data	
42-121	19547-19551	lake	
42-122	19552-19554	in	
42-123	19555-19562	several	
42-124	19563-19569	useful	
42-125	19570-19574	ways	
42-126	19574-19575	.	

#Text=Amazon Redshift Spectrum lets you query data directly from files on Amazon S3 through an independent, elastically sized compute layer. Use these patterns independently or apply them together to offload work to the Amazon Redshift Spectrum compute layer, quickly create a transformed or aggregated dataset, or eliminate entire steps in a traditional ETL process. Use the Amazon Redshift Spectrum compute layer to offload workloads from the main cluster, and apply more processing power to the specific SQL statement. Amazon Redshift Spectrum automatically assigns compute power up to approximately 10 times the processing power of the main cluster. This may be an effective way to quickly process large transform or aggregate jobs.
43-1	19576-19582	Amazon	
43-2	19583-19591	Redshift	
43-3	19592-19600	Spectrum	
43-4	19601-19605	lets	
43-5	19606-19609	you	
43-6	19610-19615	query	
43-7	19616-19620	data	
43-8	19621-19629	directly	
43-9	19630-19634	from	
43-10	19635-19640	files	
43-11	19641-19643	on	
43-12	19644-19650	Amazon	
43-13	19651-19653	S3	
43-14	19654-19661	through	
43-15	19662-19664	an	
43-16	19665-19676	independent	
43-17	19676-19677	,	
43-18	19678-19689	elastically	
43-19	19690-19695	sized	
43-20	19696-19703	compute	
43-21	19704-19709	layer	
43-22	19709-19710	.	
43-23	19711-19714	Use	
43-24	19715-19720	these	
43-25	19721-19729	patterns	
43-26	19730-19743	independently	
43-27	19744-19746	or	
43-28	19747-19752	apply	
43-29	19753-19757	them	
43-30	19758-19766	together	
43-31	19767-19769	to	
43-32	19770-19777	offload	
43-33	19778-19782	work	
43-34	19783-19785	to	
43-35	19786-19789	the	
43-36	19790-19796	Amazon	
43-37	19797-19805	Redshift	
43-38	19806-19814	Spectrum	
43-39	19815-19822	compute	
43-40	19823-19828	layer	
43-41	19828-19829	,	
43-42	19830-19837	quickly	
43-43	19838-19844	create	
43-44	19845-19846	a	
43-45	19847-19858	transformed	
43-46	19859-19861	or	
43-47	19862-19872	aggregated	
43-48	19873-19880	dataset	
43-49	19880-19881	,	
43-50	19882-19884	or	
43-51	19885-19894	eliminate	
43-52	19895-19901	entire	
43-53	19902-19907	steps	
43-54	19908-19910	in	
43-55	19911-19912	a	
43-56	19913-19924	traditional	
43-57	19925-19928	ETL	
43-58	19929-19936	process	
43-59	19936-19937	.	
43-60	19938-19941	Use	
43-61	19942-19945	the	
43-62	19946-19952	Amazon	
43-63	19953-19961	Redshift	
43-64	19962-19970	Spectrum	
43-65	19971-19978	compute	
43-66	19979-19984	layer	
43-67	19985-19987	to	
43-68	19988-19995	offload	
43-69	19996-20005	workloads	
43-70	20006-20010	from	
43-71	20011-20014	the	
43-72	20015-20019	main	
43-73	20020-20027	cluster	
43-74	20027-20028	,	
43-75	20029-20032	and	
43-76	20033-20038	apply	
43-77	20039-20043	more	
43-78	20044-20054	processing	
43-79	20055-20060	power	
43-80	20061-20063	to	
43-81	20064-20067	the	
43-82	20068-20076	specific	
43-83	20077-20080	SQL	
43-84	20081-20090	statement	
43-85	20090-20091	.	
43-86	20092-20098	Amazon	
43-87	20099-20107	Redshift	
43-88	20108-20116	Spectrum	
43-89	20117-20130	automatically	
43-90	20131-20138	assigns	
43-91	20139-20146	compute	
43-92	20147-20152	power	
43-93	20153-20155	up	
43-94	20156-20158	to	
43-95	20159-20172	approximately	
43-96	20173-20175	10	
43-97	20176-20181	times	
43-98	20182-20185	the	
43-99	20186-20196	processing	
43-100	20197-20202	power	
43-101	20203-20205	of	
43-102	20206-20209	the	
43-103	20210-20214	main	
43-104	20215-20222	cluster	
43-105	20222-20223	.	
43-106	20224-20228	This	
43-107	20229-20232	may	
43-108	20233-20235	be	
43-109	20236-20238	an	
43-110	20239-20248	effective	
43-111	20249-20252	way	
43-112	20253-20255	to	
43-113	20256-20263	quickly	
43-114	20264-20271	process	
43-115	20272-20277	large	
43-116	20278-20287	transform	
43-117	20288-20290	or	
43-118	20291-20300	aggregate	
43-119	20301-20305	jobs	
43-120	20305-20306	.	

#Text=Skip the load in an ELT process and run the transform directly against data on Amazon S3. You can run transform logic against partitioned, columnar data on Amazon S3 with an INSERT … SELECT statement. It’s easier than going through the extra work of loading a staging dataset, joining it to other tables, and running a transform against it. Use Amazon Redshift Spectrum to run queries as the data lands in Amazon S3, rather than adding a step to load the data onto the main cluster. This allows for real-time analytics.
44-1	20307-20311	Skip	
44-2	20312-20315	the	
44-3	20316-20320	load	
44-4	20321-20323	in	
44-5	20324-20326	an	
44-6	20327-20330	ELT	
44-7	20331-20338	process	
44-8	20339-20342	and	
44-9	20343-20346	run	
44-10	20347-20350	the	
44-11	20351-20360	transform	
44-12	20361-20369	directly	
44-13	20370-20377	against	
44-14	20378-20382	data	
44-15	20383-20385	on	
44-16	20386-20392	Amazon	
44-17	20393-20395	S3	
44-18	20395-20396	.	
44-19	20397-20400	You	
44-20	20401-20404	can	
44-21	20405-20408	run	
44-22	20409-20418	transform	
44-23	20419-20424	logic	
44-24	20425-20432	against	
44-25	20433-20444	partitioned	
44-26	20444-20445	,	
44-27	20446-20454	columnar	
44-28	20455-20459	data	
44-29	20460-20462	on	
44-30	20463-20469	Amazon	
44-31	20470-20472	S3	
44-32	20473-20477	with	
44-33	20478-20480	an	
44-34	20481-20487	INSERT	
44-35	20488-20489	…	
44-36	20490-20496	SELECT	
44-37	20497-20506	statement	
44-38	20506-20507	.	
44-39	20508-20510	It	
44-40	20510-20511	’	
44-41	20511-20512	s	
44-42	20513-20519	easier	
44-43	20520-20524	than	
44-44	20525-20530	going	
44-45	20531-20538	through	
44-46	20539-20542	the	
44-47	20543-20548	extra	
44-48	20549-20553	work	
44-49	20554-20556	of	
44-50	20557-20564	loading	
44-51	20565-20566	a	
44-52	20567-20574	staging	
44-53	20575-20582	dataset	
44-54	20582-20583	,	
44-55	20584-20591	joining	
44-56	20592-20594	it	
44-57	20595-20597	to	
44-58	20598-20603	other	
44-59	20604-20610	tables	
44-60	20610-20611	,	
44-61	20612-20615	and	
44-62	20616-20623	running	
44-63	20624-20625	a	
44-64	20626-20635	transform	
44-65	20636-20643	against	
44-66	20644-20646	it	
44-67	20646-20647	.	
44-68	20648-20651	Use	
44-69	20652-20658	Amazon	
44-70	20659-20667	Redshift	
44-71	20668-20676	Spectrum	
44-72	20677-20679	to	
44-73	20680-20683	run	
44-74	20684-20691	queries	
44-75	20692-20694	as	
44-76	20695-20698	the	
44-77	20699-20703	data	
44-78	20704-20709	lands	
44-79	20710-20712	in	
44-80	20713-20719	Amazon	
44-81	20720-20722	S3	
44-82	20722-20723	,	
44-83	20724-20730	rather	
44-84	20731-20735	than	
44-85	20736-20742	adding	
44-86	20743-20744	a	
44-87	20745-20749	step	
44-88	20750-20752	to	
44-89	20753-20757	load	
44-90	20758-20761	the	
44-91	20762-20766	data	
44-92	20767-20771	onto	
44-93	20772-20775	the	
44-94	20776-20780	main	
44-95	20781-20788	cluster	
44-96	20788-20789	.	
44-97	20790-20794	This	
44-98	20795-20801	allows	
44-99	20802-20805	for	
44-100	20806-20815	real-time	
44-101	20816-20825	analytics	
44-102	20825-20826	.	

#Text=Land the output of a staging or transformation cluster on Amazon S3 in a partitioned, columnar format. The main or reporting cluster can either query from that Amazon S3 dataset directly or load it via an INSERT … SELECT statement. Within Amazon Redshift itself, you can export the data into the data lake with the UNLOAD command, or by writing to external tables. Both options export SQL statement output to Amazon S3 in a massively parallel fashion. You can do the following:
45-1	20827-20831	Land	
45-2	20832-20835	the	
45-3	20836-20842	output	
45-4	20843-20845	of	
45-5	20846-20847	a	
45-6	20848-20855	staging	
45-7	20856-20858	or	
45-8	20859-20873	transformation	
45-9	20874-20881	cluster	
45-10	20882-20884	on	
45-11	20885-20891	Amazon	
45-12	20892-20894	S3	
45-13	20895-20897	in	
45-14	20898-20899	a	
45-15	20900-20911	partitioned	
45-16	20911-20912	,	
45-17	20913-20921	columnar	
45-18	20922-20928	format	
45-19	20928-20929	.	
45-20	20930-20933	The	
45-21	20934-20938	main	
45-22	20939-20941	or	
45-23	20942-20951	reporting	
45-24	20952-20959	cluster	
45-25	20960-20963	can	
45-26	20964-20970	either	
45-27	20971-20976	query	
45-28	20977-20981	from	
45-29	20982-20986	that	
45-30	20987-20993	Amazon	
45-31	20994-20996	S3	
45-32	20997-21004	dataset	
45-33	21005-21013	directly	
45-34	21014-21016	or	
45-35	21017-21021	load	
45-36	21022-21024	it	
45-37	21025-21028	via	
45-38	21029-21031	an	
45-39	21032-21038	INSERT	
45-40	21039-21040	…	
45-41	21041-21047	SELECT	
45-42	21048-21057	statement	
45-43	21057-21058	.	
45-44	21059-21065	Within	
45-45	21066-21072	Amazon	
45-46	21073-21081	Redshift	
45-47	21082-21088	itself	
45-48	21088-21089	,	
45-49	21090-21093	you	
45-50	21094-21097	can	
45-51	21098-21104	export	
45-52	21105-21108	the	
45-53	21109-21113	data	
45-54	21114-21118	into	
45-55	21119-21122	the	
45-56	21123-21127	data	
45-57	21128-21132	lake	
45-58	21133-21137	with	
45-59	21138-21141	the	
45-60	21141-21142	 	
45-61	21142-21148	UNLOAD	
45-62	21149-21156	command	
45-63	21156-21157	,	
45-64	21158-21160	or	
45-65	21161-21163	by	
45-66	21164-21171	writing	
45-67	21172-21174	to	
45-68	21175-21183	external	
45-69	21184-21190	tables	
45-70	21190-21191	.	
45-71	21192-21196	Both	
45-72	21197-21204	options	
45-73	21204-21205	 	
45-74	21205-21211	export	
45-75	21212-21215	SQL	
45-76	21216-21225	statement	
45-77	21226-21232	output	
45-78	21233-21235	to	
45-79	21236-21242	Amazon	
45-80	21243-21245	S3	
45-81	21246-21248	in	
45-82	21249-21250	a	
45-83	21251-21260	massively	
45-84	21261-21269	parallel	
45-85	21270-21277	fashion	
45-86	21277-21278	.	
45-87	21279-21282	You	
45-88	21283-21286	can	
45-89	21287-21289	do	
45-90	21290-21293	the	
45-91	21294-21303	following	
45-92	21303-21304	:	

#Text=Using familiar CREATE EXTERNAL TABLE AS SELECT and INSERT INTO SQL commands, create and populate external tables on Amazon S3 for subsequent use by Amazon Redshift or other services participating in the data lake without the need to manually maintain partitions. Materialized views can also cover external tables, further enhancing the accessibility and utility of the data lake. Using the UNLOAD command, Amazon Redshift can export SQL statement output to Amazon S3 in a massively parallel fashion. This technique greatly improves the export performance and lessens the impact of running the data through the leader node. You can compress the exported data on its way off the Amazon Redshift cluster. As the size of the output grows, so does the benefit of using this feature. For writing columnar data to the data lake, UNLOAD can write partition-aware Parquet data.
46-1	21305-21310	Using	
46-2	21311-21319	familiar	
46-3	21320-21326	CREATE	
46-4	21327-21335	EXTERNAL	
46-5	21336-21341	TABLE	
46-6	21342-21344	AS	
46-7	21345-21351	SELECT	
46-8	21352-21355	and	
46-9	21356-21362	INSERT	
46-10	21363-21367	INTO	
46-11	21368-21371	SQL	
46-12	21372-21380	commands	
46-13	21380-21381	,	
46-14	21382-21388	create	
46-15	21389-21392	and	
46-16	21393-21401	populate	
46-17	21402-21410	external	
46-18	21411-21417	tables	
46-19	21418-21420	on	
46-20	21421-21427	Amazon	
46-21	21428-21430	S3	
46-22	21431-21434	for	
46-23	21435-21445	subsequent	
46-24	21446-21449	use	
46-25	21450-21452	by	
46-26	21453-21459	Amazon	
46-27	21460-21468	Redshift	
46-28	21469-21471	or	
46-29	21472-21477	other	
46-30	21478-21486	services	
46-31	21487-21500	participating	
46-32	21501-21503	in	
46-33	21504-21507	the	
46-34	21508-21512	data	
46-35	21513-21517	lake	
46-36	21518-21525	without	
46-37	21526-21529	the	
46-38	21530-21534	need	
46-39	21535-21537	to	
46-40	21538-21546	manually	
46-41	21547-21555	maintain	
46-42	21556-21566	partitions	
46-43	21566-21567	.	
46-44	21568-21580	Materialized	
46-45	21581-21586	views	
46-46	21587-21590	can	
46-47	21591-21595	also	
46-48	21596-21601	cover	
46-49	21602-21610	external	
46-50	21611-21617	tables	
46-51	21617-21618	,	
46-52	21619-21626	further	
46-53	21627-21636	enhancing	
46-54	21637-21640	the	
46-55	21641-21654	accessibility	
46-56	21655-21658	and	
46-57	21659-21666	utility	
46-58	21667-21669	of	
46-59	21670-21673	the	
46-60	21674-21678	data	
46-61	21679-21683	lake	
46-62	21683-21684	.	
46-63	21685-21690	Using	
46-64	21691-21694	the	
46-65	21695-21701	UNLOAD	
46-66	21702-21709	command	
46-67	21709-21710	,	
46-68	21711-21717	Amazon	
46-69	21718-21726	Redshift	
46-70	21727-21730	can	
46-71	21731-21737	export	
46-72	21738-21741	SQL	
46-73	21742-21751	statement	
46-74	21752-21758	output	
46-75	21759-21761	to	
46-76	21762-21768	Amazon	
46-77	21769-21771	S3	
46-78	21772-21774	in	
46-79	21775-21776	a	
46-80	21777-21786	massively	
46-81	21787-21795	parallel	
46-82	21796-21803	fashion	
46-83	21803-21804	.	
46-84	21805-21809	This	
46-85	21810-21819	technique	
46-86	21820-21827	greatly	
46-87	21828-21836	improves	
46-88	21837-21840	the	
46-89	21841-21847	export	
46-90	21848-21859	performance	
46-91	21860-21863	and	
46-92	21864-21871	lessens	
46-93	21872-21875	the	
46-94	21876-21882	impact	
46-95	21883-21885	of	
46-96	21886-21893	running	
46-97	21894-21897	the	
46-98	21898-21902	data	
46-99	21903-21910	through	
46-100	21911-21914	the	
46-101	21915-21921	leader	
46-102	21922-21926	node	
46-103	21926-21927	.	
46-104	21928-21931	You	
46-105	21932-21935	can	
46-106	21936-21944	compress	
46-107	21945-21948	the	
46-108	21949-21957	exported	
46-109	21958-21962	data	
46-110	21963-21965	on	
46-111	21966-21969	its	
46-112	21970-21973	way	
46-113	21974-21977	off	
46-114	21978-21981	the	
46-115	21982-21988	Amazon	
46-116	21989-21997	Redshift	
46-117	21998-22005	cluster	
46-118	22005-22006	.	
46-119	22007-22009	As	
46-120	22010-22013	the	
46-121	22014-22018	size	
46-122	22019-22021	of	
46-123	22022-22025	the	
46-124	22026-22032	output	
46-125	22033-22038	grows	
46-126	22038-22039	,	
46-127	22040-22042	so	
46-128	22043-22047	does	
46-129	22048-22051	the	
46-130	22052-22059	benefit	
46-131	22060-22062	of	
46-132	22063-22068	using	
46-133	22069-22073	this	
46-134	22074-22081	feature	
46-135	22081-22082	.	
46-136	22083-22086	For	
46-137	22087-22094	writing	
46-138	22095-22103	columnar	
46-139	22104-22108	data	
46-140	22109-22111	to	
46-141	22112-22115	the	
46-142	22116-22120	data	
46-143	22121-22125	lake	
46-144	22125-22126	,	
46-145	22127-22133	UNLOAD	
46-146	22134-22137	can	
46-147	22138-22143	write	
46-148	22144-22159	partition-aware	
46-149	22160-22167	Parquet	
46-150	22168-22172	data	
46-151	22172-22173	.	

#Text=Tip #6: Improving the efficiency of temporary tables
47-1	22174-22177	Tip	
47-2	22178-22180	#6	
47-3	22180-22181	:	
47-4	22182-22191	Improving	
47-5	22192-22195	the	
47-6	22196-22206	efficiency	
47-7	22207-22209	of	
47-8	22210-22219	temporary	
47-9	22220-22226	tables	

#Text=Amazon Redshift provides temporary tables, which act like normal tables but have a lifetime of a single SQL session. The proper use of temporary tables can significantly improve performance of some ETL operations. Unlike regular permanent tables, data changes made to temporary tables don’t trigger automatic incremental backups to Amazon S3, and they don’t require synchronous block mirroring to store a redundant copy of data on a different compute node. Due to these reasons, data ingestion on temporary tables involves reduced overhead and performs much faster. For transient storage needs like staging tables, temporary tables are ideal.
48-1	22227-22233	Amazon	
48-2	22234-22242	Redshift	
48-3	22243-22251	provides	
48-4	22252-22261	temporary	
48-5	22262-22268	tables	
48-6	22268-22269	,	
48-7	22270-22275	which	
48-8	22276-22279	act	
48-9	22280-22284	like	
48-10	22285-22291	normal	
48-11	22292-22298	tables	
48-12	22299-22302	but	
48-13	22303-22307	have	
48-14	22308-22309	a	
48-15	22310-22318	lifetime	
48-16	22319-22321	of	
48-17	22322-22323	a	
48-18	22324-22330	single	
48-19	22331-22334	SQL	
48-20	22335-22342	session	
48-21	22342-22343	.	
48-22	22344-22347	The	
48-23	22348-22354	proper	
48-24	22355-22358	use	
48-25	22359-22361	of	
48-26	22362-22371	temporary	
48-27	22372-22378	tables	
48-28	22379-22382	can	
48-29	22383-22396	significantly	
48-30	22397-22404	improve	
48-31	22405-22416	performance	
48-32	22417-22419	of	
48-33	22420-22424	some	
48-34	22425-22428	ETL	
48-35	22429-22439	operations	
48-36	22439-22440	.	
48-37	22441-22447	Unlike	
48-38	22448-22455	regular	
48-39	22456-22465	permanent	
48-40	22466-22472	tables	
48-41	22472-22473	,	
48-42	22474-22478	data	
48-43	22479-22486	changes	
48-44	22487-22491	made	
48-45	22492-22494	to	
48-46	22495-22504	temporary	
48-47	22505-22511	tables	
48-48	22512-22515	don	
48-49	22515-22516	’	
48-50	22516-22517	t	
48-51	22518-22525	trigger	
48-52	22526-22535	automatic	
48-53	22536-22547	incremental	
48-54	22548-22555	backups	
48-55	22556-22558	to	
48-56	22559-22565	Amazon	
48-57	22566-22568	S3	
48-58	22568-22569	,	
48-59	22570-22573	and	
48-60	22574-22578	they	
48-61	22579-22582	don	
48-62	22582-22583	’	
48-63	22583-22584	t	
48-64	22585-22592	require	
48-65	22593-22604	synchronous	
48-66	22605-22610	block	
48-67	22611-22620	mirroring	
48-68	22621-22623	to	
48-69	22624-22629	store	
48-70	22630-22631	a	
48-71	22632-22641	redundant	
48-72	22642-22646	copy	
48-73	22647-22649	of	
48-74	22650-22654	data	
48-75	22655-22657	on	
48-76	22658-22659	a	
48-77	22660-22669	different	
48-78	22670-22677	compute	
48-79	22678-22682	node	
48-80	22682-22683	.	
48-81	22684-22687	Due	
48-82	22688-22690	to	
48-83	22691-22696	these	
48-84	22697-22704	reasons	
48-85	22704-22705	,	
48-86	22706-22710	data	
48-87	22711-22720	ingestion	
48-88	22721-22723	on	
48-89	22724-22733	temporary	
48-90	22734-22740	tables	
48-91	22741-22749	involves	
48-92	22750-22757	reduced	
48-93	22758-22766	overhead	
48-94	22767-22770	and	
48-95	22771-22779	performs	
48-96	22780-22784	much	
48-97	22785-22791	faster	
48-98	22791-22792	.	
48-99	22793-22796	For	
48-100	22797-22806	transient	
48-101	22807-22814	storage	
48-102	22815-22820	needs	
48-103	22821-22825	like	
48-104	22826-22833	staging	
48-105	22834-22840	tables	
48-106	22840-22841	,	
48-107	22842-22851	temporary	
48-108	22852-22858	tables	
48-109	22859-22862	are	
48-110	22863-22868	ideal	
48-111	22868-22869	.	

#Text=You can create temporary tables using the CREATE TEMPORARY TABLE syntax, or by issuing a SELECT … INTO #TEMP_TABLE query. The CREATE TABLE statement gives you complete control over the definition of the temporary table. The SELECT … INTO and C(T)TAS commands use the input data to determine column names, sizes and data types, and use default storage properties. Consider default storage properties carefully, because they may cause problems. By default, for temporary tables, Amazon Redshift applies EVEN table distribution with no column encoding (such as RAW compression) for all columns. This data structure is sub-optimal for many types of queries. If you employ the SELECT…INTO syntax, you can’t set the column encoding, column distribution, or sort keys. The CREATE TABLE AS (CTAS) syntax instead lets you specify a distribution style and sort keys, and Amazon Redshift automatically applies LZO encoding for everything other than sort keys, Booleans, reals, and doubles. You can exert additional control by using the CREATE TABLE syntax rather than CTAS.
49-1	22870-22873	You	
49-2	22874-22877	can	
49-3	22878-22884	create	
49-4	22885-22894	temporary	
49-5	22895-22901	tables	
49-6	22902-22907	using	
49-7	22908-22911	the	
49-8	22912-22918	CREATE	
49-9	22919-22928	TEMPORARY	
49-10	22929-22934	TABLE	
49-11	22935-22941	syntax	
49-12	22941-22942	,	
49-13	22943-22945	or	
49-14	22946-22948	by	
49-15	22949-22956	issuing	
49-16	22957-22958	a	
49-17	22959-22965	SELECT	
49-18	22966-22967	…	
49-19	22968-22972	INTO	
49-20	22973-22974	#	
49-21	22974-22984	TEMP_TABLE	
49-22	22985-22990	query	
49-23	22990-22991	.	
49-24	22992-22995	The	
49-25	22996-23002	CREATE	
49-26	23003-23008	TABLE	
49-27	23009-23018	statement	
49-28	23019-23024	gives	
49-29	23025-23028	you	
49-30	23029-23037	complete	
49-31	23038-23045	control	
49-32	23046-23050	over	
49-33	23051-23054	the	
49-34	23055-23065	definition	
49-35	23066-23068	of	
49-36	23069-23072	the	
49-37	23073-23082	temporary	
49-38	23083-23088	table	
49-39	23088-23089	.	
49-40	23090-23093	The	
49-41	23094-23100	SELECT	
49-42	23101-23102	…	
49-43	23103-23107	INTO	
49-44	23108-23111	and	
49-45	23112-23113	C	
49-46	23113-23114	(	
49-47	23114-23115	T	
49-48	23115-23116	)	
49-49	23116-23119	TAS	
49-50	23120-23128	commands	
49-51	23129-23132	use	
49-52	23133-23136	the	
49-53	23137-23142	input	
49-54	23143-23147	data	
49-55	23148-23150	to	
49-56	23151-23160	determine	
49-57	23161-23167	column	
49-58	23168-23173	names	
49-59	23173-23174	,	
49-60	23175-23180	sizes	
49-61	23181-23184	and	
49-62	23185-23189	data	
49-63	23190-23195	types	
49-64	23195-23196	,	
49-65	23197-23200	and	
49-66	23201-23204	use	
49-67	23205-23212	default	
49-68	23213-23220	storage	
49-69	23221-23231	properties	
49-70	23231-23232	.	
49-71	23233-23241	Consider	
49-72	23242-23249	default	
49-73	23250-23257	storage	
49-74	23258-23268	properties	
49-75	23269-23278	carefully	
49-76	23278-23279	,	
49-77	23280-23287	because	
49-78	23288-23292	they	
49-79	23293-23296	may	
49-80	23297-23302	cause	
49-81	23303-23311	problems	
49-82	23311-23312	.	
49-83	23313-23315	By	
49-84	23316-23323	default	
49-85	23323-23324	,	
49-86	23325-23328	for	
49-87	23329-23338	temporary	
49-88	23339-23345	tables	
49-89	23345-23346	,	
49-90	23347-23353	Amazon	
49-91	23354-23362	Redshift	
49-92	23363-23370	applies	
49-93	23371-23375	EVEN	
49-94	23376-23381	table	
49-95	23382-23394	distribution	
49-96	23395-23399	with	
49-97	23400-23402	no	
49-98	23403-23409	column	
49-99	23410-23418	encoding	
49-100	23419-23420	(	
49-101	23420-23424	such	
49-102	23425-23427	as	
49-103	23428-23431	RAW	
49-104	23432-23443	compression	
49-105	23443-23444	)	
49-106	23445-23448	for	
49-107	23449-23452	all	
49-108	23453-23460	columns	
49-109	23460-23461	.	
49-110	23462-23466	This	
49-111	23467-23471	data	
49-112	23472-23481	structure	
49-113	23482-23484	is	
49-114	23485-23496	sub-optimal	
49-115	23497-23500	for	
49-116	23501-23505	many	
49-117	23506-23511	types	
49-118	23512-23514	of	
49-119	23515-23522	queries	
49-120	23522-23523	.	
49-121	23524-23526	If	
49-122	23527-23530	you	
49-123	23531-23537	employ	
49-124	23538-23541	the	
49-125	23542-23548	SELECT	
49-126	23548-23549	…	
49-127	23549-23553	INTO	
49-128	23554-23560	syntax	
49-129	23560-23561	,	
49-130	23562-23565	you	
49-131	23566-23569	can	
49-132	23569-23570	’	
49-133	23570-23571	t	
49-134	23572-23575	set	
49-135	23576-23579	the	
49-136	23580-23586	column	
49-137	23587-23595	encoding	
49-138	23595-23596	,	
49-139	23597-23603	column	
49-140	23604-23616	distribution	
49-141	23616-23617	,	
49-142	23618-23620	or	
49-143	23621-23625	sort	
49-144	23626-23630	keys	
49-145	23630-23631	.	
49-146	23632-23635	The	
49-147	23636-23642	CREATE	
49-148	23643-23648	TABLE	
49-149	23649-23651	AS	
49-150	23652-23653	(	
49-151	23653-23657	CTAS	
49-152	23657-23658	)	
49-153	23659-23665	syntax	
49-154	23666-23673	instead	
49-155	23674-23678	lets	
49-156	23679-23682	you	
49-157	23683-23690	specify	
49-158	23691-23692	a	
49-159	23693-23705	distribution	
49-160	23706-23711	style	
49-161	23712-23715	and	
49-162	23716-23720	sort	
49-163	23721-23725	keys	
49-164	23725-23726	,	
49-165	23727-23730	and	
49-166	23731-23737	Amazon	
49-167	23738-23746	Redshift	
49-168	23747-23760	automatically	
49-169	23761-23768	applies	
49-170	23769-23772	LZO	
49-171	23773-23781	encoding	
49-172	23782-23785	for	
49-173	23786-23796	everything	
49-174	23797-23802	other	
49-175	23803-23807	than	
49-176	23808-23812	sort	
49-177	23813-23817	keys	
49-178	23817-23818	,	
49-179	23819-23827	Booleans	
49-180	23827-23828	,	
49-181	23829-23834	reals	
49-182	23834-23835	,	
49-183	23836-23839	and	
49-184	23840-23847	doubles	
49-185	23847-23848	.	
49-186	23849-23852	You	
49-187	23853-23856	can	
49-188	23857-23862	exert	
49-189	23863-23873	additional	
49-190	23874-23881	control	
49-191	23882-23884	by	
49-192	23885-23890	using	
49-193	23891-23894	the	
49-194	23895-23901	CREATE	
49-195	23902-23907	TABLE	
49-196	23908-23914	syntax	
49-197	23915-23921	rather	
49-198	23922-23926	than	
49-199	23927-23931	CTAS	
49-200	23931-23932	.	

#Text=If you create temporary tables, remember to convert all SELECT…INTO syntax into the CREATE statement. This ensures that your temporary tables have column encodings and don’t cause distribution errors within your workflow. For example, you may want to convert a statement using this syntax: SELECT column_a, column_b INTO #my_temp_table FROM my_table; You need to analyze the temporary table for optimal column encoding: Master=# analyze compression #my_temp_table; Table | Column | Encoding
50-1	23933-23935	If	
50-2	23936-23939	you	
50-3	23940-23946	create	
50-4	23947-23956	temporary	
50-5	23957-23963	tables	
50-6	23963-23964	,	
50-7	23965-23973	remember	
50-8	23974-23976	to	
50-9	23977-23984	convert	
50-10	23985-23988	all	
50-11	23989-23995	SELECT	
50-12	23995-23996	…	
50-13	23996-24000	INTO	
50-14	24001-24007	syntax	
50-15	24008-24012	into	
50-16	24013-24016	the	
50-17	24017-24023	CREATE	
50-18	24024-24033	statement	
50-19	24033-24034	.	
50-20	24035-24039	This	
50-21	24040-24047	ensures	
50-22	24048-24052	that	
50-23	24053-24057	your	
50-24	24058-24067	temporary	
50-25	24068-24074	tables	
50-26	24075-24079	have	
50-27	24080-24086	column	
50-28	24087-24096	encodings	
50-29	24097-24100	and	
50-30	24101-24104	don	
50-31	24104-24105	’	
50-32	24105-24106	t	
50-33	24107-24112	cause	
50-34	24113-24125	distribution	
50-35	24126-24132	errors	
50-36	24133-24139	within	
50-37	24140-24144	your	
50-38	24145-24153	workflow	
50-39	24153-24154	.	
50-40	24155-24158	For	
50-41	24159-24166	example	
50-42	24166-24167	,	
50-43	24168-24171	you	
50-44	24172-24175	may	
50-45	24176-24180	want	
50-46	24181-24183	to	
50-47	24184-24191	convert	
50-48	24192-24193	a	
50-49	24194-24203	statement	
50-50	24204-24209	using	
50-51	24210-24214	this	
50-52	24215-24221	syntax	
50-53	24221-24222	:	
50-54	24223-24229	SELECT	
50-55	24230-24238	column_a	
50-56	24238-24239	,	
50-57	24240-24248	column_b	
50-58	24249-24253	INTO	
50-59	24254-24255	#	
50-60	24255-24268	my_temp_table	
50-61	24269-24273	FROM	
50-62	24274-24282	my_table	
50-63	24282-24283	;	
50-64	24284-24287	You	
50-65	24288-24292	need	
50-66	24293-24295	to	
50-67	24296-24303	analyze	
50-68	24304-24307	the	
50-69	24308-24317	temporary	
50-70	24318-24323	table	
50-71	24324-24327	for	
50-72	24328-24335	optimal	
50-73	24336-24342	column	
50-74	24343-24351	encoding	
50-75	24351-24352	:	
50-76	24353-24359	Master	
50-77	24359-24360	=	
50-78	24360-24361	#	
50-79	24362-24369	analyze	
50-80	24370-24381	compression	
50-81	24382-24383	#	
50-82	24383-24396	my_temp_table	
50-83	24396-24397	;	
50-84	24398-24403	Table	
50-85	24404-24405	|	
50-86	24406-24412	Column	
50-87	24413-24414	|	
50-88	24415-24423	Encoding	

#Text=----------------+----------+--------- #my_temp_table | columb_a | lzo #my_temp_table | columb_b | bytedict (2 rows) You can then convert the SELECT INTO a statement to the following: BEGIN;
51-1	24424-24425	-	
51-2	24425-24426	-	
51-3	24426-24427	-	
51-4	24427-24428	-	
51-5	24428-24429	-	
51-6	24429-24430	-	
51-7	24430-24431	-	
51-8	24431-24432	-	
51-9	24432-24433	-	
51-10	24433-24434	-	
51-11	24434-24435	-	
51-12	24435-24436	-	
51-13	24436-24437	-	
51-14	24437-24438	-	
51-15	24438-24439	-	
51-16	24439-24440	-	
51-17	24440-24441	+	
51-18	24441-24442	-	
51-19	24442-24443	-	
51-20	24443-24444	-	
51-21	24444-24445	-	
51-22	24445-24446	-	
51-23	24446-24447	-	
51-24	24447-24448	-	
51-25	24448-24449	-	
51-26	24449-24450	-	
51-27	24450-24451	-	
51-28	24451-24452	+	
51-29	24452-24453	-	
51-30	24453-24454	-	
51-31	24454-24455	-	
51-32	24455-24456	-	
51-33	24456-24457	-	
51-34	24457-24458	-	
51-35	24458-24459	-	
51-36	24459-24460	-	
51-37	24460-24461	-	
51-38	24462-24463	#	
51-39	24463-24476	my_temp_table	
51-40	24477-24478	|	
51-41	24479-24487	columb_a	
51-42	24488-24489	|	
51-43	24490-24493	lzo	
51-44	24494-24495	#	
51-45	24495-24508	my_temp_table	
51-46	24509-24510	|	
51-47	24511-24519	columb_b	
51-48	24520-24521	|	
51-49	24522-24530	bytedict	
51-50	24531-24532	(	
51-51	24532-24533	2	
51-52	24534-24538	rows	
51-53	24538-24539	)	
51-54	24540-24543	You	
51-55	24544-24547	can	
51-56	24548-24552	then	
51-57	24553-24560	convert	
51-58	24561-24564	the	
51-59	24565-24571	SELECT	
51-60	24572-24576	INTO	
51-61	24577-24578	a	
51-62	24579-24588	statement	
51-63	24589-24591	to	
51-64	24592-24595	the	
51-65	24596-24605	following	
51-66	24605-24606	:	
51-67	24607-24612	BEGIN	
51-68	24612-24613	;	

#Text=CREATE TEMPORARY TABLE my_temp_table( column_a varchar(128) encode lzo, column_b char(4) encode bytedict) distkey (column_a) -- Assuming you intend to join this table on column_a
52-1	24614-24620	CREATE	
52-2	24621-24630	TEMPORARY	
52-3	24631-24636	TABLE	
52-4	24637-24650	my_temp_table	
52-5	24650-24651	(	
52-6	24652-24660	column_a	
52-7	24661-24668	varchar	
52-8	24668-24669	(	
52-9	24669-24672	128	
52-10	24672-24673	)	
52-11	24674-24680	encode	
52-12	24681-24684	lzo	
52-13	24684-24685	,	
52-14	24686-24694	column_b	
52-15	24695-24699	char	
52-16	24699-24700	(	
52-17	24700-24701	4	
52-18	24701-24702	)	
52-19	24703-24709	encode	
52-20	24710-24718	bytedict	
52-21	24718-24719	)	
52-22	24720-24727	distkey	
52-23	24728-24729	(	
52-24	24729-24737	column_a	
52-25	24737-24738	)	
52-26	24739-24740	-	
52-27	24740-24741	-	
52-28	24742-24750	Assuming	
52-29	24751-24754	you	
52-30	24755-24761	intend	
52-31	24762-24764	to	
52-32	24765-24769	join	
52-33	24770-24774	this	
52-34	24775-24780	table	
52-35	24781-24783	on	
52-36	24784-24792	column_a	

#Text=sortkey (column_b) -- Assuming you are sorting or grouping by column_b INSERT INTO my_temp_table SELECT column_a, column_b FROM my_table; COMMIT;
53-1	24793-24800	sortkey	
53-2	24801-24802	(	
53-3	24802-24810	column_b	
53-4	24810-24811	)	
53-5	24812-24813	-	
53-6	24813-24814	-	
53-7	24815-24823	Assuming	
53-8	24824-24827	you	
53-9	24828-24831	are	
53-10	24832-24839	sorting	
53-11	24840-24842	or	
53-12	24843-24851	grouping	
53-13	24852-24854	by	
53-14	24855-24863	column_b	
53-15	24864-24870	INSERT	
53-16	24871-24875	INTO	
53-17	24876-24889	my_temp_table	
53-18	24890-24896	SELECT	
53-19	24897-24905	column_a	
53-20	24905-24906	,	
53-21	24907-24915	column_b	
53-22	24916-24920	FROM	
53-23	24921-24929	my_table	
53-24	24929-24930	;	
53-25	24931-24937	COMMIT	
53-26	24937-24938	;	

#Text=If you create a temporary staging table by using a CREATE TABLE LIKE statement, the staging table inherits the distribution key, sort keys, and column encodings from the parent target table. In this case, merge operations that join the staging and target tables on the same distribution key performs faster because the joining rows are collocated. To verify that the query uses a collocated join, run the query with EXPLAIN and check for DS_DIST_NONE on all the joins. You may also want to analyze statistics on the temporary table, especially when you use it as a join table for subsequent queries. See the following code: ANALYZE my_temp_table;
54-1	24939-24941	If	
54-2	24942-24945	you	
54-3	24946-24952	create	
54-4	24953-24954	a	
54-5	24955-24964	temporary	
54-6	24965-24972	staging	
54-7	24973-24978	table	
54-8	24979-24981	by	
54-9	24982-24987	using	
54-10	24988-24989	a	
54-11	24990-24996	CREATE	
54-12	24997-25002	TABLE	
54-13	25003-25007	LIKE	
54-14	25008-25017	statement	
54-15	25017-25018	,	
54-16	25019-25022	the	
54-17	25023-25030	staging	
54-18	25031-25036	table	
54-19	25037-25045	inherits	
54-20	25046-25049	the	
54-21	25050-25062	distribution	
54-22	25063-25066	key	
54-23	25066-25067	,	
54-24	25068-25072	sort	
54-25	25073-25077	keys	
54-26	25077-25078	,	
54-27	25079-25082	and	
54-28	25083-25089	column	
54-29	25090-25099	encodings	
54-30	25100-25104	from	
54-31	25105-25108	the	
54-32	25109-25115	parent	
54-33	25116-25122	target	
54-34	25123-25128	table	
54-35	25128-25129	.	
54-36	25130-25132	In	
54-37	25133-25137	this	
54-38	25138-25142	case	
54-39	25142-25143	,	
54-40	25144-25149	merge	
54-41	25150-25160	operations	
54-42	25161-25165	that	
54-43	25166-25170	join	
54-44	25171-25174	the	
54-45	25175-25182	staging	
54-46	25183-25186	and	
54-47	25187-25193	target	
54-48	25194-25200	tables	
54-49	25201-25203	on	
54-50	25204-25207	the	
54-51	25208-25212	same	
54-52	25213-25225	distribution	
54-53	25226-25229	key	
54-54	25230-25238	performs	
54-55	25239-25245	faster	
54-56	25246-25253	because	
54-57	25254-25257	the	
54-58	25258-25265	joining	
54-59	25266-25270	rows	
54-60	25271-25274	are	
54-61	25275-25285	collocated	
54-62	25285-25286	.	
54-63	25287-25289	To	
54-64	25290-25296	verify	
54-65	25297-25301	that	
54-66	25302-25305	the	
54-67	25306-25311	query	
54-68	25312-25316	uses	
54-69	25317-25318	a	
54-70	25319-25329	collocated	
54-71	25330-25334	join	
54-72	25334-25335	,	
54-73	25336-25339	run	
54-74	25340-25343	the	
54-75	25344-25349	query	
54-76	25350-25354	with	
54-77	25355-25362	EXPLAIN	
54-78	25363-25366	and	
54-79	25367-25372	check	
54-80	25373-25376	for	
54-81	25377-25389	DS_DIST_NONE	
54-82	25390-25392	on	
54-83	25393-25396	all	
54-84	25397-25400	the	
54-85	25401-25406	joins	
54-86	25406-25407	.	
54-87	25408-25411	You	
54-88	25412-25415	may	
54-89	25416-25420	also	
54-90	25421-25425	want	
54-91	25426-25428	to	
54-92	25429-25436	analyze	
54-93	25437-25447	statistics	
54-94	25448-25450	on	
54-95	25451-25454	the	
54-96	25455-25464	temporary	
54-97	25465-25470	table	
54-98	25470-25471	,	
54-99	25472-25482	especially	
54-100	25483-25487	when	
54-101	25488-25491	you	
54-102	25492-25495	use	
54-103	25496-25498	it	
54-104	25499-25501	as	
54-105	25502-25503	a	
54-106	25504-25508	join	
54-107	25509-25514	table	
54-108	25515-25518	for	
54-109	25519-25529	subsequent	
54-110	25530-25537	queries	
54-111	25537-25538	.	
54-112	25539-25542	See	
54-113	25543-25546	the	
54-114	25547-25556	following	
54-115	25557-25561	code	
54-116	25561-25562	:	
54-117	25563-25570	ANALYZE	
54-118	25571-25584	my_temp_table	
54-119	25584-25585	;	

#Text=With this trick, you retain the functionality of temporary tables but control data placement on the cluster through distribution key assignment. You also take advantage of the columnar nature of Amazon Redshift by using column encoding. Tip #7: Using QMR and Amazon CloudWatch metrics to drive additional performance improvements In addition to the Amazon Redshift Advisor recommendations, you can get performance insights through other channels.
55-1	25586-25590	With	
55-2	25591-25595	this	
55-3	25596-25601	trick	
55-4	25601-25602	,	
55-5	25603-25606	you	
55-6	25607-25613	retain	
55-7	25614-25617	the	
55-8	25618-25631	functionality	
55-9	25632-25634	of	
55-10	25635-25644	temporary	
55-11	25645-25651	tables	
55-12	25652-25655	but	
55-13	25656-25663	control	
55-14	25664-25668	data	
55-15	25669-25678	placement	
55-16	25679-25681	on	
55-17	25682-25685	the	
55-18	25686-25693	cluster	
55-19	25694-25701	through	
55-20	25702-25714	distribution	
55-21	25715-25718	key	
55-22	25719-25729	assignment	
55-23	25729-25730	.	
55-24	25731-25734	You	
55-25	25735-25739	also	
55-26	25740-25744	take	
55-27	25745-25754	advantage	
55-28	25755-25757	of	
55-29	25758-25761	the	
55-30	25762-25770	columnar	
55-31	25771-25777	nature	
55-32	25778-25780	of	
55-33	25781-25787	Amazon	
55-34	25788-25796	Redshift	
55-35	25797-25799	by	
55-36	25800-25805	using	
55-37	25806-25812	column	
55-38	25813-25821	encoding	
55-39	25821-25822	.	
55-40	25823-25826	Tip	
55-41	25827-25829	#7	
55-42	25829-25830	:	
55-43	25830-25831	 	
55-44	25831-25836	Using	
55-45	25837-25840	QMR	
55-46	25841-25844	and	
55-47	25845-25851	Amazon	
55-48	25852-25862	CloudWatch	
55-49	25863-25870	metrics	
55-50	25871-25873	to	
55-51	25874-25879	drive	
55-52	25880-25890	additional	
55-53	25891-25902	performance	
55-54	25903-25915	improvements	
55-55	25916-25918	In	
55-56	25919-25927	addition	
55-57	25928-25930	to	
55-58	25931-25934	the	
55-59	25935-25941	Amazon	
55-60	25942-25950	Redshift	
55-61	25951-25958	Advisor	
55-62	25959-25974	recommendations	
55-63	25974-25975	,	
55-64	25976-25979	you	
55-65	25980-25983	can	
55-66	25984-25987	get	
55-67	25988-25999	performance	
55-68	26000-26008	insights	
55-69	26009-26016	through	
55-70	26017-26022	other	
55-71	26023-26031	channels	
55-72	26031-26032	.	

#Text=The Amazon Redshift cluster continuously and automatically collects query monitoring rules metrics, whether you institute any rules on the cluster or not. This convenient mechanism lets you view attributes like the following: The CPU time for a SQL statement (query_cpu_time) The amount of temporary space a job might ‘spill to disk’ (query_temp_blocks_to_disk) The ratio of the highest number of blocks read over the average (io_skew)
56-1	26033-26036	The	
56-2	26037-26043	Amazon	
56-3	26044-26052	Redshift	
56-4	26053-26060	cluster	
56-5	26061-26073	continuously	
56-6	26074-26077	and	
56-7	26078-26091	automatically	
56-8	26092-26100	collects	
56-9	26101-26106	query	
56-10	26107-26117	monitoring	
56-11	26118-26123	rules	
56-12	26124-26131	metrics	
56-13	26131-26132	,	
56-14	26133-26140	whether	
56-15	26141-26144	you	
56-16	26145-26154	institute	
56-17	26155-26158	any	
56-18	26159-26164	rules	
56-19	26165-26167	on	
56-20	26168-26171	the	
56-21	26172-26179	cluster	
56-22	26180-26182	or	
56-23	26183-26186	not	
56-24	26186-26187	.	
56-25	26188-26192	This	
56-26	26193-26203	convenient	
56-27	26204-26213	mechanism	
56-28	26214-26218	lets	
56-29	26219-26222	you	
56-30	26223-26227	view	
56-31	26228-26238	attributes	
56-32	26239-26243	like	
56-33	26244-26247	the	
56-34	26248-26257	following	
56-35	26257-26258	:	
56-36	26259-26262	The	
56-37	26263-26266	CPU	
56-38	26267-26271	time	
56-39	26272-26275	for	
56-40	26276-26277	a	
56-41	26278-26281	SQL	
56-42	26282-26291	statement	
56-43	26292-26293	(	
56-44	26293-26307	query_cpu_time	
56-45	26307-26308	)	
56-46	26309-26312	The	
56-47	26313-26319	amount	
56-48	26320-26322	of	
56-49	26323-26332	temporary	
56-50	26333-26338	space	
56-51	26339-26340	a	
56-52	26341-26344	job	
56-53	26345-26350	might	
56-54	26351-26352	‘	
56-55	26352-26357	spill	
56-56	26358-26360	to	
56-57	26361-26365	disk	
56-58	26365-26366	’	
56-59	26367-26368	(	
56-60	26368-26393	query_temp_blocks_to_disk	
56-61	26393-26394	)	
56-62	26395-26398	The	
56-63	26399-26404	ratio	
56-64	26405-26407	of	
56-65	26408-26411	the	
56-66	26412-26419	highest	
56-67	26420-26426	number	
56-68	26427-26429	of	
56-69	26430-26436	blocks	
56-70	26437-26441	read	
56-71	26442-26446	over	
56-72	26447-26450	the	
56-73	26451-26458	average	
56-74	26459-26460	(	
56-75	26460-26467	io_skew	
56-76	26467-26468	)	

#Text=It also makes Amazon Redshift Spectrum metrics available, such as the number of Amazon Redshift Spectrum rows and MBs scanned by a query (spectrum_scan_row_count and spectrum_scan_size_mb, respectively). The Amazon Redshift system view SVL_QUERY_METRICS_SUMMARY shows the maximum values of metrics for completed queries, and STL_QUERY_METRICS and STV_QUERY_METRICS carry the information at 1-second intervals for the completed and running queries respectively.
57-1	26469-26471	It	
57-2	26472-26476	also	
57-3	26477-26482	makes	
57-4	26483-26489	Amazon	
57-5	26490-26498	Redshift	
57-6	26499-26507	Spectrum	
57-7	26508-26515	metrics	
57-8	26516-26525	available	
57-9	26525-26526	,	
57-10	26527-26531	such	
57-11	26532-26534	as	
57-12	26535-26538	the	
57-13	26539-26545	number	
57-14	26546-26548	of	
57-15	26549-26555	Amazon	
57-16	26556-26564	Redshift	
57-17	26565-26573	Spectrum	
57-18	26574-26578	rows	
57-19	26579-26582	and	
57-20	26583-26586	MBs	
57-21	26587-26594	scanned	
57-22	26595-26597	by	
57-23	26598-26599	a	
57-24	26600-26605	query	
57-25	26606-26607	(	
57-26	26607-26630	spectrum_scan_row_count	
57-27	26631-26634	and	
57-28	26635-26656	spectrum_scan_size_mb	
57-29	26656-26657	,	
57-30	26658-26670	respectively	
57-31	26670-26671	)	
57-32	26671-26672	.	
57-33	26673-26676	The	
57-34	26677-26683	Amazon	
57-35	26684-26692	Redshift	
57-36	26693-26699	system	
57-37	26700-26704	view	
57-38	26705-26730	SVL_QUERY_METRICS_SUMMARY	
57-39	26731-26736	shows	
57-40	26737-26740	the	
57-41	26741-26748	maximum	
57-42	26749-26755	values	
57-43	26756-26758	of	
57-44	26759-26766	metrics	
57-45	26767-26770	for	
57-46	26771-26780	completed	
57-47	26781-26788	queries	
57-48	26788-26789	,	
57-49	26790-26793	and	
57-50	26794-26811	STL_QUERY_METRICS	
57-51	26812-26815	and	
57-52	26816-26833	STV_QUERY_METRICS	
57-53	26834-26839	carry	
57-54	26840-26843	the	
57-55	26844-26855	information	
57-56	26856-26858	at	
57-57	26859-26860	1	
57-58	26860-26861	-	
57-59	26861-26867	second	
57-60	26868-26877	intervals	
57-61	26878-26881	for	
57-62	26882-26885	the	
57-63	26886-26895	completed	
57-64	26896-26899	and	
57-65	26900-26907	running	
57-66	26908-26915	queries	
57-67	26916-26928	respectively	
57-68	26928-26929	.	

#Text=The Amazon Redshift CloudWatch metrics are data points for use with Amazon CloudWatch monitoring. These can be cluster-wide metrics, such as health status or read/write, IOPS, latency, or throughput. It also offers compute node–level data, such as network transmit/receive throughput and read/write latency. At the WLM queue grain, there are the number of queries completed per second, queue length, and others. CloudWatch facilitates monitoring concurrency scaling usage with the metrics ConcurrencyScalingSeconds and ConcurrencyScalingActiveClusters. It’s recommended to consider the CloudWatch metrics (and the existing notification infrastructure built around them) before investing time in creating something new. Similarly, the QMR metrics cover most metric use cases and likely eliminate the need to write custom metrics.
58-1	26930-26933	The	
58-2	26934-26940	Amazon	
58-3	26941-26949	Redshift	
58-4	26950-26960	CloudWatch	
58-5	26961-26968	metrics	
58-6	26969-26972	are	
58-7	26973-26977	data	
58-8	26978-26984	points	
58-9	26985-26988	for	
58-10	26989-26992	use	
58-11	26993-26997	with	
58-12	26998-27004	Amazon	
58-13	27005-27015	CloudWatch	
58-14	27016-27026	monitoring	
58-15	27026-27027	.	
58-16	27028-27033	These	
58-17	27034-27037	can	
58-18	27038-27040	be	
58-19	27041-27053	cluster-wide	
58-20	27054-27061	metrics	
58-21	27061-27062	,	
58-22	27063-27067	such	
58-23	27068-27070	as	
58-24	27071-27077	health	
58-25	27078-27084	status	
58-26	27085-27087	or	
58-27	27088-27092	read	
58-28	27092-27093	/	
58-29	27093-27098	write	
58-30	27098-27099	,	
58-31	27100-27104	IOPS	
58-32	27104-27105	,	
58-33	27106-27113	latency	
58-34	27113-27114	,	
58-35	27115-27117	or	
58-36	27118-27128	throughput	
58-37	27128-27129	.	
58-38	27130-27132	It	
58-39	27133-27137	also	
58-40	27138-27144	offers	
58-41	27145-27152	compute	
58-42	27153-27163	node–level	
58-43	27164-27168	data	
58-44	27168-27169	,	
58-45	27170-27174	such	
58-46	27175-27177	as	
58-47	27178-27185	network	
58-48	27186-27194	transmit	
58-49	27194-27195	/	
58-50	27195-27202	receive	
58-51	27203-27213	throughput	
58-52	27214-27217	and	
58-53	27218-27222	read	
58-54	27222-27223	/	
58-55	27223-27228	write	
58-56	27229-27236	latency	
58-57	27236-27237	.	
58-58	27238-27240	At	
58-59	27241-27244	the	
58-60	27245-27248	WLM	
58-61	27249-27254	queue	
58-62	27255-27260	grain	
58-63	27260-27261	,	
58-64	27262-27267	there	
58-65	27268-27271	are	
58-66	27272-27275	the	
58-67	27276-27282	number	
58-68	27283-27285	of	
58-69	27286-27293	queries	
58-70	27294-27303	completed	
58-71	27304-27307	per	
58-72	27308-27314	second	
58-73	27314-27315	,	
58-74	27316-27321	queue	
58-75	27322-27328	length	
58-76	27328-27329	,	
58-77	27330-27333	and	
58-78	27334-27340	others	
58-79	27340-27341	.	
58-80	27342-27352	CloudWatch	
58-81	27353-27364	facilitates	
58-82	27365-27375	monitoring	
58-83	27376-27387	concurrency	
58-84	27388-27395	scaling	
58-85	27396-27401	usage	
58-86	27402-27406	with	
58-87	27407-27410	the	
58-88	27411-27418	metrics	
58-89	27418-27419	 	
58-90	27419-27444	ConcurrencyScalingSeconds	
58-91	27445-27448	and	
58-92	27448-27449	 	
58-93	27449-27481	ConcurrencyScalingActiveClusters	
58-94	27481-27482	.	
58-95	27483-27485	It	
58-96	27485-27486	’	
58-97	27486-27487	s	
58-98	27488-27499	recommended	
58-99	27500-27502	to	
58-100	27503-27511	consider	
58-101	27512-27515	the	
58-102	27516-27526	CloudWatch	
58-103	27527-27534	metrics	
58-104	27535-27536	(	
58-105	27536-27539	and	
58-106	27540-27543	the	
58-107	27544-27552	existing	
58-108	27553-27565	notification	
58-109	27566-27580	infrastructure	
58-110	27581-27586	built	
58-111	27587-27593	around	
58-112	27594-27598	them	
58-113	27598-27599	)	
58-114	27600-27606	before	
58-115	27607-27616	investing	
58-116	27617-27621	time	
58-117	27622-27624	in	
58-118	27625-27633	creating	
58-119	27634-27643	something	
58-120	27644-27647	new	
58-121	27647-27648	.	
58-122	27649-27658	Similarly	
58-123	27658-27659	,	
58-124	27660-27663	the	
58-125	27664-27667	QMR	
58-126	27668-27675	metrics	
58-127	27676-27681	cover	
58-128	27682-27686	most	
58-129	27687-27693	metric	
58-130	27694-27697	use	
58-131	27698-27703	cases	
58-132	27704-27707	and	
58-133	27708-27714	likely	
58-134	27715-27724	eliminate	
58-135	27725-27728	the	
58-136	27729-27733	need	
58-137	27734-27736	to	
58-138	27737-27742	write	
58-139	27743-27749	custom	
58-140	27750-27757	metrics	
58-141	27757-27758	.	

#Text=Tip #8: Federated queries connect the OLAP, OLTP and data lake worlds
59-1	27759-27762	Tip	
59-2	27763-27765	#8	
59-3	27765-27766	:	
59-4	27766-27767	 	
59-5	27767-27776	Federated	
59-6	27777-27784	queries	
59-7	27785-27792	connect	
59-8	27793-27796	the	
59-9	27797-27801	OLAP	
59-10	27801-27802	,	
59-11	27803-27807	OLTP	
59-12	27808-27811	and	
59-13	27812-27816	data	
59-14	27817-27821	lake	
59-15	27822-27828	worlds	

#Text=The new Federated Query feature in Amazon Redshift allows you to run analytics directly against live data residing on your OLTP source system databases and Amazon S3 data lake, without the overhead of performing ETL and ingesting source data into Amazon Redshift tables. This feature gives you a convenient and efficient option for providing realtime data visibility on operational reports, as an alternative to micro-ETL batch ingestion of realtime data into the data warehouse. By combining historical trend data from the data warehouse with live developing trends from the source systems, you can gather valuable insights to drive real-time business decision making. For example, consider sales data residing in three different data stores: Live sales order data stored on an Amazon RDS for PostgreSQL database (represented as “ext_postgres” in the following external schema)
60-1	27829-27832	The	
60-2	27833-27836	new	
60-3	27837-27846	Federated	
60-4	27847-27852	Query	
60-5	27853-27860	feature	
60-6	27861-27863	in	
60-7	27864-27870	Amazon	
60-8	27871-27879	Redshift	
60-9	27880-27886	allows	
60-10	27887-27890	you	
60-11	27891-27893	to	
60-12	27894-27897	run	
60-13	27898-27907	analytics	
60-14	27908-27916	directly	
60-15	27917-27924	against	
60-16	27925-27929	live	
60-17	27930-27934	data	
60-18	27935-27943	residing	
60-19	27944-27946	on	
60-20	27947-27951	your	
60-21	27952-27956	OLTP	
60-22	27957-27963	source	
60-23	27964-27970	system	
60-24	27971-27980	databases	
60-25	27981-27984	and	
60-26	27985-27991	Amazon	
60-27	27992-27994	S3	
60-28	27995-27999	data	
60-29	28000-28004	lake	
60-30	28004-28005	,	
60-31	28006-28013	without	
60-32	28014-28017	the	
60-33	28018-28026	overhead	
60-34	28027-28029	of	
60-35	28030-28040	performing	
60-36	28041-28044	ETL	
60-37	28045-28048	and	
60-38	28049-28058	ingesting	
60-39	28059-28065	source	
60-40	28066-28070	data	
60-41	28071-28075	into	
60-42	28076-28082	Amazon	
60-43	28083-28091	Redshift	
60-44	28092-28098	tables	
60-45	28098-28099	.	
60-46	28100-28104	This	
60-47	28105-28112	feature	
60-48	28113-28118	gives	
60-49	28119-28122	you	
60-50	28123-28124	a	
60-51	28125-28135	convenient	
60-52	28136-28139	and	
60-53	28140-28149	efficient	
60-54	28150-28156	option	
60-55	28157-28160	for	
60-56	28161-28170	providing	
60-57	28171-28179	realtime	
60-58	28180-28184	data	
60-59	28185-28195	visibility	
60-60	28196-28198	on	
60-61	28199-28210	operational	
60-62	28211-28218	reports	
60-63	28218-28219	,	
60-64	28220-28222	as	
60-65	28223-28225	an	
60-66	28226-28237	alternative	
60-67	28238-28240	to	
60-68	28241-28250	micro-ETL	
60-69	28251-28256	batch	
60-70	28257-28266	ingestion	
60-71	28267-28269	of	
60-72	28270-28278	realtime	
60-73	28279-28283	data	
60-74	28284-28288	into	
60-75	28289-28292	the	
60-76	28293-28297	data	
60-77	28298-28307	warehouse	
60-78	28307-28308	.	
60-79	28309-28311	By	
60-80	28312-28321	combining	
60-81	28322-28332	historical	
60-82	28333-28338	trend	
60-83	28339-28343	data	
60-84	28344-28348	from	
60-85	28349-28352	the	
60-86	28353-28357	data	
60-87	28358-28367	warehouse	
60-88	28368-28372	with	
60-89	28373-28377	live	
60-90	28378-28388	developing	
60-91	28389-28395	trends	
60-92	28396-28400	from	
60-93	28401-28404	the	
60-94	28405-28411	source	
60-95	28412-28419	systems	
60-96	28419-28420	,	
60-97	28421-28424	you	
60-98	28425-28428	can	
60-99	28429-28435	gather	
60-100	28436-28444	valuable	
60-101	28445-28453	insights	
60-102	28454-28456	to	
60-103	28457-28462	drive	
60-104	28463-28472	real-time	
60-105	28473-28481	business	
60-106	28482-28490	decision	
60-107	28491-28497	making	
60-108	28497-28498	.	
60-109	28499-28502	For	
60-110	28503-28510	example	
60-111	28510-28511	,	
60-112	28512-28520	consider	
60-113	28521-28526	sales	
60-114	28527-28531	data	
60-115	28532-28540	residing	
60-116	28541-28543	in	
60-117	28544-28549	three	
60-118	28550-28559	different	
60-119	28560-28564	data	
60-120	28565-28571	stores	
60-121	28571-28572	:	
60-122	28573-28577	Live	
60-123	28578-28583	sales	
60-124	28584-28589	order	
60-125	28590-28594	data	
60-126	28595-28601	stored	
60-127	28602-28604	on	
60-128	28605-28607	an	
60-129	28608-28614	Amazon	
60-130	28615-28618	RDS	
60-131	28619-28622	for	
60-132	28623-28633	PostgreSQL	
60-133	28634-28642	database	
60-134	28643-28644	(	
60-135	28644-28655	represented	
60-136	28656-28658	as	
60-137	28659-28660	“	
60-138	28660-28672	ext_postgres	
60-139	28672-28673	”	
60-140	28674-28676	in	
60-141	28677-28680	the	
60-142	28681-28690	following	
60-143	28691-28699	external	
60-144	28700-28706	schema	
60-145	28706-28707	)	

#Text=Historical sales data warehoused in a local Amazon Redshift database (represented as “local_dwh”) Archived, “cold” sales data older than 5 years stored on Amazon S3 (represented as “ext_spectrum”) We can create a late binding view in Amazon Redshift that allows you to merge and query data from all three sources. See the following code:
61-1	28708-28718	Historical	
61-2	28719-28724	sales	
61-3	28725-28729	data	
61-4	28730-28740	warehoused	
61-5	28741-28743	in	
61-6	28744-28745	a	
61-7	28746-28751	local	
61-8	28752-28758	Amazon	
61-9	28759-28767	Redshift	
61-10	28768-28776	database	
61-11	28777-28778	(	
61-12	28778-28789	represented	
61-13	28790-28792	as	
61-14	28793-28794	“	
61-15	28794-28803	local_dwh	
61-16	28803-28804	”	
61-17	28804-28805	)	
61-18	28806-28814	Archived	
61-19	28814-28815	,	
61-20	28816-28817	“	
61-21	28817-28821	cold	
61-22	28821-28822	”	
61-23	28823-28828	sales	
61-24	28829-28833	data	
61-25	28834-28839	older	
61-26	28840-28844	than	
61-27	28845-28846	5	
61-28	28847-28852	years	
61-29	28853-28859	stored	
61-30	28860-28862	on	
61-31	28863-28869	Amazon	
61-32	28870-28872	S3	
61-33	28872-28873	 	
61-34	28873-28874	(	
61-35	28874-28885	represented	
61-36	28886-28888	as	
61-37	28889-28890	“	
61-38	28890-28902	ext_spectrum	
61-39	28902-28903	”	
61-40	28903-28904	)	
61-41	28905-28907	We	
61-42	28908-28911	can	
61-43	28912-28918	create	
61-44	28919-28920	a	
61-45	28921-28925	late	
61-46	28926-28933	binding	
61-47	28934-28938	view	
61-48	28939-28941	in	
61-49	28942-28948	Amazon	
61-50	28949-28957	Redshift	
61-51	28958-28962	that	
61-52	28963-28969	allows	
61-53	28970-28973	you	
61-54	28974-28976	to	
61-55	28977-28982	merge	
61-56	28983-28986	and	
61-57	28987-28992	query	
61-58	28993-28997	data	
61-59	28998-29002	from	
61-60	29003-29006	all	
61-61	29007-29012	three	
61-62	29013-29020	sources	
61-63	29020-29021	.	
61-64	29022-29025	See	
61-65	29026-29029	the	
61-66	29030-29039	following	
61-67	29040-29044	code	
61-68	29044-29045	:	

#Text=CREATE VIEW store_sales_integrated AS SELECT * FROM ext_postgres.store_sales_live UNION ALL SELECT * FROM local_dwh.store_sales_current UNION ALL
62-1	29046-29052	CREATE	
62-2	29053-29057	VIEW	
62-3	29058-29080	store_sales_integrated	
62-4	29081-29083	AS	
62-5	29084-29090	SELECT	
62-6	29091-29092	*	
62-7	29093-29097	FROM	
62-8	29098-29127	ext_postgres.store_sales_live	
62-9	29128-29133	UNION	
62-10	29134-29137	ALL	
62-11	29138-29144	SELECT	
62-12	29145-29146	*	
62-13	29147-29151	FROM	
62-14	29152-29181	local_dwh.store_sales_current	
62-15	29182-29187	UNION	
62-16	29188-29191	ALL	

#Text=SELECT ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity,
63-1	29192-29198	SELECT	
63-2	29199-29214	ss_sold_date_sk	
63-3	29214-29215	,	
63-4	29216-29231	ss_sold_time_sk	
63-5	29231-29232	,	
63-6	29233-29243	ss_item_sk	
63-7	29243-29244	,	
63-8	29245-29259	ss_customer_sk	
63-9	29259-29260	,	
63-10	29261-29272	ss_cdemo_sk	
63-11	29272-29273	,	
63-12	29274-29285	ss_hdemo_sk	
63-13	29285-29286	,	
63-14	29287-29297	ss_addr_sk	
63-15	29297-29298	,	
63-16	29299-29310	ss_store_sk	
63-17	29310-29311	,	
63-18	29312-29323	ss_promo_sk	
63-19	29323-29324	,	
63-20	29325-29341	ss_ticket_number	
63-21	29341-29342	,	
63-22	29343-29354	ss_quantity	
63-23	29354-29355	,	

#Text=ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax, ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit
64-1	29356-29373	ss_wholesale_cost	
64-2	29373-29374	,	
64-3	29375-29388	ss_list_price	
64-4	29388-29389	,	
64-5	29390-29404	ss_sales_price	
64-6	29404-29405	,	
64-7	29406-29425	ss_ext_discount_amt	
64-8	29425-29426	,	
64-9	29427-29445	ss_ext_sales_price	
64-10	29445-29446	,	
64-11	29447-29468	ss_ext_wholesale_cost	
64-12	29468-29469	,	
64-13	29470-29487	ss_ext_list_price	
64-14	29487-29488	,	
64-15	29489-29499	ss_ext_tax	
64-16	29499-29500	,	
64-17	29501-29514	ss_coupon_amt	
64-18	29514-29515	,	
64-19	29516-29527	ss_net_paid	
64-20	29527-29528	,	
64-21	29529-29548	ss_net_paid_inc_tax	
64-22	29548-29549	,	
64-23	29550-29563	ss_net_profit	

#Text=FROM ext_spectrum.store_sales_historical WITH NO SCHEMA BINDING
65-1	29564-29568	FROM	
65-2	29569-29604	ext_spectrum.store_sales_historical	
65-3	29605-29609	WITH	
65-4	29610-29612	NO	
65-5	29613-29619	SCHEMA	
65-6	29620-29627	BINDING	

#Text=Currently, direct federated querying is supported for data stored in Amazon Aurora PostgreSQL and Amazon RDS for PostgreSQL databases, with support for other major RDS engines coming soon. You can also use the federated query feature to simplify the ETL and data-ingestion process. Instead of staging data on Amazon S3, and performing a COPY operation, federated queries allow you to ingest data directly into an Amazon Redshift table in one step, as part of a federated CTAS/INSERT SQL query. For example, the following code shows an upsert/merge operation in which the COPY operation from Amazon S3 to Amazon Redshift is replaced with a federated query sourced directly from PostgreSQL: BEGIN;
66-1	29628-29637	Currently	
66-2	29637-29638	,	
66-3	29639-29645	direct	
66-4	29646-29655	federated	
66-5	29656-29664	querying	
66-6	29665-29667	is	
66-7	29668-29677	supported	
66-8	29678-29681	for	
66-9	29682-29686	data	
66-10	29687-29693	stored	
66-11	29694-29696	in	
66-12	29697-29703	Amazon	
66-13	29704-29710	Aurora	
66-14	29711-29721	PostgreSQL	
66-15	29722-29725	and	
66-16	29726-29732	Amazon	
66-17	29733-29736	RDS	
66-18	29737-29740	for	
66-19	29741-29751	PostgreSQL	
66-20	29752-29761	databases	
66-21	29761-29762	,	
66-22	29763-29767	with	
66-23	29768-29775	support	
66-24	29776-29779	for	
66-25	29780-29785	other	
66-26	29786-29791	major	
66-27	29792-29795	RDS	
66-28	29796-29803	engines	
66-29	29804-29810	coming	
66-30	29811-29815	soon	
66-31	29815-29816	.	
66-32	29817-29820	You	
66-33	29821-29824	can	
66-34	29825-29829	also	
66-35	29830-29833	use	
66-36	29834-29837	the	
66-37	29838-29847	federated	
66-38	29848-29853	query	
66-39	29854-29861	feature	
66-40	29862-29864	to	
66-41	29865-29873	simplify	
66-42	29874-29877	the	
66-43	29878-29881	ETL	
66-44	29882-29885	and	
66-45	29886-29900	data-ingestion	
66-46	29901-29908	process	
66-47	29908-29909	.	
66-48	29910-29917	Instead	
66-49	29918-29920	of	
66-50	29921-29928	staging	
66-51	29929-29933	data	
66-52	29934-29936	on	
66-53	29937-29943	Amazon	
66-54	29944-29946	S3	
66-55	29946-29947	,	
66-56	29948-29951	and	
66-57	29952-29962	performing	
66-58	29963-29964	a	
66-59	29965-29969	COPY	
66-60	29970-29979	operation	
66-61	29979-29980	,	
66-62	29981-29990	federated	
66-63	29991-29998	queries	
66-64	29999-30004	allow	
66-65	30005-30008	you	
66-66	30009-30011	to	
66-67	30012-30018	ingest	
66-68	30019-30023	data	
66-69	30024-30032	directly	
66-70	30033-30037	into	
66-71	30038-30040	an	
66-72	30041-30047	Amazon	
66-73	30048-30056	Redshift	
66-74	30057-30062	table	
66-75	30063-30065	in	
66-76	30066-30069	one	
66-77	30070-30074	step	
66-78	30074-30075	,	
66-79	30076-30078	as	
66-80	30079-30083	part	
66-81	30084-30086	of	
66-82	30087-30088	a	
66-83	30089-30098	federated	
66-84	30099-30103	CTAS	
66-85	30103-30104	/	
66-86	30104-30110	INSERT	
66-87	30111-30114	SQL	
66-88	30115-30120	query	
66-89	30120-30121	.	
66-90	30122-30125	For	
66-91	30126-30133	example	
66-92	30133-30134	,	
66-93	30135-30138	the	
66-94	30139-30148	following	
66-95	30149-30153	code	
66-96	30154-30159	shows	
66-97	30160-30162	an	
66-98	30163-30169	upsert	
66-99	30169-30170	/	
66-100	30170-30175	merge	
66-101	30176-30185	operation	
66-102	30186-30188	in	
66-103	30189-30194	which	
66-104	30195-30198	the	
66-105	30199-30203	COPY	
66-106	30204-30213	operation	
66-107	30214-30218	from	
66-108	30219-30225	Amazon	
66-109	30226-30228	S3	
66-110	30229-30231	to	
66-111	30232-30238	Amazon	
66-112	30239-30247	Redshift	
66-113	30248-30250	is	
66-114	30251-30259	replaced	
66-115	30260-30264	with	
66-116	30265-30266	a	
66-117	30267-30276	federated	
66-118	30277-30282	query	
66-119	30283-30290	sourced	
66-120	30291-30299	directly	
66-121	30300-30304	from	
66-122	30305-30315	PostgreSQL	
66-123	30315-30316	:	
66-124	30317-30322	BEGIN	
66-125	30322-30323	;	

#Text=CREATE TEMP TABLE staging (LIKE ods.store_sales); -- replace the following COPY from S3: /*COPY staging FROM 's3://yourETLbucket/daily_store_sales/' IAM_ROLE 'arn:aws:iam::<account_id>:role/<s3_reader_role>'
67-1	30324-30330	CREATE	
67-2	30331-30335	TEMP	
67-3	30336-30341	TABLE	
67-4	30342-30349	staging	
67-5	30350-30351	(	
67-6	30351-30355	LIKE	
67-7	30356-30371	ods.store_sales	
67-8	30371-30372	)	
67-9	30372-30373	;	
67-10	30374-30375	-	
67-11	30375-30376	-	
67-12	30377-30384	replace	
67-13	30385-30388	the	
67-14	30389-30398	following	
67-15	30399-30403	COPY	
67-16	30404-30408	from	
67-17	30409-30411	S3	
67-18	30411-30412	:	
67-19	30413-30414	/	
67-20	30414-30415	*	
67-21	30415-30419	COPY	
67-22	30420-30427	staging	
67-23	30428-30432	FROM	
67-24	30433-30434	'	
67-25	30434-30436	s3	
67-26	30436-30437	:	
67-27	30437-30438	/	
67-28	30438-30439	/	
67-29	30439-30452	yourETLbucket	
67-30	30452-30453	/	
67-31	30453-30470	daily_store_sales	
67-32	30470-30471	/	
67-33	30471-30472	'	
67-34	30473-30481	IAM_ROLE	
67-35	30482-30483	'	
67-36	30483-30486	arn	
67-37	30486-30487	:	
67-38	30487-30490	aws	
67-39	30490-30491	:	
67-40	30491-30494	iam	
67-41	30494-30495	:	
67-42	30495-30496	:	
67-43	30496-30497	<	
67-44	30497-30507	account_id	
67-45	30507-30508	>	
67-46	30508-30509	:	
67-47	30509-30513	role	
67-48	30513-30514	/	
67-49	30514-30515	<	
67-50	30515-30517	s3	
67-51	30517-30518	_	
67-52	30518-30529	reader_role	
67-53	30529-30530	>	
67-54	30530-30531	'	

#Text=DELIMITER '|' COMPUPDATE OFF; */ -- with this federated query to load staging data directly from PostgreSQL source INSERT INTO staging SELECT * FROM pg.store_sales p WHERE p.last_updated_date > (SELECT MAX(last_updated_date) FROM ods.store_sales);
68-1	30532-30541	DELIMITER	
68-2	30542-30543	'	
68-3	30543-30544	|	
68-4	30544-30545	'	
68-5	30546-30556	COMPUPDATE	
68-6	30557-30560	OFF	
68-7	30560-30561	;	
68-8	30562-30563	*	
68-9	30563-30564	/	
68-10	30565-30566	-	
68-11	30566-30567	-	
68-12	30568-30572	with	
68-13	30573-30577	this	
68-14	30578-30587	federated	
68-15	30588-30593	query	
68-16	30594-30596	to	
68-17	30597-30601	load	
68-18	30602-30609	staging	
68-19	30610-30614	data	
68-20	30615-30623	directly	
68-21	30624-30628	from	
68-22	30629-30639	PostgreSQL	
68-23	30640-30646	source	
68-24	30647-30653	INSERT	
68-25	30654-30658	INTO	
68-26	30659-30666	staging	
68-27	30667-30673	SELECT	
68-28	30674-30675	*	
68-29	30676-30680	FROM	
68-30	30681-30695	pg.store_sales	
68-31	30696-30697	p	
68-32	30698-30703	WHERE	
68-33	30704-30723	p.last_updated_date	
68-34	30724-30725	>	
68-35	30726-30727	(	
68-36	30727-30733	SELECT	
68-37	30734-30737	MAX	
68-38	30737-30738	(	
68-39	30738-30755	last_updated_date	
68-40	30755-30756	)	
68-41	30757-30761	FROM	
68-42	30762-30777	ods.store_sales	
68-43	30777-30778	)	
68-44	30778-30779	;	

#Text=DELETE FROM ods.store_sales USING staging s WHERE ods.store_sales.id = s.id; INSERT INTO ods.store_sales SELECT * FROM staging; DROP TABLE staging; COMMIT;
69-1	30780-30786	DELETE	
69-2	30787-30791	FROM	
69-3	30792-30807	ods.store_sales	
69-4	30808-30813	USING	
69-5	30814-30821	staging	
69-6	30822-30823	s	
69-7	30824-30829	WHERE	
69-8	30830-30848	ods.store_sales.id	
69-9	30849-30850	=	
69-10	30851-30855	s.id	
69-11	30855-30856	;	
69-12	30857-30863	INSERT	
69-13	30864-30868	INTO	
69-14	30869-30884	ods.store_sales	
69-15	30885-30891	SELECT	
69-16	30892-30893	*	
69-17	30894-30898	FROM	
69-18	30899-30906	staging	
69-19	30906-30907	;	
69-20	30908-30912	DROP	
69-21	30913-30918	TABLE	
69-22	30919-30926	staging	
69-23	30926-30927	;	
69-24	30928-30934	COMMIT	
69-25	30934-30935	;	

#Text=For more information about setting up the preceding federated queries, see Build a Simplified ETL and Live Data Query Solution using Redshift Federated Query. For additional tips and best practices on federated queries, see Best practices for Amazon Redshift Federated Query. Tip #9: Maintaining efficient data loads Amazon Redshift best practices suggest using the COPY command to perform data loads of file-based data. Single-row INSERTs are an anti-pattern. The COPY operation uses all the compute nodes in your cluster to load data in parallel, from sources such as Amazon S3, Amazon DynamoDB, Amazon EMR HDFS file systems, or any SSH connection.
70-1	30936-30939	For	
70-2	30940-30944	more	
70-3	30945-30956	information	
70-4	30957-30962	about	
70-5	30963-30970	setting	
70-6	30971-30973	up	
70-7	30974-30977	the	
70-8	30978-30987	preceding	
70-9	30988-30997	federated	
70-10	30998-31005	queries	
70-11	31005-31006	,	
70-12	31007-31010	see	
70-13	31011-31016	Build	
70-14	31017-31018	a	
70-15	31019-31029	Simplified	
70-16	31030-31033	ETL	
70-17	31034-31037	and	
70-18	31038-31042	Live	
70-19	31043-31047	Data	
70-20	31048-31053	Query	
70-21	31054-31062	Solution	
70-22	31063-31068	using	
70-23	31069-31077	Redshift	
70-24	31078-31087	Federated	
70-25	31088-31093	Query	
70-26	31093-31094	.	
70-27	31095-31098	For	
70-28	31099-31109	additional	
70-29	31110-31114	tips	
70-30	31115-31118	and	
70-31	31119-31123	best	
70-32	31124-31133	practices	
70-33	31134-31136	on	
70-34	31137-31146	federated	
70-35	31147-31154	queries	
70-36	31154-31155	,	
70-37	31156-31159	see	
70-38	31160-31164	Best	
70-39	31165-31174	practices	
70-40	31175-31178	for	
70-41	31179-31185	Amazon	
70-42	31186-31194	Redshift	
70-43	31195-31204	Federated	
70-44	31205-31210	Query	
70-45	31210-31211	.	
70-46	31212-31215	Tip	
70-47	31216-31218	#9	
70-48	31218-31219	:	
70-49	31220-31231	Maintaining	
70-50	31232-31241	efficient	
70-51	31242-31246	data	
70-52	31247-31252	loads	
70-53	31253-31259	Amazon	
70-54	31260-31268	Redshift	
70-55	31269-31273	best	
70-56	31274-31283	practices	
70-57	31284-31291	suggest	
70-58	31292-31297	using	
70-59	31298-31301	the	
70-60	31302-31306	COPY	
70-61	31307-31314	command	
70-62	31315-31317	to	
70-63	31318-31325	perform	
70-64	31326-31330	data	
70-65	31331-31336	loads	
70-66	31337-31339	of	
70-67	31340-31350	file-based	
70-68	31351-31355	data	
70-69	31355-31356	.	
70-70	31357-31367	Single-row	
70-71	31368-31375	INSERTs	
70-72	31376-31379	are	
70-73	31380-31382	an	
70-74	31383-31395	anti-pattern	
70-75	31395-31396	.	
70-76	31397-31400	The	
70-77	31401-31405	COPY	
70-78	31406-31415	operation	
70-79	31416-31420	uses	
70-80	31421-31424	all	
70-81	31425-31428	the	
70-82	31429-31436	compute	
70-83	31437-31442	nodes	
70-84	31443-31445	in	
70-85	31446-31450	your	
70-86	31451-31458	cluster	
70-87	31459-31461	to	
70-88	31462-31466	load	
70-89	31467-31471	data	
70-90	31472-31474	in	
70-91	31475-31483	parallel	
70-92	31483-31484	,	
70-93	31485-31489	from	
70-94	31490-31497	sources	
70-95	31498-31502	such	
70-96	31503-31505	as	
70-97	31506-31512	Amazon	
70-98	31513-31515	S3	
70-99	31515-31516	,	
70-100	31517-31523	Amazon	
70-101	31524-31532	DynamoDB	
70-102	31532-31533	,	
70-103	31534-31540	Amazon	
70-104	31541-31544	EMR	
70-105	31545-31549	HDFS	
70-106	31550-31554	file	
70-107	31555-31562	systems	
70-108	31562-31563	,	
70-109	31564-31566	or	
70-110	31567-31570	any	
70-111	31571-31574	SSH	
70-112	31575-31585	connection	
70-113	31585-31586	.	

#Text=When performing data loads, compress the data files whenever possible. For row-oriented (CSV) data, Amazon Redshift supports both GZIP and LZO compression. It’s more efficient to load a large number of small files than one large one, and the ideal file count is a multiple of the cluster’s total slice count. Columnar data, such as Parquet and ORC, is also supported. You can achieve best performance when the compressed files are between 1MB-1GB each. The number of slices per node depends on the cluster’s node size (and potentially elastic resize history). By ensuring an equal number of files per slice, you know that the COPY command evenly uses cluster resources and complete as quickly as possible. Query for the cluster’s current slice count with SELECT COUNT(*) AS number_of_slices FROM stv_slices;.
71-1	31587-31591	When	
71-2	31592-31602	performing	
71-3	31603-31607	data	
71-4	31608-31613	loads	
71-5	31613-31614	,	
71-6	31615-31623	compress	
71-7	31624-31627	the	
71-8	31628-31632	data	
71-9	31633-31638	files	
71-10	31639-31647	whenever	
71-11	31648-31656	possible	
71-12	31656-31657	.	
71-13	31658-31661	For	
71-14	31662-31674	row-oriented	
71-15	31675-31676	(	
71-16	31676-31679	CSV	
71-17	31679-31680	)	
71-18	31681-31685	data	
71-19	31685-31686	,	
71-20	31687-31693	Amazon	
71-21	31694-31702	Redshift	
71-22	31703-31711	supports	
71-23	31712-31716	both	
71-24	31717-31721	GZIP	
71-25	31722-31725	and	
71-26	31726-31729	LZO	
71-27	31730-31741	compression	
71-28	31741-31742	.	
71-29	31743-31745	It	
71-30	31745-31746	’	
71-31	31746-31747	s	
71-32	31748-31752	more	
71-33	31753-31762	efficient	
71-34	31763-31765	to	
71-35	31766-31770	load	
71-36	31771-31772	a	
71-37	31773-31778	large	
71-38	31779-31785	number	
71-39	31786-31788	of	
71-40	31789-31794	small	
71-41	31795-31800	files	
71-42	31801-31805	than	
71-43	31806-31809	one	
71-44	31810-31815	large	
71-45	31816-31819	one	
71-46	31819-31820	,	
71-47	31821-31824	and	
71-48	31825-31828	the	
71-49	31829-31834	ideal	
71-50	31835-31839	file	
71-51	31840-31845	count	
71-52	31846-31848	is	
71-53	31849-31850	a	
71-54	31851-31859	multiple	
71-55	31860-31862	of	
71-56	31863-31866	the	
71-57	31867-31874	cluster	
71-58	31874-31875	’	
71-59	31875-31876	s	
71-60	31877-31882	total	
71-61	31883-31888	slice	
71-62	31889-31894	count	
71-63	31894-31895	.	
71-64	31896-31904	Columnar	
71-65	31905-31909	data	
71-66	31909-31910	,	
71-67	31911-31915	such	
71-68	31916-31918	as	
71-69	31919-31926	Parquet	
71-70	31927-31930	and	
71-71	31931-31934	ORC	
71-72	31934-31935	,	
71-73	31936-31938	is	
71-74	31939-31943	also	
71-75	31944-31953	supported	
71-76	31953-31954	.	
71-77	31955-31958	You	
71-78	31959-31962	can	
71-79	31963-31970	achieve	
71-80	31971-31975	best	
71-81	31976-31987	performance	
71-82	31988-31992	when	
71-83	31993-31996	the	
71-84	31997-32007	compressed	
71-85	32008-32013	files	
71-86	32014-32017	are	
71-87	32018-32025	between	
71-88	32026-32029	1MB	
71-89	32029-32030	-	
71-90	32030-32033	1GB	
71-91	32034-32038	each	
71-92	32038-32039	.	
71-93	32040-32043	The	
71-94	32044-32050	number	
71-95	32051-32053	of	
71-96	32054-32060	slices	
71-97	32061-32064	per	
71-98	32065-32069	node	
71-99	32070-32077	depends	
71-100	32078-32080	on	
71-101	32081-32084	the	
71-102	32085-32092	cluster	
71-103	32092-32093	’	
71-104	32093-32094	s	
71-105	32095-32099	node	
71-106	32100-32104	size	
71-107	32105-32106	(	
71-108	32106-32109	and	
71-109	32110-32121	potentially	
71-110	32122-32129	elastic	
71-111	32130-32136	resize	
71-112	32137-32144	history	
71-113	32144-32145	)	
71-114	32145-32146	.	
71-115	32147-32149	By	
71-116	32150-32158	ensuring	
71-117	32159-32161	an	
71-118	32162-32167	equal	
71-119	32168-32174	number	
71-120	32175-32177	of	
71-121	32178-32183	files	
71-122	32184-32187	per	
71-123	32188-32193	slice	
71-124	32193-32194	,	
71-125	32195-32198	you	
71-126	32199-32203	know	
71-127	32204-32208	that	
71-128	32209-32212	the	
71-129	32213-32217	COPY	
71-130	32218-32225	command	
71-131	32226-32232	evenly	
71-132	32233-32237	uses	
71-133	32238-32245	cluster	
71-134	32246-32255	resources	
71-135	32256-32259	and	
71-136	32260-32268	complete	
71-137	32269-32271	as	
71-138	32272-32279	quickly	
71-139	32280-32282	as	
71-140	32283-32291	possible	
71-141	32291-32292	.	
71-142	32293-32298	Query	
71-143	32299-32302	for	
71-144	32303-32306	the	
71-145	32307-32314	cluster	
71-146	32314-32315	’	
71-147	32315-32316	s	
71-148	32317-32324	current	
71-149	32325-32330	slice	
71-150	32331-32336	count	
71-151	32337-32341	with	
71-152	32342-32348	SELECT	
71-153	32349-32354	COUNT	
71-154	32354-32355	(	
71-155	32355-32356	*	
71-156	32356-32357	)	
71-157	32358-32360	AS	
71-158	32361-32377	number_of_slices	
71-159	32378-32382	FROM	
71-160	32383-32393	stv_slices	
71-161	32393-32394	;	
71-162	32394-32395	.	

#Text=Another script in the amazon-redshift-utils GitHub repo, CopyPerformance, calculates statistics for each load. Amazon Redshift Advisor also warns of missing compression or too few files based on the number of slices (see the following screenshot): Conducting COPY operations efficiently reduces the time to results for downstream users, and minimizes the cluster resources utilized to perform the load. Tip #10: Using the latest Amazon Redshift drivers from AWS
72-1	32396-32403	Another	
72-2	32404-32410	script	
72-3	32411-32413	in	
72-4	32414-32417	the	
72-5	32418-32439	amazon-redshift-utils	
72-6	32440-32446	GitHub	
72-7	32447-32451	repo	
72-8	32451-32452	,	
72-9	32453-32468	CopyPerformance	
72-10	32468-32469	,	
72-11	32469-32470	 	
72-12	32470-32480	calculates	
72-13	32481-32491	statistics	
72-14	32492-32495	for	
72-15	32496-32500	each	
72-16	32501-32505	load	
72-17	32505-32506	.	
72-18	32507-32513	Amazon	
72-19	32514-32522	Redshift	
72-20	32523-32530	Advisor	
72-21	32531-32535	also	
72-22	32536-32541	warns	
72-23	32542-32544	of	
72-24	32545-32552	missing	
72-25	32553-32564	compression	
72-26	32565-32567	or	
72-27	32568-32571	too	
72-28	32572-32575	few	
72-29	32576-32581	files	
72-30	32582-32587	based	
72-31	32588-32590	on	
72-32	32591-32594	the	
72-33	32595-32601	number	
72-34	32602-32604	of	
72-35	32605-32611	slices	
72-36	32612-32613	(	
72-37	32613-32616	see	
72-38	32617-32620	the	
72-39	32621-32630	following	
72-40	32631-32641	screenshot	
72-41	32641-32642	)	
72-42	32642-32643	:	
72-43	32644-32654	Conducting	
72-44	32655-32659	COPY	
72-45	32660-32670	operations	
72-46	32671-32682	efficiently	
72-47	32683-32690	reduces	
72-48	32691-32694	the	
72-49	32695-32699	time	
72-50	32700-32702	to	
72-51	32703-32710	results	
72-52	32711-32714	for	
72-53	32715-32725	downstream	
72-54	32726-32731	users	
72-55	32731-32732	,	
72-56	32733-32736	and	
72-57	32737-32746	minimizes	
72-58	32747-32750	the	
72-59	32751-32758	cluster	
72-60	32759-32768	resources	
72-61	32769-32777	utilized	
72-62	32778-32780	to	
72-63	32781-32788	perform	
72-64	32789-32792	the	
72-65	32793-32797	load	
72-66	32797-32798	.	
72-67	32799-32802	Tip	
72-68	32803-32806	#10	
72-69	32806-32807	:	
72-70	32808-32813	Using	
72-71	32814-32817	the	
72-72	32818-32824	latest	
72-73	32825-32831	Amazon	
72-74	32832-32840	Redshift	
72-75	32841-32848	drivers	
72-76	32849-32853	from	
72-77	32854-32857	AWS	

#Text=Because Amazon Redshift is based on PostgreSQL, we previously recommended using JDBC4 PostgreSQL driver version 8.4.703 and psql ODBC version 9.x drivers. If you’re currently using those drivers, we recommend moving to the new Amazon Redshift–specific drivers. For more information about drivers and configuring connections, see JDBC and ODBC drivers for Amazon Redshift in the Amazon Redshift Cluster Management Guide. While rarely necessary, the Amazon Redshift drivers do permit some parameter tuning that may be useful in some circumstances. Downstream third-party applications often have their own best practices for driver tuning that may lead to additional performance gains. For JDBC, consider the following:
73-1	32858-32865	Because	
73-2	32866-32872	Amazon	
73-3	32873-32881	Redshift	
73-4	32882-32884	is	
73-5	32885-32890	based	
73-6	32891-32893	on	
73-7	32894-32904	PostgreSQL	
73-8	32904-32905	,	
73-9	32906-32908	we	
73-10	32909-32919	previously	
73-11	32920-32931	recommended	
73-12	32932-32937	using	
73-13	32938-32943	JDBC4	
73-14	32944-32954	PostgreSQL	
73-15	32955-32961	driver	
73-16	32962-32969	version	
73-17	32970-32977	8.4.703	
73-18	32978-32981	and	
73-19	32982-32986	psql	
73-20	32987-32991	ODBC	
73-21	32992-32999	version	
73-22	33000-33001	9	
73-23	33001-33002	.	
73-24	33002-33003	x	
73-25	33004-33011	drivers	
73-26	33011-33012	.	
73-27	33013-33015	If	
73-28	33016-33019	you	
73-29	33019-33020	’	
73-30	33020-33022	re	
73-31	33023-33032	currently	
73-32	33033-33038	using	
73-33	33039-33044	those	
73-34	33045-33052	drivers	
73-35	33052-33053	,	
73-36	33054-33056	we	
73-37	33057-33066	recommend	
73-38	33067-33073	moving	
73-39	33074-33076	to	
73-40	33077-33080	the	
73-41	33081-33084	new	
73-42	33085-33091	Amazon	
73-43	33092-33109	Redshift–specific	
73-44	33110-33117	drivers	
73-45	33117-33118	.	
73-46	33119-33122	For	
73-47	33123-33127	more	
73-48	33128-33139	information	
73-49	33140-33145	about	
73-50	33146-33153	drivers	
73-51	33154-33157	and	
73-52	33158-33169	configuring	
73-53	33170-33181	connections	
73-54	33181-33182	,	
73-55	33183-33186	see	
73-56	33187-33191	JDBC	
73-57	33192-33195	and	
73-58	33196-33200	ODBC	
73-59	33201-33208	drivers	
73-60	33209-33212	for	
73-61	33213-33219	Amazon	
73-62	33220-33228	Redshift	
73-63	33229-33231	in	
73-64	33232-33235	the	
73-65	33236-33242	Amazon	
73-66	33243-33251	Redshift	
73-67	33252-33259	Cluster	
73-68	33260-33270	Management	
73-69	33271-33276	Guide	
73-70	33276-33277	.	
73-71	33278-33283	While	
73-72	33284-33290	rarely	
73-73	33291-33300	necessary	
73-74	33300-33301	,	
73-75	33302-33305	the	
73-76	33306-33312	Amazon	
73-77	33313-33321	Redshift	
73-78	33322-33329	drivers	
73-79	33330-33332	do	
73-80	33333-33339	permit	
73-81	33340-33344	some	
73-82	33345-33354	parameter	
73-83	33355-33361	tuning	
73-84	33362-33366	that	
73-85	33367-33370	may	
73-86	33371-33373	be	
73-87	33374-33380	useful	
73-88	33381-33383	in	
73-89	33384-33388	some	
73-90	33389-33402	circumstances	
73-91	33402-33403	.	
73-92	33404-33414	Downstream	
73-93	33415-33426	third-party	
73-94	33427-33439	applications	
73-95	33440-33445	often	
73-96	33446-33450	have	
73-97	33451-33456	their	
73-98	33457-33460	own	
73-99	33461-33465	best	
73-100	33466-33475	practices	
73-101	33476-33479	for	
73-102	33480-33486	driver	
73-103	33487-33493	tuning	
73-104	33494-33498	that	
73-105	33499-33502	may	
73-106	33503-33507	lead	
73-107	33508-33510	to	
73-108	33511-33521	additional	
73-109	33522-33533	performance	
73-110	33534-33539	gains	
73-111	33539-33540	.	
73-112	33541-33544	For	
73-113	33545-33549	JDBC	
73-114	33549-33550	,	
73-115	33551-33559	consider	
73-116	33560-33563	the	
73-117	33564-33573	following	
73-118	33573-33574	:	

#Text=To avoid client-side out-of-memory errors when retrieving large data sets using JDBC, you can enable your client to fetch data in batches by setting the JDBC fetch size parameter or BlockingRowsMode. Amazon Redshift doesn’t recognize the JDBC maxRows parameter. Instead, specify a LIMIT clause to restrict the result set. You can also use an OFFSET clause to skip to a specific starting point in the result set. For ODBC, consider the following:
74-1	33575-33577	To	
74-2	33578-33583	avoid	
74-3	33584-33595	client-side	
74-4	33596-33609	out-of-memory	
74-5	33610-33616	errors	
74-6	33617-33621	when	
74-7	33622-33632	retrieving	
74-8	33633-33638	large	
74-9	33639-33643	data	
74-10	33644-33648	sets	
74-11	33649-33654	using	
74-12	33655-33659	JDBC	
74-13	33659-33660	,	
74-14	33661-33664	you	
74-15	33665-33668	can	
74-16	33669-33675	enable	
74-17	33676-33680	your	
74-18	33681-33687	client	
74-19	33688-33690	to	
74-20	33691-33696	fetch	
74-21	33697-33701	data	
74-22	33702-33704	in	
74-23	33705-33712	batches	
74-24	33713-33715	by	
74-25	33716-33723	setting	
74-26	33724-33727	the	
74-27	33728-33732	JDBC	
74-28	33733-33738	fetch	
74-29	33739-33743	size	
74-30	33744-33753	parameter	
74-31	33754-33756	or	
74-32	33757-33773	BlockingRowsMode	
74-33	33773-33774	.	
74-34	33775-33781	Amazon	
74-35	33782-33790	Redshift	
74-36	33791-33796	doesn	
74-37	33796-33797	’	
74-38	33797-33798	t	
74-39	33799-33808	recognize	
74-40	33809-33812	the	
74-41	33813-33817	JDBC	
74-42	33818-33825	maxRows	
74-43	33826-33835	parameter	
74-44	33835-33836	.	
74-45	33837-33844	Instead	
74-46	33844-33845	,	
74-47	33846-33853	specify	
74-48	33854-33855	a	
74-49	33856-33861	LIMIT	
74-50	33862-33868	clause	
74-51	33869-33871	to	
74-52	33872-33880	restrict	
74-53	33881-33884	the	
74-54	33885-33891	result	
74-55	33892-33895	set	
74-56	33895-33896	.	
74-57	33897-33900	You	
74-58	33901-33904	can	
74-59	33905-33909	also	
74-60	33910-33913	use	
74-61	33914-33916	an	
74-62	33917-33923	OFFSET	
74-63	33924-33930	clause	
74-64	33931-33933	to	
74-65	33934-33938	skip	
74-66	33939-33941	to	
74-67	33942-33943	a	
74-68	33944-33952	specific	
74-69	33953-33961	starting	
74-70	33962-33967	point	
74-71	33968-33970	in	
74-72	33971-33974	the	
74-73	33975-33981	result	
74-74	33982-33985	set	
74-75	33985-33986	.	
74-76	33987-33990	For	
74-77	33991-33995	ODBC	
74-78	33995-33996	,	
74-79	33997-34005	consider	
74-80	34006-34009	the	
74-81	34010-34019	following	
74-82	34019-34020	:	

#Text=A cursor is enabled on the cluster’s leader node when useDelareFecth is enabled. The cursor fetches up to fetchsize/cursorsize and then waits to fetch more rows when the application request more rows. The CURSOR command is an explicit directive that the application uses to manipulate cursor behavior on the leader node. Unlike the JDBC driver, the ODBC driver doesn’t have a BlockingRowsMode mechanism.
75-1	34021-34022	A	
75-2	34023-34029	cursor	
75-3	34030-34032	is	
75-4	34033-34040	enabled	
75-5	34041-34043	on	
75-6	34044-34047	the	
75-7	34048-34055	cluster	
75-8	34055-34056	’	
75-9	34056-34057	s	
75-10	34058-34064	leader	
75-11	34065-34069	node	
75-12	34070-34074	when	
75-13	34075-34089	useDelareFecth	
75-14	34090-34092	is	
75-15	34093-34100	enabled	
75-16	34100-34101	.	
75-17	34102-34105	The	
75-18	34106-34112	cursor	
75-19	34113-34120	fetches	
75-20	34121-34123	up	
75-21	34124-34126	to	
75-22	34127-34136	fetchsize	
75-23	34136-34137	/	
75-24	34137-34147	cursorsize	
75-25	34148-34151	and	
75-26	34152-34156	then	
75-27	34157-34162	waits	
75-28	34163-34165	to	
75-29	34166-34171	fetch	
75-30	34172-34176	more	
75-31	34177-34181	rows	
75-32	34182-34186	when	
75-33	34187-34190	the	
75-34	34190-34191	 	
75-35	34191-34202	application	
75-36	34203-34210	request	
75-37	34211-34215	more	
75-38	34216-34220	rows	
75-39	34220-34221	.	
75-40	34222-34225	The	
75-41	34226-34232	CURSOR	
75-42	34233-34240	command	
75-43	34241-34243	is	
75-44	34244-34246	an	
75-45	34247-34255	explicit	
75-46	34256-34265	directive	
75-47	34266-34270	that	
75-48	34271-34274	the	
75-49	34275-34286	application	
75-50	34287-34291	uses	
75-51	34292-34294	to	
75-52	34295-34305	manipulate	
75-53	34306-34312	cursor	
75-54	34313-34321	behavior	
75-55	34322-34324	on	
75-56	34325-34328	the	
75-57	34329-34335	leader	
75-58	34336-34340	node	
75-59	34340-34341	.	
75-60	34342-34348	Unlike	
75-61	34349-34352	the	
75-62	34353-34357	JDBC	
75-63	34358-34364	driver	
75-64	34364-34365	,	
75-65	34366-34369	the	
75-66	34370-34374	ODBC	
75-67	34375-34381	driver	
75-68	34382-34387	doesn	
75-69	34387-34388	’	
75-70	34388-34389	t	
75-71	34390-34394	have	
75-72	34395-34396	a	
75-73	34397-34413	BlockingRowsMode	
75-74	34414-34423	mechanism	
75-75	34423-34424	.	

#Text=It’s recommended that you do not undertake driver tuning unless you have a clear need. AWS Support is available to help on this topic as well. Conclusion Amazon Redshift is a powerful, fully managed data warehouse that can offer increased performance and lower cost in the cloud. As Amazon Redshift grows based on the feedback from its tens of thousands of active customers world-wide, it continues to become easier to use and extend its price-for-performance value proposition. Staying abreast of these improvements can help you get more value (with less effort) from this core AWS service.
76-1	34425-34427	It	
76-2	34427-34428	’	
76-3	34428-34429	s	
76-4	34430-34441	recommended	
76-5	34442-34446	that	
76-6	34447-34450	you	
76-7	34451-34453	do	
76-8	34454-34457	not	
76-9	34458-34467	undertake	
76-10	34468-34474	driver	
76-11	34475-34481	tuning	
76-12	34482-34488	unless	
76-13	34489-34492	you	
76-14	34493-34497	have	
76-15	34498-34499	a	
76-16	34500-34505	clear	
76-17	34506-34510	need	
76-18	34510-34511	.	
76-19	34512-34515	AWS	
76-20	34516-34523	Support	
76-21	34524-34526	is	
76-22	34527-34536	available	
76-23	34537-34539	to	
76-24	34540-34544	help	
76-25	34545-34547	on	
76-26	34548-34552	this	
76-27	34553-34558	topic	
76-28	34559-34561	as	
76-29	34562-34566	well	
76-30	34566-34567	.	
76-31	34568-34578	Conclusion	
76-32	34579-34585	Amazon	
76-33	34586-34594	Redshift	
76-34	34595-34597	is	
76-35	34598-34599	a	
76-36	34600-34608	powerful	
76-37	34608-34609	,	
76-38	34610-34615	fully	
76-39	34616-34623	managed	
76-40	34624-34628	data	
76-41	34629-34638	warehouse	
76-42	34639-34643	that	
76-43	34644-34647	can	
76-44	34648-34653	offer	
76-45	34654-34663	increased	
76-46	34664-34675	performance	
76-47	34676-34679	and	
76-48	34680-34685	lower	
76-49	34686-34690	cost	
76-50	34691-34693	in	
76-51	34694-34697	the	
76-52	34698-34703	cloud	
76-53	34703-34704	.	
76-54	34705-34707	As	
76-55	34708-34714	Amazon	
76-56	34715-34723	Redshift	
76-57	34724-34729	grows	
76-58	34730-34735	based	
76-59	34736-34738	on	
76-60	34739-34742	the	
76-61	34743-34751	feedback	
76-62	34752-34756	from	
76-63	34757-34760	its	
76-64	34761-34765	tens	
76-65	34766-34768	of	
76-66	34769-34778	thousands	
76-67	34779-34781	of	
76-68	34782-34788	active	
76-69	34789-34798	customers	
76-70	34799-34809	world-wide	
76-71	34809-34810	,	
76-72	34811-34813	it	
76-73	34814-34823	continues	
76-74	34824-34826	to	
76-75	34827-34833	become	
76-76	34834-34840	easier	
76-77	34841-34843	to	
76-78	34844-34847	use	
76-79	34848-34851	and	
76-80	34852-34858	extend	
76-81	34859-34862	its	
76-82	34863-34884	price-for-performance	
76-83	34885-34890	value	
76-84	34891-34902	proposition	
76-85	34902-34903	.	
76-86	34904-34911	Staying	
76-87	34912-34919	abreast	
76-88	34920-34922	of	
76-89	34923-34928	these	
76-90	34929-34941	improvements	
76-91	34942-34945	can	
76-92	34946-34950	help	
76-93	34951-34954	you	
76-94	34955-34958	get	
76-95	34959-34963	more	
76-96	34964-34969	value	
76-97	34970-34971	(	
76-98	34971-34975	with	
76-99	34976-34980	less	
76-100	34981-34987	effort	
76-101	34987-34988	)	
76-102	34989-34993	from	
76-103	34994-34998	this	
76-104	34999-35003	core	
76-105	35004-35007	AWS	
76-106	35008-35015	service	
76-107	35015-35016	.	

#Text=We hope you learned a great deal about making the most of your Amazon Redshift account with the resources in this post. If you have questions or suggestions, please leave a comment. About the Authors Matt Scaer is a Principal Data Warehousing Specialist Solution Architect, with over 20 years of data warehousing experience, with 11+ years at both AWS and Amazon.com.
77-1	35017-35019	We	
77-2	35020-35024	hope	
77-3	35025-35028	you	
77-4	35029-35036	learned	
77-5	35037-35038	a	
77-6	35039-35044	great	
77-7	35045-35049	deal	
77-8	35050-35055	about	
77-9	35056-35062	making	
77-10	35063-35066	the	
77-11	35067-35071	most	
77-12	35072-35074	of	
77-13	35075-35079	your	
77-14	35080-35086	Amazon	
77-15	35087-35095	Redshift	
77-16	35096-35103	account	
77-17	35104-35108	with	
77-18	35109-35112	the	
77-19	35113-35122	resources	
77-20	35123-35125	in	
77-21	35126-35130	this	
77-22	35131-35135	post	
77-23	35135-35136	.	
77-24	35137-35139	If	
77-25	35140-35143	you	
77-26	35144-35148	have	
77-27	35149-35158	questions	
77-28	35159-35161	or	
77-29	35162-35173	suggestions	
77-30	35173-35174	,	
77-31	35175-35181	please	
77-32	35182-35187	leave	
77-33	35188-35189	a	
77-34	35190-35197	comment	
77-35	35197-35198	.	
77-36	35199-35204	About	
77-37	35205-35208	the	
77-38	35209-35216	Authors	
77-39	35217-35221	Matt	
77-40	35222-35227	Scaer	
77-41	35228-35230	is	
77-42	35231-35232	a	
77-43	35233-35242	Principal	
77-44	35243-35247	Data	
77-45	35248-35259	Warehousing	
77-46	35260-35270	Specialist	
77-47	35271-35279	Solution	
77-48	35280-35289	Architect	
77-49	35289-35290	,	
77-50	35291-35295	with	
77-51	35296-35300	over	
77-52	35301-35303	20	
77-53	35304-35309	years	
77-54	35310-35312	of	
77-55	35313-35317	data	
77-56	35318-35329	warehousing	
77-57	35330-35340	experience	
77-58	35340-35341	,	
77-59	35342-35346	with	
77-60	35347-35349	11	
77-61	35349-35350	+	
77-62	35351-35356	years	
77-63	35357-35359	at	
77-64	35360-35364	both	
77-65	35365-35368	AWS	
77-66	35369-35372	and	
77-67	35373-35383	Amazon.com	
77-68	35383-35384	.	

#Text=Manish Vazirani is an Analytics Specialist Solutions Architect at Amazon Web Services. Tarun Chaudhary is an Analytics Specialist Solutions Architect at AWS. TAGS: Amazon Redshift View Comments Resources Amazon Athena Amazon EMR Amazon Kinesis Amazon MSK Amazon QuickSight
78-1	35385-35391	Manish	
78-2	35392-35400	Vazirani	
78-3	35401-35403	is	
78-4	35404-35406	an	
78-5	35407-35416	Analytics	
78-6	35417-35427	Specialist	
78-7	35428-35437	Solutions	
78-8	35438-35447	Architect	
78-9	35448-35450	at	
78-10	35451-35457	Amazon	
78-11	35458-35461	Web	
78-12	35462-35470	Services	
78-13	35470-35471	.	
78-14	35472-35477	Tarun	
78-15	35478-35487	Chaudhary	
78-16	35488-35490	is	
78-17	35491-35493	an	
78-18	35494-35503	Analytics	
78-19	35504-35514	Specialist	
78-20	35515-35524	Solutions	
78-21	35525-35534	Architect	
78-22	35535-35537	at	
78-23	35538-35541	AWS	
78-24	35541-35542	.	
78-25	35543-35547	TAGS	
78-26	35547-35548	:	
78-27	35549-35555	Amazon	
78-28	35556-35564	Redshift	
78-29	35565-35569	View	
78-30	35570-35578	Comments	
78-31	35579-35588	Resources	
78-32	35589-35595	Amazon	
78-33	35596-35602	Athena	
78-34	35603-35609	Amazon	
78-35	35610-35613	EMR	
78-36	35614-35620	Amazon	
78-37	35621-35628	Kinesis	
78-38	35629-35635	Amazon	
78-39	35636-35639	MSK	
78-40	35640-35646	Amazon	
78-41	35647-35657	QuickSight	

#Text=Amazon Redshift AWS Glue Follow Twitter Facebook LinkedIn Twitch Email Updates Sign In to the Console Learn About AWS What Is AWS? What Is Cloud Computing?
79-1	35658-35664	Amazon	
79-2	35665-35673	Redshift	
79-3	35674-35677	AWS	
79-4	35678-35682	Glue	
79-5	35683-35689	Follow	
79-6	35690-35697	Twitter	
79-7	35698-35706	Facebook	
79-8	35707-35715	LinkedIn	
79-9	35716-35722	Twitch	
79-10	35723-35728	Email	
79-11	35729-35736	Updates	
79-12	35737-35741	Sign	
79-13	35742-35744	In	
79-14	35745-35747	to	
79-15	35748-35751	the	
79-16	35752-35759	Console	
79-17	35760-35765	Learn	
79-18	35766-35771	About	
79-19	35772-35775	AWS	
79-20	35776-35780	What	
79-21	35781-35783	Is	
79-22	35784-35787	AWS	
79-23	35787-35788	?	
79-24	35789-35793	What	
79-25	35794-35796	Is	
79-26	35797-35802	Cloud	
79-27	35803-35812	Computing	
79-28	35812-35813	?	

#Text=AWS Inclusion, Diversity & Equity What Is DevOps? What Is a Container? What Is a Data Lake? AWS Cloud Security What's New Blogs Press Releases Resources for AWS Getting Started Training and Certification
80-1	35814-35817	AWS	
80-2	35818-35827	Inclusion	
80-3	35827-35828	,	
80-4	35829-35838	Diversity	
80-5	35839-35840	&	
80-6	35841-35847	Equity	
80-7	35848-35852	What	
80-8	35853-35855	Is	
80-9	35856-35862	DevOps	
80-10	35862-35863	?	
80-11	35864-35868	What	
80-12	35869-35871	Is	
80-13	35872-35873	a	
80-14	35874-35883	Container	
80-15	35883-35884	?	
80-16	35885-35889	What	
80-17	35890-35892	Is	
80-18	35893-35894	a	
80-19	35895-35899	Data	
80-20	35900-35904	Lake	
80-21	35904-35905	?	
80-22	35906-35909	AWS	
80-23	35910-35915	Cloud	
80-24	35916-35924	Security	
80-25	35925-35931	What's	
80-26	35932-35935	New	
80-27	35936-35941	Blogs	
80-28	35942-35947	Press	
80-29	35948-35956	Releases	
80-30	35957-35966	Resources	
80-31	35967-35970	for	
80-32	35971-35974	AWS	
80-33	35975-35982	Getting	
80-34	35983-35990	Started	
80-35	35991-35999	Training	
80-36	36000-36003	and	
80-37	36004-36017	Certification	

#Text=AWS Solutions Portfolio Architecture Center Product and Technical FAQs Analyst Reports AWS Partner Network Developers on AWS Developer Center SDKs & Tools .NET on AWS Python on AWS Java on AWS
81-1	36018-36021	AWS	
81-2	36022-36031	Solutions	
81-3	36032-36041	Portfolio	
81-4	36042-36054	Architecture	
81-5	36055-36061	Center	
81-6	36062-36069	Product	
81-7	36070-36073	and	
81-8	36074-36083	Technical	
81-9	36084-36088	FAQs	
81-10	36089-36096	Analyst	
81-11	36097-36104	Reports	
81-12	36105-36108	AWS	
81-13	36109-36116	Partner	
81-14	36117-36124	Network	
81-15	36125-36135	Developers	
81-16	36136-36138	on	
81-17	36139-36142	AWS	
81-18	36143-36152	Developer	
81-19	36153-36159	Center	
81-20	36160-36164	SDKs	
81-21	36165-36166	&	
81-22	36167-36172	Tools	
81-23	36173-36174	.	
81-24	36174-36177	NET	
81-25	36178-36180	on	
81-26	36181-36184	AWS	
81-27	36185-36191	Python	
81-28	36192-36194	on	
81-29	36195-36198	AWS	
81-30	36199-36203	Java	
81-31	36204-36206	on	
81-32	36207-36210	AWS	

#Text=PHP on AWS Javascript on AWS Help Contact Us AWS Careers File a Support Ticket Knowledge Center AWS Support Overview Legal Create an AWS Account Amazon is an Equal Opportunity Employer:
82-1	36211-36214	PHP	
82-2	36215-36217	on	
82-3	36218-36221	AWS	
82-4	36222-36232	Javascript	
82-5	36233-36235	on	
82-6	36236-36239	AWS	
82-7	36240-36244	Help	
82-8	36245-36252	Contact	
82-9	36253-36255	Us	
82-10	36256-36259	AWS	
82-11	36260-36267	Careers	
82-12	36268-36272	File	
82-13	36273-36274	a	
82-14	36275-36282	Support	
82-15	36283-36289	Ticket	
82-16	36290-36299	Knowledge	
82-17	36300-36306	Center	
82-18	36307-36310	AWS	
82-19	36311-36318	Support	
82-20	36319-36327	Overview	
82-21	36328-36333	Legal	
82-22	36334-36340	Create	
82-23	36341-36343	an	
82-24	36344-36347	AWS	
82-25	36348-36355	Account	
82-26	36356-36362	Amazon	
82-27	36363-36365	is	
82-28	36366-36368	an	
82-29	36369-36374	Equal	
82-30	36375-36386	Opportunity	
82-31	36387-36395	Employer	
82-32	36395-36396	:	

#Text=Minority / Women / Disability / Veteran / Gender Identity / Sexual Orientation / Age. Language عربي Bahasa Indonesia Deutsch English Español Français Italiano Português Tiếng Việt Türkçe Ρусский
83-1	36397-36405	Minority	
83-2	36406-36407	/	
83-3	36408-36413	Women	
83-4	36414-36415	/	
83-5	36416-36426	Disability	
83-6	36427-36428	/	
83-7	36429-36436	Veteran	
83-8	36437-36438	/	
83-9	36439-36445	Gender	
83-10	36446-36454	Identity	
83-11	36455-36456	/	
83-12	36457-36463	Sexual	
83-13	36464-36475	Orientation	
83-14	36476-36477	/	
83-15	36478-36481	Age	
83-16	36481-36482	.	
83-17	36483-36491	Language	
83-18	36492-36496	عربي	
83-19	36497-36503	Bahasa	
83-20	36504-36513	Indonesia	
83-21	36514-36521	Deutsch	
83-22	36522-36529	English	
83-23	36530-36537	Español	
83-24	36538-36546	Français	
83-25	36547-36555	Italiano	
83-26	36556-36565	Português	
83-27	36566-36571	Tiếng	
83-28	36572-36576	Việt	
83-29	36577-36583	Türkçe	
83-30	36584-36591	Ρусский	
