#FORMAT=WebAnno TSV 3.3


#Text=Range join optimization | Databricks on AWS
#Text=Support
#Text=Feedback
#Text=Try Databricks
#Text=Help Center
#Text=Documentation
#Text=Knowledge Base
#Text=Amazon Web Services
#Text=Microsoft Azure
#Text=Google Cloud Platform
#Text=Documentation for Databricks on AWS
#Text=Getting started with Databricks
#Text=Databricks SQL Analytics guide
#Text=Databricks Workspace guide
#Text=Get started with Databricks Workspace
#Text=Language roadmaps
#Text=User guide
#Text=Data guide
#Text=Delta Lake and Delta Engine guide
#Text=Introduction
#Text=Delta Lake quickstart
#Text=Introductory notebooks
#Text=Ingest data into Delta Lake
#Text=Table batch reads and writes
#Text=Table streaming reads and writes
#Text=Table deletes, updates, and merges
#Text=Table utility commands
#Text=Constraints
#Text=Table versioning
#Text=Delta Lake API reference
#Text=Concurrency control
#Text=Integrations
#Text=Migration guide
#Text=Best practices
#Text=Frequently asked questions (FAQ)
#Text=Delta Lake resources
#Text=Delta Engine
#Text=Optimize performance with file management
#Text=Auto Optimize
#Text=Optimize performance with caching
#Text=Dynamic file pruning
#Text=Isolation levels
#Text=Bloom filter indexes
#Text=Optimize join performance
#Text=Range join optimization
#Text=Skew join optimization
#Text=Optimized data transformation
#Text=Machine learning and deep learning guide
#Text=MLflow guide
#Text=Genomics guide
#Text=Administration guide
#Text=API reference
#Text=Release notes
#Text=Resources
#Text=Updated Apr 09, 2021
#Text=Send us feedback
#Text=Documentation
#Text=Databricks Workspace guide
#Text=Delta Lake and Delta Engine guide
#Text=Delta Engine
#Text=Optimize join performance
#Text=Range join optimization
#Text=Range join optimization
#Text=A range join occurs when two relations are joined using a point in interval or interval overlap condition.
1-1	0-5	Range	
1-2	6-10	join	
1-3	11-23	optimization	
1-4	24-25	|	
1-5	26-36	Databricks	
1-6	37-39	on	
1-7	40-43	AWS	
1-8	44-51	Support	
1-9	52-60	Feedback	
1-10	61-64	Try	
1-11	65-75	Databricks	
1-12	76-80	Help	
1-13	81-87	Center	
1-14	88-101	Documentation	
1-15	102-111	Knowledge	
1-16	112-116	Base	
1-17	117-123	Amazon	
1-18	124-127	Web	
1-19	128-136	Services	
1-20	137-146	Microsoft	
1-21	147-152	Azure	
1-22	153-159	Google	
1-23	160-165	Cloud	
1-24	166-174	Platform	
1-25	175-188	Documentation	
1-26	189-192	for	
1-27	193-203	Databricks	
1-28	204-206	on	
1-29	207-210	AWS	
1-30	211-218	Getting	
1-31	219-226	started	
1-32	227-231	with	
1-33	232-242	Databricks	
1-34	243-253	Databricks	
1-35	254-257	SQL	
1-36	258-267	Analytics	
1-37	268-273	guide	
1-38	274-284	Databricks	
1-39	285-294	Workspace	
1-40	295-300	guide	
1-41	301-304	Get	
1-42	305-312	started	
1-43	313-317	with	
1-44	318-328	Databricks	
1-45	329-338	Workspace	
1-46	339-347	Language	
1-47	348-356	roadmaps	
1-48	357-361	User	
1-49	362-367	guide	
1-50	368-372	Data	
1-51	373-378	guide	
1-52	379-384	Delta	
1-53	385-389	Lake	
1-54	390-393	and	
1-55	394-399	Delta	
1-56	400-406	Engine	
1-57	407-412	guide	
1-58	413-425	Introduction	
1-59	426-431	Delta	
1-60	432-436	Lake	
1-61	437-447	quickstart	
1-62	448-460	Introductory	
1-63	461-470	notebooks	
1-64	471-477	Ingest	
1-65	478-482	data	
1-66	483-487	into	
1-67	488-493	Delta	
1-68	494-498	Lake	
1-69	499-504	Table	
1-70	505-510	batch	
1-71	511-516	reads	
1-72	517-520	and	
1-73	521-527	writes	
1-74	528-533	Table	
1-75	534-543	streaming	
1-76	544-549	reads	
1-77	550-553	and	
1-78	554-560	writes	
1-79	561-566	Table	
1-80	567-574	deletes	
1-81	574-575	,	
1-82	576-583	updates	
1-83	583-584	,	
1-84	585-588	and	
1-85	589-595	merges	
1-86	596-601	Table	
1-87	602-609	utility	
1-88	610-618	commands	
1-89	619-630	Constraints	
1-90	631-636	Table	
1-91	637-647	versioning	
1-92	648-653	Delta	
1-93	654-658	Lake	
1-94	659-662	API	
1-95	663-672	reference	
1-96	673-684	Concurrency	
1-97	685-692	control	
1-98	693-705	Integrations	
1-99	706-715	Migration	
1-100	716-721	guide	
1-101	722-726	Best	
1-102	727-736	practices	
1-103	737-747	Frequently	
1-104	748-753	asked	
1-105	754-763	questions	
1-106	764-765	(	
1-107	765-768	FAQ	
1-108	768-769	)	
1-109	770-775	Delta	
1-110	776-780	Lake	
1-111	781-790	resources	
1-112	791-796	Delta	
1-113	797-803	Engine	
1-114	804-812	Optimize	
1-115	813-824	performance	
1-116	825-829	with	
1-117	830-834	file	
1-118	835-845	management	
1-119	846-850	Auto	
1-120	851-859	Optimize	
1-121	860-868	Optimize	
1-122	869-880	performance	
1-123	881-885	with	
1-124	886-893	caching	
1-125	894-901	Dynamic	
1-126	902-906	file	
1-127	907-914	pruning	
1-128	915-924	Isolation	
1-129	925-931	levels	
1-130	932-937	Bloom	
1-131	938-944	filter	
1-132	945-952	indexes	
1-133	953-961	Optimize	
1-134	962-966	join	
1-135	967-978	performance	
1-136	979-984	Range	
1-137	985-989	join	
1-138	990-1002	optimization	
1-139	1003-1007	Skew	
1-140	1008-1012	join	
1-141	1013-1025	optimization	
1-142	1026-1035	Optimized	
1-143	1036-1040	data	
1-144	1041-1055	transformation	
1-145	1056-1063	Machine	
1-146	1064-1072	learning	
1-147	1073-1076	and	
1-148	1077-1081	deep	
1-149	1082-1090	learning	
1-150	1091-1096	guide	
1-151	1097-1103	MLflow	
1-152	1104-1109	guide	
1-153	1110-1118	Genomics	
1-154	1119-1124	guide	
1-155	1125-1139	Administration	
1-156	1140-1145	guide	
1-157	1146-1149	API	
1-158	1150-1159	reference	
1-159	1160-1167	Release	
1-160	1168-1173	notes	
1-161	1174-1183	Resources	
1-162	1184-1191	Updated	
1-163	1192-1195	Apr	
1-164	1196-1198	09	
1-165	1198-1199	,	
1-166	1200-1204	2021	
1-167	1205-1209	Send	
1-168	1210-1212	us	
1-169	1213-1221	feedback	
1-170	1222-1235	Documentation	
1-171	1236-1246	Databricks	
1-172	1247-1256	Workspace	
1-173	1257-1262	guide	
1-174	1263-1268	Delta	
1-175	1269-1273	Lake	
1-176	1274-1277	and	
1-177	1278-1283	Delta	
1-178	1284-1290	Engine	
1-179	1291-1296	guide	
1-180	1297-1302	Delta	
1-181	1303-1309	Engine	
1-182	1310-1318	Optimize	
1-183	1319-1323	join	
1-184	1324-1335	performance	
1-185	1336-1341	Range	
1-186	1342-1346	join	
1-187	1347-1359	optimization	
1-188	1360-1365	Range	
1-189	1366-1370	join	
1-190	1371-1383	optimization	
1-191	1384-1385	A	
1-192	1386-1391	range	
1-193	1392-1396	join	
1-194	1397-1403	occurs	
1-195	1404-1408	when	
1-196	1409-1412	two	
1-197	1413-1422	relations	
1-198	1423-1426	are	
1-199	1427-1433	joined	
1-200	1434-1439	using	
1-201	1440-1441	a	
1-202	1442-1447	point	
1-203	1448-1450	in	
1-204	1451-1459	interval	
1-205	1460-1462	or	
1-206	1463-1471	interval	
1-207	1472-1479	overlap	
1-208	1480-1489	condition	
1-209	1489-1490	.	

#Text=The range join optimization support in Databricks Runtime can bring orders of magnitude improvement in query performance, but requires careful manual tuning.
2-1	1491-1494	The	
2-2	1495-1500	range	
2-3	1501-1505	join	
2-4	1506-1518	optimization	
2-5	1519-1526	support	
2-6	1527-1529	in	
2-7	1530-1540	Databricks	
2-8	1541-1548	Runtime	
2-9	1549-1552	can	
2-10	1553-1558	bring	
2-11	1559-1565	orders	
2-12	1566-1568	of	
2-13	1569-1578	magnitude	
2-14	1579-1590	improvement	
2-15	1591-1593	in	
2-16	1594-1599	query	
2-17	1600-1611	performance	
2-18	1611-1612	,	
2-19	1613-1616	but	
2-20	1617-1625	requires	
2-21	1626-1633	careful	
2-22	1634-1640	manual	
2-23	1641-1647	tuning	
2-24	1647-1648	.	

#Text=Point in interval range join
#Text=A point in interval range join is a join in which the condition contains predicates specifying that a value from one relation is between two values from the other relation.
3-1	1649-1654	Point	
3-2	1655-1657	in	
3-3	1658-1666	interval	
3-4	1667-1672	range	
3-5	1673-1677	join	
3-6	1678-1679	A	
3-7	1680-1685	point	
3-8	1686-1688	in	
3-9	1689-1697	interval	
3-10	1698-1703	range	
3-11	1704-1708	join	
3-12	1709-1711	is	
3-13	1712-1713	a	
3-14	1714-1718	join	
3-15	1719-1721	in	
3-16	1722-1727	which	
3-17	1728-1731	the	
3-18	1732-1741	condition	
3-19	1742-1750	contains	
3-20	1751-1761	predicates	
3-21	1762-1772	specifying	
3-22	1773-1777	that	
3-23	1778-1779	a	
3-24	1780-1785	value	
3-25	1786-1790	from	
3-26	1791-1794	one	
3-27	1795-1803	relation	
3-28	1804-1806	is	
3-29	1807-1814	between	
3-30	1815-1818	two	
3-31	1819-1825	values	
3-32	1826-1830	from	
3-33	1831-1834	the	
3-34	1835-1840	other	
3-35	1841-1849	relation	
3-36	1849-1850	.	

#Text=For example:
#Text=-- using BETWEEN expressions
#Text=SELECT *
#Text=FROM points JOIN ranges ON points.p BETWEEN ranges.start and ranges.end;
#Text=-- using inequality expressions
#Text=SELECT *
#Text=FROM points JOIN ranges ON points.p >= ranges.start AND points.p < ranges.end;
#Text=-- with fixed length interval
#Text=SELECT *
#Text=FROM points JOIN ranges ON points.p >= ranges.start AND points.p < ranges.start + 100;
#Text=-- join two sets of point values within a fixed distance from each other
#Text=SELECT *
#Text=FROM points1 p1 JOIN points2 p2 ON p1.p >= p2.p - 10 AND p1.p <= p2.p + 10;
#Text=-- a range condition together with other join conditions
#Text=SELECT *
#Text=FROM points, ranges
#Text=WHERE points.symbol = ranges.symbol
#Text=AND points.p >= ranges.start
#Text=AND points.p < ranges.end;
#Text=Interval overlap range join
#Text=An interval overlap range join is a join in which the condition contains predicates specifying an overlap of intervals between two values from each relation.
4-1	1851-1854	For	
4-2	1855-1862	example	
4-3	1862-1863	:	
4-4	1864-1865	-	
4-5	1865-1866	-	
4-6	1867-1872	using	
4-7	1873-1880	BETWEEN	
4-8	1881-1892	expressions	
4-9	1893-1899	SELECT	
4-10	1900-1901	*	
4-11	1902-1906	FROM	
4-12	1907-1913	points	
4-13	1914-1918	JOIN	
4-14	1919-1925	ranges	
4-15	1926-1928	ON	
4-16	1929-1937	points.p	
4-17	1938-1945	BETWEEN	
4-18	1946-1958	ranges.start	
4-19	1959-1962	and	
4-20	1963-1973	ranges.end	
4-21	1973-1974	;	
4-22	1975-1976	-	
4-23	1976-1977	-	
4-24	1978-1983	using	
4-25	1984-1994	inequality	
4-26	1995-2006	expressions	
4-27	2007-2013	SELECT	
4-28	2014-2015	*	
4-29	2016-2020	FROM	
4-30	2021-2027	points	
4-31	2028-2032	JOIN	
4-32	2033-2039	ranges	
4-33	2040-2042	ON	
4-34	2043-2051	points.p	
4-35	2052-2053	>	
4-36	2053-2054	=	
4-37	2055-2067	ranges.start	
4-38	2068-2071	AND	
4-39	2072-2080	points.p	
4-40	2081-2082	<	
4-41	2083-2093	ranges.end	
4-42	2093-2094	;	
4-43	2095-2096	-	
4-44	2096-2097	-	
4-45	2098-2102	with	
4-46	2103-2108	fixed	
4-47	2109-2115	length	
4-48	2116-2124	interval	
4-49	2125-2131	SELECT	
4-50	2132-2133	*	
4-51	2134-2138	FROM	
4-52	2139-2145	points	
4-53	2146-2150	JOIN	
4-54	2151-2157	ranges	
4-55	2158-2160	ON	
4-56	2161-2169	points.p	
4-57	2170-2171	>	
4-58	2171-2172	=	
4-59	2173-2185	ranges.start	
4-60	2186-2189	AND	
4-61	2190-2198	points.p	
4-62	2199-2200	<	
4-63	2201-2213	ranges.start	
4-64	2214-2215	+	
4-65	2216-2219	100	
4-66	2219-2220	;	
4-67	2221-2222	-	
4-68	2222-2223	-	
4-69	2224-2228	join	
4-70	2229-2232	two	
4-71	2233-2237	sets	
4-72	2238-2240	of	
4-73	2241-2246	point	
4-74	2247-2253	values	
4-75	2254-2260	within	
4-76	2261-2262	a	
4-77	2263-2268	fixed	
4-78	2269-2277	distance	
4-79	2278-2282	from	
4-80	2283-2287	each	
4-81	2288-2293	other	
4-82	2294-2300	SELECT	
4-83	2301-2302	*	
4-84	2303-2307	FROM	
4-85	2308-2315	points1	
4-86	2316-2318	p1	
4-87	2319-2323	JOIN	
4-88	2324-2331	points2	
4-89	2332-2334	p2	
4-90	2335-2337	ON	
4-91	2338-2340	p1	
4-92	2340-2341	.	
4-93	2341-2342	p	
4-94	2343-2344	>	
4-95	2344-2345	=	
4-96	2346-2348	p2	
4-97	2348-2349	.	
4-98	2349-2350	p	
4-99	2351-2352	-	
4-100	2353-2355	10	
4-101	2356-2359	AND	
4-102	2360-2362	p1	
4-103	2362-2363	.	
4-104	2363-2364	p	
4-105	2365-2366	<	
4-106	2366-2367	=	
4-107	2368-2370	p2	
4-108	2370-2371	.	
4-109	2371-2372	p	
4-110	2373-2374	+	
4-111	2375-2377	10	
4-112	2377-2378	;	
4-113	2379-2380	-	
4-114	2380-2381	-	
4-115	2382-2383	a	
4-116	2384-2389	range	
4-117	2390-2399	condition	
4-118	2400-2408	together	
4-119	2409-2413	with	
4-120	2414-2419	other	
4-121	2420-2424	join	
4-122	2425-2435	conditions	
4-123	2436-2442	SELECT	
4-124	2443-2444	*	
4-125	2445-2449	FROM	
4-126	2450-2456	points	
4-127	2456-2457	,	
4-128	2458-2464	ranges	
4-129	2465-2470	WHERE	
4-130	2471-2484	points.symbol	
4-131	2485-2486	=	
4-132	2487-2500	ranges.symbol	
4-133	2501-2504	AND	
4-134	2505-2513	points.p	
4-135	2514-2515	>	
4-136	2515-2516	=	
4-137	2517-2529	ranges.start	
4-138	2530-2533	AND	
4-139	2534-2542	points.p	
4-140	2543-2544	<	
4-141	2545-2555	ranges.end	
4-142	2555-2556	;	
4-143	2557-2565	Interval	
4-144	2566-2573	overlap	
4-145	2574-2579	range	
4-146	2580-2584	join	
4-147	2585-2587	An	
4-148	2588-2596	interval	
4-149	2597-2604	overlap	
4-150	2605-2610	range	
4-151	2611-2615	join	
4-152	2616-2618	is	
4-153	2619-2620	a	
4-154	2621-2625	join	
4-155	2626-2628	in	
4-156	2629-2634	which	
4-157	2635-2638	the	
4-158	2639-2648	condition	
4-159	2649-2657	contains	
4-160	2658-2668	predicates	
4-161	2669-2679	specifying	
4-162	2680-2682	an	
4-163	2683-2690	overlap	
4-164	2691-2693	of	
4-165	2694-2703	intervals	
4-166	2704-2711	between	
4-167	2712-2715	two	
4-168	2716-2722	values	
4-169	2723-2727	from	
4-170	2728-2732	each	
4-171	2733-2741	relation	
4-172	2741-2742	.	

#Text=For example:
#Text=-- overlap of [r1.start, r1.end] with [r2.start, r2.end]
#Text=SELECT *
#Text=FROM r1 JOIN r2 ON r1.start < r2.end AND r2.start < r1.end;
#Text=-- overlap of fixed length intervals
#Text=SELECT *
#Text=FROM r1 JOIN r2 ON r1.start < r2.start + 100 AND r2.start < r1.start + 100;
#Text=-- a range condition together with other join conditions
#Text=SELECT *
#Text=FROM r1 JOIN r2 ON r1.symbol = r2.symbol
#Text=AND r1.start <= r2.end
#Text=AND r1.end >= r2.start;
#Text=Range join optimization
#Text=The range join optimization is performed for joins that:
#Text=Have a condition that can be interpreted as a point in interval or interval overlap range join.
5-1	2743-2746	For	
5-2	2747-2754	example	
5-3	2754-2755	:	
5-4	2756-2757	-	
5-5	2757-2758	-	
5-6	2759-2766	overlap	
5-7	2767-2769	of	
5-8	2770-2771	[	
5-9	2771-2773	r1	
5-10	2773-2774	.	
5-11	2774-2779	start	
5-12	2779-2780	,	
5-13	2781-2783	r1	
5-14	2783-2784	.	
5-15	2784-2787	end	
5-16	2787-2788	]	
5-17	2789-2793	with	
5-18	2794-2795	[	
5-19	2795-2797	r2	
5-20	2797-2798	.	
5-21	2798-2803	start	
5-22	2803-2804	,	
5-23	2805-2807	r2	
5-24	2807-2808	.	
5-25	2808-2811	end	
5-26	2811-2812	]	
5-27	2813-2819	SELECT	
5-28	2820-2821	*	
5-29	2822-2826	FROM	
5-30	2827-2829	r1	
5-31	2830-2834	JOIN	
5-32	2835-2837	r2	
5-33	2838-2840	ON	
5-34	2841-2843	r1	
5-35	2843-2844	.	
5-36	2844-2849	start	
5-37	2850-2851	<	
5-38	2852-2854	r2	
5-39	2854-2855	.	
5-40	2855-2858	end	
5-41	2859-2862	AND	
5-42	2863-2865	r2	
5-43	2865-2866	.	
5-44	2866-2871	start	
5-45	2872-2873	<	
5-46	2874-2876	r1	
5-47	2876-2877	.	
5-48	2877-2880	end	
5-49	2880-2881	;	
5-50	2882-2883	-	
5-51	2883-2884	-	
5-52	2885-2892	overlap	
5-53	2893-2895	of	
5-54	2896-2901	fixed	
5-55	2902-2908	length	
5-56	2909-2918	intervals	
5-57	2919-2925	SELECT	
5-58	2926-2927	*	
5-59	2928-2932	FROM	
5-60	2933-2935	r1	
5-61	2936-2940	JOIN	
5-62	2941-2943	r2	
5-63	2944-2946	ON	
5-64	2947-2949	r1	
5-65	2949-2950	.	
5-66	2950-2955	start	
5-67	2956-2957	<	
5-68	2958-2960	r2	
5-69	2960-2961	.	
5-70	2961-2966	start	
5-71	2967-2968	+	
5-72	2969-2972	100	
5-73	2973-2976	AND	
5-74	2977-2979	r2	
5-75	2979-2980	.	
5-76	2980-2985	start	
5-77	2986-2987	<	
5-78	2988-2990	r1	
5-79	2990-2991	.	
5-80	2991-2996	start	
5-81	2997-2998	+	
5-82	2999-3002	100	
5-83	3002-3003	;	
5-84	3004-3005	-	
5-85	3005-3006	-	
5-86	3007-3008	a	
5-87	3009-3014	range	
5-88	3015-3024	condition	
5-89	3025-3033	together	
5-90	3034-3038	with	
5-91	3039-3044	other	
5-92	3045-3049	join	
5-93	3050-3060	conditions	
5-94	3061-3067	SELECT	
5-95	3068-3069	*	
5-96	3070-3074	FROM	
5-97	3075-3077	r1	
5-98	3078-3082	JOIN	
5-99	3083-3085	r2	
5-100	3086-3088	ON	
5-101	3089-3091	r1	
5-102	3091-3092	.	
5-103	3092-3098	symbol	
5-104	3099-3100	=	
5-105	3101-3103	r2	
5-106	3103-3104	.	
5-107	3104-3110	symbol	
5-108	3111-3114	AND	
5-109	3115-3117	r1	
5-110	3117-3118	.	
5-111	3118-3123	start	
5-112	3124-3125	<	
5-113	3125-3126	=	
5-114	3127-3129	r2	
5-115	3129-3130	.	
5-116	3130-3133	end	
5-117	3134-3137	AND	
5-118	3138-3140	r1	
5-119	3140-3141	.	
5-120	3141-3144	end	
5-121	3145-3146	>	
5-122	3146-3147	=	
5-123	3148-3150	r2	
5-124	3150-3151	.	
5-125	3151-3156	start	
5-126	3156-3157	;	
5-127	3158-3163	Range	
5-128	3164-3168	join	
5-129	3169-3181	optimization	
5-130	3182-3185	The	
5-131	3186-3191	range	
5-132	3192-3196	join	
5-133	3197-3209	optimization	
5-134	3210-3212	is	
5-135	3213-3222	performed	
5-136	3223-3226	for	
5-137	3227-3232	joins	
5-138	3233-3237	that	
5-139	3237-3238	:	
5-140	3239-3243	Have	
5-141	3244-3245	a	
5-142	3246-3255	condition	
5-143	3256-3260	that	
5-144	3261-3264	can	
5-145	3265-3267	be	
5-146	3268-3279	interpreted	
5-147	3280-3282	as	
5-148	3283-3284	a	
5-149	3285-3290	point	
5-150	3291-3293	in	
5-151	3294-3302	interval	
5-152	3303-3305	or	
5-153	3306-3314	interval	
5-154	3315-3322	overlap	
5-155	3323-3328	range	
5-156	3329-3333	join	
5-157	3333-3334	.	

#Text=All values involved in the range join condition are of a numeric type (integral, floating point, decimal), DATE, or TIMESTAMP.
6-1	3335-3338	All	
6-2	3339-3345	values	
6-3	3346-3354	involved	
6-4	3355-3357	in	
6-5	3358-3361	the	
6-6	3362-3367	range	
6-7	3368-3372	join	
6-8	3373-3382	condition	
6-9	3383-3386	are	
6-10	3387-3389	of	
6-11	3390-3391	a	
6-12	3392-3399	numeric	
6-13	3400-3404	type	
6-14	3405-3406	(	
6-15	3406-3414	integral	
6-16	3414-3415	,	
6-17	3416-3424	floating	
6-18	3425-3430	point	
6-19	3430-3431	,	
6-20	3432-3439	decimal	
6-21	3439-3440	)	
6-22	3440-3441	,	
6-23	3442-3446	DATE	
6-24	3446-3447	,	
6-25	3448-3450	or	
6-26	3451-3460	TIMESTAMP	
6-27	3460-3461	.	

#Text=All values involved in the range join condition are of the same type.
7-1	3462-3465	All	
7-2	3466-3472	values	
7-3	3473-3481	involved	
7-4	3482-3484	in	
7-5	3485-3488	the	
7-6	3489-3494	range	
7-7	3495-3499	join	
7-8	3500-3509	condition	
7-9	3510-3513	are	
7-10	3514-3516	of	
7-11	3517-3520	the	
7-12	3521-3525	same	
7-13	3526-3530	type	
7-14	3530-3531	.	

#Text=In the case of the decimal type, the values also need to be of the same scale and precision.
8-1	3532-3534	In	
8-2	3535-3538	the	
8-3	3539-3543	case	
8-4	3544-3546	of	
8-5	3547-3550	the	
8-6	3551-3558	decimal	
8-7	3559-3563	type	
8-8	3563-3564	,	
8-9	3565-3568	the	
8-10	3569-3575	values	
8-11	3576-3580	also	
8-12	3581-3585	need	
8-13	3586-3588	to	
8-14	3589-3591	be	
8-15	3592-3594	of	
8-16	3595-3598	the	
8-17	3599-3603	same	
8-18	3604-3609	scale	
8-19	3610-3613	and	
8-20	3614-3623	precision	
8-21	3623-3624	.	

#Text=It is an INNER JOIN, or in case of point in interval range join, a LEFT OUTER JOIN with point value on the left side, or RIGHT OUTER JOIN with point value on the right side.
9-1	3625-3627	It	
9-2	3628-3630	is	
9-3	3631-3633	an	
9-4	3634-3639	INNER	
9-5	3640-3644	JOIN	
9-6	3644-3645	,	
9-7	3646-3648	or	
9-8	3649-3651	in	
9-9	3652-3656	case	
9-10	3657-3659	of	
9-11	3660-3665	point	
9-12	3666-3668	in	
9-13	3669-3677	interval	
9-14	3678-3683	range	
9-15	3684-3688	join	
9-16	3688-3689	,	
9-17	3690-3691	a	
9-18	3692-3696	LEFT	
9-19	3697-3702	OUTER	
9-20	3703-3707	JOIN	
9-21	3708-3712	with	
9-22	3713-3718	point	
9-23	3719-3724	value	
9-24	3725-3727	on	
9-25	3728-3731	the	
9-26	3732-3736	left	
9-27	3737-3741	side	
9-28	3741-3742	,	
9-29	3743-3745	or	
9-30	3746-3751	RIGHT	
9-31	3752-3757	OUTER	
9-32	3758-3762	JOIN	
9-33	3763-3767	with	
9-34	3768-3773	point	
9-35	3774-3779	value	
9-36	3780-3782	on	
9-37	3783-3786	the	
9-38	3787-3792	right	
9-39	3793-3797	side	
9-40	3797-3798	.	

#Text=Have a bin size tuning parameter.
10-1	3799-3803	Have	
10-2	3804-3805	a	
10-3	3806-3809	bin	
10-4	3810-3814	size	
10-5	3815-3821	tuning	
10-6	3822-3831	parameter	
10-7	3831-3832	.	

#Text=Bin size
#Text=The bin size is a numeric tuning parameter that splits the values domain of the range condition into multiple bins of equal size.
11-1	3833-3836	Bin	
11-2	3837-3841	size	
11-3	3842-3845	The	
11-4	3846-3849	bin	
11-5	3850-3854	size	
11-6	3855-3857	is	
11-7	3858-3859	a	
11-8	3860-3867	numeric	
11-9	3868-3874	tuning	
11-10	3875-3884	parameter	
11-11	3885-3889	that	
11-12	3890-3896	splits	
11-13	3897-3900	the	
11-14	3901-3907	values	
11-15	3908-3914	domain	
11-16	3915-3917	of	
11-17	3918-3921	the	
11-18	3922-3927	range	
11-19	3928-3937	condition	
11-20	3938-3942	into	
11-21	3943-3951	multiple	
11-22	3952-3956	bins	
11-23	3957-3959	of	
11-24	3960-3965	equal	
11-25	3966-3970	size	
11-26	3970-3971	.	

#Text=For example, with a bin size of 10, the optimization splits the domain into bins that are intervals of length 10.
12-1	3972-3975	For	
12-2	3976-3983	example	
12-3	3983-3984	,	
12-4	3985-3989	with	
12-5	3990-3991	a	
12-6	3992-3995	bin	
12-7	3996-4000	size	
12-8	4001-4003	of	
12-9	4004-4006	10	
12-10	4006-4007	,	
12-11	4008-4011	the	
12-12	4012-4024	optimization	
12-13	4025-4031	splits	
12-14	4032-4035	the	
12-15	4036-4042	domain	
12-16	4043-4047	into	
12-17	4048-4052	bins	
12-18	4053-4057	that	
12-19	4058-4061	are	
12-20	4062-4071	intervals	
12-21	4072-4074	of	
12-22	4075-4081	length	
12-23	4082-4084	10	
12-24	4084-4085	.	

#Text=If you have a point in range condition of p BETWEEN start AND end, and start is 8 and end is 22, this value interval overlaps with three bins of length 10 – the first bin from 0 to 10, the second bin from 10 to 20, and the third bin from 20 to 30.
13-1	4086-4088	If	
13-2	4089-4092	you	
13-3	4093-4097	have	
13-4	4098-4099	a	
13-5	4100-4105	point	
13-6	4106-4108	in	
13-7	4109-4114	range	
13-8	4115-4124	condition	
13-9	4125-4127	of	
13-10	4128-4129	p	
13-11	4130-4137	BETWEEN	
13-12	4138-4143	start	
13-13	4144-4147	AND	
13-14	4148-4151	end	
13-15	4151-4152	,	
13-16	4153-4156	and	
13-17	4157-4162	start	
13-18	4163-4165	is	
13-19	4166-4167	8	
13-20	4168-4171	and	
13-21	4172-4175	end	
13-22	4176-4178	is	
13-23	4179-4181	22	
13-24	4181-4182	,	
13-25	4183-4187	this	
13-26	4188-4193	value	
13-27	4194-4202	interval	
13-28	4203-4211	overlaps	
13-29	4212-4216	with	
13-30	4217-4222	three	
13-31	4223-4227	bins	
13-32	4228-4230	of	
13-33	4231-4237	length	
13-34	4238-4240	10	
13-35	4241-4242	–	
13-36	4243-4246	the	
13-37	4247-4252	first	
13-38	4253-4256	bin	
13-39	4257-4261	from	
13-40	4262-4263	0	
13-41	4264-4266	to	
13-42	4267-4269	10	
13-43	4269-4270	,	
13-44	4271-4274	the	
13-45	4275-4281	second	
13-46	4282-4285	bin	
13-47	4286-4290	from	
13-48	4291-4293	10	
13-49	4294-4296	to	
13-50	4297-4299	20	
13-51	4299-4300	,	
13-52	4301-4304	and	
13-53	4305-4308	the	
13-54	4309-4314	third	
13-55	4315-4318	bin	
13-56	4319-4323	from	
13-57	4324-4326	20	
13-58	4327-4329	to	
13-59	4330-4332	30	
13-60	4332-4333	.	

#Text=Only the points that fall within the same three bins need to be considered as possible join matches for that interval.
14-1	4334-4338	Only	
14-2	4339-4342	the	
14-3	4343-4349	points	
14-4	4350-4354	that	
14-5	4355-4359	fall	
14-6	4360-4366	within	
14-7	4367-4370	the	
14-8	4371-4375	same	
14-9	4376-4381	three	
14-10	4382-4386	bins	
14-11	4387-4391	need	
14-12	4392-4394	to	
14-13	4395-4397	be	
14-14	4398-4408	considered	
14-15	4409-4411	as	
14-16	4412-4420	possible	
14-17	4421-4425	join	
14-18	4426-4433	matches	
14-19	4434-4437	for	
14-20	4438-4442	that	
14-21	4443-4451	interval	
14-22	4451-4452	.	

#Text=For example, if p is 32, it can be ruled out as falling between start of 8 and end of 22, because it falls in the bin from 30 to 40.
15-1	4453-4456	For	
15-2	4457-4464	example	
15-3	4464-4465	,	
15-4	4466-4468	if	
15-5	4469-4470	p	
15-6	4471-4473	is	
15-7	4474-4476	32	
15-8	4476-4477	,	
15-9	4478-4480	it	
15-10	4481-4484	can	
15-11	4485-4487	be	
15-12	4488-4493	ruled	
15-13	4494-4497	out	
15-14	4498-4500	as	
15-15	4501-4508	falling	
15-16	4509-4516	between	
15-17	4517-4522	start	
15-18	4523-4525	of	
15-19	4526-4527	8	
15-20	4528-4531	and	
15-21	4532-4535	end	
15-22	4536-4538	of	
15-23	4539-4541	22	
15-24	4541-4542	,	
15-25	4543-4550	because	
15-26	4551-4553	it	
15-27	4554-4559	falls	
15-28	4560-4562	in	
15-29	4563-4566	the	
15-30	4567-4570	bin	
15-31	4571-4575	from	
15-32	4576-4578	30	
15-33	4579-4581	to	
15-34	4582-4584	40	
15-35	4584-4585	.	

#Text=Note
#Text=For DATE values, the value of the bin size is interpreted as days.
16-1	4586-4590	Note	
16-2	4591-4594	For	
16-3	4595-4599	DATE	
16-4	4600-4606	values	
16-5	4606-4607	,	
16-6	4608-4611	the	
16-7	4612-4617	value	
16-8	4618-4620	of	
16-9	4621-4624	the	
16-10	4625-4628	bin	
16-11	4629-4633	size	
16-12	4634-4636	is	
16-13	4637-4648	interpreted	
16-14	4649-4651	as	
16-15	4652-4656	days	
16-16	4656-4657	.	

#Text=For example, a bin size value of 7 represents a week.
17-1	4658-4661	For	
17-2	4662-4669	example	
17-3	4669-4670	,	
17-4	4671-4672	a	
17-5	4673-4676	bin	
17-6	4677-4681	size	
17-7	4682-4687	value	
17-8	4688-4690	of	
17-9	4691-4692	7	
17-10	4693-4703	represents	
17-11	4704-4705	a	
17-12	4706-4710	week	
17-13	4710-4711	.	

#Text=For TIMESTAMP values, the value of the bin size is interpreted as seconds.
18-1	4712-4715	For	
18-2	4716-4725	TIMESTAMP	
18-3	4726-4732	values	
18-4	4732-4733	,	
18-5	4734-4737	the	
18-6	4738-4743	value	
18-7	4744-4746	of	
18-8	4747-4750	the	
18-9	4751-4754	bin	
18-10	4755-4759	size	
18-11	4760-4762	is	
18-12	4763-4774	interpreted	
18-13	4775-4777	as	
18-14	4778-4785	seconds	
18-15	4785-4786	.	

#Text=If a sub-second value is required, fractional values can be used.
19-1	4787-4789	If	
19-2	4790-4791	a	
19-3	4792-4802	sub-second	
19-4	4803-4808	value	
19-5	4809-4811	is	
19-6	4812-4820	required	
19-7	4820-4821	,	
19-8	4822-4832	fractional	
19-9	4833-4839	values	
19-10	4840-4843	can	
19-11	4844-4846	be	
19-12	4847-4851	used	
19-13	4851-4852	.	

#Text=For example, a bin size value of 60 represents a minute, and a bin size value of 0.1 represents 100 milliseconds.
20-1	4853-4856	For	
20-2	4857-4864	example	
20-3	4864-4865	,	
20-4	4866-4867	a	
20-5	4868-4871	bin	
20-6	4872-4876	size	
20-7	4877-4882	value	
20-8	4883-4885	of	
20-9	4886-4888	60	
20-10	4889-4899	represents	
20-11	4900-4901	a	
20-12	4902-4908	minute	
20-13	4908-4909	,	
20-14	4910-4913	and	
20-15	4914-4915	a	
20-16	4916-4919	bin	
20-17	4920-4924	size	
20-18	4925-4930	value	
20-19	4931-4933	of	
20-20	4934-4937	0.1	
20-21	4938-4948	represents	
20-22	4949-4952	100	
20-23	4953-4965	milliseconds	
20-24	4965-4966	.	

#Text=You can specify the bin size either by using a range join hint in the query or by setting a session configuration parameter.
21-1	4967-4970	You	
21-2	4971-4974	can	
21-3	4975-4982	specify	
21-4	4983-4986	the	
21-5	4987-4990	bin	
21-6	4991-4995	size	
21-7	4996-5002	either	
21-8	5003-5005	by	
21-9	5006-5011	using	
21-10	5012-5013	a	
21-11	5014-5019	range	
21-12	5020-5024	join	
21-13	5025-5029	hint	
21-14	5030-5032	in	
21-15	5033-5036	the	
21-16	5037-5042	query	
21-17	5043-5045	or	
21-18	5046-5048	by	
21-19	5049-5056	setting	
21-20	5057-5058	a	
21-21	5059-5066	session	
21-22	5067-5080	configuration	
21-23	5081-5090	parameter	
21-24	5090-5091	.	

#Text=The range join optimization is applied only if you manually specify the bin size.
22-1	5092-5095	The	
22-2	5096-5101	range	
22-3	5102-5106	join	
22-4	5107-5119	optimization	
22-5	5120-5122	is	
22-6	5123-5130	applied	
22-7	5131-5135	only	
22-8	5136-5138	if	
22-9	5139-5142	you	
22-10	5143-5151	manually	
22-11	5152-5159	specify	
22-12	5160-5163	the	
22-13	5164-5167	bin	
22-14	5168-5172	size	
22-15	5172-5173	.	

#Text=Section Choose the bin size describes how to choose an optimal bin size.
23-1	5174-5181	Section	
23-2	5182-5188	Choose	
23-3	5189-5192	the	
23-4	5193-5196	bin	
23-5	5197-5201	size	
23-6	5202-5211	describes	
23-7	5212-5215	how	
23-8	5216-5218	to	
23-9	5219-5225	choose	
23-10	5226-5228	an	
23-11	5229-5236	optimal	
23-12	5237-5240	bin	
23-13	5241-5245	size	
23-14	5245-5246	.	

#Text=Enable range join using a range join hint
#Text=To enable the range join optimization in a SQL query, you can use a range join hint to specify the bin size.
24-1	5247-5253	Enable	
24-2	5254-5259	range	
24-3	5260-5264	join	
24-4	5265-5270	using	
24-5	5271-5272	a	
24-6	5273-5278	range	
24-7	5279-5283	join	
24-8	5284-5288	hint	
24-9	5289-5291	To	
24-10	5292-5298	enable	
24-11	5299-5302	the	
24-12	5303-5308	range	
24-13	5309-5313	join	
24-14	5314-5326	optimization	
24-15	5327-5329	in	
24-16	5330-5331	a	
24-17	5332-5335	SQL	
24-18	5336-5341	query	
24-19	5341-5342	,	
24-20	5343-5346	you	
24-21	5347-5350	can	
24-22	5351-5354	use	
24-23	5355-5356	a	
24-24	5357-5362	range	
24-25	5363-5367	join	
24-26	5368-5372	hint	
24-27	5373-5375	to	
24-28	5376-5383	specify	
24-29	5384-5387	the	
24-30	5388-5391	bin	
24-31	5392-5396	size	
24-32	5396-5397	.	

#Text=The hint must contain the relation name of one of the joined relations and the numeric bin size parameter.
25-1	5398-5401	The	
25-2	5402-5406	hint	
25-3	5407-5411	must	
25-4	5412-5419	contain	
25-5	5420-5423	the	
25-6	5424-5432	relation	
25-7	5433-5437	name	
25-8	5438-5440	of	
25-9	5441-5444	one	
25-10	5445-5447	of	
25-11	5448-5451	the	
25-12	5452-5458	joined	
25-13	5459-5468	relations	
25-14	5469-5472	and	
25-15	5473-5476	the	
25-16	5477-5484	numeric	
25-17	5485-5488	bin	
25-18	5489-5493	size	
25-19	5494-5503	parameter	
25-20	5503-5504	.	

#Text=The relation name can be a table, a view, or a subquery.
26-1	5505-5508	The	
26-2	5509-5517	relation	
26-3	5518-5522	name	
26-4	5523-5526	can	
26-5	5527-5529	be	
26-6	5530-5531	a	
26-7	5532-5537	table	
26-8	5537-5538	,	
26-9	5539-5540	a	
26-10	5541-5545	view	
26-11	5545-5546	,	
26-12	5547-5549	or	
26-13	5550-5551	a	
26-14	5552-5560	subquery	
26-15	5560-5561	.	

#Text=SELECT /*+ RANGE_JOIN(points, 10) */ *
#Text=FROM points JOIN ranges ON points.p >= ranges.start AND points.p < ranges.end;
#Text=SELECT /*+ RANGE_JOIN(r1, 0.1) */ *
#Text=FROM (SELECT * FROM ranges WHERE ranges.amount < 100) r1, ranges r2
#Text=WHERE r1.start < r2.start + 100 AND r2.start < r1.start + 100;
#Text=SELECT /*+ RANGE_JOIN(c, 500) */ *
#Text=FROM a
#Text=JOIN b ON (a.b_key = b.id)
#Text=JOIN c ON (a.ts BETWEEN c.start_time AND c.end_time)
#Text=Note
#Text=In the third example, you must place the hint on c.
27-1	5562-5568	SELECT	
27-2	5569-5570	/	
27-3	5570-5571	*	
27-4	5571-5572	+	
27-5	5573-5583	RANGE_JOIN	
27-6	5583-5584	(	
27-7	5584-5590	points	
27-8	5590-5591	,	
27-9	5592-5594	10	
27-10	5594-5595	)	
27-11	5596-5597	*	
27-12	5597-5598	/	
27-13	5599-5600	*	
27-14	5601-5605	FROM	
27-15	5606-5612	points	
27-16	5613-5617	JOIN	
27-17	5618-5624	ranges	
27-18	5625-5627	ON	
27-19	5628-5636	points.p	
27-20	5637-5638	>	
27-21	5638-5639	=	
27-22	5640-5652	ranges.start	
27-23	5653-5656	AND	
27-24	5657-5665	points.p	
27-25	5666-5667	<	
27-26	5668-5678	ranges.end	
27-27	5678-5679	;	
27-28	5680-5686	SELECT	
27-29	5687-5688	/	
27-30	5688-5689	*	
27-31	5689-5690	+	
27-32	5691-5701	RANGE_JOIN	
27-33	5701-5702	(	
27-34	5702-5704	r1	
27-35	5704-5705	,	
27-36	5706-5709	0.1	
27-37	5709-5710	)	
27-38	5711-5712	*	
27-39	5712-5713	/	
27-40	5714-5715	*	
27-41	5716-5720	FROM	
27-42	5721-5722	(	
27-43	5722-5728	SELECT	
27-44	5729-5730	*	
27-45	5731-5735	FROM	
27-46	5736-5742	ranges	
27-47	5743-5748	WHERE	
27-48	5749-5762	ranges.amount	
27-49	5763-5764	<	
27-50	5765-5768	100	
27-51	5768-5769	)	
27-52	5770-5772	r1	
27-53	5772-5773	,	
27-54	5774-5780	ranges	
27-55	5781-5783	r2	
27-56	5784-5789	WHERE	
27-57	5790-5792	r1	
27-58	5792-5793	.	
27-59	5793-5798	start	
27-60	5799-5800	<	
27-61	5801-5803	r2	
27-62	5803-5804	.	
27-63	5804-5809	start	
27-64	5810-5811	+	
27-65	5812-5815	100	
27-66	5816-5819	AND	
27-67	5820-5822	r2	
27-68	5822-5823	.	
27-69	5823-5828	start	
27-70	5829-5830	<	
27-71	5831-5833	r1	
27-72	5833-5834	.	
27-73	5834-5839	start	
27-74	5840-5841	+	
27-75	5842-5845	100	
27-76	5845-5846	;	
27-77	5847-5853	SELECT	
27-78	5854-5855	/	
27-79	5855-5856	*	
27-80	5856-5857	+	
27-81	5858-5868	RANGE_JOIN	
27-82	5868-5869	(	
27-83	5869-5870	c	
27-84	5870-5871	,	
27-85	5872-5875	500	
27-86	5875-5876	)	
27-87	5877-5878	*	
27-88	5878-5879	/	
27-89	5880-5881	*	
27-90	5882-5886	FROM	
27-91	5887-5888	a	
27-92	5889-5893	JOIN	
27-93	5894-5895	b	
27-94	5896-5898	ON	
27-95	5899-5900	(	
27-96	5900-5907	a.b_key	
27-97	5908-5909	=	
27-98	5910-5914	b.id	
27-99	5914-5915	)	
27-100	5916-5920	JOIN	
27-101	5921-5922	c	
27-102	5923-5925	ON	
27-103	5926-5927	(	
27-104	5927-5931	a.ts	
27-105	5932-5939	BETWEEN	
27-106	5940-5952	c.start_time	
27-107	5953-5956	AND	
27-108	5957-5967	c.end_time	
27-109	5967-5968	)	
27-110	5969-5973	Note	
27-111	5974-5976	In	
27-112	5977-5980	the	
27-113	5981-5986	third	
27-114	5987-5994	example	
27-115	5994-5995	,	
27-116	5996-5999	you	
27-117	6000-6004	must	
27-118	6005-6010	place	
27-119	6011-6014	the	
27-120	6015-6019	hint	
27-121	6020-6022	on	
27-122	6023-6024	c	
27-123	6024-6025	.	

#Text=This is because joins are left associative, so the query is interpreted as (a JOIN b) JOIN c,
#Text=and the hint on a applies to the join of a with b and not the join with c.
28-1	6026-6030	This	
28-2	6031-6033	is	
28-3	6034-6041	because	
28-4	6042-6047	joins	
28-5	6048-6051	are	
28-6	6052-6056	left	
28-7	6057-6068	associative	
28-8	6068-6069	,	
28-9	6070-6072	so	
28-10	6073-6076	the	
28-11	6077-6082	query	
28-12	6083-6085	is	
28-13	6086-6097	interpreted	
28-14	6098-6100	as	
28-15	6101-6102	(	
28-16	6102-6103	a	
28-17	6104-6108	JOIN	
28-18	6109-6110	b	
28-19	6110-6111	)	
28-20	6112-6116	JOIN	
28-21	6117-6118	c	
28-22	6118-6119	,	
28-23	6120-6123	and	
28-24	6124-6127	the	
28-25	6128-6132	hint	
28-26	6133-6135	on	
28-27	6136-6137	a	
28-28	6138-6145	applies	
28-29	6146-6148	to	
28-30	6149-6152	the	
28-31	6153-6157	join	
28-32	6158-6160	of	
28-33	6161-6162	a	
28-34	6163-6167	with	
28-35	6168-6169	b	
28-36	6170-6173	and	
28-37	6174-6177	not	
28-38	6178-6181	the	
28-39	6182-6186	join	
28-40	6187-6191	with	
28-41	6192-6193	c	
28-42	6193-6194	.	

#Text=You can also place a range join hint on one of the joined DataFrames.
29-1	6195-6198	You	
29-2	6199-6202	can	
29-3	6203-6207	also	
29-4	6208-6213	place	
29-5	6214-6215	a	
29-6	6216-6221	range	
29-7	6222-6226	join	
29-8	6227-6231	hint	
29-9	6232-6234	on	
29-10	6235-6238	one	
29-11	6239-6241	of	
29-12	6242-6245	the	
29-13	6246-6252	joined	
29-14	6253-6263	DataFrames	
29-15	6263-6264	.	

#Text=In that case, the hint contains just the numeric bin size parameter.
#Text=val df1 = spark.table("ranges").as("left")
#Text=val df2 = spark.table("ranges").as("right")
#Text=val joined = df1.hint("range_join", 10)
#Text=.join(df2, $"left.type" === $"right.type" &&
#Text=$"left.end" > $"right.start" &&
#Text=$"left.start" < $"right.end")
#Text=val joined2 = df1
#Text=.join(df2.hint("range_join", 0.5), $"left.type" === $"right.type" &&
#Text=$"left.end" > $"right.start" &&
#Text=$"left.start" < $"right.end")
#Text=Enable range join using session configuration
#Text=If you don’t want to modify the query, you can specify the bin size as a configuration parameter.
30-1	6265-6267	In	
30-2	6268-6272	that	
30-3	6273-6277	case	
30-4	6277-6278	,	
30-5	6279-6282	the	
30-6	6283-6287	hint	
30-7	6288-6296	contains	
30-8	6297-6301	just	
30-9	6302-6305	the	
30-10	6306-6313	numeric	
30-11	6314-6317	bin	
30-12	6318-6322	size	
30-13	6323-6332	parameter	
30-14	6332-6333	.	
30-15	6334-6337	val	
30-16	6338-6341	df1	
30-17	6342-6343	=	
30-18	6344-6355	spark.table	
30-19	6355-6356	(	
30-20	6356-6357	"	
30-21	6357-6363	ranges	
30-22	6363-6364	"	
30-23	6364-6365	)	
30-24	6365-6366	.	
30-25	6366-6368	as	
30-26	6368-6369	(	
30-27	6369-6370	"	
30-28	6370-6374	left	
30-29	6374-6375	"	
30-30	6375-6376	)	
30-31	6377-6380	val	
30-32	6381-6384	df2	
30-33	6385-6386	=	
30-34	6387-6398	spark.table	
30-35	6398-6399	(	
30-36	6399-6400	"	
30-37	6400-6406	ranges	
30-38	6406-6407	"	
30-39	6407-6408	)	
30-40	6408-6409	.	
30-41	6409-6411	as	
30-42	6411-6412	(	
30-43	6412-6413	"	
30-44	6413-6418	right	
30-45	6418-6419	"	
30-46	6419-6420	)	
30-47	6421-6424	val	
30-48	6425-6431	joined	
30-49	6432-6433	=	
30-50	6434-6437	df1	
30-51	6437-6438	.	
30-52	6438-6442	hint	
30-53	6442-6443	(	
30-54	6443-6444	"	
30-55	6444-6454	range_join	
30-56	6454-6455	"	
30-57	6455-6456	,	
30-58	6457-6459	10	
30-59	6459-6460	)	
30-60	6461-6462	.	
30-61	6462-6466	join	
30-62	6466-6467	(	
30-63	6467-6470	df2	
30-64	6470-6471	,	
30-65	6472-6473	$	
30-66	6473-6474	"	
30-67	6474-6483	left.type	
30-68	6483-6484	"	
30-69	6485-6486	=	
30-70	6486-6487	=	
30-71	6487-6488	=	
30-72	6489-6490	$	
30-73	6490-6491	"	
30-74	6491-6501	right.type	
30-75	6501-6502	"	
30-76	6503-6504	&	
30-77	6504-6505	&	
30-78	6506-6507	$	
30-79	6507-6508	"	
30-80	6508-6516	left.end	
30-81	6516-6517	"	
30-82	6518-6519	>	
30-83	6520-6521	$	
30-84	6521-6522	"	
30-85	6522-6533	right.start	
30-86	6533-6534	"	
30-87	6535-6536	&	
30-88	6536-6537	&	
30-89	6538-6539	$	
30-90	6539-6540	"	
30-91	6540-6550	left.start	
30-92	6550-6551	"	
30-93	6552-6553	<	
30-94	6554-6555	$	
30-95	6555-6556	"	
30-96	6556-6565	right.end	
30-97	6565-6566	"	
30-98	6566-6567	)	
30-99	6568-6571	val	
30-100	6572-6579	joined2	
30-101	6580-6581	=	
30-102	6582-6585	df1	
30-103	6586-6587	.	
30-104	6587-6591	join	
30-105	6591-6592	(	
30-106	6592-6595	df2	
30-107	6595-6596	.	
30-108	6596-6600	hint	
30-109	6600-6601	(	
30-110	6601-6602	"	
30-111	6602-6612	range_join	
30-112	6612-6613	"	
30-113	6613-6614	,	
30-114	6615-6618	0.5	
30-115	6618-6619	)	
30-116	6619-6620	,	
30-117	6621-6622	$	
30-118	6622-6623	"	
30-119	6623-6632	left.type	
30-120	6632-6633	"	
30-121	6634-6635	=	
30-122	6635-6636	=	
30-123	6636-6637	=	
30-124	6638-6639	$	
30-125	6639-6640	"	
30-126	6640-6650	right.type	
30-127	6650-6651	"	
30-128	6652-6653	&	
30-129	6653-6654	&	
30-130	6655-6656	$	
30-131	6656-6657	"	
30-132	6657-6665	left.end	
30-133	6665-6666	"	
30-134	6667-6668	>	
30-135	6669-6670	$	
30-136	6670-6671	"	
30-137	6671-6682	right.start	
30-138	6682-6683	"	
30-139	6684-6685	&	
30-140	6685-6686	&	
30-141	6687-6688	$	
30-142	6688-6689	"	
30-143	6689-6699	left.start	
30-144	6699-6700	"	
30-145	6701-6702	<	
30-146	6703-6704	$	
30-147	6704-6705	"	
30-148	6705-6714	right.end	
30-149	6714-6715	"	
30-150	6715-6716	)	
30-151	6717-6723	Enable	
30-152	6724-6729	range	
30-153	6730-6734	join	
30-154	6735-6740	using	
30-155	6741-6748	session	
30-156	6749-6762	configuration	
30-157	6763-6765	If	
30-158	6766-6769	you	
30-159	6770-6773	don	
30-160	6773-6774	’	
30-161	6774-6775	t	
30-162	6776-6780	want	
30-163	6781-6783	to	
30-164	6784-6790	modify	
30-165	6791-6794	the	
30-166	6795-6800	query	
30-167	6800-6801	,	
30-168	6802-6805	you	
30-169	6806-6809	can	
30-170	6810-6817	specify	
30-171	6818-6821	the	
30-172	6822-6825	bin	
30-173	6826-6830	size	
30-174	6831-6833	as	
30-175	6834-6835	a	
30-176	6836-6849	configuration	
30-177	6850-6859	parameter	
30-178	6859-6860	.	

#Text=SET spark.databricks.optimizer.rangeJoin.binSize=5
#Text=This configuration parameter applies to any join with a range condition.
31-1	6861-6864	SET	
31-2	6865-6909	spark.databricks.optimizer.rangeJoin.binSize	
31-3	6909-6910	=	
31-4	6910-6911	5	
31-5	6912-6916	This	
31-6	6917-6930	configuration	
31-7	6931-6940	parameter	
31-8	6941-6948	applies	
31-9	6949-6951	to	
31-10	6952-6955	any	
31-11	6956-6960	join	
31-12	6961-6965	with	
31-13	6966-6967	a	
31-14	6968-6973	range	
31-15	6974-6983	condition	
31-16	6983-6984	.	

#Text=However, a different bin size set through a range join hint always overrides the one set through the parameter.
32-1	6985-6992	However	
32-2	6992-6993	,	
32-3	6994-6995	a	
32-4	6996-7005	different	
32-5	7006-7009	bin	
32-6	7010-7014	size	
32-7	7015-7018	set	
32-8	7019-7026	through	
32-9	7027-7028	a	
32-10	7029-7034	range	
32-11	7035-7039	join	
32-12	7040-7044	hint	
32-13	7045-7051	always	
32-14	7052-7061	overrides	
32-15	7062-7065	the	
32-16	7066-7069	one	
32-17	7070-7073	set	
32-18	7074-7081	through	
32-19	7082-7085	the	
32-20	7086-7095	parameter	
32-21	7095-7096	.	

#Text=Choose the bin size
#Text=The effectiveness of the range join optimization depends on choosing the appropriate bin size.
33-1	7097-7103	Choose	
33-2	7104-7107	the	
33-3	7108-7111	bin	
33-4	7112-7116	size	
33-5	7117-7120	The	
33-6	7121-7134	effectiveness	
33-7	7135-7137	of	
33-8	7138-7141	the	
33-9	7142-7147	range	
33-10	7148-7152	join	
33-11	7153-7165	optimization	
33-12	7166-7173	depends	
33-13	7174-7176	on	
33-14	7177-7185	choosing	
33-15	7186-7189	the	
33-16	7190-7201	appropriate	
33-17	7202-7205	bin	
33-18	7206-7210	size	
33-19	7210-7211	.	

#Text=A small bin size results in a larger number of bins, which helps in filtering the potential matches.
34-1	7212-7213	A	
34-2	7214-7219	small	
34-3	7220-7223	bin	
34-4	7224-7228	size	
34-5	7229-7236	results	
34-6	7237-7239	in	
34-7	7240-7241	a	
34-8	7242-7248	larger	
34-9	7249-7255	number	
34-10	7256-7258	of	
34-11	7259-7263	bins	
34-12	7263-7264	,	
34-13	7265-7270	which	
34-14	7271-7276	helps	
34-15	7277-7279	in	
34-16	7280-7289	filtering	
34-17	7290-7293	the	
34-18	7294-7303	potential	
34-19	7304-7311	matches	
34-20	7311-7312	.	

#Text=However, it becomes inefficient if the bin size is significantly smaller than the encountered value intervals, and the value intervals overlap multiple bin intervals.
35-1	7313-7320	However	
35-2	7320-7321	,	
35-3	7322-7324	it	
35-4	7325-7332	becomes	
35-5	7333-7344	inefficient	
35-6	7345-7347	if	
35-7	7348-7351	the	
35-8	7352-7355	bin	
35-9	7356-7360	size	
35-10	7361-7363	is	
35-11	7364-7377	significantly	
35-12	7378-7385	smaller	
35-13	7386-7390	than	
35-14	7391-7394	the	
35-15	7395-7406	encountered	
35-16	7407-7412	value	
35-17	7413-7422	intervals	
35-18	7422-7423	,	
35-19	7424-7427	and	
35-20	7428-7431	the	
35-21	7432-7437	value	
35-22	7438-7447	intervals	
35-23	7448-7455	overlap	
35-24	7456-7464	multiple	
35-25	7465-7468	bin	
35-26	7469-7478	intervals	
35-27	7478-7479	.	

#Text=For example, with a condition p BETWEEN start AND end, where start is 1,000,000 and end is 1,999,999, and a bin size of 10, the value interval overlaps with 100,000 bins.
36-1	7480-7483	For	
36-2	7484-7491	example	
36-3	7491-7492	,	
36-4	7493-7497	with	
36-5	7498-7499	a	
36-6	7500-7509	condition	
36-7	7510-7511	p	
36-8	7512-7519	BETWEEN	
36-9	7520-7525	start	
36-10	7526-7529	AND	
36-11	7530-7533	end	
36-12	7533-7534	,	
36-13	7535-7540	where	
36-14	7541-7546	start	
36-15	7547-7549	is	
36-16	7550-7559	1,000,000	
36-17	7560-7563	and	
36-18	7564-7567	end	
36-19	7568-7570	is	
36-20	7571-7580	1,999,999	
36-21	7580-7581	,	
36-22	7582-7585	and	
36-23	7586-7587	a	
36-24	7588-7591	bin	
36-25	7592-7596	size	
36-26	7597-7599	of	
36-27	7600-7602	10	
36-28	7602-7603	,	
36-29	7604-7607	the	
36-30	7608-7613	value	
36-31	7614-7622	interval	
36-32	7623-7631	overlaps	
36-33	7632-7636	with	
36-34	7637-7644	100,000	
36-35	7645-7649	bins	
36-36	7649-7650	.	

#Text=If the length of the interval is fairly uniform and known, we recommend that you set the bin size to the typical expected length of the value interval.
37-1	7651-7653	If	
37-2	7654-7657	the	
37-3	7658-7664	length	
37-4	7665-7667	of	
37-5	7668-7671	the	
37-6	7672-7680	interval	
37-7	7681-7683	is	
37-8	7684-7690	fairly	
37-9	7691-7698	uniform	
37-10	7699-7702	and	
37-11	7703-7708	known	
37-12	7708-7709	,	
37-13	7710-7712	we	
37-14	7713-7722	recommend	
37-15	7723-7727	that	
37-16	7728-7731	you	
37-17	7732-7735	set	
37-18	7736-7739	the	
37-19	7740-7743	bin	
37-20	7744-7748	size	
37-21	7749-7751	to	
37-22	7752-7755	the	
37-23	7756-7763	typical	
37-24	7764-7772	expected	
37-25	7773-7779	length	
37-26	7780-7782	of	
37-27	7783-7786	the	
37-28	7787-7792	value	
37-29	7793-7801	interval	
37-30	7801-7802	.	

#Text=However, if the length of the interval is varying and skewed, a balance must be found to set a bin size that filters the short intervals efficiently, while preventing the long intervals from overlapping too many bins.
38-1	7803-7810	However	
38-2	7810-7811	,	
38-3	7812-7814	if	
38-4	7815-7818	the	
38-5	7819-7825	length	
38-6	7826-7828	of	
38-7	7829-7832	the	
38-8	7833-7841	interval	
38-9	7842-7844	is	
38-10	7845-7852	varying	
38-11	7853-7856	and	
38-12	7857-7863	skewed	
38-13	7863-7864	,	
38-14	7865-7866	a	
38-15	7867-7874	balance	
38-16	7875-7879	must	
38-17	7880-7882	be	
38-18	7883-7888	found	
38-19	7889-7891	to	
38-20	7892-7895	set	
38-21	7896-7897	a	
38-22	7898-7901	bin	
38-23	7902-7906	size	
38-24	7907-7911	that	
38-25	7912-7919	filters	
38-26	7920-7923	the	
38-27	7924-7929	short	
38-28	7930-7939	intervals	
38-29	7940-7951	efficiently	
38-30	7951-7952	,	
38-31	7953-7958	while	
38-32	7959-7969	preventing	
38-33	7970-7973	the	
38-34	7974-7978	long	
38-35	7979-7988	intervals	
38-36	7989-7993	from	
38-37	7994-8005	overlapping	
38-38	8006-8009	too	
38-39	8010-8014	many	
38-40	8015-8019	bins	
38-41	8019-8020	.	

#Text=Assuming a table ranges, with intervals that are between columns start and end, you can determine different percentiles of the skewed interval length value with the following query:
#Text=SELECT APPROX_PERCENTILE(CAST(end - start AS DOUBLE), ARRAY(0.5, 0.9, 0.99, 0.999, 0.9999)) FROM ranges
#Text=A recommended setting of bin size would be the maximum of the value at the 90th percentile, or the value at the 99th percentile divided by 10, or the value at the 99.9th percentile divided by 100 and so on.
39-1	8021-8029	Assuming	
39-2	8030-8031	a	
39-3	8032-8037	table	
39-4	8038-8044	ranges	
39-5	8044-8045	,	
39-6	8046-8050	with	
39-7	8051-8060	intervals	
39-8	8061-8065	that	
39-9	8066-8069	are	
39-10	8070-8077	between	
39-11	8078-8085	columns	
39-12	8086-8091	start	
39-13	8092-8095	and	
39-14	8096-8099	end	
39-15	8099-8100	,	
39-16	8101-8104	you	
39-17	8105-8108	can	
39-18	8109-8118	determine	
39-19	8119-8128	different	
39-20	8129-8140	percentiles	
39-21	8141-8143	of	
39-22	8144-8147	the	
39-23	8148-8154	skewed	
39-24	8155-8163	interval	
39-25	8164-8170	length	
39-26	8171-8176	value	
39-27	8177-8181	with	
39-28	8182-8185	the	
39-29	8186-8195	following	
39-30	8196-8201	query	
39-31	8201-8202	:	
39-32	8203-8209	SELECT	
39-33	8210-8227	APPROX_PERCENTILE	
39-34	8227-8228	(	
39-35	8228-8232	CAST	
39-36	8232-8233	(	
39-37	8233-8236	end	
39-38	8237-8238	-	
39-39	8239-8244	start	
39-40	8245-8247	AS	
39-41	8248-8254	DOUBLE	
39-42	8254-8255	)	
39-43	8255-8256	,	
39-44	8257-8262	ARRAY	
39-45	8262-8263	(	
39-46	8263-8266	0.5	
39-47	8266-8267	,	
39-48	8268-8271	0.9	
39-49	8271-8272	,	
39-50	8273-8277	0.99	
39-51	8277-8278	,	
39-52	8279-8284	0.999	
39-53	8284-8285	,	
39-54	8286-8292	0.9999	
39-55	8292-8293	)	
39-56	8293-8294	)	
39-57	8295-8299	FROM	
39-58	8300-8306	ranges	
39-59	8307-8308	A	
39-60	8309-8320	recommended	
39-61	8321-8328	setting	
39-62	8329-8331	of	
39-63	8332-8335	bin	
39-64	8336-8340	size	
39-65	8341-8346	would	
39-66	8347-8349	be	
39-67	8350-8353	the	
39-68	8354-8361	maximum	
39-69	8362-8364	of	
39-70	8365-8368	the	
39-71	8369-8374	value	
39-72	8375-8377	at	
39-73	8378-8381	the	
39-74	8382-8386	90th	
39-75	8387-8397	percentile	
39-76	8397-8398	,	
39-77	8399-8401	or	
39-78	8402-8405	the	
39-79	8406-8411	value	
39-80	8412-8414	at	
39-81	8415-8418	the	
39-82	8419-8423	99th	
39-83	8424-8434	percentile	
39-84	8435-8442	divided	
39-85	8443-8445	by	
39-86	8446-8448	10	
39-87	8448-8449	,	
39-88	8450-8452	or	
39-89	8453-8456	the	
39-90	8457-8462	value	
39-91	8463-8465	at	
39-92	8466-8469	the	
39-93	8470-8476	99.9th	
39-94	8477-8487	percentile	
39-95	8488-8495	divided	
39-96	8496-8498	by	
39-97	8499-8502	100	
39-98	8503-8506	and	
39-99	8507-8509	so	
39-100	8510-8512	on	
39-101	8512-8513	.	

#Text=The rationale is:
#Text=If the value at the 90th percentile is the bin size, only 10% of the value interval lengths are longer than the bin interval, so span more than 2 adjacent bin intervals.
40-1	8514-8517	The	
40-2	8518-8527	rationale	
40-3	8528-8530	is	
40-4	8530-8531	:	
40-5	8532-8534	If	
40-6	8535-8538	the	
40-7	8539-8544	value	
40-8	8545-8547	at	
40-9	8548-8551	the	
40-10	8552-8556	90th	
40-11	8557-8567	percentile	
40-12	8568-8570	is	
40-13	8571-8574	the	
40-14	8575-8578	bin	
40-15	8579-8583	size	
40-16	8583-8584	,	
40-17	8585-8589	only	
40-18	8590-8593	10%	
40-19	8594-8596	of	
40-20	8597-8600	the	
40-21	8601-8606	value	
40-22	8607-8615	interval	
40-23	8616-8623	lengths	
40-24	8624-8627	are	
40-25	8628-8634	longer	
40-26	8635-8639	than	
40-27	8640-8643	the	
40-28	8644-8647	bin	
40-29	8648-8656	interval	
40-30	8656-8657	,	
40-31	8658-8660	so	
40-32	8661-8665	span	
40-33	8666-8670	more	
40-34	8671-8675	than	
40-35	8676-8677	2	
40-36	8678-8686	adjacent	
40-37	8687-8690	bin	
40-38	8691-8700	intervals	
40-39	8700-8701	.	

#Text=If the value at the 99th percentile is the bin size, only 1% of the value interval lengths span more than 11 adjacent bin intervals.
41-1	8702-8704	If	
41-2	8705-8708	the	
41-3	8709-8714	value	
41-4	8715-8717	at	
41-5	8718-8721	the	
41-6	8722-8726	99th	
41-7	8727-8737	percentile	
41-8	8738-8740	is	
41-9	8741-8744	the	
41-10	8745-8748	bin	
41-11	8749-8753	size	
41-12	8753-8754	,	
41-13	8755-8759	only	
41-14	8760-8762	1%	
41-15	8763-8765	of	
41-16	8766-8769	the	
41-17	8770-8775	value	
41-18	8776-8784	interval	
41-19	8785-8792	lengths	
41-20	8793-8797	span	
41-21	8798-8802	more	
41-22	8803-8807	than	
41-23	8808-8810	11	
41-24	8811-8819	adjacent	
41-25	8820-8823	bin	
41-26	8824-8833	intervals	
41-27	8833-8834	.	

#Text=If the value at the 99.9th percentile is the bin size, only 0.1% of the value interval lengths span more than 101 adjacent bin intervals.
42-1	8835-8837	If	
42-2	8838-8841	the	
42-3	8842-8847	value	
42-4	8848-8850	at	
42-5	8851-8854	the	
42-6	8855-8861	99.9th	
42-7	8862-8872	percentile	
42-8	8873-8875	is	
42-9	8876-8879	the	
42-10	8880-8883	bin	
42-11	8884-8888	size	
42-12	8888-8889	,	
42-13	8890-8894	only	
42-14	8895-8899	0.1%	
42-15	8900-8902	of	
42-16	8903-8906	the	
42-17	8907-8912	value	
42-18	8913-8921	interval	
42-19	8922-8929	lengths	
42-20	8930-8934	span	
42-21	8935-8939	more	
42-22	8940-8944	than	
42-23	8945-8948	101	
42-24	8949-8957	adjacent	
42-25	8958-8961	bin	
42-26	8962-8971	intervals	
42-27	8971-8972	.	

#Text=The same can be repeated for the values at the 99.99th, the 99.999th percentile, and so on if needed.
43-1	8973-8976	The	
43-2	8977-8981	same	
43-3	8982-8985	can	
43-4	8986-8988	be	
43-5	8989-8997	repeated	
43-6	8998-9001	for	
43-7	9002-9005	the	
43-8	9006-9012	values	
43-9	9013-9015	at	
43-10	9016-9019	the	
43-11	9020-9027	99.99th	
43-12	9027-9028	,	
43-13	9029-9032	the	
43-14	9033-9041	99.999th	
43-15	9042-9052	percentile	
43-16	9052-9053	,	
43-17	9054-9057	and	
43-18	9058-9060	so	
43-19	9061-9063	on	
43-20	9064-9066	if	
43-21	9067-9073	needed	
43-22	9073-9074	.	

#Text=The described method limits the amount of skewed long value intervals that overlap multiple bin intervals.
44-1	9075-9078	The	
44-2	9079-9088	described	
44-3	9089-9095	method	
44-4	9096-9102	limits	
44-5	9103-9106	the	
44-6	9107-9113	amount	
44-7	9114-9116	of	
44-8	9117-9123	skewed	
44-9	9124-9128	long	
44-10	9129-9134	value	
44-11	9135-9144	intervals	
44-12	9145-9149	that	
44-13	9150-9157	overlap	
44-14	9158-9166	multiple	
44-15	9167-9170	bin	
44-16	9171-9180	intervals	
44-17	9180-9181	.	

#Text=The bin size value obtained this way is only a starting point for fine tuning; actual results may depend on the specific workload.
#Text=© Databricks 2021.
45-1	9182-9185	The	
45-2	9186-9189	bin	
45-3	9190-9194	size	
45-4	9195-9200	value	
45-5	9201-9209	obtained	
45-6	9210-9214	this	
45-7	9215-9218	way	
45-8	9219-9221	is	
45-9	9222-9226	only	
45-10	9227-9228	a	
45-11	9229-9237	starting	
45-12	9238-9243	point	
45-13	9244-9247	for	
45-14	9248-9252	fine	
45-15	9253-9259	tuning	
45-16	9259-9260	;	
45-17	9261-9267	actual	
45-18	9268-9275	results	
45-19	9276-9279	may	
45-20	9280-9286	depend	
45-21	9287-9289	on	
45-22	9290-9293	the	
45-23	9294-9302	specific	
45-24	9303-9311	workload	
45-25	9311-9312	.	
45-26	9313-9314	©	
45-27	9315-9325	Databricks	
45-28	9326-9330	2021	
45-29	9330-9331	.	

#Text=All rights reserved.
46-1	9332-9335	All	
46-2	9336-9342	rights	
46-3	9343-9351	reserved	
46-4	9351-9352	.	

#Text=Apache, Apache Spark, Spark, and the Spark logo are trademarks of the Apache Software Foundation.
47-1	9353-9359	Apache	
47-2	9359-9360	,	
47-3	9361-9367	Apache	
47-4	9368-9373	Spark	
47-5	9373-9374	,	
47-6	9375-9380	Spark	
47-7	9380-9381	,	
47-8	9382-9385	and	
47-9	9386-9389	the	
47-10	9390-9395	Spark	
47-11	9396-9400	logo	
47-12	9401-9404	are	
47-13	9405-9415	trademarks	
47-14	9416-9418	of	
47-15	9419-9422	the	
47-16	9423-9429	Apache	
47-17	9430-9438	Software	
47-18	9439-9449	Foundation	
47-19	9449-9450	.	

#Text=Send us feedback
#Text=| Privacy Policy | Terms of Use
48-1	9451-9455	Send	
48-2	9456-9458	us	
48-3	9459-9467	feedback	
48-4	9468-9469	|	
48-5	9470-9477	Privacy	
48-6	9478-9484	Policy	
48-7	9485-9486	|	
48-8	9487-9492	Terms	
48-9	9493-9495	of	
48-10	9496-9499	Use	
