#FORMAT=WebAnno TSV 3.3


#Text=Distributed Systems Authority - Ideas behind Reliable, Scalable, and Maintenable Systems
#Text=Skip to content
#Text=Distributed Systems Authority
#Text=Ideas behind Reliable, Scalable, and Maintenable Systems
#Text=Blog
#Text=Videos
#Text=Distributed Systems Authority
#Text=Ideas behind Reliable, Scalable, and Maintenable Systems
#Text=Toggle Navigation
#Text=Toggle Navigation
#Text=Blog
#Text=Videos
#Text=Search for...
1-1	0-11	Distributed	
1-2	12-19	Systems	
1-3	20-29	Authority	
1-4	30-31	-	
1-5	32-37	Ideas	
1-6	38-44	behind	
1-7	45-53	Reliable	
1-8	53-54	,	
1-9	55-63	Scalable	
1-10	63-64	,	
1-11	65-68	and	
1-12	69-80	Maintenable	
1-13	81-88	Systems	
1-14	89-93	Skip	
1-15	94-96	to	
1-16	97-104	content	
1-17	105-116	Distributed	
1-18	117-124	Systems	
1-19	125-134	Authority	
1-20	135-140	Ideas	
1-21	141-147	behind	
1-22	148-156	Reliable	
1-23	156-157	,	
1-24	158-166	Scalable	
1-25	166-167	,	
1-26	168-171	and	
1-27	172-183	Maintenable	
1-28	184-191	Systems	
1-29	192-196	Blog	
1-30	197-203	Videos	
1-31	204-215	Distributed	
1-32	216-223	Systems	
1-33	224-233	Authority	
1-34	234-239	Ideas	
1-35	240-246	behind	
1-36	247-255	Reliable	
1-37	255-256	,	
1-38	257-265	Scalable	
1-39	265-266	,	
1-40	267-270	and	
1-41	271-282	Maintenable	
1-42	283-290	Systems	
1-43	291-297	Toggle	
1-44	298-308	Navigation	
1-45	309-315	Toggle	
1-46	316-326	Navigation	
1-47	327-331	Blog	
1-48	332-338	Videos	
1-49	339-345	Search	
1-50	346-349	for	
1-51	349-350	.	
1-52	350-351	.	
1-53	351-352	.	

#Text=MySQL High Performance Part 3 – EXPLAIN Queriesby Lucian OpreaJanuary 7, 2021January 10, 2021Introduction Once we have a candidate query for optimization, we need to analyze why it is slow, or why it impacts the system soo much.… Read More »MySQL High Performance Part 3 – EXPLAIN Queries
#Text=MySQL High Performance Part 2 – Finding Candidates for Query Optimizationsby Lucian OpreaJanuary 7, 2021January 10, 2021Key Takeaways The Performance Schema is a gold mine for finding querying to optimize becuase it allows us to collecting the necessary data to make… Read More »MySQL High Performance Part 2 – Finding Candidates for Query Optimizations
#Text=MySQL Performance Tuning Part 1 – Architectureby Lucian OpreaJanuary 1, 2021January 10, 2021Key Takeaways We need to understand MySQL design so that we can work with it, and not against it.
2-1	353-358	MySQL	
2-2	359-363	High	
2-3	364-375	Performance	
2-4	376-380	Part	
2-5	381-382	3	
2-6	383-384	–	
2-7	385-392	EXPLAIN	
2-8	393-402	Queriesby	
2-9	403-409	Lucian	
2-10	410-422	OpreaJanuary	
2-11	423-424	7	
2-12	424-425	,	
2-13	426-437	2021January	
2-14	438-440	10	
2-15	440-441	,	
2-16	442-458	2021Introduction	
2-17	459-463	Once	
2-18	464-466	we	
2-19	467-471	have	
2-20	472-473	a	
2-21	474-483	candidate	
2-22	484-489	query	
2-23	490-493	for	
2-24	494-506	optimization	
2-25	506-507	,	
2-26	508-510	we	
2-27	511-515	need	
2-28	516-518	to	
2-29	519-526	analyze	
2-30	527-530	why	
2-31	531-533	it	
2-32	534-536	is	
2-33	537-541	slow	
2-34	541-542	,	
2-35	543-545	or	
2-36	546-549	why	
2-37	550-552	it	
2-38	553-560	impacts	
2-39	561-564	the	
2-40	565-571	system	
2-41	572-575	soo	
2-42	576-580	much	
2-43	580-581	.	
2-44	581-582	…	
2-45	582-583	 	
2-46	583-587	Read	
2-47	588-592	More	
2-48	593-594	»	
2-49	594-599	MySQL	
2-50	600-604	High	
2-51	605-616	Performance	
2-52	617-621	Part	
2-53	622-623	3	
2-54	624-625	–	
2-55	626-633	EXPLAIN	
2-56	634-641	Queries	
2-57	642-647	MySQL	
2-58	648-652	High	
2-59	653-664	Performance	
2-60	665-669	Part	
2-61	670-671	2	
2-62	672-673	–	
2-63	674-681	Finding	
2-64	682-692	Candidates	
2-65	693-696	for	
2-66	697-702	Query	
2-67	703-718	Optimizationsby	
2-68	719-725	Lucian	
2-69	726-738	OpreaJanuary	
2-70	739-740	7	
2-71	740-741	,	
2-72	742-753	2021January	
2-73	754-756	10	
2-74	756-757	,	
2-75	758-765	2021Key	
2-76	766-775	Takeaways	
2-77	776-779	The	
2-78	780-791	Performance	
2-79	792-798	Schema	
2-80	799-801	is	
2-81	802-803	a	
2-82	804-808	gold	
2-83	809-813	mine	
2-84	814-817	for	
2-85	818-825	finding	
2-86	826-834	querying	
2-87	835-837	to	
2-88	838-846	optimize	
2-89	847-854	becuase	
2-90	855-857	it	
2-91	858-864	allows	
2-92	865-867	us	
2-93	868-870	to	
2-94	871-881	collecting	
2-95	882-885	the	
2-96	886-895	necessary	
2-97	896-900	data	
2-98	901-903	to	
2-99	904-908	make	
2-100	908-909	…	
2-101	909-910	 	
2-102	910-914	Read	
2-103	915-919	More	
2-104	920-921	»	
2-105	921-926	MySQL	
2-106	927-931	High	
2-107	932-943	Performance	
2-108	944-948	Part	
2-109	949-950	2	
2-110	951-952	–	
2-111	953-960	Finding	
2-112	961-971	Candidates	
2-113	972-975	for	
2-114	976-981	Query	
2-115	982-995	Optimizations	
2-116	996-1001	MySQL	
2-117	1002-1013	Performance	
2-118	1014-1020	Tuning	
2-119	1021-1025	Part	
2-120	1026-1027	1	
2-121	1028-1029	–	
2-122	1030-1044	Architectureby	
2-123	1045-1051	Lucian	
2-124	1052-1064	OpreaJanuary	
2-125	1065-1066	1	
2-126	1066-1067	,	
2-127	1068-1079	2021January	
2-128	1080-1082	10	
2-129	1082-1083	,	
2-130	1084-1091	2021Key	
2-131	1092-1101	Takeaways	
2-132	1102-1104	We	
2-133	1105-1109	need	
2-134	1110-1112	to	
2-135	1113-1123	understand	
2-136	1124-1129	MySQL	
2-137	1130-1136	design	
2-138	1137-1139	so	
2-139	1140-1144	that	
2-140	1145-1147	we	
2-141	1148-1151	can	
2-142	1152-1156	work	
2-143	1157-1161	with	
2-144	1162-1164	it	
2-145	1164-1165	,	
2-146	1166-1169	and	
2-147	1170-1173	not	
2-148	1174-1181	against	
2-149	1182-1184	it	
2-150	1184-1185	.	

#Text=Everything in InnoDB is an index.… Read More »MySQL Performance Tuning Part 1 – Architecture
#Text=DCA – Describe and demonstrate how to deploy a service on a Docker overlay networkby Lucian OpreaJune 1, 2020July 21, 2020In this article, we’re going to cover 2 main subjects of the networking domain for the Docker Certified Associate DCA certification.
3-1	1186-1196	Everything	
3-2	1197-1199	in	
3-3	1200-1206	InnoDB	
3-4	1207-1209	is	
3-5	1210-1212	an	
3-6	1213-1218	index	
3-7	1218-1219	.	
3-8	1219-1220	…	
3-9	1220-1221	 	
3-10	1221-1225	Read	
3-11	1226-1230	More	
3-12	1231-1232	»	
3-13	1232-1237	MySQL	
3-14	1238-1249	Performance	
3-15	1250-1256	Tuning	
3-16	1257-1261	Part	
3-17	1262-1263	1	
3-18	1264-1265	–	
3-19	1266-1278	Architecture	
3-20	1279-1282	DCA	
3-21	1283-1284	–	
3-22	1285-1293	Describe	
3-23	1294-1297	and	
3-24	1298-1309	demonstrate	
3-25	1310-1313	how	
3-26	1314-1316	to	
3-27	1317-1323	deploy	
3-28	1324-1325	a	
3-29	1326-1333	service	
3-30	1334-1336	on	
3-31	1337-1338	a	
3-32	1339-1345	Docker	
3-33	1346-1353	overlay	
3-34	1354-1363	networkby	
3-35	1364-1370	Lucian	
3-36	1371-1380	OpreaJune	
3-37	1381-1382	1	
3-38	1382-1383	,	
3-39	1384-1392	2020July	
3-40	1393-1395	21	
3-41	1395-1396	,	
3-42	1397-1403	2020In	
3-43	1404-1408	this	
3-44	1409-1416	article	
3-45	1416-1417	,	
3-46	1418-1420	we	
3-47	1420-1421	’	
3-48	1421-1423	re	
3-49	1424-1429	going	
3-50	1430-1432	to	
3-51	1433-1438	cover	
3-52	1439-1440	2	
3-53	1441-1445	main	
3-54	1446-1454	subjects	
3-55	1455-1457	of	
3-56	1458-1461	the	
3-57	1462-1472	networking	
3-58	1473-1479	domain	
3-59	1480-1483	for	
3-60	1484-1487	the	
3-61	1488-1494	Docker	
3-62	1495-1504	Certified	
3-63	1505-1514	Associate	
3-64	1515-1518	DCA	
3-65	1519-1532	certification	
3-66	1532-1533	.	

#Text=Describe and demonstrate how… Read More »DCA – Describe and demonstrate how to deploy a service on a Docker overlay network
#Text=Solr 8 Facet Query – Hands-On Exampleby Lucian OpreaMay 2, 2020May 31, 2020Faceted search has become a critical feature for enhancing user search experience for all types of search applications.
4-1	1534-1542	Describe	
4-2	1543-1546	and	
4-3	1547-1558	demonstrate	
4-4	1559-1562	how	
4-5	1562-1563	…	
4-6	1563-1564	 	
4-7	1564-1568	Read	
4-8	1569-1573	More	
4-9	1574-1575	»	
4-10	1575-1578	DCA	
4-11	1579-1580	–	
4-12	1581-1589	Describe	
4-13	1590-1593	and	
4-14	1594-1605	demonstrate	
4-15	1606-1609	how	
4-16	1610-1612	to	
4-17	1613-1619	deploy	
4-18	1620-1621	a	
4-19	1622-1629	service	
4-20	1630-1632	on	
4-21	1633-1634	a	
4-22	1635-1641	Docker	
4-23	1642-1649	overlay	
4-24	1650-1657	network	
4-25	1658-1662	Solr	
4-26	1663-1664	8	
4-27	1665-1670	Facet	
4-28	1671-1676	Query	
4-29	1677-1678	–	
4-30	1679-1687	Hands-On	
4-31	1688-1697	Exampleby	
4-32	1698-1704	Lucian	
4-33	1705-1713	OpreaMay	
4-34	1714-1715	2	
4-35	1715-1716	,	
4-36	1717-1724	2020May	
4-37	1725-1727	31	
4-38	1727-1728	,	
4-39	1729-1740	2020Faceted	
4-40	1741-1747	search	
4-41	1748-1751	has	
4-42	1752-1758	become	
4-43	1759-1760	a	
4-44	1761-1769	critical	
4-45	1770-1777	feature	
4-46	1778-1781	for	
4-47	1782-1791	enhancing	
4-48	1792-1796	user	
4-49	1797-1803	search	
4-50	1804-1814	experience	
4-51	1815-1818	for	
4-52	1819-1822	all	
4-53	1823-1828	types	
4-54	1829-1831	of	
4-55	1832-1838	search	
4-56	1839-1851	applications	
4-57	1851-1852	.	

#Text=This article gives you an introduction to… Read More »Solr 8 Facet Query – Hands-On Example
#Text=Server Tuning Guideline – PostgreSQL 12 High Performance Guide (Part 10/12)by Lucian OpreaDecember 8, 2019December 8, 20192 CommentsKey takeaways The default values in the server configuration file have small memory settings.
5-1	1853-1857	This	
5-2	1858-1865	article	
5-3	1866-1871	gives	
5-4	1872-1875	you	
5-5	1876-1878	an	
5-6	1879-1891	introduction	
5-7	1892-1894	to	
5-8	1894-1895	…	
5-9	1895-1896	 	
5-10	1896-1900	Read	
5-11	1901-1905	More	
5-12	1906-1907	»	
5-13	1907-1911	Solr	
5-14	1912-1913	8	
5-15	1914-1919	Facet	
5-16	1920-1925	Query	
5-17	1926-1927	–	
5-18	1928-1936	Hands-On	
5-19	1937-1944	Example	
5-20	1945-1951	Server	
5-21	1952-1958	Tuning	
5-22	1959-1968	Guideline	
5-23	1969-1970	–	
5-24	1971-1981	PostgreSQL	
5-25	1982-1984	12	
5-26	1985-1989	High	
5-27	1990-2001	Performance	
5-28	2002-2007	Guide	
5-29	2008-2009	(	
5-30	2009-2013	Part	
5-31	2014-2016	10	
5-32	2016-2017	/	
5-33	2017-2019	12	
5-34	2019-2020	)	
5-35	2020-2022	by	
5-36	2023-2029	Lucian	
5-37	2030-2043	OpreaDecember	
5-38	2044-2045	8	
5-39	2045-2046	,	
5-40	2047-2059	2019December	
5-41	2060-2061	8	
5-42	2061-2062	,	
5-43	2063-2068	20192	
5-44	2069-2080	CommentsKey	
5-45	2081-2090	takeaways	
5-46	2091-2094	The	
5-47	2095-2102	default	
5-48	2103-2109	values	
5-49	2110-2112	in	
5-50	2113-2116	the	
5-51	2117-2123	server	
5-52	2124-2137	configuration	
5-53	2138-2142	file	
5-54	2143-2147	have	
5-55	2148-2153	small	
5-56	2154-2160	memory	
5-57	2161-2169	settings	
5-58	2169-2170	.	

#Text=You should carefully modify primary memory configurations, shared_buffers and work_mem, in… Read More »Server Tuning Guideline – PostgreSQL 12 High Performance Guide (Part 10/12)
#Text=Query Optimizations Tips – PostgreSQL 12 High Performance Guide (Part 9/12)by Lucian OpreaNovember 28, 2019January 18, 2020Key Takeaways First question the semantic correctness of a statement before attacking the performance problem We should avoid SELECT *, ORDER BY and DISTINCT unless… Read More »Query Optimizations Tips – PostgreSQL 12 High Performance Guide (Part 9/12)
#Text=Spotting Query Problems – PostgreSQL 12 High Performance Guide (Part 8/12)by Lucian OpreaNovember 2, 2019November 2, 2019Key takeaways: Queries are executed as a series of nodes that each do a small task, such as fetching data aggregation or sorting.
6-1	2171-2174	You	
6-2	2175-2181	should	
6-3	2182-2191	carefully	
6-4	2192-2198	modify	
6-5	2199-2206	primary	
6-6	2207-2213	memory	
6-7	2214-2228	configurations	
6-8	2228-2229	,	
6-9	2230-2244	shared_buffers	
6-10	2245-2248	and	
6-11	2249-2257	work_mem	
6-12	2257-2258	,	
6-13	2259-2261	in	
6-14	2261-2262	…	
6-15	2262-2263	 	
6-16	2263-2267	Read	
6-17	2268-2272	More	
6-18	2273-2274	»	
6-19	2274-2280	Server	
6-20	2281-2287	Tuning	
6-21	2288-2297	Guideline	
6-22	2298-2299	–	
6-23	2300-2310	PostgreSQL	
6-24	2311-2313	12	
6-25	2314-2318	High	
6-26	2319-2330	Performance	
6-27	2331-2336	Guide	
6-28	2337-2338	(	
6-29	2338-2342	Part	
6-30	2343-2345	10	
6-31	2345-2346	/	
6-32	2346-2348	12	
6-33	2348-2349	)	
6-34	2350-2355	Query	
6-35	2356-2369	Optimizations	
6-36	2370-2374	Tips	
6-37	2375-2376	–	
6-38	2377-2387	PostgreSQL	
6-39	2388-2390	12	
6-40	2391-2395	High	
6-41	2396-2407	Performance	
6-42	2408-2413	Guide	
6-43	2414-2415	(	
6-44	2415-2419	Part	
6-45	2420-2421	9	
6-46	2421-2422	/	
6-47	2422-2424	12	
6-48	2424-2425	)	
6-49	2425-2427	by	
6-50	2428-2434	Lucian	
6-51	2435-2448	OpreaNovember	
6-52	2449-2451	28	
6-53	2451-2452	,	
6-54	2453-2464	2019January	
6-55	2465-2467	18	
6-56	2467-2468	,	
6-57	2469-2476	2020Key	
6-58	2477-2486	Takeaways	
6-59	2487-2492	First	
6-60	2493-2501	question	
6-61	2502-2505	the	
6-62	2506-2514	semantic	
6-63	2515-2526	correctness	
6-64	2527-2529	of	
6-65	2530-2531	a	
6-66	2532-2541	statement	
6-67	2542-2548	before	
6-68	2549-2558	attacking	
6-69	2559-2562	the	
6-70	2563-2574	performance	
6-71	2575-2582	problem	
6-72	2583-2585	We	
6-73	2586-2592	should	
6-74	2593-2598	avoid	
6-75	2599-2605	SELECT	
6-76	2606-2607	*	
6-77	2607-2608	,	
6-78	2609-2614	ORDER	
6-79	2615-2617	BY	
6-80	2618-2621	and	
6-81	2622-2630	DISTINCT	
6-82	2631-2637	unless	
6-83	2637-2638	…	
6-84	2638-2639	 	
6-85	2639-2643	Read	
6-86	2644-2648	More	
6-87	2649-2650	»	
6-88	2650-2655	Query	
6-89	2656-2669	Optimizations	
6-90	2670-2674	Tips	
6-91	2675-2676	–	
6-92	2677-2687	PostgreSQL	
6-93	2688-2690	12	
6-94	2691-2695	High	
6-95	2696-2707	Performance	
6-96	2708-2713	Guide	
6-97	2714-2715	(	
6-98	2715-2719	Part	
6-99	2720-2721	9	
6-100	2721-2722	/	
6-101	2722-2724	12	
6-102	2724-2725	)	
6-103	2726-2734	Spotting	
6-104	2735-2740	Query	
6-105	2741-2749	Problems	
6-106	2750-2751	–	
6-107	2752-2762	PostgreSQL	
6-108	2763-2765	12	
6-109	2766-2770	High	
6-110	2771-2782	Performance	
6-111	2783-2788	Guide	
6-112	2789-2790	(	
6-113	2790-2794	Part	
6-114	2795-2796	8	
6-115	2796-2797	/	
6-116	2797-2799	12	
6-117	2799-2800	)	
6-118	2800-2802	by	
6-119	2803-2809	Lucian	
6-120	2810-2823	OpreaNovember	
6-121	2824-2825	2	
6-122	2825-2826	,	
6-123	2827-2839	2019November	
6-124	2840-2841	2	
6-125	2841-2842	,	
6-126	2843-2850	2019Key	
6-127	2851-2860	takeaways	
6-128	2860-2861	:	
6-129	2862-2869	Queries	
6-130	2870-2873	are	
6-131	2874-2882	executed	
6-132	2883-2885	as	
6-133	2886-2887	a	
6-134	2888-2894	series	
6-135	2895-2897	of	
6-136	2898-2903	nodes	
6-137	2904-2908	that	
6-138	2909-2913	each	
6-139	2914-2916	do	
6-140	2917-2918	a	
6-141	2919-2924	small	
6-142	2925-2929	task	
6-143	2929-2930	,	
6-144	2931-2935	such	
6-145	2936-2938	as	
6-146	2939-2947	fetching	
6-147	2948-2952	data	
6-148	2953-2964	aggregation	
6-149	2965-2967	or	
6-150	2968-2975	sorting	
6-151	2975-2976	.	

#Text=Sequential scans… Read More »Spotting Query Problems – PostgreSQL 12 High Performance Guide (Part 8/12)
#Text=Making Use of Statistics – PostgreSQL 12 High Performance Guide (Part 7/12)by Lucian OpreaOctober 24, 2019January 10, 2020Key takeaways: The database statistics are exposed using views.
7-1	2977-2987	Sequential	
7-2	2988-2993	scans	
7-3	2993-2994	…	
7-4	2994-2995	 	
7-5	2995-2999	Read	
7-6	3000-3004	More	
7-7	3005-3006	»	
7-8	3006-3014	Spotting	
7-9	3015-3020	Query	
7-10	3021-3029	Problems	
7-11	3030-3031	–	
7-12	3032-3042	PostgreSQL	
7-13	3043-3045	12	
7-14	3046-3050	High	
7-15	3051-3062	Performance	
7-16	3063-3068	Guide	
7-17	3069-3070	(	
7-18	3070-3074	Part	
7-19	3075-3076	8	
7-20	3076-3077	/	
7-21	3077-3079	12	
7-22	3079-3080	)	
7-23	3081-3087	Making	
7-24	3088-3091	Use	
7-25	3092-3094	of	
7-26	3095-3105	Statistics	
7-27	3106-3107	–	
7-28	3108-3118	PostgreSQL	
7-29	3119-3121	12	
7-30	3122-3126	High	
7-31	3127-3138	Performance	
7-32	3139-3144	Guide	
7-33	3145-3146	(	
7-34	3146-3150	Part	
7-35	3151-3152	7	
7-36	3152-3153	/	
7-37	3153-3155	12	
7-38	3155-3156	)	
7-39	3156-3158	by	
7-40	3159-3165	Lucian	
7-41	3166-3178	OpreaOctober	
7-42	3179-3181	24	
7-43	3181-3182	,	
7-44	3183-3194	2019January	
7-45	3195-3197	10	
7-46	3197-3198	,	
7-47	3199-3206	2020Key	
7-48	3207-3216	takeaways	
7-49	3216-3217	:	
7-50	3218-3221	The	
7-51	3222-3230	database	
7-52	3231-3241	statistics	
7-53	3242-3245	are	
7-54	3246-3253	exposed	
7-55	3254-3259	using	
7-56	3260-3265	views	
7-57	3265-3266	.	

#Text=The fastest way to spot performance issues is by using the pg_stat_statements view Particularly valuable statistics… Read More »Making Use of Statistics – PostgreSQL 12 High Performance Guide (Part 7/12)
#Text=Index Optimization Techniques – PostgreSQL 12 High Performance Guide (Part 6/12)by Lucian OpreaOctober 19, 2019October 23, 2019Key takeaways Adding an index increases overhead every time you add or change rows in a table.
8-1	3267-3270	The	
8-2	3271-3278	fastest	
8-3	3279-3282	way	
8-4	3283-3285	to	
8-5	3286-3290	spot	
8-6	3291-3302	performance	
8-7	3303-3309	issues	
8-8	3310-3312	is	
8-9	3313-3315	by	
8-10	3316-3321	using	
8-11	3322-3325	the	
8-12	3326-3344	pg_stat_statements	
8-13	3345-3349	view	
8-14	3350-3362	Particularly	
8-15	3363-3371	valuable	
8-16	3372-3382	statistics	
8-17	3382-3383	…	
8-18	3383-3384	 	
8-19	3384-3388	Read	
8-20	3389-3393	More	
8-21	3394-3395	»	
8-22	3395-3401	Making	
8-23	3402-3405	Use	
8-24	3406-3408	of	
8-25	3409-3419	Statistics	
8-26	3420-3421	–	
8-27	3422-3432	PostgreSQL	
8-28	3433-3435	12	
8-29	3436-3440	High	
8-30	3441-3452	Performance	
8-31	3453-3458	Guide	
8-32	3459-3460	(	
8-33	3460-3464	Part	
8-34	3465-3466	7	
8-35	3466-3467	/	
8-36	3467-3469	12	
8-37	3469-3470	)	
8-38	3471-3476	Index	
8-39	3477-3489	Optimization	
8-40	3490-3500	Techniques	
8-41	3501-3502	–	
8-42	3503-3513	PostgreSQL	
8-43	3514-3516	12	
8-44	3517-3521	High	
8-45	3522-3533	Performance	
8-46	3534-3539	Guide	
8-47	3540-3541	(	
8-48	3541-3545	Part	
8-49	3546-3547	6	
8-50	3547-3548	/	
8-51	3548-3550	12	
8-52	3550-3551	)	
8-53	3551-3553	by	
8-54	3554-3560	Lucian	
8-55	3561-3573	OpreaOctober	
8-56	3574-3576	19	
8-57	3576-3577	,	
8-58	3578-3589	2019October	
8-59	3590-3592	23	
8-60	3592-3593	,	
8-61	3594-3601	2019Key	
8-62	3602-3611	takeaways	
8-63	3612-3618	Adding	
8-64	3619-3621	an	
8-65	3622-3627	index	
8-66	3628-3637	increases	
8-67	3638-3646	overhead	
8-68	3647-3652	every	
8-69	3653-3657	time	
8-70	3658-3661	you	
8-71	3662-3665	add	
8-72	3666-3668	or	
8-73	3669-3675	change	
8-74	3676-3680	rows	
8-75	3681-3683	in	
8-76	3684-3685	a	
8-77	3686-3691	table	
8-78	3691-3692	.	

#Text=Each index needs to satisfy enough queries to… Read More »Index Optimization Techniques – PostgreSQL 12 High Performance Guide (Part 6/12)
#Text=Next »
#Text=PostgreSQL High Performance Tuning Guide Course
#Text=Use the following coupon
#Text=to get 66% percent off.
9-1	3693-3697	Each	
9-2	3698-3703	index	
9-3	3704-3709	needs	
9-4	3710-3712	to	
9-5	3713-3720	satisfy	
9-6	3721-3727	enough	
9-7	3728-3735	queries	
9-8	3736-3738	to	
9-9	3738-3739	…	
9-10	3739-3740	 	
9-11	3740-3744	Read	
9-12	3745-3749	More	
9-13	3750-3751	»	
9-14	3751-3756	Index	
9-15	3757-3769	Optimization	
9-16	3770-3780	Techniques	
9-17	3781-3782	–	
9-18	3783-3793	PostgreSQL	
9-19	3794-3796	12	
9-20	3797-3801	High	
9-21	3802-3813	Performance	
9-22	3814-3819	Guide	
9-23	3820-3821	(	
9-24	3821-3825	Part	
9-25	3826-3827	6	
9-26	3827-3828	/	
9-27	3828-3830	12	
9-28	3830-3831	)	
9-29	3832-3836	Next	
9-30	3837-3838	»	
9-31	3839-3849	PostgreSQL	
9-32	3850-3854	High	
9-33	3855-3866	Performance	
9-34	3867-3873	Tuning	
9-35	3874-3879	Guide	
9-36	3880-3886	Course	
9-37	3887-3890	Use	
9-38	3891-3894	the	
9-39	3895-3904	following	
9-40	3905-3911	coupon	
9-41	3912-3914	to	
9-42	3915-3918	get	
9-43	3919-3922	66%	
9-44	3923-3930	percent	
9-45	3931-3934	off	
9-46	3934-3935	.	

#Text="LEARNING202104"
#Text=Check the Full Course
#Text=Search for:
#Text=Recent Posts
#Text=MySQL High Performance Part 3 – EXPLAIN Queries
#Text=MySQL High Performance Part 2 – Finding Candidates for Query Optimizations
#Text=MySQL Performance Tuning Part 1 – Architecture
#Text=DCA – Describe and demonstrate how to deploy a service on a Docker overlay network
#Text=Solr 8 Facet Query – Hands-On Example
#Text=Categories
#Text=Apache Solr
#Text=Docker Certified Associate
#Text=MySQL
#Text=PostgreSQL
#Text=Reactive Systems
#Text=Recent CommentsBriannoumb on Server Tuning Guideline – PostgreSQL 12 High Performance Guide (Part 10/12)Briannoumb on Server Tuning Guideline – PostgreSQL 12 High Performance Guide (Part 10/12)
10-1	3936-3937	"	
10-2	3937-3951	LEARNING202104	
10-3	3951-3952	"	
10-4	3953-3958	Check	
10-5	3959-3962	the	
10-6	3963-3967	Full	
10-7	3968-3974	Course	
10-8	3975-3981	Search	
10-9	3982-3985	for	
10-10	3985-3986	:	
10-11	3987-3993	Recent	
10-12	3994-3999	Posts	
10-13	4000-4005	MySQL	
10-14	4006-4010	High	
10-15	4011-4022	Performance	
10-16	4023-4027	Part	
10-17	4028-4029	3	
10-18	4030-4031	–	
10-19	4032-4039	EXPLAIN	
10-20	4040-4047	Queries	
10-21	4048-4053	MySQL	
10-22	4054-4058	High	
10-23	4059-4070	Performance	
10-24	4071-4075	Part	
10-25	4076-4077	2	
10-26	4078-4079	–	
10-27	4080-4087	Finding	
10-28	4088-4098	Candidates	
10-29	4099-4102	for	
10-30	4103-4108	Query	
10-31	4109-4122	Optimizations	
10-32	4123-4128	MySQL	
10-33	4129-4140	Performance	
10-34	4141-4147	Tuning	
10-35	4148-4152	Part	
10-36	4153-4154	1	
10-37	4155-4156	–	
10-38	4157-4169	Architecture	
10-39	4170-4173	DCA	
10-40	4174-4175	–	
10-41	4176-4184	Describe	
10-42	4185-4188	and	
10-43	4189-4200	demonstrate	
10-44	4201-4204	how	
10-45	4205-4207	to	
10-46	4208-4214	deploy	
10-47	4215-4216	a	
10-48	4217-4224	service	
10-49	4225-4227	on	
10-50	4228-4229	a	
10-51	4230-4236	Docker	
10-52	4237-4244	overlay	
10-53	4245-4252	network	
10-54	4253-4257	Solr	
10-55	4258-4259	8	
10-56	4260-4265	Facet	
10-57	4266-4271	Query	
10-58	4272-4273	–	
10-59	4274-4282	Hands-On	
10-60	4283-4290	Example	
10-61	4291-4301	Categories	
10-62	4302-4308	Apache	
10-63	4309-4313	Solr	
10-64	4314-4320	Docker	
10-65	4321-4330	Certified	
10-66	4331-4340	Associate	
10-67	4341-4346	MySQL	
10-68	4347-4357	PostgreSQL	
10-69	4358-4366	Reactive	
10-70	4367-4374	Systems	
10-71	4375-4381	Recent	
10-72	4382-4400	CommentsBriannoumb	
10-73	4401-4403	on	
10-74	4404-4410	Server	
10-75	4411-4417	Tuning	
10-76	4418-4427	Guideline	
10-77	4428-4429	–	
10-78	4430-4440	PostgreSQL	
10-79	4441-4443	12	
10-80	4444-4448	High	
10-81	4449-4460	Performance	
10-82	4461-4466	Guide	
10-83	4467-4468	(	
10-84	4468-4472	Part	
10-85	4473-4475	10	
10-86	4475-4476	/	
10-87	4476-4478	12	
10-88	4478-4479	)	
10-89	4479-4489	Briannoumb	
10-90	4490-4492	on	
10-91	4493-4499	Server	
10-92	4500-4506	Tuning	
10-93	4507-4516	Guideline	
10-94	4517-4518	–	
10-95	4519-4529	PostgreSQL	
10-96	4530-4532	12	
10-97	4533-4537	High	
10-98	4538-4549	Performance	
10-99	4550-4555	Guide	
10-100	4556-4557	(	
10-101	4557-4561	Part	
10-102	4562-4564	10	
10-103	4564-4565	/	
10-104	4565-4567	12	
10-105	4567-4568	)	
