#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value
#T_RL=webanno.custom.Relation|relation|BT_de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity


#Text=Top 3 Snowflake Performance Tuning Tactics — Analytics.Today
#Text=Skip to Content
#Text=Analytics.Today
#Text=Current Page:
#Text=Blog
#Text=About
#Text=Contact
#Text=Open Menu
#Text=Close Menu
#Text=Open Menu
#Text=Close Menu
#Text=Analytics.Today
#Text=Current Page:
#Text=Blog
#Text=About
#Text=Contact
#Text=Current Page:
#Text=Blog
#Text=About
#Text=Contact
#Text=Top 3 Snowflake Performance Tuning Tactics
#Text=Jul 17
#Text=Written By John Ryan
#Text=Image by Gino Crescoli from Pixabay
#Text=The Snowflake Data Cloud has an excellent reputation as an analytics platform for blisteringly fast query performance, but without indexes.
1-1	0-3	Top	_	_	_	_	
1-2	4-5	3	_	_	_	_	
1-3	6-15	Snowflake	_	_	_	_	
1-4	16-27	Performance	_	_	_	_	
1-5	28-34	Tuning	_	_	_	_	
1-6	35-42	Tactics	_	_	_	_	
1-7	43-44	—	_	_	_	_	
1-8	45-60	Analytics.Today	_	_	_	_	
1-9	61-65	Skip	_	_	_	_	
1-10	66-68	to	_	_	_	_	
1-11	69-76	Content	_	_	_	_	
1-12	77-92	Analytics.Today	_	_	_	_	
1-13	93-100	Current	_	_	_	_	
1-14	101-105	Page	_	_	_	_	
1-15	105-106	:	_	_	_	_	
1-16	107-111	Blog	_	_	_	_	
1-17	112-117	About	_	_	_	_	
1-18	118-125	Contact	_	_	_	_	
1-19	126-130	Open	_	_	_	_	
1-20	131-135	Menu	_	_	_	_	
1-21	136-141	Close	_	_	_	_	
1-22	142-146	Menu	_	_	_	_	
1-23	147-151	Open	_	_	_	_	
1-24	152-156	Menu	_	_	_	_	
1-25	157-162	Close	_	_	_	_	
1-26	163-167	Menu	_	_	_	_	
1-27	168-183	Analytics.Today	_	_	_	_	
1-28	184-191	Current	_	_	_	_	
1-29	192-196	Page	_	_	_	_	
1-30	196-197	:	_	_	_	_	
1-31	198-202	Blog	_	_	_	_	
1-32	203-208	About	_	_	_	_	
1-33	209-216	Contact	_	_	_	_	
1-34	217-224	Current	_	_	_	_	
1-35	225-229	Page	_	_	_	_	
1-36	229-230	:	_	_	_	_	
1-37	231-235	Blog	_	_	_	_	
1-38	236-241	About	_	_	_	_	
1-39	242-249	Contact	_	_	_	_	
1-40	250-253	Top	_	_	_	_	
1-41	254-255	3	_	_	_	_	
1-42	256-265	Snowflake	_	_	_	_	
1-43	266-277	Performance	_	_	_	_	
1-44	278-284	Tuning	_	_	_	_	
1-45	285-292	Tactics	_	_	_	_	
1-46	293-296	Jul	_	_	_	_	
1-47	297-299	17	_	_	_	_	
1-48	300-307	Written	_	_	_	_	
1-49	308-310	By	_	_	_	_	
1-50	311-315	John	_	_	_	_	
1-51	316-320	Ryan	_	_	_	_	
1-52	321-326	Image	_	_	_	_	
1-53	327-329	by	_	_	_	_	
1-54	329-330	 	_	_	_	_	
1-55	330-334	Gino	_	_	_	_	
1-56	335-343	Crescoli	_	_	_	_	
1-57	343-344	 	_	_	_	_	
1-58	344-348	from	_	_	_	_	
1-59	348-349	 	_	_	_	_	
1-60	349-356	Pixabay	_	_	_	_	
1-61	357-360	The	_	_	_	_	
1-62	361-370	Snowflake	_	_	_	_	
1-63	371-375	Data	_	_	_	_	
1-64	376-381	Cloud	_	_	_	_	
1-65	382-385	has	_	_	_	_	
1-66	386-388	an	_	_	_	_	
1-67	389-398	excellent	_	_	_	_	
1-68	399-409	reputation	_	_	_	_	
1-69	410-412	as	_	_	_	_	
1-70	413-415	an	_	_	_	_	
1-71	416-425	analytics	_	_	_	_	
1-72	426-434	platform	_	_	_	_	
1-73	435-438	for	_	_	_	_	
1-74	439-451	blisteringly	_	_	_	_	
1-75	452-456	fast	_	_	_	_	
1-76	457-462	query	_	_	_	_	
1-77	463-474	performance	_	_	_	_	
1-78	474-475	,	_	_	_	_	
1-79	476-479	but	_	_	_	_	
1-80	480-487	without	_	_	_	_	
1-81	488-495	indexes	_	_	_	_	
1-82	495-496	.	_	_	_	_	

#Text=So, how can you tune the Snowflake database to maximize query performance?
2-1	497-499	So	_	_	_	_	
2-2	499-500	,	_	_	_	_	
2-3	501-504	how	_	_	_	_	
2-4	505-508	can	_	_	_	_	
2-5	509-512	you	_	_	_	_	
2-6	513-517	tune	_	_	_	_	
2-7	518-521	the	_	_	_	_	
2-8	522-531	Snowflake	_	_	_	_	
2-9	532-540	database	_	_	_	_	
2-10	541-543	to	_	_	_	_	
2-11	544-552	maximize	_	_	_	_	
2-12	553-558	query	_	_	_	_	
2-13	559-570	performance	_	_	_	_	
2-14	570-571	?	_	_	_	_	

#Text=This article explains the top three techniques to tune your system to maximum throughput, including data ingestion, data transformation, and end-user queries.Snowflake Query PerformanceOne of my favourite phrases is: What problem are we trying to solve? 
3-1	572-576	This	_	_	_	_	
3-2	577-584	article	_	_	_	_	
3-3	585-593	explains	_	_	_	_	
3-4	594-597	the	_	_	_	_	
3-5	598-601	top	_	_	_	_	
3-6	602-607	three	_	_	_	_	
3-7	608-618	techniques	_	_	_	_	
3-8	619-621	to	_	_	_	_	
3-9	622-626	tune	_	_	_	_	
3-10	627-631	your	_	_	_	_	
3-11	632-638	system	_	_	_	_	
3-12	639-641	to	_	_	_	_	
3-13	642-649	maximum	_	_	_	_	
3-14	650-660	throughput	_	_	_	_	
3-15	660-661	,	_	_	_	_	
3-16	662-671	including	_	_	_	_	
3-17	672-676	data	_	_	_	_	
3-18	677-686	ingestion	_	_	_	_	
3-19	686-687	,	_	_	_	_	
3-20	688-692	data	_	_	_	_	
3-21	693-707	transformation	_	_	_	_	
3-22	707-708	,	_	_	_	_	
3-23	709-712	and	_	_	_	_	
3-24	713-721	end-user	_	_	_	_	
3-25	722-739	queries.Snowflake	_	_	_	_	
3-26	740-745	Query	_	_	_	_	
3-27	746-760	PerformanceOne	_	_	_	_	
3-28	761-763	of	_	_	_	_	
3-29	764-766	my	_	_	_	_	
3-30	767-776	favourite	_	_	_	_	
3-31	777-784	phrases	_	_	_	_	
3-32	785-787	is	_	_	_	_	
3-33	787-788	:	_	_	_	_	
3-34	788-789	 	_	_	_	_	
3-35	789-793	What	_	_	_	_	
3-36	794-801	problem	_	_	_	_	
3-37	802-805	are	_	_	_	_	
3-38	806-808	we	_	_	_	_	
3-39	809-815	trying	_	_	_	_	
3-40	816-818	to	_	_	_	_	
3-41	819-824	solve	_	_	_	_	
3-42	824-825	?	_	_	_	_	
3-43	825-826	 	_	_	_	_	

#Text=As techies, we often launch into solutions before we even understand the true nature of the problem.
4-1	826-828	As	_	_	_	_	
4-2	829-836	techies	_	_	_	_	
4-3	836-837	,	_	_	_	_	
4-4	838-840	we	_	_	_	_	
4-5	841-846	often	_	_	_	_	
4-6	847-853	launch	_	_	_	_	
4-7	854-858	into	_	_	_	_	
4-8	859-868	solutions	_	_	_	_	
4-9	869-875	before	_	_	_	_	
4-10	876-878	we	_	_	_	_	
4-11	879-883	even	_	_	_	_	
4-12	884-894	understand	_	_	_	_	
4-13	895-898	the	_	_	_	_	
4-14	899-903	true	_	_	_	_	
4-15	904-910	nature	_	_	_	_	
4-16	911-913	of	_	_	_	_	
4-17	914-917	the	_	_	_	_	
4-18	918-925	problem	_	_	_	_	
4-19	925-926	.	_	_	_	_	

#Text=The performance issues on any analytics platform generally fall into one of three categories: 1.Data Load Speed: The ability to load massive volumes of data as quickly as possible.2.Data Transformation: The ability to maximize throughput, and rapidly transform the raw data into a form suitable for queries.3.Data Query Speed: Which aims to minimize the latency of each query and deliver results to business intelligence users as fast as possible.1.
5-1	927-930	The	_	_	_	_	
5-2	931-942	performance	_	_	_	_	
5-3	943-949	issues	_	_	_	_	
5-4	950-952	on	_	_	_	_	
5-5	953-956	any	_	_	_	_	
5-6	957-966	analytics	_	_	_	_	
5-7	967-975	platform	_	_	_	_	
5-8	976-985	generally	_	_	_	_	
5-9	986-990	fall	_	_	_	_	
5-10	991-995	into	_	_	_	_	
5-11	996-999	one	_	_	_	_	
5-12	1000-1002	of	_	_	_	_	
5-13	1003-1008	three	_	_	_	_	
5-14	1009-1019	categories	_	_	_	_	
5-15	1019-1020	:	_	_	_	_	
5-16	1020-1021	 	_	_	_	_	
5-17	1021-1022	1	_	_	_	_	
5-18	1022-1023	.	_	_	_	_	
5-19	1023-1027	Data	_	_	_	_	
5-20	1028-1032	Load	_	_	_	_	
5-21	1033-1038	Speed	_	_	_	_	
5-22	1038-1039	:	_	_	_	_	
5-23	1039-1040	 	_	_	_	_	
5-24	1040-1043	The	_	_	_	_	
5-25	1044-1051	ability	_	_	_	_	
5-26	1052-1054	to	_	_	_	_	
5-27	1055-1059	load	_	_	_	_	
5-28	1060-1067	massive	_	_	_	_	
5-29	1068-1075	volumes	_	_	_	_	
5-30	1076-1078	of	_	_	_	_	
5-31	1079-1083	data	_	_	_	_	
5-32	1084-1086	as	_	_	_	_	
5-33	1087-1094	quickly	_	_	_	_	
5-34	1095-1097	as	_	_	_	_	
5-35	1098-1106	possible	_	_	_	_	
5-36	1106-1108	.2	_	_	_	_	
5-37	1108-1109	.	_	_	_	_	
5-38	1109-1113	Data	_	_	_	_	
5-39	1114-1128	Transformation	_	_	_	_	
5-40	1128-1129	:	_	_	_	_	
5-41	1129-1130	 	_	_	_	_	
5-42	1130-1133	The	_	_	_	_	
5-43	1134-1141	ability	_	_	_	_	
5-44	1142-1144	to	_	_	_	_	
5-45	1145-1153	maximize	_	_	_	_	
5-46	1154-1164	throughput	_	_	_	_	
5-47	1164-1165	,	_	_	_	_	
5-48	1166-1169	and	_	_	_	_	
5-49	1170-1177	rapidly	_	_	_	_	
5-50	1178-1187	transform	_	_	_	_	
5-51	1188-1191	the	_	_	_	_	
5-52	1192-1195	raw	_	_	_	_	
5-53	1196-1200	data	_	_	_	_	
5-54	1201-1205	into	_	_	_	_	
5-55	1206-1207	a	_	_	_	_	
5-56	1208-1212	form	_	_	_	_	
5-57	1213-1221	suitable	_	_	_	_	
5-58	1222-1225	for	_	_	_	_	
5-59	1226-1233	queries	_	_	_	_	
5-60	1233-1235	.3	_	_	_	_	
5-61	1235-1236	.	_	_	_	_	
5-62	1236-1240	Data	_	_	_	_	
5-63	1241-1246	Query	_	_	_	_	
5-64	1247-1252	Speed	_	_	_	_	
5-65	1252-1253	:	_	_	_	_	
5-66	1253-1254	 	_	_	_	_	
5-67	1254-1259	Which	_	_	_	_	
5-68	1260-1264	aims	_	_	_	_	
5-69	1265-1267	to	_	_	_	_	
5-70	1268-1276	minimize	_	_	_	_	
5-71	1277-1280	the	_	_	_	_	
5-72	1281-1288	latency	_	_	_	_	
5-73	1289-1291	of	_	_	_	_	
5-74	1292-1296	each	_	_	_	_	
5-75	1297-1302	query	_	_	_	_	
5-76	1303-1306	and	_	_	_	_	
5-77	1307-1314	deliver	_	_	_	_	
5-78	1315-1322	results	_	_	_	_	
5-79	1323-1325	to	_	_	_	_	
5-80	1326-1334	business	_	_	_	_	
5-81	1335-1347	intelligence	_	_	_	_	
5-82	1348-1353	users	_	_	_	_	
5-83	1354-1356	as	_	_	_	_	
5-84	1357-1361	fast	_	_	_	_	
5-85	1362-1364	as	_	_	_	_	
5-86	1365-1373	possible	_	_	_	_	
5-87	1373-1375	.1	_	_	_	_	
5-88	1375-1376	.	_	_	_	_	

#Text=Snowflake Data LoadingAvoid Scanning FilesThe diagram below illustrates the most common method of bulk loading data into Snowflake, which involves transferring the data from the on-premise system to cloud storage, and then using the COPY command to load to Snowflake.
6-1	1377-1386	Snowflake	_	_	_	_	
6-2	1387-1391	Data	_	_	_	_	
6-3	1392-1404	LoadingAvoid	_	_	_	_	
6-4	1405-1413	Scanning	_	_	_	_	
6-5	1414-1422	FilesThe	_	_	_	_	
6-6	1423-1430	diagram	_	_	_	_	
6-7	1431-1436	below	_	_	_	_	
6-8	1437-1448	illustrates	_	_	_	_	
6-9	1449-1452	the	_	_	_	_	
6-10	1453-1457	most	_	_	_	_	
6-11	1458-1464	common	_	_	_	_	
6-12	1465-1471	method	_	_	_	_	
6-13	1472-1474	of	_	_	_	_	
6-14	1475-1479	bulk	_	_	_	_	
6-15	1480-1487	loading	_	_	_	_	
6-16	1488-1492	data	_	_	_	_	
6-17	1493-1497	into	_	_	_	_	
6-18	1498-1507	Snowflake	_	_	_	_	
6-19	1507-1508	,	_	_	_	_	
6-20	1509-1514	which	_	_	_	_	
6-21	1515-1523	involves	_	_	_	_	
6-22	1524-1536	transferring	_	_	_	_	
6-23	1537-1540	the	_	_	_	_	
6-24	1541-1545	data	_	_	_	_	
6-25	1546-1550	from	_	_	_	_	
6-26	1551-1554	the	_	_	_	_	
6-27	1555-1565	on-premise	_	_	_	_	
6-28	1566-1572	system	_	_	_	_	
6-29	1573-1575	to	_	_	_	_	
6-30	1576-1581	cloud	_	_	_	_	
6-31	1582-1589	storage	_	_	_	_	
6-32	1589-1590	,	_	_	_	_	
6-33	1591-1594	and	_	_	_	_	
6-34	1595-1599	then	_	_	_	_	
6-35	1600-1605	using	_	_	_	_	
6-36	1606-1609	the	_	_	_	_	
6-37	1609-1610	 	_	_	_	_	
6-38	1610-1614	COPY	_	_	_	_	
6-39	1615-1622	command	_	_	_	_	
6-40	1622-1623	 	_	_	_	_	
6-41	1623-1625	to	_	_	_	_	
6-42	1626-1630	load	_	_	_	_	
6-43	1631-1633	to	_	_	_	_	
6-44	1634-1643	Snowflake	_	_	_	_	
6-45	1643-1644	.	_	_	_	_	

#Text=Before copying data, Snowflake checks the file has not already been loaded, and this leads the first and easiest way to maximize load performance by partitioning staged data files to avoid scanning terabytes of files that have already been loaded.
7-1	1645-1651	Before	_	_	_	_	
7-2	1652-1659	copying	_	_	_	_	
7-3	1660-1664	data	_	_	_	_	
7-4	1664-1665	,	_	_	_	_	
7-5	1665-1666	 	_	_	_	_	
7-6	1666-1675	Snowflake	_	_	_	_	
7-7	1676-1682	checks	_	_	_	_	
7-8	1682-1683	 	_	_	_	_	
7-9	1683-1686	the	_	_	_	_	
7-10	1687-1691	file	_	_	_	_	
7-11	1692-1695	has	_	_	_	_	
7-12	1696-1699	not	_	_	_	_	
7-13	1700-1707	already	_	_	_	_	
7-14	1708-1712	been	_	_	_	_	
7-15	1713-1719	loaded	_	_	_	_	
7-16	1719-1720	,	_	_	_	_	
7-17	1721-1724	and	_	_	_	_	
7-18	1725-1729	this	_	_	_	_	
7-19	1730-1735	leads	_	_	_	_	
7-20	1736-1739	the	_	_	_	_	
7-21	1740-1745	first	_	_	_	_	
7-22	1746-1749	and	_	_	_	_	
7-23	1750-1757	easiest	_	_	_	_	
7-24	1758-1761	way	_	_	_	_	
7-25	1762-1764	to	_	_	_	_	
7-26	1765-1773	maximize	_	_	_	_	
7-27	1774-1778	load	_	_	_	_	
7-28	1779-1790	performance	_	_	_	_	
7-29	1791-1793	by	_	_	_	_	
7-30	1793-1794	 	_	_	_	_	
7-31	1794-1806	partitioning	_	_	_	_	
7-32	1807-1813	staged	_	_	_	_	
7-33	1814-1818	data	_	_	_	_	
7-34	1819-1824	files	_	_	_	_	
7-35	1824-1825	 	_	_	_	_	
7-36	1825-1827	to	_	_	_	_	
7-37	1828-1833	avoid	_	_	_	_	
7-38	1834-1842	scanning	_	_	_	_	
7-39	1843-1852	terabytes	_	_	_	_	
7-40	1853-1855	of	_	_	_	_	
7-41	1856-1861	files	_	_	_	_	
7-42	1862-1866	that	_	_	_	_	
7-43	1867-1871	have	_	_	_	_	
7-44	1872-1879	already	_	_	_	_	
7-45	1880-1884	been	_	_	_	_	
7-46	1885-1891	loaded	_	_	_	_	
7-47	1891-1892	.	_	_	_	_	

#Text=The code snippet below shows a COPY using a range of options:-- Simple method:
#Text=Scan entire stage
#Text=copy into sales_table
#Text=from @landing_data
#Text=pattern='.*[.]csv';
#Text=-- Most Flexible method:
#Text=Limit within directory
#Text=copy into sales_table
#Text=from @landing_data/sales/transactions/2020/05
#Text=pattern='.*[.]csv';
#Text=-- Fastest method:
#Text=A named file
#Text=copy into sales_table
#Text=from @landing_data/sales/transactions/2020/05/sales_050.csv;
#Text=While the absolute fastest method is to name a specific file, using pattern matching to identify the files is the most flexible.
8-1	1893-1896	The	_	_	_	_	
8-2	1897-1901	code	_	_	_	_	
8-3	1902-1909	snippet	_	_	_	_	
8-4	1910-1915	below	_	_	_	_	
8-5	1916-1921	shows	_	_	_	_	
8-6	1922-1923	a	_	_	_	_	
8-7	1924-1928	COPY	_	_	_	_	
8-8	1929-1934	using	_	_	_	_	
8-9	1935-1936	a	_	_	_	_	
8-10	1937-1942	range	_	_	_	_	
8-11	1943-1945	of	_	_	_	_	
8-12	1946-1953	options	_	_	_	_	
8-13	1953-1954	:	_	_	_	_	
8-14	1954-1955	-	_	_	_	_	
8-15	1955-1956	-	_	_	_	_	
8-16	1957-1963	Simple	_	_	_	_	
8-17	1964-1970	method	_	_	_	_	
8-18	1970-1971	:	_	_	_	_	
8-19	1972-1976	Scan	_	_	_	_	
8-20	1977-1983	entire	_	_	_	_	
8-21	1984-1989	stage	_	_	_	_	
8-22	1990-1994	copy	_	_	_	_	
8-23	1995-1999	into	_	_	_	_	
8-24	2000-2011	sales_table	_	_	_	_	
8-25	2012-2016	from	_	_	_	_	
8-26	2017-2018	@	_	_	_	_	
8-27	2018-2030	landing_data	_	_	_	_	
8-28	2031-2038	pattern	_	_	_	_	
8-29	2038-2039	=	_	_	_	_	
8-30	2039-2040	'	_	_	_	_	
8-31	2040-2041	.	_	_	_	_	
8-32	2041-2042	*	_	_	_	_	
8-33	2042-2043	[	_	_	_	_	
8-34	2043-2044	.	_	_	_	_	
8-35	2044-2045	]	_	_	_	_	
8-36	2045-2048	csv	_	_	_	_	
8-37	2048-2049	'	_	_	_	_	
8-38	2049-2050	;	_	_	_	_	
8-39	2051-2052	-	_	_	_	_	
8-40	2052-2053	-	_	_	_	_	
8-41	2054-2058	Most	_	_	_	_	
8-42	2059-2067	Flexible	_	_	_	_	
8-43	2068-2074	method	_	_	_	_	
8-44	2074-2075	:	_	_	_	_	
8-45	2076-2081	Limit	_	_	_	_	
8-46	2082-2088	within	_	_	_	_	
8-47	2089-2098	directory	_	_	_	_	
8-48	2099-2103	copy	_	_	_	_	
8-49	2104-2108	into	_	_	_	_	
8-50	2109-2120	sales_table	_	_	_	_	
8-51	2121-2125	from	_	_	_	_	
8-52	2126-2127	@	_	_	_	_	
8-53	2127-2139	landing_data	_	_	_	_	
8-54	2139-2140	/	_	_	_	_	
8-55	2140-2145	sales	_	_	_	_	
8-56	2145-2146	/	_	_	_	_	
8-57	2146-2158	transactions	_	_	_	_	
8-58	2158-2159	/	_	_	_	_	
8-59	2159-2163	2020	_	_	_	_	
8-60	2163-2164	/	_	_	_	_	
8-61	2164-2166	05	_	_	_	_	
8-62	2167-2174	pattern	_	_	_	_	
8-63	2174-2175	=	_	_	_	_	
8-64	2175-2176	'	_	_	_	_	
8-65	2176-2177	.	_	_	_	_	
8-66	2177-2178	*	_	_	_	_	
8-67	2178-2179	[	_	_	_	_	
8-68	2179-2180	.	_	_	_	_	
8-69	2180-2181	]	_	_	_	_	
8-70	2181-2184	csv	_	_	_	_	
8-71	2184-2185	'	_	_	_	_	
8-72	2185-2186	;	_	_	_	_	
8-73	2187-2188	-	_	_	_	_	
8-74	2188-2189	-	_	_	_	_	
8-75	2190-2197	Fastest	_	_	_	_	
8-76	2198-2204	method	_	_	_	_	
8-77	2204-2205	:	_	_	_	_	
8-78	2206-2207	A	_	_	_	_	
8-79	2208-2213	named	_	_	_	_	
8-80	2214-2218	file	_	_	_	_	
8-81	2219-2223	copy	_	_	_	_	
8-82	2224-2228	into	_	_	_	_	
8-83	2229-2240	sales_table	_	_	_	_	
8-84	2241-2245	from	_	_	_	_	
8-85	2246-2247	@	_	_	_	_	
8-86	2247-2259	landing_data	_	_	_	_	
8-87	2259-2260	/	_	_	_	_	
8-88	2260-2265	sales	_	_	_	_	
8-89	2265-2266	/	_	_	_	_	
8-90	2266-2278	transactions	_	_	_	_	
8-91	2278-2279	/	_	_	_	_	
8-92	2279-2283	2020	_	_	_	_	
8-93	2283-2284	/	_	_	_	_	
8-94	2284-2286	05	_	_	_	_	
8-95	2286-2287	/	_	_	_	_	
8-96	2287-2292	sales	_	_	_	_	
8-97	2292-2293	_	_	_	_	_	
8-98	2293-2296	050	_	_	_	_	
8-99	2296-2297	.	_	_	_	_	
8-100	2297-2300	csv	_	_	_	_	
8-101	2300-2301	;	_	_	_	_	
8-102	2302-2307	While	_	_	_	_	
8-103	2308-2311	the	_	_	_	_	
8-104	2312-2320	absolute	_	_	_	_	
8-105	2321-2328	fastest	_	_	_	_	
8-106	2329-2335	method	_	_	_	_	
8-107	2336-2338	is	_	_	_	_	
8-108	2339-2341	to	_	_	_	_	
8-109	2342-2346	name	_	_	_	_	
8-110	2347-2348	a	_	_	_	_	
8-111	2349-2357	specific	_	_	_	_	
8-112	2358-2362	file	_	_	_	_	
8-113	2362-2363	,	_	_	_	_	
8-114	2363-2364	 	_	_	_	_	
8-115	2364-2369	using	_	_	_	_	
8-116	2370-2377	pattern	_	_	_	_	
8-117	2378-2386	matching	_	_	_	_	
8-118	2386-2387	 	_	_	_	_	
8-119	2387-2389	to	_	_	_	_	
8-120	2390-2398	identify	_	_	_	_	
8-121	2399-2402	the	_	_	_	_	
8-122	2403-2408	files	_	_	_	_	
8-123	2409-2411	is	_	_	_	_	
8-124	2412-2415	the	_	_	_	_	
8-125	2416-2420	most	_	_	_	_	
8-126	2421-2429	flexible	_	_	_	_	
8-127	2429-2430	.	_	_	_	_	

#Text=The alternative option is to remove the files immediately after loading.Choose a sensible virtual warehouse sizeThe diagram below illustrates a common mistake made by designers when loading large data files into Snowflake, which involves scaling up to a bigger virtual warehouse to speed the load process.
9-1	2431-2434	The	_	_	_	_	
9-2	2435-2446	alternative	_	_	_	_	
9-3	2447-2453	option	_	_	_	_	
9-4	2454-2456	is	_	_	_	_	
9-5	2457-2459	to	_	_	_	_	
9-6	2459-2460	 	_	_	_	_	
9-7	2460-2466	remove	_	_	_	_	
9-8	2467-2470	the	_	_	_	_	
9-9	2471-2476	files	_	_	_	_	
9-10	2476-2477	 	_	_	_	_	
9-11	2477-2488	immediately	_	_	_	_	
9-12	2489-2494	after	_	_	_	_	
9-13	2495-2509	loading.Choose	_	_	_	_	
9-14	2510-2511	a	_	_	_	_	
9-15	2512-2520	sensible	_	_	_	_	
9-16	2521-2528	virtual	_	_	_	_	
9-17	2529-2538	warehouse	_	_	_	_	
9-18	2539-2546	sizeThe	_	_	_	_	
9-19	2547-2554	diagram	_	_	_	_	
9-20	2555-2560	below	_	_	_	_	
9-21	2561-2572	illustrates	_	_	_	_	
9-22	2573-2574	a	_	_	_	_	
9-23	2575-2581	common	_	_	_	_	
9-24	2582-2589	mistake	_	_	_	_	
9-25	2590-2594	made	_	_	_	_	
9-26	2595-2597	by	_	_	_	_	
9-27	2598-2607	designers	_	_	_	_	
9-28	2608-2612	when	_	_	_	_	
9-29	2613-2620	loading	_	_	_	_	
9-30	2621-2626	large	_	_	_	_	
9-31	2627-2631	data	_	_	_	_	
9-32	2632-2637	files	_	_	_	_	
9-33	2638-2642	into	_	_	_	_	
9-34	2643-2652	Snowflake	_	_	_	_	
9-35	2652-2653	,	_	_	_	_	
9-36	2654-2659	which	_	_	_	_	
9-37	2660-2668	involves	_	_	_	_	
9-38	2669-2676	scaling	_	_	_	_	
9-39	2677-2679	up	_	_	_	_	
9-40	2680-2682	to	_	_	_	_	
9-41	2683-2684	a	_	_	_	_	
9-42	2685-2691	bigger	_	_	_	_	
9-43	2691-2692	 	_	_	_	_	
9-44	2692-2699	virtual	_	_	_	_	
9-45	2700-2709	warehouse	_	_	_	_	
9-46	2709-2710	 	_	_	_	_	
9-47	2710-2712	to	_	_	_	_	
9-48	2713-2718	speed	_	_	_	_	
9-49	2719-2722	the	_	_	_	_	
9-50	2723-2727	load	_	_	_	_	
9-51	2728-2735	process	_	_	_	_	
9-52	2735-2736	.	_	_	_	_	

#Text=In reality, scaling up the warehouse has no performance benefit in this case.
10-1	2737-2739	In	_	_	_	_	
10-2	2740-2747	reality	_	_	_	_	
10-3	2747-2748	,	_	_	_	_	
10-4	2748-2749	 	_	_	_	_	
10-5	2749-2756	scaling	_	_	_	_	
10-6	2757-2759	up	_	_	_	_	
10-7	2760-2763	the	_	_	_	_	
10-8	2764-2773	warehouse	_	_	_	_	
10-9	2774-2777	has	_	_	_	_	
10-10	2778-2780	no	_	_	_	_	
10-11	2781-2792	performance	_	_	_	_	
10-12	2793-2800	benefit	_	_	_	_	
10-13	2800-2801	 	_	_	_	_	
10-14	2801-2803	in	_	_	_	_	
10-15	2804-2808	this	_	_	_	_	
10-16	2809-2813	case	_	_	_	_	
10-17	2813-2814	.	_	_	_	_	

#Text=Snowflake:
#Text=Loading large data files
#Text=The above COPY statement will open the 10Gb data file and sequentially load the data using a single thread on one node, leaving the remaining servers idle.
11-1	2815-2824	Snowflake	_	_	_	_	
11-2	2824-2825	:	_	_	_	_	
11-3	2826-2833	Loading	_	_	_	_	
11-4	2834-2839	large	_	_	_	_	
11-5	2840-2844	data	_	_	_	_	
11-6	2845-2850	files	_	_	_	_	
11-7	2851-2854	The	_	_	_	_	
11-8	2855-2860	above	_	_	_	_	
11-9	2861-2865	COPY	_	_	_	_	
11-10	2866-2875	statement	_	_	_	_	
11-11	2876-2880	will	_	_	_	_	
11-12	2881-2885	open	_	_	_	_	
11-13	2886-2889	the	_	_	_	_	
11-14	2890-2894	10Gb	_	_	_	_	
11-15	2895-2899	data	_	_	_	_	
11-16	2900-2904	file	_	_	_	_	
11-17	2905-2908	and	_	_	_	_	
11-18	2909-2921	sequentially	_	_	_	_	
11-19	2922-2926	load	_	_	_	_	
11-20	2927-2930	the	_	_	_	_	
11-21	2931-2935	data	_	_	_	_	
11-22	2936-2941	using	_	_	_	_	
11-23	2942-2943	a	_	_	_	_	
11-24	2944-2950	single	_	_	_	_	
11-25	2951-2957	thread	_	_	_	_	
11-26	2958-2960	on	_	_	_	_	
11-27	2961-2964	one	_	_	_	_	
11-28	2965-2969	node	_	_	_	_	
11-29	2969-2970	,	_	_	_	_	
11-30	2971-2978	leaving	_	_	_	_	
11-31	2979-2982	the	_	_	_	_	
11-32	2983-2992	remaining	_	_	_	_	
11-33	2993-3000	servers	_	_	_	_	
11-34	3001-3005	idle	_	_	_	_	
11-35	3005-3006	.	_	_	_	_	

#Text=Benchmark tests demonstrate a load rate of around 9 Gb per minute, which is fast but could be improved.
12-1	3007-3016	Benchmark	_	_	_	_	
12-2	3017-3022	tests	_	_	_	_	
12-3	3023-3034	demonstrate	_	_	_	_	
12-4	3035-3036	a	_	_	_	_	
12-5	3037-3041	load	_	_	_	_	
12-6	3042-3046	rate	_	_	_	_	
12-7	3047-3049	of	_	_	_	_	
12-8	3050-3056	around	_	_	_	_	
12-9	3057-3058	9	_	_	_	_	
12-10	3059-3061	Gb	_	_	_	_	
12-11	3062-3065	per	_	_	_	_	
12-12	3066-3072	minute	_	_	_	_	
12-13	3072-3073	,	_	_	_	_	
12-14	3074-3079	which	_	_	_	_	
12-15	3080-3082	is	_	_	_	_	
12-16	3083-3087	fast	_	_	_	_	
12-17	3088-3091	but	_	_	_	_	
12-18	3092-3097	could	_	_	_	_	
12-19	3098-3100	be	_	_	_	_	
12-20	3101-3109	improved	_	_	_	_	
12-21	3109-3110	.	_	_	_	_	

#Text=Unless you have other parallel loads using the same virtual warehouse, the above solution is also remarkably inefficient, as you will pay for four servers, while using only one.The diagram below illustrates a much better approach, which involves breaking up the single 10Gb file into 100 x 100Mb files to make use of Snowflake’s automatic parallel execution.
13-1	3111-3117	Unless	_	_	_	_	
13-2	3118-3121	you	_	_	_	_	
13-3	3122-3126	have	_	_	_	_	
13-4	3127-3132	other	_	_	_	_	
13-5	3133-3141	parallel	_	_	_	_	
13-6	3142-3147	loads	_	_	_	_	
13-7	3148-3153	using	_	_	_	_	
13-8	3154-3157	the	_	_	_	_	
13-9	3158-3162	same	_	_	_	_	
13-10	3163-3170	virtual	_	_	_	_	
13-11	3171-3180	warehouse	_	_	_	_	
13-12	3180-3181	,	_	_	_	_	
13-13	3182-3185	the	_	_	_	_	
13-14	3186-3191	above	_	_	_	_	
13-15	3192-3200	solution	_	_	_	_	
13-16	3201-3203	is	_	_	_	_	
13-17	3204-3208	also	_	_	_	_	
13-18	3209-3219	remarkably	_	_	_	_	
13-19	3220-3231	inefficient	_	_	_	_	
13-20	3231-3232	,	_	_	_	_	
13-21	3233-3235	as	_	_	_	_	
13-22	3236-3239	you	_	_	_	_	
13-23	3240-3244	will	_	_	_	_	
13-24	3245-3248	pay	_	_	_	_	
13-25	3249-3252	for	_	_	_	_	
13-26	3253-3257	four	_	_	_	_	
13-27	3258-3265	servers	_	_	_	_	
13-28	3265-3266	,	_	_	_	_	
13-29	3267-3272	while	_	_	_	_	
13-30	3273-3278	using	_	_	_	_	
13-31	3279-3283	only	_	_	_	_	
13-32	3284-3291	one.The	_	_	_	_	
13-33	3292-3299	diagram	_	_	_	_	
13-34	3300-3305	below	_	_	_	_	
13-35	3306-3317	illustrates	_	_	_	_	
13-36	3318-3319	a	_	_	_	_	
13-37	3319-3320	 	_	_	_	_	
13-38	3320-3324	much	_	_	_	_	
13-39	3325-3331	better	_	_	_	_	
13-40	3332-3340	approach	_	_	_	_	
13-41	3340-3341	,	_	_	_	_	
13-42	3342-3347	which	_	_	_	_	
13-43	3348-3356	involves	_	_	_	_	
13-44	3357-3365	breaking	_	_	_	_	
13-45	3366-3368	up	_	_	_	_	
13-46	3369-3372	the	_	_	_	_	
13-47	3373-3379	single	_	_	_	_	
13-48	3380-3384	10Gb	_	_	_	_	
13-49	3385-3389	file	_	_	_	_	
13-50	3390-3394	into	_	_	_	_	
13-51	3395-3398	100	_	_	_	_	
13-52	3399-3400	x	_	_	_	_	
13-53	3401-3406	100Mb	_	_	_	_	
13-54	3407-3412	files	_	_	_	_	
13-55	3413-3415	to	_	_	_	_	
13-56	3416-3420	make	_	_	_	_	
13-57	3421-3424	use	_	_	_	_	
13-58	3425-3427	of	_	_	_	_	
13-59	3428-3437	Snowflake	_	_	_	_	
13-60	3437-3438	’	_	_	_	_	
13-61	3438-3439	s	_	_	_	_	
13-62	3440-3449	automatic	_	_	_	_	
13-63	3450-3458	parallel	_	_	_	_	
13-64	3459-3468	execution	_	_	_	_	
13-65	3468-3469	.	_	_	_	_	

#Text=Snowflake: Fast parallel loading multiple data files
#Text=Using the above method, Snowflake spreads the load across all servers to maximize throughput and achieves a load rate of around 31 Gb per minute.
14-1	3470-3479	Snowflake	_	_	_	_	
14-2	3479-3480	:	_	_	_	_	
14-3	3481-3485	Fast	_	_	_	_	
14-4	3486-3494	parallel	_	_	_	_	
14-5	3495-3502	loading	_	_	_	_	
14-6	3503-3511	multiple	_	_	_	_	
14-7	3512-3516	data	_	_	_	_	
14-8	3517-3522	files	_	_	_	_	
14-9	3523-3528	Using	_	_	_	_	
14-10	3529-3532	the	_	_	_	_	
14-11	3533-3538	above	_	_	_	_	
14-12	3539-3545	method	_	_	_	_	
14-13	3545-3546	,	_	_	_	_	
14-14	3547-3556	Snowflake	_	_	_	_	
14-15	3557-3564	spreads	_	_	_	_	
14-16	3565-3568	the	_	_	_	_	
14-17	3569-3573	load	_	_	_	_	
14-18	3574-3580	across	_	_	_	_	
14-19	3581-3584	all	_	_	_	_	
14-20	3585-3592	servers	_	_	_	_	
14-21	3593-3595	to	_	_	_	_	
14-22	3596-3604	maximize	_	_	_	_	
14-23	3605-3615	throughput	_	_	_	_	
14-24	3616-3619	and	_	_	_	_	
14-25	3620-3628	achieves	_	_	_	_	
14-26	3629-3630	a	_	_	_	_	
14-27	3631-3635	load	_	_	_	_	
14-28	3636-3640	rate	_	_	_	_	
14-29	3641-3643	of	_	_	_	_	
14-30	3644-3650	around	_	_	_	_	
14-31	3651-3653	31	_	_	_	_	
14-32	3654-3656	Gb	_	_	_	_	
14-33	3657-3660	per	_	_	_	_	
14-34	3661-3667	minute	_	_	_	_	
14-35	3667-3668	.	_	_	_	_	

#Text=Furthermore, once the task has completed, the server can auto-suspend, which reduces spend2.
15-1	3669-3680	Furthermore	_	_	_	_	
15-2	3680-3681	,	_	_	_	_	
15-3	3682-3686	once	_	_	_	_	
15-4	3687-3690	the	_	_	_	_	
15-5	3691-3695	task	_	_	_	_	
15-6	3696-3699	has	_	_	_	_	
15-7	3700-3709	completed	_	_	_	_	
15-8	3709-3710	,	_	_	_	_	
15-9	3711-3714	the	_	_	_	_	
15-10	3715-3721	server	_	_	_	_	
15-11	3722-3725	can	_	_	_	_	
15-12	3726-3738	auto-suspend	_	_	_	_	
15-13	3738-3739	,	_	_	_	_	
15-14	3740-3745	which	_	_	_	_	
15-15	3746-3753	reduces	_	_	_	_	
15-16	3754-3760	spend2	_	_	_	_	
15-17	3760-3761	.	_	_	_	_	

#Text=Snowflake Transformation PerformanceLatency Vs.
16-1	3762-3771	Snowflake	_	_	_	_	
16-2	3772-3786	Transformation	_	_	_	_	
16-3	3787-3805	PerformanceLatency	_	_	_	_	
16-4	3806-3808	Vs	_	_	_	_	
16-5	3808-3809	.	_	_	_	_	

#Text=ThroughputWhile tuning the SQL is often a very effective way to reduce the elapsed time for long running queries, designers often miss an opportunity.
17-1	3810-3825	ThroughputWhile	_	_	_	_	
17-2	3826-3832	tuning	_	_	_	_	
17-3	3833-3836	the	_	_	_	_	
17-4	3837-3840	SQL	_	_	_	_	
17-5	3841-3843	is	_	_	_	_	
17-6	3844-3849	often	_	_	_	_	
17-7	3850-3851	a	_	_	_	_	
17-8	3852-3856	very	_	_	_	_	
17-9	3857-3866	effective	_	_	_	_	
17-10	3867-3870	way	_	_	_	_	
17-11	3871-3873	to	_	_	_	_	
17-12	3874-3880	reduce	_	_	_	_	
17-13	3881-3884	the	_	_	_	_	
17-14	3885-3892	elapsed	_	_	_	_	
17-15	3893-3897	time	_	_	_	_	
17-16	3898-3901	for	_	_	_	_	
17-17	3902-3906	long	_	_	_	_	
17-18	3907-3914	running	_	_	_	_	
17-19	3915-3922	queries	_	_	_	_	
17-20	3922-3923	,	_	_	_	_	
17-21	3924-3933	designers	_	_	_	_	
17-22	3934-3939	often	_	_	_	_	
17-23	3940-3944	miss	_	_	_	_	
17-24	3945-3947	an	_	_	_	_	
17-25	3948-3959	opportunity	_	_	_	_	
17-26	3959-3960	.	_	_	_	_	

#Text=As Abraham Maslow said, "If the only tool you have is a hammer, you tend to see every problem as a nail".In addition to reducing the latency (I.E. maximising performance) of individual queries, it’s also important to maximize throughput – to achieve the greatest amount of work in the shortest possible time.
18-1	3961-3963	As	_	_	_	_	
18-2	3963-3964	 	_	_	_	_	
18-3	3964-3971	Abraham	_	_	_	_	
18-4	3972-3978	Maslow	_	_	_	_	
18-5	3979-3983	said	_	_	_	_	
18-6	3983-3984	,	_	_	_	_	
18-7	3984-3985	 	_	_	_	_	
18-8	3985-3986	"	_	_	_	_	
18-9	3986-3988	If	_	_	_	_	
18-10	3989-3992	the	_	_	_	_	
18-11	3993-3997	only	_	_	_	_	
18-12	3998-4002	tool	_	_	_	_	
18-13	4003-4006	you	_	_	_	_	
18-14	4007-4011	have	_	_	_	_	
18-15	4012-4014	is	_	_	_	_	
18-16	4015-4016	a	_	_	_	_	
18-17	4017-4023	hammer	_	_	_	_	
18-18	4023-4024	,	_	_	_	_	
18-19	4025-4028	you	_	_	_	_	
18-20	4029-4033	tend	_	_	_	_	
18-21	4034-4036	to	_	_	_	_	
18-22	4037-4040	see	_	_	_	_	
18-23	4041-4046	every	_	_	_	_	
18-24	4047-4054	problem	_	_	_	_	
18-25	4055-4057	as	_	_	_	_	
18-26	4058-4059	a	_	_	_	_	
18-27	4060-4064	nail	_	_	_	_	
18-28	4064-4065	"	_	_	_	_	
18-29	4065-4066	.	_	_	_	_	
18-30	4066-4068	In	_	_	_	_	
18-31	4069-4077	addition	_	_	_	_	
18-32	4078-4080	to	_	_	_	_	
18-33	4081-4089	reducing	_	_	_	_	
18-34	4090-4093	the	_	_	_	_	
18-35	4094-4101	latency	_	_	_	_	
18-36	4102-4103	(	_	_	_	_	
18-37	4103-4106	I.E	_	_	_	_	
18-38	4106-4107	.	_	_	_	_	
18-39	4108-4118	maximising	_	_	_	_	
18-40	4119-4130	performance	_	_	_	_	
18-41	4130-4131	)	_	_	_	_	
18-42	4132-4134	of	_	_	_	_	
18-43	4135-4145	individual	_	_	_	_	
18-44	4146-4153	queries	_	_	_	_	
18-45	4153-4154	,	_	_	_	_	
18-46	4155-4157	it	_	_	_	_	
18-47	4157-4158	’	_	_	_	_	
18-48	4158-4159	s	_	_	_	_	
18-49	4160-4164	also	_	_	_	_	
18-50	4165-4174	important	_	_	_	_	
18-51	4175-4177	to	_	_	_	_	
18-52	4178-4186	maximize	_	_	_	_	
18-53	4186-4187	 	_	_	_	_	
18-54	4187-4197	throughput	_	_	_	_	
18-55	4197-4198	 	_	_	_	_	
18-56	4198-4199	–	_	_	_	_	
18-57	4200-4202	to	_	_	_	_	
18-58	4203-4210	achieve	_	_	_	_	
18-59	4211-4214	the	_	_	_	_	
18-60	4215-4223	greatest	_	_	_	_	
18-61	4224-4230	amount	_	_	_	_	
18-62	4231-4233	of	_	_	_	_	
18-63	4234-4238	work	_	_	_	_	
18-64	4239-4241	in	_	_	_	_	
18-65	4242-4245	the	_	_	_	_	
18-66	4246-4254	shortest	_	_	_	_	
18-67	4255-4263	possible	_	_	_	_	
18-68	4264-4268	time	_	_	_	_	
18-69	4268-4269	.	_	_	_	_	

#Text=Of course, it depends upon "the problem you're trying to solve". 
19-1	4270-4272	Of	_	_	_	_	
19-2	4273-4279	course	_	_	_	_	
19-3	4279-4280	,	_	_	_	_	
19-4	4281-4283	it	_	_	_	_	
19-5	4284-4291	depends	_	_	_	_	
19-6	4292-4296	upon	_	_	_	_	
19-7	4297-4298	"	_	_	_	_	
19-8	4298-4301	the	_	_	_	_	
19-9	4302-4309	problem	_	_	_	_	
19-10	4310-4316	you're	_	_	_	_	
19-11	4317-4323	trying	_	_	_	_	
19-12	4324-4326	to	_	_	_	_	
19-13	4327-4332	solve	_	_	_	_	
19-14	4332-4333	"	_	_	_	_	
19-15	4333-4334	.	_	_	_	_	
19-16	4334-4335	 	_	_	_	_	

#Text=As I have indicated before, by increasing virtual warehouse size, it is possible to reduce elapsed time from seven hours to just four minutes.
20-1	4335-4337	As	_	_	_	_	
20-2	4338-4339	I	_	_	_	_	
20-3	4340-4344	have	_	_	_	_	
20-4	4345-4354	indicated	_	_	_	_	
20-5	4355-4361	before	_	_	_	_	
20-6	4361-4362	,	_	_	_	_	
20-7	4363-4365	by	_	_	_	_	
20-8	4365-4366	 	_	_	_	_	
20-9	4366-4376	increasing	_	_	_	_	
20-10	4377-4384	virtual	_	_	_	_	
20-11	4385-4394	warehouse	_	_	_	_	
20-12	4395-4399	size	_	_	_	_	
20-13	4399-4400	,	_	_	_	_	
20-14	4401-4403	it	_	_	_	_	
20-15	4404-4406	is	_	_	_	_	
20-16	4407-4415	possible	_	_	_	_	
20-17	4416-4418	to	_	_	_	_	
20-18	4419-4425	reduce	_	_	_	_	
20-19	4426-4433	elapsed	_	_	_	_	
20-20	4434-4438	time	_	_	_	_	
20-21	4439-4443	from	_	_	_	_	
20-22	4443-4444	 	_	_	_	_	
20-23	4444-4449	seven	_	_	_	_	
20-24	4450-4455	hours	_	_	_	_	
20-25	4456-4458	to	_	_	_	_	
20-26	4459-4463	just	_	_	_	_	
20-27	4464-4468	four	_	_	_	_	
20-28	4469-4476	minutes	_	_	_	_	
20-29	4476-4477	.	_	_	_	_	

#Text=But that's not the solution for every use-case.The diagram below illustrates a typical data transformation pattern that involves executing a sequence of batch tasks on a given virtual warehouse.
21-1	4478-4481	But	_	_	_	_	
21-2	4482-4488	that's	_	_	_	_	
21-3	4489-4492	not	_	_	_	_	
21-4	4493-4496	the	_	_	_	_	
21-5	4497-4505	solution	_	_	_	_	
21-6	4506-4509	for	_	_	_	_	
21-7	4510-4515	every	_	_	_	_	
21-8	4516-4528	use-case.The	_	_	_	_	
21-9	4529-4536	diagram	_	_	_	_	
21-10	4537-4542	below	_	_	_	_	
21-11	4543-4554	illustrates	_	_	_	_	
21-12	4555-4556	a	_	_	_	_	
21-13	4557-4564	typical	_	_	_	_	
21-14	4565-4569	data	_	_	_	_	
21-15	4570-4584	transformation	_	_	_	_	
21-16	4585-4592	pattern	_	_	_	_	
21-17	4593-4597	that	_	_	_	_	
21-18	4598-4606	involves	_	_	_	_	
21-19	4607-4616	executing	_	_	_	_	
21-20	4617-4618	a	_	_	_	_	
21-21	4619-4627	sequence	_	_	_	_	
21-22	4628-4630	of	_	_	_	_	
21-23	4631-4636	batch	_	_	_	_	
21-24	4637-4642	tasks	_	_	_	_	
21-25	4643-4645	on	_	_	_	_	
21-26	4646-4647	a	_	_	_	_	
21-27	4648-4653	given	_	_	_	_	
21-28	4654-4661	virtual	_	_	_	_	
21-29	4662-4671	warehouse	_	_	_	_	
21-30	4671-4672	.	_	_	_	_	

#Text=As each task completes, the next task is started:
#Text=Snowflake:
#Text=Serial processing
#Text=One solution to improve throughput is to scale up to a bigger virtual warehouse to complete the work faster, but even this technique will eventually reach a limit (I'll explain why in another article).Furthermore, while it might improve query performance, there's also a greater chance of inefficient use of resources on a larger warehouse.
22-1	4673-4675	As	_	_	_	_	
22-2	4676-4680	each	_	_	_	_	
22-3	4681-4685	task	_	_	_	_	
22-4	4686-4695	completes	_	_	_	_	
22-5	4695-4696	,	_	_	_	_	
22-6	4697-4700	the	_	_	_	_	
22-7	4701-4705	next	_	_	_	_	
22-8	4706-4710	task	_	_	_	_	
22-9	4711-4713	is	_	_	_	_	
22-10	4714-4721	started	_	_	_	_	
22-11	4721-4722	:	_	_	_	_	
22-12	4723-4732	Snowflake	_	_	_	_	
22-13	4732-4733	:	_	_	_	_	
22-14	4734-4740	Serial	_	_	_	_	
22-15	4741-4751	processing	_	_	_	_	
22-16	4752-4755	One	_	_	_	_	
22-17	4756-4764	solution	_	_	_	_	
22-18	4765-4767	to	_	_	_	_	
22-19	4768-4775	improve	_	_	_	_	
22-20	4775-4776	 	_	_	_	_	
22-21	4776-4786	throughput	_	_	_	_	
22-22	4786-4787	 	_	_	_	_	
22-23	4787-4789	is	_	_	_	_	
22-24	4790-4792	to	_	_	_	_	
22-25	4793-4798	scale	_	_	_	_	
22-26	4799-4801	up	_	_	_	_	
22-27	4802-4804	to	_	_	_	_	
22-28	4805-4806	a	_	_	_	_	
22-29	4807-4813	bigger	_	_	_	_	
22-30	4814-4821	virtual	_	_	_	_	
22-31	4822-4831	warehouse	_	_	_	_	
22-32	4832-4834	to	_	_	_	_	
22-33	4835-4843	complete	_	_	_	_	
22-34	4844-4847	the	_	_	_	_	
22-35	4848-4852	work	_	_	_	_	
22-36	4853-4859	faster	_	_	_	_	
22-37	4859-4860	,	_	_	_	_	
22-38	4861-4864	but	_	_	_	_	
22-39	4865-4869	even	_	_	_	_	
22-40	4870-4874	this	_	_	_	_	
22-41	4875-4884	technique	_	_	_	_	
22-42	4885-4889	will	_	_	_	_	
22-43	4890-4900	eventually	_	_	_	_	
22-44	4901-4906	reach	_	_	_	_	
22-45	4907-4908	a	_	_	_	_	
22-46	4909-4914	limit	_	_	_	_	
22-47	4915-4916	(	_	_	_	_	
22-48	4916-4920	I'll	_	_	_	_	
22-49	4921-4928	explain	_	_	_	_	
22-50	4929-4932	why	_	_	_	_	
22-51	4933-4935	in	_	_	_	_	
22-52	4936-4943	another	_	_	_	_	
22-53	4944-4951	article	_	_	_	_	
22-54	4951-4952	)	_	_	_	_	
22-55	4952-4953	.	_	_	_	_	
22-56	4953-4964	Furthermore	_	_	_	_	
22-57	4964-4965	,	_	_	_	_	
22-58	4966-4971	while	_	_	_	_	
22-59	4972-4974	it	_	_	_	_	
22-60	4974-4975	 	_	_	_	_	
22-61	4975-4980	might	_	_	_	_	
22-62	4980-4981	 	_	_	_	_	
22-63	4981-4988	improve	_	_	_	_	
22-64	4989-4994	query	_	_	_	_	
22-65	4995-5006	performance	_	_	_	_	
22-66	5006-5007	,	_	_	_	_	
22-67	5008-5015	there's	_	_	_	_	
22-68	5016-5020	also	_	_	_	_	
22-69	5021-5022	a	_	_	_	_	
22-70	5023-5030	greater	_	_	_	_	
22-71	5031-5037	chance	_	_	_	_	
22-72	5038-5040	of	_	_	_	_	
22-73	5041-5052	inefficient	_	_	_	_	
22-74	5053-5056	use	_	_	_	_	
22-75	5057-5059	of	_	_	_	_	
22-76	5060-5069	resources	_	_	_	_	
22-77	5070-5072	on	_	_	_	_	
22-78	5073-5074	a	_	_	_	_	
22-79	5075-5081	larger	_	_	_	_	
22-80	5082-5091	warehouse	_	_	_	_	
22-81	5091-5092	.	_	_	_	_	

#Text=Let's face it, if you're running an X-SMALL warehouse at 60% of its capacity you are wasting 40% of the machine resources.
23-1	5093-5098	Let's	_	_	_	_	
23-2	5099-5103	face	_	_	_	_	
23-3	5104-5106	it	_	_	_	_	
23-4	5106-5107	,	_	_	_	_	
23-5	5108-5110	if	_	_	_	_	
23-6	5111-5117	you're	_	_	_	_	
23-7	5118-5125	running	_	_	_	_	
23-8	5126-5128	an	_	_	_	_	
23-9	5129-5136	X-SMALL	_	_	_	_	
23-10	5137-5146	warehouse	_	_	_	_	
23-11	5147-5149	at	_	_	_	_	
23-12	5150-5153	60%	_	_	_	_	
23-13	5154-5156	of	_	_	_	_	
23-14	5157-5160	its	_	_	_	_	
23-15	5161-5169	capacity	_	_	_	_	
23-16	5170-5173	you	_	_	_	_	
23-17	5174-5177	are	_	_	_	_	
23-18	5178-5185	wasting	_	_	_	_	
23-19	5186-5189	40%	_	_	_	_	
23-20	5190-5192	of	_	_	_	_	
23-21	5193-5196	the	_	_	_	_	
23-22	5197-5204	machine	_	_	_	_	
23-23	5205-5214	resources	_	_	_	_	
23-24	5214-5215	.	_	_	_	_	

#Text=If however you're running a monster X4-LARGE warehouse at 60% capacity, you are wasting around 128 times the resources.
24-1	5216-5218	If	_	_	_	_	
24-2	5219-5226	however	_	_	_	_	
24-3	5227-5233	you're	_	_	_	_	
24-4	5234-5241	running	_	_	_	_	
24-5	5242-5243	a	_	_	_	_	
24-6	5244-5251	monster	_	_	_	_	
24-7	5252-5254	X4	_	_	_	_	
24-8	5254-5255	-	_	_	_	_	
24-9	5255-5260	LARGE	_	_	_	_	
24-10	5261-5270	warehouse	_	_	_	_	
24-11	5271-5273	at	_	_	_	_	
24-12	5274-5277	60%	_	_	_	_	
24-13	5278-5286	capacity	_	_	_	_	
24-14	5286-5287	,	_	_	_	_	
24-15	5288-5291	you	_	_	_	_	
24-16	5292-5295	are	_	_	_	_	
24-17	5296-5303	wasting	_	_	_	_	
24-18	5304-5310	around	_	_	_	_	
24-19	5311-5314	128	_	_	_	_	
24-20	5315-5320	times	_	_	_	_	
24-21	5321-5324	the	_	_	_	_	
24-22	5325-5334	resources	_	_	_	_	
24-23	5334-5335	.	_	_	_	_	

#Text=Snowflake: Parallel scale-out processing
#Text=In the above example, Apache Airflow is used to execute multiple parallel tasks (each with a different connection to Snowflake), and each task uses the same virtual warehouse.
25-1	5336-5345	Snowflake	_	_	_	_	
25-2	5345-5346	:	_	_	_	_	
25-3	5347-5355	Parallel	_	_	_	_	
25-4	5356-5365	scale-out	_	_	_	_	
25-5	5366-5376	processing	_	_	_	_	
25-6	5377-5379	In	_	_	_	_	
25-7	5380-5383	the	_	_	_	_	
25-8	5384-5389	above	_	_	_	_	
25-9	5390-5397	example	_	_	_	_	
25-10	5397-5398	,	_	_	_	_	
25-11	5398-5399	 	_	_	_	_	
25-12	5399-5405	Apache	_	_	_	_	
25-13	5406-5413	Airflow	_	_	_	_	
25-14	5413-5414	 	_	_	_	_	
25-15	5414-5416	is	_	_	_	_	
25-16	5417-5421	used	_	_	_	_	
25-17	5422-5424	to	_	_	_	_	
25-18	5425-5432	execute	_	_	_	_	
25-19	5432-5433	 	_	_	_	_	
25-20	5433-5441	multiple	_	_	_	_	
25-21	5442-5450	parallel	_	_	_	_	
25-22	5451-5456	tasks	_	_	_	_	
25-23	5456-5457	 	_	_	_	_	
25-24	5457-5458	(	_	_	_	_	
25-25	5458-5462	each	_	_	_	_	
25-26	5463-5467	with	_	_	_	_	
25-27	5468-5469	a	_	_	_	_	
25-28	5470-5479	different	_	_	_	_	
25-29	5480-5490	connection	_	_	_	_	
25-30	5491-5493	to	_	_	_	_	
25-31	5494-5503	Snowflake	_	_	_	_	
25-32	5503-5504	)	_	_	_	_	
25-33	5504-5505	,	_	_	_	_	
25-34	5506-5509	and	_	_	_	_	
25-35	5510-5514	each	_	_	_	_	
25-36	5515-5519	task	_	_	_	_	
25-37	5520-5524	uses	_	_	_	_	
25-38	5525-5528	the	_	_	_	_	
25-39	5529-5533	same	_	_	_	_	
25-40	5534-5541	virtual	_	_	_	_	
25-41	5542-5551	warehouse	_	_	_	_	
25-42	5551-5552	.	_	_	_	_	

#Text=As the workload increases, jobs begin to queue as there are insufficient resources available.
26-1	5553-5555	As	_	_	_	_	
26-2	5556-5559	the	_	_	_	_	
26-3	5560-5568	workload	_	_	_	_	
26-4	5569-5578	increases	_	_	_	_	
26-5	5578-5579	,	_	_	_	_	
26-6	5580-5584	jobs	_	_	_	_	
26-7	5585-5590	begin	_	_	_	_	
26-8	5591-5593	to	_	_	_	_	
26-9	5594-5599	queue	_	_	_	_	
26-10	5600-5602	as	_	_	_	_	
26-11	5603-5608	there	_	_	_	_	
26-12	5609-5612	are	_	_	_	_	
26-13	5613-5625	insufficient	_	_	_	_	
26-14	5626-5635	resources	_	_	_	_	
26-15	5636-5645	available	_	_	_	_	
26-16	5645-5646	.	_	_	_	_	

#Text=However, the Snowflake multi-cluster feature can be configured to automatically create another same-size virtual warehouse, and this continues to take up the load.As tasks complete, the above solution automatically scales back down to a single cluster, and once the last task finishes, the last running cluster will suspend.
27-1	5647-5654	However	_	_	_	_	
27-2	5654-5655	,	_	_	_	_	
27-3	5656-5659	the	_	_	_	_	
27-4	5659-5660	 	_	_	_	_	
27-5	5660-5669	Snowflake	_	_	_	_	
27-6	5670-5683	multi-cluster	_	_	_	_	
27-7	5684-5691	feature	_	_	_	_	
27-8	5691-5692	 	_	_	_	_	
27-9	5692-5695	can	_	_	_	_	
27-10	5696-5698	be	_	_	_	_	
27-11	5699-5709	configured	_	_	_	_	
27-12	5710-5712	to	_	_	_	_	
27-13	5713-5726	automatically	_	_	_	_	
27-14	5727-5733	create	_	_	_	_	
27-15	5734-5741	another	_	_	_	_	
27-16	5742-5751	same-size	_	_	_	_	
27-17	5752-5759	virtual	_	_	_	_	
27-18	5760-5769	warehouse	_	_	_	_	
27-19	5769-5770	,	_	_	_	_	
27-20	5771-5774	and	_	_	_	_	
27-21	5775-5779	this	_	_	_	_	
27-22	5780-5789	continues	_	_	_	_	
27-23	5790-5792	to	_	_	_	_	
27-24	5793-5797	take	_	_	_	_	
27-25	5798-5800	up	_	_	_	_	
27-26	5801-5804	the	_	_	_	_	
27-27	5805-5812	load.As	_	_	_	_	
27-28	5813-5818	tasks	_	_	_	_	
27-29	5819-5827	complete	_	_	_	_	
27-30	5827-5828	,	_	_	_	_	
27-31	5829-5832	the	_	_	_	_	
27-32	5833-5838	above	_	_	_	_	
27-33	5839-5847	solution	_	_	_	_	
27-34	5848-5861	automatically	_	_	_	_	
27-35	5862-5868	scales	_	_	_	_	
27-36	5869-5873	back	_	_	_	_	
27-37	5874-5878	down	_	_	_	_	
27-38	5879-5881	to	_	_	_	_	
27-39	5882-5883	a	_	_	_	_	
27-40	5884-5890	single	_	_	_	_	
27-41	5891-5898	cluster	_	_	_	_	
27-42	5898-5899	,	_	_	_	_	
27-43	5900-5903	and	_	_	_	_	
27-44	5904-5908	once	_	_	_	_	
27-45	5909-5912	the	_	_	_	_	
27-46	5913-5917	last	_	_	_	_	
27-47	5918-5922	task	_	_	_	_	
27-48	5923-5931	finishes	_	_	_	_	
27-49	5931-5932	,	_	_	_	_	
27-50	5933-5936	the	_	_	_	_	
27-51	5937-5941	last	_	_	_	_	
27-52	5942-5949	running	_	_	_	_	
27-53	5950-5957	cluster	_	_	_	_	
27-54	5958-5962	will	_	_	_	_	
27-55	5963-5970	suspend	_	_	_	_	
27-56	5970-5971	.	_	_	_	_	

#Text=This is by far the most efficient method of completing batch parallel tasks, and we still have the option of scaling up.The SQL snippet below illustrates the command needed to create a multi-cluster warehouse, which will automatically suspend after 60 seconds idle time, but use the ECONOMY scaling policy to favour throughput and saving credits over individual query latency.-- Create a multi-cluster warehouse for batch processing
#Text=create or replace warehouse batch_vwh with
#Text=warehouse_size
#Text== SMALL
#Text=min_cluster_count
#Text== 1
#Text=max_cluster_count
#Text== 10
#Text=scaling_policy
#Text== economy
#Text=auto_suspend
#Text== 60
#Text=initially_suspended = true;
#Text=3.
28-1	5972-5976	This	_	_	_	_	
28-2	5977-5979	is	_	_	_	_	
28-3	5980-5982	by	_	_	_	_	
28-4	5983-5986	far	_	_	_	_	
28-5	5987-5990	the	_	_	_	_	
28-6	5991-5995	most	_	_	_	_	
28-7	5996-6005	efficient	_	_	_	_	
28-8	6006-6012	method	_	_	_	_	
28-9	6013-6015	of	_	_	_	_	
28-10	6016-6026	completing	_	_	_	_	
28-11	6027-6032	batch	_	_	_	_	
28-12	6033-6041	parallel	_	_	_	_	
28-13	6042-6047	tasks	_	_	_	_	
28-14	6047-6048	,	_	_	_	_	
28-15	6049-6052	and	_	_	_	_	
28-16	6053-6055	we	_	_	_	_	
28-17	6056-6061	still	_	_	_	_	
28-18	6062-6066	have	_	_	_	_	
28-19	6067-6070	the	_	_	_	_	
28-20	6071-6077	option	_	_	_	_	
28-21	6078-6080	of	_	_	_	_	
28-22	6081-6088	scaling	_	_	_	_	
28-23	6089-6095	up.The	_	_	_	_	
28-24	6096-6099	SQL	_	_	_	_	
28-25	6100-6107	snippet	_	_	_	_	
28-26	6108-6113	below	_	_	_	_	
28-27	6114-6125	illustrates	_	_	_	_	
28-28	6126-6129	the	_	_	_	_	
28-29	6130-6137	command	_	_	_	_	
28-30	6138-6144	needed	_	_	_	_	
28-31	6145-6147	to	_	_	_	_	
28-32	6147-6148	 	_	_	_	_	
28-33	6148-6154	create	_	_	_	_	
28-34	6155-6156	a	_	_	_	_	
28-35	6157-6170	multi-cluster	_	_	_	_	
28-36	6171-6180	warehouse	_	_	_	_	
28-37	6180-6181	,	_	_	_	_	
28-38	6181-6182	 	_	_	_	_	
28-39	6182-6187	which	_	_	_	_	
28-40	6188-6192	will	_	_	_	_	
28-41	6193-6206	automatically	_	_	_	_	
28-42	6207-6214	suspend	_	_	_	_	
28-43	6215-6220	after	_	_	_	_	
28-44	6221-6223	60	_	_	_	_	
28-45	6224-6231	seconds	_	_	_	_	
28-46	6232-6236	idle	_	_	_	_	
28-47	6237-6241	time	_	_	_	_	
28-48	6241-6242	,	_	_	_	_	
28-49	6243-6246	but	_	_	_	_	
28-50	6247-6250	use	_	_	_	_	
28-51	6251-6254	the	_	_	_	_	
28-52	6255-6262	ECONOMY	_	_	_	_	
28-53	6263-6270	scaling	_	_	_	_	
28-54	6271-6277	policy	_	_	_	_	
28-55	6278-6280	to	_	_	_	_	
28-56	6281-6287	favour	_	_	_	_	
28-57	6288-6298	throughput	_	_	_	_	
28-58	6299-6302	and	_	_	_	_	
28-59	6303-6309	saving	_	_	_	_	
28-60	6310-6317	credits	_	_	_	_	
28-61	6318-6322	over	_	_	_	_	
28-62	6323-6333	individual	_	_	_	_	
28-63	6334-6339	query	_	_	_	_	
28-64	6340-6347	latency	_	_	_	_	
28-65	6347-6348	.	_	_	_	_	
28-66	6348-6349	-	_	_	_	_	
28-67	6349-6350	-	_	_	_	_	
28-68	6351-6357	Create	_	_	_	_	
28-69	6358-6359	a	_	_	_	_	
28-70	6360-6373	multi-cluster	_	_	_	_	
28-71	6374-6383	warehouse	_	_	_	_	
28-72	6384-6387	for	_	_	_	_	
28-73	6388-6393	batch	_	_	_	_	
28-74	6394-6404	processing	_	_	_	_	
28-75	6405-6411	create	_	_	_	_	
28-76	6412-6414	or	_	_	_	_	
28-77	6415-6422	replace	_	_	_	_	
28-78	6423-6432	warehouse	_	_	_	_	
28-79	6433-6442	batch_vwh	_	_	_	_	
28-80	6443-6447	with	_	_	_	_	
28-81	6448-6462	warehouse_size	*	parameter	_	_	
28-82	6463-6464	=	_	_	_	_	
28-83	6465-6470	SMALL	*	value	Associated-With	28-81	
28-84	6471-6488	min_cluster_count	*	parameter	_	_	
28-85	6489-6490	=	_	_	_	_	
28-86	6491-6492	1	*	value	Associated-With	28-84	
28-87	6493-6510	max_cluster_count	*	parameter	_	_	
28-88	6511-6512	=	_	_	_	_	
28-89	6513-6515	10	*	value	Associated-With	28-87	
28-90	6516-6530	scaling_policy	*	parameter	_	_	
28-91	6531-6532	=	_	_	_	_	
28-92	6533-6540	economy	*	value	Associated-With	28-90	
28-93	6541-6553	auto_suspend	*	parameter	_	_	
28-94	6554-6555	=	_	_	_	_	
28-95	6556-6558	60	*	value	Associated-With	28-93	
28-96	6559-6578	initially_suspended	*	parameter	_	_	
28-97	6579-6580	=	_	_	_	_	
28-98	6581-6585	true	*	value	Associated-With	28-96	
28-99	6585-6586	;	_	_	_	_	
28-100	6587-6588	3	_	_	_	_	
28-101	6588-6589	.	_	_	_	_	

#Text=Tuning Snowflake Query PerformanceSelect Only Required ColumnsLike many other data analytic platforms, Snowflake uses a columnar data store.
29-1	6590-6596	Tuning	_	_	_	_	
29-2	6597-6606	Snowflake	_	_	_	_	
29-3	6607-6612	Query	_	_	_	_	
29-4	6613-6630	PerformanceSelect	_	_	_	_	
29-5	6631-6635	Only	_	_	_	_	
29-6	6636-6644	Required	_	_	_	_	
29-7	6645-6656	ColumnsLike	_	_	_	_	
29-8	6657-6661	many	_	_	_	_	
29-9	6662-6667	other	_	_	_	_	
29-10	6668-6672	data	_	_	_	_	
29-11	6673-6681	analytic	_	_	_	_	
29-12	6682-6691	platforms	_	_	_	_	
29-13	6691-6692	,	_	_	_	_	
29-14	6693-6702	Snowflake	_	_	_	_	
29-15	6703-6707	uses	_	_	_	_	
29-16	6708-6709	a	_	_	_	_	
29-17	6709-6710	 	_	_	_	_	
29-18	6710-6718	columnar	_	_	_	_	
29-19	6719-6723	data	_	_	_	_	
29-20	6724-6729	store	_	_	_	_	
29-21	6729-6730	.	_	_	_	_	

#Text=As Turning Medal award winnerProfessor Michael Stonebraker indicates, in a seminal YouTube lecture on databases, "....a column store is over a hundred times faster than than a row-store".
30-1	6731-6733	As	_	_	_	_	
30-2	6733-6734	 	_	_	_	_	
30-3	6734-6741	Turning	_	_	_	_	
30-4	6742-6747	Medal	_	_	_	_	
30-5	6748-6753	award	_	_	_	_	
30-6	6754-6769	winnerProfessor	_	_	_	_	
30-7	6770-6777	Michael	_	_	_	_	
30-8	6778-6789	Stonebraker	_	_	_	_	
30-9	6790-6799	indicates	_	_	_	_	
30-10	6799-6800	,	_	_	_	_	
30-11	6801-6803	in	_	_	_	_	
30-12	6804-6805	a	_	_	_	_	
30-13	6806-6813	seminal	_	_	_	_	
30-14	6814-6821	YouTube	_	_	_	_	
30-15	6822-6829	lecture	_	_	_	_	
30-16	6830-6832	on	_	_	_	_	
30-17	6833-6842	databases	_	_	_	_	
30-18	6842-6843	,	_	_	_	_	
30-19	6843-6844	 	_	_	_	_	
30-20	6844-6845	"	_	_	_	_	
30-21	6845-6846	.	_	_	_	_	
30-22	6846-6847	.	_	_	_	_	
30-23	6847-6848	.	_	_	_	_	
30-24	6848-6849	.	_	_	_	_	
30-25	6849-6850	a	_	_	_	_	
30-26	6851-6857	column	_	_	_	_	
30-27	6858-6863	store	_	_	_	_	
30-28	6864-6866	is	_	_	_	_	
30-29	6867-6871	over	_	_	_	_	
30-30	6872-6873	a	_	_	_	_	
30-31	6874-6881	hundred	_	_	_	_	
30-32	6882-6887	times	_	_	_	_	
30-33	6888-6894	faster	_	_	_	_	
30-34	6895-6899	than	_	_	_	_	
30-35	6900-6904	than	_	_	_	_	
30-36	6905-6906	a	_	_	_	_	
30-37	6907-6916	row-store	_	_	_	_	
30-38	6916-6917	"	_	_	_	_	
30-39	6917-6918	.	_	_	_	_	

#Text=He demonstrated this fact with the C-Store Database which he demonstrated was 164 times faster than a commercially available database.
31-1	6919-6921	He	_	_	_	_	
31-2	6922-6934	demonstrated	_	_	_	_	
31-3	6935-6939	this	_	_	_	_	
31-4	6940-6944	fact	_	_	_	_	
31-5	6945-6949	with	_	_	_	_	
31-6	6950-6953	the	_	_	_	_	
31-7	6953-6954	 	_	_	_	_	
31-8	6954-6961	C-Store	_	_	_	_	
31-9	6962-6970	Database	_	_	_	_	
31-10	6970-6971	 	_	_	_	_	
31-11	6971-6976	which	_	_	_	_	
31-12	6977-6979	he	_	_	_	_	
31-13	6980-6992	demonstrated	_	_	_	_	
31-14	6993-6996	was	_	_	_	_	
31-15	6997-7000	164	_	_	_	_	
31-16	7001-7006	times	_	_	_	_	
31-17	7007-7013	faster	_	_	_	_	
31-18	7014-7018	than	_	_	_	_	
31-19	7019-7020	a	_	_	_	_	
31-20	7020-7021	 	_	_	_	_	
31-21	7021-7033	commercially	_	_	_	_	
31-22	7034-7043	available	_	_	_	_	
31-23	7043-7044	 	_	_	_	_	
31-24	7044-7052	database	_	_	_	_	
31-25	7052-7053	.	_	_	_	_	

#Text=For the record, Oracle, Exadata, SQLServer and PostgreSQL are all row store databases, designed for OLTP systems.One feature of column-store databases, is they achieve the remarkable performance gains by physically organising the data in columns rather than rows.
32-1	7054-7057	For	_	_	_	_	
32-2	7058-7061	the	_	_	_	_	
32-3	7062-7068	record	_	_	_	_	
32-4	7068-7069	,	_	_	_	_	
32-5	7070-7076	Oracle	_	_	_	_	
32-6	7076-7077	,	_	_	_	_	
32-7	7078-7085	Exadata	_	_	_	_	
32-8	7085-7086	,	_	_	_	_	
32-9	7087-7096	SQLServer	_	_	_	_	
32-10	7097-7100	and	_	_	_	_	
32-11	7101-7111	PostgreSQL	_	_	_	_	
32-12	7112-7115	are	_	_	_	_	
32-13	7116-7119	all	_	_	_	_	
32-14	7120-7123	row	_	_	_	_	
32-15	7124-7129	store	_	_	_	_	
32-16	7130-7139	databases	_	_	_	_	
32-17	7139-7140	,	_	_	_	_	
32-18	7141-7149	designed	_	_	_	_	
32-19	7150-7153	for	_	_	_	_	
32-20	7154-7158	OLTP	_	_	_	_	
32-21	7159-7170	systems.One	_	_	_	_	
32-22	7171-7178	feature	_	_	_	_	
32-23	7179-7181	of	_	_	_	_	
32-24	7182-7194	column-store	_	_	_	_	
32-25	7195-7204	databases	_	_	_	_	
32-26	7204-7205	,	_	_	_	_	
32-27	7206-7208	is	_	_	_	_	
32-28	7209-7213	they	_	_	_	_	
32-29	7214-7221	achieve	_	_	_	_	
32-30	7222-7225	the	_	_	_	_	
32-31	7226-7236	remarkable	_	_	_	_	
32-32	7237-7248	performance	_	_	_	_	
32-33	7249-7254	gains	_	_	_	_	
32-34	7255-7257	by	_	_	_	_	
32-35	7258-7268	physically	_	_	_	_	
32-36	7269-7279	organising	_	_	_	_	
32-37	7280-7283	the	_	_	_	_	
32-38	7284-7288	data	_	_	_	_	
32-39	7289-7291	in	_	_	_	_	
32-40	7291-7292	 	_	_	_	_	
32-41	7292-7299	columns	_	_	_	_	
32-42	7299-7300	 	_	_	_	_	
32-43	7300-7306	rather	_	_	_	_	
32-44	7307-7311	than	_	_	_	_	
32-45	7311-7312	 	_	_	_	_	
32-46	7312-7316	rows	_	_	_	_	
32-47	7316-7317	.	_	_	_	_	

#Text=Storing data in columns makes it much more efficient to retrieve a small sub-set of columns from the entire table.
33-1	7318-7325	Storing	_	_	_	_	
33-2	7326-7330	data	_	_	_	_	
33-3	7331-7333	in	_	_	_	_	
33-4	7334-7341	columns	_	_	_	_	
33-5	7342-7347	makes	_	_	_	_	
33-6	7348-7350	it	_	_	_	_	
33-7	7351-7355	much	_	_	_	_	
33-8	7356-7360	more	_	_	_	_	
33-9	7361-7370	efficient	_	_	_	_	
33-10	7371-7373	to	_	_	_	_	
33-11	7374-7382	retrieve	_	_	_	_	
33-12	7383-7384	a	_	_	_	_	
33-13	7385-7390	small	_	_	_	_	
33-14	7391-7398	sub-set	_	_	_	_	
33-15	7399-7401	of	_	_	_	_	
33-16	7402-7409	columns	_	_	_	_	
33-17	7410-7414	from	_	_	_	_	
33-18	7415-7418	the	_	_	_	_	
33-19	7419-7425	entire	_	_	_	_	
33-20	7426-7431	table	_	_	_	_	
33-21	7431-7432	.	_	_	_	_	

#Text=Snowflake:
#Text=Column optimised database storage
#Text=In the above diagram, the query fetches just two columns, and on a table with 100 columns, this will be 98% faster than a traditional row-store, which needs to read all the data from disk.This leads to a simple best practice (in production systems).
34-1	7433-7442	Snowflake	_	_	_	_	
34-2	7442-7443	:	_	_	_	_	
34-3	7444-7450	Column	_	_	_	_	
34-4	7451-7460	optimised	_	_	_	_	
34-5	7461-7469	database	_	_	_	_	
34-6	7470-7477	storage	_	_	_	_	
34-7	7478-7480	In	_	_	_	_	
34-8	7481-7484	the	_	_	_	_	
34-9	7485-7490	above	_	_	_	_	
34-10	7491-7498	diagram	_	_	_	_	
34-11	7498-7499	,	_	_	_	_	
34-12	7500-7503	the	_	_	_	_	
34-13	7504-7509	query	_	_	_	_	
34-14	7510-7517	fetches	_	_	_	_	
34-15	7518-7522	just	_	_	_	_	
34-16	7523-7526	two	_	_	_	_	
34-17	7527-7534	columns	_	_	_	_	
34-18	7534-7535	,	_	_	_	_	
34-19	7536-7539	and	_	_	_	_	
34-20	7540-7542	on	_	_	_	_	
34-21	7543-7544	a	_	_	_	_	
34-22	7545-7550	table	_	_	_	_	
34-23	7551-7555	with	_	_	_	_	
34-24	7556-7559	100	_	_	_	_	
34-25	7560-7567	columns	_	_	_	_	
34-26	7567-7568	,	_	_	_	_	
34-27	7569-7573	this	_	_	_	_	
34-28	7574-7578	will	_	_	_	_	
34-29	7579-7581	be	_	_	_	_	
34-30	7582-7585	98%	_	_	_	_	
34-31	7586-7592	faster	_	_	_	_	
34-32	7593-7597	than	_	_	_	_	
34-33	7598-7599	a	_	_	_	_	
34-34	7600-7611	traditional	_	_	_	_	
34-35	7612-7621	row-store	_	_	_	_	
34-36	7621-7622	,	_	_	_	_	
34-37	7623-7628	which	_	_	_	_	
34-38	7629-7634	needs	_	_	_	_	
34-39	7635-7637	to	_	_	_	_	
34-40	7638-7642	read	_	_	_	_	
34-41	7643-7646	all	_	_	_	_	
34-42	7647-7650	the	_	_	_	_	
34-43	7651-7655	data	_	_	_	_	
34-44	7656-7660	from	_	_	_	_	
34-45	7661-7670	disk.This	_	_	_	_	
34-46	7671-7676	leads	_	_	_	_	
34-47	7677-7679	to	_	_	_	_	
34-48	7680-7681	a	_	_	_	_	
34-49	7682-7688	simple	_	_	_	_	
34-50	7689-7693	best	_	_	_	_	
34-51	7694-7702	practice	_	_	_	_	
34-52	7703-7704	(	_	_	_	_	
34-53	7704-7706	in	_	_	_	_	
34-54	7707-7717	production	_	_	_	_	
34-55	7718-7725	systems	_	_	_	_	
34-56	7725-7726	)	_	_	_	_	
34-57	7726-7727	.	_	_	_	_	

#Text=Avoid selecting all the columns from a table or view using a select * from. 
35-1	7728-7733	Avoid	_	_	_	_	
35-2	7734-7743	selecting	_	_	_	_	
35-3	7744-7747	all	_	_	_	_	
35-4	7748-7751	the	_	_	_	_	
35-5	7752-7759	columns	_	_	_	_	
35-6	7760-7764	from	_	_	_	_	
35-7	7765-7766	a	_	_	_	_	
35-8	7767-7772	table	_	_	_	_	
35-9	7773-7775	or	_	_	_	_	
35-10	7776-7780	view	_	_	_	_	
35-11	7781-7786	using	_	_	_	_	
35-12	7787-7788	a	_	_	_	_	
35-13	7788-7789	 	_	_	_	_	
35-14	7789-7795	select	_	_	_	_	
35-15	7796-7797	*	_	_	_	_	
35-16	7798-7802	from	_	_	_	_	
35-17	7802-7803	.	_	_	_	_	
35-18	7803-7804	 	_	_	_	_	

#Text=While it's OK for ad-hoc queries, you'll find it much faster to indicate the specific columns you need.Maximize Cache UsageThe diagram below illustrates a vital component of the Snowflake internal architecture that it caches data in both the virtual warehouse and the cloud services layer.
36-1	7804-7809	While	_	_	_	_	
36-2	7810-7814	it's	_	_	_	_	
36-3	7815-7817	OK	_	_	_	_	
36-4	7818-7821	for	_	_	_	_	
36-5	7822-7828	ad-hoc	_	_	_	_	
36-6	7829-7836	queries	_	_	_	_	
36-7	7836-7837	,	_	_	_	_	
36-8	7838-7844	you'll	_	_	_	_	
36-9	7845-7849	find	_	_	_	_	
36-10	7850-7852	it	_	_	_	_	
36-11	7853-7857	much	_	_	_	_	
36-12	7858-7864	faster	_	_	_	_	
36-13	7865-7867	to	_	_	_	_	
36-14	7868-7876	indicate	_	_	_	_	
36-15	7877-7880	the	_	_	_	_	
36-16	7881-7889	specific	_	_	_	_	
36-17	7890-7897	columns	_	_	_	_	
36-18	7898-7901	you	_	_	_	_	
36-19	7902-7915	need.Maximize	_	_	_	_	
36-20	7916-7921	Cache	_	_	_	_	
36-21	7922-7930	UsageThe	_	_	_	_	
36-22	7931-7938	diagram	_	_	_	_	
36-23	7939-7944	below	_	_	_	_	
36-24	7945-7956	illustrates	_	_	_	_	
36-25	7957-7958	a	_	_	_	_	
36-26	7959-7964	vital	_	_	_	_	
36-27	7965-7974	component	_	_	_	_	
36-28	7975-7977	of	_	_	_	_	
36-29	7978-7981	the	_	_	_	_	
36-30	7982-7991	Snowflake	_	_	_	_	
36-31	7992-8000	internal	_	_	_	_	
36-32	8001-8013	architecture	_	_	_	_	
36-33	8014-8018	that	_	_	_	_	
36-34	8019-8021	it	_	_	_	_	
36-35	8022-8028	caches	_	_	_	_	
36-36	8029-8033	data	_	_	_	_	
36-37	8034-8036	in	_	_	_	_	
36-38	8037-8041	both	_	_	_	_	
36-39	8042-8045	the	_	_	_	_	
36-40	8046-8053	virtual	_	_	_	_	
36-41	8054-8063	warehouse	_	_	_	_	
36-42	8064-8067	and	_	_	_	_	
36-43	8068-8071	the	_	_	_	_	
36-44	8072-8077	cloud	_	_	_	_	
36-45	8078-8086	services	_	_	_	_	
36-46	8087-8092	layer	_	_	_	_	
36-47	8092-8093	.	_	_	_	_	

#Text=As I have indicated before, taking steps to maximise cache usage is a simple method to improve overall query performance on Snowflake.
37-1	8094-8096	As	_	_	_	_	
37-2	8097-8098	I	_	_	_	_	
37-3	8099-8103	have	_	_	_	_	
37-4	8104-8113	indicated	_	_	_	_	
37-5	8114-8120	before	_	_	_	_	
37-6	8120-8121	,	_	_	_	_	
37-7	8122-8128	taking	_	_	_	_	
37-8	8129-8134	steps	_	_	_	_	
37-9	8135-8137	to	_	_	_	_	
37-10	8137-8138	 	_	_	_	_	
37-11	8138-8146	maximise	_	_	_	_	
37-12	8147-8152	cache	_	_	_	_	
37-13	8153-8158	usage	_	_	_	_	
37-14	8158-8159	 	_	_	_	_	
37-15	8159-8161	is	_	_	_	_	
37-16	8162-8163	a	_	_	_	_	
37-17	8164-8170	simple	_	_	_	_	
37-18	8171-8177	method	_	_	_	_	
37-19	8178-8180	to	_	_	_	_	
37-20	8181-8188	improve	_	_	_	_	
37-21	8189-8196	overall	_	_	_	_	
37-22	8197-8202	query	_	_	_	_	
37-23	8203-8214	performance	_	_	_	_	
37-24	8215-8217	on	_	_	_	_	
37-25	8218-8227	Snowflake	_	_	_	_	
37-26	8227-8228	.	_	_	_	_	

#Text=Snowflake:
#Text=Cache Layers
#Text=Business intelligence dashboards frequently re-execute the same query to refresh the screen showing changed values.
38-1	8229-8238	Snowflake	_	_	_	_	
38-2	8238-8239	:	_	_	_	_	
38-3	8240-8245	Cache	_	_	_	_	
38-4	8246-8252	Layers	_	_	_	_	
38-5	8253-8261	Business	_	_	_	_	
38-6	8262-8274	intelligence	_	_	_	_	
38-7	8275-8285	dashboards	_	_	_	_	
38-8	8286-8296	frequently	_	_	_	_	
38-9	8297-8307	re-execute	_	_	_	_	
38-10	8308-8311	the	_	_	_	_	
38-11	8312-8316	same	_	_	_	_	
38-12	8317-8322	query	_	_	_	_	
38-13	8323-8325	to	_	_	_	_	
38-14	8326-8333	refresh	_	_	_	_	
38-15	8334-8337	the	_	_	_	_	
38-16	8338-8344	screen	_	_	_	_	
38-17	8345-8352	showing	_	_	_	_	
38-18	8353-8360	changed	_	_	_	_	
38-19	8361-8367	values	_	_	_	_	
38-20	8367-8368	.	_	_	_	_	

#Text=Snowflake automatically optimizes these queries by returning results from the Results Cache with results available for 24 hours after each query execution.Data is also cached within the virtual warehouse on fast SSD, but unlike the Results Cache, the virtual warehouse holds raw data which is aged out on a least recently used basis.
39-1	8369-8378	Snowflake	_	_	_	_	
39-2	8379-8392	automatically	_	_	_	_	
39-3	8393-8402	optimizes	_	_	_	_	
39-4	8403-8408	these	_	_	_	_	
39-5	8409-8416	queries	_	_	_	_	
39-6	8417-8419	by	_	_	_	_	
39-7	8420-8429	returning	_	_	_	_	
39-8	8430-8437	results	_	_	_	_	
39-9	8438-8442	from	_	_	_	_	
39-10	8443-8446	the	_	_	_	_	
39-11	8447-8454	Results	_	_	_	_	
39-12	8455-8460	Cache	_	_	_	_	
39-13	8461-8465	with	_	_	_	_	
39-14	8466-8473	results	_	_	_	_	
39-15	8474-8483	available	_	_	_	_	
39-16	8484-8487	for	_	_	_	_	
39-17	8488-8490	24	_	_	_	_	
39-18	8491-8496	hours	_	_	_	_	
39-19	8497-8502	after	_	_	_	_	
39-20	8503-8507	each	_	_	_	_	
39-21	8508-8513	query	_	_	_	_	
39-22	8514-8528	execution.Data	_	_	_	_	
39-23	8529-8531	is	_	_	_	_	
39-24	8532-8536	also	_	_	_	_	
39-25	8537-8543	cached	_	_	_	_	
39-26	8544-8550	within	_	_	_	_	
39-27	8551-8554	the	_	_	_	_	
39-28	8555-8562	virtual	_	_	_	_	
39-29	8563-8572	warehouse	_	_	_	_	
39-30	8573-8575	on	_	_	_	_	
39-31	8576-8580	fast	_	_	_	_	
39-32	8581-8584	SSD	_	_	_	_	
39-33	8584-8585	,	_	_	_	_	
39-34	8586-8589	but	_	_	_	_	
39-35	8590-8596	unlike	_	_	_	_	
39-36	8597-8600	the	_	_	_	_	
39-37	8601-8608	Results	_	_	_	_	
39-38	8609-8614	Cache	_	_	_	_	
39-39	8614-8615	,	_	_	_	_	
39-40	8616-8619	the	_	_	_	_	
39-41	8620-8627	virtual	_	_	_	_	
39-42	8628-8637	warehouse	_	_	_	_	
39-43	8638-8643	holds	_	_	_	_	
39-44	8644-8647	raw	_	_	_	_	
39-45	8648-8652	data	_	_	_	_	
39-46	8653-8658	which	_	_	_	_	
39-47	8659-8661	is	_	_	_	_	
39-48	8662-8666	aged	_	_	_	_	
39-49	8667-8670	out	_	_	_	_	
39-50	8671-8673	on	_	_	_	_	
39-51	8674-8675	a	_	_	_	_	
39-52	8676-8681	least	_	_	_	_	
39-53	8682-8690	recently	_	_	_	_	
39-54	8691-8695	used	_	_	_	_	
39-55	8696-8701	basis	_	_	_	_	
39-56	8701-8702	.	_	_	_	_	

#Text=While it’s not possible to directly adjust the virtual warehouse cache, it is possible to optimize usage with the following steps:Fetch required attributes:  Avoid using SELECT * in queries as this fetches all data attributes from Database Storage to the Warehouse Cache.  
40-1	8703-8708	While	_	_	_	_	
40-2	8709-8711	it	_	_	_	_	
40-3	8711-8712	’	_	_	_	_	
40-4	8712-8713	s	_	_	_	_	
40-5	8714-8717	not	_	_	_	_	
40-6	8718-8726	possible	_	_	_	_	
40-7	8727-8729	to	_	_	_	_	
40-8	8730-8738	directly	_	_	_	_	
40-9	8739-8745	adjust	_	_	_	_	
40-10	8746-8749	the	_	_	_	_	
40-11	8750-8757	virtual	_	_	_	_	
40-12	8758-8767	warehouse	_	_	_	_	
40-13	8768-8773	cache	_	_	_	_	
40-14	8773-8774	,	_	_	_	_	
40-15	8775-8777	it	_	_	_	_	
40-16	8778-8780	is	_	_	_	_	
40-17	8781-8789	possible	_	_	_	_	
40-18	8790-8792	to	_	_	_	_	
40-19	8793-8801	optimize	_	_	_	_	
40-20	8802-8807	usage	_	_	_	_	
40-21	8808-8812	with	_	_	_	_	
40-22	8813-8816	the	_	_	_	_	
40-23	8817-8826	following	_	_	_	_	
40-24	8827-8832	steps	_	_	_	_	
40-25	8832-8833	:	_	_	_	_	
40-26	8833-8838	Fetch	_	_	_	_	
40-27	8839-8847	required	_	_	_	_	
40-28	8848-8858	attributes	_	_	_	_	
40-29	8858-8859	:	_	_	_	_	
40-30	8859-8861	  	_	_	_	_	
40-31	8861-8866	Avoid	_	_	_	_	
40-32	8867-8872	using	_	_	_	_	
40-33	8873-8879	SELECT	_	_	_	_	
40-34	8880-8881	*	_	_	_	_	
40-35	8882-8884	in	_	_	_	_	
40-36	8885-8892	queries	_	_	_	_	
40-37	8893-8895	as	_	_	_	_	
40-38	8896-8900	this	_	_	_	_	
40-39	8901-8908	fetches	_	_	_	_	
40-40	8909-8912	all	_	_	_	_	
40-41	8913-8917	data	_	_	_	_	
40-42	8918-8928	attributes	_	_	_	_	
40-43	8929-8933	from	_	_	_	_	
40-44	8934-8942	Database	_	_	_	_	
40-45	8943-8950	Storage	_	_	_	_	
40-46	8951-8953	to	_	_	_	_	
40-47	8954-8957	the	_	_	_	_	
40-48	8958-8967	Warehouse	_	_	_	_	
40-49	8968-8973	Cache	_	_	_	_	
40-50	8973-8974	.	_	_	_	_	
40-51	8974-8976	  	_	_	_	_	

#Text=Not only is this slow, but it potentially fills the warehouse cache with data that is not needed.Scale Up:  While you should never scale up to tune a specific query, it may be sensible to resize the warehouse to improve overall query performance.  
41-1	8976-8979	Not	_	_	_	_	
41-2	8980-8984	only	_	_	_	_	
41-3	8985-8987	is	_	_	_	_	
41-4	8988-8992	this	_	_	_	_	
41-5	8993-8997	slow	_	_	_	_	
41-6	8997-8998	,	_	_	_	_	
41-7	8999-9002	but	_	_	_	_	
41-8	9003-9005	it	_	_	_	_	
41-9	9006-9017	potentially	_	_	_	_	
41-10	9018-9023	fills	_	_	_	_	
41-11	9024-9027	the	_	_	_	_	
41-12	9028-9037	warehouse	_	_	_	_	
41-13	9038-9043	cache	_	_	_	_	
41-14	9044-9048	with	_	_	_	_	
41-15	9049-9053	data	_	_	_	_	
41-16	9054-9058	that	_	_	_	_	
41-17	9059-9061	is	_	_	_	_	
41-18	9062-9065	not	_	_	_	_	
41-19	9066-9078	needed.Scale	_	_	_	_	
41-20	9079-9081	Up	_	_	_	_	
41-21	9081-9082	:	_	_	_	_	
41-22	9082-9084	  	_	_	_	_	
41-23	9084-9089	While	_	_	_	_	
41-24	9090-9093	you	_	_	_	_	
41-25	9094-9100	should	_	_	_	_	
41-26	9101-9106	never	_	_	_	_	
41-27	9107-9112	scale	_	_	_	_	
41-28	9113-9115	up	_	_	_	_	
41-29	9116-9118	to	_	_	_	_	
41-30	9119-9123	tune	_	_	_	_	
41-31	9124-9125	a	_	_	_	_	
41-32	9126-9134	specific	_	_	_	_	
41-33	9135-9140	query	_	_	_	_	
41-34	9140-9141	,	_	_	_	_	
41-35	9142-9144	it	_	_	_	_	
41-36	9145-9148	may	_	_	_	_	
41-37	9149-9151	be	_	_	_	_	
41-38	9152-9160	sensible	_	_	_	_	
41-39	9161-9163	to	_	_	_	_	
41-40	9164-9170	resize	_	_	_	_	
41-41	9171-9174	the	_	_	_	_	
41-42	9175-9184	warehouse	_	_	_	_	
41-43	9185-9187	to	_	_	_	_	
41-44	9188-9195	improve	_	_	_	_	
41-45	9196-9203	overall	_	_	_	_	
41-46	9204-9209	query	_	_	_	_	
41-47	9210-9221	performance	_	_	_	_	
41-48	9221-9222	.	_	_	_	_	
41-49	9222-9224	  	_	_	_	_	

#Text=As scaling up adds additional servers, it spreads the workload and effectively increases the overall warehouse cache size.Consider Data Clustering:  For tables over a terabyte in size, consider creating a cluster key to maximize partition elimination.  
42-1	9224-9226	As	_	_	_	_	
42-2	9227-9234	scaling	_	_	_	_	
42-3	9235-9237	up	_	_	_	_	
42-4	9238-9242	adds	_	_	_	_	
42-5	9243-9253	additional	_	_	_	_	
42-6	9254-9261	servers	_	_	_	_	
42-7	9261-9262	,	_	_	_	_	
42-8	9263-9265	it	_	_	_	_	
42-9	9266-9273	spreads	_	_	_	_	
42-10	9274-9277	the	_	_	_	_	
42-11	9278-9286	workload	_	_	_	_	
42-12	9287-9290	and	_	_	_	_	
42-13	9291-9302	effectively	_	_	_	_	
42-14	9303-9312	increases	_	_	_	_	
42-15	9313-9316	the	_	_	_	_	
42-16	9317-9324	overall	_	_	_	_	
42-17	9325-9334	warehouse	_	_	_	_	
42-18	9335-9340	cache	_	_	_	_	
42-19	9341-9354	size.Consider	_	_	_	_	
42-20	9355-9359	Data	_	_	_	_	
42-21	9360-9370	Clustering	_	_	_	_	
42-22	9370-9371	:	_	_	_	_	
42-23	9371-9373	  	_	_	_	_	
42-24	9373-9376	For	_	_	_	_	
42-25	9377-9383	tables	_	_	_	_	
42-26	9384-9388	over	_	_	_	_	
42-27	9389-9390	a	_	_	_	_	
42-28	9391-9399	terabyte	_	_	_	_	
42-29	9400-9402	in	_	_	_	_	
42-30	9403-9407	size	_	_	_	_	
42-31	9407-9408	,	_	_	_	_	
42-32	9409-9417	consider	_	_	_	_	
42-33	9418-9426	creating	_	_	_	_	
42-34	9427-9428	a	_	_	_	_	
42-35	9428-9429	 	_	_	_	_	
42-36	9429-9436	cluster	_	_	_	_	
42-37	9437-9440	key	_	_	_	_	
42-38	9440-9441	 	_	_	_	_	
42-39	9441-9443	to	_	_	_	_	
42-40	9444-9452	maximize	_	_	_	_	
42-41	9453-9462	partition	_	_	_	_	
42-42	9463-9474	elimination	_	_	_	_	
42-43	9474-9475	.	_	_	_	_	
42-44	9475-9477	  	_	_	_	_	

#Text=This solution both maximizes query performance for individual queries and returns fewer micro-partitions making the best use of the Warehouse Cache.-- Identify slow performing SQL statements
#Text=select query_id
#Text=as query_id
#Text=round(bytes_scanned/1024/1024)
#Text=as mb_scanned
#Text=total_elapsed_time / 1000
#Text=as elapsed_seconds
#Text=(partitions_scanned /
#Text=nullif(partitions_total,0)) * 100 as pct_table_scan
#Text=percent_scanned_from_cache * 100
#Text=as pct_from cache
#Text=bytes_spilled_to_local_storage
#Text=as spill_to_local
#Text=bytes_spilled_to_remote_storage
#Text=as spill_to_remote
#Text=from
#Text=snowflake.account_usage.query_history
#Text=where (bytes_spilled_to_local_storage > 1024 * 1024 or
#Text=bytes_spilled_to_remote_storage > 1024 * 1024 or
#Text=percentage_scanned_from_cache < 0.1)
#Text=and
#Text=elapsed_seconds > 120
#Text=and
#Text=bytes_scanned > 1024 * 1024
#Text=order by elapsed_seconds desc;
#Text=The SQL snippet above can help identify potential query performance issues on queries that run for more than 2 minutes and scan over a megabyte of data.
43-1	9477-9481	This	_	_	_	_	
43-2	9482-9490	solution	_	_	_	_	
43-3	9491-9495	both	_	_	_	_	
43-4	9496-9505	maximizes	_	_	_	_	
43-5	9506-9511	query	_	_	_	_	
43-6	9512-9523	performance	_	_	_	_	
43-7	9524-9527	for	_	_	_	_	
43-8	9528-9538	individual	_	_	_	_	
43-9	9539-9546	queries	_	_	_	_	
43-10	9547-9550	and	_	_	_	_	
43-11	9551-9558	returns	_	_	_	_	
43-12	9559-9564	fewer	_	_	_	_	
43-13	9565-9581	micro-partitions	_	_	_	_	
43-14	9582-9588	making	_	_	_	_	
43-15	9589-9592	the	_	_	_	_	
43-16	9593-9597	best	_	_	_	_	
43-17	9598-9601	use	_	_	_	_	
43-18	9602-9604	of	_	_	_	_	
43-19	9605-9608	the	_	_	_	_	
43-20	9609-9618	Warehouse	_	_	_	_	
43-21	9619-9624	Cache	_	_	_	_	
43-22	9624-9625	.	_	_	_	_	
43-23	9625-9626	-	_	_	_	_	
43-24	9626-9627	-	_	_	_	_	
43-25	9628-9636	Identify	_	_	_	_	
43-26	9637-9641	slow	_	_	_	_	
43-27	9642-9652	performing	_	_	_	_	
43-28	9653-9656	SQL	_	_	_	_	
43-29	9657-9667	statements	_	_	_	_	
43-30	9668-9674	select	_	_	_	_	
43-31	9675-9683	query_id	_	_	_	_	
43-32	9684-9686	as	_	_	_	_	
43-33	9687-9695	query_id	_	_	_	_	
43-34	9696-9701	round	_	_	_	_	
43-35	9701-9702	(	_	_	_	_	
43-36	9702-9715	bytes_scanned	_	_	_	_	
43-37	9715-9716	/	_	_	_	_	
43-38	9716-9720	1024	_	_	_	_	
43-39	9720-9721	/	_	_	_	_	
43-40	9721-9725	1024	_	_	_	_	
43-41	9725-9726	)	_	_	_	_	
43-42	9727-9729	as	_	_	_	_	
43-43	9730-9740	mb_scanned	_	_	_	_	
43-44	9741-9759	total_elapsed_time	_	_	_	_	
43-45	9760-9761	/	_	_	_	_	
43-46	9762-9766	1000	_	_	_	_	
43-47	9767-9769	as	_	_	_	_	
43-48	9770-9785	elapsed_seconds	_	_	_	_	
43-49	9786-9787	(	_	_	_	_	
43-50	9787-9805	partitions_scanned	_	_	_	_	
43-51	9806-9807	/	_	_	_	_	
43-52	9808-9814	nullif	_	_	_	_	
43-53	9814-9815	(	_	_	_	_	
43-54	9815-9831	partitions_total	_	_	_	_	
43-55	9831-9832	,	_	_	_	_	
43-56	9832-9833	0	_	_	_	_	
43-57	9833-9834	)	_	_	_	_	
43-58	9834-9835	)	_	_	_	_	
43-59	9836-9837	*	_	_	_	_	
43-60	9838-9841	100	_	_	_	_	
43-61	9842-9844	as	_	_	_	_	
43-62	9845-9859	pct_table_scan	_	_	_	_	
43-63	9860-9886	percent_scanned_from_cache	_	_	_	_	
43-64	9887-9888	*	_	_	_	_	
43-65	9889-9892	100	_	_	_	_	
43-66	9893-9895	as	_	_	_	_	
43-67	9896-9904	pct_from	_	_	_	_	
43-68	9905-9910	cache	_	_	_	_	
43-69	9911-9941	bytes_spilled_to_local_storage	_	_	_	_	
43-70	9942-9944	as	_	_	_	_	
43-71	9945-9959	spill_to_local	_	_	_	_	
43-72	9960-9991	bytes_spilled_to_remote_storage	_	_	_	_	
43-73	9992-9994	as	_	_	_	_	
43-74	9995-10010	spill_to_remote	_	_	_	_	
43-75	10011-10015	from	_	_	_	_	
43-76	10016-10053	snowflake.account_usage.query_history	_	_	_	_	
43-77	10054-10059	where	_	_	_	_	
43-78	10060-10061	(	_	_	_	_	
43-79	10061-10091	bytes_spilled_to_local_storage	_	_	_	_	
43-80	10092-10093	>	_	_	_	_	
43-81	10094-10098	1024	_	_	_	_	
43-82	10099-10100	*	_	_	_	_	
43-83	10101-10105	1024	_	_	_	_	
43-84	10106-10108	or	_	_	_	_	
43-85	10109-10140	bytes_spilled_to_remote_storage	_	_	_	_	
43-86	10141-10142	>	_	_	_	_	
43-87	10143-10147	1024	_	_	_	_	
43-88	10148-10149	*	_	_	_	_	
43-89	10150-10154	1024	_	_	_	_	
43-90	10155-10157	or	_	_	_	_	
43-91	10158-10187	percentage_scanned_from_cache	_	_	_	_	
43-92	10188-10189	<	_	_	_	_	
43-93	10190-10193	0.1	_	_	_	_	
43-94	10193-10194	)	_	_	_	_	
43-95	10195-10198	and	_	_	_	_	
43-96	10199-10214	elapsed_seconds	_	_	_	_	
43-97	10215-10216	>	_	_	_	_	
43-98	10217-10220	120	_	_	_	_	
43-99	10221-10224	and	_	_	_	_	
43-100	10225-10238	bytes_scanned	_	_	_	_	
43-101	10239-10240	>	_	_	_	_	
43-102	10241-10245	1024	_	_	_	_	
43-103	10246-10247	*	_	_	_	_	
43-104	10248-10252	1024	_	_	_	_	
43-105	10253-10258	order	_	_	_	_	
43-106	10259-10261	by	_	_	_	_	
43-107	10262-10277	elapsed_seconds	_	_	_	_	
43-108	10278-10282	desc	_	_	_	_	
43-109	10282-10283	;	_	_	_	_	
43-110	10284-10287	The	_	_	_	_	
43-111	10288-10291	SQL	_	_	_	_	
43-112	10292-10299	snippet	_	_	_	_	
43-113	10300-10305	above	_	_	_	_	
43-114	10306-10309	can	_	_	_	_	
43-115	10310-10314	help	_	_	_	_	
43-116	10315-10323	identify	_	_	_	_	
43-117	10324-10333	potential	_	_	_	_	
43-118	10334-10339	query	_	_	_	_	
43-119	10340-10351	performance	_	_	_	_	
43-120	10352-10358	issues	_	_	_	_	
43-121	10359-10361	on	_	_	_	_	
43-122	10362-10369	queries	_	_	_	_	
43-123	10370-10374	that	_	_	_	_	
43-124	10375-10378	run	_	_	_	_	
43-125	10379-10382	for	_	_	_	_	
43-126	10383-10387	more	_	_	_	_	
43-127	10388-10392	than	_	_	_	_	
43-128	10393-10394	2	_	_	_	_	
43-129	10395-10402	minutes	_	_	_	_	
43-130	10403-10406	and	_	_	_	_	
43-131	10407-10411	scan	_	_	_	_	
43-132	10412-10416	over	_	_	_	_	
43-133	10417-10418	a	_	_	_	_	
43-134	10419-10427	megabyte	_	_	_	_	
43-135	10428-10430	of	_	_	_	_	
43-136	10431-10435	data	_	_	_	_	
43-137	10435-10436	.	_	_	_	_	

#Text=In particular, look out for:Table Scans:  A high value of PCT_TABLE_SCAN and a large number of MB_SCANNED indicates potential poor query selectivity on large tables.  
44-1	10437-10439	In	_	_	_	_	
44-2	10440-10450	particular	_	_	_	_	
44-3	10450-10451	,	_	_	_	_	
44-4	10452-10456	look	_	_	_	_	
44-5	10457-10460	out	_	_	_	_	
44-6	10461-10464	for	_	_	_	_	
44-7	10464-10465	:	_	_	_	_	
44-8	10465-10470	Table	_	_	_	_	
44-9	10471-10476	Scans	_	_	_	_	
44-10	10476-10477	:	_	_	_	_	
44-11	10477-10479	  	_	_	_	_	
44-12	10479-10480	A	_	_	_	_	
44-13	10481-10485	high	_	_	_	_	
44-14	10486-10491	value	_	_	_	_	
44-15	10492-10494	of	_	_	_	_	
44-16	10495-10509	PCT_TABLE_SCAN	_	_	_	_	
44-17	10510-10513	and	_	_	_	_	
44-18	10514-10515	a	_	_	_	_	
44-19	10516-10521	large	_	_	_	_	
44-20	10522-10528	number	_	_	_	_	
44-21	10529-10531	of	_	_	_	_	
44-22	10532-10542	MB_SCANNED	_	_	_	_	
44-23	10543-10552	indicates	_	_	_	_	
44-24	10553-10562	potential	_	_	_	_	
44-25	10563-10567	poor	_	_	_	_	
44-26	10568-10573	query	_	_	_	_	
44-27	10574-10585	selectivity	_	_	_	_	
44-28	10586-10588	on	_	_	_	_	
44-29	10589-10594	large	_	_	_	_	
44-30	10595-10601	tables	_	_	_	_	
44-31	10601-10602	.	_	_	_	_	
44-32	10602-10604	  	_	_	_	_	

#Text=Check the query WHERE clause and consider using a cluster key if appropriate.Spilling:  Any value in SPILL_TO_LOCAL or SPILL_TO_REMOTE indicates a potentially large sort of operation on a small virtual warehouse.  
45-1	10604-10609	Check	_	_	_	_	
45-2	10610-10613	the	_	_	_	_	
45-3	10614-10619	query	_	_	_	_	
45-4	10620-10625	WHERE	_	_	_	_	
45-5	10626-10632	clause	_	_	_	_	
45-6	10633-10636	and	_	_	_	_	
45-7	10637-10645	consider	_	_	_	_	
45-8	10646-10651	using	_	_	_	_	
45-9	10652-10653	a	_	_	_	_	
45-10	10654-10661	cluster	_	_	_	_	
45-11	10662-10665	key	_	_	_	_	
45-12	10666-10668	if	_	_	_	_	
45-13	10669-10689	appropriate.Spilling	_	_	_	_	
45-14	10689-10690	:	_	_	_	_	
45-15	10690-10692	  	_	_	_	_	
45-16	10692-10695	Any	_	_	_	_	
45-17	10696-10701	value	_	_	_	_	
45-18	10702-10704	in	_	_	_	_	
45-19	10705-10719	SPILL_TO_LOCAL	_	_	_	_	
45-20	10720-10722	or	_	_	_	_	
45-21	10723-10738	SPILL_TO_REMOTE	_	_	_	_	
45-22	10739-10748	indicates	_	_	_	_	
45-23	10749-10750	a	_	_	_	_	
45-24	10751-10762	potentially	_	_	_	_	
45-25	10763-10768	large	_	_	_	_	
45-26	10769-10773	sort	_	_	_	_	
45-27	10774-10776	of	_	_	_	_	
45-28	10777-10786	operation	_	_	_	_	
45-29	10787-10789	on	_	_	_	_	
45-30	10790-10791	a	_	_	_	_	
45-31	10792-10797	small	_	_	_	_	
45-32	10798-10805	virtual	_	_	_	_	
45-33	10806-10815	warehouse	_	_	_	_	
45-34	10815-10816	.	_	_	_	_	
45-35	10816-10818	  	_	_	_	_	

#Text=Consider moving the query to a bigger warehouse or scaling up the existing warehouse if appropriate.ConclusionA common misconception about Snowflake is the only solution available to improve query performance is to scale up to a bigger warehouse, but this is a potentially poor strategy.
46-1	10818-10826	Consider	_	_	_	_	
46-2	10827-10833	moving	_	_	_	_	
46-3	10834-10837	the	_	_	_	_	
46-4	10838-10843	query	_	_	_	_	
46-5	10844-10846	to	_	_	_	_	
46-6	10847-10848	a	_	_	_	_	
46-7	10849-10855	bigger	_	_	_	_	
46-8	10856-10865	warehouse	_	_	_	_	
46-9	10866-10868	or	_	_	_	_	
46-10	10869-10876	scaling	_	_	_	_	
46-11	10877-10879	up	_	_	_	_	
46-12	10880-10883	the	_	_	_	_	
46-13	10884-10892	existing	_	_	_	_	
46-14	10893-10902	warehouse	_	_	_	_	
46-15	10903-10905	if	_	_	_	_	
46-16	10906-10929	appropriate.ConclusionA	_	_	_	_	
46-17	10930-10936	common	_	_	_	_	
46-18	10937-10950	misconception	_	_	_	_	
46-19	10951-10956	about	_	_	_	_	
46-20	10957-10966	Snowflake	_	_	_	_	
46-21	10967-10969	is	_	_	_	_	
46-22	10970-10973	the	_	_	_	_	
46-23	10974-10978	only	_	_	_	_	
46-24	10979-10987	solution	_	_	_	_	
46-25	10988-10997	available	_	_	_	_	
46-26	10998-11000	to	_	_	_	_	
46-27	11001-11008	improve	_	_	_	_	
46-28	11009-11014	query	_	_	_	_	
46-29	11015-11026	performance	_	_	_	_	
46-30	11027-11029	is	_	_	_	_	
46-31	11030-11032	to	_	_	_	_	
46-32	11033-11038	scale	_	_	_	_	
46-33	11039-11041	up	_	_	_	_	
46-34	11042-11044	to	_	_	_	_	
46-35	11045-11046	a	_	_	_	_	
46-36	11047-11053	bigger	_	_	_	_	
46-37	11054-11063	warehouse	_	_	_	_	
46-38	11063-11064	,	_	_	_	_	
46-39	11065-11068	but	_	_	_	_	
46-40	11069-11073	this	_	_	_	_	
46-41	11074-11076	is	_	_	_	_	
46-42	11077-11078	a	_	_	_	_	
46-43	11079-11090	potentially	_	_	_	_	
46-44	11091-11095	poor	_	_	_	_	
46-45	11096-11104	strategy	_	_	_	_	
46-46	11104-11105	.	_	_	_	_	

#Text=In reality, the best approach depends upon the problem area, which is most often in ingestion, transformation, or end-user queries, and often the most effective solutions are based upon a design approach rather than pure query tuning.By all means, consider scaling up to a large warehouse to improve query performance, but first identify and focus on the actual problem.
47-1	11106-11108	In	_	_	_	_	
47-2	11109-11116	reality	_	_	_	_	
47-3	11116-11117	,	_	_	_	_	
47-4	11118-11121	the	_	_	_	_	
47-5	11122-11126	best	_	_	_	_	
47-6	11127-11135	approach	_	_	_	_	
47-7	11136-11143	depends	_	_	_	_	
47-8	11144-11148	upon	_	_	_	_	
47-9	11149-11152	the	_	_	_	_	
47-10	11153-11160	problem	_	_	_	_	
47-11	11161-11165	area	_	_	_	_	
47-12	11165-11166	,	_	_	_	_	
47-13	11167-11172	which	_	_	_	_	
47-14	11173-11175	is	_	_	_	_	
47-15	11176-11180	most	_	_	_	_	
47-16	11181-11186	often	_	_	_	_	
47-17	11187-11189	in	_	_	_	_	
47-18	11190-11199	ingestion	_	_	_	_	
47-19	11199-11200	,	_	_	_	_	
47-20	11201-11215	transformation	_	_	_	_	
47-21	11215-11216	,	_	_	_	_	
47-22	11217-11219	or	_	_	_	_	
47-23	11220-11228	end-user	_	_	_	_	
47-24	11229-11236	queries	_	_	_	_	
47-25	11236-11237	,	_	_	_	_	
47-26	11238-11241	and	_	_	_	_	
47-27	11242-11247	often	_	_	_	_	
47-28	11248-11251	the	_	_	_	_	
47-29	11252-11256	most	_	_	_	_	
47-30	11257-11266	effective	_	_	_	_	
47-31	11267-11276	solutions	_	_	_	_	
47-32	11277-11280	are	_	_	_	_	
47-33	11281-11286	based	_	_	_	_	
47-34	11287-11291	upon	_	_	_	_	
47-35	11292-11293	a	_	_	_	_	
47-36	11294-11300	design	_	_	_	_	
47-37	11301-11309	approach	_	_	_	_	
47-38	11310-11316	rather	_	_	_	_	
47-39	11317-11321	than	_	_	_	_	
47-40	11322-11326	pure	_	_	_	_	
47-41	11327-11332	query	_	_	_	_	
47-42	11333-11342	tuning.By	_	_	_	_	
47-43	11343-11346	all	_	_	_	_	
47-44	11347-11352	means	_	_	_	_	
47-45	11352-11353	,	_	_	_	_	
47-46	11354-11362	consider	_	_	_	_	
47-47	11363-11370	scaling	_	_	_	_	
47-48	11371-11373	up	_	_	_	_	
47-49	11374-11376	to	_	_	_	_	
47-50	11377-11378	a	_	_	_	_	
47-51	11379-11384	large	_	_	_	_	
47-52	11385-11394	warehouse	_	_	_	_	
47-53	11395-11397	to	_	_	_	_	
47-54	11398-11405	improve	_	_	_	_	
47-55	11406-11411	query	_	_	_	_	
47-56	11412-11423	performance	_	_	_	_	
47-57	11423-11424	,	_	_	_	_	
47-58	11425-11428	but	_	_	_	_	
47-59	11429-11434	first	_	_	_	_	
47-60	11435-11443	identify	_	_	_	_	
47-61	11444-11447	and	_	_	_	_	
47-62	11448-11453	focus	_	_	_	_	
47-63	11454-11456	on	_	_	_	_	
47-64	11457-11460	the	_	_	_	_	
47-65	11461-11467	actual	_	_	_	_	
47-66	11468-11475	problem	_	_	_	_	
47-67	11475-11476	.	_	_	_	_	

#Text=You may find there are more effective and efficient solutions available.Notice Anything Missing?
48-1	11477-11480	You	_	_	_	_	
48-2	11481-11484	may	_	_	_	_	
48-3	11485-11489	find	_	_	_	_	
48-4	11490-11495	there	_	_	_	_	
48-5	11496-11499	are	_	_	_	_	
48-6	11500-11504	more	_	_	_	_	
48-7	11505-11514	effective	_	_	_	_	
48-8	11515-11518	and	_	_	_	_	
48-9	11519-11528	efficient	_	_	_	_	
48-10	11529-11538	solutions	_	_	_	_	
48-11	11539-11555	available.Notice	_	_	_	_	
48-12	11556-11564	Anything	_	_	_	_	
48-13	11565-11572	Missing	_	_	_	_	
48-14	11572-11573	?	_	_	_	_	

#Text=No annoying pop-ups or adverts.
49-1	11573-11575	No	_	_	_	_	
49-2	11576-11584	annoying	_	_	_	_	
49-3	11585-11592	pop-ups	_	_	_	_	
49-4	11593-11595	or	_	_	_	_	
49-5	11596-11603	adverts	_	_	_	_	
49-6	11603-11604	.	_	_	_	_	

#Text=No bull, just facts, insights and opinions.
50-1	11605-11607	No	_	_	_	_	
50-2	11608-11612	bull	_	_	_	_	
50-3	11612-11613	,	_	_	_	_	
50-4	11614-11618	just	_	_	_	_	
50-5	11619-11624	facts	_	_	_	_	
50-6	11624-11625	,	_	_	_	_	
50-7	11626-11634	insights	_	_	_	_	
50-8	11635-11638	and	_	_	_	_	
50-9	11639-11647	opinions	_	_	_	_	
50-10	11647-11648	.	_	_	_	_	

#Text=Sign up below and I will ping you a mail when new content is available.
51-1	11649-11653	Sign	_	_	_	_	
51-2	11654-11656	up	_	_	_	_	
51-3	11657-11662	below	_	_	_	_	
51-4	11663-11666	and	_	_	_	_	
51-5	11667-11668	I	_	_	_	_	
51-6	11669-11673	will	_	_	_	_	
51-7	11674-11678	ping	_	_	_	_	
51-8	11679-11682	you	_	_	_	_	
51-9	11683-11684	a	_	_	_	_	
51-10	11685-11689	mail	_	_	_	_	
51-11	11690-11694	when	_	_	_	_	
51-12	11695-11698	new	_	_	_	_	
51-13	11699-11706	content	_	_	_	_	
51-14	11707-11709	is	_	_	_	_	
51-15	11710-11719	available	_	_	_	_	
51-16	11719-11720	.	_	_	_	_	

#Text=I will never spam you or abuse your trust.
52-1	11721-11722	I	_	_	_	_	
52-2	11723-11727	will	_	_	_	_	
52-3	11728-11733	never	_	_	_	_	
52-4	11734-11738	spam	_	_	_	_	
52-5	11739-11742	you	_	_	_	_	
52-6	11743-11745	or	_	_	_	_	
52-7	11746-11751	abuse	_	_	_	_	
52-8	11752-11756	your	_	_	_	_	
52-9	11757-11762	trust	_	_	_	_	
52-10	11762-11763	.	_	_	_	_	

#Text=Alternatively, you can leave a comment below.Disclaimer: The opinions expressed on this site are entirely my own, and will not necessarily reflect those of my employer.
53-1	11764-11777	Alternatively	_	_	_	_	
53-2	11777-11778	,	_	_	_	_	
53-3	11779-11782	you	_	_	_	_	
53-4	11783-11786	can	_	_	_	_	
53-5	11787-11792	leave	_	_	_	_	
53-6	11793-11794	a	_	_	_	_	
53-7	11795-11802	comment	_	_	_	_	
53-8	11803-11819	below.Disclaimer	_	_	_	_	
53-9	11819-11820	:	_	_	_	_	
53-10	11820-11821	 	_	_	_	_	
53-11	11821-11824	The	_	_	_	_	
53-12	11825-11833	opinions	_	_	_	_	
53-13	11834-11843	expressed	_	_	_	_	
53-14	11844-11846	on	_	_	_	_	
53-15	11847-11851	this	_	_	_	_	
53-16	11852-11856	site	_	_	_	_	
53-17	11857-11860	are	_	_	_	_	
53-18	11861-11869	entirely	_	_	_	_	
53-19	11870-11872	my	_	_	_	_	
53-20	11873-11876	own	_	_	_	_	
53-21	11876-11877	,	_	_	_	_	
53-22	11878-11881	and	_	_	_	_	
53-23	11882-11886	will	_	_	_	_	
53-24	11887-11890	not	_	_	_	_	
53-25	11891-11902	necessarily	_	_	_	_	
53-26	11903-11910	reflect	_	_	_	_	
53-27	11911-11916	those	_	_	_	_	
53-28	11917-11919	of	_	_	_	_	
53-29	11920-11922	my	_	_	_	_	
53-30	11923-11931	employer	_	_	_	_	
53-31	11931-11932	.	_	_	_	_	

#Text=Email
#Text=Thank you!
54-1	11933-11938	Email	_	_	_	_	
54-2	11939-11944	Thank	_	_	_	_	
54-3	11945-11948	you	_	_	_	_	
54-4	11948-11949	!	_	_	_	_	

#Text=John Ryan
#Text=Previous
#Text=Previous
#Text=What is a Snowflake Virtual Warehouse?
55-1	11950-11954	John	_	_	_	_	
55-2	11955-11959	Ryan	_	_	_	_	
55-3	11960-11968	Previous	_	_	_	_	
55-4	11969-11977	Previous	_	_	_	_	
55-5	11978-11982	What	_	_	_	_	
55-6	11983-11985	is	_	_	_	_	
55-7	11986-11987	a	_	_	_	_	
55-8	11988-11997	Snowflake	_	_	_	_	
55-9	11998-12005	Virtual	_	_	_	_	
55-10	12006-12015	Warehouse	_	_	_	_	
55-11	12015-12016	?	_	_	_	_	

#Text=Next
#Text=Next
#Text=When should I use Data Vault?
56-1	12017-12021	Next	_	_	_	_	
56-2	12022-12026	Next	_	_	_	_	
56-3	12027-12031	When	_	_	_	_	
56-4	12032-12038	should	_	_	_	_	
56-5	12039-12040	I	_	_	_	_	
56-6	12041-12044	use	_	_	_	_	
56-7	12045-12049	Data	_	_	_	_	
56-8	12050-12055	Vault	_	_	_	_	
56-9	12055-12056	?	_	_	_	_	

#Text=Designed by me and hosted on Squarespace.
57-1	12057-12065	Designed	_	_	_	_	
57-2	12066-12068	by	_	_	_	_	
57-3	12069-12071	me	_	_	_	_	
57-4	12072-12075	and	_	_	_	_	
57-5	12076-12082	hosted	_	_	_	_	
57-6	12083-12085	on	_	_	_	_	
57-7	12086-12097	Squarespace	_	_	_	_	
57-8	12097-12098	.	_	_	_	_	

#Text=(c) Copyright John Ryan 2020.
58-1	12098-12099	(	_	_	_	_	
58-2	12099-12100	c	_	_	_	_	
58-3	12100-12101	)	_	_	_	_	
58-4	12102-12111	Copyright	_	_	_	_	
58-5	12112-12116	John	_	_	_	_	
58-6	12117-12121	Ryan	_	_	_	_	
58-7	12122-12126	2020	_	_	_	_	
58-8	12126-12127	.	_	_	_	_	

#Text=All Rights Reserved.
59-1	12128-12131	All	_	_	_	_	
59-2	12132-12138	Rights	_	_	_	_	
59-3	12139-12147	Reserved	_	_	_	_	
59-4	12147-12148	.	_	_	_	_	
