#FORMAT=WebAnno TSV 3.3


#Text=Bruce Momjian:
#Text=Postgres Blog
#Text=Home
#Text=Blogs
#Text=General
#Text=Postgres
#Text=Comment
#Text=Events
#Text=FAQ
#Text=Favorites
#Text=Articles
#Text=Books
#Text=Children
#Text=Documents
#Text=Hobbies
#Text=Movies
#Text=Music
#Text=Periodicals
#Text=Quotes
#Text=Sayings
#Text=Television
#Text=Videos
#Text=Artistic
#Text=Humorous
#Text=Serious
#Text=News
#Text=Presentations
#Text=PG Admin.
1-1	0-5	Bruce	
1-2	6-13	Momjian	
1-3	13-14	:	
1-4	15-23	Postgres	
1-5	24-28	Blog	
1-6	29-33	Home	
1-7	34-39	Blogs	
1-8	40-47	General	
1-9	48-56	Postgres	
1-10	57-64	Comment	
1-11	65-71	Events	
1-12	72-75	FAQ	
1-13	76-85	Favorites	
1-14	86-94	Articles	
1-15	95-100	Books	
1-16	101-109	Children	
1-17	110-119	Documents	
1-18	120-127	Hobbies	
1-19	128-134	Movies	
1-20	135-140	Music	
1-21	141-152	Periodicals	
1-22	153-159	Quotes	
1-23	160-167	Sayings	
1-24	168-178	Television	
1-25	179-185	Videos	
1-26	186-194	Artistic	
1-27	195-203	Humorous	
1-28	204-211	Serious	
1-29	212-216	News	
1-30	217-230	Presentations	
1-31	231-233	PG	
1-32	234-239	Admin	
1-33	239-240	.	

#Text=PG Book
#Text=PG Extended
#Text=PG Internals
#Text=Open Source
#Text=PG Perform.
2-1	241-243	PG	
2-2	244-248	Book	
2-3	249-251	PG	
2-4	252-260	Extended	
2-5	261-263	PG	
2-6	264-273	Internals	
2-7	274-278	Open	
2-8	279-285	Source	
2-9	286-288	PG	
2-10	289-296	Perform	
2-11	296-297	.	

#Text=PG Project
#Text=PG SQL
#Text=Security
#Text=General
#Text=Selecting
#Text=Press
#Text=Résumé
#Text=Search
#Text=Travel Map
#Text=Contact
#Text=Private Area
#Text=Postgres Blog
#Text=This blog is about my work on the Postgres open source
#Text=database, and is published on Planet PostgreSQL.
3-1	298-300	PG	
3-2	301-308	Project	
3-3	309-311	PG	
3-4	312-315	SQL	
3-5	316-324	Security	
3-6	325-332	General	
3-7	333-342	Selecting	
3-8	343-348	Press	
3-9	349-355	Résumé	
3-10	356-362	Search	
3-11	363-369	Travel	
3-12	370-373	Map	
3-13	374-381	Contact	
3-14	382-389	Private	
3-15	390-394	Area	
3-16	395-403	Postgres	
3-17	404-408	Blog	
3-18	409-413	This	
3-19	414-418	blog	
3-20	419-421	is	
3-21	422-427	about	
3-22	428-430	my	
3-23	431-435	work	
3-24	436-438	on	
3-25	439-442	the	
3-26	443-451	Postgres	
3-27	452-456	open	
3-28	457-463	source	
3-29	464-472	database	
3-30	472-473	,	
3-31	474-477	and	
3-32	478-480	is	
3-33	481-490	published	
3-34	491-493	on	
3-35	494-500	Planet	
3-36	501-511	PostgreSQL	
3-37	511-512	.	

#Text=PgLife allows monitoring of
#Text=all Postgres community activity.
4-1	513-519	PgLife	
4-2	520-526	allows	
4-3	527-537	monitoring	
4-4	538-540	of	
4-5	541-544	all	
4-6	545-553	Postgres	
4-7	554-563	community	
4-8	564-572	activity	
4-9	572-573	.	

#Text=Online status:
#Text=Unread Postgres emails:
#Text=Email graphs:
#Text=incoming,
#Text=outgoing,
#Text=unread,
#Text=commits
#Text=(details)
#Text=Category Index
#Text=2021
#Text=2020
#Text=2019
#Text=2018
#Text=2017
#Text=2016
#Text=2015
#Text=2014
#Text=2013
#Text=2012
#Text=2011
#Text=2010
#Text=2009
#Text=2008
#Text=Yearly Chart
#Text=Thirty Years of Continuous PostgreSQL Development
#Text=Wednesday, October 14, 2020
#Text=I did an interview with edb recently, and a
#Text=blog post based on that interview was published yesterday.
5-1	574-580	Online	
5-2	581-587	status	
5-3	587-588	:	
5-4	589-595	Unread	
5-5	596-604	Postgres	
5-6	605-611	emails	
5-7	611-612	:	
5-8	613-618	Email	
5-9	619-625	graphs	
5-10	625-626	:	
5-11	627-635	incoming	
5-12	635-636	,	
5-13	637-645	outgoing	
5-14	645-646	,	
5-15	647-653	unread	
5-16	653-654	,	
5-17	655-662	commits	
5-18	663-664	(	
5-19	664-671	details	
5-20	671-672	)	
5-21	673-681	Category	
5-22	682-687	Index	
5-23	688-692	2021	
5-24	693-697	2020	
5-25	698-702	2019	
5-26	703-707	2018	
5-27	708-712	2017	
5-28	713-717	2016	
5-29	718-722	2015	
5-30	723-727	2014	
5-31	728-732	2013	
5-32	733-737	2012	
5-33	738-742	2011	
5-34	743-747	2010	
5-35	748-752	2009	
5-36	753-757	2008	
5-37	758-764	Yearly	
5-38	765-770	Chart	
5-39	771-777	Thirty	
5-40	778-783	Years	
5-41	784-786	of	
5-42	787-797	Continuous	
5-43	798-808	PostgreSQL	
5-44	809-820	Development	
5-45	821-830	Wednesday	
5-46	830-831	,	
5-47	832-839	October	
5-48	840-842	14	
5-49	842-843	,	
5-50	844-848	2020	
5-51	849-850	I	
5-52	851-854	did	
5-53	855-857	an	
5-54	858-867	interview	
5-55	868-872	with	
5-56	873-876	edb	
5-57	877-885	recently	
5-58	885-886	,	
5-59	887-890	and	
5-60	891-892	a	
5-61	893-897	blog	
5-62	898-902	post	
5-63	903-908	based	
5-64	909-911	on	
5-65	912-916	that	
5-66	917-926	interview	
5-67	927-930	was	
5-68	931-940	published	
5-69	941-950	yesterday	
5-70	950-951	.	

#Text=It covers the Postgres 13 feature set and the effects of open source on the software development process.
6-1	952-954	It	
6-2	955-961	covers	
6-3	962-965	the	
6-4	966-974	Postgres	
6-5	975-977	13	
6-6	978-985	feature	
6-7	986-989	set	
6-8	990-993	and	
6-9	994-997	the	
6-10	998-1005	effects	
6-11	1006-1008	of	
6-12	1009-1013	open	
6-13	1014-1020	source	
6-14	1021-1023	on	
6-15	1024-1027	the	
6-16	1028-1036	software	
6-17	1037-1048	development	
6-18	1049-1056	process	
6-19	1056-1057	.	

#Text=View or Post Comments
#Text=Community Impact of 2nd Quadrant Purchase
#Text=Wednesday, October
#Text=7, 2020
#Text=Last week 2nd Quadrant was purchased by edb.
7-1	1058-1062	View	
7-2	1063-1065	or	
7-3	1066-1070	Post	
7-4	1071-1079	Comments	
7-5	1080-1089	Community	
7-6	1090-1096	Impact	
7-7	1097-1099	of	
7-8	1100-1103	2nd	
7-9	1104-1112	Quadrant	
7-10	1113-1121	Purchase	
7-11	1122-1131	Wednesday	
7-12	1131-1132	,	
7-13	1133-1140	October	
7-14	1141-1142	7	
7-15	1142-1143	,	
7-16	1144-1148	2020	
7-17	1149-1153	Last	
7-18	1154-1158	week	
7-19	1159-1162	2nd	
7-20	1163-1171	Quadrant	
7-21	1172-1175	was	
7-22	1176-1185	purchased	
7-23	1186-1188	by	
7-24	1189-1192	edb	
7-25	1192-1193	.	

#Text=While this is certainly good news for these companies, it can increase risks to the Postgres community.
8-1	1194-1199	While	
8-2	1200-1204	this	
8-3	1205-1207	is	
8-4	1208-1217	certainly	
8-5	1218-1222	good	
8-6	1223-1227	news	
8-7	1228-1231	for	
8-8	1232-1237	these	
8-9	1238-1247	companies	
8-10	1247-1248	,	
8-11	1249-1251	it	
8-12	1252-1255	can	
8-13	1256-1264	increase	
8-14	1265-1270	risks	
8-15	1271-1273	to	
8-16	1274-1277	the	
8-17	1278-1286	Postgres	
8-18	1287-1296	community	
8-19	1296-1297	.	

#Text=First, there is an
#Text=unwritten rule that the Postgres core team should not have over half of its members from a single company, and the acquisition causes edb's representation in the
#Text=core team to be 60% — the core team is working on a solution for this.
9-1	1298-1303	First	
9-2	1303-1304	,	
9-3	1305-1310	there	
9-4	1311-1313	is	
9-5	1314-1316	an	
9-6	1317-1326	unwritten	
9-7	1327-1331	rule	
9-8	1332-1336	that	
9-9	1337-1340	the	
9-10	1341-1349	Postgres	
9-11	1350-1354	core	
9-12	1355-1359	team	
9-13	1360-1366	should	
9-14	1367-1370	not	
9-15	1371-1375	have	
9-16	1376-1380	over	
9-17	1381-1385	half	
9-18	1386-1388	of	
9-19	1389-1392	its	
9-20	1393-1400	members	
9-21	1401-1405	from	
9-22	1406-1407	a	
9-23	1408-1414	single	
9-24	1415-1422	company	
9-25	1422-1423	,	
9-26	1424-1427	and	
9-27	1428-1431	the	
9-28	1432-1443	acquisition	
9-29	1444-1450	causes	
9-30	1451-1456	edb's	
9-31	1457-1471	representation	
9-32	1472-1474	in	
9-33	1475-1478	the	
9-34	1479-1483	core	
9-35	1484-1488	team	
9-36	1489-1491	to	
9-37	1492-1494	be	
9-38	1495-1498	60%	
9-39	1499-1500	—	
9-40	1501-1504	the	
9-41	1505-1509	core	
9-42	1510-1514	team	
9-43	1515-1517	is	
9-44	1518-1525	working	
9-45	1526-1528	on	
9-46	1529-1530	a	
9-47	1531-1539	solution	
9-48	1540-1543	for	
9-49	1544-1548	this	
9-50	1548-1549	.	

#Text=Second, two companies becoming one reduces Postgres user choice for support and services, especially in the North American and western European markets.
10-1	1550-1556	Second	
10-2	1556-1557	,	
10-3	1558-1561	two	
10-4	1562-1571	companies	
10-5	1572-1580	becoming	
10-6	1581-1584	one	
10-7	1585-1592	reduces	
10-8	1593-1601	Postgres	
10-9	1602-1606	user	
10-10	1607-1613	choice	
10-11	1614-1617	for	
10-12	1618-1625	support	
10-13	1626-1629	and	
10-14	1630-1638	services	
10-15	1638-1639	,	
10-16	1640-1650	especially	
10-17	1651-1653	in	
10-18	1654-1657	the	
10-19	1658-1663	North	
10-20	1664-1672	American	
10-21	1673-1676	and	
10-22	1677-1684	western	
10-23	1685-1693	European	
10-24	1694-1701	markets	
10-25	1701-1702	.	

#Text=Reduced vendor options often results in a worse
#Text=customer service and less innovation.
11-1	1703-1710	Reduced	
11-2	1711-1717	vendor	
11-3	1718-1725	options	
11-4	1726-1731	often	
11-5	1732-1739	results	
11-6	1740-1742	in	
11-7	1743-1744	a	
11-8	1745-1750	worse	
11-9	1751-1759	customer	
11-10	1760-1767	service	
11-11	1768-1771	and	
11-12	1772-1776	less	
11-13	1777-1787	innovation	
11-14	1787-1788	.	

#Text=Since the Postgres community does independent innovation, this might not be an issue for community software, but could be for company-controlled tooling around
#Text=Postgres.
12-1	1789-1794	Since	
12-2	1795-1798	the	
12-3	1799-1807	Postgres	
12-4	1808-1817	community	
12-5	1818-1822	does	
12-6	1823-1834	independent	
12-7	1835-1845	innovation	
12-8	1845-1846	,	
12-9	1847-1851	this	
12-10	1852-1857	might	
12-11	1858-1861	not	
12-12	1862-1864	be	
12-13	1865-1867	an	
12-14	1868-1873	issue	
12-15	1874-1877	for	
12-16	1878-1887	community	
12-17	1888-1896	software	
12-18	1896-1897	,	
12-19	1898-1901	but	
12-20	1902-1907	could	
12-21	1908-1910	be	
12-22	1911-1914	for	
12-23	1915-1933	company-controlled	
12-24	1934-1941	tooling	
12-25	1942-1948	around	
12-26	1949-1957	Postgres	
12-27	1957-1958	.	

#Text=Third, there is the risk that an even larger company wanting to hurt Postgres could acquire edb and take it in a direction that is neutral or negative for the Postgres community.
13-1	1959-1964	Third	
13-2	1964-1965	,	
13-3	1966-1971	there	
13-4	1972-1974	is	
13-5	1975-1978	the	
13-6	1979-1983	risk	
13-7	1984-1988	that	
13-8	1989-1991	an	
13-9	1992-1996	even	
13-10	1997-2003	larger	
13-11	2004-2011	company	
13-12	2012-2019	wanting	
13-13	2020-2022	to	
13-14	2023-2027	hurt	
13-15	2028-2036	Postgres	
13-16	2037-2042	could	
13-17	2043-2050	acquire	
13-18	2051-2054	edb	
13-19	2055-2058	and	
13-20	2059-2063	take	
13-21	2064-2066	it	
13-22	2067-2069	in	
13-23	2070-2071	a	
13-24	2072-2081	direction	
13-25	2082-2086	that	
13-26	2087-2089	is	
13-27	2090-2097	neutral	
13-28	2098-2100	or	
13-29	2101-2109	negative	
13-30	2110-2113	for	
13-31	2114-2117	the	
13-32	2118-2126	Postgres	
13-33	2127-2136	community	
13-34	2136-2137	.	

#Text=Employee
#Text=non-compete agreements, and the lack of other Postgres support companies could extend the duration of these effects.
14-1	2138-2146	Employee	
14-2	2147-2158	non-compete	
14-3	2159-2169	agreements	
14-4	2169-2170	,	
14-5	2171-2174	and	
14-6	2175-2178	the	
14-7	2179-2183	lack	
14-8	2184-2186	of	
14-9	2187-2192	other	
14-10	2193-2201	Postgres	
14-11	2202-2209	support	
14-12	2210-2219	companies	
14-13	2220-2225	could	
14-14	2226-2232	extend	
14-15	2233-2236	the	
14-16	2237-2245	duration	
14-17	2246-2248	of	
14-18	2249-2254	these	
14-19	2255-2262	effects	
14-20	2262-2263	.	

#Text=There isn't much the community can do to minimize these issues but to be alert for
#Text=problems.
15-1	2264-2269	There	
15-2	2270-2275	isn't	
15-3	2276-2280	much	
15-4	2281-2284	the	
15-5	2285-2294	community	
15-6	2295-2298	can	
15-7	2299-2301	do	
15-8	2302-2304	to	
15-9	2305-2313	minimize	
15-10	2314-2319	these	
15-11	2320-2326	issues	
15-12	2327-2330	but	
15-13	2331-2333	to	
15-14	2334-2336	be	
15-15	2337-2342	alert	
15-16	2343-2346	for	
15-17	2347-2355	problems	
15-18	2355-2356	.	

#Text=Update: Hacker News thread and tweet 2020-10-07
#Text=View or Post Comments
#Text=The Economics of Open Source Contributions
#Text=Friday, October
#Text=2, 2020
#Text=This long article describes the many challenges of managing open
#Text=source projects and the mismatch between resource allocation, e.g., money, and the importance of the software to economic activity.
16-1	2357-2363	Update	
16-2	2363-2364	:	
16-3	2365-2371	Hacker	
16-4	2372-2376	News	
16-5	2377-2383	thread	
16-6	2384-2387	and	
16-7	2388-2393	tweet	
16-8	2394-2398	2020	
16-9	2398-2399	-	
16-10	2399-2401	10	
16-11	2401-2402	-	
16-12	2402-2404	07	
16-13	2405-2409	View	
16-14	2410-2412	or	
16-15	2413-2417	Post	
16-16	2418-2426	Comments	
16-17	2427-2430	The	
16-18	2431-2440	Economics	
16-19	2441-2443	of	
16-20	2444-2448	Open	
16-21	2449-2455	Source	
16-22	2456-2469	Contributions	
16-23	2470-2476	Friday	
16-24	2476-2477	,	
16-25	2478-2485	October	
16-26	2486-2487	2	
16-27	2487-2488	,	
16-28	2489-2493	2020	
16-29	2494-2498	This	
16-30	2499-2503	long	
16-31	2504-2511	article	
16-32	2512-2521	describes	
16-33	2522-2525	the	
16-34	2526-2530	many	
16-35	2531-2541	challenges	
16-36	2542-2544	of	
16-37	2545-2553	managing	
16-38	2554-2558	open	
16-39	2559-2565	source	
16-40	2566-2574	projects	
16-41	2575-2578	and	
16-42	2579-2582	the	
16-43	2583-2591	mismatch	
16-44	2592-2599	between	
16-45	2600-2608	resource	
16-46	2609-2619	allocation	
16-47	2619-2620	,	
16-48	2621-2624	e.g	
16-49	2624-2625	.	
16-50	2625-2626	,	
16-51	2627-2632	money	
16-52	2632-2633	,	
16-53	2634-2637	and	
16-54	2638-2641	the	
16-55	2642-2652	importance	
16-56	2653-2655	of	
16-57	2656-2659	the	
16-58	2660-2668	software	
16-59	2669-2671	to	
16-60	2672-2680	economic	
16-61	2681-2689	activity	
16-62	2689-2690	.	

#Text=It highlights OpenSSL as an
#Text=example where limited funding led to developer burnout and security vulnerabilities, even though so much of the Internet's infrastructure relies on it.
17-1	2691-2693	It	
17-2	2694-2704	highlights	
17-3	2705-2712	OpenSSL	
17-4	2713-2715	as	
17-5	2716-2718	an	
17-6	2719-2726	example	
17-7	2727-2732	where	
17-8	2733-2740	limited	
17-9	2741-2748	funding	
17-10	2749-2752	led	
17-11	2753-2755	to	
17-12	2756-2765	developer	
17-13	2766-2773	burnout	
17-14	2774-2777	and	
17-15	2778-2786	security	
17-16	2787-2802	vulnerabilities	
17-17	2802-2803	,	
17-18	2804-2808	even	
17-19	2809-2815	though	
17-20	2816-2818	so	
17-21	2819-2823	much	
17-22	2824-2826	of	
17-23	2827-2830	the	
17-24	2831-2841	Internet's	
17-25	2842-2856	infrastructure	
17-26	2857-2863	relies	
17-27	2864-2866	on	
17-28	2867-2869	it	
17-29	2869-2870	.	

#Text=With proprietary software, there is usually a connection between software cost and its economic value, though the linkage varies widely.
18-1	2871-2875	With	
18-2	2876-2887	proprietary	
18-3	2888-2896	software	
18-4	2896-2897	,	
18-5	2898-2903	there	
18-6	2904-2906	is	
18-7	2907-2914	usually	
18-8	2915-2916	a	
18-9	2917-2927	connection	
18-10	2928-2935	between	
18-11	2936-2944	software	
18-12	2945-2949	cost	
18-13	2950-2953	and	
18-14	2954-2957	its	
18-15	2958-2966	economic	
18-16	2967-2972	value	
18-17	2972-2973	,	
18-18	2974-2980	though	
18-19	2981-2984	the	
18-20	2985-2992	linkage	
18-21	2993-2999	varies	
18-22	3000-3006	widely	
18-23	3006-3007	.	

#Text=(How much of software's cost goes into software development,
#Text=testing, bug fixing, and security analysis has even greater variability.)
19-1	3008-3009	(	
19-2	3009-3012	How	
19-3	3013-3017	much	
19-4	3018-3020	of	
19-5	3021-3031	software's	
19-6	3032-3036	cost	
19-7	3037-3041	goes	
19-8	3042-3046	into	
19-9	3047-3055	software	
19-10	3056-3067	development	
19-11	3067-3068	,	
19-12	3069-3076	testing	
19-13	3076-3077	,	
19-14	3078-3081	bug	
19-15	3082-3088	fixing	
19-16	3088-3089	,	
19-17	3090-3093	and	
19-18	3094-3102	security	
19-19	3103-3111	analysis	
19-20	3112-3115	has	
19-21	3116-3120	even	
19-22	3121-3128	greater	
19-23	3129-3140	variability	
19-24	3140-3141	.	
19-25	3141-3142	)	

#Text=With open source, there is even less linkage.
20-1	3143-3147	With	
20-2	3148-3152	open	
20-3	3153-3159	source	
20-4	3159-3160	,	
20-5	3161-3166	there	
20-6	3167-3169	is	
20-7	3170-3174	even	
20-8	3175-3179	less	
20-9	3180-3187	linkage	
20-10	3187-3188	.	

#Text=The article explores various methods to increase the linkage.
21-1	3189-3192	The	
21-2	3193-3200	article	
21-3	3201-3209	explores	
21-4	3210-3217	various	
21-5	3218-3225	methods	
21-6	3226-3228	to	
21-7	3229-3237	increase	
21-8	3238-3241	the	
21-9	3242-3249	linkage	
21-10	3249-3250	.	

#Text=It is a complex problem, both to get money, and to distribute money in a way that helps and does not harm open source communities.
22-1	3251-3253	It	
22-2	3254-3256	is	
22-3	3257-3258	a	
22-4	3259-3266	complex	
22-5	3267-3274	problem	
22-6	3274-3275	,	
22-7	3276-3280	both	
22-8	3281-3283	to	
22-9	3284-3287	get	
22-10	3288-3293	money	
22-11	3293-3294	,	
22-12	3295-3298	and	
22-13	3299-3301	to	
22-14	3302-3312	distribute	
22-15	3313-3318	money	
22-16	3319-3321	in	
22-17	3322-3323	a	
22-18	3324-3327	way	
22-19	3328-3332	that	
22-20	3333-3338	helps	
22-21	3339-3342	and	
22-22	3343-3347	does	
22-23	3348-3351	not	
22-24	3352-3356	harm	
22-25	3357-3361	open	
22-26	3362-3368	source	
22-27	3369-3380	communities	
22-28	3380-3381	.	

#Text=Postgres has been fortunate in this regard.
23-1	3382-3390	Postgres	
23-2	3391-3394	has	
23-3	3395-3399	been	
23-4	3400-3409	fortunate	
23-5	3410-3412	in	
23-6	3413-3417	this	
23-7	3418-3424	regard	
23-8	3424-3425	.	

#Text=Funding from Red Hat and Japanese companies (Fujitsu, ntt, sra) helped support critical Postgres activities in the community's early
#Text=years.
24-1	3426-3433	Funding	
24-2	3434-3438	from	
24-3	3439-3442	Red	
24-4	3443-3446	Hat	
24-5	3447-3450	and	
24-6	3451-3459	Japanese	
24-7	3460-3469	companies	
24-8	3470-3471	(	
24-9	3471-3478	Fujitsu	
24-10	3478-3479	,	
24-11	3480-3483	ntt	
24-12	3483-3484	,	
24-13	3485-3488	sra	
24-14	3488-3489	)	
24-15	3490-3496	helped	
24-16	3497-3504	support	
24-17	3505-3513	critical	
24-18	3514-3522	Postgres	
24-19	3523-3533	activities	
24-20	3534-3536	in	
24-21	3537-3540	the	
24-22	3541-3552	community's	
24-23	3553-3558	early	
24-24	3559-3564	years	
24-25	3564-3565	.	

#Text=The special nature of database software has formed an environment where the Postgres community has had healthy infrastructure,
#Text=governance, management, and contributors for over a decade.
25-1	3566-3569	The	
25-2	3570-3577	special	
25-3	3578-3584	nature	
25-4	3585-3587	of	
25-5	3588-3596	database	
25-6	3597-3605	software	
25-7	3606-3609	has	
25-8	3610-3616	formed	
25-9	3617-3619	an	
25-10	3620-3631	environment	
25-11	3632-3637	where	
25-12	3638-3641	the	
25-13	3642-3650	Postgres	
25-14	3651-3660	community	
25-15	3661-3664	has	
25-16	3665-3668	had	
25-17	3669-3676	healthy	
25-18	3677-3691	infrastructure	
25-19	3691-3692	,	
25-20	3693-3703	governance	
25-21	3703-3704	,	
25-22	3705-3715	management	
25-23	3715-3716	,	
25-24	3717-3720	and	
25-25	3721-3733	contributors	
25-26	3734-3737	for	
25-27	3738-3742	over	
25-28	3743-3744	a	
25-29	3745-3751	decade	
25-30	3751-3752	.	

#Text=On an individual level, we do see these problems.
26-1	3753-3755	On	
26-2	3756-3758	an	
26-3	3759-3769	individual	
26-4	3770-3775	level	
26-5	3775-3776	,	
26-6	3777-3779	we	
26-7	3780-3782	do	
26-8	3783-3786	see	
26-9	3787-3792	these	
26-10	3793-3801	problems	
26-11	3801-3802	.	

#Text=Some contributors take on tasks that yield them little or no short-term benefit, while incurring huge time and emotional costs.
27-1	3803-3807	Some	
27-2	3808-3820	contributors	
27-3	3821-3825	take	
27-4	3826-3828	on	
27-5	3829-3834	tasks	
27-6	3835-3839	that	
27-7	3840-3845	yield	
27-8	3846-3850	them	
27-9	3851-3857	little	
27-10	3858-3860	or	
27-11	3861-3863	no	
27-12	3864-3874	short-term	
27-13	3875-3882	benefit	
27-14	3882-3883	,	
27-15	3884-3889	while	
27-16	3890-3899	incurring	
27-17	3900-3904	huge	
27-18	3905-3909	time	
27-19	3910-3913	and	
27-20	3914-3923	emotional	
27-21	3924-3929	costs	
27-22	3929-3930	.	

#Text=Some users ask the
#Text=community for assistance with the minimal amount of information, assuming we will guess their intent, or that we will dig into their bug report with them doing no research.
28-1	3931-3935	Some	
28-2	3936-3941	users	
28-3	3942-3945	ask	
28-4	3946-3949	the	
28-5	3950-3959	community	
28-6	3960-3963	for	
28-7	3964-3974	assistance	
28-8	3975-3979	with	
28-9	3980-3983	the	
28-10	3984-3991	minimal	
28-11	3992-3998	amount	
28-12	3999-4001	of	
28-13	4002-4013	information	
28-14	4013-4014	,	
28-15	4015-4023	assuming	
28-16	4024-4026	we	
28-17	4027-4031	will	
28-18	4032-4037	guess	
28-19	4038-4043	their	
28-20	4044-4050	intent	
28-21	4050-4051	,	
28-22	4052-4054	or	
28-23	4055-4059	that	
28-24	4060-4062	we	
28-25	4063-4067	will	
28-26	4068-4071	dig	
28-27	4072-4076	into	
28-28	4077-4082	their	
28-29	4083-4086	bug	
28-30	4087-4093	report	
28-31	4094-4098	with	
28-32	4099-4103	them	
28-33	4104-4109	doing	
28-34	4110-4112	no	
28-35	4113-4121	research	
28-36	4121-4122	.	

#Text=I often just delete such emails
#Text=from my mailbox.
29-1	4123-4124	I	
29-2	4125-4130	often	
29-3	4131-4135	just	
29-4	4136-4142	delete	
29-5	4143-4147	such	
29-6	4148-4154	emails	
29-7	4155-4159	from	
29-8	4160-4162	my	
29-9	4163-4170	mailbox	
29-10	4170-4171	.	

#Text=I sometimes get private emails asking for assistance,
#Text=so I created a stock email reply that starts with, "Due to time constraints, I do not directly answer general PostgreSQL questions,"
#Text=and information on where to get help, e.g., email lists, irc,
#Text=faq.
30-1	4172-4173	I	
30-2	4174-4183	sometimes	
30-3	4184-4187	get	
30-4	4188-4195	private	
30-5	4196-4202	emails	
30-6	4203-4209	asking	
30-7	4210-4213	for	
30-8	4214-4224	assistance	
30-9	4224-4225	,	
30-10	4226-4228	so	
30-11	4229-4230	I	
30-12	4231-4238	created	
30-13	4239-4240	a	
30-14	4241-4246	stock	
30-15	4247-4252	email	
30-16	4253-4258	reply	
30-17	4259-4263	that	
30-18	4264-4270	starts	
30-19	4271-4275	with	
30-20	4275-4276	,	
30-21	4277-4278	"	
30-22	4278-4281	Due	
30-23	4282-4284	to	
30-24	4285-4289	time	
30-25	4290-4301	constraints	
30-26	4301-4302	,	
30-27	4303-4304	I	
30-28	4305-4307	do	
30-29	4308-4311	not	
30-30	4312-4320	directly	
30-31	4321-4327	answer	
30-32	4328-4335	general	
30-33	4336-4346	PostgreSQL	
30-34	4347-4356	questions	
30-35	4356-4357	,	
30-36	4357-4358	"	
30-37	4359-4362	and	
30-38	4363-4374	information	
30-39	4375-4377	on	
30-40	4378-4383	where	
30-41	4384-4386	to	
30-42	4387-4390	get	
30-43	4391-4395	help	
30-44	4395-4396	,	
30-45	4397-4400	e.g	
30-46	4400-4401	.	
30-47	4401-4402	,	
30-48	4403-4408	email	
30-49	4409-4414	lists	
30-50	4414-4415	,	
30-51	4416-4419	irc	
30-52	4419-4420	,	
30-53	4421-4424	faq	
30-54	4424-4425	.	

#Text=This Slashdot post paints a good picture of how to handle the many demands of open
#Text=source development.
31-1	4426-4430	This	
31-2	4431-4439	Slashdot	
31-3	4440-4444	post	
31-4	4445-4451	paints	
31-5	4452-4453	a	
31-6	4454-4458	good	
31-7	4459-4466	picture	
31-8	4467-4469	of	
31-9	4470-4473	how	
31-10	4474-4476	to	
31-11	4477-4483	handle	
31-12	4484-4487	the	
31-13	4488-4492	many	
31-14	4493-4500	demands	
31-15	4501-4503	of	
31-16	4504-4508	open	
31-17	4509-4515	source	
31-18	4516-4527	development	
31-19	4527-4528	.	

#Text=Open source has been mainstream for at least a decade, so it will be interesting to see if generally-accepted solutions are ever found, or if this will continue be an area of confusion and hand-wringing,
#Text=even though open source software use continues to grow.
32-1	4529-4533	Open	
32-2	4534-4540	source	
32-3	4541-4544	has	
32-4	4545-4549	been	
32-5	4550-4560	mainstream	
32-6	4561-4564	for	
32-7	4565-4567	at	
32-8	4568-4573	least	
32-9	4574-4575	a	
32-10	4576-4582	decade	
32-11	4582-4583	,	
32-12	4584-4586	so	
32-13	4587-4589	it	
32-14	4590-4594	will	
32-15	4595-4597	be	
32-16	4598-4609	interesting	
32-17	4610-4612	to	
32-18	4613-4616	see	
32-19	4617-4619	if	
32-20	4620-4638	generally-accepted	
32-21	4639-4648	solutions	
32-22	4649-4652	are	
32-23	4653-4657	ever	
32-24	4658-4663	found	
32-25	4663-4664	,	
32-26	4665-4667	or	
32-27	4668-4670	if	
32-28	4671-4675	this	
32-29	4676-4680	will	
32-30	4681-4689	continue	
32-31	4690-4692	be	
32-32	4693-4695	an	
32-33	4696-4700	area	
32-34	4701-4703	of	
32-35	4704-4713	confusion	
32-36	4714-4717	and	
32-37	4718-4731	hand-wringing	
32-38	4731-4732	,	
32-39	4733-4737	even	
32-40	4738-4744	though	
32-41	4745-4749	open	
32-42	4750-4756	source	
32-43	4757-4765	software	
32-44	4766-4769	use	
32-45	4770-4779	continues	
32-46	4780-4782	to	
32-47	4783-4787	grow	
32-48	4787-4788	.	

#Text=View or Post Comments
#Text=Three Postgres Adoption Groups in Enterprises
#Text=Wednesday, September 30, 2020
#Text=Having watched Postgres grow in popularity over the years, I have seen my share of organizations with competing teams, some promoting Postgres, other dismissing it.
33-1	4789-4793	View	
33-2	4794-4796	or	
33-3	4797-4801	Post	
33-4	4802-4810	Comments	
33-5	4811-4816	Three	
33-6	4817-4825	Postgres	
33-7	4826-4834	Adoption	
33-8	4835-4841	Groups	
33-9	4842-4844	in	
33-10	4845-4856	Enterprises	
33-11	4857-4866	Wednesday	
33-12	4866-4867	,	
33-13	4868-4877	September	
33-14	4878-4880	30	
33-15	4880-4881	,	
33-16	4882-4886	2020	
33-17	4887-4893	Having	
33-18	4894-4901	watched	
33-19	4902-4910	Postgres	
33-20	4911-4915	grow	
33-21	4916-4918	in	
33-22	4919-4929	popularity	
33-23	4930-4934	over	
33-24	4935-4938	the	
33-25	4939-4944	years	
33-26	4944-4945	,	
33-27	4946-4947	I	
33-28	4948-4952	have	
33-29	4953-4957	seen	
33-30	4958-4960	my	
33-31	4961-4966	share	
33-32	4967-4969	of	
33-33	4970-4983	organizations	
33-34	4984-4988	with	
33-35	4989-4998	competing	
33-36	4999-5004	teams	
33-37	5004-5005	,	
33-38	5006-5010	some	
33-39	5011-5020	promoting	
33-40	5021-5029	Postgres	
33-41	5029-5030	,	
33-42	5031-5036	other	
33-43	5037-5047	dismissing	
33-44	5048-5050	it	
33-45	5050-5051	.	

#Text=I came up with this
#Text=diagram (slide 23) which shows the three groups typically involved in deciding Postgres adoption.
34-1	5052-5053	I	
34-2	5054-5058	came	
34-3	5059-5061	up	
34-4	5062-5066	with	
34-5	5067-5071	this	
34-6	5072-5079	diagram	
34-7	5080-5081	(	
34-8	5081-5086	slide	
34-9	5087-5089	23	
34-10	5089-5090	)	
34-11	5091-5096	which	
34-12	5097-5102	shows	
34-13	5103-5106	the	
34-14	5107-5112	three	
34-15	5113-5119	groups	
34-16	5120-5129	typically	
34-17	5130-5138	involved	
34-18	5139-5141	in	
34-19	5142-5150	deciding	
34-20	5151-5159	Postgres	
34-21	5160-5168	adoption	
34-22	5168-5169	.	

#Text=The groups are Managers, Administrators,
#Text=and Developers.
35-1	5170-5173	The	
35-2	5174-5180	groups	
35-3	5181-5184	are	
35-4	5185-5193	Managers	
35-5	5193-5194	,	
35-6	5195-5209	Administrators	
35-7	5209-5210	,	
35-8	5211-5214	and	
35-9	5215-5225	Developers	
35-10	5225-5226	.	

#Text=In this diagram, each group has things that motivate them listed below the group name.
36-1	5227-5229	In	
36-2	5230-5234	this	
36-3	5235-5242	diagram	
36-4	5242-5243	,	
36-5	5244-5248	each	
36-6	5249-5254	group	
36-7	5255-5258	has	
36-8	5259-5265	things	
36-9	5266-5270	that	
36-10	5271-5279	motivate	
36-11	5280-5284	them	
36-12	5285-5291	listed	
36-13	5292-5297	below	
36-14	5298-5301	the	
36-15	5302-5307	group	
36-16	5308-5312	name	
36-17	5312-5313	.	

#Text=Postgres adoption goes most smoothly when all three groups see value in Postgres.
37-1	5314-5322	Postgres	
37-2	5323-5331	adoption	
37-3	5332-5336	goes	
37-4	5337-5341	most	
37-5	5342-5350	smoothly	
37-6	5351-5355	when	
37-7	5356-5359	all	
37-8	5360-5365	three	
37-9	5366-5372	groups	
37-10	5373-5376	see	
37-11	5377-5382	value	
37-12	5383-5385	in	
37-13	5386-5394	Postgres	
37-14	5394-5395	.	

#Text=When talking to different groups in a company, you should consider what things motivate the group you are speaking to.
38-1	5396-5400	When	
38-2	5401-5408	talking	
38-3	5409-5411	to	
38-4	5412-5421	different	
38-5	5422-5428	groups	
38-6	5429-5431	in	
38-7	5432-5433	a	
38-8	5434-5441	company	
38-9	5441-5442	,	
38-10	5443-5446	you	
38-11	5447-5453	should	
38-12	5454-5462	consider	
38-13	5463-5467	what	
38-14	5468-5474	things	
38-15	5475-5483	motivate	
38-16	5484-5487	the	
38-17	5488-5493	group	
38-18	5494-5497	you	
38-19	5498-5501	are	
38-20	5502-5510	speaking	
38-21	5511-5513	to	
38-22	5513-5514	.	

#Text=You will also find the diagram helpful in identifying which groups are not excited about Postgres, and how to motivate them.
39-1	5515-5518	You	
39-2	5519-5523	will	
39-3	5524-5528	also	
39-4	5529-5533	find	
39-5	5534-5537	the	
39-6	5538-5545	diagram	
39-7	5546-5553	helpful	
39-8	5554-5556	in	
39-9	5557-5568	identifying	
39-10	5569-5574	which	
39-11	5575-5581	groups	
39-12	5582-5585	are	
39-13	5586-5589	not	
39-14	5590-5597	excited	
39-15	5598-5603	about	
39-16	5604-5612	Postgres	
39-17	5612-5613	,	
39-18	5614-5617	and	
39-19	5618-5621	how	
39-20	5622-5624	to	
39-21	5625-5633	motivate	
39-22	5634-5638	them	
39-23	5638-5639	.	

#Text=View or Post Comments
#Text=Cloud Vendor Monetization of Open Source
#Text=Monday, September 28, 2020
#Text=Since open source became a powerful force in the software world, it has gone through several phases.
40-1	5640-5644	View	
40-2	5645-5647	or	
40-3	5648-5652	Post	
40-4	5653-5661	Comments	
40-5	5662-5667	Cloud	
40-6	5668-5674	Vendor	
40-7	5675-5687	Monetization	
40-8	5688-5690	of	
40-9	5691-5695	Open	
40-10	5696-5702	Source	
40-11	5703-5709	Monday	
40-12	5709-5710	,	
40-13	5711-5720	September	
40-14	5721-5723	28	
40-15	5723-5724	,	
40-16	5725-5729	2020	
40-17	5730-5735	Since	
40-18	5736-5740	open	
40-19	5741-5747	source	
40-20	5748-5754	became	
40-21	5755-5756	a	
40-22	5757-5765	powerful	
40-23	5766-5771	force	
40-24	5772-5774	in	
40-25	5775-5778	the	
40-26	5779-5787	software	
40-27	5788-5793	world	
40-28	5793-5794	,	
40-29	5795-5797	it	
40-30	5798-5801	has	
40-31	5802-5806	gone	
40-32	5807-5814	through	
40-33	5815-5822	several	
40-34	5823-5829	phases	
40-35	5829-5830	.	

#Text=The first phase was built around universities and volunteers, with little business involvement.
#Text=open source grew, companies like Red Hat were created to simplify deployment of open source software in enterprises.
41-1	5831-5834	The	
41-2	5835-5840	first	
41-3	5841-5846	phase	
41-4	5847-5850	was	
41-5	5851-5856	built	
41-6	5857-5863	around	
41-7	5864-5876	universities	
41-8	5877-5880	and	
41-9	5881-5891	volunteers	
41-10	5891-5892	,	
41-11	5893-5897	with	
41-12	5898-5904	little	
41-13	5905-5913	business	
41-14	5914-5925	involvement	
41-15	5925-5926	.	
41-16	5927-5931	open	
41-17	5932-5938	source	
41-18	5939-5943	grew	
41-19	5943-5944	,	
41-20	5945-5954	companies	
41-21	5955-5959	like	
41-22	5960-5963	Red	
41-23	5964-5967	Hat	
41-24	5968-5972	were	
41-25	5973-5980	created	
41-26	5981-5983	to	
41-27	5984-5992	simplify	
41-28	5993-6003	deployment	
41-29	6004-6006	of	
41-30	6007-6011	open	
41-31	6012-6018	source	
41-32	6019-6027	software	
41-33	6028-6030	in	
41-34	6031-6042	enterprises	
41-35	6042-6043	.	

#Text=With the popularity of open source, companies that distributed their software as open
#Text=source, but were company-controlled, started to proliferate, like MySQL.
42-1	6044-6048	With	
42-2	6049-6052	the	
42-3	6053-6063	popularity	
42-4	6064-6066	of	
42-5	6067-6071	open	
42-6	6072-6078	source	
42-7	6078-6079	,	
42-8	6080-6089	companies	
42-9	6090-6094	that	
42-10	6095-6106	distributed	
42-11	6107-6112	their	
42-12	6113-6121	software	
42-13	6122-6124	as	
42-14	6125-6129	open	
42-15	6130-6136	source	
42-16	6136-6137	,	
42-17	6138-6141	but	
42-18	6142-6146	were	
42-19	6147-6165	company-controlled	
42-20	6165-6166	,	
42-21	6167-6174	started	
42-22	6175-6177	to	
42-23	6178-6189	proliferate	
42-24	6189-6190	,	
42-25	6191-6195	like	
42-26	6196-6201	MySQL	
42-27	6201-6202	.	

#Text=The distinction between openly-developed open source software
#Text=and company-developed open source software is still not widely understood.
43-1	6203-6206	The	
43-2	6207-6218	distinction	
43-3	6219-6226	between	
43-4	6227-6243	openly-developed	
43-5	6244-6248	open	
43-6	6249-6255	source	
43-7	6256-6264	software	
43-8	6265-6268	and	
43-9	6269-6286	company-developed	
43-10	6287-6291	open	
43-11	6292-6298	source	
43-12	6299-6307	software	
43-13	6308-6310	is	
43-14	6311-6316	still	
43-15	6317-6320	not	
43-16	6321-6327	widely	
43-17	6328-6338	understood	
43-18	6338-6339	.	

#Text=One big distinction is that, for company-developed open source software, a company controls the development process, and bears
#Text=the full cost of development, which leads to greater customer lock-in and potential future costs as the company maximizes its profits.
44-1	6340-6343	One	
44-2	6344-6347	big	
44-3	6348-6359	distinction	
44-4	6360-6362	is	
44-5	6363-6367	that	
44-6	6367-6368	,	
44-7	6369-6372	for	
44-8	6373-6390	company-developed	
44-9	6391-6395	open	
44-10	6396-6402	source	
44-11	6403-6411	software	
44-12	6411-6412	,	
44-13	6413-6414	a	
44-14	6415-6422	company	
44-15	6423-6431	controls	
44-16	6432-6435	the	
44-17	6436-6447	development	
44-18	6448-6455	process	
44-19	6455-6456	,	
44-20	6457-6460	and	
44-21	6461-6466	bears	
44-22	6467-6470	the	
44-23	6471-6475	full	
44-24	6476-6480	cost	
44-25	6481-6483	of	
44-26	6484-6495	development	
44-27	6495-6496	,	
44-28	6497-6502	which	
44-29	6503-6508	leads	
44-30	6509-6511	to	
44-31	6512-6519	greater	
44-32	6520-6528	customer	
44-33	6529-6536	lock-in	
44-34	6537-6540	and	
44-35	6541-6550	potential	
44-36	6551-6557	future	
44-37	6558-6563	costs	
44-38	6564-6566	as	
44-39	6567-6570	the	
44-40	6571-6578	company	
44-41	6579-6588	maximizes	
44-42	6589-6592	its	
44-43	6593-6600	profits	
44-44	6600-6601	.	

#Text=Cloud vendors have upended many of the plans of companies built around open source.
45-1	6602-6607	Cloud	
45-2	6608-6615	vendors	
45-3	6616-6620	have	
45-4	6621-6628	upended	
45-5	6629-6633	many	
45-6	6634-6636	of	
45-7	6637-6640	the	
45-8	6641-6646	plans	
45-9	6647-6649	of	
45-10	6650-6659	companies	
45-11	6660-6665	built	
45-12	6666-6672	around	
45-13	6673-6677	open	
45-14	6678-6684	source	
45-15	6684-6685	.	

#Text=While open source is often valued by vendors and customers for its rapid proliferation and deployment, there was always
#Text=a hope that expertise in the open source software would yield sufficient revenue opportunities.
46-1	6686-6691	While	
46-2	6692-6696	open	
46-3	6697-6703	source	
46-4	6704-6706	is	
46-5	6707-6712	often	
46-6	6713-6719	valued	
46-7	6720-6722	by	
46-8	6723-6730	vendors	
46-9	6731-6734	and	
46-10	6735-6744	customers	
46-11	6745-6748	for	
46-12	6749-6752	its	
46-13	6753-6758	rapid	
46-14	6759-6772	proliferation	
46-15	6773-6776	and	
46-16	6777-6787	deployment	
46-17	6787-6788	,	
46-18	6789-6794	there	
46-19	6795-6798	was	
46-20	6799-6805	always	
46-21	6806-6807	a	
46-22	6808-6812	hope	
46-23	6813-6817	that	
46-24	6818-6827	expertise	
46-25	6828-6830	in	
46-26	6831-6834	the	
46-27	6835-6839	open	
46-28	6840-6846	source	
46-29	6847-6855	software	
46-30	6856-6861	would	
46-31	6862-6867	yield	
46-32	6868-6878	sufficient	
46-33	6879-6886	revenue	
46-34	6887-6900	opportunities	
46-35	6900-6901	.	

#Text=What has upended their plans are cloud vendors, who already have a customer relationship by providing cloud
#Text=infrastructure.
47-1	6902-6906	What	
47-2	6907-6910	has	
47-3	6911-6918	upended	
47-4	6919-6924	their	
47-5	6925-6930	plans	
47-6	6931-6934	are	
47-7	6935-6940	cloud	
47-8	6941-6948	vendors	
47-9	6948-6949	,	
47-10	6950-6953	who	
47-11	6954-6961	already	
47-12	6962-6966	have	
47-13	6967-6968	a	
47-14	6969-6977	customer	
47-15	6978-6990	relationship	
47-16	6991-6993	by	
47-17	6994-7003	providing	
47-18	7004-7009	cloud	
47-19	7010-7024	infrastructure	
47-20	7024-7025	.	

#Text=They use open source software as an up-sell to cloud customers, bypassing vendors that specialize in open source.
48-1	7026-7030	They	
48-2	7031-7034	use	
48-3	7035-7039	open	
48-4	7040-7046	source	
48-5	7047-7055	software	
48-6	7056-7058	as	
48-7	7059-7061	an	
48-8	7062-7069	up-sell	
48-9	7070-7072	to	
48-10	7073-7078	cloud	
48-11	7079-7088	customers	
48-12	7088-7089	,	
48-13	7090-7099	bypassing	
48-14	7100-7107	vendors	
48-15	7108-7112	that	
48-16	7113-7123	specialize	
48-17	7124-7126	in	
48-18	7127-7131	open	
48-19	7132-7138	source	
48-20	7138-7139	.	

#Text=This excellent
#Text=article exposes much of this shift, particularly with this statement:
#Text=From an economic perspective (which is what all the industry think pieces and analogies are about), the clouds seem to make a better business from open source than the companies built around particular
#Text=projects.
49-1	7140-7144	This	
49-2	7145-7154	excellent	
49-3	7155-7162	article	
49-4	7163-7170	exposes	
49-5	7171-7175	much	
49-6	7176-7178	of	
49-7	7179-7183	this	
49-8	7184-7189	shift	
49-9	7189-7190	,	
49-10	7191-7203	particularly	
49-11	7204-7208	with	
49-12	7209-7213	this	
49-13	7214-7223	statement	
49-14	7223-7224	:	
49-15	7225-7229	From	
49-16	7230-7232	an	
49-17	7233-7241	economic	
49-18	7242-7253	perspective	
49-19	7254-7255	(	
49-20	7255-7260	which	
49-21	7261-7263	is	
49-22	7264-7268	what	
49-23	7269-7272	all	
49-24	7273-7276	the	
49-25	7277-7285	industry	
49-26	7286-7291	think	
49-27	7292-7298	pieces	
49-28	7299-7302	and	
49-29	7303-7312	analogies	
49-30	7313-7316	are	
49-31	7317-7322	about	
49-32	7322-7323	)	
49-33	7323-7324	,	
49-34	7325-7328	the	
49-35	7329-7335	clouds	
49-36	7336-7340	seem	
49-37	7341-7343	to	
49-38	7344-7348	make	
49-39	7349-7350	a	
49-40	7351-7357	better	
49-41	7358-7366	business	
49-42	7367-7371	from	
49-43	7372-7376	open	
49-44	7377-7383	source	
49-45	7384-7388	than	
49-46	7389-7392	the	
49-47	7393-7402	companies	
49-48	7403-7408	built	
49-49	7409-7415	around	
49-50	7416-7426	particular	
49-51	7427-7435	projects	
49-52	7435-7436	.	

#Text=If you squint, open source could be seen as a very generous charitable donation to some of the largest and wealthiest corporations on the planet.
50-1	7437-7439	If	
50-2	7440-7443	you	
50-3	7444-7450	squint	
50-4	7450-7451	,	
50-5	7452-7456	open	
50-6	7457-7463	source	
50-7	7464-7469	could	
50-8	7470-7472	be	
50-9	7473-7477	seen	
50-10	7478-7480	as	
50-11	7481-7482	a	
50-12	7483-7487	very	
50-13	7488-7496	generous	
50-14	7497-7507	charitable	
50-15	7508-7516	donation	
50-16	7517-7519	to	
50-17	7520-7524	some	
50-18	7525-7527	of	
50-19	7528-7531	the	
50-20	7532-7539	largest	
50-21	7540-7543	and	
50-22	7544-7554	wealthiest	
50-23	7555-7567	corporations	
50-24	7568-7570	on	
50-25	7571-7574	the	
50-26	7575-7581	planet	
50-27	7581-7582	.	

#Text=Instead of open source vendors providing software to be used by potential customers, it is also being used by actual competitors, often much larger and more visible competitors.
51-1	7583-7590	Instead	
51-2	7591-7593	of	
51-3	7594-7598	open	
51-4	7599-7605	source	
51-5	7606-7613	vendors	
51-6	7614-7623	providing	
51-7	7624-7632	software	
51-8	7633-7635	to	
51-9	7636-7638	be	
51-10	7639-7643	used	
51-11	7644-7646	by	
51-12	7647-7656	potential	
51-13	7657-7666	customers	
51-14	7666-7667	,	
51-15	7668-7670	it	
51-16	7671-7673	is	
51-17	7674-7678	also	
51-18	7679-7684	being	
51-19	7685-7689	used	
51-20	7690-7692	by	
51-21	7693-7699	actual	
51-22	7700-7711	competitors	
51-23	7711-7712	,	
51-24	7713-7718	often	
51-25	7719-7723	much	
51-26	7724-7730	larger	
51-27	7731-7734	and	
51-28	7735-7739	more	
51-29	7740-7747	visible	
51-30	7748-7759	competitors	
51-31	7759-7760	.	

#Text=Such is the problem of
#Text=open source, that you can't easily control how it is used, though some company-developed open source companies, that do control the software license, are
#Text=taking steps to avoid this situation, with predictable reactions from the cloud vendors.
52-1	7761-7765	Such	
52-2	7766-7768	is	
52-3	7769-7772	the	
52-4	7773-7780	problem	
52-5	7781-7783	of	
52-6	7784-7788	open	
52-7	7789-7795	source	
52-8	7795-7796	,	
52-9	7797-7801	that	
52-10	7802-7805	you	
52-11	7806-7811	can't	
52-12	7812-7818	easily	
52-13	7819-7826	control	
52-14	7827-7830	how	
52-15	7831-7833	it	
52-16	7834-7836	is	
52-17	7837-7841	used	
52-18	7841-7842	,	
52-19	7843-7849	though	
52-20	7850-7854	some	
52-21	7855-7872	company-developed	
52-22	7873-7877	open	
52-23	7878-7884	source	
52-24	7885-7894	companies	
52-25	7894-7895	,	
52-26	7896-7900	that	
52-27	7901-7903	do	
52-28	7904-7911	control	
52-29	7912-7915	the	
52-30	7916-7924	software	
52-31	7925-7932	license	
52-32	7932-7933	,	
52-33	7934-7937	are	
52-34	7938-7944	taking	
52-35	7945-7950	steps	
52-36	7951-7953	to	
52-37	7954-7959	avoid	
52-38	7960-7964	this	
52-39	7965-7974	situation	
52-40	7974-7975	,	
52-41	7976-7980	with	
52-42	7981-7992	predictable	
52-43	7993-8002	reactions	
52-44	8003-8007	from	
52-45	8008-8011	the	
52-46	8012-8017	cloud	
52-47	8018-8025	vendors	
52-48	8025-8026	.	

#Text=The biggest "wow" moment for me in reading this article was the analysis of Red Hat.
53-1	8027-8030	The	
53-2	8031-8038	biggest	
53-3	8039-8040	"	
53-4	8040-8043	wow	
53-5	8043-8044	"	
53-6	8045-8051	moment	
53-7	8052-8055	for	
53-8	8056-8058	me	
53-9	8059-8061	in	
53-10	8062-8069	reading	
53-11	8070-8074	this	
53-12	8075-8082	article	
53-13	8083-8086	was	
53-14	8087-8090	the	
53-15	8091-8099	analysis	
53-16	8100-8102	of	
53-17	8103-8106	Red	
53-18	8107-8110	Hat	
53-19	8110-8111	.	

#Text=Company-developed open source companies were always at risk, since they bore the full cost of software development and
#Text=had a clear monetization strategy — grow and then maximize monetization, but Red Hat was different.
54-1	8112-8129	Company-developed	
54-2	8130-8134	open	
54-3	8135-8141	source	
54-4	8142-8151	companies	
54-5	8152-8156	were	
54-6	8157-8163	always	
54-7	8164-8166	at	
54-8	8167-8171	risk	
54-9	8171-8172	,	
54-10	8173-8178	since	
54-11	8179-8183	they	
54-12	8184-8188	bore	
54-13	8189-8192	the	
54-14	8193-8197	full	
54-15	8198-8202	cost	
54-16	8203-8205	of	
54-17	8206-8214	software	
54-18	8215-8226	development	
54-19	8227-8230	and	
54-20	8231-8234	had	
54-21	8235-8236	a	
54-22	8237-8242	clear	
54-23	8243-8255	monetization	
54-24	8256-8264	strategy	
54-25	8265-8266	—	
54-26	8267-8271	grow	
54-27	8272-8275	and	
54-28	8276-8280	then	
54-29	8281-8289	maximize	
54-30	8290-8302	monetization	
54-31	8302-8303	,	
54-32	8304-8307	but	
54-33	8308-8311	Red	
54-34	8312-8315	Hat	
54-35	8316-8319	was	
54-36	8320-8329	different	
54-37	8329-8330	.	

#Text=It was the poster-child of pure open source (collect from others and bundle) that should have been
#Text=more immune to the cloud, but the graphs in the blog clearly show that the purchase of Red Hat by ibm was due to cloud competition on Red Hat.
55-1	8331-8333	It	
55-2	8334-8337	was	
55-3	8338-8341	the	
55-4	8342-8354	poster-child	
55-5	8355-8357	of	
55-6	8358-8362	pure	
55-7	8363-8367	open	
55-8	8368-8374	source	
55-9	8375-8376	(	
55-10	8376-8383	collect	
55-11	8384-8388	from	
55-12	8389-8395	others	
55-13	8396-8399	and	
55-14	8400-8406	bundle	
55-15	8406-8407	)	
55-16	8408-8412	that	
55-17	8413-8419	should	
55-18	8420-8424	have	
55-19	8425-8429	been	
55-20	8430-8434	more	
55-21	8435-8441	immune	
55-22	8442-8444	to	
55-23	8445-8448	the	
55-24	8449-8454	cloud	
55-25	8454-8455	,	
55-26	8456-8459	but	
55-27	8460-8463	the	
55-28	8464-8470	graphs	
55-29	8471-8473	in	
55-30	8474-8477	the	
55-31	8478-8482	blog	
55-32	8483-8490	clearly	
55-33	8491-8495	show	
55-34	8496-8500	that	
55-35	8501-8504	the	
55-36	8505-8513	purchase	
55-37	8514-8516	of	
55-38	8517-8520	Red	
55-39	8521-8524	Hat	
55-40	8525-8527	by	
55-41	8528-8531	ibm	
55-42	8532-8535	was	
55-43	8536-8539	due	
55-44	8540-8542	to	
55-45	8543-8548	cloud	
55-46	8549-8560	competition	
55-47	8561-8563	on	
55-48	8564-8567	Red	
55-49	8568-8571	Hat	
55-50	8571-8572	.	

#Text=This
#Text=blog entry from the same person goes into even more gory details.
56-1	8573-8577	This	
56-2	8578-8582	blog	
56-3	8583-8588	entry	
56-4	8589-8593	from	
56-5	8594-8597	the	
56-6	8598-8602	same	
56-7	8603-8609	person	
56-8	8610-8614	goes	
56-9	8615-8619	into	
56-10	8620-8624	even	
56-11	8625-8629	more	
56-12	8630-8634	gory	
56-13	8635-8642	details	
56-14	8642-8643	.	

#Text=It is not really clear where open source monetization is headed.
57-1	8644-8646	It	
57-2	8647-8649	is	
57-3	8650-8653	not	
57-4	8654-8660	really	
57-5	8661-8666	clear	
57-6	8667-8672	where	
57-7	8673-8677	open	
57-8	8678-8684	source	
57-9	8685-8697	monetization	
57-10	8698-8700	is	
57-11	8701-8707	headed	
57-12	8707-8708	.	

#Text=If cloud vendors were smart, they would keep open source-dedicated companies alive with enough revenue to continue funding open source
#Text=development and innovation.
58-1	8709-8711	If	
58-2	8712-8717	cloud	
58-3	8718-8725	vendors	
58-4	8726-8730	were	
58-5	8731-8736	smart	
58-6	8736-8737	,	
58-7	8738-8742	they	
58-8	8743-8748	would	
58-9	8749-8753	keep	
58-10	8754-8758	open	
58-11	8759-8775	source-dedicated	
58-12	8776-8785	companies	
58-13	8786-8791	alive	
58-14	8792-8796	with	
58-15	8797-8803	enough	
58-16	8804-8811	revenue	
58-17	8812-8814	to	
58-18	8815-8823	continue	
58-19	8824-8831	funding	
58-20	8832-8836	open	
58-21	8837-8843	source	
58-22	8844-8855	development	
58-23	8856-8859	and	
58-24	8860-8870	innovation	
58-25	8870-8871	.	

#Text=While open source companies have often yielded high valuations, they have rarely yielded high profits, except perhaps, years ago, for Red Hat.
59-1	8872-8877	While	
59-2	8878-8882	open	
59-3	8883-8889	source	
59-4	8890-8899	companies	
59-5	8900-8904	have	
59-6	8905-8910	often	
59-7	8911-8918	yielded	
59-8	8919-8923	high	
59-9	8924-8934	valuations	
59-10	8934-8935	,	
59-11	8936-8940	they	
59-12	8941-8945	have	
59-13	8946-8952	rarely	
59-14	8953-8960	yielded	
59-15	8961-8965	high	
59-16	8966-8973	profits	
59-17	8973-8974	,	
59-18	8975-8981	except	
59-19	8982-8989	perhaps	
59-20	8989-8990	,	
59-21	8991-8996	years	
59-22	8997-9000	ago	
59-23	9000-9001	,	
59-24	9002-9005	for	
59-25	9006-9009	Red	
59-26	9010-9013	Hat	
59-27	9013-9014	.	

#Text=The high-profits world now seems
#Text=even more distant for open source companies, as cloud vendors, with existing customer relationships, massive standardized infrastructure and services, and economies of scale, siphon even more profit
#Text=from these businesses.
60-1	9015-9018	The	
60-2	9019-9031	high-profits	
60-3	9032-9037	world	
60-4	9038-9041	now	
60-5	9042-9047	seems	
60-6	9048-9052	even	
60-7	9053-9057	more	
60-8	9058-9065	distant	
60-9	9066-9069	for	
60-10	9070-9074	open	
60-11	9075-9081	source	
60-12	9082-9091	companies	
60-13	9091-9092	,	
60-14	9093-9095	as	
60-15	9096-9101	cloud	
60-16	9102-9109	vendors	
60-17	9109-9110	,	
60-18	9111-9115	with	
60-19	9116-9124	existing	
60-20	9125-9133	customer	
60-21	9134-9147	relationships	
60-22	9147-9148	,	
60-23	9149-9156	massive	
60-24	9157-9169	standardized	
60-25	9170-9184	infrastructure	
60-26	9185-9188	and	
60-27	9189-9197	services	
60-28	9197-9198	,	
60-29	9199-9202	and	
60-30	9203-9212	economies	
60-31	9213-9215	of	
60-32	9216-9221	scale	
60-33	9221-9222	,	
60-34	9223-9229	siphon	
60-35	9230-9234	even	
60-36	9235-9239	more	
60-37	9240-9246	profit	
60-38	9247-9251	from	
60-39	9252-9257	these	
60-40	9258-9268	businesses	
60-41	9268-9269	.	

#Text=View or Post Comments
#Text=Cloud Vendors as a Barrier
#Text=Friday, September 25, 2020
#Text=Cloud vendors are barriers like department stores and supermarkets are barriers.
61-1	9270-9274	View	
61-2	9275-9277	or	
61-3	9278-9282	Post	
61-4	9283-9291	Comments	
61-5	9292-9297	Cloud	
61-6	9298-9305	Vendors	
61-7	9306-9308	as	
61-8	9309-9310	a	
61-9	9311-9318	Barrier	
61-10	9319-9325	Friday	
61-11	9325-9326	,	
61-12	9327-9336	September	
61-13	9337-9339	25	
61-14	9339-9340	,	
61-15	9341-9345	2020	
61-16	9346-9351	Cloud	
61-17	9352-9359	vendors	
61-18	9360-9363	are	
61-19	9364-9372	barriers	
61-20	9373-9377	like	
61-21	9378-9388	department	
61-22	9389-9395	stores	
61-23	9396-9399	and	
61-24	9400-9412	supermarkets	
61-25	9413-9416	are	
61-26	9417-9425	barriers	
61-27	9425-9426	.	

#Text=Huh?
62-1	9427-9430	Huh	
62-2	9430-9431	?	

#Text=People associate these entities with providing a huge variety of goods and services, all in one place.
63-1	9432-9438	People	
63-2	9439-9448	associate	
63-3	9449-9454	these	
63-4	9455-9463	entities	
63-5	9464-9468	with	
63-6	9469-9478	providing	
63-7	9479-9480	a	
63-8	9481-9485	huge	
63-9	9486-9493	variety	
63-10	9494-9496	of	
63-11	9497-9502	goods	
63-12	9503-9506	and	
63-13	9507-9515	services	
63-14	9515-9516	,	
63-15	9517-9520	all	
63-16	9521-9523	in	
63-17	9524-9527	one	
63-18	9528-9533	place	
63-19	9533-9534	.	

#Text=How can that be
#Text=a barrier?
64-1	9535-9538	How	
64-2	9539-9542	can	
64-3	9543-9547	that	
64-4	9548-9550	be	
64-5	9551-9552	a	
64-6	9553-9560	barrier	
64-7	9560-9561	?	

#Text=Well, you are looking at it from the consumer perspective.
65-1	9562-9566	Well	
65-2	9566-9567	,	
65-3	9568-9571	you	
65-4	9572-9575	are	
65-5	9576-9583	looking	
65-6	9584-9586	at	
65-7	9587-9589	it	
65-8	9590-9594	from	
65-9	9595-9598	the	
65-10	9599-9607	consumer	
65-11	9608-9619	perspective	
65-12	9619-9620	.	

#Text=For the producer, they are a mixed benefit.
66-1	9621-9624	For	
66-2	9625-9628	the	
66-3	9629-9637	producer	
66-4	9637-9638	,	
66-5	9639-9643	they	
66-6	9644-9647	are	
66-7	9648-9649	a	
66-8	9650-9655	mixed	
66-9	9656-9663	benefit	
66-10	9663-9664	.	

#Text=These "super sellers" allow access to much larger markets for most single-product producers, but
#Text=they can have negatives for producers:
#Text=They become the place consumers associate with your product
#Text=They have the relationship with the consumer
#Text=You can easily be replaced if a better product appears
#Text=They take a markup
#Text=As the producer of a physical product, it is up to you to decide if working with department stores and supermarkets is a positive or negative.
67-1	9665-9670	These	
67-2	9671-9672	"	
67-3	9672-9677	super	
67-4	9678-9685	sellers	
67-5	9685-9686	"	
67-6	9687-9692	allow	
67-7	9693-9699	access	
67-8	9700-9702	to	
67-9	9703-9707	much	
67-10	9708-9714	larger	
67-11	9715-9722	markets	
67-12	9723-9726	for	
67-13	9727-9731	most	
67-14	9732-9746	single-product	
67-15	9747-9756	producers	
67-16	9756-9757	,	
67-17	9758-9761	but	
67-18	9762-9766	they	
67-19	9767-9770	can	
67-20	9771-9775	have	
67-21	9776-9785	negatives	
67-22	9786-9789	for	
67-23	9790-9799	producers	
67-24	9799-9800	:	
67-25	9801-9805	They	
67-26	9806-9812	become	
67-27	9813-9816	the	
67-28	9817-9822	place	
67-29	9823-9832	consumers	
67-30	9833-9842	associate	
67-31	9843-9847	with	
67-32	9848-9852	your	
67-33	9853-9860	product	
67-34	9861-9865	They	
67-35	9866-9870	have	
67-36	9871-9874	the	
67-37	9875-9887	relationship	
67-38	9888-9892	with	
67-39	9893-9896	the	
67-40	9897-9905	consumer	
67-41	9906-9909	You	
67-42	9910-9913	can	
67-43	9914-9920	easily	
67-44	9921-9923	be	
67-45	9924-9932	replaced	
67-46	9933-9935	if	
67-47	9936-9937	a	
67-48	9938-9944	better	
67-49	9945-9952	product	
67-50	9953-9960	appears	
67-51	9961-9965	They	
67-52	9966-9970	take	
67-53	9971-9972	a	
67-54	9973-9979	markup	
67-55	9980-9982	As	
67-56	9983-9986	the	
67-57	9987-9995	producer	
67-58	9996-9998	of	
67-59	9999-10000	a	
67-60	10001-10009	physical	
67-61	10010-10017	product	
67-62	10017-10018	,	
67-63	10019-10021	it	
67-64	10022-10024	is	
67-65	10025-10027	up	
67-66	10028-10030	to	
67-67	10031-10034	you	
67-68	10035-10037	to	
67-69	10038-10044	decide	
67-70	10045-10047	if	
67-71	10048-10055	working	
67-72	10056-10060	with	
67-73	10061-10071	department	
67-74	10072-10078	stores	
67-75	10079-10082	and	
67-76	10083-10095	supermarkets	
67-77	10096-10098	is	
67-78	10099-10100	a	
67-79	10101-10109	positive	
67-80	10110-10112	or	
67-81	10113-10121	negative	
67-82	10121-10122	.	

#Text=However, with open source software, there is no calculus.
68-1	10123-10130	However	
68-2	10130-10131	,	
68-3	10132-10136	with	
68-4	10137-10141	open	
68-5	10142-10148	source	
68-6	10149-10157	software	
68-7	10157-10158	,	
68-8	10159-10164	there	
68-9	10165-10167	is	
68-10	10168-10170	no	
68-11	10171-10179	calculus	
68-12	10179-10180	.	

#Text=Unless your open source license prohibits modified or unmodified hosting of your software on cloud servers, you have no control over whether a cloud vendor is the way consumers interact with your
#Text=open source software.
69-1	10181-10187	Unless	
69-2	10188-10192	your	
69-3	10193-10197	open	
69-4	10198-10204	source	
69-5	10205-10212	license	
69-6	10213-10222	prohibits	
69-7	10223-10231	modified	
69-8	10232-10234	or	
69-9	10235-10245	unmodified	
69-10	10246-10253	hosting	
69-11	10254-10256	of	
69-12	10257-10261	your	
69-13	10262-10270	software	
69-14	10271-10273	on	
69-15	10274-10279	cloud	
69-16	10280-10287	servers	
69-17	10287-10288	,	
69-18	10289-10292	you	
69-19	10293-10297	have	
69-20	10298-10300	no	
69-21	10301-10308	control	
69-22	10309-10313	over	
69-23	10314-10321	whether	
69-24	10322-10323	a	
69-25	10324-10329	cloud	
69-26	10330-10336	vendor	
69-27	10337-10339	is	
69-28	10340-10343	the	
69-29	10344-10347	way	
69-30	10348-10357	consumers	
69-31	10358-10366	interact	
69-32	10367-10371	with	
69-33	10372-10376	your	
69-34	10377-10381	open	
69-35	10382-10388	source	
69-36	10389-10397	software	
69-37	10397-10398	.	

#Text=The cloud vendor is the one who downloads the software, configures it, perhaps supports it, and guarantees uptime.
70-1	10399-10402	The	
70-2	10403-10408	cloud	
70-3	10409-10415	vendor	
70-4	10416-10418	is	
70-5	10419-10422	the	
70-6	10423-10426	one	
70-7	10427-10430	who	
70-8	10431-10440	downloads	
70-9	10441-10444	the	
70-10	10445-10453	software	
70-11	10453-10454	,	
70-12	10455-10465	configures	
70-13	10466-10468	it	
70-14	10468-10469	,	
70-15	10470-10477	perhaps	
70-16	10478-10486	supports	
70-17	10487-10489	it	
70-18	10489-10490	,	
70-19	10491-10494	and	
70-20	10495-10505	guarantees	
70-21	10506-10512	uptime	
70-22	10512-10513	.	

#Text=The cloud vendor can leverage software revenue opportunities.
#Text=avoid cloud usage, some software producers have chosen or created licenses that restrict such usage:
#Text=Timescale
#Text=CockroachDB
#Text=Elasticsearch
#Text=MongoDB
#Text=Redis
#Text=Agpl license
#Text=In response to the license handling of Elasticsearch, aws forked (1,
#Text=2, 3) the Apache
#Text=2.0-licensed Elasticsearch source code and started writing code to replace the proprietary features.
71-1	10514-10517	The	
71-2	10518-10523	cloud	
71-3	10524-10530	vendor	
71-4	10531-10534	can	
71-5	10535-10543	leverage	
71-6	10544-10552	software	
71-7	10553-10560	revenue	
71-8	10561-10574	opportunities	
71-9	10574-10575	.	
71-10	10576-10581	avoid	
71-11	10582-10587	cloud	
71-12	10588-10593	usage	
71-13	10593-10594	,	
71-14	10595-10599	some	
71-15	10600-10608	software	
71-16	10609-10618	producers	
71-17	10619-10623	have	
71-18	10624-10630	chosen	
71-19	10631-10633	or	
71-20	10634-10641	created	
71-21	10642-10650	licenses	
71-22	10651-10655	that	
71-23	10656-10664	restrict	
71-24	10665-10669	such	
71-25	10670-10675	usage	
71-26	10675-10676	:	
71-27	10677-10686	Timescale	
71-28	10687-10698	CockroachDB	
71-29	10699-10712	Elasticsearch	
71-30	10713-10720	MongoDB	
71-31	10721-10726	Redis	
71-32	10727-10731	Agpl	
71-33	10732-10739	license	
71-34	10740-10742	In	
71-35	10743-10751	response	
71-36	10752-10754	to	
71-37	10755-10758	the	
71-38	10759-10766	license	
71-39	10767-10775	handling	
71-40	10776-10778	of	
71-41	10779-10792	Elasticsearch	
71-42	10792-10793	,	
71-43	10794-10797	aws	
71-44	10798-10804	forked	
71-45	10805-10806	(	
71-46	10806-10807	1	
71-47	10807-10808	,	
71-48	10809-10810	2	
71-49	10810-10811	,	
71-50	10812-10813	3	
71-51	10813-10814	)	
71-52	10815-10818	the	
71-53	10819-10825	Apache	
71-54	10826-10829	2.0	
71-55	10829-10830	-	
71-56	10830-10838	licensed	
71-57	10839-10852	Elasticsearch	
71-58	10853-10859	source	
71-59	10860-10864	code	
71-60	10865-10868	and	
71-61	10869-10876	started	
71-62	10877-10884	writing	
71-63	10885-10889	code	
71-64	10890-10892	to	
71-65	10893-10900	replace	
71-66	10901-10904	the	
71-67	10905-10916	proprietary	
71-68	10917-10925	features	
71-69	10925-10926	.	

#Text=Sometimes even license changes don't protect open source projects from cloud vendor barriers.
72-1	10927-10936	Sometimes	
72-2	10937-10941	even	
72-3	10942-10949	license	
72-4	10950-10957	changes	
72-5	10958-10963	don't	
72-6	10964-10971	protect	
72-7	10972-10976	open	
72-8	10977-10983	source	
72-9	10984-10992	projects	
72-10	10993-10997	from	
72-11	10998-11003	cloud	
72-12	11004-11010	vendor	
72-13	11011-11019	barriers	
72-14	11019-11020	.	

#Text=This is nothing new.
73-1	11021-11025	This	
73-2	11026-11028	is	
73-3	11029-11036	nothing	
73-4	11037-11040	new	
73-5	11040-11041	.	

#Text=Commercial companies like Red Hat have supported open source software since their inception, and have generated revenue from that relationship and bundling.
74-1	11042-11052	Commercial	
74-2	11053-11062	companies	
74-3	11063-11067	like	
74-4	11068-11071	Red	
74-5	11072-11075	Hat	
74-6	11076-11080	have	
74-7	11081-11090	supported	
74-8	11091-11095	open	
74-9	11096-11102	source	
74-10	11103-11111	software	
74-11	11112-11117	since	
74-12	11118-11123	their	
74-13	11124-11133	inception	
74-14	11133-11134	,	
74-15	11135-11138	and	
74-16	11139-11143	have	
74-17	11144-11153	generated	
74-18	11154-11161	revenue	
74-19	11162-11166	from	
74-20	11167-11171	that	
74-21	11172-11184	relationship	
74-22	11185-11188	and	
74-23	11189-11197	bundling	
74-24	11197-11198	.	

#Text=Cloud vendors are just
#Text=another set of companies that are making open source easier to use, and benefiting from it.
75-1	11199-11204	Cloud	
75-2	11205-11212	vendors	
75-3	11213-11216	are	
75-4	11217-11221	just	
75-5	11222-11229	another	
75-6	11230-11233	set	
75-7	11234-11236	of	
75-8	11237-11246	companies	
75-9	11247-11251	that	
75-10	11252-11255	are	
75-11	11256-11262	making	
75-12	11263-11267	open	
75-13	11268-11274	source	
75-14	11275-11281	easier	
75-15	11282-11284	to	
75-16	11285-11288	use	
75-17	11288-11289	,	
75-18	11290-11293	and	
75-19	11294-11304	benefiting	
75-20	11305-11309	from	
75-21	11310-11312	it	
75-22	11312-11313	.	

#Text=While software-bundle vendors like Red Hat can customize the software for their bundle, cloud vendors can also
#Text=optimize the software for their hardware and infrastructure.
76-1	11314-11319	While	
76-2	11320-11335	software-bundle	
76-3	11336-11343	vendors	
76-4	11344-11348	like	
76-5	11349-11352	Red	
76-6	11353-11356	Hat	
76-7	11357-11360	can	
76-8	11361-11370	customize	
76-9	11371-11374	the	
76-10	11375-11383	software	
76-11	11384-11387	for	
76-12	11388-11393	their	
76-13	11394-11400	bundle	
76-14	11400-11401	,	
76-15	11402-11407	cloud	
76-16	11408-11415	vendors	
76-17	11416-11419	can	
76-18	11420-11424	also	
76-19	11425-11433	optimize	
76-20	11434-11437	the	
76-21	11438-11446	software	
76-22	11447-11450	for	
76-23	11451-11456	their	
76-24	11457-11465	hardware	
76-25	11466-11469	and	
76-26	11470-11484	infrastructure	
76-27	11484-11485	.	

#Text=This is a clear value to customers that is hard for software producers to match.
77-1	11486-11490	This	
77-2	11491-11493	is	
77-3	11494-11495	a	
77-4	11496-11501	clear	
77-5	11502-11507	value	
77-6	11508-11510	to	
77-7	11511-11520	customers	
77-8	11521-11525	that	
77-9	11526-11528	is	
77-10	11529-11533	hard	
77-11	11534-11537	for	
77-12	11538-11546	software	
77-13	11547-11556	producers	
77-14	11557-11559	to	
77-15	11560-11565	match	
77-16	11565-11566	.	

#Text=This article discusses the history of open source business models,
#Text=This
#Text=article describes cloud vendor behavior as "strip mining".
78-1	11567-11571	This	
78-2	11572-11579	article	
78-3	11580-11589	discusses	
78-4	11590-11593	the	
78-5	11594-11601	history	
78-6	11602-11604	of	
78-7	11605-11609	open	
78-8	11610-11616	source	
78-9	11617-11625	business	
78-10	11626-11632	models	
78-11	11632-11633	,	
78-12	11634-11638	This	
78-13	11639-11646	article	
78-14	11647-11656	describes	
78-15	11657-11662	cloud	
78-16	11663-11669	vendor	
78-17	11670-11678	behavior	
78-18	11679-11681	as	
78-19	11682-11683	"	
78-20	11683-11688	strip	
78-21	11689-11695	mining	
78-22	11695-11696	"	
78-23	11696-11697	.	

#Text=There was even a recent
#Text=conference where open source vendors met to discuss how to deal with cloud vendor competition (sponsored by aws).
79-1	11698-11703	There	
79-2	11704-11707	was	
79-3	11708-11712	even	
79-4	11713-11714	a	
79-5	11715-11721	recent	
79-6	11722-11732	conference	
79-7	11733-11738	where	
79-8	11739-11743	open	
79-9	11744-11750	source	
79-10	11751-11758	vendors	
79-11	11759-11762	met	
79-12	11763-11765	to	
79-13	11766-11773	discuss	
79-14	11774-11777	how	
79-15	11778-11780	to	
79-16	11781-11785	deal	
79-17	11786-11790	with	
79-18	11791-11796	cloud	
79-19	11797-11803	vendor	
79-20	11804-11815	competition	
79-21	11816-11817	(	
79-22	11817-11826	sponsored	
79-23	11827-11829	by	
79-24	11830-11833	aws	
79-25	11833-11834	)	
79-26	11834-11835	.	

#Text=There is one big distinction in all the open source software products I have listed above — they are all company-controlled open
#Text=source, meaning the development is mostly controlled by a single company, which monetizes use of the software, while distributing it as open source.
80-1	11836-11841	There	
80-2	11842-11844	is	
80-3	11845-11848	one	
80-4	11849-11852	big	
80-5	11853-11864	distinction	
80-6	11865-11867	in	
80-7	11868-11871	all	
80-8	11872-11875	the	
80-9	11876-11880	open	
80-10	11881-11887	source	
80-11	11888-11896	software	
80-12	11897-11905	products	
80-13	11906-11907	I	
80-14	11908-11912	have	
80-15	11913-11919	listed	
80-16	11920-11925	above	
80-17	11926-11927	—	
80-18	11928-11932	they	
80-19	11933-11936	are	
80-20	11937-11940	all	
80-21	11941-11959	company-controlled	
80-22	11960-11964	open	
80-23	11965-11971	source	
80-24	11971-11972	,	
80-25	11973-11980	meaning	
80-26	11981-11984	the	
80-27	11985-11996	development	
80-28	11997-11999	is	
80-29	12000-12006	mostly	
80-30	12007-12017	controlled	
80-31	12018-12020	by	
80-32	12021-12022	a	
80-33	12023-12029	single	
80-34	12030-12037	company	
80-35	12037-12038	,	
80-36	12039-12044	which	
80-37	12045-12054	monetizes	
80-38	12055-12058	use	
80-39	12059-12061	of	
80-40	12062-12065	the	
80-41	12066-12074	software	
80-42	12074-12075	,	
80-43	12076-12081	while	
80-44	12082-12094	distributing	
80-45	12095-12097	it	
80-46	12098-12100	as	
80-47	12101-12105	open	
80-48	12106-12112	source	
80-49	12112-12113	.	

#Text=This is drastically different from
#Text=community-controlled open source projects like Postgres.
81-1	12114-12118	This	
81-2	12119-12121	is	
81-3	12122-12133	drastically	
81-4	12134-12143	different	
81-5	12144-12148	from	
81-6	12149-12169	community-controlled	
81-7	12170-12174	open	
81-8	12175-12181	source	
81-9	12182-12190	projects	
81-10	12191-12195	like	
81-11	12196-12204	Postgres	
81-12	12204-12205	.	

#Text=There are far fewer challenges to community-controlled open source projects from cloud vendors, mostly because there is no monetization goal.
82-1	12206-12211	There	
82-2	12212-12215	are	
82-3	12216-12219	far	
82-4	12220-12225	fewer	
82-5	12226-12236	challenges	
82-6	12237-12239	to	
82-7	12240-12260	community-controlled	
82-8	12261-12265	open	
82-9	12266-12272	source	
82-10	12273-12281	projects	
82-11	12282-12286	from	
82-12	12287-12292	cloud	
82-13	12293-12300	vendors	
82-14	12300-12301	,	
82-15	12302-12308	mostly	
82-16	12309-12316	because	
82-17	12317-12322	there	
82-18	12323-12325	is	
82-19	12326-12328	no	
82-20	12329-12341	monetization	
82-21	12342-12346	goal	
82-22	12346-12347	.	

#Text=There is some concern that cloud vendor relationships with users will diminish community contributions, but it is not clear if this true.
83-1	12348-12353	There	
83-2	12354-12356	is	
83-3	12357-12361	some	
83-4	12362-12369	concern	
83-5	12370-12374	that	
83-6	12375-12380	cloud	
83-7	12381-12387	vendor	
83-8	12388-12401	relationships	
83-9	12402-12406	with	
83-10	12407-12412	users	
83-11	12413-12417	will	
83-12	12418-12426	diminish	
83-13	12427-12436	community	
83-14	12437-12450	contributions	
83-15	12450-12451	,	
83-16	12452-12455	but	
83-17	12456-12458	it	
83-18	12459-12461	is	
83-19	12462-12465	not	
83-20	12466-12471	clear	
83-21	12472-12474	if	
83-22	12475-12479	this	
83-23	12480-12484	true	
83-24	12484-12485	.	

#Text=Cloud vendors clearly increase use of community-controlled
#Text=software, and to the extent the cloud vendors reference open source communities in their interaction with customers, it helps these
#Text=communities.
84-1	12486-12491	Cloud	
84-2	12492-12499	vendors	
84-3	12500-12507	clearly	
84-4	12508-12516	increase	
84-5	12517-12520	use	
84-6	12521-12523	of	
84-7	12524-12544	community-controlled	
84-8	12545-12553	software	
84-9	12553-12554	,	
84-10	12555-12558	and	
84-11	12559-12561	to	
84-12	12562-12565	the	
84-13	12566-12572	extent	
84-14	12573-12576	the	
84-15	12577-12582	cloud	
84-16	12583-12590	vendors	
84-17	12591-12600	reference	
84-18	12601-12605	open	
84-19	12606-12612	source	
84-20	12613-12624	communities	
84-21	12625-12627	in	
84-22	12628-12633	their	
84-23	12634-12645	interaction	
84-24	12646-12650	with	
84-25	12651-12660	customers	
84-26	12660-12661	,	
84-27	12662-12664	it	
84-28	12665-12670	helps	
84-29	12671-12676	these	
84-30	12677-12688	communities	
84-31	12688-12689	.	

#Text=Just as bakeries, flower shops, produce markets, meat, cheese, and seafood sellers struggle to survive when supermarkets provide convenient, if somewhat less
#Text=diverse, products, so company-controlled open source will suffer from cloud vendors.
85-1	12690-12694	Just	
85-2	12695-12697	as	
85-3	12698-12706	bakeries	
85-4	12706-12707	,	
85-5	12708-12714	flower	
85-6	12715-12720	shops	
85-7	12720-12721	,	
85-8	12722-12729	produce	
85-9	12730-12737	markets	
85-10	12737-12738	,	
85-11	12739-12743	meat	
85-12	12743-12744	,	
85-13	12745-12751	cheese	
85-14	12751-12752	,	
85-15	12753-12756	and	
85-16	12757-12764	seafood	
85-17	12765-12772	sellers	
85-18	12773-12781	struggle	
85-19	12782-12784	to	
85-20	12785-12792	survive	
85-21	12793-12797	when	
85-22	12798-12810	supermarkets	
85-23	12811-12818	provide	
85-24	12819-12829	convenient	
85-25	12829-12830	,	
85-26	12831-12833	if	
85-27	12834-12842	somewhat	
85-28	12843-12847	less	
85-29	12848-12855	diverse	
85-30	12855-12856	,	
85-31	12857-12865	products	
85-32	12865-12866	,	
85-33	12867-12869	so	
85-34	12870-12888	company-controlled	
85-35	12889-12893	open	
85-36	12894-12900	source	
85-37	12901-12905	will	
85-38	12906-12912	suffer	
85-39	12913-12917	from	
85-40	12918-12923	cloud	
85-41	12924-12931	vendors	
85-42	12931-12932	.	

#Text=For open source communities, the only real risk is that companies that support its open source developers will
#Text=struggle, and therefore reduce paid developers working on open source projects.
86-1	12933-12936	For	
86-2	12937-12941	open	
86-3	12942-12948	source	
86-4	12949-12960	communities	
86-5	12960-12961	,	
86-6	12962-12965	the	
86-7	12966-12970	only	
86-8	12971-12975	real	
86-9	12976-12980	risk	
86-10	12981-12983	is	
86-11	12984-12988	that	
86-12	12989-12998	companies	
86-13	12999-13003	that	
86-14	13004-13011	support	
86-15	13012-13015	its	
86-16	13016-13020	open	
86-17	13021-13027	source	
86-18	13028-13038	developers	
86-19	13039-13043	will	
86-20	13044-13052	struggle	
86-21	13052-13053	,	
86-22	13054-13057	and	
86-23	13058-13067	therefore	
86-24	13068-13074	reduce	
86-25	13075-13079	paid	
86-26	13080-13090	developers	
86-27	13091-13098	working	
86-28	13099-13101	on	
86-29	13102-13106	open	
86-30	13107-13113	source	
86-31	13114-13122	projects	
86-32	13122-13123	.	

#Text=That connection is hard to measure from an open source project perspective, so we will just have to wait and see how things
#Text=evolve.
87-1	13124-13128	That	
87-2	13129-13139	connection	
87-3	13140-13142	is	
87-4	13143-13147	hard	
87-5	13148-13150	to	
87-6	13151-13158	measure	
87-7	13159-13163	from	
87-8	13164-13166	an	
87-9	13167-13171	open	
87-10	13172-13178	source	
87-11	13179-13186	project	
87-12	13187-13198	perspective	
87-13	13198-13199	,	
87-14	13200-13202	so	
87-15	13203-13205	we	
87-16	13206-13210	will	
87-17	13211-13215	just	
87-18	13216-13220	have	
87-19	13221-13223	to	
87-20	13224-13228	wait	
87-21	13229-13232	and	
87-22	13233-13236	see	
87-23	13237-13240	how	
87-24	13241-13247	things	
87-25	13248-13254	evolve	
87-26	13254-13255	.	

#Text=View or Post Comments
#Text=Developers in Front
#Text=Wednesday, September 23, 2020
#Text=Most companies have marketing and sales people as the visible part of their company.
88-1	13256-13260	View	
88-2	13261-13263	or	
88-3	13264-13268	Post	
88-4	13269-13277	Comments	
88-5	13278-13288	Developers	
88-6	13289-13291	in	
88-7	13292-13297	Front	
88-8	13298-13307	Wednesday	
88-9	13307-13308	,	
88-10	13309-13318	September	
88-11	13319-13321	23	
88-12	13321-13322	,	
88-13	13323-13327	2020	
88-14	13328-13332	Most	
88-15	13333-13342	companies	
88-16	13343-13347	have	
88-17	13348-13357	marketing	
88-18	13358-13361	and	
88-19	13362-13367	sales	
88-20	13368-13374	people	
88-21	13375-13377	as	
88-22	13378-13381	the	
88-23	13382-13389	visible	
88-24	13390-13394	part	
88-25	13395-13397	of	
88-26	13398-13403	their	
88-27	13404-13411	company	
88-28	13411-13412	.	

#Text=Technical people, even in technology companies, are often kept in the back, and only brought out for brief periods when
#Text=needed.
89-1	13413-13422	Technical	
89-2	13423-13429	people	
89-3	13429-13430	,	
89-4	13431-13435	even	
89-5	13436-13438	in	
89-6	13439-13449	technology	
89-7	13450-13459	companies	
89-8	13459-13460	,	
89-9	13461-13464	are	
89-10	13465-13470	often	
89-11	13471-13475	kept	
89-12	13476-13478	in	
89-13	13479-13482	the	
89-14	13483-13487	back	
89-15	13487-13488	,	
89-16	13489-13492	and	
89-17	13493-13497	only	
89-18	13498-13505	brought	
89-19	13506-13509	out	
89-20	13510-13513	for	
89-21	13514-13519	brief	
89-22	13520-13527	periods	
89-23	13528-13532	when	
89-24	13533-13539	needed	
89-25	13539-13540	.	

#Text=Open source is different — there are no marketing or sales teams, so software developers are the faces of projects.
90-1	13541-13545	Open	
90-2	13546-13552	source	
90-3	13553-13555	is	
90-4	13556-13565	different	
90-5	13566-13567	—	
90-6	13568-13573	there	
90-7	13574-13577	are	
90-8	13578-13580	no	
90-9	13581-13590	marketing	
90-10	13591-13593	or	
90-11	13594-13599	sales	
90-12	13600-13605	teams	
90-13	13605-13606	,	
90-14	13607-13609	so	
90-15	13610-13618	software	
90-16	13619-13629	developers	
90-17	13630-13633	are	
90-18	13634-13637	the	
90-19	13638-13643	faces	
90-20	13644-13646	of	
90-21	13647-13655	projects	
90-22	13655-13656	.	

#Text=This gives technical people an opportunity to attain world-wide recognition
#Text=for their efforts.
91-1	13657-13661	This	
91-2	13662-13667	gives	
91-3	13668-13677	technical	
91-4	13678-13684	people	
91-5	13685-13687	an	
91-6	13688-13699	opportunity	
91-7	13700-13702	to	
91-8	13703-13709	attain	
91-9	13710-13720	world-wide	
91-10	13721-13732	recognition	
91-11	13733-13736	for	
91-12	13737-13742	their	
91-13	13743-13750	efforts	
91-14	13750-13751	.	

#Text=There are not many places technical people can truly shine, but open source is one such opportunity.
92-1	13752-13757	There	
92-2	13758-13761	are	
92-3	13762-13765	not	
92-4	13766-13770	many	
92-5	13771-13777	places	
92-6	13778-13787	technical	
92-7	13788-13794	people	
92-8	13795-13798	can	
92-9	13799-13804	truly	
92-10	13805-13810	shine	
92-11	13810-13811	,	
92-12	13812-13815	but	
92-13	13816-13820	open	
92-14	13821-13827	source	
92-15	13828-13830	is	
92-16	13831-13834	one	
92-17	13835-13839	such	
92-18	13840-13851	opportunity	
92-19	13851-13852	.	

#Text=View or Post Comments
#Text=The Berkeley 39
#Text=Monday, September 21, 2020
#Text=Postgres turns 34 this year.
93-1	13853-13857	View	
93-2	13858-13860	or	
93-3	13861-13865	Post	
93-4	13866-13874	Comments	
93-5	13875-13878	The	
93-6	13879-13887	Berkeley	
93-7	13888-13890	39	
93-8	13891-13897	Monday	
93-9	13897-13898	,	
93-10	13899-13908	September	
93-11	13909-13911	21	
93-12	13911-13912	,	
93-13	13913-13917	2020	
93-14	13918-13926	Postgres	
93-15	13927-13932	turns	
93-16	13933-13935	34	
93-17	13936-13940	this	
93-18	13941-13945	year	
93-19	13945-13946	.	

#Text=Michael Stonebraker, during his 2015 Turing Award speech (which I blogged about
#Text=previously), included the names of the 39 Berkeley students (plus co-leader Larry Rowe) who helped write the original version of Postgres.
94-1	13947-13954	Michael	
94-2	13955-13966	Stonebraker	
94-3	13966-13967	,	
94-4	13968-13974	during	
94-5	13975-13978	his	
94-6	13979-13983	2015	
94-7	13984-13990	Turing	
94-8	13991-13996	Award	
94-9	13997-14003	speech	
94-10	14004-14005	(	
94-11	14005-14010	which	
94-12	14011-14012	I	
94-13	14013-14020	blogged	
94-14	14021-14026	about	
94-15	14027-14037	previously	
94-16	14037-14038	)	
94-17	14038-14039	,	
94-18	14040-14048	included	
94-19	14049-14052	the	
94-20	14053-14058	names	
94-21	14059-14061	of	
94-22	14062-14065	the	
94-23	14066-14068	39	
94-24	14069-14077	Berkeley	
94-25	14078-14086	students	
94-26	14087-14088	(	
94-27	14088-14092	plus	
94-28	14093-14102	co-leader	
94-29	14103-14108	Larry	
94-30	14109-14113	Rowe	
94-31	14113-14114	)	
94-32	14115-14118	who	
94-33	14119-14125	helped	
94-34	14126-14131	write	
94-35	14132-14135	the	
94-36	14136-14144	original	
94-37	14145-14152	version	
94-38	14153-14155	of	
94-39	14156-14164	Postgres	
94-40	14164-14165	.	

#Text=I was hoping to add this list to the Postgres release notes, but we recently stopped including back branch release notes in current releases, so now there is no good place to put them.
95-1	14166-14167	I	
95-2	14168-14171	was	
95-3	14172-14178	hoping	
95-4	14179-14181	to	
95-5	14182-14185	add	
95-6	14186-14190	this	
95-7	14191-14195	list	
95-8	14196-14198	to	
95-9	14199-14202	the	
95-10	14203-14211	Postgres	
95-11	14212-14219	release	
95-12	14220-14225	notes	
95-13	14225-14226	,	
95-14	14227-14230	but	
95-15	14231-14233	we	
95-16	14234-14242	recently	
95-17	14243-14250	stopped	
95-18	14251-14260	including	
95-19	14261-14265	back	
95-20	14266-14272	branch	
95-21	14273-14280	release	
95-22	14281-14286	notes	
95-23	14287-14289	in	
95-24	14290-14297	current	
95-25	14298-14306	releases	
95-26	14306-14307	,	
95-27	14308-14310	so	
95-28	14311-14314	now	
95-29	14315-14320	there	
95-30	14321-14323	is	
95-31	14324-14326	no	
95-32	14327-14331	good	
95-33	14332-14337	place	
95-34	14338-14340	to	
95-35	14341-14344	put	
95-36	14345-14349	them	
95-37	14349-14350	.	

#Text=As a thanks to them,
#Text=and with the help of the community, I am listing them below:
#Text=Jeff Alton
#Text=Paul Aoki
#Text=James Bell
#Text=Jennifer Caetta
#Text=Philip Chang
#Text=Jolly Chen
#Text=Ron Choi
#Text=Matt Dillon
#Text=Zelaine Fong
#Text=Adam Glass
#Text=Jeffrey Goh
#Text=Steven Grady
#Text=Serge Granik
#Text=Marti Hearst
#Text=Joey Hellerstein
#Text=Michael Hirohama
#Text=Chin-Heng Hong
#Text=Wei Hong
#Text=Anant Jhingran
#Text=Greg Kemnitz
#Text=Marcel Kornacker
#Text=Case Larsen
#Text=Boris Livshitz
#Text=Jeff Meredith
#Text=Ginger Ogle
#Text=Mike Olson
#Text=Nels Olson
#Text=Lay-Peng Ong
#Text=Carol Paxson
#Text=Avi Pfeffer
#Text=Spyros Potamianos
#Text=Sunita Surawagi
#Text=David Muir Sharnoff
#Text=Mark Sullivan
#Text=Cimarron Taylor
#Text=Marc Teitelbaum
#Text=Yongdong Wang
#Text=Kristen Wright
#Text=Andrew Yu
#Text=I knew some of the names and initials from the C comments.
96-1	14351-14353	As	
96-2	14354-14355	a	
96-3	14356-14362	thanks	
96-4	14363-14365	to	
96-5	14366-14370	them	
96-6	14370-14371	,	
96-7	14372-14375	and	
96-8	14376-14380	with	
96-9	14381-14384	the	
96-10	14385-14389	help	
96-11	14390-14392	of	
96-12	14393-14396	the	
96-13	14397-14406	community	
96-14	14406-14407	,	
96-15	14408-14409	I	
96-16	14410-14412	am	
96-17	14413-14420	listing	
96-18	14421-14425	them	
96-19	14426-14431	below	
96-20	14431-14432	:	
96-21	14433-14437	Jeff	
96-22	14438-14443	Alton	
96-23	14444-14448	Paul	
96-24	14449-14453	Aoki	
96-25	14454-14459	James	
96-26	14460-14464	Bell	
96-27	14465-14473	Jennifer	
96-28	14474-14480	Caetta	
96-29	14481-14487	Philip	
96-30	14488-14493	Chang	
96-31	14494-14499	Jolly	
96-32	14500-14504	Chen	
96-33	14505-14508	Ron	
96-34	14509-14513	Choi	
96-35	14514-14518	Matt	
96-36	14519-14525	Dillon	
96-37	14526-14533	Zelaine	
96-38	14534-14538	Fong	
96-39	14539-14543	Adam	
96-40	14544-14549	Glass	
96-41	14550-14557	Jeffrey	
96-42	14558-14561	Goh	
96-43	14562-14568	Steven	
96-44	14569-14574	Grady	
96-45	14575-14580	Serge	
96-46	14581-14587	Granik	
96-47	14588-14593	Marti	
96-48	14594-14600	Hearst	
96-49	14601-14605	Joey	
96-50	14606-14617	Hellerstein	
96-51	14618-14625	Michael	
96-52	14626-14634	Hirohama	
96-53	14635-14644	Chin-Heng	
96-54	14645-14649	Hong	
96-55	14650-14653	Wei	
96-56	14654-14658	Hong	
96-57	14659-14664	Anant	
96-58	14665-14673	Jhingran	
96-59	14674-14678	Greg	
96-60	14679-14686	Kemnitz	
96-61	14687-14693	Marcel	
96-62	14694-14703	Kornacker	
96-63	14704-14708	Case	
96-64	14709-14715	Larsen	
96-65	14716-14721	Boris	
96-66	14722-14730	Livshitz	
96-67	14731-14735	Jeff	
96-68	14736-14744	Meredith	
96-69	14745-14751	Ginger	
96-70	14752-14756	Ogle	
96-71	14757-14761	Mike	
96-72	14762-14767	Olson	
96-73	14768-14772	Nels	
96-74	14773-14778	Olson	
96-75	14779-14787	Lay-Peng	
96-76	14788-14791	Ong	
96-77	14792-14797	Carol	
96-78	14798-14804	Paxson	
96-79	14805-14808	Avi	
96-80	14809-14816	Pfeffer	
96-81	14817-14823	Spyros	
96-82	14824-14834	Potamianos	
96-83	14835-14841	Sunita	
96-84	14842-14850	Surawagi	
96-85	14851-14856	David	
96-86	14857-14861	Muir	
96-87	14862-14870	Sharnoff	
96-88	14871-14875	Mark	
96-89	14876-14884	Sullivan	
96-90	14885-14893	Cimarron	
96-91	14894-14900	Taylor	
96-92	14901-14905	Marc	
96-93	14906-14916	Teitelbaum	
96-94	14917-14925	Yongdong	
96-95	14926-14930	Wang	
96-96	14931-14938	Kristen	
96-97	14939-14945	Wright	
96-98	14946-14952	Andrew	
96-99	14953-14955	Yu	
96-100	14956-14957	I	
96-101	14958-14962	knew	
96-102	14963-14967	some	
96-103	14968-14970	of	
96-104	14971-14974	the	
96-105	14975-14980	names	
96-106	14981-14984	and	
96-107	14985-14993	initials	
96-108	14994-14998	from	
96-109	14999-15002	the	
96-110	15003-15004	C	
96-111	15005-15013	comments	
96-112	15013-15014	.	

#Text=Just like those of us who have worked on Postgres for decades, I doubt they suspected that their code would be used so many years later.
97-1	15015-15019	Just	
97-2	15020-15024	like	
97-3	15025-15030	those	
97-4	15031-15033	of	
97-5	15034-15036	us	
97-6	15037-15040	who	
97-7	15041-15045	have	
97-8	15046-15052	worked	
97-9	15053-15055	on	
97-10	15056-15064	Postgres	
97-11	15065-15068	for	
97-12	15069-15076	decades	
97-13	15076-15077	,	
97-14	15078-15079	I	
97-15	15080-15085	doubt	
97-16	15086-15090	they	
97-17	15091-15100	suspected	
97-18	15101-15105	that	
97-19	15106-15111	their	
97-20	15112-15116	code	
97-21	15117-15122	would	
97-22	15123-15125	be	
97-23	15126-15130	used	
97-24	15131-15133	so	
97-25	15134-15138	many	
97-26	15139-15144	years	
97-27	15145-15150	later	
97-28	15150-15151	.	

#Text=View or Post Comments
#Text=Postgres and the Artificial Intelligence Landscape
#Text=Friday, September 18, 2020
#Text=I recently wrote a presentation, Postgres and the Artificial Intelligence Landscape, which covers the basics of artificial intelligence and
#Text=shows how Postgres can be used for this purpose.
98-1	15152-15156	View	
98-2	15157-15159	or	
98-3	15160-15164	Post	
98-4	15165-15173	Comments	
98-5	15174-15182	Postgres	
98-6	15183-15186	and	
98-7	15187-15190	the	
98-8	15191-15201	Artificial	
98-9	15202-15214	Intelligence	
98-10	15215-15224	Landscape	
98-11	15225-15231	Friday	
98-12	15231-15232	,	
98-13	15233-15242	September	
98-14	15243-15245	18	
98-15	15245-15246	,	
98-16	15247-15251	2020	
98-17	15252-15253	I	
98-18	15254-15262	recently	
98-19	15263-15268	wrote	
98-20	15269-15270	a	
98-21	15271-15283	presentation	
98-22	15283-15284	,	
98-23	15285-15293	Postgres	
98-24	15294-15297	and	
98-25	15298-15301	the	
98-26	15302-15312	Artificial	
98-27	15313-15325	Intelligence	
98-28	15326-15335	Landscape	
98-29	15335-15336	,	
98-30	15337-15342	which	
98-31	15343-15349	covers	
98-32	15350-15353	the	
98-33	15354-15360	basics	
98-34	15361-15363	of	
98-35	15364-15374	artificial	
98-36	15375-15387	intelligence	
98-37	15388-15391	and	
98-38	15392-15397	shows	
98-39	15398-15401	how	
98-40	15402-15410	Postgres	
98-41	15411-15414	can	
98-42	15415-15417	be	
98-43	15418-15422	used	
98-44	15423-15426	for	
98-45	15427-15431	this	
98-46	15432-15439	purpose	
98-47	15439-15440	.	

#Text=This week I presented it at the Chicago PostgreSQL Meetup Group so I am now
#Text=publishing the slides.
99-1	15441-15445	This	
99-2	15446-15450	week	
99-3	15451-15452	I	
99-4	15453-15462	presented	
99-5	15463-15465	it	
99-6	15466-15468	at	
99-7	15469-15472	the	
99-8	15473-15480	Chicago	
99-9	15481-15491	PostgreSQL	
99-10	15492-15498	Meetup	
99-11	15499-15504	Group	
99-12	15505-15507	so	
99-13	15508-15509	I	
99-14	15510-15512	am	
99-15	15513-15516	now	
99-16	15517-15527	publishing	
99-17	15528-15531	the	
99-18	15532-15538	slides	
99-19	15538-15539	.	

#Text=View or Post Comments
#Text=Why Not to Choose Postgres
#Text=Wednesday, September 16, 2020
#Text=Postgres has made great strides in adding features to match proprietary databases, and it has many complex features that other databases don't have.
100-1	15540-15544	View	
100-2	15545-15547	or	
100-3	15548-15552	Post	
100-4	15553-15561	Comments	
100-5	15562-15565	Why	
100-6	15566-15569	Not	
100-7	15570-15572	to	
100-8	15573-15579	Choose	
100-9	15580-15588	Postgres	
100-10	15589-15598	Wednesday	
100-11	15598-15599	,	
100-12	15600-15609	September	
100-13	15610-15612	16	
100-14	15612-15613	,	
100-15	15614-15618	2020	
100-16	15619-15627	Postgres	
100-17	15628-15631	has	
100-18	15632-15636	made	
100-19	15637-15642	great	
100-20	15643-15650	strides	
100-21	15651-15653	in	
100-22	15654-15660	adding	
100-23	15661-15669	features	
100-24	15670-15672	to	
100-25	15673-15678	match	
100-26	15679-15690	proprietary	
100-27	15691-15700	databases	
100-28	15700-15701	,	
100-29	15702-15705	and	
100-30	15706-15708	it	
100-31	15709-15712	has	
100-32	15713-15717	many	
100-33	15718-15725	complex	
100-34	15726-15734	features	
100-35	15735-15739	that	
100-36	15740-15745	other	
100-37	15746-15755	databases	
100-38	15756-15761	don't	
100-39	15762-15766	have	
100-40	15766-15767	.	

#Text=However, that doesn't mean it is the best fit for
#Text=every organization.
101-1	15768-15775	However	
101-2	15775-15776	,	
101-3	15777-15781	that	
101-4	15782-15789	doesn't	
101-5	15790-15794	mean	
101-6	15795-15797	it	
101-7	15798-15800	is	
101-8	15801-15804	the	
101-9	15805-15809	best	
101-10	15810-15813	fit	
101-11	15814-15817	for	
101-12	15818-15823	every	
101-13	15824-15836	organization	
101-14	15836-15837	.	

#Text=There are still reasons not to use Postgres:
#Text=Skills in another relational database, and no desire or value to learn Postgres
#Text=Custom applications written for another database that you don't want to modify to work with Postgres
#Text=Using externally-developed applications, tools, or frameworks that don't support Postgres
#Text=Storage of non-transactional or cache data where Postgres's overhead is significant
#Text=Multi-host workloads with simple queries where NoSQL is a win
#Text=Small, single-user systems, where SQLite is best
#Text=This email thread had lot of discussion on the topic.
102-1	15838-15843	There	
102-2	15844-15847	are	
102-3	15848-15853	still	
102-4	15854-15861	reasons	
102-5	15862-15865	not	
102-6	15866-15868	to	
102-7	15869-15872	use	
102-8	15873-15881	Postgres	
102-9	15881-15882	:	
102-10	15883-15889	Skills	
102-11	15890-15892	in	
102-12	15893-15900	another	
102-13	15901-15911	relational	
102-14	15912-15920	database	
102-15	15920-15921	,	
102-16	15922-15925	and	
102-17	15926-15928	no	
102-18	15929-15935	desire	
102-19	15936-15938	or	
102-20	15939-15944	value	
102-21	15945-15947	to	
102-22	15948-15953	learn	
102-23	15954-15962	Postgres	
102-24	15963-15969	Custom	
102-25	15970-15982	applications	
102-26	15983-15990	written	
102-27	15991-15994	for	
102-28	15995-16002	another	
102-29	16003-16011	database	
102-30	16012-16016	that	
102-31	16017-16020	you	
102-32	16021-16026	don't	
102-33	16027-16031	want	
102-34	16032-16034	to	
102-35	16035-16041	modify	
102-36	16042-16044	to	
102-37	16045-16049	work	
102-38	16050-16054	with	
102-39	16055-16063	Postgres	
102-40	16064-16069	Using	
102-41	16070-16090	externally-developed	
102-42	16091-16103	applications	
102-43	16103-16104	,	
102-44	16105-16110	tools	
102-45	16110-16111	,	
102-46	16112-16114	or	
102-47	16115-16125	frameworks	
102-48	16126-16130	that	
102-49	16131-16136	don't	
102-50	16137-16144	support	
102-51	16145-16153	Postgres	
102-52	16154-16161	Storage	
102-53	16162-16164	of	
102-54	16165-16182	non-transactional	
102-55	16183-16185	or	
102-56	16186-16191	cache	
102-57	16192-16196	data	
102-58	16197-16202	where	
102-59	16203-16213	Postgres's	
102-60	16214-16222	overhead	
102-61	16223-16225	is	
102-62	16226-16237	significant	
102-63	16238-16248	Multi-host	
102-64	16249-16258	workloads	
102-65	16259-16263	with	
102-66	16264-16270	simple	
102-67	16271-16278	queries	
102-68	16279-16284	where	
102-69	16285-16290	NoSQL	
102-70	16291-16293	is	
102-71	16294-16295	a	
102-72	16296-16299	win	
102-73	16300-16305	Small	
102-74	16305-16306	,	
102-75	16307-16318	single-user	
102-76	16319-16326	systems	
102-77	16326-16327	,	
102-78	16328-16333	where	
102-79	16334-16340	SQLite	
102-80	16341-16343	is	
102-81	16344-16348	best	
102-82	16349-16353	This	
102-83	16354-16359	email	
102-84	16360-16366	thread	
102-85	16367-16370	had	
102-86	16371-16374	lot	
102-87	16375-16377	of	
102-88	16378-16388	discussion	
102-89	16389-16391	on	
102-90	16392-16395	the	
102-91	16396-16401	topic	
102-92	16401-16402	.	

#Text=What is interesting is that decades-old
#Text=complaints about missing features, reliability, and performance are no longer mentioned.
103-1	16403-16407	What	
103-2	16408-16410	is	
103-3	16411-16422	interesting	
103-4	16423-16425	is	
103-5	16426-16430	that	
103-6	16431-16442	decades-old	
103-7	16443-16453	complaints	
103-8	16454-16459	about	
103-9	16460-16467	missing	
103-10	16468-16476	features	
103-11	16476-16477	,	
103-12	16478-16489	reliability	
103-13	16489-16490	,	
103-14	16491-16494	and	
103-15	16495-16506	performance	
103-16	16507-16510	are	
103-17	16511-16513	no	
103-18	16514-16520	longer	
103-19	16521-16530	mentioned	
103-20	16530-16531	.	

#Text=View or Post Comments
#Text=Migrating Away from Hacks
#Text=Monday, September 14, 2020
#Text=Database applications are initially written using the simplest queries possible.
104-1	16532-16536	View	
104-2	16537-16539	or	
104-3	16540-16544	Post	
104-4	16545-16553	Comments	
104-5	16554-16563	Migrating	
104-6	16564-16568	Away	
104-7	16569-16573	from	
104-8	16574-16579	Hacks	
104-9	16580-16586	Monday	
104-10	16586-16587	,	
104-11	16588-16597	September	
104-12	16598-16600	14	
104-13	16600-16601	,	
104-14	16602-16606	2020	
104-15	16607-16615	Database	
104-16	16616-16628	applications	
104-17	16629-16632	are	
104-18	16633-16642	initially	
104-19	16643-16650	written	
104-20	16651-16656	using	
104-21	16657-16660	the	
104-22	16661-16669	simplest	
104-23	16670-16677	queries	
104-24	16678-16686	possible	
104-25	16686-16687	.	

#Text=During testing and in production, some application tasks might have unacceptable performance.
105-1	16688-16694	During	
105-2	16695-16702	testing	
105-3	16703-16706	and	
105-4	16707-16709	in	
105-5	16710-16720	production	
105-6	16720-16721	,	
105-7	16722-16726	some	
105-8	16727-16738	application	
105-9	16739-16744	tasks	
105-10	16745-16750	might	
105-11	16751-16755	have	
105-12	16756-16768	unacceptable	
105-13	16769-16780	performance	
105-14	16780-16781	.	

#Text=This is where
#Text=re-architecturing happens, and where simple queries and data schema layouts can get complex.
106-1	16782-16786	This	
106-2	16787-16789	is	
106-3	16790-16795	where	
106-4	16796-16813	re-architecturing	
106-5	16814-16821	happens	
106-6	16821-16822	,	
106-7	16823-16826	and	
106-8	16827-16832	where	
106-9	16833-16839	simple	
106-10	16840-16847	queries	
106-11	16848-16851	and	
106-12	16852-16856	data	
106-13	16857-16863	schema	
106-14	16864-16871	layouts	
106-15	16872-16875	can	
106-16	16876-16879	get	
106-17	16880-16887	complex	
106-18	16887-16888	.	

#Text=They might get complex because it is required to accomplish the task, or it might be because of limitations
#Text=in how the database software handles certain queries.
107-1	16889-16893	They	
107-2	16894-16899	might	
107-3	16900-16903	get	
107-4	16904-16911	complex	
107-5	16912-16919	because	
107-6	16920-16922	it	
107-7	16923-16925	is	
107-8	16926-16934	required	
107-9	16935-16937	to	
107-10	16938-16948	accomplish	
107-11	16949-16952	the	
107-12	16953-16957	task	
107-13	16957-16958	,	
107-14	16959-16961	or	
107-15	16962-16964	it	
107-16	16965-16970	might	
107-17	16971-16973	be	
107-18	16974-16981	because	
107-19	16982-16984	of	
107-20	16985-16996	limitations	
107-21	16997-16999	in	
107-22	17000-17003	how	
107-23	17004-17007	the	
107-24	17008-17016	database	
107-25	17017-17025	software	
107-26	17026-17033	handles	
107-27	17034-17041	certain	
107-28	17042-17049	queries	
107-29	17049-17050	.	

#Text=Database and tooling upgrades can require further complex additions.
108-1	17051-17059	Database	
108-2	17060-17063	and	
108-3	17064-17071	tooling	
108-4	17072-17080	upgrades	
108-5	17081-17084	can	
108-6	17085-17092	require	
108-7	17093-17100	further	
108-8	17101-17108	complex	
108-9	17109-17118	additions	
108-10	17118-17119	.	

#Text=When switching to a new database like Postgres, all that complexity comes along for the ride.
109-1	17120-17124	When	
109-2	17125-17134	switching	
109-3	17135-17137	to	
109-4	17138-17139	a	
109-5	17140-17143	new	
109-6	17144-17152	database	
109-7	17153-17157	like	
109-8	17158-17166	Postgres	
109-9	17166-17167	,	
109-10	17168-17171	all	
109-11	17172-17176	that	
109-12	17177-17187	complexity	
109-13	17188-17193	comes	
109-14	17194-17199	along	
109-15	17200-17203	for	
109-16	17204-17207	the	
109-17	17208-17212	ride	
109-18	17212-17213	.	

#Text=Sometimes complexity added to work around deficiencies in other databases work fine in Postgres, but often
#Text=that complexity has to be removed to get good performance in Postgres.
110-1	17214-17223	Sometimes	
110-2	17224-17234	complexity	
110-3	17235-17240	added	
110-4	17241-17243	to	
110-5	17244-17248	work	
110-6	17249-17255	around	
110-7	17256-17268	deficiencies	
110-8	17269-17271	in	
110-9	17272-17277	other	
110-10	17278-17287	databases	
110-11	17288-17292	work	
110-12	17293-17297	fine	
110-13	17298-17300	in	
110-14	17301-17309	Postgres	
110-15	17309-17310	,	
110-16	17311-17314	but	
110-17	17315-17320	often	
110-18	17321-17325	that	
110-19	17326-17336	complexity	
110-20	17337-17340	has	
110-21	17341-17343	to	
110-22	17344-17346	be	
110-23	17347-17354	removed	
110-24	17355-17357	to	
110-25	17358-17361	get	
110-26	17362-17366	good	
110-27	17367-17378	performance	
110-28	17379-17381	in	
110-29	17382-17390	Postgres	
110-30	17390-17391	.	

#Text=There also might be cases where complexity has to be added to get good performance in Postgres.
111-1	17392-17397	There	
111-2	17398-17402	also	
111-3	17403-17408	might	
111-4	17409-17411	be	
111-5	17412-17417	cases	
111-6	17418-17423	where	
111-7	17424-17434	complexity	
111-8	17435-17438	has	
111-9	17439-17441	to	
111-10	17442-17444	be	
111-11	17445-17450	added	
111-12	17451-17453	to	
111-13	17454-17457	get	
111-14	17458-17462	good	
111-15	17463-17474	performance	
111-16	17475-17477	in	
111-17	17478-17486	Postgres	
111-18	17486-17487	.	

#Text=The bottom line is that complexity is bad for applications, so add complexity only when necessary.
112-1	17488-17491	The	
112-2	17492-17498	bottom	
112-3	17499-17503	line	
112-4	17504-17506	is	
112-5	17507-17511	that	
112-6	17512-17522	complexity	
112-7	17523-17525	is	
112-8	17526-17529	bad	
112-9	17530-17533	for	
112-10	17534-17546	applications	
112-11	17546-17547	,	
112-12	17548-17550	so	
112-13	17551-17554	add	
112-14	17555-17565	complexity	
112-15	17566-17570	only	
112-16	17571-17575	when	
112-17	17576-17585	necessary	
112-18	17585-17586	.	

#Text=Wise application developers remove unnecessary complexity periodically, but it can be hard to know if
#Text=database upgrades have made some complexity unnecessary.
113-1	17587-17591	Wise	
113-2	17592-17603	application	
113-3	17604-17614	developers	
113-4	17615-17621	remove	
113-5	17622-17633	unnecessary	
113-6	17634-17644	complexity	
113-7	17645-17657	periodically	
113-8	17657-17658	,	
113-9	17659-17662	but	
113-10	17663-17665	it	
113-11	17666-17669	can	
113-12	17670-17672	be	
113-13	17673-17677	hard	
113-14	17678-17680	to	
113-15	17681-17685	know	
113-16	17686-17688	if	
113-17	17689-17697	database	
113-18	17698-17706	upgrades	
113-19	17707-17711	have	
113-20	17712-17716	made	
113-21	17717-17721	some	
113-22	17722-17732	complexity	
113-23	17733-17744	unnecessary	
113-24	17744-17745	.	

#Text=Porting to a new database is an ideal time to reevaluate if application simplification is possible.
114-1	17746-17753	Porting	
114-2	17754-17756	to	
114-3	17757-17758	a	
114-4	17759-17762	new	
114-5	17763-17771	database	
114-6	17772-17774	is	
114-7	17775-17777	an	
114-8	17778-17783	ideal	
114-9	17784-17788	time	
114-10	17789-17791	to	
114-11	17792-17802	reevaluate	
114-12	17803-17805	if	
114-13	17806-17817	application	
114-14	17818-17832	simplification	
114-15	17833-17835	is	
114-16	17836-17844	possible	
114-17	17844-17845	.	

#Text=View or Post Comments
#Text=Postgres in the Cloud: The Hard Way
#Text=Friday, September 11, 2020
#Text=I recently wrote a presentation, Postgres in the Cloud: The Hard Way, which shows how to create a cloud instance, and install and run
#Text=Postgres, purely from the command line.
115-1	17846-17850	View	
115-2	17851-17853	or	
115-3	17854-17858	Post	
115-4	17859-17867	Comments	
115-5	17868-17876	Postgres	
115-6	17877-17879	in	
115-7	17880-17883	the	
115-8	17884-17889	Cloud	
115-9	17889-17890	:	
115-10	17891-17894	The	
115-11	17895-17899	Hard	
115-12	17900-17903	Way	
115-13	17904-17910	Friday	
115-14	17910-17911	,	
115-15	17912-17921	September	
115-16	17922-17924	11	
115-17	17924-17925	,	
115-18	17926-17930	2020	
115-19	17931-17932	I	
115-20	17933-17941	recently	
115-21	17942-17947	wrote	
115-22	17948-17949	a	
115-23	17950-17962	presentation	
115-24	17962-17963	,	
115-25	17964-17972	Postgres	
115-26	17973-17975	in	
115-27	17976-17979	the	
115-28	17980-17985	Cloud	
115-29	17985-17986	:	
115-30	17987-17990	The	
115-31	17991-17995	Hard	
115-32	17996-17999	Way	
115-33	17999-18000	,	
115-34	18001-18006	which	
115-35	18007-18012	shows	
115-36	18013-18016	how	
115-37	18017-18019	to	
115-38	18020-18026	create	
115-39	18027-18028	a	
115-40	18029-18034	cloud	
115-41	18035-18043	instance	
115-42	18043-18044	,	
115-43	18045-18048	and	
115-44	18049-18056	install	
115-45	18057-18060	and	
115-46	18061-18064	run	
115-47	18065-18073	Postgres	
115-48	18073-18074	,	
115-49	18075-18081	purely	
115-50	18082-18086	from	
115-51	18087-18090	the	
115-52	18091-18098	command	
115-53	18099-18103	line	
115-54	18103-18104	.	

#Text=This helps show how all the pieces fit together.
116-1	18105-18109	This	
116-2	18110-18115	helps	
116-3	18116-18120	show	
116-4	18121-18124	how	
116-5	18125-18128	all	
116-6	18129-18132	the	
116-7	18133-18139	pieces	
116-8	18140-18143	fit	
116-9	18144-18152	together	
116-10	18152-18153	.	

#Text=I recently presented this at pgDay Israel so I am now publishing the slides.
#Text=recording of the presentation is available.
117-1	18154-18155	I	
117-2	18156-18164	recently	
117-3	18165-18174	presented	
117-4	18175-18179	this	
117-5	18180-18182	at	
117-6	18183-18188	pgDay	
117-7	18189-18195	Israel	
117-8	18196-18198	so	
117-9	18199-18200	I	
117-10	18201-18203	am	
117-11	18204-18207	now	
117-12	18208-18218	publishing	
117-13	18219-18222	the	
117-14	18223-18229	slides	
117-15	18229-18230	.	
117-16	18231-18240	recording	
117-17	18241-18243	of	
117-18	18244-18247	the	
117-19	18248-18260	presentation	
117-20	18261-18263	is	
117-21	18264-18273	available	
117-22	18273-18274	.	

#Text=View or Post Comments
#Text=Changing Cars, Changing Databases
#Text=Thursday, September
#Text=3, 2020
#Text=It would be very easy if I drove the same car regularly, but because of my family size and travels, I don't have that luxury.
118-1	18275-18279	View	
118-2	18280-18282	or	
118-3	18283-18287	Post	
118-4	18288-18296	Comments	
118-5	18297-18305	Changing	
118-6	18306-18310	Cars	
118-7	18310-18311	,	
118-8	18312-18320	Changing	
118-9	18321-18330	Databases	
118-10	18331-18339	Thursday	
118-11	18339-18340	,	
118-12	18341-18350	September	
118-13	18351-18352	3	
118-14	18352-18353	,	
118-15	18354-18358	2020	
118-16	18359-18361	It	
118-17	18362-18367	would	
118-18	18368-18370	be	
118-19	18371-18375	very	
118-20	18376-18380	easy	
118-21	18381-18383	if	
118-22	18384-18385	I	
118-23	18386-18391	drove	
118-24	18392-18395	the	
118-25	18396-18400	same	
118-26	18401-18404	car	
118-27	18405-18414	regularly	
118-28	18414-18415	,	
118-29	18416-18419	but	
118-30	18420-18427	because	
118-31	18428-18430	of	
118-32	18431-18433	my	
118-33	18434-18440	family	
118-34	18441-18445	size	
118-35	18446-18449	and	
118-36	18450-18457	travels	
118-37	18457-18458	,	
118-38	18459-18460	I	
118-39	18461-18466	don't	
118-40	18467-18471	have	
118-41	18472-18476	that	
118-42	18477-18483	luxury	
118-43	18483-18484	.	

#Text=Some cars I drive have smart
#Text=keys, some mechanical keys.
119-1	18485-18489	Some	
119-2	18490-18494	cars	
119-3	18495-18496	I	
119-4	18497-18502	drive	
119-5	18503-18507	have	
119-6	18508-18513	smart	
119-7	18514-18518	keys	
119-8	18518-18519	,	
119-9	18520-18524	some	
119-10	18525-18535	mechanical	
119-11	18536-18540	keys	
119-12	18540-18541	.	

#Text=Some have gas tank doors on the driver's side, others from the passenger side.
120-1	18542-18546	Some	
120-2	18547-18551	have	
120-3	18552-18555	gas	
120-4	18556-18560	tank	
120-5	18561-18566	doors	
120-6	18567-18569	on	
120-7	18570-18573	the	
120-8	18574-18582	driver's	
120-9	18583-18587	side	
120-10	18587-18588	,	
120-11	18589-18595	others	
120-12	18596-18600	from	
120-13	18601-18604	the	
120-14	18605-18614	passenger	
120-15	18615-18619	side	
120-16	18619-18620	.	

#Text=They steer
#Text=differently, have different acceleration capabilities, even different service requirements.
121-1	18621-18625	They	
121-2	18626-18631	steer	
121-3	18632-18643	differently	
121-4	18643-18644	,	
121-5	18645-18649	have	
121-6	18650-18659	different	
121-7	18660-18672	acceleration	
121-8	18673-18685	capabilities	
121-9	18685-18686	,	
121-10	18687-18691	even	
121-11	18692-18701	different	
121-12	18702-18709	service	
121-13	18710-18722	requirements	
121-14	18722-18723	.	

#Text=I have gotten used to switching cars, but still get confused when I have to fuel the car since I have to
#Text=remember which side has the gas tank door.
122-1	18724-18725	I	
122-2	18726-18730	have	
122-3	18731-18737	gotten	
122-4	18738-18742	used	
122-5	18743-18745	to	
122-6	18746-18755	switching	
122-7	18756-18760	cars	
122-8	18760-18761	,	
122-9	18762-18765	but	
122-10	18766-18771	still	
122-11	18772-18775	get	
122-12	18776-18784	confused	
122-13	18785-18789	when	
122-14	18790-18791	I	
122-15	18792-18796	have	
122-16	18797-18799	to	
122-17	18800-18804	fuel	
122-18	18805-18808	the	
122-19	18809-18812	car	
122-20	18813-18818	since	
122-21	18819-18820	I	
122-22	18821-18825	have	
122-23	18826-18828	to	
122-24	18829-18837	remember	
122-25	18838-18843	which	
122-26	18844-18848	side	
122-27	18849-18852	has	
122-28	18853-18856	the	
122-29	18857-18860	gas	
122-30	18861-18865	tank	
122-31	18866-18870	door	
122-32	18870-18871	.	

#Text=If I had driven the same car for years, switching to a different car would be even harder — that is the circumstance for people moving from other databases to Postgres.
123-1	18872-18874	If	
123-2	18875-18876	I	
123-3	18877-18880	had	
123-4	18881-18887	driven	
123-5	18888-18891	the	
123-6	18892-18896	same	
123-7	18897-18900	car	
123-8	18901-18904	for	
123-9	18905-18910	years	
123-10	18910-18911	,	
123-11	18912-18921	switching	
123-12	18922-18924	to	
123-13	18925-18926	a	
123-14	18927-18936	different	
123-15	18937-18940	car	
123-16	18941-18946	would	
123-17	18947-18949	be	
123-18	18950-18954	even	
123-19	18955-18961	harder	
123-20	18962-18963	—	
123-21	18964-18968	that	
123-22	18969-18971	is	
123-23	18972-18975	the	
123-24	18976-18988	circumstance	
123-25	18989-18992	for	
123-26	18993-18999	people	
123-27	19000-19006	moving	
123-28	19007-19011	from	
123-29	19012-19017	other	
123-30	19018-19027	databases	
123-31	19028-19030	to	
123-32	19031-19039	Postgres	
123-33	19039-19040	.	

#Text=They have often driven the same
#Text=car/database for years, perhaps decades.
124-1	19041-19045	They	
124-2	19046-19050	have	
124-3	19051-19056	often	
124-4	19057-19063	driven	
124-5	19064-19067	the	
124-6	19068-19072	same	
124-7	19073-19076	car	
124-8	19076-19077	/	
124-9	19077-19085	database	
124-10	19086-19089	for	
124-11	19090-19095	years	
124-12	19095-19096	,	
124-13	19097-19104	perhaps	
124-14	19105-19112	decades	
124-15	19112-19113	.	

#Text=They know the intricacies of how those databases behave that even the average database vendor employee might not know.
125-1	19114-19118	They	
125-2	19119-19123	know	
125-3	19124-19127	the	
125-4	19128-19139	intricacies	
125-5	19140-19142	of	
125-6	19143-19146	how	
125-7	19147-19152	those	
125-8	19153-19162	databases	
125-9	19163-19169	behave	
125-10	19170-19174	that	
125-11	19175-19179	even	
125-12	19180-19183	the	
125-13	19184-19191	average	
125-14	19192-19200	database	
125-15	19201-19207	vendor	
125-16	19208-19216	employee	
125-17	19217-19222	might	
125-18	19223-19226	not	
125-19	19227-19231	know	
125-20	19231-19232	.	

#Text=Switching to another database can be
#Text=traumatic, especially if their job relies on databases running reliably.
126-1	19233-19242	Switching	
126-2	19243-19245	to	
126-3	19246-19253	another	
126-4	19254-19262	database	
126-5	19263-19266	can	
126-6	19267-19269	be	
126-7	19270-19279	traumatic	
126-8	19279-19280	,	
126-9	19281-19291	especially	
126-10	19292-19294	if	
126-11	19295-19300	their	
126-12	19301-19304	job	
126-13	19305-19311	relies	
126-14	19312-19314	on	
126-15	19315-19324	databases	
126-16	19325-19332	running	
126-17	19333-19341	reliably	
126-18	19341-19342	.	

#Text=They probably have all sorts of tricks and procedures for ensuring uptime, and, when switching databases, it isn't always clear if
#Text=those procedures should be modified or abandoned, and what new procedures will be necessary.
127-1	19343-19347	They	
127-2	19348-19356	probably	
127-3	19357-19361	have	
127-4	19362-19365	all	
127-5	19366-19371	sorts	
127-6	19372-19374	of	
127-7	19375-19381	tricks	
127-8	19382-19385	and	
127-9	19386-19396	procedures	
127-10	19397-19400	for	
127-11	19401-19409	ensuring	
127-12	19410-19416	uptime	
127-13	19416-19417	,	
127-14	19418-19421	and	
127-15	19421-19422	,	
127-16	19423-19427	when	
127-17	19428-19437	switching	
127-18	19438-19447	databases	
127-19	19447-19448	,	
127-20	19449-19451	it	
127-21	19452-19457	isn't	
127-22	19458-19464	always	
127-23	19465-19470	clear	
127-24	19471-19473	if	
127-25	19474-19479	those	
127-26	19480-19490	procedures	
127-27	19491-19497	should	
127-28	19498-19500	be	
127-29	19501-19509	modified	
127-30	19510-19512	or	
127-31	19513-19522	abandoned	
127-32	19522-19523	,	
127-33	19524-19527	and	
127-34	19528-19532	what	
127-35	19533-19536	new	
127-36	19537-19547	procedures	
127-37	19548-19552	will	
127-38	19553-19555	be	
127-39	19556-19565	necessary	
127-40	19565-19566	.	

#Text=There are some tasks that are common to all database:
#Text=sql, backups, fail over, performance monitoring, but it would be nice if there was a cheat sheet of all the changes necessary in moving from
#Text=one database to another.
128-1	19567-19572	There	
128-2	19573-19576	are	
128-3	19577-19581	some	
128-4	19582-19587	tasks	
128-5	19588-19592	that	
128-6	19593-19596	are	
128-7	19597-19603	common	
128-8	19604-19606	to	
128-9	19607-19610	all	
128-10	19611-19619	database	
128-11	19619-19620	:	
128-12	19621-19624	sql	
128-13	19624-19625	,	
128-14	19626-19633	backups	
128-15	19633-19634	,	
128-16	19635-19639	fail	
128-17	19640-19644	over	
128-18	19644-19645	,	
128-19	19646-19657	performance	
128-20	19658-19668	monitoring	
128-21	19668-19669	,	
128-22	19670-19673	but	
128-23	19674-19676	it	
128-24	19677-19682	would	
128-25	19683-19685	be	
128-26	19686-19690	nice	
128-27	19691-19693	if	
128-28	19694-19699	there	
128-29	19700-19703	was	
128-30	19704-19705	a	
128-31	19706-19711	cheat	
128-32	19712-19717	sheet	
128-33	19718-19720	of	
128-34	19721-19724	all	
128-35	19725-19728	the	
128-36	19729-19736	changes	
128-37	19737-19746	necessary	
128-38	19747-19749	in	
128-39	19750-19756	moving	
128-40	19757-19761	from	
128-41	19762-19765	one	
128-42	19766-19774	database	
128-43	19775-19777	to	
128-44	19778-19785	another	
128-45	19785-19786	.	

#Text=There are some guides in switching from other databases to Postgres, but they don't cover
#Text=every detail, and many user procedures are based on their workload.
129-1	19787-19792	There	
129-2	19793-19796	are	
129-3	19797-19801	some	
129-4	19802-19808	guides	
129-5	19809-19811	in	
129-6	19812-19821	switching	
129-7	19822-19826	from	
129-8	19827-19832	other	
129-9	19833-19842	databases	
129-10	19843-19845	to	
129-11	19846-19854	Postgres	
129-12	19854-19855	,	
129-13	19856-19859	but	
129-14	19860-19864	they	
129-15	19865-19870	don't	
129-16	19871-19876	cover	
129-17	19877-19882	every	
129-18	19883-19889	detail	
129-19	19889-19890	,	
129-20	19891-19894	and	
129-21	19895-19899	many	
129-22	19900-19904	user	
129-23	19905-19915	procedures	
129-24	19916-19919	are	
129-25	19920-19925	based	
129-26	19926-19928	on	
129-27	19929-19934	their	
129-28	19935-19943	workload	
129-29	19943-19944	.	

#Text=It isn't always possible to even know how workloads will behave in Postgres.
130-1	19945-19947	It	
130-2	19948-19953	isn't	
130-3	19954-19960	always	
130-4	19961-19969	possible	
130-5	19970-19972	to	
130-6	19973-19977	even	
130-7	19978-19982	know	
130-8	19983-19986	how	
130-9	19987-19996	workloads	
130-10	19997-20001	will	
130-11	20002-20008	behave	
130-12	20009-20011	in	
130-13	20012-20020	Postgres	
130-14	20020-20021	.	

#Text=It is not clear exactly what recommendation I can give for users switching to Postgres, except to review all existing procedures to determine if they are still necessary or need modification, and if new
#Text=procedures are necessary.
131-1	20022-20024	It	
131-2	20025-20027	is	
131-3	20028-20031	not	
131-4	20032-20037	clear	
131-5	20038-20045	exactly	
131-6	20046-20050	what	
131-7	20051-20065	recommendation	
131-8	20066-20067	I	
131-9	20068-20071	can	
131-10	20072-20076	give	
131-11	20077-20080	for	
131-12	20081-20086	users	
131-13	20087-20096	switching	
131-14	20097-20099	to	
131-15	20100-20108	Postgres	
131-16	20108-20109	,	
131-17	20110-20116	except	
131-18	20117-20119	to	
131-19	20120-20126	review	
131-20	20127-20130	all	
131-21	20131-20139	existing	
131-22	20140-20150	procedures	
131-23	20151-20153	to	
131-24	20154-20163	determine	
131-25	20164-20166	if	
131-26	20167-20171	they	
131-27	20172-20175	are	
131-28	20176-20181	still	
131-29	20182-20191	necessary	
131-30	20192-20194	or	
131-31	20195-20199	need	
131-32	20200-20212	modification	
131-33	20212-20213	,	
131-34	20214-20217	and	
131-35	20218-20220	if	
131-36	20221-20224	new	
131-37	20225-20235	procedures	
131-38	20236-20239	are	
131-39	20240-20249	necessary	
131-40	20249-20250	.	

#Text=One thing is for sure — changes will be needed, and rigidly following procedures used for your previous database is not a wise plan.
132-1	20251-20254	One	
132-2	20255-20260	thing	
132-3	20261-20263	is	
132-4	20264-20267	for	
132-5	20268-20272	sure	
132-6	20273-20274	—	
132-7	20275-20282	changes	
132-8	20283-20287	will	
132-9	20288-20290	be	
132-10	20291-20297	needed	
132-11	20297-20298	,	
132-12	20299-20302	and	
132-13	20303-20310	rigidly	
132-14	20311-20320	following	
132-15	20321-20331	procedures	
132-16	20332-20336	used	
132-17	20337-20340	for	
132-18	20341-20345	your	
132-19	20346-20354	previous	
132-20	20355-20363	database	
132-21	20364-20366	is	
132-22	20367-20370	not	
132-23	20371-20372	a	
132-24	20373-20377	wise	
132-25	20378-20382	plan	
132-26	20382-20383	.	

#Text=View or Post Comments
#Text=The Inner Workings of Oracle Development
#Text=Monday, August 31, 2020
#Text=Having worked in open source for decades, where every success and failure is public knowledge, I have always wondered how proprietary
#Text=development is done, particularly for databases.
133-1	20384-20388	View	
133-2	20389-20391	or	
133-3	20392-20396	Post	
133-4	20397-20405	Comments	
133-5	20406-20409	The	
133-6	20410-20415	Inner	
133-7	20416-20424	Workings	
133-8	20425-20427	of	
133-9	20428-20434	Oracle	
133-10	20435-20446	Development	
133-11	20447-20453	Monday	
133-12	20453-20454	,	
133-13	20455-20461	August	
133-14	20462-20464	31	
133-15	20464-20465	,	
133-16	20466-20470	2020	
133-17	20471-20477	Having	
133-18	20478-20484	worked	
133-19	20485-20487	in	
133-20	20488-20492	open	
133-21	20493-20499	source	
133-22	20500-20503	for	
133-23	20504-20511	decades	
133-24	20511-20512	,	
133-25	20513-20518	where	
133-26	20519-20524	every	
133-27	20525-20532	success	
133-28	20533-20536	and	
133-29	20537-20544	failure	
133-30	20545-20547	is	
133-31	20548-20554	public	
133-32	20555-20564	knowledge	
133-33	20564-20565	,	
133-34	20566-20567	I	
133-35	20568-20572	have	
133-36	20573-20579	always	
133-37	20580-20588	wondered	
133-38	20589-20592	how	
133-39	20593-20604	proprietary	
133-40	20605-20616	development	
133-41	20617-20619	is	
133-42	20620-20624	done	
133-43	20624-20625	,	
133-44	20626-20638	particularly	
133-45	20639-20642	for	
133-46	20643-20652	databases	
133-47	20652-20653	.	

#Text=I have gotten some glimpses into that world from former employees, but this Y combinator thread is
#Text=the most extensive view of Oracle development I have ever seen.
134-1	20654-20655	I	
134-2	20656-20660	have	
134-3	20661-20667	gotten	
134-4	20668-20672	some	
134-5	20673-20681	glimpses	
134-6	20682-20686	into	
134-7	20687-20691	that	
134-8	20692-20697	world	
134-9	20698-20702	from	
134-10	20703-20709	former	
134-11	20710-20719	employees	
134-12	20719-20720	,	
134-13	20721-20724	but	
134-14	20725-20729	this	
134-15	20730-20731	Y	
134-16	20732-20742	combinator	
134-17	20743-20749	thread	
134-18	20750-20752	is	
134-19	20753-20756	the	
134-20	20757-20761	most	
134-21	20762-20771	extensive	
134-22	20772-20776	view	
134-23	20777-20779	of	
134-24	20780-20786	Oracle	
134-25	20787-20798	development	
134-26	20799-20800	I	
134-27	20801-20805	have	
134-28	20806-20810	ever	
134-29	20811-20815	seen	
134-30	20815-20816	.	

#Text=It has useful lessons for all developers, as well as comments about the source code of
#Text=other relational databases.
135-1	20817-20819	It	
135-2	20820-20823	has	
135-3	20824-20830	useful	
135-4	20831-20838	lessons	
135-5	20839-20842	for	
135-6	20843-20846	all	
135-7	20847-20857	developers	
135-8	20857-20858	,	
135-9	20859-20861	as	
135-10	20862-20866	well	
135-11	20867-20869	as	
135-12	20870-20878	comments	
135-13	20879-20884	about	
135-14	20885-20888	the	
135-15	20889-20895	source	
135-16	20896-20900	code	
135-17	20901-20903	of	
135-18	20904-20909	other	
135-19	20910-20920	relational	
135-20	20921-20930	databases	
135-21	20930-20931	.	

#Text=The first thing that jumped out to me is how overwhelmed the staff appears to be by the source code's complexity.
136-1	20932-20935	The	
136-2	20936-20941	first	
136-3	20942-20947	thing	
136-4	20948-20952	that	
136-5	20953-20959	jumped	
136-6	20960-20963	out	
136-7	20964-20966	to	
136-8	20967-20969	me	
136-9	20970-20972	is	
136-10	20973-20976	how	
136-11	20977-20988	overwhelmed	
136-12	20989-20992	the	
136-13	20993-20998	staff	
136-14	20999-21006	appears	
136-15	21007-21009	to	
136-16	21010-21012	be	
136-17	21013-21015	by	
136-18	21016-21019	the	
136-19	21020-21026	source	
136-20	21027-21033	code's	
136-21	21034-21044	complexity	
136-22	21044-21045	.	

#Text=Code cleanup is never fun but it is necessary for efficient coding.
137-1	21046-21050	Code	
137-2	21051-21058	cleanup	
137-3	21059-21061	is	
137-4	21062-21067	never	
137-5	21068-21071	fun	
137-6	21072-21075	but	
137-7	21076-21078	it	
137-8	21079-21081	is	
137-9	21082-21091	necessary	
137-10	21092-21095	for	
137-11	21096-21105	efficient	
137-12	21106-21112	coding	
137-13	21112-21113	.	

#Text=For companies, it is
#Text=hard to justify developer time spent on code cleanup since the benefits of cleanup are often minor for each task but, in aggregate over time, huge.
138-1	21114-21117	For	
138-2	21118-21127	companies	
138-3	21127-21128	,	
138-4	21129-21131	it	
138-5	21132-21134	is	
138-6	21135-21139	hard	
138-7	21140-21142	to	
138-8	21143-21150	justify	
138-9	21151-21160	developer	
138-10	21161-21165	time	
138-11	21166-21171	spent	
138-12	21172-21174	on	
138-13	21175-21179	code	
138-14	21180-21187	cleanup	
138-15	21188-21193	since	
138-16	21194-21197	the	
138-17	21198-21206	benefits	
138-18	21207-21209	of	
138-19	21210-21217	cleanup	
138-20	21218-21221	are	
138-21	21222-21227	often	
138-22	21228-21233	minor	
138-23	21234-21237	for	
138-24	21238-21242	each	
138-25	21243-21247	task	
138-26	21248-21251	but	
138-27	21251-21252	,	
138-28	21253-21255	in	
138-29	21256-21265	aggregate	
138-30	21266-21270	over	
138-31	21271-21275	time	
138-32	21275-21276	,	
138-33	21277-21281	huge	
138-34	21281-21282	.	

#Text=Code cleanup can rarely be tied to a direct deliverable,
#Text=so it is often overlooked.
139-1	21283-21287	Code	
139-2	21288-21295	cleanup	
139-3	21296-21299	can	
139-4	21300-21306	rarely	
139-5	21307-21309	be	
139-6	21310-21314	tied	
139-7	21315-21317	to	
139-8	21318-21319	a	
139-9	21320-21326	direct	
139-10	21327-21338	deliverable	
139-11	21338-21339	,	
139-12	21340-21342	so	
139-13	21343-21345	it	
139-14	21346-21348	is	
139-15	21349-21354	often	
139-16	21355-21365	overlooked	
139-17	21365-21366	.	

#Text=For open source, clean code encourages developers to spend their free time coding, so there is a more direct incentive to do cleanup, plus deliverables for open source are much
#Text=less rigid.
140-1	21367-21370	For	
140-2	21371-21375	open	
140-3	21376-21382	source	
140-4	21382-21383	,	
140-5	21384-21389	clean	
140-6	21390-21394	code	
140-7	21395-21405	encourages	
140-8	21406-21416	developers	
140-9	21417-21419	to	
140-10	21420-21425	spend	
140-11	21426-21431	their	
140-12	21432-21436	free	
140-13	21437-21441	time	
140-14	21442-21448	coding	
140-15	21448-21449	,	
140-16	21450-21452	so	
140-17	21453-21458	there	
140-18	21459-21461	is	
140-19	21462-21463	a	
140-20	21464-21468	more	
140-21	21469-21475	direct	
140-22	21476-21485	incentive	
140-23	21486-21488	to	
140-24	21489-21491	do	
140-25	21492-21499	cleanup	
140-26	21499-21500	,	
140-27	21501-21505	plus	
140-28	21506-21518	deliverables	
140-29	21519-21522	for	
140-30	21523-21527	open	
140-31	21528-21534	source	
140-32	21535-21538	are	
140-33	21539-21543	much	
140-34	21544-21548	less	
140-35	21549-21554	rigid	
140-36	21554-21555	.	

#Text=There is a mention of Postgres in the thread:
#Text=I'm sure some of the difference (25M [Oracle] vs. 1.3M [Postgres}) can be attributed to code for Oracle features missing in PostgreSQL.
141-1	21556-21561	There	
141-2	21562-21564	is	
141-3	21565-21566	a	
141-4	21567-21574	mention	
141-5	21575-21577	of	
141-6	21578-21586	Postgres	
141-7	21587-21589	in	
141-8	21590-21593	the	
141-9	21594-21600	thread	
141-10	21600-21601	:	
141-11	21602-21605	I'm	
141-12	21606-21610	sure	
141-13	21611-21615	some	
141-14	21616-21618	of	
141-15	21619-21622	the	
141-16	21623-21633	difference	
141-17	21634-21635	(	
141-18	21635-21638	25M	
141-19	21639-21640	[	
141-20	21640-21646	Oracle	
141-21	21646-21647	]	
141-22	21648-21650	vs	
141-23	21650-21651	.	
141-24	21652-21656	1.3M	
141-25	21657-21658	[	
141-26	21658-21666	Postgres	
141-27	21666-21667	}	
141-28	21667-21668	)	
141-29	21669-21672	can	
141-30	21673-21675	be	
141-31	21676-21686	attributed	
141-32	21687-21689	to	
141-33	21690-21694	code	
141-34	21695-21698	for	
141-35	21699-21705	Oracle	
141-36	21706-21714	features	
141-37	21715-21722	missing	
141-38	21723-21725	in	
141-39	21726-21736	PostgreSQL	
141-40	21736-21737	.	

#Text=But a significant part of it is due to careful development
#Text=process mercilessly eliminating duplicate and unnecessary code as part of the regular PostgreSQL development cycle.
142-1	21738-21741	But	
142-2	21742-21743	a	
142-3	21744-21755	significant	
142-4	21756-21760	part	
142-5	21761-21763	of	
142-6	21764-21766	it	
142-7	21767-21769	is	
142-8	21770-21773	due	
142-9	21774-21776	to	
142-10	21777-21784	careful	
142-11	21785-21796	development	
142-12	21797-21804	process	
142-13	21805-21816	mercilessly	
142-14	21817-21828	eliminating	
142-15	21829-21838	duplicate	
142-16	21839-21842	and	
142-17	21843-21854	unnecessary	
142-18	21855-21859	code	
142-19	21860-21862	as	
142-20	21863-21867	part	
142-21	21868-21870	of	
142-22	21871-21874	the	
142-23	21875-21882	regular	
142-24	21883-21893	PostgreSQL	
142-25	21894-21905	development	
142-26	21906-21911	cycle	
142-27	21911-21912	.	

#Text=It's a bit heartbreaking at first (you spend hours/days/weeks working on something), and then a fellow [Postgres] hacker comes and cuts off the unnecessary pieces, but in the long run I'm grateful we do that.
143-1	21913-21917	It's	
143-2	21918-21919	a	
143-3	21920-21923	bit	
143-4	21924-21937	heartbreaking	
143-5	21938-21940	at	
143-6	21941-21946	first	
143-7	21947-21948	(	
143-8	21948-21951	you	
143-9	21952-21957	spend	
143-10	21958-21963	hours	
143-11	21963-21964	/	
143-12	21964-21968	days	
143-13	21968-21969	/	
143-14	21969-21974	weeks	
143-15	21975-21982	working	
143-16	21983-21985	on	
143-17	21986-21995	something	
143-18	21995-21996	)	
143-19	21996-21997	,	
143-20	21998-22001	and	
143-21	22002-22006	then	
143-22	22007-22008	a	
143-23	22009-22015	fellow	
143-24	22016-22017	[	
143-25	22017-22025	Postgres	
143-26	22025-22026	]	
143-27	22027-22033	hacker	
143-28	22034-22039	comes	
143-29	22040-22043	and	
143-30	22044-22048	cuts	
143-31	22049-22052	off	
143-32	22053-22056	the	
143-33	22057-22068	unnecessary	
143-34	22069-22075	pieces	
143-35	22075-22076	,	
143-36	22077-22080	but	
143-37	22081-22083	in	
143-38	22084-22087	the	
143-39	22088-22092	long	
143-40	22093-22096	run	
143-41	22097-22100	I'm	
143-42	22101-22109	grateful	
143-43	22110-22112	we	
143-44	22113-22115	do	
143-45	22116-22120	that	
143-46	22120-22121	.	

#Text=Second, there is the reliance on test-driven development.
144-1	22122-22128	Second	
144-2	22128-22129	,	
144-3	22130-22135	there	
144-4	22136-22138	is	
144-5	22139-22142	the	
144-6	22143-22151	reliance	
144-7	22152-22154	on	
144-8	22155-22166	test-driven	
144-9	22167-22178	development	
144-10	22178-22179	.	

#Text=Test-driven development certainly has value, but for Oracle database developers, it appears to
#Text=have become a huge drag on development.
145-1	22180-22191	Test-driven	
145-2	22192-22203	development	
145-3	22204-22213	certainly	
145-4	22214-22217	has	
145-5	22218-22223	value	
145-6	22223-22224	,	
145-7	22225-22228	but	
145-8	22229-22232	for	
145-9	22233-22239	Oracle	
145-10	22240-22248	database	
145-11	22249-22259	developers	
145-12	22259-22260	,	
145-13	22261-22263	it	
145-14	22264-22271	appears	
145-15	22272-22274	to	
145-16	22275-22279	have	
145-17	22280-22286	become	
145-18	22287-22288	a	
145-19	22289-22293	huge	
145-20	22294-22298	drag	
145-21	22299-22301	on	
145-22	22302-22313	development	
145-23	22313-22314	.	

#Text=The tests took 24+ hours to run, and because the code was so complex, it was hard to know if the changes made would even pass the tests.
146-1	22315-22318	The	
146-2	22319-22324	tests	
146-3	22325-22329	took	
146-4	22330-22332	24	
146-5	22332-22333	+	
146-6	22334-22339	hours	
146-7	22340-22342	to	
146-8	22343-22346	run	
146-9	22346-22347	,	
146-10	22348-22351	and	
146-11	22352-22359	because	
146-12	22360-22363	the	
146-13	22364-22368	code	
146-14	22369-22372	was	
146-15	22373-22375	so	
146-16	22376-22383	complex	
146-17	22383-22384	,	
146-18	22385-22387	it	
146-19	22388-22391	was	
146-20	22392-22396	hard	
146-21	22397-22399	to	
146-22	22400-22404	know	
146-23	22405-22407	if	
146-24	22408-22411	the	
146-25	22412-22419	changes	
146-26	22420-22424	made	
146-27	22425-22430	would	
146-28	22431-22435	even	
146-29	22436-22440	pass	
146-30	22441-22444	the	
146-31	22445-22450	tests	
146-32	22450-22451	.	

#Text=This
#Text=video evaluates the pathologies of test-drive development.
147-1	22452-22456	This	
147-2	22457-22462	video	
147-3	22463-22472	evaluates	
147-4	22473-22476	the	
147-5	22477-22488	pathologies	
147-6	22489-22491	of	
147-7	22492-22502	test-drive	
147-8	22503-22514	development	
147-9	22514-22515	.	

#Text=I think this
#Text=comment captures it:
#Text=Tdd [test-drive development] is like relying on debugger to solve your problem.
148-1	22516-22517	I	
148-2	22518-22523	think	
148-3	22524-22528	this	
148-4	22529-22536	comment	
148-5	22537-22545	captures	
148-6	22546-22548	it	
148-7	22548-22549	:	
148-8	22550-22553	Tdd	
148-9	22554-22555	[	
148-10	22555-22565	test-drive	
148-11	22566-22577	development	
148-12	22577-22578	]	
148-13	22579-22581	is	
148-14	22582-22586	like	
148-15	22587-22594	relying	
148-16	22595-22597	on	
148-17	22598-22606	debugger	
148-18	22607-22609	to	
148-19	22610-22615	solve	
148-20	22616-22620	your	
148-21	22621-22628	problem	
148-22	22628-22629	.	

#Text=Is debugger a good tool?
149-1	22630-22632	Is	
149-2	22633-22641	debugger	
149-3	22642-22643	a	
149-4	22644-22648	good	
149-5	22649-22653	tool	
149-6	22653-22654	?	

#Text=yes,it is a great tool.
150-1	22655-22658	yes	
150-2	22658-22659	,	
150-3	22659-22661	it	
150-4	22662-22664	is	
150-5	22665-22666	a	
150-6	22667-22672	great	
150-7	22673-22677	tool	
150-8	22677-22678	.	

#Text=But using it as an excuse to avoid understanding what happens under
#Text=the hood is plain wrong.
151-1	22679-22682	But	
151-2	22683-22688	using	
151-3	22689-22691	it	
151-4	22692-22694	as	
151-5	22695-22697	an	
151-6	22698-22704	excuse	
151-7	22705-22707	to	
151-8	22708-22713	avoid	
151-9	22714-22727	understanding	
151-10	22728-22732	what	
151-11	22733-22740	happens	
151-12	22741-22746	under	
151-13	22747-22750	the	
151-14	22751-22755	hood	
151-15	22756-22758	is	
151-16	22759-22764	plain	
151-17	22765-22770	wrong	
151-18	22770-22771	.	

#Text=Postgres has succeeded and gained a reputation for reliability without relying on tests (though we have them) but rather by reviewing patches and
#Text=looking for interactions with other parts of the system.
152-1	22772-22780	Postgres	
152-2	22781-22784	has	
152-3	22785-22794	succeeded	
152-4	22795-22798	and	
152-5	22799-22805	gained	
152-6	22806-22807	a	
152-7	22808-22818	reputation	
152-8	22819-22822	for	
152-9	22823-22834	reliability	
152-10	22835-22842	without	
152-11	22843-22850	relying	
152-12	22851-22853	on	
152-13	22854-22859	tests	
152-14	22860-22861	(	
152-15	22861-22867	though	
152-16	22868-22870	we	
152-17	22871-22875	have	
152-18	22876-22880	them	
152-19	22880-22881	)	
152-20	22882-22885	but	
152-21	22886-22892	rather	
152-22	22893-22895	by	
152-23	22896-22905	reviewing	
152-24	22906-22913	patches	
152-25	22914-22917	and	
152-26	22918-22925	looking	
152-27	22926-22929	for	
152-28	22930-22942	interactions	
152-29	22943-22947	with	
152-30	22948-22953	other	
152-31	22954-22959	parts	
152-32	22960-22962	of	
152-33	22963-22966	the	
152-34	22967-22973	system	
152-35	22973-22974	.	

#Text=We are also willing to restructure code where needed, and break backward
#Text=compatibility where warranted.
153-1	22975-22977	We	
153-2	22978-22981	are	
153-3	22982-22986	also	
153-4	22987-22994	willing	
153-5	22995-22997	to	
153-6	22998-23009	restructure	
153-7	23010-23014	code	
153-8	23015-23020	where	
153-9	23021-23027	needed	
153-10	23027-23028	,	
153-11	23029-23032	and	
153-12	23033-23038	break	
153-13	23039-23047	backward	
153-14	23048-23061	compatibility	
153-15	23062-23067	where	
153-16	23068-23077	warranted	
153-17	23077-23078	.	

#Text=However, our big advantage is a development team that is unmatched in the relational database industry, and an open source development model that efficiently
#Text=harnesses their skills.
154-1	23079-23086	However	
154-2	23086-23087	,	
154-3	23088-23091	our	
154-4	23092-23095	big	
154-5	23096-23105	advantage	
154-6	23106-23108	is	
154-7	23109-23110	a	
154-8	23111-23122	development	
154-9	23123-23127	team	
154-10	23128-23132	that	
154-11	23133-23135	is	
154-12	23136-23145	unmatched	
154-13	23146-23148	in	
154-14	23149-23152	the	
154-15	23153-23163	relational	
154-16	23164-23172	database	
154-17	23173-23181	industry	
154-18	23181-23182	,	
154-19	23183-23186	and	
154-20	23187-23189	an	
154-21	23190-23194	open	
154-22	23195-23201	source	
154-23	23202-23213	development	
154-24	23214-23219	model	
154-25	23220-23224	that	
154-26	23225-23236	efficiently	
154-27	23237-23246	harnesses	
154-28	23247-23252	their	
154-29	23253-23259	skills	
154-30	23259-23260	.	

#Text=View or Post Comments
#Text=Development Methods
#Text=Wednesday, August 26, 2020
#Text=I think there are three types of software development:
#Text=closed development & closed source distribution
#Text=closed development & open source distribution
#Text=open development & open source distribution
#Text=#1 is proprietary development, like Oracle and DB2.
#Text=#2 is development like MySQL and Mongo, where a single company controls all the development work, but the source is released, often with restrictions on how it is used.
155-1	23261-23265	View	
155-2	23266-23268	or	
155-3	23269-23273	Post	
155-4	23274-23282	Comments	
155-5	23283-23294	Development	
155-6	23295-23302	Methods	
155-7	23303-23312	Wednesday	
155-8	23312-23313	,	
155-9	23314-23320	August	
155-10	23321-23323	26	
155-11	23323-23324	,	
155-12	23325-23329	2020	
155-13	23330-23331	I	
155-14	23332-23337	think	
155-15	23338-23343	there	
155-16	23344-23347	are	
155-17	23348-23353	three	
155-18	23354-23359	types	
155-19	23360-23362	of	
155-20	23363-23371	software	
155-21	23372-23383	development	
155-22	23383-23384	:	
155-23	23385-23391	closed	
155-24	23392-23403	development	
155-25	23404-23405	&	
155-26	23406-23412	closed	
155-27	23413-23419	source	
155-28	23420-23432	distribution	
155-29	23433-23439	closed	
155-30	23440-23451	development	
155-31	23452-23453	&	
155-32	23454-23458	open	
155-33	23459-23465	source	
155-34	23466-23478	distribution	
155-35	23479-23483	open	
155-36	23484-23495	development	
155-37	23496-23497	&	
155-38	23498-23502	open	
155-39	23503-23509	source	
155-40	23510-23522	distribution	
155-41	23523-23525	#1	
155-42	23526-23528	is	
155-43	23529-23540	proprietary	
155-44	23541-23552	development	
155-45	23552-23553	,	
155-46	23554-23558	like	
155-47	23559-23565	Oracle	
155-48	23566-23569	and	
155-49	23570-23573	DB2	
155-50	23573-23574	.	
155-51	23575-23577	#2	
155-52	23578-23580	is	
155-53	23581-23592	development	
155-54	23593-23597	like	
155-55	23598-23603	MySQL	
155-56	23604-23607	and	
155-57	23608-23613	Mongo	
155-58	23613-23614	,	
155-59	23615-23620	where	
155-60	23621-23622	a	
155-61	23623-23629	single	
155-62	23630-23637	company	
155-63	23638-23646	controls	
155-64	23647-23650	all	
155-65	23651-23654	the	
155-66	23655-23666	development	
155-67	23667-23671	work	
155-68	23671-23672	,	
155-69	23673-23676	but	
155-70	23677-23680	the	
155-71	23681-23687	source	
155-72	23688-23690	is	
155-73	23691-23699	released	
155-74	23699-23700	,	
155-75	23701-23706	often	
155-76	23707-23711	with	
155-77	23712-23724	restrictions	
155-78	23725-23727	on	
155-79	23728-23731	how	
155-80	23732-23734	it	
155-81	23735-23737	is	
155-82	23738-23742	used	
155-83	23742-23743	.	

#Text=Since a company controls the
#Text=development, they can focus on specific big customers and adjust usage restrictions in ways that
#Text=encourage payment for certain features, for non-gpl use, or for cloud use.
#Text=#3 is Postgres, Linux, etc.
156-1	23744-23749	Since	
156-2	23750-23751	a	
156-3	23752-23759	company	
156-4	23760-23768	controls	
156-5	23769-23772	the	
156-6	23773-23784	development	
156-7	23784-23785	,	
156-8	23786-23790	they	
156-9	23791-23794	can	
156-10	23795-23800	focus	
156-11	23801-23803	on	
156-12	23804-23812	specific	
156-13	23813-23816	big	
156-14	23817-23826	customers	
156-15	23827-23830	and	
156-16	23831-23837	adjust	
156-17	23838-23843	usage	
156-18	23844-23856	restrictions	
156-19	23857-23859	in	
156-20	23860-23864	ways	
156-21	23865-23869	that	
156-22	23870-23879	encourage	
156-23	23880-23887	payment	
156-24	23888-23891	for	
156-25	23892-23899	certain	
156-26	23900-23908	features	
156-27	23908-23909	,	
156-28	23910-23913	for	
156-29	23914-23921	non-gpl	
156-30	23922-23925	use	
156-31	23925-23926	,	
156-32	23927-23929	or	
156-33	23930-23933	for	
156-34	23934-23939	cloud	
156-35	23940-23943	use	
156-36	23943-23944	.	
156-37	23945-23947	#3	
156-38	23948-23950	is	
156-39	23951-23959	Postgres	
156-40	23959-23960	,	
156-41	23961-23966	Linux	
156-42	23966-23967	,	
156-43	23968-23971	etc	
156-44	23971-23972	.	

#Text=The Postgres core team's independence from company control is just one aspect of the open development of Postgres.
157-1	23973-23976	The	
157-2	23977-23985	Postgres	
157-3	23986-23990	core	
157-4	23991-23997	team's	
157-5	23998-24010	independence	
157-6	24011-24015	from	
157-7	24016-24023	company	
157-8	24024-24031	control	
157-9	24032-24034	is	
157-10	24035-24039	just	
157-11	24040-24043	one	
157-12	24044-24050	aspect	
157-13	24051-24053	of	
157-14	24054-24057	the	
157-15	24058-24062	open	
157-16	24063-24074	development	
157-17	24075-24077	of	
157-18	24078-24086	Postgres	
157-19	24086-24087	.	

#Text=Understanding the development and distribution categories of software can reliably predict how that software will evolve over time.
158-1	24088-24101	Understanding	
158-2	24102-24105	the	
158-3	24106-24117	development	
158-4	24118-24121	and	
158-5	24122-24134	distribution	
158-6	24135-24145	categories	
158-7	24146-24148	of	
158-8	24149-24157	software	
158-9	24158-24161	can	
158-10	24162-24170	reliably	
158-11	24171-24178	predict	
158-12	24179-24182	how	
158-13	24183-24187	that	
158-14	24188-24196	software	
158-15	24197-24201	will	
158-16	24202-24208	evolve	
158-17	24209-24213	over	
158-18	24214-24218	time	
158-19	24218-24219	.	

#Text=View or Post Comments
#Text=Why Database Software Is Unique
#Text=Monday, August 24, 2020
#Text=Having worked with databases for over three decades, I have found there are three aspects of database software that make it unique:
#Text=Variable workloads
#Text=Performance requirements
#Text=Durability
#Text=Most other software do not have these requirements.
159-1	24220-24224	View	
159-2	24225-24227	or	
159-3	24228-24232	Post	
159-4	24233-24241	Comments	
159-5	24242-24245	Why	
159-6	24246-24254	Database	
159-7	24255-24263	Software	
159-8	24264-24266	Is	
159-9	24267-24273	Unique	
159-10	24274-24280	Monday	
159-11	24280-24281	,	
159-12	24282-24288	August	
159-13	24289-24291	24	
159-14	24291-24292	,	
159-15	24293-24297	2020	
159-16	24298-24304	Having	
159-17	24305-24311	worked	
159-18	24312-24316	with	
159-19	24317-24326	databases	
159-20	24327-24330	for	
159-21	24331-24335	over	
159-22	24336-24341	three	
159-23	24342-24349	decades	
159-24	24349-24350	,	
159-25	24351-24352	I	
159-26	24353-24357	have	
159-27	24358-24363	found	
159-28	24364-24369	there	
159-29	24370-24373	are	
159-30	24374-24379	three	
159-31	24380-24387	aspects	
159-32	24388-24390	of	
159-33	24391-24399	database	
159-34	24400-24408	software	
159-35	24409-24413	that	
159-36	24414-24418	make	
159-37	24419-24421	it	
159-38	24422-24428	unique	
159-39	24428-24429	:	
159-40	24430-24438	Variable	
159-41	24439-24448	workloads	
159-42	24449-24460	Performance	
159-43	24461-24473	requirements	
159-44	24474-24484	Durability	
159-45	24485-24489	Most	
159-46	24490-24495	other	
159-47	24496-24504	software	
159-48	24505-24507	do	
159-49	24508-24511	not	
159-50	24512-24516	have	
159-51	24517-24522	these	
159-52	24523-24535	requirements	
159-53	24535-24536	.	

#Text=Because of them, databases typically need more tuning, monitoring, and maintenance than other software, like Java applications or even
#Text=operating systems.
160-1	24537-24544	Because	
160-2	24545-24547	of	
160-3	24548-24552	them	
160-4	24552-24553	,	
160-5	24554-24563	databases	
160-6	24564-24573	typically	
160-7	24574-24578	need	
160-8	24579-24583	more	
160-9	24584-24590	tuning	
160-10	24590-24591	,	
160-11	24592-24602	monitoring	
160-12	24602-24603	,	
160-13	24604-24607	and	
160-14	24608-24619	maintenance	
160-15	24620-24624	than	
160-16	24625-24630	other	
160-17	24631-24639	software	
160-18	24639-24640	,	
160-19	24641-24645	like	
160-20	24646-24650	Java	
160-21	24651-24663	applications	
160-22	24664-24666	or	
160-23	24667-24671	even	
160-24	24672-24681	operating	
160-25	24682-24689	systems	
160-26	24689-24690	.	

#Text=These requirements also help make companies supporting database software profitable, including open source-based ones.
161-1	24691-24696	These	
161-2	24697-24709	requirements	
161-3	24710-24714	also	
161-4	24715-24719	help	
161-5	24720-24724	make	
161-6	24725-24734	companies	
161-7	24735-24745	supporting	
161-8	24746-24754	database	
161-9	24755-24763	software	
161-10	24764-24774	profitable	
161-11	24774-24775	,	
161-12	24776-24785	including	
161-13	24786-24790	open	
161-14	24791-24803	source-based	
161-15	24804-24808	ones	
161-16	24808-24809	.	

#Text=View or Post Comments
#Text=Standard Deviation
#Text=Friday, August 21, 2020
#Text=Postgres has a lot of aggregate functions to make your life, and data analysis, easier.
162-1	24810-24814	View	
162-2	24815-24817	or	
162-3	24818-24822	Post	
162-4	24823-24831	Comments	
162-5	24832-24840	Standard	
162-6	24841-24850	Deviation	
162-7	24851-24857	Friday	
162-8	24857-24858	,	
162-9	24859-24865	August	
162-10	24866-24868	21	
162-11	24868-24869	,	
162-12	24870-24874	2020	
162-13	24875-24883	Postgres	
162-14	24884-24887	has	
162-15	24888-24889	a	
162-16	24890-24893	lot	
162-17	24894-24896	of	
162-18	24897-24906	aggregate	
162-19	24907-24916	functions	
162-20	24917-24919	to	
162-21	24920-24924	make	
162-22	24925-24929	your	
162-23	24930-24934	life	
162-24	24934-24935	,	
162-25	24936-24939	and	
162-26	24940-24944	data	
162-27	24945-24953	analysis	
162-28	24953-24954	,	
162-29	24955-24961	easier	
162-30	24961-24962	.	

#Text=Postgres 12 has 42 aggregate functions.
163-1	24963-24971	Postgres	
163-2	24972-24974	12	
163-3	24975-24978	has	
163-4	24979-24981	42	
163-5	24982-24991	aggregate	
163-6	24992-25001	functions	
163-7	25001-25002	.	

#Text=You can
#Text=see a full list by typing \\daS in psql.
164-1	25003-25006	You	
164-2	25007-25010	can	
164-3	25011-25014	see	
164-4	25015-25016	a	
164-5	25017-25021	full	
164-6	25022-25026	list	
164-7	25027-25029	by	
164-8	25030-25036	typing	
164-9	25037-25038	\	
164-10	25038-25041	daS	
164-11	25042-25044	in	
164-12	25045-25049	psql	
164-13	25049-25050	.	

#Text=While you are probably familiar with common aggregates like count and avg, Postgres supports many more.
165-1	25051-25056	While	
165-2	25057-25060	you	
165-3	25061-25064	are	
165-4	25065-25073	probably	
165-5	25074-25082	familiar	
165-6	25083-25087	with	
165-7	25088-25094	common	
165-8	25095-25105	aggregates	
165-9	25106-25110	like	
165-10	25111-25116	count	
165-11	25117-25120	and	
165-12	25121-25124	avg	
165-13	25124-25125	,	
165-14	25126-25134	Postgres	
165-15	25135-25143	supports	
165-16	25144-25148	many	
165-17	25149-25153	more	
165-18	25153-25154	.	

#Text=There are aggregates for arrays, json, and statistical functions.
166-1	25155-25160	There	
166-2	25161-25164	are	
166-3	25165-25175	aggregates	
166-4	25176-25179	for	
166-5	25180-25186	arrays	
166-6	25186-25187	,	
166-7	25188-25192	json	
166-8	25192-25193	,	
166-9	25194-25197	and	
166-10	25198-25209	statistical	
166-11	25210-25219	functions	
166-12	25219-25220	.	

#Text=When
#Text=dealing with numeric data, people are usually concerned about the number or total of the entries, but when trying to determine how much values vary, standard deviation is helpful:
#Text=SELECT stddev(x) FROM (VALUES (25), (50), (75)) AS t(x);
#Text=stddev
#Text=---------------------
#Text=25.0000000000000000
#Text=SELECT stddev(x) FROM (VALUES (49), (50), (51)) AS t(x);
#Text=stddev
#Text=------------------------
#Text=1.00000000000000000000
#Text=Both sets of three values total 150, but the first set varies by 25, while the second set varies by only one.
167-1	25221-25225	When	
167-2	25226-25233	dealing	
167-3	25234-25238	with	
167-4	25239-25246	numeric	
167-5	25247-25251	data	
167-6	25251-25252	,	
167-7	25253-25259	people	
167-8	25260-25263	are	
167-9	25264-25271	usually	
167-10	25272-25281	concerned	
167-11	25282-25287	about	
167-12	25288-25291	the	
167-13	25292-25298	number	
167-14	25299-25301	or	
167-15	25302-25307	total	
167-16	25308-25310	of	
167-17	25311-25314	the	
167-18	25315-25322	entries	
167-19	25322-25323	,	
167-20	25324-25327	but	
167-21	25328-25332	when	
167-22	25333-25339	trying	
167-23	25340-25342	to	
167-24	25343-25352	determine	
167-25	25353-25356	how	
167-26	25357-25361	much	
167-27	25362-25368	values	
167-28	25369-25373	vary	
167-29	25373-25374	,	
167-30	25375-25383	standard	
167-31	25384-25393	deviation	
167-32	25394-25396	is	
167-33	25397-25404	helpful	
167-34	25404-25405	:	
167-35	25406-25412	SELECT	
167-36	25413-25419	stddev	
167-37	25419-25420	(	
167-38	25420-25421	x	
167-39	25421-25422	)	
167-40	25423-25427	FROM	
167-41	25428-25429	(	
167-42	25429-25435	VALUES	
167-43	25436-25437	(	
167-44	25437-25439	25	
167-45	25439-25440	)	
167-46	25440-25441	,	
167-47	25442-25443	(	
167-48	25443-25445	50	
167-49	25445-25446	)	
167-50	25446-25447	,	
167-51	25448-25449	(	
167-52	25449-25451	75	
167-53	25451-25452	)	
167-54	25452-25453	)	
167-55	25454-25456	AS	
167-56	25457-25458	t	
167-57	25458-25459	(	
167-58	25459-25460	x	
167-59	25460-25461	)	
167-60	25461-25462	;	
167-61	25463-25469	stddev	
167-62	25470-25471	-	
167-63	25471-25472	-	
167-64	25472-25473	-	
167-65	25473-25474	-	
167-66	25474-25475	-	
167-67	25475-25476	-	
167-68	25476-25477	-	
167-69	25477-25478	-	
167-70	25478-25479	-	
167-71	25479-25480	-	
167-72	25480-25481	-	
167-73	25481-25482	-	
167-74	25482-25483	-	
167-75	25483-25484	-	
167-76	25484-25485	-	
167-77	25485-25486	-	
167-78	25486-25487	-	
167-79	25487-25488	-	
167-80	25488-25489	-	
167-81	25489-25490	-	
167-82	25490-25491	-	
167-83	25492-25511	25.0000000000000000	
167-84	25512-25518	SELECT	
167-85	25519-25525	stddev	
167-86	25525-25526	(	
167-87	25526-25527	x	
167-88	25527-25528	)	
167-89	25529-25533	FROM	
167-90	25534-25535	(	
167-91	25535-25541	VALUES	
167-92	25542-25543	(	
167-93	25543-25545	49	
167-94	25545-25546	)	
167-95	25546-25547	,	
167-96	25548-25549	(	
167-97	25549-25551	50	
167-98	25551-25552	)	
167-99	25552-25553	,	
167-100	25554-25555	(	
167-101	25555-25557	51	
167-102	25557-25558	)	
167-103	25558-25559	)	
167-104	25560-25562	AS	
167-105	25563-25564	t	
167-106	25564-25565	(	
167-107	25565-25566	x	
167-108	25566-25567	)	
167-109	25567-25568	;	
167-110	25569-25575	stddev	
167-111	25576-25577	-	
167-112	25577-25578	-	
167-113	25578-25579	-	
167-114	25579-25580	-	
167-115	25580-25581	-	
167-116	25581-25582	-	
167-117	25582-25583	-	
167-118	25583-25584	-	
167-119	25584-25585	-	
167-120	25585-25586	-	
167-121	25586-25587	-	
167-122	25587-25588	-	
167-123	25588-25589	-	
167-124	25589-25590	-	
167-125	25590-25591	-	
167-126	25591-25592	-	
167-127	25592-25593	-	
167-128	25593-25594	-	
167-129	25594-25595	-	
167-130	25595-25596	-	
167-131	25596-25597	-	
167-132	25597-25598	-	
167-133	25598-25599	-	
167-134	25599-25600	-	
167-135	25601-25623	1.00000000000000000000	
167-136	25624-25628	Both	
167-137	25629-25633	sets	
167-138	25634-25636	of	
167-139	25637-25642	three	
167-140	25643-25649	values	
167-141	25650-25655	total	
167-142	25656-25659	150	
167-143	25659-25660	,	
167-144	25661-25664	but	
167-145	25665-25668	the	
167-146	25669-25674	first	
167-147	25675-25678	set	
167-148	25679-25685	varies	
167-149	25686-25688	by	
167-150	25689-25691	25	
167-151	25691-25692	,	
167-152	25693-25698	while	
167-153	25699-25702	the	
167-154	25703-25709	second	
167-155	25710-25713	set	
167-156	25714-25720	varies	
167-157	25721-25723	by	
167-158	25724-25728	only	
167-159	25729-25732	one	
167-160	25732-25733	.	

#Text=If you are analyzing your bank balance, you might not care how much the numbers vary, but if
#Text=you are looking at web site response times, the variability of the numbers can be significant.
168-1	25734-25736	If	
168-2	25737-25740	you	
168-3	25741-25744	are	
168-4	25745-25754	analyzing	
168-5	25755-25759	your	
168-6	25760-25764	bank	
168-7	25765-25772	balance	
168-8	25772-25773	,	
168-9	25774-25777	you	
168-10	25778-25783	might	
168-11	25784-25787	not	
168-12	25788-25792	care	
168-13	25793-25796	how	
168-14	25797-25801	much	
168-15	25802-25805	the	
168-16	25806-25813	numbers	
168-17	25814-25818	vary	
168-18	25818-25819	,	
168-19	25820-25823	but	
168-20	25824-25826	if	
168-21	25827-25830	you	
168-22	25831-25834	are	
168-23	25835-25842	looking	
168-24	25843-25845	at	
168-25	25846-25849	web	
168-26	25850-25854	site	
168-27	25855-25863	response	
168-28	25864-25869	times	
168-29	25869-25870	,	
168-30	25871-25874	the	
168-31	25875-25886	variability	
168-32	25887-25889	of	
168-33	25890-25893	the	
168-34	25894-25901	numbers	
168-35	25902-25905	can	
168-36	25906-25908	be	
168-37	25909-25920	significant	
168-38	25920-25921	.	

#Text=View or Post Comments
#Text=Keyset Pagination in Action
#Text=Monday, August 17, 2020
#Text=Having explained keyset pagination, let's look at how it behaves while inserts and deletes are happening in the table.
169-1	25922-25926	View	
169-2	25927-25929	or	
169-3	25930-25934	Post	
169-4	25935-25943	Comments	
169-5	25944-25950	Keyset	
169-6	25951-25961	Pagination	
169-7	25962-25964	in	
169-8	25965-25971	Action	
169-9	25972-25978	Monday	
169-10	25978-25979	,	
169-11	25980-25986	August	
169-12	25987-25989	17	
169-13	25989-25990	,	
169-14	25991-25995	2020	
169-15	25996-26002	Having	
169-16	26003-26012	explained	
169-17	26013-26019	keyset	
169-18	26020-26030	pagination	
169-19	26030-26031	,	
169-20	26032-26037	let's	
169-21	26038-26042	look	
169-22	26043-26045	at	
169-23	26046-26049	how	
169-24	26050-26052	it	
169-25	26053-26060	behaves	
169-26	26061-26066	while	
169-27	26067-26074	inserts	
169-28	26075-26078	and	
169-29	26079-26086	deletes	
169-30	26087-26090	are	
169-31	26091-26100	happening	
169-32	26101-26103	in	
169-33	26104-26107	the	
169-34	26108-26113	table	
169-35	26113-26114	.	

#Text=Using the queries from the previous blog entry, let's see how deletions from previous pages affect displaying of page four from page three:
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id > 30
#Text=ORDER BY product_id
#Text=LIMIT 11;
#Text=product_id | description
#Text=------------+-------------
#Text=31 | Product 31
#Text=32 | Product 32
#Text=33 | Product 33
#Text=34 | Product 34
#Text=35 | Product 35
#Text=36 | Product 36
#Text=37 | Product 37
#Text=38 | Product 38
#Text=39 | Product 39
#Text=40 | Product 40
#Text=41 | Product 41
#Text=DELETE FROM product WHERE product_id <= 5;
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id > 30
#Text=ORDER BY product_id
#Text=LIMIT 11;
#Text=product_id | description
#Text=------------+-------------
#Text=31 | Product 31
#Text=32 | Product 32
#Text=33 | Product 33
#Text=34 | Product 34
#Text=35 | Product 35
#Text=36 | Product 36
#Text=37 | Product 37
#Text=38 | Product 38
#Text=39 | Product 39
#Text=40 | Product 40
#Text=41 | Product 41
#Text=As you can see, the delete had no affect because we were anchored on the last value on the page, rather than, if we had used offset, the first value of the result set.
170-1	26115-26120	Using	
170-2	26121-26124	the	
170-3	26125-26132	queries	
170-4	26133-26137	from	
170-5	26138-26141	the	
170-6	26142-26150	previous	
170-7	26151-26155	blog	
170-8	26156-26161	entry	
170-9	26161-26162	,	
170-10	26163-26168	let's	
170-11	26169-26172	see	
170-12	26173-26176	how	
170-13	26177-26186	deletions	
170-14	26187-26191	from	
170-15	26192-26200	previous	
170-16	26201-26206	pages	
170-17	26207-26213	affect	
170-18	26214-26224	displaying	
170-19	26225-26227	of	
170-20	26228-26232	page	
170-21	26233-26237	four	
170-22	26238-26242	from	
170-23	26243-26247	page	
170-24	26248-26253	three	
170-25	26253-26254	:	
170-26	26255-26261	SELECT	
170-27	26262-26272	product_id	
170-28	26272-26273	,	
170-29	26274-26285	description	
170-30	26286-26290	FROM	
170-31	26291-26298	product	
170-32	26299-26304	WHERE	
170-33	26305-26315	product_id	
170-34	26316-26317	>	
170-35	26318-26320	30	
170-36	26321-26326	ORDER	
170-37	26327-26329	BY	
170-38	26330-26340	product_id	
170-39	26341-26346	LIMIT	
170-40	26347-26349	11	
170-41	26349-26350	;	
170-42	26351-26361	product_id	
170-43	26362-26363	|	
170-44	26364-26375	description	
170-45	26376-26377	-	
170-46	26377-26378	-	
170-47	26378-26379	-	
170-48	26379-26380	-	
170-49	26380-26381	-	
170-50	26381-26382	-	
170-51	26382-26383	-	
170-52	26383-26384	-	
170-53	26384-26385	-	
170-54	26385-26386	-	
170-55	26386-26387	-	
170-56	26387-26388	-	
170-57	26388-26389	+	
170-58	26389-26390	-	
170-59	26390-26391	-	
170-60	26391-26392	-	
170-61	26392-26393	-	
170-62	26393-26394	-	
170-63	26394-26395	-	
170-64	26395-26396	-	
170-65	26396-26397	-	
170-66	26397-26398	-	
170-67	26398-26399	-	
170-68	26399-26400	-	
170-69	26400-26401	-	
170-70	26401-26402	-	
170-71	26403-26405	31	
170-72	26406-26407	|	
170-73	26408-26415	Product	
170-74	26416-26418	31	
170-75	26419-26421	32	
170-76	26422-26423	|	
170-77	26424-26431	Product	
170-78	26432-26434	32	
170-79	26435-26437	33	
170-80	26438-26439	|	
170-81	26440-26447	Product	
170-82	26448-26450	33	
170-83	26451-26453	34	
170-84	26454-26455	|	
170-85	26456-26463	Product	
170-86	26464-26466	34	
170-87	26467-26469	35	
170-88	26470-26471	|	
170-89	26472-26479	Product	
170-90	26480-26482	35	
170-91	26483-26485	36	
170-92	26486-26487	|	
170-93	26488-26495	Product	
170-94	26496-26498	36	
170-95	26499-26501	37	
170-96	26502-26503	|	
170-97	26504-26511	Product	
170-98	26512-26514	37	
170-99	26515-26517	38	
170-100	26518-26519	|	
170-101	26520-26527	Product	
170-102	26528-26530	38	
170-103	26531-26533	39	
170-104	26534-26535	|	
170-105	26536-26543	Product	
170-106	26544-26546	39	
170-107	26547-26549	40	
170-108	26550-26551	|	
170-109	26552-26559	Product	
170-110	26560-26562	40	
170-111	26563-26565	41	
170-112	26566-26567	|	
170-113	26568-26575	Product	
170-114	26576-26578	41	
170-115	26579-26585	DELETE	
170-116	26586-26590	FROM	
170-117	26591-26598	product	
170-118	26599-26604	WHERE	
170-119	26605-26615	product_id	
170-120	26616-26617	<	
170-121	26617-26618	=	
170-122	26619-26620	5	
170-123	26620-26621	;	
170-124	26622-26628	SELECT	
170-125	26629-26639	product_id	
170-126	26639-26640	,	
170-127	26641-26652	description	
170-128	26653-26657	FROM	
170-129	26658-26665	product	
170-130	26666-26671	WHERE	
170-131	26672-26682	product_id	
170-132	26683-26684	>	
170-133	26685-26687	30	
170-134	26688-26693	ORDER	
170-135	26694-26696	BY	
170-136	26697-26707	product_id	
170-137	26708-26713	LIMIT	
170-138	26714-26716	11	
170-139	26716-26717	;	
170-140	26718-26728	product_id	
170-141	26729-26730	|	
170-142	26731-26742	description	
170-143	26743-26744	-	
170-144	26744-26745	-	
170-145	26745-26746	-	
170-146	26746-26747	-	
170-147	26747-26748	-	
170-148	26748-26749	-	
170-149	26749-26750	-	
170-150	26750-26751	-	
170-151	26751-26752	-	
170-152	26752-26753	-	
170-153	26753-26754	-	
170-154	26754-26755	-	
170-155	26755-26756	+	
170-156	26756-26757	-	
170-157	26757-26758	-	
170-158	26758-26759	-	
170-159	26759-26760	-	
170-160	26760-26761	-	
170-161	26761-26762	-	
170-162	26762-26763	-	
170-163	26763-26764	-	
170-164	26764-26765	-	
170-165	26765-26766	-	
170-166	26766-26767	-	
170-167	26767-26768	-	
170-168	26768-26769	-	
170-169	26770-26772	31	
170-170	26773-26774	|	
170-171	26775-26782	Product	
170-172	26783-26785	31	
170-173	26786-26788	32	
170-174	26789-26790	|	
170-175	26791-26798	Product	
170-176	26799-26801	32	
170-177	26802-26804	33	
170-178	26805-26806	|	
170-179	26807-26814	Product	
170-180	26815-26817	33	
170-181	26818-26820	34	
170-182	26821-26822	|	
170-183	26823-26830	Product	
170-184	26831-26833	34	
170-185	26834-26836	35	
170-186	26837-26838	|	
170-187	26839-26846	Product	
170-188	26847-26849	35	
170-189	26850-26852	36	
170-190	26853-26854	|	
170-191	26855-26862	Product	
170-192	26863-26865	36	
170-193	26866-26868	37	
170-194	26869-26870	|	
170-195	26871-26878	Product	
170-196	26879-26881	37	
170-197	26882-26884	38	
170-198	26885-26886	|	
170-199	26887-26894	Product	
170-200	26895-26897	38	
170-201	26898-26900	39	
170-202	26901-26902	|	
170-203	26903-26910	Product	
170-204	26911-26913	39	
170-205	26914-26916	40	
170-206	26917-26918	|	
170-207	26919-26926	Product	
170-208	26927-26929	40	
170-209	26930-26932	41	
170-210	26933-26934	|	
170-211	26935-26942	Product	
170-212	26943-26945	41	
170-213	26946-26948	As	
170-214	26949-26952	you	
170-215	26953-26956	can	
170-216	26957-26960	see	
170-217	26960-26961	,	
170-218	26962-26965	the	
170-219	26966-26972	delete	
170-220	26973-26976	had	
170-221	26977-26979	no	
170-222	26980-26986	affect	
170-223	26987-26994	because	
170-224	26995-26997	we	
170-225	26998-27002	were	
170-226	27003-27011	anchored	
170-227	27012-27014	on	
170-228	27015-27018	the	
170-229	27019-27023	last	
170-230	27024-27029	value	
170-231	27030-27032	on	
170-232	27033-27036	the	
170-233	27037-27041	page	
170-234	27041-27042	,	
170-235	27043-27049	rather	
170-236	27050-27054	than	
170-237	27054-27055	,	
170-238	27056-27058	if	
170-239	27059-27061	we	
170-240	27062-27065	had	
170-241	27066-27070	used	
170-242	27071-27077	offset	
170-243	27077-27078	,	
170-244	27079-27082	the	
170-245	27083-27088	first	
170-246	27089-27094	value	
170-247	27095-27097	of	
170-248	27098-27101	the	
170-249	27102-27108	result	
170-250	27109-27112	set	
170-251	27112-27113	.	

#Text=Inserts
#Text=before page four are also ignored:
#Text=INSERT INTO product
#Text=SELECT id, 'Product ' || id::TEXT
#Text=FROM generate_series(1, 3) AS t(id);
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id > 30
#Text=ORDER BY product_id
#Text=LIMIT 11;
#Text=product_id | description
#Text=------------+-------------
#Text=31 | Product 31
#Text=32 | Product 32
#Text=33 | Product 33
#Text=34 | Product 34
#Text=35 | Product 35
#Text=36 | Product 36
#Text=37 | Product 37
#Text=38 | Product 38
#Text=39 | Product 39
#Text=40 | Product 40
#Text=41 | Product 41
#Text=Of course, inserts and deletes after the current page would display normally.
171-1	27114-27121	Inserts	
171-2	27122-27128	before	
171-3	27129-27133	page	
171-4	27134-27138	four	
171-5	27139-27142	are	
171-6	27143-27147	also	
171-7	27148-27155	ignored	
171-8	27155-27156	:	
171-9	27157-27163	INSERT	
171-10	27164-27168	INTO	
171-11	27169-27176	product	
171-12	27177-27183	SELECT	
171-13	27184-27186	id	
171-14	27186-27187	,	
171-15	27188-27189	'	
171-16	27189-27196	Product	
171-17	27197-27198	'	
171-18	27199-27200	|	
171-19	27200-27201	|	
171-20	27202-27204	id	
171-21	27204-27205	:	
171-22	27205-27206	:	
171-23	27206-27210	TEXT	
171-24	27211-27215	FROM	
171-25	27216-27231	generate_series	
171-26	27231-27232	(	
171-27	27232-27233	1	
171-28	27233-27234	,	
171-29	27235-27236	3	
171-30	27236-27237	)	
171-31	27238-27240	AS	
171-32	27241-27242	t	
171-33	27242-27243	(	
171-34	27243-27245	id	
171-35	27245-27246	)	
171-36	27246-27247	;	
171-37	27248-27254	SELECT	
171-38	27255-27265	product_id	
171-39	27265-27266	,	
171-40	27267-27278	description	
171-41	27279-27283	FROM	
171-42	27284-27291	product	
171-43	27292-27297	WHERE	
171-44	27298-27308	product_id	
171-45	27309-27310	>	
171-46	27311-27313	30	
171-47	27314-27319	ORDER	
171-48	27320-27322	BY	
171-49	27323-27333	product_id	
171-50	27334-27339	LIMIT	
171-51	27340-27342	11	
171-52	27342-27343	;	
171-53	27344-27354	product_id	
171-54	27355-27356	|	
171-55	27357-27368	description	
171-56	27369-27370	-	
171-57	27370-27371	-	
171-58	27371-27372	-	
171-59	27372-27373	-	
171-60	27373-27374	-	
171-61	27374-27375	-	
171-62	27375-27376	-	
171-63	27376-27377	-	
171-64	27377-27378	-	
171-65	27378-27379	-	
171-66	27379-27380	-	
171-67	27380-27381	-	
171-68	27381-27382	+	
171-69	27382-27383	-	
171-70	27383-27384	-	
171-71	27384-27385	-	
171-72	27385-27386	-	
171-73	27386-27387	-	
171-74	27387-27388	-	
171-75	27388-27389	-	
171-76	27389-27390	-	
171-77	27390-27391	-	
171-78	27391-27392	-	
171-79	27392-27393	-	
171-80	27393-27394	-	
171-81	27394-27395	-	
171-82	27396-27398	31	
171-83	27399-27400	|	
171-84	27401-27408	Product	
171-85	27409-27411	31	
171-86	27412-27414	32	
171-87	27415-27416	|	
171-88	27417-27424	Product	
171-89	27425-27427	32	
171-90	27428-27430	33	
171-91	27431-27432	|	
171-92	27433-27440	Product	
171-93	27441-27443	33	
171-94	27444-27446	34	
171-95	27447-27448	|	
171-96	27449-27456	Product	
171-97	27457-27459	34	
171-98	27460-27462	35	
171-99	27463-27464	|	
171-100	27465-27472	Product	
171-101	27473-27475	35	
171-102	27476-27478	36	
171-103	27479-27480	|	
171-104	27481-27488	Product	
171-105	27489-27491	36	
171-106	27492-27494	37	
171-107	27495-27496	|	
171-108	27497-27504	Product	
171-109	27505-27507	37	
171-110	27508-27510	38	
171-111	27511-27512	|	
171-112	27513-27520	Product	
171-113	27521-27523	38	
171-114	27524-27526	39	
171-115	27527-27528	|	
171-116	27529-27536	Product	
171-117	27537-27539	39	
171-118	27540-27542	40	
171-119	27543-27544	|	
171-120	27545-27552	Product	
171-121	27553-27555	40	
171-122	27556-27558	41	
171-123	27559-27560	|	
171-124	27561-27568	Product	
171-125	27569-27571	41	
171-126	27572-27574	Of	
171-127	27575-27581	course	
171-128	27581-27582	,	
171-129	27583-27590	inserts	
171-130	27591-27594	and	
171-131	27595-27602	deletes	
171-132	27603-27608	after	
171-133	27609-27612	the	
171-134	27613-27620	current	
171-135	27621-27625	page	
171-136	27626-27631	would	
171-137	27632-27639	display	
171-138	27640-27648	normally	
171-139	27648-27649	.	

#Text=We can also easily go backward from page four:
#Text=WITH page AS
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id < 31
#Text=ORDER BY product_id DESC
#Text=LIMIT 11
#Text=SELECT product_id, description
#Text=FROM page
#Text=ORDER BY product_id;
#Text=product_id | description
#Text=------------+-------------
#Text=20 | Product 20
#Text=21 | Product 21
#Text=22 | Product 22
#Text=23 | Product 23
#Text=24 | Product 24
#Text=25 | Product 25
#Text=26 | Product 26
#Text=27 | Product 27
#Text=28 | Product 28
#Text=29 | Product 29
#Text=30 | Product 30
#Text=Going from page three to page two:
#Text=(Remember, when paging backward, the first row (e.g., 20) is used as a marker to indicate if another previous page exists.)
172-1	27650-27652	We	
172-2	27653-27656	can	
172-3	27657-27661	also	
172-4	27662-27668	easily	
172-5	27669-27671	go	
172-6	27672-27680	backward	
172-7	27681-27685	from	
172-8	27686-27690	page	
172-9	27691-27695	four	
172-10	27695-27696	:	
172-11	27697-27701	WITH	
172-12	27702-27706	page	
172-13	27707-27709	AS	
172-14	27710-27716	SELECT	
172-15	27717-27727	product_id	
172-16	27727-27728	,	
172-17	27729-27740	description	
172-18	27741-27745	FROM	
172-19	27746-27753	product	
172-20	27754-27759	WHERE	
172-21	27760-27770	product_id	
172-22	27771-27772	<	
172-23	27773-27775	31	
172-24	27776-27781	ORDER	
172-25	27782-27784	BY	
172-26	27785-27795	product_id	
172-27	27796-27800	DESC	
172-28	27801-27806	LIMIT	
172-29	27807-27809	11	
172-30	27810-27816	SELECT	
172-31	27817-27827	product_id	
172-32	27827-27828	,	
172-33	27829-27840	description	
172-34	27841-27845	FROM	
172-35	27846-27850	page	
172-36	27851-27856	ORDER	
172-37	27857-27859	BY	
172-38	27860-27870	product_id	
172-39	27870-27871	;	
172-40	27872-27882	product_id	
172-41	27883-27884	|	
172-42	27885-27896	description	
172-43	27897-27898	-	
172-44	27898-27899	-	
172-45	27899-27900	-	
172-46	27900-27901	-	
172-47	27901-27902	-	
172-48	27902-27903	-	
172-49	27903-27904	-	
172-50	27904-27905	-	
172-51	27905-27906	-	
172-52	27906-27907	-	
172-53	27907-27908	-	
172-54	27908-27909	-	
172-55	27909-27910	+	
172-56	27910-27911	-	
172-57	27911-27912	-	
172-58	27912-27913	-	
172-59	27913-27914	-	
172-60	27914-27915	-	
172-61	27915-27916	-	
172-62	27916-27917	-	
172-63	27917-27918	-	
172-64	27918-27919	-	
172-65	27919-27920	-	
172-66	27920-27921	-	
172-67	27921-27922	-	
172-68	27922-27923	-	
172-69	27924-27926	20	
172-70	27927-27928	|	
172-71	27929-27936	Product	
172-72	27937-27939	20	
172-73	27940-27942	21	
172-74	27943-27944	|	
172-75	27945-27952	Product	
172-76	27953-27955	21	
172-77	27956-27958	22	
172-78	27959-27960	|	
172-79	27961-27968	Product	
172-80	27969-27971	22	
172-81	27972-27974	23	
172-82	27975-27976	|	
172-83	27977-27984	Product	
172-84	27985-27987	23	
172-85	27988-27990	24	
172-86	27991-27992	|	
172-87	27993-28000	Product	
172-88	28001-28003	24	
172-89	28004-28006	25	
172-90	28007-28008	|	
172-91	28009-28016	Product	
172-92	28017-28019	25	
172-93	28020-28022	26	
172-94	28023-28024	|	
172-95	28025-28032	Product	
172-96	28033-28035	26	
172-97	28036-28038	27	
172-98	28039-28040	|	
172-99	28041-28048	Product	
172-100	28049-28051	27	
172-101	28052-28054	28	
172-102	28055-28056	|	
172-103	28057-28064	Product	
172-104	28065-28067	28	
172-105	28068-28070	29	
172-106	28071-28072	|	
172-107	28073-28080	Product	
172-108	28081-28083	29	
172-109	28084-28086	30	
172-110	28087-28088	|	
172-111	28089-28096	Product	
172-112	28097-28099	30	
172-113	28100-28105	Going	
172-114	28106-28110	from	
172-115	28111-28115	page	
172-116	28116-28121	three	
172-117	28122-28124	to	
172-118	28125-28129	page	
172-119	28130-28133	two	
172-120	28133-28134	:	
172-121	28135-28136	(	
172-122	28136-28144	Remember	
172-123	28144-28145	,	
172-124	28146-28150	when	
172-125	28151-28157	paging	
172-126	28158-28166	backward	
172-127	28166-28167	,	
172-128	28168-28171	the	
172-129	28172-28177	first	
172-130	28178-28181	row	
172-131	28182-28183	(	
172-132	28183-28186	e.g	
172-133	28186-28187	.	
172-134	28187-28188	,	
172-135	28189-28191	20	
172-136	28191-28192	)	
172-137	28193-28195	is	
172-138	28196-28200	used	
172-139	28201-28203	as	
172-140	28204-28205	a	
172-141	28206-28212	marker	
172-142	28213-28215	to	
172-143	28216-28224	indicate	
172-144	28225-28227	if	
172-145	28228-28235	another	
172-146	28236-28244	previous	
172-147	28245-28249	page	
172-148	28250-28256	exists	
172-149	28256-28257	.	
172-150	28257-28258	)	

#Text=WITH page AS
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id < 21
#Text=LIMIT 11
#Text=SELECT product_id, description
#Text=FROM page
#Text=ORDER BY product_id;
#Text=product_id | description
#Text=------------+-------------
#Text=10 | Product 10
#Text=11 | Product 11
#Text=12 | Product 12
#Text=13 | Product 13
#Text=14 | Product 14
#Text=15 | Product 15
#Text=16 | Product 16
#Text=17 | Product 17
#Text=18 | Product 18
#Text=19 | Product 19
#Text=20 | Product 20
#Text=Trying to view page one causes the problem outlined in the previous blog post because only eight rows are returned:
#Text=WITH page AS
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id < 11
#Text=ORDER BY product_id DESC
#Text=LIMIT 11
#Text=SELECT product_id, description
#Text=FROM page
#Text=ORDER BY product_id;
#Text=product_id | description
#Text=------------+-------------
#Text=1 | Product 1
#Text=2 | Product 2
#Text=3 | Product 3
#Text=6 | Product 6
#Text=7 | Product 7
#Text=8 | Product 8
#Text=9 | Product 9
#Text=10 | Product 10
#Text=This is where it is suggested that the first page be regenerated in its entirety, and the user informed:
#Text=SELECT product_id, description
#Text=FROM product
#Text=ORDER BY product_id
#Text=LIMIT 11;
#Text=product_id | description
#Text=------------+-------------
#Text=1 | Product 1
#Text=2 | Product 2
#Text=3 | Product 3
#Text=6 | Product 6
#Text=7 | Product 7
#Text=8 | Product 8
#Text=9 | Product 9
#Text=10 | Product 10
#Text=11 | Product 11
#Text=12 | Product 12
#Text=13 | Product 13
#Text=Page two would be generated using the new rows from page one:
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id > 12
#Text=ORDER BY product_id
#Text=LIMIT 11;
#Text=product_id | description
#Text=------------+-------------
#Text=13 | Product 13
#Text=14 | Product 14
#Text=15 | Product 15
#Text=16 | Product 16
#Text=17 | Product 17
#Text=18 | Product 18
#Text=19 | Product 19
#Text=20 | Product 20
#Text=21 | Product 21
#Text=22 | Product 22
#Text=23 | Product 23
#Text=Non-sort key updates are uninteresting.
173-1	28259-28263	WITH	
173-2	28264-28268	page	
173-3	28269-28271	AS	
173-4	28272-28278	SELECT	
173-5	28279-28289	product_id	
173-6	28289-28290	,	
173-7	28291-28302	description	
173-8	28303-28307	FROM	
173-9	28308-28315	product	
173-10	28316-28321	WHERE	
173-11	28322-28332	product_id	
173-12	28333-28334	<	
173-13	28335-28337	21	
173-14	28338-28343	LIMIT	
173-15	28344-28346	11	
173-16	28347-28353	SELECT	
173-17	28354-28364	product_id	
173-18	28364-28365	,	
173-19	28366-28377	description	
173-20	28378-28382	FROM	
173-21	28383-28387	page	
173-22	28388-28393	ORDER	
173-23	28394-28396	BY	
173-24	28397-28407	product_id	
173-25	28407-28408	;	
173-26	28409-28419	product_id	
173-27	28420-28421	|	
173-28	28422-28433	description	
173-29	28434-28435	-	
173-30	28435-28436	-	
173-31	28436-28437	-	
173-32	28437-28438	-	
173-33	28438-28439	-	
173-34	28439-28440	-	
173-35	28440-28441	-	
173-36	28441-28442	-	
173-37	28442-28443	-	
173-38	28443-28444	-	
173-39	28444-28445	-	
173-40	28445-28446	-	
173-41	28446-28447	+	
173-42	28447-28448	-	
173-43	28448-28449	-	
173-44	28449-28450	-	
173-45	28450-28451	-	
173-46	28451-28452	-	
173-47	28452-28453	-	
173-48	28453-28454	-	
173-49	28454-28455	-	
173-50	28455-28456	-	
173-51	28456-28457	-	
173-52	28457-28458	-	
173-53	28458-28459	-	
173-54	28459-28460	-	
173-55	28461-28463	10	
173-56	28464-28465	|	
173-57	28466-28473	Product	
173-58	28474-28476	10	
173-59	28477-28479	11	
173-60	28480-28481	|	
173-61	28482-28489	Product	
173-62	28490-28492	11	
173-63	28493-28495	12	
173-64	28496-28497	|	
173-65	28498-28505	Product	
173-66	28506-28508	12	
173-67	28509-28511	13	
173-68	28512-28513	|	
173-69	28514-28521	Product	
173-70	28522-28524	13	
173-71	28525-28527	14	
173-72	28528-28529	|	
173-73	28530-28537	Product	
173-74	28538-28540	14	
173-75	28541-28543	15	
173-76	28544-28545	|	
173-77	28546-28553	Product	
173-78	28554-28556	15	
173-79	28557-28559	16	
173-80	28560-28561	|	
173-81	28562-28569	Product	
173-82	28570-28572	16	
173-83	28573-28575	17	
173-84	28576-28577	|	
173-85	28578-28585	Product	
173-86	28586-28588	17	
173-87	28589-28591	18	
173-88	28592-28593	|	
173-89	28594-28601	Product	
173-90	28602-28604	18	
173-91	28605-28607	19	
173-92	28608-28609	|	
173-93	28610-28617	Product	
173-94	28618-28620	19	
173-95	28621-28623	20	
173-96	28624-28625	|	
173-97	28626-28633	Product	
173-98	28634-28636	20	
173-99	28637-28643	Trying	
173-100	28644-28646	to	
173-101	28647-28651	view	
173-102	28652-28656	page	
173-103	28657-28660	one	
173-104	28661-28667	causes	
173-105	28668-28671	the	
173-106	28672-28679	problem	
173-107	28680-28688	outlined	
173-108	28689-28691	in	
173-109	28692-28695	the	
173-110	28696-28704	previous	
173-111	28705-28709	blog	
173-112	28710-28714	post	
173-113	28715-28722	because	
173-114	28723-28727	only	
173-115	28728-28733	eight	
173-116	28734-28738	rows	
173-117	28739-28742	are	
173-118	28743-28751	returned	
173-119	28751-28752	:	
173-120	28753-28757	WITH	
173-121	28758-28762	page	
173-122	28763-28765	AS	
173-123	28766-28772	SELECT	
173-124	28773-28783	product_id	
173-125	28783-28784	,	
173-126	28785-28796	description	
173-127	28797-28801	FROM	
173-128	28802-28809	product	
173-129	28810-28815	WHERE	
173-130	28816-28826	product_id	
173-131	28827-28828	<	
173-132	28829-28831	11	
173-133	28832-28837	ORDER	
173-134	28838-28840	BY	
173-135	28841-28851	product_id	
173-136	28852-28856	DESC	
173-137	28857-28862	LIMIT	
173-138	28863-28865	11	
173-139	28866-28872	SELECT	
173-140	28873-28883	product_id	
173-141	28883-28884	,	
173-142	28885-28896	description	
173-143	28897-28901	FROM	
173-144	28902-28906	page	
173-145	28907-28912	ORDER	
173-146	28913-28915	BY	
173-147	28916-28926	product_id	
173-148	28926-28927	;	
173-149	28928-28938	product_id	
173-150	28939-28940	|	
173-151	28941-28952	description	
173-152	28953-28954	-	
173-153	28954-28955	-	
173-154	28955-28956	-	
173-155	28956-28957	-	
173-156	28957-28958	-	
173-157	28958-28959	-	
173-158	28959-28960	-	
173-159	28960-28961	-	
173-160	28961-28962	-	
173-161	28962-28963	-	
173-162	28963-28964	-	
173-163	28964-28965	-	
173-164	28965-28966	+	
173-165	28966-28967	-	
173-166	28967-28968	-	
173-167	28968-28969	-	
173-168	28969-28970	-	
173-169	28970-28971	-	
173-170	28971-28972	-	
173-171	28972-28973	-	
173-172	28973-28974	-	
173-173	28974-28975	-	
173-174	28975-28976	-	
173-175	28976-28977	-	
173-176	28977-28978	-	
173-177	28978-28979	-	
173-178	28980-28981	1	
173-179	28982-28983	|	
173-180	28984-28991	Product	
173-181	28992-28993	1	
173-182	28994-28995	2	
173-183	28996-28997	|	
173-184	28998-29005	Product	
173-185	29006-29007	2	
173-186	29008-29009	3	
173-187	29010-29011	|	
173-188	29012-29019	Product	
173-189	29020-29021	3	
173-190	29022-29023	6	
173-191	29024-29025	|	
173-192	29026-29033	Product	
173-193	29034-29035	6	
173-194	29036-29037	7	
173-195	29038-29039	|	
173-196	29040-29047	Product	
173-197	29048-29049	7	
173-198	29050-29051	8	
173-199	29052-29053	|	
173-200	29054-29061	Product	
173-201	29062-29063	8	
173-202	29064-29065	9	
173-203	29066-29067	|	
173-204	29068-29075	Product	
173-205	29076-29077	9	
173-206	29078-29080	10	
173-207	29081-29082	|	
173-208	29083-29090	Product	
173-209	29091-29093	10	
173-210	29094-29098	This	
173-211	29099-29101	is	
173-212	29102-29107	where	
173-213	29108-29110	it	
173-214	29111-29113	is	
173-215	29114-29123	suggested	
173-216	29124-29128	that	
173-217	29129-29132	the	
173-218	29133-29138	first	
173-219	29139-29143	page	
173-220	29144-29146	be	
173-221	29147-29158	regenerated	
173-222	29159-29161	in	
173-223	29162-29165	its	
173-224	29166-29174	entirety	
173-225	29174-29175	,	
173-226	29176-29179	and	
173-227	29180-29183	the	
173-228	29184-29188	user	
173-229	29189-29197	informed	
173-230	29197-29198	:	
173-231	29199-29205	SELECT	
173-232	29206-29216	product_id	
173-233	29216-29217	,	
173-234	29218-29229	description	
173-235	29230-29234	FROM	
173-236	29235-29242	product	
173-237	29243-29248	ORDER	
173-238	29249-29251	BY	
173-239	29252-29262	product_id	
173-240	29263-29268	LIMIT	
173-241	29269-29271	11	
173-242	29271-29272	;	
173-243	29273-29283	product_id	
173-244	29284-29285	|	
173-245	29286-29297	description	
173-246	29298-29299	-	
173-247	29299-29300	-	
173-248	29300-29301	-	
173-249	29301-29302	-	
173-250	29302-29303	-	
173-251	29303-29304	-	
173-252	29304-29305	-	
173-253	29305-29306	-	
173-254	29306-29307	-	
173-255	29307-29308	-	
173-256	29308-29309	-	
173-257	29309-29310	-	
173-258	29310-29311	+	
173-259	29311-29312	-	
173-260	29312-29313	-	
173-261	29313-29314	-	
173-262	29314-29315	-	
173-263	29315-29316	-	
173-264	29316-29317	-	
173-265	29317-29318	-	
173-266	29318-29319	-	
173-267	29319-29320	-	
173-268	29320-29321	-	
173-269	29321-29322	-	
173-270	29322-29323	-	
173-271	29323-29324	-	
173-272	29325-29326	1	
173-273	29327-29328	|	
173-274	29329-29336	Product	
173-275	29337-29338	1	
173-276	29339-29340	2	
173-277	29341-29342	|	
173-278	29343-29350	Product	
173-279	29351-29352	2	
173-280	29353-29354	3	
173-281	29355-29356	|	
173-282	29357-29364	Product	
173-283	29365-29366	3	
173-284	29367-29368	6	
173-285	29369-29370	|	
173-286	29371-29378	Product	
173-287	29379-29380	6	
173-288	29381-29382	7	
173-289	29383-29384	|	
173-290	29385-29392	Product	
173-291	29393-29394	7	
173-292	29395-29396	8	
173-293	29397-29398	|	
173-294	29399-29406	Product	
173-295	29407-29408	8	
173-296	29409-29410	9	
173-297	29411-29412	|	
173-298	29413-29420	Product	
173-299	29421-29422	9	
173-300	29423-29425	10	
173-301	29426-29427	|	
173-302	29428-29435	Product	
173-303	29436-29438	10	
173-304	29439-29441	11	
173-305	29442-29443	|	
173-306	29444-29451	Product	
173-307	29452-29454	11	
173-308	29455-29457	12	
173-309	29458-29459	|	
173-310	29460-29467	Product	
173-311	29468-29470	12	
173-312	29471-29473	13	
173-313	29474-29475	|	
173-314	29476-29483	Product	
173-315	29484-29486	13	
173-316	29487-29491	Page	
173-317	29492-29495	two	
173-318	29496-29501	would	
173-319	29502-29504	be	
173-320	29505-29514	generated	
173-321	29515-29520	using	
173-322	29521-29524	the	
173-323	29525-29528	new	
173-324	29529-29533	rows	
173-325	29534-29538	from	
173-326	29539-29543	page	
173-327	29544-29547	one	
173-328	29547-29548	:	
173-329	29549-29555	SELECT	
173-330	29556-29566	product_id	
173-331	29566-29567	,	
173-332	29568-29579	description	
173-333	29580-29584	FROM	
173-334	29585-29592	product	
173-335	29593-29598	WHERE	
173-336	29599-29609	product_id	
173-337	29610-29611	>	
173-338	29612-29614	12	
173-339	29615-29620	ORDER	
173-340	29621-29623	BY	
173-341	29624-29634	product_id	
173-342	29635-29640	LIMIT	
173-343	29641-29643	11	
173-344	29643-29644	;	
173-345	29645-29655	product_id	
173-346	29656-29657	|	
173-347	29658-29669	description	
173-348	29670-29671	-	
173-349	29671-29672	-	
173-350	29672-29673	-	
173-351	29673-29674	-	
173-352	29674-29675	-	
173-353	29675-29676	-	
173-354	29676-29677	-	
173-355	29677-29678	-	
173-356	29678-29679	-	
173-357	29679-29680	-	
173-358	29680-29681	-	
173-359	29681-29682	-	
173-360	29682-29683	+	
173-361	29683-29684	-	
173-362	29684-29685	-	
173-363	29685-29686	-	
173-364	29686-29687	-	
173-365	29687-29688	-	
173-366	29688-29689	-	
173-367	29689-29690	-	
173-368	29690-29691	-	
173-369	29691-29692	-	
173-370	29692-29693	-	
173-371	29693-29694	-	
173-372	29694-29695	-	
173-373	29695-29696	-	
173-374	29697-29699	13	
173-375	29700-29701	|	
173-376	29702-29709	Product	
173-377	29710-29712	13	
173-378	29713-29715	14	
173-379	29716-29717	|	
173-380	29718-29725	Product	
173-381	29726-29728	14	
173-382	29729-29731	15	
173-383	29732-29733	|	
173-384	29734-29741	Product	
173-385	29742-29744	15	
173-386	29745-29747	16	
173-387	29748-29749	|	
173-388	29750-29757	Product	
173-389	29758-29760	16	
173-390	29761-29763	17	
173-391	29764-29765	|	
173-392	29766-29773	Product	
173-393	29774-29776	17	
173-394	29777-29779	18	
173-395	29780-29781	|	
173-396	29782-29789	Product	
173-397	29790-29792	18	
173-398	29793-29795	19	
173-399	29796-29797	|	
173-400	29798-29805	Product	
173-401	29806-29808	19	
173-402	29809-29811	20	
173-403	29812-29813	|	
173-404	29814-29821	Product	
173-405	29822-29824	20	
173-406	29825-29827	21	
173-407	29828-29829	|	
173-408	29830-29837	Product	
173-409	29838-29840	21	
173-410	29841-29843	22	
173-411	29844-29845	|	
173-412	29846-29853	Product	
173-413	29854-29856	22	
173-414	29857-29859	23	
173-415	29860-29861	|	
173-416	29862-29869	Product	
173-417	29870-29872	23	
173-418	29873-29881	Non-sort	
173-419	29882-29885	key	
173-420	29886-29893	updates	
173-421	29894-29897	are	
173-422	29898-29911	uninteresting	
173-423	29911-29912	.	

#Text=Primary key updates can easily cause rows from earlier pages to appear on later pages, or rows from later pages to appear on earlier previous pages, if
#Text=the primary key is updated across the current page view result set.
174-1	29913-29920	Primary	
174-2	29921-29924	key	
174-3	29925-29932	updates	
174-4	29933-29936	can	
174-5	29937-29943	easily	
174-6	29944-29949	cause	
174-7	29950-29954	rows	
174-8	29955-29959	from	
174-9	29960-29967	earlier	
174-10	29968-29973	pages	
174-11	29974-29976	to	
174-12	29977-29983	appear	
174-13	29984-29986	on	
174-14	29987-29992	later	
174-15	29993-29998	pages	
174-16	29998-29999	,	
174-17	30000-30002	or	
174-18	30003-30007	rows	
174-19	30008-30012	from	
174-20	30013-30018	later	
174-21	30019-30024	pages	
174-22	30025-30027	to	
174-23	30028-30034	appear	
174-24	30035-30037	on	
174-25	30038-30045	earlier	
174-26	30046-30054	previous	
174-27	30055-30060	pages	
174-28	30060-30061	,	
174-29	30062-30064	if	
174-30	30065-30068	the	
174-31	30069-30076	primary	
174-32	30077-30080	key	
174-33	30081-30083	is	
174-34	30084-30091	updated	
174-35	30092-30098	across	
174-36	30099-30102	the	
174-37	30103-30110	current	
174-38	30111-30115	page	
174-39	30116-30120	view	
174-40	30121-30127	result	
174-41	30128-30131	set	
174-42	30131-30132	.	

#Text=Let's show the page previous to page two before and after two updates:
#Text=WITH page AS
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id < 13
#Text=ORDER BY product_id DESC
#Text=LIMIT 11
#Text=SELECT product_id, description
#Text=FROM page
#Text=ORDER BY product_id;
#Text=product_id | description
#Text=------------+-------------
#Text=1 | Product 1
#Text=2 | Product 2
#Text=3 | Product 3
#Text=6 | Product 6
#Text=7 | Product 7
#Text=8 | Product 8
#Text=9 | Product 9
#Text=10 | Product 10
#Text=11 | Product 11
#Text=12 | Product 12
#Text=UPDATE product SET product_id = 4 WHERE product_id = 14;
#Text=UPDATE product SET product_id = 5 WHERE product_id = 15;
#Text=WITH page AS
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id < 13
#Text=ORDER BY product_id DESC
#Text=LIMIT 11
#Text=SELECT product_id, description
#Text=FROM page
#Text=ORDER BY product_id;
#Text=product_id | description
#Text=------------+-------------
#Text=2 | Product 2
#Text=3 | Product 3
#Text=4 | Product 14
#Text=5 | Product 15
#Text=6 | Product 6
#Text=7 | Product 7
#Text=8 | Product 8
#Text=9 | Product 9
#Text=10 | Product 10
#Text=11 | Product 11
#Text=12 | Product 12
#Text=This causes the problem, also outlined in the previous blog post, where a query of the first page returns 11 rows, meaning the first page results should be recreated and the user informed:
#Text=SELECT product_id, description
#Text=FROM product
#Text=ORDER BY product_id
#Text=LIMIT 11;
#Text=product_id | description
#Text=------------+-------------
#Text=1 | Product 1
#Text=2 | Product 2
#Text=3 | Product 3
#Text=4 | Product 14
#Text=5 | Product 15
#Text=6 | Product 6
#Text=7 | Product 7
#Text=8 | Product 8
#Text=9 | Product 9
#Text=10 | Product 10
#Text=11 | Product 11
#Text=Hopefully this blog post gives you an idea of how keyset pagination behaves in an environment where the result set is changing between page requests.
175-1	30133-30138	Let's	
175-2	30139-30143	show	
175-3	30144-30147	the	
175-4	30148-30152	page	
175-5	30153-30161	previous	
175-6	30162-30164	to	
175-7	30165-30169	page	
175-8	30170-30173	two	
175-9	30174-30180	before	
175-10	30181-30184	and	
175-11	30185-30190	after	
175-12	30191-30194	two	
175-13	30195-30202	updates	
175-14	30202-30203	:	
175-15	30204-30208	WITH	
175-16	30209-30213	page	
175-17	30214-30216	AS	
175-18	30217-30223	SELECT	
175-19	30224-30234	product_id	
175-20	30234-30235	,	
175-21	30236-30247	description	
175-22	30248-30252	FROM	
175-23	30253-30260	product	
175-24	30261-30266	WHERE	
175-25	30267-30277	product_id	
175-26	30278-30279	<	
175-27	30280-30282	13	
175-28	30283-30288	ORDER	
175-29	30289-30291	BY	
175-30	30292-30302	product_id	
175-31	30303-30307	DESC	
175-32	30308-30313	LIMIT	
175-33	30314-30316	11	
175-34	30317-30323	SELECT	
175-35	30324-30334	product_id	
175-36	30334-30335	,	
175-37	30336-30347	description	
175-38	30348-30352	FROM	
175-39	30353-30357	page	
175-40	30358-30363	ORDER	
175-41	30364-30366	BY	
175-42	30367-30377	product_id	
175-43	30377-30378	;	
175-44	30379-30389	product_id	
175-45	30390-30391	|	
175-46	30392-30403	description	
175-47	30404-30405	-	
175-48	30405-30406	-	
175-49	30406-30407	-	
175-50	30407-30408	-	
175-51	30408-30409	-	
175-52	30409-30410	-	
175-53	30410-30411	-	
175-54	30411-30412	-	
175-55	30412-30413	-	
175-56	30413-30414	-	
175-57	30414-30415	-	
175-58	30415-30416	-	
175-59	30416-30417	+	
175-60	30417-30418	-	
175-61	30418-30419	-	
175-62	30419-30420	-	
175-63	30420-30421	-	
175-64	30421-30422	-	
175-65	30422-30423	-	
175-66	30423-30424	-	
175-67	30424-30425	-	
175-68	30425-30426	-	
175-69	30426-30427	-	
175-70	30427-30428	-	
175-71	30428-30429	-	
175-72	30429-30430	-	
175-73	30431-30432	1	
175-74	30433-30434	|	
175-75	30435-30442	Product	
175-76	30443-30444	1	
175-77	30445-30446	2	
175-78	30447-30448	|	
175-79	30449-30456	Product	
175-80	30457-30458	2	
175-81	30459-30460	3	
175-82	30461-30462	|	
175-83	30463-30470	Product	
175-84	30471-30472	3	
175-85	30473-30474	6	
175-86	30475-30476	|	
175-87	30477-30484	Product	
175-88	30485-30486	6	
175-89	30487-30488	7	
175-90	30489-30490	|	
175-91	30491-30498	Product	
175-92	30499-30500	7	
175-93	30501-30502	8	
175-94	30503-30504	|	
175-95	30505-30512	Product	
175-96	30513-30514	8	
175-97	30515-30516	9	
175-98	30517-30518	|	
175-99	30519-30526	Product	
175-100	30527-30528	9	
175-101	30529-30531	10	
175-102	30532-30533	|	
175-103	30534-30541	Product	
175-104	30542-30544	10	
175-105	30545-30547	11	
175-106	30548-30549	|	
175-107	30550-30557	Product	
175-108	30558-30560	11	
175-109	30561-30563	12	
175-110	30564-30565	|	
175-111	30566-30573	Product	
175-112	30574-30576	12	
175-113	30577-30583	UPDATE	
175-114	30584-30591	product	
175-115	30592-30595	SET	
175-116	30596-30606	product_id	
175-117	30607-30608	=	
175-118	30609-30610	4	
175-119	30611-30616	WHERE	
175-120	30617-30627	product_id	
175-121	30628-30629	=	
175-122	30630-30632	14	
175-123	30632-30633	;	
175-124	30634-30640	UPDATE	
175-125	30641-30648	product	
175-126	30649-30652	SET	
175-127	30653-30663	product_id	
175-128	30664-30665	=	
175-129	30666-30667	5	
175-130	30668-30673	WHERE	
175-131	30674-30684	product_id	
175-132	30685-30686	=	
175-133	30687-30689	15	
175-134	30689-30690	;	
175-135	30691-30695	WITH	
175-136	30696-30700	page	
175-137	30701-30703	AS	
175-138	30704-30710	SELECT	
175-139	30711-30721	product_id	
175-140	30721-30722	,	
175-141	30723-30734	description	
175-142	30735-30739	FROM	
175-143	30740-30747	product	
175-144	30748-30753	WHERE	
175-145	30754-30764	product_id	
175-146	30765-30766	<	
175-147	30767-30769	13	
175-148	30770-30775	ORDER	
175-149	30776-30778	BY	
175-150	30779-30789	product_id	
175-151	30790-30794	DESC	
175-152	30795-30800	LIMIT	
175-153	30801-30803	11	
175-154	30804-30810	SELECT	
175-155	30811-30821	product_id	
175-156	30821-30822	,	
175-157	30823-30834	description	
175-158	30835-30839	FROM	
175-159	30840-30844	page	
175-160	30845-30850	ORDER	
175-161	30851-30853	BY	
175-162	30854-30864	product_id	
175-163	30864-30865	;	
175-164	30866-30876	product_id	
175-165	30877-30878	|	
175-166	30879-30890	description	
175-167	30891-30892	-	
175-168	30892-30893	-	
175-169	30893-30894	-	
175-170	30894-30895	-	
175-171	30895-30896	-	
175-172	30896-30897	-	
175-173	30897-30898	-	
175-174	30898-30899	-	
175-175	30899-30900	-	
175-176	30900-30901	-	
175-177	30901-30902	-	
175-178	30902-30903	-	
175-179	30903-30904	+	
175-180	30904-30905	-	
175-181	30905-30906	-	
175-182	30906-30907	-	
175-183	30907-30908	-	
175-184	30908-30909	-	
175-185	30909-30910	-	
175-186	30910-30911	-	
175-187	30911-30912	-	
175-188	30912-30913	-	
175-189	30913-30914	-	
175-190	30914-30915	-	
175-191	30915-30916	-	
175-192	30916-30917	-	
175-193	30918-30919	2	
175-194	30920-30921	|	
175-195	30922-30929	Product	
175-196	30930-30931	2	
175-197	30932-30933	3	
175-198	30934-30935	|	
175-199	30936-30943	Product	
175-200	30944-30945	3	
175-201	30946-30947	4	
175-202	30948-30949	|	
175-203	30950-30957	Product	
175-204	30958-30960	14	
175-205	30961-30962	5	
175-206	30963-30964	|	
175-207	30965-30972	Product	
175-208	30973-30975	15	
175-209	30976-30977	6	
175-210	30978-30979	|	
175-211	30980-30987	Product	
175-212	30988-30989	6	
175-213	30990-30991	7	
175-214	30992-30993	|	
175-215	30994-31001	Product	
175-216	31002-31003	7	
175-217	31004-31005	8	
175-218	31006-31007	|	
175-219	31008-31015	Product	
175-220	31016-31017	8	
175-221	31018-31019	9	
175-222	31020-31021	|	
175-223	31022-31029	Product	
175-224	31030-31031	9	
175-225	31032-31034	10	
175-226	31035-31036	|	
175-227	31037-31044	Product	
175-228	31045-31047	10	
175-229	31048-31050	11	
175-230	31051-31052	|	
175-231	31053-31060	Product	
175-232	31061-31063	11	
175-233	31064-31066	12	
175-234	31067-31068	|	
175-235	31069-31076	Product	
175-236	31077-31079	12	
175-237	31080-31084	This	
175-238	31085-31091	causes	
175-239	31092-31095	the	
175-240	31096-31103	problem	
175-241	31103-31104	,	
175-242	31105-31109	also	
175-243	31110-31118	outlined	
175-244	31119-31121	in	
175-245	31122-31125	the	
175-246	31126-31134	previous	
175-247	31135-31139	blog	
175-248	31140-31144	post	
175-249	31144-31145	,	
175-250	31146-31151	where	
175-251	31152-31153	a	
175-252	31154-31159	query	
175-253	31160-31162	of	
175-254	31163-31166	the	
175-255	31167-31172	first	
175-256	31173-31177	page	
175-257	31178-31185	returns	
175-258	31186-31188	11	
175-259	31189-31193	rows	
175-260	31193-31194	,	
175-261	31195-31202	meaning	
175-262	31203-31206	the	
175-263	31207-31212	first	
175-264	31213-31217	page	
175-265	31218-31225	results	
175-266	31226-31232	should	
175-267	31233-31235	be	
175-268	31236-31245	recreated	
175-269	31246-31249	and	
175-270	31250-31253	the	
175-271	31254-31258	user	
175-272	31259-31267	informed	
175-273	31267-31268	:	
175-274	31269-31275	SELECT	
175-275	31276-31286	product_id	
175-276	31286-31287	,	
175-277	31288-31299	description	
175-278	31300-31304	FROM	
175-279	31305-31312	product	
175-280	31313-31318	ORDER	
175-281	31319-31321	BY	
175-282	31322-31332	product_id	
175-283	31333-31338	LIMIT	
175-284	31339-31341	11	
175-285	31341-31342	;	
175-286	31343-31353	product_id	
175-287	31354-31355	|	
175-288	31356-31367	description	
175-289	31368-31369	-	
175-290	31369-31370	-	
175-291	31370-31371	-	
175-292	31371-31372	-	
175-293	31372-31373	-	
175-294	31373-31374	-	
175-295	31374-31375	-	
175-296	31375-31376	-	
175-297	31376-31377	-	
175-298	31377-31378	-	
175-299	31378-31379	-	
175-300	31379-31380	-	
175-301	31380-31381	+	
175-302	31381-31382	-	
175-303	31382-31383	-	
175-304	31383-31384	-	
175-305	31384-31385	-	
175-306	31385-31386	-	
175-307	31386-31387	-	
175-308	31387-31388	-	
175-309	31388-31389	-	
175-310	31389-31390	-	
175-311	31390-31391	-	
175-312	31391-31392	-	
175-313	31392-31393	-	
175-314	31393-31394	-	
175-315	31395-31396	1	
175-316	31397-31398	|	
175-317	31399-31406	Product	
175-318	31407-31408	1	
175-319	31409-31410	2	
175-320	31411-31412	|	
175-321	31413-31420	Product	
175-322	31421-31422	2	
175-323	31423-31424	3	
175-324	31425-31426	|	
175-325	31427-31434	Product	
175-326	31435-31436	3	
175-327	31437-31438	4	
175-328	31439-31440	|	
175-329	31441-31448	Product	
175-330	31449-31451	14	
175-331	31452-31453	5	
175-332	31454-31455	|	
175-333	31456-31463	Product	
175-334	31464-31466	15	
175-335	31467-31468	6	
175-336	31469-31470	|	
175-337	31471-31478	Product	
175-338	31479-31480	6	
175-339	31481-31482	7	
175-340	31483-31484	|	
175-341	31485-31492	Product	
175-342	31493-31494	7	
175-343	31495-31496	8	
175-344	31497-31498	|	
175-345	31499-31506	Product	
175-346	31507-31508	8	
175-347	31509-31510	9	
175-348	31511-31512	|	
175-349	31513-31520	Product	
175-350	31521-31522	9	
175-351	31523-31525	10	
175-352	31526-31527	|	
175-353	31528-31535	Product	
175-354	31536-31538	10	
175-355	31539-31541	11	
175-356	31542-31543	|	
175-357	31544-31551	Product	
175-358	31552-31554	11	
175-359	31555-31564	Hopefully	
175-360	31565-31569	this	
175-361	31570-31574	blog	
175-362	31575-31579	post	
175-363	31580-31585	gives	
175-364	31586-31589	you	
175-365	31590-31592	an	
175-366	31593-31597	idea	
175-367	31598-31600	of	
175-368	31601-31604	how	
175-369	31605-31611	keyset	
175-370	31612-31622	pagination	
175-371	31623-31630	behaves	
175-372	31631-31633	in	
175-373	31634-31636	an	
175-374	31637-31648	environment	
175-375	31649-31654	where	
175-376	31655-31658	the	
175-377	31659-31665	result	
175-378	31666-31669	set	
175-379	31670-31672	is	
175-380	31673-31681	changing	
175-381	31682-31689	between	
175-382	31690-31694	page	
175-383	31695-31703	requests	
175-384	31703-31704	.	

#Text=View or Post Comments
#Text=Keyset Pagination
#Text=Wednesday, August 12, 2020
#Text=Having covered pagination in a previous blog post, I want to explore method #5, limit/offset and where, also called
#Text=keyset or seek pagination.
176-1	31705-31709	View	
176-2	31710-31712	or	
176-3	31713-31717	Post	
176-4	31718-31726	Comments	
176-5	31727-31733	Keyset	
176-6	31734-31744	Pagination	
176-7	31745-31754	Wednesday	
176-8	31754-31755	,	
176-9	31756-31762	August	
176-10	31763-31765	12	
176-11	31765-31766	,	
176-12	31767-31771	2020	
176-13	31772-31778	Having	
176-14	31779-31786	covered	
176-15	31787-31797	pagination	
176-16	31798-31800	in	
176-17	31801-31802	a	
176-18	31803-31811	previous	
176-19	31812-31816	blog	
176-20	31817-31821	post	
176-21	31821-31822	,	
176-22	31823-31824	I	
176-23	31825-31829	want	
176-24	31830-31832	to	
176-25	31833-31840	explore	
176-26	31841-31847	method	
176-27	31848-31850	#5	
176-28	31850-31851	,	
176-29	31852-31857	limit	
176-30	31857-31858	/	
176-31	31858-31864	offset	
176-32	31865-31868	and	
176-33	31869-31874	where	
176-34	31874-31875	,	
176-35	31876-31880	also	
176-36	31881-31887	called	
176-37	31888-31894	keyset	
176-38	31895-31897	or	
176-39	31898-31902	seek	
176-40	31903-31913	pagination	
176-41	31913-31914	.	

#Text=This method avoids many of the performance pitfalls and inconsistent results of the other methods, but it comes with its own complexities.
177-1	31915-31919	This	
177-2	31920-31926	method	
177-3	31927-31933	avoids	
177-4	31934-31938	many	
177-5	31939-31941	of	
177-6	31942-31945	the	
177-7	31946-31957	performance	
177-8	31958-31966	pitfalls	
177-9	31967-31970	and	
177-10	31971-31983	inconsistent	
177-11	31984-31991	results	
177-12	31992-31994	of	
177-13	31995-31998	the	
177-14	31999-32004	other	
177-15	32005-32012	methods	
177-16	32012-32013	,	
177-17	32014-32017	but	
177-18	32018-32020	it	
177-19	32021-32026	comes	
177-20	32027-32031	with	
177-21	32032-32035	its	
177-22	32036-32039	own	
177-23	32040-32052	complexities	
177-24	32052-32053	.	

#Text=First, let's set expectations.
178-1	32054-32059	First	
178-2	32059-32060	,	
178-3	32061-32066	let's	
178-4	32067-32070	set	
178-5	32071-32083	expectations	
178-6	32083-32084	.	

#Text=Let's assume ten results per page, so each page should show ten results, except for the last page, which can contain 1–10 results.
179-1	32085-32090	Let's	
179-2	32091-32097	assume	
179-3	32098-32101	ten	
179-4	32102-32109	results	
179-5	32110-32113	per	
179-6	32114-32118	page	
179-7	32118-32119	,	
179-8	32120-32122	so	
179-9	32123-32127	each	
179-10	32128-32132	page	
179-11	32133-32139	should	
179-12	32140-32144	show	
179-13	32145-32148	ten	
179-14	32149-32156	results	
179-15	32156-32157	,	
179-16	32158-32164	except	
179-17	32165-32168	for	
179-18	32169-32172	the	
179-19	32173-32177	last	
179-20	32178-32182	page	
179-21	32182-32183	,	
179-22	32184-32189	which	
179-23	32190-32193	can	
179-24	32194-32201	contain	
179-25	32202-32203	1	
179-26	32203-32204	–	
179-27	32204-32206	10	
179-28	32207-32214	results	
179-29	32214-32215	.	

#Text=The last page should ideally
#Text=not show zero results.
180-1	32216-32219	The	
180-2	32220-32224	last	
180-3	32225-32229	page	
180-4	32230-32236	should	
180-5	32237-32244	ideally	
180-6	32245-32248	not	
180-7	32249-32253	show	
180-8	32254-32258	zero	
180-9	32259-32266	results	
180-10	32266-32267	.	

#Text=Let's also suppose we are displaying products, and the page results are ordered by a unique product id.
181-1	32268-32273	Let's	
181-2	32274-32278	also	
181-3	32279-32286	suppose	
181-4	32287-32289	we	
181-5	32290-32293	are	
181-6	32294-32304	displaying	
181-7	32305-32313	products	
181-8	32313-32314	,	
181-9	32315-32318	and	
181-10	32319-32322	the	
181-11	32323-32327	page	
181-12	32328-32335	results	
181-13	32336-32339	are	
181-14	32340-32347	ordered	
181-15	32348-32350	by	
181-16	32351-32352	a	
181-17	32353-32359	unique	
181-18	32360-32367	product	
181-19	32368-32370	id	
181-20	32370-32371	.	

#Text=Here is a sample table:
#Text=CREATE TABLE product (product_id SERIAL PRIMARY KEY, description TEXT);
#Text=INSERT INTO product
#Text=SELECT id, 'Product ' || id::TEXT
#Text=FROM generate_series(1, 100) AS t(id);
#Text=Generating the first page is quite simple using limit.
182-1	32372-32376	Here	
182-2	32377-32379	is	
182-3	32380-32381	a	
182-4	32382-32388	sample	
182-5	32389-32394	table	
182-6	32394-32395	:	
182-7	32396-32402	CREATE	
182-8	32403-32408	TABLE	
182-9	32409-32416	product	
182-10	32417-32418	(	
182-11	32418-32428	product_id	
182-12	32429-32435	SERIAL	
182-13	32436-32443	PRIMARY	
182-14	32444-32447	KEY	
182-15	32447-32448	,	
182-16	32449-32460	description	
182-17	32461-32465	TEXT	
182-18	32465-32466	)	
182-19	32466-32467	;	
182-20	32468-32474	INSERT	
182-21	32475-32479	INTO	
182-22	32480-32487	product	
182-23	32488-32494	SELECT	
182-24	32495-32497	id	
182-25	32497-32498	,	
182-26	32499-32500	'	
182-27	32500-32507	Product	
182-28	32508-32509	'	
182-29	32510-32511	|	
182-30	32511-32512	|	
182-31	32513-32515	id	
182-32	32515-32516	:	
182-33	32516-32517	:	
182-34	32517-32521	TEXT	
182-35	32522-32526	FROM	
182-36	32527-32542	generate_series	
182-37	32542-32543	(	
182-38	32543-32544	1	
182-39	32544-32545	,	
182-40	32546-32549	100	
182-41	32549-32550	)	
182-42	32551-32553	AS	
182-43	32554-32555	t	
182-44	32555-32556	(	
182-45	32556-32558	id	
182-46	32558-32559	)	
182-47	32559-32560	;	
182-48	32561-32571	Generating	
182-49	32572-32575	the	
182-50	32576-32581	first	
182-51	32582-32586	page	
182-52	32587-32589	is	
182-53	32590-32595	quite	
182-54	32596-32602	simple	
182-55	32603-32608	using	
182-56	32609-32614	limit	
182-57	32614-32615	.	

#Text=Paging forward is simple too.
183-1	32616-32622	Paging	
183-2	32623-32630	forward	
183-3	32631-32633	is	
183-4	32634-32640	simple	
183-5	32641-32644	too	
183-6	32644-32645	.	

#Text=The user is not requesting to see previous pages, so any additions or removals in those pages are not
#Text=significant.
184-1	32646-32649	The	
184-2	32650-32654	user	
184-3	32655-32657	is	
184-4	32658-32661	not	
184-5	32662-32672	requesting	
184-6	32673-32675	to	
184-7	32676-32679	see	
184-8	32680-32688	previous	
184-9	32689-32694	pages	
184-10	32694-32695	,	
184-11	32696-32698	so	
184-12	32699-32702	any	
184-13	32703-32712	additions	
184-14	32713-32715	or	
184-15	32716-32724	removals	
184-16	32725-32727	in	
184-17	32728-32733	those	
184-18	32734-32739	pages	
184-19	32740-32743	are	
184-20	32744-32747	not	
184-21	32748-32759	significant	
184-22	32759-32760	.	

#Text=They are also not asking to see an updated display of the current page's values, so that can be ignored too.
185-1	32761-32765	They	
185-2	32766-32769	are	
185-3	32770-32774	also	
185-4	32775-32778	not	
185-5	32779-32785	asking	
185-6	32786-32788	to	
185-7	32789-32792	see	
185-8	32793-32795	an	
185-9	32796-32803	updated	
185-10	32804-32811	display	
185-11	32812-32814	of	
185-12	32815-32818	the	
185-13	32819-32826	current	
185-14	32827-32833	page's	
185-15	32834-32840	values	
185-16	32840-32841	,	
185-17	32842-32844	so	
185-18	32845-32849	that	
185-19	32850-32853	can	
185-20	32854-32856	be	
185-21	32857-32864	ignored	
185-22	32865-32868	too	
185-23	32868-32869	.	

#Text=Using limit and where, you can see the next ten values in order
#Text=relative to the currently viewed page.
186-1	32870-32875	Using	
186-2	32876-32881	limit	
186-3	32882-32885	and	
186-4	32886-32891	where	
186-5	32891-32892	,	
186-6	32893-32896	you	
186-7	32897-32900	can	
186-8	32901-32904	see	
186-9	32905-32908	the	
186-10	32909-32913	next	
186-11	32914-32917	ten	
186-12	32918-32924	values	
186-13	32925-32927	in	
186-14	32928-32933	order	
186-15	32934-32942	relative	
186-16	32943-32945	to	
186-17	32946-32949	the	
186-18	32950-32959	currently	
186-19	32960-32966	viewed	
186-20	32967-32971	page	
186-21	32971-32972	.	

#Text=For example, you are on page 3 (result set rows 21–30), and product 30 is the last product on the page — this query will display the next page:
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id > 30
#Text=ORDER BY product_id
#Text=LIMIT 11;
#Text=product_id | description
#Text=------------+-------------
#Text=31 | Product 31
#Text=32 | Product 32
#Text=33 | Product 33
#Text=34 | Product 34
#Text=35 | Product 35
#Text=36 | Product 36
#Text=37 | Product 37
#Text=38 | Product 38
#Text=39 | Product 39
#Text=40 | Product 40
#Text=41 | Product 41
#Text=I have used limit 11 above so if less than eleven rows are returned, the "Next Page" option can be disabled, since there are no more results right now, though there might be later.
187-1	32973-32976	For	
187-2	32977-32984	example	
187-3	32984-32985	,	
187-4	32986-32989	you	
187-5	32990-32993	are	
187-6	32994-32996	on	
187-7	32997-33001	page	
187-8	33002-33003	3	
187-9	33004-33005	(	
187-10	33005-33011	result	
187-11	33012-33015	set	
187-12	33016-33020	rows	
187-13	33021-33023	21	
187-14	33023-33024	–	
187-15	33024-33026	30	
187-16	33026-33027	)	
187-17	33027-33028	,	
187-18	33029-33032	and	
187-19	33033-33040	product	
187-20	33041-33043	30	
187-21	33044-33046	is	
187-22	33047-33050	the	
187-23	33051-33055	last	
187-24	33056-33063	product	
187-25	33064-33066	on	
187-26	33067-33070	the	
187-27	33071-33075	page	
187-28	33076-33077	—	
187-29	33078-33082	this	
187-30	33083-33088	query	
187-31	33089-33093	will	
187-32	33094-33101	display	
187-33	33102-33105	the	
187-34	33106-33110	next	
187-35	33111-33115	page	
187-36	33115-33116	:	
187-37	33117-33123	SELECT	
187-38	33124-33134	product_id	
187-39	33134-33135	,	
187-40	33136-33147	description	
187-41	33148-33152	FROM	
187-42	33153-33160	product	
187-43	33161-33166	WHERE	
187-44	33167-33177	product_id	
187-45	33178-33179	>	
187-46	33180-33182	30	
187-47	33183-33188	ORDER	
187-48	33189-33191	BY	
187-49	33192-33202	product_id	
187-50	33203-33208	LIMIT	
187-51	33209-33211	11	
187-52	33211-33212	;	
187-53	33213-33223	product_id	
187-54	33224-33225	|	
187-55	33226-33237	description	
187-56	33238-33239	-	
187-57	33239-33240	-	
187-58	33240-33241	-	
187-59	33241-33242	-	
187-60	33242-33243	-	
187-61	33243-33244	-	
187-62	33244-33245	-	
187-63	33245-33246	-	
187-64	33246-33247	-	
187-65	33247-33248	-	
187-66	33248-33249	-	
187-67	33249-33250	-	
187-68	33250-33251	+	
187-69	33251-33252	-	
187-70	33252-33253	-	
187-71	33253-33254	-	
187-72	33254-33255	-	
187-73	33255-33256	-	
187-74	33256-33257	-	
187-75	33257-33258	-	
187-76	33258-33259	-	
187-77	33259-33260	-	
187-78	33260-33261	-	
187-79	33261-33262	-	
187-80	33262-33263	-	
187-81	33263-33264	-	
187-82	33265-33267	31	
187-83	33268-33269	|	
187-84	33270-33277	Product	
187-85	33278-33280	31	
187-86	33281-33283	32	
187-87	33284-33285	|	
187-88	33286-33293	Product	
187-89	33294-33296	32	
187-90	33297-33299	33	
187-91	33300-33301	|	
187-92	33302-33309	Product	
187-93	33310-33312	33	
187-94	33313-33315	34	
187-95	33316-33317	|	
187-96	33318-33325	Product	
187-97	33326-33328	34	
187-98	33329-33331	35	
187-99	33332-33333	|	
187-100	33334-33341	Product	
187-101	33342-33344	35	
187-102	33345-33347	36	
187-103	33348-33349	|	
187-104	33350-33357	Product	
187-105	33358-33360	36	
187-106	33361-33363	37	
187-107	33364-33365	|	
187-108	33366-33373	Product	
187-109	33374-33376	37	
187-110	33377-33379	38	
187-111	33380-33381	|	
187-112	33382-33389	Product	
187-113	33390-33392	38	
187-114	33393-33395	39	
187-115	33396-33397	|	
187-116	33398-33405	Product	
187-117	33406-33408	39	
187-118	33409-33411	40	
187-119	33412-33413	|	
187-120	33414-33421	Product	
187-121	33422-33424	40	
187-122	33425-33427	41	
187-123	33428-33429	|	
187-124	33430-33437	Product	
187-125	33438-33440	41	
187-126	33441-33442	I	
187-127	33443-33447	have	
187-128	33448-33452	used	
187-129	33453-33458	limit	
187-130	33459-33461	11	
187-131	33462-33467	above	
187-132	33468-33470	so	
187-133	33471-33473	if	
187-134	33474-33478	less	
187-135	33479-33483	than	
187-136	33484-33490	eleven	
187-137	33491-33495	rows	
187-138	33496-33499	are	
187-139	33500-33508	returned	
187-140	33508-33509	,	
187-141	33510-33513	the	
187-142	33514-33515	"	
187-143	33515-33519	Next	
187-144	33520-33524	Page	
187-145	33524-33525	"	
187-146	33526-33532	option	
187-147	33533-33536	can	
187-148	33537-33539	be	
187-149	33540-33548	disabled	
187-150	33548-33549	,	
187-151	33550-33555	since	
187-152	33556-33561	there	
187-153	33562-33565	are	
187-154	33566-33568	no	
187-155	33569-33573	more	
187-156	33574-33581	results	
187-157	33582-33587	right	
187-158	33588-33591	now	
187-159	33591-33592	,	
187-160	33593-33599	though	
187-161	33600-33605	there	
187-162	33606-33611	might	
187-163	33612-33614	be	
187-164	33615-33620	later	
187-165	33620-33621	.	

#Text=Obviously,
#Text=only the first ten rows should be displayed.
188-1	33622-33631	Obviously	
188-2	33631-33632	,	
188-3	33633-33637	only	
188-4	33638-33641	the	
188-5	33642-33647	first	
188-6	33648-33651	ten	
188-7	33652-33656	rows	
188-8	33657-33663	should	
188-9	33664-33666	be	
188-10	33667-33676	displayed	
188-11	33676-33677	.	

#Text=An index can often be used for this query.
189-1	33678-33680	An	
189-2	33681-33686	index	
189-3	33687-33690	can	
189-4	33691-33696	often	
189-5	33697-33699	be	
189-6	33700-33704	used	
189-7	33705-33708	for	
189-8	33709-33713	this	
189-9	33714-33719	query	
189-10	33719-33720	.	

#Text=Offset would be used to jump forward or backward multiple pages.
190-1	33721-33727	Offset	
190-2	33728-33733	would	
190-3	33734-33736	be	
190-4	33737-33741	used	
190-5	33742-33744	to	
190-6	33745-33749	jump	
190-7	33750-33757	forward	
190-8	33758-33760	or	
190-9	33761-33769	backward	
190-10	33770-33778	multiple	
190-11	33779-33784	pages	
190-12	33784-33785	.	

#Text=Paging backward gets tricky.
191-1	33786-33792	Paging	
191-2	33793-33801	backward	
191-3	33802-33806	gets	
191-4	33807-33813	tricky	
191-5	33813-33814	.	

#Text=As stated above, only the last page can display less then ten results, but rows might be added and removed from previous pages, so just because we are on page 3 doesn't mean
#Text=there are twenty previous rows.
#Text=can't just do LIMIT 11 OFFSET 10 to display the previous page without a repeatable read or serializable snapshot — we might get more or less than ten rows.
192-1	33815-33817	As	
192-2	33818-33824	stated	
192-3	33825-33830	above	
192-4	33830-33831	,	
192-5	33832-33836	only	
192-6	33837-33840	the	
192-7	33841-33845	last	
192-8	33846-33850	page	
192-9	33851-33854	can	
192-10	33855-33862	display	
192-11	33863-33867	less	
192-12	33868-33872	then	
192-13	33873-33876	ten	
192-14	33877-33884	results	
192-15	33884-33885	,	
192-16	33886-33889	but	
192-17	33890-33894	rows	
192-18	33895-33900	might	
192-19	33901-33903	be	
192-20	33904-33909	added	
192-21	33910-33913	and	
192-22	33914-33921	removed	
192-23	33922-33926	from	
192-24	33927-33935	previous	
192-25	33936-33941	pages	
192-26	33941-33942	,	
192-27	33943-33945	so	
192-28	33946-33950	just	
192-29	33951-33958	because	
192-30	33959-33961	we	
192-31	33962-33965	are	
192-32	33966-33968	on	
192-33	33969-33973	page	
192-34	33974-33975	3	
192-35	33976-33983	doesn't	
192-36	33984-33988	mean	
192-37	33989-33994	there	
192-38	33995-33998	are	
192-39	33999-34005	twenty	
192-40	34006-34014	previous	
192-41	34015-34019	rows	
192-42	34019-34020	.	
192-43	34021-34026	can't	
192-44	34027-34031	just	
192-45	34032-34034	do	
192-46	34035-34040	LIMIT	
192-47	34041-34043	11	
192-48	34044-34050	OFFSET	
192-49	34051-34053	10	
192-50	34054-34056	to	
192-51	34057-34064	display	
192-52	34065-34068	the	
192-53	34069-34077	previous	
192-54	34078-34082	page	
192-55	34083-34090	without	
192-56	34091-34092	a	
192-57	34093-34103	repeatable	
192-58	34104-34108	read	
192-59	34109-34111	or	
192-60	34112-34124	serializable	
192-61	34125-34133	snapshot	
192-62	34134-34135	—	
192-63	34136-34138	we	
192-64	34139-34144	might	
192-65	34145-34148	get	
192-66	34149-34153	more	
192-67	34154-34156	or	
192-68	34157-34161	less	
192-69	34162-34166	than	
192-70	34167-34170	ten	
192-71	34171-34175	rows	
192-72	34175-34176	.	

#Text=To do this properly, assuming the first displayed row on page 3 has a product_id of 21, it is necessary to reverse the order by clause, use limit, and then use a common table expression
#Text=to re-order the results for display:
#Text=WITH page AS
#Text=SELECT product_id, description
#Text=FROM product
#Text=WHERE product_id < 21
#Text=ORDER BY product_id DESC
#Text=LIMIT 11
#Text=SELECT product_id, description
#Text=FROM page
#Text=ORDER BY product_id;
#Text=product_id | description
#Text=------------+-------------
#Text=10 | Product 10
#Text=11 | Product 11
#Text=12 | Product 12
#Text=13 | Product 13
#Text=14 | Product 14
#Text=15 | Product 15
#Text=16 | Product 16
#Text=17 | Product 17
#Text=18 | Product 18
#Text=19 | Product 19
#Text=20 | Product 20
#Text=This gets the 11 result set rows before page 3, and in this case the first row is used to indicated if there is a valid "Previous Page".
193-1	34177-34179	To	
193-2	34180-34182	do	
193-3	34183-34187	this	
193-4	34188-34196	properly	
193-5	34196-34197	,	
193-6	34198-34206	assuming	
193-7	34207-34210	the	
193-8	34211-34216	first	
193-9	34217-34226	displayed	
193-10	34227-34230	row	
193-11	34231-34233	on	
193-12	34234-34238	page	
193-13	34239-34240	3	
193-14	34241-34244	has	
193-15	34245-34246	a	
193-16	34247-34257	product_id	
193-17	34258-34260	of	
193-18	34261-34263	21	
193-19	34263-34264	,	
193-20	34265-34267	it	
193-21	34268-34270	is	
193-22	34271-34280	necessary	
193-23	34281-34283	to	
193-24	34284-34291	reverse	
193-25	34292-34295	the	
193-26	34296-34301	order	
193-27	34302-34304	by	
193-28	34305-34311	clause	
193-29	34311-34312	,	
193-30	34313-34316	use	
193-31	34317-34322	limit	
193-32	34322-34323	,	
193-33	34324-34327	and	
193-34	34328-34332	then	
193-35	34333-34336	use	
193-36	34337-34338	a	
193-37	34339-34345	common	
193-38	34346-34351	table	
193-39	34352-34362	expression	
193-40	34363-34365	to	
193-41	34366-34374	re-order	
193-42	34375-34378	the	
193-43	34379-34386	results	
193-44	34387-34390	for	
193-45	34391-34398	display	
193-46	34398-34399	:	
193-47	34400-34404	WITH	
193-48	34405-34409	page	
193-49	34410-34412	AS	
193-50	34413-34419	SELECT	
193-51	34420-34430	product_id	
193-52	34430-34431	,	
193-53	34432-34443	description	
193-54	34444-34448	FROM	
193-55	34449-34456	product	
193-56	34457-34462	WHERE	
193-57	34463-34473	product_id	
193-58	34474-34475	<	
193-59	34476-34478	21	
193-60	34479-34484	ORDER	
193-61	34485-34487	BY	
193-62	34488-34498	product_id	
193-63	34499-34503	DESC	
193-64	34504-34509	LIMIT	
193-65	34510-34512	11	
193-66	34513-34519	SELECT	
193-67	34520-34530	product_id	
193-68	34530-34531	,	
193-69	34532-34543	description	
193-70	34544-34548	FROM	
193-71	34549-34553	page	
193-72	34554-34559	ORDER	
193-73	34560-34562	BY	
193-74	34563-34573	product_id	
193-75	34573-34574	;	
193-76	34575-34585	product_id	
193-77	34586-34587	|	
193-78	34588-34599	description	
193-79	34600-34601	-	
193-80	34601-34602	-	
193-81	34602-34603	-	
193-82	34603-34604	-	
193-83	34604-34605	-	
193-84	34605-34606	-	
193-85	34606-34607	-	
193-86	34607-34608	-	
193-87	34608-34609	-	
193-88	34609-34610	-	
193-89	34610-34611	-	
193-90	34611-34612	-	
193-91	34612-34613	+	
193-92	34613-34614	-	
193-93	34614-34615	-	
193-94	34615-34616	-	
193-95	34616-34617	-	
193-96	34617-34618	-	
193-97	34618-34619	-	
193-98	34619-34620	-	
193-99	34620-34621	-	
193-100	34621-34622	-	
193-101	34622-34623	-	
193-102	34623-34624	-	
193-103	34624-34625	-	
193-104	34625-34626	-	
193-105	34627-34629	10	
193-106	34630-34631	|	
193-107	34632-34639	Product	
193-108	34640-34642	10	
193-109	34643-34645	11	
193-110	34646-34647	|	
193-111	34648-34655	Product	
193-112	34656-34658	11	
193-113	34659-34661	12	
193-114	34662-34663	|	
193-115	34664-34671	Product	
193-116	34672-34674	12	
193-117	34675-34677	13	
193-118	34678-34679	|	
193-119	34680-34687	Product	
193-120	34688-34690	13	
193-121	34691-34693	14	
193-122	34694-34695	|	
193-123	34696-34703	Product	
193-124	34704-34706	14	
193-125	34707-34709	15	
193-126	34710-34711	|	
193-127	34712-34719	Product	
193-128	34720-34722	15	
193-129	34723-34725	16	
193-130	34726-34727	|	
193-131	34728-34735	Product	
193-132	34736-34738	16	
193-133	34739-34741	17	
193-134	34742-34743	|	
193-135	34744-34751	Product	
193-136	34752-34754	17	
193-137	34755-34757	18	
193-138	34758-34759	|	
193-139	34760-34767	Product	
193-140	34768-34770	18	
193-141	34771-34773	19	
193-142	34774-34775	|	
193-143	34776-34783	Product	
193-144	34784-34786	19	
193-145	34787-34789	20	
193-146	34790-34791	|	
193-147	34792-34799	Product	
193-148	34800-34802	20	
193-149	34803-34807	This	
193-150	34808-34812	gets	
193-151	34813-34816	the	
193-152	34817-34819	11	
193-153	34820-34826	result	
193-154	34827-34830	set	
193-155	34831-34835	rows	
193-156	34836-34842	before	
193-157	34843-34847	page	
193-158	34848-34849	3	
193-159	34849-34850	,	
193-160	34851-34854	and	
193-161	34855-34857	in	
193-162	34858-34862	this	
193-163	34863-34867	case	
193-164	34868-34871	the	
193-165	34872-34877	first	
193-166	34878-34881	row	
193-167	34882-34884	is	
193-168	34885-34889	used	
193-169	34890-34892	to	
193-170	34893-34902	indicated	
193-171	34903-34905	if	
193-172	34906-34911	there	
193-173	34912-34914	is	
193-174	34915-34916	a	
193-175	34917-34922	valid	
193-176	34923-34924	"	
193-177	34924-34932	Previous	
193-178	34933-34937	Page	
193-179	34937-34938	"	
193-180	34938-34939	.	

#Text=However there are more complexities:
#Text=If 11 rows are returned and your user interface suggests you should be on the first page, you should probably repopulate the first page and inform the user.
194-1	34940-34947	However	
194-2	34948-34953	there	
194-3	34954-34957	are	
194-4	34958-34962	more	
194-5	34963-34975	complexities	
194-6	34975-34976	:	
194-7	34977-34979	If	
194-8	34980-34982	11	
194-9	34983-34987	rows	
194-10	34988-34991	are	
194-11	34992-35000	returned	
194-12	35001-35004	and	
194-13	35005-35009	your	
194-14	35010-35014	user	
194-15	35015-35024	interface	
194-16	35025-35033	suggests	
194-17	35034-35037	you	
194-18	35038-35044	should	
194-19	35045-35047	be	
194-20	35048-35050	on	
194-21	35051-35054	the	
194-22	35055-35060	first	
194-23	35061-35065	page	
194-24	35065-35066	,	
194-25	35067-35070	you	
194-26	35071-35077	should	
194-27	35078-35086	probably	
194-28	35087-35097	repopulate	
194-29	35098-35101	the	
194-30	35102-35107	first	
194-31	35108-35112	page	
194-32	35113-35116	and	
194-33	35117-35123	inform	
194-34	35124-35127	the	
194-35	35128-35132	user	
194-36	35132-35133	.	

#Text=If only ten rows are returned, you can assume you are on the first page, even if that was not true based on previous queries.
195-1	35134-35136	If	
195-2	35137-35141	only	
195-3	35142-35145	ten	
195-4	35146-35150	rows	
195-5	35151-35154	are	
195-6	35155-35163	returned	
195-7	35163-35164	,	
195-8	35165-35168	you	
195-9	35169-35172	can	
195-10	35173-35179	assume	
195-11	35180-35183	you	
195-12	35184-35187	are	
195-13	35188-35190	on	
195-14	35191-35194	the	
195-15	35195-35200	first	
195-16	35201-35205	page	
195-17	35205-35206	,	
195-18	35207-35211	even	
195-19	35212-35214	if	
195-20	35215-35219	that	
195-21	35220-35223	was	
195-22	35224-35227	not	
195-23	35228-35232	true	
195-24	35233-35238	based	
195-25	35239-35241	on	
195-26	35242-35250	previous	
195-27	35251-35258	queries	
195-28	35258-35259	.	

#Text=If you get less then ten rows, you will need to re-issue the initial query to populate the first page with ten results, and perhaps inform the user since result rows might be duplicated from previous
#Text=pages.
196-1	35260-35262	If	
196-2	35263-35266	you	
196-3	35267-35270	get	
196-4	35271-35275	less	
196-5	35276-35280	then	
196-6	35281-35284	ten	
196-7	35285-35289	rows	
196-8	35289-35290	,	
196-9	35291-35294	you	
196-10	35295-35299	will	
196-11	35300-35304	need	
196-12	35305-35307	to	
196-13	35308-35316	re-issue	
196-14	35317-35320	the	
196-15	35321-35328	initial	
196-16	35329-35334	query	
196-17	35335-35337	to	
196-18	35338-35346	populate	
196-19	35347-35350	the	
196-20	35351-35356	first	
196-21	35357-35361	page	
196-22	35362-35366	with	
196-23	35367-35370	ten	
196-24	35371-35378	results	
196-25	35378-35379	,	
196-26	35380-35383	and	
196-27	35384-35391	perhaps	
196-28	35392-35398	inform	
196-29	35399-35402	the	
196-30	35403-35407	user	
196-31	35408-35413	since	
196-32	35414-35420	result	
196-33	35421-35425	rows	
196-34	35426-35431	might	
196-35	35432-35434	be	
196-36	35435-35445	duplicated	
196-37	35446-35450	from	
196-38	35451-35459	previous	
196-39	35460-35465	pages	
196-40	35465-35466	.	

#Text=As stated earlier, the keyset pagination method has many advantages in terms of performance and consistency, but it can be complex to implement because you are effectively getting a new snapshot of the
#Text=data each time you ask for another page, and making that line up with pagination requirements can be tricky.
197-1	35467-35469	As	
197-2	35470-35476	stated	
197-3	35477-35484	earlier	
197-4	35484-35485	,	
197-5	35486-35489	the	
197-6	35490-35496	keyset	
197-7	35497-35507	pagination	
197-8	35508-35514	method	
197-9	35515-35518	has	
197-10	35519-35523	many	
197-11	35524-35534	advantages	
197-12	35535-35537	in	
197-13	35538-35543	terms	
197-14	35544-35546	of	
197-15	35547-35558	performance	
197-16	35559-35562	and	
197-17	35563-35574	consistency	
197-18	35574-35575	,	
197-19	35576-35579	but	
197-20	35580-35582	it	
197-21	35583-35586	can	
197-22	35587-35589	be	
197-23	35590-35597	complex	
197-24	35598-35600	to	
197-25	35601-35610	implement	
197-26	35611-35618	because	
197-27	35619-35622	you	
197-28	35623-35626	are	
197-29	35627-35638	effectively	
197-30	35639-35646	getting	
197-31	35647-35648	a	
197-32	35649-35652	new	
197-33	35653-35661	snapshot	
197-34	35662-35664	of	
197-35	35665-35668	the	
197-36	35669-35673	data	
197-37	35674-35678	each	
197-38	35679-35683	time	
197-39	35684-35687	you	
197-40	35688-35691	ask	
197-41	35692-35695	for	
197-42	35696-35703	another	
197-43	35704-35708	page	
197-44	35708-35709	,	
197-45	35710-35713	and	
197-46	35714-35720	making	
197-47	35721-35725	that	
197-48	35726-35730	line	
197-49	35731-35733	up	
197-50	35734-35738	with	
197-51	35739-35749	pagination	
197-52	35750-35762	requirements	
197-53	35763-35766	can	
197-54	35767-35769	be	
197-55	35770-35776	tricky	
197-56	35776-35777	.	

#Text=View or Post Comments
#Text=Pagination Tips
#Text=Monday, August 10, 2020
#Text=We have all used applications that allow searches which return results in sections or "pages", like for products or flights.
198-1	35778-35782	View	
198-2	35783-35785	or	
198-3	35786-35790	Post	
198-4	35791-35799	Comments	
198-5	35800-35810	Pagination	
198-6	35811-35815	Tips	
198-7	35816-35822	Monday	
198-8	35822-35823	,	
198-9	35824-35830	August	
198-10	35831-35833	10	
198-11	35833-35834	,	
198-12	35835-35839	2020	
198-13	35840-35842	We	
198-14	35843-35847	have	
198-15	35848-35851	all	
198-16	35852-35856	used	
198-17	35857-35869	applications	
198-18	35870-35874	that	
198-19	35875-35880	allow	
198-20	35881-35889	searches	
198-21	35890-35895	which	
198-22	35896-35902	return	
198-23	35903-35910	results	
198-24	35911-35913	in	
198-25	35914-35922	sections	
198-26	35923-35925	or	
198-27	35926-35927	"	
198-28	35927-35932	pages	
198-29	35932-35933	"	
198-30	35933-35934	,	
198-31	35935-35939	like	
198-32	35940-35943	for	
198-33	35944-35952	products	
198-34	35953-35955	or	
198-35	35956-35963	flights	
198-36	35963-35964	.	

#Text=For example, you might search for a product, and there might be 1,500 matches,
#Text=but you don't see 1,500 results — you only see ten results (1–10), and you have the option of seeing the next ten (11–20), and the next ten (21–30), etc.
199-1	35965-35968	For	
199-2	35969-35976	example	
199-3	35976-35977	,	
199-4	35978-35981	you	
199-5	35982-35987	might	
199-6	35988-35994	search	
199-7	35995-35998	for	
199-8	35999-36000	a	
199-9	36001-36008	product	
199-10	36008-36009	,	
199-11	36010-36013	and	
199-12	36014-36019	there	
199-13	36020-36025	might	
199-14	36026-36028	be	
199-15	36029-36034	1,500	
199-16	36035-36042	matches	
199-17	36042-36043	,	
199-18	36044-36047	but	
199-19	36048-36051	you	
199-20	36052-36057	don't	
199-21	36058-36061	see	
199-22	36062-36067	1,500	
199-23	36068-36075	results	
199-24	36076-36077	—	
199-25	36078-36081	you	
199-26	36082-36086	only	
199-27	36087-36090	see	
199-28	36091-36094	ten	
199-29	36095-36102	results	
199-30	36103-36104	(	
199-31	36104-36105	1	
199-32	36105-36106	–	
199-33	36106-36108	10	
199-34	36108-36109	)	
199-35	36109-36110	,	
199-36	36111-36114	and	
199-37	36115-36118	you	
199-38	36119-36123	have	
199-39	36124-36127	the	
199-40	36128-36134	option	
199-41	36135-36137	of	
199-42	36138-36144	seeing	
199-43	36145-36148	the	
199-44	36149-36153	next	
199-45	36154-36157	ten	
199-46	36158-36159	(	
199-47	36159-36161	11	
199-48	36161-36162	–	
199-49	36162-36164	20	
199-50	36164-36165	)	
199-51	36165-36166	,	
199-52	36167-36170	and	
199-53	36171-36174	the	
199-54	36175-36179	next	
199-55	36180-36183	ten	
199-56	36184-36185	(	
199-57	36185-36187	21	
199-58	36187-36188	–	
199-59	36188-36190	30	
199-60	36190-36191	)	
199-61	36191-36192	,	
199-62	36193-36196	etc	
199-63	36196-36197	.	

#Text=Pagination is done
#Text=for several reasons:
#Text=The user probably doesn't want to see all the results at once
#Text=The user probably doesn't want to ever see all of the results
#Text=It might be inefficient to transfer and display all results
#Text=There are several ways to enable pagination using a client/server architecture like databases.
200-1	36198-36208	Pagination	
200-2	36209-36211	is	
200-3	36212-36216	done	
200-4	36217-36220	for	
200-5	36221-36228	several	
200-6	36229-36236	reasons	
200-7	36236-36237	:	
200-8	36238-36241	The	
200-9	36242-36246	user	
200-10	36247-36255	probably	
200-11	36256-36263	doesn't	
200-12	36264-36268	want	
200-13	36269-36271	to	
200-14	36272-36275	see	
200-15	36276-36279	all	
200-16	36280-36283	the	
200-17	36284-36291	results	
200-18	36292-36294	at	
200-19	36295-36299	once	
200-20	36300-36303	The	
200-21	36304-36308	user	
200-22	36309-36317	probably	
200-23	36318-36325	doesn't	
200-24	36326-36330	want	
200-25	36331-36333	to	
200-26	36334-36338	ever	
200-27	36339-36342	see	
200-28	36343-36346	all	
200-29	36347-36349	of	
200-30	36350-36353	the	
200-31	36354-36361	results	
200-32	36362-36364	It	
200-33	36365-36370	might	
200-34	36371-36373	be	
200-35	36374-36385	inefficient	
200-36	36386-36388	to	
200-37	36389-36397	transfer	
200-38	36398-36401	and	
200-39	36402-36409	display	
200-40	36410-36413	all	
200-41	36414-36421	results	
200-42	36422-36427	There	
200-43	36428-36431	are	
200-44	36432-36439	several	
200-45	36440-36444	ways	
200-46	36445-36447	to	
200-47	36448-36454	enable	
200-48	36455-36465	pagination	
200-49	36466-36471	using	
200-50	36472-36473	a	
200-51	36474-36480	client	
200-52	36480-36481	/	
200-53	36481-36487	server	
200-54	36488-36500	architecture	
200-55	36501-36505	like	
200-56	36506-36515	databases	
200-57	36515-36516	.	

#Text=One approach is to transfer all results to the client, and let the client do the pagination.
201-1	36517-36520	One	
201-2	36521-36529	approach	
201-3	36530-36532	is	
201-4	36533-36535	to	
201-5	36536-36544	transfer	
201-6	36545-36548	all	
201-7	36549-36556	results	
201-8	36557-36559	to	
201-9	36560-36563	the	
201-10	36564-36570	client	
201-11	36570-36571	,	
201-12	36572-36575	and	
201-13	36576-36579	let	
201-14	36580-36583	the	
201-15	36584-36590	client	
201-16	36591-36593	do	
201-17	36594-36597	the	
201-18	36598-36608	pagination	
201-19	36608-36609	.	

#Text=That handles
#Text=the first issue, but it doesn't handle cases where the transfer and storage of many results is inefficient.
202-1	36610-36614	That	
202-2	36615-36622	handles	
202-3	36623-36626	the	
202-4	36627-36632	first	
202-5	36633-36638	issue	
202-6	36638-36639	,	
202-7	36640-36643	but	
202-8	36644-36646	it	
202-9	36647-36654	doesn't	
202-10	36655-36661	handle	
202-11	36662-36667	cases	
202-12	36668-36673	where	
202-13	36674-36677	the	
202-14	36678-36686	transfer	
202-15	36687-36690	and	
202-16	36691-36698	storage	
202-17	36699-36701	of	
202-18	36702-36706	many	
202-19	36707-36714	results	
202-20	36715-36717	is	
202-21	36718-36729	inefficient	
202-22	36729-36730	.	

#Text=While this might work for 1,500 results, it is going to perform badly for 150 million results.
203-1	36731-36736	While	
203-2	36737-36741	this	
203-3	36742-36747	might	
203-4	36748-36752	work	
203-5	36753-36756	for	
203-6	36757-36762	1,500	
203-7	36763-36770	results	
203-8	36770-36771	,	
203-9	36772-36774	it	
203-10	36775-36777	is	
203-11	36778-36783	going	
203-12	36784-36786	to	
203-13	36787-36794	perform	
203-14	36795-36800	badly	
203-15	36801-36804	for	
203-16	36805-36808	150	
203-17	36809-36816	million	
203-18	36817-36824	results	
203-19	36824-36825	.	

#Text=Therefore, some kind of pagination support on the server side is required if large result sets are possible.
204-1	36826-36835	Therefore	
204-2	36835-36836	,	
204-3	36837-36841	some	
204-4	36842-36846	kind	
204-5	36847-36849	of	
204-6	36850-36860	pagination	
204-7	36861-36868	support	
204-8	36869-36871	on	
204-9	36872-36875	the	
204-10	36876-36882	server	
204-11	36883-36887	side	
204-12	36888-36890	is	
204-13	36891-36899	required	
204-14	36900-36902	if	
204-15	36903-36908	large	
204-16	36909-36915	result	
204-17	36916-36920	sets	
204-18	36921-36924	are	
204-19	36925-36933	possible	
204-20	36933-36934	.	

#Text=There are four common approaches:
#Text=Cursors:
#Text=Open a non-with hold cursor in a transaction block and fetch rows in
#Text=pages.
205-1	36935-36940	There	
205-2	36941-36944	are	
205-3	36945-36949	four	
205-4	36950-36956	common	
205-5	36957-36967	approaches	
205-6	36967-36968	:	
205-7	36969-36976	Cursors	
205-8	36976-36977	:	
205-9	36978-36982	Open	
205-10	36983-36984	a	
205-11	36985-36993	non-with	
205-12	36994-36998	hold	
205-13	36999-37005	cursor	
205-14	37006-37008	in	
205-15	37009-37010	a	
205-16	37011-37022	transaction	
205-17	37023-37028	block	
205-18	37029-37032	and	
205-19	37033-37038	fetch	
205-20	37039-37043	rows	
205-21	37044-37046	in	
205-22	37047-37052	pages	
205-23	37052-37053	.	

#Text=The downside of this is that the entire result set often has be computed before returning any result.
206-1	37054-37057	The	
206-2	37058-37066	downside	
206-3	37067-37069	of	
206-4	37070-37074	this	
206-5	37075-37077	is	
206-6	37078-37082	that	
206-7	37083-37086	the	
206-8	37087-37093	entire	
206-9	37094-37100	result	
206-10	37101-37104	set	
206-11	37105-37110	often	
206-12	37111-37114	has	
206-13	37115-37117	be	
206-14	37118-37126	computed	
206-15	37127-37133	before	
206-16	37134-37143	returning	
206-17	37144-37147	any	
206-18	37148-37154	result	
206-19	37154-37155	.	

#Text=Also, the transaction must be kept open while users are paging through the results, leading to
#Text=potentially long-running transactions, and therefore decreased cleanup efficiency.
207-1	37156-37160	Also	
207-2	37160-37161	,	
207-3	37162-37165	the	
207-4	37166-37177	transaction	
207-5	37178-37182	must	
207-6	37183-37185	be	
207-7	37186-37190	kept	
207-8	37191-37195	open	
207-9	37196-37201	while	
207-10	37202-37207	users	
207-11	37208-37211	are	
207-12	37212-37218	paging	
207-13	37219-37226	through	
207-14	37227-37230	the	
207-15	37231-37238	results	
207-16	37238-37239	,	
207-17	37240-37247	leading	
207-18	37248-37250	to	
207-19	37251-37262	potentially	
207-20	37263-37275	long-running	
207-21	37276-37288	transactions	
207-22	37288-37289	,	
207-23	37290-37293	and	
207-24	37294-37303	therefore	
207-25	37304-37313	decreased	
207-26	37314-37321	cleanup	
207-27	37322-37332	efficiency	
207-28	37332-37333	.	

#Text=Using
#Text=idle_in_transaction_session_timeout prevents sessions from keeping transactions open too long.
208-1	37334-37339	Using	
208-2	37340-37375	idle_in_transaction_session_timeout	
208-3	37376-37384	prevents	
208-4	37385-37393	sessions	
208-5	37394-37398	from	
208-6	37399-37406	keeping	
208-7	37407-37419	transactions	
208-8	37420-37424	open	
208-9	37425-37428	too	
208-10	37429-37433	long	
208-11	37433-37434	.	

#Text=Using with hold cursors avoids keeping a transaction open during page fetches, but it does require the entire result set to be stored in server memory.
#Text=limit/offset:
#Text=These keywords allow select to return partial
#Text=results, ideally suited to pagination.
209-1	37435-37440	Using	
209-2	37441-37445	with	
209-3	37446-37450	hold	
209-4	37451-37458	cursors	
209-5	37459-37465	avoids	
209-6	37466-37473	keeping	
209-7	37474-37475	a	
209-8	37476-37487	transaction	
209-9	37488-37492	open	
209-10	37493-37499	during	
209-11	37500-37504	page	
209-12	37505-37512	fetches	
209-13	37512-37513	,	
209-14	37514-37517	but	
209-15	37518-37520	it	
209-16	37521-37525	does	
209-17	37526-37533	require	
209-18	37534-37537	the	
209-19	37538-37544	entire	
209-20	37545-37551	result	
209-21	37552-37555	set	
209-22	37556-37558	to	
209-23	37559-37561	be	
209-24	37562-37568	stored	
209-25	37569-37571	in	
209-26	37572-37578	server	
209-27	37579-37585	memory	
209-28	37585-37586	.	
209-29	37587-37592	limit	
209-30	37592-37593	/	
209-31	37593-37599	offset	
209-32	37599-37600	:	
209-33	37601-37606	These	
209-34	37607-37615	keywords	
209-35	37616-37621	allow	
209-36	37622-37628	select	
209-37	37629-37631	to	
209-38	37632-37638	return	
209-39	37639-37646	partial	
209-40	37647-37654	results	
209-41	37654-37655	,	
209-42	37656-37663	ideally	
209-43	37664-37670	suited	
209-44	37671-37673	to	
209-45	37674-37684	pagination	
209-46	37684-37685	.	

#Text=Limit/offset also allow the optimizer (slide 52) to efficiently access limited result
#Text=sets by often using indexes which are only efficient for small result sets.
210-1	37686-37691	Limit	
210-2	37691-37692	/	
210-3	37692-37698	offset	
210-4	37699-37703	also	
210-5	37704-37709	allow	
210-6	37710-37713	the	
210-7	37714-37723	optimizer	
210-8	37724-37725	(	
210-9	37725-37730	slide	
210-10	37731-37733	52	
210-11	37733-37734	)	
210-12	37735-37737	to	
210-13	37738-37749	efficiently	
210-14	37750-37756	access	
210-15	37757-37764	limited	
210-16	37765-37771	result	
210-17	37772-37776	sets	
210-18	37777-37779	by	
210-19	37780-37785	often	
210-20	37786-37791	using	
210-21	37792-37799	indexes	
210-22	37800-37805	which	
210-23	37806-37809	are	
210-24	37810-37814	only	
210-25	37815-37824	efficient	
210-26	37825-37828	for	
210-27	37829-37834	small	
210-28	37835-37841	result	
210-29	37842-37846	sets	
210-30	37846-37847	.	

#Text=This also avoids creation of the entire result in memory.
211-1	37848-37852	This	
211-2	37853-37857	also	
211-3	37858-37864	avoids	
211-4	37865-37873	creation	
211-5	37874-37876	of	
211-6	37877-37880	the	
211-7	37881-37887	entire	
211-8	37888-37894	result	
211-9	37895-37897	in	
211-10	37898-37904	memory	
211-11	37904-37905	.	

#Text=Limit/offset with repeatable read: Limit/offset alone has a problem displaying accurate
#Text=data if the underlying results change during page views.
212-1	37906-37911	Limit	
212-2	37911-37912	/	
212-3	37912-37918	offset	
212-4	37919-37923	with	
212-5	37924-37934	repeatable	
212-6	37935-37939	read	
212-7	37939-37940	:	
212-8	37941-37946	Limit	
212-9	37946-37947	/	
212-10	37947-37953	offset	
212-11	37954-37959	alone	
212-12	37960-37963	has	
212-13	37964-37965	a	
212-14	37966-37973	problem	
212-15	37974-37984	displaying	
212-16	37985-37993	accurate	
212-17	37994-37998	data	
212-18	37999-38001	if	
212-19	38002-38005	the	
212-20	38006-38016	underlying	
212-21	38017-38024	results	
212-22	38025-38031	change	
212-23	38032-38038	during	
212-24	38039-38043	page	
212-25	38044-38049	views	
212-26	38049-38050	.	

#Text=For example, if I am viewing results 21–30, and a row is added which should appear in range 11–20, if I request the next page,
#Text=what was item 30 will appear again as item 31.
213-1	38051-38054	For	
213-2	38055-38062	example	
213-3	38062-38063	,	
213-4	38064-38066	if	
213-5	38067-38068	I	
213-6	38069-38071	am	
213-7	38072-38079	viewing	
213-8	38080-38087	results	
213-9	38088-38090	21	
213-10	38090-38091	–	
213-11	38091-38093	30	
213-12	38093-38094	,	
213-13	38095-38098	and	
213-14	38099-38100	a	
213-15	38101-38104	row	
213-16	38105-38107	is	
213-17	38108-38113	added	
213-18	38114-38119	which	
213-19	38120-38126	should	
213-20	38127-38133	appear	
213-21	38134-38136	in	
213-22	38137-38142	range	
213-23	38143-38145	11	
213-24	38145-38146	–	
213-25	38146-38148	20	
213-26	38148-38149	,	
213-27	38150-38152	if	
213-28	38153-38154	I	
213-29	38155-38162	request	
213-30	38163-38166	the	
213-31	38167-38171	next	
213-32	38172-38176	page	
213-33	38176-38177	,	
213-34	38178-38182	what	
213-35	38183-38186	was	
213-36	38187-38191	item	
213-37	38192-38194	30	
213-38	38195-38199	will	
213-39	38200-38206	appear	
213-40	38207-38212	again	
213-41	38213-38215	as	
213-42	38216-38220	item	
213-43	38221-38223	31	
213-44	38223-38224	.	

#Text=If an earlier item is deleted, what was item 31 will now be item 30, and will not appear in range 31–40.
214-1	38225-38227	If	
214-2	38228-38230	an	
214-3	38231-38238	earlier	
214-4	38239-38243	item	
214-5	38244-38246	is	
214-6	38247-38254	deleted	
214-7	38254-38255	,	
214-8	38256-38260	what	
214-9	38261-38264	was	
214-10	38265-38269	item	
214-11	38270-38272	31	
214-12	38273-38277	will	
214-13	38278-38281	now	
214-14	38282-38284	be	
214-15	38285-38289	item	
214-16	38290-38292	30	
214-17	38292-38293	,	
214-18	38294-38297	and	
214-19	38298-38302	will	
214-20	38303-38306	not	
214-21	38307-38313	appear	
214-22	38314-38316	in	
214-23	38317-38322	range	
214-24	38323-38325	31	
214-25	38325-38326	–	
214-26	38326-38328	40	
214-27	38328-38329	.	

#Text=Effectively, paging back and forward will
#Text=cause items to not appear, or appear twice.
215-1	38330-38341	Effectively	
215-2	38341-38342	,	
215-3	38343-38349	paging	
215-4	38350-38354	back	
215-5	38355-38358	and	
215-6	38359-38366	forward	
215-7	38367-38371	will	
215-8	38372-38377	cause	
215-9	38378-38383	items	
215-10	38384-38386	to	
215-11	38387-38390	not	
215-12	38391-38397	appear	
215-13	38397-38398	,	
215-14	38399-38401	or	
215-15	38402-38408	appear	
215-16	38409-38414	twice	
215-17	38414-38415	.	

#Text=The fix for this is to use limit/offset in a repeatable read or serializable
#Text=transaction, so that all page requests use the same snapshot.
216-1	38416-38419	The	
216-2	38420-38423	fix	
216-3	38424-38427	for	
216-4	38428-38432	this	
216-5	38433-38435	is	
216-6	38436-38438	to	
216-7	38439-38442	use	
216-8	38443-38448	limit	
216-9	38448-38449	/	
216-10	38449-38455	offset	
216-11	38456-38458	in	
216-12	38459-38460	a	
216-13	38461-38471	repeatable	
216-14	38472-38476	read	
216-15	38477-38479	or	
216-16	38480-38492	serializable	
216-17	38493-38504	transaction	
216-18	38504-38505	,	
216-19	38506-38508	so	
216-20	38509-38513	that	
216-21	38514-38517	all	
216-22	38518-38522	page	
216-23	38523-38531	requests	
216-24	38532-38535	use	
216-25	38536-38539	the	
216-26	38540-38544	same	
216-27	38545-38553	snapshot	
216-28	38553-38554	.	

#Text=This does have the same problem that non-with hold
#Text=cursors had with long-running transactions, so the use of idle_in_transaction_session_timeout is recommended.
217-1	38555-38559	This	
217-2	38560-38564	does	
217-3	38565-38569	have	
217-4	38570-38573	the	
217-5	38574-38578	same	
217-6	38579-38586	problem	
217-7	38587-38591	that	
217-8	38592-38600	non-with	
217-9	38601-38605	hold	
217-10	38606-38613	cursors	
217-11	38614-38617	had	
217-12	38618-38622	with	
217-13	38623-38635	long-running	
217-14	38636-38648	transactions	
217-15	38648-38649	,	
217-16	38650-38652	so	
217-17	38653-38656	the	
217-18	38657-38660	use	
217-19	38661-38663	of	
217-20	38664-38699	idle_in_transaction_session_timeout	
217-21	38700-38702	is	
217-22	38703-38714	recommended	
217-23	38714-38715	.	

#Text=Limit/offset and where: It is possible to use limit/offset with a where restriction that only returns rows after the previous last row returned based on the result
#Text=set ordering, or before the previous first row returned for previous page result sets.
218-1	38716-38721	Limit	
218-2	38721-38722	/	
218-3	38722-38728	offset	
218-4	38729-38732	and	
218-5	38733-38738	where	
218-6	38738-38739	:	
218-7	38740-38742	It	
218-8	38743-38745	is	
218-9	38746-38754	possible	
218-10	38755-38757	to	
218-11	38758-38761	use	
218-12	38762-38767	limit	
218-13	38767-38768	/	
218-14	38768-38774	offset	
218-15	38775-38779	with	
218-16	38780-38781	a	
218-17	38782-38787	where	
218-18	38788-38799	restriction	
218-19	38800-38804	that	
218-20	38805-38809	only	
218-21	38810-38817	returns	
218-22	38818-38822	rows	
218-23	38823-38828	after	
218-24	38829-38832	the	
218-25	38833-38841	previous	
218-26	38842-38846	last	
218-27	38847-38850	row	
218-28	38851-38859	returned	
218-29	38860-38865	based	
218-30	38866-38868	on	
218-31	38869-38872	the	
218-32	38873-38879	result	
218-33	38880-38883	set	
218-34	38884-38892	ordering	
218-35	38892-38893	,	
218-36	38894-38896	or	
218-37	38897-38903	before	
218-38	38904-38907	the	
218-39	38908-38916	previous	
218-40	38917-38922	first	
218-41	38923-38926	row	
218-42	38927-38935	returned	
218-43	38936-38939	for	
218-44	38940-38948	previous	
218-45	38949-38953	page	
218-46	38954-38960	result	
218-47	38961-38965	sets	
218-48	38965-38966	.	

#Text=This avoids the duplicate/missing row problem of #4 without requiring a transaction to remain open.
219-1	38967-38971	This	
219-2	38972-38978	avoids	
219-3	38979-38982	the	
219-4	38983-38992	duplicate	
219-5	38992-38993	/	
219-6	38993-39000	missing	
219-7	39001-39004	row	
219-8	39005-39012	problem	
219-9	39013-39015	of	
219-10	39016-39018	#4	
219-11	39019-39026	without	
219-12	39027-39036	requiring	
219-13	39037-39038	a	
219-14	39039-39050	transaction	
219-15	39051-39053	to	
219-16	39054-39060	remain	
219-17	39061-39065	open	
219-18	39065-39066	.	

#Text=These blog
#Text=entries (1, 2) have more details about this method.
220-1	39067-39072	These	
220-2	39073-39077	blog	
220-3	39078-39085	entries	
220-4	39086-39087	(	
220-5	39087-39088	1	
220-6	39088-39089	,	
220-7	39090-39091	2	
220-8	39091-39092	)	
220-9	39093-39097	have	
220-10	39098-39102	more	
220-11	39103-39110	details	
220-12	39111-39116	about	
220-13	39117-39121	this	
220-14	39122-39128	method	
220-15	39128-39129	.	

#Text=One optimization to reduce query requests is to fetch a large page range in the application, display smaller page ranges to the user as requested, and request more page ranges as needed.
221-1	39130-39133	One	
221-2	39134-39146	optimization	
221-3	39147-39149	to	
221-4	39150-39156	reduce	
221-5	39157-39162	query	
221-6	39163-39171	requests	
221-7	39172-39174	is	
221-8	39175-39177	to	
221-9	39178-39183	fetch	
221-10	39184-39185	a	
221-11	39186-39191	large	
221-12	39192-39196	page	
221-13	39197-39202	range	
221-14	39203-39205	in	
221-15	39206-39209	the	
221-16	39210-39221	application	
221-17	39221-39222	,	
221-18	39223-39230	display	
221-19	39231-39238	smaller	
221-20	39239-39243	page	
221-21	39244-39250	ranges	
221-22	39251-39253	to	
221-23	39254-39257	the	
221-24	39258-39262	user	
221-25	39263-39265	as	
221-26	39266-39275	requested	
221-27	39275-39276	,	
221-28	39277-39280	and	
221-29	39281-39288	request	
221-30	39289-39293	more	
221-31	39294-39298	page	
221-32	39299-39305	ranges	
221-33	39306-39308	as	
221-34	39309-39315	needed	
221-35	39315-39316	.	

#Text=One other thing people expect from pagination is an estimate of the number of matches.
222-1	39317-39320	One	
222-2	39321-39326	other	
222-3	39327-39332	thing	
222-4	39333-39339	people	
222-5	39340-39346	expect	
222-6	39347-39351	from	
222-7	39352-39362	pagination	
222-8	39363-39365	is	
222-9	39366-39368	an	
222-10	39369-39377	estimate	
222-11	39378-39380	of	
222-12	39381-39384	the	
222-13	39385-39391	number	
222-14	39392-39394	of	
222-15	39395-39402	matches	
222-16	39402-39403	.	

#Text=While you can run count(&ast) to find
#Text=the number of matches, this can be very inefficient.
223-1	39404-39409	While	
223-2	39410-39413	you	
223-3	39414-39417	can	
223-4	39418-39421	run	
223-5	39422-39427	count	
223-6	39427-39428	(	
223-7	39428-39429	&	
223-8	39429-39432	ast	
223-9	39432-39433	)	
223-10	39434-39436	to	
223-11	39437-39441	find	
223-12	39442-39445	the	
223-13	39446-39452	number	
223-14	39453-39455	of	
223-15	39456-39463	matches	
223-16	39463-39464	,	
223-17	39465-39469	this	
223-18	39470-39473	can	
223-19	39474-39476	be	
223-20	39477-39481	very	
223-21	39482-39493	inefficient	
223-22	39493-39494	.	

#Text=A more creative approach is to use the optimizer's statistics as an estimate, since it
#Text=already maintains statistics to generate efficient plans.
224-1	39495-39496	A	
224-2	39497-39501	more	
224-3	39502-39510	creative	
224-4	39511-39519	approach	
224-5	39520-39522	is	
224-6	39523-39525	to	
224-7	39526-39529	use	
224-8	39530-39533	the	
224-9	39534-39545	optimizer's	
224-10	39546-39556	statistics	
224-11	39557-39559	as	
224-12	39560-39562	an	
224-13	39563-39571	estimate	
224-14	39571-39572	,	
224-15	39573-39578	since	
224-16	39579-39581	it	
224-17	39582-39589	already	
224-18	39590-39599	maintains	
224-19	39600-39610	statistics	
224-20	39611-39613	to	
224-21	39614-39622	generate	
224-22	39623-39632	efficient	
224-23	39633-39638	plans	
224-24	39638-39639	.	

#Text=For example, if you create this function:
#Text=CREATE OR REPLACE FUNCTION row_count_estimate(query TEXT) RETURNS TEXT
#Text=AS $$
#Text=DECLARE str TEXT;
#Text=row_count INTEGER;
#Text=BEGIN
#Text=-- get just the first row
#Text=EXECUTE $a$EXPLAIN $a$ || query INTO str;
#Text=-- extract the row value
#Text=SELECT substring(substring(str FROM ' rows=[0-9]+') FROM 7) INTO row_count;
#Text=RETURN row_count;
#Text=END;
#Text=LANGUAGE plpgsql;
#Text=you can use it to estimate the number of rows in a result set.
225-1	39640-39643	For	
225-2	39644-39651	example	
225-3	39651-39652	,	
225-4	39653-39655	if	
225-5	39656-39659	you	
225-6	39660-39666	create	
225-7	39667-39671	this	
225-8	39672-39680	function	
225-9	39680-39681	:	
225-10	39682-39688	CREATE	
225-11	39689-39691	OR	
225-12	39692-39699	REPLACE	
225-13	39700-39708	FUNCTION	
225-14	39709-39727	row_count_estimate	
225-15	39727-39728	(	
225-16	39728-39733	query	
225-17	39734-39738	TEXT	
225-18	39738-39739	)	
225-19	39740-39747	RETURNS	
225-20	39748-39752	TEXT	
225-21	39753-39755	AS	
225-22	39756-39757	$	
225-23	39757-39758	$	
225-24	39759-39766	DECLARE	
225-25	39767-39770	str	
225-26	39771-39775	TEXT	
225-27	39775-39776	;	
225-28	39777-39786	row_count	
225-29	39787-39794	INTEGER	
225-30	39794-39795	;	
225-31	39796-39801	BEGIN	
225-32	39802-39803	-	
225-33	39803-39804	-	
225-34	39805-39808	get	
225-35	39809-39813	just	
225-36	39814-39817	the	
225-37	39818-39823	first	
225-38	39824-39827	row	
225-39	39828-39835	EXECUTE	
225-40	39836-39837	$	
225-41	39837-39838	a	
225-42	39838-39839	$	
225-43	39839-39846	EXPLAIN	
225-44	39847-39848	$	
225-45	39848-39849	a	
225-46	39849-39850	$	
225-47	39851-39852	|	
225-48	39852-39853	|	
225-49	39854-39859	query	
225-50	39860-39864	INTO	
225-51	39865-39868	str	
225-52	39868-39869	;	
225-53	39870-39871	-	
225-54	39871-39872	-	
225-55	39873-39880	extract	
225-56	39881-39884	the	
225-57	39885-39888	row	
225-58	39889-39894	value	
225-59	39895-39901	SELECT	
225-60	39902-39911	substring	
225-61	39911-39912	(	
225-62	39912-39921	substring	
225-63	39921-39922	(	
225-64	39922-39925	str	
225-65	39926-39930	FROM	
225-66	39931-39932	'	
225-67	39933-39937	rows	
225-68	39937-39938	=	
225-69	39938-39939	[	
225-70	39939-39940	0	
225-71	39940-39941	-	
225-72	39941-39942	9	
225-73	39942-39943	]	
225-74	39943-39944	+	
225-75	39944-39945	'	
225-76	39945-39946	)	
225-77	39947-39951	FROM	
225-78	39952-39953	7	
225-79	39953-39954	)	
225-80	39955-39959	INTO	
225-81	39960-39969	row_count	
225-82	39969-39970	;	
225-83	39971-39977	RETURN	
225-84	39978-39987	row_count	
225-85	39987-39988	;	
225-86	39989-39992	END	
225-87	39992-39993	;	
225-88	39994-40002	LANGUAGE	
225-89	40003-40010	plpgsql	
225-90	40010-40011	;	
225-91	40012-40015	you	
225-92	40016-40019	can	
225-93	40020-40023	use	
225-94	40024-40026	it	
225-95	40027-40029	to	
225-96	40030-40038	estimate	
225-97	40039-40042	the	
225-98	40043-40049	number	
225-99	40050-40052	of	
225-100	40053-40057	rows	
225-101	40058-40060	in	
225-102	40061-40062	a	
225-103	40063-40069	result	
225-104	40070-40073	set	
225-105	40073-40074	.	

#Text=(Don't specify limit/offset since we want the total count.)
226-1	40075-40076	(	
226-2	40076-40081	Don't	
226-3	40082-40089	specify	
226-4	40090-40095	limit	
226-5	40095-40096	/	
226-6	40096-40102	offset	
226-7	40103-40108	since	
226-8	40109-40111	we	
226-9	40112-40116	want	
226-10	40117-40120	the	
226-11	40121-40126	total	
226-12	40127-40132	count	
226-13	40132-40133	.	
226-14	40133-40134	)	

#Text=SELECT row_count_estimate('SELECT * FROM product WHERE name LIKE ''a%''');
#Text=row_count_estimate
#Text=--------------------
#Text=To improve the accuracy of the estimates, you can increase the frequency of statistics updates by modifying autovacuum's analyze settings (autovacuum_analyze_) either at the
#Text=cluster or per-table level.
227-1	40135-40141	SELECT	
227-2	40142-40160	row_count_estimate	
227-3	40160-40161	(	
227-4	40161-40162	'	
227-5	40162-40168	SELECT	
227-6	40169-40170	*	
227-7	40171-40175	FROM	
227-8	40176-40183	product	
227-9	40184-40189	WHERE	
227-10	40190-40194	name	
227-11	40195-40199	LIKE	
227-12	40200-40201	'	
227-13	40201-40202	'	
227-14	40202-40203	a	
227-15	40203-40204	%	
227-16	40204-40205	'	
227-17	40205-40206	'	
227-18	40206-40207	'	
227-19	40207-40208	)	
227-20	40208-40209	;	
227-21	40210-40228	row_count_estimate	
227-22	40229-40230	-	
227-23	40230-40231	-	
227-24	40231-40232	-	
227-25	40232-40233	-	
227-26	40233-40234	-	
227-27	40234-40235	-	
227-28	40235-40236	-	
227-29	40236-40237	-	
227-30	40237-40238	-	
227-31	40238-40239	-	
227-32	40239-40240	-	
227-33	40240-40241	-	
227-34	40241-40242	-	
227-35	40242-40243	-	
227-36	40243-40244	-	
227-37	40244-40245	-	
227-38	40245-40246	-	
227-39	40246-40247	-	
227-40	40247-40248	-	
227-41	40248-40249	-	
227-42	40250-40252	To	
227-43	40253-40260	improve	
227-44	40261-40264	the	
227-45	40265-40273	accuracy	
227-46	40274-40276	of	
227-47	40277-40280	the	
227-48	40281-40290	estimates	
227-49	40290-40291	,	
227-50	40292-40295	you	
227-51	40296-40299	can	
227-52	40300-40308	increase	
227-53	40309-40312	the	
227-54	40313-40322	frequency	
227-55	40323-40325	of	
227-56	40326-40336	statistics	
227-57	40337-40344	updates	
227-58	40345-40347	by	
227-59	40348-40357	modifying	
227-60	40358-40370	autovacuum's	
227-61	40371-40378	analyze	
227-62	40379-40387	settings	
227-63	40388-40389	(	
227-64	40389-40407	autovacuum_analyze	
227-65	40407-40408	_	
227-66	40408-40409	)	
227-67	40410-40416	either	
227-68	40417-40419	at	
227-69	40420-40423	the	
227-70	40424-40431	cluster	
227-71	40432-40434	or	
227-72	40435-40444	per-table	
227-73	40445-40450	level	
227-74	40450-40451	.	

#Text=You can
#Text=also run analyze manually.
228-1	40452-40455	You	
228-2	40456-40459	can	
228-3	40460-40464	also	
228-4	40465-40468	run	
228-5	40469-40476	analyze	
228-6	40477-40485	manually	
228-7	40485-40486	.	

#Text=You can also increase the granularity of statistics, which can improve estimates.
229-1	40487-40490	You	
229-2	40491-40494	can	
229-3	40495-40499	also	
229-4	40500-40508	increase	
229-5	40509-40512	the	
229-6	40513-40524	granularity	
229-7	40525-40527	of	
229-8	40528-40538	statistics	
229-9	40538-40539	,	
229-10	40540-40545	which	
229-11	40546-40549	can	
229-12	40550-40557	improve	
229-13	40558-40567	estimates	
229-14	40567-40568	.	

#Text=This can also be set a the
#Text=cluster or per-table level.
230-1	40569-40573	This	
230-2	40574-40577	can	
230-3	40578-40582	also	
230-4	40583-40585	be	
230-5	40586-40589	set	
230-6	40590-40591	a	
230-7	40592-40595	the	
230-8	40596-40603	cluster	
230-9	40604-40606	or	
230-10	40607-40616	per-table	
230-11	40617-40622	level	
230-12	40622-40623	.	

#Text=A creative option is
#Text=to get an exact row count using a count(&ast) query only if explain reports a low row count, meaning count(&ast) would be inexpensive.
231-1	40624-40625	A	
231-2	40626-40634	creative	
231-3	40635-40641	option	
231-4	40642-40644	is	
231-5	40645-40647	to	
231-6	40648-40651	get	
231-7	40652-40654	an	
231-8	40655-40660	exact	
231-9	40661-40664	row	
231-10	40665-40670	count	
231-11	40671-40676	using	
231-12	40677-40678	a	
231-13	40679-40684	count	
231-14	40684-40685	(	
231-15	40685-40686	&	
231-16	40686-40689	ast	
231-17	40689-40690	)	
231-18	40691-40696	query	
231-19	40697-40701	only	
231-20	40702-40704	if	
231-21	40705-40712	explain	
231-22	40713-40720	reports	
231-23	40721-40722	a	
231-24	40723-40726	low	
231-25	40727-40730	row	
231-26	40731-40736	count	
231-27	40736-40737	,	
231-28	40738-40745	meaning	
231-29	40746-40751	count	
231-30	40751-40752	(	
231-31	40752-40753	&	
231-32	40753-40756	ast	
231-33	40756-40757	)	
231-34	40758-40763	would	
231-35	40764-40766	be	
231-36	40767-40778	inexpensive	
231-37	40778-40779	.	

#Text=View or Post Comments
#Text=Invalid Times
#Text=Wednesday, August
#Text=5, 2020
#Text=Have you ever wondered how invalid or ambiguous times are handled by Postgres?
232-1	40780-40784	View	
232-2	40785-40787	or	
232-3	40788-40792	Post	
232-4	40793-40801	Comments	
232-5	40802-40809	Invalid	
232-6	40810-40815	Times	
232-7	40816-40825	Wednesday	
232-8	40825-40826	,	
232-9	40827-40833	August	
232-10	40834-40835	5	
232-11	40835-40836	,	
232-12	40837-40841	2020	
232-13	40842-40846	Have	
232-14	40847-40850	you	
232-15	40851-40855	ever	
232-16	40856-40864	wondered	
232-17	40865-40868	how	
232-18	40869-40876	invalid	
232-19	40877-40879	or	
232-20	40880-40889	ambiguous	
232-21	40890-40895	times	
232-22	40896-40899	are	
232-23	40900-40907	handled	
232-24	40908-40910	by	
232-25	40911-40919	Postgres	
232-26	40919-40920	?	

#Text=For example, during a daylight saving time transition in the
#Text=usa, time switches either from 2am to 3am, or from 2am back to 1am.
233-1	40921-40924	For	
233-2	40925-40932	example	
233-3	40932-40933	,	
233-4	40934-40940	during	
233-5	40941-40942	a	
233-6	40943-40951	daylight	
233-7	40952-40958	saving	
233-8	40959-40963	time	
233-9	40964-40974	transition	
233-10	40975-40977	in	
233-11	40978-40981	the	
233-12	40982-40985	usa	
233-13	40985-40986	,	
233-14	40987-40991	time	
233-15	40992-41000	switches	
233-16	41001-41007	either	
233-17	41008-41012	from	
233-18	41013-41016	2am	
233-19	41017-41019	to	
233-20	41020-41023	3am	
233-21	41023-41024	,	
233-22	41025-41027	or	
233-23	41028-41032	from	
233-24	41033-41036	2am	
233-25	41037-41041	back	
233-26	41042-41044	to	
233-27	41045-41048	1am	
233-28	41048-41049	.	

#Text=On a fall-forward day (the former), how would 2:30am be represented?
234-1	41050-41052	On	
234-2	41053-41054	a	
234-3	41055-41067	fall-forward	
234-4	41068-41071	day	
234-5	41072-41073	(	
234-6	41073-41076	the	
234-7	41077-41083	former	
234-8	41083-41084	)	
234-9	41084-41085	,	
234-10	41086-41089	how	
234-11	41090-41095	would	
234-12	41096-41097	2	
234-13	41097-41098	:	
234-14	41098-41102	30am	
234-15	41103-41105	be	
234-16	41106-41117	represented	
234-17	41117-41118	?	

#Text=Is 1:30am
#Text=during a fall-back day represented as the first or second 1:30am of that day?
235-1	41119-41121	Is	
235-2	41122-41123	1	
235-3	41123-41124	:	
235-4	41124-41128	30am	
235-5	41129-41135	during	
235-6	41136-41137	a	
235-7	41138-41147	fall-back	
235-8	41148-41151	day	
235-9	41152-41163	represented	
235-10	41164-41166	as	
235-11	41167-41170	the	
235-12	41171-41176	first	
235-13	41177-41179	or	
235-14	41180-41186	second	
235-15	41187-41188	1	
235-16	41188-41189	:	
235-17	41189-41193	30am	
235-18	41194-41196	of	
235-19	41197-41201	that	
235-20	41202-41205	day	
235-21	41205-41206	?	

#Text=This email thread explains
#Text=the problem, and this patch documents the behavior.
236-1	41207-41211	This	
236-2	41212-41217	email	
236-3	41218-41224	thread	
236-4	41225-41233	explains	
236-5	41234-41237	the	
236-6	41238-41245	problem	
236-7	41245-41246	,	
236-8	41247-41250	and	
236-9	41251-41255	this	
236-10	41256-41261	patch	
236-11	41262-41271	documents	
236-12	41272-41275	the	
236-13	41276-41284	behavior	
236-14	41284-41285	.	

#Text=(November 4, 2018 was a
#Text="fall back" date in the usa.)
237-1	41286-41287	(	
237-2	41287-41295	November	
237-3	41296-41297	4	
237-4	41297-41298	,	
237-5	41299-41303	2018	
237-6	41304-41307	was	
237-7	41308-41309	a	
237-8	41310-41311	"	
237-9	41311-41315	fall	
237-10	41316-41320	back	
237-11	41320-41321	"	
237-12	41322-41326	date	
237-13	41327-41329	in	
237-14	41330-41333	the	
237-15	41334-41337	usa	
237-16	41337-41338	.	
237-17	41338-41339	)	

#Text=The original poster, Michael Davidson, was showing the first query, and Tom Lane was saying you would need to use one of the two later queries to qualify the 1am time:
#Text=SHOW TIME ZONE;
#Text=TimeZone
#Text=------------------
#Text=America/New_York
#Text=SELECT '2018-11-04 01:00:00'::timestamp WITH TIME ZONE;
#Text=timestamptz
#Text=------------------------
#Text=2018-11-04 01:00:00-05
#Text=SELECT '2018-11-04 01:00:00 EST'::timestamp WITH TIME ZONE;
#Text=timestamptz
#Text=------------------------
#Text=2018-11-04 01:00:00-05
#Text=SELECT '2018-11-04 01:00:00 EDT'::timestamp WITH TIME ZONE;
#Text=timestamptz
#Text=------------------------
#Text=2018-11-04 01:00:00-04
#Text=I am not sure how to specify this for time zones that don't have daylight/non-daylight saving time abbreviations — I suppose utc offsets would need to be used, e.g.:
#Text=SELECT '2018-11-04 01:00:00-05'::timestamp WITH TIME ZONE;
#Text=timestamptz
#Text=------------------------
#Text=2018-11-04 01:00:00-05
#Text=Interestingly, in this case the time zone abbreviation contains more information than the more generic time zone string 'America/New_York'.
238-1	41340-41343	The	
238-2	41344-41352	original	
238-3	41353-41359	poster	
238-4	41359-41360	,	
238-5	41361-41368	Michael	
238-6	41369-41377	Davidson	
238-7	41377-41378	,	
238-8	41379-41382	was	
238-9	41383-41390	showing	
238-10	41391-41394	the	
238-11	41395-41400	first	
238-12	41401-41406	query	
238-13	41406-41407	,	
238-14	41408-41411	and	
238-15	41412-41415	Tom	
238-16	41416-41420	Lane	
238-17	41421-41424	was	
238-18	41425-41431	saying	
238-19	41432-41435	you	
238-20	41436-41441	would	
238-21	41442-41446	need	
238-22	41447-41449	to	
238-23	41450-41453	use	
238-24	41454-41457	one	
238-25	41458-41460	of	
238-26	41461-41464	the	
238-27	41465-41468	two	
238-28	41469-41474	later	
238-29	41475-41482	queries	
238-30	41483-41485	to	
238-31	41486-41493	qualify	
238-32	41494-41497	the	
238-33	41498-41501	1am	
238-34	41502-41506	time	
238-35	41506-41507	:	
238-36	41508-41512	SHOW	
238-37	41513-41517	TIME	
238-38	41518-41522	ZONE	
238-39	41522-41523	;	
238-40	41524-41532	TimeZone	
238-41	41533-41534	-	
238-42	41534-41535	-	
238-43	41535-41536	-	
238-44	41536-41537	-	
238-45	41537-41538	-	
238-46	41538-41539	-	
238-47	41539-41540	-	
238-48	41540-41541	-	
238-49	41541-41542	-	
238-50	41542-41543	-	
238-51	41543-41544	-	
238-52	41544-41545	-	
238-53	41545-41546	-	
238-54	41546-41547	-	
238-55	41547-41548	-	
238-56	41548-41549	-	
238-57	41549-41550	-	
238-58	41550-41551	-	
238-59	41552-41559	America	
238-60	41559-41560	/	
238-61	41560-41568	New_York	
238-62	41569-41575	SELECT	
238-63	41576-41577	'	
238-64	41577-41581	2018	
238-65	41581-41582	-	
238-66	41582-41584	11	
238-67	41584-41585	-	
238-68	41585-41587	04	
238-69	41588-41590	01	
238-70	41590-41591	:	
238-71	41591-41593	00	
238-72	41593-41594	:	
238-73	41594-41596	00	
238-74	41596-41597	'	
238-75	41597-41598	:	
238-76	41598-41599	:	
238-77	41599-41608	timestamp	
238-78	41609-41613	WITH	
238-79	41614-41618	TIME	
238-80	41619-41623	ZONE	
238-81	41623-41624	;	
238-82	41625-41636	timestamptz	
238-83	41637-41638	-	
238-84	41638-41639	-	
238-85	41639-41640	-	
238-86	41640-41641	-	
238-87	41641-41642	-	
238-88	41642-41643	-	
238-89	41643-41644	-	
238-90	41644-41645	-	
238-91	41645-41646	-	
238-92	41646-41647	-	
238-93	41647-41648	-	
238-94	41648-41649	-	
238-95	41649-41650	-	
238-96	41650-41651	-	
238-97	41651-41652	-	
238-98	41652-41653	-	
238-99	41653-41654	-	
238-100	41654-41655	-	
238-101	41655-41656	-	
238-102	41656-41657	-	
238-103	41657-41658	-	
238-104	41658-41659	-	
238-105	41659-41660	-	
238-106	41660-41661	-	
238-107	41662-41666	2018	
238-108	41666-41667	-	
238-109	41667-41669	11	
238-110	41669-41670	-	
238-111	41670-41672	04	
238-112	41673-41675	01	
238-113	41675-41676	:	
238-114	41676-41678	00	
238-115	41678-41679	:	
238-116	41679-41681	00	
238-117	41681-41682	-	
238-118	41682-41684	05	
238-119	41685-41691	SELECT	
238-120	41692-41693	'	
238-121	41693-41697	2018	
238-122	41697-41698	-	
238-123	41698-41700	11	
238-124	41700-41701	-	
238-125	41701-41703	04	
238-126	41704-41706	01	
238-127	41706-41707	:	
238-128	41707-41709	00	
238-129	41709-41710	:	
238-130	41710-41712	00	
238-131	41713-41716	EST	
238-132	41716-41717	'	
238-133	41717-41718	:	
238-134	41718-41719	:	
238-135	41719-41728	timestamp	
238-136	41729-41733	WITH	
238-137	41734-41738	TIME	
238-138	41739-41743	ZONE	
238-139	41743-41744	;	
238-140	41745-41756	timestamptz	
238-141	41757-41758	-	
238-142	41758-41759	-	
238-143	41759-41760	-	
238-144	41760-41761	-	
238-145	41761-41762	-	
238-146	41762-41763	-	
238-147	41763-41764	-	
238-148	41764-41765	-	
238-149	41765-41766	-	
238-150	41766-41767	-	
238-151	41767-41768	-	
238-152	41768-41769	-	
238-153	41769-41770	-	
238-154	41770-41771	-	
238-155	41771-41772	-	
238-156	41772-41773	-	
238-157	41773-41774	-	
238-158	41774-41775	-	
238-159	41775-41776	-	
238-160	41776-41777	-	
238-161	41777-41778	-	
238-162	41778-41779	-	
238-163	41779-41780	-	
238-164	41780-41781	-	
238-165	41782-41786	2018	
238-166	41786-41787	-	
238-167	41787-41789	11	
238-168	41789-41790	-	
238-169	41790-41792	04	
238-170	41793-41795	01	
238-171	41795-41796	:	
238-172	41796-41798	00	
238-173	41798-41799	:	
238-174	41799-41801	00	
238-175	41801-41802	-	
238-176	41802-41804	05	
238-177	41805-41811	SELECT	
238-178	41812-41813	'	
238-179	41813-41817	2018	
238-180	41817-41818	-	
238-181	41818-41820	11	
238-182	41820-41821	-	
238-183	41821-41823	04	
238-184	41824-41826	01	
238-185	41826-41827	:	
238-186	41827-41829	00	
238-187	41829-41830	:	
238-188	41830-41832	00	
238-189	41833-41836	EDT	
238-190	41836-41837	'	
238-191	41837-41838	:	
238-192	41838-41839	:	
238-193	41839-41848	timestamp	
238-194	41849-41853	WITH	
238-195	41854-41858	TIME	
238-196	41859-41863	ZONE	
238-197	41863-41864	;	
238-198	41865-41876	timestamptz	
238-199	41877-41878	-	
238-200	41878-41879	-	
238-201	41879-41880	-	
238-202	41880-41881	-	
238-203	41881-41882	-	
238-204	41882-41883	-	
238-205	41883-41884	-	
238-206	41884-41885	-	
238-207	41885-41886	-	
238-208	41886-41887	-	
238-209	41887-41888	-	
238-210	41888-41889	-	
238-211	41889-41890	-	
238-212	41890-41891	-	
238-213	41891-41892	-	
238-214	41892-41893	-	
238-215	41893-41894	-	
238-216	41894-41895	-	
238-217	41895-41896	-	
238-218	41896-41897	-	
238-219	41897-41898	-	
238-220	41898-41899	-	
238-221	41899-41900	-	
238-222	41900-41901	-	
238-223	41902-41906	2018	
238-224	41906-41907	-	
238-225	41907-41909	11	
238-226	41909-41910	-	
238-227	41910-41912	04	
238-228	41913-41915	01	
238-229	41915-41916	:	
238-230	41916-41918	00	
238-231	41918-41919	:	
238-232	41919-41921	00	
238-233	41921-41922	-	
238-234	41922-41924	04	
238-235	41925-41926	I	
238-236	41927-41929	am	
238-237	41930-41933	not	
238-238	41934-41938	sure	
238-239	41939-41942	how	
238-240	41943-41945	to	
238-241	41946-41953	specify	
238-242	41954-41958	this	
238-243	41959-41962	for	
238-244	41963-41967	time	
238-245	41968-41973	zones	
238-246	41974-41978	that	
238-247	41979-41984	don't	
238-248	41985-41989	have	
238-249	41990-41998	daylight	
238-250	41998-41999	/	
238-251	41999-42011	non-daylight	
238-252	42012-42018	saving	
238-253	42019-42023	time	
238-254	42024-42037	abbreviations	
238-255	42038-42039	—	
238-256	42040-42041	I	
238-257	42042-42049	suppose	
238-258	42050-42053	utc	
238-259	42054-42061	offsets	
238-260	42062-42067	would	
238-261	42068-42072	need	
238-262	42073-42075	to	
238-263	42076-42078	be	
238-264	42079-42083	used	
238-265	42083-42084	,	
238-266	42085-42088	e.g	
238-267	42088-42089	.	
238-268	42089-42090	:	
238-269	42091-42097	SELECT	
238-270	42098-42099	'	
238-271	42099-42103	2018	
238-272	42103-42104	-	
238-273	42104-42106	11	
238-274	42106-42107	-	
238-275	42107-42109	04	
238-276	42110-42112	01	
238-277	42112-42113	:	
238-278	42113-42115	00	
238-279	42115-42116	:	
238-280	42116-42118	00	
238-281	42118-42119	-	
238-282	42119-42121	05	
238-283	42121-42122	'	
238-284	42122-42123	:	
238-285	42123-42124	:	
238-286	42124-42133	timestamp	
238-287	42134-42138	WITH	
238-288	42139-42143	TIME	
238-289	42144-42148	ZONE	
238-290	42148-42149	;	
238-291	42150-42161	timestamptz	
238-292	42162-42163	-	
238-293	42163-42164	-	
238-294	42164-42165	-	
238-295	42165-42166	-	
238-296	42166-42167	-	
238-297	42167-42168	-	
238-298	42168-42169	-	
238-299	42169-42170	-	
238-300	42170-42171	-	
238-301	42171-42172	-	
238-302	42172-42173	-	
238-303	42173-42174	-	
238-304	42174-42175	-	
238-305	42175-42176	-	
238-306	42176-42177	-	
238-307	42177-42178	-	
238-308	42178-42179	-	
238-309	42179-42180	-	
238-310	42180-42181	-	
238-311	42181-42182	-	
238-312	42182-42183	-	
238-313	42183-42184	-	
238-314	42184-42185	-	
238-315	42185-42186	-	
238-316	42187-42191	2018	
238-317	42191-42192	-	
238-318	42192-42194	11	
238-319	42194-42195	-	
238-320	42195-42197	04	
238-321	42198-42200	01	
238-322	42200-42201	:	
238-323	42201-42203	00	
238-324	42203-42204	:	
238-325	42204-42206	00	
238-326	42206-42207	-	
238-327	42207-42209	05	
238-328	42210-42223	Interestingly	
238-329	42223-42224	,	
238-330	42225-42227	in	
238-331	42228-42232	this	
238-332	42233-42237	case	
238-333	42238-42241	the	
238-334	42242-42246	time	
238-335	42247-42251	zone	
238-336	42252-42264	abbreviation	
238-337	42265-42273	contains	
238-338	42274-42278	more	
238-339	42279-42290	information	
238-340	42291-42295	than	
238-341	42296-42299	the	
238-342	42300-42304	more	
238-343	42305-42312	generic	
238-344	42313-42317	time	
238-345	42318-42322	zone	
238-346	42323-42329	string	
238-347	42330-42331	'	
238-348	42331-42338	America	
238-349	42338-42339	/	
238-350	42339-42347	New_York	
238-351	42347-42348	'	
238-352	42348-42349	.	

#Text=View or Post Comments
#Text=Differences Between Dates
#Text=Monday, August
#Text=3, 2020
#Text=What is the difference between two dates?
239-1	42350-42354	View	
239-2	42355-42357	or	
239-3	42358-42362	Post	
239-4	42363-42371	Comments	
239-5	42372-42383	Differences	
239-6	42384-42391	Between	
239-7	42392-42397	Dates	
239-8	42398-42404	Monday	
239-9	42404-42405	,	
239-10	42406-42412	August	
239-11	42413-42414	3	
239-12	42414-42415	,	
239-13	42416-42420	2020	
239-14	42421-42425	What	
239-15	42426-42428	is	
239-16	42429-42432	the	
239-17	42433-42443	difference	
239-18	42444-42451	between	
239-19	42452-42455	two	
239-20	42456-42461	dates	
239-21	42461-42462	?	

#Text=You would think there was one answer, but there isn't.
240-1	42463-42466	You	
240-2	42467-42472	would	
240-3	42473-42478	think	
240-4	42479-42484	there	
240-5	42485-42488	was	
240-6	42489-42492	one	
240-7	42493-42499	answer	
240-8	42499-42500	,	
240-9	42501-42504	but	
240-10	42505-42510	there	
240-11	42511-42516	isn't	
240-12	42516-42517	.	

#Text=You can give an answer in calendar terms (years/months/days), the number of days, or the number of
#Text=seconds.
241-1	42518-42521	You	
241-2	42522-42525	can	
241-3	42526-42530	give	
241-4	42531-42533	an	
241-5	42534-42540	answer	
241-6	42541-42543	in	
241-7	42544-42552	calendar	
241-8	42553-42558	terms	
241-9	42559-42560	(	
241-10	42560-42565	years	
241-11	42565-42566	/	
241-12	42566-42572	months	
241-13	42572-42573	/	
241-14	42573-42577	days	
241-15	42577-42578	)	
241-16	42578-42579	,	
241-17	42580-42583	the	
241-18	42584-42590	number	
241-19	42591-42593	of	
241-20	42594-42598	days	
241-21	42598-42599	,	
241-22	42600-42602	or	
241-23	42603-42606	the	
241-24	42607-42613	number	
241-25	42614-42616	of	
241-26	42617-42624	seconds	
241-27	42624-42625	.	

#Text=Postgres offers all of these options:
#Text=SELECT age('2019-12-25', '2018-06-01');
#Text=age
#Text=-----------------------
#Text=1 year 6 mons 24 days
#Text=SELECT '2019-12-25'::timestamp - '2018-06-01'::timestamp;
#Text=?
242-1	42626-42634	Postgres	
242-2	42635-42641	offers	
242-3	42642-42645	all	
242-4	42646-42648	of	
242-5	42649-42654	these	
242-6	42655-42662	options	
242-7	42662-42663	:	
242-8	42664-42670	SELECT	
242-9	42671-42674	age	
242-10	42674-42675	(	
242-11	42675-42676	'	
242-12	42676-42680	2019	
242-13	42680-42681	-	
242-14	42681-42683	12	
242-15	42683-42684	-	
242-16	42684-42686	25	
242-17	42686-42687	'	
242-18	42687-42688	,	
242-19	42689-42690	'	
242-20	42690-42694	2018	
242-21	42694-42695	-	
242-22	42695-42697	06	
242-23	42697-42698	-	
242-24	42698-42700	01	
242-25	42700-42701	'	
242-26	42701-42702	)	
242-27	42702-42703	;	
242-28	42704-42707	age	
242-29	42708-42709	-	
242-30	42709-42710	-	
242-31	42710-42711	-	
242-32	42711-42712	-	
242-33	42712-42713	-	
242-34	42713-42714	-	
242-35	42714-42715	-	
242-36	42715-42716	-	
242-37	42716-42717	-	
242-38	42717-42718	-	
242-39	42718-42719	-	
242-40	42719-42720	-	
242-41	42720-42721	-	
242-42	42721-42722	-	
242-43	42722-42723	-	
242-44	42723-42724	-	
242-45	42724-42725	-	
242-46	42725-42726	-	
242-47	42726-42727	-	
242-48	42727-42728	-	
242-49	42728-42729	-	
242-50	42729-42730	-	
242-51	42730-42731	-	
242-52	42732-42733	1	
242-53	42734-42738	year	
242-54	42739-42740	6	
242-55	42741-42745	mons	
242-56	42746-42748	24	
242-57	42749-42753	days	
242-58	42754-42760	SELECT	
242-59	42761-42762	'	
242-60	42762-42766	2019	
242-61	42766-42767	-	
242-62	42767-42769	12	
242-63	42769-42770	-	
242-64	42770-42772	25	
242-65	42772-42773	'	
242-66	42773-42774	:	
242-67	42774-42775	:	
242-68	42775-42784	timestamp	
242-69	42785-42786	-	
242-70	42786-42787	 	
242-71	42787-42788	'	
242-72	42788-42792	2018	
242-73	42792-42793	-	
242-74	42793-42795	06	
242-75	42795-42796	-	
242-76	42796-42798	01	
242-77	42798-42799	'	
242-78	42799-42800	:	
242-79	42800-42801	:	
242-80	42801-42810	timestamp	
242-81	42810-42811	;	
242-82	42812-42813	?	

#Text=column?
243-1	42813-42819	column	
243-2	42819-42820	?	

#Text=----------
#Text=572 days
#Text=SELECT '2019-12-25'::timestamptz - '2018-06-01'::timestamptz;
#Text=?
244-1	42821-42822	-	
244-2	42822-42823	-	
244-3	42823-42824	-	
244-4	42824-42825	-	
244-5	42825-42826	-	
244-6	42826-42827	-	
244-7	42827-42828	-	
244-8	42828-42829	-	
244-9	42829-42830	-	
244-10	42830-42831	-	
244-11	42832-42835	572	
244-12	42836-42840	days	
244-13	42841-42847	SELECT	
244-14	42848-42849	'	
244-15	42849-42853	2019	
244-16	42853-42854	-	
244-17	42854-42856	12	
244-18	42856-42857	-	
244-19	42857-42859	25	
244-20	42859-42860	'	
244-21	42860-42861	:	
244-22	42861-42862	:	
244-23	42862-42873	timestamptz	
244-24	42874-42875	-	
244-25	42875-42876	 	
244-26	42876-42877	'	
244-27	42877-42881	2018	
244-28	42881-42882	-	
244-29	42882-42884	06	
244-30	42884-42885	-	
244-31	42885-42887	01	
244-32	42887-42888	'	
244-33	42888-42889	:	
244-34	42889-42890	:	
244-35	42890-42901	timestamptz	
244-36	42901-42902	;	
244-37	42903-42904	?	

#Text=column?
245-1	42904-42910	column	
245-2	42910-42911	?	

#Text=-------------------
#Text=572 days 01:00:00
#Text=SELECT '2019-12-25'::date - '2018-06-01'::date;
#Text=?
246-1	42912-42913	-	
246-2	42913-42914	-	
246-3	42914-42915	-	
246-4	42915-42916	-	
246-5	42916-42917	-	
246-6	42917-42918	-	
246-7	42918-42919	-	
246-8	42919-42920	-	
246-9	42920-42921	-	
246-10	42921-42922	-	
246-11	42922-42923	-	
246-12	42923-42924	-	
246-13	42924-42925	-	
246-14	42925-42926	-	
246-15	42926-42927	-	
246-16	42927-42928	-	
246-17	42928-42929	-	
246-18	42929-42930	-	
246-19	42930-42931	-	
246-20	42932-42935	572	
246-21	42936-42940	days	
246-22	42941-42943	01	
246-23	42943-42944	:	
246-24	42944-42946	00	
246-25	42946-42947	:	
246-26	42947-42949	00	
246-27	42950-42956	SELECT	
246-28	42957-42958	'	
246-29	42958-42962	2019	
246-30	42962-42963	-	
246-31	42963-42965	12	
246-32	42965-42966	-	
246-33	42966-42968	25	
246-34	42968-42969	'	
246-35	42969-42970	:	
246-36	42970-42971	:	
246-37	42971-42975	date	
246-38	42976-42977	-	
246-39	42977-42978	 	
246-40	42978-42979	'	
246-41	42979-42983	2018	
246-42	42983-42984	-	
246-43	42984-42986	06	
246-44	42986-42987	-	
246-45	42987-42989	01	
246-46	42989-42990	'	
246-47	42990-42991	:	
246-48	42991-42992	:	
246-49	42992-42996	date	
246-50	42996-42997	;	
246-51	42998-42999	?	

#Text=column?
247-1	42999-43005	column	
247-2	43005-43006	?	

#Text=----------
#Text=572
#Text=SELECT EXTRACT(EPOCH FROM '2019-12-25'::timestamptz) - EXTRACT(EPOCH FROM '2018-06-01'::timestamptz);
#Text=?
248-1	43007-43008	-	
248-2	43008-43009	-	
248-3	43009-43010	-	
248-4	43010-43011	-	
248-5	43011-43012	-	
248-6	43012-43013	-	
248-7	43013-43014	-	
248-8	43014-43015	-	
248-9	43015-43016	-	
248-10	43016-43017	-	
248-11	43018-43021	572	
248-12	43022-43028	SELECT	
248-13	43029-43036	EXTRACT	
248-14	43036-43037	(	
248-15	43037-43042	EPOCH	
248-16	43043-43047	FROM	
248-17	43048-43049	'	
248-18	43049-43053	2019	
248-19	43053-43054	-	
248-20	43054-43056	12	
248-21	43056-43057	-	
248-22	43057-43059	25	
248-23	43059-43060	'	
248-24	43060-43061	:	
248-25	43061-43062	:	
248-26	43062-43073	timestamptz	
248-27	43073-43074	)	
248-28	43075-43076	-	
248-29	43076-43077	 	
248-30	43077-43084	EXTRACT	
248-31	43084-43085	(	
248-32	43085-43090	EPOCH	
248-33	43091-43095	FROM	
248-34	43096-43097	'	
248-35	43097-43101	2018	
248-36	43101-43102	-	
248-37	43102-43104	06	
248-38	43104-43105	-	
248-39	43105-43107	01	
248-40	43107-43108	'	
248-41	43108-43109	:	
248-42	43109-43110	:	
248-43	43110-43121	timestamptz	
248-44	43121-43122	)	
248-45	43122-43123	;	
248-46	43124-43125	?	

#Text=column?
249-1	43125-43131	column	
249-2	43131-43132	?	

#Text=----------
#Text=49424400
#Text=Unless you are Mr.
250-1	43133-43134	-	
250-2	43134-43135	-	
250-3	43135-43136	-	
250-4	43136-43137	-	
250-5	43137-43138	-	
250-6	43138-43139	-	
250-7	43139-43140	-	
250-8	43140-43141	-	
250-9	43141-43142	-	
250-10	43142-43143	-	
250-11	43144-43152	49424400	
250-12	43153-43159	Unless	
250-13	43160-43163	you	
250-14	43164-43167	are	
250-15	43168-43170	Mr	
250-16	43170-43171	.	

#Text=Spock
#Text=you probably can see the value in all of these methods.
251-1	43172-43177	Spock	
251-2	43178-43181	you	
251-3	43182-43190	probably	
251-4	43191-43194	can	
251-5	43195-43198	see	
251-6	43199-43202	the	
251-7	43203-43208	value	
251-8	43209-43211	in	
251-9	43212-43215	all	
251-10	43216-43218	of	
251-11	43219-43224	these	
251-12	43225-43232	methods	
251-13	43232-43233	.	

#Text=Age() provides the
#Text=simplest option for human consumption.
252-1	43234-43237	Age	
252-2	43237-43238	(	
252-3	43238-43239	)	
252-4	43240-43248	provides	
252-5	43249-43252	the	
252-6	43253-43261	simplest	
252-7	43262-43268	option	
252-8	43269-43272	for	
252-9	43273-43278	human	
252-10	43279-43290	consumption	
252-11	43290-43291	.	

#Text=Timestamp subtraction (no tz) returns an interval, which can calculate day and second differences, but doesn't handle
#Text=daylight saving time changes.
253-1	43292-43301	Timestamp	
253-2	43302-43313	subtraction	
253-3	43314-43315	(	
253-4	43315-43317	no	
253-5	43318-43320	tz	
253-6	43320-43321	)	
253-7	43322-43329	returns	
253-8	43330-43332	an	
253-9	43333-43341	interval	
253-10	43341-43342	,	
253-11	43343-43348	which	
253-12	43349-43352	can	
253-13	43353-43362	calculate	
253-14	43363-43366	day	
253-15	43367-43370	and	
253-16	43371-43377	second	
253-17	43378-43389	differences	
253-18	43389-43390	,	
253-19	43391-43394	but	
253-20	43395-43402	doesn't	
253-21	43403-43409	handle	
253-22	43410-43418	daylight	
253-23	43419-43425	saving	
253-24	43426-43430	time	
253-25	43431-43438	changes	
253-26	43438-43439	.	

#Text=Timestamptz subtraction also returns interval, but handles daylight saving time changes.
254-1	43440-43451	Timestamptz	
254-2	43452-43463	subtraction	
254-3	43464-43468	also	
254-4	43469-43476	returns	
254-5	43477-43485	interval	
254-6	43485-43486	,	
254-7	43487-43490	but	
254-8	43491-43498	handles	
254-9	43499-43507	daylight	
254-10	43508-43514	saving	
254-11	43515-43519	time	
254-12	43520-43527	changes	
254-13	43527-43528	.	

#Text=Subtraction of date
#Text=values returns an integer number of days and is good for cases where the smallest unit of calculation is a day, like bank loan interest or hotel nights.
255-1	43529-43540	Subtraction	
255-2	43541-43543	of	
255-3	43544-43548	date	
255-4	43549-43555	values	
255-5	43556-43563	returns	
255-6	43564-43566	an	
255-7	43567-43574	integer	
255-8	43575-43581	number	
255-9	43582-43584	of	
255-10	43585-43589	days	
255-11	43590-43593	and	
255-12	43594-43596	is	
255-13	43597-43601	good	
255-14	43602-43605	for	
255-15	43606-43611	cases	
255-16	43612-43617	where	
255-17	43618-43621	the	
255-18	43622-43630	smallest	
255-19	43631-43635	unit	
255-20	43636-43638	of	
255-21	43639-43650	calculation	
255-22	43651-43653	is	
255-23	43654-43655	a	
255-24	43656-43659	day	
255-25	43659-43660	,	
255-26	43661-43665	like	
255-27	43666-43670	bank	
255-28	43671-43675	loan	
255-29	43676-43684	interest	
255-30	43685-43687	or	
255-31	43688-43693	hotel	
255-32	43694-43700	nights	
255-33	43700-43701	.	

#Text=Extract with epoch is ideal when
#Text=exact precision is required, like electricity consumption or astronomical measurements.
256-1	43702-43709	Extract	
256-2	43710-43714	with	
256-3	43715-43720	epoch	
256-4	43721-43723	is	
256-5	43724-43729	ideal	
256-6	43730-43734	when	
256-7	43735-43740	exact	
256-8	43741-43750	precision	
256-9	43751-43753	is	
256-10	43754-43762	required	
256-11	43762-43763	,	
256-12	43764-43768	like	
256-13	43769-43780	electricity	
256-14	43781-43792	consumption	
256-15	43793-43795	or	
256-16	43796-43808	astronomical	
256-17	43809-43821	measurements	
256-18	43821-43822	.	

#Text=You can also think of it as the time difference calculations they ignore.
257-1	43823-43826	You	
257-2	43827-43830	can	
257-3	43831-43835	also	
257-4	43836-43841	think	
257-5	43842-43844	of	
257-6	43845-43847	it	
257-7	43848-43850	as	
257-8	43851-43854	the	
257-9	43855-43859	time	
257-10	43860-43870	difference	
257-11	43871-43883	calculations	
257-12	43884-43888	they	
257-13	43889-43895	ignore	
257-14	43895-43896	.	

#Text=For example, age() compares months/days/seconds units to find the simplest difference, and ignores daylight saving time changes,
#Text=and sometimes even ignores leap days.
258-1	43897-43900	For	
258-2	43901-43908	example	
258-3	43908-43909	,	
258-4	43910-43913	age	
258-5	43913-43914	(	
258-6	43914-43915	)	
258-7	43916-43924	compares	
258-8	43925-43931	months	
258-9	43931-43932	/	
258-10	43932-43936	days	
258-11	43936-43937	/	
258-12	43937-43944	seconds	
258-13	43945-43950	units	
258-14	43951-43953	to	
258-15	43954-43958	find	
258-16	43959-43962	the	
258-17	43963-43971	simplest	
258-18	43972-43982	difference	
258-19	43982-43983	,	
258-20	43984-43987	and	
258-21	43988-43995	ignores	
258-22	43996-44004	daylight	
258-23	44005-44011	saving	
258-24	44012-44016	time	
258-25	44017-44024	changes	
258-26	44024-44025	,	
258-27	44026-44029	and	
258-28	44030-44039	sometimes	
258-29	44040-44044	even	
258-30	44045-44052	ignores	
258-31	44053-44057	leap	
258-32	44058-44062	days	
258-33	44062-44063	.	

#Text=Date and timestamp subtraction ignores daylight saving time changes.
259-1	44064-44068	Date	
259-2	44069-44072	and	
259-3	44073-44082	timestamp	
259-4	44083-44094	subtraction	
259-5	44095-44102	ignores	
259-6	44103-44111	daylight	
259-7	44112-44118	saving	
259-8	44119-44123	time	
259-9	44124-44131	changes	
259-10	44131-44132	.	

#Text=Subtraction using timestamptz and
#Text=extract with epoch honor both.
260-1	44133-44144	Subtraction	
260-2	44145-44150	using	
260-3	44151-44162	timestamptz	
260-4	44163-44166	and	
260-5	44167-44174	extract	
260-6	44175-44179	with	
260-7	44180-44185	epoch	
260-8	44186-44191	honor	
260-9	44192-44196	both	
260-10	44196-44197	.	

#Text=(Unfortunately, Postgres ignores leap
#Text=seconds).
261-1	44198-44199	(	
261-2	44199-44212	Unfortunately	
261-3	44212-44213	,	
261-4	44214-44222	Postgres	
261-5	44223-44230	ignores	
261-6	44231-44235	leap	
261-7	44236-44243	seconds	
261-8	44243-44244	)	
261-9	44244-44245	.	

#Text=Here is an example of age() ignoring leap days when the day of the month is the same, but reflecting leap days if the the days of the month are different:
#Text=-- leap year, same day of the month
#Text=SELECT age('2020-03-01', '2020-02-01');
#Text=age
#Text=-------
#Text=1 mon
#Text=-- non-leap year, same day of the month
#Text=SELECT age('2021-03-01', '2021-02-01');
#Text=age
#Text=-------
#Text=1 mon
#Text=-- leap year, different day of the month
#Text=SELECT age('2020-03-01', '2020-02-02');
#Text=age
#Text=---------
#Text=28 days
#Text=-- non-leap year, different day of the month
#Text=SELECT age('2021-03-01', '2021-02-02');
#Text=age
#Text=---------
#Text=27 days
#Text=This is because age() tries to find the simplest difference.
262-1	44246-44250	Here	
262-2	44251-44253	is	
262-3	44254-44256	an	
262-4	44257-44264	example	
262-5	44265-44267	of	
262-6	44268-44271	age	
262-7	44271-44272	(	
262-8	44272-44273	)	
262-9	44274-44282	ignoring	
262-10	44283-44287	leap	
262-11	44288-44292	days	
262-12	44293-44297	when	
262-13	44298-44301	the	
262-14	44302-44305	day	
262-15	44306-44308	of	
262-16	44309-44312	the	
262-17	44313-44318	month	
262-18	44319-44321	is	
262-19	44322-44325	the	
262-20	44326-44330	same	
262-21	44330-44331	,	
262-22	44332-44335	but	
262-23	44336-44346	reflecting	
262-24	44347-44351	leap	
262-25	44352-44356	days	
262-26	44357-44359	if	
262-27	44360-44363	the	
262-28	44364-44367	the	
262-29	44368-44372	days	
262-30	44373-44375	of	
262-31	44376-44379	the	
262-32	44380-44385	month	
262-33	44386-44389	are	
262-34	44390-44399	different	
262-35	44399-44400	:	
262-36	44401-44402	-	
262-37	44402-44403	-	
262-38	44404-44408	leap	
262-39	44409-44413	year	
262-40	44413-44414	,	
262-41	44415-44419	same	
262-42	44420-44423	day	
262-43	44424-44426	of	
262-44	44427-44430	the	
262-45	44431-44436	month	
262-46	44437-44443	SELECT	
262-47	44444-44447	age	
262-48	44447-44448	(	
262-49	44448-44449	'	
262-50	44449-44453	2020	
262-51	44453-44454	-	
262-52	44454-44456	03	
262-53	44456-44457	-	
262-54	44457-44459	01	
262-55	44459-44460	'	
262-56	44460-44461	,	
262-57	44462-44463	'	
262-58	44463-44467	2020	
262-59	44467-44468	-	
262-60	44468-44470	02	
262-61	44470-44471	-	
262-62	44471-44473	01	
262-63	44473-44474	'	
262-64	44474-44475	)	
262-65	44475-44476	;	
262-66	44477-44480	age	
262-67	44481-44482	-	
262-68	44482-44483	-	
262-69	44483-44484	-	
262-70	44484-44485	-	
262-71	44485-44486	-	
262-72	44486-44487	-	
262-73	44487-44488	-	
262-74	44489-44490	1	
262-75	44491-44494	mon	
262-76	44495-44496	-	
262-77	44496-44497	-	
262-78	44498-44506	non-leap	
262-79	44507-44511	year	
262-80	44511-44512	,	
262-81	44513-44517	same	
262-82	44518-44521	day	
262-83	44522-44524	of	
262-84	44525-44528	the	
262-85	44529-44534	month	
262-86	44535-44541	SELECT	
262-87	44542-44545	age	
262-88	44545-44546	(	
262-89	44546-44547	'	
262-90	44547-44551	2021	
262-91	44551-44552	-	
262-92	44552-44554	03	
262-93	44554-44555	-	
262-94	44555-44557	01	
262-95	44557-44558	'	
262-96	44558-44559	,	
262-97	44560-44561	'	
262-98	44561-44565	2021	
262-99	44565-44566	-	
262-100	44566-44568	02	
262-101	44568-44569	-	
262-102	44569-44571	01	
262-103	44571-44572	'	
262-104	44572-44573	)	
262-105	44573-44574	;	
262-106	44575-44578	age	
262-107	44579-44580	-	
262-108	44580-44581	-	
262-109	44581-44582	-	
262-110	44582-44583	-	
262-111	44583-44584	-	
262-112	44584-44585	-	
262-113	44585-44586	-	
262-114	44587-44588	1	
262-115	44589-44592	mon	
262-116	44593-44594	-	
262-117	44594-44595	-	
262-118	44596-44600	leap	
262-119	44601-44605	year	
262-120	44605-44606	,	
262-121	44607-44616	different	
262-122	44617-44620	day	
262-123	44621-44623	of	
262-124	44624-44627	the	
262-125	44628-44633	month	
262-126	44634-44640	SELECT	
262-127	44641-44644	age	
262-128	44644-44645	(	
262-129	44645-44646	'	
262-130	44646-44650	2020	
262-131	44650-44651	-	
262-132	44651-44653	03	
262-133	44653-44654	-	
262-134	44654-44656	01	
262-135	44656-44657	'	
262-136	44657-44658	,	
262-137	44659-44660	'	
262-138	44660-44664	2020	
262-139	44664-44665	-	
262-140	44665-44667	02	
262-141	44667-44668	-	
262-142	44668-44670	02	
262-143	44670-44671	'	
262-144	44671-44672	)	
262-145	44672-44673	;	
262-146	44674-44677	age	
262-147	44678-44679	-	
262-148	44679-44680	-	
262-149	44680-44681	-	
262-150	44681-44682	-	
262-151	44682-44683	-	
262-152	44683-44684	-	
262-153	44684-44685	-	
262-154	44685-44686	-	
262-155	44686-44687	-	
262-156	44688-44690	28	
262-157	44691-44695	days	
262-158	44696-44697	-	
262-159	44697-44698	-	
262-160	44699-44707	non-leap	
262-161	44708-44712	year	
262-162	44712-44713	,	
262-163	44714-44723	different	
262-164	44724-44727	day	
262-165	44728-44730	of	
262-166	44731-44734	the	
262-167	44735-44740	month	
262-168	44741-44747	SELECT	
262-169	44748-44751	age	
262-170	44751-44752	(	
262-171	44752-44753	'	
262-172	44753-44757	2021	
262-173	44757-44758	-	
262-174	44758-44760	03	
262-175	44760-44761	-	
262-176	44761-44763	01	
262-177	44763-44764	'	
262-178	44764-44765	,	
262-179	44766-44767	'	
262-180	44767-44771	2021	
262-181	44771-44772	-	
262-182	44772-44774	02	
262-183	44774-44775	-	
262-184	44775-44777	02	
262-185	44777-44778	'	
262-186	44778-44779	)	
262-187	44779-44780	;	
262-188	44781-44784	age	
262-189	44785-44786	-	
262-190	44786-44787	-	
262-191	44787-44788	-	
262-192	44788-44789	-	
262-193	44789-44790	-	
262-194	44790-44791	-	
262-195	44791-44792	-	
262-196	44792-44793	-	
262-197	44793-44794	-	
262-198	44795-44797	27	
262-199	44798-44802	days	
262-200	44803-44807	This	
262-201	44808-44810	is	
262-202	44811-44818	because	
262-203	44819-44822	age	
262-204	44822-44823	(	
262-205	44823-44824	)	
262-206	44825-44830	tries	
262-207	44831-44833	to	
262-208	44834-44838	find	
262-209	44839-44842	the	
262-210	44843-44851	simplest	
262-211	44852-44862	difference	
262-212	44862-44863	.	

#Text=Here is an example of daylight saving time changes using age() and subtraction:
#Text=-- Daylight saving time started in America/New_York on March 8, 2020 02:00:00
#Text=SHOW timezone;
#Text=TimeZone
#Text=------------------
#Text=America/New_York
#Text=SELECT age('2020-03-09', '2020-03-08');
#Text=age
#Text=-------
#Text=1 day
#Text=SELECT age('2020-03-09 00:00:00'::timestamptz, '2020-03-08 00:00:00'::timestamptz);
#Text=age
#Text=-------
#Text=1 day
#Text=SELECT '2020-03-09'::date - '2020-03-08'::date;
#Text=?
263-1	44864-44868	Here	
263-2	44869-44871	is	
263-3	44872-44874	an	
263-4	44875-44882	example	
263-5	44883-44885	of	
263-6	44886-44894	daylight	
263-7	44895-44901	saving	
263-8	44902-44906	time	
263-9	44907-44914	changes	
263-10	44915-44920	using	
263-11	44921-44924	age	
263-12	44924-44925	(	
263-13	44925-44926	)	
263-14	44927-44930	and	
263-15	44931-44942	subtraction	
263-16	44942-44943	:	
263-17	44944-44945	-	
263-18	44945-44946	-	
263-19	44947-44955	Daylight	
263-20	44956-44962	saving	
263-21	44963-44967	time	
263-22	44968-44975	started	
263-23	44976-44978	in	
263-24	44979-44986	America	
263-25	44986-44987	/	
263-26	44987-44995	New_York	
263-27	44996-44998	on	
263-28	44999-45004	March	
263-29	45005-45006	8	
263-30	45006-45007	,	
263-31	45008-45012	2020	
263-32	45013-45015	02	
263-33	45015-45016	:	
263-34	45016-45018	00	
263-35	45018-45019	:	
263-36	45019-45021	00	
263-37	45022-45026	SHOW	
263-38	45027-45035	timezone	
263-39	45035-45036	;	
263-40	45037-45045	TimeZone	
263-41	45046-45047	-	
263-42	45047-45048	-	
263-43	45048-45049	-	
263-44	45049-45050	-	
263-45	45050-45051	-	
263-46	45051-45052	-	
263-47	45052-45053	-	
263-48	45053-45054	-	
263-49	45054-45055	-	
263-50	45055-45056	-	
263-51	45056-45057	-	
263-52	45057-45058	-	
263-53	45058-45059	-	
263-54	45059-45060	-	
263-55	45060-45061	-	
263-56	45061-45062	-	
263-57	45062-45063	-	
263-58	45063-45064	-	
263-59	45065-45072	America	
263-60	45072-45073	/	
263-61	45073-45081	New_York	
263-62	45082-45088	SELECT	
263-63	45089-45092	age	
263-64	45092-45093	(	
263-65	45093-45094	'	
263-66	45094-45098	2020	
263-67	45098-45099	-	
263-68	45099-45101	03	
263-69	45101-45102	-	
263-70	45102-45104	09	
263-71	45104-45105	'	
263-72	45105-45106	,	
263-73	45107-45108	'	
263-74	45108-45112	2020	
263-75	45112-45113	-	
263-76	45113-45115	03	
263-77	45115-45116	-	
263-78	45116-45118	08	
263-79	45118-45119	'	
263-80	45119-45120	)	
263-81	45120-45121	;	
263-82	45122-45125	age	
263-83	45126-45127	-	
263-84	45127-45128	-	
263-85	45128-45129	-	
263-86	45129-45130	-	
263-87	45130-45131	-	
263-88	45131-45132	-	
263-89	45132-45133	-	
263-90	45134-45135	1	
263-91	45136-45139	day	
263-92	45140-45146	SELECT	
263-93	45147-45150	age	
263-94	45150-45151	(	
263-95	45151-45152	'	
263-96	45152-45156	2020	
263-97	45156-45157	-	
263-98	45157-45159	03	
263-99	45159-45160	-	
263-100	45160-45162	09	
263-101	45163-45165	00	
263-102	45165-45166	:	
263-103	45166-45168	00	
263-104	45168-45169	:	
263-105	45169-45171	00	
263-106	45171-45172	'	
263-107	45172-45173	:	
263-108	45173-45174	:	
263-109	45174-45185	timestamptz	
263-110	45185-45186	,	
263-111	45187-45188	'	
263-112	45188-45192	2020	
263-113	45192-45193	-	
263-114	45193-45195	03	
263-115	45195-45196	-	
263-116	45196-45198	08	
263-117	45199-45201	00	
263-118	45201-45202	:	
263-119	45202-45204	00	
263-120	45204-45205	:	
263-121	45205-45207	00	
263-122	45207-45208	'	
263-123	45208-45209	:	
263-124	45209-45210	:	
263-125	45210-45221	timestamptz	
263-126	45221-45222	)	
263-127	45222-45223	;	
263-128	45224-45227	age	
263-129	45228-45229	-	
263-130	45229-45230	-	
263-131	45230-45231	-	
263-132	45231-45232	-	
263-133	45232-45233	-	
263-134	45233-45234	-	
263-135	45234-45235	-	
263-136	45236-45237	1	
263-137	45238-45241	day	
263-138	45242-45248	SELECT	
263-139	45249-45250	'	
263-140	45250-45254	2020	
263-141	45254-45255	-	
263-142	45255-45257	03	
263-143	45257-45258	-	
263-144	45258-45260	09	
263-145	45260-45261	'	
263-146	45261-45262	:	
263-147	45262-45263	:	
263-148	45263-45267	date	
263-149	45268-45269	-	
263-150	45269-45270	 	
263-151	45270-45271	'	
263-152	45271-45275	2020	
263-153	45275-45276	-	
263-154	45276-45278	03	
263-155	45278-45279	-	
263-156	45279-45281	08	
263-157	45281-45282	'	
263-158	45282-45283	:	
263-159	45283-45284	:	
263-160	45284-45288	date	
263-161	45288-45289	;	
263-162	45290-45291	?	

#Text=column?
264-1	45291-45297	column	
264-2	45297-45298	?	

#Text=----------
#Text=SELECT '2020-03-09'::timestamp - '2020-03-08'::timestamp;
#Text=?
265-1	45299-45300	-	
265-2	45300-45301	-	
265-3	45301-45302	-	
265-4	45302-45303	-	
265-5	45303-45304	-	
265-6	45304-45305	-	
265-7	45305-45306	-	
265-8	45306-45307	-	
265-9	45307-45308	-	
265-10	45308-45309	-	
265-11	45310-45316	SELECT	
265-12	45317-45318	'	
265-13	45318-45322	2020	
265-14	45322-45323	-	
265-15	45323-45325	03	
265-16	45325-45326	-	
265-17	45326-45328	09	
265-18	45328-45329	'	
265-19	45329-45330	:	
265-20	45330-45331	:	
265-21	45331-45340	timestamp	
265-22	45341-45342	-	
265-23	45342-45343	 	
265-24	45343-45344	'	
265-25	45344-45348	2020	
265-26	45348-45349	-	
265-27	45349-45351	03	
265-28	45351-45352	-	
265-29	45352-45354	08	
265-30	45354-45355	'	
265-31	45355-45356	:	
265-32	45356-45357	:	
265-33	45357-45366	timestamp	
265-34	45366-45367	;	
265-35	45368-45369	?	

#Text=column?
266-1	45369-45375	column	
266-2	45375-45376	?	

#Text=----------
#Text=1 day
#Text=SELECT '2020-03-09'::timestamptz - '2020-03-08'::timestamptz;
#Text=?
267-1	45377-45378	-	
267-2	45378-45379	-	
267-3	45379-45380	-	
267-4	45380-45381	-	
267-5	45381-45382	-	
267-6	45382-45383	-	
267-7	45383-45384	-	
267-8	45384-45385	-	
267-9	45385-45386	-	
267-10	45386-45387	-	
267-11	45388-45389	1	
267-12	45390-45393	day	
267-13	45394-45400	SELECT	
267-14	45401-45402	'	
267-15	45402-45406	2020	
267-16	45406-45407	-	
267-17	45407-45409	03	
267-18	45409-45410	-	
267-19	45410-45412	09	
267-20	45412-45413	'	
267-21	45413-45414	:	
267-22	45414-45415	:	
267-23	45415-45426	timestamptz	
267-24	45427-45428	-	
267-25	45428-45429	 	
267-26	45429-45430	'	
267-27	45430-45434	2020	
267-28	45434-45435	-	
267-29	45435-45437	03	
267-30	45437-45438	-	
267-31	45438-45440	08	
267-32	45440-45441	'	
267-33	45441-45442	:	
267-34	45442-45443	:	
267-35	45443-45454	timestamptz	
267-36	45454-45455	;	
267-37	45456-45457	?	

#Text=column?
268-1	45457-45463	column	
268-2	45463-45464	?	

#Text=----------
#Text=23:00:00
#Text=-- a 23-hour day
#Text=SELECT EXTRACT(EPOCH FROM '2020-03-09'::timestamptz) - EXTRACT(EPOCH FROM '2020-03-08'::timestamptz);
#Text=?
269-1	45465-45466	-	
269-2	45466-45467	-	
269-3	45467-45468	-	
269-4	45468-45469	-	
269-5	45469-45470	-	
269-6	45470-45471	-	
269-7	45471-45472	-	
269-8	45472-45473	-	
269-9	45473-45474	-	
269-10	45474-45475	-	
269-11	45476-45478	23	
269-12	45478-45479	:	
269-13	45479-45481	00	
269-14	45481-45482	:	
269-15	45482-45484	00	
269-16	45485-45486	-	
269-17	45486-45487	-	
269-18	45488-45489	a	
269-19	45490-45492	23	
269-20	45492-45493	-	
269-21	45493-45497	hour	
269-22	45498-45501	day	
269-23	45502-45508	SELECT	
269-24	45509-45516	EXTRACT	
269-25	45516-45517	(	
269-26	45517-45522	EPOCH	
269-27	45523-45527	FROM	
269-28	45528-45529	'	
269-29	45529-45533	2020	
269-30	45533-45534	-	
269-31	45534-45536	03	
269-32	45536-45537	-	
269-33	45537-45539	09	
269-34	45539-45540	'	
269-35	45540-45541	:	
269-36	45541-45542	:	
269-37	45542-45553	timestamptz	
269-38	45553-45554	)	
269-39	45555-45556	-	
269-40	45556-45557	 	
269-41	45557-45564	EXTRACT	
269-42	45564-45565	(	
269-43	45565-45570	EPOCH	
269-44	45571-45575	FROM	
269-45	45576-45577	'	
269-46	45577-45581	2020	
269-47	45581-45582	-	
269-48	45582-45584	03	
269-49	45584-45585	-	
269-50	45585-45587	08	
269-51	45587-45588	'	
269-52	45588-45589	:	
269-53	45589-45590	:	
269-54	45590-45601	timestamptz	
269-55	45601-45602	)	
269-56	45602-45603	;	
269-57	45604-45605	?	

#Text=column?
270-1	45605-45611	column	
270-2	45611-45612	?	

#Text=----------
#Text=82800
#Text=-- a 24-hour day
#Text=SELECT EXTRACT(EPOCH FROM '2020-03-10'::timestamptz) - EXTRACT(EPOCH FROM '2020-03-09'::timestamptz);
#Text=?
271-1	45613-45614	-	
271-2	45614-45615	-	
271-3	45615-45616	-	
271-4	45616-45617	-	
271-5	45617-45618	-	
271-6	45618-45619	-	
271-7	45619-45620	-	
271-8	45620-45621	-	
271-9	45621-45622	-	
271-10	45622-45623	-	
271-11	45624-45629	82800	
271-12	45630-45631	-	
271-13	45631-45632	-	
271-14	45633-45634	a	
271-15	45635-45637	24	
271-16	45637-45638	-	
271-17	45638-45642	hour	
271-18	45643-45646	day	
271-19	45647-45653	SELECT	
271-20	45654-45661	EXTRACT	
271-21	45661-45662	(	
271-22	45662-45667	EPOCH	
271-23	45668-45672	FROM	
271-24	45673-45674	'	
271-25	45674-45678	2020	
271-26	45678-45679	-	
271-27	45679-45681	03	
271-28	45681-45682	-	
271-29	45682-45684	10	
271-30	45684-45685	'	
271-31	45685-45686	:	
271-32	45686-45687	:	
271-33	45687-45698	timestamptz	
271-34	45698-45699	)	
271-35	45700-45701	-	
271-36	45701-45702	 	
271-37	45702-45709	EXTRACT	
271-38	45709-45710	(	
271-39	45710-45715	EPOCH	
271-40	45716-45720	FROM	
271-41	45721-45722	'	
271-42	45722-45726	2020	
271-43	45726-45727	-	
271-44	45727-45729	03	
271-45	45729-45730	-	
271-46	45730-45732	09	
271-47	45732-45733	'	
271-48	45733-45734	:	
271-49	45734-45735	:	
271-50	45735-45746	timestamptz	
271-51	45746-45747	)	
271-52	45747-45748	;	
271-53	45749-45750	?	

#Text=column?
272-1	45750-45756	column	
272-2	45756-45757	?	

#Text=----------
#Text=86400
#Text=If you are doing a later calculation using a computed date difference, consider how accurate you want the result to be:
#Text=Do you want it to be the same day based on the calendar?
273-1	45758-45759	-	
273-2	45759-45760	-	
273-3	45760-45761	-	
273-4	45761-45762	-	
273-5	45762-45763	-	
273-6	45763-45764	-	
273-7	45764-45765	-	
273-8	45765-45766	-	
273-9	45766-45767	-	
273-10	45767-45768	-	
273-11	45769-45774	86400	
273-12	45775-45777	If	
273-13	45778-45781	you	
273-14	45782-45785	are	
273-15	45786-45791	doing	
273-16	45792-45793	a	
273-17	45794-45799	later	
273-18	45800-45811	calculation	
273-19	45812-45817	using	
273-20	45818-45819	a	
273-21	45820-45828	computed	
273-22	45829-45833	date	
273-23	45834-45844	difference	
273-24	45844-45845	,	
273-25	45846-45854	consider	
273-26	45855-45858	how	
273-27	45859-45867	accurate	
273-28	45868-45871	you	
273-29	45872-45876	want	
273-30	45877-45880	the	
273-31	45881-45887	result	
273-32	45888-45890	to	
273-33	45891-45893	be	
273-34	45893-45894	:	
273-35	45895-45897	Do	
273-36	45898-45901	you	
273-37	45902-45906	want	
273-38	45907-45909	it	
273-39	45910-45912	to	
273-40	45913-45915	be	
273-41	45916-45919	the	
273-42	45920-45924	same	
273-43	45925-45928	day	
273-44	45929-45934	based	
273-45	45935-45937	on	
273-46	45938-45941	the	
273-47	45942-45950	calendar	
273-48	45950-45951	?	

#Text=Use age()
#Text=Do you want the number of days to be exactly the same?
274-1	45952-45955	Use	
274-2	45956-45959	age	
274-3	45959-45960	(	
274-4	45960-45961	)	
274-5	45962-45964	Do	
274-6	45965-45968	you	
274-7	45969-45973	want	
274-8	45974-45977	the	
274-9	45978-45984	number	
274-10	45985-45987	of	
274-11	45988-45992	days	
274-12	45993-45995	to	
274-13	45996-45998	be	
274-14	45999-46006	exactly	
274-15	46007-46010	the	
274-16	46011-46015	same	
274-17	46015-46016	?	

#Text=Use date or timestamp subtraction
#Text=Do you want the number of seconds to be exactly the same?
275-1	46017-46020	Use	
275-2	46021-46025	date	
275-3	46026-46028	or	
275-4	46029-46038	timestamp	
275-5	46039-46050	subtraction	
275-6	46051-46053	Do	
275-7	46054-46057	you	
275-8	46058-46062	want	
275-9	46063-46066	the	
275-10	46067-46073	number	
275-11	46074-46076	of	
275-12	46077-46084	seconds	
275-13	46085-46087	to	
275-14	46088-46090	be	
275-15	46091-46098	exactly	
275-16	46099-46102	the	
275-17	46103-46107	same	
275-18	46107-46108	?	

#Text=Use timestamptz subtraction or extract with epoch
#Text=I have already written about the complexities of using and computing
#Text=interval values.
276-1	46109-46112	Use	
276-2	46113-46124	timestamptz	
276-3	46125-46136	subtraction	
276-4	46137-46139	or	
276-5	46140-46147	extract	
276-6	46148-46152	with	
276-7	46153-46158	epoch	
276-8	46159-46160	I	
276-9	46161-46165	have	
276-10	46166-46173	already	
276-11	46174-46181	written	
276-12	46182-46187	about	
276-13	46188-46191	the	
276-14	46192-46204	complexities	
276-15	46205-46207	of	
276-16	46208-46213	using	
276-17	46214-46217	and	
276-18	46218-46227	computing	
276-19	46228-46236	interval	
276-20	46237-46243	values	
276-21	46243-46244	.	

#Text=View or Post Comments
#Text=Computing Interval Values
#Text=Friday, July 31, 2020
#Text=The interval data type stores time duration as months, days, and seconds.
277-1	46245-46249	View	
277-2	46250-46252	or	
277-3	46253-46257	Post	
277-4	46258-46266	Comments	
277-5	46267-46276	Computing	
277-6	46277-46285	Interval	
277-7	46286-46292	Values	
277-8	46293-46299	Friday	
277-9	46299-46300	,	
277-10	46301-46305	July	
277-11	46306-46308	31	
277-12	46308-46309	,	
277-13	46310-46314	2020	
277-14	46315-46318	The	
277-15	46319-46327	interval	
277-16	46328-46332	data	
277-17	46333-46337	type	
277-18	46338-46344	stores	
277-19	46345-46349	time	
277-20	46350-46358	duration	
277-21	46359-46361	as	
277-22	46362-46368	months	
277-23	46368-46369	,	
277-24	46370-46374	days	
277-25	46374-46375	,	
277-26	46376-46379	and	
277-27	46380-46387	seconds	
277-28	46387-46388	.	

#Text=Years are represented as a fixed
#Text=number of months, and hours and minutes as a fixed number of seconds.
278-1	46389-46394	Years	
278-2	46395-46398	are	
278-3	46399-46410	represented	
278-4	46411-46413	as	
278-5	46414-46415	a	
278-6	46416-46421	fixed	
278-7	46422-46428	number	
278-8	46429-46431	of	
278-9	46432-46438	months	
278-10	46438-46439	,	
278-11	46440-46443	and	
278-12	46444-46449	hours	
278-13	46450-46453	and	
278-14	46454-46461	minutes	
278-15	46462-46464	as	
278-16	46465-46466	a	
278-17	46467-46472	fixed	
278-18	46473-46479	number	
278-19	46480-46482	of	
278-20	46483-46490	seconds	
278-21	46490-46491	.	

#Text=Using interval values makes time computation very simple:
#Text=-- Daylight saving time started in America/New_York on March 8, 2020 02:00:00
#Text=SHOW timezone;
#Text=TimeZone
#Text=------------------
#Text=America/New_York
#Text=SELECT '2020-03-07 00:00:00'::timestamptz + '2 days';
#Text=?
279-1	46492-46497	Using	
279-2	46498-46506	interval	
279-3	46507-46513	values	
279-4	46514-46519	makes	
279-5	46520-46524	time	
279-6	46525-46536	computation	
279-7	46537-46541	very	
279-8	46542-46548	simple	
279-9	46548-46549	:	
279-10	46550-46551	-	
279-11	46551-46552	-	
279-12	46553-46561	Daylight	
279-13	46562-46568	saving	
279-14	46569-46573	time	
279-15	46574-46581	started	
279-16	46582-46584	in	
279-17	46585-46592	America	
279-18	46592-46593	/	
279-19	46593-46601	New_York	
279-20	46602-46604	on	
279-21	46605-46610	March	
279-22	46611-46612	8	
279-23	46612-46613	,	
279-24	46614-46618	2020	
279-25	46619-46621	02	
279-26	46621-46622	:	
279-27	46622-46624	00	
279-28	46624-46625	:	
279-29	46625-46627	00	
279-30	46628-46632	SHOW	
279-31	46633-46641	timezone	
279-32	46641-46642	;	
279-33	46643-46651	TimeZone	
279-34	46652-46653	-	
279-35	46653-46654	-	
279-36	46654-46655	-	
279-37	46655-46656	-	
279-38	46656-46657	-	
279-39	46657-46658	-	
279-40	46658-46659	-	
279-41	46659-46660	-	
279-42	46660-46661	-	
279-43	46661-46662	-	
279-44	46662-46663	-	
279-45	46663-46664	-	
279-46	46664-46665	-	
279-47	46665-46666	-	
279-48	46666-46667	-	
279-49	46667-46668	-	
279-50	46668-46669	-	
279-51	46669-46670	-	
279-52	46671-46678	America	
279-53	46678-46679	/	
279-54	46679-46687	New_York	
279-55	46688-46694	SELECT	
279-56	46695-46696	'	
279-57	46696-46700	2020	
279-58	46700-46701	-	
279-59	46701-46703	03	
279-60	46703-46704	-	
279-61	46704-46706	07	
279-62	46707-46709	00	
279-63	46709-46710	:	
279-64	46710-46712	00	
279-65	46712-46713	:	
279-66	46713-46715	00	
279-67	46715-46716	'	
279-68	46716-46717	:	
279-69	46717-46718	:	
279-70	46718-46729	timestamptz	
279-71	46730-46731	+	
279-72	46732-46733	'	
279-73	46733-46734	2	
279-74	46735-46739	days	
279-75	46739-46740	'	
279-76	46740-46741	;	
279-77	46742-46743	?	

#Text=column?
280-1	46743-46749	column	
280-2	46749-46750	?	

#Text=------------------------
#Text=2020-03-09 00:00:00-04
#Text=SELECT '2020-03-07 00:00:00'::timestamptz + '48 hours';
#Text=?
281-1	46751-46752	-	
281-2	46752-46753	-	
281-3	46753-46754	-	
281-4	46754-46755	-	
281-5	46755-46756	-	
281-6	46756-46757	-	
281-7	46757-46758	-	
281-8	46758-46759	-	
281-9	46759-46760	-	
281-10	46760-46761	-	
281-11	46761-46762	-	
281-12	46762-46763	-	
281-13	46763-46764	-	
281-14	46764-46765	-	
281-15	46765-46766	-	
281-16	46766-46767	-	
281-17	46767-46768	-	
281-18	46768-46769	-	
281-19	46769-46770	-	
281-20	46770-46771	-	
281-21	46771-46772	-	
281-22	46772-46773	-	
281-23	46773-46774	-	
281-24	46774-46775	-	
281-25	46776-46780	2020	
281-26	46780-46781	-	
281-27	46781-46783	03	
281-28	46783-46784	-	
281-29	46784-46786	09	
281-30	46787-46789	00	
281-31	46789-46790	:	
281-32	46790-46792	00	
281-33	46792-46793	:	
281-34	46793-46795	00	
281-35	46795-46796	-	
281-36	46796-46798	04	
281-37	46799-46805	SELECT	
281-38	46806-46807	'	
281-39	46807-46811	2020	
281-40	46811-46812	-	
281-41	46812-46814	03	
281-42	46814-46815	-	
281-43	46815-46817	07	
281-44	46818-46820	00	
281-45	46820-46821	:	
281-46	46821-46823	00	
281-47	46823-46824	:	
281-48	46824-46826	00	
281-49	46826-46827	'	
281-50	46827-46828	:	
281-51	46828-46829	:	
281-52	46829-46840	timestamptz	
281-53	46841-46842	+	
281-54	46843-46844	'	
281-55	46844-46846	48	
281-56	46847-46852	hours	
281-57	46852-46853	'	
281-58	46853-46854	;	
281-59	46855-46856	?	

#Text=column?
282-1	46856-46862	column	
282-2	46862-46863	?	

#Text=------------------------
#Text=2020-03-09 01:00:00-04
#Text=This computation spans a usa daylight saving time change.
283-1	46864-46865	-	
283-2	46865-46866	-	
283-3	46866-46867	-	
283-4	46867-46868	-	
283-5	46868-46869	-	
283-6	46869-46870	-	
283-7	46870-46871	-	
283-8	46871-46872	-	
283-9	46872-46873	-	
283-10	46873-46874	-	
283-11	46874-46875	-	
283-12	46875-46876	-	
283-13	46876-46877	-	
283-14	46877-46878	-	
283-15	46878-46879	-	
283-16	46879-46880	-	
283-17	46880-46881	-	
283-18	46881-46882	-	
283-19	46882-46883	-	
283-20	46883-46884	-	
283-21	46884-46885	-	
283-22	46885-46886	-	
283-23	46886-46887	-	
283-24	46887-46888	-	
283-25	46889-46893	2020	
283-26	46893-46894	-	
283-27	46894-46896	03	
283-28	46896-46897	-	
283-29	46897-46899	09	
283-30	46900-46902	01	
283-31	46902-46903	:	
283-32	46903-46905	00	
283-33	46905-46906	:	
283-34	46906-46908	00	
283-35	46908-46909	-	
283-36	46909-46911	04	
283-37	46912-46916	This	
283-38	46917-46928	computation	
283-39	46929-46934	spans	
283-40	46935-46936	a	
283-41	46937-46940	usa	
283-42	46941-46949	daylight	
283-43	46950-46956	saving	
283-44	46957-46961	time	
283-45	46962-46968	change	
283-46	46968-46969	.	

#Text=The interval data type allows the user to specify whether they want days or
#Text=hours added, with different results because of the daylight saving time change.
284-1	46970-46973	The	
284-2	46974-46982	interval	
284-3	46983-46987	data	
284-4	46988-46992	type	
284-5	46993-46999	allows	
284-6	47000-47003	the	
284-7	47004-47008	user	
284-8	47009-47011	to	
284-9	47012-47019	specify	
284-10	47020-47027	whether	
284-11	47028-47032	they	
284-12	47033-47037	want	
284-13	47038-47042	days	
284-14	47043-47045	or	
284-15	47046-47051	hours	
284-16	47052-47057	added	
284-17	47057-47058	,	
284-18	47059-47063	with	
284-19	47064-47073	different	
284-20	47074-47081	results	
284-21	47082-47089	because	
284-22	47090-47092	of	
284-23	47093-47096	the	
284-24	47097-47105	daylight	
284-25	47106-47112	saving	
284-26	47113-47117	time	
284-27	47118-47124	change	
284-28	47124-47125	.	

#Text=This is a great use of the interval data type.
285-1	47126-47130	This	
285-2	47131-47133	is	
285-3	47134-47135	a	
285-4	47136-47141	great	
285-5	47142-47145	use	
285-6	47146-47148	of	
285-7	47149-47152	the	
285-8	47153-47161	interval	
285-9	47162-47166	data	
285-10	47167-47171	type	
285-11	47171-47172	.	

#Text=Using queries that output interval values is more nuanced.
286-1	47173-47178	Using	
286-2	47179-47186	queries	
286-3	47187-47191	that	
286-4	47192-47198	output	
286-5	47199-47207	interval	
286-6	47208-47214	values	
286-7	47215-47217	is	
286-8	47218-47222	more	
286-9	47223-47230	nuanced	
286-10	47230-47231	.	

#Text=While you can specify units on input, e.g. days, hours, seconds, you can't specify whether you care about months, days, or seconds in
#Text=interval output.
287-1	47232-47237	While	
287-2	47238-47241	you	
287-3	47242-47245	can	
287-4	47246-47253	specify	
287-5	47254-47259	units	
287-6	47260-47262	on	
287-7	47263-47268	input	
287-8	47268-47269	,	
287-9	47270-47273	e.g	
287-10	47273-47274	.	
287-11	47275-47279	days	
287-12	47279-47280	,	
287-13	47281-47286	hours	
287-14	47286-47287	,	
287-15	47288-47295	seconds	
287-16	47295-47296	,	
287-17	47297-47300	you	
287-18	47301-47306	can't	
287-19	47307-47314	specify	
287-20	47315-47322	whether	
287-21	47323-47326	you	
287-22	47327-47331	care	
287-23	47332-47337	about	
287-24	47338-47344	months	
287-25	47344-47345	,	
287-26	47346-47350	days	
287-27	47350-47351	,	
287-28	47352-47354	or	
287-29	47355-47362	seconds	
287-30	47363-47365	in	
287-31	47366-47374	interval	
287-32	47375-47381	output	
287-33	47381-47382	.	

#Text=Therefore, different operations are required to produce different outputs, e.g.:
#Text=SELECT '2020-03-09 00:00:00'::timestamptz - '2020-03-07 00:00:00'::timestamptz;
#Text=?
288-1	47383-47392	Therefore	
288-2	47392-47393	,	
288-3	47394-47403	different	
288-4	47404-47414	operations	
288-5	47415-47418	are	
288-6	47419-47427	required	
288-7	47428-47430	to	
288-8	47431-47438	produce	
288-9	47439-47448	different	
288-10	47449-47456	outputs	
288-11	47456-47457	,	
288-12	47458-47461	e.g	
288-13	47461-47462	.	
288-14	47462-47463	:	
288-15	47464-47470	SELECT	
288-16	47471-47472	'	
288-17	47472-47476	2020	
288-18	47476-47477	-	
288-19	47477-47479	03	
288-20	47479-47480	-	
288-21	47480-47482	09	
288-22	47483-47485	00	
288-23	47485-47486	:	
288-24	47486-47488	00	
288-25	47488-47489	:	
288-26	47489-47491	00	
288-27	47491-47492	'	
288-28	47492-47493	:	
288-29	47493-47494	:	
288-30	47494-47505	timestamptz	
288-31	47506-47507	-	
288-32	47507-47508	 	
288-33	47508-47509	'	
288-34	47509-47513	2020	
288-35	47513-47514	-	
288-36	47514-47516	03	
288-37	47516-47517	-	
288-38	47517-47519	07	
288-39	47520-47522	00	
288-40	47522-47523	:	
288-41	47523-47525	00	
288-42	47525-47526	:	
288-43	47526-47528	00	
288-44	47528-47529	'	
288-45	47529-47530	:	
288-46	47530-47531	:	
288-47	47531-47542	timestamptz	
288-48	47542-47543	;	
288-49	47544-47545	?	

#Text=column?
289-1	47545-47551	column	
289-2	47551-47552	?	

#Text=----------------
#Text=1 day 23:00:00
#Text=SELECT age('2020-03-09 00:00:00'::timestamptz, '2020-03-07 00:00:00'::timestamptz);
#Text=age
#Text=--------
#Text=2 days
#Text=The first query uses subtraction, and computes based on seconds.
290-1	47553-47554	-	
290-2	47554-47555	-	
290-3	47555-47556	-	
290-4	47556-47557	-	
290-5	47557-47558	-	
290-6	47558-47559	-	
290-7	47559-47560	-	
290-8	47560-47561	-	
290-9	47561-47562	-	
290-10	47562-47563	-	
290-11	47563-47564	-	
290-12	47564-47565	-	
290-13	47565-47566	-	
290-14	47566-47567	-	
290-15	47567-47568	-	
290-16	47568-47569	-	
290-17	47570-47571	1	
290-18	47572-47575	day	
290-19	47576-47578	23	
290-20	47578-47579	:	
290-21	47579-47581	00	
290-22	47581-47582	:	
290-23	47582-47584	00	
290-24	47585-47591	SELECT	
290-25	47592-47595	age	
290-26	47595-47596	(	
290-27	47596-47597	'	
290-28	47597-47601	2020	
290-29	47601-47602	-	
290-30	47602-47604	03	
290-31	47604-47605	-	
290-32	47605-47607	09	
290-33	47608-47610	00	
290-34	47610-47611	:	
290-35	47611-47613	00	
290-36	47613-47614	:	
290-37	47614-47616	00	
290-38	47616-47617	'	
290-39	47617-47618	:	
290-40	47618-47619	:	
290-41	47619-47630	timestamptz	
290-42	47630-47631	,	
290-43	47632-47633	'	
290-44	47633-47637	2020	
290-45	47637-47638	-	
290-46	47638-47640	03	
290-47	47640-47641	-	
290-48	47641-47643	07	
290-49	47644-47646	00	
290-50	47646-47647	:	
290-51	47647-47649	00	
290-52	47649-47650	:	
290-53	47650-47652	00	
290-54	47652-47653	'	
290-55	47653-47654	:	
290-56	47654-47655	:	
290-57	47655-47666	timestamptz	
290-58	47666-47667	)	
290-59	47667-47668	;	
290-60	47669-47672	age	
290-61	47673-47674	-	
290-62	47674-47675	-	
290-63	47675-47676	-	
290-64	47676-47677	-	
290-65	47677-47678	-	
290-66	47678-47679	-	
290-67	47679-47680	-	
290-68	47680-47681	-	
290-69	47682-47683	2	
290-70	47684-47688	days	
290-71	47689-47692	The	
290-72	47693-47698	first	
290-73	47699-47704	query	
290-74	47705-47709	uses	
290-75	47710-47721	subtraction	
290-76	47721-47722	,	
290-77	47723-47726	and	
290-78	47727-47735	computes	
290-79	47736-47741	based	
290-80	47742-47744	on	
290-81	47745-47752	seconds	
290-82	47752-47753	.	

#Text=The second query internally calls
#Text=timestamp_age().
291-1	47754-47757	The	
291-2	47758-47764	second	
291-3	47765-47770	query	
291-4	47771-47781	internally	
291-5	47782-47787	calls	
291-6	47788-47801	timestamp_age	
291-7	47801-47802	(	
291-8	47802-47803	)	
291-9	47803-47804	.	

#Text=The comment in the source code is illustrative:
#Text=Calculate time difference while retaining year/month fields.
292-1	47805-47808	The	
292-2	47809-47816	comment	
292-3	47817-47819	in	
292-4	47820-47823	the	
292-5	47824-47830	source	
292-6	47831-47835	code	
292-7	47836-47838	is	
292-8	47839-47851	illustrative	
292-9	47851-47852	:	
292-10	47853-47862	Calculate	
292-11	47863-47867	time	
292-12	47868-47878	difference	
292-13	47879-47884	while	
292-14	47885-47894	retaining	
292-15	47895-47899	year	
292-16	47899-47900	/	
292-17	47900-47905	month	
292-18	47906-47912	fields	
292-19	47912-47913	.	

#Text=Note that this does not result in an accurate absolute time span since year and month are out of context once the arithmetic is done.
293-1	47914-47918	Note	
293-2	47919-47923	that	
293-3	47924-47928	this	
293-4	47929-47933	does	
293-5	47934-47937	not	
293-6	47938-47944	result	
293-7	47945-47947	in	
293-8	47948-47950	an	
293-9	47951-47959	accurate	
293-10	47960-47968	absolute	
293-11	47969-47973	time	
293-12	47974-47978	span	
293-13	47979-47984	since	
293-14	47985-47989	year	
293-15	47990-47993	and	
293-16	47994-47999	month	
293-17	48000-48003	are	
293-18	48004-48007	out	
293-19	48008-48010	of	
293-20	48011-48018	context	
293-21	48019-48023	once	
293-22	48024-48027	the	
293-23	48028-48038	arithmetic	
293-24	48039-48041	is	
293-25	48042-48046	done	
293-26	48046-48047	.	

#Text=The key part is the "out of context" mention.
294-1	48048-48051	The	
294-2	48052-48055	key	
294-3	48056-48060	part	
294-4	48061-48063	is	
294-5	48064-48067	the	
294-6	48068-48069	"	
294-7	48069-48072	out	
294-8	48073-48075	of	
294-9	48076-48083	context	
294-10	48083-48084	"	
294-11	48085-48092	mention	
294-12	48092-48093	.	

#Text=What it is saying is that when age() returns 2 days, that could have spanned 47, 48, or 49 hours, based on usa time zones, and that
#Text=detail is lost in the output.
295-1	48094-48098	What	
295-2	48099-48101	it	
295-3	48102-48104	is	
295-4	48105-48111	saying	
295-5	48112-48114	is	
295-6	48115-48119	that	
295-7	48120-48124	when	
295-8	48125-48128	age	
295-9	48128-48129	(	
295-10	48129-48130	)	
295-11	48131-48138	returns	
295-12	48139-48140	2	
295-13	48141-48145	days	
295-14	48145-48146	,	
295-15	48147-48151	that	
295-16	48152-48157	could	
295-17	48158-48162	have	
295-18	48163-48170	spanned	
295-19	48171-48173	47	
295-20	48173-48174	,	
295-21	48175-48177	48	
295-22	48177-48178	,	
295-23	48179-48181	or	
295-24	48182-48184	49	
295-25	48185-48190	hours	
295-26	48190-48191	,	
295-27	48192-48197	based	
295-28	48198-48200	on	
295-29	48201-48204	usa	
295-30	48205-48209	time	
295-31	48210-48215	zones	
295-32	48215-48216	,	
295-33	48217-48220	and	
295-34	48221-48225	that	
295-35	48226-48232	detail	
295-36	48233-48235	is	
295-37	48236-48240	lost	
295-38	48241-48243	in	
295-39	48244-48247	the	
295-40	48248-48254	output	
295-41	48254-48255	.	

#Text=Look at this:
#Text=SELECT '2020-03-07 00:00:00'::timestamptz + '1 day 23 hours';
#Text=?
296-1	48256-48260	Look	
296-2	48261-48263	at	
296-3	48264-48268	this	
296-4	48268-48269	:	
296-5	48270-48276	SELECT	
296-6	48277-48278	'	
296-7	48278-48282	2020	
296-8	48282-48283	-	
296-9	48283-48285	03	
296-10	48285-48286	-	
296-11	48286-48288	07	
296-12	48289-48291	00	
296-13	48291-48292	:	
296-14	48292-48294	00	
296-15	48294-48295	:	
296-16	48295-48297	00	
296-17	48297-48298	'	
296-18	48298-48299	:	
296-19	48299-48300	:	
296-20	48300-48311	timestamptz	
296-21	48312-48313	+	
296-22	48314-48315	'	
296-23	48315-48316	1	
296-24	48317-48320	day	
296-25	48321-48323	23	
296-26	48324-48329	hours	
296-27	48329-48330	'	
296-28	48330-48331	;	
296-29	48332-48333	?	

#Text=column?
297-1	48333-48339	column	
297-2	48339-48340	?	

#Text=------------------------
#Text=2020-03-09 00:00:00-04
#Text=SELECT '2020-03-07 00:00:00'::timestamptz + '47 hours';
#Text=?
298-1	48341-48342	-	
298-2	48342-48343	-	
298-3	48343-48344	-	
298-4	48344-48345	-	
298-5	48345-48346	-	
298-6	48346-48347	-	
298-7	48347-48348	-	
298-8	48348-48349	-	
298-9	48349-48350	-	
298-10	48350-48351	-	
298-11	48351-48352	-	
298-12	48352-48353	-	
298-13	48353-48354	-	
298-14	48354-48355	-	
298-15	48355-48356	-	
298-16	48356-48357	-	
298-17	48357-48358	-	
298-18	48358-48359	-	
298-19	48359-48360	-	
298-20	48360-48361	-	
298-21	48361-48362	-	
298-22	48362-48363	-	
298-23	48363-48364	-	
298-24	48364-48365	-	
298-25	48366-48370	2020	
298-26	48370-48371	-	
298-27	48371-48373	03	
298-28	48373-48374	-	
298-29	48374-48376	09	
298-30	48377-48379	00	
298-31	48379-48380	:	
298-32	48380-48382	00	
298-33	48382-48383	:	
298-34	48383-48385	00	
298-35	48385-48386	-	
298-36	48386-48388	04	
298-37	48389-48395	SELECT	
298-38	48396-48397	'	
298-39	48397-48401	2020	
298-40	48401-48402	-	
298-41	48402-48404	03	
298-42	48404-48405	-	
298-43	48405-48407	07	
298-44	48408-48410	00	
298-45	48410-48411	:	
298-46	48411-48413	00	
298-47	48413-48414	:	
298-48	48414-48416	00	
298-49	48416-48417	'	
298-50	48417-48418	:	
298-51	48418-48419	:	
298-52	48419-48430	timestamptz	
298-53	48431-48432	+	
298-54	48433-48434	'	
298-55	48434-48436	47	
298-56	48437-48442	hours	
298-57	48442-48443	'	
298-58	48443-48444	;	
298-59	48445-48446	?	

#Text=column?
299-1	48446-48452	column	
299-2	48452-48453	?	

#Text=------------------------
#Text=2020-03-09 00:00:00-04
#Text=SELECT '2020-03-07 00:00:00'::timestamptz + '2 days';
#Text=?
300-1	48454-48455	-	
300-2	48455-48456	-	
300-3	48456-48457	-	
300-4	48457-48458	-	
300-5	48458-48459	-	
300-6	48459-48460	-	
300-7	48460-48461	-	
300-8	48461-48462	-	
300-9	48462-48463	-	
300-10	48463-48464	-	
300-11	48464-48465	-	
300-12	48465-48466	-	
300-13	48466-48467	-	
300-14	48467-48468	-	
300-15	48468-48469	-	
300-16	48469-48470	-	
300-17	48470-48471	-	
300-18	48471-48472	-	
300-19	48472-48473	-	
300-20	48473-48474	-	
300-21	48474-48475	-	
300-22	48475-48476	-	
300-23	48476-48477	-	
300-24	48477-48478	-	
300-25	48479-48483	2020	
300-26	48483-48484	-	
300-27	48484-48486	03	
300-28	48486-48487	-	
300-29	48487-48489	09	
300-30	48490-48492	00	
300-31	48492-48493	:	
300-32	48493-48495	00	
300-33	48495-48496	:	
300-34	48496-48498	00	
300-35	48498-48499	-	
300-36	48499-48501	04	
300-37	48502-48508	SELECT	
300-38	48509-48510	'	
300-39	48510-48514	2020	
300-40	48514-48515	-	
300-41	48515-48517	03	
300-42	48517-48518	-	
300-43	48518-48520	07	
300-44	48521-48523	00	
300-45	48523-48524	:	
300-46	48524-48526	00	
300-47	48526-48527	:	
300-48	48527-48529	00	
300-49	48529-48530	'	
300-50	48530-48531	:	
300-51	48531-48532	:	
300-52	48532-48543	timestamptz	
300-53	48544-48545	+	
300-54	48546-48547	'	
300-55	48547-48548	2	
300-56	48549-48553	days	
300-57	48553-48554	'	
300-58	48554-48555	;	
300-59	48556-48557	?	

#Text=column?
301-1	48557-48563	column	
301-2	48563-48564	?	

#Text=------------------------
#Text=2020-03-09 00:00:00-04
#Text=SELECT '2020-03-07 00:00:00'::timestamptz + '2 days -1 hours';
#Text=?
302-1	48565-48566	-	
302-2	48566-48567	-	
302-3	48567-48568	-	
302-4	48568-48569	-	
302-5	48569-48570	-	
302-6	48570-48571	-	
302-7	48571-48572	-	
302-8	48572-48573	-	
302-9	48573-48574	-	
302-10	48574-48575	-	
302-11	48575-48576	-	
302-12	48576-48577	-	
302-13	48577-48578	-	
302-14	48578-48579	-	
302-15	48579-48580	-	
302-16	48580-48581	-	
302-17	48581-48582	-	
302-18	48582-48583	-	
302-19	48583-48584	-	
302-20	48584-48585	-	
302-21	48585-48586	-	
302-22	48586-48587	-	
302-23	48587-48588	-	
302-24	48588-48589	-	
302-25	48590-48594	2020	
302-26	48594-48595	-	
302-27	48595-48597	03	
302-28	48597-48598	-	
302-29	48598-48600	09	
302-30	48601-48603	00	
302-31	48603-48604	:	
302-32	48604-48606	00	
302-33	48606-48607	:	
302-34	48607-48609	00	
302-35	48609-48610	-	
302-36	48610-48612	04	
302-37	48613-48619	SELECT	
302-38	48620-48621	'	
302-39	48621-48625	2020	
302-40	48625-48626	-	
302-41	48626-48628	03	
302-42	48628-48629	-	
302-43	48629-48631	07	
302-44	48632-48634	00	
302-45	48634-48635	:	
302-46	48635-48637	00	
302-47	48637-48638	:	
302-48	48638-48640	00	
302-49	48640-48641	'	
302-50	48641-48642	:	
302-51	48642-48643	:	
302-52	48643-48654	timestamptz	
302-53	48655-48656	+	
302-54	48657-48658	'	
302-55	48658-48659	2	
302-56	48660-48664	days	
302-57	48665-48666	-	
302-58	48666-48667	1	
302-59	48668-48673	hours	
302-60	48673-48674	'	
302-61	48674-48675	;	
302-62	48676-48677	?	

#Text=column?
303-1	48677-48683	column	
303-2	48683-48684	?	

#Text=------------------------
#Text=2020-03-08 23:00:00-04
#Text=The first three return the same result, though the last does not because days is computed first, then hours.
304-1	48685-48686	-	
304-2	48686-48687	-	
304-3	48687-48688	-	
304-4	48688-48689	-	
304-5	48689-48690	-	
304-6	48690-48691	-	
304-7	48691-48692	-	
304-8	48692-48693	-	
304-9	48693-48694	-	
304-10	48694-48695	-	
304-11	48695-48696	-	
304-12	48696-48697	-	
304-13	48697-48698	-	
304-14	48698-48699	-	
304-15	48699-48700	-	
304-16	48700-48701	-	
304-17	48701-48702	-	
304-18	48702-48703	-	
304-19	48703-48704	-	
304-20	48704-48705	-	
304-21	48705-48706	-	
304-22	48706-48707	-	
304-23	48707-48708	-	
304-24	48708-48709	-	
304-25	48710-48714	2020	
304-26	48714-48715	-	
304-27	48715-48717	03	
304-28	48717-48718	-	
304-29	48718-48720	08	
304-30	48721-48723	23	
304-31	48723-48724	:	
304-32	48724-48726	00	
304-33	48726-48727	:	
304-34	48727-48729	00	
304-35	48729-48730	-	
304-36	48730-48732	04	
304-37	48733-48736	The	
304-38	48737-48742	first	
304-39	48743-48748	three	
304-40	48749-48755	return	
304-41	48756-48759	the	
304-42	48760-48764	same	
304-43	48765-48771	result	
304-44	48771-48772	,	
304-45	48773-48779	though	
304-46	48780-48783	the	
304-47	48784-48788	last	
304-48	48789-48793	does	
304-49	48794-48797	not	
304-50	48798-48805	because	
304-51	48806-48810	days	
304-52	48811-48813	is	
304-53	48814-48822	computed	
304-54	48823-48828	first	
304-55	48828-48829	,	
304-56	48830-48834	then	
304-57	48835-48840	hours	
304-58	48840-48841	.	

#Text=However, when the first and third queries are run in a different context, i.e., for a
#Text=different date, they generate different outputs:
#Text=SELECT '2020-03-12 00:00:00'::timestamptz + '1 day 23 hours';
#Text=?
305-1	48842-48849	However	
305-2	48849-48850	,	
305-3	48851-48855	when	
305-4	48856-48859	the	
305-5	48860-48865	first	
305-6	48866-48869	and	
305-7	48870-48875	third	
305-8	48876-48883	queries	
305-9	48884-48887	are	
305-10	48888-48891	run	
305-11	48892-48894	in	
305-12	48895-48896	a	
305-13	48897-48906	different	
305-14	48907-48914	context	
305-15	48914-48915	,	
305-16	48916-48919	i.e	
305-17	48919-48920	.	
305-18	48920-48921	,	
305-19	48922-48925	for	
305-20	48926-48927	a	
305-21	48928-48937	different	
305-22	48938-48942	date	
305-23	48942-48943	,	
305-24	48944-48948	they	
305-25	48949-48957	generate	
305-26	48958-48967	different	
305-27	48968-48975	outputs	
305-28	48975-48976	:	
305-29	48977-48983	SELECT	
305-30	48984-48985	'	
305-31	48985-48989	2020	
305-32	48989-48990	-	
305-33	48990-48992	03	
305-34	48992-48993	-	
305-35	48993-48995	12	
305-36	48996-48998	00	
305-37	48998-48999	:	
305-38	48999-49001	00	
305-39	49001-49002	:	
305-40	49002-49004	00	
305-41	49004-49005	'	
305-42	49005-49006	:	
305-43	49006-49007	:	
305-44	49007-49018	timestamptz	
305-45	49019-49020	+	
305-46	49021-49022	'	
305-47	49022-49023	1	
305-48	49024-49027	day	
305-49	49028-49030	23	
305-50	49031-49036	hours	
305-51	49036-49037	'	
305-52	49037-49038	;	
305-53	49039-49040	?	

#Text=column?
306-1	49040-49046	column	
306-2	49046-49047	?	

#Text=------------------------
#Text=2020-03-13 23:00:00-04
#Text=SELECT '2020-03-12 00:00:00'::timestamptz + '2 days';
#Text=?
307-1	49048-49049	-	
307-2	49049-49050	-	
307-3	49050-49051	-	
307-4	49051-49052	-	
307-5	49052-49053	-	
307-6	49053-49054	-	
307-7	49054-49055	-	
307-8	49055-49056	-	
307-9	49056-49057	-	
307-10	49057-49058	-	
307-11	49058-49059	-	
307-12	49059-49060	-	
307-13	49060-49061	-	
307-14	49061-49062	-	
307-15	49062-49063	-	
307-16	49063-49064	-	
307-17	49064-49065	-	
307-18	49065-49066	-	
307-19	49066-49067	-	
307-20	49067-49068	-	
307-21	49068-49069	-	
307-22	49069-49070	-	
307-23	49070-49071	-	
307-24	49071-49072	-	
307-25	49073-49077	2020	
307-26	49077-49078	-	
307-27	49078-49080	03	
307-28	49080-49081	-	
307-29	49081-49083	13	
307-30	49084-49086	23	
307-31	49086-49087	:	
307-32	49087-49089	00	
307-33	49089-49090	:	
307-34	49090-49092	00	
307-35	49092-49093	-	
307-36	49093-49095	04	
307-37	49096-49102	SELECT	
307-38	49103-49104	'	
307-39	49104-49108	2020	
307-40	49108-49109	-	
307-41	49109-49111	03	
307-42	49111-49112	-	
307-43	49112-49114	12	
307-44	49115-49117	00	
307-45	49117-49118	:	
307-46	49118-49120	00	
307-47	49120-49121	:	
307-48	49121-49123	00	
307-49	49123-49124	'	
307-50	49124-49125	:	
307-51	49125-49126	:	
307-52	49126-49137	timestamptz	
307-53	49138-49139	+	
307-54	49140-49141	'	
307-55	49141-49142	2	
307-56	49143-49147	days	
307-57	49147-49148	'	
307-58	49148-49149	;	
307-59	49150-49151	?	

#Text=column?
308-1	49151-49157	column	
308-2	49157-49158	?	

#Text=------------------------
#Text=2020-03-14 00:00:00-04
#Text=When you are inputting interval values, be conscious of the month, day, and second values you specify, and when calling a function that produces interval output, consider how it computes
#Text=its output.
309-1	49159-49160	-	
309-2	49160-49161	-	
309-3	49161-49162	-	
309-4	49162-49163	-	
309-5	49163-49164	-	
309-6	49164-49165	-	
309-7	49165-49166	-	
309-8	49166-49167	-	
309-9	49167-49168	-	
309-10	49168-49169	-	
309-11	49169-49170	-	
309-12	49170-49171	-	
309-13	49171-49172	-	
309-14	49172-49173	-	
309-15	49173-49174	-	
309-16	49174-49175	-	
309-17	49175-49176	-	
309-18	49176-49177	-	
309-19	49177-49178	-	
309-20	49178-49179	-	
309-21	49179-49180	-	
309-22	49180-49181	-	
309-23	49181-49182	-	
309-24	49182-49183	-	
309-25	49184-49188	2020	
309-26	49188-49189	-	
309-27	49189-49191	03	
309-28	49191-49192	-	
309-29	49192-49194	14	
309-30	49195-49197	00	
309-31	49197-49198	:	
309-32	49198-49200	00	
309-33	49200-49201	:	
309-34	49201-49203	00	
309-35	49203-49204	-	
309-36	49204-49206	04	
309-37	49207-49211	When	
309-38	49212-49215	you	
309-39	49216-49219	are	
309-40	49220-49229	inputting	
309-41	49230-49238	interval	
309-42	49239-49245	values	
309-43	49245-49246	,	
309-44	49247-49249	be	
309-45	49250-49259	conscious	
309-46	49260-49262	of	
309-47	49263-49266	the	
309-48	49267-49272	month	
309-49	49272-49273	,	
309-50	49274-49277	day	
309-51	49277-49278	,	
309-52	49279-49282	and	
309-53	49283-49289	second	
309-54	49290-49296	values	
309-55	49297-49300	you	
309-56	49301-49308	specify	
309-57	49308-49309	,	
309-58	49310-49313	and	
309-59	49314-49318	when	
309-60	49319-49326	calling	
309-61	49327-49328	a	
309-62	49329-49337	function	
309-63	49338-49342	that	
309-64	49343-49351	produces	
309-65	49352-49360	interval	
309-66	49361-49367	output	
309-67	49367-49368	,	
309-68	49369-49377	consider	
309-69	49378-49381	how	
309-70	49382-49384	it	
309-71	49385-49393	computes	
309-72	49394-49397	its	
309-73	49398-49404	output	
309-74	49404-49405	.	

#Text=View or Post Comments
#Text=pgFormatter
#Text=Wednesday, July 29, 2020
#Text=In my years with Postgres, I have seen some amazingly complex queries posted to the email lists.
310-1	49406-49410	View	
310-2	49411-49413	or	
310-3	49414-49418	Post	
310-4	49419-49427	Comments	
310-5	49428-49439	pgFormatter	
310-6	49440-49449	Wednesday	
310-7	49449-49450	,	
310-8	49451-49455	July	
310-9	49456-49458	29	
310-10	49458-49459	,	
310-11	49460-49464	2020	
310-12	49465-49467	In	
310-13	49468-49470	my	
310-14	49471-49476	years	
310-15	49477-49481	with	
310-16	49482-49490	Postgres	
310-17	49490-49491	,	
310-18	49492-49493	I	
310-19	49494-49498	have	
310-20	49499-49503	seen	
310-21	49504-49508	some	
310-22	49509-49518	amazingly	
310-23	49519-49526	complex	
310-24	49527-49534	queries	
310-25	49535-49541	posted	
310-26	49542-49544	to	
310-27	49545-49548	the	
310-28	49549-49554	email	
310-29	49555-49560	lists	
310-30	49560-49561	.	

#Text=I have never understood how people can read complex queries with no formatting, e.g., no keyword
#Text=capitalization, no indenting, no line breaks for new clauses:
#Text=select n.nspname as "Schema", p.proname as "Name",
#Text=pg_catalog.format_type(p.prorettype, null) as "Result data type", case
#Text=when p.pronargs = 0 then cast('*' as pg_catalog.text) else
#Text=pg_catalog.pg_get_function_arguments(p.oid) end as "Argument data
#Text=types", pg_catalog.obj_description(p.oid, 'pg_proc') as "Description"
#Text=from pg_catalog.pg_proc p left join pg_catalog.pg_namespace n on n.oid =
#Text=p.pronamespace where p.prokind = 'a' and n.nspname <> 'pg_catalog' and
#Text=n.nspname <> 'information_schema' and
#Text=pg_catalog.pg_function_is_visible(p.oid) order by 1, 2, 4;
#Text=Obviously, some people can read such queries, but I never can.
311-1	49562-49563	I	
311-2	49564-49568	have	
311-3	49569-49574	never	
311-4	49575-49585	understood	
311-5	49586-49589	how	
311-6	49590-49596	people	
311-7	49597-49600	can	
311-8	49601-49605	read	
311-9	49606-49613	complex	
311-10	49614-49621	queries	
311-11	49622-49626	with	
311-12	49627-49629	no	
311-13	49630-49640	formatting	
311-14	49640-49641	,	
311-15	49642-49645	e.g	
311-16	49645-49646	.	
311-17	49646-49647	,	
311-18	49648-49650	no	
311-19	49651-49658	keyword	
311-20	49659-49673	capitalization	
311-21	49673-49674	,	
311-22	49675-49677	no	
311-23	49678-49687	indenting	
311-24	49687-49688	,	
311-25	49689-49691	no	
311-26	49692-49696	line	
311-27	49697-49703	breaks	
311-28	49704-49707	for	
311-29	49708-49711	new	
311-30	49712-49719	clauses	
311-31	49719-49720	:	
311-32	49721-49727	select	
311-33	49728-49737	n.nspname	
311-34	49738-49740	as	
311-35	49741-49742	"	
311-36	49742-49748	Schema	
311-37	49748-49749	"	
311-38	49749-49750	,	
311-39	49751-49760	p.proname	
311-40	49761-49763	as	
311-41	49764-49765	"	
311-42	49765-49769	Name	
311-43	49769-49770	"	
311-44	49770-49771	,	
311-45	49772-49794	pg_catalog.format_type	
311-46	49794-49795	(	
311-47	49795-49807	p.prorettype	
311-48	49807-49808	,	
311-49	49809-49813	null	
311-50	49813-49814	)	
311-51	49815-49817	as	
311-52	49818-49819	"	
311-53	49819-49825	Result	
311-54	49826-49830	data	
311-55	49831-49835	type	
311-56	49835-49836	"	
311-57	49836-49837	,	
311-58	49838-49842	case	
311-59	49843-49847	when	
311-60	49848-49858	p.pronargs	
311-61	49859-49860	=	
311-62	49861-49862	0	
311-63	49863-49867	then	
311-64	49868-49872	cast	
311-65	49872-49873	(	
311-66	49873-49874	'	
311-67	49874-49875	*	
311-68	49875-49876	'	
311-69	49877-49879	as	
311-70	49880-49895	pg_catalog.text	
311-71	49895-49896	)	
311-72	49897-49901	else	
311-73	49902-49938	pg_catalog.pg_get_function_arguments	
311-74	49938-49939	(	
311-75	49939-49944	p.oid	
311-76	49944-49945	)	
311-77	49946-49949	end	
311-78	49950-49952	as	
311-79	49953-49954	"	
311-80	49954-49962	Argument	
311-81	49963-49967	data	
311-82	49968-49973	types	
311-83	49973-49974	"	
311-84	49974-49975	,	
311-85	49976-50002	pg_catalog.obj_description	
311-86	50002-50003	(	
311-87	50003-50008	p.oid	
311-88	50008-50009	,	
311-89	50010-50011	'	
311-90	50011-50018	pg_proc	
311-91	50018-50019	'	
311-92	50019-50020	)	
311-93	50021-50023	as	
311-94	50024-50025	"	
311-95	50025-50036	Description	
311-96	50036-50037	"	
311-97	50038-50042	from	
311-98	50043-50061	pg_catalog.pg_proc	
311-99	50062-50063	p	
311-100	50064-50068	left	
311-101	50069-50073	join	
311-102	50074-50097	pg_catalog.pg_namespace	
311-103	50098-50099	n	
311-104	50100-50102	on	
311-105	50103-50108	n.oid	
311-106	50109-50110	=	
311-107	50111-50125	p.pronamespace	
311-108	50126-50131	where	
311-109	50132-50141	p.prokind	
311-110	50142-50143	=	
311-111	50144-50145	'	
311-112	50145-50146	a	
311-113	50146-50147	'	
311-114	50148-50151	and	
311-115	50152-50161	n.nspname	
311-116	50162-50163	<	
311-117	50163-50164	>	
311-118	50165-50166	'	
311-119	50166-50176	pg_catalog	
311-120	50176-50177	'	
311-121	50178-50181	and	
311-122	50182-50191	n.nspname	
311-123	50192-50193	<	
311-124	50193-50194	>	
311-125	50195-50196	'	
311-126	50196-50214	information_schema	
311-127	50214-50215	'	
311-128	50216-50219	and	
311-129	50220-50253	pg_catalog.pg_function_is_visible	
311-130	50253-50254	(	
311-131	50254-50259	p.oid	
311-132	50259-50260	)	
311-133	50261-50266	order	
311-134	50267-50269	by	
311-135	50270-50271	1	
311-136	50271-50272	,	
311-137	50273-50274	2	
311-138	50274-50275	,	
311-139	50276-50277	4	
311-140	50277-50278	;	
311-141	50279-50288	Obviously	
311-142	50288-50289	,	
311-143	50290-50294	some	
311-144	50295-50301	people	
311-145	50302-50305	can	
311-146	50306-50310	read	
311-147	50311-50315	such	
311-148	50316-50323	queries	
311-149	50323-50324	,	
311-150	50325-50328	but	
311-151	50329-50330	I	
311-152	50331-50336	never	
311-153	50337-50340	can	
311-154	50340-50341	.	

#Text=I rely on clean formatting to conceptually understand queries and detect errors.
312-1	50342-50343	I	
312-2	50344-50348	rely	
312-3	50349-50351	on	
312-4	50352-50357	clean	
312-5	50358-50368	formatting	
312-6	50369-50371	to	
312-7	50372-50384	conceptually	
312-8	50385-50395	understand	
312-9	50396-50403	queries	
312-10	50404-50407	and	
312-11	50408-50414	detect	
312-12	50415-50421	errors	
312-13	50421-50422	.	

#Text=Some people have no trouble understanding, but I find
#Text=this much clearer:
#Text=SELECT n.nspname AS "Schema", p.proname AS "Name",
#Text=pg_catalog.format_type(p.prorettype, NULL) AS "Result data type", CASE WHEN
#Text=p.pronargs = 0 THEN
#Text=CAST('*' AS pg_catalog.text)
#Text=ELSE
#Text=pg_catalog.pg_get_function_arguments(p.oid)
#Text=END AS "Argument data types", pg_catalog.obj_description(p.oid, 'pg_proc')
#Text=AS "Description"
#Text=FROM pg_catalog.pg_proc p
#Text=LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
#Text=WHERE p.prokind = 'a'
#Text=AND n.nspname <> 'pg_catalog'
#Text=AND n.nspname <> 'information_schema'
#Text=AND pg_catalog.pg_function_is_visible(p.oid)
#Text=ORDER BY 1, 2, 4;
#Text=In the past, I used to clean up queries using a tool designed to reformat Informix 4GL programs, and I would use sed to
#Text=fix some things the tool missed.
313-1	50423-50427	Some	
313-2	50428-50434	people	
313-3	50435-50439	have	
313-4	50440-50442	no	
313-5	50443-50450	trouble	
313-6	50451-50464	understanding	
313-7	50464-50465	,	
313-8	50466-50469	but	
313-9	50470-50471	I	
313-10	50472-50476	find	
313-11	50477-50481	this	
313-12	50482-50486	much	
313-13	50487-50494	clearer	
313-14	50494-50495	:	
313-15	50496-50502	SELECT	
313-16	50503-50512	n.nspname	
313-17	50513-50515	AS	
313-18	50516-50517	"	
313-19	50517-50523	Schema	
313-20	50523-50524	"	
313-21	50524-50525	,	
313-22	50526-50535	p.proname	
313-23	50536-50538	AS	
313-24	50539-50540	"	
313-25	50540-50544	Name	
313-26	50544-50545	"	
313-27	50545-50546	,	
313-28	50547-50569	pg_catalog.format_type	
313-29	50569-50570	(	
313-30	50570-50582	p.prorettype	
313-31	50582-50583	,	
313-32	50584-50588	NULL	
313-33	50588-50589	)	
313-34	50590-50592	AS	
313-35	50593-50594	"	
313-36	50594-50600	Result	
313-37	50601-50605	data	
313-38	50606-50610	type	
313-39	50610-50611	"	
313-40	50611-50612	,	
313-41	50613-50617	CASE	
313-42	50618-50622	WHEN	
313-43	50623-50633	p.pronargs	
313-44	50634-50635	=	
313-45	50636-50637	0	
313-46	50638-50642	THEN	
313-47	50643-50647	CAST	
313-48	50647-50648	(	
313-49	50648-50649	'	
313-50	50649-50650	*	
313-51	50650-50651	'	
313-52	50652-50654	AS	
313-53	50655-50670	pg_catalog.text	
313-54	50670-50671	)	
313-55	50672-50676	ELSE	
313-56	50677-50713	pg_catalog.pg_get_function_arguments	
313-57	50713-50714	(	
313-58	50714-50719	p.oid	
313-59	50719-50720	)	
313-60	50721-50724	END	
313-61	50725-50727	AS	
313-62	50728-50729	"	
313-63	50729-50737	Argument	
313-64	50738-50742	data	
313-65	50743-50748	types	
313-66	50748-50749	"	
313-67	50749-50750	,	
313-68	50751-50777	pg_catalog.obj_description	
313-69	50777-50778	(	
313-70	50778-50783	p.oid	
313-71	50783-50784	,	
313-72	50785-50786	'	
313-73	50786-50793	pg_proc	
313-74	50793-50794	'	
313-75	50794-50795	)	
313-76	50796-50798	AS	
313-77	50799-50800	"	
313-78	50800-50811	Description	
313-79	50811-50812	"	
313-80	50813-50817	FROM	
313-81	50818-50836	pg_catalog.pg_proc	
313-82	50837-50838	p	
313-83	50839-50843	LEFT	
313-84	50844-50848	JOIN	
313-85	50849-50872	pg_catalog.pg_namespace	
313-86	50873-50874	n	
313-87	50875-50877	ON	
313-88	50878-50883	n.oid	
313-89	50884-50885	=	
313-90	50886-50900	p.pronamespace	
313-91	50901-50906	WHERE	
313-92	50907-50916	p.prokind	
313-93	50917-50918	=	
313-94	50919-50920	'	
313-95	50920-50921	a	
313-96	50921-50922	'	
313-97	50923-50926	AND	
313-98	50927-50936	n.nspname	
313-99	50937-50938	<	
313-100	50938-50939	>	
313-101	50940-50941	'	
313-102	50941-50951	pg_catalog	
313-103	50951-50952	'	
313-104	50953-50956	AND	
313-105	50957-50966	n.nspname	
313-106	50967-50968	<	
313-107	50968-50969	>	
313-108	50970-50971	'	
313-109	50971-50989	information_schema	
313-110	50989-50990	'	
313-111	50991-50994	AND	
313-112	50995-51028	pg_catalog.pg_function_is_visible	
313-113	51028-51029	(	
313-114	51029-51034	p.oid	
313-115	51034-51035	)	
313-116	51036-51041	ORDER	
313-117	51042-51044	BY	
313-118	51045-51046	1	
313-119	51046-51047	,	
313-120	51048-51049	2	
313-121	51049-51050	,	
313-122	51051-51052	4	
313-123	51052-51053	;	
313-124	51054-51056	In	
313-125	51057-51060	the	
313-126	51061-51065	past	
313-127	51065-51066	,	
313-128	51067-51068	I	
313-129	51069-51073	used	
313-130	51074-51076	to	
313-131	51077-51082	clean	
313-132	51083-51085	up	
313-133	51086-51093	queries	
313-134	51094-51099	using	
313-135	51100-51101	a	
313-136	51102-51106	tool	
313-137	51107-51115	designed	
313-138	51116-51118	to	
313-139	51119-51127	reformat	
313-140	51128-51136	Informix	
313-141	51137-51140	4GL	
313-142	51141-51149	programs	
313-143	51149-51150	,	
313-144	51151-51154	and	
313-145	51155-51156	I	
313-146	51157-51162	would	
313-147	51163-51166	use	
313-148	51167-51170	sed	
313-149	51171-51173	to	
313-150	51174-51177	fix	
313-151	51178-51182	some	
313-152	51183-51189	things	
313-153	51190-51193	the	
313-154	51194-51198	tool	
313-155	51199-51205	missed	
313-156	51205-51206	.	

#Text=That was obviously far from ideal, so last year I tried Gilles Darold's pgFormatter.
314-1	51207-51211	That	
314-2	51212-51215	was	
314-3	51216-51225	obviously	
314-4	51226-51229	far	
314-5	51230-51234	from	
314-6	51235-51240	ideal	
314-7	51240-51241	,	
314-8	51242-51244	so	
314-9	51245-51249	last	
314-10	51250-51254	year	
314-11	51255-51256	I	
314-12	51257-51262	tried	
314-13	51263-51269	Gilles	
314-14	51270-51278	Darold's	
314-15	51279-51290	pgFormatter	
314-16	51290-51291	.	

#Text=My first test was to run the
#Text=sql files I use for my presentations through the formatter.
315-1	51292-51294	My	
315-2	51295-51300	first	
315-3	51301-51305	test	
315-4	51306-51309	was	
315-5	51310-51312	to	
315-6	51313-51316	run	
315-7	51317-51320	the	
315-8	51321-51324	sql	
315-9	51325-51330	files	
315-10	51331-51332	I	
315-11	51333-51336	use	
315-12	51337-51340	for	
315-13	51341-51343	my	
315-14	51344-51357	presentations	
315-15	51358-51365	through	
315-16	51366-51369	the	
315-17	51370-51379	formatter	
315-18	51379-51380	.	

#Text=I found a few problems that Gilles fixed quickly.
316-1	51381-51382	I	
316-2	51383-51388	found	
316-3	51389-51390	a	
316-4	51391-51394	few	
316-5	51395-51403	problems	
316-6	51404-51408	that	
316-7	51409-51415	Gilles	
316-8	51416-51421	fixed	
316-9	51422-51429	quickly	
316-10	51429-51430	.	

#Text=I then ran the Postgres
#Text=regression test queries through the formatter, which turned up more problems.
317-1	51431-51432	I	
317-2	51433-51437	then	
317-3	51438-51441	ran	
317-4	51442-51445	the	
317-5	51446-51454	Postgres	
317-6	51455-51465	regression	
317-7	51466-51470	test	
317-8	51471-51478	queries	
317-9	51479-51486	through	
317-10	51487-51490	the	
317-11	51491-51500	formatter	
317-12	51500-51501	,	
317-13	51502-51507	which	
317-14	51508-51514	turned	
317-15	51515-51517	up	
317-16	51518-51522	more	
317-17	51523-51531	problems	
317-18	51531-51532	.	

#Text=Again, Gilles fixed them, and I could then run all 78k lines of
#Text=sql queries from the regression tests with satisfactory results.
318-1	51533-51538	Again	
318-2	51538-51539	,	
318-3	51540-51546	Gilles	
318-4	51547-51552	fixed	
318-5	51553-51557	them	
318-6	51557-51558	,	
318-7	51559-51562	and	
318-8	51563-51564	I	
318-9	51565-51570	could	
318-10	51571-51575	then	
318-11	51576-51579	run	
318-12	51580-51583	all	
318-13	51584-51587	78k	
318-14	51588-51593	lines	
318-15	51594-51596	of	
318-16	51597-51600	sql	
318-17	51601-51608	queries	
318-18	51609-51613	from	
318-19	51614-51617	the	
318-20	51618-51628	regression	
318-21	51629-51634	tests	
318-22	51635-51639	with	
318-23	51640-51652	satisfactory	
318-24	51653-51660	results	
318-25	51660-51661	.	

#Text=Now, when I am presented with a query that looks like the first version, I run to pgFormatter, and with my favorite flags, I get a query that looks like I typed it.
319-1	51662-51665	Now	
319-2	51665-51666	,	
319-3	51667-51671	when	
319-4	51672-51673	I	
319-5	51674-51676	am	
319-6	51677-51686	presented	
319-7	51687-51691	with	
319-8	51692-51693	a	
319-9	51694-51699	query	
319-10	51700-51704	that	
319-11	51705-51710	looks	
319-12	51711-51715	like	
319-13	51716-51719	the	
319-14	51720-51725	first	
319-15	51726-51733	version	
319-16	51733-51734	,	
319-17	51735-51736	I	
319-18	51737-51740	run	
319-19	51741-51743	to	
319-20	51744-51755	pgFormatter	
319-21	51755-51756	,	
319-22	51757-51760	and	
319-23	51761-51765	with	
319-24	51766-51768	my	
319-25	51769-51777	favorite	
319-26	51778-51783	flags	
319-27	51783-51784	,	
319-28	51785-51786	I	
319-29	51787-51790	get	
319-30	51791-51792	a	
319-31	51793-51798	query	
319-32	51799-51803	that	
319-33	51804-51809	looks	
319-34	51810-51814	like	
319-35	51815-51816	I	
319-36	51817-51822	typed	
319-37	51823-51825	it	
319-38	51825-51826	.	

#Text=View or Post Comments
#Text=Writing Style
#Text=Monday, July 27, 2020
#Text=There seem to be as many methods of writing sql queries as ways of writing essays.
320-1	51827-51831	View	
320-2	51832-51834	or	
320-3	51835-51839	Post	
320-4	51840-51848	Comments	
320-5	51849-51856	Writing	
320-6	51857-51862	Style	
320-7	51863-51869	Monday	
320-8	51869-51870	,	
320-9	51871-51875	July	
320-10	51876-51878	27	
320-11	51878-51879	,	
320-12	51880-51884	2020	
320-13	51885-51890	There	
320-14	51891-51895	seem	
320-15	51896-51898	to	
320-16	51899-51901	be	
320-17	51902-51904	as	
320-18	51905-51909	many	
320-19	51910-51917	methods	
320-20	51918-51920	of	
320-21	51921-51928	writing	
320-22	51929-51932	sql	
320-23	51933-51940	queries	
320-24	51941-51943	as	
320-25	51944-51948	ways	
320-26	51949-51951	of	
320-27	51952-51959	writing	
320-28	51960-51966	essays	
320-29	51966-51967	.	

#Text=While spacing, capitalization, and naming are all personal preferences, there are also logical arguments for why
#Text=certain styles are better than others.
321-1	51968-51973	While	
321-2	51974-51981	spacing	
321-3	51981-51982	,	
321-4	51983-51997	capitalization	
321-5	51997-51998	,	
321-6	51999-52002	and	
321-7	52003-52009	naming	
321-8	52010-52013	are	
321-9	52014-52017	all	
321-10	52018-52026	personal	
321-11	52027-52038	preferences	
321-12	52038-52039	,	
321-13	52040-52045	there	
321-14	52046-52049	are	
321-15	52050-52054	also	
321-16	52055-52062	logical	
321-17	52063-52072	arguments	
321-18	52073-52076	for	
321-19	52077-52080	why	
321-20	52081-52088	certain	
321-21	52089-52095	styles	
321-22	52096-52099	are	
321-23	52100-52106	better	
321-24	52107-52111	than	
321-25	52112-52118	others	
321-26	52118-52119	.	

#Text=This web page outlines one set of styles, based on Joe Celko's
#Text=SQL Programming Style.
322-1	52120-52124	This	
322-2	52125-52128	web	
322-3	52129-52133	page	
322-4	52134-52142	outlines	
322-5	52143-52146	one	
322-6	52147-52150	set	
322-7	52151-52153	of	
322-8	52154-52160	styles	
322-9	52160-52161	,	
322-10	52162-52167	based	
322-11	52168-52170	on	
322-12	52171-52174	Joe	
322-13	52175-52182	Celko's	
322-14	52183-52186	SQL	
322-15	52187-52198	Programming	
322-16	52199-52204	Style	
322-17	52204-52205	.	

#Text=While I don't agree with all the style decisions, I feel it is a good way to think about
#Text=your own style decisions and increase style consistency.
323-1	52206-52211	While	
323-2	52212-52213	I	
323-3	52214-52219	don't	
323-4	52220-52225	agree	
323-5	52226-52230	with	
323-6	52231-52234	all	
323-7	52235-52238	the	
323-8	52239-52244	style	
323-9	52245-52254	decisions	
323-10	52254-52255	,	
323-11	52256-52257	I	
323-12	52258-52262	feel	
323-13	52263-52265	it	
323-14	52266-52268	is	
323-15	52269-52270	a	
323-16	52271-52275	good	
323-17	52276-52279	way	
323-18	52280-52282	to	
323-19	52283-52288	think	
323-20	52289-52294	about	
323-21	52295-52299	your	
323-22	52300-52303	own	
323-23	52304-52309	style	
323-24	52310-52319	decisions	
323-25	52320-52323	and	
323-26	52324-52332	increase	
323-27	52333-52338	style	
323-28	52339-52350	consistency	
323-29	52350-52351	.	

#Text=View or Post Comments
#Text=Encryption at Rest
#Text=Friday, July 24, 2020
#Text=There are many security guides that require encryption at rest.
324-1	52352-52356	View	
324-2	52357-52359	or	
324-3	52360-52364	Post	
324-4	52365-52373	Comments	
324-5	52374-52384	Encryption	
324-6	52385-52387	at	
324-7	52388-52392	Rest	
324-8	52393-52399	Friday	
324-9	52399-52400	,	
324-10	52401-52405	July	
324-11	52406-52408	24	
324-12	52408-52409	,	
324-13	52410-52414	2020	
324-14	52415-52420	There	
324-15	52421-52424	are	
324-16	52425-52429	many	
324-17	52430-52438	security	
324-18	52439-52445	guides	
324-19	52446-52450	that	
324-20	52451-52458	require	
324-21	52459-52469	encryption	
324-22	52470-52472	at	
324-23	52473-52477	rest	
324-24	52477-52478	.	

#Text=However, it is unclear exactly what "at rest" means.
325-1	52479-52486	However	
325-2	52486-52487	,	
325-3	52488-52490	it	
325-4	52491-52493	is	
325-5	52494-52501	unclear	
325-6	52502-52509	exactly	
325-7	52510-52514	what	
325-8	52515-52516	"	
325-9	52516-52518	at	
325-10	52519-52523	rest	
325-11	52523-52524	"	
325-12	52525-52530	means	
325-13	52530-52531	.	

#Text=Encrypted at rest can potentially mean encrypted when the:
#Text=Storage is powered off
#Text=File system is unmounted
#Text=Database is not running
#Text=Data is in the kernel's file system cache
#Text=Write-ahead log is in archive storage
#Text=Data is in backups
#Text=Data is in the database process's memory
#Text=Odds are some of these items are required to implement a guide's "encryption at rest," but maybe not all of them.
326-1	52532-52541	Encrypted	
326-2	52542-52544	at	
326-3	52545-52549	rest	
326-4	52550-52553	can	
326-5	52554-52565	potentially	
326-6	52566-52570	mean	
326-7	52571-52580	encrypted	
326-8	52581-52585	when	
326-9	52586-52589	the	
326-10	52589-52590	:	
326-11	52591-52598	Storage	
326-12	52599-52601	is	
326-13	52602-52609	powered	
326-14	52610-52613	off	
326-15	52614-52618	File	
326-16	52619-52625	system	
326-17	52626-52628	is	
326-18	52629-52638	unmounted	
326-19	52639-52647	Database	
326-20	52648-52650	is	
326-21	52651-52654	not	
326-22	52655-52662	running	
326-23	52663-52667	Data	
326-24	52668-52670	is	
326-25	52671-52673	in	
326-26	52674-52677	the	
326-27	52678-52686	kernel's	
326-28	52687-52691	file	
326-29	52692-52698	system	
326-30	52699-52704	cache	
326-31	52705-52716	Write-ahead	
326-32	52717-52720	log	
326-33	52721-52723	is	
326-34	52724-52726	in	
326-35	52727-52734	archive	
326-36	52735-52742	storage	
326-37	52743-52747	Data	
326-38	52748-52750	is	
326-39	52751-52753	in	
326-40	52754-52761	backups	
326-41	52762-52766	Data	
326-42	52767-52769	is	
326-43	52770-52772	in	
326-44	52773-52776	the	
326-45	52777-52785	database	
326-46	52786-52795	process's	
326-47	52796-52802	memory	
326-48	52803-52807	Odds	
326-49	52808-52811	are	
326-50	52812-52816	some	
326-51	52817-52819	of	
326-52	52820-52825	these	
326-53	52826-52831	items	
326-54	52832-52835	are	
326-55	52836-52844	required	
326-56	52845-52847	to	
326-57	52848-52857	implement	
326-58	52858-52859	a	
326-59	52860-52867	guide's	
326-60	52868-52869	"	
326-61	52869-52879	encryption	
326-62	52880-52882	at	
326-63	52883-52887	rest	
326-64	52887-52888	,	
326-65	52888-52889	"	
326-66	52890-52893	but	
326-67	52894-52899	maybe	
326-68	52900-52903	not	
326-69	52904-52907	all	
326-70	52908-52910	of	
326-71	52911-52915	them	
326-72	52915-52916	.	

#Text=The last one is particularly difficult, especially since the unlock key probably also has
#Text=to be somewhere in process memory.
327-1	52917-52920	The	
327-2	52921-52925	last	
327-3	52926-52929	one	
327-4	52930-52932	is	
327-5	52933-52945	particularly	
327-6	52946-52955	difficult	
327-7	52955-52956	,	
327-8	52957-52967	especially	
327-9	52968-52973	since	
327-10	52974-52977	the	
327-11	52978-52984	unlock	
327-12	52985-52988	key	
327-13	52989-52997	probably	
327-14	52998-53002	also	
327-15	53003-53006	has	
327-16	53007-53009	to	
327-17	53010-53012	be	
327-18	53013-53022	somewhere	
327-19	53023-53025	in	
327-20	53026-53033	process	
327-21	53034-53040	memory	
327-22	53040-53041	.	

#Text=When implementing encryption at rest, it is good to be clear exactly what encryption levels are required, and what risks they are designed to minimize.
328-1	53042-53046	When	
328-2	53047-53059	implementing	
328-3	53060-53070	encryption	
328-4	53071-53073	at	
328-5	53074-53078	rest	
328-6	53078-53079	,	
328-7	53080-53082	it	
328-8	53083-53085	is	
328-9	53086-53090	good	
328-10	53091-53093	to	
328-11	53094-53096	be	
328-12	53097-53102	clear	
328-13	53103-53110	exactly	
328-14	53111-53115	what	
328-15	53116-53126	encryption	
328-16	53127-53133	levels	
328-17	53134-53137	are	
328-18	53138-53146	required	
328-19	53146-53147	,	
328-20	53148-53151	and	
328-21	53152-53156	what	
328-22	53157-53162	risks	
328-23	53163-53167	they	
328-24	53168-53171	are	
328-25	53172-53180	designed	
328-26	53181-53183	to	
328-27	53184-53192	minimize	
328-28	53192-53193	.	

#Text=View or Post Comments
#Text=Passwords in Log files
#Text=Wednesday, July 22, 2020
#Text=No one likes user passwords appearing in log files (except the bad guys/gals).
329-1	53194-53198	View	
329-2	53199-53201	or	
329-3	53202-53206	Post	
329-4	53207-53215	Comments	
329-5	53216-53225	Passwords	
329-6	53226-53228	in	
329-7	53229-53232	Log	
329-8	53233-53238	files	
329-9	53239-53248	Wednesday	
329-10	53248-53249	,	
329-11	53250-53254	July	
329-12	53255-53257	22	
329-13	53257-53258	,	
329-14	53259-53263	2020	
329-15	53264-53266	No	
329-16	53267-53270	one	
329-17	53271-53276	likes	
329-18	53277-53281	user	
329-19	53282-53291	passwords	
329-20	53292-53301	appearing	
329-21	53302-53304	in	
329-22	53305-53308	log	
329-23	53309-53314	files	
329-24	53315-53316	(	
329-25	53316-53322	except	
329-26	53323-53326	the	
329-27	53327-53330	bad	
329-28	53331-53335	guys	
329-29	53335-53336	/	
329-30	53336-53340	gals	
329-31	53340-53341	)	
329-32	53341-53342	.	

#Text=Because Postgres uses sql queries to manage user accounts, including password assignment, it is possible for
#Text=passwords to appear in the server logs if, for example, log_statement is enabled or an error is generated,
#Text=depending on the setting of log_min_error_statement.
330-1	53343-53350	Because	
330-2	53351-53359	Postgres	
330-3	53360-53364	uses	
330-4	53365-53368	sql	
330-5	53369-53376	queries	
330-6	53377-53379	to	
330-7	53380-53386	manage	
330-8	53387-53391	user	
330-9	53392-53400	accounts	
330-10	53400-53401	,	
330-11	53402-53411	including	
330-12	53412-53420	password	
330-13	53421-53431	assignment	
330-14	53431-53432	,	
330-15	53433-53435	it	
330-16	53436-53438	is	
330-17	53439-53447	possible	
330-18	53448-53451	for	
330-19	53452-53461	passwords	
330-20	53462-53464	to	
330-21	53465-53471	appear	
330-22	53472-53474	in	
330-23	53475-53478	the	
330-24	53479-53485	server	
330-25	53486-53490	logs	
330-26	53491-53493	if	
330-27	53493-53494	,	
330-28	53495-53498	for	
330-29	53499-53506	example	
330-30	53506-53507	,	
330-31	53508-53521	log_statement	
330-32	53522-53524	is	
330-33	53525-53532	enabled	
330-34	53533-53535	or	
330-35	53536-53538	an	
330-36	53539-53544	error	
330-37	53545-53547	is	
330-38	53548-53557	generated	
330-39	53557-53558	,	
330-40	53559-53568	depending	
330-41	53569-53571	on	
330-42	53572-53575	the	
330-43	53576-53583	setting	
330-44	53584-53586	of	
330-45	53587-53610	log_min_error_statement	
330-46	53610-53611	.	

#Text=One solution is to encrypt the password manually before issuing the query, but that can be error-prone.
331-1	53612-53615	One	
331-2	53616-53624	solution	
331-3	53625-53627	is	
331-4	53628-53630	to	
331-5	53631-53638	encrypt	
331-6	53639-53642	the	
331-7	53643-53651	password	
331-8	53652-53660	manually	
331-9	53661-53667	before	
331-10	53668-53675	issuing	
331-11	53676-53679	the	
331-12	53680-53685	query	
331-13	53685-53686	,	
331-14	53687-53690	but	
331-15	53691-53695	that	
331-16	53696-53699	can	
331-17	53700-53702	be	
331-18	53703-53714	error-prone	
331-19	53714-53715	.	

#Text=A simpler solution is to use psql to
#Text=automatically encrypt passwords before sending them to the server, e.g.:
#Text=SET client_min_messages = 'log';
#Text=SET log_statement = 'all';
#Text=\\password postgres
#Text=Enter new password:
#Text=Enter it again:
#Text=LOG:
#Text=statement: show password_encryption
#Text=LOG:
#Text=statement: ALTER USER postgres PASSWORD 'md567429efea5606f58dff8f67e3e2ad490'
#Text=Notice psql runs show password_encryption to determine if md5 or scram-sha-256 should be used.
#Text=psql then hashes the supplied password and issues an alter user command.
332-1	53716-53717	A	
332-2	53718-53725	simpler	
332-3	53726-53734	solution	
332-4	53735-53737	is	
332-5	53738-53740	to	
332-6	53741-53744	use	
332-7	53745-53749	psql	
332-8	53750-53752	to	
332-9	53753-53766	automatically	
332-10	53767-53774	encrypt	
332-11	53775-53784	passwords	
332-12	53785-53791	before	
332-13	53792-53799	sending	
332-14	53800-53804	them	
332-15	53805-53807	to	
332-16	53808-53811	the	
332-17	53812-53818	server	
332-18	53818-53819	,	
332-19	53820-53823	e.g	
332-20	53823-53824	.	
332-21	53824-53825	:	
332-22	53826-53829	SET	
332-23	53830-53849	client_min_messages	
332-24	53850-53851	=	
332-25	53852-53853	'	
332-26	53853-53856	log	
332-27	53856-53857	'	
332-28	53857-53858	;	
332-29	53859-53862	SET	
332-30	53863-53876	log_statement	
332-31	53877-53878	=	
332-32	53879-53880	'	
332-33	53880-53883	all	
332-34	53883-53884	'	
332-35	53884-53885	;	
332-36	53886-53887	\	
332-37	53887-53895	password	
332-38	53896-53904	postgres	
332-39	53905-53910	Enter	
332-40	53911-53914	new	
332-41	53915-53923	password	
332-42	53923-53924	:	
332-43	53925-53930	Enter	
332-44	53931-53933	it	
332-45	53934-53939	again	
332-46	53939-53940	:	
332-47	53941-53944	LOG	
332-48	53944-53945	:	
332-49	53946-53955	statement	
332-50	53955-53956	:	
332-51	53957-53961	show	
332-52	53962-53981	password_encryption	
332-53	53982-53985	LOG	
332-54	53985-53986	:	
332-55	53987-53996	statement	
332-56	53996-53997	:	
332-57	53998-54003	ALTER	
332-58	54004-54008	USER	
332-59	54009-54017	postgres	
332-60	54018-54026	PASSWORD	
332-61	54027-54028	'	
332-62	54028-54063	md567429efea5606f58dff8f67e3e2ad490	
332-63	54063-54064	'	
332-64	54065-54071	Notice	
332-65	54072-54076	psql	
332-66	54077-54081	runs	
332-67	54082-54086	show	
332-68	54087-54106	password_encryption	
332-69	54107-54109	to	
332-70	54110-54119	determine	
332-71	54120-54122	if	
332-72	54123-54126	md5	
332-73	54127-54129	or	
332-74	54130-54139	scram-sha	
332-75	54139-54140	-	
332-76	54140-54143	256	
332-77	54144-54150	should	
332-78	54151-54153	be	
332-79	54154-54158	used	
332-80	54158-54159	.	
332-81	54160-54164	psql	
332-82	54165-54169	then	
332-83	54170-54176	hashes	
332-84	54177-54180	the	
332-85	54181-54189	supplied	
332-86	54190-54198	password	
332-87	54199-54202	and	
332-88	54203-54209	issues	
332-89	54210-54212	an	
332-90	54213-54218	alter	
332-91	54219-54223	user	
332-92	54224-54231	command	
332-93	54231-54232	.	

#Text=While it
#Text=is not ideal that hashed passwords can appear in the server logs, it is better than having user-typed passwords in the logs.
333-1	54233-54238	While	
333-2	54239-54241	it	
333-3	54242-54244	is	
333-4	54245-54248	not	
333-5	54249-54254	ideal	
333-6	54255-54259	that	
333-7	54260-54266	hashed	
333-8	54267-54276	passwords	
333-9	54277-54280	can	
333-10	54281-54287	appear	
333-11	54288-54290	in	
333-12	54291-54294	the	
333-13	54295-54301	server	
333-14	54302-54306	logs	
333-15	54306-54307	,	
333-16	54308-54310	it	
333-17	54311-54313	is	
333-18	54314-54320	better	
333-19	54321-54325	than	
333-20	54326-54332	having	
333-21	54333-54343	user-typed	
333-22	54344-54353	passwords	
333-23	54354-54356	in	
333-24	54357-54360	the	
333-25	54361-54365	logs	
333-26	54365-54366	.	

#Text=(It might be wise to set log_min_error_statement to "panic" to prevent
#Text=logging of error queries.)
334-1	54367-54368	(	
334-2	54368-54370	It	
334-3	54371-54376	might	
334-4	54377-54379	be	
334-5	54380-54384	wise	
334-6	54385-54387	to	
334-7	54388-54391	set	
334-8	54392-54415	log_min_error_statement	
334-9	54416-54418	to	
334-10	54419-54420	"	
334-11	54420-54425	panic	
334-12	54425-54426	"	
334-13	54427-54429	to	
334-14	54430-54437	prevent	
334-15	54438-54445	logging	
334-16	54446-54448	of	
334-17	54449-54454	error	
334-18	54455-54462	queries	
334-19	54462-54463	.	
334-20	54463-54464	)	

#Text=Another secure option is to use syslog to send the logs to a secure server.
335-1	54465-54472	Another	
335-2	54473-54479	secure	
335-3	54480-54486	option	
335-4	54487-54489	is	
335-5	54490-54492	to	
335-6	54493-54496	use	
335-7	54497-54503	syslog	
335-8	54504-54506	to	
335-9	54507-54511	send	
335-10	54512-54515	the	
335-11	54516-54520	logs	
335-12	54521-54523	to	
335-13	54524-54525	a	
335-14	54526-54532	secure	
335-15	54533-54539	server	
335-16	54539-54540	.	

#Text=View or Post Comments
#Text=Force Password Changes
#Text=Monday, July 20, 2020
#Text=I have written about the limitations of passwords before.
336-1	54541-54545	View	
336-2	54546-54548	or	
336-3	54549-54553	Post	
336-4	54554-54562	Comments	
336-5	54563-54568	Force	
336-6	54569-54577	Password	
336-7	54578-54585	Changes	
336-8	54586-54592	Monday	
336-9	54592-54593	,	
336-10	54594-54598	July	
336-11	54599-54601	20	
336-12	54601-54602	,	
336-13	54603-54607	2020	
336-14	54608-54609	I	
336-15	54610-54614	have	
336-16	54615-54622	written	
336-17	54623-54628	about	
336-18	54629-54632	the	
336-19	54633-54644	limitations	
336-20	54645-54647	of	
336-21	54648-54657	passwords	
336-22	54658-54664	before	
336-23	54664-54665	.	

#Text=Postgres has limited ability to control passwords — mostly how passwords
#Text=are transferred and how long passwords remain valid.
337-1	54666-54674	Postgres	
337-2	54675-54678	has	
337-3	54679-54686	limited	
337-4	54687-54694	ability	
337-5	54695-54697	to	
337-6	54698-54705	control	
337-7	54706-54715	passwords	
337-8	54716-54717	—	
337-9	54718-54724	mostly	
337-10	54725-54728	how	
337-11	54729-54738	passwords	
337-12	54739-54742	are	
337-13	54743-54754	transferred	
337-14	54755-54758	and	
337-15	54759-54762	how	
337-16	54763-54767	long	
337-17	54768-54777	passwords	
337-18	54778-54784	remain	
337-19	54785-54790	valid	
337-20	54790-54791	.	

#Text=For more complex
#Text=password requirements, the Postgres project recommends using an external authentication system that manages passwords like ldap or
#Text=gssapi.
338-1	54792-54795	For	
338-2	54796-54800	more	
338-3	54801-54808	complex	
338-4	54809-54817	password	
338-5	54818-54830	requirements	
338-6	54830-54831	,	
338-7	54832-54835	the	
338-8	54836-54844	Postgres	
338-9	54845-54852	project	
338-10	54853-54863	recommends	
338-11	54864-54869	using	
338-12	54870-54872	an	
338-13	54873-54881	external	
338-14	54882-54896	authentication	
338-15	54897-54903	system	
338-16	54904-54908	that	
338-17	54909-54916	manages	
338-18	54917-54926	passwords	
338-19	54927-54931	like	
338-20	54932-54936	ldap	
338-21	54937-54939	or	
338-22	54940-54946	gssapi	
338-23	54946-54947	.	

#Text=Cert authentication has many
#Text=advantages because it does not require a password.
339-1	54948-54952	Cert	
339-2	54953-54967	authentication	
339-3	54968-54971	has	
339-4	54972-54976	many	
339-5	54977-54987	advantages	
339-6	54988-54995	because	
339-7	54996-54998	it	
339-8	54999-55003	does	
339-9	55004-55007	not	
339-10	55008-55015	require	
339-11	55016-55017	a	
339-12	55018-55026	password	
339-13	55026-55027	.	

#Text=Last year, one big change in password policy was the us nist
#Text=announcement that periodic password changes are no longer
#Text=recommended.
340-1	55028-55032	Last	
340-2	55033-55037	year	
340-3	55037-55038	,	
340-4	55039-55042	one	
340-5	55043-55046	big	
340-6	55047-55053	change	
340-7	55054-55056	in	
340-8	55057-55065	password	
340-9	55066-55072	policy	
340-10	55073-55076	was	
340-11	55077-55080	the	
340-12	55081-55083	us	
340-13	55084-55088	nist	
340-14	55089-55101	announcement	
340-15	55102-55106	that	
340-16	55107-55115	periodic	
340-17	55116-55124	password	
340-18	55125-55132	changes	
340-19	55133-55136	are	
340-20	55137-55139	no	
340-21	55140-55146	longer	
340-22	55147-55158	recommended	
340-23	55158-55159	.	

#Text=This article explains why this is a logical approach to
#Text=security.
341-1	55160-55164	This	
341-2	55165-55172	article	
341-3	55173-55181	explains	
341-4	55182-55185	why	
341-5	55186-55190	this	
341-6	55191-55193	is	
341-7	55194-55195	a	
341-8	55196-55203	logical	
341-9	55204-55212	approach	
341-10	55213-55215	to	
341-11	55216-55224	security	
341-12	55224-55225	.	

#Text=The new recommendations also suggests the limited value of password complexity requirements.
342-1	55226-55229	The	
342-2	55230-55233	new	
342-3	55234-55249	recommendations	
342-4	55250-55254	also	
342-5	55255-55263	suggests	
342-6	55264-55267	the	
342-7	55268-55275	limited	
342-8	55276-55281	value	
342-9	55282-55284	of	
342-10	55285-55293	password	
342-11	55294-55304	complexity	
342-12	55305-55317	requirements	
342-13	55317-55318	.	

#Text=Users occasionally ask for for more complex password management features to be built into Postgres.
343-1	55319-55324	Users	
343-2	55325-55337	occasionally	
343-3	55338-55341	ask	
343-4	55342-55345	for	
343-5	55346-55349	for	
343-6	55350-55354	more	
343-7	55355-55362	complex	
343-8	55363-55371	password	
343-9	55372-55382	management	
343-10	55383-55391	features	
343-11	55392-55394	to	
343-12	55395-55397	be	
343-13	55398-55403	built	
343-14	55404-55408	into	
343-15	55409-55417	Postgres	
343-16	55417-55418	.	

#Text=These new
#Text=guidelines make it less likely these features will ever be added to core Postgres.
344-1	55419-55424	These	
344-2	55425-55428	new	
344-3	55429-55439	guidelines	
344-4	55440-55444	make	
344-5	55445-55447	it	
344-6	55448-55452	less	
344-7	55453-55459	likely	
344-8	55460-55465	these	
344-9	55466-55474	features	
344-10	55475-55479	will	
344-11	55480-55484	ever	
344-12	55485-55487	be	
344-13	55488-55493	added	
344-14	55494-55496	to	
344-15	55497-55501	core	
344-16	55502-55510	Postgres	
344-17	55510-55511	.	

#Text=View or Post Comments
#Text=Credential Rotation Using Certificates
#Text=Friday, July 17, 2020
#Text=The traditional method of authenticating is local password.
345-1	55512-55516	View	
345-2	55517-55519	or	
345-3	55520-55524	Post	
345-4	55525-55533	Comments	
345-5	55534-55544	Credential	
345-6	55545-55553	Rotation	
345-7	55554-55559	Using	
345-8	55560-55572	Certificates	
345-9	55573-55579	Friday	
345-10	55579-55580	,	
345-11	55581-55585	July	
345-12	55586-55588	17	
345-13	55588-55589	,	
345-14	55590-55594	2020	
345-15	55595-55598	The	
345-16	55599-55610	traditional	
345-17	55611-55617	method	
345-18	55618-55620	of	
345-19	55621-55635	authenticating	
345-20	55636-55638	is	
345-21	55639-55644	local	
345-22	55645-55653	password	
345-23	55653-55654	.	

#Text=Authentication using external password managers is also very popular.
346-1	55655-55669	Authentication	
346-2	55670-55675	using	
346-3	55676-55684	external	
346-4	55685-55693	password	
346-5	55694-55702	managers	
346-6	55703-55705	is	
346-7	55706-55710	also	
346-8	55711-55715	very	
346-9	55716-55723	popular	
346-10	55723-55724	.	

#Text=However, passwords have known limitations, particularly password selection.
347-1	55725-55732	However	
347-2	55732-55733	,	
347-3	55734-55743	passwords	
347-4	55744-55748	have	
347-5	55749-55754	known	
347-6	55755-55766	limitations	
347-7	55766-55767	,	
347-8	55768-55780	particularly	
347-9	55781-55789	password	
347-10	55790-55799	selection	
347-11	55799-55800	.	

#Text=Managing password changes can also be complex.
348-1	55801-55809	Managing	
348-2	55810-55818	password	
348-3	55819-55826	changes	
348-4	55827-55830	can	
348-5	55831-55835	also	
348-6	55836-55838	be	
348-7	55839-55846	complex	
348-8	55846-55847	.	

#Text=If users change their own passwords, the process is simple.
349-1	55848-55850	If	
349-2	55851-55856	users	
349-3	55857-55863	change	
349-4	55864-55869	their	
349-5	55870-55873	own	
349-6	55874-55883	passwords	
349-7	55883-55884	,	
349-8	55885-55888	the	
349-9	55889-55896	process	
349-10	55897-55899	is	
349-11	55900-55906	simple	
349-12	55906-55907	.	

#Text=However, if someone else needs to change the password, and there is a delay between the user
#Text=requesting the change and the change being made, it can be difficult for the user to know when to switch to using the new password.
350-1	55908-55915	However	
350-2	55915-55916	,	
350-3	55917-55919	if	
350-4	55920-55927	someone	
350-5	55928-55932	else	
350-6	55933-55938	needs	
350-7	55939-55941	to	
350-8	55942-55948	change	
350-9	55949-55952	the	
350-10	55953-55961	password	
350-11	55961-55962	,	
350-12	55963-55966	and	
350-13	55967-55972	there	
350-14	55973-55975	is	
350-15	55976-55977	a	
350-16	55978-55983	delay	
350-17	55984-55991	between	
350-18	55992-55995	the	
350-19	55996-56000	user	
350-20	56001-56011	requesting	
350-21	56012-56015	the	
350-22	56016-56022	change	
350-23	56023-56026	and	
350-24	56027-56030	the	
350-25	56031-56037	change	
350-26	56038-56043	being	
350-27	56044-56048	made	
350-28	56048-56049	,	
350-29	56050-56052	it	
350-30	56053-56056	can	
350-31	56057-56059	be	
350-32	56060-56069	difficult	
350-33	56070-56073	for	
350-34	56074-56077	the	
350-35	56078-56082	user	
350-36	56083-56085	to	
350-37	56086-56090	know	
350-38	56091-56095	when	
350-39	56096-56098	to	
350-40	56099-56105	switch	
350-41	56106-56108	to	
350-42	56109-56114	using	
350-43	56115-56118	the	
350-44	56119-56122	new	
350-45	56123-56131	password	
350-46	56131-56132	.	

#Text=For applications that connect to the database by supplying passwords
#Text=automatically, password changes can be even more complex.
351-1	56133-56136	For	
351-2	56137-56149	applications	
351-3	56150-56154	that	
351-4	56155-56162	connect	
351-5	56163-56165	to	
351-6	56166-56169	the	
351-7	56170-56178	database	
351-8	56179-56181	by	
351-9	56182-56191	supplying	
351-10	56192-56201	passwords	
351-11	56202-56215	automatically	
351-12	56215-56216	,	
351-13	56217-56225	password	
351-14	56226-56233	changes	
351-15	56234-56237	can	
351-16	56238-56240	be	
351-17	56241-56245	even	
351-18	56246-56250	more	
351-19	56251-56258	complex	
351-20	56258-56259	.	

#Text=Programming applications to try both old and new passwords is awkward.
352-1	56260-56271	Programming	
352-2	56272-56284	applications	
352-3	56285-56287	to	
352-4	56288-56291	try	
352-5	56292-56296	both	
352-6	56297-56300	old	
352-7	56301-56304	and	
352-8	56305-56308	new	
352-9	56309-56318	passwords	
352-10	56319-56321	is	
352-11	56322-56329	awkward	
352-12	56329-56330	.	

#Text=Instead of using something you know, e.g., passwords, another authentication approach is to use something you have.
353-1	56331-56338	Instead	
353-2	56339-56341	of	
353-3	56342-56347	using	
353-4	56348-56357	something	
353-5	56358-56361	you	
353-6	56362-56366	know	
353-7	56366-56367	,	
353-8	56368-56371	e.g	
353-9	56371-56372	.	
353-10	56372-56373	,	
353-11	56374-56383	passwords	
353-12	56383-56384	,	
353-13	56385-56392	another	
353-14	56393-56407	authentication	
353-15	56408-56416	approach	
353-16	56417-56419	is	
353-17	56420-56422	to	
353-18	56423-56426	use	
353-19	56427-56436	something	
353-20	56437-56440	you	
353-21	56441-56445	have	
353-22	56445-56446	.	

#Text=One ideal method of
#Text="something you have" is certificate authentication.
354-1	56447-56450	One	
354-2	56451-56456	ideal	
354-3	56457-56463	method	
354-4	56464-56466	of	
354-5	56467-56468	"	
354-6	56468-56477	something	
354-7	56478-56481	you	
354-8	56482-56486	have	
354-9	56486-56487	"	
354-10	56488-56490	is	
354-11	56491-56502	certificate	
354-12	56503-56517	authentication	
354-13	56517-56518	.	

#Text=It allows for more effective credential rotation because the old and new
#Text=certificates can be valid at the same time.
355-1	56519-56521	It	
355-2	56522-56528	allows	
355-3	56529-56532	for	
355-4	56533-56537	more	
355-5	56538-56547	effective	
355-6	56548-56558	credential	
355-7	56559-56567	rotation	
355-8	56568-56575	because	
355-9	56576-56579	the	
355-10	56580-56583	old	
355-11	56584-56587	and	
355-12	56588-56591	new	
355-13	56592-56604	certificates	
355-14	56605-56608	can	
355-15	56609-56611	be	
355-16	56612-56617	valid	
355-17	56618-56620	at	
355-18	56621-56624	the	
355-19	56625-56629	same	
355-20	56630-56634	time	
355-21	56634-56635	.	

#Text=The process of replacing ssl certificates is:
#Text=Create a new certificate, signed by a certificate authority in the same certificate chain as the server certificate
#Text=Replace the old client certificate with the new one
#Text=Add the old client certificate to the certificate revocation list (crl)
#Text=After step one, administrators don't need to rush step two because the old and new certificates are both valid.
356-1	56636-56639	The	
356-2	56640-56647	process	
356-3	56648-56650	of	
356-4	56651-56660	replacing	
356-5	56661-56664	ssl	
356-6	56665-56677	certificates	
356-7	56678-56680	is	
356-8	56680-56681	:	
356-9	56682-56688	Create	
356-10	56689-56690	a	
356-11	56691-56694	new	
356-12	56695-56706	certificate	
356-13	56706-56707	,	
356-14	56708-56714	signed	
356-15	56715-56717	by	
356-16	56718-56719	a	
356-17	56720-56731	certificate	
356-18	56732-56741	authority	
356-19	56742-56744	in	
356-20	56745-56748	the	
356-21	56749-56753	same	
356-22	56754-56765	certificate	
356-23	56766-56771	chain	
356-24	56772-56774	as	
356-25	56775-56778	the	
356-26	56779-56785	server	
356-27	56786-56797	certificate	
356-28	56798-56805	Replace	
356-29	56806-56809	the	
356-30	56810-56813	old	
356-31	56814-56820	client	
356-32	56821-56832	certificate	
356-33	56833-56837	with	
356-34	56838-56841	the	
356-35	56842-56845	new	
356-36	56846-56849	one	
356-37	56850-56853	Add	
356-38	56854-56857	the	
356-39	56858-56861	old	
356-40	56862-56868	client	
356-41	56869-56880	certificate	
356-42	56881-56883	to	
356-43	56884-56887	the	
356-44	56888-56899	certificate	
356-45	56900-56910	revocation	
356-46	56911-56915	list	
356-47	56916-56917	(	
356-48	56917-56920	crl	
356-49	56920-56921	)	
356-50	56922-56927	After	
356-51	56928-56932	step	
356-52	56933-56936	one	
356-53	56936-56937	,	
356-54	56938-56952	administrators	
356-55	56953-56958	don't	
356-56	56959-56963	need	
356-57	56964-56966	to	
356-58	56967-56971	rush	
356-59	56972-56976	step	
356-60	56977-56980	two	
356-61	56981-56988	because	
356-62	56989-56992	the	
356-63	56993-56996	old	
356-64	56997-57000	and	
356-65	57001-57004	new	
356-66	57005-57017	certificates	
356-67	57018-57021	are	
356-68	57022-57026	both	
356-69	57027-57032	valid	
356-70	57032-57033	.	

#Text=Once step two is complete, step three can be done.
357-1	57034-57038	Once	
357-2	57039-57043	step	
357-3	57044-57047	two	
357-4	57048-57050	is	
357-5	57051-57059	complete	
357-6	57059-57060	,	
357-7	57061-57065	step	
357-8	57066-57071	three	
357-9	57072-57075	can	
357-10	57076-57078	be	
357-11	57079-57083	done	
357-12	57083-57084	.	

#Text=Step three is only useful if the server
#Text=has been set up to honor certificate revocation lists.
358-1	57085-57089	Step	
358-2	57090-57095	three	
358-3	57096-57098	is	
358-4	57099-57103	only	
358-5	57104-57110	useful	
358-6	57111-57113	if	
358-7	57114-57117	the	
358-8	57118-57124	server	
358-9	57125-57128	has	
358-10	57129-57133	been	
358-11	57134-57137	set	
358-12	57138-57140	up	
358-13	57141-57143	to	
358-14	57144-57149	honor	
358-15	57150-57161	certificate	
358-16	57162-57172	revocation	
358-17	57173-57178	lists	
358-18	57178-57179	.	

#Text=You also must set an expiration date for certificates to limit their lifetimes.
359-1	57180-57183	You	
359-2	57184-57188	also	
359-3	57189-57193	must	
359-4	57194-57197	set	
359-5	57198-57200	an	
359-6	57201-57211	expiration	
359-7	57212-57216	date	
359-8	57217-57220	for	
359-9	57221-57233	certificates	
359-10	57234-57236	to	
359-11	57237-57242	limit	
359-12	57243-57248	their	
359-13	57249-57258	lifetimes	
359-14	57258-57259	.	

#Text=There is no similar way to do delayed authentication rotation using password-based methods.
360-1	57260-57265	There	
360-2	57266-57268	is	
360-3	57269-57271	no	
360-4	57272-57279	similar	
360-5	57280-57283	way	
360-6	57284-57286	to	
360-7	57287-57289	do	
360-8	57290-57297	delayed	
360-9	57298-57312	authentication	
360-10	57313-57321	rotation	
360-11	57322-57327	using	
360-12	57328-57342	password-based	
360-13	57343-57350	methods	
360-14	57350-57351	.	

#Text=View or Post Comments
#Text=Grouping Sets and Null Values
#Text=Wednesday, July 15, 2020
#Text=You might be aware that grouping sets, along with rollup and cube, allow queries to
#Text=return additional group by rows.
361-1	57352-57356	View	
361-2	57357-57359	or	
361-3	57360-57364	Post	
361-4	57365-57373	Comments	
361-5	57374-57382	Grouping	
361-6	57383-57387	Sets	
361-7	57388-57391	and	
361-8	57392-57396	Null	
361-9	57397-57403	Values	
361-10	57404-57413	Wednesday	
361-11	57413-57414	,	
361-12	57415-57419	July	
361-13	57420-57422	15	
361-14	57422-57423	,	
361-15	57424-57428	2020	
361-16	57429-57432	You	
361-17	57433-57438	might	
361-18	57439-57441	be	
361-19	57442-57447	aware	
361-20	57448-57452	that	
361-21	57453-57461	grouping	
361-22	57462-57466	sets	
361-23	57466-57467	,	
361-24	57468-57473	along	
361-25	57474-57478	with	
361-26	57479-57485	rollup	
361-27	57486-57489	and	
361-28	57490-57494	cube	
361-29	57494-57495	,	
361-30	57496-57501	allow	
361-31	57502-57509	queries	
361-32	57510-57512	to	
361-33	57513-57519	return	
361-34	57520-57530	additional	
361-35	57531-57536	group	
361-36	57537-57539	by	
361-37	57540-57544	rows	
361-38	57544-57545	.	

#Text=However, because these additional rows are added by Postgres, it is unclear what value to use for summary fields, so the sql standard specifies
#Text=null for those fields.
362-1	57546-57553	However	
362-2	57553-57554	,	
362-3	57555-57562	because	
362-4	57563-57568	these	
362-5	57569-57579	additional	
362-6	57580-57584	rows	
362-7	57585-57588	are	
362-8	57589-57594	added	
362-9	57595-57597	by	
362-10	57598-57606	Postgres	
362-11	57606-57607	,	
362-12	57608-57610	it	
362-13	57611-57613	is	
362-14	57614-57621	unclear	
362-15	57622-57626	what	
362-16	57627-57632	value	
362-17	57633-57635	to	
362-18	57636-57639	use	
362-19	57640-57643	for	
362-20	57644-57651	summary	
362-21	57652-57658	fields	
362-22	57658-57659	,	
362-23	57660-57662	so	
362-24	57663-57666	the	
362-25	57667-57670	sql	
362-26	57671-57679	standard	
362-27	57680-57689	specifies	
362-28	57690-57694	null	
362-29	57695-57698	for	
362-30	57699-57704	those	
362-31	57705-57711	fields	
362-32	57711-57712	.	

#Text=Let's start with a simple example using a simple group by:
#Text=CREATE TABLE test (x TEXT, y INTEGER);
#Text=INSERT INTO test VALUES ('a', 0), ('b', 0), (NULL, 0);
#Text=SELECT x, COUNT(*) FROM test GROUP BY x ORDER BY x;
#Text=x | count
#Text=---+-------
#Text=a |
#Text=b |
#Text=Each row represents a value in test and each row has a count of one since there is one matching row for each value.
363-1	57713-57718	Let's	
363-2	57719-57724	start	
363-3	57725-57729	with	
363-4	57730-57731	a	
363-5	57732-57738	simple	
363-6	57739-57746	example	
363-7	57747-57752	using	
363-8	57753-57754	a	
363-9	57755-57761	simple	
363-10	57762-57767	group	
363-11	57768-57770	by	
363-12	57770-57771	:	
363-13	57772-57778	CREATE	
363-14	57779-57784	TABLE	
363-15	57785-57789	test	
363-16	57790-57791	(	
363-17	57791-57792	x	
363-18	57793-57797	TEXT	
363-19	57797-57798	,	
363-20	57799-57800	y	
363-21	57801-57808	INTEGER	
363-22	57808-57809	)	
363-23	57809-57810	;	
363-24	57811-57817	INSERT	
363-25	57818-57822	INTO	
363-26	57823-57827	test	
363-27	57828-57834	VALUES	
363-28	57835-57836	(	
363-29	57836-57837	'	
363-30	57837-57838	a	
363-31	57838-57839	'	
363-32	57839-57840	,	
363-33	57841-57842	0	
363-34	57842-57843	)	
363-35	57843-57844	,	
363-36	57845-57846	(	
363-37	57846-57847	'	
363-38	57847-57848	b	
363-39	57848-57849	'	
363-40	57849-57850	,	
363-41	57851-57852	0	
363-42	57852-57853	)	
363-43	57853-57854	,	
363-44	57855-57856	(	
363-45	57856-57860	NULL	
363-46	57860-57861	,	
363-47	57862-57863	0	
363-48	57863-57864	)	
363-49	57864-57865	;	
363-50	57866-57872	SELECT	
363-51	57873-57874	x	
363-52	57874-57875	,	
363-53	57876-57881	COUNT	
363-54	57881-57882	(	
363-55	57882-57883	*	
363-56	57883-57884	)	
363-57	57885-57889	FROM	
363-58	57890-57894	test	
363-59	57895-57900	GROUP	
363-60	57901-57903	BY	
363-61	57904-57905	x	
363-62	57906-57911	ORDER	
363-63	57912-57914	BY	
363-64	57915-57916	x	
363-65	57916-57917	;	
363-66	57918-57919	x	
363-67	57920-57921	|	
363-68	57922-57927	count	
363-69	57928-57929	-	
363-70	57929-57930	-	
363-71	57930-57931	-	
363-72	57931-57932	+	
363-73	57932-57933	-	
363-74	57933-57934	-	
363-75	57934-57935	-	
363-76	57935-57936	-	
363-77	57936-57937	-	
363-78	57937-57938	-	
363-79	57938-57939	-	
363-80	57940-57941	a	
363-81	57942-57943	|	
363-82	57944-57945	b	
363-83	57946-57947	|	
363-84	57948-57952	Each	
363-85	57953-57956	row	
363-86	57957-57967	represents	
363-87	57968-57969	a	
363-88	57970-57975	value	
363-89	57976-57978	in	
363-90	57979-57983	test	
363-91	57984-57987	and	
363-92	57988-57992	each	
363-93	57993-57996	row	
363-94	57997-58000	has	
363-95	58001-58002	a	
363-96	58003-58008	count	
363-97	58009-58011	of	
363-98	58012-58015	one	
363-99	58016-58021	since	
363-100	58022-58027	there	
363-101	58028-58030	is	
363-102	58031-58034	one	
363-103	58035-58043	matching	
363-104	58044-58047	row	
363-105	58048-58051	for	
363-106	58052-58056	each	
363-107	58057-58062	value	
363-108	58062-58063	.	

#Text=The last row is the number of nulls in the table, also one.
364-1	58064-58067	The	
364-2	58068-58072	last	
364-3	58073-58076	row	
364-4	58077-58079	is	
364-5	58080-58083	the	
364-6	58084-58090	number	
364-7	58091-58093	of	
364-8	58094-58099	nulls	
364-9	58100-58102	in	
364-10	58103-58106	the	
364-11	58107-58112	table	
364-12	58112-58113	,	
364-13	58114-58118	also	
364-14	58119-58122	one	
364-15	58122-58123	.	

#Text=Here is the same
#Text=query using rollup:
#Text=SELECT x, COUNT(*) FROM test GROUP BY ROLLUP(x) ORDER BY x;
#Text=x | count
#Text=---+-------
#Text=a |
#Text=b |
#Text=Notice there are two rows where the first column is null.
365-1	58124-58128	Here	
365-2	58129-58131	is	
365-3	58132-58135	the	
365-4	58136-58140	same	
365-5	58141-58146	query	
365-6	58147-58152	using	
365-7	58153-58159	rollup	
365-8	58159-58160	:	
365-9	58161-58167	SELECT	
365-10	58168-58169	x	
365-11	58169-58170	,	
365-12	58171-58176	COUNT	
365-13	58176-58177	(	
365-14	58177-58178	*	
365-15	58178-58179	)	
365-16	58180-58184	FROM	
365-17	58185-58189	test	
365-18	58190-58195	GROUP	
365-19	58196-58198	BY	
365-20	58199-58205	ROLLUP	
365-21	58205-58206	(	
365-22	58206-58207	x	
365-23	58207-58208	)	
365-24	58209-58214	ORDER	
365-25	58215-58217	BY	
365-26	58218-58219	x	
365-27	58219-58220	;	
365-28	58221-58222	x	
365-29	58223-58224	|	
365-30	58225-58230	count	
365-31	58231-58232	-	
365-32	58232-58233	-	
365-33	58233-58234	-	
365-34	58234-58235	+	
365-35	58235-58236	-	
365-36	58236-58237	-	
365-37	58237-58238	-	
365-38	58238-58239	-	
365-39	58239-58240	-	
365-40	58240-58241	-	
365-41	58241-58242	-	
365-42	58243-58244	a	
365-43	58245-58246	|	
365-44	58247-58248	b	
365-45	58249-58250	|	
365-46	58251-58257	Notice	
365-47	58258-58263	there	
365-48	58264-58267	are	
365-49	58268-58271	two	
365-50	58272-58276	rows	
365-51	58277-58282	where	
365-52	58283-58286	the	
365-53	58287-58292	first	
365-54	58293-58299	column	
365-55	58300-58302	is	
365-56	58303-58307	null	
365-57	58307-58308	.	

#Text=Let's verify these are nulls and not something else using psql's \\pset:
#Text=\\pset null '(null)'
#Text=SELECT x, COUNT(*) FROM test GROUP BY ROLLUP(x) ORDER BY x;
#Text=| count
#Text=--------+-------
#Text=(null) |
#Text=(null) |
#Text=-- reset the psql NULL display
#Text=\\pset null ''
#Text=Yes, they are both null.
366-1	58309-58314	Let's	
366-2	58315-58321	verify	
366-3	58322-58327	these	
366-4	58328-58331	are	
366-5	58332-58337	nulls	
366-6	58338-58341	and	
366-7	58342-58345	not	
366-8	58346-58355	something	
366-9	58356-58360	else	
366-10	58361-58366	using	
366-11	58367-58373	psql's	
366-12	58374-58375	\	
366-13	58375-58379	pset	
366-14	58379-58380	:	
366-15	58381-58382	\	
366-16	58382-58386	pset	
366-17	58387-58391	null	
366-18	58392-58393	'	
366-19	58393-58394	(	
366-20	58394-58398	null	
366-21	58398-58399	)	
366-22	58399-58400	'	
366-23	58401-58407	SELECT	
366-24	58408-58409	x	
366-25	58409-58410	,	
366-26	58411-58416	COUNT	
366-27	58416-58417	(	
366-28	58417-58418	*	
366-29	58418-58419	)	
366-30	58420-58424	FROM	
366-31	58425-58429	test	
366-32	58430-58435	GROUP	
366-33	58436-58438	BY	
366-34	58439-58445	ROLLUP	
366-35	58445-58446	(	
366-36	58446-58447	x	
366-37	58447-58448	)	
366-38	58449-58454	ORDER	
366-39	58455-58457	BY	
366-40	58458-58459	x	
366-41	58459-58460	;	
366-42	58461-58462	|	
366-43	58463-58468	count	
366-44	58469-58470	-	
366-45	58470-58471	-	
366-46	58471-58472	-	
366-47	58472-58473	-	
366-48	58473-58474	-	
366-49	58474-58475	-	
366-50	58475-58476	-	
366-51	58476-58477	-	
366-52	58477-58478	+	
366-53	58478-58479	-	
366-54	58479-58480	-	
366-55	58480-58481	-	
366-56	58481-58482	-	
366-57	58482-58483	-	
366-58	58483-58484	-	
366-59	58484-58485	-	
366-60	58486-58487	(	
366-61	58487-58491	null	
366-62	58491-58492	)	
366-63	58493-58494	|	
366-64	58495-58496	(	
366-65	58496-58500	null	
366-66	58500-58501	)	
366-67	58502-58503	|	
366-68	58504-58505	-	
366-69	58505-58506	-	
366-70	58507-58512	reset	
366-71	58513-58516	the	
366-72	58517-58521	psql	
366-73	58522-58526	NULL	
366-74	58527-58534	display	
366-75	58535-58536	\	
366-76	58536-58540	pset	
366-77	58541-58545	null	
366-78	58546-58547	'	
366-79	58547-58548	'	
366-80	58549-58552	Yes	
366-81	58552-58553	,	
366-82	58554-58558	they	
366-83	58559-58562	are	
366-84	58563-58567	both	
366-85	58568-58572	null	
366-86	58572-58573	.	

#Text=The first null is the one generated by rollup, and the last row is the number of null values.
367-1	58574-58577	The	
367-2	58578-58583	first	
367-3	58584-58588	null	
367-4	58589-58591	is	
367-5	58592-58595	the	
367-6	58596-58599	one	
367-7	58600-58609	generated	
367-8	58610-58612	by	
367-9	58613-58619	rollup	
367-10	58619-58620	,	
367-11	58621-58624	and	
367-12	58625-58628	the	
367-13	58629-58633	last	
367-14	58634-58637	row	
367-15	58638-58640	is	
367-16	58641-58644	the	
367-17	58645-58651	number	
367-18	58652-58654	of	
367-19	58655-58659	null	
367-20	58660-58666	values	
367-21	58666-58667	.	

#Text=This is quite confusing.
368-1	58668-58672	This	
368-2	58673-58675	is	
368-3	58676-58681	quite	
368-4	58682-58691	confusing	
368-5	58691-58692	.	

#Text=If we expect a column involved in a grouping set-type operation to perhaps contain nulls, how can we distinguish between those values and values added by grouping
#Text=set-type operations?
369-1	58693-58695	If	
369-2	58696-58698	we	
369-3	58699-58705	expect	
369-4	58706-58707	a	
369-5	58708-58714	column	
369-6	58715-58723	involved	
369-7	58724-58726	in	
369-8	58727-58728	a	
369-9	58729-58737	grouping	
369-10	58738-58746	set-type	
369-11	58747-58756	operation	
369-12	58757-58759	to	
369-13	58760-58767	perhaps	
369-14	58768-58775	contain	
369-15	58776-58781	nulls	
369-16	58781-58782	,	
369-17	58783-58786	how	
369-18	58787-58790	can	
369-19	58791-58793	we	
369-20	58794-58805	distinguish	
369-21	58806-58813	between	
369-22	58814-58819	those	
369-23	58820-58826	values	
369-24	58827-58830	and	
369-25	58831-58837	values	
369-26	58838-58843	added	
369-27	58844-58846	by	
369-28	58847-58855	grouping	
369-29	58856-58864	set-type	
369-30	58865-58875	operations	
369-31	58875-58876	?	

#Text=Well, your first inclination might be to use coalesce:
#Text=SELECT COALESCE(x, '(null)'), COUNT(*) FROM test GROUP BY ROLLUP(x) ORDER BY x;
#Text=coalesce | count
#Text=----------+-------
#Text=(null)
#Text=(null)
#Text=(Remember we turned off psql's special displaying of nulls, so (null) is coming from coalesce.)
370-1	58877-58881	Well	
370-2	58881-58882	,	
370-3	58883-58887	your	
370-4	58888-58893	first	
370-5	58894-58905	inclination	
370-6	58906-58911	might	
370-7	58912-58914	be	
370-8	58915-58917	to	
370-9	58918-58921	use	
370-10	58922-58930	coalesce	
370-11	58930-58931	:	
370-12	58932-58938	SELECT	
370-13	58939-58947	COALESCE	
370-14	58947-58948	(	
370-15	58948-58949	x	
370-16	58949-58950	,	
370-17	58951-58952	'	
370-18	58952-58953	(	
370-19	58953-58957	null	
370-20	58957-58958	)	
370-21	58958-58959	'	
370-22	58959-58960	)	
370-23	58960-58961	,	
370-24	58962-58967	COUNT	
370-25	58967-58968	(	
370-26	58968-58969	*	
370-27	58969-58970	)	
370-28	58971-58975	FROM	
370-29	58976-58980	test	
370-30	58981-58986	GROUP	
370-31	58987-58989	BY	
370-32	58990-58996	ROLLUP	
370-33	58996-58997	(	
370-34	58997-58998	x	
370-35	58998-58999	)	
370-36	59000-59005	ORDER	
370-37	59006-59008	BY	
370-38	59009-59010	x	
370-39	59010-59011	;	
370-40	59012-59020	coalesce	
370-41	59021-59022	|	
370-42	59023-59028	count	
370-43	59029-59030	-	
370-44	59030-59031	-	
370-45	59031-59032	-	
370-46	59032-59033	-	
370-47	59033-59034	-	
370-48	59034-59035	-	
370-49	59035-59036	-	
370-50	59036-59037	-	
370-51	59037-59038	-	
370-52	59038-59039	-	
370-53	59039-59040	+	
370-54	59040-59041	-	
370-55	59041-59042	-	
370-56	59042-59043	-	
370-57	59043-59044	-	
370-58	59044-59045	-	
370-59	59045-59046	-	
370-60	59046-59047	-	
370-61	59048-59049	(	
370-62	59049-59053	null	
370-63	59053-59054	)	
370-64	59055-59056	(	
370-65	59056-59060	null	
370-66	59060-59061	)	
370-67	59062-59063	(	
370-68	59063-59071	Remember	
370-69	59072-59074	we	
370-70	59075-59081	turned	
370-71	59082-59085	off	
370-72	59086-59092	psql's	
370-73	59093-59100	special	
370-74	59101-59111	displaying	
370-75	59112-59114	of	
370-76	59115-59120	nulls	
370-77	59120-59121	,	
370-78	59122-59124	so	
370-79	59125-59126	(	
370-80	59126-59130	null	
370-81	59130-59131	)	
370-82	59132-59134	is	
370-83	59135-59141	coming	
370-84	59142-59146	from	
370-85	59147-59155	coalesce	
370-86	59155-59156	.	
370-87	59156-59157	)	

#Text=That didn't help.
371-1	59158-59162	That	
371-2	59163-59169	didn't	
371-3	59170-59174	help	
371-4	59174-59175	.	

#Text=The reason is that the select target list is executed
#Text=last, as covered in a previous blog post.
372-1	59176-59179	The	
372-2	59180-59186	reason	
372-3	59187-59189	is	
372-4	59190-59194	that	
372-5	59195-59198	the	
372-6	59199-59205	select	
372-7	59206-59212	target	
372-8	59213-59217	list	
372-9	59218-59220	is	
372-10	59221-59229	executed	
372-11	59230-59234	last	
372-12	59234-59235	,	
372-13	59236-59238	as	
372-14	59239-59246	covered	
372-15	59247-59249	in	
372-16	59250-59251	a	
372-17	59252-59260	previous	
372-18	59261-59265	blog	
372-19	59266-59270	post	
372-20	59270-59271	.	

#Text=The right way to do it is to force coalesce to run before the grouping
#Text=set-type operation using a common table expression:
#Text=WITH t AS (
#Text=SELECT COALESCE(x, '(null)') AS x, y FROM test
#Text=SELECT x, COUNT(*) FROM t GROUP BY ROLLUP(x) ORDER BY x;
#Text=| count
#Text=--------+-------
#Text=(null) |
#Text=That's what we wanted — (null) for the inserted null, and a real null for the grouping set-type added row.
373-1	59272-59275	The	
373-2	59276-59281	right	
373-3	59282-59285	way	
373-4	59286-59288	to	
373-5	59289-59291	do	
373-6	59292-59294	it	
373-7	59295-59297	is	
373-8	59298-59300	to	
373-9	59301-59306	force	
373-10	59307-59315	coalesce	
373-11	59316-59318	to	
373-12	59319-59322	run	
373-13	59323-59329	before	
373-14	59330-59333	the	
373-15	59334-59342	grouping	
373-16	59343-59351	set-type	
373-17	59352-59361	operation	
373-18	59362-59367	using	
373-19	59368-59369	a	
373-20	59370-59376	common	
373-21	59377-59382	table	
373-22	59383-59393	expression	
373-23	59393-59394	:	
373-24	59395-59399	WITH	
373-25	59400-59401	t	
373-26	59402-59404	AS	
373-27	59405-59406	(	
373-28	59407-59413	SELECT	
373-29	59414-59422	COALESCE	
373-30	59422-59423	(	
373-31	59423-59424	x	
373-32	59424-59425	,	
373-33	59426-59427	'	
373-34	59427-59428	(	
373-35	59428-59432	null	
373-36	59432-59433	)	
373-37	59433-59434	'	
373-38	59434-59435	)	
373-39	59436-59438	AS	
373-40	59439-59440	x	
373-41	59440-59441	,	
373-42	59442-59443	y	
373-43	59444-59448	FROM	
373-44	59449-59453	test	
373-45	59454-59460	SELECT	
373-46	59461-59462	x	
373-47	59462-59463	,	
373-48	59464-59469	COUNT	
373-49	59469-59470	(	
373-50	59470-59471	*	
373-51	59471-59472	)	
373-52	59473-59477	FROM	
373-53	59478-59479	t	
373-54	59480-59485	GROUP	
373-55	59486-59488	BY	
373-56	59489-59495	ROLLUP	
373-57	59495-59496	(	
373-58	59496-59497	x	
373-59	59497-59498	)	
373-60	59499-59504	ORDER	
373-61	59505-59507	BY	
373-62	59508-59509	x	
373-63	59509-59510	;	
373-64	59511-59512	|	
373-65	59513-59518	count	
373-66	59519-59520	-	
373-67	59520-59521	-	
373-68	59521-59522	-	
373-69	59522-59523	-	
373-70	59523-59524	-	
373-71	59524-59525	-	
373-72	59525-59526	-	
373-73	59526-59527	-	
373-74	59527-59528	+	
373-75	59528-59529	-	
373-76	59529-59530	-	
373-77	59530-59531	-	
373-78	59531-59532	-	
373-79	59532-59533	-	
373-80	59533-59534	-	
373-81	59534-59535	-	
373-82	59536-59537	(	
373-83	59537-59541	null	
373-84	59541-59542	)	
373-85	59543-59544	|	
373-86	59545-59551	That's	
373-87	59552-59556	what	
373-88	59557-59559	we	
373-89	59560-59566	wanted	
373-90	59567-59568	—	
373-91	59569-59570	(	
373-92	59570-59574	null	
373-93	59574-59575	)	
373-94	59576-59579	for	
373-95	59580-59583	the	
373-96	59584-59592	inserted	
373-97	59593-59597	null	
373-98	59597-59598	,	
373-99	59599-59602	and	
373-100	59603-59604	a	
373-101	59605-59609	real	
373-102	59610-59614	null	
373-103	59615-59618	for	
373-104	59619-59622	the	
373-105	59623-59631	grouping	
373-106	59632-59640	set-type	
373-107	59641-59646	added	
373-108	59647-59650	row	
373-109	59650-59651	.	

#Text=Another option is to use grouping, which returns a non-zero value if the row is generated by a grouping
#Text=set, e.g.:
#Text=SELECT x, COUNT(*), GROUPING(x) FROM test GROUP BY ROLLUP(x) ORDER BY x;
#Text=x | count | grouping
#Text=---+-------+----------
#Text=a |
#Text=1 |
#Text=b |
#Text=1 |
#Text=3 |
#Text=1 |
#Text=This can be combined with case to control the label of the grouping set null column:
#Text=SELECT CASE
#Text=WHEN GROUPING(x) !
374-1	59652-59659	Another	
374-2	59660-59666	option	
374-3	59667-59669	is	
374-4	59670-59672	to	
374-5	59673-59676	use	
374-6	59677-59685	grouping	
374-7	59685-59686	,	
374-8	59687-59692	which	
374-9	59693-59700	returns	
374-10	59701-59702	a	
374-11	59703-59711	non-zero	
374-12	59712-59717	value	
374-13	59718-59720	if	
374-14	59721-59724	the	
374-15	59725-59728	row	
374-16	59729-59731	is	
374-17	59732-59741	generated	
374-18	59742-59744	by	
374-19	59745-59746	a	
374-20	59747-59755	grouping	
374-21	59756-59759	set	
374-22	59759-59760	,	
374-23	59761-59764	e.g	
374-24	59764-59765	.	
374-25	59765-59766	:	
374-26	59767-59773	SELECT	
374-27	59774-59775	x	
374-28	59775-59776	,	
374-29	59777-59782	COUNT	
374-30	59782-59783	(	
374-31	59783-59784	*	
374-32	59784-59785	)	
374-33	59785-59786	,	
374-34	59787-59795	GROUPING	
374-35	59795-59796	(	
374-36	59796-59797	x	
374-37	59797-59798	)	
374-38	59799-59803	FROM	
374-39	59804-59808	test	
374-40	59809-59814	GROUP	
374-41	59815-59817	BY	
374-42	59818-59824	ROLLUP	
374-43	59824-59825	(	
374-44	59825-59826	x	
374-45	59826-59827	)	
374-46	59828-59833	ORDER	
374-47	59834-59836	BY	
374-48	59837-59838	x	
374-49	59838-59839	;	
374-50	59840-59841	x	
374-51	59842-59843	|	
374-52	59844-59849	count	
374-53	59850-59851	|	
374-54	59852-59860	grouping	
374-55	59861-59862	-	
374-56	59862-59863	-	
374-57	59863-59864	-	
374-58	59864-59865	+	
374-59	59865-59866	-	
374-60	59866-59867	-	
374-61	59867-59868	-	
374-62	59868-59869	-	
374-63	59869-59870	-	
374-64	59870-59871	-	
374-65	59871-59872	-	
374-66	59872-59873	+	
374-67	59873-59874	-	
374-68	59874-59875	-	
374-69	59875-59876	-	
374-70	59876-59877	-	
374-71	59877-59878	-	
374-72	59878-59879	-	
374-73	59879-59880	-	
374-74	59880-59881	-	
374-75	59881-59882	-	
374-76	59882-59883	-	
374-77	59884-59885	a	
374-78	59886-59887	|	
374-79	59888-59889	1	
374-80	59890-59891	|	
374-81	59892-59893	b	
374-82	59894-59895	|	
374-83	59896-59897	1	
374-84	59898-59899	|	
374-85	59900-59901	3	
374-86	59902-59903	|	
374-87	59904-59905	1	
374-88	59906-59907	|	
374-89	59908-59912	This	
374-90	59913-59916	can	
374-91	59917-59919	be	
374-92	59920-59928	combined	
374-93	59929-59933	with	
374-94	59934-59938	case	
374-95	59939-59941	to	
374-96	59942-59949	control	
374-97	59950-59953	the	
374-98	59954-59959	label	
374-99	59960-59962	of	
374-100	59963-59966	the	
374-101	59967-59975	grouping	
374-102	59976-59979	set	
374-103	59980-59984	null	
374-104	59985-59991	column	
374-105	59991-59992	:	
374-106	59993-59999	SELECT	
374-107	60000-60004	CASE	
374-108	60005-60009	WHEN	
374-109	60010-60018	GROUPING	
374-110	60018-60019	(	
374-111	60019-60020	x	
374-112	60020-60021	)	
374-113	60022-60023	!	

#Text== 0 THEN x
#Text=WHEN x IS NOT NULL THEN x
#Text=ELSE '(null)'
#Text=END AS y,
#Text=COUNT(*)
#Text=FROM test
#Text=GROUP BY ROLLUP(x)
#Text=ORDER BY y;
#Text=| count
#Text=--------+-------
#Text=(null) |
#Text=View or Post Comments
#Text=JSONB:
#Text=A Container of Types
#Text=Monday, July 13, 2020
#Text=The popular json and jsonb data types are more than just a collection of single-data-type values like
#Text=arrays.
375-1	60023-60024	=	
375-2	60025-60026	0	
375-3	60027-60031	THEN	
375-4	60032-60033	x	
375-5	60034-60038	WHEN	
375-6	60039-60040	x	
375-7	60041-60043	IS	
375-8	60044-60047	NOT	
375-9	60048-60052	NULL	
375-10	60053-60057	THEN	
375-11	60058-60059	x	
375-12	60060-60064	ELSE	
375-13	60065-60066	'	
375-14	60066-60067	(	
375-15	60067-60071	null	
375-16	60071-60072	)	
375-17	60072-60073	'	
375-18	60074-60077	END	
375-19	60078-60080	AS	
375-20	60081-60082	y	
375-21	60082-60083	,	
375-22	60084-60089	COUNT	
375-23	60089-60090	(	
375-24	60090-60091	*	
375-25	60091-60092	)	
375-26	60093-60097	FROM	
375-27	60098-60102	test	
375-28	60103-60108	GROUP	
375-29	60109-60111	BY	
375-30	60112-60118	ROLLUP	
375-31	60118-60119	(	
375-32	60119-60120	x	
375-33	60120-60121	)	
375-34	60122-60127	ORDER	
375-35	60128-60130	BY	
375-36	60131-60132	y	
375-37	60132-60133	;	
375-38	60134-60135	|	
375-39	60136-60141	count	
375-40	60142-60143	-	
375-41	60143-60144	-	
375-42	60144-60145	-	
375-43	60145-60146	-	
375-44	60146-60147	-	
375-45	60147-60148	-	
375-46	60148-60149	-	
375-47	60149-60150	-	
375-48	60150-60151	+	
375-49	60151-60152	-	
375-50	60152-60153	-	
375-51	60153-60154	-	
375-52	60154-60155	-	
375-53	60155-60156	-	
375-54	60156-60157	-	
375-55	60157-60158	-	
375-56	60159-60160	(	
375-57	60160-60164	null	
375-58	60164-60165	)	
375-59	60166-60167	|	
375-60	60168-60172	View	
375-61	60173-60175	or	
375-62	60176-60180	Post	
375-63	60181-60189	Comments	
375-64	60190-60195	JSONB	
375-65	60195-60196	:	
375-66	60197-60198	A	
375-67	60199-60208	Container	
375-68	60209-60211	of	
375-69	60212-60217	Types	
375-70	60218-60224	Monday	
375-71	60224-60225	,	
375-72	60226-60230	July	
375-73	60231-60233	13	
375-74	60233-60234	,	
375-75	60235-60239	2020	
375-76	60240-60243	The	
375-77	60244-60251	popular	
375-78	60252-60256	json	
375-79	60257-60260	and	
375-80	60261-60266	jsonb	
375-81	60267-60271	data	
375-82	60272-60277	types	
375-83	60278-60281	are	
375-84	60282-60286	more	
375-85	60287-60291	than	
375-86	60292-60296	just	
375-87	60297-60298	a	
375-88	60299-60309	collection	
375-89	60310-60312	of	
375-90	60313-60329	single-data-type	
375-91	60330-60336	values	
375-92	60337-60341	like	
375-93	60342-60348	arrays	
375-94	60348-60349	.	

#Text=They can contain multiple data types:
#Text=CREATE TABLE test(x JSONB);
#Text=INSERT INTO test VALUES ('"abc"'), ('5'), ('true'), ('null'), (NULL);
#Text=\\pset null (null)
#Text=SELECT x, jsonb_typeof(x), pg_typeof(x) FROM test;
#Text=| jsonb_typeof | pg_typeof
#Text=--------+--------------+-----------
#Text="abc"
#Text=| string
#Text=| jsonb
#Text=| number
#Text=| jsonb
#Text=true
#Text=| boolean
#Text=| jsonb
#Text=nan
#Text=| null
#Text=| jsonb
#Text=(null) | (null)
#Text=| jsonb
#Text=You can see I stored a string, number, boolean, json null, and an sql null in a single jsonb column, and Postgres knew the type of each value in the
#Text=jsonb column, as shown by jsonb_typeof().
376-1	60350-60354	They	
376-2	60355-60358	can	
376-3	60359-60366	contain	
376-4	60367-60375	multiple	
376-5	60376-60380	data	
376-6	60381-60386	types	
376-7	60386-60387	:	
376-8	60388-60394	CREATE	
376-9	60395-60400	TABLE	
376-10	60401-60405	test	
376-11	60405-60406	(	
376-12	60406-60407	x	
376-13	60408-60413	JSONB	
376-14	60413-60414	)	
376-15	60414-60415	;	
376-16	60416-60422	INSERT	
376-17	60423-60427	INTO	
376-18	60428-60432	test	
376-19	60433-60439	VALUES	
376-20	60440-60441	(	
376-21	60441-60442	'	
376-22	60442-60443	"	
376-23	60443-60446	abc	
376-24	60446-60447	"	
376-25	60447-60448	'	
376-26	60448-60449	)	
376-27	60449-60450	,	
376-28	60451-60452	(	
376-29	60452-60453	'	
376-30	60453-60454	5	
376-31	60454-60455	'	
376-32	60455-60456	)	
376-33	60456-60457	,	
376-34	60458-60459	(	
376-35	60459-60460	'	
376-36	60460-60464	true	
376-37	60464-60465	'	
376-38	60465-60466	)	
376-39	60466-60467	,	
376-40	60468-60469	(	
376-41	60469-60470	'	
376-42	60470-60474	null	
376-43	60474-60475	'	
376-44	60475-60476	)	
376-45	60476-60477	,	
376-46	60478-60479	(	
376-47	60479-60483	NULL	
376-48	60483-60484	)	
376-49	60484-60485	;	
376-50	60486-60487	\	
376-51	60487-60491	pset	
376-52	60492-60496	null	
376-53	60497-60498	(	
376-54	60498-60502	null	
376-55	60502-60503	)	
376-56	60504-60510	SELECT	
376-57	60511-60512	x	
376-58	60512-60513	,	
376-59	60514-60526	jsonb_typeof	
376-60	60526-60527	(	
376-61	60527-60528	x	
376-62	60528-60529	)	
376-63	60529-60530	,	
376-64	60531-60540	pg_typeof	
376-65	60540-60541	(	
376-66	60541-60542	x	
376-67	60542-60543	)	
376-68	60544-60548	FROM	
376-69	60549-60553	test	
376-70	60553-60554	;	
376-71	60555-60556	|	
376-72	60557-60569	jsonb_typeof	
376-73	60570-60571	|	
376-74	60572-60581	pg_typeof	
376-75	60582-60583	-	
376-76	60583-60584	-	
376-77	60584-60585	-	
376-78	60585-60586	-	
376-79	60586-60587	-	
376-80	60587-60588	-	
376-81	60588-60589	-	
376-82	60589-60590	-	
376-83	60590-60591	+	
376-84	60591-60592	-	
376-85	60592-60593	-	
376-86	60593-60594	-	
376-87	60594-60595	-	
376-88	60595-60596	-	
376-89	60596-60597	-	
376-90	60597-60598	-	
376-91	60598-60599	-	
376-92	60599-60600	-	
376-93	60600-60601	-	
376-94	60601-60602	-	
376-95	60602-60603	-	
376-96	60603-60604	-	
376-97	60604-60605	-	
376-98	60605-60606	+	
376-99	60606-60607	-	
376-100	60607-60608	-	
376-101	60608-60609	-	
376-102	60609-60610	-	
376-103	60610-60611	-	
376-104	60611-60612	-	
376-105	60612-60613	-	
376-106	60613-60614	-	
376-107	60614-60615	-	
376-108	60615-60616	-	
376-109	60616-60617	-	
376-110	60618-60619	"	
376-111	60619-60622	abc	
376-112	60622-60623	"	
376-113	60624-60625	|	
376-114	60626-60632	string	
376-115	60633-60634	|	
376-116	60635-60640	jsonb	
376-117	60641-60642	|	
376-118	60643-60649	number	
376-119	60650-60651	|	
376-120	60652-60657	jsonb	
376-121	60658-60662	true	
376-122	60663-60664	|	
376-123	60665-60672	boolean	
376-124	60673-60674	|	
376-125	60675-60680	jsonb	
376-126	60681-60684	nan	
376-127	60685-60686	|	
376-128	60687-60691	null	
376-129	60692-60693	|	
376-130	60694-60699	jsonb	
376-131	60700-60701	(	
376-132	60701-60705	null	
376-133	60705-60706	)	
376-134	60707-60708	|	
376-135	60709-60710	(	
376-136	60710-60714	null	
376-137	60714-60715	)	
376-138	60716-60717	|	
376-139	60718-60723	jsonb	
376-140	60724-60727	You	
376-141	60728-60731	can	
376-142	60732-60735	see	
376-143	60736-60737	I	
376-144	60738-60744	stored	
376-145	60745-60746	a	
376-146	60747-60753	string	
376-147	60753-60754	,	
376-148	60755-60761	number	
376-149	60761-60762	,	
376-150	60763-60770	boolean	
376-151	60770-60771	,	
376-152	60772-60776	json	
376-153	60777-60781	null	
376-154	60781-60782	,	
376-155	60783-60786	and	
376-156	60787-60789	an	
376-157	60790-60793	sql	
376-158	60794-60798	null	
376-159	60799-60801	in	
376-160	60802-60803	a	
376-161	60804-60810	single	
376-162	60811-60816	jsonb	
376-163	60817-60823	column	
376-164	60823-60824	,	
376-165	60825-60828	and	
376-166	60829-60837	Postgres	
376-167	60838-60842	knew	
376-168	60843-60846	the	
376-169	60847-60851	type	
376-170	60852-60854	of	
376-171	60855-60859	each	
376-172	60860-60865	value	
376-173	60866-60868	in	
376-174	60869-60872	the	
376-175	60873-60878	jsonb	
376-176	60879-60885	column	
376-177	60885-60886	,	
376-178	60887-60889	as	
376-179	60890-60895	shown	
376-180	60896-60898	by	
376-181	60899-60911	jsonb_typeof	
376-182	60911-60912	(	
376-183	60912-60913	)	
376-184	60913-60914	.	

#Text=However, pg_typeof() still sees all these as jsonb values, and that is the type exposed to anything referencing the json column.
377-1	60915-60922	However	
377-2	60922-60923	,	
377-3	60924-60933	pg_typeof	
377-4	60933-60934	(	
377-5	60934-60935	)	
377-6	60936-60941	still	
377-7	60942-60946	sees	
377-8	60947-60950	all	
377-9	60951-60956	these	
377-10	60957-60959	as	
377-11	60960-60965	jsonb	
377-12	60966-60972	values	
377-13	60972-60973	,	
377-14	60974-60977	and	
377-15	60978-60982	that	
377-16	60983-60985	is	
377-17	60986-60989	the	
377-18	60990-60994	type	
377-19	60995-61002	exposed	
377-20	61003-61005	to	
377-21	61006-61014	anything	
377-22	61015-61026	referencing	
377-23	61027-61030	the	
377-24	61031-61035	json	
377-25	61036-61042	column	
377-26	61042-61043	.	

#Text=Here is another example that uses #>> to convert all json values to text:
#Text=SELECT x, x::TEXT, x#>>'{}', pg_typeof(x#>>'{}') FROM test;
#Text=| ?
378-1	61044-61048	Here	
378-2	61049-61051	is	
378-3	61052-61059	another	
378-4	61060-61067	example	
378-5	61068-61072	that	
378-6	61073-61077	uses	
378-7	61078-61079	#	
378-8	61079-61080	>	
378-9	61080-61081	>	
378-10	61082-61084	to	
378-11	61085-61092	convert	
378-12	61093-61096	all	
378-13	61097-61101	json	
378-14	61102-61108	values	
378-15	61109-61111	to	
378-16	61112-61116	text	
378-17	61116-61117	:	
378-18	61118-61124	SELECT	
378-19	61125-61126	x	
378-20	61126-61127	,	
378-21	61128-61129	x	
378-22	61129-61130	:	
378-23	61130-61131	:	
378-24	61131-61135	TEXT	
378-25	61135-61136	,	
378-26	61137-61138	x	
378-27	61138-61139	#	
378-28	61139-61140	>	
378-29	61140-61141	>	
378-30	61141-61142	'	
378-31	61142-61143	{	
378-32	61143-61144	}	
378-33	61144-61145	'	
378-34	61145-61146	,	
378-35	61147-61156	pg_typeof	
378-36	61156-61157	(	
378-37	61157-61158	x	
378-38	61158-61159	#	
378-39	61159-61160	>	
378-40	61160-61161	>	
378-41	61161-61162	'	
378-42	61162-61163	{	
378-43	61163-61164	}	
378-44	61164-61165	'	
378-45	61165-61166	)	
378-46	61167-61171	FROM	
378-47	61172-61176	test	
378-48	61176-61177	;	
378-49	61178-61179	|	
378-50	61180-61181	?	

#Text=column?
379-1	61181-61187	column	
379-2	61187-61188	?	

#Text=| pg_typeof
#Text=--------+--------+----------+-----------
#Text="abc"
#Text=| "abc"
#Text=| abc
#Text=| text
#Text=| 5
#Text=| 5
#Text=| text
#Text=true
#Text=| true
#Text=| true
#Text=| text
#Text=nan
#Text=| null
#Text=| (null)
#Text=| text
#Text=(null) | (null) | (null)
#Text=| text
#Text=(I am using #>> rather than the more popular ->> because it lets me access json values that are not associated with keys.)
380-1	61189-61190	|	
380-2	61191-61200	pg_typeof	
380-3	61201-61202	-	
380-4	61202-61203	-	
380-5	61203-61204	-	
380-6	61204-61205	-	
380-7	61205-61206	-	
380-8	61206-61207	-	
380-9	61207-61208	-	
380-10	61208-61209	-	
380-11	61209-61210	+	
380-12	61210-61211	-	
380-13	61211-61212	-	
380-14	61212-61213	-	
380-15	61213-61214	-	
380-16	61214-61215	-	
380-17	61215-61216	-	
380-18	61216-61217	-	
380-19	61217-61218	-	
380-20	61218-61219	+	
380-21	61219-61220	-	
380-22	61220-61221	-	
380-23	61221-61222	-	
380-24	61222-61223	-	
380-25	61223-61224	-	
380-26	61224-61225	-	
380-27	61225-61226	-	
380-28	61226-61227	-	
380-29	61227-61228	-	
380-30	61228-61229	-	
380-31	61229-61230	+	
380-32	61230-61231	-	
380-33	61231-61232	-	
380-34	61232-61233	-	
380-35	61233-61234	-	
380-36	61234-61235	-	
380-37	61235-61236	-	
380-38	61236-61237	-	
380-39	61237-61238	-	
380-40	61238-61239	-	
380-41	61239-61240	-	
380-42	61240-61241	-	
380-43	61242-61243	"	
380-44	61243-61246	abc	
380-45	61246-61247	"	
380-46	61248-61249	|	
380-47	61250-61251	"	
380-48	61251-61254	abc	
380-49	61254-61255	"	
380-50	61256-61257	|	
380-51	61258-61261	abc	
380-52	61262-61263	|	
380-53	61264-61268	text	
380-54	61269-61270	|	
380-55	61271-61272	5	
380-56	61273-61274	|	
380-57	61275-61276	5	
380-58	61277-61278	|	
380-59	61279-61283	text	
380-60	61284-61288	true	
380-61	61289-61290	|	
380-62	61291-61295	true	
380-63	61296-61297	|	
380-64	61298-61302	true	
380-65	61303-61304	|	
380-66	61305-61309	text	
380-67	61310-61313	nan	
380-68	61314-61315	|	
380-69	61316-61320	null	
380-70	61321-61322	|	
380-71	61323-61324	(	
380-72	61324-61328	null	
380-73	61328-61329	)	
380-74	61330-61331	|	
380-75	61332-61336	text	
380-76	61337-61338	(	
380-77	61338-61342	null	
380-78	61342-61343	)	
380-79	61344-61345	|	
380-80	61346-61347	(	
380-81	61347-61351	null	
380-82	61351-61352	)	
380-83	61353-61354	|	
380-84	61355-61356	(	
380-85	61356-61360	null	
380-86	61360-61361	)	
380-87	61362-61363	|	
380-88	61364-61368	text	
380-89	61369-61370	(	
380-90	61370-61371	I	
380-91	61372-61374	am	
380-92	61375-61380	using	
380-93	61381-61382	#	
380-94	61382-61383	>	
380-95	61383-61384	>	
380-96	61385-61391	rather	
380-97	61392-61396	than	
380-98	61397-61400	the	
380-99	61401-61405	more	
380-100	61406-61413	popular	
380-101	61414-61415	-	
380-102	61415-61416	>	
380-103	61416-61417	>	
380-104	61418-61425	because	
380-105	61426-61428	it	
380-106	61429-61433	lets	
380-107	61434-61436	me	
380-108	61437-61443	access	
380-109	61444-61448	json	
380-110	61449-61455	values	
380-111	61456-61460	that	
380-112	61461-61464	are	
380-113	61465-61468	not	
380-114	61469-61479	associated	
380-115	61480-61484	with	
380-116	61485-61489	keys	
380-117	61489-61490	.	
380-118	61490-61491	)	

#Text=Notice that using
#Text=:: to cast to text retains the double-quotes, while #>> removes them.
#Text=(->> does also.)
381-1	61492-61498	Notice	
381-2	61499-61503	that	
381-3	61504-61509	using	
381-4	61510-61511	:	
381-5	61511-61512	:	
381-6	61513-61515	to	
381-7	61516-61520	cast	
381-8	61521-61523	to	
381-9	61524-61528	text	
381-10	61529-61536	retains	
381-11	61537-61540	the	
381-12	61541-61554	double-quotes	
381-13	61554-61555	,	
381-14	61556-61561	while	
381-15	61562-61563	#	
381-16	61563-61564	>	
381-17	61564-61565	>	
381-18	61566-61573	removes	
381-19	61574-61578	them	
381-20	61578-61579	.	
381-21	61580-61581	(	
381-22	61581-61582	-	
381-23	61582-61583	>	
381-24	61583-61584	>	
381-25	61585-61589	does	
381-26	61590-61594	also	
381-27	61594-61595	.	
381-28	61595-61596	)	

#Text=However, the return value for #>>
#Text=did not change based on the json contents — it always returned text or sql null.
382-1	61597-61604	However	
382-2	61604-61605	,	
382-3	61606-61609	the	
382-4	61610-61616	return	
382-5	61617-61622	value	
382-6	61623-61626	for	
382-7	61627-61628	#	
382-8	61628-61629	>	
382-9	61629-61630	>	
382-10	61631-61634	did	
382-11	61635-61638	not	
382-12	61639-61645	change	
382-13	61646-61651	based	
382-14	61652-61654	on	
382-15	61655-61658	the	
382-16	61659-61663	json	
382-17	61664-61672	contents	
382-18	61673-61674	—	
382-19	61675-61677	it	
382-20	61678-61684	always	
382-21	61685-61693	returned	
382-22	61694-61698	text	
382-23	61699-61701	or	
382-24	61702-61705	sql	
382-25	61706-61710	null	
382-26	61710-61711	.	

#Text=Also notice that :: casting returns the string "null" for the jsonb
#Text=null value, while #>> returns an sql null.
383-1	61712-61716	Also	
383-2	61717-61723	notice	
383-3	61724-61728	that	
383-4	61729-61730	:	
383-5	61730-61731	:	
383-6	61732-61739	casting	
383-7	61740-61747	returns	
383-8	61748-61751	the	
383-9	61752-61758	string	
383-10	61759-61760	"	
383-11	61760-61764	null	
383-12	61764-61765	"	
383-13	61766-61769	for	
383-14	61770-61773	the	
383-15	61774-61779	jsonb	
383-16	61780-61784	null	
383-17	61785-61790	value	
383-18	61790-61791	,	
383-19	61792-61797	while	
383-20	61798-61799	#	
383-21	61799-61800	>	
383-22	61800-61801	>	
383-23	61802-61809	returns	
383-24	61810-61812	an	
383-25	61813-61816	sql	
383-26	61817-61821	null	
383-27	61821-61822	.	

#Text=(I used psql's \\pset null above.)
384-1	61823-61824	(	
384-2	61824-61825	I	
384-3	61826-61830	used	
384-4	61831-61837	psql's	
384-5	61838-61839	\	
384-6	61839-61843	pset	
384-7	61844-61848	null	
384-8	61849-61854	above	
384-9	61854-61855	.	
384-10	61855-61856	)	

#Text=There is a fundamental problem with the interaction between jsonb and sql data types.
385-1	61857-61862	There	
385-2	61863-61865	is	
385-3	61866-61867	a	
385-4	61868-61879	fundamental	
385-5	61880-61887	problem	
385-6	61888-61892	with	
385-7	61893-61896	the	
385-8	61897-61908	interaction	
385-9	61909-61916	between	
385-10	61917-61922	jsonb	
385-11	61923-61926	and	
385-12	61927-61930	sql	
385-13	61931-61935	data	
385-14	61936-61941	types	
385-15	61941-61942	.	

#Text=Postgres knows the data type of each json value inside the jsonb field (as shown
#Text=by jsonb_typeof), but each field can have multiple json values inside, and each row can be different as well.
386-1	61943-61951	Postgres	
386-2	61952-61957	knows	
386-3	61958-61961	the	
386-4	61962-61966	data	
386-5	61967-61971	type	
386-6	61972-61974	of	
386-7	61975-61979	each	
386-8	61980-61984	json	
386-9	61985-61990	value	
386-10	61991-61997	inside	
386-11	61998-62001	the	
386-12	62002-62007	jsonb	
386-13	62008-62013	field	
386-14	62014-62015	(	
386-15	62015-62017	as	
386-16	62018-62023	shown	
386-17	62024-62026	by	
386-18	62027-62039	jsonb_typeof	
386-19	62039-62040	)	
386-20	62040-62041	,	
386-21	62042-62045	but	
386-22	62046-62050	each	
386-23	62051-62056	field	
386-24	62057-62060	can	
386-25	62061-62065	have	
386-26	62066-62074	multiple	
386-27	62075-62079	json	
386-28	62080-62086	values	
386-29	62087-62093	inside	
386-30	62093-62094	,	
386-31	62095-62098	and	
386-32	62099-62103	each	
386-33	62104-62107	row	
386-34	62108-62111	can	
386-35	62112-62114	be	
386-36	62115-62124	different	
386-37	62125-62127	as	
386-38	62128-62132	well	
386-39	62132-62133	.	

#Text=Therefore, you only have two choices for interfacing jsonb to sql
#Text=data types:
#Text=Use ->> or #>> to map all values to text
#Text=Cast values to an sql data type
#Text=For number one, all data types can be converted to text, so it is a simple solution, though it doesn't work well if you need to process the values in a non-textual way, e.g., a numeric comparison.
387-1	62134-62143	Therefore	
387-2	62143-62144	,	
387-3	62145-62148	you	
387-4	62149-62153	only	
387-5	62154-62158	have	
387-6	62159-62162	two	
387-7	62163-62170	choices	
387-8	62171-62174	for	
387-9	62175-62186	interfacing	
387-10	62187-62192	jsonb	
387-11	62193-62195	to	
387-12	62196-62199	sql	
387-13	62200-62204	data	
387-14	62205-62210	types	
387-15	62210-62211	:	
387-16	62212-62215	Use	
387-17	62216-62217	-	
387-18	62217-62218	>	
387-19	62218-62219	>	
387-20	62220-62222	or	
387-21	62223-62224	#	
387-22	62224-62225	>	
387-23	62225-62226	>	
387-24	62227-62229	to	
387-25	62230-62233	map	
387-26	62234-62237	all	
387-27	62238-62244	values	
387-28	62245-62247	to	
387-29	62248-62252	text	
387-30	62253-62257	Cast	
387-31	62258-62264	values	
387-32	62265-62267	to	
387-33	62268-62270	an	
387-34	62271-62274	sql	
387-35	62275-62279	data	
387-36	62280-62284	type	
387-37	62285-62288	For	
387-38	62289-62295	number	
387-39	62296-62299	one	
387-40	62299-62300	,	
387-41	62301-62304	all	
387-42	62305-62309	data	
387-43	62310-62315	types	
387-44	62316-62319	can	
387-45	62320-62322	be	
387-46	62323-62332	converted	
387-47	62333-62335	to	
387-48	62336-62340	text	
387-49	62340-62341	,	
387-50	62342-62344	so	
387-51	62345-62347	it	
387-52	62348-62350	is	
387-53	62351-62352	a	
387-54	62353-62359	simple	
387-55	62360-62368	solution	
387-56	62368-62369	,	
387-57	62370-62376	though	
387-58	62377-62379	it	
387-59	62380-62387	doesn't	
387-60	62388-62392	work	
387-61	62393-62397	well	
387-62	62398-62400	if	
387-63	62401-62404	you	
387-64	62405-62409	need	
387-65	62410-62412	to	
387-66	62413-62420	process	
387-67	62421-62424	the	
387-68	62425-62431	values	
387-69	62432-62434	in	
387-70	62435-62436	a	
387-71	62437-62448	non-textual	
387-72	62449-62452	way	
387-73	62452-62453	,	
387-74	62454-62457	e.g	
387-75	62457-62458	.	
387-76	62458-62459	,	
387-77	62460-62461	a	
387-78	62462-62469	numeric	
387-79	62470-62480	comparison	
387-80	62480-62481	.	

#Text=You can cast jsonb values to any sql data type (number two) as long as all jsonb values can be cast successfully.
388-1	62482-62485	You	
388-2	62486-62489	can	
388-3	62490-62494	cast	
388-4	62495-62500	jsonb	
388-5	62501-62507	values	
388-6	62508-62510	to	
388-7	62511-62514	any	
388-8	62515-62518	sql	
388-9	62519-62523	data	
388-10	62524-62528	type	
388-11	62529-62530	(	
388-12	62530-62536	number	
388-13	62537-62540	two	
388-14	62540-62541	)	
388-15	62542-62544	as	
388-16	62545-62549	long	
388-17	62550-62552	as	
388-18	62553-62556	all	
388-19	62557-62562	jsonb	
388-20	62563-62569	values	
388-21	62570-62573	can	
388-22	62574-62576	be	
388-23	62577-62581	cast	
388-24	62582-62594	successfully	
388-25	62594-62595	.	

#Text=For example:
#Text=DELETE FROM test;
#Text=-- all inserted values must cast to a jsonb type
#Text=INSERT INTO test VALUES ('"1"'), ('2'), ('3e1'),
#Text=('4f1'),
#Text=('true'), ('null'), (NULL);
#Text=ERROR:
#Text=invalid input syntax for type json
#Text=LINE 1: ...NSERT INTO test VALUES ('"1"'), ('2'), ('3e1'),
#Text=('4f1'),
#Text=(...
389-1	62596-62599	For	
389-2	62600-62607	example	
389-3	62607-62608	:	
389-4	62609-62615	DELETE	
389-5	62616-62620	FROM	
389-6	62621-62625	test	
389-7	62625-62626	;	
389-8	62627-62628	-	
389-9	62628-62629	-	
389-10	62630-62633	all	
389-11	62634-62642	inserted	
389-12	62643-62649	values	
389-13	62650-62654	must	
389-14	62655-62659	cast	
389-15	62660-62662	to	
389-16	62663-62664	a	
389-17	62665-62670	jsonb	
389-18	62671-62675	type	
389-19	62676-62682	INSERT	
389-20	62683-62687	INTO	
389-21	62688-62692	test	
389-22	62693-62699	VALUES	
389-23	62700-62701	(	
389-24	62701-62702	'	
389-25	62702-62703	"	
389-26	62703-62704	1	
389-27	62704-62705	"	
389-28	62705-62706	'	
389-29	62706-62707	)	
389-30	62707-62708	,	
389-31	62709-62710	(	
389-32	62710-62711	'	
389-33	62711-62712	2	
389-34	62712-62713	'	
389-35	62713-62714	)	
389-36	62714-62715	,	
389-37	62716-62717	(	
389-38	62717-62718	'	
389-39	62718-62721	3e1	
389-40	62721-62722	'	
389-41	62722-62723	)	
389-42	62723-62724	,	
389-43	62725-62726	(	
389-44	62726-62727	'	
389-45	62727-62730	4f1	
389-46	62730-62731	'	
389-47	62731-62732	)	
389-48	62732-62733	,	
389-49	62734-62735	(	
389-50	62735-62736	'	
389-51	62736-62740	true	
389-52	62740-62741	'	
389-53	62741-62742	)	
389-54	62742-62743	,	
389-55	62744-62745	(	
389-56	62745-62746	'	
389-57	62746-62750	null	
389-58	62750-62751	'	
389-59	62751-62752	)	
389-60	62752-62753	,	
389-61	62754-62755	(	
389-62	62755-62759	NULL	
389-63	62759-62760	)	
389-64	62760-62761	;	
389-65	62762-62767	ERROR	
389-66	62767-62768	:	
389-67	62769-62776	invalid	
389-68	62777-62782	input	
389-69	62783-62789	syntax	
389-70	62790-62793	for	
389-71	62794-62798	type	
389-72	62799-62803	json	
389-73	62804-62808	LINE	
389-74	62809-62810	1	
389-75	62810-62811	:	
389-76	62812-62813	.	
389-77	62813-62814	.	
389-78	62814-62815	.	
389-79	62815-62820	NSERT	
389-80	62821-62825	INTO	
389-81	62826-62830	test	
389-82	62831-62837	VALUES	
389-83	62838-62839	(	
389-84	62839-62840	'	
389-85	62840-62841	"	
389-86	62841-62842	1	
389-87	62842-62843	"	
389-88	62843-62844	'	
389-89	62844-62845	)	
389-90	62845-62846	,	
389-91	62847-62848	(	
389-92	62848-62849	'	
389-93	62849-62850	2	
389-94	62850-62851	'	
389-95	62851-62852	)	
389-96	62852-62853	,	
389-97	62854-62855	(	
389-98	62855-62856	'	
389-99	62856-62859	3e1	
389-100	62859-62860	'	
389-101	62860-62861	)	
389-102	62861-62862	,	
389-103	62863-62864	(	
389-104	62864-62865	'	
389-105	62865-62868	4f1	
389-106	62868-62869	'	
389-107	62869-62870	)	
389-108	62870-62871	,	
389-109	62872-62873	(	
389-110	62873-62874	.	
389-111	62874-62875	.	
389-112	62875-62876	.	

#Text=DETAIL:
#Text=Token "4f1" is invalid.
390-1	62877-62883	DETAIL	
390-2	62883-62884	:	
390-3	62885-62890	Token	
390-4	62891-62892	"	
390-5	62892-62895	4f1	
390-6	62895-62896	"	
390-7	62897-62899	is	
390-8	62900-62907	invalid	
390-9	62907-62908	.	

#Text=CONTEXT:
#Text=JSON data, line 1: 4f1
#Text=-- 4e1 uses exponential notation
#Text=INSERT INTO test VALUES ('"1"'), ('2'), ('3e1'),
#Text=('4e1'),
#Text=('true'), ('null'), (NULL);
#Text=SELECT x, x::TEXT, x#>>'{}', jsonb_typeof(x), pg_typeof(x#>>'{}') FROM test;
#Text=| ?
391-1	62909-62916	CONTEXT	
391-2	62916-62917	:	
391-3	62918-62922	JSON	
391-4	62923-62927	data	
391-5	62927-62928	,	
391-6	62929-62933	line	
391-7	62934-62935	1	
391-8	62935-62936	:	
391-9	62937-62940	4f1	
391-10	62941-62942	-	
391-11	62942-62943	-	
391-12	62944-62947	4e1	
391-13	62948-62952	uses	
391-14	62953-62964	exponential	
391-15	62965-62973	notation	
391-16	62974-62980	INSERT	
391-17	62981-62985	INTO	
391-18	62986-62990	test	
391-19	62991-62997	VALUES	
391-20	62998-62999	(	
391-21	62999-63000	'	
391-22	63000-63001	"	
391-23	63001-63002	1	
391-24	63002-63003	"	
391-25	63003-63004	'	
391-26	63004-63005	)	
391-27	63005-63006	,	
391-28	63007-63008	(	
391-29	63008-63009	'	
391-30	63009-63010	2	
391-31	63010-63011	'	
391-32	63011-63012	)	
391-33	63012-63013	,	
391-34	63014-63015	(	
391-35	63015-63016	'	
391-36	63016-63019	3e1	
391-37	63019-63020	'	
391-38	63020-63021	)	
391-39	63021-63022	,	
391-40	63023-63024	(	
391-41	63024-63025	'	
391-42	63025-63028	4e1	
391-43	63028-63029	'	
391-44	63029-63030	)	
391-45	63030-63031	,	
391-46	63032-63033	(	
391-47	63033-63034	'	
391-48	63034-63038	true	
391-49	63038-63039	'	
391-50	63039-63040	)	
391-51	63040-63041	,	
391-52	63042-63043	(	
391-53	63043-63044	'	
391-54	63044-63048	null	
391-55	63048-63049	'	
391-56	63049-63050	)	
391-57	63050-63051	,	
391-58	63052-63053	(	
391-59	63053-63057	NULL	
391-60	63057-63058	)	
391-61	63058-63059	;	
391-62	63060-63066	SELECT	
391-63	63067-63068	x	
391-64	63068-63069	,	
391-65	63070-63071	x	
391-66	63071-63072	:	
391-67	63072-63073	:	
391-68	63073-63077	TEXT	
391-69	63077-63078	,	
391-70	63079-63080	x	
391-71	63080-63081	#	
391-72	63081-63082	>	
391-73	63082-63083	>	
391-74	63083-63084	'	
391-75	63084-63085	{	
391-76	63085-63086	}	
391-77	63086-63087	'	
391-78	63087-63088	,	
391-79	63089-63101	jsonb_typeof	
391-80	63101-63102	(	
391-81	63102-63103	x	
391-82	63103-63104	)	
391-83	63104-63105	,	
391-84	63106-63115	pg_typeof	
391-85	63115-63116	(	
391-86	63116-63117	x	
391-87	63117-63118	#	
391-88	63118-63119	>	
391-89	63119-63120	>	
391-90	63120-63121	'	
391-91	63121-63122	{	
391-92	63122-63123	}	
391-93	63123-63124	'	
391-94	63124-63125	)	
391-95	63126-63130	FROM	
391-96	63131-63135	test	
391-97	63135-63136	;	
391-98	63137-63138	|	
391-99	63139-63140	?	

#Text=column?
392-1	63140-63146	column	
392-2	63146-63147	?	

#Text=| jsonb_typeof | pg_typeof
#Text=--------+--------+----------+--------------+-----------
#Text="1"
#Text=| "1"
#Text=| 1
#Text=| string
#Text=| text
#Text=| 2
#Text=| 2
#Text=| number
#Text=| text
#Text=| 30
#Text=| 30
#Text=| number
#Text=| text
#Text=| 40
#Text=| 40
#Text=| number
#Text=| text
#Text=true
#Text=| true
#Text=| true
#Text=| boolean
#Text=| text
#Text=nan
#Text=| null
#Text=| (null)
#Text=| null
#Text=| text
#Text=(null) | (null) | (null)
#Text=| (null)
#Text=| text
#Text=-- all values can't be cast to numeric
#Text=SELECT x, x::TEXT, x#>>'{}', x::NUMERIC * 5, jsonb_typeof(x)
#Text=FROM test;
#Text=ERROR:
#Text=cannot cast jsonb string to type numeric
#Text=-- all values of jsonb type 'number' can be cast to numeric
#Text=SELECT x, x::TEXT, x#>>'{}', x::NUMERIC * 5, jsonb_typeof(x)
#Text=FROM test
#Text=WHERE jsonb_typeof(x) = 'number';
#Text=| x
#Text=| ?
393-1	63148-63149	|	
393-2	63150-63162	jsonb_typeof	
393-3	63163-63164	|	
393-4	63165-63174	pg_typeof	
393-5	63175-63176	-	
393-6	63176-63177	-	
393-7	63177-63178	-	
393-8	63178-63179	-	
393-9	63179-63180	-	
393-10	63180-63181	-	
393-11	63181-63182	-	
393-12	63182-63183	-	
393-13	63183-63184	+	
393-14	63184-63185	-	
393-15	63185-63186	-	
393-16	63186-63187	-	
393-17	63187-63188	-	
393-18	63188-63189	-	
393-19	63189-63190	-	
393-20	63190-63191	-	
393-21	63191-63192	-	
393-22	63192-63193	+	
393-23	63193-63194	-	
393-24	63194-63195	-	
393-25	63195-63196	-	
393-26	63196-63197	-	
393-27	63197-63198	-	
393-28	63198-63199	-	
393-29	63199-63200	-	
393-30	63200-63201	-	
393-31	63201-63202	-	
393-32	63202-63203	-	
393-33	63203-63204	+	
393-34	63204-63205	-	
393-35	63205-63206	-	
393-36	63206-63207	-	
393-37	63207-63208	-	
393-38	63208-63209	-	
393-39	63209-63210	-	
393-40	63210-63211	-	
393-41	63211-63212	-	
393-42	63212-63213	-	
393-43	63213-63214	-	
393-44	63214-63215	-	
393-45	63215-63216	-	
393-46	63216-63217	-	
393-47	63217-63218	-	
393-48	63218-63219	+	
393-49	63219-63220	-	
393-50	63220-63221	-	
393-51	63221-63222	-	
393-52	63222-63223	-	
393-53	63223-63224	-	
393-54	63224-63225	-	
393-55	63225-63226	-	
393-56	63226-63227	-	
393-57	63227-63228	-	
393-58	63228-63229	-	
393-59	63229-63230	-	
393-60	63231-63232	"	
393-61	63232-63233	1	
393-62	63233-63234	"	
393-63	63235-63236	|	
393-64	63237-63238	"	
393-65	63238-63239	1	
393-66	63239-63240	"	
393-67	63241-63242	|	
393-68	63243-63244	1	
393-69	63245-63246	|	
393-70	63247-63253	string	
393-71	63254-63255	|	
393-72	63256-63260	text	
393-73	63261-63262	|	
393-74	63263-63264	2	
393-75	63265-63266	|	
393-76	63267-63268	2	
393-77	63269-63270	|	
393-78	63271-63277	number	
393-79	63278-63279	|	
393-80	63280-63284	text	
393-81	63285-63286	|	
393-82	63287-63289	30	
393-83	63290-63291	|	
393-84	63292-63294	30	
393-85	63295-63296	|	
393-86	63297-63303	number	
393-87	63304-63305	|	
393-88	63306-63310	text	
393-89	63311-63312	|	
393-90	63313-63315	40	
393-91	63316-63317	|	
393-92	63318-63320	40	
393-93	63321-63322	|	
393-94	63323-63329	number	
393-95	63330-63331	|	
393-96	63332-63336	text	
393-97	63337-63341	true	
393-98	63342-63343	|	
393-99	63344-63348	true	
393-100	63349-63350	|	
393-101	63351-63355	true	
393-102	63356-63357	|	
393-103	63358-63365	boolean	
393-104	63366-63367	|	
393-105	63368-63372	text	
393-106	63373-63376	nan	
393-107	63377-63378	|	
393-108	63379-63383	null	
393-109	63384-63385	|	
393-110	63386-63387	(	
393-111	63387-63391	null	
393-112	63391-63392	)	
393-113	63393-63394	|	
393-114	63395-63399	null	
393-115	63400-63401	|	
393-116	63402-63406	text	
393-117	63407-63408	(	
393-118	63408-63412	null	
393-119	63412-63413	)	
393-120	63414-63415	|	
393-121	63416-63417	(	
393-122	63417-63421	null	
393-123	63421-63422	)	
393-124	63423-63424	|	
393-125	63425-63426	(	
393-126	63426-63430	null	
393-127	63430-63431	)	
393-128	63432-63433	|	
393-129	63434-63435	(	
393-130	63435-63439	null	
393-131	63439-63440	)	
393-132	63441-63442	|	
393-133	63443-63447	text	
393-134	63448-63449	-	
393-135	63449-63450	-	
393-136	63451-63454	all	
393-137	63455-63461	values	
393-138	63462-63467	can't	
393-139	63468-63470	be	
393-140	63471-63475	cast	
393-141	63476-63478	to	
393-142	63479-63486	numeric	
393-143	63487-63493	SELECT	
393-144	63494-63495	x	
393-145	63495-63496	,	
393-146	63497-63498	x	
393-147	63498-63499	:	
393-148	63499-63500	:	
393-149	63500-63504	TEXT	
393-150	63504-63505	,	
393-151	63506-63507	x	
393-152	63507-63508	#	
393-153	63508-63509	>	
393-154	63509-63510	>	
393-155	63510-63511	'	
393-156	63511-63512	{	
393-157	63512-63513	}	
393-158	63513-63514	'	
393-159	63514-63515	,	
393-160	63516-63517	x	
393-161	63517-63518	:	
393-162	63518-63519	:	
393-163	63519-63526	NUMERIC	
393-164	63527-63528	*	
393-165	63529-63530	5	
393-166	63530-63531	,	
393-167	63532-63544	jsonb_typeof	
393-168	63544-63545	(	
393-169	63545-63546	x	
393-170	63546-63547	)	
393-171	63548-63552	FROM	
393-172	63553-63557	test	
393-173	63557-63558	;	
393-174	63559-63564	ERROR	
393-175	63564-63565	:	
393-176	63566-63572	cannot	
393-177	63573-63577	cast	
393-178	63578-63583	jsonb	
393-179	63584-63590	string	
393-180	63591-63593	to	
393-181	63594-63598	type	
393-182	63599-63606	numeric	
393-183	63607-63608	-	
393-184	63608-63609	-	
393-185	63610-63613	all	
393-186	63614-63620	values	
393-187	63621-63623	of	
393-188	63624-63629	jsonb	
393-189	63630-63634	type	
393-190	63635-63636	'	
393-191	63636-63642	number	
393-192	63642-63643	'	
393-193	63644-63647	can	
393-194	63648-63650	be	
393-195	63651-63655	cast	
393-196	63656-63658	to	
393-197	63659-63666	numeric	
393-198	63667-63673	SELECT	
393-199	63674-63675	x	
393-200	63675-63676	,	
393-201	63677-63678	x	
393-202	63678-63679	:	
393-203	63679-63680	:	
393-204	63680-63684	TEXT	
393-205	63684-63685	,	
393-206	63686-63687	x	
393-207	63687-63688	#	
393-208	63688-63689	>	
393-209	63689-63690	>	
393-210	63690-63691	'	
393-211	63691-63692	{	
393-212	63692-63693	}	
393-213	63693-63694	'	
393-214	63694-63695	,	
393-215	63696-63697	x	
393-216	63697-63698	:	
393-217	63698-63699	:	
393-218	63699-63706	NUMERIC	
393-219	63707-63708	*	
393-220	63709-63710	5	
393-221	63710-63711	,	
393-222	63712-63724	jsonb_typeof	
393-223	63724-63725	(	
393-224	63725-63726	x	
393-225	63726-63727	)	
393-226	63728-63732	FROM	
393-227	63733-63737	test	
393-228	63738-63743	WHERE	
393-229	63744-63756	jsonb_typeof	
393-230	63756-63757	(	
393-231	63757-63758	x	
393-232	63758-63759	)	
393-233	63760-63761	=	
393-234	63762-63763	'	
393-235	63763-63769	number	
393-236	63769-63770	'	
393-237	63770-63771	;	
393-238	63772-63773	|	
393-239	63774-63775	x	
393-240	63776-63777	|	
393-241	63778-63779	?	

#Text=column?
394-1	63779-63785	column	
394-2	63785-63786	?	

#Text=| ?
395-1	63787-63788	|	
395-2	63789-63790	?	

#Text=column?
396-1	63790-63796	column	
396-2	63796-63797	?	

#Text=| jsonb_typeof
#Text=----+----+----------+----------+--------------
#Text=| 2
#Text=| 2
#Text=10 | number
#Text=30 | 30 | 30
#Text=150 | number
#Text=40 | 40 | 40
#Text=200 | number
#Text=-- Use #>> to remove double-quotes from the jsonb string
#Text=SELECT x, x::TEXT, x#>>'{}', (x#>>'{}')::NUMERIC * 5, jsonb_typeof(x)
#Text=FROM test
#Text=WHERE jsonb_typeof(x) = 'number' OR
#Text=jsonb_typeof(x) = 'string';
#Text=| ?
397-1	63798-63799	|	
397-2	63800-63812	jsonb_typeof	
397-3	63813-63814	-	
397-4	63814-63815	-	
397-5	63815-63816	-	
397-6	63816-63817	-	
397-7	63817-63818	+	
397-8	63818-63819	-	
397-9	63819-63820	-	
397-10	63820-63821	-	
397-11	63821-63822	-	
397-12	63822-63823	+	
397-13	63823-63824	-	
397-14	63824-63825	-	
397-15	63825-63826	-	
397-16	63826-63827	-	
397-17	63827-63828	-	
397-18	63828-63829	-	
397-19	63829-63830	-	
397-20	63830-63831	-	
397-21	63831-63832	-	
397-22	63832-63833	-	
397-23	63833-63834	+	
397-24	63834-63835	-	
397-25	63835-63836	-	
397-26	63836-63837	-	
397-27	63837-63838	-	
397-28	63838-63839	-	
397-29	63839-63840	-	
397-30	63840-63841	-	
397-31	63841-63842	-	
397-32	63842-63843	-	
397-33	63843-63844	-	
397-34	63844-63845	+	
397-35	63845-63846	-	
397-36	63846-63847	-	
397-37	63847-63848	-	
397-38	63848-63849	-	
397-39	63849-63850	-	
397-40	63850-63851	-	
397-41	63851-63852	-	
397-42	63852-63853	-	
397-43	63853-63854	-	
397-44	63854-63855	-	
397-45	63855-63856	-	
397-46	63856-63857	-	
397-47	63857-63858	-	
397-48	63858-63859	-	
397-49	63860-63861	|	
397-50	63862-63863	2	
397-51	63864-63865	|	
397-52	63866-63867	2	
397-53	63868-63870	10	
397-54	63871-63872	|	
397-55	63873-63879	number	
397-56	63880-63882	30	
397-57	63883-63884	|	
397-58	63885-63887	30	
397-59	63888-63889	|	
397-60	63890-63892	30	
397-61	63893-63896	150	
397-62	63897-63898	|	
397-63	63899-63905	number	
397-64	63906-63908	40	
397-65	63909-63910	|	
397-66	63911-63913	40	
397-67	63914-63915	|	
397-68	63916-63918	40	
397-69	63919-63922	200	
397-70	63923-63924	|	
397-71	63925-63931	number	
397-72	63932-63933	-	
397-73	63933-63934	-	
397-74	63935-63938	Use	
397-75	63939-63940	#	
397-76	63940-63941	>	
397-77	63941-63942	>	
397-78	63943-63945	to	
397-79	63946-63952	remove	
397-80	63953-63966	double-quotes	
397-81	63967-63971	from	
397-82	63972-63975	the	
397-83	63976-63981	jsonb	
397-84	63982-63988	string	
397-85	63989-63995	SELECT	
397-86	63996-63997	x	
397-87	63997-63998	,	
397-88	63999-64000	x	
397-89	64000-64001	:	
397-90	64001-64002	:	
397-91	64002-64006	TEXT	
397-92	64006-64007	,	
397-93	64008-64009	x	
397-94	64009-64010	#	
397-95	64010-64011	>	
397-96	64011-64012	>	
397-97	64012-64013	'	
397-98	64013-64014	{	
397-99	64014-64015	}	
397-100	64015-64016	'	
397-101	64016-64017	,	
397-102	64018-64019	(	
397-103	64019-64020	x	
397-104	64020-64021	#	
397-105	64021-64022	>	
397-106	64022-64023	>	
397-107	64023-64024	'	
397-108	64024-64025	{	
397-109	64025-64026	}	
397-110	64026-64027	'	
397-111	64027-64028	)	
397-112	64028-64029	:	
397-113	64029-64030	:	
397-114	64030-64037	NUMERIC	
397-115	64038-64039	*	
397-116	64040-64041	5	
397-117	64041-64042	,	
397-118	64043-64055	jsonb_typeof	
397-119	64055-64056	(	
397-120	64056-64057	x	
397-121	64057-64058	)	
397-122	64059-64063	FROM	
397-123	64064-64068	test	
397-124	64069-64074	WHERE	
397-125	64075-64087	jsonb_typeof	
397-126	64087-64088	(	
397-127	64088-64089	x	
397-128	64089-64090	)	
397-129	64091-64092	=	
397-130	64093-64094	'	
397-131	64094-64100	number	
397-132	64100-64101	'	
397-133	64102-64104	OR	
397-134	64105-64117	jsonb_typeof	
397-135	64117-64118	(	
397-136	64118-64119	x	
397-137	64119-64120	)	
397-138	64121-64122	=	
397-139	64123-64124	'	
397-140	64124-64130	string	
397-141	64130-64131	'	
397-142	64131-64132	;	
397-143	64133-64134	|	
397-144	64135-64136	?	

#Text=column?
398-1	64136-64142	column	
398-2	64142-64143	?	

#Text=| ?
399-1	64144-64145	|	
399-2	64146-64147	?	

#Text=column?
400-1	64147-64153	column	
400-2	64153-64154	?	

#Text=| jsonb_typeof
#Text=-----+-----+----------+----------+--------------
#Text="1" | "1" | 1
#Text=5 | string
#Text=| 2
#Text=| 2
#Text=10 | number
#Text=| 30
#Text=| 30
#Text=150 | number
#Text=| 40
#Text=| 40
#Text=200 | number
#Text=The first insert fails because 4f1 isn't double-quoted and can't be cast to a json numeric, but 4e1 can because it represents exponential notation.
401-1	64155-64156	|	
401-2	64157-64169	jsonb_typeof	
401-3	64170-64171	-	
401-4	64171-64172	-	
401-5	64172-64173	-	
401-6	64173-64174	-	
401-7	64174-64175	-	
401-8	64175-64176	+	
401-9	64176-64177	-	
401-10	64177-64178	-	
401-11	64178-64179	-	
401-12	64179-64180	-	
401-13	64180-64181	-	
401-14	64181-64182	+	
401-15	64182-64183	-	
401-16	64183-64184	-	
401-17	64184-64185	-	
401-18	64185-64186	-	
401-19	64186-64187	-	
401-20	64187-64188	-	
401-21	64188-64189	-	
401-22	64189-64190	-	
401-23	64190-64191	-	
401-24	64191-64192	-	
401-25	64192-64193	+	
401-26	64193-64194	-	
401-27	64194-64195	-	
401-28	64195-64196	-	
401-29	64196-64197	-	
401-30	64197-64198	-	
401-31	64198-64199	-	
401-32	64199-64200	-	
401-33	64200-64201	-	
401-34	64201-64202	-	
401-35	64202-64203	-	
401-36	64203-64204	+	
401-37	64204-64205	-	
401-38	64205-64206	-	
401-39	64206-64207	-	
401-40	64207-64208	-	
401-41	64208-64209	-	
401-42	64209-64210	-	
401-43	64210-64211	-	
401-44	64211-64212	-	
401-45	64212-64213	-	
401-46	64213-64214	-	
401-47	64214-64215	-	
401-48	64215-64216	-	
401-49	64216-64217	-	
401-50	64217-64218	-	
401-51	64219-64220	"	
401-52	64220-64221	1	
401-53	64221-64222	"	
401-54	64223-64224	|	
401-55	64225-64226	"	
401-56	64226-64227	1	
401-57	64227-64228	"	
401-58	64229-64230	|	
401-59	64231-64232	1	
401-60	64233-64234	5	
401-61	64235-64236	|	
401-62	64237-64243	string	
401-63	64244-64245	|	
401-64	64246-64247	2	
401-65	64248-64249	|	
401-66	64250-64251	2	
401-67	64252-64254	10	
401-68	64255-64256	|	
401-69	64257-64263	number	
401-70	64264-64265	|	
401-71	64266-64268	30	
401-72	64269-64270	|	
401-73	64271-64273	30	
401-74	64274-64277	150	
401-75	64278-64279	|	
401-76	64280-64286	number	
401-77	64287-64288	|	
401-78	64289-64291	40	
401-79	64292-64293	|	
401-80	64294-64296	40	
401-81	64297-64300	200	
401-82	64301-64302	|	
401-83	64303-64309	number	
401-84	64310-64313	The	
401-85	64314-64319	first	
401-86	64320-64326	insert	
401-87	64327-64332	fails	
401-88	64333-64340	because	
401-89	64341-64344	4f1	
401-90	64345-64350	isn't	
401-91	64351-64364	double-quoted	
401-92	64365-64368	and	
401-93	64369-64374	can't	
401-94	64375-64377	be	
401-95	64378-64382	cast	
401-96	64383-64385	to	
401-97	64386-64387	a	
401-98	64388-64392	json	
401-99	64393-64400	numeric	
401-100	64400-64401	,	
401-101	64402-64405	but	
401-102	64406-64409	4e1	
401-103	64410-64413	can	
401-104	64414-64421	because	
401-105	64422-64424	it	
401-106	64425-64435	represents	
401-107	64436-64447	exponential	
401-108	64448-64456	notation	
401-109	64456-64457	.	

#Text=In trying to cast all values to numeric in the
#Text=select, the "1" has double-quotes, so it fails.
402-1	64458-64460	In	
402-2	64461-64467	trying	
402-3	64468-64470	to	
402-4	64471-64475	cast	
402-5	64476-64479	all	
402-6	64480-64486	values	
402-7	64487-64489	to	
402-8	64490-64497	numeric	
402-9	64498-64500	in	
402-10	64501-64504	the	
402-11	64505-64511	select	
402-12	64511-64512	,	
402-13	64513-64516	the	
402-14	64517-64518	"	
402-15	64518-64519	1	
402-16	64519-64520	"	
402-17	64521-64524	has	
402-18	64525-64538	double-quotes	
402-19	64538-64539	,	
402-20	64540-64542	so	
402-21	64543-64545	it	
402-22	64546-64551	fails	
402-23	64551-64552	.	

#Text=Using #>> removes the double quotes and allows the string value to be cast to numeric too.
403-1	64553-64558	Using	
403-2	64559-64560	#	
403-3	64560-64561	>	
403-4	64561-64562	>	
403-5	64563-64570	removes	
403-6	64571-64574	the	
403-7	64575-64581	double	
403-8	64582-64588	quotes	
403-9	64589-64592	and	
403-10	64593-64599	allows	
403-11	64600-64603	the	
403-12	64604-64610	string	
403-13	64611-64616	value	
403-14	64617-64619	to	
403-15	64620-64622	be	
403-16	64623-64627	cast	
403-17	64628-64630	to	
403-18	64631-64638	numeric	
403-19	64639-64642	too	
403-20	64642-64643	.	

#Text=This
#Text=discussion exposes the confusion of using json without casting.
404-1	64644-64648	This	
404-2	64649-64659	discussion	
404-3	64660-64667	exposes	
404-4	64668-64671	the	
404-5	64672-64681	confusion	
404-6	64682-64684	of	
404-7	64685-64690	using	
404-8	64691-64695	json	
404-9	64696-64703	without	
404-10	64704-64711	casting	
404-11	64711-64712	.	

#Text=I have been using single jsonb values, but the same behavior happens with jsonb documents:
#Text=DELETE FROM test;
#Text=-- create document with keys 'a' and 'b'
#Text=INSERT INTO test VALUES ('{"a": "xyz", "b": 5}');
#Text=-- access key 'a'
#Text=SELECT x->'a', jsonb_typeof(x->'a'), pg_typeof(x->'a'), (x->'a')::TEXT, x->>'a', pg_typeof(x->>'a') FROM test;
#Text=?
405-1	64713-64714	I	
405-2	64715-64719	have	
405-3	64720-64724	been	
405-4	64725-64730	using	
405-5	64731-64737	single	
405-6	64738-64743	jsonb	
405-7	64744-64750	values	
405-8	64750-64751	,	
405-9	64752-64755	but	
405-10	64756-64759	the	
405-11	64760-64764	same	
405-12	64765-64773	behavior	
405-13	64774-64781	happens	
405-14	64782-64786	with	
405-15	64787-64792	jsonb	
405-16	64793-64802	documents	
405-17	64802-64803	:	
405-18	64804-64810	DELETE	
405-19	64811-64815	FROM	
405-20	64816-64820	test	
405-21	64820-64821	;	
405-22	64822-64823	-	
405-23	64823-64824	-	
405-24	64825-64831	create	
405-25	64832-64840	document	
405-26	64841-64845	with	
405-27	64846-64850	keys	
405-28	64851-64852	'	
405-29	64852-64853	a	
405-30	64853-64854	'	
405-31	64855-64858	and	
405-32	64859-64860	'	
405-33	64860-64861	b	
405-34	64861-64862	'	
405-35	64863-64869	INSERT	
405-36	64870-64874	INTO	
405-37	64875-64879	test	
405-38	64880-64886	VALUES	
405-39	64887-64888	(	
405-40	64888-64889	'	
405-41	64889-64890	{	
405-42	64890-64891	"	
405-43	64891-64892	a	
405-44	64892-64893	"	
405-45	64893-64894	:	
405-46	64895-64896	"	
405-47	64896-64899	xyz	
405-48	64899-64900	"	
405-49	64900-64901	,	
405-50	64902-64903	"	
405-51	64903-64904	b	
405-52	64904-64905	"	
405-53	64905-64906	:	
405-54	64907-64908	5	
405-55	64908-64909	}	
405-56	64909-64910	'	
405-57	64910-64911	)	
405-58	64911-64912	;	
405-59	64913-64914	-	
405-60	64914-64915	-	
405-61	64916-64922	access	
405-62	64923-64926	key	
405-63	64927-64928	'	
405-64	64928-64929	a	
405-65	64929-64930	'	
405-66	64931-64937	SELECT	
405-67	64938-64939	x	
405-68	64939-64940	-	
405-69	64940-64941	>	
405-70	64941-64942	'	
405-71	64942-64943	a	
405-72	64943-64944	'	
405-73	64944-64945	,	
405-74	64946-64958	jsonb_typeof	
405-75	64958-64959	(	
405-76	64959-64960	x	
405-77	64960-64961	-	
405-78	64961-64962	>	
405-79	64962-64963	'	
405-80	64963-64964	a	
405-81	64964-64965	'	
405-82	64965-64966	)	
405-83	64966-64967	,	
405-84	64968-64977	pg_typeof	
405-85	64977-64978	(	
405-86	64978-64979	x	
405-87	64979-64980	-	
405-88	64980-64981	>	
405-89	64981-64982	'	
405-90	64982-64983	a	
405-91	64983-64984	'	
405-92	64984-64985	)	
405-93	64985-64986	,	
405-94	64987-64988	(	
405-95	64988-64989	x	
405-96	64989-64990	-	
405-97	64990-64991	>	
405-98	64991-64992	'	
405-99	64992-64993	a	
405-100	64993-64994	'	
405-101	64994-64995	)	
405-102	64995-64996	:	
405-103	64996-64997	:	
405-104	64997-65001	TEXT	
405-105	65001-65002	,	
405-106	65003-65004	x	
405-107	65004-65005	-	
405-108	65005-65006	>	
405-109	65006-65007	>	
405-110	65007-65008	'	
405-111	65008-65009	a	
405-112	65009-65010	'	
405-113	65010-65011	,	
405-114	65012-65021	pg_typeof	
405-115	65021-65022	(	
405-116	65022-65023	x	
405-117	65023-65024	-	
405-118	65024-65025	>	
405-119	65025-65026	>	
405-120	65026-65027	'	
405-121	65027-65028	a	
405-122	65028-65029	'	
405-123	65029-65030	)	
405-124	65031-65035	FROM	
405-125	65036-65040	test	
405-126	65040-65041	;	
405-127	65042-65043	?	

#Text=column?
406-1	65043-65049	column	
406-2	65049-65050	?	

#Text=| jsonb_typeof | pg_typeof | text
#Text=| ?
407-1	65051-65052	|	
407-2	65053-65065	jsonb_typeof	
407-3	65066-65067	|	
407-4	65068-65077	pg_typeof	
407-5	65078-65079	|	
407-6	65080-65084	text	
407-7	65085-65086	|	
407-8	65087-65088	?	

#Text=column?
408-1	65088-65094	column	
408-2	65094-65095	?	

#Text=| pg_typeof
#Text=----------+--------------+-----------+-------+----------+-----------
#Text="xyz"
#Text=| string
#Text=| jsonb
#Text=| "xyz" | xyz
#Text=| text
#Text=-- access key 'b'
#Text=SELECT x->'b', jsonb_typeof(x->'b'), pg_typeof(x->'b'), (x->'b')::TEXT, x->>'b', pg_typeof(x->>'b') FROM test;
#Text=?
409-1	65096-65097	|	
409-2	65098-65107	pg_typeof	
409-3	65108-65109	-	
409-4	65109-65110	-	
409-5	65110-65111	-	
409-6	65111-65112	-	
409-7	65112-65113	-	
409-8	65113-65114	-	
409-9	65114-65115	-	
409-10	65115-65116	-	
409-11	65116-65117	-	
409-12	65117-65118	-	
409-13	65118-65119	+	
409-14	65119-65120	-	
409-15	65120-65121	-	
409-16	65121-65122	-	
409-17	65122-65123	-	
409-18	65123-65124	-	
409-19	65124-65125	-	
409-20	65125-65126	-	
409-21	65126-65127	-	
409-22	65127-65128	-	
409-23	65128-65129	-	
409-24	65129-65130	-	
409-25	65130-65131	-	
409-26	65131-65132	-	
409-27	65132-65133	-	
409-28	65133-65134	+	
409-29	65134-65135	-	
409-30	65135-65136	-	
409-31	65136-65137	-	
409-32	65137-65138	-	
409-33	65138-65139	-	
409-34	65139-65140	-	
409-35	65140-65141	-	
409-36	65141-65142	-	
409-37	65142-65143	-	
409-38	65143-65144	-	
409-39	65144-65145	-	
409-40	65145-65146	+	
409-41	65146-65147	-	
409-42	65147-65148	-	
409-43	65148-65149	-	
409-44	65149-65150	-	
409-45	65150-65151	-	
409-46	65151-65152	-	
409-47	65152-65153	-	
409-48	65153-65154	+	
409-49	65154-65155	-	
409-50	65155-65156	-	
409-51	65156-65157	-	
409-52	65157-65158	-	
409-53	65158-65159	-	
409-54	65159-65160	-	
409-55	65160-65161	-	
409-56	65161-65162	-	
409-57	65162-65163	-	
409-58	65163-65164	-	
409-59	65164-65165	+	
409-60	65165-65166	-	
409-61	65166-65167	-	
409-62	65167-65168	-	
409-63	65168-65169	-	
409-64	65169-65170	-	
409-65	65170-65171	-	
409-66	65171-65172	-	
409-67	65172-65173	-	
409-68	65173-65174	-	
409-69	65174-65175	-	
409-70	65175-65176	-	
409-71	65177-65178	"	
409-72	65178-65181	xyz	
409-73	65181-65182	"	
409-74	65183-65184	|	
409-75	65185-65191	string	
409-76	65192-65193	|	
409-77	65194-65199	jsonb	
409-78	65200-65201	|	
409-79	65202-65203	"	
409-80	65203-65206	xyz	
409-81	65206-65207	"	
409-82	65208-65209	|	
409-83	65210-65213	xyz	
409-84	65214-65215	|	
409-85	65216-65220	text	
409-86	65221-65222	-	
409-87	65222-65223	-	
409-88	65224-65230	access	
409-89	65231-65234	key	
409-90	65235-65236	'	
409-91	65236-65237	b	
409-92	65237-65238	'	
409-93	65239-65245	SELECT	
409-94	65246-65247	x	
409-95	65247-65248	-	
409-96	65248-65249	>	
409-97	65249-65250	'	
409-98	65250-65251	b	
409-99	65251-65252	'	
409-100	65252-65253	,	
409-101	65254-65266	jsonb_typeof	
409-102	65266-65267	(	
409-103	65267-65268	x	
409-104	65268-65269	-	
409-105	65269-65270	>	
409-106	65270-65271	'	
409-107	65271-65272	b	
409-108	65272-65273	'	
409-109	65273-65274	)	
409-110	65274-65275	,	
409-111	65276-65285	pg_typeof	
409-112	65285-65286	(	
409-113	65286-65287	x	
409-114	65287-65288	-	
409-115	65288-65289	>	
409-116	65289-65290	'	
409-117	65290-65291	b	
409-118	65291-65292	'	
409-119	65292-65293	)	
409-120	65293-65294	,	
409-121	65295-65296	(	
409-122	65296-65297	x	
409-123	65297-65298	-	
409-124	65298-65299	>	
409-125	65299-65300	'	
409-126	65300-65301	b	
409-127	65301-65302	'	
409-128	65302-65303	)	
409-129	65303-65304	:	
409-130	65304-65305	:	
409-131	65305-65309	TEXT	
409-132	65309-65310	,	
409-133	65311-65312	x	
409-134	65312-65313	-	
409-135	65313-65314	>	
409-136	65314-65315	>	
409-137	65315-65316	'	
409-138	65316-65317	b	
409-139	65317-65318	'	
409-140	65318-65319	,	
409-141	65320-65329	pg_typeof	
409-142	65329-65330	(	
409-143	65330-65331	x	
409-144	65331-65332	-	
409-145	65332-65333	>	
409-146	65333-65334	>	
409-147	65334-65335	'	
409-148	65335-65336	b	
409-149	65336-65337	'	
409-150	65337-65338	)	
409-151	65339-65343	FROM	
409-152	65344-65348	test	
409-153	65348-65349	;	
409-154	65350-65351	?	

#Text=column?
410-1	65351-65357	column	
410-2	65357-65358	?	

#Text=| jsonb_typeof | pg_typeof | text | ?
411-1	65359-65360	|	
411-2	65361-65373	jsonb_typeof	
411-3	65374-65375	|	
411-4	65376-65385	pg_typeof	
411-5	65386-65387	|	
411-6	65388-65392	text	
411-7	65393-65394	|	
411-8	65395-65396	?	

#Text=column?
412-1	65396-65402	column	
412-2	65402-65403	?	

#Text=| pg_typeof
#Text=----------+--------------+-----------+------+----------+-----------
#Text=| number
#Text=| jsonb
#Text=| 5
#Text=| 5
#Text=| text
#Text=So, in summary:
#Text=If you want to use json values as text, use ->> or #>>
#Text=If you want to cast to another sql data type, use :: or cast to cast, but be sure all values can be cast to the new sql data type
#Text=View or Post Comments
#Text=Two Interviews
#Text=Friday, July 10, 2020
#Text=I have done two interviews in the past month.
413-1	65404-65405	|	
413-2	65406-65415	pg_typeof	
413-3	65416-65417	-	
413-4	65417-65418	-	
413-5	65418-65419	-	
413-6	65419-65420	-	
413-7	65420-65421	-	
413-8	65421-65422	-	
413-9	65422-65423	-	
413-10	65423-65424	-	
413-11	65424-65425	-	
413-12	65425-65426	-	
413-13	65426-65427	+	
413-14	65427-65428	-	
413-15	65428-65429	-	
413-16	65429-65430	-	
413-17	65430-65431	-	
413-18	65431-65432	-	
413-19	65432-65433	-	
413-20	65433-65434	-	
413-21	65434-65435	-	
413-22	65435-65436	-	
413-23	65436-65437	-	
413-24	65437-65438	-	
413-25	65438-65439	-	
413-26	65439-65440	-	
413-27	65440-65441	-	
413-28	65441-65442	+	
413-29	65442-65443	-	
413-30	65443-65444	-	
413-31	65444-65445	-	
413-32	65445-65446	-	
413-33	65446-65447	-	
413-34	65447-65448	-	
413-35	65448-65449	-	
413-36	65449-65450	-	
413-37	65450-65451	-	
413-38	65451-65452	-	
413-39	65452-65453	-	
413-40	65453-65454	+	
413-41	65454-65455	-	
413-42	65455-65456	-	
413-43	65456-65457	-	
413-44	65457-65458	-	
413-45	65458-65459	-	
413-46	65459-65460	-	
413-47	65460-65461	+	
413-48	65461-65462	-	
413-49	65462-65463	-	
413-50	65463-65464	-	
413-51	65464-65465	-	
413-52	65465-65466	-	
413-53	65466-65467	-	
413-54	65467-65468	-	
413-55	65468-65469	-	
413-56	65469-65470	-	
413-57	65470-65471	-	
413-58	65471-65472	+	
413-59	65472-65473	-	
413-60	65473-65474	-	
413-61	65474-65475	-	
413-62	65475-65476	-	
413-63	65476-65477	-	
413-64	65477-65478	-	
413-65	65478-65479	-	
413-66	65479-65480	-	
413-67	65480-65481	-	
413-68	65481-65482	-	
413-69	65482-65483	-	
413-70	65484-65485	|	
413-71	65486-65492	number	
413-72	65493-65494	|	
413-73	65495-65500	jsonb	
413-74	65501-65502	|	
413-75	65503-65504	5	
413-76	65505-65506	|	
413-77	65507-65508	5	
413-78	65509-65510	|	
413-79	65511-65515	text	
413-80	65516-65518	So	
413-81	65518-65519	,	
413-82	65520-65522	in	
413-83	65523-65530	summary	
413-84	65530-65531	:	
413-85	65532-65534	If	
413-86	65535-65538	you	
413-87	65539-65543	want	
413-88	65544-65546	to	
413-89	65547-65550	use	
413-90	65551-65555	json	
413-91	65556-65562	values	
413-92	65563-65565	as	
413-93	65566-65570	text	
413-94	65570-65571	,	
413-95	65572-65575	use	
413-96	65576-65577	-	
413-97	65577-65578	>	
413-98	65578-65579	>	
413-99	65580-65582	or	
413-100	65583-65584	#	
413-101	65584-65585	>	
413-102	65585-65586	>	
413-103	65587-65589	If	
413-104	65590-65593	you	
413-105	65594-65598	want	
413-106	65599-65601	to	
413-107	65602-65606	cast	
413-108	65607-65609	to	
413-109	65610-65617	another	
413-110	65618-65621	sql	
413-111	65622-65626	data	
413-112	65627-65631	type	
413-113	65631-65632	,	
413-114	65633-65636	use	
413-115	65637-65638	:	
413-116	65638-65639	:	
413-117	65640-65642	or	
413-118	65643-65647	cast	
413-119	65648-65650	to	
413-120	65651-65655	cast	
413-121	65655-65656	,	
413-122	65657-65660	but	
413-123	65661-65663	be	
413-124	65664-65668	sure	
413-125	65669-65672	all	
413-126	65673-65679	values	
413-127	65680-65683	can	
413-128	65684-65686	be	
413-129	65687-65691	cast	
413-130	65692-65694	to	
413-131	65695-65698	the	
413-132	65699-65702	new	
413-133	65703-65706	sql	
413-134	65707-65711	data	
413-135	65712-65716	type	
413-136	65717-65721	View	
413-137	65722-65724	or	
413-138	65725-65729	Post	
413-139	65730-65738	Comments	
413-140	65739-65742	Two	
413-141	65743-65753	Interviews	
413-142	65754-65760	Friday	
413-143	65760-65761	,	
413-144	65762-65766	July	
413-145	65767-65769	10	
413-146	65769-65770	,	
413-147	65771-65775	2020	
413-148	65776-65777	I	
413-149	65778-65782	have	
413-150	65783-65787	done	
413-151	65788-65791	two	
413-152	65792-65802	interviews	
413-153	65803-65805	in	
413-154	65806-65809	the	
413-155	65810-65814	past	
413-156	65815-65820	month	
413-157	65820-65821	.	

#Text=The first one was done by the Linux Inlaws and was published on Hacker Public
#Text=Radio.
414-1	65822-65825	The	
414-2	65826-65831	first	
414-3	65832-65835	one	
414-4	65836-65839	was	
414-5	65840-65844	done	
414-6	65845-65847	by	
414-7	65848-65851	the	
414-8	65852-65857	Linux	
414-9	65858-65864	Inlaws	
414-10	65865-65868	and	
414-11	65869-65872	was	
414-12	65873-65882	published	
414-13	65883-65885	on	
414-14	65886-65892	Hacker	
414-15	65893-65899	Public	
414-16	65900-65905	Radio	
414-17	65905-65906	.	

#Text=This interview discusses the history and open source aspects of the Postgres project, and its health and future direction.
415-1	65907-65911	This	
415-2	65912-65921	interview	
415-3	65922-65931	discusses	
415-4	65932-65935	the	
415-5	65936-65943	history	
415-6	65944-65947	and	
415-7	65948-65952	open	
415-8	65953-65959	source	
415-9	65960-65967	aspects	
415-10	65968-65970	of	
415-11	65971-65974	the	
415-12	65975-65983	Postgres	
415-13	65984-65991	project	
415-14	65991-65992	,	
415-15	65993-65996	and	
415-16	65997-66000	its	
415-17	66001-66007	health	
415-18	66008-66011	and	
415-19	66012-66018	future	
415-20	66019-66028	direction	
415-21	66028-66029	.	

#Text=The second interview is more personal, discussing how I got involved in computers and my early experiences with Postgres.
416-1	66030-66033	The	
416-2	66034-66040	second	
416-3	66041-66050	interview	
416-4	66051-66053	is	
416-5	66054-66058	more	
416-6	66059-66067	personal	
416-7	66067-66068	,	
416-8	66069-66079	discussing	
416-9	66080-66083	how	
416-10	66084-66085	I	
416-11	66086-66089	got	
416-12	66090-66098	involved	
416-13	66099-66101	in	
416-14	66102-66111	computers	
416-15	66112-66115	and	
416-16	66116-66118	my	
416-17	66119-66124	early	
416-18	66125-66136	experiences	
416-19	66137-66141	with	
416-20	66142-66150	Postgres	
416-21	66150-66151	.	

#Text=It also discusses technology
#Text=disruption, and its challenge to time management.
417-1	66152-66154	It	
417-2	66155-66159	also	
417-3	66160-66169	discusses	
417-4	66170-66180	technology	
417-5	66181-66191	disruption	
417-6	66191-66192	,	
417-7	66193-66196	and	
417-8	66197-66200	its	
417-9	66201-66210	challenge	
417-10	66211-66213	to	
417-11	66214-66218	time	
417-12	66219-66229	management	
417-13	66229-66230	.	

#Text=The final quarter covers religious topics.
418-1	66231-66234	The	
418-2	66235-66240	final	
418-3	66241-66248	quarter	
418-4	66249-66255	covers	
418-5	66256-66265	religious	
418-6	66266-66272	topics	
418-7	66272-66273	.	

#Text=View or Post Comments
#Text=Postgres Marketing
#Text=Wednesday, July
#Text=8, 2020
#Text=Postgres is mostly a technology-driven community, so marketing often suffers.
419-1	66274-66278	View	
419-2	66279-66281	or	
419-3	66282-66286	Post	
419-4	66287-66295	Comments	
419-5	66296-66304	Postgres	
419-6	66305-66314	Marketing	
419-7	66315-66324	Wednesday	
419-8	66324-66325	,	
419-9	66326-66330	July	
419-10	66331-66332	8	
419-11	66332-66333	,	
419-12	66334-66338	2020	
419-13	66339-66347	Postgres	
419-14	66348-66350	is	
419-15	66351-66357	mostly	
419-16	66358-66359	a	
419-17	66360-66377	technology-driven	
419-18	66378-66387	community	
419-19	66387-66388	,	
419-20	66389-66391	so	
419-21	66392-66401	marketing	
419-22	66402-66407	often	
419-23	66408-66415	suffers	
419-24	66415-66416	.	

#Text=However, one great thing about the community is that it is distributed, so anyone can get involved and help.
420-1	66417-66424	However	
420-2	66424-66425	,	
420-3	66426-66429	one	
420-4	66430-66435	great	
420-5	66436-66441	thing	
420-6	66442-66447	about	
420-7	66448-66451	the	
420-8	66452-66461	community	
420-9	66462-66464	is	
420-10	66465-66469	that	
420-11	66470-66472	it	
420-12	66473-66475	is	
420-13	66476-66487	distributed	
420-14	66487-66488	,	
420-15	66489-66491	so	
420-16	66492-66498	anyone	
420-17	66499-66502	can	
420-18	66503-66506	get	
420-19	66507-66515	involved	
420-20	66516-66519	and	
420-21	66520-66524	help	
420-22	66524-66525	.	

#Text=Here are
#Text=some examples of very successful community-driven marketing ideas:
#Text=PostgreSQL Funds Group release 12 coin
#Text=Pg-us Postgres community founding coin
#Text=Russian Postgres/MySQL coin
#Text=Postgres Pro PostgreSQL for Beginners booklet
#Text=Here are front and rear images of these objects.
421-1	66526-66530	Here	
421-2	66531-66534	are	
421-3	66535-66539	some	
421-4	66540-66548	examples	
421-5	66549-66551	of	
421-6	66552-66556	very	
421-7	66557-66567	successful	
421-8	66568-66584	community-driven	
421-9	66585-66594	marketing	
421-10	66595-66600	ideas	
421-11	66600-66601	:	
421-12	66602-66612	PostgreSQL	
421-13	66613-66618	Funds	
421-14	66619-66624	Group	
421-15	66625-66632	release	
421-16	66633-66635	12	
421-17	66636-66640	coin	
421-18	66641-66646	Pg-us	
421-19	66647-66655	Postgres	
421-20	66656-66665	community	
421-21	66666-66674	founding	
421-22	66675-66679	coin	
421-23	66680-66687	Russian	
421-24	66688-66696	Postgres	
421-25	66696-66697	/	
421-26	66697-66702	MySQL	
421-27	66703-66707	coin	
421-28	66708-66716	Postgres	
421-29	66717-66720	Pro	
421-30	66721-66731	PostgreSQL	
421-31	66732-66735	for	
421-32	66736-66745	Beginners	
421-33	66746-66753	booklet	
421-34	66754-66758	Here	
421-35	66759-66762	are	
421-36	66763-66768	front	
421-37	66769-66772	and	
421-38	66773-66777	rear	
421-39	66778-66784	images	
421-40	66785-66787	of	
421-41	66788-66793	these	
421-42	66794-66801	objects	
421-43	66801-66802	.	

#Text=Of course, I have also accumulated many Postgres
#Text=pins over the years.
422-1	66803-66805	Of	
422-2	66806-66812	course	
422-3	66812-66813	,	
422-4	66814-66815	I	
422-5	66816-66820	have	
422-6	66821-66825	also	
422-7	66826-66837	accumulated	
422-8	66838-66842	many	
422-9	66843-66851	Postgres	
422-10	66852-66856	pins	
422-11	66857-66861	over	
422-12	66862-66865	the	
422-13	66866-66871	years	
422-14	66871-66872	.	

#Text=I am inspired by these marketing efforts and hope they continue.
423-1	66873-66874	I	
423-2	66875-66877	am	
423-3	66878-66886	inspired	
423-4	66887-66889	by	
423-5	66890-66895	these	
423-6	66896-66905	marketing	
423-7	66906-66913	efforts	
423-8	66914-66917	and	
423-9	66918-66922	hope	
423-10	66923-66927	they	
423-11	66928-66936	continue	
423-12	66936-66937	.	

#Text=View or Post Comments
#Text=Boolean Indexes
#Text=Friday, July
#Text=3, 2020
#Text=For btree and hash indexes to be used for lookups, values being requested must be very
#Text=restrictive, roughly 3-5% of a table's rows.
424-1	66938-66942	View	
424-2	66943-66945	or	
424-3	66946-66950	Post	
424-4	66951-66959	Comments	
424-5	66960-66967	Boolean	
424-6	66968-66975	Indexes	
424-7	66976-66982	Friday	
424-8	66982-66983	,	
424-9	66984-66988	July	
424-10	66989-66990	3	
424-11	66990-66991	,	
424-12	66992-66996	2020	
424-13	66997-67000	For	
424-14	67001-67006	btree	
424-15	67007-67010	and	
424-16	67011-67015	hash	
424-17	67016-67023	indexes	
424-18	67024-67026	to	
424-19	67027-67029	be	
424-20	67030-67034	used	
424-21	67035-67038	for	
424-22	67039-67046	lookups	
424-23	67046-67047	,	
424-24	67048-67054	values	
424-25	67055-67060	being	
424-26	67061-67070	requested	
424-27	67071-67075	must	
424-28	67076-67078	be	
424-29	67079-67083	very	
424-30	67084-67095	restrictive	
424-31	67095-67096	,	
424-32	67097-67104	roughly	
424-33	67105-67106	3	
424-34	67106-67107	-	
424-35	67107-67109	5%	
424-36	67110-67112	of	
424-37	67113-67114	a	
424-38	67115-67122	table's	
424-39	67123-67127	rows	
424-40	67127-67128	.	

#Text=Let's consider a
#Text=boolean column — it can contain only three values:
#Text=true, false, and null.
425-1	67129-67134	Let's	
425-2	67135-67143	consider	
425-3	67144-67145	a	
425-4	67146-67153	boolean	
425-5	67154-67160	column	
425-6	67161-67162	—	
425-7	67163-67165	it	
425-8	67166-67169	can	
425-9	67170-67177	contain	
425-10	67178-67182	only	
425-11	67183-67188	three	
425-12	67189-67195	values	
425-13	67195-67196	:	
425-14	67197-67201	true	
425-15	67201-67202	,	
425-16	67203-67208	false	
425-17	67208-67209	,	
425-18	67210-67213	and	
425-19	67214-67218	null	
425-20	67218-67219	.	

#Text=By definition, at least one of those three
#Text=values will be in more than 5% of the table's rows, so why index them?
426-1	67220-67222	By	
426-2	67223-67233	definition	
426-3	67233-67234	,	
426-4	67235-67237	at	
426-5	67238-67243	least	
426-6	67244-67247	one	
426-7	67248-67250	of	
426-8	67251-67256	those	
426-9	67257-67262	three	
426-10	67263-67269	values	
426-11	67270-67274	will	
426-12	67275-67277	be	
426-13	67278-67280	in	
426-14	67281-67285	more	
426-15	67286-67290	than	
426-16	67291-67293	5%	
426-17	67294-67296	of	
426-18	67297-67300	the	
426-19	67301-67308	table's	
426-20	67309-67313	rows	
426-21	67313-67314	,	
426-22	67315-67317	so	
426-23	67318-67321	why	
426-24	67322-67327	index	
426-25	67328-67332	them	
426-26	67332-67333	?	

#Text=A better solution, particularly for boolean fields, is to create a
#Text=partial index so only rare values are indexed.
427-1	67334-67335	A	
427-2	67336-67342	better	
427-3	67343-67351	solution	
427-4	67351-67352	,	
427-5	67353-67365	particularly	
427-6	67366-67369	for	
427-7	67370-67377	boolean	
427-8	67378-67384	fields	
427-9	67384-67385	,	
427-10	67386-67388	is	
427-11	67389-67391	to	
427-12	67392-67398	create	
427-13	67399-67400	a	
427-14	67401-67408	partial	
427-15	67409-67414	index	
427-16	67415-67417	so	
427-17	67418-67422	only	
427-18	67423-67427	rare	
427-19	67428-67434	values	
427-20	67435-67438	are	
427-21	67439-67446	indexed	
427-22	67446-67447	.	

#Text=Partial indexes can also be used to index non-boolean fields when there are a large number
#Text=of common values that aren't worth indexing.
428-1	67448-67455	Partial	
428-2	67456-67463	indexes	
428-3	67464-67467	can	
428-4	67468-67472	also	
428-5	67473-67475	be	
428-6	67476-67480	used	
428-7	67481-67483	to	
428-8	67484-67489	index	
428-9	67490-67501	non-boolean	
428-10	67502-67508	fields	
428-11	67509-67513	when	
428-12	67514-67519	there	
428-13	67520-67523	are	
428-14	67524-67525	a	
428-15	67526-67531	large	
428-16	67532-67538	number	
428-17	67539-67541	of	
428-18	67542-67548	common	
428-19	67549-67555	values	
428-20	67556-67560	that	
428-21	67561-67567	aren't	
428-22	67568-67573	worth	
428-23	67574-67582	indexing	
428-24	67582-67583	.	

#Text=View or Post Comments
#Text=Global Indexes
#Text=Wednesday, July
#Text=1, 2020
#Text=Postgres indexes can only be defined on single tables.
429-1	67584-67588	View	
429-2	67589-67591	or	
429-3	67592-67596	Post	
429-4	67597-67605	Comments	
429-5	67606-67612	Global	
429-6	67613-67620	Indexes	
429-7	67621-67630	Wednesday	
429-8	67630-67631	,	
429-9	67632-67636	July	
429-10	67637-67638	1	
429-11	67638-67639	,	
429-12	67640-67644	2020	
429-13	67645-67653	Postgres	
429-14	67654-67661	indexes	
429-15	67662-67665	can	
429-16	67666-67670	only	
429-17	67671-67673	be	
429-18	67674-67681	defined	
429-19	67682-67684	on	
429-20	67685-67691	single	
429-21	67692-67698	tables	
429-22	67698-67699	.	

#Text=Why would you want to have indexes that reference multiple tables, i.e., global indexes?
430-1	67700-67703	Why	
430-2	67704-67709	would	
430-3	67710-67713	you	
430-4	67714-67718	want	
430-5	67719-67721	to	
430-6	67722-67726	have	
430-7	67727-67734	indexes	
430-8	67735-67739	that	
430-9	67740-67749	reference	
430-10	67750-67758	multiple	
430-11	67759-67765	tables	
430-12	67765-67766	,	
430-13	67767-67770	i.e	
430-14	67770-67771	.	
430-15	67771-67772	,	
430-16	67773-67779	global	
430-17	67780-67787	indexes	
430-18	67787-67788	?	

#Text=This email covers some of the reasons why global indexes can be useful.
431-1	67789-67793	This	
431-2	67794-67799	email	
431-3	67800-67806	covers	
431-4	67807-67811	some	
431-5	67812-67814	of	
431-6	67815-67818	the	
431-7	67819-67826	reasons	
431-8	67827-67830	why	
431-9	67831-67837	global	
431-10	67838-67845	indexes	
431-11	67846-67849	can	
431-12	67850-67852	be	
431-13	67853-67859	useful	
431-14	67859-67860	.	

#Text=One big use-case is
#Text=the ability to create indexes on partitioned tables that index all its child tables, rather than requiring a separate index on each child
#Text=table.
432-1	67861-67864	One	
432-2	67865-67868	big	
432-3	67869-67877	use-case	
432-4	67878-67880	is	
432-5	67881-67884	the	
432-6	67885-67892	ability	
432-7	67893-67895	to	
432-8	67896-67902	create	
432-9	67903-67910	indexes	
432-10	67911-67913	on	
432-11	67914-67925	partitioned	
432-12	67926-67932	tables	
432-13	67933-67937	that	
432-14	67938-67943	index	
432-15	67944-67947	all	
432-16	67948-67951	its	
432-17	67952-67957	child	
432-18	67958-67964	tables	
432-19	67964-67965	,	
432-20	67966-67972	rather	
432-21	67973-67977	than	
432-22	67978-67987	requiring	
432-23	67988-67989	a	
432-24	67990-67998	separate	
432-25	67999-68004	index	
432-26	68005-68007	on	
432-27	68008-68012	each	
432-28	68013-68018	child	
432-29	68019-68024	table	
432-30	68024-68025	.	

#Text=This would allow references to partitioned tables as foreign keys without requiring the partition key to be part of the foreign key
#Text=reference;
#Text=Postgres 12 allows such foreign keys if they match partition keys.
433-1	68026-68030	This	
433-2	68031-68036	would	
433-3	68037-68042	allow	
433-4	68043-68053	references	
433-5	68054-68056	to	
433-6	68057-68068	partitioned	
433-7	68069-68075	tables	
433-8	68076-68078	as	
433-9	68079-68086	foreign	
433-10	68087-68091	keys	
433-11	68092-68099	without	
433-12	68100-68109	requiring	
433-13	68110-68113	the	
433-14	68114-68123	partition	
433-15	68124-68127	key	
433-16	68128-68130	to	
433-17	68131-68133	be	
433-18	68134-68138	part	
433-19	68139-68141	of	
433-20	68142-68145	the	
433-21	68146-68153	foreign	
433-22	68154-68157	key	
433-23	68158-68167	reference	
433-24	68167-68168	;	
433-25	68169-68177	Postgres	
433-26	68178-68180	12	
433-27	68181-68187	allows	
433-28	68188-68192	such	
433-29	68193-68200	foreign	
433-30	68201-68205	keys	
433-31	68206-68208	if	
433-32	68209-68213	they	
433-33	68214-68219	match	
433-34	68220-68229	partition	
433-35	68230-68234	keys	
433-36	68234-68235	.	

#Text=A second use-case for global indexes is the ability to add a uniqueness constraint to a partitioned table where the unique columns are not part of the partition key.
434-1	68236-68237	A	
434-2	68238-68244	second	
434-3	68245-68253	use-case	
434-4	68254-68257	for	
434-5	68258-68264	global	
434-6	68265-68272	indexes	
434-7	68273-68275	is	
434-8	68276-68279	the	
434-9	68280-68287	ability	
434-10	68288-68290	to	
434-11	68291-68294	add	
434-12	68295-68296	a	
434-13	68297-68307	uniqueness	
434-14	68308-68318	constraint	
434-15	68319-68321	to	
434-16	68322-68323	a	
434-17	68324-68335	partitioned	
434-18	68336-68341	table	
434-19	68342-68347	where	
434-20	68348-68351	the	
434-21	68352-68358	unique	
434-22	68359-68366	columns	
434-23	68367-68370	are	
434-24	68371-68374	not	
434-25	68375-68379	part	
434-26	68380-68382	of	
434-27	68383-68386	the	
434-28	68387-68396	partition	
434-29	68397-68400	key	
434-30	68400-68401	.	

#Text=A third use-case is the ability to
#Text=index values that only appear in a few partitions, and are not part of the partition key.
435-1	68402-68403	A	
435-2	68404-68409	third	
435-3	68410-68418	use-case	
435-4	68419-68421	is	
435-5	68422-68425	the	
435-6	68426-68433	ability	
435-7	68434-68436	to	
435-8	68437-68442	index	
435-9	68443-68449	values	
435-10	68450-68454	that	
435-11	68455-68459	only	
435-12	68460-68466	appear	
435-13	68467-68469	in	
435-14	68470-68471	a	
435-15	68472-68475	few	
435-16	68476-68486	partitions	
435-17	68486-68487	,	
435-18	68488-68491	and	
435-19	68492-68495	are	
435-20	68496-68499	not	
435-21	68500-68504	part	
435-22	68505-68507	of	
435-23	68508-68511	the	
435-24	68512-68521	partition	
435-25	68522-68525	key	
435-26	68525-68526	.	

#Text=A global index would avoid having to check each partition table's index for the desired value.
436-1	68527-68528	A	
436-2	68529-68535	global	
436-3	68536-68541	index	
436-4	68542-68547	would	
436-5	68548-68553	avoid	
436-6	68554-68560	having	
436-7	68561-68563	to	
436-8	68564-68569	check	
436-9	68570-68574	each	
436-10	68575-68584	partition	
436-11	68585-68592	table's	
436-12	68593-68598	index	
436-13	68599-68602	for	
436-14	68603-68606	the	
436-15	68607-68614	desired	
436-16	68615-68620	value	
436-17	68620-68621	.	

#Text=It is still unclear if these use-cases justify the architectural changes needed to enable global indexes.
437-1	68622-68624	It	
437-2	68625-68627	is	
437-3	68628-68633	still	
437-4	68634-68641	unclear	
437-5	68642-68644	if	
437-6	68645-68650	these	
437-7	68651-68660	use-cases	
437-8	68661-68668	justify	
437-9	68669-68672	the	
437-10	68673-68686	architectural	
437-11	68687-68694	changes	
437-12	68695-68701	needed	
437-13	68702-68704	to	
437-14	68705-68711	enable	
437-15	68712-68718	global	
437-16	68719-68726	indexes	
437-17	68726-68727	.	

#Text=Some of these features can be simulated using triggers and user lookup tables.
438-1	68728-68732	Some	
438-2	68733-68735	of	
438-3	68736-68741	these	
438-4	68742-68750	features	
438-5	68751-68754	can	
438-6	68755-68757	be	
438-7	68758-68767	simulated	
438-8	68768-68773	using	
438-9	68774-68782	triggers	
438-10	68783-68786	and	
438-11	68787-68791	user	
438-12	68792-68798	lookup	
438-13	68799-68805	tables	
438-14	68805-68806	.	

#Text=A large global
#Text=index might also reintroduce problems that prompted the creation of partitioning in the first place.
439-1	68807-68808	A	
439-2	68809-68814	large	
439-3	68815-68821	global	
439-4	68822-68827	index	
439-5	68828-68833	might	
439-6	68834-68838	also	
439-7	68839-68850	reintroduce	
439-8	68851-68859	problems	
439-9	68860-68864	that	
439-10	68865-68873	prompted	
439-11	68874-68877	the	
439-12	68878-68886	creation	
439-13	68887-68889	of	
439-14	68890-68902	partitioning	
439-15	68903-68905	in	
439-16	68906-68909	the	
439-17	68910-68915	first	
439-18	68916-68921	place	
439-19	68921-68922	.	

#Text=Update: summary email 2021-01-08
#Text=View or Post Comments
#Text=Hardware Acceleration for Databases
#Text=Monday, June 29, 2020
#Text=There is a long history of hardware acceleration, i.e., hardware modules helping the cpu.
440-1	68923-68929	Update	
440-2	68929-68930	:	
440-3	68931-68938	summary	
440-4	68939-68944	email	
440-5	68945-68949	2021	
440-6	68949-68950	-	
440-7	68950-68952	01	
440-8	68952-68953	-	
440-9	68953-68955	08	
440-10	68956-68960	View	
440-11	68961-68963	or	
440-12	68964-68968	Post	
440-13	68969-68977	Comments	
440-14	68978-68986	Hardware	
440-15	68987-68999	Acceleration	
440-16	69000-69003	for	
440-17	69004-69013	Databases	
440-18	69014-69020	Monday	
440-19	69020-69021	,	
440-20	69022-69026	June	
440-21	69027-69029	29	
440-22	69029-69030	,	
440-23	69031-69035	2020	
440-24	69036-69041	There	
440-25	69042-69044	is	
440-26	69045-69046	a	
440-27	69047-69051	long	
440-28	69052-69059	history	
440-29	69060-69062	of	
440-30	69063-69071	hardware	
440-31	69072-69084	acceleration	
440-32	69084-69085	,	
440-33	69086-69089	i.e	
440-34	69089-69090	.	
440-35	69090-69091	,	
440-36	69092-69100	hardware	
440-37	69101-69108	modules	
440-38	69109-69116	helping	
440-39	69117-69120	the	
440-40	69121-69124	cpu	
440-41	69124-69125	.	

#Text=There was the 80287 math coprocessor, sound cards, and
#Text=video cards.
441-1	69126-69131	There	
441-2	69132-69135	was	
441-3	69136-69139	the	
441-4	69140-69145	80287	
441-5	69146-69150	math	
441-6	69151-69162	coprocessor	
441-7	69162-69163	,	
441-8	69164-69169	sound	
441-9	69170-69175	cards	
441-10	69175-69176	,	
441-11	69177-69180	and	
441-12	69181-69186	video	
441-13	69187-69192	cards	
441-14	69192-69193	.	

#Text=The computer industry is constantly moving things from the cpu to the motherboard and external cards, and back again.
442-1	69194-69197	The	
442-2	69198-69206	computer	
442-3	69207-69215	industry	
442-4	69216-69218	is	
442-5	69219-69229	constantly	
442-6	69230-69236	moving	
442-7	69237-69243	things	
442-8	69244-69248	from	
442-9	69249-69252	the	
442-10	69253-69256	cpu	
442-11	69257-69259	to	
442-12	69260-69263	the	
442-13	69264-69275	motherboard	
442-14	69276-69279	and	
442-15	69280-69288	external	
442-16	69289-69294	cards	
442-17	69294-69295	,	
442-18	69296-69299	and	
442-19	69300-69304	back	
442-20	69305-69310	again	
442-21	69310-69311	.	

#Text=Movement is mostly determined by whether the cpu is
#Text=able to efficiently perform the task, the transfer bandwidth needed to perform the task, and the flexibility of replaceable external cards.
443-1	69312-69320	Movement	
443-2	69321-69323	is	
443-3	69324-69330	mostly	
443-4	69331-69341	determined	
443-5	69342-69344	by	
443-6	69345-69352	whether	
443-7	69353-69356	the	
443-8	69357-69360	cpu	
443-9	69361-69363	is	
443-10	69364-69368	able	
443-11	69369-69371	to	
443-12	69372-69383	efficiently	
443-13	69384-69391	perform	
443-14	69392-69395	the	
443-15	69396-69400	task	
443-16	69400-69401	,	
443-17	69402-69405	the	
443-18	69406-69414	transfer	
443-19	69415-69424	bandwidth	
443-20	69425-69431	needed	
443-21	69432-69434	to	
443-22	69435-69442	perform	
443-23	69443-69446	the	
443-24	69447-69451	task	
443-25	69451-69452	,	
443-26	69453-69456	and	
443-27	69457-69460	the	
443-28	69461-69472	flexibility	
443-29	69473-69475	of	
443-30	69476-69487	replaceable	
443-31	69488-69496	external	
443-32	69497-69502	cards	
443-33	69502-69503	.	

#Text=This year, the big questions for database software is if and how to make use of graphics processing unit (gpu) and
#Text=field-programmable gate arrays (fpga).
444-1	69504-69508	This	
444-2	69509-69513	year	
444-3	69513-69514	,	
444-4	69515-69518	the	
444-5	69519-69522	big	
444-6	69523-69532	questions	
444-7	69533-69536	for	
444-8	69537-69545	database	
444-9	69546-69554	software	
444-10	69555-69557	is	
444-11	69558-69560	if	
444-12	69561-69564	and	
444-13	69565-69568	how	
444-14	69569-69571	to	
444-15	69572-69576	make	
444-16	69577-69580	use	
444-17	69581-69583	of	
444-18	69584-69592	graphics	
444-19	69593-69603	processing	
444-20	69604-69608	unit	
444-21	69609-69610	(	
444-22	69610-69613	gpu	
444-23	69613-69614	)	
444-24	69615-69618	and	
444-25	69619-69637	field-programmable	
444-26	69638-69642	gate	
444-27	69643-69649	arrays	
444-28	69650-69651	(	
444-29	69651-69655	fpga	
444-30	69655-69656	)	
444-31	69656-69657	.	

#Text=This
#Text=article does a good job of explaining the history of hardware acceleration, and mentions
#Text=Netezza's (no longer used) use of fpgas as hardware acceleration for databases.
445-1	69658-69662	This	
445-2	69663-69670	article	
445-3	69671-69675	does	
445-4	69676-69677	a	
445-5	69678-69682	good	
445-6	69683-69686	job	
445-7	69687-69689	of	
445-8	69690-69700	explaining	
445-9	69701-69704	the	
445-10	69705-69712	history	
445-11	69713-69715	of	
445-12	69716-69724	hardware	
445-13	69725-69737	acceleration	
445-14	69737-69738	,	
445-15	69739-69742	and	
445-16	69743-69751	mentions	
445-17	69752-69761	Netezza's	
445-18	69762-69763	(	
445-19	69763-69765	no	
445-20	69766-69772	longer	
445-21	69773-69777	used	
445-22	69777-69778	)	
445-23	69779-69782	use	
445-24	69783-69785	of	
445-25	69786-69791	fpgas	
445-26	69792-69794	as	
445-27	69795-69803	hardware	
445-28	69804-69816	acceleration	
445-29	69817-69820	for	
445-30	69821-69830	databases	
445-31	69830-69831	.	

#Text=The same historic hardware acceleration questions apply to database acceleration today:
#Text=Are they better suited than cpus to do some database processing tasks, and how common are those tasks?
446-1	69832-69835	The	
446-2	69836-69840	same	
446-3	69841-69849	historic	
446-4	69850-69858	hardware	
446-5	69859-69871	acceleration	
446-6	69872-69881	questions	
446-7	69882-69887	apply	
446-8	69888-69890	to	
446-9	69891-69899	database	
446-10	69900-69912	acceleration	
446-11	69913-69918	today	
446-12	69918-69919	:	
446-13	69920-69923	Are	
446-14	69924-69928	they	
446-15	69929-69935	better	
446-16	69936-69942	suited	
446-17	69943-69947	than	
446-18	69948-69952	cpus	
446-19	69953-69955	to	
446-20	69956-69958	do	
446-21	69959-69963	some	
446-22	69964-69972	database	
446-23	69973-69983	processing	
446-24	69984-69989	tasks	
446-25	69989-69990	,	
446-26	69991-69994	and	
446-27	69995-69998	how	
446-28	69999-70005	common	
446-29	70006-70009	are	
446-30	70010-70015	those	
446-31	70016-70021	tasks	
446-32	70021-70022	?	

#Text=Is there sufficient transfer bandwidth to gpus and fpgas to justify their use?
447-1	70023-70025	Is	
447-2	70026-70031	there	
447-3	70032-70042	sufficient	
447-4	70043-70051	transfer	
447-5	70052-70061	bandwidth	
447-6	70062-70064	to	
447-7	70065-70069	gpus	
447-8	70070-70073	and	
447-9	70074-70079	fpgas	
447-10	70080-70082	to	
447-11	70083-70090	justify	
447-12	70091-70096	their	
447-13	70097-70100	use	
447-14	70100-70101	?	

#Text=Is hardware acceleration worth the deployment complexity?
448-1	70102-70104	Is	
448-2	70105-70113	hardware	
448-3	70114-70126	acceleration	
448-4	70127-70132	worth	
448-5	70133-70136	the	
448-6	70137-70147	deployment	
448-7	70148-70158	complexity	
448-8	70158-70159	?	

#Text=PgOpenCL, HeteroDB, and PG-Strom (from HeteroDB) are projects that are
#Text=experimenting with the value of gpus and fpgas in Postgres.
449-1	70160-70168	PgOpenCL	
449-2	70168-70169	,	
449-3	70170-70178	HeteroDB	
449-4	70178-70179	,	
449-5	70180-70183	and	
449-6	70184-70192	PG-Strom	
449-7	70193-70194	(	
449-8	70194-70198	from	
449-9	70199-70207	HeteroDB	
449-10	70207-70208	)	
449-11	70209-70212	are	
449-12	70213-70221	projects	
449-13	70222-70226	that	
449-14	70227-70230	are	
449-15	70231-70244	experimenting	
449-16	70245-70249	with	
449-17	70250-70253	the	
449-18	70254-70259	value	
449-19	70260-70262	of	
449-20	70263-70267	gpus	
449-21	70268-70271	and	
449-22	70272-70277	fpgas	
449-23	70278-70280	in	
449-24	70281-70289	Postgres	
449-25	70289-70290	.	

#Text=As cloud providers increase the availability of gpus and fpgas, we might start see their usage increase.
450-1	70291-70293	As	
450-2	70294-70299	cloud	
450-3	70300-70309	providers	
450-4	70310-70318	increase	
450-5	70319-70322	the	
450-6	70323-70335	availability	
450-7	70336-70338	of	
450-8	70339-70343	gpus	
450-9	70344-70347	and	
450-10	70348-70353	fpgas	
450-11	70353-70354	,	
450-12	70355-70357	we	
450-13	70358-70363	might	
450-14	70364-70369	start	
450-15	70370-70373	see	
450-16	70374-70379	their	
450-17	70380-70385	usage	
450-18	70386-70394	increase	
450-19	70394-70395	.	

#Text=View or Post Comments
#Text=Can Case Comparison Be Controlled?
451-1	70396-70400	View	
451-2	70401-70403	or	
451-3	70404-70408	Post	
451-4	70409-70417	Comments	
451-5	70418-70421	Can	
451-6	70422-70426	Case	
451-7	70427-70437	Comparison	
451-8	70438-70440	Be	
451-9	70441-70451	Controlled	
451-10	70451-70452	?	

#Text=Friday, June 26, 2020
#Text=Computer tasks are one of the most precise activities we do on a daily basis.
452-1	70453-70459	Friday	
452-2	70459-70460	,	
452-3	70461-70465	June	
452-4	70466-70468	26	
452-5	70468-70469	,	
452-6	70470-70474	2020	
452-7	70475-70483	Computer	
452-8	70484-70489	tasks	
452-9	70490-70493	are	
452-10	70494-70497	one	
452-11	70498-70500	of	
452-12	70501-70504	the	
452-13	70505-70509	most	
452-14	70510-70517	precise	
452-15	70518-70528	activities	
452-16	70529-70531	we	
452-17	70532-70534	do	
452-18	70535-70537	on	
452-19	70538-70539	a	
452-20	70540-70545	daily	
452-21	70546-70551	basis	
452-22	70551-70552	.	

#Text=Driving, cooking, walking, and reading are fairly imprecise compared to computer interaction.
453-1	70553-70560	Driving	
453-2	70560-70561	,	
453-3	70562-70569	cooking	
453-4	70569-70570	,	
453-5	70571-70578	walking	
453-6	70578-70579	,	
453-7	70580-70583	and	
453-8	70584-70591	reading	
453-9	70592-70595	are	
453-10	70596-70602	fairly	
453-11	70603-70612	imprecise	
453-12	70613-70621	compared	
453-13	70622-70624	to	
453-14	70625-70633	computer	
453-15	70634-70645	interaction	
453-16	70645-70646	.	

#Text=Computers represent symbols like "a" and "A" precisely and require external facilities to define relationships between them.
454-1	70647-70656	Computers	
454-2	70657-70666	represent	
454-3	70667-70674	symbols	
454-4	70675-70679	like	
454-5	70680-70681	"	
454-6	70681-70682	a	
454-7	70682-70683	"	
454-8	70684-70687	and	
454-9	70688-70689	"	
454-10	70689-70690	A	
454-11	70690-70691	"	
454-12	70692-70701	precisely	
454-13	70702-70705	and	
454-14	70706-70713	require	
454-15	70714-70722	external	
454-16	70723-70733	facilities	
454-17	70734-70736	to	
454-18	70737-70743	define	
454-19	70744-70757	relationships	
454-20	70758-70765	between	
454-21	70766-70770	them	
454-22	70770-70771	.	

#Text=This
#Text=email thread makes a convincing argument that you usually want case-preserving, but
#Text=less-precise case-insensitive behavior.
455-1	70772-70776	This	
455-2	70777-70782	email	
455-3	70783-70789	thread	
455-4	70790-70795	makes	
455-5	70796-70797	a	
455-6	70798-70808	convincing	
455-7	70809-70817	argument	
455-8	70818-70822	that	
455-9	70823-70826	you	
455-10	70827-70834	usually	
455-11	70835-70839	want	
455-12	70840-70855	case-preserving	
455-13	70855-70856	,	
455-14	70857-70860	but	
455-15	70861-70873	less-precise	
455-16	70874-70890	case-insensitive	
455-17	70891-70899	behavior	
455-18	70899-70900	.	

#Text=Let's go over some Postgres case-precision behaviors like the handling of character strings, identifiers, and keywords.
456-1	70901-70906	Let's	
456-2	70907-70909	go	
456-3	70910-70914	over	
456-4	70915-70919	some	
456-5	70920-70928	Postgres	
456-6	70929-70943	case-precision	
456-7	70944-70953	behaviors	
456-8	70954-70958	like	
456-9	70959-70962	the	
456-10	70963-70971	handling	
456-11	70972-70974	of	
456-12	70975-70984	character	
456-13	70985-70992	strings	
456-14	70992-70993	,	
456-15	70994-71005	identifiers	
456-16	71005-71006	,	
456-17	71007-71010	and	
456-18	71011-71019	keywords	
456-19	71019-71020	.	

#Text=For example, these queries do the same thing:
#Text=SELECT COUNT() FROM pg_class;
#Text=count
#Text=-------
#Text=386
#Text=SELECT COUNT() FROM PG_CLASS;
#Text=count
#Text=-------
#Text=386
#Text=Select Count(*) From Pg_Class;
#Text=count
#Text=-------
#Text=386
#Text=This is because Postgres, and the sql standard, ignore the case of keywords, e.g., select.
457-1	71021-71024	For	
457-2	71025-71032	example	
457-3	71032-71033	,	
457-4	71034-71039	these	
457-5	71040-71047	queries	
457-6	71048-71050	do	
457-7	71051-71054	the	
457-8	71055-71059	same	
457-9	71060-71065	thing	
457-10	71065-71066	:	
457-11	71067-71073	SELECT	
457-12	71074-71079	COUNT	
457-13	71079-71080	(	
457-14	71080-71081	)	
457-15	71082-71086	FROM	
457-16	71087-71095	pg_class	
457-17	71095-71096	;	
457-18	71097-71102	count	
457-19	71103-71104	-	
457-20	71104-71105	-	
457-21	71105-71106	-	
457-22	71106-71107	-	
457-23	71107-71108	-	
457-24	71108-71109	-	
457-25	71109-71110	-	
457-26	71111-71114	386	
457-27	71115-71121	SELECT	
457-28	71122-71127	COUNT	
457-29	71127-71128	(	
457-30	71128-71129	)	
457-31	71130-71134	FROM	
457-32	71135-71143	PG_CLASS	
457-33	71143-71144	;	
457-34	71145-71150	count	
457-35	71151-71152	-	
457-36	71152-71153	-	
457-37	71153-71154	-	
457-38	71154-71155	-	
457-39	71155-71156	-	
457-40	71156-71157	-	
457-41	71157-71158	-	
457-42	71159-71162	386	
457-43	71163-71169	Select	
457-44	71170-71175	Count	
457-45	71175-71176	(	
457-46	71176-71177	*	
457-47	71177-71178	)	
457-48	71179-71183	From	
457-49	71184-71192	Pg_Class	
457-50	71192-71193	;	
457-51	71194-71199	count	
457-52	71200-71201	-	
457-53	71201-71202	-	
457-54	71202-71203	-	
457-55	71203-71204	-	
457-56	71204-71205	-	
457-57	71205-71206	-	
457-58	71206-71207	-	
457-59	71208-71211	386	
457-60	71212-71216	This	
457-61	71217-71219	is	
457-62	71220-71227	because	
457-63	71228-71236	Postgres	
457-64	71236-71237	,	
457-65	71238-71241	and	
457-66	71242-71245	the	
457-67	71246-71249	sql	
457-68	71250-71258	standard	
457-69	71258-71259	,	
457-70	71260-71266	ignore	
457-71	71267-71270	the	
457-72	71271-71275	case	
457-73	71276-71278	of	
457-74	71279-71287	keywords	
457-75	71287-71288	,	
457-76	71289-71292	e.g	
457-77	71292-71293	.	
457-78	71293-71294	,	
457-79	71295-71301	select	
457-80	71301-71302	.	

#Text=They also ignore the case of
#Text=identifiers, e.g., pg_class, when not double-quoted.
458-1	71303-71307	They	
458-2	71308-71312	also	
458-3	71313-71319	ignore	
458-4	71320-71323	the	
458-5	71324-71328	case	
458-6	71329-71331	of	
458-7	71332-71343	identifiers	
458-8	71343-71344	,	
458-9	71345-71348	e.g	
458-10	71348-71349	.	
458-11	71349-71350	,	
458-12	71351-71359	pg_class	
458-13	71359-71360	,	
458-14	71361-71365	when	
458-15	71366-71369	not	
458-16	71370-71383	double-quoted	
458-17	71383-71384	.	

#Text=Double-quoting adds case precision to identifiers:
#Text=SELECT "count"() FROM "pg_class";
#Text=count
#Text=-------
#Text=386
#Text=SELECT "COUNT"() FROM "pg_class";
#Text=ERROR:
#Text=function COUNT() does not exist
#Text=LINE 1: SELECT "COUNT"() FROM "pg_class";
#Text=HINT:
#Text=No function matches the given name and argument types.
459-1	71385-71399	Double-quoting	
459-2	71400-71404	adds	
459-3	71405-71409	case	
459-4	71410-71419	precision	
459-5	71420-71422	to	
459-6	71423-71434	identifiers	
459-7	71434-71435	:	
459-8	71436-71442	SELECT	
459-9	71443-71444	"	
459-10	71444-71449	count	
459-11	71449-71450	"	
459-12	71450-71451	(	
459-13	71451-71452	)	
459-14	71453-71457	FROM	
459-15	71458-71459	"	
459-16	71459-71467	pg_class	
459-17	71467-71468	"	
459-18	71468-71469	;	
459-19	71470-71475	count	
459-20	71476-71477	-	
459-21	71477-71478	-	
459-22	71478-71479	-	
459-23	71479-71480	-	
459-24	71480-71481	-	
459-25	71481-71482	-	
459-26	71482-71483	-	
459-27	71484-71487	386	
459-28	71488-71494	SELECT	
459-29	71495-71496	"	
459-30	71496-71501	COUNT	
459-31	71501-71502	"	
459-32	71502-71503	(	
459-33	71503-71504	)	
459-34	71505-71509	FROM	
459-35	71510-71511	"	
459-36	71511-71519	pg_class	
459-37	71519-71520	"	
459-38	71520-71521	;	
459-39	71522-71527	ERROR	
459-40	71527-71528	:	
459-41	71529-71537	function	
459-42	71538-71543	COUNT	
459-43	71543-71544	(	
459-44	71544-71545	)	
459-45	71546-71550	does	
459-46	71551-71554	not	
459-47	71555-71560	exist	
459-48	71561-71565	LINE	
459-49	71566-71567	1	
459-50	71567-71568	:	
459-51	71569-71575	SELECT	
459-52	71576-71577	"	
459-53	71577-71582	COUNT	
459-54	71582-71583	"	
459-55	71583-71584	(	
459-56	71584-71585	)	
459-57	71586-71590	FROM	
459-58	71591-71592	"	
459-59	71592-71600	pg_class	
459-60	71600-71601	"	
459-61	71601-71602	;	
459-62	71603-71607	HINT	
459-63	71607-71608	:	
459-64	71609-71611	No	
459-65	71612-71620	function	
459-66	71621-71628	matches	
459-67	71629-71632	the	
459-68	71633-71638	given	
459-69	71639-71643	name	
459-70	71644-71647	and	
459-71	71648-71656	argument	
459-72	71657-71662	types	
459-73	71662-71663	.	

#Text=You might need to add explicit type casts.
460-1	71664-71667	You	
460-2	71668-71673	might	
460-3	71674-71678	need	
460-4	71679-71681	to	
460-5	71682-71685	add	
460-6	71686-71694	explicit	
460-7	71695-71699	type	
460-8	71700-71705	casts	
460-9	71705-71706	.	

#Text=SELECT "Count"() FROM "Pg_Class";
#Text=ERROR:
#Text=relation "Pg_Class" does not exist
#Text=LINE 1: SELECT "Count"() FROM "Pg_Class";
#Text=SELECT "COUNT"() FROM "PG_CLASS";
#Text=ERROR:
#Text=relation "PG_CLASS" does not exist
#Text=LINE 1: SELECT "COUNT"(*) FROM "PG_CLASS";
#Text=There is no ability to add case precision to keywords:
#Text="SELECT" COUNT() FROM pg_class;
#Text=ERROR:
#Text=syntax error at or near ""SELECT""
#Text=LINE 1: "SELECT" COUNT() FROM pg_class;
#Text=When comparing values, Postgres is precise by default:
#Text=SELECT 'a' = 'A';
#Text=?
461-1	71707-71713	SELECT	
461-2	71714-71715	"	
461-3	71715-71720	Count	
461-4	71720-71721	"	
461-5	71721-71722	(	
461-6	71722-71723	)	
461-7	71724-71728	FROM	
461-8	71729-71730	"	
461-9	71730-71738	Pg_Class	
461-10	71738-71739	"	
461-11	71739-71740	;	
461-12	71741-71746	ERROR	
461-13	71746-71747	:	
461-14	71748-71756	relation	
461-15	71757-71758	"	
461-16	71758-71766	Pg_Class	
461-17	71766-71767	"	
461-18	71768-71772	does	
461-19	71773-71776	not	
461-20	71777-71782	exist	
461-21	71783-71787	LINE	
461-22	71788-71789	1	
461-23	71789-71790	:	
461-24	71791-71797	SELECT	
461-25	71798-71799	"	
461-26	71799-71804	Count	
461-27	71804-71805	"	
461-28	71805-71806	(	
461-29	71806-71807	)	
461-30	71808-71812	FROM	
461-31	71813-71814	"	
461-32	71814-71822	Pg_Class	
461-33	71822-71823	"	
461-34	71823-71824	;	
461-35	71825-71831	SELECT	
461-36	71832-71833	"	
461-37	71833-71838	COUNT	
461-38	71838-71839	"	
461-39	71839-71840	(	
461-40	71840-71841	)	
461-41	71842-71846	FROM	
461-42	71847-71848	"	
461-43	71848-71856	PG_CLASS	
461-44	71856-71857	"	
461-45	71857-71858	;	
461-46	71859-71864	ERROR	
461-47	71864-71865	:	
461-48	71866-71874	relation	
461-49	71875-71876	"	
461-50	71876-71884	PG_CLASS	
461-51	71884-71885	"	
461-52	71886-71890	does	
461-53	71891-71894	not	
461-54	71895-71900	exist	
461-55	71901-71905	LINE	
461-56	71906-71907	1	
461-57	71907-71908	:	
461-58	71909-71915	SELECT	
461-59	71916-71917	"	
461-60	71917-71922	COUNT	
461-61	71922-71923	"	
461-62	71923-71924	(	
461-63	71924-71925	*	
461-64	71925-71926	)	
461-65	71927-71931	FROM	
461-66	71932-71933	"	
461-67	71933-71941	PG_CLASS	
461-68	71941-71942	"	
461-69	71942-71943	;	
461-70	71944-71949	There	
461-71	71950-71952	is	
461-72	71953-71955	no	
461-73	71956-71963	ability	
461-74	71964-71966	to	
461-75	71967-71970	add	
461-76	71971-71975	case	
461-77	71976-71985	precision	
461-78	71986-71988	to	
461-79	71989-71997	keywords	
461-80	71997-71998	:	
461-81	71999-72000	"	
461-82	72000-72006	SELECT	
461-83	72006-72007	"	
461-84	72008-72013	COUNT	
461-85	72013-72014	(	
461-86	72014-72015	)	
461-87	72016-72020	FROM	
461-88	72021-72029	pg_class	
461-89	72029-72030	;	
461-90	72031-72036	ERROR	
461-91	72036-72037	:	
461-92	72038-72044	syntax	
461-93	72045-72050	error	
461-94	72051-72053	at	
461-95	72054-72056	or	
461-96	72057-72061	near	
461-97	72062-72063	"	
461-98	72063-72064	"	
461-99	72064-72070	SELECT	
461-100	72070-72071	"	
461-101	72071-72072	"	
461-102	72073-72077	LINE	
461-103	72078-72079	1	
461-104	72079-72080	:	
461-105	72081-72082	"	
461-106	72082-72088	SELECT	
461-107	72088-72089	"	
461-108	72090-72095	COUNT	
461-109	72095-72096	(	
461-110	72096-72097	)	
461-111	72098-72102	FROM	
461-112	72103-72111	pg_class	
461-113	72111-72112	;	
461-114	72113-72117	When	
461-115	72118-72127	comparing	
461-116	72128-72134	values	
461-117	72134-72135	,	
461-118	72136-72144	Postgres	
461-119	72145-72147	is	
461-120	72148-72155	precise	
461-121	72156-72158	by	
461-122	72159-72166	default	
461-123	72166-72167	:	
461-124	72168-72174	SELECT	
461-125	72175-72176	'	
461-126	72176-72177	a	
461-127	72177-72178	'	
461-128	72179-72180	=	
461-129	72181-72182	'	
461-130	72182-72183	A	
461-131	72183-72184	'	
461-132	72184-72185	;	
461-133	72186-72187	?	

#Text=column?
462-1	72187-72193	column	
462-2	72193-72194	?	

#Text=----------
#Text=SELECT '-' = '_';
#Text=?
463-1	72195-72196	-	
463-2	72196-72197	-	
463-3	72197-72198	-	
463-4	72198-72199	-	
463-5	72199-72200	-	
463-6	72200-72201	-	
463-7	72201-72202	-	
463-8	72202-72203	-	
463-9	72203-72204	-	
463-10	72204-72205	-	
463-11	72206-72212	SELECT	
463-12	72213-72214	'	
463-13	72214-72215	-	
463-14	72215-72216	'	
463-15	72217-72218	=	
463-16	72219-72220	'	
463-17	72220-72221	_	
463-18	72221-72222	'	
463-19	72222-72223	;	
463-20	72224-72225	?	

#Text=column?
464-1	72225-72231	column	
464-2	72231-72232	?	

#Text=----------
#Text=SELECT '.' = ',';
#Text=?
465-1	72233-72234	-	
465-2	72234-72235	-	
465-3	72235-72236	-	
465-4	72236-72237	-	
465-5	72237-72238	-	
465-6	72238-72239	-	
465-7	72239-72240	-	
465-8	72240-72241	-	
465-9	72241-72242	-	
465-10	72242-72243	-	
465-11	72244-72250	SELECT	
465-12	72251-72252	'	
465-13	72252-72253	.	
465-14	72253-72254	'	
465-15	72255-72256	=	
465-16	72257-72258	'	
465-17	72258-72259	,	
465-18	72259-72260	'	
465-19	72260-72261	;	
465-20	72262-72263	?	

#Text=column?
466-1	72263-72269	column	
466-2	72269-72270	?	

#Text=----------
#Text=For certain symbols, is it sometimes visually hard to see the difference.
467-1	72271-72272	-	
467-2	72272-72273	-	
467-3	72273-72274	-	
467-4	72274-72275	-	
467-5	72275-72276	-	
467-6	72276-72277	-	
467-7	72277-72278	-	
467-8	72278-72279	-	
467-9	72279-72280	-	
467-10	72280-72281	-	
467-11	72282-72285	For	
467-12	72286-72293	certain	
467-13	72294-72301	symbols	
467-14	72301-72302	,	
467-15	72303-72305	is	
467-16	72306-72308	it	
467-17	72309-72318	sometimes	
467-18	72319-72327	visually	
467-19	72328-72332	hard	
467-20	72333-72335	to	
467-21	72336-72339	see	
467-22	72340-72343	the	
467-23	72344-72354	difference	
467-24	72354-72355	.	

#Text=As shown above, double-quotes adds precision to identifiers.
468-1	72356-72358	As	
468-2	72359-72364	shown	
468-3	72365-72370	above	
468-4	72370-72371	,	
468-5	72372-72385	double-quotes	
468-6	72386-72390	adds	
468-7	72391-72400	precision	
468-8	72401-72403	to	
468-9	72404-72415	identifiers	
468-10	72415-72416	.	

#Text=For value comparisons, you have to be explicit to remove precision:
#Text=SELECT upper('a') = upper('A');
#Text=?
469-1	72417-72420	For	
469-2	72421-72426	value	
469-3	72427-72438	comparisons	
469-4	72438-72439	,	
469-5	72440-72443	you	
469-6	72444-72448	have	
469-7	72449-72451	to	
469-8	72452-72454	be	
469-9	72455-72463	explicit	
469-10	72464-72466	to	
469-11	72467-72473	remove	
469-12	72474-72483	precision	
469-13	72483-72484	:	
469-14	72485-72491	SELECT	
469-15	72492-72497	upper	
469-16	72497-72498	(	
469-17	72498-72499	'	
469-18	72499-72500	a	
469-19	72500-72501	'	
469-20	72501-72502	)	
469-21	72503-72504	=	
469-22	72505-72510	upper	
469-23	72510-72511	(	
469-24	72511-72512	'	
469-25	72512-72513	A	
469-26	72513-72514	'	
469-27	72514-72515	)	
469-28	72515-72516	;	
469-29	72517-72518	?	

#Text=column?
470-1	72518-72524	column	
470-2	72524-72525	?	

#Text=----------
#Text=SELECT lower('a') = lower('A');
#Text=?
471-1	72526-72527	-	
471-2	72527-72528	-	
471-3	72528-72529	-	
471-4	72529-72530	-	
471-5	72530-72531	-	
471-6	72531-72532	-	
471-7	72532-72533	-	
471-8	72533-72534	-	
471-9	72534-72535	-	
471-10	72535-72536	-	
471-11	72537-72543	SELECT	
471-12	72544-72549	lower	
471-13	72549-72550	(	
471-14	72550-72551	'	
471-15	72551-72552	a	
471-16	72552-72553	'	
471-17	72553-72554	)	
471-18	72555-72556	=	
471-19	72557-72562	lower	
471-20	72562-72563	(	
471-21	72563-72564	'	
471-22	72564-72565	A	
471-23	72565-72566	'	
471-24	72566-72567	)	
471-25	72567-72568	;	
471-26	72569-72570	?	

#Text=column?
472-1	72570-72576	column	
472-2	72576-72577	?	

#Text=----------
#Text=Most people aren't comparing constants in sql but compare column values:
#Text=SELECT oid FROM pg_class WHERE relname = 'pg_class';
#Text=oid
#Text=------
#Text=1259
#Text=SELECT oid FROM PG_CLASS WHERE relname = 'pg_class';
#Text=oid
#Text=------
#Text=1259
#Text=SELECT oid FROM pg_class WHERE relname = 'Pg_Class';
#Text=oid
#Text=-----
#Text=SELECT oid FROM pg_class WHERE relname = 'PG_CLASS';
#Text=oid
#Text=-----
#Text=Notice that these queries use pg_class as an identifier (without single quotes) and as a value (with single quotes).
473-1	72578-72579	-	
473-2	72579-72580	-	
473-3	72580-72581	-	
473-4	72581-72582	-	
473-5	72582-72583	-	
473-6	72583-72584	-	
473-7	72584-72585	-	
473-8	72585-72586	-	
473-9	72586-72587	-	
473-10	72587-72588	-	
473-11	72589-72593	Most	
473-12	72594-72600	people	
473-13	72601-72607	aren't	
473-14	72608-72617	comparing	
473-15	72618-72627	constants	
473-16	72628-72630	in	
473-17	72631-72634	sql	
473-18	72635-72638	but	
473-19	72639-72646	compare	
473-20	72647-72653	column	
473-21	72654-72660	values	
473-22	72660-72661	:	
473-23	72662-72668	SELECT	
473-24	72669-72672	oid	
473-25	72673-72677	FROM	
473-26	72678-72686	pg_class	
473-27	72687-72692	WHERE	
473-28	72693-72700	relname	
473-29	72701-72702	=	
473-30	72703-72704	'	
473-31	72704-72712	pg_class	
473-32	72712-72713	'	
473-33	72713-72714	;	
473-34	72715-72718	oid	
473-35	72719-72720	-	
473-36	72720-72721	-	
473-37	72721-72722	-	
473-38	72722-72723	-	
473-39	72723-72724	-	
473-40	72724-72725	-	
473-41	72726-72730	1259	
473-42	72731-72737	SELECT	
473-43	72738-72741	oid	
473-44	72742-72746	FROM	
473-45	72747-72755	PG_CLASS	
473-46	72756-72761	WHERE	
473-47	72762-72769	relname	
473-48	72770-72771	=	
473-49	72772-72773	'	
473-50	72773-72781	pg_class	
473-51	72781-72782	'	
473-52	72782-72783	;	
473-53	72784-72787	oid	
473-54	72788-72789	-	
473-55	72789-72790	-	
473-56	72790-72791	-	
473-57	72791-72792	-	
473-58	72792-72793	-	
473-59	72793-72794	-	
473-60	72795-72799	1259	
473-61	72800-72806	SELECT	
473-62	72807-72810	oid	
473-63	72811-72815	FROM	
473-64	72816-72824	pg_class	
473-65	72825-72830	WHERE	
473-66	72831-72838	relname	
473-67	72839-72840	=	
473-68	72841-72842	'	
473-69	72842-72850	Pg_Class	
473-70	72850-72851	'	
473-71	72851-72852	;	
473-72	72853-72856	oid	
473-73	72857-72858	-	
473-74	72858-72859	-	
473-75	72859-72860	-	
473-76	72860-72861	-	
473-77	72861-72862	-	
473-78	72863-72869	SELECT	
473-79	72870-72873	oid	
473-80	72874-72878	FROM	
473-81	72879-72887	pg_class	
473-82	72888-72893	WHERE	
473-83	72894-72901	relname	
473-84	72902-72903	=	
473-85	72904-72905	'	
473-86	72905-72913	PG_CLASS	
473-87	72913-72914	'	
473-88	72914-72915	;	
473-89	72916-72919	oid	
473-90	72920-72921	-	
473-91	72921-72922	-	
473-92	72922-72923	-	
473-93	72923-72924	-	
473-94	72924-72925	-	
473-95	72926-72932	Notice	
473-96	72933-72937	that	
473-97	72938-72943	these	
473-98	72944-72951	queries	
473-99	72952-72955	use	
473-100	72956-72964	pg_class	
473-101	72965-72967	as	
473-102	72968-72970	an	
473-103	72971-72981	identifier	
473-104	72982-72983	(	
473-105	72983-72990	without	
473-106	72991-72997	single	
473-107	72998-73004	quotes	
473-108	73004-73005	)	
473-109	73006-73009	and	
473-110	73010-73012	as	
473-111	73013-73014	a	
473-112	73015-73020	value	
473-113	73021-73022	(	
473-114	73022-73026	with	
473-115	73027-73033	single	
473-116	73034-73040	quotes	
473-117	73040-73041	)	
473-118	73041-73042	.	

#Text=The identifier usage is case insensitive;
#Text=the value usage is case sensitive.
474-1	73043-73046	The	
474-2	73047-73057	identifier	
474-3	73058-73063	usage	
474-4	73064-73066	is	
474-5	73067-73071	case	
474-6	73072-73083	insensitive	
474-7	73083-73084	;	
474-8	73085-73088	the	
474-9	73089-73094	value	
474-10	73095-73100	usage	
474-11	73101-73103	is	
474-12	73104-73108	case	
474-13	73109-73118	sensitive	
474-14	73118-73119	.	

#Text=You
#Text=can explicitly reduce comparison precision using function calls:
#Text=SELECT oid FROM pg_class WHERE lower(relname) = lower('pg_class');
#Text=oid
#Text=------
#Text=1259
#Text=SELECT oid FROM pg_class WHERE lower(relname) = lower('Pg_Class');
#Text=oid
#Text=------
#Text=1259
#Text=SELECT oid FROM pg_class WHERE lower(relname) = lower('PG_CLASS'^);
#Text=oid
#Text=------
#Text=1259
#Text=These convert the column values and constants to lower case before comparison.
475-1	73120-73123	You	
475-2	73124-73127	can	
475-3	73128-73138	explicitly	
475-4	73139-73145	reduce	
475-5	73146-73156	comparison	
475-6	73157-73166	precision	
475-7	73167-73172	using	
475-8	73173-73181	function	
475-9	73182-73187	calls	
475-10	73187-73188	:	
475-11	73189-73195	SELECT	
475-12	73196-73199	oid	
475-13	73200-73204	FROM	
475-14	73205-73213	pg_class	
475-15	73214-73219	WHERE	
475-16	73220-73225	lower	
475-17	73225-73226	(	
475-18	73226-73233	relname	
475-19	73233-73234	)	
475-20	73235-73236	=	
475-21	73237-73242	lower	
475-22	73242-73243	(	
475-23	73243-73244	'	
475-24	73244-73252	pg_class	
475-25	73252-73253	'	
475-26	73253-73254	)	
475-27	73254-73255	;	
475-28	73256-73259	oid	
475-29	73260-73261	-	
475-30	73261-73262	-	
475-31	73262-73263	-	
475-32	73263-73264	-	
475-33	73264-73265	-	
475-34	73265-73266	-	
475-35	73267-73271	1259	
475-36	73272-73278	SELECT	
475-37	73279-73282	oid	
475-38	73283-73287	FROM	
475-39	73288-73296	pg_class	
475-40	73297-73302	WHERE	
475-41	73303-73308	lower	
475-42	73308-73309	(	
475-43	73309-73316	relname	
475-44	73316-73317	)	
475-45	73318-73319	=	
475-46	73320-73325	lower	
475-47	73325-73326	(	
475-48	73326-73327	'	
475-49	73327-73335	Pg_Class	
475-50	73335-73336	'	
475-51	73336-73337	)	
475-52	73337-73338	;	
475-53	73339-73342	oid	
475-54	73343-73344	-	
475-55	73344-73345	-	
475-56	73345-73346	-	
475-57	73346-73347	-	
475-58	73347-73348	-	
475-59	73348-73349	-	
475-60	73350-73354	1259	
475-61	73355-73361	SELECT	
475-62	73362-73365	oid	
475-63	73366-73370	FROM	
475-64	73371-73379	pg_class	
475-65	73380-73385	WHERE	
475-66	73386-73391	lower	
475-67	73391-73392	(	
475-68	73392-73399	relname	
475-69	73399-73400	)	
475-70	73401-73402	=	
475-71	73403-73408	lower	
475-72	73408-73409	(	
475-73	73409-73410	'	
475-74	73410-73418	PG_CLASS	
475-75	73418-73419	'	
475-76	73419-73420	^	
475-77	73420-73421	)	
475-78	73421-73422	;	
475-79	73423-73426	oid	
475-80	73427-73428	-	
475-81	73428-73429	-	
475-82	73429-73430	-	
475-83	73430-73431	-	
475-84	73431-73432	-	
475-85	73432-73433	-	
475-86	73434-73438	1259	
475-87	73439-73444	These	
475-88	73445-73452	convert	
475-89	73453-73456	the	
475-90	73457-73463	column	
475-91	73464-73470	values	
475-92	73471-73474	and	
475-93	73475-73484	constants	
475-94	73485-73487	to	
475-95	73488-73493	lower	
475-96	73494-73498	case	
475-97	73499-73505	before	
475-98	73506-73516	comparison	
475-99	73516-73517	.	

#Text=(Upper case could also have been used.)
476-1	73518-73519	(	
476-2	73519-73524	Upper	
476-3	73525-73529	case	
476-4	73530-73535	could	
476-5	73536-73540	also	
476-6	73541-73545	have	
476-7	73546-73550	been	
476-8	73551-73555	used	
476-9	73555-73556	.	
476-10	73556-73557	)	

#Text=Indexes are also case sensitive by default, and it obviously would be inefficient
#Text=to lower-case every index entry for comparison, so function calls on columns cannot use an ordinary column index:
#Text=EXPLAIN SELECT oid FROM pg_class WHERE relname = 'pg_class';
#Text=QUERY PLAN
#Text=-------------------------------------------------------------------------------------------
#Text=Index Scan using pg_class_relname_nsp_index on pg_class
#Text=(cost=0.27..8.29 rows=1 width=4)
#Text=Index Cond: (relname = 'pg_class'::name)
#Text=EXPLAIN SELECT oid FROM pg_class WHERE lower(relname) = lower('pg_class');
#Text=QUERY PLAN
#Text=---------------------------------------------------------
#Text=Seq Scan on pg_class
#Text=(cost=0.00..19.76 rows=2 width=4)
#Text=Filter: (lower((relname)::text) = 'pg_class'::text)
#Text=They can use expression indexes that are created to match function calls:
#Text=-- create a user table because users can't create indexes on system tables
#Text=CREATE TABLE my_pg_class AS SELECT * FROM pg_class;
#Text=-- create non-expression index
#Text=CREATE INDEX i_my_pg_class_relname ON my_pg_class (relname);
#Text=-- create expression index
#Text=CREATE INDEX i_my_pg_class_relname_lower ON my_pg_class ((lower(relname)));
#Text=-- The optimizer needs statistics
#Text=-- Doing the analyze after the expression index creation allows creation of statistics on the expression.
#Text=-- see https://momjian.us/main/blogs/pgblog/2017.html#February_20_2017
#Text=-- Autovacuum would have eventually done this automatically.
477-1	73558-73565	Indexes	
477-2	73566-73569	are	
477-3	73570-73574	also	
477-4	73575-73579	case	
477-5	73580-73589	sensitive	
477-6	73590-73592	by	
477-7	73593-73600	default	
477-8	73600-73601	,	
477-9	73602-73605	and	
477-10	73606-73608	it	
477-11	73609-73618	obviously	
477-12	73619-73624	would	
477-13	73625-73627	be	
477-14	73628-73639	inefficient	
477-15	73640-73642	to	
477-16	73643-73653	lower-case	
477-17	73654-73659	every	
477-18	73660-73665	index	
477-19	73666-73671	entry	
477-20	73672-73675	for	
477-21	73676-73686	comparison	
477-22	73686-73687	,	
477-23	73688-73690	so	
477-24	73691-73699	function	
477-25	73700-73705	calls	
477-26	73706-73708	on	
477-27	73709-73716	columns	
477-28	73717-73723	cannot	
477-29	73724-73727	use	
477-30	73728-73730	an	
477-31	73731-73739	ordinary	
477-32	73740-73746	column	
477-33	73747-73752	index	
477-34	73752-73753	:	
477-35	73754-73761	EXPLAIN	
477-36	73762-73768	SELECT	
477-37	73769-73772	oid	
477-38	73773-73777	FROM	
477-39	73778-73786	pg_class	
477-40	73787-73792	WHERE	
477-41	73793-73800	relname	
477-42	73801-73802	=	
477-43	73803-73804	'	
477-44	73804-73812	pg_class	
477-45	73812-73813	'	
477-46	73813-73814	;	
477-47	73815-73820	QUERY	
477-48	73821-73825	PLAN	
477-49	73826-73827	-	
477-50	73827-73828	-	
477-51	73828-73829	-	
477-52	73829-73830	-	
477-53	73830-73831	-	
477-54	73831-73832	-	
477-55	73832-73833	-	
477-56	73833-73834	-	
477-57	73834-73835	-	
477-58	73835-73836	-	
477-59	73836-73837	-	
477-60	73837-73838	-	
477-61	73838-73839	-	
477-62	73839-73840	-	
477-63	73840-73841	-	
477-64	73841-73842	-	
477-65	73842-73843	-	
477-66	73843-73844	-	
477-67	73844-73845	-	
477-68	73845-73846	-	
477-69	73846-73847	-	
477-70	73847-73848	-	
477-71	73848-73849	-	
477-72	73849-73850	-	
477-73	73850-73851	-	
477-74	73851-73852	-	
477-75	73852-73853	-	
477-76	73853-73854	-	
477-77	73854-73855	-	
477-78	73855-73856	-	
477-79	73856-73857	-	
477-80	73857-73858	-	
477-81	73858-73859	-	
477-82	73859-73860	-	
477-83	73860-73861	-	
477-84	73861-73862	-	
477-85	73862-73863	-	
477-86	73863-73864	-	
477-87	73864-73865	-	
477-88	73865-73866	-	
477-89	73866-73867	-	
477-90	73867-73868	-	
477-91	73868-73869	-	
477-92	73869-73870	-	
477-93	73870-73871	-	
477-94	73871-73872	-	
477-95	73872-73873	-	
477-96	73873-73874	-	
477-97	73874-73875	-	
477-98	73875-73876	-	
477-99	73876-73877	-	
477-100	73877-73878	-	
477-101	73878-73879	-	
477-102	73879-73880	-	
477-103	73880-73881	-	
477-104	73881-73882	-	
477-105	73882-73883	-	
477-106	73883-73884	-	
477-107	73884-73885	-	
477-108	73885-73886	-	
477-109	73886-73887	-	
477-110	73887-73888	-	
477-111	73888-73889	-	
477-112	73889-73890	-	
477-113	73890-73891	-	
477-114	73891-73892	-	
477-115	73892-73893	-	
477-116	73893-73894	-	
477-117	73894-73895	-	
477-118	73895-73896	-	
477-119	73896-73897	-	
477-120	73897-73898	-	
477-121	73898-73899	-	
477-122	73899-73900	-	
477-123	73900-73901	-	
477-124	73901-73902	-	
477-125	73902-73903	-	
477-126	73903-73904	-	
477-127	73904-73905	-	
477-128	73905-73906	-	
477-129	73906-73907	-	
477-130	73907-73908	-	
477-131	73908-73909	-	
477-132	73909-73910	-	
477-133	73910-73911	-	
477-134	73911-73912	-	
477-135	73912-73913	-	
477-136	73913-73914	-	
477-137	73914-73915	-	
477-138	73915-73916	-	
477-139	73916-73917	-	
477-140	73918-73923	Index	
477-141	73924-73928	Scan	
477-142	73929-73934	using	
477-143	73935-73961	pg_class_relname_nsp_index	
477-144	73962-73964	on	
477-145	73965-73973	pg_class	
477-146	73974-73975	(	
477-147	73975-73979	cost	
477-148	73979-73980	=	
477-149	73980-73984	0.27	
477-150	73984-73985	.	
477-151	73985-73990	.8.29	
477-152	73991-73995	rows	
477-153	73995-73996	=	
477-154	73996-73997	1	
477-155	73998-74003	width	
477-156	74003-74004	=	
477-157	74004-74005	4	
477-158	74005-74006	)	
477-159	74007-74012	Index	
477-160	74013-74017	Cond	
477-161	74017-74018	:	
477-162	74019-74020	(	
477-163	74020-74027	relname	
477-164	74028-74029	=	
477-165	74030-74031	'	
477-166	74031-74039	pg_class	
477-167	74039-74040	'	
477-168	74040-74041	:	
477-169	74041-74042	:	
477-170	74042-74046	name	
477-171	74046-74047	)	
477-172	74048-74055	EXPLAIN	
477-173	74056-74062	SELECT	
477-174	74063-74066	oid	
477-175	74067-74071	FROM	
477-176	74072-74080	pg_class	
477-177	74081-74086	WHERE	
477-178	74087-74092	lower	
477-179	74092-74093	(	
477-180	74093-74100	relname	
477-181	74100-74101	)	
477-182	74102-74103	=	
477-183	74104-74109	lower	
477-184	74109-74110	(	
477-185	74110-74111	'	
477-186	74111-74119	pg_class	
477-187	74119-74120	'	
477-188	74120-74121	)	
477-189	74121-74122	;	
477-190	74123-74128	QUERY	
477-191	74129-74133	PLAN	
477-192	74134-74135	-	
477-193	74135-74136	-	
477-194	74136-74137	-	
477-195	74137-74138	-	
477-196	74138-74139	-	
477-197	74139-74140	-	
477-198	74140-74141	-	
477-199	74141-74142	-	
477-200	74142-74143	-	
477-201	74143-74144	-	
477-202	74144-74145	-	
477-203	74145-74146	-	
477-204	74146-74147	-	
477-205	74147-74148	-	
477-206	74148-74149	-	
477-207	74149-74150	-	
477-208	74150-74151	-	
477-209	74151-74152	-	
477-210	74152-74153	-	
477-211	74153-74154	-	
477-212	74154-74155	-	
477-213	74155-74156	-	
477-214	74156-74157	-	
477-215	74157-74158	-	
477-216	74158-74159	-	
477-217	74159-74160	-	
477-218	74160-74161	-	
477-219	74161-74162	-	
477-220	74162-74163	-	
477-221	74163-74164	-	
477-222	74164-74165	-	
477-223	74165-74166	-	
477-224	74166-74167	-	
477-225	74167-74168	-	
477-226	74168-74169	-	
477-227	74169-74170	-	
477-228	74170-74171	-	
477-229	74171-74172	-	
477-230	74172-74173	-	
477-231	74173-74174	-	
477-232	74174-74175	-	
477-233	74175-74176	-	
477-234	74176-74177	-	
477-235	74177-74178	-	
477-236	74178-74179	-	
477-237	74179-74180	-	
477-238	74180-74181	-	
477-239	74181-74182	-	
477-240	74182-74183	-	
477-241	74183-74184	-	
477-242	74184-74185	-	
477-243	74185-74186	-	
477-244	74186-74187	-	
477-245	74187-74188	-	
477-246	74188-74189	-	
477-247	74189-74190	-	
477-248	74190-74191	-	
477-249	74192-74195	Seq	
477-250	74196-74200	Scan	
477-251	74201-74203	on	
477-252	74204-74212	pg_class	
477-253	74213-74214	(	
477-254	74214-74218	cost	
477-255	74218-74219	=	
477-256	74219-74223	0.00	
477-257	74223-74224	.	
477-258	74224-74230	.19.76	
477-259	74231-74235	rows	
477-260	74235-74236	=	
477-261	74236-74237	2	
477-262	74238-74243	width	
477-263	74243-74244	=	
477-264	74244-74245	4	
477-265	74245-74246	)	
477-266	74247-74253	Filter	
477-267	74253-74254	:	
477-268	74255-74256	(	
477-269	74256-74261	lower	
477-270	74261-74262	(	
477-271	74262-74263	(	
477-272	74263-74270	relname	
477-273	74270-74271	)	
477-274	74271-74272	:	
477-275	74272-74273	:	
477-276	74273-74277	text	
477-277	74277-74278	)	
477-278	74279-74280	=	
477-279	74281-74282	'	
477-280	74282-74290	pg_class	
477-281	74290-74291	'	
477-282	74291-74292	:	
477-283	74292-74293	:	
477-284	74293-74297	text	
477-285	74297-74298	)	
477-286	74299-74303	They	
477-287	74304-74307	can	
477-288	74308-74311	use	
477-289	74312-74322	expression	
477-290	74323-74330	indexes	
477-291	74331-74335	that	
477-292	74336-74339	are	
477-293	74340-74347	created	
477-294	74348-74350	to	
477-295	74351-74356	match	
477-296	74357-74365	function	
477-297	74366-74371	calls	
477-298	74371-74372	:	
477-299	74373-74374	-	
477-300	74374-74375	-	
477-301	74376-74382	create	
477-302	74383-74384	a	
477-303	74385-74389	user	
477-304	74390-74395	table	
477-305	74396-74403	because	
477-306	74404-74409	users	
477-307	74410-74415	can't	
477-308	74416-74422	create	
477-309	74423-74430	indexes	
477-310	74431-74433	on	
477-311	74434-74440	system	
477-312	74441-74447	tables	
477-313	74448-74454	CREATE	
477-314	74455-74460	TABLE	
477-315	74461-74472	my_pg_class	
477-316	74473-74475	AS	
477-317	74476-74482	SELECT	
477-318	74483-74484	*	
477-319	74485-74489	FROM	
477-320	74490-74498	pg_class	
477-321	74498-74499	;	
477-322	74500-74501	-	
477-323	74501-74502	-	
477-324	74503-74509	create	
477-325	74510-74524	non-expression	
477-326	74525-74530	index	
477-327	74531-74537	CREATE	
477-328	74538-74543	INDEX	
477-329	74544-74565	i_my_pg_class_relname	
477-330	74566-74568	ON	
477-331	74569-74580	my_pg_class	
477-332	74581-74582	(	
477-333	74582-74589	relname	
477-334	74589-74590	)	
477-335	74590-74591	;	
477-336	74592-74593	-	
477-337	74593-74594	-	
477-338	74595-74601	create	
477-339	74602-74612	expression	
477-340	74613-74618	index	
477-341	74619-74625	CREATE	
477-342	74626-74631	INDEX	
477-343	74632-74659	i_my_pg_class_relname_lower	
477-344	74660-74662	ON	
477-345	74663-74674	my_pg_class	
477-346	74675-74676	(	
477-347	74676-74677	(	
477-348	74677-74682	lower	
477-349	74682-74683	(	
477-350	74683-74690	relname	
477-351	74690-74691	)	
477-352	74691-74692	)	
477-353	74692-74693	)	
477-354	74693-74694	;	
477-355	74695-74696	-	
477-356	74696-74697	-	
477-357	74698-74701	The	
477-358	74702-74711	optimizer	
477-359	74712-74717	needs	
477-360	74718-74728	statistics	
477-361	74729-74730	-	
477-362	74730-74731	-	
477-363	74732-74737	Doing	
477-364	74738-74741	the	
477-365	74742-74749	analyze	
477-366	74750-74755	after	
477-367	74756-74759	the	
477-368	74760-74770	expression	
477-369	74771-74776	index	
477-370	74777-74785	creation	
477-371	74786-74792	allows	
477-372	74793-74801	creation	
477-373	74802-74804	of	
477-374	74805-74815	statistics	
477-375	74816-74818	on	
477-376	74819-74822	the	
477-377	74823-74833	expression	
477-378	74833-74834	.	
477-379	74835-74836	-	
477-380	74836-74837	-	
477-381	74838-74841	see	
477-382	74842-74847	https	
477-383	74847-74848	:	
477-384	74848-74849	/	
477-385	74849-74850	/	
477-386	74850-74860	momjian.us	
477-387	74860-74861	/	
477-388	74861-74865	main	
477-389	74865-74866	/	
477-390	74866-74871	blogs	
477-391	74871-74872	/	
477-392	74872-74878	pgblog	
477-393	74878-74879	/	
477-394	74879-74883	2017	
477-395	74883-74884	.	
477-396	74884-74888	html	
477-397	74888-74889	#	
477-398	74889-74897	February	
477-399	74897-74898	_	
477-400	74898-74900	20	
477-401	74900-74901	_	
477-402	74901-74905	2017	
477-403	74906-74907	-	
477-404	74907-74908	-	
477-405	74909-74919	Autovacuum	
477-406	74920-74925	would	
477-407	74926-74930	have	
477-408	74931-74941	eventually	
477-409	74942-74946	done	
477-410	74947-74951	this	
477-411	74952-74965	automatically	
477-412	74965-74966	.	

#Text=ANALYZE my_pg_class;
#Text=-- use non-expression index
#Text=EXPLAIN SELECT oid FROM my_pg_class WHERE relname = 'pg_class';
#Text=QUERY PLAN
#Text=-----------------------------------------------------------------------------------------
#Text=Index Scan using i_my_pg_class_relname on my_pg_class
#Text=(cost=0.27..8.29 rows=1 width=4)
#Text=Index Cond: (relname = 'pg_class'::name)
#Text=-- use expression index
#Text=EXPLAIN SELECT oid FROM my_pg_class WHERE lower(relname) = lower('pg_class');
#Text=QUERY PLAN
#Text=-----------------------------------------------------------------------------------------------
#Text=Index Scan using i_my_pg_class_relname_lower on my_pg_class
#Text=(cost=0.27..8.29 rows=1 width=4)
#Text=Index Cond: (lower((relname)::text) = 'pg_class'::text)
#Text=The citext extension allows the creation of columns whose values are automatically compared in a case-insensitive manner:
#Text=CREATE EXTENSION citext;
#Text=-- 'x' column added so the row has a typical length
#Text=CREATE TABLE my_pg_class2 AS SELECT oid, relname::citext, repeat('x', 256) FROM pg_class;
#Text=CREATE INDEX i_my_pg_class_relname2 ON my_pg_class2 (relname);
#Text=ANALYZE my_pg_class2;
#Text=\\d my_pg_class2
#Text=Table "public.my_pg_class2"
#Text=Column
#Text=Type
#Text=| Collation | Nullable | Default
#Text=---------+--------+-----------+----------+---------
#Text=oid
#Text=| oid
#Text=relname | citext | C
#Text=repeat
#Text=| text
#Text=Indexes:
#Text="i_my_pg_class_relname2" btree (relname)
#Text=SELECT oid FROM my_pg_class2 WHERE relname = 'pg_class';
#Text=oid
#Text=------
#Text=1259
#Text=SELECT oid FROM my_pg_class2 WHERE relname = 'PG_CLASS';
#Text=oid
#Text=------
#Text=1259
#Text=EXPLAIN SELECT oid FROM my_pg_class2 WHERE relname = 'pg_class';
#Text=QUERY PLAN
#Text=-------------------------------------------------------------------------------------------
#Text=Index Scan using i_my_pg_class_relname2 on my_pg_class2
#Text=(cost=0.27..8.29 rows=1 width=4)
#Text=Index Cond: (relname = 'pg_class'::citext)
#Text=EXPLAIN SELECT oid FROM my_pg_class2 WHERE relname = 'PG_CLASS';
#Text=QUERY PLAN
#Text=-------------------------------------------------------------------------------------------
#Text=Index Scan using i_my_pg_class_relname2 on my_pg_class2
#Text=(cost=0.27..8.29 rows=1 width=4)
#Text=Index Cond: (relname = 'PG_CLASS'::citext)
#Text=There are more facilities available to further reduce precision:
#Text=unaccent
#Text=fuzzystrmatch
#Text=pg_trgm with similarity
#Text=full text search with stemming
#Text=If Postgres 12 or later is compiled with the icu library support (view the system table column pg_collation.collprovider to check), you can use
#Text=nondeterministic collations that are
#Text=case and accent-insensitive.
478-1	74967-74974	ANALYZE	
478-2	74975-74986	my_pg_class	
478-3	74986-74987	;	
478-4	74988-74989	-	
478-5	74989-74990	-	
478-6	74991-74994	use	
478-7	74995-75009	non-expression	
478-8	75010-75015	index	
478-9	75016-75023	EXPLAIN	
478-10	75024-75030	SELECT	
478-11	75031-75034	oid	
478-12	75035-75039	FROM	
478-13	75040-75051	my_pg_class	
478-14	75052-75057	WHERE	
478-15	75058-75065	relname	
478-16	75066-75067	=	
478-17	75068-75069	'	
478-18	75069-75077	pg_class	
478-19	75077-75078	'	
478-20	75078-75079	;	
478-21	75080-75085	QUERY	
478-22	75086-75090	PLAN	
478-23	75091-75092	-	
478-24	75092-75093	-	
478-25	75093-75094	-	
478-26	75094-75095	-	
478-27	75095-75096	-	
478-28	75096-75097	-	
478-29	75097-75098	-	
478-30	75098-75099	-	
478-31	75099-75100	-	
478-32	75100-75101	-	
478-33	75101-75102	-	
478-34	75102-75103	-	
478-35	75103-75104	-	
478-36	75104-75105	-	
478-37	75105-75106	-	
478-38	75106-75107	-	
478-39	75107-75108	-	
478-40	75108-75109	-	
478-41	75109-75110	-	
478-42	75110-75111	-	
478-43	75111-75112	-	
478-44	75112-75113	-	
478-45	75113-75114	-	
478-46	75114-75115	-	
478-47	75115-75116	-	
478-48	75116-75117	-	
478-49	75117-75118	-	
478-50	75118-75119	-	
478-51	75119-75120	-	
478-52	75120-75121	-	
478-53	75121-75122	-	
478-54	75122-75123	-	
478-55	75123-75124	-	
478-56	75124-75125	-	
478-57	75125-75126	-	
478-58	75126-75127	-	
478-59	75127-75128	-	
478-60	75128-75129	-	
478-61	75129-75130	-	
478-62	75130-75131	-	
478-63	75131-75132	-	
478-64	75132-75133	-	
478-65	75133-75134	-	
478-66	75134-75135	-	
478-67	75135-75136	-	
478-68	75136-75137	-	
478-69	75137-75138	-	
478-70	75138-75139	-	
478-71	75139-75140	-	
478-72	75140-75141	-	
478-73	75141-75142	-	
478-74	75142-75143	-	
478-75	75143-75144	-	
478-76	75144-75145	-	
478-77	75145-75146	-	
478-78	75146-75147	-	
478-79	75147-75148	-	
478-80	75148-75149	-	
478-81	75149-75150	-	
478-82	75150-75151	-	
478-83	75151-75152	-	
478-84	75152-75153	-	
478-85	75153-75154	-	
478-86	75154-75155	-	
478-87	75155-75156	-	
478-88	75156-75157	-	
478-89	75157-75158	-	
478-90	75158-75159	-	
478-91	75159-75160	-	
478-92	75160-75161	-	
478-93	75161-75162	-	
478-94	75162-75163	-	
478-95	75163-75164	-	
478-96	75164-75165	-	
478-97	75165-75166	-	
478-98	75166-75167	-	
478-99	75167-75168	-	
478-100	75168-75169	-	
478-101	75169-75170	-	
478-102	75170-75171	-	
478-103	75171-75172	-	
478-104	75172-75173	-	
478-105	75173-75174	-	
478-106	75174-75175	-	
478-107	75175-75176	-	
478-108	75176-75177	-	
478-109	75177-75178	-	
478-110	75178-75179	-	
478-111	75179-75180	-	
478-112	75181-75186	Index	
478-113	75187-75191	Scan	
478-114	75192-75197	using	
478-115	75198-75219	i_my_pg_class_relname	
478-116	75220-75222	on	
478-117	75223-75234	my_pg_class	
478-118	75235-75236	(	
478-119	75236-75240	cost	
478-120	75240-75241	=	
478-121	75241-75245	0.27	
478-122	75245-75246	.	
478-123	75246-75251	.8.29	
478-124	75252-75256	rows	
478-125	75256-75257	=	
478-126	75257-75258	1	
478-127	75259-75264	width	
478-128	75264-75265	=	
478-129	75265-75266	4	
478-130	75266-75267	)	
478-131	75268-75273	Index	
478-132	75274-75278	Cond	
478-133	75278-75279	:	
478-134	75280-75281	(	
478-135	75281-75288	relname	
478-136	75289-75290	=	
478-137	75291-75292	'	
478-138	75292-75300	pg_class	
478-139	75300-75301	'	
478-140	75301-75302	:	
478-141	75302-75303	:	
478-142	75303-75307	name	
478-143	75307-75308	)	
478-144	75309-75310	-	
478-145	75310-75311	-	
478-146	75312-75315	use	
478-147	75316-75326	expression	
478-148	75327-75332	index	
478-149	75333-75340	EXPLAIN	
478-150	75341-75347	SELECT	
478-151	75348-75351	oid	
478-152	75352-75356	FROM	
478-153	75357-75368	my_pg_class	
478-154	75369-75374	WHERE	
478-155	75375-75380	lower	
478-156	75380-75381	(	
478-157	75381-75388	relname	
478-158	75388-75389	)	
478-159	75390-75391	=	
478-160	75392-75397	lower	
478-161	75397-75398	(	
478-162	75398-75399	'	
478-163	75399-75407	pg_class	
478-164	75407-75408	'	
478-165	75408-75409	)	
478-166	75409-75410	;	
478-167	75411-75416	QUERY	
478-168	75417-75421	PLAN	
478-169	75422-75423	-	
478-170	75423-75424	-	
478-171	75424-75425	-	
478-172	75425-75426	-	
478-173	75426-75427	-	
478-174	75427-75428	-	
478-175	75428-75429	-	
478-176	75429-75430	-	
478-177	75430-75431	-	
478-178	75431-75432	-	
478-179	75432-75433	-	
478-180	75433-75434	-	
478-181	75434-75435	-	
478-182	75435-75436	-	
478-183	75436-75437	-	
478-184	75437-75438	-	
478-185	75438-75439	-	
478-186	75439-75440	-	
478-187	75440-75441	-	
478-188	75441-75442	-	
478-189	75442-75443	-	
478-190	75443-75444	-	
478-191	75444-75445	-	
478-192	75445-75446	-	
478-193	75446-75447	-	
478-194	75447-75448	-	
478-195	75448-75449	-	
478-196	75449-75450	-	
478-197	75450-75451	-	
478-198	75451-75452	-	
478-199	75452-75453	-	
478-200	75453-75454	-	
478-201	75454-75455	-	
478-202	75455-75456	-	
478-203	75456-75457	-	
478-204	75457-75458	-	
478-205	75458-75459	-	
478-206	75459-75460	-	
478-207	75460-75461	-	
478-208	75461-75462	-	
478-209	75462-75463	-	
478-210	75463-75464	-	
478-211	75464-75465	-	
478-212	75465-75466	-	
478-213	75466-75467	-	
478-214	75467-75468	-	
478-215	75468-75469	-	
478-216	75469-75470	-	
478-217	75470-75471	-	
478-218	75471-75472	-	
478-219	75472-75473	-	
478-220	75473-75474	-	
478-221	75474-75475	-	
478-222	75475-75476	-	
478-223	75476-75477	-	
478-224	75477-75478	-	
478-225	75478-75479	-	
478-226	75479-75480	-	
478-227	75480-75481	-	
478-228	75481-75482	-	
478-229	75482-75483	-	
478-230	75483-75484	-	
478-231	75484-75485	-	
478-232	75485-75486	-	
478-233	75486-75487	-	
478-234	75487-75488	-	
478-235	75488-75489	-	
478-236	75489-75490	-	
478-237	75490-75491	-	
478-238	75491-75492	-	
478-239	75492-75493	-	
478-240	75493-75494	-	
478-241	75494-75495	-	
478-242	75495-75496	-	
478-243	75496-75497	-	
478-244	75497-75498	-	
478-245	75498-75499	-	
478-246	75499-75500	-	
478-247	75500-75501	-	
478-248	75501-75502	-	
478-249	75502-75503	-	
478-250	75503-75504	-	
478-251	75504-75505	-	
478-252	75505-75506	-	
478-253	75506-75507	-	
478-254	75507-75508	-	
478-255	75508-75509	-	
478-256	75509-75510	-	
478-257	75510-75511	-	
478-258	75511-75512	-	
478-259	75512-75513	-	
478-260	75513-75514	-	
478-261	75514-75515	-	
478-262	75515-75516	-	
478-263	75516-75517	-	
478-264	75518-75523	Index	
478-265	75524-75528	Scan	
478-266	75529-75534	using	
478-267	75535-75562	i_my_pg_class_relname_lower	
478-268	75563-75565	on	
478-269	75566-75577	my_pg_class	
478-270	75578-75579	(	
478-271	75579-75583	cost	
478-272	75583-75584	=	
478-273	75584-75588	0.27	
478-274	75588-75589	.	
478-275	75589-75594	.8.29	
478-276	75595-75599	rows	
478-277	75599-75600	=	
478-278	75600-75601	1	
478-279	75602-75607	width	
478-280	75607-75608	=	
478-281	75608-75609	4	
478-282	75609-75610	)	
478-283	75611-75616	Index	
478-284	75617-75621	Cond	
478-285	75621-75622	:	
478-286	75623-75624	(	
478-287	75624-75629	lower	
478-288	75629-75630	(	
478-289	75630-75631	(	
478-290	75631-75638	relname	
478-291	75638-75639	)	
478-292	75639-75640	:	
478-293	75640-75641	:	
478-294	75641-75645	text	
478-295	75645-75646	)	
478-296	75647-75648	=	
478-297	75649-75650	'	
478-298	75650-75658	pg_class	
478-299	75658-75659	'	
478-300	75659-75660	:	
478-301	75660-75661	:	
478-302	75661-75665	text	
478-303	75665-75666	)	
478-304	75667-75670	The	
478-305	75671-75677	citext	
478-306	75678-75687	extension	
478-307	75688-75694	allows	
478-308	75695-75698	the	
478-309	75699-75707	creation	
478-310	75708-75710	of	
478-311	75711-75718	columns	
478-312	75719-75724	whose	
478-313	75725-75731	values	
478-314	75732-75735	are	
478-315	75736-75749	automatically	
478-316	75750-75758	compared	
478-317	75759-75761	in	
478-318	75762-75763	a	
478-319	75764-75780	case-insensitive	
478-320	75781-75787	manner	
478-321	75787-75788	:	
478-322	75789-75795	CREATE	
478-323	75796-75805	EXTENSION	
478-324	75806-75812	citext	
478-325	75812-75813	;	
478-326	75814-75815	-	
478-327	75815-75816	-	
478-328	75817-75818	'	
478-329	75818-75819	x	
478-330	75819-75820	'	
478-331	75821-75827	column	
478-332	75828-75833	added	
478-333	75834-75836	so	
478-334	75837-75840	the	
478-335	75841-75844	row	
478-336	75845-75848	has	
478-337	75849-75850	a	
478-338	75851-75858	typical	
478-339	75859-75865	length	
478-340	75866-75872	CREATE	
478-341	75873-75878	TABLE	
478-342	75879-75891	my_pg_class2	
478-343	75892-75894	AS	
478-344	75895-75901	SELECT	
478-345	75902-75905	oid	
478-346	75905-75906	,	
478-347	75907-75914	relname	
478-348	75914-75915	:	
478-349	75915-75916	:	
478-350	75916-75922	citext	
478-351	75922-75923	,	
478-352	75924-75930	repeat	
478-353	75930-75931	(	
478-354	75931-75932	'	
478-355	75932-75933	x	
478-356	75933-75934	'	
478-357	75934-75935	,	
478-358	75936-75939	256	
478-359	75939-75940	)	
478-360	75941-75945	FROM	
478-361	75946-75954	pg_class	
478-362	75954-75955	;	
478-363	75956-75962	CREATE	
478-364	75963-75968	INDEX	
478-365	75969-75991	i_my_pg_class_relname2	
478-366	75992-75994	ON	
478-367	75995-76007	my_pg_class2	
478-368	76008-76009	(	
478-369	76009-76016	relname	
478-370	76016-76017	)	
478-371	76017-76018	;	
478-372	76019-76026	ANALYZE	
478-373	76027-76039	my_pg_class2	
478-374	76039-76040	;	
478-375	76041-76042	\	
478-376	76042-76043	d	
478-377	76044-76056	my_pg_class2	
478-378	76057-76062	Table	
478-379	76063-76064	"	
478-380	76064-76083	public.my_pg_class2	
478-381	76083-76084	"	
478-382	76085-76091	Column	
478-383	76092-76096	Type	
478-384	76097-76098	|	
478-385	76099-76108	Collation	
478-386	76109-76110	|	
478-387	76111-76119	Nullable	
478-388	76120-76121	|	
478-389	76122-76129	Default	
478-390	76130-76131	-	
478-391	76131-76132	-	
478-392	76132-76133	-	
478-393	76133-76134	-	
478-394	76134-76135	-	
478-395	76135-76136	-	
478-396	76136-76137	-	
478-397	76137-76138	-	
478-398	76138-76139	-	
478-399	76139-76140	+	
478-400	76140-76141	-	
478-401	76141-76142	-	
478-402	76142-76143	-	
478-403	76143-76144	-	
478-404	76144-76145	-	
478-405	76145-76146	-	
478-406	76146-76147	-	
478-407	76147-76148	-	
478-408	76148-76149	+	
478-409	76149-76150	-	
478-410	76150-76151	-	
478-411	76151-76152	-	
478-412	76152-76153	-	
478-413	76153-76154	-	
478-414	76154-76155	-	
478-415	76155-76156	-	
478-416	76156-76157	-	
478-417	76157-76158	-	
478-418	76158-76159	-	
478-419	76159-76160	-	
478-420	76160-76161	+	
478-421	76161-76162	-	
478-422	76162-76163	-	
478-423	76163-76164	-	
478-424	76164-76165	-	
478-425	76165-76166	-	
478-426	76166-76167	-	
478-427	76167-76168	-	
478-428	76168-76169	-	
478-429	76169-76170	-	
478-430	76170-76171	-	
478-431	76171-76172	+	
478-432	76172-76173	-	
478-433	76173-76174	-	
478-434	76174-76175	-	
478-435	76175-76176	-	
478-436	76176-76177	-	
478-437	76177-76178	-	
478-438	76178-76179	-	
478-439	76179-76180	-	
478-440	76180-76181	-	
478-441	76182-76185	oid	
478-442	76186-76187	|	
478-443	76188-76191	oid	
478-444	76192-76199	relname	
478-445	76200-76201	|	
478-446	76202-76208	citext	
478-447	76209-76210	|	
478-448	76211-76212	C	
478-449	76213-76219	repeat	
478-450	76220-76221	|	
478-451	76222-76226	text	
478-452	76227-76234	Indexes	
478-453	76234-76235	:	
478-454	76236-76237	"	
478-455	76237-76259	i_my_pg_class_relname2	
478-456	76259-76260	"	
478-457	76261-76266	btree	
478-458	76267-76268	(	
478-459	76268-76275	relname	
478-460	76275-76276	)	
478-461	76277-76283	SELECT	
478-462	76284-76287	oid	
478-463	76288-76292	FROM	
478-464	76293-76305	my_pg_class2	
478-465	76306-76311	WHERE	
478-466	76312-76319	relname	
478-467	76320-76321	=	
478-468	76322-76323	'	
478-469	76323-76331	pg_class	
478-470	76331-76332	'	
478-471	76332-76333	;	
478-472	76334-76337	oid	
478-473	76338-76339	-	
478-474	76339-76340	-	
478-475	76340-76341	-	
478-476	76341-76342	-	
478-477	76342-76343	-	
478-478	76343-76344	-	
478-479	76345-76349	1259	
478-480	76350-76356	SELECT	
478-481	76357-76360	oid	
478-482	76361-76365	FROM	
478-483	76366-76378	my_pg_class2	
478-484	76379-76384	WHERE	
478-485	76385-76392	relname	
478-486	76393-76394	=	
478-487	76395-76396	'	
478-488	76396-76404	PG_CLASS	
478-489	76404-76405	'	
478-490	76405-76406	;	
478-491	76407-76410	oid	
478-492	76411-76412	-	
478-493	76412-76413	-	
478-494	76413-76414	-	
478-495	76414-76415	-	
478-496	76415-76416	-	
478-497	76416-76417	-	
478-498	76418-76422	1259	
478-499	76423-76430	EXPLAIN	
478-500	76431-76437	SELECT	
478-501	76438-76441	oid	
478-502	76442-76446	FROM	
478-503	76447-76459	my_pg_class2	
478-504	76460-76465	WHERE	
478-505	76466-76473	relname	
478-506	76474-76475	=	
478-507	76476-76477	'	
478-508	76477-76485	pg_class	
478-509	76485-76486	'	
478-510	76486-76487	;	
478-511	76488-76493	QUERY	
478-512	76494-76498	PLAN	
478-513	76499-76500	-	
478-514	76500-76501	-	
478-515	76501-76502	-	
478-516	76502-76503	-	
478-517	76503-76504	-	
478-518	76504-76505	-	
478-519	76505-76506	-	
478-520	76506-76507	-	
478-521	76507-76508	-	
478-522	76508-76509	-	
478-523	76509-76510	-	
478-524	76510-76511	-	
478-525	76511-76512	-	
478-526	76512-76513	-	
478-527	76513-76514	-	
478-528	76514-76515	-	
478-529	76515-76516	-	
478-530	76516-76517	-	
478-531	76517-76518	-	
478-532	76518-76519	-	
478-533	76519-76520	-	
478-534	76520-76521	-	
478-535	76521-76522	-	
478-536	76522-76523	-	
478-537	76523-76524	-	
478-538	76524-76525	-	
478-539	76525-76526	-	
478-540	76526-76527	-	
478-541	76527-76528	-	
478-542	76528-76529	-	
478-543	76529-76530	-	
478-544	76530-76531	-	
478-545	76531-76532	-	
478-546	76532-76533	-	
478-547	76533-76534	-	
478-548	76534-76535	-	
478-549	76535-76536	-	
478-550	76536-76537	-	
478-551	76537-76538	-	
478-552	76538-76539	-	
478-553	76539-76540	-	
478-554	76540-76541	-	
478-555	76541-76542	-	
478-556	76542-76543	-	
478-557	76543-76544	-	
478-558	76544-76545	-	
478-559	76545-76546	-	
478-560	76546-76547	-	
478-561	76547-76548	-	
478-562	76548-76549	-	
478-563	76549-76550	-	
478-564	76550-76551	-	
478-565	76551-76552	-	
478-566	76552-76553	-	
478-567	76553-76554	-	
478-568	76554-76555	-	
478-569	76555-76556	-	
478-570	76556-76557	-	
478-571	76557-76558	-	
478-572	76558-76559	-	
478-573	76559-76560	-	
478-574	76560-76561	-	
478-575	76561-76562	-	
478-576	76562-76563	-	
478-577	76563-76564	-	
478-578	76564-76565	-	
478-579	76565-76566	-	
478-580	76566-76567	-	
478-581	76567-76568	-	
478-582	76568-76569	-	
478-583	76569-76570	-	
478-584	76570-76571	-	
478-585	76571-76572	-	
478-586	76572-76573	-	
478-587	76573-76574	-	
478-588	76574-76575	-	
478-589	76575-76576	-	
478-590	76576-76577	-	
478-591	76577-76578	-	
478-592	76578-76579	-	
478-593	76579-76580	-	
478-594	76580-76581	-	
478-595	76581-76582	-	
478-596	76582-76583	-	
478-597	76583-76584	-	
478-598	76584-76585	-	
478-599	76585-76586	-	
478-600	76586-76587	-	
478-601	76587-76588	-	
478-602	76588-76589	-	
478-603	76589-76590	-	
478-604	76591-76596	Index	
478-605	76597-76601	Scan	
478-606	76602-76607	using	
478-607	76608-76630	i_my_pg_class_relname2	
478-608	76631-76633	on	
478-609	76634-76646	my_pg_class2	
478-610	76647-76648	(	
478-611	76648-76652	cost	
478-612	76652-76653	=	
478-613	76653-76657	0.27	
478-614	76657-76658	.	
478-615	76658-76663	.8.29	
478-616	76664-76668	rows	
478-617	76668-76669	=	
478-618	76669-76670	1	
478-619	76671-76676	width	
478-620	76676-76677	=	
478-621	76677-76678	4	
478-622	76678-76679	)	
478-623	76680-76685	Index	
478-624	76686-76690	Cond	
478-625	76690-76691	:	
478-626	76692-76693	(	
478-627	76693-76700	relname	
478-628	76701-76702	=	
478-629	76703-76704	'	
478-630	76704-76712	pg_class	
478-631	76712-76713	'	
478-632	76713-76714	:	
478-633	76714-76715	:	
478-634	76715-76721	citext	
478-635	76721-76722	)	
478-636	76723-76730	EXPLAIN	
478-637	76731-76737	SELECT	
478-638	76738-76741	oid	
478-639	76742-76746	FROM	
478-640	76747-76759	my_pg_class2	
478-641	76760-76765	WHERE	
478-642	76766-76773	relname	
478-643	76774-76775	=	
478-644	76776-76777	'	
478-645	76777-76785	PG_CLASS	
478-646	76785-76786	'	
478-647	76786-76787	;	
478-648	76788-76793	QUERY	
478-649	76794-76798	PLAN	
478-650	76799-76800	-	
478-651	76800-76801	-	
478-652	76801-76802	-	
478-653	76802-76803	-	
478-654	76803-76804	-	
478-655	76804-76805	-	
478-656	76805-76806	-	
478-657	76806-76807	-	
478-658	76807-76808	-	
478-659	76808-76809	-	
478-660	76809-76810	-	
478-661	76810-76811	-	
478-662	76811-76812	-	
478-663	76812-76813	-	
478-664	76813-76814	-	
478-665	76814-76815	-	
478-666	76815-76816	-	
478-667	76816-76817	-	
478-668	76817-76818	-	
478-669	76818-76819	-	
478-670	76819-76820	-	
478-671	76820-76821	-	
478-672	76821-76822	-	
478-673	76822-76823	-	
478-674	76823-76824	-	
478-675	76824-76825	-	
478-676	76825-76826	-	
478-677	76826-76827	-	
478-678	76827-76828	-	
478-679	76828-76829	-	
478-680	76829-76830	-	
478-681	76830-76831	-	
478-682	76831-76832	-	
478-683	76832-76833	-	
478-684	76833-76834	-	
478-685	76834-76835	-	
478-686	76835-76836	-	
478-687	76836-76837	-	
478-688	76837-76838	-	
478-689	76838-76839	-	
478-690	76839-76840	-	
478-691	76840-76841	-	
478-692	76841-76842	-	
478-693	76842-76843	-	
478-694	76843-76844	-	
478-695	76844-76845	-	
478-696	76845-76846	-	
478-697	76846-76847	-	
478-698	76847-76848	-	
478-699	76848-76849	-	
478-700	76849-76850	-	
478-701	76850-76851	-	
478-702	76851-76852	-	
478-703	76852-76853	-	
478-704	76853-76854	-	
478-705	76854-76855	-	
478-706	76855-76856	-	
478-707	76856-76857	-	
478-708	76857-76858	-	
478-709	76858-76859	-	
478-710	76859-76860	-	
478-711	76860-76861	-	
478-712	76861-76862	-	
478-713	76862-76863	-	
478-714	76863-76864	-	
478-715	76864-76865	-	
478-716	76865-76866	-	
478-717	76866-76867	-	
478-718	76867-76868	-	
478-719	76868-76869	-	
478-720	76869-76870	-	
478-721	76870-76871	-	
478-722	76871-76872	-	
478-723	76872-76873	-	
478-724	76873-76874	-	
478-725	76874-76875	-	
478-726	76875-76876	-	
478-727	76876-76877	-	
478-728	76877-76878	-	
478-729	76878-76879	-	
478-730	76879-76880	-	
478-731	76880-76881	-	
478-732	76881-76882	-	
478-733	76882-76883	-	
478-734	76883-76884	-	
478-735	76884-76885	-	
478-736	76885-76886	-	
478-737	76886-76887	-	
478-738	76887-76888	-	
478-739	76888-76889	-	
478-740	76889-76890	-	
478-741	76891-76896	Index	
478-742	76897-76901	Scan	
478-743	76902-76907	using	
478-744	76908-76930	i_my_pg_class_relname2	
478-745	76931-76933	on	
478-746	76934-76946	my_pg_class2	
478-747	76947-76948	(	
478-748	76948-76952	cost	
478-749	76952-76953	=	
478-750	76953-76957	0.27	
478-751	76957-76958	.	
478-752	76958-76963	.8.29	
478-753	76964-76968	rows	
478-754	76968-76969	=	
478-755	76969-76970	1	
478-756	76971-76976	width	
478-757	76976-76977	=	
478-758	76977-76978	4	
478-759	76978-76979	)	
478-760	76980-76985	Index	
478-761	76986-76990	Cond	
478-762	76990-76991	:	
478-763	76992-76993	(	
478-764	76993-77000	relname	
478-765	77001-77002	=	
478-766	77003-77004	'	
478-767	77004-77012	PG_CLASS	
478-768	77012-77013	'	
478-769	77013-77014	:	
478-770	77014-77015	:	
478-771	77015-77021	citext	
478-772	77021-77022	)	
478-773	77023-77028	There	
478-774	77029-77032	are	
478-775	77033-77037	more	
478-776	77038-77048	facilities	
478-777	77049-77058	available	
478-778	77059-77061	to	
478-779	77062-77069	further	
478-780	77070-77076	reduce	
478-781	77077-77086	precision	
478-782	77086-77087	:	
478-783	77088-77096	unaccent	
478-784	77097-77110	fuzzystrmatch	
478-785	77111-77118	pg_trgm	
478-786	77119-77123	with	
478-787	77124-77134	similarity	
478-788	77135-77139	full	
478-789	77140-77144	text	
478-790	77145-77151	search	
478-791	77152-77156	with	
478-792	77157-77165	stemming	
478-793	77166-77168	If	
478-794	77169-77177	Postgres	
478-795	77178-77180	12	
478-796	77181-77183	or	
478-797	77184-77189	later	
478-798	77190-77192	is	
478-799	77193-77201	compiled	
478-800	77202-77206	with	
478-801	77207-77210	the	
478-802	77211-77214	icu	
478-803	77215-77222	library	
478-804	77223-77230	support	
478-805	77231-77232	(	
478-806	77232-77236	view	
478-807	77237-77240	the	
478-808	77241-77247	system	
478-809	77248-77253	table	
478-810	77254-77260	column	
478-811	77261-77286	pg_collation.collprovider	
478-812	77287-77289	to	
478-813	77290-77295	check	
478-814	77295-77296	)	
478-815	77296-77297	,	
478-816	77298-77301	you	
478-817	77302-77305	can	
478-818	77306-77309	use	
478-819	77310-77326	nondeterministic	
478-820	77327-77337	collations	
478-821	77338-77342	that	
478-822	77343-77346	are	
478-823	77347-77351	case	
478-824	77352-77355	and	
478-825	77356-77374	accent-insensitive	
478-826	77374-77375	.	

#Text=View or Post Comments
#Text=Force One Row
#Text=Monday, June 22, 2020
#Text=How can you force a table to have at most one row?
479-1	77376-77380	View	
479-2	77381-77383	or	
479-3	77384-77388	Post	
479-4	77389-77397	Comments	
479-5	77398-77403	Force	
479-6	77404-77407	One	
479-7	77408-77411	Row	
479-8	77412-77418	Monday	
479-9	77418-77419	,	
479-10	77420-77424	June	
479-11	77425-77427	22	
479-12	77427-77428	,	
479-13	77429-77433	2020	
479-14	77434-77437	How	
479-15	77438-77441	can	
479-16	77442-77445	you	
479-17	77446-77451	force	
479-18	77452-77453	a	
479-19	77454-77459	table	
479-20	77460-77462	to	
479-21	77463-77467	have	
479-22	77468-77470	at	
479-23	77471-77475	most	
479-24	77476-77479	one	
479-25	77480-77483	row	
479-26	77483-77484	?	

#Text=It is actually very easy by creating a unique expression index on a constant, with no
#Text=column name references:
#Text=CREATE TABLE onerow (a INTEGER, b TEXT);
#Text=CREATE UNIQUE INDEX ON onerow ((1));
#Text=-- this adds a single row
#Text=INSERT INTO onerow VALUES (1, 'foo')
#Text=ON CONFLICT ((1)) DO UPDATE SET a = excluded.a, b = excluded.b;
#Text=SELECT * FROM onerow;
#Text=a |
#Text=---+-----
#Text=1 | foo
#Text=-- this updates the single row
#Text=INSERT INTO onerow VALUES (2, 'bar')
#Text=ON CONFLICT ((1)) DO UPDATE SET a = excluded.a, b = excluded.b;
#Text=SELECT * FROM onerow;
#Text=a |
#Text=---+-----
#Text=2 | bar
#Text=-- this also updates the single row
#Text=INSERT INTO onerow VALUES (3, 'baz')
#Text=ON CONFLICT ((1)) DO UPDATE SET a = excluded.a, b = excluded.b;
#Text=SELECT * FROM onerow;
#Text=a |
#Text=---+-----
#Text=3 | baz
#Text=-- try INSERT without ON CONFLICT
#Text=INSERT INTO onerow VALUES (4, 'foo2');
#Text=ERROR:
#Text=duplicate key value violates unique constraint "onerow_expr_idx"
#Text=DETAIL:
#Text=Key ((1))=(1) already exists.
480-1	77485-77487	It	
480-2	77488-77490	is	
480-3	77491-77499	actually	
480-4	77500-77504	very	
480-5	77505-77509	easy	
480-6	77510-77512	by	
480-7	77513-77521	creating	
480-8	77522-77523	a	
480-9	77524-77530	unique	
480-10	77531-77541	expression	
480-11	77542-77547	index	
480-12	77548-77550	on	
480-13	77551-77552	a	
480-14	77553-77561	constant	
480-15	77561-77562	,	
480-16	77563-77567	with	
480-17	77568-77570	no	
480-18	77571-77577	column	
480-19	77578-77582	name	
480-20	77583-77593	references	
480-21	77593-77594	:	
480-22	77595-77601	CREATE	
480-23	77602-77607	TABLE	
480-24	77608-77614	onerow	
480-25	77615-77616	(	
480-26	77616-77617	a	
480-27	77618-77625	INTEGER	
480-28	77625-77626	,	
480-29	77627-77628	b	
480-30	77629-77633	TEXT	
480-31	77633-77634	)	
480-32	77634-77635	;	
480-33	77636-77642	CREATE	
480-34	77643-77649	UNIQUE	
480-35	77650-77655	INDEX	
480-36	77656-77658	ON	
480-37	77659-77665	onerow	
480-38	77666-77667	(	
480-39	77667-77668	(	
480-40	77668-77669	1	
480-41	77669-77670	)	
480-42	77670-77671	)	
480-43	77671-77672	;	
480-44	77673-77674	-	
480-45	77674-77675	-	
480-46	77676-77680	this	
480-47	77681-77685	adds	
480-48	77686-77687	a	
480-49	77688-77694	single	
480-50	77695-77698	row	
480-51	77699-77705	INSERT	
480-52	77706-77710	INTO	
480-53	77711-77717	onerow	
480-54	77718-77724	VALUES	
480-55	77725-77726	(	
480-56	77726-77727	1	
480-57	77727-77728	,	
480-58	77729-77730	'	
480-59	77730-77733	foo	
480-60	77733-77734	'	
480-61	77734-77735	)	
480-62	77736-77738	ON	
480-63	77739-77747	CONFLICT	
480-64	77748-77749	(	
480-65	77749-77750	(	
480-66	77750-77751	1	
480-67	77751-77752	)	
480-68	77752-77753	)	
480-69	77754-77756	DO	
480-70	77757-77763	UPDATE	
480-71	77764-77767	SET	
480-72	77768-77769	a	
480-73	77770-77771	=	
480-74	77772-77782	excluded.a	
480-75	77782-77783	,	
480-76	77784-77785	b	
480-77	77786-77787	=	
480-78	77788-77798	excluded.b	
480-79	77798-77799	;	
480-80	77800-77806	SELECT	
480-81	77807-77808	*	
480-82	77809-77813	FROM	
480-83	77814-77820	onerow	
480-84	77820-77821	;	
480-85	77822-77823	a	
480-86	77824-77825	|	
480-87	77826-77827	-	
480-88	77827-77828	-	
480-89	77828-77829	-	
480-90	77829-77830	+	
480-91	77830-77831	-	
480-92	77831-77832	-	
480-93	77832-77833	-	
480-94	77833-77834	-	
480-95	77834-77835	-	
480-96	77836-77837	1	
480-97	77838-77839	|	
480-98	77840-77843	foo	
480-99	77844-77845	-	
480-100	77845-77846	-	
480-101	77847-77851	this	
480-102	77852-77859	updates	
480-103	77860-77863	the	
480-104	77864-77870	single	
480-105	77871-77874	row	
480-106	77875-77881	INSERT	
480-107	77882-77886	INTO	
480-108	77887-77893	onerow	
480-109	77894-77900	VALUES	
480-110	77901-77902	(	
480-111	77902-77903	2	
480-112	77903-77904	,	
480-113	77905-77906	'	
480-114	77906-77909	bar	
480-115	77909-77910	'	
480-116	77910-77911	)	
480-117	77912-77914	ON	
480-118	77915-77923	CONFLICT	
480-119	77924-77925	(	
480-120	77925-77926	(	
480-121	77926-77927	1	
480-122	77927-77928	)	
480-123	77928-77929	)	
480-124	77930-77932	DO	
480-125	77933-77939	UPDATE	
480-126	77940-77943	SET	
480-127	77944-77945	a	
480-128	77946-77947	=	
480-129	77948-77958	excluded.a	
480-130	77958-77959	,	
480-131	77960-77961	b	
480-132	77962-77963	=	
480-133	77964-77974	excluded.b	
480-134	77974-77975	;	
480-135	77976-77982	SELECT	
480-136	77983-77984	*	
480-137	77985-77989	FROM	
480-138	77990-77996	onerow	
480-139	77996-77997	;	
480-140	77998-77999	a	
480-141	78000-78001	|	
480-142	78002-78003	-	
480-143	78003-78004	-	
480-144	78004-78005	-	
480-145	78005-78006	+	
480-146	78006-78007	-	
480-147	78007-78008	-	
480-148	78008-78009	-	
480-149	78009-78010	-	
480-150	78010-78011	-	
480-151	78012-78013	2	
480-152	78014-78015	|	
480-153	78016-78019	bar	
480-154	78020-78021	-	
480-155	78021-78022	-	
480-156	78023-78027	this	
480-157	78028-78032	also	
480-158	78033-78040	updates	
480-159	78041-78044	the	
480-160	78045-78051	single	
480-161	78052-78055	row	
480-162	78056-78062	INSERT	
480-163	78063-78067	INTO	
480-164	78068-78074	onerow	
480-165	78075-78081	VALUES	
480-166	78082-78083	(	
480-167	78083-78084	3	
480-168	78084-78085	,	
480-169	78086-78087	'	
480-170	78087-78090	baz	
480-171	78090-78091	'	
480-172	78091-78092	)	
480-173	78093-78095	ON	
480-174	78096-78104	CONFLICT	
480-175	78105-78106	(	
480-176	78106-78107	(	
480-177	78107-78108	1	
480-178	78108-78109	)	
480-179	78109-78110	)	
480-180	78111-78113	DO	
480-181	78114-78120	UPDATE	
480-182	78121-78124	SET	
480-183	78125-78126	a	
480-184	78127-78128	=	
480-185	78129-78139	excluded.a	
480-186	78139-78140	,	
480-187	78141-78142	b	
480-188	78143-78144	=	
480-189	78145-78155	excluded.b	
480-190	78155-78156	;	
480-191	78157-78163	SELECT	
480-192	78164-78165	*	
480-193	78166-78170	FROM	
480-194	78171-78177	onerow	
480-195	78177-78178	;	
480-196	78179-78180	a	
480-197	78181-78182	|	
480-198	78183-78184	-	
480-199	78184-78185	-	
480-200	78185-78186	-	
480-201	78186-78187	+	
480-202	78187-78188	-	
480-203	78188-78189	-	
480-204	78189-78190	-	
480-205	78190-78191	-	
480-206	78191-78192	-	
480-207	78193-78194	3	
480-208	78195-78196	|	
480-209	78197-78200	baz	
480-210	78201-78202	-	
480-211	78202-78203	-	
480-212	78204-78207	try	
480-213	78208-78214	INSERT	
480-214	78215-78222	without	
480-215	78223-78225	ON	
480-216	78226-78234	CONFLICT	
480-217	78235-78241	INSERT	
480-218	78242-78246	INTO	
480-219	78247-78253	onerow	
480-220	78254-78260	VALUES	
480-221	78261-78262	(	
480-222	78262-78263	4	
480-223	78263-78264	,	
480-224	78265-78266	'	
480-225	78266-78270	foo2	
480-226	78270-78271	'	
480-227	78271-78272	)	
480-228	78272-78273	;	
480-229	78274-78279	ERROR	
480-230	78279-78280	:	
480-231	78281-78290	duplicate	
480-232	78291-78294	key	
480-233	78295-78300	value	
480-234	78301-78309	violates	
480-235	78310-78316	unique	
480-236	78317-78327	constraint	
480-237	78328-78329	"	
480-238	78329-78344	onerow_expr_idx	
480-239	78344-78345	"	
480-240	78346-78352	DETAIL	
480-241	78352-78353	:	
480-242	78354-78357	Key	
480-243	78358-78359	(	
480-244	78359-78360	(	
480-245	78360-78361	1	
480-246	78361-78362	)	
480-247	78362-78363	)	
480-248	78363-78364	=	
480-249	78364-78365	(	
480-250	78365-78366	1	
480-251	78366-78367	)	
480-252	78368-78375	already	
480-253	78376-78382	exists	
480-254	78382-78383	.	

#Text=By using on conflict, it is possible to add a row, but if a row already exists, to replace it with a new value.
481-1	78384-78386	By	
481-2	78387-78392	using	
481-3	78393-78395	on	
481-4	78396-78404	conflict	
481-5	78404-78405	,	
481-6	78406-78408	it	
481-7	78409-78411	is	
481-8	78412-78420	possible	
481-9	78421-78423	to	
481-10	78424-78427	add	
481-11	78428-78429	a	
481-12	78430-78433	row	
481-13	78433-78434	,	
481-14	78435-78438	but	
481-15	78439-78441	if	
481-16	78442-78443	a	
481-17	78444-78447	row	
481-18	78448-78455	already	
481-19	78456-78462	exists	
481-20	78462-78463	,	
481-21	78464-78466	to	
481-22	78467-78474	replace	
481-23	78475-78477	it	
481-24	78478-78482	with	
481-25	78483-78484	a	
481-26	78485-78488	new	
481-27	78489-78494	value	
481-28	78494-78495	.	

#Text=View or Post Comments
#Text=Storing Binary Data in the Database
#Text=Friday, June 19, 2020
#Text=There are some very good responses in an email thread about whether to store binary data in
#Text=Postgres or externally.
482-1	78496-78500	View	
482-2	78501-78503	or	
482-3	78504-78508	Post	
482-4	78509-78517	Comments	
482-5	78518-78525	Storing	
482-6	78526-78532	Binary	
482-7	78533-78537	Data	
482-8	78538-78540	in	
482-9	78541-78544	the	
482-10	78545-78553	Database	
482-11	78554-78560	Friday	
482-12	78560-78561	,	
482-13	78562-78566	June	
482-14	78567-78569	19	
482-15	78569-78570	,	
482-16	78571-78575	2020	
482-17	78576-78581	There	
482-18	78582-78585	are	
482-19	78586-78590	some	
482-20	78591-78595	very	
482-21	78596-78600	good	
482-22	78601-78610	responses	
482-23	78611-78613	in	
482-24	78614-78616	an	
482-25	78617-78622	email	
482-26	78623-78629	thread	
482-27	78630-78635	about	
482-28	78636-78643	whether	
482-29	78644-78646	to	
482-30	78647-78652	store	
482-31	78653-78659	binary	
482-32	78660-78664	data	
482-33	78665-78667	in	
482-34	78668-78676	Postgres	
482-35	78677-78679	or	
482-36	78680-78690	externally	
482-37	78690-78691	.	

#Text=The binary storage options discussed were:
#Text=In the database (toast helps with performance)
#Text=In another database, like SQLite
#Text=In a local or network file system
#Text=Using cloud storage.
483-1	78692-78695	The	
483-2	78696-78702	binary	
483-3	78703-78710	storage	
483-4	78711-78718	options	
483-5	78719-78728	discussed	
483-6	78729-78733	were	
483-7	78733-78734	:	
483-8	78735-78737	In	
483-9	78738-78741	the	
483-10	78742-78750	database	
483-11	78751-78752	(	
483-12	78752-78757	toast	
483-13	78758-78763	helps	
483-14	78764-78768	with	
483-15	78769-78780	performance	
483-16	78780-78781	)	
483-17	78782-78784	In	
483-18	78785-78792	another	
483-19	78793-78801	database	
483-20	78801-78802	,	
483-21	78803-78807	like	
483-22	78808-78814	SQLite	
483-23	78815-78817	In	
483-24	78818-78819	a	
483-25	78820-78825	local	
483-26	78826-78828	or	
483-27	78829-78836	network	
483-28	78837-78841	file	
483-29	78842-78848	system	
483-30	78849-78854	Using	
483-31	78855-78860	cloud	
483-32	78861-78868	storage	
483-33	78868-78869	.	

#Text=This email reply had many good insights, and this
#Text=wiki page has even more.
484-1	78870-78874	This	
484-2	78875-78880	email	
484-3	78881-78886	reply	
484-4	78887-78890	had	
484-5	78891-78895	many	
484-6	78896-78900	good	
484-7	78901-78909	insights	
484-8	78909-78910	,	
484-9	78911-78914	and	
484-10	78915-78919	this	
484-11	78920-78924	wiki	
484-12	78925-78929	page	
484-13	78930-78933	has	
484-14	78934-78938	even	
484-15	78939-78943	more	
484-16	78943-78944	.	

#Text=I have covered data storage outside of databases
#Text=before.
485-1	78945-78946	I	
485-2	78947-78951	have	
485-3	78952-78959	covered	
485-4	78960-78964	data	
485-5	78965-78972	storage	
485-6	78973-78980	outside	
485-7	78981-78983	of	
485-8	78984-78993	databases	
485-9	78994-79000	before	
485-10	79000-79001	.	

#Text=View or Post Comments
#Text=Dinner Q&A
#Text=Wednesday, June 17, 2020
#Text=My employer, EnterpriseDB, has been organizing events where potential customers and interested people can ask me questions while enjoying a meal.
486-1	79002-79006	View	
486-2	79007-79009	or	
486-3	79010-79014	Post	
486-4	79015-79023	Comments	
486-5	79024-79030	Dinner	
486-6	79031-79032	Q	
486-7	79032-79033	&	
486-8	79033-79034	A	
486-9	79035-79044	Wednesday	
486-10	79044-79045	,	
486-11	79046-79050	June	
486-12	79051-79053	17	
486-13	79053-79054	,	
486-14	79055-79059	2020	
486-15	79060-79062	My	
486-16	79063-79071	employer	
486-17	79071-79072	,	
486-18	79073-79085	EnterpriseDB	
486-19	79085-79086	,	
486-20	79087-79090	has	
486-21	79091-79095	been	
486-22	79096-79106	organizing	
486-23	79107-79113	events	
486-24	79114-79119	where	
486-25	79120-79129	potential	
486-26	79130-79139	customers	
486-27	79140-79143	and	
486-28	79144-79154	interested	
486-29	79155-79161	people	
486-30	79162-79165	can	
486-31	79166-79169	ask	
486-32	79170-79172	me	
486-33	79173-79182	questions	
486-34	79183-79188	while	
486-35	79189-79197	enjoying	
486-36	79198-79199	a	
486-37	79200-79204	meal	
486-38	79204-79205	.	

#Text=I thought the idea was
#Text=strange, but I have done it ten times, and they have gone very well.
487-1	79206-79207	I	
487-2	79208-79215	thought	
487-3	79216-79219	the	
487-4	79220-79224	idea	
487-5	79225-79228	was	
487-6	79229-79236	strange	
487-7	79236-79237	,	
487-8	79238-79241	but	
487-9	79242-79243	I	
487-10	79244-79248	have	
487-11	79249-79253	done	
487-12	79254-79256	it	
487-13	79257-79260	ten	
487-14	79261-79266	times	
487-15	79266-79267	,	
487-16	79268-79271	and	
487-17	79272-79276	they	
487-18	79277-79281	have	
487-19	79282-79286	gone	
487-20	79287-79291	very	
487-21	79292-79296	well	
487-22	79296-79297	.	

#Text=The Q&A portion usually lasts one hour and forty-five minutes.
488-1	79298-79301	The	
488-2	79302-79303	Q	
488-3	79303-79304	&	
488-4	79304-79305	A	
488-5	79306-79313	portion	
488-6	79314-79321	usually	
488-7	79322-79327	lasts	
488-8	79328-79331	one	
488-9	79332-79336	hour	
488-10	79337-79340	and	
488-11	79341-79351	forty-five	
488-12	79352-79359	minutes	
488-13	79359-79360	.	

#Text=During a November, 2019 event in
#Text=Utrecht, the Netherlands, a sketch artist was present.
489-1	79361-79367	During	
489-2	79368-79369	a	
489-3	79370-79378	November	
489-4	79378-79379	,	
489-5	79380-79384	2019	
489-6	79385-79390	event	
489-7	79391-79393	in	
489-8	79394-79401	Utrecht	
489-9	79401-79402	,	
489-10	79403-79406	the	
489-11	79407-79418	Netherlands	
489-12	79418-79419	,	
489-13	79420-79421	a	
489-14	79422-79428	sketch	
489-15	79429-79435	artist	
489-16	79436-79439	was	
489-17	79440-79447	present	
489-18	79447-79448	.	

#Text=The artist illustrated my ideas as I spoke and created this
#Text=diagram, which I found quite interesting.
490-1	79449-79452	The	
490-2	79453-79459	artist	
490-3	79460-79471	illustrated	
490-4	79472-79474	my	
490-5	79475-79480	ideas	
490-6	79481-79483	as	
490-7	79484-79485	I	
490-8	79486-79491	spoke	
490-9	79492-79495	and	
490-10	79496-79503	created	
490-11	79504-79508	this	
490-12	79509-79516	diagram	
490-13	79516-79517	,	
490-14	79518-79523	which	
490-15	79524-79525	I	
490-16	79526-79531	found	
490-17	79532-79537	quite	
490-18	79538-79549	interesting	
490-19	79549-79550	.	

#Text=View or Post Comments
#Text=Controlling Server Variables at Connection Time
#Text=Monday, June 15, 2020
#Text=I have recently covered the importance of libpq environment variables and
#Text=connection specification options.
491-1	79551-79555	View	
491-2	79556-79558	or	
491-3	79559-79563	Post	
491-4	79564-79572	Comments	
491-5	79573-79584	Controlling	
491-6	79585-79591	Server	
491-7	79592-79601	Variables	
491-8	79602-79604	at	
491-9	79605-79615	Connection	
491-10	79616-79620	Time	
491-11	79621-79627	Monday	
491-12	79627-79628	,	
491-13	79629-79633	June	
491-14	79634-79636	15	
491-15	79636-79637	,	
491-16	79638-79642	2020	
491-17	79643-79644	I	
491-18	79645-79649	have	
491-19	79650-79658	recently	
491-20	79659-79666	covered	
491-21	79667-79670	the	
491-22	79671-79681	importance	
491-23	79682-79684	of	
491-24	79685-79690	libpq	
491-25	79691-79702	environment	
491-26	79703-79712	variables	
491-27	79713-79716	and	
491-28	79717-79727	connection	
491-29	79728-79741	specification	
491-30	79742-79749	options	
491-31	79749-79750	.	

#Text=While most libpq options control how to connect to the Postgres server, there is one special option that
#Text=can change variables on the server you connect to, e.g.:
#Text=$ psql 'options=-cwork_mem=100MB dbname=test'
#Text=psql (13devel)
#Text=Type "help" for help.
#Text=test=> SHOW work_mem;
#Text=work_mem
#Text=----------
#Text=100MB
#Text=This can also be done using environment variables, with all the benefits of environment variables:
#Text=$ PGOPTIONS="-c work_mem=100MB" psql test
#Text=These settings can also be set at the user, database, and
#Text=cluster level on the database side too, but having control on the client side is often useful.
492-1	79751-79756	While	
492-2	79757-79761	most	
492-3	79762-79767	libpq	
492-4	79768-79775	options	
492-5	79776-79783	control	
492-6	79784-79787	how	
492-7	79788-79790	to	
492-8	79791-79798	connect	
492-9	79799-79801	to	
492-10	79802-79805	the	
492-11	79806-79814	Postgres	
492-12	79815-79821	server	
492-13	79821-79822	,	
492-14	79823-79828	there	
492-15	79829-79831	is	
492-16	79832-79835	one	
492-17	79836-79843	special	
492-18	79844-79850	option	
492-19	79851-79855	that	
492-20	79856-79859	can	
492-21	79860-79866	change	
492-22	79867-79876	variables	
492-23	79877-79879	on	
492-24	79880-79883	the	
492-25	79884-79890	server	
492-26	79891-79894	you	
492-27	79895-79902	connect	
492-28	79903-79905	to	
492-29	79905-79906	,	
492-30	79907-79910	e.g	
492-31	79910-79911	.	
492-32	79911-79912	:	
492-33	79913-79914	$	
492-34	79915-79919	psql	
492-35	79920-79921	'	
492-36	79921-79928	options	
492-37	79928-79929	=	
492-38	79929-79930	-	
492-39	79930-79939	cwork_mem	
492-40	79939-79940	=	
492-41	79940-79945	100MB	
492-42	79946-79952	dbname	
492-43	79952-79953	=	
492-44	79953-79957	test	
492-45	79957-79958	'	
492-46	79959-79963	psql	
492-47	79964-79965	(	
492-48	79965-79972	13devel	
492-49	79972-79973	)	
492-50	79974-79978	Type	
492-51	79979-79980	"	
492-52	79980-79984	help	
492-53	79984-79985	"	
492-54	79986-79989	for	
492-55	79990-79994	help	
492-56	79994-79995	.	
492-57	79996-80000	test	
492-58	80000-80001	=	
492-59	80001-80002	>	
492-60	80003-80007	SHOW	
492-61	80008-80016	work_mem	
492-62	80016-80017	;	
492-63	80018-80026	work_mem	
492-64	80027-80028	-	
492-65	80028-80029	-	
492-66	80029-80030	-	
492-67	80030-80031	-	
492-68	80031-80032	-	
492-69	80032-80033	-	
492-70	80033-80034	-	
492-71	80034-80035	-	
492-72	80035-80036	-	
492-73	80036-80037	-	
492-74	80038-80043	100MB	
492-75	80044-80048	This	
492-76	80049-80052	can	
492-77	80053-80057	also	
492-78	80058-80060	be	
492-79	80061-80065	done	
492-80	80066-80071	using	
492-81	80072-80083	environment	
492-82	80084-80093	variables	
492-83	80093-80094	,	
492-84	80095-80099	with	
492-85	80100-80103	all	
492-86	80104-80107	the	
492-87	80108-80116	benefits	
492-88	80117-80119	of	
492-89	80120-80131	environment	
492-90	80132-80141	variables	
492-91	80141-80142	:	
492-92	80143-80144	$	
492-93	80145-80154	PGOPTIONS	
492-94	80154-80155	=	
492-95	80155-80156	"	
492-96	80156-80157	-	
492-97	80157-80158	c	
492-98	80159-80167	work_mem	
492-99	80167-80168	=	
492-100	80168-80173	100MB	
492-101	80173-80174	"	
492-102	80175-80179	psql	
492-103	80180-80184	test	
492-104	80185-80190	These	
492-105	80191-80199	settings	
492-106	80200-80203	can	
492-107	80204-80208	also	
492-108	80209-80211	be	
492-109	80212-80215	set	
492-110	80216-80218	at	
492-111	80219-80222	the	
492-112	80223-80227	user	
492-113	80227-80228	,	
492-114	80229-80237	database	
492-115	80237-80238	,	
492-116	80239-80242	and	
492-117	80243-80250	cluster	
492-118	80251-80256	level	
492-119	80257-80259	on	
492-120	80260-80263	the	
492-121	80264-80272	database	
492-122	80273-80277	side	
492-123	80278-80281	too	
492-124	80281-80282	,	
492-125	80283-80286	but	
492-126	80287-80293	having	
492-127	80294-80301	control	
492-128	80302-80304	on	
492-129	80305-80308	the	
492-130	80309-80315	client	
492-131	80316-80320	side	
492-132	80321-80323	is	
492-133	80324-80329	often	
492-134	80330-80336	useful	
492-135	80336-80337	.	

#Text=View or Post Comments
#Text=Connect Parameter Specification Options
#Text=Friday, June 12, 2020
#Text=I have previously covered the importance of libpq and environment
#Text=variables.
493-1	80338-80342	View	
493-2	80343-80345	or	
493-3	80346-80350	Post	
493-4	80351-80359	Comments	
493-5	80360-80367	Connect	
493-6	80368-80377	Parameter	
493-7	80378-80391	Specification	
493-8	80392-80399	Options	
493-9	80400-80406	Friday	
493-10	80406-80407	,	
493-11	80408-80412	June	
493-12	80413-80415	12	
493-13	80415-80416	,	
493-14	80417-80421	2020	
493-15	80422-80423	I	
493-16	80424-80428	have	
493-17	80429-80439	previously	
493-18	80440-80447	covered	
493-19	80448-80451	the	
493-20	80452-80462	importance	
493-21	80463-80465	of	
493-22	80466-80471	libpq	
493-23	80472-80475	and	
493-24	80476-80487	environment	
493-25	80488-80497	variables	
493-26	80497-80498	.	

#Text=While you can specify discrete connection command-line parameters and environment variables, there is a catch-all setting that allows connection options to be specified in a single string,
#Text=e.g.:
#Text=$ psql -d test
#Text=psql (13devel)
#Text=Type "help" for help.
#Text=test=> \\q
#Text=$ psql --dbname test
#Text=psql (13devel)
#Text=Type "help" for help.
#Text=test=> \\q
#Text=$ psql 'dbname=test'
#Text=psql (13devel)
#Text=Type "help" for help.
#Text=test=> \\q
#Text=The first psql command uses a single-letter command-line option.
494-1	80499-80504	While	
494-2	80505-80508	you	
494-3	80509-80512	can	
494-4	80513-80520	specify	
494-5	80521-80529	discrete	
494-6	80530-80540	connection	
494-7	80541-80553	command-line	
494-8	80554-80564	parameters	
494-9	80565-80568	and	
494-10	80569-80580	environment	
494-11	80581-80590	variables	
494-12	80590-80591	,	
494-13	80592-80597	there	
494-14	80598-80600	is	
494-15	80601-80602	a	
494-16	80603-80612	catch-all	
494-17	80613-80620	setting	
494-18	80621-80625	that	
494-19	80626-80632	allows	
494-20	80633-80643	connection	
494-21	80644-80651	options	
494-22	80652-80654	to	
494-23	80655-80657	be	
494-24	80658-80667	specified	
494-25	80668-80670	in	
494-26	80671-80672	a	
494-27	80673-80679	single	
494-28	80680-80686	string	
494-29	80686-80687	,	
494-30	80688-80691	e.g	
494-31	80691-80692	.	
494-32	80692-80693	:	
494-33	80694-80695	$	
494-34	80696-80700	psql	
494-35	80701-80702	-	
494-36	80702-80703	d	
494-37	80704-80708	test	
494-38	80709-80713	psql	
494-39	80714-80715	(	
494-40	80715-80722	13devel	
494-41	80722-80723	)	
494-42	80724-80728	Type	
494-43	80729-80730	"	
494-44	80730-80734	help	
494-45	80734-80735	"	
494-46	80736-80739	for	
494-47	80740-80744	help	
494-48	80744-80745	.	
494-49	80746-80750	test	
494-50	80750-80751	=	
494-51	80751-80752	>	
494-52	80753-80754	\	
494-53	80754-80755	q	
494-54	80756-80757	$	
494-55	80758-80762	psql	
494-56	80763-80764	-	
494-57	80764-80765	-	
494-58	80765-80771	dbname	
494-59	80772-80776	test	
494-60	80777-80781	psql	
494-61	80782-80783	(	
494-62	80783-80790	13devel	
494-63	80790-80791	)	
494-64	80792-80796	Type	
494-65	80797-80798	"	
494-66	80798-80802	help	
494-67	80802-80803	"	
494-68	80804-80807	for	
494-69	80808-80812	help	
494-70	80812-80813	.	
494-71	80814-80818	test	
494-72	80818-80819	=	
494-73	80819-80820	>	
494-74	80821-80822	\	
494-75	80822-80823	q	
494-76	80824-80825	$	
494-77	80826-80830	psql	
494-78	80831-80832	'	
494-79	80832-80838	dbname	
494-80	80838-80839	=	
494-81	80839-80843	test	
494-82	80843-80844	'	
494-83	80845-80849	psql	
494-84	80850-80851	(	
494-85	80851-80858	13devel	
494-86	80858-80859	)	
494-87	80860-80864	Type	
494-88	80865-80866	"	
494-89	80866-80870	help	
494-90	80870-80871	"	
494-91	80872-80875	for	
494-92	80876-80880	help	
494-93	80880-80881	.	
494-94	80882-80886	test	
494-95	80886-80887	=	
494-96	80887-80888	>	
494-97	80889-80890	\	
494-98	80890-80891	q	
494-99	80892-80895	The	
494-100	80896-80901	first	
494-101	80902-80906	psql	
494-102	80907-80914	command	
494-103	80915-80919	uses	
494-104	80920-80921	a	
494-105	80922-80935	single-letter	
494-106	80936-80948	command-line	
494-107	80949-80955	option	
494-108	80955-80956	.	

#Text=The second one uses a long-format option.
495-1	80957-80960	The	
495-2	80961-80967	second	
495-3	80968-80971	one	
495-4	80972-80976	uses	
495-5	80977-80978	a	
495-6	80979-80990	long-format	
495-7	80991-80997	option	
495-8	80997-80998	.	

#Text=The third uses a
#Text=parameter key word.
496-1	80999-81002	The	
496-2	81003-81008	third	
496-3	81009-81013	uses	
496-4	81014-81015	a	
496-5	81016-81025	parameter	
496-6	81026-81029	key	
496-7	81030-81034	word	
496-8	81034-81035	.	

#Text=Multiple key words can be used to specify multiple connection options:
#Text=$ psql 'host=myhost.com port=5433 dbname=test'
#Text=You can also use a uri syntax to specify the same parameters as above:
#Text=$ psql postgresql://myhost.com:5433/test
#Text=View or Post Comments
#Text=Controlling Connection Parameters Using Environment Variables
#Text=Wednesday, June 10, 2020
#Text=Libpq is the Postgres connection library used by almost every non-jdbc application.
497-1	81036-81044	Multiple	
497-2	81045-81048	key	
497-3	81049-81054	words	
497-4	81055-81058	can	
497-5	81059-81061	be	
497-6	81062-81066	used	
497-7	81067-81069	to	
497-8	81070-81077	specify	
497-9	81078-81086	multiple	
497-10	81087-81097	connection	
497-11	81098-81105	options	
497-12	81105-81106	:	
497-13	81107-81108	$	
497-14	81109-81113	psql	
497-15	81114-81115	'	
497-16	81115-81119	host	
497-17	81119-81120	=	
497-18	81120-81130	myhost.com	
497-19	81131-81135	port	
497-20	81135-81136	=	
497-21	81136-81140	5433	
497-22	81141-81147	dbname	
497-23	81147-81148	=	
497-24	81148-81152	test	
497-25	81152-81153	'	
497-26	81154-81157	You	
497-27	81158-81161	can	
497-28	81162-81166	also	
497-29	81167-81170	use	
497-30	81171-81172	a	
497-31	81173-81176	uri	
497-32	81177-81183	syntax	
497-33	81184-81186	to	
497-34	81187-81194	specify	
497-35	81195-81198	the	
497-36	81199-81203	same	
497-37	81204-81214	parameters	
497-38	81215-81217	as	
497-39	81218-81223	above	
497-40	81223-81224	:	
497-41	81225-81226	$	
497-42	81227-81231	psql	
497-43	81232-81242	postgresql	
497-44	81242-81243	:	
497-45	81243-81244	/	
497-46	81244-81245	/	
497-47	81245-81255	myhost.com	
497-48	81255-81256	:	
497-49	81256-81260	5433	
497-50	81260-81261	/	
497-51	81261-81265	test	
497-52	81266-81270	View	
497-53	81271-81273	or	
497-54	81274-81278	Post	
497-55	81279-81287	Comments	
497-56	81288-81299	Controlling	
497-57	81300-81310	Connection	
497-58	81311-81321	Parameters	
497-59	81322-81327	Using	
497-60	81328-81339	Environment	
497-61	81340-81349	Variables	
497-62	81350-81359	Wednesday	
497-63	81359-81360	,	
497-64	81361-81365	June	
497-65	81366-81368	10	
497-66	81368-81369	,	
497-67	81370-81374	2020	
497-68	81375-81380	Libpq	
497-69	81381-81383	is	
497-70	81384-81387	the	
497-71	81388-81396	Postgres	
497-72	81397-81407	connection	
497-73	81408-81415	library	
497-74	81416-81420	used	
497-75	81421-81423	by	
497-76	81424-81430	almost	
497-77	81431-81436	every	
497-78	81437-81445	non-jdbc	
497-79	81446-81457	application	
497-80	81457-81458	.	

#Text=It allows many connection parameters,
#Text=which can be specified on the command line or embedded in applications:
#Text=$ psql -h myhost.com -d mydb
#Text=In the above case, the psql host name and database name are specified on the command-line and interpreted by libpq.
498-1	81459-81461	It	
498-2	81462-81468	allows	
498-3	81469-81473	many	
498-4	81474-81484	connection	
498-5	81485-81495	parameters	
498-6	81495-81496	,	
498-7	81497-81502	which	
498-8	81503-81506	can	
498-9	81507-81509	be	
498-10	81510-81519	specified	
498-11	81520-81522	on	
498-12	81523-81526	the	
498-13	81527-81534	command	
498-14	81535-81539	line	
498-15	81540-81542	or	
498-16	81543-81551	embedded	
498-17	81552-81554	in	
498-18	81555-81567	applications	
498-19	81567-81568	:	
498-20	81569-81570	$	
498-21	81571-81575	psql	
498-22	81576-81577	-	
498-23	81577-81578	h	
498-24	81579-81589	myhost.com	
498-25	81590-81591	-	
498-26	81591-81592	d	
498-27	81593-81597	mydb	
498-28	81598-81600	In	
498-29	81601-81604	the	
498-30	81605-81610	above	
498-31	81611-81615	case	
498-32	81615-81616	,	
498-33	81617-81620	the	
498-34	81621-81625	psql	
498-35	81626-81630	host	
498-36	81631-81635	name	
498-37	81636-81639	and	
498-38	81640-81648	database	
498-39	81649-81653	name	
498-40	81654-81657	are	
498-41	81658-81667	specified	
498-42	81668-81670	on	
498-43	81671-81674	the	
498-44	81675-81687	command-line	
498-45	81688-81691	and	
498-46	81692-81703	interpreted	
498-47	81704-81706	by	
498-48	81707-81712	libpq	
498-49	81712-81713	.	

#Text=However, it is also possible
#Text=to specify parameters using environment variables, which are also interpreted by libpq:
#Text=$ PGHOST=myhost.com PGDATABASE=mydb psql
#Text=There is obviously no value in specifying libpq parameters using environment variables in this example, but there are use cases.
499-1	81714-81721	However	
499-2	81721-81722	,	
499-3	81723-81725	it	
499-4	81726-81728	is	
499-5	81729-81733	also	
499-6	81734-81742	possible	
499-7	81743-81745	to	
499-8	81746-81753	specify	
499-9	81754-81764	parameters	
499-10	81765-81770	using	
499-11	81771-81782	environment	
499-12	81783-81792	variables	
499-13	81792-81793	,	
499-14	81794-81799	which	
499-15	81800-81803	are	
499-16	81804-81808	also	
499-17	81809-81820	interpreted	
499-18	81821-81823	by	
499-19	81824-81829	libpq	
499-20	81829-81830	:	
499-21	81831-81832	$	
499-22	81833-81839	PGHOST	
499-23	81839-81840	=	
499-24	81840-81850	myhost.com	
499-25	81851-81861	PGDATABASE	
499-26	81861-81862	=	
499-27	81862-81866	mydb	
499-28	81867-81871	psql	
499-29	81872-81877	There	
499-30	81878-81880	is	
499-31	81881-81890	obviously	
499-32	81891-81893	no	
499-33	81894-81899	value	
499-34	81900-81902	in	
499-35	81903-81913	specifying	
499-36	81914-81919	libpq	
499-37	81920-81930	parameters	
499-38	81931-81936	using	
499-39	81937-81948	environment	
499-40	81949-81958	variables	
499-41	81959-81961	in	
499-42	81962-81966	this	
499-43	81967-81974	example	
499-44	81974-81975	,	
499-45	81976-81979	but	
499-46	81980-81985	there	
499-47	81986-81989	are	
499-48	81990-81993	use	
499-49	81994-81999	cases	
499-50	81999-82000	.	

#Text=For example, if you want to perform multiple operations on the same host
#Text=name and database, you can do:
#Text=$ export PGHOST=myhost.com
#Text=$ export PGDATABASE=mydb
#Text=$ vacuumdb
#Text=$ reindexdb
#Text=This avoids specifying the host and database names multiple times, though with a loss of clarity.
500-1	82001-82004	For	
500-2	82005-82012	example	
500-3	82012-82013	,	
500-4	82014-82016	if	
500-5	82017-82020	you	
500-6	82021-82025	want	
500-7	82026-82028	to	
500-8	82029-82036	perform	
500-9	82037-82045	multiple	
500-10	82046-82056	operations	
500-11	82057-82059	on	
500-12	82060-82063	the	
500-13	82064-82068	same	
500-14	82069-82073	host	
500-15	82074-82078	name	
500-16	82079-82082	and	
500-17	82083-82091	database	
500-18	82091-82092	,	
500-19	82093-82096	you	
500-20	82097-82100	can	
500-21	82101-82103	do	
500-22	82103-82104	:	
500-23	82105-82106	$	
500-24	82107-82113	export	
500-25	82114-82120	PGHOST	
500-26	82120-82121	=	
500-27	82121-82131	myhost.com	
500-28	82132-82133	$	
500-29	82134-82140	export	
500-30	82141-82151	PGDATABASE	
500-31	82151-82152	=	
500-32	82152-82156	mydb	
500-33	82157-82158	$	
500-34	82159-82167	vacuumdb	
500-35	82168-82169	$	
500-36	82170-82179	reindexdb	
500-37	82180-82184	This	
500-38	82185-82191	avoids	
500-39	82192-82202	specifying	
500-40	82203-82206	the	
500-41	82207-82211	host	
500-42	82212-82215	and	
500-43	82216-82224	database	
500-44	82225-82230	names	
500-45	82231-82239	multiple	
500-46	82240-82245	times	
500-47	82245-82246	,	
500-48	82247-82253	though	
500-49	82254-82258	with	
500-50	82259-82260	a	
500-51	82261-82265	loss	
500-52	82266-82268	of	
500-53	82269-82276	clarity	
500-54	82276-82277	.	

#Text=Sometimes environment variables are best used as defaults when connection options are not specified:
#Text=$ export PGHOST=myhost.com
#Text=$ export PGDATABASE=mydb
#Text=$ reindexdb
#Text=$ reindexdb --dbname mydb2
#Text=$ reindexdb --host myhost3.com --dbname mydb3
#Text=This reindexes databases mydb and mydb2 on host myhost.com, and database mydb3 on myhost3.com.
501-1	82278-82287	Sometimes	
501-2	82288-82299	environment	
501-3	82300-82309	variables	
501-4	82310-82313	are	
501-5	82314-82318	best	
501-6	82319-82323	used	
501-7	82324-82326	as	
501-8	82327-82335	defaults	
501-9	82336-82340	when	
501-10	82341-82351	connection	
501-11	82352-82359	options	
501-12	82360-82363	are	
501-13	82364-82367	not	
501-14	82368-82377	specified	
501-15	82377-82378	:	
501-16	82379-82380	$	
501-17	82381-82387	export	
501-18	82388-82394	PGHOST	
501-19	82394-82395	=	
501-20	82395-82405	myhost.com	
501-21	82406-82407	$	
501-22	82408-82414	export	
501-23	82415-82425	PGDATABASE	
501-24	82425-82426	=	
501-25	82426-82430	mydb	
501-26	82431-82432	$	
501-27	82433-82442	reindexdb	
501-28	82443-82444	$	
501-29	82445-82454	reindexdb	
501-30	82455-82456	-	
501-31	82456-82457	-	
501-32	82457-82463	dbname	
501-33	82464-82469	mydb2	
501-34	82470-82471	$	
501-35	82472-82481	reindexdb	
501-36	82482-82483	-	
501-37	82483-82484	-	
501-38	82484-82488	host	
501-39	82489-82496	myhost3	
501-40	82496-82497	.	
501-41	82497-82500	com	
501-42	82501-82502	-	
501-43	82502-82503	-	
501-44	82503-82509	dbname	
501-45	82510-82515	mydb3	
501-46	82516-82520	This	
501-47	82521-82530	reindexes	
501-48	82531-82540	databases	
501-49	82541-82545	mydb	
501-50	82546-82549	and	
501-51	82550-82555	mydb2	
501-52	82556-82558	on	
501-53	82559-82563	host	
501-54	82564-82574	myhost.com	
501-55	82574-82575	,	
501-56	82576-82579	and	
501-57	82580-82588	database	
501-58	82589-82594	mydb3	
501-59	82595-82597	on	
501-60	82598-82605	myhost3	
501-61	82605-82606	.	
501-62	82606-82609	com	
501-63	82609-82610	.	

#Text=Another use-case for environment variables is to set parameters for users, without having to pass them as parameters to commands:
#Text=$ # must use 'sh' so the redirect happens as root
#Text=$ sudo sh -c "echo PGHOST='example.com' >> ~bruce/.profile"
#Text=By appending this to bruce's .profile file, all applications that use libpq without a specific host name will connect to example.com automatically.
502-1	82611-82618	Another	
502-2	82619-82627	use-case	
502-3	82628-82631	for	
502-4	82632-82643	environment	
502-5	82644-82653	variables	
502-6	82654-82656	is	
502-7	82657-82659	to	
502-8	82660-82663	set	
502-9	82664-82674	parameters	
502-10	82675-82678	for	
502-11	82679-82684	users	
502-12	82684-82685	,	
502-13	82686-82693	without	
502-14	82694-82700	having	
502-15	82701-82703	to	
502-16	82704-82708	pass	
502-17	82709-82713	them	
502-18	82714-82716	as	
502-19	82717-82727	parameters	
502-20	82728-82730	to	
502-21	82731-82739	commands	
502-22	82739-82740	:	
502-23	82741-82742	$	
502-24	82743-82744	#	
502-25	82745-82749	must	
502-26	82750-82753	use	
502-27	82754-82755	'	
502-28	82755-82757	sh	
502-29	82757-82758	'	
502-30	82759-82761	so	
502-31	82762-82765	the	
502-32	82766-82774	redirect	
502-33	82775-82782	happens	
502-34	82783-82785	as	
502-35	82786-82790	root	
502-36	82791-82792	$	
502-37	82793-82797	sudo	
502-38	82798-82800	sh	
502-39	82801-82802	-	
502-40	82802-82803	c	
502-41	82804-82805	"	
502-42	82805-82809	echo	
502-43	82810-82816	PGHOST	
502-44	82816-82817	=	
502-45	82817-82818	'	
502-46	82818-82829	example.com	
502-47	82829-82830	'	
502-48	82831-82832	>	
502-49	82832-82833	>	
502-50	82834-82835	~	
502-51	82835-82840	bruce	
502-52	82840-82841	/	
502-53	82841-82842	.	
502-54	82842-82849	profile	
502-55	82849-82850	"	
502-56	82851-82853	By	
502-57	82854-82863	appending	
502-58	82864-82868	this	
502-59	82869-82871	to	
502-60	82872-82879	bruce's	
502-61	82880-82881	.	
502-62	82881-82888	profile	
502-63	82889-82893	file	
502-64	82893-82894	,	
502-65	82895-82898	all	
502-66	82899-82911	applications	
502-67	82912-82916	that	
502-68	82917-82920	use	
502-69	82921-82926	libpq	
502-70	82927-82934	without	
502-71	82935-82936	a	
502-72	82937-82945	specific	
502-73	82946-82950	host	
502-74	82951-82955	name	
502-75	82956-82960	will	
502-76	82961-82968	connect	
502-77	82969-82971	to	
502-78	82972-82983	example.com	
502-79	82984-82997	automatically	
502-80	82997-82998	.	

#Text=Once bruce logs out and back in again, all his
#Text=applications will start using the new .profile pghost setting.
503-1	82999-83003	Once	
503-2	83004-83009	bruce	
503-3	83010-83014	logs	
503-4	83015-83018	out	
503-5	83019-83022	and	
503-6	83023-83027	back	
503-7	83028-83030	in	
503-8	83031-83036	again	
503-9	83036-83037	,	
503-10	83038-83041	all	
503-11	83042-83045	his	
503-12	83046-83058	applications	
503-13	83059-83063	will	
503-14	83064-83069	start	
503-15	83070-83075	using	
503-16	83076-83079	the	
503-17	83080-83083	new	
503-18	83084-83085	.	
503-19	83085-83092	profile	
503-20	83093-83099	pghost	
503-21	83100-83107	setting	
503-22	83107-83108	.	

#Text=Finally, environment variables make it possible to set default connection values for all users.
504-1	83109-83116	Finally	
504-2	83116-83117	,	
504-3	83118-83129	environment	
504-4	83130-83139	variables	
504-5	83140-83144	make	
504-6	83145-83147	it	
504-7	83148-83156	possible	
504-8	83157-83159	to	
504-9	83160-83163	set	
504-10	83164-83171	default	
504-11	83172-83182	connection	
504-12	83183-83189	values	
504-13	83190-83193	for	
504-14	83194-83197	all	
504-15	83198-83203	users	
504-16	83203-83204	.	

#Text=For example, on Debian, to default all tcp
#Text=(non-Unix Domain socket) connections to fully verify
#Text=ssl certificates, you can do:
#Text=$ sudo sh -c "echo PGSSLMODE='verify-full' >> /etc/profile.d/pgdefaults.sh"
#Text=Of course, you can change environment variables set at login and applications can override connection parameters set by environment variables.
505-1	83205-83208	For	
505-2	83209-83216	example	
505-3	83216-83217	,	
505-4	83218-83220	on	
505-5	83221-83227	Debian	
505-6	83227-83228	,	
505-7	83229-83231	to	
505-8	83232-83239	default	
505-9	83240-83243	all	
505-10	83244-83247	tcp	
505-11	83248-83249	(	
505-12	83249-83257	non-Unix	
505-13	83258-83264	Domain	
505-14	83265-83271	socket	
505-15	83271-83272	)	
505-16	83273-83284	connections	
505-17	83285-83287	to	
505-18	83288-83293	fully	
505-19	83294-83300	verify	
505-20	83301-83304	ssl	
505-21	83305-83317	certificates	
505-22	83317-83318	,	
505-23	83319-83322	you	
505-24	83323-83326	can	
505-25	83327-83329	do	
505-26	83329-83330	:	
505-27	83331-83332	$	
505-28	83333-83337	sudo	
505-29	83338-83340	sh	
505-30	83341-83342	-	
505-31	83342-83343	c	
505-32	83344-83345	"	
505-33	83345-83349	echo	
505-34	83350-83359	PGSSLMODE	
505-35	83359-83360	=	
505-36	83360-83361	'	
505-37	83361-83372	verify-full	
505-38	83372-83373	'	
505-39	83374-83375	>	
505-40	83375-83376	>	
505-41	83377-83378	/	
505-42	83378-83381	etc	
505-43	83381-83382	/	
505-44	83382-83391	profile.d	
505-45	83391-83392	/	
505-46	83392-83405	pgdefaults.sh	
505-47	83405-83406	"	
505-48	83407-83409	Of	
505-49	83410-83416	course	
505-50	83416-83417	,	
505-51	83418-83421	you	
505-52	83422-83425	can	
505-53	83426-83432	change	
505-54	83433-83444	environment	
505-55	83445-83454	variables	
505-56	83455-83458	set	
505-57	83459-83461	at	
505-58	83462-83467	login	
505-59	83468-83471	and	
505-60	83472-83484	applications	
505-61	83485-83488	can	
505-62	83489-83497	override	
505-63	83498-83508	connection	
505-64	83509-83519	parameters	
505-65	83520-83523	set	
505-66	83524-83526	by	
505-67	83527-83538	environment	
505-68	83539-83548	variables	
505-69	83548-83549	.	

#Text=View or Post Comments
#Text=Safety Systems Can Reduce Safety
#Text=Monday, June
#Text=8, 2020
#Text=What is the purpose of safety systems?
506-1	83550-83554	View	
506-2	83555-83557	or	
506-3	83558-83562	Post	
506-4	83563-83571	Comments	
506-5	83572-83578	Safety	
506-6	83579-83586	Systems	
506-7	83587-83590	Can	
506-8	83591-83597	Reduce	
506-9	83598-83604	Safety	
506-10	83605-83611	Monday	
506-11	83611-83612	,	
506-12	83613-83617	June	
506-13	83618-83619	8	
506-14	83619-83620	,	
506-15	83621-83625	2020	
506-16	83626-83630	What	
506-17	83631-83633	is	
506-18	83634-83637	the	
506-19	83638-83645	purpose	
506-20	83646-83648	of	
506-21	83649-83655	safety	
506-22	83656-83663	systems	
506-23	83663-83664	?	

#Text=To make things safer?
507-1	83665-83667	To	
507-2	83668-83672	make	
507-3	83673-83679	things	
507-4	83680-83685	safer	
507-5	83685-83686	?	

#Text=To make them appear safer?
508-1	83687-83689	To	
508-2	83690-83694	make	
508-3	83695-83699	them	
508-4	83700-83706	appear	
508-5	83707-83712	safer	
508-6	83712-83713	?	

#Text=To satisfy some external requirement?
509-1	83714-83716	To	
509-2	83717-83724	satisfy	
509-3	83725-83729	some	
509-4	83730-83738	external	
509-5	83739-83750	requirement	
509-6	83750-83751	?	

#Text=The purpose of safety
#Text=systems is not always clear, but even for safety systems whose sole purpose is to increase safety — do they always succeed in increasing safety?
510-1	83752-83755	The	
510-2	83756-83763	purpose	
510-3	83764-83766	of	
510-4	83767-83773	safety	
510-5	83774-83781	systems	
510-6	83782-83784	is	
510-7	83785-83788	not	
510-8	83789-83795	always	
510-9	83796-83801	clear	
510-10	83801-83802	,	
510-11	83803-83806	but	
510-12	83807-83811	even	
510-13	83812-83815	for	
510-14	83816-83822	safety	
510-15	83823-83830	systems	
510-16	83831-83836	whose	
510-17	83837-83841	sole	
510-18	83842-83849	purpose	
510-19	83850-83852	is	
510-20	83853-83855	to	
510-21	83856-83864	increase	
510-22	83865-83871	safety	
510-23	83872-83873	—	
510-24	83874-83876	do	
510-25	83877-83881	they	
510-26	83882-83888	always	
510-27	83889-83896	succeed	
510-28	83897-83899	in	
510-29	83900-83910	increasing	
510-30	83911-83917	safety	
510-31	83917-83918	?	

#Text=The simple answer is "no".
511-1	83919-83922	The	
511-2	83923-83929	simple	
511-3	83930-83936	answer	
511-4	83937-83939	is	
511-5	83940-83941	"	
511-6	83941-83943	no	
511-7	83943-83944	"	
511-8	83944-83945	.	

#Text=Here are three examples:
#Text=Crash of ValuJet 592 caused by transporting safety equipment
#Text=Three Mile Island nuclear reactor meltdown caused by the failure of complex safety
#Text=systems
#Text=Chernobyl nuclear reactor explosion caused by a safety test
#Text=In all three cases, safety systems did not prevent disasters — they caused them.
512-1	83946-83950	Here	
512-2	83951-83954	are	
512-3	83955-83960	three	
512-4	83961-83969	examples	
512-5	83969-83970	:	
512-6	83971-83976	Crash	
512-7	83977-83979	of	
512-8	83980-83987	ValuJet	
512-9	83988-83991	592	
512-10	83992-83998	caused	
512-11	83999-84001	by	
512-12	84002-84014	transporting	
512-13	84015-84021	safety	
512-14	84022-84031	equipment	
512-15	84032-84037	Three	
512-16	84038-84042	Mile	
512-17	84043-84049	Island	
512-18	84050-84057	nuclear	
512-19	84058-84065	reactor	
512-20	84066-84074	meltdown	
512-21	84075-84081	caused	
512-22	84082-84084	by	
512-23	84085-84088	the	
512-24	84089-84096	failure	
512-25	84097-84099	of	
512-26	84100-84107	complex	
512-27	84108-84114	safety	
512-28	84115-84122	systems	
512-29	84123-84132	Chernobyl	
512-30	84133-84140	nuclear	
512-31	84141-84148	reactor	
512-32	84149-84158	explosion	
512-33	84159-84165	caused	
512-34	84166-84168	by	
512-35	84169-84170	a	
512-36	84171-84177	safety	
512-37	84178-84182	test	
512-38	84183-84185	In	
512-39	84186-84189	all	
512-40	84190-84195	three	
512-41	84196-84201	cases	
512-42	84201-84202	,	
512-43	84203-84209	safety	
512-44	84210-84217	systems	
512-45	84218-84221	did	
512-46	84222-84225	not	
512-47	84226-84233	prevent	
512-48	84234-84243	disasters	
512-49	84244-84245	—	
512-50	84246-84250	they	
512-51	84251-84257	caused	
512-52	84258-84262	them	
512-53	84262-84263	.	

#Text=Safety systems are often very useful, and the modern world could not operate with them.
513-1	84264-84270	Safety	
513-2	84271-84278	systems	
513-3	84279-84282	are	
513-4	84283-84288	often	
513-5	84289-84293	very	
513-6	84294-84300	useful	
513-7	84300-84301	,	
513-8	84302-84305	and	
513-9	84306-84309	the	
513-10	84310-84316	modern	
513-11	84317-84322	world	
513-12	84323-84328	could	
513-13	84329-84332	not	
513-14	84333-84340	operate	
513-15	84341-84345	with	
513-16	84346-84350	them	
513-17	84350-84351	.	

#Text=However, they also add
#Text=complexity, and that added complexity can introduce failure modes that did not exist without the safety systems.
514-1	84352-84359	However	
514-2	84359-84360	,	
514-3	84361-84365	they	
514-4	84366-84370	also	
514-5	84371-84374	add	
514-6	84375-84385	complexity	
514-7	84385-84386	,	
514-8	84387-84390	and	
514-9	84391-84395	that	
514-10	84396-84401	added	
514-11	84402-84412	complexity	
514-12	84413-84416	can	
514-13	84417-84426	introduce	
514-14	84427-84434	failure	
514-15	84435-84440	modes	
514-16	84441-84445	that	
514-17	84446-84449	did	
514-18	84450-84453	not	
514-19	84454-84459	exist	
514-20	84460-84467	without	
514-21	84468-84471	the	
514-22	84472-84478	safety	
514-23	84479-84486	systems	
514-24	84486-84487	.	

#Text=So, where does that leave us?
515-1	84488-84490	So	
515-2	84490-84491	,	
515-3	84492-84497	where	
515-4	84498-84502	does	
515-5	84503-84507	that	
515-6	84508-84513	leave	
515-7	84514-84516	us	
515-8	84516-84517	?	

#Text=Safety systems are useful, but too many of them are bad?
516-1	84518-84524	Safety	
516-2	84525-84532	systems	
516-3	84533-84536	are	
516-4	84537-84543	useful	
516-5	84543-84544	,	
516-6	84545-84548	but	
516-7	84549-84552	too	
516-8	84553-84557	many	
516-9	84558-84560	of	
516-10	84561-84565	them	
516-11	84566-84569	are	
516-12	84570-84573	bad	
516-13	84573-84574	?	

#Text=How many is too many?
517-1	84575-84578	How	
517-2	84579-84583	many	
517-3	84584-84586	is	
517-4	84587-84590	too	
517-5	84591-84595	many	
517-6	84595-84596	?	

#Text=These are hard questions, but there are some guidelines:
#Text=How serious is the failure that the safety system is trying to prevent?
518-1	84597-84602	These	
518-2	84603-84606	are	
518-3	84607-84611	hard	
518-4	84612-84621	questions	
518-5	84621-84622	,	
518-6	84623-84626	but	
518-7	84627-84632	there	
518-8	84633-84636	are	
518-9	84637-84641	some	
518-10	84642-84652	guidelines	
518-11	84652-84653	:	
518-12	84654-84657	How	
518-13	84658-84665	serious	
518-14	84666-84668	is	
518-15	84669-84672	the	
518-16	84673-84680	failure	
518-17	84681-84685	that	
518-18	84686-84689	the	
518-19	84690-84696	safety	
518-20	84697-84703	system	
518-21	84704-84706	is	
518-22	84707-84713	trying	
518-23	84714-84716	to	
518-24	84717-84724	prevent	
518-25	84724-84725	?	

#Text=How likely is the failure that the safety system is trying to prevent?
519-1	84726-84729	How	
519-2	84730-84736	likely	
519-3	84737-84739	is	
519-4	84740-84743	the	
519-5	84744-84751	failure	
519-6	84752-84756	that	
519-7	84757-84760	the	
519-8	84761-84767	safety	
519-9	84768-84774	system	
519-10	84775-84777	is	
519-11	84778-84784	trying	
519-12	84785-84787	to	
519-13	84788-84795	prevent	
519-14	84795-84796	?	

#Text=How likely is the safety system to fail?
520-1	84797-84800	How	
520-2	84801-84807	likely	
520-3	84808-84810	is	
520-4	84811-84814	the	
520-5	84815-84821	safety	
520-6	84822-84828	system	
520-7	84829-84831	to	
520-8	84832-84836	fail	
520-9	84836-84837	?	

#Text=What impact will failure of the safety system have on the overall system?
521-1	84838-84842	What	
521-2	84843-84849	impact	
521-3	84850-84854	will	
521-4	84855-84862	failure	
521-5	84863-84865	of	
521-6	84866-84869	the	
521-7	84870-84876	safety	
521-8	84877-84883	system	
521-9	84884-84888	have	
521-10	84889-84891	on	
521-11	84892-84895	the	
521-12	84896-84903	overall	
521-13	84904-84910	system	
521-14	84910-84911	?	

#Text=This gets into a very complex calculus where you are computing the likelihood and seriousness of the failure that the safety system is trying to prevent, and the likelihood and seriousness of safety system
#Text=failure.
522-1	84912-84916	This	
522-2	84917-84921	gets	
522-3	84922-84926	into	
522-4	84927-84928	a	
522-5	84929-84933	very	
522-6	84934-84941	complex	
522-7	84942-84950	calculus	
522-8	84951-84956	where	
522-9	84957-84960	you	
522-10	84961-84964	are	
522-11	84965-84974	computing	
522-12	84975-84978	the	
522-13	84979-84989	likelihood	
522-14	84990-84993	and	
522-15	84994-85005	seriousness	
522-16	85006-85008	of	
522-17	85009-85012	the	
522-18	85013-85020	failure	
522-19	85021-85025	that	
522-20	85026-85029	the	
522-21	85030-85036	safety	
522-22	85037-85043	system	
522-23	85044-85046	is	
522-24	85047-85053	trying	
522-25	85054-85056	to	
522-26	85057-85064	prevent	
522-27	85064-85065	,	
522-28	85066-85069	and	
522-29	85070-85073	the	
522-30	85074-85084	likelihood	
522-31	85085-85088	and	
522-32	85089-85100	seriousness	
522-33	85101-85103	of	
522-34	85104-85110	safety	
522-35	85111-85117	system	
522-36	85118-85125	failure	
522-37	85125-85126	.	

#Text=The big point is that while you are computing the likelihood and seriousness of failures and adding safety systems to compensate for them, you have to be aware of the cost of adding those safety
#Text=systems, in both the likelihood and impact of their failure.
523-1	85127-85130	The	
523-2	85131-85134	big	
523-3	85135-85140	point	
523-4	85141-85143	is	
523-5	85144-85148	that	
523-6	85149-85154	while	
523-7	85155-85158	you	
523-8	85159-85162	are	
523-9	85163-85172	computing	
523-10	85173-85176	the	
523-11	85177-85187	likelihood	
523-12	85188-85191	and	
523-13	85192-85203	seriousness	
523-14	85204-85206	of	
523-15	85207-85215	failures	
523-16	85216-85219	and	
523-17	85220-85226	adding	
523-18	85227-85233	safety	
523-19	85234-85241	systems	
523-20	85242-85244	to	
523-21	85245-85255	compensate	
523-22	85256-85259	for	
523-23	85260-85264	them	
523-24	85264-85265	,	
523-25	85266-85269	you	
523-26	85270-85274	have	
523-27	85275-85277	to	
523-28	85278-85280	be	
523-29	85281-85286	aware	
523-30	85287-85289	of	
523-31	85290-85293	the	
523-32	85294-85298	cost	
523-33	85299-85301	of	
523-34	85302-85308	adding	
523-35	85309-85314	those	
523-36	85315-85321	safety	
523-37	85322-85329	systems	
523-38	85329-85330	,	
523-39	85331-85333	in	
523-40	85334-85338	both	
523-41	85339-85342	the	
523-42	85343-85353	likelihood	
523-43	85354-85357	and	
523-44	85358-85364	impact	
523-45	85365-85367	of	
523-46	85368-85373	their	
523-47	85374-85381	failure	
523-48	85381-85382	.	

#Text=What does this have to do with databases?
524-1	85383-85387	What	
524-2	85388-85392	does	
524-3	85393-85397	this	
524-4	85398-85402	have	
524-5	85403-85405	to	
524-6	85406-85408	do	
524-7	85409-85413	with	
524-8	85414-85423	databases	
524-9	85423-85424	?	

#Text=Well, you might have a database on an airplane or at a nuclear reactor site, in which case the database is part of a complex system.
525-1	85425-85429	Well	
525-2	85429-85430	,	
525-3	85431-85434	you	
525-4	85435-85440	might	
525-5	85441-85445	have	
525-6	85446-85447	a	
525-7	85448-85456	database	
525-8	85457-85459	on	
525-9	85460-85462	an	
525-10	85463-85471	airplane	
525-11	85472-85474	or	
525-12	85475-85477	at	
525-13	85478-85479	a	
525-14	85480-85487	nuclear	
525-15	85488-85495	reactor	
525-16	85496-85500	site	
525-17	85500-85501	,	
525-18	85502-85504	in	
525-19	85505-85510	which	
525-20	85511-85515	case	
525-21	85516-85519	the	
525-22	85520-85528	database	
525-23	85529-85531	is	
525-24	85532-85536	part	
525-25	85537-85539	of	
525-26	85540-85541	a	
525-27	85542-85549	complex	
525-28	85550-85556	system	
525-29	85556-85557	.	

#Text=However, databases are also
#Text=complex systems, and we regularly add safety systems to increase their reliability.
526-1	85558-85565	However	
526-2	85565-85566	,	
526-3	85567-85576	databases	
526-4	85577-85580	are	
526-5	85581-85585	also	
526-6	85586-85593	complex	
526-7	85594-85601	systems	
526-8	85601-85602	,	
526-9	85603-85606	and	
526-10	85607-85609	we	
526-11	85610-85619	regularly	
526-12	85620-85623	add	
526-13	85624-85630	safety	
526-14	85631-85638	systems	
526-15	85639-85641	to	
526-16	85642-85650	increase	
526-17	85651-85656	their	
526-18	85657-85668	reliability	
526-19	85668-85669	.	

#Text=How often to do we consider the cost of those safety systems, in terms of the likelihood and seriousness of failures?
527-1	85670-85673	How	
527-2	85674-85679	often	
527-3	85680-85682	to	
527-4	85683-85685	do	
527-5	85686-85688	we	
527-6	85689-85697	consider	
527-7	85698-85701	the	
527-8	85702-85706	cost	
527-9	85707-85709	of	
527-10	85710-85715	those	
527-11	85716-85722	safety	
527-12	85723-85730	systems	
527-13	85730-85731	,	
527-14	85732-85734	in	
527-15	85735-85740	terms	
527-16	85741-85743	of	
527-17	85744-85747	the	
527-18	85748-85758	likelihood	
527-19	85759-85762	and	
527-20	85763-85774	seriousness	
527-21	85775-85777	of	
527-22	85778-85786	failures	
527-23	85786-85787	?	

#Text=Let's look at some typical database safety systems:
#Text=Backups
#Text=Error reporting
#Text=Replication
#Text=Connection pooling
#Text=Let's walk through the calculus for backups:
#Text=How serious is the failure that the safety system is trying to prevent?
528-1	85788-85793	Let's	
528-2	85794-85798	look	
528-3	85799-85801	at	
528-4	85802-85806	some	
528-5	85807-85814	typical	
528-6	85815-85823	database	
528-7	85824-85830	safety	
528-8	85831-85838	systems	
528-9	85838-85839	:	
528-10	85840-85847	Backups	
528-11	85848-85853	Error	
528-12	85854-85863	reporting	
528-13	85864-85875	Replication	
528-14	85876-85886	Connection	
528-15	85887-85894	pooling	
528-16	85895-85900	Let's	
528-17	85901-85905	walk	
528-18	85906-85913	through	
528-19	85914-85917	the	
528-20	85918-85926	calculus	
528-21	85927-85930	for	
528-22	85931-85938	backups	
528-23	85938-85939	:	
528-24	85940-85943	How	
528-25	85944-85951	serious	
528-26	85952-85954	is	
528-27	85955-85958	the	
528-28	85959-85966	failure	
528-29	85967-85971	that	
528-30	85972-85975	the	
528-31	85976-85982	safety	
528-32	85983-85989	system	
528-33	85990-85992	is	
528-34	85993-85999	trying	
528-35	86000-86002	to	
528-36	86003-86010	prevent	
528-37	86010-86011	?	

#Text=High
#Text=How likely is the failure that the safety system is trying to prevent?
529-1	86012-86016	High	
529-2	86017-86020	How	
529-3	86021-86027	likely	
529-4	86028-86030	is	
529-5	86031-86034	the	
529-6	86035-86042	failure	
529-7	86043-86047	that	
529-8	86048-86051	the	
529-9	86052-86058	safety	
529-10	86059-86065	system	
529-11	86066-86068	is	
529-12	86069-86075	trying	
529-13	86076-86078	to	
529-14	86079-86086	prevent	
529-15	86086-86087	?	

#Text=High
#Text=How reliable is the safety system?
530-1	86088-86092	High	
530-2	86093-86096	How	
530-3	86097-86105	reliable	
530-4	86106-86108	is	
530-5	86109-86112	the	
530-6	86113-86119	safety	
530-7	86120-86126	system	
530-8	86126-86127	?	

#Text=Medium
#Text=What impact will failure of the safety system have on the overall system?
531-1	86128-86134	Medium	
531-2	86135-86139	What	
531-3	86140-86146	impact	
531-4	86147-86151	will	
531-5	86152-86159	failure	
531-6	86160-86162	of	
531-7	86163-86166	the	
531-8	86167-86173	safety	
531-9	86174-86180	system	
531-10	86181-86185	have	
531-11	86186-86188	on	
531-12	86189-86192	the	
531-13	86193-86200	overall	
531-14	86201-86207	system	
531-15	86207-86208	?	

#Text=Low
#Text=The last question is not considering the seriousness of a failed backup on performing it safety goal, but rather how likely is a backup to cause a failure on its own?
532-1	86209-86212	Low	
532-2	86213-86216	The	
532-3	86217-86221	last	
532-4	86222-86230	question	
532-5	86231-86233	is	
532-6	86234-86237	not	
532-7	86238-86249	considering	
532-8	86250-86253	the	
532-9	86254-86265	seriousness	
532-10	86266-86268	of	
532-11	86269-86270	a	
532-12	86271-86277	failed	
532-13	86278-86284	backup	
532-14	86285-86287	on	
532-15	86288-86298	performing	
532-16	86299-86301	it	
532-17	86302-86308	safety	
532-18	86309-86313	goal	
532-19	86313-86314	,	
532-20	86315-86318	but	
532-21	86319-86325	rather	
532-22	86326-86329	how	
532-23	86330-86336	likely	
532-24	86337-86339	is	
532-25	86340-86341	a	
532-26	86342-86348	backup	
532-27	86349-86351	to	
532-28	86352-86357	cause	
532-29	86358-86359	a	
532-30	86360-86367	failure	
532-31	86368-86370	on	
532-32	86371-86374	its	
532-33	86375-86378	own	
532-34	86378-86379	?	

#Text=It could fill up the disk with backup
#Text=files, or cause too much load on the system, but those risks are low.
533-1	86380-86382	It	
533-2	86383-86388	could	
533-3	86389-86393	fill	
533-4	86394-86396	up	
533-5	86397-86400	the	
533-6	86401-86405	disk	
533-7	86406-86410	with	
533-8	86411-86417	backup	
533-9	86418-86423	files	
533-10	86423-86424	,	
533-11	86425-86427	or	
533-12	86428-86433	cause	
533-13	86434-86437	too	
533-14	86438-86442	much	
533-15	86443-86447	load	
533-16	86448-86450	on	
533-17	86451-86454	the	
533-18	86455-86461	system	
533-19	86461-86462	,	
533-20	86463-86466	but	
533-21	86467-86472	those	
533-22	86473-86478	risks	
533-23	86479-86482	are	
533-24	86483-86486	low	
533-25	86486-86487	.	

#Text=Similarly, error reporting has minimal risk on destabilizing the system, except for consuming I/O and storage space.
534-1	86488-86497	Similarly	
534-2	86497-86498	,	
534-3	86499-86504	error	
534-4	86505-86514	reporting	
534-5	86515-86518	has	
534-6	86519-86526	minimal	
534-7	86527-86531	risk	
534-8	86532-86534	on	
534-9	86535-86548	destabilizing	
534-10	86549-86552	the	
534-11	86553-86559	system	
534-12	86559-86560	,	
534-13	86561-86567	except	
534-14	86568-86571	for	
534-15	86572-86581	consuming	
534-16	86582-86583	I	
534-17	86583-86584	/	
534-18	86584-86585	O	
534-19	86586-86589	and	
534-20	86590-86597	storage	
534-21	86598-86603	space	
534-22	86603-86604	.	

#Text=Replication and connection poolers are in a different class of risk.
535-1	86605-86616	Replication	
535-2	86617-86620	and	
535-3	86621-86631	connection	
535-4	86632-86639	poolers	
535-5	86640-86643	are	
535-6	86644-86646	in	
535-7	86647-86648	a	
535-8	86649-86658	different	
535-9	86659-86664	class	
535-10	86665-86667	of	
535-11	86668-86672	risk	
535-12	86672-86673	.	

#Text=Replication's goal is to allow for controlled switchover or failover
#Text=in case of primary server failure, but what is its reliability and the impact if it fails?
536-1	86674-86687	Replication's	
536-2	86688-86692	goal	
536-3	86693-86695	is	
536-4	86696-86698	to	
536-5	86699-86704	allow	
536-6	86705-86708	for	
536-7	86709-86719	controlled	
536-8	86720-86730	switchover	
536-9	86731-86733	or	
536-10	86734-86742	failover	
536-11	86743-86745	in	
536-12	86746-86750	case	
536-13	86751-86753	of	
536-14	86754-86761	primary	
536-15	86762-86768	server	
536-16	86769-86776	failure	
536-17	86776-86777	,	
536-18	86778-86781	but	
536-19	86782-86786	what	
536-20	86787-86789	is	
536-21	86790-86793	its	
536-22	86794-86805	reliability	
536-23	86806-86809	and	
536-24	86810-86813	the	
536-25	86814-86820	impact	
536-26	86821-86823	if	
536-27	86824-86826	it	
536-28	86827-86832	fails	
536-29	86832-86833	?	

#Text=If synchronous replication is
#Text=used, failure to replicate will cause the system to stop accepting writes.
537-1	86834-86836	If	
537-2	86837-86848	synchronous	
537-3	86849-86860	replication	
537-4	86861-86863	is	
537-5	86864-86868	used	
537-6	86868-86869	,	
537-7	86870-86877	failure	
537-8	86878-86880	to	
537-9	86881-86890	replicate	
537-10	86891-86895	will	
537-11	86896-86901	cause	
537-12	86902-86905	the	
537-13	86906-86912	system	
537-14	86913-86915	to	
537-15	86916-86920	stop	
537-16	86921-86930	accepting	
537-17	86931-86937	writes	
537-18	86937-86938	.	

#Text=This can be caused by a network failure to the replicas, a replica outage, or even misconfiguration.
538-1	86939-86943	This	
538-2	86944-86947	can	
538-3	86948-86950	be	
538-4	86951-86957	caused	
538-5	86958-86960	by	
538-6	86961-86962	a	
538-7	86963-86970	network	
538-8	86971-86978	failure	
538-9	86979-86981	to	
538-10	86982-86985	the	
538-11	86986-86994	replicas	
538-12	86994-86995	,	
538-13	86996-86997	a	
538-14	86998-87005	replica	
538-15	87006-87012	outage	
538-16	87012-87013	,	
538-17	87014-87016	or	
538-18	87017-87021	even	
538-19	87022-87038	misconfiguration	
538-20	87038-87039	.	

#Text=Even failure of
#Text=asynchronous replication can cause the write-ahead log directory to fill up storage, causing an outage.
539-1	87040-87044	Even	
539-2	87045-87052	failure	
539-3	87053-87055	of	
539-4	87056-87068	asynchronous	
539-5	87069-87080	replication	
539-6	87081-87084	can	
539-7	87085-87090	cause	
539-8	87091-87094	the	
539-9	87095-87106	write-ahead	
539-10	87107-87110	log	
539-11	87111-87120	directory	
539-12	87121-87123	to	
539-13	87124-87128	fill	
539-14	87129-87131	up	
539-15	87132-87139	storage	
539-16	87139-87140	,	
539-17	87141-87148	causing	
539-18	87149-87151	an	
539-19	87152-87158	outage	
539-20	87158-87159	.	

#Text=Similarly, the failure of a connection pooler can cause a total outage.
540-1	87160-87169	Similarly	
540-2	87169-87170	,	
540-3	87171-87174	the	
540-4	87175-87182	failure	
540-5	87183-87185	of	
540-6	87186-87187	a	
540-7	87188-87198	connection	
540-8	87199-87205	pooler	
540-9	87206-87209	can	
540-10	87210-87215	cause	
540-11	87216-87217	a	
540-12	87218-87223	total	
540-13	87224-87230	outage	
540-14	87230-87231	.	

#Text=You can use multiple poolers, but what if the failure of one pooler prevents the other from working, or if they both work and
#Text=conflict with each other.
541-1	87232-87235	You	
541-2	87236-87239	can	
541-3	87240-87243	use	
541-4	87244-87252	multiple	
541-5	87253-87260	poolers	
541-6	87260-87261	,	
541-7	87262-87265	but	
541-8	87266-87270	what	
541-9	87271-87273	if	
541-10	87274-87277	the	
541-11	87278-87285	failure	
541-12	87286-87288	of	
541-13	87289-87292	one	
541-14	87293-87299	pooler	
541-15	87300-87308	prevents	
541-16	87309-87312	the	
541-17	87313-87318	other	
541-18	87319-87323	from	
541-19	87324-87331	working	
541-20	87331-87332	,	
541-21	87333-87335	or	
541-22	87336-87338	if	
541-23	87339-87343	they	
541-24	87344-87348	both	
541-25	87349-87353	work	
541-26	87354-87357	and	
541-27	87358-87366	conflict	
541-28	87367-87371	with	
541-29	87372-87376	each	
541-30	87377-87382	other	
541-31	87382-87383	.	

#Text=Multiple poolers can also add complexity to the system which makes debugging other problems harder.
542-1	87384-87392	Multiple	
542-2	87393-87400	poolers	
542-3	87401-87404	can	
542-4	87405-87409	also	
542-5	87410-87413	add	
542-6	87414-87424	complexity	
542-7	87425-87427	to	
542-8	87428-87431	the	
542-9	87432-87438	system	
542-10	87439-87444	which	
542-11	87445-87450	makes	
542-12	87451-87460	debugging	
542-13	87461-87466	other	
542-14	87467-87475	problems	
542-15	87476-87482	harder	
542-16	87482-87483	.	

#Text=This is a great example where, to avoid the problems of safety system
#Text=failure, you create two safety systems, but the two safety systems can interact in ways that make two safety systems less reliable than one safety system.
543-1	87484-87488	This	
543-2	87489-87491	is	
543-3	87492-87493	a	
543-4	87494-87499	great	
543-5	87500-87507	example	
543-6	87508-87513	where	
543-7	87513-87514	,	
543-8	87515-87517	to	
543-9	87518-87523	avoid	
543-10	87524-87527	the	
543-11	87528-87536	problems	
543-12	87537-87539	of	
543-13	87540-87546	safety	
543-14	87547-87553	system	
543-15	87554-87561	failure	
543-16	87561-87562	,	
543-17	87563-87566	you	
543-18	87567-87573	create	
543-19	87574-87577	two	
543-20	87578-87584	safety	
543-21	87585-87592	systems	
543-22	87592-87593	,	
543-23	87594-87597	but	
543-24	87598-87601	the	
543-25	87602-87605	two	
543-26	87606-87612	safety	
543-27	87613-87620	systems	
543-28	87621-87624	can	
543-29	87625-87633	interact	
543-30	87634-87636	in	
543-31	87637-87641	ways	
543-32	87642-87646	that	
543-33	87647-87651	make	
543-34	87652-87655	two	
543-35	87656-87662	safety	
543-36	87663-87670	systems	
543-37	87671-87675	less	
543-38	87676-87684	reliable	
543-39	87685-87689	than	
543-40	87690-87693	one	
543-41	87694-87700	safety	
543-42	87701-87707	system	
543-43	87707-87708	.	

#Text=Multi-master replication can have similar downsides.
544-1	87709-87721	Multi-master	
544-2	87722-87733	replication	
544-3	87734-87737	can	
544-4	87738-87742	have	
544-5	87743-87750	similar	
544-6	87751-87760	downsides	
544-7	87760-87761	.	

#Text=Even auto-failover has risks, and auto-failback, even more.
545-1	87762-87766	Even	
545-2	87767-87780	auto-failover	
545-3	87781-87784	has	
545-4	87785-87790	risks	
545-5	87790-87791	,	
545-6	87792-87795	and	
545-7	87796-87809	auto-failback	
545-8	87809-87810	,	
545-9	87811-87815	even	
545-10	87816-87820	more	
545-11	87820-87821	.	

#Text=The bottom line is that safety systems can be useful, but they can also add complexity which makes systems more fragile and harder to control;
#Text=consider how safety systems interact and implement them only
#Text=where their value is clear.
546-1	87822-87825	The	
546-2	87826-87832	bottom	
546-3	87833-87837	line	
546-4	87838-87840	is	
546-5	87841-87845	that	
546-6	87846-87852	safety	
546-7	87853-87860	systems	
546-8	87861-87864	can	
546-9	87865-87867	be	
546-10	87868-87874	useful	
546-11	87874-87875	,	
546-12	87876-87879	but	
546-13	87880-87884	they	
546-14	87885-87888	can	
546-15	87889-87893	also	
546-16	87894-87897	add	
546-17	87898-87908	complexity	
546-18	87909-87914	which	
546-19	87915-87920	makes	
546-20	87921-87928	systems	
546-21	87929-87933	more	
546-22	87934-87941	fragile	
546-23	87942-87945	and	
546-24	87946-87952	harder	
546-25	87953-87955	to	
546-26	87956-87963	control	
546-27	87963-87964	;	
546-28	87965-87973	consider	
546-29	87974-87977	how	
546-30	87978-87984	safety	
546-31	87985-87992	systems	
546-32	87993-88001	interact	
546-33	88002-88005	and	
546-34	88006-88015	implement	
546-35	88016-88020	them	
546-36	88021-88025	only	
546-37	88026-88031	where	
546-38	88032-88037	their	
546-39	88038-88043	value	
546-40	88044-88046	is	
546-41	88047-88052	clear	
546-42	88052-88053	.	

#Text=View or Post Comments
#Text=When Does a Commit Happen?
547-1	88054-88058	View	
547-2	88059-88061	or	
547-3	88062-88066	Post	
547-4	88067-88075	Comments	
547-5	88076-88080	When	
547-6	88081-88085	Does	
547-7	88086-88087	a	
547-8	88088-88094	Commit	
547-9	88095-88101	Happen	
547-10	88101-88102	?	

#Text=Wednesday, June
#Text=3, 2020
#Text=Most people who deal with relational databases think of transaction commits as binary operations — the query is running and not yet committed, then it is completed and committed.
548-1	88103-88112	Wednesday	
548-2	88112-88113	,	
548-3	88114-88118	June	
548-4	88119-88120	3	
548-5	88120-88121	,	
548-6	88122-88126	2020	
548-7	88127-88131	Most	
548-8	88132-88138	people	
548-9	88139-88142	who	
548-10	88143-88147	deal	
548-11	88148-88152	with	
548-12	88153-88163	relational	
548-13	88164-88173	databases	
548-14	88174-88179	think	
548-15	88180-88182	of	
548-16	88183-88194	transaction	
548-17	88195-88202	commits	
548-18	88203-88205	as	
548-19	88206-88212	binary	
548-20	88213-88223	operations	
548-21	88224-88225	—	
548-22	88226-88229	the	
548-23	88230-88235	query	
548-24	88236-88238	is	
548-25	88239-88246	running	
548-26	88247-88250	and	
548-27	88251-88254	not	
548-28	88255-88258	yet	
548-29	88259-88268	committed	
548-30	88268-88269	,	
548-31	88270-88274	then	
548-32	88275-88277	it	
548-33	88278-88280	is	
548-34	88281-88290	completed	
548-35	88291-88294	and	
548-36	88295-88304	committed	
548-37	88304-88305	.	

#Text=However, internally,
#Text=there are many stages to a commit:
#Text=Write commit record to the write-ahead log
#Text=Flush the write-ahead log to durable storage
#Text=Update the pg_xact (slide 57)
#Text=Transfer to replicas
#Text=Mark the commit as visible to other sessions (ProcArrayEndTransaction() updates
#Text=PGPROC)
#Text=Communicate commit to the client
#Text=These steps are implemented in RecordTransactionCommit().
549-1	88306-88313	However	
549-2	88313-88314	,	
549-3	88315-88325	internally	
549-4	88325-88326	,	
549-5	88327-88332	there	
549-6	88333-88336	are	
549-7	88337-88341	many	
549-8	88342-88348	stages	
549-9	88349-88351	to	
549-10	88352-88353	a	
549-11	88354-88360	commit	
549-12	88360-88361	:	
549-13	88362-88367	Write	
549-14	88368-88374	commit	
549-15	88375-88381	record	
549-16	88382-88384	to	
549-17	88385-88388	the	
549-18	88389-88400	write-ahead	
549-19	88401-88404	log	
549-20	88405-88410	Flush	
549-21	88411-88414	the	
549-22	88415-88426	write-ahead	
549-23	88427-88430	log	
549-24	88431-88433	to	
549-25	88434-88441	durable	
549-26	88442-88449	storage	
549-27	88450-88456	Update	
549-28	88457-88460	the	
549-29	88461-88468	pg_xact	
549-30	88469-88470	(	
549-31	88470-88475	slide	
549-32	88476-88478	57	
549-33	88478-88479	)	
549-34	88480-88488	Transfer	
549-35	88489-88491	to	
549-36	88492-88500	replicas	
549-37	88501-88505	Mark	
549-38	88506-88509	the	
549-39	88510-88516	commit	
549-40	88517-88519	as	
549-41	88520-88527	visible	
549-42	88528-88530	to	
549-43	88531-88536	other	
549-44	88537-88545	sessions	
549-45	88546-88547	(	
549-46	88547-88570	ProcArrayEndTransaction	
549-47	88570-88571	(	
549-48	88571-88572	)	
549-49	88573-88580	updates	
549-50	88581-88587	PGPROC	
549-51	88587-88588	)	
549-52	88589-88600	Communicate	
549-53	88601-88607	commit	
549-54	88608-88610	to	
549-55	88611-88614	the	
549-56	88615-88621	client	
549-57	88622-88627	These	
549-58	88628-88633	steps	
549-59	88634-88637	are	
549-60	88638-88649	implemented	
549-61	88650-88652	in	
549-62	88653-88676	RecordTransactionCommit	
549-63	88676-88677	(	
549-64	88677-88678	)	
549-65	88678-88679	.	

#Text=What is interesting is that this process can be interrupted at anytime, by perhaps a server crash or network failure.
550-1	88680-88684	What	
550-2	88685-88687	is	
550-3	88688-88699	interesting	
550-4	88700-88702	is	
550-5	88703-88707	that	
550-6	88708-88712	this	
550-7	88713-88720	process	
550-8	88721-88724	can	
550-9	88725-88727	be	
550-10	88728-88739	interrupted	
550-11	88740-88742	at	
550-12	88743-88750	anytime	
550-13	88750-88751	,	
550-14	88752-88754	by	
550-15	88755-88762	perhaps	
550-16	88763-88764	a	
550-17	88765-88771	server	
550-18	88772-88777	crash	
550-19	88778-88780	or	
550-20	88781-88788	network	
550-21	88789-88796	failure	
550-22	88796-88797	.	

#Text=For example:
#Text=The commit could be flushed to disk but not yet visible to other clients
#Text=The commit could be replicated (and visible to queries on replicas) but not visible to queries on the primary
#Text=Queries could appear committed to other sessions before the client issuing the query receives notification
#Text=This email thread explains the problem that commit with standbys is not always an atomic
#Text=operation.
551-1	88798-88801	For	
551-2	88802-88809	example	
551-3	88809-88810	:	
551-4	88811-88814	The	
551-5	88815-88821	commit	
551-6	88822-88827	could	
551-7	88828-88830	be	
551-8	88831-88838	flushed	
551-9	88839-88841	to	
551-10	88842-88846	disk	
551-11	88847-88850	but	
551-12	88851-88854	not	
551-13	88855-88858	yet	
551-14	88859-88866	visible	
551-15	88867-88869	to	
551-16	88870-88875	other	
551-17	88876-88883	clients	
551-18	88884-88887	The	
551-19	88888-88894	commit	
551-20	88895-88900	could	
551-21	88901-88903	be	
551-22	88904-88914	replicated	
551-23	88915-88916	(	
551-24	88916-88919	and	
551-25	88920-88927	visible	
551-26	88928-88930	to	
551-27	88931-88938	queries	
551-28	88939-88941	on	
551-29	88942-88950	replicas	
551-30	88950-88951	)	
551-31	88952-88955	but	
551-32	88956-88959	not	
551-33	88960-88967	visible	
551-34	88968-88970	to	
551-35	88971-88978	queries	
551-36	88979-88981	on	
551-37	88982-88985	the	
551-38	88986-88993	primary	
551-39	88994-89001	Queries	
551-40	89002-89007	could	
551-41	89008-89014	appear	
551-42	89015-89024	committed	
551-43	89025-89027	to	
551-44	89028-89033	other	
551-45	89034-89042	sessions	
551-46	89043-89049	before	
551-47	89050-89053	the	
551-48	89054-89060	client	
551-49	89061-89068	issuing	
551-50	89069-89072	the	
551-51	89073-89078	query	
551-52	89079-89087	receives	
551-53	89088-89100	notification	
551-54	89101-89105	This	
551-55	89106-89111	email	
551-56	89112-89118	thread	
551-57	89119-89127	explains	
551-58	89128-89131	the	
551-59	89132-89139	problem	
551-60	89140-89144	that	
551-61	89145-89151	commit	
551-62	89152-89156	with	
551-63	89157-89165	standbys	
551-64	89166-89168	is	
551-65	89169-89172	not	
551-66	89173-89179	always	
551-67	89180-89182	an	
551-68	89183-89189	atomic	
551-69	89190-89199	operation	
551-70	89199-89200	.	

#Text=Postgres has the function txid_status() which allows clients to
#Text=check if a transaction, perhaps from a previous disconnected
#Text=session, was committed.
552-1	89201-89209	Postgres	
552-2	89210-89213	has	
552-3	89214-89217	the	
552-4	89218-89226	function	
552-5	89227-89238	txid_status	
552-6	89238-89239	(	
552-7	89239-89240	)	
552-8	89241-89246	which	
552-9	89247-89253	allows	
552-10	89254-89261	clients	
552-11	89262-89264	to	
552-12	89265-89270	check	
552-13	89271-89273	if	
552-14	89274-89275	a	
552-15	89276-89287	transaction	
552-16	89287-89288	,	
552-17	89289-89296	perhaps	
552-18	89297-89301	from	
552-19	89302-89303	a	
552-20	89304-89312	previous	
552-21	89313-89325	disconnected	
552-22	89326-89333	session	
552-23	89333-89334	,	
552-24	89335-89338	was	
552-25	89339-89348	committed	
552-26	89348-89349	.	

#Text=View or Post Comments
#Text=Lessons from the Online Conference Trenches
#Text=Monday, June
#Text=1, 2020
#Text=Having presented at two online conferences in the past two weeks, presenting at two this coming week, and presenting at many
#Text=edb-sponsored webinars, I have learned a few things about online presentations that might be helpful for Postgres organizers, speakers, and attendees:
#Text=For Organizers:
#Text=With no need for speakers and attendees to travel to online conferences, there are many more potential speakers available, and many more potential attendees than for in-person
#Text=conferences.
553-1	89350-89354	View	
553-2	89355-89357	or	
553-3	89358-89362	Post	
553-4	89363-89371	Comments	
553-5	89372-89379	Lessons	
553-6	89380-89384	from	
553-7	89385-89388	the	
553-8	89389-89395	Online	
553-9	89396-89406	Conference	
553-10	89407-89415	Trenches	
553-11	89416-89422	Monday	
553-12	89422-89423	,	
553-13	89424-89428	June	
553-14	89429-89430	1	
553-15	89430-89431	,	
553-16	89432-89436	2020	
553-17	89437-89443	Having	
553-18	89444-89453	presented	
553-19	89454-89456	at	
553-20	89457-89460	two	
553-21	89461-89467	online	
553-22	89468-89479	conferences	
553-23	89480-89482	in	
553-24	89483-89486	the	
553-25	89487-89491	past	
553-26	89492-89495	two	
553-27	89496-89501	weeks	
553-28	89501-89502	,	
553-29	89503-89513	presenting	
553-30	89514-89516	at	
553-31	89517-89520	two	
553-32	89521-89525	this	
553-33	89526-89532	coming	
553-34	89533-89537	week	
553-35	89537-89538	,	
553-36	89539-89542	and	
553-37	89543-89553	presenting	
553-38	89554-89556	at	
553-39	89557-89561	many	
553-40	89562-89575	edb-sponsored	
553-41	89576-89584	webinars	
553-42	89584-89585	,	
553-43	89586-89587	I	
553-44	89588-89592	have	
553-45	89593-89600	learned	
553-46	89601-89602	a	
553-47	89603-89606	few	
553-48	89607-89613	things	
553-49	89614-89619	about	
553-50	89620-89626	online	
553-51	89627-89640	presentations	
553-52	89641-89645	that	
553-53	89646-89651	might	
553-54	89652-89654	be	
553-55	89655-89662	helpful	
553-56	89663-89666	for	
553-57	89667-89675	Postgres	
553-58	89676-89686	organizers	
553-59	89686-89687	,	
553-60	89688-89696	speakers	
553-61	89696-89697	,	
553-62	89698-89701	and	
553-63	89702-89711	attendees	
553-64	89711-89712	:	
553-65	89713-89716	For	
553-66	89717-89727	Organizers	
553-67	89727-89728	:	
553-68	89729-89733	With	
553-69	89734-89736	no	
553-70	89737-89741	need	
553-71	89742-89745	for	
553-72	89746-89754	speakers	
553-73	89755-89758	and	
553-74	89759-89768	attendees	
553-75	89769-89771	to	
553-76	89772-89778	travel	
553-77	89779-89781	to	
553-78	89782-89788	online	
553-79	89789-89800	conferences	
553-80	89800-89801	,	
553-81	89802-89807	there	
553-82	89808-89811	are	
553-83	89812-89816	many	
553-84	89817-89821	more	
553-85	89822-89831	potential	
553-86	89832-89840	speakers	
553-87	89841-89850	available	
553-88	89850-89851	,	
553-89	89852-89855	and	
553-90	89856-89860	many	
553-91	89861-89865	more	
553-92	89866-89875	potential	
553-93	89876-89885	attendees	
553-94	89886-89890	than	
553-95	89891-89894	for	
553-96	89895-89904	in-person	
553-97	89905-89916	conferences	
553-98	89916-89917	.	

#Text=However, the technical challenges of hosting an online conference are significant because producing and consuming content can require multiple platforms that must be integrated seamlessly for
#Text=a positive user experience.
554-1	89918-89925	However	
554-2	89925-89926	,	
554-3	89927-89930	the	
554-4	89931-89940	technical	
554-5	89941-89951	challenges	
554-6	89952-89954	of	
554-7	89955-89962	hosting	
554-8	89963-89965	an	
554-9	89966-89972	online	
554-10	89973-89983	conference	
554-11	89984-89987	are	
554-12	89988-89999	significant	
554-13	90000-90007	because	
554-14	90008-90017	producing	
554-15	90018-90021	and	
554-16	90022-90031	consuming	
554-17	90032-90039	content	
554-18	90040-90043	can	
554-19	90044-90051	require	
554-20	90052-90060	multiple	
554-21	90061-90070	platforms	
554-22	90071-90075	that	
554-23	90076-90080	must	
554-24	90081-90083	be	
554-25	90084-90094	integrated	
554-26	90095-90105	seamlessly	
554-27	90106-90109	for	
554-28	90110-90111	a	
554-29	90112-90120	positive	
554-30	90121-90125	user	
554-31	90126-90136	experience	
554-32	90136-90137	.	

#Text=The content production platform, e.g.
555-1	90138-90141	The	
555-2	90142-90149	content	
555-3	90150-90160	production	
555-4	90161-90169	platform	
555-5	90169-90170	,	
555-6	90171-90174	e.g	
555-7	90174-90175	.	

#Text=Zoom, is often different than the consumption platform, e.g.
556-1	90176-90180	Zoom	
556-2	90180-90181	,	
556-3	90182-90184	is	
556-4	90185-90190	often	
556-5	90191-90200	different	
556-6	90201-90205	than	
556-7	90206-90209	the	
556-8	90210-90221	consumption	
556-9	90222-90230	platform	
556-10	90230-90231	,	
556-11	90232-90235	e.g	
556-12	90235-90236	.	

#Text=YouTube, Facebook Live.
557-1	90237-90244	YouTube	
557-2	90244-90245	,	
557-3	90246-90254	Facebook	
557-4	90255-90259	Live	
557-5	90259-90260	.	

#Text=If the user experience is poor, people will leave
#Text=because they are not bound to a physical location like an in-person event.
558-1	90261-90263	If	
558-2	90264-90267	the	
558-3	90268-90272	user	
558-4	90273-90283	experience	
558-5	90284-90286	is	
558-6	90287-90291	poor	
558-7	90291-90292	,	
558-8	90293-90299	people	
558-9	90300-90304	will	
558-10	90305-90310	leave	
558-11	90311-90318	because	
558-12	90319-90323	they	
558-13	90324-90327	are	
558-14	90328-90331	not	
558-15	90332-90337	bound	
558-16	90338-90340	to	
558-17	90341-90342	a	
558-18	90343-90351	physical	
558-19	90352-90360	location	
558-20	90361-90365	like	
558-21	90366-90368	an	
558-22	90369-90378	in-person	
558-23	90379-90384	event	
558-24	90384-90385	.	

#Text=Adjusting to the time zones of speakers and attendees can be complex — doing a 24-hour conference like
#Text=Precona Live (organizer tips) solves many of the time
#Text=zone problems, but requires moderators from many time zones.
559-1	90386-90395	Adjusting	
559-2	90396-90398	to	
559-3	90399-90402	the	
559-4	90403-90407	time	
559-5	90408-90413	zones	
559-6	90414-90416	of	
559-7	90417-90425	speakers	
559-8	90426-90429	and	
559-9	90430-90439	attendees	
559-10	90440-90443	can	
559-11	90444-90446	be	
559-12	90447-90454	complex	
559-13	90455-90456	—	
559-14	90457-90462	doing	
559-15	90463-90464	a	
559-16	90465-90467	24	
559-17	90467-90468	-	
559-18	90468-90472	hour	
559-19	90473-90483	conference	
559-20	90484-90488	like	
559-21	90489-90496	Precona	
559-22	90497-90501	Live	
559-23	90502-90503	(	
559-24	90503-90512	organizer	
559-25	90513-90517	tips	
559-26	90517-90518	)	
559-27	90519-90525	solves	
559-28	90526-90530	many	
559-29	90531-90533	of	
559-30	90534-90537	the	
559-31	90538-90542	time	
559-32	90543-90547	zone	
559-33	90548-90556	problems	
559-34	90556-90557	,	
559-35	90558-90561	but	
559-36	90562-90570	requires	
559-37	90571-90581	moderators	
559-38	90582-90586	from	
559-39	90587-90591	many	
559-40	90592-90596	time	
559-41	90597-90602	zones	
559-42	90602-90603	.	

#Text=The moderator's job is much more extensive for online conferences since they control access, deal with technical problems, and manage the
#Text=all-important chat channel.
560-1	90604-90607	The	
560-2	90608-90619	moderator's	
560-3	90620-90623	job	
560-4	90624-90626	is	
560-5	90627-90631	much	
560-6	90632-90636	more	
560-7	90637-90646	extensive	
560-8	90647-90650	for	
560-9	90651-90657	online	
560-10	90658-90669	conferences	
560-11	90670-90675	since	
560-12	90676-90680	they	
560-13	90681-90688	control	
560-14	90689-90695	access	
560-15	90695-90696	,	
560-16	90697-90701	deal	
560-17	90702-90706	with	
560-18	90707-90716	technical	
560-19	90717-90725	problems	
560-20	90725-90726	,	
560-21	90727-90730	and	
560-22	90731-90737	manage	
560-23	90738-90741	the	
560-24	90742-90755	all-important	
560-25	90756-90760	chat	
560-26	90761-90768	channel	
560-27	90768-90769	.	

#Text=For online conferences, chat is the best way to promote attendee engagement.
561-1	90770-90773	For	
561-2	90774-90780	online	
561-3	90781-90792	conferences	
561-4	90792-90793	,	
561-5	90794-90798	chat	
561-6	90799-90801	is	
561-7	90802-90805	the	
561-8	90806-90810	best	
561-9	90811-90814	way	
561-10	90815-90817	to	
561-11	90818-90825	promote	
561-12	90826-90834	attendee	
561-13	90835-90845	engagement	
561-14	90845-90846	.	

#Text=If chat is done well, user engagement during presentations can be even better than in-person
#Text=conferences.
562-1	90847-90849	If	
562-2	90850-90854	chat	
562-3	90855-90857	is	
562-4	90858-90862	done	
562-5	90863-90867	well	
562-6	90867-90868	,	
562-7	90869-90873	user	
562-8	90874-90884	engagement	
562-9	90885-90891	during	
562-10	90892-90905	presentations	
562-11	90906-90909	can	
562-12	90910-90912	be	
562-13	90913-90917	even	
562-14	90918-90924	better	
562-15	90925-90929	than	
562-16	90930-90939	in-person	
562-17	90940-90951	conferences	
562-18	90951-90952	.	

#Text=For Speakers:
#Text=Just like for organizers, speakers have more technical challenges than in-person conferences — it is harder to engage the audience, more things can go wrong, and attendees can more
#Text=easily leave.
563-1	90953-90956	For	
563-2	90957-90965	Speakers	
563-3	90965-90966	:	
563-4	90967-90971	Just	
563-5	90972-90976	like	
563-6	90977-90980	for	
563-7	90981-90991	organizers	
563-8	90991-90992	,	
563-9	90993-91001	speakers	
563-10	91002-91006	have	
563-11	91007-91011	more	
563-12	91012-91021	technical	
563-13	91022-91032	challenges	
563-14	91033-91037	than	
563-15	91038-91047	in-person	
563-16	91048-91059	conferences	
563-17	91060-91061	—	
563-18	91062-91064	it	
563-19	91065-91067	is	
563-20	91068-91074	harder	
563-21	91075-91077	to	
563-22	91078-91084	engage	
563-23	91085-91088	the	
563-24	91089-91097	audience	
563-25	91097-91098	,	
563-26	91099-91103	more	
563-27	91104-91110	things	
563-28	91111-91114	can	
563-29	91115-91117	go	
563-30	91118-91123	wrong	
563-31	91123-91124	,	
563-32	91125-91128	and	
563-33	91129-91138	attendees	
563-34	91139-91142	can	
563-35	91143-91147	more	
563-36	91148-91154	easily	
563-37	91155-91160	leave	
563-38	91160-91161	.	

#Text=As a speaker, I have a checklist that I always references before each presentation:
#Text=Mute phone, chat, email, and upgrade notifications
#Text=Use a laptop on AC power with wired Ethernet, for reliability
#Text=Have a count-up clock to keep track of the talk duration
#Text=Use a headset so you don't lean toward a microphone
#Text=Use a presentation remote so you don't lean forward to change slides
#Text=Turn on your video camera to increase audience engagement
#Text=Make sure the lighting is good and the background is uncluttered
#Text=For attendees:
#Text=Many online conferences are a mix of different technologies, not always seamlessly integrated, so anticipate that it will take time to get initially connected.
564-1	91162-91164	As	
564-2	91165-91166	a	
564-3	91167-91174	speaker	
564-4	91174-91175	,	
564-5	91176-91177	I	
564-6	91178-91182	have	
564-7	91183-91184	a	
564-8	91185-91194	checklist	
564-9	91195-91199	that	
564-10	91200-91201	I	
564-11	91202-91208	always	
564-12	91209-91219	references	
564-13	91220-91226	before	
564-14	91227-91231	each	
564-15	91232-91244	presentation	
564-16	91244-91245	:	
564-17	91246-91250	Mute	
564-18	91251-91256	phone	
564-19	91256-91257	,	
564-20	91258-91262	chat	
564-21	91262-91263	,	
564-22	91264-91269	email	
564-23	91269-91270	,	
564-24	91271-91274	and	
564-25	91275-91282	upgrade	
564-26	91283-91296	notifications	
564-27	91297-91300	Use	
564-28	91301-91302	a	
564-29	91303-91309	laptop	
564-30	91310-91312	on	
564-31	91313-91315	AC	
564-32	91316-91321	power	
564-33	91322-91326	with	
564-34	91327-91332	wired	
564-35	91333-91341	Ethernet	
564-36	91341-91342	,	
564-37	91343-91346	for	
564-38	91347-91358	reliability	
564-39	91359-91363	Have	
564-40	91364-91365	a	
564-41	91366-91374	count-up	
564-42	91375-91380	clock	
564-43	91381-91383	to	
564-44	91384-91388	keep	
564-45	91389-91394	track	
564-46	91395-91397	of	
564-47	91398-91401	the	
564-48	91402-91406	talk	
564-49	91407-91415	duration	
564-50	91416-91419	Use	
564-51	91420-91421	a	
564-52	91422-91429	headset	
564-53	91430-91432	so	
564-54	91433-91436	you	
564-55	91437-91442	don't	
564-56	91443-91447	lean	
564-57	91448-91454	toward	
564-58	91455-91456	a	
564-59	91457-91467	microphone	
564-60	91468-91471	Use	
564-61	91472-91473	a	
564-62	91474-91486	presentation	
564-63	91487-91493	remote	
564-64	91494-91496	so	
564-65	91497-91500	you	
564-66	91501-91506	don't	
564-67	91507-91511	lean	
564-68	91512-91519	forward	
564-69	91520-91522	to	
564-70	91523-91529	change	
564-71	91530-91536	slides	
564-72	91537-91541	Turn	
564-73	91542-91544	on	
564-74	91545-91549	your	
564-75	91550-91555	video	
564-76	91556-91562	camera	
564-77	91563-91565	to	
564-78	91566-91574	increase	
564-79	91575-91583	audience	
564-80	91584-91594	engagement	
564-81	91595-91599	Make	
564-82	91600-91604	sure	
564-83	91605-91608	the	
564-84	91609-91617	lighting	
564-85	91618-91620	is	
564-86	91621-91625	good	
564-87	91626-91629	and	
564-88	91630-91633	the	
564-89	91634-91644	background	
564-90	91645-91647	is	
564-91	91648-91659	uncluttered	
564-92	91660-91663	For	
564-93	91664-91673	attendees	
564-94	91673-91674	:	
564-95	91675-91679	Many	
564-96	91680-91686	online	
564-97	91687-91698	conferences	
564-98	91699-91702	are	
564-99	91703-91704	a	
564-100	91705-91708	mix	
564-101	91709-91711	of	
564-102	91712-91721	different	
564-103	91722-91734	technologies	
564-104	91734-91735	,	
564-105	91736-91739	not	
564-106	91740-91746	always	
564-107	91747-91757	seamlessly	
564-108	91758-91768	integrated	
564-109	91768-91769	,	
564-110	91770-91772	so	
564-111	91773-91783	anticipate	
564-112	91784-91788	that	
564-113	91789-91791	it	
564-114	91792-91796	will	
564-115	91797-91801	take	
564-116	91802-91806	time	
564-117	91807-91809	to	
564-118	91810-91813	get	
564-119	91814-91823	initially	
564-120	91824-91833	connected	
564-121	91833-91834	.	

#Text=Consider watching the
#Text=conference on a large television, or from a tablet you can carry around.
565-1	91835-91843	Consider	
565-2	91844-91852	watching	
565-3	91853-91856	the	
565-4	91857-91867	conference	
565-5	91868-91870	on	
565-6	91871-91872	a	
565-7	91873-91878	large	
565-8	91879-91889	television	
565-9	91889-91890	,	
565-10	91891-91893	or	
565-11	91894-91898	from	
565-12	91899-91900	a	
565-13	91901-91907	tablet	
565-14	91908-91911	you	
565-15	91912-91915	can	
565-16	91916-91921	carry	
565-17	91922-91928	around	
565-18	91928-91929	.	

#Text=Use chat to engage with the speaker and other attendees.
566-1	91930-91933	Use	
566-2	91934-91938	chat	
566-3	91939-91941	to	
566-4	91942-91948	engage	
566-5	91949-91953	with	
566-6	91954-91957	the	
566-7	91958-91965	speaker	
566-8	91966-91969	and	
566-9	91970-91975	other	
566-10	91976-91985	attendees	
566-11	91985-91986	.	

#Text=Feel free to switch to a more interesting presentation without guilt.
567-1	91987-91991	Feel	
567-2	91992-91996	free	
567-3	91997-91999	to	
567-4	92000-92006	switch	
567-5	92007-92009	to	
567-6	92010-92011	a	
567-7	92012-92016	more	
567-8	92017-92028	interesting	
567-9	92029-92041	presentation	
567-10	92042-92049	without	
567-11	92050-92055	guilt	
567-12	92055-92056	.	

#Text=When you get frustrated, consider how much time you are saving by not having to travel.
568-1	92057-92061	When	
568-2	92062-92065	you	
568-3	92066-92069	get	
568-4	92070-92080	frustrated	
568-5	92080-92081	,	
568-6	92082-92090	consider	
568-7	92091-92094	how	
568-8	92095-92099	much	
568-9	92100-92104	time	
568-10	92105-92108	you	
568-11	92109-92112	are	
568-12	92113-92119	saving	
568-13	92120-92122	by	
568-14	92123-92126	not	
568-15	92127-92133	having	
568-16	92134-92136	to	
568-17	92137-92143	travel	
568-18	92143-92144	.	

#Text=View or Post Comments
#Text=Visualizing Collations
#Text=Friday, May 29, 2020
#Text=There is still significant confusion about characters sets, encodings, and collations.
569-1	92145-92149	View	
569-2	92150-92152	or	
569-3	92153-92157	Post	
569-4	92158-92166	Comments	
569-5	92167-92178	Visualizing	
569-6	92179-92189	Collations	
569-7	92190-92196	Friday	
569-8	92196-92197	,	
569-9	92198-92201	May	
569-10	92202-92204	29	
569-11	92204-92205	,	
569-12	92206-92210	2020	
569-13	92211-92216	There	
569-14	92217-92219	is	
569-15	92220-92225	still	
569-16	92226-92237	significant	
569-17	92238-92247	confusion	
569-18	92248-92253	about	
569-19	92254-92264	characters	
569-20	92265-92269	sets	
569-21	92269-92270	,	
569-22	92271-92280	encodings	
569-23	92280-92281	,	
569-24	92282-92285	and	
569-25	92286-92296	collations	
569-26	92296-92297	.	

#Text=This is because in the real, non-digital world, we
#Text=usually treat languages, their characters, and ordering as unified, but in the digital world, they are treated separately, and their distinction can be hard to visualize.
570-1	92298-92302	This	
570-2	92303-92305	is	
570-3	92306-92313	because	
570-4	92314-92316	in	
570-5	92317-92320	the	
570-6	92321-92325	real	
570-7	92325-92326	,	
570-8	92327-92338	non-digital	
570-9	92339-92344	world	
570-10	92344-92345	,	
570-11	92346-92348	we	
570-12	92349-92356	usually	
570-13	92357-92362	treat	
570-14	92363-92372	languages	
570-15	92372-92373	,	
570-16	92374-92379	their	
570-17	92380-92390	characters	
570-18	92390-92391	,	
570-19	92392-92395	and	
570-20	92396-92404	ordering	
570-21	92405-92407	as	
570-22	92408-92415	unified	
570-23	92415-92416	,	
570-24	92417-92420	but	
570-25	92421-92423	in	
570-26	92424-92427	the	
570-27	92428-92435	digital	
570-28	92436-92441	world	
570-29	92441-92442	,	
570-30	92443-92447	they	
570-31	92448-92451	are	
570-32	92452-92459	treated	
570-33	92460-92470	separately	
570-34	92470-92471	,	
570-35	92472-92475	and	
570-36	92476-92481	their	
570-37	92482-92493	distinction	
570-38	92494-92497	can	
570-39	92498-92500	be	
570-40	92501-92505	hard	
570-41	92506-92508	to	
570-42	92509-92518	visualize	
570-43	92518-92519	.	

#Text=These two posted queries illustrate collation in a very creative way.
571-1	92520-92525	These	
571-2	92526-92529	two	
571-3	92530-92536	posted	
571-4	92537-92544	queries	
571-5	92545-92555	illustrate	
571-6	92556-92565	collation	
571-7	92566-92568	in	
571-8	92569-92570	a	
571-9	92571-92575	very	
571-10	92576-92584	creative	
571-11	92585-92588	way	
571-12	92588-92589	.	

#Text=The first query, SELECT
#Text=chr(i) FROM generate_series(1, 50000) i ORDER BY chr(i) COLLATE "C", outputs characters in their "C" binary order, with ascii as the first 128 characters, successive groups of languages
#Text=following, and ending with pictographic languages.
572-1	92590-92593	The	
572-2	92594-92599	first	
572-3	92600-92605	query	
572-4	92605-92606	,	
572-5	92607-92613	SELECT	
572-6	92614-92617	chr	
572-7	92617-92618	(	
572-8	92618-92619	i	
572-9	92619-92620	)	
572-10	92621-92625	FROM	
572-11	92626-92641	generate_series	
572-12	92641-92642	(	
572-13	92642-92643	1	
572-14	92643-92644	,	
572-15	92645-92650	50000	
572-16	92650-92651	)	
572-17	92652-92653	i	
572-18	92654-92659	ORDER	
572-19	92660-92662	BY	
572-20	92663-92666	chr	
572-21	92666-92667	(	
572-22	92667-92668	i	
572-23	92668-92669	)	
572-24	92670-92677	COLLATE	
572-25	92678-92679	"	
572-26	92679-92680	C	
572-27	92680-92681	"	
572-28	92681-92682	,	
572-29	92683-92690	outputs	
572-30	92691-92701	characters	
572-31	92702-92704	in	
572-32	92705-92710	their	
572-33	92711-92712	"	
572-34	92712-92713	C	
572-35	92713-92714	"	
572-36	92715-92721	binary	
572-37	92722-92727	order	
572-38	92727-92728	,	
572-39	92729-92733	with	
572-40	92734-92739	ascii	
572-41	92740-92742	as	
572-42	92743-92746	the	
572-43	92747-92752	first	
572-44	92753-92756	128	
572-45	92757-92767	characters	
572-46	92767-92768	,	
572-47	92769-92779	successive	
572-48	92780-92786	groups	
572-49	92787-92789	of	
572-50	92790-92799	languages	
572-51	92800-92809	following	
572-52	92809-92810	,	
572-53	92811-92814	and	
572-54	92815-92821	ending	
572-55	92822-92826	with	
572-56	92827-92839	pictographic	
572-57	92840-92849	languages	
572-58	92849-92850	.	

#Text=The second query, SELECT chr(i) FROM generate_series(1, 50000) i ORDER BY chr(i) COLLATE "en_US.utf8", outputs the same 50,000 characters in "United States English" utf8 order.
573-1	92851-92854	The	
573-2	92855-92861	second	
573-3	92862-92867	query	
573-4	92867-92868	,	
573-5	92869-92875	SELECT	
573-6	92876-92879	chr	
573-7	92879-92880	(	
573-8	92880-92881	i	
573-9	92881-92882	)	
573-10	92883-92887	FROM	
573-11	92888-92903	generate_series	
573-12	92903-92904	(	
573-13	92904-92905	1	
573-14	92905-92906	,	
573-15	92907-92912	50000	
573-16	92912-92913	)	
573-17	92914-92915	i	
573-18	92916-92921	ORDER	
573-19	92922-92924	BY	
573-20	92925-92928	chr	
573-21	92928-92929	(	
573-22	92929-92930	i	
573-23	92930-92931	)	
573-24	92932-92939	COLLATE	
573-25	92940-92941	"	
573-26	92941-92951	en_US.utf8	
573-27	92951-92952	"	
573-28	92952-92953	,	
573-29	92954-92961	outputs	
573-30	92962-92965	the	
573-31	92966-92970	same	
573-32	92971-92977	50,000	
573-33	92978-92988	characters	
573-34	92989-92991	in	
573-35	92992-92993	"	
573-36	92993-92999	United	
573-37	93000-93006	States	
573-38	93007-93014	English	
573-39	93014-93015	"	
573-40	93016-93020	utf8	
573-41	93021-93026	order	
573-42	93026-93027	.	

#Text=The
#Text=output starts with pictographic languages, not ascii.
574-1	93028-93031	The	
574-2	93032-93038	output	
574-3	93039-93045	starts	
574-4	93046-93050	with	
574-5	93051-93063	pictographic	
574-6	93064-93073	languages	
574-7	93073-93074	,	
574-8	93075-93078	not	
574-9	93079-93084	ascii	
574-10	93084-93085	.	

#Text=The Latin alphabet appears, but not until line 19068.
575-1	93086-93089	The	
575-2	93090-93095	Latin	
575-3	93096-93104	alphabet	
575-4	93105-93112	appears	
575-5	93112-93113	,	
575-6	93114-93117	but	
575-7	93118-93121	not	
575-8	93122-93127	until	
575-9	93128-93132	line	
575-10	93133-93138	19068	
575-11	93138-93139	.	

#Text=What is interesting is that there are 118 symbols grouped together that look like 'a',
#Text='a' with diacritics, or have 'a' as part of their symbol.
576-1	93140-93144	What	
576-2	93145-93147	is	
576-3	93148-93159	interesting	
576-4	93160-93162	is	
576-5	93163-93167	that	
576-6	93168-93173	there	
576-7	93174-93177	are	
576-8	93178-93181	118	
576-9	93182-93189	symbols	
576-10	93190-93197	grouped	
576-11	93198-93206	together	
576-12	93207-93211	that	
576-13	93212-93216	look	
576-14	93217-93221	like	
576-15	93222-93223	'	
576-16	93223-93224	a	
576-17	93224-93225	'	
576-18	93225-93226	,	
576-19	93227-93228	'	
576-20	93228-93229	a	
576-21	93229-93230	'	
576-22	93231-93235	with	
576-23	93236-93246	diacritics	
576-24	93246-93247	,	
576-25	93248-93250	or	
576-26	93251-93255	have	
576-27	93256-93257	'	
576-28	93257-93258	a	
576-29	93258-93259	'	
576-30	93260-93262	as	
576-31	93263-93267	part	
576-32	93268-93270	of	
576-33	93271-93276	their	
576-34	93277-93283	symbol	
576-35	93283-93284	.	

#Text=Then 'b' appears with a group of 38 symbols that look like or use 'b', and so on through the Latin
#Text=alphabet.
577-1	93285-93289	Then	
577-2	93290-93291	'	
577-3	93291-93292	b	
577-4	93292-93293	'	
577-5	93294-93301	appears	
577-6	93302-93306	with	
577-7	93307-93308	a	
577-8	93309-93314	group	
577-9	93315-93317	of	
577-10	93318-93320	38	
577-11	93321-93328	symbols	
577-12	93329-93333	that	
577-13	93334-93338	look	
577-14	93339-93343	like	
577-15	93344-93346	or	
577-16	93347-93350	use	
577-17	93351-93352	'	
577-18	93352-93353	b	
577-19	93353-93354	'	
577-20	93354-93355	,	
577-21	93356-93359	and	
577-22	93360-93362	so	
577-23	93363-93365	on	
577-24	93366-93373	through	
577-25	93374-93377	the	
577-26	93378-93383	Latin	
577-27	93384-93392	alphabet	
577-28	93392-93393	.	

#Text=(If you highlight a character and paste it into a search box, Google will tell you about that Unicode symbol.)
578-1	93394-93395	(	
578-2	93395-93397	If	
578-3	93398-93401	you	
578-4	93402-93411	highlight	
578-5	93412-93413	a	
578-6	93414-93423	character	
578-7	93424-93427	and	
578-8	93428-93433	paste	
578-9	93434-93436	it	
578-10	93437-93441	into	
578-11	93442-93443	a	
578-12	93444-93450	search	
578-13	93451-93454	box	
578-14	93454-93455	,	
578-15	93456-93462	Google	
578-16	93463-93467	will	
578-17	93468-93472	tell	
578-18	93473-93476	you	
578-19	93477-93482	about	
578-20	93483-93487	that	
578-21	93488-93495	Unicode	
578-22	93496-93502	symbol	
578-23	93502-93503	.	
578-24	93503-93504	)	

#Text=I found it interesting that it groups letters that look like Latin letters, even if the they are not from Latin alphabets and don't sound like Latin letters.
579-1	93505-93506	I	
579-2	93507-93512	found	
579-3	93513-93515	it	
579-4	93516-93527	interesting	
579-5	93528-93532	that	
579-6	93533-93535	it	
579-7	93536-93542	groups	
579-8	93543-93550	letters	
579-9	93551-93555	that	
579-10	93556-93560	look	
579-11	93561-93565	like	
579-12	93566-93571	Latin	
579-13	93572-93579	letters	
579-14	93579-93580	,	
579-15	93581-93585	even	
579-16	93586-93588	if	
579-17	93589-93592	the	
579-18	93593-93597	they	
579-19	93598-93601	are	
579-20	93602-93605	not	
579-21	93606-93610	from	
579-22	93611-93616	Latin	
579-23	93617-93626	alphabets	
579-24	93627-93630	and	
579-25	93631-93636	don't	
579-26	93637-93642	sound	
579-27	93643-93647	like	
579-28	93648-93653	Latin	
579-29	93654-93661	letters	
579-30	93661-93662	.	

#Text=Cyrillic is grouped in a section after the Latin alphabet section.
580-1	93663-93671	Cyrillic	
580-2	93672-93674	is	
580-3	93675-93682	grouped	
580-4	93683-93685	in	
580-5	93686-93687	a	
580-6	93688-93695	section	
580-7	93696-93701	after	
580-8	93702-93705	the	
580-9	93706-93711	Latin	
580-10	93712-93720	alphabet	
580-11	93721-93728	section	
580-12	93728-93729	.	

#Text=These sql queries are the clearest example I have seen of
#Text=collation ordering.
581-1	93730-93735	These	
581-2	93736-93739	sql	
581-3	93740-93747	queries	
581-4	93748-93751	are	
581-5	93752-93755	the	
581-6	93756-93764	clearest	
581-7	93765-93772	example	
581-8	93773-93774	I	
581-9	93775-93779	have	
581-10	93780-93784	seen	
581-11	93785-93787	of	
581-12	93788-93797	collation	
581-13	93798-93806	ordering	
581-14	93806-93807	.	

#Text=If I had used a different collation, instead of "United States English", there would have been a different ordering.
582-1	93808-93810	If	
582-2	93811-93812	I	
582-3	93813-93816	had	
582-4	93817-93821	used	
582-5	93822-93823	a	
582-6	93824-93833	different	
582-7	93834-93843	collation	
582-8	93843-93844	,	
582-9	93845-93852	instead	
582-10	93853-93855	of	
582-11	93856-93857	"	
582-12	93857-93863	United	
582-13	93864-93870	States	
582-14	93871-93878	English	
582-15	93878-93879	"	
582-16	93879-93880	,	
582-17	93881-93886	there	
582-18	93887-93892	would	
582-19	93893-93897	have	
582-20	93898-93902	been	
582-21	93903-93904	a	
582-22	93905-93914	different	
582-23	93915-93923	ordering	
582-24	93923-93924	.	

#Text=This is why index storage is sensitive to collations, i.e., indexes with different
#Text=collations store the same stings in a different order.
583-1	93925-93929	This	
583-2	93930-93932	is	
583-3	93933-93936	why	
583-4	93937-93942	index	
583-5	93943-93950	storage	
583-6	93951-93953	is	
583-7	93954-93963	sensitive	
583-8	93964-93966	to	
583-9	93967-93977	collations	
583-10	93977-93978	,	
583-11	93979-93982	i.e	
583-12	93982-93983	.	
583-13	93983-93984	,	
583-14	93985-93992	indexes	
583-15	93993-93997	with	
583-16	93998-94007	different	
583-17	94008-94018	collations	
583-18	94019-94024	store	
583-19	94025-94028	the	
583-20	94029-94033	same	
583-21	94034-94040	stings	
583-22	94041-94043	in	
583-23	94044-94045	a	
583-24	94046-94055	different	
583-25	94056-94061	order	
583-26	94061-94062	.	

#Text=Collation affects other things like upper/lower case processing, the ordering of query output, and certain optimizations.
584-1	94063-94072	Collation	
584-2	94073-94080	affects	
584-3	94081-94086	other	
584-4	94087-94093	things	
584-5	94094-94098	like	
584-6	94099-94104	upper	
584-7	94104-94105	/	
584-8	94105-94110	lower	
584-9	94111-94115	case	
584-10	94116-94126	processing	
584-11	94126-94127	,	
584-12	94128-94131	the	
584-13	94132-94140	ordering	
584-14	94141-94143	of	
584-15	94144-94149	query	
584-16	94150-94156	output	
584-17	94156-94157	,	
584-18	94158-94161	and	
584-19	94162-94169	certain	
584-20	94170-94183	optimizations	
584-21	94183-94184	.	

#Text=View or Post Comments
#Text=What is an Lsn?
585-1	94185-94189	View	
585-2	94190-94192	or	
585-3	94193-94197	Post	
585-4	94198-94206	Comments	
585-5	94207-94211	What	
585-6	94212-94214	is	
585-7	94215-94217	an	
585-8	94218-94221	Lsn	
585-9	94221-94222	?	

#Text=Wednesday, May 27, 2020
#Text=You might have seen that there is a pg_lsn data type:
#Text=test=> \\dTS pg_lsn
#Text=List of data types
#Text=Schema
#Text=Name
#Text=Description
#Text=------------+--------+-------------------------
#Text=pg_catalog | pg_lsn | PostgreSQL LSN datatype
#Text=Client programs pg_receivewal and pg_recvlogical have options that take
#Text=lsn values, but what is an lsn?
586-1	94223-94232	Wednesday	
586-2	94232-94233	,	
586-3	94234-94237	May	
586-4	94238-94240	27	
586-5	94240-94241	,	
586-6	94242-94246	2020	
586-7	94247-94250	You	
586-8	94251-94256	might	
586-9	94257-94261	have	
586-10	94262-94266	seen	
586-11	94267-94271	that	
586-12	94272-94277	there	
586-13	94278-94280	is	
586-14	94281-94282	a	
586-15	94283-94289	pg_lsn	
586-16	94290-94294	data	
586-17	94295-94299	type	
586-18	94299-94300	:	
586-19	94301-94305	test	
586-20	94305-94306	=	
586-21	94306-94307	>	
586-22	94308-94309	\	
586-23	94309-94312	dTS	
586-24	94313-94319	pg_lsn	
586-25	94320-94324	List	
586-26	94325-94327	of	
586-27	94328-94332	data	
586-28	94333-94338	types	
586-29	94339-94345	Schema	
586-30	94346-94350	Name	
586-31	94351-94362	Description	
586-32	94363-94364	-	
586-33	94364-94365	-	
586-34	94365-94366	-	
586-35	94366-94367	-	
586-36	94367-94368	-	
586-37	94368-94369	-	
586-38	94369-94370	-	
586-39	94370-94371	-	
586-40	94371-94372	-	
586-41	94372-94373	-	
586-42	94373-94374	-	
586-43	94374-94375	-	
586-44	94375-94376	+	
586-45	94376-94377	-	
586-46	94377-94378	-	
586-47	94378-94379	-	
586-48	94379-94380	-	
586-49	94380-94381	-	
586-50	94381-94382	-	
586-51	94382-94383	-	
586-52	94383-94384	-	
586-53	94384-94385	+	
586-54	94385-94386	-	
586-55	94386-94387	-	
586-56	94387-94388	-	
586-57	94388-94389	-	
586-58	94389-94390	-	
586-59	94390-94391	-	
586-60	94391-94392	-	
586-61	94392-94393	-	
586-62	94393-94394	-	
586-63	94394-94395	-	
586-64	94395-94396	-	
586-65	94396-94397	-	
586-66	94397-94398	-	
586-67	94398-94399	-	
586-68	94399-94400	-	
586-69	94400-94401	-	
586-70	94401-94402	-	
586-71	94402-94403	-	
586-72	94403-94404	-	
586-73	94404-94405	-	
586-74	94405-94406	-	
586-75	94406-94407	-	
586-76	94407-94408	-	
586-77	94408-94409	-	
586-78	94409-94410	-	
586-79	94411-94421	pg_catalog	
586-80	94422-94423	|	
586-81	94424-94430	pg_lsn	
586-82	94431-94432	|	
586-83	94433-94443	PostgreSQL	
586-84	94444-94447	LSN	
586-85	94448-94456	datatype	
586-86	94457-94463	Client	
586-87	94464-94472	programs	
586-88	94473-94486	pg_receivewal	
586-89	94487-94490	and	
586-90	94491-94505	pg_recvlogical	
586-91	94506-94510	have	
586-92	94511-94518	options	
586-93	94519-94523	that	
586-94	94524-94528	take	
586-95	94529-94532	lsn	
586-96	94533-94539	values	
586-97	94539-94540	,	
586-98	94541-94544	but	
586-99	94545-94549	what	
586-100	94550-94552	is	
586-101	94553-94555	an	
586-102	94556-94559	lsn	
586-103	94559-94560	?	

#Text=It stands for "Log Sequence Number" — it is a 64-bit value that represents a position in the write-ahead
#Text=log.
587-1	94561-94563	It	
587-2	94564-94570	stands	
587-3	94571-94574	for	
587-4	94575-94576	"	
587-5	94576-94579	Log	
587-6	94580-94588	Sequence	
587-7	94589-94595	Number	
587-8	94595-94596	"	
587-9	94597-94598	—	
587-10	94599-94601	it	
587-11	94602-94604	is	
587-12	94605-94606	a	
587-13	94607-94609	64	
587-14	94609-94610	-	
587-15	94610-94613	bit	
587-16	94614-94619	value	
587-17	94620-94624	that	
587-18	94625-94635	represents	
587-19	94636-94637	a	
587-20	94638-94646	position	
587-21	94647-94649	in	
587-22	94650-94653	the	
587-23	94654-94665	write-ahead	
587-24	94666-94669	log	
587-25	94669-94670	.	

#Text=It is usually displayed as two 32-bit hex values, separated by a slash.
588-1	94671-94673	It	
588-2	94674-94676	is	
588-3	94677-94684	usually	
588-4	94685-94694	displayed	
588-5	94695-94697	as	
588-6	94698-94701	two	
588-7	94702-94704	32	
588-8	94704-94705	-	
588-9	94705-94708	bit	
588-10	94709-94712	hex	
588-11	94713-94719	values	
588-12	94719-94720	,	
588-13	94721-94730	separated	
588-14	94731-94733	by	
588-15	94734-94735	a	
588-16	94736-94741	slash	
588-17	94741-94742	.	

#Text=For example, pg_controldata displays lsn values:
#Text=$ pg_controldata
#Text=Latest checkpoint location:
#Text=0/15AE1B8
#Text=Latest checkpoint's REDO location:
#Text=0/15AE180
#Text=So, the next time you view or need to specify a write-ahead log location, you are using an lsn.
589-1	94743-94746	For	
589-2	94747-94754	example	
589-3	94754-94755	,	
589-4	94756-94770	pg_controldata	
589-5	94771-94779	displays	
589-6	94780-94783	lsn	
589-7	94784-94790	values	
589-8	94790-94791	:	
589-9	94792-94793	$	
589-10	94794-94808	pg_controldata	
589-11	94809-94815	Latest	
589-12	94816-94826	checkpoint	
589-13	94827-94835	location	
589-14	94835-94836	:	
589-15	94837-94838	0	
589-16	94838-94839	/	
589-17	94839-94846	15AE1B8	
589-18	94847-94853	Latest	
589-19	94854-94866	checkpoint's	
589-20	94867-94871	REDO	
589-21	94872-94880	location	
589-22	94880-94881	:	
589-23	94882-94883	0	
589-24	94883-94884	/	
589-25	94884-94891	15AE180	
589-26	94892-94894	So	
589-27	94894-94895	,	
589-28	94896-94899	the	
589-29	94900-94904	next	
589-30	94905-94909	time	
589-31	94910-94913	you	
589-32	94914-94918	view	
589-33	94919-94921	or	
589-34	94922-94926	need	
589-35	94927-94929	to	
589-36	94930-94937	specify	
589-37	94938-94939	a	
589-38	94940-94951	write-ahead	
589-39	94952-94955	log	
589-40	94956-94964	location	
589-41	94964-94965	,	
589-42	94966-94969	you	
589-43	94970-94973	are	
589-44	94974-94979	using	
589-45	94980-94982	an	
589-46	94983-94986	lsn	
589-47	94986-94987	.	

#Text=View or Post Comments
#Text=Taking Snapshots of Clusters Which Use Tablespaces
#Text=Monday, May 25, 2020
#Text=Postgres already documents the ability to backup the database cluster using file
#Text=system snapshots.
590-1	94988-94992	View	
590-2	94993-94995	or	
590-3	94996-95000	Post	
590-4	95001-95009	Comments	
590-5	95010-95016	Taking	
590-6	95017-95026	Snapshots	
590-7	95027-95029	of	
590-8	95030-95038	Clusters	
590-9	95039-95044	Which	
590-10	95045-95048	Use	
590-11	95049-95060	Tablespaces	
590-12	95061-95067	Monday	
590-13	95067-95068	,	
590-14	95069-95072	May	
590-15	95073-95075	25	
590-16	95075-95076	,	
590-17	95077-95081	2020	
590-18	95082-95090	Postgres	
590-19	95091-95098	already	
590-20	95099-95108	documents	
590-21	95109-95112	the	
590-22	95113-95120	ability	
590-23	95121-95123	to	
590-24	95124-95130	backup	
590-25	95131-95134	the	
590-26	95135-95143	database	
590-27	95144-95151	cluster	
590-28	95152-95157	using	
590-29	95158-95162	file	
590-30	95163-95169	system	
590-31	95170-95179	snapshots	
590-32	95179-95180	.	

#Text=Unfortunately, database clusters that use tablespaces often cannot use this method if the storage system doesn't
#Text=support simultaneous snapshots across file systems.
591-1	95181-95194	Unfortunately	
591-2	95194-95195	,	
591-3	95196-95204	database	
591-4	95205-95213	clusters	
591-5	95214-95218	that	
591-6	95219-95222	use	
591-7	95223-95234	tablespaces	
591-8	95235-95240	often	
591-9	95241-95247	cannot	
591-10	95248-95251	use	
591-11	95252-95256	this	
591-12	95257-95263	method	
591-13	95264-95266	if	
591-14	95267-95270	the	
591-15	95271-95278	storage	
591-16	95279-95285	system	
591-17	95286-95293	doesn't	
591-18	95294-95301	support	
591-19	95302-95314	simultaneous	
591-20	95315-95324	snapshots	
591-21	95325-95331	across	
591-22	95332-95336	file	
591-23	95337-95344	systems	
591-24	95344-95345	.	

#Text=However, simultaneous snapshots across file systems might not be a hard requirement for Postgres snapshot backups.
592-1	95346-95353	However	
592-2	95353-95354	,	
592-3	95355-95367	simultaneous	
592-4	95368-95377	snapshots	
592-5	95378-95384	across	
592-6	95385-95389	file	
592-7	95390-95397	systems	
592-8	95398-95403	might	
592-9	95404-95407	not	
592-10	95408-95410	be	
592-11	95411-95412	a	
592-12	95413-95417	hard	
592-13	95418-95429	requirement	
592-14	95430-95433	for	
592-15	95434-95442	Postgres	
592-16	95443-95451	snapshot	
592-17	95452-95459	backups	
592-18	95459-95460	.	

#Text=It might be possible for snapshots to be non-simultaneous as long as the
#Text=write-ahead log that spans the time frame between snapshots is included in the backup, and
#Text=checkpoints do not happen during that time frame.
593-1	95461-95463	It	
593-2	95464-95469	might	
593-3	95470-95472	be	
593-4	95473-95481	possible	
593-5	95482-95485	for	
593-6	95486-95495	snapshots	
593-7	95496-95498	to	
593-8	95499-95501	be	
593-9	95502-95518	non-simultaneous	
593-10	95519-95521	as	
593-11	95522-95526	long	
593-12	95527-95529	as	
593-13	95530-95533	the	
593-14	95534-95545	write-ahead	
593-15	95546-95549	log	
593-16	95550-95554	that	
593-17	95555-95560	spans	
593-18	95561-95564	the	
593-19	95565-95569	time	
593-20	95570-95575	frame	
593-21	95576-95583	between	
593-22	95584-95593	snapshots	
593-23	95594-95596	is	
593-24	95597-95605	included	
593-25	95606-95608	in	
593-26	95609-95612	the	
593-27	95613-95619	backup	
593-28	95619-95620	,	
593-29	95621-95624	and	
593-30	95625-95636	checkpoints	
593-31	95637-95639	do	
593-32	95640-95643	not	
593-33	95644-95650	happen	
593-34	95651-95657	during	
593-35	95658-95662	that	
593-36	95663-95667	time	
593-37	95668-95673	frame	
593-38	95673-95674	.	

#Text=Internally, starting Postgres from a snapshot backup replays write-ahead log records to make a single file system snapshot consistent.
594-1	95675-95685	Internally	
594-2	95685-95686	,	
594-3	95687-95695	starting	
594-4	95696-95704	Postgres	
594-5	95705-95709	from	
594-6	95710-95711	a	
594-7	95712-95720	snapshot	
594-8	95721-95727	backup	
594-9	95728-95735	replays	
594-10	95736-95747	write-ahead	
594-11	95748-95751	log	
594-12	95752-95759	records	
594-13	95760-95762	to	
594-14	95763-95767	make	
594-15	95768-95769	a	
594-16	95770-95776	single	
594-17	95777-95781	file	
594-18	95782-95788	system	
594-19	95789-95797	snapshot	
594-20	95798-95808	consistent	
594-21	95808-95809	.	

#Text=Potentially, it could do the same for non-simultaneous snapshots of
#Text=multiple file systems.
595-1	95810-95821	Potentially	
595-2	95821-95822	,	
595-3	95823-95825	it	
595-4	95826-95831	could	
595-5	95832-95834	do	
595-6	95835-95838	the	
595-7	95839-95843	same	
595-8	95844-95847	for	
595-9	95848-95864	non-simultaneous	
595-10	95865-95874	snapshots	
595-11	95875-95877	of	
595-12	95878-95886	multiple	
595-13	95887-95891	file	
595-14	95892-95899	systems	
595-15	95899-95900	.	

#Text=However, documenting this, giving users a reliable list of steps to perform, and making sure it always works is probably too complex to justify.
596-1	95901-95908	However	
596-2	95908-95909	,	
596-3	95910-95921	documenting	
596-4	95922-95926	this	
596-5	95926-95927	,	
596-6	95928-95934	giving	
596-7	95935-95940	users	
596-8	95941-95942	a	
596-9	95943-95951	reliable	
596-10	95952-95956	list	
596-11	95957-95959	of	
596-12	95960-95965	steps	
596-13	95966-95968	to	
596-14	95969-95976	perform	
596-15	95976-95977	,	
596-16	95978-95981	and	
596-17	95982-95988	making	
596-18	95989-95993	sure	
596-19	95994-95996	it	
596-20	95997-96003	always	
596-21	96004-96009	works	
596-22	96010-96012	is	
596-23	96013-96021	probably	
596-24	96022-96025	too	
596-25	96026-96033	complex	
596-26	96034-96036	to	
596-27	96037-96044	justify	
596-28	96044-96045	.	

#Text=View or Post Comments
#Text=Moving Tables, Indexes, and Tablespaces Between Clusters
#Text=Friday, May 22, 2020
#Text=Currently, it is impossible to move tables, indexes, and entire tablespaces from one cluster to another — that is because each table and index file is bound to the cluster's infrastructure because of:
#Text=Table and index definitions
#Text=pg_xact (commit/abort/in-progress transaction status records)
#Text=pg_multixact (used for multi-session row locking)
#Text=Fyi, you can easily move tablespaces to new directories as long as it remains in the same cluster, and move tables and indexes
#Text=between tablespaces.
597-1	96046-96050	View	
597-2	96051-96053	or	
597-3	96054-96058	Post	
597-4	96059-96067	Comments	
597-5	96068-96074	Moving	
597-6	96075-96081	Tables	
597-7	96081-96082	,	
597-8	96083-96090	Indexes	
597-9	96090-96091	,	
597-10	96092-96095	and	
597-11	96096-96107	Tablespaces	
597-12	96108-96115	Between	
597-13	96116-96124	Clusters	
597-14	96125-96131	Friday	
597-15	96131-96132	,	
597-16	96133-96136	May	
597-17	96137-96139	22	
597-18	96139-96140	,	
597-19	96141-96145	2020	
597-20	96146-96155	Currently	
597-21	96155-96156	,	
597-22	96157-96159	it	
597-23	96160-96162	is	
597-24	96163-96173	impossible	
597-25	96174-96176	to	
597-26	96177-96181	move	
597-27	96182-96188	tables	
597-28	96188-96189	,	
597-29	96190-96197	indexes	
597-30	96197-96198	,	
597-31	96199-96202	and	
597-32	96203-96209	entire	
597-33	96210-96221	tablespaces	
597-34	96222-96226	from	
597-35	96227-96230	one	
597-36	96231-96238	cluster	
597-37	96239-96241	to	
597-38	96242-96249	another	
597-39	96250-96251	—	
597-40	96252-96256	that	
597-41	96257-96259	is	
597-42	96260-96267	because	
597-43	96268-96272	each	
597-44	96273-96278	table	
597-45	96279-96282	and	
597-46	96283-96288	index	
597-47	96289-96293	file	
597-48	96294-96296	is	
597-49	96297-96302	bound	
597-50	96303-96305	to	
597-51	96306-96309	the	
597-52	96310-96319	cluster's	
597-53	96320-96334	infrastructure	
597-54	96335-96342	because	
597-55	96343-96345	of	
597-56	96345-96346	:	
597-57	96347-96352	Table	
597-58	96353-96356	and	
597-59	96357-96362	index	
597-60	96363-96374	definitions	
597-61	96375-96382	pg_xact	
597-62	96383-96384	(	
597-63	96384-96390	commit	
597-64	96390-96391	/	
597-65	96391-96396	abort	
597-66	96396-96397	/	
597-67	96397-96408	in-progress	
597-68	96409-96420	transaction	
597-69	96421-96427	status	
597-70	96428-96435	records	
597-71	96435-96436	)	
597-72	96437-96449	pg_multixact	
597-73	96450-96451	(	
597-74	96451-96455	used	
597-75	96456-96459	for	
597-76	96460-96473	multi-session	
597-77	96474-96477	row	
597-78	96478-96485	locking	
597-79	96485-96486	)	
597-80	96487-96490	Fyi	
597-81	96490-96491	,	
597-82	96492-96495	you	
597-83	96496-96499	can	
597-84	96500-96506	easily	
597-85	96507-96511	move	
597-86	96512-96523	tablespaces	
597-87	96524-96526	to	
597-88	96527-96530	new	
597-89	96531-96542	directories	
597-90	96543-96545	as	
597-91	96546-96550	long	
597-92	96551-96553	as	
597-93	96554-96556	it	
597-94	96557-96564	remains	
597-95	96565-96567	in	
597-96	96568-96571	the	
597-97	96572-96576	same	
597-98	96577-96584	cluster	
597-99	96584-96585	,	
597-100	96586-96589	and	
597-101	96590-96594	move	
597-102	96595-96601	tables	
597-103	96602-96605	and	
597-104	96606-96613	indexes	
597-105	96614-96621	between	
597-106	96622-96633	tablespaces	
597-107	96633-96634	.	

#Text=So, how could it be made possible?
598-1	96635-96637	So	
598-2	96637-96638	,	
598-3	96639-96642	how	
598-4	96643-96648	could	
598-5	96649-96651	it	
598-6	96652-96654	be	
598-7	96655-96659	made	
598-8	96660-96668	possible	
598-9	96668-96669	?	

#Text=Freeze can remove references to pg_xact and pg_multixact, assuming there are no active transactions
#Text=during the freeze operation.
599-1	96670-96676	Freeze	
599-2	96677-96680	can	
599-3	96681-96687	remove	
599-4	96688-96698	references	
599-5	96699-96701	to	
599-6	96702-96709	pg_xact	
599-7	96710-96713	and	
599-8	96714-96726	pg_multixact	
599-9	96726-96727	,	
599-10	96728-96736	assuming	
599-11	96737-96742	there	
599-12	96743-96746	are	
599-13	96747-96749	no	
599-14	96750-96756	active	
599-15	96757-96769	transactions	
599-16	96770-96776	during	
599-17	96777-96780	the	
599-18	96781-96787	freeze	
599-19	96788-96797	operation	
599-20	96797-96798	.	

#Text=Table and index definitions can be more complex, but it certainly seems possible.
600-1	96799-96804	Table	
600-2	96805-96808	and	
600-3	96809-96814	index	
600-4	96815-96826	definitions	
600-5	96827-96830	can	
600-6	96831-96833	be	
600-7	96834-96838	more	
600-8	96839-96846	complex	
600-9	96846-96847	,	
600-10	96848-96851	but	
600-11	96852-96854	it	
600-12	96855-96864	certainly	
600-13	96865-96870	seems	
600-14	96871-96879	possible	
600-15	96879-96880	.	

#Text=This requires more research.
601-1	96881-96885	This	
601-2	96886-96894	requires	
601-3	96895-96899	more	
601-4	96900-96908	research	
601-5	96908-96909	.	

#Text=View or Post Comments
#Text=Why Pgdata Should Not Be at the Top of a Mount Point
#Text=Wednesday, May 20, 2020
#Text=This email thread is illustrative of why it is unwise to place the Postgres data
#Text=directory (pgdata) at the top of a mount point.
602-1	96910-96914	View	
602-2	96915-96917	or	
602-3	96918-96922	Post	
602-4	96923-96931	Comments	
602-5	96932-96935	Why	
602-6	96936-96942	Pgdata	
602-7	96943-96949	Should	
602-8	96950-96953	Not	
602-9	96954-96956	Be	
602-10	96957-96959	at	
602-11	96960-96963	the	
602-12	96964-96967	Top	
602-13	96968-96970	of	
602-14	96971-96972	a	
602-15	96973-96978	Mount	
602-16	96979-96984	Point	
602-17	96985-96994	Wednesday	
602-18	96994-96995	,	
602-19	96996-96999	May	
602-20	97000-97002	20	
602-21	97002-97003	,	
602-22	97004-97008	2020	
602-23	97009-97013	This	
602-24	97014-97019	email	
602-25	97020-97026	thread	
602-26	97027-97029	is	
602-27	97030-97042	illustrative	
602-28	97043-97045	of	
602-29	97046-97049	why	
602-30	97050-97052	it	
602-31	97053-97055	is	
602-32	97056-97062	unwise	
602-33	97063-97065	to	
602-34	97066-97071	place	
602-35	97072-97075	the	
602-36	97076-97084	Postgres	
602-37	97085-97089	data	
602-38	97090-97099	directory	
602-39	97100-97101	(	
602-40	97101-97107	pgdata	
602-41	97107-97108	)	
602-42	97109-97111	at	
602-43	97112-97115	the	
602-44	97116-97119	top	
602-45	97120-97122	of	
602-46	97123-97124	a	
602-47	97125-97130	mount	
602-48	97131-97136	point	
602-49	97136-97137	.	

#Text=Instead, create a subdirectory under the mount point and put pgdata there.
603-1	97138-97145	Instead	
603-2	97145-97146	,	
603-3	97147-97153	create	
603-4	97154-97155	a	
603-5	97156-97168	subdirectory	
603-6	97169-97174	under	
603-7	97175-97178	the	
603-8	97179-97184	mount	
603-9	97185-97190	point	
603-10	97191-97194	and	
603-11	97195-97198	put	
603-12	97199-97205	pgdata	
603-13	97206-97211	there	
603-14	97211-97212	.	

#Text=This has the advantage of avoiding possible data corruption if
#Text=mounting fails, and allows more efficient use of pg_upgrade.
604-1	97213-97217	This	
604-2	97218-97221	has	
604-3	97222-97225	the	
604-4	97226-97235	advantage	
604-5	97236-97238	of	
604-6	97239-97247	avoiding	
604-7	97248-97256	possible	
604-8	97257-97261	data	
604-9	97262-97272	corruption	
604-10	97273-97275	if	
604-11	97276-97284	mounting	
604-12	97285-97290	fails	
604-13	97290-97291	,	
604-14	97292-97295	and	
604-15	97296-97302	allows	
604-16	97303-97307	more	
604-17	97308-97317	efficient	
604-18	97318-97321	use	
604-19	97322-97324	of	
604-20	97325-97335	pg_upgrade	
604-21	97335-97336	.	

#Text=View or Post Comments
#Text=Percona Live Online
#Text=Monday, May 18, 2020
#Text=I am planning to virtually attend and present at the Percona Live Online conference tomorrow, May 19.
605-1	97337-97341	View	
605-2	97342-97344	or	
605-3	97345-97349	Post	
605-4	97350-97358	Comments	
605-5	97359-97366	Percona	
605-6	97367-97371	Live	
605-7	97372-97378	Online	
605-8	97379-97385	Monday	
605-9	97385-97386	,	
605-10	97387-97390	May	
605-11	97391-97393	18	
605-12	97393-97394	,	
605-13	97395-97399	2020	
605-14	97400-97401	I	
605-15	97402-97404	am	
605-16	97405-97413	planning	
605-17	97414-97416	to	
605-18	97417-97426	virtually	
605-19	97427-97433	attend	
605-20	97434-97437	and	
605-21	97438-97445	present	
605-22	97446-97448	at	
605-23	97449-97452	the	
605-24	97453-97460	Percona	
605-25	97461-97465	Live	
605-26	97466-97472	Online	
605-27	97473-97483	conference	
605-28	97484-97492	tomorrow	
605-29	97492-97493	,	
605-30	97494-97497	May	
605-31	97498-97500	19	
605-32	97500-97501	.	

#Text=It starts at 10am, Eastern us time, and
#Text=spans 24 hours, so it covers every time zone.
606-1	97502-97504	It	
606-2	97505-97511	starts	
606-3	97512-97514	at	
606-4	97515-97519	10am	
606-5	97519-97520	,	
606-6	97521-97528	Eastern	
606-7	97529-97531	us	
606-8	97532-97536	time	
606-9	97536-97537	,	
606-10	97538-97541	and	
606-11	97542-97547	spans	
606-12	97548-97550	24	
606-13	97551-97556	hours	
606-14	97556-97557	,	
606-15	97558-97560	so	
606-16	97561-97563	it	
606-17	97564-97570	covers	
606-18	97571-97576	every	
606-19	97577-97581	time	
606-20	97582-97586	zone	
606-21	97586-97587	.	

#Text=I am giving my Will Postgres Live Forever?
607-1	97588-97589	I	
607-2	97590-97592	am	
607-3	97593-97599	giving	
607-4	97600-97602	my	
607-5	97603-97607	Will	
607-6	97608-97616	Postgres	
607-7	97617-97621	Live	
607-8	97622-97629	Forever	
607-9	97629-97630	?	

#Text=presentation at noon, Eastern us
#Text=time.
608-1	97631-97643	presentation	
608-2	97644-97646	at	
608-3	97647-97651	noon	
608-4	97651-97652	,	
608-5	97653-97660	Eastern	
608-6	97661-97663	us	
608-7	97664-97668	time	
608-8	97668-97669	.	

#Text=Attendance is free, so you might want to check it out.
609-1	97670-97680	Attendance	
609-2	97681-97683	is	
609-3	97684-97688	free	
609-4	97688-97689	,	
609-5	97690-97692	so	
609-6	97693-97696	you	
609-7	97697-97702	might	
609-8	97703-97707	want	
609-9	97708-97710	to	
609-10	97711-97716	check	
609-11	97717-97719	it	
609-12	97720-97723	out	
609-13	97723-97724	.	

#Text=I saw some interesting topics on the program.
610-1	97725-97726	I	
610-2	97727-97730	saw	
610-3	97731-97735	some	
610-4	97736-97747	interesting	
610-5	97748-97754	topics	
610-6	97755-97757	on	
610-7	97758-97761	the	
610-8	97762-97769	program	
610-9	97769-97770	.	

#Text=I am also curious to experience a 24-hour virtual conference, though I am unlikely to remain awake
#Text=that long.
611-1	97771-97772	I	
611-2	97773-97775	am	
611-3	97776-97780	also	
611-4	97781-97788	curious	
611-5	97789-97791	to	
611-6	97792-97802	experience	
611-7	97803-97804	a	
611-8	97805-97807	24	
611-9	97807-97808	-	
611-10	97808-97812	hour	
611-11	97813-97820	virtual	
611-12	97821-97831	conference	
611-13	97831-97832	,	
611-14	97833-97839	though	
611-15	97840-97841	I	
611-16	97842-97844	am	
611-17	97845-97853	unlikely	
611-18	97854-97856	to	
611-19	97857-97863	remain	
611-20	97864-97869	awake	
611-21	97870-97874	that	
611-22	97875-97879	long	
611-23	97879-97880	.	

#Text=View or Post Comments
#Text=Using Non-Login Roles
#Text=Monday, May 18, 2020
#Text=When we talk about database roles, most people immediately think of login roles, which allow people to log in.
612-1	97881-97885	View	
612-2	97886-97888	or	
612-3	97889-97893	Post	
612-4	97894-97902	Comments	
612-5	97903-97908	Using	
612-6	97909-97918	Non-Login	
612-7	97919-97924	Roles	
612-8	97925-97931	Monday	
612-9	97931-97932	,	
612-10	97933-97936	May	
612-11	97937-97939	18	
612-12	97939-97940	,	
612-13	97941-97945	2020	
612-14	97946-97950	When	
612-15	97951-97953	we	
612-16	97954-97958	talk	
612-17	97959-97964	about	
612-18	97965-97973	database	
612-19	97974-97979	roles	
612-20	97979-97980	,	
612-21	97981-97985	most	
612-22	97986-97992	people	
612-23	97993-98004	immediately	
612-24	98005-98010	think	
612-25	98011-98013	of	
612-26	98014-98019	login	
612-27	98020-98025	roles	
612-28	98025-98026	,	
612-29	98027-98032	which	
612-30	98033-98038	allow	
612-31	98039-98045	people	
612-32	98046-98048	to	
612-33	98049-98052	log	
612-34	98053-98055	in	
612-35	98055-98056	.	

#Text=However, another user management
#Text=feature is the ability to create non-login roles, formerly called groups.
613-1	98057-98064	However	
613-2	98064-98065	,	
613-3	98066-98073	another	
613-4	98074-98078	user	
613-5	98079-98089	management	
613-6	98090-98097	feature	
613-7	98098-98100	is	
613-8	98101-98104	the	
613-9	98105-98112	ability	
613-10	98113-98115	to	
613-11	98116-98122	create	
613-12	98123-98132	non-login	
613-13	98133-98138	roles	
613-14	98138-98139	,	
613-15	98140-98148	formerly	
613-16	98149-98155	called	
613-17	98156-98162	groups	
613-18	98162-98163	.	

#Text=Non-login roles can also be assigned permissions, e.g., via
#Text=grant, and can have login roles as members.
614-1	98164-98173	Non-login	
614-2	98174-98179	roles	
614-3	98180-98183	can	
614-4	98184-98188	also	
614-5	98189-98191	be	
614-6	98192-98200	assigned	
614-7	98201-98212	permissions	
614-8	98212-98213	,	
614-9	98214-98217	e.g	
614-10	98217-98218	.	
614-11	98218-98219	,	
614-12	98220-98223	via	
614-13	98224-98229	grant	
614-14	98229-98230	,	
614-15	98231-98234	and	
614-16	98235-98238	can	
614-17	98239-98243	have	
614-18	98244-98249	login	
614-19	98250-98255	roles	
614-20	98256-98258	as	
614-21	98259-98266	members	
614-22	98266-98267	.	

#Text=Non-login roles can be even be
#Text=members of other non-login roles.
615-1	98268-98277	Non-login	
615-2	98278-98283	roles	
615-3	98284-98287	can	
615-4	98288-98290	be	
615-5	98291-98295	even	
615-6	98296-98298	be	
615-7	98299-98306	members	
615-8	98307-98309	of	
615-9	98310-98315	other	
615-10	98316-98325	non-login	
615-11	98326-98331	roles	
615-12	98331-98332	.	

#Text=What is the value of using non-login roles?
616-1	98333-98337	What	
616-2	98338-98340	is	
616-3	98341-98344	the	
616-4	98345-98350	value	
616-5	98351-98353	of	
616-6	98354-98359	using	
616-7	98360-98369	non-login	
616-8	98370-98375	roles	
616-9	98375-98376	?	

#Text=They allow a group of people to be assigned as members of a non-login role, and that role can be used to abstract permission assignment.
617-1	98377-98381	They	
617-2	98382-98387	allow	
617-3	98388-98389	a	
617-4	98390-98395	group	
617-5	98396-98398	of	
617-6	98399-98405	people	
617-7	98406-98408	to	
617-8	98409-98411	be	
617-9	98412-98420	assigned	
617-10	98421-98423	as	
617-11	98424-98431	members	
617-12	98432-98434	of	
617-13	98435-98436	a	
617-14	98437-98446	non-login	
617-15	98447-98451	role	
617-16	98451-98452	,	
617-17	98453-98456	and	
617-18	98457-98461	that	
617-19	98462-98466	role	
617-20	98467-98470	can	
617-21	98471-98473	be	
617-22	98474-98478	used	
617-23	98479-98481	to	
617-24	98482-98490	abstract	
617-25	98491-98501	permission	
617-26	98502-98512	assignment	
617-27	98512-98513	.	

#Text=For example, if you
#Text=have shop foremen, you can configure the login roles of all foremen to be members of a non-login foreman role.
618-1	98514-98517	For	
618-2	98518-98525	example	
618-3	98525-98526	,	
618-4	98527-98529	if	
618-5	98530-98533	you	
618-6	98534-98538	have	
618-7	98539-98543	shop	
618-8	98544-98551	foremen	
618-9	98551-98552	,	
618-10	98553-98556	you	
618-11	98557-98560	can	
618-12	98561-98570	configure	
618-13	98571-98574	the	
618-14	98575-98580	login	
618-15	98581-98586	roles	
618-16	98587-98589	of	
618-17	98590-98593	all	
618-18	98594-98601	foremen	
618-19	98602-98604	to	
618-20	98605-98607	be	
618-21	98608-98615	members	
618-22	98616-98618	of	
618-23	98619-98620	a	
618-24	98621-98630	non-login	
618-25	98631-98638	foreman	
618-26	98639-98643	role	
618-27	98643-98644	.	

#Text=As people are added and removed from that
#Text=staff position, they can be added/removed from the non-login role without the need to change permissions for the foreman role.
619-1	98645-98647	As	
619-2	98648-98654	people	
619-3	98655-98658	are	
619-4	98659-98664	added	
619-5	98665-98668	and	
619-6	98669-98676	removed	
619-7	98677-98681	from	
619-8	98682-98686	that	
619-9	98687-98692	staff	
619-10	98693-98701	position	
619-11	98701-98702	,	
619-12	98703-98707	they	
619-13	98708-98711	can	
619-14	98712-98714	be	
619-15	98715-98720	added	
619-16	98720-98721	/	
619-17	98721-98728	removed	
619-18	98729-98733	from	
619-19	98734-98737	the	
619-20	98738-98747	non-login	
619-21	98748-98752	role	
619-22	98753-98760	without	
619-23	98761-98764	the	
619-24	98765-98769	need	
619-25	98770-98772	to	
619-26	98773-98779	change	
619-27	98780-98791	permissions	
619-28	98792-98795	for	
619-29	98796-98799	the	
619-30	98800-98807	foreman	
619-31	98808-98812	role	
619-32	98812-98813	.	

#Text=A further advantage of non-login roles, as explained in a recent email, is that Postgres
#Text=can start to suffer performance problems if more than a few dozen roles are granted permission on an object.
620-1	98814-98815	A	
620-2	98816-98823	further	
620-3	98824-98833	advantage	
620-4	98834-98836	of	
620-5	98837-98846	non-login	
620-6	98847-98852	roles	
620-7	98852-98853	,	
620-8	98854-98856	as	
620-9	98857-98866	explained	
620-10	98867-98869	in	
620-11	98870-98871	a	
620-12	98872-98878	recent	
620-13	98879-98884	email	
620-14	98884-98885	,	
620-15	98886-98888	is	
620-16	98889-98893	that	
620-17	98894-98902	Postgres	
620-18	98903-98906	can	
620-19	98907-98912	start	
620-20	98913-98915	to	
620-21	98916-98922	suffer	
620-22	98923-98934	performance	
620-23	98935-98943	problems	
620-24	98944-98946	if	
620-25	98947-98951	more	
620-26	98952-98956	than	
620-27	98957-98958	a	
620-28	98959-98962	few	
620-29	98963-98968	dozen	
620-30	98969-98974	roles	
620-31	98975-98978	are	
620-32	98979-98986	granted	
620-33	98987-98997	permission	
620-34	98998-99000	on	
620-35	99001-99003	an	
620-36	99004-99010	object	
620-37	99010-99011	.	

#Text=A much simpler and more manageable solution is to add users to a non-login role and assign
#Text=object permissions to that non-login role.
621-1	99012-99013	A	
621-2	99014-99018	much	
621-3	99019-99026	simpler	
621-4	99027-99030	and	
621-5	99031-99035	more	
621-6	99036-99046	manageable	
621-7	99047-99055	solution	
621-8	99056-99058	is	
621-9	99059-99061	to	
621-10	99062-99065	add	
621-11	99066-99071	users	
621-12	99072-99074	to	
621-13	99075-99076	a	
621-14	99077-99086	non-login	
621-15	99087-99091	role	
621-16	99092-99095	and	
621-17	99096-99102	assign	
621-18	99103-99109	object	
621-19	99110-99121	permissions	
621-20	99122-99124	to	
621-21	99125-99129	that	
621-22	99130-99139	non-login	
621-23	99140-99144	role	
621-24	99144-99145	.	

#Text=View or Post Comments
#Text=Draft of Postgres 13 Release Notes
#Text=Friday, May 15, 2020
#Text=I have completed the draft version of the Postgres 13 release notes, containing 181 items.
622-1	99146-99150	View	
622-2	99151-99153	or	
622-3	99154-99158	Post	
622-4	99159-99167	Comments	
622-5	99168-99173	Draft	
622-6	99174-99176	of	
622-7	99177-99185	Postgres	
622-8	99186-99188	13	
622-9	99189-99196	Release	
622-10	99197-99202	Notes	
622-11	99203-99209	Friday	
622-12	99209-99210	,	
622-13	99211-99214	May	
622-14	99215-99217	15	
622-15	99217-99218	,	
622-16	99219-99223	2020	
622-17	99224-99225	I	
622-18	99226-99230	have	
622-19	99231-99240	completed	
622-20	99241-99244	the	
622-21	99245-99250	draft	
622-22	99251-99258	version	
622-23	99259-99261	of	
622-24	99262-99265	the	
622-25	99266-99274	Postgres	
622-26	99275-99277	13	
622-27	99278-99285	release	
622-28	99286-99291	notes	
622-29	99291-99292	,	
622-30	99293-99303	containing	
622-31	99304-99307	181	
622-32	99308-99313	items	
622-33	99313-99314	.	

#Text=The release notes will be continually updated until
#Text=the final release, which is expected to be in September or October of this year.
623-1	99315-99318	The	
623-2	99319-99326	release	
623-3	99327-99332	notes	
623-4	99333-99337	will	
623-5	99338-99340	be	
623-6	99341-99352	continually	
623-7	99353-99360	updated	
623-8	99361-99366	until	
623-9	99367-99370	the	
623-10	99371-99376	final	
623-11	99377-99384	release	
623-12	99384-99385	,	
623-13	99386-99391	which	
623-14	99392-99394	is	
623-15	99395-99403	expected	
623-16	99404-99406	to	
623-17	99407-99409	be	
623-18	99410-99412	in	
623-19	99413-99422	September	
623-20	99423-99425	or	
623-21	99426-99433	October	
623-22	99434-99436	of	
623-23	99437-99441	this	
623-24	99442-99446	year	
623-25	99446-99447	.	

#Text=Beta testing will start in the next few weeks.
624-1	99448-99452	Beta	
624-2	99453-99460	testing	
624-3	99461-99465	will	
624-4	99466-99471	start	
624-5	99472-99474	in	
624-6	99475-99478	the	
624-7	99479-99483	next	
624-8	99484-99487	few	
624-9	99488-99493	weeks	
624-10	99493-99494	.	

#Text=View or Post Comments
#Text=Avoiding Cache Wipe, Synchronized Scans
#Text=Wednesday, May 13, 2020
#Text=Whenever you are dealing with a lot of data, it helps to cache it.
625-1	99495-99499	View	
625-2	99500-99502	or	
625-3	99503-99507	Post	
625-4	99508-99516	Comments	
625-5	99517-99525	Avoiding	
625-6	99526-99531	Cache	
625-7	99532-99536	Wipe	
625-8	99536-99537	,	
625-9	99538-99550	Synchronized	
625-10	99551-99556	Scans	
625-11	99557-99566	Wednesday	
625-12	99566-99567	,	
625-13	99568-99571	May	
625-14	99572-99574	13	
625-15	99574-99575	,	
625-16	99576-99580	2020	
625-17	99581-99589	Whenever	
625-18	99590-99593	you	
625-19	99594-99597	are	
625-20	99598-99605	dealing	
625-21	99606-99610	with	
625-22	99611-99612	a	
625-23	99613-99616	lot	
625-24	99617-99619	of	
625-25	99620-99624	data	
625-26	99624-99625	,	
625-27	99626-99628	it	
625-28	99629-99634	helps	
625-29	99635-99637	to	
625-30	99638-99643	cache	
625-31	99644-99646	it	
625-32	99646-99647	.	

#Text=Postgres does this using
#Text=shared_buffers.
626-1	99648-99656	Postgres	
626-2	99657-99661	does	
626-3	99662-99666	this	
626-4	99667-99672	using	
626-5	99673-99687	shared_buffers	
626-6	99687-99688	.	

#Text=However, one risk of caching data is that a large query that accesses a lot of data
#Text=might remove frequently-accessed data from the cache;
#Text=this is called cache wipe.
627-1	99689-99696	However	
627-2	99696-99697	,	
627-3	99698-99701	one	
627-4	99702-99706	risk	
627-5	99707-99709	of	
627-6	99710-99717	caching	
627-7	99718-99722	data	
627-8	99723-99725	is	
627-9	99726-99730	that	
627-10	99731-99732	a	
627-11	99733-99738	large	
627-12	99739-99744	query	
627-13	99745-99749	that	
627-14	99750-99758	accesses	
627-15	99759-99760	a	
627-16	99761-99764	lot	
627-17	99765-99767	of	
627-18	99768-99772	data	
627-19	99773-99778	might	
627-20	99779-99785	remove	
627-21	99786-99805	frequently-accessed	
627-22	99806-99810	data	
627-23	99811-99815	from	
627-24	99816-99819	the	
627-25	99820-99825	cache	
627-26	99825-99826	;	
627-27	99827-99831	this	
627-28	99832-99834	is	
627-29	99835-99841	called	
627-30	99842-99847	cache	
627-31	99848-99852	wipe	
627-32	99852-99853	.	

#Text=To avoid this, Postgres limits the number of shared buffers used by data operations that are expected to access a lot
#Text=of data.
628-1	99854-99856	To	
628-2	99857-99862	avoid	
628-3	99863-99867	this	
628-4	99867-99868	,	
628-5	99869-99877	Postgres	
628-6	99878-99884	limits	
628-7	99885-99888	the	
628-8	99889-99895	number	
628-9	99896-99898	of	
628-10	99899-99905	shared	
628-11	99906-99913	buffers	
628-12	99914-99918	used	
628-13	99919-99921	by	
628-14	99922-99926	data	
628-15	99927-99937	operations	
628-16	99938-99942	that	
628-17	99943-99946	are	
628-18	99947-99955	expected	
628-19	99956-99958	to	
628-20	99959-99965	access	
628-21	99966-99967	a	
628-22	99968-99971	lot	
628-23	99972-99974	of	
628-24	99975-99979	data	
628-25	99979-99980	.	

#Text=Looking at C function GetAccessStrategy(), you can see there are four shared buffer access strategies.
629-1	99981-99988	Looking	
629-2	99989-99991	at	
629-3	99992-99993	C	
629-4	99994-100002	function	
629-5	100003-100020	GetAccessStrategy	
629-6	100020-100021	(	
629-7	100021-100022	)	
629-8	100022-100023	,	
629-9	100024-100027	you	
629-10	100028-100031	can	
629-11	100032-100035	see	
629-12	100036-100041	there	
629-13	100042-100045	are	
629-14	100046-100050	four	
629-15	100051-100057	shared	
629-16	100058-100064	buffer	
629-17	100065-100071	access	
629-18	100072-100082	strategies	
629-19	100082-100083	.	

#Text=The first one,
#Text=bas_normal, is used for normal scans;
#Text=the rest are to avoiding cache wiping:
#Text=bas_bulkread is enabled for large reads and uses 256 kilobytes of shared buffers (typically 32 8kB shared buffers)
#Text=bas_bulkwrite: is enabled for large writes and uses 16 megabytes of shared buffers
#Text=bas_vacuum is for vacuum operations and uses 256 kilobytes of shared buffers
#Text=For example, function initscan() uses bas_bulkread if the scan is expected to access more than one-quarter of
#Text=shared buffers.
630-1	100084-100087	The	
630-2	100088-100093	first	
630-3	100094-100097	one	
630-4	100097-100098	,	
630-5	100099-100109	bas_normal	
630-6	100109-100110	,	
630-7	100111-100113	is	
630-8	100114-100118	used	
630-9	100119-100122	for	
630-10	100123-100129	normal	
630-11	100130-100135	scans	
630-12	100135-100136	;	
630-13	100137-100140	the	
630-14	100141-100145	rest	
630-15	100146-100149	are	
630-16	100150-100152	to	
630-17	100153-100161	avoiding	
630-18	100162-100167	cache	
630-19	100168-100174	wiping	
630-20	100174-100175	:	
630-21	100176-100188	bas_bulkread	
630-22	100189-100191	is	
630-23	100192-100199	enabled	
630-24	100200-100203	for	
630-25	100204-100209	large	
630-26	100210-100215	reads	
630-27	100216-100219	and	
630-28	100220-100224	uses	
630-29	100225-100228	256	
630-30	100229-100238	kilobytes	
630-31	100239-100241	of	
630-32	100242-100248	shared	
630-33	100249-100256	buffers	
630-34	100257-100258	(	
630-35	100258-100267	typically	
630-36	100268-100270	32	
630-37	100271-100274	8kB	
630-38	100275-100281	shared	
630-39	100282-100289	buffers	
630-40	100289-100290	)	
630-41	100291-100304	bas_bulkwrite	
630-42	100304-100305	:	
630-43	100306-100308	is	
630-44	100309-100316	enabled	
630-45	100317-100320	for	
630-46	100321-100326	large	
630-47	100327-100333	writes	
630-48	100334-100337	and	
630-49	100338-100342	uses	
630-50	100343-100345	16	
630-51	100346-100355	megabytes	
630-52	100356-100358	of	
630-53	100359-100365	shared	
630-54	100366-100373	buffers	
630-55	100374-100384	bas_vacuum	
630-56	100385-100387	is	
630-57	100388-100391	for	
630-58	100392-100398	vacuum	
630-59	100399-100409	operations	
630-60	100410-100413	and	
630-61	100414-100418	uses	
630-62	100419-100422	256	
630-63	100423-100432	kilobytes	
630-64	100433-100435	of	
630-65	100436-100442	shared	
630-66	100443-100450	buffers	
630-67	100451-100454	For	
630-68	100455-100462	example	
630-69	100462-100463	,	
630-70	100464-100472	function	
630-71	100473-100481	initscan	
630-72	100481-100482	(	
630-73	100482-100483	)	
630-74	100484-100488	uses	
630-75	100489-100501	bas_bulkread	
630-76	100502-100504	if	
630-77	100505-100508	the	
630-78	100509-100513	scan	
630-79	100514-100516	is	
630-80	100517-100525	expected	
630-81	100526-100528	to	
630-82	100529-100535	access	
630-83	100536-100540	more	
630-84	100541-100545	than	
630-85	100546-100557	one-quarter	
630-86	100558-100560	of	
630-87	100561-100567	shared	
630-88	100568-100575	buffers	
630-89	100575-100576	.	

#Text=Similarly, table rewrites, create table as, and copy from use bas_bulkwrite.
631-1	100577-100586	Similarly	
631-2	100586-100587	,	
631-3	100588-100593	table	
631-4	100594-100602	rewrites	
631-5	100602-100603	,	
631-6	100604-100610	create	
631-7	100611-100616	table	
631-8	100617-100619	as	
631-9	100619-100620	,	
631-10	100621-100624	and	
631-11	100625-100629	copy	
631-12	100630-100634	from	
631-13	100635-100638	use	
631-14	100639-100652	bas_bulkwrite	
631-15	100652-100653	.	

#Text=Bas_bulkwrite is larger because we can't discard written buffers from
#Text=the cache until they are written to storage, unlike unmodified buffers which can be discarded anytime.
632-1	100654-100667	Bas_bulkwrite	
632-2	100668-100670	is	
632-3	100671-100677	larger	
632-4	100678-100685	because	
632-5	100686-100688	we	
632-6	100689-100694	can't	
632-7	100695-100702	discard	
632-8	100703-100710	written	
632-9	100711-100718	buffers	
632-10	100719-100723	from	
632-11	100724-100727	the	
632-12	100728-100733	cache	
632-13	100734-100739	until	
632-14	100740-100744	they	
632-15	100745-100748	are	
632-16	100749-100756	written	
632-17	100757-100759	to	
632-18	100760-100767	storage	
632-19	100767-100768	,	
632-20	100769-100775	unlike	
632-21	100776-100786	unmodified	
632-22	100787-100794	buffers	
632-23	100795-100800	which	
632-24	100801-100804	can	
632-25	100805-100807	be	
632-26	100808-100817	discarded	
632-27	100818-100825	anytime	
632-28	100825-100826	.	

#Text=You might wonder, with operations using so few shared buffers, what happens if another session needs to scan the same data?
633-1	100827-100830	You	
633-2	100831-100836	might	
633-3	100837-100843	wonder	
633-4	100843-100844	,	
633-5	100845-100849	with	
633-6	100850-100860	operations	
633-7	100861-100866	using	
633-8	100867-100869	so	
633-9	100870-100873	few	
633-10	100874-100880	shared	
633-11	100881-100888	buffers	
633-12	100888-100889	,	
633-13	100890-100894	what	
633-14	100895-100902	happens	
633-15	100903-100905	if	
633-16	100906-100913	another	
633-17	100914-100921	session	
633-18	100922-100927	needs	
633-19	100928-100930	to	
633-20	100931-100935	scan	
633-21	100936-100939	the	
633-22	100940-100944	same	
633-23	100945-100949	data	
633-24	100949-100950	?	

#Text=Doesn't performance suffer?
634-1	100951-100958	Doesn't	
634-2	100959-100970	performance	
634-3	100971-100977	suffer	
634-4	100977-100978	?	

#Text=Well, another Postgres facility, that was developed
#Text=independently, helps with this: synchronized scans.
635-1	100979-100983	Well	
635-2	100983-100984	,	
635-3	100985-100992	another	
635-4	100993-101001	Postgres	
635-5	101002-101010	facility	
635-6	101010-101011	,	
635-7	101012-101016	that	
635-8	101017-101020	was	
635-9	101021-101030	developed	
635-10	101031-101044	independently	
635-11	101044-101045	,	
635-12	101046-101051	helps	
635-13	101052-101056	with	
635-14	101057-101061	this	
635-15	101061-101062	:	
635-16	101063-101075	synchronized	
635-17	101076-101081	scans	
635-18	101081-101082	.	

#Text=The top of syncscan.c explains it well:
#Text=When multiple backends run a sequential scan on the same table, we try to keep them synchronized to reduce the overall I/O needed.
636-1	101083-101086	The	
636-2	101087-101090	top	
636-3	101091-101093	of	
636-4	101094-101104	syncscan.c	
636-5	101105-101113	explains	
636-6	101114-101116	it	
636-7	101117-101121	well	
636-8	101121-101122	:	
636-9	101123-101127	When	
636-10	101128-101136	multiple	
636-11	101137-101145	backends	
636-12	101146-101149	run	
636-13	101150-101151	a	
636-14	101152-101162	sequential	
636-15	101163-101167	scan	
636-16	101168-101170	on	
636-17	101171-101174	the	
636-18	101175-101179	same	
636-19	101180-101185	table	
636-20	101185-101186	,	
636-21	101187-101189	we	
636-22	101190-101193	try	
636-23	101194-101196	to	
636-24	101197-101201	keep	
636-25	101202-101206	them	
636-26	101207-101219	synchronized	
636-27	101220-101222	to	
636-28	101223-101229	reduce	
636-29	101230-101233	the	
636-30	101234-101241	overall	
636-31	101242-101243	I	
636-32	101243-101244	/	
636-33	101244-101245	O	
636-34	101246-101252	needed	
636-35	101252-101253	.	

#Text=The goal is to read each page into shared buffer cache only once,
#Text=and let all backends that take part in the shared scan process the page before it falls out of the cache.
637-1	101254-101257	The	
637-2	101258-101262	goal	
637-3	101263-101265	is	
637-4	101266-101268	to	
637-5	101269-101273	read	
637-6	101274-101278	each	
637-7	101279-101283	page	
637-8	101284-101288	into	
637-9	101289-101295	shared	
637-10	101296-101302	buffer	
637-11	101303-101308	cache	
637-12	101309-101313	only	
637-13	101314-101318	once	
637-14	101318-101319	,	
637-15	101320-101323	and	
637-16	101324-101327	let	
637-17	101328-101331	all	
637-18	101332-101340	backends	
637-19	101341-101345	that	
637-20	101346-101350	take	
637-21	101351-101355	part	
637-22	101356-101358	in	
637-23	101359-101362	the	
637-24	101363-101369	shared	
637-25	101370-101374	scan	
637-26	101375-101382	process	
637-27	101383-101386	the	
637-28	101387-101391	page	
637-29	101392-101398	before	
637-30	101399-101401	it	
637-31	101402-101407	falls	
637-32	101408-101411	out	
637-33	101412-101414	of	
637-34	101415-101418	the	
637-35	101419-101424	cache	
637-36	101424-101425	.	

#Text=Both synchronized scans and shared buffer access strategies work automatically, so most Postgres users don't even know they exist, but they do improve Postgres performance.
638-1	101426-101430	Both	
638-2	101431-101443	synchronized	
638-3	101444-101449	scans	
638-4	101450-101453	and	
638-5	101454-101460	shared	
638-6	101461-101467	buffer	
638-7	101468-101474	access	
638-8	101475-101485	strategies	
638-9	101486-101490	work	
638-10	101491-101504	automatically	
638-11	101504-101505	,	
638-12	101506-101508	so	
638-13	101509-101513	most	
638-14	101514-101522	Postgres	
638-15	101523-101528	users	
638-16	101529-101534	don't	
638-17	101535-101539	even	
638-18	101540-101544	know	
638-19	101545-101549	they	
638-20	101550-101555	exist	
638-21	101555-101556	,	
638-22	101557-101560	but	
638-23	101561-101565	they	
638-24	101566-101568	do	
638-25	101569-101576	improve	
638-26	101577-101585	Postgres	
638-27	101586-101597	performance	
638-28	101597-101598	.	

#Text=View or Post Comments
#Text=Why Do We Freeze?
639-1	101599-101603	View	
639-2	101604-101606	or	
639-3	101607-101611	Post	
639-4	101612-101620	Comments	
639-5	101621-101624	Why	
639-6	101625-101627	Do	
639-7	101628-101630	We	
639-8	101631-101637	Freeze	
639-9	101637-101638	?	

#Text=Monday, May 11, 2020
#Text=You might have seen autovacuum running, and noticed that it sometimes performs freeze operations on transaction ids (32 bits)
#Text=and multi-xacts (used for multi-session row locking).
640-1	101639-101645	Monday	
640-2	101645-101646	,	
640-3	101647-101650	May	
640-4	101651-101653	11	
640-5	101653-101654	,	
640-6	101655-101659	2020	
640-7	101660-101663	You	
640-8	101664-101669	might	
640-9	101670-101674	have	
640-10	101675-101679	seen	
640-11	101680-101690	autovacuum	
640-12	101691-101698	running	
640-13	101698-101699	,	
640-14	101700-101703	and	
640-15	101704-101711	noticed	
640-16	101712-101716	that	
640-17	101717-101719	it	
640-18	101720-101729	sometimes	
640-19	101730-101738	performs	
640-20	101739-101745	freeze	
640-21	101746-101756	operations	
640-22	101757-101759	on	
640-23	101760-101771	transaction	
640-24	101772-101775	ids	
640-25	101776-101777	(	
640-26	101777-101779	32	
640-27	101780-101784	bits	
640-28	101784-101785	)	
640-29	101786-101789	and	
640-30	101790-101801	multi-xacts	
640-31	101802-101803	(	
640-32	101803-101807	used	
640-33	101808-101811	for	
640-34	101812-101825	multi-session	
640-35	101826-101829	row	
640-36	101830-101837	locking	
640-37	101837-101838	)	
640-38	101838-101839	.	

#Text=The frequency of freeze operations is controlled by
#Text=autovacuum_freeze_max_age and autovacuum_multixact_freeze_max_age.
641-1	101840-101843	The	
641-2	101844-101853	frequency	
641-3	101854-101856	of	
641-4	101857-101863	freeze	
641-5	101864-101874	operations	
641-6	101875-101877	is	
641-7	101878-101888	controlled	
641-8	101889-101891	by	
641-9	101892-101917	autovacuum_freeze_max_age	
641-10	101918-101921	and	
641-11	101922-101957	autovacuum_multixact_freeze_max_age	
641-12	101957-101958	.	

#Text=You can
#Text=reduce the frequency of freezing if you are sure the freeze operation will complete
#Text=before transaction wraparound is reached.
642-1	101959-101962	You	
642-2	101963-101966	can	
642-3	101967-101973	reduce	
642-4	101974-101977	the	
642-5	101978-101987	frequency	
642-6	101988-101990	of	
642-7	101991-101999	freezing	
642-8	102000-102002	if	
642-9	102003-102006	you	
642-10	102007-102010	are	
642-11	102011-102015	sure	
642-12	102016-102019	the	
642-13	102020-102026	freeze	
642-14	102027-102036	operation	
642-15	102037-102041	will	
642-16	102042-102050	complete	
642-17	102051-102057	before	
642-18	102058-102069	transaction	
642-19	102070-102080	wraparound	
642-20	102081-102083	is	
642-21	102084-102091	reached	
642-22	102091-102092	.	

#Text=There is regular discussion about how freezing could be avoided, and this email does the best
#Text=job of explaining the options.
643-1	102093-102098	There	
643-2	102099-102101	is	
643-3	102102-102109	regular	
643-4	102110-102120	discussion	
643-5	102121-102126	about	
643-6	102127-102130	how	
643-7	102131-102139	freezing	
643-8	102140-102145	could	
643-9	102146-102148	be	
643-10	102149-102156	avoided	
643-11	102156-102157	,	
643-12	102158-102161	and	
643-13	102162-102166	this	
643-14	102167-102172	email	
643-15	102173-102177	does	
643-16	102178-102181	the	
643-17	102182-102186	best	
643-18	102187-102190	job	
643-19	102191-102193	of	
643-20	102194-102204	explaining	
643-21	102205-102208	the	
643-22	102209-102216	options	
643-23	102216-102217	.	

#Text=We could expand transaction ids to 64 bits, either on each row or perhaps with a page-level default, but
#Text=pg_xact (commit/abort/in-progress transaction status records) still need cleanup.
644-1	102218-102220	We	
644-2	102221-102226	could	
644-3	102227-102233	expand	
644-4	102234-102245	transaction	
644-5	102246-102249	ids	
644-6	102250-102252	to	
644-7	102253-102255	64	
644-8	102256-102260	bits	
644-9	102260-102261	,	
644-10	102262-102268	either	
644-11	102269-102271	on	
644-12	102272-102276	each	
644-13	102277-102280	row	
644-14	102281-102283	or	
644-15	102284-102291	perhaps	
644-16	102292-102296	with	
644-17	102297-102298	a	
644-18	102299-102309	page-level	
644-19	102310-102317	default	
644-20	102317-102318	,	
644-21	102319-102322	but	
644-22	102323-102330	pg_xact	
644-23	102331-102332	(	
644-24	102332-102338	commit	
644-25	102338-102339	/	
644-26	102339-102344	abort	
644-27	102344-102345	/	
644-28	102345-102356	in-progress	
644-29	102357-102368	transaction	
644-30	102369-102375	status	
644-31	102376-102383	records	
644-32	102383-102384	)	
644-33	102385-102390	still	
644-34	102391-102395	need	
644-35	102396-102403	cleanup	
644-36	102403-102404	.	

#Text=This area probably needs more
#Text=thought.
645-1	102405-102409	This	
645-2	102410-102414	area	
645-3	102415-102423	probably	
645-4	102424-102429	needs	
645-5	102430-102434	more	
645-6	102435-102442	thought	
645-7	102442-102443	.	

#Text=View or Post Comments
#Text=Postgres Internals Website
#Text=Friday, May
#Text=8, 2020
#Text=I am often asked how someone can learn more about Postgres, particularly the internals.
646-1	102444-102448	View	
646-2	102449-102451	or	
646-3	102452-102456	Post	
646-4	102457-102465	Comments	
646-5	102466-102474	Postgres	
646-6	102475-102484	Internals	
646-7	102485-102492	Website	
646-8	102493-102499	Friday	
646-9	102499-102500	,	
646-10	102501-102504	May	
646-11	102505-102506	8	
646-12	102506-102507	,	
646-13	102508-102512	2020	
646-14	102513-102514	I	
646-15	102515-102517	am	
646-16	102518-102523	often	
646-17	102524-102529	asked	
646-18	102530-102533	how	
646-19	102534-102541	someone	
646-20	102542-102545	can	
646-21	102546-102551	learn	
646-22	102552-102556	more	
646-23	102557-102562	about	
646-24	102563-102571	Postgres	
646-25	102571-102572	,	
646-26	102573-102585	particularly	
646-27	102586-102589	the	
646-28	102590-102599	internals	
646-29	102599-102600	.	

#Text=There is the Postgres developer page, which has links to many resources,
#Text=and the developer's faq item about learning about the internals.
647-1	102601-102606	There	
647-2	102607-102609	is	
647-3	102610-102613	the	
647-4	102614-102622	Postgres	
647-5	102623-102632	developer	
647-6	102633-102637	page	
647-7	102637-102638	,	
647-8	102639-102644	which	
647-9	102645-102648	has	
647-10	102649-102654	links	
647-11	102655-102657	to	
647-12	102658-102662	many	
647-13	102663-102672	resources	
647-14	102672-102673	,	
647-15	102674-102677	and	
647-16	102678-102681	the	
647-17	102682-102693	developer's	
647-18	102694-102697	faq	
647-19	102698-102702	item	
647-20	102703-102708	about	
647-21	102709-102717	learning	
647-22	102718-102723	about	
647-23	102724-102727	the	
647-24	102728-102737	internals	
647-25	102737-102738	.	

#Text=One link on
#Text=that page I was not aware of is Hironobu Suzuki's very detailed website about Postgres internals.
648-1	102739-102742	One	
648-2	102743-102747	link	
648-3	102748-102750	on	
648-4	102751-102755	that	
648-5	102756-102760	page	
648-6	102761-102762	I	
648-7	102763-102766	was	
648-8	102767-102770	not	
648-9	102771-102776	aware	
648-10	102777-102779	of	
648-11	102780-102782	is	
648-12	102783-102791	Hironobu	
648-13	102792-102800	Suzuki's	
648-14	102801-102805	very	
648-15	102806-102814	detailed	
648-16	102815-102822	website	
648-17	102823-102828	about	
648-18	102829-102837	Postgres	
648-19	102838-102847	internals	
648-20	102847-102848	.	

#Text=It has a lot of details I have never seen written before, so I suggest
#Text=those interested should check it out.
649-1	102849-102851	It	
649-2	102852-102855	has	
649-3	102856-102857	a	
649-4	102858-102861	lot	
649-5	102862-102864	of	
649-6	102865-102872	details	
649-7	102873-102874	I	
649-8	102875-102879	have	
649-9	102880-102885	never	
649-10	102886-102890	seen	
649-11	102891-102898	written	
649-12	102899-102905	before	
649-13	102905-102906	,	
649-14	102907-102909	so	
649-15	102910-102911	I	
649-16	102912-102919	suggest	
649-17	102920-102925	those	
649-18	102926-102936	interested	
649-19	102937-102943	should	
649-20	102944-102949	check	
649-21	102950-102952	it	
649-22	102953-102956	out	
649-23	102956-102957	.	

#Text=View or Post Comments
#Text=Portability's Surprising Win
#Text=Wednesday, May
#Text=6, 2020
#Text=When writing software, it is necessary to decide whether to use external facilities available in command-line tools, libraries, frameworks, and the operating system, or write the facilities yourself.
650-1	102958-102962	View	
650-2	102963-102965	or	
650-3	102966-102970	Post	
650-4	102971-102979	Comments	
650-5	102980-102993	Portability's	
650-6	102994-103004	Surprising	
650-7	103005-103008	Win	
650-8	103009-103018	Wednesday	
650-9	103018-103019	,	
650-10	103020-103023	May	
650-11	103024-103025	6	
650-12	103025-103026	,	
650-13	103027-103031	2020	
650-14	103032-103036	When	
650-15	103037-103044	writing	
650-16	103045-103053	software	
650-17	103053-103054	,	
650-18	103055-103057	it	
650-19	103058-103060	is	
650-20	103061-103070	necessary	
650-21	103071-103073	to	
650-22	103074-103080	decide	
650-23	103081-103088	whether	
650-24	103089-103091	to	
650-25	103092-103095	use	
650-26	103096-103104	external	
650-27	103105-103115	facilities	
650-28	103116-103125	available	
650-29	103126-103128	in	
650-30	103129-103141	command-line	
650-31	103142-103147	tools	
650-32	103147-103148	,	
650-33	103149-103158	libraries	
650-34	103158-103159	,	
650-35	103160-103170	frameworks	
650-36	103170-103171	,	
650-37	103172-103175	and	
650-38	103176-103179	the	
650-39	103180-103189	operating	
650-40	103190-103196	system	
650-41	103196-103197	,	
650-42	103198-103200	or	
650-43	103201-103206	write	
650-44	103207-103210	the	
650-45	103211-103221	facilities	
650-46	103222-103230	yourself	
650-47	103230-103231	.	

#Text=Why
#Text=would you write them yourself?
651-1	103232-103235	Why	
651-2	103236-103241	would	
651-3	103242-103245	you	
651-4	103246-103251	write	
651-5	103252-103256	them	
651-6	103257-103265	yourself	
651-7	103265-103266	?	

#Text=You might be worried about adding reliance on an external facility or a facility might not have sufficient flexibility or performance.
652-1	103267-103270	You	
652-2	103271-103276	might	
652-3	103277-103279	be	
652-4	103280-103287	worried	
652-5	103288-103293	about	
652-6	103294-103300	adding	
652-7	103301-103309	reliance	
652-8	103310-103312	on	
652-9	103313-103315	an	
652-10	103316-103324	external	
652-11	103325-103333	facility	
652-12	103334-103336	or	
652-13	103337-103338	a	
652-14	103339-103347	facility	
652-15	103348-103353	might	
652-16	103354-103357	not	
652-17	103358-103362	have	
652-18	103363-103373	sufficient	
652-19	103374-103385	flexibility	
652-20	103386-103388	or	
652-21	103389-103400	performance	
652-22	103400-103401	.	

#Text=The Postgres development team has had to make similar decisions.
653-1	103402-103405	The	
653-2	103406-103414	Postgres	
653-3	103415-103426	development	
653-4	103427-103431	team	
653-5	103432-103435	has	
653-6	103436-103439	had	
653-7	103440-103442	to	
653-8	103443-103447	make	
653-9	103448-103455	similar	
653-10	103456-103465	decisions	
653-11	103465-103466	.	

#Text=Fortunately, we have tended to favor reliance on common operating system interfaces, tools, and libraries, e.g.,
#Text=OpenSSL, bison.
654-1	103467-103478	Fortunately	
654-2	103478-103479	,	
654-3	103480-103482	we	
654-4	103483-103487	have	
654-5	103488-103494	tended	
654-6	103495-103497	to	
654-7	103498-103503	favor	
654-8	103504-103512	reliance	
654-9	103513-103515	on	
654-10	103516-103522	common	
654-11	103523-103532	operating	
654-12	103533-103539	system	
654-13	103540-103550	interfaces	
654-14	103550-103551	,	
654-15	103552-103557	tools	
654-16	103557-103558	,	
654-17	103559-103562	and	
654-18	103563-103572	libraries	
654-19	103572-103573	,	
654-20	103574-103577	e.g	
654-21	103577-103578	.	
654-22	103578-103579	,	
654-23	103580-103587	OpenSSL	
654-24	103587-103588	,	
654-25	103589-103594	bison	
654-26	103594-103595	.	

#Text=We have avoided reliance on external facilities that are uncommon or not well maintained.
655-1	103596-103598	We	
655-2	103599-103603	have	
655-3	103604-103611	avoided	
655-4	103612-103620	reliance	
655-5	103621-103623	on	
655-6	103624-103632	external	
655-7	103633-103643	facilities	
655-8	103644-103648	that	
655-9	103649-103652	are	
655-10	103653-103661	uncommon	
655-11	103662-103664	or	
655-12	103665-103668	not	
655-13	103669-103673	well	
655-14	103674-103684	maintained	
655-15	103684-103685	.	

#Text=Postgres has reproduced facilities that were commonly available in the operating system, tools, or libraries only when there was a clear benefit.
656-1	103686-103694	Postgres	
656-2	103695-103698	has	
656-3	103699-103709	reproduced	
656-4	103710-103720	facilities	
656-5	103721-103725	that	
656-6	103726-103730	were	
656-7	103731-103739	commonly	
656-8	103740-103749	available	
656-9	103750-103752	in	
656-10	103753-103756	the	
656-11	103757-103766	operating	
656-12	103767-103773	system	
656-13	103773-103774	,	
656-14	103775-103780	tools	
656-15	103780-103781	,	
656-16	103782-103784	or	
656-17	103785-103794	libraries	
656-18	103795-103799	only	
656-19	103800-103804	when	
656-20	103805-103810	there	
656-21	103811-103814	was	
656-22	103815-103816	a	
656-23	103817-103822	clear	
656-24	103823-103830	benefit	
656-25	103830-103831	.	

#Text=Reproducing such facilities for a small benefit, like a
#Text=little more control or a little more performance, is rarely wise.
657-1	103832-103843	Reproducing	
657-2	103844-103848	such	
657-3	103849-103859	facilities	
657-4	103860-103863	for	
657-5	103864-103865	a	
657-6	103866-103871	small	
657-7	103872-103879	benefit	
657-8	103879-103880	,	
657-9	103881-103885	like	
657-10	103886-103887	a	
657-11	103888-103894	little	
657-12	103895-103899	more	
657-13	103900-103907	control	
657-14	103908-103910	or	
657-15	103911-103912	a	
657-16	103913-103919	little	
657-17	103920-103924	more	
657-18	103925-103936	performance	
657-19	103936-103937	,	
657-20	103938-103940	is	
657-21	103941-103947	rarely	
657-22	103948-103952	wise	
657-23	103952-103953	.	

#Text=While relying on external facilities often makes Postgres less flexible and perhaps less
#Text=performant, there are long-term benefits:
#Text=As external facilities improve their feature-set and performance, Postgres benefits from these improvements with little effort
#Text=As new demands are required of these external facilities, Postgres again benefits effortlessly
#Text=Let's be specific.
658-1	103954-103959	While	
658-2	103960-103967	relying	
658-3	103968-103970	on	
658-4	103971-103979	external	
658-5	103980-103990	facilities	
658-6	103991-103996	often	
658-7	103997-104002	makes	
658-8	104003-104011	Postgres	
658-9	104012-104016	less	
658-10	104017-104025	flexible	
658-11	104026-104029	and	
658-12	104030-104037	perhaps	
658-13	104038-104042	less	
658-14	104043-104053	performant	
658-15	104053-104054	,	
658-16	104055-104060	there	
658-17	104061-104064	are	
658-18	104065-104074	long-term	
658-19	104075-104083	benefits	
658-20	104083-104084	:	
658-21	104085-104087	As	
658-22	104088-104096	external	
658-23	104097-104107	facilities	
658-24	104108-104115	improve	
658-25	104116-104121	their	
658-26	104122-104133	feature-set	
658-27	104134-104137	and	
658-28	104138-104149	performance	
658-29	104149-104150	,	
658-30	104151-104159	Postgres	
658-31	104160-104168	benefits	
658-32	104169-104173	from	
658-33	104174-104179	these	
658-34	104180-104192	improvements	
658-35	104193-104197	with	
658-36	104198-104204	little	
658-37	104205-104211	effort	
658-38	104212-104214	As	
658-39	104215-104218	new	
658-40	104219-104226	demands	
658-41	104227-104230	are	
658-42	104231-104239	required	
658-43	104240-104242	of	
658-44	104243-104248	these	
658-45	104249-104257	external	
658-46	104258-104268	facilities	
658-47	104268-104269	,	
658-48	104270-104278	Postgres	
658-49	104279-104284	again	
658-50	104285-104293	benefits	
658-51	104294-104306	effortlessly	
658-52	104307-104312	Let's	
658-53	104313-104315	be	
658-54	104316-104324	specific	
658-55	104324-104325	.	

#Text=In the early days of Postgres, file systems were not optimized for database storage.
659-1	104326-104328	In	
659-2	104329-104332	the	
659-3	104333-104338	early	
659-4	104339-104343	days	
659-5	104344-104346	of	
659-6	104347-104355	Postgres	
659-7	104355-104356	,	
659-8	104357-104361	file	
659-9	104362-104369	systems	
659-10	104370-104374	were	
659-11	104375-104378	not	
659-12	104379-104388	optimized	
659-13	104389-104392	for	
659-14	104393-104401	database	
659-15	104402-104409	storage	
659-16	104409-104410	.	

#Text=Fortunately, Postgres never implemented file systems on
#Text=raw devices.
660-1	104411-104422	Fortunately	
660-2	104422-104423	,	
660-3	104424-104432	Postgres	
660-4	104433-104438	never	
660-5	104439-104450	implemented	
660-6	104451-104455	file	
660-7	104456-104463	systems	
660-8	104464-104466	on	
660-9	104467-104470	raw	
660-10	104471-104478	devices	
660-11	104478-104479	.	

#Text=Now that modern file systems, like ext4, give good database performance, Postgres
#Text=benefits from file system improvements with almost no effort.
661-1	104480-104483	Now	
661-2	104484-104488	that	
661-3	104489-104495	modern	
661-4	104496-104500	file	
661-5	104501-104508	systems	
661-6	104508-104509	,	
661-7	104510-104514	like	
661-8	104515-104519	ext4	
661-9	104519-104520	,	
661-10	104521-104525	give	
661-11	104526-104530	good	
661-12	104531-104539	database	
661-13	104540-104551	performance	
661-14	104551-104552	,	
661-15	104553-104561	Postgres	
661-16	104562-104570	benefits	
661-17	104571-104575	from	
661-18	104576-104580	file	
661-19	104581-104587	system	
661-20	104588-104600	improvements	
661-21	104601-104605	with	
661-22	104606-104612	almost	
661-23	104613-104615	no	
661-24	104616-104622	effort	
661-25	104622-104623	.	

#Text=Even when ssds started being
#Text=used, the only change needed in Postgres was the ability to set
#Text=random_page_cost at the tablespace
#Text=level to handle databases where some tablespaces are on ssds and some are on magnetic storage.
662-1	104624-104628	Even	
662-2	104629-104633	when	
662-3	104634-104638	ssds	
662-4	104639-104646	started	
662-5	104647-104652	being	
662-6	104653-104657	used	
662-7	104657-104658	,	
662-8	104659-104662	the	
662-9	104663-104667	only	
662-10	104668-104674	change	
662-11	104675-104681	needed	
662-12	104682-104684	in	
662-13	104685-104693	Postgres	
662-14	104694-104697	was	
662-15	104698-104701	the	
662-16	104702-104709	ability	
662-17	104710-104712	to	
662-18	104713-104716	set	
662-19	104717-104733	random_page_cost	
662-20	104734-104736	at	
662-21	104737-104740	the	
662-22	104741-104751	tablespace	
662-23	104752-104757	level	
662-24	104758-104760	to	
662-25	104761-104767	handle	
662-26	104768-104777	databases	
662-27	104778-104783	where	
662-28	104784-104788	some	
662-29	104789-104800	tablespaces	
662-30	104801-104804	are	
662-31	104805-104807	on	
662-32	104808-104812	ssds	
662-33	104813-104816	and	
662-34	104817-104821	some	
662-35	104822-104825	are	
662-36	104826-104828	on	
662-37	104829-104837	magnetic	
662-38	104838-104845	storage	
662-39	104845-104846	.	

#Text=When virtualization, cloud, containers, and container orchestration (e.g., Kubernetes) became popular, Postgres had to do almost nothing to run well on these
#Text=platforms.
663-1	104847-104851	When	
663-2	104852-104866	virtualization	
663-3	104866-104867	,	
663-4	104868-104873	cloud	
663-5	104873-104874	,	
663-6	104875-104885	containers	
663-7	104885-104886	,	
663-8	104887-104890	and	
663-9	104891-104900	container	
663-10	104901-104914	orchestration	
663-11	104915-104916	(	
663-12	104916-104919	e.g	
663-13	104919-104920	.	
663-14	104920-104921	,	
663-15	104922-104932	Kubernetes	
663-16	104932-104933	)	
663-17	104934-104940	became	
663-18	104941-104948	popular	
663-19	104948-104949	,	
663-20	104950-104958	Postgres	
663-21	104959-104962	had	
663-22	104963-104965	to	
663-23	104966-104968	do	
663-24	104969-104975	almost	
663-25	104976-104983	nothing	
663-26	104984-104986	to	
663-27	104987-104990	run	
663-28	104991-104995	well	
663-29	104996-104998	on	
663-30	104999-105004	these	
663-31	105005-105014	platforms	
663-32	105014-105015	.	

#Text=(It is true that some of the Postgres enterprise deployment tools required repackaging and re-engineering.)
664-1	105016-105017	(	
664-2	105017-105019	It	
664-3	105020-105022	is	
664-4	105023-105027	true	
664-5	105028-105032	that	
664-6	105033-105037	some	
664-7	105038-105040	of	
664-8	105041-105044	the	
664-9	105045-105053	Postgres	
664-10	105054-105064	enterprise	
664-11	105065-105075	deployment	
664-12	105076-105081	tools	
664-13	105082-105090	required	
664-14	105091-105102	repackaging	
664-15	105103-105106	and	
664-16	105107-105121	re-engineering	
664-17	105121-105122	.	
664-18	105122-105123	)	

#Text=Because of this philosophy, Postgres has remained relatively light-weight compared to other relational database systems, and this has benefited Postgres in environments where nimble deployments are
#Text=favored.
665-1	105124-105131	Because	
665-2	105132-105134	of	
665-3	105135-105139	this	
665-4	105140-105150	philosophy	
665-5	105150-105151	,	
665-6	105152-105160	Postgres	
665-7	105161-105164	has	
665-8	105165-105173	remained	
665-9	105174-105184	relatively	
665-10	105185-105197	light-weight	
665-11	105198-105206	compared	
665-12	105207-105209	to	
665-13	105210-105215	other	
665-14	105216-105226	relational	
665-15	105227-105235	database	
665-16	105236-105243	systems	
665-17	105243-105244	,	
665-18	105245-105248	and	
665-19	105249-105253	this	
665-20	105254-105257	has	
665-21	105258-105267	benefited	
665-22	105268-105276	Postgres	
665-23	105277-105279	in	
665-24	105280-105292	environments	
665-25	105293-105298	where	
665-26	105299-105305	nimble	
665-27	105306-105317	deployments	
665-28	105318-105321	are	
665-29	105322-105329	favored	
665-30	105329-105330	.	

#Text=View or Post Comments
#Text=With ...
666-1	105331-105335	View	
666-2	105336-105338	or	
666-3	105339-105343	Post	
666-4	105344-105352	Comments	
666-5	105353-105357	With	
666-6	105358-105359	.	
666-7	105359-105360	.	
666-8	105360-105361	.	

#Text=Materialized and Optimizer Control
#Text=Monday, May
#Text=4, 2020
#Text=Before Postgres 12, queries specified as common table expressions (with clauses) always behaved as optimization barriers, meaning that
#Text=common table expression queries were executed independently, and were not moved to later parts of the query.
667-1	105362-105374	Materialized	
667-2	105375-105378	and	
667-3	105379-105388	Optimizer	
667-4	105389-105396	Control	
667-5	105397-105403	Monday	
667-6	105403-105404	,	
667-7	105405-105408	May	
667-8	105409-105410	4	
667-9	105410-105411	,	
667-10	105412-105416	2020	
667-11	105417-105423	Before	
667-12	105424-105432	Postgres	
667-13	105433-105435	12	
667-14	105435-105436	,	
667-15	105437-105444	queries	
667-16	105445-105454	specified	
667-17	105455-105457	as	
667-18	105458-105464	common	
667-19	105465-105470	table	
667-20	105471-105482	expressions	
667-21	105483-105484	(	
667-22	105484-105488	with	
667-23	105489-105496	clauses	
667-24	105496-105497	)	
667-25	105498-105504	always	
667-26	105505-105512	behaved	
667-27	105513-105515	as	
667-28	105516-105528	optimization	
667-29	105529-105537	barriers	
667-30	105537-105538	,	
667-31	105539-105546	meaning	
667-32	105547-105551	that	
667-33	105552-105558	common	
667-34	105559-105564	table	
667-35	105565-105575	expression	
667-36	105576-105583	queries	
667-37	105584-105588	were	
667-38	105589-105597	executed	
667-39	105598-105611	independently	
667-40	105611-105612	,	
667-41	105613-105616	and	
667-42	105617-105621	were	
667-43	105622-105625	not	
667-44	105626-105631	moved	
667-45	105632-105634	to	
667-46	105635-105640	later	
667-47	105641-105646	parts	
667-48	105647-105649	of	
667-49	105650-105653	the	
667-50	105654-105659	query	
667-51	105659-105660	.	

#Text=Starting in Postgres 12, if a common table expression is referenced only once, and the keyword materialized is not used, it can be moved to a place later in the query where it can be better
#Text=optimized;
#Text=this improves optimization possibilities.
668-1	105661-105669	Starting	
668-2	105670-105672	in	
668-3	105673-105681	Postgres	
668-4	105682-105684	12	
668-5	105684-105685	,	
668-6	105686-105688	if	
668-7	105689-105690	a	
668-8	105691-105697	common	
668-9	105698-105703	table	
668-10	105704-105714	expression	
668-11	105715-105717	is	
668-12	105718-105728	referenced	
668-13	105729-105733	only	
668-14	105734-105738	once	
668-15	105738-105739	,	
668-16	105740-105743	and	
668-17	105744-105747	the	
668-18	105748-105755	keyword	
668-19	105756-105768	materialized	
668-20	105769-105771	is	
668-21	105772-105775	not	
668-22	105776-105780	used	
668-23	105780-105781	,	
668-24	105782-105784	it	
668-25	105785-105788	can	
668-26	105789-105791	be	
668-27	105792-105797	moved	
668-28	105798-105800	to	
668-29	105801-105802	a	
668-30	105803-105808	place	
668-31	105809-105814	later	
668-32	105815-105817	in	
668-33	105818-105821	the	
668-34	105822-105827	query	
668-35	105828-105833	where	
668-36	105834-105836	it	
668-37	105837-105840	can	
668-38	105841-105843	be	
668-39	105844-105850	better	
668-40	105851-105860	optimized	
668-41	105860-105861	;	
668-42	105862-105866	this	
668-43	105867-105875	improves	
668-44	105876-105888	optimization	
668-45	105889-105902	possibilities	
668-46	105902-105903	.	

#Text=However, if the movement of common table expression queries increases the from clause table count above the
#Text=geqo_threshold, Postgres will decide it can't efficiently optimize such a high table count query and will use
#Text=the genetic query optimizer.
669-1	105904-105911	However	
669-2	105911-105912	,	
669-3	105913-105915	if	
669-4	105916-105919	the	
669-5	105920-105928	movement	
669-6	105929-105931	of	
669-7	105932-105938	common	
669-8	105939-105944	table	
669-9	105945-105955	expression	
669-10	105956-105963	queries	
669-11	105964-105973	increases	
669-12	105974-105977	the	
669-13	105978-105982	from	
669-14	105983-105989	clause	
669-15	105990-105995	table	
669-16	105996-106001	count	
669-17	106002-106007	above	
669-18	106008-106011	the	
669-19	106012-106026	geqo_threshold	
669-20	106026-106027	,	
669-21	106028-106036	Postgres	
669-22	106037-106041	will	
669-23	106042-106048	decide	
669-24	106049-106051	it	
669-25	106052-106057	can't	
669-26	106058-106069	efficiently	
669-27	106070-106078	optimize	
669-28	106079-106083	such	
669-29	106084-106085	a	
669-30	106086-106090	high	
669-31	106091-106096	table	
669-32	106097-106102	count	
669-33	106103-106108	query	
669-34	106109-106112	and	
669-35	106113-106117	will	
669-36	106118-106121	use	
669-37	106122-106125	the	
669-38	106126-106133	genetic	
669-39	106134-106139	query	
669-40	106140-106149	optimizer	
669-41	106149-106150	.	

#Text=So, while the new Postgres 12 behavior of in-lining common table expressions usually increases the quality of optimized plans, in some cases it can decrease them by enabling the genetic query optimizer.
670-1	106151-106153	So	
670-2	106153-106154	,	
670-3	106155-106160	while	
670-4	106161-106164	the	
670-5	106165-106168	new	
670-6	106169-106177	Postgres	
670-7	106178-106180	12	
670-8	106181-106189	behavior	
670-9	106190-106192	of	
670-10	106193-106202	in-lining	
670-11	106203-106209	common	
670-12	106210-106215	table	
670-13	106216-106227	expressions	
670-14	106228-106235	usually	
670-15	106236-106245	increases	
670-16	106246-106249	the	
670-17	106250-106257	quality	
670-18	106258-106260	of	
670-19	106261-106270	optimized	
670-20	106271-106276	plans	
670-21	106276-106277	,	
670-22	106278-106280	in	
670-23	106281-106285	some	
670-24	106286-106291	cases	
670-25	106292-106294	it	
670-26	106295-106298	can	
670-27	106299-106307	decrease	
670-28	106308-106312	them	
670-29	106313-106315	by	
670-30	106316-106324	enabling	
670-31	106325-106328	the	
670-32	106329-106336	genetic	
670-33	106337-106342	query	
670-34	106343-106352	optimizer	
670-35	106352-106353	.	

#Text=In a way, in pre-Postgres 12 or with the use of materialized, the query author is doing the optimization by creating common table expressions, while in other cases, the optimizer has greater
#Text=control, though even the optimizer can determine the query is too complex and fall back to less-precise genetic query optimization.
671-1	106354-106356	In	
671-2	106357-106358	a	
671-3	106359-106362	way	
671-4	106362-106363	,	
671-5	106364-106366	in	
671-6	106367-106379	pre-Postgres	
671-7	106380-106382	12	
671-8	106383-106385	or	
671-9	106386-106390	with	
671-10	106391-106394	the	
671-11	106395-106398	use	
671-12	106399-106401	of	
671-13	106402-106414	materialized	
671-14	106414-106415	,	
671-15	106416-106419	the	
671-16	106420-106425	query	
671-17	106426-106432	author	
671-18	106433-106435	is	
671-19	106436-106441	doing	
671-20	106442-106445	the	
671-21	106446-106458	optimization	
671-22	106459-106461	by	
671-23	106462-106470	creating	
671-24	106471-106477	common	
671-25	106478-106483	table	
671-26	106484-106495	expressions	
671-27	106495-106496	,	
671-28	106497-106502	while	
671-29	106503-106505	in	
671-30	106506-106511	other	
671-31	106512-106517	cases	
671-32	106517-106518	,	
671-33	106519-106522	the	
671-34	106523-106532	optimizer	
671-35	106533-106536	has	
671-36	106537-106544	greater	
671-37	106545-106552	control	
671-38	106552-106553	,	
671-39	106554-106560	though	
671-40	106561-106565	even	
671-41	106566-106569	the	
671-42	106570-106579	optimizer	
671-43	106580-106583	can	
671-44	106584-106593	determine	
671-45	106594-106597	the	
671-46	106598-106603	query	
671-47	106604-106606	is	
671-48	106607-106610	too	
671-49	106611-106618	complex	
671-50	106619-106622	and	
671-51	106623-106627	fall	
671-52	106628-106632	back	
671-53	106633-106635	to	
671-54	106636-106648	less-precise	
671-55	106649-106656	genetic	
671-56	106657-106662	query	
671-57	106663-106675	optimization	
671-58	106675-106676	.	

#Text=View or Post Comments
#Text=Background Writes
#Text=Friday, May
#Text=1, 2020
#Text=Postgres must guarantee durability and good performance.
672-1	106677-106681	View	
672-2	106682-106684	or	
672-3	106685-106689	Post	
672-4	106690-106698	Comments	
672-5	106699-106709	Background	
672-6	106710-106716	Writes	
672-7	106717-106723	Friday	
672-8	106723-106724	,	
672-9	106725-106728	May	
672-10	106729-106730	1	
672-11	106730-106731	,	
672-12	106732-106736	2020	
672-13	106737-106745	Postgres	
672-14	106746-106750	must	
672-15	106751-106760	guarantee	
672-16	106761-106771	durability	
672-17	106772-106775	and	
672-18	106776-106780	good	
672-19	106781-106792	performance	
672-20	106792-106793	.	

#Text=To meet these objectives, Postgres does writes to the file system and storage in the
#Text=background as much as possible.
673-1	106794-106796	To	
673-2	106797-106801	meet	
673-3	106802-106807	these	
673-4	106808-106818	objectives	
673-5	106818-106819	,	
673-6	106820-106828	Postgres	
673-7	106829-106833	does	
673-8	106834-106840	writes	
673-9	106841-106843	to	
673-10	106844-106847	the	
673-11	106848-106852	file	
673-12	106853-106859	system	
673-13	106860-106863	and	
673-14	106864-106871	storage	
673-15	106872-106874	in	
673-16	106875-106878	the	
673-17	106879-106889	background	
673-18	106890-106892	as	
673-19	106893-106897	much	
673-20	106898-106900	as	
673-21	106901-106909	possible	
673-22	106909-106910	.	

#Text=In fact, there are only two major cases where writes happen in the foreground:
#Text=Write-ahead log writes happen before commits are acknowledged to the client
#Text=A needed shared_buffer is dirty and must be written to storage so it can be replaced
#Text=Write-ahead log writes (#1) can be controlled using various settings.
674-1	106911-106913	In	
674-2	106914-106918	fact	
674-3	106918-106919	,	
674-4	106920-106925	there	
674-5	106926-106929	are	
674-6	106930-106934	only	
674-7	106935-106938	two	
674-8	106939-106944	major	
674-9	106945-106950	cases	
674-10	106951-106956	where	
674-11	106957-106963	writes	
674-12	106964-106970	happen	
674-13	106971-106973	in	
674-14	106974-106977	the	
674-15	106978-106988	foreground	
674-16	106988-106989	:	
674-17	106990-107001	Write-ahead	
674-18	107002-107005	log	
674-19	107006-107012	writes	
674-20	107013-107019	happen	
674-21	107020-107026	before	
674-22	107027-107034	commits	
674-23	107035-107038	are	
674-24	107039-107051	acknowledged	
674-25	107052-107054	to	
674-26	107055-107058	the	
674-27	107059-107065	client	
674-28	107066-107067	A	
674-29	107068-107074	needed	
674-30	107075-107088	shared_buffer	
674-31	107089-107091	is	
674-32	107092-107097	dirty	
674-33	107098-107101	and	
674-34	107102-107106	must	
674-35	107107-107109	be	
674-36	107110-107117	written	
674-37	107118-107120	to	
674-38	107121-107128	storage	
674-39	107129-107131	so	
674-40	107132-107134	it	
674-41	107135-107138	can	
674-42	107139-107141	be	
674-43	107142-107150	replaced	
674-44	107151-107162	Write-ahead	
674-45	107163-107166	log	
674-46	107167-107173	writes	
674-47	107174-107175	(	
674-48	107175-107177	#1	
674-49	107177-107178	)	
674-50	107179-107182	can	
674-51	107183-107185	be	
674-52	107186-107196	controlled	
674-53	107197-107202	using	
674-54	107203-107210	various	
674-55	107211-107219	settings	
674-56	107219-107220	.	

#Text=Dirty shared buffer writes (#2) that happen in the foreground are
#Text=minimized if the background writer is operating efficiently.
675-1	107221-107226	Dirty	
675-2	107227-107233	shared	
675-3	107234-107240	buffer	
675-4	107241-107247	writes	
675-5	107248-107249	(	
675-6	107249-107251	#2	
675-7	107251-107252	)	
675-8	107253-107257	that	
675-9	107258-107264	happen	
675-10	107265-107267	in	
675-11	107268-107271	the	
675-12	107272-107282	foreground	
675-13	107283-107286	are	
675-14	107287-107296	minimized	
675-15	107297-107299	if	
675-16	107300-107303	the	
675-17	107304-107314	background	
675-18	107315-107321	writer	
675-19	107322-107324	is	
675-20	107325-107334	operating	
675-21	107335-107346	efficiently	
675-22	107346-107347	.	

#Text=You can monitor such writes by
#Text=viewing the probe buffer-write-dirty-start and buffer-write-dirty-done.
676-1	107348-107351	You	
676-2	107352-107355	can	
676-3	107356-107363	monitor	
676-4	107364-107368	such	
676-5	107369-107375	writes	
676-6	107376-107378	by	
676-7	107379-107386	viewing	
676-8	107387-107390	the	
676-9	107391-107396	probe	
676-10	107397-107421	buffer-write-dirty-start	
676-11	107422-107425	and	
676-12	107426-107449	buffer-write-dirty-done	
676-13	107449-107450	.	

#Text=View or Post Comments
#Text=Optimal Use of Ssds
#Text=Wednesday, April 29, 2020
#Text=Ssds have different performance characteristics than magnetic disks, and using them optimally isn't always clear.
677-1	107451-107455	View	
677-2	107456-107458	or	
677-3	107459-107463	Post	
677-4	107464-107472	Comments	
677-5	107473-107480	Optimal	
677-6	107481-107484	Use	
677-7	107485-107487	of	
677-8	107488-107492	Ssds	
677-9	107493-107502	Wednesday	
677-10	107502-107503	,	
677-11	107504-107509	April	
677-12	107510-107512	29	
677-13	107512-107513	,	
677-14	107514-107518	2020	
677-15	107519-107523	Ssds	
677-16	107524-107528	have	
677-17	107529-107538	different	
677-18	107539-107550	performance	
677-19	107551-107566	characteristics	
677-20	107567-107571	than	
677-21	107572-107580	magnetic	
677-22	107581-107586	disks	
677-23	107586-107587	,	
677-24	107588-107591	and	
677-25	107592-107597	using	
677-26	107598-107602	them	
677-27	107603-107612	optimally	
677-28	107613-107618	isn't	
677-29	107619-107625	always	
677-30	107626-107631	clear	
677-31	107631-107632	.	

#Text=Ssds have several performance benefits:
#Text=Very fast fsyncs
#Text=Much faster random reads and writes
#Text=Faster sequential reads and writes
#Text=So, if all your data is stored on ssds, you will certainly improve performance.
678-1	107633-107637	Ssds	
678-2	107638-107642	have	
678-3	107643-107650	several	
678-4	107651-107662	performance	
678-5	107663-107671	benefits	
678-6	107671-107672	:	
678-7	107673-107677	Very	
678-8	107678-107682	fast	
678-9	107683-107689	fsyncs	
678-10	107690-107694	Much	
678-11	107695-107701	faster	
678-12	107702-107708	random	
678-13	107709-107714	reads	
678-14	107715-107718	and	
678-15	107719-107725	writes	
678-16	107726-107732	Faster	
678-17	107733-107743	sequential	
678-18	107744-107749	reads	
678-19	107750-107753	and	
678-20	107754-107760	writes	
678-21	107761-107763	So	
678-22	107763-107764	,	
678-23	107765-107767	if	
678-24	107768-107771	all	
678-25	107772-107776	your	
678-26	107777-107781	data	
678-27	107782-107784	is	
678-28	107785-107791	stored	
678-29	107792-107794	on	
678-30	107795-107799	ssds	
678-31	107799-107800	,	
678-32	107801-107804	you	
678-33	107805-107809	will	
678-34	107810-107819	certainly	
678-35	107820-107827	improve	
678-36	107828-107839	performance	
678-37	107839-107840	.	

#Text=If you are mixing ssds and magnetic disks, ideally you should use ssds in ways that give the
#Text=greatest benefit.
679-1	107841-107843	If	
679-2	107844-107847	you	
679-3	107848-107851	are	
679-4	107852-107858	mixing	
679-5	107859-107863	ssds	
679-6	107864-107867	and	
679-7	107868-107876	magnetic	
679-8	107877-107882	disks	
679-9	107882-107883	,	
679-10	107884-107891	ideally	
679-11	107892-107895	you	
679-12	107896-107902	should	
679-13	107903-107906	use	
679-14	107907-107911	ssds	
679-15	107912-107914	in	
679-16	107915-107919	ways	
679-17	107920-107924	that	
679-18	107925-107929	give	
679-19	107930-107933	the	
679-20	107934-107942	greatest	
679-21	107943-107950	benefit	
679-22	107950-107951	.	

#Text=Starting with number one, putting the write-ahead log on ssds is a great way to improve fsync performance.
680-1	107952-107960	Starting	
680-2	107961-107965	with	
680-3	107966-107972	number	
680-4	107973-107976	one	
680-5	107976-107977	,	
680-6	107978-107985	putting	
680-7	107986-107989	the	
680-8	107990-108001	write-ahead	
680-9	108002-108005	log	
680-10	108006-108008	on	
680-11	108009-108013	ssds	
680-12	108014-108016	is	
680-13	108017-108018	a	
680-14	108019-108024	great	
680-15	108025-108028	way	
680-16	108029-108031	to	
680-17	108032-108039	improve	
680-18	108040-108045	fsync	
680-19	108046-108057	performance	
680-20	108057-108058	.	

#Text=For number two, moving indexes to tablespaces using ssd storage can greatly improve performance because index access is usually random.
681-1	108059-108062	For	
681-2	108063-108069	number	
681-3	108070-108073	two	
681-4	108073-108074	,	
681-5	108075-108081	moving	
681-6	108082-108089	indexes	
681-7	108090-108092	to	
681-8	108093-108104	tablespaces	
681-9	108105-108110	using	
681-10	108111-108114	ssd	
681-11	108115-108122	storage	
681-12	108123-108126	can	
681-13	108127-108134	greatly	
681-14	108135-108142	improve	
681-15	108143-108154	performance	
681-16	108155-108162	because	
681-17	108163-108168	index	
681-18	108169-108175	access	
681-19	108176-108178	is	
681-20	108179-108186	usually	
681-21	108187-108193	random	
681-22	108193-108194	.	

#Text=When using ssds, the default value for
#Text=random_page_cost should be lowered, perhaps to 1.1.
682-1	108195-108199	When	
682-2	108200-108205	using	
682-3	108206-108210	ssds	
682-4	108210-108211	,	
682-5	108212-108215	the	
682-6	108216-108223	default	
682-7	108224-108229	value	
682-8	108230-108233	for	
682-9	108234-108250	random_page_cost	
682-10	108251-108257	should	
682-11	108258-108260	be	
682-12	108261-108268	lowered	
682-13	108268-108269	,	
682-14	108270-108277	perhaps	
682-15	108278-108280	to	
682-16	108281-108284	1.1	
682-17	108284-108285	.	

#Text=This can be set at the
#Text=tablespace level if there is a mix of tablespaces on ssds and magnetic disks.
683-1	108286-108290	This	
683-2	108291-108294	can	
683-3	108295-108297	be	
683-4	108298-108301	set	
683-5	108302-108304	at	
683-6	108305-108308	the	
683-7	108309-108319	tablespace	
683-8	108320-108325	level	
683-9	108326-108328	if	
683-10	108329-108334	there	
683-11	108335-108337	is	
683-12	108338-108339	a	
683-13	108340-108343	mix	
683-14	108344-108346	of	
683-15	108347-108358	tablespaces	
683-16	108359-108361	on	
683-17	108362-108366	ssds	
683-18	108367-108370	and	
683-19	108371-108379	magnetic	
683-20	108380-108385	disks	
683-21	108385-108386	.	

#Text=For number three, it is also possible to create tablespaces on ssds for current data, and place archive data on tablespaces that use magnetic disks.
684-1	108387-108390	For	
684-2	108391-108397	number	
684-3	108398-108403	three	
684-4	108403-108404	,	
684-5	108405-108407	it	
684-6	108408-108410	is	
684-7	108411-108415	also	
684-8	108416-108424	possible	
684-9	108425-108427	to	
684-10	108428-108434	create	
684-11	108435-108446	tablespaces	
684-12	108447-108449	on	
684-13	108450-108454	ssds	
684-14	108455-108458	for	
684-15	108459-108466	current	
684-16	108467-108471	data	
684-17	108471-108472	,	
684-18	108473-108476	and	
684-19	108477-108482	place	
684-20	108483-108490	archive	
684-21	108491-108495	data	
684-22	108496-108498	on	
684-23	108499-108510	tablespaces	
684-24	108511-108515	that	
684-25	108516-108519	use	
684-26	108520-108528	magnetic	
684-27	108529-108534	disks	
684-28	108534-108535	.	

#Text=By using
#Text=table partitioning, a partitioned table can transparently span ssds and magnetic disk tablespaces.
685-1	108536-108538	By	
685-2	108539-108544	using	
685-3	108545-108550	table	
685-4	108551-108563	partitioning	
685-5	108563-108564	,	
685-6	108565-108566	a	
685-7	108567-108578	partitioned	
685-8	108579-108584	table	
685-9	108585-108588	can	
685-10	108589-108602	transparently	
685-11	108603-108607	span	
685-12	108608-108612	ssds	
685-13	108613-108616	and	
685-14	108617-108625	magnetic	
685-15	108626-108630	disk	
685-16	108631-108642	tablespaces	
685-17	108642-108643	.	

#Text=View or Post Comments
#Text=Does Postgres Support Compression?
686-1	108644-108648	View	
686-2	108649-108651	or	
686-3	108652-108656	Post	
686-4	108657-108665	Comments	
686-5	108666-108670	Does	
686-6	108671-108679	Postgres	
686-7	108680-108687	Support	
686-8	108688-108699	Compression	
686-9	108699-108700	?	

#Text=Monday, April 27, 2020
#Text=I am often asked if Postgres supports compression, and my answer is always a complicated dance around what "compression" level they are asking about.
687-1	108701-108707	Monday	
687-2	108707-108708	,	
687-3	108709-108714	April	
687-4	108715-108717	27	
687-5	108717-108718	,	
687-6	108719-108723	2020	
687-7	108724-108725	I	
687-8	108726-108728	am	
687-9	108729-108734	often	
687-10	108735-108740	asked	
687-11	108741-108743	if	
687-12	108744-108752	Postgres	
687-13	108753-108761	supports	
687-14	108762-108773	compression	
687-15	108773-108774	,	
687-16	108775-108778	and	
687-17	108779-108781	my	
687-18	108782-108788	answer	
687-19	108789-108791	is	
687-20	108792-108798	always	
687-21	108799-108800	a	
687-22	108801-108812	complicated	
687-23	108813-108818	dance	
687-24	108819-108825	around	
687-25	108826-108830	what	
687-26	108831-108832	"	
687-27	108832-108843	compression	
687-28	108843-108844	"	
687-29	108845-108850	level	
687-30	108851-108855	they	
687-31	108856-108859	are	
687-32	108860-108866	asking	
687-33	108867-108872	about	
687-34	108872-108873	.	

#Text=There are six possible levels of database compression:
#Text=single field
#Text=across rows in a single page
#Text=across rows in a single column
#Text=across all columns and rows in a table
#Text=across tables in a database
#Text=across databases
#Text=Number one (single field) is currently done by toast.
688-1	108874-108879	There	
688-2	108880-108883	are	
688-3	108884-108887	six	
688-4	108888-108896	possible	
688-5	108897-108903	levels	
688-6	108904-108906	of	
688-7	108907-108915	database	
688-8	108916-108927	compression	
688-9	108927-108928	:	
688-10	108929-108935	single	
688-11	108936-108941	field	
688-12	108942-108948	across	
688-13	108949-108953	rows	
688-14	108954-108956	in	
688-15	108957-108958	a	
688-16	108959-108965	single	
688-17	108966-108970	page	
688-18	108971-108977	across	
688-19	108978-108982	rows	
688-20	108983-108985	in	
688-21	108986-108987	a	
688-22	108988-108994	single	
688-23	108995-109001	column	
688-24	109002-109008	across	
688-25	109009-109012	all	
688-26	109013-109020	columns	
688-27	109021-109024	and	
688-28	109025-109029	rows	
688-29	109030-109032	in	
688-30	109033-109034	a	
688-31	109035-109040	table	
688-32	109041-109047	across	
688-33	109048-109054	tables	
688-34	109055-109057	in	
688-35	109058-109059	a	
688-36	109060-109068	database	
688-37	109069-109075	across	
688-38	109076-109085	databases	
688-39	109086-109092	Number	
688-40	109093-109096	one	
688-41	109097-109098	(	
688-42	109098-109104	single	
688-43	109105-109110	field	
688-44	109110-109111	)	
688-45	109112-109114	is	
688-46	109115-109124	currently	
688-47	109125-109129	done	
688-48	109130-109132	by	
688-49	109133-109138	toast	
688-50	109138-109139	.	

#Text=Number two (across rows in a single page) is a practical optimization
#Text=where a compression routine blindly looks for repeating values in a page without understanding its structure.
689-1	109140-109146	Number	
689-2	109147-109150	two	
689-3	109151-109152	(	
689-4	109152-109158	across	
689-5	109159-109163	rows	
689-6	109164-109166	in	
689-7	109167-109168	a	
689-8	109169-109175	single	
689-9	109176-109180	page	
689-10	109180-109181	)	
689-11	109182-109184	is	
689-12	109185-109186	a	
689-13	109187-109196	practical	
689-14	109197-109209	optimization	
689-15	109210-109215	where	
689-16	109216-109217	a	
689-17	109218-109229	compression	
689-18	109230-109237	routine	
689-19	109238-109245	blindly	
689-20	109246-109251	looks	
689-21	109252-109255	for	
689-22	109256-109265	repeating	
689-23	109266-109272	values	
689-24	109273-109275	in	
689-25	109276-109277	a	
689-26	109278-109282	page	
689-27	109283-109290	without	
689-28	109291-109304	understanding	
689-29	109305-109308	its	
689-30	109309-109318	structure	
689-31	109318-109319	.	

#Text=The difficulty of implementing this happens when a page is stored using its compressed length
#Text=(rather than the uncompressed 8k), the page contents change, and the new contents compress less well than the previous contents.
690-1	109320-109323	The	
690-2	109324-109334	difficulty	
690-3	109335-109337	of	
690-4	109338-109350	implementing	
690-5	109351-109355	this	
690-6	109356-109363	happens	
690-7	109364-109368	when	
690-8	109369-109370	a	
690-9	109371-109375	page	
690-10	109376-109378	is	
690-11	109379-109385	stored	
690-12	109386-109391	using	
690-13	109392-109395	its	
690-14	109396-109406	compressed	
690-15	109407-109413	length	
690-16	109414-109415	(	
690-17	109415-109421	rather	
690-18	109422-109426	than	
690-19	109427-109430	the	
690-20	109431-109443	uncompressed	
690-21	109444-109446	8k	
690-22	109446-109447	)	
690-23	109447-109448	,	
690-24	109449-109452	the	
690-25	109453-109457	page	
690-26	109458-109466	contents	
690-27	109467-109473	change	
690-28	109473-109474	,	
690-29	109475-109478	and	
690-30	109479-109482	the	
690-31	109483-109486	new	
690-32	109487-109495	contents	
690-33	109496-109504	compress	
690-34	109505-109509	less	
690-35	109510-109514	well	
690-36	109515-109519	than	
690-37	109520-109523	the	
690-38	109524-109532	previous	
690-39	109533-109541	contents	
690-40	109541-109542	.	

#Text=In this case, the compressed page contents would be larger and it would be
#Text=very complex to fit the page into the existing space in the file.
691-1	109543-109545	In	
691-2	109546-109550	this	
691-3	109551-109555	case	
691-4	109555-109556	,	
691-5	109557-109560	the	
691-6	109561-109571	compressed	
691-7	109572-109576	page	
691-8	109577-109585	contents	
691-9	109586-109591	would	
691-10	109592-109594	be	
691-11	109595-109601	larger	
691-12	109602-109605	and	
691-13	109606-109608	it	
691-14	109609-109614	would	
691-15	109615-109617	be	
691-16	109618-109622	very	
691-17	109623-109630	complex	
691-18	109631-109633	to	
691-19	109634-109637	fit	
691-20	109638-109641	the	
691-21	109642-109646	page	
691-22	109647-109651	into	
691-23	109652-109655	the	
691-24	109656-109664	existing	
691-25	109665-109670	space	
691-26	109671-109673	in	
691-27	109674-109677	the	
691-28	109678-109682	file	
691-29	109682-109683	.	

#Text=A different file layout is really required for this, so pages can be placed anywhere in the file, without affecting index access.
692-1	109684-109685	A	
692-2	109686-109695	different	
692-3	109696-109700	file	
692-4	109701-109707	layout	
692-5	109708-109710	is	
692-6	109711-109717	really	
692-7	109718-109726	required	
692-8	109727-109730	for	
692-9	109731-109735	this	
692-10	109735-109736	,	
692-11	109737-109739	so	
692-12	109740-109745	pages	
692-13	109746-109749	can	
692-14	109750-109752	be	
692-15	109753-109759	placed	
692-16	109760-109768	anywhere	
692-17	109769-109771	in	
692-18	109772-109775	the	
692-19	109776-109780	file	
692-20	109780-109781	,	
692-21	109782-109789	without	
692-22	109790-109799	affecting	
692-23	109800-109805	index	
692-24	109806-109812	access	
692-25	109812-109813	.	

#Text=A team
#Text=is working on adding this feature using Postgres's
#Text=table access method interface.
693-1	109814-109815	A	
693-2	109816-109820	team	
693-3	109821-109823	is	
693-4	109824-109831	working	
693-5	109832-109834	on	
693-6	109835-109841	adding	
693-7	109842-109846	this	
693-8	109847-109854	feature	
693-9	109855-109860	using	
693-10	109861-109871	Postgres's	
693-11	109872-109877	table	
693-12	109878-109884	access	
693-13	109885-109891	method	
693-14	109892-109901	interface	
693-15	109901-109902	.	

#Text=Number three (across rows in a single column) is the classic definition of a columnar database.
694-1	109903-109909	Number	
694-2	109910-109915	three	
694-3	109916-109917	(	
694-4	109917-109923	across	
694-5	109924-109928	rows	
694-6	109929-109931	in	
694-7	109932-109933	a	
694-8	109934-109940	single	
694-9	109941-109947	column	
694-10	109947-109948	)	
694-11	109949-109951	is	
694-12	109952-109955	the	
694-13	109956-109963	classic	
694-14	109964-109974	definition	
694-15	109975-109977	of	
694-16	109978-109979	a	
694-17	109980-109988	columnar	
694-18	109989-109997	database	
694-19	109997-109998	.	

#Text=A team is also
#Text=working on that.
695-1	109999-110000	A	
695-2	110001-110005	team	
695-3	110006-110008	is	
695-4	110009-110013	also	
695-5	110014-110021	working	
695-6	110022-110024	on	
695-7	110025-110029	that	
695-8	110029-110030	.	

#Text=Just like number two, this requires using a different storage layout than Postgres's default, and the table access method
#Text=interface makes this possible.
696-1	110031-110035	Just	
696-2	110036-110040	like	
696-3	110041-110047	number	
696-4	110048-110051	two	
696-5	110051-110052	,	
696-6	110053-110057	this	
696-7	110058-110066	requires	
696-8	110067-110072	using	
696-9	110073-110074	a	
696-10	110075-110084	different	
696-11	110085-110092	storage	
696-12	110093-110099	layout	
696-13	110100-110104	than	
696-14	110105-110115	Postgres's	
696-15	110116-110123	default	
696-16	110123-110124	,	
696-17	110125-110128	and	
696-18	110129-110132	the	
696-19	110133-110138	table	
696-20	110139-110145	access	
696-21	110146-110152	method	
696-22	110153-110162	interface	
696-23	110163-110168	makes	
696-24	110169-110173	this	
696-25	110174-110182	possible	
696-26	110182-110183	.	

#Text=Number four can be done using file system compression.
697-1	110184-110190	Number	
697-2	110191-110195	four	
697-3	110196-110199	can	
697-4	110200-110202	be	
697-5	110203-110207	done	
697-6	110208-110213	using	
697-7	110214-110218	file	
697-8	110219-110225	system	
697-9	110226-110237	compression	
697-10	110237-110238	.	

#Text=Numbers five and six would be nice, but it unclear how this could be done efficiently without adding unacceptable complexity to the database.
698-1	110239-110246	Numbers	
698-2	110247-110251	five	
698-3	110252-110255	and	
698-4	110256-110259	six	
698-5	110260-110265	would	
698-6	110266-110268	be	
698-7	110269-110273	nice	
698-8	110273-110274	,	
698-9	110275-110278	but	
698-10	110279-110281	it	
698-11	110282-110289	unclear	
698-12	110290-110293	how	
698-13	110294-110298	this	
698-14	110299-110304	could	
698-15	110305-110307	be	
698-16	110308-110312	done	
698-17	110313-110324	efficiently	
698-18	110325-110332	without	
698-19	110333-110339	adding	
698-20	110340-110352	unacceptable	
698-21	110353-110363	complexity	
698-22	110364-110366	to	
698-23	110367-110370	the	
698-24	110371-110379	database	
698-25	110379-110380	.	

#Text=View or Post Comments
#Text=Multi-Host Technologies
#Text=Friday, April 24, 2020
#Text=There are so many multi-host technologies and it is hard to remember the benefits of each one, so I decided to create a list:
#Text=High availability: Streaming replication is the simplest way to have multiple copies of your database, ready for fail over
#Text=Read scaling: Pgpool allows replicas (slide 17) to handle a database's read-only
#Text=workload
#Text=Write scaling: Sharding allows for write scaling
#Text=Partial replication: Logical replication allows partial replication
#Text=Reduce latency: Multi-master replication allows servers to be located close to users, reducing transmission latency
#Text=Hopefully this is helpful to people.
699-1	110381-110385	View	
699-2	110386-110388	or	
699-3	110389-110393	Post	
699-4	110394-110402	Comments	
699-5	110403-110413	Multi-Host	
699-6	110414-110426	Technologies	
699-7	110427-110433	Friday	
699-8	110433-110434	,	
699-9	110435-110440	April	
699-10	110441-110443	24	
699-11	110443-110444	,	
699-12	110445-110449	2020	
699-13	110450-110455	There	
699-14	110456-110459	are	
699-15	110460-110462	so	
699-16	110463-110467	many	
699-17	110468-110478	multi-host	
699-18	110479-110491	technologies	
699-19	110492-110495	and	
699-20	110496-110498	it	
699-21	110499-110501	is	
699-22	110502-110506	hard	
699-23	110507-110509	to	
699-24	110510-110518	remember	
699-25	110519-110522	the	
699-26	110523-110531	benefits	
699-27	110532-110534	of	
699-28	110535-110539	each	
699-29	110540-110543	one	
699-30	110543-110544	,	
699-31	110545-110547	so	
699-32	110548-110549	I	
699-33	110550-110557	decided	
699-34	110558-110560	to	
699-35	110561-110567	create	
699-36	110568-110569	a	
699-37	110570-110574	list	
699-38	110574-110575	:	
699-39	110576-110580	High	
699-40	110581-110593	availability	
699-41	110593-110594	:	
699-42	110595-110604	Streaming	
699-43	110605-110616	replication	
699-44	110617-110619	is	
699-45	110620-110623	the	
699-46	110624-110632	simplest	
699-47	110633-110636	way	
699-48	110637-110639	to	
699-49	110640-110644	have	
699-50	110645-110653	multiple	
699-51	110654-110660	copies	
699-52	110661-110663	of	
699-53	110664-110668	your	
699-54	110669-110677	database	
699-55	110677-110678	,	
699-56	110679-110684	ready	
699-57	110685-110688	for	
699-58	110689-110693	fail	
699-59	110694-110698	over	
699-60	110699-110703	Read	
699-61	110704-110711	scaling	
699-62	110711-110712	:	
699-63	110713-110719	Pgpool	
699-64	110720-110726	allows	
699-65	110727-110735	replicas	
699-66	110736-110737	(	
699-67	110737-110742	slide	
699-68	110743-110745	17	
699-69	110745-110746	)	
699-70	110747-110749	to	
699-71	110750-110756	handle	
699-72	110757-110758	a	
699-73	110759-110769	database's	
699-74	110770-110779	read-only	
699-75	110780-110788	workload	
699-76	110789-110794	Write	
699-77	110795-110802	scaling	
699-78	110802-110803	:	
699-79	110804-110812	Sharding	
699-80	110813-110819	allows	
699-81	110820-110823	for	
699-82	110824-110829	write	
699-83	110830-110837	scaling	
699-84	110838-110845	Partial	
699-85	110846-110857	replication	
699-86	110857-110858	:	
699-87	110859-110866	Logical	
699-88	110867-110878	replication	
699-89	110879-110885	allows	
699-90	110886-110893	partial	
699-91	110894-110905	replication	
699-92	110906-110912	Reduce	
699-93	110913-110920	latency	
699-94	110920-110921	:	
699-95	110922-110934	Multi-master	
699-96	110935-110946	replication	
699-97	110947-110953	allows	
699-98	110954-110961	servers	
699-99	110962-110964	to	
699-100	110965-110967	be	
699-101	110968-110975	located	
699-102	110976-110981	close	
699-103	110982-110984	to	
699-104	110985-110990	users	
699-105	110990-110991	,	
699-106	110992-111000	reducing	
699-107	111001-111013	transmission	
699-108	111014-111021	latency	
699-109	111022-111031	Hopefully	
699-110	111032-111036	this	
699-111	111037-111039	is	
699-112	111040-111047	helpful	
699-113	111048-111050	to	
699-114	111051-111057	people	
699-115	111057-111058	.	

#Text=View or Post Comments
#Text=Performance Goalposts
#Text=Wednesday, April 22, 2020
#Text=In talking to EnterpriseDB customers, I am often asked about the performance limits of Postgres:
#Text=How many connections can it handle?
700-1	111059-111063	View	
700-2	111064-111066	or	
700-3	111067-111071	Post	
700-4	111072-111080	Comments	
700-5	111081-111092	Performance	
700-6	111093-111102	Goalposts	
700-7	111103-111112	Wednesday	
700-8	111112-111113	,	
700-9	111114-111119	April	
700-10	111120-111122	22	
700-11	111122-111123	,	
700-12	111124-111128	2020	
700-13	111129-111131	In	
700-14	111132-111139	talking	
700-15	111140-111142	to	
700-16	111143-111155	EnterpriseDB	
700-17	111156-111165	customers	
700-18	111165-111166	,	
700-19	111167-111168	I	
700-20	111169-111171	am	
700-21	111172-111177	often	
700-22	111178-111183	asked	
700-23	111184-111189	about	
700-24	111190-111193	the	
700-25	111194-111205	performance	
700-26	111206-111212	limits	
700-27	111213-111215	of	
700-28	111216-111224	Postgres	
700-29	111224-111225	:	
700-30	111226-111229	How	
700-31	111230-111234	many	
700-32	111235-111246	connections	
700-33	111247-111250	can	
700-34	111251-111253	it	
700-35	111254-111260	handle	
700-36	111260-111261	?	

#Text=How many tps?
701-1	111262-111265	How	
701-2	111266-111270	many	
701-3	111271-111274	tps	
701-4	111274-111275	?	

#Text=Well, those are good questions, but it is hard to give accurate answers since so much depends on the hardware and workload.
702-1	111276-111280	Well	
702-2	111280-111281	,	
702-3	111282-111287	those	
702-4	111288-111291	are	
702-5	111292-111296	good	
702-6	111297-111306	questions	
702-7	111306-111307	,	
702-8	111308-111311	but	
702-9	111312-111314	it	
702-10	111315-111317	is	
702-11	111318-111322	hard	
702-12	111323-111325	to	
702-13	111326-111330	give	
702-14	111331-111339	accurate	
702-15	111340-111347	answers	
702-16	111348-111353	since	
702-17	111354-111356	so	
702-18	111357-111361	much	
702-19	111362-111369	depends	
702-20	111370-111372	on	
702-21	111373-111376	the	
702-22	111377-111385	hardware	
702-23	111386-111389	and	
702-24	111390-111398	workload	
702-25	111398-111399	.	

#Text=Eventually, testing of actual workloads on intended hardware has to be done, but
#Text=not giving ball-park answers is unhelpful.
703-1	111400-111410	Eventually	
703-2	111410-111411	,	
703-3	111412-111419	testing	
703-4	111420-111422	of	
703-5	111423-111429	actual	
703-6	111430-111439	workloads	
703-7	111440-111442	on	
703-8	111443-111451	intended	
703-9	111452-111460	hardware	
703-10	111461-111464	has	
703-11	111465-111467	to	
703-12	111468-111470	be	
703-13	111471-111475	done	
703-14	111475-111476	,	
703-15	111477-111480	but	
703-16	111481-111484	not	
703-17	111485-111491	giving	
703-18	111492-111501	ball-park	
703-19	111502-111509	answers	
703-20	111510-111512	is	
703-21	111513-111522	unhelpful	
703-22	111522-111523	.	

#Text=What answer can I give?
704-1	111524-111528	What	
704-2	111529-111535	answer	
704-3	111536-111539	can	
704-4	111540-111541	I	
704-5	111542-111546	give	
704-6	111546-111547	?	

#Text=Well, I came up with this chart:
#Text=#SimultaneousLimitSolution
#Text=1Connections< 250direct connect
#Text=2Queries< 250pgbouncer
#Text=3Write queries< 250Pgpool with read-only replicas (slide 17)
#Text=4Write queries>= 250sharding
#Text=Earlier items use simpler architectures than later items, and are therefore preferred.
705-1	111548-111552	Well	
705-2	111552-111553	,	
705-3	111554-111555	I	
705-4	111556-111560	came	
705-5	111561-111563	up	
705-6	111564-111568	with	
705-7	111569-111573	this	
705-8	111574-111579	chart	
705-9	111579-111580	:	
705-10	111581-111582	#	
705-11	111582-111607	SimultaneousLimitSolution	
705-12	111608-111620	1Connections	
705-13	111620-111621	<	
705-14	111622-111631	250direct	
705-15	111632-111639	connect	
705-16	111640-111648	2Queries	
705-17	111648-111649	<	
705-18	111650-111662	250pgbouncer	
705-19	111663-111669	3Write	
705-20	111670-111677	queries	
705-21	111677-111678	<	
705-22	111679-111688	250Pgpool	
705-23	111689-111693	with	
705-24	111694-111703	read-only	
705-25	111704-111712	replicas	
705-26	111713-111714	(	
705-27	111714-111719	slide	
705-28	111720-111722	17	
705-29	111722-111723	)	
705-30	111724-111730	4Write	
705-31	111731-111738	queries	
705-32	111738-111739	>	
705-33	111739-111740	=	
705-34	111741-111752	250sharding	
705-35	111753-111760	Earlier	
705-36	111761-111766	items	
705-37	111767-111770	use	
705-38	111771-111778	simpler	
705-39	111779-111792	architectures	
705-40	111793-111797	than	
705-41	111798-111803	later	
705-42	111804-111809	items	
705-43	111809-111810	,	
705-44	111811-111814	and	
705-45	111815-111818	are	
705-46	111819-111828	therefore	
705-47	111829-111838	preferred	
705-48	111838-111839	.	

#Text=For under 250 simultaneous connections(#1), it isn't generally necessary to use any complex architecture, though using a pooler is recommended for workloads with many short-lived sessions to
#Text=reduce connection startup time.
706-1	111840-111843	For	
706-2	111844-111849	under	
706-3	111850-111853	250	
706-4	111854-111866	simultaneous	
706-5	111867-111878	connections	
706-6	111878-111879	(	
706-7	111879-111881	#1	
706-8	111881-111882	)	
706-9	111882-111883	,	
706-10	111884-111886	it	
706-11	111887-111892	isn't	
706-12	111893-111902	generally	
706-13	111903-111912	necessary	
706-14	111913-111915	to	
706-15	111916-111919	use	
706-16	111920-111923	any	
706-17	111924-111931	complex	
706-18	111932-111944	architecture	
706-19	111944-111945	,	
706-20	111946-111952	though	
706-21	111953-111958	using	
706-22	111959-111960	a	
706-23	111961-111967	pooler	
706-24	111968-111970	is	
706-25	111971-111982	recommended	
706-26	111983-111986	for	
706-27	111987-111996	workloads	
706-28	111997-112001	with	
706-29	112002-112006	many	
706-30	112007-112018	short-lived	
706-31	112019-112027	sessions	
706-32	112028-112030	to	
706-33	112031-112037	reduce	
706-34	112038-112048	connection	
706-35	112049-112056	startup	
706-36	112057-112061	time	
706-37	112061-112062	.	

#Text=Even when under this limit, performance can be limited by the number of cpus.
707-1	112063-112067	Even	
707-2	112068-112072	when	
707-3	112073-112078	under	
707-4	112079-112083	this	
707-5	112084-112089	limit	
707-6	112089-112090	,	
707-7	112091-112102	performance	
707-8	112103-112106	can	
707-9	112107-112109	be	
707-10	112110-112117	limited	
707-11	112118-112120	by	
707-12	112121-112124	the	
707-13	112125-112131	number	
707-14	112132-112134	of	
707-15	112135-112139	cpus	
707-16	112139-112140	.	

#Text=Oltp databases typically cannot process more than 5 x cpu cores without having to time-slice among cpus.
708-1	112141-112145	Oltp	
708-2	112146-112155	databases	
708-3	112156-112165	typically	
708-4	112166-112172	cannot	
708-5	112173-112180	process	
708-6	112181-112185	more	
708-7	112186-112190	than	
708-8	112191-112192	5	
708-9	112193-112194	x	
708-10	112195-112198	cpu	
708-11	112199-112204	cores	
708-12	112205-112212	without	
708-13	112213-112219	having	
708-14	112220-112222	to	
708-15	112223-112233	time-slice	
708-16	112234-112239	among	
708-17	112240-112244	cpus	
708-18	112244-112245	.	

#Text=Olap uses 2 x cpu cores, or less if parallelism is used.
709-1	112246-112250	Olap	
709-2	112251-112255	uses	
709-3	112256-112257	2	
709-4	112258-112259	x	
709-5	112260-112263	cpu	
709-6	112264-112269	cores	
709-7	112269-112270	,	
709-8	112271-112273	or	
709-9	112274-112278	less	
709-10	112279-112281	if	
709-11	112282-112293	parallelism	
709-12	112294-112296	is	
709-13	112297-112301	used	
709-14	112301-112302	.	

#Text=For over 250 simultaneous connections but under 250 simultaneous queries(#2), a connection pooler can be beneficial because it reduces
#Text=the overhead of managing many open connections.
710-1	112303-112306	For	
710-2	112307-112311	over	
710-3	112312-112315	250	
710-4	112316-112328	simultaneous	
710-5	112329-112340	connections	
710-6	112341-112344	but	
710-7	112345-112350	under	
710-8	112351-112354	250	
710-9	112355-112367	simultaneous	
710-10	112368-112375	queries	
710-11	112375-112376	(	
710-12	112376-112378	#2	
710-13	112378-112379	)	
710-14	112379-112380	,	
710-15	112381-112382	a	
710-16	112383-112393	connection	
710-17	112394-112400	pooler	
710-18	112401-112404	can	
710-19	112405-112407	be	
710-20	112408-112418	beneficial	
710-21	112419-112426	because	
710-22	112427-112429	it	
710-23	112430-112437	reduces	
710-24	112438-112441	the	
710-25	112442-112450	overhead	
710-26	112451-112453	of	
710-27	112454-112462	managing	
710-28	112463-112467	many	
710-29	112468-112472	open	
710-30	112473-112484	connections	
710-31	112484-112485	.	

#Text=For over 250 simultaneous queries but under 250 simultaneous write queries(#3), a combination of Pgpool with read queries routed to streaming replicas
#Text=can be very efficient.
711-1	112486-112489	For	
711-2	112490-112494	over	
711-3	112495-112498	250	
711-4	112499-112511	simultaneous	
711-5	112512-112519	queries	
711-6	112520-112523	but	
711-7	112524-112529	under	
711-8	112530-112533	250	
711-9	112534-112546	simultaneous	
711-10	112547-112552	write	
711-11	112553-112560	queries	
711-12	112560-112561	(	
711-13	112561-112563	#3	
711-14	112563-112564	)	
711-15	112564-112565	,	
711-16	112566-112567	a	
711-17	112568-112579	combination	
711-18	112580-112582	of	
711-19	112583-112589	Pgpool	
711-20	112590-112594	with	
711-21	112595-112599	read	
711-22	112600-112607	queries	
711-23	112608-112614	routed	
711-24	112615-112617	to	
711-25	112618-112627	streaming	
711-26	112628-112636	replicas	
711-27	112637-112640	can	
711-28	112641-112643	be	
711-29	112644-112648	very	
711-30	112649-112658	efficient	
711-31	112658-112659	.	

#Text=For over 250 simultaneous write queries(#4), a sharding solution should be considered.
712-1	112660-112663	For	
712-2	112664-112668	over	
712-3	112669-112672	250	
712-4	112673-112685	simultaneous	
712-5	112686-112691	write	
712-6	112692-112699	queries	
712-7	112699-112700	(	
712-8	112700-112702	#4	
712-9	112702-112703	)	
712-10	112703-112704	,	
712-11	112705-112706	a	
712-12	112707-112715	sharding	
712-13	112716-112724	solution	
712-14	112725-112731	should	
712-15	112732-112734	be	
712-16	112735-112745	considered	
712-17	112745-112746	.	

#Text=These numbers can vary greatly based on workload and hardware, but I think they are good starting points to consider.
713-1	112747-112752	These	
713-2	112753-112760	numbers	
713-3	112761-112764	can	
713-4	112765-112769	vary	
713-5	112770-112777	greatly	
713-6	112778-112783	based	
713-7	112784-112786	on	
713-8	112787-112795	workload	
713-9	112796-112799	and	
713-10	112800-112808	hardware	
713-11	112808-112809	,	
713-12	112810-112813	but	
713-13	112814-112815	I	
713-14	112816-112821	think	
713-15	112822-112826	they	
713-16	112827-112830	are	
713-17	112831-112835	good	
713-18	112836-112844	starting	
713-19	112845-112851	points	
713-20	112852-112854	to	
713-21	112855-112863	consider	
713-22	112863-112864	.	

#Text=View or Post Comments
#Text=Fast Enough?
714-1	112865-112869	View	
714-2	112870-112872	or	
714-3	112873-112877	Post	
714-4	112878-112886	Comments	
714-5	112887-112891	Fast	
714-6	112892-112898	Enough	
714-7	112898-112899	?	

#Text=Monday, April 20, 2020
#Text=Everyone one wants their software to perform as fast as possible.
715-1	112900-112906	Monday	
715-2	112906-112907	,	
715-3	112908-112913	April	
715-4	112914-112916	20	
715-5	112916-112917	,	
715-6	112918-112922	2020	
715-7	112923-112931	Everyone	
715-8	112932-112935	one	
715-9	112936-112941	wants	
715-10	112942-112947	their	
715-11	112948-112956	software	
715-12	112957-112959	to	
715-13	112960-112967	perform	
715-14	112968-112970	as	
715-15	112971-112975	fast	
715-16	112976-112978	as	
715-17	112979-112987	possible	
715-18	112987-112988	.	

#Text=Some people think that unless the program ends before it begins, it's too slow.
716-1	112989-112993	Some	
716-2	112994-113000	people	
716-3	113001-113006	think	
716-4	113007-113011	that	
716-5	113012-113018	unless	
716-6	113019-113022	the	
716-7	113023-113030	program	
716-8	113031-113035	ends	
716-9	113036-113042	before	
716-10	113043-113045	it	
716-11	113046-113052	begins	
716-12	113052-113053	,	
716-13	113054-113058	it's	
716-14	113059-113062	too	
716-15	113063-113067	slow	
716-16	113067-113068	.	

#Text=However, realistically, making something as fast as possible is not a universal good, meaning that increasing performance beyond a certain point can cause problems that far exceed the value of the
#Text=improved performance.
717-1	113069-113076	However	
717-2	113076-113077	,	
717-3	113078-113091	realistically	
717-4	113091-113092	,	
717-5	113093-113099	making	
717-6	113100-113109	something	
717-7	113110-113112	as	
717-8	113113-113117	fast	
717-9	113118-113120	as	
717-10	113121-113129	possible	
717-11	113130-113132	is	
717-12	113133-113136	not	
717-13	113137-113138	a	
717-14	113139-113148	universal	
717-15	113149-113153	good	
717-16	113153-113154	,	
717-17	113155-113162	meaning	
717-18	113163-113167	that	
717-19	113168-113178	increasing	
717-20	113179-113190	performance	
717-21	113191-113197	beyond	
717-22	113198-113199	a	
717-23	113200-113207	certain	
717-24	113208-113213	point	
717-25	113214-113217	can	
717-26	113218-113223	cause	
717-27	113224-113232	problems	
717-28	113233-113237	that	
717-29	113238-113241	far	
717-30	113242-113248	exceed	
717-31	113249-113252	the	
717-32	113253-113258	value	
717-33	113259-113261	of	
717-34	113262-113265	the	
717-35	113266-113274	improved	
717-36	113275-113286	performance	
717-37	113286-113287	.	

#Text=Let's give some examples:
#Text=Most people use high-level languages that are compiled into
#Text=cpu instructions or interpreted while being run.
718-1	113288-113293	Let's	
718-2	113294-113298	give	
718-3	113299-113303	some	
718-4	113304-113312	examples	
718-5	113312-113313	:	
718-6	113314-113318	Most	
718-7	113319-113325	people	
718-8	113326-113329	use	
718-9	113330-113340	high-level	
718-10	113341-113350	languages	
718-11	113351-113355	that	
718-12	113356-113359	are	
718-13	113360-113368	compiled	
718-14	113369-113373	into	
718-15	113374-113377	cpu	
718-16	113378-113390	instructions	
718-17	113391-113393	or	
718-18	113394-113405	interpreted	
718-19	113406-113411	while	
718-20	113412-113417	being	
718-21	113418-113421	run	
718-22	113421-113422	.	

#Text=In an ideal world, every program would be written
#Text=in assembly language.
719-1	113423-113425	In	
719-2	113426-113428	an	
719-3	113429-113434	ideal	
719-4	113435-113440	world	
719-5	113440-113441	,	
719-6	113442-113447	every	
719-7	113448-113455	program	
719-8	113456-113461	would	
719-9	113462-113464	be	
719-10	113465-113472	written	
719-11	113473-113475	in	
719-12	113476-113484	assembly	
719-13	113485-113493	language	
719-14	113493-113494	.	

#Text=(Postgres does use some assembly language code for
#Text=locking.)
720-1	113495-113496	(	
720-2	113496-113504	Postgres	
720-3	113505-113509	does	
720-4	113510-113513	use	
720-5	113514-113518	some	
720-6	113519-113527	assembly	
720-7	113528-113536	language	
720-8	113537-113541	code	
720-9	113542-113545	for	
720-10	113546-113553	locking	
720-11	113553-113554	.	
720-12	113554-113555	)	

#Text=However, writing something like a database in assembly language, though it might give slightly better performance if developers knew the behavior of every cpu, would be a huge challenge
#Text=for even the most expert developers, and code maintenance and feature additions might be impossible.
721-1	113556-113563	However	
721-2	113563-113564	,	
721-3	113565-113572	writing	
721-4	113573-113582	something	
721-5	113583-113587	like	
721-6	113588-113589	a	
721-7	113590-113598	database	
721-8	113599-113601	in	
721-9	113602-113610	assembly	
721-10	113611-113619	language	
721-11	113619-113620	,	
721-12	113621-113627	though	
721-13	113628-113630	it	
721-14	113631-113636	might	
721-15	113637-113641	give	
721-16	113642-113650	slightly	
721-17	113651-113657	better	
721-18	113658-113669	performance	
721-19	113670-113672	if	
721-20	113673-113683	developers	
721-21	113684-113688	knew	
721-22	113689-113692	the	
721-23	113693-113701	behavior	
721-24	113702-113704	of	
721-25	113705-113710	every	
721-26	113711-113714	cpu	
721-27	113714-113715	,	
721-28	113716-113721	would	
721-29	113722-113724	be	
721-30	113725-113726	a	
721-31	113727-113731	huge	
721-32	113732-113741	challenge	
721-33	113742-113745	for	
721-34	113746-113750	even	
721-35	113751-113754	the	
721-36	113755-113759	most	
721-37	113760-113766	expert	
721-38	113767-113777	developers	
721-39	113777-113778	,	
721-40	113779-113782	and	
721-41	113783-113787	code	
721-42	113788-113799	maintenance	
721-43	113800-113803	and	
721-44	113804-113811	feature	
721-45	113812-113821	additions	
721-46	113822-113827	might	
721-47	113828-113830	be	
721-48	113831-113841	impossible	
721-49	113841-113842	.	

#Text=In general, there just isn't enough benefit to using assembly language for anything but the most
#Text=discrete, performance-critical functions.
722-1	113843-113845	In	
722-2	113846-113853	general	
722-3	113853-113854	,	
722-4	113855-113860	there	
722-5	113861-113865	just	
722-6	113866-113871	isn't	
722-7	113872-113878	enough	
722-8	113879-113886	benefit	
722-9	113887-113889	to	
722-10	113890-113895	using	
722-11	113896-113904	assembly	
722-12	113905-113913	language	
722-13	113914-113917	for	
722-14	113918-113926	anything	
722-15	113927-113930	but	
722-16	113931-113934	the	
722-17	113935-113939	most	
722-18	113940-113948	discrete	
722-19	113948-113949	,	
722-20	113950-113970	performance-critical	
722-21	113971-113980	functions	
722-22	113980-113981	.	

#Text=Java isn't often chosen for its performance, but rather its ability to allow development teams to produce complex software efficiently.
723-1	113982-113986	Java	
723-2	113987-113992	isn't	
723-3	113993-113998	often	
723-4	113999-114005	chosen	
723-5	114006-114009	for	
723-6	114010-114013	its	
723-7	114014-114025	performance	
723-8	114025-114026	,	
723-9	114027-114030	but	
723-10	114031-114037	rather	
723-11	114038-114041	its	
723-12	114042-114049	ability	
723-13	114050-114052	to	
723-14	114053-114058	allow	
723-15	114059-114070	development	
723-16	114071-114076	teams	
723-17	114077-114079	to	
723-18	114080-114087	produce	
723-19	114088-114095	complex	
723-20	114096-114104	software	
723-21	114105-114116	efficiently	
723-22	114116-114117	.	

#Text=Lighter-weight languages might give better performance, but they
#Text=don't offer the same development efficiency as Java.
724-1	114118-114132	Lighter-weight	
724-2	114133-114142	languages	
724-3	114143-114148	might	
724-4	114149-114153	give	
724-5	114154-114160	better	
724-6	114161-114172	performance	
724-7	114172-114173	,	
724-8	114174-114177	but	
724-9	114178-114182	they	
724-10	114183-114188	don't	
724-11	114189-114194	offer	
724-12	114195-114198	the	
724-13	114199-114203	same	
724-14	114204-114215	development	
724-15	114216-114226	efficiency	
724-16	114227-114229	as	
724-17	114230-114234	Java	
724-18	114234-114235	.	

#Text=Sql is a heavy-weight way to request data, but it is very efficient for developers since they can express their requests in a
#Text=declarative way.
725-1	114236-114239	Sql	
725-2	114240-114242	is	
725-3	114243-114244	a	
725-4	114245-114257	heavy-weight	
725-5	114258-114261	way	
725-6	114262-114264	to	
725-7	114265-114272	request	
725-8	114273-114277	data	
725-9	114277-114278	,	
725-10	114279-114282	but	
725-11	114283-114285	it	
725-12	114286-114288	is	
725-13	114289-114293	very	
725-14	114294-114303	efficient	
725-15	114304-114307	for	
725-16	114308-114318	developers	
725-17	114319-114324	since	
725-18	114325-114329	they	
725-19	114330-114333	can	
725-20	114334-114341	express	
725-21	114342-114347	their	
725-22	114348-114356	requests	
725-23	114357-114359	in	
725-24	114360-114361	a	
725-25	114362-114373	declarative	
725-26	114374-114377	way	
725-27	114377-114378	.	

#Text=You could probably write a custom data storage program to run faster than sql, but the effort involved to
#Text=create and maintain it would be nearly insurmountable.
726-1	114379-114382	You	
726-2	114383-114388	could	
726-3	114389-114397	probably	
726-4	114398-114403	write	
726-5	114404-114405	a	
726-6	114406-114412	custom	
726-7	114413-114417	data	
726-8	114418-114425	storage	
726-9	114426-114433	program	
726-10	114434-114436	to	
726-11	114437-114440	run	
726-12	114441-114447	faster	
726-13	114448-114452	than	
726-14	114453-114456	sql	
726-15	114456-114457	,	
726-16	114458-114461	but	
726-17	114462-114465	the	
726-18	114466-114472	effort	
726-19	114473-114481	involved	
726-20	114482-114484	to	
726-21	114485-114491	create	
726-22	114492-114495	and	
726-23	114496-114504	maintain	
726-24	114505-114507	it	
726-25	114508-114513	would	
726-26	114514-114516	be	
726-27	114517-114523	nearly	
726-28	114524-114538	insurmountable	
726-29	114538-114539	.	

#Text=You can even layout data in sql in more efficient ways, and sometimes it is worth it, but data maintainability, access flexibility, and storage efficiency can suffer.
727-1	114540-114543	You	
727-2	114544-114547	can	
727-3	114548-114552	even	
727-4	114553-114559	layout	
727-5	114560-114564	data	
727-6	114565-114567	in	
727-7	114568-114571	sql	
727-8	114572-114574	in	
727-9	114575-114579	more	
727-10	114580-114589	efficient	
727-11	114590-114594	ways	
727-12	114594-114595	,	
727-13	114596-114599	and	
727-14	114600-114609	sometimes	
727-15	114610-114612	it	
727-16	114613-114615	is	
727-17	114616-114621	worth	
727-18	114622-114624	it	
727-19	114624-114625	,	
727-20	114626-114629	but	
727-21	114630-114634	data	
727-22	114635-114650	maintainability	
727-23	114650-114651	,	
727-24	114652-114658	access	
727-25	114659-114670	flexibility	
727-26	114670-114671	,	
727-27	114672-114675	and	
727-28	114676-114683	storage	
727-29	114684-114694	efficiency	
727-30	114695-114698	can	
727-31	114699-114705	suffer	
727-32	114705-114706	.	

#Text=The bottom line is that performance is rarely a universal good — it has to be balanced against development time, solution flexibility, and maintainability.
728-1	114707-114710	The	
728-2	114711-114717	bottom	
728-3	114718-114722	line	
728-4	114723-114725	is	
728-5	114726-114730	that	
728-6	114731-114742	performance	
728-7	114743-114745	is	
728-8	114746-114752	rarely	
728-9	114753-114754	a	
728-10	114755-114764	universal	
728-11	114765-114769	good	
728-12	114770-114771	—	
728-13	114772-114774	it	
728-14	114775-114778	has	
728-15	114779-114781	to	
728-16	114782-114784	be	
728-17	114785-114793	balanced	
728-18	114794-114801	against	
728-19	114802-114813	development	
728-20	114814-114818	time	
728-21	114818-114819	,	
728-22	114820-114828	solution	
728-23	114829-114840	flexibility	
728-24	114840-114841	,	
728-25	114842-114845	and	
728-26	114846-114861	maintainability	
728-27	114861-114862	.	

#Text=Sometimes people suggest that Postgres should
#Text=offer some "super fancy" optimization, and sometimes we can implement it, but we always have to balance development time, solution
#Text=flexibility, and maintainability with improved performance.
729-1	114863-114872	Sometimes	
729-2	114873-114879	people	
729-3	114880-114887	suggest	
729-4	114888-114892	that	
729-5	114893-114901	Postgres	
729-6	114902-114908	should	
729-7	114909-114914	offer	
729-8	114915-114919	some	
729-9	114920-114921	"	
729-10	114921-114926	super	
729-11	114927-114932	fancy	
729-12	114932-114933	"	
729-13	114934-114946	optimization	
729-14	114946-114947	,	
729-15	114948-114951	and	
729-16	114952-114961	sometimes	
729-17	114962-114964	we	
729-18	114965-114968	can	
729-19	114969-114978	implement	
729-20	114979-114981	it	
729-21	114981-114982	,	
729-22	114983-114986	but	
729-23	114987-114989	we	
729-24	114990-114996	always	
729-25	114997-115001	have	
729-26	115002-115004	to	
729-27	115005-115012	balance	
729-28	115013-115024	development	
729-29	115025-115029	time	
729-30	115029-115030	,	
729-31	115031-115039	solution	
729-32	115040-115051	flexibility	
729-33	115051-115052	,	
729-34	115053-115056	and	
729-35	115057-115072	maintainability	
729-36	115073-115077	with	
729-37	115078-115086	improved	
729-38	115087-115098	performance	
729-39	115098-115099	.	

#Text=View or Post Comments
#Text=No Travel
#Text=Friday, April 17, 2020
#Text=With the Coronavirus outbreak, almost all Postgres events through June have been either cancelled, rescheduled, or moved online.
730-1	115100-115104	View	
730-2	115105-115107	or	
730-3	115108-115112	Post	
730-4	115113-115121	Comments	
730-5	115122-115124	No	
730-6	115125-115131	Travel	
730-7	115132-115138	Friday	
730-8	115138-115139	,	
730-9	115140-115145	April	
730-10	115146-115148	17	
730-11	115148-115149	,	
730-12	115150-115154	2020	
730-13	115155-115159	With	
730-14	115160-115163	the	
730-15	115164-115175	Coronavirus	
730-16	115176-115184	outbreak	
730-17	115184-115185	,	
730-18	115186-115192	almost	
730-19	115193-115196	all	
730-20	115197-115205	Postgres	
730-21	115206-115212	events	
730-22	115213-115220	through	
730-23	115221-115225	June	
730-24	115226-115230	have	
730-25	115231-115235	been	
730-26	115236-115242	either	
730-27	115243-115252	cancelled	
730-28	115252-115253	,	
730-29	115254-115265	rescheduled	
730-30	115265-115266	,	
730-31	115267-115269	or	
730-32	115270-115275	moved	
730-33	115276-115282	online	
730-34	115282-115283	.	

#Text=This has given me time
#Text=to consider my past travel.
731-1	115284-115288	This	
731-2	115289-115292	has	
731-3	115293-115298	given	
731-4	115299-115301	me	
731-5	115302-115306	time	
731-6	115307-115309	to	
731-7	115310-115318	consider	
731-8	115319-115321	my	
731-9	115322-115326	past	
731-10	115327-115333	travel	
731-11	115333-115334	.	

#Text=I have been blessed to visit so many places, not as a tourist, but rather a guest.
732-1	115335-115336	I	
732-2	115337-115341	have	
732-3	115342-115346	been	
732-4	115347-115354	blessed	
732-5	115355-115357	to	
732-6	115358-115363	visit	
732-7	115364-115366	so	
732-8	115367-115371	many	
732-9	115372-115378	places	
732-10	115378-115379	,	
732-11	115380-115383	not	
732-12	115384-115386	as	
732-13	115387-115388	a	
732-14	115389-115396	tourist	
732-15	115396-115397	,	
732-16	115398-115401	but	
732-17	115402-115408	rather	
732-18	115409-115410	a	
732-19	115411-115416	guest	
732-20	115416-115417	.	

#Text=I see countries more as a native than as a
#Text=tourist, and I have many event organizers and hosts to thank for this.
733-1	115418-115419	I	
733-2	115420-115423	see	
733-3	115424-115433	countries	
733-4	115434-115438	more	
733-5	115439-115441	as	
733-6	115442-115443	a	
733-7	115444-115450	native	
733-8	115451-115455	than	
733-9	115456-115458	as	
733-10	115459-115460	a	
733-11	115461-115468	tourist	
733-12	115468-115469	,	
733-13	115470-115473	and	
733-14	115474-115475	I	
733-15	115476-115480	have	
733-16	115481-115485	many	
733-17	115486-115491	event	
733-18	115492-115502	organizers	
733-19	115503-115506	and	
733-20	115507-115512	hosts	
733-21	115513-115515	to	
733-22	115516-115521	thank	
733-23	115522-115525	for	
733-24	115526-115530	this	
733-25	115530-115531	.	

#Text=It is hard to know when on-site events will resume, but I can remember what it was like to travel roughly 90 days a year.
734-1	115532-115534	It	
734-2	115535-115537	is	
734-3	115538-115542	hard	
734-4	115543-115545	to	
734-5	115546-115550	know	
734-6	115551-115555	when	
734-7	115556-115563	on-site	
734-8	115564-115570	events	
734-9	115571-115575	will	
734-10	115576-115582	resume	
734-11	115582-115583	,	
734-12	115584-115587	but	
734-13	115588-115589	I	
734-14	115590-115593	can	
734-15	115594-115602	remember	
734-16	115603-115607	what	
734-17	115608-115610	it	
734-18	115611-115614	was	
734-19	115615-115619	like	
734-20	115620-115622	to	
734-21	115623-115629	travel	
734-22	115630-115637	roughly	
734-23	115638-115640	90	
734-24	115641-115645	days	
734-25	115646-115647	a	
734-26	115648-115652	year	
734-27	115652-115653	.	

#Text=Going to social outings at
#Text=home often felt riding a train through my home town, waving from behind a train window to my friends on the platform.
735-1	115654-115659	Going	
735-2	115660-115662	to	
735-3	115663-115669	social	
735-4	115670-115677	outings	
735-5	115678-115680	at	
735-6	115681-115685	home	
735-7	115686-115691	often	
735-8	115692-115696	felt	
735-9	115697-115703	riding	
735-10	115704-115705	a	
735-11	115706-115711	train	
735-12	115712-115719	through	
735-13	115720-115722	my	
735-14	115723-115727	home	
735-15	115728-115732	town	
735-16	115732-115733	,	
735-17	115734-115740	waving	
735-18	115741-115745	from	
735-19	115746-115752	behind	
735-20	115753-115754	a	
735-21	115755-115760	train	
735-22	115761-115767	window	
735-23	115768-115770	to	
735-24	115771-115773	my	
735-25	115774-115781	friends	
735-26	115782-115784	on	
735-27	115785-115788	the	
735-28	115789-115797	platform	
735-29	115797-115798	.	

#Text=I would sit at home and wonder how long I would be there until I had to leave again.
736-1	115799-115800	I	
736-2	115801-115806	would	
736-3	115807-115810	sit	
736-4	115811-115813	at	
736-5	115814-115818	home	
736-6	115819-115822	and	
736-7	115823-115829	wonder	
736-8	115830-115833	how	
736-9	115834-115838	long	
736-10	115839-115840	I	
736-11	115841-115846	would	
736-12	115847-115849	be	
736-13	115850-115855	there	
736-14	115856-115861	until	
736-15	115862-115863	I	
736-16	115864-115867	had	
736-17	115868-115870	to	
736-18	115871-115876	leave	
736-19	115877-115882	again	
736-20	115882-115883	.	

#Text=Now, sitting at home, the images of our family travels appearing on our kitchen slideshow show places that seem farther away than ever, and I wonder if I will ever see these places again.
737-1	115884-115887	Now	
737-2	115887-115888	,	
737-3	115889-115896	sitting	
737-4	115897-115899	at	
737-5	115900-115904	home	
737-6	115904-115905	,	
737-7	115906-115909	the	
737-8	115910-115916	images	
737-9	115917-115919	of	
737-10	115920-115923	our	
737-11	115924-115930	family	
737-12	115931-115938	travels	
737-13	115939-115948	appearing	
737-14	115949-115951	on	
737-15	115952-115955	our	
737-16	115956-115963	kitchen	
737-17	115964-115973	slideshow	
737-18	115974-115978	show	
737-19	115979-115985	places	
737-20	115986-115990	that	
737-21	115991-115995	seem	
737-22	115996-116003	farther	
737-23	116004-116008	away	
737-24	116009-116013	than	
737-25	116014-116018	ever	
737-26	116018-116019	,	
737-27	116020-116023	and	
737-28	116024-116025	I	
737-29	116026-116032	wonder	
737-30	116033-116035	if	
737-31	116036-116037	I	
737-32	116038-116042	will	
737-33	116043-116047	ever	
737-34	116048-116051	see	
737-35	116052-116057	these	
737-36	116058-116064	places	
737-37	116065-116070	again	
737-38	116070-116071	.	

#Text=I am sure many others have similar feelings, and I have hope that, someday, we will all return to the road to spend time together again.
738-1	116072-116073	I	
738-2	116074-116076	am	
738-3	116077-116081	sure	
738-4	116082-116086	many	
738-5	116087-116093	others	
738-6	116094-116098	have	
738-7	116099-116106	similar	
738-8	116107-116115	feelings	
738-9	116115-116116	,	
738-10	116117-116120	and	
738-11	116121-116122	I	
738-12	116123-116127	have	
738-13	116128-116132	hope	
738-14	116133-116137	that	
738-15	116137-116138	,	
738-16	116139-116146	someday	
738-17	116146-116147	,	
738-18	116148-116150	we	
738-19	116151-116155	will	
738-20	116156-116159	all	
738-21	116160-116166	return	
738-22	116167-116169	to	
738-23	116170-116173	the	
738-24	116174-116178	road	
738-25	116179-116181	to	
738-26	116182-116187	spend	
738-27	116188-116192	time	
738-28	116193-116201	together	
738-29	116202-116207	again	
738-30	116207-116208	.	

#Text=View or Post Comments
#Text=Database Interoperability at Risk
#Text=Monday, March 16, 2020
#Text=This article parallels Oracle's copying of the sql syntax
#Text=from ibm in the late 1970's with Google's copying of the Java api.
739-1	116209-116213	View	
739-2	116214-116216	or	
739-3	116217-116221	Post	
739-4	116222-116230	Comments	
739-5	116231-116239	Database	
739-6	116240-116256	Interoperability	
739-7	116257-116259	at	
739-8	116260-116264	Risk	
739-9	116265-116271	Monday	
739-10	116271-116272	,	
739-11	116273-116278	March	
739-12	116279-116281	16	
739-13	116281-116282	,	
739-14	116283-116287	2020	
739-15	116288-116292	This	
739-16	116293-116300	article	
739-17	116301-116310	parallels	
739-18	116311-116319	Oracle's	
739-19	116320-116327	copying	
739-20	116328-116330	of	
739-21	116331-116334	the	
739-22	116335-116338	sql	
739-23	116339-116345	syntax	
739-24	116346-116350	from	
739-25	116351-116354	ibm	
739-26	116355-116357	in	
739-27	116358-116361	the	
739-28	116362-116366	late	
739-29	116367-116371	1970	
739-30	116371-116372	'	
739-31	116372-116373	s	
739-32	116374-116378	with	
739-33	116379-116387	Google's	
739-34	116388-116395	copying	
739-35	116396-116398	of	
739-36	116399-116402	the	
739-37	116403-116407	Java	
739-38	116408-116411	api	
739-39	116411-116412	.	

#Text=It also explains the possible impact of the current case
#Text=soon to be decided by the US Supreme Court.
740-1	116413-116415	It	
740-2	116416-116420	also	
740-3	116421-116429	explains	
740-4	116430-116433	the	
740-5	116434-116442	possible	
740-6	116443-116449	impact	
740-7	116450-116452	of	
740-8	116453-116456	the	
740-9	116457-116464	current	
740-10	116465-116469	case	
740-11	116470-116474	soon	
740-12	116475-116477	to	
740-13	116478-116480	be	
740-14	116481-116488	decided	
740-15	116489-116491	by	
740-16	116492-116495	the	
740-17	116496-116498	US	
740-18	116499-116506	Supreme	
740-19	116507-116512	Court	
740-20	116512-116513	.	

#Text=One thing it does not fully cover is the impact on sql-level interoperability between databases.
741-1	116514-116517	One	
741-2	116518-116523	thing	
741-3	116524-116526	it	
741-4	116527-116531	does	
741-5	116532-116535	not	
741-6	116536-116541	fully	
741-7	116542-116547	cover	
741-8	116548-116550	is	
741-9	116551-116554	the	
741-10	116555-116561	impact	
741-11	116562-116564	on	
741-12	116565-116574	sql-level	
741-13	116575-116591	interoperability	
741-14	116592-116599	between	
741-15	116600-116609	databases	
741-16	116609-116610	.	

#Text=If Oracle can claim the Java api as copyrightable, the sql language could be
#Text=considered copyrightable, allowing ibm to sue all relational database vendors and users for copyright infringement.
742-1	116611-116613	If	
742-2	116614-116620	Oracle	
742-3	116621-116624	can	
742-4	116625-116630	claim	
742-5	116631-116634	the	
742-6	116635-116639	Java	
742-7	116640-116643	api	
742-8	116644-116646	as	
742-9	116647-116660	copyrightable	
742-10	116660-116661	,	
742-11	116662-116665	the	
742-12	116666-116669	sql	
742-13	116670-116678	language	
742-14	116679-116684	could	
742-15	116685-116687	be	
742-16	116688-116698	considered	
742-17	116699-116712	copyrightable	
742-18	116712-116713	,	
742-19	116714-116722	allowing	
742-20	116723-116726	ibm	
742-21	116727-116729	to	
742-22	116730-116733	sue	
742-23	116734-116737	all	
742-24	116738-116748	relational	
742-25	116749-116757	database	
742-26	116758-116765	vendors	
742-27	116766-116769	and	
742-28	116770-116775	users	
742-29	116776-116779	for	
742-30	116780-116789	copyright	
742-31	116790-116802	infringement	
742-32	116802-116803	.	

#Text=It might also allow database vendors to sue competitors when their
#Text=sql-level features are copied, requiring either huge payments or the removal of interoperability syntax.
743-1	116804-116806	It	
743-2	116807-116812	might	
743-3	116813-116817	also	
743-4	116818-116823	allow	
743-5	116824-116832	database	
743-6	116833-116840	vendors	
743-7	116841-116843	to	
743-8	116844-116847	sue	
743-9	116848-116859	competitors	
743-10	116860-116864	when	
743-11	116865-116870	their	
743-12	116871-116880	sql-level	
743-13	116881-116889	features	
743-14	116890-116893	are	
743-15	116894-116900	copied	
743-16	116900-116901	,	
743-17	116902-116911	requiring	
743-18	116912-116918	either	
743-19	116919-116923	huge	
743-20	116924-116932	payments	
743-21	116933-116935	or	
743-22	116936-116939	the	
743-23	116940-116947	removal	
743-24	116948-116950	of	
743-25	116951-116967	interoperability	
743-26	116968-116974	syntax	
743-27	116974-116975	.	

#Text=The Postgres copyright is open, so any database vendor copying Postgres syntax is fine, but Postgres copying the syntax of other databases could be
#Text=problematic.
744-1	116976-116979	The	
744-2	116980-116988	Postgres	
744-3	116989-116998	copyright	
744-4	116999-117001	is	
744-5	117002-117006	open	
744-6	117006-117007	,	
744-7	117008-117010	so	
744-8	117011-117014	any	
744-9	117015-117023	database	
744-10	117024-117030	vendor	
744-11	117031-117038	copying	
744-12	117039-117047	Postgres	
744-13	117048-117054	syntax	
744-14	117055-117057	is	
744-15	117058-117062	fine	
744-16	117062-117063	,	
744-17	117064-117067	but	
744-18	117068-117076	Postgres	
744-19	117077-117084	copying	
744-20	117085-117088	the	
744-21	117089-117095	syntax	
744-22	117096-117098	of	
744-23	117099-117104	other	
744-24	117105-117114	databases	
744-25	117115-117120	could	
744-26	117121-117123	be	
744-27	117124-117135	problematic	
744-28	117135-117136	.	

#Text=Relational database interoperability has been of huge benefit to data management, and this single case could call that into question.
745-1	117137-117147	Relational	
745-2	117148-117156	database	
745-3	117157-117173	interoperability	
745-4	117174-117177	has	
745-5	117178-117182	been	
745-6	117183-117185	of	
745-7	117186-117190	huge	
745-8	117191-117198	benefit	
745-9	117199-117201	to	
745-10	117202-117206	data	
745-11	117207-117217	management	
745-12	117217-117218	,	
745-13	117219-117222	and	
745-14	117223-117227	this	
745-15	117228-117234	single	
745-16	117235-117239	case	
745-17	117240-117245	could	
745-18	117246-117250	call	
745-19	117251-117255	that	
745-20	117256-117260	into	
745-21	117261-117269	question	
745-22	117269-117270	.	

#Text=Update: The case was decided in Google's favor. 2021-04-08
#Text=View or Post Comments
#Text=Databases, Containers, and the Cloud
#Text=Saturday, March
#Text=7, 2020
#Text=A few months ago, I wrote a high-level presentation about the deployment benefits of using containers and cloud infrastructure for databases.
746-1	117271-117277	Update	
746-2	117277-117278	:	
746-3	117279-117282	The	
746-4	117283-117287	case	
746-5	117288-117291	was	
746-6	117292-117299	decided	
746-7	117300-117302	in	
746-8	117303-117311	Google's	
746-9	117312-117317	favor	
746-10	117317-117318	.	
746-11	117319-117323	2021	
746-12	117323-117324	-	
746-13	117324-117326	04	
746-14	117326-117327	-	
746-15	117327-117329	08	
746-16	117330-117334	View	
746-17	117335-117337	or	
746-18	117338-117342	Post	
746-19	117343-117351	Comments	
746-20	117352-117361	Databases	
746-21	117361-117362	,	
746-22	117363-117373	Containers	
746-23	117373-117374	,	
746-24	117375-117378	and	
746-25	117379-117382	the	
746-26	117383-117388	Cloud	
746-27	117389-117397	Saturday	
746-28	117397-117398	,	
746-29	117399-117404	March	
746-30	117405-117406	7	
746-31	117406-117407	,	
746-32	117408-117412	2020	
746-33	117413-117414	A	
746-34	117415-117418	few	
746-35	117419-117425	months	
746-36	117426-117429	ago	
746-37	117429-117430	,	
746-38	117431-117432	I	
746-39	117433-117438	wrote	
746-40	117439-117440	a	
746-41	117441-117451	high-level	
746-42	117452-117464	presentation	
746-43	117465-117470	about	
746-44	117471-117474	the	
746-45	117475-117485	deployment	
746-46	117486-117494	benefits	
746-47	117495-117497	of	
746-48	117498-117503	using	
746-49	117504-117514	containers	
746-50	117515-117518	and	
746-51	117519-117524	cloud	
746-52	117525-117539	infrastructure	
746-53	117540-117543	for	
746-54	117544-117553	databases	
746-55	117553-117554	.	

#Text=I am now ready to
#Text=share this presentation.
747-1	117555-117556	I	
747-2	117557-117559	am	
747-3	117560-117563	now	
747-4	117564-117569	ready	
747-5	117570-117572	to	
747-6	117573-117578	share	
747-7	117579-117583	this	
747-8	117584-117596	presentation	
747-9	117596-117597	.	

#Text=I have also added QR codes to the first and last slides of all
#Text=my presentations, linking to my website.
748-1	117598-117599	I	
748-2	117600-117604	have	
748-3	117605-117609	also	
748-4	117610-117615	added	
748-5	117616-117618	QR	
748-6	117619-117624	codes	
748-7	117625-117627	to	
748-8	117628-117631	the	
748-9	117632-117637	first	
748-10	117638-117641	and	
748-11	117642-117646	last	
748-12	117647-117653	slides	
748-13	117654-117656	of	
748-14	117657-117660	all	
748-15	117661-117663	my	
748-16	117664-117677	presentations	
748-17	117677-117678	,	
748-18	117679-117686	linking	
748-19	117687-117689	to	
748-20	117690-117692	my	
748-21	117693-117700	website	
748-22	117700-117701	.	

#Text=View or Post Comments
#Text=2021
#Text=2020
#Text=2019
#Text=2018
#Text=2017
#Text=2016
#Text=2015
#Text=2014
#Text=2013
#Text=2012
#Text=2011
#Text=2010
#Text=2009
#Text=2008
#Text=Yearly Chart
#Text=RSS
749-1	117702-117706	View	
749-2	117707-117709	or	
749-3	117710-117714	Post	
749-4	117715-117723	Comments	
749-5	117724-117728	2021	
749-6	117729-117733	2020	
749-7	117734-117738	2019	
749-8	117739-117743	2018	
749-9	117744-117748	2017	
749-10	117749-117753	2016	
749-11	117754-117758	2015	
749-12	117759-117763	2014	
749-13	117764-117768	2013	
749-14	117769-117773	2012	
749-15	117774-117778	2011	
749-16	117779-117783	2010	
749-17	117784-117788	2009	
749-18	117789-117793	2008	
749-19	117794-117800	Yearly	
749-20	117801-117806	Chart	
749-21	117807-117810	RSS	
