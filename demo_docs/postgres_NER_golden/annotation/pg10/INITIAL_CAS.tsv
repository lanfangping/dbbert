#FORMAT=WebAnno TSV 3.3


#Text=Efficient Use of PostgreSQL Indexes | Heroku Dev Center
1-1	0-9	Efficient	
1-2	10-13	Use	
1-3	14-16	of	
1-4	17-27	PostgreSQL	
1-5	28-35	Indexes	
1-6	36-37	|	
1-7	38-44	Heroku	
1-8	45-48	Dev	
1-9	49-55	Center	

#Text=Skip NavigationShow navHeroku Dev CenterGet StartedDocumentationChangelogSearchGet StartedNode.jsRuby on RailsRubyPythonJavaPHPGoScalaClojureDocumentationChangelogMoreAdditional ResourcesHomeElementsProductsPricingCareersHelpStatusEventsPodcastsCompliance CenterHeroku BlogHeroku BlogFind out what's new with Heroku on our blog.Visit BlogLog inorSign up View categories Categories Heroku Architecture Dynos (app containers) Stacks (operating system images) Networking & DNS Platform Policies Platform Principles Command Line Deployment
2-1	56-60	Skip	
2-2	61-75	NavigationShow	
2-3	76-85	navHeroku	
2-4	86-89	Dev	
2-5	90-99	CenterGet	
2-6	100-138	StartedDocumentationChangelogSearchGet	
2-7	139-157	StartedNode.jsRuby	
2-8	158-160	on	
2-9	161-233	RailsRubyPythonJavaPHPGoScalaClojureDocumentationChangelogMoreAdditional	
2-10	234-311	ResourcesHomeElementsProductsPricingCareersHelpStatusEventsPodcastsCompliance	
2-11	312-324	CenterHeroku	
2-12	325-335	BlogHeroku	
2-13	336-344	BlogFind	
2-14	345-348	out	
2-15	349-355	what's	
2-16	356-359	new	
2-17	360-364	with	
2-18	365-371	Heroku	
2-19	372-374	on	
2-20	375-378	our	
2-21	379-389	blog.Visit	
2-22	390-397	BlogLog	
2-23	398-406	inorSign	
2-24	407-409	up	
2-25	410-414	View	
2-26	415-425	categories	
2-27	426-436	Categories	
2-28	437-443	Heroku	
2-29	444-456	Architecture	
2-30	457-462	Dynos	
2-31	463-464	(	
2-32	464-467	app	
2-33	468-478	containers	
2-34	478-479	)	
2-35	480-486	Stacks	
2-36	487-488	(	
2-37	488-497	operating	
2-38	498-504	system	
2-39	505-511	images	
2-40	511-512	)	
2-41	513-523	Networking	
2-42	524-525	&	
2-43	526-529	DNS	
2-44	530-538	Platform	
2-45	539-547	Policies	
2-46	548-556	Platform	
2-47	557-567	Principles	
2-48	568-575	Command	
2-49	576-580	Line	
2-50	581-591	Deployment	

#Text=Deploying with Git Deploying with Docker Deployment Integrations Continuous Delivery Continuous Integration Language Support Node.js Ruby Working with Bundler Rails Support Python Working with Django
3-1	592-601	Deploying	
3-2	602-606	with	
3-3	607-610	Git	
3-4	611-620	Deploying	
3-5	621-625	with	
3-6	626-632	Docker	
3-7	633-643	Deployment	
3-8	644-656	Integrations	
3-9	657-667	Continuous	
3-10	668-676	Delivery	
3-11	677-687	Continuous	
3-12	688-699	Integration	
3-13	700-708	Language	
3-14	709-716	Support	
3-15	717-724	Node.js	
3-16	725-729	Ruby	
3-17	730-737	Working	
3-18	738-742	with	
3-19	743-750	Bundler	
3-20	751-756	Rails	
3-21	757-764	Support	
3-22	765-771	Python	
3-23	772-779	Working	
3-24	780-784	with	
3-25	785-791	Django	

#Text=Background Jobs in Python Java Working with Maven Java Database Operations Working with the Play Framework Java Advanced Topics Working with Spring Boot PHP Go Dependency Management Scala Clojure Databases & Data Management
4-1	792-802	Background	
4-2	803-807	Jobs	
4-3	808-810	in	
4-4	811-817	Python	
4-5	818-822	Java	
4-6	823-830	Working	
4-7	831-835	with	
4-8	836-841	Maven	
4-9	842-846	Java	
4-10	847-855	Database	
4-11	856-866	Operations	
4-12	867-874	Working	
4-13	875-879	with	
4-14	880-883	the	
4-15	884-888	Play	
4-16	889-898	Framework	
4-17	899-903	Java	
4-18	904-912	Advanced	
4-19	913-919	Topics	
4-20	920-927	Working	
4-21	928-932	with	
4-22	933-939	Spring	
4-23	940-944	Boot	
4-24	945-948	PHP	
4-25	949-951	Go	
4-26	952-962	Dependency	
4-27	963-973	Management	
4-28	974-979	Scala	
4-29	980-987	Clojure	
4-30	988-997	Databases	
4-31	998-999	&	
4-32	1000-1004	Data	
4-33	1005-1015	Management	

#Text=Heroku Postgres Postgres Basics Postgres Performance Postgres Data Transfer & Preservation Postgres Availability Postgres Special Topics Heroku Redis Apache Kafka on Heroku Other Data Stores Monitoring & Metrics
5-1	1016-1022	Heroku	
5-2	1023-1031	Postgres	
5-3	1032-1040	Postgres	
5-4	1041-1047	Basics	
5-5	1048-1056	Postgres	
5-6	1057-1068	Performance	
5-7	1069-1077	Postgres	
5-8	1078-1082	Data	
5-9	1083-1091	Transfer	
5-10	1092-1093	&	
5-11	1094-1106	Preservation	
5-12	1107-1115	Postgres	
5-13	1116-1128	Availability	
5-14	1129-1137	Postgres	
5-15	1138-1145	Special	
5-16	1146-1152	Topics	
5-17	1153-1159	Heroku	
5-18	1160-1165	Redis	
5-19	1166-1172	Apache	
5-20	1173-1178	Kafka	
5-21	1179-1181	on	
5-22	1182-1188	Heroku	
5-23	1189-1194	Other	
5-24	1195-1199	Data	
5-25	1200-1206	Stores	
5-26	1207-1217	Monitoring	
5-27	1218-1219	&	
5-28	1220-1227	Metrics	

#Text=Logging App Performance Add-ons All Add-ons Collaboration Security App Security Identities & Authentication Compliance Heroku Enterprise Private Spaces Infrastructure Networking
6-1	1228-1235	Logging	
6-2	1236-1239	App	
6-3	1240-1251	Performance	
6-4	1252-1259	Add-ons	
6-5	1260-1263	All	
6-6	1264-1271	Add-ons	
6-7	1272-1285	Collaboration	
6-8	1286-1294	Security	
6-9	1295-1298	App	
6-10	1299-1307	Security	
6-11	1308-1318	Identities	
6-12	1319-1320	&	
6-13	1321-1335	Authentication	
6-14	1336-1346	Compliance	
6-15	1347-1353	Heroku	
6-16	1354-1364	Enterprise	
6-17	1365-1372	Private	
6-18	1373-1379	Spaces	
6-19	1380-1394	Infrastructure	
6-20	1395-1405	Networking	

#Text=Enterprise Accounts Enterprise Teams Heroku Connect (Salesforce sync) Single Sign-on (SSO) Patterns & Best Practices Extending Heroku Platform API App Webhooks Heroku Labs Building Add-ons
7-1	1406-1416	Enterprise	
7-2	1417-1425	Accounts	
7-3	1426-1436	Enterprise	
7-4	1437-1442	Teams	
7-5	1443-1449	Heroku	
7-6	1450-1457	Connect	
7-7	1458-1459	(	
7-8	1459-1469	Salesforce	
7-9	1470-1474	sync	
7-10	1474-1475	)	
7-11	1476-1482	Single	
7-12	1483-1490	Sign-on	
7-13	1491-1492	(	
7-14	1492-1495	SSO	
7-15	1495-1496	)	
7-16	1497-1505	Patterns	
7-17	1506-1507	&	
7-18	1508-1512	Best	
7-19	1513-1522	Practices	
7-20	1523-1532	Extending	
7-21	1533-1539	Heroku	
7-22	1540-1548	Platform	
7-23	1549-1552	API	
7-24	1553-1556	App	
7-25	1557-1565	Webhooks	
7-26	1566-1572	Heroku	
7-27	1573-1577	Labs	
7-28	1578-1586	Building	
7-29	1587-1594	Add-ons	

#Text=Add-on Development Tasks Add-on APIs Add-on Guidelines & Requirements Building CLI Plugins Developing Buildpacks Dev Center Accounts & Billing Troubleshooting & Support
8-1	1595-1601	Add-on	
8-2	1602-1613	Development	
8-3	1614-1619	Tasks	
8-4	1620-1626	Add-on	
8-5	1627-1631	APIs	
8-6	1632-1638	Add-on	
8-7	1639-1649	Guidelines	
8-8	1650-1651	&	
8-9	1652-1664	Requirements	
8-10	1665-1673	Building	
8-11	1674-1677	CLI	
8-12	1678-1685	Plugins	
8-13	1686-1696	Developing	
8-14	1697-1707	Buildpacks	
8-15	1708-1711	Dev	
8-16	1712-1718	Center	
8-17	1719-1727	Accounts	
8-18	1728-1729	&	
8-19	1730-1737	Billing	
8-20	1738-1753	Troubleshooting	
8-21	1754-1755	&	
8-22	1756-1763	Support	

#Text=Databases & Data ManagementHeroku PostgresPostgres PerformanceEfficient Use of PostgreSQL Indexes Efficient Use of PostgreSQL Indexes English — 日本語に切り替える Last updated January 25, 2021
9-1	1764-1773	Databases	
9-2	1774-1775	&	
9-3	1776-1780	Data	
9-4	1781-1797	ManagementHeroku	
9-5	1798-1814	PostgresPostgres	
9-6	1815-1835	PerformanceEfficient	
9-7	1836-1839	Use	
9-8	1840-1842	of	
9-9	1843-1853	PostgreSQL	
9-10	1854-1861	Indexes	
9-11	1862-1871	Efficient	
9-12	1872-1875	Use	
9-13	1876-1878	of	
9-14	1879-1889	PostgreSQL	
9-15	1890-1897	Indexes	
9-16	1898-1905	English	
9-17	1906-1907	—	
9-18	1908-1911	日本語	
9-19	1911-1912	に	
9-20	1912-1913	切	
9-21	1913-1914	り	
9-22	1914-1915	替	
9-23	1915-1917	える	
9-24	1918-1922	Last	
9-25	1923-1930	updated	
9-26	1931-1938	January	
9-27	1939-1941	25	
9-28	1941-1942	,	
9-29	1943-1947	2021	

#Text=Table of ContentsIndex TypesWhy is my query not using an index?Partial IndexesExpression IndexesUnique IndexesMulti-column IndexesB-Trees and sortingManaging and Maintaining indexes There are many types of indexes in Postgres, as well as different ways to use them. In this article we give an overview of the types of indexes available, and explain different ways of using and maintaining the most common index type: B-Trees.
10-1	1948-1953	Table	
10-2	1954-1956	of	
10-3	1957-1970	ContentsIndex	
10-4	1971-1979	TypesWhy	
10-5	1980-1982	is	
10-6	1983-1985	my	
10-7	1986-1991	query	
10-8	1992-1995	not	
10-9	1996-2001	using	
10-10	2002-2004	an	
10-11	2005-2010	index	
10-12	2010-2011	?	
10-13	2011-2018	Partial	
10-14	2019-2036	IndexesExpression	
10-15	2037-2050	IndexesUnique	
10-16	2051-2070	IndexesMulti-column	
10-17	2071-2085	IndexesB-Trees	
10-18	2086-2089	and	
10-19	2090-2105	sortingManaging	
10-20	2106-2109	and	
10-21	2110-2121	Maintaining	
10-22	2122-2129	indexes	
10-23	2130-2135	There	
10-24	2136-2139	are	
10-25	2140-2144	many	
10-26	2145-2150	types	
10-27	2151-2153	of	
10-28	2154-2161	indexes	
10-29	2162-2164	in	
10-30	2165-2173	Postgres	
10-31	2173-2174	,	
10-32	2175-2177	as	
10-33	2178-2182	well	
10-34	2183-2185	as	
10-35	2186-2195	different	
10-36	2196-2200	ways	
10-37	2201-2203	to	
10-38	2204-2207	use	
10-39	2208-2212	them	
10-40	2212-2213	.	
10-41	2214-2216	In	
10-42	2217-2221	this	
10-43	2222-2229	article	
10-44	2230-2232	we	
10-45	2233-2237	give	
10-46	2238-2240	an	
10-47	2241-2249	overview	
10-48	2250-2252	of	
10-49	2253-2256	the	
10-50	2257-2262	types	
10-51	2263-2265	of	
10-52	2266-2273	indexes	
10-53	2274-2283	available	
10-54	2283-2284	,	
10-55	2285-2288	and	
10-56	2289-2296	explain	
10-57	2297-2306	different	
10-58	2307-2311	ways	
10-59	2312-2314	of	
10-60	2315-2320	using	
10-61	2321-2324	and	
10-62	2325-2336	maintaining	
10-63	2337-2340	the	
10-64	2341-2345	most	
10-65	2346-2352	common	
10-66	2353-2358	index	
10-67	2359-2363	type	
10-68	2363-2364	:	
10-69	2365-2372	B-Trees	
10-70	2372-2373	.	

#Text=An index is a way to efficiently retrieve a relatively small number of rows from a table. It is only useful if the number of rows to be retrieved from a table is relatively small (i.e. the condition for retrieving rows - the WHERE clause - is selective). B-Tree indexes are also useful for avoiding sorting. Index Types Postgres supports many different index types:
11-1	2374-2376	An	
11-2	2377-2382	index	
11-3	2383-2385	is	
11-4	2386-2387	a	
11-5	2388-2391	way	
11-6	2392-2394	to	
11-7	2395-2406	efficiently	
11-8	2407-2415	retrieve	
11-9	2416-2417	a	
11-10	2418-2428	relatively	
11-11	2429-2434	small	
11-12	2435-2441	number	
11-13	2442-2444	of	
11-14	2445-2449	rows	
11-15	2450-2454	from	
11-16	2455-2456	a	
11-17	2457-2462	table	
11-18	2462-2463	.	
11-19	2464-2466	It	
11-20	2467-2469	is	
11-21	2470-2474	only	
11-22	2475-2481	useful	
11-23	2482-2484	if	
11-24	2485-2488	the	
11-25	2489-2495	number	
11-26	2496-2498	of	
11-27	2499-2503	rows	
11-28	2504-2506	to	
11-29	2507-2509	be	
11-30	2510-2519	retrieved	
11-31	2520-2524	from	
11-32	2525-2526	a	
11-33	2527-2532	table	
11-34	2533-2535	is	
11-35	2536-2546	relatively	
11-36	2547-2552	small	
11-37	2553-2554	(	
11-38	2554-2557	i.e	
11-39	2557-2558	.	
11-40	2559-2562	the	
11-41	2563-2572	condition	
11-42	2573-2576	for	
11-43	2577-2587	retrieving	
11-44	2588-2592	rows	
11-45	2593-2594	-	
11-46	2595-2598	the	
11-47	2599-2604	WHERE	
11-48	2605-2611	clause	
11-49	2612-2613	-	
11-50	2614-2616	is	
11-51	2617-2626	selective	
11-52	2626-2627	)	
11-53	2627-2628	.	
11-54	2629-2635	B-Tree	
11-55	2636-2643	indexes	
11-56	2644-2647	are	
11-57	2648-2652	also	
11-58	2653-2659	useful	
11-59	2660-2663	for	
11-60	2664-2672	avoiding	
11-61	2673-2680	sorting	
11-62	2680-2681	.	
11-63	2682-2687	Index	
11-64	2688-2693	Types	
11-65	2694-2702	Postgres	
11-66	2703-2711	supports	
11-67	2712-2716	many	
11-68	2717-2726	different	
11-69	2727-2732	index	
11-70	2733-2738	types	
11-71	2738-2739	:	

#Text=B-Tree is the default that you get when you do CREATE INDEX. Virtually all databases will have some B-tree indexes. B-trees attempt to remain balanced, with the amount of data in each branch of the tree being roughly the same. Therefore the number of levels that must be traversed to find rows is always in the same ballpark. B-tree indexes can be used for equality and range queries efficiently. They can operate against all datatypes, and can also be used to retrieve NULL values. B-trees are designed to work very well with caching, even when only partially cached. Hash Indexes pre-Postgres 10 are only useful for equality comparisons, but you pretty much never want to use them since they are not transaction safe, need to be manually rebuilt after crashes, and are not replicated to followers, so the advantage over using a B-Tree is rather small. In Postgres 10 and above, hash indexes are now write-ahead logged and replicated to followers.
12-1	2740-2746	B-Tree	
12-2	2747-2749	is	
12-3	2750-2753	the	
12-4	2754-2761	default	
12-5	2762-2766	that	
12-6	2767-2770	you	
12-7	2771-2774	get	
12-8	2775-2779	when	
12-9	2780-2783	you	
12-10	2784-2786	do	
12-11	2787-2793	CREATE	
12-12	2794-2799	INDEX	
12-13	2799-2800	.	
12-14	2801-2810	Virtually	
12-15	2811-2814	all	
12-16	2815-2824	databases	
12-17	2825-2829	will	
12-18	2830-2834	have	
12-19	2835-2839	some	
12-20	2840-2846	B-tree	
12-21	2847-2854	indexes	
12-22	2854-2855	.	
12-23	2856-2863	B-trees	
12-24	2864-2871	attempt	
12-25	2872-2874	to	
12-26	2875-2881	remain	
12-27	2882-2890	balanced	
12-28	2890-2891	,	
12-29	2892-2896	with	
12-30	2897-2900	the	
12-31	2901-2907	amount	
12-32	2908-2910	of	
12-33	2911-2915	data	
12-34	2916-2918	in	
12-35	2919-2923	each	
12-36	2924-2930	branch	
12-37	2931-2933	of	
12-38	2934-2937	the	
12-39	2938-2942	tree	
12-40	2943-2948	being	
12-41	2949-2956	roughly	
12-42	2957-2960	the	
12-43	2961-2965	same	
12-44	2965-2966	.	
12-45	2967-2976	Therefore	
12-46	2977-2980	the	
12-47	2981-2987	number	
12-48	2988-2990	of	
12-49	2991-2997	levels	
12-50	2998-3002	that	
12-51	3003-3007	must	
12-52	3008-3010	be	
12-53	3011-3020	traversed	
12-54	3021-3023	to	
12-55	3024-3028	find	
12-56	3029-3033	rows	
12-57	3034-3036	is	
12-58	3037-3043	always	
12-59	3044-3046	in	
12-60	3047-3050	the	
12-61	3051-3055	same	
12-62	3056-3064	ballpark	
12-63	3064-3065	.	
12-64	3066-3072	B-tree	
12-65	3073-3080	indexes	
12-66	3081-3084	can	
12-67	3085-3087	be	
12-68	3088-3092	used	
12-69	3093-3096	for	
12-70	3097-3105	equality	
12-71	3106-3109	and	
12-72	3110-3115	range	
12-73	3116-3123	queries	
12-74	3124-3135	efficiently	
12-75	3135-3136	.	
12-76	3137-3141	They	
12-77	3142-3145	can	
12-78	3146-3153	operate	
12-79	3154-3161	against	
12-80	3162-3165	all	
12-81	3166-3175	datatypes	
12-82	3175-3176	,	
12-83	3177-3180	and	
12-84	3181-3184	can	
12-85	3185-3189	also	
12-86	3190-3192	be	
12-87	3193-3197	used	
12-88	3198-3200	to	
12-89	3201-3209	retrieve	
12-90	3210-3214	NULL	
12-91	3215-3221	values	
12-92	3221-3222	.	
12-93	3223-3230	B-trees	
12-94	3231-3234	are	
12-95	3235-3243	designed	
12-96	3244-3246	to	
12-97	3247-3251	work	
12-98	3252-3256	very	
12-99	3257-3261	well	
12-100	3262-3266	with	
12-101	3267-3274	caching	
12-102	3274-3275	,	
12-103	3276-3280	even	
12-104	3281-3285	when	
12-105	3286-3290	only	
12-106	3291-3300	partially	
12-107	3301-3307	cached	
12-108	3307-3308	.	
12-109	3309-3313	Hash	
12-110	3314-3321	Indexes	
12-111	3322-3334	pre-Postgres	
12-112	3335-3337	10	
12-113	3338-3341	are	
12-114	3342-3346	only	
12-115	3347-3353	useful	
12-116	3354-3357	for	
12-117	3358-3366	equality	
12-118	3367-3378	comparisons	
12-119	3378-3379	,	
12-120	3380-3383	but	
12-121	3384-3387	you	
12-122	3388-3394	pretty	
12-123	3395-3399	much	
12-124	3400-3405	never	
12-125	3406-3410	want	
12-126	3411-3413	to	
12-127	3414-3417	use	
12-128	3418-3422	them	
12-129	3423-3428	since	
12-130	3429-3433	they	
12-131	3434-3437	are	
12-132	3438-3441	not	
12-133	3442-3453	transaction	
12-134	3454-3458	safe	
12-135	3458-3459	,	
12-136	3460-3464	need	
12-137	3465-3467	to	
12-138	3468-3470	be	
12-139	3471-3479	manually	
12-140	3480-3487	rebuilt	
12-141	3488-3493	after	
12-142	3494-3501	crashes	
12-143	3501-3502	,	
12-144	3503-3506	and	
12-145	3507-3510	are	
12-146	3511-3514	not	
12-147	3515-3525	replicated	
12-148	3526-3528	to	
12-149	3529-3538	followers	
12-150	3538-3539	,	
12-151	3540-3542	so	
12-152	3543-3546	the	
12-153	3547-3556	advantage	
12-154	3557-3561	over	
12-155	3562-3567	using	
12-156	3568-3569	a	
12-157	3570-3576	B-Tree	
12-158	3577-3579	is	
12-159	3580-3586	rather	
12-160	3587-3592	small	
12-161	3592-3593	.	
12-162	3594-3596	In	
12-163	3597-3605	Postgres	
12-164	3606-3608	10	
12-165	3609-3612	and	
12-166	3613-3618	above	
12-167	3618-3619	,	
12-168	3620-3624	hash	
12-169	3625-3632	indexes	
12-170	3633-3636	are	
12-171	3637-3640	now	
12-172	3641-3652	write-ahead	
12-173	3653-3659	logged	
12-174	3660-3663	and	
12-175	3664-3674	replicated	
12-176	3675-3677	to	
12-177	3678-3687	followers	
12-178	3687-3688	.	

#Text=Generalized Inverted Indexes (GIN) are useful when an index must map many values to one row, whereas B-Tree indexes are optimized for when a row has a single key value. GINs are good for indexing array values as well as for implementing full-text search. Generalized Search Tree (GiST) indexes allow you to build general balanced tree structures, and can be used for operations beyond equality and range comparisons. They are used to index the geometric data types, as well as full-text search.
13-1	3689-3700	Generalized	
13-2	3701-3709	Inverted	
13-3	3710-3717	Indexes	
13-4	3718-3719	(	
13-5	3719-3722	GIN	
13-6	3722-3723	)	
13-7	3724-3727	are	
13-8	3728-3734	useful	
13-9	3735-3739	when	
13-10	3740-3742	an	
13-11	3743-3748	index	
13-12	3749-3753	must	
13-13	3754-3757	map	
13-14	3758-3762	many	
13-15	3763-3769	values	
13-16	3770-3772	to	
13-17	3773-3776	one	
13-18	3777-3780	row	
13-19	3780-3781	,	
13-20	3782-3789	whereas	
13-21	3790-3796	B-Tree	
13-22	3797-3804	indexes	
13-23	3805-3808	are	
13-24	3809-3818	optimized	
13-25	3819-3822	for	
13-26	3823-3827	when	
13-27	3828-3829	a	
13-28	3830-3833	row	
13-29	3834-3837	has	
13-30	3838-3839	a	
13-31	3840-3846	single	
13-32	3847-3850	key	
13-33	3851-3856	value	
13-34	3856-3857	.	
13-35	3858-3862	GINs	
13-36	3863-3866	are	
13-37	3867-3871	good	
13-38	3872-3875	for	
13-39	3876-3884	indexing	
13-40	3885-3890	array	
13-41	3891-3897	values	
13-42	3898-3900	as	
13-43	3901-3905	well	
13-44	3906-3908	as	
13-45	3909-3912	for	
13-46	3913-3925	implementing	
13-47	3926-3935	full-text	
13-48	3936-3942	search	
13-49	3942-3943	.	
13-50	3944-3955	Generalized	
13-51	3956-3962	Search	
13-52	3963-3967	Tree	
13-53	3968-3969	(	
13-54	3969-3973	GiST	
13-55	3973-3974	)	
13-56	3975-3982	indexes	
13-57	3983-3988	allow	
13-58	3989-3992	you	
13-59	3993-3995	to	
13-60	3996-4001	build	
13-61	4002-4009	general	
13-62	4010-4018	balanced	
13-63	4019-4023	tree	
13-64	4024-4034	structures	
13-65	4034-4035	,	
13-66	4036-4039	and	
13-67	4040-4043	can	
13-68	4044-4046	be	
13-69	4047-4051	used	
13-70	4052-4055	for	
13-71	4056-4066	operations	
13-72	4067-4073	beyond	
13-73	4074-4082	equality	
13-74	4083-4086	and	
13-75	4087-4092	range	
13-76	4093-4104	comparisons	
13-77	4104-4105	.	
13-78	4106-4110	They	
13-79	4111-4114	are	
13-80	4115-4119	used	
13-81	4120-4122	to	
13-82	4123-4128	index	
13-83	4129-4132	the	
13-84	4133-4142	geometric	
13-85	4143-4147	data	
13-86	4148-4153	types	
13-87	4153-4154	,	
13-88	4155-4157	as	
13-89	4158-4162	well	
13-90	4163-4165	as	
13-91	4166-4175	full-text	
13-92	4176-4182	search	
13-93	4182-4183	.	

#Text=This article is about how to get the most out of default B-Tree indexes. For examples of GIN and GiST index usage, refer to the contrib packages. Why is my query not using an index?
14-1	4184-4188	This	
14-2	4189-4196	article	
14-3	4197-4199	is	
14-4	4200-4205	about	
14-5	4206-4209	how	
14-6	4210-4212	to	
14-7	4213-4216	get	
14-8	4217-4220	the	
14-9	4221-4225	most	
14-10	4226-4229	out	
14-11	4230-4232	of	
14-12	4233-4240	default	
14-13	4241-4247	B-Tree	
14-14	4248-4255	indexes	
14-15	4255-4256	.	
14-16	4257-4260	For	
14-17	4261-4269	examples	
14-18	4270-4272	of	
14-19	4273-4276	GIN	
14-20	4277-4280	and	
14-21	4281-4285	GiST	
14-22	4286-4291	index	
14-23	4292-4297	usage	
14-24	4297-4298	,	
14-25	4299-4304	refer	
14-26	4305-4307	to	
14-27	4308-4311	the	
14-28	4312-4319	contrib	
14-29	4320-4328	packages	
14-30	4328-4329	.	
14-31	4330-4333	Why	
14-32	4334-4336	is	
14-33	4337-4339	my	
14-34	4340-4345	query	
14-35	4346-4349	not	
14-36	4350-4355	using	
14-37	4356-4358	an	
14-38	4359-4364	index	
14-39	4364-4365	?	

#Text=There are many reasons why the Postgres planner may choose to not use an index. Most of the time, the planner chooses correctly, even if it isn’t obvious why. It’s okay if the same query uses an index scan on some occasions but not others. The number of rows retrieved from the table may vary based on the particular constant values the query retrieves. So, for example, it might be correct for the query planner to use an index for the query select * from foo where bar = 1, and yet not use one for the query select * from foo where bar = 2, if there happened to be far more rows with “bar” values of 2. When this happens, a sequential scan is actually most likely much faster than an index scan, so the query planner has in fact correctly judged that the cost of performing the query that way is lower. Partial Indexes A partial index covers just a subset of a table’s data. It is an index with a WHERE clause. The idea is to increase the efficiency of the index by reducing its size. A smaller index takes less storage, is easier to maintain, and is faster to scan.
15-1	4366-4371	There	
15-2	4372-4375	are	
15-3	4376-4380	many	
15-4	4381-4388	reasons	
15-5	4389-4392	why	
15-6	4393-4396	the	
15-7	4397-4405	Postgres	
15-8	4406-4413	planner	
15-9	4414-4417	may	
15-10	4418-4424	choose	
15-11	4425-4427	to	
15-12	4428-4431	not	
15-13	4432-4435	use	
15-14	4436-4438	an	
15-15	4439-4444	index	
15-16	4444-4445	.	
15-17	4446-4450	Most	
15-18	4451-4453	of	
15-19	4454-4457	the	
15-20	4458-4462	time	
15-21	4462-4463	,	
15-22	4464-4467	the	
15-23	4468-4475	planner	
15-24	4476-4483	chooses	
15-25	4484-4493	correctly	
15-26	4493-4494	,	
15-27	4495-4499	even	
15-28	4500-4502	if	
15-29	4503-4505	it	
15-30	4506-4509	isn	
15-31	4509-4510	’	
15-32	4510-4511	t	
15-33	4512-4519	obvious	
15-34	4520-4523	why	
15-35	4523-4524	.	
15-36	4525-4527	It	
15-37	4527-4528	’	
15-38	4528-4529	s	
15-39	4530-4534	okay	
15-40	4535-4537	if	
15-41	4538-4541	the	
15-42	4542-4546	same	
15-43	4547-4552	query	
15-44	4553-4557	uses	
15-45	4558-4560	an	
15-46	4561-4566	index	
15-47	4567-4571	scan	
15-48	4572-4574	on	
15-49	4575-4579	some	
15-50	4580-4589	occasions	
15-51	4590-4593	but	
15-52	4594-4597	not	
15-53	4598-4604	others	
15-54	4604-4605	.	
15-55	4606-4609	The	
15-56	4610-4616	number	
15-57	4617-4619	of	
15-58	4620-4624	rows	
15-59	4625-4634	retrieved	
15-60	4635-4639	from	
15-61	4640-4643	the	
15-62	4644-4649	table	
15-63	4650-4653	may	
15-64	4654-4658	vary	
15-65	4659-4664	based	
15-66	4665-4667	on	
15-67	4668-4671	the	
15-68	4672-4682	particular	
15-69	4683-4691	constant	
15-70	4692-4698	values	
15-71	4699-4702	the	
15-72	4703-4708	query	
15-73	4709-4718	retrieves	
15-74	4718-4719	.	
15-75	4720-4722	So	
15-76	4722-4723	,	
15-77	4724-4727	for	
15-78	4728-4735	example	
15-79	4735-4736	,	
15-80	4737-4739	it	
15-81	4740-4745	might	
15-82	4746-4748	be	
15-83	4749-4756	correct	
15-84	4757-4760	for	
15-85	4761-4764	the	
15-86	4765-4770	query	
15-87	4771-4778	planner	
15-88	4779-4781	to	
15-89	4782-4785	use	
15-90	4786-4788	an	
15-91	4789-4794	index	
15-92	4795-4798	for	
15-93	4799-4802	the	
15-94	4803-4808	query	
15-95	4809-4815	select	
15-96	4816-4817	*	
15-97	4818-4822	from	
15-98	4823-4826	foo	
15-99	4827-4832	where	
15-100	4833-4836	bar	
15-101	4837-4838	=	
15-102	4839-4840	1	
15-103	4840-4841	,	
15-104	4842-4845	and	
15-105	4846-4849	yet	
15-106	4850-4853	not	
15-107	4854-4857	use	
15-108	4858-4861	one	
15-109	4862-4865	for	
15-110	4866-4869	the	
15-111	4870-4875	query	
15-112	4876-4882	select	
15-113	4883-4884	*	
15-114	4885-4889	from	
15-115	4890-4893	foo	
15-116	4894-4899	where	
15-117	4900-4903	bar	
15-118	4904-4905	=	
15-119	4906-4907	2	
15-120	4907-4908	,	
15-121	4909-4911	if	
15-122	4912-4917	there	
15-123	4918-4926	happened	
15-124	4927-4929	to	
15-125	4930-4932	be	
15-126	4933-4936	far	
15-127	4937-4941	more	
15-128	4942-4946	rows	
15-129	4947-4951	with	
15-130	4952-4953	“	
15-131	4953-4956	bar	
15-132	4956-4957	”	
15-133	4958-4964	values	
15-134	4965-4967	of	
15-135	4968-4969	2	
15-136	4969-4970	.	
15-137	4971-4975	When	
15-138	4976-4980	this	
15-139	4981-4988	happens	
15-140	4988-4989	,	
15-141	4990-4991	a	
15-142	4992-5002	sequential	
15-143	5003-5007	scan	
15-144	5008-5010	is	
15-145	5011-5019	actually	
15-146	5020-5024	most	
15-147	5025-5031	likely	
15-148	5032-5036	much	
15-149	5037-5043	faster	
15-150	5044-5048	than	
15-151	5049-5051	an	
15-152	5052-5057	index	
15-153	5058-5062	scan	
15-154	5062-5063	,	
15-155	5064-5066	so	
15-156	5067-5070	the	
15-157	5071-5076	query	
15-158	5077-5084	planner	
15-159	5085-5088	has	
15-160	5089-5091	in	
15-161	5092-5096	fact	
15-162	5097-5106	correctly	
15-163	5107-5113	judged	
15-164	5114-5118	that	
15-165	5119-5122	the	
15-166	5123-5127	cost	
15-167	5128-5130	of	
15-168	5131-5141	performing	
15-169	5142-5145	the	
15-170	5146-5151	query	
15-171	5152-5156	that	
15-172	5157-5160	way	
15-173	5161-5163	is	
15-174	5164-5169	lower	
15-175	5169-5170	.	
15-176	5171-5178	Partial	
15-177	5179-5186	Indexes	
15-178	5187-5188	A	
15-179	5189-5196	partial	
15-180	5197-5202	index	
15-181	5203-5209	covers	
15-182	5210-5214	just	
15-183	5215-5216	a	
15-184	5217-5223	subset	
15-185	5224-5226	of	
15-186	5227-5228	a	
15-187	5229-5234	table	
15-188	5234-5235	’	
15-189	5235-5236	s	
15-190	5237-5241	data	
15-191	5241-5242	.	
15-192	5243-5245	It	
15-193	5246-5248	is	
15-194	5249-5251	an	
15-195	5252-5257	index	
15-196	5258-5262	with	
15-197	5263-5264	a	
15-198	5265-5270	WHERE	
15-199	5271-5277	clause	
15-200	5277-5278	.	
15-201	5279-5282	The	
15-202	5283-5287	idea	
15-203	5288-5290	is	
15-204	5291-5293	to	
15-205	5294-5302	increase	
15-206	5303-5306	the	
15-207	5307-5317	efficiency	
15-208	5318-5320	of	
15-209	5321-5324	the	
15-210	5325-5330	index	
15-211	5331-5333	by	
15-212	5334-5342	reducing	
15-213	5343-5346	its	
15-214	5347-5351	size	
15-215	5351-5352	.	
15-216	5353-5354	A	
15-217	5355-5362	smaller	
15-218	5363-5368	index	
15-219	5369-5374	takes	
15-220	5375-5379	less	
15-221	5380-5387	storage	
15-222	5387-5388	,	
15-223	5389-5391	is	
15-224	5392-5398	easier	
15-225	5399-5401	to	
15-226	5402-5410	maintain	
15-227	5410-5411	,	
15-228	5412-5415	and	
15-229	5416-5418	is	
15-230	5419-5425	faster	
15-231	5426-5428	to	
15-232	5429-5433	scan	
15-233	5433-5434	.	

#Text=For example, suppose you allow users to flag comments on your site, which in turn sets the flagged boolean to true. You then process flagged comments in batches. You may want to create an index like so: CREATE INDEX articles_flagged_created_at_index ON articles(created_at) WHERE flagged IS TRUE; This index will remain fairly small, and can also be used along other indexes on the more complex queries that may require it.
16-1	5435-5438	For	
16-2	5439-5446	example	
16-3	5446-5447	,	
16-4	5448-5455	suppose	
16-5	5456-5459	you	
16-6	5460-5465	allow	
16-7	5466-5471	users	
16-8	5472-5474	to	
16-9	5475-5479	flag	
16-10	5480-5488	comments	
16-11	5489-5491	on	
16-12	5492-5496	your	
16-13	5497-5501	site	
16-14	5501-5502	,	
16-15	5503-5508	which	
16-16	5509-5511	in	
16-17	5512-5516	turn	
16-18	5517-5521	sets	
16-19	5522-5525	the	
16-20	5526-5533	flagged	
16-21	5534-5541	boolean	
16-22	5542-5544	to	
16-23	5545-5549	true	
16-24	5549-5550	.	
16-25	5551-5554	You	
16-26	5555-5559	then	
16-27	5560-5567	process	
16-28	5568-5575	flagged	
16-29	5576-5584	comments	
16-30	5585-5587	in	
16-31	5588-5595	batches	
16-32	5595-5596	.	
16-33	5597-5600	You	
16-34	5601-5604	may	
16-35	5605-5609	want	
16-36	5610-5612	to	
16-37	5613-5619	create	
16-38	5620-5622	an	
16-39	5623-5628	index	
16-40	5629-5633	like	
16-41	5634-5636	so	
16-42	5636-5637	:	
16-43	5638-5644	CREATE	
16-44	5645-5650	INDEX	
16-45	5651-5684	articles_flagged_created_at_index	
16-46	5685-5687	ON	
16-47	5688-5696	articles	
16-48	5696-5697	(	
16-49	5697-5707	created_at	
16-50	5707-5708	)	
16-51	5709-5714	WHERE	
16-52	5715-5722	flagged	
16-53	5723-5725	IS	
16-54	5726-5730	TRUE	
16-55	5730-5731	;	
16-56	5732-5736	This	
16-57	5737-5742	index	
16-58	5743-5747	will	
16-59	5748-5754	remain	
16-60	5755-5761	fairly	
16-61	5762-5767	small	
16-62	5767-5768	,	
16-63	5769-5772	and	
16-64	5773-5776	can	
16-65	5777-5781	also	
16-66	5782-5784	be	
16-67	5785-5789	used	
16-68	5790-5795	along	
16-69	5796-5801	other	
16-70	5802-5809	indexes	
16-71	5810-5812	on	
16-72	5813-5816	the	
16-73	5817-5821	more	
16-74	5822-5829	complex	
16-75	5830-5837	queries	
16-76	5838-5842	that	
16-77	5843-5846	may	
16-78	5847-5854	require	
16-79	5855-5857	it	
16-80	5857-5858	.	

#Text=Expression Indexes
17-1	5859-5869	Expression	
17-2	5870-5877	Indexes	

#Text=Expression indexes are useful for queries that match on some function or modification of your data. Postgres allows you to index the result of that function so that searches become as efficient as searching by raw data values. For example, you may require users to store their email addresses for signing in, but you want case insensitive authentication. In that case it’s possible to store the email address as is, but do searches on WHERE lower(email) = '<lowercased-email>'. The only way to use an index in such a query is with an expression index like so: CREATE INDEX users_lower_email ON users(lower(email));
18-1	5878-5888	Expression	
18-2	5889-5896	indexes	
18-3	5897-5900	are	
18-4	5901-5907	useful	
18-5	5908-5911	for	
18-6	5912-5919	queries	
18-7	5920-5924	that	
18-8	5925-5930	match	
18-9	5931-5933	on	
18-10	5934-5938	some	
18-11	5939-5947	function	
18-12	5948-5950	or	
18-13	5951-5963	modification	
18-14	5964-5966	of	
18-15	5967-5971	your	
18-16	5972-5976	data	
18-17	5976-5977	.	
18-18	5978-5986	Postgres	
18-19	5987-5993	allows	
18-20	5994-5997	you	
18-21	5998-6000	to	
18-22	6001-6006	index	
18-23	6007-6010	the	
18-24	6011-6017	result	
18-25	6018-6020	of	
18-26	6021-6025	that	
18-27	6026-6034	function	
18-28	6035-6037	so	
18-29	6038-6042	that	
18-30	6043-6051	searches	
18-31	6052-6058	become	
18-32	6059-6061	as	
18-33	6062-6071	efficient	
18-34	6072-6074	as	
18-35	6075-6084	searching	
18-36	6085-6087	by	
18-37	6088-6091	raw	
18-38	6092-6096	data	
18-39	6097-6103	values	
18-40	6103-6104	.	
18-41	6105-6108	For	
18-42	6109-6116	example	
18-43	6116-6117	,	
18-44	6118-6121	you	
18-45	6122-6125	may	
18-46	6126-6133	require	
18-47	6134-6139	users	
18-48	6140-6142	to	
18-49	6143-6148	store	
18-50	6149-6154	their	
18-51	6155-6160	email	
18-52	6161-6170	addresses	
18-53	6171-6174	for	
18-54	6175-6182	signing	
18-55	6183-6185	in	
18-56	6185-6186	,	
18-57	6187-6190	but	
18-58	6191-6194	you	
18-59	6195-6199	want	
18-60	6200-6204	case	
18-61	6205-6216	insensitive	
18-62	6217-6231	authentication	
18-63	6231-6232	.	
18-64	6233-6235	In	
18-65	6236-6240	that	
18-66	6241-6245	case	
18-67	6246-6248	it	
18-68	6248-6249	’	
18-69	6249-6250	s	
18-70	6251-6259	possible	
18-71	6260-6262	to	
18-72	6263-6268	store	
18-73	6269-6272	the	
18-74	6273-6278	email	
18-75	6279-6286	address	
18-76	6287-6289	as	
18-77	6290-6292	is	
18-78	6292-6293	,	
18-79	6294-6297	but	
18-80	6298-6300	do	
18-81	6301-6309	searches	
18-82	6310-6312	on	
18-83	6313-6318	WHERE	
18-84	6319-6324	lower	
18-85	6324-6325	(	
18-86	6325-6330	email	
18-87	6330-6331	)	
18-88	6332-6333	=	
18-89	6334-6335	'	
18-90	6335-6336	<	
18-91	6336-6352	lowercased-email	
18-92	6352-6353	>	
18-93	6353-6354	'	
18-94	6354-6355	.	
18-95	6356-6359	The	
18-96	6360-6364	only	
18-97	6365-6368	way	
18-98	6369-6371	to	
18-99	6372-6375	use	
18-100	6376-6378	an	
18-101	6379-6384	index	
18-102	6385-6387	in	
18-103	6388-6392	such	
18-104	6393-6394	a	
18-105	6395-6400	query	
18-106	6401-6403	is	
18-107	6404-6408	with	
18-108	6409-6411	an	
18-109	6412-6422	expression	
18-110	6423-6428	index	
18-111	6429-6433	like	
18-112	6434-6436	so	
18-113	6436-6437	:	
18-114	6438-6444	CREATE	
18-115	6445-6450	INDEX	
18-116	6451-6468	users_lower_email	
18-117	6469-6471	ON	
18-118	6472-6477	users	
18-119	6477-6478	(	
18-120	6478-6483	lower	
18-121	6483-6484	(	
18-122	6484-6489	email	
18-123	6489-6490	)	
18-124	6490-6491	)	
18-125	6491-6492	;	

#Text=Another common example is for finding rows for a given date, where we’ve stored timestamps in a datetime field but want to find them by a date casted value. An index like CREATE INDEX articles_day ON articles ( date(published_at) ) can be used by a query containing WHERE date(articles.published_at) = date('2011-03-07'). Unique Indexes A unique index guarantees that the table won’t have more than one row with the same value. It’s advantageous to create unique indexes for two reasons: data integrity and performance. Lookups on a unique index are generally very fast.
19-1	6493-6500	Another	
19-2	6501-6507	common	
19-3	6508-6515	example	
19-4	6516-6518	is	
19-5	6519-6522	for	
19-6	6523-6530	finding	
19-7	6531-6535	rows	
19-8	6536-6539	for	
19-9	6540-6541	a	
19-10	6542-6547	given	
19-11	6548-6552	date	
19-12	6552-6553	,	
19-13	6554-6559	where	
19-14	6560-6562	we	
19-15	6562-6563	’	
19-16	6563-6565	ve	
19-17	6566-6572	stored	
19-18	6573-6583	timestamps	
19-19	6584-6586	in	
19-20	6587-6588	a	
19-21	6589-6597	datetime	
19-22	6598-6603	field	
19-23	6604-6607	but	
19-24	6608-6612	want	
19-25	6613-6615	to	
19-26	6616-6620	find	
19-27	6621-6625	them	
19-28	6626-6628	by	
19-29	6629-6630	a	
19-30	6631-6635	date	
19-31	6636-6642	casted	
19-32	6643-6648	value	
19-33	6648-6649	.	
19-34	6650-6652	An	
19-35	6653-6658	index	
19-36	6659-6663	like	
19-37	6664-6670	CREATE	
19-38	6671-6676	INDEX	
19-39	6677-6689	articles_day	
19-40	6690-6692	ON	
19-41	6693-6701	articles	
19-42	6702-6703	(	
19-43	6704-6708	date	
19-44	6708-6709	(	
19-45	6709-6721	published_at	
19-46	6721-6722	)	
19-47	6723-6724	)	
19-48	6725-6728	can	
19-49	6729-6731	be	
19-50	6732-6736	used	
19-51	6737-6739	by	
19-52	6740-6741	a	
19-53	6742-6747	query	
19-54	6748-6758	containing	
19-55	6759-6764	WHERE	
19-56	6765-6769	date	
19-57	6769-6770	(	
19-58	6770-6791	articles.published_at	
19-59	6791-6792	)	
19-60	6793-6794	=	
19-61	6795-6799	date	
19-62	6799-6800	(	
19-63	6800-6801	'	
19-64	6801-6805	2011	
19-65	6805-6806	-	
19-66	6806-6808	03	
19-67	6808-6809	-	
19-68	6809-6811	07	
19-69	6811-6812	'	
19-70	6812-6813	)	
19-71	6813-6814	.	
19-72	6815-6821	Unique	
19-73	6822-6829	Indexes	
19-74	6830-6831	A	
19-75	6832-6838	unique	
19-76	6839-6844	index	
19-77	6845-6855	guarantees	
19-78	6856-6860	that	
19-79	6861-6864	the	
19-80	6865-6870	table	
19-81	6871-6874	won	
19-82	6874-6875	’	
19-83	6875-6876	t	
19-84	6877-6881	have	
19-85	6882-6886	more	
19-86	6887-6891	than	
19-87	6892-6895	one	
19-88	6896-6899	row	
19-89	6900-6904	with	
19-90	6905-6908	the	
19-91	6909-6913	same	
19-92	6914-6919	value	
19-93	6919-6920	.	
19-94	6921-6923	It	
19-95	6923-6924	’	
19-96	6924-6925	s	
19-97	6926-6938	advantageous	
19-98	6939-6941	to	
19-99	6942-6948	create	
19-100	6949-6955	unique	
19-101	6956-6963	indexes	
19-102	6964-6967	for	
19-103	6968-6971	two	
19-104	6972-6979	reasons	
19-105	6979-6980	:	
19-106	6981-6985	data	
19-107	6986-6995	integrity	
19-108	6996-6999	and	
19-109	7000-7011	performance	
19-110	7011-7012	.	
19-111	7013-7020	Lookups	
19-112	7021-7023	on	
19-113	7024-7025	a	
19-114	7026-7032	unique	
19-115	7033-7038	index	
19-116	7039-7042	are	
19-117	7043-7052	generally	
19-118	7053-7057	very	
19-119	7058-7062	fast	
19-120	7062-7063	.	

#Text=In terms of data integrity, using a validates_uniqueness_of validation on an ActiveModel class does not really guarantee uniqueness because there can and will be concurrent users creating invalid records. Therefore you should always create the constraint at the database level - either with an index or a unique constraint. There is little distinction between unique indexes and unique constraints. Unique indexes can be thought of as lower level, since expression indexes and partial indexes cannot be created as unique constraints. Even partial unique indexes on expressions are possible. Multi-column Indexes
20-1	7064-7066	In	
20-2	7067-7072	terms	
20-3	7073-7075	of	
20-4	7076-7080	data	
20-5	7081-7090	integrity	
20-6	7090-7091	,	
20-7	7092-7097	using	
20-8	7098-7099	a	
20-9	7100-7123	validates_uniqueness_of	
20-10	7124-7134	validation	
20-11	7135-7137	on	
20-12	7138-7140	an	
20-13	7141-7152	ActiveModel	
20-14	7153-7158	class	
20-15	7159-7163	does	
20-16	7164-7167	not	
20-17	7168-7174	really	
20-18	7175-7184	guarantee	
20-19	7185-7195	uniqueness	
20-20	7196-7203	because	
20-21	7204-7209	there	
20-22	7210-7213	can	
20-23	7214-7217	and	
20-24	7218-7222	will	
20-25	7223-7225	be	
20-26	7226-7236	concurrent	
20-27	7237-7242	users	
20-28	7243-7251	creating	
20-29	7252-7259	invalid	
20-30	7260-7267	records	
20-31	7267-7268	.	
20-32	7269-7278	Therefore	
20-33	7279-7282	you	
20-34	7283-7289	should	
20-35	7290-7296	always	
20-36	7297-7303	create	
20-37	7304-7307	the	
20-38	7308-7318	constraint	
20-39	7319-7321	at	
20-40	7322-7325	the	
20-41	7326-7334	database	
20-42	7335-7340	level	
20-43	7341-7342	-	
20-44	7343-7349	either	
20-45	7350-7354	with	
20-46	7355-7357	an	
20-47	7358-7363	index	
20-48	7364-7366	or	
20-49	7367-7368	a	
20-50	7369-7375	unique	
20-51	7376-7386	constraint	
20-52	7386-7387	.	
20-53	7388-7393	There	
20-54	7394-7396	is	
20-55	7397-7403	little	
20-56	7404-7415	distinction	
20-57	7416-7423	between	
20-58	7424-7430	unique	
20-59	7431-7438	indexes	
20-60	7439-7442	and	
20-61	7443-7449	unique	
20-62	7450-7461	constraints	
20-63	7461-7462	.	
20-64	7463-7469	Unique	
20-65	7470-7477	indexes	
20-66	7478-7481	can	
20-67	7482-7484	be	
20-68	7485-7492	thought	
20-69	7493-7495	of	
20-70	7496-7498	as	
20-71	7499-7504	lower	
20-72	7505-7510	level	
20-73	7510-7511	,	
20-74	7512-7517	since	
20-75	7518-7528	expression	
20-76	7529-7536	indexes	
20-77	7537-7540	and	
20-78	7541-7548	partial	
20-79	7549-7556	indexes	
20-80	7557-7563	cannot	
20-81	7564-7566	be	
20-82	7567-7574	created	
20-83	7575-7577	as	
20-84	7578-7584	unique	
20-85	7585-7596	constraints	
20-86	7596-7597	.	
20-87	7598-7602	Even	
20-88	7603-7610	partial	
20-89	7611-7617	unique	
20-90	7618-7625	indexes	
20-91	7626-7628	on	
20-92	7629-7640	expressions	
20-93	7641-7644	are	
20-94	7645-7653	possible	
20-95	7653-7654	.	
20-96	7655-7667	Multi-column	
20-97	7668-7675	Indexes	

#Text=While Postgres has the ability to create multi-column indexes, it’s important to understand when it makes sense to do so. The Postgres query planner has the ability to combine and use multiple single-column indexes in a multi-column query by performing a bitmap index scan. In general, you can create an index on every column that covers query conditions and in most cases Postgres will use it, so make sure to benchmark and justify the creation of a multi-column index before you create one. As always, indexes come with a cost, and multi-column indexes can only optimize the queries that reference the columns in the index in the same order, while multiple single column indexes provide performance improvements to a larger number of queries. However there are cases where a multi-column index clearly makes sense. An index on columns (a, b) can be used by queries containing WHERE a = x AND b = y, or queries using WHERE a = x only, but will not be used by a query using WHERE b = y. So if this matches the query patterns of your application, the multi-column index approach is worth considering. Also note that in this case creating an index on a alone would be redundant.
21-1	7676-7681	While	
21-2	7682-7690	Postgres	
21-3	7691-7694	has	
21-4	7695-7698	the	
21-5	7699-7706	ability	
21-6	7707-7709	to	
21-7	7710-7716	create	
21-8	7717-7729	multi-column	
21-9	7730-7737	indexes	
21-10	7737-7738	,	
21-11	7739-7741	it	
21-12	7741-7742	’	
21-13	7742-7743	s	
21-14	7744-7753	important	
21-15	7754-7756	to	
21-16	7757-7767	understand	
21-17	7768-7772	when	
21-18	7773-7775	it	
21-19	7776-7781	makes	
21-20	7782-7787	sense	
21-21	7788-7790	to	
21-22	7791-7793	do	
21-23	7794-7796	so	
21-24	7796-7797	.	
21-25	7798-7801	The	
21-26	7802-7810	Postgres	
21-27	7811-7816	query	
21-28	7817-7824	planner	
21-29	7825-7828	has	
21-30	7829-7832	the	
21-31	7833-7840	ability	
21-32	7841-7843	to	
21-33	7844-7851	combine	
21-34	7852-7855	and	
21-35	7856-7859	use	
21-36	7860-7868	multiple	
21-37	7869-7882	single-column	
21-38	7883-7890	indexes	
21-39	7891-7893	in	
21-40	7894-7895	a	
21-41	7896-7908	multi-column	
21-42	7909-7914	query	
21-43	7915-7917	by	
21-44	7918-7928	performing	
21-45	7929-7930	a	
21-46	7931-7937	bitmap	
21-47	7938-7943	index	
21-48	7944-7948	scan	
21-49	7948-7949	.	
21-50	7950-7952	In	
21-51	7953-7960	general	
21-52	7960-7961	,	
21-53	7962-7965	you	
21-54	7966-7969	can	
21-55	7970-7976	create	
21-56	7977-7979	an	
21-57	7980-7985	index	
21-58	7986-7988	on	
21-59	7989-7994	every	
21-60	7995-8001	column	
21-61	8002-8006	that	
21-62	8007-8013	covers	
21-63	8014-8019	query	
21-64	8020-8030	conditions	
21-65	8031-8034	and	
21-66	8035-8037	in	
21-67	8038-8042	most	
21-68	8043-8048	cases	
21-69	8049-8057	Postgres	
21-70	8058-8062	will	
21-71	8063-8066	use	
21-72	8067-8069	it	
21-73	8069-8070	,	
21-74	8071-8073	so	
21-75	8074-8078	make	
21-76	8079-8083	sure	
21-77	8084-8086	to	
21-78	8087-8096	benchmark	
21-79	8097-8100	and	
21-80	8101-8108	justify	
21-81	8109-8112	the	
21-82	8113-8121	creation	
21-83	8122-8124	of	
21-84	8125-8126	a	
21-85	8127-8139	multi-column	
21-86	8140-8145	index	
21-87	8146-8152	before	
21-88	8153-8156	you	
21-89	8157-8163	create	
21-90	8164-8167	one	
21-91	8167-8168	.	
21-92	8169-8171	As	
21-93	8172-8178	always	
21-94	8178-8179	,	
21-95	8180-8187	indexes	
21-96	8188-8192	come	
21-97	8193-8197	with	
21-98	8198-8199	a	
21-99	8200-8204	cost	
21-100	8204-8205	,	
21-101	8206-8209	and	
21-102	8210-8222	multi-column	
21-103	8223-8230	indexes	
21-104	8231-8234	can	
21-105	8235-8239	only	
21-106	8240-8248	optimize	
21-107	8249-8252	the	
21-108	8253-8260	queries	
21-109	8261-8265	that	
21-110	8266-8275	reference	
21-111	8276-8279	the	
21-112	8280-8287	columns	
21-113	8288-8290	in	
21-114	8291-8294	the	
21-115	8295-8300	index	
21-116	8301-8303	in	
21-117	8304-8307	the	
21-118	8308-8312	same	
21-119	8313-8318	order	
21-120	8318-8319	,	
21-121	8320-8325	while	
21-122	8326-8334	multiple	
21-123	8335-8341	single	
21-124	8342-8348	column	
21-125	8349-8356	indexes	
21-126	8357-8364	provide	
21-127	8365-8376	performance	
21-128	8377-8389	improvements	
21-129	8390-8392	to	
21-130	8393-8394	a	
21-131	8395-8401	larger	
21-132	8402-8408	number	
21-133	8409-8411	of	
21-134	8412-8419	queries	
21-135	8419-8420	.	
21-136	8421-8428	However	
21-137	8429-8434	there	
21-138	8435-8438	are	
21-139	8439-8444	cases	
21-140	8445-8450	where	
21-141	8451-8452	a	
21-142	8453-8465	multi-column	
21-143	8466-8471	index	
21-144	8472-8479	clearly	
21-145	8480-8485	makes	
21-146	8486-8491	sense	
21-147	8491-8492	.	
21-148	8493-8495	An	
21-149	8496-8501	index	
21-150	8502-8504	on	
21-151	8505-8512	columns	
21-152	8513-8514	(	
21-153	8514-8515	a	
21-154	8515-8516	,	
21-155	8517-8518	b	
21-156	8518-8519	)	
21-157	8520-8523	can	
21-158	8524-8526	be	
21-159	8527-8531	used	
21-160	8532-8534	by	
21-161	8535-8542	queries	
21-162	8543-8553	containing	
21-163	8554-8559	WHERE	
21-164	8560-8561	a	
21-165	8562-8563	=	
21-166	8564-8565	x	
21-167	8566-8569	AND	
21-168	8570-8571	b	
21-169	8572-8573	=	
21-170	8574-8575	y	
21-171	8575-8576	,	
21-172	8577-8579	or	
21-173	8580-8587	queries	
21-174	8588-8593	using	
21-175	8594-8599	WHERE	
21-176	8600-8601	a	
21-177	8602-8603	=	
21-178	8604-8605	x	
21-179	8606-8610	only	
21-180	8610-8611	,	
21-181	8612-8615	but	
21-182	8616-8620	will	
21-183	8621-8624	not	
21-184	8625-8627	be	
21-185	8628-8632	used	
21-186	8633-8635	by	
21-187	8636-8637	a	
21-188	8638-8643	query	
21-189	8644-8649	using	
21-190	8650-8655	WHERE	
21-191	8656-8657	b	
21-192	8658-8659	=	
21-193	8660-8661	y	
21-194	8661-8662	.	
21-195	8663-8665	So	
21-196	8666-8668	if	
21-197	8669-8673	this	
21-198	8674-8681	matches	
21-199	8682-8685	the	
21-200	8686-8691	query	
21-201	8692-8700	patterns	
21-202	8701-8703	of	
21-203	8704-8708	your	
21-204	8709-8720	application	
21-205	8720-8721	,	
21-206	8722-8725	the	
21-207	8726-8738	multi-column	
21-208	8739-8744	index	
21-209	8745-8753	approach	
21-210	8754-8756	is	
21-211	8757-8762	worth	
21-212	8763-8774	considering	
21-213	8774-8775	.	
21-214	8776-8780	Also	
21-215	8781-8785	note	
21-216	8786-8790	that	
21-217	8791-8793	in	
21-218	8794-8798	this	
21-219	8799-8803	case	
21-220	8804-8812	creating	
21-221	8813-8815	an	
21-222	8816-8821	index	
21-223	8822-8824	on	
21-224	8825-8826	a	
21-225	8827-8832	alone	
21-226	8833-8838	would	
21-227	8839-8841	be	
21-228	8842-8851	redundant	
21-229	8851-8852	.	

#Text=B-Trees and sorting B-Tree index entries are sorted in ascending order by default. In some cases it makes sense to supply a different sort order for an index. Take the case when you’re showing a paginated list of articles, sorted by most recent published first. We may have a published_at column on our articles table. For unpublished articles, the published_at value is NULL.
22-1	8853-8860	B-Trees	
22-2	8861-8864	and	
22-3	8865-8872	sorting	
22-4	8873-8879	B-Tree	
22-5	8880-8885	index	
22-6	8886-8893	entries	
22-7	8894-8897	are	
22-8	8898-8904	sorted	
22-9	8905-8907	in	
22-10	8908-8917	ascending	
22-11	8918-8923	order	
22-12	8924-8926	by	
22-13	8927-8934	default	
22-14	8934-8935	.	
22-15	8936-8938	In	
22-16	8939-8943	some	
22-17	8944-8949	cases	
22-18	8950-8952	it	
22-19	8953-8958	makes	
22-20	8959-8964	sense	
22-21	8965-8967	to	
22-22	8968-8974	supply	
22-23	8975-8976	a	
22-24	8977-8986	different	
22-25	8987-8991	sort	
22-26	8992-8997	order	
22-27	8998-9001	for	
22-28	9002-9004	an	
22-29	9005-9010	index	
22-30	9010-9011	.	
22-31	9012-9016	Take	
22-32	9017-9020	the	
22-33	9021-9025	case	
22-34	9026-9030	when	
22-35	9031-9034	you	
22-36	9034-9035	’	
22-37	9035-9037	re	
22-38	9038-9045	showing	
22-39	9046-9047	a	
22-40	9048-9057	paginated	
22-41	9058-9062	list	
22-42	9063-9065	of	
22-43	9066-9074	articles	
22-44	9074-9075	,	
22-45	9076-9082	sorted	
22-46	9083-9085	by	
22-47	9086-9090	most	
22-48	9091-9097	recent	
22-49	9098-9107	published	
22-50	9108-9113	first	
22-51	9113-9114	.	
22-52	9115-9117	We	
22-53	9118-9121	may	
22-54	9122-9126	have	
22-55	9127-9128	a	
22-56	9129-9141	published_at	
22-57	9142-9148	column	
22-58	9149-9151	on	
22-59	9152-9155	our	
22-60	9156-9164	articles	
22-61	9165-9170	table	
22-62	9170-9171	.	
22-63	9172-9175	For	
22-64	9176-9187	unpublished	
22-65	9188-9196	articles	
22-66	9196-9197	,	
22-67	9198-9201	the	
22-68	9202-9214	published_at	
22-69	9215-9220	value	
22-70	9221-9223	is	
22-71	9224-9228	NULL	
22-72	9228-9229	.	

#Text=In this case we can create an index like so: CREATE INDEX articles_published_at_index ON articles(published_at DESC NULLS LAST);
23-1	9230-9232	In	
23-2	9233-9237	this	
23-3	9238-9242	case	
23-4	9243-9245	we	
23-5	9246-9249	can	
23-6	9250-9256	create	
23-7	9257-9259	an	
23-8	9260-9265	index	
23-9	9266-9270	like	
23-10	9271-9273	so	
23-11	9273-9274	:	
23-12	9275-9281	CREATE	
23-13	9282-9287	INDEX	
23-14	9288-9315	articles_published_at_index	
23-15	9316-9318	ON	
23-16	9319-9327	articles	
23-17	9327-9328	(	
23-18	9328-9340	published_at	
23-19	9341-9345	DESC	
23-20	9346-9351	NULLS	
23-21	9352-9356	LAST	
23-22	9356-9357	)	
23-23	9357-9358	;	

#Text=In Postgres 9.2 and above, it’s of note that indexes are not always required to go to the table, provided we can get everything needed from the index (i.e. no unindexed columns are of interest). This feature is called “Index-only scans”. Since we will be querying the table in sorted order by published_at and limiting the result, we may get some benefit out of creating an index in the same order. Postgres will find the rows it needs from the index in the correct order, and then go to the data blocks to retrieve the data. If the index wasn’t sorted, there’s a good chance that Postgres would read the data blocks sequentially and sort the results.
24-1	9359-9361	In	
24-2	9362-9370	Postgres	
24-3	9371-9374	9.2	
24-4	9375-9378	and	
24-5	9379-9384	above	
24-6	9384-9385	,	
24-7	9386-9388	it	
24-8	9388-9389	’	
24-9	9389-9390	s	
24-10	9391-9393	of	
24-11	9394-9398	note	
24-12	9399-9403	that	
24-13	9404-9411	indexes	
24-14	9412-9415	are	
24-15	9416-9419	not	
24-16	9420-9426	always	
24-17	9427-9435	required	
24-18	9436-9438	to	
24-19	9439-9441	go	
24-20	9442-9444	to	
24-21	9445-9448	the	
24-22	9449-9454	table	
24-23	9454-9455	,	
24-24	9456-9464	provided	
24-25	9465-9467	we	
24-26	9468-9471	can	
24-27	9472-9475	get	
24-28	9476-9486	everything	
24-29	9487-9493	needed	
24-30	9494-9498	from	
24-31	9499-9502	the	
24-32	9503-9508	index	
24-33	9509-9510	(	
24-34	9510-9513	i.e	
24-35	9513-9514	.	
24-36	9515-9517	no	
24-37	9518-9527	unindexed	
24-38	9528-9535	columns	
24-39	9536-9539	are	
24-40	9540-9542	of	
24-41	9543-9551	interest	
24-42	9551-9552	)	
24-43	9552-9553	.	
24-44	9554-9558	This	
24-45	9559-9566	feature	
24-46	9567-9569	is	
24-47	9570-9576	called	
24-48	9577-9578	“	
24-49	9578-9588	Index-only	
24-50	9589-9594	scans	
24-51	9594-9595	”	
24-52	9595-9596	.	
24-53	9597-9602	Since	
24-54	9603-9605	we	
24-55	9606-9610	will	
24-56	9611-9613	be	
24-57	9614-9622	querying	
24-58	9623-9626	the	
24-59	9627-9632	table	
24-60	9633-9635	in	
24-61	9636-9642	sorted	
24-62	9643-9648	order	
24-63	9649-9651	by	
24-64	9652-9664	published_at	
24-65	9665-9668	and	
24-66	9669-9677	limiting	
24-67	9678-9681	the	
24-68	9682-9688	result	
24-69	9688-9689	,	
24-70	9690-9692	we	
24-71	9693-9696	may	
24-72	9697-9700	get	
24-73	9701-9705	some	
24-74	9706-9713	benefit	
24-75	9714-9717	out	
24-76	9718-9720	of	
24-77	9721-9729	creating	
24-78	9730-9732	an	
24-79	9733-9738	index	
24-80	9739-9741	in	
24-81	9742-9745	the	
24-82	9746-9750	same	
24-83	9751-9756	order	
24-84	9756-9757	.	
24-85	9758-9766	Postgres	
24-86	9767-9771	will	
24-87	9772-9776	find	
24-88	9777-9780	the	
24-89	9781-9785	rows	
24-90	9786-9788	it	
24-91	9789-9794	needs	
24-92	9795-9799	from	
24-93	9800-9803	the	
24-94	9804-9809	index	
24-95	9810-9812	in	
24-96	9813-9816	the	
24-97	9817-9824	correct	
24-98	9825-9830	order	
24-99	9830-9831	,	
24-100	9832-9835	and	
24-101	9836-9840	then	
24-102	9841-9843	go	
24-103	9844-9846	to	
24-104	9847-9850	the	
24-105	9851-9855	data	
24-106	9856-9862	blocks	
24-107	9863-9865	to	
24-108	9866-9874	retrieve	
24-109	9875-9878	the	
24-110	9879-9883	data	
24-111	9883-9884	.	
24-112	9885-9887	If	
24-113	9888-9891	the	
24-114	9892-9897	index	
24-115	9898-9902	wasn	
24-116	9902-9903	’	
24-117	9903-9904	t	
24-118	9905-9911	sorted	
24-119	9911-9912	,	
24-120	9913-9918	there	
24-121	9918-9919	’	
24-122	9919-9920	s	
24-123	9921-9922	a	
24-124	9923-9927	good	
24-125	9928-9934	chance	
24-126	9935-9939	that	
24-127	9940-9948	Postgres	
24-128	9949-9954	would	
24-129	9955-9959	read	
24-130	9960-9963	the	
24-131	9964-9968	data	
24-132	9969-9975	blocks	
24-133	9976-9988	sequentially	
24-134	9989-9992	and	
24-135	9993-9997	sort	
24-136	9998-10001	the	
24-137	10002-10009	results	
24-138	10009-10010	.	

#Text=This technique is mostly relevant with single column indexes when you require “nulls to sort last” behavior, because otherwise the order is already available since an index can be scanned in any direction. It becomes even more relevant when used against a multi-column index when a query requests a mixed sort order, like a ASC, b DESC. Managing and Maintaining indexes Indexes in Postgres do not hold all row data. Even when an index is used in a query and matching rows where found, Postgres will go to disk to fetch the row data. Additionally, row visibility information (discussed in the MVCC article) is not stored on the index either, therefore Postgres must also go to disk to fetch that information.
25-1	10011-10015	This	
25-2	10016-10025	technique	
25-3	10026-10028	is	
25-4	10029-10035	mostly	
25-5	10036-10044	relevant	
25-6	10045-10049	with	
25-7	10050-10056	single	
25-8	10057-10063	column	
25-9	10064-10071	indexes	
25-10	10072-10076	when	
25-11	10077-10080	you	
25-12	10081-10088	require	
25-13	10089-10090	“	
25-14	10090-10095	nulls	
25-15	10096-10098	to	
25-16	10099-10103	sort	
25-17	10104-10108	last	
25-18	10108-10109	”	
25-19	10110-10118	behavior	
25-20	10118-10119	,	
25-21	10120-10127	because	
25-22	10128-10137	otherwise	
25-23	10138-10141	the	
25-24	10142-10147	order	
25-25	10148-10150	is	
25-26	10151-10158	already	
25-27	10159-10168	available	
25-28	10169-10174	since	
25-29	10175-10177	an	
25-30	10178-10183	index	
25-31	10184-10187	can	
25-32	10188-10190	be	
25-33	10191-10198	scanned	
25-34	10199-10201	in	
25-35	10202-10205	any	
25-36	10206-10215	direction	
25-37	10215-10216	.	
25-38	10217-10219	It	
25-39	10220-10227	becomes	
25-40	10228-10232	even	
25-41	10233-10237	more	
25-42	10238-10246	relevant	
25-43	10247-10251	when	
25-44	10252-10256	used	
25-45	10257-10264	against	
25-46	10265-10266	a	
25-47	10267-10279	multi-column	
25-48	10280-10285	index	
25-49	10286-10290	when	
25-50	10291-10292	a	
25-51	10293-10298	query	
25-52	10299-10307	requests	
25-53	10308-10309	a	
25-54	10310-10315	mixed	
25-55	10316-10320	sort	
25-56	10321-10326	order	
25-57	10326-10327	,	
25-58	10328-10332	like	
25-59	10333-10334	a	
25-60	10335-10338	ASC	
25-61	10338-10339	,	
25-62	10340-10341	b	
25-63	10342-10346	DESC	
25-64	10346-10347	.	
25-65	10348-10356	Managing	
25-66	10357-10360	and	
25-67	10361-10372	Maintaining	
25-68	10373-10380	indexes	
25-69	10381-10388	Indexes	
25-70	10389-10391	in	
25-71	10392-10400	Postgres	
25-72	10401-10403	do	
25-73	10404-10407	not	
25-74	10408-10412	hold	
25-75	10413-10416	all	
25-76	10417-10420	row	
25-77	10421-10425	data	
25-78	10425-10426	.	
25-79	10427-10431	Even	
25-80	10432-10436	when	
25-81	10437-10439	an	
25-82	10440-10445	index	
25-83	10446-10448	is	
25-84	10449-10453	used	
25-85	10454-10456	in	
25-86	10457-10458	a	
25-87	10459-10464	query	
25-88	10465-10468	and	
25-89	10469-10477	matching	
25-90	10478-10482	rows	
25-91	10483-10488	where	
25-92	10489-10494	found	
25-93	10494-10495	,	
25-94	10496-10504	Postgres	
25-95	10505-10509	will	
25-96	10510-10512	go	
25-97	10513-10515	to	
25-98	10516-10520	disk	
25-99	10521-10523	to	
25-100	10524-10529	fetch	
25-101	10530-10533	the	
25-102	10534-10537	row	
25-103	10538-10542	data	
25-104	10542-10543	.	
25-105	10544-10556	Additionally	
25-106	10556-10557	,	
25-107	10558-10561	row	
25-108	10562-10572	visibility	
25-109	10573-10584	information	
25-110	10585-10586	(	
25-111	10586-10595	discussed	
25-112	10596-10598	in	
25-113	10599-10602	the	
25-114	10603-10607	MVCC	
25-115	10608-10615	article	
25-116	10615-10616	)	
25-117	10617-10619	is	
25-118	10620-10623	not	
25-119	10624-10630	stored	
25-120	10631-10633	on	
25-121	10634-10637	the	
25-122	10638-10643	index	
25-123	10644-10650	either	
25-124	10650-10651	,	
25-125	10652-10661	therefore	
25-126	10662-10670	Postgres	
25-127	10671-10675	must	
25-128	10676-10680	also	
25-129	10681-10683	go	
25-130	10684-10686	to	
25-131	10687-10691	disk	
25-132	10692-10694	to	
25-133	10695-10700	fetch	
25-134	10701-10705	that	
25-135	10706-10717	information	
25-136	10717-10718	.	

#Text=Having that in mind, you can see how in some cases using an index doesn’t really make sense. An index must be selective enough to reduce the number of disk lookups for it to be worth it. For example, a primary key lookup with a big enough table makes good use of an index: instead of sequentially scanning the table matching the query conditions, Postgres is able to find the targeted rows in an index, and then fetch them from disk selectively. For very small tables, for example a cities lookup table, an index may be undesirable, even if you search by city name. In that case, Postgres may decide to ignore the index in favor of a sequential scan. Postgres will decide to perform a sequential scan on any query that will hit a significant portion of a table. If you do have an index on that column, it will be a dead index that’s never used - and indexes are not free: they come at a cost in terms of storage and maintenance. For more on running production, staging, and other environments for your Heroku application, take a look at our Managing Multiple Environments article.
26-1	10719-10725	Having	
26-2	10726-10730	that	
26-3	10731-10733	in	
26-4	10734-10738	mind	
26-5	10738-10739	,	
26-6	10740-10743	you	
26-7	10744-10747	can	
26-8	10748-10751	see	
26-9	10752-10755	how	
26-10	10756-10758	in	
26-11	10759-10763	some	
26-12	10764-10769	cases	
26-13	10770-10775	using	
26-14	10776-10778	an	
26-15	10779-10784	index	
26-16	10785-10790	doesn	
26-17	10790-10791	’	
26-18	10791-10792	t	
26-19	10793-10799	really	
26-20	10800-10804	make	
26-21	10805-10810	sense	
26-22	10810-10811	.	
26-23	10812-10814	An	
26-24	10815-10820	index	
26-25	10821-10825	must	
26-26	10826-10828	be	
26-27	10829-10838	selective	
26-28	10839-10845	enough	
26-29	10846-10848	to	
26-30	10849-10855	reduce	
26-31	10856-10859	the	
26-32	10860-10866	number	
26-33	10867-10869	of	
26-34	10870-10874	disk	
26-35	10875-10882	lookups	
26-36	10883-10886	for	
26-37	10887-10889	it	
26-38	10890-10892	to	
26-39	10893-10895	be	
26-40	10896-10901	worth	
26-41	10902-10904	it	
26-42	10904-10905	.	
26-43	10906-10909	For	
26-44	10910-10917	example	
26-45	10917-10918	,	
26-46	10919-10920	a	
26-47	10921-10928	primary	
26-48	10929-10932	key	
26-49	10933-10939	lookup	
26-50	10940-10944	with	
26-51	10945-10946	a	
26-52	10947-10950	big	
26-53	10951-10957	enough	
26-54	10958-10963	table	
26-55	10964-10969	makes	
26-56	10970-10974	good	
26-57	10975-10978	use	
26-58	10979-10981	of	
26-59	10982-10984	an	
26-60	10985-10990	index	
26-61	10990-10991	:	
26-62	10992-10999	instead	
26-63	11000-11002	of	
26-64	11003-11015	sequentially	
26-65	11016-11024	scanning	
26-66	11025-11028	the	
26-67	11029-11034	table	
26-68	11035-11043	matching	
26-69	11044-11047	the	
26-70	11048-11053	query	
26-71	11054-11064	conditions	
26-72	11064-11065	,	
26-73	11066-11074	Postgres	
26-74	11075-11077	is	
26-75	11078-11082	able	
26-76	11083-11085	to	
26-77	11086-11090	find	
26-78	11091-11094	the	
26-79	11095-11103	targeted	
26-80	11104-11108	rows	
26-81	11109-11111	in	
26-82	11112-11114	an	
26-83	11115-11120	index	
26-84	11120-11121	,	
26-85	11122-11125	and	
26-86	11126-11130	then	
26-87	11131-11136	fetch	
26-88	11137-11141	them	
26-89	11142-11146	from	
26-90	11147-11151	disk	
26-91	11152-11163	selectively	
26-92	11163-11164	.	
26-93	11165-11168	For	
26-94	11169-11173	very	
26-95	11174-11179	small	
26-96	11180-11186	tables	
26-97	11186-11187	,	
26-98	11188-11191	for	
26-99	11192-11199	example	
26-100	11200-11201	a	
26-101	11202-11208	cities	
26-102	11209-11215	lookup	
26-103	11216-11221	table	
26-104	11221-11222	,	
26-105	11223-11225	an	
26-106	11226-11231	index	
26-107	11232-11235	may	
26-108	11236-11238	be	
26-109	11239-11250	undesirable	
26-110	11250-11251	,	
26-111	11252-11256	even	
26-112	11257-11259	if	
26-113	11260-11263	you	
26-114	11264-11270	search	
26-115	11271-11273	by	
26-116	11274-11278	city	
26-117	11279-11283	name	
26-118	11283-11284	.	
26-119	11285-11287	In	
26-120	11288-11292	that	
26-121	11293-11297	case	
26-122	11297-11298	,	
26-123	11299-11307	Postgres	
26-124	11308-11311	may	
26-125	11312-11318	decide	
26-126	11319-11321	to	
26-127	11322-11328	ignore	
26-128	11329-11332	the	
26-129	11333-11338	index	
26-130	11339-11341	in	
26-131	11342-11347	favor	
26-132	11348-11350	of	
26-133	11351-11352	a	
26-134	11353-11363	sequential	
26-135	11364-11368	scan	
26-136	11368-11369	.	
26-137	11370-11378	Postgres	
26-138	11379-11383	will	
26-139	11384-11390	decide	
26-140	11391-11393	to	
26-141	11394-11401	perform	
26-142	11402-11403	a	
26-143	11404-11414	sequential	
26-144	11415-11419	scan	
26-145	11420-11422	on	
26-146	11423-11426	any	
26-147	11427-11432	query	
26-148	11433-11437	that	
26-149	11438-11442	will	
26-150	11443-11446	hit	
26-151	11447-11448	a	
26-152	11449-11460	significant	
26-153	11461-11468	portion	
26-154	11469-11471	of	
26-155	11472-11473	a	
26-156	11474-11479	table	
26-157	11479-11480	.	
26-158	11481-11483	If	
26-159	11484-11487	you	
26-160	11488-11490	do	
26-161	11491-11495	have	
26-162	11496-11498	an	
26-163	11499-11504	index	
26-164	11505-11507	on	
26-165	11508-11512	that	
26-166	11513-11519	column	
26-167	11519-11520	,	
26-168	11521-11523	it	
26-169	11524-11528	will	
26-170	11529-11531	be	
26-171	11532-11533	a	
26-172	11534-11538	dead	
26-173	11539-11544	index	
26-174	11545-11549	that	
26-175	11549-11550	’	
26-176	11550-11551	s	
26-177	11552-11557	never	
26-178	11558-11562	used	
26-179	11563-11564	-	
26-180	11565-11568	and	
26-181	11569-11576	indexes	
26-182	11577-11580	are	
26-183	11581-11584	not	
26-184	11585-11589	free	
26-185	11589-11590	:	
26-186	11591-11595	they	
26-187	11596-11600	come	
26-188	11601-11603	at	
26-189	11604-11605	a	
26-190	11606-11610	cost	
26-191	11611-11613	in	
26-192	11614-11619	terms	
26-193	11620-11622	of	
26-194	11623-11630	storage	
26-195	11631-11634	and	
26-196	11635-11646	maintenance	
26-197	11646-11647	.	
26-198	11648-11651	For	
26-199	11652-11656	more	
26-200	11657-11659	on	
26-201	11660-11667	running	
26-202	11668-11678	production	
26-203	11678-11679	,	
26-204	11680-11687	staging	
26-205	11687-11688	,	
26-206	11689-11692	and	
26-207	11693-11698	other	
26-208	11699-11711	environments	
26-209	11712-11715	for	
26-210	11716-11720	your	
26-211	11721-11727	Heroku	
26-212	11728-11739	application	
26-213	11739-11740	,	
26-214	11741-11745	take	
26-215	11746-11747	a	
26-216	11748-11752	look	
26-217	11753-11755	at	
26-218	11756-11759	our	
26-219	11760-11768	Managing	
26-220	11769-11777	Multiple	
26-221	11778-11790	Environments	
26-222	11791-11798	article	
26-223	11798-11799	.	

#Text=When tuning a query and understanding what indexes make the most sense, be sure to use a database as similar as possible to what exists, or will exist in production. Whether an index is used or not depends on a number of factors, including the Postgres server configuration, the data in the table, the index and the query. For instance, trying to make a query use an index on your development machine with a small subset of “test data” will be frustrating: Postgres will determine that the dataset is so small that it’s not worth the overhead of reading through the index and then fetching the data from disk. Random I/O is much slower than sequential, so the cost of a sequential scan is lower than that of the random I/O introduced by reading the index and selectively finding the data on disk. Performing index tuning should be done on production, or on a staging environment that is as close to production as possible. On the Heroku Postgres database platform it is possible to copy your production database to a different environment quite easily. When you are ready to apply an index on your production database, keep in mind that creating an index locks the table against writes. For big tables that can mean your site is down for hours. Fortunately Postgres allows you to CREATE INDEX CONCURRENTLY, which will take much longer to build, but does not require a lock that blocks writes. Ordinary CREATE INDEX commands require a lock that blocks writes but not reads.
27-1	11800-11804	When	
27-2	11805-11811	tuning	
27-3	11812-11813	a	
27-4	11814-11819	query	
27-5	11820-11823	and	
27-6	11824-11837	understanding	
27-7	11838-11842	what	
27-8	11843-11850	indexes	
27-9	11851-11855	make	
27-10	11856-11859	the	
27-11	11860-11864	most	
27-12	11865-11870	sense	
27-13	11870-11871	,	
27-14	11872-11874	be	
27-15	11875-11879	sure	
27-16	11880-11882	to	
27-17	11883-11886	use	
27-18	11887-11888	a	
27-19	11889-11897	database	
27-20	11898-11900	as	
27-21	11901-11908	similar	
27-22	11909-11911	as	
27-23	11912-11920	possible	
27-24	11921-11923	to	
27-25	11924-11928	what	
27-26	11929-11935	exists	
27-27	11935-11936	,	
27-28	11937-11939	or	
27-29	11940-11944	will	
27-30	11945-11950	exist	
27-31	11951-11953	in	
27-32	11954-11964	production	
27-33	11964-11965	.	
27-34	11966-11973	Whether	
27-35	11974-11976	an	
27-36	11977-11982	index	
27-37	11983-11985	is	
27-38	11986-11990	used	
27-39	11991-11993	or	
27-40	11994-11997	not	
27-41	11998-12005	depends	
27-42	12006-12008	on	
27-43	12009-12010	a	
27-44	12011-12017	number	
27-45	12018-12020	of	
27-46	12021-12028	factors	
27-47	12028-12029	,	
27-48	12030-12039	including	
27-49	12040-12043	the	
27-50	12044-12052	Postgres	
27-51	12053-12059	server	
27-52	12060-12073	configuration	
27-53	12073-12074	,	
27-54	12075-12078	the	
27-55	12079-12083	data	
27-56	12084-12086	in	
27-57	12087-12090	the	
27-58	12091-12096	table	
27-59	12096-12097	,	
27-60	12098-12101	the	
27-61	12102-12107	index	
27-62	12108-12111	and	
27-63	12112-12115	the	
27-64	12116-12121	query	
27-65	12121-12122	.	
27-66	12123-12126	For	
27-67	12127-12135	instance	
27-68	12135-12136	,	
27-69	12137-12143	trying	
27-70	12144-12146	to	
27-71	12147-12151	make	
27-72	12152-12153	a	
27-73	12154-12159	query	
27-74	12160-12163	use	
27-75	12164-12166	an	
27-76	12167-12172	index	
27-77	12173-12175	on	
27-78	12176-12180	your	
27-79	12181-12192	development	
27-80	12193-12200	machine	
27-81	12201-12205	with	
27-82	12206-12207	a	
27-83	12208-12213	small	
27-84	12214-12220	subset	
27-85	12221-12223	of	
27-86	12224-12225	“	
27-87	12225-12229	test	
27-88	12230-12234	data	
27-89	12234-12235	”	
27-90	12236-12240	will	
27-91	12241-12243	be	
27-92	12244-12255	frustrating	
27-93	12255-12256	:	
27-94	12257-12265	Postgres	
27-95	12266-12270	will	
27-96	12271-12280	determine	
27-97	12281-12285	that	
27-98	12286-12289	the	
27-99	12290-12297	dataset	
27-100	12298-12300	is	
27-101	12301-12303	so	
27-102	12304-12309	small	
27-103	12310-12314	that	
27-104	12315-12317	it	
27-105	12317-12318	’	
27-106	12318-12319	s	
27-107	12320-12323	not	
27-108	12324-12329	worth	
27-109	12330-12333	the	
27-110	12334-12342	overhead	
27-111	12343-12345	of	
27-112	12346-12353	reading	
27-113	12354-12361	through	
27-114	12362-12365	the	
27-115	12366-12371	index	
27-116	12372-12375	and	
27-117	12376-12380	then	
27-118	12381-12389	fetching	
27-119	12390-12393	the	
27-120	12394-12398	data	
27-121	12399-12403	from	
27-122	12404-12408	disk	
27-123	12408-12409	.	
27-124	12410-12416	Random	
27-125	12417-12418	I	
27-126	12418-12419	/	
27-127	12419-12420	O	
27-128	12421-12423	is	
27-129	12424-12428	much	
27-130	12429-12435	slower	
27-131	12436-12440	than	
27-132	12441-12451	sequential	
27-133	12451-12452	,	
27-134	12453-12455	so	
27-135	12456-12459	the	
27-136	12460-12464	cost	
27-137	12465-12467	of	
27-138	12468-12469	a	
27-139	12470-12480	sequential	
27-140	12481-12485	scan	
27-141	12486-12488	is	
27-142	12489-12494	lower	
27-143	12495-12499	than	
27-144	12500-12504	that	
27-145	12505-12507	of	
27-146	12508-12511	the	
27-147	12512-12518	random	
27-148	12519-12520	I	
27-149	12520-12521	/	
27-150	12521-12522	O	
27-151	12523-12533	introduced	
27-152	12534-12536	by	
27-153	12537-12544	reading	
27-154	12545-12548	the	
27-155	12549-12554	index	
27-156	12555-12558	and	
27-157	12559-12570	selectively	
27-158	12571-12578	finding	
27-159	12579-12582	the	
27-160	12583-12587	data	
27-161	12588-12590	on	
27-162	12591-12595	disk	
27-163	12595-12596	.	
27-164	12597-12607	Performing	
27-165	12608-12613	index	
27-166	12614-12620	tuning	
27-167	12621-12627	should	
27-168	12628-12630	be	
27-169	12631-12635	done	
27-170	12636-12638	on	
27-171	12639-12649	production	
27-172	12649-12650	,	
27-173	12651-12653	or	
27-174	12654-12656	on	
27-175	12657-12658	a	
27-176	12659-12666	staging	
27-177	12667-12678	environment	
27-178	12679-12683	that	
27-179	12684-12686	is	
27-180	12687-12689	as	
27-181	12690-12695	close	
27-182	12696-12698	to	
27-183	12699-12709	production	
27-184	12710-12712	as	
27-185	12713-12721	possible	
27-186	12721-12722	.	
27-187	12723-12725	On	
27-188	12726-12729	the	
27-189	12730-12736	Heroku	
27-190	12737-12745	Postgres	
27-191	12746-12754	database	
27-192	12755-12763	platform	
27-193	12764-12766	it	
27-194	12767-12769	is	
27-195	12770-12778	possible	
27-196	12779-12781	to	
27-197	12782-12786	copy	
27-198	12787-12791	your	
27-199	12792-12802	production	
27-200	12803-12811	database	
27-201	12812-12814	to	
27-202	12815-12816	a	
27-203	12817-12826	different	
27-204	12827-12838	environment	
27-205	12839-12844	quite	
27-206	12845-12851	easily	
27-207	12851-12852	.	
27-208	12853-12857	When	
27-209	12858-12861	you	
27-210	12862-12865	are	
27-211	12866-12871	ready	
27-212	12872-12874	to	
27-213	12875-12880	apply	
27-214	12881-12883	an	
27-215	12884-12889	index	
27-216	12890-12892	on	
27-217	12893-12897	your	
27-218	12898-12908	production	
27-219	12909-12917	database	
27-220	12917-12918	,	
27-221	12919-12923	keep	
27-222	12924-12926	in	
27-223	12927-12931	mind	
27-224	12932-12936	that	
27-225	12937-12945	creating	
27-226	12946-12948	an	
27-227	12949-12954	index	
27-228	12955-12960	locks	
27-229	12961-12964	the	
27-230	12965-12970	table	
27-231	12971-12978	against	
27-232	12979-12985	writes	
27-233	12985-12986	.	
27-234	12987-12990	For	
27-235	12991-12994	big	
27-236	12995-13001	tables	
27-237	13002-13006	that	
27-238	13007-13010	can	
27-239	13011-13015	mean	
27-240	13016-13020	your	
27-241	13021-13025	site	
27-242	13026-13028	is	
27-243	13029-13033	down	
27-244	13034-13037	for	
27-245	13038-13043	hours	
27-246	13043-13044	.	
27-247	13045-13056	Fortunately	
27-248	13057-13065	Postgres	
27-249	13066-13072	allows	
27-250	13073-13076	you	
27-251	13077-13079	to	
27-252	13080-13086	CREATE	
27-253	13087-13092	INDEX	
27-254	13093-13105	CONCURRENTLY	
27-255	13105-13106	,	
27-256	13107-13112	which	
27-257	13113-13117	will	
27-258	13118-13122	take	
27-259	13123-13127	much	
27-260	13128-13134	longer	
27-261	13135-13137	to	
27-262	13138-13143	build	
27-263	13143-13144	,	
27-264	13145-13148	but	
27-265	13149-13153	does	
27-266	13154-13157	not	
27-267	13158-13165	require	
27-268	13166-13167	a	
27-269	13168-13172	lock	
27-270	13173-13177	that	
27-271	13178-13184	blocks	
27-272	13185-13191	writes	
27-273	13191-13192	.	
27-274	13193-13201	Ordinary	
27-275	13202-13208	CREATE	
27-276	13209-13214	INDEX	
27-277	13215-13223	commands	
27-278	13224-13231	require	
27-279	13232-13233	a	
27-280	13234-13238	lock	
27-281	13239-13243	that	
27-282	13244-13250	blocks	
27-283	13251-13257	writes	
27-284	13258-13261	but	
27-285	13262-13265	not	
27-286	13266-13271	reads	
27-287	13271-13272	.	

#Text=Finally, indexes will become fragmented and unoptimized after some time, especially if the rows in the table are often updated or deleted. In those cases it may be required to perform a REINDEX leaving you with a balanced and optimized index. However be cautious about reindexing big indexes as write locks are obtained on the parent table. One strategy to achieve the same result on a live site is to build an index concurrently on the same table and columns but with a different name, and then dropping the original index and renaming the new one. This procedure, while much longer, won’t require any long running locks on the live tables. Postgres provides a lot of flexibility when it comes to creating B-tree indexes that are optimized to your specific use cases, as well as options for managing the ever-growing database behind your applications. These tips should help you keep your database healthy, and your queries snappy.
28-1	13273-13280	Finally	
28-2	13280-13281	,	
28-3	13282-13289	indexes	
28-4	13290-13294	will	
28-5	13295-13301	become	
28-6	13302-13312	fragmented	
28-7	13313-13316	and	
28-8	13317-13328	unoptimized	
28-9	13329-13334	after	
28-10	13335-13339	some	
28-11	13340-13344	time	
28-12	13344-13345	,	
28-13	13346-13356	especially	
28-14	13357-13359	if	
28-15	13360-13363	the	
28-16	13364-13368	rows	
28-17	13369-13371	in	
28-18	13372-13375	the	
28-19	13376-13381	table	
28-20	13382-13385	are	
28-21	13386-13391	often	
28-22	13392-13399	updated	
28-23	13400-13402	or	
28-24	13403-13410	deleted	
28-25	13410-13411	.	
28-26	13412-13414	In	
28-27	13415-13420	those	
28-28	13421-13426	cases	
28-29	13427-13429	it	
28-30	13430-13433	may	
28-31	13434-13436	be	
28-32	13437-13445	required	
28-33	13446-13448	to	
28-34	13449-13456	perform	
28-35	13457-13458	a	
28-36	13459-13466	REINDEX	
28-37	13467-13474	leaving	
28-38	13475-13478	you	
28-39	13479-13483	with	
28-40	13484-13485	a	
28-41	13486-13494	balanced	
28-42	13495-13498	and	
28-43	13499-13508	optimized	
28-44	13509-13514	index	
28-45	13514-13515	.	
28-46	13516-13523	However	
28-47	13524-13526	be	
28-48	13527-13535	cautious	
28-49	13536-13541	about	
28-50	13542-13552	reindexing	
28-51	13553-13556	big	
28-52	13557-13564	indexes	
28-53	13565-13567	as	
28-54	13568-13573	write	
28-55	13574-13579	locks	
28-56	13580-13583	are	
28-57	13584-13592	obtained	
28-58	13593-13595	on	
28-59	13596-13599	the	
28-60	13600-13606	parent	
28-61	13607-13612	table	
28-62	13612-13613	.	
28-63	13614-13617	One	
28-64	13618-13626	strategy	
28-65	13627-13629	to	
28-66	13630-13637	achieve	
28-67	13638-13641	the	
28-68	13642-13646	same	
28-69	13647-13653	result	
28-70	13654-13656	on	
28-71	13657-13658	a	
28-72	13659-13663	live	
28-73	13664-13668	site	
28-74	13669-13671	is	
28-75	13672-13674	to	
28-76	13675-13680	build	
28-77	13681-13683	an	
28-78	13684-13689	index	
28-79	13690-13702	concurrently	
28-80	13703-13705	on	
28-81	13706-13709	the	
28-82	13710-13714	same	
28-83	13715-13720	table	
28-84	13721-13724	and	
28-85	13725-13732	columns	
28-86	13733-13736	but	
28-87	13737-13741	with	
28-88	13742-13743	a	
28-89	13744-13753	different	
28-90	13754-13758	name	
28-91	13758-13759	,	
28-92	13760-13763	and	
28-93	13764-13768	then	
28-94	13769-13777	dropping	
28-95	13778-13781	the	
28-96	13782-13790	original	
28-97	13791-13796	index	
28-98	13797-13800	and	
28-99	13801-13809	renaming	
28-100	13810-13813	the	
28-101	13814-13817	new	
28-102	13818-13821	one	
28-103	13821-13822	.	
28-104	13823-13827	This	
28-105	13828-13837	procedure	
28-106	13837-13838	,	
28-107	13839-13844	while	
28-108	13845-13849	much	
28-109	13850-13856	longer	
28-110	13856-13857	,	
28-111	13858-13861	won	
28-112	13861-13862	’	
28-113	13862-13863	t	
28-114	13864-13871	require	
28-115	13872-13875	any	
28-116	13876-13880	long	
28-117	13881-13888	running	
28-118	13889-13894	locks	
28-119	13895-13897	on	
28-120	13898-13901	the	
28-121	13902-13906	live	
28-122	13907-13913	tables	
28-123	13913-13914	.	
28-124	13915-13923	Postgres	
28-125	13924-13932	provides	
28-126	13933-13934	a	
28-127	13935-13938	lot	
28-128	13939-13941	of	
28-129	13942-13953	flexibility	
28-130	13954-13958	when	
28-131	13959-13961	it	
28-132	13962-13967	comes	
28-133	13968-13970	to	
28-134	13971-13979	creating	
28-135	13980-13986	B-tree	
28-136	13987-13994	indexes	
28-137	13995-13999	that	
28-138	14000-14003	are	
28-139	14004-14013	optimized	
28-140	14014-14016	to	
28-141	14017-14021	your	
28-142	14022-14030	specific	
28-143	14031-14034	use	
28-144	14035-14040	cases	
28-145	14040-14041	,	
28-146	14042-14044	as	
28-147	14045-14049	well	
28-148	14050-14052	as	
28-149	14053-14060	options	
28-150	14061-14064	for	
28-151	14065-14073	managing	
28-152	14074-14077	the	
28-153	14078-14090	ever-growing	
28-154	14091-14099	database	
28-155	14100-14106	behind	
28-156	14107-14111	your	
28-157	14112-14124	applications	
28-158	14124-14125	.	
28-159	14126-14131	These	
28-160	14132-14136	tips	
28-161	14137-14143	should	
28-162	14144-14148	help	
28-163	14149-14152	you	
28-164	14153-14157	keep	
28-165	14158-14162	your	
28-166	14163-14171	database	
28-167	14172-14179	healthy	
28-168	14179-14180	,	
28-169	14181-14184	and	
28-170	14185-14189	your	
28-171	14190-14197	queries	
28-172	14198-14204	snappy	
28-173	14204-14205	.	

#Text=Keep readingPostgres Performance FeedbackLog in to submit feedback. Understanding Heroku Postgres Data Caching Expensive Queries
29-1	14206-14210	Keep	
29-2	14211-14226	readingPostgres	
29-3	14227-14238	Performance	
29-4	14239-14250	FeedbackLog	
29-5	14251-14253	in	
29-6	14254-14256	to	
29-7	14257-14263	submit	
29-8	14264-14272	feedback	
29-9	14272-14273	.	
29-10	14274-14287	Understanding	
29-11	14288-14294	Heroku	
29-12	14295-14303	Postgres	
29-13	14304-14308	Data	
29-14	14309-14316	Caching	
29-15	14317-14326	Expensive	
29-16	14327-14334	Queries	
