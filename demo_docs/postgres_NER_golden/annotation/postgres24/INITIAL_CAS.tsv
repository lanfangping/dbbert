#FORMAT=WebAnno TSV 3.3


#Text=Mapping data flow performance and tuning guide - Azure Data Factory | Microsoft Docs
#Text=Skip to main content
#Text=Contents
#Text=Exit focus mode
#Text=Bookmark
#Text=Feedback
#Text=Edit
#Text=Share
#Text=Twitter
#Text=LinkedIn
#Text=Facebook
#Text=Email
#Text=Table of contents
#Text=Mapping data flows performance and tuning guide
#Text=03/15/2021
#Text=21 minutes to read
#Text=In this article
#Text=APPLIES TO:
#Text=Azure Data Factory
#Text=Azure Synapse Analytics
#Text=Mapping data flows in Azure Data Factory provide a code-free interface to design and run data transformations at scale.
1-1	0-7	Mapping	
1-2	8-12	data	
1-3	13-17	flow	
1-4	18-29	performance	
1-5	30-33	and	
1-6	34-40	tuning	
1-7	41-46	guide	
1-8	47-48	-	
1-9	49-54	Azure	
1-10	55-59	Data	
1-11	60-67	Factory	
1-12	68-69	|	
1-13	70-79	Microsoft	
1-14	80-84	Docs	
1-15	85-89	Skip	
1-16	90-92	to	
1-17	93-97	main	
1-18	98-105	content	
1-19	106-114	Contents	
1-20	115-119	Exit	
1-21	120-125	focus	
1-22	126-130	mode	
1-23	131-139	Bookmark	
1-24	140-148	Feedback	
1-25	149-153	Edit	
1-26	154-159	Share	
1-27	160-167	Twitter	
1-28	168-176	LinkedIn	
1-29	177-185	Facebook	
1-30	186-191	Email	
1-31	192-197	Table	
1-32	198-200	of	
1-33	201-209	contents	
1-34	210-217	Mapping	
1-35	218-222	data	
1-36	223-228	flows	
1-37	229-240	performance	
1-38	241-244	and	
1-39	245-251	tuning	
1-40	252-257	guide	
1-41	258-260	03	
1-42	260-261	/	
1-43	261-263	15	
1-44	263-264	/	
1-45	264-268	2021	
1-46	269-271	21	
1-47	272-279	minutes	
1-48	280-282	to	
1-49	283-287	read	
1-50	288-290	In	
1-51	291-295	this	
1-52	296-303	article	
1-53	304-311	APPLIES	
1-54	312-314	TO	
1-55	314-315	:	
1-56	316-321	Azure	
1-57	322-326	Data	
1-58	327-334	Factory	
1-59	335-340	Azure	
1-60	341-348	Synapse	
1-61	349-358	Analytics	
1-62	359-366	Mapping	
1-63	367-371	data	
1-64	372-377	flows	
1-65	378-380	in	
1-66	381-386	Azure	
1-67	387-391	Data	
1-68	392-399	Factory	
1-69	400-407	provide	
1-70	408-409	a	
1-71	410-419	code-free	
1-72	420-429	interface	
1-73	430-432	to	
1-74	433-439	design	
1-75	440-443	and	
1-76	444-447	run	
1-77	448-452	data	
1-78	453-468	transformations	
1-79	469-471	at	
1-80	472-477	scale	
1-81	477-478	.	

#Text=If you're not familiar with mapping data flows, see the Mapping Data Flow Overview.
2-1	479-481	If	
2-2	482-488	you're	
2-3	489-492	not	
2-4	493-501	familiar	
2-5	502-506	with	
2-6	507-514	mapping	
2-7	515-519	data	
2-8	520-525	flows	
2-9	525-526	,	
2-10	527-530	see	
2-11	531-534	the	
2-12	535-542	Mapping	
2-13	543-547	Data	
2-14	548-552	Flow	
2-15	553-561	Overview	
2-16	561-562	.	

#Text=This article highlights various ways to tune and optimize your data flows so that they meet your performance benchmarks.
3-1	563-567	This	
3-2	568-575	article	
3-3	576-586	highlights	
3-4	587-594	various	
3-5	595-599	ways	
3-6	600-602	to	
3-7	603-607	tune	
3-8	608-611	and	
3-9	612-620	optimize	
3-10	621-625	your	
3-11	626-630	data	
3-12	631-636	flows	
3-13	637-639	so	
3-14	640-644	that	
3-15	645-649	they	
3-16	650-654	meet	
3-17	655-659	your	
3-18	660-671	performance	
3-19	672-682	benchmarks	
3-20	682-683	.	

#Text=Watch the below video to see shows some sample timings transforming data with data flows.
4-1	684-689	Watch	
4-2	690-693	the	
4-3	694-699	below	
4-4	700-705	video	
4-5	706-708	to	
4-6	709-712	see	
4-7	713-718	shows	
4-8	719-723	some	
4-9	724-730	sample	
4-10	731-738	timings	
4-11	739-751	transforming	
4-12	752-756	data	
4-13	757-761	with	
4-14	762-766	data	
4-15	767-772	flows	
4-16	772-773	.	

#Text=Testing data flow logic
#Text=When designing and testing data flows from the ADF UX, debug mode allows you to interactively test against a live Spark cluster.
5-1	774-781	Testing	
5-2	782-786	data	
5-3	787-791	flow	
5-4	792-797	logic	
5-5	798-802	When	
5-6	803-812	designing	
5-7	813-816	and	
5-8	817-824	testing	
5-9	825-829	data	
5-10	830-835	flows	
5-11	836-840	from	
5-12	841-844	the	
5-13	845-848	ADF	
5-14	849-851	UX	
5-15	851-852	,	
5-16	853-858	debug	
5-17	859-863	mode	
5-18	864-870	allows	
5-19	871-874	you	
5-20	875-877	to	
5-21	878-891	interactively	
5-22	892-896	test	
5-23	897-904	against	
5-24	905-906	a	
5-25	907-911	live	
5-26	912-917	Spark	
5-27	918-925	cluster	
5-28	925-926	.	

#Text=This allows you to preview data and execute your data flows without waiting for a cluster to warm up.
6-1	927-931	This	
6-2	932-938	allows	
6-3	939-942	you	
6-4	943-945	to	
6-5	946-953	preview	
6-6	954-958	data	
6-7	959-962	and	
6-8	963-970	execute	
6-9	971-975	your	
6-10	976-980	data	
6-11	981-986	flows	
6-12	987-994	without	
6-13	995-1002	waiting	
6-14	1003-1006	for	
6-15	1007-1008	a	
6-16	1009-1016	cluster	
6-17	1017-1019	to	
6-18	1020-1024	warm	
6-19	1025-1027	up	
6-20	1027-1028	.	

#Text=For more information, see Debug Mode.
7-1	1029-1032	For	
7-2	1033-1037	more	
7-3	1038-1049	information	
7-4	1049-1050	,	
7-5	1051-1054	see	
7-6	1055-1060	Debug	
7-7	1061-1065	Mode	
7-8	1065-1066	.	

#Text=Monitoring data flow performance
#Text=Once you verify your transformation logic using debug mode, run your data flow end-to-end as an activity in a pipeline.
8-1	1067-1077	Monitoring	
8-2	1078-1082	data	
8-3	1083-1087	flow	
8-4	1088-1099	performance	
8-5	1100-1104	Once	
8-6	1105-1108	you	
8-7	1109-1115	verify	
8-8	1116-1120	your	
8-9	1121-1135	transformation	
8-10	1136-1141	logic	
8-11	1142-1147	using	
8-12	1148-1153	debug	
8-13	1154-1158	mode	
8-14	1158-1159	,	
8-15	1160-1163	run	
8-16	1164-1168	your	
8-17	1169-1173	data	
8-18	1174-1178	flow	
8-19	1179-1189	end-to-end	
8-20	1190-1192	as	
8-21	1193-1195	an	
8-22	1196-1204	activity	
8-23	1205-1207	in	
8-24	1208-1209	a	
8-25	1210-1218	pipeline	
8-26	1218-1219	.	

#Text=Data flows are operationalized in a pipeline using the execute data flow activity.
9-1	1220-1224	Data	
9-2	1225-1230	flows	
9-3	1231-1234	are	
9-4	1235-1250	operationalized	
9-5	1251-1253	in	
9-6	1254-1255	a	
9-7	1256-1264	pipeline	
9-8	1265-1270	using	
9-9	1271-1274	the	
9-10	1275-1282	execute	
9-11	1283-1287	data	
9-12	1288-1292	flow	
9-13	1293-1301	activity	
9-14	1301-1302	.	

#Text=The data flow activity has a unique monitoring experience compared to other Azure Data Factory activities that displays a detailed execution plan and performance profile of the transformation logic.
10-1	1303-1306	The	
10-2	1307-1311	data	
10-3	1312-1316	flow	
10-4	1317-1325	activity	
10-5	1326-1329	has	
10-6	1330-1331	a	
10-7	1332-1338	unique	
10-8	1339-1349	monitoring	
10-9	1350-1360	experience	
10-10	1361-1369	compared	
10-11	1370-1372	to	
10-12	1373-1378	other	
10-13	1379-1384	Azure	
10-14	1385-1389	Data	
10-15	1390-1397	Factory	
10-16	1398-1408	activities	
10-17	1409-1413	that	
10-18	1414-1422	displays	
10-19	1423-1424	a	
10-20	1425-1433	detailed	
10-21	1434-1443	execution	
10-22	1444-1448	plan	
10-23	1449-1452	and	
10-24	1453-1464	performance	
10-25	1465-1472	profile	
10-26	1473-1475	of	
10-27	1476-1479	the	
10-28	1480-1494	transformation	
10-29	1495-1500	logic	
10-30	1500-1501	.	

#Text=To view detailed monitoring information of a data flow, click on the eyeglasses icon in the activity run output of a pipeline.
11-1	1502-1504	To	
11-2	1505-1509	view	
11-3	1510-1518	detailed	
11-4	1519-1529	monitoring	
11-5	1530-1541	information	
11-6	1542-1544	of	
11-7	1545-1546	a	
11-8	1547-1551	data	
11-9	1552-1556	flow	
11-10	1556-1557	,	
11-11	1558-1563	click	
11-12	1564-1566	on	
11-13	1567-1570	the	
11-14	1571-1581	eyeglasses	
11-15	1582-1586	icon	
11-16	1587-1589	in	
11-17	1590-1593	the	
11-18	1594-1602	activity	
11-19	1603-1606	run	
11-20	1607-1613	output	
11-21	1614-1616	of	
11-22	1617-1618	a	
11-23	1619-1627	pipeline	
11-24	1627-1628	.	

#Text=For more information, see Monitoring mapping data flows.
12-1	1629-1632	For	
12-2	1633-1637	more	
12-3	1638-1649	information	
12-4	1649-1650	,	
12-5	1651-1654	see	
12-6	1655-1665	Monitoring	
12-7	1666-1673	mapping	
12-8	1674-1678	data	
12-9	1679-1684	flows	
12-10	1684-1685	.	

#Text=When monitoring data flow performance, there are four possible bottlenecks to look out for:
#Text=Cluster start-up time
#Text=Reading from a source
#Text=Transformation time
#Text=Writing to a sink
#Text=Cluster start-up time is the time it takes to spin up an Apache Spark cluster.
13-1	1686-1690	When	
13-2	1691-1701	monitoring	
13-3	1702-1706	data	
13-4	1707-1711	flow	
13-5	1712-1723	performance	
13-6	1723-1724	,	
13-7	1725-1730	there	
13-8	1731-1734	are	
13-9	1735-1739	four	
13-10	1740-1748	possible	
13-11	1749-1760	bottlenecks	
13-12	1761-1763	to	
13-13	1764-1768	look	
13-14	1769-1772	out	
13-15	1773-1776	for	
13-16	1776-1777	:	
13-17	1778-1785	Cluster	
13-18	1786-1794	start-up	
13-19	1795-1799	time	
13-20	1800-1807	Reading	
13-21	1808-1812	from	
13-22	1813-1814	a	
13-23	1815-1821	source	
13-24	1822-1836	Transformation	
13-25	1837-1841	time	
13-26	1842-1849	Writing	
13-27	1850-1852	to	
13-28	1853-1854	a	
13-29	1855-1859	sink	
13-30	1860-1867	Cluster	
13-31	1868-1876	start-up	
13-32	1877-1881	time	
13-33	1882-1884	is	
13-34	1885-1888	the	
13-35	1889-1893	time	
13-36	1894-1896	it	
13-37	1897-1902	takes	
13-38	1903-1905	to	
13-39	1906-1910	spin	
13-40	1911-1913	up	
13-41	1914-1916	an	
13-42	1917-1923	Apache	
13-43	1924-1929	Spark	
13-44	1930-1937	cluster	
13-45	1937-1938	.	

#Text=This value is located in the top-right corner of the monitoring screen.
14-1	1939-1943	This	
14-2	1944-1949	value	
14-3	1950-1952	is	
14-4	1953-1960	located	
14-5	1961-1963	in	
14-6	1964-1967	the	
14-7	1968-1977	top-right	
14-8	1978-1984	corner	
14-9	1985-1987	of	
14-10	1988-1991	the	
14-11	1992-2002	monitoring	
14-12	2003-2009	screen	
14-13	2009-2010	.	

#Text=Data flows run on a just-in-time model where each job uses an isolated cluster.
15-1	2011-2015	Data	
15-2	2016-2021	flows	
15-3	2022-2025	run	
15-4	2026-2028	on	
15-5	2029-2030	a	
15-6	2031-2043	just-in-time	
15-7	2044-2049	model	
15-8	2050-2055	where	
15-9	2056-2060	each	
15-10	2061-2064	job	
15-11	2065-2069	uses	
15-12	2070-2072	an	
15-13	2073-2081	isolated	
15-14	2082-2089	cluster	
15-15	2089-2090	.	

#Text=This start-up time generally takes 3-5 minutes.
16-1	2091-2095	This	
16-2	2096-2104	start-up	
16-3	2105-2109	time	
16-4	2110-2119	generally	
16-5	2120-2125	takes	
16-6	2126-2127	3	
16-7	2127-2128	-	
16-8	2128-2129	5	
16-9	2130-2137	minutes	
16-10	2137-2138	.	

#Text=For sequential jobs, this can be reduced by enabling a time to live value.
17-1	2139-2142	For	
17-2	2143-2153	sequential	
17-3	2154-2158	jobs	
17-4	2158-2159	,	
17-5	2160-2164	this	
17-6	2165-2168	can	
17-7	2169-2171	be	
17-8	2172-2179	reduced	
17-9	2180-2182	by	
17-10	2183-2191	enabling	
17-11	2192-2193	a	
17-12	2194-2198	time	
17-13	2199-2201	to	
17-14	2202-2206	live	
17-15	2207-2212	value	
17-16	2212-2213	.	

#Text=For more information, see optimizing the Azure Integration Runtime.
18-1	2214-2217	For	
18-2	2218-2222	more	
18-3	2223-2234	information	
18-4	2234-2235	,	
18-5	2236-2239	see	
18-6	2240-2250	optimizing	
18-7	2251-2254	the	
18-8	2255-2260	Azure	
18-9	2261-2272	Integration	
18-10	2273-2280	Runtime	
18-11	2280-2281	.	

#Text=Data flows utilize a Spark optimizer that reorders and runs your business logic in 'stages' to perform as quickly as possible.
19-1	2282-2286	Data	
19-2	2287-2292	flows	
19-3	2293-2300	utilize	
19-4	2301-2302	a	
19-5	2303-2308	Spark	
19-6	2309-2318	optimizer	
19-7	2319-2323	that	
19-8	2324-2332	reorders	
19-9	2333-2336	and	
19-10	2337-2341	runs	
19-11	2342-2346	your	
19-12	2347-2355	business	
19-13	2356-2361	logic	
19-14	2362-2364	in	
19-15	2365-2366	'	
19-16	2366-2372	stages	
19-17	2372-2373	'	
19-18	2374-2376	to	
19-19	2377-2384	perform	
19-20	2385-2387	as	
19-21	2388-2395	quickly	
19-22	2396-2398	as	
19-23	2399-2407	possible	
19-24	2407-2408	.	

#Text=For each sink that your data flow writes to, the monitoring output lists the duration of each transformation stage, along with the time it takes to write data into the sink.
20-1	2409-2412	For	
20-2	2413-2417	each	
20-3	2418-2422	sink	
20-4	2423-2427	that	
20-5	2428-2432	your	
20-6	2433-2437	data	
20-7	2438-2442	flow	
20-8	2443-2449	writes	
20-9	2450-2452	to	
20-10	2452-2453	,	
20-11	2454-2457	the	
20-12	2458-2468	monitoring	
20-13	2469-2475	output	
20-14	2476-2481	lists	
20-15	2482-2485	the	
20-16	2486-2494	duration	
20-17	2495-2497	of	
20-18	2498-2502	each	
20-19	2503-2517	transformation	
20-20	2518-2523	stage	
20-21	2523-2524	,	
20-22	2525-2530	along	
20-23	2531-2535	with	
20-24	2536-2539	the	
20-25	2540-2544	time	
20-26	2545-2547	it	
20-27	2548-2553	takes	
20-28	2554-2556	to	
20-29	2557-2562	write	
20-30	2563-2567	data	
20-31	2568-2572	into	
20-32	2573-2576	the	
20-33	2577-2581	sink	
20-34	2581-2582	.	

#Text=The time that is the largest is likely the bottleneck of your data flow.
21-1	2583-2586	The	
21-2	2587-2591	time	
21-3	2592-2596	that	
21-4	2597-2599	is	
21-5	2600-2603	the	
21-6	2604-2611	largest	
21-7	2612-2614	is	
21-8	2615-2621	likely	
21-9	2622-2625	the	
21-10	2626-2636	bottleneck	
21-11	2637-2639	of	
21-12	2640-2644	your	
21-13	2645-2649	data	
21-14	2650-2654	flow	
21-15	2654-2655	.	

#Text=If the transformation stage that takes the largest contains a source, then you may want to look at further optimizing your read time.
22-1	2656-2658	If	
22-2	2659-2662	the	
22-3	2663-2677	transformation	
22-4	2678-2683	stage	
22-5	2684-2688	that	
22-6	2689-2694	takes	
22-7	2695-2698	the	
22-8	2699-2706	largest	
22-9	2707-2715	contains	
22-10	2716-2717	a	
22-11	2718-2724	source	
22-12	2724-2725	,	
22-13	2726-2730	then	
22-14	2731-2734	you	
22-15	2735-2738	may	
22-16	2739-2743	want	
22-17	2744-2746	to	
22-18	2747-2751	look	
22-19	2752-2754	at	
22-20	2755-2762	further	
22-21	2763-2773	optimizing	
22-22	2774-2778	your	
22-23	2779-2783	read	
22-24	2784-2788	time	
22-25	2788-2789	.	

#Text=If a transformation is taking a long time, then you may need to repartition or increase the size of your integration runtime.
23-1	2790-2792	If	
23-2	2793-2794	a	
23-3	2795-2809	transformation	
23-4	2810-2812	is	
23-5	2813-2819	taking	
23-6	2820-2821	a	
23-7	2822-2826	long	
23-8	2827-2831	time	
23-9	2831-2832	,	
23-10	2833-2837	then	
23-11	2838-2841	you	
23-12	2842-2845	may	
23-13	2846-2850	need	
23-14	2851-2853	to	
23-15	2854-2865	repartition	
23-16	2866-2868	or	
23-17	2869-2877	increase	
23-18	2878-2881	the	
23-19	2882-2886	size	
23-20	2887-2889	of	
23-21	2890-2894	your	
23-22	2895-2906	integration	
23-23	2907-2914	runtime	
23-24	2914-2915	.	

#Text=If the sink processing time is large, you may need to scale up your database or verify you are not outputting to a single file.
24-1	2916-2918	If	
24-2	2919-2922	the	
24-3	2923-2927	sink	
24-4	2928-2938	processing	
24-5	2939-2943	time	
24-6	2944-2946	is	
24-7	2947-2952	large	
24-8	2952-2953	,	
24-9	2954-2957	you	
24-10	2958-2961	may	
24-11	2962-2966	need	
24-12	2967-2969	to	
24-13	2970-2975	scale	
24-14	2976-2978	up	
24-15	2979-2983	your	
24-16	2984-2992	database	
24-17	2993-2995	or	
24-18	2996-3002	verify	
24-19	3003-3006	you	
24-20	3007-3010	are	
24-21	3011-3014	not	
24-22	3015-3025	outputting	
24-23	3026-3028	to	
24-24	3029-3030	a	
24-25	3031-3037	single	
24-26	3038-3042	file	
24-27	3042-3043	.	

#Text=Once you have identified the bottleneck of your data flow, use the below optimizations strategies to improve performance.
25-1	3044-3048	Once	
25-2	3049-3052	you	
25-3	3053-3057	have	
25-4	3058-3068	identified	
25-5	3069-3072	the	
25-6	3073-3083	bottleneck	
25-7	3084-3086	of	
25-8	3087-3091	your	
25-9	3092-3096	data	
25-10	3097-3101	flow	
25-11	3101-3102	,	
25-12	3103-3106	use	
25-13	3107-3110	the	
25-14	3111-3116	below	
25-15	3117-3130	optimizations	
25-16	3131-3141	strategies	
25-17	3142-3144	to	
25-18	3145-3152	improve	
25-19	3153-3164	performance	
25-20	3164-3165	.	

#Text=Optimize tab
#Text=The Optimize tab contains settings to configure the partitioning scheme of the Spark cluster.
26-1	3166-3174	Optimize	
26-2	3175-3178	tab	
26-3	3179-3182	The	
26-4	3183-3191	Optimize	
26-5	3192-3195	tab	
26-6	3196-3204	contains	
26-7	3205-3213	settings	
26-8	3214-3216	to	
26-9	3217-3226	configure	
26-10	3227-3230	the	
26-11	3231-3243	partitioning	
26-12	3244-3250	scheme	
26-13	3251-3253	of	
26-14	3254-3257	the	
26-15	3258-3263	Spark	
26-16	3264-3271	cluster	
26-17	3271-3272	.	

#Text=This tab exists in every transformation of data flow and specifies whether you want to repartition the data after the transformation has completed.
27-1	3273-3277	This	
27-2	3278-3281	tab	
27-3	3282-3288	exists	
27-4	3289-3291	in	
27-5	3292-3297	every	
27-6	3298-3312	transformation	
27-7	3313-3315	of	
27-8	3316-3320	data	
27-9	3321-3325	flow	
27-10	3326-3329	and	
27-11	3330-3339	specifies	
27-12	3340-3347	whether	
27-13	3348-3351	you	
27-14	3352-3356	want	
27-15	3357-3359	to	
27-16	3360-3371	repartition	
27-17	3372-3375	the	
27-18	3376-3380	data	
27-19	3381-3386	after	
27-20	3387-3390	the	
27-21	3391-3405	transformation	
27-22	3406-3409	has	
27-23	3410-3419	completed	
27-24	3419-3420	.	

#Text=Adjusting the partitioning provides control over the distribution of your data across compute nodes and data locality optimizations that can have both positive and negative effects on your overall data flow performance.
28-1	3421-3430	Adjusting	
28-2	3431-3434	the	
28-3	3435-3447	partitioning	
28-4	3448-3456	provides	
28-5	3457-3464	control	
28-6	3465-3469	over	
28-7	3470-3473	the	
28-8	3474-3486	distribution	
28-9	3487-3489	of	
28-10	3490-3494	your	
28-11	3495-3499	data	
28-12	3500-3506	across	
28-13	3507-3514	compute	
28-14	3515-3520	nodes	
28-15	3521-3524	and	
28-16	3525-3529	data	
28-17	3530-3538	locality	
28-18	3539-3552	optimizations	
28-19	3553-3557	that	
28-20	3558-3561	can	
28-21	3562-3566	have	
28-22	3567-3571	both	
28-23	3572-3580	positive	
28-24	3581-3584	and	
28-25	3585-3593	negative	
28-26	3594-3601	effects	
28-27	3602-3604	on	
28-28	3605-3609	your	
28-29	3610-3617	overall	
28-30	3618-3622	data	
28-31	3623-3627	flow	
28-32	3628-3639	performance	
28-33	3639-3640	.	

#Text=By default, Use current partitioning is selected which instructs Azure Data Factory keep the current output partitioning of the transformation.
29-1	3641-3643	By	
29-2	3644-3651	default	
29-3	3651-3652	,	
29-4	3653-3656	Use	
29-5	3657-3664	current	
29-6	3665-3677	partitioning	
29-7	3678-3680	is	
29-8	3681-3689	selected	
29-9	3690-3695	which	
29-10	3696-3705	instructs	
29-11	3706-3711	Azure	
29-12	3712-3716	Data	
29-13	3717-3724	Factory	
29-14	3725-3729	keep	
29-15	3730-3733	the	
29-16	3734-3741	current	
29-17	3742-3748	output	
29-18	3749-3761	partitioning	
29-19	3762-3764	of	
29-20	3765-3768	the	
29-21	3769-3783	transformation	
29-22	3783-3784	.	

#Text=As repartitioning data takes time, Use current partitioning is recommended in most scenarios.
30-1	3785-3787	As	
30-2	3788-3802	repartitioning	
30-3	3803-3807	data	
30-4	3808-3813	takes	
30-5	3814-3818	time	
30-6	3818-3819	,	
30-7	3820-3823	Use	
30-8	3824-3831	current	
30-9	3832-3844	partitioning	
30-10	3845-3847	is	
30-11	3848-3859	recommended	
30-12	3860-3862	in	
30-13	3863-3867	most	
30-14	3868-3877	scenarios	
30-15	3877-3878	.	

#Text=Scenarios where you may want to repartition your data include after aggregates and joins that significantly skew your data or when using Source partitioning on a SQL DB.
31-1	3879-3888	Scenarios	
31-2	3889-3894	where	
31-3	3895-3898	you	
31-4	3899-3902	may	
31-5	3903-3907	want	
31-6	3908-3910	to	
31-7	3911-3922	repartition	
31-8	3923-3927	your	
31-9	3928-3932	data	
31-10	3933-3940	include	
31-11	3941-3946	after	
31-12	3947-3957	aggregates	
31-13	3958-3961	and	
31-14	3962-3967	joins	
31-15	3968-3972	that	
31-16	3973-3986	significantly	
31-17	3987-3991	skew	
31-18	3992-3996	your	
31-19	3997-4001	data	
31-20	4002-4004	or	
31-21	4005-4009	when	
31-22	4010-4015	using	
31-23	4016-4022	Source	
31-24	4023-4035	partitioning	
31-25	4036-4038	on	
31-26	4039-4040	a	
31-27	4041-4044	SQL	
31-28	4045-4047	DB	
31-29	4047-4048	.	

#Text=To change the partitioning on any transformation, select the Optimize tab and select the Set Partitioning radio button.
32-1	4049-4051	To	
32-2	4052-4058	change	
32-3	4059-4062	the	
32-4	4063-4075	partitioning	
32-5	4076-4078	on	
32-6	4079-4082	any	
32-7	4083-4097	transformation	
32-8	4097-4098	,	
32-9	4099-4105	select	
32-10	4106-4109	the	
32-11	4110-4118	Optimize	
32-12	4119-4122	tab	
32-13	4123-4126	and	
32-14	4127-4133	select	
32-15	4134-4137	the	
32-16	4138-4141	Set	
32-17	4142-4154	Partitioning	
32-18	4155-4160	radio	
32-19	4161-4167	button	
32-20	4167-4168	.	

#Text=You are presented with a series of options for partitioning.
33-1	4169-4172	You	
33-2	4173-4176	are	
33-3	4177-4186	presented	
33-4	4187-4191	with	
33-5	4192-4193	a	
33-6	4194-4200	series	
33-7	4201-4203	of	
33-8	4204-4211	options	
33-9	4212-4215	for	
33-10	4216-4228	partitioning	
33-11	4228-4229	.	

#Text=The best method of partitioning differs based on your data volumes, candidate keys, null values, and cardinality.
34-1	4230-4233	The	
34-2	4234-4238	best	
34-3	4239-4245	method	
34-4	4246-4248	of	
34-5	4249-4261	partitioning	
34-6	4262-4269	differs	
34-7	4270-4275	based	
34-8	4276-4278	on	
34-9	4279-4283	your	
34-10	4284-4288	data	
34-11	4289-4296	volumes	
34-12	4296-4297	,	
34-13	4298-4307	candidate	
34-14	4308-4312	keys	
34-15	4312-4313	,	
34-16	4314-4318	null	
34-17	4319-4325	values	
34-18	4325-4326	,	
34-19	4327-4330	and	
34-20	4331-4342	cardinality	
34-21	4342-4343	.	

#Text=Important
#Text=Single partition combines all the distributed data into a single partition.
35-1	4344-4353	Important	
35-2	4354-4360	Single	
35-3	4361-4370	partition	
35-4	4371-4379	combines	
35-5	4380-4383	all	
35-6	4384-4387	the	
35-7	4388-4399	distributed	
35-8	4400-4404	data	
35-9	4405-4409	into	
35-10	4410-4411	a	
35-11	4412-4418	single	
35-12	4419-4428	partition	
35-13	4428-4429	.	

#Text=This is a very slow operation that also significantly affects all downstream transformation and writes.
36-1	4430-4434	This	
36-2	4435-4437	is	
36-3	4438-4439	a	
36-4	4440-4444	very	
36-5	4445-4449	slow	
36-6	4450-4459	operation	
36-7	4460-4464	that	
36-8	4465-4469	also	
36-9	4470-4483	significantly	
36-10	4484-4491	affects	
36-11	4492-4495	all	
36-12	4496-4506	downstream	
36-13	4507-4521	transformation	
36-14	4522-4525	and	
36-15	4526-4532	writes	
36-16	4532-4533	.	

#Text=The Azure Data Factory highly recommends against using this option unless there is an explicit business reason to do so.
37-1	4534-4537	The	
37-2	4538-4543	Azure	
37-3	4544-4548	Data	
37-4	4549-4556	Factory	
37-5	4557-4563	highly	
37-6	4564-4574	recommends	
37-7	4575-4582	against	
37-8	4583-4588	using	
37-9	4589-4593	this	
37-10	4594-4600	option	
37-11	4601-4607	unless	
37-12	4608-4613	there	
37-13	4614-4616	is	
37-14	4617-4619	an	
37-15	4620-4628	explicit	
37-16	4629-4637	business	
37-17	4638-4644	reason	
37-18	4645-4647	to	
37-19	4648-4650	do	
37-20	4651-4653	so	
37-21	4653-4654	.	

#Text=The following partitioning options are available in every transformation:
#Text=Round robin
#Text=Round robin distributes data equally across partitions.
38-1	4655-4658	The	
38-2	4659-4668	following	
38-3	4669-4681	partitioning	
38-4	4682-4689	options	
38-5	4690-4693	are	
38-6	4694-4703	available	
38-7	4704-4706	in	
38-8	4707-4712	every	
38-9	4713-4727	transformation	
38-10	4727-4728	:	
38-11	4729-4734	Round	
38-12	4735-4740	robin	
38-13	4741-4746	Round	
38-14	4747-4752	robin	
38-15	4753-4764	distributes	
38-16	4765-4769	data	
38-17	4770-4777	equally	
38-18	4778-4784	across	
38-19	4785-4795	partitions	
38-20	4795-4796	.	

#Text=Use round-robin when you don't have good key candidates to implement a solid, smart partitioning strategy.
39-1	4797-4800	Use	
39-2	4801-4812	round-robin	
39-3	4813-4817	when	
39-4	4818-4821	you	
39-5	4822-4827	don't	
39-6	4828-4832	have	
39-7	4833-4837	good	
39-8	4838-4841	key	
39-9	4842-4852	candidates	
39-10	4853-4855	to	
39-11	4856-4865	implement	
39-12	4866-4867	a	
39-13	4868-4873	solid	
39-14	4873-4874	,	
39-15	4875-4880	smart	
39-16	4881-4893	partitioning	
39-17	4894-4902	strategy	
39-18	4902-4903	.	

#Text=You can set the number of physical partitions.
40-1	4904-4907	You	
40-2	4908-4911	can	
40-3	4912-4915	set	
40-4	4916-4919	the	
40-5	4920-4926	number	
40-6	4927-4929	of	
40-7	4930-4938	physical	
40-8	4939-4949	partitions	
40-9	4949-4950	.	

#Text=Hash
#Text=Azure Data Factory produces a hash of columns to produce uniform partitions such that rows with similar values fall in the same partition.
41-1	4951-4955	Hash	
41-2	4956-4961	Azure	
41-3	4962-4966	Data	
41-4	4967-4974	Factory	
41-5	4975-4983	produces	
41-6	4984-4985	a	
41-7	4986-4990	hash	
41-8	4991-4993	of	
41-9	4994-5001	columns	
41-10	5002-5004	to	
41-11	5005-5012	produce	
41-12	5013-5020	uniform	
41-13	5021-5031	partitions	
41-14	5032-5036	such	
41-15	5037-5041	that	
41-16	5042-5046	rows	
41-17	5047-5051	with	
41-18	5052-5059	similar	
41-19	5060-5066	values	
41-20	5067-5071	fall	
41-21	5072-5074	in	
41-22	5075-5078	the	
41-23	5079-5083	same	
41-24	5084-5093	partition	
41-25	5093-5094	.	

#Text=When you use the Hash option, test for possible partition skew.
42-1	5095-5099	When	
42-2	5100-5103	you	
42-3	5104-5107	use	
42-4	5108-5111	the	
42-5	5112-5116	Hash	
42-6	5117-5123	option	
42-7	5123-5124	,	
42-8	5125-5129	test	
42-9	5130-5133	for	
42-10	5134-5142	possible	
42-11	5143-5152	partition	
42-12	5153-5157	skew	
42-13	5157-5158	.	

#Text=You can set the number of physical partitions.
43-1	5159-5162	You	
43-2	5163-5166	can	
43-3	5167-5170	set	
43-4	5171-5174	the	
43-5	5175-5181	number	
43-6	5182-5184	of	
43-7	5185-5193	physical	
43-8	5194-5204	partitions	
43-9	5204-5205	.	

#Text=Dynamic range
#Text=The dynamic range uses Spark dynamic ranges based on the columns or expressions that you provide.
44-1	5206-5213	Dynamic	
44-2	5214-5219	range	
44-3	5220-5223	The	
44-4	5224-5231	dynamic	
44-5	5232-5237	range	
44-6	5238-5242	uses	
44-7	5243-5248	Spark	
44-8	5249-5256	dynamic	
44-9	5257-5263	ranges	
44-10	5264-5269	based	
44-11	5270-5272	on	
44-12	5273-5276	the	
44-13	5277-5284	columns	
44-14	5285-5287	or	
44-15	5288-5299	expressions	
44-16	5300-5304	that	
44-17	5305-5308	you	
44-18	5309-5316	provide	
44-19	5316-5317	.	

#Text=You can set the number of physical partitions.
45-1	5318-5321	You	
45-2	5322-5325	can	
45-3	5326-5329	set	
45-4	5330-5333	the	
45-5	5334-5340	number	
45-6	5341-5343	of	
45-7	5344-5352	physical	
45-8	5353-5363	partitions	
45-9	5363-5364	.	

#Text=Fixed range
#Text=Build an expression that provides a fixed range for values within your partitioned data columns.
46-1	5365-5370	Fixed	
46-2	5371-5376	range	
46-3	5377-5382	Build	
46-4	5383-5385	an	
46-5	5386-5396	expression	
46-6	5397-5401	that	
46-7	5402-5410	provides	
46-8	5411-5412	a	
46-9	5413-5418	fixed	
46-10	5419-5424	range	
46-11	5425-5428	for	
46-12	5429-5435	values	
46-13	5436-5442	within	
46-14	5443-5447	your	
46-15	5448-5459	partitioned	
46-16	5460-5464	data	
46-17	5465-5472	columns	
46-18	5472-5473	.	

#Text=To avoid partition skew, you should have a good understanding of your data before you use this option.
47-1	5474-5476	To	
47-2	5477-5482	avoid	
47-3	5483-5492	partition	
47-4	5493-5497	skew	
47-5	5497-5498	,	
47-6	5499-5502	you	
47-7	5503-5509	should	
47-8	5510-5514	have	
47-9	5515-5516	a	
47-10	5517-5521	good	
47-11	5522-5535	understanding	
47-12	5536-5538	of	
47-13	5539-5543	your	
47-14	5544-5548	data	
47-15	5549-5555	before	
47-16	5556-5559	you	
47-17	5560-5563	use	
47-18	5564-5568	this	
47-19	5569-5575	option	
47-20	5575-5576	.	

#Text=The values you enter for the expression are used as part of a partition function.
48-1	5577-5580	The	
48-2	5581-5587	values	
48-3	5588-5591	you	
48-4	5592-5597	enter	
48-5	5598-5601	for	
48-6	5602-5605	the	
48-7	5606-5616	expression	
48-8	5617-5620	are	
48-9	5621-5625	used	
48-10	5626-5628	as	
48-11	5629-5633	part	
48-12	5634-5636	of	
48-13	5637-5638	a	
48-14	5639-5648	partition	
48-15	5649-5657	function	
48-16	5657-5658	.	

#Text=You can set the number of physical partitions.
49-1	5659-5662	You	
49-2	5663-5666	can	
49-3	5667-5670	set	
49-4	5671-5674	the	
49-5	5675-5681	number	
49-6	5682-5684	of	
49-7	5685-5693	physical	
49-8	5694-5704	partitions	
49-9	5704-5705	.	

#Text=Key
#Text=If you have a good understanding of the cardinality of your data, key partitioning might be a good strategy.
50-1	5706-5709	Key	
50-2	5710-5712	If	
50-3	5713-5716	you	
50-4	5717-5721	have	
50-5	5722-5723	a	
50-6	5724-5728	good	
50-7	5729-5742	understanding	
50-8	5743-5745	of	
50-9	5746-5749	the	
50-10	5750-5761	cardinality	
50-11	5762-5764	of	
50-12	5765-5769	your	
50-13	5770-5774	data	
50-14	5774-5775	,	
50-15	5776-5779	key	
50-16	5780-5792	partitioning	
50-17	5793-5798	might	
50-18	5799-5801	be	
50-19	5802-5803	a	
50-20	5804-5808	good	
50-21	5809-5817	strategy	
50-22	5817-5818	.	

#Text=Key partitioning creates partitions for each unique value in your column.
51-1	5819-5822	Key	
51-2	5823-5835	partitioning	
51-3	5836-5843	creates	
51-4	5844-5854	partitions	
51-5	5855-5858	for	
51-6	5859-5863	each	
51-7	5864-5870	unique	
51-8	5871-5876	value	
51-9	5877-5879	in	
51-10	5880-5884	your	
51-11	5885-5891	column	
51-12	5891-5892	.	

#Text=You can't set the number of partitions because the number is based on unique values in the data.
52-1	5893-5896	You	
52-2	5897-5902	can't	
52-3	5903-5906	set	
52-4	5907-5910	the	
52-5	5911-5917	number	
52-6	5918-5920	of	
52-7	5921-5931	partitions	
52-8	5932-5939	because	
52-9	5940-5943	the	
52-10	5944-5950	number	
52-11	5951-5953	is	
52-12	5954-5959	based	
52-13	5960-5962	on	
52-14	5963-5969	unique	
52-15	5970-5976	values	
52-16	5977-5979	in	
52-17	5980-5983	the	
52-18	5984-5988	data	
52-19	5988-5989	.	

#Text=Tip
#Text=Manually setting the partitioning scheme reshuffles the data and can offset the benefits of the Spark optimizer.
53-1	5990-5993	Tip	
53-2	5994-6002	Manually	
53-3	6003-6010	setting	
53-4	6011-6014	the	
53-5	6015-6027	partitioning	
53-6	6028-6034	scheme	
53-7	6035-6045	reshuffles	
53-8	6046-6049	the	
53-9	6050-6054	data	
53-10	6055-6058	and	
53-11	6059-6062	can	
53-12	6063-6069	offset	
53-13	6070-6073	the	
53-14	6074-6082	benefits	
53-15	6083-6085	of	
53-16	6086-6089	the	
53-17	6090-6095	Spark	
53-18	6096-6105	optimizer	
53-19	6105-6106	.	

#Text=A best practice is to not manually set the partitioning unless you need to.
54-1	6107-6108	A	
54-2	6109-6113	best	
54-3	6114-6122	practice	
54-4	6123-6125	is	
54-5	6126-6128	to	
54-6	6129-6132	not	
54-7	6133-6141	manually	
54-8	6142-6145	set	
54-9	6146-6149	the	
54-10	6150-6162	partitioning	
54-11	6163-6169	unless	
54-12	6170-6173	you	
54-13	6174-6178	need	
54-14	6179-6181	to	
54-15	6181-6182	.	

#Text=Logging level
#Text=If you do not require every pipeline execution of your data flow activities to fully log all verbose telemetry logs, you can optionally set your logging level to "Basic" or "None".
55-1	6183-6190	Logging	
55-2	6191-6196	level	
55-3	6197-6199	If	
55-4	6200-6203	you	
55-5	6204-6206	do	
55-6	6207-6210	not	
55-7	6211-6218	require	
55-8	6219-6224	every	
55-9	6225-6233	pipeline	
55-10	6234-6243	execution	
55-11	6244-6246	of	
55-12	6247-6251	your	
55-13	6252-6256	data	
55-14	6257-6261	flow	
55-15	6262-6272	activities	
55-16	6273-6275	to	
55-17	6276-6281	fully	
55-18	6282-6285	log	
55-19	6286-6289	all	
55-20	6290-6297	verbose	
55-21	6298-6307	telemetry	
55-22	6308-6312	logs	
55-23	6312-6313	,	
55-24	6314-6317	you	
55-25	6318-6321	can	
55-26	6322-6332	optionally	
55-27	6333-6336	set	
55-28	6337-6341	your	
55-29	6342-6349	logging	
55-30	6350-6355	level	
55-31	6356-6358	to	
55-32	6359-6360	"	
55-33	6360-6365	Basic	
55-34	6365-6366	"	
55-35	6367-6369	or	
55-36	6370-6371	"	
55-37	6371-6375	None	
55-38	6375-6376	"	
55-39	6376-6377	.	

#Text=When executing your data flows in "Verbose" mode (default), you are requesting ADF to fully log activity at each individual partition level during your data transformation.
56-1	6378-6382	When	
56-2	6383-6392	executing	
56-3	6393-6397	your	
56-4	6398-6402	data	
56-5	6403-6408	flows	
56-6	6409-6411	in	
56-7	6412-6413	"	
56-8	6413-6420	Verbose	
56-9	6420-6421	"	
56-10	6422-6426	mode	
56-11	6427-6428	(	
56-12	6428-6435	default	
56-13	6435-6436	)	
56-14	6436-6437	,	
56-15	6438-6441	you	
56-16	6442-6445	are	
56-17	6446-6456	requesting	
56-18	6457-6460	ADF	
56-19	6461-6463	to	
56-20	6464-6469	fully	
56-21	6470-6473	log	
56-22	6474-6482	activity	
56-23	6483-6485	at	
56-24	6486-6490	each	
56-25	6491-6501	individual	
56-26	6502-6511	partition	
56-27	6512-6517	level	
56-28	6518-6524	during	
56-29	6525-6529	your	
56-30	6530-6534	data	
56-31	6535-6549	transformation	
56-32	6549-6550	.	

#Text=This can be an expensive operation, so only enabling verbose when troubleshooting can improve your overall data flow and pipeline performance.
57-1	6551-6555	This	
57-2	6556-6559	can	
57-3	6560-6562	be	
57-4	6563-6565	an	
57-5	6566-6575	expensive	
57-6	6576-6585	operation	
57-7	6585-6586	,	
57-8	6587-6589	so	
57-9	6590-6594	only	
57-10	6595-6603	enabling	
57-11	6604-6611	verbose	
57-12	6612-6616	when	
57-13	6617-6632	troubleshooting	
57-14	6633-6636	can	
57-15	6637-6644	improve	
57-16	6645-6649	your	
57-17	6650-6657	overall	
57-18	6658-6662	data	
57-19	6663-6667	flow	
57-20	6668-6671	and	
57-21	6672-6680	pipeline	
57-22	6681-6692	performance	
57-23	6692-6693	.	

#Text="Basic" mode will only log transformation durations while "None" will only provide a summary of durations.
58-1	6694-6695	"	
58-2	6695-6700	Basic	
58-3	6700-6701	"	
58-4	6702-6706	mode	
58-5	6707-6711	will	
58-6	6712-6716	only	
58-7	6717-6720	log	
58-8	6721-6735	transformation	
58-9	6736-6745	durations	
58-10	6746-6751	while	
58-11	6752-6753	"	
58-12	6753-6757	None	
58-13	6757-6758	"	
58-14	6759-6763	will	
58-15	6764-6768	only	
58-16	6769-6776	provide	
58-17	6777-6778	a	
58-18	6779-6786	summary	
58-19	6787-6789	of	
58-20	6790-6799	durations	
58-21	6799-6800	.	

#Text=Optimizing the Azure Integration Runtime
#Text=Data flows run on Spark clusters that are spun up at run-time.
59-1	6801-6811	Optimizing	
59-2	6812-6815	the	
59-3	6816-6821	Azure	
59-4	6822-6833	Integration	
59-5	6834-6841	Runtime	
59-6	6842-6846	Data	
59-7	6847-6852	flows	
59-8	6853-6856	run	
59-9	6857-6859	on	
59-10	6860-6865	Spark	
59-11	6866-6874	clusters	
59-12	6875-6879	that	
59-13	6880-6883	are	
59-14	6884-6888	spun	
59-15	6889-6891	up	
59-16	6892-6894	at	
59-17	6895-6903	run-time	
59-18	6903-6904	.	

#Text=The configuration for the cluster used is defined in the integration runtime (IR) of the activity.
60-1	6905-6908	The	
60-2	6909-6922	configuration	
60-3	6923-6926	for	
60-4	6927-6930	the	
60-5	6931-6938	cluster	
60-6	6939-6943	used	
60-7	6944-6946	is	
60-8	6947-6954	defined	
60-9	6955-6957	in	
60-10	6958-6961	the	
60-11	6962-6973	integration	
60-12	6974-6981	runtime	
60-13	6982-6983	(	
60-14	6983-6985	IR	
60-15	6985-6986	)	
60-16	6987-6989	of	
60-17	6990-6993	the	
60-18	6994-7002	activity	
60-19	7002-7003	.	

#Text=There are three performance considerations to make when defining your integration runtime: cluster type, cluster size, and time to live.
61-1	7004-7009	There	
61-2	7010-7013	are	
61-3	7014-7019	three	
61-4	7020-7031	performance	
61-5	7032-7046	considerations	
61-6	7047-7049	to	
61-7	7050-7054	make	
61-8	7055-7059	when	
61-9	7060-7068	defining	
61-10	7069-7073	your	
61-11	7074-7085	integration	
61-12	7086-7093	runtime	
61-13	7093-7094	:	
61-14	7095-7102	cluster	
61-15	7103-7107	type	
61-16	7107-7108	,	
61-17	7109-7116	cluster	
61-18	7117-7121	size	
61-19	7121-7122	,	
61-20	7123-7126	and	
61-21	7127-7131	time	
61-22	7132-7134	to	
61-23	7135-7139	live	
61-24	7139-7140	.	

#Text=For more information how to create an Integration Runtime, see Integration Runtime in Azure Data Factory.
62-1	7141-7144	For	
62-2	7145-7149	more	
62-3	7150-7161	information	
62-4	7162-7165	how	
62-5	7166-7168	to	
62-6	7169-7175	create	
62-7	7176-7178	an	
62-8	7179-7190	Integration	
62-9	7191-7198	Runtime	
62-10	7198-7199	,	
62-11	7200-7203	see	
62-12	7204-7215	Integration	
62-13	7216-7223	Runtime	
62-14	7224-7226	in	
62-15	7227-7232	Azure	
62-16	7233-7237	Data	
62-17	7238-7245	Factory	
62-18	7245-7246	.	

#Text=Cluster type
#Text=There are three available options for the type of Spark cluster spun up: general purpose, memory optimized, and compute optimized.
63-1	7247-7254	Cluster	
63-2	7255-7259	type	
63-3	7260-7265	There	
63-4	7266-7269	are	
63-5	7270-7275	three	
63-6	7276-7285	available	
63-7	7286-7293	options	
63-8	7294-7297	for	
63-9	7298-7301	the	
63-10	7302-7306	type	
63-11	7307-7309	of	
63-12	7310-7315	Spark	
63-13	7316-7323	cluster	
63-14	7324-7328	spun	
63-15	7329-7331	up	
63-16	7331-7332	:	
63-17	7333-7340	general	
63-18	7341-7348	purpose	
63-19	7348-7349	,	
63-20	7350-7356	memory	
63-21	7357-7366	optimized	
63-22	7366-7367	,	
63-23	7368-7371	and	
63-24	7372-7379	compute	
63-25	7380-7389	optimized	
63-26	7389-7390	.	

#Text=General purpose clusters are the default selection and will be ideal for most data flow workloads.
64-1	7391-7398	General	
64-2	7399-7406	purpose	
64-3	7407-7415	clusters	
64-4	7416-7419	are	
64-5	7420-7423	the	
64-6	7424-7431	default	
64-7	7432-7441	selection	
64-8	7442-7445	and	
64-9	7446-7450	will	
64-10	7451-7453	be	
64-11	7454-7459	ideal	
64-12	7460-7463	for	
64-13	7464-7468	most	
64-14	7469-7473	data	
64-15	7474-7478	flow	
64-16	7479-7488	workloads	
64-17	7488-7489	.	

#Text=These tend to be the best balance of performance and cost.
65-1	7490-7495	These	
65-2	7496-7500	tend	
65-3	7501-7503	to	
65-4	7504-7506	be	
65-5	7507-7510	the	
65-6	7511-7515	best	
65-7	7516-7523	balance	
65-8	7524-7526	of	
65-9	7527-7538	performance	
65-10	7539-7542	and	
65-11	7543-7547	cost	
65-12	7547-7548	.	

#Text=If your data flow has many joins and lookups, you may want to use a memory optimized cluster.
66-1	7549-7551	If	
66-2	7552-7556	your	
66-3	7557-7561	data	
66-4	7562-7566	flow	
66-5	7567-7570	has	
66-6	7571-7575	many	
66-7	7576-7581	joins	
66-8	7582-7585	and	
66-9	7586-7593	lookups	
66-10	7593-7594	,	
66-11	7595-7598	you	
66-12	7599-7602	may	
66-13	7603-7607	want	
66-14	7608-7610	to	
66-15	7611-7614	use	
66-16	7615-7616	a	
66-17	7617-7623	memory	
66-18	7624-7633	optimized	
66-19	7634-7641	cluster	
66-20	7641-7642	.	

#Text=Memory optimized clusters can store more data in memory and will minimize any out-of-memory errors you may get.
67-1	7643-7649	Memory	
67-2	7650-7659	optimized	
67-3	7660-7668	clusters	
67-4	7669-7672	can	
67-5	7673-7678	store	
67-6	7679-7683	more	
67-7	7684-7688	data	
67-8	7689-7691	in	
67-9	7692-7698	memory	
67-10	7699-7702	and	
67-11	7703-7707	will	
67-12	7708-7716	minimize	
67-13	7717-7720	any	
67-14	7721-7734	out-of-memory	
67-15	7735-7741	errors	
67-16	7742-7745	you	
67-17	7746-7749	may	
67-18	7750-7753	get	
67-19	7753-7754	.	

#Text=Memory optimized have the highest price-point per core, but also tend to result in more successful pipelines.
68-1	7755-7761	Memory	
68-2	7762-7771	optimized	
68-3	7772-7776	have	
68-4	7777-7780	the	
68-5	7781-7788	highest	
68-6	7789-7800	price-point	
68-7	7801-7804	per	
68-8	7805-7809	core	
68-9	7809-7810	,	
68-10	7811-7814	but	
68-11	7815-7819	also	
68-12	7820-7824	tend	
68-13	7825-7827	to	
68-14	7828-7834	result	
68-15	7835-7837	in	
68-16	7838-7842	more	
68-17	7843-7853	successful	
68-18	7854-7863	pipelines	
68-19	7863-7864	.	

#Text=If you experience any out of memory errors when executing data flows, switch to a memory optimized Azure IR configuration.
69-1	7865-7867	If	
69-2	7868-7871	you	
69-3	7872-7882	experience	
69-4	7883-7886	any	
69-5	7887-7890	out	
69-6	7891-7893	of	
69-7	7894-7900	memory	
69-8	7901-7907	errors	
69-9	7908-7912	when	
69-10	7913-7922	executing	
69-11	7923-7927	data	
69-12	7928-7933	flows	
69-13	7933-7934	,	
69-14	7935-7941	switch	
69-15	7942-7944	to	
69-16	7945-7946	a	
69-17	7947-7953	memory	
69-18	7954-7963	optimized	
69-19	7964-7969	Azure	
69-20	7970-7972	IR	
69-21	7973-7986	configuration	
69-22	7986-7987	.	

#Text=Compute optimized aren't ideal for ETL workflows and aren't recommended by the Azure Data Factory team for most production workloads.
70-1	7988-7995	Compute	
70-2	7996-8005	optimized	
70-3	8006-8012	aren't	
70-4	8013-8018	ideal	
70-5	8019-8022	for	
70-6	8023-8026	ETL	
70-7	8027-8036	workflows	
70-8	8037-8040	and	
70-9	8041-8047	aren't	
70-10	8048-8059	recommended	
70-11	8060-8062	by	
70-12	8063-8066	the	
70-13	8067-8072	Azure	
70-14	8073-8077	Data	
70-15	8078-8085	Factory	
70-16	8086-8090	team	
70-17	8091-8094	for	
70-18	8095-8099	most	
70-19	8100-8110	production	
70-20	8111-8120	workloads	
70-21	8120-8121	.	

#Text=For simpler, non-memory intensive data transformations such as filtering data or adding derived columns, compute-optimized clusters can be used at a cheaper price per core.
71-1	8122-8125	For	
71-2	8126-8133	simpler	
71-3	8133-8134	,	
71-4	8135-8145	non-memory	
71-5	8146-8155	intensive	
71-6	8156-8160	data	
71-7	8161-8176	transformations	
71-8	8177-8181	such	
71-9	8182-8184	as	
71-10	8185-8194	filtering	
71-11	8195-8199	data	
71-12	8200-8202	or	
71-13	8203-8209	adding	
71-14	8210-8217	derived	
71-15	8218-8225	columns	
71-16	8225-8226	,	
71-17	8227-8244	compute-optimized	
71-18	8245-8253	clusters	
71-19	8254-8257	can	
71-20	8258-8260	be	
71-21	8261-8265	used	
71-22	8266-8268	at	
71-23	8269-8270	a	
71-24	8271-8278	cheaper	
71-25	8279-8284	price	
71-26	8285-8288	per	
71-27	8289-8293	core	
71-28	8293-8294	.	

#Text=Cluster size
#Text=Data flows distribute the data processing over different nodes in a Spark cluster to perform operations in parallel.
72-1	8295-8302	Cluster	
72-2	8303-8307	size	
72-3	8308-8312	Data	
72-4	8313-8318	flows	
72-5	8319-8329	distribute	
72-6	8330-8333	the	
72-7	8334-8338	data	
72-8	8339-8349	processing	
72-9	8350-8354	over	
72-10	8355-8364	different	
72-11	8365-8370	nodes	
72-12	8371-8373	in	
72-13	8374-8375	a	
72-14	8376-8381	Spark	
72-15	8382-8389	cluster	
72-16	8390-8392	to	
72-17	8393-8400	perform	
72-18	8401-8411	operations	
72-19	8412-8414	in	
72-20	8415-8423	parallel	
72-21	8423-8424	.	

#Text=A Spark cluster with more cores increases the number of nodes in the compute environment.
73-1	8425-8426	A	
73-2	8427-8432	Spark	
73-3	8433-8440	cluster	
73-4	8441-8445	with	
73-5	8446-8450	more	
73-6	8451-8456	cores	
73-7	8457-8466	increases	
73-8	8467-8470	the	
73-9	8471-8477	number	
73-10	8478-8480	of	
73-11	8481-8486	nodes	
73-12	8487-8489	in	
73-13	8490-8493	the	
73-14	8494-8501	compute	
73-15	8502-8513	environment	
73-16	8513-8514	.	

#Text=More nodes increase the processing power of the data flow.
74-1	8515-8519	More	
74-2	8520-8525	nodes	
74-3	8526-8534	increase	
74-4	8535-8538	the	
74-5	8539-8549	processing	
74-6	8550-8555	power	
74-7	8556-8558	of	
74-8	8559-8562	the	
74-9	8563-8567	data	
74-10	8568-8572	flow	
74-11	8572-8573	.	

#Text=Increasing the size of the cluster is often an easy way to reduce the processing time.
75-1	8574-8584	Increasing	
75-2	8585-8588	the	
75-3	8589-8593	size	
75-4	8594-8596	of	
75-5	8597-8600	the	
75-6	8601-8608	cluster	
75-7	8609-8611	is	
75-8	8612-8617	often	
75-9	8618-8620	an	
75-10	8621-8625	easy	
75-11	8626-8629	way	
75-12	8630-8632	to	
75-13	8633-8639	reduce	
75-14	8640-8643	the	
75-15	8644-8654	processing	
75-16	8655-8659	time	
75-17	8659-8660	.	

#Text=The default cluster size is four driver nodes and four worker nodes.
76-1	8661-8664	The	
76-2	8665-8672	default	
76-3	8673-8680	cluster	
76-4	8681-8685	size	
76-5	8686-8688	is	
76-6	8689-8693	four	
76-7	8694-8700	driver	
76-8	8701-8706	nodes	
76-9	8707-8710	and	
76-10	8711-8715	four	
76-11	8716-8722	worker	
76-12	8723-8728	nodes	
76-13	8728-8729	.	

#Text=As you process more data, larger clusters are recommended.
77-1	8730-8732	As	
77-2	8733-8736	you	
77-3	8737-8744	process	
77-4	8745-8749	more	
77-5	8750-8754	data	
77-6	8754-8755	,	
77-7	8756-8762	larger	
77-8	8763-8771	clusters	
77-9	8772-8775	are	
77-10	8776-8787	recommended	
77-11	8787-8788	.	

#Text=Below are the possible sizing options:
#Text=Worker cores
#Text=Driver cores
#Text=Total cores
#Text=Notes
#Text=Not available for compute optimized
#Text=128
#Text=144
#Text=256
#Text=272
#Text=Data flows are priced at vcore-hrs meaning that both cluster size and execution-time factor into this.
78-1	8789-8794	Below	
78-2	8795-8798	are	
78-3	8799-8802	the	
78-4	8803-8811	possible	
78-5	8812-8818	sizing	
78-6	8819-8826	options	
78-7	8826-8827	:	
78-8	8828-8834	Worker	
78-9	8835-8840	cores	
78-10	8841-8847	Driver	
78-11	8848-8853	cores	
78-12	8854-8859	Total	
78-13	8860-8865	cores	
78-14	8866-8871	Notes	
78-15	8872-8875	Not	
78-16	8876-8885	available	
78-17	8886-8889	for	
78-18	8890-8897	compute	
78-19	8898-8907	optimized	
78-20	8908-8911	128	
78-21	8912-8915	144	
78-22	8916-8919	256	
78-23	8920-8923	272	
78-24	8924-8928	Data	
78-25	8929-8934	flows	
78-26	8935-8938	are	
78-27	8939-8945	priced	
78-28	8946-8948	at	
78-29	8949-8958	vcore-hrs	
78-30	8959-8966	meaning	
78-31	8967-8971	that	
78-32	8972-8976	both	
78-33	8977-8984	cluster	
78-34	8985-8989	size	
78-35	8990-8993	and	
78-36	8994-9008	execution-time	
78-37	9009-9015	factor	
78-38	9016-9020	into	
78-39	9021-9025	this	
78-40	9025-9026	.	

#Text=As you scale up, your cluster cost per minute will increase, but your overall time will decrease.
79-1	9027-9029	As	
79-2	9030-9033	you	
79-3	9034-9039	scale	
79-4	9040-9042	up	
79-5	9042-9043	,	
79-6	9044-9048	your	
79-7	9049-9056	cluster	
79-8	9057-9061	cost	
79-9	9062-9065	per	
79-10	9066-9072	minute	
79-11	9073-9077	will	
79-12	9078-9086	increase	
79-13	9086-9087	,	
79-14	9088-9091	but	
79-15	9092-9096	your	
79-16	9097-9104	overall	
79-17	9105-9109	time	
79-18	9110-9114	will	
79-19	9115-9123	decrease	
79-20	9123-9124	.	

#Text=Tip
#Text=There is a ceiling on how much the size of a cluster affects the performance of a data flow.
80-1	9125-9128	Tip	
80-2	9129-9134	There	
80-3	9135-9137	is	
80-4	9138-9139	a	
80-5	9140-9147	ceiling	
80-6	9148-9150	on	
80-7	9151-9154	how	
80-8	9155-9159	much	
80-9	9160-9163	the	
80-10	9164-9168	size	
80-11	9169-9171	of	
80-12	9172-9173	a	
80-13	9174-9181	cluster	
80-14	9182-9189	affects	
80-15	9190-9193	the	
80-16	9194-9205	performance	
80-17	9206-9208	of	
80-18	9209-9210	a	
80-19	9211-9215	data	
80-20	9216-9220	flow	
80-21	9220-9221	.	

#Text=Depending on the size of your data, there is a point where increasing the size of a cluster will stop improving performance.
81-1	9222-9231	Depending	
81-2	9232-9234	on	
81-3	9235-9238	the	
81-4	9239-9243	size	
81-5	9244-9246	of	
81-6	9247-9251	your	
81-7	9252-9256	data	
81-8	9256-9257	,	
81-9	9258-9263	there	
81-10	9264-9266	is	
81-11	9267-9268	a	
81-12	9269-9274	point	
81-13	9275-9280	where	
81-14	9281-9291	increasing	
81-15	9292-9295	the	
81-16	9296-9300	size	
81-17	9301-9303	of	
81-18	9304-9305	a	
81-19	9306-9313	cluster	
81-20	9314-9318	will	
81-21	9319-9323	stop	
81-22	9324-9333	improving	
81-23	9334-9345	performance	
81-24	9345-9346	.	

#Text=For example, If you have more nodes than partitions of data, adding additional nodes won't help.
82-1	9347-9350	For	
82-2	9351-9358	example	
82-3	9358-9359	,	
82-4	9360-9362	If	
82-5	9363-9366	you	
82-6	9367-9371	have	
82-7	9372-9376	more	
82-8	9377-9382	nodes	
82-9	9383-9387	than	
82-10	9388-9398	partitions	
82-11	9399-9401	of	
82-12	9402-9406	data	
82-13	9406-9407	,	
82-14	9408-9414	adding	
82-15	9415-9425	additional	
82-16	9426-9431	nodes	
82-17	9432-9437	won't	
82-18	9438-9442	help	
82-19	9442-9443	.	

#Text=A best practice is to start small and scale up to meet your performance needs.
83-1	9444-9445	A	
83-2	9446-9450	best	
83-3	9451-9459	practice	
83-4	9460-9462	is	
83-5	9463-9465	to	
83-6	9466-9471	start	
83-7	9472-9477	small	
83-8	9478-9481	and	
83-9	9482-9487	scale	
83-10	9488-9490	up	
83-11	9491-9493	to	
83-12	9494-9498	meet	
83-13	9499-9503	your	
83-14	9504-9515	performance	
83-15	9516-9521	needs	
83-16	9521-9522	.	

#Text=Time to live
#Text=By default, every data flow activity spins up a new cluster based upon the IR configuration.
84-1	9523-9527	Time	
84-2	9528-9530	to	
84-3	9531-9535	live	
84-4	9536-9538	By	
84-5	9539-9546	default	
84-6	9546-9547	,	
84-7	9548-9553	every	
84-8	9554-9558	data	
84-9	9559-9563	flow	
84-10	9564-9572	activity	
84-11	9573-9578	spins	
84-12	9579-9581	up	
84-13	9582-9583	a	
84-14	9584-9587	new	
84-15	9588-9595	cluster	
84-16	9596-9601	based	
84-17	9602-9606	upon	
84-18	9607-9610	the	
84-19	9611-9613	IR	
84-20	9614-9627	configuration	
84-21	9627-9628	.	

#Text=Cluster start-up time takes a few minutes and data processing can't start until it is complete.
85-1	9629-9636	Cluster	
85-2	9637-9645	start-up	
85-3	9646-9650	time	
85-4	9651-9656	takes	
85-5	9657-9658	a	
85-6	9659-9662	few	
85-7	9663-9670	minutes	
85-8	9671-9674	and	
85-9	9675-9679	data	
85-10	9680-9690	processing	
85-11	9691-9696	can't	
85-12	9697-9702	start	
85-13	9703-9708	until	
85-14	9709-9711	it	
85-15	9712-9714	is	
85-16	9715-9723	complete	
85-17	9723-9724	.	

#Text=If your pipelines contain multiple sequential data flows, you can enable a time to live (TTL) value.
86-1	9725-9727	If	
86-2	9728-9732	your	
86-3	9733-9742	pipelines	
86-4	9743-9750	contain	
86-5	9751-9759	multiple	
86-6	9760-9770	sequential	
86-7	9771-9775	data	
86-8	9776-9781	flows	
86-9	9781-9782	,	
86-10	9783-9786	you	
86-11	9787-9790	can	
86-12	9791-9797	enable	
86-13	9798-9799	a	
86-14	9800-9804	time	
86-15	9805-9807	to	
86-16	9808-9812	live	
86-17	9813-9814	(	
86-18	9814-9817	TTL	
86-19	9817-9818	)	
86-20	9819-9824	value	
86-21	9824-9825	.	

#Text=Specifying a time to live value keeps a cluster alive for a certain period of time after its execution completes.
87-1	9826-9836	Specifying	
87-2	9837-9838	a	
87-3	9839-9843	time	
87-4	9844-9846	to	
87-5	9847-9851	live	
87-6	9852-9857	value	
87-7	9858-9863	keeps	
87-8	9864-9865	a	
87-9	9866-9873	cluster	
87-10	9874-9879	alive	
87-11	9880-9883	for	
87-12	9884-9885	a	
87-13	9886-9893	certain	
87-14	9894-9900	period	
87-15	9901-9903	of	
87-16	9904-9908	time	
87-17	9909-9914	after	
87-18	9915-9918	its	
87-19	9919-9928	execution	
87-20	9929-9938	completes	
87-21	9938-9939	.	

#Text=If a new job starts using the IR during the TTL time, it will reuse the existing cluster and start up time will greatly reduced.
88-1	9940-9942	If	
88-2	9943-9944	a	
88-3	9945-9948	new	
88-4	9949-9952	job	
88-5	9953-9959	starts	
88-6	9960-9965	using	
88-7	9966-9969	the	
88-8	9970-9972	IR	
88-9	9973-9979	during	
88-10	9980-9983	the	
88-11	9984-9987	TTL	
88-12	9988-9992	time	
88-13	9992-9993	,	
88-14	9994-9996	it	
88-15	9997-10001	will	
88-16	10002-10007	reuse	
88-17	10008-10011	the	
88-18	10012-10020	existing	
88-19	10021-10028	cluster	
88-20	10029-10032	and	
88-21	10033-10038	start	
88-22	10039-10041	up	
88-23	10042-10046	time	
88-24	10047-10051	will	
88-25	10052-10059	greatly	
88-26	10060-10067	reduced	
88-27	10067-10068	.	

#Text=After the second job completes, the cluster will again stay alive for the TTL time.
89-1	10069-10074	After	
89-2	10075-10078	the	
89-3	10079-10085	second	
89-4	10086-10089	job	
89-5	10090-10099	completes	
89-6	10099-10100	,	
89-7	10101-10104	the	
89-8	10105-10112	cluster	
89-9	10113-10117	will	
89-10	10118-10123	again	
89-11	10124-10128	stay	
89-12	10129-10134	alive	
89-13	10135-10138	for	
89-14	10139-10142	the	
89-15	10143-10146	TTL	
89-16	10147-10151	time	
89-17	10151-10152	.	

#Text=Only one job can run on a single cluster at a time.
90-1	10153-10157	Only	
90-2	10158-10161	one	
90-3	10162-10165	job	
90-4	10166-10169	can	
90-5	10170-10173	run	
90-6	10174-10176	on	
90-7	10177-10178	a	
90-8	10179-10185	single	
90-9	10186-10193	cluster	
90-10	10194-10196	at	
90-11	10197-10198	a	
90-12	10199-10203	time	
90-13	10203-10204	.	

#Text=If there is an available cluster, but two data flows start, only one will use the live cluster.
91-1	10205-10207	If	
91-2	10208-10213	there	
91-3	10214-10216	is	
91-4	10217-10219	an	
91-5	10220-10229	available	
91-6	10230-10237	cluster	
91-7	10237-10238	,	
91-8	10239-10242	but	
91-9	10243-10246	two	
91-10	10247-10251	data	
91-11	10252-10257	flows	
91-12	10258-10263	start	
91-13	10263-10264	,	
91-14	10265-10269	only	
91-15	10270-10273	one	
91-16	10274-10278	will	
91-17	10279-10282	use	
91-18	10283-10286	the	
91-19	10287-10291	live	
91-20	10292-10299	cluster	
91-21	10299-10300	.	

#Text=The second job will spin up its own isolated cluster.
92-1	10301-10304	The	
92-2	10305-10311	second	
92-3	10312-10315	job	
92-4	10316-10320	will	
92-5	10321-10325	spin	
92-6	10326-10328	up	
92-7	10329-10332	its	
92-8	10333-10336	own	
92-9	10337-10345	isolated	
92-10	10346-10353	cluster	
92-11	10353-10354	.	

#Text=If most of your data flows execute in parallel, it is not recommended that you enable TTL.
93-1	10355-10357	If	
93-2	10358-10362	most	
93-3	10363-10365	of	
93-4	10366-10370	your	
93-5	10371-10375	data	
93-6	10376-10381	flows	
93-7	10382-10389	execute	
93-8	10390-10392	in	
93-9	10393-10401	parallel	
93-10	10401-10402	,	
93-11	10403-10405	it	
93-12	10406-10408	is	
93-13	10409-10412	not	
93-14	10413-10424	recommended	
93-15	10425-10429	that	
93-16	10430-10433	you	
93-17	10434-10440	enable	
93-18	10441-10444	TTL	
93-19	10444-10445	.	

#Text=Note
#Text=Time to live is not available when using the auto-resolve integration runtime
#Text=Optimizing sources
#Text=For every source except Azure SQL Database, it is recommended that you keep Use current partitioning as the selected value.
94-1	10446-10450	Note	
94-2	10451-10455	Time	
94-3	10456-10458	to	
94-4	10459-10463	live	
94-5	10464-10466	is	
94-6	10467-10470	not	
94-7	10471-10480	available	
94-8	10481-10485	when	
94-9	10486-10491	using	
94-10	10492-10495	the	
94-11	10496-10508	auto-resolve	
94-12	10509-10520	integration	
94-13	10521-10528	runtime	
94-14	10529-10539	Optimizing	
94-15	10540-10547	sources	
94-16	10548-10551	For	
94-17	10552-10557	every	
94-18	10558-10564	source	
94-19	10565-10571	except	
94-20	10572-10577	Azure	
94-21	10578-10581	SQL	
94-22	10582-10590	Database	
94-23	10590-10591	,	
94-24	10592-10594	it	
94-25	10595-10597	is	
94-26	10598-10609	recommended	
94-27	10610-10614	that	
94-28	10615-10618	you	
94-29	10619-10623	keep	
94-30	10624-10627	Use	
94-31	10628-10635	current	
94-32	10636-10648	partitioning	
94-33	10649-10651	as	
94-34	10652-10655	the	
94-35	10656-10664	selected	
94-36	10665-10670	value	
94-37	10670-10671	.	

#Text=When reading from all other source systems, data flows automatically partitions data evenly based upon the size of the data.
95-1	10672-10676	When	
95-2	10677-10684	reading	
95-3	10685-10689	from	
95-4	10690-10693	all	
95-5	10694-10699	other	
95-6	10700-10706	source	
95-7	10707-10714	systems	
95-8	10714-10715	,	
95-9	10716-10720	data	
95-10	10721-10726	flows	
95-11	10727-10740	automatically	
95-12	10741-10751	partitions	
95-13	10752-10756	data	
95-14	10757-10763	evenly	
95-15	10764-10769	based	
95-16	10770-10774	upon	
95-17	10775-10778	the	
95-18	10779-10783	size	
95-19	10784-10786	of	
95-20	10787-10790	the	
95-21	10791-10795	data	
95-22	10795-10796	.	

#Text=A new partition is created for about every 128 MB of data.
96-1	10797-10798	A	
96-2	10799-10802	new	
96-3	10803-10812	partition	
96-4	10813-10815	is	
96-5	10816-10823	created	
96-6	10824-10827	for	
96-7	10828-10833	about	
96-8	10834-10839	every	
96-9	10840-10843	128	
96-10	10844-10846	MB	
96-11	10847-10849	of	
96-12	10850-10854	data	
96-13	10854-10855	.	

#Text=As your data size increases, the number of partitions increase.
97-1	10856-10858	As	
97-2	10859-10863	your	
97-3	10864-10868	data	
97-4	10869-10873	size	
97-5	10874-10883	increases	
97-6	10883-10884	,	
97-7	10885-10888	the	
97-8	10889-10895	number	
97-9	10896-10898	of	
97-10	10899-10909	partitions	
97-11	10910-10918	increase	
97-12	10918-10919	.	

#Text=Any custom partitioning happens after Spark reads in the data and will negatively impact your data flow performance.
98-1	10920-10923	Any	
98-2	10924-10930	custom	
98-3	10931-10943	partitioning	
98-4	10944-10951	happens	
98-5	10952-10957	after	
98-6	10958-10963	Spark	
98-7	10964-10969	reads	
98-8	10970-10972	in	
98-9	10973-10976	the	
98-10	10977-10981	data	
98-11	10982-10985	and	
98-12	10986-10990	will	
98-13	10991-11001	negatively	
98-14	11002-11008	impact	
98-15	11009-11013	your	
98-16	11014-11018	data	
98-17	11019-11023	flow	
98-18	11024-11035	performance	
98-19	11035-11036	.	

#Text=As the data is evenly partitioned on read, this is not recommended.
99-1	11037-11039	As	
99-2	11040-11043	the	
99-3	11044-11048	data	
99-4	11049-11051	is	
99-5	11052-11058	evenly	
99-6	11059-11070	partitioned	
99-7	11071-11073	on	
99-8	11074-11078	read	
99-9	11078-11079	,	
99-10	11080-11084	this	
99-11	11085-11087	is	
99-12	11088-11091	not	
99-13	11092-11103	recommended	
99-14	11103-11104	.	

#Text=Note
#Text=Read speeds can be limited by the throughput of your source system.
100-1	11105-11109	Note	
100-2	11110-11114	Read	
100-3	11115-11121	speeds	
100-4	11122-11125	can	
100-5	11126-11128	be	
100-6	11129-11136	limited	
100-7	11137-11139	by	
100-8	11140-11143	the	
100-9	11144-11154	throughput	
100-10	11155-11157	of	
100-11	11158-11162	your	
100-12	11163-11169	source	
100-13	11170-11176	system	
100-14	11176-11177	.	

#Text=Azure SQL Database sources
#Text=Azure SQL Database has a unique partitioning option called 'Source' partitioning.
101-1	11178-11183	Azure	
101-2	11184-11187	SQL	
101-3	11188-11196	Database	
101-4	11197-11204	sources	
101-5	11205-11210	Azure	
101-6	11211-11214	SQL	
101-7	11215-11223	Database	
101-8	11224-11227	has	
101-9	11228-11229	a	
101-10	11230-11236	unique	
101-11	11237-11249	partitioning	
101-12	11250-11256	option	
101-13	11257-11263	called	
101-14	11264-11265	'	
101-15	11265-11271	Source	
101-16	11271-11272	'	
101-17	11273-11285	partitioning	
101-18	11285-11286	.	

#Text=Enabling source partitioning can improve your read times from Azure SQL DB by enabling parallel connections on the source system.
102-1	11287-11295	Enabling	
102-2	11296-11302	source	
102-3	11303-11315	partitioning	
102-4	11316-11319	can	
102-5	11320-11327	improve	
102-6	11328-11332	your	
102-7	11333-11337	read	
102-8	11338-11343	times	
102-9	11344-11348	from	
102-10	11349-11354	Azure	
102-11	11355-11358	SQL	
102-12	11359-11361	DB	
102-13	11362-11364	by	
102-14	11365-11373	enabling	
102-15	11374-11382	parallel	
102-16	11383-11394	connections	
102-17	11395-11397	on	
102-18	11398-11401	the	
102-19	11402-11408	source	
102-20	11409-11415	system	
102-21	11415-11416	.	

#Text=Specify the number of partitions and how to partition your data.
103-1	11417-11424	Specify	
103-2	11425-11428	the	
103-3	11429-11435	number	
103-4	11436-11438	of	
103-5	11439-11449	partitions	
103-6	11450-11453	and	
103-7	11454-11457	how	
103-8	11458-11460	to	
103-9	11461-11470	partition	
103-10	11471-11475	your	
103-11	11476-11480	data	
103-12	11480-11481	.	

#Text=Use a partition column with high cardinality.
104-1	11482-11485	Use	
104-2	11486-11487	a	
104-3	11488-11497	partition	
104-4	11498-11504	column	
104-5	11505-11509	with	
104-6	11510-11514	high	
104-7	11515-11526	cardinality	
104-8	11526-11527	.	

#Text=You can also enter a query that matches the partitioning scheme of your source table.
105-1	11528-11531	You	
105-2	11532-11535	can	
105-3	11536-11540	also	
105-4	11541-11546	enter	
105-5	11547-11548	a	
105-6	11549-11554	query	
105-7	11555-11559	that	
105-8	11560-11567	matches	
105-9	11568-11571	the	
105-10	11572-11584	partitioning	
105-11	11585-11591	scheme	
105-12	11592-11594	of	
105-13	11595-11599	your	
105-14	11600-11606	source	
105-15	11607-11612	table	
105-16	11612-11613	.	

#Text=Tip
#Text=For source partitioning, the I/O of the SQL Server is the bottleneck.
106-1	11614-11617	Tip	
106-2	11618-11621	For	
106-3	11622-11628	source	
106-4	11629-11641	partitioning	
106-5	11641-11642	,	
106-6	11643-11646	the	
106-7	11647-11648	I	
106-8	11648-11649	/	
106-9	11649-11650	O	
106-10	11651-11653	of	
106-11	11654-11657	the	
106-12	11658-11661	SQL	
106-13	11662-11668	Server	
106-14	11669-11671	is	
106-15	11672-11675	the	
106-16	11676-11686	bottleneck	
106-17	11686-11687	.	

#Text=Adding too many partitions may saturate your source database.
107-1	11688-11694	Adding	
107-2	11695-11698	too	
107-3	11699-11703	many	
107-4	11704-11714	partitions	
107-5	11715-11718	may	
107-6	11719-11727	saturate	
107-7	11728-11732	your	
107-8	11733-11739	source	
107-9	11740-11748	database	
107-10	11748-11749	.	

#Text=Generally four or five partitions is ideal when using this option.
108-1	11750-11759	Generally	
108-2	11760-11764	four	
108-3	11765-11767	or	
108-4	11768-11772	five	
108-5	11773-11783	partitions	
108-6	11784-11786	is	
108-7	11787-11792	ideal	
108-8	11793-11797	when	
108-9	11798-11803	using	
108-10	11804-11808	this	
108-11	11809-11815	option	
108-12	11815-11816	.	

#Text=Isolation level
#Text=The isolation level of the read on an Azure SQL source system has an impact on performance.
109-1	11817-11826	Isolation	
109-2	11827-11832	level	
109-3	11833-11836	The	
109-4	11837-11846	isolation	
109-5	11847-11852	level	
109-6	11853-11855	of	
109-7	11856-11859	the	
109-8	11860-11864	read	
109-9	11865-11867	on	
109-10	11868-11870	an	
109-11	11871-11876	Azure	
109-12	11877-11880	SQL	
109-13	11881-11887	source	
109-14	11888-11894	system	
109-15	11895-11898	has	
109-16	11899-11901	an	
109-17	11902-11908	impact	
109-18	11909-11911	on	
109-19	11912-11923	performance	
109-20	11923-11924	.	

#Text=Choosing 'Read uncommitted' will provide the fastest performance and prevent any database locks.
110-1	11925-11933	Choosing	
110-2	11934-11935	'	
110-3	11935-11939	Read	
110-4	11940-11951	uncommitted	
110-5	11951-11952	'	
110-6	11953-11957	will	
110-7	11958-11965	provide	
110-8	11966-11969	the	
110-9	11970-11977	fastest	
110-10	11978-11989	performance	
110-11	11990-11993	and	
110-12	11994-12001	prevent	
110-13	12002-12005	any	
110-14	12006-12014	database	
110-15	12015-12020	locks	
110-16	12020-12021	.	

#Text=To learn more about SQL Isolation levels, please see Understanding isolation levels.
111-1	12022-12024	To	
111-2	12025-12030	learn	
111-3	12031-12035	more	
111-4	12036-12041	about	
111-5	12042-12045	SQL	
111-6	12046-12055	Isolation	
111-7	12056-12062	levels	
111-8	12062-12063	,	
111-9	12064-12070	please	
111-10	12071-12074	see	
111-11	12075-12088	Understanding	
111-12	12089-12098	isolation	
111-13	12099-12105	levels	
111-14	12105-12106	.	

#Text=Read using query
#Text=You can read from Azure SQL Database using a table or a SQL query.
112-1	12107-12111	Read	
112-2	12112-12117	using	
112-3	12118-12123	query	
112-4	12124-12127	You	
112-5	12128-12131	can	
112-6	12132-12136	read	
112-7	12137-12141	from	
112-8	12142-12147	Azure	
112-9	12148-12151	SQL	
112-10	12152-12160	Database	
112-11	12161-12166	using	
112-12	12167-12168	a	
112-13	12169-12174	table	
112-14	12175-12177	or	
112-15	12178-12179	a	
112-16	12180-12183	SQL	
112-17	12184-12189	query	
112-18	12189-12190	.	

#Text=If you are executing a SQL query, the query must complete before transformation can start.
113-1	12191-12193	If	
113-2	12194-12197	you	
113-3	12198-12201	are	
113-4	12202-12211	executing	
113-5	12212-12213	a	
113-6	12214-12217	SQL	
113-7	12218-12223	query	
113-8	12223-12224	,	
113-9	12225-12228	the	
113-10	12229-12234	query	
113-11	12235-12239	must	
113-12	12240-12248	complete	
113-13	12249-12255	before	
113-14	12256-12270	transformation	
113-15	12271-12274	can	
113-16	12275-12280	start	
113-17	12280-12281	.	

#Text=SQL Queries can be useful to push down operations that may execute faster and reduce the amount of data read from a SQL Server such as SELECT, WHERE, and JOIN statements.
114-1	12282-12285	SQL	
114-2	12286-12293	Queries	
114-3	12294-12297	can	
114-4	12298-12300	be	
114-5	12301-12307	useful	
114-6	12308-12310	to	
114-7	12311-12315	push	
114-8	12316-12320	down	
114-9	12321-12331	operations	
114-10	12332-12336	that	
114-11	12337-12340	may	
114-12	12341-12348	execute	
114-13	12349-12355	faster	
114-14	12356-12359	and	
114-15	12360-12366	reduce	
114-16	12367-12370	the	
114-17	12371-12377	amount	
114-18	12378-12380	of	
114-19	12381-12385	data	
114-20	12386-12390	read	
114-21	12391-12395	from	
114-22	12396-12397	a	
114-23	12398-12401	SQL	
114-24	12402-12408	Server	
114-25	12409-12413	such	
114-26	12414-12416	as	
114-27	12417-12423	SELECT	
114-28	12423-12424	,	
114-29	12425-12430	WHERE	
114-30	12430-12431	,	
114-31	12432-12435	and	
114-32	12436-12440	JOIN	
114-33	12441-12451	statements	
114-34	12451-12452	.	

#Text=When pushing down operations, you lose the ability to track lineage and performance of the transformations before the data comes into the data flow.
115-1	12453-12457	When	
115-2	12458-12465	pushing	
115-3	12466-12470	down	
115-4	12471-12481	operations	
115-5	12481-12482	,	
115-6	12483-12486	you	
115-7	12487-12491	lose	
115-8	12492-12495	the	
115-9	12496-12503	ability	
115-10	12504-12506	to	
115-11	12507-12512	track	
115-12	12513-12520	lineage	
115-13	12521-12524	and	
115-14	12525-12536	performance	
115-15	12537-12539	of	
115-16	12540-12543	the	
115-17	12544-12559	transformations	
115-18	12560-12566	before	
115-19	12567-12570	the	
115-20	12571-12575	data	
115-21	12576-12581	comes	
115-22	12582-12586	into	
115-23	12587-12590	the	
115-24	12591-12595	data	
115-25	12596-12600	flow	
115-26	12600-12601	.	

#Text=Azure Synapse Analytics sources
#Text=When using Azure Synapse Analytics, a setting called Enable staging exists in the source options.
116-1	12602-12607	Azure	
116-2	12608-12615	Synapse	
116-3	12616-12625	Analytics	
116-4	12626-12633	sources	
116-5	12634-12638	When	
116-6	12639-12644	using	
116-7	12645-12650	Azure	
116-8	12651-12658	Synapse	
116-9	12659-12668	Analytics	
116-10	12668-12669	,	
116-11	12670-12671	a	
116-12	12672-12679	setting	
116-13	12680-12686	called	
116-14	12687-12693	Enable	
116-15	12694-12701	staging	
116-16	12702-12708	exists	
116-17	12709-12711	in	
116-18	12712-12715	the	
116-19	12716-12722	source	
116-20	12723-12730	options	
116-21	12730-12731	.	

#Text=This allows ADF to read from Synapse using Staging, which greatly improves read performance.
117-1	12732-12736	This	
117-2	12737-12743	allows	
117-3	12744-12747	ADF	
117-4	12748-12750	to	
117-5	12751-12755	read	
117-6	12756-12760	from	
117-7	12761-12768	Synapse	
117-8	12769-12774	using	
117-9	12775-12782	Staging	
117-10	12782-12783	,	
117-11	12784-12789	which	
117-12	12790-12797	greatly	
117-13	12798-12806	improves	
117-14	12807-12811	read	
117-15	12812-12823	performance	
117-16	12823-12824	.	

#Text=Enabling Staging requires you to specify an Azure Blob Storage or Azure Data Lake Storage gen2 staging location in the data flow activity settings.
118-1	12825-12833	Enabling	
118-2	12834-12841	Staging	
118-3	12842-12850	requires	
118-4	12851-12854	you	
118-5	12855-12857	to	
118-6	12858-12865	specify	
118-7	12866-12868	an	
118-8	12869-12874	Azure	
118-9	12875-12879	Blob	
118-10	12880-12887	Storage	
118-11	12888-12890	or	
118-12	12891-12896	Azure	
118-13	12897-12901	Data	
118-14	12902-12906	Lake	
118-15	12907-12914	Storage	
118-16	12915-12919	gen2	
118-17	12920-12927	staging	
118-18	12928-12936	location	
118-19	12937-12939	in	
118-20	12940-12943	the	
118-21	12944-12948	data	
118-22	12949-12953	flow	
118-23	12954-12962	activity	
118-24	12963-12971	settings	
118-25	12971-12972	.	

#Text=File-based sources
#Text=While data flows support a variety of file types, the Azure Data Factory recommends using the Spark-native Parquet format for optimal read and write times.
119-1	12973-12983	File-based	
119-2	12984-12991	sources	
119-3	12992-12997	While	
119-4	12998-13002	data	
119-5	13003-13008	flows	
119-6	13009-13016	support	
119-7	13017-13018	a	
119-8	13019-13026	variety	
119-9	13027-13029	of	
119-10	13030-13034	file	
119-11	13035-13040	types	
119-12	13040-13041	,	
119-13	13042-13045	the	
119-14	13046-13051	Azure	
119-15	13052-13056	Data	
119-16	13057-13064	Factory	
119-17	13065-13075	recommends	
119-18	13076-13081	using	
119-19	13082-13085	the	
119-20	13086-13098	Spark-native	
119-21	13099-13106	Parquet	
119-22	13107-13113	format	
119-23	13114-13117	for	
119-24	13118-13125	optimal	
119-25	13126-13130	read	
119-26	13131-13134	and	
119-27	13135-13140	write	
119-28	13141-13146	times	
119-29	13146-13147	.	

#Text=If you're running the same data flow on a set of files, we recommend reading from a folder, using wildcard paths or reading from a list of files.
120-1	13148-13150	If	
120-2	13151-13157	you're	
120-3	13158-13165	running	
120-4	13166-13169	the	
120-5	13170-13174	same	
120-6	13175-13179	data	
120-7	13180-13184	flow	
120-8	13185-13187	on	
120-9	13188-13189	a	
120-10	13190-13193	set	
120-11	13194-13196	of	
120-12	13197-13202	files	
120-13	13202-13203	,	
120-14	13204-13206	we	
120-15	13207-13216	recommend	
120-16	13217-13224	reading	
120-17	13225-13229	from	
120-18	13230-13231	a	
120-19	13232-13238	folder	
120-20	13238-13239	,	
120-21	13240-13245	using	
120-22	13246-13254	wildcard	
120-23	13255-13260	paths	
120-24	13261-13263	or	
120-25	13264-13271	reading	
120-26	13272-13276	from	
120-27	13277-13278	a	
120-28	13279-13283	list	
120-29	13284-13286	of	
120-30	13287-13292	files	
120-31	13292-13293	.	

#Text=A single data flow activity run can process all of your files in batch.
121-1	13294-13295	A	
121-2	13296-13302	single	
121-3	13303-13307	data	
121-4	13308-13312	flow	
121-5	13313-13321	activity	
121-6	13322-13325	run	
121-7	13326-13329	can	
121-8	13330-13337	process	
121-9	13338-13341	all	
121-10	13342-13344	of	
121-11	13345-13349	your	
121-12	13350-13355	files	
121-13	13356-13358	in	
121-14	13359-13364	batch	
121-15	13364-13365	.	

#Text=More information on how to set these settings can be found in the connector documentation such as Azure Blob Storage.
122-1	13366-13370	More	
122-2	13371-13382	information	
122-3	13383-13385	on	
122-4	13386-13389	how	
122-5	13390-13392	to	
122-6	13393-13396	set	
122-7	13397-13402	these	
122-8	13403-13411	settings	
122-9	13412-13415	can	
122-10	13416-13418	be	
122-11	13419-13424	found	
122-12	13425-13427	in	
122-13	13428-13431	the	
122-14	13432-13441	connector	
122-15	13442-13455	documentation	
122-16	13456-13460	such	
122-17	13461-13463	as	
122-18	13464-13469	Azure	
122-19	13470-13474	Blob	
122-20	13475-13482	Storage	
122-21	13482-13483	.	

#Text=If possible, avoid using the For-Each activity to run data flows over a set of files.
123-1	13484-13486	If	
123-2	13487-13495	possible	
123-3	13495-13496	,	
123-4	13497-13502	avoid	
123-5	13503-13508	using	
123-6	13509-13512	the	
123-7	13513-13521	For-Each	
123-8	13522-13530	activity	
123-9	13531-13533	to	
123-10	13534-13537	run	
123-11	13538-13542	data	
123-12	13543-13548	flows	
123-13	13549-13553	over	
123-14	13554-13555	a	
123-15	13556-13559	set	
123-16	13560-13562	of	
123-17	13563-13568	files	
123-18	13568-13569	.	

#Text=This will cause each iteration of the for-each to spin up its own Spark cluster, which is often not necessary and can be expensive.
124-1	13570-13574	This	
124-2	13575-13579	will	
124-3	13580-13585	cause	
124-4	13586-13590	each	
124-5	13591-13600	iteration	
124-6	13601-13603	of	
124-7	13604-13607	the	
124-8	13608-13616	for-each	
124-9	13617-13619	to	
124-10	13620-13624	spin	
124-11	13625-13627	up	
124-12	13628-13631	its	
124-13	13632-13635	own	
124-14	13636-13641	Spark	
124-15	13642-13649	cluster	
124-16	13649-13650	,	
124-17	13651-13656	which	
124-18	13657-13659	is	
124-19	13660-13665	often	
124-20	13666-13669	not	
124-21	13670-13679	necessary	
124-22	13680-13683	and	
124-23	13684-13687	can	
124-24	13688-13690	be	
124-25	13691-13700	expensive	
124-26	13700-13701	.	

#Text=Optimizing sinks
#Text=When data flows write to sinks, any custom partitioning will happen immediately before the write.
125-1	13702-13712	Optimizing	
125-2	13713-13718	sinks	
125-3	13719-13723	When	
125-4	13724-13728	data	
125-5	13729-13734	flows	
125-6	13735-13740	write	
125-7	13741-13743	to	
125-8	13744-13749	sinks	
125-9	13749-13750	,	
125-10	13751-13754	any	
125-11	13755-13761	custom	
125-12	13762-13774	partitioning	
125-13	13775-13779	will	
125-14	13780-13786	happen	
125-15	13787-13798	immediately	
125-16	13799-13805	before	
125-17	13806-13809	the	
125-18	13810-13815	write	
125-19	13815-13816	.	

#Text=Like the source, in most cases it is recommended that you keep Use current partitioning as the selected partition option.
126-1	13817-13821	Like	
126-2	13822-13825	the	
126-3	13826-13832	source	
126-4	13832-13833	,	
126-5	13834-13836	in	
126-6	13837-13841	most	
126-7	13842-13847	cases	
126-8	13848-13850	it	
126-9	13851-13853	is	
126-10	13854-13865	recommended	
126-11	13866-13870	that	
126-12	13871-13874	you	
126-13	13875-13879	keep	
126-14	13880-13883	Use	
126-15	13884-13891	current	
126-16	13892-13904	partitioning	
126-17	13905-13907	as	
126-18	13908-13911	the	
126-19	13912-13920	selected	
126-20	13921-13930	partition	
126-21	13931-13937	option	
126-22	13937-13938	.	

#Text=Partitioned data will write significantly quicker than unpartitioned data, even your destination is not partitioned.
127-1	13939-13950	Partitioned	
127-2	13951-13955	data	
127-3	13956-13960	will	
127-4	13961-13966	write	
127-5	13967-13980	significantly	
127-6	13981-13988	quicker	
127-7	13989-13993	than	
127-8	13994-14007	unpartitioned	
127-9	14008-14012	data	
127-10	14012-14013	,	
127-11	14014-14018	even	
127-12	14019-14023	your	
127-13	14024-14035	destination	
127-14	14036-14038	is	
127-15	14039-14042	not	
127-16	14043-14054	partitioned	
127-17	14054-14055	.	

#Text=Below are the individual considerations for various sink types.
128-1	14056-14061	Below	
128-2	14062-14065	are	
128-3	14066-14069	the	
128-4	14070-14080	individual	
128-5	14081-14095	considerations	
128-6	14096-14099	for	
128-7	14100-14107	various	
128-8	14108-14112	sink	
128-9	14113-14118	types	
128-10	14118-14119	.	

#Text=Azure SQL Database sinks
#Text=With Azure SQL Database, the default partitioning should work in most cases.
129-1	14120-14125	Azure	
129-2	14126-14129	SQL	
129-3	14130-14138	Database	
129-4	14139-14144	sinks	
129-5	14145-14149	With	
129-6	14150-14155	Azure	
129-7	14156-14159	SQL	
129-8	14160-14168	Database	
129-9	14168-14169	,	
129-10	14170-14173	the	
129-11	14174-14181	default	
129-12	14182-14194	partitioning	
129-13	14195-14201	should	
129-14	14202-14206	work	
129-15	14207-14209	in	
129-16	14210-14214	most	
129-17	14215-14220	cases	
129-18	14220-14221	.	

#Text=There is a chance that your sink may have too many partitions for your SQL database to handle.
130-1	14222-14227	There	
130-2	14228-14230	is	
130-3	14231-14232	a	
130-4	14233-14239	chance	
130-5	14240-14244	that	
130-6	14245-14249	your	
130-7	14250-14254	sink	
130-8	14255-14258	may	
130-9	14259-14263	have	
130-10	14264-14267	too	
130-11	14268-14272	many	
130-12	14273-14283	partitions	
130-13	14284-14287	for	
130-14	14288-14292	your	
130-15	14293-14296	SQL	
130-16	14297-14305	database	
130-17	14306-14308	to	
130-18	14309-14315	handle	
130-19	14315-14316	.	

#Text=If you are running into this, reduce the number of partitions outputted by your SQL Database sink.
131-1	14317-14319	If	
131-2	14320-14323	you	
131-3	14324-14327	are	
131-4	14328-14335	running	
131-5	14336-14340	into	
131-6	14341-14345	this	
131-7	14345-14346	,	
131-8	14347-14353	reduce	
131-9	14354-14357	the	
131-10	14358-14364	number	
131-11	14365-14367	of	
131-12	14368-14378	partitions	
131-13	14379-14388	outputted	
131-14	14389-14391	by	
131-15	14392-14396	your	
131-16	14397-14400	SQL	
131-17	14401-14409	Database	
131-18	14410-14414	sink	
131-19	14414-14415	.	

#Text=Impact of error row handling to performance
#Text=When you enable error row handling ("continue on error") in the sink transformation, ADF will take an additional step before writing the compatible rows to your destination table.
132-1	14416-14422	Impact	
132-2	14423-14425	of	
132-3	14426-14431	error	
132-4	14432-14435	row	
132-5	14436-14444	handling	
132-6	14445-14447	to	
132-7	14448-14459	performance	
132-8	14460-14464	When	
132-9	14465-14468	you	
132-10	14469-14475	enable	
132-11	14476-14481	error	
132-12	14482-14485	row	
132-13	14486-14494	handling	
132-14	14495-14496	(	
132-15	14496-14497	"	
132-16	14497-14505	continue	
132-17	14506-14508	on	
132-18	14509-14514	error	
132-19	14514-14515	"	
132-20	14515-14516	)	
132-21	14517-14519	in	
132-22	14520-14523	the	
132-23	14524-14528	sink	
132-24	14529-14543	transformation	
132-25	14543-14544	,	
132-26	14545-14548	ADF	
132-27	14549-14553	will	
132-28	14554-14558	take	
132-29	14559-14561	an	
132-30	14562-14572	additional	
132-31	14573-14577	step	
132-32	14578-14584	before	
132-33	14585-14592	writing	
132-34	14593-14596	the	
132-35	14597-14607	compatible	
132-36	14608-14612	rows	
132-37	14613-14615	to	
132-38	14616-14620	your	
132-39	14621-14632	destination	
132-40	14633-14638	table	
132-41	14638-14639	.	

#Text=This additional step will have a small performance penalty that can be in the range of 5% added for this step with an additional small performance hit also added if you set the option to also with the incompatible rows to a log file.
133-1	14640-14644	This	
133-2	14645-14655	additional	
133-3	14656-14660	step	
133-4	14661-14665	will	
133-5	14666-14670	have	
133-6	14671-14672	a	
133-7	14673-14678	small	
133-8	14679-14690	performance	
133-9	14691-14698	penalty	
133-10	14699-14703	that	
133-11	14704-14707	can	
133-12	14708-14710	be	
133-13	14711-14713	in	
133-14	14714-14717	the	
133-15	14718-14723	range	
133-16	14724-14726	of	
133-17	14727-14729	5%	
133-18	14730-14735	added	
133-19	14736-14739	for	
133-20	14740-14744	this	
133-21	14745-14749	step	
133-22	14750-14754	with	
133-23	14755-14757	an	
133-24	14758-14768	additional	
133-25	14769-14774	small	
133-26	14775-14786	performance	
133-27	14787-14790	hit	
133-28	14791-14795	also	
133-29	14796-14801	added	
133-30	14802-14804	if	
133-31	14805-14808	you	
133-32	14809-14812	set	
133-33	14813-14816	the	
133-34	14817-14823	option	
133-35	14824-14826	to	
133-36	14827-14831	also	
133-37	14832-14836	with	
133-38	14837-14840	the	
133-39	14841-14853	incompatible	
133-40	14854-14858	rows	
133-41	14859-14861	to	
133-42	14862-14863	a	
133-43	14864-14867	log	
133-44	14868-14872	file	
133-45	14872-14873	.	

#Text=Disabling indexes using a SQL Script
#Text=Disabling indexes before a load in a SQL database can greatly improve performance of writing to the table.
134-1	14874-14883	Disabling	
134-2	14884-14891	indexes	
134-3	14892-14897	using	
134-4	14898-14899	a	
134-5	14900-14903	SQL	
134-6	14904-14910	Script	
134-7	14911-14920	Disabling	
134-8	14921-14928	indexes	
134-9	14929-14935	before	
134-10	14936-14937	a	
134-11	14938-14942	load	
134-12	14943-14945	in	
134-13	14946-14947	a	
134-14	14948-14951	SQL	
134-15	14952-14960	database	
134-16	14961-14964	can	
134-17	14965-14972	greatly	
134-18	14973-14980	improve	
134-19	14981-14992	performance	
134-20	14993-14995	of	
134-21	14996-15003	writing	
134-22	15004-15006	to	
134-23	15007-15010	the	
134-24	15011-15016	table	
134-25	15016-15017	.	

#Text=Run the below command before writing to your SQL sink.
135-1	15018-15021	Run	
135-2	15022-15025	the	
135-3	15026-15031	below	
135-4	15032-15039	command	
135-5	15040-15046	before	
135-6	15047-15054	writing	
135-7	15055-15057	to	
135-8	15058-15062	your	
135-9	15063-15066	SQL	
135-10	15067-15071	sink	
135-11	15071-15072	.	

#Text=ALTER INDEX ALL ON dbo.
136-1	15073-15078	ALTER	
136-2	15079-15084	INDEX	
136-3	15085-15088	ALL	
136-4	15089-15091	ON	
136-5	15092-15095	dbo	
136-6	15095-15096	.	

#Text=[Table Name] DISABLE
#Text=After the write has completed, rebuild the indexes using the following command:
#Text=ALTER INDEX ALL ON dbo.
137-1	15096-15097	[	
137-2	15097-15102	Table	
137-3	15103-15107	Name	
137-4	15107-15108	]	
137-5	15109-15116	DISABLE	
137-6	15117-15122	After	
137-7	15123-15126	the	
137-8	15127-15132	write	
137-9	15133-15136	has	
137-10	15137-15146	completed	
137-11	15146-15147	,	
137-12	15148-15155	rebuild	
137-13	15156-15159	the	
137-14	15160-15167	indexes	
137-15	15168-15173	using	
137-16	15174-15177	the	
137-17	15178-15187	following	
137-18	15188-15195	command	
137-19	15195-15196	:	
137-20	15197-15202	ALTER	
137-21	15203-15208	INDEX	
137-22	15209-15212	ALL	
137-23	15213-15215	ON	
137-24	15216-15219	dbo	
137-25	15219-15220	.	

#Text=[Table Name] REBUILD
#Text=These can both be done natively using Pre and Post-SQL scripts within an Azure SQL DB or Synapse sink in mapping data flows.
138-1	15220-15221	[	
138-2	15221-15226	Table	
138-3	15227-15231	Name	
138-4	15231-15232	]	
138-5	15233-15240	REBUILD	
138-6	15241-15246	These	
138-7	15247-15250	can	
138-8	15251-15255	both	
138-9	15256-15258	be	
138-10	15259-15263	done	
138-11	15264-15272	natively	
138-12	15273-15278	using	
138-13	15279-15282	Pre	
138-14	15283-15286	and	
138-15	15287-15295	Post-SQL	
138-16	15296-15303	scripts	
138-17	15304-15310	within	
138-18	15311-15313	an	
138-19	15314-15319	Azure	
138-20	15320-15323	SQL	
138-21	15324-15326	DB	
138-22	15327-15329	or	
138-23	15330-15337	Synapse	
138-24	15338-15342	sink	
138-25	15343-15345	in	
138-26	15346-15353	mapping	
138-27	15354-15358	data	
138-28	15359-15364	flows	
138-29	15364-15365	.	

#Text=Warning
#Text=When disabling indexes, the data flow is effectively taking control of a database and queries are unlikely to succeed at this time.
139-1	15366-15373	Warning	
139-2	15374-15378	When	
139-3	15379-15388	disabling	
139-4	15389-15396	indexes	
139-5	15396-15397	,	
139-6	15398-15401	the	
139-7	15402-15406	data	
139-8	15407-15411	flow	
139-9	15412-15414	is	
139-10	15415-15426	effectively	
139-11	15427-15433	taking	
139-12	15434-15441	control	
139-13	15442-15444	of	
139-14	15445-15446	a	
139-15	15447-15455	database	
139-16	15456-15459	and	
139-17	15460-15467	queries	
139-18	15468-15471	are	
139-19	15472-15480	unlikely	
139-20	15481-15483	to	
139-21	15484-15491	succeed	
139-22	15492-15494	at	
139-23	15495-15499	this	
139-24	15500-15504	time	
139-25	15504-15505	.	

#Text=As a result, many ETL jobs are triggered in the middle of the night to avoid this conflict.
140-1	15506-15508	As	
140-2	15509-15510	a	
140-3	15511-15517	result	
140-4	15517-15518	,	
140-5	15519-15523	many	
140-6	15524-15527	ETL	
140-7	15528-15532	jobs	
140-8	15533-15536	are	
140-9	15537-15546	triggered	
140-10	15547-15549	in	
140-11	15550-15553	the	
140-12	15554-15560	middle	
140-13	15561-15563	of	
140-14	15564-15567	the	
140-15	15568-15573	night	
140-16	15574-15576	to	
140-17	15577-15582	avoid	
140-18	15583-15587	this	
140-19	15588-15596	conflict	
140-20	15596-15597	.	

#Text=For more information, learn about the constraints of disabling indexes
#Text=Scaling up your database
#Text=Schedule a resizing of your source and sink Azure SQL DB and DW before your pipeline run to increase the throughput and minimize Azure throttling once you reach DTU limits.
141-1	15598-15601	For	
141-2	15602-15606	more	
141-3	15607-15618	information	
141-4	15618-15619	,	
141-5	15620-15625	learn	
141-6	15626-15631	about	
141-7	15632-15635	the	
141-8	15636-15647	constraints	
141-9	15648-15650	of	
141-10	15651-15660	disabling	
141-11	15661-15668	indexes	
141-12	15669-15676	Scaling	
141-13	15677-15679	up	
141-14	15680-15684	your	
141-15	15685-15693	database	
141-16	15694-15702	Schedule	
141-17	15703-15704	a	
141-18	15705-15713	resizing	
141-19	15714-15716	of	
141-20	15717-15721	your	
141-21	15722-15728	source	
141-22	15729-15732	and	
141-23	15733-15737	sink	
141-24	15738-15743	Azure	
141-25	15744-15747	SQL	
141-26	15748-15750	DB	
141-27	15751-15754	and	
141-28	15755-15757	DW	
141-29	15758-15764	before	
141-30	15765-15769	your	
141-31	15770-15778	pipeline	
141-32	15779-15782	run	
141-33	15783-15785	to	
141-34	15786-15794	increase	
141-35	15795-15798	the	
141-36	15799-15809	throughput	
141-37	15810-15813	and	
141-38	15814-15822	minimize	
141-39	15823-15828	Azure	
141-40	15829-15839	throttling	
141-41	15840-15844	once	
141-42	15845-15848	you	
141-43	15849-15854	reach	
141-44	15855-15858	DTU	
141-45	15859-15865	limits	
141-46	15865-15866	.	

#Text=After your pipeline execution is complete, resize your databases back to their normal run rate.
142-1	15867-15872	After	
142-2	15873-15877	your	
142-3	15878-15886	pipeline	
142-4	15887-15896	execution	
142-5	15897-15899	is	
142-6	15900-15908	complete	
142-7	15908-15909	,	
142-8	15910-15916	resize	
142-9	15917-15921	your	
142-10	15922-15931	databases	
142-11	15932-15936	back	
142-12	15937-15939	to	
142-13	15940-15945	their	
142-14	15946-15952	normal	
142-15	15953-15956	run	
142-16	15957-15961	rate	
142-17	15961-15962	.	

#Text=Azure Synapse Analytics sinks
#Text=When writing to Azure Synapse Analytics, make sure that Enable staging is set to true.
143-1	15963-15968	Azure	
143-2	15969-15976	Synapse	
143-3	15977-15986	Analytics	
143-4	15987-15992	sinks	
143-5	15993-15997	When	
143-6	15998-16005	writing	
143-7	16006-16008	to	
143-8	16009-16014	Azure	
143-9	16015-16022	Synapse	
143-10	16023-16032	Analytics	
143-11	16032-16033	,	
143-12	16034-16038	make	
143-13	16039-16043	sure	
143-14	16044-16048	that	
143-15	16049-16055	Enable	
143-16	16056-16063	staging	
143-17	16064-16066	is	
143-18	16067-16070	set	
143-19	16071-16073	to	
143-20	16074-16078	true	
143-21	16078-16079	.	

#Text=This enables ADF to write using SQL Copy Command which effectively loads the data in bulk.
144-1	16080-16084	This	
144-2	16085-16092	enables	
144-3	16093-16096	ADF	
144-4	16097-16099	to	
144-5	16100-16105	write	
144-6	16106-16111	using	
144-7	16112-16115	SQL	
144-8	16116-16120	Copy	
144-9	16121-16128	Command	
144-10	16129-16134	which	
144-11	16135-16146	effectively	
144-12	16147-16152	loads	
144-13	16153-16156	the	
144-14	16157-16161	data	
144-15	16162-16164	in	
144-16	16165-16169	bulk	
144-17	16169-16170	.	

#Text=You will need to reference an Azure Data Lake Storage gen2 or Azure Blob Storage account for staging of the data when using Staging.
145-1	16171-16174	You	
145-2	16175-16179	will	
145-3	16180-16184	need	
145-4	16185-16187	to	
145-5	16188-16197	reference	
145-6	16198-16200	an	
145-7	16201-16206	Azure	
145-8	16207-16211	Data	
145-9	16212-16216	Lake	
145-10	16217-16224	Storage	
145-11	16225-16229	gen2	
145-12	16230-16232	or	
145-13	16233-16238	Azure	
145-14	16239-16243	Blob	
145-15	16244-16251	Storage	
145-16	16252-16259	account	
145-17	16260-16263	for	
145-18	16264-16271	staging	
145-19	16272-16274	of	
145-20	16275-16278	the	
145-21	16279-16283	data	
145-22	16284-16288	when	
145-23	16289-16294	using	
145-24	16295-16302	Staging	
145-25	16302-16303	.	

#Text=Other than Staging, the same best practices apply to Azure Synapse Analytics as Azure SQL Database.
146-1	16304-16309	Other	
146-2	16310-16314	than	
146-3	16315-16322	Staging	
146-4	16322-16323	,	
146-5	16324-16327	the	
146-6	16328-16332	same	
146-7	16333-16337	best	
146-8	16338-16347	practices	
146-9	16348-16353	apply	
146-10	16354-16356	to	
146-11	16357-16362	Azure	
146-12	16363-16370	Synapse	
146-13	16371-16380	Analytics	
146-14	16381-16383	as	
146-15	16384-16389	Azure	
146-16	16390-16393	SQL	
146-17	16394-16402	Database	
146-18	16402-16403	.	

#Text=File-based sinks
#Text=While data flows support a variety of file types, the Azure Data Factory recommends using the Spark-native Parquet format for optimal read and write times.
147-1	16404-16414	File-based	
147-2	16415-16420	sinks	
147-3	16421-16426	While	
147-4	16427-16431	data	
147-5	16432-16437	flows	
147-6	16438-16445	support	
147-7	16446-16447	a	
147-8	16448-16455	variety	
147-9	16456-16458	of	
147-10	16459-16463	file	
147-11	16464-16469	types	
147-12	16469-16470	,	
147-13	16471-16474	the	
147-14	16475-16480	Azure	
147-15	16481-16485	Data	
147-16	16486-16493	Factory	
147-17	16494-16504	recommends	
147-18	16505-16510	using	
147-19	16511-16514	the	
147-20	16515-16527	Spark-native	
147-21	16528-16535	Parquet	
147-22	16536-16542	format	
147-23	16543-16546	for	
147-24	16547-16554	optimal	
147-25	16555-16559	read	
147-26	16560-16563	and	
147-27	16564-16569	write	
147-28	16570-16575	times	
147-29	16575-16576	.	

#Text=If the data is evenly distributed, Use current partitioning will be the fastest partitioning option for writing files.
148-1	16577-16579	If	
148-2	16580-16583	the	
148-3	16584-16588	data	
148-4	16589-16591	is	
148-5	16592-16598	evenly	
148-6	16599-16610	distributed	
148-7	16610-16611	,	
148-8	16612-16615	Use	
148-9	16616-16623	current	
148-10	16624-16636	partitioning	
148-11	16637-16641	will	
148-12	16642-16644	be	
148-13	16645-16648	the	
148-14	16649-16656	fastest	
148-15	16657-16669	partitioning	
148-16	16670-16676	option	
148-17	16677-16680	for	
148-18	16681-16688	writing	
148-19	16689-16694	files	
148-20	16694-16695	.	

#Text=File name options
#Text=When writing files, you have a choice of naming options that each have a performance impact.
149-1	16696-16700	File	
149-2	16701-16705	name	
149-3	16706-16713	options	
149-4	16714-16718	When	
149-5	16719-16726	writing	
149-6	16727-16732	files	
149-7	16732-16733	,	
149-8	16734-16737	you	
149-9	16738-16742	have	
149-10	16743-16744	a	
149-11	16745-16751	choice	
149-12	16752-16754	of	
149-13	16755-16761	naming	
149-14	16762-16769	options	
149-15	16770-16774	that	
149-16	16775-16779	each	
149-17	16780-16784	have	
149-18	16785-16786	a	
149-19	16787-16798	performance	
149-20	16799-16805	impact	
149-21	16805-16806	.	

#Text=Selecting the Default option will write the fastest.
150-1	16807-16816	Selecting	
150-2	16817-16820	the	
150-3	16821-16828	Default	
150-4	16829-16835	option	
150-5	16836-16840	will	
150-6	16841-16846	write	
150-7	16847-16850	the	
150-8	16851-16858	fastest	
150-9	16858-16859	.	

#Text=Each partition will equate to a file with the Spark default name.
151-1	16860-16864	Each	
151-2	16865-16874	partition	
151-3	16875-16879	will	
151-4	16880-16886	equate	
151-5	16887-16889	to	
151-6	16890-16891	a	
151-7	16892-16896	file	
151-8	16897-16901	with	
151-9	16902-16905	the	
151-10	16906-16911	Spark	
151-11	16912-16919	default	
151-12	16920-16924	name	
151-13	16924-16925	.	

#Text=This is useful if you are just reading from the folder of data.
152-1	16926-16930	This	
152-2	16931-16933	is	
152-3	16934-16940	useful	
152-4	16941-16943	if	
152-5	16944-16947	you	
152-6	16948-16951	are	
152-7	16952-16956	just	
152-8	16957-16964	reading	
152-9	16965-16969	from	
152-10	16970-16973	the	
152-11	16974-16980	folder	
152-12	16981-16983	of	
152-13	16984-16988	data	
152-14	16988-16989	.	

#Text=Setting a naming Pattern will rename each partition file to a more user-friendly name.
153-1	16990-16997	Setting	
153-2	16998-16999	a	
153-3	17000-17006	naming	
153-4	17007-17014	Pattern	
153-5	17015-17019	will	
153-6	17020-17026	rename	
153-7	17027-17031	each	
153-8	17032-17041	partition	
153-9	17042-17046	file	
153-10	17047-17049	to	
153-11	17050-17051	a	
153-12	17052-17056	more	
153-13	17057-17070	user-friendly	
153-14	17071-17075	name	
153-15	17075-17076	.	

#Text=This operation happens after write and is slightly slower than choosing the default.
154-1	17077-17081	This	
154-2	17082-17091	operation	
154-3	17092-17099	happens	
154-4	17100-17105	after	
154-5	17106-17111	write	
154-6	17112-17115	and	
154-7	17116-17118	is	
154-8	17119-17127	slightly	
154-9	17128-17134	slower	
154-10	17135-17139	than	
154-11	17140-17148	choosing	
154-12	17149-17152	the	
154-13	17153-17160	default	
154-14	17160-17161	.	

#Text=Per partition allows you to name each individual partition manually.
155-1	17162-17165	Per	
155-2	17166-17175	partition	
155-3	17176-17182	allows	
155-4	17183-17186	you	
155-5	17187-17189	to	
155-6	17190-17194	name	
155-7	17195-17199	each	
155-8	17200-17210	individual	
155-9	17211-17220	partition	
155-10	17221-17229	manually	
155-11	17229-17230	.	

#Text=If a column corresponds to how you wish to output the data, you can select As data in column.
156-1	17231-17233	If	
156-2	17234-17235	a	
156-3	17236-17242	column	
156-4	17243-17254	corresponds	
156-5	17255-17257	to	
156-6	17258-17261	how	
156-7	17262-17265	you	
156-8	17266-17270	wish	
156-9	17271-17273	to	
156-10	17274-17280	output	
156-11	17281-17284	the	
156-12	17285-17289	data	
156-13	17289-17290	,	
156-14	17291-17294	you	
156-15	17295-17298	can	
156-16	17299-17305	select	
156-17	17306-17308	As	
156-18	17309-17313	data	
156-19	17314-17316	in	
156-20	17317-17323	column	
156-21	17323-17324	.	

#Text=This reshuffles the data and can impact performance if the columns are not evenly distributed.
157-1	17325-17329	This	
157-2	17330-17340	reshuffles	
157-3	17341-17344	the	
157-4	17345-17349	data	
157-5	17350-17353	and	
157-6	17354-17357	can	
157-7	17358-17364	impact	
157-8	17365-17376	performance	
157-9	17377-17379	if	
157-10	17380-17383	the	
157-11	17384-17391	columns	
157-12	17392-17395	are	
157-13	17396-17399	not	
157-14	17400-17406	evenly	
157-15	17407-17418	distributed	
157-16	17418-17419	.	

#Text=Output to single file combines all the data into a single partition.
158-1	17420-17426	Output	
158-2	17427-17429	to	
158-3	17430-17436	single	
158-4	17437-17441	file	
158-5	17442-17450	combines	
158-6	17451-17454	all	
158-7	17455-17458	the	
158-8	17459-17463	data	
158-9	17464-17468	into	
158-10	17469-17470	a	
158-11	17471-17477	single	
158-12	17478-17487	partition	
158-13	17487-17488	.	

#Text=This leads to long write times, especially for large datasets.
159-1	17489-17493	This	
159-2	17494-17499	leads	
159-3	17500-17502	to	
159-4	17503-17507	long	
159-5	17508-17513	write	
159-6	17514-17519	times	
159-7	17519-17520	,	
159-8	17521-17531	especially	
159-9	17532-17535	for	
159-10	17536-17541	large	
159-11	17542-17550	datasets	
159-12	17550-17551	.	

#Text=The Azure Data Factory team highly recommends not choosing this option unless there is an explicit business reason to do so.
160-1	17552-17555	The	
160-2	17556-17561	Azure	
160-3	17562-17566	Data	
160-4	17567-17574	Factory	
160-5	17575-17579	team	
160-6	17580-17586	highly	
160-7	17587-17597	recommends	
160-8	17598-17601	not	
160-9	17602-17610	choosing	
160-10	17611-17615	this	
160-11	17616-17622	option	
160-12	17623-17629	unless	
160-13	17630-17635	there	
160-14	17636-17638	is	
160-15	17639-17641	an	
160-16	17642-17650	explicit	
160-17	17651-17659	business	
160-18	17660-17666	reason	
160-19	17667-17669	to	
160-20	17670-17672	do	
160-21	17673-17675	so	
160-22	17675-17676	.	

#Text=CosmosDB sinks
#Text=When writing to CosmosDB, altering throughput and batch size during data flow execution can improve performance.
161-1	17677-17685	CosmosDB	
161-2	17686-17691	sinks	
161-3	17692-17696	When	
161-4	17697-17704	writing	
161-5	17705-17707	to	
161-6	17708-17716	CosmosDB	
161-7	17716-17717	,	
161-8	17718-17726	altering	
161-9	17727-17737	throughput	
161-10	17738-17741	and	
161-11	17742-17747	batch	
161-12	17748-17752	size	
161-13	17753-17759	during	
161-14	17760-17764	data	
161-15	17765-17769	flow	
161-16	17770-17779	execution	
161-17	17780-17783	can	
161-18	17784-17791	improve	
161-19	17792-17803	performance	
161-20	17803-17804	.	

#Text=These changes only take effect during the data flow activity run and will return to the original collection settings after conclusion.
162-1	17805-17810	These	
162-2	17811-17818	changes	
162-3	17819-17823	only	
162-4	17824-17828	take	
162-5	17829-17835	effect	
162-6	17836-17842	during	
162-7	17843-17846	the	
162-8	17847-17851	data	
162-9	17852-17856	flow	
162-10	17857-17865	activity	
162-11	17866-17869	run	
162-12	17870-17873	and	
162-13	17874-17878	will	
162-14	17879-17885	return	
162-15	17886-17888	to	
162-16	17889-17892	the	
162-17	17893-17901	original	
162-18	17902-17912	collection	
162-19	17913-17921	settings	
162-20	17922-17927	after	
162-21	17928-17938	conclusion	
162-22	17938-17939	.	

#Text=Batch size: Usually, starting with the default batch size is sufficient.
163-1	17940-17945	Batch	
163-2	17946-17950	size	
163-3	17950-17951	:	
163-4	17952-17959	Usually	
163-5	17959-17960	,	
163-6	17961-17969	starting	
163-7	17970-17974	with	
163-8	17975-17978	the	
163-9	17979-17986	default	
163-10	17987-17992	batch	
163-11	17993-17997	size	
163-12	17998-18000	is	
163-13	18001-18011	sufficient	
163-14	18011-18012	.	

#Text=To further tune this value, calculate the rough object size of your data, and make sure that object size * batch size is less than 2MB.
164-1	18013-18015	To	
164-2	18016-18023	further	
164-3	18024-18028	tune	
164-4	18029-18033	this	
164-5	18034-18039	value	
164-6	18039-18040	,	
164-7	18041-18050	calculate	
164-8	18051-18054	the	
164-9	18055-18060	rough	
164-10	18061-18067	object	
164-11	18068-18072	size	
164-12	18073-18075	of	
164-13	18076-18080	your	
164-14	18081-18085	data	
164-15	18085-18086	,	
164-16	18087-18090	and	
164-17	18091-18095	make	
164-18	18096-18100	sure	
164-19	18101-18105	that	
164-20	18106-18112	object	
164-21	18113-18117	size	
164-22	18118-18119	*	
164-23	18120-18125	batch	
164-24	18126-18130	size	
164-25	18131-18133	is	
164-26	18134-18138	less	
164-27	18139-18143	than	
164-28	18144-18147	2MB	
164-29	18147-18148	.	

#Text=If it is, you can increase the batch size to get better throughput.
165-1	18149-18151	If	
165-2	18152-18154	it	
165-3	18155-18157	is	
165-4	18157-18158	,	
165-5	18159-18162	you	
165-6	18163-18166	can	
165-7	18167-18175	increase	
165-8	18176-18179	the	
165-9	18180-18185	batch	
165-10	18186-18190	size	
165-11	18191-18193	to	
165-12	18194-18197	get	
165-13	18198-18204	better	
165-14	18205-18215	throughput	
165-15	18215-18216	.	

#Text=Throughput: Set a higher throughput setting here to allow documents to write faster to CosmosDB.
166-1	18217-18227	Throughput	
166-2	18227-18228	:	
166-3	18229-18232	Set	
166-4	18233-18234	a	
166-5	18235-18241	higher	
166-6	18242-18252	throughput	
166-7	18253-18260	setting	
166-8	18261-18265	here	
166-9	18266-18268	to	
166-10	18269-18274	allow	
166-11	18275-18284	documents	
166-12	18285-18287	to	
166-13	18288-18293	write	
166-14	18294-18300	faster	
166-15	18301-18303	to	
166-16	18304-18312	CosmosDB	
166-17	18312-18313	.	

#Text=Keep in mind the higher RU costs based upon a high throughput setting.
167-1	18314-18318	Keep	
167-2	18319-18321	in	
167-3	18322-18326	mind	
167-4	18327-18330	the	
167-5	18331-18337	higher	
167-6	18338-18340	RU	
167-7	18341-18346	costs	
167-8	18347-18352	based	
167-9	18353-18357	upon	
167-10	18358-18359	a	
167-11	18360-18364	high	
167-12	18365-18375	throughput	
167-13	18376-18383	setting	
167-14	18383-18384	.	

#Text=Write throughput budget: Use a value which is smaller than total RUs per minute.
168-1	18385-18390	Write	
168-2	18391-18401	throughput	
168-3	18402-18408	budget	
168-4	18408-18409	:	
168-5	18410-18413	Use	
168-6	18414-18415	a	
168-7	18416-18421	value	
168-8	18422-18427	which	
168-9	18428-18430	is	
168-10	18431-18438	smaller	
168-11	18439-18443	than	
168-12	18444-18449	total	
168-13	18450-18453	RUs	
168-14	18454-18457	per	
168-15	18458-18464	minute	
168-16	18464-18465	.	

#Text=If you have a data flow with a high number of Spark partitions, setting a budget throughput will allow more balance across those partitions.
169-1	18466-18468	If	
169-2	18469-18472	you	
169-3	18473-18477	have	
169-4	18478-18479	a	
169-5	18480-18484	data	
169-6	18485-18489	flow	
169-7	18490-18494	with	
169-8	18495-18496	a	
169-9	18497-18501	high	
169-10	18502-18508	number	
169-11	18509-18511	of	
169-12	18512-18517	Spark	
169-13	18518-18528	partitions	
169-14	18528-18529	,	
169-15	18530-18537	setting	
169-16	18538-18539	a	
169-17	18540-18546	budget	
169-18	18547-18557	throughput	
169-19	18558-18562	will	
169-20	18563-18568	allow	
169-21	18569-18573	more	
169-22	18574-18581	balance	
169-23	18582-18588	across	
169-24	18589-18594	those	
169-25	18595-18605	partitions	
169-26	18605-18606	.	

#Text=Optimizing transformations
#Text=Optimizing Joins, Exists, and Lookups
#Text=Broadcasting
#Text=In joins, lookups, and exists transformations, if one or both data streams are small enough to fit into worker node memory, you can optimize performance by enabling Broadcasting.
170-1	18607-18617	Optimizing	
170-2	18618-18633	transformations	
170-3	18634-18644	Optimizing	
170-4	18645-18650	Joins	
170-5	18650-18651	,	
170-6	18652-18658	Exists	
170-7	18658-18659	,	
170-8	18660-18663	and	
170-9	18664-18671	Lookups	
170-10	18672-18684	Broadcasting	
170-11	18685-18687	In	
170-12	18688-18693	joins	
170-13	18693-18694	,	
170-14	18695-18702	lookups	
170-15	18702-18703	,	
170-16	18704-18707	and	
170-17	18708-18714	exists	
170-18	18715-18730	transformations	
170-19	18730-18731	,	
170-20	18732-18734	if	
170-21	18735-18738	one	
170-22	18739-18741	or	
170-23	18742-18746	both	
170-24	18747-18751	data	
170-25	18752-18759	streams	
170-26	18760-18763	are	
170-27	18764-18769	small	
170-28	18770-18776	enough	
170-29	18777-18779	to	
170-30	18780-18783	fit	
170-31	18784-18788	into	
170-32	18789-18795	worker	
170-33	18796-18800	node	
170-34	18801-18807	memory	
170-35	18807-18808	,	
170-36	18809-18812	you	
170-37	18813-18816	can	
170-38	18817-18825	optimize	
170-39	18826-18837	performance	
170-40	18838-18840	by	
170-41	18841-18849	enabling	
170-42	18850-18862	Broadcasting	
170-43	18862-18863	.	

#Text=Broadcasting is when you send small data frames to all nodes in the cluster.
171-1	18864-18876	Broadcasting	
171-2	18877-18879	is	
171-3	18880-18884	when	
171-4	18885-18888	you	
171-5	18889-18893	send	
171-6	18894-18899	small	
171-7	18900-18904	data	
171-8	18905-18911	frames	
171-9	18912-18914	to	
171-10	18915-18918	all	
171-11	18919-18924	nodes	
171-12	18925-18927	in	
171-13	18928-18931	the	
171-14	18932-18939	cluster	
171-15	18939-18940	.	

#Text=This allows for the Spark engine to perform a join without reshuffling the data in the large stream.
172-1	18941-18945	This	
172-2	18946-18952	allows	
172-3	18953-18956	for	
172-4	18957-18960	the	
172-5	18961-18966	Spark	
172-6	18967-18973	engine	
172-7	18974-18976	to	
172-8	18977-18984	perform	
172-9	18985-18986	a	
172-10	18987-18991	join	
172-11	18992-18999	without	
172-12	19000-19011	reshuffling	
172-13	19012-19015	the	
172-14	19016-19020	data	
172-15	19021-19023	in	
172-16	19024-19027	the	
172-17	19028-19033	large	
172-18	19034-19040	stream	
172-19	19040-19041	.	

#Text=By default, the Spark engine will automatically decide whether or not to broadcast one side of a join.
173-1	19042-19044	By	
173-2	19045-19052	default	
173-3	19052-19053	,	
173-4	19054-19057	the	
173-5	19058-19063	Spark	
173-6	19064-19070	engine	
173-7	19071-19075	will	
173-8	19076-19089	automatically	
173-9	19090-19096	decide	
173-10	19097-19104	whether	
173-11	19105-19107	or	
173-12	19108-19111	not	
173-13	19112-19114	to	
173-14	19115-19124	broadcast	
173-15	19125-19128	one	
173-16	19129-19133	side	
173-17	19134-19136	of	
173-18	19137-19138	a	
173-19	19139-19143	join	
173-20	19143-19144	.	

#Text=If you are familiar with your incoming data and know that one stream will be significantly smaller than the other, you can select Fixed broadcasting.
174-1	19145-19147	If	
174-2	19148-19151	you	
174-3	19152-19155	are	
174-4	19156-19164	familiar	
174-5	19165-19169	with	
174-6	19170-19174	your	
174-7	19175-19183	incoming	
174-8	19184-19188	data	
174-9	19189-19192	and	
174-10	19193-19197	know	
174-11	19198-19202	that	
174-12	19203-19206	one	
174-13	19207-19213	stream	
174-14	19214-19218	will	
174-15	19219-19221	be	
174-16	19222-19235	significantly	
174-17	19236-19243	smaller	
174-18	19244-19248	than	
174-19	19249-19252	the	
174-20	19253-19258	other	
174-21	19258-19259	,	
174-22	19260-19263	you	
174-23	19264-19267	can	
174-24	19268-19274	select	
174-25	19275-19280	Fixed	
174-26	19281-19293	broadcasting	
174-27	19293-19294	.	

#Text=Fixed broadcasting forces Spark to broadcast the selected stream.
175-1	19295-19300	Fixed	
175-2	19301-19313	broadcasting	
175-3	19314-19320	forces	
175-4	19321-19326	Spark	
175-5	19327-19329	to	
175-6	19330-19339	broadcast	
175-7	19340-19343	the	
175-8	19344-19352	selected	
175-9	19353-19359	stream	
175-10	19359-19360	.	

#Text=If the size of the broadcasted data is too large for the Spark node, you may get an out of memory error.
176-1	19361-19363	If	
176-2	19364-19367	the	
176-3	19368-19372	size	
176-4	19373-19375	of	
176-5	19376-19379	the	
176-6	19380-19391	broadcasted	
176-7	19392-19396	data	
176-8	19397-19399	is	
176-9	19400-19403	too	
176-10	19404-19409	large	
176-11	19410-19413	for	
176-12	19414-19417	the	
176-13	19418-19423	Spark	
176-14	19424-19428	node	
176-15	19428-19429	,	
176-16	19430-19433	you	
176-17	19434-19437	may	
176-18	19438-19441	get	
176-19	19442-19444	an	
176-20	19445-19448	out	
176-21	19449-19451	of	
176-22	19452-19458	memory	
176-23	19459-19464	error	
176-24	19464-19465	.	

#Text=To avoid out of memory errors, use memory optimized clusters.
177-1	19466-19468	To	
177-2	19469-19474	avoid	
177-3	19475-19478	out	
177-4	19479-19481	of	
177-5	19482-19488	memory	
177-6	19489-19495	errors	
177-7	19495-19496	,	
177-8	19497-19500	use	
177-9	19501-19507	memory	
177-10	19508-19517	optimized	
177-11	19518-19526	clusters	
177-12	19526-19527	.	

#Text=If you experience broadcast timeouts during data flow executions, you can switch off the broadcast optimization.
178-1	19528-19530	If	
178-2	19531-19534	you	
178-3	19535-19545	experience	
178-4	19546-19555	broadcast	
178-5	19556-19564	timeouts	
178-6	19565-19571	during	
178-7	19572-19576	data	
178-8	19577-19581	flow	
178-9	19582-19592	executions	
178-10	19592-19593	,	
178-11	19594-19597	you	
178-12	19598-19601	can	
178-13	19602-19608	switch	
178-14	19609-19612	off	
178-15	19613-19616	the	
178-16	19617-19626	broadcast	
178-17	19627-19639	optimization	
178-18	19639-19640	.	

#Text=However, this will result in slower performing data flows.
179-1	19641-19648	However	
179-2	19648-19649	,	
179-3	19650-19654	this	
179-4	19655-19659	will	
179-5	19660-19666	result	
179-6	19667-19669	in	
179-7	19670-19676	slower	
179-8	19677-19687	performing	
179-9	19688-19692	data	
179-10	19693-19698	flows	
179-11	19698-19699	.	

#Text=When working with data sources that can take longer to query, like large database queries, it is recommended to turn broadcast off for joins.
180-1	19700-19704	When	
180-2	19705-19712	working	
180-3	19713-19717	with	
180-4	19718-19722	data	
180-5	19723-19730	sources	
180-6	19731-19735	that	
180-7	19736-19739	can	
180-8	19740-19744	take	
180-9	19745-19751	longer	
180-10	19752-19754	to	
180-11	19755-19760	query	
180-12	19760-19761	,	
180-13	19762-19766	like	
180-14	19767-19772	large	
180-15	19773-19781	database	
180-16	19782-19789	queries	
180-17	19789-19790	,	
180-18	19791-19793	it	
180-19	19794-19796	is	
180-20	19797-19808	recommended	
180-21	19809-19811	to	
180-22	19812-19816	turn	
180-23	19817-19826	broadcast	
180-24	19827-19830	off	
180-25	19831-19834	for	
180-26	19835-19840	joins	
180-27	19840-19841	.	

#Text=Source with long query times can cause Spark timeouts when the cluster attempts to broadcast to compute nodes.
181-1	19842-19848	Source	
181-2	19849-19853	with	
181-3	19854-19858	long	
181-4	19859-19864	query	
181-5	19865-19870	times	
181-6	19871-19874	can	
181-7	19875-19880	cause	
181-8	19881-19886	Spark	
181-9	19887-19895	timeouts	
181-10	19896-19900	when	
181-11	19901-19904	the	
181-12	19905-19912	cluster	
181-13	19913-19921	attempts	
181-14	19922-19924	to	
181-15	19925-19934	broadcast	
181-16	19935-19937	to	
181-17	19938-19945	compute	
181-18	19946-19951	nodes	
181-19	19951-19952	.	

#Text=Another good choice for turning off broadcast is when you have a stream in your data flow that is aggregating values for use in a lookup transformation later.
182-1	19953-19960	Another	
182-2	19961-19965	good	
182-3	19966-19972	choice	
182-4	19973-19976	for	
182-5	19977-19984	turning	
182-6	19985-19988	off	
182-7	19989-19998	broadcast	
182-8	19999-20001	is	
182-9	20002-20006	when	
182-10	20007-20010	you	
182-11	20011-20015	have	
182-12	20016-20017	a	
182-13	20018-20024	stream	
182-14	20025-20027	in	
182-15	20028-20032	your	
182-16	20033-20037	data	
182-17	20038-20042	flow	
182-18	20043-20047	that	
182-19	20048-20050	is	
182-20	20051-20062	aggregating	
182-21	20063-20069	values	
182-22	20070-20073	for	
182-23	20074-20077	use	
182-24	20078-20080	in	
182-25	20081-20082	a	
182-26	20083-20089	lookup	
182-27	20090-20104	transformation	
182-28	20105-20110	later	
182-29	20110-20111	.	

#Text=This pattern can confuse the Spark optimizer and cause timeouts.
183-1	20112-20116	This	
183-2	20117-20124	pattern	
183-3	20125-20128	can	
183-4	20129-20136	confuse	
183-5	20137-20140	the	
183-6	20141-20146	Spark	
183-7	20147-20156	optimizer	
183-8	20157-20160	and	
183-9	20161-20166	cause	
183-10	20167-20175	timeouts	
183-11	20175-20176	.	

#Text=Cross joins
#Text=If you use literal values in your join conditions or have multiple matches on both sides of a join, Spark will run the join as a cross join.
184-1	20177-20182	Cross	
184-2	20183-20188	joins	
184-3	20189-20191	If	
184-4	20192-20195	you	
184-5	20196-20199	use	
184-6	20200-20207	literal	
184-7	20208-20214	values	
184-8	20215-20217	in	
184-9	20218-20222	your	
184-10	20223-20227	join	
184-11	20228-20238	conditions	
184-12	20239-20241	or	
184-13	20242-20246	have	
184-14	20247-20255	multiple	
184-15	20256-20263	matches	
184-16	20264-20266	on	
184-17	20267-20271	both	
184-18	20272-20277	sides	
184-19	20278-20280	of	
184-20	20281-20282	a	
184-21	20283-20287	join	
184-22	20287-20288	,	
184-23	20289-20294	Spark	
184-24	20295-20299	will	
184-25	20300-20303	run	
184-26	20304-20307	the	
184-27	20308-20312	join	
184-28	20313-20315	as	
184-29	20316-20317	a	
184-30	20318-20323	cross	
184-31	20324-20328	join	
184-32	20328-20329	.	

#Text=A cross join is a full cartesian product that then filters out the joined values.
185-1	20330-20331	A	
185-2	20332-20337	cross	
185-3	20338-20342	join	
185-4	20343-20345	is	
185-5	20346-20347	a	
185-6	20348-20352	full	
185-7	20353-20362	cartesian	
185-8	20363-20370	product	
185-9	20371-20375	that	
185-10	20376-20380	then	
185-11	20381-20388	filters	
185-12	20389-20392	out	
185-13	20393-20396	the	
185-14	20397-20403	joined	
185-15	20404-20410	values	
185-16	20410-20411	.	

#Text=This is significantly slower than other join types.
186-1	20412-20416	This	
186-2	20417-20419	is	
186-3	20420-20433	significantly	
186-4	20434-20440	slower	
186-5	20441-20445	than	
186-6	20446-20451	other	
186-7	20452-20456	join	
186-8	20457-20462	types	
186-9	20462-20463	.	

#Text=Ensure that you have column references on both sides of your join conditions to avoid the performance impact.
187-1	20464-20470	Ensure	
187-2	20471-20475	that	
187-3	20476-20479	you	
187-4	20480-20484	have	
187-5	20485-20491	column	
187-6	20492-20502	references	
187-7	20503-20505	on	
187-8	20506-20510	both	
187-9	20511-20516	sides	
187-10	20517-20519	of	
187-11	20520-20524	your	
187-12	20525-20529	join	
187-13	20530-20540	conditions	
187-14	20541-20543	to	
187-15	20544-20549	avoid	
187-16	20550-20553	the	
187-17	20554-20565	performance	
187-18	20566-20572	impact	
187-19	20572-20573	.	

#Text=Sorting before joins
#Text=Unlike merge join in tools like SSIS, the join transformation isn't a mandatory merge join operation.
188-1	20574-20581	Sorting	
188-2	20582-20588	before	
188-3	20589-20594	joins	
188-4	20595-20601	Unlike	
188-5	20602-20607	merge	
188-6	20608-20612	join	
188-7	20613-20615	in	
188-8	20616-20621	tools	
188-9	20622-20626	like	
188-10	20627-20631	SSIS	
188-11	20631-20632	,	
188-12	20633-20636	the	
188-13	20637-20641	join	
188-14	20642-20656	transformation	
188-15	20657-20662	isn't	
188-16	20663-20664	a	
188-17	20665-20674	mandatory	
188-18	20675-20680	merge	
188-19	20681-20685	join	
188-20	20686-20695	operation	
188-21	20695-20696	.	

#Text=The join keys don't require sorting prior to the transformation.
189-1	20697-20700	The	
189-2	20701-20705	join	
189-3	20706-20710	keys	
189-4	20711-20716	don't	
189-5	20717-20724	require	
189-6	20725-20732	sorting	
189-7	20733-20738	prior	
189-8	20739-20741	to	
189-9	20742-20745	the	
189-10	20746-20760	transformation	
189-11	20760-20761	.	

#Text=The Azure Data Factory team doesn't recommend using Sort transformations in mapping data flows.
190-1	20762-20765	The	
190-2	20766-20771	Azure	
190-3	20772-20776	Data	
190-4	20777-20784	Factory	
190-5	20785-20789	team	
190-6	20790-20797	doesn't	
190-7	20798-20807	recommend	
190-8	20808-20813	using	
190-9	20814-20818	Sort	
190-10	20819-20834	transformations	
190-11	20835-20837	in	
190-12	20838-20845	mapping	
190-13	20846-20850	data	
190-14	20851-20856	flows	
190-15	20856-20857	.	

#Text=Window transformation performance
#Text=The Window transformation partitions your data by value in columns that you select as part of the over() clause in the transformation settings.
191-1	20858-20864	Window	
191-2	20865-20879	transformation	
191-3	20880-20891	performance	
191-4	20892-20895	The	
191-5	20896-20902	Window	
191-6	20903-20917	transformation	
191-7	20918-20928	partitions	
191-8	20929-20933	your	
191-9	20934-20938	data	
191-10	20939-20941	by	
191-11	20942-20947	value	
191-12	20948-20950	in	
191-13	20951-20958	columns	
191-14	20959-20963	that	
191-15	20964-20967	you	
191-16	20968-20974	select	
191-17	20975-20977	as	
191-18	20978-20982	part	
191-19	20983-20985	of	
191-20	20986-20989	the	
191-21	20990-20994	over	
191-22	20994-20995	(	
191-23	20995-20996	)	
191-24	20997-21003	clause	
191-25	21004-21006	in	
191-26	21007-21010	the	
191-27	21011-21025	transformation	
191-28	21026-21034	settings	
191-29	21034-21035	.	

#Text=There are a number of very popular aggregate and analytical functions that are exposed in the Windows transformation.
192-1	21036-21041	There	
192-2	21042-21045	are	
192-3	21046-21047	a	
192-4	21048-21054	number	
192-5	21055-21057	of	
192-6	21058-21062	very	
192-7	21063-21070	popular	
192-8	21071-21080	aggregate	
192-9	21081-21084	and	
192-10	21085-21095	analytical	
192-11	21096-21105	functions	
192-12	21106-21110	that	
192-13	21111-21114	are	
192-14	21115-21122	exposed	
192-15	21123-21125	in	
192-16	21126-21129	the	
192-17	21130-21137	Windows	
192-18	21138-21152	transformation	
192-19	21152-21153	.	

#Text=However, if your use case is to generate a window over your entire dataset for the purpose of ranking rank() or row number rowNumber(), it is recommended that you instead use the Rank transformation and the Surrogate Key transformation.
193-1	21154-21161	However	
193-2	21161-21162	,	
193-3	21163-21165	if	
193-4	21166-21170	your	
193-5	21171-21174	use	
193-6	21175-21179	case	
193-7	21180-21182	is	
193-8	21183-21185	to	
193-9	21186-21194	generate	
193-10	21195-21196	a	
193-11	21197-21203	window	
193-12	21204-21208	over	
193-13	21209-21213	your	
193-14	21214-21220	entire	
193-15	21221-21228	dataset	
193-16	21229-21232	for	
193-17	21233-21236	the	
193-18	21237-21244	purpose	
193-19	21245-21247	of	
193-20	21248-21255	ranking	
193-21	21256-21260	rank	
193-22	21260-21261	(	
193-23	21261-21262	)	
193-24	21263-21265	or	
193-25	21266-21269	row	
193-26	21270-21276	number	
193-27	21277-21286	rowNumber	
193-28	21286-21287	(	
193-29	21287-21288	)	
193-30	21288-21289	,	
193-31	21290-21292	it	
193-32	21293-21295	is	
193-33	21296-21307	recommended	
193-34	21308-21312	that	
193-35	21313-21316	you	
193-36	21317-21324	instead	
193-37	21325-21328	use	
193-38	21329-21332	the	
193-39	21333-21337	Rank	
193-40	21338-21352	transformation	
193-41	21353-21356	and	
193-42	21357-21360	the	
193-43	21361-21370	Surrogate	
193-44	21371-21374	Key	
193-45	21375-21389	transformation	
193-46	21389-21390	.	

#Text=Those transformation will perform better again full dataset operations using those functions.
194-1	21391-21396	Those	
194-2	21397-21411	transformation	
194-3	21412-21416	will	
194-4	21417-21424	perform	
194-5	21425-21431	better	
194-6	21432-21437	again	
194-7	21438-21442	full	
194-8	21443-21450	dataset	
194-9	21451-21461	operations	
194-10	21462-21467	using	
194-11	21468-21473	those	
194-12	21474-21483	functions	
194-13	21483-21484	.	

#Text=Repartitioning skewed data
#Text=Certain transformations such as joins and aggregates reshuffle your data partitions and can occasionally lead to skewed data.
195-1	21485-21499	Repartitioning	
195-2	21500-21506	skewed	
195-3	21507-21511	data	
195-4	21512-21519	Certain	
195-5	21520-21535	transformations	
195-6	21536-21540	such	
195-7	21541-21543	as	
195-8	21544-21549	joins	
195-9	21550-21553	and	
195-10	21554-21564	aggregates	
195-11	21565-21574	reshuffle	
195-12	21575-21579	your	
195-13	21580-21584	data	
195-14	21585-21595	partitions	
195-15	21596-21599	and	
195-16	21600-21603	can	
195-17	21604-21616	occasionally	
195-18	21617-21621	lead	
195-19	21622-21624	to	
195-20	21625-21631	skewed	
195-21	21632-21636	data	
195-22	21636-21637	.	

#Text=Skewed data means that data is not evenly distributed across the partitions.
196-1	21638-21644	Skewed	
196-2	21645-21649	data	
196-3	21650-21655	means	
196-4	21656-21660	that	
196-5	21661-21665	data	
196-6	21666-21668	is	
196-7	21669-21672	not	
196-8	21673-21679	evenly	
196-9	21680-21691	distributed	
196-10	21692-21698	across	
196-11	21699-21702	the	
196-12	21703-21713	partitions	
196-13	21713-21714	.	

#Text=Heavily skewed data can lead to slower downstream transformations and sink writes.
197-1	21715-21722	Heavily	
197-2	21723-21729	skewed	
197-3	21730-21734	data	
197-4	21735-21738	can	
197-5	21739-21743	lead	
197-6	21744-21746	to	
197-7	21747-21753	slower	
197-8	21754-21764	downstream	
197-9	21765-21780	transformations	
197-10	21781-21784	and	
197-11	21785-21789	sink	
197-12	21790-21796	writes	
197-13	21796-21797	.	

#Text=You can check the skewness of your data at any point in a data flow run by clicking on the transformation in the monitoring display.
198-1	21798-21801	You	
198-2	21802-21805	can	
198-3	21806-21811	check	
198-4	21812-21815	the	
198-5	21816-21824	skewness	
198-6	21825-21827	of	
198-7	21828-21832	your	
198-8	21833-21837	data	
198-9	21838-21840	at	
198-10	21841-21844	any	
198-11	21845-21850	point	
198-12	21851-21853	in	
198-13	21854-21855	a	
198-14	21856-21860	data	
198-15	21861-21865	flow	
198-16	21866-21869	run	
198-17	21870-21872	by	
198-18	21873-21881	clicking	
198-19	21882-21884	on	
198-20	21885-21888	the	
198-21	21889-21903	transformation	
198-22	21904-21906	in	
198-23	21907-21910	the	
198-24	21911-21921	monitoring	
198-25	21922-21929	display	
198-26	21929-21930	.	

#Text=The monitoring display will show how the data is distributed across each partition along with two metrics, skewness and kurtosis.
199-1	21931-21934	The	
199-2	21935-21945	monitoring	
199-3	21946-21953	display	
199-4	21954-21958	will	
199-5	21959-21963	show	
199-6	21964-21967	how	
199-7	21968-21971	the	
199-8	21972-21976	data	
199-9	21977-21979	is	
199-10	21980-21991	distributed	
199-11	21992-21998	across	
199-12	21999-22003	each	
199-13	22004-22013	partition	
199-14	22014-22019	along	
199-15	22020-22024	with	
199-16	22025-22028	two	
199-17	22029-22036	metrics	
199-18	22036-22037	,	
199-19	22038-22046	skewness	
199-20	22047-22050	and	
199-21	22051-22059	kurtosis	
199-22	22059-22060	.	

#Text=Skewness is a measure of how asymmetrical the data is and can have a positive, zero, negative, or undefined value.
200-1	22061-22069	Skewness	
200-2	22070-22072	is	
200-3	22073-22074	a	
200-4	22075-22082	measure	
200-5	22083-22085	of	
200-6	22086-22089	how	
200-7	22090-22102	asymmetrical	
200-8	22103-22106	the	
200-9	22107-22111	data	
200-10	22112-22114	is	
200-11	22115-22118	and	
200-12	22119-22122	can	
200-13	22123-22127	have	
200-14	22128-22129	a	
200-15	22130-22138	positive	
200-16	22138-22139	,	
200-17	22140-22144	zero	
200-18	22144-22145	,	
200-19	22146-22154	negative	
200-20	22154-22155	,	
200-21	22156-22158	or	
200-22	22159-22168	undefined	
200-23	22169-22174	value	
200-24	22174-22175	.	

#Text=Negative skew means the left tail is longer than the right.
201-1	22176-22184	Negative	
201-2	22185-22189	skew	
201-3	22190-22195	means	
201-4	22196-22199	the	
201-5	22200-22204	left	
201-6	22205-22209	tail	
201-7	22210-22212	is	
201-8	22213-22219	longer	
201-9	22220-22224	than	
201-10	22225-22228	the	
201-11	22229-22234	right	
201-12	22234-22235	.	

#Text=Kurtosis is the measure of whether the data is heavy-tailed or light-tailed.
202-1	22236-22244	Kurtosis	
202-2	22245-22247	is	
202-3	22248-22251	the	
202-4	22252-22259	measure	
202-5	22260-22262	of	
202-6	22263-22270	whether	
202-7	22271-22274	the	
202-8	22275-22279	data	
202-9	22280-22282	is	
202-10	22283-22295	heavy-tailed	
202-11	22296-22298	or	
202-12	22299-22311	light-tailed	
202-13	22311-22312	.	

#Text=High kurtosis values are not desirable.
203-1	22313-22317	High	
203-2	22318-22326	kurtosis	
203-3	22327-22333	values	
203-4	22334-22337	are	
203-5	22338-22341	not	
203-6	22342-22351	desirable	
203-7	22351-22352	.	

#Text=Ideal ranges of skewness lie between -3 and 3 and ranges of kurtosis are less than 10.
204-1	22353-22358	Ideal	
204-2	22359-22365	ranges	
204-3	22366-22368	of	
204-4	22369-22377	skewness	
204-5	22378-22381	lie	
204-6	22382-22389	between	
204-7	22390-22391	-	
204-8	22391-22392	3	
204-9	22393-22396	and	
204-10	22397-22398	3	
204-11	22399-22402	and	
204-12	22403-22409	ranges	
204-13	22410-22412	of	
204-14	22413-22421	kurtosis	
204-15	22422-22425	are	
204-16	22426-22430	less	
204-17	22431-22435	than	
204-18	22436-22438	10	
204-19	22438-22439	.	

#Text=An easy way to interpret these numbers is looking at the partition chart and seeing if 1 bar is significantly larger than the rest.
205-1	22440-22442	An	
205-2	22443-22447	easy	
205-3	22448-22451	way	
205-4	22452-22454	to	
205-5	22455-22464	interpret	
205-6	22465-22470	these	
205-7	22471-22478	numbers	
205-8	22479-22481	is	
205-9	22482-22489	looking	
205-10	22490-22492	at	
205-11	22493-22496	the	
205-12	22497-22506	partition	
205-13	22507-22512	chart	
205-14	22513-22516	and	
205-15	22517-22523	seeing	
205-16	22524-22526	if	
205-17	22527-22528	1	
205-18	22529-22532	bar	
205-19	22533-22535	is	
205-20	22536-22549	significantly	
205-21	22550-22556	larger	
205-22	22557-22561	than	
205-23	22562-22565	the	
205-24	22566-22570	rest	
205-25	22570-22571	.	

#Text=If your data is not evenly partitioned after a transformation, you can use the optimize tab to repartition.
206-1	22572-22574	If	
206-2	22575-22579	your	
206-3	22580-22584	data	
206-4	22585-22587	is	
206-5	22588-22591	not	
206-6	22592-22598	evenly	
206-7	22599-22610	partitioned	
206-8	22611-22616	after	
206-9	22617-22618	a	
206-10	22619-22633	transformation	
206-11	22633-22634	,	
206-12	22635-22638	you	
206-13	22639-22642	can	
206-14	22643-22646	use	
206-15	22647-22650	the	
206-16	22651-22659	optimize	
206-17	22660-22663	tab	
206-18	22664-22666	to	
206-19	22667-22678	repartition	
206-20	22678-22679	.	

#Text=Reshuffling data takes time and may not improve your data flow performance.
207-1	22680-22691	Reshuffling	
207-2	22692-22696	data	
207-3	22697-22702	takes	
207-4	22703-22707	time	
207-5	22708-22711	and	
207-6	22712-22715	may	
207-7	22716-22719	not	
207-8	22720-22727	improve	
207-9	22728-22732	your	
207-10	22733-22737	data	
207-11	22738-22742	flow	
207-12	22743-22754	performance	
207-13	22754-22755	.	

#Text=Tip
#Text=If you repartition your data, but have downstream transformations that reshuffle your data, use hash partitioning on a column used as a join key.
208-1	22756-22759	Tip	
208-2	22760-22762	If	
208-3	22763-22766	you	
208-4	22767-22778	repartition	
208-5	22779-22783	your	
208-6	22784-22788	data	
208-7	22788-22789	,	
208-8	22790-22793	but	
208-9	22794-22798	have	
208-10	22799-22809	downstream	
208-11	22810-22825	transformations	
208-12	22826-22830	that	
208-13	22831-22840	reshuffle	
208-14	22841-22845	your	
208-15	22846-22850	data	
208-16	22850-22851	,	
208-17	22852-22855	use	
208-18	22856-22860	hash	
208-19	22861-22873	partitioning	
208-20	22874-22876	on	
208-21	22877-22878	a	
208-22	22879-22885	column	
208-23	22886-22890	used	
208-24	22891-22893	as	
208-25	22894-22895	a	
208-26	22896-22900	join	
208-27	22901-22904	key	
208-28	22904-22905	.	

#Text=Using data flows in pipelines
#Text=When building complex pipelines with multiple data flows, your logical flow can have a big impact on timing and cost.
209-1	22906-22911	Using	
209-2	22912-22916	data	
209-3	22917-22922	flows	
209-4	22923-22925	in	
209-5	22926-22935	pipelines	
209-6	22936-22940	When	
209-7	22941-22949	building	
209-8	22950-22957	complex	
209-9	22958-22967	pipelines	
209-10	22968-22972	with	
209-11	22973-22981	multiple	
209-12	22982-22986	data	
209-13	22987-22992	flows	
209-14	22992-22993	,	
209-15	22994-22998	your	
209-16	22999-23006	logical	
209-17	23007-23011	flow	
209-18	23012-23015	can	
209-19	23016-23020	have	
209-20	23021-23022	a	
209-21	23023-23026	big	
209-22	23027-23033	impact	
209-23	23034-23036	on	
209-24	23037-23043	timing	
209-25	23044-23047	and	
209-26	23048-23052	cost	
209-27	23052-23053	.	

#Text=This section covers the impact of different architecture strategies.
210-1	23054-23058	This	
210-2	23059-23066	section	
210-3	23067-23073	covers	
210-4	23074-23077	the	
210-5	23078-23084	impact	
210-6	23085-23087	of	
210-7	23088-23097	different	
210-8	23098-23110	architecture	
210-9	23111-23121	strategies	
210-10	23121-23122	.	

#Text=Executing data flows in parallel
#Text=If you execute multiple data flows in parallel, ADF spins up separate Spark clusters for each activity.
211-1	23123-23132	Executing	
211-2	23133-23137	data	
211-3	23138-23143	flows	
211-4	23144-23146	in	
211-5	23147-23155	parallel	
211-6	23156-23158	If	
211-7	23159-23162	you	
211-8	23163-23170	execute	
211-9	23171-23179	multiple	
211-10	23180-23184	data	
211-11	23185-23190	flows	
211-12	23191-23193	in	
211-13	23194-23202	parallel	
211-14	23202-23203	,	
211-15	23204-23207	ADF	
211-16	23208-23213	spins	
211-17	23214-23216	up	
211-18	23217-23225	separate	
211-19	23226-23231	Spark	
211-20	23232-23240	clusters	
211-21	23241-23244	for	
211-22	23245-23249	each	
211-23	23250-23258	activity	
211-24	23258-23259	.	

#Text=This allows for each job to be isolated and run in parallel, but will lead to multiple clusters running at the same time.
212-1	23260-23264	This	
212-2	23265-23271	allows	
212-3	23272-23275	for	
212-4	23276-23280	each	
212-5	23281-23284	job	
212-6	23285-23287	to	
212-7	23288-23290	be	
212-8	23291-23299	isolated	
212-9	23300-23303	and	
212-10	23304-23307	run	
212-11	23308-23310	in	
212-12	23311-23319	parallel	
212-13	23319-23320	,	
212-14	23321-23324	but	
212-15	23325-23329	will	
212-16	23330-23334	lead	
212-17	23335-23337	to	
212-18	23338-23346	multiple	
212-19	23347-23355	clusters	
212-20	23356-23363	running	
212-21	23364-23366	at	
212-22	23367-23370	the	
212-23	23371-23375	same	
212-24	23376-23380	time	
212-25	23380-23381	.	

#Text=If your data flows execute in parallel, its recommended to not enable the Azure IR time to live property as it will lead to multiple unused warm pools.
213-1	23382-23384	If	
213-2	23385-23389	your	
213-3	23390-23394	data	
213-4	23395-23400	flows	
213-5	23401-23408	execute	
213-6	23409-23411	in	
213-7	23412-23420	parallel	
213-8	23420-23421	,	
213-9	23422-23425	its	
213-10	23426-23437	recommended	
213-11	23438-23440	to	
213-12	23441-23444	not	
213-13	23445-23451	enable	
213-14	23452-23455	the	
213-15	23456-23461	Azure	
213-16	23462-23464	IR	
213-17	23465-23469	time	
213-18	23470-23472	to	
213-19	23473-23477	live	
213-20	23478-23486	property	
213-21	23487-23489	as	
213-22	23490-23492	it	
213-23	23493-23497	will	
213-24	23498-23502	lead	
213-25	23503-23505	to	
213-26	23506-23514	multiple	
213-27	23515-23521	unused	
213-28	23522-23526	warm	
213-29	23527-23532	pools	
213-30	23532-23533	.	

#Text=Tip
#Text=Instead of running the same data flow multiple times in a for each activity, stage your data in a data lake and use wildcard paths to process the data in a single data flow.
214-1	23534-23537	Tip	
214-2	23538-23545	Instead	
214-3	23546-23548	of	
214-4	23549-23556	running	
214-5	23557-23560	the	
214-6	23561-23565	same	
214-7	23566-23570	data	
214-8	23571-23575	flow	
214-9	23576-23584	multiple	
214-10	23585-23590	times	
214-11	23591-23593	in	
214-12	23594-23595	a	
214-13	23596-23599	for	
214-14	23600-23604	each	
214-15	23605-23613	activity	
214-16	23613-23614	,	
214-17	23615-23620	stage	
214-18	23621-23625	your	
214-19	23626-23630	data	
214-20	23631-23633	in	
214-21	23634-23635	a	
214-22	23636-23640	data	
214-23	23641-23645	lake	
214-24	23646-23649	and	
214-25	23650-23653	use	
214-26	23654-23662	wildcard	
214-27	23663-23668	paths	
214-28	23669-23671	to	
214-29	23672-23679	process	
214-30	23680-23683	the	
214-31	23684-23688	data	
214-32	23689-23691	in	
214-33	23692-23693	a	
214-34	23694-23700	single	
214-35	23701-23705	data	
214-36	23706-23710	flow	
214-37	23710-23711	.	

#Text=Execute data flows sequentially
#Text=If you execute your data flow activities in sequence, it is recommended that you set a TTL in the Azure IR configuration.
215-1	23712-23719	Execute	
215-2	23720-23724	data	
215-3	23725-23730	flows	
215-4	23731-23743	sequentially	
215-5	23744-23746	If	
215-6	23747-23750	you	
215-7	23751-23758	execute	
215-8	23759-23763	your	
215-9	23764-23768	data	
215-10	23769-23773	flow	
215-11	23774-23784	activities	
215-12	23785-23787	in	
215-13	23788-23796	sequence	
215-14	23796-23797	,	
215-15	23798-23800	it	
215-16	23801-23803	is	
215-17	23804-23815	recommended	
215-18	23816-23820	that	
215-19	23821-23824	you	
215-20	23825-23828	set	
215-21	23829-23830	a	
215-22	23831-23834	TTL	
215-23	23835-23837	in	
215-24	23838-23841	the	
215-25	23842-23847	Azure	
215-26	23848-23850	IR	
215-27	23851-23864	configuration	
215-28	23864-23865	.	

#Text=ADF will reuse the compute resources resulting in a faster cluster start up time.
216-1	23866-23869	ADF	
216-2	23870-23874	will	
216-3	23875-23880	reuse	
216-4	23881-23884	the	
216-5	23885-23892	compute	
216-6	23893-23902	resources	
216-7	23903-23912	resulting	
216-8	23913-23915	in	
216-9	23916-23917	a	
216-10	23918-23924	faster	
216-11	23925-23932	cluster	
216-12	23933-23938	start	
216-13	23939-23941	up	
216-14	23942-23946	time	
216-15	23946-23947	.	

#Text=Each activity will still be isolated receive a new Spark context for each execution.
217-1	23948-23952	Each	
217-2	23953-23961	activity	
217-3	23962-23966	will	
217-4	23967-23972	still	
217-5	23973-23975	be	
217-6	23976-23984	isolated	
217-7	23985-23992	receive	
217-8	23993-23994	a	
217-9	23995-23998	new	
217-10	23999-24004	Spark	
217-11	24005-24012	context	
217-12	24013-24016	for	
217-13	24017-24021	each	
217-14	24022-24031	execution	
217-15	24031-24032	.	

#Text=Running jobs sequentially will likely take the longest time to execute end-to-end, but provides a clean separation of logical operations.
218-1	24033-24040	Running	
218-2	24041-24045	jobs	
218-3	24046-24058	sequentially	
218-4	24059-24063	will	
218-5	24064-24070	likely	
218-6	24071-24075	take	
218-7	24076-24079	the	
218-8	24080-24087	longest	
218-9	24088-24092	time	
218-10	24093-24095	to	
218-11	24096-24103	execute	
218-12	24104-24114	end-to-end	
218-13	24114-24115	,	
218-14	24116-24119	but	
218-15	24120-24128	provides	
218-16	24129-24130	a	
218-17	24131-24136	clean	
218-18	24137-24147	separation	
218-19	24148-24150	of	
218-20	24151-24158	logical	
218-21	24159-24169	operations	
218-22	24169-24170	.	

#Text=Overloading a single data flow
#Text=If you put all of your logic inside of a single data flow, ADF will execute the entire job on a single Spark instance.
219-1	24171-24182	Overloading	
219-2	24183-24184	a	
219-3	24185-24191	single	
219-4	24192-24196	data	
219-5	24197-24201	flow	
219-6	24202-24204	If	
219-7	24205-24208	you	
219-8	24209-24212	put	
219-9	24213-24216	all	
219-10	24217-24219	of	
219-11	24220-24224	your	
219-12	24225-24230	logic	
219-13	24231-24237	inside	
219-14	24238-24240	of	
219-15	24241-24242	a	
219-16	24243-24249	single	
219-17	24250-24254	data	
219-18	24255-24259	flow	
219-19	24259-24260	,	
219-20	24261-24264	ADF	
219-21	24265-24269	will	
219-22	24270-24277	execute	
219-23	24278-24281	the	
219-24	24282-24288	entire	
219-25	24289-24292	job	
219-26	24293-24295	on	
219-27	24296-24297	a	
219-28	24298-24304	single	
219-29	24305-24310	Spark	
219-30	24311-24319	instance	
219-31	24319-24320	.	

#Text=While this may seem like a way to reduce costs, it mixes together different logical flows and can be difficult to monitor and debug.
220-1	24321-24326	While	
220-2	24327-24331	this	
220-3	24332-24335	may	
220-4	24336-24340	seem	
220-5	24341-24345	like	
220-6	24346-24347	a	
220-7	24348-24351	way	
220-8	24352-24354	to	
220-9	24355-24361	reduce	
220-10	24362-24367	costs	
220-11	24367-24368	,	
220-12	24369-24371	it	
220-13	24372-24377	mixes	
220-14	24378-24386	together	
220-15	24387-24396	different	
220-16	24397-24404	logical	
220-17	24405-24410	flows	
220-18	24411-24414	and	
220-19	24415-24418	can	
220-20	24419-24421	be	
220-21	24422-24431	difficult	
220-22	24432-24434	to	
220-23	24435-24442	monitor	
220-24	24443-24446	and	
220-25	24447-24452	debug	
220-26	24452-24453	.	

#Text=If one component fails, all other parts of the job will fail as well.
221-1	24454-24456	If	
221-2	24457-24460	one	
221-3	24461-24470	component	
221-4	24471-24476	fails	
221-5	24476-24477	,	
221-6	24478-24481	all	
221-7	24482-24487	other	
221-8	24488-24493	parts	
221-9	24494-24496	of	
221-10	24497-24500	the	
221-11	24501-24504	job	
221-12	24505-24509	will	
221-13	24510-24514	fail	
221-14	24515-24517	as	
221-15	24518-24522	well	
221-16	24522-24523	.	

#Text=The Azure Data Factory team recommends organizing data flows by independent flows of business logic.
222-1	24524-24527	The	
222-2	24528-24533	Azure	
222-3	24534-24538	Data	
222-4	24539-24546	Factory	
222-5	24547-24551	team	
222-6	24552-24562	recommends	
222-7	24563-24573	organizing	
222-8	24574-24578	data	
222-9	24579-24584	flows	
222-10	24585-24587	by	
222-11	24588-24599	independent	
222-12	24600-24605	flows	
222-13	24606-24608	of	
222-14	24609-24617	business	
222-15	24618-24623	logic	
222-16	24623-24624	.	

#Text=If your data flow becomes too large, splitting it into separates components will make monitoring and debugging easier.
223-1	24625-24627	If	
223-2	24628-24632	your	
223-3	24633-24637	data	
223-4	24638-24642	flow	
223-5	24643-24650	becomes	
223-6	24651-24654	too	
223-7	24655-24660	large	
223-8	24660-24661	,	
223-9	24662-24671	splitting	
223-10	24672-24674	it	
223-11	24675-24679	into	
223-12	24680-24689	separates	
223-13	24690-24700	components	
223-14	24701-24705	will	
223-15	24706-24710	make	
223-16	24711-24721	monitoring	
223-17	24722-24725	and	
223-18	24726-24735	debugging	
223-19	24736-24742	easier	
223-20	24742-24743	.	

#Text=While there is no hard limit on the number of transformations in a data flow, having too many will make the job complex.
224-1	24744-24749	While	
224-2	24750-24755	there	
224-3	24756-24758	is	
224-4	24759-24761	no	
224-5	24762-24766	hard	
224-6	24767-24772	limit	
224-7	24773-24775	on	
224-8	24776-24779	the	
224-9	24780-24786	number	
224-10	24787-24789	of	
224-11	24790-24805	transformations	
224-12	24806-24808	in	
224-13	24809-24810	a	
224-14	24811-24815	data	
224-15	24816-24820	flow	
224-16	24820-24821	,	
224-17	24822-24828	having	
224-18	24829-24832	too	
224-19	24833-24837	many	
224-20	24838-24842	will	
224-21	24843-24847	make	
224-22	24848-24851	the	
224-23	24852-24855	job	
224-24	24856-24863	complex	
224-25	24863-24864	.	

#Text=Execute sinks in parallel
#Text=The default behavior of data flow sinks is to execute each sink sequentially, in a serial manner, and to fail the data flow when an error is encountered in the sink.
225-1	24865-24872	Execute	
225-2	24873-24878	sinks	
225-3	24879-24881	in	
225-4	24882-24890	parallel	
225-5	24891-24894	The	
225-6	24895-24902	default	
225-7	24903-24911	behavior	
225-8	24912-24914	of	
225-9	24915-24919	data	
225-10	24920-24924	flow	
225-11	24925-24930	sinks	
225-12	24931-24933	is	
225-13	24934-24936	to	
225-14	24937-24944	execute	
225-15	24945-24949	each	
225-16	24950-24954	sink	
225-17	24955-24967	sequentially	
225-18	24967-24968	,	
225-19	24969-24971	in	
225-20	24972-24973	a	
225-21	24974-24980	serial	
225-22	24981-24987	manner	
225-23	24987-24988	,	
225-24	24989-24992	and	
225-25	24993-24995	to	
225-26	24996-25000	fail	
225-27	25001-25004	the	
225-28	25005-25009	data	
225-29	25010-25014	flow	
225-30	25015-25019	when	
225-31	25020-25022	an	
225-32	25023-25028	error	
225-33	25029-25031	is	
225-34	25032-25043	encountered	
225-35	25044-25046	in	
225-36	25047-25050	the	
225-37	25051-25055	sink	
225-38	25055-25056	.	

#Text=Additionally, all sinks are defaulted to the same group unless you go into the data flow properties and set different priorities for the sinks.
226-1	25057-25069	Additionally	
226-2	25069-25070	,	
226-3	25071-25074	all	
226-4	25075-25080	sinks	
226-5	25081-25084	are	
226-6	25085-25094	defaulted	
226-7	25095-25097	to	
226-8	25098-25101	the	
226-9	25102-25106	same	
226-10	25107-25112	group	
226-11	25113-25119	unless	
226-12	25120-25123	you	
226-13	25124-25126	go	
226-14	25127-25131	into	
226-15	25132-25135	the	
226-16	25136-25140	data	
226-17	25141-25145	flow	
226-18	25146-25156	properties	
226-19	25157-25160	and	
226-20	25161-25164	set	
226-21	25165-25174	different	
226-22	25175-25185	priorities	
226-23	25186-25189	for	
226-24	25190-25193	the	
226-25	25194-25199	sinks	
226-26	25199-25200	.	

#Text=Data flows allow you to group sinks together into groups from the data flow properties tab in the UI designer.
227-1	25201-25205	Data	
227-2	25206-25211	flows	
227-3	25212-25217	allow	
227-4	25218-25221	you	
227-5	25222-25224	to	
227-6	25225-25230	group	
227-7	25231-25236	sinks	
227-8	25237-25245	together	
227-9	25246-25250	into	
227-10	25251-25257	groups	
227-11	25258-25262	from	
227-12	25263-25266	the	
227-13	25267-25271	data	
227-14	25272-25276	flow	
227-15	25277-25287	properties	
227-16	25288-25291	tab	
227-17	25292-25294	in	
227-18	25295-25298	the	
227-19	25299-25301	UI	
227-20	25302-25310	designer	
227-21	25310-25311	.	

#Text=You can both set the order of execution of your sinks as well as to group sinks together using the same group number.
228-1	25312-25315	You	
228-2	25316-25319	can	
228-3	25320-25324	both	
228-4	25325-25328	set	
228-5	25329-25332	the	
228-6	25333-25338	order	
228-7	25339-25341	of	
228-8	25342-25351	execution	
228-9	25352-25354	of	
228-10	25355-25359	your	
228-11	25360-25365	sinks	
228-12	25366-25368	as	
228-13	25369-25373	well	
228-14	25374-25376	as	
228-15	25377-25379	to	
228-16	25380-25385	group	
228-17	25386-25391	sinks	
228-18	25392-25400	together	
228-19	25401-25406	using	
228-20	25407-25410	the	
228-21	25411-25415	same	
228-22	25416-25421	group	
228-23	25422-25428	number	
228-24	25428-25429	.	

#Text=To help manage groups, you can ask ADF to run sinks in the same group, to run in parallel.
229-1	25430-25432	To	
229-2	25433-25437	help	
229-3	25438-25444	manage	
229-4	25445-25451	groups	
229-5	25451-25452	,	
229-6	25453-25456	you	
229-7	25457-25460	can	
229-8	25461-25464	ask	
229-9	25465-25468	ADF	
229-10	25469-25471	to	
229-11	25472-25475	run	
229-12	25476-25481	sinks	
229-13	25482-25484	in	
229-14	25485-25488	the	
229-15	25489-25493	same	
229-16	25494-25499	group	
229-17	25499-25500	,	
229-18	25501-25503	to	
229-19	25504-25507	run	
229-20	25508-25510	in	
229-21	25511-25519	parallel	
229-22	25519-25520	.	

#Text=On the pipeline execute data flow activity under the "Sink Properties" section is an option to turn on parallel sink loading.
230-1	25521-25523	On	
230-2	25524-25527	the	
230-3	25528-25536	pipeline	
230-4	25537-25544	execute	
230-5	25545-25549	data	
230-6	25550-25554	flow	
230-7	25555-25563	activity	
230-8	25564-25569	under	
230-9	25570-25573	the	
230-10	25574-25575	"	
230-11	25575-25579	Sink	
230-12	25580-25590	Properties	
230-13	25590-25591	"	
230-14	25592-25599	section	
230-15	25600-25602	is	
230-16	25603-25605	an	
230-17	25606-25612	option	
230-18	25613-25615	to	
230-19	25616-25620	turn	
230-20	25621-25623	on	
230-21	25624-25632	parallel	
230-22	25633-25637	sink	
230-23	25638-25645	loading	
230-24	25645-25646	.	

#Text=When you enable "run in parallel", you are instructing data flows write to connected sinks at the same time rather than in a sequential manner.
231-1	25647-25651	When	
231-2	25652-25655	you	
231-3	25656-25662	enable	
231-4	25663-25664	"	
231-5	25664-25667	run	
231-6	25668-25670	in	
231-7	25671-25679	parallel	
231-8	25679-25680	"	
231-9	25680-25681	,	
231-10	25682-25685	you	
231-11	25686-25689	are	
231-12	25690-25701	instructing	
231-13	25702-25706	data	
231-14	25707-25712	flows	
231-15	25713-25718	write	
231-16	25719-25721	to	
231-17	25722-25731	connected	
231-18	25732-25737	sinks	
231-19	25738-25740	at	
231-20	25741-25744	the	
231-21	25745-25749	same	
231-22	25750-25754	time	
231-23	25755-25761	rather	
231-24	25762-25766	than	
231-25	25767-25769	in	
231-26	25770-25771	a	
231-27	25772-25782	sequential	
231-28	25783-25789	manner	
231-29	25789-25790	.	

#Text=In order to utilize the parallel option, the sinks must be group together and connected to the same stream via a New Branch or Conditional Split.
232-1	25791-25793	In	
232-2	25794-25799	order	
232-3	25800-25802	to	
232-4	25803-25810	utilize	
232-5	25811-25814	the	
232-6	25815-25823	parallel	
232-7	25824-25830	option	
232-8	25830-25831	,	
232-9	25832-25835	the	
232-10	25836-25841	sinks	
232-11	25842-25846	must	
232-12	25847-25849	be	
232-13	25850-25855	group	
232-14	25856-25864	together	
232-15	25865-25868	and	
232-16	25869-25878	connected	
232-17	25879-25881	to	
232-18	25882-25885	the	
232-19	25886-25890	same	
232-20	25891-25897	stream	
232-21	25898-25901	via	
232-22	25902-25903	a	
232-23	25904-25907	New	
232-24	25908-25914	Branch	
232-25	25915-25917	or	
232-26	25918-25929	Conditional	
232-27	25930-25935	Split	
232-28	25935-25936	.	

#Text=Next steps
#Text=See other Data Flow articles related to performance:
#Text=Data Flow activity
#Text=Monitor Data Flow performance
#Text=Is this page helpful?
233-1	25937-25941	Next	
233-2	25942-25947	steps	
233-3	25948-25951	See	
233-4	25952-25957	other	
233-5	25958-25962	Data	
233-6	25963-25967	Flow	
233-7	25968-25976	articles	
233-8	25977-25984	related	
233-9	25985-25987	to	
233-10	25988-25999	performance	
233-11	25999-26000	:	
233-12	26001-26005	Data	
233-13	26006-26010	Flow	
233-14	26011-26019	activity	
233-15	26020-26027	Monitor	
233-16	26028-26032	Data	
233-17	26033-26037	Flow	
233-18	26038-26049	performance	
233-19	26050-26052	Is	
233-20	26053-26057	this	
233-21	26058-26062	page	
233-22	26063-26070	helpful	
233-23	26070-26071	?	

#Text=Yes
#Text=Any additional feedback?
234-1	26072-26075	Yes	
234-2	26076-26079	Any	
234-3	26080-26090	additional	
234-4	26091-26099	feedback	
234-5	26099-26100	?	

#Text=Skip
#Text=Submit
#Text=Thank you.
235-1	26101-26105	Skip	
235-2	26106-26112	Submit	
235-3	26113-26118	Thank	
235-4	26119-26122	you	
235-5	26122-26123	.	

#Text=Feedback
#Text=Submit and view feedback for
#Text=This product
#Text=This page
#Text=View all page feedback
#Text=Theme
#Text=Light
#Text=Dark
#Text=High contrast
#Text=Previous Version Docs
#Text=Blog
#Text=Contribute
#Text=Privacy & Cookies
#Text=Terms of Use
#Text=Trademarks
#Text=© Microsoft 2021
#Text=Is this page helpful?
236-1	26124-26132	Feedback	
236-2	26133-26139	Submit	
236-3	26140-26143	and	
236-4	26144-26148	view	
236-5	26149-26157	feedback	
236-6	26158-26161	for	
236-7	26162-26166	This	
236-8	26167-26174	product	
236-9	26175-26179	This	
236-10	26180-26184	page	
236-11	26185-26189	View	
236-12	26190-26193	all	
236-13	26194-26198	page	
236-14	26199-26207	feedback	
236-15	26208-26213	Theme	
236-16	26214-26219	Light	
236-17	26220-26224	Dark	
236-18	26225-26229	High	
236-19	26230-26238	contrast	
236-20	26239-26247	Previous	
236-21	26248-26255	Version	
236-22	26256-26260	Docs	
236-23	26261-26265	Blog	
236-24	26266-26276	Contribute	
236-25	26277-26284	Privacy	
236-26	26285-26286	&	
236-27	26287-26294	Cookies	
236-28	26295-26300	Terms	
236-29	26301-26303	of	
236-30	26304-26307	Use	
236-31	26308-26318	Trademarks	
236-32	26319-26320	©	
236-33	26321-26330	Microsoft	
236-34	26331-26335	2021	
236-35	26336-26338	Is	
236-36	26339-26343	this	
236-37	26344-26348	page	
236-38	26349-26356	helpful	
236-39	26356-26357	?	

#Text=Yes
#Text=Any additional feedback?
237-1	26358-26361	Yes	
237-2	26362-26365	Any	
237-3	26366-26376	additional	
237-4	26377-26385	feedback	
237-5	26385-26386	?	

#Text=Skip
#Text=Submit
#Text=Thank you.
238-1	26387-26391	Skip	
238-2	26392-26398	Submit	
238-3	26399-26404	Thank	
238-4	26405-26408	you	
238-5	26408-26409	.	

#Text=In this article
#Text=Theme
#Text=Light
#Text=Dark
#Text=High contrast
#Text=Previous Version Docs
#Text=Blog
#Text=Contribute
#Text=Privacy & Cookies
#Text=Terms of Use
#Text=Trademarks
#Text=© Microsoft 2021
239-1	26410-26412	In	
239-2	26413-26417	this	
239-3	26418-26425	article	
239-4	26426-26431	Theme	
239-5	26432-26437	Light	
239-6	26438-26442	Dark	
239-7	26443-26447	High	
239-8	26448-26456	contrast	
239-9	26457-26465	Previous	
239-10	26466-26473	Version	
239-11	26474-26478	Docs	
239-12	26479-26483	Blog	
239-13	26484-26494	Contribute	
239-14	26495-26502	Privacy	
239-15	26503-26504	&	
239-16	26505-26512	Cookies	
239-17	26513-26518	Terms	
239-18	26519-26521	of	
239-19	26522-26525	Use	
239-20	26526-26536	Trademarks	
239-21	26537-26538	©	
239-22	26539-26548	Microsoft	
239-23	26549-26553	2021	
