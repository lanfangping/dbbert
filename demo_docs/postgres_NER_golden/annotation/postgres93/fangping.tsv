#FORMAT=WebAnno TSV 3.3


#Text=Troubleshoot Performance Issues Using Flight Recorder
#Text=Previous
#Text=Next
#Text=JavaScript must be enabled to correctly display this content
#Text=Troubleshooting Guide
#Text=General Java Troubleshooting
#Text=Troubleshoot Performance Issues Using Flight Recorder
#Text=4 Troubleshoot Performance Issues Using Flight Recorder
#Text=Identify performance issues with a Java application and debug these issues using flight recordings.
1-1	0-12	Troubleshoot	
1-2	13-24	Performance	
1-3	25-31	Issues	
1-4	32-37	Using	
1-5	38-44	Flight	
1-6	45-53	Recorder	
1-7	54-62	Previous	
1-8	63-67	Next	
1-9	68-78	JavaScript	
1-10	79-83	must	
1-11	84-86	be	
1-12	87-94	enabled	
1-13	95-97	to	
1-14	98-107	correctly	
1-15	108-115	display	
1-16	116-120	this	
1-17	121-128	content	
1-18	129-144	Troubleshooting	
1-19	145-150	Guide	
1-20	151-158	General	
1-21	159-163	Java	
1-22	164-179	Troubleshooting	
1-23	180-192	Troubleshoot	
1-24	193-204	Performance	
1-25	205-211	Issues	
1-26	212-217	Using	
1-27	218-224	Flight	
1-28	225-233	Recorder	
1-29	234-235	4	
1-30	236-248	Troubleshoot	
1-31	249-260	Performance	
1-32	261-267	Issues	
1-33	268-273	Using	
1-34	274-280	Flight	
1-35	281-289	Recorder	
1-36	290-298	Identify	
1-37	299-310	performance	
1-38	311-317	issues	
1-39	318-322	with	
1-40	323-324	a	
1-41	325-329	Java	
1-42	330-341	application	
1-43	342-345	and	
1-44	346-351	debug	
1-45	352-357	these	
1-46	358-364	issues	
1-47	365-370	using	
1-48	371-377	flight	
1-49	378-388	recordings	
1-50	388-389	.	

#Text=To learn more about creating a recording with Flight Recorder in JMC, see Use JMC to Start a Flight Recording.
2-1	390-392	To	
2-2	393-398	learn	
2-3	399-403	more	
2-4	404-409	about	
2-5	410-418	creating	
2-6	419-420	a	
2-7	421-430	recording	
2-8	431-435	with	
2-9	436-442	Flight	
2-10	443-451	Recorder	
2-11	452-454	in	
2-12	455-458	JMC	
2-13	458-459	,	
2-14	460-463	see	
2-15	464-467	Use	
2-16	468-471	JMC	
2-17	472-474	to	
2-18	475-480	Start	
2-19	481-482	a	
2-20	483-489	Flight	
2-21	490-499	Recording	
2-22	499-500	.	

#Text=The data provided by Flight Recorder helps you investigate performance issues.
3-1	501-504	The	
3-2	505-509	data	
3-3	510-518	provided	
3-4	519-521	by	
3-5	522-528	Flight	
3-6	529-537	Recorder	
3-7	538-543	helps	
3-8	544-547	you	
3-9	548-559	investigate	
3-10	560-571	performance	
3-11	572-578	issues	
3-12	578-579	.	

#Text=No other tool gives as much profiling data without skewing the results with its own performance overhead.
4-1	580-582	No	
4-2	583-588	other	
4-3	589-593	tool	
4-4	594-599	gives	
4-5	600-602	as	
4-6	603-607	much	
4-7	608-617	profiling	
4-8	618-622	data	
4-9	623-630	without	
4-10	631-638	skewing	
4-11	639-642	the	
4-12	643-650	results	
4-13	651-655	with	
4-14	656-659	its	
4-15	660-663	own	
4-16	664-675	performance	
4-17	676-684	overhead	
4-18	684-685	.	

#Text=This chapter provides information about performance issues that you can identify and debug using data from Flight Recorder.
5-1	686-690	This	
5-2	691-698	chapter	
5-3	699-707	provides	
5-4	708-719	information	
5-5	720-725	about	
5-6	726-737	performance	
5-7	738-744	issues	
5-8	745-749	that	
5-9	750-753	you	
5-10	754-757	can	
5-11	758-766	identify	
5-12	767-770	and	
5-13	771-776	debug	
5-14	777-782	using	
5-15	783-787	data	
5-16	788-792	from	
5-17	793-799	Flight	
5-18	800-808	Recorder	
5-19	808-809	.	

#Text=This chapter contains the following sections:
#Text=Flight Recorder Overhead
#Text=Find Bottlenecks
#Text=Garbage Collection Performance
#Text=Synchronization Performance
#Text=I/O Performance
#Text=Code Execution Performance
#Text=Flight Recorder Overhead
#Text=When you measure performance, it is important to consider any performance overhead added by Flight Recorder.
6-1	810-814	This	
6-2	815-822	chapter	
6-3	823-831	contains	
6-4	832-835	the	
6-5	836-845	following	
6-6	846-854	sections	
6-7	854-855	:	
6-8	856-862	Flight	
6-9	863-871	Recorder	
6-10	872-880	Overhead	
6-11	881-885	Find	
6-12	886-897	Bottlenecks	
6-13	898-905	Garbage	
6-14	906-916	Collection	
6-15	917-928	Performance	
6-16	929-944	Synchronization	
6-17	945-956	Performance	
6-18	957-958	I	
6-19	958-959	/	
6-20	959-960	O	
6-21	961-972	Performance	
6-22	973-977	Code	
6-23	978-987	Execution	
6-24	988-999	Performance	
6-25	1000-1006	Flight	
6-26	1007-1015	Recorder	
6-27	1016-1024	Overhead	
6-28	1025-1029	When	
6-29	1030-1033	you	
6-30	1034-1041	measure	
6-31	1042-1053	performance	
6-32	1053-1054	,	
6-33	1055-1057	it	
6-34	1058-1060	is	
6-35	1061-1070	important	
6-36	1071-1073	to	
6-37	1074-1082	consider	
6-38	1083-1086	any	
6-39	1087-1098	performance	
6-40	1099-1107	overhead	
6-41	1108-1113	added	
6-42	1114-1116	by	
6-43	1117-1123	Flight	
6-44	1124-1132	Recorder	
6-45	1132-1133	.	

#Text=The overhead will differ depending on the application.
7-1	1134-1137	The	
7-2	1138-1146	overhead	
7-3	1147-1151	will	
7-4	1152-1158	differ	
7-5	1159-1168	depending	
7-6	1169-1171	on	
7-7	1172-1175	the	
7-8	1176-1187	application	
7-9	1187-1188	.	

#Text=If you have any performance tests set up, you can measure if there is any noticeable overhead on your application.
8-1	1189-1191	If	
8-2	1192-1195	you	
8-3	1196-1200	have	
8-4	1201-1204	any	
8-5	1205-1216	performance	
8-6	1217-1222	tests	
8-7	1223-1226	set	
8-8	1227-1229	up	
8-9	1229-1230	,	
8-10	1231-1234	you	
8-11	1235-1238	can	
8-12	1239-1246	measure	
8-13	1247-1249	if	
8-14	1250-1255	there	
8-15	1256-1258	is	
8-16	1259-1262	any	
8-17	1263-1273	noticeable	
8-18	1274-1282	overhead	
8-19	1283-1285	on	
8-20	1286-1290	your	
8-21	1291-1302	application	
8-22	1302-1303	.	

#Text=The overhead for recording a standard time fixed recording (profiling recording) using the default settings is less than two percent for most applications.
9-1	1304-1307	The	
9-2	1308-1316	overhead	
9-3	1317-1320	for	
9-4	1321-1330	recording	
9-5	1331-1332	a	
9-6	1333-1341	standard	
9-7	1342-1346	time	
9-8	1347-1352	fixed	
9-9	1353-1362	recording	
9-10	1363-1364	(	
9-11	1364-1373	profiling	
9-12	1374-1383	recording	
9-13	1383-1384	)	
9-14	1385-1390	using	
9-15	1391-1394	the	
9-16	1395-1402	default	
9-17	1403-1411	settings	
9-18	1412-1414	is	
9-19	1415-1419	less	
9-20	1420-1424	than	
9-21	1425-1428	two	
9-22	1429-1436	percent	
9-23	1437-1440	for	
9-24	1441-1445	most	
9-25	1446-1458	applications	
9-26	1458-1459	.	

#Text=Running with a standard continuous recording generally has no measurable performance effect.
10-1	1460-1467	Running	
10-2	1468-1472	with	
10-3	1473-1474	a	
10-4	1475-1483	standard	
10-5	1484-1494	continuous	
10-6	1495-1504	recording	
10-7	1505-1514	generally	
10-8	1515-1518	has	
10-9	1519-1521	no	
10-10	1522-1532	measurable	
10-11	1533-1544	performance	
10-12	1545-1551	effect	
10-13	1551-1552	.	

#Text=Using Heap Statistics event, which is disabled by default, can cause significant performance overhead.
11-1	1553-1558	Using	
11-2	1559-1563	Heap	
11-3	1564-1574	Statistics	
11-4	1575-1580	event	
11-5	1580-1581	,	
11-6	1582-1587	which	
11-7	1588-1590	is	
11-8	1591-1599	disabled	
11-9	1600-1602	by	
11-10	1603-1610	default	
11-11	1610-1611	,	
11-12	1612-1615	can	
11-13	1616-1621	cause	
11-14	1622-1633	significant	
11-15	1634-1645	performance	
11-16	1646-1654	overhead	
11-17	1654-1655	.	

#Text=This is because enabling Heap Statistics triggers an old garbage collection at the beginning and the at end of the test run.
12-1	1656-1660	This	
12-2	1661-1663	is	
12-3	1664-1671	because	
12-4	1672-1680	enabling	
12-5	1681-1685	Heap	
12-6	1686-1696	Statistics	
12-7	1697-1705	triggers	
12-8	1706-1708	an	
12-9	1709-1712	old	
12-10	1713-1720	garbage	
12-11	1721-1731	collection	
12-12	1732-1734	at	
12-13	1735-1738	the	
12-14	1739-1748	beginning	
12-15	1749-1752	and	
12-16	1753-1756	the	
12-17	1757-1759	at	
12-18	1760-1763	end	
12-19	1764-1766	of	
12-20	1767-1770	the	
12-21	1771-1775	test	
12-22	1776-1779	run	
12-23	1779-1780	.	

#Text=These old GCs give some extra pause times to the application, so if you are measuring latency or if your environment is sensitive to pause times, do not run with Heap Statistics enabled.
13-1	1781-1786	These	
13-2	1787-1790	old	
13-3	1791-1794	GCs	
13-4	1795-1799	give	
13-5	1800-1804	some	
13-6	1805-1810	extra	
13-7	1811-1816	pause	
13-8	1817-1822	times	
13-9	1823-1825	to	
13-10	1826-1829	the	
13-11	1830-1841	application	
13-12	1841-1842	,	
13-13	1843-1845	so	
13-14	1846-1848	if	
13-15	1849-1852	you	
13-16	1853-1856	are	
13-17	1857-1866	measuring	
13-18	1867-1874	latency	
13-19	1875-1877	or	
13-20	1878-1880	if	
13-21	1881-1885	your	
13-22	1886-1897	environment	
13-23	1898-1900	is	
13-24	1901-1910	sensitive	
13-25	1911-1913	to	
13-26	1914-1919	pause	
13-27	1920-1925	times	
13-28	1925-1926	,	
13-29	1927-1929	do	
13-30	1930-1933	not	
13-31	1934-1937	run	
13-32	1938-1942	with	
13-33	1943-1947	Heap	
13-34	1948-1958	Statistics	
13-35	1959-1966	enabled	
13-36	1966-1967	.	

#Text=Heap Statistics are useful when debugging memory leaks or when investigating the live set of the application.
14-1	1968-1972	Heap	
14-2	1973-1983	Statistics	
14-3	1984-1987	are	
14-4	1988-1994	useful	
14-5	1995-1999	when	
14-6	2000-2009	debugging	
14-7	2010-2016	memory	
14-8	2017-2022	leaks	
14-9	2023-2025	or	
14-10	2026-2030	when	
14-11	2031-2044	investigating	
14-12	2045-2048	the	
14-13	2049-2053	live	
14-14	2054-2057	set	
14-15	2058-2060	of	
14-16	2061-2064	the	
14-17	2065-2076	application	
14-18	2076-2077	.	

#Text=For more information, see Use JDK Mission Control to Debug Memory Leak.
15-1	2078-2081	For	
15-2	2082-2086	more	
15-3	2087-2098	information	
15-4	2098-2099	,	
15-5	2100-2103	see	
15-6	2104-2107	Use	
15-7	2108-2111	JDK	
15-8	2112-2119	Mission	
15-9	2120-2127	Control	
15-10	2128-2130	to	
15-11	2131-2136	Debug	
15-12	2137-2143	Memory	
15-13	2144-2148	Leak	
15-14	2148-2149	.	

#Text=Note:For performance profiling use cases, heap statistics may not be necessary.
16-1	2150-2154	Note	
16-2	2154-2155	:	
16-3	2155-2158	For	
16-4	2159-2170	performance	
16-5	2171-2180	profiling	
16-6	2181-2184	use	
16-7	2185-2190	cases	
16-8	2190-2191	,	
16-9	2192-2196	heap	
16-10	2197-2207	statistics	
16-11	2208-2211	may	
16-12	2212-2215	not	
16-13	2216-2218	be	
16-14	2219-2228	necessary	
16-15	2228-2229	.	

#Text=Find Bottlenecks
#Text=Different applications have different bottlenecks.
17-1	2230-2234	Find	
17-2	2235-2246	Bottlenecks	
17-3	2247-2256	Different	
17-4	2257-2269	applications	
17-5	2270-2274	have	
17-6	2275-2284	different	
17-7	2285-2296	bottlenecks	
17-8	2296-2297	.	

#Text=Waiting for I/O or networking, synchronization between threads, CPU usage or garbage collection times can cause bottlenecks in an application.
18-1	2298-2305	Waiting	
18-2	2306-2309	for	
18-3	2310-2311	I	
18-4	2311-2312	/	
18-5	2312-2313	O	
18-6	2314-2316	or	
18-7	2317-2327	networking	
18-8	2327-2328	,	
18-9	2329-2344	synchronization	
18-10	2345-2352	between	
18-11	2353-2360	threads	
18-12	2360-2361	,	
18-13	2362-2365	CPU	
18-14	2366-2371	usage	
18-15	2372-2374	or	
18-16	2375-2382	garbage	
18-17	2383-2393	collection	
18-18	2394-2399	times	
18-19	2400-2403	can	
18-20	2404-2409	cause	
18-21	2410-2421	bottlenecks	
18-22	2422-2424	in	
18-23	2425-2427	an	
18-24	2428-2439	application	
18-25	2439-2440	.	

#Text=It is possible that an application has more than one bottleneck.
19-1	2441-2443	It	
19-2	2444-2446	is	
19-3	2447-2455	possible	
19-4	2456-2460	that	
19-5	2461-2463	an	
19-6	2464-2475	application	
19-7	2476-2479	has	
19-8	2480-2484	more	
19-9	2485-2489	than	
19-10	2490-2493	one	
19-11	2494-2504	bottleneck	
19-12	2504-2505	.	

#Text=Topics:
#Text=Use JDK Mission Control to Find Bottlenecks
#Text=Use the jfr Tool to Find Bottlenecks
#Text=Use JDK Mission Control to Find Bottlenecks
#Text=You can use JMC to find application bottlenecks.
20-1	2506-2512	Topics	
20-2	2512-2513	:	
20-3	2514-2517	Use	
20-4	2518-2521	JDK	
20-5	2522-2529	Mission	
20-6	2530-2537	Control	
20-7	2538-2540	to	
20-8	2541-2545	Find	
20-9	2546-2557	Bottlenecks	
20-10	2558-2561	Use	
20-11	2562-2565	the	
20-12	2566-2569	jfr	
20-13	2570-2574	Tool	
20-14	2575-2577	to	
20-15	2578-2582	Find	
20-16	2583-2594	Bottlenecks	
20-17	2595-2598	Use	
20-18	2599-2602	JDK	
20-19	2603-2610	Mission	
20-20	2611-2618	Control	
20-21	2619-2621	to	
20-22	2622-2626	Find	
20-23	2627-2638	Bottlenecks	
20-24	2639-2642	You	
20-25	2643-2646	can	
20-26	2647-2650	use	
20-27	2651-2654	JMC	
20-28	2655-2657	to	
20-29	2658-2662	find	
20-30	2663-2674	application	
20-31	2675-2686	bottlenecks	
20-32	2686-2687	.	

#Text=One way to find out the application bottlenecks is to analyze the Automated Analysis Results
#Text=page.
21-1	2688-2691	One	
21-2	2692-2695	way	
21-3	2696-2698	to	
21-4	2699-2703	find	
21-5	2704-2707	out	
21-6	2708-2711	the	
21-7	2712-2723	application	
21-8	2724-2735	bottlenecks	
21-9	2736-2738	is	
21-10	2739-2741	to	
21-11	2742-2749	analyze	
21-12	2750-2753	the	
21-13	2754-2763	Automated	
21-14	2764-2772	Analysis	
21-15	2773-2780	Results	
21-16	2781-2785	page	
21-17	2785-2786	.	

#Text=This page provides comprehensive automatic analysis of flight recording data.
22-1	2787-2791	This	
22-2	2792-2796	page	
22-3	2797-2805	provides	
22-4	2806-2819	comprehensive	
22-5	2820-2829	automatic	
22-6	2830-2838	analysis	
22-7	2839-2841	of	
22-8	2842-2848	flight	
22-9	2849-2858	recording	
22-10	2859-2863	data	
22-11	2863-2864	.	

#Text=Open the Threads page in the Java Application page.
23-1	2865-2869	Open	
23-2	2870-2873	the	
23-3	2874-2881	Threads	
23-4	2882-2886	page	
23-5	2887-2889	in	
23-6	2890-2893	the	
23-7	2894-2898	Java	
23-8	2899-2910	Application	
23-9	2911-2915	page	
23-10	2915-2916	.	

#Text=The Threads page contains the following information:
#Text=A graph that plots live thread usage by the application over time.
24-1	2917-2920	The	
24-2	2921-2928	Threads	
24-3	2929-2933	page	
24-4	2934-2942	contains	
24-5	2943-2946	the	
24-6	2947-2956	following	
24-7	2957-2968	information	
24-8	2968-2969	:	
24-9	2970-2971	A	
24-10	2972-2977	graph	
24-11	2978-2982	that	
24-12	2983-2988	plots	
24-13	2989-2993	live	
24-14	2994-3000	thread	
24-15	3001-3006	usage	
24-16	3007-3009	by	
24-17	3010-3013	the	
24-18	3014-3025	application	
24-19	3026-3030	over	
24-20	3031-3035	time	
24-21	3035-3036	.	

#Text=A table with all live threads used by the application.
25-1	3037-3038	A	
25-2	3039-3044	table	
25-3	3045-3049	with	
25-4	3050-3053	all	
25-5	3054-3058	live	
25-6	3059-3066	threads	
25-7	3067-3071	used	
25-8	3072-3074	by	
25-9	3075-3078	the	
25-10	3079-3090	application	
25-11	3090-3091	.	

#Text=Stack traces for selected threads.
26-1	3092-3097	Stack	
26-2	3098-3104	traces	
26-3	3105-3108	for	
26-4	3109-3117	selected	
26-5	3118-3125	threads	
26-6	3125-3126	.	

#Text=Here is a sample figure of a recording, which shows a graph with thread details.
27-1	3127-3131	Here	
27-2	3132-3134	is	
27-3	3135-3136	a	
27-4	3137-3143	sample	
27-5	3144-3150	figure	
27-6	3151-3153	of	
27-7	3154-3155	a	
27-8	3156-3165	recording	
27-9	3165-3166	,	
27-10	3167-3172	which	
27-11	3173-3178	shows	
27-12	3179-3180	a	
27-13	3181-3186	graph	
27-14	3187-3191	with	
27-15	3192-3198	thread	
27-16	3199-3206	details	
27-17	3206-3207	.	

#Text=Figure 4-1 Bottlenecks - Threads - GraphDescription of "Figure 4-1 Bottlenecks - Threads - Graph"
#Text=In the graph, each row is a thread, and each thread can have several lines.
28-1	3208-3214	Figure	
28-2	3215-3216	4	
28-3	3216-3217	-	
28-4	3217-3218	1	
28-5	3219-3230	Bottlenecks	
28-6	3231-3232	-	
28-7	3233-3240	Threads	
28-8	3241-3242	-	
28-9	3243-3259	GraphDescription	
28-10	3260-3262	of	
28-11	3263-3264	"	
28-12	3264-3270	Figure	
28-13	3271-3272	4	
28-14	3272-3273	-	
28-15	3273-3274	1	
28-16	3275-3286	Bottlenecks	
28-17	3287-3288	-	
28-18	3289-3296	Threads	
28-19	3297-3298	-	
28-20	3299-3304	Graph	
28-21	3304-3305	"	
28-22	3306-3308	In	
28-23	3309-3312	the	
28-24	3313-3318	graph	
28-25	3318-3319	,	
28-26	3320-3324	each	
28-27	3325-3328	row	
28-28	3329-3331	is	
28-29	3332-3333	a	
28-30	3334-3340	thread	
28-31	3340-3341	,	
28-32	3342-3345	and	
28-33	3346-3350	each	
28-34	3351-3357	thread	
28-35	3358-3361	can	
28-36	3362-3366	have	
28-37	3367-3374	several	
28-38	3375-3380	lines	
28-39	3380-3381	.	

#Text=In the figure, each thread has a line, which represents the Java Application events that were enabled for this recording.
29-1	3382-3384	In	
29-2	3385-3388	the	
29-3	3389-3395	figure	
29-4	3395-3396	,	
29-5	3397-3401	each	
29-6	3402-3408	thread	
29-7	3409-3412	has	
29-8	3413-3414	a	
29-9	3415-3419	line	
29-10	3419-3420	,	
29-11	3421-3426	which	
29-12	3427-3437	represents	
29-13	3438-3441	the	
29-14	3442-3446	Java	
29-15	3447-3458	Application	
29-16	3459-3465	events	
29-17	3466-3470	that	
29-18	3471-3475	were	
29-19	3476-3483	enabled	
29-20	3484-3487	for	
29-21	3488-3492	this	
29-22	3493-3502	recording	
29-23	3502-3503	.	

#Text=The selected Java Application events all have the important property that they are all thread-stalling events.
30-1	3504-3507	The	
30-2	3508-3516	selected	
30-3	3517-3521	Java	
30-4	3522-3533	Application	
30-5	3534-3540	events	
30-6	3541-3544	all	
30-7	3545-3549	have	
30-8	3550-3553	the	
30-9	3554-3563	important	
30-10	3564-3572	property	
30-11	3573-3577	that	
30-12	3578-3582	they	
30-13	3583-3586	are	
30-14	3587-3590	all	
30-15	3591-3606	thread-stalling	
30-16	3607-3613	events	
30-17	3613-3614	.	

#Text=Thread stalling indicates that the thread was not running your application during the event, and they are all duration events.
31-1	3615-3621	Thread	
31-2	3622-3630	stalling	
31-3	3631-3640	indicates	
31-4	3641-3645	that	
31-5	3646-3649	the	
31-6	3650-3656	thread	
31-7	3657-3660	was	
31-8	3661-3664	not	
31-9	3665-3672	running	
31-10	3673-3677	your	
31-11	3678-3689	application	
31-12	3690-3696	during	
31-13	3697-3700	the	
31-14	3701-3706	event	
31-15	3706-3707	,	
31-16	3708-3711	and	
31-17	3712-3716	they	
31-18	3717-3720	are	
31-19	3721-3724	all	
31-20	3725-3733	duration	
31-21	3734-3740	events	
31-22	3740-3741	.	

#Text=The duration event measures the duration the application was not running.
32-1	3742-3745	The	
32-2	3746-3754	duration	
32-3	3755-3760	event	
32-4	3761-3769	measures	
32-5	3770-3773	the	
32-6	3774-3782	duration	
32-7	3783-3786	the	
32-8	3787-3798	application	
32-9	3799-3802	was	
32-10	3803-3806	not	
32-11	3807-3814	running	
32-12	3814-3815	.	

#Text=In the graph, each color represents a different type of event.
33-1	3816-3818	In	
33-2	3819-3822	the	
33-3	3823-3828	graph	
33-4	3828-3829	,	
33-5	3830-3834	each	
33-6	3835-3840	color	
33-7	3841-3851	represents	
33-8	3852-3853	a	
33-9	3854-3863	different	
33-10	3864-3868	type	
33-11	3869-3871	of	
33-12	3872-3877	event	
33-13	3877-3878	.	

#Text=For example:
#Text=Yellow represents Java Monitor Wait events.
34-1	3879-3882	For	
34-2	3883-3890	example	
34-3	3890-3891	:	
34-4	3892-3898	Yellow	
34-5	3899-3909	represents	
34-6	3910-3914	Java	
34-7	3915-3922	Monitor	
34-8	3923-3927	Wait	
34-9	3928-3934	events	
34-10	3934-3935	.	

#Text=The yellow part is when threads are waiting for an object.
35-1	3936-3939	The	
35-2	3940-3946	yellow	
35-3	3947-3951	part	
35-4	3952-3954	is	
35-5	3955-3959	when	
35-6	3960-3967	threads	
35-7	3968-3971	are	
35-8	3972-3979	waiting	
35-9	3980-3983	for	
35-10	3984-3986	an	
35-11	3987-3993	object	
35-12	3993-3994	.	

#Text=This often means that the thread is idle, perhaps waiting for a task.
36-1	3995-3999	This	
36-2	4000-4005	often	
36-3	4006-4011	means	
36-4	4012-4016	that	
36-5	4017-4020	the	
36-6	4021-4027	thread	
36-7	4028-4030	is	
36-8	4031-4035	idle	
36-9	4035-4036	,	
36-10	4037-4044	perhaps	
36-11	4045-4052	waiting	
36-12	4053-4056	for	
36-13	4057-4058	a	
36-14	4059-4063	task	
36-15	4063-4064	.	

#Text=Salmon represents the Java Monitor Blocked events or synchronization events.
37-1	4065-4071	Salmon	
37-2	4072-4082	represents	
37-3	4083-4086	the	
37-4	4087-4091	Java	
37-5	4092-4099	Monitor	
37-6	4100-4107	Blocked	
37-7	4108-4114	events	
37-8	4115-4117	or	
37-9	4118-4133	synchronization	
37-10	4134-4140	events	
37-11	4140-4141	.	

#Text=If your Java application's important threads spend a lot of time being blocked, then that means that a critical section of the application is single threaded, which is a bottleneck.
38-1	4142-4144	If	
38-2	4145-4149	your	
38-3	4150-4154	Java	
38-4	4155-4168	application's	
38-5	4169-4178	important	
38-6	4179-4186	threads	
38-7	4187-4192	spend	
38-8	4193-4194	a	
38-9	4195-4198	lot	
38-10	4199-4201	of	
38-11	4202-4206	time	
38-12	4207-4212	being	
38-13	4213-4220	blocked	
38-14	4220-4221	,	
38-15	4222-4226	then	
38-16	4227-4231	that	
38-17	4232-4237	means	
38-18	4238-4242	that	
38-19	4243-4244	a	
38-20	4245-4253	critical	
38-21	4254-4261	section	
38-22	4262-4264	of	
38-23	4265-4268	the	
38-24	4269-4280	application	
38-25	4281-4283	is	
38-26	4284-4290	single	
38-27	4291-4299	threaded	
38-28	4299-4300	,	
38-29	4301-4306	which	
38-30	4307-4309	is	
38-31	4310-4311	a	
38-32	4312-4322	bottleneck	
38-33	4322-4323	.	

#Text=Red represents the Socket Reads and Socket Writes events.
39-1	4324-4327	Red	
39-2	4328-4338	represents	
39-3	4339-4342	the	
39-4	4343-4349	Socket	
39-5	4350-4355	Reads	
39-6	4356-4359	and	
39-7	4360-4366	Socket	
39-8	4367-4373	Writes	
39-9	4374-4380	events	
39-10	4380-4381	.	

#Text=Again, if the Java application spends a lot of time waiting for sockets, then the main bottleneck may be in the network or with the other machines that the application communicates.
40-1	4382-4387	Again	
40-2	4387-4388	,	
40-3	4389-4391	if	
40-4	4392-4395	the	
40-5	4396-4400	Java	
40-6	4401-4412	application	
40-7	4413-4419	spends	
40-8	4420-4421	a	
40-9	4422-4425	lot	
40-10	4426-4428	of	
40-11	4429-4433	time	
40-12	4434-4441	waiting	
40-13	4442-4445	for	
40-14	4446-4453	sockets	
40-15	4453-4454	,	
40-16	4455-4459	then	
40-17	4460-4463	the	
40-18	4464-4468	main	
40-19	4469-4479	bottleneck	
40-20	4480-4483	may	
40-21	4484-4486	be	
40-22	4487-4489	in	
40-23	4490-4493	the	
40-24	4494-4501	network	
40-25	4502-4504	or	
40-26	4505-4509	with	
40-27	4510-4513	the	
40-28	4514-4519	other	
40-29	4520-4528	machines	
40-30	4529-4533	that	
40-31	4534-4537	the	
40-32	4538-4549	application	
40-33	4550-4562	communicates	
40-34	4562-4563	.	

#Text=Green represents parts that don't have any events.
41-1	4564-4569	Green	
41-2	4570-4580	represents	
41-3	4581-4586	parts	
41-4	4587-4591	that	
41-5	4592-4597	don't	
41-6	4598-4602	have	
41-7	4603-4606	any	
41-8	4607-4613	events	
41-9	4613-4614	.	

#Text=This part means that the thread is not sleeping, waiting, reading to or from a socket, or not being blocked.
42-1	4615-4619	This	
42-2	4620-4624	part	
42-3	4625-4630	means	
42-4	4631-4635	that	
42-5	4636-4639	the	
42-6	4640-4646	thread	
42-7	4647-4649	is	
42-8	4650-4653	not	
42-9	4654-4662	sleeping	
42-10	4662-4663	,	
42-11	4664-4671	waiting	
42-12	4671-4672	,	
42-13	4673-4680	reading	
42-14	4681-4683	to	
42-15	4684-4686	or	
42-16	4687-4691	from	
42-17	4692-4693	a	
42-18	4694-4700	socket	
42-19	4700-4701	,	
42-20	4702-4704	or	
42-21	4705-4708	not	
42-22	4709-4714	being	
42-23	4715-4722	blocked	
42-24	4722-4723	.	

#Text=In general, this is where the application code is run.
43-1	4724-4726	In	
43-2	4727-4734	general	
43-3	4734-4735	,	
43-4	4736-4740	this	
43-5	4741-4743	is	
43-6	4744-4749	where	
43-7	4750-4753	the	
43-8	4754-4765	application	
43-9	4766-4770	code	
43-10	4771-4773	is	
43-11	4774-4777	run	
43-12	4777-4778	.	

#Text=If your Java application's important threads are spending a lot of time without generating any application events, then the bottleneck in the application is the time spent executing code or the CPU itself.
44-1	4779-4781	If	
44-2	4782-4786	your	
44-3	4787-4791	Java	
44-4	4792-4805	application's	
44-5	4806-4815	important	
44-6	4816-4823	threads	
44-7	4824-4827	are	
44-8	4828-4836	spending	
44-9	4837-4838	a	
44-10	4839-4842	lot	
44-11	4843-4845	of	
44-12	4846-4850	time	
44-13	4851-4858	without	
44-14	4859-4869	generating	
44-15	4870-4873	any	
44-16	4874-4885	application	
44-17	4886-4892	events	
44-18	4892-4893	,	
44-19	4894-4898	then	
44-20	4899-4902	the	
44-21	4903-4913	bottleneck	
44-22	4914-4916	in	
44-23	4917-4920	the	
44-24	4921-4932	application	
44-25	4933-4935	is	
44-26	4936-4939	the	
44-27	4940-4944	time	
44-28	4945-4950	spent	
44-29	4951-4960	executing	
44-30	4961-4965	code	
44-31	4966-4968	or	
44-32	4969-4972	the	
44-33	4973-4976	CPU	
44-34	4977-4983	itself	
44-35	4983-4984	.	

#Text=Note:For most Java Application event types, only events longer than 20 ms are recorded.
45-1	4985-4989	Note	
45-2	4989-4990	:	
45-3	4990-4993	For	
45-4	4994-4998	most	
45-5	4999-5003	Java	
45-6	5004-5015	Application	
45-7	5016-5021	event	
45-8	5022-5027	types	
45-9	5027-5028	,	
45-10	5029-5033	only	
45-11	5034-5040	events	
45-12	5041-5047	longer	
45-13	5048-5052	than	
45-14	5053-5055	20	
45-15	5056-5058	ms	
45-16	5059-5062	are	
45-17	5063-5071	recorded	
45-18	5071-5072	.	

#Text=(This threshold can be modified when starting the flight recording.)
46-1	5073-5074	(	
46-2	5074-5078	This	
46-3	5079-5088	threshold	
46-4	5089-5092	can	
46-5	5093-5095	be	
46-6	5096-5104	modified	
46-7	5105-5109	when	
46-8	5110-5118	starting	
46-9	5119-5122	the	
46-10	5123-5129	flight	
46-11	5130-5139	recording	
46-12	5139-5140	.	
46-13	5140-5141	)	

#Text=The areas may not have recorded events because the application is doing a lot of short tasks, such as writing to a file (a small part at a time) or spending time in synchronization for very short amounts of time.
47-1	5142-5145	The	
47-2	5146-5151	areas	
47-3	5152-5155	may	
47-4	5156-5159	not	
47-5	5160-5164	have	
47-6	5165-5173	recorded	
47-7	5174-5180	events	
47-8	5181-5188	because	
47-9	5189-5192	the	
47-10	5193-5204	application	
47-11	5205-5207	is	
47-12	5208-5213	doing	
47-13	5214-5215	a	
47-14	5216-5219	lot	
47-15	5220-5222	of	
47-16	5223-5228	short	
47-17	5229-5234	tasks	
47-18	5234-5235	,	
47-19	5236-5240	such	
47-20	5241-5243	as	
47-21	5244-5251	writing	
47-22	5252-5254	to	
47-23	5255-5256	a	
47-24	5257-5261	file	
47-25	5262-5263	(	
47-26	5263-5264	a	
47-27	5265-5270	small	
47-28	5271-5275	part	
47-29	5276-5278	at	
47-30	5279-5280	a	
47-31	5281-5285	time	
47-32	5285-5286	)	
47-33	5287-5289	or	
47-34	5290-5298	spending	
47-35	5299-5303	time	
47-36	5304-5306	in	
47-37	5307-5322	synchronization	
47-38	5323-5326	for	
47-39	5327-5331	very	
47-40	5332-5337	short	
47-41	5338-5345	amounts	
47-42	5346-5348	of	
47-43	5349-5353	time	
47-44	5353-5354	.	

#Text=The Automated Analysis Results page also shows information about garbage collections.
48-1	5355-5358	The	
48-2	5359-5368	Automated	
48-3	5369-5377	Analysis	
48-4	5378-5385	Results	
48-5	5386-5390	page	
48-6	5391-5395	also	
48-7	5396-5401	shows	
48-8	5402-5413	information	
48-9	5414-5419	about	
48-10	5420-5427	garbage	
48-11	5428-5439	collections	
48-12	5439-5440	.	

#Text=To see if garbage collections may be a bottleneck, see the next topic about garbage collection performance.
49-1	5441-5443	To	
49-2	5444-5447	see	
49-3	5448-5450	if	
49-4	5451-5458	garbage	
49-5	5459-5470	collections	
49-6	5471-5474	may	
49-7	5475-5477	be	
49-8	5478-5479	a	
49-9	5480-5490	bottleneck	
49-10	5490-5491	,	
49-11	5492-5495	see	
49-12	5496-5499	the	
49-13	5500-5504	next	
49-14	5505-5510	topic	
49-15	5511-5516	about	
49-16	5517-5524	garbage	
49-17	5525-5535	collection	
49-18	5536-5547	performance	
49-19	5547-5548	.	

#Text=Use the jfr Tool to Find Bottlenecks
#Text=Different applications have different bottlenecks.
50-1	5549-5552	Use	
50-2	5553-5556	the	
50-3	5557-5560	jfr	
50-4	5561-5565	Tool	
50-5	5566-5568	to	
50-6	5569-5573	Find	
50-7	5574-5585	Bottlenecks	
50-8	5586-5595	Different	
50-9	5596-5608	applications	
50-10	5609-5613	have	
50-11	5614-5623	different	
50-12	5624-5635	bottlenecks	
50-13	5635-5636	.	

#Text=For some applications, a bottleneck may be waiting for I/O or networking, it may be synchronization between threads, or it may be actual CPU usage.
51-1	5637-5640	For	
51-2	5641-5645	some	
51-3	5646-5658	applications	
51-4	5658-5659	,	
51-5	5660-5661	a	
51-6	5662-5672	bottleneck	
51-7	5673-5676	may	
51-8	5677-5679	be	
51-9	5680-5687	waiting	
51-10	5688-5691	for	
51-11	5692-5693	I	
51-12	5693-5694	/	
51-13	5694-5695	O	
51-14	5696-5698	or	
51-15	5699-5709	networking	
51-16	5709-5710	,	
51-17	5711-5713	it	
51-18	5714-5717	may	
51-19	5718-5720	be	
51-20	5721-5736	synchronization	
51-21	5737-5744	between	
51-22	5745-5752	threads	
51-23	5752-5753	,	
51-24	5754-5756	or	
51-25	5757-5759	it	
51-26	5760-5763	may	
51-27	5764-5766	be	
51-28	5767-5773	actual	
51-29	5774-5777	CPU	
51-30	5778-5783	usage	
51-31	5783-5784	.	

#Text=For others, a bottleneck may be garbage collection times.
52-1	5785-5788	For	
52-2	5789-5795	others	
52-3	5795-5796	,	
52-4	5797-5798	a	
52-5	5799-5809	bottleneck	
52-6	5810-5813	may	
52-7	5814-5816	be	
52-8	5817-5824	garbage	
52-9	5825-5835	collection	
52-10	5836-5841	times	
52-11	5841-5842	.	

#Text=It is possible that an application has more than one bottleneck.
53-1	5843-5845	It	
53-2	5846-5848	is	
53-3	5849-5857	possible	
53-4	5858-5862	that	
53-5	5863-5865	an	
53-6	5866-5877	application	
53-7	5878-5881	has	
53-8	5882-5886	more	
53-9	5887-5891	than	
53-10	5892-5895	one	
53-11	5896-5906	bottleneck	
53-12	5906-5907	.	

#Text=One way to find the application bottlenecks is to look at the following events in your flight recording.
54-1	5908-5911	One	
54-2	5912-5915	way	
54-3	5916-5918	to	
54-4	5919-5923	find	
54-5	5924-5927	the	
54-6	5928-5939	application	
54-7	5940-5951	bottlenecks	
54-8	5952-5954	is	
54-9	5955-5957	to	
54-10	5958-5962	look	
54-11	5963-5965	at	
54-12	5966-5969	the	
54-13	5970-5979	following	
54-14	5980-5986	events	
54-15	5987-5989	in	
54-16	5990-5994	your	
54-17	5995-6001	flight	
54-18	6002-6011	recording	
54-19	6011-6012	.	

#Text=Make sure that all of these events are enabled in the recording template that you are using:
#Text=jdk.FileRead
#Text=jdk.FileWrite
#Text=jdk.SocketRead
#Text=jdk.SocketWrite
#Text=jdk.JavaErrorThrow
#Text=jdk.JavaExceptionThrow
#Text=jdk.JavaMonitorEnter
#Text=jdk.JavaMonitorWait
#Text=jdk.ThreadStart
#Text=jdk.ThreadEnd
#Text=jdk.ThreadSleep
#Text=jdk.ThreadPark
#Text=The selected Java Application events all have the important property that they are all thread-stalling events.
55-1	6013-6017	Make	
55-2	6018-6022	sure	
55-3	6023-6027	that	
55-4	6028-6031	all	
55-5	6032-6034	of	
55-6	6035-6040	these	
55-7	6041-6047	events	
55-8	6048-6051	are	
55-9	6052-6059	enabled	
55-10	6060-6062	in	
55-11	6063-6066	the	
55-12	6067-6076	recording	
55-13	6077-6085	template	
55-14	6086-6090	that	
55-15	6091-6094	you	
55-16	6095-6098	are	
55-17	6099-6104	using	
55-18	6104-6105	:	
55-19	6106-6118	jdk.FileRead	
55-20	6119-6132	jdk.FileWrite	
55-21	6133-6147	jdk.SocketRead	
55-22	6148-6163	jdk.SocketWrite	
55-23	6164-6182	jdk.JavaErrorThrow	
55-24	6183-6205	jdk.JavaExceptionThrow	
55-25	6206-6226	jdk.JavaMonitorEnter	
55-26	6227-6246	jdk.JavaMonitorWait	
55-27	6247-6262	jdk.ThreadStart	
55-28	6263-6276	jdk.ThreadEnd	
55-29	6277-6292	jdk.ThreadSleep	
55-30	6293-6307	jdk.ThreadPark	
55-31	6308-6311	The	
55-32	6312-6320	selected	
55-33	6321-6325	Java	
55-34	6326-6337	Application	
55-35	6338-6344	events	
55-36	6345-6348	all	
55-37	6349-6353	have	
55-38	6354-6357	the	
55-39	6358-6367	important	
55-40	6368-6376	property	
55-41	6377-6381	that	
55-42	6382-6386	they	
55-43	6387-6390	are	
55-44	6391-6394	all	
55-45	6395-6410	thread-stalling	
55-46	6411-6417	events	
55-47	6417-6418	.	

#Text=Thread stalling indicates that the thread was not running your application during the event, and they are all duration events.
56-1	6419-6425	Thread	
56-2	6426-6434	stalling	
56-3	6435-6444	indicates	
56-4	6445-6449	that	
56-5	6450-6453	the	
56-6	6454-6460	thread	
56-7	6461-6464	was	
56-8	6465-6468	not	
56-9	6469-6476	running	
56-10	6477-6481	your	
56-11	6482-6493	application	
56-12	6494-6500	during	
56-13	6501-6504	the	
56-14	6505-6510	event	
56-15	6510-6511	,	
56-16	6512-6515	and	
56-17	6516-6520	they	
56-18	6521-6524	are	
56-19	6525-6528	all	
56-20	6529-6537	duration	
56-21	6538-6544	events	
56-22	6544-6545	.	

#Text=The duration event measures the duration the application was not running.
57-1	6546-6549	The	
57-2	6550-6558	duration	
57-3	6559-6564	event	
57-4	6565-6573	measures	
57-5	6574-6577	the	
57-6	6578-6586	duration	
57-7	6587-6590	the	
57-8	6591-6602	application	
57-9	6603-6606	was	
57-10	6607-6610	not	
57-11	6611-6618	running	
57-12	6618-6619	.	

#Text=Use the jfr tool to print the events that were recorded and look for the following information:
#Text=jdk.JavaMonitorWait events show how much time a thread spends waiting for a monitor.
#Text=jdk.ThreadSleep and jdk.ThreadPark events show when a thread is sleeping or parked.
58-1	6620-6623	Use	
58-2	6624-6627	the	
58-3	6628-6631	jfr	
58-4	6632-6636	tool	
58-5	6637-6639	to	
58-6	6640-6645	print	
58-7	6646-6649	the	
58-8	6650-6656	events	
58-9	6657-6661	that	
58-10	6662-6666	were	
58-11	6667-6675	recorded	
58-12	6676-6679	and	
58-13	6680-6684	look	
58-14	6685-6688	for	
58-15	6689-6692	the	
58-16	6693-6702	following	
58-17	6703-6714	information	
58-18	6714-6715	:	
58-19	6716-6735	jdk.JavaMonitorWait	
58-20	6736-6742	events	
58-21	6743-6747	show	
58-22	6748-6751	how	
58-23	6752-6756	much	
58-24	6757-6761	time	
58-25	6762-6763	a	
58-26	6764-6770	thread	
58-27	6771-6777	spends	
58-28	6778-6785	waiting	
58-29	6786-6789	for	
58-30	6790-6791	a	
58-31	6792-6799	monitor	
58-32	6799-6800	.	
58-33	6801-6816	jdk.ThreadSleep	
58-34	6817-6820	and	
58-35	6821-6835	jdk.ThreadPark	
58-36	6836-6842	events	
58-37	6843-6847	show	
58-38	6848-6852	when	
58-39	6853-6854	a	
58-40	6855-6861	thread	
58-41	6862-6864	is	
58-42	6865-6873	sleeping	
58-43	6874-6876	or	
58-44	6877-6883	parked	
58-45	6883-6884	.	

#Text=Read and write events show how much time is spent in I/O.
59-1	6885-6889	Read	
59-2	6890-6893	and	
59-3	6894-6899	write	
59-4	6900-6906	events	
59-5	6907-6911	show	
59-6	6912-6915	how	
59-7	6916-6920	much	
59-8	6921-6925	time	
59-9	6926-6928	is	
59-10	6929-6934	spent	
59-11	6935-6937	in	
59-12	6938-6939	I	
59-13	6939-6940	/	
59-14	6940-6941	O	
59-15	6941-6942	.	

#Text=If your Java application's important threads spend a lot of time being blocked, then that means that a critical section of the application is single threaded, which is a bottleneck.
60-1	6943-6945	If	
60-2	6946-6950	your	
60-3	6951-6955	Java	
60-4	6956-6969	application's	
60-5	6970-6979	important	
60-6	6980-6987	threads	
60-7	6988-6993	spend	
60-8	6994-6995	a	
60-9	6996-6999	lot	
60-10	7000-7002	of	
60-11	7003-7007	time	
60-12	7008-7013	being	
60-13	7014-7021	blocked	
60-14	7021-7022	,	
60-15	7023-7027	then	
60-16	7028-7032	that	
60-17	7033-7038	means	
60-18	7039-7043	that	
60-19	7044-7045	a	
60-20	7046-7054	critical	
60-21	7055-7062	section	
60-22	7063-7065	of	
60-23	7066-7069	the	
60-24	7070-7081	application	
60-25	7082-7084	is	
60-26	7085-7091	single	
60-27	7092-7100	threaded	
60-28	7100-7101	,	
60-29	7102-7107	which	
60-30	7108-7110	is	
60-31	7111-7112	a	
60-32	7113-7123	bottleneck	
60-33	7123-7124	.	

#Text=If the Java application spends a lot of time waiting for sockets, then the main bottleneck may be in the network or with the other machines that the application communicates with.
61-1	7125-7127	If	
61-2	7128-7131	the	
61-3	7132-7136	Java	
61-4	7137-7148	application	
61-5	7149-7155	spends	
61-6	7156-7157	a	
61-7	7158-7161	lot	
61-8	7162-7164	of	
61-9	7165-7169	time	
61-10	7170-7177	waiting	
61-11	7178-7181	for	
61-12	7182-7189	sockets	
61-13	7189-7190	,	
61-14	7191-7195	then	
61-15	7196-7199	the	
61-16	7200-7204	main	
61-17	7205-7215	bottleneck	
61-18	7216-7219	may	
61-19	7220-7222	be	
61-20	7223-7225	in	
61-21	7226-7229	the	
61-22	7230-7237	network	
61-23	7238-7240	or	
61-24	7241-7245	with	
61-25	7246-7249	the	
61-26	7250-7255	other	
61-27	7256-7264	machines	
61-28	7265-7269	that	
61-29	7270-7273	the	
61-30	7274-7285	application	
61-31	7286-7298	communicates	
61-32	7299-7303	with	
61-33	7303-7304	.	

#Text=If your Java application's important threads are spending a lot of time without generating any application events, then the bottleneck in the application is the time spent executing code or the CPU itself.
62-1	7305-7307	If	
62-2	7308-7312	your	
62-3	7313-7317	Java	
62-4	7318-7331	application's	
62-5	7332-7341	important	
62-6	7342-7349	threads	
62-7	7350-7353	are	
62-8	7354-7362	spending	
62-9	7363-7364	a	
62-10	7365-7368	lot	
62-11	7369-7371	of	
62-12	7372-7376	time	
62-13	7377-7384	without	
62-14	7385-7395	generating	
62-15	7396-7399	any	
62-16	7400-7411	application	
62-17	7412-7418	events	
62-18	7418-7419	,	
62-19	7420-7424	then	
62-20	7425-7428	the	
62-21	7429-7439	bottleneck	
62-22	7440-7442	in	
62-23	7443-7446	the	
62-24	7447-7458	application	
62-25	7459-7461	is	
62-26	7462-7465	the	
62-27	7466-7470	time	
62-28	7471-7476	spent	
62-29	7477-7486	executing	
62-30	7487-7491	code	
62-31	7492-7494	or	
62-32	7495-7498	the	
62-33	7499-7502	CPU	
62-34	7503-7509	itself	
62-35	7509-7510	.	

#Text=Each of these bottlenecks can be further investigated within the flight recording.
63-1	7511-7515	Each	
63-2	7516-7518	of	
63-3	7519-7524	these	
63-4	7525-7536	bottlenecks	
63-5	7537-7540	can	
63-6	7541-7543	be	
63-7	7544-7551	further	
63-8	7552-7564	investigated	
63-9	7565-7571	within	
63-10	7572-7575	the	
63-11	7576-7582	flight	
63-12	7583-7592	recording	
63-13	7592-7593	.	

#Text=Note:For most Java Application event types, only events longer than 20 ms are recorded.
64-1	7594-7598	Note	
64-2	7598-7599	:	
64-3	7599-7602	For	
64-4	7603-7607	most	
64-5	7608-7612	Java	
64-6	7613-7624	Application	
64-7	7625-7630	event	
64-8	7631-7636	types	
64-9	7636-7637	,	
64-10	7638-7642	only	
64-11	7643-7649	events	
64-12	7650-7656	longer	
64-13	7657-7661	than	
64-14	7662-7664	20	
64-15	7665-7667	ms	
64-16	7668-7671	are	
64-17	7672-7680	recorded	
64-18	7680-7681	.	

#Text=(This threshold can be modified when starting the flight recording.)
65-1	7682-7683	(	
65-2	7683-7687	This	
65-3	7688-7697	threshold	
65-4	7698-7701	can	
65-5	7702-7704	be	
65-6	7705-7713	modified	
65-7	7714-7718	when	
65-8	7719-7727	starting	
65-9	7728-7731	the	
65-10	7732-7738	flight	
65-11	7739-7748	recording	
65-12	7748-7749	.	
65-13	7749-7750	)	

#Text=To summarize, the areas may not have recorded events because the application is doing a lot of short tasks, such as writing to a file (a small part at a time) or spending time in synchronization for very short amounts of time.
66-1	7751-7753	To	
66-2	7754-7763	summarize	
66-3	7763-7764	,	
66-4	7765-7768	the	
66-5	7769-7774	areas	
66-6	7775-7778	may	
66-7	7779-7782	not	
66-8	7783-7787	have	
66-9	7788-7796	recorded	
66-10	7797-7803	events	
66-11	7804-7811	because	
66-12	7812-7815	the	
66-13	7816-7827	application	
66-14	7828-7830	is	
66-15	7831-7836	doing	
66-16	7837-7838	a	
66-17	7839-7842	lot	
66-18	7843-7845	of	
66-19	7846-7851	short	
66-20	7852-7857	tasks	
66-21	7857-7858	,	
66-22	7859-7863	such	
66-23	7864-7866	as	
66-24	7867-7874	writing	
66-25	7875-7877	to	
66-26	7878-7879	a	
66-27	7880-7884	file	
66-28	7885-7886	(	
66-29	7886-7887	a	
66-30	7888-7893	small	
66-31	7894-7898	part	
66-32	7899-7901	at	
66-33	7902-7903	a	
66-34	7904-7908	time	
66-35	7908-7909	)	
66-36	7910-7912	or	
66-37	7913-7921	spending	
66-38	7922-7926	time	
66-39	7927-7929	in	
66-40	7930-7945	synchronization	
66-41	7946-7949	for	
66-42	7950-7954	very	
66-43	7955-7960	short	
66-44	7961-7968	amounts	
66-45	7969-7971	of	
66-46	7972-7976	time	
66-47	7976-7977	.	

#Text=Garbage Collection Performance
#Text=Flight recordings can help you diagnose garbage collection issues in Java application.
67-1	7978-7985	Garbage	
67-2	7986-7996	Collection	
67-3	7997-8008	Performance	
67-4	8009-8015	Flight	
67-5	8016-8026	recordings	
67-6	8027-8030	can	
67-7	8031-8035	help	
67-8	8036-8039	you	
67-9	8040-8048	diagnose	
67-10	8049-8056	garbage	
67-11	8057-8067	collection	
67-12	8068-8074	issues	
67-13	8075-8077	in	
67-14	8078-8082	Java	
67-15	8083-8094	application	
67-16	8094-8095	.	

#Text=Topics:
#Text=Use JDK Mission Control to Debug Garbage Collection Issues
#Text=Use the jfr Tool to Debug Garbage Collection Issues
#Text=Use JDK Mission Control to Debug Garbage Collection Issues
#Text=You can use JMC to debug garbage collections (GC) issues.
68-1	8096-8102	Topics	
68-2	8102-8103	:	
68-3	8104-8107	Use	
68-4	8108-8111	JDK	
68-5	8112-8119	Mission	
68-6	8120-8127	Control	
68-7	8128-8130	to	
68-8	8131-8136	Debug	
68-9	8137-8144	Garbage	
68-10	8145-8155	Collection	
68-11	8156-8162	Issues	
68-12	8163-8166	Use	
68-13	8167-8170	the	
68-14	8171-8174	jfr	
68-15	8175-8179	Tool	
68-16	8180-8182	to	
68-17	8183-8188	Debug	
68-18	8189-8196	Garbage	
68-19	8197-8207	Collection	
68-20	8208-8214	Issues	
68-21	8215-8218	Use	
68-22	8219-8222	JDK	
68-23	8223-8230	Mission	
68-24	8231-8238	Control	
68-25	8239-8241	to	
68-26	8242-8247	Debug	
68-27	8248-8255	Garbage	
68-28	8256-8266	Collection	
68-29	8267-8273	Issues	
68-30	8274-8277	You	
68-31	8278-8281	can	
68-32	8282-8285	use	
68-33	8286-8289	JMC	
68-34	8290-8292	to	
68-35	8293-8298	debug	
68-36	8299-8306	garbage	
68-37	8307-8318	collections	
68-38	8319-8320	(	
68-39	8320-8322	GC	
68-40	8322-8323	)	
68-41	8324-8330	issues	
68-42	8330-8331	.	

#Text=Tuning the HotSpot Garbage Collector can have a big effect on performance.
69-1	8332-8338	Tuning	
69-2	8339-8342	the	
69-3	8343-8350	HotSpot	
69-4	8351-8358	Garbage	
69-5	8359-8368	Collector	
69-6	8369-8372	can	
69-7	8373-8377	have	
69-8	8378-8379	a	
69-9	8380-8383	big	
69-10	8384-8390	effect	
69-11	8391-8393	on	
69-12	8394-8405	performance	
69-13	8405-8406	.	

#Text=See Garbage Collection Tuning Guide for general information.
70-1	8407-8410	See	
70-2	8411-8418	Garbage	
70-3	8419-8429	Collection	
70-4	8430-8436	Tuning	
70-5	8437-8442	Guide	
70-6	8443-8446	for	
70-7	8447-8454	general	
70-8	8455-8466	information	
70-9	8466-8467	.	

#Text=Take a profiling flight recording of your running application.
71-1	8468-8472	Take	
71-2	8473-8474	a	
71-3	8475-8484	profiling	
71-4	8485-8491	flight	
71-5	8492-8501	recording	
71-6	8502-8504	of	
71-7	8505-8509	your	
71-8	8510-8517	running	
71-9	8518-8529	application	
71-10	8529-8530	.	

#Text=Do not include the heap statistics, as that will trigger additional old garbage collections.
72-1	8531-8533	Do	
72-2	8534-8537	not	
72-3	8538-8545	include	
72-4	8546-8549	the	
72-5	8550-8554	heap	
72-6	8555-8565	statistics	
72-7	8565-8566	,	
72-8	8567-8569	as	
72-9	8570-8574	that	
72-10	8575-8579	will	
72-11	8580-8587	trigger	
72-12	8588-8598	additional	
72-13	8599-8602	old	
72-14	8603-8610	garbage	
72-15	8611-8622	collections	
72-16	8622-8623	.	

#Text=To get a good sample, take a longer recording, for example one hour.
73-1	8624-8626	To	
73-2	8627-8630	get	
73-3	8631-8632	a	
73-4	8633-8637	good	
73-5	8638-8644	sample	
73-6	8644-8645	,	
73-7	8646-8650	take	
73-8	8651-8652	a	
73-9	8653-8659	longer	
73-10	8660-8669	recording	
73-11	8669-8670	,	
73-12	8671-8674	for	
73-13	8675-8682	example	
73-14	8683-8686	one	
73-15	8687-8691	hour	
73-16	8691-8692	.	

#Text=Open the recording in JMC.
74-1	8693-8697	Open	
74-2	8698-8701	the	
74-3	8702-8711	recording	
74-4	8712-8714	in	
74-5	8715-8718	JMC	
74-6	8718-8719	.	

#Text=Look at the Garbage Collections section in the Automated Analysis Results page.
75-1	8720-8724	Look	
75-2	8725-8727	at	
75-3	8728-8731	the	
75-4	8732-8739	Garbage	
75-5	8740-8751	Collections	
75-6	8752-8759	section	
75-7	8760-8762	in	
75-8	8763-8766	the	
75-9	8767-8776	Automated	
75-10	8777-8785	Analysis	
75-11	8786-8793	Results	
75-12	8794-8798	page	
75-13	8798-8799	.	

#Text=Here is a sample figure of a recording, which provides a snapshot of garbage collection performance during runtime.
76-1	8800-8804	Here	
76-2	8805-8807	is	
76-3	8808-8809	a	
76-4	8810-8816	sample	
76-5	8817-8823	figure	
76-6	8824-8826	of	
76-7	8827-8828	a	
76-8	8829-8838	recording	
76-9	8838-8839	,	
76-10	8840-8845	which	
76-11	8846-8854	provides	
76-12	8855-8856	a	
76-13	8857-8865	snapshot	
76-14	8866-8868	of	
76-15	8869-8876	garbage	
76-16	8877-8887	collection	
76-17	8888-8899	performance	
76-18	8900-8906	during	
76-19	8907-8914	runtime	
76-20	8914-8915	.	

#Text=Figure 4-2 Automated Analysis Results - Garbage Collections Description of "Figure 4-2 Automated Analysis Results - Garbage Collections "
#Text=You can observe from the figure that there is a Full GC event.
77-1	8916-8922	Figure	
77-2	8923-8924	4	
77-3	8924-8925	-	
77-4	8925-8926	2	
77-5	8927-8936	Automated	
77-6	8937-8945	Analysis	
77-7	8946-8953	Results	
77-8	8954-8955	-	
77-9	8956-8963	Garbage	
77-10	8964-8975	Collections	
77-11	8976-8987	Description	
77-12	8988-8990	of	
77-13	8991-8992	"	
77-14	8992-8998	Figure	
77-15	8999-9000	4	
77-16	9000-9001	-	
77-17	9001-9002	2	
77-18	9003-9012	Automated	
77-19	9013-9021	Analysis	
77-20	9022-9029	Results	
77-21	9030-9031	-	
77-22	9032-9039	Garbage	
77-23	9040-9051	Collections	
77-24	9052-9053	"	
77-25	9054-9057	You	
77-26	9058-9061	can	
77-27	9062-9069	observe	
77-28	9070-9074	from	
77-29	9075-9078	the	
77-30	9079-9085	figure	
77-31	9086-9090	that	
77-32	9091-9096	there	
77-33	9097-9099	is	
77-34	9100-9101	a	
77-35	9102-9106	Full	
77-36	9107-9109	GC	
77-37	9110-9115	event	
77-38	9115-9116	.	

#Text=This is indicative of the fact that application needs more memory than what you have allocated.
78-1	9117-9121	This	
78-2	9122-9124	is	
78-3	9125-9135	indicative	
78-4	9136-9138	of	
78-5	9139-9142	the	
78-6	9143-9147	fact	
78-7	9148-9152	that	
78-8	9153-9164	application	
78-9	9165-9170	needs	
78-10	9171-9175	more	
78-11	9176-9182	memory	
78-12	9183-9187	than	
78-13	9188-9192	what	
78-14	9193-9196	you	
78-15	9197-9201	have	
78-16	9202-9211	allocated	
78-17	9211-9212	.	

#Text=For further analysis, open the Garbage Collections page under the JVM Internals page to investigate the overall performance impact of the GC.
79-1	9213-9216	For	
79-2	9217-9224	further	
79-3	9225-9233	analysis	
79-4	9233-9234	,	
79-5	9235-9239	open	
79-6	9240-9243	the	
79-7	9244-9251	Garbage	
79-8	9252-9263	Collections	
79-9	9264-9268	page	
79-10	9269-9274	under	
79-11	9275-9278	the	
79-12	9279-9282	JVM	
79-13	9283-9292	Internals	
79-14	9293-9297	page	
79-15	9298-9300	to	
79-16	9301-9312	investigate	
79-17	9313-9316	the	
79-18	9317-9324	overall	
79-19	9325-9336	performance	
79-20	9337-9343	impact	
79-21	9344-9346	of	
79-22	9347-9350	the	
79-23	9351-9353	GC	
79-24	9353-9354	.	

#Text=Here is a sample figure of a recording, which shows a graph with GC pauses.
80-1	9355-9359	Here	
80-2	9360-9362	is	
80-3	9363-9364	a	
80-4	9365-9371	sample	
80-5	9372-9378	figure	
80-6	9379-9381	of	
80-7	9382-9383	a	
80-8	9384-9393	recording	
80-9	9393-9394	,	
80-10	9395-9400	which	
80-11	9401-9406	shows	
80-12	9407-9408	a	
80-13	9409-9414	graph	
80-14	9415-9419	with	
80-15	9420-9422	GC	
80-16	9423-9429	pauses	
80-17	9429-9430	.	

#Text=Figure 4-3 Garbage Collection Performance - GC PausesDescription of "Figure 4-3 Garbage Collection Performance - GC Pauses"
#Text=From the graph look at the Sum of Pauses from the recording.
81-1	9431-9437	Figure	
81-2	9438-9439	4	
81-3	9439-9440	-	
81-4	9440-9441	3	
81-5	9442-9449	Garbage	
81-6	9450-9460	Collection	
81-7	9461-9472	Performance	
81-8	9473-9474	-	
81-9	9475-9477	GC	
81-10	9478-9495	PausesDescription	
81-11	9496-9498	of	
81-12	9499-9500	"	
81-13	9500-9506	Figure	
81-14	9507-9508	4	
81-15	9508-9509	-	
81-16	9509-9510	3	
81-17	9511-9518	Garbage	
81-18	9519-9529	Collection	
81-19	9530-9541	Performance	
81-20	9542-9543	-	
81-21	9544-9546	GC	
81-22	9547-9553	Pauses	
81-23	9553-9554	"	
81-24	9555-9559	From	
81-25	9560-9563	the	
81-26	9564-9569	graph	
81-27	9570-9574	look	
81-28	9575-9577	at	
81-29	9578-9581	the	
81-30	9582-9585	Sum	
81-31	9586-9588	of	
81-32	9589-9595	Pauses	
81-33	9596-9600	from	
81-34	9601-9604	the	
81-35	9605-9614	recording	
81-36	9614-9615	.	

#Text=The Sum of Pauses is the total amount of time that the application was paused during a GC.
82-1	9616-9619	The	
82-2	9620-9623	Sum	
82-3	9624-9626	of	
82-4	9627-9633	Pauses	
82-5	9634-9636	is	
82-6	9637-9640	the	
82-7	9641-9646	total	
82-8	9647-9653	amount	
82-9	9654-9656	of	
82-10	9657-9661	time	
82-11	9662-9666	that	
82-12	9667-9670	the	
82-13	9671-9682	application	
82-14	9683-9686	was	
82-15	9687-9693	paused	
82-16	9694-9700	during	
82-17	9701-9702	a	
82-18	9703-9705	GC	
82-19	9705-9706	.	

#Text=Many GCs do most of their work in the background.
83-1	9707-9711	Many	
83-2	9712-9715	GCs	
83-3	9716-9718	do	
83-4	9719-9723	most	
83-5	9724-9726	of	
83-6	9727-9732	their	
83-7	9733-9737	work	
83-8	9738-9740	in	
83-9	9741-9744	the	
83-10	9745-9755	background	
83-11	9755-9756	.	

#Text=In those cases, the length of the GC does not matter and what matters is how long the application actually had to stop.
84-1	9757-9759	In	
84-2	9760-9765	those	
84-3	9766-9771	cases	
84-4	9771-9772	,	
84-5	9773-9776	the	
84-6	9777-9783	length	
84-7	9784-9786	of	
84-8	9787-9790	the	
84-9	9791-9793	GC	
84-10	9794-9798	does	
84-11	9799-9802	not	
84-12	9803-9809	matter	
84-13	9810-9813	and	
84-14	9814-9818	what	
84-15	9819-9826	matters	
84-16	9827-9829	is	
84-17	9830-9833	how	
84-18	9834-9838	long	
84-19	9839-9842	the	
84-20	9843-9854	application	
84-21	9855-9863	actually	
84-22	9864-9867	had	
84-23	9868-9870	to	
84-24	9871-9875	stop	
84-25	9875-9876	.	

#Text=Therefore, the Sum of Pauses is a good measure for the GC effect.
85-1	9877-9886	Therefore	
85-2	9886-9887	,	
85-3	9888-9891	the	
85-4	9892-9895	Sum	
85-5	9896-9898	of	
85-6	9899-9905	Pauses	
85-7	9906-9908	is	
85-8	9909-9910	a	
85-9	9911-9915	good	
85-10	9916-9923	measure	
85-11	9924-9927	for	
85-12	9928-9931	the	
85-13	9932-9934	GC	
85-14	9935-9941	effect	
85-15	9941-9942	.	

#Text=The main performance problems with garbage collections are usually either that individual GCs take too long, or that too much time is spent in paused GCs (total GC pauses).
86-1	9943-9946	The	
86-2	9947-9951	main	
86-3	9952-9963	performance	
86-4	9964-9972	problems	
86-5	9973-9977	with	
86-6	9978-9985	garbage	
86-7	9986-9997	collections	
86-8	9998-10001	are	
86-9	10002-10009	usually	
86-10	10010-10016	either	
86-11	10017-10021	that	
86-12	10022-10032	individual	
86-13	10033-10036	GCs	
86-14	10037-10041	take	
86-15	10042-10045	too	
86-16	10046-10050	long	
86-17	10050-10051	,	
86-18	10052-10054	or	
86-19	10055-10059	that	
86-20	10060-10063	too	
86-21	10064-10068	much	
86-22	10069-10073	time	
86-23	10074-10076	is	
86-24	10077-10082	spent	
86-25	10083-10085	in	
86-26	10086-10092	paused	
86-27	10093-10096	GCs	
86-28	10097-10098	(	
86-29	10098-10103	total	
86-30	10104-10106	GC	
86-31	10107-10113	pauses	
86-32	10113-10114	)	
86-33	10114-10115	.	

#Text=When an individual GC takes too long, you may need to change the GC strategy.
87-1	10116-10120	When	
87-2	10121-10123	an	
87-3	10124-10134	individual	
87-4	10135-10137	GC	
87-5	10138-10143	takes	
87-6	10144-10147	too	
87-7	10148-10152	long	
87-8	10152-10153	,	
87-9	10154-10157	you	
87-10	10158-10161	may	
87-11	10162-10166	need	
87-12	10167-10169	to	
87-13	10170-10176	change	
87-14	10177-10180	the	
87-15	10181-10183	GC	
87-16	10184-10192	strategy	
87-17	10192-10193	.	

#Text=Different GCs have different trade-offs when it comes to pause times verses throughput performance.
88-1	10194-10203	Different	
88-2	10204-10207	GCs	
88-3	10208-10212	have	
88-4	10213-10222	different	
88-5	10223-10233	trade-offs	
88-6	10234-10238	when	
88-7	10239-10241	it	
88-8	10242-10247	comes	
88-9	10248-10250	to	
88-10	10251-10256	pause	
88-11	10257-10262	times	
88-12	10263-10269	verses	
88-13	10270-10280	throughput	
88-14	10281-10292	performance	
88-15	10292-10293	.	

#Text=See Behavior-Based Tuning.
89-1	10294-10297	See	
89-2	10298-10312	Behavior-Based	
89-3	10313-10319	Tuning	
89-4	10319-10320	.	

#Text=For example, you may also need to fix your application so that it makes less use of finalizers or semireferences.
90-1	10321-10324	For	
90-2	10325-10332	example	
90-3	10332-10333	,	
90-4	10334-10337	you	
90-5	10338-10341	may	
90-6	10342-10346	also	
90-7	10347-10351	need	
90-8	10352-10354	to	
90-9	10355-10358	fix	
90-10	10359-10363	your	
90-11	10364-10375	application	
90-12	10376-10378	so	
90-13	10379-10383	that	
90-14	10384-10386	it	
90-15	10387-10392	makes	
90-16	10393-10397	less	
90-17	10398-10401	use	
90-18	10402-10404	of	
90-19	10405-10415	finalizers	
90-20	10416-10418	or	
90-21	10419-10433	semireferences	
90-22	10433-10434	.	

#Text=If the application spends too much time paused, you can look into different ways to overcome this.
91-1	10435-10437	If	
91-2	10438-10441	the	
91-3	10442-10453	application	
91-4	10454-10460	spends	
91-5	10461-10464	too	
91-6	10465-10469	much	
91-7	10470-10474	time	
91-8	10475-10481	paused	
91-9	10481-10482	,	
91-10	10483-10486	you	
91-11	10487-10490	can	
91-12	10491-10495	look	
91-13	10496-10500	into	
91-14	10501-10510	different	
91-15	10511-10515	ways	
91-16	10516-10518	to	
91-17	10519-10527	overcome	
91-18	10528-10532	this	
91-19	10532-10533	.	

#Text=One way is to increase the Java heap size.
92-1	10534-10537	One	
92-2	10538-10541	way	
92-3	10542-10544	is	
92-4	10545-10547	to	
92-5	10548-10556	increase	
92-6	10557-10560	the	
92-7	10561-10565	Java	
92-8	10566-10570	heap	
92-9	10571-10575	size	
92-10	10575-10576	.	

#Text=Look at the GC Configuration page to estimate the heap size used by the application, and change the initial heap size and maximum heap size to a higher value.
93-1	10577-10581	Look	
93-2	10582-10584	at	
93-3	10585-10588	the	
93-4	10589-10591	GC	
93-5	10592-10605	Configuration	
93-6	10606-10610	page	
93-7	10611-10613	to	
93-8	10614-10622	estimate	
93-9	10623-10626	the	
93-10	10627-10631	heap	
93-11	10632-10636	size	
93-12	10637-10641	used	
93-13	10642-10644	by	
93-14	10645-10648	the	
93-15	10649-10660	application	
93-16	10660-10661	,	
93-17	10662-10665	and	
93-18	10666-10672	change	
93-19	10673-10676	the	
93-20	10677-10684	initial	
93-21	10685-10689	heap	
93-22	10690-10694	size	
93-23	10695-10698	and	
93-24	10699-10706	maximum	
93-25	10707-10711	heap	
93-26	10712-10716	size	
93-27	10717-10719	to	
93-28	10720-10721	a	
93-29	10722-10728	higher	
93-30	10729-10734	value	
93-31	10734-10735	.	

#Text=The bigger the heap, the longer time it is between GCs.
94-1	10736-10739	The	
94-2	10740-10746	bigger	
94-3	10747-10750	the	
94-4	10751-10755	heap	
94-5	10755-10756	,	
94-6	10757-10760	the	
94-7	10761-10767	longer	
94-8	10768-10772	time	
94-9	10773-10775	it	
94-10	10776-10778	is	
94-11	10779-10786	between	
94-12	10787-10790	GCs	
94-13	10790-10791	.	

#Text=Watch out for any memory leaks in the Java application, because that may cause more frequent GCs until an OutOfMemoryError is thrown.
95-1	10792-10797	Watch	
95-2	10798-10801	out	
95-3	10802-10805	for	
95-4	10806-10809	any	
95-5	10810-10816	memory	
95-6	10817-10822	leaks	
95-7	10823-10825	in	
95-8	10826-10829	the	
95-9	10830-10834	Java	
95-10	10835-10846	application	
95-11	10846-10847	,	
95-12	10848-10855	because	
95-13	10856-10860	that	
95-14	10861-10864	may	
95-15	10865-10870	cause	
95-16	10871-10875	more	
95-17	10876-10884	frequent	
95-18	10885-10888	GCs	
95-19	10889-10894	until	
95-20	10895-10897	an	
95-21	10898-10914	OutOfMemoryError	
95-22	10915-10917	is	
95-23	10918-10924	thrown	
95-24	10924-10925	.	

#Text=For more information, see Use JDK Mission Control to Debug Memory Leak.
96-1	10926-10929	For	
96-2	10930-10934	more	
96-3	10935-10946	information	
96-4	10946-10947	,	
96-5	10948-10951	see	
96-6	10952-10955	Use	
96-7	10956-10959	JDK	
96-8	10960-10967	Mission	
96-9	10968-10975	Control	
96-10	10976-10978	to	
96-11	10979-10984	Debug	
96-12	10985-10991	Memory	
96-13	10992-10996	Leak	
96-14	10996-10997	.	

#Text=Another way to reduce the GC cycles is to allocate fewer temporary objects.
97-1	10998-11005	Another	
97-2	11006-11009	way	
97-3	11010-11012	to	
97-4	11013-11019	reduce	
97-5	11020-11023	the	
97-6	11024-11026	GC	
97-7	11027-11033	cycles	
97-8	11034-11036	is	
97-9	11037-11039	to	
97-10	11040-11048	allocate	
97-11	11049-11054	fewer	
97-12	11055-11064	temporary	
97-13	11065-11072	objects	
97-14	11072-11073	.	

#Text=In the TLAB Allocations page, look at how much memory is allocated over the course of the recording.
98-1	11074-11076	In	
98-2	11077-11080	the	
98-3	11081-11085	TLAB	
98-4	11086-11097	Allocations	
98-5	11098-11102	page	
98-6	11102-11103	,	
98-7	11104-11108	look	
98-8	11109-11111	at	
98-9	11112-11115	how	
98-10	11116-11120	much	
98-11	11121-11127	memory	
98-12	11128-11130	is	
98-13	11131-11140	allocated	
98-14	11141-11145	over	
98-15	11146-11149	the	
98-16	11150-11156	course	
98-17	11157-11159	of	
98-18	11160-11163	the	
98-19	11164-11173	recording	
98-20	11173-11174	.	

#Text=Small objects are allocated inside TLABs, and large objects are allocated outside TLABs.
99-1	11175-11180	Small	
99-2	11181-11188	objects	
99-3	11189-11192	are	
99-4	11193-11202	allocated	
99-5	11203-11209	inside	
99-6	11210-11215	TLABs	
99-7	11215-11216	,	
99-8	11217-11220	and	
99-9	11221-11226	large	
99-10	11227-11234	objects	
99-11	11235-11238	are	
99-12	11239-11248	allocated	
99-13	11249-11256	outside	
99-14	11257-11262	TLABs	
99-15	11262-11263	.	

#Text=Often, the majority of allocations happen inside TLABs.
100-1	11264-11269	Often	
100-2	11269-11270	,	
100-3	11271-11274	the	
100-4	11275-11283	majority	
100-5	11284-11286	of	
100-6	11287-11298	allocations	
100-7	11299-11305	happen	
100-8	11306-11312	inside	
100-9	11313-11318	TLABs	
100-10	11318-11319	.	

#Text=Lastly, to reduce the need of GCs, decrease the allocation rate.
101-1	11320-11326	Lastly	
101-2	11326-11327	,	
101-3	11328-11330	to	
101-4	11331-11337	reduce	
101-5	11338-11341	the	
101-6	11342-11346	need	
101-7	11347-11349	of	
101-8	11350-11353	GCs	
101-9	11353-11354	,	
101-10	11355-11363	decrease	
101-11	11364-11367	the	
101-12	11368-11378	allocation	
101-13	11379-11383	rate	
101-14	11383-11384	.	

#Text=Select the TLAB Allocations page and then look at the allocation sites that have the most memory pressure.
102-1	11385-11391	Select	
102-2	11392-11395	the	
102-3	11396-11400	TLAB	
102-4	11401-11412	Allocations	
102-5	11413-11417	page	
102-6	11418-11421	and	
102-7	11422-11426	then	
102-8	11427-11431	look	
102-9	11432-11434	at	
102-10	11435-11438	the	
102-11	11439-11449	allocation	
102-12	11450-11455	sites	
102-13	11456-11460	that	
102-14	11461-11465	have	
102-15	11466-11469	the	
102-16	11470-11474	most	
102-17	11475-11481	memory	
102-18	11482-11490	pressure	
102-19	11490-11491	.	

#Text=You can either view it per class or thread to see which one consumes the most allocation.
103-1	11492-11495	You	
103-2	11496-11499	can	
103-3	11500-11506	either	
103-4	11507-11511	view	
103-5	11512-11514	it	
103-6	11515-11518	per	
103-7	11519-11524	class	
103-8	11525-11527	or	
103-9	11528-11534	thread	
103-10	11535-11537	to	
103-11	11538-11541	see	
103-12	11542-11547	which	
103-13	11548-11551	one	
103-14	11552-11560	consumes	
103-15	11561-11564	the	
103-16	11565-11569	most	
103-17	11570-11580	allocation	
103-18	11580-11581	.	

#Text=Some other settings may also increase GC performance of the Java application.
104-1	11582-11586	Some	
104-2	11587-11592	other	
104-3	11593-11601	settings	
104-4	11602-11605	may	
104-5	11606-11610	also	
104-6	11611-11619	increase	
104-7	11620-11622	GC	
104-8	11623-11634	performance	
104-9	11635-11637	of	
104-10	11638-11641	the	
104-11	11642-11646	Java	
104-12	11647-11658	application	
104-13	11658-11659	.	

#Text=See Garbage Collection Tuning Guide in the Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide to discuss GC performance.
105-1	11660-11663	See	
105-2	11664-11671	Garbage	
105-3	11672-11682	Collection	
105-4	11683-11689	Tuning	
105-5	11690-11695	Guide	
105-6	11696-11698	in	
105-7	11699-11702	the	
105-8	11703-11707	Java	
105-9	11708-11716	Platform	
105-10	11716-11717	,	
105-11	11718-11726	Standard	
105-12	11727-11734	Edition	
105-13	11735-11742	HotSpot	
105-14	11743-11750	Virtual	
105-15	11751-11758	Machine	
105-16	11759-11766	Garbage	
105-17	11767-11777	Collection	
105-18	11778-11784	Tuning	
105-19	11785-11790	Guide	
105-20	11791-11793	to	
105-21	11794-11801	discuss	
105-22	11802-11804	GC	
105-23	11805-11816	performance	
105-24	11816-11817	.	

#Text=Use the jfr Tool to Debug Garbage Collection Issues
#Text=Recordings from Flight Recorder can help diagnose Java application issues with garbage collections.
106-1	11818-11821	Use	
106-2	11822-11825	the	
106-3	11826-11829	jfr	
106-4	11830-11834	Tool	
106-5	11835-11837	to	
106-6	11838-11843	Debug	
106-7	11844-11851	Garbage	
106-8	11852-11862	Collection	
106-9	11863-11869	Issues	
106-10	11870-11880	Recordings	
106-11	11881-11885	from	
106-12	11886-11892	Flight	
106-13	11893-11901	Recorder	
106-14	11902-11905	can	
106-15	11906-11910	help	
106-16	11911-11919	diagnose	
106-17	11920-11924	Java	
106-18	11925-11936	application	
106-19	11937-11943	issues	
106-20	11944-11948	with	
106-21	11949-11956	garbage	
106-22	11957-11968	collections	
106-23	11968-11969	.	

#Text=Tuning the HotSpot Garbage Collector can have a big effect on performance.
107-1	11970-11976	Tuning	
107-2	11977-11980	the	
107-3	11981-11988	HotSpot	
107-4	11989-11996	Garbage	
107-5	11997-12006	Collector	
107-6	12007-12010	can	
107-7	12011-12015	have	
107-8	12016-12017	a	
107-9	12018-12021	big	
107-10	12022-12028	effect	
107-11	12029-12031	on	
107-12	12032-12043	performance	
107-13	12043-12044	.	

#Text=See Introduction to Garbage Collection Tuning in the Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide for information.
108-1	12045-12048	See	
108-2	12049-12061	Introduction	
108-3	12062-12064	to	
108-4	12065-12072	Garbage	
108-5	12073-12083	Collection	
108-6	12084-12090	Tuning	
108-7	12091-12093	in	
108-8	12094-12097	the	
108-9	12098-12102	Java	
108-10	12103-12111	Platform	
108-11	12111-12112	,	
108-12	12113-12121	Standard	
108-13	12122-12129	Edition	
108-14	12130-12137	HotSpot	
108-15	12138-12145	Virtual	
108-16	12146-12153	Machine	
108-17	12154-12161	Garbage	
108-18	12162-12172	Collection	
108-19	12173-12179	Tuning	
108-20	12180-12185	Guide	
108-21	12186-12189	for	
108-22	12190-12201	information	
108-23	12201-12202	.	

#Text=To investigate garbage collection issues, take a profiling flight recording of your application while it is running.
109-1	12203-12205	To	
109-2	12206-12217	investigate	
109-3	12218-12225	garbage	
109-4	12226-12236	collection	
109-5	12237-12243	issues	
109-6	12243-12244	,	
109-7	12245-12249	take	
109-8	12250-12251	a	
109-9	12252-12261	profiling	
109-10	12262-12268	flight	
109-11	12269-12278	recording	
109-12	12279-12281	of	
109-13	12282-12286	your	
109-14	12287-12298	application	
109-15	12299-12304	while	
109-16	12305-12307	it	
109-17	12308-12310	is	
109-18	12311-12318	running	
109-19	12318-12319	.	

#Text=Do not include the heap statistics, because that triggers extra old collections.
110-1	12320-12322	Do	
110-2	12323-12326	not	
110-3	12327-12334	include	
110-4	12335-12338	the	
110-5	12339-12343	heap	
110-6	12344-12354	statistics	
110-7	12354-12355	,	
110-8	12356-12363	because	
110-9	12364-12368	that	
110-10	12369-12377	triggers	
110-11	12378-12383	extra	
110-12	12384-12387	old	
110-13	12388-12399	collections	
110-14	12399-12400	.	

#Text=To get a good sample, take a longer recording, for example, 1 hour.
111-1	12401-12403	To	
111-2	12404-12407	get	
111-3	12408-12409	a	
111-4	12410-12414	good	
111-5	12415-12421	sample	
111-6	12421-12422	,	
111-7	12423-12427	take	
111-8	12428-12429	a	
111-9	12430-12436	longer	
111-10	12437-12446	recording	
111-11	12446-12447	,	
111-12	12448-12451	for	
111-13	12452-12459	example	
111-14	12459-12460	,	
111-15	12461-12462	1	
111-16	12463-12467	hour	
111-17	12467-12468	.	

#Text=Use the jfr tool to print the jdk.GCPhasePause events that were recorded.
112-1	12469-12472	Use	
112-2	12473-12476	the	
112-3	12477-12480	jfr	
112-4	12481-12485	tool	
112-5	12486-12488	to	
112-6	12489-12494	print	
112-7	12495-12498	the	
112-8	12499-12515	jdk.GCPhasePause	
112-9	12516-12522	events	
112-10	12523-12527	that	
112-11	12528-12532	were	
112-12	12533-12541	recorded	
112-13	12541-12542	.	

#Text=The following example shows the information contained in the event:
#Text=c:\\Program Files\\Java\\jdk-15\\bin>jfr print --events jdk.GCPhasePause \\
#Text=gctest.jfr
#Text=jdk.GCPhasePause {
#Text=startTime = 11:19:13.779
#Text=duration = 3.419 ms
#Text=gcId = 1
#Text=name = "GC Pause"
#Text=eventThread = "VM Thread" (osThreadId = 17528)
#Text=}Using the information from the jdk.GCPhasePause events, you can calculate the average sum of pauses for each GC, the maximum sum of pauses, and the total pause time.
113-1	12543-12546	The	
113-2	12547-12556	following	
113-3	12557-12564	example	
113-4	12565-12570	shows	
113-5	12571-12574	the	
113-6	12575-12586	information	
113-7	12587-12596	contained	
113-8	12597-12599	in	
113-9	12600-12603	the	
113-10	12604-12609	event	
113-11	12609-12610	:	
113-12	12611-12612	c	
113-13	12612-12613	:	
113-14	12613-12614	\	
113-15	12614-12621	Program	
113-16	12622-12627	Files	
113-17	12627-12628	\	
113-18	12628-12632	Java	
113-19	12632-12633	\	
113-20	12633-12636	jdk	
113-21	12636-12637	-	
113-22	12637-12639	15	
113-23	12639-12640	\	
113-24	12640-12643	bin	
113-25	12643-12644	>	
113-26	12644-12647	jfr	
113-27	12648-12653	print	
113-28	12654-12655	-	
113-29	12655-12656	-	
113-30	12656-12662	events	
113-31	12663-12679	jdk.GCPhasePause	
113-32	12680-12681	\	
113-33	12682-12692	gctest.jfr	
113-34	12693-12709	jdk.GCPhasePause	
113-35	12710-12711	{	
113-36	12712-12721	startTime	
113-37	12722-12723	=	
113-38	12724-12726	11	
113-39	12726-12727	:	
113-40	12727-12729	19	
113-41	12729-12730	:	
113-42	12730-12736	13.779	
113-43	12737-12745	duration	
113-44	12746-12747	=	
113-45	12748-12753	3.419	
113-46	12754-12756	ms	
113-47	12757-12761	gcId	
113-48	12762-12763	=	
113-49	12764-12765	1	
113-50	12766-12770	name	
113-51	12771-12772	=	
113-52	12773-12774	"	
113-53	12774-12776	GC	
113-54	12777-12782	Pause	
113-55	12782-12783	"	
113-56	12784-12795	eventThread	
113-57	12796-12797	=	
113-58	12798-12799	"	
113-59	12799-12801	VM	
113-60	12802-12808	Thread	
113-61	12808-12809	"	
113-62	12810-12811	(	
113-63	12811-12821	osThreadId	
113-64	12822-12823	=	
113-65	12824-12829	17528	
113-66	12829-12830	)	
113-67	12831-12832	}	
113-68	12832-12837	Using	
113-69	12838-12841	the	
113-70	12842-12853	information	
113-71	12854-12858	from	
113-72	12859-12862	the	
113-73	12863-12879	jdk.GCPhasePause	
113-74	12880-12886	events	
113-75	12886-12887	,	
113-76	12888-12891	you	
113-77	12892-12895	can	
113-78	12896-12905	calculate	
113-79	12906-12909	the	
113-80	12910-12917	average	
113-81	12918-12921	sum	
113-82	12922-12924	of	
113-83	12925-12931	pauses	
113-84	12932-12935	for	
113-85	12936-12940	each	
113-86	12941-12943	GC	
113-87	12943-12944	,	
113-88	12945-12948	the	
113-89	12949-12956	maximum	
113-90	12957-12960	sum	
113-91	12961-12963	of	
113-92	12964-12970	pauses	
113-93	12970-12971	,	
113-94	12972-12975	and	
113-95	12976-12979	the	
113-96	12980-12985	total	
113-97	12986-12991	pause	
113-98	12992-12996	time	
113-99	12996-12997	.	

#Text=The sum of pauses is the total amount of time that the application was paused during a GC.
114-1	12998-13001	The	
114-2	13002-13005	sum	
114-3	13006-13008	of	
114-4	13009-13015	pauses	
114-5	13016-13018	is	
114-6	13019-13022	the	
114-7	13023-13028	total	
114-8	13029-13035	amount	
114-9	13036-13038	of	
114-10	13039-13043	time	
114-11	13044-13048	that	
114-12	13049-13052	the	
114-13	13053-13064	application	
114-14	13065-13068	was	
114-15	13069-13075	paused	
114-16	13076-13082	during	
114-17	13083-13084	a	
114-18	13085-13087	GC	
114-19	13087-13088	.	

#Text=Many GCs do most of their work in the background.
115-1	13089-13093	Many	
115-2	13094-13097	GCs	
115-3	13098-13100	do	
115-4	13101-13105	most	
115-5	13106-13108	of	
115-6	13109-13114	their	
115-7	13115-13119	work	
115-8	13120-13122	in	
115-9	13123-13126	the	
115-10	13127-13137	background	
115-11	13137-13138	.	

#Text=In those cases, the length of the GC does not matter and what matters is how long the application actually had to stop.
116-1	13139-13141	In	
116-2	13142-13147	those	
116-3	13148-13153	cases	
116-4	13153-13154	,	
116-5	13155-13158	the	
116-6	13159-13165	length	
116-7	13166-13168	of	
116-8	13169-13172	the	
116-9	13173-13175	GC	
116-10	13176-13180	does	
116-11	13181-13184	not	
116-12	13185-13191	matter	
116-13	13192-13195	and	
116-14	13196-13200	what	
116-15	13201-13208	matters	
116-16	13209-13211	is	
116-17	13212-13215	how	
116-18	13216-13220	long	
116-19	13221-13224	the	
116-20	13225-13236	application	
116-21	13237-13245	actually	
116-22	13246-13249	had	
116-23	13250-13252	to	
116-24	13253-13257	stop	
116-25	13257-13258	.	

#Text=Therefore, the sum of pauses is a good measure for the GC effect.
117-1	13259-13268	Therefore	
117-2	13268-13269	,	
117-3	13270-13273	the	
117-4	13274-13277	sum	
117-5	13278-13280	of	
117-6	13281-13287	pauses	
117-7	13288-13290	is	
117-8	13291-13292	a	
117-9	13293-13297	good	
117-10	13298-13305	measure	
117-11	13306-13309	for	
117-12	13310-13313	the	
117-13	13314-13316	GC	
117-14	13317-13323	effect	
117-15	13323-13324	.	

#Text=The main performance problems with garbage collections are usually either that individual GCs take too long, or that too much time is spent in paused GCs (total GC pauses).
118-1	13325-13328	The	
118-2	13329-13333	main	
118-3	13334-13345	performance	
118-4	13346-13354	problems	
118-5	13355-13359	with	
118-6	13360-13367	garbage	
118-7	13368-13379	collections	
118-8	13380-13383	are	
118-9	13384-13391	usually	
118-10	13392-13398	either	
118-11	13399-13403	that	
118-12	13404-13414	individual	
118-13	13415-13418	GCs	
118-14	13419-13423	take	
118-15	13424-13427	too	
118-16	13428-13432	long	
118-17	13432-13433	,	
118-18	13434-13436	or	
118-19	13437-13441	that	
118-20	13442-13445	too	
118-21	13446-13450	much	
118-22	13451-13455	time	
118-23	13456-13458	is	
118-24	13459-13464	spent	
118-25	13465-13467	in	
118-26	13468-13474	paused	
118-27	13475-13478	GCs	
118-28	13479-13480	(	
118-29	13480-13485	total	
118-30	13486-13488	GC	
118-31	13489-13495	pauses	
118-32	13495-13496	)	
118-33	13496-13497	.	

#Text=When an individual GC takes too long, you may need to change the GC strategy.
119-1	13498-13502	When	
119-2	13503-13505	an	
119-3	13506-13516	individual	
119-4	13517-13519	GC	
119-5	13520-13525	takes	
119-6	13526-13529	too	
119-7	13530-13534	long	
119-8	13534-13535	,	
119-9	13536-13539	you	
119-10	13540-13543	may	
119-11	13544-13548	need	
119-12	13549-13551	to	
119-13	13552-13558	change	
119-14	13559-13562	the	
119-15	13563-13565	GC	
119-16	13566-13574	strategy	
119-17	13574-13575	.	

#Text=Different GCs have different trade-offs when it comes to pause times verses throughput performance.
120-1	13576-13585	Different	
120-2	13586-13589	GCs	
120-3	13590-13594	have	
120-4	13595-13604	different	
120-5	13605-13615	trade-offs	
120-6	13616-13620	when	
120-7	13621-13623	it	
120-8	13624-13629	comes	
120-9	13630-13632	to	
120-10	13633-13638	pause	
120-11	13639-13644	times	
120-12	13645-13651	verses	
120-13	13652-13662	throughput	
120-14	13663-13674	performance	
120-15	13674-13675	.	

#Text=For example, you may also need to fix your application so that it makes less use of finalizers or semireferences.
121-1	13676-13679	For	
121-2	13680-13687	example	
121-3	13687-13688	,	
121-4	13689-13692	you	
121-5	13693-13696	may	
121-6	13697-13701	also	
121-7	13702-13706	need	
121-8	13707-13709	to	
121-9	13710-13713	fix	
121-10	13714-13718	your	
121-11	13719-13730	application	
121-12	13731-13733	so	
121-13	13734-13738	that	
121-14	13739-13741	it	
121-15	13742-13747	makes	
121-16	13748-13752	less	
121-17	13753-13756	use	
121-18	13757-13759	of	
121-19	13760-13770	finalizers	
121-20	13771-13773	or	
121-21	13774-13788	semireferences	
121-22	13788-13789	.	

#Text=See Behavior-Based Tuning in the Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide.
122-1	13790-13793	See	
122-2	13794-13808	Behavior-Based	
122-3	13809-13815	Tuning	
122-4	13816-13818	in	
122-5	13819-13822	the	
122-6	13823-13827	Java	
122-7	13828-13836	Platform	
122-8	13836-13837	,	
122-9	13838-13846	Standard	
122-10	13847-13854	Edition	
122-11	13855-13862	HotSpot	
122-12	13863-13870	Virtual	
122-13	13871-13878	Machine	
122-14	13879-13886	Garbage	
122-15	13887-13897	Collection	
122-16	13898-13904	Tuning	
122-17	13905-13910	Guide	
122-18	13910-13911	.	

#Text=When the application spends too much time paused, there are different ways to work around that:
#Text=Increase the Java heap size.
123-1	13912-13916	When	
123-2	13917-13920	the	
123-3	13921-13932	application	
123-4	13933-13939	spends	
123-5	13940-13943	too	
123-6	13944-13948	much	
123-7	13949-13953	time	
123-8	13954-13960	paused	
123-9	13960-13961	,	
123-10	13962-13967	there	
123-11	13968-13971	are	
123-12	13972-13981	different	
123-13	13982-13986	ways	
123-14	13987-13989	to	
123-15	13990-13994	work	
123-16	13995-14001	around	
123-17	14002-14006	that	
123-18	14006-14007	:	
123-19	14008-14016	Increase	
123-20	14017-14020	the	
123-21	14021-14025	Java	
123-22	14026-14030	heap	
123-23	14031-14035	size	
123-24	14035-14036	.	

#Text=The bigger the Java heap, the longer time it is between GCs.
124-1	14037-14040	The	
124-2	14041-14047	bigger	
124-3	14048-14051	the	
124-4	14052-14056	Java	
124-5	14057-14061	heap	
124-6	14061-14062	,	
124-7	14063-14066	the	
124-8	14067-14073	longer	
124-9	14074-14078	time	
124-10	14079-14081	it	
124-11	14082-14084	is	
124-12	14085-14092	between	
124-13	14093-14096	GCs	
124-14	14096-14097	.	

#Text=Watch out for any memory leaks in the Java application, because that may cause more and more frequent GCs until an OutOfMemoryError is thrown.
125-1	14098-14103	Watch	
125-2	14104-14107	out	
125-3	14108-14111	for	
125-4	14112-14115	any	
125-5	14116-14122	memory	
125-6	14123-14128	leaks	
125-7	14129-14131	in	
125-8	14132-14135	the	
125-9	14136-14140	Java	
125-10	14141-14152	application	
125-11	14152-14153	,	
125-12	14154-14161	because	
125-13	14162-14166	that	
125-14	14167-14170	may	
125-15	14171-14176	cause	
125-16	14177-14181	more	
125-17	14182-14185	and	
125-18	14186-14190	more	
125-19	14191-14199	frequent	
125-20	14200-14203	GCs	
125-21	14204-14209	until	
125-22	14210-14212	an	
125-23	14213-14229	OutOfMemoryError	
125-24	14230-14232	is	
125-25	14233-14239	thrown	
125-26	14239-14240	.	

#Text=For more information, see Use JDK Mission Control to Debug Memory Leak.
126-1	14241-14244	For	
126-2	14245-14249	more	
126-3	14250-14261	information	
126-4	14261-14262	,	
126-5	14263-14266	see	
126-6	14267-14270	Use	
126-7	14271-14274	JDK	
126-8	14275-14282	Mission	
126-9	14283-14290	Control	
126-10	14291-14293	to	
126-11	14294-14299	Debug	
126-12	14300-14306	Memory	
126-13	14307-14311	Leak	
126-14	14311-14312	.	

#Text=To reduce the number of GCs, allocate fewer temporary objects.
127-1	14313-14315	To	
127-2	14316-14322	reduce	
127-3	14323-14326	the	
127-4	14327-14333	number	
127-5	14334-14336	of	
127-6	14337-14340	GCs	
127-7	14340-14341	,	
127-8	14342-14350	allocate	
127-9	14351-14356	fewer	
127-10	14357-14366	temporary	
127-11	14367-14374	objects	
127-12	14374-14375	.	

#Text=Small objects are allocated inside TLABs, and large objects are allocated outside TLABs.
128-1	14376-14381	Small	
128-2	14382-14389	objects	
128-3	14390-14393	are	
128-4	14394-14403	allocated	
128-5	14404-14410	inside	
128-6	14411-14416	TLABs	
128-7	14416-14417	,	
128-8	14418-14421	and	
128-9	14422-14427	large	
128-10	14428-14435	objects	
128-11	14436-14439	are	
128-12	14440-14449	allocated	
128-13	14450-14457	outside	
128-14	14458-14463	TLABs	
128-15	14463-14464	.	

#Text=Often, the majority of allocations happen inside TLABs.
129-1	14465-14470	Often	
129-2	14470-14471	,	
129-3	14472-14475	the	
129-4	14476-14484	majority	
129-5	14485-14487	of	
129-6	14488-14499	allocations	
129-7	14500-14506	happen	
129-8	14507-14513	inside	
129-9	14514-14519	TLABs	
129-10	14519-14520	.	

#Text=The jdk.ObjectAllocationInNewTLAB and jdk.ObjectAllocationOutsideTLAB events provide information about the allocation of temporary objects.
130-1	14521-14524	The	
130-2	14525-14554	jdk.ObjectAllocationInNewTLAB	
130-3	14555-14558	and	
130-4	14559-14590	jdk.ObjectAllocationOutsideTLAB	
130-5	14591-14597	events	
130-6	14598-14605	provide	
130-7	14606-14617	information	
130-8	14618-14623	about	
130-9	14624-14627	the	
130-10	14628-14638	allocation	
130-11	14639-14641	of	
130-12	14642-14651	temporary	
130-13	14652-14659	objects	
130-14	14659-14660	.	

#Text=To reduce the need of GCs, decrease the allocation rate.
131-1	14661-14663	To	
131-2	14664-14670	reduce	
131-3	14671-14674	the	
131-4	14675-14679	need	
131-5	14680-14682	of	
131-6	14683-14686	GCs	
131-7	14686-14687	,	
131-8	14688-14696	decrease	
131-9	14697-14700	the	
131-10	14701-14711	allocation	
131-11	14712-14716	rate	
131-12	14716-14717	.	

#Text=The jdk.ThreadAllocationStatistics event provides information about the allocations per thread.
132-1	14718-14721	The	
132-2	14722-14752	jdk.ThreadAllocationStatistics	
132-3	14753-14758	event	
132-4	14759-14767	provides	
132-5	14768-14779	information	
132-6	14780-14785	about	
132-7	14786-14789	the	
132-8	14790-14801	allocations	
132-9	14802-14805	per	
132-10	14806-14812	thread	
132-11	14812-14813	.	

#Text=Some other settings may also increase GC performance of the Java application.
133-1	14814-14818	Some	
133-2	14819-14824	other	
133-3	14825-14833	settings	
133-4	14834-14837	may	
133-5	14838-14842	also	
133-6	14843-14851	increase	
133-7	14852-14854	GC	
133-8	14855-14866	performance	
133-9	14867-14869	of	
133-10	14870-14873	the	
133-11	14874-14878	Java	
133-12	14879-14890	application	
133-13	14890-14891	.	

#Text=See Garbage-First Garbage Collection in the Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide for more information about GC performance.
134-1	14892-14895	See	
134-2	14896-14909	Garbage-First	
134-3	14910-14917	Garbage	
134-4	14918-14928	Collection	
134-5	14929-14931	in	
134-6	14932-14935	the	
134-7	14936-14940	Java	
134-8	14941-14949	Platform	
134-9	14949-14950	,	
134-10	14951-14959	Standard	
134-11	14960-14967	Edition	
134-12	14968-14975	HotSpot	
134-13	14976-14983	Virtual	
134-14	14984-14991	Machine	
134-15	14992-14999	Garbage	
134-16	15000-15010	Collection	
134-17	15011-15017	Tuning	
134-18	15018-15023	Guide	
134-19	15024-15027	for	
134-20	15028-15032	more	
134-21	15033-15044	information	
134-22	15045-15050	about	
134-23	15051-15053	GC	
134-24	15054-15065	performance	
134-25	15065-15066	.	

#Text=Synchronization Performance
#Text=Java applications encounter synchronization issues when the application threads spend a lot of time waiting to enter a monitor.
135-1	15067-15082	Synchronization	
135-2	15083-15094	Performance	
135-3	15095-15099	Java	
135-4	15100-15112	applications	
135-5	15113-15122	encounter	
135-6	15123-15138	synchronization	
135-7	15139-15145	issues	
135-8	15146-15150	when	
135-9	15151-15154	the	
135-10	15155-15166	application	
135-11	15167-15174	threads	
135-12	15175-15180	spend	
135-13	15181-15182	a	
135-14	15183-15186	lot	
135-15	15187-15189	of	
135-16	15190-15194	time	
135-17	15195-15202	waiting	
135-18	15203-15205	to	
135-19	15206-15211	enter	
135-20	15212-15213	a	
135-21	15214-15221	monitor	
135-22	15221-15222	.	

#Text=Topics:
#Text=Use JDK Mission Control to Debug Synchronization Issues
#Text=Use jdk.JavaMonitorWait Events to Debug Synchronization Issues
#Text=Use JDK Mission Control to Debug Synchronization Issues
#Text=You can use JMC to debug Java Application synchronization issues.
136-1	15223-15229	Topics	
136-2	15229-15230	:	
136-3	15231-15234	Use	
136-4	15235-15238	JDK	
136-5	15239-15246	Mission	
136-6	15247-15254	Control	
136-7	15255-15257	to	
136-8	15258-15263	Debug	
136-9	15264-15279	Synchronization	
136-10	15280-15286	Issues	
136-11	15287-15290	Use	
136-12	15291-15310	jdk.JavaMonitorWait	
136-13	15311-15317	Events	
136-14	15318-15320	to	
136-15	15321-15326	Debug	
136-16	15327-15342	Synchronization	
136-17	15343-15349	Issues	
136-18	15350-15353	Use	
136-19	15354-15357	JDK	
136-20	15358-15365	Mission	
136-21	15366-15373	Control	
136-22	15374-15376	to	
136-23	15377-15382	Debug	
136-24	15383-15398	Synchronization	
136-25	15399-15405	Issues	
136-26	15406-15409	You	
136-27	15410-15413	can	
136-28	15414-15417	use	
136-29	15418-15421	JMC	
136-30	15422-15424	to	
136-31	15425-15430	debug	
136-32	15431-15435	Java	
136-33	15436-15447	Application	
136-34	15448-15463	synchronization	
136-35	15464-15470	issues	
136-36	15470-15471	.	

#Text=Open the flight recording in JMC and look at the Automated Analysis Results page.
137-1	15472-15476	Open	
137-2	15477-15480	the	
137-3	15481-15487	flight	
137-4	15488-15497	recording	
137-5	15498-15500	in	
137-6	15501-15504	JMC	
137-7	15505-15508	and	
137-8	15509-15513	look	
137-9	15514-15516	at	
137-10	15517-15520	the	
137-11	15521-15530	Automated	
137-12	15531-15539	Analysis	
137-13	15540-15547	Results	
137-14	15548-15552	page	
137-15	15552-15553	.	

#Text=Here is a sample figure of a recording, which shows threads that are blocked on locks.
138-1	15554-15558	Here	
138-2	15559-15561	is	
138-3	15562-15563	a	
138-4	15564-15570	sample	
138-5	15571-15577	figure	
138-6	15578-15580	of	
138-7	15581-15582	a	
138-8	15583-15592	recording	
138-9	15592-15593	,	
138-10	15594-15599	which	
138-11	15600-15605	shows	
138-12	15606-15613	threads	
138-13	15614-15618	that	
138-14	15619-15622	are	
138-15	15623-15630	blocked	
138-16	15631-15633	on	
138-17	15634-15639	locks	
138-18	15639-15640	.	

#Text=Figure 4-4 Synchronization Issue - Automated Analysis Results PageDescription of "Figure 4-4 Synchronization Issue - Automated Analysis Results Page"
#Text=Focus on the Lock Instances section of the page, which is highlighted in red.
139-1	15641-15647	Figure	
139-2	15648-15649	4	
139-3	15649-15650	-	
139-4	15650-15651	4	
139-5	15652-15667	Synchronization	
139-6	15668-15673	Issue	
139-7	15674-15675	-	
139-8	15676-15685	Automated	
139-9	15686-15694	Analysis	
139-10	15695-15702	Results	
139-11	15703-15718	PageDescription	
139-12	15719-15721	of	
139-13	15722-15723	"	
139-14	15723-15729	Figure	
139-15	15730-15731	4	
139-16	15731-15732	-	
139-17	15732-15733	4	
139-18	15734-15749	Synchronization	
139-19	15750-15755	Issue	
139-20	15756-15757	-	
139-21	15758-15767	Automated	
139-22	15768-15776	Analysis	
139-23	15777-15784	Results	
139-24	15785-15789	Page	
139-25	15789-15790	"	
139-26	15791-15796	Focus	
139-27	15797-15799	on	
139-28	15800-15803	the	
139-29	15804-15808	Lock	
139-30	15809-15818	Instances	
139-31	15819-15826	section	
139-32	15827-15829	of	
139-33	15830-15833	the	
139-34	15834-15838	page	
139-35	15838-15839	,	
139-36	15840-15845	which	
139-37	15846-15848	is	
139-38	15849-15860	highlighted	
139-39	15861-15863	in	
139-40	15864-15867	red	
139-41	15867-15868	.	

#Text=This is indicative of a potential problem.
140-1	15869-15873	This	
140-2	15874-15876	is	
140-3	15877-15887	indicative	
140-4	15888-15890	of	
140-5	15891-15892	a	
140-6	15893-15902	potential	
140-7	15903-15910	problem	
140-8	15910-15911	.	

#Text=You can observe that there are threads that are blocked on locks.
141-1	15912-15915	You	
141-2	15916-15919	can	
141-3	15920-15927	observe	
141-4	15928-15932	that	
141-5	15933-15938	there	
141-6	15939-15942	are	
141-7	15943-15950	threads	
141-8	15951-15955	that	
141-9	15956-15959	are	
141-10	15960-15967	blocked	
141-11	15968-15970	on	
141-12	15971-15976	locks	
141-13	15976-15977	.	

#Text=For further analysis, open the Lock Instances
#Text=page.
142-1	15978-15981	For	
142-2	15982-15989	further	
142-3	15990-15998	analysis	
142-4	15998-15999	,	
142-5	16000-16004	open	
142-6	16005-16008	the	
142-7	16009-16013	Lock	
142-8	16014-16023	Instances	
142-9	16024-16028	page	
142-10	16028-16029	.	

#Text=Here is a sample figure of a recording, which shows the thread that is blocked on locks the most and the stack trace of the thread waiting to acquire the lock.
143-1	16030-16034	Here	
143-2	16035-16037	is	
143-3	16038-16039	a	
143-4	16040-16046	sample	
143-5	16047-16053	figure	
143-6	16054-16056	of	
143-7	16057-16058	a	
143-8	16059-16068	recording	
143-9	16068-16069	,	
143-10	16070-16075	which	
143-11	16076-16081	shows	
143-12	16082-16085	the	
143-13	16086-16092	thread	
143-14	16093-16097	that	
143-15	16098-16100	is	
143-16	16101-16108	blocked	
143-17	16109-16111	on	
143-18	16112-16117	locks	
143-19	16118-16121	the	
143-20	16122-16126	most	
143-21	16127-16130	and	
143-22	16131-16134	the	
143-23	16135-16140	stack	
143-24	16141-16146	trace	
143-25	16147-16149	of	
143-26	16150-16153	the	
143-27	16154-16160	thread	
143-28	16161-16168	waiting	
143-29	16169-16171	to	
143-30	16172-16179	acquire	
143-31	16180-16183	the	
143-32	16184-16188	lock	
143-33	16188-16189	.	

#Text=Figure 4-5 Synchronization Issue - Lock InstanceDescription of "Figure 4-5 Synchronization Issue - Lock Instance"
#Text=You can notice that threads in the application were blocked on locks for a total time of 3 hours.
144-1	16190-16196	Figure	
144-2	16197-16198	4	
144-3	16198-16199	-	
144-4	16199-16200	5	
144-5	16201-16216	Synchronization	
144-6	16217-16222	Issue	
144-7	16223-16224	-	
144-8	16225-16229	Lock	
144-9	16230-16249	InstanceDescription	
144-10	16250-16252	of	
144-11	16253-16254	"	
144-12	16254-16260	Figure	
144-13	16261-16262	4	
144-14	16262-16263	-	
144-15	16263-16264	5	
144-16	16265-16280	Synchronization	
144-17	16281-16286	Issue	
144-18	16287-16288	-	
144-19	16289-16293	Lock	
144-20	16294-16302	Instance	
144-21	16302-16303	"	
144-22	16304-16307	You	
144-23	16308-16311	can	
144-24	16312-16318	notice	
144-25	16319-16323	that	
144-26	16324-16331	threads	
144-27	16332-16334	in	
144-28	16335-16338	the	
144-29	16339-16350	application	
144-30	16351-16355	were	
144-31	16356-16363	blocked	
144-32	16364-16366	on	
144-33	16367-16372	locks	
144-34	16373-16376	for	
144-35	16377-16378	a	
144-36	16379-16384	total	
144-37	16385-16389	time	
144-38	16390-16392	of	
144-39	16393-16394	3	
144-40	16395-16400	hours	
144-41	16400-16401	.	

#Text=The most common monitor class in contention was Logger, which was blocked 2972 times.
145-1	16402-16405	The	
145-2	16406-16410	most	
145-3	16411-16417	common	
145-4	16418-16425	monitor	
145-5	16426-16431	class	
145-6	16432-16434	in	
145-7	16435-16445	contention	
145-8	16446-16449	was	
145-9	16450-16456	Logger	
145-10	16456-16457	,	
145-11	16458-16463	which	
145-12	16464-16467	was	
145-13	16468-16475	blocked	
145-14	16476-16480	2972	
145-15	16481-16486	times	
145-16	16486-16487	.	

#Text=Typically, logging is an area that can be a bottleneck in applications.
146-1	16488-16497	Typically	
146-2	16497-16498	,	
146-3	16499-16506	logging	
146-4	16507-16509	is	
146-5	16510-16512	an	
146-6	16513-16517	area	
146-7	16518-16522	that	
146-8	16523-16526	can	
146-9	16527-16529	be	
146-10	16530-16531	a	
146-11	16532-16542	bottleneck	
146-12	16543-16545	in	
146-13	16546-16558	applications	
146-14	16558-16559	.	

#Text=In this scenario, the blocking events all seem to be due to calls to the log method.
147-1	16560-16562	In	
147-2	16563-16567	this	
147-3	16568-16576	scenario	
147-4	16576-16577	,	
147-5	16578-16581	the	
147-6	16582-16590	blocking	
147-7	16591-16597	events	
147-8	16598-16601	all	
147-9	16602-16606	seem	
147-10	16607-16609	to	
147-11	16610-16612	be	
147-12	16613-16616	due	
147-13	16617-16619	to	
147-14	16620-16625	calls	
147-15	16626-16628	to	
147-16	16629-16632	the	
147-17	16633-16636	log	
147-18	16637-16643	method	
147-19	16643-16644	.	

#Text=You can review and make required code changes to fix this issue.
148-1	16645-16648	You	
148-2	16649-16652	can	
148-3	16653-16659	review	
148-4	16660-16663	and	
148-5	16664-16668	make	
148-6	16669-16677	required	
148-7	16678-16682	code	
148-8	16683-16690	changes	
148-9	16691-16693	to	
148-10	16694-16697	fix	
148-11	16698-16702	this	
148-12	16703-16708	issue	
148-13	16708-16709	.	

#Text=Use jdk.JavaMonitorWait Events to Debug Synchronization Issues
#Text=To debug Java Application synchronization issues, which is where the application threads spend a lot of time waiting to enter a monitor, look at the jdk.JavaMonitorWait events in a recording from Flight Recorder.
149-1	16710-16713	Use	
149-2	16714-16733	jdk.JavaMonitorWait	
149-3	16734-16740	Events	
149-4	16741-16743	to	
149-5	16744-16749	Debug	
149-6	16750-16765	Synchronization	
149-7	16766-16772	Issues	
149-8	16773-16775	To	
149-9	16776-16781	debug	
149-10	16782-16786	Java	
149-11	16787-16798	Application	
149-12	16799-16814	synchronization	
149-13	16815-16821	issues	
149-14	16821-16822	,	
149-15	16823-16828	which	
149-16	16829-16831	is	
149-17	16832-16837	where	
149-18	16838-16841	the	
149-19	16842-16853	application	
149-20	16854-16861	threads	
149-21	16862-16867	spend	
149-22	16868-16869	a	
149-23	16870-16873	lot	
149-24	16874-16876	of	
149-25	16877-16881	time	
149-26	16882-16889	waiting	
149-27	16890-16892	to	
149-28	16893-16898	enter	
149-29	16899-16900	a	
149-30	16901-16908	monitor	
149-31	16908-16909	,	
149-32	16910-16914	look	
149-33	16915-16917	at	
149-34	16918-16921	the	
149-35	16922-16941	jdk.JavaMonitorWait	
149-36	16942-16948	events	
149-37	16949-16951	in	
149-38	16952-16953	a	
149-39	16954-16963	recording	
149-40	16964-16968	from	
149-41	16969-16975	Flight	
149-42	16976-16984	Recorder	
149-43	16984-16985	.	

#Text=Look at the locks that are contended the most and the stack trace of the threads waiting to acquire the lock.
150-1	16986-16990	Look	
150-2	16991-16993	at	
150-3	16994-16997	the	
150-4	16998-17003	locks	
150-5	17004-17008	that	
150-6	17009-17012	are	
150-7	17013-17022	contended	
150-8	17023-17026	the	
150-9	17027-17031	most	
150-10	17032-17035	and	
150-11	17036-17039	the	
150-12	17040-17045	stack	
150-13	17046-17051	trace	
150-14	17052-17054	of	
150-15	17055-17058	the	
150-16	17059-17066	threads	
150-17	17067-17074	waiting	
150-18	17075-17077	to	
150-19	17078-17085	acquire	
150-20	17086-17089	the	
150-21	17090-17094	lock	
150-22	17094-17095	.	

#Text=Typically, look for contention that you did not think would be an issue.
151-1	17096-17105	Typically	
151-2	17105-17106	,	
151-3	17107-17111	look	
151-4	17112-17115	for	
151-5	17116-17126	contention	
151-6	17127-17131	that	
151-7	17132-17135	you	
151-8	17136-17139	did	
151-9	17140-17143	not	
151-10	17144-17149	think	
151-11	17150-17155	would	
151-12	17156-17158	be	
151-13	17159-17161	an	
151-14	17162-17167	issue	
151-15	17167-17168	.	

#Text=Logging is a common area that can be an unexpected bottleneck in some applications.
152-1	17169-17176	Logging	
152-2	17177-17179	is	
152-3	17180-17181	a	
152-4	17182-17188	common	
152-5	17189-17193	area	
152-6	17194-17198	that	
152-7	17199-17202	can	
152-8	17203-17205	be	
152-9	17206-17208	an	
152-10	17209-17219	unexpected	
152-11	17220-17230	bottleneck	
152-12	17231-17233	in	
152-13	17234-17238	some	
152-14	17239-17251	applications	
152-15	17251-17252	.	

#Text=When you see performance degradation after a program update or at any specific times in the Java application, take a flight recording when things are good, and take another one when things are bad to look for a synchronization site that increases a lot.
153-1	17253-17257	When	
153-2	17258-17261	you	
153-3	17262-17265	see	
153-4	17266-17277	performance	
153-5	17278-17289	degradation	
153-6	17290-17295	after	
153-7	17296-17297	a	
153-8	17298-17305	program	
153-9	17306-17312	update	
153-10	17313-17315	or	
153-11	17316-17318	at	
153-12	17319-17322	any	
153-13	17323-17331	specific	
153-14	17332-17337	times	
153-15	17338-17340	in	
153-16	17341-17344	the	
153-17	17345-17349	Java	
153-18	17350-17361	application	
153-19	17361-17362	,	
153-20	17363-17367	take	
153-21	17368-17369	a	
153-22	17370-17376	flight	
153-23	17377-17386	recording	
153-24	17387-17391	when	
153-25	17392-17398	things	
153-26	17399-17402	are	
153-27	17403-17407	good	
153-28	17407-17408	,	
153-29	17409-17412	and	
153-30	17413-17417	take	
153-31	17418-17425	another	
153-32	17426-17429	one	
153-33	17430-17434	when	
153-34	17435-17441	things	
153-35	17442-17445	are	
153-36	17446-17449	bad	
153-37	17450-17452	to	
153-38	17453-17457	look	
153-39	17458-17461	for	
153-40	17462-17463	a	
153-41	17464-17479	synchronization	
153-42	17480-17484	site	
153-43	17485-17489	that	
153-44	17490-17499	increases	
153-45	17500-17501	a	
153-46	17502-17505	lot	
153-47	17505-17506	.	

#Text=Note:By default, contention events with a duration longer than 20 ms are recorded.
154-1	17507-17511	Note	
154-2	17511-17512	:	
154-3	17512-17514	By	
154-4	17515-17522	default	
154-5	17522-17523	,	
154-6	17524-17534	contention	
154-7	17535-17541	events	
154-8	17542-17546	with	
154-9	17547-17548	a	
154-10	17549-17557	duration	
154-11	17558-17564	longer	
154-12	17565-17569	than	
154-13	17570-17572	20	
154-14	17573-17575	ms	
154-15	17576-17579	are	
154-16	17580-17588	recorded	
154-17	17588-17589	.	

#Text=This threshold can be modified when starting the flight recording.
155-1	17590-17594	This	
155-2	17595-17604	threshold	
155-3	17605-17608	can	
155-4	17609-17611	be	
155-5	17612-17620	modified	
155-6	17621-17625	when	
155-7	17626-17634	starting	
155-8	17635-17638	the	
155-9	17639-17645	flight	
155-10	17646-17655	recording	
155-11	17655-17656	.	

#Text=Shorter thresholds give more events and also potentially more overhead.
156-1	17657-17664	Shorter	
156-2	17665-17675	thresholds	
156-3	17676-17680	give	
156-4	17681-17685	more	
156-5	17686-17692	events	
156-6	17693-17696	and	
156-7	17697-17701	also	
156-8	17702-17713	potentially	
156-9	17714-17718	more	
156-10	17719-17727	overhead	
156-11	17727-17728	.	

#Text=If you believe contention is an issue, then you could take a shorter recording with a very low threshold of only a few milliseconds.
157-1	17729-17731	If	
157-2	17732-17735	you	
157-3	17736-17743	believe	
157-4	17744-17754	contention	
157-5	17755-17757	is	
157-6	17758-17760	an	
157-7	17761-17766	issue	
157-8	17766-17767	,	
157-9	17768-17772	then	
157-10	17773-17776	you	
157-11	17777-17782	could	
157-12	17783-17787	take	
157-13	17788-17789	a	
157-14	17790-17797	shorter	
157-15	17798-17807	recording	
157-16	17808-17812	with	
157-17	17813-17814	a	
157-18	17815-17819	very	
157-19	17820-17823	low	
157-20	17824-17833	threshold	
157-21	17834-17836	of	
157-22	17837-17841	only	
157-23	17842-17843	a	
157-24	17844-17847	few	
157-25	17848-17860	milliseconds	
157-26	17860-17861	.	

#Text=When this is done on a live application, make sure to start with a very short recording, and monitor the performance overhead.
158-1	17862-17866	When	
158-2	17867-17871	this	
158-3	17872-17874	is	
158-4	17875-17879	done	
158-5	17880-17882	on	
158-6	17883-17884	a	
158-7	17885-17889	live	
158-8	17890-17901	application	
158-9	17901-17902	,	
158-10	17903-17907	make	
158-11	17908-17912	sure	
158-12	17913-17915	to	
158-13	17916-17921	start	
158-14	17922-17926	with	
158-15	17927-17928	a	
158-16	17929-17933	very	
158-17	17934-17939	short	
158-18	17940-17949	recording	
158-19	17949-17950	,	
158-20	17951-17954	and	
158-21	17955-17962	monitor	
158-22	17963-17966	the	
158-23	17967-17978	performance	
158-24	17979-17987	overhead	
158-25	17987-17988	.	

#Text=I/O Performance
#Text=Topics:
#Text=Use JDK Mission Control to Debug I/O Issues
#Text=Use the Socket Read and Write Events to Debug I/O Issues
#Text=Use JDK Mission Control to Debug I/O Issues
#Text=You can diagnose I/O issues in an application by monitoring the Socket I/O
#Text=or the
#Text=File I/O pages in JMC.
159-1	17989-17990	I	
159-2	17990-17991	/	
159-3	17991-17992	O	
159-4	17993-18004	Performance	
159-5	18005-18011	Topics	
159-6	18011-18012	:	
159-7	18013-18016	Use	
159-8	18017-18020	JDK	
159-9	18021-18028	Mission	
159-10	18029-18036	Control	
159-11	18037-18039	to	
159-12	18040-18045	Debug	
159-13	18046-18047	I	
159-14	18047-18048	/	
159-15	18048-18049	O	
159-16	18050-18056	Issues	
159-17	18057-18060	Use	
159-18	18061-18064	the	
159-19	18065-18071	Socket	
159-20	18072-18076	Read	
159-21	18077-18080	and	
159-22	18081-18086	Write	
159-23	18087-18093	Events	
159-24	18094-18096	to	
159-25	18097-18102	Debug	
159-26	18103-18104	I	
159-27	18104-18105	/	
159-28	18105-18106	O	
159-29	18107-18113	Issues	
159-30	18114-18117	Use	
159-31	18118-18121	JDK	
159-32	18122-18129	Mission	
159-33	18130-18137	Control	
159-34	18138-18140	to	
159-35	18141-18146	Debug	
159-36	18147-18148	I	
159-37	18148-18149	/	
159-38	18149-18150	O	
159-39	18151-18157	Issues	
159-40	18158-18161	You	
159-41	18162-18165	can	
159-42	18166-18174	diagnose	
159-43	18175-18176	I	
159-44	18176-18177	/	
159-45	18177-18178	O	
159-46	18179-18185	issues	
159-47	18186-18188	in	
159-48	18189-18191	an	
159-49	18192-18203	application	
159-50	18204-18206	by	
159-51	18207-18217	monitoring	
159-52	18218-18221	the	
159-53	18222-18228	Socket	
159-54	18229-18230	I	
159-55	18230-18231	/	
159-56	18231-18232	O	
159-57	18233-18235	or	
159-58	18236-18239	the	
159-59	18240-18244	File	
159-60	18245-18246	I	
159-61	18246-18247	/	
159-62	18247-18248	O	
159-63	18249-18254	pages	
159-64	18255-18257	in	
159-65	18258-18261	JMC	
159-66	18261-18262	.	

#Text=When a Java application spends a lot of time either in Socket Read, Socket Write, File Read, or File Write, then I/O or networking can cause bottleneck.
160-1	18263-18267	When	
160-2	18268-18269	a	
160-3	18270-18274	Java	
160-4	18275-18286	application	
160-5	18287-18293	spends	
160-6	18294-18295	a	
160-7	18296-18299	lot	
160-8	18300-18302	of	
160-9	18303-18307	time	
160-10	18308-18314	either	
160-11	18315-18317	in	
160-12	18318-18324	Socket	
160-13	18325-18329	Read	
160-14	18329-18330	,	
160-15	18331-18337	Socket	
160-16	18338-18343	Write	
160-17	18343-18344	,	
160-18	18345-18349	File	
160-19	18350-18354	Read	
160-20	18354-18355	,	
160-21	18356-18358	or	
160-22	18359-18363	File	
160-23	18364-18369	Write	
160-24	18369-18370	,	
160-25	18371-18375	then	
160-26	18376-18377	I	
160-27	18377-18378	/	
160-28	18378-18379	O	
160-29	18380-18382	or	
160-30	18383-18393	networking	
160-31	18394-18397	can	
160-32	18398-18403	cause	
160-33	18404-18414	bottleneck	
160-34	18414-18415	.	

#Text=To diagnose I/O issues in applications, open the Socket I/O page under the Java Application page in the Automated Analysis Results page.
161-1	18416-18418	To	
161-2	18419-18427	diagnose	
161-3	18428-18429	I	
161-4	18429-18430	/	
161-5	18430-18431	O	
161-6	18432-18438	issues	
161-7	18439-18441	in	
161-8	18442-18454	applications	
161-9	18454-18455	,	
161-10	18456-18460	open	
161-11	18461-18464	the	
161-12	18465-18471	Socket	
161-13	18472-18473	I	
161-14	18473-18474	/	
161-15	18474-18475	O	
161-16	18476-18480	page	
161-17	18481-18486	under	
161-18	18487-18490	the	
161-19	18491-18495	Java	
161-20	18496-18507	Application	
161-21	18508-18512	page	
161-22	18513-18515	in	
161-23	18516-18519	the	
161-24	18520-18529	Automated	
161-25	18530-18538	Analysis	
161-26	18539-18546	Results	
161-27	18547-18551	page	
161-28	18551-18552	.	

#Text=Here is a sample figure of a recording, which shows Socket I/O details.
162-1	18553-18557	Here	
162-2	18558-18560	is	
162-3	18561-18562	a	
162-4	18563-18569	sample	
162-5	18570-18576	figure	
162-6	18577-18579	of	
162-7	18580-18581	a	
162-8	18582-18591	recording	
162-9	18591-18592	,	
162-10	18593-18598	which	
162-11	18599-18604	shows	
162-12	18605-18611	Socket	
162-13	18612-18613	I	
162-14	18613-18614	/	
162-15	18614-18615	O	
162-16	18616-18623	details	
162-17	18623-18624	.	

#Text=Figure 4-6 Socket I/O - Java ApplicationDescription of "Figure 4-6 Socket I/O - Java Application"
#Text=The figure shows that for the application the longest recorded socket write took 349.745 ms to write 81 B to the host.
163-1	18625-18631	Figure	
163-2	18632-18633	4	
163-3	18633-18634	-	
163-4	18634-18635	6	
163-5	18636-18642	Socket	
163-6	18643-18644	I	
163-7	18644-18645	/	
163-8	18645-18646	O	
163-9	18647-18648	-	
163-10	18649-18653	Java	
163-11	18654-18676	ApplicationDescription	
163-12	18677-18679	of	
163-13	18680-18681	"	
163-14	18681-18687	Figure	
163-15	18688-18689	4	
163-16	18689-18690	-	
163-17	18690-18691	6	
163-18	18692-18698	Socket	
163-19	18699-18700	I	
163-20	18700-18701	/	
163-21	18701-18702	O	
163-22	18703-18704	-	
163-23	18705-18709	Java	
163-24	18710-18721	Application	
163-25	18721-18722	"	
163-26	18723-18726	The	
163-27	18727-18733	figure	
163-28	18734-18739	shows	
163-29	18740-18744	that	
163-30	18745-18748	for	
163-31	18749-18752	the	
163-32	18753-18764	application	
163-33	18765-18768	the	
163-34	18769-18776	longest	
163-35	18777-18785	recorded	
163-36	18786-18792	socket	
163-37	18793-18798	write	
163-38	18799-18803	took	
163-39	18804-18811	349.745	
163-40	18812-18814	ms	
163-41	18815-18817	to	
163-42	18818-18823	write	
163-43	18824-18826	81	
163-44	18827-18828	B	
163-45	18829-18831	to	
163-46	18832-18835	the	
163-47	18836-18840	host	
163-48	18840-18841	.	

#Text=File or networking I/O issues are diagnosed in a similar fashion.
164-1	18842-18846	File	
164-2	18847-18849	or	
164-3	18850-18860	networking	
164-4	18861-18862	I	
164-5	18862-18863	/	
164-6	18863-18864	O	
164-7	18865-18871	issues	
164-8	18872-18875	are	
164-9	18876-18885	diagnosed	
164-10	18886-18888	in	
164-11	18889-18890	a	
164-12	18891-18898	similar	
164-13	18899-18906	fashion	
164-14	18906-18907	.	

#Text=Look at the files read from or written to the most, then see each file read/write and the time spent on I/O.
165-1	18908-18912	Look	
165-2	18913-18915	at	
165-3	18916-18919	the	
165-4	18920-18925	files	
165-5	18926-18930	read	
165-6	18931-18935	from	
165-7	18936-18938	or	
165-8	18939-18946	written	
165-9	18947-18949	to	
165-10	18950-18953	the	
165-11	18954-18958	most	
165-12	18958-18959	,	
165-13	18960-18964	then	
165-14	18965-18968	see	
165-15	18969-18973	each	
165-16	18974-18978	file	
165-17	18979-18983	read	
165-18	18983-18984	/	
165-19	18984-18989	write	
165-20	18990-18993	and	
165-21	18994-18997	the	
165-22	18998-19002	time	
165-23	19003-19008	spent	
165-24	19009-19011	on	
165-25	19012-19013	I	
165-26	19013-19014	/	
165-27	19014-19015	O	
165-28	19015-19016	.	

#Text=By default, the Socket I/O page lists events with a duration longer than 10 ms.
166-1	19017-19019	By	
166-2	19020-19027	default	
166-3	19027-19028	,	
166-4	19029-19032	the	
166-5	19033-19039	Socket	
166-6	19040-19041	I	
166-7	19041-19042	/	
166-8	19042-19043	O	
166-9	19044-19048	page	
166-10	19049-19054	lists	
166-11	19055-19061	events	
166-12	19062-19066	with	
166-13	19067-19068	a	
166-14	19069-19077	duration	
166-15	19078-19084	longer	
166-16	19085-19089	than	
166-17	19090-19092	10	
166-18	19093-19095	ms	
166-19	19095-19096	.	

#Text=When starting a flight recording, you can lower the File I/O Threshold or Socket I/O Threshold to gather more data, but this could potentially have a higher performance overhead.
167-1	19097-19101	When	
167-2	19102-19110	starting	
167-3	19111-19112	a	
167-4	19113-19119	flight	
167-5	19120-19129	recording	
167-6	19129-19130	,	
167-7	19131-19134	you	
167-8	19135-19138	can	
167-9	19139-19144	lower	
167-10	19145-19148	the	
167-11	19149-19153	File	
167-12	19154-19155	I	
167-13	19155-19156	/	
167-14	19156-19157	O	
167-15	19158-19167	Threshold	
167-16	19168-19170	or	
167-17	19171-19177	Socket	
167-18	19178-19179	I	
167-19	19179-19180	/	
167-20	19180-19181	O	
167-21	19182-19191	Threshold	
167-22	19192-19194	to	
167-23	19195-19201	gather	
167-24	19202-19206	more	
167-25	19207-19211	data	
167-26	19211-19212	,	
167-27	19213-19216	but	
167-28	19217-19221	this	
167-29	19222-19227	could	
167-30	19228-19239	potentially	
167-31	19240-19244	have	
167-32	19245-19246	a	
167-33	19247-19253	higher	
167-34	19254-19265	performance	
167-35	19266-19274	overhead	
167-36	19274-19275	.	

#Text=Use the Socket Read and Write Events to Debug I/O Issues
#Text=When a Java application spends a lot of time reading or writing sockets or files, then I/O or networking may be the bottleneck.
168-1	19276-19279	Use	
168-2	19280-19283	the	
168-3	19284-19290	Socket	
168-4	19291-19295	Read	
168-5	19296-19299	and	
168-6	19300-19305	Write	
168-7	19306-19312	Events	
168-8	19313-19315	to	
168-9	19316-19321	Debug	
168-10	19322-19323	I	
168-11	19323-19324	/	
168-12	19324-19325	O	
168-13	19326-19332	Issues	
168-14	19333-19337	When	
168-15	19338-19339	a	
168-16	19340-19344	Java	
168-17	19345-19356	application	
168-18	19357-19363	spends	
168-19	19364-19365	a	
168-20	19366-19369	lot	
168-21	19370-19372	of	
168-22	19373-19377	time	
168-23	19378-19385	reading	
168-24	19386-19388	or	
168-25	19389-19396	writing	
168-26	19397-19404	sockets	
168-27	19405-19407	or	
168-28	19408-19413	files	
168-29	19413-19414	,	
168-30	19415-19419	then	
168-31	19420-19421	I	
168-32	19421-19422	/	
168-33	19422-19423	O	
168-34	19424-19426	or	
168-35	19427-19437	networking	
168-36	19438-19441	may	
168-37	19442-19444	be	
168-38	19445-19448	the	
168-39	19449-19459	bottleneck	
168-40	19459-19460	.	

#Text=Recordings from Flight Recorder can help identify problem areas.
169-1	19461-19471	Recordings	
169-2	19472-19476	from	
169-3	19477-19483	Flight	
169-4	19484-19492	Recorder	
169-5	19493-19496	can	
169-6	19497-19501	help	
169-7	19502-19510	identify	
169-8	19511-19518	problem	
169-9	19519-19524	areas	
169-10	19524-19525	.	

#Text=To diagnose I/O issues in applications, look at the following events in your flight recording.
170-1	19526-19528	To	
170-2	19529-19537	diagnose	
170-3	19538-19539	I	
170-4	19539-19540	/	
170-5	19540-19541	O	
170-6	19542-19548	issues	
170-7	19549-19551	in	
170-8	19552-19564	applications	
170-9	19564-19565	,	
170-10	19566-19570	look	
170-11	19571-19573	at	
170-12	19574-19577	the	
170-13	19578-19587	following	
170-14	19588-19594	events	
170-15	19595-19597	in	
170-16	19598-19602	your	
170-17	19603-19609	flight	
170-18	19610-19619	recording	
170-19	19619-19620	.	

#Text=Make sure that all of these events are enabled in the recording template that you are using:
#Text=jdk.SocketWrite
#Text=jdk.SocketRead
#Text=jdk.FileWrite
#Text=jdk.FileRead
#Text=Use the socket read and write information in your flight recording to calculate the number of reads from a specific remote address, the total number of bytes read, and the total time spent waiting.
171-1	19621-19625	Make	
171-2	19626-19630	sure	
171-3	19631-19635	that	
171-4	19636-19639	all	
171-5	19640-19642	of	
171-6	19643-19648	these	
171-7	19649-19655	events	
171-8	19656-19659	are	
171-9	19660-19667	enabled	
171-10	19668-19670	in	
171-11	19671-19674	the	
171-12	19675-19684	recording	
171-13	19685-19693	template	
171-14	19694-19698	that	
171-15	19699-19702	you	
171-16	19703-19706	are	
171-17	19707-19712	using	
171-18	19712-19713	:	
171-19	19714-19729	jdk.SocketWrite	
171-20	19730-19744	jdk.SocketRead	
171-21	19745-19758	jdk.FileWrite	
171-22	19759-19771	jdk.FileRead	
171-23	19772-19775	Use	
171-24	19776-19779	the	
171-25	19780-19786	socket	
171-26	19787-19791	read	
171-27	19792-19795	and	
171-28	19796-19801	write	
171-29	19802-19813	information	
171-30	19814-19816	in	
171-31	19817-19821	your	
171-32	19822-19828	flight	
171-33	19829-19838	recording	
171-34	19839-19841	to	
171-35	19842-19851	calculate	
171-36	19852-19855	the	
171-37	19856-19862	number	
171-38	19863-19865	of	
171-39	19866-19871	reads	
171-40	19872-19876	from	
171-41	19877-19878	a	
171-42	19879-19887	specific	
171-43	19888-19894	remote	
171-44	19895-19902	address	
171-45	19902-19903	,	
171-46	19904-19907	the	
171-47	19908-19913	total	
171-48	19914-19920	number	
171-49	19921-19923	of	
171-50	19924-19929	bytes	
171-51	19930-19934	read	
171-52	19934-19935	,	
171-53	19936-19939	and	
171-54	19940-19943	the	
171-55	19944-19949	total	
171-56	19950-19954	time	
171-57	19955-19960	spent	
171-58	19961-19968	waiting	
171-59	19968-19969	.	

#Text=Look at each event to analyze the time spent and data read.
172-1	19970-19974	Look	
172-2	19975-19977	at	
172-3	19978-19982	each	
172-4	19983-19988	event	
172-5	19989-19991	to	
172-6	19992-19999	analyze	
172-7	20000-20003	the	
172-8	20004-20008	time	
172-9	20009-20014	spent	
172-10	20015-20018	and	
172-11	20019-20023	data	
172-12	20024-20028	read	
172-13	20028-20029	.	

#Text=File or networking I/O issues are diagnosed in a similar fashion.
173-1	20030-20034	File	
173-2	20035-20037	or	
173-3	20038-20048	networking	
173-4	20049-20050	I	
173-5	20050-20051	/	
173-6	20051-20052	O	
173-7	20053-20059	issues	
173-8	20060-20063	are	
173-9	20064-20073	diagnosed	
173-10	20074-20076	in	
173-11	20077-20078	a	
173-12	20079-20086	similar	
173-13	20087-20094	fashion	
173-14	20094-20095	.	

#Text=Look at the files read to or written to the most, then see each file read/write and the time spent on I/O.
174-1	20096-20100	Look	
174-2	20101-20103	at	
174-3	20104-20107	the	
174-4	20108-20113	files	
174-5	20114-20118	read	
174-6	20119-20121	to	
174-7	20122-20124	or	
174-8	20125-20132	written	
174-9	20133-20135	to	
174-10	20136-20139	the	
174-11	20140-20144	most	
174-12	20144-20145	,	
174-13	20146-20150	then	
174-14	20151-20154	see	
174-15	20155-20159	each	
174-16	20160-20164	file	
174-17	20165-20169	read	
174-18	20169-20170	/	
174-19	20170-20175	write	
174-20	20176-20179	and	
174-21	20180-20183	the	
174-22	20184-20188	time	
174-23	20189-20194	spent	
174-24	20195-20197	on	
174-25	20198-20199	I	
174-26	20199-20200	/	
174-27	20200-20201	O	
174-28	20201-20202	.	

#Text=By default, only events with a duration longer than 20 ms are recorded.
175-1	20203-20205	By	
175-2	20206-20213	default	
175-3	20213-20214	,	
175-4	20215-20219	only	
175-5	20220-20226	events	
175-6	20227-20231	with	
175-7	20232-20233	a	
175-8	20234-20242	duration	
175-9	20243-20249	longer	
175-10	20250-20254	than	
175-11	20255-20257	20	
175-12	20258-20260	ms	
175-13	20261-20264	are	
175-14	20265-20273	recorded	
175-15	20273-20274	.	

#Text=When starting a flight recording, you can lower the file I/O threshold or the socket I/O threshold to gather more data, potentially with a higher performance effect.
176-1	20275-20279	When	
176-2	20280-20288	starting	
176-3	20289-20290	a	
176-4	20291-20297	flight	
176-5	20298-20307	recording	
176-6	20307-20308	,	
176-7	20309-20312	you	
176-8	20313-20316	can	
176-9	20317-20322	lower	
176-10	20323-20326	the	
176-11	20327-20331	file	
176-12	20332-20333	I	
176-13	20333-20334	/	
176-14	20334-20335	O	
176-15	20336-20345	threshold	
176-16	20346-20348	or	
176-17	20349-20352	the	
176-18	20353-20359	socket	
176-19	20360-20361	I	
176-20	20361-20362	/	
176-21	20362-20363	O	
176-22	20364-20373	threshold	
176-23	20374-20376	to	
176-24	20377-20383	gather	
176-25	20384-20388	more	
176-26	20389-20393	data	
176-27	20393-20394	,	
176-28	20395-20406	potentially	
176-29	20407-20411	with	
176-30	20412-20413	a	
176-31	20414-20420	higher	
176-32	20421-20432	performance	
176-33	20433-20439	effect	
176-34	20439-20440	.	

#Text=Code Execution Performance
#Text=Topics:
#Text=Use JDK Mission Control to Monitor Code Execution Performance
#Text=Use jdk.CPULoad and jdk.ThreadCPULoad Events to Monitor Code Execution Performance
#Text=Use JDK Mission Control to Monitor Code Execution Performance
#Text=You can use JMC to monitor the code execution performance.
177-1	20441-20445	Code	
177-2	20446-20455	Execution	
177-3	20456-20467	Performance	
177-4	20468-20474	Topics	
177-5	20474-20475	:	
177-6	20476-20479	Use	
177-7	20480-20483	JDK	
177-8	20484-20491	Mission	
177-9	20492-20499	Control	
177-10	20500-20502	to	
177-11	20503-20510	Monitor	
177-12	20511-20515	Code	
177-13	20516-20525	Execution	
177-14	20526-20537	Performance	
177-15	20538-20541	Use	
177-16	20542-20553	jdk.CPULoad	
177-17	20554-20557	and	
177-18	20558-20575	jdk.ThreadCPULoad	
177-19	20576-20582	Events	
177-20	20583-20585	to	
177-21	20586-20593	Monitor	
177-22	20594-20598	Code	
177-23	20599-20608	Execution	
177-24	20609-20620	Performance	
177-25	20621-20624	Use	
177-26	20625-20628	JDK	
177-27	20629-20636	Mission	
177-28	20637-20644	Control	
177-29	20645-20647	to	
177-30	20648-20655	Monitor	
177-31	20656-20660	Code	
177-32	20661-20670	Execution	
177-33	20671-20682	Performance	
177-34	20683-20686	You	
177-35	20687-20690	can	
177-36	20691-20694	use	
177-37	20695-20698	JMC	
177-38	20699-20701	to	
177-39	20702-20709	monitor	
177-40	20710-20713	the	
177-41	20714-20718	code	
177-42	20719-20728	execution	
177-43	20729-20740	performance	
177-44	20740-20741	.	

#Text=When there are not a lot of Java Application events, it could be that the main bottleneck of your application is the running code.
178-1	20742-20746	When	
178-2	20747-20752	there	
178-3	20753-20756	are	
178-4	20757-20760	not	
178-5	20761-20762	a	
178-6	20763-20766	lot	
178-7	20767-20769	of	
178-8	20770-20774	Java	
178-9	20775-20786	Application	
178-10	20787-20793	events	
178-11	20793-20794	,	
178-12	20795-20797	it	
178-13	20798-20803	could	
178-14	20804-20806	be	
178-15	20807-20811	that	
178-16	20812-20815	the	
178-17	20816-20820	main	
178-18	20821-20831	bottleneck	
178-19	20832-20834	of	
178-20	20835-20839	your	
178-21	20840-20851	application	
178-22	20852-20854	is	
178-23	20855-20858	the	
178-24	20859-20866	running	
178-25	20867-20871	code	
178-26	20871-20872	.	

#Text=In such scenarios, look at the Method Profiling section of the Automated Analysis Results page.
179-1	20873-20875	In	
179-2	20876-20880	such	
179-3	20881-20890	scenarios	
179-4	20890-20891	,	
179-5	20892-20896	look	
179-6	20897-20899	at	
179-7	20900-20903	the	
179-8	20904-20910	Method	
179-9	20911-20920	Profiling	
179-10	20921-20928	section	
179-11	20929-20931	of	
179-12	20932-20935	the	
179-13	20936-20945	Automated	
179-14	20946-20954	Analysis	
179-15	20955-20962	Results	
179-16	20963-20967	page	
179-17	20967-20968	.	

#Text=Here is a sample figure of a recording, which indicates that there is value in optimizing certain methods.
180-1	20969-20973	Here	
180-2	20974-20976	is	
180-3	20977-20978	a	
180-4	20979-20985	sample	
180-5	20986-20992	figure	
180-6	20993-20995	of	
180-7	20996-20997	a	
180-8	20998-21007	recording	
180-9	21007-21008	,	
180-10	21009-21014	which	
180-11	21015-21024	indicates	
180-12	21025-21029	that	
180-13	21030-21035	there	
180-14	21036-21038	is	
180-15	21039-21044	value	
180-16	21045-21047	in	
180-17	21048-21058	optimizing	
180-18	21059-21066	certain	
180-19	21067-21074	methods	
180-20	21074-21075	.	

#Text=Figure 4-7 Code Execution Performance - Automated Analysis Results PageDescription of "Figure 4-7 Code Execution Performance - Automated Analysis Results Page"
#Text=Now, open the Java Application page.
181-1	21076-21082	Figure	
181-2	21083-21084	4	
181-3	21084-21085	-	
181-4	21085-21086	7	
181-5	21087-21091	Code	
181-6	21092-21101	Execution	
181-7	21102-21113	Performance	
181-8	21114-21115	-	
181-9	21116-21125	Automated	
181-10	21126-21134	Analysis	
181-11	21135-21142	Results	
181-12	21143-21158	PageDescription	
181-13	21159-21161	of	
181-14	21162-21163	"	
181-15	21163-21169	Figure	
181-16	21170-21171	4	
181-17	21171-21172	-	
181-18	21172-21173	7	
181-19	21174-21178	Code	
181-20	21179-21188	Execution	
181-21	21189-21200	Performance	
181-22	21201-21202	-	
181-23	21203-21212	Automated	
181-24	21213-21221	Analysis	
181-25	21222-21229	Results	
181-26	21230-21234	Page	
181-27	21234-21235	"	
181-28	21236-21239	Now	
181-29	21239-21240	,	
181-30	21241-21245	open	
181-31	21246-21249	the	
181-32	21250-21254	Java	
181-33	21255-21266	Application	
181-34	21267-21271	page	
181-35	21271-21272	.	

#Text=Here is a sample figure of a recording, which shows the Method Profiling graph and the stack traces.
182-1	21273-21277	Here	
182-2	21278-21280	is	
182-3	21281-21282	a	
182-4	21283-21289	sample	
182-5	21290-21296	figure	
182-6	21297-21299	of	
182-7	21300-21301	a	
182-8	21302-21311	recording	
182-9	21311-21312	,	
182-10	21313-21318	which	
182-11	21319-21324	shows	
182-12	21325-21328	the	
182-13	21329-21335	Method	
182-14	21336-21345	Profiling	
182-15	21346-21351	graph	
182-16	21352-21355	and	
182-17	21356-21359	the	
182-18	21360-21365	stack	
182-19	21366-21372	traces	
182-20	21372-21373	.	

#Text=Figure 4-8 Code Execution Performance - Java ApplicationDescription of "Figure 4-8 Code Execution Performance - Java Application"
#Text=You can observe that the stack trace view shows the aggregated stack traces of any selection in the editor and also the stack traces for the profiling samples.
183-1	21374-21380	Figure	
183-2	21381-21382	4	
183-3	21382-21383	-	
183-4	21383-21384	8	
183-5	21385-21389	Code	
183-6	21390-21399	Execution	
183-7	21400-21411	Performance	
183-8	21412-21413	-	
183-9	21414-21418	Java	
183-10	21419-21441	ApplicationDescription	
183-11	21442-21444	of	
183-12	21445-21446	"	
183-13	21446-21452	Figure	
183-14	21453-21454	4	
183-15	21454-21455	-	
183-16	21455-21456	8	
183-17	21457-21461	Code	
183-18	21462-21471	Execution	
183-19	21472-21483	Performance	
183-20	21484-21485	-	
183-21	21486-21490	Java	
183-22	21491-21502	Application	
183-23	21502-21503	"	
183-24	21504-21507	You	
183-25	21508-21511	can	
183-26	21512-21519	observe	
183-27	21520-21524	that	
183-28	21525-21528	the	
183-29	21529-21534	stack	
183-30	21535-21540	trace	
183-31	21541-21545	view	
183-32	21546-21551	shows	
183-33	21552-21555	the	
183-34	21556-21566	aggregated	
183-35	21567-21572	stack	
183-36	21573-21579	traces	
183-37	21580-21582	of	
183-38	21583-21586	any	
183-39	21587-21596	selection	
183-40	21597-21599	in	
183-41	21600-21603	the	
183-42	21604-21610	editor	
183-43	21611-21614	and	
183-44	21615-21619	also	
183-45	21620-21623	the	
183-46	21624-21629	stack	
183-47	21630-21636	traces	
183-48	21637-21640	for	
183-49	21641-21644	the	
183-50	21645-21654	profiling	
183-51	21655-21662	samples	
183-52	21662-21663	.	

#Text=In the figure, you can notice that one of these methods has a lot more samples than the others.
184-1	21664-21666	In	
184-2	21667-21670	the	
184-3	21671-21677	figure	
184-4	21677-21678	,	
184-5	21679-21682	you	
184-6	21683-21686	can	
184-7	21687-21693	notice	
184-8	21694-21698	that	
184-9	21699-21702	one	
184-10	21703-21705	of	
184-11	21706-21711	these	
184-12	21712-21719	methods	
184-13	21720-21723	has	
184-14	21724-21725	a	
184-15	21726-21729	lot	
184-16	21730-21734	more	
184-17	21735-21742	samples	
184-18	21743-21747	than	
184-19	21748-21751	the	
184-20	21752-21758	others	
184-21	21758-21759	.	

#Text=This means that the JVM has spent more time executing that method relative to the other methods.
185-1	21760-21764	This	
185-2	21765-21770	means	
185-3	21771-21775	that	
185-4	21776-21779	the	
185-5	21780-21783	JVM	
185-6	21784-21787	has	
185-7	21788-21793	spent	
185-8	21794-21798	more	
185-9	21799-21803	time	
185-10	21804-21813	executing	
185-11	21814-21818	that	
185-12	21819-21825	method	
185-13	21826-21834	relative	
185-14	21835-21837	to	
185-15	21838-21841	the	
185-16	21842-21847	other	
185-17	21848-21855	methods	
185-18	21855-21856	.	

#Text=To identify which method would be the one to optimize to improve the performance of the application, open the Method Profiling page.
186-1	21857-21859	To	
186-2	21860-21868	identify	
186-3	21869-21874	which	
186-4	21875-21881	method	
186-5	21882-21887	would	
186-6	21888-21890	be	
186-7	21891-21894	the	
186-8	21895-21898	one	
186-9	21899-21901	to	
186-10	21902-21910	optimize	
186-11	21911-21913	to	
186-12	21914-21921	improve	
186-13	21922-21925	the	
186-14	21926-21937	performance	
186-15	21938-21940	of	
186-16	21941-21944	the	
186-17	21945-21956	application	
186-18	21956-21957	,	
186-19	21958-21962	open	
186-20	21963-21966	the	
186-21	21967-21973	Method	
186-22	21974-21983	Profiling	
186-23	21984-21988	page	
186-24	21988-21989	.	

#Text=Here is a sample figure of a recording, which shows the method that needs to be optimized.
187-1	21990-21994	Here	
187-2	21995-21997	is	
187-3	21998-21999	a	
187-4	22000-22006	sample	
187-5	22007-22013	figure	
187-6	22014-22016	of	
187-7	22017-22018	a	
187-8	22019-22028	recording	
187-9	22028-22029	,	
187-10	22030-22035	which	
187-11	22036-22041	shows	
187-12	22042-22045	the	
187-13	22046-22052	method	
187-14	22053-22057	that	
187-15	22058-22063	needs	
187-16	22064-22066	to	
187-17	22067-22069	be	
187-18	22070-22079	optimized	
187-19	22079-22080	.	

#Text=Figure 4-9 Code Execution Performance - Method ProfilingDescription of "Figure 4-9 Code Execution Performance - Method Profiling"
#Text=As you can observe, in the stack trace view, the most sampled method was
#Text=HolderOfUniqueValues.countIntersection().
188-1	22081-22087	Figure	
188-2	22088-22089	4	
188-3	22089-22090	-	
188-4	22090-22091	9	
188-5	22092-22096	Code	
188-6	22097-22106	Execution	
188-7	22107-22118	Performance	
188-8	22119-22120	-	
188-9	22121-22127	Method	
188-10	22128-22148	ProfilingDescription	
188-11	22149-22151	of	
188-12	22152-22153	"	
188-13	22153-22159	Figure	
188-14	22160-22161	4	
188-15	22161-22162	-	
188-16	22162-22163	9	
188-17	22164-22168	Code	
188-18	22169-22178	Execution	
188-19	22179-22190	Performance	
188-20	22191-22192	-	
188-21	22193-22199	Method	
188-22	22200-22209	Profiling	
188-23	22209-22210	"	
188-24	22211-22213	As	
188-25	22214-22217	you	
188-26	22218-22221	can	
188-27	22222-22229	observe	
188-28	22229-22230	,	
188-29	22231-22233	in	
188-30	22234-22237	the	
188-31	22238-22243	stack	
188-32	22244-22249	trace	
188-33	22250-22254	view	
188-34	22254-22255	,	
188-35	22256-22259	the	
188-36	22260-22264	most	
188-37	22265-22272	sampled	
188-38	22273-22279	method	
188-39	22280-22283	was	
188-40	22284-22322	HolderOfUniqueValues.countIntersection	
188-41	22322-22323	(	
188-42	22323-22324	)	
188-43	22324-22325	.	

#Text=You can review and make required code changes to optimize this method to effectively improve the performance of the application.
189-1	22326-22329	You	
189-2	22330-22333	can	
189-3	22334-22340	review	
189-4	22341-22344	and	
189-5	22345-22349	make	
189-6	22350-22358	required	
189-7	22359-22363	code	
189-8	22364-22371	changes	
189-9	22372-22374	to	
189-10	22375-22383	optimize	
189-11	22384-22388	this	
189-12	22389-22395	method	
189-13	22396-22398	to	
189-14	22399-22410	effectively	
189-15	22411-22418	improve	
189-16	22419-22422	the	
189-17	22423-22434	performance	
189-18	22435-22437	of	
189-19	22438-22441	the	
189-20	22442-22453	application	
189-21	22453-22454	.	

#Text=Use jdk.CPULoad and jdk.ThreadCPULoad Events to Monitor Code Execution Performance
#Text=When there are not a lot of Java Application events, it could be that the main bottleneck of your application is the running code.
190-1	22455-22458	Use	
190-2	22459-22470	jdk.CPULoad	
190-3	22471-22474	and	
190-4	22475-22492	jdk.ThreadCPULoad	
190-5	22493-22499	Events	
190-6	22500-22502	to	
190-7	22503-22510	Monitor	
190-8	22511-22515	Code	
190-9	22516-22525	Execution	
190-10	22526-22537	Performance	
190-11	22538-22542	When	
190-12	22543-22548	there	
190-13	22549-22552	are	
190-14	22553-22556	not	
190-15	22557-22558	a	
190-16	22559-22562	lot	
190-17	22563-22565	of	
190-18	22566-22570	Java	
190-19	22571-22582	Application	
190-20	22583-22589	events	
190-21	22589-22590	,	
190-22	22591-22593	it	
190-23	22594-22599	could	
190-24	22600-22602	be	
190-25	22603-22607	that	
190-26	22608-22611	the	
190-27	22612-22616	main	
190-28	22617-22627	bottleneck	
190-29	22628-22630	of	
190-30	22631-22635	your	
190-31	22636-22647	application	
190-32	22648-22650	is	
190-33	22651-22654	the	
190-34	22655-22662	running	
190-35	22663-22667	code	
190-36	22667-22668	.	

#Text=Recordings from Flight Recorder can help identify problem areas.
191-1	22669-22679	Recordings	
191-2	22680-22684	from	
191-3	22685-22691	Flight	
191-4	22692-22700	Recorder	
191-5	22701-22704	can	
191-6	22705-22709	help	
191-7	22710-22718	identify	
191-8	22719-22726	problem	
191-9	22727-22732	areas	
191-10	22732-22733	.	

#Text=Look at the jdk.CPULoad events and review the CPU usage over time.
192-1	22734-22738	Look	
192-2	22739-22741	at	
192-3	22742-22745	the	
192-4	22746-22757	jdk.CPULoad	
192-5	22758-22764	events	
192-6	22765-22768	and	
192-7	22769-22775	review	
192-8	22776-22779	the	
192-9	22780-22783	CPU	
192-10	22784-22789	usage	
192-11	22790-22794	over	
192-12	22795-22799	time	
192-13	22799-22800	.	

#Text=This shows the CPU usage of the JVM being recorded and the total CPU usage on the machine.
193-1	22801-22805	This	
193-2	22806-22811	shows	
193-3	22812-22815	the	
193-4	22816-22819	CPU	
193-5	22820-22825	usage	
193-6	22826-22828	of	
193-7	22829-22832	the	
193-8	22833-22836	JVM	
193-9	22837-22842	being	
193-10	22843-22851	recorded	
193-11	22852-22855	and	
193-12	22856-22859	the	
193-13	22860-22865	total	
193-14	22866-22869	CPU	
193-15	22870-22875	usage	
193-16	22876-22878	on	
193-17	22879-22882	the	
193-18	22883-22890	machine	
193-19	22890-22891	.	

#Text=If the JVM CPU usage is low, but the CPU usage of the machine is high, then some other application is likely taking a lot of CPU.
194-1	22892-22894	If	
194-2	22895-22898	the	
194-3	22899-22902	JVM	
194-4	22903-22906	CPU	
194-5	22907-22912	usage	
194-6	22913-22915	is	
194-7	22916-22919	low	
194-8	22919-22920	,	
194-9	22921-22924	but	
194-10	22925-22928	the	
194-11	22929-22932	CPU	
194-12	22933-22938	usage	
194-13	22939-22941	of	
194-14	22942-22945	the	
194-15	22946-22953	machine	
194-16	22954-22956	is	
194-17	22957-22961	high	
194-18	22961-22962	,	
194-19	22963-22967	then	
194-20	22968-22972	some	
194-21	22973-22978	other	
194-22	22979-22990	application	
194-23	22991-22993	is	
194-24	22994-23000	likely	
194-25	23001-23007	taking	
194-26	23008-23009	a	
194-27	23010-23013	lot	
194-28	23014-23016	of	
194-29	23017-23020	CPU	
194-30	23020-23021	.	

#Text=In that case, look at the other applications running on the system using OS tools such as Top or the task manager to find out which processes are using a lot of CPU.
195-1	23022-23024	In	
195-2	23025-23029	that	
195-3	23030-23034	case	
195-4	23034-23035	,	
195-5	23036-23040	look	
195-6	23041-23043	at	
195-7	23044-23047	the	
195-8	23048-23053	other	
195-9	23054-23066	applications	
195-10	23067-23074	running	
195-11	23075-23077	on	
195-12	23078-23081	the	
195-13	23082-23088	system	
195-14	23089-23094	using	
195-15	23095-23097	OS	
195-16	23098-23103	tools	
195-17	23104-23108	such	
195-18	23109-23111	as	
195-19	23112-23115	Top	
195-20	23116-23118	or	
195-21	23119-23122	the	
195-22	23123-23127	task	
195-23	23128-23135	manager	
195-24	23136-23138	to	
195-25	23139-23143	find	
195-26	23144-23147	out	
195-27	23148-23153	which	
195-28	23154-23163	processes	
195-29	23164-23167	are	
195-30	23168-23173	using	
195-31	23174-23175	a	
195-32	23176-23179	lot	
195-33	23180-23182	of	
195-34	23183-23186	CPU	
195-35	23186-23187	.	

#Text=In case your application is using a lot of CPU time, look at jdk.ThreadCPULoad events and identify the threads that use the most CPU time.
196-1	23188-23190	In	
196-2	23191-23195	case	
196-3	23196-23200	your	
196-4	23201-23212	application	
196-5	23213-23215	is	
196-6	23216-23221	using	
196-7	23222-23223	a	
196-8	23224-23227	lot	
196-9	23228-23230	of	
196-10	23231-23234	CPU	
196-11	23235-23239	time	
196-12	23239-23240	,	
196-13	23241-23245	look	
196-14	23246-23248	at	
196-15	23249-23266	jdk.ThreadCPULoad	
196-16	23267-23273	events	
196-17	23274-23277	and	
196-18	23278-23286	identify	
196-19	23287-23290	the	
196-20	23291-23298	threads	
196-21	23299-23303	that	
196-22	23304-23307	use	
196-23	23308-23311	the	
196-24	23312-23316	most	
196-25	23317-23320	CPU	
196-26	23321-23325	time	
196-27	23325-23326	.	

#Text=This information is based on method sampling, so it may not be 100% accurate if the sample count is low.
197-1	23327-23331	This	
197-2	23332-23343	information	
197-3	23344-23346	is	
197-4	23347-23352	based	
197-5	23353-23355	on	
197-6	23356-23362	method	
197-7	23363-23371	sampling	
197-8	23371-23372	,	
197-9	23373-23375	so	
197-10	23376-23378	it	
197-11	23379-23382	may	
197-12	23383-23386	not	
197-13	23387-23389	be	
197-14	23390-23394	100%	
197-15	23395-23403	accurate	
197-16	23404-23406	if	
197-17	23407-23410	the	
197-18	23411-23417	sample	
197-19	23418-23423	count	
197-20	23424-23426	is	
197-21	23427-23430	low	
197-22	23430-23431	.	

#Text=When a recording is running, the JVM samples the threads.
198-1	23432-23436	When	
198-2	23437-23438	a	
198-3	23439-23448	recording	
198-4	23449-23451	is	
198-5	23452-23459	running	
198-6	23459-23460	,	
198-7	23461-23464	the	
198-8	23465-23468	JVM	
198-9	23469-23476	samples	
198-10	23477-23480	the	
198-11	23481-23488	threads	
198-12	23488-23489	.	

#Text=By default, a continuous recording does only some method sampling, while a profiling recording does as much as possible.
199-1	23490-23492	By	
199-2	23493-23500	default	
199-3	23500-23501	,	
199-4	23502-23503	a	
199-5	23504-23514	continuous	
199-6	23515-23524	recording	
199-7	23525-23529	does	
199-8	23530-23534	only	
199-9	23535-23539	some	
199-10	23540-23546	method	
199-11	23547-23555	sampling	
199-12	23555-23556	,	
199-13	23557-23562	while	
199-14	23563-23564	a	
199-15	23565-23574	profiling	
199-16	23575-23584	recording	
199-17	23585-23589	does	
199-18	23590-23592	as	
199-19	23593-23597	much	
199-20	23598-23600	as	
199-21	23601-23609	possible	
199-22	23609-23610	.	

#Text=The method sampling gathers data from only those threads running code.
200-1	23611-23614	The	
200-2	23615-23621	method	
200-3	23622-23630	sampling	
200-4	23631-23638	gathers	
200-5	23639-23643	data	
200-6	23644-23648	from	
200-7	23649-23653	only	
200-8	23654-23659	those	
200-9	23660-23667	threads	
200-10	23668-23675	running	
200-11	23676-23680	code	
200-12	23680-23681	.	

#Text=The threads waiting for I/O, sleeping, waiting for locks, and so on are not sampled.
201-1	23682-23685	The	
201-2	23686-23693	threads	
201-3	23694-23701	waiting	
201-4	23702-23705	for	
201-5	23706-23707	I	
201-6	23707-23708	/	
201-7	23708-23709	O	
201-8	23709-23710	,	
201-9	23711-23719	sleeping	
201-10	23719-23720	,	
201-11	23721-23728	waiting	
201-12	23729-23732	for	
201-13	23733-23738	locks	
201-14	23738-23739	,	
201-15	23740-23743	and	
201-16	23744-23746	so	
201-17	23747-23749	on	
201-18	23750-23753	are	
201-19	23754-23757	not	
201-20	23758-23765	sampled	
201-21	23765-23766	.	

#Text=Therefore, threads with a lot of method samples are the ones using the most CPU time; however, how much CPU is used by each thread is not known.
202-1	23767-23776	Therefore	
202-2	23776-23777	,	
202-3	23778-23785	threads	
202-4	23786-23790	with	
202-5	23791-23792	a	
202-6	23793-23796	lot	
202-7	23797-23799	of	
202-8	23800-23806	method	
202-9	23807-23814	samples	
202-10	23815-23818	are	
202-11	23819-23822	the	
202-12	23823-23827	ones	
202-13	23828-23833	using	
202-14	23834-23837	the	
202-15	23838-23842	most	
202-16	23843-23846	CPU	
202-17	23847-23851	time	
202-18	23851-23852	;	
202-19	23853-23860	however	
202-20	23860-23861	,	
202-21	23862-23865	how	
202-22	23866-23870	much	
202-23	23871-23874	CPU	
202-24	23875-23877	is	
202-25	23878-23882	used	
202-26	23883-23885	by	
202-27	23886-23890	each	
202-28	23891-23897	thread	
202-29	23898-23900	is	
202-30	23901-23904	not	
202-31	23905-23910	known	
202-32	23910-23911	.	

#Text=The Hot Methods tab in the Code tab group helps find out where your application spends most of the execution time.
203-1	23912-23915	The	
203-2	23916-23919	Hot	
203-3	23920-23927	Methods	
203-4	23928-23931	tab	
203-5	23932-23934	in	
203-6	23935-23938	the	
203-7	23939-23943	Code	
203-8	23944-23947	tab	
203-9	23948-23953	group	
203-10	23954-23959	helps	
203-11	23960-23964	find	
203-12	23965-23968	out	
203-13	23969-23974	where	
203-14	23975-23979	your	
203-15	23980-23991	application	
203-16	23992-23998	spends	
203-17	23999-24003	most	
203-18	24004-24006	of	
203-19	24007-24010	the	
203-20	24011-24020	execution	
203-21	24021-24025	time	
203-22	24025-24026	.	

#Text=This tab shows all the samples grouped by top method in the stack.
204-1	24027-24031	This	
204-2	24032-24035	tab	
204-3	24036-24041	shows	
204-4	24042-24045	all	
204-5	24046-24049	the	
204-6	24050-24057	samples	
204-7	24058-24065	grouped	
204-8	24066-24068	by	
204-9	24069-24072	top	
204-10	24073-24079	method	
204-11	24080-24082	in	
204-12	24083-24086	the	
204-13	24087-24092	stack	
204-14	24092-24093	.	

#Text=Use the Call Tree tab to start with the lowest method in the stack traces and then move upward. starts with Thread.run, and then looks at the calls that have been most sampled.
205-1	24094-24097	Use	
205-2	24098-24101	the	
205-3	24102-24106	Call	
205-4	24107-24111	Tree	
205-5	24112-24115	tab	
205-6	24116-24118	to	
205-7	24119-24124	start	
205-8	24125-24129	with	
205-9	24130-24133	the	
205-10	24134-24140	lowest	
205-11	24141-24147	method	
205-12	24148-24150	in	
205-13	24151-24154	the	
205-14	24155-24160	stack	
205-15	24161-24167	traces	
205-16	24168-24171	and	
205-17	24172-24176	then	
205-18	24177-24181	move	
205-19	24182-24188	upward	
205-20	24188-24189	.	
205-21	24190-24196	starts	
205-22	24197-24201	with	
205-23	24202-24212	Thread.run	
205-24	24212-24213	,	
205-25	24214-24217	and	
205-26	24218-24222	then	
205-27	24223-24228	looks	
205-28	24229-24231	at	
205-29	24232-24235	the	
205-30	24236-24241	calls	
205-31	24242-24246	that	
205-32	24247-24251	have	
205-33	24252-24256	been	
205-34	24257-24261	most	
205-35	24262-24269	sampled	
205-36	24269-24270	.	
