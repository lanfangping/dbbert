#FORMAT=WebAnno TSV 3.3


#Text=Optimizing PostgreSQL for gvmd - Greenbone Source Edition (GSE) - Greenbone Community Portal
#Text=Optimizing PostgreSQL for gvmd
#Text=Greenbone Source Edition (GSE)
#Text=tatooin
#Text=September 14, 2020,
#Text=2:26pm
#Text=Hello
#Text=Is there any tweaks / hints to optimize / fine-tune PostgreSQL for gvmd ?
1-1	0-10	Optimizing	
1-2	11-21	PostgreSQL	
1-3	22-25	for	
1-4	26-30	gvmd	
1-5	31-32	-	
1-6	33-42	Greenbone	
1-7	43-49	Source	
1-8	50-57	Edition	
1-9	58-59	(	
1-10	59-62	GSE	
1-11	62-63	)	
1-12	64-65	-	
1-13	66-75	Greenbone	
1-14	76-85	Community	
1-15	86-92	Portal	
1-16	93-103	Optimizing	
1-17	104-114	PostgreSQL	
1-18	115-118	for	
1-19	119-123	gvmd	
1-20	124-133	Greenbone	
1-21	134-140	Source	
1-22	141-148	Edition	
1-23	149-150	(	
1-24	150-153	GSE	
1-25	153-154	)	
1-26	155-162	tatooin	
1-27	163-172	September	
1-28	173-175	14	
1-29	175-176	,	
1-30	177-181	2020	
1-31	181-182	,	
1-32	183-184	2	
1-33	184-185	:	
1-34	185-189	26pm	
1-35	190-195	Hello	
1-36	196-198	Is	
1-37	199-204	there	
1-38	205-208	any	
1-39	209-215	tweaks	
1-40	216-217	/	
1-41	218-223	hints	
1-42	224-226	to	
1-43	227-235	optimize	
1-44	236-237	/	
1-45	238-247	fine-tune	
1-46	248-258	PostgreSQL	
1-47	259-262	for	
1-48	263-267	gvmd	
1-49	268-269	?	

#Text=My installation has plenty of CPU / Memory available; but still gsad is often very slow to answer queries, and very often it fails to receive answers from gvmd due to time out.
2-1	270-272	My	
2-2	273-285	installation	
2-3	286-289	has	
2-4	290-296	plenty	
2-5	297-299	of	
2-6	300-303	CPU	
2-7	304-305	/	
2-8	306-312	Memory	
2-9	313-322	available	
2-10	322-323	;	
2-11	324-327	but	
2-12	328-333	still	
2-13	334-338	gsad	
2-14	339-341	is	
2-15	342-347	often	
2-16	348-352	very	
2-17	353-357	slow	
2-18	358-360	to	
2-19	361-367	answer	
2-20	368-375	queries	
2-21	375-376	,	
2-22	377-380	and	
2-23	381-385	very	
2-24	386-391	often	
2-25	392-394	it	
2-26	395-400	fails	
2-27	401-403	to	
2-28	404-411	receive	
2-29	412-419	answers	
2-30	420-424	from	
2-31	425-429	gvmd	
2-32	430-433	due	
2-33	434-436	to	
2-34	437-441	time	
2-35	442-445	out	
2-36	445-446	.	

#Text=Looking at the processes clearly show that postgresql daemons are taking most of the CPU power, but still this remains very low considering the global CPU power of the system.
3-1	447-454	Looking	
3-2	455-457	at	
3-3	458-461	the	
3-4	462-471	processes	
3-5	472-479	clearly	
3-6	480-484	show	
3-7	485-489	that	
3-8	490-500	postgresql	
3-9	501-508	daemons	
3-10	509-512	are	
3-11	513-519	taking	
3-12	520-524	most	
3-13	525-527	of	
3-14	528-531	the	
3-15	532-535	CPU	
3-16	536-541	power	
3-17	541-542	,	
3-18	543-546	but	
3-19	547-552	still	
3-20	553-557	this	
3-21	558-565	remains	
3-22	566-570	very	
3-23	571-574	low	
3-24	575-586	considering	
3-25	587-590	the	
3-26	591-597	global	
3-27	598-601	CPU	
3-28	602-607	power	
3-29	608-610	of	
3-30	611-614	the	
3-31	615-621	system	
3-32	621-622	.	

#Text=So clearly, it doesn’t seem optimized.
4-1	623-625	So	
4-2	626-633	clearly	
4-3	633-634	,	
4-4	635-637	it	
4-5	638-643	doesn	
4-6	643-644	’	
4-7	644-645	t	
4-8	646-650	seem	
4-9	651-660	optimized	
4-10	660-661	.	

#Text=Any clue ?
5-1	662-665	Any	
5-2	666-670	clue	
5-3	671-672	?	

#Text=Thanks
#Text=tux
#Text=September 15, 2020,
#Text=4:56am
#Text=Which version of PostgreSQL do you use?
6-1	673-679	Thanks	
6-2	680-683	tux	
6-3	684-693	September	
6-4	694-696	15	
6-5	696-697	,	
6-6	698-702	2020	
6-7	702-703	,	
6-8	704-705	4	
6-9	705-706	:	
6-10	706-710	56am	
6-11	711-716	Which	
6-12	717-724	version	
6-13	725-727	of	
6-14	728-738	PostgreSQL	
6-15	739-741	do	
6-16	742-745	you	
6-17	746-749	use	
6-18	749-750	?	

#Text=Lukas
#Text=September 15, 2020,
#Text=8:46am
#Text=Are you sure that is a CPU or IO issue ?
7-1	751-756	Lukas	
7-2	757-766	September	
7-3	767-769	15	
7-4	769-770	,	
7-5	771-775	2020	
7-6	775-776	,	
7-7	777-778	8	
7-8	778-779	:	
7-9	779-783	46am	
7-10	784-787	Are	
7-11	788-791	you	
7-12	792-796	sure	
7-13	797-801	that	
7-14	802-804	is	
7-15	805-806	a	
7-16	807-810	CPU	
7-17	811-813	or	
7-18	814-816	IO	
7-19	817-822	issue	
7-20	823-824	?	

#Text=What does “iotop” and the other process debug features say ?
8-1	825-829	What	
8-2	830-834	does	
8-3	835-836	“	
8-4	836-841	iotop	
8-5	841-842	”	
8-6	843-846	and	
8-7	847-850	the	
8-8	851-856	other	
8-9	857-864	process	
8-10	865-870	debug	
8-11	871-879	features	
8-12	880-883	say	
8-13	884-885	?	

#Text=Are you running on bare metal NVMEs ?
9-1	886-889	Are	
9-2	890-893	you	
9-3	894-901	running	
9-4	902-904	on	
9-5	905-909	bare	
9-6	910-915	metal	
9-7	916-921	NVMEs	
9-8	922-923	?	

#Text=Big installations seems to struggle with limited I/O on virtual systems, and should run on very fast NVMEs.
#Text=bricks
#Text=September 15, 2020,
#Text=2:30pm
#Text=It seems that requesting the results is very very slow with Postgres 12 compared to Postgres 11.
10-1	924-927	Big	
10-2	928-941	installations	
10-3	942-947	seems	
10-4	948-950	to	
10-5	951-959	struggle	
10-6	960-964	with	
10-7	965-972	limited	
10-8	973-974	I	
10-9	974-975	/	
10-10	975-976	O	
10-11	977-979	on	
10-12	980-987	virtual	
10-13	988-995	systems	
10-14	995-996	,	
10-15	997-1000	and	
10-16	1001-1007	should	
10-17	1008-1011	run	
10-18	1012-1014	on	
10-19	1015-1019	very	
10-20	1020-1024	fast	
10-21	1025-1030	NVMEs	
10-22	1030-1031	.	
10-23	1032-1038	bricks	
10-24	1039-1048	September	
10-25	1049-1051	15	
10-26	1051-1052	,	
10-27	1053-1057	2020	
10-28	1057-1058	,	
10-29	1059-1060	2	
10-30	1060-1061	:	
10-31	1061-1065	30pm	
10-32	1066-1068	It	
10-33	1069-1074	seems	
10-34	1075-1079	that	
10-35	1080-1090	requesting	
10-36	1091-1094	the	
10-37	1095-1102	results	
10-38	1103-1105	is	
10-39	1106-1110	very	
10-40	1111-1115	very	
10-41	1116-1120	slow	
10-42	1121-1125	with	
10-43	1126-1134	Postgres	
10-44	1135-1137	12	
10-45	1138-1146	compared	
10-46	1147-1149	to	
10-47	1150-1158	Postgres	
10-48	1159-1161	11	
10-49	1161-1162	.	

#Text=Postgres 11 is of course recommended because that’s the version in Debian Stable which is our reference system.
#Text=tatooin
#Text=September 16, 2020,
#Text=6:42am
#Text=Hi Everyone and thanks for your interest in the subject.
11-1	1163-1171	Postgres	
11-2	1172-1174	11	
11-3	1175-1177	is	
11-4	1178-1180	of	
11-5	1181-1187	course	
11-6	1188-1199	recommended	
11-7	1200-1207	because	
11-8	1208-1212	that	
11-9	1212-1213	’	
11-10	1213-1214	s	
11-11	1215-1218	the	
11-12	1219-1226	version	
11-13	1227-1229	in	
11-14	1230-1236	Debian	
11-15	1237-1243	Stable	
11-16	1244-1249	which	
11-17	1250-1252	is	
11-18	1253-1256	our	
11-19	1257-1266	reference	
11-20	1267-1273	system	
11-21	1273-1274	.	
11-22	1275-1282	tatooin	
11-23	1283-1292	September	
11-24	1293-1295	16	
11-25	1295-1296	,	
11-26	1297-1301	2020	
11-27	1301-1302	,	
11-28	1303-1304	6	
11-29	1304-1305	:	
11-30	1305-1309	42am	
11-31	1310-1312	Hi	
11-32	1313-1321	Everyone	
11-33	1322-1325	and	
11-34	1326-1332	thanks	
11-35	1333-1336	for	
11-36	1337-1341	your	
11-37	1342-1350	interest	
11-38	1351-1353	in	
11-39	1354-1357	the	
11-40	1358-1365	subject	
11-41	1365-1366	.	

#Text=A couple of informations:
#Text=System is bare metal with OS Linux Mint 19.3 64 bit (Ubuntu 18.04 LTS)
#Text=Installed version of PostgreSQL is 10.
#Text=94 Gb RAM and Intel® Xeon® CPU X5680
#Text=@ 3.33GHz
#Text=23 cores
#Text=iostat gives the following:
#Text=avg-cpu:
#Text=%user
#Text=%nice %system %iowait
#Text=%steal
#Text=%idle
#Text=8,10
#Text=1,19
#Text=9,17
#Text=1,37
#Text=0,00
#Text=80,17
#Text=Device
#Text=tps
#Text=kB_read/s
#Text=kB_wrtn/s
#Text=kB_read
#Text=kB_wrtn
#Text=sda
#Text=99,82
#Text=11,23
#Text=968,80
#Text=40585011 3500199664
#Text=sdb
#Text=0,65
#Text=0,97
#Text=8,32
#Text=3505669
#Text=30047876
#Text=sdc
#Text=0,00
#Text=0,00
#Text=0,00
#Text=5480
#Text=gvm@ov-master-eqi:~$ free -g
#Text=total
#Text=used
#Text=free
#Text=shared
#Text=buff/cache
#Text=available
#Text=Mem:
#Text=Swap:
#Text=So as you can notice, CPU / Memory isn’t the bottleneck here.
12-1	1367-1368	A	
12-2	1369-1375	couple	
12-3	1376-1378	of	
12-4	1379-1391	informations	
12-5	1391-1392	:	
12-6	1393-1399	System	
12-7	1400-1402	is	
12-8	1403-1407	bare	
12-9	1408-1413	metal	
12-10	1414-1418	with	
12-11	1419-1421	OS	
12-12	1422-1427	Linux	
12-13	1428-1432	Mint	
12-14	1433-1437	19.3	
12-15	1438-1440	64	
12-16	1441-1444	bit	
12-17	1445-1446	(	
12-18	1446-1452	Ubuntu	
12-19	1453-1458	18.04	
12-20	1459-1462	LTS	
12-21	1462-1463	)	
12-22	1464-1473	Installed	
12-23	1474-1481	version	
12-24	1482-1484	of	
12-25	1485-1495	PostgreSQL	
12-26	1496-1498	is	
12-27	1499-1501	10	
12-28	1501-1502	.	
12-29	1503-1505	94	
12-30	1506-1508	Gb	
12-31	1509-1512	RAM	
12-32	1513-1516	and	
12-33	1517-1522	Intel	
12-34	1522-1523	®	
12-35	1524-1528	Xeon	
12-36	1528-1529	®	
12-37	1530-1533	CPU	
12-38	1534-1539	X5680	
12-39	1540-1541	@	
12-40	1542-1549	3.33GHz	
12-41	1550-1552	23	
12-42	1553-1558	cores	
12-43	1559-1565	iostat	
12-44	1566-1571	gives	
12-45	1572-1575	the	
12-46	1576-1585	following	
12-47	1585-1586	:	
12-48	1587-1594	avg-cpu	
12-49	1594-1595	:	
12-50	1596-1597	%	
12-51	1597-1601	user	
12-52	1602-1603	%	
12-53	1603-1607	nice	
12-54	1608-1609	%	
12-55	1609-1615	system	
12-56	1616-1617	%	
12-57	1617-1623	iowait	
12-58	1624-1625	%	
12-59	1625-1630	steal	
12-60	1631-1632	%	
12-61	1632-1636	idle	
12-62	1637-1641	8,10	
12-63	1642-1646	1,19	
12-64	1647-1651	9,17	
12-65	1652-1656	1,37	
12-66	1657-1661	0,00	
12-67	1662-1667	80,17	
12-68	1668-1674	Device	
12-69	1675-1678	tps	
12-70	1679-1686	kB_read	
12-71	1686-1687	/	
12-72	1687-1688	s	
12-73	1689-1696	kB_wrtn	
12-74	1696-1697	/	
12-75	1697-1698	s	
12-76	1699-1706	kB_read	
12-77	1707-1714	kB_wrtn	
12-78	1715-1718	sda	
12-79	1719-1724	99,82	
12-80	1725-1730	11,23	
12-81	1731-1737	968,80	
12-82	1738-1746	40585011	
12-83	1747-1757	3500199664	
12-84	1758-1761	sdb	
12-85	1762-1766	0,65	
12-86	1767-1771	0,97	
12-87	1772-1776	8,32	
12-88	1777-1784	3505669	
12-89	1785-1793	30047876	
12-90	1794-1797	sdc	
12-91	1798-1802	0,00	
12-92	1803-1807	0,00	
12-93	1808-1812	0,00	
12-94	1813-1817	5480	
12-95	1818-1821	gvm	
12-96	1821-1822	@	
12-97	1822-1835	ov-master-eqi	
12-98	1835-1836	:	
12-99	1836-1837	~	
12-100	1837-1838	$	
12-101	1839-1843	free	
12-102	1844-1845	-	
12-103	1845-1846	g	
12-104	1847-1852	total	
12-105	1853-1857	used	
12-106	1858-1862	free	
12-107	1863-1869	shared	
12-108	1870-1874	buff	
12-109	1874-1875	/	
12-110	1875-1880	cache	
12-111	1881-1890	available	
12-112	1891-1894	Mem	
12-113	1894-1895	:	
12-114	1896-1900	Swap	
12-115	1900-1901	:	
12-116	1902-1904	So	
12-117	1905-1907	as	
12-118	1908-1911	you	
12-119	1912-1915	can	
12-120	1916-1922	notice	
12-121	1922-1923	,	
12-122	1924-1927	CPU	
12-123	1928-1929	/	
12-124	1930-1936	Memory	
12-125	1937-1940	isn	
12-126	1940-1941	’	
12-127	1941-1942	t	
12-128	1943-1946	the	
12-129	1947-1957	bottleneck	
12-130	1958-1962	here	
12-131	1962-1963	.	

#Text=Thanks
#Text=Lukas
#Text=September 16, 2020,
#Text=7:58am
#Text=bricks:
#Text=Postgres 11 is of course recommended
#Text=As you use PSQL 10 and not 11 i would upgrade, and then trying to fine tune your database and looking into your system issues.
13-1	1964-1970	Thanks	
13-2	1971-1976	Lukas	
13-3	1977-1986	September	
13-4	1987-1989	16	
13-5	1989-1990	,	
13-6	1991-1995	2020	
13-7	1995-1996	,	
13-8	1997-1998	7	
13-9	1998-1999	:	
13-10	1999-2003	58am	
13-11	2004-2010	bricks	
13-12	2010-2011	:	
13-13	2012-2020	Postgres	
13-14	2021-2023	11	
13-15	2024-2026	is	
13-16	2027-2029	of	
13-17	2030-2036	course	
13-18	2037-2048	recommended	
13-19	2049-2051	As	
13-20	2052-2055	you	
13-21	2056-2059	use	
13-22	2060-2064	PSQL	
13-23	2065-2067	10	
13-24	2068-2071	and	
13-25	2072-2075	not	
13-26	2076-2078	11	
13-27	2079-2080	i	
13-28	2081-2086	would	
13-29	2087-2094	upgrade	
13-30	2094-2095	,	
13-31	2096-2099	and	
13-32	2100-2104	then	
13-33	2105-2111	trying	
13-34	2112-2114	to	
13-35	2115-2119	fine	
13-36	2120-2124	tune	
13-37	2125-2129	your	
13-38	2130-2138	database	
13-39	2139-2142	and	
13-40	2143-2150	looking	
13-41	2151-2155	into	
13-42	2156-2160	your	
13-43	2161-2167	system	
13-44	2168-2174	issues	
13-45	2174-2175	.	

#Text=Still you did not answer any questions regarding your storage.
14-1	2176-2181	Still	
14-2	2182-2185	you	
14-3	2186-2189	did	
14-4	2190-2193	not	
14-5	2194-2200	answer	
14-6	2201-2204	any	
14-7	2205-2214	questions	
14-8	2215-2224	regarding	
14-9	2225-2229	your	
14-10	2230-2237	storage	
14-11	2237-2238	.	

#Text=I don´t see any native NVMEs that is what we use for accelerate in our enterprise appliances.
15-1	2239-2240	I	
15-2	2241-2244	don	
15-3	2244-2245	´	
15-4	2245-2246	t	
15-5	2247-2250	see	
15-6	2251-2254	any	
15-7	2255-2261	native	
15-8	2262-2267	NVMEs	
15-9	2268-2272	that	
15-10	2273-2275	is	
15-11	2276-2280	what	
15-12	2281-2283	we	
15-13	2284-2287	use	
15-14	2288-2291	for	
15-15	2292-2302	accelerate	
15-16	2303-2305	in	
15-17	2306-2309	our	
15-18	2310-2320	enterprise	
15-19	2321-2331	appliances	
15-20	2331-2332	.	

#Text=They are 10 times faster then spinning rust if you have a huge database, that would kill your
#Text=performance due to seek times.
16-1	2333-2337	They	
16-2	2338-2341	are	
16-3	2342-2344	10	
16-4	2345-2350	times	
16-5	2351-2357	faster	
16-6	2358-2362	then	
16-7	2363-2371	spinning	
16-8	2372-2376	rust	
16-9	2377-2379	if	
16-10	2380-2383	you	
16-11	2384-2388	have	
16-12	2389-2390	a	
16-13	2391-2395	huge	
16-14	2396-2404	database	
16-15	2404-2405	,	
16-16	2406-2410	that	
16-17	2411-2416	would	
16-18	2417-2421	kill	
16-19	2422-2426	your	
16-20	2427-2438	performance	
16-21	2439-2442	due	
16-22	2443-2445	to	
16-23	2446-2450	seek	
16-24	2451-2456	times	
16-25	2456-2457	.	

#Text=As well your amount of swap is far to high, i would turn swap off with that amount of ram.
17-1	2458-2460	As	
17-2	2461-2465	well	
17-3	2466-2470	your	
17-4	2471-2477	amount	
17-5	2478-2480	of	
17-6	2481-2485	swap	
17-7	2486-2488	is	
17-8	2489-2492	far	
17-9	2493-2495	to	
17-10	2496-2500	high	
17-11	2500-2501	,	
17-12	2502-2503	i	
17-13	2504-2509	would	
17-14	2510-2514	turn	
17-15	2515-2519	swap	
17-16	2520-2523	off	
17-17	2524-2528	with	
17-18	2529-2533	that	
17-19	2534-2540	amount	
17-20	2541-2543	of	
17-21	2544-2547	ram	
17-22	2547-2548	.	

#Text=So classic debugging and performance optimization would be my next steps.
#Text=tatooin
#Text=September 16, 2020,
#Text=8:37am
#Text=OK, I take the point of PSQL 11.
18-1	2549-2551	So	
18-2	2552-2559	classic	
18-3	2560-2569	debugging	
18-4	2570-2573	and	
18-5	2574-2585	performance	
18-6	2586-2598	optimization	
18-7	2599-2604	would	
18-8	2605-2607	be	
18-9	2608-2610	my	
18-10	2611-2615	next	
18-11	2616-2621	steps	
18-12	2621-2622	.	
18-13	2623-2630	tatooin	
18-14	2631-2640	September	
18-15	2641-2643	16	
18-16	2643-2644	,	
18-17	2645-2649	2020	
18-18	2649-2650	,	
18-19	2651-2652	8	
18-20	2652-2653	:	
18-21	2653-2657	37am	
18-22	2658-2660	OK	
18-23	2660-2661	,	
18-24	2662-2663	I	
18-25	2664-2668	take	
18-26	2669-2672	the	
18-27	2673-2678	point	
18-28	2679-2681	of	
18-29	2682-2686	PSQL	
18-30	2687-2689	11	
18-31	2689-2690	.	

#Text=Didn’t know this was the recommended version.
19-1	2691-2695	Didn	
19-2	2695-2696	’	
19-3	2696-2697	t	
19-4	2698-2702	know	
19-5	2703-2707	this	
19-6	2708-2711	was	
19-7	2712-2715	the	
19-8	2716-2727	recommended	
19-9	2728-2735	version	
19-10	2735-2736	.	

#Text=Regarding the storage, sorry I missed it.
20-1	2737-2746	Regarding	
20-2	2747-2750	the	
20-3	2751-2758	storage	
20-4	2758-2759	,	
20-5	2760-2765	sorry	
20-6	2766-2767	I	
20-7	2768-2774	missed	
20-8	2775-2777	it	
20-9	2777-2778	.	

#Text=I’m not using NVMEs drives; currently only ATA.
21-1	2779-2780	I	
21-2	2780-2781	’	
21-3	2781-2782	m	
21-4	2783-2786	not	
21-5	2787-2792	using	
21-6	2793-2798	NVMEs	
21-7	2799-2805	drives	
21-8	2805-2806	;	
21-9	2807-2816	currently	
21-10	2817-2821	only	
21-11	2822-2825	ATA	
21-12	2825-2826	.	

#Text=If you guys believe this would really improve things, then I’ll see how to invest in that.
22-1	2827-2829	If	
22-2	2830-2833	you	
22-3	2834-2838	guys	
22-4	2839-2846	believe	
22-5	2847-2851	this	
22-6	2852-2857	would	
22-7	2858-2864	really	
22-8	2865-2872	improve	
22-9	2873-2879	things	
22-10	2879-2880	,	
22-11	2881-2885	then	
22-12	2886-2887	I	
22-13	2887-2888	’	
22-14	2888-2890	ll	
22-15	2891-2894	see	
22-16	2895-2898	how	
22-17	2899-2901	to	
22-18	2902-2908	invest	
22-19	2909-2911	in	
22-20	2912-2916	that	
22-21	2916-2917	.	

#Text=Last point is SWAP; perhaps I’m wrong but I always thought that:
#Text=disabling SWAP is a bad idea
#Text=System will always use memory first, then swap if no more memory is available.
23-1	2918-2922	Last	
23-2	2923-2928	point	
23-3	2929-2931	is	
23-4	2932-2936	SWAP	
23-5	2936-2937	;	
23-6	2938-2945	perhaps	
23-7	2946-2947	I	
23-8	2947-2948	’	
23-9	2948-2949	m	
23-10	2950-2955	wrong	
23-11	2956-2959	but	
23-12	2960-2961	I	
23-13	2962-2968	always	
23-14	2969-2976	thought	
23-15	2977-2981	that	
23-16	2981-2982	:	
23-17	2983-2992	disabling	
23-18	2993-2997	SWAP	
23-19	2998-3000	is	
23-20	3001-3002	a	
23-21	3003-3006	bad	
23-22	3007-3011	idea	
23-23	3012-3018	System	
23-24	3019-3023	will	
23-25	3024-3030	always	
23-26	3031-3034	use	
23-27	3035-3041	memory	
23-28	3042-3047	first	
23-29	3047-3048	,	
23-30	3049-3053	then	
23-31	3054-3058	swap	
23-32	3059-3061	if	
23-33	3062-3064	no	
23-34	3065-3069	more	
23-35	3070-3076	memory	
23-36	3077-3079	is	
23-37	3080-3089	available	
23-38	3089-3090	.	

#Text=Isn’t that correct ?
24-1	3091-3094	Isn	
24-2	3094-3095	’	
24-3	3095-3096	t	
24-4	3097-3101	that	
24-5	3102-3109	correct	
24-6	3110-3111	?	

#Text=tatooin
#Text=September 23, 2020,
#Text=5:14pm
#Text=Does GVM-11 actually works with PostgreSQL-11, or were you only talking about GVM 20.08 ?
25-1	3112-3119	tatooin	
25-2	3120-3129	September	
25-3	3130-3132	23	
25-4	3132-3133	,	
25-5	3134-3138	2020	
25-6	3138-3139	,	
25-7	3140-3141	5	
25-8	3141-3142	:	
25-9	3142-3146	14pm	
25-10	3147-3151	Does	
25-11	3152-3155	GVM	
25-12	3155-3156	-	
25-13	3156-3158	11	
25-14	3159-3167	actually	
25-15	3168-3173	works	
25-16	3174-3178	with	
25-17	3179-3189	PostgreSQL	
25-18	3189-3190	-	
25-19	3190-3192	11	
25-20	3192-3193	,	
25-21	3194-3196	or	
25-22	3197-3201	were	
25-23	3202-3205	you	
25-24	3206-3210	only	
25-25	3211-3218	talking	
25-26	3219-3224	about	
25-27	3225-3228	GVM	
25-28	3229-3234	20.08	
25-29	3235-3236	?	

#Text=On a pre-prod system I have updated my PSQL from 10 to 11, but then I get the following errors when starting gvmd:
#Text=main:MESSAGE:2020-09-23 17h09.44 utc:9172:
#Text=Greenbone Vulnerability Manager version 9.0.0 (DB revision 221)
#Text=md manage:MESSAGE:2020-09-23 17h09.44 utc:9173: check_db_versions: database version of SCAP database: 16
#Text=md manage:MESSAGE:2020-09-23 17h09.44 utc:9173: check_db_versions: SCAP database version supported by manager: 15
#Text=main:CRITICAL:2020-09-23 17h09.44 utc:9173: gvmd: database is wrong version
#Text=I don’t really understand this error, as I don’t see how my SCAP database version could be newer than the one supported by the manager, since I havn’t actually changed the SCAP data during the PSQL upgrade.
#Text=bricks
#Text=September 24, 2020,
#Text=8:42am
#Text=For gvmd-20.08 and gvmd-21.04/master PostgreSQL 11 is our reference.
26-1	3237-3239	On	
26-2	3240-3241	a	
26-3	3242-3250	pre-prod	
26-4	3251-3257	system	
26-5	3258-3259	I	
26-6	3260-3264	have	
26-7	3265-3272	updated	
26-8	3273-3275	my	
26-9	3276-3280	PSQL	
26-10	3281-3285	from	
26-11	3286-3288	10	
26-12	3289-3291	to	
26-13	3292-3294	11	
26-14	3294-3295	,	
26-15	3296-3299	but	
26-16	3300-3304	then	
26-17	3305-3306	I	
26-18	3307-3310	get	
26-19	3311-3314	the	
26-20	3315-3324	following	
26-21	3325-3331	errors	
26-22	3332-3336	when	
26-23	3337-3345	starting	
26-24	3346-3350	gvmd	
26-25	3350-3351	:	
26-26	3352-3356	main	
26-27	3356-3357	:	
26-28	3357-3364	MESSAGE	
26-29	3364-3365	:	
26-30	3365-3369	2020	
26-31	3369-3370	-	
26-32	3370-3372	09	
26-33	3372-3373	-	
26-34	3373-3375	23	
26-35	3376-3384	17h09.44	
26-36	3385-3388	utc	
26-37	3388-3389	:	
26-38	3389-3393	9172	
26-39	3393-3394	:	
26-40	3395-3404	Greenbone	
26-41	3405-3418	Vulnerability	
26-42	3419-3426	Manager	
26-43	3427-3434	version	
26-44	3435-3440	9.0.0	
26-45	3441-3442	(	
26-46	3442-3444	DB	
26-47	3445-3453	revision	
26-48	3454-3457	221	
26-49	3457-3458	)	
26-50	3459-3461	md	
26-51	3462-3468	manage	
26-52	3468-3469	:	
26-53	3469-3476	MESSAGE	
26-54	3476-3477	:	
26-55	3477-3481	2020	
26-56	3481-3482	-	
26-57	3482-3484	09	
26-58	3484-3485	-	
26-59	3485-3487	23	
26-60	3488-3496	17h09.44	
26-61	3497-3500	utc	
26-62	3500-3501	:	
26-63	3501-3505	9173	
26-64	3505-3506	:	
26-65	3507-3524	check_db_versions	
26-66	3524-3525	:	
26-67	3526-3534	database	
26-68	3535-3542	version	
26-69	3543-3545	of	
26-70	3546-3550	SCAP	
26-71	3551-3559	database	
26-72	3559-3560	:	
26-73	3561-3563	16	
26-74	3564-3566	md	
26-75	3567-3573	manage	
26-76	3573-3574	:	
26-77	3574-3581	MESSAGE	
26-78	3581-3582	:	
26-79	3582-3586	2020	
26-80	3586-3587	-	
26-81	3587-3589	09	
26-82	3589-3590	-	
26-83	3590-3592	23	
26-84	3593-3601	17h09.44	
26-85	3602-3605	utc	
26-86	3605-3606	:	
26-87	3606-3610	9173	
26-88	3610-3611	:	
26-89	3612-3629	check_db_versions	
26-90	3629-3630	:	
26-91	3631-3635	SCAP	
26-92	3636-3644	database	
26-93	3645-3652	version	
26-94	3653-3662	supported	
26-95	3663-3665	by	
26-96	3666-3673	manager	
26-97	3673-3674	:	
26-98	3675-3677	15	
26-99	3678-3682	main	
26-100	3682-3683	:	
26-101	3683-3691	CRITICAL	
26-102	3691-3692	:	
26-103	3692-3696	2020	
26-104	3696-3697	-	
26-105	3697-3699	09	
26-106	3699-3700	-	
26-107	3700-3702	23	
26-108	3703-3711	17h09.44	
26-109	3712-3715	utc	
26-110	3715-3716	:	
26-111	3716-3720	9173	
26-112	3720-3721	:	
26-113	3722-3726	gvmd	
26-114	3726-3727	:	
26-115	3728-3736	database	
26-116	3737-3739	is	
26-117	3740-3745	wrong	
26-118	3746-3753	version	
26-119	3754-3755	I	
26-120	3756-3759	don	
26-121	3759-3760	’	
26-122	3760-3761	t	
26-123	3762-3768	really	
26-124	3769-3779	understand	
26-125	3780-3784	this	
26-126	3785-3790	error	
26-127	3790-3791	,	
26-128	3792-3794	as	
26-129	3795-3796	I	
26-130	3797-3800	don	
26-131	3800-3801	’	
26-132	3801-3802	t	
26-133	3803-3806	see	
26-134	3807-3810	how	
26-135	3811-3813	my	
26-136	3814-3818	SCAP	
26-137	3819-3827	database	
26-138	3828-3835	version	
26-139	3836-3841	could	
26-140	3842-3844	be	
26-141	3845-3850	newer	
26-142	3851-3855	than	
26-143	3856-3859	the	
26-144	3860-3863	one	
26-145	3864-3873	supported	
26-146	3874-3876	by	
26-147	3877-3880	the	
26-148	3881-3888	manager	
26-149	3888-3889	,	
26-150	3890-3895	since	
26-151	3896-3897	I	
26-152	3898-3902	havn	
26-153	3902-3903	’	
26-154	3903-3904	t	
26-155	3905-3913	actually	
26-156	3914-3921	changed	
26-157	3922-3925	the	
26-158	3926-3930	SCAP	
26-159	3931-3935	data	
26-160	3936-3942	during	
26-161	3943-3946	the	
26-162	3947-3951	PSQL	
26-163	3952-3959	upgrade	
26-164	3959-3960	.	
26-165	3961-3967	bricks	
26-166	3968-3977	September	
26-167	3978-3980	24	
26-168	3980-3981	,	
26-169	3982-3986	2020	
26-170	3986-3987	,	
26-171	3988-3989	8	
26-172	3989-3990	:	
26-173	3990-3994	42am	
26-174	3995-3998	For	
26-175	3999-4003	gvmd	
26-176	4003-4004	-	
26-177	4004-4009	20.08	
26-178	4010-4013	and	
26-179	4014-4018	gvmd	
26-180	4018-4019	-	
26-181	4019-4024	21.04	
26-182	4024-4025	/	
26-183	4025-4031	master	
26-184	4032-4042	PostgreSQL	
26-185	4043-4045	11	
26-186	4046-4048	is	
26-187	4049-4052	our	
26-188	4053-4062	reference	
26-189	4062-4063	.	

#Text=The PostgreSQL 12 issue might get fixed but we can’t promise anything at the moment.
27-1	4064-4067	The	
27-2	4068-4078	PostgreSQL	
27-3	4079-4081	12	
27-4	4082-4087	issue	
27-5	4088-4093	might	
27-6	4094-4097	get	
27-7	4098-4103	fixed	
27-8	4104-4107	but	
27-9	4108-4110	we	
27-10	4111-4114	can	
27-11	4114-4115	’	
27-12	4115-4116	t	
27-13	4117-4124	promise	
27-14	4125-4133	anything	
27-15	4134-4136	at	
27-16	4137-4140	the	
27-17	4141-4147	moment	
27-18	4147-4148	.	

#Text=For other versions below gvmd-20.08 Debian Stretch is the base system and therefore PostgreSQL 9.6 is recommended.
28-1	4149-4152	For	
28-2	4153-4158	other	
28-3	4159-4167	versions	
28-4	4168-4173	below	
28-5	4174-4178	gvmd	
28-6	4178-4179	-	
28-7	4179-4184	20.08	
28-8	4185-4191	Debian	
28-9	4192-4199	Stretch	
28-10	4200-4202	is	
28-11	4203-4206	the	
28-12	4207-4211	base	
28-13	4212-4218	system	
28-14	4219-4222	and	
28-15	4223-4232	therefore	
28-16	4233-4243	PostgreSQL	
28-17	4244-4247	9.6	
28-18	4248-4250	is	
28-19	4251-4262	recommended	
28-20	4262-4263	.	

#Text=For your current issue with the SCAP db, please try to use gvmd-9.0.1 the latest bugfix release instead of 9.0.0.
29-1	4264-4267	For	
29-2	4268-4272	your	
29-3	4273-4280	current	
29-4	4281-4286	issue	
29-5	4287-4291	with	
29-6	4292-4295	the	
29-7	4296-4300	SCAP	
29-8	4301-4303	db	
29-9	4303-4304	,	
29-10	4305-4311	please	
29-11	4312-4315	try	
29-12	4316-4318	to	
29-13	4319-4322	use	
29-14	4323-4327	gvmd	
29-15	4327-4328	-	
29-16	4328-4333	9.0.1	
29-17	4334-4337	the	
29-18	4338-4344	latest	
29-19	4345-4351	bugfix	
29-20	4352-4359	release	
29-21	4360-4367	instead	
29-22	4368-4370	of	
29-23	4371-4376	9.0.0	
29-24	4376-4377	.	

#Text=I can remember either a ticket a GitHub or a topic in this forum where this issue was mentioned to and updating to the bugfix release fixed it.
#Text=1 Like
#Text=tatooin
#Text=September 24, 2020,
#Text=8:45am
#Text=#10
#Text=Thanks bricks.
30-1	4378-4379	I	
30-2	4380-4383	can	
30-3	4384-4392	remember	
30-4	4393-4399	either	
30-5	4400-4401	a	
30-6	4402-4408	ticket	
30-7	4409-4410	a	
30-8	4411-4417	GitHub	
30-9	4418-4420	or	
30-10	4421-4422	a	
30-11	4423-4428	topic	
30-12	4429-4431	in	
30-13	4432-4436	this	
30-14	4437-4442	forum	
30-15	4443-4448	where	
30-16	4449-4453	this	
30-17	4454-4459	issue	
30-18	4460-4463	was	
30-19	4464-4473	mentioned	
30-20	4474-4476	to	
30-21	4477-4480	and	
30-22	4481-4489	updating	
30-23	4490-4492	to	
30-24	4493-4496	the	
30-25	4497-4503	bugfix	
30-26	4504-4511	release	
30-27	4512-4517	fixed	
30-28	4518-4520	it	
30-29	4520-4521	.	
30-30	4522-4523	1	
30-31	4524-4528	Like	
30-32	4529-4536	tatooin	
30-33	4537-4546	September	
30-34	4547-4549	24	
30-35	4549-4550	,	
30-36	4551-4555	2020	
30-37	4555-4556	,	
30-38	4557-4558	8	
30-39	4558-4559	:	
30-40	4559-4563	45am	
30-41	4564-4567	#10	
30-42	4568-4574	Thanks	
30-43	4575-4581	bricks	
30-44	4581-4582	.	

#Text=That actually answer my question.
31-1	4583-4587	That	
31-2	4588-4596	actually	
31-3	4597-4603	answer	
31-4	4604-4606	my	
31-5	4607-4615	question	
31-6	4615-4616	.	

#Text=So there is no point to try mixing gvmd-11 with PSQL-11 if the reference is 9.6.
32-1	4617-4619	So	
32-2	4620-4625	there	
32-3	4626-4628	is	
32-4	4629-4631	no	
32-5	4632-4637	point	
32-6	4638-4640	to	
32-7	4641-4644	try	
32-8	4645-4651	mixing	
32-9	4652-4656	gvmd	
32-10	4656-4657	-	
32-11	4657-4659	11	
32-12	4660-4664	with	
32-13	4665-4669	PSQL	
32-14	4669-4670	-	
32-15	4670-4672	11	
32-16	4673-4675	if	
32-17	4676-4679	the	
32-18	4680-4689	reference	
32-19	4690-4692	is	
32-20	4693-4696	9.6	
32-21	4696-4697	.	

#Text=I’ll focus my effort on upgrading to 20.08 AND PSQL-11 at once.
33-1	4698-4699	I	
33-2	4699-4700	’	
33-3	4700-4702	ll	
33-4	4703-4708	focus	
33-5	4709-4711	my	
33-6	4712-4718	effort	
33-7	4719-4721	on	
33-8	4722-4731	upgrading	
33-9	4732-4734	to	
33-10	4735-4740	20.08	
33-11	4741-4744	AND	
33-12	4745-4749	PSQL	
33-13	4749-4750	-	
33-14	4750-4752	11	
33-15	4753-4755	at	
33-16	4756-4760	once	
33-17	4760-4761	.	

#Text=Hopefully, this should solve the huge performance issues I’m facing at the moment.
34-1	4762-4771	Hopefully	
34-2	4771-4772	,	
34-3	4773-4777	this	
34-4	4778-4784	should	
34-5	4785-4790	solve	
34-6	4791-4794	the	
34-7	4795-4799	huge	
34-8	4800-4811	performance	
34-9	4812-4818	issues	
34-10	4819-4820	I	
34-11	4820-4821	’	
34-12	4821-4822	m	
34-13	4823-4829	facing	
34-14	4830-4832	at	
34-15	4833-4836	the	
34-16	4837-4843	moment	
34-17	4843-4844	.	

#Text=Thanks a lot
#Text=bricks
#Text=September 24, 2020,
#Text=8:57am
#Text=#11
#Text=Using GVM-11/gvmd-9 with PostgreSQL 11 should work.
35-1	4845-4851	Thanks	
35-2	4852-4853	a	
35-3	4854-4857	lot	
35-4	4858-4864	bricks	
35-5	4865-4874	September	
35-6	4875-4877	24	
35-7	4877-4878	,	
35-8	4879-4883	2020	
35-9	4883-4884	,	
35-10	4885-4886	8	
35-11	4886-4887	:	
35-12	4887-4891	57am	
35-13	4892-4895	#11	
35-14	4896-4901	Using	
35-15	4902-4905	GVM	
35-16	4905-4906	-	
35-17	4906-4908	11	
35-18	4908-4909	/	
35-19	4909-4913	gvmd	
35-20	4913-4914	-	
35-21	4914-4915	9	
35-22	4916-4920	with	
35-23	4921-4931	PostgreSQL	
35-24	4932-4934	11	
35-25	4935-4941	should	
35-26	4942-4946	work	
35-27	4946-4947	.	

#Text=I’ve used that for a longer period on my personal development computer.
36-1	4948-4949	I	
36-2	4949-4950	’	
36-3	4950-4952	ve	
36-4	4953-4957	used	
36-5	4958-4962	that	
36-6	4963-4966	for	
36-7	4967-4968	a	
36-8	4969-4975	longer	
36-9	4976-4982	period	
36-10	4983-4985	on	
36-11	4986-4988	my	
36-12	4989-4997	personal	
36-13	4998-5009	development	
36-14	5010-5018	computer	
36-15	5018-5019	.	

#Text=But it isn’t tested and there is no guarantee because our corresponding products (GOS 5 and 6) are based on Debian Stretch and therefore PostgreSQL 9.6.
37-1	5020-5023	But	
37-2	5024-5026	it	
37-3	5027-5030	isn	
37-4	5030-5031	’	
37-5	5031-5032	t	
37-6	5033-5039	tested	
37-7	5040-5043	and	
37-8	5044-5049	there	
37-9	5050-5052	is	
37-10	5053-5055	no	
37-11	5056-5065	guarantee	
37-12	5066-5073	because	
37-13	5074-5077	our	
37-14	5078-5091	corresponding	
37-15	5092-5100	products	
37-16	5101-5102	(	
37-17	5102-5105	GOS	
37-18	5106-5107	5	
37-19	5108-5111	and	
37-20	5112-5113	6	
37-21	5113-5114	)	
37-22	5115-5118	are	
37-23	5119-5124	based	
37-24	5125-5127	on	
37-25	5128-5134	Debian	
37-26	5135-5142	Stretch	
37-27	5143-5146	and	
37-28	5147-5156	therefore	
37-29	5157-5167	PostgreSQL	
37-30	5168-5171	9.6	
37-31	5171-5172	.	

#Text=We are developing
#Text=and testing for our products of course.
38-1	5173-5175	We	
38-2	5176-5179	are	
38-3	5180-5190	developing	
38-4	5191-5194	and	
38-5	5195-5202	testing	
38-6	5203-5206	for	
38-7	5207-5210	our	
38-8	5211-5219	products	
38-9	5220-5222	of	
38-10	5223-5229	course	
38-11	5229-5230	.	

#Text=If the community is facing issues with other systems varying from our reference system we sometimes can’t give any promises for fixes.
#Text=1 Like
#Text=tatooin
#Text=September 25, 2020,
#Text=7:52am
#Text=#12
#Text=Using GVM-11/gvmd-9 with PostgreSQL 11 does work, actually.
39-1	5231-5233	If	
39-2	5234-5237	the	
39-3	5238-5247	community	
39-4	5248-5250	is	
39-5	5251-5257	facing	
39-6	5258-5264	issues	
39-7	5265-5269	with	
39-8	5270-5275	other	
39-9	5276-5283	systems	
39-10	5284-5291	varying	
39-11	5292-5296	from	
39-12	5297-5300	our	
39-13	5301-5310	reference	
39-14	5311-5317	system	
39-15	5318-5320	we	
39-16	5321-5330	sometimes	
39-17	5331-5334	can	
39-18	5334-5335	’	
39-19	5335-5336	t	
39-20	5337-5341	give	
39-21	5342-5345	any	
39-22	5346-5354	promises	
39-23	5355-5358	for	
39-24	5359-5364	fixes	
39-25	5364-5365	.	
39-26	5366-5367	1	
39-27	5368-5372	Like	
39-28	5373-5380	tatooin	
39-29	5381-5390	September	
39-30	5391-5393	25	
39-31	5393-5394	,	
39-32	5395-5399	2020	
39-33	5399-5400	,	
39-34	5401-5402	7	
39-35	5402-5403	:	
39-36	5403-5407	52am	
39-37	5408-5411	#12	
39-38	5412-5417	Using	
39-39	5418-5421	GVM	
39-40	5421-5422	-	
39-41	5422-5424	11	
39-42	5424-5425	/	
39-43	5425-5429	gvmd	
39-44	5429-5430	-	
39-45	5430-5431	9	
39-46	5432-5436	with	
39-47	5437-5447	PostgreSQL	
39-48	5448-5450	11	
39-49	5451-5455	does	
39-50	5456-5460	work	
39-51	5460-5461	,	
39-52	5462-5470	actually	
39-53	5470-5471	.	

#Text=It just that in our production environment, it is pain slow.
40-1	5472-5474	It	
40-2	5475-5479	just	
40-3	5480-5484	that	
40-4	5485-5487	in	
40-5	5488-5491	our	
40-6	5492-5502	production	
40-7	5503-5514	environment	
40-8	5514-5515	,	
40-9	5516-5518	it	
40-10	5519-5521	is	
40-11	5522-5526	pain	
40-12	5527-5531	slow	
40-13	5531-5532	.	

#Text=Perhaps it has nothing to do with the version of PSQL.
41-1	5533-5540	Perhaps	
41-2	5541-5543	it	
41-3	5544-5547	has	
41-4	5548-5555	nothing	
41-5	5556-5558	to	
41-6	5559-5561	do	
41-7	5562-5566	with	
41-8	5567-5570	the	
41-9	5571-5578	version	
41-10	5579-5581	of	
41-11	5582-5586	PSQL	
41-12	5586-5587	.	

#Text=It’s possible gvmd is just not designed to handle such big database (57GB), that’s why I want to explore all options at this point.
42-1	5588-5590	It	
42-2	5590-5591	’	
42-3	5591-5592	s	
42-4	5593-5601	possible	
42-5	5602-5606	gvmd	
42-6	5607-5609	is	
42-7	5610-5614	just	
42-8	5615-5618	not	
42-9	5619-5627	designed	
42-10	5628-5630	to	
42-11	5631-5637	handle	
42-12	5638-5642	such	
42-13	5643-5646	big	
42-14	5647-5655	database	
42-15	5656-5657	(	
42-16	5657-5661	57GB	
42-17	5661-5662	)	
42-18	5662-5663	,	
42-19	5664-5668	that	
42-20	5668-5669	’	
42-21	5669-5670	s	
42-22	5671-5674	why	
42-23	5675-5676	I	
42-24	5677-5681	want	
42-25	5682-5684	to	
42-26	5685-5692	explore	
42-27	5693-5696	all	
42-28	5697-5704	options	
42-29	5705-5707	at	
42-30	5708-5712	this	
42-31	5713-5718	point	
42-32	5718-5719	.	

#Text=Thanks
#Text=Lukas
#Text=September 25, 2020,
#Text=9:28pm
#Text=#13
#Text=I have seen DBs
#Text=with more then 10 /8 networks and 16 millions of results.
43-1	5720-5726	Thanks	
43-2	5727-5732	Lukas	
43-3	5733-5742	September	
43-4	5743-5745	25	
43-5	5745-5746	,	
43-6	5747-5751	2020	
43-7	5751-5752	,	
43-8	5753-5754	9	
43-9	5754-5755	:	
43-10	5755-5759	28pm	
43-11	5760-5763	#13	
43-12	5764-5765	I	
43-13	5766-5770	have	
43-14	5771-5775	seen	
43-15	5776-5779	DBs	
43-16	5780-5784	with	
43-17	5785-5789	more	
43-18	5790-5794	then	
43-19	5795-5797	10	
43-20	5798-5799	/	
43-21	5799-5800	8	
43-22	5801-5809	networks	
43-23	5810-5813	and	
43-24	5814-5816	16	
43-25	5817-5825	millions	
43-26	5826-5828	of	
43-27	5829-5836	results	
43-28	5836-5837	.	

#Text=But they are never at this size, do you store all “log” and “scan-meta” data there ?
44-1	5838-5841	But	
44-2	5842-5846	they	
44-3	5847-5850	are	
44-4	5851-5856	never	
44-5	5857-5859	at	
44-6	5860-5864	this	
44-7	5865-5869	size	
44-8	5869-5870	,	
44-9	5871-5873	do	
44-10	5874-5877	you	
44-11	5878-5883	store	
44-12	5884-5887	all	
44-13	5888-5889	“	
44-14	5889-5892	log	
44-15	5892-5893	”	
44-16	5894-5897	and	
44-17	5898-5899	“	
44-18	5899-5908	scan-meta	
44-19	5908-5909	”	
44-20	5910-5914	data	
44-21	5915-5920	there	
44-22	5921-5922	?	

#Text=How often do you do DB maintenance ?
45-1	5923-5926	How	
45-2	5927-5932	often	
45-3	5933-5935	do	
45-4	5936-5939	you	
45-5	5940-5942	do	
45-6	5943-5945	DB	
45-7	5946-5957	maintenance	
45-8	5958-5959	?	

#Text=It looks like a non optimal scan configuration and/or missing db-maintenance.
46-1	5960-5962	It	
46-2	5963-5968	looks	
46-3	5969-5973	like	
46-4	5974-5975	a	
46-5	5976-5979	non	
46-6	5980-5987	optimal	
46-7	5988-5992	scan	
46-8	5993-6006	configuration	
46-9	6007-6010	and	
46-10	6010-6011	/	
46-11	6011-6013	or	
46-12	6014-6021	missing	
46-13	6022-6036	db-maintenance	
46-14	6036-6037	.	

#Text=Plus our enterprise appliances designed for that type of DBs have a block-acceleration based on special hardware so speed up the DB in hardware.
#Text=tatooin
#Text=September 26, 2020,
#Text=8:01am
#Text=#14
#Text=I have not tweaked any openvas configuration; as the default values looks good enough:
#Text=non_simult_ports = 139, 445, 3389, Services/irc
#Text=vendor_version =
#Text=safe_checks = yes
#Text=nasl_no_signature_check = yes
#Text=time_between_request = 0
#Text=expand_vhosts = yes
#Text=max_checks = 10
#Text=optimize_test = yes
#Text=report_host_details = yes
#Text=config_file = /opt/gvm/etc/openvas/openvas.conf
#Text=unscanned_closed_udp = yes
#Text=include_folders = /opt/gvm/var/lib/openvas/plugins
#Text=test_empty_vhost = no
#Text=plugins_timeout = 320
#Text=cgi_path = /cgi-bin:/scripts
#Text=checks_read_timeout = 5
#Text=unscanned_closed = yes
#Text=auto_enable_dependencies = yes
#Text=log_whole_attack = no
#Text=db_address = /var/run/redis/redis.sock
#Text=drop_privileges = no
#Text=log_plugins_name_at_load = no
#Text=scanner_plugins_timeout = 36000
#Text=timeout_retry = 3
#Text=max_hosts = 30
#Text=network_scan = no
#Text=open_sock_max_attempts = 5
#Text=plugins_folder = /opt/gvm/var/lib/openvas/plugins
#Text=Regarding the DB maintenance; I’m doing the following weekly:
#Text=Freeing some unused storage space in the database
#Text=/opt/gvm/sbin/gvmd --optimize=vacuum
#Text=Optimize DB queries
#Text=/opt/gvm/sbin/gvmd --optimize=analyze
#Text=Cleans up references to report formats that have been removed without using the DELETE_REPORT_FORMAT GMP command, for example after a built-in report format has been removed.
47-1	6038-6042	Plus	
47-2	6043-6046	our	
47-3	6047-6057	enterprise	
47-4	6058-6068	appliances	
47-5	6069-6077	designed	
47-6	6078-6081	for	
47-7	6082-6086	that	
47-8	6087-6091	type	
47-9	6092-6094	of	
47-10	6095-6098	DBs	
47-11	6099-6103	have	
47-12	6104-6105	a	
47-13	6106-6124	block-acceleration	
47-14	6125-6130	based	
47-15	6131-6133	on	
47-16	6134-6141	special	
47-17	6142-6150	hardware	
47-18	6151-6153	so	
47-19	6154-6159	speed	
47-20	6160-6162	up	
47-21	6163-6166	the	
47-22	6167-6169	DB	
47-23	6170-6172	in	
47-24	6173-6181	hardware	
47-25	6181-6182	.	
47-26	6183-6190	tatooin	
47-27	6191-6200	September	
47-28	6201-6203	26	
47-29	6203-6204	,	
47-30	6205-6209	2020	
47-31	6209-6210	,	
47-32	6211-6212	8	
47-33	6212-6213	:	
47-34	6213-6217	01am	
47-35	6218-6221	#14	
47-36	6222-6223	I	
47-37	6224-6228	have	
47-38	6229-6232	not	
47-39	6233-6240	tweaked	
47-40	6241-6244	any	
47-41	6245-6252	openvas	
47-42	6253-6266	configuration	
47-43	6266-6267	;	
47-44	6268-6270	as	
47-45	6271-6274	the	
47-46	6275-6282	default	
47-47	6283-6289	values	
47-48	6290-6295	looks	
47-49	6296-6300	good	
47-50	6301-6307	enough	
47-51	6307-6308	:	
47-52	6309-6325	non_simult_ports	
47-53	6326-6327	=	
47-54	6328-6331	139	
47-55	6331-6332	,	
47-56	6333-6336	445	
47-57	6336-6337	,	
47-58	6338-6342	3389	
47-59	6342-6343	,	
47-60	6344-6352	Services	
47-61	6352-6353	/	
47-62	6353-6356	irc	
47-63	6357-6371	vendor_version	
47-64	6372-6373	=	
47-65	6374-6385	safe_checks	
47-66	6386-6387	=	
47-67	6388-6391	yes	
47-68	6392-6415	nasl_no_signature_check	
47-69	6416-6417	=	
47-70	6418-6421	yes	
47-71	6422-6442	time_between_request	
47-72	6443-6444	=	
47-73	6445-6446	0	
47-74	6447-6460	expand_vhosts	
47-75	6461-6462	=	
47-76	6463-6466	yes	
47-77	6467-6477	max_checks	
47-78	6478-6479	=	
47-79	6480-6482	10	
47-80	6483-6496	optimize_test	
47-81	6497-6498	=	
47-82	6499-6502	yes	
47-83	6503-6522	report_host_details	
47-84	6523-6524	=	
47-85	6525-6528	yes	
47-86	6529-6540	config_file	
47-87	6541-6542	=	
47-88	6543-6544	/	
47-89	6544-6547	opt	
47-90	6547-6548	/	
47-91	6548-6551	gvm	
47-92	6551-6552	/	
47-93	6552-6555	etc	
47-94	6555-6556	/	
47-95	6556-6563	openvas	
47-96	6563-6564	/	
47-97	6564-6576	openvas.conf	
47-98	6577-6597	unscanned_closed_udp	
47-99	6598-6599	=	
47-100	6600-6603	yes	
47-101	6604-6619	include_folders	
47-102	6620-6621	=	
47-103	6622-6623	/	
47-104	6623-6626	opt	
47-105	6626-6627	/	
47-106	6627-6630	gvm	
47-107	6630-6631	/	
47-108	6631-6634	var	
47-109	6634-6635	/	
47-110	6635-6638	lib	
47-111	6638-6639	/	
47-112	6639-6646	openvas	
47-113	6646-6647	/	
47-114	6647-6654	plugins	
47-115	6655-6671	test_empty_vhost	
47-116	6672-6673	=	
47-117	6674-6676	no	
47-118	6677-6692	plugins_timeout	
47-119	6693-6694	=	
47-120	6695-6698	320	
47-121	6699-6707	cgi_path	
47-122	6708-6709	=	
47-123	6710-6711	/	
47-124	6711-6718	cgi-bin	
47-125	6718-6719	:	
47-126	6719-6720	/	
47-127	6720-6727	scripts	
47-128	6728-6747	checks_read_timeout	
47-129	6748-6749	=	
47-130	6750-6751	5	
47-131	6752-6768	unscanned_closed	
47-132	6769-6770	=	
47-133	6771-6774	yes	
47-134	6775-6799	auto_enable_dependencies	
47-135	6800-6801	=	
47-136	6802-6805	yes	
47-137	6806-6822	log_whole_attack	
47-138	6823-6824	=	
47-139	6825-6827	no	
47-140	6828-6838	db_address	
47-141	6839-6840	=	
47-142	6841-6842	/	
47-143	6842-6845	var	
47-144	6845-6846	/	
47-145	6846-6849	run	
47-146	6849-6850	/	
47-147	6850-6855	redis	
47-148	6855-6856	/	
47-149	6856-6866	redis.sock	
47-150	6867-6882	drop_privileges	
47-151	6883-6884	=	
47-152	6885-6887	no	
47-153	6888-6912	log_plugins_name_at_load	
47-154	6913-6914	=	
47-155	6915-6917	no	
47-156	6918-6941	scanner_plugins_timeout	
47-157	6942-6943	=	
47-158	6944-6949	36000	
47-159	6950-6963	timeout_retry	
47-160	6964-6965	=	
47-161	6966-6967	3	
47-162	6968-6977	max_hosts	
47-163	6978-6979	=	
47-164	6980-6982	30	
47-165	6983-6995	network_scan	
47-166	6996-6997	=	
47-167	6998-7000	no	
47-168	7001-7023	open_sock_max_attempts	
47-169	7024-7025	=	
47-170	7026-7027	5	
47-171	7028-7042	plugins_folder	
47-172	7043-7044	=	
47-173	7045-7046	/	
47-174	7046-7049	opt	
47-175	7049-7050	/	
47-176	7050-7053	gvm	
47-177	7053-7054	/	
47-178	7054-7057	var	
47-179	7057-7058	/	
47-180	7058-7061	lib	
47-181	7061-7062	/	
47-182	7062-7069	openvas	
47-183	7069-7070	/	
47-184	7070-7077	plugins	
47-185	7078-7087	Regarding	
47-186	7088-7091	the	
47-187	7092-7094	DB	
47-188	7095-7106	maintenance	
47-189	7106-7107	;	
47-190	7108-7109	I	
47-191	7109-7110	’	
47-192	7110-7111	m	
47-193	7112-7117	doing	
47-194	7118-7121	the	
47-195	7122-7131	following	
47-196	7132-7138	weekly	
47-197	7138-7139	:	
47-198	7140-7147	Freeing	
47-199	7148-7152	some	
47-200	7153-7159	unused	
47-201	7160-7167	storage	
47-202	7168-7173	space	
47-203	7174-7176	in	
47-204	7177-7180	the	
47-205	7181-7189	database	
47-206	7190-7191	/	
47-207	7191-7194	opt	
47-208	7194-7195	/	
47-209	7195-7198	gvm	
47-210	7198-7199	/	
47-211	7199-7203	sbin	
47-212	7203-7204	/	
47-213	7204-7208	gvmd	
47-214	7209-7210	-	
47-215	7210-7211	-	
47-216	7211-7219	optimize	
47-217	7219-7220	=	
47-218	7220-7226	vacuum	
47-219	7227-7235	Optimize	
47-220	7236-7238	DB	
47-221	7239-7246	queries	
47-222	7247-7248	/	
47-223	7248-7251	opt	
47-224	7251-7252	/	
47-225	7252-7255	gvm	
47-226	7255-7256	/	
47-227	7256-7260	sbin	
47-228	7260-7261	/	
47-229	7261-7265	gvmd	
47-230	7266-7267	-	
47-231	7267-7268	-	
47-232	7268-7276	optimize	
47-233	7276-7277	=	
47-234	7277-7284	analyze	
47-235	7285-7291	Cleans	
47-236	7292-7294	up	
47-237	7295-7305	references	
47-238	7306-7308	to	
47-239	7309-7315	report	
47-240	7316-7323	formats	
47-241	7324-7328	that	
47-242	7329-7333	have	
47-243	7334-7338	been	
47-244	7339-7346	removed	
47-245	7347-7354	without	
47-246	7355-7360	using	
47-247	7361-7364	the	
47-248	7365-7385	DELETE_REPORT_FORMAT	
47-249	7386-7389	GMP	
47-250	7390-7397	command	
47-251	7397-7398	,	
47-252	7399-7402	for	
47-253	7403-7410	example	
47-254	7411-7416	after	
47-255	7417-7418	a	
47-256	7419-7427	built-in	
47-257	7428-7434	report	
47-258	7435-7441	format	
47-259	7442-7445	has	
47-260	7446-7450	been	
47-261	7451-7458	removed	
47-262	7458-7459	.	

#Text=/opt/gvm/sbin/gvmd --optimize=cleanup-report-formats
#Text=This cleans up results with missing result_nvt entries which can result in filters and overrides not working properly.
48-1	7460-7461	/	
48-2	7461-7464	opt	
48-3	7464-7465	/	
48-4	7465-7468	gvm	
48-5	7468-7469	/	
48-6	7469-7473	sbin	
48-7	7473-7474	/	
48-8	7474-7478	gvmd	
48-9	7479-7480	-	
48-10	7480-7481	-	
48-11	7481-7489	optimize	
48-12	7489-7490	=	
48-13	7490-7512	cleanup-report-formats	
48-14	7513-7517	This	
48-15	7518-7524	cleans	
48-16	7525-7527	up	
48-17	7528-7535	results	
48-18	7536-7540	with	
48-19	7541-7548	missing	
48-20	7549-7559	result_nvt	
48-21	7560-7567	entries	
48-22	7568-7573	which	
48-23	7574-7577	can	
48-24	7578-7584	result	
48-25	7585-7587	in	
48-26	7588-7595	filters	
48-27	7596-7599	and	
48-28	7600-7609	overrides	
48-29	7610-7613	not	
48-30	7614-7621	working	
48-31	7622-7630	properly	
48-32	7630-7631	.	

#Text=/opt/gvm/sbin/gvmd --optimize=cleanup-result-nvts
#Text=This option removes duplicate preferences from Scan Configs and corrects some broken preference values
#Text=/opt/gvm/sbin/gvmd --optimize=cleanup-config-prefs
#Text=This cleans up results with no severity by assigning the default severity set by the user owning the result.
49-1	7632-7633	/	
49-2	7633-7636	opt	
49-3	7636-7637	/	
49-4	7637-7640	gvm	
49-5	7640-7641	/	
49-6	7641-7645	sbin	
49-7	7645-7646	/	
49-8	7646-7650	gvmd	
49-9	7651-7652	-	
49-10	7652-7653	-	
49-11	7653-7661	optimize	
49-12	7661-7662	=	
49-13	7662-7681	cleanup-result-nvts	
49-14	7682-7686	This	
49-15	7687-7693	option	
49-16	7694-7701	removes	
49-17	7702-7711	duplicate	
49-18	7712-7723	preferences	
49-19	7724-7728	from	
49-20	7729-7733	Scan	
49-21	7734-7741	Configs	
49-22	7742-7745	and	
49-23	7746-7754	corrects	
49-24	7755-7759	some	
49-25	7760-7766	broken	
49-26	7767-7777	preference	
49-27	7778-7784	values	
49-28	7785-7786	/	
49-29	7786-7789	opt	
49-30	7789-7790	/	
49-31	7790-7793	gvm	
49-32	7793-7794	/	
49-33	7794-7798	sbin	
49-34	7798-7799	/	
49-35	7799-7803	gvmd	
49-36	7804-7805	-	
49-37	7805-7806	-	
49-38	7806-7814	optimize	
49-39	7814-7815	=	
49-40	7815-7835	cleanup-config-prefs	
49-41	7836-7840	This	
49-42	7841-7847	cleans	
49-43	7848-7850	up	
49-44	7851-7858	results	
49-45	7859-7863	with	
49-46	7864-7866	no	
49-47	7867-7875	severity	
49-48	7876-7878	by	
49-49	7879-7888	assigning	
49-50	7889-7892	the	
49-51	7893-7900	default	
49-52	7901-7909	severity	
49-53	7910-7913	set	
49-54	7914-7916	by	
49-55	7917-7920	the	
49-56	7921-7925	user	
49-57	7926-7932	owning	
49-58	7933-7936	the	
49-59	7937-7943	result	
49-60	7943-7944	.	

#Text=/opt/gvm/sbin/gvmd --optimize=cleanup-result-severities
#Text=This creates the cache containing the unfiltered result counts of all reports that are not cached yet.
50-1	7945-7946	/	
50-2	7946-7949	opt	
50-3	7949-7950	/	
50-4	7950-7953	gvm	
50-5	7953-7954	/	
50-6	7954-7958	sbin	
50-7	7958-7959	/	
50-8	7959-7963	gvmd	
50-9	7964-7965	-	
50-10	7965-7966	-	
50-11	7966-7974	optimize	
50-12	7974-7975	=	
50-13	7975-8000	cleanup-result-severities	
50-14	8001-8005	This	
50-15	8006-8013	creates	
50-16	8014-8017	the	
50-17	8018-8023	cache	
50-18	8024-8034	containing	
50-19	8035-8038	the	
50-20	8039-8049	unfiltered	
50-21	8050-8056	result	
50-22	8057-8063	counts	
50-23	8064-8066	of	
50-24	8067-8070	all	
50-25	8071-8078	reports	
50-26	8079-8083	that	
50-27	8084-8087	are	
50-28	8088-8091	not	
50-29	8092-8098	cached	
50-30	8099-8102	yet	
50-31	8102-8103	.	

#Text=/opt/gvm/sbin/gvmd --optimize=update-report-cache
#Text=I havn’t found any other information to optimize SQL database for GVM usage, so if you have other informations I miss, please share.
51-1	8104-8105	/	
51-2	8105-8108	opt	
51-3	8108-8109	/	
51-4	8109-8112	gvm	
51-5	8112-8113	/	
51-6	8113-8117	sbin	
51-7	8117-8118	/	
51-8	8118-8122	gvmd	
51-9	8123-8124	-	
51-10	8124-8125	-	
51-11	8125-8133	optimize	
51-12	8133-8134	=	
51-13	8134-8153	update-report-cache	
51-14	8154-8155	I	
51-15	8156-8160	havn	
51-16	8160-8161	’	
51-17	8161-8162	t	
51-18	8163-8168	found	
51-19	8169-8172	any	
51-20	8173-8178	other	
51-21	8179-8190	information	
51-22	8191-8193	to	
51-23	8194-8202	optimize	
51-24	8203-8206	SQL	
51-25	8207-8215	database	
51-26	8216-8219	for	
51-27	8220-8223	GVM	
51-28	8224-8229	usage	
51-29	8229-8230	,	
51-30	8231-8233	so	
51-31	8234-8236	if	
51-32	8237-8240	you	
51-33	8241-8245	have	
51-34	8246-8251	other	
51-35	8252-8264	informations	
51-36	8265-8266	I	
51-37	8267-8271	miss	
51-38	8271-8272	,	
51-39	8273-8279	please	
51-40	8280-8285	share	
51-41	8285-8286	.	

#Text=However you are right on one point; we store log information as well as low/medium/high…
#Text=Thanks
#Text=Lukas
#Text=September 26, 2020,
#Text=8:07am
#Text=#15
#Text=tatooin:
#Text=Freeing some unused storage space in the database
#Text=/opt/gvm/sbin/gvmd --optimize=vacuum
#Text=Optimize DB queries
#Text=/opt/gvm/sbin/gvmd --optimize=analyze
#Text=That is not enough with that DB size, as well your default config is not intended for that extra big
#Text=enterprise environment.
52-1	8287-8294	However	
52-2	8295-8298	you	
52-3	8299-8302	are	
52-4	8303-8308	right	
52-5	8309-8311	on	
52-6	8312-8315	one	
52-7	8316-8321	point	
52-8	8321-8322	;	
52-9	8323-8325	we	
52-10	8326-8331	store	
52-11	8332-8335	log	
52-12	8336-8347	information	
52-13	8348-8350	as	
52-14	8351-8355	well	
52-15	8356-8358	as	
52-16	8359-8362	low	
52-17	8362-8363	/	
52-18	8363-8369	medium	
52-19	8369-8370	/	
52-20	8370-8374	high	
52-21	8374-8375	…	
52-22	8376-8382	Thanks	
52-23	8383-8388	Lukas	
52-24	8389-8398	September	
52-25	8399-8401	26	
52-26	8401-8402	,	
52-27	8403-8407	2020	
52-28	8407-8408	,	
52-29	8409-8410	8	
52-30	8410-8411	:	
52-31	8411-8415	07am	
52-32	8416-8419	#15	
52-33	8420-8427	tatooin	
52-34	8427-8428	:	
52-35	8429-8436	Freeing	
52-36	8437-8441	some	
52-37	8442-8448	unused	
52-38	8449-8456	storage	
52-39	8457-8462	space	
52-40	8463-8465	in	
52-41	8466-8469	the	
52-42	8470-8478	database	
52-43	8479-8480	/	
52-44	8480-8483	opt	
52-45	8483-8484	/	
52-46	8484-8487	gvm	
52-47	8487-8488	/	
52-48	8488-8492	sbin	
52-49	8492-8493	/	
52-50	8493-8497	gvmd	
52-51	8498-8499	-	
52-52	8499-8500	-	
52-53	8500-8508	optimize	
52-54	8508-8509	=	
52-55	8509-8515	vacuum	
52-56	8516-8524	Optimize	
52-57	8525-8527	DB	
52-58	8528-8535	queries	
52-59	8536-8537	/	
52-60	8537-8540	opt	
52-61	8540-8541	/	
52-62	8541-8544	gvm	
52-63	8544-8545	/	
52-64	8545-8549	sbin	
52-65	8549-8550	/	
52-66	8550-8554	gvmd	
52-67	8555-8556	-	
52-68	8556-8557	-	
52-69	8557-8565	optimize	
52-70	8565-8566	=	
52-71	8566-8573	analyze	
52-72	8574-8578	That	
52-73	8579-8581	is	
52-74	8582-8585	not	
52-75	8586-8592	enough	
52-76	8593-8597	with	
52-77	8598-8602	that	
52-78	8603-8605	DB	
52-79	8606-8610	size	
52-80	8610-8611	,	
52-81	8612-8614	as	
52-82	8615-8619	well	
52-83	8620-8624	your	
52-84	8625-8632	default	
52-85	8633-8639	config	
52-86	8640-8642	is	
52-87	8643-8646	not	
52-88	8647-8655	intended	
52-89	8656-8659	for	
52-90	8660-8664	that	
52-91	8665-8670	extra	
52-92	8671-8674	big	
52-93	8675-8685	enterprise	
52-94	8686-8697	environment	
52-95	8697-8698	.	

#Text=I would run offline optimizations first.
53-1	8699-8700	I	
53-2	8701-8706	would	
53-3	8707-8710	run	
53-4	8711-8718	offline	
53-5	8719-8732	optimizations	
53-6	8733-8738	first	
53-7	8738-8739	.	

#Text=I would go with multiple enterprise appliances with that big environment.
54-1	8740-8741	I	
54-2	8742-8747	would	
54-3	8748-8750	go	
54-4	8751-8755	with	
54-5	8756-8764	multiple	
54-6	8765-8775	enterprise	
54-7	8776-8786	appliances	
54-8	8787-8791	with	
54-9	8792-8796	that	
54-10	8797-8800	big	
54-11	8801-8812	environment	
54-12	8812-8813	.	

#Text=Otherwise you have to re-invent the wheel based on our OpenSource.
#Text=tatooin
#Text=September 26, 2020,
#Text=8:15am
#Text=#16
#Text=What do you call offline optimization ?
55-1	8814-8823	Otherwise	
55-2	8824-8827	you	
55-3	8828-8832	have	
55-4	8833-8835	to	
55-5	8836-8845	re-invent	
55-6	8846-8849	the	
55-7	8850-8855	wheel	
55-8	8856-8861	based	
55-9	8862-8864	on	
55-10	8865-8868	our	
55-11	8869-8879	OpenSource	
55-12	8879-8880	.	
55-13	8881-8888	tatooin	
55-14	8889-8898	September	
55-15	8899-8901	26	
55-16	8901-8902	,	
55-17	8903-8907	2020	
55-18	8907-8908	,	
55-19	8909-8910	8	
55-20	8910-8911	:	
55-21	8911-8915	15am	
55-22	8916-8919	#16	
55-23	8920-8924	What	
55-24	8925-8927	do	
55-25	8928-8931	you	
55-26	8932-8936	call	
55-27	8937-8944	offline	
55-28	8945-8957	optimization	
55-29	8958-8959	?	

#Text=Please share informations if you have it.
56-1	8960-8966	Please	
56-2	8967-8972	share	
56-3	8973-8985	informations	
56-4	8986-8988	if	
56-5	8989-8992	you	
56-6	8993-8997	have	
56-7	8998-9000	it	
56-8	9000-9001	.	

#Text=Also you mention log data; is there a way to stop logging it ?
57-1	9002-9006	Also	
57-2	9007-9010	you	
57-3	9011-9018	mention	
57-4	9019-9022	log	
57-5	9023-9027	data	
57-6	9027-9028	;	
57-7	9029-9031	is	
57-8	9032-9037	there	
57-9	9038-9039	a	
57-10	9040-9043	way	
57-11	9044-9046	to	
57-12	9047-9051	stop	
57-13	9052-9059	logging	
57-14	9060-9062	it	
57-15	9063-9064	?	

#Text=I havn’t found any documentation on this; it only apply to reports.
58-1	9065-9066	I	
58-2	9067-9071	havn	
58-3	9071-9072	’	
58-4	9072-9073	t	
58-5	9074-9079	found	
58-6	9080-9083	any	
58-7	9084-9097	documentation	
58-8	9098-9100	on	
58-9	9101-9105	this	
58-10	9105-9106	;	
58-11	9107-9109	it	
58-12	9110-9114	only	
58-13	9115-9120	apply	
58-14	9121-9123	to	
58-15	9124-9131	reports	
58-16	9131-9132	.	

#Text=The appliance is unfortunately not an option in my context; due to prohibitive restrictions to install hardwares in our DCs.
59-1	9133-9136	The	
59-2	9137-9146	appliance	
59-3	9147-9149	is	
59-4	9150-9163	unfortunately	
59-5	9164-9167	not	
59-6	9168-9170	an	
59-7	9171-9177	option	
59-8	9178-9180	in	
59-9	9181-9183	my	
59-10	9184-9191	context	
59-11	9191-9192	;	
59-12	9193-9196	due	
59-13	9197-9199	to	
59-14	9200-9211	prohibitive	
59-15	9212-9224	restrictions	
59-16	9225-9227	to	
59-17	9228-9235	install	
59-18	9236-9245	hardwares	
59-19	9246-9248	in	
59-20	9249-9252	our	
59-21	9253-9256	DCs	
59-22	9256-9257	.	

#Text=And in all case, I understand my DB isn’t optimized since you said you’ve seen DBs with more than 10 /8 networks never reaching that size.
60-1	9258-9261	And	
60-2	9262-9264	in	
60-3	9265-9268	all	
60-4	9269-9273	case	
60-5	9273-9274	,	
60-6	9275-9276	I	
60-7	9277-9287	understand	
60-8	9288-9290	my	
60-9	9291-9293	DB	
60-10	9294-9297	isn	
60-11	9297-9298	’	
60-12	9298-9299	t	
60-13	9300-9309	optimized	
60-14	9310-9315	since	
60-15	9316-9319	you	
60-16	9320-9324	said	
60-17	9325-9328	you	
60-18	9328-9329	’	
60-19	9329-9331	ve	
60-20	9332-9336	seen	
60-21	9337-9340	DBs	
60-22	9341-9345	with	
60-23	9346-9350	more	
60-24	9351-9355	than	
60-25	9356-9358	10	
60-26	9359-9360	/	
60-27	9360-9361	8	
60-28	9362-9370	networks	
60-29	9371-9376	never	
60-30	9377-9385	reaching	
60-31	9386-9390	that	
60-32	9391-9395	size	
60-33	9395-9396	.	

#Text=Currently I have no other option but to optimize to the maximum what I have.
61-1	9397-9406	Currently	
61-2	9407-9408	I	
61-3	9409-9413	have	
61-4	9414-9416	no	
61-5	9417-9422	other	
61-6	9423-9429	option	
61-7	9430-9433	but	
61-8	9434-9436	to	
61-9	9437-9445	optimize	
61-10	9446-9448	to	
61-11	9449-9452	the	
61-12	9453-9460	maximum	
61-13	9461-9465	what	
61-14	9466-9467	I	
61-15	9468-9472	have	
61-16	9472-9473	.	

#Text=Again, help is welcome here if you have advices.
62-1	9474-9479	Again	
62-2	9479-9480	,	
62-3	9481-9485	help	
62-4	9486-9488	is	
62-5	9489-9496	welcome	
62-6	9497-9501	here	
62-7	9502-9504	if	
62-8	9505-9508	you	
62-9	9509-9513	have	
62-10	9514-9521	advices	
62-11	9521-9522	.	

#Text=Thanks
#Text=Home
#Text=Categories
#Text=FAQ/Guidelines
#Text=Terms of Service
#Text=Privacy Policy
#Text=Powered by Discourse, best viewed with JavaScript enabled
63-1	9523-9529	Thanks	
63-2	9530-9534	Home	
63-3	9535-9545	Categories	
63-4	9546-9549	FAQ	
63-5	9549-9550	/	
63-6	9550-9560	Guidelines	
63-7	9561-9566	Terms	
63-8	9567-9569	of	
63-9	9570-9577	Service	
63-10	9578-9585	Privacy	
63-11	9586-9592	Policy	
63-12	9593-9600	Powered	
63-13	9601-9603	by	
63-14	9604-9613	Discourse	
63-15	9613-9614	,	
63-16	9615-9619	best	
63-17	9620-9626	viewed	
63-18	9627-9631	with	
63-19	9632-9642	JavaScript	
63-20	9643-9650	enabled	
