#FORMAT=WebAnno TSV 3.3


#Text=PostgreSQL: Documentation: 12: 25.3. 
1-1	0-10	PostgreSQL	
1-2	10-11	:	
1-3	12-25	Documentation	
1-4	25-26	:	
1-5	27-29	12	
1-6	29-30	:	
1-7	31-35	25.3	
1-8	35-36	.	
1-9	36-37	 	

#Text=Continuous Archiving and Point-in-Time Recovery (PITR)
#Text=Home
#Text=About
#Text=Download
#Text=Documentation
#Text=Community
#Text=Developers
#Text=Support
#Text=Donate
#Text=Your account
#Text=11th February 2021:
#Text=PostgreSQL 13.2, 12.6, 11.11, 10.16, 9.6.21, & 9.5.25 Released!
2-1	37-47	Continuous	
2-2	48-57	Archiving	
2-3	58-61	and	
2-4	62-75	Point-in-Time	
2-5	76-84	Recovery	
2-6	85-86	(	
2-7	86-90	PITR	
2-8	90-91	)	
2-9	92-96	Home	
2-10	97-102	About	
2-11	103-111	Download	
2-12	112-125	Documentation	
2-13	126-135	Community	
2-14	136-146	Developers	
2-15	147-154	Support	
2-16	155-161	Donate	
2-17	162-166	Your	
2-18	167-174	account	
2-19	175-179	11th	
2-20	180-188	February	
2-21	189-193	2021	
2-22	193-194	:	
2-23	195-205	PostgreSQL	
2-24	206-210	13.2	
2-25	210-211	,	
2-26	212-216	12.6	
2-27	216-217	,	
2-28	218-223	11.11	
2-29	223-224	,	
2-30	225-230	10.16	
2-31	230-231	,	
2-32	232-238	9.6.21	
2-33	238-239	,	
2-34	240-241	&	
2-35	242-248	9.5.25	
2-36	249-257	Released	
2-37	257-258	!	

#Text=Documentation → PostgreSQL 12
#Text=Supported Versions:
#Text=Current
#Text=(13)
#Text=9.6
#Text=Development Versions:
#Text=devel
#Text=Unsupported versions:
#Text=9.5
#Text=9.4
#Text=9.3
#Text=9.2
#Text=9.1
#Text=9.0
#Text=8.4
#Text=8.3
#Text=8.2
#Text=25.3. 
3-1	259-272	Documentation	
3-2	273-274	→	
3-3	275-285	PostgreSQL	
3-4	286-288	12	
3-5	289-298	Supported	
3-6	299-307	Versions	
3-7	307-308	:	
3-8	309-316	Current	
3-9	317-318	(	
3-10	318-320	13	
3-11	320-321	)	
3-12	322-325	9.6	
3-13	326-337	Development	
3-14	338-346	Versions	
3-15	346-347	:	
3-16	348-353	devel	
3-17	354-365	Unsupported	
3-18	366-374	versions	
3-19	374-375	:	
3-20	376-379	9.5	
3-21	380-383	9.4	
3-22	384-387	9.3	
3-23	388-391	9.2	
3-24	392-395	9.1	
3-25	396-399	9.0	
3-26	400-403	8.4	
3-27	404-407	8.3	
3-28	408-411	8.2	
3-29	412-416	25.3	
3-30	416-417	.	
3-31	417-418	 	

#Text=Continuous Archiving and Point-in-Time Recovery (PITR)
#Text=Prev
#Text=Chapter 25. 
4-1	418-428	Continuous	
4-2	429-438	Archiving	
4-3	439-442	and	
4-4	443-456	Point-in-Time	
4-5	457-465	Recovery	
4-6	466-467	(	
4-7	467-471	PITR	
4-8	471-472	)	
4-9	473-477	Prev	
4-10	478-485	Chapter	
4-11	485-486	 	
4-12	486-488	25	
4-13	488-489	.	
4-14	489-490	 	

#Text=Backup and Restore
#Text=Home
#Text=Next
#Text=25.3. 
5-1	490-496	Backup	
5-2	497-500	and	
5-3	501-508	Restore	
5-4	509-513	Home	
5-5	514-518	Next	
5-6	519-523	25.3	
5-7	523-524	.	
5-8	524-525	 	

#Text=Continuous Archiving and Point-in-Time Recovery (PITR)
#Text=25.3.1.
6-1	525-535	Continuous	
6-2	536-545	Archiving	
6-3	546-549	and	
6-4	550-563	Point-in-Time	
6-5	564-572	Recovery	
6-6	573-574	(	
6-7	574-578	PITR	
6-8	578-579	)	
6-9	580-586	25.3.1	
6-10	586-587	.	

#Text=Setting Up WAL Archiving
#Text=25.3.2.
7-1	588-595	Setting	
7-2	596-598	Up	
7-3	599-602	WAL	
7-4	603-612	Archiving	
7-5	613-619	25.3.2	
7-6	619-620	.	

#Text=Making a Base Backup
#Text=25.3.3.
8-1	621-627	Making	
8-2	628-629	a	
8-3	630-634	Base	
8-4	635-641	Backup	
8-5	642-648	25.3.3	
8-6	648-649	.	

#Text=Making a Base Backup Using the Low Level API
#Text=25.3.4.
9-1	650-656	Making	
9-2	657-658	a	
9-3	659-663	Base	
9-4	664-670	Backup	
9-5	671-676	Using	
9-6	677-680	the	
9-7	681-684	Low	
9-8	685-690	Level	
9-9	691-694	API	
9-10	695-701	25.3.4	
9-11	701-702	.	

#Text=Recovering Using a Continuous Archive Backup
#Text=25.3.5.
10-1	703-713	Recovering	
10-2	714-719	Using	
10-3	720-721	a	
10-4	722-732	Continuous	
10-5	733-740	Archive	
10-6	741-747	Backup	
10-7	748-754	25.3.5	
10-8	754-755	.	

#Text=Timelines
#Text=25.3.6.
11-1	756-765	Timelines	
11-2	766-772	25.3.6	
11-3	772-773	.	

#Text=Tips and Examples
#Text=25.3.7.
12-1	774-778	Tips	
12-2	779-782	and	
12-3	783-791	Examples	
12-4	792-798	25.3.7	
12-5	798-799	.	

#Text=Caveats
#Text=At all times, PostgreSQL maintains a write ahead log (WAL) in the pg_wal/ subdirectory of the cluster's data directory.
13-1	800-807	Caveats	
13-2	808-810	At	
13-3	811-814	all	
13-4	815-820	times	
13-5	820-821	,	
13-6	822-832	PostgreSQL	
13-7	833-842	maintains	
13-8	843-844	a	
13-9	845-850	write	
13-10	851-856	ahead	
13-11	857-860	log	
13-12	861-862	(	
13-13	862-865	WAL	
13-14	865-866	)	
13-15	867-869	in	
13-16	870-873	the	
13-17	874-880	pg_wal	
13-18	880-881	/	
13-19	882-894	subdirectory	
13-20	895-897	of	
13-21	898-901	the	
13-22	902-911	cluster's	
13-23	912-916	data	
13-24	917-926	directory	
13-25	926-927	.	

#Text=The log records every change made to the database's data files.
14-1	928-931	The	
14-2	932-935	log	
14-3	936-943	records	
14-4	944-949	every	
14-5	950-956	change	
14-6	957-961	made	
14-7	962-964	to	
14-8	965-968	the	
14-9	969-979	database's	
14-10	980-984	data	
14-11	985-990	files	
14-12	990-991	.	

#Text=This log exists primarily for crash-safety purposes: if the system crashes, the database can be restored to consistency by “replaying” the log entries made since the last checkpoint.
15-1	992-996	This	
15-2	997-1000	log	
15-3	1001-1007	exists	
15-4	1008-1017	primarily	
15-5	1018-1021	for	
15-6	1022-1034	crash-safety	
15-7	1035-1043	purposes	
15-8	1043-1044	:	
15-9	1045-1047	if	
15-10	1048-1051	the	
15-11	1052-1058	system	
15-12	1059-1066	crashes	
15-13	1066-1067	,	
15-14	1068-1071	the	
15-15	1072-1080	database	
15-16	1081-1084	can	
15-17	1085-1087	be	
15-18	1088-1096	restored	
15-19	1097-1099	to	
15-20	1100-1111	consistency	
15-21	1112-1114	by	
15-22	1115-1116	“	
15-23	1116-1125	replaying	
15-24	1125-1126	”	
15-25	1127-1130	the	
15-26	1131-1134	log	
15-27	1135-1142	entries	
15-28	1143-1147	made	
15-29	1148-1153	since	
15-30	1154-1157	the	
15-31	1158-1162	last	
15-32	1163-1173	checkpoint	
15-33	1173-1174	.	

#Text=However, the existence of the log makes it possible to use a third strategy for backing up databases: we can combine a file-system-level backup with backup of the WAL files.
16-1	1175-1182	However	
16-2	1182-1183	,	
16-3	1184-1187	the	
16-4	1188-1197	existence	
16-5	1198-1200	of	
16-6	1201-1204	the	
16-7	1205-1208	log	
16-8	1209-1214	makes	
16-9	1215-1217	it	
16-10	1218-1226	possible	
16-11	1227-1229	to	
16-12	1230-1233	use	
16-13	1234-1235	a	
16-14	1236-1241	third	
16-15	1242-1250	strategy	
16-16	1251-1254	for	
16-17	1255-1262	backing	
16-18	1263-1265	up	
16-19	1266-1275	databases	
16-20	1275-1276	:	
16-21	1277-1279	we	
16-22	1280-1283	can	
16-23	1284-1291	combine	
16-24	1292-1293	a	
16-25	1294-1311	file-system-level	
16-26	1312-1318	backup	
16-27	1319-1323	with	
16-28	1324-1330	backup	
16-29	1331-1333	of	
16-30	1334-1337	the	
16-31	1338-1341	WAL	
16-32	1342-1347	files	
16-33	1347-1348	.	

#Text=If recovery is needed, we restore the file system backup and then replay from the backed-up WAL files to bring the system to a current state.
17-1	1349-1351	If	
17-2	1352-1360	recovery	
17-3	1361-1363	is	
17-4	1364-1370	needed	
17-5	1370-1371	,	
17-6	1372-1374	we	
17-7	1375-1382	restore	
17-8	1383-1386	the	
17-9	1387-1391	file	
17-10	1392-1398	system	
17-11	1399-1405	backup	
17-12	1406-1409	and	
17-13	1410-1414	then	
17-14	1415-1421	replay	
17-15	1422-1426	from	
17-16	1427-1430	the	
17-17	1431-1440	backed-up	
17-18	1441-1444	WAL	
17-19	1445-1450	files	
17-20	1451-1453	to	
17-21	1454-1459	bring	
17-22	1460-1463	the	
17-23	1464-1470	system	
17-24	1471-1473	to	
17-25	1474-1475	a	
17-26	1476-1483	current	
17-27	1484-1489	state	
17-28	1489-1490	.	

#Text=This approach is more complex to administer than either of the previous approaches, but it has some significant benefits:
#Text=We do not need a perfectly consistent file system backup as the starting point.
18-1	1491-1495	This	
18-2	1496-1504	approach	
18-3	1505-1507	is	
18-4	1508-1512	more	
18-5	1513-1520	complex	
18-6	1521-1523	to	
18-7	1524-1534	administer	
18-8	1535-1539	than	
18-9	1540-1546	either	
18-10	1547-1549	of	
18-11	1550-1553	the	
18-12	1554-1562	previous	
18-13	1563-1573	approaches	
18-14	1573-1574	,	
18-15	1575-1578	but	
18-16	1579-1581	it	
18-17	1582-1585	has	
18-18	1586-1590	some	
18-19	1591-1602	significant	
18-20	1603-1611	benefits	
18-21	1611-1612	:	
18-22	1613-1615	We	
18-23	1616-1618	do	
18-24	1619-1622	not	
18-25	1623-1627	need	
18-26	1628-1629	a	
18-27	1630-1639	perfectly	
18-28	1640-1650	consistent	
18-29	1651-1655	file	
18-30	1656-1662	system	
18-31	1663-1669	backup	
18-32	1670-1672	as	
18-33	1673-1676	the	
18-34	1677-1685	starting	
18-35	1686-1691	point	
18-36	1691-1692	.	

#Text=Any internal inconsistency in the backup will be corrected by log replay (this is not significantly different from what happens during crash recovery).
19-1	1693-1696	Any	
19-2	1697-1705	internal	
19-3	1706-1719	inconsistency	
19-4	1720-1722	in	
19-5	1723-1726	the	
19-6	1727-1733	backup	
19-7	1734-1738	will	
19-8	1739-1741	be	
19-9	1742-1751	corrected	
19-10	1752-1754	by	
19-11	1755-1758	log	
19-12	1759-1765	replay	
19-13	1766-1767	(	
19-14	1767-1771	this	
19-15	1772-1774	is	
19-16	1775-1778	not	
19-17	1779-1792	significantly	
19-18	1793-1802	different	
19-19	1803-1807	from	
19-20	1808-1812	what	
19-21	1813-1820	happens	
19-22	1821-1827	during	
19-23	1828-1833	crash	
19-24	1834-1842	recovery	
19-25	1842-1843	)	
19-26	1843-1844	.	

#Text=So we do not need a file system snapshot capability, just tar or a similar archiving tool.
20-1	1845-1847	So	
20-2	1848-1850	we	
20-3	1851-1853	do	
20-4	1854-1857	not	
20-5	1858-1862	need	
20-6	1863-1864	a	
20-7	1865-1869	file	
20-8	1870-1876	system	
20-9	1877-1885	snapshot	
20-10	1886-1896	capability	
20-11	1896-1897	,	
20-12	1898-1902	just	
20-13	1903-1906	tar	
20-14	1907-1909	or	
20-15	1910-1911	a	
20-16	1912-1919	similar	
20-17	1920-1929	archiving	
20-18	1930-1934	tool	
20-19	1934-1935	.	

#Text=Since we can combine an indefinitely long sequence of WAL files for replay, continuous backup can be achieved simply by continuing to archive the WAL files.
21-1	1936-1941	Since	
21-2	1942-1944	we	
21-3	1945-1948	can	
21-4	1949-1956	combine	
21-5	1957-1959	an	
21-6	1960-1972	indefinitely	
21-7	1973-1977	long	
21-8	1978-1986	sequence	
21-9	1987-1989	of	
21-10	1990-1993	WAL	
21-11	1994-1999	files	
21-12	2000-2003	for	
21-13	2004-2010	replay	
21-14	2010-2011	,	
21-15	2012-2022	continuous	
21-16	2023-2029	backup	
21-17	2030-2033	can	
21-18	2034-2036	be	
21-19	2037-2045	achieved	
21-20	2046-2052	simply	
21-21	2053-2055	by	
21-22	2056-2066	continuing	
21-23	2067-2069	to	
21-24	2070-2077	archive	
21-25	2078-2081	the	
21-26	2082-2085	WAL	
21-27	2086-2091	files	
21-28	2091-2092	.	

#Text=This is particularly valuable for large databases, where it might not be convenient to take a full backup frequently.
22-1	2093-2097	This	
22-2	2098-2100	is	
22-3	2101-2113	particularly	
22-4	2114-2122	valuable	
22-5	2123-2126	for	
22-6	2127-2132	large	
22-7	2133-2142	databases	
22-8	2142-2143	,	
22-9	2144-2149	where	
22-10	2150-2152	it	
22-11	2153-2158	might	
22-12	2159-2162	not	
22-13	2163-2165	be	
22-14	2166-2176	convenient	
22-15	2177-2179	to	
22-16	2180-2184	take	
22-17	2185-2186	a	
22-18	2187-2191	full	
22-19	2192-2198	backup	
22-20	2199-2209	frequently	
22-21	2209-2210	.	

#Text=It is not necessary to replay the WAL entries all the way to the end.
23-1	2211-2213	It	
23-2	2214-2216	is	
23-3	2217-2220	not	
23-4	2221-2230	necessary	
23-5	2231-2233	to	
23-6	2234-2240	replay	
23-7	2241-2244	the	
23-8	2245-2248	WAL	
23-9	2249-2256	entries	
23-10	2257-2260	all	
23-11	2261-2264	the	
23-12	2265-2268	way	
23-13	2269-2271	to	
23-14	2272-2275	the	
23-15	2276-2279	end	
23-16	2279-2280	.	

#Text=We could stop the replay at any point and have a consistent snapshot of the database as it was at that time.
24-1	2281-2283	We	
24-2	2284-2289	could	
24-3	2290-2294	stop	
24-4	2295-2298	the	
24-5	2299-2305	replay	
24-6	2306-2308	at	
24-7	2309-2312	any	
24-8	2313-2318	point	
24-9	2319-2322	and	
24-10	2323-2327	have	
24-11	2328-2329	a	
24-12	2330-2340	consistent	
24-13	2341-2349	snapshot	
24-14	2350-2352	of	
24-15	2353-2356	the	
24-16	2357-2365	database	
24-17	2366-2368	as	
24-18	2369-2371	it	
24-19	2372-2375	was	
24-20	2376-2378	at	
24-21	2379-2383	that	
24-22	2384-2388	time	
24-23	2388-2389	.	

#Text=Thus, this technique supports point-in-time recovery: it is possible to restore the database to its state at any time since your base backup was taken.
25-1	2390-2394	Thus	
25-2	2394-2395	,	
25-3	2396-2400	this	
25-4	2401-2410	technique	
25-5	2411-2419	supports	
25-6	2420-2433	point-in-time	
25-7	2434-2442	recovery	
25-8	2442-2443	:	
25-9	2444-2446	it	
25-10	2447-2449	is	
25-11	2450-2458	possible	
25-12	2459-2461	to	
25-13	2462-2469	restore	
25-14	2470-2473	the	
25-15	2474-2482	database	
25-16	2483-2485	to	
25-17	2486-2489	its	
25-18	2490-2495	state	
25-19	2496-2498	at	
25-20	2499-2502	any	
25-21	2503-2507	time	
25-22	2508-2513	since	
25-23	2514-2518	your	
25-24	2519-2523	base	
25-25	2524-2530	backup	
25-26	2531-2534	was	
25-27	2535-2540	taken	
25-28	2540-2541	.	

#Text=If we continuously feed the series of WAL files to another machine that has been loaded with the same base backup file, we have a warm standby system: at any point we can bring up the second machine and it will have a nearly-current copy of the database.
26-1	2542-2544	If	
26-2	2545-2547	we	
26-3	2548-2560	continuously	
26-4	2561-2565	feed	
26-5	2566-2569	the	
26-6	2570-2576	series	
26-7	2577-2579	of	
26-8	2580-2583	WAL	
26-9	2584-2589	files	
26-10	2590-2592	to	
26-11	2593-2600	another	
26-12	2601-2608	machine	
26-13	2609-2613	that	
26-14	2614-2617	has	
26-15	2618-2622	been	
26-16	2623-2629	loaded	
26-17	2630-2634	with	
26-18	2635-2638	the	
26-19	2639-2643	same	
26-20	2644-2648	base	
26-21	2649-2655	backup	
26-22	2656-2660	file	
26-23	2660-2661	,	
26-24	2662-2664	we	
26-25	2665-2669	have	
26-26	2670-2671	a	
26-27	2672-2676	warm	
26-28	2677-2684	standby	
26-29	2685-2691	system	
26-30	2691-2692	:	
26-31	2693-2695	at	
26-32	2696-2699	any	
26-33	2700-2705	point	
26-34	2706-2708	we	
26-35	2709-2712	can	
26-36	2713-2718	bring	
26-37	2719-2721	up	
26-38	2722-2725	the	
26-39	2726-2732	second	
26-40	2733-2740	machine	
26-41	2741-2744	and	
26-42	2745-2747	it	
26-43	2748-2752	will	
26-44	2753-2757	have	
26-45	2758-2759	a	
26-46	2760-2774	nearly-current	
26-47	2775-2779	copy	
26-48	2780-2782	of	
26-49	2783-2786	the	
26-50	2787-2795	database	
26-51	2795-2796	.	

#Text=Note
#Text=pg_dump and pg_dumpall do not produce file-system-level backups and cannot be used as part of a continuous-archiving solution.
27-1	2797-2801	Note	
27-2	2802-2809	pg_dump	
27-3	2810-2813	and	
27-4	2814-2824	pg_dumpall	
27-5	2825-2827	do	
27-6	2828-2831	not	
27-7	2832-2839	produce	
27-8	2840-2857	file-system-level	
27-9	2858-2865	backups	
27-10	2866-2869	and	
27-11	2870-2876	cannot	
27-12	2877-2879	be	
27-13	2880-2884	used	
27-14	2885-2887	as	
27-15	2888-2892	part	
27-16	2893-2895	of	
27-17	2896-2897	a	
27-18	2898-2918	continuous-archiving	
27-19	2919-2927	solution	
27-20	2927-2928	.	

#Text=Such dumps are logical and do not contain enough information to be used by WAL replay.
28-1	2929-2933	Such	
28-2	2934-2939	dumps	
28-3	2940-2943	are	
28-4	2944-2951	logical	
28-5	2952-2955	and	
28-6	2956-2958	do	
28-7	2959-2962	not	
28-8	2963-2970	contain	
28-9	2971-2977	enough	
28-10	2978-2989	information	
28-11	2990-2992	to	
28-12	2993-2995	be	
28-13	2996-3000	used	
28-14	3001-3003	by	
28-15	3004-3007	WAL	
28-16	3008-3014	replay	
28-17	3014-3015	.	

#Text=As with the plain file-system-backup technique, this method can only support restoration of an entire database cluster, not a subset.
29-1	3016-3018	As	
29-2	3019-3023	with	
29-3	3024-3027	the	
29-4	3028-3033	plain	
29-5	3034-3052	file-system-backup	
29-6	3053-3062	technique	
29-7	3062-3063	,	
29-8	3064-3068	this	
29-9	3069-3075	method	
29-10	3076-3079	can	
29-11	3080-3084	only	
29-12	3085-3092	support	
29-13	3093-3104	restoration	
29-14	3105-3107	of	
29-15	3108-3110	an	
29-16	3111-3117	entire	
29-17	3118-3126	database	
29-18	3127-3134	cluster	
29-19	3134-3135	,	
29-20	3136-3139	not	
29-21	3140-3141	a	
29-22	3142-3148	subset	
29-23	3148-3149	.	

#Text=Also, it requires a lot of archival storage: the base backup might be bulky, and a busy system will generate many megabytes of WAL traffic that have to be archived.
30-1	3150-3154	Also	
30-2	3154-3155	,	
30-3	3156-3158	it	
30-4	3159-3167	requires	
30-5	3168-3169	a	
30-6	3170-3173	lot	
30-7	3174-3176	of	
30-8	3177-3185	archival	
30-9	3186-3193	storage	
30-10	3193-3194	:	
30-11	3195-3198	the	
30-12	3199-3203	base	
30-13	3204-3210	backup	
30-14	3211-3216	might	
30-15	3217-3219	be	
30-16	3220-3225	bulky	
30-17	3225-3226	,	
30-18	3227-3230	and	
30-19	3231-3232	a	
30-20	3233-3237	busy	
30-21	3238-3244	system	
30-22	3245-3249	will	
30-23	3250-3258	generate	
30-24	3259-3263	many	
30-25	3264-3273	megabytes	
30-26	3274-3276	of	
30-27	3277-3280	WAL	
30-28	3281-3288	traffic	
30-29	3289-3293	that	
30-30	3294-3298	have	
30-31	3299-3301	to	
30-32	3302-3304	be	
30-33	3305-3313	archived	
30-34	3313-3314	.	

#Text=Still, it is the preferred backup technique in many situations where high reliability is needed.
31-1	3315-3320	Still	
31-2	3320-3321	,	
31-3	3322-3324	it	
31-4	3325-3327	is	
31-5	3328-3331	the	
31-6	3332-3341	preferred	
31-7	3342-3348	backup	
31-8	3349-3358	technique	
31-9	3359-3361	in	
31-10	3362-3366	many	
31-11	3367-3377	situations	
31-12	3378-3383	where	
31-13	3384-3388	high	
31-14	3389-3400	reliability	
31-15	3401-3403	is	
31-16	3404-3410	needed	
31-17	3410-3411	.	

#Text=To recover successfully using continuous archiving (also called “online backup” by many database vendors), you need a continuous sequence of archived WAL files that extends back at least as far as the start time of your backup.
32-1	3412-3414	To	
32-2	3415-3422	recover	
32-3	3423-3435	successfully	
32-4	3436-3441	using	
32-5	3442-3452	continuous	
32-6	3453-3462	archiving	
32-7	3463-3464	(	
32-8	3464-3468	also	
32-9	3469-3475	called	
32-10	3476-3477	“	
32-11	3477-3483	online	
32-12	3484-3490	backup	
32-13	3490-3491	”	
32-14	3492-3494	by	
32-15	3495-3499	many	
32-16	3500-3508	database	
32-17	3509-3516	vendors	
32-18	3516-3517	)	
32-19	3517-3518	,	
32-20	3519-3522	you	
32-21	3523-3527	need	
32-22	3528-3529	a	
32-23	3530-3540	continuous	
32-24	3541-3549	sequence	
32-25	3550-3552	of	
32-26	3553-3561	archived	
32-27	3562-3565	WAL	
32-28	3566-3571	files	
32-29	3572-3576	that	
32-30	3577-3584	extends	
32-31	3585-3589	back	
32-32	3590-3592	at	
32-33	3593-3598	least	
32-34	3599-3601	as	
32-35	3602-3605	far	
32-36	3606-3608	as	
32-37	3609-3612	the	
32-38	3613-3618	start	
32-39	3619-3623	time	
32-40	3624-3626	of	
32-41	3627-3631	your	
32-42	3632-3638	backup	
32-43	3638-3639	.	

#Text=So to get started, you should set up and test your procedure for archiving WAL files before you take your first base backup.
33-1	3640-3642	So	
33-2	3643-3645	to	
33-3	3646-3649	get	
33-4	3650-3657	started	
33-5	3657-3658	,	
33-6	3659-3662	you	
33-7	3663-3669	should	
33-8	3670-3673	set	
33-9	3674-3676	up	
33-10	3677-3680	and	
33-11	3681-3685	test	
33-12	3686-3690	your	
33-13	3691-3700	procedure	
33-14	3701-3704	for	
33-15	3705-3714	archiving	
33-16	3715-3718	WAL	
33-17	3719-3724	files	
33-18	3725-3731	before	
33-19	3732-3735	you	
33-20	3736-3740	take	
33-21	3741-3745	your	
33-22	3746-3751	first	
33-23	3752-3756	base	
33-24	3757-3763	backup	
33-25	3763-3764	.	

#Text=Accordingly, we first discuss the mechanics of archiving WAL files.
#Text=25.3.1. 
34-1	3765-3776	Accordingly	
34-2	3776-3777	,	
34-3	3778-3780	we	
34-4	3781-3786	first	
34-5	3787-3794	discuss	
34-6	3795-3798	the	
34-7	3799-3808	mechanics	
34-8	3809-3811	of	
34-9	3812-3821	archiving	
34-10	3822-3825	WAL	
34-11	3826-3831	files	
34-12	3831-3832	.	
34-13	3833-3839	25.3.1	
34-14	3839-3840	.	
34-15	3840-3841	 	

#Text=Setting Up WAL Archiving
#Text=In an abstract sense, a running PostgreSQL system produces an indefinitely long sequence of WAL records.
35-1	3841-3848	Setting	
35-2	3849-3851	Up	
35-3	3852-3855	WAL	
35-4	3856-3865	Archiving	
35-5	3866-3868	In	
35-6	3869-3871	an	
35-7	3872-3880	abstract	
35-8	3881-3886	sense	
35-9	3886-3887	,	
35-10	3888-3889	a	
35-11	3890-3897	running	
35-12	3898-3908	PostgreSQL	
35-13	3909-3915	system	
35-14	3916-3924	produces	
35-15	3925-3927	an	
35-16	3928-3940	indefinitely	
35-17	3941-3945	long	
35-18	3946-3954	sequence	
35-19	3955-3957	of	
35-20	3958-3961	WAL	
35-21	3962-3969	records	
35-22	3969-3970	.	

#Text=The system physically divides this sequence into WAL segment files, which are normally 16MB apiece (although the segment size can be altered during initdb).
36-1	3971-3974	The	
36-2	3975-3981	system	
36-3	3982-3992	physically	
36-4	3993-4000	divides	
36-5	4001-4005	this	
36-6	4006-4014	sequence	
36-7	4015-4019	into	
36-8	4020-4023	WAL	
36-9	4024-4031	segment	
36-10	4032-4037	files	
36-11	4037-4038	,	
36-12	4039-4044	which	
36-13	4045-4048	are	
36-14	4049-4057	normally	
36-15	4058-4062	16MB	
36-16	4063-4069	apiece	
36-17	4070-4071	(	
36-18	4071-4079	although	
36-19	4080-4083	the	
36-20	4084-4091	segment	
36-21	4092-4096	size	
36-22	4097-4100	can	
36-23	4101-4103	be	
36-24	4104-4111	altered	
36-25	4112-4118	during	
36-26	4119-4125	initdb	
36-27	4125-4126	)	
36-28	4126-4127	.	

#Text=The segment files are given numeric names that reflect their position in the abstract WAL sequence.
37-1	4128-4131	The	
37-2	4132-4139	segment	
37-3	4140-4145	files	
37-4	4146-4149	are	
37-5	4150-4155	given	
37-6	4156-4163	numeric	
37-7	4164-4169	names	
37-8	4170-4174	that	
37-9	4175-4182	reflect	
37-10	4183-4188	their	
37-11	4189-4197	position	
37-12	4198-4200	in	
37-13	4201-4204	the	
37-14	4205-4213	abstract	
37-15	4214-4217	WAL	
37-16	4218-4226	sequence	
37-17	4226-4227	.	

#Text=When not using WAL archiving, the system normally creates just a few segment files and then “recycles” them by renaming no-longer-needed segment files to higher segment numbers.
38-1	4228-4232	When	
38-2	4233-4236	not	
38-3	4237-4242	using	
38-4	4243-4246	WAL	
38-5	4247-4256	archiving	
38-6	4256-4257	,	
38-7	4258-4261	the	
38-8	4262-4268	system	
38-9	4269-4277	normally	
38-10	4278-4285	creates	
38-11	4286-4290	just	
38-12	4291-4292	a	
38-13	4293-4296	few	
38-14	4297-4304	segment	
38-15	4305-4310	files	
38-16	4311-4314	and	
38-17	4315-4319	then	
38-18	4320-4321	“	
38-19	4321-4329	recycles	
38-20	4329-4330	”	
38-21	4331-4335	them	
38-22	4336-4338	by	
38-23	4339-4347	renaming	
38-24	4348-4364	no-longer-needed	
38-25	4365-4372	segment	
38-26	4373-4378	files	
38-27	4379-4381	to	
38-28	4382-4388	higher	
38-29	4389-4396	segment	
38-30	4397-4404	numbers	
38-31	4404-4405	.	

#Text=It's assumed that segment files whose contents precede the last checkpoint are no longer of interest and can be recycled.
39-1	4406-4410	It's	
39-2	4411-4418	assumed	
39-3	4419-4423	that	
39-4	4424-4431	segment	
39-5	4432-4437	files	
39-6	4438-4443	whose	
39-7	4444-4452	contents	
39-8	4453-4460	precede	
39-9	4461-4464	the	
39-10	4465-4469	last	
39-11	4470-4480	checkpoint	
39-12	4481-4484	are	
39-13	4485-4487	no	
39-14	4488-4494	longer	
39-15	4495-4497	of	
39-16	4498-4506	interest	
39-17	4507-4510	and	
39-18	4511-4514	can	
39-19	4515-4517	be	
39-20	4518-4526	recycled	
39-21	4526-4527	.	

#Text=When archiving WAL data, we need to capture the contents of each segment file once it is filled, and save that data somewhere before the segment file is recycled for reuse.
40-1	4528-4532	When	
40-2	4533-4542	archiving	
40-3	4543-4546	WAL	
40-4	4547-4551	data	
40-5	4551-4552	,	
40-6	4553-4555	we	
40-7	4556-4560	need	
40-8	4561-4563	to	
40-9	4564-4571	capture	
40-10	4572-4575	the	
40-11	4576-4584	contents	
40-12	4585-4587	of	
40-13	4588-4592	each	
40-14	4593-4600	segment	
40-15	4601-4605	file	
40-16	4606-4610	once	
40-17	4611-4613	it	
40-18	4614-4616	is	
40-19	4617-4623	filled	
40-20	4623-4624	,	
40-21	4625-4628	and	
40-22	4629-4633	save	
40-23	4634-4638	that	
40-24	4639-4643	data	
40-25	4644-4653	somewhere	
40-26	4654-4660	before	
40-27	4661-4664	the	
40-28	4665-4672	segment	
40-29	4673-4677	file	
40-30	4678-4680	is	
40-31	4681-4689	recycled	
40-32	4690-4693	for	
40-33	4694-4699	reuse	
40-34	4699-4700	.	

#Text=Depending on the application and the available hardware, there could be many different ways of “saving the data somewhere”: we could copy the segment files to an NFS-mounted directory on another machine, write them onto a tape drive (ensuring that you have a way of identifying the original name of each file), or batch them together and burn them onto CDs, or something else entirely.
41-1	4701-4710	Depending	
41-2	4711-4713	on	
41-3	4714-4717	the	
41-4	4718-4729	application	
41-5	4730-4733	and	
41-6	4734-4737	the	
41-7	4738-4747	available	
41-8	4748-4756	hardware	
41-9	4756-4757	,	
41-10	4758-4763	there	
41-11	4764-4769	could	
41-12	4770-4772	be	
41-13	4773-4777	many	
41-14	4778-4787	different	
41-15	4788-4792	ways	
41-16	4793-4795	of	
41-17	4796-4797	“	
41-18	4797-4803	saving	
41-19	4804-4807	the	
41-20	4808-4812	data	
41-21	4813-4822	somewhere	
41-22	4822-4823	”	
41-23	4823-4824	:	
41-24	4825-4827	we	
41-25	4828-4833	could	
41-26	4834-4838	copy	
41-27	4839-4842	the	
41-28	4843-4850	segment	
41-29	4851-4856	files	
41-30	4857-4859	to	
41-31	4860-4862	an	
41-32	4863-4874	NFS-mounted	
41-33	4875-4884	directory	
41-34	4885-4887	on	
41-35	4888-4895	another	
41-36	4896-4903	machine	
41-37	4903-4904	,	
41-38	4905-4910	write	
41-39	4911-4915	them	
41-40	4916-4920	onto	
41-41	4921-4922	a	
41-42	4923-4927	tape	
41-43	4928-4933	drive	
41-44	4934-4935	(	
41-45	4935-4943	ensuring	
41-46	4944-4948	that	
41-47	4949-4952	you	
41-48	4953-4957	have	
41-49	4958-4959	a	
41-50	4960-4963	way	
41-51	4964-4966	of	
41-52	4967-4978	identifying	
41-53	4979-4982	the	
41-54	4983-4991	original	
41-55	4992-4996	name	
41-56	4997-4999	of	
41-57	5000-5004	each	
41-58	5005-5009	file	
41-59	5009-5010	)	
41-60	5010-5011	,	
41-61	5012-5014	or	
41-62	5015-5020	batch	
41-63	5021-5025	them	
41-64	5026-5034	together	
41-65	5035-5038	and	
41-66	5039-5043	burn	
41-67	5044-5048	them	
41-68	5049-5053	onto	
41-69	5054-5057	CDs	
41-70	5057-5058	,	
41-71	5059-5061	or	
41-72	5062-5071	something	
41-73	5072-5076	else	
41-74	5077-5085	entirely	
41-75	5085-5086	.	

#Text=To provide the database administrator with flexibility, PostgreSQL tries not to make any assumptions about how the archiving will be done.
42-1	5087-5089	To	
42-2	5090-5097	provide	
42-3	5098-5101	the	
42-4	5102-5110	database	
42-5	5111-5124	administrator	
42-6	5125-5129	with	
42-7	5130-5141	flexibility	
42-8	5141-5142	,	
42-9	5143-5153	PostgreSQL	
42-10	5154-5159	tries	
42-11	5160-5163	not	
42-12	5164-5166	to	
42-13	5167-5171	make	
42-14	5172-5175	any	
42-15	5176-5187	assumptions	
42-16	5188-5193	about	
42-17	5194-5197	how	
42-18	5198-5201	the	
42-19	5202-5211	archiving	
42-20	5212-5216	will	
42-21	5217-5219	be	
42-22	5220-5224	done	
42-23	5224-5225	.	

#Text=Instead, PostgreSQL lets the administrator specify a shell command to be executed to copy a completed segment file to wherever it needs to go.
43-1	5226-5233	Instead	
43-2	5233-5234	,	
43-3	5235-5245	PostgreSQL	
43-4	5246-5250	lets	
43-5	5251-5254	the	
43-6	5255-5268	administrator	
43-7	5269-5276	specify	
43-8	5277-5278	a	
43-9	5279-5284	shell	
43-10	5285-5292	command	
43-11	5293-5295	to	
43-12	5296-5298	be	
43-13	5299-5307	executed	
43-14	5308-5310	to	
43-15	5311-5315	copy	
43-16	5316-5317	a	
43-17	5318-5327	completed	
43-18	5328-5335	segment	
43-19	5336-5340	file	
43-20	5341-5343	to	
43-21	5344-5352	wherever	
43-22	5353-5355	it	
43-23	5356-5361	needs	
43-24	5362-5364	to	
43-25	5365-5367	go	
43-26	5367-5368	.	

#Text=The command could be as simple as a cp, or it could invoke a complex shell script — it's all up to you.
44-1	5369-5372	The	
44-2	5373-5380	command	
44-3	5381-5386	could	
44-4	5387-5389	be	
44-5	5390-5392	as	
44-6	5393-5399	simple	
44-7	5400-5402	as	
44-8	5403-5404	a	
44-9	5405-5407	cp	
44-10	5407-5408	,	
44-11	5409-5411	or	
44-12	5412-5414	it	
44-13	5415-5420	could	
44-14	5421-5427	invoke	
44-15	5428-5429	a	
44-16	5430-5437	complex	
44-17	5438-5443	shell	
44-18	5444-5450	script	
44-19	5451-5452	—	
44-20	5453-5457	it's	
44-21	5458-5461	all	
44-22	5462-5464	up	
44-23	5465-5467	to	
44-24	5468-5471	you	
44-25	5471-5472	.	

#Text=To enable WAL archiving, set the wal_level configuration parameter to replica or higher, archive_mode to on, and specify the shell command to use in the archive_command configuration parameter.
45-1	5473-5475	To	
45-2	5476-5482	enable	
45-3	5483-5486	WAL	
45-4	5487-5496	archiving	
45-5	5496-5497	,	
45-6	5498-5501	set	
45-7	5502-5505	the	
45-8	5506-5515	wal_level	
45-9	5516-5529	configuration	
45-10	5530-5539	parameter	
45-11	5540-5542	to	
45-12	5543-5550	replica	
45-13	5551-5553	or	
45-14	5554-5560	higher	
45-15	5560-5561	,	
45-16	5562-5574	archive_mode	
45-17	5575-5577	to	
45-18	5578-5580	on	
45-19	5580-5581	,	
45-20	5582-5585	and	
45-21	5586-5593	specify	
45-22	5594-5597	the	
45-23	5598-5603	shell	
45-24	5604-5611	command	
45-25	5612-5614	to	
45-26	5615-5618	use	
45-27	5619-5621	in	
45-28	5622-5625	the	
45-29	5626-5641	archive_command	
45-30	5642-5655	configuration	
45-31	5656-5665	parameter	
45-32	5665-5666	.	

#Text=In practice these settings will always be placed in the postgresql.conf file.
46-1	5667-5669	In	
46-2	5670-5678	practice	
46-3	5679-5684	these	
46-4	5685-5693	settings	
46-5	5694-5698	will	
46-6	5699-5705	always	
46-7	5706-5708	be	
46-8	5709-5715	placed	
46-9	5716-5718	in	
46-10	5719-5722	the	
46-11	5723-5738	postgresql.conf	
46-12	5739-5743	file	
46-13	5743-5744	.	

#Text=In archive_command, %p is replaced by the path name of the file to archive, while %f is replaced by only the file name.
47-1	5745-5747	In	
47-2	5748-5763	archive_command	
47-3	5763-5764	,	
47-4	5765-5766	%	
47-5	5766-5767	p	
47-6	5768-5770	is	
47-7	5771-5779	replaced	
47-8	5780-5782	by	
47-9	5783-5786	the	
47-10	5787-5791	path	
47-11	5792-5796	name	
47-12	5797-5799	of	
47-13	5800-5803	the	
47-14	5804-5808	file	
47-15	5809-5811	to	
47-16	5812-5819	archive	
47-17	5819-5820	,	
47-18	5821-5826	while	
47-19	5827-5828	%	
47-20	5828-5829	f	
47-21	5830-5832	is	
47-22	5833-5841	replaced	
47-23	5842-5844	by	
47-24	5845-5849	only	
47-25	5850-5853	the	
47-26	5854-5858	file	
47-27	5859-5863	name	
47-28	5863-5864	.	

#Text=(The path name is relative to the current working directory, i.e., the cluster's data directory.)
48-1	5865-5866	(	
48-2	5866-5869	The	
48-3	5870-5874	path	
48-4	5875-5879	name	
48-5	5880-5882	is	
48-6	5883-5891	relative	
48-7	5892-5894	to	
48-8	5895-5898	the	
48-9	5899-5906	current	
48-10	5907-5914	working	
48-11	5915-5924	directory	
48-12	5924-5925	,	
48-13	5926-5929	i.e	
48-14	5929-5930	.	
48-15	5930-5931	,	
48-16	5932-5935	the	
48-17	5936-5945	cluster's	
48-18	5946-5950	data	
48-19	5951-5960	directory	
48-20	5960-5961	.	
48-21	5961-5962	)	

#Text=Use %% if you need to embed an actual % character in the command.
49-1	5963-5966	Use	
49-2	5967-5968	%	
49-3	5968-5969	%	
49-4	5970-5972	if	
49-5	5973-5976	you	
49-6	5977-5981	need	
49-7	5982-5984	to	
49-8	5985-5990	embed	
49-9	5991-5993	an	
49-10	5994-6000	actual	
49-11	6001-6002	%	
49-12	6003-6012	character	
49-13	6013-6015	in	
49-14	6016-6019	the	
49-15	6020-6027	command	
49-16	6027-6028	.	

#Text=The simplest useful command is something like:
#Text=archive_command = 'test !
50-1	6029-6032	The	
50-2	6033-6041	simplest	
50-3	6042-6048	useful	
50-4	6049-6056	command	
50-5	6057-6059	is	
50-6	6060-6069	something	
50-7	6070-6074	like	
50-8	6074-6075	:	
50-9	6076-6091	archive_command	
50-10	6092-6093	=	
50-11	6094-6095	'	
50-12	6095-6099	test	
50-13	6100-6101	!	

#Text=-f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
#Text=# Unix
#Text=archive_command = 'copy "%p" "C:\\\\server\\\\archivedir\\\\%f"'
#Text=# Windows
#Text=which will copy archivable WAL segments to the directory /mnt/server/archivedir.
51-1	6102-6103	-	
51-2	6103-6104	f	
51-3	6105-6106	/	
51-4	6106-6109	mnt	
51-5	6109-6110	/	
51-6	6110-6116	server	
51-7	6116-6117	/	
51-8	6117-6127	archivedir	
51-9	6127-6128	/	
51-10	6128-6129	%	
51-11	6129-6130	f	
51-12	6131-6132	&	
51-13	6132-6133	&	
51-14	6134-6136	cp	
51-15	6137-6138	%	
51-16	6138-6139	p	
51-17	6140-6141	/	
51-18	6141-6144	mnt	
51-19	6144-6145	/	
51-20	6145-6151	server	
51-21	6151-6152	/	
51-22	6152-6162	archivedir	
51-23	6162-6163	/	
51-24	6163-6164	%	
51-25	6164-6165	f	
51-26	6165-6166	'	
51-27	6167-6168	#	
51-28	6169-6173	Unix	
51-29	6174-6189	archive_command	
51-30	6190-6191	=	
51-31	6192-6193	'	
51-32	6193-6197	copy	
51-33	6198-6199	"	
51-34	6199-6200	%	
51-35	6200-6201	p	
51-36	6201-6202	"	
51-37	6203-6204	"	
51-38	6204-6205	C	
51-39	6205-6206	:	
51-40	6206-6207	\	
51-41	6207-6208	\	
51-42	6208-6214	server	
51-43	6214-6215	\	
51-44	6215-6216	\	
51-45	6216-6226	archivedir	
51-46	6226-6227	\	
51-47	6227-6228	\	
51-48	6228-6229	%	
51-49	6229-6230	f	
51-50	6230-6231	"	
51-51	6231-6232	'	
51-52	6233-6234	#	
51-53	6235-6242	Windows	
51-54	6243-6248	which	
51-55	6249-6253	will	
51-56	6254-6258	copy	
51-57	6259-6269	archivable	
51-58	6270-6273	WAL	
51-59	6274-6282	segments	
51-60	6283-6285	to	
51-61	6286-6289	the	
51-62	6290-6299	directory	
51-63	6300-6301	/	
51-64	6301-6304	mnt	
51-65	6304-6305	/	
51-66	6305-6311	server	
51-67	6311-6312	/	
51-68	6312-6322	archivedir	
51-69	6322-6323	.	

#Text=(This is an example, not a recommendation, and might not work on all platforms.)
52-1	6324-6325	(	
52-2	6325-6329	This	
52-3	6330-6332	is	
52-4	6333-6335	an	
52-5	6336-6343	example	
52-6	6343-6344	,	
52-7	6345-6348	not	
52-8	6349-6350	a	
52-9	6351-6365	recommendation	
52-10	6365-6366	,	
52-11	6367-6370	and	
52-12	6371-6376	might	
52-13	6377-6380	not	
52-14	6381-6385	work	
52-15	6386-6388	on	
52-16	6389-6392	all	
52-17	6393-6402	platforms	
52-18	6402-6403	.	
52-19	6403-6404	)	

#Text=After the %p and %f parameters have been replaced, the actual command executed might look like this:
#Text=test !
53-1	6405-6410	After	
53-2	6411-6414	the	
53-3	6415-6416	%	
53-4	6416-6417	p	
53-5	6418-6421	and	
53-6	6422-6423	%	
53-7	6423-6424	f	
53-8	6425-6435	parameters	
53-9	6436-6440	have	
53-10	6441-6445	been	
53-11	6446-6454	replaced	
53-12	6454-6455	,	
53-13	6456-6459	the	
53-14	6460-6466	actual	
53-15	6467-6474	command	
53-16	6475-6483	executed	
53-17	6484-6489	might	
53-18	6490-6494	look	
53-19	6495-6499	like	
53-20	6500-6504	this	
53-21	6504-6505	:	
53-22	6506-6510	test	
53-23	6511-6512	!	

#Text=-f /mnt/server/archivedir/00000001000000A900000065 && cp pg_wal/00000001000000A900000065 /mnt/server/archivedir/00000001000000A900000065
#Text=A similar command will be generated for each new file to be archived.
54-1	6513-6514	-	
54-2	6514-6515	f	
54-3	6516-6517	/	
54-4	6517-6520	mnt	
54-5	6520-6521	/	
54-6	6521-6527	server	
54-7	6527-6528	/	
54-8	6528-6538	archivedir	
54-9	6538-6539	/	
54-10	6539-6563	00000001000000A900000065	
54-11	6564-6565	&	
54-12	6565-6566	&	
54-13	6567-6569	cp	
54-14	6570-6576	pg_wal	
54-15	6576-6577	/	
54-16	6577-6601	00000001000000A900000065	
54-17	6602-6603	/	
54-18	6603-6606	mnt	
54-19	6606-6607	/	
54-20	6607-6613	server	
54-21	6613-6614	/	
54-22	6614-6624	archivedir	
54-23	6624-6625	/	
54-24	6625-6649	00000001000000A900000065	
54-25	6650-6651	A	
54-26	6652-6659	similar	
54-27	6660-6667	command	
54-28	6668-6672	will	
54-29	6673-6675	be	
54-30	6676-6685	generated	
54-31	6686-6689	for	
54-32	6690-6694	each	
54-33	6695-6698	new	
54-34	6699-6703	file	
54-35	6704-6706	to	
54-36	6707-6709	be	
54-37	6710-6718	archived	
54-38	6718-6719	.	

#Text=The archive command will be executed under the ownership of the same user that the PostgreSQL server is running as.
55-1	6720-6723	The	
55-2	6724-6731	archive	
55-3	6732-6739	command	
55-4	6740-6744	will	
55-5	6745-6747	be	
55-6	6748-6756	executed	
55-7	6757-6762	under	
55-8	6763-6766	the	
55-9	6767-6776	ownership	
55-10	6777-6779	of	
55-11	6780-6783	the	
55-12	6784-6788	same	
55-13	6789-6793	user	
55-14	6794-6798	that	
55-15	6799-6802	the	
55-16	6803-6813	PostgreSQL	
55-17	6814-6820	server	
55-18	6821-6823	is	
55-19	6824-6831	running	
55-20	6832-6834	as	
55-21	6834-6835	.	

#Text=Since the series of WAL files being archived contains effectively everything in your database, you will want to be sure that the archived data is protected from prying eyes; for example, archive into a directory that does not have group or world read access.
56-1	6836-6841	Since	
56-2	6842-6845	the	
56-3	6846-6852	series	
56-4	6853-6855	of	
56-5	6856-6859	WAL	
56-6	6860-6865	files	
56-7	6866-6871	being	
56-8	6872-6880	archived	
56-9	6881-6889	contains	
56-10	6890-6901	effectively	
56-11	6902-6912	everything	
56-12	6913-6915	in	
56-13	6916-6920	your	
56-14	6921-6929	database	
56-15	6929-6930	,	
56-16	6931-6934	you	
56-17	6935-6939	will	
56-18	6940-6944	want	
56-19	6945-6947	to	
56-20	6948-6950	be	
56-21	6951-6955	sure	
56-22	6956-6960	that	
56-23	6961-6964	the	
56-24	6965-6973	archived	
56-25	6974-6978	data	
56-26	6979-6981	is	
56-27	6982-6991	protected	
56-28	6992-6996	from	
56-29	6997-7003	prying	
56-30	7004-7008	eyes	
56-31	7008-7009	;	
56-32	7010-7013	for	
56-33	7014-7021	example	
56-34	7021-7022	,	
56-35	7023-7030	archive	
56-36	7031-7035	into	
56-37	7036-7037	a	
56-38	7038-7047	directory	
56-39	7048-7052	that	
56-40	7053-7057	does	
56-41	7058-7061	not	
56-42	7062-7066	have	
56-43	7067-7072	group	
56-44	7073-7075	or	
56-45	7076-7081	world	
56-46	7082-7086	read	
56-47	7087-7093	access	
56-48	7093-7094	.	

#Text=It is important that the archive command return zero exit status if and only if it succeeds.
57-1	7095-7097	It	
57-2	7098-7100	is	
57-3	7101-7110	important	
57-4	7111-7115	that	
57-5	7116-7119	the	
57-6	7120-7127	archive	
57-7	7128-7135	command	
57-8	7136-7142	return	
57-9	7143-7147	zero	
57-10	7148-7152	exit	
57-11	7153-7159	status	
57-12	7160-7162	if	
57-13	7163-7166	and	
57-14	7167-7171	only	
57-15	7172-7174	if	
57-16	7175-7177	it	
57-17	7178-7186	succeeds	
57-18	7186-7187	.	

#Text=Upon getting a zero result, PostgreSQL will assume that the file has been successfully archived, and will remove or recycle it.
58-1	7188-7192	Upon	
58-2	7193-7200	getting	
58-3	7201-7202	a	
58-4	7203-7207	zero	
58-5	7208-7214	result	
58-6	7214-7215	,	
58-7	7216-7226	PostgreSQL	
58-8	7227-7231	will	
58-9	7232-7238	assume	
58-10	7239-7243	that	
58-11	7244-7247	the	
58-12	7248-7252	file	
58-13	7253-7256	has	
58-14	7257-7261	been	
58-15	7262-7274	successfully	
58-16	7275-7283	archived	
58-17	7283-7284	,	
58-18	7285-7288	and	
58-19	7289-7293	will	
58-20	7294-7300	remove	
58-21	7301-7303	or	
58-22	7304-7311	recycle	
58-23	7312-7314	it	
58-24	7314-7315	.	

#Text=However, a nonzero status tells PostgreSQL that the file was not archived; it will try again periodically until it succeeds.
59-1	7316-7323	However	
59-2	7323-7324	,	
59-3	7325-7326	a	
59-4	7327-7334	nonzero	
59-5	7335-7341	status	
59-6	7342-7347	tells	
59-7	7348-7358	PostgreSQL	
59-8	7359-7363	that	
59-9	7364-7367	the	
59-10	7368-7372	file	
59-11	7373-7376	was	
59-12	7377-7380	not	
59-13	7381-7389	archived	
59-14	7389-7390	;	
59-15	7391-7393	it	
59-16	7394-7398	will	
59-17	7399-7402	try	
59-18	7403-7408	again	
59-19	7409-7421	periodically	
59-20	7422-7427	until	
59-21	7428-7430	it	
59-22	7431-7439	succeeds	
59-23	7439-7440	.	

#Text=The archive command should generally be designed to refuse to overwrite any pre-existing archive file.
60-1	7441-7444	The	
60-2	7445-7452	archive	
60-3	7453-7460	command	
60-4	7461-7467	should	
60-5	7468-7477	generally	
60-6	7478-7480	be	
60-7	7481-7489	designed	
60-8	7490-7492	to	
60-9	7493-7499	refuse	
60-10	7500-7502	to	
60-11	7503-7512	overwrite	
60-12	7513-7516	any	
60-13	7517-7529	pre-existing	
60-14	7530-7537	archive	
60-15	7538-7542	file	
60-16	7542-7543	.	

#Text=This is an important safety feature to preserve the integrity of your archive in case of administrator error (such as sending the output of two different servers to the same archive directory).
61-1	7544-7548	This	
61-2	7549-7551	is	
61-3	7552-7554	an	
61-4	7555-7564	important	
61-5	7565-7571	safety	
61-6	7572-7579	feature	
61-7	7580-7582	to	
61-8	7583-7591	preserve	
61-9	7592-7595	the	
61-10	7596-7605	integrity	
61-11	7606-7608	of	
61-12	7609-7613	your	
61-13	7614-7621	archive	
61-14	7622-7624	in	
61-15	7625-7629	case	
61-16	7630-7632	of	
61-17	7633-7646	administrator	
61-18	7647-7652	error	
61-19	7653-7654	(	
61-20	7654-7658	such	
61-21	7659-7661	as	
61-22	7662-7669	sending	
61-23	7670-7673	the	
61-24	7674-7680	output	
61-25	7681-7683	of	
61-26	7684-7687	two	
61-27	7688-7697	different	
61-28	7698-7705	servers	
61-29	7706-7708	to	
61-30	7709-7712	the	
61-31	7713-7717	same	
61-32	7718-7725	archive	
61-33	7726-7735	directory	
61-34	7735-7736	)	
61-35	7736-7737	.	

#Text=It is advisable to test your proposed archive command to ensure that it indeed does not overwrite an existing file, and that it returns nonzero status in this case.
62-1	7738-7740	It	
62-2	7741-7743	is	
62-3	7744-7753	advisable	
62-4	7754-7756	to	
62-5	7757-7761	test	
62-6	7762-7766	your	
62-7	7767-7775	proposed	
62-8	7776-7783	archive	
62-9	7784-7791	command	
62-10	7792-7794	to	
62-11	7795-7801	ensure	
62-12	7802-7806	that	
62-13	7807-7809	it	
62-14	7810-7816	indeed	
62-15	7817-7821	does	
62-16	7822-7825	not	
62-17	7826-7835	overwrite	
62-18	7836-7838	an	
62-19	7839-7847	existing	
62-20	7848-7852	file	
62-21	7852-7853	,	
62-22	7854-7857	and	
62-23	7858-7862	that	
62-24	7863-7865	it	
62-25	7866-7873	returns	
62-26	7874-7881	nonzero	
62-27	7882-7888	status	
62-28	7889-7891	in	
62-29	7892-7896	this	
62-30	7897-7901	case	
62-31	7901-7902	.	

#Text=The example command above for Unix ensures this by including a separate test step.
63-1	7903-7906	The	
63-2	7907-7914	example	
63-3	7915-7922	command	
63-4	7923-7928	above	
63-5	7929-7932	for	
63-6	7933-7937	Unix	
63-7	7938-7945	ensures	
63-8	7946-7950	this	
63-9	7951-7953	by	
63-10	7954-7963	including	
63-11	7964-7965	a	
63-12	7966-7974	separate	
63-13	7975-7979	test	
63-14	7980-7984	step	
63-15	7984-7985	.	

#Text=On some Unix platforms, cp has switches such as -i that can be used to do the same thing less verbosely, but you should not rely on these without verifying that the right exit status is returned.
64-1	7986-7988	On	
64-2	7989-7993	some	
64-3	7994-7998	Unix	
64-4	7999-8008	platforms	
64-5	8008-8009	,	
64-6	8010-8012	cp	
64-7	8013-8016	has	
64-8	8017-8025	switches	
64-9	8026-8030	such	
64-10	8031-8033	as	
64-11	8034-8035	-	
64-12	8035-8036	i	
64-13	8037-8041	that	
64-14	8042-8045	can	
64-15	8046-8048	be	
64-16	8049-8053	used	
64-17	8054-8056	to	
64-18	8057-8059	do	
64-19	8060-8063	the	
64-20	8064-8068	same	
64-21	8069-8074	thing	
64-22	8075-8079	less	
64-23	8080-8089	verbosely	
64-24	8089-8090	,	
64-25	8091-8094	but	
64-26	8095-8098	you	
64-27	8099-8105	should	
64-28	8106-8109	not	
64-29	8110-8114	rely	
64-30	8115-8117	on	
64-31	8118-8123	these	
64-32	8124-8131	without	
64-33	8132-8141	verifying	
64-34	8142-8146	that	
64-35	8147-8150	the	
64-36	8151-8156	right	
64-37	8157-8161	exit	
64-38	8162-8168	status	
64-39	8169-8171	is	
64-40	8172-8180	returned	
64-41	8180-8181	.	

#Text=(In particular, GNU cp will return status zero when -i is used and the target file already exists, which is not the desired behavior.)
65-1	8182-8183	(	
65-2	8183-8185	In	
65-3	8186-8196	particular	
65-4	8196-8197	,	
65-5	8198-8201	GNU	
65-6	8202-8204	cp	
65-7	8205-8209	will	
65-8	8210-8216	return	
65-9	8217-8223	status	
65-10	8224-8228	zero	
65-11	8229-8233	when	
65-12	8234-8235	-	
65-13	8235-8236	i	
65-14	8237-8239	is	
65-15	8240-8244	used	
65-16	8245-8248	and	
65-17	8249-8252	the	
65-18	8253-8259	target	
65-19	8260-8264	file	
65-20	8265-8272	already	
65-21	8273-8279	exists	
65-22	8279-8280	,	
65-23	8281-8286	which	
65-24	8287-8289	is	
65-25	8290-8293	not	
65-26	8294-8297	the	
65-27	8298-8305	desired	
65-28	8306-8314	behavior	
65-29	8314-8315	.	
65-30	8315-8316	)	

#Text=While designing your archiving setup, consider what will happen if the archive command fails repeatedly because some aspect requires operator intervention or the archive runs out of space.
66-1	8317-8322	While	
66-2	8323-8332	designing	
66-3	8333-8337	your	
66-4	8338-8347	archiving	
66-5	8348-8353	setup	
66-6	8353-8354	,	
66-7	8355-8363	consider	
66-8	8364-8368	what	
66-9	8369-8373	will	
66-10	8374-8380	happen	
66-11	8381-8383	if	
66-12	8384-8387	the	
66-13	8388-8395	archive	
66-14	8396-8403	command	
66-15	8404-8409	fails	
66-16	8410-8420	repeatedly	
66-17	8421-8428	because	
66-18	8429-8433	some	
66-19	8434-8440	aspect	
66-20	8441-8449	requires	
66-21	8450-8458	operator	
66-22	8459-8471	intervention	
66-23	8472-8474	or	
66-24	8475-8478	the	
66-25	8479-8486	archive	
66-26	8487-8491	runs	
66-27	8492-8495	out	
66-28	8496-8498	of	
66-29	8499-8504	space	
66-30	8504-8505	.	

#Text=For example, this could occur if you write to tape without an autochanger; when the tape fills, nothing further can be archived until the tape is swapped.
67-1	8506-8509	For	
67-2	8510-8517	example	
67-3	8517-8518	,	
67-4	8519-8523	this	
67-5	8524-8529	could	
67-6	8530-8535	occur	
67-7	8536-8538	if	
67-8	8539-8542	you	
67-9	8543-8548	write	
67-10	8549-8551	to	
67-11	8552-8556	tape	
67-12	8557-8564	without	
67-13	8565-8567	an	
67-14	8568-8579	autochanger	
67-15	8579-8580	;	
67-16	8581-8585	when	
67-17	8586-8589	the	
67-18	8590-8594	tape	
67-19	8595-8600	fills	
67-20	8600-8601	,	
67-21	8602-8609	nothing	
67-22	8610-8617	further	
67-23	8618-8621	can	
67-24	8622-8624	be	
67-25	8625-8633	archived	
67-26	8634-8639	until	
67-27	8640-8643	the	
67-28	8644-8648	tape	
67-29	8649-8651	is	
67-30	8652-8659	swapped	
67-31	8659-8660	.	

#Text=You should ensure that any error condition or request to a human operator is reported appropriately so that the situation can be resolved reasonably quickly.
68-1	8661-8664	You	
68-2	8665-8671	should	
68-3	8672-8678	ensure	
68-4	8679-8683	that	
68-5	8684-8687	any	
68-6	8688-8693	error	
68-7	8694-8703	condition	
68-8	8704-8706	or	
68-9	8707-8714	request	
68-10	8715-8717	to	
68-11	8718-8719	a	
68-12	8720-8725	human	
68-13	8726-8734	operator	
68-14	8735-8737	is	
68-15	8738-8746	reported	
68-16	8747-8760	appropriately	
68-17	8761-8763	so	
68-18	8764-8768	that	
68-19	8769-8772	the	
68-20	8773-8782	situation	
68-21	8783-8786	can	
68-22	8787-8789	be	
68-23	8790-8798	resolved	
68-24	8799-8809	reasonably	
68-25	8810-8817	quickly	
68-26	8817-8818	.	

#Text=The pg_wal/ directory will continue to fill with WAL segment files until the situation is resolved.
69-1	8819-8822	The	
69-2	8823-8829	pg_wal	
69-3	8829-8830	/	
69-4	8831-8840	directory	
69-5	8841-8845	will	
69-6	8846-8854	continue	
69-7	8855-8857	to	
69-8	8858-8862	fill	
69-9	8863-8867	with	
69-10	8868-8871	WAL	
69-11	8872-8879	segment	
69-12	8880-8885	files	
69-13	8886-8891	until	
69-14	8892-8895	the	
69-15	8896-8905	situation	
69-16	8906-8908	is	
69-17	8909-8917	resolved	
69-18	8917-8918	.	

#Text=(If the file system containing pg_wal/ fills up, PostgreSQL will do a PANIC shutdown.
70-1	8919-8920	(	
70-2	8920-8922	If	
70-3	8923-8926	the	
70-4	8927-8931	file	
70-5	8932-8938	system	
70-6	8939-8949	containing	
70-7	8950-8956	pg_wal	
70-8	8956-8957	/	
70-9	8958-8963	fills	
70-10	8964-8966	up	
70-11	8966-8967	,	
70-12	8968-8978	PostgreSQL	
70-13	8979-8983	will	
70-14	8984-8986	do	
70-15	8987-8988	a	
70-16	8989-8994	PANIC	
70-17	8995-9003	shutdown	
70-18	9003-9004	.	

#Text=No committed transactions will be lost, but the database will remain offline until you free some space.)
71-1	9005-9007	No	
71-2	9008-9017	committed	
71-3	9018-9030	transactions	
71-4	9031-9035	will	
71-5	9036-9038	be	
71-6	9039-9043	lost	
71-7	9043-9044	,	
71-8	9045-9048	but	
71-9	9049-9052	the	
71-10	9053-9061	database	
71-11	9062-9066	will	
71-12	9067-9073	remain	
71-13	9074-9081	offline	
71-14	9082-9087	until	
71-15	9088-9091	you	
71-16	9092-9096	free	
71-17	9097-9101	some	
71-18	9102-9107	space	
71-19	9107-9108	.	
71-20	9108-9109	)	

#Text=The speed of the archiving command is unimportant as long as it can keep up with the average rate at which your server generates WAL data.
72-1	9110-9113	The	
72-2	9114-9119	speed	
72-3	9120-9122	of	
72-4	9123-9126	the	
72-5	9127-9136	archiving	
72-6	9137-9144	command	
72-7	9145-9147	is	
72-8	9148-9159	unimportant	
72-9	9160-9162	as	
72-10	9163-9167	long	
72-11	9168-9170	as	
72-12	9171-9173	it	
72-13	9174-9177	can	
72-14	9178-9182	keep	
72-15	9183-9185	up	
72-16	9186-9190	with	
72-17	9191-9194	the	
72-18	9195-9202	average	
72-19	9203-9207	rate	
72-20	9208-9210	at	
72-21	9211-9216	which	
72-22	9217-9221	your	
72-23	9222-9228	server	
72-24	9229-9238	generates	
72-25	9239-9242	WAL	
72-26	9243-9247	data	
72-27	9247-9248	.	

#Text=Normal operation continues even if the archiving process falls a little behind.
73-1	9249-9255	Normal	
73-2	9256-9265	operation	
73-3	9266-9275	continues	
73-4	9276-9280	even	
73-5	9281-9283	if	
73-6	9284-9287	the	
73-7	9288-9297	archiving	
73-8	9298-9305	process	
73-9	9306-9311	falls	
73-10	9312-9313	a	
73-11	9314-9320	little	
73-12	9321-9327	behind	
73-13	9327-9328	.	

#Text=If archiving falls significantly behind, this will increase the amount of data that would be lost in the event of a disaster.
74-1	9329-9331	If	
74-2	9332-9341	archiving	
74-3	9342-9347	falls	
74-4	9348-9361	significantly	
74-5	9362-9368	behind	
74-6	9368-9369	,	
74-7	9370-9374	this	
74-8	9375-9379	will	
74-9	9380-9388	increase	
74-10	9389-9392	the	
74-11	9393-9399	amount	
74-12	9400-9402	of	
74-13	9403-9407	data	
74-14	9408-9412	that	
74-15	9413-9418	would	
74-16	9419-9421	be	
74-17	9422-9426	lost	
74-18	9427-9429	in	
74-19	9430-9433	the	
74-20	9434-9439	event	
74-21	9440-9442	of	
74-22	9443-9444	a	
74-23	9445-9453	disaster	
74-24	9453-9454	.	

#Text=It will also mean that the pg_wal/ directory will contain large numbers of not-yet-archived segment files, which could eventually exceed available disk space.
75-1	9455-9457	It	
75-2	9458-9462	will	
75-3	9463-9467	also	
75-4	9468-9472	mean	
75-5	9473-9477	that	
75-6	9478-9481	the	
75-7	9482-9488	pg_wal	
75-8	9488-9489	/	
75-9	9490-9499	directory	
75-10	9500-9504	will	
75-11	9505-9512	contain	
75-12	9513-9518	large	
75-13	9519-9526	numbers	
75-14	9527-9529	of	
75-15	9530-9546	not-yet-archived	
75-16	9547-9554	segment	
75-17	9555-9560	files	
75-18	9560-9561	,	
75-19	9562-9567	which	
75-20	9568-9573	could	
75-21	9574-9584	eventually	
75-22	9585-9591	exceed	
75-23	9592-9601	available	
75-24	9602-9606	disk	
75-25	9607-9612	space	
75-26	9612-9613	.	

#Text=You are advised to monitor the archiving process to ensure that it is working as you intend.
76-1	9614-9617	You	
76-2	9618-9621	are	
76-3	9622-9629	advised	
76-4	9630-9632	to	
76-5	9633-9640	monitor	
76-6	9641-9644	the	
76-7	9645-9654	archiving	
76-8	9655-9662	process	
76-9	9663-9665	to	
76-10	9666-9672	ensure	
76-11	9673-9677	that	
76-12	9678-9680	it	
76-13	9681-9683	is	
76-14	9684-9691	working	
76-15	9692-9694	as	
76-16	9695-9698	you	
76-17	9699-9705	intend	
76-18	9705-9706	.	

#Text=In writing your archive command, you should assume that the file names to be archived can be up to 64 characters long and can contain any combination of ASCII letters, digits, and dots.
77-1	9707-9709	In	
77-2	9710-9717	writing	
77-3	9718-9722	your	
77-4	9723-9730	archive	
77-5	9731-9738	command	
77-6	9738-9739	,	
77-7	9740-9743	you	
77-8	9744-9750	should	
77-9	9751-9757	assume	
77-10	9758-9762	that	
77-11	9763-9766	the	
77-12	9767-9771	file	
77-13	9772-9777	names	
77-14	9778-9780	to	
77-15	9781-9783	be	
77-16	9784-9792	archived	
77-17	9793-9796	can	
77-18	9797-9799	be	
77-19	9800-9802	up	
77-20	9803-9805	to	
77-21	9806-9808	64	
77-22	9809-9819	characters	
77-23	9820-9824	long	
77-24	9825-9828	and	
77-25	9829-9832	can	
77-26	9833-9840	contain	
77-27	9841-9844	any	
77-28	9845-9856	combination	
77-29	9857-9859	of	
77-30	9860-9865	ASCII	
77-31	9866-9873	letters	
77-32	9873-9874	,	
77-33	9875-9881	digits	
77-34	9881-9882	,	
77-35	9883-9886	and	
77-36	9887-9891	dots	
77-37	9891-9892	.	

#Text=It is not necessary to preserve the original relative path (%p) but it is necessary to preserve the file name (%f).
78-1	9893-9895	It	
78-2	9896-9898	is	
78-3	9899-9902	not	
78-4	9903-9912	necessary	
78-5	9913-9915	to	
78-6	9916-9924	preserve	
78-7	9925-9928	the	
78-8	9929-9937	original	
78-9	9938-9946	relative	
78-10	9947-9951	path	
78-11	9952-9953	(	
78-12	9953-9954	%	
78-13	9954-9955	p	
78-14	9955-9956	)	
78-15	9957-9960	but	
78-16	9961-9963	it	
78-17	9964-9966	is	
78-18	9967-9976	necessary	
78-19	9977-9979	to	
78-20	9980-9988	preserve	
78-21	9989-9992	the	
78-22	9993-9997	file	
78-23	9998-10002	name	
78-24	10003-10004	(	
78-25	10004-10005	%	
78-26	10005-10006	f	
78-27	10006-10007	)	
78-28	10007-10008	.	

#Text=Note that although WAL archiving will allow you to restore any modifications made to the data in your PostgreSQL database, it will not restore changes made to configuration files (that is, postgresql.conf, pg_hba.conf and pg_ident.conf), since those are edited manually rather than through SQL operations.
79-1	10009-10013	Note	
79-2	10014-10018	that	
79-3	10019-10027	although	
79-4	10028-10031	WAL	
79-5	10032-10041	archiving	
79-6	10042-10046	will	
79-7	10047-10052	allow	
79-8	10053-10056	you	
79-9	10057-10059	to	
79-10	10060-10067	restore	
79-11	10068-10071	any	
79-12	10072-10085	modifications	
79-13	10086-10090	made	
79-14	10091-10093	to	
79-15	10094-10097	the	
79-16	10098-10102	data	
79-17	10103-10105	in	
79-18	10106-10110	your	
79-19	10111-10121	PostgreSQL	
79-20	10122-10130	database	
79-21	10130-10131	,	
79-22	10132-10134	it	
79-23	10135-10139	will	
79-24	10140-10143	not	
79-25	10144-10151	restore	
79-26	10152-10159	changes	
79-27	10160-10164	made	
79-28	10165-10167	to	
79-29	10168-10181	configuration	
79-30	10182-10187	files	
79-31	10188-10189	(	
79-32	10189-10193	that	
79-33	10194-10196	is	
79-34	10196-10197	,	
79-35	10198-10213	postgresql.conf	
79-36	10213-10214	,	
79-37	10215-10226	pg_hba.conf	
79-38	10227-10230	and	
79-39	10231-10244	pg_ident.conf	
79-40	10244-10245	)	
79-41	10245-10246	,	
79-42	10247-10252	since	
79-43	10253-10258	those	
79-44	10259-10262	are	
79-45	10263-10269	edited	
79-46	10270-10278	manually	
79-47	10279-10285	rather	
79-48	10286-10290	than	
79-49	10291-10298	through	
79-50	10299-10302	SQL	
79-51	10303-10313	operations	
79-52	10313-10314	.	

#Text=You might wish to keep the configuration files in a location that will be backed up by your regular file system backup procedures.
80-1	10315-10318	You	
80-2	10319-10324	might	
80-3	10325-10329	wish	
80-4	10330-10332	to	
80-5	10333-10337	keep	
80-6	10338-10341	the	
80-7	10342-10355	configuration	
80-8	10356-10361	files	
80-9	10362-10364	in	
80-10	10365-10366	a	
80-11	10367-10375	location	
80-12	10376-10380	that	
80-13	10381-10385	will	
80-14	10386-10388	be	
80-15	10389-10395	backed	
80-16	10396-10398	up	
80-17	10399-10401	by	
80-18	10402-10406	your	
80-19	10407-10414	regular	
80-20	10415-10419	file	
80-21	10420-10426	system	
80-22	10427-10433	backup	
80-23	10434-10444	procedures	
80-24	10444-10445	.	

#Text=See Section 19.2 for how to relocate the configuration files.
81-1	10446-10449	See	
81-2	10450-10457	Section	
81-3	10457-10458	 	
81-4	10458-10462	19.2	
81-5	10463-10466	for	
81-6	10467-10470	how	
81-7	10471-10473	to	
81-8	10474-10482	relocate	
81-9	10483-10486	the	
81-10	10487-10500	configuration	
81-11	10501-10506	files	
81-12	10506-10507	.	

#Text=The archive command is only invoked on completed WAL segments.
82-1	10508-10511	The	
82-2	10512-10519	archive	
82-3	10520-10527	command	
82-4	10528-10530	is	
82-5	10531-10535	only	
82-6	10536-10543	invoked	
82-7	10544-10546	on	
82-8	10547-10556	completed	
82-9	10557-10560	WAL	
82-10	10561-10569	segments	
82-11	10569-10570	.	

#Text=Hence, if your server generates only little WAL traffic (or has slack periods where it does so), there could be a long delay between the completion of a transaction and its safe recording in archive storage.
83-1	10571-10576	Hence	
83-2	10576-10577	,	
83-3	10578-10580	if	
83-4	10581-10585	your	
83-5	10586-10592	server	
83-6	10593-10602	generates	
83-7	10603-10607	only	
83-8	10608-10614	little	
83-9	10615-10618	WAL	
83-10	10619-10626	traffic	
83-11	10627-10628	(	
83-12	10628-10630	or	
83-13	10631-10634	has	
83-14	10635-10640	slack	
83-15	10641-10648	periods	
83-16	10649-10654	where	
83-17	10655-10657	it	
83-18	10658-10662	does	
83-19	10663-10665	so	
83-20	10665-10666	)	
83-21	10666-10667	,	
83-22	10668-10673	there	
83-23	10674-10679	could	
83-24	10680-10682	be	
83-25	10683-10684	a	
83-26	10685-10689	long	
83-27	10690-10695	delay	
83-28	10696-10703	between	
83-29	10704-10707	the	
83-30	10708-10718	completion	
83-31	10719-10721	of	
83-32	10722-10723	a	
83-33	10724-10735	transaction	
83-34	10736-10739	and	
83-35	10740-10743	its	
83-36	10744-10748	safe	
83-37	10749-10758	recording	
83-38	10759-10761	in	
83-39	10762-10769	archive	
83-40	10770-10777	storage	
83-41	10777-10778	.	

#Text=To put a limit on how old unarchived data can be, you can set archive_timeout to force the server to switch to a new WAL segment file at least that often.
84-1	10779-10781	To	
84-2	10782-10785	put	
84-3	10786-10787	a	
84-4	10788-10793	limit	
84-5	10794-10796	on	
84-6	10797-10800	how	
84-7	10801-10804	old	
84-8	10805-10815	unarchived	
84-9	10816-10820	data	
84-10	10821-10824	can	
84-11	10825-10827	be	
84-12	10827-10828	,	
84-13	10829-10832	you	
84-14	10833-10836	can	
84-15	10837-10840	set	
84-16	10841-10856	archive_timeout	
84-17	10857-10859	to	
84-18	10860-10865	force	
84-19	10866-10869	the	
84-20	10870-10876	server	
84-21	10877-10879	to	
84-22	10880-10886	switch	
84-23	10887-10889	to	
84-24	10890-10891	a	
84-25	10892-10895	new	
84-26	10896-10899	WAL	
84-27	10900-10907	segment	
84-28	10908-10912	file	
84-29	10913-10915	at	
84-30	10916-10921	least	
84-31	10922-10926	that	
84-32	10927-10932	often	
84-33	10932-10933	.	

#Text=Note that archived files that are archived early due to a forced switch are still the same length as completely full files.
85-1	10934-10938	Note	
85-2	10939-10943	that	
85-3	10944-10952	archived	
85-4	10953-10958	files	
85-5	10959-10963	that	
85-6	10964-10967	are	
85-7	10968-10976	archived	
85-8	10977-10982	early	
85-9	10983-10986	due	
85-10	10987-10989	to	
85-11	10990-10991	a	
85-12	10992-10998	forced	
85-13	10999-11005	switch	
85-14	11006-11009	are	
85-15	11010-11015	still	
85-16	11016-11019	the	
85-17	11020-11024	same	
85-18	11025-11031	length	
85-19	11032-11034	as	
85-20	11035-11045	completely	
85-21	11046-11050	full	
85-22	11051-11056	files	
85-23	11056-11057	.	

#Text=It is therefore unwise to set a very short archive_timeout — it will bloat your archive storage. archive_timeout settings of a minute or so are usually reasonable.
86-1	11058-11060	It	
86-2	11061-11063	is	
86-3	11064-11073	therefore	
86-4	11074-11080	unwise	
86-5	11081-11083	to	
86-6	11084-11087	set	
86-7	11088-11089	a	
86-8	11090-11094	very	
86-9	11095-11100	short	
86-10	11101-11116	archive_timeout	
86-11	11117-11118	—	
86-12	11119-11121	it	
86-13	11122-11126	will	
86-14	11127-11132	bloat	
86-15	11133-11137	your	
86-16	11138-11145	archive	
86-17	11146-11153	storage	
86-18	11153-11154	.	
86-19	11155-11170	archive_timeout	
86-20	11171-11179	settings	
86-21	11180-11182	of	
86-22	11183-11184	a	
86-23	11185-11191	minute	
86-24	11192-11194	or	
86-25	11195-11197	so	
86-26	11198-11201	are	
86-27	11202-11209	usually	
86-28	11210-11220	reasonable	
86-29	11220-11221	.	

#Text=Also, you can force a segment switch manually with pg_switch_wal if you want to ensure that a just-finished transaction is archived as soon as possible.
87-1	11222-11226	Also	
87-2	11226-11227	,	
87-3	11228-11231	you	
87-4	11232-11235	can	
87-5	11236-11241	force	
87-6	11242-11243	a	
87-7	11244-11251	segment	
87-8	11252-11258	switch	
87-9	11259-11267	manually	
87-10	11268-11272	with	
87-11	11273-11286	pg_switch_wal	
87-12	11287-11289	if	
87-13	11290-11293	you	
87-14	11294-11298	want	
87-15	11299-11301	to	
87-16	11302-11308	ensure	
87-17	11309-11313	that	
87-18	11314-11315	a	
87-19	11316-11329	just-finished	
87-20	11330-11341	transaction	
87-21	11342-11344	is	
87-22	11345-11353	archived	
87-23	11354-11356	as	
87-24	11357-11361	soon	
87-25	11362-11364	as	
87-26	11365-11373	possible	
87-27	11373-11374	.	

#Text=Other utility functions related to WAL management are listed in Table 9.84.
88-1	11375-11380	Other	
88-2	11381-11388	utility	
88-3	11389-11398	functions	
88-4	11399-11406	related	
88-5	11407-11409	to	
88-6	11410-11413	WAL	
88-7	11414-11424	management	
88-8	11425-11428	are	
88-9	11429-11435	listed	
88-10	11436-11438	in	
88-11	11439-11444	Table	
88-12	11444-11445	 	
88-13	11445-11449	9.84	
88-14	11449-11450	.	

#Text=When wal_level is minimal some SQL commands are optimized to avoid WAL logging, as described in Section 14.4.7.
89-1	11451-11455	When	
89-2	11456-11465	wal_level	
89-3	11466-11468	is	
89-4	11469-11476	minimal	
89-5	11477-11481	some	
89-6	11482-11485	SQL	
89-7	11486-11494	commands	
89-8	11495-11498	are	
89-9	11499-11508	optimized	
89-10	11509-11511	to	
89-11	11512-11517	avoid	
89-12	11518-11521	WAL	
89-13	11522-11529	logging	
89-14	11529-11530	,	
89-15	11531-11533	as	
89-16	11534-11543	described	
89-17	11544-11546	in	
89-18	11547-11554	Section	
89-19	11554-11555	 	
89-20	11555-11561	14.4.7	
89-21	11561-11562	.	

#Text=If archiving or streaming replication were turned on during execution of one of these statements, WAL would not contain enough information for archive recovery.
90-1	11563-11565	If	
90-2	11566-11575	archiving	
90-3	11576-11578	or	
90-4	11579-11588	streaming	
90-5	11589-11600	replication	
90-6	11601-11605	were	
90-7	11606-11612	turned	
90-8	11613-11615	on	
90-9	11616-11622	during	
90-10	11623-11632	execution	
90-11	11633-11635	of	
90-12	11636-11639	one	
90-13	11640-11642	of	
90-14	11643-11648	these	
90-15	11649-11659	statements	
90-16	11659-11660	,	
90-17	11661-11664	WAL	
90-18	11665-11670	would	
90-19	11671-11674	not	
90-20	11675-11682	contain	
90-21	11683-11689	enough	
90-22	11690-11701	information	
90-23	11702-11705	for	
90-24	11706-11713	archive	
90-25	11714-11722	recovery	
90-26	11722-11723	.	

#Text=(Crash recovery is unaffected.)
91-1	11724-11725	(	
91-2	11725-11730	Crash	
91-3	11731-11739	recovery	
91-4	11740-11742	is	
91-5	11743-11753	unaffected	
91-6	11753-11754	.	
91-7	11754-11755	)	

#Text=For this reason, wal_level can only be changed at server start.
92-1	11756-11759	For	
92-2	11760-11764	this	
92-3	11765-11771	reason	
92-4	11771-11772	,	
92-5	11773-11782	wal_level	
92-6	11783-11786	can	
92-7	11787-11791	only	
92-8	11792-11794	be	
92-9	11795-11802	changed	
92-10	11803-11805	at	
92-11	11806-11812	server	
92-12	11813-11818	start	
92-13	11818-11819	.	

#Text=However, archive_command can be changed with a configuration file reload.
93-1	11820-11827	However	
93-2	11827-11828	,	
93-3	11829-11844	archive_command	
93-4	11845-11848	can	
93-5	11849-11851	be	
93-6	11852-11859	changed	
93-7	11860-11864	with	
93-8	11865-11866	a	
93-9	11867-11880	configuration	
93-10	11881-11885	file	
93-11	11886-11892	reload	
93-12	11892-11893	.	

#Text=If you wish to temporarily stop archiving, one way to do it is to set archive_command to the empty string ('').
94-1	11894-11896	If	
94-2	11897-11900	you	
94-3	11901-11905	wish	
94-4	11906-11908	to	
94-5	11909-11920	temporarily	
94-6	11921-11925	stop	
94-7	11926-11935	archiving	
94-8	11935-11936	,	
94-9	11937-11940	one	
94-10	11941-11944	way	
94-11	11945-11947	to	
94-12	11948-11950	do	
94-13	11951-11953	it	
94-14	11954-11956	is	
94-15	11957-11959	to	
94-16	11960-11963	set	
94-17	11964-11979	archive_command	
94-18	11980-11982	to	
94-19	11983-11986	the	
94-20	11987-11992	empty	
94-21	11993-11999	string	
94-22	12000-12001	(	
94-23	12001-12002	'	
94-24	12002-12003	'	
94-25	12003-12004	)	
94-26	12004-12005	.	

#Text=This will cause WAL files to accumulate in pg_wal/ until a working archive_command is re-established.
#Text=25.3.2. 
95-1	12006-12010	This	
95-2	12011-12015	will	
95-3	12016-12021	cause	
95-4	12022-12025	WAL	
95-5	12026-12031	files	
95-6	12032-12034	to	
95-7	12035-12045	accumulate	
95-8	12046-12048	in	
95-9	12049-12055	pg_wal	
95-10	12055-12056	/	
95-11	12057-12062	until	
95-12	12063-12064	a	
95-13	12065-12072	working	
95-14	12073-12088	archive_command	
95-15	12089-12091	is	
95-16	12092-12106	re-established	
95-17	12106-12107	.	
95-18	12108-12114	25.3.2	
95-19	12114-12115	.	
95-20	12115-12116	 	

#Text=Making a Base Backup
#Text=The easiest way to perform a base backup is to use the pg_basebackup tool.
96-1	12116-12122	Making	
96-2	12123-12124	a	
96-3	12125-12129	Base	
96-4	12130-12136	Backup	
96-5	12137-12140	The	
96-6	12141-12148	easiest	
96-7	12149-12152	way	
96-8	12153-12155	to	
96-9	12156-12163	perform	
96-10	12164-12165	a	
96-11	12166-12170	base	
96-12	12171-12177	backup	
96-13	12178-12180	is	
96-14	12181-12183	to	
96-15	12184-12187	use	
96-16	12188-12191	the	
96-17	12192-12205	pg_basebackup	
96-18	12206-12210	tool	
96-19	12210-12211	.	

#Text=It can create a base backup either as regular files or as a tar archive.
97-1	12212-12214	It	
97-2	12215-12218	can	
97-3	12219-12225	create	
97-4	12226-12227	a	
97-5	12228-12232	base	
97-6	12233-12239	backup	
97-7	12240-12246	either	
97-8	12247-12249	as	
97-9	12250-12257	regular	
97-10	12258-12263	files	
97-11	12264-12266	or	
97-12	12267-12269	as	
97-13	12270-12271	a	
97-14	12272-12275	tar	
97-15	12276-12283	archive	
97-16	12283-12284	.	

#Text=If more flexibility than pg_basebackup can provide is required, you can also make a base backup using the low level API (see Section 25.3.3).
98-1	12285-12287	If	
98-2	12288-12292	more	
98-3	12293-12304	flexibility	
98-4	12305-12309	than	
98-5	12310-12323	pg_basebackup	
98-6	12324-12327	can	
98-7	12328-12335	provide	
98-8	12336-12338	is	
98-9	12339-12347	required	
98-10	12347-12348	,	
98-11	12349-12352	you	
98-12	12353-12356	can	
98-13	12357-12361	also	
98-14	12362-12366	make	
98-15	12367-12368	a	
98-16	12369-12373	base	
98-17	12374-12380	backup	
98-18	12381-12386	using	
98-19	12387-12390	the	
98-20	12391-12394	low	
98-21	12395-12400	level	
98-22	12401-12404	API	
98-23	12405-12406	(	
98-24	12406-12409	see	
98-25	12410-12417	Section	
98-26	12417-12418	 	
98-27	12418-12424	25.3.3	
98-28	12424-12425	)	
98-29	12425-12426	.	

#Text=It is not necessary to be concerned about the amount of time it takes to make a base backup.
99-1	12427-12429	It	
99-2	12430-12432	is	
99-3	12433-12436	not	
99-4	12437-12446	necessary	
99-5	12447-12449	to	
99-6	12450-12452	be	
99-7	12453-12462	concerned	
99-8	12463-12468	about	
99-9	12469-12472	the	
99-10	12473-12479	amount	
99-11	12480-12482	of	
99-12	12483-12487	time	
99-13	12488-12490	it	
99-14	12491-12496	takes	
99-15	12497-12499	to	
99-16	12500-12504	make	
99-17	12505-12506	a	
99-18	12507-12511	base	
99-19	12512-12518	backup	
99-20	12518-12519	.	

#Text=However, if you normally run the server with full_page_writes disabled, you might notice a drop in performance while the backup runs since full_page_writes is effectively forced on during backup mode.
100-1	12520-12527	However	
100-2	12527-12528	,	
100-3	12529-12531	if	
100-4	12532-12535	you	
100-5	12536-12544	normally	
100-6	12545-12548	run	
100-7	12549-12552	the	
100-8	12553-12559	server	
100-9	12560-12564	with	
100-10	12565-12581	full_page_writes	
100-11	12582-12590	disabled	
100-12	12590-12591	,	
100-13	12592-12595	you	
100-14	12596-12601	might	
100-15	12602-12608	notice	
100-16	12609-12610	a	
100-17	12611-12615	drop	
100-18	12616-12618	in	
100-19	12619-12630	performance	
100-20	12631-12636	while	
100-21	12637-12640	the	
100-22	12641-12647	backup	
100-23	12648-12652	runs	
100-24	12653-12658	since	
100-25	12659-12675	full_page_writes	
100-26	12676-12678	is	
100-27	12679-12690	effectively	
100-28	12691-12697	forced	
100-29	12698-12700	on	
100-30	12701-12707	during	
100-31	12708-12714	backup	
100-32	12715-12719	mode	
100-33	12719-12720	.	

#Text=To make use of the backup, you will need to keep all the WAL segment files generated during and after the file system backup.
101-1	12721-12723	To	
101-2	12724-12728	make	
101-3	12729-12732	use	
101-4	12733-12735	of	
101-5	12736-12739	the	
101-6	12740-12746	backup	
101-7	12746-12747	,	
101-8	12748-12751	you	
101-9	12752-12756	will	
101-10	12757-12761	need	
101-11	12762-12764	to	
101-12	12765-12769	keep	
101-13	12770-12773	all	
101-14	12774-12777	the	
101-15	12778-12781	WAL	
101-16	12782-12789	segment	
101-17	12790-12795	files	
101-18	12796-12805	generated	
101-19	12806-12812	during	
101-20	12813-12816	and	
101-21	12817-12822	after	
101-22	12823-12826	the	
101-23	12827-12831	file	
101-24	12832-12838	system	
101-25	12839-12845	backup	
101-26	12845-12846	.	

#Text=To aid you in doing this, the base backup process creates a backup history file that is immediately stored into the WAL archive area.
102-1	12847-12849	To	
102-2	12850-12853	aid	
102-3	12854-12857	you	
102-4	12858-12860	in	
102-5	12861-12866	doing	
102-6	12867-12871	this	
102-7	12871-12872	,	
102-8	12873-12876	the	
102-9	12877-12881	base	
102-10	12882-12888	backup	
102-11	12889-12896	process	
102-12	12897-12904	creates	
102-13	12905-12906	a	
102-14	12907-12913	backup	
102-15	12914-12921	history	
102-16	12922-12926	file	
102-17	12927-12931	that	
102-18	12932-12934	is	
102-19	12935-12946	immediately	
102-20	12947-12953	stored	
102-21	12954-12958	into	
102-22	12959-12962	the	
102-23	12963-12966	WAL	
102-24	12967-12974	archive	
102-25	12975-12979	area	
102-26	12979-12980	.	

#Text=This file is named after the first WAL segment file that you need for the file system backup.
103-1	12981-12985	This	
103-2	12986-12990	file	
103-3	12991-12993	is	
103-4	12994-12999	named	
103-5	13000-13005	after	
103-6	13006-13009	the	
103-7	13010-13015	first	
103-8	13016-13019	WAL	
103-9	13020-13027	segment	
103-10	13028-13032	file	
103-11	13033-13037	that	
103-12	13038-13041	you	
103-13	13042-13046	need	
103-14	13047-13050	for	
103-15	13051-13054	the	
103-16	13055-13059	file	
103-17	13060-13066	system	
103-18	13067-13073	backup	
103-19	13073-13074	.	

#Text=For example, if the starting WAL file is 0000000100001234000055CD the backup history file will be named something like 0000000100001234000055CD.007C9330.backup.
104-1	13075-13078	For	
104-2	13079-13086	example	
104-3	13086-13087	,	
104-4	13088-13090	if	
104-5	13091-13094	the	
104-6	13095-13103	starting	
104-7	13104-13107	WAL	
104-8	13108-13112	file	
104-9	13113-13115	is	
104-10	13116-13140	0000000100001234000055CD	
104-11	13141-13144	the	
104-12	13145-13151	backup	
104-13	13152-13159	history	
104-14	13160-13164	file	
104-15	13165-13169	will	
104-16	13170-13172	be	
104-17	13173-13178	named	
104-18	13179-13188	something	
104-19	13189-13193	like	
104-20	13194-13218	0000000100001234000055CD	
104-21	13218-13227	.007C9330	
104-22	13227-13228	.	
104-23	13228-13234	backup	
104-24	13234-13235	.	

#Text=(The second part of the file name stands for an exact position within the WAL file, and can ordinarily be ignored.)
105-1	13236-13237	(	
105-2	13237-13240	The	
105-3	13241-13247	second	
105-4	13248-13252	part	
105-5	13253-13255	of	
105-6	13256-13259	the	
105-7	13260-13264	file	
105-8	13265-13269	name	
105-9	13270-13276	stands	
105-10	13277-13280	for	
105-11	13281-13283	an	
105-12	13284-13289	exact	
105-13	13290-13298	position	
105-14	13299-13305	within	
105-15	13306-13309	the	
105-16	13310-13313	WAL	
105-17	13314-13318	file	
105-18	13318-13319	,	
105-19	13320-13323	and	
105-20	13324-13327	can	
105-21	13328-13338	ordinarily	
105-22	13339-13341	be	
105-23	13342-13349	ignored	
105-24	13349-13350	.	
105-25	13350-13351	)	

#Text=Once you have safely archived the file system backup and the WAL segment files used during the backup (as specified in the backup history file), all archived WAL segments with names numerically less are no longer needed to recover the file system backup and can be deleted.
106-1	13352-13356	Once	
106-2	13357-13360	you	
106-3	13361-13365	have	
106-4	13366-13372	safely	
106-5	13373-13381	archived	
106-6	13382-13385	the	
106-7	13386-13390	file	
106-8	13391-13397	system	
106-9	13398-13404	backup	
106-10	13405-13408	and	
106-11	13409-13412	the	
106-12	13413-13416	WAL	
106-13	13417-13424	segment	
106-14	13425-13430	files	
106-15	13431-13435	used	
106-16	13436-13442	during	
106-17	13443-13446	the	
106-18	13447-13453	backup	
106-19	13454-13455	(	
106-20	13455-13457	as	
106-21	13458-13467	specified	
106-22	13468-13470	in	
106-23	13471-13474	the	
106-24	13475-13481	backup	
106-25	13482-13489	history	
106-26	13490-13494	file	
106-27	13494-13495	)	
106-28	13495-13496	,	
106-29	13497-13500	all	
106-30	13501-13509	archived	
106-31	13510-13513	WAL	
106-32	13514-13522	segments	
106-33	13523-13527	with	
106-34	13528-13533	names	
106-35	13534-13545	numerically	
106-36	13546-13550	less	
106-37	13551-13554	are	
106-38	13555-13557	no	
106-39	13558-13564	longer	
106-40	13565-13571	needed	
106-41	13572-13574	to	
106-42	13575-13582	recover	
106-43	13583-13586	the	
106-44	13587-13591	file	
106-45	13592-13598	system	
106-46	13599-13605	backup	
106-47	13606-13609	and	
106-48	13610-13613	can	
106-49	13614-13616	be	
106-50	13617-13624	deleted	
106-51	13624-13625	.	

#Text=However, you should consider keeping several backup sets to be absolutely certain that you can recover your data.
107-1	13626-13633	However	
107-2	13633-13634	,	
107-3	13635-13638	you	
107-4	13639-13645	should	
107-5	13646-13654	consider	
107-6	13655-13662	keeping	
107-7	13663-13670	several	
107-8	13671-13677	backup	
107-9	13678-13682	sets	
107-10	13683-13685	to	
107-11	13686-13688	be	
107-12	13689-13699	absolutely	
107-13	13700-13707	certain	
107-14	13708-13712	that	
107-15	13713-13716	you	
107-16	13717-13720	can	
107-17	13721-13728	recover	
107-18	13729-13733	your	
107-19	13734-13738	data	
107-20	13738-13739	.	

#Text=The backup history file is just a small text file.
108-1	13740-13743	The	
108-2	13744-13750	backup	
108-3	13751-13758	history	
108-4	13759-13763	file	
108-5	13764-13766	is	
108-6	13767-13771	just	
108-7	13772-13773	a	
108-8	13774-13779	small	
108-9	13780-13784	text	
108-10	13785-13789	file	
108-11	13789-13790	.	

#Text=It contains the label string you gave to pg_basebackup, as well as the starting and ending times and WAL segments of the backup.
109-1	13791-13793	It	
109-2	13794-13802	contains	
109-3	13803-13806	the	
109-4	13807-13812	label	
109-5	13813-13819	string	
109-6	13820-13823	you	
109-7	13824-13828	gave	
109-8	13829-13831	to	
109-9	13832-13845	pg_basebackup	
109-10	13845-13846	,	
109-11	13847-13849	as	
109-12	13850-13854	well	
109-13	13855-13857	as	
109-14	13858-13861	the	
109-15	13862-13870	starting	
109-16	13871-13874	and	
109-17	13875-13881	ending	
109-18	13882-13887	times	
109-19	13888-13891	and	
109-20	13892-13895	WAL	
109-21	13896-13904	segments	
109-22	13905-13907	of	
109-23	13908-13911	the	
109-24	13912-13918	backup	
109-25	13918-13919	.	

#Text=If you used the label to identify the associated dump file, then the archived history file is enough to tell you which dump file to restore.
110-1	13920-13922	If	
110-2	13923-13926	you	
110-3	13927-13931	used	
110-4	13932-13935	the	
110-5	13936-13941	label	
110-6	13942-13944	to	
110-7	13945-13953	identify	
110-8	13954-13957	the	
110-9	13958-13968	associated	
110-10	13969-13973	dump	
110-11	13974-13978	file	
110-12	13978-13979	,	
110-13	13980-13984	then	
110-14	13985-13988	the	
110-15	13989-13997	archived	
110-16	13998-14005	history	
110-17	14006-14010	file	
110-18	14011-14013	is	
110-19	14014-14020	enough	
110-20	14021-14023	to	
110-21	14024-14028	tell	
110-22	14029-14032	you	
110-23	14033-14038	which	
110-24	14039-14043	dump	
110-25	14044-14048	file	
110-26	14049-14051	to	
110-27	14052-14059	restore	
110-28	14059-14060	.	

#Text=Since you have to keep around all the archived WAL files back to your last base backup, the interval between base backups should usually be chosen based on how much storage you want to expend on archived WAL files.
111-1	14061-14066	Since	
111-2	14067-14070	you	
111-3	14071-14075	have	
111-4	14076-14078	to	
111-5	14079-14083	keep	
111-6	14084-14090	around	
111-7	14091-14094	all	
111-8	14095-14098	the	
111-9	14099-14107	archived	
111-10	14108-14111	WAL	
111-11	14112-14117	files	
111-12	14118-14122	back	
111-13	14123-14125	to	
111-14	14126-14130	your	
111-15	14131-14135	last	
111-16	14136-14140	base	
111-17	14141-14147	backup	
111-18	14147-14148	,	
111-19	14149-14152	the	
111-20	14153-14161	interval	
111-21	14162-14169	between	
111-22	14170-14174	base	
111-23	14175-14182	backups	
111-24	14183-14189	should	
111-25	14190-14197	usually	
111-26	14198-14200	be	
111-27	14201-14207	chosen	
111-28	14208-14213	based	
111-29	14214-14216	on	
111-30	14217-14220	how	
111-31	14221-14225	much	
111-32	14226-14233	storage	
111-33	14234-14237	you	
111-34	14238-14242	want	
111-35	14243-14245	to	
111-36	14246-14252	expend	
111-37	14253-14255	on	
111-38	14256-14264	archived	
111-39	14265-14268	WAL	
111-40	14269-14274	files	
111-41	14274-14275	.	

#Text=You should also consider how long you are prepared to spend recovering, if recovery should be necessary — the system will have to replay all those WAL segments, and that could take awhile if it has been a long time since the last base backup.
#Text=25.3.3. 
112-1	14276-14279	You	
112-2	14280-14286	should	
112-3	14287-14291	also	
112-4	14292-14300	consider	
112-5	14301-14304	how	
112-6	14305-14309	long	
112-7	14310-14313	you	
112-8	14314-14317	are	
112-9	14318-14326	prepared	
112-10	14327-14329	to	
112-11	14330-14335	spend	
112-12	14336-14346	recovering	
112-13	14346-14347	,	
112-14	14348-14350	if	
112-15	14351-14359	recovery	
112-16	14360-14366	should	
112-17	14367-14369	be	
112-18	14370-14379	necessary	
112-19	14380-14381	—	
112-20	14382-14385	the	
112-21	14386-14392	system	
112-22	14393-14397	will	
112-23	14398-14402	have	
112-24	14403-14405	to	
112-25	14406-14412	replay	
112-26	14413-14416	all	
112-27	14417-14422	those	
112-28	14423-14426	WAL	
112-29	14427-14435	segments	
112-30	14435-14436	,	
112-31	14437-14440	and	
112-32	14441-14445	that	
112-33	14446-14451	could	
112-34	14452-14456	take	
112-35	14457-14463	awhile	
112-36	14464-14466	if	
112-37	14467-14469	it	
112-38	14470-14473	has	
112-39	14474-14478	been	
112-40	14479-14480	a	
112-41	14481-14485	long	
112-42	14486-14490	time	
112-43	14491-14496	since	
112-44	14497-14500	the	
112-45	14501-14505	last	
112-46	14506-14510	base	
112-47	14511-14517	backup	
112-48	14517-14518	.	
112-49	14519-14525	25.3.3	
112-50	14525-14526	.	
112-51	14526-14527	 	

#Text=Making a Base Backup Using the Low Level API
#Text=The procedure for making a base backup using the low level APIs contains a few more steps than the pg_basebackup method, but is relatively simple.
113-1	14527-14533	Making	
113-2	14534-14535	a	
113-3	14536-14540	Base	
113-4	14541-14547	Backup	
113-5	14548-14553	Using	
113-6	14554-14557	the	
113-7	14558-14561	Low	
113-8	14562-14567	Level	
113-9	14568-14571	API	
113-10	14572-14575	The	
113-11	14576-14585	procedure	
113-12	14586-14589	for	
113-13	14590-14596	making	
113-14	14597-14598	a	
113-15	14599-14603	base	
113-16	14604-14610	backup	
113-17	14611-14616	using	
113-18	14617-14620	the	
113-19	14621-14624	low	
113-20	14625-14630	level	
113-21	14631-14635	APIs	
113-22	14636-14644	contains	
113-23	14645-14646	a	
113-24	14647-14650	few	
113-25	14651-14655	more	
113-26	14656-14661	steps	
113-27	14662-14666	than	
113-28	14667-14670	the	
113-29	14671-14684	pg_basebackup	
113-30	14685-14691	method	
113-31	14691-14692	,	
113-32	14693-14696	but	
113-33	14697-14699	is	
113-34	14700-14710	relatively	
113-35	14711-14717	simple	
113-36	14717-14718	.	

#Text=It is very important that these steps are executed in sequence, and that the success of a step is verified before proceeding to the next step.
114-1	14719-14721	It	
114-2	14722-14724	is	
114-3	14725-14729	very	
114-4	14730-14739	important	
114-5	14740-14744	that	
114-6	14745-14750	these	
114-7	14751-14756	steps	
114-8	14757-14760	are	
114-9	14761-14769	executed	
114-10	14770-14772	in	
114-11	14773-14781	sequence	
114-12	14781-14782	,	
114-13	14783-14786	and	
114-14	14787-14791	that	
114-15	14792-14795	the	
114-16	14796-14803	success	
114-17	14804-14806	of	
114-18	14807-14808	a	
114-19	14809-14813	step	
114-20	14814-14816	is	
114-21	14817-14825	verified	
114-22	14826-14832	before	
114-23	14833-14843	proceeding	
114-24	14844-14846	to	
114-25	14847-14850	the	
114-26	14851-14855	next	
114-27	14856-14860	step	
114-28	14860-14861	.	

#Text=Low level base backups can be made in a non-exclusive or an exclusive way.
115-1	14862-14865	Low	
115-2	14866-14871	level	
115-3	14872-14876	base	
115-4	14877-14884	backups	
115-5	14885-14888	can	
115-6	14889-14891	be	
115-7	14892-14896	made	
115-8	14897-14899	in	
115-9	14900-14901	a	
115-10	14902-14915	non-exclusive	
115-11	14916-14918	or	
115-12	14919-14921	an	
115-13	14922-14931	exclusive	
115-14	14932-14935	way	
115-15	14935-14936	.	

#Text=The non-exclusive method is recommended and the exclusive one is deprecated and will eventually be removed.
#Text=25.3.3.1. 
116-1	14937-14940	The	
116-2	14941-14954	non-exclusive	
116-3	14955-14961	method	
116-4	14962-14964	is	
116-5	14965-14976	recommended	
116-6	14977-14980	and	
116-7	14981-14984	the	
116-8	14985-14994	exclusive	
116-9	14995-14998	one	
116-10	14999-15001	is	
116-11	15002-15012	deprecated	
116-12	15013-15016	and	
116-13	15017-15021	will	
116-14	15022-15032	eventually	
116-15	15033-15035	be	
116-16	15036-15043	removed	
116-17	15043-15044	.	
116-18	15045-15053	25.3.3.1	
116-19	15053-15054	.	
116-20	15054-15055	 	

#Text=Making a Non-Exclusive Low-Level Backup
#Text=A non-exclusive low level backup is one that allows other concurrent backups to be running (both those started using the same backup API and those started using pg_basebackup).
117-1	15055-15061	Making	
117-2	15062-15063	a	
117-3	15064-15077	Non-Exclusive	
117-4	15078-15087	Low-Level	
117-5	15088-15094	Backup	
117-6	15095-15096	A	
117-7	15097-15110	non-exclusive	
117-8	15111-15114	low	
117-9	15115-15120	level	
117-10	15121-15127	backup	
117-11	15128-15130	is	
117-12	15131-15134	one	
117-13	15135-15139	that	
117-14	15140-15146	allows	
117-15	15147-15152	other	
117-16	15153-15163	concurrent	
117-17	15164-15171	backups	
117-18	15172-15174	to	
117-19	15175-15177	be	
117-20	15178-15185	running	
117-21	15186-15187	(	
117-22	15187-15191	both	
117-23	15192-15197	those	
117-24	15198-15205	started	
117-25	15206-15211	using	
117-26	15212-15215	the	
117-27	15216-15220	same	
117-28	15221-15227	backup	
117-29	15228-15231	API	
117-30	15232-15235	and	
117-31	15236-15241	those	
117-32	15242-15249	started	
117-33	15250-15255	using	
117-34	15256-15269	pg_basebackup	
117-35	15269-15270	)	
117-36	15270-15271	.	

#Text=Ensure that WAL archiving is enabled and working.
118-1	15272-15278	Ensure	
118-2	15279-15283	that	
118-3	15284-15287	WAL	
118-4	15288-15297	archiving	
118-5	15298-15300	is	
118-6	15301-15308	enabled	
118-7	15309-15312	and	
118-8	15313-15320	working	
118-9	15320-15321	.	

#Text=Connect to the server (it does not matter which database) as a user with rights to run pg_start_backup (superuser, or a user who has been granted EXECUTE on the function) and issue the command:
#Text=SELECT pg_start_backup('label', false, false);
#Text=where label is any string you want to use to uniquely identify this backup operation.
119-1	15322-15329	Connect	
119-2	15330-15332	to	
119-3	15333-15336	the	
119-4	15337-15343	server	
119-5	15344-15345	(	
119-6	15345-15347	it	
119-7	15348-15352	does	
119-8	15353-15356	not	
119-9	15357-15363	matter	
119-10	15364-15369	which	
119-11	15370-15378	database	
119-12	15378-15379	)	
119-13	15380-15382	as	
119-14	15383-15384	a	
119-15	15385-15389	user	
119-16	15390-15394	with	
119-17	15395-15401	rights	
119-18	15402-15404	to	
119-19	15405-15408	run	
119-20	15409-15424	pg_start_backup	
119-21	15425-15426	(	
119-22	15426-15435	superuser	
119-23	15435-15436	,	
119-24	15437-15439	or	
119-25	15440-15441	a	
119-26	15442-15446	user	
119-27	15447-15450	who	
119-28	15451-15454	has	
119-29	15455-15459	been	
119-30	15460-15467	granted	
119-31	15468-15475	EXECUTE	
119-32	15476-15478	on	
119-33	15479-15482	the	
119-34	15483-15491	function	
119-35	15491-15492	)	
119-36	15493-15496	and	
119-37	15497-15502	issue	
119-38	15503-15506	the	
119-39	15507-15514	command	
119-40	15514-15515	:	
119-41	15516-15522	SELECT	
119-42	15523-15538	pg_start_backup	
119-43	15538-15539	(	
119-44	15539-15540	'	
119-45	15540-15545	label	
119-46	15545-15546	'	
119-47	15546-15547	,	
119-48	15548-15553	false	
119-49	15553-15554	,	
119-50	15555-15560	false	
119-51	15560-15561	)	
119-52	15561-15562	;	
119-53	15563-15568	where	
119-54	15569-15574	label	
119-55	15575-15577	is	
119-56	15578-15581	any	
119-57	15582-15588	string	
119-58	15589-15592	you	
119-59	15593-15597	want	
119-60	15598-15600	to	
119-61	15601-15604	use	
119-62	15605-15607	to	
119-63	15608-15616	uniquely	
119-64	15617-15625	identify	
119-65	15626-15630	this	
119-66	15631-15637	backup	
119-67	15638-15647	operation	
119-68	15647-15648	.	

#Text=The connection calling pg_start_backup must be maintained until the end of the backup, or the backup will be automatically aborted.
120-1	15649-15652	The	
120-2	15653-15663	connection	
120-3	15664-15671	calling	
120-4	15672-15687	pg_start_backup	
120-5	15688-15692	must	
120-6	15693-15695	be	
120-7	15696-15706	maintained	
120-8	15707-15712	until	
120-9	15713-15716	the	
120-10	15717-15720	end	
120-11	15721-15723	of	
120-12	15724-15727	the	
120-13	15728-15734	backup	
120-14	15734-15735	,	
120-15	15736-15738	or	
120-16	15739-15742	the	
120-17	15743-15749	backup	
120-18	15750-15754	will	
120-19	15755-15757	be	
120-20	15758-15771	automatically	
120-21	15772-15779	aborted	
120-22	15779-15780	.	

#Text=By default, pg_start_backup can take a long time to finish.
121-1	15781-15783	By	
121-2	15784-15791	default	
121-3	15791-15792	,	
121-4	15793-15808	pg_start_backup	
121-5	15809-15812	can	
121-6	15813-15817	take	
121-7	15818-15819	a	
121-8	15820-15824	long	
121-9	15825-15829	time	
121-10	15830-15832	to	
121-11	15833-15839	finish	
121-12	15839-15840	.	

#Text=This is because it performs a checkpoint, and the I/O required for the checkpoint will be spread out over a significant period of time, by default half your inter-checkpoint interval (see the configuration parameter checkpoint_completion_target).
122-1	15841-15845	This	
122-2	15846-15848	is	
122-3	15849-15856	because	
122-4	15857-15859	it	
122-5	15860-15868	performs	
122-6	15869-15870	a	
122-7	15871-15881	checkpoint	
122-8	15881-15882	,	
122-9	15883-15886	and	
122-10	15887-15890	the	
122-11	15891-15892	I	
122-12	15892-15893	/	
122-13	15893-15894	O	
122-14	15895-15903	required	
122-15	15904-15907	for	
122-16	15908-15911	the	
122-17	15912-15922	checkpoint	
122-18	15923-15927	will	
122-19	15928-15930	be	
122-20	15931-15937	spread	
122-21	15938-15941	out	
122-22	15942-15946	over	
122-23	15947-15948	a	
122-24	15949-15960	significant	
122-25	15961-15967	period	
122-26	15968-15970	of	
122-27	15971-15975	time	
122-28	15975-15976	,	
122-29	15977-15979	by	
122-30	15980-15987	default	
122-31	15988-15992	half	
122-32	15993-15997	your	
122-33	15998-16014	inter-checkpoint	
122-34	16015-16023	interval	
122-35	16024-16025	(	
122-36	16025-16028	see	
122-37	16029-16032	the	
122-38	16033-16046	configuration	
122-39	16047-16056	parameter	
122-40	16057-16085	checkpoint_completion_target	
122-41	16085-16086	)	
122-42	16086-16087	.	

#Text=This is usually what you want, because it minimizes the impact on query processing.
123-1	16088-16092	This	
123-2	16093-16095	is	
123-3	16096-16103	usually	
123-4	16104-16108	what	
123-5	16109-16112	you	
123-6	16113-16117	want	
123-7	16117-16118	,	
123-8	16119-16126	because	
123-9	16127-16129	it	
123-10	16130-16139	minimizes	
123-11	16140-16143	the	
123-12	16144-16150	impact	
123-13	16151-16153	on	
123-14	16154-16159	query	
123-15	16160-16170	processing	
123-16	16170-16171	.	

#Text=If you want to start the backup as soon as possible, change the second parameter to true, which will issue an immediate checkpoint using as much I/O as available.
124-1	16172-16174	If	
124-2	16175-16178	you	
124-3	16179-16183	want	
124-4	16184-16186	to	
124-5	16187-16192	start	
124-6	16193-16196	the	
124-7	16197-16203	backup	
124-8	16204-16206	as	
124-9	16207-16211	soon	
124-10	16212-16214	as	
124-11	16215-16223	possible	
124-12	16223-16224	,	
124-13	16225-16231	change	
124-14	16232-16235	the	
124-15	16236-16242	second	
124-16	16243-16252	parameter	
124-17	16253-16255	to	
124-18	16256-16260	true	
124-19	16260-16261	,	
124-20	16262-16267	which	
124-21	16268-16272	will	
124-22	16273-16278	issue	
124-23	16279-16281	an	
124-24	16282-16291	immediate	
124-25	16292-16302	checkpoint	
124-26	16303-16308	using	
124-27	16309-16311	as	
124-28	16312-16316	much	
124-29	16317-16318	I	
124-30	16318-16319	/	
124-31	16319-16320	O	
124-32	16321-16323	as	
124-33	16324-16333	available	
124-34	16333-16334	.	

#Text=The third parameter being false tells pg_start_backup to initiate a non-exclusive base backup.
125-1	16335-16338	The	
125-2	16339-16344	third	
125-3	16345-16354	parameter	
125-4	16355-16360	being	
125-5	16361-16366	false	
125-6	16367-16372	tells	
125-7	16373-16388	pg_start_backup	
125-8	16389-16391	to	
125-9	16392-16400	initiate	
125-10	16401-16402	a	
125-11	16403-16416	non-exclusive	
125-12	16417-16421	base	
125-13	16422-16428	backup	
125-14	16428-16429	.	

#Text=Perform the backup, using any convenient file-system-backup tool such as tar or cpio (not pg_dump or pg_dumpall).
126-1	16430-16437	Perform	
126-2	16438-16441	the	
126-3	16442-16448	backup	
126-4	16448-16449	,	
126-5	16450-16455	using	
126-6	16456-16459	any	
126-7	16460-16470	convenient	
126-8	16471-16489	file-system-backup	
126-9	16490-16494	tool	
126-10	16495-16499	such	
126-11	16500-16502	as	
126-12	16503-16506	tar	
126-13	16507-16509	or	
126-14	16510-16514	cpio	
126-15	16515-16516	(	
126-16	16516-16519	not	
126-17	16520-16527	pg_dump	
126-18	16528-16530	or	
126-19	16531-16541	pg_dumpall	
126-20	16541-16542	)	
126-21	16542-16543	.	

#Text=It is neither necessary nor desirable to stop normal operation of the database while you do this.
127-1	16544-16546	It	
127-2	16547-16549	is	
127-3	16550-16557	neither	
127-4	16558-16567	necessary	
127-5	16568-16571	nor	
127-6	16572-16581	desirable	
127-7	16582-16584	to	
127-8	16585-16589	stop	
127-9	16590-16596	normal	
127-10	16597-16606	operation	
127-11	16607-16609	of	
127-12	16610-16613	the	
127-13	16614-16622	database	
127-14	16623-16628	while	
127-15	16629-16632	you	
127-16	16633-16635	do	
127-17	16636-16640	this	
127-18	16640-16641	.	

#Text=See Section 25.3.3.3 for things to consider during this backup.
128-1	16642-16645	See	
128-2	16646-16653	Section	
128-3	16653-16654	 	
128-4	16654-16662	25.3.3.3	
128-5	16663-16666	for	
128-6	16667-16673	things	
128-7	16674-16676	to	
128-8	16677-16685	consider	
128-9	16686-16692	during	
128-10	16693-16697	this	
128-11	16698-16704	backup	
128-12	16704-16705	.	

#Text=In the same connection as before, issue the command:
#Text=SELECT * FROM pg_stop_backup(false, true);
#Text=This terminates backup mode.
129-1	16706-16708	In	
129-2	16709-16712	the	
129-3	16713-16717	same	
129-4	16718-16728	connection	
129-5	16729-16731	as	
129-6	16732-16738	before	
129-7	16738-16739	,	
129-8	16740-16745	issue	
129-9	16746-16749	the	
129-10	16750-16757	command	
129-11	16757-16758	:	
129-12	16759-16765	SELECT	
129-13	16766-16767	*	
129-14	16768-16772	FROM	
129-15	16773-16787	pg_stop_backup	
129-16	16787-16788	(	
129-17	16788-16793	false	
129-18	16793-16794	,	
129-19	16795-16799	true	
129-20	16799-16800	)	
129-21	16800-16801	;	
129-22	16802-16806	This	
129-23	16807-16817	terminates	
129-24	16818-16824	backup	
129-25	16825-16829	mode	
129-26	16829-16830	.	

#Text=On a primary, it also performs an automatic switch to the next WAL segment.
130-1	16831-16833	On	
130-2	16834-16835	a	
130-3	16836-16843	primary	
130-4	16843-16844	,	
130-5	16845-16847	it	
130-6	16848-16852	also	
130-7	16853-16861	performs	
130-8	16862-16864	an	
130-9	16865-16874	automatic	
130-10	16875-16881	switch	
130-11	16882-16884	to	
130-12	16885-16888	the	
130-13	16889-16893	next	
130-14	16894-16897	WAL	
130-15	16898-16905	segment	
130-16	16905-16906	.	

#Text=On a standby, it is not possible to automatically switch WAL segments, so you may wish to run pg_switch_wal on the primary to perform a manual switch.
131-1	16907-16909	On	
131-2	16910-16911	a	
131-3	16912-16919	standby	
131-4	16919-16920	,	
131-5	16921-16923	it	
131-6	16924-16926	is	
131-7	16927-16930	not	
131-8	16931-16939	possible	
131-9	16940-16942	to	
131-10	16943-16956	automatically	
131-11	16957-16963	switch	
131-12	16964-16967	WAL	
131-13	16968-16976	segments	
131-14	16976-16977	,	
131-15	16978-16980	so	
131-16	16981-16984	you	
131-17	16985-16988	may	
131-18	16989-16993	wish	
131-19	16994-16996	to	
131-20	16997-17000	run	
131-21	17001-17014	pg_switch_wal	
131-22	17015-17017	on	
131-23	17018-17021	the	
131-24	17022-17029	primary	
131-25	17030-17032	to	
131-26	17033-17040	perform	
131-27	17041-17042	a	
131-28	17043-17049	manual	
131-29	17050-17056	switch	
131-30	17056-17057	.	

#Text=The reason for the switch is to arrange for the last WAL segment file written during the backup interval to be ready to archive.
132-1	17058-17061	The	
132-2	17062-17068	reason	
132-3	17069-17072	for	
132-4	17073-17076	the	
132-5	17077-17083	switch	
132-6	17084-17086	is	
132-7	17087-17089	to	
132-8	17090-17097	arrange	
132-9	17098-17101	for	
132-10	17102-17105	the	
132-11	17106-17110	last	
132-12	17111-17114	WAL	
132-13	17115-17122	segment	
132-14	17123-17127	file	
132-15	17128-17135	written	
132-16	17136-17142	during	
132-17	17143-17146	the	
132-18	17147-17153	backup	
132-19	17154-17162	interval	
132-20	17163-17165	to	
132-21	17166-17168	be	
132-22	17169-17174	ready	
132-23	17175-17177	to	
132-24	17178-17185	archive	
132-25	17185-17186	.	

#Text=The pg_stop_backup will return one row with three values.
133-1	17187-17190	The	
133-2	17191-17205	pg_stop_backup	
133-3	17206-17210	will	
133-4	17211-17217	return	
133-5	17218-17221	one	
133-6	17222-17225	row	
133-7	17226-17230	with	
133-8	17231-17236	three	
133-9	17237-17243	values	
133-10	17243-17244	.	

#Text=The second of these fields should be written to a file named backup_label in the root directory of the backup.
134-1	17245-17248	The	
134-2	17249-17255	second	
134-3	17256-17258	of	
134-4	17259-17264	these	
134-5	17265-17271	fields	
134-6	17272-17278	should	
134-7	17279-17281	be	
134-8	17282-17289	written	
134-9	17290-17292	to	
134-10	17293-17294	a	
134-11	17295-17299	file	
134-12	17300-17305	named	
134-13	17306-17318	backup_label	
134-14	17319-17321	in	
134-15	17322-17325	the	
134-16	17326-17330	root	
134-17	17331-17340	directory	
134-18	17341-17343	of	
134-19	17344-17347	the	
134-20	17348-17354	backup	
134-21	17354-17355	.	

#Text=The third field should be written to a file named tablespace_map unless the field is empty.
135-1	17356-17359	The	
135-2	17360-17365	third	
135-3	17366-17371	field	
135-4	17372-17378	should	
135-5	17379-17381	be	
135-6	17382-17389	written	
135-7	17390-17392	to	
135-8	17393-17394	a	
135-9	17395-17399	file	
135-10	17400-17405	named	
135-11	17406-17420	tablespace_map	
135-12	17421-17427	unless	
135-13	17428-17431	the	
135-14	17432-17437	field	
135-15	17438-17440	is	
135-16	17441-17446	empty	
135-17	17446-17447	.	

#Text=These files are vital to the backup working, and must be written without modification.
136-1	17448-17453	These	
136-2	17454-17459	files	
136-3	17460-17463	are	
136-4	17464-17469	vital	
136-5	17470-17472	to	
136-6	17473-17476	the	
136-7	17477-17483	backup	
136-8	17484-17491	working	
136-9	17491-17492	,	
136-10	17493-17496	and	
136-11	17497-17501	must	
136-12	17502-17504	be	
136-13	17505-17512	written	
136-14	17513-17520	without	
136-15	17521-17533	modification	
136-16	17533-17534	.	

#Text=Once the WAL segment files active during the backup are archived, you are done.
137-1	17535-17539	Once	
137-2	17540-17543	the	
137-3	17544-17547	WAL	
137-4	17548-17555	segment	
137-5	17556-17561	files	
137-6	17562-17568	active	
137-7	17569-17575	during	
137-8	17576-17579	the	
137-9	17580-17586	backup	
137-10	17587-17590	are	
137-11	17591-17599	archived	
137-12	17599-17600	,	
137-13	17601-17604	you	
137-14	17605-17608	are	
137-15	17609-17613	done	
137-16	17613-17614	.	

#Text=The file identified by pg_stop_backup's first return value is the last segment that is required to form a complete set of backup files.
138-1	17615-17618	The	
138-2	17619-17623	file	
138-3	17624-17634	identified	
138-4	17635-17637	by	
138-5	17638-17654	pg_stop_backup's	
138-6	17655-17660	first	
138-7	17661-17667	return	
138-8	17668-17673	value	
138-9	17674-17676	is	
138-10	17677-17680	the	
138-11	17681-17685	last	
138-12	17686-17693	segment	
138-13	17694-17698	that	
138-14	17699-17701	is	
138-15	17702-17710	required	
138-16	17711-17713	to	
138-17	17714-17718	form	
138-18	17719-17720	a	
138-19	17721-17729	complete	
138-20	17730-17733	set	
138-21	17734-17736	of	
138-22	17737-17743	backup	
138-23	17744-17749	files	
138-24	17749-17750	.	

#Text=On a primary, if archive_mode is enabled and the wait_for_archive parameter is true, pg_stop_backup does not return until the last segment has been archived.
139-1	17751-17753	On	
139-2	17754-17755	a	
139-3	17756-17763	primary	
139-4	17763-17764	,	
139-5	17765-17767	if	
139-6	17768-17780	archive_mode	
139-7	17781-17783	is	
139-8	17784-17791	enabled	
139-9	17792-17795	and	
139-10	17796-17799	the	
139-11	17800-17816	wait_for_archive	
139-12	17817-17826	parameter	
139-13	17827-17829	is	
139-14	17830-17834	true	
139-15	17834-17835	,	
139-16	17836-17850	pg_stop_backup	
139-17	17851-17855	does	
139-18	17856-17859	not	
139-19	17860-17866	return	
139-20	17867-17872	until	
139-21	17873-17876	the	
139-22	17877-17881	last	
139-23	17882-17889	segment	
139-24	17890-17893	has	
139-25	17894-17898	been	
139-26	17899-17907	archived	
139-27	17907-17908	.	

#Text=On a standby, archive_mode must be always in order for pg_stop_backup to wait.
140-1	17909-17911	On	
140-2	17912-17913	a	
140-3	17914-17921	standby	
140-4	17921-17922	,	
140-5	17923-17935	archive_mode	
140-6	17936-17940	must	
140-7	17941-17943	be	
140-8	17944-17950	always	
140-9	17951-17953	in	
140-10	17954-17959	order	
140-11	17960-17963	for	
140-12	17964-17978	pg_stop_backup	
140-13	17979-17981	to	
140-14	17982-17986	wait	
140-15	17986-17987	.	

#Text=Archiving of these files happens automatically since you have already configured archive_command.
141-1	17988-17997	Archiving	
141-2	17998-18000	of	
141-3	18001-18006	these	
141-4	18007-18012	files	
141-5	18013-18020	happens	
141-6	18021-18034	automatically	
141-7	18035-18040	since	
141-8	18041-18044	you	
141-9	18045-18049	have	
141-10	18050-18057	already	
141-11	18058-18068	configured	
141-12	18069-18084	archive_command	
141-13	18084-18085	.	

#Text=In most cases this happens quickly, but you are advised to monitor your archive system to ensure there are no delays.
142-1	18086-18088	In	
142-2	18089-18093	most	
142-3	18094-18099	cases	
142-4	18100-18104	this	
142-5	18105-18112	happens	
142-6	18113-18120	quickly	
142-7	18120-18121	,	
142-8	18122-18125	but	
142-9	18126-18129	you	
142-10	18130-18133	are	
142-11	18134-18141	advised	
142-12	18142-18144	to	
142-13	18145-18152	monitor	
142-14	18153-18157	your	
142-15	18158-18165	archive	
142-16	18166-18172	system	
142-17	18173-18175	to	
142-18	18176-18182	ensure	
142-19	18183-18188	there	
142-20	18189-18192	are	
142-21	18193-18195	no	
142-22	18196-18202	delays	
142-23	18202-18203	.	

#Text=If the archive process has fallen behind because of failures of the archive command, it will keep retrying until the archive succeeds and the backup is complete.
143-1	18204-18206	If	
143-2	18207-18210	the	
143-3	18211-18218	archive	
143-4	18219-18226	process	
143-5	18227-18230	has	
143-6	18231-18237	fallen	
143-7	18238-18244	behind	
143-8	18245-18252	because	
143-9	18253-18255	of	
143-10	18256-18264	failures	
143-11	18265-18267	of	
143-12	18268-18271	the	
143-13	18272-18279	archive	
143-14	18280-18287	command	
143-15	18287-18288	,	
143-16	18289-18291	it	
143-17	18292-18296	will	
143-18	18297-18301	keep	
143-19	18302-18310	retrying	
143-20	18311-18316	until	
143-21	18317-18320	the	
143-22	18321-18328	archive	
143-23	18329-18337	succeeds	
143-24	18338-18341	and	
143-25	18342-18345	the	
143-26	18346-18352	backup	
143-27	18353-18355	is	
143-28	18356-18364	complete	
143-29	18364-18365	.	

#Text=If you wish to place a time limit on the execution of pg_stop_backup, set an appropriate statement_timeout value, but make note that if pg_stop_backup terminates because of this your backup may not be valid.
144-1	18366-18368	If	
144-2	18369-18372	you	
144-3	18373-18377	wish	
144-4	18378-18380	to	
144-5	18381-18386	place	
144-6	18387-18388	a	
144-7	18389-18393	time	
144-8	18394-18399	limit	
144-9	18400-18402	on	
144-10	18403-18406	the	
144-11	18407-18416	execution	
144-12	18417-18419	of	
144-13	18420-18434	pg_stop_backup	
144-14	18434-18435	,	
144-15	18436-18439	set	
144-16	18440-18442	an	
144-17	18443-18454	appropriate	
144-18	18455-18472	statement_timeout	
144-19	18473-18478	value	
144-20	18478-18479	,	
144-21	18480-18483	but	
144-22	18484-18488	make	
144-23	18489-18493	note	
144-24	18494-18498	that	
144-25	18499-18501	if	
144-26	18502-18516	pg_stop_backup	
144-27	18517-18527	terminates	
144-28	18528-18535	because	
144-29	18536-18538	of	
144-30	18539-18543	this	
144-31	18544-18548	your	
144-32	18549-18555	backup	
144-33	18556-18559	may	
144-34	18560-18563	not	
144-35	18564-18566	be	
144-36	18567-18572	valid	
144-37	18572-18573	.	

#Text=If the backup process monitors and ensures that all WAL segment files required for the backup are successfully archived then the wait_for_archive parameter (which defaults to true) can be set to false to have pg_stop_backup return as soon as the stop backup record is written to the WAL.
145-1	18574-18576	If	
145-2	18577-18580	the	
145-3	18581-18587	backup	
145-4	18588-18595	process	
145-5	18596-18604	monitors	
145-6	18605-18608	and	
145-7	18609-18616	ensures	
145-8	18617-18621	that	
145-9	18622-18625	all	
145-10	18626-18629	WAL	
145-11	18630-18637	segment	
145-12	18638-18643	files	
145-13	18644-18652	required	
145-14	18653-18656	for	
145-15	18657-18660	the	
145-16	18661-18667	backup	
145-17	18668-18671	are	
145-18	18672-18684	successfully	
145-19	18685-18693	archived	
145-20	18694-18698	then	
145-21	18699-18702	the	
145-22	18703-18719	wait_for_archive	
145-23	18720-18729	parameter	
145-24	18730-18731	(	
145-25	18731-18736	which	
145-26	18737-18745	defaults	
145-27	18746-18748	to	
145-28	18749-18753	true	
145-29	18753-18754	)	
145-30	18755-18758	can	
145-31	18759-18761	be	
145-32	18762-18765	set	
145-33	18766-18768	to	
145-34	18769-18774	false	
145-35	18775-18777	to	
145-36	18778-18782	have	
145-37	18783-18797	pg_stop_backup	
145-38	18798-18804	return	
145-39	18805-18807	as	
145-40	18808-18812	soon	
145-41	18813-18815	as	
145-42	18816-18819	the	
145-43	18820-18824	stop	
145-44	18825-18831	backup	
145-45	18832-18838	record	
145-46	18839-18841	is	
145-47	18842-18849	written	
145-48	18850-18852	to	
145-49	18853-18856	the	
145-50	18857-18860	WAL	
145-51	18860-18861	.	

#Text=By default, pg_stop_backup will wait until all WAL has been archived, which can take some time.
146-1	18862-18864	By	
146-2	18865-18872	default	
146-3	18872-18873	,	
146-4	18874-18888	pg_stop_backup	
146-5	18889-18893	will	
146-6	18894-18898	wait	
146-7	18899-18904	until	
146-8	18905-18908	all	
146-9	18909-18912	WAL	
146-10	18913-18916	has	
146-11	18917-18921	been	
146-12	18922-18930	archived	
146-13	18930-18931	,	
146-14	18932-18937	which	
146-15	18938-18941	can	
146-16	18942-18946	take	
146-17	18947-18951	some	
146-18	18952-18956	time	
146-19	18956-18957	.	

#Text=This option must be used with caution: if WAL archiving is not monitored correctly then the backup might not include all of the WAL files and will therefore be incomplete and not able to be restored.
#Text=25.3.3.2. 
147-1	18958-18962	This	
147-2	18963-18969	option	
147-3	18970-18974	must	
147-4	18975-18977	be	
147-5	18978-18982	used	
147-6	18983-18987	with	
147-7	18988-18995	caution	
147-8	18995-18996	:	
147-9	18997-18999	if	
147-10	19000-19003	WAL	
147-11	19004-19013	archiving	
147-12	19014-19016	is	
147-13	19017-19020	not	
147-14	19021-19030	monitored	
147-15	19031-19040	correctly	
147-16	19041-19045	then	
147-17	19046-19049	the	
147-18	19050-19056	backup	
147-19	19057-19062	might	
147-20	19063-19066	not	
147-21	19067-19074	include	
147-22	19075-19078	all	
147-23	19079-19081	of	
147-24	19082-19085	the	
147-25	19086-19089	WAL	
147-26	19090-19095	files	
147-27	19096-19099	and	
147-28	19100-19104	will	
147-29	19105-19114	therefore	
147-30	19115-19117	be	
147-31	19118-19128	incomplete	
147-32	19129-19132	and	
147-33	19133-19136	not	
147-34	19137-19141	able	
147-35	19142-19144	to	
147-36	19145-19147	be	
147-37	19148-19156	restored	
147-38	19156-19157	.	
147-39	19158-19166	25.3.3.2	
147-40	19166-19167	.	
147-41	19167-19168	 	

#Text=Making an Exclusive Low-Level Backup
#Text=Note
#Text=The exclusive backup method is deprecated and should be avoided.
148-1	19168-19174	Making	
148-2	19175-19177	an	
148-3	19178-19187	Exclusive	
148-4	19188-19197	Low-Level	
148-5	19198-19204	Backup	
148-6	19205-19209	Note	
148-7	19210-19213	The	
148-8	19214-19223	exclusive	
148-9	19224-19230	backup	
148-10	19231-19237	method	
148-11	19238-19240	is	
148-12	19241-19251	deprecated	
148-13	19252-19255	and	
148-14	19256-19262	should	
148-15	19263-19265	be	
148-16	19266-19273	avoided	
148-17	19273-19274	.	

#Text=Prior to PostgreSQL 9.6, this was the only low-level method available, but it is now recommended that all users upgrade their scripts to use non-exclusive backups.
149-1	19275-19280	Prior	
149-2	19281-19283	to	
149-3	19284-19294	PostgreSQL	
149-4	19295-19298	9.6	
149-5	19298-19299	,	
149-6	19300-19304	this	
149-7	19305-19308	was	
149-8	19309-19312	the	
149-9	19313-19317	only	
149-10	19318-19327	low-level	
149-11	19328-19334	method	
149-12	19335-19344	available	
149-13	19344-19345	,	
149-14	19346-19349	but	
149-15	19350-19352	it	
149-16	19353-19355	is	
149-17	19356-19359	now	
149-18	19360-19371	recommended	
149-19	19372-19376	that	
149-20	19377-19380	all	
149-21	19381-19386	users	
149-22	19387-19394	upgrade	
149-23	19395-19400	their	
149-24	19401-19408	scripts	
149-25	19409-19411	to	
149-26	19412-19415	use	
149-27	19416-19429	non-exclusive	
149-28	19430-19437	backups	
149-29	19437-19438	.	

#Text=The process for an exclusive backup is mostly the same as for a non-exclusive one, but it differs in a few key steps.
150-1	19439-19442	The	
150-2	19443-19450	process	
150-3	19451-19454	for	
150-4	19455-19457	an	
150-5	19458-19467	exclusive	
150-6	19468-19474	backup	
150-7	19475-19477	is	
150-8	19478-19484	mostly	
150-9	19485-19488	the	
150-10	19489-19493	same	
150-11	19494-19496	as	
150-12	19497-19500	for	
150-13	19501-19502	a	
150-14	19503-19516	non-exclusive	
150-15	19517-19520	one	
150-16	19520-19521	,	
150-17	19522-19525	but	
150-18	19526-19528	it	
150-19	19529-19536	differs	
150-20	19537-19539	in	
150-21	19540-19541	a	
150-22	19542-19545	few	
150-23	19546-19549	key	
150-24	19550-19555	steps	
150-25	19555-19556	.	

#Text=This type of backup can only be taken on a primary and does not allow concurrent backups.
151-1	19557-19561	This	
151-2	19562-19566	type	
151-3	19567-19569	of	
151-4	19570-19576	backup	
151-5	19577-19580	can	
151-6	19581-19585	only	
151-7	19586-19588	be	
151-8	19589-19594	taken	
151-9	19595-19597	on	
151-10	19598-19599	a	
151-11	19600-19607	primary	
151-12	19608-19611	and	
151-13	19612-19616	does	
151-14	19617-19620	not	
151-15	19621-19626	allow	
151-16	19627-19637	concurrent	
151-17	19638-19645	backups	
151-18	19645-19646	.	

#Text=Moreover, because it creates a backup label file, as described below, it can block automatic restart of the master server after a crash.
152-1	19647-19655	Moreover	
152-2	19655-19656	,	
152-3	19657-19664	because	
152-4	19665-19667	it	
152-5	19668-19675	creates	
152-6	19676-19677	a	
152-7	19678-19684	backup	
152-8	19685-19690	label	
152-9	19691-19695	file	
152-10	19695-19696	,	
152-11	19697-19699	as	
152-12	19700-19709	described	
152-13	19710-19715	below	
152-14	19715-19716	,	
152-15	19717-19719	it	
152-16	19720-19723	can	
152-17	19724-19729	block	
152-18	19730-19739	automatic	
152-19	19740-19747	restart	
152-20	19748-19750	of	
152-21	19751-19754	the	
152-22	19755-19761	master	
152-23	19762-19768	server	
152-24	19769-19774	after	
152-25	19775-19776	a	
152-26	19777-19782	crash	
152-27	19782-19783	.	

#Text=On the other hand, the erroneous removal of this file from a backup or standby is a common mistake, which can result in serious data corruption.
153-1	19784-19786	On	
153-2	19787-19790	the	
153-3	19791-19796	other	
153-4	19797-19801	hand	
153-5	19801-19802	,	
153-6	19803-19806	the	
153-7	19807-19816	erroneous	
153-8	19817-19824	removal	
153-9	19825-19827	of	
153-10	19828-19832	this	
153-11	19833-19837	file	
153-12	19838-19842	from	
153-13	19843-19844	a	
153-14	19845-19851	backup	
153-15	19852-19854	or	
153-16	19855-19862	standby	
153-17	19863-19865	is	
153-18	19866-19867	a	
153-19	19868-19874	common	
153-20	19875-19882	mistake	
153-21	19882-19883	,	
153-22	19884-19889	which	
153-23	19890-19893	can	
153-24	19894-19900	result	
153-25	19901-19903	in	
153-26	19904-19911	serious	
153-27	19912-19916	data	
153-28	19917-19927	corruption	
153-29	19927-19928	.	

#Text=If it is necessary to use this method, the following steps may be used.
154-1	19929-19931	If	
154-2	19932-19934	it	
154-3	19935-19937	is	
154-4	19938-19947	necessary	
154-5	19948-19950	to	
154-6	19951-19954	use	
154-7	19955-19959	this	
154-8	19960-19966	method	
154-9	19966-19967	,	
154-10	19968-19971	the	
154-11	19972-19981	following	
154-12	19982-19987	steps	
154-13	19988-19991	may	
154-14	19992-19994	be	
154-15	19995-19999	used	
154-16	19999-20000	.	

#Text=Ensure that WAL archiving is enabled and working.
155-1	20001-20007	Ensure	
155-2	20008-20012	that	
155-3	20013-20016	WAL	
155-4	20017-20026	archiving	
155-5	20027-20029	is	
155-6	20030-20037	enabled	
155-7	20038-20041	and	
155-8	20042-20049	working	
155-9	20049-20050	.	

#Text=Connect to the server (it does not matter which database) as a user with rights to run pg_start_backup (superuser, or a user who has been granted EXECUTE on the function) and issue the command:
#Text=SELECT pg_start_backup('label');
#Text=where label is any string you want to use to uniquely identify this backup operation. pg_start_backup creates a backup label file, called backup_label, in the cluster directory with information about your backup, including the start time and label string.
156-1	20051-20058	Connect	
156-2	20059-20061	to	
156-3	20062-20065	the	
156-4	20066-20072	server	
156-5	20073-20074	(	
156-6	20074-20076	it	
156-7	20077-20081	does	
156-8	20082-20085	not	
156-9	20086-20092	matter	
156-10	20093-20098	which	
156-11	20099-20107	database	
156-12	20107-20108	)	
156-13	20109-20111	as	
156-14	20112-20113	a	
156-15	20114-20118	user	
156-16	20119-20123	with	
156-17	20124-20130	rights	
156-18	20131-20133	to	
156-19	20134-20137	run	
156-20	20138-20153	pg_start_backup	
156-21	20154-20155	(	
156-22	20155-20164	superuser	
156-23	20164-20165	,	
156-24	20166-20168	or	
156-25	20169-20170	a	
156-26	20171-20175	user	
156-27	20176-20179	who	
156-28	20180-20183	has	
156-29	20184-20188	been	
156-30	20189-20196	granted	
156-31	20197-20204	EXECUTE	
156-32	20205-20207	on	
156-33	20208-20211	the	
156-34	20212-20220	function	
156-35	20220-20221	)	
156-36	20222-20225	and	
156-37	20226-20231	issue	
156-38	20232-20235	the	
156-39	20236-20243	command	
156-40	20243-20244	:	
156-41	20245-20251	SELECT	
156-42	20252-20267	pg_start_backup	
156-43	20267-20268	(	
156-44	20268-20269	'	
156-45	20269-20274	label	
156-46	20274-20275	'	
156-47	20275-20276	)	
156-48	20276-20277	;	
156-49	20278-20283	where	
156-50	20284-20289	label	
156-51	20290-20292	is	
156-52	20293-20296	any	
156-53	20297-20303	string	
156-54	20304-20307	you	
156-55	20308-20312	want	
156-56	20313-20315	to	
156-57	20316-20319	use	
156-58	20320-20322	to	
156-59	20323-20331	uniquely	
156-60	20332-20340	identify	
156-61	20341-20345	this	
156-62	20346-20352	backup	
156-63	20353-20362	operation	
156-64	20362-20363	.	
156-65	20364-20379	pg_start_backup	
156-66	20380-20387	creates	
156-67	20388-20389	a	
156-68	20390-20396	backup	
156-69	20397-20402	label	
156-70	20403-20407	file	
156-71	20407-20408	,	
156-72	20409-20415	called	
156-73	20416-20428	backup_label	
156-74	20428-20429	,	
156-75	20430-20432	in	
156-76	20433-20436	the	
156-77	20437-20444	cluster	
156-78	20445-20454	directory	
156-79	20455-20459	with	
156-80	20460-20471	information	
156-81	20472-20477	about	
156-82	20478-20482	your	
156-83	20483-20489	backup	
156-84	20489-20490	,	
156-85	20491-20500	including	
156-86	20501-20504	the	
156-87	20505-20510	start	
156-88	20511-20515	time	
156-89	20516-20519	and	
156-90	20520-20525	label	
156-91	20526-20532	string	
156-92	20532-20533	.	

#Text=The function also creates a tablespace map file, called tablespace_map, in the cluster directory with information about tablespace symbolic links in pg_tblspc/ if one or more such link is present.
157-1	20534-20537	The	
157-2	20538-20546	function	
157-3	20547-20551	also	
157-4	20552-20559	creates	
157-5	20560-20561	a	
157-6	20562-20572	tablespace	
157-7	20573-20576	map	
157-8	20577-20581	file	
157-9	20581-20582	,	
157-10	20583-20589	called	
157-11	20590-20604	tablespace_map	
157-12	20604-20605	,	
157-13	20606-20608	in	
157-14	20609-20612	the	
157-15	20613-20620	cluster	
157-16	20621-20630	directory	
157-17	20631-20635	with	
157-18	20636-20647	information	
157-19	20648-20653	about	
157-20	20654-20664	tablespace	
157-21	20665-20673	symbolic	
157-22	20674-20679	links	
157-23	20680-20682	in	
157-24	20683-20692	pg_tblspc	
157-25	20692-20693	/	
157-26	20694-20696	if	
157-27	20697-20700	one	
157-28	20701-20703	or	
157-29	20704-20708	more	
157-30	20709-20713	such	
157-31	20714-20718	link	
157-32	20719-20721	is	
157-33	20722-20729	present	
157-34	20729-20730	.	

#Text=Both files are critical to the integrity of the backup, should you need to restore from it.
158-1	20731-20735	Both	
158-2	20736-20741	files	
158-3	20742-20745	are	
158-4	20746-20754	critical	
158-5	20755-20757	to	
158-6	20758-20761	the	
158-7	20762-20771	integrity	
158-8	20772-20774	of	
158-9	20775-20778	the	
158-10	20779-20785	backup	
158-11	20785-20786	,	
158-12	20787-20793	should	
158-13	20794-20797	you	
158-14	20798-20802	need	
158-15	20803-20805	to	
158-16	20806-20813	restore	
158-17	20814-20818	from	
158-18	20819-20821	it	
158-19	20821-20822	.	

#Text=By default, pg_start_backup can take a long time to finish.
159-1	20823-20825	By	
159-2	20826-20833	default	
159-3	20833-20834	,	
159-4	20835-20850	pg_start_backup	
159-5	20851-20854	can	
159-6	20855-20859	take	
159-7	20860-20861	a	
159-8	20862-20866	long	
159-9	20867-20871	time	
159-10	20872-20874	to	
159-11	20875-20881	finish	
159-12	20881-20882	.	

#Text=This is because it performs a checkpoint, and the I/O required for the checkpoint will be spread out over a significant period of time, by default half your inter-checkpoint interval (see the configuration parameter checkpoint_completion_target).
160-1	20883-20887	This	
160-2	20888-20890	is	
160-3	20891-20898	because	
160-4	20899-20901	it	
160-5	20902-20910	performs	
160-6	20911-20912	a	
160-7	20913-20923	checkpoint	
160-8	20923-20924	,	
160-9	20925-20928	and	
160-10	20929-20932	the	
160-11	20933-20934	I	
160-12	20934-20935	/	
160-13	20935-20936	O	
160-14	20937-20945	required	
160-15	20946-20949	for	
160-16	20950-20953	the	
160-17	20954-20964	checkpoint	
160-18	20965-20969	will	
160-19	20970-20972	be	
160-20	20973-20979	spread	
160-21	20980-20983	out	
160-22	20984-20988	over	
160-23	20989-20990	a	
160-24	20991-21002	significant	
160-25	21003-21009	period	
160-26	21010-21012	of	
160-27	21013-21017	time	
160-28	21017-21018	,	
160-29	21019-21021	by	
160-30	21022-21029	default	
160-31	21030-21034	half	
160-32	21035-21039	your	
160-33	21040-21056	inter-checkpoint	
160-34	21057-21065	interval	
160-35	21066-21067	(	
160-36	21067-21070	see	
160-37	21071-21074	the	
160-38	21075-21088	configuration	
160-39	21089-21098	parameter	
160-40	21099-21127	checkpoint_completion_target	
160-41	21127-21128	)	
160-42	21128-21129	.	

#Text=This is usually what you want, because it minimizes the impact on query processing.
161-1	21130-21134	This	
161-2	21135-21137	is	
161-3	21138-21145	usually	
161-4	21146-21150	what	
161-5	21151-21154	you	
161-6	21155-21159	want	
161-7	21159-21160	,	
161-8	21161-21168	because	
161-9	21169-21171	it	
161-10	21172-21181	minimizes	
161-11	21182-21185	the	
161-12	21186-21192	impact	
161-13	21193-21195	on	
161-14	21196-21201	query	
161-15	21202-21212	processing	
161-16	21212-21213	.	

#Text=If you want to start the backup as soon as possible, use:
#Text=SELECT pg_start_backup('label', true);
#Text=This forces the checkpoint to be done as quickly as possible.
162-1	21214-21216	If	
162-2	21217-21220	you	
162-3	21221-21225	want	
162-4	21226-21228	to	
162-5	21229-21234	start	
162-6	21235-21238	the	
162-7	21239-21245	backup	
162-8	21246-21248	as	
162-9	21249-21253	soon	
162-10	21254-21256	as	
162-11	21257-21265	possible	
162-12	21265-21266	,	
162-13	21267-21270	use	
162-14	21270-21271	:	
162-15	21272-21278	SELECT	
162-16	21279-21294	pg_start_backup	
162-17	21294-21295	(	
162-18	21295-21296	'	
162-19	21296-21301	label	
162-20	21301-21302	'	
162-21	21302-21303	,	
162-22	21304-21308	true	
162-23	21308-21309	)	
162-24	21309-21310	;	
162-25	21311-21315	This	
162-26	21316-21322	forces	
162-27	21323-21326	the	
162-28	21327-21337	checkpoint	
162-29	21338-21340	to	
162-30	21341-21343	be	
162-31	21344-21348	done	
162-32	21349-21351	as	
162-33	21352-21359	quickly	
162-34	21360-21362	as	
162-35	21363-21371	possible	
162-36	21371-21372	.	

#Text=Perform the backup, using any convenient file-system-backup tool such as tar or cpio (not pg_dump or pg_dumpall).
163-1	21373-21380	Perform	
163-2	21381-21384	the	
163-3	21385-21391	backup	
163-4	21391-21392	,	
163-5	21393-21398	using	
163-6	21399-21402	any	
163-7	21403-21413	convenient	
163-8	21414-21432	file-system-backup	
163-9	21433-21437	tool	
163-10	21438-21442	such	
163-11	21443-21445	as	
163-12	21446-21449	tar	
163-13	21450-21452	or	
163-14	21453-21457	cpio	
163-15	21458-21459	(	
163-16	21459-21462	not	
163-17	21463-21470	pg_dump	
163-18	21471-21473	or	
163-19	21474-21484	pg_dumpall	
163-20	21484-21485	)	
163-21	21485-21486	.	

#Text=It is neither necessary nor desirable to stop normal operation of the database while you do this.
164-1	21487-21489	It	
164-2	21490-21492	is	
164-3	21493-21500	neither	
164-4	21501-21510	necessary	
164-5	21511-21514	nor	
164-6	21515-21524	desirable	
164-7	21525-21527	to	
164-8	21528-21532	stop	
164-9	21533-21539	normal	
164-10	21540-21549	operation	
164-11	21550-21552	of	
164-12	21553-21556	the	
164-13	21557-21565	database	
164-14	21566-21571	while	
164-15	21572-21575	you	
164-16	21576-21578	do	
164-17	21579-21583	this	
164-18	21583-21584	.	

#Text=See Section 25.3.3.3 for things to consider during this backup.
165-1	21585-21588	See	
165-2	21589-21596	Section	
165-3	21596-21597	 	
165-4	21597-21605	25.3.3.3	
165-5	21606-21609	for	
165-6	21610-21616	things	
165-7	21617-21619	to	
165-8	21620-21628	consider	
165-9	21629-21635	during	
165-10	21636-21640	this	
165-11	21641-21647	backup	
165-12	21647-21648	.	

#Text=As noted above, if the server crashes during the backup it may not be possible to restart until the backup_label file has been manually deleted from the PGDATA directory.
166-1	21649-21651	As	
166-2	21652-21657	noted	
166-3	21658-21663	above	
166-4	21663-21664	,	
166-5	21665-21667	if	
166-6	21668-21671	the	
166-7	21672-21678	server	
166-8	21679-21686	crashes	
166-9	21687-21693	during	
166-10	21694-21697	the	
166-11	21698-21704	backup	
166-12	21705-21707	it	
166-13	21708-21711	may	
166-14	21712-21715	not	
166-15	21716-21718	be	
166-16	21719-21727	possible	
166-17	21728-21730	to	
166-18	21731-21738	restart	
166-19	21739-21744	until	
166-20	21745-21748	the	
166-21	21749-21761	backup_label	
166-22	21762-21766	file	
166-23	21767-21770	has	
166-24	21771-21775	been	
166-25	21776-21784	manually	
166-26	21785-21792	deleted	
166-27	21793-21797	from	
166-28	21798-21801	the	
166-29	21802-21808	PGDATA	
166-30	21809-21818	directory	
166-31	21818-21819	.	

#Text=Note that it is very important to never remove the backup_label file when restoring a backup, because this will result in corruption.
167-1	21820-21824	Note	
167-2	21825-21829	that	
167-3	21830-21832	it	
167-4	21833-21835	is	
167-5	21836-21840	very	
167-6	21841-21850	important	
167-7	21851-21853	to	
167-8	21854-21859	never	
167-9	21860-21866	remove	
167-10	21867-21870	the	
167-11	21871-21883	backup_label	
167-12	21884-21888	file	
167-13	21889-21893	when	
167-14	21894-21903	restoring	
167-15	21904-21905	a	
167-16	21906-21912	backup	
167-17	21912-21913	,	
167-18	21914-21921	because	
167-19	21922-21926	this	
167-20	21927-21931	will	
167-21	21932-21938	result	
167-22	21939-21941	in	
167-23	21942-21952	corruption	
167-24	21952-21953	.	

#Text=Confusion about when it is appropriate to remove this file is a common cause of data corruption when using this method; be very certain that you remove the file only on an existing master and never when building a standby or restoring a backup, even if you are building a standby that will subsequently be promoted to a new master.
168-1	21954-21963	Confusion	
168-2	21964-21969	about	
168-3	21970-21974	when	
168-4	21975-21977	it	
168-5	21978-21980	is	
168-6	21981-21992	appropriate	
168-7	21993-21995	to	
168-8	21996-22002	remove	
168-9	22003-22007	this	
168-10	22008-22012	file	
168-11	22013-22015	is	
168-12	22016-22017	a	
168-13	22018-22024	common	
168-14	22025-22030	cause	
168-15	22031-22033	of	
168-16	22034-22038	data	
168-17	22039-22049	corruption	
168-18	22050-22054	when	
168-19	22055-22060	using	
168-20	22061-22065	this	
168-21	22066-22072	method	
168-22	22072-22073	;	
168-23	22074-22076	be	
168-24	22077-22081	very	
168-25	22082-22089	certain	
168-26	22090-22094	that	
168-27	22095-22098	you	
168-28	22099-22105	remove	
168-29	22106-22109	the	
168-30	22110-22114	file	
168-31	22115-22119	only	
168-32	22120-22122	on	
168-33	22123-22125	an	
168-34	22126-22134	existing	
168-35	22135-22141	master	
168-36	22142-22145	and	
168-37	22146-22151	never	
168-38	22152-22156	when	
168-39	22157-22165	building	
168-40	22166-22167	a	
168-41	22168-22175	standby	
168-42	22176-22178	or	
168-43	22179-22188	restoring	
168-44	22189-22190	a	
168-45	22191-22197	backup	
168-46	22197-22198	,	
168-47	22199-22203	even	
168-48	22204-22206	if	
168-49	22207-22210	you	
168-50	22211-22214	are	
168-51	22215-22223	building	
168-52	22224-22225	a	
168-53	22226-22233	standby	
168-54	22234-22238	that	
168-55	22239-22243	will	
168-56	22244-22256	subsequently	
168-57	22257-22259	be	
168-58	22260-22268	promoted	
168-59	22269-22271	to	
168-60	22272-22273	a	
168-61	22274-22277	new	
168-62	22278-22284	master	
168-63	22284-22285	.	

#Text=Again connect to the database as a user with rights to run pg_stop_backup (superuser, or a user who has been granted EXECUTE on the function), and issue the command:
#Text=SELECT pg_stop_backup();
#Text=This function terminates backup mode and performs an automatic switch to the next WAL segment.
169-1	22286-22291	Again	
169-2	22292-22299	connect	
169-3	22300-22302	to	
169-4	22303-22306	the	
169-5	22307-22315	database	
169-6	22316-22318	as	
169-7	22319-22320	a	
169-8	22321-22325	user	
169-9	22326-22330	with	
169-10	22331-22337	rights	
169-11	22338-22340	to	
169-12	22341-22344	run	
169-13	22345-22359	pg_stop_backup	
169-14	22360-22361	(	
169-15	22361-22370	superuser	
169-16	22370-22371	,	
169-17	22372-22374	or	
169-18	22375-22376	a	
169-19	22377-22381	user	
169-20	22382-22385	who	
169-21	22386-22389	has	
169-22	22390-22394	been	
169-23	22395-22402	granted	
169-24	22403-22410	EXECUTE	
169-25	22411-22413	on	
169-26	22414-22417	the	
169-27	22418-22426	function	
169-28	22426-22427	)	
169-29	22427-22428	,	
169-30	22429-22432	and	
169-31	22433-22438	issue	
169-32	22439-22442	the	
169-33	22443-22450	command	
169-34	22450-22451	:	
169-35	22452-22458	SELECT	
169-36	22459-22473	pg_stop_backup	
169-37	22473-22474	(	
169-38	22474-22475	)	
169-39	22475-22476	;	
169-40	22477-22481	This	
169-41	22482-22490	function	
169-42	22491-22501	terminates	
169-43	22502-22508	backup	
169-44	22509-22513	mode	
169-45	22514-22517	and	
169-46	22518-22526	performs	
169-47	22527-22529	an	
169-48	22530-22539	automatic	
169-49	22540-22546	switch	
169-50	22547-22549	to	
169-51	22550-22553	the	
169-52	22554-22558	next	
169-53	22559-22562	WAL	
169-54	22563-22570	segment	
169-55	22570-22571	.	

#Text=The reason for the switch is to arrange for the last WAL segment written during the backup interval to be ready to archive.
170-1	22572-22575	The	
170-2	22576-22582	reason	
170-3	22583-22586	for	
170-4	22587-22590	the	
170-5	22591-22597	switch	
170-6	22598-22600	is	
170-7	22601-22603	to	
170-8	22604-22611	arrange	
170-9	22612-22615	for	
170-10	22616-22619	the	
170-11	22620-22624	last	
170-12	22625-22628	WAL	
170-13	22629-22636	segment	
170-14	22637-22644	written	
170-15	22645-22651	during	
170-16	22652-22655	the	
170-17	22656-22662	backup	
170-18	22663-22671	interval	
170-19	22672-22674	to	
170-20	22675-22677	be	
170-21	22678-22683	ready	
170-22	22684-22686	to	
170-23	22687-22694	archive	
170-24	22694-22695	.	

#Text=Once the WAL segment files active during the backup are archived, you are done.
171-1	22696-22700	Once	
171-2	22701-22704	the	
171-3	22705-22708	WAL	
171-4	22709-22716	segment	
171-5	22717-22722	files	
171-6	22723-22729	active	
171-7	22730-22736	during	
171-8	22737-22740	the	
171-9	22741-22747	backup	
171-10	22748-22751	are	
171-11	22752-22760	archived	
171-12	22760-22761	,	
171-13	22762-22765	you	
171-14	22766-22769	are	
171-15	22770-22774	done	
171-16	22774-22775	.	

#Text=The file identified by pg_stop_backup's result is the last segment that is required to form a complete set of backup files.
172-1	22776-22779	The	
172-2	22780-22784	file	
172-3	22785-22795	identified	
172-4	22796-22798	by	
172-5	22799-22815	pg_stop_backup's	
172-6	22816-22822	result	
172-7	22823-22825	is	
172-8	22826-22829	the	
172-9	22830-22834	last	
172-10	22835-22842	segment	
172-11	22843-22847	that	
172-12	22848-22850	is	
172-13	22851-22859	required	
172-14	22860-22862	to	
172-15	22863-22867	form	
172-16	22868-22869	a	
172-17	22870-22878	complete	
172-18	22879-22882	set	
172-19	22883-22885	of	
172-20	22886-22892	backup	
172-21	22893-22898	files	
172-22	22898-22899	.	

#Text=If archive_mode is enabled, pg_stop_backup does not return until the last segment has been archived.
173-1	22900-22902	If	
173-2	22903-22915	archive_mode	
173-3	22916-22918	is	
173-4	22919-22926	enabled	
173-5	22926-22927	,	
173-6	22928-22942	pg_stop_backup	
173-7	22943-22947	does	
173-8	22948-22951	not	
173-9	22952-22958	return	
173-10	22959-22964	until	
173-11	22965-22968	the	
173-12	22969-22973	last	
173-13	22974-22981	segment	
173-14	22982-22985	has	
173-15	22986-22990	been	
173-16	22991-22999	archived	
173-17	22999-23000	.	

#Text=Archiving of these files happens automatically since you have already configured archive_command.
174-1	23001-23010	Archiving	
174-2	23011-23013	of	
174-3	23014-23019	these	
174-4	23020-23025	files	
174-5	23026-23033	happens	
174-6	23034-23047	automatically	
174-7	23048-23053	since	
174-8	23054-23057	you	
174-9	23058-23062	have	
174-10	23063-23070	already	
174-11	23071-23081	configured	
174-12	23082-23097	archive_command	
174-13	23097-23098	.	

#Text=In most cases this happens quickly, but you are advised to monitor your archive system to ensure there are no delays.
175-1	23099-23101	In	
175-2	23102-23106	most	
175-3	23107-23112	cases	
175-4	23113-23117	this	
175-5	23118-23125	happens	
175-6	23126-23133	quickly	
175-7	23133-23134	,	
175-8	23135-23138	but	
175-9	23139-23142	you	
175-10	23143-23146	are	
175-11	23147-23154	advised	
175-12	23155-23157	to	
175-13	23158-23165	monitor	
175-14	23166-23170	your	
175-15	23171-23178	archive	
175-16	23179-23185	system	
175-17	23186-23188	to	
175-18	23189-23195	ensure	
175-19	23196-23201	there	
175-20	23202-23205	are	
175-21	23206-23208	no	
175-22	23209-23215	delays	
175-23	23215-23216	.	

#Text=If the archive process has fallen behind because of failures of the archive command, it will keep retrying until the archive succeeds and the backup is complete.
176-1	23217-23219	If	
176-2	23220-23223	the	
176-3	23224-23231	archive	
176-4	23232-23239	process	
176-5	23240-23243	has	
176-6	23244-23250	fallen	
176-7	23251-23257	behind	
176-8	23258-23265	because	
176-9	23266-23268	of	
176-10	23269-23277	failures	
176-11	23278-23280	of	
176-12	23281-23284	the	
176-13	23285-23292	archive	
176-14	23293-23300	command	
176-15	23300-23301	,	
176-16	23302-23304	it	
176-17	23305-23309	will	
176-18	23310-23314	keep	
176-19	23315-23323	retrying	
176-20	23324-23329	until	
176-21	23330-23333	the	
176-22	23334-23341	archive	
176-23	23342-23350	succeeds	
176-24	23351-23354	and	
176-25	23355-23358	the	
176-26	23359-23365	backup	
176-27	23366-23368	is	
176-28	23369-23377	complete	
176-29	23377-23378	.	

#Text=When using exclusive backup mode, it is absolutely imperative to ensure that pg_stop_backup completes successfully at the end of the backup.
177-1	23379-23383	When	
177-2	23384-23389	using	
177-3	23390-23399	exclusive	
177-4	23400-23406	backup	
177-5	23407-23411	mode	
177-6	23411-23412	,	
177-7	23413-23415	it	
177-8	23416-23418	is	
177-9	23419-23429	absolutely	
177-10	23430-23440	imperative	
177-11	23441-23443	to	
177-12	23444-23450	ensure	
177-13	23451-23455	that	
177-14	23456-23470	pg_stop_backup	
177-15	23471-23480	completes	
177-16	23481-23493	successfully	
177-17	23494-23496	at	
177-18	23497-23500	the	
177-19	23501-23504	end	
177-20	23505-23507	of	
177-21	23508-23511	the	
177-22	23512-23518	backup	
177-23	23518-23519	.	

#Text=Even if the backup itself fails, for example due to lack of disk space, failure to call pg_stop_backup will leave the server in backup mode indefinitely, causing future backups to fail and increasing the risk of a restart failure during the time that backup_label exists.
#Text=25.3.3.3. 
178-1	23520-23524	Even	
178-2	23525-23527	if	
178-3	23528-23531	the	
178-4	23532-23538	backup	
178-5	23539-23545	itself	
178-6	23546-23551	fails	
178-7	23551-23552	,	
178-8	23553-23556	for	
178-9	23557-23564	example	
178-10	23565-23568	due	
178-11	23569-23571	to	
178-12	23572-23576	lack	
178-13	23577-23579	of	
178-14	23580-23584	disk	
178-15	23585-23590	space	
178-16	23590-23591	,	
178-17	23592-23599	failure	
178-18	23600-23602	to	
178-19	23603-23607	call	
178-20	23608-23622	pg_stop_backup	
178-21	23623-23627	will	
178-22	23628-23633	leave	
178-23	23634-23637	the	
178-24	23638-23644	server	
178-25	23645-23647	in	
178-26	23648-23654	backup	
178-27	23655-23659	mode	
178-28	23660-23672	indefinitely	
178-29	23672-23673	,	
178-30	23674-23681	causing	
178-31	23682-23688	future	
178-32	23689-23696	backups	
178-33	23697-23699	to	
178-34	23700-23704	fail	
178-35	23705-23708	and	
178-36	23709-23719	increasing	
178-37	23720-23723	the	
178-38	23724-23728	risk	
178-39	23729-23731	of	
178-40	23732-23733	a	
178-41	23734-23741	restart	
178-42	23742-23749	failure	
178-43	23750-23756	during	
178-44	23757-23760	the	
178-45	23761-23765	time	
178-46	23766-23770	that	
178-47	23771-23783	backup_label	
178-48	23784-23790	exists	
178-49	23790-23791	.	
178-50	23792-23800	25.3.3.3	
178-51	23800-23801	.	
178-52	23801-23802	 	

#Text=Backing Up the Data Directory
#Text=Some file system backup tools emit warnings or errors if the files they are trying to copy change while the copy proceeds.
179-1	23802-23809	Backing	
179-2	23810-23812	Up	
179-3	23813-23816	the	
179-4	23817-23821	Data	
179-5	23822-23831	Directory	
179-6	23832-23836	Some	
179-7	23837-23841	file	
179-8	23842-23848	system	
179-9	23849-23855	backup	
179-10	23856-23861	tools	
179-11	23862-23866	emit	
179-12	23867-23875	warnings	
179-13	23876-23878	or	
179-14	23879-23885	errors	
179-15	23886-23888	if	
179-16	23889-23892	the	
179-17	23893-23898	files	
179-18	23899-23903	they	
179-19	23904-23907	are	
179-20	23908-23914	trying	
179-21	23915-23917	to	
179-22	23918-23922	copy	
179-23	23923-23929	change	
179-24	23930-23935	while	
179-25	23936-23939	the	
179-26	23940-23944	copy	
179-27	23945-23953	proceeds	
179-28	23953-23954	.	

#Text=When taking a base backup of an active database, this situation is normal and not an error.
180-1	23955-23959	When	
180-2	23960-23966	taking	
180-3	23967-23968	a	
180-4	23969-23973	base	
180-5	23974-23980	backup	
180-6	23981-23983	of	
180-7	23984-23986	an	
180-8	23987-23993	active	
180-9	23994-24002	database	
180-10	24002-24003	,	
180-11	24004-24008	this	
180-12	24009-24018	situation	
180-13	24019-24021	is	
180-14	24022-24028	normal	
180-15	24029-24032	and	
180-16	24033-24036	not	
180-17	24037-24039	an	
180-18	24040-24045	error	
180-19	24045-24046	.	

#Text=However, you need to ensure that you can distinguish complaints of this sort from real errors.
181-1	24047-24054	However	
181-2	24054-24055	,	
181-3	24056-24059	you	
181-4	24060-24064	need	
181-5	24065-24067	to	
181-6	24068-24074	ensure	
181-7	24075-24079	that	
181-8	24080-24083	you	
181-9	24084-24087	can	
181-10	24088-24099	distinguish	
181-11	24100-24110	complaints	
181-12	24111-24113	of	
181-13	24114-24118	this	
181-14	24119-24123	sort	
181-15	24124-24128	from	
181-16	24129-24133	real	
181-17	24134-24140	errors	
181-18	24140-24141	.	

#Text=For example, some versions of rsync return a separate exit code for “vanished source files”, and you can write a driver script to accept this exit code as a non-error case.
182-1	24142-24145	For	
182-2	24146-24153	example	
182-3	24153-24154	,	
182-4	24155-24159	some	
182-5	24160-24168	versions	
182-6	24169-24171	of	
182-7	24172-24177	rsync	
182-8	24178-24184	return	
182-9	24185-24186	a	
182-10	24187-24195	separate	
182-11	24196-24200	exit	
182-12	24201-24205	code	
182-13	24206-24209	for	
182-14	24210-24211	“	
182-15	24211-24219	vanished	
182-16	24220-24226	source	
182-17	24227-24232	files	
182-18	24232-24233	”	
182-19	24233-24234	,	
182-20	24235-24238	and	
182-21	24239-24242	you	
182-22	24243-24246	can	
182-23	24247-24252	write	
182-24	24253-24254	a	
182-25	24255-24261	driver	
182-26	24262-24268	script	
182-27	24269-24271	to	
182-28	24272-24278	accept	
182-29	24279-24283	this	
182-30	24284-24288	exit	
182-31	24289-24293	code	
182-32	24294-24296	as	
182-33	24297-24298	a	
182-34	24299-24308	non-error	
182-35	24309-24313	case	
182-36	24313-24314	.	

#Text=Also, some versions of GNU tar return an error code indistinguishable from a fatal error if a file was truncated while tar was copying it.
183-1	24315-24319	Also	
183-2	24319-24320	,	
183-3	24321-24325	some	
183-4	24326-24334	versions	
183-5	24335-24337	of	
183-6	24338-24341	GNU	
183-7	24342-24345	tar	
183-8	24346-24352	return	
183-9	24353-24355	an	
183-10	24356-24361	error	
183-11	24362-24366	code	
183-12	24367-24384	indistinguishable	
183-13	24385-24389	from	
183-14	24390-24391	a	
183-15	24392-24397	fatal	
183-16	24398-24403	error	
183-17	24404-24406	if	
183-18	24407-24408	a	
183-19	24409-24413	file	
183-20	24414-24417	was	
183-21	24418-24427	truncated	
183-22	24428-24433	while	
183-23	24434-24437	tar	
183-24	24438-24441	was	
183-25	24442-24449	copying	
183-26	24450-24452	it	
183-27	24452-24453	.	

#Text=Fortunately, GNU tar versions 1.16 and later exit with 1 if a file was changed during the backup, and 2 for other errors.
184-1	24454-24465	Fortunately	
184-2	24465-24466	,	
184-3	24467-24470	GNU	
184-4	24471-24474	tar	
184-5	24475-24483	versions	
184-6	24484-24488	1.16	
184-7	24489-24492	and	
184-8	24493-24498	later	
184-9	24499-24503	exit	
184-10	24504-24508	with	
184-11	24509-24510	1	
184-12	24511-24513	if	
184-13	24514-24515	a	
184-14	24516-24520	file	
184-15	24521-24524	was	
184-16	24525-24532	changed	
184-17	24533-24539	during	
184-18	24540-24543	the	
184-19	24544-24550	backup	
184-20	24550-24551	,	
184-21	24552-24555	and	
184-22	24556-24557	2	
184-23	24558-24561	for	
184-24	24562-24567	other	
184-25	24568-24574	errors	
184-26	24574-24575	.	

#Text=With GNU tar version 1.23 and later, you can use the warning options --warning=no-file-changed --warning=no-file-removed to hide the related warning messages.
185-1	24576-24580	With	
185-2	24581-24584	GNU	
185-3	24585-24588	tar	
185-4	24589-24596	version	
185-5	24597-24601	1.23	
185-6	24602-24605	and	
185-7	24606-24611	later	
185-8	24611-24612	,	
185-9	24613-24616	you	
185-10	24617-24620	can	
185-11	24621-24624	use	
185-12	24625-24628	the	
185-13	24629-24636	warning	
185-14	24637-24644	options	
185-15	24645-24646	-	
185-16	24646-24647	-	
185-17	24647-24654	warning	
185-18	24654-24655	=	
185-19	24655-24670	no-file-changed	
185-20	24671-24672	-	
185-21	24672-24673	-	
185-22	24673-24680	warning	
185-23	24680-24681	=	
185-24	24681-24696	no-file-removed	
185-25	24697-24699	to	
185-26	24700-24704	hide	
185-27	24705-24708	the	
185-28	24709-24716	related	
185-29	24717-24724	warning	
185-30	24725-24733	messages	
185-31	24733-24734	.	

#Text=Be certain that your backup includes all of the files under the database cluster directory (e.g., /usr/local/pgsql/data).
186-1	24735-24737	Be	
186-2	24738-24745	certain	
186-3	24746-24750	that	
186-4	24751-24755	your	
186-5	24756-24762	backup	
186-6	24763-24771	includes	
186-7	24772-24775	all	
186-8	24776-24778	of	
186-9	24779-24782	the	
186-10	24783-24788	files	
186-11	24789-24794	under	
186-12	24795-24798	the	
186-13	24799-24807	database	
186-14	24808-24815	cluster	
186-15	24816-24825	directory	
186-16	24826-24827	(	
186-17	24827-24830	e.g	
186-18	24830-24831	.	
186-19	24831-24832	,	
186-20	24833-24834	/	
186-21	24834-24837	usr	
186-22	24837-24838	/	
186-23	24838-24843	local	
186-24	24843-24844	/	
186-25	24844-24849	pgsql	
186-26	24849-24850	/	
186-27	24850-24854	data	
186-28	24854-24855	)	
186-29	24855-24856	.	

#Text=If you are using tablespaces that do not reside underneath this directory, be careful to include them as well (and be sure that your backup archives symbolic links as links, otherwise the restore will corrupt your tablespaces).
187-1	24857-24859	If	
187-2	24860-24863	you	
187-3	24864-24867	are	
187-4	24868-24873	using	
187-5	24874-24885	tablespaces	
187-6	24886-24890	that	
187-7	24891-24893	do	
187-8	24894-24897	not	
187-9	24898-24904	reside	
187-10	24905-24915	underneath	
187-11	24916-24920	this	
187-12	24921-24930	directory	
187-13	24930-24931	,	
187-14	24932-24934	be	
187-15	24935-24942	careful	
187-16	24943-24945	to	
187-17	24946-24953	include	
187-18	24954-24958	them	
187-19	24959-24961	as	
187-20	24962-24966	well	
187-21	24967-24968	(	
187-22	24968-24971	and	
187-23	24972-24974	be	
187-24	24975-24979	sure	
187-25	24980-24984	that	
187-26	24985-24989	your	
187-27	24990-24996	backup	
187-28	24997-25005	archives	
187-29	25006-25014	symbolic	
187-30	25015-25020	links	
187-31	25021-25023	as	
187-32	25024-25029	links	
187-33	25029-25030	,	
187-34	25031-25040	otherwise	
187-35	25041-25044	the	
187-36	25045-25052	restore	
187-37	25053-25057	will	
187-38	25058-25065	corrupt	
187-39	25066-25070	your	
187-40	25071-25082	tablespaces	
187-41	25082-25083	)	
187-42	25083-25084	.	

#Text=You should, however, omit from the backup the files within the cluster's pg_wal/ subdirectory.
188-1	25085-25088	You	
188-2	25089-25095	should	
188-3	25095-25096	,	
188-4	25097-25104	however	
188-5	25104-25105	,	
188-6	25106-25110	omit	
188-7	25111-25115	from	
188-8	25116-25119	the	
188-9	25120-25126	backup	
188-10	25127-25130	the	
188-11	25131-25136	files	
188-12	25137-25143	within	
188-13	25144-25147	the	
188-14	25148-25157	cluster's	
188-15	25158-25164	pg_wal	
188-16	25164-25165	/	
188-17	25166-25178	subdirectory	
188-18	25178-25179	.	

#Text=This slight adjustment is worthwhile because it reduces the risk of mistakes when restoring.
189-1	25180-25184	This	
189-2	25185-25191	slight	
189-3	25192-25202	adjustment	
189-4	25203-25205	is	
189-5	25206-25216	worthwhile	
189-6	25217-25224	because	
189-7	25225-25227	it	
189-8	25228-25235	reduces	
189-9	25236-25239	the	
189-10	25240-25244	risk	
189-11	25245-25247	of	
189-12	25248-25256	mistakes	
189-13	25257-25261	when	
189-14	25262-25271	restoring	
189-15	25271-25272	.	

#Text=This is easy to arrange if pg_wal/ is a symbolic link pointing to someplace outside the cluster directory, which is a common setup anyway for performance reasons.
190-1	25273-25277	This	
190-2	25278-25280	is	
190-3	25281-25285	easy	
190-4	25286-25288	to	
190-5	25289-25296	arrange	
190-6	25297-25299	if	
190-7	25300-25306	pg_wal	
190-8	25306-25307	/	
190-9	25308-25310	is	
190-10	25311-25312	a	
190-11	25313-25321	symbolic	
190-12	25322-25326	link	
190-13	25327-25335	pointing	
190-14	25336-25338	to	
190-15	25339-25348	someplace	
190-16	25349-25356	outside	
190-17	25357-25360	the	
190-18	25361-25368	cluster	
190-19	25369-25378	directory	
190-20	25378-25379	,	
190-21	25380-25385	which	
190-22	25386-25388	is	
190-23	25389-25390	a	
190-24	25391-25397	common	
190-25	25398-25403	setup	
190-26	25404-25410	anyway	
190-27	25411-25414	for	
190-28	25415-25426	performance	
190-29	25427-25434	reasons	
190-30	25434-25435	.	

#Text=You might also want to exclude postmaster.pid and postmaster.opts, which record information about the running postmaster, not about the postmaster which will eventually use this backup.
191-1	25436-25439	You	
191-2	25440-25445	might	
191-3	25446-25450	also	
191-4	25451-25455	want	
191-5	25456-25458	to	
191-6	25459-25466	exclude	
191-7	25467-25481	postmaster.pid	
191-8	25482-25485	and	
191-9	25486-25501	postmaster.opts	
191-10	25501-25502	,	
191-11	25503-25508	which	
191-12	25509-25515	record	
191-13	25516-25527	information	
191-14	25528-25533	about	
191-15	25534-25537	the	
191-16	25538-25545	running	
191-17	25546-25556	postmaster	
191-18	25556-25557	,	
191-19	25558-25561	not	
191-20	25562-25567	about	
191-21	25568-25571	the	
191-22	25572-25582	postmaster	
191-23	25583-25588	which	
191-24	25589-25593	will	
191-25	25594-25604	eventually	
191-26	25605-25608	use	
191-27	25609-25613	this	
191-28	25614-25620	backup	
191-29	25620-25621	.	

#Text=(These files can confuse pg_ctl.)
192-1	25622-25623	(	
192-2	25623-25628	These	
192-3	25629-25634	files	
192-4	25635-25638	can	
192-5	25639-25646	confuse	
192-6	25647-25653	pg_ctl	
192-7	25653-25654	.	
192-8	25654-25655	)	

#Text=It is often a good idea to also omit from the backup the files within the cluster's pg_replslot/ directory, so that replication slots that exist on the master do not become part of the backup.
193-1	25656-25658	It	
193-2	25659-25661	is	
193-3	25662-25667	often	
193-4	25668-25669	a	
193-5	25670-25674	good	
193-6	25675-25679	idea	
193-7	25680-25682	to	
193-8	25683-25687	also	
193-9	25688-25692	omit	
193-10	25693-25697	from	
193-11	25698-25701	the	
193-12	25702-25708	backup	
193-13	25709-25712	the	
193-14	25713-25718	files	
193-15	25719-25725	within	
193-16	25726-25729	the	
193-17	25730-25739	cluster's	
193-18	25740-25751	pg_replslot	
193-19	25751-25752	/	
193-20	25753-25762	directory	
193-21	25762-25763	,	
193-22	25764-25766	so	
193-23	25767-25771	that	
193-24	25772-25783	replication	
193-25	25784-25789	slots	
193-26	25790-25794	that	
193-27	25795-25800	exist	
193-28	25801-25803	on	
193-29	25804-25807	the	
193-30	25808-25814	master	
193-31	25815-25817	do	
193-32	25818-25821	not	
193-33	25822-25828	become	
193-34	25829-25833	part	
193-35	25834-25836	of	
193-36	25837-25840	the	
193-37	25841-25847	backup	
193-38	25847-25848	.	

#Text=Otherwise, the subsequent use of the backup to create a standby may result in indefinite retention of WAL files on the standby, and possibly bloat on the master if hot standby feedback is enabled, because the clients that are using those replication slots will still be connecting to and updating the slots on the master, not the standby.
194-1	25849-25858	Otherwise	
194-2	25858-25859	,	
194-3	25860-25863	the	
194-4	25864-25874	subsequent	
194-5	25875-25878	use	
194-6	25879-25881	of	
194-7	25882-25885	the	
194-8	25886-25892	backup	
194-9	25893-25895	to	
194-10	25896-25902	create	
194-11	25903-25904	a	
194-12	25905-25912	standby	
194-13	25913-25916	may	
194-14	25917-25923	result	
194-15	25924-25926	in	
194-16	25927-25937	indefinite	
194-17	25938-25947	retention	
194-18	25948-25950	of	
194-19	25951-25954	WAL	
194-20	25955-25960	files	
194-21	25961-25963	on	
194-22	25964-25967	the	
194-23	25968-25975	standby	
194-24	25975-25976	,	
194-25	25977-25980	and	
194-26	25981-25989	possibly	
194-27	25990-25995	bloat	
194-28	25996-25998	on	
194-29	25999-26002	the	
194-30	26003-26009	master	
194-31	26010-26012	if	
194-32	26013-26016	hot	
194-33	26017-26024	standby	
194-34	26025-26033	feedback	
194-35	26034-26036	is	
194-36	26037-26044	enabled	
194-37	26044-26045	,	
194-38	26046-26053	because	
194-39	26054-26057	the	
194-40	26058-26065	clients	
194-41	26066-26070	that	
194-42	26071-26074	are	
194-43	26075-26080	using	
194-44	26081-26086	those	
194-45	26087-26098	replication	
194-46	26099-26104	slots	
194-47	26105-26109	will	
194-48	26110-26115	still	
194-49	26116-26118	be	
194-50	26119-26129	connecting	
194-51	26130-26132	to	
194-52	26133-26136	and	
194-53	26137-26145	updating	
194-54	26146-26149	the	
194-55	26150-26155	slots	
194-56	26156-26158	on	
194-57	26159-26162	the	
194-58	26163-26169	master	
194-59	26169-26170	,	
194-60	26171-26174	not	
194-61	26175-26178	the	
194-62	26179-26186	standby	
194-63	26186-26187	.	

#Text=Even if the backup is only intended for use in creating a new master, copying the replication slots isn't expected to be particularly useful, since the contents of those slots will likely be badly out of date by the time the new master comes on line.
195-1	26188-26192	Even	
195-2	26193-26195	if	
195-3	26196-26199	the	
195-4	26200-26206	backup	
195-5	26207-26209	is	
195-6	26210-26214	only	
195-7	26215-26223	intended	
195-8	26224-26227	for	
195-9	26228-26231	use	
195-10	26232-26234	in	
195-11	26235-26243	creating	
195-12	26244-26245	a	
195-13	26246-26249	new	
195-14	26250-26256	master	
195-15	26256-26257	,	
195-16	26258-26265	copying	
195-17	26266-26269	the	
195-18	26270-26281	replication	
195-19	26282-26287	slots	
195-20	26288-26293	isn't	
195-21	26294-26302	expected	
195-22	26303-26305	to	
195-23	26306-26308	be	
195-24	26309-26321	particularly	
195-25	26322-26328	useful	
195-26	26328-26329	,	
195-27	26330-26335	since	
195-28	26336-26339	the	
195-29	26340-26348	contents	
195-30	26349-26351	of	
195-31	26352-26357	those	
195-32	26358-26363	slots	
195-33	26364-26368	will	
195-34	26369-26375	likely	
195-35	26376-26378	be	
195-36	26379-26384	badly	
195-37	26385-26388	out	
195-38	26389-26391	of	
195-39	26392-26396	date	
195-40	26397-26399	by	
195-41	26400-26403	the	
195-42	26404-26408	time	
195-43	26409-26412	the	
195-44	26413-26416	new	
195-45	26417-26423	master	
195-46	26424-26429	comes	
195-47	26430-26432	on	
195-48	26433-26437	line	
195-49	26437-26438	.	

#Text=The contents of the directories pg_dynshmem/, pg_notify/, pg_serial/, pg_snapshots/, pg_stat_tmp/, and pg_subtrans/ (but not the directories themselves) can be omitted from the backup as they will be initialized on postmaster startup.
196-1	26439-26442	The	
196-2	26443-26451	contents	
196-3	26452-26454	of	
196-4	26455-26458	the	
196-5	26459-26470	directories	
196-6	26471-26482	pg_dynshmem	
196-7	26482-26483	/	
196-8	26483-26484	,	
196-9	26485-26494	pg_notify	
196-10	26494-26495	/	
196-11	26495-26496	,	
196-12	26497-26506	pg_serial	
196-13	26506-26507	/	
196-14	26507-26508	,	
196-15	26509-26521	pg_snapshots	
196-16	26521-26522	/	
196-17	26522-26523	,	
196-18	26524-26535	pg_stat_tmp	
196-19	26535-26536	/	
196-20	26536-26537	,	
196-21	26538-26541	and	
196-22	26542-26553	pg_subtrans	
196-23	26553-26554	/	
196-24	26555-26556	(	
196-25	26556-26559	but	
196-26	26560-26563	not	
196-27	26564-26567	the	
196-28	26568-26579	directories	
196-29	26580-26590	themselves	
196-30	26590-26591	)	
196-31	26592-26595	can	
196-32	26596-26598	be	
196-33	26599-26606	omitted	
196-34	26607-26611	from	
196-35	26612-26615	the	
196-36	26616-26622	backup	
196-37	26623-26625	as	
196-38	26626-26630	they	
196-39	26631-26635	will	
196-40	26636-26638	be	
196-41	26639-26650	initialized	
196-42	26651-26653	on	
196-43	26654-26664	postmaster	
196-44	26665-26672	startup	
196-45	26672-26673	.	

#Text=If stats_temp_directory is set and is under the data directory then the contents of that directory can also be omitted.
197-1	26674-26676	If	
197-2	26677-26697	stats_temp_directory	
197-3	26698-26700	is	
197-4	26701-26704	set	
197-5	26705-26708	and	
197-6	26709-26711	is	
197-7	26712-26717	under	
197-8	26718-26721	the	
197-9	26722-26726	data	
197-10	26727-26736	directory	
197-11	26737-26741	then	
197-12	26742-26745	the	
197-13	26746-26754	contents	
197-14	26755-26757	of	
197-15	26758-26762	that	
197-16	26763-26772	directory	
197-17	26773-26776	can	
197-18	26777-26781	also	
197-19	26782-26784	be	
197-20	26785-26792	omitted	
197-21	26792-26793	.	

#Text=Any file or directory beginning with pgsql_tmp can be omitted from the backup.
198-1	26794-26797	Any	
198-2	26798-26802	file	
198-3	26803-26805	or	
198-4	26806-26815	directory	
198-5	26816-26825	beginning	
198-6	26826-26830	with	
198-7	26831-26840	pgsql_tmp	
198-8	26841-26844	can	
198-9	26845-26847	be	
198-10	26848-26855	omitted	
198-11	26856-26860	from	
198-12	26861-26864	the	
198-13	26865-26871	backup	
198-14	26871-26872	.	

#Text=These files are removed on postmaster start and the directories will be recreated as needed.
#Text=pg_internal.init files can be omitted from the backup whenever a file of that name is found.
199-1	26873-26878	These	
199-2	26879-26884	files	
199-3	26885-26888	are	
199-4	26889-26896	removed	
199-5	26897-26899	on	
199-6	26900-26910	postmaster	
199-7	26911-26916	start	
199-8	26917-26920	and	
199-9	26921-26924	the	
199-10	26925-26936	directories	
199-11	26937-26941	will	
199-12	26942-26944	be	
199-13	26945-26954	recreated	
199-14	26955-26957	as	
199-15	26958-26964	needed	
199-16	26964-26965	.	
199-17	26966-26982	pg_internal.init	
199-18	26983-26988	files	
199-19	26989-26992	can	
199-20	26993-26995	be	
199-21	26996-27003	omitted	
199-22	27004-27008	from	
199-23	27009-27012	the	
199-24	27013-27019	backup	
199-25	27020-27028	whenever	
199-26	27029-27030	a	
199-27	27031-27035	file	
199-28	27036-27038	of	
199-29	27039-27043	that	
199-30	27044-27048	name	
199-31	27049-27051	is	
199-32	27052-27057	found	
199-33	27057-27058	.	

#Text=These files contain relation cache data that is always rebuilt when recovering.
200-1	27059-27064	These	
200-2	27065-27070	files	
200-3	27071-27078	contain	
200-4	27079-27087	relation	
200-5	27088-27093	cache	
200-6	27094-27098	data	
200-7	27099-27103	that	
200-8	27104-27106	is	
200-9	27107-27113	always	
200-10	27114-27121	rebuilt	
200-11	27122-27126	when	
200-12	27127-27137	recovering	
200-13	27137-27138	.	

#Text=The backup label file includes the label string you gave to pg_start_backup, as well as the time at which pg_start_backup was run, and the name of the starting WAL file.
201-1	27139-27142	The	
201-2	27143-27149	backup	
201-3	27150-27155	label	
201-4	27156-27160	file	
201-5	27161-27169	includes	
201-6	27170-27173	the	
201-7	27174-27179	label	
201-8	27180-27186	string	
201-9	27187-27190	you	
201-10	27191-27195	gave	
201-11	27196-27198	to	
201-12	27199-27214	pg_start_backup	
201-13	27214-27215	,	
201-14	27216-27218	as	
201-15	27219-27223	well	
201-16	27224-27226	as	
201-17	27227-27230	the	
201-18	27231-27235	time	
201-19	27236-27238	at	
201-20	27239-27244	which	
201-21	27245-27260	pg_start_backup	
201-22	27261-27264	was	
201-23	27265-27268	run	
201-24	27268-27269	,	
201-25	27270-27273	and	
201-26	27274-27277	the	
201-27	27278-27282	name	
201-28	27283-27285	of	
201-29	27286-27289	the	
201-30	27290-27298	starting	
201-31	27299-27302	WAL	
201-32	27303-27307	file	
201-33	27307-27308	.	

#Text=In case of confusion it is therefore possible to look inside a backup file and determine exactly which backup session the dump file came from.
202-1	27309-27311	In	
202-2	27312-27316	case	
202-3	27317-27319	of	
202-4	27320-27329	confusion	
202-5	27330-27332	it	
202-6	27333-27335	is	
202-7	27336-27345	therefore	
202-8	27346-27354	possible	
202-9	27355-27357	to	
202-10	27358-27362	look	
202-11	27363-27369	inside	
202-12	27370-27371	a	
202-13	27372-27378	backup	
202-14	27379-27383	file	
202-15	27384-27387	and	
202-16	27388-27397	determine	
202-17	27398-27405	exactly	
202-18	27406-27411	which	
202-19	27412-27418	backup	
202-20	27419-27426	session	
202-21	27427-27430	the	
202-22	27431-27435	dump	
202-23	27436-27440	file	
202-24	27441-27445	came	
202-25	27446-27450	from	
202-26	27450-27451	.	

#Text=The tablespace map file includes the symbolic link names as they exist in the directory pg_tblspc/ and the full path of each symbolic link.
203-1	27452-27455	The	
203-2	27456-27466	tablespace	
203-3	27467-27470	map	
203-4	27471-27475	file	
203-5	27476-27484	includes	
203-6	27485-27488	the	
203-7	27489-27497	symbolic	
203-8	27498-27502	link	
203-9	27503-27508	names	
203-10	27509-27511	as	
203-11	27512-27516	they	
203-12	27517-27522	exist	
203-13	27523-27525	in	
203-14	27526-27529	the	
203-15	27530-27539	directory	
203-16	27540-27549	pg_tblspc	
203-17	27549-27550	/	
203-18	27551-27554	and	
203-19	27555-27558	the	
203-20	27559-27563	full	
203-21	27564-27568	path	
203-22	27569-27571	of	
203-23	27572-27576	each	
203-24	27577-27585	symbolic	
203-25	27586-27590	link	
203-26	27590-27591	.	

#Text=These files are not merely for your information; their presence and contents are critical to the proper operation of the system's recovery process.
204-1	27592-27597	These	
204-2	27598-27603	files	
204-3	27604-27607	are	
204-4	27608-27611	not	
204-5	27612-27618	merely	
204-6	27619-27622	for	
204-7	27623-27627	your	
204-8	27628-27639	information	
204-9	27639-27640	;	
204-10	27641-27646	their	
204-11	27647-27655	presence	
204-12	27656-27659	and	
204-13	27660-27668	contents	
204-14	27669-27672	are	
204-15	27673-27681	critical	
204-16	27682-27684	to	
204-17	27685-27688	the	
204-18	27689-27695	proper	
204-19	27696-27705	operation	
204-20	27706-27708	of	
204-21	27709-27712	the	
204-22	27713-27721	system's	
204-23	27722-27730	recovery	
204-24	27731-27738	process	
204-25	27738-27739	.	

#Text=It is also possible to make a backup while the server is stopped.
205-1	27740-27742	It	
205-2	27743-27745	is	
205-3	27746-27750	also	
205-4	27751-27759	possible	
205-5	27760-27762	to	
205-6	27763-27767	make	
205-7	27768-27769	a	
205-8	27770-27776	backup	
205-9	27777-27782	while	
205-10	27783-27786	the	
205-11	27787-27793	server	
205-12	27794-27796	is	
205-13	27797-27804	stopped	
205-14	27804-27805	.	

#Text=In this case, you obviously cannot use pg_start_backup or pg_stop_backup, and you will therefore be left to your own devices to keep track of which backup is which and how far back the associated WAL files go.
206-1	27806-27808	In	
206-2	27809-27813	this	
206-3	27814-27818	case	
206-4	27818-27819	,	
206-5	27820-27823	you	
206-6	27824-27833	obviously	
206-7	27834-27840	cannot	
206-8	27841-27844	use	
206-9	27845-27860	pg_start_backup	
206-10	27861-27863	or	
206-11	27864-27878	pg_stop_backup	
206-12	27878-27879	,	
206-13	27880-27883	and	
206-14	27884-27887	you	
206-15	27888-27892	will	
206-16	27893-27902	therefore	
206-17	27903-27905	be	
206-18	27906-27910	left	
206-19	27911-27913	to	
206-20	27914-27918	your	
206-21	27919-27922	own	
206-22	27923-27930	devices	
206-23	27931-27933	to	
206-24	27934-27938	keep	
206-25	27939-27944	track	
206-26	27945-27947	of	
206-27	27948-27953	which	
206-28	27954-27960	backup	
206-29	27961-27963	is	
206-30	27964-27969	which	
206-31	27970-27973	and	
206-32	27974-27977	how	
206-33	27978-27981	far	
206-34	27982-27986	back	
206-35	27987-27990	the	
206-36	27991-28001	associated	
206-37	28002-28005	WAL	
206-38	28006-28011	files	
206-39	28012-28014	go	
206-40	28014-28015	.	

#Text=It is generally better to follow the continuous archiving procedure above.
#Text=25.3.4. 
207-1	28016-28018	It	
207-2	28019-28021	is	
207-3	28022-28031	generally	
207-4	28032-28038	better	
207-5	28039-28041	to	
207-6	28042-28048	follow	
207-7	28049-28052	the	
207-8	28053-28063	continuous	
207-9	28064-28073	archiving	
207-10	28074-28083	procedure	
207-11	28084-28089	above	
207-12	28089-28090	.	
207-13	28091-28097	25.3.4	
207-14	28097-28098	.	
207-15	28098-28099	 	

#Text=Recovering Using a Continuous Archive Backup
#Text=Okay, the worst has happened and you need to recover from your backup.
208-1	28099-28109	Recovering	
208-2	28110-28115	Using	
208-3	28116-28117	a	
208-4	28118-28128	Continuous	
208-5	28129-28136	Archive	
208-6	28137-28143	Backup	
208-7	28144-28148	Okay	
208-8	28148-28149	,	
208-9	28150-28153	the	
208-10	28154-28159	worst	
208-11	28160-28163	has	
208-12	28164-28172	happened	
208-13	28173-28176	and	
208-14	28177-28180	you	
208-15	28181-28185	need	
208-16	28186-28188	to	
208-17	28189-28196	recover	
208-18	28197-28201	from	
208-19	28202-28206	your	
208-20	28207-28213	backup	
208-21	28213-28214	.	

#Text=Here is the procedure:
#Text=Stop the server, if it's running.
209-1	28215-28219	Here	
209-2	28220-28222	is	
209-3	28223-28226	the	
209-4	28227-28236	procedure	
209-5	28236-28237	:	
209-6	28238-28242	Stop	
209-7	28243-28246	the	
209-8	28247-28253	server	
209-9	28253-28254	,	
209-10	28255-28257	if	
209-11	28258-28262	it's	
209-12	28263-28270	running	
209-13	28270-28271	.	

#Text=If you have the space to do so, copy the whole cluster data directory and any tablespaces to a temporary location in case you need them later.
210-1	28272-28274	If	
210-2	28275-28278	you	
210-3	28279-28283	have	
210-4	28284-28287	the	
210-5	28288-28293	space	
210-6	28294-28296	to	
210-7	28297-28299	do	
210-8	28300-28302	so	
210-9	28302-28303	,	
210-10	28304-28308	copy	
210-11	28309-28312	the	
210-12	28313-28318	whole	
210-13	28319-28326	cluster	
210-14	28327-28331	data	
210-15	28332-28341	directory	
210-16	28342-28345	and	
210-17	28346-28349	any	
210-18	28350-28361	tablespaces	
210-19	28362-28364	to	
210-20	28365-28366	a	
210-21	28367-28376	temporary	
210-22	28377-28385	location	
210-23	28386-28388	in	
210-24	28389-28393	case	
210-25	28394-28397	you	
210-26	28398-28402	need	
210-27	28403-28407	them	
210-28	28408-28413	later	
210-29	28413-28414	.	

#Text=Note that this precaution will require that you have enough free space on your system to hold two copies of your existing database.
211-1	28415-28419	Note	
211-2	28420-28424	that	
211-3	28425-28429	this	
211-4	28430-28440	precaution	
211-5	28441-28445	will	
211-6	28446-28453	require	
211-7	28454-28458	that	
211-8	28459-28462	you	
211-9	28463-28467	have	
211-10	28468-28474	enough	
211-11	28475-28479	free	
211-12	28480-28485	space	
211-13	28486-28488	on	
211-14	28489-28493	your	
211-15	28494-28500	system	
211-16	28501-28503	to	
211-17	28504-28508	hold	
211-18	28509-28512	two	
211-19	28513-28519	copies	
211-20	28520-28522	of	
211-21	28523-28527	your	
211-22	28528-28536	existing	
211-23	28537-28545	database	
211-24	28545-28546	.	

#Text=If you do not have enough space, you should at least save the contents of the cluster's pg_wal subdirectory, as it might contain logs which were not archived before the system went down.
212-1	28547-28549	If	
212-2	28550-28553	you	
212-3	28554-28556	do	
212-4	28557-28560	not	
212-5	28561-28565	have	
212-6	28566-28572	enough	
212-7	28573-28578	space	
212-8	28578-28579	,	
212-9	28580-28583	you	
212-10	28584-28590	should	
212-11	28591-28593	at	
212-12	28594-28599	least	
212-13	28600-28604	save	
212-14	28605-28608	the	
212-15	28609-28617	contents	
212-16	28618-28620	of	
212-17	28621-28624	the	
212-18	28625-28634	cluster's	
212-19	28635-28641	pg_wal	
212-20	28642-28654	subdirectory	
212-21	28654-28655	,	
212-22	28656-28658	as	
212-23	28659-28661	it	
212-24	28662-28667	might	
212-25	28668-28675	contain	
212-26	28676-28680	logs	
212-27	28681-28686	which	
212-28	28687-28691	were	
212-29	28692-28695	not	
212-30	28696-28704	archived	
212-31	28705-28711	before	
212-32	28712-28715	the	
212-33	28716-28722	system	
212-34	28723-28727	went	
212-35	28728-28732	down	
212-36	28732-28733	.	

#Text=Remove all existing files and subdirectories under the cluster data directory and under the root directories of any tablespaces you are using.
213-1	28734-28740	Remove	
213-2	28741-28744	all	
213-3	28745-28753	existing	
213-4	28754-28759	files	
213-5	28760-28763	and	
213-6	28764-28778	subdirectories	
213-7	28779-28784	under	
213-8	28785-28788	the	
213-9	28789-28796	cluster	
213-10	28797-28801	data	
213-11	28802-28811	directory	
213-12	28812-28815	and	
213-13	28816-28821	under	
213-14	28822-28825	the	
213-15	28826-28830	root	
213-16	28831-28842	directories	
213-17	28843-28845	of	
213-18	28846-28849	any	
213-19	28850-28861	tablespaces	
213-20	28862-28865	you	
213-21	28866-28869	are	
213-22	28870-28875	using	
213-23	28875-28876	.	

#Text=Restore the database files from your file system backup.
214-1	28877-28884	Restore	
214-2	28885-28888	the	
214-3	28889-28897	database	
214-4	28898-28903	files	
214-5	28904-28908	from	
214-6	28909-28913	your	
214-7	28914-28918	file	
214-8	28919-28925	system	
214-9	28926-28932	backup	
214-10	28932-28933	.	

#Text=Be sure that they are restored with the right ownership (the database system user, not root!)
215-1	28934-28936	Be	
215-2	28937-28941	sure	
215-3	28942-28946	that	
215-4	28947-28951	they	
215-5	28952-28955	are	
215-6	28956-28964	restored	
215-7	28965-28969	with	
215-8	28970-28973	the	
215-9	28974-28979	right	
215-10	28980-28989	ownership	
215-11	28990-28991	(	
215-12	28991-28994	the	
215-13	28995-29003	database	
215-14	29004-29010	system	
215-15	29011-29015	user	
215-16	29015-29016	,	
215-17	29017-29020	not	
215-18	29021-29025	root	
215-19	29025-29026	!	
215-20	29026-29027	)	

#Text=and with the right permissions.
216-1	29028-29031	and	
216-2	29032-29036	with	
216-3	29037-29040	the	
216-4	29041-29046	right	
216-5	29047-29058	permissions	
216-6	29058-29059	.	

#Text=If you are using tablespaces, you should verify that the symbolic links in pg_tblspc/ were correctly restored.
217-1	29060-29062	If	
217-2	29063-29066	you	
217-3	29067-29070	are	
217-4	29071-29076	using	
217-5	29077-29088	tablespaces	
217-6	29088-29089	,	
217-7	29090-29093	you	
217-8	29094-29100	should	
217-9	29101-29107	verify	
217-10	29108-29112	that	
217-11	29113-29116	the	
217-12	29117-29125	symbolic	
217-13	29126-29131	links	
217-14	29132-29134	in	
217-15	29135-29144	pg_tblspc	
217-16	29144-29145	/	
217-17	29146-29150	were	
217-18	29151-29160	correctly	
217-19	29161-29169	restored	
217-20	29169-29170	.	

#Text=Remove any files present in pg_wal/; these came from the file system backup and are therefore probably obsolete rather than current.
218-1	29171-29177	Remove	
218-2	29178-29181	any	
218-3	29182-29187	files	
218-4	29188-29195	present	
218-5	29196-29198	in	
218-6	29199-29205	pg_wal	
218-7	29205-29206	/	
218-8	29206-29207	;	
218-9	29208-29213	these	
218-10	29214-29218	came	
218-11	29219-29223	from	
218-12	29224-29227	the	
218-13	29228-29232	file	
218-14	29233-29239	system	
218-15	29240-29246	backup	
218-16	29247-29250	and	
218-17	29251-29254	are	
218-18	29255-29264	therefore	
218-19	29265-29273	probably	
218-20	29274-29282	obsolete	
218-21	29283-29289	rather	
218-22	29290-29294	than	
218-23	29295-29302	current	
218-24	29302-29303	.	

#Text=If you didn't archive pg_wal/ at all, then recreate it with proper permissions, being careful to ensure that you re-establish it as a symbolic link if you had it set up that way before.
219-1	29304-29306	If	
219-2	29307-29310	you	
219-3	29311-29317	didn't	
219-4	29318-29325	archive	
219-5	29326-29332	pg_wal	
219-6	29332-29333	/	
219-7	29334-29336	at	
219-8	29337-29340	all	
219-9	29340-29341	,	
219-10	29342-29346	then	
219-11	29347-29355	recreate	
219-12	29356-29358	it	
219-13	29359-29363	with	
219-14	29364-29370	proper	
219-15	29371-29382	permissions	
219-16	29382-29383	,	
219-17	29384-29389	being	
219-18	29390-29397	careful	
219-19	29398-29400	to	
219-20	29401-29407	ensure	
219-21	29408-29412	that	
219-22	29413-29416	you	
219-23	29417-29429	re-establish	
219-24	29430-29432	it	
219-25	29433-29435	as	
219-26	29436-29437	a	
219-27	29438-29446	symbolic	
219-28	29447-29451	link	
219-29	29452-29454	if	
219-30	29455-29458	you	
219-31	29459-29462	had	
219-32	29463-29465	it	
219-33	29466-29469	set	
219-34	29470-29472	up	
219-35	29473-29477	that	
219-36	29478-29481	way	
219-37	29482-29488	before	
219-38	29488-29489	.	

#Text=If you have unarchived WAL segment files that you saved in step 2, copy them into pg_wal/.
220-1	29490-29492	If	
220-2	29493-29496	you	
220-3	29497-29501	have	
220-4	29502-29512	unarchived	
220-5	29513-29516	WAL	
220-6	29517-29524	segment	
220-7	29525-29530	files	
220-8	29531-29535	that	
220-9	29536-29539	you	
220-10	29540-29545	saved	
220-11	29546-29548	in	
220-12	29549-29553	step	
220-13	29554-29555	2	
220-14	29555-29556	,	
220-15	29557-29561	copy	
220-16	29562-29566	them	
220-17	29567-29571	into	
220-18	29572-29578	pg_wal	
220-19	29578-29579	/	
220-20	29579-29580	.	

#Text=(It is best to copy them, not move them, so you still have the unmodified files if a problem occurs and you have to start over.)
221-1	29581-29582	(	
221-2	29582-29584	It	
221-3	29585-29587	is	
221-4	29588-29592	best	
221-5	29593-29595	to	
221-6	29596-29600	copy	
221-7	29601-29605	them	
221-8	29605-29606	,	
221-9	29607-29610	not	
221-10	29611-29615	move	
221-11	29616-29620	them	
221-12	29620-29621	,	
221-13	29622-29624	so	
221-14	29625-29628	you	
221-15	29629-29634	still	
221-16	29635-29639	have	
221-17	29640-29643	the	
221-18	29644-29654	unmodified	
221-19	29655-29660	files	
221-20	29661-29663	if	
221-21	29664-29665	a	
221-22	29666-29673	problem	
221-23	29674-29680	occurs	
221-24	29681-29684	and	
221-25	29685-29688	you	
221-26	29689-29693	have	
221-27	29694-29696	to	
221-28	29697-29702	start	
221-29	29703-29707	over	
221-30	29707-29708	.	
221-31	29708-29709	)	

#Text=Set recovery configuration settings in postgresql.conf (see Section 19.5.4) and create a file recovery.signal in the cluster data directory.
222-1	29710-29713	Set	
222-2	29714-29722	recovery	
222-3	29723-29736	configuration	
222-4	29737-29745	settings	
222-5	29746-29748	in	
222-6	29749-29764	postgresql.conf	
222-7	29765-29766	(	
222-8	29766-29769	see	
222-9	29770-29777	Section	
222-10	29777-29778	 	
222-11	29778-29784	19.5.4	
222-12	29784-29785	)	
222-13	29786-29789	and	
222-14	29790-29796	create	
222-15	29797-29798	a	
222-16	29799-29803	file	
222-17	29804-29819	recovery.signal	
222-18	29820-29822	in	
222-19	29823-29826	the	
222-20	29827-29834	cluster	
222-21	29835-29839	data	
222-22	29840-29849	directory	
222-23	29849-29850	.	

#Text=You might also want to temporarily modify pg_hba.conf to prevent ordinary users from connecting until you are sure the recovery was successful.
223-1	29851-29854	You	
223-2	29855-29860	might	
223-3	29861-29865	also	
223-4	29866-29870	want	
223-5	29871-29873	to	
223-6	29874-29885	temporarily	
223-7	29886-29892	modify	
223-8	29893-29904	pg_hba.conf	
223-9	29905-29907	to	
223-10	29908-29915	prevent	
223-11	29916-29924	ordinary	
223-12	29925-29930	users	
223-13	29931-29935	from	
223-14	29936-29946	connecting	
223-15	29947-29952	until	
223-16	29953-29956	you	
223-17	29957-29960	are	
223-18	29961-29965	sure	
223-19	29966-29969	the	
223-20	29970-29978	recovery	
223-21	29979-29982	was	
223-22	29983-29993	successful	
223-23	29993-29994	.	

#Text=Start the server.
224-1	29995-30000	Start	
224-2	30001-30004	the	
224-3	30005-30011	server	
224-4	30011-30012	.	

#Text=The server will go into recovery mode and proceed to read through the archived WAL files it needs.
225-1	30013-30016	The	
225-2	30017-30023	server	
225-3	30024-30028	will	
225-4	30029-30031	go	
225-5	30032-30036	into	
225-6	30037-30045	recovery	
225-7	30046-30050	mode	
225-8	30051-30054	and	
225-9	30055-30062	proceed	
225-10	30063-30065	to	
225-11	30066-30070	read	
225-12	30071-30078	through	
225-13	30079-30082	the	
225-14	30083-30091	archived	
225-15	30092-30095	WAL	
225-16	30096-30101	files	
225-17	30102-30104	it	
225-18	30105-30110	needs	
225-19	30110-30111	.	

#Text=Should the recovery be terminated because of an external error, the server can simply be restarted and it will continue recovery.
226-1	30112-30118	Should	
226-2	30119-30122	the	
226-3	30123-30131	recovery	
226-4	30132-30134	be	
226-5	30135-30145	terminated	
226-6	30146-30153	because	
226-7	30154-30156	of	
226-8	30157-30159	an	
226-9	30160-30168	external	
226-10	30169-30174	error	
226-11	30174-30175	,	
226-12	30176-30179	the	
226-13	30180-30186	server	
226-14	30187-30190	can	
226-15	30191-30197	simply	
226-16	30198-30200	be	
226-17	30201-30210	restarted	
226-18	30211-30214	and	
226-19	30215-30217	it	
226-20	30218-30222	will	
226-21	30223-30231	continue	
226-22	30232-30240	recovery	
226-23	30240-30241	.	

#Text=Upon completion of the recovery process, the server will remove recovery.signal (to prevent accidentally re-entering recovery mode later) and then commence normal database operations.
227-1	30242-30246	Upon	
227-2	30247-30257	completion	
227-3	30258-30260	of	
227-4	30261-30264	the	
227-5	30265-30273	recovery	
227-6	30274-30281	process	
227-7	30281-30282	,	
227-8	30283-30286	the	
227-9	30287-30293	server	
227-10	30294-30298	will	
227-11	30299-30305	remove	
227-12	30306-30321	recovery.signal	
227-13	30322-30323	(	
227-14	30323-30325	to	
227-15	30326-30333	prevent	
227-16	30334-30346	accidentally	
227-17	30347-30358	re-entering	
227-18	30359-30367	recovery	
227-19	30368-30372	mode	
227-20	30373-30378	later	
227-21	30378-30379	)	
227-22	30380-30383	and	
227-23	30384-30388	then	
227-24	30389-30397	commence	
227-25	30398-30404	normal	
227-26	30405-30413	database	
227-27	30414-30424	operations	
227-28	30424-30425	.	

#Text=Inspect the contents of the database to ensure you have recovered to the desired state.
228-1	30426-30433	Inspect	
228-2	30434-30437	the	
228-3	30438-30446	contents	
228-4	30447-30449	of	
228-5	30450-30453	the	
228-6	30454-30462	database	
228-7	30463-30465	to	
228-8	30466-30472	ensure	
228-9	30473-30476	you	
228-10	30477-30481	have	
228-11	30482-30491	recovered	
228-12	30492-30494	to	
228-13	30495-30498	the	
228-14	30499-30506	desired	
228-15	30507-30512	state	
228-16	30512-30513	.	

#Text=If not, return to step 1.
229-1	30514-30516	If	
229-2	30517-30520	not	
229-3	30520-30521	,	
229-4	30522-30528	return	
229-5	30529-30531	to	
229-6	30532-30536	step	
229-7	30537-30538	1	
229-8	30538-30539	.	

#Text=If all is well, allow your users to connect by restoring pg_hba.conf to normal.
230-1	30540-30542	If	
230-2	30543-30546	all	
230-3	30547-30549	is	
230-4	30550-30554	well	
230-5	30554-30555	,	
230-6	30556-30561	allow	
230-7	30562-30566	your	
230-8	30567-30572	users	
230-9	30573-30575	to	
230-10	30576-30583	connect	
230-11	30584-30586	by	
230-12	30587-30596	restoring	
230-13	30597-30608	pg_hba.conf	
230-14	30609-30611	to	
230-15	30612-30618	normal	
230-16	30618-30619	.	

#Text=The key part of all this is to set up a recovery configuration that describes how you want to recover and how far the recovery should run.
231-1	30620-30623	The	
231-2	30624-30627	key	
231-3	30628-30632	part	
231-4	30633-30635	of	
231-5	30636-30639	all	
231-6	30640-30644	this	
231-7	30645-30647	is	
231-8	30648-30650	to	
231-9	30651-30654	set	
231-10	30655-30657	up	
231-11	30658-30659	a	
231-12	30660-30668	recovery	
231-13	30669-30682	configuration	
231-14	30683-30687	that	
231-15	30688-30697	describes	
231-16	30698-30701	how	
231-17	30702-30705	you	
231-18	30706-30710	want	
231-19	30711-30713	to	
231-20	30714-30721	recover	
231-21	30722-30725	and	
231-22	30726-30729	how	
231-23	30730-30733	far	
231-24	30734-30737	the	
231-25	30738-30746	recovery	
231-26	30747-30753	should	
231-27	30754-30757	run	
231-28	30757-30758	.	

#Text=The one thing that you absolutely must specify is the restore_command, which tells PostgreSQL how to retrieve archived WAL file segments.
232-1	30759-30762	The	
232-2	30763-30766	one	
232-3	30767-30772	thing	
232-4	30773-30777	that	
232-5	30778-30781	you	
232-6	30782-30792	absolutely	
232-7	30793-30797	must	
232-8	30798-30805	specify	
232-9	30806-30808	is	
232-10	30809-30812	the	
232-11	30813-30828	restore_command	
232-12	30828-30829	,	
232-13	30830-30835	which	
232-14	30836-30841	tells	
232-15	30842-30852	PostgreSQL	
232-16	30853-30856	how	
232-17	30857-30859	to	
232-18	30860-30868	retrieve	
232-19	30869-30877	archived	
232-20	30878-30881	WAL	
232-21	30882-30886	file	
232-22	30887-30895	segments	
232-23	30895-30896	.	

#Text=Like the archive_command, this is a shell command string.
233-1	30897-30901	Like	
233-2	30902-30905	the	
233-3	30906-30921	archive_command	
233-4	30921-30922	,	
233-5	30923-30927	this	
233-6	30928-30930	is	
233-7	30931-30932	a	
233-8	30933-30938	shell	
233-9	30939-30946	command	
233-10	30947-30953	string	
233-11	30953-30954	.	

#Text=It can contain %f, which is replaced by the name of the desired log file, and %p, which is replaced by the path name to copy the log file to.
234-1	30955-30957	It	
234-2	30958-30961	can	
234-3	30962-30969	contain	
234-4	30970-30971	%	
234-5	30971-30972	f	
234-6	30972-30973	,	
234-7	30974-30979	which	
234-8	30980-30982	is	
234-9	30983-30991	replaced	
234-10	30992-30994	by	
234-11	30995-30998	the	
234-12	30999-31003	name	
234-13	31004-31006	of	
234-14	31007-31010	the	
234-15	31011-31018	desired	
234-16	31019-31022	log	
234-17	31023-31027	file	
234-18	31027-31028	,	
234-19	31029-31032	and	
234-20	31033-31034	%	
234-21	31034-31035	p	
234-22	31035-31036	,	
234-23	31037-31042	which	
234-24	31043-31045	is	
234-25	31046-31054	replaced	
234-26	31055-31057	by	
234-27	31058-31061	the	
234-28	31062-31066	path	
234-29	31067-31071	name	
234-30	31072-31074	to	
234-31	31075-31079	copy	
234-32	31080-31083	the	
234-33	31084-31087	log	
234-34	31088-31092	file	
234-35	31093-31095	to	
234-36	31095-31096	.	

#Text=(The path name is relative to the current working directory, i.e., the cluster's data directory.)
235-1	31097-31098	(	
235-2	31098-31101	The	
235-3	31102-31106	path	
235-4	31107-31111	name	
235-5	31112-31114	is	
235-6	31115-31123	relative	
235-7	31124-31126	to	
235-8	31127-31130	the	
235-9	31131-31138	current	
235-10	31139-31146	working	
235-11	31147-31156	directory	
235-12	31156-31157	,	
235-13	31158-31161	i.e	
235-14	31161-31162	.	
235-15	31162-31163	,	
235-16	31164-31167	the	
235-17	31168-31177	cluster's	
235-18	31178-31182	data	
235-19	31183-31192	directory	
235-20	31192-31193	.	
235-21	31193-31194	)	

#Text=Write %% if you need to embed an actual % character in the command.
236-1	31195-31200	Write	
236-2	31201-31202	%	
236-3	31202-31203	%	
236-4	31204-31206	if	
236-5	31207-31210	you	
236-6	31211-31215	need	
236-7	31216-31218	to	
236-8	31219-31224	embed	
236-9	31225-31227	an	
236-10	31228-31234	actual	
236-11	31235-31236	%	
236-12	31237-31246	character	
236-13	31247-31249	in	
236-14	31250-31253	the	
236-15	31254-31261	command	
236-16	31261-31262	.	

#Text=The simplest useful command is something like:
#Text=restore_command = 'cp /mnt/server/archivedir/%f %p'
#Text=which will copy previously archived WAL segments from the directory /mnt/server/archivedir.
237-1	31263-31266	The	
237-2	31267-31275	simplest	
237-3	31276-31282	useful	
237-4	31283-31290	command	
237-5	31291-31293	is	
237-6	31294-31303	something	
237-7	31304-31308	like	
237-8	31308-31309	:	
237-9	31310-31325	restore_command	
237-10	31326-31327	=	
237-11	31328-31329	'	
237-12	31329-31331	cp	
237-13	31332-31333	/	
237-14	31333-31336	mnt	
237-15	31336-31337	/	
237-16	31337-31343	server	
237-17	31343-31344	/	
237-18	31344-31354	archivedir	
237-19	31354-31355	/	
237-20	31355-31356	%	
237-21	31356-31357	f	
237-22	31358-31359	%	
237-23	31359-31360	p	
237-24	31360-31361	'	
237-25	31362-31367	which	
237-26	31368-31372	will	
237-27	31373-31377	copy	
237-28	31378-31388	previously	
237-29	31389-31397	archived	
237-30	31398-31401	WAL	
237-31	31402-31410	segments	
237-32	31411-31415	from	
237-33	31416-31419	the	
237-34	31420-31429	directory	
237-35	31430-31431	/	
237-36	31431-31434	mnt	
237-37	31434-31435	/	
237-38	31435-31441	server	
237-39	31441-31442	/	
237-40	31442-31452	archivedir	
237-41	31452-31453	.	

#Text=Of course, you can use something much more complicated, perhaps even a shell script that requests the operator to mount an appropriate tape.
238-1	31454-31456	Of	
238-2	31457-31463	course	
238-3	31463-31464	,	
238-4	31465-31468	you	
238-5	31469-31472	can	
238-6	31473-31476	use	
238-7	31477-31486	something	
238-8	31487-31491	much	
238-9	31492-31496	more	
238-10	31497-31508	complicated	
238-11	31508-31509	,	
238-12	31510-31517	perhaps	
238-13	31518-31522	even	
238-14	31523-31524	a	
238-15	31525-31530	shell	
238-16	31531-31537	script	
238-17	31538-31542	that	
238-18	31543-31551	requests	
238-19	31552-31555	the	
238-20	31556-31564	operator	
238-21	31565-31567	to	
238-22	31568-31573	mount	
238-23	31574-31576	an	
238-24	31577-31588	appropriate	
238-25	31589-31593	tape	
238-26	31593-31594	.	

#Text=It is important that the command return nonzero exit status on failure.
239-1	31595-31597	It	
239-2	31598-31600	is	
239-3	31601-31610	important	
239-4	31611-31615	that	
239-5	31616-31619	the	
239-6	31620-31627	command	
239-7	31628-31634	return	
239-8	31635-31642	nonzero	
239-9	31643-31647	exit	
239-10	31648-31654	status	
239-11	31655-31657	on	
239-12	31658-31665	failure	
239-13	31665-31666	.	

#Text=The command will be called requesting files that are not present in the archive; it must return nonzero when so asked.
240-1	31667-31670	The	
240-2	31671-31678	command	
240-3	31679-31683	will	
240-4	31684-31686	be	
240-5	31687-31693	called	
240-6	31694-31704	requesting	
240-7	31705-31710	files	
240-8	31711-31715	that	
240-9	31716-31719	are	
240-10	31720-31723	not	
240-11	31724-31731	present	
240-12	31732-31734	in	
240-13	31735-31738	the	
240-14	31739-31746	archive	
240-15	31746-31747	;	
240-16	31748-31750	it	
240-17	31751-31755	must	
240-18	31756-31762	return	
240-19	31763-31770	nonzero	
240-20	31771-31775	when	
240-21	31776-31778	so	
240-22	31779-31784	asked	
240-23	31784-31785	.	

#Text=This is not an error condition.
241-1	31786-31790	This	
241-2	31791-31793	is	
241-3	31794-31797	not	
241-4	31798-31800	an	
241-5	31801-31806	error	
241-6	31807-31816	condition	
241-7	31816-31817	.	

#Text=An exception is that if the command was terminated by a signal (other than SIGTERM, which is used as part of a database server shutdown) or an error by the shell (such as command not found), then recovery will abort and the server will not start up.
242-1	31818-31820	An	
242-2	31821-31830	exception	
242-3	31831-31833	is	
242-4	31834-31838	that	
242-5	31839-31841	if	
242-6	31842-31845	the	
242-7	31846-31853	command	
242-8	31854-31857	was	
242-9	31858-31868	terminated	
242-10	31869-31871	by	
242-11	31872-31873	a	
242-12	31874-31880	signal	
242-13	31881-31882	(	
242-14	31882-31887	other	
242-15	31888-31892	than	
242-16	31893-31900	SIGTERM	
242-17	31900-31901	,	
242-18	31902-31907	which	
242-19	31908-31910	is	
242-20	31911-31915	used	
242-21	31916-31918	as	
242-22	31919-31923	part	
242-23	31924-31926	of	
242-24	31927-31928	a	
242-25	31929-31937	database	
242-26	31938-31944	server	
242-27	31945-31953	shutdown	
242-28	31953-31954	)	
242-29	31955-31957	or	
242-30	31958-31960	an	
242-31	31961-31966	error	
242-32	31967-31969	by	
242-33	31970-31973	the	
242-34	31974-31979	shell	
242-35	31980-31981	(	
242-36	31981-31985	such	
242-37	31986-31988	as	
242-38	31989-31996	command	
242-39	31997-32000	not	
242-40	32001-32006	found	
242-41	32006-32007	)	
242-42	32007-32008	,	
242-43	32009-32013	then	
242-44	32014-32022	recovery	
242-45	32023-32027	will	
242-46	32028-32033	abort	
242-47	32034-32037	and	
242-48	32038-32041	the	
242-49	32042-32048	server	
242-50	32049-32053	will	
242-51	32054-32057	not	
242-52	32058-32063	start	
242-53	32064-32066	up	
242-54	32066-32067	.	

#Text=Not all of the requested files will be WAL segment files; you should also expect requests for files with a suffix of .history.
243-1	32068-32071	Not	
243-2	32072-32075	all	
243-3	32076-32078	of	
243-4	32079-32082	the	
243-5	32083-32092	requested	
243-6	32093-32098	files	
243-7	32099-32103	will	
243-8	32104-32106	be	
243-9	32107-32110	WAL	
243-10	32111-32118	segment	
243-11	32119-32124	files	
243-12	32124-32125	;	
243-13	32126-32129	you	
243-14	32130-32136	should	
243-15	32137-32141	also	
243-16	32142-32148	expect	
243-17	32149-32157	requests	
243-18	32158-32161	for	
243-19	32162-32167	files	
243-20	32168-32172	with	
243-21	32173-32174	a	
243-22	32175-32181	suffix	
243-23	32182-32184	of	
243-24	32185-32186	.	
243-25	32186-32193	history	
243-26	32193-32194	.	

#Text=Also be aware that the base name of the %p path will be different from %f; do not expect them to be interchangeable.
244-1	32195-32199	Also	
244-2	32200-32202	be	
244-3	32203-32208	aware	
244-4	32209-32213	that	
244-5	32214-32217	the	
244-6	32218-32222	base	
244-7	32223-32227	name	
244-8	32228-32230	of	
244-9	32231-32234	the	
244-10	32235-32236	%	
244-11	32236-32237	p	
244-12	32238-32242	path	
244-13	32243-32247	will	
244-14	32248-32250	be	
244-15	32251-32260	different	
244-16	32261-32265	from	
244-17	32266-32267	%	
244-18	32267-32268	f	
244-19	32268-32269	;	
244-20	32270-32272	do	
244-21	32273-32276	not	
244-22	32277-32283	expect	
244-23	32284-32288	them	
244-24	32289-32291	to	
244-25	32292-32294	be	
244-26	32295-32310	interchangeable	
244-27	32310-32311	.	

#Text=WAL segments that cannot be found in the archive will be sought in pg_wal/; this allows use of recent un-archived segments.
245-1	32312-32315	WAL	
245-2	32316-32324	segments	
245-3	32325-32329	that	
245-4	32330-32336	cannot	
245-5	32337-32339	be	
245-6	32340-32345	found	
245-7	32346-32348	in	
245-8	32349-32352	the	
245-9	32353-32360	archive	
245-10	32361-32365	will	
245-11	32366-32368	be	
245-12	32369-32375	sought	
245-13	32376-32378	in	
245-14	32379-32385	pg_wal	
245-15	32385-32386	/	
245-16	32386-32387	;	
245-17	32388-32392	this	
245-18	32393-32399	allows	
245-19	32400-32403	use	
245-20	32404-32406	of	
245-21	32407-32413	recent	
245-22	32414-32425	un-archived	
245-23	32426-32434	segments	
245-24	32434-32435	.	

#Text=However, segments that are available from the archive will be used in preference to files in pg_wal/.
246-1	32436-32443	However	
246-2	32443-32444	,	
246-3	32445-32453	segments	
246-4	32454-32458	that	
246-5	32459-32462	are	
246-6	32463-32472	available	
246-7	32473-32477	from	
246-8	32478-32481	the	
246-9	32482-32489	archive	
246-10	32490-32494	will	
246-11	32495-32497	be	
246-12	32498-32502	used	
246-13	32503-32505	in	
246-14	32506-32516	preference	
246-15	32517-32519	to	
246-16	32520-32525	files	
246-17	32526-32528	in	
246-18	32529-32535	pg_wal	
246-19	32535-32536	/	
246-20	32536-32537	.	

#Text=Normally, recovery will proceed through all available WAL segments, thereby restoring the database to the current point in time (or as close as possible given the available WAL segments).
247-1	32538-32546	Normally	
247-2	32546-32547	,	
247-3	32548-32556	recovery	
247-4	32557-32561	will	
247-5	32562-32569	proceed	
247-6	32570-32577	through	
247-7	32578-32581	all	
247-8	32582-32591	available	
247-9	32592-32595	WAL	
247-10	32596-32604	segments	
247-11	32604-32605	,	
247-12	32606-32613	thereby	
247-13	32614-32623	restoring	
247-14	32624-32627	the	
247-15	32628-32636	database	
247-16	32637-32639	to	
247-17	32640-32643	the	
247-18	32644-32651	current	
247-19	32652-32657	point	
247-20	32658-32660	in	
247-21	32661-32665	time	
247-22	32666-32667	(	
247-23	32667-32669	or	
247-24	32670-32672	as	
247-25	32673-32678	close	
247-26	32679-32681	as	
247-27	32682-32690	possible	
247-28	32691-32696	given	
247-29	32697-32700	the	
247-30	32701-32710	available	
247-31	32711-32714	WAL	
247-32	32715-32723	segments	
247-33	32723-32724	)	
247-34	32724-32725	.	

#Text=Therefore, a normal recovery will end with a “file not found” message, the exact text of the error message depending upon your choice of restore_command.
248-1	32726-32735	Therefore	
248-2	32735-32736	,	
248-3	32737-32738	a	
248-4	32739-32745	normal	
248-5	32746-32754	recovery	
248-6	32755-32759	will	
248-7	32760-32763	end	
248-8	32764-32768	with	
248-9	32769-32770	a	
248-10	32771-32772	“	
248-11	32772-32776	file	
248-12	32777-32780	not	
248-13	32781-32786	found	
248-14	32786-32787	”	
248-15	32788-32795	message	
248-16	32795-32796	,	
248-17	32797-32800	the	
248-18	32801-32806	exact	
248-19	32807-32811	text	
248-20	32812-32814	of	
248-21	32815-32818	the	
248-22	32819-32824	error	
248-23	32825-32832	message	
248-24	32833-32842	depending	
248-25	32843-32847	upon	
248-26	32848-32852	your	
248-27	32853-32859	choice	
248-28	32860-32862	of	
248-29	32863-32878	restore_command	
248-30	32878-32879	.	

#Text=You may also see an error message at the start of recovery for a file named something like 00000001.history.
249-1	32880-32883	You	
249-2	32884-32887	may	
249-3	32888-32892	also	
249-4	32893-32896	see	
249-5	32897-32899	an	
249-6	32900-32905	error	
249-7	32906-32913	message	
249-8	32914-32916	at	
249-9	32917-32920	the	
249-10	32921-32926	start	
249-11	32927-32929	of	
249-12	32930-32938	recovery	
249-13	32939-32942	for	
249-14	32943-32944	a	
249-15	32945-32949	file	
249-16	32950-32955	named	
249-17	32956-32965	something	
249-18	32966-32970	like	
249-19	32971-32979	00000001	
249-20	32979-32980	.	
249-21	32980-32987	history	
249-22	32987-32988	.	

#Text=This is also normal and does not indicate a problem in simple recovery situations; see Section 25.3.5 for discussion.
250-1	32989-32993	This	
250-2	32994-32996	is	
250-3	32997-33001	also	
250-4	33002-33008	normal	
250-5	33009-33012	and	
250-6	33013-33017	does	
250-7	33018-33021	not	
250-8	33022-33030	indicate	
250-9	33031-33032	a	
250-10	33033-33040	problem	
250-11	33041-33043	in	
250-12	33044-33050	simple	
250-13	33051-33059	recovery	
250-14	33060-33070	situations	
250-15	33070-33071	;	
250-16	33072-33075	see	
250-17	33076-33083	Section	
250-18	33083-33084	 	
250-19	33084-33090	25.3.5	
250-20	33091-33094	for	
250-21	33095-33105	discussion	
250-22	33105-33106	.	

#Text=If you want to recover to some previous point in time (say, right before the junior DBA dropped your main transaction table), just specify the required stopping point.
251-1	33107-33109	If	
251-2	33110-33113	you	
251-3	33114-33118	want	
251-4	33119-33121	to	
251-5	33122-33129	recover	
251-6	33130-33132	to	
251-7	33133-33137	some	
251-8	33138-33146	previous	
251-9	33147-33152	point	
251-10	33153-33155	in	
251-11	33156-33160	time	
251-12	33161-33162	(	
251-13	33162-33165	say	
251-14	33165-33166	,	
251-15	33167-33172	right	
251-16	33173-33179	before	
251-17	33180-33183	the	
251-18	33184-33190	junior	
251-19	33191-33194	DBA	
251-20	33195-33202	dropped	
251-21	33203-33207	your	
251-22	33208-33212	main	
251-23	33213-33224	transaction	
251-24	33225-33230	table	
251-25	33230-33231	)	
251-26	33231-33232	,	
251-27	33233-33237	just	
251-28	33238-33245	specify	
251-29	33246-33249	the	
251-30	33250-33258	required	
251-31	33259-33267	stopping	
251-32	33268-33273	point	
251-33	33273-33274	.	

#Text=You can specify the stop point, known as the “recovery target”, either by date/time, named restore point or by completion of a specific transaction ID.
252-1	33275-33278	You	
252-2	33279-33282	can	
252-3	33283-33290	specify	
252-4	33291-33294	the	
252-5	33295-33299	stop	
252-6	33300-33305	point	
252-7	33305-33306	,	
252-8	33307-33312	known	
252-9	33313-33315	as	
252-10	33316-33319	the	
252-11	33320-33321	“	
252-12	33321-33329	recovery	
252-13	33330-33336	target	
252-14	33336-33337	”	
252-15	33337-33338	,	
252-16	33339-33345	either	
252-17	33346-33348	by	
252-18	33349-33353	date	
252-19	33353-33354	/	
252-20	33354-33358	time	
252-21	33358-33359	,	
252-22	33360-33365	named	
252-23	33366-33373	restore	
252-24	33374-33379	point	
252-25	33380-33382	or	
252-26	33383-33385	by	
252-27	33386-33396	completion	
252-28	33397-33399	of	
252-29	33400-33401	a	
252-30	33402-33410	specific	
252-31	33411-33422	transaction	
252-32	33423-33425	ID	
252-33	33425-33426	.	

#Text=As of this writing only the date/time and named restore point options are very usable, since there are no tools to help you identify with any accuracy which transaction ID to use.
253-1	33427-33429	As	
253-2	33430-33432	of	
253-3	33433-33437	this	
253-4	33438-33445	writing	
253-5	33446-33450	only	
253-6	33451-33454	the	
253-7	33455-33459	date	
253-8	33459-33460	/	
253-9	33460-33464	time	
253-10	33465-33468	and	
253-11	33469-33474	named	
253-12	33475-33482	restore	
253-13	33483-33488	point	
253-14	33489-33496	options	
253-15	33497-33500	are	
253-16	33501-33505	very	
253-17	33506-33512	usable	
253-18	33512-33513	,	
253-19	33514-33519	since	
253-20	33520-33525	there	
253-21	33526-33529	are	
253-22	33530-33532	no	
253-23	33533-33538	tools	
253-24	33539-33541	to	
253-25	33542-33546	help	
253-26	33547-33550	you	
253-27	33551-33559	identify	
253-28	33560-33564	with	
253-29	33565-33568	any	
253-30	33569-33577	accuracy	
253-31	33578-33583	which	
253-32	33584-33595	transaction	
253-33	33596-33598	ID	
253-34	33599-33601	to	
253-35	33602-33605	use	
253-36	33605-33606	.	

#Text=Note
#Text=The stop point must be after the ending time of the base backup, i.e., the end time of pg_stop_backup.
254-1	33607-33611	Note	
254-2	33612-33615	The	
254-3	33616-33620	stop	
254-4	33621-33626	point	
254-5	33627-33631	must	
254-6	33632-33634	be	
254-7	33635-33640	after	
254-8	33641-33644	the	
254-9	33645-33651	ending	
254-10	33652-33656	time	
254-11	33657-33659	of	
254-12	33660-33663	the	
254-13	33664-33668	base	
254-14	33669-33675	backup	
254-15	33675-33676	,	
254-16	33677-33680	i.e	
254-17	33680-33681	.	
254-18	33681-33682	,	
254-19	33683-33686	the	
254-20	33687-33690	end	
254-21	33691-33695	time	
254-22	33696-33698	of	
254-23	33699-33713	pg_stop_backup	
254-24	33713-33714	.	

#Text=You cannot use a base backup to recover to a time when that backup was in progress.
255-1	33715-33718	You	
255-2	33719-33725	cannot	
255-3	33726-33729	use	
255-4	33730-33731	a	
255-5	33732-33736	base	
255-6	33737-33743	backup	
255-7	33744-33746	to	
255-8	33747-33754	recover	
255-9	33755-33757	to	
255-10	33758-33759	a	
255-11	33760-33764	time	
255-12	33765-33769	when	
255-13	33770-33774	that	
255-14	33775-33781	backup	
255-15	33782-33785	was	
255-16	33786-33788	in	
255-17	33789-33797	progress	
255-18	33797-33798	.	

#Text=(To recover to such a time, you must go back to your previous base backup and roll forward from there.)
256-1	33799-33800	(	
256-2	33800-33802	To	
256-3	33803-33810	recover	
256-4	33811-33813	to	
256-5	33814-33818	such	
256-6	33819-33820	a	
256-7	33821-33825	time	
256-8	33825-33826	,	
256-9	33827-33830	you	
256-10	33831-33835	must	
256-11	33836-33838	go	
256-12	33839-33843	back	
256-13	33844-33846	to	
256-14	33847-33851	your	
256-15	33852-33860	previous	
256-16	33861-33865	base	
256-17	33866-33872	backup	
256-18	33873-33876	and	
256-19	33877-33881	roll	
256-20	33882-33889	forward	
256-21	33890-33894	from	
256-22	33895-33900	there	
256-23	33900-33901	.	
256-24	33901-33902	)	

#Text=If recovery finds corrupted WAL data, recovery will halt at that point and the server will not start.
257-1	33903-33905	If	
257-2	33906-33914	recovery	
257-3	33915-33920	finds	
257-4	33921-33930	corrupted	
257-5	33931-33934	WAL	
257-6	33935-33939	data	
257-7	33939-33940	,	
257-8	33941-33949	recovery	
257-9	33950-33954	will	
257-10	33955-33959	halt	
257-11	33960-33962	at	
257-12	33963-33967	that	
257-13	33968-33973	point	
257-14	33974-33977	and	
257-15	33978-33981	the	
257-16	33982-33988	server	
257-17	33989-33993	will	
257-18	33994-33997	not	
257-19	33998-34003	start	
257-20	34003-34004	.	

#Text=In such a case the recovery process could be re-run from the beginning, specifying a “recovery target” before the point of corruption so that recovery can complete normally.
258-1	34005-34007	In	
258-2	34008-34012	such	
258-3	34013-34014	a	
258-4	34015-34019	case	
258-5	34020-34023	the	
258-6	34024-34032	recovery	
258-7	34033-34040	process	
258-8	34041-34046	could	
258-9	34047-34049	be	
258-10	34050-34056	re-run	
258-11	34057-34061	from	
258-12	34062-34065	the	
258-13	34066-34075	beginning	
258-14	34075-34076	,	
258-15	34077-34087	specifying	
258-16	34088-34089	a	
258-17	34090-34091	“	
258-18	34091-34099	recovery	
258-19	34100-34106	target	
258-20	34106-34107	”	
258-21	34108-34114	before	
258-22	34115-34118	the	
258-23	34119-34124	point	
258-24	34125-34127	of	
258-25	34128-34138	corruption	
258-26	34139-34141	so	
258-27	34142-34146	that	
258-28	34147-34155	recovery	
258-29	34156-34159	can	
258-30	34160-34168	complete	
258-31	34169-34177	normally	
258-32	34177-34178	.	

#Text=If recovery fails for an external reason, such as a system crash or if the WAL archive has become inaccessible, then the recovery can simply be restarted and it will restart almost from where it failed.
259-1	34179-34181	If	
259-2	34182-34190	recovery	
259-3	34191-34196	fails	
259-4	34197-34200	for	
259-5	34201-34203	an	
259-6	34204-34212	external	
259-7	34213-34219	reason	
259-8	34219-34220	,	
259-9	34221-34225	such	
259-10	34226-34228	as	
259-11	34229-34230	a	
259-12	34231-34237	system	
259-13	34238-34243	crash	
259-14	34244-34246	or	
259-15	34247-34249	if	
259-16	34250-34253	the	
259-17	34254-34257	WAL	
259-18	34258-34265	archive	
259-19	34266-34269	has	
259-20	34270-34276	become	
259-21	34277-34289	inaccessible	
259-22	34289-34290	,	
259-23	34291-34295	then	
259-24	34296-34299	the	
259-25	34300-34308	recovery	
259-26	34309-34312	can	
259-27	34313-34319	simply	
259-28	34320-34322	be	
259-29	34323-34332	restarted	
259-30	34333-34336	and	
259-31	34337-34339	it	
259-32	34340-34344	will	
259-33	34345-34352	restart	
259-34	34353-34359	almost	
259-35	34360-34364	from	
259-36	34365-34370	where	
259-37	34371-34373	it	
259-38	34374-34380	failed	
259-39	34380-34381	.	

#Text=Recovery restart works much like checkpointing in normal operation: the server periodically forces all its state to disk, and then updates the pg_control file to indicate that the already-processed WAL data need not be scanned again.
#Text=25.3.5. 
260-1	34382-34390	Recovery	
260-2	34391-34398	restart	
260-3	34399-34404	works	
260-4	34405-34409	much	
260-5	34410-34414	like	
260-6	34415-34428	checkpointing	
260-7	34429-34431	in	
260-8	34432-34438	normal	
260-9	34439-34448	operation	
260-10	34448-34449	:	
260-11	34450-34453	the	
260-12	34454-34460	server	
260-13	34461-34473	periodically	
260-14	34474-34480	forces	
260-15	34481-34484	all	
260-16	34485-34488	its	
260-17	34489-34494	state	
260-18	34495-34497	to	
260-19	34498-34502	disk	
260-20	34502-34503	,	
260-21	34504-34507	and	
260-22	34508-34512	then	
260-23	34513-34520	updates	
260-24	34521-34524	the	
260-25	34525-34535	pg_control	
260-26	34536-34540	file	
260-27	34541-34543	to	
260-28	34544-34552	indicate	
260-29	34553-34557	that	
260-30	34558-34561	the	
260-31	34562-34579	already-processed	
260-32	34580-34583	WAL	
260-33	34584-34588	data	
260-34	34589-34593	need	
260-35	34594-34597	not	
260-36	34598-34600	be	
260-37	34601-34608	scanned	
260-38	34609-34614	again	
260-39	34614-34615	.	
260-40	34616-34622	25.3.5	
260-41	34622-34623	.	
260-42	34623-34624	 	

#Text=Timelines
#Text=The ability to restore the database to a previous point in time creates some complexities that are akin to science-fiction stories about time travel and parallel universes.
261-1	34624-34633	Timelines	
261-2	34634-34637	The	
261-3	34638-34645	ability	
261-4	34646-34648	to	
261-5	34649-34656	restore	
261-6	34657-34660	the	
261-7	34661-34669	database	
261-8	34670-34672	to	
261-9	34673-34674	a	
261-10	34675-34683	previous	
261-11	34684-34689	point	
261-12	34690-34692	in	
261-13	34693-34697	time	
261-14	34698-34705	creates	
261-15	34706-34710	some	
261-16	34711-34723	complexities	
261-17	34724-34728	that	
261-18	34729-34732	are	
261-19	34733-34737	akin	
261-20	34738-34740	to	
261-21	34741-34756	science-fiction	
261-22	34757-34764	stories	
261-23	34765-34770	about	
261-24	34771-34775	time	
261-25	34776-34782	travel	
261-26	34783-34786	and	
261-27	34787-34795	parallel	
261-28	34796-34805	universes	
261-29	34805-34806	.	

#Text=For example, in the original history of the database, suppose you dropped a critical table at 5:15PM on Tuesday evening, but didn't realize your mistake until Wednesday noon.
262-1	34807-34810	For	
262-2	34811-34818	example	
262-3	34818-34819	,	
262-4	34820-34822	in	
262-5	34823-34826	the	
262-6	34827-34835	original	
262-7	34836-34843	history	
262-8	34844-34846	of	
262-9	34847-34850	the	
262-10	34851-34859	database	
262-11	34859-34860	,	
262-12	34861-34868	suppose	
262-13	34869-34872	you	
262-14	34873-34880	dropped	
262-15	34881-34882	a	
262-16	34883-34891	critical	
262-17	34892-34897	table	
262-18	34898-34900	at	
262-19	34901-34902	5	
262-20	34902-34903	:	
262-21	34903-34907	15PM	
262-22	34908-34910	on	
262-23	34911-34918	Tuesday	
262-24	34919-34926	evening	
262-25	34926-34927	,	
262-26	34928-34931	but	
262-27	34932-34938	didn't	
262-28	34939-34946	realize	
262-29	34947-34951	your	
262-30	34952-34959	mistake	
262-31	34960-34965	until	
262-32	34966-34975	Wednesday	
262-33	34976-34980	noon	
262-34	34980-34981	.	

#Text=Unfazed, you get out your backup, restore to the point-in-time 5:14PM Tuesday evening, and are up and running.
263-1	34982-34989	Unfazed	
263-2	34989-34990	,	
263-3	34991-34994	you	
263-4	34995-34998	get	
263-5	34999-35002	out	
263-6	35003-35007	your	
263-7	35008-35014	backup	
263-8	35014-35015	,	
263-9	35016-35023	restore	
263-10	35024-35026	to	
263-11	35027-35030	the	
263-12	35031-35044	point-in-time	
263-13	35045-35046	5	
263-14	35046-35047	:	
263-15	35047-35051	14PM	
263-16	35052-35059	Tuesday	
263-17	35060-35067	evening	
263-18	35067-35068	,	
263-19	35069-35072	and	
263-20	35073-35076	are	
263-21	35077-35079	up	
263-22	35080-35083	and	
263-23	35084-35091	running	
263-24	35091-35092	.	

#Text=In this history of the database universe, you never dropped the table.
264-1	35093-35095	In	
264-2	35096-35100	this	
264-3	35101-35108	history	
264-4	35109-35111	of	
264-5	35112-35115	the	
264-6	35116-35124	database	
264-7	35125-35133	universe	
264-8	35133-35134	,	
264-9	35135-35138	you	
264-10	35139-35144	never	
264-11	35145-35152	dropped	
264-12	35153-35156	the	
264-13	35157-35162	table	
264-14	35162-35163	.	

#Text=But suppose you later realize this wasn't such a great idea, and would like to return to sometime Wednesday morning in the original history.
265-1	35164-35167	But	
265-2	35168-35175	suppose	
265-3	35176-35179	you	
265-4	35180-35185	later	
265-5	35186-35193	realize	
265-6	35194-35198	this	
265-7	35199-35205	wasn't	
265-8	35206-35210	such	
265-9	35211-35212	a	
265-10	35213-35218	great	
265-11	35219-35223	idea	
265-12	35223-35224	,	
265-13	35225-35228	and	
265-14	35229-35234	would	
265-15	35235-35239	like	
265-16	35240-35242	to	
265-17	35243-35249	return	
265-18	35250-35252	to	
265-19	35253-35261	sometime	
265-20	35262-35271	Wednesday	
265-21	35272-35279	morning	
265-22	35280-35282	in	
265-23	35283-35286	the	
265-24	35287-35295	original	
265-25	35296-35303	history	
265-26	35303-35304	.	

#Text=You won't be able to if, while your database was up-and-running, it overwrote some of the WAL segment files that led up to the time you now wish you could get back to.
266-1	35305-35308	You	
266-2	35309-35314	won't	
266-3	35315-35317	be	
266-4	35318-35322	able	
266-5	35323-35325	to	
266-6	35326-35328	if	
266-7	35328-35329	,	
266-8	35330-35335	while	
266-9	35336-35340	your	
266-10	35341-35349	database	
266-11	35350-35353	was	
266-12	35354-35368	up-and-running	
266-13	35368-35369	,	
266-14	35370-35372	it	
266-15	35373-35382	overwrote	
266-16	35383-35387	some	
266-17	35388-35390	of	
266-18	35391-35394	the	
266-19	35395-35398	WAL	
266-20	35399-35406	segment	
266-21	35407-35412	files	
266-22	35413-35417	that	
266-23	35418-35421	led	
266-24	35422-35424	up	
266-25	35425-35427	to	
266-26	35428-35431	the	
266-27	35432-35436	time	
266-28	35437-35440	you	
266-29	35441-35444	now	
266-30	35445-35449	wish	
266-31	35450-35453	you	
266-32	35454-35459	could	
266-33	35460-35463	get	
266-34	35464-35468	back	
266-35	35469-35471	to	
266-36	35471-35472	.	

#Text=Thus, to avoid this, you need to distinguish the series of WAL records generated after you've done a point-in-time recovery from those that were generated in the original database history.
267-1	35473-35477	Thus	
267-2	35477-35478	,	
267-3	35479-35481	to	
267-4	35482-35487	avoid	
267-5	35488-35492	this	
267-6	35492-35493	,	
267-7	35494-35497	you	
267-8	35498-35502	need	
267-9	35503-35505	to	
267-10	35506-35517	distinguish	
267-11	35518-35521	the	
267-12	35522-35528	series	
267-13	35529-35531	of	
267-14	35532-35535	WAL	
267-15	35536-35543	records	
267-16	35544-35553	generated	
267-17	35554-35559	after	
267-18	35560-35566	you've	
267-19	35567-35571	done	
267-20	35572-35573	a	
267-21	35574-35587	point-in-time	
267-22	35588-35596	recovery	
267-23	35597-35601	from	
267-24	35602-35607	those	
267-25	35608-35612	that	
267-26	35613-35617	were	
267-27	35618-35627	generated	
267-28	35628-35630	in	
267-29	35631-35634	the	
267-30	35635-35643	original	
267-31	35644-35652	database	
267-32	35653-35660	history	
267-33	35660-35661	.	

#Text=To deal with this problem, PostgreSQL has a notion of timelines.
268-1	35662-35664	To	
268-2	35665-35669	deal	
268-3	35670-35674	with	
268-4	35675-35679	this	
268-5	35680-35687	problem	
268-6	35687-35688	,	
268-7	35689-35699	PostgreSQL	
268-8	35700-35703	has	
268-9	35704-35705	a	
268-10	35706-35712	notion	
268-11	35713-35715	of	
268-12	35716-35725	timelines	
268-13	35725-35726	.	

#Text=Whenever an archive recovery completes, a new timeline is created to identify the series of WAL records generated after that recovery.
269-1	35727-35735	Whenever	
269-2	35736-35738	an	
269-3	35739-35746	archive	
269-4	35747-35755	recovery	
269-5	35756-35765	completes	
269-6	35765-35766	,	
269-7	35767-35768	a	
269-8	35769-35772	new	
269-9	35773-35781	timeline	
269-10	35782-35784	is	
269-11	35785-35792	created	
269-12	35793-35795	to	
269-13	35796-35804	identify	
269-14	35805-35808	the	
269-15	35809-35815	series	
269-16	35816-35818	of	
269-17	35819-35822	WAL	
269-18	35823-35830	records	
269-19	35831-35840	generated	
269-20	35841-35846	after	
269-21	35847-35851	that	
269-22	35852-35860	recovery	
269-23	35860-35861	.	

#Text=The timeline ID number is part of WAL segment file names so a new timeline does not overwrite the WAL data generated by previous timelines.
270-1	35862-35865	The	
270-2	35866-35874	timeline	
270-3	35875-35877	ID	
270-4	35878-35884	number	
270-5	35885-35887	is	
270-6	35888-35892	part	
270-7	35893-35895	of	
270-8	35896-35899	WAL	
270-9	35900-35907	segment	
270-10	35908-35912	file	
270-11	35913-35918	names	
270-12	35919-35921	so	
270-13	35922-35923	a	
270-14	35924-35927	new	
270-15	35928-35936	timeline	
270-16	35937-35941	does	
270-17	35942-35945	not	
270-18	35946-35955	overwrite	
270-19	35956-35959	the	
270-20	35960-35963	WAL	
270-21	35964-35968	data	
270-22	35969-35978	generated	
270-23	35979-35981	by	
270-24	35982-35990	previous	
270-25	35991-36000	timelines	
270-26	36000-36001	.	

#Text=It is in fact possible to archive many different timelines.
271-1	36002-36004	It	
271-2	36005-36007	is	
271-3	36008-36010	in	
271-4	36011-36015	fact	
271-5	36016-36024	possible	
271-6	36025-36027	to	
271-7	36028-36035	archive	
271-8	36036-36040	many	
271-9	36041-36050	different	
271-10	36051-36060	timelines	
271-11	36060-36061	.	

#Text=While that might seem like a useless feature, it's often a lifesaver.
272-1	36062-36067	While	
272-2	36068-36072	that	
272-3	36073-36078	might	
272-4	36079-36083	seem	
272-5	36084-36088	like	
272-6	36089-36090	a	
272-7	36091-36098	useless	
272-8	36099-36106	feature	
272-9	36106-36107	,	
272-10	36108-36112	it's	
272-11	36113-36118	often	
272-12	36119-36120	a	
272-13	36121-36130	lifesaver	
272-14	36130-36131	.	

#Text=Consider the situation where you aren't quite sure what point-in-time to recover to, and so have to do several point-in-time recoveries by trial and error until you find the best place to branch off from the old history.
273-1	36132-36140	Consider	
273-2	36141-36144	the	
273-3	36145-36154	situation	
273-4	36155-36160	where	
273-5	36161-36164	you	
273-6	36165-36171	aren't	
273-7	36172-36177	quite	
273-8	36178-36182	sure	
273-9	36183-36187	what	
273-10	36188-36201	point-in-time	
273-11	36202-36204	to	
273-12	36205-36212	recover	
273-13	36213-36215	to	
273-14	36215-36216	,	
273-15	36217-36220	and	
273-16	36221-36223	so	
273-17	36224-36228	have	
273-18	36229-36231	to	
273-19	36232-36234	do	
273-20	36235-36242	several	
273-21	36243-36256	point-in-time	
273-22	36257-36267	recoveries	
273-23	36268-36270	by	
273-24	36271-36276	trial	
273-25	36277-36280	and	
273-26	36281-36286	error	
273-27	36287-36292	until	
273-28	36293-36296	you	
273-29	36297-36301	find	
273-30	36302-36305	the	
273-31	36306-36310	best	
273-32	36311-36316	place	
273-33	36317-36319	to	
273-34	36320-36326	branch	
273-35	36327-36330	off	
273-36	36331-36335	from	
273-37	36336-36339	the	
273-38	36340-36343	old	
273-39	36344-36351	history	
273-40	36351-36352	.	

#Text=Without timelines this process would soon generate an unmanageable mess.
274-1	36353-36360	Without	
274-2	36361-36370	timelines	
274-3	36371-36375	this	
274-4	36376-36383	process	
274-5	36384-36389	would	
274-6	36390-36394	soon	
274-7	36395-36403	generate	
274-8	36404-36406	an	
274-9	36407-36419	unmanageable	
274-10	36420-36424	mess	
274-11	36424-36425	.	

#Text=With timelines, you can recover to any prior state, including states in timeline branches that you abandoned earlier.
275-1	36426-36430	With	
275-2	36431-36440	timelines	
275-3	36440-36441	,	
275-4	36442-36445	you	
275-5	36446-36449	can	
275-6	36450-36457	recover	
275-7	36458-36460	to	
275-8	36461-36464	any	
275-9	36465-36470	prior	
275-10	36471-36476	state	
275-11	36476-36477	,	
275-12	36478-36487	including	
275-13	36488-36494	states	
275-14	36495-36497	in	
275-15	36498-36506	timeline	
275-16	36507-36515	branches	
275-17	36516-36520	that	
275-18	36521-36524	you	
275-19	36525-36534	abandoned	
275-20	36535-36542	earlier	
275-21	36542-36543	.	

#Text=Every time a new timeline is created, PostgreSQL creates a “timeline history” file that shows which timeline it branched off from and when.
276-1	36544-36549	Every	
276-2	36550-36554	time	
276-3	36555-36556	a	
276-4	36557-36560	new	
276-5	36561-36569	timeline	
276-6	36570-36572	is	
276-7	36573-36580	created	
276-8	36580-36581	,	
276-9	36582-36592	PostgreSQL	
276-10	36593-36600	creates	
276-11	36601-36602	a	
276-12	36603-36604	“	
276-13	36604-36612	timeline	
276-14	36613-36620	history	
276-15	36620-36621	”	
276-16	36622-36626	file	
276-17	36627-36631	that	
276-18	36632-36637	shows	
276-19	36638-36643	which	
276-20	36644-36652	timeline	
276-21	36653-36655	it	
276-22	36656-36664	branched	
276-23	36665-36668	off	
276-24	36669-36673	from	
276-25	36674-36677	and	
276-26	36678-36682	when	
276-27	36682-36683	.	

#Text=These history files are necessary to allow the system to pick the right WAL segment files when recovering from an archive that contains multiple timelines.
277-1	36684-36689	These	
277-2	36690-36697	history	
277-3	36698-36703	files	
277-4	36704-36707	are	
277-5	36708-36717	necessary	
277-6	36718-36720	to	
277-7	36721-36726	allow	
277-8	36727-36730	the	
277-9	36731-36737	system	
277-10	36738-36740	to	
277-11	36741-36745	pick	
277-12	36746-36749	the	
277-13	36750-36755	right	
277-14	36756-36759	WAL	
277-15	36760-36767	segment	
277-16	36768-36773	files	
277-17	36774-36778	when	
277-18	36779-36789	recovering	
277-19	36790-36794	from	
277-20	36795-36797	an	
277-21	36798-36805	archive	
277-22	36806-36810	that	
277-23	36811-36819	contains	
277-24	36820-36828	multiple	
277-25	36829-36838	timelines	
277-26	36838-36839	.	

#Text=Therefore, they are archived into the WAL archive area just like WAL segment files.
278-1	36840-36849	Therefore	
278-2	36849-36850	,	
278-3	36851-36855	they	
278-4	36856-36859	are	
278-5	36860-36868	archived	
278-6	36869-36873	into	
278-7	36874-36877	the	
278-8	36878-36881	WAL	
278-9	36882-36889	archive	
278-10	36890-36894	area	
278-11	36895-36899	just	
278-12	36900-36904	like	
278-13	36905-36908	WAL	
278-14	36909-36916	segment	
278-15	36917-36922	files	
278-16	36922-36923	.	

#Text=The history files are just small text files, so it's cheap and appropriate to keep them around indefinitely (unlike the segment files which are large).
279-1	36924-36927	The	
279-2	36928-36935	history	
279-3	36936-36941	files	
279-4	36942-36945	are	
279-5	36946-36950	just	
279-6	36951-36956	small	
279-7	36957-36961	text	
279-8	36962-36967	files	
279-9	36967-36968	,	
279-10	36969-36971	so	
279-11	36972-36976	it's	
279-12	36977-36982	cheap	
279-13	36983-36986	and	
279-14	36987-36998	appropriate	
279-15	36999-37001	to	
279-16	37002-37006	keep	
279-17	37007-37011	them	
279-18	37012-37018	around	
279-19	37019-37031	indefinitely	
279-20	37032-37033	(	
279-21	37033-37039	unlike	
279-22	37040-37043	the	
279-23	37044-37051	segment	
279-24	37052-37057	files	
279-25	37058-37063	which	
279-26	37064-37067	are	
279-27	37068-37073	large	
279-28	37073-37074	)	
279-29	37074-37075	.	

#Text=You can, if you like, add comments to a history file to record your own notes about how and why this particular timeline was created.
280-1	37076-37079	You	
280-2	37080-37083	can	
280-3	37083-37084	,	
280-4	37085-37087	if	
280-5	37088-37091	you	
280-6	37092-37096	like	
280-7	37096-37097	,	
280-8	37098-37101	add	
280-9	37102-37110	comments	
280-10	37111-37113	to	
280-11	37114-37115	a	
280-12	37116-37123	history	
280-13	37124-37128	file	
280-14	37129-37131	to	
280-15	37132-37138	record	
280-16	37139-37143	your	
280-17	37144-37147	own	
280-18	37148-37153	notes	
280-19	37154-37159	about	
280-20	37160-37163	how	
280-21	37164-37167	and	
280-22	37168-37171	why	
280-23	37172-37176	this	
280-24	37177-37187	particular	
280-25	37188-37196	timeline	
280-26	37197-37200	was	
280-27	37201-37208	created	
280-28	37208-37209	.	

#Text=Such comments will be especially valuable when you have a thicket of different timelines as a result of experimentation.
281-1	37210-37214	Such	
281-2	37215-37223	comments	
281-3	37224-37228	will	
281-4	37229-37231	be	
281-5	37232-37242	especially	
281-6	37243-37251	valuable	
281-7	37252-37256	when	
281-8	37257-37260	you	
281-9	37261-37265	have	
281-10	37266-37267	a	
281-11	37268-37275	thicket	
281-12	37276-37278	of	
281-13	37279-37288	different	
281-14	37289-37298	timelines	
281-15	37299-37301	as	
281-16	37302-37303	a	
281-17	37304-37310	result	
281-18	37311-37313	of	
281-19	37314-37329	experimentation	
281-20	37329-37330	.	

#Text=The default behavior of recovery is to recover to the latest timeline found in the archive.
282-1	37331-37334	The	
282-2	37335-37342	default	
282-3	37343-37351	behavior	
282-4	37352-37354	of	
282-5	37355-37363	recovery	
282-6	37364-37366	is	
282-7	37367-37369	to	
282-8	37370-37377	recover	
282-9	37378-37380	to	
282-10	37381-37384	the	
282-11	37385-37391	latest	
282-12	37392-37400	timeline	
282-13	37401-37406	found	
282-14	37407-37409	in	
282-15	37410-37413	the	
282-16	37414-37421	archive	
282-17	37421-37422	.	

#Text=If you wish to recover to the timeline that was current when the base backup was taken or into a specific child timeline (that is, you want to return to some state that was itself generated after a recovery attempt), you need to specify current or the target timeline ID in recovery_target_timeline.
283-1	37423-37425	If	
283-2	37426-37429	you	
283-3	37430-37434	wish	
283-4	37435-37437	to	
283-5	37438-37445	recover	
283-6	37446-37448	to	
283-7	37449-37452	the	
283-8	37453-37461	timeline	
283-9	37462-37466	that	
283-10	37467-37470	was	
283-11	37471-37478	current	
283-12	37479-37483	when	
283-13	37484-37487	the	
283-14	37488-37492	base	
283-15	37493-37499	backup	
283-16	37500-37503	was	
283-17	37504-37509	taken	
283-18	37510-37512	or	
283-19	37513-37517	into	
283-20	37518-37519	a	
283-21	37520-37528	specific	
283-22	37529-37534	child	
283-23	37535-37543	timeline	
283-24	37544-37545	(	
283-25	37545-37549	that	
283-26	37550-37552	is	
283-27	37552-37553	,	
283-28	37554-37557	you	
283-29	37558-37562	want	
283-30	37563-37565	to	
283-31	37566-37572	return	
283-32	37573-37575	to	
283-33	37576-37580	some	
283-34	37581-37586	state	
283-35	37587-37591	that	
283-36	37592-37595	was	
283-37	37596-37602	itself	
283-38	37603-37612	generated	
283-39	37613-37618	after	
283-40	37619-37620	a	
283-41	37621-37629	recovery	
283-42	37630-37637	attempt	
283-43	37637-37638	)	
283-44	37638-37639	,	
283-45	37640-37643	you	
283-46	37644-37648	need	
283-47	37649-37651	to	
283-48	37652-37659	specify	
283-49	37660-37667	current	
283-50	37668-37670	or	
283-51	37671-37674	the	
283-52	37675-37681	target	
283-53	37682-37690	timeline	
283-54	37691-37693	ID	
283-55	37694-37696	in	
283-56	37697-37721	recovery_target_timeline	
283-57	37721-37722	.	

#Text=You cannot recover into timelines that branched off earlier than the base backup.
#Text=25.3.6. 
284-1	37723-37726	You	
284-2	37727-37733	cannot	
284-3	37734-37741	recover	
284-4	37742-37746	into	
284-5	37747-37756	timelines	
284-6	37757-37761	that	
284-7	37762-37770	branched	
284-8	37771-37774	off	
284-9	37775-37782	earlier	
284-10	37783-37787	than	
284-11	37788-37791	the	
284-12	37792-37796	base	
284-13	37797-37803	backup	
284-14	37803-37804	.	
284-15	37805-37811	25.3.6	
284-16	37811-37812	.	
284-17	37812-37813	 	

#Text=Tips and Examples
#Text=Some tips for configuring continuous archiving are given here.
#Text=25.3.6.1. 
285-1	37813-37817	Tips	
285-2	37818-37821	and	
285-3	37822-37830	Examples	
285-4	37831-37835	Some	
285-5	37836-37840	tips	
285-6	37841-37844	for	
285-7	37845-37856	configuring	
285-8	37857-37867	continuous	
285-9	37868-37877	archiving	
285-10	37878-37881	are	
285-11	37882-37887	given	
285-12	37888-37892	here	
285-13	37892-37893	.	
285-14	37894-37902	25.3.6.1	
285-15	37902-37903	.	
285-16	37903-37904	 	

#Text=Standalone Hot Backups
#Text=It is possible to use PostgreSQL's backup facilities to produce standalone hot backups.
286-1	37904-37914	Standalone	
286-2	37915-37918	Hot	
286-3	37919-37926	Backups	
286-4	37927-37929	It	
286-5	37930-37932	is	
286-6	37933-37941	possible	
286-7	37942-37944	to	
286-8	37945-37948	use	
286-9	37949-37961	PostgreSQL's	
286-10	37962-37968	backup	
286-11	37969-37979	facilities	
286-12	37980-37982	to	
286-13	37983-37990	produce	
286-14	37991-38001	standalone	
286-15	38002-38005	hot	
286-16	38006-38013	backups	
286-17	38013-38014	.	

#Text=These are backups that cannot be used for point-in-time recovery, yet are typically much faster to backup and restore than pg_dump dumps.
287-1	38015-38020	These	
287-2	38021-38024	are	
287-3	38025-38032	backups	
287-4	38033-38037	that	
287-5	38038-38044	cannot	
287-6	38045-38047	be	
287-7	38048-38052	used	
287-8	38053-38056	for	
287-9	38057-38070	point-in-time	
287-10	38071-38079	recovery	
287-11	38079-38080	,	
287-12	38081-38084	yet	
287-13	38085-38088	are	
287-14	38089-38098	typically	
287-15	38099-38103	much	
287-16	38104-38110	faster	
287-17	38111-38113	to	
287-18	38114-38120	backup	
287-19	38121-38124	and	
287-20	38125-38132	restore	
287-21	38133-38137	than	
287-22	38138-38145	pg_dump	
287-23	38146-38151	dumps	
287-24	38151-38152	.	

#Text=(They are also much larger than pg_dump dumps, so in some cases the speed advantage might be negated.)
288-1	38153-38154	(	
288-2	38154-38158	They	
288-3	38159-38162	are	
288-4	38163-38167	also	
288-5	38168-38172	much	
288-6	38173-38179	larger	
288-7	38180-38184	than	
288-8	38185-38192	pg_dump	
288-9	38193-38198	dumps	
288-10	38198-38199	,	
288-11	38200-38202	so	
288-12	38203-38205	in	
288-13	38206-38210	some	
288-14	38211-38216	cases	
288-15	38217-38220	the	
288-16	38221-38226	speed	
288-17	38227-38236	advantage	
288-18	38237-38242	might	
288-19	38243-38245	be	
288-20	38246-38253	negated	
288-21	38253-38254	.	
288-22	38254-38255	)	

#Text=As with base backups, the easiest way to produce a standalone hot backup is to use the pg_basebackup tool.
289-1	38256-38258	As	
289-2	38259-38263	with	
289-3	38264-38268	base	
289-4	38269-38276	backups	
289-5	38276-38277	,	
289-6	38278-38281	the	
289-7	38282-38289	easiest	
289-8	38290-38293	way	
289-9	38294-38296	to	
289-10	38297-38304	produce	
289-11	38305-38306	a	
289-12	38307-38317	standalone	
289-13	38318-38321	hot	
289-14	38322-38328	backup	
289-15	38329-38331	is	
289-16	38332-38334	to	
289-17	38335-38338	use	
289-18	38339-38342	the	
289-19	38343-38356	pg_basebackup	
289-20	38357-38361	tool	
289-21	38361-38362	.	

#Text=If you include the -X parameter when calling it, all the write-ahead log required to use the backup will be included in the backup automatically, and no special action is required to restore the backup.
290-1	38363-38365	If	
290-2	38366-38369	you	
290-3	38370-38377	include	
290-4	38378-38381	the	
290-5	38382-38383	-	
290-6	38383-38384	X	
290-7	38385-38394	parameter	
290-8	38395-38399	when	
290-9	38400-38407	calling	
290-10	38408-38410	it	
290-11	38410-38411	,	
290-12	38412-38415	all	
290-13	38416-38419	the	
290-14	38420-38431	write-ahead	
290-15	38432-38435	log	
290-16	38436-38444	required	
290-17	38445-38447	to	
290-18	38448-38451	use	
290-19	38452-38455	the	
290-20	38456-38462	backup	
290-21	38463-38467	will	
290-22	38468-38470	be	
290-23	38471-38479	included	
290-24	38480-38482	in	
290-25	38483-38486	the	
290-26	38487-38493	backup	
290-27	38494-38507	automatically	
290-28	38507-38508	,	
290-29	38509-38512	and	
290-30	38513-38515	no	
290-31	38516-38523	special	
290-32	38524-38530	action	
290-33	38531-38533	is	
290-34	38534-38542	required	
290-35	38543-38545	to	
290-36	38546-38553	restore	
290-37	38554-38557	the	
290-38	38558-38564	backup	
290-39	38564-38565	.	

#Text=If more flexibility in copying the backup files is needed, a lower level process can be used for standalone hot backups as well.
291-1	38566-38568	If	
291-2	38569-38573	more	
291-3	38574-38585	flexibility	
291-4	38586-38588	in	
291-5	38589-38596	copying	
291-6	38597-38600	the	
291-7	38601-38607	backup	
291-8	38608-38613	files	
291-9	38614-38616	is	
291-10	38617-38623	needed	
291-11	38623-38624	,	
291-12	38625-38626	a	
291-13	38627-38632	lower	
291-14	38633-38638	level	
291-15	38639-38646	process	
291-16	38647-38650	can	
291-17	38651-38653	be	
291-18	38654-38658	used	
291-19	38659-38662	for	
291-20	38663-38673	standalone	
291-21	38674-38677	hot	
291-22	38678-38685	backups	
291-23	38686-38688	as	
291-24	38689-38693	well	
291-25	38693-38694	.	

#Text=To prepare for low level standalone hot backups, make sure wal_level is set to replica or higher, archive_mode to on, and set up an archive_command that performs archiving only when a switch file exists.
292-1	38695-38697	To	
292-2	38698-38705	prepare	
292-3	38706-38709	for	
292-4	38710-38713	low	
292-5	38714-38719	level	
292-6	38720-38730	standalone	
292-7	38731-38734	hot	
292-8	38735-38742	backups	
292-9	38742-38743	,	
292-10	38744-38748	make	
292-11	38749-38753	sure	
292-12	38754-38763	wal_level	
292-13	38764-38766	is	
292-14	38767-38770	set	
292-15	38771-38773	to	
292-16	38774-38781	replica	
292-17	38782-38784	or	
292-18	38785-38791	higher	
292-19	38791-38792	,	
292-20	38793-38805	archive_mode	
292-21	38806-38808	to	
292-22	38809-38811	on	
292-23	38811-38812	,	
292-24	38813-38816	and	
292-25	38817-38820	set	
292-26	38821-38823	up	
292-27	38824-38826	an	
292-28	38827-38842	archive_command	
292-29	38843-38847	that	
292-30	38848-38856	performs	
292-31	38857-38866	archiving	
292-32	38867-38871	only	
292-33	38872-38876	when	
292-34	38877-38878	a	
292-35	38879-38885	switch	
292-36	38886-38890	file	
292-37	38891-38897	exists	
292-38	38897-38898	.	

#Text=For example:
#Text=archive_command = 'test !
293-1	38899-38902	For	
293-2	38903-38910	example	
293-3	38910-38911	:	
293-4	38912-38927	archive_command	
293-5	38928-38929	=	
293-6	38930-38931	'	
293-7	38931-38935	test	
293-8	38936-38937	!	

#Text=-f /var/lib/pgsql/backup_in_progress || (test !
294-1	38938-38939	-	
294-2	38939-38940	f	
294-3	38941-38942	/	
294-4	38942-38945	var	
294-5	38945-38946	/	
294-6	38946-38949	lib	
294-7	38949-38950	/	
294-8	38950-38955	pgsql	
294-9	38955-38956	/	
294-10	38956-38974	backup_in_progress	
294-11	38975-38976	|	
294-12	38976-38977	|	
294-13	38978-38979	(	
294-14	38979-38983	test	
294-15	38984-38985	!	

#Text=-f /var/lib/pgsql/archive/%f && cp %p /var/lib/pgsql/archive/%f)'
#Text=This command will perform archiving when /var/lib/pgsql/backup_in_progress exists, and otherwise silently return zero exit status (allowing PostgreSQL to recycle the unwanted WAL file).
295-1	38986-38987	-	
295-2	38987-38988	f	
295-3	38989-38990	/	
295-4	38990-38993	var	
295-5	38993-38994	/	
295-6	38994-38997	lib	
295-7	38997-38998	/	
295-8	38998-39003	pgsql	
295-9	39003-39004	/	
295-10	39004-39011	archive	
295-11	39011-39012	/	
295-12	39012-39013	%	
295-13	39013-39014	f	
295-14	39015-39016	&	
295-15	39016-39017	&	
295-16	39018-39020	cp	
295-17	39021-39022	%	
295-18	39022-39023	p	
295-19	39024-39025	/	
295-20	39025-39028	var	
295-21	39028-39029	/	
295-22	39029-39032	lib	
295-23	39032-39033	/	
295-24	39033-39038	pgsql	
295-25	39038-39039	/	
295-26	39039-39046	archive	
295-27	39046-39047	/	
295-28	39047-39048	%	
295-29	39048-39049	f	
295-30	39049-39050	)	
295-31	39050-39051	'	
295-32	39052-39056	This	
295-33	39057-39064	command	
295-34	39065-39069	will	
295-35	39070-39077	perform	
295-36	39078-39087	archiving	
295-37	39088-39092	when	
295-38	39093-39094	/	
295-39	39094-39097	var	
295-40	39097-39098	/	
295-41	39098-39101	lib	
295-42	39101-39102	/	
295-43	39102-39107	pgsql	
295-44	39107-39108	/	
295-45	39108-39126	backup_in_progress	
295-46	39127-39133	exists	
295-47	39133-39134	,	
295-48	39135-39138	and	
295-49	39139-39148	otherwise	
295-50	39149-39157	silently	
295-51	39158-39164	return	
295-52	39165-39169	zero	
295-53	39170-39174	exit	
295-54	39175-39181	status	
295-55	39182-39183	(	
295-56	39183-39191	allowing	
295-57	39192-39202	PostgreSQL	
295-58	39203-39205	to	
295-59	39206-39213	recycle	
295-60	39214-39217	the	
295-61	39218-39226	unwanted	
295-62	39227-39230	WAL	
295-63	39231-39235	file	
295-64	39235-39236	)	
295-65	39236-39237	.	

#Text=With this preparation, a backup can be taken using a script like the following:
#Text=touch /var/lib/pgsql/backup_in_progress
#Text=psql -c "select pg_start_backup('hot_backup');"
#Text=tar -cf /var/lib/pgsql/backup.tar /var/lib/pgsql/data/
#Text=psql -c "select pg_stop_backup();"
#Text=rm /var/lib/pgsql/backup_in_progress
#Text=tar -rf /var/lib/pgsql/backup.tar /var/lib/pgsql/archive/
#Text=The switch file /var/lib/pgsql/backup_in_progress is created first, enabling archiving of completed WAL files to occur.
296-1	39238-39242	With	
296-2	39243-39247	this	
296-3	39248-39259	preparation	
296-4	39259-39260	,	
296-5	39261-39262	a	
296-6	39263-39269	backup	
296-7	39270-39273	can	
296-8	39274-39276	be	
296-9	39277-39282	taken	
296-10	39283-39288	using	
296-11	39289-39290	a	
296-12	39291-39297	script	
296-13	39298-39302	like	
296-14	39303-39306	the	
296-15	39307-39316	following	
296-16	39316-39317	:	
296-17	39318-39323	touch	
296-18	39324-39325	/	
296-19	39325-39328	var	
296-20	39328-39329	/	
296-21	39329-39332	lib	
296-22	39332-39333	/	
296-23	39333-39338	pgsql	
296-24	39338-39339	/	
296-25	39339-39357	backup_in_progress	
296-26	39358-39362	psql	
296-27	39363-39364	-	
296-28	39364-39365	c	
296-29	39366-39367	"	
296-30	39367-39373	select	
296-31	39374-39389	pg_start_backup	
296-32	39389-39390	(	
296-33	39390-39391	'	
296-34	39391-39401	hot_backup	
296-35	39401-39402	'	
296-36	39402-39403	)	
296-37	39403-39404	;	
296-38	39404-39405	"	
296-39	39406-39409	tar	
296-40	39410-39411	-	
296-41	39411-39413	cf	
296-42	39414-39415	/	
296-43	39415-39418	var	
296-44	39418-39419	/	
296-45	39419-39422	lib	
296-46	39422-39423	/	
296-47	39423-39428	pgsql	
296-48	39428-39429	/	
296-49	39429-39439	backup.tar	
296-50	39440-39441	/	
296-51	39441-39444	var	
296-52	39444-39445	/	
296-53	39445-39448	lib	
296-54	39448-39449	/	
296-55	39449-39454	pgsql	
296-56	39454-39455	/	
296-57	39455-39459	data	
296-58	39459-39460	/	
296-59	39461-39465	psql	
296-60	39466-39467	-	
296-61	39467-39468	c	
296-62	39469-39470	"	
296-63	39470-39476	select	
296-64	39477-39491	pg_stop_backup	
296-65	39491-39492	(	
296-66	39492-39493	)	
296-67	39493-39494	;	
296-68	39494-39495	"	
296-69	39496-39498	rm	
296-70	39499-39500	/	
296-71	39500-39503	var	
296-72	39503-39504	/	
296-73	39504-39507	lib	
296-74	39507-39508	/	
296-75	39508-39513	pgsql	
296-76	39513-39514	/	
296-77	39514-39532	backup_in_progress	
296-78	39533-39536	tar	
296-79	39537-39538	-	
296-80	39538-39540	rf	
296-81	39541-39542	/	
296-82	39542-39545	var	
296-83	39545-39546	/	
296-84	39546-39549	lib	
296-85	39549-39550	/	
296-86	39550-39555	pgsql	
296-87	39555-39556	/	
296-88	39556-39566	backup.tar	
296-89	39567-39568	/	
296-90	39568-39571	var	
296-91	39571-39572	/	
296-92	39572-39575	lib	
296-93	39575-39576	/	
296-94	39576-39581	pgsql	
296-95	39581-39582	/	
296-96	39582-39589	archive	
296-97	39589-39590	/	
296-98	39591-39594	The	
296-99	39595-39601	switch	
296-100	39602-39606	file	
296-101	39607-39608	/	
296-102	39608-39611	var	
296-103	39611-39612	/	
296-104	39612-39615	lib	
296-105	39615-39616	/	
296-106	39616-39621	pgsql	
296-107	39621-39622	/	
296-108	39622-39640	backup_in_progress	
296-109	39641-39643	is	
296-110	39644-39651	created	
296-111	39652-39657	first	
296-112	39657-39658	,	
296-113	39659-39667	enabling	
296-114	39668-39677	archiving	
296-115	39678-39680	of	
296-116	39681-39690	completed	
296-117	39691-39694	WAL	
296-118	39695-39700	files	
296-119	39701-39703	to	
296-120	39704-39709	occur	
296-121	39709-39710	.	

#Text=After the backup the switch file is removed.
297-1	39711-39716	After	
297-2	39717-39720	the	
297-3	39721-39727	backup	
297-4	39728-39731	the	
297-5	39732-39738	switch	
297-6	39739-39743	file	
297-7	39744-39746	is	
297-8	39747-39754	removed	
297-9	39754-39755	.	

#Text=Archived WAL files are then added to the backup so that both base backup and all required WAL files are part of the same tar file.
298-1	39756-39764	Archived	
298-2	39765-39768	WAL	
298-3	39769-39774	files	
298-4	39775-39778	are	
298-5	39779-39783	then	
298-6	39784-39789	added	
298-7	39790-39792	to	
298-8	39793-39796	the	
298-9	39797-39803	backup	
298-10	39804-39806	so	
298-11	39807-39811	that	
298-12	39812-39816	both	
298-13	39817-39821	base	
298-14	39822-39828	backup	
298-15	39829-39832	and	
298-16	39833-39836	all	
298-17	39837-39845	required	
298-18	39846-39849	WAL	
298-19	39850-39855	files	
298-20	39856-39859	are	
298-21	39860-39864	part	
298-22	39865-39867	of	
298-23	39868-39871	the	
298-24	39872-39876	same	
298-25	39877-39880	tar	
298-26	39881-39885	file	
298-27	39885-39886	.	

#Text=Please remember to add error handling to your backup scripts.
#Text=25.3.6.2. 
299-1	39887-39893	Please	
299-2	39894-39902	remember	
299-3	39903-39905	to	
299-4	39906-39909	add	
299-5	39910-39915	error	
299-6	39916-39924	handling	
299-7	39925-39927	to	
299-8	39928-39932	your	
299-9	39933-39939	backup	
299-10	39940-39947	scripts	
299-11	39947-39948	.	
299-12	39949-39957	25.3.6.2	
299-13	39957-39958	.	
299-14	39958-39959	 	

#Text=Compressed Archive Logs
#Text=If archive storage size is a concern, you can use gzip to compress the archive files:
#Text=archive_command = 'gzip < %p > /var/lib/pgsql/archive/%f'
#Text=You will then need to use gunzip during recovery:
#Text=restore_command = 'gunzip < /mnt/server/archivedir/%f > %p'
#Text=25.3.6.3. archive_command Scripts
#Text=Many people choose to use scripts to define their archive_command, so that their postgresql.conf entry looks very simple:
#Text=archive_command = 'local_backup_script.sh "%p" "%f"'
#Text=Using a separate script file is advisable any time you want to use more than a single command in the archiving process.
300-1	39959-39969	Compressed	
300-2	39970-39977	Archive	
300-3	39978-39982	Logs	
300-4	39983-39985	If	
300-5	39986-39993	archive	
300-6	39994-40001	storage	
300-7	40002-40006	size	
300-8	40007-40009	is	
300-9	40010-40011	a	
300-10	40012-40019	concern	
300-11	40019-40020	,	
300-12	40021-40024	you	
300-13	40025-40028	can	
300-14	40029-40032	use	
300-15	40033-40037	gzip	
300-16	40038-40040	to	
300-17	40041-40049	compress	
300-18	40050-40053	the	
300-19	40054-40061	archive	
300-20	40062-40067	files	
300-21	40067-40068	:	
300-22	40069-40084	archive_command	
300-23	40085-40086	=	
300-24	40087-40088	'	
300-25	40088-40092	gzip	
300-26	40093-40094	<	
300-27	40095-40096	%	
300-28	40096-40097	p	
300-29	40098-40099	>	
300-30	40100-40101	/	
300-31	40101-40104	var	
300-32	40104-40105	/	
300-33	40105-40108	lib	
300-34	40108-40109	/	
300-35	40109-40114	pgsql	
300-36	40114-40115	/	
300-37	40115-40122	archive	
300-38	40122-40123	/	
300-39	40123-40124	%	
300-40	40124-40125	f	
300-41	40125-40126	'	
300-42	40127-40130	You	
300-43	40131-40135	will	
300-44	40136-40140	then	
300-45	40141-40145	need	
300-46	40146-40148	to	
300-47	40149-40152	use	
300-48	40153-40159	gunzip	
300-49	40160-40166	during	
300-50	40167-40175	recovery	
300-51	40175-40176	:	
300-52	40177-40192	restore_command	
300-53	40193-40194	=	
300-54	40195-40196	'	
300-55	40196-40202	gunzip	
300-56	40203-40204	<	
300-57	40205-40206	/	
300-58	40206-40209	mnt	
300-59	40209-40210	/	
300-60	40210-40216	server	
300-61	40216-40217	/	
300-62	40217-40227	archivedir	
300-63	40227-40228	/	
300-64	40228-40229	%	
300-65	40229-40230	f	
300-66	40231-40232	>	
300-67	40233-40234	%	
300-68	40234-40235	p	
300-69	40235-40236	'	
300-70	40237-40245	25.3.6.3	
300-71	40245-40246	.	
300-72	40246-40247	 	
300-73	40247-40262	archive_command	
300-74	40263-40270	Scripts	
300-75	40271-40275	Many	
300-76	40276-40282	people	
300-77	40283-40289	choose	
300-78	40290-40292	to	
300-79	40293-40296	use	
300-80	40297-40304	scripts	
300-81	40305-40307	to	
300-82	40308-40314	define	
300-83	40315-40320	their	
300-84	40321-40336	archive_command	
300-85	40336-40337	,	
300-86	40338-40340	so	
300-87	40341-40345	that	
300-88	40346-40351	their	
300-89	40352-40367	postgresql.conf	
300-90	40368-40373	entry	
300-91	40374-40379	looks	
300-92	40380-40384	very	
300-93	40385-40391	simple	
300-94	40391-40392	:	
300-95	40393-40408	archive_command	
300-96	40409-40410	=	
300-97	40411-40412	'	
300-98	40412-40434	local_backup_script.sh	
300-99	40435-40436	"	
300-100	40436-40437	%	
300-101	40437-40438	p	
300-102	40438-40439	"	
300-103	40440-40441	"	
300-104	40441-40442	%	
300-105	40442-40443	f	
300-106	40443-40444	"	
300-107	40444-40445	'	
300-108	40446-40451	Using	
300-109	40452-40453	a	
300-110	40454-40462	separate	
300-111	40463-40469	script	
300-112	40470-40474	file	
300-113	40475-40477	is	
300-114	40478-40487	advisable	
300-115	40488-40491	any	
300-116	40492-40496	time	
300-117	40497-40500	you	
300-118	40501-40505	want	
300-119	40506-40508	to	
300-120	40509-40512	use	
300-121	40513-40517	more	
300-122	40518-40522	than	
300-123	40523-40524	a	
300-124	40525-40531	single	
300-125	40532-40539	command	
300-126	40540-40542	in	
300-127	40543-40546	the	
300-128	40547-40556	archiving	
300-129	40557-40564	process	
300-130	40564-40565	.	

#Text=This allows all complexity to be managed within the script, which can be written in a popular scripting language such as bash or perl.
301-1	40566-40570	This	
301-2	40571-40577	allows	
301-3	40578-40581	all	
301-4	40582-40592	complexity	
301-5	40593-40595	to	
301-6	40596-40598	be	
301-7	40599-40606	managed	
301-8	40607-40613	within	
301-9	40614-40617	the	
301-10	40618-40624	script	
301-11	40624-40625	,	
301-12	40626-40631	which	
301-13	40632-40635	can	
301-14	40636-40638	be	
301-15	40639-40646	written	
301-16	40647-40649	in	
301-17	40650-40651	a	
301-18	40652-40659	popular	
301-19	40660-40669	scripting	
301-20	40670-40678	language	
301-21	40679-40683	such	
301-22	40684-40686	as	
301-23	40687-40691	bash	
301-24	40692-40694	or	
301-25	40695-40699	perl	
301-26	40699-40700	.	

#Text=Examples of requirements that might be solved within a script include:
#Text=Copying data to secure off-site data storage
#Text=Batching WAL files so that they are transferred every three hours, rather than one at a time
#Text=Interfacing with other backup and recovery software
#Text=Interfacing with monitoring software to report errors
#Text=Tip
#Text=When using an archive_command script, it's desirable to enable logging_collector.
302-1	40701-40709	Examples	
302-2	40710-40712	of	
302-3	40713-40725	requirements	
302-4	40726-40730	that	
302-5	40731-40736	might	
302-6	40737-40739	be	
302-7	40740-40746	solved	
302-8	40747-40753	within	
302-9	40754-40755	a	
302-10	40756-40762	script	
302-11	40763-40770	include	
302-12	40770-40771	:	
302-13	40772-40779	Copying	
302-14	40780-40784	data	
302-15	40785-40787	to	
302-16	40788-40794	secure	
302-17	40795-40803	off-site	
302-18	40804-40808	data	
302-19	40809-40816	storage	
302-20	40817-40825	Batching	
302-21	40826-40829	WAL	
302-22	40830-40835	files	
302-23	40836-40838	so	
302-24	40839-40843	that	
302-25	40844-40848	they	
302-26	40849-40852	are	
302-27	40853-40864	transferred	
302-28	40865-40870	every	
302-29	40871-40876	three	
302-30	40877-40882	hours	
302-31	40882-40883	,	
302-32	40884-40890	rather	
302-33	40891-40895	than	
302-34	40896-40899	one	
302-35	40900-40902	at	
302-36	40903-40904	a	
302-37	40905-40909	time	
302-38	40910-40921	Interfacing	
302-39	40922-40926	with	
302-40	40927-40932	other	
302-41	40933-40939	backup	
302-42	40940-40943	and	
302-43	40944-40952	recovery	
302-44	40953-40961	software	
302-45	40962-40973	Interfacing	
302-46	40974-40978	with	
302-47	40979-40989	monitoring	
302-48	40990-40998	software	
302-49	40999-41001	to	
302-50	41002-41008	report	
302-51	41009-41015	errors	
302-52	41016-41019	Tip	
302-53	41020-41024	When	
302-54	41025-41030	using	
302-55	41031-41033	an	
302-56	41034-41049	archive_command	
302-57	41050-41056	script	
302-58	41056-41057	,	
302-59	41058-41062	it's	
302-60	41063-41072	desirable	
302-61	41073-41075	to	
302-62	41076-41082	enable	
302-63	41083-41100	logging_collector	
302-64	41100-41101	.	

#Text=Any messages written to stderr from the script will then appear in the database server log, allowing complex configurations to be diagnosed easily if they fail.
#Text=25.3.7. 
303-1	41102-41105	Any	
303-2	41106-41114	messages	
303-3	41115-41122	written	
303-4	41123-41125	to	
303-5	41126-41132	stderr	
303-6	41133-41137	from	
303-7	41138-41141	the	
303-8	41142-41148	script	
303-9	41149-41153	will	
303-10	41154-41158	then	
303-11	41159-41165	appear	
303-12	41166-41168	in	
303-13	41169-41172	the	
303-14	41173-41181	database	
303-15	41182-41188	server	
303-16	41189-41192	log	
303-17	41192-41193	,	
303-18	41194-41202	allowing	
303-19	41203-41210	complex	
303-20	41211-41225	configurations	
303-21	41226-41228	to	
303-22	41229-41231	be	
303-23	41232-41241	diagnosed	
303-24	41242-41248	easily	
303-25	41249-41251	if	
303-26	41252-41256	they	
303-27	41257-41261	fail	
303-28	41261-41262	.	
303-29	41263-41269	25.3.7	
303-30	41269-41270	.	
303-31	41270-41271	 	

#Text=Caveats
#Text=At this writing, there are several limitations of the continuous archiving technique.
304-1	41271-41278	Caveats	
304-2	41279-41281	At	
304-3	41282-41286	this	
304-4	41287-41294	writing	
304-5	41294-41295	,	
304-6	41296-41301	there	
304-7	41302-41305	are	
304-8	41306-41313	several	
304-9	41314-41325	limitations	
304-10	41326-41328	of	
304-11	41329-41332	the	
304-12	41333-41343	continuous	
304-13	41344-41353	archiving	
304-14	41354-41363	technique	
304-15	41363-41364	.	

#Text=These will probably be fixed in future releases:
#Text=If a CREATE DATABASE command is executed while a base backup is being taken, and then the template database that the CREATE DATABASE copied is modified while the base backup is still in progress, it is possible that recovery will cause those modifications to be propagated into the created database as well.
305-1	41365-41370	These	
305-2	41371-41375	will	
305-3	41376-41384	probably	
305-4	41385-41387	be	
305-5	41388-41393	fixed	
305-6	41394-41396	in	
305-7	41397-41403	future	
305-8	41404-41412	releases	
305-9	41412-41413	:	
305-10	41414-41416	If	
305-11	41417-41418	a	
305-12	41419-41425	CREATE	
305-13	41426-41434	DATABASE	
305-14	41435-41442	command	
305-15	41443-41445	is	
305-16	41446-41454	executed	
305-17	41455-41460	while	
305-18	41461-41462	a	
305-19	41463-41467	base	
305-20	41468-41474	backup	
305-21	41475-41477	is	
305-22	41478-41483	being	
305-23	41484-41489	taken	
305-24	41489-41490	,	
305-25	41491-41494	and	
305-26	41495-41499	then	
305-27	41500-41503	the	
305-28	41504-41512	template	
305-29	41513-41521	database	
305-30	41522-41526	that	
305-31	41527-41530	the	
305-32	41531-41537	CREATE	
305-33	41538-41546	DATABASE	
305-34	41547-41553	copied	
305-35	41554-41556	is	
305-36	41557-41565	modified	
305-37	41566-41571	while	
305-38	41572-41575	the	
305-39	41576-41580	base	
305-40	41581-41587	backup	
305-41	41588-41590	is	
305-42	41591-41596	still	
305-43	41597-41599	in	
305-44	41600-41608	progress	
305-45	41608-41609	,	
305-46	41610-41612	it	
305-47	41613-41615	is	
305-48	41616-41624	possible	
305-49	41625-41629	that	
305-50	41630-41638	recovery	
305-51	41639-41643	will	
305-52	41644-41649	cause	
305-53	41650-41655	those	
305-54	41656-41669	modifications	
305-55	41670-41672	to	
305-56	41673-41675	be	
305-57	41676-41686	propagated	
305-58	41687-41691	into	
305-59	41692-41695	the	
305-60	41696-41703	created	
305-61	41704-41712	database	
305-62	41713-41715	as	
305-63	41716-41720	well	
305-64	41720-41721	.	

#Text=This is of course undesirable.
306-1	41722-41726	This	
306-2	41727-41729	is	
306-3	41730-41732	of	
306-4	41733-41739	course	
306-5	41740-41751	undesirable	
306-6	41751-41752	.	

#Text=To avoid this risk, it is best not to modify any template databases while taking a base backup.
307-1	41753-41755	To	
307-2	41756-41761	avoid	
307-3	41762-41766	this	
307-4	41767-41771	risk	
307-5	41771-41772	,	
307-6	41773-41775	it	
307-7	41776-41778	is	
307-8	41779-41783	best	
307-9	41784-41787	not	
307-10	41788-41790	to	
307-11	41791-41797	modify	
307-12	41798-41801	any	
307-13	41802-41810	template	
307-14	41811-41820	databases	
307-15	41821-41826	while	
307-16	41827-41833	taking	
307-17	41834-41835	a	
307-18	41836-41840	base	
307-19	41841-41847	backup	
307-20	41847-41848	.	

#Text=CREATE TABLESPACE commands are WAL-logged with the literal absolute path, and will therefore be replayed as tablespace creations with the same absolute path.
308-1	41849-41855	CREATE	
308-2	41856-41866	TABLESPACE	
308-3	41867-41875	commands	
308-4	41876-41879	are	
308-5	41880-41890	WAL-logged	
308-6	41891-41895	with	
308-7	41896-41899	the	
308-8	41900-41907	literal	
308-9	41908-41916	absolute	
308-10	41917-41921	path	
308-11	41921-41922	,	
308-12	41923-41926	and	
308-13	41927-41931	will	
308-14	41932-41941	therefore	
308-15	41942-41944	be	
308-16	41945-41953	replayed	
308-17	41954-41956	as	
308-18	41957-41967	tablespace	
308-19	41968-41977	creations	
308-20	41978-41982	with	
308-21	41983-41986	the	
308-22	41987-41991	same	
308-23	41992-42000	absolute	
308-24	42001-42005	path	
308-25	42005-42006	.	

#Text=This might be undesirable if the log is being replayed on a different machine.
309-1	42007-42011	This	
309-2	42012-42017	might	
309-3	42018-42020	be	
309-4	42021-42032	undesirable	
309-5	42033-42035	if	
309-6	42036-42039	the	
309-7	42040-42043	log	
309-8	42044-42046	is	
309-9	42047-42052	being	
309-10	42053-42061	replayed	
309-11	42062-42064	on	
309-12	42065-42066	a	
309-13	42067-42076	different	
309-14	42077-42084	machine	
309-15	42084-42085	.	

#Text=It can be dangerous even if the log is being replayed on the same machine, but into a new data directory: the replay will still overwrite the contents of the original tablespace.
310-1	42086-42088	It	
310-2	42089-42092	can	
310-3	42093-42095	be	
310-4	42096-42105	dangerous	
310-5	42106-42110	even	
310-6	42111-42113	if	
310-7	42114-42117	the	
310-8	42118-42121	log	
310-9	42122-42124	is	
310-10	42125-42130	being	
310-11	42131-42139	replayed	
310-12	42140-42142	on	
310-13	42143-42146	the	
310-14	42147-42151	same	
310-15	42152-42159	machine	
310-16	42159-42160	,	
310-17	42161-42164	but	
310-18	42165-42169	into	
310-19	42170-42171	a	
310-20	42172-42175	new	
310-21	42176-42180	data	
310-22	42181-42190	directory	
310-23	42190-42191	:	
310-24	42192-42195	the	
310-25	42196-42202	replay	
310-26	42203-42207	will	
310-27	42208-42213	still	
310-28	42214-42223	overwrite	
310-29	42224-42227	the	
310-30	42228-42236	contents	
310-31	42237-42239	of	
310-32	42240-42243	the	
310-33	42244-42252	original	
310-34	42253-42263	tablespace	
310-35	42263-42264	.	

#Text=To avoid potential gotchas of this sort, the best practice is to take a new base backup after creating or dropping tablespaces.
311-1	42265-42267	To	
311-2	42268-42273	avoid	
311-3	42274-42283	potential	
311-4	42284-42291	gotchas	
311-5	42292-42294	of	
311-6	42295-42299	this	
311-7	42300-42304	sort	
311-8	42304-42305	,	
311-9	42306-42309	the	
311-10	42310-42314	best	
311-11	42315-42323	practice	
311-12	42324-42326	is	
311-13	42327-42329	to	
311-14	42330-42334	take	
311-15	42335-42336	a	
311-16	42337-42340	new	
311-17	42341-42345	base	
311-18	42346-42352	backup	
311-19	42353-42358	after	
311-20	42359-42367	creating	
311-21	42368-42370	or	
311-22	42371-42379	dropping	
311-23	42380-42391	tablespaces	
311-24	42391-42392	.	

#Text=It should also be noted that the default WAL format is fairly bulky since it includes many disk page snapshots.
312-1	42393-42395	It	
312-2	42396-42402	should	
312-3	42403-42407	also	
312-4	42408-42410	be	
312-5	42411-42416	noted	
312-6	42417-42421	that	
312-7	42422-42425	the	
312-8	42426-42433	default	
312-9	42434-42437	WAL	
312-10	42438-42444	format	
312-11	42445-42447	is	
312-12	42448-42454	fairly	
312-13	42455-42460	bulky	
312-14	42461-42466	since	
312-15	42467-42469	it	
312-16	42470-42478	includes	
312-17	42479-42483	many	
312-18	42484-42488	disk	
312-19	42489-42493	page	
312-20	42494-42503	snapshots	
312-21	42503-42504	.	

#Text=These page snapshots are designed to support crash recovery, since we might need to fix partially-written disk pages.
313-1	42505-42510	These	
313-2	42511-42515	page	
313-3	42516-42525	snapshots	
313-4	42526-42529	are	
313-5	42530-42538	designed	
313-6	42539-42541	to	
313-7	42542-42549	support	
313-8	42550-42555	crash	
313-9	42556-42564	recovery	
313-10	42564-42565	,	
313-11	42566-42571	since	
313-12	42572-42574	we	
313-13	42575-42580	might	
313-14	42581-42585	need	
313-15	42586-42588	to	
313-16	42589-42592	fix	
313-17	42593-42610	partially-written	
313-18	42611-42615	disk	
313-19	42616-42621	pages	
313-20	42621-42622	.	

#Text=Depending on your system hardware and software, the risk of partial writes might be small enough to ignore, in which case you can significantly reduce the total volume of archived logs by turning off page snapshots using the full_page_writes parameter.
314-1	42623-42632	Depending	
314-2	42633-42635	on	
314-3	42636-42640	your	
314-4	42641-42647	system	
314-5	42648-42656	hardware	
314-6	42657-42660	and	
314-7	42661-42669	software	
314-8	42669-42670	,	
314-9	42671-42674	the	
314-10	42675-42679	risk	
314-11	42680-42682	of	
314-12	42683-42690	partial	
314-13	42691-42697	writes	
314-14	42698-42703	might	
314-15	42704-42706	be	
314-16	42707-42712	small	
314-17	42713-42719	enough	
314-18	42720-42722	to	
314-19	42723-42729	ignore	
314-20	42729-42730	,	
314-21	42731-42733	in	
314-22	42734-42739	which	
314-23	42740-42744	case	
314-24	42745-42748	you	
314-25	42749-42752	can	
314-26	42753-42766	significantly	
314-27	42767-42773	reduce	
314-28	42774-42777	the	
314-29	42778-42783	total	
314-30	42784-42790	volume	
314-31	42791-42793	of	
314-32	42794-42802	archived	
314-33	42803-42807	logs	
314-34	42808-42810	by	
314-35	42811-42818	turning	
314-36	42819-42822	off	
314-37	42823-42827	page	
314-38	42828-42837	snapshots	
314-39	42838-42843	using	
314-40	42844-42847	the	
314-41	42848-42864	full_page_writes	
314-42	42865-42874	parameter	
314-43	42874-42875	.	

#Text=(Read the notes and warnings in Chapter 29 before you do so.)
315-1	42876-42877	(	
315-2	42877-42881	Read	
315-3	42882-42885	the	
315-4	42886-42891	notes	
315-5	42892-42895	and	
315-6	42896-42904	warnings	
315-7	42905-42907	in	
315-8	42908-42915	Chapter	
315-9	42915-42916	 	
315-10	42916-42918	29	
315-11	42919-42925	before	
315-12	42926-42929	you	
315-13	42930-42932	do	
315-14	42933-42935	so	
315-15	42935-42936	.	
315-16	42936-42937	)	

#Text=Turning off page snapshots does not prevent use of the logs for PITR operations.
316-1	42938-42945	Turning	
316-2	42946-42949	off	
316-3	42950-42954	page	
316-4	42955-42964	snapshots	
316-5	42965-42969	does	
316-6	42970-42973	not	
316-7	42974-42981	prevent	
316-8	42982-42985	use	
316-9	42986-42988	of	
316-10	42989-42992	the	
316-11	42993-42997	logs	
316-12	42998-43001	for	
316-13	43002-43006	PITR	
316-14	43007-43017	operations	
316-15	43017-43018	.	

#Text=An area for future development is to compress archived WAL data by removing unnecessary page copies even when full_page_writes is on.
317-1	43019-43021	An	
317-2	43022-43026	area	
317-3	43027-43030	for	
317-4	43031-43037	future	
317-5	43038-43049	development	
317-6	43050-43052	is	
317-7	43053-43055	to	
317-8	43056-43064	compress	
317-9	43065-43073	archived	
317-10	43074-43077	WAL	
317-11	43078-43082	data	
317-12	43083-43085	by	
317-13	43086-43094	removing	
317-14	43095-43106	unnecessary	
317-15	43107-43111	page	
317-16	43112-43118	copies	
317-17	43119-43123	even	
317-18	43124-43128	when	
317-19	43129-43145	full_page_writes	
317-20	43146-43148	is	
317-21	43149-43151	on	
317-22	43151-43152	.	

#Text=In the meantime, administrators might wish to reduce the number of page snapshots included in WAL by increasing the checkpoint interval parameters as much as feasible.
318-1	43153-43155	In	
318-2	43156-43159	the	
318-3	43160-43168	meantime	
318-4	43168-43169	,	
318-5	43170-43184	administrators	
318-6	43185-43190	might	
318-7	43191-43195	wish	
318-8	43196-43198	to	
318-9	43199-43205	reduce	
318-10	43206-43209	the	
318-11	43210-43216	number	
318-12	43217-43219	of	
318-13	43220-43224	page	
318-14	43225-43234	snapshots	
318-15	43235-43243	included	
318-16	43244-43246	in	
318-17	43247-43250	WAL	
318-18	43251-43253	by	
318-19	43254-43264	increasing	
318-20	43265-43268	the	
318-21	43269-43279	checkpoint	
318-22	43280-43288	interval	
318-23	43289-43299	parameters	
318-24	43300-43302	as	
318-25	43303-43307	much	
318-26	43308-43310	as	
318-27	43311-43319	feasible	
318-28	43319-43320	.	

#Text=Prev
#Text=Next
#Text=25.2. 
319-1	43321-43325	Prev	
319-2	43326-43330	Next	
319-3	43331-43335	25.2	
319-4	43335-43336	.	
319-5	43336-43337	 	

#Text=File System Level Backup
#Text=Home
#Text=Chapter 26. 
320-1	43337-43341	File	
320-2	43342-43348	System	
320-3	43349-43354	Level	
320-4	43355-43361	Backup	
320-5	43362-43366	Home	
320-6	43367-43374	Chapter	
320-7	43374-43375	 	
320-8	43375-43377	26	
320-9	43377-43378	.	
320-10	43378-43379	 	

#Text=High Availability, Load Balancing, and Replication
#Text=Submit correction
#Text=If you see anything in the documentation that is not correct, does not match
#Text=your experience with the particular feature or requires further clarification,
#Text=please use
#Text=this form
#Text=to report a documentation issue.
321-1	43379-43383	High	
321-2	43384-43396	Availability	
321-3	43396-43397	,	
321-4	43398-43402	Load	
321-5	43403-43412	Balancing	
321-6	43412-43413	,	
321-7	43414-43417	and	
321-8	43418-43429	Replication	
321-9	43430-43436	Submit	
321-10	43437-43447	correction	
321-11	43448-43450	If	
321-12	43451-43454	you	
321-13	43455-43458	see	
321-14	43459-43467	anything	
321-15	43468-43470	in	
321-16	43471-43474	the	
321-17	43475-43488	documentation	
321-18	43489-43493	that	
321-19	43494-43496	is	
321-20	43497-43500	not	
321-21	43501-43508	correct	
321-22	43508-43509	,	
321-23	43510-43514	does	
321-24	43515-43518	not	
321-25	43519-43524	match	
321-26	43525-43529	your	
321-27	43530-43540	experience	
321-28	43541-43545	with	
321-29	43546-43549	the	
321-30	43550-43560	particular	
321-31	43561-43568	feature	
321-32	43569-43571	or	
321-33	43572-43580	requires	
321-34	43581-43588	further	
321-35	43589-43602	clarification	
321-36	43602-43603	,	
321-37	43604-43610	please	
321-38	43611-43614	use	
321-39	43615-43619	this	
321-40	43620-43624	form	
321-41	43625-43627	to	
321-42	43628-43634	report	
321-43	43635-43636	a	
321-44	43637-43650	documentation	
321-45	43651-43656	issue	
321-46	43656-43657	.	

#Text=Privacy Policy |
#Text=Code of Conduct |
#Text=About PostgreSQL |
#Text=Contact
#Text=Copyright © 1996-2021 The PostgreSQL Global Development Group
322-1	43658-43665	Privacy	
322-2	43666-43672	Policy	
322-3	43673-43674	|	
322-4	43675-43679	Code	
322-5	43680-43682	of	
322-6	43683-43690	Conduct	
322-7	43691-43692	|	
322-8	43693-43698	About	
322-9	43699-43709	PostgreSQL	
322-10	43710-43711	|	
322-11	43712-43719	Contact	
322-12	43720-43729	Copyright	
322-13	43730-43731	©	
322-14	43732-43736	1996	
322-15	43736-43737	-	
322-16	43737-43741	2021	
322-17	43742-43745	The	
322-18	43746-43756	PostgreSQL	
322-19	43757-43763	Global	
322-20	43764-43775	Development	
322-21	43776-43781	Group	
