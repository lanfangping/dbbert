#FORMAT=WebAnno TSV 3.3


#Text=Performance Guidelines | GitLab
#Text=GitLab Docs
#Text=GitLab.com (13.11-pre)
#Text=GitLab.com (13.11-pre)
#Text=13.10
#Text=13.9
#Text=13.8
#Text=12.10
#Text=11.11
#Text=Archives
#Text=Get free trial
#Text=GitLab Docs
#Text=Subscriptions
#Text=GitLab.com subscriptions
#Text=Storage usage quota
#Text=Self-managed subscriptions
#Text=Activate Enterprise Edition
#Text=Features available to Starter and Bronze subscribers
#Text=Installation
#Text=Requirements
#Text=Omnibus packages
#Text=Kubernetes
#Text=Docker
#Text=From source
#Text=Azure
#Text=Google Cloud Platform (GCP)
#Text=Amazon Web Services (AWS)
#Text=Administration
#Text=Reference Architectures
#Text=Up to 1,000 users
#Text=Up to 2,000 users
#Text=Up to 3,000 users
#Text=Up to 5,000 users
#Text=Up to 10,000 users
#Text=Up to 25,000 users
#Text=Up to 50,000 users
#Text=Troubleshooting
#Text=Authentication and authorization
#Text=Atlassian Crowd
#Text=Atlassian
#Text=Auth0
#Text=Authentiq
#Text=AWS Cognito
#Text=Azure
#Text=Bitbucket Cloud
#Text=CAS
#Text=Facebook
#Text=Generic OAuth2
#Text=GitHub
#Text=GitLab.com
#Text=Google
#Text=JWT
#Text=Kerberos
#Text=LDAP
#Text=LDAP (Google Secure)
#Text=LDAP Troubleshooting
#Text=OAuth service provider
#Text=Okta
#Text=OmniAuth
#Text=OpenID Connect OmniAuth
#Text=OpenID Connect identity
#Text=Salesforce
#Text=SAML
#Text=Smartcard
#Text=Twitter
#Text=Vault
#Text=Configuration and Admin Area
#Text=Admin Area settings
#Text=Appearance
#Text=Authentication
#Text=CI/CD
#Text=Custom instance-level project templates
#Text=Diff limits
#Text=Email
#Text=External pipeline validation
#Text=Feature flags
#Text=Geo nodes
#Text=Git LFS administration
#Text=GitLab Pages
#Text=Health Check
#Text=Incoming email
#Text=Job artifacts
#Text=Job logs
#Text=Labels
#Text=Log system
#Text=Maintenance Mode
#Text=Rate limits on issue creation
#Text=Rate limits on note creation
#Text=Reply by email
#Text=Repository checks
#Text=Repository size
#Text=Sign-in restrictions
#Text=Sign-up restrictions
#Text=System Hooks
#Text=Timezone
#Text=Uploads
#Text=User Cohorts
#Text=Security
#Text=Password storage
#Text=Custom password length limits
#Text=Generated passwords and integrated authentication
#Text=Credentials inventory
#Text=Limits on SSH keys
#Text=Rate limits
#Text=Webhooks
#Text=Information exclusivity
#Text=Reset user password
#Text=Unlock a user
#Text=Unknown sign-ins, email notification
#Text=Users pending approval
#Text=User file uploads
#Text=Manage the CRIME vulnerability
#Text=Enforce two-factor authentication (2FA)
#Text=User email confirmation
#Text=Security of running jobs
#Text=Proxying assets
#Text=CI/CD variables
#Text=Token overview
#Text=Abuse reports
#Text=Activate and deactivate users
#Text=Create users
#Text=Analytics
#Text=Audit events
#Text=Audit reports
#Text=Block and unblock users
#Text=Broadcast messages
#Text=Consul
#Text=Compliance features
#Text=Email from GitLab
#Text=Global user settings
#Text=Instance Review
#Text=Invalidate Markdown cache
#Text=Issue closing pattern
#Text=PostgreSQL
#Text=PgBouncer
#Text=Replication and failover
#Text=External database service
#Text=Load balancer
#Text=NFS
#Text=Redis
#Text=Sidekiq
#Text=Kubernetes Agent Server
#Text=Repository storage
#Text=Repository storage types
#Text=Gitaly and Gitaly Cluster
#Text=Configure Gitaly
#Text=Configure Gitaly Cluster
#Text=Gitaly reference
#Text=Gitaly timeouts
#Text=Metrics
#Text=Configure GitLab
#Text=Configure Grafana
#Text=GitHub imports
#Text=GitLab exporter
#Text=GitLab Prometheus metrics
#Text=GitLab self monitoring project
#Text=IP allowlist endpoints
#Text=Node exporter
#Text=PGBouncer exporter
#Text=PostgreSQL server exporter
#Text=Prometheus
#Text=Performance bar
#Text=Performance monitoring
#Text=Redis exporter
#Text=Registry exporter
#Text=Request profiling
#Text=Usage statistics
#Text=Object storage
#Text=Operations
#Text=Clean up Redis sessions
#Text=Fast SSH key lookup
#Text=Filesystem benchmarking
#Text=Move repositories
#Text=Multiple Sidekiq processes
#Text=Rails console
#Text=Sidekiq MemoryKiller
#Text=Switch to Puma
#Text=Unicorn
#Text=Use SSH certificates
#Text=Packages
#Text=Container Registry
#Text=Dependency Proxy
#Text=Geo
#Text=Setting up Geo
#Text=Database replication
#Text=External PostgreSQL instances
#Text=Configuration
#Text=Using a Geo site
#Text=Updating Geo nodes
#Text=Using object storage
#Text=Using Docker Registry
#Text=Geo for multiple servers
#Text=Geo security review
#Text=Location-aware Git remote URLs
#Text=Tuning Geo
#Text=Disable Geo
#Text=Removing a Geo site
#Text=Supported data types
#Text=Frequently asked questions
#Text=Troubleshooting
#Text=Validation tests
#Text=Geo Glossary
#Text=Disaster recovery (Geo)
#Text=Planned failover
#Text=Bring primary back
#Text=Automatic background verification
#Text=Rake tasks
#Text=Backup and restore
#Text=Clean up
#Text=Enable namespaces
#Text=General maintenance
#Text=Geo tasks
#Text=GitHub import
#Text=Import repositories
#Text=Integrity check
#Text=LDAP maintenance
#Text=List repositories
#Text=Praefect tasks
#Text=Project import and export
#Text=Repository storage
#Text=Sample Prometheus data
#Text=Uploads migration
#Text=Uploads sanitization
#Text=User management
#Text=Webhooks administration
#Text=X509 signatures
#Text=Server hooks
#Text=Static objects external storage
#Text=Terraform state
#Text=Update
#Text=Releases and maintenance
#Text=Analytics
#Text=Instance-level
#Text=DevOps Report
#Text=Usage Trends
#Text=Group-level
#Text=Contribution
#Text=DevOps Adoption
#Text=Insights
#Text=Issue
#Text=Productivity
#Text=Repository
#Text=Value Stream
#Text=Project-level
#Text=CI/CD
#Text=Code Review
#Text=Insights
#Text=Issue
#Text=Merge Request
#Text=Repository
#Text=Value Stream
#Text=Projects
#Text=Working with projects
#Text=Badges
#Text=Bulk editing (project)
#Text=Code intelligence
#Text=Code owners
#Text=Compliance
#Text=License Compliance
#Text=Compliance Dashboard
#Text=Description templates
#Text=Deploy keys
#Text=Deploy tokens
#Text=File finder
#Text=GitLab Pages
#Text=Getting started
#Text=Default domains, URLs, and baseurls
#Text=CI/CD for GitLab Pages
#Text=Custom domains and SSL/TLS certificates
#Text=Let's Encrypt integration
#Text=Access control
#Text=Redirects
#Text=Exploring GitLab Pages
#Text=Insights
#Text=Members
#Text=Migrating projects
#Text=Bitbucket Cloud
#Text=Bitbucket Server
#Text=ClearCase
#Text=CVS
#Text=FogBugz
#Text=Gemnasium
#Text=GitHub
#Text=GitLab.com
#Text=Gitea
#Text=Jira
#Text=Perforce Helix
#Text=Phabricator
#Text=Repo by manifest file
#Text=Repo by URL
#Text=SVN
#Text=TFVC
#Text=Push options
#Text=Releases
#Text=Repositories
#Text=Branches
#Text=Default branch
#Text=Git attributes
#Text=Git LFS
#Text=Locked files
#Text=File Blame
#Text=File History
#Text=Mirroring
#Text=Protected branches
#Text=Protected tags
#Text=Push rules
#Text=Reduce repository size
#Text=Signed Commits
#Text=Syntax highlighting
#Text=Web Editor
#Text=Web IDE
#Text=Requirements
#Text=Settings
#Text=Project Import/Export
#Text=Project/Group Import/Export rate limits
#Text=Project access tokens
#Text=Share projects
#Text=Snippets
#Text=Static Site Editor
#Text=Wikis
#Text=Groups
#Text=Bulk editing (group)
#Text=Contribution analytics
#Text=Custom group-level project templates
#Text=Epics
#Text=Epic boards
#Text=Manage epics
#Text=Group Import/Export
#Text=Insights
#Text=Issue analytics
#Text=Iterations
#Text=Migrating groups
#Text=Public access
#Text=Roadmaps
#Text=Repositories Analytics
#Text=SAML SSO for GitLab.com groups
#Text=Group Managed Accounts (Closed Beta)
#Text=SCIM provisioning
#Text=Troubleshooting Group SAML and SCIM
#Text=Subgroups
#Text=User
#Text=Abuse reports
#Text=Account
#Text=Active sessions
#Text=Delete account
#Text=Permissions
#Text=Personal access tokens
#Text=Profile preferences
#Text=Two-factor authentication
#Text=Discussions
#Text=Git
#Text=Partial clone
#Text=Troubleshooting Git
#Text=Useful commands
#Text=GitLab.com settings
#Text=Keyboard shortcuts
#Text=Markdown
#Text=AsciiDoc
#Text=Notification emails
#Text=Quick actions
#Text=Autocomplete characters
#Text=Reserved project and group names
#Text=Search
#Text=Advanced Search
#Text=SSH
#Text=Time tracking
#Text=To-Do lists
#Text=Issues
#Text=Award emoji
#Text=Confidential issues
#Text=Crosslinking issues
#Text=CSV export
#Text=CSV import
#Text=Design management
#Text=Due dates
#Text=Issue Boards
#Text=Issue data and actions
#Text=Labels
#Text=Managing issues
#Text=Milestones
#Text=Burndown and burnup charts
#Text=Multiple assignees
#Text=Linked issues
#Text=Service Desk
#Text=Sorting and ordering issue lists
#Text=Weight
#Text=Zoom meetings in issues
#Text=Merge requests
#Text=Allow collaboration
#Text=Approvals
#Text=Creating merge requests
#Text=Cherry pick changes
#Text=Drafts
#Text=Export Merge Requests to CSV
#Text=Getting started
#Text=Merge request dependencies
#Text=Fast forward
#Text=Merge when pipeline succeeds
#Text=Resolve conflicts
#Text=Reverting changes
#Text=Reviewing and managing merge requests
#Text=Squash and merge
#Text=Versions
#Text=Workflows
#Text=Draft merge requests
#Text=Operations
#Text=Metrics dashboard
#Text=Set up alerts for metrics
#Text=Embedding metrics in Markdown
#Text=Embedding metrics in Grafana
#Text=Custom dashboards
#Text=GitLab-defined metrics dashboards
#Text=Dashboard YAML properties
#Text=Dashboard settings
#Text=Panel types for dashboards
#Text=Using variables
#Text=Templates for custom dashboards
#Text=Templating variables for dashboards
#Text=Metrics library
#Text=Monitoring AWS resources
#Text=HAProxy
#Text=Kubernetes
#Text=NGINX
#Text=NGINX Ingress
#Text=NGINX Ingress VTS
#Text=Error Tracking
#Text=Tracing
#Text=Incident management
#Text=Alerts
#Text=Paging and notifications
#Text=Incidents
#Text=Integrations
#Text=Status page
#Text=On-call schedules
#Text=Feature Flags
#Text=Product analytics
#Text=CI/CD
#Text=Get started
#Text=CI/CD concepts
#Text=Migrate from CircleCI
#Text=Migrate from Jenkins
#Text=Enable or disable CI/CD
#Text=Pipelines
#Text=Schedule a pipeline
#Text=Trigger a pipeline
#Text=Pipeline settings
#Text=Pipeline architectures
#Text=Pipeline efficiency
#Text=Directed acyclic graph (DAG)
#Text=Multi-project pipelines
#Text=Parent-child pipelines
#Text=Pipelines for merge requests
#Text=Pipelines for merged results
#Text=Merge trains
#Text=Jobs
#Text=Access a terminal for a running job
#Text=Format scripts and job logs
#Text=Git submodules
#Text=Variables
#Text=Predefined variables
#Text=Where variables can be used
#Text=Environments and deployments
#Text=Environments Dashboard
#Text=Protected environments
#Text=Deployment safety
#Text=Roll out an application incrementally
#Text=Deploy to AWS
#Text=Review Apps
#Text=Runners
#Text=Best practices for large repositories
#Text=Cache and artifacts
#Text=Job artifacts
#Text=Pipeline artifacts
#Text=.gitlab-ci.yml
#Text=.gitlab-ci.yml reference
#Text=Validate syntax
#Text=Pipeline Editor
#Text=Include examples
#Text=Docker
#Text=Run CI/CD jobs in Docker containers
#Text=Use Docker to build Docker images
#Text=Use kaniko to build Docker images
#Text=Services
#Text=MySQL Service
#Text=PostgreSQL Service
#Text=Redis Service
#Text=Auto DevOps
#Text=Get started
#Text=Requirements
#Text=Stages
#Text=Customize
#Text=Upgrade PostgreSQL
#Text=Upgrade Auto Deploy dependencies
#Text=Troubleshooting
#Text=Testing
#Text=Accessibility testing
#Text=Browser performance testing
#Text=Code quality
#Text=Load performance testing
#Text=Metrics reports
#Text=Test cases
#Text=External integrations
#Text=SSH keys
#Text=Bitbucket Cloud
#Text=GitHub
#Text=Slack
#Text=CI/CD examples
#Text=Deployment with Dpl
#Text=End-to-end testing
#Text=NPM with semantic-release
#Text=PHP with PHPunit and atoum
#Text=PHP with NPM and SCP
#Text=PHP with Laravel and Envoy
#Text=Troubleshooting CI/CD
#Text=Application security
#Text=Security Configuration
#Text=Container Scanning
#Text=Threat Monitoring
#Text=Dependency Scanning
#Text=Dependency Scanning Analyzers
#Text=Dependency List
#Text=Static Application Security Testing
#Text=SAST Analyzers
#Text=Secret Detection
#Text=Dynamic Application Security Testing (DAST)
#Text=DAST Troubleshooting
#Text=API Fuzzing
#Text=Coverage Fuzzing
#Text=Security Dashboard
#Text=Offline Environments
#Text=Vulnerability Reports
#Text=Vulnerability Pages
#Text=Scan Policies
#Text=Security scanner integration
#Text=Secure and Protect Terminology
#Text=Packages & Registries
#Text=Package Registry
#Text=Composer
#Text=Conan
#Text=Go Proxy
#Text=Maven
#Text=npm
#Text=NuGet
#Text=PyPI
#Text=Ruby gems
#Text=Generic
#Text=Store all packages in one project
#Text=Container Registry
#Text=Dependency Proxy
#Text=Infrastructure
#Text=Adding and removing clusters
#Text=Add EKS clusters
#Text=Add GKE clusters
#Text=Group-level clusters
#Text=Instance-level clusters
#Text=Canary deployments
#Text=Cluster environments
#Text=Cluster cost management
#Text=Deploy boards
#Text=GitLab Managed Apps
#Text=Configuring Crossplane
#Text=Infrastructure as code
#Text=GitLab managed Terraform state
#Text=Terraform integration in merge requests
#Text=Kubernetes Agent
#Text=Agent configuration repository
#Text=Management project
#Text=Pod logs
#Text=Runbooks
#Text=Serverless
#Text=Deploying AWS Lambda functions
#Text=Securing your deployed applications
#Text=Web Application Firewall
#Text=Container Network Security
#Text=Container Host Security
#Text=Integrations
#Text=Akismet
#Text=Elasticsearch
#Text=Gitpod
#Text=Jira integrations
#Text=Jira
#Text=GitLab for Jira app
#Text=Jira DVCS connector
#Text=Jira Development Panel
#Text=Create Jira Server user
#Text=Create Jira Cloud API token
#Text=Kroki diagrams
#Text=PlantUML
#Text=Project integration management
#Text=Project integrations
#Text=Overview
#Text=Asana
#Text=Bamboo CI
#Text=Discord
#Text=Emails on push
#Text=GitHub
#Text=Hangouts Chat
#Text=Irker
#Text=Jenkins
#Text=Mattermost notifications
#Text=Mattermost slash commands
#Text=Microsoft Teams
#Text=Mock CI
#Text=Prometheus
#Text=Service templates
#Text=Slack notifications
#Text=Slack slash commands
#Text=Slack application
#Text=Unify Circuit
#Text=Webex Teams
#Text=Webhooks
#Text=External issue tracker
#Text=Bugzilla
#Text=Custom issue tracker
#Text=IBM Engineering Workflow Management
#Text=Redmine
#Text=YouTrack
#Text=Gmail actions buttons
#Text=reCAPTCHA
#Text=Security partners
#Text=Sourcegraph
#Text=Trello
#Text=API
#Text=Resources
#Text=.gitignore (templates)
#Text=.gitlab-ci.yml (templates)
#Text=Access requests
#Text=Appearance (application)
#Text=Applications
#Text=Audit events
#Text=Avatar
#Text=Award emoji
#Text=Badges (project)
#Text=Badges (group)
#Text=Branches
#Text=Broadcast messages
#Text=Clusters (project)
#Text=Clusters (group)
#Text=Clusters (instance)
#Text=Commits
#Text=Composer
#Text=Conan
#Text=Container Registry
#Text=Custom attributes
#Text=Dashboard annotations
#Text=Dependencies
#Text=Dependency Proxy
#Text=Deploy keys
#Text=Deploy tokens
#Text=Deployments
#Text=Discussions
#Text=Dockerfile (templates)
#Text=DORA4 metrics
#Text=DORA4 project analytics
#Text=DORA4 group analytics
#Text=Environments
#Text=Epics
#Text=Error tracking
#Text=Events
#Text=Experiments
#Text=Features flags
#Text=Feature flag user lists
#Text=Freeze periods
#Text=Geo nodes
#Text=GitLab Pages
#Text=Group activity analytics
#Text=Group Import/Export
#Text=Group repository storage moves
#Text=Group wikis
#Text=Groups
#Text=Import
#Text=Instance-level CI/CD variables
#Text=Invitations
#Text=Issue boards (project)
#Text=Issue boards (group)
#Text=Issues
#Text=Issues (epic)
#Text=Issues statistics
#Text=Iterations (project)
#Text=Iterations (group)
#Text=Jobs
#Text=Job artifacts
#Text=Keys
#Text=Labels (project)
#Text=Labels (group)
#Text=License
#Text=Licenses (templates)
#Text=Links (issue)
#Text=Links (epic)
#Text=Managed licenses
#Text=Markdown
#Text=Maven
#Text=Members
#Text=Merge request approvals
#Text=Merge request context commits
#Text=Merge requests
#Text=Merge trains
#Text=Milestones (project)
#Text=Milestones (group)
#Text=Namespaces
#Text=Notes (comments)
#Text=Notification settings
#Text=NuGet
#Text=Packages
#Text=Pages domains
#Text=Personal access tokens
#Text=Pipelines schedules
#Text=Pipeline triggers
#Text=Pipelines
#Text=Plan limits
#Text=Project access tokens
#Text=Project aliases
#Text=Project import/export
#Text=Project remote mirrors
#Text=Project repository storage moves
#Text=Project statistics
#Text=Project templates
#Text=Project vulnerabilities
#Text=Projects
#Text=Protected branches
#Text=Protected environments
#Text=Protected tags
#Text=PyPI
#Text=Releases
#Text=Release links
#Text=Repositories
#Text=Repository files
#Text=Repository submodules
#Text=Resource iteration events
#Text=Resource label events
#Text=Resource milestone events
#Text=Resource state events
#Text=Resource weight events
#Text=Ruby gems
#Text=Runners
#Text=SCIM
#Text=Search
#Text=Services
#Text=Settings (application)
#Text=Sidekiq metrics
#Text=Sidekiq queues
#Text=Snippet repository storage moves
#Text=Snippets
#Text=Snippets (project)
#Text=Statistics (application)
#Text=Suggestions
#Text=System hooks
#Text=Tags
#Text=To-Do lists
#Text=Users
#Text=User-starred metrics dashboards
#Text=Variables (project)
#Text=Variables (group)
#Text=Version
#Text=Visual Review discussions
#Text=Vulnerabilities
#Text=Vulnerability export
#Text=Vulnerability Findings
#Text=Wikis
#Text=GraphQL
#Text=Getting started
#Text=GraphQL reference
#Text=Create audit report (example)
#Text=Identify issue boards (example)
#Text=Removed items
#Text=v3 to v4
#Text=Lint .gitlab-ci.yml
#Text=GitLab as an OAuth2 provider
#Text=Omnibus GitLab
#Text=Architecture
#Text=Omnibus packages and images
#Text=Package information
#Text=Package defaults
#Text=Package licensing
#Text=Package signatures
#Text=Installation
#Text=Container Registry
#Text=Deprecation policy
#Text=Deprecated OSes
#Text=Docker images
#Text=Manual installation
#Text=Install JiHu Edition
#Text=Configure
#Text=Custom environment variables
#Text=Backups
#Text=Database
#Text=GitLab Mattermost
#Text=Grafana
#Text=High availability roles
#Text=LDAP
#Text=Logs
#Text=NGINX
#Text=Gitaly Cluster
#Text=Prometheus
#Text=Puma
#Text=Raspberry Pi
#Text=Redis
#Text=SMTP
#Text=SSL
#Text=DNS
#Text=Unicorn
#Text=Image scaling
#Text=Memory-constrained environments
#Text=Release process
#Text=OpenShift release process
#Text=Update
#Text=Convert to Omnibus
#Text=Package signatures
#Text=GitLab 13 changes
#Text=GitLab 12 changes
#Text=GitLab 11 changes
#Text=GitLab 10 changes
#Text=Maintain
#Text=Troubleshoot
#Text=GitLab Runner
#Text=Install
#Text=Docker
#Text=FreeBSD
#Text=Kubernetes (Helm Chart)
#Text=Kubernetes (Agent)
#Text=Linux
#Text=macOS
#Text=OpenShift
#Text=Windows
#Text=Bleeding edge releases
#Text=Official Linux packages
#Text=Old GitLab Runner URLs
#Text=Configure
#Text=Advanced config
#Text=Autoscale config
#Text=Autoscale on AWS EC2
#Text=Autoscale on AWS Fargate
#Text=Commands
#Text=Feature flags
#Text=OpenShift
#Text=Running behind a proxy
#Text=Rate limited requests
#Text=Self-signed certificates
#Text=System services
#Text=Speed up job execution
#Text=Register
#Text=Examples
#Text=Executors
#Text=Custom
#Text=libvirt
#Text=LXD
#Text=Docker
#Text=Docker Machine
#Text=Kubernetes
#Text=Shell
#Text=SSH
#Text=Parallels
#Text=Virtual Box
#Text=Monitor
#Text=Security
#Text=Shells
#Text=Troubleshoot
#Text=Best Practices
#Text=GitLab Helm Charts
#Text=Install
#Text=Required tools
#Text=Cloud cluster preparation
#Text=AKS
#Text=EKS
#Text=GKE
#Text=OpenShift
#Text=Deploy
#Text=Upgrade
#Text=Backup and Restore
#Text=Backup
#Text=Restore
#Text=Migrate from Omnibus
#Text=Version mappings
#Text=Configure
#Text=Globals
#Text=GitLab sub-charts
#Text=Gitaly chart
#Text=GitLab Exporter chart
#Text=GitLab Grafana chart
#Text=GitLab Pages chart
#Text=GitLab Runner chart
#Text=GitLab Shell chart
#Text=KAS chart
#Text=Migrations chart
#Text=Praefect chart
#Text=Sidekiq chart
#Text=Task Runner chart
#Text=Webservice chart
#Text=Minio chart
#Text=Nginx chart
#Text=Redis chart
#Text=Redis HA chart
#Text=Registry chart
#Text=Advanced
#Text=External database
#Text=External Gitaly
#Text=External Mattermost
#Text=External Nginx
#Text=External object storage
#Text=External Redis
#Text=Persistent volumes
#Text=Troubleshoot
#Text=Contribute to GitLab
#Text=Get started
#Text=Changelog entries
#Text=Community roles
#Text=Design and UI
#Text=GitLab Development Kit
#Text=Issues workflow
#Text=Merge request workflow
#Text=Code review guidelines
#Text=Style guides
#Text=Architecture
#Text=CI/CD development
#Text=CI/CD template development
#Text=Auto DevOps development
#Text=Code intelligence
#Text=Danger bot
#Text=Database development
#Text=Case study - filtering by label
#Text=Case study - namespaces storage statistics
#Text=Database review guidelines
#Text=Migrations style guide
#Text=SQL guidelines
#Text=Understanding EXPLAIN plans
#Text=Avoiding downtime in migrations
#Text=Developer guide to logging
#Text=Development Rake tasks
#Text=Mass insert Rails models
#Text=Documentation
#Text=Style guide
#Text=GraphQL style guide
#Text=RESTful API style guide
#Text=Topic types
#Text=Process
#Text=Testing
#Text=Site architecture
#Text=Global navigation
#Text=Deployment process
#Text=Release process
#Text=Distributed tracing
#Text=Experiments
#Text=Experimentation module
#Text=GLEX
#Text=Feature flags for GitLab development
#Text=Controlling feature flags
#Text=Documenting feature flags
#Text=Framework - DeclarativePolicy
#Text=Frontend development
#Text=Accessibility
#Text=Architecture
#Text=Axios
#Text=Dark mode
#Text=Design patterns
#Text=Development process
#Text=Droplab
#Text=Emojis
#Text=Filter
#Text=Frontend FAQ
#Text=GraphQL
#Text=Icons and SVG illustrations
#Text=InputSetter
#Text=Performance
#Text=Principles
#Text=Security
#Text=Tooling
#Text=Vuex
#Text=Vue
#Text=Widgets
#Text=GitLab Pages development
#Text=Geo development
#Text=Geo framework
#Text=Gitaly development
#Text=GitLab Design System
#Text=GitLab development style guides
#Text=API style guide
#Text=Go standards and style guidelines
#Text=GraphQL API style guide
#Text=Guidelines for shell commands
#Text=HTML style guide
#Text=JavaScript style guide
#Text=Newlines style guide
#Text=Python development guidelines
#Text=SCSS style guide
#Text=Shell scripting standards and style guidelines
#Text=Sidekiq debugging
#Text=Sidekiq style guide
#Text=Vue style guide
#Text=GitLab group migration
#Text=GitLab project pipelines
#Text=GitLab Runner
#Text=Review GitLab Runner
#Text=Add new Windows version support for Docker executor
#Text=GraphQL development
#Text=GraphQL BatchLoader
#Text=GraphQL pagination
#Text=GraphQL Pro
#Text=Helm Charts
#Text=Architecture of Cloud native GitLab Helm charts
#Text=Backup and Restore
#Text=Goals
#Text=Architecture
#Text=Design Decisions
#Text=Resource Usage
#Text=Environment setup
#Text=Style guide
#Text=Versioning and release
#Text=Import/Export
#Text=Instrumenting Ruby code
#Text=Issuable-like Rails models utilities
#Text=Issue types
#Text=Kubernetes Agent
#Text=Routing kas requests
#Text=Repository overview
#Text=Identity and authentication
#Text=User stories
#Text=GitOps with the Kubernetes Agent
#Text=Running locally
#Text=Kubernetes integration
#Text=Omnibus GitLab
#Text=Build locally
#Text=Build Omnibus GitLab package
#Text=Build all-in-one Docker image
#Text=Information for GitLab team members
#Text=Set up a development environment
#Text=Config options
#Text=Changing YAML config options
#Text=Adding deprecation messages
#Text=Adding new gitlab-ctl commands
#Text=Adding new services
#Text=Adding new software definitions
#Text=Creating patches
#Text=Installing OpenShift
#Text=Managing PostgreSQL versions
#Text=Working with public_attributes.json
#Text=Package development
#Text=Permissions guide
#Text=Testing standards and styles
#Text=Flaky tests
#Text=Frontend testing standards and style guidelines
#Text=GitLab tests in CI context
#Text=Review apps
#Text=Smoke tests
#Text=Testing best practices
#Text=Testing levels
#Text=Testing Rails migrations
#Text=Testing Rake tasks
#Text=Testing (end to end)
#Text=Beginner's guide to writing end-to-end tests
#Text=Best practices when writing end-to-end tests
#Text=Dynamic element validation
#Text=Flows in GitLab QA
#Text=Page objects in GitLab QA
#Text=Resource class in GitLab QA
#Text=Style guide for writing end-to-end tests
#Text=Testing with feature flags
#Text=Translate GitLab
#Text=Externalization
#Text=Translation
#Text=Proofreading
#Text=Merging
#Text=Snowplow guide
#Text=Usage Ping guide
#Text=Metrics dictionary guide
#Text=Metrics dictionary
#Text=Value Stream Analytics
#Text=Working with Prometheus metrics
#Text=GitLab Docs
#Text=Contributor and Development Docs
#Text=Performance Guidelines
#Text=Workflow
#Text=Tooling
#Text=Benchmarks
#Text=Profiling
#Text=Development
#Text=Production
#Text=RSpec profiling
#Text=Memory optimization
#Text=Memory allocations
#Text=Checking memory pressure of own code
#Text=Different types of allocations
#Text=Using Memory Profiler
#Text=Rbtrace
#Text=Importance of Changes
#Text=Slow Operations & Sidekiq
#Text=Git Operations
#Text=Caching
#Text=String Freezing
#Text=Banzai pipelines and filters
#Text=Reading from files and other data sources
#Text=Recommendations
#Text=Anti-Patterns
#Text=Moving Allocations to Constants
#Text=How to seed a database with millions of rows
#Text=Examples
#Text=Performance Guidelines
#Text=This document describes various guidelines to follow to ensure good and
#Text=consistent performance of GitLab.
1-1	0-11	Performance	
1-2	12-22	Guidelines	
1-3	23-24	|	
1-4	25-31	GitLab	
1-5	32-38	GitLab	
1-6	39-43	Docs	
1-7	44-54	GitLab.com	
1-8	55-56	(	
1-9	56-61	13.11	
1-10	61-62	-	
1-11	62-65	pre	
1-12	65-66	)	
1-13	67-77	GitLab.com	
1-14	78-79	(	
1-15	79-84	13.11	
1-16	84-85	-	
1-17	85-88	pre	
1-18	88-89	)	
1-19	90-95	13.10	
1-20	96-100	13.9	
1-21	101-105	13.8	
1-22	106-111	12.10	
1-23	112-117	11.11	
1-24	118-126	Archives	
1-25	127-130	Get	
1-26	131-135	free	
1-27	136-141	trial	
1-28	142-148	GitLab	
1-29	149-153	Docs	
1-30	154-167	Subscriptions	
1-31	168-178	GitLab.com	
1-32	179-192	subscriptions	
1-33	193-200	Storage	
1-34	201-206	usage	
1-35	207-212	quota	
1-36	213-225	Self-managed	
1-37	226-239	subscriptions	
1-38	240-248	Activate	
1-39	249-259	Enterprise	
1-40	260-267	Edition	
1-41	268-276	Features	
1-42	277-286	available	
1-43	287-289	to	
1-44	290-297	Starter	
1-45	298-301	and	
1-46	302-308	Bronze	
1-47	309-320	subscribers	
1-48	321-333	Installation	
1-49	334-346	Requirements	
1-50	347-354	Omnibus	
1-51	355-363	packages	
1-52	364-374	Kubernetes	
1-53	375-381	Docker	
1-54	382-386	From	
1-55	387-393	source	
1-56	394-399	Azure	
1-57	400-406	Google	
1-58	407-412	Cloud	
1-59	413-421	Platform	
1-60	422-423	(	
1-61	423-426	GCP	
1-62	426-427	)	
1-63	428-434	Amazon	
1-64	435-438	Web	
1-65	439-447	Services	
1-66	448-449	(	
1-67	449-452	AWS	
1-68	452-453	)	
1-69	454-468	Administration	
1-70	469-478	Reference	
1-71	479-492	Architectures	
1-72	493-495	Up	
1-73	496-498	to	
1-74	499-504	1,000	
1-75	505-510	users	
1-76	511-513	Up	
1-77	514-516	to	
1-78	517-522	2,000	
1-79	523-528	users	
1-80	529-531	Up	
1-81	532-534	to	
1-82	535-540	3,000	
1-83	541-546	users	
1-84	547-549	Up	
1-85	550-552	to	
1-86	553-558	5,000	
1-87	559-564	users	
1-88	565-567	Up	
1-89	568-570	to	
1-90	571-577	10,000	
1-91	578-583	users	
1-92	584-586	Up	
1-93	587-589	to	
1-94	590-596	25,000	
1-95	597-602	users	
1-96	603-605	Up	
1-97	606-608	to	
1-98	609-615	50,000	
1-99	616-621	users	
1-100	622-637	Troubleshooting	
1-101	638-652	Authentication	
1-102	653-656	and	
1-103	657-670	authorization	
1-104	671-680	Atlassian	
1-105	681-686	Crowd	
1-106	687-696	Atlassian	
1-107	697-702	Auth0	
1-108	703-712	Authentiq	
1-109	713-716	AWS	
1-110	717-724	Cognito	
1-111	725-730	Azure	
1-112	731-740	Bitbucket	
1-113	741-746	Cloud	
1-114	747-750	CAS	
1-115	751-759	Facebook	
1-116	760-767	Generic	
1-117	768-774	OAuth2	
1-118	775-781	GitHub	
1-119	782-792	GitLab.com	
1-120	793-799	Google	
1-121	800-803	JWT	
1-122	804-812	Kerberos	
1-123	813-817	LDAP	
1-124	818-822	LDAP	
1-125	823-824	(	
1-126	824-830	Google	
1-127	831-837	Secure	
1-128	837-838	)	
1-129	839-843	LDAP	
1-130	844-859	Troubleshooting	
1-131	860-865	OAuth	
1-132	866-873	service	
1-133	874-882	provider	
1-134	883-887	Okta	
1-135	888-896	OmniAuth	
1-136	897-903	OpenID	
1-137	904-911	Connect	
1-138	912-920	OmniAuth	
1-139	921-927	OpenID	
1-140	928-935	Connect	
1-141	936-944	identity	
1-142	945-955	Salesforce	
1-143	956-960	SAML	
1-144	961-970	Smartcard	
1-145	971-978	Twitter	
1-146	979-984	Vault	
1-147	985-998	Configuration	
1-148	999-1002	and	
1-149	1003-1008	Admin	
1-150	1009-1013	Area	
1-151	1014-1019	Admin	
1-152	1020-1024	Area	
1-153	1025-1033	settings	
1-154	1034-1044	Appearance	
1-155	1045-1059	Authentication	
1-156	1060-1062	CI	
1-157	1062-1063	/	
1-158	1063-1065	CD	
1-159	1066-1072	Custom	
1-160	1073-1087	instance-level	
1-161	1088-1095	project	
1-162	1096-1105	templates	
1-163	1106-1110	Diff	
1-164	1111-1117	limits	
1-165	1118-1123	Email	
1-166	1124-1132	External	
1-167	1133-1141	pipeline	
1-168	1142-1152	validation	
1-169	1153-1160	Feature	
1-170	1161-1166	flags	
1-171	1167-1170	Geo	
1-172	1171-1176	nodes	
1-173	1177-1180	Git	
1-174	1181-1184	LFS	
1-175	1185-1199	administration	
1-176	1200-1206	GitLab	
1-177	1207-1212	Pages	
1-178	1213-1219	Health	
1-179	1220-1225	Check	
1-180	1226-1234	Incoming	
1-181	1235-1240	email	
1-182	1241-1244	Job	
1-183	1245-1254	artifacts	
1-184	1255-1258	Job	
1-185	1259-1263	logs	
1-186	1264-1270	Labels	
1-187	1271-1274	Log	
1-188	1275-1281	system	
1-189	1282-1293	Maintenance	
1-190	1294-1298	Mode	
1-191	1299-1303	Rate	
1-192	1304-1310	limits	
1-193	1311-1313	on	
1-194	1314-1319	issue	
1-195	1320-1328	creation	
1-196	1329-1333	Rate	
1-197	1334-1340	limits	
1-198	1341-1343	on	
1-199	1344-1348	note	
1-200	1349-1357	creation	
1-201	1358-1363	Reply	
1-202	1364-1366	by	
1-203	1367-1372	email	
1-204	1373-1383	Repository	
1-205	1384-1390	checks	
1-206	1391-1401	Repository	
1-207	1402-1406	size	
1-208	1407-1414	Sign-in	
1-209	1415-1427	restrictions	
1-210	1428-1435	Sign-up	
1-211	1436-1448	restrictions	
1-212	1449-1455	System	
1-213	1456-1461	Hooks	
1-214	1462-1470	Timezone	
1-215	1471-1478	Uploads	
1-216	1479-1483	User	
1-217	1484-1491	Cohorts	
1-218	1492-1500	Security	
1-219	1501-1509	Password	
1-220	1510-1517	storage	
1-221	1518-1524	Custom	
1-222	1525-1533	password	
1-223	1534-1540	length	
1-224	1541-1547	limits	
1-225	1548-1557	Generated	
1-226	1558-1567	passwords	
1-227	1568-1571	and	
1-228	1572-1582	integrated	
1-229	1583-1597	authentication	
1-230	1598-1609	Credentials	
1-231	1610-1619	inventory	
1-232	1620-1626	Limits	
1-233	1627-1629	on	
1-234	1630-1633	SSH	
1-235	1634-1638	keys	
1-236	1639-1643	Rate	
1-237	1644-1650	limits	
1-238	1651-1659	Webhooks	
1-239	1660-1671	Information	
1-240	1672-1683	exclusivity	
1-241	1684-1689	Reset	
1-242	1690-1694	user	
1-243	1695-1703	password	
1-244	1704-1710	Unlock	
1-245	1711-1712	a	
1-246	1713-1717	user	
1-247	1718-1725	Unknown	
1-248	1726-1734	sign-ins	
1-249	1734-1735	,	
1-250	1736-1741	email	
1-251	1742-1754	notification	
1-252	1755-1760	Users	
1-253	1761-1768	pending	
1-254	1769-1777	approval	
1-255	1778-1782	User	
1-256	1783-1787	file	
1-257	1788-1795	uploads	
1-258	1796-1802	Manage	
1-259	1803-1806	the	
1-260	1807-1812	CRIME	
1-261	1813-1826	vulnerability	
1-262	1827-1834	Enforce	
1-263	1835-1845	two-factor	
1-264	1846-1860	authentication	
1-265	1861-1862	(	
1-266	1862-1865	2FA	
1-267	1865-1866	)	
1-268	1867-1871	User	
1-269	1872-1877	email	
1-270	1878-1890	confirmation	
1-271	1891-1899	Security	
1-272	1900-1902	of	
1-273	1903-1910	running	
1-274	1911-1915	jobs	
1-275	1916-1924	Proxying	
1-276	1925-1931	assets	
1-277	1932-1934	CI	
1-278	1934-1935	/	
1-279	1935-1937	CD	
1-280	1938-1947	variables	
1-281	1948-1953	Token	
1-282	1954-1962	overview	
1-283	1963-1968	Abuse	
1-284	1969-1976	reports	
1-285	1977-1985	Activate	
1-286	1986-1989	and	
1-287	1990-2000	deactivate	
1-288	2001-2006	users	
1-289	2007-2013	Create	
1-290	2014-2019	users	
1-291	2020-2029	Analytics	
1-292	2030-2035	Audit	
1-293	2036-2042	events	
1-294	2043-2048	Audit	
1-295	2049-2056	reports	
1-296	2057-2062	Block	
1-297	2063-2066	and	
1-298	2067-2074	unblock	
1-299	2075-2080	users	
1-300	2081-2090	Broadcast	
1-301	2091-2099	messages	
1-302	2100-2106	Consul	
1-303	2107-2117	Compliance	
1-304	2118-2126	features	
1-305	2127-2132	Email	
1-306	2133-2137	from	
1-307	2138-2144	GitLab	
1-308	2145-2151	Global	
1-309	2152-2156	user	
1-310	2157-2165	settings	
1-311	2166-2174	Instance	
1-312	2175-2181	Review	
1-313	2182-2192	Invalidate	
1-314	2193-2201	Markdown	
1-315	2202-2207	cache	
1-316	2208-2213	Issue	
1-317	2214-2221	closing	
1-318	2222-2229	pattern	
1-319	2230-2240	PostgreSQL	
1-320	2241-2250	PgBouncer	
1-321	2251-2262	Replication	
1-322	2263-2266	and	
1-323	2267-2275	failover	
1-324	2276-2284	External	
1-325	2285-2293	database	
1-326	2294-2301	service	
1-327	2302-2306	Load	
1-328	2307-2315	balancer	
1-329	2316-2319	NFS	
1-330	2320-2325	Redis	
1-331	2326-2333	Sidekiq	
1-332	2334-2344	Kubernetes	
1-333	2345-2350	Agent	
1-334	2351-2357	Server	
1-335	2358-2368	Repository	
1-336	2369-2376	storage	
1-337	2377-2387	Repository	
1-338	2388-2395	storage	
1-339	2396-2401	types	
1-340	2402-2408	Gitaly	
1-341	2409-2412	and	
1-342	2413-2419	Gitaly	
1-343	2420-2427	Cluster	
1-344	2428-2437	Configure	
1-345	2438-2444	Gitaly	
1-346	2445-2454	Configure	
1-347	2455-2461	Gitaly	
1-348	2462-2469	Cluster	
1-349	2470-2476	Gitaly	
1-350	2477-2486	reference	
1-351	2487-2493	Gitaly	
1-352	2494-2502	timeouts	
1-353	2503-2510	Metrics	
1-354	2511-2520	Configure	
1-355	2521-2527	GitLab	
1-356	2528-2537	Configure	
1-357	2538-2545	Grafana	
1-358	2546-2552	GitHub	
1-359	2553-2560	imports	
1-360	2561-2567	GitLab	
1-361	2568-2576	exporter	
1-362	2577-2583	GitLab	
1-363	2584-2594	Prometheus	
1-364	2595-2602	metrics	
1-365	2603-2609	GitLab	
1-366	2610-2614	self	
1-367	2615-2625	monitoring	
1-368	2626-2633	project	
1-369	2634-2636	IP	
1-370	2637-2646	allowlist	
1-371	2647-2656	endpoints	
1-372	2657-2661	Node	
1-373	2662-2670	exporter	
1-374	2671-2680	PGBouncer	
1-375	2681-2689	exporter	
1-376	2690-2700	PostgreSQL	
1-377	2701-2707	server	
1-378	2708-2716	exporter	
1-379	2717-2727	Prometheus	
1-380	2728-2739	Performance	
1-381	2740-2743	bar	
1-382	2744-2755	Performance	
1-383	2756-2766	monitoring	
1-384	2767-2772	Redis	
1-385	2773-2781	exporter	
1-386	2782-2790	Registry	
1-387	2791-2799	exporter	
1-388	2800-2807	Request	
1-389	2808-2817	profiling	
1-390	2818-2823	Usage	
1-391	2824-2834	statistics	
1-392	2835-2841	Object	
1-393	2842-2849	storage	
1-394	2850-2860	Operations	
1-395	2861-2866	Clean	
1-396	2867-2869	up	
1-397	2870-2875	Redis	
1-398	2876-2884	sessions	
1-399	2885-2889	Fast	
1-400	2890-2893	SSH	
1-401	2894-2897	key	
1-402	2898-2904	lookup	
1-403	2905-2915	Filesystem	
1-404	2916-2928	benchmarking	
1-405	2929-2933	Move	
1-406	2934-2946	repositories	
1-407	2947-2955	Multiple	
1-408	2956-2963	Sidekiq	
1-409	2964-2973	processes	
1-410	2974-2979	Rails	
1-411	2980-2987	console	
1-412	2988-2995	Sidekiq	
1-413	2996-3008	MemoryKiller	
1-414	3009-3015	Switch	
1-415	3016-3018	to	
1-416	3019-3023	Puma	
1-417	3024-3031	Unicorn	
1-418	3032-3035	Use	
1-419	3036-3039	SSH	
1-420	3040-3052	certificates	
1-421	3053-3061	Packages	
1-422	3062-3071	Container	
1-423	3072-3080	Registry	
1-424	3081-3091	Dependency	
1-425	3092-3097	Proxy	
1-426	3098-3101	Geo	
1-427	3102-3109	Setting	
1-428	3110-3112	up	
1-429	3113-3116	Geo	
1-430	3117-3125	Database	
1-431	3126-3137	replication	
1-432	3138-3146	External	
1-433	3147-3157	PostgreSQL	
1-434	3158-3167	instances	
1-435	3168-3181	Configuration	
1-436	3182-3187	Using	
1-437	3188-3189	a	
1-438	3190-3193	Geo	
1-439	3194-3198	site	
1-440	3199-3207	Updating	
1-441	3208-3211	Geo	
1-442	3212-3217	nodes	
1-443	3218-3223	Using	
1-444	3224-3230	object	
1-445	3231-3238	storage	
1-446	3239-3244	Using	
1-447	3245-3251	Docker	
1-448	3252-3260	Registry	
1-449	3261-3264	Geo	
1-450	3265-3268	for	
1-451	3269-3277	multiple	
1-452	3278-3285	servers	
1-453	3286-3289	Geo	
1-454	3290-3298	security	
1-455	3299-3305	review	
1-456	3306-3320	Location-aware	
1-457	3321-3324	Git	
1-458	3325-3331	remote	
1-459	3332-3336	URLs	
1-460	3337-3343	Tuning	
1-461	3344-3347	Geo	
1-462	3348-3355	Disable	
1-463	3356-3359	Geo	
1-464	3360-3368	Removing	
1-465	3369-3370	a	
1-466	3371-3374	Geo	
1-467	3375-3379	site	
1-468	3380-3389	Supported	
1-469	3390-3394	data	
1-470	3395-3400	types	
1-471	3401-3411	Frequently	
1-472	3412-3417	asked	
1-473	3418-3427	questions	
1-474	3428-3443	Troubleshooting	
1-475	3444-3454	Validation	
1-476	3455-3460	tests	
1-477	3461-3464	Geo	
1-478	3465-3473	Glossary	
1-479	3474-3482	Disaster	
1-480	3483-3491	recovery	
1-481	3492-3493	(	
1-482	3493-3496	Geo	
1-483	3496-3497	)	
1-484	3498-3505	Planned	
1-485	3506-3514	failover	
1-486	3515-3520	Bring	
1-487	3521-3528	primary	
1-488	3529-3533	back	
1-489	3534-3543	Automatic	
1-490	3544-3554	background	
1-491	3555-3567	verification	
1-492	3568-3572	Rake	
1-493	3573-3578	tasks	
1-494	3579-3585	Backup	
1-495	3586-3589	and	
1-496	3590-3597	restore	
1-497	3598-3603	Clean	
1-498	3604-3606	up	
1-499	3607-3613	Enable	
1-500	3614-3624	namespaces	
1-501	3625-3632	General	
1-502	3633-3644	maintenance	
1-503	3645-3648	Geo	
1-504	3649-3654	tasks	
1-505	3655-3661	GitHub	
1-506	3662-3668	import	
1-507	3669-3675	Import	
1-508	3676-3688	repositories	
1-509	3689-3698	Integrity	
1-510	3699-3704	check	
1-511	3705-3709	LDAP	
1-512	3710-3721	maintenance	
1-513	3722-3726	List	
1-514	3727-3739	repositories	
1-515	3740-3748	Praefect	
1-516	3749-3754	tasks	
1-517	3755-3762	Project	
1-518	3763-3769	import	
1-519	3770-3773	and	
1-520	3774-3780	export	
1-521	3781-3791	Repository	
1-522	3792-3799	storage	
1-523	3800-3806	Sample	
1-524	3807-3817	Prometheus	
1-525	3818-3822	data	
1-526	3823-3830	Uploads	
1-527	3831-3840	migration	
1-528	3841-3848	Uploads	
1-529	3849-3861	sanitization	
1-530	3862-3866	User	
1-531	3867-3877	management	
1-532	3878-3886	Webhooks	
1-533	3887-3901	administration	
1-534	3902-3906	X509	
1-535	3907-3917	signatures	
1-536	3918-3924	Server	
1-537	3925-3930	hooks	
1-538	3931-3937	Static	
1-539	3938-3945	objects	
1-540	3946-3954	external	
1-541	3955-3962	storage	
1-542	3963-3972	Terraform	
1-543	3973-3978	state	
1-544	3979-3985	Update	
1-545	3986-3994	Releases	
1-546	3995-3998	and	
1-547	3999-4010	maintenance	
1-548	4011-4020	Analytics	
1-549	4021-4035	Instance-level	
1-550	4036-4042	DevOps	
1-551	4043-4049	Report	
1-552	4050-4055	Usage	
1-553	4056-4062	Trends	
1-554	4063-4074	Group-level	
1-555	4075-4087	Contribution	
1-556	4088-4094	DevOps	
1-557	4095-4103	Adoption	
1-558	4104-4112	Insights	
1-559	4113-4118	Issue	
1-560	4119-4131	Productivity	
1-561	4132-4142	Repository	
1-562	4143-4148	Value	
1-563	4149-4155	Stream	
1-564	4156-4169	Project-level	
1-565	4170-4172	CI	
1-566	4172-4173	/	
1-567	4173-4175	CD	
1-568	4176-4180	Code	
1-569	4181-4187	Review	
1-570	4188-4196	Insights	
1-571	4197-4202	Issue	
1-572	4203-4208	Merge	
1-573	4209-4216	Request	
1-574	4217-4227	Repository	
1-575	4228-4233	Value	
1-576	4234-4240	Stream	
1-577	4241-4249	Projects	
1-578	4250-4257	Working	
1-579	4258-4262	with	
1-580	4263-4271	projects	
1-581	4272-4278	Badges	
1-582	4279-4283	Bulk	
1-583	4284-4291	editing	
1-584	4292-4293	(	
1-585	4293-4300	project	
1-586	4300-4301	)	
1-587	4302-4306	Code	
1-588	4307-4319	intelligence	
1-589	4320-4324	Code	
1-590	4325-4331	owners	
1-591	4332-4342	Compliance	
1-592	4343-4350	License	
1-593	4351-4361	Compliance	
1-594	4362-4372	Compliance	
1-595	4373-4382	Dashboard	
1-596	4383-4394	Description	
1-597	4395-4404	templates	
1-598	4405-4411	Deploy	
1-599	4412-4416	keys	
1-600	4417-4423	Deploy	
1-601	4424-4430	tokens	
1-602	4431-4435	File	
1-603	4436-4442	finder	
1-604	4443-4449	GitLab	
1-605	4450-4455	Pages	
1-606	4456-4463	Getting	
1-607	4464-4471	started	
1-608	4472-4479	Default	
1-609	4480-4487	domains	
1-610	4487-4488	,	
1-611	4489-4493	URLs	
1-612	4493-4494	,	
1-613	4495-4498	and	
1-614	4499-4507	baseurls	
1-615	4508-4510	CI	
1-616	4510-4511	/	
1-617	4511-4513	CD	
1-618	4514-4517	for	
1-619	4518-4524	GitLab	
1-620	4525-4530	Pages	
1-621	4531-4537	Custom	
1-622	4538-4545	domains	
1-623	4546-4549	and	
1-624	4550-4553	SSL	
1-625	4553-4554	/	
1-626	4554-4557	TLS	
1-627	4558-4570	certificates	
1-628	4571-4576	Let's	
1-629	4577-4584	Encrypt	
1-630	4585-4596	integration	
1-631	4597-4603	Access	
1-632	4604-4611	control	
1-633	4612-4621	Redirects	
1-634	4622-4631	Exploring	
1-635	4632-4638	GitLab	
1-636	4639-4644	Pages	
1-637	4645-4653	Insights	
1-638	4654-4661	Members	
1-639	4662-4671	Migrating	
1-640	4672-4680	projects	
1-641	4681-4690	Bitbucket	
1-642	4691-4696	Cloud	
1-643	4697-4706	Bitbucket	
1-644	4707-4713	Server	
1-645	4714-4723	ClearCase	
1-646	4724-4727	CVS	
1-647	4728-4735	FogBugz	
1-648	4736-4745	Gemnasium	
1-649	4746-4752	GitHub	
1-650	4753-4763	GitLab.com	
1-651	4764-4769	Gitea	
1-652	4770-4774	Jira	
1-653	4775-4783	Perforce	
1-654	4784-4789	Helix	
1-655	4790-4801	Phabricator	
1-656	4802-4806	Repo	
1-657	4807-4809	by	
1-658	4810-4818	manifest	
1-659	4819-4823	file	
1-660	4824-4828	Repo	
1-661	4829-4831	by	
1-662	4832-4835	URL	
1-663	4836-4839	SVN	
1-664	4840-4844	TFVC	
1-665	4845-4849	Push	
1-666	4850-4857	options	
1-667	4858-4866	Releases	
1-668	4867-4879	Repositories	
1-669	4880-4888	Branches	
1-670	4889-4896	Default	
1-671	4897-4903	branch	
1-672	4904-4907	Git	
1-673	4908-4918	attributes	
1-674	4919-4922	Git	
1-675	4923-4926	LFS	
1-676	4927-4933	Locked	
1-677	4934-4939	files	
1-678	4940-4944	File	
1-679	4945-4950	Blame	
1-680	4951-4955	File	
1-681	4956-4963	History	
1-682	4964-4973	Mirroring	
1-683	4974-4983	Protected	
1-684	4984-4992	branches	
1-685	4993-5002	Protected	
1-686	5003-5007	tags	
1-687	5008-5012	Push	
1-688	5013-5018	rules	
1-689	5019-5025	Reduce	
1-690	5026-5036	repository	
1-691	5037-5041	size	
1-692	5042-5048	Signed	
1-693	5049-5056	Commits	
1-694	5057-5063	Syntax	
1-695	5064-5076	highlighting	
1-696	5077-5080	Web	
1-697	5081-5087	Editor	
1-698	5088-5091	Web	
1-699	5092-5095	IDE	
1-700	5096-5108	Requirements	
1-701	5109-5117	Settings	
1-702	5118-5125	Project	
1-703	5126-5132	Import	
1-704	5132-5133	/	
1-705	5133-5139	Export	
1-706	5140-5147	Project	
1-707	5147-5148	/	
1-708	5148-5153	Group	
1-709	5154-5160	Import	
1-710	5160-5161	/	
1-711	5161-5167	Export	
1-712	5168-5172	rate	
1-713	5173-5179	limits	
1-714	5180-5187	Project	
1-715	5188-5194	access	
1-716	5195-5201	tokens	
1-717	5202-5207	Share	
1-718	5208-5216	projects	
1-719	5217-5225	Snippets	
1-720	5226-5232	Static	
1-721	5233-5237	Site	
1-722	5238-5244	Editor	
1-723	5245-5250	Wikis	
1-724	5251-5257	Groups	
1-725	5258-5262	Bulk	
1-726	5263-5270	editing	
1-727	5271-5272	(	
1-728	5272-5277	group	
1-729	5277-5278	)	
1-730	5279-5291	Contribution	
1-731	5292-5301	analytics	
1-732	5302-5308	Custom	
1-733	5309-5320	group-level	
1-734	5321-5328	project	
1-735	5329-5338	templates	
1-736	5339-5344	Epics	
1-737	5345-5349	Epic	
1-738	5350-5356	boards	
1-739	5357-5363	Manage	
1-740	5364-5369	epics	
1-741	5370-5375	Group	
1-742	5376-5382	Import	
1-743	5382-5383	/	
1-744	5383-5389	Export	
1-745	5390-5398	Insights	
1-746	5399-5404	Issue	
1-747	5405-5414	analytics	
1-748	5415-5425	Iterations	
1-749	5426-5435	Migrating	
1-750	5436-5442	groups	
1-751	5443-5449	Public	
1-752	5450-5456	access	
1-753	5457-5465	Roadmaps	
1-754	5466-5478	Repositories	
1-755	5479-5488	Analytics	
1-756	5489-5493	SAML	
1-757	5494-5497	SSO	
1-758	5498-5501	for	
1-759	5502-5512	GitLab.com	
1-760	5513-5519	groups	
1-761	5520-5525	Group	
1-762	5526-5533	Managed	
1-763	5534-5542	Accounts	
1-764	5543-5544	(	
1-765	5544-5550	Closed	
1-766	5551-5555	Beta	
1-767	5555-5556	)	
1-768	5557-5561	SCIM	
1-769	5562-5574	provisioning	
1-770	5575-5590	Troubleshooting	
1-771	5591-5596	Group	
1-772	5597-5601	SAML	
1-773	5602-5605	and	
1-774	5606-5610	SCIM	
1-775	5611-5620	Subgroups	
1-776	5621-5625	User	
1-777	5626-5631	Abuse	
1-778	5632-5639	reports	
1-779	5640-5647	Account	
1-780	5648-5654	Active	
1-781	5655-5663	sessions	
1-782	5664-5670	Delete	
1-783	5671-5678	account	
1-784	5679-5690	Permissions	
1-785	5691-5699	Personal	
1-786	5700-5706	access	
1-787	5707-5713	tokens	
1-788	5714-5721	Profile	
1-789	5722-5733	preferences	
1-790	5734-5744	Two-factor	
1-791	5745-5759	authentication	
1-792	5760-5771	Discussions	
1-793	5772-5775	Git	
1-794	5776-5783	Partial	
1-795	5784-5789	clone	
1-796	5790-5805	Troubleshooting	
1-797	5806-5809	Git	
1-798	5810-5816	Useful	
1-799	5817-5825	commands	
1-800	5826-5836	GitLab.com	
1-801	5837-5845	settings	
1-802	5846-5854	Keyboard	
1-803	5855-5864	shortcuts	
1-804	5865-5873	Markdown	
1-805	5874-5882	AsciiDoc	
1-806	5883-5895	Notification	
1-807	5896-5902	emails	
1-808	5903-5908	Quick	
1-809	5909-5916	actions	
1-810	5917-5929	Autocomplete	
1-811	5930-5940	characters	
1-812	5941-5949	Reserved	
1-813	5950-5957	project	
1-814	5958-5961	and	
1-815	5962-5967	group	
1-816	5968-5973	names	
1-817	5974-5980	Search	
1-818	5981-5989	Advanced	
1-819	5990-5996	Search	
1-820	5997-6000	SSH	
1-821	6001-6005	Time	
1-822	6006-6014	tracking	
1-823	6015-6020	To-Do	
1-824	6021-6026	lists	
1-825	6027-6033	Issues	
1-826	6034-6039	Award	
1-827	6040-6045	emoji	
1-828	6046-6058	Confidential	
1-829	6059-6065	issues	
1-830	6066-6078	Crosslinking	
1-831	6079-6085	issues	
1-832	6086-6089	CSV	
1-833	6090-6096	export	
1-834	6097-6100	CSV	
1-835	6101-6107	import	
1-836	6108-6114	Design	
1-837	6115-6125	management	
1-838	6126-6129	Due	
1-839	6130-6135	dates	
1-840	6136-6141	Issue	
1-841	6142-6148	Boards	
1-842	6149-6154	Issue	
1-843	6155-6159	data	
1-844	6160-6163	and	
1-845	6164-6171	actions	
1-846	6172-6178	Labels	
1-847	6179-6187	Managing	
1-848	6188-6194	issues	
1-849	6195-6205	Milestones	
1-850	6206-6214	Burndown	
1-851	6215-6218	and	
1-852	6219-6225	burnup	
1-853	6226-6232	charts	
1-854	6233-6241	Multiple	
1-855	6242-6251	assignees	
1-856	6252-6258	Linked	
1-857	6259-6265	issues	
1-858	6266-6273	Service	
1-859	6274-6278	Desk	
1-860	6279-6286	Sorting	
1-861	6287-6290	and	
1-862	6291-6299	ordering	
1-863	6300-6305	issue	
1-864	6306-6311	lists	
1-865	6312-6318	Weight	
1-866	6319-6323	Zoom	
1-867	6324-6332	meetings	
1-868	6333-6335	in	
1-869	6336-6342	issues	
1-870	6343-6348	Merge	
1-871	6349-6357	requests	
1-872	6358-6363	Allow	
1-873	6364-6377	collaboration	
1-874	6378-6387	Approvals	
1-875	6388-6396	Creating	
1-876	6397-6402	merge	
1-877	6403-6411	requests	
1-878	6412-6418	Cherry	
1-879	6419-6423	pick	
1-880	6424-6431	changes	
1-881	6432-6438	Drafts	
1-882	6439-6445	Export	
1-883	6446-6451	Merge	
1-884	6452-6460	Requests	
1-885	6461-6463	to	
1-886	6464-6467	CSV	
1-887	6468-6475	Getting	
1-888	6476-6483	started	
1-889	6484-6489	Merge	
1-890	6490-6497	request	
1-891	6498-6510	dependencies	
1-892	6511-6515	Fast	
1-893	6516-6523	forward	
1-894	6524-6529	Merge	
1-895	6530-6534	when	
1-896	6535-6543	pipeline	
1-897	6544-6552	succeeds	
1-898	6553-6560	Resolve	
1-899	6561-6570	conflicts	
1-900	6571-6580	Reverting	
1-901	6581-6588	changes	
1-902	6589-6598	Reviewing	
1-903	6599-6602	and	
1-904	6603-6611	managing	
1-905	6612-6617	merge	
1-906	6618-6626	requests	
1-907	6627-6633	Squash	
1-908	6634-6637	and	
1-909	6638-6643	merge	
1-910	6644-6652	Versions	
1-911	6653-6662	Workflows	
1-912	6663-6668	Draft	
1-913	6669-6674	merge	
1-914	6675-6683	requests	
1-915	6684-6694	Operations	
1-916	6695-6702	Metrics	
1-917	6703-6712	dashboard	
1-918	6713-6716	Set	
1-919	6717-6719	up	
1-920	6720-6726	alerts	
1-921	6727-6730	for	
1-922	6731-6738	metrics	
1-923	6739-6748	Embedding	
1-924	6749-6756	metrics	
1-925	6757-6759	in	
1-926	6760-6768	Markdown	
1-927	6769-6778	Embedding	
1-928	6779-6786	metrics	
1-929	6787-6789	in	
1-930	6790-6797	Grafana	
1-931	6798-6804	Custom	
1-932	6805-6815	dashboards	
1-933	6816-6830	GitLab-defined	
1-934	6831-6838	metrics	
1-935	6839-6849	dashboards	
1-936	6850-6859	Dashboard	
1-937	6860-6864	YAML	
1-938	6865-6875	properties	
1-939	6876-6885	Dashboard	
1-940	6886-6894	settings	
1-941	6895-6900	Panel	
1-942	6901-6906	types	
1-943	6907-6910	for	
1-944	6911-6921	dashboards	
1-945	6922-6927	Using	
1-946	6928-6937	variables	
1-947	6938-6947	Templates	
1-948	6948-6951	for	
1-949	6952-6958	custom	
1-950	6959-6969	dashboards	
1-951	6970-6980	Templating	
1-952	6981-6990	variables	
1-953	6991-6994	for	
1-954	6995-7005	dashboards	
1-955	7006-7013	Metrics	
1-956	7014-7021	library	
1-957	7022-7032	Monitoring	
1-958	7033-7036	AWS	
1-959	7037-7046	resources	
1-960	7047-7054	HAProxy	
1-961	7055-7065	Kubernetes	
1-962	7066-7071	NGINX	
1-963	7072-7077	NGINX	
1-964	7078-7085	Ingress	
1-965	7086-7091	NGINX	
1-966	7092-7099	Ingress	
1-967	7100-7103	VTS	
1-968	7104-7109	Error	
1-969	7110-7118	Tracking	
1-970	7119-7126	Tracing	
1-971	7127-7135	Incident	
1-972	7136-7146	management	
1-973	7147-7153	Alerts	
1-974	7154-7160	Paging	
1-975	7161-7164	and	
1-976	7165-7178	notifications	
1-977	7179-7188	Incidents	
1-978	7189-7201	Integrations	
1-979	7202-7208	Status	
1-980	7209-7213	page	
1-981	7214-7221	On-call	
1-982	7222-7231	schedules	
1-983	7232-7239	Feature	
1-984	7240-7245	Flags	
1-985	7246-7253	Product	
1-986	7254-7263	analytics	
1-987	7264-7266	CI	
1-988	7266-7267	/	
1-989	7267-7269	CD	
1-990	7270-7273	Get	
1-991	7274-7281	started	
1-992	7282-7284	CI	
1-993	7284-7285	/	
1-994	7285-7287	CD	
1-995	7288-7296	concepts	
1-996	7297-7304	Migrate	
1-997	7305-7309	from	
1-998	7310-7318	CircleCI	
1-999	7319-7326	Migrate	
1-1000	7327-7331	from	
1-1001	7332-7339	Jenkins	
1-1002	7340-7346	Enable	
1-1003	7347-7349	or	
1-1004	7350-7357	disable	
1-1005	7358-7360	CI	
1-1006	7360-7361	/	
1-1007	7361-7363	CD	
1-1008	7364-7373	Pipelines	
1-1009	7374-7382	Schedule	
1-1010	7383-7384	a	
1-1011	7385-7393	pipeline	
1-1012	7394-7401	Trigger	
1-1013	7402-7403	a	
1-1014	7404-7412	pipeline	
1-1015	7413-7421	Pipeline	
1-1016	7422-7430	settings	
1-1017	7431-7439	Pipeline	
1-1018	7440-7453	architectures	
1-1019	7454-7462	Pipeline	
1-1020	7463-7473	efficiency	
1-1021	7474-7482	Directed	
1-1022	7483-7490	acyclic	
1-1023	7491-7496	graph	
1-1024	7497-7498	(	
1-1025	7498-7501	DAG	
1-1026	7501-7502	)	
1-1027	7503-7516	Multi-project	
1-1028	7517-7526	pipelines	
1-1029	7527-7539	Parent-child	
1-1030	7540-7549	pipelines	
1-1031	7550-7559	Pipelines	
1-1032	7560-7563	for	
1-1033	7564-7569	merge	
1-1034	7570-7578	requests	
1-1035	7579-7588	Pipelines	
1-1036	7589-7592	for	
1-1037	7593-7599	merged	
1-1038	7600-7607	results	
1-1039	7608-7613	Merge	
1-1040	7614-7620	trains	
1-1041	7621-7625	Jobs	
1-1042	7626-7632	Access	
1-1043	7633-7634	a	
1-1044	7635-7643	terminal	
1-1045	7644-7647	for	
1-1046	7648-7649	a	
1-1047	7650-7657	running	
1-1048	7658-7661	job	
1-1049	7662-7668	Format	
1-1050	7669-7676	scripts	
1-1051	7677-7680	and	
1-1052	7681-7684	job	
1-1053	7685-7689	logs	
1-1054	7690-7693	Git	
1-1055	7694-7704	submodules	
1-1056	7705-7714	Variables	
1-1057	7715-7725	Predefined	
1-1058	7726-7735	variables	
1-1059	7736-7741	Where	
1-1060	7742-7751	variables	
1-1061	7752-7755	can	
1-1062	7756-7758	be	
1-1063	7759-7763	used	
1-1064	7764-7776	Environments	
1-1065	7777-7780	and	
1-1066	7781-7792	deployments	
1-1067	7793-7805	Environments	
1-1068	7806-7815	Dashboard	
1-1069	7816-7825	Protected	
1-1070	7826-7838	environments	
1-1071	7839-7849	Deployment	
1-1072	7850-7856	safety	
1-1073	7857-7861	Roll	
1-1074	7862-7865	out	
1-1075	7866-7868	an	
1-1076	7869-7880	application	
1-1077	7881-7894	incrementally	
1-1078	7895-7901	Deploy	
1-1079	7902-7904	to	
1-1080	7905-7908	AWS	
1-1081	7909-7915	Review	
1-1082	7916-7920	Apps	
1-1083	7921-7928	Runners	
1-1084	7929-7933	Best	
1-1085	7934-7943	practices	
1-1086	7944-7947	for	
1-1087	7948-7953	large	
1-1088	7954-7966	repositories	
1-1089	7967-7972	Cache	
1-1090	7973-7976	and	
1-1091	7977-7986	artifacts	
1-1092	7987-7990	Job	
1-1093	7991-8000	artifacts	
1-1094	8001-8009	Pipeline	
1-1095	8010-8019	artifacts	
1-1096	8020-8021	.	
1-1097	8021-8034	gitlab-ci.yml	
1-1098	8035-8036	.	
1-1099	8036-8049	gitlab-ci.yml	
1-1100	8050-8059	reference	
1-1101	8060-8068	Validate	
1-1102	8069-8075	syntax	
1-1103	8076-8084	Pipeline	
1-1104	8085-8091	Editor	
1-1105	8092-8099	Include	
1-1106	8100-8108	examples	
1-1107	8109-8115	Docker	
1-1108	8116-8119	Run	
1-1109	8120-8122	CI	
1-1110	8122-8123	/	
1-1111	8123-8125	CD	
1-1112	8126-8130	jobs	
1-1113	8131-8133	in	
1-1114	8134-8140	Docker	
1-1115	8141-8151	containers	
1-1116	8152-8155	Use	
1-1117	8156-8162	Docker	
1-1118	8163-8165	to	
1-1119	8166-8171	build	
1-1120	8172-8178	Docker	
1-1121	8179-8185	images	
1-1122	8186-8189	Use	
1-1123	8190-8196	kaniko	
1-1124	8197-8199	to	
1-1125	8200-8205	build	
1-1126	8206-8212	Docker	
1-1127	8213-8219	images	
1-1128	8220-8228	Services	
1-1129	8229-8234	MySQL	
1-1130	8235-8242	Service	
1-1131	8243-8253	PostgreSQL	
1-1132	8254-8261	Service	
1-1133	8262-8267	Redis	
1-1134	8268-8275	Service	
1-1135	8276-8280	Auto	
1-1136	8281-8287	DevOps	
1-1137	8288-8291	Get	
1-1138	8292-8299	started	
1-1139	8300-8312	Requirements	
1-1140	8313-8319	Stages	
1-1141	8320-8329	Customize	
1-1142	8330-8337	Upgrade	
1-1143	8338-8348	PostgreSQL	
1-1144	8349-8356	Upgrade	
1-1145	8357-8361	Auto	
1-1146	8362-8368	Deploy	
1-1147	8369-8381	dependencies	
1-1148	8382-8397	Troubleshooting	
1-1149	8398-8405	Testing	
1-1150	8406-8419	Accessibility	
1-1151	8420-8427	testing	
1-1152	8428-8435	Browser	
1-1153	8436-8447	performance	
1-1154	8448-8455	testing	
1-1155	8456-8460	Code	
1-1156	8461-8468	quality	
1-1157	8469-8473	Load	
1-1158	8474-8485	performance	
1-1159	8486-8493	testing	
1-1160	8494-8501	Metrics	
1-1161	8502-8509	reports	
1-1162	8510-8514	Test	
1-1163	8515-8520	cases	
1-1164	8521-8529	External	
1-1165	8530-8542	integrations	
1-1166	8543-8546	SSH	
1-1167	8547-8551	keys	
1-1168	8552-8561	Bitbucket	
1-1169	8562-8567	Cloud	
1-1170	8568-8574	GitHub	
1-1171	8575-8580	Slack	
1-1172	8581-8583	CI	
1-1173	8583-8584	/	
1-1174	8584-8586	CD	
1-1175	8587-8595	examples	
1-1176	8596-8606	Deployment	
1-1177	8607-8611	with	
1-1178	8612-8615	Dpl	
1-1179	8616-8626	End-to-end	
1-1180	8627-8634	testing	
1-1181	8635-8638	NPM	
1-1182	8639-8643	with	
1-1183	8644-8660	semantic-release	
1-1184	8661-8664	PHP	
1-1185	8665-8669	with	
1-1186	8670-8677	PHPunit	
1-1187	8678-8681	and	
1-1188	8682-8687	atoum	
1-1189	8688-8691	PHP	
1-1190	8692-8696	with	
1-1191	8697-8700	NPM	
1-1192	8701-8704	and	
1-1193	8705-8708	SCP	
1-1194	8709-8712	PHP	
1-1195	8713-8717	with	
1-1196	8718-8725	Laravel	
1-1197	8726-8729	and	
1-1198	8730-8735	Envoy	
1-1199	8736-8751	Troubleshooting	
1-1200	8752-8754	CI	
1-1201	8754-8755	/	
1-1202	8755-8757	CD	
1-1203	8758-8769	Application	
1-1204	8770-8778	security	
1-1205	8779-8787	Security	
1-1206	8788-8801	Configuration	
1-1207	8802-8811	Container	
1-1208	8812-8820	Scanning	
1-1209	8821-8827	Threat	
1-1210	8828-8838	Monitoring	
1-1211	8839-8849	Dependency	
1-1212	8850-8858	Scanning	
1-1213	8859-8869	Dependency	
1-1214	8870-8878	Scanning	
1-1215	8879-8888	Analyzers	
1-1216	8889-8899	Dependency	
1-1217	8900-8904	List	
1-1218	8905-8911	Static	
1-1219	8912-8923	Application	
1-1220	8924-8932	Security	
1-1221	8933-8940	Testing	
1-1222	8941-8945	SAST	
1-1223	8946-8955	Analyzers	
1-1224	8956-8962	Secret	
1-1225	8963-8972	Detection	
1-1226	8973-8980	Dynamic	
1-1227	8981-8992	Application	
1-1228	8993-9001	Security	
1-1229	9002-9009	Testing	
1-1230	9010-9011	(	
1-1231	9011-9015	DAST	
1-1232	9015-9016	)	
1-1233	9017-9021	DAST	
1-1234	9022-9037	Troubleshooting	
1-1235	9038-9041	API	
1-1236	9042-9049	Fuzzing	
1-1237	9050-9058	Coverage	
1-1238	9059-9066	Fuzzing	
1-1239	9067-9075	Security	
1-1240	9076-9085	Dashboard	
1-1241	9086-9093	Offline	
1-1242	9094-9106	Environments	
1-1243	9107-9120	Vulnerability	
1-1244	9121-9128	Reports	
1-1245	9129-9142	Vulnerability	
1-1246	9143-9148	Pages	
1-1247	9149-9153	Scan	
1-1248	9154-9162	Policies	
1-1249	9163-9171	Security	
1-1250	9172-9179	scanner	
1-1251	9180-9191	integration	
1-1252	9192-9198	Secure	
1-1253	9199-9202	and	
1-1254	9203-9210	Protect	
1-1255	9211-9222	Terminology	
1-1256	9223-9231	Packages	
1-1257	9232-9233	&	
1-1258	9234-9244	Registries	
1-1259	9245-9252	Package	
1-1260	9253-9261	Registry	
1-1261	9262-9270	Composer	
1-1262	9271-9276	Conan	
1-1263	9277-9279	Go	
1-1264	9280-9285	Proxy	
1-1265	9286-9291	Maven	
1-1266	9292-9295	npm	
1-1267	9296-9301	NuGet	
1-1268	9302-9306	PyPI	
1-1269	9307-9311	Ruby	
1-1270	9312-9316	gems	
1-1271	9317-9324	Generic	
1-1272	9325-9330	Store	
1-1273	9331-9334	all	
1-1274	9335-9343	packages	
1-1275	9344-9346	in	
1-1276	9347-9350	one	
1-1277	9351-9358	project	
1-1278	9359-9368	Container	
1-1279	9369-9377	Registry	
1-1280	9378-9388	Dependency	
1-1281	9389-9394	Proxy	
1-1282	9395-9409	Infrastructure	
1-1283	9410-9416	Adding	
1-1284	9417-9420	and	
1-1285	9421-9429	removing	
1-1286	9430-9438	clusters	
1-1287	9439-9442	Add	
1-1288	9443-9446	EKS	
1-1289	9447-9455	clusters	
1-1290	9456-9459	Add	
1-1291	9460-9463	GKE	
1-1292	9464-9472	clusters	
1-1293	9473-9484	Group-level	
1-1294	9485-9493	clusters	
1-1295	9494-9508	Instance-level	
1-1296	9509-9517	clusters	
1-1297	9518-9524	Canary	
1-1298	9525-9536	deployments	
1-1299	9537-9544	Cluster	
1-1300	9545-9557	environments	
1-1301	9558-9565	Cluster	
1-1302	9566-9570	cost	
1-1303	9571-9581	management	
1-1304	9582-9588	Deploy	
1-1305	9589-9595	boards	
1-1306	9596-9602	GitLab	
1-1307	9603-9610	Managed	
1-1308	9611-9615	Apps	
1-1309	9616-9627	Configuring	
1-1310	9628-9638	Crossplane	
1-1311	9639-9653	Infrastructure	
1-1312	9654-9656	as	
1-1313	9657-9661	code	
1-1314	9662-9668	GitLab	
1-1315	9669-9676	managed	
1-1316	9677-9686	Terraform	
1-1317	9687-9692	state	
1-1318	9693-9702	Terraform	
1-1319	9703-9714	integration	
1-1320	9715-9717	in	
1-1321	9718-9723	merge	
1-1322	9724-9732	requests	
1-1323	9733-9743	Kubernetes	
1-1324	9744-9749	Agent	
1-1325	9750-9755	Agent	
1-1326	9756-9769	configuration	
1-1327	9770-9780	repository	
1-1328	9781-9791	Management	
1-1329	9792-9799	project	
1-1330	9800-9803	Pod	
1-1331	9804-9808	logs	
1-1332	9809-9817	Runbooks	
1-1333	9818-9828	Serverless	
1-1334	9829-9838	Deploying	
1-1335	9839-9842	AWS	
1-1336	9843-9849	Lambda	
1-1337	9850-9859	functions	
1-1338	9860-9868	Securing	
1-1339	9869-9873	your	
1-1340	9874-9882	deployed	
1-1341	9883-9895	applications	
1-1342	9896-9899	Web	
1-1343	9900-9911	Application	
1-1344	9912-9920	Firewall	
1-1345	9921-9930	Container	
1-1346	9931-9938	Network	
1-1347	9939-9947	Security	
1-1348	9948-9957	Container	
1-1349	9958-9962	Host	
1-1350	9963-9971	Security	
1-1351	9972-9984	Integrations	
1-1352	9985-9992	Akismet	
1-1353	9993-10006	Elasticsearch	
1-1354	10007-10013	Gitpod	
1-1355	10014-10018	Jira	
1-1356	10019-10031	integrations	
1-1357	10032-10036	Jira	
1-1358	10037-10043	GitLab	
1-1359	10044-10047	for	
1-1360	10048-10052	Jira	
1-1361	10053-10056	app	
1-1362	10057-10061	Jira	
1-1363	10062-10066	DVCS	
1-1364	10067-10076	connector	
1-1365	10077-10081	Jira	
1-1366	10082-10093	Development	
1-1367	10094-10099	Panel	
1-1368	10100-10106	Create	
1-1369	10107-10111	Jira	
1-1370	10112-10118	Server	
1-1371	10119-10123	user	
1-1372	10124-10130	Create	
1-1373	10131-10135	Jira	
1-1374	10136-10141	Cloud	
1-1375	10142-10145	API	
1-1376	10146-10151	token	
1-1377	10152-10157	Kroki	
1-1378	10158-10166	diagrams	
1-1379	10167-10175	PlantUML	
1-1380	10176-10183	Project	
1-1381	10184-10195	integration	
1-1382	10196-10206	management	
1-1383	10207-10214	Project	
1-1384	10215-10227	integrations	
1-1385	10228-10236	Overview	
1-1386	10237-10242	Asana	
1-1387	10243-10249	Bamboo	
1-1388	10250-10252	CI	
1-1389	10253-10260	Discord	
1-1390	10261-10267	Emails	
1-1391	10268-10270	on	
1-1392	10271-10275	push	
1-1393	10276-10282	GitHub	
1-1394	10283-10291	Hangouts	
1-1395	10292-10296	Chat	
1-1396	10297-10302	Irker	
1-1397	10303-10310	Jenkins	
1-1398	10311-10321	Mattermost	
1-1399	10322-10335	notifications	
1-1400	10336-10346	Mattermost	
1-1401	10347-10352	slash	
1-1402	10353-10361	commands	
1-1403	10362-10371	Microsoft	
1-1404	10372-10377	Teams	
1-1405	10378-10382	Mock	
1-1406	10383-10385	CI	
1-1407	10386-10396	Prometheus	
1-1408	10397-10404	Service	
1-1409	10405-10414	templates	
1-1410	10415-10420	Slack	
1-1411	10421-10434	notifications	
1-1412	10435-10440	Slack	
1-1413	10441-10446	slash	
1-1414	10447-10455	commands	
1-1415	10456-10461	Slack	
1-1416	10462-10473	application	
1-1417	10474-10479	Unify	
1-1418	10480-10487	Circuit	
1-1419	10488-10493	Webex	
1-1420	10494-10499	Teams	
1-1421	10500-10508	Webhooks	
1-1422	10509-10517	External	
1-1423	10518-10523	issue	
1-1424	10524-10531	tracker	
1-1425	10532-10540	Bugzilla	
1-1426	10541-10547	Custom	
1-1427	10548-10553	issue	
1-1428	10554-10561	tracker	
1-1429	10562-10565	IBM	
1-1430	10566-10577	Engineering	
1-1431	10578-10586	Workflow	
1-1432	10587-10597	Management	
1-1433	10598-10605	Redmine	
1-1434	10606-10614	YouTrack	
1-1435	10615-10620	Gmail	
1-1436	10621-10628	actions	
1-1437	10629-10636	buttons	
1-1438	10637-10646	reCAPTCHA	
1-1439	10647-10655	Security	
1-1440	10656-10664	partners	
1-1441	10665-10676	Sourcegraph	
1-1442	10677-10683	Trello	
1-1443	10684-10687	API	
1-1444	10688-10697	Resources	
1-1445	10698-10699	.	
1-1446	10699-10708	gitignore	
1-1447	10709-10710	(	
1-1448	10710-10719	templates	
1-1449	10719-10720	)	
1-1450	10721-10722	.	
1-1451	10722-10735	gitlab-ci.yml	
1-1452	10736-10737	(	
1-1453	10737-10746	templates	
1-1454	10746-10747	)	
1-1455	10748-10754	Access	
1-1456	10755-10763	requests	
1-1457	10764-10774	Appearance	
1-1458	10775-10776	(	
1-1459	10776-10787	application	
1-1460	10787-10788	)	
1-1461	10789-10801	Applications	
1-1462	10802-10807	Audit	
1-1463	10808-10814	events	
1-1464	10815-10821	Avatar	
1-1465	10822-10827	Award	
1-1466	10828-10833	emoji	
1-1467	10834-10840	Badges	
1-1468	10841-10842	(	
1-1469	10842-10849	project	
1-1470	10849-10850	)	
1-1471	10851-10857	Badges	
1-1472	10858-10859	(	
1-1473	10859-10864	group	
1-1474	10864-10865	)	
1-1475	10866-10874	Branches	
1-1476	10875-10884	Broadcast	
1-1477	10885-10893	messages	
1-1478	10894-10902	Clusters	
1-1479	10903-10904	(	
1-1480	10904-10911	project	
1-1481	10911-10912	)	
1-1482	10913-10921	Clusters	
1-1483	10922-10923	(	
1-1484	10923-10928	group	
1-1485	10928-10929	)	
1-1486	10930-10938	Clusters	
1-1487	10939-10940	(	
1-1488	10940-10948	instance	
1-1489	10948-10949	)	
1-1490	10950-10957	Commits	
1-1491	10958-10966	Composer	
1-1492	10967-10972	Conan	
1-1493	10973-10982	Container	
1-1494	10983-10991	Registry	
1-1495	10992-10998	Custom	
1-1496	10999-11009	attributes	
1-1497	11010-11019	Dashboard	
1-1498	11020-11031	annotations	
1-1499	11032-11044	Dependencies	
1-1500	11045-11055	Dependency	
1-1501	11056-11061	Proxy	
1-1502	11062-11068	Deploy	
1-1503	11069-11073	keys	
1-1504	11074-11080	Deploy	
1-1505	11081-11087	tokens	
1-1506	11088-11099	Deployments	
1-1507	11100-11111	Discussions	
1-1508	11112-11122	Dockerfile	
1-1509	11123-11124	(	
1-1510	11124-11133	templates	
1-1511	11133-11134	)	
1-1512	11135-11140	DORA4	
1-1513	11141-11148	metrics	
1-1514	11149-11154	DORA4	
1-1515	11155-11162	project	
1-1516	11163-11172	analytics	
1-1517	11173-11178	DORA4	
1-1518	11179-11184	group	
1-1519	11185-11194	analytics	
1-1520	11195-11207	Environments	
1-1521	11208-11213	Epics	
1-1522	11214-11219	Error	
1-1523	11220-11228	tracking	
1-1524	11229-11235	Events	
1-1525	11236-11247	Experiments	
1-1526	11248-11256	Features	
1-1527	11257-11262	flags	
1-1528	11263-11270	Feature	
1-1529	11271-11275	flag	
1-1530	11276-11280	user	
1-1531	11281-11286	lists	
1-1532	11287-11293	Freeze	
1-1533	11294-11301	periods	
1-1534	11302-11305	Geo	
1-1535	11306-11311	nodes	
1-1536	11312-11318	GitLab	
1-1537	11319-11324	Pages	
1-1538	11325-11330	Group	
1-1539	11331-11339	activity	
1-1540	11340-11349	analytics	
1-1541	11350-11355	Group	
1-1542	11356-11362	Import	
1-1543	11362-11363	/	
1-1544	11363-11369	Export	
1-1545	11370-11375	Group	
1-1546	11376-11386	repository	
1-1547	11387-11394	storage	
1-1548	11395-11400	moves	
1-1549	11401-11406	Group	
1-1550	11407-11412	wikis	
1-1551	11413-11419	Groups	
1-1552	11420-11426	Import	
1-1553	11427-11441	Instance-level	
1-1554	11442-11444	CI	
1-1555	11444-11445	/	
1-1556	11445-11447	CD	
1-1557	11448-11457	variables	
1-1558	11458-11469	Invitations	
1-1559	11470-11475	Issue	
1-1560	11476-11482	boards	
1-1561	11483-11484	(	
1-1562	11484-11491	project	
1-1563	11491-11492	)	
1-1564	11493-11498	Issue	
1-1565	11499-11505	boards	
1-1566	11506-11507	(	
1-1567	11507-11512	group	
1-1568	11512-11513	)	
1-1569	11514-11520	Issues	
1-1570	11521-11527	Issues	
1-1571	11528-11529	(	
1-1572	11529-11533	epic	
1-1573	11533-11534	)	
1-1574	11535-11541	Issues	
1-1575	11542-11552	statistics	
1-1576	11553-11563	Iterations	
1-1577	11564-11565	(	
1-1578	11565-11572	project	
1-1579	11572-11573	)	
1-1580	11574-11584	Iterations	
1-1581	11585-11586	(	
1-1582	11586-11591	group	
1-1583	11591-11592	)	
1-1584	11593-11597	Jobs	
1-1585	11598-11601	Job	
1-1586	11602-11611	artifacts	
1-1587	11612-11616	Keys	
1-1588	11617-11623	Labels	
1-1589	11624-11625	(	
1-1590	11625-11632	project	
1-1591	11632-11633	)	
1-1592	11634-11640	Labels	
1-1593	11641-11642	(	
1-1594	11642-11647	group	
1-1595	11647-11648	)	
1-1596	11649-11656	License	
1-1597	11657-11665	Licenses	
1-1598	11666-11667	(	
1-1599	11667-11676	templates	
1-1600	11676-11677	)	
1-1601	11678-11683	Links	
1-1602	11684-11685	(	
1-1603	11685-11690	issue	
1-1604	11690-11691	)	
1-1605	11692-11697	Links	
1-1606	11698-11699	(	
1-1607	11699-11703	epic	
1-1608	11703-11704	)	
1-1609	11705-11712	Managed	
1-1610	11713-11721	licenses	
1-1611	11722-11730	Markdown	
1-1612	11731-11736	Maven	
1-1613	11737-11744	Members	
1-1614	11745-11750	Merge	
1-1615	11751-11758	request	
1-1616	11759-11768	approvals	
1-1617	11769-11774	Merge	
1-1618	11775-11782	request	
1-1619	11783-11790	context	
1-1620	11791-11798	commits	
1-1621	11799-11804	Merge	
1-1622	11805-11813	requests	
1-1623	11814-11819	Merge	
1-1624	11820-11826	trains	
1-1625	11827-11837	Milestones	
1-1626	11838-11839	(	
1-1627	11839-11846	project	
1-1628	11846-11847	)	
1-1629	11848-11858	Milestones	
1-1630	11859-11860	(	
1-1631	11860-11865	group	
1-1632	11865-11866	)	
1-1633	11867-11877	Namespaces	
1-1634	11878-11883	Notes	
1-1635	11884-11885	(	
1-1636	11885-11893	comments	
1-1637	11893-11894	)	
1-1638	11895-11907	Notification	
1-1639	11908-11916	settings	
1-1640	11917-11922	NuGet	
1-1641	11923-11931	Packages	
1-1642	11932-11937	Pages	
1-1643	11938-11945	domains	
1-1644	11946-11954	Personal	
1-1645	11955-11961	access	
1-1646	11962-11968	tokens	
1-1647	11969-11978	Pipelines	
1-1648	11979-11988	schedules	
1-1649	11989-11997	Pipeline	
1-1650	11998-12006	triggers	
1-1651	12007-12016	Pipelines	
1-1652	12017-12021	Plan	
1-1653	12022-12028	limits	
1-1654	12029-12036	Project	
1-1655	12037-12043	access	
1-1656	12044-12050	tokens	
1-1657	12051-12058	Project	
1-1658	12059-12066	aliases	
1-1659	12067-12074	Project	
1-1660	12075-12081	import	
1-1661	12081-12082	/	
1-1662	12082-12088	export	
1-1663	12089-12096	Project	
1-1664	12097-12103	remote	
1-1665	12104-12111	mirrors	
1-1666	12112-12119	Project	
1-1667	12120-12130	repository	
1-1668	12131-12138	storage	
1-1669	12139-12144	moves	
1-1670	12145-12152	Project	
1-1671	12153-12163	statistics	
1-1672	12164-12171	Project	
1-1673	12172-12181	templates	
1-1674	12182-12189	Project	
1-1675	12190-12205	vulnerabilities	
1-1676	12206-12214	Projects	
1-1677	12215-12224	Protected	
1-1678	12225-12233	branches	
1-1679	12234-12243	Protected	
1-1680	12244-12256	environments	
1-1681	12257-12266	Protected	
1-1682	12267-12271	tags	
1-1683	12272-12276	PyPI	
1-1684	12277-12285	Releases	
1-1685	12286-12293	Release	
1-1686	12294-12299	links	
1-1687	12300-12312	Repositories	
1-1688	12313-12323	Repository	
1-1689	12324-12329	files	
1-1690	12330-12340	Repository	
1-1691	12341-12351	submodules	
1-1692	12352-12360	Resource	
1-1693	12361-12370	iteration	
1-1694	12371-12377	events	
1-1695	12378-12386	Resource	
1-1696	12387-12392	label	
1-1697	12393-12399	events	
1-1698	12400-12408	Resource	
1-1699	12409-12418	milestone	
1-1700	12419-12425	events	
1-1701	12426-12434	Resource	
1-1702	12435-12440	state	
1-1703	12441-12447	events	
1-1704	12448-12456	Resource	
1-1705	12457-12463	weight	
1-1706	12464-12470	events	
1-1707	12471-12475	Ruby	
1-1708	12476-12480	gems	
1-1709	12481-12488	Runners	
1-1710	12489-12493	SCIM	
1-1711	12494-12500	Search	
1-1712	12501-12509	Services	
1-1713	12510-12518	Settings	
1-1714	12519-12520	(	
1-1715	12520-12531	application	
1-1716	12531-12532	)	
1-1717	12533-12540	Sidekiq	
1-1718	12541-12548	metrics	
1-1719	12549-12556	Sidekiq	
1-1720	12557-12563	queues	
1-1721	12564-12571	Snippet	
1-1722	12572-12582	repository	
1-1723	12583-12590	storage	
1-1724	12591-12596	moves	
1-1725	12597-12605	Snippets	
1-1726	12606-12614	Snippets	
1-1727	12615-12616	(	
1-1728	12616-12623	project	
1-1729	12623-12624	)	
1-1730	12625-12635	Statistics	
1-1731	12636-12637	(	
1-1732	12637-12648	application	
1-1733	12648-12649	)	
1-1734	12650-12661	Suggestions	
1-1735	12662-12668	System	
1-1736	12669-12674	hooks	
1-1737	12675-12679	Tags	
1-1738	12680-12685	To-Do	
1-1739	12686-12691	lists	
1-1740	12692-12697	Users	
1-1741	12698-12710	User-starred	
1-1742	12711-12718	metrics	
1-1743	12719-12729	dashboards	
1-1744	12730-12739	Variables	
1-1745	12740-12741	(	
1-1746	12741-12748	project	
1-1747	12748-12749	)	
1-1748	12750-12759	Variables	
1-1749	12760-12761	(	
1-1750	12761-12766	group	
1-1751	12766-12767	)	
1-1752	12768-12775	Version	
1-1753	12776-12782	Visual	
1-1754	12783-12789	Review	
1-1755	12790-12801	discussions	
1-1756	12802-12817	Vulnerabilities	
1-1757	12818-12831	Vulnerability	
1-1758	12832-12838	export	
1-1759	12839-12852	Vulnerability	
1-1760	12853-12861	Findings	
1-1761	12862-12867	Wikis	
1-1762	12868-12875	GraphQL	
1-1763	12876-12883	Getting	
1-1764	12884-12891	started	
1-1765	12892-12899	GraphQL	
1-1766	12900-12909	reference	
1-1767	12910-12916	Create	
1-1768	12917-12922	audit	
1-1769	12923-12929	report	
1-1770	12930-12931	(	
1-1771	12931-12938	example	
1-1772	12938-12939	)	
1-1773	12940-12948	Identify	
1-1774	12949-12954	issue	
1-1775	12955-12961	boards	
1-1776	12962-12963	(	
1-1777	12963-12970	example	
1-1778	12970-12971	)	
1-1779	12972-12979	Removed	
1-1780	12980-12985	items	
1-1781	12986-12988	v3	
1-1782	12989-12991	to	
1-1783	12992-12994	v4	
1-1784	12995-12999	Lint	
1-1785	13000-13001	.	
1-1786	13001-13014	gitlab-ci.yml	
1-1787	13015-13021	GitLab	
1-1788	13022-13024	as	
1-1789	13025-13027	an	
1-1790	13028-13034	OAuth2	
1-1791	13035-13043	provider	
1-1792	13044-13051	Omnibus	
1-1793	13052-13058	GitLab	
1-1794	13059-13071	Architecture	
1-1795	13072-13079	Omnibus	
1-1796	13080-13088	packages	
1-1797	13089-13092	and	
1-1798	13093-13099	images	
1-1799	13100-13107	Package	
1-1800	13108-13119	information	
1-1801	13120-13127	Package	
1-1802	13128-13136	defaults	
1-1803	13137-13144	Package	
1-1804	13145-13154	licensing	
1-1805	13155-13162	Package	
1-1806	13163-13173	signatures	
1-1807	13174-13186	Installation	
1-1808	13187-13196	Container	
1-1809	13197-13205	Registry	
1-1810	13206-13217	Deprecation	
1-1811	13218-13224	policy	
1-1812	13225-13235	Deprecated	
1-1813	13236-13240	OSes	
1-1814	13241-13247	Docker	
1-1815	13248-13254	images	
1-1816	13255-13261	Manual	
1-1817	13262-13274	installation	
1-1818	13275-13282	Install	
1-1819	13283-13287	JiHu	
1-1820	13288-13295	Edition	
1-1821	13296-13305	Configure	
1-1822	13306-13312	Custom	
1-1823	13313-13324	environment	
1-1824	13325-13334	variables	
1-1825	13335-13342	Backups	
1-1826	13343-13351	Database	
1-1827	13352-13358	GitLab	
1-1828	13359-13369	Mattermost	
1-1829	13370-13377	Grafana	
1-1830	13378-13382	High	
1-1831	13383-13395	availability	
1-1832	13396-13401	roles	
1-1833	13402-13406	LDAP	
1-1834	13407-13411	Logs	
1-1835	13412-13417	NGINX	
1-1836	13418-13424	Gitaly	
1-1837	13425-13432	Cluster	
1-1838	13433-13443	Prometheus	
1-1839	13444-13448	Puma	
1-1840	13449-13458	Raspberry	
1-1841	13459-13461	Pi	
1-1842	13462-13467	Redis	
1-1843	13468-13472	SMTP	
1-1844	13473-13476	SSL	
1-1845	13477-13480	DNS	
1-1846	13481-13488	Unicorn	
1-1847	13489-13494	Image	
1-1848	13495-13502	scaling	
1-1849	13503-13521	Memory-constrained	
1-1850	13522-13534	environments	
1-1851	13535-13542	Release	
1-1852	13543-13550	process	
1-1853	13551-13560	OpenShift	
1-1854	13561-13568	release	
1-1855	13569-13576	process	
1-1856	13577-13583	Update	
1-1857	13584-13591	Convert	
1-1858	13592-13594	to	
1-1859	13595-13602	Omnibus	
1-1860	13603-13610	Package	
1-1861	13611-13621	signatures	
1-1862	13622-13628	GitLab	
1-1863	13629-13631	13	
1-1864	13632-13639	changes	
1-1865	13640-13646	GitLab	
1-1866	13647-13649	12	
1-1867	13650-13657	changes	
1-1868	13658-13664	GitLab	
1-1869	13665-13667	11	
1-1870	13668-13675	changes	
1-1871	13676-13682	GitLab	
1-1872	13683-13685	10	
1-1873	13686-13693	changes	
1-1874	13694-13702	Maintain	
1-1875	13703-13715	Troubleshoot	
1-1876	13716-13722	GitLab	
1-1877	13723-13729	Runner	
1-1878	13730-13737	Install	
1-1879	13738-13744	Docker	
1-1880	13745-13752	FreeBSD	
1-1881	13753-13763	Kubernetes	
1-1882	13764-13765	(	
1-1883	13765-13769	Helm	
1-1884	13770-13775	Chart	
1-1885	13775-13776	)	
1-1886	13777-13787	Kubernetes	
1-1887	13788-13789	(	
1-1888	13789-13794	Agent	
1-1889	13794-13795	)	
1-1890	13796-13801	Linux	
1-1891	13802-13807	macOS	
1-1892	13808-13817	OpenShift	
1-1893	13818-13825	Windows	
1-1894	13826-13834	Bleeding	
1-1895	13835-13839	edge	
1-1896	13840-13848	releases	
1-1897	13849-13857	Official	
1-1898	13858-13863	Linux	
1-1899	13864-13872	packages	
1-1900	13873-13876	Old	
1-1901	13877-13883	GitLab	
1-1902	13884-13890	Runner	
1-1903	13891-13895	URLs	
1-1904	13896-13905	Configure	
1-1905	13906-13914	Advanced	
1-1906	13915-13921	config	
1-1907	13922-13931	Autoscale	
1-1908	13932-13938	config	
1-1909	13939-13948	Autoscale	
1-1910	13949-13951	on	
1-1911	13952-13955	AWS	
1-1912	13956-13959	EC2	
1-1913	13960-13969	Autoscale	
1-1914	13970-13972	on	
1-1915	13973-13976	AWS	
1-1916	13977-13984	Fargate	
1-1917	13985-13993	Commands	
1-1918	13994-14001	Feature	
1-1919	14002-14007	flags	
1-1920	14008-14017	OpenShift	
1-1921	14018-14025	Running	
1-1922	14026-14032	behind	
1-1923	14033-14034	a	
1-1924	14035-14040	proxy	
1-1925	14041-14045	Rate	
1-1926	14046-14053	limited	
1-1927	14054-14062	requests	
1-1928	14063-14074	Self-signed	
1-1929	14075-14087	certificates	
1-1930	14088-14094	System	
1-1931	14095-14103	services	
1-1932	14104-14109	Speed	
1-1933	14110-14112	up	
1-1934	14113-14116	job	
1-1935	14117-14126	execution	
1-1936	14127-14135	Register	
1-1937	14136-14144	Examples	
1-1938	14145-14154	Executors	
1-1939	14155-14161	Custom	
1-1940	14162-14169	libvirt	
1-1941	14170-14173	LXD	
1-1942	14174-14180	Docker	
1-1943	14181-14187	Docker	
1-1944	14188-14195	Machine	
1-1945	14196-14206	Kubernetes	
1-1946	14207-14212	Shell	
1-1947	14213-14216	SSH	
1-1948	14217-14226	Parallels	
1-1949	14227-14234	Virtual	
1-1950	14235-14238	Box	
1-1951	14239-14246	Monitor	
1-1952	14247-14255	Security	
1-1953	14256-14262	Shells	
1-1954	14263-14275	Troubleshoot	
1-1955	14276-14280	Best	
1-1956	14281-14290	Practices	
1-1957	14291-14297	GitLab	
1-1958	14298-14302	Helm	
1-1959	14303-14309	Charts	
1-1960	14310-14317	Install	
1-1961	14318-14326	Required	
1-1962	14327-14332	tools	
1-1963	14333-14338	Cloud	
1-1964	14339-14346	cluster	
1-1965	14347-14358	preparation	
1-1966	14359-14362	AKS	
1-1967	14363-14366	EKS	
1-1968	14367-14370	GKE	
1-1969	14371-14380	OpenShift	
1-1970	14381-14387	Deploy	
1-1971	14388-14395	Upgrade	
1-1972	14396-14402	Backup	
1-1973	14403-14406	and	
1-1974	14407-14414	Restore	
1-1975	14415-14421	Backup	
1-1976	14422-14429	Restore	
1-1977	14430-14437	Migrate	
1-1978	14438-14442	from	
1-1979	14443-14450	Omnibus	
1-1980	14451-14458	Version	
1-1981	14459-14467	mappings	
1-1982	14468-14477	Configure	
1-1983	14478-14485	Globals	
1-1984	14486-14492	GitLab	
1-1985	14493-14503	sub-charts	
1-1986	14504-14510	Gitaly	
1-1987	14511-14516	chart	
1-1988	14517-14523	GitLab	
1-1989	14524-14532	Exporter	
1-1990	14533-14538	chart	
1-1991	14539-14545	GitLab	
1-1992	14546-14553	Grafana	
1-1993	14554-14559	chart	
1-1994	14560-14566	GitLab	
1-1995	14567-14572	Pages	
1-1996	14573-14578	chart	
1-1997	14579-14585	GitLab	
1-1998	14586-14592	Runner	
1-1999	14593-14598	chart	
1-2000	14599-14605	GitLab	
1-2001	14606-14611	Shell	
1-2002	14612-14617	chart	
1-2003	14618-14621	KAS	
1-2004	14622-14627	chart	
1-2005	14628-14638	Migrations	
1-2006	14639-14644	chart	
1-2007	14645-14653	Praefect	
1-2008	14654-14659	chart	
1-2009	14660-14667	Sidekiq	
1-2010	14668-14673	chart	
1-2011	14674-14678	Task	
1-2012	14679-14685	Runner	
1-2013	14686-14691	chart	
1-2014	14692-14702	Webservice	
1-2015	14703-14708	chart	
1-2016	14709-14714	Minio	
1-2017	14715-14720	chart	
1-2018	14721-14726	Nginx	
1-2019	14727-14732	chart	
1-2020	14733-14738	Redis	
1-2021	14739-14744	chart	
1-2022	14745-14750	Redis	
1-2023	14751-14753	HA	
1-2024	14754-14759	chart	
1-2025	14760-14768	Registry	
1-2026	14769-14774	chart	
1-2027	14775-14783	Advanced	
1-2028	14784-14792	External	
1-2029	14793-14801	database	
1-2030	14802-14810	External	
1-2031	14811-14817	Gitaly	
1-2032	14818-14826	External	
1-2033	14827-14837	Mattermost	
1-2034	14838-14846	External	
1-2035	14847-14852	Nginx	
1-2036	14853-14861	External	
1-2037	14862-14868	object	
1-2038	14869-14876	storage	
1-2039	14877-14885	External	
1-2040	14886-14891	Redis	
1-2041	14892-14902	Persistent	
1-2042	14903-14910	volumes	
1-2043	14911-14923	Troubleshoot	
1-2044	14924-14934	Contribute	
1-2045	14935-14937	to	
1-2046	14938-14944	GitLab	
1-2047	14945-14948	Get	
1-2048	14949-14956	started	
1-2049	14957-14966	Changelog	
1-2050	14967-14974	entries	
1-2051	14975-14984	Community	
1-2052	14985-14990	roles	
1-2053	14991-14997	Design	
1-2054	14998-15001	and	
1-2055	15002-15004	UI	
1-2056	15005-15011	GitLab	
1-2057	15012-15023	Development	
1-2058	15024-15027	Kit	
1-2059	15028-15034	Issues	
1-2060	15035-15043	workflow	
1-2061	15044-15049	Merge	
1-2062	15050-15057	request	
1-2063	15058-15066	workflow	
1-2064	15067-15071	Code	
1-2065	15072-15078	review	
1-2066	15079-15089	guidelines	
1-2067	15090-15095	Style	
1-2068	15096-15102	guides	
1-2069	15103-15115	Architecture	
1-2070	15116-15118	CI	
1-2071	15118-15119	/	
1-2072	15119-15121	CD	
1-2073	15122-15133	development	
1-2074	15134-15136	CI	
1-2075	15136-15137	/	
1-2076	15137-15139	CD	
1-2077	15140-15148	template	
1-2078	15149-15160	development	
1-2079	15161-15165	Auto	
1-2080	15166-15172	DevOps	
1-2081	15173-15184	development	
1-2082	15185-15189	Code	
1-2083	15190-15202	intelligence	
1-2084	15203-15209	Danger	
1-2085	15210-15213	bot	
1-2086	15214-15222	Database	
1-2087	15223-15234	development	
1-2088	15235-15239	Case	
1-2089	15240-15245	study	
1-2090	15246-15247	-	
1-2091	15248-15257	filtering	
1-2092	15258-15260	by	
1-2093	15261-15266	label	
1-2094	15267-15271	Case	
1-2095	15272-15277	study	
1-2096	15278-15279	-	
1-2097	15280-15290	namespaces	
1-2098	15291-15298	storage	
1-2099	15299-15309	statistics	
1-2100	15310-15318	Database	
1-2101	15319-15325	review	
1-2102	15326-15336	guidelines	
1-2103	15337-15347	Migrations	
1-2104	15348-15353	style	
1-2105	15354-15359	guide	
1-2106	15360-15363	SQL	
1-2107	15364-15374	guidelines	
1-2108	15375-15388	Understanding	
1-2109	15389-15396	EXPLAIN	
1-2110	15397-15402	plans	
1-2111	15403-15411	Avoiding	
1-2112	15412-15420	downtime	
1-2113	15421-15423	in	
1-2114	15424-15434	migrations	
1-2115	15435-15444	Developer	
1-2116	15445-15450	guide	
1-2117	15451-15453	to	
1-2118	15454-15461	logging	
1-2119	15462-15473	Development	
1-2120	15474-15478	Rake	
1-2121	15479-15484	tasks	
1-2122	15485-15489	Mass	
1-2123	15490-15496	insert	
1-2124	15497-15502	Rails	
1-2125	15503-15509	models	
1-2126	15510-15523	Documentation	
1-2127	15524-15529	Style	
1-2128	15530-15535	guide	
1-2129	15536-15543	GraphQL	
1-2130	15544-15549	style	
1-2131	15550-15555	guide	
1-2132	15556-15563	RESTful	
1-2133	15564-15567	API	
1-2134	15568-15573	style	
1-2135	15574-15579	guide	
1-2136	15580-15585	Topic	
1-2137	15586-15591	types	
1-2138	15592-15599	Process	
1-2139	15600-15607	Testing	
1-2140	15608-15612	Site	
1-2141	15613-15625	architecture	
1-2142	15626-15632	Global	
1-2143	15633-15643	navigation	
1-2144	15644-15654	Deployment	
1-2145	15655-15662	process	
1-2146	15663-15670	Release	
1-2147	15671-15678	process	
1-2148	15679-15690	Distributed	
1-2149	15691-15698	tracing	
1-2150	15699-15710	Experiments	
1-2151	15711-15726	Experimentation	
1-2152	15727-15733	module	
1-2153	15734-15738	GLEX	
1-2154	15739-15746	Feature	
1-2155	15747-15752	flags	
1-2156	15753-15756	for	
1-2157	15757-15763	GitLab	
1-2158	15764-15775	development	
1-2159	15776-15787	Controlling	
1-2160	15788-15795	feature	
1-2161	15796-15801	flags	
1-2162	15802-15813	Documenting	
1-2163	15814-15821	feature	
1-2164	15822-15827	flags	
1-2165	15828-15837	Framework	
1-2166	15838-15839	-	
1-2167	15840-15857	DeclarativePolicy	
1-2168	15858-15866	Frontend	
1-2169	15867-15878	development	
1-2170	15879-15892	Accessibility	
1-2171	15893-15905	Architecture	
1-2172	15906-15911	Axios	
1-2173	15912-15916	Dark	
1-2174	15917-15921	mode	
1-2175	15922-15928	Design	
1-2176	15929-15937	patterns	
1-2177	15938-15949	Development	
1-2178	15950-15957	process	
1-2179	15958-15965	Droplab	
1-2180	15966-15972	Emojis	
1-2181	15973-15979	Filter	
1-2182	15980-15988	Frontend	
1-2183	15989-15992	FAQ	
1-2184	15993-16000	GraphQL	
1-2185	16001-16006	Icons	
1-2186	16007-16010	and	
1-2187	16011-16014	SVG	
1-2188	16015-16028	illustrations	
1-2189	16029-16040	InputSetter	
1-2190	16041-16052	Performance	
1-2191	16053-16063	Principles	
1-2192	16064-16072	Security	
1-2193	16073-16080	Tooling	
1-2194	16081-16085	Vuex	
1-2195	16086-16089	Vue	
1-2196	16090-16097	Widgets	
1-2197	16098-16104	GitLab	
1-2198	16105-16110	Pages	
1-2199	16111-16122	development	
1-2200	16123-16126	Geo	
1-2201	16127-16138	development	
1-2202	16139-16142	Geo	
1-2203	16143-16152	framework	
1-2204	16153-16159	Gitaly	
1-2205	16160-16171	development	
1-2206	16172-16178	GitLab	
1-2207	16179-16185	Design	
1-2208	16186-16192	System	
1-2209	16193-16199	GitLab	
1-2210	16200-16211	development	
1-2211	16212-16217	style	
1-2212	16218-16224	guides	
1-2213	16225-16228	API	
1-2214	16229-16234	style	
1-2215	16235-16240	guide	
1-2216	16241-16243	Go	
1-2217	16244-16253	standards	
1-2218	16254-16257	and	
1-2219	16258-16263	style	
1-2220	16264-16274	guidelines	
1-2221	16275-16282	GraphQL	
1-2222	16283-16286	API	
1-2223	16287-16292	style	
1-2224	16293-16298	guide	
1-2225	16299-16309	Guidelines	
1-2226	16310-16313	for	
1-2227	16314-16319	shell	
1-2228	16320-16328	commands	
1-2229	16329-16333	HTML	
1-2230	16334-16339	style	
1-2231	16340-16345	guide	
1-2232	16346-16356	JavaScript	
1-2233	16357-16362	style	
1-2234	16363-16368	guide	
1-2235	16369-16377	Newlines	
1-2236	16378-16383	style	
1-2237	16384-16389	guide	
1-2238	16390-16396	Python	
1-2239	16397-16408	development	
1-2240	16409-16419	guidelines	
1-2241	16420-16424	SCSS	
1-2242	16425-16430	style	
1-2243	16431-16436	guide	
1-2244	16437-16442	Shell	
1-2245	16443-16452	scripting	
1-2246	16453-16462	standards	
1-2247	16463-16466	and	
1-2248	16467-16472	style	
1-2249	16473-16483	guidelines	
1-2250	16484-16491	Sidekiq	
1-2251	16492-16501	debugging	
1-2252	16502-16509	Sidekiq	
1-2253	16510-16515	style	
1-2254	16516-16521	guide	
1-2255	16522-16525	Vue	
1-2256	16526-16531	style	
1-2257	16532-16537	guide	
1-2258	16538-16544	GitLab	
1-2259	16545-16550	group	
1-2260	16551-16560	migration	
1-2261	16561-16567	GitLab	
1-2262	16568-16575	project	
1-2263	16576-16585	pipelines	
1-2264	16586-16592	GitLab	
1-2265	16593-16599	Runner	
1-2266	16600-16606	Review	
1-2267	16607-16613	GitLab	
1-2268	16614-16620	Runner	
1-2269	16621-16624	Add	
1-2270	16625-16628	new	
1-2271	16629-16636	Windows	
1-2272	16637-16644	version	
1-2273	16645-16652	support	
1-2274	16653-16656	for	
1-2275	16657-16663	Docker	
1-2276	16664-16672	executor	
1-2277	16673-16680	GraphQL	
1-2278	16681-16692	development	
1-2279	16693-16700	GraphQL	
1-2280	16701-16712	BatchLoader	
1-2281	16713-16720	GraphQL	
1-2282	16721-16731	pagination	
1-2283	16732-16739	GraphQL	
1-2284	16740-16743	Pro	
1-2285	16744-16748	Helm	
1-2286	16749-16755	Charts	
1-2287	16756-16768	Architecture	
1-2288	16769-16771	of	
1-2289	16772-16777	Cloud	
1-2290	16778-16784	native	
1-2291	16785-16791	GitLab	
1-2292	16792-16796	Helm	
1-2293	16797-16803	charts	
1-2294	16804-16810	Backup	
1-2295	16811-16814	and	
1-2296	16815-16822	Restore	
1-2297	16823-16828	Goals	
1-2298	16829-16841	Architecture	
1-2299	16842-16848	Design	
1-2300	16849-16858	Decisions	
1-2301	16859-16867	Resource	
1-2302	16868-16873	Usage	
1-2303	16874-16885	Environment	
1-2304	16886-16891	setup	
1-2305	16892-16897	Style	
1-2306	16898-16903	guide	
1-2307	16904-16914	Versioning	
1-2308	16915-16918	and	
1-2309	16919-16926	release	
1-2310	16927-16933	Import	
1-2311	16933-16934	/	
1-2312	16934-16940	Export	
1-2313	16941-16954	Instrumenting	
1-2314	16955-16959	Ruby	
1-2315	16960-16964	code	
1-2316	16965-16978	Issuable-like	
1-2317	16979-16984	Rails	
1-2318	16985-16991	models	
1-2319	16992-17001	utilities	
1-2320	17002-17007	Issue	
1-2321	17008-17013	types	
1-2322	17014-17024	Kubernetes	
1-2323	17025-17030	Agent	
1-2324	17031-17038	Routing	
1-2325	17039-17042	kas	
1-2326	17043-17051	requests	
1-2327	17052-17062	Repository	
1-2328	17063-17071	overview	
1-2329	17072-17080	Identity	
1-2330	17081-17084	and	
1-2331	17085-17099	authentication	
1-2332	17100-17104	User	
1-2333	17105-17112	stories	
1-2334	17113-17119	GitOps	
1-2335	17120-17124	with	
1-2336	17125-17128	the	
1-2337	17129-17139	Kubernetes	
1-2338	17140-17145	Agent	
1-2339	17146-17153	Running	
1-2340	17154-17161	locally	
1-2341	17162-17172	Kubernetes	
1-2342	17173-17184	integration	
1-2343	17185-17192	Omnibus	
1-2344	17193-17199	GitLab	
1-2345	17200-17205	Build	
1-2346	17206-17213	locally	
1-2347	17214-17219	Build	
1-2348	17220-17227	Omnibus	
1-2349	17228-17234	GitLab	
1-2350	17235-17242	package	
1-2351	17243-17248	Build	
1-2352	17249-17259	all-in-one	
1-2353	17260-17266	Docker	
1-2354	17267-17272	image	
1-2355	17273-17284	Information	
1-2356	17285-17288	for	
1-2357	17289-17295	GitLab	
1-2358	17296-17300	team	
1-2359	17301-17308	members	
1-2360	17309-17312	Set	
1-2361	17313-17315	up	
1-2362	17316-17317	a	
1-2363	17318-17329	development	
1-2364	17330-17341	environment	
1-2365	17342-17348	Config	
1-2366	17349-17356	options	
1-2367	17357-17365	Changing	
1-2368	17366-17370	YAML	
1-2369	17371-17377	config	
1-2370	17378-17385	options	
1-2371	17386-17392	Adding	
1-2372	17393-17404	deprecation	
1-2373	17405-17413	messages	
1-2374	17414-17420	Adding	
1-2375	17421-17424	new	
1-2376	17425-17435	gitlab-ctl	
1-2377	17436-17444	commands	
1-2378	17445-17451	Adding	
1-2379	17452-17455	new	
1-2380	17456-17464	services	
1-2381	17465-17471	Adding	
1-2382	17472-17475	new	
1-2383	17476-17484	software	
1-2384	17485-17496	definitions	
1-2385	17497-17505	Creating	
1-2386	17506-17513	patches	
1-2387	17514-17524	Installing	
1-2388	17525-17534	OpenShift	
1-2389	17535-17543	Managing	
1-2390	17544-17554	PostgreSQL	
1-2391	17555-17563	versions	
1-2392	17564-17571	Working	
1-2393	17572-17576	with	
1-2394	17577-17599	public_attributes.json	
1-2395	17600-17607	Package	
1-2396	17608-17619	development	
1-2397	17620-17631	Permissions	
1-2398	17632-17637	guide	
1-2399	17638-17645	Testing	
1-2400	17646-17655	standards	
1-2401	17656-17659	and	
1-2402	17660-17666	styles	
1-2403	17667-17672	Flaky	
1-2404	17673-17678	tests	
1-2405	17679-17687	Frontend	
1-2406	17688-17695	testing	
1-2407	17696-17705	standards	
1-2408	17706-17709	and	
1-2409	17710-17715	style	
1-2410	17716-17726	guidelines	
1-2411	17727-17733	GitLab	
1-2412	17734-17739	tests	
1-2413	17740-17742	in	
1-2414	17743-17745	CI	
1-2415	17746-17753	context	
1-2416	17754-17760	Review	
1-2417	17761-17765	apps	
1-2418	17766-17771	Smoke	
1-2419	17772-17777	tests	
1-2420	17778-17785	Testing	
1-2421	17786-17790	best	
1-2422	17791-17800	practices	
1-2423	17801-17808	Testing	
1-2424	17809-17815	levels	
1-2425	17816-17823	Testing	
1-2426	17824-17829	Rails	
1-2427	17830-17840	migrations	
1-2428	17841-17848	Testing	
1-2429	17849-17853	Rake	
1-2430	17854-17859	tasks	
1-2431	17860-17867	Testing	
1-2432	17868-17869	(	
1-2433	17869-17872	end	
1-2434	17873-17875	to	
1-2435	17876-17879	end	
1-2436	17879-17880	)	
1-2437	17881-17891	Beginner's	
1-2438	17892-17897	guide	
1-2439	17898-17900	to	
1-2440	17901-17908	writing	
1-2441	17909-17919	end-to-end	
1-2442	17920-17925	tests	
1-2443	17926-17930	Best	
1-2444	17931-17940	practices	
1-2445	17941-17945	when	
1-2446	17946-17953	writing	
1-2447	17954-17964	end-to-end	
1-2448	17965-17970	tests	
1-2449	17971-17978	Dynamic	
1-2450	17979-17986	element	
1-2451	17987-17997	validation	
1-2452	17998-18003	Flows	
1-2453	18004-18006	in	
1-2454	18007-18013	GitLab	
1-2455	18014-18016	QA	
1-2456	18017-18021	Page	
1-2457	18022-18029	objects	
1-2458	18030-18032	in	
1-2459	18033-18039	GitLab	
1-2460	18040-18042	QA	
1-2461	18043-18051	Resource	
1-2462	18052-18057	class	
1-2463	18058-18060	in	
1-2464	18061-18067	GitLab	
1-2465	18068-18070	QA	
1-2466	18071-18076	Style	
1-2467	18077-18082	guide	
1-2468	18083-18086	for	
1-2469	18087-18094	writing	
1-2470	18095-18105	end-to-end	
1-2471	18106-18111	tests	
1-2472	18112-18119	Testing	
1-2473	18120-18124	with	
1-2474	18125-18132	feature	
1-2475	18133-18138	flags	
1-2476	18139-18148	Translate	
1-2477	18149-18155	GitLab	
1-2478	18156-18171	Externalization	
1-2479	18172-18183	Translation	
1-2480	18184-18196	Proofreading	
1-2481	18197-18204	Merging	
1-2482	18205-18213	Snowplow	
1-2483	18214-18219	guide	
1-2484	18220-18225	Usage	
1-2485	18226-18230	Ping	
1-2486	18231-18236	guide	
1-2487	18237-18244	Metrics	
1-2488	18245-18255	dictionary	
1-2489	18256-18261	guide	
1-2490	18262-18269	Metrics	
1-2491	18270-18280	dictionary	
1-2492	18281-18286	Value	
1-2493	18287-18293	Stream	
1-2494	18294-18303	Analytics	
1-2495	18304-18311	Working	
1-2496	18312-18316	with	
1-2497	18317-18327	Prometheus	
1-2498	18328-18335	metrics	
1-2499	18336-18342	GitLab	
1-2500	18343-18347	Docs	
1-2501	18348-18359	Contributor	
1-2502	18360-18363	and	
1-2503	18364-18375	Development	
1-2504	18376-18380	Docs	
1-2505	18381-18392	Performance	
1-2506	18393-18403	Guidelines	
1-2507	18404-18412	Workflow	
1-2508	18413-18420	Tooling	
1-2509	18421-18431	Benchmarks	
1-2510	18432-18441	Profiling	
1-2511	18442-18453	Development	
1-2512	18454-18464	Production	
1-2513	18465-18470	RSpec	
1-2514	18471-18480	profiling	
1-2515	18481-18487	Memory	
1-2516	18488-18500	optimization	
1-2517	18501-18507	Memory	
1-2518	18508-18519	allocations	
1-2519	18520-18528	Checking	
1-2520	18529-18535	memory	
1-2521	18536-18544	pressure	
1-2522	18545-18547	of	
1-2523	18548-18551	own	
1-2524	18552-18556	code	
1-2525	18557-18566	Different	
1-2526	18567-18572	types	
1-2527	18573-18575	of	
1-2528	18576-18587	allocations	
1-2529	18588-18593	Using	
1-2530	18594-18600	Memory	
1-2531	18601-18609	Profiler	
1-2532	18610-18617	Rbtrace	
1-2533	18618-18628	Importance	
1-2534	18629-18631	of	
1-2535	18632-18639	Changes	
1-2536	18640-18644	Slow	
1-2537	18645-18655	Operations	
1-2538	18656-18657	&	
1-2539	18658-18665	Sidekiq	
1-2540	18666-18669	Git	
1-2541	18670-18680	Operations	
1-2542	18681-18688	Caching	
1-2543	18689-18695	String	
1-2544	18696-18704	Freezing	
1-2545	18705-18711	Banzai	
1-2546	18712-18721	pipelines	
1-2547	18722-18725	and	
1-2548	18726-18733	filters	
1-2549	18734-18741	Reading	
1-2550	18742-18746	from	
1-2551	18747-18752	files	
1-2552	18753-18756	and	
1-2553	18757-18762	other	
1-2554	18763-18767	data	
1-2555	18768-18775	sources	
1-2556	18776-18791	Recommendations	
1-2557	18792-18805	Anti-Patterns	
1-2558	18806-18812	Moving	
1-2559	18813-18824	Allocations	
1-2560	18825-18827	to	
1-2561	18828-18837	Constants	
1-2562	18838-18841	How	
1-2563	18842-18844	to	
1-2564	18845-18849	seed	
1-2565	18850-18851	a	
1-2566	18852-18860	database	
1-2567	18861-18865	with	
1-2568	18866-18874	millions	
1-2569	18875-18877	of	
1-2570	18878-18882	rows	
1-2571	18883-18891	Examples	
1-2572	18892-18903	Performance	
1-2573	18904-18914	Guidelines	
1-2574	18915-18919	This	
1-2575	18920-18928	document	
1-2576	18929-18938	describes	
1-2577	18939-18946	various	
1-2578	18947-18957	guidelines	
1-2579	18958-18960	to	
1-2580	18961-18967	follow	
1-2581	18968-18970	to	
1-2582	18971-18977	ensure	
1-2583	18978-18982	good	
1-2584	18983-18986	and	
1-2585	18987-18997	consistent	
1-2586	18998-19009	performance	
1-2587	19010-19012	of	
1-2588	19013-19019	GitLab	
1-2589	19019-19020	.	

#Text=Workflow
#Text=The process of solving performance problems is roughly as follows:
#Text=Make sure there’s an issue open somewhere (for example, on the GitLab CE issue
#Text=tracker), and create one if there is not.
2-1	19021-19029	Workflow	
2-2	19030-19033	The	
2-3	19034-19041	process	
2-4	19042-19044	of	
2-5	19045-19052	solving	
2-6	19053-19064	performance	
2-7	19065-19073	problems	
2-8	19074-19076	is	
2-9	19077-19084	roughly	
2-10	19085-19087	as	
2-11	19088-19095	follows	
2-12	19095-19096	:	
2-13	19097-19101	Make	
2-14	19102-19106	sure	
2-15	19107-19112	there	
2-16	19112-19113	’	
2-17	19113-19114	s	
2-18	19115-19117	an	
2-19	19118-19123	issue	
2-20	19124-19128	open	
2-21	19129-19138	somewhere	
2-22	19139-19140	(	
2-23	19140-19143	for	
2-24	19144-19151	example	
2-25	19151-19152	,	
2-26	19153-19155	on	
2-27	19156-19159	the	
2-28	19160-19166	GitLab	
2-29	19167-19169	CE	
2-30	19170-19175	issue	
2-31	19176-19183	tracker	
2-32	19183-19184	)	
2-33	19184-19185	,	
2-34	19186-19189	and	
2-35	19190-19196	create	
2-36	19197-19200	one	
2-37	19201-19203	if	
2-38	19204-19209	there	
2-39	19210-19212	is	
2-40	19213-19216	not	
2-41	19216-19217	.	

#Text=See #15607 for an example.
3-1	19218-19221	See	
3-2	19222-19228	#15607	
3-3	19229-19232	for	
3-4	19233-19235	an	
3-5	19236-19243	example	
3-6	19243-19244	.	

#Text=Measure the performance of the code in a production environment such as
#Text=GitLab.com (see the Tooling section below).
4-1	19245-19252	Measure	
4-2	19253-19256	the	
4-3	19257-19268	performance	
4-4	19269-19271	of	
4-5	19272-19275	the	
4-6	19276-19280	code	
4-7	19281-19283	in	
4-8	19284-19285	a	
4-9	19286-19296	production	
4-10	19297-19308	environment	
4-11	19309-19313	such	
4-12	19314-19316	as	
4-13	19317-19327	GitLab.com	
4-14	19328-19329	(	
4-15	19329-19332	see	
4-16	19333-19336	the	
4-17	19337-19344	Tooling	
4-18	19345-19352	section	
4-19	19353-19358	below	
4-20	19358-19359	)	
4-21	19359-19360	.	

#Text=Performance should be
#Text=measured over a period of at least 24 hours.
5-1	19361-19372	Performance	
5-2	19373-19379	should	
5-3	19380-19382	be	
5-4	19383-19391	measured	
5-5	19392-19396	over	
5-6	19397-19398	a	
5-7	19399-19405	period	
5-8	19406-19408	of	
5-9	19409-19411	at	
5-10	19412-19417	least	
5-11	19418-19420	24	
5-12	19421-19426	hours	
5-13	19426-19427	.	

#Text=Add your findings based on the measurement period (screenshots of graphs,
#Text=timings, etc) to the issue mentioned in step 1.
6-1	19428-19431	Add	
6-2	19432-19436	your	
6-3	19437-19445	findings	
6-4	19446-19451	based	
6-5	19452-19454	on	
6-6	19455-19458	the	
6-7	19459-19470	measurement	
6-8	19471-19477	period	
6-9	19478-19479	(	
6-10	19479-19490	screenshots	
6-11	19491-19493	of	
6-12	19494-19500	graphs	
6-13	19500-19501	,	
6-14	19502-19509	timings	
6-15	19509-19510	,	
6-16	19511-19514	etc	
6-17	19514-19515	)	
6-18	19516-19518	to	
6-19	19519-19522	the	
6-20	19523-19528	issue	
6-21	19529-19538	mentioned	
6-22	19539-19541	in	
6-23	19542-19546	step	
6-24	19547-19548	1	
6-25	19548-19549	.	

#Text=Solve the problem.
7-1	19550-19555	Solve	
7-2	19556-19559	the	
7-3	19560-19567	problem	
7-4	19567-19568	.	

#Text=Create a merge request, assign the “Performance” label and follow the performance review process.
8-1	19569-19575	Create	
8-2	19576-19577	a	
8-3	19578-19583	merge	
8-4	19584-19591	request	
8-5	19591-19592	,	
8-6	19593-19599	assign	
8-7	19600-19603	the	
8-8	19604-19605	“	
8-9	19605-19616	Performance	
8-10	19616-19617	”	
8-11	19618-19623	label	
8-12	19624-19627	and	
8-13	19628-19634	follow	
8-14	19635-19638	the	
8-15	19639-19650	performance	
8-16	19651-19657	review	
8-17	19658-19665	process	
8-18	19665-19666	.	

#Text=Once a change has been deployed make sure to again measure for at least 24
#Text=hours to see if your changes have any impact on the production environment.
9-1	19667-19671	Once	
9-2	19672-19673	a	
9-3	19674-19680	change	
9-4	19681-19684	has	
9-5	19685-19689	been	
9-6	19690-19698	deployed	
9-7	19699-19703	make	
9-8	19704-19708	sure	
9-9	19709-19711	to	
9-10	19712-19717	again	
9-11	19718-19725	measure	
9-12	19726-19729	for	
9-13	19730-19732	at	
9-14	19733-19738	least	
9-15	19739-19741	24	
9-16	19742-19747	hours	
9-17	19748-19750	to	
9-18	19751-19754	see	
9-19	19755-19757	if	
9-20	19758-19762	your	
9-21	19763-19770	changes	
9-22	19771-19775	have	
9-23	19776-19779	any	
9-24	19780-19786	impact	
9-25	19787-19789	on	
9-26	19790-19793	the	
9-27	19794-19804	production	
9-28	19805-19816	environment	
9-29	19816-19817	.	

#Text=Repeat until you’re done.
10-1	19818-19824	Repeat	
10-2	19825-19830	until	
10-3	19831-19834	you	
10-4	19834-19835	’	
10-5	19835-19837	re	
10-6	19838-19842	done	
10-7	19842-19843	.	

#Text=When providing timings make sure to provide:
#Text=The 95th percentile
#Text=The 99th percentile
#Text=The mean
#Text=When providing screenshots of graphs, make sure that both the X and Y axes and
#Text=the legend are clearly visible.
11-1	19844-19848	When	
11-2	19849-19858	providing	
11-3	19859-19866	timings	
11-4	19867-19871	make	
11-5	19872-19876	sure	
11-6	19877-19879	to	
11-7	19880-19887	provide	
11-8	19887-19888	:	
11-9	19889-19892	The	
11-10	19893-19897	95th	
11-11	19898-19908	percentile	
11-12	19909-19912	The	
11-13	19913-19917	99th	
11-14	19918-19928	percentile	
11-15	19929-19932	The	
11-16	19933-19937	mean	
11-17	19938-19942	When	
11-18	19943-19952	providing	
11-19	19953-19964	screenshots	
11-20	19965-19967	of	
11-21	19968-19974	graphs	
11-22	19974-19975	,	
11-23	19976-19980	make	
11-24	19981-19985	sure	
11-25	19986-19990	that	
11-26	19991-19995	both	
11-27	19996-19999	the	
11-28	20000-20001	X	
11-29	20002-20005	and	
11-30	20006-20007	Y	
11-31	20008-20012	axes	
11-32	20013-20016	and	
11-33	20017-20020	the	
11-34	20021-20027	legend	
11-35	20028-20031	are	
11-36	20032-20039	clearly	
11-37	20040-20047	visible	
11-38	20047-20048	.	

#Text=If you happen to have access to GitLab.com’s own
#Text=monitoring tools you should also provide a link to any relevant
#Text=graphs/dashboards.
12-1	20049-20051	If	
12-2	20052-20055	you	
12-3	20056-20062	happen	
12-4	20063-20065	to	
12-5	20066-20070	have	
12-6	20071-20077	access	
12-7	20078-20080	to	
12-8	20081-20091	GitLab.com	
12-9	20091-20092	’	
12-10	20092-20093	s	
12-11	20094-20097	own	
12-12	20098-20108	monitoring	
12-13	20109-20114	tools	
12-14	20115-20118	you	
12-15	20119-20125	should	
12-16	20126-20130	also	
12-17	20131-20138	provide	
12-18	20139-20140	a	
12-19	20141-20145	link	
12-20	20146-20148	to	
12-21	20149-20152	any	
12-22	20153-20161	relevant	
12-23	20162-20168	graphs	
12-24	20168-20169	/	
12-25	20169-20179	dashboards	
12-26	20179-20180	.	

#Text=Tooling
#Text=GitLab provides built-in tools to help improve performance and availability:
#Text=Profiling.
13-1	20181-20188	Tooling	
13-2	20189-20195	GitLab	
13-3	20196-20204	provides	
13-4	20205-20213	built-in	
13-5	20214-20219	tools	
13-6	20220-20222	to	
13-7	20223-20227	help	
13-8	20228-20235	improve	
13-9	20236-20247	performance	
13-10	20248-20251	and	
13-11	20252-20264	availability	
13-12	20264-20265	:	
13-13	20266-20275	Profiling	
13-14	20275-20276	.	

#Text=Distributed Tracing
#Text=GitLab Performance Monitoring.
14-1	20277-20288	Distributed	
14-2	20289-20296	Tracing	
14-3	20297-20303	GitLab	
14-4	20304-20315	Performance	
14-5	20316-20326	Monitoring	
14-6	20326-20327	.	

#Text=Request Profiling.
15-1	20328-20335	Request	
15-2	20336-20345	Profiling	
15-3	20345-20346	.	

#Text=QueryRecoder for preventing N+1 regressions.
16-1	20347-20359	QueryRecoder	
16-2	20360-20363	for	
16-3	20364-20374	preventing	
16-4	20375-20376	N	
16-5	20376-20377	+	
16-6	20377-20378	1	
16-7	20379-20390	regressions	
16-8	20390-20391	.	

#Text=Chaos endpoints for testing failure scenarios.
17-1	20392-20397	Chaos	
17-2	20398-20407	endpoints	
17-3	20408-20411	for	
17-4	20412-20419	testing	
17-5	20420-20427	failure	
17-6	20428-20437	scenarios	
17-7	20437-20438	.	

#Text=Intended mainly for testing availability.
18-1	20439-20447	Intended	
18-2	20448-20454	mainly	
18-3	20455-20458	for	
18-4	20459-20466	testing	
18-5	20467-20479	availability	
18-6	20479-20480	.	

#Text=Service measurement for measuring and logging service execution.
19-1	20481-20488	Service	
19-2	20489-20500	measurement	
19-3	20501-20504	for	
19-4	20505-20514	measuring	
19-5	20515-20518	and	
19-6	20519-20526	logging	
19-7	20527-20534	service	
19-8	20535-20544	execution	
19-9	20544-20545	.	

#Text=GitLab team members can use GitLab.com’s performance monitoring systems located at
#Text=dashboards.gitlab.net, this requires you to log in using your
#Text=@gitlab.com email address.
20-1	20546-20552	GitLab	
20-2	20553-20557	team	
20-3	20558-20565	members	
20-4	20566-20569	can	
20-5	20570-20573	use	
20-6	20574-20584	GitLab.com	
20-7	20584-20585	’	
20-8	20585-20586	s	
20-9	20587-20598	performance	
20-10	20599-20609	monitoring	
20-11	20610-20617	systems	
20-12	20618-20625	located	
20-13	20626-20628	at	
20-14	20629-20650	dashboards.gitlab.net	
20-15	20650-20651	,	
20-16	20652-20656	this	
20-17	20657-20665	requires	
20-18	20666-20669	you	
20-19	20670-20672	to	
20-20	20673-20676	log	
20-21	20677-20679	in	
20-22	20680-20685	using	
20-23	20686-20690	your	
20-24	20691-20692	@	
20-25	20692-20702	gitlab.com	
20-26	20703-20708	email	
20-27	20709-20716	address	
20-28	20716-20717	.	

#Text=Non-GitLab team-members are advised to set up their
#Text=own Prometheus and Grafana stack.
21-1	20718-20728	Non-GitLab	
21-2	20729-20741	team-members	
21-3	20742-20745	are	
21-4	20746-20753	advised	
21-5	20754-20756	to	
21-6	20757-20760	set	
21-7	20761-20763	up	
21-8	20764-20769	their	
21-9	20770-20773	own	
21-10	20774-20784	Prometheus	
21-11	20785-20788	and	
21-12	20789-20796	Grafana	
21-13	20797-20802	stack	
21-14	20802-20803	.	

#Text=Benchmarks
#Text=Benchmarks are almost always useless.
22-1	20804-20814	Benchmarks	
22-2	20815-20825	Benchmarks	
22-3	20826-20829	are	
22-4	20830-20836	almost	
22-5	20837-20843	always	
22-6	20844-20851	useless	
22-7	20851-20852	.	

#Text=Benchmarks usually only test small bits of
#Text=code in isolation and often only measure the best case scenario.
23-1	20853-20863	Benchmarks	
23-2	20864-20871	usually	
23-3	20872-20876	only	
23-4	20877-20881	test	
23-5	20882-20887	small	
23-6	20888-20892	bits	
23-7	20893-20895	of	
23-8	20896-20900	code	
23-9	20901-20903	in	
23-10	20904-20913	isolation	
23-11	20914-20917	and	
23-12	20918-20923	often	
23-13	20924-20928	only	
23-14	20929-20936	measure	
23-15	20937-20940	the	
23-16	20941-20945	best	
23-17	20946-20950	case	
23-18	20951-20959	scenario	
23-19	20959-20960	.	

#Text=On top of that,
#Text=benchmarks for libraries (such as a Gem) tend to be biased in favour of the
#Text=library.
24-1	20961-20963	On	
24-2	20964-20967	top	
24-3	20968-20970	of	
24-4	20971-20975	that	
24-5	20975-20976	,	
24-6	20977-20987	benchmarks	
24-7	20988-20991	for	
24-8	20992-21001	libraries	
24-9	21002-21003	(	
24-10	21003-21007	such	
24-11	21008-21010	as	
24-12	21011-21012	a	
24-13	21013-21016	Gem	
24-14	21016-21017	)	
24-15	21018-21022	tend	
24-16	21023-21025	to	
24-17	21026-21028	be	
24-18	21029-21035	biased	
24-19	21036-21038	in	
24-20	21039-21045	favour	
24-21	21046-21048	of	
24-22	21049-21052	the	
24-23	21053-21060	library	
24-24	21060-21061	.	

#Text=After all there’s little benefit to an author publishing a benchmark
#Text=that shows they perform worse than their competitors.
25-1	21062-21067	After	
25-2	21068-21071	all	
25-3	21072-21077	there	
25-4	21077-21078	’	
25-5	21078-21079	s	
25-6	21080-21086	little	
25-7	21087-21094	benefit	
25-8	21095-21097	to	
25-9	21098-21100	an	
25-10	21101-21107	author	
25-11	21108-21118	publishing	
25-12	21119-21120	a	
25-13	21121-21130	benchmark	
25-14	21131-21135	that	
25-15	21136-21141	shows	
25-16	21142-21146	they	
25-17	21147-21154	perform	
25-18	21155-21160	worse	
25-19	21161-21165	than	
25-20	21166-21171	their	
25-21	21172-21183	competitors	
25-22	21183-21184	.	

#Text=Benchmarks are only really useful when you need a rough (emphasis on “rough”)
#Text=understanding of the impact of your changes.
26-1	21185-21195	Benchmarks	
26-2	21196-21199	are	
26-3	21200-21204	only	
26-4	21205-21211	really	
26-5	21212-21218	useful	
26-6	21219-21223	when	
26-7	21224-21227	you	
26-8	21228-21232	need	
26-9	21233-21234	a	
26-10	21235-21240	rough	
26-11	21241-21242	(	
26-12	21242-21250	emphasis	
26-13	21251-21253	on	
26-14	21254-21255	“	
26-15	21255-21260	rough	
26-16	21260-21261	”	
26-17	21261-21262	)	
26-18	21263-21276	understanding	
26-19	21277-21279	of	
26-20	21280-21283	the	
26-21	21284-21290	impact	
26-22	21291-21293	of	
26-23	21294-21298	your	
26-24	21299-21306	changes	
26-25	21306-21307	.	

#Text=For example, if a certain method is
#Text=slow a benchmark can be used to see if the changes you’re making have any impact
#Text=on the method’s performance.
27-1	21308-21311	For	
27-2	21312-21319	example	
27-3	21319-21320	,	
27-4	21321-21323	if	
27-5	21324-21325	a	
27-6	21326-21333	certain	
27-7	21334-21340	method	
27-8	21341-21343	is	
27-9	21344-21348	slow	
27-10	21349-21350	a	
27-11	21351-21360	benchmark	
27-12	21361-21364	can	
27-13	21365-21367	be	
27-14	21368-21372	used	
27-15	21373-21375	to	
27-16	21376-21379	see	
27-17	21380-21382	if	
27-18	21383-21386	the	
27-19	21387-21394	changes	
27-20	21395-21398	you	
27-21	21398-21399	’	
27-22	21399-21401	re	
27-23	21402-21408	making	
27-24	21409-21413	have	
27-25	21414-21417	any	
27-26	21418-21424	impact	
27-27	21425-21427	on	
27-28	21428-21431	the	
27-29	21432-21438	method	
27-30	21438-21439	’	
27-31	21439-21440	s	
27-32	21441-21452	performance	
27-33	21452-21453	.	

#Text=However, even when a benchmark shows your changes
#Text=improve performance there’s no guarantee the performance also improves in a
#Text=production environment.
28-1	21454-21461	However	
28-2	21461-21462	,	
28-3	21463-21467	even	
28-4	21468-21472	when	
28-5	21473-21474	a	
28-6	21475-21484	benchmark	
28-7	21485-21490	shows	
28-8	21491-21495	your	
28-9	21496-21503	changes	
28-10	21504-21511	improve	
28-11	21512-21523	performance	
28-12	21524-21529	there	
28-13	21529-21530	’	
28-14	21530-21531	s	
28-15	21532-21534	no	
28-16	21535-21544	guarantee	
28-17	21545-21548	the	
28-18	21549-21560	performance	
28-19	21561-21565	also	
28-20	21566-21574	improves	
28-21	21575-21577	in	
28-22	21578-21579	a	
28-23	21580-21590	production	
28-24	21591-21602	environment	
28-25	21602-21603	.	

#Text=When writing benchmarks you should almost always use
#Text=benchmark-ips.
29-1	21604-21608	When	
29-2	21609-21616	writing	
29-3	21617-21627	benchmarks	
29-4	21628-21631	you	
29-5	21632-21638	should	
29-6	21639-21645	almost	
29-7	21646-21652	always	
29-8	21653-21656	use	
29-9	21657-21670	benchmark-ips	
29-10	21670-21671	.	

#Text=Ruby’s Benchmark
#Text=module that comes with the standard library is rarely useful as it runs either a
#Text=single iteration (when using Benchmark.bm) or two iterations (when using
#Text=Benchmark.bmbm).
30-1	21672-21676	Ruby	
30-2	21676-21677	’	
30-3	21677-21678	s	
30-4	21679-21688	Benchmark	
30-5	21689-21695	module	
30-6	21696-21700	that	
30-7	21701-21706	comes	
30-8	21707-21711	with	
30-9	21712-21715	the	
30-10	21716-21724	standard	
30-11	21725-21732	library	
30-12	21733-21735	is	
30-13	21736-21742	rarely	
30-14	21743-21749	useful	
30-15	21750-21752	as	
30-16	21753-21755	it	
30-17	21756-21760	runs	
30-18	21761-21767	either	
30-19	21768-21769	a	
30-20	21770-21776	single	
30-21	21777-21786	iteration	
30-22	21787-21788	(	
30-23	21788-21792	when	
30-24	21793-21798	using	
30-25	21799-21811	Benchmark.bm	
30-26	21811-21812	)	
30-27	21813-21815	or	
30-28	21816-21819	two	
30-29	21820-21830	iterations	
30-30	21831-21832	(	
30-31	21832-21836	when	
30-32	21837-21842	using	
30-33	21843-21857	Benchmark.bmbm	
30-34	21857-21858	)	
30-35	21858-21859	.	

#Text=Running this few iterations means external factors, such as a
#Text=video streaming in the background, can very easily skew the benchmark
#Text=statistics.
31-1	21860-21867	Running	
31-2	21868-21872	this	
31-3	21873-21876	few	
31-4	21877-21887	iterations	
31-5	21888-21893	means	
31-6	21894-21902	external	
31-7	21903-21910	factors	
31-8	21910-21911	,	
31-9	21912-21916	such	
31-10	21917-21919	as	
31-11	21920-21921	a	
31-12	21922-21927	video	
31-13	21928-21937	streaming	
31-14	21938-21940	in	
31-15	21941-21944	the	
31-16	21945-21955	background	
31-17	21955-21956	,	
31-18	21957-21960	can	
31-19	21961-21965	very	
31-20	21966-21972	easily	
31-21	21973-21977	skew	
31-22	21978-21981	the	
31-23	21982-21991	benchmark	
31-24	21992-22002	statistics	
31-25	22002-22003	.	

#Text=Another problem with the Benchmark module is that it displays timings, not
#Text=iterations.
32-1	22004-22011	Another	
32-2	22012-22019	problem	
32-3	22020-22024	with	
32-4	22025-22028	the	
32-5	22029-22038	Benchmark	
32-6	22039-22045	module	
32-7	22046-22048	is	
32-8	22049-22053	that	
32-9	22054-22056	it	
32-10	22057-22065	displays	
32-11	22066-22073	timings	
32-12	22073-22074	,	
32-13	22075-22078	not	
32-14	22079-22089	iterations	
32-15	22089-22090	.	

#Text=This means that if a piece of code completes in a very short period
#Text=of time it can be very difficult to compare the timings before and after a
#Text=certain change.
33-1	22091-22095	This	
33-2	22096-22101	means	
33-3	22102-22106	that	
33-4	22107-22109	if	
33-5	22110-22111	a	
33-6	22112-22117	piece	
33-7	22118-22120	of	
33-8	22121-22125	code	
33-9	22126-22135	completes	
33-10	22136-22138	in	
33-11	22139-22140	a	
33-12	22141-22145	very	
33-13	22146-22151	short	
33-14	22152-22158	period	
33-15	22159-22161	of	
33-16	22162-22166	time	
33-17	22167-22169	it	
33-18	22170-22173	can	
33-19	22174-22176	be	
33-20	22177-22181	very	
33-21	22182-22191	difficult	
33-22	22192-22194	to	
33-23	22195-22202	compare	
33-24	22203-22206	the	
33-25	22207-22214	timings	
33-26	22215-22221	before	
33-27	22222-22225	and	
33-28	22226-22231	after	
33-29	22232-22233	a	
33-30	22234-22241	certain	
33-31	22242-22248	change	
33-32	22248-22249	.	

#Text=This in turn leads to patterns such as the following:
#Text=Benchmark.bmbm(10) do |bench|
#Text=bench.report 'do something' do
#Text=100.times do
#Text=... work here ...
#Text=end
#Text=end
#Text=end
#Text=This however leads to the question: how many iterations should we run to get
#Text=meaningful statistics?
34-1	22250-22254	This	
34-2	22255-22257	in	
34-3	22258-22262	turn	
34-4	22263-22268	leads	
34-5	22269-22271	to	
34-6	22272-22280	patterns	
34-7	22281-22285	such	
34-8	22286-22288	as	
34-9	22289-22292	the	
34-10	22293-22302	following	
34-11	22302-22303	:	
34-12	22304-22318	Benchmark.bmbm	
34-13	22318-22319	(	
34-14	22319-22321	10	
34-15	22321-22322	)	
34-16	22323-22325	do	
34-17	22326-22327	|	
34-18	22327-22332	bench	
34-19	22332-22333	|	
34-20	22334-22346	bench.report	
34-21	22347-22348	'	
34-22	22348-22350	do	
34-23	22351-22360	something	
34-24	22360-22361	'	
34-25	22362-22364	do	
34-26	22365-22368	100	
34-27	22368-22369	.	
34-28	22369-22374	times	
34-29	22375-22377	do	
34-30	22378-22379	.	
34-31	22379-22380	.	
34-32	22380-22381	.	
34-33	22382-22386	work	
34-34	22387-22391	here	
34-35	22392-22393	.	
34-36	22393-22394	.	
34-37	22394-22395	.	
34-38	22396-22399	end	
34-39	22400-22403	end	
34-40	22404-22407	end	
34-41	22408-22412	This	
34-42	22413-22420	however	
34-43	22421-22426	leads	
34-44	22427-22429	to	
34-45	22430-22433	the	
34-46	22434-22442	question	
34-47	22442-22443	:	
34-48	22444-22447	how	
34-49	22448-22452	many	
34-50	22453-22463	iterations	
34-51	22464-22470	should	
34-52	22471-22473	we	
34-53	22474-22477	run	
34-54	22478-22480	to	
34-55	22481-22484	get	
34-56	22485-22495	meaningful	
34-57	22496-22506	statistics	
34-58	22506-22507	?	

#Text=The benchmark-ips Gem basically takes care of all this and much more, and as a
#Text=result of this should be used instead of the Benchmark module.
35-1	22508-22511	The	
35-2	22512-22525	benchmark-ips	
35-3	22526-22529	Gem	
35-4	22530-22539	basically	
35-5	22540-22545	takes	
35-6	22546-22550	care	
35-7	22551-22553	of	
35-8	22554-22557	all	
35-9	22558-22562	this	
35-10	22563-22566	and	
35-11	22567-22571	much	
35-12	22572-22576	more	
35-13	22576-22577	,	
35-14	22578-22581	and	
35-15	22582-22584	as	
35-16	22585-22586	a	
35-17	22587-22593	result	
35-18	22594-22596	of	
35-19	22597-22601	this	
35-20	22602-22608	should	
35-21	22609-22611	be	
35-22	22612-22616	used	
35-23	22617-22624	instead	
35-24	22625-22627	of	
35-25	22628-22631	the	
35-26	22632-22641	Benchmark	
35-27	22642-22648	module	
35-28	22648-22649	.	

#Text=In short:
#Text=Don’t trust benchmarks you find on the internet.
36-1	22650-22652	In	
36-2	22653-22658	short	
36-3	22658-22659	:	
36-4	22660-22663	Don	
36-5	22663-22664	’	
36-6	22664-22665	t	
36-7	22666-22671	trust	
36-8	22672-22682	benchmarks	
36-9	22683-22686	you	
36-10	22687-22691	find	
36-11	22692-22694	on	
36-12	22695-22698	the	
36-13	22699-22707	internet	
36-14	22707-22708	.	

#Text=Never make claims based on just benchmarks, always measure in production to
#Text=confirm your findings.
37-1	22709-22714	Never	
37-2	22715-22719	make	
37-3	22720-22726	claims	
37-4	22727-22732	based	
37-5	22733-22735	on	
37-6	22736-22740	just	
37-7	22741-22751	benchmarks	
37-8	22751-22752	,	
37-9	22753-22759	always	
37-10	22760-22767	measure	
37-11	22768-22770	in	
37-12	22771-22781	production	
37-13	22782-22784	to	
37-14	22785-22792	confirm	
37-15	22793-22797	your	
37-16	22798-22806	findings	
37-17	22806-22807	.	

#Text=X being N times faster than Y is meaningless if you don’t know what impact it
#Text=has on your production environment.
38-1	22808-22809	X	
38-2	22810-22815	being	
38-3	22816-22817	N	
38-4	22818-22823	times	
38-5	22824-22830	faster	
38-6	22831-22835	than	
38-7	22836-22837	Y	
38-8	22838-22840	is	
38-9	22841-22852	meaningless	
38-10	22853-22855	if	
38-11	22856-22859	you	
38-12	22860-22863	don	
38-13	22863-22864	’	
38-14	22864-22865	t	
38-15	22866-22870	know	
38-16	22871-22875	what	
38-17	22876-22882	impact	
38-18	22883-22885	it	
38-19	22886-22889	has	
38-20	22890-22892	on	
38-21	22893-22897	your	
38-22	22898-22908	production	
38-23	22909-22920	environment	
38-24	22920-22921	.	

#Text=A production environment is the only benchmark that always tells the truth
#Text=(unless your performance monitoring systems are not set up correctly).
39-1	22922-22923	A	
39-2	22924-22934	production	
39-3	22935-22946	environment	
39-4	22947-22949	is	
39-5	22950-22953	the	
39-6	22954-22958	only	
39-7	22959-22968	benchmark	
39-8	22969-22973	that	
39-9	22974-22980	always	
39-10	22981-22986	tells	
39-11	22987-22990	the	
39-12	22991-22996	truth	
39-13	22997-22998	(	
39-14	22998-23004	unless	
39-15	23005-23009	your	
39-16	23010-23021	performance	
39-17	23022-23032	monitoring	
39-18	23033-23040	systems	
39-19	23041-23044	are	
39-20	23045-23048	not	
39-21	23049-23052	set	
39-22	23053-23055	up	
39-23	23056-23065	correctly	
39-24	23065-23066	)	
39-25	23066-23067	.	

#Text=If you must write a benchmark use the benchmark-ips Gem instead of Ruby’s
#Text=Benchmark module.
40-1	23068-23070	If	
40-2	23071-23074	you	
40-3	23075-23079	must	
40-4	23080-23085	write	
40-5	23086-23087	a	
40-6	23088-23097	benchmark	
40-7	23098-23101	use	
40-8	23102-23105	the	
40-9	23106-23119	benchmark-ips	
40-10	23120-23123	Gem	
40-11	23124-23131	instead	
40-12	23132-23134	of	
40-13	23135-23139	Ruby	
40-14	23139-23140	’	
40-15	23140-23141	s	
40-16	23142-23151	Benchmark	
40-17	23152-23158	module	
40-18	23158-23159	.	

#Text=Profiling
#Text=By collecting snapshots of process state at regular intervals, profiling allows
#Text=you to see where time is spent in a process.
41-1	23160-23169	Profiling	
41-2	23170-23172	By	
41-3	23173-23183	collecting	
41-4	23184-23193	snapshots	
41-5	23194-23196	of	
41-6	23197-23204	process	
41-7	23205-23210	state	
41-8	23211-23213	at	
41-9	23214-23221	regular	
41-10	23222-23231	intervals	
41-11	23231-23232	,	
41-12	23233-23242	profiling	
41-13	23243-23249	allows	
41-14	23250-23253	you	
41-15	23254-23256	to	
41-16	23257-23260	see	
41-17	23261-23266	where	
41-18	23267-23271	time	
41-19	23272-23274	is	
41-20	23275-23280	spent	
41-21	23281-23283	in	
41-22	23284-23285	a	
41-23	23286-23293	process	
41-24	23293-23294	.	

#Text=The
#Text=Stackprof gem is included in GitLab,
#Text=allowing you to profile which code is running on CPU in detail.
42-1	23295-23298	The	
42-2	23299-23308	Stackprof	
42-3	23309-23312	gem	
42-4	23313-23315	is	
42-5	23316-23324	included	
42-6	23325-23327	in	
42-7	23328-23334	GitLab	
42-8	23334-23335	,	
42-9	23336-23344	allowing	
42-10	23345-23348	you	
42-11	23349-23351	to	
42-12	23352-23359	profile	
42-13	23360-23365	which	
42-14	23366-23370	code	
42-15	23371-23373	is	
42-16	23374-23381	running	
42-17	23382-23384	on	
42-18	23385-23388	CPU	
42-19	23389-23391	in	
42-20	23392-23398	detail	
42-21	23398-23399	.	

#Text=It’s important to note that profiling an application alters its performance.
43-1	23400-23402	It	
43-2	23402-23403	’	
43-3	23403-23404	s	
43-4	23405-23414	important	
43-5	23415-23417	to	
43-6	23418-23422	note	
43-7	23423-23427	that	
43-8	23428-23437	profiling	
43-9	23438-23440	an	
43-10	23441-23452	application	
43-11	23453-23459	alters	
43-12	23460-23463	its	
43-13	23464-23475	performance	
43-14	23475-23476	.	

#Text=Different profiling strategies have different overheads.
44-1	23477-23486	Different	
44-2	23487-23496	profiling	
44-3	23497-23507	strategies	
44-4	23508-23512	have	
44-5	23513-23522	different	
44-6	23523-23532	overheads	
44-7	23532-23533	.	

#Text=Stackprof is a sampling
#Text=profiler.
45-1	23534-23543	Stackprof	
45-2	23544-23546	is	
45-3	23547-23548	a	
45-4	23549-23557	sampling	
45-5	23558-23566	profiler	
45-6	23566-23567	.	

#Text=It samples stack traces from running threads at a configurable
#Text=frequency (e.g. 100hz, that is 100 stacks per second).
46-1	23568-23570	It	
46-2	23571-23578	samples	
46-3	23579-23584	stack	
46-4	23585-23591	traces	
46-5	23592-23596	from	
46-6	23597-23604	running	
46-7	23605-23612	threads	
46-8	23613-23615	at	
46-9	23616-23617	a	
46-10	23618-23630	configurable	
46-11	23631-23640	frequency	
46-12	23641-23642	(	
46-13	23642-23645	e.g	
46-14	23645-23646	.	
46-15	23647-23652	100hz	
46-16	23652-23653	,	
46-17	23654-23658	that	
46-18	23659-23661	is	
46-19	23662-23665	100	
46-20	23666-23672	stacks	
46-21	23673-23676	per	
46-22	23677-23683	second	
46-23	23683-23684	)	
46-24	23684-23685	.	

#Text=This type of profiling
#Text=has quite a low (albeit non-zero) overhead and is generally considered to be
#Text=safe for production.
47-1	23686-23690	This	
47-2	23691-23695	type	
47-3	23696-23698	of	
47-4	23699-23708	profiling	
47-5	23709-23712	has	
47-6	23713-23718	quite	
47-7	23719-23720	a	
47-8	23721-23724	low	
47-9	23725-23726	(	
47-10	23726-23732	albeit	
47-11	23733-23741	non-zero	
47-12	23741-23742	)	
47-13	23743-23751	overhead	
47-14	23752-23755	and	
47-15	23756-23758	is	
47-16	23759-23768	generally	
47-17	23769-23779	considered	
47-18	23780-23782	to	
47-19	23783-23785	be	
47-20	23786-23790	safe	
47-21	23791-23794	for	
47-22	23795-23805	production	
47-23	23805-23806	.	

#Text=Development
#Text=A profiler can be a very useful tool during development, even if it does run in
#Text=an unrepresentative environment.
48-1	23807-23818	Development	
48-2	23819-23820	A	
48-3	23821-23829	profiler	
48-4	23830-23833	can	
48-5	23834-23836	be	
48-6	23837-23838	a	
48-7	23839-23843	very	
48-8	23844-23850	useful	
48-9	23851-23855	tool	
48-10	23856-23862	during	
48-11	23863-23874	development	
48-12	23874-23875	,	
48-13	23876-23880	even	
48-14	23881-23883	if	
48-15	23884-23886	it	
48-16	23887-23891	does	
48-17	23892-23895	run	
48-18	23896-23898	in	
48-19	23899-23901	an	
48-20	23902-23918	unrepresentative	
48-21	23919-23930	environment	
48-22	23930-23931	.	

#Text=In particular, a method is not necessarily
#Text=troublesome just because it’s executed many times, or takes a long time to
#Text=execute.
49-1	23932-23934	In	
49-2	23935-23945	particular	
49-3	23945-23946	,	
49-4	23947-23948	a	
49-5	23949-23955	method	
49-6	23956-23958	is	
49-7	23959-23962	not	
49-8	23963-23974	necessarily	
49-9	23975-23986	troublesome	
49-10	23987-23991	just	
49-11	23992-23999	because	
49-12	24000-24002	it	
49-13	24002-24003	’	
49-14	24003-24004	s	
49-15	24005-24013	executed	
49-16	24014-24018	many	
49-17	24019-24024	times	
49-18	24024-24025	,	
49-19	24026-24028	or	
49-20	24029-24034	takes	
49-21	24035-24036	a	
49-22	24037-24041	long	
49-23	24042-24046	time	
49-24	24047-24049	to	
49-25	24050-24057	execute	
49-26	24057-24058	.	

#Text=Profiles are tools you can use to better understand what is happening
#Text=in an application - using that information wisely is up to you!
50-1	24059-24067	Profiles	
50-2	24068-24071	are	
50-3	24072-24077	tools	
50-4	24078-24081	you	
50-5	24082-24085	can	
50-6	24086-24089	use	
50-7	24090-24092	to	
50-8	24093-24099	better	
50-9	24100-24110	understand	
50-10	24111-24115	what	
50-11	24116-24118	is	
50-12	24119-24128	happening	
50-13	24129-24131	in	
50-14	24132-24134	an	
50-15	24135-24146	application	
50-16	24147-24148	-	
50-17	24149-24154	using	
50-18	24155-24159	that	
50-19	24160-24171	information	
50-20	24172-24178	wisely	
50-21	24179-24181	is	
50-22	24182-24184	up	
50-23	24185-24187	to	
50-24	24188-24191	you	
50-25	24191-24192	!	

#Text=Keeping that in mind, to create a profile, identify (or create) a spec that
#Text=exercises the troublesome code path, then run it using the bin/rspec-stackprof
#Text=helper, for example:
#Text=$ LIMIT=10 bin/rspec-stackprof spec/policies/project_policy_spec.rb
#Text=8/8 |====== 100 ======>| Time: 00:00:18
#Text=Finished in 18.19 seconds (files took 4.8 seconds to load)
#Text=8 examples, 0 failures
#Text===================================
#Text=Mode: wall(1000)
#Text=Samples: 17033 (5.59% miss rate)
#Text=GC: 1901 (11.16%)
#Text===================================
#Text=TOTAL
#Text=(pct)
#Text=SAMPLES
#Text=(pct)
#Text=FRAME
#Text=6000
#Text=(35.2%)
#Text=2566
#Text=(15.1%)
#Text=Sprockets::Cache::FileStore#get
#Text=2018
#Text=(11.8%)
#Text=888
#Text=(5.2%)
#Text=ActiveRecord::ConnectionAdapters::PostgreSQLAdapter#exec_no_cache
#Text=1338
#Text=(7.9%)
#Text=640
#Text=(3.8%)
#Text=ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements#execute
#Text=3125
#Text=(18.3%)
#Text=394
#Text=(2.3%)
#Text=Sprockets::Cache::FileStore#safe_open
#Text=913
#Text=(5.4%)
#Text=301
#Text=(1.8%)
#Text=ActiveRecord::ConnectionAdapters::PostgreSQLAdapter#exec_cache
#Text=288
#Text=(1.7%)
#Text=288
#Text=(1.7%)
#Text=ActiveRecord::Attribute#initialize
#Text=246
#Text=(1.4%)
#Text=246
#Text=(1.4%)
#Text=Sprockets::Cache::FileStore#safe_stat
#Text=295
#Text=(1.7%)
#Text=193
#Text=(1.1%)
#Text=block (2 levels) in class_attribute
#Text=187
#Text=(1.1%)
#Text=187
#Text=(1.1%)
#Text=block (4 levels) in class_attribute
#Text=You can limit the specs that are run by passing any arguments rspec would
#Text=normally take.
51-1	24193-24200	Keeping	
51-2	24201-24205	that	
51-3	24206-24208	in	
51-4	24209-24213	mind	
51-5	24213-24214	,	
51-6	24215-24217	to	
51-7	24218-24224	create	
51-8	24225-24226	a	
51-9	24227-24234	profile	
51-10	24234-24235	,	
51-11	24236-24244	identify	
51-12	24245-24246	(	
51-13	24246-24248	or	
51-14	24249-24255	create	
51-15	24255-24256	)	
51-16	24257-24258	a	
51-17	24259-24263	spec	
51-18	24264-24268	that	
51-19	24269-24278	exercises	
51-20	24279-24282	the	
51-21	24283-24294	troublesome	
51-22	24295-24299	code	
51-23	24300-24304	path	
51-24	24304-24305	,	
51-25	24306-24310	then	
51-26	24311-24314	run	
51-27	24315-24317	it	
51-28	24318-24323	using	
51-29	24324-24327	the	
51-30	24328-24331	bin	
51-31	24331-24332	/	
51-32	24332-24347	rspec-stackprof	
51-33	24348-24354	helper	
51-34	24354-24355	,	
51-35	24356-24359	for	
51-36	24360-24367	example	
51-37	24367-24368	:	
51-38	24369-24370	$	
51-39	24371-24376	LIMIT	
51-40	24376-24377	=	
51-41	24377-24379	10	
51-42	24380-24383	bin	
51-43	24383-24384	/	
51-44	24384-24399	rspec-stackprof	
51-45	24400-24404	spec	
51-46	24404-24405	/	
51-47	24405-24413	policies	
51-48	24413-24414	/	
51-49	24414-24436	project_policy_spec.rb	
51-50	24437-24438	8	
51-51	24438-24439	/	
51-52	24439-24440	8	
51-53	24441-24442	|	
51-54	24442-24443	=	
51-55	24443-24444	=	
51-56	24444-24445	=	
51-57	24445-24446	=	
51-58	24446-24447	=	
51-59	24447-24448	=	
51-60	24449-24452	100	
51-61	24453-24454	=	
51-62	24454-24455	=	
51-63	24455-24456	=	
51-64	24456-24457	=	
51-65	24457-24458	=	
51-66	24458-24459	=	
51-67	24459-24460	>	
51-68	24460-24461	|	
51-69	24462-24466	Time	
51-70	24466-24467	:	
51-71	24468-24470	00	
51-72	24470-24471	:	
51-73	24471-24473	00	
51-74	24473-24474	:	
51-75	24474-24476	18	
51-76	24477-24485	Finished	
51-77	24486-24488	in	
51-78	24489-24494	18.19	
51-79	24495-24502	seconds	
51-80	24503-24504	(	
51-81	24504-24509	files	
51-82	24510-24514	took	
51-83	24515-24518	4.8	
51-84	24519-24526	seconds	
51-85	24527-24529	to	
51-86	24530-24534	load	
51-87	24534-24535	)	
51-88	24536-24537	8	
51-89	24538-24546	examples	
51-90	24546-24547	,	
51-91	24548-24549	0	
51-92	24550-24558	failures	
51-93	24559-24560	=	
51-94	24560-24561	=	
51-95	24561-24562	=	
51-96	24562-24563	=	
51-97	24563-24564	=	
51-98	24564-24565	=	
51-99	24565-24566	=	
51-100	24566-24567	=	
51-101	24567-24568	=	
51-102	24568-24569	=	
51-103	24569-24570	=	
51-104	24570-24571	=	
51-105	24571-24572	=	
51-106	24572-24573	=	
51-107	24573-24574	=	
51-108	24574-24575	=	
51-109	24575-24576	=	
51-110	24576-24577	=	
51-111	24577-24578	=	
51-112	24578-24579	=	
51-113	24579-24580	=	
51-114	24580-24581	=	
51-115	24581-24582	=	
51-116	24582-24583	=	
51-117	24583-24584	=	
51-118	24584-24585	=	
51-119	24585-24586	=	
51-120	24586-24587	=	
51-121	24587-24588	=	
51-122	24588-24589	=	
51-123	24589-24590	=	
51-124	24590-24591	=	
51-125	24591-24592	=	
51-126	24592-24593	=	
51-127	24594-24598	Mode	
51-128	24598-24599	:	
51-129	24600-24604	wall	
51-130	24604-24605	(	
51-131	24605-24609	1000	
51-132	24609-24610	)	
51-133	24611-24618	Samples	
51-134	24618-24619	:	
51-135	24620-24625	17033	
51-136	24626-24627	(	
51-137	24627-24632	5.59%	
51-138	24633-24637	miss	
51-139	24638-24642	rate	
51-140	24642-24643	)	
51-141	24644-24646	GC	
51-142	24646-24647	:	
51-143	24648-24652	1901	
51-144	24653-24654	(	
51-145	24654-24660	11.16%	
51-146	24660-24661	)	
51-147	24662-24663	=	
51-148	24663-24664	=	
51-149	24664-24665	=	
51-150	24665-24666	=	
51-151	24666-24667	=	
51-152	24667-24668	=	
51-153	24668-24669	=	
51-154	24669-24670	=	
51-155	24670-24671	=	
51-156	24671-24672	=	
51-157	24672-24673	=	
51-158	24673-24674	=	
51-159	24674-24675	=	
51-160	24675-24676	=	
51-161	24676-24677	=	
51-162	24677-24678	=	
51-163	24678-24679	=	
51-164	24679-24680	=	
51-165	24680-24681	=	
51-166	24681-24682	=	
51-167	24682-24683	=	
51-168	24683-24684	=	
51-169	24684-24685	=	
51-170	24685-24686	=	
51-171	24686-24687	=	
51-172	24687-24688	=	
51-173	24688-24689	=	
51-174	24689-24690	=	
51-175	24690-24691	=	
51-176	24691-24692	=	
51-177	24692-24693	=	
51-178	24693-24694	=	
51-179	24694-24695	=	
51-180	24695-24696	=	
51-181	24697-24702	TOTAL	
51-182	24703-24704	(	
51-183	24704-24707	pct	
51-184	24707-24708	)	
51-185	24709-24716	SAMPLES	
51-186	24717-24718	(	
51-187	24718-24721	pct	
51-188	24721-24722	)	
51-189	24723-24728	FRAME	
51-190	24729-24733	6000	
51-191	24734-24735	(	
51-192	24735-24740	35.2%	
51-193	24740-24741	)	
51-194	24742-24746	2566	
51-195	24747-24748	(	
51-196	24748-24753	15.1%	
51-197	24753-24754	)	
51-198	24755-24764	Sprockets	
51-199	24764-24765	:	
51-200	24765-24766	:	
51-201	24766-24771	Cache	
51-202	24771-24772	:	
51-203	24772-24773	:	
51-204	24773-24782	FileStore	
51-205	24782-24783	#	
51-206	24783-24786	get	
51-207	24787-24791	2018	
51-208	24792-24793	(	
51-209	24793-24798	11.8%	
51-210	24798-24799	)	
51-211	24800-24803	888	
51-212	24804-24805	(	
51-213	24805-24809	5.2%	
51-214	24809-24810	)	
51-215	24811-24823	ActiveRecord	
51-216	24823-24824	:	
51-217	24824-24825	:	
51-218	24825-24843	ConnectionAdapters	
51-219	24843-24844	:	
51-220	24844-24845	:	
51-221	24845-24862	PostgreSQLAdapter	
51-222	24862-24863	#	
51-223	24863-24876	exec_no_cache	
51-224	24877-24881	1338	
51-225	24882-24883	(	
51-226	24883-24887	7.9%	
51-227	24887-24888	)	
51-228	24889-24892	640	
51-229	24893-24894	(	
51-230	24894-24898	3.8%	
51-231	24898-24899	)	
51-232	24900-24912	ActiveRecord	
51-233	24912-24913	:	
51-234	24913-24914	:	
51-235	24914-24932	ConnectionAdapters	
51-236	24932-24933	:	
51-237	24933-24934	:	
51-238	24934-24944	PostgreSQL	
51-239	24944-24945	:	
51-240	24945-24946	:	
51-241	24946-24964	DatabaseStatements	
51-242	24964-24965	#	
51-243	24965-24972	execute	
51-244	24973-24977	3125	
51-245	24978-24979	(	
51-246	24979-24984	18.3%	
51-247	24984-24985	)	
51-248	24986-24989	394	
51-249	24990-24991	(	
51-250	24991-24995	2.3%	
51-251	24995-24996	)	
51-252	24997-25006	Sprockets	
51-253	25006-25007	:	
51-254	25007-25008	:	
51-255	25008-25013	Cache	
51-256	25013-25014	:	
51-257	25014-25015	:	
51-258	25015-25024	FileStore	
51-259	25024-25025	#	
51-260	25025-25034	safe_open	
51-261	25035-25038	913	
51-262	25039-25040	(	
51-263	25040-25044	5.4%	
51-264	25044-25045	)	
51-265	25046-25049	301	
51-266	25050-25051	(	
51-267	25051-25055	1.8%	
51-268	25055-25056	)	
51-269	25057-25069	ActiveRecord	
51-270	25069-25070	:	
51-271	25070-25071	:	
51-272	25071-25089	ConnectionAdapters	
51-273	25089-25090	:	
51-274	25090-25091	:	
51-275	25091-25108	PostgreSQLAdapter	
51-276	25108-25109	#	
51-277	25109-25119	exec_cache	
51-278	25120-25123	288	
51-279	25124-25125	(	
51-280	25125-25129	1.7%	
51-281	25129-25130	)	
51-282	25131-25134	288	
51-283	25135-25136	(	
51-284	25136-25140	1.7%	
51-285	25140-25141	)	
51-286	25142-25154	ActiveRecord	
51-287	25154-25155	:	
51-288	25155-25156	:	
51-289	25156-25165	Attribute	
51-290	25165-25166	#	
51-291	25166-25176	initialize	
51-292	25177-25180	246	
51-293	25181-25182	(	
51-294	25182-25186	1.4%	
51-295	25186-25187	)	
51-296	25188-25191	246	
51-297	25192-25193	(	
51-298	25193-25197	1.4%	
51-299	25197-25198	)	
51-300	25199-25208	Sprockets	
51-301	25208-25209	:	
51-302	25209-25210	:	
51-303	25210-25215	Cache	
51-304	25215-25216	:	
51-305	25216-25217	:	
51-306	25217-25226	FileStore	
51-307	25226-25227	#	
51-308	25227-25236	safe_stat	
51-309	25237-25240	295	
51-310	25241-25242	(	
51-311	25242-25246	1.7%	
51-312	25246-25247	)	
51-313	25248-25251	193	
51-314	25252-25253	(	
51-315	25253-25257	1.1%	
51-316	25257-25258	)	
51-317	25259-25264	block	
51-318	25265-25266	(	
51-319	25266-25267	2	
51-320	25268-25274	levels	
51-321	25274-25275	)	
51-322	25276-25278	in	
51-323	25279-25294	class_attribute	
51-324	25295-25298	187	
51-325	25299-25300	(	
51-326	25300-25304	1.1%	
51-327	25304-25305	)	
51-328	25306-25309	187	
51-329	25310-25311	(	
51-330	25311-25315	1.1%	
51-331	25315-25316	)	
51-332	25317-25322	block	
51-333	25323-25324	(	
51-334	25324-25325	4	
51-335	25326-25332	levels	
51-336	25332-25333	)	
51-337	25334-25336	in	
51-338	25337-25352	class_attribute	
51-339	25353-25356	You	
51-340	25357-25360	can	
51-341	25361-25366	limit	
51-342	25367-25370	the	
51-343	25371-25376	specs	
51-344	25377-25381	that	
51-345	25382-25385	are	
51-346	25386-25389	run	
51-347	25390-25392	by	
51-348	25393-25400	passing	
51-349	25401-25404	any	
51-350	25405-25414	arguments	
51-351	25415-25420	rspec	
51-352	25421-25426	would	
51-353	25427-25435	normally	
51-354	25436-25440	take	
51-355	25440-25441	.	

#Text=The output is sorted by the Samples column by default.
52-1	25442-25445	The	
52-2	25446-25452	output	
52-3	25453-25455	is	
52-4	25456-25462	sorted	
52-5	25463-25465	by	
52-6	25466-25469	the	
52-7	25470-25477	Samples	
52-8	25478-25484	column	
52-9	25485-25487	by	
52-10	25488-25495	default	
52-11	25495-25496	.	

#Text=This is the number of
#Text=samples taken where the method is the one currently being executed.
53-1	25497-25501	This	
53-2	25502-25504	is	
53-3	25505-25508	the	
53-4	25509-25515	number	
53-5	25516-25518	of	
53-6	25519-25526	samples	
53-7	25527-25532	taken	
53-8	25533-25538	where	
53-9	25539-25542	the	
53-10	25543-25549	method	
53-11	25550-25552	is	
53-12	25553-25556	the	
53-13	25557-25560	one	
53-14	25561-25570	currently	
53-15	25571-25576	being	
53-16	25577-25585	executed	
53-17	25585-25586	.	

#Text=The Total
#Text=column shows the number of samples taken where the method, or any of the methods
#Text=it calls, were being executed.
54-1	25587-25590	The	
54-2	25591-25596	Total	
54-3	25597-25603	column	
54-4	25604-25609	shows	
54-5	25610-25613	the	
54-6	25614-25620	number	
54-7	25621-25623	of	
54-8	25624-25631	samples	
54-9	25632-25637	taken	
54-10	25638-25643	where	
54-11	25644-25647	the	
54-12	25648-25654	method	
54-13	25654-25655	,	
54-14	25656-25658	or	
54-15	25659-25662	any	
54-16	25663-25665	of	
54-17	25666-25669	the	
54-18	25670-25677	methods	
54-19	25678-25680	it	
54-20	25681-25686	calls	
54-21	25686-25687	,	
54-22	25688-25692	were	
54-23	25693-25698	being	
54-24	25699-25707	executed	
54-25	25707-25708	.	

#Text=To create a graphical view of the call stack:
#Text=stackprof tmp/project_policy_spec.rb.dump --graphviz > project_policy_spec.dot
#Text=dot -Tsvg project_policy_spec.dot > project_policy_spec.svg
#Text=To load the profile in KCachegrind:
#Text=stackprof tmp/project_policy_spec.rb.dump --callgrind > project_policy_spec.callgrind
#Text=kcachegrind project_policy_spec.callgrind # Linux
#Text=qcachegrind project_policy_spec.callgrind # Mac
#Text=For flame graphs, enable raw collection first.
55-1	25709-25711	To	
55-2	25712-25718	create	
55-3	25719-25720	a	
55-4	25721-25730	graphical	
55-5	25731-25735	view	
55-6	25736-25738	of	
55-7	25739-25742	the	
55-8	25743-25747	call	
55-9	25748-25753	stack	
55-10	25753-25754	:	
55-11	25755-25764	stackprof	
55-12	25765-25768	tmp	
55-13	25768-25769	/	
55-14	25769-25796	project_policy_spec.rb.dump	
55-15	25797-25798	-	
55-16	25798-25799	-	
55-17	25799-25807	graphviz	
55-18	25808-25809	>	
55-19	25810-25833	project_policy_spec.dot	
55-20	25834-25837	dot	
55-21	25838-25839	-	
55-22	25839-25843	Tsvg	
55-23	25844-25867	project_policy_spec.dot	
55-24	25868-25869	>	
55-25	25870-25893	project_policy_spec.svg	
55-26	25894-25896	To	
55-27	25897-25901	load	
55-28	25902-25905	the	
55-29	25906-25913	profile	
55-30	25914-25916	in	
55-31	25917-25928	KCachegrind	
55-32	25928-25929	:	
55-33	25930-25939	stackprof	
55-34	25940-25943	tmp	
55-35	25943-25944	/	
55-36	25944-25971	project_policy_spec.rb.dump	
55-37	25972-25973	-	
55-38	25973-25974	-	
55-39	25974-25983	callgrind	
55-40	25984-25985	>	
55-41	25986-26015	project_policy_spec.callgrind	
55-42	26016-26027	kcachegrind	
55-43	26028-26057	project_policy_spec.callgrind	
55-44	26058-26059	#	
55-45	26060-26065	Linux	
55-46	26066-26077	qcachegrind	
55-47	26078-26107	project_policy_spec.callgrind	
55-48	26108-26109	#	
55-49	26110-26113	Mac	
55-50	26114-26117	For	
55-51	26118-26123	flame	
55-52	26124-26130	graphs	
55-53	26130-26131	,	
55-54	26132-26138	enable	
55-55	26139-26142	raw	
55-56	26143-26153	collection	
55-57	26154-26159	first	
55-58	26159-26160	.	

#Text=Note that raw
#Text=collection can generate a very large file, so increase the INTERVAL, or
#Text=run on a smaller number of specs for smaller file size:
#Text=RAW=true bin/rspec-stackprof spec/policies/group_member_policy_spec.rb
#Text=You can then generate, and view the resultant flame graph.
56-1	26161-26165	Note	
56-2	26166-26170	that	
56-3	26171-26174	raw	
56-4	26175-26185	collection	
56-5	26186-26189	can	
56-6	26190-26198	generate	
56-7	26199-26200	a	
56-8	26201-26205	very	
56-9	26206-26211	large	
56-10	26212-26216	file	
56-11	26216-26217	,	
56-12	26218-26220	so	
56-13	26221-26229	increase	
56-14	26230-26233	the	
56-15	26234-26242	INTERVAL	
56-16	26242-26243	,	
56-17	26244-26246	or	
56-18	26247-26250	run	
56-19	26251-26253	on	
56-20	26254-26255	a	
56-21	26256-26263	smaller	
56-22	26264-26270	number	
56-23	26271-26273	of	
56-24	26274-26279	specs	
56-25	26280-26283	for	
56-26	26284-26291	smaller	
56-27	26292-26296	file	
56-28	26297-26301	size	
56-29	26301-26302	:	
56-30	26303-26306	RAW	
56-31	26306-26307	=	
56-32	26307-26311	true	
56-33	26312-26315	bin	
56-34	26315-26316	/	
56-35	26316-26331	rspec-stackprof	
56-36	26332-26336	spec	
56-37	26336-26337	/	
56-38	26337-26345	policies	
56-39	26345-26346	/	
56-40	26346-26373	group_member_policy_spec.rb	
56-41	26374-26377	You	
56-42	26378-26381	can	
56-43	26382-26386	then	
56-44	26387-26395	generate	
56-45	26395-26396	,	
56-46	26397-26400	and	
56-47	26401-26405	view	
56-48	26406-26409	the	
56-49	26410-26419	resultant	
56-50	26420-26425	flame	
56-51	26426-26431	graph	
56-52	26431-26432	.	

#Text=It might take a
#Text=while to generate based on the output file size:
#Text=# Generate
#Text=stackprof --flamegraph tmp/group_member_policy_spec.rb.dump > group_member_policy_spec.flame
#Text=# View
#Text=stackprof --flamegraph-viewer=group_member_policy_spec.flame
#Text=It may be useful to zoom in on a specific method, for example:
#Text=$ stackprof tmp/project_policy_spec.rb.dump --method warm_asset_cache
#Text=TestEnv#warm_asset_cache (/Users/lupine/dev/gitlab.com/gitlab-org/gitlab-development-kit/gitlab/spec/support/test_env.rb:164)
#Text=samples:
#Text=0 self (0.0%)
#Text=6288 total (36.9%)
#Text=callers:
#Text=6288
#Text=100.0%)
#Text=block (2 levels) in <top (required)>
#Text=callees (6288 total):
#Text=6288
#Text=100.0%)
#Text=Capybara::RackTest::Driver#visit
#Text=code:
#Text=164
#Text=def warm_asset_cache
#Text=165
#Text=return if warm_asset_cache?
57-1	26433-26435	It	
57-2	26436-26441	might	
57-3	26442-26446	take	
57-4	26447-26448	a	
57-5	26449-26454	while	
57-6	26455-26457	to	
57-7	26458-26466	generate	
57-8	26467-26472	based	
57-9	26473-26475	on	
57-10	26476-26479	the	
57-11	26480-26486	output	
57-12	26487-26491	file	
57-13	26492-26496	size	
57-14	26496-26497	:	
57-15	26498-26499	#	
57-16	26500-26508	Generate	
57-17	26509-26518	stackprof	
57-18	26519-26520	-	
57-19	26520-26521	-	
57-20	26521-26531	flamegraph	
57-21	26532-26535	tmp	
57-22	26535-26536	/	
57-23	26536-26568	group_member_policy_spec.rb.dump	
57-24	26569-26570	>	
57-25	26571-26601	group_member_policy_spec.flame	
57-26	26602-26603	#	
57-27	26604-26608	View	
57-28	26609-26618	stackprof	
57-29	26619-26620	-	
57-30	26620-26621	-	
57-31	26621-26638	flamegraph-viewer	
57-32	26638-26639	=	
57-33	26639-26669	group_member_policy_spec.flame	
57-34	26670-26672	It	
57-35	26673-26676	may	
57-36	26677-26679	be	
57-37	26680-26686	useful	
57-38	26687-26689	to	
57-39	26690-26694	zoom	
57-40	26695-26697	in	
57-41	26698-26700	on	
57-42	26701-26702	a	
57-43	26703-26711	specific	
57-44	26712-26718	method	
57-45	26718-26719	,	
57-46	26720-26723	for	
57-47	26724-26731	example	
57-48	26731-26732	:	
57-49	26733-26734	$	
57-50	26735-26744	stackprof	
57-51	26745-26748	tmp	
57-52	26748-26749	/	
57-53	26749-26776	project_policy_spec.rb.dump	
57-54	26777-26778	-	
57-55	26778-26779	-	
57-56	26779-26785	method	
57-57	26786-26802	warm_asset_cache	
57-58	26803-26810	TestEnv	
57-59	26810-26811	#	
57-60	26811-26827	warm_asset_cache	
57-61	26828-26829	(	
57-62	26829-26830	/	
57-63	26830-26835	Users	
57-64	26835-26836	/	
57-65	26836-26842	lupine	
57-66	26842-26843	/	
57-67	26843-26846	dev	
57-68	26846-26847	/	
57-69	26847-26857	gitlab.com	
57-70	26857-26858	/	
57-71	26858-26868	gitlab-org	
57-72	26868-26869	/	
57-73	26869-26891	gitlab-development-kit	
57-74	26891-26892	/	
57-75	26892-26898	gitlab	
57-76	26898-26899	/	
57-77	26899-26903	spec	
57-78	26903-26904	/	
57-79	26904-26911	support	
57-80	26911-26912	/	
57-81	26912-26923	test_env.rb	
57-82	26923-26924	:	
57-83	26924-26927	164	
57-84	26927-26928	)	
57-85	26929-26936	samples	
57-86	26936-26937	:	
57-87	26938-26939	0	
57-88	26940-26944	self	
57-89	26945-26946	(	
57-90	26946-26950	0.0%	
57-91	26950-26951	)	
57-92	26952-26956	6288	
57-93	26957-26962	total	
57-94	26963-26964	(	
57-95	26964-26969	36.9%	
57-96	26969-26970	)	
57-97	26971-26978	callers	
57-98	26978-26979	:	
57-99	26980-26984	6288	
57-100	26985-26991	100.0%	
57-101	26991-26992	)	
57-102	26993-26998	block	
57-103	26999-27000	(	
57-104	27000-27001	2	
57-105	27002-27008	levels	
57-106	27008-27009	)	
57-107	27010-27012	in	
57-108	27013-27014	<	
57-109	27014-27017	top	
57-110	27018-27019	(	
57-111	27019-27027	required	
57-112	27027-27028	)	
57-113	27028-27029	>	
57-114	27030-27037	callees	
57-115	27038-27039	(	
57-116	27039-27043	6288	
57-117	27044-27049	total	
57-118	27049-27050	)	
57-119	27050-27051	:	
57-120	27052-27056	6288	
57-121	27057-27063	100.0%	
57-122	27063-27064	)	
57-123	27065-27073	Capybara	
57-124	27073-27074	:	
57-125	27074-27075	:	
57-126	27075-27083	RackTest	
57-127	27083-27084	:	
57-128	27084-27085	:	
57-129	27085-27091	Driver	
57-130	27091-27092	#	
57-131	27092-27097	visit	
57-132	27098-27102	code	
57-133	27102-27103	:	
57-134	27104-27107	164	
57-135	27108-27111	def	
57-136	27112-27128	warm_asset_cache	
57-137	27129-27132	165	
57-138	27133-27139	return	
57-139	27140-27142	if	
57-140	27143-27159	warm_asset_cache	
57-141	27159-27160	?	

#Text=166
#Text=return unless defined?
58-1	27161-27164	166	
58-2	27165-27171	return	
58-3	27172-27178	unless	
58-4	27179-27186	defined	
58-5	27186-27187	?	

#Text=(Capybara)
#Text=167
#Text=6288
#Text=(36.9%)
#Text=168
#Text=Capybara.current_session.driver.visit '/'
#Text=169
#Text=end
#Text=$ stackprof tmp/project_policy_spec.rb.dump --method BasePolicy#abilities
#Text=BasePolicy#abilities (/Users/lupine/dev/gitlab.com/gitlab-org/gitlab-development-kit/gitlab/app/policies/base_policy.rb:79)
#Text=samples:
#Text=0 self (0.0%)
#Text=50 total (0.3%)
#Text=callers:
#Text=50.0%)
#Text=BasePolicy.abilities
#Text=50.0%)
#Text=BasePolicy#collect_rules
#Text=callees (50 total):
#Text=50.0%)
#Text=ProjectPolicy#rules
#Text=50.0%)
#Text=BasePolicy#collect_rules
#Text=code:
#Text=def abilities
#Text=return RuleSet.empty if @user && @user.blocked?
59-1	27187-27188	(	
59-2	27188-27196	Capybara	
59-3	27196-27197	)	
59-4	27198-27201	167	
59-5	27202-27206	6288	
59-6	27207-27208	(	
59-7	27208-27213	36.9%	
59-8	27213-27214	)	
59-9	27215-27218	168	
59-10	27219-27256	Capybara.current_session.driver.visit	
59-11	27257-27258	'	
59-12	27258-27259	/	
59-13	27259-27260	'	
59-14	27261-27264	169	
59-15	27265-27268	end	
59-16	27269-27270	$	
59-17	27271-27280	stackprof	
59-18	27281-27284	tmp	
59-19	27284-27285	/	
59-20	27285-27312	project_policy_spec.rb.dump	
59-21	27313-27314	-	
59-22	27314-27315	-	
59-23	27315-27321	method	
59-24	27322-27332	BasePolicy	
59-25	27332-27333	#	
59-26	27333-27342	abilities	
59-27	27343-27353	BasePolicy	
59-28	27353-27354	#	
59-29	27354-27363	abilities	
59-30	27364-27365	(	
59-31	27365-27366	/	
59-32	27366-27371	Users	
59-33	27371-27372	/	
59-34	27372-27378	lupine	
59-35	27378-27379	/	
59-36	27379-27382	dev	
59-37	27382-27383	/	
59-38	27383-27393	gitlab.com	
59-39	27393-27394	/	
59-40	27394-27404	gitlab-org	
59-41	27404-27405	/	
59-42	27405-27427	gitlab-development-kit	
59-43	27427-27428	/	
59-44	27428-27434	gitlab	
59-45	27434-27435	/	
59-46	27435-27438	app	
59-47	27438-27439	/	
59-48	27439-27447	policies	
59-49	27447-27448	/	
59-50	27448-27462	base_policy.rb	
59-51	27462-27463	:	
59-52	27463-27465	79	
59-53	27465-27466	)	
59-54	27467-27474	samples	
59-55	27474-27475	:	
59-56	27476-27477	0	
59-57	27478-27482	self	
59-58	27483-27484	(	
59-59	27484-27488	0.0%	
59-60	27488-27489	)	
59-61	27490-27492	50	
59-62	27493-27498	total	
59-63	27499-27500	(	
59-64	27500-27504	0.3%	
59-65	27504-27505	)	
59-66	27506-27513	callers	
59-67	27513-27514	:	
59-68	27515-27520	50.0%	
59-69	27520-27521	)	
59-70	27522-27542	BasePolicy.abilities	
59-71	27543-27548	50.0%	
59-72	27548-27549	)	
59-73	27550-27560	BasePolicy	
59-74	27560-27561	#	
59-75	27561-27574	collect_rules	
59-76	27575-27582	callees	
59-77	27583-27584	(	
59-78	27584-27586	50	
59-79	27587-27592	total	
59-80	27592-27593	)	
59-81	27593-27594	:	
59-82	27595-27600	50.0%	
59-83	27600-27601	)	
59-84	27602-27615	ProjectPolicy	
59-85	27615-27616	#	
59-86	27616-27621	rules	
59-87	27622-27627	50.0%	
59-88	27627-27628	)	
59-89	27629-27639	BasePolicy	
59-90	27639-27640	#	
59-91	27640-27653	collect_rules	
59-92	27654-27658	code	
59-93	27658-27659	:	
59-94	27660-27663	def	
59-95	27664-27673	abilities	
59-96	27674-27680	return	
59-97	27681-27694	RuleSet.empty	
59-98	27695-27697	if	
59-99	27698-27699	@	
59-100	27699-27703	user	
59-101	27704-27705	&	
59-102	27705-27706	&	
59-103	27707-27708	@	
59-104	27708-27720	user.blocked	
59-105	27720-27721	?	

#Text=return anonymous_abilities if @user.nil?
60-1	27722-27728	return	
60-2	27729-27748	anonymous_abilities	
60-3	27749-27751	if	
60-4	27752-27753	@	
60-5	27753-27761	user.nil	
60-6	27761-27762	?	

#Text=(0.3%)
#Text=collect_rules { rules }
#Text=end
#Text=Since the profile includes the work done by the test suite as well as the
#Text=application code, these profiles can be used to investigate slow tests as well.
61-1	27763-27764	(	
61-2	27764-27768	0.3%	
61-3	27768-27769	)	
61-4	27770-27783	collect_rules	
61-5	27784-27785	{	
61-6	27786-27791	rules	
61-7	27792-27793	}	
61-8	27794-27797	end	
61-9	27798-27803	Since	
61-10	27804-27807	the	
61-11	27808-27815	profile	
61-12	27816-27824	includes	
61-13	27825-27828	the	
61-14	27829-27833	work	
61-15	27834-27838	done	
61-16	27839-27841	by	
61-17	27842-27845	the	
61-18	27846-27850	test	
61-19	27851-27856	suite	
61-20	27857-27859	as	
61-21	27860-27864	well	
61-22	27865-27867	as	
61-23	27868-27871	the	
61-24	27872-27883	application	
61-25	27884-27888	code	
61-26	27888-27889	,	
61-27	27890-27895	these	
61-28	27896-27904	profiles	
61-29	27905-27908	can	
61-30	27909-27911	be	
61-31	27912-27916	used	
61-32	27917-27919	to	
61-33	27920-27931	investigate	
61-34	27932-27936	slow	
61-35	27937-27942	tests	
61-36	27943-27945	as	
61-37	27946-27950	well	
61-38	27950-27951	.	

#Text=However, for smaller runs (like this example), this means that the cost of
#Text=setting up the test suite tends to dominate.
62-1	27952-27959	However	
62-2	27959-27960	,	
62-3	27961-27964	for	
62-4	27965-27972	smaller	
62-5	27973-27977	runs	
62-6	27978-27979	(	
62-7	27979-27983	like	
62-8	27984-27988	this	
62-9	27989-27996	example	
62-10	27996-27997	)	
62-11	27997-27998	,	
62-12	27999-28003	this	
62-13	28004-28009	means	
62-14	28010-28014	that	
62-15	28015-28018	the	
62-16	28019-28023	cost	
62-17	28024-28026	of	
62-18	28027-28034	setting	
62-19	28035-28037	up	
62-20	28038-28041	the	
62-21	28042-28046	test	
62-22	28047-28052	suite	
62-23	28053-28058	tends	
62-24	28059-28061	to	
62-25	28062-28070	dominate	
62-26	28070-28071	.	

#Text=Production
#Text=Stackprof can also be used to profile production workloads.
63-1	28072-28082	Production	
63-2	28083-28092	Stackprof	
63-3	28093-28096	can	
63-4	28097-28101	also	
63-5	28102-28104	be	
63-6	28105-28109	used	
63-7	28110-28112	to	
63-8	28113-28120	profile	
63-9	28121-28131	production	
63-10	28132-28141	workloads	
63-11	28141-28142	.	

#Text=In order to enable production profiling for Ruby processes, you can set the STACKPROF_ENABLED environment variable to true.
64-1	28143-28145	In	
64-2	28146-28151	order	
64-3	28152-28154	to	
64-4	28155-28161	enable	
64-5	28162-28172	production	
64-6	28173-28182	profiling	
64-7	28183-28186	for	
64-8	28187-28191	Ruby	
64-9	28192-28201	processes	
64-10	28201-28202	,	
64-11	28203-28206	you	
64-12	28207-28210	can	
64-13	28211-28214	set	
64-14	28215-28218	the	
64-15	28219-28236	STACKPROF_ENABLED	
64-16	28237-28248	environment	
64-17	28249-28257	variable	
64-18	28258-28260	to	
64-19	28261-28265	true	
64-20	28265-28266	.	

#Text=The following configuration options can be configured:
#Text=STACKPROF_ENABLED: Enables Stackprof signal handler on SIGUSR2 signal.
65-1	28267-28270	The	
65-2	28271-28280	following	
65-3	28281-28294	configuration	
65-4	28295-28302	options	
65-5	28303-28306	can	
65-6	28307-28309	be	
65-7	28310-28320	configured	
65-8	28320-28321	:	
65-9	28322-28339	STACKPROF_ENABLED	
65-10	28339-28340	:	
65-11	28341-28348	Enables	
65-12	28349-28358	Stackprof	
65-13	28359-28365	signal	
65-14	28366-28373	handler	
65-15	28374-28376	on	
65-16	28377-28384	SIGUSR2	
65-17	28385-28391	signal	
65-18	28391-28392	.	

#Text=Defaults to false.
66-1	28393-28401	Defaults	
66-2	28402-28404	to	
66-3	28405-28410	false	
66-4	28410-28411	.	

#Text=STACKPROF_MODE: See sampling modes.
67-1	28412-28426	STACKPROF_MODE	
67-2	28426-28427	:	
67-3	28428-28431	See	
67-4	28432-28440	sampling	
67-5	28441-28446	modes	
67-6	28446-28447	.	

#Text=Defaults to cpu.
68-1	28448-28456	Defaults	
68-2	28457-28459	to	
68-3	28460-28463	cpu	
68-4	28463-28464	.	

#Text=STACKPROF_INTERVAL: Sampling interval.
69-1	28465-28483	STACKPROF_INTERVAL	
69-2	28483-28484	:	
69-3	28485-28493	Sampling	
69-4	28494-28502	interval	
69-5	28502-28503	.	

#Text=Unit semantics depend on STACKPROF_MODE.
70-1	28504-28508	Unit	
70-2	28509-28518	semantics	
70-3	28519-28525	depend	
70-4	28526-28528	on	
70-5	28529-28543	STACKPROF_MODE	
70-6	28543-28544	.	

#Text=For object mode this is a per-event interval (every nth event is sampled)
#Text=and defaults to 1000.
71-1	28545-28548	For	
71-2	28549-28555	object	
71-3	28556-28560	mode	
71-4	28561-28565	this	
71-5	28566-28568	is	
71-6	28569-28570	a	
71-7	28571-28580	per-event	
71-8	28581-28589	interval	
71-9	28590-28591	(	
71-10	28591-28596	every	
71-11	28597-28600	nth	
71-12	28601-28606	event	
71-13	28607-28609	is	
71-14	28610-28617	sampled	
71-15	28617-28618	)	
71-16	28619-28622	and	
71-17	28623-28631	defaults	
71-18	28632-28634	to	
71-19	28635-28639	1000	
71-20	28639-28640	.	

#Text=For other modes such as cpu this is a frequency and defaults to 10000 μs (100hz).
72-1	28641-28644	For	
72-2	28645-28650	other	
72-3	28651-28656	modes	
72-4	28657-28661	such	
72-5	28662-28664	as	
72-6	28665-28668	cpu	
72-7	28669-28673	this	
72-8	28674-28676	is	
72-9	28677-28678	a	
72-10	28679-28688	frequency	
72-11	28689-28692	and	
72-12	28693-28701	defaults	
72-13	28702-28704	to	
72-14	28705-28710	10000	
72-15	28711-28713	μs	
72-16	28714-28715	(	
72-17	28715-28720	100hz	
72-18	28720-28721	)	
72-19	28721-28722	.	

#Text=STACKPROF_FILE_PREFIX: File path prefix where profiles are stored.
73-1	28723-28744	STACKPROF_FILE_PREFIX	
73-2	28744-28745	:	
73-3	28746-28750	File	
73-4	28751-28755	path	
73-5	28756-28762	prefix	
73-6	28763-28768	where	
73-7	28769-28777	profiles	
73-8	28778-28781	are	
73-9	28782-28788	stored	
73-10	28788-28789	.	

#Text=Defaults
#Text=to $TMPDIR (often corresponds to /tmp).
74-1	28790-28798	Defaults	
74-2	28799-28801	to	
74-3	28802-28803	$	
74-4	28803-28809	TMPDIR	
74-5	28810-28811	(	
74-6	28811-28816	often	
74-7	28817-28828	corresponds	
74-8	28829-28831	to	
74-9	28832-28833	/	
74-10	28833-28836	tmp	
74-11	28836-28837	)	
74-12	28837-28838	.	

#Text=STACKPROF_TIMEOUT_S: Profiling timeout in seconds.
75-1	28839-28858	STACKPROF_TIMEOUT_S	
75-2	28858-28859	:	
75-3	28860-28869	Profiling	
75-4	28870-28877	timeout	
75-5	28878-28880	in	
75-6	28881-28888	seconds	
75-7	28888-28889	.	

#Text=Profiling will
#Text=automatically stop after this time has elapsed.
76-1	28890-28899	Profiling	
76-2	28900-28904	will	
76-3	28905-28918	automatically	
76-4	28919-28923	stop	
76-5	28924-28929	after	
76-6	28930-28934	this	
76-7	28935-28939	time	
76-8	28940-28943	has	
76-9	28944-28951	elapsed	
76-10	28951-28952	.	

#Text=Defaults to 30.
77-1	28953-28961	Defaults	
77-2	28962-28964	to	
77-3	28965-28967	30	
77-4	28967-28968	.	

#Text=STACKPROF_RAW: Whether to collect raw samples or only aggregates.
78-1	28969-28982	STACKPROF_RAW	
78-2	28982-28983	:	
78-3	28984-28991	Whether	
78-4	28992-28994	to	
78-5	28995-29002	collect	
78-6	29003-29006	raw	
78-7	29007-29014	samples	
78-8	29015-29017	or	
78-9	29018-29022	only	
78-10	29023-29033	aggregates	
78-11	29033-29034	.	

#Text=Raw
#Text=samples are needed to generate flame graphs, but they do have a higher memory
#Text=and disk overhead.
79-1	29035-29038	Raw	
79-2	29039-29046	samples	
79-3	29047-29050	are	
79-4	29051-29057	needed	
79-5	29058-29060	to	
79-6	29061-29069	generate	
79-7	29070-29075	flame	
79-8	29076-29082	graphs	
79-9	29082-29083	,	
79-10	29084-29087	but	
79-11	29088-29092	they	
79-12	29093-29095	do	
79-13	29096-29100	have	
79-14	29101-29102	a	
79-15	29103-29109	higher	
79-16	29110-29116	memory	
79-17	29117-29120	and	
79-18	29121-29125	disk	
79-19	29126-29134	overhead	
79-20	29134-29135	.	

#Text=Defaults to true.
80-1	29136-29144	Defaults	
80-2	29145-29147	to	
80-3	29148-29152	true	
80-4	29152-29153	.	

#Text=Once enabled, profiling can be triggered by sending a SIGUSR2 signal to the
#Text=Ruby process.
81-1	29154-29158	Once	
81-2	29159-29166	enabled	
81-3	29166-29167	,	
81-4	29168-29177	profiling	
81-5	29178-29181	can	
81-6	29182-29184	be	
81-7	29185-29194	triggered	
81-8	29195-29197	by	
81-9	29198-29205	sending	
81-10	29206-29207	a	
81-11	29208-29215	SIGUSR2	
81-12	29216-29222	signal	
81-13	29223-29225	to	
81-14	29226-29229	the	
81-15	29230-29234	Ruby	
81-16	29235-29242	process	
81-17	29242-29243	.	

#Text=The process begins sampling stacks.
82-1	29244-29247	The	
82-2	29248-29255	process	
82-3	29256-29262	begins	
82-4	29263-29271	sampling	
82-5	29272-29278	stacks	
82-6	29278-29279	.	

#Text=Profiling can be stopped
#Text=by sending another SIGUSR2.
83-1	29280-29289	Profiling	
83-2	29290-29293	can	
83-3	29294-29296	be	
83-4	29297-29304	stopped	
83-5	29305-29307	by	
83-6	29308-29315	sending	
83-7	29316-29323	another	
83-8	29324-29331	SIGUSR2	
83-9	29331-29332	.	

#Text=Alternatively, it stops automatically after
#Text=the timeout.
84-1	29333-29346	Alternatively	
84-2	29346-29347	,	
84-3	29348-29350	it	
84-4	29351-29356	stops	
84-5	29357-29370	automatically	
84-6	29371-29376	after	
84-7	29377-29380	the	
84-8	29381-29388	timeout	
84-9	29388-29389	.	

#Text=Once profiling stops, the profile is written out to disk at
#Text=$STACKPROF_FILE_PREFIX/stackprof.
85-1	29390-29394	Once	
85-2	29395-29404	profiling	
85-3	29405-29410	stops	
85-4	29410-29411	,	
85-5	29412-29415	the	
85-6	29416-29423	profile	
85-7	29424-29426	is	
85-8	29427-29434	written	
85-9	29435-29438	out	
85-10	29439-29441	to	
85-11	29442-29446	disk	
85-12	29447-29449	at	
85-13	29450-29451	$	
85-14	29451-29472	STACKPROF_FILE_PREFIX	
85-15	29472-29473	/	
85-16	29473-29482	stackprof	
85-17	29482-29483	.	

#Text=$PID.
86-1	29483-29484	$	
86-2	29484-29487	PID	
86-3	29487-29488	.	

#Text=$RAND.profile.
87-1	29488-29489	$	
87-2	29489-29501	RAND.profile	
87-3	29501-29502	.	

#Text=It can then be inspected
#Text=further via the stackprof command line tool, as described in the previous
#Text=section.
88-1	29503-29505	It	
88-2	29506-29509	can	
88-3	29510-29514	then	
88-4	29515-29517	be	
88-5	29518-29527	inspected	
88-6	29528-29535	further	
88-7	29536-29539	via	
88-8	29540-29543	the	
88-9	29544-29553	stackprof	
88-10	29554-29561	command	
88-11	29562-29566	line	
88-12	29567-29571	tool	
88-13	29571-29572	,	
88-14	29573-29575	as	
88-15	29576-29585	described	
88-16	29586-29588	in	
88-17	29589-29592	the	
88-18	29593-29601	previous	
88-19	29602-29609	section	
88-20	29609-29610	.	

#Text=Currently supported profiling targets are:
#Text=Puma worker
#Text=Sidekiq
#Text=noteThe Puma master process is not supported.
89-1	29611-29620	Currently	
89-2	29621-29630	supported	
89-3	29631-29640	profiling	
89-4	29641-29648	targets	
89-5	29649-29652	are	
89-6	29652-29653	:	
89-7	29654-29658	Puma	
89-8	29659-29665	worker	
89-9	29666-29673	Sidekiq	
89-10	29674-29681	noteThe	
89-11	29682-29686	Puma	
89-12	29687-29693	master	
89-13	29694-29701	process	
89-14	29702-29704	is	
89-15	29705-29708	not	
89-16	29709-29718	supported	
89-17	29718-29719	.	

#Text=Neither is Unicorn.
90-1	29720-29727	Neither	
90-2	29728-29730	is	
90-3	29731-29738	Unicorn	
90-4	29738-29739	.	

#Text=Sending SIGUSR2 to either of those triggers restarts.
91-1	29740-29747	Sending	
91-2	29748-29755	SIGUSR2	
91-3	29756-29758	to	
91-4	29759-29765	either	
91-5	29766-29768	of	
91-6	29769-29774	those	
91-7	29775-29783	triggers	
91-8	29784-29792	restarts	
91-9	29792-29793	.	

#Text=In the case of Puma,
#Text=take care to only send the signal to Puma workers.
92-1	29794-29796	In	
92-2	29797-29800	the	
92-3	29801-29805	case	
92-4	29806-29808	of	
92-5	29809-29813	Puma	
92-6	29813-29814	,	
92-7	29815-29819	take	
92-8	29820-29824	care	
92-9	29825-29827	to	
92-10	29828-29832	only	
92-11	29833-29837	send	
92-12	29838-29841	the	
92-13	29842-29848	signal	
92-14	29849-29851	to	
92-15	29852-29856	Puma	
92-16	29857-29864	workers	
92-17	29864-29865	.	

#Text=This can be done via pkill -USR2 puma:.
93-1	29866-29870	This	
93-2	29871-29874	can	
93-3	29875-29877	be	
93-4	29878-29882	done	
93-5	29883-29886	via	
93-6	29887-29892	pkill	
93-7	29893-29894	-	
93-8	29894-29898	USR2	
93-9	29899-29903	puma	
93-10	29903-29904	:	
93-11	29904-29905	.	

#Text=The : distinguishes between puma
#Text=4.3.3.gitlab.2 ...
94-1	29906-29909	The	
94-2	29910-29911	:	
94-3	29912-29925	distinguishes	
94-4	29926-29933	between	
94-5	29934-29938	puma	
94-6	29939-29944	4.3.3	
94-7	29944-29945	.	
94-8	29945-29951	gitlab	
94-9	29951-29953	.2	
94-10	29954-29955	.	
94-11	29955-29956	.	
94-12	29956-29957	.	

#Text=(the master process) from puma: cluster worker 0: ...
95-1	29958-29959	(	
95-2	29959-29962	the	
95-3	29963-29969	master	
95-4	29970-29977	process	
95-5	29977-29978	)	
95-6	29979-29983	from	
95-7	29984-29988	puma	
95-8	29988-29989	:	
95-9	29990-29997	cluster	
95-10	29998-30004	worker	
95-11	30005-30006	0	
95-12	30006-30007	:	
95-13	30008-30009	.	
95-14	30009-30010	.	
95-15	30010-30011	.	

#Text=(the
#Text=worker processes), selecting the latter.
96-1	30012-30013	(	
96-2	30013-30016	the	
96-3	30017-30023	worker	
96-4	30024-30033	processes	
96-5	30033-30034	)	
96-6	30034-30035	,	
96-7	30036-30045	selecting	
96-8	30046-30049	the	
96-9	30050-30056	latter	
96-10	30056-30057	.	

#Text=For Sidekiq, the signal can be sent to the sidekiq-cluster process via pkill
#Text=-USR2 bin/sidekiq-cluster, which forwards the signal to all Sidekiq
#Text=children.
97-1	30058-30061	For	
97-2	30062-30069	Sidekiq	
97-3	30069-30070	,	
97-4	30071-30074	the	
97-5	30075-30081	signal	
97-6	30082-30085	can	
97-7	30086-30088	be	
97-8	30089-30093	sent	
97-9	30094-30096	to	
97-10	30097-30100	the	
97-11	30101-30116	sidekiq-cluster	
97-12	30117-30124	process	
97-13	30125-30128	via	
97-14	30129-30134	pkill	
97-15	30135-30136	-	
97-16	30136-30140	USR2	
97-17	30141-30144	bin	
97-18	30144-30145	/	
97-19	30145-30160	sidekiq-cluster	
97-20	30160-30161	,	
97-21	30162-30167	which	
97-22	30168-30176	forwards	
97-23	30177-30180	the	
97-24	30181-30187	signal	
97-25	30188-30190	to	
97-26	30191-30194	all	
97-27	30195-30202	Sidekiq	
97-28	30203-30211	children	
97-29	30211-30212	.	

#Text=Alternatively, you can also select a specific PID of interest.
98-1	30213-30226	Alternatively	
98-2	30226-30227	,	
98-3	30228-30231	you	
98-4	30232-30235	can	
98-5	30236-30240	also	
98-6	30241-30247	select	
98-7	30248-30249	a	
98-8	30250-30258	specific	
98-9	30259-30262	PID	
98-10	30263-30265	of	
98-11	30266-30274	interest	
98-12	30274-30275	.	

#Text=Production profiles can be especially noisy.
99-1	30276-30286	Production	
99-2	30287-30295	profiles	
99-3	30296-30299	can	
99-4	30300-30302	be	
99-5	30303-30313	especially	
99-6	30314-30319	noisy	
99-7	30319-30320	.	

#Text=It can be helpful to visualize them
#Text=as a flame graph.
100-1	30321-30323	It	
100-2	30324-30327	can	
100-3	30328-30330	be	
100-4	30331-30338	helpful	
100-5	30339-30341	to	
100-6	30342-30351	visualize	
100-7	30352-30356	them	
100-8	30357-30359	as	
100-9	30360-30361	a	
100-10	30362-30367	flame	
100-11	30368-30373	graph	
100-12	30373-30374	.	

#Text=This can be done
#Text=via:
#Text=bundle exec stackprof --stackcollapse /tmp/stackprof.55769.c6c3906452.profile | flamegraph.pl > flamegraph.svg
#Text=RSpec profiling
#Text=The GitLab development environment also includes the
#Text=rspec_profiling gem, which is used
#Text=to collect data on spec execution times.
101-1	30375-30379	This	
101-2	30380-30383	can	
101-3	30384-30386	be	
101-4	30387-30391	done	
101-5	30392-30395	via	
101-6	30395-30396	:	
101-7	30397-30403	bundle	
101-8	30404-30408	exec	
101-9	30409-30418	stackprof	
101-10	30419-30420	-	
101-11	30420-30421	-	
101-12	30421-30434	stackcollapse	
101-13	30435-30436	/	
101-14	30436-30439	tmp	
101-15	30439-30440	/	
101-16	30440-30449	stackprof	
101-17	30449-30455	.55769	
101-18	30455-30456	.	
101-19	30456-30466	c6c3906452	
101-20	30466-30467	.	
101-21	30467-30474	profile	
101-22	30475-30476	|	
101-23	30477-30490	flamegraph.pl	
101-24	30491-30492	>	
101-25	30493-30507	flamegraph.svg	
101-26	30508-30513	RSpec	
101-27	30514-30523	profiling	
101-28	30524-30527	The	
101-29	30528-30534	GitLab	
101-30	30535-30546	development	
101-31	30547-30558	environment	
101-32	30559-30563	also	
101-33	30564-30572	includes	
101-34	30573-30576	the	
101-35	30577-30592	rspec_profiling	
101-36	30593-30596	gem	
101-37	30596-30597	,	
101-38	30598-30603	which	
101-39	30604-30606	is	
101-40	30607-30611	used	
101-41	30612-30614	to	
101-42	30615-30622	collect	
101-43	30623-30627	data	
101-44	30628-30630	on	
101-45	30631-30635	spec	
101-46	30636-30645	execution	
101-47	30646-30651	times	
101-48	30651-30652	.	

#Text=This is useful for analyzing the
#Text=performance of the test suite itself, or seeing how the performance of a spec
#Text=may have changed over time.
102-1	30653-30657	This	
102-2	30658-30660	is	
102-3	30661-30667	useful	
102-4	30668-30671	for	
102-5	30672-30681	analyzing	
102-6	30682-30685	the	
102-7	30686-30697	performance	
102-8	30698-30700	of	
102-9	30701-30704	the	
102-10	30705-30709	test	
102-11	30710-30715	suite	
102-12	30716-30722	itself	
102-13	30722-30723	,	
102-14	30724-30726	or	
102-15	30727-30733	seeing	
102-16	30734-30737	how	
102-17	30738-30741	the	
102-18	30742-30753	performance	
102-19	30754-30756	of	
102-20	30757-30758	a	
102-21	30759-30763	spec	
102-22	30764-30767	may	
102-23	30768-30772	have	
102-24	30773-30780	changed	
102-25	30781-30785	over	
102-26	30786-30790	time	
102-27	30790-30791	.	

#Text=To activate profiling in your local environment, run the following:
#Text=export RSPEC_PROFILING=yes
#Text=rake rspec_profiling:install
#Text=This creates an SQLite3 database in tmp/rspec_profiling, into which statistics
#Text=are saved every time you run specs with the RSPEC_PROFILING environment
#Text=variable set.
103-1	30792-30794	To	
103-2	30795-30803	activate	
103-3	30804-30813	profiling	
103-4	30814-30816	in	
103-5	30817-30821	your	
103-6	30822-30827	local	
103-7	30828-30839	environment	
103-8	30839-30840	,	
103-9	30841-30844	run	
103-10	30845-30848	the	
103-11	30849-30858	following	
103-12	30858-30859	:	
103-13	30860-30866	export	
103-14	30867-30882	RSPEC_PROFILING	
103-15	30882-30883	=	
103-16	30883-30886	yes	
103-17	30887-30891	rake	
103-18	30892-30907	rspec_profiling	
103-19	30907-30908	:	
103-20	30908-30915	install	
103-21	30916-30920	This	
103-22	30921-30928	creates	
103-23	30929-30931	an	
103-24	30932-30939	SQLite3	
103-25	30940-30948	database	
103-26	30949-30951	in	
103-27	30952-30955	tmp	
103-28	30955-30956	/	
103-29	30956-30971	rspec_profiling	
103-30	30971-30972	,	
103-31	30973-30977	into	
103-32	30978-30983	which	
103-33	30984-30994	statistics	
103-34	30995-30998	are	
103-35	30999-31004	saved	
103-36	31005-31010	every	
103-37	31011-31015	time	
103-38	31016-31019	you	
103-39	31020-31023	run	
103-40	31024-31029	specs	
103-41	31030-31034	with	
103-42	31035-31038	the	
103-43	31039-31054	RSPEC_PROFILING	
103-44	31055-31066	environment	
103-45	31067-31075	variable	
103-46	31076-31079	set	
103-47	31079-31080	.	

#Text=Ad-hoc investigation of the collected results can be performed in an interactive
#Text=shell:
#Text=$ rake rspec_profiling:console
#Text=irb(main):001:0> results.count
#Text==> 231
#Text=irb(main):002:0> results.last.attributes.keys
#Text==> ["id", "commit", "date", "file", "line_number", "description", "time", "status", "exception", "query_count", "query_time", "request_count", "request_time", "created_at", "updated_at"]
#Text=irb(main):003:0> results.where(status: "passed").average(:time).to_s
#Text==> "0.211340155844156"
#Text=These results can also be placed into a PostgreSQL database by setting the
#Text=RSPEC_PROFILING_POSTGRES_URL variable.
104-1	31081-31087	Ad-hoc	
104-2	31088-31101	investigation	
104-3	31102-31104	of	
104-4	31105-31108	the	
104-5	31109-31118	collected	
104-6	31119-31126	results	
104-7	31127-31130	can	
104-8	31131-31133	be	
104-9	31134-31143	performed	
104-10	31144-31146	in	
104-11	31147-31149	an	
104-12	31150-31161	interactive	
104-13	31162-31167	shell	
104-14	31167-31168	:	
104-15	31169-31170	$	
104-16	31171-31175	rake	
104-17	31176-31191	rspec_profiling	
104-18	31191-31192	:	
104-19	31192-31199	console	
104-20	31200-31203	irb	
104-21	31203-31204	(	
104-22	31204-31208	main	
104-23	31208-31209	)	
104-24	31209-31210	:	
104-25	31210-31213	001	
104-26	31213-31214	:	
104-27	31214-31215	0	
104-28	31215-31216	>	
104-29	31217-31230	results.count	
104-30	31231-31232	=	
104-31	31232-31233	>	
104-32	31234-31237	231	
104-33	31238-31241	irb	
104-34	31241-31242	(	
104-35	31242-31246	main	
104-36	31246-31247	)	
104-37	31247-31248	:	
104-38	31248-31251	002	
104-39	31251-31252	:	
104-40	31252-31253	0	
104-41	31253-31254	>	
104-42	31255-31283	results.last.attributes.keys	
104-43	31284-31285	=	
104-44	31285-31286	>	
104-45	31287-31288	[	
104-46	31288-31289	"	
104-47	31289-31291	id	
104-48	31291-31292	"	
104-49	31292-31293	,	
104-50	31294-31295	"	
104-51	31295-31301	commit	
104-52	31301-31302	"	
104-53	31302-31303	,	
104-54	31304-31305	"	
104-55	31305-31309	date	
104-56	31309-31310	"	
104-57	31310-31311	,	
104-58	31312-31313	"	
104-59	31313-31317	file	
104-60	31317-31318	"	
104-61	31318-31319	,	
104-62	31320-31321	"	
104-63	31321-31332	line_number	
104-64	31332-31333	"	
104-65	31333-31334	,	
104-66	31335-31336	"	
104-67	31336-31347	description	
104-68	31347-31348	"	
104-69	31348-31349	,	
104-70	31350-31351	"	
104-71	31351-31355	time	
104-72	31355-31356	"	
104-73	31356-31357	,	
104-74	31358-31359	"	
104-75	31359-31365	status	
104-76	31365-31366	"	
104-77	31366-31367	,	
104-78	31368-31369	"	
104-79	31369-31378	exception	
104-80	31378-31379	"	
104-81	31379-31380	,	
104-82	31381-31382	"	
104-83	31382-31393	query_count	
104-84	31393-31394	"	
104-85	31394-31395	,	
104-86	31396-31397	"	
104-87	31397-31407	query_time	
104-88	31407-31408	"	
104-89	31408-31409	,	
104-90	31410-31411	"	
104-91	31411-31424	request_count	
104-92	31424-31425	"	
104-93	31425-31426	,	
104-94	31427-31428	"	
104-95	31428-31440	request_time	
104-96	31440-31441	"	
104-97	31441-31442	,	
104-98	31443-31444	"	
104-99	31444-31454	created_at	
104-100	31454-31455	"	
104-101	31455-31456	,	
104-102	31457-31458	"	
104-103	31458-31468	updated_at	
104-104	31468-31469	"	
104-105	31469-31470	]	
104-106	31471-31474	irb	
104-107	31474-31475	(	
104-108	31475-31479	main	
104-109	31479-31480	)	
104-110	31480-31481	:	
104-111	31481-31484	003	
104-112	31484-31485	:	
104-113	31485-31486	0	
104-114	31486-31487	>	
104-115	31488-31501	results.where	
104-116	31501-31502	(	
104-117	31502-31508	status	
104-118	31508-31509	:	
104-119	31510-31511	"	
104-120	31511-31517	passed	
104-121	31517-31518	"	
104-122	31518-31519	)	
104-123	31519-31520	.	
104-124	31520-31527	average	
104-125	31527-31528	(	
104-126	31528-31529	:	
104-127	31529-31533	time	
104-128	31533-31534	)	
104-129	31534-31535	.	
104-130	31535-31539	to_s	
104-131	31540-31541	=	
104-132	31541-31542	>	
104-133	31543-31544	"	
104-134	31544-31561	0.211340155844156	
104-135	31561-31562	"	
104-136	31563-31568	These	
104-137	31569-31576	results	
104-138	31577-31580	can	
104-139	31581-31585	also	
104-140	31586-31588	be	
104-141	31589-31595	placed	
104-142	31596-31600	into	
104-143	31601-31602	a	
104-144	31603-31613	PostgreSQL	
104-145	31614-31622	database	
104-146	31623-31625	by	
104-147	31626-31633	setting	
104-148	31634-31637	the	
104-149	31638-31666	RSPEC_PROFILING_POSTGRES_URL	
104-150	31667-31675	variable	
104-151	31675-31676	.	

#Text=This is used to profile the test suite
#Text=when running in the CI environment.
105-1	31677-31681	This	
105-2	31682-31684	is	
105-3	31685-31689	used	
105-4	31690-31692	to	
105-5	31693-31700	profile	
105-6	31701-31704	the	
105-7	31705-31709	test	
105-8	31710-31715	suite	
105-9	31716-31720	when	
105-10	31721-31728	running	
105-11	31729-31731	in	
105-12	31732-31735	the	
105-13	31736-31738	CI	
105-14	31739-31750	environment	
105-15	31750-31751	.	

#Text=We store these results also when running nightly scheduled CI jobs on the
#Text=default branch on gitlab.com.
106-1	31752-31754	We	
106-2	31755-31760	store	
106-3	31761-31766	these	
106-4	31767-31774	results	
106-5	31775-31779	also	
106-6	31780-31784	when	
106-7	31785-31792	running	
106-8	31793-31800	nightly	
106-9	31801-31810	scheduled	
106-10	31811-31813	CI	
106-11	31814-31818	jobs	
106-12	31819-31821	on	
106-13	31822-31825	the	
106-14	31826-31833	default	
106-15	31834-31840	branch	
106-16	31841-31843	on	
106-17	31844-31854	gitlab.com	
106-18	31854-31855	.	

#Text=Statistics of these profiling data are
#Text=available online.
107-1	31856-31866	Statistics	
107-2	31867-31869	of	
107-3	31870-31875	these	
107-4	31876-31885	profiling	
107-5	31886-31890	data	
107-6	31891-31894	are	
107-7	31895-31904	available	
107-8	31905-31911	online	
107-9	31911-31912	.	

#Text=For
#Text=example, you can find which tests take longest to run or which execute the most
#Text=queries.
108-1	31913-31916	For	
108-2	31917-31924	example	
108-3	31924-31925	,	
108-4	31926-31929	you	
108-5	31930-31933	can	
108-6	31934-31938	find	
108-7	31939-31944	which	
108-8	31945-31950	tests	
108-9	31951-31955	take	
108-10	31956-31963	longest	
108-11	31964-31966	to	
108-12	31967-31970	run	
108-13	31971-31973	or	
108-14	31974-31979	which	
108-15	31980-31987	execute	
108-16	31988-31991	the	
108-17	31992-31996	most	
108-18	31997-32004	queries	
108-19	32004-32005	.	

#Text=This can be handy for optimizing our tests or identifying performance
#Text=issues in our code.
109-1	32006-32010	This	
109-2	32011-32014	can	
109-3	32015-32017	be	
109-4	32018-32023	handy	
109-5	32024-32027	for	
109-6	32028-32038	optimizing	
109-7	32039-32042	our	
109-8	32043-32048	tests	
109-9	32049-32051	or	
109-10	32052-32063	identifying	
109-11	32064-32075	performance	
109-12	32076-32082	issues	
109-13	32083-32085	in	
109-14	32086-32089	our	
109-15	32090-32094	code	
109-16	32094-32095	.	

#Text=Memory optimization
#Text=We can use a set of different techniques, often in combination, to track down memory issues:
#Text=Leaving the code intact and wrapping a profiler around it.
110-1	32096-32102	Memory	
110-2	32103-32115	optimization	
110-3	32116-32118	We	
110-4	32119-32122	can	
110-5	32123-32126	use	
110-6	32127-32128	a	
110-7	32129-32132	set	
110-8	32133-32135	of	
110-9	32136-32145	different	
110-10	32146-32156	techniques	
110-11	32156-32157	,	
110-12	32158-32163	often	
110-13	32164-32166	in	
110-14	32167-32178	combination	
110-15	32178-32179	,	
110-16	32180-32182	to	
110-17	32183-32188	track	
110-18	32189-32193	down	
110-19	32194-32200	memory	
110-20	32201-32207	issues	
110-21	32207-32208	:	
110-22	32209-32216	Leaving	
110-23	32217-32220	the	
110-24	32221-32225	code	
110-25	32226-32232	intact	
110-26	32233-32236	and	
110-27	32237-32245	wrapping	
110-28	32246-32247	a	
110-29	32248-32256	profiler	
110-30	32257-32263	around	
110-31	32264-32266	it	
110-32	32266-32267	.	

#Text=Use memory allocation counters for requests and services.
111-1	32268-32271	Use	
111-2	32272-32278	memory	
111-3	32279-32289	allocation	
111-4	32290-32298	counters	
111-5	32299-32302	for	
111-6	32303-32311	requests	
111-7	32312-32315	and	
111-8	32316-32324	services	
111-9	32324-32325	.	

#Text=Monitor memory usage of the process while disabling/enabling different parts of the code we suspect could be problematic.
112-1	32326-32333	Monitor	
112-2	32334-32340	memory	
112-3	32341-32346	usage	
112-4	32347-32349	of	
112-5	32350-32353	the	
112-6	32354-32361	process	
112-7	32362-32367	while	
112-8	32368-32377	disabling	
112-9	32377-32378	/	
112-10	32378-32386	enabling	
112-11	32387-32396	different	
112-12	32397-32402	parts	
112-13	32403-32405	of	
112-14	32406-32409	the	
112-15	32410-32414	code	
112-16	32415-32417	we	
112-17	32418-32425	suspect	
112-18	32426-32431	could	
112-19	32432-32434	be	
112-20	32435-32446	problematic	
112-21	32446-32447	.	

#Text=Memory allocations
#Text=Ruby shipped with GitLab includes a special patch to allow tracing memory allocations.
113-1	32448-32454	Memory	
113-2	32455-32466	allocations	
113-3	32467-32471	Ruby	
113-4	32472-32479	shipped	
113-5	32480-32484	with	
113-6	32485-32491	GitLab	
113-7	32492-32500	includes	
113-8	32501-32502	a	
113-9	32503-32510	special	
113-10	32511-32516	patch	
113-11	32517-32519	to	
113-12	32520-32525	allow	
113-13	32526-32533	tracing	
113-14	32534-32540	memory	
113-15	32541-32552	allocations	
113-16	32552-32553	.	

#Text=This patch is available by default for
#Text=Omnibus,
#Text=CNG,
#Text=GitLab CI,
#Text=GCK
#Text=and can additionally be enabled for GDK.
114-1	32554-32558	This	
114-2	32559-32564	patch	
114-3	32565-32567	is	
114-4	32568-32577	available	
114-5	32578-32580	by	
114-6	32581-32588	default	
114-7	32589-32592	for	
114-8	32593-32600	Omnibus	
114-9	32600-32601	,	
114-10	32602-32605	CNG	
114-11	32605-32606	,	
114-12	32607-32613	GitLab	
114-13	32614-32616	CI	
114-14	32616-32617	,	
114-15	32618-32621	GCK	
114-16	32622-32625	and	
114-17	32626-32629	can	
114-18	32630-32642	additionally	
114-19	32643-32645	be	
114-20	32646-32653	enabled	
114-21	32654-32657	for	
114-22	32658-32661	GDK	
114-23	32661-32662	.	

#Text=This patch provides a set of 3 metrics that makes it easier to understand efficiency of memory usage for a given codepath:
#Text=mem_objects: the number of objects allocated.
#Text=mem_bytes: the number of bytes allocated by malloc.
#Text=mem_mallocs: the number of malloc allocations.
115-1	32663-32667	This	
115-2	32668-32673	patch	
115-3	32674-32682	provides	
115-4	32683-32684	a	
115-5	32685-32688	set	
115-6	32689-32691	of	
115-7	32692-32693	3	
115-8	32694-32701	metrics	
115-9	32702-32706	that	
115-10	32707-32712	makes	
115-11	32713-32715	it	
115-12	32716-32722	easier	
115-13	32723-32725	to	
115-14	32726-32736	understand	
115-15	32737-32747	efficiency	
115-16	32748-32750	of	
115-17	32751-32757	memory	
115-18	32758-32763	usage	
115-19	32764-32767	for	
115-20	32768-32769	a	
115-21	32770-32775	given	
115-22	32776-32784	codepath	
115-23	32784-32785	:	
115-24	32786-32797	mem_objects	
115-25	32797-32798	:	
115-26	32799-32802	the	
115-27	32803-32809	number	
115-28	32810-32812	of	
115-29	32813-32820	objects	
115-30	32821-32830	allocated	
115-31	32830-32831	.	
115-32	32832-32841	mem_bytes	
115-33	32841-32842	:	
115-34	32843-32846	the	
115-35	32847-32853	number	
115-36	32854-32856	of	
115-37	32857-32862	bytes	
115-38	32863-32872	allocated	
115-39	32873-32875	by	
115-40	32876-32882	malloc	
115-41	32882-32883	.	
115-42	32884-32895	mem_mallocs	
115-43	32895-32896	:	
115-44	32897-32900	the	
115-45	32901-32907	number	
115-46	32908-32910	of	
115-47	32911-32917	malloc	
115-48	32918-32929	allocations	
115-49	32929-32930	.	

#Text=The number of objects and bytes allocated impact how often GC cycles happen.
116-1	32931-32934	The	
116-2	32935-32941	number	
116-3	32942-32944	of	
116-4	32945-32952	objects	
116-5	32953-32956	and	
116-6	32957-32962	bytes	
116-7	32963-32972	allocated	
116-8	32973-32979	impact	
116-9	32980-32983	how	
116-10	32984-32989	often	
116-11	32990-32992	GC	
116-12	32993-32999	cycles	
116-13	33000-33006	happen	
116-14	33006-33007	.	

#Text=Fewer objects allocations result in a significantly more responsive application.
117-1	33008-33013	Fewer	
117-2	33014-33021	objects	
117-3	33022-33033	allocations	
117-4	33034-33040	result	
117-5	33041-33043	in	
117-6	33044-33045	a	
117-7	33046-33059	significantly	
117-8	33060-33064	more	
117-9	33065-33075	responsive	
117-10	33076-33087	application	
117-11	33087-33088	.	

#Text=It is advised that web server requests do not allocate more than 100k mem_objects
#Text=and 100M mem_bytes.
118-1	33089-33091	It	
118-2	33092-33094	is	
118-3	33095-33102	advised	
118-4	33103-33107	that	
118-5	33108-33111	web	
118-6	33112-33118	server	
118-7	33119-33127	requests	
118-8	33128-33130	do	
118-9	33131-33134	not	
118-10	33135-33143	allocate	
118-11	33144-33148	more	
118-12	33149-33153	than	
118-13	33154-33158	100k	
118-14	33159-33170	mem_objects	
118-15	33171-33174	and	
118-16	33175-33179	100M	
118-17	33180-33189	mem_bytes	
118-18	33189-33190	.	

#Text=You can view the current usage on GitLab.com.
119-1	33191-33194	You	
119-2	33195-33198	can	
119-3	33199-33203	view	
119-4	33204-33207	the	
119-5	33208-33215	current	
119-6	33216-33221	usage	
119-7	33222-33224	on	
119-8	33225-33235	GitLab.com	
119-9	33235-33236	.	

#Text=Checking memory pressure of own code
#Text=There are two ways of measuring your own code:
#Text=Review api_json.log, development_json.log, sidekiq.log that includes memory allocation counters.
120-1	33237-33245	Checking	
120-2	33246-33252	memory	
120-3	33253-33261	pressure	
120-4	33262-33264	of	
120-5	33265-33268	own	
120-6	33269-33273	code	
120-7	33274-33279	There	
120-8	33280-33283	are	
120-9	33284-33287	two	
120-10	33288-33292	ways	
120-11	33293-33295	of	
120-12	33296-33305	measuring	
120-13	33306-33310	your	
120-14	33311-33314	own	
120-15	33315-33319	code	
120-16	33319-33320	:	
120-17	33321-33327	Review	
120-18	33328-33340	api_json.log	
120-19	33340-33341	,	
120-20	33342-33362	development_json.log	
120-21	33362-33363	,	
120-22	33364-33375	sidekiq.log	
120-23	33376-33380	that	
120-24	33381-33389	includes	
120-25	33390-33396	memory	
120-26	33397-33407	allocation	
120-27	33408-33416	counters	
120-28	33416-33417	.	

#Text=Use Gitlab::Memory::Instrumentation.with_memory_allocations for a given codeblock and log it.
121-1	33418-33421	Use	
121-2	33422-33428	Gitlab	
121-3	33428-33429	:	
121-4	33429-33430	:	
121-5	33430-33436	Memory	
121-6	33436-33437	:	
121-7	33437-33438	:	
121-8	33438-33477	Instrumentation.with_memory_allocations	
121-9	33478-33481	for	
121-10	33482-33483	a	
121-11	33484-33489	given	
121-12	33490-33499	codeblock	
121-13	33500-33503	and	
121-14	33504-33507	log	
121-15	33508-33510	it	
121-16	33510-33511	.	

#Text=Use Measuring module
#Text={"time":"2021-02-15T11:20:40.821Z","severity":"INFO","duration_s":0.27412,"db_duration_s":0.05755,"view_duration_s":0.21657,"status":201,"method":"POST","path":"/api/v4/projects/user/1","mem_objects":86705,"mem_bytes":4277179,"mem_mallocs":22693,"correlation_id":"...}
122-1	33512-33515	Use	
122-2	33516-33525	Measuring	
122-3	33526-33532	module	
122-4	33533-33534	{	
122-5	33534-33535	"	
122-6	33535-33539	time	
122-7	33539-33540	"	
122-8	33540-33541	:	
122-9	33541-33542	"	
122-10	33542-33546	2021	
122-11	33546-33547	-	
122-12	33547-33549	02	
122-13	33549-33550	-	
122-14	33550-33555	15T11	
122-15	33555-33556	:	
122-16	33556-33558	20	
122-17	33558-33559	:	
122-18	33559-33566	40.821Z	
122-19	33566-33567	"	
122-20	33567-33568	,	
122-21	33568-33569	"	
122-22	33569-33577	severity	
122-23	33577-33578	"	
122-24	33578-33579	:	
122-25	33579-33580	"	
122-26	33580-33584	INFO	
122-27	33584-33585	"	
122-28	33585-33586	,	
122-29	33586-33587	"	
122-30	33587-33597	duration_s	
122-31	33597-33598	"	
122-32	33598-33599	:	
122-33	33599-33606	0.27412	
122-34	33606-33607	,	
122-35	33607-33608	"	
122-36	33608-33621	db_duration_s	
122-37	33621-33622	"	
122-38	33622-33623	:	
122-39	33623-33630	0.05755	
122-40	33630-33631	,	
122-41	33631-33632	"	
122-42	33632-33647	view_duration_s	
122-43	33647-33648	"	
122-44	33648-33649	:	
122-45	33649-33656	0.21657	
122-46	33656-33657	,	
122-47	33657-33658	"	
122-48	33658-33664	status	
122-49	33664-33665	"	
122-50	33665-33666	:	
122-51	33666-33669	201	
122-52	33669-33670	,	
122-53	33670-33671	"	
122-54	33671-33677	method	
122-55	33677-33678	"	
122-56	33678-33679	:	
122-57	33679-33680	"	
122-58	33680-33684	POST	
122-59	33684-33685	"	
122-60	33685-33686	,	
122-61	33686-33687	"	
122-62	33687-33691	path	
122-63	33691-33692	"	
122-64	33692-33693	:	
122-65	33693-33694	"	
122-66	33694-33695	/	
122-67	33695-33698	api	
122-68	33698-33699	/	
122-69	33699-33701	v4	
122-70	33701-33702	/	
122-71	33702-33710	projects	
122-72	33710-33711	/	
122-73	33711-33715	user	
122-74	33715-33716	/	
122-75	33716-33717	1	
122-76	33717-33718	"	
122-77	33718-33719	,	
122-78	33719-33720	"	
122-79	33720-33731	mem_objects	
122-80	33731-33732	"	
122-81	33732-33733	:	
122-82	33733-33738	86705	
122-83	33738-33739	,	
122-84	33739-33740	"	
122-85	33740-33749	mem_bytes	
122-86	33749-33750	"	
122-87	33750-33751	:	
122-88	33751-33758	4277179	
122-89	33758-33759	,	
122-90	33759-33760	"	
122-91	33760-33771	mem_mallocs	
122-92	33771-33772	"	
122-93	33772-33773	:	
122-94	33773-33778	22693	
122-95	33778-33779	,	
122-96	33779-33780	"	
122-97	33780-33794	correlation_id	
122-98	33794-33795	"	
122-99	33795-33796	:	
122-100	33796-33797	"	
122-101	33797-33798	.	
122-102	33798-33799	.	
122-103	33799-33800	.	
122-104	33800-33801	}	

#Text=Different types of allocations
#Text=The mem_* values represent different aspects of how objects and memory are allocated in Ruby:
#Text=The following example will create around of 1000 of mem_objects since strings
#Text=can be frozen, and while the underlying string object remains the same, we still need to allocate 1000 references to this string:
#Text=Gitlab::Memory::Instrumentation.with_memory_allocations do
#Text=1_000.times { '0123456789' }
#Text=end
#Text==> {:mem_objects=>1001, :mem_bytes=>0, :mem_mallocs=>0}
#Text=The following example will create around of 1000 of mem_objects, as strings are created dynamically.
123-1	33802-33811	Different	
123-2	33812-33817	types	
123-3	33818-33820	of	
123-4	33821-33832	allocations	
123-5	33833-33836	The	
123-6	33837-33840	mem	
123-7	33840-33841	_	
123-8	33841-33842	*	
123-9	33843-33849	values	
123-10	33850-33859	represent	
123-11	33860-33869	different	
123-12	33870-33877	aspects	
123-13	33878-33880	of	
123-14	33881-33884	how	
123-15	33885-33892	objects	
123-16	33893-33896	and	
123-17	33897-33903	memory	
123-18	33904-33907	are	
123-19	33908-33917	allocated	
123-20	33918-33920	in	
123-21	33921-33925	Ruby	
123-22	33925-33926	:	
123-23	33927-33930	The	
123-24	33931-33940	following	
123-25	33941-33948	example	
123-26	33949-33953	will	
123-27	33954-33960	create	
123-28	33961-33967	around	
123-29	33968-33970	of	
123-30	33971-33975	1000	
123-31	33976-33978	of	
123-32	33979-33990	mem_objects	
123-33	33991-33996	since	
123-34	33997-34004	strings	
123-35	34005-34008	can	
123-36	34009-34011	be	
123-37	34012-34018	frozen	
123-38	34018-34019	,	
123-39	34020-34023	and	
123-40	34024-34029	while	
123-41	34030-34033	the	
123-42	34034-34044	underlying	
123-43	34045-34051	string	
123-44	34052-34058	object	
123-45	34059-34066	remains	
123-46	34067-34070	the	
123-47	34071-34075	same	
123-48	34075-34076	,	
123-49	34077-34079	we	
123-50	34080-34085	still	
123-51	34086-34090	need	
123-52	34091-34093	to	
123-53	34094-34102	allocate	
123-54	34103-34107	1000	
123-55	34108-34118	references	
123-56	34119-34121	to	
123-57	34122-34126	this	
123-58	34127-34133	string	
123-59	34133-34134	:	
123-60	34135-34141	Gitlab	
123-61	34141-34142	:	
123-62	34142-34143	:	
123-63	34143-34149	Memory	
123-64	34149-34150	:	
123-65	34150-34151	:	
123-66	34151-34190	Instrumentation.with_memory_allocations	
123-67	34191-34193	do	
123-68	34194-34195	1	
123-69	34195-34196	_	
123-70	34196-34199	000	
123-71	34199-34200	.	
123-72	34200-34205	times	
123-73	34206-34207	{	
123-74	34208-34209	'	
123-75	34209-34219	0123456789	
123-76	34219-34220	'	
123-77	34221-34222	}	
123-78	34223-34226	end	
123-79	34227-34228	=	
123-80	34228-34229	>	
123-81	34230-34231	{	
123-82	34231-34232	:	
123-83	34232-34243	mem_objects	
123-84	34243-34244	=	
123-85	34244-34245	>	
123-86	34245-34249	1001	
123-87	34249-34250	,	
123-88	34251-34252	:	
123-89	34252-34261	mem_bytes	
123-90	34261-34262	=	
123-91	34262-34263	>	
123-92	34263-34264	0	
123-93	34264-34265	,	
123-94	34266-34267	:	
123-95	34267-34278	mem_mallocs	
123-96	34278-34279	=	
123-97	34279-34280	>	
123-98	34280-34281	0	
123-99	34281-34282	}	
123-100	34283-34286	The	
123-101	34287-34296	following	
123-102	34297-34304	example	
123-103	34305-34309	will	
123-104	34310-34316	create	
123-105	34317-34323	around	
123-106	34324-34326	of	
123-107	34327-34331	1000	
123-108	34332-34334	of	
123-109	34335-34346	mem_objects	
123-110	34346-34347	,	
123-111	34348-34350	as	
123-112	34351-34358	strings	
123-113	34359-34362	are	
123-114	34363-34370	created	
123-115	34371-34382	dynamically	
123-116	34382-34383	.	

#Text=Each of them will not allocate additional memory, as they fit into Ruby slot of 40 bytes:
#Text=Gitlab::Memory::Instrumentation.with_memory_allocations do
#Text=s = '0'
#Text=1_000.times { s * 23 }
#Text=end
#Text==> {:mem_objects=>1002, :mem_bytes=>0, :mem_mallocs=>0}
#Text=The following example will create around of 1000 of mem_objects, as strings are created dynamically.
124-1	34384-34388	Each	
124-2	34389-34391	of	
124-3	34392-34396	them	
124-4	34397-34401	will	
124-5	34402-34405	not	
124-6	34406-34414	allocate	
124-7	34415-34425	additional	
124-8	34426-34432	memory	
124-9	34432-34433	,	
124-10	34434-34436	as	
124-11	34437-34441	they	
124-12	34442-34445	fit	
124-13	34446-34450	into	
124-14	34451-34455	Ruby	
124-15	34456-34460	slot	
124-16	34461-34463	of	
124-17	34464-34466	40	
124-18	34467-34472	bytes	
124-19	34472-34473	:	
124-20	34474-34480	Gitlab	
124-21	34480-34481	:	
124-22	34481-34482	:	
124-23	34482-34488	Memory	
124-24	34488-34489	:	
124-25	34489-34490	:	
124-26	34490-34529	Instrumentation.with_memory_allocations	
124-27	34530-34532	do	
124-28	34533-34534	s	
124-29	34535-34536	=	
124-30	34537-34538	'	
124-31	34538-34539	0	
124-32	34539-34540	'	
124-33	34541-34542	1	
124-34	34542-34543	_	
124-35	34543-34546	000	
124-36	34546-34547	.	
124-37	34547-34552	times	
124-38	34553-34554	{	
124-39	34555-34556	s	
124-40	34557-34558	*	
124-41	34559-34561	23	
124-42	34562-34563	}	
124-43	34564-34567	end	
124-44	34568-34569	=	
124-45	34569-34570	>	
124-46	34571-34572	{	
124-47	34572-34573	:	
124-48	34573-34584	mem_objects	
124-49	34584-34585	=	
124-50	34585-34586	>	
124-51	34586-34590	1002	
124-52	34590-34591	,	
124-53	34592-34593	:	
124-54	34593-34602	mem_bytes	
124-55	34602-34603	=	
124-56	34603-34604	>	
124-57	34604-34605	0	
124-58	34605-34606	,	
124-59	34607-34608	:	
124-60	34608-34619	mem_mallocs	
124-61	34619-34620	=	
124-62	34620-34621	>	
124-63	34621-34622	0	
124-64	34622-34623	}	
124-65	34624-34627	The	
124-66	34628-34637	following	
124-67	34638-34645	example	
124-68	34646-34650	will	
124-69	34651-34657	create	
124-70	34658-34664	around	
124-71	34665-34667	of	
124-72	34668-34672	1000	
124-73	34673-34675	of	
124-74	34676-34687	mem_objects	
124-75	34687-34688	,	
124-76	34689-34691	as	
124-77	34692-34699	strings	
124-78	34700-34703	are	
124-79	34704-34711	created	
124-80	34712-34723	dynamically	
124-81	34723-34724	.	

#Text=Each of them will allocate additional memory as strings are larger than Ruby slot of 40 bytes:
#Text=Gitlab::Memory::Instrumentation.with_memory_allocations do
#Text=s = '0'
#Text=1_000.times { s * 24 }
#Text=end
#Text==> {:mem_objects=>1002, :mem_bytes=>32000, :mem_mallocs=>1000}
#Text=The following example will allocate over 40kB of data, and perform only a single memory allocation.
125-1	34725-34729	Each	
125-2	34730-34732	of	
125-3	34733-34737	them	
125-4	34738-34742	will	
125-5	34743-34751	allocate	
125-6	34752-34762	additional	
125-7	34763-34769	memory	
125-8	34770-34772	as	
125-9	34773-34780	strings	
125-10	34781-34784	are	
125-11	34785-34791	larger	
125-12	34792-34796	than	
125-13	34797-34801	Ruby	
125-14	34802-34806	slot	
125-15	34807-34809	of	
125-16	34810-34812	40	
125-17	34813-34818	bytes	
125-18	34818-34819	:	
125-19	34820-34826	Gitlab	
125-20	34826-34827	:	
125-21	34827-34828	:	
125-22	34828-34834	Memory	
125-23	34834-34835	:	
125-24	34835-34836	:	
125-25	34836-34875	Instrumentation.with_memory_allocations	
125-26	34876-34878	do	
125-27	34879-34880	s	
125-28	34881-34882	=	
125-29	34883-34884	'	
125-30	34884-34885	0	
125-31	34885-34886	'	
125-32	34887-34888	1	
125-33	34888-34889	_	
125-34	34889-34892	000	
125-35	34892-34893	.	
125-36	34893-34898	times	
125-37	34899-34900	{	
125-38	34901-34902	s	
125-39	34903-34904	*	
125-40	34905-34907	24	
125-41	34908-34909	}	
125-42	34910-34913	end	
125-43	34914-34915	=	
125-44	34915-34916	>	
125-45	34917-34918	{	
125-46	34918-34919	:	
125-47	34919-34930	mem_objects	
125-48	34930-34931	=	
125-49	34931-34932	>	
125-50	34932-34936	1002	
125-51	34936-34937	,	
125-52	34938-34939	:	
125-53	34939-34948	mem_bytes	
125-54	34948-34949	=	
125-55	34949-34950	>	
125-56	34950-34955	32000	
125-57	34955-34956	,	
125-58	34957-34958	:	
125-59	34958-34969	mem_mallocs	
125-60	34969-34970	=	
125-61	34970-34971	>	
125-62	34971-34975	1000	
125-63	34975-34976	}	
125-64	34977-34980	The	
125-65	34981-34990	following	
125-66	34991-34998	example	
125-67	34999-35003	will	
125-68	35004-35012	allocate	
125-69	35013-35017	over	
125-70	35018-35022	40kB	
125-71	35023-35025	of	
125-72	35026-35030	data	
125-73	35030-35031	,	
125-74	35032-35035	and	
125-75	35036-35043	perform	
125-76	35044-35048	only	
125-77	35049-35050	a	
125-78	35051-35057	single	
125-79	35058-35064	memory	
125-80	35065-35075	allocation	
125-81	35075-35076	.	

#Text=The existing object will be reallocated/resized on subsequent iterations:
#Text=Gitlab::Memory::Instrumentation.with_memory_allocations do
#Text=str = ''
#Text=append = '0123456789012345678901234567890123456789' # 40 bytes
#Text=1_000.times { str.concat(append) }
#Text=end
#Text==> {:mem_objects=>3, :mem_bytes=>49152, :mem_mallocs=>1}
#Text=The following example will create over 1k of objects, perform over 1k of allocations, each time mutating the object.
126-1	35077-35080	The	
126-2	35081-35089	existing	
126-3	35090-35096	object	
126-4	35097-35101	will	
126-5	35102-35104	be	
126-6	35105-35116	reallocated	
126-7	35116-35117	/	
126-8	35117-35124	resized	
126-9	35125-35127	on	
126-10	35128-35138	subsequent	
126-11	35139-35149	iterations	
126-12	35149-35150	:	
126-13	35151-35157	Gitlab	
126-14	35157-35158	:	
126-15	35158-35159	:	
126-16	35159-35165	Memory	
126-17	35165-35166	:	
126-18	35166-35167	:	
126-19	35167-35206	Instrumentation.with_memory_allocations	
126-20	35207-35209	do	
126-21	35210-35213	str	
126-22	35214-35215	=	
126-23	35216-35217	'	
126-24	35217-35218	'	
126-25	35219-35225	append	
126-26	35226-35227	=	
126-27	35228-35229	'	
126-28	35229-35269	0123456789012345678901234567890123456789	
126-29	35269-35270	'	
126-30	35271-35272	#	
126-31	35273-35275	40	
126-32	35276-35281	bytes	
126-33	35282-35283	1	
126-34	35283-35284	_	
126-35	35284-35287	000	
126-36	35287-35288	.	
126-37	35288-35293	times	
126-38	35294-35295	{	
126-39	35296-35306	str.concat	
126-40	35306-35307	(	
126-41	35307-35313	append	
126-42	35313-35314	)	
126-43	35315-35316	}	
126-44	35317-35320	end	
126-45	35321-35322	=	
126-46	35322-35323	>	
126-47	35324-35325	{	
126-48	35325-35326	:	
126-49	35326-35337	mem_objects	
126-50	35337-35338	=	
126-51	35338-35339	>	
126-52	35339-35340	3	
126-53	35340-35341	,	
126-54	35342-35343	:	
126-55	35343-35352	mem_bytes	
126-56	35352-35353	=	
126-57	35353-35354	>	
126-58	35354-35359	49152	
126-59	35359-35360	,	
126-60	35361-35362	:	
126-61	35362-35373	mem_mallocs	
126-62	35373-35374	=	
126-63	35374-35375	>	
126-64	35375-35376	1	
126-65	35376-35377	}	
126-66	35378-35381	The	
126-67	35382-35391	following	
126-68	35392-35399	example	
126-69	35400-35404	will	
126-70	35405-35411	create	
126-71	35412-35416	over	
126-72	35417-35419	1k	
126-73	35420-35422	of	
126-74	35423-35430	objects	
126-75	35430-35431	,	
126-76	35432-35439	perform	
126-77	35440-35444	over	
126-78	35445-35447	1k	
126-79	35448-35450	of	
126-80	35451-35462	allocations	
126-81	35462-35463	,	
126-82	35464-35468	each	
126-83	35469-35473	time	
126-84	35474-35482	mutating	
126-85	35483-35486	the	
126-86	35487-35493	object	
126-87	35493-35494	.	

#Text=This does result in copying a lot of data and perform a lot of memory allocations
#Text=(as represented by mem_bytes counter) indicating very inefficient method of appending string:
#Text=Gitlab::Memory::Instrumentation.with_memory_allocations do
#Text=str = ''
#Text=append = '0123456789012345678901234567890123456789' # 40 bytes
#Text=1_000.times { str += append }
#Text=end
#Text==> {:mem_objects=>1003, :mem_bytes=>21968752, :mem_mallocs=>1000}
#Text=Using Memory Profiler
#Text=We can use memory_profiler for profiling.
127-1	35495-35499	This	
127-2	35500-35504	does	
127-3	35505-35511	result	
127-4	35512-35514	in	
127-5	35515-35522	copying	
127-6	35523-35524	a	
127-7	35525-35528	lot	
127-8	35529-35531	of	
127-9	35532-35536	data	
127-10	35537-35540	and	
127-11	35541-35548	perform	
127-12	35549-35550	a	
127-13	35551-35554	lot	
127-14	35555-35557	of	
127-15	35558-35564	memory	
127-16	35565-35576	allocations	
127-17	35577-35578	(	
127-18	35578-35580	as	
127-19	35581-35592	represented	
127-20	35593-35595	by	
127-21	35596-35605	mem_bytes	
127-22	35606-35613	counter	
127-23	35613-35614	)	
127-24	35615-35625	indicating	
127-25	35626-35630	very	
127-26	35631-35642	inefficient	
127-27	35643-35649	method	
127-28	35650-35652	of	
127-29	35653-35662	appending	
127-30	35663-35669	string	
127-31	35669-35670	:	
127-32	35671-35677	Gitlab	
127-33	35677-35678	:	
127-34	35678-35679	:	
127-35	35679-35685	Memory	
127-36	35685-35686	:	
127-37	35686-35687	:	
127-38	35687-35726	Instrumentation.with_memory_allocations	
127-39	35727-35729	do	
127-40	35730-35733	str	
127-41	35734-35735	=	
127-42	35736-35737	'	
127-43	35737-35738	'	
127-44	35739-35745	append	
127-45	35746-35747	=	
127-46	35748-35749	'	
127-47	35749-35789	0123456789012345678901234567890123456789	
127-48	35789-35790	'	
127-49	35791-35792	#	
127-50	35793-35795	40	
127-51	35796-35801	bytes	
127-52	35802-35803	1	
127-53	35803-35804	_	
127-54	35804-35807	000	
127-55	35807-35808	.	
127-56	35808-35813	times	
127-57	35814-35815	{	
127-58	35816-35819	str	
127-59	35820-35821	+	
127-60	35821-35822	=	
127-61	35823-35829	append	
127-62	35830-35831	}	
127-63	35832-35835	end	
127-64	35836-35837	=	
127-65	35837-35838	>	
127-66	35839-35840	{	
127-67	35840-35841	:	
127-68	35841-35852	mem_objects	
127-69	35852-35853	=	
127-70	35853-35854	>	
127-71	35854-35858	1003	
127-72	35858-35859	,	
127-73	35860-35861	:	
127-74	35861-35870	mem_bytes	
127-75	35870-35871	=	
127-76	35871-35872	>	
127-77	35872-35880	21968752	
127-78	35880-35881	,	
127-79	35882-35883	:	
127-80	35883-35894	mem_mallocs	
127-81	35894-35895	=	
127-82	35895-35896	>	
127-83	35896-35900	1000	
127-84	35900-35901	}	
127-85	35902-35907	Using	
127-86	35908-35914	Memory	
127-87	35915-35923	Profiler	
127-88	35924-35926	We	
127-89	35927-35930	can	
127-90	35931-35934	use	
127-91	35935-35950	memory_profiler	
127-92	35951-35954	for	
127-93	35955-35964	profiling	
127-94	35964-35965	.	

#Text=The memory_profiler gem is already present in the GitLab Gemfile,
#Text=you just need to require it:
#Text=require 'sidekiq/testing'
#Text=report = MemoryProfiler.report do
#Text=# Code you want to profile
#Text=end
#Text=output = File.open('/tmp/profile.txt','w')
#Text=report.pretty_print(output)
#Text=The report breaks down 2 key concepts:
#Text=Retained: long lived memory use and object count retained due to the execution of the code block.
128-1	35966-35969	The	
128-2	35970-35985	memory_profiler	
128-3	35986-35989	gem	
128-4	35990-35992	is	
128-5	35993-36000	already	
128-6	36001-36008	present	
128-7	36009-36011	in	
128-8	36012-36015	the	
128-9	36016-36022	GitLab	
128-10	36023-36030	Gemfile	
128-11	36030-36031	,	
128-12	36032-36035	you	
128-13	36036-36040	just	
128-14	36041-36045	need	
128-15	36046-36048	to	
128-16	36049-36056	require	
128-17	36057-36059	it	
128-18	36059-36060	:	
128-19	36061-36068	require	
128-20	36069-36070	'	
128-21	36070-36077	sidekiq	
128-22	36077-36078	/	
128-23	36078-36085	testing	
128-24	36085-36086	'	
128-25	36087-36093	report	
128-26	36094-36095	=	
128-27	36096-36117	MemoryProfiler.report	
128-28	36118-36120	do	
128-29	36121-36122	#	
128-30	36123-36127	Code	
128-31	36128-36131	you	
128-32	36132-36136	want	
128-33	36137-36139	to	
128-34	36140-36147	profile	
128-35	36148-36151	end	
128-36	36152-36158	output	
128-37	36159-36160	=	
128-38	36161-36170	File.open	
128-39	36170-36171	(	
128-40	36171-36172	'	
128-41	36172-36173	/	
128-42	36173-36176	tmp	
128-43	36176-36177	/	
128-44	36177-36188	profile.txt	
128-45	36188-36189	'	
128-46	36189-36190	,	
128-47	36190-36191	'	
128-48	36191-36192	w	
128-49	36192-36193	'	
128-50	36193-36194	)	
128-51	36195-36214	report.pretty_print	
128-52	36214-36215	(	
128-53	36215-36221	output	
128-54	36221-36222	)	
128-55	36223-36226	The	
128-56	36227-36233	report	
128-57	36234-36240	breaks	
128-58	36241-36245	down	
128-59	36246-36247	2	
128-60	36248-36251	key	
128-61	36252-36260	concepts	
128-62	36260-36261	:	
128-63	36262-36270	Retained	
128-64	36270-36271	:	
128-65	36272-36276	long	
128-66	36277-36282	lived	
128-67	36283-36289	memory	
128-68	36290-36293	use	
128-69	36294-36297	and	
128-70	36298-36304	object	
128-71	36305-36310	count	
128-72	36311-36319	retained	
128-73	36320-36323	due	
128-74	36324-36326	to	
128-75	36327-36330	the	
128-76	36331-36340	execution	
128-77	36341-36343	of	
128-78	36344-36347	the	
128-79	36348-36352	code	
128-80	36353-36358	block	
128-81	36358-36359	.	

#Text=Allocated: all object allocation and memory allocation during code block.
129-1	36360-36369	Allocated	
129-2	36369-36370	:	
129-3	36371-36374	all	
129-4	36375-36381	object	
129-5	36382-36392	allocation	
129-6	36393-36396	and	
129-7	36397-36403	memory	
129-8	36404-36414	allocation	
129-9	36415-36421	during	
129-10	36422-36426	code	
129-11	36427-36432	block	
129-12	36432-36433	.	

#Text=As a general rule, retained is always smaller than or equal to allocated.
130-1	36434-36436	As	
130-2	36437-36438	a	
130-3	36439-36446	general	
130-4	36447-36451	rule	
130-5	36451-36452	,	
130-6	36453-36461	retained	
130-7	36462-36464	is	
130-8	36465-36471	always	
130-9	36472-36479	smaller	
130-10	36480-36484	than	
130-11	36485-36487	or	
130-12	36488-36493	equal	
130-13	36494-36496	to	
130-14	36497-36506	allocated	
130-15	36506-36507	.	

#Text=The actual RSS cost is always slightly higher as MRI heaps are not squashed to size and memory fragments.
131-1	36508-36511	The	
131-2	36512-36518	actual	
131-3	36519-36522	RSS	
131-4	36523-36527	cost	
131-5	36528-36530	is	
131-6	36531-36537	always	
131-7	36538-36546	slightly	
131-8	36547-36553	higher	
131-9	36554-36556	as	
131-10	36557-36560	MRI	
131-11	36561-36566	heaps	
131-12	36567-36570	are	
131-13	36571-36574	not	
131-14	36575-36583	squashed	
131-15	36584-36586	to	
131-16	36587-36591	size	
131-17	36592-36595	and	
131-18	36596-36602	memory	
131-19	36603-36612	fragments	
131-20	36612-36613	.	

#Text=Rbtrace
#Text=One of the reasons of the increased memory footprint could be Ruby memory fragmentation.
132-1	36614-36621	Rbtrace	
132-2	36622-36625	One	
132-3	36626-36628	of	
132-4	36629-36632	the	
132-5	36633-36640	reasons	
132-6	36641-36643	of	
132-7	36644-36647	the	
132-8	36648-36657	increased	
132-9	36658-36664	memory	
132-10	36665-36674	footprint	
132-11	36675-36680	could	
132-12	36681-36683	be	
132-13	36684-36688	Ruby	
132-14	36689-36695	memory	
132-15	36696-36709	fragmentation	
132-16	36709-36710	.	

#Text=To diagnose it, you can visualize Ruby heap as described in this post by Aaron Patterson.
133-1	36711-36713	To	
133-2	36714-36722	diagnose	
133-3	36723-36725	it	
133-4	36725-36726	,	
133-5	36727-36730	you	
133-6	36731-36734	can	
133-7	36735-36744	visualize	
133-8	36745-36749	Ruby	
133-9	36750-36754	heap	
133-10	36755-36757	as	
133-11	36758-36767	described	
133-12	36768-36770	in	
133-13	36771-36775	this	
133-14	36776-36780	post	
133-15	36781-36783	by	
133-16	36784-36789	Aaron	
133-17	36790-36799	Patterson	
133-18	36799-36800	.	

#Text=To start, you want to dump the heap of the process you’re investigating to a JSON file.
134-1	36801-36803	To	
134-2	36804-36809	start	
134-3	36809-36810	,	
134-4	36811-36814	you	
134-5	36815-36819	want	
134-6	36820-36822	to	
134-7	36823-36827	dump	
134-8	36828-36831	the	
134-9	36832-36836	heap	
134-10	36837-36839	of	
134-11	36840-36843	the	
134-12	36844-36851	process	
134-13	36852-36855	you	
134-14	36855-36856	’	
134-15	36856-36858	re	
134-16	36859-36872	investigating	
134-17	36873-36875	to	
134-18	36876-36877	a	
134-19	36878-36882	JSON	
134-20	36883-36887	file	
134-21	36887-36888	.	

#Text=You need to run the command inside the process you’re exploring, you may do that with rbtrace.
#Text=rbtrace is already present in GitLab Gemfile, you just need to require it.
135-1	36889-36892	You	
135-2	36893-36897	need	
135-3	36898-36900	to	
135-4	36901-36904	run	
135-5	36905-36908	the	
135-6	36909-36916	command	
135-7	36917-36923	inside	
135-8	36924-36927	the	
135-9	36928-36935	process	
135-10	36936-36939	you	
135-11	36939-36940	’	
135-12	36940-36942	re	
135-13	36943-36952	exploring	
135-14	36952-36953	,	
135-15	36954-36957	you	
135-16	36958-36961	may	
135-17	36962-36964	do	
135-18	36965-36969	that	
135-19	36970-36974	with	
135-20	36975-36982	rbtrace	
135-21	36982-36983	.	
135-22	36984-36991	rbtrace	
135-23	36992-36994	is	
135-24	36995-37002	already	
135-25	37003-37010	present	
135-26	37011-37013	in	
135-27	37014-37020	GitLab	
135-28	37021-37028	Gemfile	
135-29	37028-37029	,	
135-30	37030-37033	you	
135-31	37034-37038	just	
135-32	37039-37043	need	
135-33	37044-37046	to	
135-34	37047-37054	require	
135-35	37055-37057	it	
135-36	37057-37058	.	

#Text=It could be achieved running webserver or Sidekiq with the environment variable set to ENABLE_RBTRACE=1.
136-1	37059-37061	It	
136-2	37062-37067	could	
136-3	37068-37070	be	
136-4	37071-37079	achieved	
136-5	37080-37087	running	
136-6	37088-37097	webserver	
136-7	37098-37100	or	
136-8	37101-37108	Sidekiq	
136-9	37109-37113	with	
136-10	37114-37117	the	
136-11	37118-37129	environment	
136-12	37130-37138	variable	
136-13	37139-37142	set	
136-14	37143-37145	to	
136-15	37146-37160	ENABLE_RBTRACE	
136-16	37160-37161	=	
136-17	37161-37162	1	
136-18	37162-37163	.	

#Text=To get the heap dump:
#Text=bundle exec rbtrace -p <PID> -e 'File.open("heap.json", "wb") { |t| ObjectSpace.dump_all(output: t) }'
#Text=Having the JSON, you finally could render a picture using the script provided by Aaron or similar:
#Text=ruby heapviz.rb heap.json
#Text=Fragmented Ruby heap snapshot could look like this:
#Text=Memory fragmentation could be reduced by tuning GC parameters as described in this post.
137-1	37164-37166	To	
137-2	37167-37170	get	
137-3	37171-37174	the	
137-4	37175-37179	heap	
137-5	37180-37184	dump	
137-6	37184-37185	:	
137-7	37186-37192	bundle	
137-8	37193-37197	exec	
137-9	37198-37205	rbtrace	
137-10	37206-37207	-	
137-11	37207-37208	p	
137-12	37209-37210	<	
137-13	37210-37213	PID	
137-14	37213-37214	>	
137-15	37215-37216	-	
137-16	37216-37217	e	
137-17	37218-37219	'	
137-18	37219-37228	File.open	
137-19	37228-37229	(	
137-20	37229-37230	"	
137-21	37230-37239	heap.json	
137-22	37239-37240	"	
137-23	37240-37241	,	
137-24	37242-37243	"	
137-25	37243-37245	wb	
137-26	37245-37246	"	
137-27	37246-37247	)	
137-28	37248-37249	{	
137-29	37250-37251	|	
137-30	37251-37252	t	
137-31	37252-37253	|	
137-32	37254-37274	ObjectSpace.dump_all	
137-33	37274-37275	(	
137-34	37275-37281	output	
137-35	37281-37282	:	
137-36	37283-37284	t	
137-37	37284-37285	)	
137-38	37286-37287	}	
137-39	37287-37288	'	
137-40	37289-37295	Having	
137-41	37296-37299	the	
137-42	37300-37304	JSON	
137-43	37304-37305	,	
137-44	37306-37309	you	
137-45	37310-37317	finally	
137-46	37318-37323	could	
137-47	37324-37330	render	
137-48	37331-37332	a	
137-49	37333-37340	picture	
137-50	37341-37346	using	
137-51	37347-37350	the	
137-52	37351-37357	script	
137-53	37358-37366	provided	
137-54	37367-37369	by	
137-55	37370-37375	Aaron	
137-56	37376-37378	or	
137-57	37379-37386	similar	
137-58	37386-37387	:	
137-59	37388-37392	ruby	
137-60	37393-37403	heapviz.rb	
137-61	37404-37413	heap.json	
137-62	37414-37424	Fragmented	
137-63	37425-37429	Ruby	
137-64	37430-37434	heap	
137-65	37435-37443	snapshot	
137-66	37444-37449	could	
137-67	37450-37454	look	
137-68	37455-37459	like	
137-69	37460-37464	this	
137-70	37464-37465	:	
137-71	37466-37472	Memory	
137-72	37473-37486	fragmentation	
137-73	37487-37492	could	
137-74	37493-37495	be	
137-75	37496-37503	reduced	
137-76	37504-37506	by	
137-77	37507-37513	tuning	
137-78	37514-37516	GC	
137-79	37517-37527	parameters	
137-80	37528-37530	as	
137-81	37531-37540	described	
137-82	37541-37543	in	
137-83	37544-37548	this	
137-84	37549-37553	post	
137-85	37553-37554	.	

#Text=This should be considered as a tradeoff, as it may affect overall performance of memory allocation and GC cycles.
138-1	37555-37559	This	
138-2	37560-37566	should	
138-3	37567-37569	be	
138-4	37570-37580	considered	
138-5	37581-37583	as	
138-6	37584-37585	a	
138-7	37586-37594	tradeoff	
138-8	37594-37595	,	
138-9	37596-37598	as	
138-10	37599-37601	it	
138-11	37602-37605	may	
138-12	37606-37612	affect	
138-13	37613-37620	overall	
138-14	37621-37632	performance	
138-15	37633-37635	of	
138-16	37636-37642	memory	
138-17	37643-37653	allocation	
138-18	37654-37657	and	
138-19	37658-37660	GC	
138-20	37661-37667	cycles	
138-21	37667-37668	.	

#Text=Importance of Changes
#Text=When working on performance improvements, it’s important to always ask yourself
#Text=the question “How important is it to improve the performance of this piece of
#Text=code?”.
139-1	37669-37679	Importance	
139-2	37680-37682	of	
139-3	37683-37690	Changes	
139-4	37691-37695	When	
139-5	37696-37703	working	
139-6	37704-37706	on	
139-7	37707-37718	performance	
139-8	37719-37731	improvements	
139-9	37731-37732	,	
139-10	37733-37735	it	
139-11	37735-37736	’	
139-12	37736-37737	s	
139-13	37738-37747	important	
139-14	37748-37750	to	
139-15	37751-37757	always	
139-16	37758-37761	ask	
139-17	37762-37770	yourself	
139-18	37771-37774	the	
139-19	37775-37783	question	
139-20	37784-37785	“	
139-21	37785-37788	How	
139-22	37789-37798	important	
139-23	37799-37801	is	
139-24	37802-37804	it	
139-25	37805-37807	to	
139-26	37808-37815	improve	
139-27	37816-37819	the	
139-28	37820-37831	performance	
139-29	37832-37834	of	
139-30	37835-37839	this	
139-31	37840-37845	piece	
139-32	37846-37848	of	
139-33	37849-37853	code	
139-34	37853-37854	?	
139-35	37854-37855	”	
139-36	37855-37856	.	

#Text=Not every piece of code is equally important and it would be a waste to
#Text=spend a week trying to improve something that only impacts a tiny fraction of
#Text=our users.
140-1	37857-37860	Not	
140-2	37861-37866	every	
140-3	37867-37872	piece	
140-4	37873-37875	of	
140-5	37876-37880	code	
140-6	37881-37883	is	
140-7	37884-37891	equally	
140-8	37892-37901	important	
140-9	37902-37905	and	
140-10	37906-37908	it	
140-11	37909-37914	would	
140-12	37915-37917	be	
140-13	37918-37919	a	
140-14	37920-37925	waste	
140-15	37926-37928	to	
140-16	37929-37934	spend	
140-17	37935-37936	a	
140-18	37937-37941	week	
140-19	37942-37948	trying	
140-20	37949-37951	to	
140-21	37952-37959	improve	
140-22	37960-37969	something	
140-23	37970-37974	that	
140-24	37975-37979	only	
140-25	37980-37987	impacts	
140-26	37988-37989	a	
140-27	37990-37994	tiny	
140-28	37995-38003	fraction	
140-29	38004-38006	of	
140-30	38007-38010	our	
140-31	38011-38016	users	
140-32	38016-38017	.	

#Text=For example, spending a week trying to squeeze 10 milliseconds out of
#Text=a method is a waste of time when you could have spent a week squeezing out 10
#Text=seconds elsewhere.
141-1	38018-38021	For	
141-2	38022-38029	example	
141-3	38029-38030	,	
141-4	38031-38039	spending	
141-5	38040-38041	a	
141-6	38042-38046	week	
141-7	38047-38053	trying	
141-8	38054-38056	to	
141-9	38057-38064	squeeze	
141-10	38065-38067	10	
141-11	38068-38080	milliseconds	
141-12	38081-38084	out	
141-13	38085-38087	of	
141-14	38088-38089	a	
141-15	38090-38096	method	
141-16	38097-38099	is	
141-17	38100-38101	a	
141-18	38102-38107	waste	
141-19	38108-38110	of	
141-20	38111-38115	time	
141-21	38116-38120	when	
141-22	38121-38124	you	
141-23	38125-38130	could	
141-24	38131-38135	have	
141-25	38136-38141	spent	
141-26	38142-38143	a	
141-27	38144-38148	week	
141-28	38149-38158	squeezing	
141-29	38159-38162	out	
141-30	38163-38165	10	
141-31	38166-38173	seconds	
141-32	38174-38183	elsewhere	
141-33	38183-38184	.	

#Text=There is no clear set of steps that you can follow to determine if a certain
#Text=piece of code is worth optimizing.
142-1	38185-38190	There	
142-2	38191-38193	is	
142-3	38194-38196	no	
142-4	38197-38202	clear	
142-5	38203-38206	set	
142-6	38207-38209	of	
142-7	38210-38215	steps	
142-8	38216-38220	that	
142-9	38221-38224	you	
142-10	38225-38228	can	
142-11	38229-38235	follow	
142-12	38236-38238	to	
142-13	38239-38248	determine	
142-14	38249-38251	if	
142-15	38252-38253	a	
142-16	38254-38261	certain	
142-17	38262-38267	piece	
142-18	38268-38270	of	
142-19	38271-38275	code	
142-20	38276-38278	is	
142-21	38279-38284	worth	
142-22	38285-38295	optimizing	
142-23	38295-38296	.	

#Text=The only two things you can do are:
#Text=Think about what the code does, how it’s used, how many times it’s called and
#Text=how much time is spent in it relative to the total execution time (for example, the
#Text=total time spent in a web request).
143-1	38297-38300	The	
143-2	38301-38305	only	
143-3	38306-38309	two	
143-4	38310-38316	things	
143-5	38317-38320	you	
143-6	38321-38324	can	
143-7	38325-38327	do	
143-8	38328-38331	are	
143-9	38331-38332	:	
143-10	38333-38338	Think	
143-11	38339-38344	about	
143-12	38345-38349	what	
143-13	38350-38353	the	
143-14	38354-38358	code	
143-15	38359-38363	does	
143-16	38363-38364	,	
143-17	38365-38368	how	
143-18	38369-38371	it	
143-19	38371-38372	’	
143-20	38372-38373	s	
143-21	38374-38378	used	
143-22	38378-38379	,	
143-23	38380-38383	how	
143-24	38384-38388	many	
143-25	38389-38394	times	
143-26	38395-38397	it	
143-27	38397-38398	’	
143-28	38398-38399	s	
143-29	38400-38406	called	
143-30	38407-38410	and	
143-31	38411-38414	how	
143-32	38415-38419	much	
143-33	38420-38424	time	
143-34	38425-38427	is	
143-35	38428-38433	spent	
143-36	38434-38436	in	
143-37	38437-38439	it	
143-38	38440-38448	relative	
143-39	38449-38451	to	
143-40	38452-38455	the	
143-41	38456-38461	total	
143-42	38462-38471	execution	
143-43	38472-38476	time	
143-44	38477-38478	(	
143-45	38478-38481	for	
143-46	38482-38489	example	
143-47	38489-38490	,	
143-48	38491-38494	the	
143-49	38495-38500	total	
143-50	38501-38505	time	
143-51	38506-38511	spent	
143-52	38512-38514	in	
143-53	38515-38516	a	
143-54	38517-38520	web	
143-55	38521-38528	request	
143-56	38528-38529	)	
143-57	38529-38530	.	

#Text=Ask others (preferably in the form of an issue).
144-1	38531-38534	Ask	
144-2	38535-38541	others	
144-3	38542-38543	(	
144-4	38543-38553	preferably	
144-5	38554-38556	in	
144-6	38557-38560	the	
144-7	38561-38565	form	
144-8	38566-38568	of	
144-9	38569-38571	an	
144-10	38572-38577	issue	
144-11	38577-38578	)	
144-12	38578-38579	.	

#Text=Some examples of changes that are not really important/worth the effort:
#Text=Replacing double quotes with single quotes.
145-1	38580-38584	Some	
145-2	38585-38593	examples	
145-3	38594-38596	of	
145-4	38597-38604	changes	
145-5	38605-38609	that	
145-6	38610-38613	are	
145-7	38614-38617	not	
145-8	38618-38624	really	
145-9	38625-38634	important	
145-10	38634-38635	/	
145-11	38635-38640	worth	
145-12	38641-38644	the	
145-13	38645-38651	effort	
145-14	38651-38652	:	
145-15	38653-38662	Replacing	
145-16	38663-38669	double	
145-17	38670-38676	quotes	
145-18	38677-38681	with	
145-19	38682-38688	single	
145-20	38689-38695	quotes	
145-21	38695-38696	.	

#Text=Replacing usage of Array with Set when the list of values is very small.
146-1	38697-38706	Replacing	
146-2	38707-38712	usage	
146-3	38713-38715	of	
146-4	38716-38721	Array	
146-5	38722-38726	with	
146-6	38727-38730	Set	
146-7	38731-38735	when	
146-8	38736-38739	the	
146-9	38740-38744	list	
146-10	38745-38747	of	
146-11	38748-38754	values	
146-12	38755-38757	is	
146-13	38758-38762	very	
146-14	38763-38768	small	
146-15	38768-38769	.	

#Text=Replacing library A with library B when both only take up 0.1% of the total
#Text=execution time.
147-1	38770-38779	Replacing	
147-2	38780-38787	library	
147-3	38788-38789	A	
147-4	38790-38794	with	
147-5	38795-38802	library	
147-6	38803-38804	B	
147-7	38805-38809	when	
147-8	38810-38814	both	
147-9	38815-38819	only	
147-10	38820-38824	take	
147-11	38825-38827	up	
147-12	38828-38832	0.1%	
147-13	38833-38835	of	
147-14	38836-38839	the	
147-15	38840-38845	total	
147-16	38846-38855	execution	
147-17	38856-38860	time	
147-18	38860-38861	.	

#Text=Calling freeze on every string (see String Freezing).
148-1	38862-38869	Calling	
148-2	38870-38876	freeze	
148-3	38877-38879	on	
148-4	38880-38885	every	
148-5	38886-38892	string	
148-6	38893-38894	(	
148-7	38894-38897	see	
148-8	38898-38904	String	
148-9	38905-38913	Freezing	
148-10	38913-38914	)	
148-11	38914-38915	.	

#Text=Slow Operations & Sidekiq
#Text=Slow operations, like merging branches, or operations that are prone to errors
#Text=(using external APIs) should be performed in a Sidekiq worker instead of
#Text=directly in a web request as much as possible.
149-1	38916-38920	Slow	
149-2	38921-38931	Operations	
149-3	38932-38933	&	
149-4	38934-38941	Sidekiq	
149-5	38942-38946	Slow	
149-6	38947-38957	operations	
149-7	38957-38958	,	
149-8	38959-38963	like	
149-9	38964-38971	merging	
149-10	38972-38980	branches	
149-11	38980-38981	,	
149-12	38982-38984	or	
149-13	38985-38995	operations	
149-14	38996-39000	that	
149-15	39001-39004	are	
149-16	39005-39010	prone	
149-17	39011-39013	to	
149-18	39014-39020	errors	
149-19	39021-39022	(	
149-20	39022-39027	using	
149-21	39028-39036	external	
149-22	39037-39041	APIs	
149-23	39041-39042	)	
149-24	39043-39049	should	
149-25	39050-39052	be	
149-26	39053-39062	performed	
149-27	39063-39065	in	
149-28	39066-39067	a	
149-29	39068-39075	Sidekiq	
149-30	39076-39082	worker	
149-31	39083-39090	instead	
149-32	39091-39093	of	
149-33	39094-39102	directly	
149-34	39103-39105	in	
149-35	39106-39107	a	
149-36	39108-39111	web	
149-37	39112-39119	request	
149-38	39120-39122	as	
149-39	39123-39127	much	
149-40	39128-39130	as	
149-41	39131-39139	possible	
149-42	39139-39140	.	

#Text=This has numerous benefits such
#Text=as:
#Text=An error doesn’t prevent the request from completing.
150-1	39141-39145	This	
150-2	39146-39149	has	
150-3	39150-39158	numerous	
150-4	39159-39167	benefits	
150-5	39168-39172	such	
150-6	39173-39175	as	
150-7	39175-39176	:	
150-8	39177-39179	An	
150-9	39180-39185	error	
150-10	39186-39191	doesn	
150-11	39191-39192	’	
150-12	39192-39193	t	
150-13	39194-39201	prevent	
150-14	39202-39205	the	
150-15	39206-39213	request	
150-16	39214-39218	from	
150-17	39219-39229	completing	
150-18	39229-39230	.	

#Text=The process being slow doesn’t affect the loading time of a page.
151-1	39231-39234	The	
151-2	39235-39242	process	
151-3	39243-39248	being	
151-4	39249-39253	slow	
151-5	39254-39259	doesn	
151-6	39259-39260	’	
151-7	39260-39261	t	
151-8	39262-39268	affect	
151-9	39269-39272	the	
151-10	39273-39280	loading	
151-11	39281-39285	time	
151-12	39286-39288	of	
151-13	39289-39290	a	
151-14	39291-39295	page	
151-15	39295-39296	.	

#Text=In case of a failure you can retry the process (Sidekiq takes care of
#Text=this automatically).
152-1	39297-39299	In	
152-2	39300-39304	case	
152-3	39305-39307	of	
152-4	39308-39309	a	
152-5	39310-39317	failure	
152-6	39318-39321	you	
152-7	39322-39325	can	
152-8	39326-39331	retry	
152-9	39332-39335	the	
152-10	39336-39343	process	
152-11	39344-39345	(	
152-12	39345-39352	Sidekiq	
152-13	39353-39358	takes	
152-14	39359-39363	care	
152-15	39364-39366	of	
152-16	39367-39371	this	
152-17	39372-39385	automatically	
152-18	39385-39386	)	
152-19	39386-39387	.	

#Text=By isolating the code from a web request it should be easier to test
#Text=and maintain.
153-1	39388-39390	By	
153-2	39391-39400	isolating	
153-3	39401-39404	the	
153-4	39405-39409	code	
153-5	39410-39414	from	
153-6	39415-39416	a	
153-7	39417-39420	web	
153-8	39421-39428	request	
153-9	39429-39431	it	
153-10	39432-39438	should	
153-11	39439-39441	be	
153-12	39442-39448	easier	
153-13	39449-39451	to	
153-14	39452-39456	test	
153-15	39457-39460	and	
153-16	39461-39469	maintain	
153-17	39469-39470	.	

#Text=It’s especially important to use Sidekiq as much as possible when dealing with
#Text=Git operations as these operations can take quite some time to complete
#Text=depending on the performance of the underlying storage system.
154-1	39471-39473	It	
154-2	39473-39474	’	
154-3	39474-39475	s	
154-4	39476-39486	especially	
154-5	39487-39496	important	
154-6	39497-39499	to	
154-7	39500-39503	use	
154-8	39504-39511	Sidekiq	
154-9	39512-39514	as	
154-10	39515-39519	much	
154-11	39520-39522	as	
154-12	39523-39531	possible	
154-13	39532-39536	when	
154-14	39537-39544	dealing	
154-15	39545-39549	with	
154-16	39550-39553	Git	
154-17	39554-39564	operations	
154-18	39565-39567	as	
154-19	39568-39573	these	
154-20	39574-39584	operations	
154-21	39585-39588	can	
154-22	39589-39593	take	
154-23	39594-39599	quite	
154-24	39600-39604	some	
154-25	39605-39609	time	
154-26	39610-39612	to	
154-27	39613-39621	complete	
154-28	39622-39631	depending	
154-29	39632-39634	on	
154-30	39635-39638	the	
154-31	39639-39650	performance	
154-32	39651-39653	of	
154-33	39654-39657	the	
154-34	39658-39668	underlying	
154-35	39669-39676	storage	
154-36	39677-39683	system	
154-37	39683-39684	.	

#Text=Git Operations
#Text=Care should be taken to not run unnecessary Git operations.
155-1	39685-39688	Git	
155-2	39689-39699	Operations	
155-3	39700-39704	Care	
155-4	39705-39711	should	
155-5	39712-39714	be	
155-6	39715-39720	taken	
155-7	39721-39723	to	
155-8	39724-39727	not	
155-9	39728-39731	run	
155-10	39732-39743	unnecessary	
155-11	39744-39747	Git	
155-12	39748-39758	operations	
155-13	39758-39759	.	

#Text=For example,
#Text=retrieving the list of branch names using Repository#branch_names can be done
#Text=without an explicit check if a repository exists or not.
156-1	39760-39763	For	
156-2	39764-39771	example	
156-3	39771-39772	,	
156-4	39773-39783	retrieving	
156-5	39784-39787	the	
156-6	39788-39792	list	
156-7	39793-39795	of	
156-8	39796-39802	branch	
156-9	39803-39808	names	
156-10	39809-39814	using	
156-11	39815-39825	Repository	
156-12	39825-39826	#	
156-13	39826-39838	branch_names	
156-14	39839-39842	can	
156-15	39843-39845	be	
156-16	39846-39850	done	
156-17	39851-39858	without	
156-18	39859-39861	an	
156-19	39862-39870	explicit	
156-20	39871-39876	check	
156-21	39877-39879	if	
156-22	39880-39881	a	
156-23	39882-39892	repository	
156-24	39893-39899	exists	
156-25	39900-39902	or	
156-26	39903-39906	not	
156-27	39906-39907	.	

#Text=In other words, instead
#Text=of this:
#Text=if repository.exists?
157-1	39908-39910	In	
157-2	39911-39916	other	
157-3	39917-39922	words	
157-4	39922-39923	,	
157-5	39924-39931	instead	
157-6	39932-39934	of	
157-7	39935-39939	this	
157-8	39939-39940	:	
157-9	39941-39943	if	
157-10	39944-39961	repository.exists	
157-11	39961-39962	?	

#Text=repository.branch_names.each do |name|
#Text=...
#Text=end
#Text=end
#Text=You can just write:
#Text=repository.branch_names.each do |name|
#Text=...
#Text=end
#Text=Caching
#Text=Operations that often return the same result should be cached using Redis,
#Text=in particular Git operations.
158-1	39963-39991	repository.branch_names.each	
158-2	39992-39994	do	
158-3	39995-39996	|	
158-4	39996-40000	name	
158-5	40000-40001	|	
158-6	40002-40003	.	
158-7	40003-40004	.	
158-8	40004-40005	.	
158-9	40006-40009	end	
158-10	40010-40013	end	
158-11	40014-40017	You	
158-12	40018-40021	can	
158-13	40022-40026	just	
158-14	40027-40032	write	
158-15	40032-40033	:	
158-16	40034-40062	repository.branch_names.each	
158-17	40063-40065	do	
158-18	40066-40067	|	
158-19	40067-40071	name	
158-20	40071-40072	|	
158-21	40073-40074	.	
158-22	40074-40075	.	
158-23	40075-40076	.	
158-24	40077-40080	end	
158-25	40081-40088	Caching	
158-26	40089-40099	Operations	
158-27	40100-40104	that	
158-28	40105-40110	often	
158-29	40111-40117	return	
158-30	40118-40121	the	
158-31	40122-40126	same	
158-32	40127-40133	result	
158-33	40134-40140	should	
158-34	40141-40143	be	
158-35	40144-40150	cached	
158-36	40151-40156	using	
158-37	40157-40162	Redis	
158-38	40162-40163	,	
158-39	40164-40166	in	
158-40	40167-40177	particular	
158-41	40178-40181	Git	
158-42	40182-40192	operations	
158-43	40192-40193	.	

#Text=When caching data in Redis, make sure the cache is
#Text=flushed whenever needed.
159-1	40194-40198	When	
159-2	40199-40206	caching	
159-3	40207-40211	data	
159-4	40212-40214	in	
159-5	40215-40220	Redis	
159-6	40220-40221	,	
159-7	40222-40226	make	
159-8	40227-40231	sure	
159-9	40232-40235	the	
159-10	40236-40241	cache	
159-11	40242-40244	is	
159-12	40245-40252	flushed	
159-13	40253-40261	whenever	
159-14	40262-40268	needed	
159-15	40268-40269	.	

#Text=For example, a cache for the list of tags should be
#Text=flushed whenever a new tag is pushed or a tag is removed.
160-1	40270-40273	For	
160-2	40274-40281	example	
160-3	40281-40282	,	
160-4	40283-40284	a	
160-5	40285-40290	cache	
160-6	40291-40294	for	
160-7	40295-40298	the	
160-8	40299-40303	list	
160-9	40304-40306	of	
160-10	40307-40311	tags	
160-11	40312-40318	should	
160-12	40319-40321	be	
160-13	40322-40329	flushed	
160-14	40330-40338	whenever	
160-15	40339-40340	a	
160-16	40341-40344	new	
160-17	40345-40348	tag	
160-18	40349-40351	is	
160-19	40352-40358	pushed	
160-20	40359-40361	or	
160-21	40362-40363	a	
160-22	40364-40367	tag	
160-23	40368-40370	is	
160-24	40371-40378	removed	
160-25	40378-40379	.	

#Text=When adding cache expiration code for repositories, this code should be placed
#Text=in one of the before/after hooks residing in the Repository class.
161-1	40380-40384	When	
161-2	40385-40391	adding	
161-3	40392-40397	cache	
161-4	40398-40408	expiration	
161-5	40409-40413	code	
161-6	40414-40417	for	
161-7	40418-40430	repositories	
161-8	40430-40431	,	
161-9	40432-40436	this	
161-10	40437-40441	code	
161-11	40442-40448	should	
161-12	40449-40451	be	
161-13	40452-40458	placed	
161-14	40459-40461	in	
161-15	40462-40465	one	
161-16	40466-40468	of	
161-17	40469-40472	the	
161-18	40473-40479	before	
161-19	40479-40480	/	
161-20	40480-40485	after	
161-21	40486-40491	hooks	
161-22	40492-40500	residing	
161-23	40501-40503	in	
161-24	40504-40507	the	
161-25	40508-40518	Repository	
161-26	40519-40524	class	
161-27	40524-40525	.	

#Text=For example,
#Text=if a cache should be flushed after importing a repository this code should be
#Text=added to Repository#after_import.
162-1	40526-40529	For	
162-2	40530-40537	example	
162-3	40537-40538	,	
162-4	40539-40541	if	
162-5	40542-40543	a	
162-6	40544-40549	cache	
162-7	40550-40556	should	
162-8	40557-40559	be	
162-9	40560-40567	flushed	
162-10	40568-40573	after	
162-11	40574-40583	importing	
162-12	40584-40585	a	
162-13	40586-40596	repository	
162-14	40597-40601	this	
162-15	40602-40606	code	
162-16	40607-40613	should	
162-17	40614-40616	be	
162-18	40617-40622	added	
162-19	40623-40625	to	
162-20	40626-40636	Repository	
162-21	40636-40637	#	
162-22	40637-40649	after_import	
162-23	40649-40650	.	

#Text=This ensures the cache logic stays within
#Text=the Repository class instead of leaking into other classes.
163-1	40651-40655	This	
163-2	40656-40663	ensures	
163-3	40664-40667	the	
163-4	40668-40673	cache	
163-5	40674-40679	logic	
163-6	40680-40685	stays	
163-7	40686-40692	within	
163-8	40693-40696	the	
163-9	40697-40707	Repository	
163-10	40708-40713	class	
163-11	40714-40721	instead	
163-12	40722-40724	of	
163-13	40725-40732	leaking	
163-14	40733-40737	into	
163-15	40738-40743	other	
163-16	40744-40751	classes	
163-17	40751-40752	.	

#Text=When caching data, make sure to also memoize the result in an instance variable.
164-1	40753-40757	When	
164-2	40758-40765	caching	
164-3	40766-40770	data	
164-4	40770-40771	,	
164-5	40772-40776	make	
164-6	40777-40781	sure	
164-7	40782-40784	to	
164-8	40785-40789	also	
164-9	40790-40797	memoize	
164-10	40798-40801	the	
164-11	40802-40808	result	
164-12	40809-40811	in	
164-13	40812-40814	an	
164-14	40815-40823	instance	
164-15	40824-40832	variable	
164-16	40832-40833	.	

#Text=While retrieving data from Redis is much faster than raw Git operations, it still
#Text=has overhead.
165-1	40834-40839	While	
165-2	40840-40850	retrieving	
165-3	40851-40855	data	
165-4	40856-40860	from	
165-5	40861-40866	Redis	
165-6	40867-40869	is	
165-7	40870-40874	much	
165-8	40875-40881	faster	
165-9	40882-40886	than	
165-10	40887-40890	raw	
165-11	40891-40894	Git	
165-12	40895-40905	operations	
165-13	40905-40906	,	
165-14	40907-40909	it	
165-15	40910-40915	still	
165-16	40916-40919	has	
165-17	40920-40928	overhead	
165-18	40928-40929	.	

#Text=By caching the result in an instance variable, repeated calls to
#Text=the same method don’t retrieve data from Redis upon every call.
166-1	40930-40932	By	
166-2	40933-40940	caching	
166-3	40941-40944	the	
166-4	40945-40951	result	
166-5	40952-40954	in	
166-6	40955-40957	an	
166-7	40958-40966	instance	
166-8	40967-40975	variable	
166-9	40975-40976	,	
166-10	40977-40985	repeated	
166-11	40986-40991	calls	
166-12	40992-40994	to	
166-13	40995-40998	the	
166-14	40999-41003	same	
166-15	41004-41010	method	
166-16	41011-41014	don	
166-17	41014-41015	’	
166-18	41015-41016	t	
166-19	41017-41025	retrieve	
166-20	41026-41030	data	
166-21	41031-41035	from	
166-22	41036-41041	Redis	
166-23	41042-41046	upon	
166-24	41047-41052	every	
166-25	41053-41057	call	
166-26	41057-41058	.	

#Text=When
#Text=memoizing cached data in an instance variable, make sure to also reset the
#Text=instance variable when flushing the cache.
167-1	41059-41063	When	
167-2	41064-41073	memoizing	
167-3	41074-41080	cached	
167-4	41081-41085	data	
167-5	41086-41088	in	
167-6	41089-41091	an	
167-7	41092-41100	instance	
167-8	41101-41109	variable	
167-9	41109-41110	,	
167-10	41111-41115	make	
167-11	41116-41120	sure	
167-12	41121-41123	to	
167-13	41124-41128	also	
167-14	41129-41134	reset	
167-15	41135-41138	the	
167-16	41139-41147	instance	
167-17	41148-41156	variable	
167-18	41157-41161	when	
167-19	41162-41170	flushing	
167-20	41171-41174	the	
167-21	41175-41180	cache	
167-22	41180-41181	.	

#Text=An example:
#Text=def first_branch
#Text=@first_branch ||= cache.fetch(:first_branch) { branches.first }
#Text=end
#Text=def expire_first_branch_cache
#Text=cache.expire(:first_branch)
#Text=@first_branch = nil
#Text=end
#Text=String Freezing
#Text=In recent Ruby versions calling freeze on a String leads to it being allocated
#Text=only once and re-used.
168-1	41182-41184	An	
168-2	41185-41192	example	
168-3	41192-41193	:	
168-4	41194-41197	def	
168-5	41198-41210	first_branch	
168-6	41211-41212	@	
168-7	41212-41224	first_branch	
168-8	41225-41226	|	
168-9	41226-41227	|	
168-10	41227-41228	=	
168-11	41229-41240	cache.fetch	
168-12	41240-41241	(	
168-13	41241-41242	:	
168-14	41242-41254	first_branch	
168-15	41254-41255	)	
168-16	41256-41257	{	
168-17	41258-41272	branches.first	
168-18	41273-41274	}	
168-19	41275-41278	end	
168-20	41279-41282	def	
168-21	41283-41308	expire_first_branch_cache	
168-22	41309-41321	cache.expire	
168-23	41321-41322	(	
168-24	41322-41323	:	
168-25	41323-41335	first_branch	
168-26	41335-41336	)	
168-27	41337-41338	@	
168-28	41338-41350	first_branch	
168-29	41351-41352	=	
168-30	41353-41356	nil	
168-31	41357-41360	end	
168-32	41361-41367	String	
168-33	41368-41376	Freezing	
168-34	41377-41379	In	
168-35	41380-41386	recent	
168-36	41387-41391	Ruby	
168-37	41392-41400	versions	
168-38	41401-41408	calling	
168-39	41409-41415	freeze	
168-40	41416-41418	on	
168-41	41419-41420	a	
168-42	41421-41427	String	
168-43	41428-41433	leads	
168-44	41434-41436	to	
168-45	41437-41439	it	
168-46	41440-41445	being	
168-47	41446-41455	allocated	
168-48	41456-41460	only	
168-49	41461-41465	once	
168-50	41466-41469	and	
168-51	41470-41477	re-used	
168-52	41477-41478	.	

#Text=For example, on Ruby 2.3 or later this only allocates the
#Text=“foo” String once:
#Text=10.times do
#Text='foo'.freeze
#Text=end
#Text=Depending on the size of the String and how frequently it would be allocated
#Text=(before the .freeze call was added), this may make things faster, but
#Text=this isn’t guaranteed.
169-1	41479-41482	For	
169-2	41483-41490	example	
169-3	41490-41491	,	
169-4	41492-41494	on	
169-5	41495-41499	Ruby	
169-6	41500-41503	2.3	
169-7	41504-41506	or	
169-8	41507-41512	later	
169-9	41513-41517	this	
169-10	41518-41522	only	
169-11	41523-41532	allocates	
169-12	41533-41536	the	
169-13	41537-41538	“	
169-14	41538-41541	foo	
169-15	41541-41542	”	
169-16	41543-41549	String	
169-17	41550-41554	once	
169-18	41554-41555	:	
169-19	41556-41558	10	
169-20	41558-41559	.	
169-21	41559-41564	times	
169-22	41565-41567	do	
169-23	41568-41569	'	
169-24	41569-41572	foo	
169-25	41572-41573	'	
169-26	41573-41574	.	
169-27	41574-41580	freeze	
169-28	41581-41584	end	
169-29	41585-41594	Depending	
169-30	41595-41597	on	
169-31	41598-41601	the	
169-32	41602-41606	size	
169-33	41607-41609	of	
169-34	41610-41613	the	
169-35	41614-41620	String	
169-36	41621-41624	and	
169-37	41625-41628	how	
169-38	41629-41639	frequently	
169-39	41640-41642	it	
169-40	41643-41648	would	
169-41	41649-41651	be	
169-42	41652-41661	allocated	
169-43	41662-41663	(	
169-44	41663-41669	before	
169-45	41670-41673	the	
169-46	41674-41675	.	
169-47	41675-41681	freeze	
169-48	41682-41686	call	
169-49	41687-41690	was	
169-50	41691-41696	added	
169-51	41696-41697	)	
169-52	41697-41698	,	
169-53	41699-41703	this	
169-54	41704-41707	may	
169-55	41708-41712	make	
169-56	41713-41719	things	
169-57	41720-41726	faster	
169-58	41726-41727	,	
169-59	41728-41731	but	
169-60	41732-41736	this	
169-61	41737-41740	isn	
169-62	41740-41741	’	
169-63	41741-41742	t	
169-64	41743-41753	guaranteed	
169-65	41753-41754	.	

#Text=Strings are frozen by default in Ruby 3.0.
170-1	41755-41762	Strings	
170-2	41763-41766	are	
170-3	41767-41773	frozen	
170-4	41774-41776	by	
170-5	41777-41784	default	
170-6	41785-41787	in	
170-7	41788-41792	Ruby	
170-8	41793-41796	3.0	
170-9	41796-41797	.	

#Text=To prepare our codebase for
#Text=this eventuality, we are adding the following header to all Ruby files:
#Text=# frozen_string_literal: true
#Text=This may cause test failures in the code that expects to be able to manipulate
#Text=strings.
171-1	41798-41800	To	
171-2	41801-41808	prepare	
171-3	41809-41812	our	
171-4	41813-41821	codebase	
171-5	41822-41825	for	
171-6	41826-41830	this	
171-7	41831-41842	eventuality	
171-8	41842-41843	,	
171-9	41844-41846	we	
171-10	41847-41850	are	
171-11	41851-41857	adding	
171-12	41858-41861	the	
171-13	41862-41871	following	
171-14	41872-41878	header	
171-15	41879-41881	to	
171-16	41882-41885	all	
171-17	41886-41890	Ruby	
171-18	41891-41896	files	
171-19	41896-41897	:	
171-20	41898-41899	#	
171-21	41900-41921	frozen_string_literal	
171-22	41921-41922	:	
171-23	41923-41927	true	
171-24	41928-41932	This	
171-25	41933-41936	may	
171-26	41937-41942	cause	
171-27	41943-41947	test	
171-28	41948-41956	failures	
171-29	41957-41959	in	
171-30	41960-41963	the	
171-31	41964-41968	code	
171-32	41969-41973	that	
171-33	41974-41981	expects	
171-34	41982-41984	to	
171-35	41985-41987	be	
171-36	41988-41992	able	
171-37	41993-41995	to	
171-38	41996-42006	manipulate	
171-39	42007-42014	strings	
171-40	42014-42015	.	

#Text=Instead of using dup, use the unary plus to get an unfrozen string:
#Text=test = +"hello"
#Text=test += " world"
#Text=When adding new Ruby files, please check that you can add the above header,
#Text=as omitting it may lead to style check failures.
172-1	42016-42023	Instead	
172-2	42024-42026	of	
172-3	42027-42032	using	
172-4	42033-42036	dup	
172-5	42036-42037	,	
172-6	42038-42041	use	
172-7	42042-42045	the	
172-8	42046-42051	unary	
172-9	42052-42056	plus	
172-10	42057-42059	to	
172-11	42060-42063	get	
172-12	42064-42066	an	
172-13	42067-42075	unfrozen	
172-14	42076-42082	string	
172-15	42082-42083	:	
172-16	42084-42088	test	
172-17	42089-42090	=	
172-18	42091-42092	+	
172-19	42092-42093	"	
172-20	42093-42098	hello	
172-21	42098-42099	"	
172-22	42100-42104	test	
172-23	42105-42106	+	
172-24	42106-42107	=	
172-25	42108-42109	"	
172-26	42110-42115	world	
172-27	42115-42116	"	
172-28	42117-42121	When	
172-29	42122-42128	adding	
172-30	42129-42132	new	
172-31	42133-42137	Ruby	
172-32	42138-42143	files	
172-33	42143-42144	,	
172-34	42145-42151	please	
172-35	42152-42157	check	
172-36	42158-42162	that	
172-37	42163-42166	you	
172-38	42167-42170	can	
172-39	42171-42174	add	
172-40	42175-42178	the	
172-41	42179-42184	above	
172-42	42185-42191	header	
172-43	42191-42192	,	
172-44	42193-42195	as	
172-45	42196-42204	omitting	
172-46	42205-42207	it	
172-47	42208-42211	may	
172-48	42212-42216	lead	
172-49	42217-42219	to	
172-50	42220-42225	style	
172-51	42226-42231	check	
172-52	42232-42240	failures	
172-53	42240-42241	.	

#Text=Banzai pipelines and filters
#Text=When writing or updating Banzai filters and pipelines,
#Text=it can be difficult to understand what the performance of the filter is, and what effect it might
#Text=have on the overall pipeline performance.
173-1	42242-42248	Banzai	
173-2	42249-42258	pipelines	
173-3	42259-42262	and	
173-4	42263-42270	filters	
173-5	42271-42275	When	
173-6	42276-42283	writing	
173-7	42284-42286	or	
173-8	42287-42295	updating	
173-9	42296-42302	Banzai	
173-10	42303-42310	filters	
173-11	42311-42314	and	
173-12	42315-42324	pipelines	
173-13	42324-42325	,	
173-14	42326-42328	it	
173-15	42329-42332	can	
173-16	42333-42335	be	
173-17	42336-42345	difficult	
173-18	42346-42348	to	
173-19	42349-42359	understand	
173-20	42360-42364	what	
173-21	42365-42368	the	
173-22	42369-42380	performance	
173-23	42381-42383	of	
173-24	42384-42387	the	
173-25	42388-42394	filter	
173-26	42395-42397	is	
173-27	42397-42398	,	
173-28	42399-42402	and	
173-29	42403-42407	what	
173-30	42408-42414	effect	
173-31	42415-42417	it	
173-32	42418-42423	might	
173-33	42424-42428	have	
173-34	42429-42431	on	
173-35	42432-42435	the	
173-36	42436-42443	overall	
173-37	42444-42452	pipeline	
173-38	42453-42464	performance	
173-39	42464-42465	.	

#Text=To perform benchmarks run:
#Text=bin/rake benchmark:banzai
#Text=This command generates output like this:
#Text=--> Benchmarking Full, Wiki, and Plain pipelines
#Text=Calculating -------------------------------------
#Text=Full pipeline
#Text=1.000
#Text=i/100ms
#Text=Wiki pipeline
#Text=1.000
#Text=i/100ms
#Text=Plain pipeline
#Text=1.000
#Text=i/100ms
#Text=-------------------------------------------------
#Text=Full pipeline
#Text=3.357
#Text=(±29.8%) i/s -
#Text=31.000
#Text=Wiki pipeline
#Text=2.893
#Text=(±34.6%) i/s -
#Text=25.000
#Text=10.677014s
#Text=Plain pipeline
#Text=15.447
#Text=(±32.4%) i/s -
#Text=119.000
#Text=Comparison:
#Text=Plain pipeline:
#Text=15.4 i/s
#Text=Full pipeline:
#Text=3.4 i/s - 4.60x slower
#Text=Wiki pipeline:
#Text=2.9 i/s - 5.34x slower
#Text=--> Benchmarking FullPipeline filters
#Text=Calculating -------------------------------------
#Text=Markdown
#Text=24.000
#Text=i/100ms
#Text=Plantuml
#Text=8.000
#Text=i/100ms
#Text=SpacedLink
#Text=22.000
#Text=i/100ms
#Text=...
174-1	42466-42468	To	
174-2	42469-42476	perform	
174-3	42477-42487	benchmarks	
174-4	42488-42491	run	
174-5	42491-42492	:	
174-6	42493-42496	bin	
174-7	42496-42497	/	
174-8	42497-42501	rake	
174-9	42502-42511	benchmark	
174-10	42511-42512	:	
174-11	42512-42518	banzai	
174-12	42519-42523	This	
174-13	42524-42531	command	
174-14	42532-42541	generates	
174-15	42542-42548	output	
174-16	42549-42553	like	
174-17	42554-42558	this	
174-18	42558-42559	:	
174-19	42560-42561	-	
174-20	42561-42562	-	
174-21	42562-42563	>	
174-22	42564-42576	Benchmarking	
174-23	42577-42581	Full	
174-24	42581-42582	,	
174-25	42583-42587	Wiki	
174-26	42587-42588	,	
174-27	42589-42592	and	
174-28	42593-42598	Plain	
174-29	42599-42608	pipelines	
174-30	42609-42620	Calculating	
174-31	42621-42622	-	
174-32	42622-42623	-	
174-33	42623-42624	-	
174-34	42624-42625	-	
174-35	42625-42626	-	
174-36	42626-42627	-	
174-37	42627-42628	-	
174-38	42628-42629	-	
174-39	42629-42630	-	
174-40	42630-42631	-	
174-41	42631-42632	-	
174-42	42632-42633	-	
174-43	42633-42634	-	
174-44	42634-42635	-	
174-45	42635-42636	-	
174-46	42636-42637	-	
174-47	42637-42638	-	
174-48	42638-42639	-	
174-49	42639-42640	-	
174-50	42640-42641	-	
174-51	42641-42642	-	
174-52	42642-42643	-	
174-53	42643-42644	-	
174-54	42644-42645	-	
174-55	42645-42646	-	
174-56	42646-42647	-	
174-57	42647-42648	-	
174-58	42648-42649	-	
174-59	42649-42650	-	
174-60	42650-42651	-	
174-61	42651-42652	-	
174-62	42652-42653	-	
174-63	42653-42654	-	
174-64	42654-42655	-	
174-65	42655-42656	-	
174-66	42656-42657	-	
174-67	42657-42658	-	
174-68	42659-42663	Full	
174-69	42664-42672	pipeline	
174-70	42673-42678	1.000	
174-71	42679-42680	i	
174-72	42680-42681	/	
174-73	42681-42686	100ms	
174-74	42687-42691	Wiki	
174-75	42692-42700	pipeline	
174-76	42701-42706	1.000	
174-77	42707-42708	i	
174-78	42708-42709	/	
174-79	42709-42714	100ms	
174-80	42715-42720	Plain	
174-81	42721-42729	pipeline	
174-82	42730-42735	1.000	
174-83	42736-42737	i	
174-84	42737-42738	/	
174-85	42738-42743	100ms	
174-86	42744-42745	-	
174-87	42745-42746	-	
174-88	42746-42747	-	
174-89	42747-42748	-	
174-90	42748-42749	-	
174-91	42749-42750	-	
174-92	42750-42751	-	
174-93	42751-42752	-	
174-94	42752-42753	-	
174-95	42753-42754	-	
174-96	42754-42755	-	
174-97	42755-42756	-	
174-98	42756-42757	-	
174-99	42757-42758	-	
174-100	42758-42759	-	
174-101	42759-42760	-	
174-102	42760-42761	-	
174-103	42761-42762	-	
174-104	42762-42763	-	
174-105	42763-42764	-	
174-106	42764-42765	-	
174-107	42765-42766	-	
174-108	42766-42767	-	
174-109	42767-42768	-	
174-110	42768-42769	-	
174-111	42769-42770	-	
174-112	42770-42771	-	
174-113	42771-42772	-	
174-114	42772-42773	-	
174-115	42773-42774	-	
174-116	42774-42775	-	
174-117	42775-42776	-	
174-118	42776-42777	-	
174-119	42777-42778	-	
174-120	42778-42779	-	
174-121	42779-42780	-	
174-122	42780-42781	-	
174-123	42781-42782	-	
174-124	42782-42783	-	
174-125	42783-42784	-	
174-126	42784-42785	-	
174-127	42785-42786	-	
174-128	42786-42787	-	
174-129	42787-42788	-	
174-130	42788-42789	-	
174-131	42789-42790	-	
174-132	42790-42791	-	
174-133	42791-42792	-	
174-134	42792-42793	-	
174-135	42794-42798	Full	
174-136	42799-42807	pipeline	
174-137	42808-42813	3.357	
174-138	42814-42815	(	
174-139	42815-42816	±	
174-140	42816-42821	29.8%	
174-141	42821-42822	)	
174-142	42823-42824	i	
174-143	42824-42825	/	
174-144	42825-42826	s	
174-145	42827-42828	-	
174-146	42829-42835	31.000	
174-147	42836-42840	Wiki	
174-148	42841-42849	pipeline	
174-149	42850-42855	2.893	
174-150	42856-42857	(	
174-151	42857-42858	±	
174-152	42858-42863	34.6%	
174-153	42863-42864	)	
174-154	42865-42866	i	
174-155	42866-42867	/	
174-156	42867-42868	s	
174-157	42869-42870	-	
174-158	42871-42877	25.000	
174-159	42878-42888	10.677014s	
174-160	42889-42894	Plain	
174-161	42895-42903	pipeline	
174-162	42904-42910	15.447	
174-163	42911-42912	(	
174-164	42912-42913	±	
174-165	42913-42918	32.4%	
174-166	42918-42919	)	
174-167	42920-42921	i	
174-168	42921-42922	/	
174-169	42922-42923	s	
174-170	42924-42925	-	
174-171	42926-42933	119.000	
174-172	42934-42944	Comparison	
174-173	42944-42945	:	
174-174	42946-42951	Plain	
174-175	42952-42960	pipeline	
174-176	42960-42961	:	
174-177	42962-42966	15.4	
174-178	42967-42968	i	
174-179	42968-42969	/	
174-180	42969-42970	s	
174-181	42971-42975	Full	
174-182	42976-42984	pipeline	
174-183	42984-42985	:	
174-184	42986-42989	3.4	
174-185	42990-42991	i	
174-186	42991-42992	/	
174-187	42992-42993	s	
174-188	42994-42995	-	
174-189	42996-43001	4.60x	
174-190	43002-43008	slower	
174-191	43009-43013	Wiki	
174-192	43014-43022	pipeline	
174-193	43022-43023	:	
174-194	43024-43027	2.9	
174-195	43028-43029	i	
174-196	43029-43030	/	
174-197	43030-43031	s	
174-198	43032-43033	-	
174-199	43034-43039	5.34x	
174-200	43040-43046	slower	
174-201	43047-43048	-	
174-202	43048-43049	-	
174-203	43049-43050	>	
174-204	43051-43063	Benchmarking	
174-205	43064-43076	FullPipeline	
174-206	43077-43084	filters	
174-207	43085-43096	Calculating	
174-208	43097-43098	-	
174-209	43098-43099	-	
174-210	43099-43100	-	
174-211	43100-43101	-	
174-212	43101-43102	-	
174-213	43102-43103	-	
174-214	43103-43104	-	
174-215	43104-43105	-	
174-216	43105-43106	-	
174-217	43106-43107	-	
174-218	43107-43108	-	
174-219	43108-43109	-	
174-220	43109-43110	-	
174-221	43110-43111	-	
174-222	43111-43112	-	
174-223	43112-43113	-	
174-224	43113-43114	-	
174-225	43114-43115	-	
174-226	43115-43116	-	
174-227	43116-43117	-	
174-228	43117-43118	-	
174-229	43118-43119	-	
174-230	43119-43120	-	
174-231	43120-43121	-	
174-232	43121-43122	-	
174-233	43122-43123	-	
174-234	43123-43124	-	
174-235	43124-43125	-	
174-236	43125-43126	-	
174-237	43126-43127	-	
174-238	43127-43128	-	
174-239	43128-43129	-	
174-240	43129-43130	-	
174-241	43130-43131	-	
174-242	43131-43132	-	
174-243	43132-43133	-	
174-244	43133-43134	-	
174-245	43135-43143	Markdown	
174-246	43144-43150	24.000	
174-247	43151-43152	i	
174-248	43152-43153	/	
174-249	43153-43158	100ms	
174-250	43159-43167	Plantuml	
174-251	43168-43173	8.000	
174-252	43174-43175	i	
174-253	43175-43176	/	
174-254	43176-43181	100ms	
174-255	43182-43192	SpacedLink	
174-256	43193-43199	22.000	
174-257	43200-43201	i	
174-258	43201-43202	/	
174-259	43202-43207	100ms	
174-260	43208-43209	.	
174-261	43209-43210	.	
174-262	43210-43211	.	

#Text=TaskList
#Text=49.000
#Text=i/100ms
#Text=InlineDiff
#Text=9.000
#Text=i/100ms
#Text=SetDirection
#Text=369.000
#Text=i/100ms
#Text=-------------------------------------------------
#Text=Markdown
#Text=237.796
#Text=(±16.4%) i/s -
#Text=2.304k
#Text=Plantuml
#Text=80.415
#Text=(±36.1%) i/s -
#Text=520.000
#Text=SpacedLink
#Text=168.188
#Text=(±10.1%) i/s -
#Text=1.672k
#Text=...
175-1	43212-43220	TaskList	
175-2	43221-43227	49.000	
175-3	43228-43229	i	
175-4	43229-43230	/	
175-5	43230-43235	100ms	
175-6	43236-43246	InlineDiff	
175-7	43247-43252	9.000	
175-8	43253-43254	i	
175-9	43254-43255	/	
175-10	43255-43260	100ms	
175-11	43261-43273	SetDirection	
175-12	43274-43281	369.000	
175-13	43282-43283	i	
175-14	43283-43284	/	
175-15	43284-43289	100ms	
175-16	43290-43291	-	
175-17	43291-43292	-	
175-18	43292-43293	-	
175-19	43293-43294	-	
175-20	43294-43295	-	
175-21	43295-43296	-	
175-22	43296-43297	-	
175-23	43297-43298	-	
175-24	43298-43299	-	
175-25	43299-43300	-	
175-26	43300-43301	-	
175-27	43301-43302	-	
175-28	43302-43303	-	
175-29	43303-43304	-	
175-30	43304-43305	-	
175-31	43305-43306	-	
175-32	43306-43307	-	
175-33	43307-43308	-	
175-34	43308-43309	-	
175-35	43309-43310	-	
175-36	43310-43311	-	
175-37	43311-43312	-	
175-38	43312-43313	-	
175-39	43313-43314	-	
175-40	43314-43315	-	
175-41	43315-43316	-	
175-42	43316-43317	-	
175-43	43317-43318	-	
175-44	43318-43319	-	
175-45	43319-43320	-	
175-46	43320-43321	-	
175-47	43321-43322	-	
175-48	43322-43323	-	
175-49	43323-43324	-	
175-50	43324-43325	-	
175-51	43325-43326	-	
175-52	43326-43327	-	
175-53	43327-43328	-	
175-54	43328-43329	-	
175-55	43329-43330	-	
175-56	43330-43331	-	
175-57	43331-43332	-	
175-58	43332-43333	-	
175-59	43333-43334	-	
175-60	43334-43335	-	
175-61	43335-43336	-	
175-62	43336-43337	-	
175-63	43337-43338	-	
175-64	43338-43339	-	
175-65	43340-43348	Markdown	
175-66	43349-43356	237.796	
175-67	43357-43358	(	
175-68	43358-43359	±	
175-69	43359-43364	16.4%	
175-70	43364-43365	)	
175-71	43366-43367	i	
175-72	43367-43368	/	
175-73	43368-43369	s	
175-74	43370-43371	-	
175-75	43372-43378	2.304k	
175-76	43379-43387	Plantuml	
175-77	43388-43394	80.415	
175-78	43395-43396	(	
175-79	43396-43397	±	
175-80	43397-43402	36.1%	
175-81	43402-43403	)	
175-82	43404-43405	i	
175-83	43405-43406	/	
175-84	43406-43407	s	
175-85	43408-43409	-	
175-86	43410-43417	520.000	
175-87	43418-43428	SpacedLink	
175-88	43429-43436	168.188	
175-89	43437-43438	(	
175-90	43438-43439	±	
175-91	43439-43444	10.1%	
175-92	43444-43445	)	
175-93	43446-43447	i	
175-94	43447-43448	/	
175-95	43448-43449	s	
175-96	43450-43451	-	
175-97	43452-43458	1.672k	
175-98	43459-43460	.	
175-99	43460-43461	.	
175-100	43461-43462	.	

#Text=TaskList
#Text=101.145
#Text=(± 6.9%) i/s -
#Text=1.029k
#Text=InlineDiff
#Text=52.925
#Text=(±15.1%) i/s -
#Text=522.000
#Text=SetDirection
#Text=3.728k (±17.2%) i/s -
#Text=34.317k in
#Text=10.617882s
#Text=Comparison:
#Text=Suggestion:
#Text=739616.9 i/s
#Text=Kroki:
#Text=306449.0 i/s - 2.41x slower
#Text=InlineGrafanaMetrics:
#Text=156535.6 i/s - 4.72x slower
#Text=SetDirection:
#Text=3728.3 i/s - 198.38x slower
#Text=...
176-1	43463-43471	TaskList	
176-2	43472-43479	101.145	
176-3	43480-43481	(	
176-4	43481-43482	±	
176-5	43483-43487	6.9%	
176-6	43487-43488	)	
176-7	43489-43490	i	
176-8	43490-43491	/	
176-9	43491-43492	s	
176-10	43493-43494	-	
176-11	43495-43501	1.029k	
176-12	43502-43512	InlineDiff	
176-13	43513-43519	52.925	
176-14	43520-43521	(	
176-15	43521-43522	±	
176-16	43522-43527	15.1%	
176-17	43527-43528	)	
176-18	43529-43530	i	
176-19	43530-43531	/	
176-20	43531-43532	s	
176-21	43533-43534	-	
176-22	43535-43542	522.000	
176-23	43543-43555	SetDirection	
176-24	43556-43562	3.728k	
176-25	43563-43564	(	
176-26	43564-43565	±	
176-27	43565-43570	17.2%	
176-28	43570-43571	)	
176-29	43572-43573	i	
176-30	43573-43574	/	
176-31	43574-43575	s	
176-32	43576-43577	-	
176-33	43578-43585	34.317k	
176-34	43586-43588	in	
176-35	43589-43599	10.617882s	
176-36	43600-43610	Comparison	
176-37	43610-43611	:	
176-38	43612-43622	Suggestion	
176-39	43622-43623	:	
176-40	43624-43632	739616.9	
176-41	43633-43634	i	
176-42	43634-43635	/	
176-43	43635-43636	s	
176-44	43637-43642	Kroki	
176-45	43642-43643	:	
176-46	43644-43652	306449.0	
176-47	43653-43654	i	
176-48	43654-43655	/	
176-49	43655-43656	s	
176-50	43657-43658	-	
176-51	43659-43664	2.41x	
176-52	43665-43671	slower	
176-53	43672-43692	InlineGrafanaMetrics	
176-54	43692-43693	:	
176-55	43694-43702	156535.6	
176-56	43703-43704	i	
176-57	43704-43705	/	
176-58	43705-43706	s	
176-59	43707-43708	-	
176-60	43709-43714	4.72x	
176-61	43715-43721	slower	
176-62	43722-43734	SetDirection	
176-63	43734-43735	:	
176-64	43736-43742	3728.3	
176-65	43743-43744	i	
176-66	43744-43745	/	
176-67	43745-43746	s	
176-68	43747-43748	-	
176-69	43749-43756	198.38x	
176-70	43757-43763	slower	
176-71	43764-43765	.	
176-72	43765-43766	.	
176-73	43766-43767	.	

#Text=UserReference:
#Text=2.1 i/s - 360365.80x slower
#Text=ExternalLink:
#Text=1.6 i/s - 470400.67x slower
#Text=ProjectReference:
#Text=0.7 i/s - 1128756.09x slower
#Text=--> Benchmarking PlainMarkdownPipeline filters
#Text=Calculating -------------------------------------
#Text=Markdown
#Text=19.000
#Text=i/100ms
#Text=-------------------------------------------------
#Text=Markdown
#Text=241.476
#Text=(±15.3%) i/s -
#Text=2.356k
#Text=This can give you an idea how various filters perform, and which ones might be performing the slowest.
177-1	43768-43781	UserReference	
177-2	43781-43782	:	
177-3	43783-43786	2.1	
177-4	43787-43788	i	
177-5	43788-43789	/	
177-6	43789-43790	s	
177-7	43791-43792	-	
177-8	43793-43803	360365.80x	
177-9	43804-43810	slower	
177-10	43811-43823	ExternalLink	
177-11	43823-43824	:	
177-12	43825-43828	1.6	
177-13	43829-43830	i	
177-14	43830-43831	/	
177-15	43831-43832	s	
177-16	43833-43834	-	
177-17	43835-43845	470400.67x	
177-18	43846-43852	slower	
177-19	43853-43869	ProjectReference	
177-20	43869-43870	:	
177-21	43871-43874	0.7	
177-22	43875-43876	i	
177-23	43876-43877	/	
177-24	43877-43878	s	
177-25	43879-43880	-	
177-26	43881-43892	1128756.09x	
177-27	43893-43899	slower	
177-28	43900-43901	-	
177-29	43901-43902	-	
177-30	43902-43903	>	
177-31	43904-43916	Benchmarking	
177-32	43917-43938	PlainMarkdownPipeline	
177-33	43939-43946	filters	
177-34	43947-43958	Calculating	
177-35	43959-43960	-	
177-36	43960-43961	-	
177-37	43961-43962	-	
177-38	43962-43963	-	
177-39	43963-43964	-	
177-40	43964-43965	-	
177-41	43965-43966	-	
177-42	43966-43967	-	
177-43	43967-43968	-	
177-44	43968-43969	-	
177-45	43969-43970	-	
177-46	43970-43971	-	
177-47	43971-43972	-	
177-48	43972-43973	-	
177-49	43973-43974	-	
177-50	43974-43975	-	
177-51	43975-43976	-	
177-52	43976-43977	-	
177-53	43977-43978	-	
177-54	43978-43979	-	
177-55	43979-43980	-	
177-56	43980-43981	-	
177-57	43981-43982	-	
177-58	43982-43983	-	
177-59	43983-43984	-	
177-60	43984-43985	-	
177-61	43985-43986	-	
177-62	43986-43987	-	
177-63	43987-43988	-	
177-64	43988-43989	-	
177-65	43989-43990	-	
177-66	43990-43991	-	
177-67	43991-43992	-	
177-68	43992-43993	-	
177-69	43993-43994	-	
177-70	43994-43995	-	
177-71	43995-43996	-	
177-72	43997-44005	Markdown	
177-73	44006-44012	19.000	
177-74	44013-44014	i	
177-75	44014-44015	/	
177-76	44015-44020	100ms	
177-77	44021-44022	-	
177-78	44022-44023	-	
177-79	44023-44024	-	
177-80	44024-44025	-	
177-81	44025-44026	-	
177-82	44026-44027	-	
177-83	44027-44028	-	
177-84	44028-44029	-	
177-85	44029-44030	-	
177-86	44030-44031	-	
177-87	44031-44032	-	
177-88	44032-44033	-	
177-89	44033-44034	-	
177-90	44034-44035	-	
177-91	44035-44036	-	
177-92	44036-44037	-	
177-93	44037-44038	-	
177-94	44038-44039	-	
177-95	44039-44040	-	
177-96	44040-44041	-	
177-97	44041-44042	-	
177-98	44042-44043	-	
177-99	44043-44044	-	
177-100	44044-44045	-	
177-101	44045-44046	-	
177-102	44046-44047	-	
177-103	44047-44048	-	
177-104	44048-44049	-	
177-105	44049-44050	-	
177-106	44050-44051	-	
177-107	44051-44052	-	
177-108	44052-44053	-	
177-109	44053-44054	-	
177-110	44054-44055	-	
177-111	44055-44056	-	
177-112	44056-44057	-	
177-113	44057-44058	-	
177-114	44058-44059	-	
177-115	44059-44060	-	
177-116	44060-44061	-	
177-117	44061-44062	-	
177-118	44062-44063	-	
177-119	44063-44064	-	
177-120	44064-44065	-	
177-121	44065-44066	-	
177-122	44066-44067	-	
177-123	44067-44068	-	
177-124	44068-44069	-	
177-125	44069-44070	-	
177-126	44071-44079	Markdown	
177-127	44080-44087	241.476	
177-128	44088-44089	(	
177-129	44089-44090	±	
177-130	44090-44095	15.3%	
177-131	44095-44096	)	
177-132	44097-44098	i	
177-133	44098-44099	/	
177-134	44099-44100	s	
177-135	44101-44102	-	
177-136	44103-44109	2.356k	
177-137	44110-44114	This	
177-138	44115-44118	can	
177-139	44119-44123	give	
177-140	44124-44127	you	
177-141	44128-44130	an	
177-142	44131-44135	idea	
177-143	44136-44139	how	
177-144	44140-44147	various	
177-145	44148-44155	filters	
177-146	44156-44163	perform	
177-147	44163-44164	,	
177-148	44165-44168	and	
177-149	44169-44174	which	
177-150	44175-44179	ones	
177-151	44180-44185	might	
177-152	44186-44188	be	
177-153	44189-44199	performing	
177-154	44200-44203	the	
177-155	44204-44211	slowest	
177-156	44211-44212	.	

#Text=The test data has a lot to do with how well a filter performs.
178-1	44213-44216	The	
178-2	44217-44221	test	
178-3	44222-44226	data	
178-4	44227-44230	has	
178-5	44231-44232	a	
178-6	44233-44236	lot	
178-7	44237-44239	to	
178-8	44240-44242	do	
178-9	44243-44247	with	
178-10	44248-44251	how	
178-11	44252-44256	well	
178-12	44257-44258	a	
178-13	44259-44265	filter	
178-14	44266-44274	performs	
178-15	44274-44275	.	

#Text=If there is nothing in the test data
#Text=that specifically triggers the filter, it might look like it’s running incredibly fast.
179-1	44276-44278	If	
179-2	44279-44284	there	
179-3	44285-44287	is	
179-4	44288-44295	nothing	
179-5	44296-44298	in	
179-6	44299-44302	the	
179-7	44303-44307	test	
179-8	44308-44312	data	
179-9	44313-44317	that	
179-10	44318-44330	specifically	
179-11	44331-44339	triggers	
179-12	44340-44343	the	
179-13	44344-44350	filter	
179-14	44350-44351	,	
179-15	44352-44354	it	
179-16	44355-44360	might	
179-17	44361-44365	look	
179-18	44366-44370	like	
179-19	44371-44373	it	
179-20	44373-44374	’	
179-21	44374-44375	s	
179-22	44376-44383	running	
179-23	44384-44394	incredibly	
179-24	44395-44399	fast	
179-25	44399-44400	.	

#Text=Make sure that you have relevant test data for your filter in the
#Text=spec/fixtures/markdown.md.erb
#Text=file.
180-1	44401-44405	Make	
180-2	44406-44410	sure	
180-3	44411-44415	that	
180-4	44416-44419	you	
180-5	44420-44424	have	
180-6	44425-44433	relevant	
180-7	44434-44438	test	
180-8	44439-44443	data	
180-9	44444-44447	for	
180-10	44448-44452	your	
180-11	44453-44459	filter	
180-12	44460-44462	in	
180-13	44463-44466	the	
180-14	44467-44471	spec	
180-15	44471-44472	/	
180-16	44472-44480	fixtures	
180-17	44480-44481	/	
180-18	44481-44496	markdown.md.erb	
180-19	44497-44501	file	
180-20	44501-44502	.	

#Text=Reading from files and other data sources
#Text=Ruby offers several convenience functions that deal with file contents specifically
#Text=or I/O streams in general.
181-1	44503-44510	Reading	
181-2	44511-44515	from	
181-3	44516-44521	files	
181-4	44522-44525	and	
181-5	44526-44531	other	
181-6	44532-44536	data	
181-7	44537-44544	sources	
181-8	44545-44549	Ruby	
181-9	44550-44556	offers	
181-10	44557-44564	several	
181-11	44565-44576	convenience	
181-12	44577-44586	functions	
181-13	44587-44591	that	
181-14	44592-44596	deal	
181-15	44597-44601	with	
181-16	44602-44606	file	
181-17	44607-44615	contents	
181-18	44616-44628	specifically	
181-19	44629-44631	or	
181-20	44632-44633	I	
181-21	44633-44634	/	
181-22	44634-44635	O	
181-23	44636-44643	streams	
181-24	44644-44646	in	
181-25	44647-44654	general	
181-26	44654-44655	.	

#Text=Functions such as IO.read and IO.readlines make
#Text=it easy to read data into memory, but they can be inefficient when the
#Text=data grows large.
182-1	44656-44665	Functions	
182-2	44666-44670	such	
182-3	44671-44673	as	
182-4	44674-44681	IO.read	
182-5	44682-44685	and	
182-6	44686-44698	IO.readlines	
182-7	44699-44703	make	
182-8	44704-44706	it	
182-9	44707-44711	easy	
182-10	44712-44714	to	
182-11	44715-44719	read	
182-12	44720-44724	data	
182-13	44725-44729	into	
182-14	44730-44736	memory	
182-15	44736-44737	,	
182-16	44738-44741	but	
182-17	44742-44746	they	
182-18	44747-44750	can	
182-19	44751-44753	be	
182-20	44754-44765	inefficient	
182-21	44766-44770	when	
182-22	44771-44774	the	
182-23	44775-44779	data	
182-24	44780-44785	grows	
182-25	44786-44791	large	
182-26	44791-44792	.	

#Text=Because these functions read the entire contents of a data
#Text=source into memory, memory use grows by at least the size of the data source.
183-1	44793-44800	Because	
183-2	44801-44806	these	
183-3	44807-44816	functions	
183-4	44817-44821	read	
183-5	44822-44825	the	
183-6	44826-44832	entire	
183-7	44833-44841	contents	
183-8	44842-44844	of	
183-9	44845-44846	a	
183-10	44847-44851	data	
183-11	44852-44858	source	
183-12	44859-44863	into	
183-13	44864-44870	memory	
183-14	44870-44871	,	
183-15	44872-44878	memory	
183-16	44879-44882	use	
183-17	44883-44888	grows	
183-18	44889-44891	by	
183-19	44892-44894	at	
183-20	44895-44900	least	
183-21	44901-44904	the	
183-22	44905-44909	size	
183-23	44910-44912	of	
183-24	44913-44916	the	
183-25	44917-44921	data	
183-26	44922-44928	source	
183-27	44928-44929	.	

#Text=In the case of readlines, it grows even further, due to extra bookkeeping
#Text=the Ruby VM has to perform to represent each line.
184-1	44930-44932	In	
184-2	44933-44936	the	
184-3	44937-44941	case	
184-4	44942-44944	of	
184-5	44945-44954	readlines	
184-6	44954-44955	,	
184-7	44956-44958	it	
184-8	44959-44964	grows	
184-9	44965-44969	even	
184-10	44970-44977	further	
184-11	44977-44978	,	
184-12	44979-44982	due	
184-13	44983-44985	to	
184-14	44986-44991	extra	
184-15	44992-45003	bookkeeping	
184-16	45004-45007	the	
184-17	45008-45012	Ruby	
184-18	45013-45015	VM	
184-19	45016-45019	has	
184-20	45020-45022	to	
184-21	45023-45030	perform	
184-22	45031-45033	to	
184-23	45034-45043	represent	
184-24	45044-45048	each	
184-25	45049-45053	line	
184-26	45053-45054	.	

#Text=Consider the following program, which reads a text file that is 750MB on disk:
#Text=File.readlines('large_file.txt').each do |line|
#Text=puts line
#Text=end
#Text=Here is a process memory reading from while the program was running, showing
#Text=how we indeed kept the entire file in memory (RSS reported in kilobytes):
#Text=$ ps -o rss -p <pid>
#Text=RSS
#Text=783436
#Text=And here is an excerpt of what the garbage collector was doing:
#Text=pp GC.stat
#Text=:heap_live_slots=>2346848,
#Text=:malloc_increase_bytes=>30895288,
#Text=...
185-1	45055-45063	Consider	
185-2	45064-45067	the	
185-3	45068-45077	following	
185-4	45078-45085	program	
185-5	45085-45086	,	
185-6	45087-45092	which	
185-7	45093-45098	reads	
185-8	45099-45100	a	
185-9	45101-45105	text	
185-10	45106-45110	file	
185-11	45111-45115	that	
185-12	45116-45118	is	
185-13	45119-45124	750MB	
185-14	45125-45127	on	
185-15	45128-45132	disk	
185-16	45132-45133	:	
185-17	45134-45148	File.readlines	
185-18	45148-45149	(	
185-19	45149-45150	'	
185-20	45150-45164	large_file.txt	
185-21	45164-45165	'	
185-22	45165-45166	)	
185-23	45166-45167	.	
185-24	45167-45171	each	
185-25	45172-45174	do	
185-26	45175-45176	|	
185-27	45176-45180	line	
185-28	45180-45181	|	
185-29	45182-45186	puts	
185-30	45187-45191	line	
185-31	45192-45195	end	
185-32	45196-45200	Here	
185-33	45201-45203	is	
185-34	45204-45205	a	
185-35	45206-45213	process	
185-36	45214-45220	memory	
185-37	45221-45228	reading	
185-38	45229-45233	from	
185-39	45234-45239	while	
185-40	45240-45243	the	
185-41	45244-45251	program	
185-42	45252-45255	was	
185-43	45256-45263	running	
185-44	45263-45264	,	
185-45	45265-45272	showing	
185-46	45273-45276	how	
185-47	45277-45279	we	
185-48	45280-45286	indeed	
185-49	45287-45291	kept	
185-50	45292-45295	the	
185-51	45296-45302	entire	
185-52	45303-45307	file	
185-53	45308-45310	in	
185-54	45311-45317	memory	
185-55	45318-45319	(	
185-56	45319-45322	RSS	
185-57	45323-45331	reported	
185-58	45332-45334	in	
185-59	45335-45344	kilobytes	
185-60	45344-45345	)	
185-61	45345-45346	:	
185-62	45347-45348	$	
185-63	45349-45351	ps	
185-64	45352-45353	-	
185-65	45353-45354	o	
185-66	45355-45358	rss	
185-67	45359-45360	-	
185-68	45360-45361	p	
185-69	45362-45363	<	
185-70	45363-45366	pid	
185-71	45366-45367	>	
185-72	45368-45371	RSS	
185-73	45372-45378	783436	
185-74	45379-45382	And	
185-75	45383-45387	here	
185-76	45388-45390	is	
185-77	45391-45393	an	
185-78	45394-45401	excerpt	
185-79	45402-45404	of	
185-80	45405-45409	what	
185-81	45410-45413	the	
185-82	45414-45421	garbage	
185-83	45422-45431	collector	
185-84	45432-45435	was	
185-85	45436-45441	doing	
185-86	45441-45442	:	
185-87	45443-45445	pp	
185-88	45446-45453	GC.stat	
185-89	45454-45455	:	
185-90	45455-45470	heap_live_slots	
185-91	45470-45471	=	
185-92	45471-45472	>	
185-93	45472-45479	2346848	
185-94	45479-45480	,	
185-95	45481-45482	:	
185-96	45482-45503	malloc_increase_bytes	
185-97	45503-45504	=	
185-98	45504-45505	>	
185-99	45505-45513	30895288	
185-100	45513-45514	,	
185-101	45515-45516	.	
185-102	45516-45517	.	
185-103	45517-45518	.	

#Text=We can see that heap_live_slots (the number of reachable objects) jumped to ~2.3M,
#Text=which is roughly two orders of magnitude more compared to reading the file line by
#Text=line instead.
186-1	45519-45521	We	
186-2	45522-45525	can	
186-3	45526-45529	see	
186-4	45530-45534	that	
186-5	45535-45550	heap_live_slots	
186-6	45551-45552	(	
186-7	45552-45555	the	
186-8	45556-45562	number	
186-9	45563-45565	of	
186-10	45566-45575	reachable	
186-11	45576-45583	objects	
186-12	45583-45584	)	
186-13	45585-45591	jumped	
186-14	45592-45594	to	
186-15	45595-45596	~	
186-16	45596-45600	2.3M	
186-17	45600-45601	,	
186-18	45602-45607	which	
186-19	45608-45610	is	
186-20	45611-45618	roughly	
186-21	45619-45622	two	
186-22	45623-45629	orders	
186-23	45630-45632	of	
186-24	45633-45642	magnitude	
186-25	45643-45647	more	
186-26	45648-45656	compared	
186-27	45657-45659	to	
186-28	45660-45667	reading	
186-29	45668-45671	the	
186-30	45672-45676	file	
186-31	45677-45681	line	
186-32	45682-45684	by	
186-33	45685-45689	line	
186-34	45690-45697	instead	
186-35	45697-45698	.	

#Text=It was not just the raw memory usage that increased, but also how the garbage collector (GC)
#Text=responded to this change in anticipation of future memory use.
187-1	45699-45701	It	
187-2	45702-45705	was	
187-3	45706-45709	not	
187-4	45710-45714	just	
187-5	45715-45718	the	
187-6	45719-45722	raw	
187-7	45723-45729	memory	
187-8	45730-45735	usage	
187-9	45736-45740	that	
187-10	45741-45750	increased	
187-11	45750-45751	,	
187-12	45752-45755	but	
187-13	45756-45760	also	
187-14	45761-45764	how	
187-15	45765-45768	the	
187-16	45769-45776	garbage	
187-17	45777-45786	collector	
187-18	45787-45788	(	
187-19	45788-45790	GC	
187-20	45790-45791	)	
187-21	45792-45801	responded	
187-22	45802-45804	to	
187-23	45805-45809	this	
187-24	45810-45816	change	
187-25	45817-45819	in	
187-26	45820-45832	anticipation	
187-27	45833-45835	of	
187-28	45836-45842	future	
187-29	45843-45849	memory	
187-30	45850-45853	use	
187-31	45853-45854	.	

#Text=We can see that malloc_increase_bytes jumped
#Text=to ~30MB, which compares to just ~4kB for a “fresh” Ruby program.
188-1	45855-45857	We	
188-2	45858-45861	can	
188-3	45862-45865	see	
188-4	45866-45870	that	
188-5	45871-45892	malloc_increase_bytes	
188-6	45893-45899	jumped	
188-7	45900-45902	to	
188-8	45903-45904	~	
188-9	45904-45908	30MB	
188-10	45908-45909	,	
188-11	45910-45915	which	
188-12	45916-45924	compares	
188-13	45925-45927	to	
188-14	45928-45932	just	
188-15	45933-45934	~	
188-16	45934-45937	4kB	
188-17	45938-45941	for	
188-18	45942-45943	a	
188-19	45944-45945	“	
188-20	45945-45950	fresh	
188-21	45950-45951	”	
188-22	45952-45956	Ruby	
188-23	45957-45964	program	
188-24	45964-45965	.	

#Text=This figure specifies how
#Text=much additional heap space the Ruby GC claims from the operating system next time it runs out of memory.
189-1	45966-45970	This	
189-2	45971-45977	figure	
189-3	45978-45987	specifies	
189-4	45988-45991	how	
189-5	45992-45996	much	
189-6	45997-46007	additional	
189-7	46008-46012	heap	
189-8	46013-46018	space	
189-9	46019-46022	the	
189-10	46023-46027	Ruby	
189-11	46028-46030	GC	
189-12	46031-46037	claims	
189-13	46038-46042	from	
189-14	46043-46046	the	
189-15	46047-46056	operating	
189-16	46057-46063	system	
189-17	46064-46068	next	
189-18	46069-46073	time	
189-19	46074-46076	it	
189-20	46077-46081	runs	
189-21	46082-46085	out	
189-22	46086-46088	of	
189-23	46089-46095	memory	
189-24	46095-46096	.	

#Text=Not only did we occupy more memory, we also changed the behavior of the application
#Text=to increase memory use at a faster rate.
190-1	46097-46100	Not	
190-2	46101-46105	only	
190-3	46106-46109	did	
190-4	46110-46112	we	
190-5	46113-46119	occupy	
190-6	46120-46124	more	
190-7	46125-46131	memory	
190-8	46131-46132	,	
190-9	46133-46135	we	
190-10	46136-46140	also	
190-11	46141-46148	changed	
190-12	46149-46152	the	
190-13	46153-46161	behavior	
190-14	46162-46164	of	
190-15	46165-46168	the	
190-16	46169-46180	application	
190-17	46181-46183	to	
190-18	46184-46192	increase	
190-19	46193-46199	memory	
190-20	46200-46203	use	
190-21	46204-46206	at	
190-22	46207-46208	a	
190-23	46209-46215	faster	
190-24	46216-46220	rate	
190-25	46220-46221	.	

#Text=The IO.read function exhibits similar behavior, with the difference that no extra memory is
#Text=allocated for each line object.
191-1	46222-46225	The	
191-2	46226-46233	IO.read	
191-3	46234-46242	function	
191-4	46243-46251	exhibits	
191-5	46252-46259	similar	
191-6	46260-46268	behavior	
191-7	46268-46269	,	
191-8	46270-46274	with	
191-9	46275-46278	the	
191-10	46279-46289	difference	
191-11	46290-46294	that	
191-12	46295-46297	no	
191-13	46298-46303	extra	
191-14	46304-46310	memory	
191-15	46311-46313	is	
191-16	46314-46323	allocated	
191-17	46324-46327	for	
191-18	46328-46332	each	
191-19	46333-46337	line	
191-20	46338-46344	object	
191-21	46344-46345	.	

#Text=Recommendations
#Text=Instead of reading data sources into memory in full, it is better to read them line by line
#Text=instead.
192-1	46346-46361	Recommendations	
192-2	46362-46369	Instead	
192-3	46370-46372	of	
192-4	46373-46380	reading	
192-5	46381-46385	data	
192-6	46386-46393	sources	
192-7	46394-46398	into	
192-8	46399-46405	memory	
192-9	46406-46408	in	
192-10	46409-46413	full	
192-11	46413-46414	,	
192-12	46415-46417	it	
192-13	46418-46420	is	
192-14	46421-46427	better	
192-15	46428-46430	to	
192-16	46431-46435	read	
192-17	46436-46440	them	
192-18	46441-46445	line	
192-19	46446-46448	by	
192-20	46449-46453	line	
192-21	46454-46461	instead	
192-22	46461-46462	.	

#Text=This is not always an option, for instance when you need to convert a YAML file
#Text=into a Ruby Hash, but whenever you have data where each row represents some entity that
#Text=can be processed and then discarded, you can use the following approaches.
193-1	46463-46467	This	
193-2	46468-46470	is	
193-3	46471-46474	not	
193-4	46475-46481	always	
193-5	46482-46484	an	
193-6	46485-46491	option	
193-7	46491-46492	,	
193-8	46493-46496	for	
193-9	46497-46505	instance	
193-10	46506-46510	when	
193-11	46511-46514	you	
193-12	46515-46519	need	
193-13	46520-46522	to	
193-14	46523-46530	convert	
193-15	46531-46532	a	
193-16	46533-46537	YAML	
193-17	46538-46542	file	
193-18	46543-46547	into	
193-19	46548-46549	a	
193-20	46550-46554	Ruby	
193-21	46555-46559	Hash	
193-22	46559-46560	,	
193-23	46561-46564	but	
193-24	46565-46573	whenever	
193-25	46574-46577	you	
193-26	46578-46582	have	
193-27	46583-46587	data	
193-28	46588-46593	where	
193-29	46594-46598	each	
193-30	46599-46602	row	
193-31	46603-46613	represents	
193-32	46614-46618	some	
193-33	46619-46625	entity	
193-34	46626-46630	that	
193-35	46631-46634	can	
193-36	46635-46637	be	
193-37	46638-46647	processed	
193-38	46648-46651	and	
193-39	46652-46656	then	
193-40	46657-46666	discarded	
193-41	46666-46667	,	
193-42	46668-46671	you	
193-43	46672-46675	can	
193-44	46676-46679	use	
193-45	46680-46683	the	
193-46	46684-46693	following	
193-47	46694-46704	approaches	
193-48	46704-46705	.	

#Text=First, replace calls to readlines.each with either each or each_line.
194-1	46706-46711	First	
194-2	46711-46712	,	
194-3	46713-46720	replace	
194-4	46721-46726	calls	
194-5	46727-46729	to	
194-6	46730-46744	readlines.each	
194-7	46745-46749	with	
194-8	46750-46756	either	
194-9	46757-46761	each	
194-10	46762-46764	or	
194-11	46765-46774	each_line	
194-12	46774-46775	.	

#Text=The each_line and each functions read the data source line by line without keeping
#Text=already visited lines in memory:
#Text=File.new('file').each { |line| puts line }
#Text=Alternatively, you can read individual lines explicitly using IO.readline or IO.gets functions:
#Text=while line = file.readline
#Text=# process line
#Text=end
#Text=This might be preferable if there is a condition that allows exiting the loop early, saving not
#Text=just memory but also unnecessary time spent in CPU and I/O for processing lines you’re not interested in.
195-1	46776-46779	The	
195-2	46780-46789	each_line	
195-3	46790-46793	and	
195-4	46794-46798	each	
195-5	46799-46808	functions	
195-6	46809-46813	read	
195-7	46814-46817	the	
195-8	46818-46822	data	
195-9	46823-46829	source	
195-10	46830-46834	line	
195-11	46835-46837	by	
195-12	46838-46842	line	
195-13	46843-46850	without	
195-14	46851-46858	keeping	
195-15	46859-46866	already	
195-16	46867-46874	visited	
195-17	46875-46880	lines	
195-18	46881-46883	in	
195-19	46884-46890	memory	
195-20	46890-46891	:	
195-21	46892-46900	File.new	
195-22	46900-46901	(	
195-23	46901-46902	'	
195-24	46902-46906	file	
195-25	46906-46907	'	
195-26	46907-46908	)	
195-27	46908-46909	.	
195-28	46909-46913	each	
195-29	46914-46915	{	
195-30	46916-46917	|	
195-31	46917-46921	line	
195-32	46921-46922	|	
195-33	46923-46927	puts	
195-34	46928-46932	line	
195-35	46933-46934	}	
195-36	46935-46948	Alternatively	
195-37	46948-46949	,	
195-38	46950-46953	you	
195-39	46954-46957	can	
195-40	46958-46962	read	
195-41	46963-46973	individual	
195-42	46974-46979	lines	
195-43	46980-46990	explicitly	
195-44	46991-46996	using	
195-45	46997-47008	IO.readline	
195-46	47009-47011	or	
195-47	47012-47019	IO.gets	
195-48	47020-47029	functions	
195-49	47029-47030	:	
195-50	47031-47036	while	
195-51	47037-47041	line	
195-52	47042-47043	=	
195-53	47044-47057	file.readline	
195-54	47058-47059	#	
195-55	47060-47067	process	
195-56	47068-47072	line	
195-57	47073-47076	end	
195-58	47077-47081	This	
195-59	47082-47087	might	
195-60	47088-47090	be	
195-61	47091-47101	preferable	
195-62	47102-47104	if	
195-63	47105-47110	there	
195-64	47111-47113	is	
195-65	47114-47115	a	
195-66	47116-47125	condition	
195-67	47126-47130	that	
195-68	47131-47137	allows	
195-69	47138-47145	exiting	
195-70	47146-47149	the	
195-71	47150-47154	loop	
195-72	47155-47160	early	
195-73	47160-47161	,	
195-74	47162-47168	saving	
195-75	47169-47172	not	
195-76	47173-47177	just	
195-77	47178-47184	memory	
195-78	47185-47188	but	
195-79	47189-47193	also	
195-80	47194-47205	unnecessary	
195-81	47206-47210	time	
195-82	47211-47216	spent	
195-83	47217-47219	in	
195-84	47220-47223	CPU	
195-85	47224-47227	and	
195-86	47228-47229	I	
195-87	47229-47230	/	
195-88	47230-47231	O	
195-89	47232-47235	for	
195-90	47236-47246	processing	
195-91	47247-47252	lines	
195-92	47253-47256	you	
195-93	47256-47257	’	
195-94	47257-47259	re	
195-95	47260-47263	not	
195-96	47264-47274	interested	
195-97	47275-47277	in	
195-98	47277-47278	.	

#Text=Anti-Patterns
#Text=This is a collection of anti-patterns that should be avoided
#Text=unless these changes have a measurable, significant, and positive impact on
#Text=production environments.
196-1	47279-47292	Anti-Patterns	
196-2	47293-47297	This	
196-3	47298-47300	is	
196-4	47301-47302	a	
196-5	47303-47313	collection	
196-6	47314-47316	of	
196-7	47317-47330	anti-patterns	
196-8	47331-47335	that	
196-9	47336-47342	should	
196-10	47343-47345	be	
196-11	47346-47353	avoided	
196-12	47354-47360	unless	
196-13	47361-47366	these	
196-14	47367-47374	changes	
196-15	47375-47379	have	
196-16	47380-47381	a	
196-17	47382-47392	measurable	
196-18	47392-47393	,	
196-19	47394-47405	significant	
196-20	47405-47406	,	
196-21	47407-47410	and	
196-22	47411-47419	positive	
196-23	47420-47426	impact	
196-24	47427-47429	on	
196-25	47430-47440	production	
196-26	47441-47453	environments	
196-27	47453-47454	.	

#Text=Moving Allocations to Constants
#Text=Storing an object as a constant so you only allocate it once may improve
#Text=performance, but this is not guaranteed.
197-1	47455-47461	Moving	
197-2	47462-47473	Allocations	
197-3	47474-47476	to	
197-4	47477-47486	Constants	
197-5	47487-47494	Storing	
197-6	47495-47497	an	
197-7	47498-47504	object	
197-8	47505-47507	as	
197-9	47508-47509	a	
197-10	47510-47518	constant	
197-11	47519-47521	so	
197-12	47522-47525	you	
197-13	47526-47530	only	
197-14	47531-47539	allocate	
197-15	47540-47542	it	
197-16	47543-47547	once	
197-17	47548-47551	may	
197-18	47552-47559	improve	
197-19	47560-47571	performance	
197-20	47571-47572	,	
197-21	47573-47576	but	
197-22	47577-47581	this	
197-23	47582-47584	is	
197-24	47585-47588	not	
197-25	47589-47599	guaranteed	
197-26	47599-47600	.	

#Text=Looking up constants has an
#Text=impact on runtime performance, and as such, using a constant instead of
#Text=referencing an object directly may even slow code down.
198-1	47601-47608	Looking	
198-2	47609-47611	up	
198-3	47612-47621	constants	
198-4	47622-47625	has	
198-5	47626-47628	an	
198-6	47629-47635	impact	
198-7	47636-47638	on	
198-8	47639-47646	runtime	
198-9	47647-47658	performance	
198-10	47658-47659	,	
198-11	47660-47663	and	
198-12	47664-47666	as	
198-13	47667-47671	such	
198-14	47671-47672	,	
198-15	47673-47678	using	
198-16	47679-47680	a	
198-17	47681-47689	constant	
198-18	47690-47697	instead	
198-19	47698-47700	of	
198-20	47701-47712	referencing	
198-21	47713-47715	an	
198-22	47716-47722	object	
198-23	47723-47731	directly	
198-24	47732-47735	may	
198-25	47736-47740	even	
198-26	47741-47745	slow	
198-27	47746-47750	code	
198-28	47751-47755	down	
198-29	47755-47756	.	

#Text=For example:
#Text=SOME_CONSTANT = 'foo'.freeze
#Text=9000.times do
#Text=SOME_CONSTANT
#Text=end
#Text=The only reason you should be doing this is to prevent somebody from mutating
#Text=the global String.
199-1	47757-47760	For	
199-2	47761-47768	example	
199-3	47768-47769	:	
199-4	47770-47783	SOME_CONSTANT	
199-5	47784-47785	=	
199-6	47786-47787	'	
199-7	47787-47790	foo	
199-8	47790-47791	'	
199-9	47791-47792	.	
199-10	47792-47798	freeze	
199-11	47799-47803	9000	
199-12	47803-47804	.	
199-13	47804-47809	times	
199-14	47810-47812	do	
199-15	47813-47826	SOME_CONSTANT	
199-16	47827-47830	end	
199-17	47831-47834	The	
199-18	47835-47839	only	
199-19	47840-47846	reason	
199-20	47847-47850	you	
199-21	47851-47857	should	
199-22	47858-47860	be	
199-23	47861-47866	doing	
199-24	47867-47871	this	
199-25	47872-47874	is	
199-26	47875-47877	to	
199-27	47878-47885	prevent	
199-28	47886-47894	somebody	
199-29	47895-47899	from	
199-30	47900-47908	mutating	
199-31	47909-47912	the	
199-32	47913-47919	global	
199-33	47920-47926	String	
199-34	47926-47927	.	

#Text=However, since you can just re-assign constants in Ruby
#Text=there’s nothing stopping somebody from doing this elsewhere in the code:
#Text=SOME_CONSTANT = 'bar'
#Text=How to seed a database with millions of rows
#Text=You might want millions of project rows in your local database, for example,
#Text=in order to compare relative query performance, or to reproduce a bug.
200-1	47928-47935	However	
200-2	47935-47936	,	
200-3	47937-47942	since	
200-4	47943-47946	you	
200-5	47947-47950	can	
200-6	47951-47955	just	
200-7	47956-47965	re-assign	
200-8	47966-47975	constants	
200-9	47976-47978	in	
200-10	47979-47983	Ruby	
200-11	47984-47989	there	
200-12	47989-47990	’	
200-13	47990-47991	s	
200-14	47992-47999	nothing	
200-15	48000-48008	stopping	
200-16	48009-48017	somebody	
200-17	48018-48022	from	
200-18	48023-48028	doing	
200-19	48029-48033	this	
200-20	48034-48043	elsewhere	
200-21	48044-48046	in	
200-22	48047-48050	the	
200-23	48051-48055	code	
200-24	48055-48056	:	
200-25	48057-48070	SOME_CONSTANT	
200-26	48071-48072	=	
200-27	48073-48074	'	
200-28	48074-48077	bar	
200-29	48077-48078	'	
200-30	48079-48082	How	
200-31	48083-48085	to	
200-32	48086-48090	seed	
200-33	48091-48092	a	
200-34	48093-48101	database	
200-35	48102-48106	with	
200-36	48107-48115	millions	
200-37	48116-48118	of	
200-38	48119-48123	rows	
200-39	48124-48127	You	
200-40	48128-48133	might	
200-41	48134-48138	want	
200-42	48139-48147	millions	
200-43	48148-48150	of	
200-44	48151-48158	project	
200-45	48159-48163	rows	
200-46	48164-48166	in	
200-47	48167-48171	your	
200-48	48172-48177	local	
200-49	48178-48186	database	
200-50	48186-48187	,	
200-51	48188-48191	for	
200-52	48192-48199	example	
200-53	48199-48200	,	
200-54	48201-48203	in	
200-55	48204-48209	order	
200-56	48210-48212	to	
200-57	48213-48220	compare	
200-58	48221-48229	relative	
200-59	48230-48235	query	
200-60	48236-48247	performance	
200-61	48247-48248	,	
200-62	48249-48251	or	
200-63	48252-48254	to	
200-64	48255-48264	reproduce	
200-65	48265-48266	a	
200-66	48267-48270	bug	
200-67	48270-48271	.	

#Text=You could
#Text=do this by hand with SQL commands or using Mass Inserting Rails
#Text=Models functionality.
201-1	48272-48275	You	
201-2	48276-48281	could	
201-3	48282-48284	do	
201-4	48285-48289	this	
201-5	48290-48292	by	
201-6	48293-48297	hand	
201-7	48298-48302	with	
201-8	48303-48306	SQL	
201-9	48307-48315	commands	
201-10	48316-48318	or	
201-11	48319-48324	using	
201-12	48325-48329	Mass	
201-13	48330-48339	Inserting	
201-14	48340-48345	Rails	
201-15	48346-48352	Models	
201-16	48353-48366	functionality	
201-17	48366-48367	.	

#Text=Assuming you are working with ActiveRecord models, you might also find these links helpful:
#Text=Insert records in batches
#Text=BulkInsert gem
#Text=ActiveRecord::PgGenerateSeries gem
#Text=Examples
#Text=You may find some useful examples in this snippet.
202-1	48368-48376	Assuming	
202-2	48377-48380	you	
202-3	48381-48384	are	
202-4	48385-48392	working	
202-5	48393-48397	with	
202-6	48398-48410	ActiveRecord	
202-7	48411-48417	models	
202-8	48417-48418	,	
202-9	48419-48422	you	
202-10	48423-48428	might	
202-11	48429-48433	also	
202-12	48434-48438	find	
202-13	48439-48444	these	
202-14	48445-48450	links	
202-15	48451-48458	helpful	
202-16	48458-48459	:	
202-17	48460-48466	Insert	
202-18	48467-48474	records	
202-19	48475-48477	in	
202-20	48478-48485	batches	
202-21	48486-48496	BulkInsert	
202-22	48497-48500	gem	
202-23	48501-48513	ActiveRecord	
202-24	48513-48514	:	
202-25	48514-48515	:	
202-26	48515-48531	PgGenerateSeries	
202-27	48532-48535	gem	
202-28	48536-48544	Examples	
202-29	48545-48548	You	
202-30	48549-48552	may	
202-31	48553-48557	find	
202-32	48558-48562	some	
202-33	48563-48569	useful	
202-34	48570-48578	examples	
202-35	48579-48581	in	
202-36	48582-48586	this	
202-37	48587-48594	snippet	
202-38	48594-48595	.	

#Text=Help & feedback
#Text=Docs
#Text=Edit this page
#Text=to fix an error or add an improvement in a merge request.
203-1	48596-48600	Help	
203-2	48601-48602	&	
203-3	48603-48611	feedback	
203-4	48612-48616	Docs	
203-5	48617-48621	Edit	
203-6	48622-48626	this	
203-7	48627-48631	page	
203-8	48632-48634	to	
203-9	48635-48638	fix	
203-10	48639-48641	an	
203-11	48642-48647	error	
203-12	48648-48650	or	
203-13	48651-48654	add	
203-14	48655-48657	an	
203-15	48658-48669	improvement	
203-16	48670-48672	in	
203-17	48673-48674	a	
203-18	48675-48680	merge	
203-19	48681-48688	request	
203-20	48688-48689	.	

#Text=Create an issue
#Text=to suggest an improvement to this page.
204-1	48690-48696	Create	
204-2	48697-48699	an	
204-3	48700-48705	issue	
204-4	48706-48708	to	
204-5	48709-48716	suggest	
204-6	48717-48719	an	
204-7	48720-48731	improvement	
204-8	48732-48734	to	
204-9	48735-48739	this	
204-10	48740-48744	page	
204-11	48744-48745	.	

#Text=Show and post comments
#Text=to review and give feedback about this page.
205-1	48746-48750	Show	
205-2	48751-48754	and	
205-3	48755-48759	post	
205-4	48760-48768	comments	
205-5	48769-48771	to	
205-6	48772-48778	review	
205-7	48779-48782	and	
205-8	48783-48787	give	
205-9	48788-48796	feedback	
205-10	48797-48802	about	
205-11	48803-48807	this	
205-12	48808-48812	page	
205-13	48812-48813	.	

#Text=Product
#Text=Create an issue
#Text=if there's something you don't like about this feature.
206-1	48814-48821	Product	
206-2	48822-48828	Create	
206-3	48829-48831	an	
206-4	48832-48837	issue	
206-5	48838-48840	if	
206-6	48841-48848	there's	
206-7	48849-48858	something	
206-8	48859-48862	you	
206-9	48863-48868	don't	
206-10	48869-48873	like	
206-11	48874-48879	about	
206-12	48880-48884	this	
206-13	48885-48892	feature	
206-14	48892-48893	.	

#Text=Propose functionality
#Text=by submitting a feature request.
207-1	48894-48901	Propose	
207-2	48902-48915	functionality	
207-3	48916-48918	by	
207-4	48919-48929	submitting	
207-5	48930-48931	a	
207-6	48932-48939	feature	
207-7	48940-48947	request	
207-8	48947-48948	.	

#Text=Join First Look
#Text=to help shape new features.
208-1	48949-48953	Join	
208-2	48954-48959	First	
208-3	48960-48964	Look	
208-4	48965-48967	to	
208-5	48968-48972	help	
208-6	48973-48978	shape	
208-7	48979-48982	new	
208-8	48983-48991	features	
208-9	48991-48992	.	

#Text=Feature availability and product trials
#Text=View pricing
#Text=to see all GitLab tiers and features, or to upgrade.
209-1	48993-49000	Feature	
209-2	49001-49013	availability	
209-3	49014-49017	and	
209-4	49018-49025	product	
209-5	49026-49032	trials	
209-6	49033-49037	View	
209-7	49038-49045	pricing	
209-8	49046-49048	to	
209-9	49049-49052	see	
209-10	49053-49056	all	
209-11	49057-49063	GitLab	
209-12	49064-49069	tiers	
209-13	49070-49073	and	
209-14	49074-49082	features	
209-15	49082-49083	,	
209-16	49084-49086	or	
209-17	49087-49089	to	
209-18	49090-49097	upgrade	
209-19	49097-49098	.	

#Text=Try GitLab for free
#Text=with access to all features for 30 days.
210-1	49099-49102	Try	
210-2	49103-49109	GitLab	
210-3	49110-49113	for	
210-4	49114-49118	free	
210-5	49119-49123	with	
210-6	49124-49130	access	
210-7	49131-49133	to	
210-8	49134-49137	all	
210-9	49138-49146	features	
210-10	49147-49150	for	
210-11	49151-49153	30	
210-12	49154-49158	days	
210-13	49158-49159	.	

#Text=Get Help
#Text=If you didn't find what you were looking for,
#Text=search the docs.
211-1	49160-49163	Get	
211-2	49164-49168	Help	
211-3	49169-49171	If	
211-4	49172-49175	you	
211-5	49176-49182	didn't	
211-6	49183-49187	find	
211-7	49188-49192	what	
211-8	49193-49196	you	
211-9	49197-49201	were	
211-10	49202-49209	looking	
211-11	49210-49213	for	
211-12	49213-49214	,	
211-13	49215-49221	search	
211-14	49222-49225	the	
211-15	49226-49230	docs	
211-16	49230-49231	.	

#Text=If you want help with something specific and could use community support,
#Text=post on the GitLab forum.
212-1	49232-49234	If	
212-2	49235-49238	you	
212-3	49239-49243	want	
212-4	49244-49248	help	
212-5	49249-49253	with	
212-6	49254-49263	something	
212-7	49264-49272	specific	
212-8	49273-49276	and	
212-9	49277-49282	could	
212-10	49283-49286	use	
212-11	49287-49296	community	
212-12	49297-49304	support	
212-13	49304-49305	,	
212-14	49306-49310	post	
212-15	49311-49313	on	
212-16	49314-49317	the	
212-17	49318-49324	GitLab	
212-18	49325-49330	forum	
212-19	49330-49331	.	

#Text=For problems setting up or using this feature (depending on your GitLab
#Text=subscription).
213-1	49332-49335	For	
213-2	49336-49344	problems	
213-3	49345-49352	setting	
213-4	49353-49355	up	
213-5	49356-49358	or	
213-6	49359-49364	using	
213-7	49365-49369	this	
213-8	49370-49377	feature	
213-9	49378-49379	(	
213-10	49379-49388	depending	
213-11	49389-49391	on	
213-12	49392-49396	your	
213-13	49397-49403	GitLab	
213-14	49404-49416	subscription	
213-15	49416-49417	)	
213-16	49417-49418	.	

#Text=Request support
#Text=Please enable JavaScript to view the
#Text=comments powered by Disqus.
214-1	49419-49426	Request	
214-2	49427-49434	support	
214-3	49435-49441	Please	
214-4	49442-49448	enable	
214-5	49449-49459	JavaScript	
214-6	49460-49462	to	
214-7	49463-49467	view	
214-8	49468-49471	the	
214-9	49472-49480	comments	
214-10	49481-49488	powered	
214-11	49489-49491	by	
214-12	49492-49498	Disqus	
214-13	49498-49499	.	

#Text=Twitter
#Text=Facebook
#Text=YouTube
#Text=LinkedIn
#Text=Docs Repo
#Text=About GitLab
#Text=Terms
#Text=Privacy Policy
#Text=Cookies Policy
#Text=Contact
#Text=View page source -
#Text=Edit in Web IDE
#Text=Twitter
#Text=Facebook
#Text=YouTube
#Text=LinkedIn
215-1	49500-49507	Twitter	
215-2	49508-49516	Facebook	
215-3	49517-49524	YouTube	
215-4	49525-49533	LinkedIn	
215-5	49534-49538	Docs	
215-6	49539-49543	Repo	
215-7	49544-49549	About	
215-8	49550-49556	GitLab	
215-9	49557-49562	Terms	
215-10	49563-49570	Privacy	
215-11	49571-49577	Policy	
215-12	49578-49585	Cookies	
215-13	49586-49592	Policy	
215-14	49593-49600	Contact	
215-15	49601-49605	View	
215-16	49606-49610	page	
215-17	49611-49617	source	
215-18	49618-49619	-	
215-19	49620-49624	Edit	
215-20	49625-49627	in	
215-21	49628-49631	Web	
215-22	49632-49635	IDE	
215-23	49636-49643	Twitter	
215-24	49644-49652	Facebook	
215-25	49653-49660	YouTube	
215-26	49661-49669	LinkedIn	
