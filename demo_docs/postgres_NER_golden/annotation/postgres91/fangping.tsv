#FORMAT=WebAnno TSV 3.3


#Text=OnGres | EXPLAIN ANALYZE may be lying to you
#Text=Resources
#Text=Blog
#Text=Services
#Text=Professional Services
#Text=Consulting
#Text=Training
#Text=Products
#Text=StackGres
#Text=PostgresqlCO.NF
#Text=About
#Text=Contact
#Text=Post
#Text=EXPLAIN ANALYZE may be lying to you
#Text=Álvaro Hernández
#Text=May 26, 2020 ·
#Text=10 min read
#Text=postgresql
#Text=performance
#Text=Share this post
#Text=Álvaro Hernández
#Text=Founder and CEO
#Text=The Observer effect
#Text=In physics, the observer effect is the theory that the mere observation of a
#Text=phenomenon inevitably changes that phenomenon.
1-1	0-6	OnGres	
1-2	7-8	|	
1-3	9-16	EXPLAIN	
1-4	17-24	ANALYZE	
1-5	25-28	may	
1-6	29-31	be	
1-7	32-37	lying	
1-8	38-40	to	
1-9	41-44	you	
1-10	45-54	Resources	
1-11	55-59	Blog	
1-12	60-68	Services	
1-13	69-81	Professional	
1-14	82-90	Services	
1-15	91-101	Consulting	
1-16	102-110	Training	
1-17	111-119	Products	
1-18	120-129	StackGres	
1-19	130-145	PostgresqlCO.NF	
1-20	146-151	About	
1-21	152-159	Contact	
1-22	160-164	Post	
1-23	165-172	EXPLAIN	
1-24	173-180	ANALYZE	
1-25	181-184	may	
1-26	185-187	be	
1-27	188-193	lying	
1-28	194-196	to	
1-29	197-200	you	
1-30	201-207	Álvaro	
1-31	208-217	Hernández	
1-32	218-221	May	
1-33	222-224	26	
1-34	224-225	,	
1-35	226-230	2020	
1-36	231-232	·	
1-37	233-235	10	
1-38	236-239	min	
1-39	240-244	read	
1-40	245-255	postgresql	
1-41	256-267	performance	
1-42	268-273	Share	
1-43	274-278	this	
1-44	279-283	post	
1-45	284-290	Álvaro	
1-46	291-300	Hernández	
1-47	301-308	Founder	
1-48	309-312	and	
1-49	313-316	CEO	
1-50	317-320	The	
1-51	321-329	Observer	
1-52	330-336	effect	
1-53	337-339	In	
1-54	340-347	physics	
1-55	347-348	,	
1-56	349-352	the	
1-57	353-361	observer	
1-58	362-368	effect	
1-59	369-371	is	
1-60	372-375	the	
1-61	376-382	theory	
1-62	383-387	that	
1-63	388-391	the	
1-64	392-396	mere	
1-65	397-408	observation	
1-66	409-411	of	
1-67	412-413	a	
1-68	414-424	phenomenon	
1-69	425-435	inevitably	
1-70	436-443	changes	
1-71	444-448	that	
1-72	449-459	phenomenon	
1-73	459-460	.	

#Text=This is often the result of
#Text=instruments that, by necessity, alter the state of what they measure in some
#Text=manner.
2-1	461-465	This	
2-2	466-468	is	
2-3	469-474	often	
2-4	475-478	the	
2-5	479-485	result	
2-6	486-488	of	
2-7	489-500	instruments	
2-8	501-505	that	
2-9	505-506	,	
2-10	507-509	by	
2-11	510-519	necessity	
2-12	519-520	,	
2-13	521-526	alter	
2-14	527-530	the	
2-15	531-536	state	
2-16	537-539	of	
2-17	540-544	what	
2-18	545-549	they	
2-19	550-557	measure	
2-20	558-560	in	
2-21	561-565	some	
2-22	566-572	manner	
2-23	572-573	.	

#Text=Observer effect, Wikipedia
#Text=(edit; this previously referred to the
#Text=Uncertainty principle)
#Text=In layman’s terms, what the Observer effect states is that by measuring a
#Text=property of a system, you may be altering that system itself: your observation
#Text=becomes a distorted version of the reality.
3-1	574-582	Observer	
3-2	583-589	effect	
3-3	589-590	,	
3-4	591-600	Wikipedia	
3-5	601-602	(	
3-6	602-606	edit	
3-7	606-607	;	
3-8	608-612	this	
3-9	613-623	previously	
3-10	624-632	referred	
3-11	633-635	to	
3-12	636-639	the	
3-13	640-651	Uncertainty	
3-14	652-661	principle	
3-15	661-662	)	
3-16	663-665	In	
3-17	666-672	layman	
3-18	672-673	’	
3-19	673-674	s	
3-20	675-680	terms	
3-21	680-681	,	
3-22	682-686	what	
3-23	687-690	the	
3-24	691-699	Observer	
3-25	700-706	effect	
3-26	707-713	states	
3-27	714-716	is	
3-28	717-721	that	
3-29	722-724	by	
3-30	725-734	measuring	
3-31	735-736	a	
3-32	737-745	property	
3-33	746-748	of	
3-34	749-750	a	
3-35	751-757	system	
3-36	757-758	,	
3-37	759-762	you	
3-38	763-766	may	
3-39	767-769	be	
3-40	770-778	altering	
3-41	779-783	that	
3-42	784-790	system	
3-43	791-797	itself	
3-44	797-798	:	
3-45	799-803	your	
3-46	804-815	observation	
3-47	816-823	becomes	
3-48	824-825	a	
3-49	826-835	distorted	
3-50	836-843	version	
3-51	844-846	of	
3-52	847-850	the	
3-53	851-858	reality	
3-54	858-859	.	

#Text=In most cases, this distortion is negligible and we can simply ignore it.
4-1	860-862	In	
4-2	863-867	most	
4-3	868-873	cases	
4-4	873-874	,	
4-5	875-879	this	
4-6	880-890	distortion	
4-7	891-893	is	
4-8	894-904	negligible	
4-9	905-908	and	
4-10	909-911	we	
4-11	912-915	can	
4-12	916-922	simply	
4-13	923-929	ignore	
4-14	930-932	it	
4-15	932-933	.	

#Text=If
#Text=we use a thermometer to measure someone’s temperature, some heat will be
#Text=transferred from the person to the termometer, effectively lowering the person’s
#Text=temperature.
5-1	934-936	If	
5-2	937-939	we	
5-3	940-943	use	
5-4	944-945	a	
5-5	946-957	thermometer	
5-6	958-960	to	
5-7	961-968	measure	
5-8	969-976	someone	
5-9	976-977	’	
5-10	977-978	s	
5-11	979-990	temperature	
5-12	990-991	,	
5-13	992-996	some	
5-14	997-1001	heat	
5-15	1002-1006	will	
5-16	1007-1009	be	
5-17	1010-1021	transferred	
5-18	1022-1026	from	
5-19	1027-1030	the	
5-20	1031-1037	person	
5-21	1038-1040	to	
5-22	1041-1044	the	
5-23	1045-1055	termometer	
5-24	1055-1056	,	
5-25	1057-1068	effectively	
5-26	1069-1077	lowering	
5-27	1078-1081	the	
5-28	1082-1088	person	
5-29	1088-1089	’	
5-30	1089-1090	s	
5-31	1091-1102	temperature	
5-32	1102-1103	.	

#Text=But it should not be noticeable, and well below the error margin of
#Text=the thermometer.
6-1	1104-1107	But	
6-2	1108-1110	it	
6-3	1111-1117	should	
6-4	1118-1121	not	
6-5	1122-1124	be	
6-6	1125-1135	noticeable	
6-7	1135-1136	,	
6-8	1137-1140	and	
6-9	1141-1145	well	
6-10	1146-1151	below	
6-11	1152-1155	the	
6-12	1156-1161	error	
6-13	1162-1168	margin	
6-14	1169-1171	of	
6-15	1172-1175	the	
6-16	1176-1187	thermometer	
6-17	1187-1188	.	

#Text=But what happens when the measurement may not just affect, but rather completely
#Text=ruin the measurement?
7-1	1189-1192	But	
7-2	1193-1197	what	
7-3	1198-1205	happens	
7-4	1206-1210	when	
7-5	1211-1214	the	
7-6	1215-1226	measurement	
7-7	1227-1230	may	
7-8	1231-1234	not	
7-9	1235-1239	just	
7-10	1240-1246	affect	
7-11	1246-1247	,	
7-12	1248-1251	but	
7-13	1252-1258	rather	
7-14	1259-1269	completely	
7-15	1270-1274	ruin	
7-16	1275-1278	the	
7-17	1279-1290	measurement	
7-18	1290-1291	?	

#Text=Where the potential lie is
#Text=You are probably resorting a lot to use Postgres'
#Text=EXPLAIN ANALYZE
#Text=command when you want to optimize a query’s performance.
8-1	1292-1297	Where	
8-2	1298-1301	the	
8-3	1302-1311	potential	
8-4	1312-1315	lie	
8-5	1316-1318	is	
8-6	1319-1322	You	
8-7	1323-1326	are	
8-8	1327-1335	probably	
8-9	1336-1345	resorting	
8-10	1346-1347	a	
8-11	1348-1351	lot	
8-12	1352-1354	to	
8-13	1355-1358	use	
8-14	1359-1367	Postgres	
8-15	1367-1368	'	
8-16	1369-1376	EXPLAIN	
8-17	1377-1384	ANALYZE	
8-18	1385-1392	command	
8-19	1393-1397	when	
8-20	1398-1401	you	
8-21	1402-1406	want	
8-22	1407-1409	to	
8-23	1410-1418	optimize	
8-24	1419-1420	a	
8-25	1421-1426	query	
8-26	1426-1427	’	
8-27	1427-1428	s	
8-28	1429-1440	performance	
8-29	1440-1441	.	

#Text=You probably look at
#Text=the query nodes, see which ones have the highest execution time and then try to
#Text=optimize them.
9-1	1442-1445	You	
9-2	1446-1454	probably	
9-3	1455-1459	look	
9-4	1460-1462	at	
9-5	1463-1466	the	
9-6	1467-1472	query	
9-7	1473-1478	nodes	
9-8	1478-1479	,	
9-9	1480-1483	see	
9-10	1484-1489	which	
9-11	1490-1494	ones	
9-12	1495-1499	have	
9-13	1500-1503	the	
9-14	1504-1511	highest	
9-15	1512-1521	execution	
9-16	1522-1526	time	
9-17	1527-1530	and	
9-18	1531-1535	then	
9-19	1536-1539	try	
9-20	1540-1542	to	
9-21	1543-1551	optimize	
9-22	1552-1556	them	
9-23	1556-1557	.	

#Text=The costlier the node is, the biggest return of investment you
#Text=get if you can optimize it.
10-1	1558-1561	The	
10-2	1562-1570	costlier	
10-3	1571-1574	the	
10-4	1575-1579	node	
10-5	1580-1582	is	
10-6	1582-1583	,	
10-7	1584-1587	the	
10-8	1588-1595	biggest	
10-9	1596-1602	return	
10-10	1603-1605	of	
10-11	1606-1616	investment	
10-12	1617-1620	you	
10-13	1621-1624	get	
10-14	1625-1627	if	
10-15	1628-1631	you	
10-16	1632-1635	can	
10-17	1636-1644	optimize	
10-18	1645-1647	it	
10-19	1647-1648	.	

#Text=Obviously, a query optimization may change the query
#Text=plan altogether, but you get the point: you want to know where most of the query
#Text=execution time is going.
11-1	1649-1658	Obviously	
11-2	1658-1659	,	
11-3	1660-1661	a	
11-4	1662-1667	query	
11-5	1668-1680	optimization	
11-6	1681-1684	may	
11-7	1685-1691	change	
11-8	1692-1695	the	
11-9	1696-1701	query	
11-10	1702-1706	plan	
11-11	1707-1717	altogether	
11-12	1717-1718	,	
11-13	1719-1722	but	
11-14	1723-1726	you	
11-15	1727-1730	get	
11-16	1731-1734	the	
11-17	1735-1740	point	
11-18	1740-1741	:	
11-19	1742-1745	you	
11-20	1746-1750	want	
11-21	1751-1753	to	
11-22	1754-1758	know	
11-23	1759-1764	where	
11-24	1765-1769	most	
11-25	1770-1772	of	
11-26	1773-1776	the	
11-27	1777-1782	query	
11-28	1783-1792	execution	
11-29	1793-1797	time	
11-30	1798-1800	is	
11-31	1801-1806	going	
11-32	1806-1807	.	

#Text=Now grab your favorite Postgres and run the following commands:
#Text=create table i1 as select i from generate_series(1,1000*1000) as i;
#Text=create table i2 as select i from generate_series(1,1000) as i;
#Text=analyze;
#Text=explain analyze select sum(i1.i * i2.i) from i1 inner join i2 using (i);
#Text=Note that the first analyze command is not related at all with the explain analyze command that follows it.
12-1	1808-1811	Now	
12-2	1812-1816	grab	
12-3	1817-1821	your	
12-4	1822-1830	favorite	
12-5	1831-1839	Postgres	
12-6	1840-1843	and	
12-7	1844-1847	run	
12-8	1848-1851	the	
12-9	1852-1861	following	
12-10	1862-1870	commands	
12-11	1870-1871	:	
12-12	1872-1878	create	
12-13	1879-1884	table	
12-14	1885-1887	i1	
12-15	1888-1890	as	
12-16	1891-1897	select	
12-17	1898-1899	i	
12-18	1900-1904	from	
12-19	1905-1920	generate_series	
12-20	1920-1921	(	
12-21	1921-1927	1,1000	
12-22	1927-1928	*	
12-23	1928-1932	1000	
12-24	1932-1933	)	
12-25	1934-1936	as	
12-26	1937-1938	i	
12-27	1938-1939	;	
12-28	1940-1946	create	
12-29	1947-1952	table	
12-30	1953-1955	i2	
12-31	1956-1958	as	
12-32	1959-1965	select	
12-33	1966-1967	i	
12-34	1968-1972	from	
12-35	1973-1988	generate_series	
12-36	1988-1989	(	
12-37	1989-1995	1,1000	
12-38	1995-1996	)	
12-39	1997-1999	as	
12-40	2000-2001	i	
12-41	2001-2002	;	
12-42	2003-2010	analyze	
12-43	2010-2011	;	
12-44	2012-2019	explain	
12-45	2020-2027	analyze	
12-46	2028-2034	select	
12-47	2035-2038	sum	
12-48	2038-2039	(	
12-49	2039-2041	i1	
12-50	2041-2042	.	
12-51	2042-2043	i	
12-52	2044-2045	*	
12-53	2046-2048	i2	
12-54	2048-2049	.	
12-55	2049-2050	i	
12-56	2050-2051	)	
12-57	2052-2056	from	
12-58	2057-2059	i1	
12-59	2060-2065	inner	
12-60	2066-2070	join	
12-61	2071-2073	i2	
12-62	2074-2079	using	
12-63	2080-2081	(	
12-64	2081-2082	i	
12-65	2082-2083	)	
12-66	2083-2084	;	
12-67	2085-2089	Note	
12-68	2090-2094	that	
12-69	2095-2098	the	
12-70	2099-2104	first	
12-71	2105-2112	analyze	
12-72	2113-2120	command	
12-73	2121-2123	is	
12-74	2124-2127	not	
12-75	2128-2135	related	
12-76	2136-2138	at	
12-77	2139-2142	all	
12-78	2143-2147	with	
12-79	2148-2151	the	
12-80	2152-2159	explain	
12-81	2160-2167	analyze	
12-82	2168-2175	command	
12-83	2176-2180	that	
12-84	2181-2188	follows	
12-85	2189-2191	it	
12-86	2191-2192	.	

#Text=Run the query.
13-1	2193-2196	Run	
13-2	2197-2200	the	
13-3	2201-2206	query	
13-4	2206-2207	.	

#Text=Note the time reported by explain analyze.
14-1	2208-2212	Note	
14-2	2213-2216	the	
14-3	2217-2221	time	
14-4	2222-2230	reported	
14-5	2231-2233	by	
14-6	2234-2241	explain	
14-7	2242-2249	analyze	
14-8	2249-2250	.	

#Text=Now run the query
#Text=again and note the execution time without explain analyze.
15-1	2251-2254	Now	
15-2	2255-2258	run	
15-3	2259-2262	the	
15-4	2263-2268	query	
15-5	2269-2274	again	
15-6	2275-2278	and	
15-7	2279-2283	note	
15-8	2284-2287	the	
15-9	2288-2297	execution	
15-10	2298-2302	time	
15-11	2303-2310	without	
15-12	2311-2318	explain	
15-13	2319-2326	analyze	
15-14	2326-2327	.	

#Text=You can do this,
#Text=for example, by:
#Text=Running from psql and using both \\timing and \\o /dev/null.
16-1	2328-2331	You	
16-2	2332-2335	can	
16-3	2336-2338	do	
16-4	2339-2343	this	
16-5	2343-2344	,	
16-6	2345-2348	for	
16-7	2349-2356	example	
16-8	2356-2357	,	
16-9	2358-2360	by	
16-10	2360-2361	:	
16-11	2362-2369	Running	
16-12	2370-2374	from	
16-13	2375-2379	psql	
16-14	2380-2383	and	
16-15	2384-2389	using	
16-16	2390-2394	both	
16-17	2395-2396	\	
16-18	2396-2402	timing	
16-19	2403-2406	and	
16-20	2407-2408	\	
16-21	2408-2409	o	
16-22	2410-2411	/	
16-23	2411-2414	dev	
16-24	2414-2415	/	
16-25	2415-2419	null	
16-26	2419-2420	.	

#Text=Using pg_stat_statements.
17-1	2421-2426	Using	
17-2	2427-2445	pg_stat_statements	
17-3	2445-2446	.	

#Text=The latter is a better method, as the former includes client round-trip time and processing.
18-1	2447-2450	The	
18-2	2451-2457	latter	
18-3	2458-2460	is	
18-4	2461-2462	a	
18-5	2463-2469	better	
18-6	2470-2476	method	
18-7	2476-2477	,	
18-8	2478-2480	as	
18-9	2481-2484	the	
18-10	2485-2491	former	
18-11	2492-2500	includes	
18-12	2501-2507	client	
18-13	2508-2518	round-trip	
18-14	2519-2523	time	
18-15	2524-2527	and	
18-16	2528-2538	processing	
18-17	2538-2539	.	

#Text=But
#Text=this overhead should be negligible for this case.
19-1	2540-2543	But	
19-2	2544-2548	this	
19-3	2549-2557	overhead	
19-4	2558-2564	should	
19-5	2565-2567	be	
19-6	2568-2578	negligible	
19-7	2579-2582	for	
19-8	2583-2587	this	
19-9	2588-2592	case	
19-10	2592-2593	.	

#Text=Do you see anything wrong?
20-1	2594-2596	Do	
20-2	2597-2600	you	
20-3	2601-2604	see	
20-4	2605-2613	anything	
20-5	2614-2619	wrong	
20-6	2619-2620	?	

#Text=The execution time as reported by EXPLAIN ANALYZE
#Text=is substantially higher than that of the real query execution time.
21-1	2621-2624	The	
21-2	2625-2634	execution	
21-3	2635-2639	time	
21-4	2640-2642	as	
21-5	2643-2651	reported	
21-6	2652-2654	by	
21-7	2655-2662	EXPLAIN	
21-8	2663-2670	ANALYZE	
21-9	2671-2673	is	
21-10	2674-2687	substantially	
21-11	2688-2694	higher	
21-12	2695-2699	than	
21-13	2700-2704	that	
21-14	2705-2707	of	
21-15	2708-2711	the	
21-16	2712-2716	real	
21-17	2717-2722	query	
21-18	2723-2732	execution	
21-19	2733-2737	time	
21-20	2737-2738	.	

#Text=On my
#Text=system, running 20 times after another 20 times of warmup:
#Text=query
#Text=calls
#Text=total
#Text=mean
#Text=min
#Text=max
#Text=stddev
#Text=explain analyze select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=917.20
#Text=45.86
#Text=45.32
#Text=49.24
#Text=0.84
#Text=select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=615.73
#Text=30.79
#Text=30.06
#Text=34.48
#Text=0.92
#Text=That’s about a 50% overhead!
22-1	2739-2741	On	
22-2	2742-2744	my	
22-3	2745-2751	system	
22-4	2751-2752	,	
22-5	2753-2760	running	
22-6	2761-2763	20	
22-7	2764-2769	times	
22-8	2770-2775	after	
22-9	2776-2783	another	
22-10	2784-2786	20	
22-11	2787-2792	times	
22-12	2793-2795	of	
22-13	2796-2802	warmup	
22-14	2802-2803	:	
22-15	2804-2809	query	
22-16	2810-2815	calls	
22-17	2816-2821	total	
22-18	2822-2826	mean	
22-19	2827-2830	min	
22-20	2831-2834	max	
22-21	2835-2841	stddev	
22-22	2842-2849	explain	
22-23	2850-2857	analyze	
22-24	2858-2864	select	
22-25	2865-2868	sum	
22-26	2868-2869	(	
22-27	2869-2871	i1	
22-28	2871-2872	.	
22-29	2872-2873	i	
22-30	2874-2875	*	
22-31	2876-2878	i2	
22-32	2878-2879	.	
22-33	2879-2880	i	
22-34	2880-2881	)	
22-35	2882-2886	from	
22-36	2887-2889	i1	
22-37	2890-2895	inner	
22-38	2896-2900	join	
22-39	2901-2903	i2	
22-40	2904-2909	using	
22-41	2910-2911	(	
22-42	2911-2912	i	
22-43	2912-2913	)	
22-44	2914-2920	917.20	
22-45	2921-2926	45.86	
22-46	2927-2932	45.32	
22-47	2933-2938	49.24	
22-48	2939-2943	0.84	
22-49	2944-2950	select	
22-50	2951-2954	sum	
22-51	2954-2955	(	
22-52	2955-2957	i1	
22-53	2957-2958	.	
22-54	2958-2959	i	
22-55	2960-2961	*	
22-56	2962-2964	i2	
22-57	2964-2965	.	
22-58	2965-2966	i	
22-59	2966-2967	)	
22-60	2968-2972	from	
22-61	2973-2975	i1	
22-62	2976-2981	inner	
22-63	2982-2986	join	
22-64	2987-2989	i2	
22-65	2990-2995	using	
22-66	2996-2997	(	
22-67	2997-2998	i	
22-68	2998-2999	)	
22-69	3000-3006	615.73	
22-70	3007-3012	30.79	
22-71	3013-3018	30.06	
22-72	3019-3024	34.48	
22-73	3025-3029	0.92	
22-74	3030-3034	That	
22-75	3034-3035	’	
22-76	3035-3036	s	
22-77	3037-3042	about	
22-78	3043-3044	a	
22-79	3045-3048	50%	
22-80	3049-3057	overhead	
22-81	3057-3058	!	

#Text=As we can see here, the measurement is
#Text=significantly altering the observed fact.
23-1	3059-3061	As	
23-2	3062-3064	we	
23-3	3065-3068	can	
23-4	3069-3072	see	
23-5	3073-3077	here	
23-6	3077-3078	,	
23-7	3079-3082	the	
23-8	3083-3094	measurement	
23-9	3095-3097	is	
23-10	3098-3111	significantly	
23-11	3112-3120	altering	
23-12	3121-3124	the	
23-13	3125-3133	observed	
23-14	3134-3138	fact	
23-15	3138-3139	.	

#Text=But it can get much worse.
24-1	3140-3143	But	
24-2	3144-3146	it	
24-3	3147-3150	can	
24-4	3151-3154	get	
24-5	3155-3159	much	
24-6	3160-3165	worse	
24-7	3165-3166	.	

#Text=For instance,
#Text=on a virtual instance running on a non
#Text=Nitro EC2 instance (r4.large):
#Text=query
#Text=calls
#Text=total
#Text=mean
#Text=min
#Text=max
#Text=stddev
#Text=explain analyze select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=21080.18
#Text=1054.01
#Text=1053.36
#Text=1055.96
#Text=0.55
#Text=select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=2596.85
#Text=129.84
#Text=129.33
#Text=130.45
#Text=0.28
#Text=Here EXPLAIN ANALYZE got 8 times slower, a 700% overhead!
25-1	3167-3170	For	
25-2	3171-3179	instance	
25-3	3179-3180	,	
25-4	3181-3183	on	
25-5	3184-3185	a	
25-6	3186-3193	virtual	
25-7	3194-3202	instance	
25-8	3203-3210	running	
25-9	3211-3213	on	
25-10	3214-3215	a	
25-11	3216-3219	non	
25-12	3220-3225	Nitro	
25-13	3226-3229	EC2	
25-14	3230-3238	instance	
25-15	3239-3240	(	
25-16	3240-3242	r4	
25-17	3242-3243	.	
25-18	3243-3248	large	
25-19	3248-3249	)	
25-20	3249-3250	:	
25-21	3251-3256	query	
25-22	3257-3262	calls	
25-23	3263-3268	total	
25-24	3269-3273	mean	
25-25	3274-3277	min	
25-26	3278-3281	max	
25-27	3282-3288	stddev	
25-28	3289-3296	explain	
25-29	3297-3304	analyze	
25-30	3305-3311	select	
25-31	3312-3315	sum	
25-32	3315-3316	(	
25-33	3316-3318	i1	
25-34	3318-3319	.	
25-35	3319-3320	i	
25-36	3321-3322	*	
25-37	3323-3325	i2	
25-38	3325-3326	.	
25-39	3326-3327	i	
25-40	3327-3328	)	
25-41	3329-3333	from	
25-42	3334-3336	i1	
25-43	3337-3342	inner	
25-44	3343-3347	join	
25-45	3348-3350	i2	
25-46	3351-3356	using	
25-47	3357-3358	(	
25-48	3358-3359	i	
25-49	3359-3360	)	
25-50	3361-3369	21080.18	
25-51	3370-3377	1054.01	
25-52	3378-3385	1053.36	
25-53	3386-3393	1055.96	
25-54	3394-3398	0.55	
25-55	3399-3405	select	
25-56	3406-3409	sum	
25-57	3409-3410	(	
25-58	3410-3412	i1	
25-59	3412-3413	.	
25-60	3413-3414	i	
25-61	3415-3416	*	
25-62	3417-3419	i2	
25-63	3419-3420	.	
25-64	3420-3421	i	
25-65	3421-3422	)	
25-66	3423-3427	from	
25-67	3428-3430	i1	
25-68	3431-3436	inner	
25-69	3437-3441	join	
25-70	3442-3444	i2	
25-71	3445-3450	using	
25-72	3451-3452	(	
25-73	3452-3453	i	
25-74	3453-3454	)	
25-75	3455-3462	2596.85	
25-76	3463-3469	129.84	
25-77	3470-3476	129.33	
25-78	3477-3483	130.45	
25-79	3484-3488	0.28	
25-80	3489-3493	Here	
25-81	3494-3501	EXPLAIN	
25-82	3502-3509	ANALYZE	
25-83	3510-3513	got	
25-84	3514-3515	8	
25-85	3516-3521	times	
25-86	3522-3528	slower	
25-87	3528-3529	,	
25-88	3530-3531	a	
25-89	3532-3536	700%	
25-90	3537-3545	overhead	
25-91	3545-3546	!	

#Text=Astute readers may realize that this effect is related to the system clock.
26-1	3547-3553	Astute	
26-2	3554-3561	readers	
26-3	3562-3565	may	
26-4	3566-3573	realize	
26-5	3574-3578	that	
26-6	3579-3583	this	
26-7	3584-3590	effect	
26-8	3591-3593	is	
26-9	3594-3601	related	
26-10	3602-3604	to	
26-11	3605-3608	the	
26-12	3609-3615	system	
26-13	3616-3621	clock	
26-14	3621-3622	.	

#Text=Non Nitro instances are virtualized with Xen, which exposes a xen virtualized
#Text=clock to the VMs.
27-1	3623-3626	Non	
27-2	3627-3632	Nitro	
27-3	3633-3642	instances	
27-4	3643-3646	are	
27-5	3647-3658	virtualized	
27-6	3659-3663	with	
27-7	3664-3667	Xen	
27-8	3667-3668	,	
27-9	3669-3674	which	
27-10	3675-3682	exposes	
27-11	3683-3684	a	
27-12	3685-3688	xen	
27-13	3689-3700	virtualized	
27-14	3701-3706	clock	
27-15	3707-3709	to	
27-16	3710-3713	the	
27-17	3714-3717	VMs	
27-18	3717-3718	.	

#Text=On Nitro instances and other virtualized environments where
#Text=KVM is used, clock is as fast as the hypervisor’s, and results are similar to
#Text=the first ones shown here.
28-1	3719-3721	On	
28-2	3722-3727	Nitro	
28-3	3728-3737	instances	
28-4	3738-3741	and	
28-5	3742-3747	other	
28-6	3748-3759	virtualized	
28-7	3760-3772	environments	
28-8	3773-3778	where	
28-9	3779-3782	KVM	
28-10	3783-3785	is	
28-11	3786-3790	used	
28-12	3790-3791	,	
28-13	3792-3797	clock	
28-14	3798-3800	is	
28-15	3801-3803	as	
28-16	3804-3808	fast	
28-17	3809-3811	as	
28-18	3812-3815	the	
28-19	3816-3826	hypervisor	
28-20	3826-3827	’	
28-21	3827-3828	s	
28-22	3828-3829	,	
28-23	3830-3833	and	
28-24	3834-3841	results	
28-25	3842-3845	are	
28-26	3846-3853	similar	
28-27	3854-3856	to	
28-28	3857-3860	the	
28-29	3861-3866	first	
28-30	3867-3871	ones	
28-31	3872-3877	shown	
28-32	3878-3882	here	
28-33	3882-3883	.	

#Text=We may also mitigate this effort on r4.large by
#Text=switching to the tsc time source:
#Text=echo tsc | sudo tee -a /sys/devices/system/clocksource/clocksource0/current_clocksource
#Text=query
#Text=calls
#Text=total
#Text=mean
#Text=min
#Text=max
#Text=stddev
#Text=explain analyze select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=3747.07
#Text=187.37
#Text=187.12
#Text=187.56
#Text=0.12
#Text=select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=2602.45
#Text=130.12
#Text=129.88
#Text=130.77
#Text=0.21
#Text=Also note that results will change if you configure differently
#Text=max_parallel_workers_per_gather as these results are affected by the level of
#Text=parallelism used.
29-1	3884-3886	We	
29-2	3887-3890	may	
29-3	3891-3895	also	
29-4	3896-3904	mitigate	
29-5	3905-3909	this	
29-6	3910-3916	effort	
29-7	3917-3919	on	
29-8	3920-3922	r4	
29-9	3922-3923	.	
29-10	3923-3928	large	
29-11	3929-3931	by	
29-12	3932-3941	switching	
29-13	3942-3944	to	
29-14	3945-3948	the	
29-15	3949-3952	tsc	
29-16	3953-3957	time	
29-17	3958-3964	source	
29-18	3964-3965	:	
29-19	3966-3970	echo	
29-20	3971-3974	tsc	
29-21	3975-3976	|	
29-22	3977-3981	sudo	
29-23	3982-3985	tee	
29-24	3986-3987	-	
29-25	3987-3988	a	
29-26	3989-3990	/	
29-27	3990-3993	sys	
29-28	3993-3994	/	
29-29	3994-4001	devices	
29-30	4001-4002	/	
29-31	4002-4008	system	
29-32	4008-4009	/	
29-33	4009-4020	clocksource	
29-34	4020-4021	/	
29-35	4021-4033	clocksource0	
29-36	4033-4034	/	
29-37	4034-4053	current_clocksource	
29-38	4054-4059	query	
29-39	4060-4065	calls	
29-40	4066-4071	total	
29-41	4072-4076	mean	
29-42	4077-4080	min	
29-43	4081-4084	max	
29-44	4085-4091	stddev	
29-45	4092-4099	explain	
29-46	4100-4107	analyze	
29-47	4108-4114	select	
29-48	4115-4118	sum	
29-49	4118-4119	(	
29-50	4119-4121	i1	
29-51	4121-4122	.	
29-52	4122-4123	i	
29-53	4124-4125	*	
29-54	4126-4128	i2	
29-55	4128-4129	.	
29-56	4129-4130	i	
29-57	4130-4131	)	
29-58	4132-4136	from	
29-59	4137-4139	i1	
29-60	4140-4145	inner	
29-61	4146-4150	join	
29-62	4151-4153	i2	
29-63	4154-4159	using	
29-64	4160-4161	(	
29-65	4161-4162	i	
29-66	4162-4163	)	
29-67	4164-4171	3747.07	
29-68	4172-4178	187.37	
29-69	4179-4185	187.12	
29-70	4186-4192	187.56	
29-71	4193-4197	0.12	
29-72	4198-4204	select	
29-73	4205-4208	sum	
29-74	4208-4209	(	
29-75	4209-4211	i1	
29-76	4211-4212	.	
29-77	4212-4213	i	
29-78	4214-4215	*	
29-79	4216-4218	i2	
29-80	4218-4219	.	
29-81	4219-4220	i	
29-82	4220-4221	)	
29-83	4222-4226	from	
29-84	4227-4229	i1	
29-85	4230-4235	inner	
29-86	4236-4240	join	
29-87	4241-4243	i2	
29-88	4244-4249	using	
29-89	4250-4251	(	
29-90	4251-4252	i	
29-91	4252-4253	)	
29-92	4254-4261	2602.45	
29-93	4262-4268	130.12	
29-94	4269-4275	129.88	
29-95	4276-4282	130.77	
29-96	4283-4287	0.21	
29-97	4288-4292	Also	
29-98	4293-4297	note	
29-99	4298-4302	that	
29-100	4303-4310	results	
29-101	4311-4315	will	
29-102	4316-4322	change	
29-103	4323-4325	if	
29-104	4326-4329	you	
29-105	4330-4339	configure	
29-106	4340-4351	differently	
29-107	4352-4383	max_parallel_workers_per_gather	
29-108	4384-4386	as	
29-109	4387-4392	these	
29-110	4393-4400	results	
29-111	4401-4404	are	
29-112	4405-4413	affected	
29-113	4414-4416	by	
29-114	4417-4420	the	
29-115	4421-4426	level	
29-116	4427-4429	of	
29-117	4430-4441	parallelism	
29-118	4442-4446	used	
29-119	4446-4447	.	

#Text=The good news
#Text=You shouldn’t be surprised, however.
30-1	4448-4451	The	
30-2	4452-4456	good	
30-3	4457-4461	news	
30-4	4462-4465	You	
30-5	4466-4473	shouldn	
30-6	4473-4474	’	
30-7	4474-4475	t	
30-8	4476-4478	be	
30-9	4479-4488	surprised	
30-10	4488-4489	,	
30-11	4490-4497	however	
30-12	4497-4498	.	

#Text=This behavior is known and documented.
31-1	4499-4503	This	
31-2	4504-4512	behavior	
31-3	4513-4515	is	
31-4	4516-4521	known	
31-5	4522-4525	and	
31-6	4526-4536	documented	
31-7	4536-4537	.	

#Text=As
#Text=usual, Postgres documentation is as complete as it can be:
#Text=The measurement overhead added by EXPLAIN ANALYZE can be significant,
#Text=especially on machines with slow gettimeofday() operating-system calls.
32-1	4538-4540	As	
32-2	4541-4546	usual	
32-3	4546-4547	,	
32-4	4548-4556	Postgres	
32-5	4557-4570	documentation	
32-6	4571-4573	is	
32-7	4574-4576	as	
32-8	4577-4585	complete	
32-9	4586-4588	as	
32-10	4589-4591	it	
32-11	4592-4595	can	
32-12	4596-4598	be	
32-13	4598-4599	:	
32-14	4600-4603	The	
32-15	4604-4615	measurement	
32-16	4616-4624	overhead	
32-17	4625-4630	added	
32-18	4631-4633	by	
32-19	4634-4641	EXPLAIN	
32-20	4642-4649	ANALYZE	
32-21	4650-4653	can	
32-22	4654-4656	be	
32-23	4657-4668	significant	
32-24	4668-4669	,	
32-25	4670-4680	especially	
32-26	4681-4683	on	
32-27	4684-4692	machines	
32-28	4693-4697	with	
32-29	4698-4702	slow	
32-30	4703-4715	gettimeofday	
32-31	4715-4716	(	
32-32	4716-4717	)	
32-33	4718-4734	operating-system	
32-34	4735-4740	calls	
32-35	4740-4741	.	

#Text=You
#Text=can use the pg_test_timing tool to measure the overhead of timing on your
#Text=system.
33-1	4742-4745	You	
33-2	4746-4749	can	
33-3	4750-4753	use	
33-4	4754-4757	the	
33-5	4758-4772	pg_test_timing	
33-6	4773-4777	tool	
33-7	4778-4780	to	
33-8	4781-4788	measure	
33-9	4789-4792	the	
33-10	4793-4801	overhead	
33-11	4802-4804	of	
33-12	4805-4811	timing	
33-13	4812-4814	on	
33-14	4815-4819	your	
33-15	4820-4826	system	
33-16	4826-4827	.	

#Text=EXPLAIN caveats
#Text=However, I have found that many users and DBAs are either unaware of this effect
#Text=or not aware of how significant it may be.
34-1	4828-4835	EXPLAIN	
34-2	4836-4843	caveats	
34-3	4844-4851	However	
34-4	4851-4852	,	
34-5	4853-4854	I	
34-6	4855-4859	have	
34-7	4860-4865	found	
34-8	4866-4870	that	
34-9	4871-4875	many	
34-10	4876-4881	users	
34-11	4882-4885	and	
34-12	4886-4890	DBAs	
34-13	4891-4894	are	
34-14	4895-4901	either	
34-15	4902-4909	unaware	
34-16	4910-4912	of	
34-17	4913-4917	this	
34-18	4918-4924	effect	
34-19	4925-4927	or	
34-20	4928-4931	not	
34-21	4932-4937	aware	
34-22	4938-4940	of	
34-23	4941-4944	how	
34-24	4945-4956	significant	
34-25	4957-4959	it	
34-26	4960-4963	may	
34-27	4964-4966	be	
34-28	4966-4967	.	

#Text=This post is my humble contribution
#Text=to make this effect more widely unserstood.
35-1	4968-4972	This	
35-2	4973-4977	post	
35-3	4978-4980	is	
35-4	4981-4983	my	
35-5	4984-4990	humble	
35-6	4991-5003	contribution	
35-7	5004-5006	to	
35-8	5007-5011	make	
35-9	5012-5016	this	
35-10	5017-5023	effect	
35-11	5024-5028	more	
35-12	5029-5035	widely	
35-13	5036-5046	unserstood	
35-14	5046-5047	.	

#Text=The Volcano
#Text=Why is this happening, after all?
36-1	5048-5051	The	
36-2	5052-5059	Volcano	
36-3	5060-5063	Why	
36-4	5064-5066	is	
36-5	5067-5071	this	
36-6	5072-5081	happening	
36-7	5081-5082	,	
36-8	5083-5088	after	
36-9	5089-5092	all	
36-10	5092-5093	?	

#Text=Postgres, like other OLTP databases, follows a
#Text=query execution model named
#Text=the Volcano model.
37-1	5094-5102	Postgres	
37-2	5102-5103	,	
37-3	5104-5108	like	
37-4	5109-5114	other	
37-5	5115-5119	OLTP	
37-6	5120-5129	databases	
37-7	5129-5130	,	
37-8	5131-5138	follows	
37-9	5139-5140	a	
37-10	5141-5146	query	
37-11	5147-5156	execution	
37-12	5157-5162	model	
37-13	5163-5168	named	
37-14	5169-5172	the	
37-15	5173-5180	Volcano	
37-16	5181-5186	model	
37-17	5186-5187	.	

#Text=Under this model, also known as one-row-at-a-time, each node of the query
#Text=execution tree contains code to process rows one by one.
38-1	5188-5193	Under	
38-2	5194-5198	this	
38-3	5199-5204	model	
38-4	5204-5205	,	
38-5	5206-5210	also	
38-6	5211-5216	known	
38-7	5217-5219	as	
38-8	5220-5237	one-row-at-a-time	
38-9	5237-5238	,	
38-10	5239-5243	each	
38-11	5244-5248	node	
38-12	5249-5251	of	
38-13	5252-5255	the	
38-14	5256-5261	query	
38-15	5262-5271	execution	
38-16	5272-5276	tree	
38-17	5277-5285	contains	
38-18	5286-5290	code	
38-19	5291-5293	to	
38-20	5294-5301	process	
38-21	5302-5306	rows	
38-22	5307-5310	one	
38-23	5311-5313	by	
38-24	5314-5317	one	
38-25	5317-5318	.	

#Text=Instead of every node
#Text=gathering all the rows belonging to it before combining with the next node, as
#Text=soon as a row is gathered at one node, it is processed through the rest of the
#Text=tree.
39-1	5319-5326	Instead	
39-2	5327-5329	of	
39-3	5330-5335	every	
39-4	5336-5340	node	
39-5	5341-5350	gathering	
39-6	5351-5354	all	
39-7	5355-5358	the	
39-8	5359-5363	rows	
39-9	5364-5373	belonging	
39-10	5374-5376	to	
39-11	5377-5379	it	
39-12	5380-5386	before	
39-13	5387-5396	combining	
39-14	5397-5401	with	
39-15	5402-5405	the	
39-16	5406-5410	next	
39-17	5411-5415	node	
39-18	5415-5416	,	
39-19	5417-5419	as	
39-20	5420-5424	soon	
39-21	5425-5427	as	
39-22	5428-5429	a	
39-23	5430-5433	row	
39-24	5434-5436	is	
39-25	5437-5445	gathered	
39-26	5446-5448	at	
39-27	5449-5452	one	
39-28	5453-5457	node	
39-29	5457-5458	,	
39-30	5459-5461	it	
39-31	5462-5464	is	
39-32	5465-5474	processed	
39-33	5475-5482	through	
39-34	5483-5486	the	
39-35	5487-5491	rest	
39-36	5492-5494	of	
39-37	5495-5498	the	
39-38	5499-5503	tree	
39-39	5503-5504	.	

#Text=This makes sense –gathering all the rows at a given node may require to
#Text=hold all that data in memory, which could be impossible–, but it introduced the
#Text=EXPLAIN ANALYZE problem described here.
40-1	5505-5509	This	
40-2	5510-5515	makes	
40-3	5516-5521	sense	
40-4	5522-5523	–	
40-5	5523-5532	gathering	
40-6	5533-5536	all	
40-7	5537-5540	the	
40-8	5541-5545	rows	
40-9	5546-5548	at	
40-10	5549-5550	a	
40-11	5551-5556	given	
40-12	5557-5561	node	
40-13	5562-5565	may	
40-14	5566-5573	require	
40-15	5574-5576	to	
40-16	5577-5581	hold	
40-17	5582-5585	all	
40-18	5586-5590	that	
40-19	5591-5595	data	
40-20	5596-5598	in	
40-21	5599-5605	memory	
40-22	5605-5606	,	
40-23	5607-5612	which	
40-24	5613-5618	could	
40-25	5619-5621	be	
40-26	5622-5632	impossible	
40-27	5632-5633	–	
40-28	5633-5634	,	
40-29	5635-5638	but	
40-30	5639-5641	it	
40-31	5642-5652	introduced	
40-32	5653-5656	the	
40-33	5657-5664	EXPLAIN	
40-34	5665-5672	ANALYZE	
40-35	5673-5680	problem	
40-36	5681-5690	described	
40-37	5691-5695	here	
40-38	5695-5696	.	

#Text=The executor processes a tree of “plan nodes”.
41-1	5697-5700	The	
41-2	5701-5709	executor	
41-3	5710-5719	processes	
41-4	5720-5721	a	
41-5	5722-5726	tree	
41-6	5727-5729	of	
41-7	5730-5731	“	
41-8	5731-5735	plan	
41-9	5736-5741	nodes	
41-10	5741-5742	”	
41-11	5742-5743	.	

#Text=The plan tree is essentially
#Text=a demand-pull pipeline of tuple processing operations.
42-1	5744-5747	The	
42-2	5748-5752	plan	
42-3	5753-5757	tree	
42-4	5758-5760	is	
42-5	5761-5772	essentially	
42-6	5773-5774	a	
42-7	5775-5786	demand-pull	
42-8	5787-5795	pipeline	
42-9	5796-5798	of	
42-10	5799-5804	tuple	
42-11	5805-5815	processing	
42-12	5816-5826	operations	
42-13	5826-5827	.	

#Text=Each node, when
#Text=called, will produce the next tuple in its output sequence, or NULL if no
#Text=more tuples are available.
43-1	5828-5832	Each	
43-2	5833-5837	node	
43-3	5837-5838	,	
43-4	5839-5843	when	
43-5	5844-5850	called	
43-6	5850-5851	,	
43-7	5852-5856	will	
43-8	5857-5864	produce	
43-9	5865-5868	the	
43-10	5869-5873	next	
43-11	5874-5879	tuple	
43-12	5880-5882	in	
43-13	5883-5886	its	
43-14	5887-5893	output	
43-15	5894-5902	sequence	
43-16	5902-5903	,	
43-17	5904-5906	or	
43-18	5907-5911	NULL	
43-19	5912-5914	if	
43-20	5915-5917	no	
43-21	5918-5922	more	
43-22	5923-5929	tuples	
43-23	5930-5933	are	
43-24	5934-5943	available	
43-25	5943-5944	.	

#Text=If the node is not a primitive relation-scanning
#Text=node, it will have child node(s) that it calls in turn to obtain input
#Text=tuples.
#Text=src/backend/executor/README
#Text=So we can already explain exactly where the overhead comes from: in order to
#Text=measure the execution time of a given node, as shown by explain analyze, you
#Text=need to measure the execution time on a per-row basis, and then aggregate them
#Text=per node, to obtain the total execution time per node.
44-1	5945-5947	If	
44-2	5948-5951	the	
44-3	5952-5956	node	
44-4	5957-5959	is	
44-5	5960-5963	not	
44-6	5964-5965	a	
44-7	5966-5975	primitive	
44-8	5976-5993	relation-scanning	
44-9	5994-5998	node	
44-10	5998-5999	,	
44-11	6000-6002	it	
44-12	6003-6007	will	
44-13	6008-6012	have	
44-14	6013-6018	child	
44-15	6019-6023	node	
44-16	6023-6024	(	
44-17	6024-6025	s	
44-18	6025-6026	)	
44-19	6027-6031	that	
44-20	6032-6034	it	
44-21	6035-6040	calls	
44-22	6041-6043	in	
44-23	6044-6048	turn	
44-24	6049-6051	to	
44-25	6052-6058	obtain	
44-26	6059-6064	input	
44-27	6065-6071	tuples	
44-28	6071-6072	.	
44-29	6073-6076	src	
44-30	6076-6077	/	
44-31	6077-6084	backend	
44-32	6084-6085	/	
44-33	6085-6093	executor	
44-34	6093-6094	/	
44-35	6094-6100	README	
44-36	6101-6103	So	
44-37	6104-6106	we	
44-38	6107-6110	can	
44-39	6111-6118	already	
44-40	6119-6126	explain	
44-41	6127-6134	exactly	
44-42	6135-6140	where	
44-43	6141-6144	the	
44-44	6145-6153	overhead	
44-45	6154-6159	comes	
44-46	6160-6164	from	
44-47	6164-6165	:	
44-48	6166-6168	in	
44-49	6169-6174	order	
44-50	6175-6177	to	
44-51	6178-6185	measure	
44-52	6186-6189	the	
44-53	6190-6199	execution	
44-54	6200-6204	time	
44-55	6205-6207	of	
44-56	6208-6209	a	
44-57	6210-6215	given	
44-58	6216-6220	node	
44-59	6220-6221	,	
44-60	6222-6224	as	
44-61	6225-6230	shown	
44-62	6231-6233	by	
44-63	6234-6241	explain	
44-64	6242-6249	analyze	
44-65	6249-6250	,	
44-66	6251-6254	you	
44-67	6255-6259	need	
44-68	6260-6262	to	
44-69	6263-6270	measure	
44-70	6271-6274	the	
44-71	6275-6284	execution	
44-72	6285-6289	time	
44-73	6290-6292	on	
44-74	6293-6294	a	
44-75	6295-6302	per-row	
44-76	6303-6308	basis	
44-77	6308-6309	,	
44-78	6310-6313	and	
44-79	6314-6318	then	
44-80	6319-6328	aggregate	
44-81	6329-6333	them	
44-82	6334-6337	per	
44-83	6338-6342	node	
44-84	6342-6343	,	
44-85	6344-6346	to	
44-86	6347-6353	obtain	
44-87	6354-6357	the	
44-88	6358-6363	total	
44-89	6364-6373	execution	
44-90	6374-6378	time	
44-91	6379-6382	per	
44-92	6383-6387	node	
44-93	6387-6388	.	

#Text=Since rows are not executed one after the other (since a row may be processed by
#Text=other nodes first), you basically need to get the system time before and after
#Text=processing every row.
45-1	6389-6394	Since	
45-2	6395-6399	rows	
45-3	6400-6403	are	
45-4	6404-6407	not	
45-5	6408-6416	executed	
45-6	6417-6420	one	
45-7	6421-6426	after	
45-8	6427-6430	the	
45-9	6431-6436	other	
45-10	6437-6438	(	
45-11	6438-6443	since	
45-12	6444-6445	a	
45-13	6446-6449	row	
45-14	6450-6453	may	
45-15	6454-6456	be	
45-16	6457-6466	processed	
45-17	6467-6469	by	
45-18	6470-6475	other	
45-19	6476-6481	nodes	
45-20	6482-6487	first	
45-21	6487-6488	)	
45-22	6488-6489	,	
45-23	6490-6493	you	
45-24	6494-6503	basically	
45-25	6504-6508	need	
45-26	6509-6511	to	
45-27	6512-6515	get	
45-28	6516-6519	the	
45-29	6520-6526	system	
45-30	6527-6531	time	
45-31	6532-6538	before	
45-32	6539-6542	and	
45-33	6543-6548	after	
45-34	6549-6559	processing	
45-35	6560-6565	every	
45-36	6566-6569	row	
45-37	6569-6570	.	

#Text=In other words: you are calling the system twice per row.
46-1	6571-6573	In	
46-2	6574-6579	other	
46-3	6580-6585	words	
46-4	6585-6586	:	
46-5	6587-6590	you	
46-6	6591-6594	are	
46-7	6595-6602	calling	
46-8	6603-6606	the	
46-9	6607-6613	system	
46-10	6614-6619	twice	
46-11	6620-6623	per	
46-12	6624-6627	row	
46-13	6627-6628	.	

#Text=On a node that processes millions of rows, you are then calling the system time
#Text=millions of times.
47-1	6629-6631	On	
47-2	6632-6633	a	
47-3	6634-6638	node	
47-4	6639-6643	that	
47-5	6644-6653	processes	
47-6	6654-6662	millions	
47-7	6663-6665	of	
47-8	6666-6670	rows	
47-9	6670-6671	,	
47-10	6672-6675	you	
47-11	6676-6679	are	
47-12	6680-6684	then	
47-13	6685-6692	calling	
47-14	6693-6696	the	
47-15	6697-6703	system	
47-16	6704-6708	time	
47-17	6709-6717	millions	
47-18	6718-6720	of	
47-19	6721-6726	times	
47-20	6726-6727	.	

#Text=But how cheap (or expensive) is it to call the system clock?
48-1	6728-6731	But	
48-2	6732-6735	how	
48-3	6736-6741	cheap	
48-4	6742-6743	(	
48-5	6743-6745	or	
48-6	6746-6755	expensive	
48-7	6755-6756	)	
48-8	6757-6759	is	
48-9	6760-6762	it	
48-10	6763-6765	to	
48-11	6766-6770	call	
48-12	6771-6774	the	
48-13	6775-6781	system	
48-14	6782-6787	clock	
48-15	6787-6788	?	

#Text=In Postgres, this
#Text=is implemented in the
#Text=elapsed_time
#Text=function, which in turn relies on the
#Text=INSTR_TIME macros defined in
#Text=instr_time.h.
49-1	6789-6791	In	
49-2	6792-6800	Postgres	
49-3	6800-6801	,	
49-4	6802-6806	this	
49-5	6807-6809	is	
49-6	6810-6821	implemented	
49-7	6822-6824	in	
49-8	6825-6828	the	
49-9	6829-6841	elapsed_time	
49-10	6842-6850	function	
49-11	6850-6851	,	
49-12	6852-6857	which	
49-13	6858-6860	in	
49-14	6861-6865	turn	
49-15	6866-6872	relies	
49-16	6873-6875	on	
49-17	6876-6879	the	
49-18	6880-6890	INSTR_TIME	
49-19	6891-6897	macros	
49-20	6898-6905	defined	
49-21	6906-6908	in	
49-22	6909-6921	instr_time.h	
49-23	6921-6922	.	

#Text=Which calls the system call clock_gettime, a fast system call on most systems.
50-1	6923-6928	Which	
50-2	6929-6934	calls	
50-3	6935-6938	the	
50-4	6939-6945	system	
50-5	6946-6950	call	
50-6	6951-6964	clock_gettime	
50-7	6964-6965	,	
50-8	6966-6967	a	
50-9	6968-6972	fast	
50-10	6973-6979	system	
50-11	6980-6984	call	
50-12	6985-6987	on	
50-13	6988-6992	most	
50-14	6993-7000	systems	
50-15	7000-7001	.	

#Text=In particular, on Linux, is typically implemented as a
#Text=VDSO, meaning that there’s no context
#Text=switch between user and kernel space, making the call significantly faster.
51-1	7002-7004	In	
51-2	7005-7015	particular	
51-3	7015-7016	,	
51-4	7017-7019	on	
51-5	7020-7025	Linux	
51-6	7025-7026	,	
51-7	7027-7029	is	
51-8	7030-7039	typically	
51-9	7040-7051	implemented	
51-10	7052-7054	as	
51-11	7055-7056	a	
51-12	7057-7061	VDSO	
51-13	7061-7062	,	
51-14	7063-7070	meaning	
51-15	7071-7075	that	
51-16	7076-7081	there	
51-17	7081-7082	’	
51-18	7082-7083	s	
51-19	7084-7086	no	
51-20	7087-7094	context	
51-21	7095-7101	switch	
51-22	7102-7109	between	
51-23	7110-7114	user	
51-24	7115-7118	and	
51-25	7119-7125	kernel	
51-26	7126-7131	space	
51-27	7131-7132	,	
51-28	7133-7139	making	
51-29	7140-7143	the	
51-30	7144-7148	call	
51-31	7149-7162	significantly	
51-32	7163-7169	faster	
51-33	7169-7170	.	

#Text=But again, how fast is “fast”, if we might be calling this millions of times?
52-1	7171-7174	But	
52-2	7175-7180	again	
52-3	7180-7181	,	
52-4	7182-7185	how	
52-5	7186-7190	fast	
52-6	7191-7193	is	
52-7	7194-7195	“	
52-8	7195-7199	fast	
52-9	7199-7200	”	
52-10	7200-7201	,	
52-11	7202-7204	if	
52-12	7205-7207	we	
52-13	7208-7213	might	
52-14	7214-7216	be	
52-15	7217-7224	calling	
52-16	7225-7229	this	
52-17	7230-7238	millions	
52-18	7239-7241	of	
52-19	7242-7247	times	
52-20	7247-7248	?	

#Text=Again, Postgres
#Text=documentation comes to
#Text=the rescue, as there’s a binary included in Postgres to precisely do this,
#Text=pg_test_timing.
53-1	7249-7254	Again	
53-2	7254-7255	,	
53-3	7256-7264	Postgres	
53-4	7265-7278	documentation	
53-5	7279-7284	comes	
53-6	7285-7287	to	
53-7	7288-7291	the	
53-8	7292-7298	rescue	
53-9	7298-7299	,	
53-10	7300-7302	as	
53-11	7303-7308	there	
53-12	7308-7309	’	
53-13	7309-7310	s	
53-14	7311-7312	a	
53-15	7313-7319	binary	
53-16	7320-7328	included	
53-17	7329-7331	in	
53-18	7332-7340	Postgres	
53-19	7341-7343	to	
53-20	7344-7353	precisely	
53-21	7354-7356	do	
53-22	7357-7361	this	
53-23	7361-7362	,	
53-24	7363-7377	pg_test_timing	
53-25	7377-7378	.	

#Text=Indeed, it has a documentation
#Text=section
#Text=explaining how to use it to measure the EXPLAIN ANALYZE overhead.
54-1	7379-7385	Indeed	
54-2	7385-7386	,	
54-3	7387-7389	it	
54-4	7390-7393	has	
54-5	7394-7395	a	
54-6	7396-7409	documentation	
54-7	7410-7417	section	
54-8	7418-7428	explaining	
54-9	7429-7432	how	
54-10	7433-7435	to	
54-11	7436-7439	use	
54-12	7440-7442	it	
54-13	7443-7445	to	
54-14	7446-7453	measure	
54-15	7454-7457	the	
54-16	7458-7465	EXPLAIN	
54-17	7466-7473	ANALYZE	
54-18	7474-7482	overhead	
54-19	7482-7483	.	

#Text=On one of the systems used for the measurements above, it reports:
#Text=Testing timing overhead for 3 seconds.
55-1	7484-7486	On	
55-2	7487-7490	one	
55-3	7491-7493	of	
55-4	7494-7497	the	
55-5	7498-7505	systems	
55-6	7506-7510	used	
55-7	7511-7514	for	
55-8	7515-7518	the	
55-9	7519-7531	measurements	
55-10	7532-7537	above	
55-11	7537-7538	,	
55-12	7539-7541	it	
55-13	7542-7549	reports	
55-14	7549-7550	:	
55-15	7551-7558	Testing	
55-16	7559-7565	timing	
55-17	7566-7574	overhead	
55-18	7575-7578	for	
55-19	7579-7580	3	
55-20	7581-7588	seconds	
55-21	7588-7589	.	

#Text=Per loop time including overhead: 4620,82 ns
#Text=Histogram of timing durations:
#Text=< us
#Text=% of total
#Text=count
#Text=0,00000
#Text=0,00000
#Text=0,00000
#Text=99,85491
#Text=648295
#Text=0,01586
#Text=103
#Text=0,12060
#Text=783
#Text=0,00863
#Text=Basically, the overhead is for most cases around 5 micro seconds.
56-1	7590-7593	Per	
56-2	7594-7598	loop	
56-3	7599-7603	time	
56-4	7604-7613	including	
56-5	7614-7622	overhead	
56-6	7622-7623	:	
56-7	7624-7631	4620,82	
56-8	7632-7634	ns	
56-9	7635-7644	Histogram	
56-10	7645-7647	of	
56-11	7648-7654	timing	
56-12	7655-7664	durations	
56-13	7664-7665	:	
56-14	7666-7667	<	
56-15	7668-7670	us	
56-16	7671-7672	%	
56-17	7673-7675	of	
56-18	7676-7681	total	
56-19	7682-7687	count	
56-20	7688-7695	0,00000	
56-21	7696-7703	0,00000	
56-22	7704-7711	0,00000	
56-23	7712-7720	99,85491	
56-24	7721-7727	648295	
56-25	7728-7735	0,01586	
56-26	7736-7739	103	
56-27	7740-7747	0,12060	
56-28	7748-7751	783	
56-29	7752-7759	0,00863	
56-30	7760-7769	Basically	
56-31	7769-7770	,	
56-32	7771-7774	the	
56-33	7775-7783	overhead	
56-34	7784-7786	is	
56-35	7787-7790	for	
56-36	7791-7795	most	
56-37	7796-7801	cases	
56-38	7802-7808	around	
56-39	7809-7810	5	
56-40	7811-7816	micro	
56-41	7817-7824	seconds	
56-42	7824-7825	.	

#Text=That time
#Text=multiplied by millions means seconds or dozens of seconds of overhead.
57-1	7826-7830	That	
57-2	7831-7835	time	
57-3	7836-7846	multiplied	
57-4	7847-7849	by	
57-5	7850-7858	millions	
57-6	7859-7864	means	
57-7	7865-7872	seconds	
57-8	7873-7875	or	
57-9	7876-7882	dozens	
57-10	7883-7885	of	
57-11	7886-7893	seconds	
57-12	7894-7896	of	
57-13	7897-7905	overhead	
57-14	7905-7906	.	

#Text=I
#Text=recommend you to read Clock sources in
#Text=Linux if you
#Text=want to dive deeper into the topic.
58-1	7907-7908	I	
58-2	7909-7918	recommend	
58-3	7919-7922	you	
58-4	7923-7925	to	
58-5	7926-7930	read	
58-6	7931-7936	Clock	
58-7	7937-7944	sources	
58-8	7945-7947	in	
58-9	7948-7953	Linux	
58-10	7954-7956	if	
58-11	7957-7960	you	
58-12	7961-7965	want	
58-13	7966-7968	to	
58-14	7969-7973	dive	
58-15	7974-7980	deeper	
58-16	7981-7985	into	
58-17	7986-7989	the	
58-18	7990-7995	topic	
58-19	7995-7996	.	

#Text=The not-that-good news
#Text=Let’s go back to our goal of using the execution timing information to see how
#Text=we can optimize a query.
59-1	7997-8000	The	
59-2	8001-8014	not-that-good	
59-3	8015-8019	news	
59-4	8020-8023	Let	
59-5	8023-8024	’	
59-6	8024-8025	s	
59-7	8026-8028	go	
59-8	8029-8033	back	
59-9	8034-8036	to	
59-10	8037-8040	our	
59-11	8041-8045	goal	
59-12	8046-8048	of	
59-13	8049-8054	using	
59-14	8055-8058	the	
59-15	8059-8068	execution	
59-16	8069-8075	timing	
59-17	8076-8087	information	
59-18	8088-8090	to	
59-19	8091-8094	see	
59-20	8095-8098	how	
59-21	8099-8101	we	
59-22	8102-8105	can	
59-23	8106-8114	optimize	
59-24	8115-8116	a	
59-25	8117-8122	query	
59-26	8122-8123	.	

#Text=If profiling overhead is substantial, but it is
#Text=proportional to real execution time, it wouldn’t matter much –as all query
#Text=execution times would be scaled alike, and the slowest node would remain the
#Text=slowest node.
60-1	8124-8126	If	
60-2	8127-8136	profiling	
60-3	8137-8145	overhead	
60-4	8146-8148	is	
60-5	8149-8160	substantial	
60-6	8160-8161	,	
60-7	8162-8165	but	
60-8	8166-8168	it	
60-9	8169-8171	is	
60-10	8172-8184	proportional	
60-11	8185-8187	to	
60-12	8188-8192	real	
60-13	8193-8202	execution	
60-14	8203-8207	time	
60-15	8207-8208	,	
60-16	8209-8211	it	
60-17	8212-8218	wouldn	
60-18	8218-8219	’	
60-19	8219-8220	t	
60-20	8221-8227	matter	
60-21	8228-8232	much	
60-22	8233-8234	–	
60-23	8234-8236	as	
60-24	8237-8240	all	
60-25	8241-8246	query	
60-26	8247-8256	execution	
60-27	8257-8262	times	
60-28	8263-8268	would	
60-29	8269-8271	be	
60-30	8272-8278	scaled	
60-31	8279-8284	alike	
60-32	8284-8285	,	
60-33	8286-8289	and	
60-34	8290-8293	the	
60-35	8294-8301	slowest	
60-36	8302-8306	node	
60-37	8307-8312	would	
60-38	8313-8319	remain	
60-39	8320-8323	the	
60-40	8324-8331	slowest	
60-41	8332-8336	node	
60-42	8336-8337	.	

#Text=But the problem is that they aren’t: some nodes suffer
#Text=significantly higher overhead, and may appear to be slower than others,
#Text=while it’s not the case in reality.
61-1	8338-8341	But	
61-2	8342-8345	the	
61-3	8346-8353	problem	
61-4	8354-8356	is	
61-5	8357-8361	that	
61-6	8362-8366	they	
61-7	8367-8371	aren	
61-8	8371-8372	’	
61-9	8372-8373	t	
61-10	8373-8374	:	
61-11	8375-8379	some	
61-12	8380-8385	nodes	
61-13	8386-8392	suffer	
61-14	8393-8406	significantly	
61-15	8407-8413	higher	
61-16	8414-8422	overhead	
61-17	8422-8423	,	
61-18	8424-8427	and	
61-19	8428-8431	may	
61-20	8432-8438	appear	
61-21	8439-8441	to	
61-22	8442-8444	be	
61-23	8445-8451	slower	
61-24	8452-8456	than	
61-25	8457-8463	others	
61-26	8463-8464	,	
61-27	8465-8470	while	
61-28	8471-8473	it	
61-29	8473-8474	’	
61-30	8474-8475	s	
61-31	8476-8479	not	
61-32	8480-8483	the	
61-33	8484-8488	case	
61-34	8489-8491	in	
61-35	8492-8499	reality	
61-36	8499-8500	.	

#Text=Unfortunately, this means that you cannot
#Text=trust EXPLAIN ANALYZE to optimize your queries.
62-1	8501-8514	Unfortunately	
62-2	8514-8515	,	
62-3	8516-8520	this	
62-4	8521-8526	means	
62-5	8527-8531	that	
62-6	8532-8535	you	
62-7	8536-8542	cannot	
62-8	8543-8548	trust	
62-9	8549-8556	EXPLAIN	
62-10	8557-8564	ANALYZE	
62-11	8565-8567	to	
62-12	8568-8576	optimize	
62-13	8577-8581	your	
62-14	8582-8589	queries	
62-15	8589-8590	.	

#Text=It completely depends on the query and its execution nodes.
63-1	8591-8593	It	
63-2	8594-8604	completely	
63-3	8605-8612	depends	
63-4	8613-8615	on	
63-5	8616-8619	the	
63-6	8620-8625	query	
63-7	8626-8629	and	
63-8	8630-8633	its	
63-9	8634-8643	execution	
63-10	8644-8649	nodes	
63-11	8649-8650	.	

#Text=We can use ltrace
#Text=to count the number of times the clock_gettime is called:
#Text=sudo ltrace -p $postgres_backend_pid -c -e clock_gettime
#Text=query
#Text=clock_gettime calls
#Text=parallel
#Text=explain analyze select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=2004028
#Text=off
#Text=select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=off
#Text=explain analyze select sum(i2.i) from i2
#Text=2016
#Text=off
#Text=explain analyze select sum(i1.i * i2.i) from i1 inner join i2 using (i)
#Text=38656
#Text=Here are some examples.
64-1	8651-8653	We	
64-2	8654-8657	can	
64-3	8658-8661	use	
64-4	8662-8668	ltrace	
64-5	8669-8671	to	
64-6	8672-8677	count	
64-7	8678-8681	the	
64-8	8682-8688	number	
64-9	8689-8691	of	
64-10	8692-8697	times	
64-11	8698-8701	the	
64-12	8702-8715	clock_gettime	
64-13	8716-8718	is	
64-14	8719-8725	called	
64-15	8725-8726	:	
64-16	8727-8731	sudo	
64-17	8732-8738	ltrace	
64-18	8739-8740	-	
64-19	8740-8741	p	
64-20	8742-8743	$	
64-21	8743-8763	postgres_backend_pid	
64-22	8764-8765	-	
64-23	8765-8766	c	
64-24	8767-8768	-	
64-25	8768-8769	e	
64-26	8770-8783	clock_gettime	
64-27	8784-8789	query	
64-28	8790-8803	clock_gettime	
64-29	8804-8809	calls	
64-30	8810-8818	parallel	
64-31	8819-8826	explain	
64-32	8827-8834	analyze	
64-33	8835-8841	select	
64-34	8842-8845	sum	
64-35	8845-8846	(	
64-36	8846-8848	i1	
64-37	8848-8849	.	
64-38	8849-8850	i	
64-39	8851-8852	*	
64-40	8853-8855	i2	
64-41	8855-8856	.	
64-42	8856-8857	i	
64-43	8857-8858	)	
64-44	8859-8863	from	
64-45	8864-8866	i1	
64-46	8867-8872	inner	
64-47	8873-8877	join	
64-48	8878-8880	i2	
64-49	8881-8886	using	
64-50	8887-8888	(	
64-51	8888-8889	i	
64-52	8889-8890	)	
64-53	8891-8898	2004028	
64-54	8899-8902	off	
64-55	8903-8909	select	
64-56	8910-8913	sum	
64-57	8913-8914	(	
64-58	8914-8916	i1	
64-59	8916-8917	.	
64-60	8917-8918	i	
64-61	8919-8920	*	
64-62	8921-8923	i2	
64-63	8923-8924	.	
64-64	8924-8925	i	
64-65	8925-8926	)	
64-66	8927-8931	from	
64-67	8932-8934	i1	
64-68	8935-8940	inner	
64-69	8941-8945	join	
64-70	8946-8948	i2	
64-71	8949-8954	using	
64-72	8955-8956	(	
64-73	8956-8957	i	
64-74	8957-8958	)	
64-75	8959-8962	off	
64-76	8963-8970	explain	
64-77	8971-8978	analyze	
64-78	8979-8985	select	
64-79	8986-8989	sum	
64-80	8989-8990	(	
64-81	8990-8992	i2	
64-82	8992-8993	.	
64-83	8993-8994	i	
64-84	8994-8995	)	
64-85	8996-9000	from	
64-86	9001-9003	i2	
64-87	9004-9008	2016	
64-88	9009-9012	off	
64-89	9013-9020	explain	
64-90	9021-9028	analyze	
64-91	9029-9035	select	
64-92	9036-9039	sum	
64-93	9039-9040	(	
64-94	9040-9042	i1	
64-95	9042-9043	.	
64-96	9043-9044	i	
64-97	9045-9046	*	
64-98	9047-9049	i2	
64-99	9049-9050	.	
64-100	9050-9051	i	
64-101	9051-9052	)	
64-102	9053-9057	from	
64-103	9058-9060	i1	
64-104	9061-9066	inner	
64-105	9067-9071	join	
64-106	9072-9074	i2	
64-107	9075-9080	using	
64-108	9081-9082	(	
64-109	9082-9083	i	
64-110	9083-9084	)	
64-111	9085-9090	38656	
64-112	9091-9095	Here	
64-113	9096-9099	are	
64-114	9100-9104	some	
64-115	9105-9113	examples	
64-116	9113-9114	.	

#Text=For the join query, we can observe that the clock is
#Text=called 2N+4M+K times, where N is the number of rows of i1, M the number of
#Text=rows of i2 and K is a constant factor; 28 in this case, 16 in the case
#Text=of the summing query (the third one).
65-1	9115-9118	For	
65-2	9119-9122	the	
65-3	9123-9127	join	
65-4	9128-9133	query	
65-5	9133-9134	,	
65-6	9135-9137	we	
65-7	9138-9141	can	
65-8	9142-9149	observe	
65-9	9150-9154	that	
65-10	9155-9158	the	
65-11	9159-9164	clock	
65-12	9165-9167	is	
65-13	9168-9174	called	
65-14	9175-9177	2N	
65-15	9177-9178	+	
65-16	9178-9180	4M	
65-17	9180-9181	+	
65-18	9181-9182	K	
65-19	9183-9188	times	
65-20	9188-9189	,	
65-21	9190-9195	where	
65-22	9196-9197	N	
65-23	9198-9200	is	
65-24	9201-9204	the	
65-25	9205-9211	number	
65-26	9212-9214	of	
65-27	9215-9219	rows	
65-28	9220-9222	of	
65-29	9223-9225	i1	
65-30	9225-9226	,	
65-31	9227-9228	M	
65-32	9229-9232	the	
65-33	9233-9239	number	
65-34	9240-9242	of	
65-35	9243-9247	rows	
65-36	9248-9250	of	
65-37	9251-9253	i2	
65-38	9254-9257	and	
65-39	9258-9259	K	
65-40	9260-9262	is	
65-41	9263-9264	a	
65-42	9265-9273	constant	
65-43	9274-9280	factor	
65-44	9280-9281	;	
65-45	9282-9284	28	
65-46	9285-9287	in	
65-47	9288-9292	this	
65-48	9293-9297	case	
65-49	9297-9298	,	
65-50	9299-9301	16	
65-51	9302-9304	in	
65-52	9305-9308	the	
65-53	9309-9313	case	
65-54	9314-9316	of	
65-55	9317-9320	the	
65-56	9321-9328	summing	
65-57	9329-9334	query	
65-58	9335-9336	(	
65-59	9336-9339	the	
65-60	9340-9345	third	
65-61	9346-9349	one	
65-62	9349-9350	)	
65-63	9350-9351	.	

#Text=It is a very interesting the case when parallel mode is activated.
66-1	9352-9354	It	
66-2	9355-9357	is	
66-3	9358-9359	a	
66-4	9360-9364	very	
66-5	9365-9376	interesting	
66-6	9377-9380	the	
66-7	9381-9385	case	
66-8	9386-9390	when	
66-9	9391-9399	parallel	
66-10	9400-9404	mode	
66-11	9405-9407	is	
66-12	9408-9417	activated	
66-13	9417-9418	.	

#Text=Here the time
#Text=is reported in blocks to some degree, significantly lowering the number of times
#Text=the clock is called.
67-1	9419-9423	Here	
67-2	9424-9427	the	
67-3	9428-9432	time	
67-4	9433-9435	is	
67-5	9436-9444	reported	
67-6	9445-9447	in	
67-7	9448-9454	blocks	
67-8	9455-9457	to	
67-9	9458-9462	some	
67-10	9463-9469	degree	
67-11	9469-9470	,	
67-12	9471-9484	significantly	
67-13	9485-9493	lowering	
67-14	9494-9497	the	
67-15	9498-9504	number	
67-16	9505-9507	of	
67-17	9508-9513	times	
67-18	9514-9517	the	
67-19	9518-9523	clock	
67-20	9524-9526	is	
67-21	9527-9533	called	
67-22	9533-9534	.	

#Text=The overhead EXPLAIN ANALYZE introduces is not proportional to the real
#Text=duration of the query plan, but rather proportional to the number of rows
#Text=processed by the node.
68-1	9535-9538	The	
68-2	9539-9547	overhead	
68-3	9548-9555	EXPLAIN	
68-4	9556-9563	ANALYZE	
68-5	9564-9574	introduces	
68-6	9575-9577	is	
68-7	9578-9581	not	
68-8	9582-9594	proportional	
68-9	9595-9597	to	
68-10	9598-9601	the	
68-11	9602-9606	real	
68-12	9607-9615	duration	
68-13	9616-9618	of	
68-14	9619-9622	the	
68-15	9623-9628	query	
68-16	9629-9633	plan	
68-17	9633-9634	,	
68-18	9635-9638	but	
68-19	9639-9645	rather	
68-20	9646-9658	proportional	
68-21	9659-9661	to	
68-22	9662-9665	the	
68-23	9666-9672	number	
68-24	9673-9675	of	
68-25	9676-9680	rows	
68-26	9681-9690	processed	
68-27	9691-9693	by	
68-28	9694-9697	the	
68-29	9698-9702	node	
68-30	9702-9703	.	

#Text=While they may be aligned, more rows processed does not
#Text=always lead to higher execution times, and counting on this assumption may lead to
#Text=believing a node is slower when it is in fact faster than another one.
69-1	9704-9709	While	
69-2	9710-9714	they	
69-3	9715-9718	may	
69-4	9719-9721	be	
69-5	9722-9729	aligned	
69-6	9729-9730	,	
69-7	9731-9735	more	
69-8	9736-9740	rows	
69-9	9741-9750	processed	
69-10	9751-9755	does	
69-11	9756-9759	not	
69-12	9760-9766	always	
69-13	9767-9771	lead	
69-14	9772-9774	to	
69-15	9775-9781	higher	
69-16	9782-9791	execution	
69-17	9792-9797	times	
69-18	9797-9798	,	
69-19	9799-9802	and	
69-20	9803-9811	counting	
69-21	9812-9814	on	
69-22	9815-9819	this	
69-23	9820-9830	assumption	
69-24	9831-9834	may	
69-25	9835-9839	lead	
69-26	9840-9842	to	
69-27	9843-9852	believing	
69-28	9853-9854	a	
69-29	9855-9859	node	
69-30	9860-9862	is	
69-31	9863-9869	slower	
69-32	9870-9874	when	
69-33	9875-9877	it	
69-34	9878-9880	is	
69-35	9881-9883	in	
69-36	9884-9888	fact	
69-37	9889-9895	faster	
69-38	9896-9900	than	
69-39	9901-9908	another	
69-40	9909-9912	one	
69-41	9912-9913	.	

#Text=In turn
#Text=leading to a bad query optimization strategy.
70-1	9914-9916	In	
70-2	9917-9921	turn	
70-3	9922-9929	leading	
70-4	9930-9932	to	
70-5	9933-9934	a	
70-6	9935-9938	bad	
70-7	9939-9944	query	
70-8	9945-9957	optimization	
70-9	9958-9966	strategy	
70-10	9966-9967	.	

#Text=I have worked deeper on the topic and tried the following:
#Text=Take some queries and the number of calls to clock_gettime, as in the
#Text=previous table, and measure the EXPLAIN ANALYZE execution times (without
#Text=the additional overhead introduced by ltrace).
71-1	9968-9969	I	
71-2	9970-9974	have	
71-3	9975-9981	worked	
71-4	9982-9988	deeper	
71-5	9989-9991	on	
71-6	9992-9995	the	
71-7	9996-10001	topic	
71-8	10002-10005	and	
71-9	10006-10011	tried	
71-10	10012-10015	the	
71-11	10016-10025	following	
71-12	10025-10026	:	
71-13	10027-10031	Take	
71-14	10032-10036	some	
71-15	10037-10044	queries	
71-16	10045-10048	and	
71-17	10049-10052	the	
71-18	10053-10059	number	
71-19	10060-10062	of	
71-20	10063-10068	calls	
71-21	10069-10071	to	
71-22	10072-10085	clock_gettime	
71-23	10085-10086	,	
71-24	10087-10089	as	
71-25	10090-10092	in	
71-26	10093-10096	the	
71-27	10097-10105	previous	
71-28	10106-10111	table	
71-29	10111-10112	,	
71-30	10113-10116	and	
71-31	10117-10124	measure	
71-32	10125-10128	the	
71-33	10129-10136	EXPLAIN	
71-34	10137-10144	ANALYZE	
71-35	10145-10154	execution	
71-36	10155-10160	times	
71-37	10161-10162	(	
71-38	10162-10169	without	
71-39	10170-10173	the	
71-40	10174-10184	additional	
71-41	10185-10193	overhead	
71-42	10194-10204	introduced	
71-43	10205-10207	by	
71-44	10208-10214	ltrace	
71-45	10214-10215	)	
71-46	10215-10216	.	

#Text=Then solve the equation with
#Text=the clock time as an unknown.
72-1	10217-10221	Then	
72-2	10222-10227	solve	
72-3	10228-10231	the	
72-4	10232-10240	equation	
72-5	10241-10245	with	
72-6	10246-10249	the	
72-7	10250-10255	clock	
72-8	10256-10260	time	
72-9	10261-10263	as	
72-10	10264-10266	an	
72-11	10267-10274	unknown	
72-12	10274-10275	.	

#Text=However, the results vary significantly from
#Text=query execution to query execution, and are not comparable.
73-1	10276-10283	However	
73-2	10283-10284	,	
73-3	10285-10288	the	
73-4	10289-10296	results	
73-5	10297-10301	vary	
73-6	10302-10315	significantly	
73-7	10316-10320	from	
73-8	10321-10326	query	
73-9	10327-10336	execution	
73-10	10337-10339	to	
73-11	10340-10345	query	
73-12	10346-10355	execution	
73-13	10355-10356	,	
73-14	10357-10360	and	
73-15	10361-10364	are	
73-16	10365-10368	not	
73-17	10369-10379	comparable	
73-18	10379-10380	.	

#Text=I have obtained
#Text=results diverging up to one order of magnitude.
74-1	10381-10382	I	
74-2	10383-10387	have	
74-3	10388-10396	obtained	
74-4	10397-10404	results	
74-5	10405-10414	diverging	
74-6	10415-10417	up	
74-7	10418-10420	to	
74-8	10421-10424	one	
74-9	10425-10430	order	
74-10	10431-10433	of	
74-11	10434-10443	magnitude	
74-12	10443-10444	.	

#Text=Not even a linear regression
#Text=helps here with such disparate results.
75-1	10445-10448	Not	
75-2	10449-10453	even	
75-3	10454-10455	a	
75-4	10456-10462	linear	
75-5	10463-10473	regression	
75-6	10474-10479	helps	
75-7	10480-10484	here	
75-8	10485-10489	with	
75-9	10490-10494	such	
75-10	10495-10504	disparate	
75-11	10505-10512	results	
75-12	10512-10513	.	

#Text=Try measuring the clock_gettime overhead with the fastest and most advanced
#Text=perf profiler available:
#Text=eBPF.
76-1	10514-10517	Try	
76-2	10518-10527	measuring	
76-3	10528-10531	the	
76-4	10532-10545	clock_gettime	
76-5	10546-10554	overhead	
76-6	10555-10559	with	
76-7	10560-10563	the	
76-8	10564-10571	fastest	
76-9	10572-10575	and	
76-10	10576-10580	most	
76-11	10581-10589	advanced	
76-12	10590-10594	perf	
76-13	10595-10603	profiler	
76-14	10604-10613	available	
76-15	10613-10614	:	
76-16	10615-10619	eBPF	
76-17	10619-10620	.	

#Text=However, even then, BPF’s overhead is higher than that of the
#Text=clock_gettime, making it uneffective.
77-1	10621-10628	However	
77-2	10628-10629	,	
77-3	10630-10634	even	
77-4	10635-10639	then	
77-5	10639-10640	,	
77-6	10641-10644	BPF	
77-7	10644-10645	’	
77-8	10645-10646	s	
77-9	10647-10655	overhead	
77-10	10656-10658	is	
77-11	10659-10665	higher	
77-12	10666-10670	than	
77-13	10671-10675	that	
77-14	10676-10678	of	
77-15	10679-10682	the	
77-16	10683-10696	clock_gettime	
77-17	10696-10697	,	
77-18	10698-10704	making	
77-19	10705-10707	it	
77-20	10708-10719	uneffective	
77-21	10719-10720	.	

#Text=How to become a bit more truthful
#Text=I guess it’s not easy.
78-1	10721-10724	How	
78-2	10725-10727	to	
78-3	10728-10734	become	
78-4	10735-10736	a	
78-5	10737-10740	bit	
78-6	10741-10745	more	
78-7	10746-10754	truthful	
78-8	10755-10756	I	
78-9	10757-10762	guess	
78-10	10763-10765	it	
78-11	10765-10766	’	
78-12	10766-10767	s	
78-13	10768-10771	not	
78-14	10772-10776	easy	
78-15	10776-10777	.	

#Text=The fact that parallel mode appears to call the system
#Text=time in blocks, at certain cases, could be a good way to move forward.
79-1	10778-10781	The	
79-2	10782-10786	fact	
79-3	10787-10791	that	
79-4	10792-10800	parallel	
79-5	10801-10805	mode	
79-6	10806-10813	appears	
79-7	10814-10816	to	
79-8	10817-10821	call	
79-9	10822-10825	the	
79-10	10826-10832	system	
79-11	10833-10837	time	
79-12	10838-10840	in	
79-13	10841-10847	blocks	
79-14	10847-10848	,	
79-15	10849-10851	at	
79-16	10852-10859	certain	
79-17	10860-10865	cases	
79-18	10865-10866	,	
79-19	10867-10872	could	
79-20	10873-10875	be	
79-21	10876-10877	a	
79-22	10878-10882	good	
79-23	10883-10886	way	
79-24	10887-10889	to	
79-25	10890-10894	move	
79-26	10895-10902	forward	
79-27	10902-10903	.	

#Text=Another alternative would be to provide a “correction mechanism”.
80-1	10904-10911	Another	
80-2	10912-10923	alternative	
80-3	10924-10929	would	
80-4	10930-10932	be	
80-5	10933-10935	to	
80-6	10936-10943	provide	
80-7	10944-10945	a	
80-8	10946-10947	“	
80-9	10947-10957	correction	
80-10	10958-10967	mechanism	
80-11	10967-10968	”	
80-12	10968-10969	.	

#Text=If the clock
#Text=time can be measured precisely, and the number of times the clock is called is
#Text=known –Postgres certainly could keep track of it–, its countribution could be
#Text=substracted from the total measured time.
81-1	10970-10972	If	
81-2	10973-10976	the	
81-3	10977-10982	clock	
81-4	10983-10987	time	
81-5	10988-10991	can	
81-6	10992-10994	be	
81-7	10995-11003	measured	
81-8	11004-11013	precisely	
81-9	11013-11014	,	
81-10	11015-11018	and	
81-11	11019-11022	the	
81-12	11023-11029	number	
81-13	11030-11032	of	
81-14	11033-11038	times	
81-15	11039-11042	the	
81-16	11043-11048	clock	
81-17	11049-11051	is	
81-18	11052-11058	called	
81-19	11059-11061	is	
81-20	11062-11067	known	
81-21	11068-11069	–	
81-22	11069-11077	Postgres	
81-23	11078-11087	certainly	
81-24	11088-11093	could	
81-25	11094-11098	keep	
81-26	11099-11104	track	
81-27	11105-11107	of	
81-28	11108-11110	it	
81-29	11110-11111	–	
81-30	11111-11112	,	
81-31	11113-11116	its	
81-32	11117-11130	countribution	
81-33	11131-11136	could	
81-34	11137-11139	be	
81-35	11140-11151	substracted	
81-36	11152-11156	from	
81-37	11157-11160	the	
81-38	11161-11166	total	
81-39	11167-11175	measured	
81-40	11176-11180	time	
81-41	11180-11181	.	

#Text=While probably not 100% exact, it
#Text=would be much better than what it is as of today.
82-1	11182-11187	While	
82-2	11188-11196	probably	
82-3	11197-11200	not	
82-4	11201-11205	100%	
82-5	11206-11211	exact	
82-6	11211-11212	,	
82-7	11213-11215	it	
82-8	11216-11221	would	
82-9	11222-11224	be	
82-10	11225-11229	much	
82-11	11230-11236	better	
82-12	11237-11241	than	
82-13	11242-11246	what	
82-14	11247-11249	it	
82-15	11250-11252	is	
82-16	11253-11255	as	
82-17	11256-11258	of	
82-18	11259-11264	today	
82-19	11264-11265	.	

#Text=Extra thoughts
#Text=In reality, EXPLAIN ANALYZE is a query execution profiler.
83-1	11266-11271	Extra	
83-2	11272-11280	thoughts	
83-3	11281-11283	In	
83-4	11284-11291	reality	
83-5	11291-11292	,	
83-6	11293-11300	EXPLAIN	
83-7	11301-11308	ANALYZE	
83-8	11309-11311	is	
83-9	11312-11313	a	
83-10	11314-11319	query	
83-11	11320-11329	execution	
83-12	11330-11338	profiler	
83-13	11338-11339	.	

#Text=Being aware of
#Text=this, we all know that profilers introduce more or less profiling overhead.
84-1	11340-11345	Being	
84-2	11346-11351	aware	
84-3	11352-11354	of	
84-4	11355-11359	this	
84-5	11359-11360	,	
84-6	11361-11363	we	
84-7	11364-11367	all	
84-8	11368-11372	know	
84-9	11373-11377	that	
84-10	11378-11387	profilers	
84-11	11388-11397	introduce	
84-12	11398-11402	more	
84-13	11403-11405	or	
84-14	11406-11410	less	
84-15	11411-11420	profiling	
84-16	11421-11429	overhead	
84-17	11429-11430	.	

#Text=This is the key takeaway: EXPLAIN ANALYZE is a profiler, and its overhead
#Text=ranges from high to very/extremely high on systems with slow virtualized clocks.
85-1	11431-11435	This	
85-2	11436-11438	is	
85-3	11439-11442	the	
85-4	11443-11446	key	
85-5	11447-11455	takeaway	
85-6	11455-11456	:	
85-7	11457-11464	EXPLAIN	
85-8	11465-11472	ANALYZE	
85-9	11473-11475	is	
85-10	11476-11477	a	
85-11	11478-11486	profiler	
85-12	11486-11487	,	
85-13	11488-11491	and	
85-14	11492-11495	its	
85-15	11496-11504	overhead	
85-16	11505-11511	ranges	
85-17	11512-11516	from	
85-18	11517-11521	high	
85-19	11522-11524	to	
85-20	11525-11529	very	
85-21	11529-11530	/	
85-22	11530-11539	extremely	
85-23	11540-11544	high	
85-24	11545-11547	on	
85-25	11548-11555	systems	
85-26	11556-11560	with	
85-27	11561-11565	slow	
85-28	11566-11577	virtualized	
85-29	11578-11584	clocks	
85-30	11584-11585	.	

#Text=Why EXPLAIN and EXPLAIN ANALYZE share the same “command”?
86-1	11586-11589	Why	
86-2	11590-11597	EXPLAIN	
86-3	11598-11601	and	
86-4	11602-11609	EXPLAIN	
86-5	11610-11617	ANALYZE	
86-6	11618-11623	share	
86-7	11624-11627	the	
86-8	11628-11632	same	
86-9	11633-11634	“	
86-10	11634-11641	command	
86-11	11641-11642	”	
86-12	11642-11643	?	

#Text=They are, in
#Text=reality, two very different things: the former gives you the query execution
#Text=plan; the latter profiles the query.
87-1	11644-11648	They	
87-2	11649-11652	are	
87-3	11652-11653	,	
87-4	11654-11656	in	
87-5	11657-11664	reality	
87-6	11664-11665	,	
87-7	11666-11669	two	
87-8	11670-11674	very	
87-9	11675-11684	different	
87-10	11685-11691	things	
87-11	11691-11692	:	
87-12	11693-11696	the	
87-13	11697-11703	former	
87-14	11704-11709	gives	
87-15	11710-11713	you	
87-16	11714-11717	the	
87-17	11718-11723	query	
87-18	11724-11733	execution	
87-19	11734-11738	plan	
87-20	11738-11739	;	
87-21	11740-11743	the	
87-22	11744-11750	latter	
87-23	11751-11759	profiles	
87-24	11760-11763	the	
87-25	11764-11769	query	
87-26	11769-11770	.	

#Text=While the output is similar –but only
#Text=that, similar– they do very different things.
88-1	11771-11776	While	
88-2	11777-11780	the	
88-3	11781-11787	output	
88-4	11788-11790	is	
88-5	11791-11798	similar	
88-6	11799-11800	–	
88-7	11800-11803	but	
88-8	11804-11808	only	
88-9	11809-11813	that	
88-10	11813-11814	,	
88-11	11815-11822	similar	
88-12	11822-11823	–	
88-13	11824-11828	they	
88-14	11829-11831	do	
88-15	11832-11836	very	
88-16	11837-11846	different	
88-17	11847-11853	things	
88-18	11853-11854	.	

#Text=I’d rename the latter to
#Text=PROFILE SELECT....
89-1	11855-11856	I	
89-2	11856-11857	’	
89-3	11857-11858	d	
89-4	11859-11865	rename	
89-5	11866-11869	the	
89-6	11870-11876	latter	
89-7	11877-11879	to	
89-8	11880-11887	PROFILE	
89-9	11888-11894	SELECT	
89-10	11894-11895	.	
89-11	11895-11896	.	
89-12	11896-11897	.	
89-13	11897-11898	.	

#Text=Pretty much the same story with VACUUM and VACUUM FULL.
90-1	11899-11905	Pretty	
90-2	11906-11910	much	
90-3	11911-11914	the	
90-4	11915-11919	same	
90-5	11920-11925	story	
90-6	11926-11930	with	
90-7	11931-11937	VACUUM	
90-8	11938-11941	and	
90-9	11942-11948	VACUUM	
90-10	11949-11953	FULL	
90-11	11953-11954	.	

#Text=The latter should
#Text=be renamed to DEFRAG or REWRITE TABLE –or VACUUM FULL YES I REALLY KNOW WHAT I AM DOING PLEASE DO LOCK MY TABLE, for that matter.
91-1	11955-11958	The	
91-2	11959-11965	latter	
91-3	11966-11972	should	
91-4	11973-11975	be	
91-5	11976-11983	renamed	
91-6	11984-11986	to	
91-7	11987-11993	DEFRAG	
91-8	11994-11996	or	
91-9	11997-12004	REWRITE	
91-10	12005-12010	TABLE	
91-11	12011-12012	–	
91-12	12012-12014	or	
91-13	12015-12021	VACUUM	
91-14	12022-12026	FULL	
91-15	12027-12030	YES	
91-16	12031-12032	I	
91-17	12033-12039	REALLY	
91-18	12040-12044	KNOW	
91-19	12045-12049	WHAT	
91-20	12050-12051	I	
91-21	12052-12054	AM	
91-22	12055-12060	DOING	
91-23	12061-12067	PLEASE	
91-24	12068-12070	DO	
91-25	12071-12075	LOCK	
91-26	12076-12078	MY	
91-27	12079-12084	TABLE	
91-28	12084-12085	,	
91-29	12086-12089	for	
91-30	12090-12094	that	
91-31	12095-12101	matter	
91-32	12101-12102	.	

#Text=Comments
#Text=Please enable JavaScript to view the comments powered by Disqus.
#Text=comments powered by Disqus
#Text=More Posts
#Text=You may also likethis related content
#Text=Boost your User-Defined Functions in PostgreSQL
#Text=Emanuel Calvo
#Text=Anthony Sotolongo
#Text=Feb 5, 2021 ·
#Text=9 min read
#Text=Introduction Using the RDBMS only to store data is restricting the full potential of the database systems, which were designed for server-side processing and provide other options besides being a data container.
92-1	12103-12111	Comments	
92-2	12112-12118	Please	
92-3	12119-12125	enable	
92-4	12126-12136	JavaScript	
92-5	12137-12139	to	
92-6	12140-12144	view	
92-7	12145-12148	the	
92-8	12149-12157	comments	
92-9	12158-12165	powered	
92-10	12166-12168	by	
92-11	12169-12175	Disqus	
92-12	12175-12176	.	
92-13	12177-12185	comments	
92-14	12186-12193	powered	
92-15	12194-12196	by	
92-16	12197-12203	Disqus	
92-17	12204-12208	More	
92-18	12209-12214	Posts	
92-19	12215-12218	You	
92-20	12219-12222	may	
92-21	12223-12227	also	
92-22	12228-12236	likethis	
92-23	12237-12244	related	
92-24	12245-12252	content	
92-25	12253-12258	Boost	
92-26	12259-12263	your	
92-27	12264-12276	User-Defined	
92-28	12277-12286	Functions	
92-29	12287-12289	in	
92-30	12290-12300	PostgreSQL	
92-31	12301-12308	Emanuel	
92-32	12309-12314	Calvo	
92-33	12315-12322	Anthony	
92-34	12323-12332	Sotolongo	
92-35	12333-12336	Feb	
92-36	12337-12338	5	
92-37	12338-12339	,	
92-38	12340-12344	2021	
92-39	12345-12346	·	
92-40	12347-12348	9	
92-41	12349-12352	min	
92-42	12353-12357	read	
92-43	12358-12370	Introduction	
92-44	12371-12376	Using	
92-45	12377-12380	the	
92-46	12381-12386	RDBMS	
92-47	12387-12391	only	
92-48	12392-12394	to	
92-49	12395-12400	store	
92-50	12401-12405	data	
92-51	12406-12408	is	
92-52	12409-12420	restricting	
92-53	12421-12424	the	
92-54	12425-12429	full	
92-55	12430-12439	potential	
92-56	12440-12442	of	
92-57	12443-12446	the	
92-58	12447-12455	database	
92-59	12456-12463	systems	
92-60	12463-12464	,	
92-61	12465-12470	which	
92-62	12471-12475	were	
92-63	12476-12484	designed	
92-64	12485-12488	for	
92-65	12489-12500	server-side	
92-66	12501-12511	processing	
92-67	12512-12515	and	
92-68	12516-12523	provide	
92-69	12524-12529	other	
92-70	12530-12537	options	
92-71	12538-12545	besides	
92-72	12546-12551	being	
92-73	12552-12553	a	
92-74	12554-12558	data	
92-75	12559-12568	container	
92-76	12568-12569	.	

#Text=Read post
#Text=63-Node EKS Cluster running on a Single Instance with Firecracker
#Text=Álvaro Hernández
#Text=Jan 13, 2021 ·
#Text=7 min read
#Text=63-Node EKS Cluster running on a Single Instance with Firecracker This blog post is a part of a series of posts devoted to Firecracker automation.
93-1	12570-12574	Read	
93-2	12575-12579	post	
93-3	12580-12582	63	
93-4	12582-12583	-	
93-5	12583-12587	Node	
93-6	12588-12591	EKS	
93-7	12592-12599	Cluster	
93-8	12600-12607	running	
93-9	12608-12610	on	
93-10	12611-12612	a	
93-11	12613-12619	Single	
93-12	12620-12628	Instance	
93-13	12629-12633	with	
93-14	12634-12645	Firecracker	
93-15	12646-12652	Álvaro	
93-16	12653-12662	Hernández	
93-17	12663-12666	Jan	
93-18	12667-12669	13	
93-19	12669-12670	,	
93-20	12671-12675	2021	
93-21	12676-12677	·	
93-22	12678-12679	7	
93-23	12680-12683	min	
93-24	12684-12688	read	
93-25	12689-12691	63	
93-26	12691-12692	-	
93-27	12692-12696	Node	
93-28	12697-12700	EKS	
93-29	12701-12708	Cluster	
93-30	12709-12716	running	
93-31	12717-12719	on	
93-32	12720-12721	a	
93-33	12722-12728	Single	
93-34	12729-12737	Instance	
93-35	12738-12742	with	
93-36	12743-12754	Firecracker	
93-37	12755-12759	This	
93-38	12760-12764	blog	
93-39	12765-12769	post	
93-40	12770-12772	is	
93-41	12773-12774	a	
93-42	12775-12779	part	
93-43	12780-12782	of	
93-44	12783-12784	a	
93-45	12785-12791	series	
93-46	12792-12794	of	
93-47	12795-12800	posts	
93-48	12801-12808	devoted	
93-49	12809-12811	to	
93-50	12812-12823	Firecracker	
93-51	12824-12834	automation	
93-52	12834-12835	.	

#Text=Currently it consists of the following posts:
#Text=Read post
#Text=Repository, Tuning Guide and API for your postgresql.conf
#Text=Álvaro Hernández
#Text=Dec 18, 2020 ·
#Text=3 min read
#Text=Repository, Tuning Guide and API for your postgresql.conf postgresqlco.nf (aka postgresqlCO.NF, or simply &ldquo;CONF&rdquo;) was born a little bit more than two years ago.
94-1	12836-12845	Currently	
94-2	12846-12848	it	
94-3	12849-12857	consists	
94-4	12858-12860	of	
94-5	12861-12864	the	
94-6	12865-12874	following	
94-7	12875-12880	posts	
94-8	12880-12881	:	
94-9	12882-12886	Read	
94-10	12887-12891	post	
94-11	12892-12902	Repository	
94-12	12902-12903	,	
94-13	12904-12910	Tuning	
94-14	12911-12916	Guide	
94-15	12917-12920	and	
94-16	12921-12924	API	
94-17	12925-12928	for	
94-18	12929-12933	your	
94-19	12934-12949	postgresql.conf	
94-20	12950-12956	Álvaro	
94-21	12957-12966	Hernández	
94-22	12967-12970	Dec	
94-23	12971-12973	18	
94-24	12973-12974	,	
94-25	12975-12979	2020	
94-26	12980-12981	·	
94-27	12982-12983	3	
94-28	12984-12987	min	
94-29	12988-12992	read	
94-30	12993-13003	Repository	
94-31	13003-13004	,	
94-32	13005-13011	Tuning	
94-33	13012-13017	Guide	
94-34	13018-13021	and	
94-35	13022-13025	API	
94-36	13026-13029	for	
94-37	13030-13034	your	
94-38	13035-13050	postgresql.conf	
94-39	13051-13066	postgresqlco.nf	
94-40	13067-13068	(	
94-41	13068-13071	aka	
94-42	13072-13087	postgresqlCO.NF	
94-43	13087-13088	,	
94-44	13089-13091	or	
94-45	13092-13098	simply	
94-46	13099-13100	&	
94-47	13100-13105	ldquo	
94-48	13105-13106	;	
94-49	13106-13110	CONF	
94-50	13110-13111	&	
94-51	13111-13116	rdquo	
94-52	13116-13117	;	
94-53	13117-13118	)	
94-54	13119-13122	was	
94-55	13123-13127	born	
94-56	13128-13129	a	
94-57	13130-13136	little	
94-58	13137-13140	bit	
94-59	13141-13145	more	
94-60	13146-13150	than	
94-61	13151-13154	two	
94-62	13155-13160	years	
94-63	13161-13164	ago	
94-64	13164-13165	.	

#Text=CONF&rsquo;s main goal was to help Postgres users find more and easier help to understand and tune their postgresql.
95-1	13166-13170	CONF	
95-2	13170-13171	&	
95-3	13171-13176	rsquo	
95-4	13176-13177	;	
95-5	13177-13178	s	
95-6	13179-13183	main	
95-7	13184-13188	goal	
95-8	13189-13192	was	
95-9	13193-13195	to	
95-10	13196-13200	help	
95-11	13201-13209	Postgres	
95-12	13210-13215	users	
95-13	13216-13220	find	
95-14	13221-13225	more	
95-15	13226-13229	and	
95-16	13230-13236	easier	
95-17	13237-13241	help	
95-18	13242-13244	to	
95-19	13245-13255	understand	
95-20	13256-13259	and	
95-21	13260-13264	tune	
95-22	13265-13270	their	
95-23	13271-13281	postgresql	
95-24	13281-13282	.	

#Text=Read post
#Text=Free 1GB Postgres Database on AWS CloudShell
#Text=Álvaro Hernández
#Text=Dec 17, 2020 ·
#Text=5 min read
#Text=Free 1GB Postgres Database on AWS CloudShell TL;DR AWS CloudShell is a CLI embedded in the AWS Web Console.
96-1	13283-13287	Read	
96-2	13288-13292	post	
96-3	13293-13297	Free	
96-4	13298-13301	1GB	
96-5	13302-13310	Postgres	
96-6	13311-13319	Database	
96-7	13320-13322	on	
96-8	13323-13326	AWS	
96-9	13327-13337	CloudShell	
96-10	13338-13344	Álvaro	
96-11	13345-13354	Hernández	
96-12	13355-13358	Dec	
96-13	13359-13361	17	
96-14	13361-13362	,	
96-15	13363-13367	2020	
96-16	13368-13369	·	
96-17	13370-13371	5	
96-18	13372-13375	min	
96-19	13376-13380	read	
96-20	13381-13385	Free	
96-21	13386-13389	1GB	
96-22	13390-13398	Postgres	
96-23	13399-13407	Database	
96-24	13408-13410	on	
96-25	13411-13414	AWS	
96-26	13415-13425	CloudShell	
96-27	13426-13428	TL	
96-28	13428-13429	;	
96-29	13429-13431	DR	
96-30	13432-13435	AWS	
96-31	13436-13446	CloudShell	
96-32	13447-13449	is	
96-33	13450-13451	a	
96-34	13452-13455	CLI	
96-35	13456-13464	embedded	
96-36	13465-13467	in	
96-37	13468-13471	the	
96-38	13472-13475	AWS	
96-39	13476-13479	Web	
96-40	13480-13487	Console	
96-41	13487-13488	.	

#Text=It is meant to make it easier to run the AWS CLI, SDK and other scripts from your web browser, without having to install anything locally or having to deal with local credential and profiles management.
97-1	13489-13491	It	
97-2	13492-13494	is	
97-3	13495-13500	meant	
97-4	13501-13503	to	
97-5	13504-13508	make	
97-6	13509-13511	it	
97-7	13512-13518	easier	
97-8	13519-13521	to	
97-9	13522-13525	run	
97-10	13526-13529	the	
97-11	13530-13533	AWS	
97-12	13534-13537	CLI	
97-13	13537-13538	,	
97-14	13539-13542	SDK	
97-15	13543-13546	and	
97-16	13547-13552	other	
97-17	13553-13560	scripts	
97-18	13561-13565	from	
97-19	13566-13570	your	
97-20	13571-13574	web	
97-21	13575-13582	browser	
97-22	13582-13583	,	
97-23	13584-13591	without	
97-24	13592-13598	having	
97-25	13599-13601	to	
97-26	13602-13609	install	
97-27	13610-13618	anything	
97-28	13619-13626	locally	
97-29	13627-13629	or	
97-30	13630-13636	having	
97-31	13637-13639	to	
97-32	13640-13644	deal	
97-33	13645-13649	with	
97-34	13650-13655	local	
97-35	13656-13666	credential	
97-36	13667-13670	and	
97-37	13671-13679	profiles	
97-38	13680-13690	management	
97-39	13690-13691	.	

#Text=Read post
#Text=About OnGres
#Text=We like open source, we develop open source software, and we are very active and well known at Postgres community.
98-1	13692-13696	Read	
98-2	13697-13701	post	
98-3	13702-13707	About	
98-4	13708-13714	OnGres	
98-5	13715-13717	We	
98-6	13718-13722	like	
98-7	13723-13727	open	
98-8	13728-13734	source	
98-9	13734-13735	,	
98-10	13736-13738	we	
98-11	13739-13746	develop	
98-12	13747-13751	open	
98-13	13752-13758	source	
98-14	13759-13767	software	
98-15	13767-13768	,	
98-16	13769-13772	and	
98-17	13773-13775	we	
98-18	13776-13779	are	
98-19	13780-13784	very	
98-20	13785-13791	active	
98-21	13792-13795	and	
98-22	13796-13800	well	
98-23	13801-13806	known	
98-24	13807-13809	at	
98-25	13810-13818	Postgres	
98-26	13819-13828	community	
98-27	13828-13829	.	

#Text=We build very innovative projects in Postgres ecosystem and are the founders of Fundación PostgreSQL.
99-1	13830-13832	We	
99-2	13833-13838	build	
99-3	13839-13843	very	
99-4	13844-13854	innovative	
99-5	13855-13863	projects	
99-6	13864-13866	in	
99-7	13867-13875	Postgres	
99-8	13876-13885	ecosystem	
99-9	13886-13889	and	
99-10	13890-13893	are	
99-11	13894-13897	the	
99-12	13898-13906	founders	
99-13	13907-13909	of	
99-14	13910-13919	Fundación	
99-15	13920-13930	PostgreSQL	
99-16	13930-13931	.	

#Text=Contact us
#Text=We are currently working on more awesome stuff
#Text=Subscribe to our newsletter to be up to date!
100-1	13932-13939	Contact	
100-2	13940-13942	us	
100-3	13943-13945	We	
100-4	13946-13949	are	
100-5	13950-13959	currently	
100-6	13960-13967	working	
100-7	13968-13970	on	
100-8	13971-13975	more	
100-9	13976-13983	awesome	
100-10	13984-13989	stuff	
100-11	13990-13999	Subscribe	
100-12	14000-14002	to	
100-13	14003-14006	our	
100-14	14007-14017	newsletter	
100-15	14018-14020	to	
100-16	14021-14023	be	
100-17	14024-14026	up	
100-18	14027-14029	to	
100-19	14030-14034	date	
100-20	14034-14035	!	

#Text=-None-
#Text=Newsletter
#Text=Contact Form
#Text=Careers
#Text=StackGres
#Text=I accept the OnGres Privacy Policy and agree to receive news and promotions every now and then
#Text=Resources
#Text=Blog
#Text=Services
#Text=Professional Services
#Text=Consulting
#Text=Training
#Text=Products
#Text=StackGres
#Text=PostgreSQLCO.NF
#Text=Company
#Text=Team
#Text=Careers
#Text=Contact
#Text=//Language
#Text=English
#Text=© 2021 OnGres Inc.
101-1	14036-14037	-	
101-2	14037-14041	None	
101-3	14041-14042	-	
101-4	14043-14053	Newsletter	
101-5	14054-14061	Contact	
101-6	14062-14066	Form	
101-7	14067-14074	Careers	
101-8	14075-14084	StackGres	
101-9	14085-14086	I	
101-10	14087-14093	accept	
101-11	14094-14097	the	
101-12	14098-14104	OnGres	
101-13	14105-14112	Privacy	
101-14	14113-14119	Policy	
101-15	14120-14123	and	
101-16	14124-14129	agree	
101-17	14130-14132	to	
101-18	14133-14140	receive	
101-19	14141-14145	news	
101-20	14146-14149	and	
101-21	14150-14160	promotions	
101-22	14161-14166	every	
101-23	14167-14170	now	
101-24	14171-14174	and	
101-25	14175-14179	then	
101-26	14180-14189	Resources	
101-27	14190-14194	Blog	
101-28	14195-14203	Services	
101-29	14204-14216	Professional	
101-30	14217-14225	Services	
101-31	14226-14236	Consulting	
101-32	14237-14245	Training	
101-33	14246-14254	Products	
101-34	14255-14264	StackGres	
101-35	14265-14280	PostgreSQLCO.NF	
101-36	14281-14288	Company	
101-37	14289-14293	Team	
101-38	14294-14301	Careers	
101-39	14302-14309	Contact	
101-40	14310-14311	/	
101-41	14311-14312	/	
101-42	14312-14320	Language	
101-43	14321-14328	English	
101-44	14329-14330	©	
101-45	14331-14335	2021	
101-46	14336-14342	OnGres	
101-47	14343-14346	Inc	
101-48	14346-14347	.	

#Text=Cookies Policy
#Text=Privacy Policy
#Text=By continuing to browse the site, you agree to our use of cookies
102-1	14348-14355	Cookies	
102-2	14356-14362	Policy	
102-3	14363-14370	Privacy	
102-4	14371-14377	Policy	
102-5	14378-14380	By	
102-6	14381-14391	continuing	
102-7	14392-14394	to	
102-8	14395-14401	browse	
102-9	14402-14405	the	
102-10	14406-14410	site	
102-11	14410-14411	,	
102-12	14412-14415	you	
102-13	14416-14421	agree	
102-14	14422-14424	to	
102-15	14425-14428	our	
102-16	14429-14432	use	
102-17	14433-14435	of	
102-18	14436-14443	cookies	
