#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value
#T_RL=webanno.custom.Relation|relation|BT_de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity


#Text=Improve database performance with connection pooling - Stack Overflow Blog
#Text=Reduce distractions and boost developer productivity with Stack Overflow for Teams.
1-1	0-7	Improve	_	_	_	_	
1-2	8-16	database	_	_	_	_	
1-3	17-28	performance	_	_	_	_	
1-4	29-33	with	_	_	_	_	
1-5	34-44	connection	_	_	_	_	
1-6	45-52	pooling	_	_	_	_	
1-7	53-54	-	_	_	_	_	
1-8	55-60	Stack	_	_	_	_	
1-9	61-69	Overflow	_	_	_	_	
1-10	70-74	Blog	_	_	_	_	
1-11	75-81	Reduce	_	_	_	_	
1-12	82-94	distractions	_	_	_	_	
1-13	95-98	and	_	_	_	_	
1-14	99-104	boost	_	_	_	_	
1-15	105-114	developer	_	_	_	_	
1-16	115-127	productivity	_	_	_	_	
1-17	128-132	with	_	_	_	_	
1-18	133-138	Stack	_	_	_	_	
1-19	139-147	Overflow	_	_	_	_	
1-20	148-151	for	_	_	_	_	
1-21	152-157	Teams	_	_	_	_	
1-22	157-158	.	_	_	_	_	

#Text=Now available for free
#Text=What is Teams?
2-1	159-162	Now	_	_	_	_	
2-2	163-172	available	_	_	_	_	
2-3	173-176	for	_	_	_	_	
2-4	177-181	free	_	_	_	_	
2-5	182-186	What	_	_	_	_	
2-6	187-189	is	_	_	_	_	
2-7	190-195	Teams	_	_	_	_	
2-8	195-196	?	_	_	_	_	

#Text=Essays, opinions, and advice on the act of computer programming from Stack Overflow.
3-1	197-203	Essays	_	_	_	_	
3-2	203-204	,	_	_	_	_	
3-3	205-213	opinions	_	_	_	_	
3-4	213-214	,	_	_	_	_	
3-5	215-218	and	_	_	_	_	
3-6	219-225	advice	_	_	_	_	
3-7	226-228	on	_	_	_	_	
3-8	229-232	the	_	_	_	_	
3-9	233-236	act	_	_	_	_	
3-10	237-239	of	_	_	_	_	
3-11	240-248	computer	_	_	_	_	
3-12	249-260	programming	_	_	_	_	
3-13	261-265	from	_	_	_	_	
3-14	266-271	Stack	_	_	_	_	
3-15	272-280	Overflow	_	_	_	_	
3-16	280-281	.	_	_	_	_	

#Text=Search for:
#Text=Latest
#Text=Newsletter
#Text=Podcast
#Text=Company
#Text=code-for-a-living
#Text=October 14, 2020
#Text=Improve database performance with connection pooling
#Text=We tend to rely on caching solutions to improve database performance.
4-1	282-288	Search	_	_	_	_	
4-2	289-292	for	_	_	_	_	
4-3	292-293	:	_	_	_	_	
4-4	294-300	Latest	_	_	_	_	
4-5	301-311	Newsletter	_	_	_	_	
4-6	312-319	Podcast	_	_	_	_	
4-7	320-327	Company	_	_	_	_	
4-8	328-345	code-for-a-living	_	_	_	_	
4-9	346-353	October	_	_	_	_	
4-10	354-356	14	_	_	_	_	
4-11	356-357	,	_	_	_	_	
4-12	358-362	2020	_	_	_	_	
4-13	363-370	Improve	_	_	_	_	
4-14	371-379	database	_	_	_	_	
4-15	380-391	performance	_	_	_	_	
4-16	392-396	with	_	_	_	_	
4-17	397-407	connection	_	_	_	_	
4-18	408-415	pooling	_	_	_	_	
4-19	416-418	We	_	_	_	_	
4-20	419-423	tend	_	_	_	_	
4-21	424-426	to	_	_	_	_	
4-22	427-431	rely	_	_	_	_	
4-23	432-434	on	_	_	_	_	
4-24	435-442	caching	_	_	_	_	
4-25	443-452	solutions	_	_	_	_	
4-26	453-455	to	_	_	_	_	
4-27	456-463	improve	_	_	_	_	
4-28	464-472	database	_	_	_	_	
4-29	473-484	performance	_	_	_	_	
4-30	484-485	.	_	_	_	_	

#Text=Caching frequently-accessed queries in memory or via a database can optimize write/read performance and reduce network latency, especially for heavy-workload applications, such as gaming services and Q&A portals.
5-1	486-493	Caching	_	_	_	_	
5-2	494-513	frequently-accessed	_	_	_	_	
5-3	514-521	queries	_	_	_	_	
5-4	522-524	in	_	_	_	_	
5-5	525-531	memory	_	_	_	_	
5-6	532-534	or	_	_	_	_	
5-7	535-538	via	_	_	_	_	
5-8	539-540	a	_	_	_	_	
5-9	541-549	database	_	_	_	_	
5-10	550-553	can	_	_	_	_	
5-11	554-562	optimize	_	_	_	_	
5-12	563-568	write	_	_	_	_	
5-13	568-569	/	_	_	_	_	
5-14	569-573	read	_	_	_	_	
5-15	574-585	performance	_	_	_	_	
5-16	586-589	and	_	_	_	_	
5-17	590-596	reduce	_	_	_	_	
5-18	597-604	network	_	_	_	_	
5-19	605-612	latency	_	_	_	_	
5-20	612-613	,	_	_	_	_	
5-21	614-624	especially	_	_	_	_	
5-22	625-628	for	_	_	_	_	
5-23	629-643	heavy-workload	_	_	_	_	
5-24	644-656	applications	_	_	_	_	
5-25	656-657	,	_	_	_	_	
5-26	658-662	such	_	_	_	_	
5-27	663-665	as	_	_	_	_	
5-28	666-672	gaming	_	_	_	_	
5-29	673-681	services	_	_	_	_	
5-30	682-685	and	_	_	_	_	
5-31	686-687	Q	_	_	_	_	
5-32	687-688	&	_	_	_	_	
5-33	688-689	A	_	_	_	_	
5-34	690-697	portals	_	_	_	_	
5-35	697-698	.	_	_	_	_	

#Text=But you can further improve performance by pooling users’ connections to a database.
6-1	699-702	But	_	_	_	_	
6-2	703-706	you	_	_	_	_	
6-3	707-710	can	_	_	_	_	
6-4	711-718	further	_	_	_	_	
6-5	719-726	improve	_	_	_	_	
6-6	727-738	performance	_	_	_	_	
6-7	739-741	by	_	_	_	_	
6-8	742-749	pooling	_	_	_	_	
6-9	750-755	users	_	_	_	_	
6-10	755-756	’	_	_	_	_	
6-11	757-768	connections	_	_	_	_	
6-12	769-771	to	_	_	_	_	
6-13	772-773	a	_	_	_	_	
6-14	774-782	database	_	_	_	_	
6-15	782-783	.	_	_	_	_	

#Text=Client users need…
#Text=Michael Aboagye
#Text=We tend to rely on caching solutions to improve database performance.
7-1	784-790	Client	_	_	_	_	
7-2	791-796	users	_	_	_	_	
7-3	797-801	need	_	_	_	_	
7-4	801-802	…	_	_	_	_	
7-5	803-810	Michael	_	_	_	_	
7-6	811-818	Aboagye	_	_	_	_	
7-7	819-821	We	_	_	_	_	
7-8	822-826	tend	_	_	_	_	
7-9	827-829	to	_	_	_	_	
7-10	830-834	rely	_	_	_	_	
7-11	835-837	on	_	_	_	_	
7-12	838-845	caching	_	_	_	_	
7-13	846-855	solutions	_	_	_	_	
7-14	856-858	to	_	_	_	_	
7-15	859-866	improve	_	_	_	_	
7-16	867-875	database	_	_	_	_	
7-17	876-887	performance	_	_	_	_	
7-18	887-888	.	_	_	_	_	

#Text=Caching frequently-accessed queries in memory or via a database can optimize write/read performance and reduce network latency, especially for heavy-workload applications, such as gaming services and Q&A portals.
8-1	889-896	Caching	_	_	_	_	
8-2	897-916	frequently-accessed	_	_	_	_	
8-3	917-924	queries	_	_	_	_	
8-4	925-927	in	_	_	_	_	
8-5	928-934	memory	_	_	_	_	
8-6	935-937	or	_	_	_	_	
8-7	938-941	via	_	_	_	_	
8-8	942-943	a	_	_	_	_	
8-9	944-952	database	_	_	_	_	
8-10	953-956	can	_	_	_	_	
8-11	957-965	optimize	_	_	_	_	
8-12	966-971	write	_	_	_	_	
8-13	971-972	/	_	_	_	_	
8-14	972-976	read	_	_	_	_	
8-15	977-988	performance	_	_	_	_	
8-16	989-992	and	_	_	_	_	
8-17	993-999	reduce	_	_	_	_	
8-18	1000-1007	network	_	_	_	_	
8-19	1008-1015	latency	_	_	_	_	
8-20	1015-1016	,	_	_	_	_	
8-21	1017-1027	especially	_	_	_	_	
8-22	1028-1031	for	_	_	_	_	
8-23	1032-1046	heavy-workload	_	_	_	_	
8-24	1047-1059	applications	_	_	_	_	
8-25	1059-1060	,	_	_	_	_	
8-26	1061-1065	such	_	_	_	_	
8-27	1066-1068	as	_	_	_	_	
8-28	1069-1075	gaming	_	_	_	_	
8-29	1076-1084	services	_	_	_	_	
8-30	1085-1088	and	_	_	_	_	
8-31	1089-1090	Q	_	_	_	_	
8-32	1090-1091	&	_	_	_	_	
8-33	1091-1092	A	_	_	_	_	
8-34	1093-1100	portals	_	_	_	_	
8-35	1100-1101	.	_	_	_	_	

#Text=But you can further improve performance by pooling users’ connections to a database.
9-1	1102-1105	But	_	_	_	_	
9-2	1106-1109	you	_	_	_	_	
9-3	1110-1113	can	_	_	_	_	
9-4	1114-1121	further	_	_	_	_	
9-5	1122-1129	improve	_	_	_	_	
9-6	1130-1141	performance	_	_	_	_	
9-7	1142-1144	by	_	_	_	_	
9-8	1145-1152	pooling	_	_	_	_	
9-9	1153-1158	users	_	_	_	_	
9-10	1158-1159	’	_	_	_	_	
9-11	1160-1171	connections	_	_	_	_	
9-12	1172-1174	to	_	_	_	_	
9-13	1175-1176	a	_	_	_	_	
9-14	1177-1185	database	_	_	_	_	
9-15	1185-1186	.	_	_	_	_	

#Text=Client users need to create a connection to a web service before they can perform CRUD operations.
10-1	1187-1193	Client	_	_	_	_	
10-2	1194-1199	users	_	_	_	_	
10-3	1200-1204	need	_	_	_	_	
10-4	1205-1207	to	_	_	_	_	
10-5	1208-1214	create	_	_	_	_	
10-6	1215-1216	a	_	_	_	_	
10-7	1217-1227	connection	_	_	_	_	
10-8	1228-1230	to	_	_	_	_	
10-9	1231-1232	a	_	_	_	_	
10-10	1233-1236	web	_	_	_	_	
10-11	1237-1244	service	_	_	_	_	
10-12	1245-1251	before	_	_	_	_	
10-13	1252-1256	they	_	_	_	_	
10-14	1257-1260	can	_	_	_	_	
10-15	1261-1268	perform	_	_	_	_	
10-16	1269-1273	CRUD	_	_	_	_	
10-17	1274-1284	operations	_	_	_	_	
10-18	1284-1285	.	_	_	_	_	

#Text=Most web services are backed by relational database servers such as Postgres or MySQL.
11-1	1286-1290	Most	_	_	_	_	
11-2	1291-1294	web	_	_	_	_	
11-3	1295-1303	services	_	_	_	_	
11-4	1304-1307	are	_	_	_	_	
11-5	1308-1314	backed	_	_	_	_	
11-6	1315-1317	by	_	_	_	_	
11-7	1318-1328	relational	_	_	_	_	
11-8	1329-1337	database	_	_	_	_	
11-9	1338-1345	servers	_	_	_	_	
11-10	1346-1350	such	_	_	_	_	
11-11	1351-1353	as	_	_	_	_	
11-12	1354-1362	Postgres	_	_	_	_	
11-13	1363-1365	or	_	_	_	_	
11-14	1366-1371	MySQL	_	_	_	_	
11-15	1371-1372	.	_	_	_	_	

#Text=With PostgreSQL, each new connection can take up to 1.3MB in memory.
12-1	1373-1377	With	_	_	_	_	
12-2	1378-1388	PostgreSQL	_	_	_	_	
12-3	1388-1389	,	_	_	_	_	
12-4	1390-1394	each	_	_	_	_	
12-5	1395-1398	new	_	_	_	_	
12-6	1399-1409	connection	_	_	_	_	
12-7	1410-1413	can	_	_	_	_	
12-8	1414-1418	take	_	_	_	_	
12-9	1419-1421	up	_	_	_	_	
12-10	1422-1424	to	_	_	_	_	
12-11	1425-1430	1.3MB	_	_	_	_	
12-12	1431-1433	in	_	_	_	_	
12-13	1434-1440	memory	_	_	_	_	
12-14	1440-1441	.	_	_	_	_	

#Text=In a production environment where we expect to receive thousands or millions of concurrent connections to the backend service, this can quickly exceed your memory resources (or if you have a scalable cloud, it can get very expensive very quickly).
13-1	1442-1444	In	_	_	_	_	
13-2	1445-1446	a	_	_	_	_	
13-3	1447-1457	production	_	_	_	_	
13-4	1458-1469	environment	_	_	_	_	
13-5	1470-1475	where	_	_	_	_	
13-6	1476-1478	we	_	_	_	_	
13-7	1479-1485	expect	_	_	_	_	
13-8	1486-1488	to	_	_	_	_	
13-9	1489-1496	receive	_	_	_	_	
13-10	1497-1506	thousands	_	_	_	_	
13-11	1507-1509	or	_	_	_	_	
13-12	1510-1518	millions	_	_	_	_	
13-13	1519-1521	of	_	_	_	_	
13-14	1522-1532	concurrent	_	_	_	_	
13-15	1533-1544	connections	_	_	_	_	
13-16	1545-1547	to	_	_	_	_	
13-17	1548-1551	the	_	_	_	_	
13-18	1552-1559	backend	_	_	_	_	
13-19	1560-1567	service	_	_	_	_	
13-20	1567-1568	,	_	_	_	_	
13-21	1569-1573	this	_	_	_	_	
13-22	1574-1577	can	_	_	_	_	
13-23	1578-1585	quickly	_	_	_	_	
13-24	1586-1592	exceed	_	_	_	_	
13-25	1593-1597	your	_	_	_	_	
13-26	1598-1604	memory	_	_	_	_	
13-27	1605-1614	resources	_	_	_	_	
13-28	1615-1616	(	_	_	_	_	
13-29	1616-1618	or	_	_	_	_	
13-30	1619-1621	if	_	_	_	_	
13-31	1622-1625	you	_	_	_	_	
13-32	1626-1630	have	_	_	_	_	
13-33	1631-1632	a	_	_	_	_	
13-34	1633-1641	scalable	_	_	_	_	
13-35	1642-1647	cloud	_	_	_	_	
13-36	1647-1648	,	_	_	_	_	
13-37	1649-1651	it	_	_	_	_	
13-38	1652-1655	can	_	_	_	_	
13-39	1656-1659	get	_	_	_	_	
13-40	1660-1664	very	_	_	_	_	
13-41	1665-1674	expensive	_	_	_	_	
13-42	1675-1679	very	_	_	_	_	
13-43	1680-1687	quickly	_	_	_	_	
13-44	1687-1688	)	_	_	_	_	
13-45	1688-1689	.	_	_	_	_	

#Text=Because each time a client attempts to access a backend service, it requires OS resources to create, maintain, and close connections to the datastore.
14-1	1690-1697	Because	_	_	_	_	
14-2	1698-1702	each	_	_	_	_	
14-3	1703-1707	time	_	_	_	_	
14-4	1708-1709	a	_	_	_	_	
14-5	1710-1716	client	_	_	_	_	
14-6	1717-1725	attempts	_	_	_	_	
14-7	1726-1728	to	_	_	_	_	
14-8	1729-1735	access	_	_	_	_	
14-9	1736-1737	a	_	_	_	_	
14-10	1738-1745	backend	_	_	_	_	
14-11	1746-1753	service	_	_	_	_	
14-12	1753-1754	,	_	_	_	_	
14-13	1755-1757	it	_	_	_	_	
14-14	1758-1766	requires	_	_	_	_	
14-15	1767-1769	OS	_	_	_	_	
14-16	1770-1779	resources	_	_	_	_	
14-17	1780-1782	to	_	_	_	_	
14-18	1783-1789	create	_	_	_	_	
14-19	1789-1790	,	_	_	_	_	
14-20	1791-1799	maintain	_	_	_	_	
14-21	1799-1800	,	_	_	_	_	
14-22	1801-1804	and	_	_	_	_	
14-23	1805-1810	close	_	_	_	_	
14-24	1811-1822	connections	_	_	_	_	
14-25	1823-1825	to	_	_	_	_	
14-26	1826-1829	the	_	_	_	_	
14-27	1830-1839	datastore	_	_	_	_	
14-28	1839-1840	.	_	_	_	_	

#Text=This creates a large amount of overhead causing database performance to deteriorate.
15-1	1841-1845	This	_	_	_	_	
15-2	1846-1853	creates	_	_	_	_	
15-3	1854-1855	a	_	_	_	_	
15-4	1856-1861	large	_	_	_	_	
15-5	1862-1868	amount	_	_	_	_	
15-6	1869-1871	of	_	_	_	_	
15-7	1872-1880	overhead	_	_	_	_	
15-8	1881-1888	causing	_	_	_	_	
15-9	1889-1897	database	_	_	_	_	
15-10	1898-1909	performance	_	_	_	_	
15-11	1910-1912	to	_	_	_	_	
15-12	1913-1924	deteriorate	_	_	_	_	
15-13	1924-1925	.	_	_	_	_	

#Text=Consumers of your service expect fast response times.
16-1	1926-1935	Consumers	_	_	_	_	
16-2	1936-1938	of	_	_	_	_	
16-3	1939-1943	your	_	_	_	_	
16-4	1944-1951	service	_	_	_	_	
16-5	1952-1958	expect	_	_	_	_	
16-6	1959-1963	fast	_	_	_	_	
16-7	1964-1972	response	_	_	_	_	
16-8	1973-1978	times	_	_	_	_	
16-9	1978-1979	.	_	_	_	_	

#Text=If that performance deteriorates, it can lead to poor user experiences, revenue losses, and even unscheduled downtime.
17-1	1980-1982	If	_	_	_	_	
17-2	1983-1987	that	_	_	_	_	
17-3	1988-1999	performance	_	_	_	_	
17-4	2000-2012	deteriorates	_	_	_	_	
17-5	2012-2013	,	_	_	_	_	
17-6	2014-2016	it	_	_	_	_	
17-7	2017-2020	can	_	_	_	_	
17-8	2021-2025	lead	_	_	_	_	
17-9	2026-2028	to	_	_	_	_	
17-10	2029-2033	poor	_	_	_	_	
17-11	2034-2038	user	_	_	_	_	
17-12	2039-2050	experiences	_	_	_	_	
17-13	2050-2051	,	_	_	_	_	
17-14	2052-2059	revenue	_	_	_	_	
17-15	2060-2066	losses	_	_	_	_	
17-16	2066-2067	,	_	_	_	_	
17-17	2068-2071	and	_	_	_	_	
17-18	2072-2076	even	_	_	_	_	
17-19	2077-2088	unscheduled	_	_	_	_	
17-20	2089-2097	downtime	_	_	_	_	
17-21	2097-2098	.	_	_	_	_	

#Text=If you expose your backend service as an API, repeated slowdowns and failures could cause cascading problems and lose you customers.
18-1	2099-2101	If	_	_	_	_	
18-2	2102-2105	you	_	_	_	_	
18-3	2106-2112	expose	_	_	_	_	
18-4	2113-2117	your	_	_	_	_	
18-5	2118-2125	backend	_	_	_	_	
18-6	2126-2133	service	_	_	_	_	
18-7	2134-2136	as	_	_	_	_	
18-8	2137-2139	an	_	_	_	_	
18-9	2140-2143	API	_	_	_	_	
18-10	2143-2144	,	_	_	_	_	
18-11	2145-2153	repeated	_	_	_	_	
18-12	2154-2163	slowdowns	_	_	_	_	
18-13	2164-2167	and	_	_	_	_	
18-14	2168-2176	failures	_	_	_	_	
18-15	2177-2182	could	_	_	_	_	
18-16	2183-2188	cause	_	_	_	_	
18-17	2189-2198	cascading	_	_	_	_	
18-18	2199-2207	problems	_	_	_	_	
18-19	2208-2211	and	_	_	_	_	
18-20	2212-2216	lose	_	_	_	_	
18-21	2217-2220	you	_	_	_	_	
18-22	2221-2230	customers	_	_	_	_	
18-23	2230-2231	.	_	_	_	_	

#Text=Instead of opening and closing connections for every request, connection pooling uses a cache of database connections that can be reused when future requests to the database are required.
19-1	2232-2239	Instead	_	_	_	_	
19-2	2240-2242	of	_	_	_	_	
19-3	2243-2250	opening	_	_	_	_	
19-4	2251-2254	and	_	_	_	_	
19-5	2255-2262	closing	_	_	_	_	
19-6	2263-2274	connections	_	_	_	_	
19-7	2275-2278	for	_	_	_	_	
19-8	2279-2284	every	_	_	_	_	
19-9	2285-2292	request	_	_	_	_	
19-10	2292-2293	,	_	_	_	_	
19-11	2294-2304	connection	_	_	_	_	
19-12	2305-2312	pooling	_	_	_	_	
19-13	2313-2317	uses	_	_	_	_	
19-14	2318-2319	a	_	_	_	_	
19-15	2320-2325	cache	_	_	_	_	
19-16	2326-2328	of	_	_	_	_	
19-17	2329-2337	database	_	_	_	_	
19-18	2338-2349	connections	_	_	_	_	
19-19	2350-2354	that	_	_	_	_	
19-20	2355-2358	can	_	_	_	_	
19-21	2359-2361	be	_	_	_	_	
19-22	2362-2368	reused	_	_	_	_	
19-23	2369-2373	when	_	_	_	_	
19-24	2374-2380	future	_	_	_	_	
19-25	2381-2389	requests	_	_	_	_	
19-26	2390-2392	to	_	_	_	_	
19-27	2393-2396	the	_	_	_	_	
19-28	2397-2405	database	_	_	_	_	
19-29	2406-2409	are	_	_	_	_	
19-30	2410-2418	required	_	_	_	_	
19-31	2418-2419	.	_	_	_	_	

#Text=It lets your database scale effectively as the data stored there and the number of clients accessing it grow.
20-1	2420-2422	It	_	_	_	_	
20-2	2423-2427	lets	_	_	_	_	
20-3	2428-2432	your	_	_	_	_	
20-4	2433-2441	database	_	_	_	_	
20-5	2442-2447	scale	_	_	_	_	
20-6	2448-2459	effectively	_	_	_	_	
20-7	2460-2462	as	_	_	_	_	
20-8	2463-2466	the	_	_	_	_	
20-9	2467-2471	data	_	_	_	_	
20-10	2472-2478	stored	_	_	_	_	
20-11	2479-2484	there	_	_	_	_	
20-12	2485-2488	and	_	_	_	_	
20-13	2489-2492	the	_	_	_	_	
20-14	2493-2499	number	_	_	_	_	
20-15	2500-2502	of	_	_	_	_	
20-16	2503-2510	clients	_	_	_	_	
20-17	2511-2520	accessing	_	_	_	_	
20-18	2521-2523	it	_	_	_	_	
20-19	2524-2528	grow	_	_	_	_	
20-20	2528-2529	.	_	_	_	_	

#Text=Traffic is never constant, so pooling can better manage traffic peaks without causing outages.
21-1	2530-2537	Traffic	_	_	_	_	
21-2	2538-2540	is	_	_	_	_	
21-3	2541-2546	never	_	_	_	_	
21-4	2547-2555	constant	_	_	_	_	
21-5	2555-2556	,	_	_	_	_	
21-6	2557-2559	so	_	_	_	_	
21-7	2560-2567	pooling	_	_	_	_	
21-8	2568-2571	can	_	_	_	_	
21-9	2572-2578	better	_	_	_	_	
21-10	2579-2585	manage	_	_	_	_	
21-11	2586-2593	traffic	_	_	_	_	
21-12	2594-2599	peaks	_	_	_	_	
21-13	2600-2607	without	_	_	_	_	
21-14	2608-2615	causing	_	_	_	_	
21-15	2616-2623	outages	_	_	_	_	
21-16	2623-2624	.	_	_	_	_	

#Text=Your production database shouldn’t be your bottleneck.
22-1	2625-2629	Your	_	_	_	_	
22-2	2630-2640	production	_	_	_	_	
22-3	2641-2649	database	_	_	_	_	
22-4	2650-2657	shouldn	_	_	_	_	
22-5	2657-2658	’	_	_	_	_	
22-6	2658-2659	t	_	_	_	_	
22-7	2660-2662	be	_	_	_	_	
22-8	2663-2667	your	_	_	_	_	
22-9	2668-2678	bottleneck	_	_	_	_	
22-10	2678-2679	.	_	_	_	_	

#Text=In this article, we will explore how we can use connection pooling middleware like pgpool and pgbouncer to reduce overhead and network latency.
23-1	2680-2682	In	_	_	_	_	
23-2	2683-2687	this	_	_	_	_	
23-3	2688-2695	article	_	_	_	_	
23-4	2695-2696	,	_	_	_	_	
23-5	2697-2699	we	_	_	_	_	
23-6	2700-2704	will	_	_	_	_	
23-7	2705-2712	explore	_	_	_	_	
23-8	2713-2716	how	_	_	_	_	
23-9	2717-2719	we	_	_	_	_	
23-10	2720-2723	can	_	_	_	_	
23-11	2724-2727	use	_	_	_	_	
23-12	2728-2738	connection	_	_	_	_	
23-13	2739-2746	pooling	_	_	_	_	
23-14	2747-2757	middleware	_	_	_	_	
23-15	2758-2762	like	_	_	_	_	
23-16	2763-2769	pgpool	_	_	_	_	
23-17	2770-2773	and	_	_	_	_	
23-18	2774-2783	pgbouncer	_	_	_	_	
23-19	2784-2786	to	_	_	_	_	
23-20	2787-2793	reduce	_	_	_	_	
23-21	2794-2802	overhead	_	_	_	_	
23-22	2803-2806	and	_	_	_	_	
23-23	2807-2814	network	_	_	_	_	
23-24	2815-2822	latency	_	_	_	_	
23-25	2822-2823	.	_	_	_	_	

#Text=For illustration purposes, I will use pgpool-II and pgbouncer to explain concepts of connection pooling and compare which one is more effective in pooling connections because some connection poolers can even affect database performance.
24-1	2824-2827	For	_	_	_	_	
24-2	2828-2840	illustration	_	_	_	_	
24-3	2841-2849	purposes	_	_	_	_	
24-4	2849-2850	,	_	_	_	_	
24-5	2851-2852	I	_	_	_	_	
24-6	2853-2857	will	_	_	_	_	
24-7	2858-2861	use	_	_	_	_	
24-8	2862-2871	pgpool-II	_	_	_	_	
24-9	2872-2875	and	_	_	_	_	
24-10	2876-2885	pgbouncer	_	_	_	_	
24-11	2886-2888	to	_	_	_	_	
24-12	2889-2896	explain	_	_	_	_	
24-13	2897-2905	concepts	_	_	_	_	
24-14	2906-2908	of	_	_	_	_	
24-15	2909-2919	connection	_	_	_	_	
24-16	2920-2927	pooling	_	_	_	_	
24-17	2928-2931	and	_	_	_	_	
24-18	2932-2939	compare	_	_	_	_	
24-19	2940-2945	which	_	_	_	_	
24-20	2946-2949	one	_	_	_	_	
24-21	2950-2952	is	_	_	_	_	
24-22	2953-2957	more	_	_	_	_	
24-23	2958-2967	effective	_	_	_	_	
24-24	2968-2970	in	_	_	_	_	
24-25	2971-2978	pooling	_	_	_	_	
24-26	2979-2990	connections	_	_	_	_	
24-27	2991-2998	because	_	_	_	_	
24-28	2999-3003	some	_	_	_	_	
24-29	3004-3014	connection	_	_	_	_	
24-30	3015-3022	poolers	_	_	_	_	
24-31	3023-3026	can	_	_	_	_	
24-32	3027-3031	even	_	_	_	_	
24-33	3032-3038	affect	_	_	_	_	
24-34	3039-3047	database	_	_	_	_	
24-35	3048-3059	performance	_	_	_	_	
24-36	3059-3060	.	_	_	_	_	

#Text=We will look at how to use pgbench to benchmark Postgres databases since it is the standard tool provided by PostgreSQL.
25-1	3061-3063	We	_	_	_	_	
25-2	3064-3068	will	_	_	_	_	
25-3	3069-3073	look	_	_	_	_	
25-4	3074-3076	at	_	_	_	_	
25-5	3077-3080	how	_	_	_	_	
25-6	3081-3083	to	_	_	_	_	
25-7	3084-3087	use	_	_	_	_	
25-8	3088-3095	pgbench	_	_	_	_	
25-9	3096-3098	to	_	_	_	_	
25-10	3099-3108	benchmark	_	_	_	_	
25-11	3109-3117	Postgres	_	_	_	_	
25-12	3118-3127	databases	_	_	_	_	
25-13	3128-3133	since	_	_	_	_	
25-14	3134-3136	it	_	_	_	_	
25-15	3137-3139	is	_	_	_	_	
25-16	3140-3143	the	_	_	_	_	
25-17	3144-3152	standard	_	_	_	_	
25-18	3153-3157	tool	_	_	_	_	
25-19	3158-3166	provided	_	_	_	_	
25-20	3167-3169	by	_	_	_	_	
25-21	3170-3180	PostgreSQL	_	_	_	_	
25-22	3180-3181	.	_	_	_	_	

#Text=Different hardware provides different benchmarking results based on the plan you set.
26-1	3182-3191	Different	_	_	_	_	
26-2	3192-3200	hardware	_	_	_	_	
26-3	3201-3209	provides	_	_	_	_	
26-4	3210-3219	different	_	_	_	_	
26-5	3220-3232	benchmarking	_	_	_	_	
26-6	3233-3240	results	_	_	_	_	
26-7	3241-3246	based	_	_	_	_	
26-8	3247-3249	on	_	_	_	_	
26-9	3250-3253	the	_	_	_	_	
26-10	3254-3258	plan	_	_	_	_	
26-11	3259-3262	you	_	_	_	_	
26-12	3263-3266	set	_	_	_	_	
26-13	3266-3267	.	_	_	_	_	

#Text=For the  tests below, I’m using these specifications.
27-1	3268-3271	For	_	_	_	_	
27-2	3272-3275	the	_	_	_	_	
27-3	3275-3276	 	_	_	_	_	
27-4	3277-3282	tests	_	_	_	_	
27-5	3283-3288	below	_	_	_	_	
27-6	3288-3289	,	_	_	_	_	
27-7	3290-3291	I	_	_	_	_	
27-8	3291-3292	’	_	_	_	_	
27-9	3292-3293	m	_	_	_	_	
27-10	3294-3299	using	_	_	_	_	
27-11	3300-3305	these	_	_	_	_	
27-12	3306-3320	specifications	_	_	_	_	
27-13	3320-3321	.	_	_	_	_	

#Text=Specs of my test machine:
#Text=Linode Server: Ubuntu 16 – 64 bit ( Virtual Machine)  Postgres version 9.5Memory: 2GBDatabase size: 800MBStorage: 2GB
#Text=Also it is important to isolate the Postgres database server from other frameworks like logstash shipper and other servers for collecting performance metrics because most of these components consume more memory and will affect the test results.
28-1	3322-3327	Specs	_	_	_	_	
28-2	3328-3330	of	_	_	_	_	
28-3	3331-3333	my	_	_	_	_	
28-4	3334-3338	test	_	_	_	_	
28-5	3339-3346	machine	_	_	_	_	
28-6	3346-3347	:	_	_	_	_	
28-7	3348-3354	Linode	_	_	_	_	
28-8	3355-3361	Server	_	_	_	_	
28-9	3361-3362	:	_	_	_	_	
28-10	3363-3369	Ubuntu	_	_	_	_	
28-11	3370-3372	16	_	_	_	_	
28-12	3373-3374	–	_	_	_	_	
28-13	3375-3377	64	_	_	_	_	
28-14	3378-3381	bit	_	_	_	_	
28-15	3382-3383	(	_	_	_	_	
28-16	3384-3391	Virtual	_	_	_	_	
28-17	3392-3399	Machine	_	_	_	_	
28-18	3399-3400	)	_	_	_	_	
28-19	3400-3402	  	_	_	_	_	
28-20	3402-3410	Postgres	_	_	_	_	
28-21	3411-3418	version	_	_	_	_	
28-22	3419-3428	9.5Memory	_	_	_	_	
28-23	3428-3429	:	_	_	_	_	
28-24	3430-3441	2GBDatabase	_	_	_	_	
28-25	3442-3446	size	_	_	_	_	
28-26	3446-3447	:	_	_	_	_	
28-27	3448-3460	800MBStorage	_	_	_	_	
28-28	3460-3461	:	_	_	_	_	
28-29	3462-3465	2GB	_	_	_	_	
28-30	3466-3470	Also	_	_	_	_	
28-31	3471-3473	it	_	_	_	_	
28-32	3474-3476	is	_	_	_	_	
28-33	3477-3486	important	_	_	_	_	
28-34	3487-3489	to	_	_	_	_	
28-35	3490-3497	isolate	_	_	_	_	
28-36	3498-3501	the	_	_	_	_	
28-37	3502-3510	Postgres	_	_	_	_	
28-38	3511-3519	database	_	_	_	_	
28-39	3520-3526	server	_	_	_	_	
28-40	3527-3531	from	_	_	_	_	
28-41	3532-3537	other	_	_	_	_	
28-42	3538-3548	frameworks	_	_	_	_	
28-43	3549-3553	like	_	_	_	_	
28-44	3554-3562	logstash	_	_	_	_	
28-45	3563-3570	shipper	_	_	_	_	
28-46	3571-3574	and	_	_	_	_	
28-47	3575-3580	other	_	_	_	_	
28-48	3581-3588	servers	_	_	_	_	
28-49	3589-3592	for	_	_	_	_	
28-50	3593-3603	collecting	_	_	_	_	
28-51	3604-3615	performance	_	_	_	_	
28-52	3616-3623	metrics	_	_	_	_	
28-53	3624-3631	because	_	_	_	_	
28-54	3632-3636	most	_	_	_	_	
28-55	3637-3639	of	_	_	_	_	
28-56	3640-3645	these	_	_	_	_	
28-57	3646-3656	components	_	_	_	_	
28-58	3657-3664	consume	_	_	_	_	
28-59	3665-3669	more	_	_	_	_	
28-60	3670-3676	memory	_	_	_	_	
28-61	3677-3680	and	_	_	_	_	
28-62	3681-3685	will	_	_	_	_	
28-63	3686-3692	affect	_	_	_	_	
28-64	3693-3696	the	_	_	_	_	
28-65	3697-3701	test	_	_	_	_	
28-66	3702-3709	results	_	_	_	_	
28-67	3709-3710	.	_	_	_	_	

#Text=Creating a pooled connection
#Text=Connecting to a backend service is an expensive operation, as it consists of the following steps:
#Text=Open a connection to the database using the database driver.Open a TCP socket for CRUD operations Perform CRUD operations over the socket.  
29-1	3711-3719	Creating	_	_	_	_	
29-2	3720-3721	a	_	_	_	_	
29-3	3722-3728	pooled	_	_	_	_	
29-4	3729-3739	connection	_	_	_	_	
29-5	3740-3750	Connecting	_	_	_	_	
29-6	3751-3753	to	_	_	_	_	
29-7	3754-3755	a	_	_	_	_	
29-8	3756-3763	backend	_	_	_	_	
29-9	3764-3771	service	_	_	_	_	
29-10	3772-3774	is	_	_	_	_	
29-11	3775-3777	an	_	_	_	_	
29-12	3778-3787	expensive	_	_	_	_	
29-13	3788-3797	operation	_	_	_	_	
29-14	3797-3798	,	_	_	_	_	
29-15	3799-3801	as	_	_	_	_	
29-16	3802-3804	it	_	_	_	_	
29-17	3805-3813	consists	_	_	_	_	
29-18	3814-3816	of	_	_	_	_	
29-19	3817-3820	the	_	_	_	_	
29-20	3821-3830	following	_	_	_	_	
29-21	3831-3836	steps	_	_	_	_	
29-22	3836-3837	:	_	_	_	_	
29-23	3838-3842	Open	_	_	_	_	
29-24	3843-3844	a	_	_	_	_	
29-25	3845-3855	connection	_	_	_	_	
29-26	3856-3858	to	_	_	_	_	
29-27	3859-3862	the	_	_	_	_	
29-28	3863-3871	database	_	_	_	_	
29-29	3872-3877	using	_	_	_	_	
29-30	3878-3881	the	_	_	_	_	
29-31	3882-3890	database	_	_	_	_	
29-32	3891-3902	driver.Open	_	_	_	_	
29-33	3903-3904	a	_	_	_	_	
29-34	3905-3908	TCP	_	_	_	_	
29-35	3909-3915	socket	_	_	_	_	
29-36	3916-3919	for	_	_	_	_	
29-37	3920-3924	CRUD	_	_	_	_	
29-38	3925-3935	operations	_	_	_	_	
29-39	3935-3936	 	_	_	_	_	
29-40	3936-3943	Perform	_	_	_	_	
29-41	3944-3948	CRUD	_	_	_	_	
29-42	3949-3959	operations	_	_	_	_	
29-43	3960-3964	over	_	_	_	_	
29-44	3965-3968	the	_	_	_	_	
29-45	3969-3975	socket	_	_	_	_	
29-46	3975-3976	.	_	_	_	_	
29-47	3976-3978	  	_	_	_	_	

#Text=Close the connection.Close the socket.
30-1	3978-3983	Close	_	_	_	_	
30-2	3984-3987	the	_	_	_	_	
30-3	3988-4004	connection.Close	_	_	_	_	
30-4	4005-4008	the	_	_	_	_	
30-5	4009-4015	socket	_	_	_	_	
30-6	4015-4016	.	_	_	_	_	

#Text=In a production environment where we expect thousands of concurrent open and close connections from clients, doing the above steps for every single connection can cause the database to perform poorly.
31-1	4017-4019	In	_	_	_	_	
31-2	4020-4021	a	_	_	_	_	
31-3	4022-4032	production	_	_	_	_	
31-4	4033-4044	environment	_	_	_	_	
31-5	4045-4050	where	_	_	_	_	
31-6	4051-4053	we	_	_	_	_	
31-7	4054-4060	expect	_	_	_	_	
31-8	4061-4070	thousands	_	_	_	_	
31-9	4071-4073	of	_	_	_	_	
31-10	4074-4084	concurrent	_	_	_	_	
31-11	4085-4089	open	_	_	_	_	
31-12	4090-4093	and	_	_	_	_	
31-13	4094-4099	close	_	_	_	_	
31-14	4100-4111	connections	_	_	_	_	
31-15	4112-4116	from	_	_	_	_	
31-16	4117-4124	clients	_	_	_	_	
31-17	4124-4125	,	_	_	_	_	
31-18	4126-4131	doing	_	_	_	_	
31-19	4132-4135	the	_	_	_	_	
31-20	4136-4141	above	_	_	_	_	
31-21	4142-4147	steps	_	_	_	_	
31-22	4148-4151	for	_	_	_	_	
31-23	4152-4157	every	_	_	_	_	
31-24	4158-4164	single	_	_	_	_	
31-25	4165-4175	connection	_	_	_	_	
31-26	4176-4179	can	_	_	_	_	
31-27	4180-4185	cause	_	_	_	_	
31-28	4186-4189	the	_	_	_	_	
31-29	4190-4198	database	_	_	_	_	
31-30	4199-4201	to	_	_	_	_	
31-31	4202-4209	perform	_	_	_	_	
31-32	4210-4216	poorly	_	_	_	_	
31-33	4216-4217	.	_	_	_	_	

#Text=We can resolve this problem by pooling connections from clients.
32-1	4218-4220	We	_	_	_	_	
32-2	4221-4224	can	_	_	_	_	
32-3	4225-4232	resolve	_	_	_	_	
32-4	4233-4237	this	_	_	_	_	
32-5	4238-4245	problem	_	_	_	_	
32-6	4246-4248	by	_	_	_	_	
32-7	4249-4256	pooling	_	_	_	_	
32-8	4257-4268	connections	_	_	_	_	
32-9	4269-4273	from	_	_	_	_	
32-10	4274-4281	clients	_	_	_	_	
32-11	4281-4282	.	_	_	_	_	

#Text=Instead of creating a new connection with every request, connection poolers reuse some existing connections.
33-1	4283-4290	Instead	_	_	_	_	
33-2	4291-4293	of	_	_	_	_	
33-3	4294-4302	creating	_	_	_	_	
33-4	4303-4304	a	_	_	_	_	
33-5	4305-4308	new	_	_	_	_	
33-6	4309-4319	connection	_	_	_	_	
33-7	4320-4324	with	_	_	_	_	
33-8	4325-4330	every	_	_	_	_	
33-9	4331-4338	request	_	_	_	_	
33-10	4338-4339	,	_	_	_	_	
33-11	4340-4350	connection	_	_	_	_	
33-12	4351-4358	poolers	_	_	_	_	
33-13	4359-4364	reuse	_	_	_	_	
33-14	4365-4369	some	_	_	_	_	
33-15	4370-4378	existing	_	_	_	_	
33-16	4379-4390	connections	_	_	_	_	
33-17	4390-4391	.	_	_	_	_	

#Text=Thus there is no need to perform multiple expensive full database trips by opening and closing connections to backend service.
34-1	4392-4396	Thus	_	_	_	_	
34-2	4397-4402	there	_	_	_	_	
34-3	4403-4405	is	_	_	_	_	
34-4	4406-4408	no	_	_	_	_	
34-5	4409-4413	need	_	_	_	_	
34-6	4414-4416	to	_	_	_	_	
34-7	4417-4424	perform	_	_	_	_	
34-8	4425-4433	multiple	_	_	_	_	
34-9	4434-4443	expensive	_	_	_	_	
34-10	4444-4448	full	_	_	_	_	
34-11	4449-4457	database	_	_	_	_	
34-12	4458-4463	trips	_	_	_	_	
34-13	4464-4466	by	_	_	_	_	
34-14	4467-4474	opening	_	_	_	_	
34-15	4475-4478	and	_	_	_	_	
34-16	4479-4486	closing	_	_	_	_	
34-17	4487-4498	connections	_	_	_	_	
34-18	4499-4501	to	_	_	_	_	
34-19	4502-4509	backend	_	_	_	_	
34-20	4510-4517	service	_	_	_	_	
34-21	4517-4518	.	_	_	_	_	

#Text=It prevents the overhead of creating a new connection to the database every time there is a request for a database connection with the same properties (i.e name, database, protocol version).
35-1	4519-4521	It	_	_	_	_	
35-2	4522-4530	prevents	_	_	_	_	
35-3	4531-4534	the	_	_	_	_	
35-4	4535-4543	overhead	_	_	_	_	
35-5	4544-4546	of	_	_	_	_	
35-6	4547-4555	creating	_	_	_	_	
35-7	4556-4557	a	_	_	_	_	
35-8	4558-4561	new	_	_	_	_	
35-9	4562-4572	connection	_	_	_	_	
35-10	4573-4575	to	_	_	_	_	
35-11	4576-4579	the	_	_	_	_	
35-12	4580-4588	database	_	_	_	_	
35-13	4589-4594	every	_	_	_	_	
35-14	4595-4599	time	_	_	_	_	
35-15	4600-4605	there	_	_	_	_	
35-16	4606-4608	is	_	_	_	_	
35-17	4609-4610	a	_	_	_	_	
35-18	4611-4618	request	_	_	_	_	
35-19	4619-4622	for	_	_	_	_	
35-20	4623-4624	a	_	_	_	_	
35-21	4625-4633	database	_	_	_	_	
35-22	4634-4644	connection	_	_	_	_	
35-23	4645-4649	with	_	_	_	_	
35-24	4650-4653	the	_	_	_	_	
35-25	4654-4658	same	_	_	_	_	
35-26	4659-4669	properties	_	_	_	_	
35-27	4670-4671	(	_	_	_	_	
35-28	4671-4674	i.e	_	_	_	_	
35-29	4675-4679	name	_	_	_	_	
35-30	4679-4680	,	_	_	_	_	
35-31	4681-4689	database	_	_	_	_	
35-32	4689-4690	,	_	_	_	_	
35-33	4691-4699	protocol	_	_	_	_	
35-34	4700-4707	version	_	_	_	_	
35-35	4707-4708	)	_	_	_	_	
35-36	4708-4709	.	_	_	_	_	

#Text=Pooling middleware like pgbouncer comes with a pool manager.
36-1	4710-4717	Pooling	_	_	_	_	
36-2	4718-4728	middleware	_	_	_	_	
36-3	4729-4733	like	_	_	_	_	
36-4	4734-4743	pgbouncer	_	_	_	_	
36-5	4744-4749	comes	_	_	_	_	
36-6	4750-4754	with	_	_	_	_	
36-7	4755-4756	a	_	_	_	_	
36-8	4757-4761	pool	_	_	_	_	
36-9	4762-4769	manager	_	_	_	_	
36-10	4769-4770	.	_	_	_	_	

#Text=Usually, the connection pool manager maintains a pool of open database connections.
37-1	4771-4778	Usually	_	_	_	_	
37-2	4778-4779	,	_	_	_	_	
37-3	4780-4783	the	_	_	_	_	
37-4	4784-4794	connection	_	_	_	_	
37-5	4795-4799	pool	_	_	_	_	
37-6	4800-4807	manager	_	_	_	_	
37-7	4808-4817	maintains	_	_	_	_	
37-8	4818-4819	a	_	_	_	_	
37-9	4820-4824	pool	_	_	_	_	
37-10	4825-4827	of	_	_	_	_	
37-11	4828-4832	open	_	_	_	_	
37-12	4833-4841	database	_	_	_	_	
37-13	4842-4853	connections	_	_	_	_	
37-14	4853-4854	.	_	_	_	_	

#Text=You can not pool connections without a pool manager.
38-1	4855-4858	You	_	_	_	_	
38-2	4859-4862	can	_	_	_	_	
38-3	4863-4866	not	_	_	_	_	
38-4	4867-4871	pool	_	_	_	_	
38-5	4872-4883	connections	_	_	_	_	
38-6	4884-4891	without	_	_	_	_	
38-7	4892-4893	a	_	_	_	_	
38-8	4894-4898	pool	_	_	_	_	
38-9	4899-4906	manager	_	_	_	_	
38-10	4906-4907	.	_	_	_	_	

#Text=A pool contains two types of connections:
#Text=Active connection: In use by the application.Idle connection:  Available for use by the application.
39-1	4908-4909	A	_	_	_	_	
39-2	4910-4914	pool	_	_	_	_	
39-3	4915-4923	contains	_	_	_	_	
39-4	4924-4927	two	_	_	_	_	
39-5	4928-4933	types	_	_	_	_	
39-6	4934-4936	of	_	_	_	_	
39-7	4937-4948	connections	_	_	_	_	
39-8	4948-4949	:	_	_	_	_	
39-9	4950-4956	Active	_	_	_	_	
39-10	4957-4967	connection	_	_	_	_	
39-11	4967-4968	:	_	_	_	_	
39-12	4969-4971	In	_	_	_	_	
39-13	4972-4975	use	_	_	_	_	
39-14	4976-4978	by	_	_	_	_	
39-15	4979-4982	the	_	_	_	_	
39-16	4983-4999	application.Idle	_	_	_	_	
39-17	5000-5010	connection	_	_	_	_	
39-18	5010-5011	:	_	_	_	_	
39-19	5011-5012	 	_	_	_	_	
39-20	5013-5022	Available	_	_	_	_	
39-21	5023-5026	for	_	_	_	_	
39-22	5027-5030	use	_	_	_	_	
39-23	5031-5033	by	_	_	_	_	
39-24	5034-5037	the	_	_	_	_	
39-25	5038-5049	application	_	_	_	_	
39-26	5049-5050	.	_	_	_	_	

#Text=When a new request to access data from the backend service comes in, the pool manager checks if the pool contains any unused connection and returns one if available.
40-1	5051-5055	When	_	_	_	_	
40-2	5056-5057	a	_	_	_	_	
40-3	5058-5061	new	_	_	_	_	
40-4	5062-5069	request	_	_	_	_	
40-5	5070-5072	to	_	_	_	_	
40-6	5073-5079	access	_	_	_	_	
40-7	5080-5084	data	_	_	_	_	
40-8	5085-5089	from	_	_	_	_	
40-9	5090-5093	the	_	_	_	_	
40-10	5094-5101	backend	_	_	_	_	
40-11	5102-5109	service	_	_	_	_	
40-12	5110-5115	comes	_	_	_	_	
40-13	5116-5118	in	_	_	_	_	
40-14	5118-5119	,	_	_	_	_	
40-15	5120-5123	the	_	_	_	_	
40-16	5124-5128	pool	_	_	_	_	
40-17	5129-5136	manager	_	_	_	_	
40-18	5137-5143	checks	_	_	_	_	
40-19	5144-5146	if	_	_	_	_	
40-20	5147-5150	the	_	_	_	_	
40-21	5151-5155	pool	_	_	_	_	
40-22	5156-5164	contains	_	_	_	_	
40-23	5165-5168	any	_	_	_	_	
40-24	5169-5175	unused	_	_	_	_	
40-25	5176-5186	connection	_	_	_	_	
40-26	5187-5190	and	_	_	_	_	
40-27	5191-5198	returns	_	_	_	_	
40-28	5199-5202	one	_	_	_	_	
40-29	5203-5205	if	_	_	_	_	
40-30	5206-5215	available	_	_	_	_	
40-31	5215-5216	.	_	_	_	_	

#Text=If all the connections in the pool are active, then a new connection is created and added to the pool by the pool manager.
41-1	5217-5219	If	_	_	_	_	
41-2	5220-5223	all	_	_	_	_	
41-3	5224-5227	the	_	_	_	_	
41-4	5228-5239	connections	_	_	_	_	
41-5	5240-5242	in	_	_	_	_	
41-6	5243-5246	the	_	_	_	_	
41-7	5247-5251	pool	_	_	_	_	
41-8	5252-5255	are	_	_	_	_	
41-9	5256-5262	active	_	_	_	_	
41-10	5262-5263	,	_	_	_	_	
41-11	5264-5268	then	_	_	_	_	
41-12	5269-5270	a	_	_	_	_	
41-13	5271-5274	new	_	_	_	_	
41-14	5275-5285	connection	_	_	_	_	
41-15	5286-5288	is	_	_	_	_	
41-16	5289-5296	created	_	_	_	_	
41-17	5297-5300	and	_	_	_	_	
41-18	5301-5306	added	_	_	_	_	
41-19	5307-5309	to	_	_	_	_	
41-20	5310-5313	the	_	_	_	_	
41-21	5314-5318	pool	_	_	_	_	
41-22	5319-5321	by	_	_	_	_	
41-23	5322-5325	the	_	_	_	_	
41-24	5326-5330	pool	_	_	_	_	
41-25	5331-5338	manager	_	_	_	_	
41-26	5338-5339	.	_	_	_	_	

#Text=When the pool reaches its maximum size, all new connections are queued until a connection in the pool becomes available.
42-1	5340-5344	When	_	_	_	_	
42-2	5345-5348	the	_	_	_	_	
42-3	5349-5353	pool	_	_	_	_	
42-4	5354-5361	reaches	_	_	_	_	
42-5	5362-5365	its	_	_	_	_	
42-6	5366-5373	maximum	_	_	_	_	
42-7	5374-5378	size	_	_	_	_	
42-8	5378-5379	,	_	_	_	_	
42-9	5380-5383	all	_	_	_	_	
42-10	5384-5387	new	_	_	_	_	
42-11	5388-5399	connections	_	_	_	_	
42-12	5400-5403	are	_	_	_	_	
42-13	5404-5410	queued	_	_	_	_	
42-14	5411-5416	until	_	_	_	_	
42-15	5417-5418	a	_	_	_	_	
42-16	5419-5429	connection	_	_	_	_	
42-17	5430-5432	in	_	_	_	_	
42-18	5433-5436	the	_	_	_	_	
42-19	5437-5441	pool	_	_	_	_	
42-20	5442-5449	becomes	_	_	_	_	
42-21	5450-5459	available	_	_	_	_	
42-22	5459-5460	.	_	_	_	_	

#Text=Although most databases do not have an in-built connection pooling system, there are middleware solutions that we can use to pool connections from clients.
43-1	5461-5469	Although	_	_	_	_	
43-2	5470-5474	most	_	_	_	_	
43-3	5475-5484	databases	_	_	_	_	
43-4	5485-5487	do	_	_	_	_	
43-5	5488-5491	not	_	_	_	_	
43-6	5492-5496	have	_	_	_	_	
43-7	5497-5499	an	_	_	_	_	
43-8	5500-5508	in-built	_	_	_	_	
43-9	5509-5519	connection	_	_	_	_	
43-10	5520-5527	pooling	_	_	_	_	
43-11	5528-5534	system	_	_	_	_	
43-12	5534-5535	,	_	_	_	_	
43-13	5536-5541	there	_	_	_	_	
43-14	5542-5545	are	_	_	_	_	
43-15	5546-5556	middleware	_	_	_	_	
43-16	5557-5566	solutions	_	_	_	_	
43-17	5567-5571	that	_	_	_	_	
43-18	5572-5574	we	_	_	_	_	
43-19	5575-5578	can	_	_	_	_	
43-20	5579-5582	use	_	_	_	_	
43-21	5583-5585	to	_	_	_	_	
43-22	5586-5590	pool	_	_	_	_	
43-23	5591-5602	connections	_	_	_	_	
43-24	5603-5607	from	_	_	_	_	
43-25	5608-5615	clients	_	_	_	_	
43-26	5615-5616	.	_	_	_	_	

#Text=For a PostgreSQL database server, both pgbouncer and pgpool-II can serve as a pooling interface between a web service and a Postgres database.
44-1	5617-5620	For	_	_	_	_	
44-2	5621-5622	a	_	_	_	_	
44-3	5623-5633	PostgreSQL	_	_	_	_	
44-4	5634-5642	database	_	_	_	_	
44-5	5643-5649	server	_	_	_	_	
44-6	5649-5650	,	_	_	_	_	
44-7	5651-5655	both	_	_	_	_	
44-8	5656-5665	pgbouncer	_	_	_	_	
44-9	5666-5669	and	_	_	_	_	
44-10	5670-5679	pgpool-II	_	_	_	_	
44-11	5680-5683	can	_	_	_	_	
44-12	5684-5689	serve	_	_	_	_	
44-13	5690-5692	as	_	_	_	_	
44-14	5693-5694	a	_	_	_	_	
44-15	5695-5702	pooling	_	_	_	_	
44-16	5703-5712	interface	_	_	_	_	
44-17	5713-5720	between	_	_	_	_	
44-18	5721-5722	a	_	_	_	_	
44-19	5723-5726	web	_	_	_	_	
44-20	5727-5734	service	_	_	_	_	
44-21	5735-5738	and	_	_	_	_	
44-22	5739-5740	a	_	_	_	_	
44-23	5741-5749	Postgres	_	_	_	_	
44-24	5750-5758	database	_	_	_	_	
44-25	5758-5759	.	_	_	_	_	

#Text=Both utilities use the same logic to pool connections from clients.
#Text=pgpool-II offers more features beyond connection pooling, such as replication, load balancing, and parallel query features.
45-1	5760-5764	Both	_	_	_	_	
45-2	5765-5774	utilities	_	_	_	_	
45-3	5775-5778	use	_	_	_	_	
45-4	5779-5782	the	_	_	_	_	
45-5	5783-5787	same	_	_	_	_	
45-6	5788-5793	logic	_	_	_	_	
45-7	5794-5796	to	_	_	_	_	
45-8	5797-5801	pool	_	_	_	_	
45-9	5802-5813	connections	_	_	_	_	
45-10	5814-5818	from	_	_	_	_	
45-11	5819-5826	clients	_	_	_	_	
45-12	5826-5827	.	_	_	_	_	
45-13	5828-5837	pgpool-II	_	_	_	_	
45-14	5838-5844	offers	_	_	_	_	
45-15	5845-5849	more	_	_	_	_	
45-16	5850-5858	features	_	_	_	_	
45-17	5859-5865	beyond	_	_	_	_	
45-18	5866-5876	connection	_	_	_	_	
45-19	5877-5884	pooling	_	_	_	_	
45-20	5884-5885	,	_	_	_	_	
45-21	5886-5890	such	_	_	_	_	
45-22	5891-5893	as	_	_	_	_	
45-23	5894-5905	replication	_	_	_	_	
45-24	5905-5906	,	_	_	_	_	
45-25	5907-5911	load	_	_	_	_	
45-26	5912-5921	balancing	_	_	_	_	
45-27	5921-5922	,	_	_	_	_	
45-28	5923-5926	and	_	_	_	_	
45-29	5927-5935	parallel	_	_	_	_	
45-30	5936-5941	query	_	_	_	_	
45-31	5942-5950	features	_	_	_	_	
45-32	5950-5951	.	_	_	_	_	

#Text=How do you add connection pooling?
46-1	5952-5955	How	_	_	_	_	
46-2	5956-5958	do	_	_	_	_	
46-3	5959-5962	you	_	_	_	_	
46-4	5963-5966	add	_	_	_	_	
46-5	5967-5977	connection	_	_	_	_	
46-6	5978-5985	pooling	_	_	_	_	
46-7	5985-5986	?	_	_	_	_	

#Text=Is it as simple as installing the utilities?
47-1	5987-5989	Is	_	_	_	_	
47-2	5990-5992	it	_	_	_	_	
47-3	5993-5995	as	_	_	_	_	
47-4	5996-6002	simple	_	_	_	_	
47-5	6003-6005	as	_	_	_	_	
47-6	6006-6016	installing	_	_	_	_	
47-7	6017-6020	the	_	_	_	_	
47-8	6021-6030	utilities	_	_	_	_	
47-9	6030-6031	?	_	_	_	_	

#Text=Two ways to integrate a connection pooler
#Text=There are two ways of implementing connection pooling for PostgreSQL application:
#Text=As an external service or middleware such as pgbouncer
#Text=Connection poolers such as pgbouncer and pgpool-II can be used to pool connections from clients to a PostgreSQL database.
48-1	6032-6035	Two	_	_	_	_	
48-2	6036-6040	ways	_	_	_	_	
48-3	6041-6043	to	_	_	_	_	
48-4	6044-6053	integrate	_	_	_	_	
48-5	6054-6055	a	_	_	_	_	
48-6	6056-6066	connection	_	_	_	_	
48-7	6067-6073	pooler	_	_	_	_	
48-8	6074-6079	There	_	_	_	_	
48-9	6080-6083	are	_	_	_	_	
48-10	6084-6087	two	_	_	_	_	
48-11	6088-6092	ways	_	_	_	_	
48-12	6093-6095	of	_	_	_	_	
48-13	6096-6108	implementing	_	_	_	_	
48-14	6109-6119	connection	_	_	_	_	
48-15	6120-6127	pooling	_	_	_	_	
48-16	6128-6131	for	_	_	_	_	
48-17	6132-6142	PostgreSQL	_	_	_	_	
48-18	6143-6154	application	_	_	_	_	
48-19	6154-6155	:	_	_	_	_	
48-20	6156-6158	As	_	_	_	_	
48-21	6159-6161	an	_	_	_	_	
48-22	6162-6170	external	_	_	_	_	
48-23	6171-6178	service	_	_	_	_	
48-24	6179-6181	or	_	_	_	_	
48-25	6182-6192	middleware	_	_	_	_	
48-26	6193-6197	such	_	_	_	_	
48-27	6198-6200	as	_	_	_	_	
48-28	6201-6210	pgbouncer	_	_	_	_	
48-29	6211-6221	Connection	_	_	_	_	
48-30	6222-6229	poolers	_	_	_	_	
48-31	6230-6234	such	_	_	_	_	
48-32	6235-6237	as	_	_	_	_	
48-33	6238-6247	pgbouncer	_	_	_	_	
48-34	6248-6251	and	_	_	_	_	
48-35	6252-6261	pgpool-II	_	_	_	_	
48-36	6262-6265	can	_	_	_	_	
48-37	6266-6268	be	_	_	_	_	
48-38	6269-6273	used	_	_	_	_	
48-39	6274-6276	to	_	_	_	_	
48-40	6277-6281	pool	_	_	_	_	
48-41	6282-6293	connections	_	_	_	_	
48-42	6294-6298	from	_	_	_	_	
48-43	6299-6306	clients	_	_	_	_	
48-44	6307-6309	to	_	_	_	_	
48-45	6310-6311	a	_	_	_	_	
48-46	6312-6322	PostgreSQL	_	_	_	_	
48-47	6323-6331	database	_	_	_	_	
48-48	6331-6332	.	_	_	_	_	

#Text=The connection pooler sits in between the application and the database server.
49-1	6333-6336	The	_	_	_	_	
49-2	6337-6347	connection	_	_	_	_	
49-3	6348-6354	pooler	_	_	_	_	
49-4	6355-6359	sits	_	_	_	_	
49-5	6360-6362	in	_	_	_	_	
49-6	6363-6370	between	_	_	_	_	
49-7	6371-6374	the	_	_	_	_	
49-8	6375-6386	application	_	_	_	_	
49-9	6387-6390	and	_	_	_	_	
49-10	6391-6394	the	_	_	_	_	
49-11	6395-6403	database	_	_	_	_	
49-12	6404-6410	server	_	_	_	_	
49-13	6410-6411	.	_	_	_	_	

#Text=Pgbouncer or pgpool-II can be configured in a way to relay requests from the application to the database server.
50-1	6412-6421	Pgbouncer	_	_	_	_	
50-2	6422-6424	or	_	_	_	_	
50-3	6425-6434	pgpool-II	_	_	_	_	
50-4	6435-6438	can	_	_	_	_	
50-5	6439-6441	be	_	_	_	_	
50-6	6442-6452	configured	_	_	_	_	
50-7	6453-6455	in	_	_	_	_	
50-8	6456-6457	a	_	_	_	_	
50-9	6458-6461	way	_	_	_	_	
50-10	6462-6464	to	_	_	_	_	
50-11	6465-6470	relay	_	_	_	_	
50-12	6471-6479	requests	_	_	_	_	
50-13	6480-6484	from	_	_	_	_	
50-14	6485-6488	the	_	_	_	_	
50-15	6489-6500	application	_	_	_	_	
50-16	6501-6503	to	_	_	_	_	
50-17	6504-6507	the	_	_	_	_	
50-18	6508-6516	database	_	_	_	_	
50-19	6517-6523	server	_	_	_	_	
50-20	6523-6524	.	_	_	_	_	

#Text=Client-side libraries such as c3p0
#Text=There exist libraries such as c3p0 which extend database driver functionality to include connection pooling support.
51-1	6525-6536	Client-side	_	_	_	_	
51-2	6537-6546	libraries	_	_	_	_	
51-3	6547-6551	such	_	_	_	_	
51-4	6552-6554	as	_	_	_	_	
51-5	6555-6559	c3p0	_	_	_	_	
51-6	6560-6565	There	_	_	_	_	
51-7	6566-6571	exist	_	_	_	_	
51-8	6572-6581	libraries	_	_	_	_	
51-9	6582-6586	such	_	_	_	_	
51-10	6587-6589	as	_	_	_	_	
51-11	6590-6594	c3p0	_	_	_	_	
51-12	6595-6600	which	_	_	_	_	
51-13	6601-6607	extend	_	_	_	_	
51-14	6608-6616	database	_	_	_	_	
51-15	6617-6623	driver	_	_	_	_	
51-16	6624-6637	functionality	_	_	_	_	
51-17	6638-6640	to	_	_	_	_	
51-18	6641-6648	include	_	_	_	_	
51-19	6649-6659	connection	_	_	_	_	
51-20	6660-6667	pooling	_	_	_	_	
51-21	6668-6675	support	_	_	_	_	
51-22	6675-6676	.	_	_	_	_	

#Text=However, the best way to implement connection pooling for applications is to make use of an external service or middleware since it is easier to set up and manage.
52-1	6677-6684	However	_	_	_	_	
52-2	6684-6685	,	_	_	_	_	
52-3	6686-6689	the	_	_	_	_	
52-4	6690-6694	best	_	_	_	_	
52-5	6695-6698	way	_	_	_	_	
52-6	6699-6701	to	_	_	_	_	
52-7	6702-6711	implement	_	_	_	_	
52-8	6712-6722	connection	_	_	_	_	
52-9	6723-6730	pooling	_	_	_	_	
52-10	6731-6734	for	_	_	_	_	
52-11	6735-6747	applications	_	_	_	_	
52-12	6748-6750	is	_	_	_	_	
52-13	6751-6753	to	_	_	_	_	
52-14	6754-6758	make	_	_	_	_	
52-15	6759-6762	use	_	_	_	_	
52-16	6763-6765	of	_	_	_	_	
52-17	6766-6768	an	_	_	_	_	
52-18	6769-6777	external	_	_	_	_	
52-19	6778-6785	service	_	_	_	_	
52-20	6786-6788	or	_	_	_	_	
52-21	6789-6799	middleware	_	_	_	_	
52-22	6800-6805	since	_	_	_	_	
52-23	6806-6808	it	_	_	_	_	
52-24	6809-6811	is	_	_	_	_	
52-25	6812-6818	easier	_	_	_	_	
52-26	6819-6821	to	_	_	_	_	
52-27	6822-6825	set	_	_	_	_	
52-28	6826-6828	up	_	_	_	_	
52-29	6829-6832	and	_	_	_	_	
52-30	6833-6839	manage	_	_	_	_	
52-31	6839-6840	.	_	_	_	_	

#Text=In addition external middleware like pgpool2 provides other features such as load balancing apart from pooling connections.
53-1	6841-6843	In	_	_	_	_	
53-2	6844-6852	addition	_	_	_	_	
53-3	6853-6861	external	_	_	_	_	
53-4	6862-6872	middleware	_	_	_	_	
53-5	6873-6877	like	_	_	_	_	
53-6	6878-6885	pgpool2	_	_	_	_	
53-7	6886-6894	provides	_	_	_	_	
53-8	6895-6900	other	_	_	_	_	
53-9	6901-6909	features	_	_	_	_	
53-10	6910-6914	such	_	_	_	_	
53-11	6915-6917	as	_	_	_	_	
53-12	6918-6922	load	_	_	_	_	
53-13	6923-6932	balancing	_	_	_	_	
53-14	6933-6938	apart	_	_	_	_	
53-15	6939-6943	from	_	_	_	_	
53-16	6944-6951	pooling	_	_	_	_	
53-17	6952-6963	connections	_	_	_	_	
53-18	6963-6964	.	_	_	_	_	

#Text=Now let’s take a deeper look at what happens when a backend service connects to a Postgres database, both with and without pooling.
54-1	6965-6968	Now	_	_	_	_	
54-2	6969-6972	let	_	_	_	_	
54-3	6972-6973	’	_	_	_	_	
54-4	6973-6974	s	_	_	_	_	
54-5	6975-6979	take	_	_	_	_	
54-6	6980-6981	a	_	_	_	_	
54-7	6982-6988	deeper	_	_	_	_	
54-8	6989-6993	look	_	_	_	_	
54-9	6994-6996	at	_	_	_	_	
54-10	6997-7001	what	_	_	_	_	
54-11	7002-7009	happens	_	_	_	_	
54-12	7010-7014	when	_	_	_	_	
54-13	7015-7016	a	_	_	_	_	
54-14	7017-7024	backend	_	_	_	_	
54-15	7025-7032	service	_	_	_	_	
54-16	7033-7041	connects	_	_	_	_	
54-17	7042-7044	to	_	_	_	_	
54-18	7045-7046	a	_	_	_	_	
54-19	7047-7055	Postgres	_	_	_	_	
54-20	7056-7064	database	_	_	_	_	
54-21	7064-7065	,	_	_	_	_	
54-22	7066-7070	both	_	_	_	_	
54-23	7071-7075	with	_	_	_	_	
54-24	7076-7079	and	_	_	_	_	
54-25	7080-7087	without	_	_	_	_	
54-26	7088-7095	pooling	_	_	_	_	
54-27	7095-7096	.	_	_	_	_	

#Text=Scaling database performance without connection pooling
#Text=We do not need a connection pooler to connect to a backend service.
55-1	7097-7104	Scaling	_	_	_	_	
55-2	7105-7113	database	_	_	_	_	
55-3	7114-7125	performance	_	_	_	_	
55-4	7126-7133	without	_	_	_	_	
55-5	7134-7144	connection	_	_	_	_	
55-6	7145-7152	pooling	_	_	_	_	
55-7	7153-7155	We	_	_	_	_	
55-8	7156-7158	do	_	_	_	_	
55-9	7159-7162	not	_	_	_	_	
55-10	7163-7167	need	_	_	_	_	
55-11	7168-7169	a	_	_	_	_	
55-12	7170-7180	connection	_	_	_	_	
55-13	7181-7187	pooler	_	_	_	_	
55-14	7188-7190	to	_	_	_	_	
55-15	7191-7198	connect	_	_	_	_	
55-16	7199-7201	to	_	_	_	_	
55-17	7202-7203	a	_	_	_	_	
55-18	7204-7211	backend	_	_	_	_	
55-19	7212-7219	service	_	_	_	_	
55-20	7219-7220	.	_	_	_	_	

#Text=We can connect to a Postgres database directly.
56-1	7221-7223	We	_	_	_	_	
56-2	7224-7227	can	_	_	_	_	
56-3	7228-7235	connect	_	_	_	_	
56-4	7236-7238	to	_	_	_	_	
56-5	7239-7240	a	_	_	_	_	
56-6	7241-7249	Postgres	_	_	_	_	
56-7	7250-7258	database	_	_	_	_	
56-8	7259-7267	directly	_	_	_	_	
56-9	7267-7268	.	_	_	_	_	

#Text=To examine how long it takes to execute concurrent connections to a database without a connection pooler, we will use pgbench to benchmark connections to the Postgres database.
57-1	7269-7271	To	_	_	_	_	
57-2	7272-7279	examine	_	_	_	_	
57-3	7280-7283	how	_	_	_	_	
57-4	7284-7288	long	_	_	_	_	
57-5	7289-7291	it	_	_	_	_	
57-6	7292-7297	takes	_	_	_	_	
57-7	7298-7300	to	_	_	_	_	
57-8	7301-7308	execute	_	_	_	_	
57-9	7309-7319	concurrent	_	_	_	_	
57-10	7320-7331	connections	_	_	_	_	
57-11	7332-7334	to	_	_	_	_	
57-12	7335-7336	a	_	_	_	_	
57-13	7337-7345	database	_	_	_	_	
57-14	7346-7353	without	_	_	_	_	
57-15	7354-7355	a	_	_	_	_	
57-16	7356-7366	connection	_	_	_	_	
57-17	7367-7373	pooler	_	_	_	_	
57-18	7373-7374	,	_	_	_	_	
57-19	7375-7377	we	_	_	_	_	
57-20	7378-7382	will	_	_	_	_	
57-21	7383-7386	use	_	_	_	_	
57-22	7387-7394	pgbench	_	_	_	_	
57-23	7395-7397	to	_	_	_	_	
57-24	7398-7407	benchmark	_	_	_	_	
57-25	7408-7419	connections	_	_	_	_	
57-26	7420-7422	to	_	_	_	_	
57-27	7423-7426	the	_	_	_	_	
57-28	7427-7435	Postgres	_	_	_	_	
57-29	7436-7444	database	_	_	_	_	
57-30	7444-7445	.	_	_	_	_	

#Text=Pgbench is based on TPC-B.
58-1	7446-7453	Pgbench	_	_	_	_	
58-2	7454-7456	is	_	_	_	_	
58-3	7457-7462	based	_	_	_	_	
58-4	7463-7465	on	_	_	_	_	
58-5	7466-7471	TPC-B	_	_	_	_	
58-6	7471-7472	.	_	_	_	_	

#Text=TPC-B measures throughput in terms of how many transactions per second a system can perform.
59-1	7473-7478	TPC-B	_	_	_	_	
59-2	7479-7487	measures	_	_	_	_	
59-3	7488-7498	throughput	_	_	_	_	
59-4	7499-7501	in	_	_	_	_	
59-5	7502-7507	terms	_	_	_	_	
59-6	7508-7510	of	_	_	_	_	
59-7	7511-7514	how	_	_	_	_	
59-8	7515-7519	many	_	_	_	_	
59-9	7520-7532	transactions	_	_	_	_	
59-10	7533-7536	per	_	_	_	_	
59-11	7537-7543	second	_	_	_	_	
59-12	7544-7545	a	_	_	_	_	
59-13	7546-7552	system	_	_	_	_	
59-14	7553-7556	can	_	_	_	_	
59-15	7557-7564	perform	_	_	_	_	
59-16	7564-7565	.	_	_	_	_	

#Text=Pgbench executes five SELECT, INSERT, and UPDATE commands per transaction.
60-1	7566-7573	Pgbench	_	_	_	_	
60-2	7574-7582	executes	_	_	_	_	
60-3	7583-7587	five	_	_	_	_	
60-4	7588-7594	SELECT	_	_	_	_	
60-5	7594-7595	,	_	_	_	_	
60-6	7596-7602	INSERT	_	_	_	_	
60-7	7602-7603	,	_	_	_	_	
60-8	7604-7607	and	_	_	_	_	
60-9	7608-7614	UPDATE	_	_	_	_	
60-10	7615-7623	commands	_	_	_	_	
60-11	7624-7627	per	_	_	_	_	
60-12	7628-7639	transaction	_	_	_	_	
60-13	7639-7640	.	_	_	_	_	

#Text=Based on TPC-B-like transactions, pgbench runs the same sequence of SQL commands repeatedly in multiple concurrent database sessions and calculates the average transaction rate.
61-1	7641-7646	Based	_	_	_	_	
61-2	7647-7649	on	_	_	_	_	
61-3	7650-7660	TPC-B-like	_	_	_	_	
61-4	7661-7673	transactions	_	_	_	_	
61-5	7673-7674	,	_	_	_	_	
61-6	7675-7682	pgbench	_	_	_	_	
61-7	7683-7687	runs	_	_	_	_	
61-8	7688-7691	the	_	_	_	_	
61-9	7692-7696	same	_	_	_	_	
61-10	7697-7705	sequence	_	_	_	_	
61-11	7706-7708	of	_	_	_	_	
61-12	7709-7712	SQL	_	_	_	_	
61-13	7713-7721	commands	_	_	_	_	
61-14	7722-7732	repeatedly	_	_	_	_	
61-15	7733-7735	in	_	_	_	_	
61-16	7736-7744	multiple	_	_	_	_	
61-17	7745-7755	concurrent	_	_	_	_	
61-18	7756-7764	database	_	_	_	_	
61-19	7765-7773	sessions	_	_	_	_	
61-20	7774-7777	and	_	_	_	_	
61-21	7778-7788	calculates	_	_	_	_	
61-22	7789-7792	the	_	_	_	_	
61-23	7793-7800	average	_	_	_	_	
61-24	7801-7812	transaction	_	_	_	_	
61-25	7813-7817	rate	_	_	_	_	
61-26	7817-7818	.	_	_	_	_	

#Text=Before we run pgbench, we need to initialize it with the following command to create the pgbench_history, pgbench_branches, pgbench_tellers, and pgbench_accounts tables.
62-1	7819-7825	Before	_	_	_	_	
62-2	7826-7828	we	_	_	_	_	
62-3	7829-7832	run	_	_	_	_	
62-4	7833-7840	pgbench	_	_	_	_	
62-5	7840-7841	,	_	_	_	_	
62-6	7842-7844	we	_	_	_	_	
62-7	7845-7849	need	_	_	_	_	
62-8	7850-7852	to	_	_	_	_	
62-9	7853-7863	initialize	_	_	_	_	
62-10	7864-7866	it	_	_	_	_	
62-11	7867-7871	with	_	_	_	_	
62-12	7872-7875	the	_	_	_	_	
62-13	7876-7885	following	_	_	_	_	
62-14	7886-7893	command	_	_	_	_	
62-15	7894-7896	to	_	_	_	_	
62-16	7897-7903	create	_	_	_	_	
62-17	7904-7907	the	_	_	_	_	
62-18	7908-7923	pgbench_history	_	_	_	_	
62-19	7923-7924	,	_	_	_	_	
62-20	7925-7941	pgbench_branches	_	_	_	_	
62-21	7941-7942	,	_	_	_	_	
62-22	7943-7958	pgbench_tellers	_	_	_	_	
62-23	7958-7959	,	_	_	_	_	
62-24	7960-7963	and	_	_	_	_	
62-25	7964-7980	pgbench_accounts	_	_	_	_	
62-26	7981-7987	tables	_	_	_	_	
62-27	7987-7988	.	_	_	_	_	

#Text=Pgbench uses the following tables to run transactions for benchmarking.
#Text=pgbench  -i  -s 50  database_name
#Text=Afterward, I executed the command below to test the database with 150 clients
#Text=pgbench  -c 10  -j 2  -t  10000  database_name
#Text=As you see, in our initial baseline test, I instructed pgbench to execute with ten different client sessions.
63-1	7989-7996	Pgbench	_	_	_	_	
63-2	7997-8001	uses	_	_	_	_	
63-3	8002-8005	the	_	_	_	_	
63-4	8006-8015	following	_	_	_	_	
63-5	8016-8022	tables	_	_	_	_	
63-6	8023-8025	to	_	_	_	_	
63-7	8026-8029	run	_	_	_	_	
63-8	8030-8042	transactions	_	_	_	_	
63-9	8043-8046	for	_	_	_	_	
63-10	8047-8059	benchmarking	_	_	_	_	
63-11	8059-8060	.	_	_	_	_	
63-12	8061-8068	pgbench	_	_	_	_	
63-13	8068-8069	 	_	_	_	_	
63-14	8070-8071	-	_	_	_	_	
63-15	8071-8072	i	_	_	_	_	
63-16	8072-8073	 	_	_	_	_	
63-17	8074-8075	-	_	_	_	_	
63-18	8075-8076	s	_	_	_	_	
63-19	8077-8079	50	_	_	_	_	
63-20	8079-8080	 	_	_	_	_	
63-21	8081-8094	database_name	_	_	_	_	
63-22	8095-8104	Afterward	_	_	_	_	
63-23	8104-8105	,	_	_	_	_	
63-24	8106-8107	I	_	_	_	_	
63-25	8108-8116	executed	_	_	_	_	
63-26	8117-8120	the	_	_	_	_	
63-27	8121-8128	command	_	_	_	_	
63-28	8129-8134	below	_	_	_	_	
63-29	8135-8137	to	_	_	_	_	
63-30	8138-8142	test	_	_	_	_	
63-31	8143-8146	the	_	_	_	_	
63-32	8147-8155	database	_	_	_	_	
63-33	8156-8160	with	_	_	_	_	
63-34	8161-8164	150	_	_	_	_	
63-35	8165-8172	clients	_	_	_	_	
63-36	8173-8180	pgbench	_	_	_	_	
63-37	8180-8181	 	_	_	_	_	
63-38	8182-8183	-	_	_	_	_	
63-39	8183-8184	c	_	_	_	_	
63-40	8185-8187	10	_	_	_	_	
63-41	8187-8188	 	_	_	_	_	
63-42	8189-8190	-	_	_	_	_	
63-43	8190-8191	j	_	_	_	_	
63-44	8192-8193	2	_	_	_	_	
63-45	8193-8194	 	_	_	_	_	
63-46	8195-8196	-	_	_	_	_	
63-47	8196-8197	t	_	_	_	_	
63-48	8197-8198	 	_	_	_	_	
63-49	8199-8204	10000	_	_	_	_	
63-50	8204-8205	 	_	_	_	_	
63-51	8206-8219	database_name	_	_	_	_	
63-52	8220-8222	As	_	_	_	_	
63-53	8223-8226	you	_	_	_	_	
63-54	8227-8230	see	_	_	_	_	
63-55	8230-8231	,	_	_	_	_	
63-56	8232-8234	in	_	_	_	_	
63-57	8235-8238	our	_	_	_	_	
63-58	8239-8246	initial	_	_	_	_	
63-59	8247-8255	baseline	_	_	_	_	
63-60	8256-8260	test	_	_	_	_	
63-61	8260-8261	,	_	_	_	_	
63-62	8262-8263	I	_	_	_	_	
63-63	8264-8274	instructed	_	_	_	_	
63-64	8275-8282	pgbench	_	_	_	_	
63-65	8283-8285	to	_	_	_	_	
63-66	8286-8293	execute	_	_	_	_	
63-67	8294-8298	with	_	_	_	_	
63-68	8299-8302	ten	_	_	_	_	
63-69	8303-8312	different	_	_	_	_	
63-70	8313-8319	client	_	_	_	_	
63-71	8320-8328	sessions	_	_	_	_	
63-72	8328-8329	.	_	_	_	_	

#Text=Each client session will execute 10,000 transactions.
64-1	8330-8334	Each	_	_	_	_	
64-2	8335-8341	client	_	_	_	_	
64-3	8342-8349	session	_	_	_	_	
64-4	8350-8354	will	_	_	_	_	
64-5	8355-8362	execute	_	_	_	_	
64-6	8363-8369	10,000	_	_	_	_	
64-7	8370-8382	transactions	_	_	_	_	
64-8	8382-8383	.	_	_	_	_	

#Text=From these results, it seems our initial baseline test is 486 transactions per second.
65-1	8384-8388	From	_	_	_	_	
65-2	8389-8394	these	_	_	_	_	
65-3	8395-8402	results	_	_	_	_	
65-4	8402-8403	,	_	_	_	_	
65-5	8404-8406	it	_	_	_	_	
65-6	8407-8412	seems	_	_	_	_	
65-7	8413-8416	our	_	_	_	_	
65-8	8417-8424	initial	_	_	_	_	
65-9	8425-8433	baseline	_	_	_	_	
65-10	8434-8438	test	_	_	_	_	
65-11	8439-8441	is	_	_	_	_	
65-12	8442-8445	486	_	_	_	_	
65-13	8446-8458	transactions	_	_	_	_	
65-14	8459-8462	per	_	_	_	_	
65-15	8463-8469	second	_	_	_	_	
65-16	8469-8470	.	_	_	_	_	

#Text=Let’s see how we can make use of connection poolers like pgbouncer and pgpool to increase transaction throughput and avoid a ‘Sorry!
66-1	8471-8474	Let	_	_	_	_	
66-2	8474-8475	’	_	_	_	_	
66-3	8475-8476	s	_	_	_	_	
66-4	8477-8480	see	_	_	_	_	
66-5	8481-8484	how	_	_	_	_	
66-6	8485-8487	we	_	_	_	_	
66-7	8488-8491	can	_	_	_	_	
66-8	8492-8496	make	_	_	_	_	
66-9	8497-8500	use	_	_	_	_	
66-10	8501-8503	of	_	_	_	_	
66-11	8504-8514	connection	_	_	_	_	
66-12	8515-8522	poolers	_	_	_	_	
66-13	8523-8527	like	_	_	_	_	
66-14	8528-8537	pgbouncer	_	_	_	_	
66-15	8538-8541	and	_	_	_	_	
66-16	8542-8548	pgpool	_	_	_	_	
66-17	8549-8551	to	_	_	_	_	
66-18	8552-8560	increase	_	_	_	_	
66-19	8561-8572	transaction	_	_	_	_	
66-20	8573-8583	throughput	_	_	_	_	
66-21	8584-8587	and	_	_	_	_	
66-22	8588-8593	avoid	_	_	_	_	
66-23	8594-8595	a	_	_	_	_	
66-24	8596-8597	‘	_	_	_	_	
66-25	8597-8602	Sorry	_	_	_	_	
66-26	8602-8603	!	_	_	_	_	

#Text=, too many clients already’ error.
67-1	8603-8604	,	_	_	_	_	
67-2	8605-8608	too	_	_	_	_	
67-3	8609-8613	many	_	_	_	_	
67-4	8614-8621	clients	_	_	_	_	
67-5	8622-8629	already	_	_	_	_	
67-6	8629-8630	’	_	_	_	_	
67-7	8631-8636	error	_	_	_	_	
67-8	8636-8637	.	_	_	_	_	

#Text=Scaling database performance with pgbouncer
#Text=Let’s look at how we can use pgbouncer to increase transaction throughput.
68-1	8638-8645	Scaling	_	_	_	_	
68-2	8646-8654	database	_	_	_	_	
68-3	8655-8666	performance	_	_	_	_	
68-4	8667-8671	with	_	_	_	_	
68-5	8672-8681	pgbouncer	_	_	_	_	
68-6	8682-8685	Let	_	_	_	_	
68-7	8685-8686	’	_	_	_	_	
68-8	8686-8687	s	_	_	_	_	
68-9	8688-8692	look	_	_	_	_	
68-10	8693-8695	at	_	_	_	_	
68-11	8696-8699	how	_	_	_	_	
68-12	8700-8702	we	_	_	_	_	
68-13	8703-8706	can	_	_	_	_	
68-14	8707-8710	use	_	_	_	_	
68-15	8711-8720	pgbouncer	_	_	_	_	
68-16	8721-8723	to	_	_	_	_	
68-17	8724-8732	increase	_	_	_	_	
68-18	8733-8744	transaction	_	_	_	_	
68-19	8745-8755	throughput	_	_	_	_	
68-20	8755-8756	.	_	_	_	_	

#Text=Pgbouncer can be installed on almost all Linux distributions.
69-1	8757-8766	Pgbouncer	_	_	_	_	
69-2	8767-8770	can	_	_	_	_	
69-3	8771-8773	be	_	_	_	_	
69-4	8774-8783	installed	_	_	_	_	
69-5	8784-8786	on	_	_	_	_	
69-6	8787-8793	almost	_	_	_	_	
69-7	8794-8797	all	_	_	_	_	
69-8	8798-8803	Linux	_	_	_	_	
69-9	8804-8817	distributions	_	_	_	_	
69-10	8817-8818	.	_	_	_	_	

#Text=You can check here how to set up pgbouncer.
70-1	8819-8822	You	_	_	_	_	
70-2	8823-8826	can	_	_	_	_	
70-3	8827-8832	check	_	_	_	_	
70-4	8833-8837	here	_	_	_	_	
70-5	8838-8841	how	_	_	_	_	
70-6	8842-8844	to	_	_	_	_	
70-7	8845-8848	set	_	_	_	_	
70-8	8849-8851	up	_	_	_	_	
70-9	8852-8861	pgbouncer	_	_	_	_	
70-10	8861-8862	.	_	_	_	_	

#Text=Alternatively, you can install pgbouncer using package managers like apt-get or yum.
71-1	8863-8876	Alternatively	_	_	_	_	
71-2	8876-8877	,	_	_	_	_	
71-3	8878-8881	you	_	_	_	_	
71-4	8882-8885	can	_	_	_	_	
71-5	8886-8893	install	_	_	_	_	
71-6	8894-8903	pgbouncer	_	_	_	_	
71-7	8904-8909	using	_	_	_	_	
71-8	8910-8917	package	_	_	_	_	
71-9	8918-8926	managers	_	_	_	_	
71-10	8927-8931	like	_	_	_	_	
71-11	8932-8939	apt-get	_	_	_	_	
71-12	8940-8942	or	_	_	_	_	
71-13	8943-8946	yum	_	_	_	_	
71-14	8946-8947	.	_	_	_	_	

#Text=If you find it difficult to authenticate clients with pgbouncer, you can check GitHub on how to do so.
72-1	8948-8950	If	_	_	_	_	
72-2	8951-8954	you	_	_	_	_	
72-3	8955-8959	find	_	_	_	_	
72-4	8960-8962	it	_	_	_	_	
72-5	8963-8972	difficult	_	_	_	_	
72-6	8973-8975	to	_	_	_	_	
72-7	8976-8988	authenticate	_	_	_	_	
72-8	8989-8996	clients	_	_	_	_	
72-9	8997-9001	with	_	_	_	_	
72-10	9002-9011	pgbouncer	_	_	_	_	
72-11	9011-9012	,	_	_	_	_	
72-12	9013-9016	you	_	_	_	_	
72-13	9017-9020	can	_	_	_	_	
72-14	9021-9026	check	_	_	_	_	
72-15	9027-9033	GitHub	_	_	_	_	
72-16	9034-9036	on	_	_	_	_	
72-17	9037-9040	how	_	_	_	_	
72-18	9041-9043	to	_	_	_	_	
72-19	9044-9046	do	_	_	_	_	
72-20	9047-9049	so	_	_	_	_	
72-21	9049-9050	.	_	_	_	_	

#Text=Pgbouncer comes with three types of pooling:
#Text=Session pooling: One of the connections in the pool is assigned to a client until the timeout is reached.  
73-1	9051-9060	Pgbouncer	_	_	_	_	
73-2	9061-9066	comes	_	_	_	_	
73-3	9067-9071	with	_	_	_	_	
73-4	9072-9077	three	_	_	_	_	
73-5	9078-9083	types	_	_	_	_	
73-6	9084-9086	of	_	_	_	_	
73-7	9087-9094	pooling	_	_	_	_	
73-8	9094-9095	:	_	_	_	_	
73-9	9096-9103	Session	_	_	_	_	
73-10	9104-9111	pooling	_	_	_	_	
73-11	9111-9112	:	_	_	_	_	
73-12	9113-9116	One	_	_	_	_	
73-13	9117-9119	of	_	_	_	_	
73-14	9120-9123	the	_	_	_	_	
73-15	9124-9135	connections	_	_	_	_	
73-16	9136-9138	in	_	_	_	_	
73-17	9139-9142	the	_	_	_	_	
73-18	9143-9147	pool	_	_	_	_	
73-19	9148-9150	is	_	_	_	_	
73-20	9151-9159	assigned	_	_	_	_	
73-21	9160-9162	to	_	_	_	_	
73-22	9163-9164	a	_	_	_	_	
73-23	9165-9171	client	_	_	_	_	
73-24	9172-9177	until	_	_	_	_	
73-25	9178-9181	the	_	_	_	_	
73-26	9182-9189	timeout	_	_	_	_	
73-27	9190-9192	is	_	_	_	_	
73-28	9193-9200	reached	_	_	_	_	
73-29	9200-9201	.	_	_	_	_	
73-30	9201-9203	  	_	_	_	_	

#Text=Transaction pooling: Similar to session polling, it gets a connection from the pool.
74-1	9203-9214	Transaction	_	_	_	_	
74-2	9215-9222	pooling	_	_	_	_	
74-3	9222-9223	:	_	_	_	_	
74-4	9224-9231	Similar	_	_	_	_	
74-5	9232-9234	to	_	_	_	_	
74-6	9235-9242	session	_	_	_	_	
74-7	9243-9250	polling	_	_	_	_	
74-8	9250-9251	,	_	_	_	_	
74-9	9252-9254	it	_	_	_	_	
74-10	9255-9259	gets	_	_	_	_	
74-11	9260-9261	a	_	_	_	_	
74-12	9262-9272	connection	_	_	_	_	
74-13	9273-9277	from	_	_	_	_	
74-14	9278-9281	the	_	_	_	_	
74-15	9282-9286	pool	_	_	_	_	
74-16	9286-9287	.	_	_	_	_	

#Text=It keeps it until the transaction is done.
75-1	9288-9290	It	_	_	_	_	
75-2	9291-9296	keeps	_	_	_	_	
75-3	9297-9299	it	_	_	_	_	
75-4	9300-9305	until	_	_	_	_	
75-5	9306-9309	the	_	_	_	_	
75-6	9310-9321	transaction	_	_	_	_	
75-7	9322-9324	is	_	_	_	_	
75-8	9325-9329	done	_	_	_	_	
75-9	9329-9330	.	_	_	_	_	

#Text=If the same client wants to run another transaction, it has to wait until it gets another transaction assigned to it. 
76-1	9331-9333	If	_	_	_	_	
76-2	9334-9337	the	_	_	_	_	
76-3	9338-9342	same	_	_	_	_	
76-4	9343-9349	client	_	_	_	_	
76-5	9350-9355	wants	_	_	_	_	
76-6	9356-9358	to	_	_	_	_	
76-7	9359-9362	run	_	_	_	_	
76-8	9363-9370	another	_	_	_	_	
76-9	9371-9382	transaction	_	_	_	_	
76-10	9382-9383	,	_	_	_	_	
76-11	9384-9386	it	_	_	_	_	
76-12	9387-9390	has	_	_	_	_	
76-13	9391-9393	to	_	_	_	_	
76-14	9394-9398	wait	_	_	_	_	
76-15	9399-9404	until	_	_	_	_	
76-16	9405-9407	it	_	_	_	_	
76-17	9408-9412	gets	_	_	_	_	
76-18	9413-9420	another	_	_	_	_	
76-19	9421-9432	transaction	_	_	_	_	
76-20	9433-9441	assigned	_	_	_	_	
76-21	9442-9444	to	_	_	_	_	
76-22	9445-9447	it	_	_	_	_	
76-23	9447-9448	.	_	_	_	_	
76-24	9448-9449	 	_	_	_	_	

#Text=Statement pooling: Connection is returned to the pool as soon as the first query is completed.
77-1	9449-9458	Statement	_	_	_	_	
77-2	9459-9466	pooling	_	_	_	_	
77-3	9466-9467	:	_	_	_	_	
77-4	9468-9478	Connection	_	_	_	_	
77-5	9479-9481	is	_	_	_	_	
77-6	9482-9490	returned	_	_	_	_	
77-7	9491-9493	to	_	_	_	_	
77-8	9494-9497	the	_	_	_	_	
77-9	9498-9502	pool	_	_	_	_	
77-10	9503-9505	as	_	_	_	_	
77-11	9506-9510	soon	_	_	_	_	
77-12	9511-9513	as	_	_	_	_	
77-13	9514-9517	the	_	_	_	_	
77-14	9518-9523	first	_	_	_	_	
77-15	9524-9529	query	_	_	_	_	
77-16	9530-9532	is	_	_	_	_	
77-17	9533-9542	completed	_	_	_	_	
77-18	9542-9543	.	_	_	_	_	

#Text=We will make use of the transaction pooling mode.
78-1	9544-9546	We	_	_	_	_	
78-2	9547-9551	will	_	_	_	_	
78-3	9552-9556	make	_	_	_	_	
78-4	9557-9560	use	_	_	_	_	
78-5	9561-9563	of	_	_	_	_	
78-6	9564-9567	the	_	_	_	_	
78-7	9568-9579	transaction	_	_	_	_	
78-8	9580-9587	pooling	_	_	_	_	
78-9	9588-9592	mode	_	_	_	_	
78-10	9592-9593	.	_	_	_	_	

#Text=Inside the pgbouncer.ini file, I modified the following parameter:
#Text=max_client_conn = 100
#Text=The max_client_conn parameter defines how many client connections to pgbouncer (instead of Postgres) are allowed.
#Text=default_pool_size = 25
#Text=The default_pool_size parameter defines how many server connections to allow per user/database pair.
#Text=reserve_pool_size = 5
#Text=The reserve_pool_size parameter defines how many additional connections are allowed to the pool.
79-1	9594-9600	Inside	_	_	_	_	
79-2	9601-9604	the	_	_	_	_	
79-3	9605-9618	pgbouncer.ini	_	_	_	_	
79-4	9619-9623	file	_	_	_	_	
79-5	9623-9624	,	_	_	_	_	
79-6	9625-9626	I	_	_	_	_	
79-7	9627-9635	modified	_	_	_	_	
79-8	9636-9639	the	_	_	_	_	
79-9	9640-9649	following	_	_	_	_	
79-10	9650-9659	parameter	_	_	_	_	
79-11	9659-9660	:	_	_	_	_	
79-12	9661-9676	max_client_conn	*	parameter	_	_	
79-13	9677-9678	=	_	_	_	_	
79-14	9679-9682	100	*	value	Associated-With	79-12	
79-15	9683-9686	The	_	_	_	_	
79-16	9687-9702	max_client_conn	_	_	_	_	
79-17	9703-9712	parameter	_	_	_	_	
79-18	9713-9720	defines	_	_	_	_	
79-19	9721-9724	how	_	_	_	_	
79-20	9725-9729	many	_	_	_	_	
79-21	9730-9736	client	_	_	_	_	
79-22	9737-9748	connections	_	_	_	_	
79-23	9749-9751	to	_	_	_	_	
79-24	9752-9761	pgbouncer	_	_	_	_	
79-25	9762-9763	(	_	_	_	_	
79-26	9763-9770	instead	_	_	_	_	
79-27	9771-9773	of	_	_	_	_	
79-28	9774-9782	Postgres	_	_	_	_	
79-29	9782-9783	)	_	_	_	_	
79-30	9784-9787	are	_	_	_	_	
79-31	9788-9795	allowed	_	_	_	_	
79-32	9795-9796	.	_	_	_	_	
79-33	9797-9814	default_pool_size	*	parameter	_	_	
79-34	9815-9816	=	_	_	_	_	
79-35	9817-9819	25	*	value	Associated-With	79-33	
79-36	9820-9823	The	_	_	_	_	
79-37	9824-9841	default_pool_size	_	_	_	_	
79-38	9842-9851	parameter	_	_	_	_	
79-39	9852-9859	defines	_	_	_	_	
79-40	9860-9863	how	_	_	_	_	
79-41	9864-9868	many	_	_	_	_	
79-42	9869-9875	server	_	_	_	_	
79-43	9876-9887	connections	_	_	_	_	
79-44	9888-9890	to	_	_	_	_	
79-45	9891-9896	allow	_	_	_	_	
79-46	9897-9900	per	_	_	_	_	
79-47	9901-9905	user	_	_	_	_	
79-48	9905-9906	/	_	_	_	_	
79-49	9906-9914	database	_	_	_	_	
79-50	9915-9919	pair	_	_	_	_	
79-51	9919-9920	.	_	_	_	_	
79-52	9921-9938	reserve_pool_size	*	parameter	_	_	
79-53	9939-9940	=	_	_	_	_	
79-54	9941-9942	5	*	value	Associated-With	79-52	
79-55	9943-9946	The	_	_	_	_	
79-56	9947-9964	reserve_pool_size	_	_	_	_	
79-57	9965-9974	parameter	_	_	_	_	
79-58	9975-9982	defines	_	_	_	_	
79-59	9983-9986	how	_	_	_	_	
79-60	9987-9991	many	_	_	_	_	
79-61	9992-10002	additional	_	_	_	_	
79-62	10003-10014	connections	_	_	_	_	
79-63	10015-10018	are	_	_	_	_	
79-64	10019-10026	allowed	_	_	_	_	
79-65	10027-10029	to	_	_	_	_	
79-66	10030-10033	the	_	_	_	_	
79-67	10034-10038	pool	_	_	_	_	
79-68	10038-10039	.	_	_	_	_	

#Text=As in the previous test I executed pgbench with ten different client sessions.
80-1	10040-10042	As	_	_	_	_	
80-2	10043-10045	in	_	_	_	_	
80-3	10046-10049	the	_	_	_	_	
80-4	10050-10058	previous	_	_	_	_	
80-5	10059-10063	test	_	_	_	_	
80-6	10064-10065	I	_	_	_	_	
80-7	10066-10074	executed	_	_	_	_	
80-8	10075-10082	pgbench	_	_	_	_	
80-9	10083-10087	with	_	_	_	_	
80-10	10088-10091	ten	_	_	_	_	
80-11	10092-10101	different	_	_	_	_	
80-12	10102-10108	client	_	_	_	_	
80-13	10109-10117	sessions	_	_	_	_	
80-14	10117-10118	.	_	_	_	_	

#Text=Each client executes 1000 transactions as shown below.
#Text=pgbench  -c 10  -p -j 2  -t 1000 database_name
#Text=As you see, transaction throughput increased from 486 transactions per second to 566 transactions per second.
81-1	10119-10123	Each	_	_	_	_	
81-2	10124-10130	client	_	_	_	_	
81-3	10131-10139	executes	_	_	_	_	
81-4	10140-10144	1000	_	_	_	_	
81-5	10145-10157	transactions	_	_	_	_	
81-6	10158-10160	as	_	_	_	_	
81-7	10161-10166	shown	_	_	_	_	
81-8	10167-10172	below	_	_	_	_	
81-9	10172-10173	.	_	_	_	_	
81-10	10174-10181	pgbench	_	_	_	_	
81-11	10181-10182	 	_	_	_	_	
81-12	10183-10184	-	_	_	_	_	
81-13	10184-10185	c	_	_	_	_	
81-14	10186-10188	10	_	_	_	_	
81-15	10188-10189	 	_	_	_	_	
81-16	10190-10191	-	_	_	_	_	
81-17	10191-10192	p	_	_	_	_	
81-18	10193-10194	-	_	_	_	_	
81-19	10194-10195	j	_	_	_	_	
81-20	10196-10197	2	_	_	_	_	
81-21	10197-10198	 	_	_	_	_	
81-22	10199-10200	-	_	_	_	_	
81-23	10200-10201	t	_	_	_	_	
81-24	10202-10206	1000	_	_	_	_	
81-25	10207-10220	database_name	_	_	_	_	
81-26	10221-10223	As	_	_	_	_	
81-27	10224-10227	you	_	_	_	_	
81-28	10228-10231	see	_	_	_	_	
81-29	10231-10232	,	_	_	_	_	
81-30	10233-10244	transaction	_	_	_	_	
81-31	10245-10255	throughput	_	_	_	_	
81-32	10256-10265	increased	_	_	_	_	
81-33	10266-10270	from	_	_	_	_	
81-34	10271-10274	486	_	_	_	_	
81-35	10275-10287	transactions	_	_	_	_	
81-36	10288-10291	per	_	_	_	_	
81-37	10292-10298	second	_	_	_	_	
81-38	10299-10301	to	_	_	_	_	
81-39	10302-10305	566	_	_	_	_	
81-40	10306-10318	transactions	_	_	_	_	
81-41	10319-10322	per	_	_	_	_	
81-42	10323-10329	second	_	_	_	_	
81-43	10329-10330	.	_	_	_	_	

#Text=With the help of pgbouncer, transaction throughput improved by approximately 60%.
82-1	10331-10335	With	_	_	_	_	
82-2	10336-10339	the	_	_	_	_	
82-3	10340-10344	help	_	_	_	_	
82-4	10345-10347	of	_	_	_	_	
82-5	10348-10357	pgbouncer	_	_	_	_	
82-6	10357-10358	,	_	_	_	_	
82-7	10359-10370	transaction	_	_	_	_	
82-8	10371-10381	throughput	_	_	_	_	
82-9	10382-10390	improved	_	_	_	_	
82-10	10391-10393	by	_	_	_	_	
82-11	10394-10407	approximately	_	_	_	_	
82-12	10408-10411	60%	_	_	_	_	
82-13	10411-10412	.	_	_	_	_	

#Text=Now let’s see how we can increase transaction throughput with pgpool-II since it comes with connection pooling features.
83-1	10413-10416	Now	_	_	_	_	
83-2	10417-10420	let	_	_	_	_	
83-3	10420-10421	’	_	_	_	_	
83-4	10421-10422	s	_	_	_	_	
83-5	10423-10426	see	_	_	_	_	
83-6	10427-10430	how	_	_	_	_	
83-7	10431-10433	we	_	_	_	_	
83-8	10434-10437	can	_	_	_	_	
83-9	10438-10446	increase	_	_	_	_	
83-10	10447-10458	transaction	_	_	_	_	
83-11	10459-10469	throughput	_	_	_	_	
83-12	10470-10474	with	_	_	_	_	
83-13	10475-10484	pgpool-II	_	_	_	_	
83-14	10485-10490	since	_	_	_	_	
83-15	10491-10493	it	_	_	_	_	
83-16	10494-10499	comes	_	_	_	_	
83-17	10500-10504	with	_	_	_	_	
83-18	10505-10515	connection	_	_	_	_	
83-19	10516-10523	pooling	_	_	_	_	
83-20	10524-10532	features	_	_	_	_	
83-21	10532-10533	.	_	_	_	_	

#Text=Unlike pgbouncer, pgpool-II offers features beyond connection pooling.
84-1	10534-10540	Unlike	_	_	_	_	
84-2	10541-10550	pgbouncer	_	_	_	_	
84-3	10550-10551	,	_	_	_	_	
84-4	10552-10561	pgpool-II	_	_	_	_	
84-5	10562-10568	offers	_	_	_	_	
84-6	10569-10577	features	_	_	_	_	
84-7	10578-10584	beyond	_	_	_	_	
84-8	10585-10595	connection	_	_	_	_	
84-9	10596-10603	pooling	_	_	_	_	
84-10	10603-10604	.	_	_	_	_	

#Text=The documentation provides detailed information about pgpool-II features and how to set it up from source or via a package manager
#Text=I changed the following parameters in the pgpool.conf file to make it route clients connections from pgpool2 to Postgres database server.
#Text=connection_cache  = on
#Text=listen_addresses  = ‘postgres_database_name’’
#Text=port  = 5432
#Text=Setting the connection_cache parameter to on activates pgpool2 pooling capability.
85-1	10605-10608	The	_	_	_	_	
85-2	10609-10622	documentation	_	_	_	_	
85-3	10623-10631	provides	_	_	_	_	
85-4	10632-10640	detailed	_	_	_	_	
85-5	10641-10652	information	_	_	_	_	
85-6	10653-10658	about	_	_	_	_	
85-7	10659-10668	pgpool-II	_	_	_	_	
85-8	10669-10677	features	_	_	_	_	
85-9	10678-10681	and	_	_	_	_	
85-10	10682-10685	how	_	_	_	_	
85-11	10686-10688	to	_	_	_	_	
85-12	10689-10692	set	_	_	_	_	
85-13	10693-10695	it	_	_	_	_	
85-14	10696-10698	up	_	_	_	_	
85-15	10699-10703	from	_	_	_	_	
85-16	10704-10710	source	_	_	_	_	
85-17	10711-10713	or	_	_	_	_	
85-18	10714-10717	via	_	_	_	_	
85-19	10718-10719	a	_	_	_	_	
85-20	10720-10727	package	_	_	_	_	
85-21	10728-10735	manager	_	_	_	_	
85-22	10736-10737	I	_	_	_	_	
85-23	10738-10745	changed	_	_	_	_	
85-24	10746-10749	the	_	_	_	_	
85-25	10750-10759	following	_	_	_	_	
85-26	10760-10770	parameters	_	_	_	_	
85-27	10771-10773	in	_	_	_	_	
85-28	10774-10777	the	_	_	_	_	
85-29	10778-10789	pgpool.conf	_	_	_	_	
85-30	10790-10794	file	_	_	_	_	
85-31	10795-10797	to	_	_	_	_	
85-32	10798-10802	make	_	_	_	_	
85-33	10803-10805	it	_	_	_	_	
85-34	10806-10811	route	_	_	_	_	
85-35	10812-10819	clients	_	_	_	_	
85-36	10820-10831	connections	_	_	_	_	
85-37	10832-10836	from	_	_	_	_	
85-38	10837-10844	pgpool2	_	_	_	_	
85-39	10845-10847	to	_	_	_	_	
85-40	10848-10856	Postgres	_	_	_	_	
85-41	10857-10865	database	_	_	_	_	
85-42	10866-10872	server	_	_	_	_	
85-43	10872-10873	.	_	_	_	_	
85-44	10874-10890	connection_cache	*	parameter	_	_	
85-45	10890-10891	 	_	_	_	_	
85-46	10892-10893	=	_	_	_	_	
85-47	10894-10896	on	*	value	Associated-With	85-44	
85-48	10897-10913	listen_addresses	_	_	_	_	
85-49	10913-10914	 	_	_	_	_	
85-50	10915-10916	=	_	_	_	_	
85-51	10917-10918	‘	_	_	_	_	
85-52	10918-10940	postgres_database_name	_	_	_	_	
85-53	10940-10941	’	_	_	_	_	
85-54	10941-10942	’	_	_	_	_	
85-55	10943-10947	port	*	parameter	_	_	
85-56	10947-10948	 	_	_	_	_	
85-57	10949-10950	=	_	_	_	_	
85-58	10951-10955	5432	*	value	Associated-With	85-55	
85-59	10956-10963	Setting	_	_	_	_	
85-60	10964-10967	the	_	_	_	_	
85-61	10968-10984	connection_cache	_	_	_	_	
85-62	10985-10994	parameter	_	_	_	_	
85-63	10995-10997	to	_	_	_	_	
85-64	10998-11000	on	_	_	_	_	
85-65	11001-11010	activates	_	_	_	_	
85-66	11011-11018	pgpool2	_	_	_	_	
85-67	11019-11026	pooling	_	_	_	_	
85-68	11027-11037	capability	_	_	_	_	
85-69	11037-11038	.	_	_	_	_	

#Text=Like the previous test, pgbench executed ten different client sessions.
86-1	11039-11043	Like	_	_	_	_	
86-2	11044-11047	the	_	_	_	_	
86-3	11048-11056	previous	_	_	_	_	
86-4	11057-11061	test	_	_	_	_	
86-5	11061-11062	,	_	_	_	_	
86-6	11063-11070	pgbench	_	_	_	_	
86-7	11071-11079	executed	_	_	_	_	
86-8	11080-11083	ten	_	_	_	_	
86-9	11084-11093	different	_	_	_	_	
86-10	11094-11100	client	_	_	_	_	
86-11	11101-11109	sessions	_	_	_	_	
86-12	11109-11110	.	_	_	_	_	

#Text=Each client executes 1000 transactions to the Postgres database server.
87-1	11111-11115	Each	_	_	_	_	
87-2	11116-11122	client	_	_	_	_	
87-3	11123-11131	executes	_	_	_	_	
87-4	11132-11136	1000	_	_	_	_	
87-5	11137-11149	transactions	_	_	_	_	
87-6	11150-11152	to	_	_	_	_	
87-7	11153-11156	the	_	_	_	_	
87-8	11157-11165	Postgres	_	_	_	_	
87-9	11166-11174	database	_	_	_	_	
87-10	11175-11181	server	_	_	_	_	
87-11	11181-11182	.	_	_	_	_	

#Text=Thus we expect a total of 10,000 transactions from all clients.
#Text=gbench  -p 9999  -c  10  -C  -t 1000  postgres_database
#Text=In the same way we increased transaction throughput with pgbouncer, it seems pgpool2 also increased transaction throughput by 75% as compared to the initial test.
88-1	11183-11187	Thus	_	_	_	_	
88-2	11188-11190	we	_	_	_	_	
88-3	11191-11197	expect	_	_	_	_	
88-4	11198-11199	a	_	_	_	_	
88-5	11200-11205	total	_	_	_	_	
88-6	11206-11208	of	_	_	_	_	
88-7	11209-11215	10,000	_	_	_	_	
88-8	11216-11228	transactions	_	_	_	_	
88-9	11229-11233	from	_	_	_	_	
88-10	11234-11237	all	_	_	_	_	
88-11	11238-11245	clients	_	_	_	_	
88-12	11245-11246	.	_	_	_	_	
88-13	11247-11253	gbench	_	_	_	_	
88-14	11253-11254	 	_	_	_	_	
88-15	11255-11256	-	_	_	_	_	
88-16	11256-11257	p	_	_	_	_	
88-17	11258-11262	9999	_	_	_	_	
88-18	11262-11263	 	_	_	_	_	
88-19	11264-11265	-	_	_	_	_	
88-20	11265-11266	c	_	_	_	_	
88-21	11266-11267	 	_	_	_	_	
88-22	11268-11270	10	_	_	_	_	
88-23	11270-11271	 	_	_	_	_	
88-24	11272-11273	-	_	_	_	_	
88-25	11273-11274	C	_	_	_	_	
88-26	11274-11275	 	_	_	_	_	
88-27	11276-11277	-	_	_	_	_	
88-28	11277-11278	t	_	_	_	_	
88-29	11279-11283	1000	_	_	_	_	
88-30	11283-11284	 	_	_	_	_	
88-31	11285-11302	postgres_database	_	_	_	_	
88-32	11303-11305	In	_	_	_	_	
88-33	11306-11309	the	_	_	_	_	
88-34	11310-11314	same	_	_	_	_	
88-35	11315-11318	way	_	_	_	_	
88-36	11319-11321	we	_	_	_	_	
88-37	11322-11331	increased	_	_	_	_	
88-38	11332-11343	transaction	_	_	_	_	
88-39	11344-11354	throughput	_	_	_	_	
88-40	11355-11359	with	_	_	_	_	
88-41	11360-11369	pgbouncer	_	_	_	_	
88-42	11369-11370	,	_	_	_	_	
88-43	11371-11373	it	_	_	_	_	
88-44	11374-11379	seems	_	_	_	_	
88-45	11380-11387	pgpool2	_	_	_	_	
88-46	11388-11392	also	_	_	_	_	
88-47	11393-11402	increased	_	_	_	_	
88-48	11403-11414	transaction	_	_	_	_	
88-49	11415-11425	throughput	_	_	_	_	
88-50	11426-11428	by	_	_	_	_	
88-51	11429-11432	75%	_	_	_	_	
88-52	11433-11435	as	_	_	_	_	
88-53	11436-11444	compared	_	_	_	_	
88-54	11445-11447	to	_	_	_	_	
88-55	11448-11451	the	_	_	_	_	
88-56	11452-11459	initial	_	_	_	_	
88-57	11460-11464	test	_	_	_	_	
88-58	11464-11465	.	_	_	_	_	

#Text=Pgbouncer implements connection pooling ‘out of the box’ without the need to fine-tune parameters while pgpool2 allows you to fine-tune parameters to enhance connection pooling.
89-1	11466-11475	Pgbouncer	_	_	_	_	
89-2	11476-11486	implements	_	_	_	_	
89-3	11487-11497	connection	_	_	_	_	
89-4	11498-11505	pooling	_	_	_	_	
89-5	11506-11507	‘	_	_	_	_	
89-6	11507-11510	out	_	_	_	_	
89-7	11511-11513	of	_	_	_	_	
89-8	11514-11517	the	_	_	_	_	
89-9	11518-11521	box	_	_	_	_	
89-10	11521-11522	’	_	_	_	_	
89-11	11523-11530	without	_	_	_	_	
89-12	11531-11534	the	_	_	_	_	
89-13	11535-11539	need	_	_	_	_	
89-14	11540-11542	to	_	_	_	_	
89-15	11543-11552	fine-tune	_	_	_	_	
89-16	11553-11563	parameters	_	_	_	_	
89-17	11564-11569	while	_	_	_	_	
89-18	11570-11577	pgpool2	_	_	_	_	
89-19	11578-11584	allows	_	_	_	_	
89-20	11585-11588	you	_	_	_	_	
89-21	11589-11591	to	_	_	_	_	
89-22	11592-11601	fine-tune	_	_	_	_	
89-23	11602-11612	parameters	_	_	_	_	
89-24	11613-11615	to	_	_	_	_	
89-25	11616-11623	enhance	_	_	_	_	
89-26	11624-11634	connection	_	_	_	_	
89-27	11635-11642	pooling	_	_	_	_	
89-28	11642-11643	.	_	_	_	_	

#Text=Choosing a connection pooler: pgpool-II or pgbouncer?
90-1	11644-11652	Choosing	_	_	_	_	
90-2	11653-11654	a	_	_	_	_	
90-3	11655-11665	connection	_	_	_	_	
90-4	11666-11672	pooler	_	_	_	_	
90-5	11672-11673	:	_	_	_	_	
90-6	11674-11683	pgpool-II	_	_	_	_	
90-7	11684-11686	or	_	_	_	_	
90-8	11687-11696	pgbouncer	_	_	_	_	
90-9	11696-11697	?	_	_	_	_	

#Text=There are several factors to consider when choosing a connection pooler to use.
91-1	11698-11703	There	_	_	_	_	
91-2	11704-11707	are	_	_	_	_	
91-3	11708-11715	several	_	_	_	_	
91-4	11716-11723	factors	_	_	_	_	
91-5	11724-11726	to	_	_	_	_	
91-6	11727-11735	consider	_	_	_	_	
91-7	11736-11740	when	_	_	_	_	
91-8	11741-11749	choosing	_	_	_	_	
91-9	11750-11751	a	_	_	_	_	
91-10	11752-11762	connection	_	_	_	_	
91-11	11763-11769	pooler	_	_	_	_	
91-12	11770-11772	to	_	_	_	_	
91-13	11773-11776	use	_	_	_	_	
91-14	11776-11777	.	_	_	_	_	

#Text=Although pgbouncer and pgpool-II are great solutions for connection pooling, each tool has its strengths and weaknesses.
92-1	11778-11786	Although	_	_	_	_	
92-2	11787-11796	pgbouncer	_	_	_	_	
92-3	11797-11800	and	_	_	_	_	
92-4	11801-11810	pgpool-II	_	_	_	_	
92-5	11811-11814	are	_	_	_	_	
92-6	11815-11820	great	_	_	_	_	
92-7	11821-11830	solutions	_	_	_	_	
92-8	11831-11834	for	_	_	_	_	
92-9	11835-11845	connection	_	_	_	_	
92-10	11846-11853	pooling	_	_	_	_	
92-11	11853-11854	,	_	_	_	_	
92-12	11855-11859	each	_	_	_	_	
92-13	11860-11864	tool	_	_	_	_	
92-14	11865-11868	has	_	_	_	_	
92-15	11869-11872	its	_	_	_	_	
92-16	11873-11882	strengths	_	_	_	_	
92-17	11883-11886	and	_	_	_	_	
92-18	11887-11897	weaknesses	_	_	_	_	
92-19	11897-11898	.	_	_	_	_	

#Text=Memory/resource consumption
#Text=If you are interested in a lightweight connection pooler for your backend service, then pgbouncer is the right tool for you.
93-1	11899-11905	Memory	_	_	_	_	
93-2	11905-11906	/	_	_	_	_	
93-3	11906-11914	resource	_	_	_	_	
93-4	11915-11926	consumption	_	_	_	_	
93-5	11927-11929	If	_	_	_	_	
93-6	11930-11933	you	_	_	_	_	
93-7	11934-11937	are	_	_	_	_	
93-8	11938-11948	interested	_	_	_	_	
93-9	11949-11951	in	_	_	_	_	
93-10	11952-11953	a	_	_	_	_	
93-11	11954-11965	lightweight	_	_	_	_	
93-12	11966-11976	connection	_	_	_	_	
93-13	11977-11983	pooler	_	_	_	_	
93-14	11984-11987	for	_	_	_	_	
93-15	11988-11992	your	_	_	_	_	
93-16	11993-12000	backend	_	_	_	_	
93-17	12001-12008	service	_	_	_	_	
93-18	12008-12009	,	_	_	_	_	
93-19	12010-12014	then	_	_	_	_	
93-20	12015-12024	pgbouncer	_	_	_	_	
93-21	12025-12027	is	_	_	_	_	
93-22	12028-12031	the	_	_	_	_	
93-23	12032-12037	right	_	_	_	_	
93-24	12038-12042	tool	_	_	_	_	
93-25	12043-12046	for	_	_	_	_	
93-26	12047-12050	you	_	_	_	_	
93-27	12050-12051	.	_	_	_	_	

#Text=Unlike pgpool-II, which by default allows 32 child processes to be forked, pgbouncer uses only one process.
94-1	12052-12058	Unlike	_	_	_	_	
94-2	12059-12068	pgpool-II	_	_	_	_	
94-3	12068-12069	,	_	_	_	_	
94-4	12070-12075	which	_	_	_	_	
94-5	12076-12078	by	_	_	_	_	
94-6	12079-12086	default	_	_	_	_	
94-7	12087-12093	allows	_	_	_	_	
94-8	12094-12096	32	_	_	_	_	
94-9	12097-12102	child	_	_	_	_	
94-10	12103-12112	processes	_	_	_	_	
94-11	12113-12115	to	_	_	_	_	
94-12	12116-12118	be	_	_	_	_	
94-13	12119-12125	forked	_	_	_	_	
94-14	12125-12126	,	_	_	_	_	
94-15	12127-12136	pgbouncer	_	_	_	_	
94-16	12137-12141	uses	_	_	_	_	
94-17	12142-12146	only	_	_	_	_	
94-18	12147-12150	one	_	_	_	_	
94-19	12151-12158	process	_	_	_	_	
94-20	12158-12159	.	_	_	_	_	

#Text=Thus pgbouncer consumes less memory than pgpool2.
95-1	12160-12164	Thus	_	_	_	_	
95-2	12165-12174	pgbouncer	_	_	_	_	
95-3	12175-12183	consumes	_	_	_	_	
95-4	12184-12188	less	_	_	_	_	
95-5	12189-12195	memory	_	_	_	_	
95-6	12196-12200	than	_	_	_	_	
95-7	12201-12208	pgpool2	_	_	_	_	
95-8	12208-12209	.	_	_	_	_	

#Text=Streaming Replication
#Text=Apart from pooling connections, you can also manage your Postgres cluster with streaming replication using pgpool-II. 
96-1	12210-12219	Streaming	_	_	_	_	
96-2	12220-12231	Replication	_	_	_	_	
96-3	12232-12237	Apart	_	_	_	_	
96-4	12238-12242	from	_	_	_	_	
96-5	12243-12250	pooling	_	_	_	_	
96-6	12251-12262	connections	_	_	_	_	
96-7	12262-12263	,	_	_	_	_	
96-8	12264-12267	you	_	_	_	_	
96-9	12268-12271	can	_	_	_	_	
96-10	12272-12276	also	_	_	_	_	
96-11	12277-12283	manage	_	_	_	_	
96-12	12284-12288	your	_	_	_	_	
96-13	12289-12297	Postgres	_	_	_	_	
96-14	12298-12305	cluster	_	_	_	_	
96-15	12306-12310	with	_	_	_	_	
96-16	12311-12320	streaming	_	_	_	_	
96-17	12321-12332	replication	_	_	_	_	
96-18	12333-12338	using	_	_	_	_	
96-19	12339-12348	pgpool-II	_	_	_	_	
96-20	12348-12349	.	_	_	_	_	
96-21	12349-12350	 	_	_	_	_	

#Text=Streaming replication copies data from a primary node to a secondary node.
97-1	12351-12360	Streaming	_	_	_	_	
97-2	12361-12372	replication	_	_	_	_	
97-3	12373-12379	copies	_	_	_	_	
97-4	12380-12384	data	_	_	_	_	
97-5	12385-12389	from	_	_	_	_	
97-6	12390-12391	a	_	_	_	_	
97-7	12392-12399	primary	_	_	_	_	
97-8	12400-12404	node	_	_	_	_	
97-9	12405-12407	to	_	_	_	_	
97-10	12408-12409	a	_	_	_	_	
97-11	12410-12419	secondary	_	_	_	_	
97-12	12420-12424	node	_	_	_	_	
97-13	12424-12425	.	_	_	_	_	

#Text=Pgpool-II supports Postgres streaming replication, while pgbouncer does not.
98-1	12426-12435	Pgpool-II	_	_	_	_	
98-2	12436-12444	supports	_	_	_	_	
98-3	12445-12453	Postgres	_	_	_	_	
98-4	12454-12463	streaming	_	_	_	_	
98-5	12464-12475	replication	_	_	_	_	
98-6	12475-12476	,	_	_	_	_	
98-7	12477-12482	while	_	_	_	_	
98-8	12483-12492	pgbouncer	_	_	_	_	
98-9	12493-12497	does	_	_	_	_	
98-10	12498-12501	not	_	_	_	_	
98-11	12501-12502	.	_	_	_	_	

#Text=It is the best way to achieve high availability and prevent data loss.
99-1	12503-12505	It	_	_	_	_	
99-2	12506-12508	is	_	_	_	_	
99-3	12509-12512	the	_	_	_	_	
99-4	12513-12517	best	_	_	_	_	
99-5	12518-12521	way	_	_	_	_	
99-6	12522-12524	to	_	_	_	_	
99-7	12525-12532	achieve	_	_	_	_	
99-8	12533-12537	high	_	_	_	_	
99-9	12538-12550	availability	_	_	_	_	
99-10	12551-12554	and	_	_	_	_	
99-11	12555-12562	prevent	_	_	_	_	
99-12	12563-12567	data	_	_	_	_	
99-13	12568-12572	loss	_	_	_	_	
99-14	12572-12573	.	_	_	_	_	

#Text=Centralized password management
#Text=In a production environment where you expect many clients/applications to connect to the database through a connection pooler concurrently, it is necessary to use a centralized password management system to manage clients’ credentials.
100-1	12574-12585	Centralized	_	_	_	_	
100-2	12586-12594	password	_	_	_	_	
100-3	12595-12605	management	_	_	_	_	
100-4	12606-12608	In	_	_	_	_	
100-5	12609-12610	a	_	_	_	_	
100-6	12611-12621	production	_	_	_	_	
100-7	12622-12633	environment	_	_	_	_	
100-8	12634-12639	where	_	_	_	_	
100-9	12640-12643	you	_	_	_	_	
100-10	12644-12650	expect	_	_	_	_	
100-11	12651-12655	many	_	_	_	_	
100-12	12656-12663	clients	_	_	_	_	
100-13	12663-12664	/	_	_	_	_	
100-14	12664-12676	applications	_	_	_	_	
100-15	12677-12679	to	_	_	_	_	
100-16	12680-12687	connect	_	_	_	_	
100-17	12688-12690	to	_	_	_	_	
100-18	12691-12694	the	_	_	_	_	
100-19	12695-12703	database	_	_	_	_	
100-20	12704-12711	through	_	_	_	_	
100-21	12712-12713	a	_	_	_	_	
100-22	12714-12724	connection	_	_	_	_	
100-23	12725-12731	pooler	_	_	_	_	
100-24	12732-12744	concurrently	_	_	_	_	
100-25	12744-12745	,	_	_	_	_	
100-26	12746-12748	it	_	_	_	_	
100-27	12749-12751	is	_	_	_	_	
100-28	12752-12761	necessary	_	_	_	_	
100-29	12762-12764	to	_	_	_	_	
100-30	12765-12768	use	_	_	_	_	
100-31	12769-12770	a	_	_	_	_	
100-32	12771-12782	centralized	_	_	_	_	
100-33	12783-12791	password	_	_	_	_	
100-34	12792-12802	management	_	_	_	_	
100-35	12803-12809	system	_	_	_	_	
100-36	12810-12812	to	_	_	_	_	
100-37	12813-12819	manage	_	_	_	_	
100-38	12820-12827	clients	_	_	_	_	
100-39	12827-12828	’	_	_	_	_	
100-40	12829-12840	credentials	_	_	_	_	
100-41	12840-12841	.	_	_	_	_	

#Text=You can make use of auth_query in pgbouncer to load clients’ credentials from the database instead of storing clients’ credentials in a userlist.txt file and comparing credentials from the connection string against the userlist.txt file.
101-1	12842-12845	You	_	_	_	_	
101-2	12846-12849	can	_	_	_	_	
101-3	12850-12854	make	_	_	_	_	
101-4	12855-12858	use	_	_	_	_	
101-5	12859-12861	of	_	_	_	_	
101-6	12862-12872	auth_query	_	_	_	_	
101-7	12873-12875	in	_	_	_	_	
101-8	12876-12885	pgbouncer	_	_	_	_	
101-9	12886-12888	to	_	_	_	_	
101-10	12889-12893	load	_	_	_	_	
101-11	12894-12901	clients	_	_	_	_	
101-12	12901-12902	’	_	_	_	_	
101-13	12903-12914	credentials	_	_	_	_	
101-14	12915-12919	from	_	_	_	_	
101-15	12920-12923	the	_	_	_	_	
101-16	12924-12932	database	_	_	_	_	
101-17	12933-12940	instead	_	_	_	_	
101-18	12941-12943	of	_	_	_	_	
101-19	12944-12951	storing	_	_	_	_	
101-20	12952-12959	clients	_	_	_	_	
101-21	12959-12960	’	_	_	_	_	
101-22	12961-12972	credentials	_	_	_	_	
101-23	12973-12975	in	_	_	_	_	
101-24	12976-12977	a	_	_	_	_	
101-25	12978-12990	userlist.txt	_	_	_	_	
101-26	12991-12995	file	_	_	_	_	
101-27	12996-12999	and	_	_	_	_	
101-28	13000-13009	comparing	_	_	_	_	
101-29	13010-13021	credentials	_	_	_	_	
101-30	13022-13026	from	_	_	_	_	
101-31	13027-13030	the	_	_	_	_	
101-32	13031-13041	connection	_	_	_	_	
101-33	13042-13048	string	_	_	_	_	
101-34	13049-13056	against	_	_	_	_	
101-35	13057-13060	the	_	_	_	_	
101-36	13061-13073	userlist.txt	_	_	_	_	
101-37	13074-13078	file	_	_	_	_	
101-38	13078-13079	.	_	_	_	_	

#Text=Load balancing and high availability
#Text=Finally, if you want to add load balancing and high availability to your pooled connections, then pgpool2 is the right tool to use. pgpool2 supports Postgres high availability through the in-built watchdog processes.
102-1	13080-13084	Load	_	_	_	_	
102-2	13085-13094	balancing	_	_	_	_	
102-3	13095-13098	and	_	_	_	_	
102-4	13099-13103	high	_	_	_	_	
102-5	13104-13116	availability	_	_	_	_	
102-6	13117-13124	Finally	_	_	_	_	
102-7	13124-13125	,	_	_	_	_	
102-8	13126-13128	if	_	_	_	_	
102-9	13129-13132	you	_	_	_	_	
102-10	13133-13137	want	_	_	_	_	
102-11	13138-13140	to	_	_	_	_	
102-12	13141-13144	add	_	_	_	_	
102-13	13145-13149	load	_	_	_	_	
102-14	13150-13159	balancing	_	_	_	_	
102-15	13160-13163	and	_	_	_	_	
102-16	13164-13168	high	_	_	_	_	
102-17	13169-13181	availability	_	_	_	_	
102-18	13182-13184	to	_	_	_	_	
102-19	13185-13189	your	_	_	_	_	
102-20	13190-13196	pooled	_	_	_	_	
102-21	13197-13208	connections	_	_	_	_	
102-22	13208-13209	,	_	_	_	_	
102-23	13210-13214	then	_	_	_	_	
102-24	13215-13222	pgpool2	_	_	_	_	
102-25	13223-13225	is	_	_	_	_	
102-26	13226-13229	the	_	_	_	_	
102-27	13230-13235	right	_	_	_	_	
102-28	13236-13240	tool	_	_	_	_	
102-29	13241-13243	to	_	_	_	_	
102-30	13244-13247	use	_	_	_	_	
102-31	13247-13248	.	_	_	_	_	
102-32	13249-13256	pgpool2	_	_	_	_	
102-33	13257-13265	supports	_	_	_	_	
102-34	13266-13274	Postgres	_	_	_	_	
102-35	13275-13279	high	_	_	_	_	
102-36	13280-13292	availability	_	_	_	_	
102-37	13293-13300	through	_	_	_	_	
102-38	13301-13304	the	_	_	_	_	
102-39	13305-13313	in-built	_	_	_	_	
102-40	13314-13322	watchdog	_	_	_	_	
102-41	13323-13332	processes	_	_	_	_	
102-42	13332-13333	.	_	_	_	_	

#Text=This pgpool2 sub-process monitors the health of pgpool2 nodes participating in the watchdog cluster as well as coordinating between multiple pgpool2 nodes.
103-1	13334-13338	This	_	_	_	_	
103-2	13339-13346	pgpool2	_	_	_	_	
103-3	13347-13358	sub-process	_	_	_	_	
103-4	13359-13367	monitors	_	_	_	_	
103-5	13368-13371	the	_	_	_	_	
103-6	13372-13378	health	_	_	_	_	
103-7	13379-13381	of	_	_	_	_	
103-8	13382-13389	pgpool2	_	_	_	_	
103-9	13390-13395	nodes	_	_	_	_	
103-10	13396-13409	participating	_	_	_	_	
103-11	13410-13412	in	_	_	_	_	
103-12	13413-13416	the	_	_	_	_	
103-13	13417-13425	watchdog	_	_	_	_	
103-14	13426-13433	cluster	_	_	_	_	
103-15	13434-13436	as	_	_	_	_	
103-16	13437-13441	well	_	_	_	_	
103-17	13442-13444	as	_	_	_	_	
103-18	13445-13457	coordinating	_	_	_	_	
103-19	13458-13465	between	_	_	_	_	
103-20	13466-13474	multiple	_	_	_	_	
103-21	13475-13482	pgpool2	_	_	_	_	
103-22	13483-13488	nodes	_	_	_	_	
103-23	13488-13489	.	_	_	_	_	

#Text=Conclusion
#Text=Database performance can be improved beyond connection pooling.
104-1	13490-13500	Conclusion	_	_	_	_	
104-2	13501-13509	Database	_	_	_	_	
104-3	13510-13521	performance	_	_	_	_	
104-4	13522-13525	can	_	_	_	_	
104-5	13526-13528	be	_	_	_	_	
104-6	13529-13537	improved	_	_	_	_	
104-7	13538-13544	beyond	_	_	_	_	
104-8	13545-13555	connection	_	_	_	_	
104-9	13556-13563	pooling	_	_	_	_	
104-10	13563-13564	.	_	_	_	_	

#Text=Replication, load balancing, and in-memory caching can contribute to efficient database performance.
105-1	13565-13576	Replication	_	_	_	_	
105-2	13576-13577	,	_	_	_	_	
105-3	13578-13582	load	_	_	_	_	
105-4	13583-13592	balancing	_	_	_	_	
105-5	13592-13593	,	_	_	_	_	
105-6	13594-13597	and	_	_	_	_	
105-7	13598-13607	in-memory	_	_	_	_	
105-8	13608-13615	caching	_	_	_	_	
105-9	13616-13619	can	_	_	_	_	
105-10	13620-13630	contribute	_	_	_	_	
105-11	13631-13633	to	_	_	_	_	
105-12	13634-13643	efficient	_	_	_	_	
105-13	13644-13652	database	_	_	_	_	
105-14	13653-13664	performance	_	_	_	_	
105-15	13664-13665	.	_	_	_	_	

#Text=If a web service is designed to make a lot of read and write queries to a database, then you have multiple instances of a Postgres database in place to take care of write queries from clients through a load balancer such as pgpool-II while in-memory caching can be used to optimize read queries.
106-1	13666-13668	If	_	_	_	_	
106-2	13669-13670	a	_	_	_	_	
106-3	13671-13674	web	_	_	_	_	
106-4	13675-13682	service	_	_	_	_	
106-5	13683-13685	is	_	_	_	_	
106-6	13686-13694	designed	_	_	_	_	
106-7	13695-13697	to	_	_	_	_	
106-8	13698-13702	make	_	_	_	_	
106-9	13703-13704	a	_	_	_	_	
106-10	13705-13708	lot	_	_	_	_	
106-11	13709-13711	of	_	_	_	_	
106-12	13712-13716	read	_	_	_	_	
106-13	13717-13720	and	_	_	_	_	
106-14	13721-13726	write	_	_	_	_	
106-15	13727-13734	queries	_	_	_	_	
106-16	13735-13737	to	_	_	_	_	
106-17	13738-13739	a	_	_	_	_	
106-18	13740-13748	database	_	_	_	_	
106-19	13748-13749	,	_	_	_	_	
106-20	13750-13754	then	_	_	_	_	
106-21	13755-13758	you	_	_	_	_	
106-22	13759-13763	have	_	_	_	_	
106-23	13764-13772	multiple	_	_	_	_	
106-24	13773-13782	instances	_	_	_	_	
106-25	13783-13785	of	_	_	_	_	
106-26	13786-13787	a	_	_	_	_	
106-27	13788-13796	Postgres	_	_	_	_	
106-28	13797-13805	database	_	_	_	_	
106-29	13806-13808	in	_	_	_	_	
106-30	13809-13814	place	_	_	_	_	
106-31	13815-13817	to	_	_	_	_	
106-32	13818-13822	take	_	_	_	_	
106-33	13823-13827	care	_	_	_	_	
106-34	13828-13830	of	_	_	_	_	
106-35	13831-13836	write	_	_	_	_	
106-36	13837-13844	queries	_	_	_	_	
106-37	13845-13849	from	_	_	_	_	
106-38	13850-13857	clients	_	_	_	_	
106-39	13858-13865	through	_	_	_	_	
106-40	13866-13867	a	_	_	_	_	
106-41	13868-13872	load	_	_	_	_	
106-42	13873-13881	balancer	_	_	_	_	
106-43	13882-13886	such	_	_	_	_	
106-44	13887-13889	as	_	_	_	_	
106-45	13890-13899	pgpool-II	_	_	_	_	
106-46	13900-13905	while	_	_	_	_	
106-47	13906-13915	in-memory	_	_	_	_	
106-48	13916-13923	caching	_	_	_	_	
106-49	13924-13927	can	_	_	_	_	
106-50	13928-13930	be	_	_	_	_	
106-51	13931-13935	used	_	_	_	_	
106-52	13936-13938	to	_	_	_	_	
106-53	13939-13947	optimize	_	_	_	_	
106-54	13948-13952	read	_	_	_	_	
106-55	13953-13960	queries	_	_	_	_	
106-56	13960-13961	.	_	_	_	_	

#Text=Despite the pgpool-II ability to function as a loader balancer and connection pooler, pgbouncer is the preferred middleware solution for connection pooling because it is easy to set up, not too difficult to manage, and primarily serves as a connection pooler without any other functions.
107-1	13962-13969	Despite	_	_	_	_	
107-2	13970-13973	the	_	_	_	_	
107-3	13974-13983	pgpool-II	_	_	_	_	
107-4	13984-13991	ability	_	_	_	_	
107-5	13992-13994	to	_	_	_	_	
107-6	13995-14003	function	_	_	_	_	
107-7	14004-14006	as	_	_	_	_	
107-8	14007-14008	a	_	_	_	_	
107-9	14009-14015	loader	_	_	_	_	
107-10	14016-14024	balancer	_	_	_	_	
107-11	14025-14028	and	_	_	_	_	
107-12	14029-14039	connection	_	_	_	_	
107-13	14040-14046	pooler	_	_	_	_	
107-14	14046-14047	,	_	_	_	_	
107-15	14048-14057	pgbouncer	_	_	_	_	
107-16	14058-14060	is	_	_	_	_	
107-17	14061-14064	the	_	_	_	_	
107-18	14065-14074	preferred	_	_	_	_	
107-19	14075-14085	middleware	_	_	_	_	
107-20	14086-14094	solution	_	_	_	_	
107-21	14095-14098	for	_	_	_	_	
107-22	14099-14109	connection	_	_	_	_	
107-23	14110-14117	pooling	_	_	_	_	
107-24	14118-14125	because	_	_	_	_	
107-25	14126-14128	it	_	_	_	_	
107-26	14129-14131	is	_	_	_	_	
107-27	14132-14136	easy	_	_	_	_	
107-28	14137-14139	to	_	_	_	_	
107-29	14140-14143	set	_	_	_	_	
107-30	14144-14146	up	_	_	_	_	
107-31	14146-14147	,	_	_	_	_	
107-32	14148-14151	not	_	_	_	_	
107-33	14152-14155	too	_	_	_	_	
107-34	14156-14165	difficult	_	_	_	_	
107-35	14166-14168	to	_	_	_	_	
107-36	14169-14175	manage	_	_	_	_	
107-37	14175-14176	,	_	_	_	_	
107-38	14177-14180	and	_	_	_	_	
107-39	14181-14190	primarily	_	_	_	_	
107-40	14191-14197	serves	_	_	_	_	
107-41	14198-14200	as	_	_	_	_	
107-42	14201-14202	a	_	_	_	_	
107-43	14203-14213	connection	_	_	_	_	
107-44	14214-14220	pooler	_	_	_	_	
107-45	14221-14228	without	_	_	_	_	
107-46	14229-14232	any	_	_	_	_	
107-47	14233-14238	other	_	_	_	_	
107-48	14239-14248	functions	_	_	_	_	
107-49	14248-14249	.	_	_	_	_	

#Text=Tags: connection pooling, databases, pgbouncer, postgreSQL
#Text=The Stack Overflow Podcast is a weekly conversation about working in software development, learning to code, and the art and culture of computer programming.
108-1	14250-14254	Tags	_	_	_	_	
108-2	14254-14255	:	_	_	_	_	
108-3	14256-14266	connection	_	_	_	_	
108-4	14267-14274	pooling	_	_	_	_	
108-5	14274-14275	,	_	_	_	_	
108-6	14276-14285	databases	_	_	_	_	
108-7	14285-14286	,	_	_	_	_	
108-8	14287-14296	pgbouncer	_	_	_	_	
108-9	14296-14297	,	_	_	_	_	
108-10	14298-14308	postgreSQL	_	_	_	_	
108-11	14309-14312	The	_	_	_	_	
108-12	14313-14318	Stack	_	_	_	_	
108-13	14319-14327	Overflow	_	_	_	_	
108-14	14328-14335	Podcast	_	_	_	_	
108-15	14336-14338	is	_	_	_	_	
108-16	14339-14340	a	_	_	_	_	
108-17	14341-14347	weekly	_	_	_	_	
108-18	14348-14360	conversation	_	_	_	_	
108-19	14361-14366	about	_	_	_	_	
108-20	14367-14374	working	_	_	_	_	
108-21	14375-14377	in	_	_	_	_	
108-22	14378-14386	software	_	_	_	_	
108-23	14387-14398	development	_	_	_	_	
108-24	14398-14399	,	_	_	_	_	
108-25	14400-14408	learning	_	_	_	_	
108-26	14409-14411	to	_	_	_	_	
108-27	14412-14416	code	_	_	_	_	
108-28	14416-14417	,	_	_	_	_	
108-29	14418-14421	and	_	_	_	_	
108-30	14422-14425	the	_	_	_	_	
108-31	14426-14429	art	_	_	_	_	
108-32	14430-14433	and	_	_	_	_	
108-33	14434-14441	culture	_	_	_	_	
108-34	14442-14444	of	_	_	_	_	
108-35	14445-14453	computer	_	_	_	_	
108-36	14454-14465	programming	_	_	_	_	
108-37	14465-14466	.	_	_	_	_	

#Text=Related
#Text=newsletter
#Text=October 23, 2020
#Text=The Overflow #44: Machine learning in production
#Text=Welcome to ISSUE #44 of the Overflow!
109-1	14467-14474	Related	_	_	_	_	
109-2	14475-14485	newsletter	_	_	_	_	
109-3	14486-14493	October	_	_	_	_	
109-4	14494-14496	23	_	_	_	_	
109-5	14496-14497	,	_	_	_	_	
109-6	14498-14502	2020	_	_	_	_	
109-7	14503-14506	The	_	_	_	_	
109-8	14507-14515	Overflow	_	_	_	_	
109-9	14516-14519	#44	_	_	_	_	
109-10	14519-14520	:	_	_	_	_	
109-11	14521-14528	Machine	_	_	_	_	
109-12	14529-14537	learning	_	_	_	_	
109-13	14538-14540	in	_	_	_	_	
109-14	14541-14551	production	_	_	_	_	
109-15	14552-14559	Welcome	_	_	_	_	
109-16	14560-14562	to	_	_	_	_	
109-17	14563-14568	ISSUE	_	_	_	_	
109-18	14569-14572	#44	_	_	_	_	
109-19	14573-14575	of	_	_	_	_	
109-20	14576-14579	the	_	_	_	_	
109-21	14580-14588	Overflow	_	_	_	_	
109-22	14588-14589	!	_	_	_	_	

#Text=This newsletter is by developers, for developers, written and curated by the Stack Overflow team and Cassidy Williams at Netlify.
110-1	14590-14594	This	_	_	_	_	
110-2	14595-14605	newsletter	_	_	_	_	
110-3	14606-14608	is	_	_	_	_	
110-4	14609-14611	by	_	_	_	_	
110-5	14612-14622	developers	_	_	_	_	
110-6	14622-14623	,	_	_	_	_	
110-7	14624-14627	for	_	_	_	_	
110-8	14628-14638	developers	_	_	_	_	
110-9	14638-14639	,	_	_	_	_	
110-10	14640-14647	written	_	_	_	_	
110-11	14648-14651	and	_	_	_	_	
110-12	14652-14659	curated	_	_	_	_	
110-13	14660-14662	by	_	_	_	_	
110-14	14663-14666	the	_	_	_	_	
110-15	14667-14672	Stack	_	_	_	_	
110-16	14673-14681	Overflow	_	_	_	_	
110-17	14682-14686	team	_	_	_	_	
110-18	14687-14690	and	_	_	_	_	
110-19	14690-14691	 	_	_	_	_	
110-20	14691-14698	Cassidy	_	_	_	_	
110-21	14699-14707	Williams	_	_	_	_	
110-22	14707-14708	 	_	_	_	_	
110-23	14708-14710	at	_	_	_	_	
110-24	14710-14711	 	_	_	_	_	
110-25	14711-14718	Netlify	_	_	_	_	
110-26	14718-14719	.	_	_	_	_	

#Text=This week, get in the fast lane and start pooling your database connections, make a CPU out of electronic components drawn by hand on paper, and learn to toggle multiple property…
#Text=Medi Madelen Gwosdz
#Text=Content Strategist
#Text=code-for-a-living
#Text=January 14, 2021
#Text=Have the tables turned on NoSQL?
111-1	14720-14724	This	_	_	_	_	
111-2	14725-14729	week	_	_	_	_	
111-3	14729-14730	,	_	_	_	_	
111-4	14731-14734	get	_	_	_	_	
111-5	14735-14737	in	_	_	_	_	
111-6	14738-14741	the	_	_	_	_	
111-7	14742-14746	fast	_	_	_	_	
111-8	14747-14751	lane	_	_	_	_	
111-9	14752-14755	and	_	_	_	_	
111-10	14756-14761	start	_	_	_	_	
111-11	14762-14769	pooling	_	_	_	_	
111-12	14770-14774	your	_	_	_	_	
111-13	14775-14783	database	_	_	_	_	
111-14	14784-14795	connections	_	_	_	_	
111-15	14795-14796	,	_	_	_	_	
111-16	14797-14801	make	_	_	_	_	
111-17	14802-14803	a	_	_	_	_	
111-18	14804-14807	CPU	_	_	_	_	
111-19	14808-14811	out	_	_	_	_	
111-20	14812-14814	of	_	_	_	_	
111-21	14815-14825	electronic	_	_	_	_	
111-22	14826-14836	components	_	_	_	_	
111-23	14837-14842	drawn	_	_	_	_	
111-24	14843-14845	by	_	_	_	_	
111-25	14846-14850	hand	_	_	_	_	
111-26	14851-14853	on	_	_	_	_	
111-27	14854-14859	paper	_	_	_	_	
111-28	14859-14860	,	_	_	_	_	
111-29	14861-14864	and	_	_	_	_	
111-30	14865-14870	learn	_	_	_	_	
111-31	14871-14873	to	_	_	_	_	
111-32	14874-14880	toggle	_	_	_	_	
111-33	14881-14889	multiple	_	_	_	_	
111-34	14890-14898	property	_	_	_	_	
111-35	14898-14899	…	_	_	_	_	
111-36	14900-14904	Medi	_	_	_	_	
111-37	14905-14912	Madelen	_	_	_	_	
111-38	14913-14919	Gwosdz	_	_	_	_	
111-39	14920-14927	Content	_	_	_	_	
111-40	14928-14938	Strategist	_	_	_	_	
111-41	14939-14956	code-for-a-living	_	_	_	_	
111-42	14957-14964	January	_	_	_	_	
111-43	14965-14967	14	_	_	_	_	
111-44	14967-14968	,	_	_	_	_	
111-45	14969-14973	2021	_	_	_	_	
111-46	14974-14978	Have	_	_	_	_	
111-47	14979-14982	the	_	_	_	_	
111-48	14983-14989	tables	_	_	_	_	
111-49	14990-14996	turned	_	_	_	_	
111-50	14997-14999	on	_	_	_	_	
111-51	15000-15005	NoSQL	_	_	_	_	
111-52	15005-15006	?	_	_	_	_	

#Text=NoSQL was the next big thing in system architecture in 2011, but overall interest in it has plateaued recently.
112-1	15007-15012	NoSQL	_	_	_	_	
112-2	15013-15016	was	_	_	_	_	
112-3	15017-15020	the	_	_	_	_	
112-4	15021-15025	next	_	_	_	_	
112-5	15026-15029	big	_	_	_	_	
112-6	15030-15035	thing	_	_	_	_	
112-7	15036-15038	in	_	_	_	_	
112-8	15039-15045	system	_	_	_	_	
112-9	15046-15058	architecture	_	_	_	_	
112-10	15059-15061	in	_	_	_	_	
112-11	15062-15066	2011	_	_	_	_	
112-12	15066-15067	,	_	_	_	_	
112-13	15068-15071	but	_	_	_	_	
112-14	15072-15079	overall	_	_	_	_	
112-15	15080-15088	interest	_	_	_	_	
112-16	15089-15091	in	_	_	_	_	
112-17	15092-15094	it	_	_	_	_	
112-18	15095-15098	has	_	_	_	_	
112-19	15099-15108	plateaued	_	_	_	_	
112-20	15109-15117	recently	_	_	_	_	
112-21	15117-15118	.	_	_	_	_	

#Text=What is NoSQL, what does it have to do with modern development, and is it worth implementing in your project?
113-1	15119-15123	What	_	_	_	_	
113-2	15124-15126	is	_	_	_	_	
113-3	15127-15132	NoSQL	_	_	_	_	
113-4	15132-15133	,	_	_	_	_	
113-5	15134-15138	what	_	_	_	_	
113-6	15139-15143	does	_	_	_	_	
113-7	15144-15146	it	_	_	_	_	
113-8	15147-15151	have	_	_	_	_	
113-9	15152-15154	to	_	_	_	_	
113-10	15155-15157	do	_	_	_	_	
113-11	15158-15162	with	_	_	_	_	
113-12	15163-15169	modern	_	_	_	_	
113-13	15170-15181	development	_	_	_	_	
113-14	15181-15182	,	_	_	_	_	
113-15	15183-15186	and	_	_	_	_	
113-16	15187-15189	is	_	_	_	_	
113-17	15190-15192	it	_	_	_	_	
113-18	15193-15198	worth	_	_	_	_	
113-19	15199-15211	implementing	_	_	_	_	
113-20	15212-15214	in	_	_	_	_	
113-21	15215-15219	your	_	_	_	_	
113-22	15220-15227	project	_	_	_	_	
113-23	15227-15228	?	_	_	_	_	

#Text=John Biggs and Ryan Donovan
#Text=code-for-a-living
#Text=March 3, 2021
#Text=Best practices can slow your application down
#Text=In order to get the most performant site possible when building the codebase for our public Stack Overflow site, we didn’t always follow best practices.
114-1	15229-15233	John	_	_	_	_	
114-2	15234-15239	Biggs	_	_	_	_	
114-3	15240-15243	and	_	_	_	_	
114-4	15244-15248	Ryan	_	_	_	_	
114-5	15249-15256	Donovan	_	_	_	_	
114-6	15257-15274	code-for-a-living	_	_	_	_	
114-7	15275-15280	March	_	_	_	_	
114-8	15281-15282	3	_	_	_	_	
114-9	15282-15283	,	_	_	_	_	
114-10	15284-15288	2021	_	_	_	_	
114-11	15289-15293	Best	_	_	_	_	
114-12	15294-15303	practices	_	_	_	_	
114-13	15304-15307	can	_	_	_	_	
114-14	15308-15312	slow	_	_	_	_	
114-15	15313-15317	your	_	_	_	_	
114-16	15318-15329	application	_	_	_	_	
114-17	15330-15334	down	_	_	_	_	
114-18	15335-15337	In	_	_	_	_	
114-19	15338-15343	order	_	_	_	_	
114-20	15344-15346	to	_	_	_	_	
114-21	15347-15350	get	_	_	_	_	
114-22	15351-15354	the	_	_	_	_	
114-23	15355-15359	most	_	_	_	_	
114-24	15360-15370	performant	_	_	_	_	
114-25	15371-15375	site	_	_	_	_	
114-26	15376-15384	possible	_	_	_	_	
114-27	15385-15389	when	_	_	_	_	
114-28	15390-15398	building	_	_	_	_	
114-29	15399-15402	the	_	_	_	_	
114-30	15403-15411	codebase	_	_	_	_	
114-31	15412-15415	for	_	_	_	_	
114-32	15416-15419	our	_	_	_	_	
114-33	15420-15426	public	_	_	_	_	
114-34	15427-15432	Stack	_	_	_	_	
114-35	15433-15441	Overflow	_	_	_	_	
114-36	15442-15446	site	_	_	_	_	
114-37	15446-15447	,	_	_	_	_	
114-38	15448-15450	we	_	_	_	_	
114-39	15451-15455	didn	_	_	_	_	
114-40	15455-15456	’	_	_	_	_	
114-41	15456-15457	t	_	_	_	_	
114-42	15458-15464	always	_	_	_	_	
114-43	15465-15471	follow	_	_	_	_	
114-44	15472-15476	best	_	_	_	_	
114-45	15477-15486	practices	_	_	_	_	
114-46	15486-15487	.	_	_	_	_	

#Text=Roberta Arcoverde and Ryan Donovan
#Text=code-for-a-living
#Text=February 24, 2021
#Text=What I wish I had known about single page applications
#Text=Single page apps are all the rage today, but they don't always operate the same as traditional web pages.
115-1	15488-15495	Roberta	_	_	_	_	
115-2	15496-15505	Arcoverde	_	_	_	_	
115-3	15506-15509	and	_	_	_	_	
115-4	15510-15514	Ryan	_	_	_	_	
115-5	15515-15522	Donovan	_	_	_	_	
115-6	15523-15540	code-for-a-living	_	_	_	_	
115-7	15541-15549	February	_	_	_	_	
115-8	15550-15552	24	_	_	_	_	
115-9	15552-15553	,	_	_	_	_	
115-10	15554-15558	2021	_	_	_	_	
115-11	15559-15563	What	_	_	_	_	
115-12	15564-15565	I	_	_	_	_	
115-13	15566-15570	wish	_	_	_	_	
115-14	15571-15572	I	_	_	_	_	
115-15	15573-15576	had	_	_	_	_	
115-16	15577-15582	known	_	_	_	_	
115-17	15583-15588	about	_	_	_	_	
115-18	15589-15595	single	_	_	_	_	
115-19	15596-15600	page	_	_	_	_	
115-20	15601-15613	applications	_	_	_	_	
115-21	15614-15620	Single	_	_	_	_	
115-22	15621-15625	page	_	_	_	_	
115-23	15626-15630	apps	_	_	_	_	
115-24	15631-15634	are	_	_	_	_	
115-25	15635-15638	all	_	_	_	_	
115-26	15639-15642	the	_	_	_	_	
115-27	15643-15647	rage	_	_	_	_	
115-28	15648-15653	today	_	_	_	_	
115-29	15653-15654	,	_	_	_	_	
115-30	15655-15658	but	_	_	_	_	
115-31	15659-15663	they	_	_	_	_	
115-32	15664-15669	don't	_	_	_	_	
115-33	15670-15676	always	_	_	_	_	
115-34	15677-15684	operate	_	_	_	_	
115-35	15685-15688	the	_	_	_	_	
115-36	15689-15693	same	_	_	_	_	
115-37	15694-15696	as	_	_	_	_	
115-38	15697-15708	traditional	_	_	_	_	
115-39	15709-15712	web	_	_	_	_	
115-40	15713-15718	pages	_	_	_	_	
115-41	15718-15719	.	_	_	_	_	

#Text=Michael Pratt
#Text=11 Comments
#Text=Iwouldliketonotprovidemyname says:
#Text=14 Oct 20 at 11:20
#Text=As you see, transaction throughput increased from 486 transactions per second to 566 transactions per second.
116-1	15720-15727	Michael	_	_	_	_	
116-2	15728-15733	Pratt	_	_	_	_	
116-3	15734-15736	11	_	_	_	_	
116-4	15737-15745	Comments	_	_	_	_	
116-5	15746-15774	Iwouldliketonotprovidemyname	_	_	_	_	
116-6	15775-15779	says	_	_	_	_	
116-7	15779-15780	:	_	_	_	_	
116-8	15781-15783	14	_	_	_	_	
116-9	15784-15787	Oct	_	_	_	_	
116-10	15788-15790	20	_	_	_	_	
116-11	15791-15793	at	_	_	_	_	
116-12	15794-15796	11	_	_	_	_	
116-13	15796-15797	:	_	_	_	_	
116-14	15797-15799	20	_	_	_	_	
116-15	15800-15802	As	_	_	_	_	
116-16	15803-15806	you	_	_	_	_	
116-17	15807-15810	see	_	_	_	_	
116-18	15810-15811	,	_	_	_	_	
116-19	15812-15823	transaction	_	_	_	_	
116-20	15824-15834	throughput	_	_	_	_	
116-21	15835-15844	increased	_	_	_	_	
116-22	15845-15849	from	_	_	_	_	
116-23	15850-15853	486	_	_	_	_	
116-24	15854-15866	transactions	_	_	_	_	
116-25	15867-15870	per	_	_	_	_	
116-26	15871-15877	second	_	_	_	_	
116-27	15878-15880	to	_	_	_	_	
116-28	15881-15884	566	_	_	_	_	
116-29	15885-15897	transactions	_	_	_	_	
116-30	15898-15901	per	_	_	_	_	
116-31	15902-15908	second	_	_	_	_	
116-32	15908-15909	.	_	_	_	_	

#Text=With the help of pgbouncer, transaction throughput improved by approximately 60%.
117-1	15910-15914	With	_	_	_	_	
117-2	15915-15918	the	_	_	_	_	
117-3	15919-15923	help	_	_	_	_	
117-4	15924-15926	of	_	_	_	_	
117-5	15927-15936	pgbouncer	_	_	_	_	
117-6	15936-15937	,	_	_	_	_	
117-7	15938-15949	transaction	_	_	_	_	
117-8	15950-15960	throughput	_	_	_	_	
117-9	15961-15969	improved	_	_	_	_	
117-10	15970-15972	by	_	_	_	_	
117-11	15973-15986	approximately	_	_	_	_	
117-12	15987-15990	60%	_	_	_	_	
117-13	15990-15991	.	_	_	_	_	

#Text=That 60% is a bit huge.
118-1	15992-15996	That	_	_	_	_	
118-2	15997-16000	60%	_	_	_	_	
118-3	16001-16003	is	_	_	_	_	
118-4	16004-16005	a	_	_	_	_	
118-5	16006-16009	bit	_	_	_	_	
118-6	16010-16014	huge	_	_	_	_	
118-7	16014-16015	.	_	_	_	_	

#Text=The increase of 80 TPS is more like 16% of the initial 486 TPS.
119-1	16016-16019	The	_	_	_	_	
119-2	16020-16028	increase	_	_	_	_	
119-3	16029-16031	of	_	_	_	_	
119-4	16032-16034	80	_	_	_	_	
119-5	16035-16038	TPS	_	_	_	_	
119-6	16039-16041	is	_	_	_	_	
119-7	16042-16046	more	_	_	_	_	
119-8	16047-16051	like	_	_	_	_	
119-9	16052-16055	16%	_	_	_	_	
119-10	16056-16058	of	_	_	_	_	
119-11	16059-16062	the	_	_	_	_	
119-12	16063-16070	initial	_	_	_	_	
119-13	16071-16074	486	_	_	_	_	
119-14	16075-16078	TPS	_	_	_	_	
119-15	16078-16079	.	_	_	_	_	

#Text=The 75% increase for pgpool-II is also a bit large.
120-1	16080-16083	The	_	_	_	_	
120-2	16084-16087	75%	_	_	_	_	
120-3	16088-16096	increase	_	_	_	_	
120-4	16097-16100	for	_	_	_	_	
120-5	16101-16110	pgpool-II	_	_	_	_	
120-6	16111-16113	is	_	_	_	_	
120-7	16114-16118	also	_	_	_	_	
120-8	16119-16120	a	_	_	_	_	
120-9	16121-16124	bit	_	_	_	_	
120-10	16125-16130	large	_	_	_	_	
120-11	16130-16131	.	_	_	_	_	

#Text=Reply
#Text=Tien Do says:
#Text=21 Oct 20 at 6:35
#Text=Yeah, how is it 60% and 75%?
121-1	16132-16137	Reply	_	_	_	_	
121-2	16138-16142	Tien	_	_	_	_	
121-3	16143-16145	Do	_	_	_	_	
121-4	16146-16150	says	_	_	_	_	
121-5	16150-16151	:	_	_	_	_	
121-6	16152-16154	21	_	_	_	_	
121-7	16155-16158	Oct	_	_	_	_	
121-8	16159-16161	20	_	_	_	_	
121-9	16162-16164	at	_	_	_	_	
121-10	16165-16166	6	_	_	_	_	
121-11	16166-16167	:	_	_	_	_	
121-12	16167-16169	35	_	_	_	_	
121-13	16170-16174	Yeah	_	_	_	_	
121-14	16174-16175	,	_	_	_	_	
121-15	16176-16179	how	_	_	_	_	
121-16	16180-16182	is	_	_	_	_	
121-17	16183-16185	it	_	_	_	_	
121-18	16186-16189	60%	_	_	_	_	
121-19	16190-16193	and	_	_	_	_	
121-20	16194-16197	75%	_	_	_	_	
121-21	16197-16198	?	_	_	_	_	

#Text=Reply
#Text=CanadianLuke says:
#Text=22 Oct 20 at 6:55
#Text=A week with no reply to simple math… Not looking good…
#Text=Reply
#Text=Travis says:
#Text=14 Oct 20 at 3:49
#Text=It is certainly an interesting technique, although there are a whole host of unintended consequences associated with this approach that would be well to mention.
122-1	16199-16204	Reply	_	_	_	_	
122-2	16205-16217	CanadianLuke	_	_	_	_	
122-3	16218-16222	says	_	_	_	_	
122-4	16222-16223	:	_	_	_	_	
122-5	16224-16226	22	_	_	_	_	
122-6	16227-16230	Oct	_	_	_	_	
122-7	16231-16233	20	_	_	_	_	
122-8	16234-16236	at	_	_	_	_	
122-9	16237-16238	6	_	_	_	_	
122-10	16238-16239	:	_	_	_	_	
122-11	16239-16241	55	_	_	_	_	
122-12	16242-16243	A	_	_	_	_	
122-13	16244-16248	week	_	_	_	_	
122-14	16249-16253	with	_	_	_	_	
122-15	16254-16256	no	_	_	_	_	
122-16	16257-16262	reply	_	_	_	_	
122-17	16263-16265	to	_	_	_	_	
122-18	16266-16272	simple	_	_	_	_	
122-19	16273-16277	math	_	_	_	_	
122-20	16277-16278	…	_	_	_	_	
122-21	16279-16282	Not	_	_	_	_	
122-22	16283-16290	looking	_	_	_	_	
122-23	16291-16295	good	_	_	_	_	
122-24	16295-16296	…	_	_	_	_	
122-25	16297-16302	Reply	_	_	_	_	
122-26	16303-16309	Travis	_	_	_	_	
122-27	16310-16314	says	_	_	_	_	
122-28	16314-16315	:	_	_	_	_	
122-29	16316-16318	14	_	_	_	_	
122-30	16319-16322	Oct	_	_	_	_	
122-31	16323-16325	20	_	_	_	_	
122-32	16326-16328	at	_	_	_	_	
122-33	16329-16330	3	_	_	_	_	
122-34	16330-16331	:	_	_	_	_	
122-35	16331-16333	49	_	_	_	_	
122-36	16334-16336	It	_	_	_	_	
122-37	16337-16339	is	_	_	_	_	
122-38	16340-16349	certainly	_	_	_	_	
122-39	16350-16352	an	_	_	_	_	
122-40	16353-16364	interesting	_	_	_	_	
122-41	16365-16374	technique	_	_	_	_	
122-42	16374-16375	,	_	_	_	_	
122-43	16376-16384	although	_	_	_	_	
122-44	16385-16390	there	_	_	_	_	
122-45	16391-16394	are	_	_	_	_	
122-46	16395-16396	a	_	_	_	_	
122-47	16397-16402	whole	_	_	_	_	
122-48	16403-16407	host	_	_	_	_	
122-49	16408-16410	of	_	_	_	_	
122-50	16411-16421	unintended	_	_	_	_	
122-51	16422-16434	consequences	_	_	_	_	
122-52	16435-16445	associated	_	_	_	_	
122-53	16446-16450	with	_	_	_	_	
122-54	16451-16455	this	_	_	_	_	
122-55	16456-16464	approach	_	_	_	_	
122-56	16465-16469	that	_	_	_	_	
122-57	16470-16475	would	_	_	_	_	
122-58	16476-16478	be	_	_	_	_	
122-59	16479-16483	well	_	_	_	_	
122-60	16484-16486	to	_	_	_	_	
122-61	16487-16494	mention	_	_	_	_	
122-62	16494-16495	.	_	_	_	_	

#Text=Pooling transactions to memory prior to pushing them to the database has very serious implications with regards to data integrity, as one main example.
123-1	16496-16503	Pooling	_	_	_	_	
123-2	16504-16516	transactions	_	_	_	_	
123-3	16517-16519	to	_	_	_	_	
123-4	16520-16526	memory	_	_	_	_	
123-5	16527-16532	prior	_	_	_	_	
123-6	16533-16535	to	_	_	_	_	
123-7	16536-16543	pushing	_	_	_	_	
123-8	16544-16548	them	_	_	_	_	
123-9	16549-16551	to	_	_	_	_	
123-10	16552-16555	the	_	_	_	_	
123-11	16556-16564	database	_	_	_	_	
123-12	16565-16568	has	_	_	_	_	
123-13	16569-16573	very	_	_	_	_	
123-14	16574-16581	serious	_	_	_	_	
123-15	16582-16594	implications	_	_	_	_	
123-16	16595-16599	with	_	_	_	_	
123-17	16600-16607	regards	_	_	_	_	
123-18	16608-16610	to	_	_	_	_	
123-19	16611-16615	data	_	_	_	_	
123-20	16616-16625	integrity	_	_	_	_	
123-21	16625-16626	,	_	_	_	_	
123-22	16627-16629	as	_	_	_	_	
123-23	16630-16633	one	_	_	_	_	
123-24	16634-16638	main	_	_	_	_	
123-25	16639-16646	example	_	_	_	_	
123-26	16646-16647	.	_	_	_	_	

#Text=This approach also will require a very large amount of server memory to be used; in instances where memory is shared across multiple nodes, this can be problematic if there is a node failure.
124-1	16648-16652	This	_	_	_	_	
124-2	16653-16661	approach	_	_	_	_	
124-3	16662-16666	also	_	_	_	_	
124-4	16667-16671	will	_	_	_	_	
124-5	16672-16679	require	_	_	_	_	
124-6	16680-16681	a	_	_	_	_	
124-7	16682-16686	very	_	_	_	_	
124-8	16687-16692	large	_	_	_	_	
124-9	16693-16699	amount	_	_	_	_	
124-10	16700-16702	of	_	_	_	_	
124-11	16703-16709	server	_	_	_	_	
124-12	16710-16716	memory	_	_	_	_	
124-13	16717-16719	to	_	_	_	_	
124-14	16720-16722	be	_	_	_	_	
124-15	16723-16727	used	_	_	_	_	
124-16	16727-16728	;	_	_	_	_	
124-17	16729-16731	in	_	_	_	_	
124-18	16732-16741	instances	_	_	_	_	
124-19	16742-16747	where	_	_	_	_	
124-20	16748-16754	memory	_	_	_	_	
124-21	16755-16757	is	_	_	_	_	
124-22	16758-16764	shared	_	_	_	_	
124-23	16765-16771	across	_	_	_	_	
124-24	16772-16780	multiple	_	_	_	_	
124-25	16781-16786	nodes	_	_	_	_	
124-26	16786-16787	,	_	_	_	_	
124-27	16788-16792	this	_	_	_	_	
124-28	16793-16796	can	_	_	_	_	
124-29	16797-16799	be	_	_	_	_	
124-30	16800-16811	problematic	_	_	_	_	
124-31	16812-16814	if	_	_	_	_	
124-32	16815-16820	there	_	_	_	_	
124-33	16821-16823	is	_	_	_	_	
124-34	16824-16825	a	_	_	_	_	
124-35	16826-16830	node	_	_	_	_	
124-36	16831-16838	failure	_	_	_	_	
124-37	16838-16839	.	_	_	_	_	

#Text=So, while it may be the case that more transactions per second occur, the risk seems to outweigh any gains.
125-1	16840-16842	So	_	_	_	_	
125-2	16842-16843	,	_	_	_	_	
125-3	16844-16849	while	_	_	_	_	
125-4	16850-16852	it	_	_	_	_	
125-5	16853-16856	may	_	_	_	_	
125-6	16857-16859	be	_	_	_	_	
125-7	16860-16863	the	_	_	_	_	
125-8	16864-16868	case	_	_	_	_	
125-9	16869-16873	that	_	_	_	_	
125-10	16874-16878	more	_	_	_	_	
125-11	16879-16891	transactions	_	_	_	_	
125-12	16892-16895	per	_	_	_	_	
125-13	16896-16902	second	_	_	_	_	
125-14	16903-16908	occur	_	_	_	_	
125-15	16908-16909	,	_	_	_	_	
125-16	16910-16913	the	_	_	_	_	
125-17	16914-16918	risk	_	_	_	_	
125-18	16919-16924	seems	_	_	_	_	
125-19	16925-16927	to	_	_	_	_	
125-20	16928-16936	outweigh	_	_	_	_	
125-21	16937-16940	any	_	_	_	_	
125-22	16941-16946	gains	_	_	_	_	
125-23	16946-16947	.	_	_	_	_	

#Text=Reply
#Text=Michael Aboagye says:
#Text=19 Oct 20 at 7:23
#Text=@Travis, please I referred to pooling connection in this article.
126-1	16948-16953	Reply	_	_	_	_	
126-2	16954-16961	Michael	_	_	_	_	
126-3	16962-16969	Aboagye	_	_	_	_	
126-4	16970-16974	says	_	_	_	_	
126-5	16974-16975	:	_	_	_	_	
126-6	16976-16978	19	_	_	_	_	
126-7	16979-16982	Oct	_	_	_	_	
126-8	16983-16985	20	_	_	_	_	
126-9	16986-16988	at	_	_	_	_	
126-10	16989-16990	7	_	_	_	_	
126-11	16990-16991	:	_	_	_	_	
126-12	16991-16993	23	_	_	_	_	
126-13	16994-16995	@	_	_	_	_	
126-14	16995-17001	Travis	_	_	_	_	
126-15	17001-17002	,	_	_	_	_	
126-16	17003-17009	please	_	_	_	_	
126-17	17010-17011	I	_	_	_	_	
126-18	17012-17020	referred	_	_	_	_	
126-19	17021-17023	to	_	_	_	_	
126-20	17024-17031	pooling	_	_	_	_	
126-21	17032-17042	connection	_	_	_	_	
126-22	17043-17045	in	_	_	_	_	
126-23	17046-17050	this	_	_	_	_	
126-24	17051-17058	article	_	_	_	_	
126-25	17058-17059	.	_	_	_	_	

#Text=But do you know pgpool supports postgres stream replication?
127-1	17060-17063	But	_	_	_	_	
127-2	17064-17066	do	_	_	_	_	
127-3	17067-17070	you	_	_	_	_	
127-4	17071-17075	know	_	_	_	_	
127-5	17076-17082	pgpool	_	_	_	_	
127-6	17083-17091	supports	_	_	_	_	
127-7	17092-17100	postgres	_	_	_	_	
127-8	17101-17107	stream	_	_	_	_	
127-9	17108-17119	replication	_	_	_	_	
127-10	17119-17120	?	_	_	_	_	

#Text=In addition, the presence of transaction log ensures data integrity is maintained.
128-1	17121-17123	In	_	_	_	_	
128-2	17124-17132	addition	_	_	_	_	
128-3	17132-17133	,	_	_	_	_	
128-4	17134-17137	the	_	_	_	_	
128-5	17138-17146	presence	_	_	_	_	
128-6	17147-17149	of	_	_	_	_	
128-7	17150-17161	transaction	_	_	_	_	
128-8	17162-17165	log	_	_	_	_	
128-9	17166-17173	ensures	_	_	_	_	
128-10	17174-17178	data	_	_	_	_	
128-11	17179-17188	integrity	_	_	_	_	
128-12	17189-17191	is	_	_	_	_	
128-13	17192-17202	maintained	_	_	_	_	
128-14	17202-17203	.	_	_	_	_	

#Text=Even without in the absence
#Text=of pgpool cluster, postgres supports replication concepts such as synchronous and asynchronous replication to prevent data loss.
129-1	17204-17208	Even	_	_	_	_	
129-2	17209-17216	without	_	_	_	_	
129-3	17217-17219	in	_	_	_	_	
129-4	17220-17223	the	_	_	_	_	
129-5	17224-17231	absence	_	_	_	_	
129-6	17232-17234	of	_	_	_	_	
129-7	17235-17241	pgpool	_	_	_	_	
129-8	17242-17249	cluster	_	_	_	_	
129-9	17249-17250	,	_	_	_	_	
129-10	17251-17259	postgres	_	_	_	_	
129-11	17260-17268	supports	_	_	_	_	
129-12	17269-17280	replication	_	_	_	_	
129-13	17281-17289	concepts	_	_	_	_	
129-14	17290-17294	such	_	_	_	_	
129-15	17295-17297	as	_	_	_	_	
129-16	17298-17309	synchronous	_	_	_	_	
129-17	17310-17313	and	_	_	_	_	
129-18	17314-17326	asynchronous	_	_	_	_	
129-19	17327-17338	replication	_	_	_	_	
129-20	17339-17341	to	_	_	_	_	
129-21	17342-17349	prevent	_	_	_	_	
129-22	17350-17354	data	_	_	_	_	
129-23	17355-17359	loss	_	_	_	_	
129-24	17359-17360	.	_	_	_	_	

#Text=Reply
#Text=Galletto says:
#Text=22 Oct 20 at 9:54
#Text=Maybe I’m missing something entirely, but I thought connection pooling has been the default in .NET for many years…
#Text=Correct?
130-1	17361-17366	Reply	_	_	_	_	
130-2	17367-17375	Galletto	_	_	_	_	
130-3	17376-17380	says	_	_	_	_	
130-4	17380-17381	:	_	_	_	_	
130-5	17382-17384	22	_	_	_	_	
130-6	17385-17388	Oct	_	_	_	_	
130-7	17389-17391	20	_	_	_	_	
130-8	17392-17394	at	_	_	_	_	
130-9	17395-17396	9	_	_	_	_	
130-10	17396-17397	:	_	_	_	_	
130-11	17397-17399	54	_	_	_	_	
130-12	17400-17405	Maybe	_	_	_	_	
130-13	17406-17407	I	_	_	_	_	
130-14	17407-17408	’	_	_	_	_	
130-15	17408-17409	m	_	_	_	_	
130-16	17410-17417	missing	_	_	_	_	
130-17	17418-17427	something	_	_	_	_	
130-18	17428-17436	entirely	_	_	_	_	
130-19	17436-17437	,	_	_	_	_	
130-20	17438-17441	but	_	_	_	_	
130-21	17442-17443	I	_	_	_	_	
130-22	17444-17451	thought	_	_	_	_	
130-23	17452-17462	connection	_	_	_	_	
130-24	17463-17470	pooling	_	_	_	_	
130-25	17471-17474	has	_	_	_	_	
130-26	17475-17479	been	_	_	_	_	
130-27	17480-17483	the	_	_	_	_	
130-28	17484-17491	default	_	_	_	_	
130-29	17492-17494	in	_	_	_	_	
130-30	17495-17496	.	_	_	_	_	
130-31	17496-17499	NET	_	_	_	_	
130-32	17500-17503	for	_	_	_	_	
130-33	17504-17508	many	_	_	_	_	
130-34	17509-17514	years	_	_	_	_	
130-35	17514-17515	…	_	_	_	_	
130-36	17516-17523	Correct	_	_	_	_	
130-37	17523-17524	?	_	_	_	_	

#Text=Reply
#Text=Nilesh says:
#Text=16 Oct 20 at 11:19
#Text=@Travis — The article talks about pooling connections but mentions no such thing as pooling transactions in memory .
131-1	17525-17530	Reply	_	_	_	_	
131-2	17531-17537	Nilesh	_	_	_	_	
131-3	17538-17542	says	_	_	_	_	
131-4	17542-17543	:	_	_	_	_	
131-5	17544-17546	16	_	_	_	_	
131-6	17547-17550	Oct	_	_	_	_	
131-7	17551-17553	20	_	_	_	_	
131-8	17554-17556	at	_	_	_	_	
131-9	17557-17559	11	_	_	_	_	
131-10	17559-17560	:	_	_	_	_	
131-11	17560-17562	19	_	_	_	_	
131-12	17563-17564	@	_	_	_	_	
131-13	17564-17570	Travis	_	_	_	_	
131-14	17571-17572	—	_	_	_	_	
131-15	17573-17576	The	_	_	_	_	
131-16	17577-17584	article	_	_	_	_	
131-17	17585-17590	talks	_	_	_	_	
131-18	17591-17596	about	_	_	_	_	
131-19	17597-17604	pooling	_	_	_	_	
131-20	17605-17616	connections	_	_	_	_	
131-21	17617-17620	but	_	_	_	_	
131-22	17621-17629	mentions	_	_	_	_	
131-23	17630-17632	no	_	_	_	_	
131-24	17633-17637	such	_	_	_	_	
131-25	17638-17643	thing	_	_	_	_	
131-26	17644-17646	as	_	_	_	_	
131-27	17647-17654	pooling	_	_	_	_	
131-28	17655-17667	transactions	_	_	_	_	
131-29	17668-17670	in	_	_	_	_	
131-30	17671-17677	memory	_	_	_	_	
131-31	17678-17679	.	_	_	_	_	

#Text=I understand the static memory footprint that postgres has on the server would increase but I can’t see how this would lead to data integrity issues.
132-1	17680-17681	I	_	_	_	_	
132-2	17682-17692	understand	_	_	_	_	
132-3	17693-17696	the	_	_	_	_	
132-4	17697-17703	static	_	_	_	_	
132-5	17704-17710	memory	_	_	_	_	
132-6	17711-17720	footprint	_	_	_	_	
132-7	17721-17725	that	_	_	_	_	
132-8	17726-17734	postgres	_	_	_	_	
132-9	17735-17738	has	_	_	_	_	
132-10	17739-17741	on	_	_	_	_	
132-11	17742-17745	the	_	_	_	_	
132-12	17746-17752	server	_	_	_	_	
132-13	17753-17758	would	_	_	_	_	
132-14	17759-17767	increase	_	_	_	_	
132-15	17768-17771	but	_	_	_	_	
132-16	17772-17773	I	_	_	_	_	
132-17	17774-17777	can	_	_	_	_	
132-18	17777-17778	’	_	_	_	_	
132-19	17778-17779	t	_	_	_	_	
132-20	17780-17783	see	_	_	_	_	
132-21	17784-17787	how	_	_	_	_	
132-22	17788-17792	this	_	_	_	_	
132-23	17793-17798	would	_	_	_	_	
132-24	17799-17803	lead	_	_	_	_	
132-25	17804-17806	to	_	_	_	_	
132-26	17807-17811	data	_	_	_	_	
132-27	17812-17821	integrity	_	_	_	_	
132-28	17822-17828	issues	_	_	_	_	
132-29	17828-17829	.	_	_	_	_	

#Text=Am I missing anything ?
133-1	17830-17832	Am	_	_	_	_	
133-2	17833-17834	I	_	_	_	_	
133-3	17835-17842	missing	_	_	_	_	
133-4	17843-17851	anything	_	_	_	_	
133-5	17852-17853	?	_	_	_	_	

#Text=Reply
#Text=Michael Aboagye says:
#Text=19 Oct 20 at 7:24
#Text=Thanks for your comments, Nilesh.
134-1	17854-17859	Reply	_	_	_	_	
134-2	17860-17867	Michael	_	_	_	_	
134-3	17868-17875	Aboagye	_	_	_	_	
134-4	17876-17880	says	_	_	_	_	
134-5	17880-17881	:	_	_	_	_	
134-6	17882-17884	19	_	_	_	_	
134-7	17885-17888	Oct	_	_	_	_	
134-8	17889-17891	20	_	_	_	_	
134-9	17892-17894	at	_	_	_	_	
134-10	17895-17896	7	_	_	_	_	
134-11	17896-17897	:	_	_	_	_	
134-12	17897-17899	24	_	_	_	_	
134-13	17900-17906	Thanks	_	_	_	_	
134-14	17907-17910	for	_	_	_	_	
134-15	17911-17915	your	_	_	_	_	
134-16	17916-17924	comments	_	_	_	_	
134-17	17924-17925	,	_	_	_	_	
134-18	17926-17932	Nilesh	_	_	_	_	
134-19	17932-17933	.	_	_	_	_	

#Text=Reply
#Text=Jeff Dafoe says:
#Text=22 Oct 20 at 5:21
#Text=One thing to be aware of with connection pooling, particularly under PG, is that a reused pool connection may not be in the same initial state as a brand new connection from the backend.
135-1	17934-17939	Reply	_	_	_	_	
135-2	17940-17944	Jeff	_	_	_	_	
135-3	17945-17950	Dafoe	_	_	_	_	
135-4	17951-17955	says	_	_	_	_	
135-5	17955-17956	:	_	_	_	_	
135-6	17957-17959	22	_	_	_	_	
135-7	17960-17963	Oct	_	_	_	_	
135-8	17964-17966	20	_	_	_	_	
135-9	17967-17969	at	_	_	_	_	
135-10	17970-17971	5	_	_	_	_	
135-11	17971-17972	:	_	_	_	_	
135-12	17972-17974	21	_	_	_	_	
135-13	17975-17978	One	_	_	_	_	
135-14	17979-17984	thing	_	_	_	_	
135-15	17985-17987	to	_	_	_	_	
135-16	17988-17990	be	_	_	_	_	
135-17	17991-17996	aware	_	_	_	_	
135-18	17997-17999	of	_	_	_	_	
135-19	18000-18004	with	_	_	_	_	
135-20	18005-18015	connection	_	_	_	_	
135-21	18016-18023	pooling	_	_	_	_	
135-22	18023-18024	,	_	_	_	_	
135-23	18025-18037	particularly	_	_	_	_	
135-24	18038-18043	under	_	_	_	_	
135-25	18044-18046	PG	_	_	_	_	
135-26	18046-18047	,	_	_	_	_	
135-27	18048-18050	is	_	_	_	_	
135-28	18051-18055	that	_	_	_	_	
135-29	18056-18057	a	_	_	_	_	
135-30	18058-18064	reused	_	_	_	_	
135-31	18065-18069	pool	_	_	_	_	
135-32	18070-18080	connection	_	_	_	_	
135-33	18081-18084	may	_	_	_	_	
135-34	18085-18088	not	_	_	_	_	
135-35	18089-18091	be	_	_	_	_	
135-36	18092-18094	in	_	_	_	_	
135-37	18095-18098	the	_	_	_	_	
135-38	18099-18103	same	_	_	_	_	
135-39	18104-18111	initial	_	_	_	_	
135-40	18112-18117	state	_	_	_	_	
135-41	18118-18120	as	_	_	_	_	
135-42	18121-18122	a	_	_	_	_	
135-43	18123-18128	brand	_	_	_	_	
135-44	18129-18132	new	_	_	_	_	
135-45	18133-18143	connection	_	_	_	_	
135-46	18144-18148	from	_	_	_	_	
135-47	18149-18152	the	_	_	_	_	
135-48	18153-18160	backend	_	_	_	_	
135-49	18160-18161	.	_	_	_	_	

#Text=Session variables persist across shared connections, data may not be cleared from temp tables, and some types of errors are not cleared until the backend is recycled.
136-1	18162-18169	Session	_	_	_	_	
136-2	18170-18179	variables	_	_	_	_	
136-3	18180-18187	persist	_	_	_	_	
136-4	18188-18194	across	_	_	_	_	
136-5	18195-18201	shared	_	_	_	_	
136-6	18202-18213	connections	_	_	_	_	
136-7	18213-18214	,	_	_	_	_	
136-8	18215-18219	data	_	_	_	_	
136-9	18220-18223	may	_	_	_	_	
136-10	18224-18227	not	_	_	_	_	
136-11	18228-18230	be	_	_	_	_	
136-12	18231-18238	cleared	_	_	_	_	
136-13	18239-18243	from	_	_	_	_	
136-14	18244-18248	temp	_	_	_	_	
136-15	18249-18255	tables	_	_	_	_	
136-16	18255-18256	,	_	_	_	_	
136-17	18257-18260	and	_	_	_	_	
136-18	18261-18265	some	_	_	_	_	
136-19	18266-18271	types	_	_	_	_	
136-20	18272-18274	of	_	_	_	_	
136-21	18275-18281	errors	_	_	_	_	
136-22	18282-18285	are	_	_	_	_	
136-23	18286-18289	not	_	_	_	_	
136-24	18290-18297	cleared	_	_	_	_	
136-25	18298-18303	until	_	_	_	_	
136-26	18304-18307	the	_	_	_	_	
136-27	18308-18315	backend	_	_	_	_	
136-28	18316-18318	is	_	_	_	_	
136-29	18319-18327	recycled	_	_	_	_	
136-30	18327-18328	.	_	_	_	_	

#Text=It’s important that the code that is establishing the connection be written with this in mind, it must perform initialization that would not be necessary if the backend were fresh and it should also test the connection to make sure it can actually be queried from.
137-1	18329-18331	It	_	_	_	_	
137-2	18331-18332	’	_	_	_	_	
137-3	18332-18333	s	_	_	_	_	
137-4	18334-18343	important	_	_	_	_	
137-5	18344-18348	that	_	_	_	_	
137-6	18349-18352	the	_	_	_	_	
137-7	18353-18357	code	_	_	_	_	
137-8	18358-18362	that	_	_	_	_	
137-9	18363-18365	is	_	_	_	_	
137-10	18366-18378	establishing	_	_	_	_	
137-11	18379-18382	the	_	_	_	_	
137-12	18383-18393	connection	_	_	_	_	
137-13	18394-18396	be	_	_	_	_	
137-14	18397-18404	written	_	_	_	_	
137-15	18405-18409	with	_	_	_	_	
137-16	18410-18414	this	_	_	_	_	
137-17	18415-18417	in	_	_	_	_	
137-18	18418-18422	mind	_	_	_	_	
137-19	18422-18423	,	_	_	_	_	
137-20	18424-18426	it	_	_	_	_	
137-21	18427-18431	must	_	_	_	_	
137-22	18432-18439	perform	_	_	_	_	
137-23	18440-18454	initialization	_	_	_	_	
137-24	18455-18459	that	_	_	_	_	
137-25	18460-18465	would	_	_	_	_	
137-26	18466-18469	not	_	_	_	_	
137-27	18470-18472	be	_	_	_	_	
137-28	18473-18482	necessary	_	_	_	_	
137-29	18483-18485	if	_	_	_	_	
137-30	18486-18489	the	_	_	_	_	
137-31	18490-18497	backend	_	_	_	_	
137-32	18498-18502	were	_	_	_	_	
137-33	18503-18508	fresh	_	_	_	_	
137-34	18509-18512	and	_	_	_	_	
137-35	18513-18515	it	_	_	_	_	
137-36	18516-18522	should	_	_	_	_	
137-37	18523-18527	also	_	_	_	_	
137-38	18528-18532	test	_	_	_	_	
137-39	18533-18536	the	_	_	_	_	
137-40	18537-18547	connection	_	_	_	_	
137-41	18548-18550	to	_	_	_	_	
137-42	18551-18555	make	_	_	_	_	
137-43	18556-18560	sure	_	_	_	_	
137-44	18561-18563	it	_	_	_	_	
137-45	18564-18567	can	_	_	_	_	
137-46	18568-18576	actually	_	_	_	_	
137-47	18577-18579	be	_	_	_	_	
137-48	18580-18587	queried	_	_	_	_	
137-49	18588-18592	from	_	_	_	_	
137-50	18592-18593	.	_	_	_	_	

#Text=Reply
#Text=Matthew E says:
#Text=26 Oct 20 at 3:23
#Text=right on, Nilesh and Dafoe.
138-1	18594-18599	Reply	_	_	_	_	
138-2	18600-18607	Matthew	_	_	_	_	
138-3	18608-18609	E	_	_	_	_	
138-4	18610-18614	says	_	_	_	_	
138-5	18614-18615	:	_	_	_	_	
138-6	18616-18618	26	_	_	_	_	
138-7	18619-18622	Oct	_	_	_	_	
138-8	18623-18625	20	_	_	_	_	
138-9	18626-18628	at	_	_	_	_	
138-10	18629-18630	3	_	_	_	_	
138-11	18630-18631	:	_	_	_	_	
138-12	18631-18633	23	_	_	_	_	
138-13	18634-18639	right	_	_	_	_	
138-14	18640-18642	on	_	_	_	_	
138-15	18642-18643	,	_	_	_	_	
138-16	18644-18650	Nilesh	_	_	_	_	
138-17	18651-18654	and	_	_	_	_	
138-18	18655-18660	Dafoe	_	_	_	_	
138-19	18660-18661	.	_	_	_	_	

#Text=Others:
#Text=#include
#Text=Reply
#Text=Emmanuel Casas says:
#Text=21 Jan 21 at 5:48
#Text=Im concern about the fact PGBENCH is based on http://www.tpc.org/tpcb/ which is obsolete, maybe im missing something here, any thoughts about this guys ?
139-1	18662-18668	Others	_	_	_	_	
139-2	18668-18669	:	_	_	_	_	
139-3	18670-18671	#	_	_	_	_	
139-4	18671-18678	include	_	_	_	_	
139-5	18679-18684	Reply	_	_	_	_	
139-6	18685-18693	Emmanuel	_	_	_	_	
139-7	18694-18699	Casas	_	_	_	_	
139-8	18700-18704	says	_	_	_	_	
139-9	18704-18705	:	_	_	_	_	
139-10	18706-18708	21	_	_	_	_	
139-11	18709-18712	Jan	_	_	_	_	
139-12	18713-18715	21	_	_	_	_	
139-13	18716-18718	at	_	_	_	_	
139-14	18719-18720	5	_	_	_	_	
139-15	18720-18721	:	_	_	_	_	
139-16	18721-18723	48	_	_	_	_	
139-17	18724-18726	Im	_	_	_	_	
139-18	18727-18734	concern	_	_	_	_	
139-19	18735-18740	about	_	_	_	_	
139-20	18741-18744	the	_	_	_	_	
139-21	18745-18749	fact	_	_	_	_	
139-22	18750-18757	PGBENCH	_	_	_	_	
139-23	18758-18760	is	_	_	_	_	
139-24	18761-18766	based	_	_	_	_	
139-25	18767-18769	on	_	_	_	_	
139-26	18770-18774	http	_	_	_	_	
139-27	18774-18775	:	_	_	_	_	
139-28	18775-18776	/	_	_	_	_	
139-29	18776-18777	/	_	_	_	_	
139-30	18777-18788	www.tpc.org	_	_	_	_	
139-31	18788-18789	/	_	_	_	_	
139-32	18789-18793	tpcb	_	_	_	_	
139-33	18793-18794	/	_	_	_	_	
139-34	18795-18800	which	_	_	_	_	
139-35	18801-18803	is	_	_	_	_	
139-36	18804-18812	obsolete	_	_	_	_	
139-37	18812-18813	,	_	_	_	_	
139-38	18814-18819	maybe	_	_	_	_	
139-39	18820-18822	im	_	_	_	_	
139-40	18823-18830	missing	_	_	_	_	
139-41	18831-18840	something	_	_	_	_	
139-42	18841-18845	here	_	_	_	_	
139-43	18845-18846	,	_	_	_	_	
139-44	18847-18850	any	_	_	_	_	
139-45	18851-18859	thoughts	_	_	_	_	
139-46	18860-18865	about	_	_	_	_	
139-47	18866-18870	this	_	_	_	_	
139-48	18871-18875	guys	_	_	_	_	
139-49	18876-18877	?	_	_	_	_	

#Text=Is there a better way to measure the TPS in postgresql ?
140-1	18878-18880	Is	_	_	_	_	
140-2	18881-18886	there	_	_	_	_	
140-3	18887-18888	a	_	_	_	_	
140-4	18889-18895	better	_	_	_	_	
140-5	18896-18899	way	_	_	_	_	
140-6	18900-18902	to	_	_	_	_	
140-7	18903-18910	measure	_	_	_	_	
140-8	18911-18914	the	_	_	_	_	
140-9	18915-18918	TPS	_	_	_	_	
140-10	18919-18921	in	_	_	_	_	
140-11	18922-18932	postgresql	_	_	_	_	
140-12	18933-18934	?	_	_	_	_	

#Text=Reply
#Text=Leave a Reply Cancel replyYour email address will not be published.
141-1	18935-18940	Reply	_	_	_	_	
141-2	18941-18946	Leave	_	_	_	_	
141-3	18947-18948	a	_	_	_	_	
141-4	18949-18954	Reply	_	_	_	_	
141-5	18955-18961	Cancel	_	_	_	_	
141-6	18962-18971	replyYour	_	_	_	_	
141-7	18972-18977	email	_	_	_	_	
141-8	18978-18985	address	_	_	_	_	
141-9	18986-18990	will	_	_	_	_	
141-10	18991-18994	not	_	_	_	_	
141-11	18995-18997	be	_	_	_	_	
141-12	18998-19007	published	_	_	_	_	
141-13	19007-19008	.	_	_	_	_	

#Text=Required fields are marked *Comment Name *
#Text=Email *
#Text=Website
#Text=Save my name, email, and website in this browser for the next time I comment.
142-1	19009-19017	Required	_	_	_	_	
142-2	19018-19024	fields	_	_	_	_	
142-3	19025-19028	are	_	_	_	_	
142-4	19029-19035	marked	_	_	_	_	
142-5	19036-19037	*	_	_	_	_	
142-6	19037-19044	Comment	_	_	_	_	
142-7	19045-19049	Name	_	_	_	_	
142-8	19050-19051	*	_	_	_	_	
142-9	19052-19057	Email	_	_	_	_	
142-10	19058-19059	*	_	_	_	_	
142-11	19060-19067	Website	_	_	_	_	
142-12	19068-19072	Save	_	_	_	_	
142-13	19073-19075	my	_	_	_	_	
142-14	19076-19080	name	_	_	_	_	
142-15	19080-19081	,	_	_	_	_	
142-16	19082-19087	email	_	_	_	_	
142-17	19087-19088	,	_	_	_	_	
142-18	19089-19092	and	_	_	_	_	
142-19	19093-19100	website	_	_	_	_	
142-20	19101-19103	in	_	_	_	_	
142-21	19104-19108	this	_	_	_	_	
142-22	19109-19116	browser	_	_	_	_	
142-23	19117-19120	for	_	_	_	_	
142-24	19121-19124	the	_	_	_	_	
142-25	19125-19129	next	_	_	_	_	
142-26	19130-19134	time	_	_	_	_	
142-27	19135-19136	I	_	_	_	_	
142-28	19137-19144	comment	_	_	_	_	
142-29	19144-19145	.	_	_	_	_	

#Text=This site uses Akismet to reduce spam.
143-1	19146-19150	This	_	_	_	_	
143-2	19151-19155	site	_	_	_	_	
143-3	19156-19160	uses	_	_	_	_	
143-4	19161-19168	Akismet	_	_	_	_	
143-5	19169-19171	to	_	_	_	_	
143-6	19172-19178	reduce	_	_	_	_	
143-7	19179-19183	spam	_	_	_	_	
143-8	19183-19184	.	_	_	_	_	

#Text=Learn how your comment data is processed.
#Text=© 2021 All Rights Reserved.
144-1	19185-19190	Learn	_	_	_	_	
144-2	19191-19194	how	_	_	_	_	
144-3	19195-19199	your	_	_	_	_	
144-4	19200-19207	comment	_	_	_	_	
144-5	19208-19212	data	_	_	_	_	
144-6	19213-19215	is	_	_	_	_	
144-7	19216-19225	processed	_	_	_	_	
144-8	19225-19226	.	_	_	_	_	
144-9	19227-19228	©	_	_	_	_	
144-10	19229-19233	2021	_	_	_	_	
144-11	19234-19237	All	_	_	_	_	
144-12	19238-19244	Rights	_	_	_	_	
144-13	19245-19253	Reserved	_	_	_	_	
144-14	19253-19254	.	_	_	_	_	

#Text=Proudly powered by Wordpress
#Text=Stack Overflow
#Text=Questions
#Text=Jobs
#Text=Developer Jobs Directory
#Text=Salary Calculator
#Text=Products
#Text=Teams
#Text=Talent
#Text=Advertising
#Text=Enterprise
#Text=Company
#Text=About
#Text=Press
#Text=Work Here
#Text=Legal
#Text=Privacy Policy
#Text=Contact Us
#Text=Channels
#Text=Podcast
#Text=Newsletter
#Text=Facebook
#Text=Twitter
#Text=LinkedIn
#Text=Instagram
145-1	19255-19262	Proudly	_	_	_	_	
145-2	19263-19270	powered	_	_	_	_	
145-3	19271-19273	by	_	_	_	_	
145-4	19274-19283	Wordpress	_	_	_	_	
145-5	19284-19289	Stack	_	_	_	_	
145-6	19290-19298	Overflow	_	_	_	_	
145-7	19299-19308	Questions	_	_	_	_	
145-8	19309-19313	Jobs	_	_	_	_	
145-9	19314-19323	Developer	_	_	_	_	
145-10	19324-19328	Jobs	_	_	_	_	
145-11	19329-19338	Directory	_	_	_	_	
145-12	19339-19345	Salary	_	_	_	_	
145-13	19346-19356	Calculator	_	_	_	_	
145-14	19357-19365	Products	_	_	_	_	
145-15	19366-19371	Teams	_	_	_	_	
145-16	19372-19378	Talent	_	_	_	_	
145-17	19379-19390	Advertising	_	_	_	_	
145-18	19391-19401	Enterprise	_	_	_	_	
145-19	19402-19409	Company	_	_	_	_	
145-20	19410-19415	About	_	_	_	_	
145-21	19416-19421	Press	_	_	_	_	
145-22	19422-19426	Work	_	_	_	_	
145-23	19427-19431	Here	_	_	_	_	
145-24	19432-19437	Legal	_	_	_	_	
145-25	19438-19445	Privacy	_	_	_	_	
145-26	19446-19452	Policy	_	_	_	_	
145-27	19453-19460	Contact	_	_	_	_	
145-28	19461-19463	Us	_	_	_	_	
145-29	19464-19472	Channels	_	_	_	_	
145-30	19473-19480	Podcast	_	_	_	_	
145-31	19481-19491	Newsletter	_	_	_	_	
145-32	19492-19500	Facebook	_	_	_	_	
145-33	19501-19508	Twitter	_	_	_	_	
145-34	19509-19517	LinkedIn	_	_	_	_	
145-35	19518-19527	Instagram	_	_	_	_	
