#FORMAT=WebAnno TSV 3.3


#Text=Improve database performance with connection pooling - Stack Overflow Blog
#Text=Reduce distractions and boost developer productivity with Stack Overflow for Teams.
1-1	0-7	Improve	
1-2	8-16	database	
1-3	17-28	performance	
1-4	29-33	with	
1-5	34-44	connection	
1-6	45-52	pooling	
1-7	53-54	-	
1-8	55-60	Stack	
1-9	61-69	Overflow	
1-10	70-74	Blog	
1-11	75-81	Reduce	
1-12	82-94	distractions	
1-13	95-98	and	
1-14	99-104	boost	
1-15	105-114	developer	
1-16	115-127	productivity	
1-17	128-132	with	
1-18	133-138	Stack	
1-19	139-147	Overflow	
1-20	148-151	for	
1-21	152-157	Teams	
1-22	157-158	.	

#Text=Now available for free
#Text=What is Teams?
2-1	159-162	Now	
2-2	163-172	available	
2-3	173-176	for	
2-4	177-181	free	
2-5	182-186	What	
2-6	187-189	is	
2-7	190-195	Teams	
2-8	195-196	?	

#Text=Essays, opinions, and advice on the act of computer programming from Stack Overflow.
3-1	197-203	Essays	
3-2	203-204	,	
3-3	205-213	opinions	
3-4	213-214	,	
3-5	215-218	and	
3-6	219-225	advice	
3-7	226-228	on	
3-8	229-232	the	
3-9	233-236	act	
3-10	237-239	of	
3-11	240-248	computer	
3-12	249-260	programming	
3-13	261-265	from	
3-14	266-271	Stack	
3-15	272-280	Overflow	
3-16	280-281	.	

#Text=Search for:
#Text=Latest
#Text=Newsletter
#Text=Podcast
#Text=Company
#Text=code-for-a-living
#Text=October 14, 2020
#Text=Improve database performance with connection pooling
#Text=We tend to rely on caching solutions to improve database performance.
4-1	282-288	Search	
4-2	289-292	for	
4-3	292-293	:	
4-4	294-300	Latest	
4-5	301-311	Newsletter	
4-6	312-319	Podcast	
4-7	320-327	Company	
4-8	328-345	code-for-a-living	
4-9	346-353	October	
4-10	354-356	14	
4-11	356-357	,	
4-12	358-362	2020	
4-13	363-370	Improve	
4-14	371-379	database	
4-15	380-391	performance	
4-16	392-396	with	
4-17	397-407	connection	
4-18	408-415	pooling	
4-19	416-418	We	
4-20	419-423	tend	
4-21	424-426	to	
4-22	427-431	rely	
4-23	432-434	on	
4-24	435-442	caching	
4-25	443-452	solutions	
4-26	453-455	to	
4-27	456-463	improve	
4-28	464-472	database	
4-29	473-484	performance	
4-30	484-485	.	

#Text=Caching frequently-accessed queries in memory or via a database can optimize write/read performance and reduce network latency, especially for heavy-workload applications, such as gaming services and Q&A portals.
5-1	486-493	Caching	
5-2	494-513	frequently-accessed	
5-3	514-521	queries	
5-4	522-524	in	
5-5	525-531	memory	
5-6	532-534	or	
5-7	535-538	via	
5-8	539-540	a	
5-9	541-549	database	
5-10	550-553	can	
5-11	554-562	optimize	
5-12	563-568	write	
5-13	568-569	/	
5-14	569-573	read	
5-15	574-585	performance	
5-16	586-589	and	
5-17	590-596	reduce	
5-18	597-604	network	
5-19	605-612	latency	
5-20	612-613	,	
5-21	614-624	especially	
5-22	625-628	for	
5-23	629-643	heavy-workload	
5-24	644-656	applications	
5-25	656-657	,	
5-26	658-662	such	
5-27	663-665	as	
5-28	666-672	gaming	
5-29	673-681	services	
5-30	682-685	and	
5-31	686-687	Q	
5-32	687-688	&	
5-33	688-689	A	
5-34	690-697	portals	
5-35	697-698	.	

#Text=But you can further improve performance by pooling users’ connections to a database.
6-1	699-702	But	
6-2	703-706	you	
6-3	707-710	can	
6-4	711-718	further	
6-5	719-726	improve	
6-6	727-738	performance	
6-7	739-741	by	
6-8	742-749	pooling	
6-9	750-755	users	
6-10	755-756	’	
6-11	757-768	connections	
6-12	769-771	to	
6-13	772-773	a	
6-14	774-782	database	
6-15	782-783	.	

#Text=Client users need…
#Text=Michael Aboagye
#Text=We tend to rely on caching solutions to improve database performance.
7-1	784-790	Client	
7-2	791-796	users	
7-3	797-801	need	
7-4	801-802	…	
7-5	803-810	Michael	
7-6	811-818	Aboagye	
7-7	819-821	We	
7-8	822-826	tend	
7-9	827-829	to	
7-10	830-834	rely	
7-11	835-837	on	
7-12	838-845	caching	
7-13	846-855	solutions	
7-14	856-858	to	
7-15	859-866	improve	
7-16	867-875	database	
7-17	876-887	performance	
7-18	887-888	.	

#Text=Caching frequently-accessed queries in memory or via a database can optimize write/read performance and reduce network latency, especially for heavy-workload applications, such as gaming services and Q&A portals.
8-1	889-896	Caching	
8-2	897-916	frequently-accessed	
8-3	917-924	queries	
8-4	925-927	in	
8-5	928-934	memory	
8-6	935-937	or	
8-7	938-941	via	
8-8	942-943	a	
8-9	944-952	database	
8-10	953-956	can	
8-11	957-965	optimize	
8-12	966-971	write	
8-13	971-972	/	
8-14	972-976	read	
8-15	977-988	performance	
8-16	989-992	and	
8-17	993-999	reduce	
8-18	1000-1007	network	
8-19	1008-1015	latency	
8-20	1015-1016	,	
8-21	1017-1027	especially	
8-22	1028-1031	for	
8-23	1032-1046	heavy-workload	
8-24	1047-1059	applications	
8-25	1059-1060	,	
8-26	1061-1065	such	
8-27	1066-1068	as	
8-28	1069-1075	gaming	
8-29	1076-1084	services	
8-30	1085-1088	and	
8-31	1089-1090	Q	
8-32	1090-1091	&	
8-33	1091-1092	A	
8-34	1093-1100	portals	
8-35	1100-1101	.	

#Text=But you can further improve performance by pooling users’ connections to a database.
9-1	1102-1105	But	
9-2	1106-1109	you	
9-3	1110-1113	can	
9-4	1114-1121	further	
9-5	1122-1129	improve	
9-6	1130-1141	performance	
9-7	1142-1144	by	
9-8	1145-1152	pooling	
9-9	1153-1158	users	
9-10	1158-1159	’	
9-11	1160-1171	connections	
9-12	1172-1174	to	
9-13	1175-1176	a	
9-14	1177-1185	database	
9-15	1185-1186	.	

#Text=Client users need to create a connection to a web service before they can perform CRUD operations.
10-1	1187-1193	Client	
10-2	1194-1199	users	
10-3	1200-1204	need	
10-4	1205-1207	to	
10-5	1208-1214	create	
10-6	1215-1216	a	
10-7	1217-1227	connection	
10-8	1228-1230	to	
10-9	1231-1232	a	
10-10	1233-1236	web	
10-11	1237-1244	service	
10-12	1245-1251	before	
10-13	1252-1256	they	
10-14	1257-1260	can	
10-15	1261-1268	perform	
10-16	1269-1273	CRUD	
10-17	1274-1284	operations	
10-18	1284-1285	.	

#Text=Most web services are backed by relational database servers such as Postgres or MySQL.
11-1	1286-1290	Most	
11-2	1291-1294	web	
11-3	1295-1303	services	
11-4	1304-1307	are	
11-5	1308-1314	backed	
11-6	1315-1317	by	
11-7	1318-1328	relational	
11-8	1329-1337	database	
11-9	1338-1345	servers	
11-10	1346-1350	such	
11-11	1351-1353	as	
11-12	1354-1362	Postgres	
11-13	1363-1365	or	
11-14	1366-1371	MySQL	
11-15	1371-1372	.	

#Text=With PostgreSQL, each new connection can take up to 1.3MB in memory.
12-1	1373-1377	With	
12-2	1378-1388	PostgreSQL	
12-3	1388-1389	,	
12-4	1390-1394	each	
12-5	1395-1398	new	
12-6	1399-1409	connection	
12-7	1410-1413	can	
12-8	1414-1418	take	
12-9	1419-1421	up	
12-10	1422-1424	to	
12-11	1425-1430	1.3MB	
12-12	1431-1433	in	
12-13	1434-1440	memory	
12-14	1440-1441	.	

#Text=In a production environment where we expect to receive thousands or millions of concurrent connections to the backend service, this can quickly exceed your memory resources (or if you have a scalable cloud, it can get very expensive very quickly).
13-1	1442-1444	In	
13-2	1445-1446	a	
13-3	1447-1457	production	
13-4	1458-1469	environment	
13-5	1470-1475	where	
13-6	1476-1478	we	
13-7	1479-1485	expect	
13-8	1486-1488	to	
13-9	1489-1496	receive	
13-10	1497-1506	thousands	
13-11	1507-1509	or	
13-12	1510-1518	millions	
13-13	1519-1521	of	
13-14	1522-1532	concurrent	
13-15	1533-1544	connections	
13-16	1545-1547	to	
13-17	1548-1551	the	
13-18	1552-1559	backend	
13-19	1560-1567	service	
13-20	1567-1568	,	
13-21	1569-1573	this	
13-22	1574-1577	can	
13-23	1578-1585	quickly	
13-24	1586-1592	exceed	
13-25	1593-1597	your	
13-26	1598-1604	memory	
13-27	1605-1614	resources	
13-28	1615-1616	(	
13-29	1616-1618	or	
13-30	1619-1621	if	
13-31	1622-1625	you	
13-32	1626-1630	have	
13-33	1631-1632	a	
13-34	1633-1641	scalable	
13-35	1642-1647	cloud	
13-36	1647-1648	,	
13-37	1649-1651	it	
13-38	1652-1655	can	
13-39	1656-1659	get	
13-40	1660-1664	very	
13-41	1665-1674	expensive	
13-42	1675-1679	very	
13-43	1680-1687	quickly	
13-44	1687-1688	)	
13-45	1688-1689	.	

#Text=Because each time a client attempts to access a backend service, it requires OS resources to create, maintain, and close connections to the datastore.
14-1	1690-1697	Because	
14-2	1698-1702	each	
14-3	1703-1707	time	
14-4	1708-1709	a	
14-5	1710-1716	client	
14-6	1717-1725	attempts	
14-7	1726-1728	to	
14-8	1729-1735	access	
14-9	1736-1737	a	
14-10	1738-1745	backend	
14-11	1746-1753	service	
14-12	1753-1754	,	
14-13	1755-1757	it	
14-14	1758-1766	requires	
14-15	1767-1769	OS	
14-16	1770-1779	resources	
14-17	1780-1782	to	
14-18	1783-1789	create	
14-19	1789-1790	,	
14-20	1791-1799	maintain	
14-21	1799-1800	,	
14-22	1801-1804	and	
14-23	1805-1810	close	
14-24	1811-1822	connections	
14-25	1823-1825	to	
14-26	1826-1829	the	
14-27	1830-1839	datastore	
14-28	1839-1840	.	

#Text=This creates a large amount of overhead causing database performance to deteriorate.
15-1	1841-1845	This	
15-2	1846-1853	creates	
15-3	1854-1855	a	
15-4	1856-1861	large	
15-5	1862-1868	amount	
15-6	1869-1871	of	
15-7	1872-1880	overhead	
15-8	1881-1888	causing	
15-9	1889-1897	database	
15-10	1898-1909	performance	
15-11	1910-1912	to	
15-12	1913-1924	deteriorate	
15-13	1924-1925	.	

#Text=Consumers of your service expect fast response times.
16-1	1926-1935	Consumers	
16-2	1936-1938	of	
16-3	1939-1943	your	
16-4	1944-1951	service	
16-5	1952-1958	expect	
16-6	1959-1963	fast	
16-7	1964-1972	response	
16-8	1973-1978	times	
16-9	1978-1979	.	

#Text=If that performance deteriorates, it can lead to poor user experiences, revenue losses, and even unscheduled downtime.
17-1	1980-1982	If	
17-2	1983-1987	that	
17-3	1988-1999	performance	
17-4	2000-2012	deteriorates	
17-5	2012-2013	,	
17-6	2014-2016	it	
17-7	2017-2020	can	
17-8	2021-2025	lead	
17-9	2026-2028	to	
17-10	2029-2033	poor	
17-11	2034-2038	user	
17-12	2039-2050	experiences	
17-13	2050-2051	,	
17-14	2052-2059	revenue	
17-15	2060-2066	losses	
17-16	2066-2067	,	
17-17	2068-2071	and	
17-18	2072-2076	even	
17-19	2077-2088	unscheduled	
17-20	2089-2097	downtime	
17-21	2097-2098	.	

#Text=If you expose your backend service as an API, repeated slowdowns and failures could cause cascading problems and lose you customers.
18-1	2099-2101	If	
18-2	2102-2105	you	
18-3	2106-2112	expose	
18-4	2113-2117	your	
18-5	2118-2125	backend	
18-6	2126-2133	service	
18-7	2134-2136	as	
18-8	2137-2139	an	
18-9	2140-2143	API	
18-10	2143-2144	,	
18-11	2145-2153	repeated	
18-12	2154-2163	slowdowns	
18-13	2164-2167	and	
18-14	2168-2176	failures	
18-15	2177-2182	could	
18-16	2183-2188	cause	
18-17	2189-2198	cascading	
18-18	2199-2207	problems	
18-19	2208-2211	and	
18-20	2212-2216	lose	
18-21	2217-2220	you	
18-22	2221-2230	customers	
18-23	2230-2231	.	

#Text=Instead of opening and closing connections for every request, connection pooling uses a cache of database connections that can be reused when future requests to the database are required.
19-1	2232-2239	Instead	
19-2	2240-2242	of	
19-3	2243-2250	opening	
19-4	2251-2254	and	
19-5	2255-2262	closing	
19-6	2263-2274	connections	
19-7	2275-2278	for	
19-8	2279-2284	every	
19-9	2285-2292	request	
19-10	2292-2293	,	
19-11	2294-2304	connection	
19-12	2305-2312	pooling	
19-13	2313-2317	uses	
19-14	2318-2319	a	
19-15	2320-2325	cache	
19-16	2326-2328	of	
19-17	2329-2337	database	
19-18	2338-2349	connections	
19-19	2350-2354	that	
19-20	2355-2358	can	
19-21	2359-2361	be	
19-22	2362-2368	reused	
19-23	2369-2373	when	
19-24	2374-2380	future	
19-25	2381-2389	requests	
19-26	2390-2392	to	
19-27	2393-2396	the	
19-28	2397-2405	database	
19-29	2406-2409	are	
19-30	2410-2418	required	
19-31	2418-2419	.	

#Text=It lets your database scale effectively as the data stored there and the number of clients accessing it grow.
20-1	2420-2422	It	
20-2	2423-2427	lets	
20-3	2428-2432	your	
20-4	2433-2441	database	
20-5	2442-2447	scale	
20-6	2448-2459	effectively	
20-7	2460-2462	as	
20-8	2463-2466	the	
20-9	2467-2471	data	
20-10	2472-2478	stored	
20-11	2479-2484	there	
20-12	2485-2488	and	
20-13	2489-2492	the	
20-14	2493-2499	number	
20-15	2500-2502	of	
20-16	2503-2510	clients	
20-17	2511-2520	accessing	
20-18	2521-2523	it	
20-19	2524-2528	grow	
20-20	2528-2529	.	

#Text=Traffic is never constant, so pooling can better manage traffic peaks without causing outages.
21-1	2530-2537	Traffic	
21-2	2538-2540	is	
21-3	2541-2546	never	
21-4	2547-2555	constant	
21-5	2555-2556	,	
21-6	2557-2559	so	
21-7	2560-2567	pooling	
21-8	2568-2571	can	
21-9	2572-2578	better	
21-10	2579-2585	manage	
21-11	2586-2593	traffic	
21-12	2594-2599	peaks	
21-13	2600-2607	without	
21-14	2608-2615	causing	
21-15	2616-2623	outages	
21-16	2623-2624	.	

#Text=Your production database shouldn’t be your bottleneck.
22-1	2625-2629	Your	
22-2	2630-2640	production	
22-3	2641-2649	database	
22-4	2650-2657	shouldn	
22-5	2657-2658	’	
22-6	2658-2659	t	
22-7	2660-2662	be	
22-8	2663-2667	your	
22-9	2668-2678	bottleneck	
22-10	2678-2679	.	

#Text=In this article, we will explore how we can use connection pooling middleware like pgpool and pgbouncer to reduce overhead and network latency.
23-1	2680-2682	In	
23-2	2683-2687	this	
23-3	2688-2695	article	
23-4	2695-2696	,	
23-5	2697-2699	we	
23-6	2700-2704	will	
23-7	2705-2712	explore	
23-8	2713-2716	how	
23-9	2717-2719	we	
23-10	2720-2723	can	
23-11	2724-2727	use	
23-12	2728-2738	connection	
23-13	2739-2746	pooling	
23-14	2747-2757	middleware	
23-15	2758-2762	like	
23-16	2763-2769	pgpool	
23-17	2770-2773	and	
23-18	2774-2783	pgbouncer	
23-19	2784-2786	to	
23-20	2787-2793	reduce	
23-21	2794-2802	overhead	
23-22	2803-2806	and	
23-23	2807-2814	network	
23-24	2815-2822	latency	
23-25	2822-2823	.	

#Text=For illustration purposes, I will use pgpool-II and pgbouncer to explain concepts of connection pooling and compare which one is more effective in pooling connections because some connection poolers can even affect database performance.
24-1	2824-2827	For	
24-2	2828-2840	illustration	
24-3	2841-2849	purposes	
24-4	2849-2850	,	
24-5	2851-2852	I	
24-6	2853-2857	will	
24-7	2858-2861	use	
24-8	2862-2871	pgpool-II	
24-9	2872-2875	and	
24-10	2876-2885	pgbouncer	
24-11	2886-2888	to	
24-12	2889-2896	explain	
24-13	2897-2905	concepts	
24-14	2906-2908	of	
24-15	2909-2919	connection	
24-16	2920-2927	pooling	
24-17	2928-2931	and	
24-18	2932-2939	compare	
24-19	2940-2945	which	
24-20	2946-2949	one	
24-21	2950-2952	is	
24-22	2953-2957	more	
24-23	2958-2967	effective	
24-24	2968-2970	in	
24-25	2971-2978	pooling	
24-26	2979-2990	connections	
24-27	2991-2998	because	
24-28	2999-3003	some	
24-29	3004-3014	connection	
24-30	3015-3022	poolers	
24-31	3023-3026	can	
24-32	3027-3031	even	
24-33	3032-3038	affect	
24-34	3039-3047	database	
24-35	3048-3059	performance	
24-36	3059-3060	.	

#Text=We will look at how to use pgbench to benchmark Postgres databases since it is the standard tool provided by PostgreSQL.
25-1	3061-3063	We	
25-2	3064-3068	will	
25-3	3069-3073	look	
25-4	3074-3076	at	
25-5	3077-3080	how	
25-6	3081-3083	to	
25-7	3084-3087	use	
25-8	3088-3095	pgbench	
25-9	3096-3098	to	
25-10	3099-3108	benchmark	
25-11	3109-3117	Postgres	
25-12	3118-3127	databases	
25-13	3128-3133	since	
25-14	3134-3136	it	
25-15	3137-3139	is	
25-16	3140-3143	the	
25-17	3144-3152	standard	
25-18	3153-3157	tool	
25-19	3158-3166	provided	
25-20	3167-3169	by	
25-21	3170-3180	PostgreSQL	
25-22	3180-3181	.	

#Text=Different hardware provides different benchmarking results based on the plan you set.
26-1	3182-3191	Different	
26-2	3192-3200	hardware	
26-3	3201-3209	provides	
26-4	3210-3219	different	
26-5	3220-3232	benchmarking	
26-6	3233-3240	results	
26-7	3241-3246	based	
26-8	3247-3249	on	
26-9	3250-3253	the	
26-10	3254-3258	plan	
26-11	3259-3262	you	
26-12	3263-3266	set	
26-13	3266-3267	.	

#Text=For the  tests below, I’m using these specifications.
27-1	3268-3271	For	
27-2	3272-3275	the	
27-3	3275-3276	 	
27-4	3277-3282	tests	
27-5	3283-3288	below	
27-6	3288-3289	,	
27-7	3290-3291	I	
27-8	3291-3292	’	
27-9	3292-3293	m	
27-10	3294-3299	using	
27-11	3300-3305	these	
27-12	3306-3320	specifications	
27-13	3320-3321	.	

#Text=Specs of my test machine:
#Text=Linode Server: Ubuntu 16 – 64 bit ( Virtual Machine)  Postgres version 9.5Memory: 2GBDatabase size: 800MBStorage: 2GB
#Text=Also it is important to isolate the Postgres database server from other frameworks like logstash shipper and other servers for collecting performance metrics because most of these components consume more memory and will affect the test results.
28-1	3322-3327	Specs	
28-2	3328-3330	of	
28-3	3331-3333	my	
28-4	3334-3338	test	
28-5	3339-3346	machine	
28-6	3346-3347	:	
28-7	3348-3354	Linode	
28-8	3355-3361	Server	
28-9	3361-3362	:	
28-10	3363-3369	Ubuntu	
28-11	3370-3372	16	
28-12	3373-3374	–	
28-13	3375-3377	64	
28-14	3378-3381	bit	
28-15	3382-3383	(	
28-16	3384-3391	Virtual	
28-17	3392-3399	Machine	
28-18	3399-3400	)	
28-19	3400-3402	  	
28-20	3402-3410	Postgres	
28-21	3411-3418	version	
28-22	3419-3428	9.5Memory	
28-23	3428-3429	:	
28-24	3430-3441	2GBDatabase	
28-25	3442-3446	size	
28-26	3446-3447	:	
28-27	3448-3460	800MBStorage	
28-28	3460-3461	:	
28-29	3462-3465	2GB	
28-30	3466-3470	Also	
28-31	3471-3473	it	
28-32	3474-3476	is	
28-33	3477-3486	important	
28-34	3487-3489	to	
28-35	3490-3497	isolate	
28-36	3498-3501	the	
28-37	3502-3510	Postgres	
28-38	3511-3519	database	
28-39	3520-3526	server	
28-40	3527-3531	from	
28-41	3532-3537	other	
28-42	3538-3548	frameworks	
28-43	3549-3553	like	
28-44	3554-3562	logstash	
28-45	3563-3570	shipper	
28-46	3571-3574	and	
28-47	3575-3580	other	
28-48	3581-3588	servers	
28-49	3589-3592	for	
28-50	3593-3603	collecting	
28-51	3604-3615	performance	
28-52	3616-3623	metrics	
28-53	3624-3631	because	
28-54	3632-3636	most	
28-55	3637-3639	of	
28-56	3640-3645	these	
28-57	3646-3656	components	
28-58	3657-3664	consume	
28-59	3665-3669	more	
28-60	3670-3676	memory	
28-61	3677-3680	and	
28-62	3681-3685	will	
28-63	3686-3692	affect	
28-64	3693-3696	the	
28-65	3697-3701	test	
28-66	3702-3709	results	
28-67	3709-3710	.	

#Text=Creating a pooled connection
#Text=Connecting to a backend service is an expensive operation, as it consists of the following steps:
#Text=Open a connection to the database using the database driver.Open a TCP socket for CRUD operations Perform CRUD operations over the socket.  
29-1	3711-3719	Creating	
29-2	3720-3721	a	
29-3	3722-3728	pooled	
29-4	3729-3739	connection	
29-5	3740-3750	Connecting	
29-6	3751-3753	to	
29-7	3754-3755	a	
29-8	3756-3763	backend	
29-9	3764-3771	service	
29-10	3772-3774	is	
29-11	3775-3777	an	
29-12	3778-3787	expensive	
29-13	3788-3797	operation	
29-14	3797-3798	,	
29-15	3799-3801	as	
29-16	3802-3804	it	
29-17	3805-3813	consists	
29-18	3814-3816	of	
29-19	3817-3820	the	
29-20	3821-3830	following	
29-21	3831-3836	steps	
29-22	3836-3837	:	
29-23	3838-3842	Open	
29-24	3843-3844	a	
29-25	3845-3855	connection	
29-26	3856-3858	to	
29-27	3859-3862	the	
29-28	3863-3871	database	
29-29	3872-3877	using	
29-30	3878-3881	the	
29-31	3882-3890	database	
29-32	3891-3902	driver.Open	
29-33	3903-3904	a	
29-34	3905-3908	TCP	
29-35	3909-3915	socket	
29-36	3916-3919	for	
29-37	3920-3924	CRUD	
29-38	3925-3935	operations	
29-39	3935-3936	 	
29-40	3936-3943	Perform	
29-41	3944-3948	CRUD	
29-42	3949-3959	operations	
29-43	3960-3964	over	
29-44	3965-3968	the	
29-45	3969-3975	socket	
29-46	3975-3976	.	
29-47	3976-3978	  	

#Text=Close the connection.Close the socket.
30-1	3978-3983	Close	
30-2	3984-3987	the	
30-3	3988-4004	connection.Close	
30-4	4005-4008	the	
30-5	4009-4015	socket	
30-6	4015-4016	.	

#Text=In a production environment where we expect thousands of concurrent open and close connections from clients, doing the above steps for every single connection can cause the database to perform poorly.
31-1	4017-4019	In	
31-2	4020-4021	a	
31-3	4022-4032	production	
31-4	4033-4044	environment	
31-5	4045-4050	where	
31-6	4051-4053	we	
31-7	4054-4060	expect	
31-8	4061-4070	thousands	
31-9	4071-4073	of	
31-10	4074-4084	concurrent	
31-11	4085-4089	open	
31-12	4090-4093	and	
31-13	4094-4099	close	
31-14	4100-4111	connections	
31-15	4112-4116	from	
31-16	4117-4124	clients	
31-17	4124-4125	,	
31-18	4126-4131	doing	
31-19	4132-4135	the	
31-20	4136-4141	above	
31-21	4142-4147	steps	
31-22	4148-4151	for	
31-23	4152-4157	every	
31-24	4158-4164	single	
31-25	4165-4175	connection	
31-26	4176-4179	can	
31-27	4180-4185	cause	
31-28	4186-4189	the	
31-29	4190-4198	database	
31-30	4199-4201	to	
31-31	4202-4209	perform	
31-32	4210-4216	poorly	
31-33	4216-4217	.	

#Text=We can resolve this problem by pooling connections from clients.
32-1	4218-4220	We	
32-2	4221-4224	can	
32-3	4225-4232	resolve	
32-4	4233-4237	this	
32-5	4238-4245	problem	
32-6	4246-4248	by	
32-7	4249-4256	pooling	
32-8	4257-4268	connections	
32-9	4269-4273	from	
32-10	4274-4281	clients	
32-11	4281-4282	.	

#Text=Instead of creating a new connection with every request, connection poolers reuse some existing connections.
33-1	4283-4290	Instead	
33-2	4291-4293	of	
33-3	4294-4302	creating	
33-4	4303-4304	a	
33-5	4305-4308	new	
33-6	4309-4319	connection	
33-7	4320-4324	with	
33-8	4325-4330	every	
33-9	4331-4338	request	
33-10	4338-4339	,	
33-11	4340-4350	connection	
33-12	4351-4358	poolers	
33-13	4359-4364	reuse	
33-14	4365-4369	some	
33-15	4370-4378	existing	
33-16	4379-4390	connections	
33-17	4390-4391	.	

#Text=Thus there is no need to perform multiple expensive full database trips by opening and closing connections to backend service.
34-1	4392-4396	Thus	
34-2	4397-4402	there	
34-3	4403-4405	is	
34-4	4406-4408	no	
34-5	4409-4413	need	
34-6	4414-4416	to	
34-7	4417-4424	perform	
34-8	4425-4433	multiple	
34-9	4434-4443	expensive	
34-10	4444-4448	full	
34-11	4449-4457	database	
34-12	4458-4463	trips	
34-13	4464-4466	by	
34-14	4467-4474	opening	
34-15	4475-4478	and	
34-16	4479-4486	closing	
34-17	4487-4498	connections	
34-18	4499-4501	to	
34-19	4502-4509	backend	
34-20	4510-4517	service	
34-21	4517-4518	.	

#Text=It prevents the overhead of creating a new connection to the database every time there is a request for a database connection with the same properties (i.e name, database, protocol version).
35-1	4519-4521	It	
35-2	4522-4530	prevents	
35-3	4531-4534	the	
35-4	4535-4543	overhead	
35-5	4544-4546	of	
35-6	4547-4555	creating	
35-7	4556-4557	a	
35-8	4558-4561	new	
35-9	4562-4572	connection	
35-10	4573-4575	to	
35-11	4576-4579	the	
35-12	4580-4588	database	
35-13	4589-4594	every	
35-14	4595-4599	time	
35-15	4600-4605	there	
35-16	4606-4608	is	
35-17	4609-4610	a	
35-18	4611-4618	request	
35-19	4619-4622	for	
35-20	4623-4624	a	
35-21	4625-4633	database	
35-22	4634-4644	connection	
35-23	4645-4649	with	
35-24	4650-4653	the	
35-25	4654-4658	same	
35-26	4659-4669	properties	
35-27	4670-4671	(	
35-28	4671-4674	i.e	
35-29	4675-4679	name	
35-30	4679-4680	,	
35-31	4681-4689	database	
35-32	4689-4690	,	
35-33	4691-4699	protocol	
35-34	4700-4707	version	
35-35	4707-4708	)	
35-36	4708-4709	.	

#Text=Pooling middleware like pgbouncer comes with a pool manager.
36-1	4710-4717	Pooling	
36-2	4718-4728	middleware	
36-3	4729-4733	like	
36-4	4734-4743	pgbouncer	
36-5	4744-4749	comes	
36-6	4750-4754	with	
36-7	4755-4756	a	
36-8	4757-4761	pool	
36-9	4762-4769	manager	
36-10	4769-4770	.	

#Text=Usually, the connection pool manager maintains a pool of open database connections.
37-1	4771-4778	Usually	
37-2	4778-4779	,	
37-3	4780-4783	the	
37-4	4784-4794	connection	
37-5	4795-4799	pool	
37-6	4800-4807	manager	
37-7	4808-4817	maintains	
37-8	4818-4819	a	
37-9	4820-4824	pool	
37-10	4825-4827	of	
37-11	4828-4832	open	
37-12	4833-4841	database	
37-13	4842-4853	connections	
37-14	4853-4854	.	

#Text=You can not pool connections without a pool manager.
38-1	4855-4858	You	
38-2	4859-4862	can	
38-3	4863-4866	not	
38-4	4867-4871	pool	
38-5	4872-4883	connections	
38-6	4884-4891	without	
38-7	4892-4893	a	
38-8	4894-4898	pool	
38-9	4899-4906	manager	
38-10	4906-4907	.	

#Text=A pool contains two types of connections:
#Text=Active connection: In use by the application.Idle connection:  Available for use by the application.
39-1	4908-4909	A	
39-2	4910-4914	pool	
39-3	4915-4923	contains	
39-4	4924-4927	two	
39-5	4928-4933	types	
39-6	4934-4936	of	
39-7	4937-4948	connections	
39-8	4948-4949	:	
39-9	4950-4956	Active	
39-10	4957-4967	connection	
39-11	4967-4968	:	
39-12	4969-4971	In	
39-13	4972-4975	use	
39-14	4976-4978	by	
39-15	4979-4982	the	
39-16	4983-4999	application.Idle	
39-17	5000-5010	connection	
39-18	5010-5011	:	
39-19	5011-5012	 	
39-20	5013-5022	Available	
39-21	5023-5026	for	
39-22	5027-5030	use	
39-23	5031-5033	by	
39-24	5034-5037	the	
39-25	5038-5049	application	
39-26	5049-5050	.	

#Text=When a new request to access data from the backend service comes in, the pool manager checks if the pool contains any unused connection and returns one if available.
40-1	5051-5055	When	
40-2	5056-5057	a	
40-3	5058-5061	new	
40-4	5062-5069	request	
40-5	5070-5072	to	
40-6	5073-5079	access	
40-7	5080-5084	data	
40-8	5085-5089	from	
40-9	5090-5093	the	
40-10	5094-5101	backend	
40-11	5102-5109	service	
40-12	5110-5115	comes	
40-13	5116-5118	in	
40-14	5118-5119	,	
40-15	5120-5123	the	
40-16	5124-5128	pool	
40-17	5129-5136	manager	
40-18	5137-5143	checks	
40-19	5144-5146	if	
40-20	5147-5150	the	
40-21	5151-5155	pool	
40-22	5156-5164	contains	
40-23	5165-5168	any	
40-24	5169-5175	unused	
40-25	5176-5186	connection	
40-26	5187-5190	and	
40-27	5191-5198	returns	
40-28	5199-5202	one	
40-29	5203-5205	if	
40-30	5206-5215	available	
40-31	5215-5216	.	

#Text=If all the connections in the pool are active, then a new connection is created and added to the pool by the pool manager.
41-1	5217-5219	If	
41-2	5220-5223	all	
41-3	5224-5227	the	
41-4	5228-5239	connections	
41-5	5240-5242	in	
41-6	5243-5246	the	
41-7	5247-5251	pool	
41-8	5252-5255	are	
41-9	5256-5262	active	
41-10	5262-5263	,	
41-11	5264-5268	then	
41-12	5269-5270	a	
41-13	5271-5274	new	
41-14	5275-5285	connection	
41-15	5286-5288	is	
41-16	5289-5296	created	
41-17	5297-5300	and	
41-18	5301-5306	added	
41-19	5307-5309	to	
41-20	5310-5313	the	
41-21	5314-5318	pool	
41-22	5319-5321	by	
41-23	5322-5325	the	
41-24	5326-5330	pool	
41-25	5331-5338	manager	
41-26	5338-5339	.	

#Text=When the pool reaches its maximum size, all new connections are queued until a connection in the pool becomes available.
42-1	5340-5344	When	
42-2	5345-5348	the	
42-3	5349-5353	pool	
42-4	5354-5361	reaches	
42-5	5362-5365	its	
42-6	5366-5373	maximum	
42-7	5374-5378	size	
42-8	5378-5379	,	
42-9	5380-5383	all	
42-10	5384-5387	new	
42-11	5388-5399	connections	
42-12	5400-5403	are	
42-13	5404-5410	queued	
42-14	5411-5416	until	
42-15	5417-5418	a	
42-16	5419-5429	connection	
42-17	5430-5432	in	
42-18	5433-5436	the	
42-19	5437-5441	pool	
42-20	5442-5449	becomes	
42-21	5450-5459	available	
42-22	5459-5460	.	

#Text=Although most databases do not have an in-built connection pooling system, there are middleware solutions that we can use to pool connections from clients.
43-1	5461-5469	Although	
43-2	5470-5474	most	
43-3	5475-5484	databases	
43-4	5485-5487	do	
43-5	5488-5491	not	
43-6	5492-5496	have	
43-7	5497-5499	an	
43-8	5500-5508	in-built	
43-9	5509-5519	connection	
43-10	5520-5527	pooling	
43-11	5528-5534	system	
43-12	5534-5535	,	
43-13	5536-5541	there	
43-14	5542-5545	are	
43-15	5546-5556	middleware	
43-16	5557-5566	solutions	
43-17	5567-5571	that	
43-18	5572-5574	we	
43-19	5575-5578	can	
43-20	5579-5582	use	
43-21	5583-5585	to	
43-22	5586-5590	pool	
43-23	5591-5602	connections	
43-24	5603-5607	from	
43-25	5608-5615	clients	
43-26	5615-5616	.	

#Text=For a PostgreSQL database server, both pgbouncer and pgpool-II can serve as a pooling interface between a web service and a Postgres database.
44-1	5617-5620	For	
44-2	5621-5622	a	
44-3	5623-5633	PostgreSQL	
44-4	5634-5642	database	
44-5	5643-5649	server	
44-6	5649-5650	,	
44-7	5651-5655	both	
44-8	5656-5665	pgbouncer	
44-9	5666-5669	and	
44-10	5670-5679	pgpool-II	
44-11	5680-5683	can	
44-12	5684-5689	serve	
44-13	5690-5692	as	
44-14	5693-5694	a	
44-15	5695-5702	pooling	
44-16	5703-5712	interface	
44-17	5713-5720	between	
44-18	5721-5722	a	
44-19	5723-5726	web	
44-20	5727-5734	service	
44-21	5735-5738	and	
44-22	5739-5740	a	
44-23	5741-5749	Postgres	
44-24	5750-5758	database	
44-25	5758-5759	.	

#Text=Both utilities use the same logic to pool connections from clients.
#Text=pgpool-II offers more features beyond connection pooling, such as replication, load balancing, and parallel query features.
45-1	5760-5764	Both	
45-2	5765-5774	utilities	
45-3	5775-5778	use	
45-4	5779-5782	the	
45-5	5783-5787	same	
45-6	5788-5793	logic	
45-7	5794-5796	to	
45-8	5797-5801	pool	
45-9	5802-5813	connections	
45-10	5814-5818	from	
45-11	5819-5826	clients	
45-12	5826-5827	.	
45-13	5828-5837	pgpool-II	
45-14	5838-5844	offers	
45-15	5845-5849	more	
45-16	5850-5858	features	
45-17	5859-5865	beyond	
45-18	5866-5876	connection	
45-19	5877-5884	pooling	
45-20	5884-5885	,	
45-21	5886-5890	such	
45-22	5891-5893	as	
45-23	5894-5905	replication	
45-24	5905-5906	,	
45-25	5907-5911	load	
45-26	5912-5921	balancing	
45-27	5921-5922	,	
45-28	5923-5926	and	
45-29	5927-5935	parallel	
45-30	5936-5941	query	
45-31	5942-5950	features	
45-32	5950-5951	.	

#Text=How do you add connection pooling?
46-1	5952-5955	How	
46-2	5956-5958	do	
46-3	5959-5962	you	
46-4	5963-5966	add	
46-5	5967-5977	connection	
46-6	5978-5985	pooling	
46-7	5985-5986	?	

#Text=Is it as simple as installing the utilities?
47-1	5987-5989	Is	
47-2	5990-5992	it	
47-3	5993-5995	as	
47-4	5996-6002	simple	
47-5	6003-6005	as	
47-6	6006-6016	installing	
47-7	6017-6020	the	
47-8	6021-6030	utilities	
47-9	6030-6031	?	

#Text=Two ways to integrate a connection pooler
#Text=There are two ways of implementing connection pooling for PostgreSQL application:
#Text=As an external service or middleware such as pgbouncer
#Text=Connection poolers such as pgbouncer and pgpool-II can be used to pool connections from clients to a PostgreSQL database.
48-1	6032-6035	Two	
48-2	6036-6040	ways	
48-3	6041-6043	to	
48-4	6044-6053	integrate	
48-5	6054-6055	a	
48-6	6056-6066	connection	
48-7	6067-6073	pooler	
48-8	6074-6079	There	
48-9	6080-6083	are	
48-10	6084-6087	two	
48-11	6088-6092	ways	
48-12	6093-6095	of	
48-13	6096-6108	implementing	
48-14	6109-6119	connection	
48-15	6120-6127	pooling	
48-16	6128-6131	for	
48-17	6132-6142	PostgreSQL	
48-18	6143-6154	application	
48-19	6154-6155	:	
48-20	6156-6158	As	
48-21	6159-6161	an	
48-22	6162-6170	external	
48-23	6171-6178	service	
48-24	6179-6181	or	
48-25	6182-6192	middleware	
48-26	6193-6197	such	
48-27	6198-6200	as	
48-28	6201-6210	pgbouncer	
48-29	6211-6221	Connection	
48-30	6222-6229	poolers	
48-31	6230-6234	such	
48-32	6235-6237	as	
48-33	6238-6247	pgbouncer	
48-34	6248-6251	and	
48-35	6252-6261	pgpool-II	
48-36	6262-6265	can	
48-37	6266-6268	be	
48-38	6269-6273	used	
48-39	6274-6276	to	
48-40	6277-6281	pool	
48-41	6282-6293	connections	
48-42	6294-6298	from	
48-43	6299-6306	clients	
48-44	6307-6309	to	
48-45	6310-6311	a	
48-46	6312-6322	PostgreSQL	
48-47	6323-6331	database	
48-48	6331-6332	.	

#Text=The connection pooler sits in between the application and the database server.
49-1	6333-6336	The	
49-2	6337-6347	connection	
49-3	6348-6354	pooler	
49-4	6355-6359	sits	
49-5	6360-6362	in	
49-6	6363-6370	between	
49-7	6371-6374	the	
49-8	6375-6386	application	
49-9	6387-6390	and	
49-10	6391-6394	the	
49-11	6395-6403	database	
49-12	6404-6410	server	
49-13	6410-6411	.	

#Text=Pgbouncer or pgpool-II can be configured in a way to relay requests from the application to the database server.
50-1	6412-6421	Pgbouncer	
50-2	6422-6424	or	
50-3	6425-6434	pgpool-II	
50-4	6435-6438	can	
50-5	6439-6441	be	
50-6	6442-6452	configured	
50-7	6453-6455	in	
50-8	6456-6457	a	
50-9	6458-6461	way	
50-10	6462-6464	to	
50-11	6465-6470	relay	
50-12	6471-6479	requests	
50-13	6480-6484	from	
50-14	6485-6488	the	
50-15	6489-6500	application	
50-16	6501-6503	to	
50-17	6504-6507	the	
50-18	6508-6516	database	
50-19	6517-6523	server	
50-20	6523-6524	.	

#Text=Client-side libraries such as c3p0
#Text=There exist libraries such as c3p0 which extend database driver functionality to include connection pooling support.
51-1	6525-6536	Client-side	
51-2	6537-6546	libraries	
51-3	6547-6551	such	
51-4	6552-6554	as	
51-5	6555-6559	c3p0	
51-6	6560-6565	There	
51-7	6566-6571	exist	
51-8	6572-6581	libraries	
51-9	6582-6586	such	
51-10	6587-6589	as	
51-11	6590-6594	c3p0	
51-12	6595-6600	which	
51-13	6601-6607	extend	
51-14	6608-6616	database	
51-15	6617-6623	driver	
51-16	6624-6637	functionality	
51-17	6638-6640	to	
51-18	6641-6648	include	
51-19	6649-6659	connection	
51-20	6660-6667	pooling	
51-21	6668-6675	support	
51-22	6675-6676	.	

#Text=However, the best way to implement connection pooling for applications is to make use of an external service or middleware since it is easier to set up and manage.
52-1	6677-6684	However	
52-2	6684-6685	,	
52-3	6686-6689	the	
52-4	6690-6694	best	
52-5	6695-6698	way	
52-6	6699-6701	to	
52-7	6702-6711	implement	
52-8	6712-6722	connection	
52-9	6723-6730	pooling	
52-10	6731-6734	for	
52-11	6735-6747	applications	
52-12	6748-6750	is	
52-13	6751-6753	to	
52-14	6754-6758	make	
52-15	6759-6762	use	
52-16	6763-6765	of	
52-17	6766-6768	an	
52-18	6769-6777	external	
52-19	6778-6785	service	
52-20	6786-6788	or	
52-21	6789-6799	middleware	
52-22	6800-6805	since	
52-23	6806-6808	it	
52-24	6809-6811	is	
52-25	6812-6818	easier	
52-26	6819-6821	to	
52-27	6822-6825	set	
52-28	6826-6828	up	
52-29	6829-6832	and	
52-30	6833-6839	manage	
52-31	6839-6840	.	

#Text=In addition external middleware like pgpool2 provides other features such as load balancing apart from pooling connections.
53-1	6841-6843	In	
53-2	6844-6852	addition	
53-3	6853-6861	external	
53-4	6862-6872	middleware	
53-5	6873-6877	like	
53-6	6878-6885	pgpool2	
53-7	6886-6894	provides	
53-8	6895-6900	other	
53-9	6901-6909	features	
53-10	6910-6914	such	
53-11	6915-6917	as	
53-12	6918-6922	load	
53-13	6923-6932	balancing	
53-14	6933-6938	apart	
53-15	6939-6943	from	
53-16	6944-6951	pooling	
53-17	6952-6963	connections	
53-18	6963-6964	.	

#Text=Now let’s take a deeper look at what happens when a backend service connects to a Postgres database, both with and without pooling.
54-1	6965-6968	Now	
54-2	6969-6972	let	
54-3	6972-6973	’	
54-4	6973-6974	s	
54-5	6975-6979	take	
54-6	6980-6981	a	
54-7	6982-6988	deeper	
54-8	6989-6993	look	
54-9	6994-6996	at	
54-10	6997-7001	what	
54-11	7002-7009	happens	
54-12	7010-7014	when	
54-13	7015-7016	a	
54-14	7017-7024	backend	
54-15	7025-7032	service	
54-16	7033-7041	connects	
54-17	7042-7044	to	
54-18	7045-7046	a	
54-19	7047-7055	Postgres	
54-20	7056-7064	database	
54-21	7064-7065	,	
54-22	7066-7070	both	
54-23	7071-7075	with	
54-24	7076-7079	and	
54-25	7080-7087	without	
54-26	7088-7095	pooling	
54-27	7095-7096	.	

#Text=Scaling database performance without connection pooling
#Text=We do not need a connection pooler to connect to a backend service.
55-1	7097-7104	Scaling	
55-2	7105-7113	database	
55-3	7114-7125	performance	
55-4	7126-7133	without	
55-5	7134-7144	connection	
55-6	7145-7152	pooling	
55-7	7153-7155	We	
55-8	7156-7158	do	
55-9	7159-7162	not	
55-10	7163-7167	need	
55-11	7168-7169	a	
55-12	7170-7180	connection	
55-13	7181-7187	pooler	
55-14	7188-7190	to	
55-15	7191-7198	connect	
55-16	7199-7201	to	
55-17	7202-7203	a	
55-18	7204-7211	backend	
55-19	7212-7219	service	
55-20	7219-7220	.	

#Text=We can connect to a Postgres database directly.
56-1	7221-7223	We	
56-2	7224-7227	can	
56-3	7228-7235	connect	
56-4	7236-7238	to	
56-5	7239-7240	a	
56-6	7241-7249	Postgres	
56-7	7250-7258	database	
56-8	7259-7267	directly	
56-9	7267-7268	.	

#Text=To examine how long it takes to execute concurrent connections to a database without a connection pooler, we will use pgbench to benchmark connections to the Postgres database.
57-1	7269-7271	To	
57-2	7272-7279	examine	
57-3	7280-7283	how	
57-4	7284-7288	long	
57-5	7289-7291	it	
57-6	7292-7297	takes	
57-7	7298-7300	to	
57-8	7301-7308	execute	
57-9	7309-7319	concurrent	
57-10	7320-7331	connections	
57-11	7332-7334	to	
57-12	7335-7336	a	
57-13	7337-7345	database	
57-14	7346-7353	without	
57-15	7354-7355	a	
57-16	7356-7366	connection	
57-17	7367-7373	pooler	
57-18	7373-7374	,	
57-19	7375-7377	we	
57-20	7378-7382	will	
57-21	7383-7386	use	
57-22	7387-7394	pgbench	
57-23	7395-7397	to	
57-24	7398-7407	benchmark	
57-25	7408-7419	connections	
57-26	7420-7422	to	
57-27	7423-7426	the	
57-28	7427-7435	Postgres	
57-29	7436-7444	database	
57-30	7444-7445	.	

#Text=Pgbench is based on TPC-B.
58-1	7446-7453	Pgbench	
58-2	7454-7456	is	
58-3	7457-7462	based	
58-4	7463-7465	on	
58-5	7466-7471	TPC-B	
58-6	7471-7472	.	

#Text=TPC-B measures throughput in terms of how many transactions per second a system can perform.
59-1	7473-7478	TPC-B	
59-2	7479-7487	measures	
59-3	7488-7498	throughput	
59-4	7499-7501	in	
59-5	7502-7507	terms	
59-6	7508-7510	of	
59-7	7511-7514	how	
59-8	7515-7519	many	
59-9	7520-7532	transactions	
59-10	7533-7536	per	
59-11	7537-7543	second	
59-12	7544-7545	a	
59-13	7546-7552	system	
59-14	7553-7556	can	
59-15	7557-7564	perform	
59-16	7564-7565	.	

#Text=Pgbench executes five SELECT, INSERT, and UPDATE commands per transaction.
60-1	7566-7573	Pgbench	
60-2	7574-7582	executes	
60-3	7583-7587	five	
60-4	7588-7594	SELECT	
60-5	7594-7595	,	
60-6	7596-7602	INSERT	
60-7	7602-7603	,	
60-8	7604-7607	and	
60-9	7608-7614	UPDATE	
60-10	7615-7623	commands	
60-11	7624-7627	per	
60-12	7628-7639	transaction	
60-13	7639-7640	.	

#Text=Based on TPC-B-like transactions, pgbench runs the same sequence of SQL commands repeatedly in multiple concurrent database sessions and calculates the average transaction rate.
61-1	7641-7646	Based	
61-2	7647-7649	on	
61-3	7650-7660	TPC-B-like	
61-4	7661-7673	transactions	
61-5	7673-7674	,	
61-6	7675-7682	pgbench	
61-7	7683-7687	runs	
61-8	7688-7691	the	
61-9	7692-7696	same	
61-10	7697-7705	sequence	
61-11	7706-7708	of	
61-12	7709-7712	SQL	
61-13	7713-7721	commands	
61-14	7722-7732	repeatedly	
61-15	7733-7735	in	
61-16	7736-7744	multiple	
61-17	7745-7755	concurrent	
61-18	7756-7764	database	
61-19	7765-7773	sessions	
61-20	7774-7777	and	
61-21	7778-7788	calculates	
61-22	7789-7792	the	
61-23	7793-7800	average	
61-24	7801-7812	transaction	
61-25	7813-7817	rate	
61-26	7817-7818	.	

#Text=Before we run pgbench, we need to initialize it with the following command to create the pgbench_history, pgbench_branches, pgbench_tellers, and pgbench_accounts tables.
62-1	7819-7825	Before	
62-2	7826-7828	we	
62-3	7829-7832	run	
62-4	7833-7840	pgbench	
62-5	7840-7841	,	
62-6	7842-7844	we	
62-7	7845-7849	need	
62-8	7850-7852	to	
62-9	7853-7863	initialize	
62-10	7864-7866	it	
62-11	7867-7871	with	
62-12	7872-7875	the	
62-13	7876-7885	following	
62-14	7886-7893	command	
62-15	7894-7896	to	
62-16	7897-7903	create	
62-17	7904-7907	the	
62-18	7908-7923	pgbench_history	
62-19	7923-7924	,	
62-20	7925-7941	pgbench_branches	
62-21	7941-7942	,	
62-22	7943-7958	pgbench_tellers	
62-23	7958-7959	,	
62-24	7960-7963	and	
62-25	7964-7980	pgbench_accounts	
62-26	7981-7987	tables	
62-27	7987-7988	.	

#Text=Pgbench uses the following tables to run transactions for benchmarking.
#Text=pgbench  -i  -s 50  database_name
#Text=Afterward, I executed the command below to test the database with 150 clients
#Text=pgbench  -c 10  -j 2  -t  10000  database_name
#Text=As you see, in our initial baseline test, I instructed pgbench to execute with ten different client sessions.
63-1	7989-7996	Pgbench	
63-2	7997-8001	uses	
63-3	8002-8005	the	
63-4	8006-8015	following	
63-5	8016-8022	tables	
63-6	8023-8025	to	
63-7	8026-8029	run	
63-8	8030-8042	transactions	
63-9	8043-8046	for	
63-10	8047-8059	benchmarking	
63-11	8059-8060	.	
63-12	8061-8068	pgbench	
63-13	8068-8069	 	
63-14	8070-8071	-	
63-15	8071-8072	i	
63-16	8072-8073	 	
63-17	8074-8075	-	
63-18	8075-8076	s	
63-19	8077-8079	50	
63-20	8079-8080	 	
63-21	8081-8094	database_name	
63-22	8095-8104	Afterward	
63-23	8104-8105	,	
63-24	8106-8107	I	
63-25	8108-8116	executed	
63-26	8117-8120	the	
63-27	8121-8128	command	
63-28	8129-8134	below	
63-29	8135-8137	to	
63-30	8138-8142	test	
63-31	8143-8146	the	
63-32	8147-8155	database	
63-33	8156-8160	with	
63-34	8161-8164	150	
63-35	8165-8172	clients	
63-36	8173-8180	pgbench	
63-37	8180-8181	 	
63-38	8182-8183	-	
63-39	8183-8184	c	
63-40	8185-8187	10	
63-41	8187-8188	 	
63-42	8189-8190	-	
63-43	8190-8191	j	
63-44	8192-8193	2	
63-45	8193-8194	 	
63-46	8195-8196	-	
63-47	8196-8197	t	
63-48	8197-8198	 	
63-49	8199-8204	10000	
63-50	8204-8205	 	
63-51	8206-8219	database_name	
63-52	8220-8222	As	
63-53	8223-8226	you	
63-54	8227-8230	see	
63-55	8230-8231	,	
63-56	8232-8234	in	
63-57	8235-8238	our	
63-58	8239-8246	initial	
63-59	8247-8255	baseline	
63-60	8256-8260	test	
63-61	8260-8261	,	
63-62	8262-8263	I	
63-63	8264-8274	instructed	
63-64	8275-8282	pgbench	
63-65	8283-8285	to	
63-66	8286-8293	execute	
63-67	8294-8298	with	
63-68	8299-8302	ten	
63-69	8303-8312	different	
63-70	8313-8319	client	
63-71	8320-8328	sessions	
63-72	8328-8329	.	

#Text=Each client session will execute 10,000 transactions.
64-1	8330-8334	Each	
64-2	8335-8341	client	
64-3	8342-8349	session	
64-4	8350-8354	will	
64-5	8355-8362	execute	
64-6	8363-8369	10,000	
64-7	8370-8382	transactions	
64-8	8382-8383	.	

#Text=From these results, it seems our initial baseline test is 486 transactions per second.
65-1	8384-8388	From	
65-2	8389-8394	these	
65-3	8395-8402	results	
65-4	8402-8403	,	
65-5	8404-8406	it	
65-6	8407-8412	seems	
65-7	8413-8416	our	
65-8	8417-8424	initial	
65-9	8425-8433	baseline	
65-10	8434-8438	test	
65-11	8439-8441	is	
65-12	8442-8445	486	
65-13	8446-8458	transactions	
65-14	8459-8462	per	
65-15	8463-8469	second	
65-16	8469-8470	.	

#Text=Let’s see how we can make use of connection poolers like pgbouncer and pgpool to increase transaction throughput and avoid a ‘Sorry!
66-1	8471-8474	Let	
66-2	8474-8475	’	
66-3	8475-8476	s	
66-4	8477-8480	see	
66-5	8481-8484	how	
66-6	8485-8487	we	
66-7	8488-8491	can	
66-8	8492-8496	make	
66-9	8497-8500	use	
66-10	8501-8503	of	
66-11	8504-8514	connection	
66-12	8515-8522	poolers	
66-13	8523-8527	like	
66-14	8528-8537	pgbouncer	
66-15	8538-8541	and	
66-16	8542-8548	pgpool	
66-17	8549-8551	to	
66-18	8552-8560	increase	
66-19	8561-8572	transaction	
66-20	8573-8583	throughput	
66-21	8584-8587	and	
66-22	8588-8593	avoid	
66-23	8594-8595	a	
66-24	8596-8597	‘	
66-25	8597-8602	Sorry	
66-26	8602-8603	!	

#Text=, too many clients already’ error.
67-1	8603-8604	,	
67-2	8605-8608	too	
67-3	8609-8613	many	
67-4	8614-8621	clients	
67-5	8622-8629	already	
67-6	8629-8630	’	
67-7	8631-8636	error	
67-8	8636-8637	.	

#Text=Scaling database performance with pgbouncer
#Text=Let’s look at how we can use pgbouncer to increase transaction throughput.
68-1	8638-8645	Scaling	
68-2	8646-8654	database	
68-3	8655-8666	performance	
68-4	8667-8671	with	
68-5	8672-8681	pgbouncer	
68-6	8682-8685	Let	
68-7	8685-8686	’	
68-8	8686-8687	s	
68-9	8688-8692	look	
68-10	8693-8695	at	
68-11	8696-8699	how	
68-12	8700-8702	we	
68-13	8703-8706	can	
68-14	8707-8710	use	
68-15	8711-8720	pgbouncer	
68-16	8721-8723	to	
68-17	8724-8732	increase	
68-18	8733-8744	transaction	
68-19	8745-8755	throughput	
68-20	8755-8756	.	

#Text=Pgbouncer can be installed on almost all Linux distributions.
69-1	8757-8766	Pgbouncer	
69-2	8767-8770	can	
69-3	8771-8773	be	
69-4	8774-8783	installed	
69-5	8784-8786	on	
69-6	8787-8793	almost	
69-7	8794-8797	all	
69-8	8798-8803	Linux	
69-9	8804-8817	distributions	
69-10	8817-8818	.	

#Text=You can check here how to set up pgbouncer.
70-1	8819-8822	You	
70-2	8823-8826	can	
70-3	8827-8832	check	
70-4	8833-8837	here	
70-5	8838-8841	how	
70-6	8842-8844	to	
70-7	8845-8848	set	
70-8	8849-8851	up	
70-9	8852-8861	pgbouncer	
70-10	8861-8862	.	

#Text=Alternatively, you can install pgbouncer using package managers like apt-get or yum.
71-1	8863-8876	Alternatively	
71-2	8876-8877	,	
71-3	8878-8881	you	
71-4	8882-8885	can	
71-5	8886-8893	install	
71-6	8894-8903	pgbouncer	
71-7	8904-8909	using	
71-8	8910-8917	package	
71-9	8918-8926	managers	
71-10	8927-8931	like	
71-11	8932-8939	apt-get	
71-12	8940-8942	or	
71-13	8943-8946	yum	
71-14	8946-8947	.	

#Text=If you find it difficult to authenticate clients with pgbouncer, you can check GitHub on how to do so.
72-1	8948-8950	If	
72-2	8951-8954	you	
72-3	8955-8959	find	
72-4	8960-8962	it	
72-5	8963-8972	difficult	
72-6	8973-8975	to	
72-7	8976-8988	authenticate	
72-8	8989-8996	clients	
72-9	8997-9001	with	
72-10	9002-9011	pgbouncer	
72-11	9011-9012	,	
72-12	9013-9016	you	
72-13	9017-9020	can	
72-14	9021-9026	check	
72-15	9027-9033	GitHub	
72-16	9034-9036	on	
72-17	9037-9040	how	
72-18	9041-9043	to	
72-19	9044-9046	do	
72-20	9047-9049	so	
72-21	9049-9050	.	

#Text=Pgbouncer comes with three types of pooling:
#Text=Session pooling: One of the connections in the pool is assigned to a client until the timeout is reached.  
73-1	9051-9060	Pgbouncer	
73-2	9061-9066	comes	
73-3	9067-9071	with	
73-4	9072-9077	three	
73-5	9078-9083	types	
73-6	9084-9086	of	
73-7	9087-9094	pooling	
73-8	9094-9095	:	
73-9	9096-9103	Session	
73-10	9104-9111	pooling	
73-11	9111-9112	:	
73-12	9113-9116	One	
73-13	9117-9119	of	
73-14	9120-9123	the	
73-15	9124-9135	connections	
73-16	9136-9138	in	
73-17	9139-9142	the	
73-18	9143-9147	pool	
73-19	9148-9150	is	
73-20	9151-9159	assigned	
73-21	9160-9162	to	
73-22	9163-9164	a	
73-23	9165-9171	client	
73-24	9172-9177	until	
73-25	9178-9181	the	
73-26	9182-9189	timeout	
73-27	9190-9192	is	
73-28	9193-9200	reached	
73-29	9200-9201	.	
73-30	9201-9203	  	

#Text=Transaction pooling: Similar to session polling, it gets a connection from the pool.
74-1	9203-9214	Transaction	
74-2	9215-9222	pooling	
74-3	9222-9223	:	
74-4	9224-9231	Similar	
74-5	9232-9234	to	
74-6	9235-9242	session	
74-7	9243-9250	polling	
74-8	9250-9251	,	
74-9	9252-9254	it	
74-10	9255-9259	gets	
74-11	9260-9261	a	
74-12	9262-9272	connection	
74-13	9273-9277	from	
74-14	9278-9281	the	
74-15	9282-9286	pool	
74-16	9286-9287	.	

#Text=It keeps it until the transaction is done.
75-1	9288-9290	It	
75-2	9291-9296	keeps	
75-3	9297-9299	it	
75-4	9300-9305	until	
75-5	9306-9309	the	
75-6	9310-9321	transaction	
75-7	9322-9324	is	
75-8	9325-9329	done	
75-9	9329-9330	.	

#Text=If the same client wants to run another transaction, it has to wait until it gets another transaction assigned to it. 
76-1	9331-9333	If	
76-2	9334-9337	the	
76-3	9338-9342	same	
76-4	9343-9349	client	
76-5	9350-9355	wants	
76-6	9356-9358	to	
76-7	9359-9362	run	
76-8	9363-9370	another	
76-9	9371-9382	transaction	
76-10	9382-9383	,	
76-11	9384-9386	it	
76-12	9387-9390	has	
76-13	9391-9393	to	
76-14	9394-9398	wait	
76-15	9399-9404	until	
76-16	9405-9407	it	
76-17	9408-9412	gets	
76-18	9413-9420	another	
76-19	9421-9432	transaction	
76-20	9433-9441	assigned	
76-21	9442-9444	to	
76-22	9445-9447	it	
76-23	9447-9448	.	
76-24	9448-9449	 	

#Text=Statement pooling: Connection is returned to the pool as soon as the first query is completed.
77-1	9449-9458	Statement	
77-2	9459-9466	pooling	
77-3	9466-9467	:	
77-4	9468-9478	Connection	
77-5	9479-9481	is	
77-6	9482-9490	returned	
77-7	9491-9493	to	
77-8	9494-9497	the	
77-9	9498-9502	pool	
77-10	9503-9505	as	
77-11	9506-9510	soon	
77-12	9511-9513	as	
77-13	9514-9517	the	
77-14	9518-9523	first	
77-15	9524-9529	query	
77-16	9530-9532	is	
77-17	9533-9542	completed	
77-18	9542-9543	.	

#Text=We will make use of the transaction pooling mode.
78-1	9544-9546	We	
78-2	9547-9551	will	
78-3	9552-9556	make	
78-4	9557-9560	use	
78-5	9561-9563	of	
78-6	9564-9567	the	
78-7	9568-9579	transaction	
78-8	9580-9587	pooling	
78-9	9588-9592	mode	
78-10	9592-9593	.	

#Text=Inside the pgbouncer.ini file, I modified the following parameter:
#Text=max_client_conn = 100
#Text=The max_client_conn parameter defines how many client connections to pgbouncer (instead of Postgres) are allowed.
#Text=default_pool_size = 25
#Text=The default_pool_size parameter defines how many server connections to allow per user/database pair.
#Text=reserve_pool_size = 5
#Text=The reserve_pool_size parameter defines how many additional connections are allowed to the pool.
79-1	9594-9600	Inside	
79-2	9601-9604	the	
79-3	9605-9618	pgbouncer.ini	
79-4	9619-9623	file	
79-5	9623-9624	,	
79-6	9625-9626	I	
79-7	9627-9635	modified	
79-8	9636-9639	the	
79-9	9640-9649	following	
79-10	9650-9659	parameter	
79-11	9659-9660	:	
79-12	9661-9676	max_client_conn	
79-13	9677-9678	=	
79-14	9679-9682	100	
79-15	9683-9686	The	
79-16	9687-9702	max_client_conn	
79-17	9703-9712	parameter	
79-18	9713-9720	defines	
79-19	9721-9724	how	
79-20	9725-9729	many	
79-21	9730-9736	client	
79-22	9737-9748	connections	
79-23	9749-9751	to	
79-24	9752-9761	pgbouncer	
79-25	9762-9763	(	
79-26	9763-9770	instead	
79-27	9771-9773	of	
79-28	9774-9782	Postgres	
79-29	9782-9783	)	
79-30	9784-9787	are	
79-31	9788-9795	allowed	
79-32	9795-9796	.	
79-33	9797-9814	default_pool_size	
79-34	9815-9816	=	
79-35	9817-9819	25	
79-36	9820-9823	The	
79-37	9824-9841	default_pool_size	
79-38	9842-9851	parameter	
79-39	9852-9859	defines	
79-40	9860-9863	how	
79-41	9864-9868	many	
79-42	9869-9875	server	
79-43	9876-9887	connections	
79-44	9888-9890	to	
79-45	9891-9896	allow	
79-46	9897-9900	per	
79-47	9901-9905	user	
79-48	9905-9906	/	
79-49	9906-9914	database	
79-50	9915-9919	pair	
79-51	9919-9920	.	
79-52	9921-9938	reserve_pool_size	
79-53	9939-9940	=	
79-54	9941-9942	5	
79-55	9943-9946	The	
79-56	9947-9964	reserve_pool_size	
79-57	9965-9974	parameter	
79-58	9975-9982	defines	
79-59	9983-9986	how	
79-60	9987-9991	many	
79-61	9992-10002	additional	
79-62	10003-10014	connections	
79-63	10015-10018	are	
79-64	10019-10026	allowed	
79-65	10027-10029	to	
79-66	10030-10033	the	
79-67	10034-10038	pool	
79-68	10038-10039	.	

#Text=As in the previous test I executed pgbench with ten different client sessions.
80-1	10040-10042	As	
80-2	10043-10045	in	
80-3	10046-10049	the	
80-4	10050-10058	previous	
80-5	10059-10063	test	
80-6	10064-10065	I	
80-7	10066-10074	executed	
80-8	10075-10082	pgbench	
80-9	10083-10087	with	
80-10	10088-10091	ten	
80-11	10092-10101	different	
80-12	10102-10108	client	
80-13	10109-10117	sessions	
80-14	10117-10118	.	

#Text=Each client executes 1000 transactions as shown below.
#Text=pgbench  -c 10  -p -j 2  -t 1000 database_name
#Text=As you see, transaction throughput increased from 486 transactions per second to 566 transactions per second.
81-1	10119-10123	Each	
81-2	10124-10130	client	
81-3	10131-10139	executes	
81-4	10140-10144	1000	
81-5	10145-10157	transactions	
81-6	10158-10160	as	
81-7	10161-10166	shown	
81-8	10167-10172	below	
81-9	10172-10173	.	
81-10	10174-10181	pgbench	
81-11	10181-10182	 	
81-12	10183-10184	-	
81-13	10184-10185	c	
81-14	10186-10188	10	
81-15	10188-10189	 	
81-16	10190-10191	-	
81-17	10191-10192	p	
81-18	10193-10194	-	
81-19	10194-10195	j	
81-20	10196-10197	2	
81-21	10197-10198	 	
81-22	10199-10200	-	
81-23	10200-10201	t	
81-24	10202-10206	1000	
81-25	10207-10220	database_name	
81-26	10221-10223	As	
81-27	10224-10227	you	
81-28	10228-10231	see	
81-29	10231-10232	,	
81-30	10233-10244	transaction	
81-31	10245-10255	throughput	
81-32	10256-10265	increased	
81-33	10266-10270	from	
81-34	10271-10274	486	
81-35	10275-10287	transactions	
81-36	10288-10291	per	
81-37	10292-10298	second	
81-38	10299-10301	to	
81-39	10302-10305	566	
81-40	10306-10318	transactions	
81-41	10319-10322	per	
81-42	10323-10329	second	
81-43	10329-10330	.	

#Text=With the help of pgbouncer, transaction throughput improved by approximately 60%.
82-1	10331-10335	With	
82-2	10336-10339	the	
82-3	10340-10344	help	
82-4	10345-10347	of	
82-5	10348-10357	pgbouncer	
82-6	10357-10358	,	
82-7	10359-10370	transaction	
82-8	10371-10381	throughput	
82-9	10382-10390	improved	
82-10	10391-10393	by	
82-11	10394-10407	approximately	
82-12	10408-10411	60%	
82-13	10411-10412	.	

#Text=Now let’s see how we can increase transaction throughput with pgpool-II since it comes with connection pooling features.
83-1	10413-10416	Now	
83-2	10417-10420	let	
83-3	10420-10421	’	
83-4	10421-10422	s	
83-5	10423-10426	see	
83-6	10427-10430	how	
83-7	10431-10433	we	
83-8	10434-10437	can	
83-9	10438-10446	increase	
83-10	10447-10458	transaction	
83-11	10459-10469	throughput	
83-12	10470-10474	with	
83-13	10475-10484	pgpool-II	
83-14	10485-10490	since	
83-15	10491-10493	it	
83-16	10494-10499	comes	
83-17	10500-10504	with	
83-18	10505-10515	connection	
83-19	10516-10523	pooling	
83-20	10524-10532	features	
83-21	10532-10533	.	

#Text=Unlike pgbouncer, pgpool-II offers features beyond connection pooling.
84-1	10534-10540	Unlike	
84-2	10541-10550	pgbouncer	
84-3	10550-10551	,	
84-4	10552-10561	pgpool-II	
84-5	10562-10568	offers	
84-6	10569-10577	features	
84-7	10578-10584	beyond	
84-8	10585-10595	connection	
84-9	10596-10603	pooling	
84-10	10603-10604	.	

#Text=The documentation provides detailed information about pgpool-II features and how to set it up from source or via a package manager
#Text=I changed the following parameters in the pgpool.conf file to make it route clients connections from pgpool2 to Postgres database server.
#Text=connection_cache  = on
#Text=listen_addresses  = ‘postgres_database_name’’
#Text=port  = 5432
#Text=Setting the connection_cache parameter to on activates pgpool2 pooling capability.
85-1	10605-10608	The	
85-2	10609-10622	documentation	
85-3	10623-10631	provides	
85-4	10632-10640	detailed	
85-5	10641-10652	information	
85-6	10653-10658	about	
85-7	10659-10668	pgpool-II	
85-8	10669-10677	features	
85-9	10678-10681	and	
85-10	10682-10685	how	
85-11	10686-10688	to	
85-12	10689-10692	set	
85-13	10693-10695	it	
85-14	10696-10698	up	
85-15	10699-10703	from	
85-16	10704-10710	source	
85-17	10711-10713	or	
85-18	10714-10717	via	
85-19	10718-10719	a	
85-20	10720-10727	package	
85-21	10728-10735	manager	
85-22	10736-10737	I	
85-23	10738-10745	changed	
85-24	10746-10749	the	
85-25	10750-10759	following	
85-26	10760-10770	parameters	
85-27	10771-10773	in	
85-28	10774-10777	the	
85-29	10778-10789	pgpool.conf	
85-30	10790-10794	file	
85-31	10795-10797	to	
85-32	10798-10802	make	
85-33	10803-10805	it	
85-34	10806-10811	route	
85-35	10812-10819	clients	
85-36	10820-10831	connections	
85-37	10832-10836	from	
85-38	10837-10844	pgpool2	
85-39	10845-10847	to	
85-40	10848-10856	Postgres	
85-41	10857-10865	database	
85-42	10866-10872	server	
85-43	10872-10873	.	
85-44	10874-10890	connection_cache	
85-45	10890-10891	 	
85-46	10892-10893	=	
85-47	10894-10896	on	
85-48	10897-10913	listen_addresses	
85-49	10913-10914	 	
85-50	10915-10916	=	
85-51	10917-10918	‘	
85-52	10918-10940	postgres_database_name	
85-53	10940-10941	’	
85-54	10941-10942	’	
85-55	10943-10947	port	
85-56	10947-10948	 	
85-57	10949-10950	=	
85-58	10951-10955	5432	
85-59	10956-10963	Setting	
85-60	10964-10967	the	
85-61	10968-10984	connection_cache	
85-62	10985-10994	parameter	
85-63	10995-10997	to	
85-64	10998-11000	on	
85-65	11001-11010	activates	
85-66	11011-11018	pgpool2	
85-67	11019-11026	pooling	
85-68	11027-11037	capability	
85-69	11037-11038	.	

#Text=Like the previous test, pgbench executed ten different client sessions.
86-1	11039-11043	Like	
86-2	11044-11047	the	
86-3	11048-11056	previous	
86-4	11057-11061	test	
86-5	11061-11062	,	
86-6	11063-11070	pgbench	
86-7	11071-11079	executed	
86-8	11080-11083	ten	
86-9	11084-11093	different	
86-10	11094-11100	client	
86-11	11101-11109	sessions	
86-12	11109-11110	.	

#Text=Each client executes 1000 transactions to the Postgres database server.
87-1	11111-11115	Each	
87-2	11116-11122	client	
87-3	11123-11131	executes	
87-4	11132-11136	1000	
87-5	11137-11149	transactions	
87-6	11150-11152	to	
87-7	11153-11156	the	
87-8	11157-11165	Postgres	
87-9	11166-11174	database	
87-10	11175-11181	server	
87-11	11181-11182	.	

#Text=Thus we expect a total of 10,000 transactions from all clients.
#Text=gbench  -p 9999  -c  10  -C  -t 1000  postgres_database
#Text=In the same way we increased transaction throughput with pgbouncer, it seems pgpool2 also increased transaction throughput by 75% as compared to the initial test.
88-1	11183-11187	Thus	
88-2	11188-11190	we	
88-3	11191-11197	expect	
88-4	11198-11199	a	
88-5	11200-11205	total	
88-6	11206-11208	of	
88-7	11209-11215	10,000	
88-8	11216-11228	transactions	
88-9	11229-11233	from	
88-10	11234-11237	all	
88-11	11238-11245	clients	
88-12	11245-11246	.	
88-13	11247-11253	gbench	
88-14	11253-11254	 	
88-15	11255-11256	-	
88-16	11256-11257	p	
88-17	11258-11262	9999	
88-18	11262-11263	 	
88-19	11264-11265	-	
88-20	11265-11266	c	
88-21	11266-11267	 	
88-22	11268-11270	10	
88-23	11270-11271	 	
88-24	11272-11273	-	
88-25	11273-11274	C	
88-26	11274-11275	 	
88-27	11276-11277	-	
88-28	11277-11278	t	
88-29	11279-11283	1000	
88-30	11283-11284	 	
88-31	11285-11302	postgres_database	
88-32	11303-11305	In	
88-33	11306-11309	the	
88-34	11310-11314	same	
88-35	11315-11318	way	
88-36	11319-11321	we	
88-37	11322-11331	increased	
88-38	11332-11343	transaction	
88-39	11344-11354	throughput	
88-40	11355-11359	with	
88-41	11360-11369	pgbouncer	
88-42	11369-11370	,	
88-43	11371-11373	it	
88-44	11374-11379	seems	
88-45	11380-11387	pgpool2	
88-46	11388-11392	also	
88-47	11393-11402	increased	
88-48	11403-11414	transaction	
88-49	11415-11425	throughput	
88-50	11426-11428	by	
88-51	11429-11432	75%	
88-52	11433-11435	as	
88-53	11436-11444	compared	
88-54	11445-11447	to	
88-55	11448-11451	the	
88-56	11452-11459	initial	
88-57	11460-11464	test	
88-58	11464-11465	.	

#Text=Pgbouncer implements connection pooling ‘out of the box’ without the need to fine-tune parameters while pgpool2 allows you to fine-tune parameters to enhance connection pooling.
89-1	11466-11475	Pgbouncer	
89-2	11476-11486	implements	
89-3	11487-11497	connection	
89-4	11498-11505	pooling	
89-5	11506-11507	‘	
89-6	11507-11510	out	
89-7	11511-11513	of	
89-8	11514-11517	the	
89-9	11518-11521	box	
89-10	11521-11522	’	
89-11	11523-11530	without	
89-12	11531-11534	the	
89-13	11535-11539	need	
89-14	11540-11542	to	
89-15	11543-11552	fine-tune	
89-16	11553-11563	parameters	
89-17	11564-11569	while	
89-18	11570-11577	pgpool2	
89-19	11578-11584	allows	
89-20	11585-11588	you	
89-21	11589-11591	to	
89-22	11592-11601	fine-tune	
89-23	11602-11612	parameters	
89-24	11613-11615	to	
89-25	11616-11623	enhance	
89-26	11624-11634	connection	
89-27	11635-11642	pooling	
89-28	11642-11643	.	

#Text=Choosing a connection pooler: pgpool-II or pgbouncer?
90-1	11644-11652	Choosing	
90-2	11653-11654	a	
90-3	11655-11665	connection	
90-4	11666-11672	pooler	
90-5	11672-11673	:	
90-6	11674-11683	pgpool-II	
90-7	11684-11686	or	
90-8	11687-11696	pgbouncer	
90-9	11696-11697	?	

#Text=There are several factors to consider when choosing a connection pooler to use.
91-1	11698-11703	There	
91-2	11704-11707	are	
91-3	11708-11715	several	
91-4	11716-11723	factors	
91-5	11724-11726	to	
91-6	11727-11735	consider	
91-7	11736-11740	when	
91-8	11741-11749	choosing	
91-9	11750-11751	a	
91-10	11752-11762	connection	
91-11	11763-11769	pooler	
91-12	11770-11772	to	
91-13	11773-11776	use	
91-14	11776-11777	.	

#Text=Although pgbouncer and pgpool-II are great solutions for connection pooling, each tool has its strengths and weaknesses.
92-1	11778-11786	Although	
92-2	11787-11796	pgbouncer	
92-3	11797-11800	and	
92-4	11801-11810	pgpool-II	
92-5	11811-11814	are	
92-6	11815-11820	great	
92-7	11821-11830	solutions	
92-8	11831-11834	for	
92-9	11835-11845	connection	
92-10	11846-11853	pooling	
92-11	11853-11854	,	
92-12	11855-11859	each	
92-13	11860-11864	tool	
92-14	11865-11868	has	
92-15	11869-11872	its	
92-16	11873-11882	strengths	
92-17	11883-11886	and	
92-18	11887-11897	weaknesses	
92-19	11897-11898	.	

#Text=Memory/resource consumption
#Text=If you are interested in a lightweight connection pooler for your backend service, then pgbouncer is the right tool for you.
93-1	11899-11905	Memory	
93-2	11905-11906	/	
93-3	11906-11914	resource	
93-4	11915-11926	consumption	
93-5	11927-11929	If	
93-6	11930-11933	you	
93-7	11934-11937	are	
93-8	11938-11948	interested	
93-9	11949-11951	in	
93-10	11952-11953	a	
93-11	11954-11965	lightweight	
93-12	11966-11976	connection	
93-13	11977-11983	pooler	
93-14	11984-11987	for	
93-15	11988-11992	your	
93-16	11993-12000	backend	
93-17	12001-12008	service	
93-18	12008-12009	,	
93-19	12010-12014	then	
93-20	12015-12024	pgbouncer	
93-21	12025-12027	is	
93-22	12028-12031	the	
93-23	12032-12037	right	
93-24	12038-12042	tool	
93-25	12043-12046	for	
93-26	12047-12050	you	
93-27	12050-12051	.	

#Text=Unlike pgpool-II, which by default allows 32 child processes to be forked, pgbouncer uses only one process.
94-1	12052-12058	Unlike	
94-2	12059-12068	pgpool-II	
94-3	12068-12069	,	
94-4	12070-12075	which	
94-5	12076-12078	by	
94-6	12079-12086	default	
94-7	12087-12093	allows	
94-8	12094-12096	32	
94-9	12097-12102	child	
94-10	12103-12112	processes	
94-11	12113-12115	to	
94-12	12116-12118	be	
94-13	12119-12125	forked	
94-14	12125-12126	,	
94-15	12127-12136	pgbouncer	
94-16	12137-12141	uses	
94-17	12142-12146	only	
94-18	12147-12150	one	
94-19	12151-12158	process	
94-20	12158-12159	.	

#Text=Thus pgbouncer consumes less memory than pgpool2.
95-1	12160-12164	Thus	
95-2	12165-12174	pgbouncer	
95-3	12175-12183	consumes	
95-4	12184-12188	less	
95-5	12189-12195	memory	
95-6	12196-12200	than	
95-7	12201-12208	pgpool2	
95-8	12208-12209	.	

#Text=Streaming Replication
#Text=Apart from pooling connections, you can also manage your Postgres cluster with streaming replication using pgpool-II. 
96-1	12210-12219	Streaming	
96-2	12220-12231	Replication	
96-3	12232-12237	Apart	
96-4	12238-12242	from	
96-5	12243-12250	pooling	
96-6	12251-12262	connections	
96-7	12262-12263	,	
96-8	12264-12267	you	
96-9	12268-12271	can	
96-10	12272-12276	also	
96-11	12277-12283	manage	
96-12	12284-12288	your	
96-13	12289-12297	Postgres	
96-14	12298-12305	cluster	
96-15	12306-12310	with	
96-16	12311-12320	streaming	
96-17	12321-12332	replication	
96-18	12333-12338	using	
96-19	12339-12348	pgpool-II	
96-20	12348-12349	.	
96-21	12349-12350	 	

#Text=Streaming replication copies data from a primary node to a secondary node.
97-1	12351-12360	Streaming	
97-2	12361-12372	replication	
97-3	12373-12379	copies	
97-4	12380-12384	data	
97-5	12385-12389	from	
97-6	12390-12391	a	
97-7	12392-12399	primary	
97-8	12400-12404	node	
97-9	12405-12407	to	
97-10	12408-12409	a	
97-11	12410-12419	secondary	
97-12	12420-12424	node	
97-13	12424-12425	.	

#Text=Pgpool-II supports Postgres streaming replication, while pgbouncer does not.
98-1	12426-12435	Pgpool-II	
98-2	12436-12444	supports	
98-3	12445-12453	Postgres	
98-4	12454-12463	streaming	
98-5	12464-12475	replication	
98-6	12475-12476	,	
98-7	12477-12482	while	
98-8	12483-12492	pgbouncer	
98-9	12493-12497	does	
98-10	12498-12501	not	
98-11	12501-12502	.	

#Text=It is the best way to achieve high availability and prevent data loss.
99-1	12503-12505	It	
99-2	12506-12508	is	
99-3	12509-12512	the	
99-4	12513-12517	best	
99-5	12518-12521	way	
99-6	12522-12524	to	
99-7	12525-12532	achieve	
99-8	12533-12537	high	
99-9	12538-12550	availability	
99-10	12551-12554	and	
99-11	12555-12562	prevent	
99-12	12563-12567	data	
99-13	12568-12572	loss	
99-14	12572-12573	.	

#Text=Centralized password management
#Text=In a production environment where you expect many clients/applications to connect to the database through a connection pooler concurrently, it is necessary to use a centralized password management system to manage clients’ credentials.
100-1	12574-12585	Centralized	
100-2	12586-12594	password	
100-3	12595-12605	management	
100-4	12606-12608	In	
100-5	12609-12610	a	
100-6	12611-12621	production	
100-7	12622-12633	environment	
100-8	12634-12639	where	
100-9	12640-12643	you	
100-10	12644-12650	expect	
100-11	12651-12655	many	
100-12	12656-12663	clients	
100-13	12663-12664	/	
100-14	12664-12676	applications	
100-15	12677-12679	to	
100-16	12680-12687	connect	
100-17	12688-12690	to	
100-18	12691-12694	the	
100-19	12695-12703	database	
100-20	12704-12711	through	
100-21	12712-12713	a	
100-22	12714-12724	connection	
100-23	12725-12731	pooler	
100-24	12732-12744	concurrently	
100-25	12744-12745	,	
100-26	12746-12748	it	
100-27	12749-12751	is	
100-28	12752-12761	necessary	
100-29	12762-12764	to	
100-30	12765-12768	use	
100-31	12769-12770	a	
100-32	12771-12782	centralized	
100-33	12783-12791	password	
100-34	12792-12802	management	
100-35	12803-12809	system	
100-36	12810-12812	to	
100-37	12813-12819	manage	
100-38	12820-12827	clients	
100-39	12827-12828	’	
100-40	12829-12840	credentials	
100-41	12840-12841	.	

#Text=You can make use of auth_query in pgbouncer to load clients’ credentials from the database instead of storing clients’ credentials in a userlist.txt file and comparing credentials from the connection string against the userlist.txt file.
101-1	12842-12845	You	
101-2	12846-12849	can	
101-3	12850-12854	make	
101-4	12855-12858	use	
101-5	12859-12861	of	
101-6	12862-12872	auth_query	
101-7	12873-12875	in	
101-8	12876-12885	pgbouncer	
101-9	12886-12888	to	
101-10	12889-12893	load	
101-11	12894-12901	clients	
101-12	12901-12902	’	
101-13	12903-12914	credentials	
101-14	12915-12919	from	
101-15	12920-12923	the	
101-16	12924-12932	database	
101-17	12933-12940	instead	
101-18	12941-12943	of	
101-19	12944-12951	storing	
101-20	12952-12959	clients	
101-21	12959-12960	’	
101-22	12961-12972	credentials	
101-23	12973-12975	in	
101-24	12976-12977	a	
101-25	12978-12990	userlist.txt	
101-26	12991-12995	file	
101-27	12996-12999	and	
101-28	13000-13009	comparing	
101-29	13010-13021	credentials	
101-30	13022-13026	from	
101-31	13027-13030	the	
101-32	13031-13041	connection	
101-33	13042-13048	string	
101-34	13049-13056	against	
101-35	13057-13060	the	
101-36	13061-13073	userlist.txt	
101-37	13074-13078	file	
101-38	13078-13079	.	

#Text=Load balancing and high availability
#Text=Finally, if you want to add load balancing and high availability to your pooled connections, then pgpool2 is the right tool to use. pgpool2 supports Postgres high availability through the in-built watchdog processes.
102-1	13080-13084	Load	
102-2	13085-13094	balancing	
102-3	13095-13098	and	
102-4	13099-13103	high	
102-5	13104-13116	availability	
102-6	13117-13124	Finally	
102-7	13124-13125	,	
102-8	13126-13128	if	
102-9	13129-13132	you	
102-10	13133-13137	want	
102-11	13138-13140	to	
102-12	13141-13144	add	
102-13	13145-13149	load	
102-14	13150-13159	balancing	
102-15	13160-13163	and	
102-16	13164-13168	high	
102-17	13169-13181	availability	
102-18	13182-13184	to	
102-19	13185-13189	your	
102-20	13190-13196	pooled	
102-21	13197-13208	connections	
102-22	13208-13209	,	
102-23	13210-13214	then	
102-24	13215-13222	pgpool2	
102-25	13223-13225	is	
102-26	13226-13229	the	
102-27	13230-13235	right	
102-28	13236-13240	tool	
102-29	13241-13243	to	
102-30	13244-13247	use	
102-31	13247-13248	.	
102-32	13249-13256	pgpool2	
102-33	13257-13265	supports	
102-34	13266-13274	Postgres	
102-35	13275-13279	high	
102-36	13280-13292	availability	
102-37	13293-13300	through	
102-38	13301-13304	the	
102-39	13305-13313	in-built	
102-40	13314-13322	watchdog	
102-41	13323-13332	processes	
102-42	13332-13333	.	

#Text=This pgpool2 sub-process monitors the health of pgpool2 nodes participating in the watchdog cluster as well as coordinating between multiple pgpool2 nodes.
103-1	13334-13338	This	
103-2	13339-13346	pgpool2	
103-3	13347-13358	sub-process	
103-4	13359-13367	monitors	
103-5	13368-13371	the	
103-6	13372-13378	health	
103-7	13379-13381	of	
103-8	13382-13389	pgpool2	
103-9	13390-13395	nodes	
103-10	13396-13409	participating	
103-11	13410-13412	in	
103-12	13413-13416	the	
103-13	13417-13425	watchdog	
103-14	13426-13433	cluster	
103-15	13434-13436	as	
103-16	13437-13441	well	
103-17	13442-13444	as	
103-18	13445-13457	coordinating	
103-19	13458-13465	between	
103-20	13466-13474	multiple	
103-21	13475-13482	pgpool2	
103-22	13483-13488	nodes	
103-23	13488-13489	.	

#Text=Conclusion
#Text=Database performance can be improved beyond connection pooling.
104-1	13490-13500	Conclusion	
104-2	13501-13509	Database	
104-3	13510-13521	performance	
104-4	13522-13525	can	
104-5	13526-13528	be	
104-6	13529-13537	improved	
104-7	13538-13544	beyond	
104-8	13545-13555	connection	
104-9	13556-13563	pooling	
104-10	13563-13564	.	

#Text=Replication, load balancing, and in-memory caching can contribute to efficient database performance.
105-1	13565-13576	Replication	
105-2	13576-13577	,	
105-3	13578-13582	load	
105-4	13583-13592	balancing	
105-5	13592-13593	,	
105-6	13594-13597	and	
105-7	13598-13607	in-memory	
105-8	13608-13615	caching	
105-9	13616-13619	can	
105-10	13620-13630	contribute	
105-11	13631-13633	to	
105-12	13634-13643	efficient	
105-13	13644-13652	database	
105-14	13653-13664	performance	
105-15	13664-13665	.	

#Text=If a web service is designed to make a lot of read and write queries to a database, then you have multiple instances of a Postgres database in place to take care of write queries from clients through a load balancer such as pgpool-II while in-memory caching can be used to optimize read queries.
106-1	13666-13668	If	
106-2	13669-13670	a	
106-3	13671-13674	web	
106-4	13675-13682	service	
106-5	13683-13685	is	
106-6	13686-13694	designed	
106-7	13695-13697	to	
106-8	13698-13702	make	
106-9	13703-13704	a	
106-10	13705-13708	lot	
106-11	13709-13711	of	
106-12	13712-13716	read	
106-13	13717-13720	and	
106-14	13721-13726	write	
106-15	13727-13734	queries	
106-16	13735-13737	to	
106-17	13738-13739	a	
106-18	13740-13748	database	
106-19	13748-13749	,	
106-20	13750-13754	then	
106-21	13755-13758	you	
106-22	13759-13763	have	
106-23	13764-13772	multiple	
106-24	13773-13782	instances	
106-25	13783-13785	of	
106-26	13786-13787	a	
106-27	13788-13796	Postgres	
106-28	13797-13805	database	
106-29	13806-13808	in	
106-30	13809-13814	place	
106-31	13815-13817	to	
106-32	13818-13822	take	
106-33	13823-13827	care	
106-34	13828-13830	of	
106-35	13831-13836	write	
106-36	13837-13844	queries	
106-37	13845-13849	from	
106-38	13850-13857	clients	
106-39	13858-13865	through	
106-40	13866-13867	a	
106-41	13868-13872	load	
106-42	13873-13881	balancer	
106-43	13882-13886	such	
106-44	13887-13889	as	
106-45	13890-13899	pgpool-II	
106-46	13900-13905	while	
106-47	13906-13915	in-memory	
106-48	13916-13923	caching	
106-49	13924-13927	can	
106-50	13928-13930	be	
106-51	13931-13935	used	
106-52	13936-13938	to	
106-53	13939-13947	optimize	
106-54	13948-13952	read	
106-55	13953-13960	queries	
106-56	13960-13961	.	

#Text=Despite the pgpool-II ability to function as a loader balancer and connection pooler, pgbouncer is the preferred middleware solution for connection pooling because it is easy to set up, not too difficult to manage, and primarily serves as a connection pooler without any other functions.
107-1	13962-13969	Despite	
107-2	13970-13973	the	
107-3	13974-13983	pgpool-II	
107-4	13984-13991	ability	
107-5	13992-13994	to	
107-6	13995-14003	function	
107-7	14004-14006	as	
107-8	14007-14008	a	
107-9	14009-14015	loader	
107-10	14016-14024	balancer	
107-11	14025-14028	and	
107-12	14029-14039	connection	
107-13	14040-14046	pooler	
107-14	14046-14047	,	
107-15	14048-14057	pgbouncer	
107-16	14058-14060	is	
107-17	14061-14064	the	
107-18	14065-14074	preferred	
107-19	14075-14085	middleware	
107-20	14086-14094	solution	
107-21	14095-14098	for	
107-22	14099-14109	connection	
107-23	14110-14117	pooling	
107-24	14118-14125	because	
107-25	14126-14128	it	
107-26	14129-14131	is	
107-27	14132-14136	easy	
107-28	14137-14139	to	
107-29	14140-14143	set	
107-30	14144-14146	up	
107-31	14146-14147	,	
107-32	14148-14151	not	
107-33	14152-14155	too	
107-34	14156-14165	difficult	
107-35	14166-14168	to	
107-36	14169-14175	manage	
107-37	14175-14176	,	
107-38	14177-14180	and	
107-39	14181-14190	primarily	
107-40	14191-14197	serves	
107-41	14198-14200	as	
107-42	14201-14202	a	
107-43	14203-14213	connection	
107-44	14214-14220	pooler	
107-45	14221-14228	without	
107-46	14229-14232	any	
107-47	14233-14238	other	
107-48	14239-14248	functions	
107-49	14248-14249	.	

#Text=Tags: connection pooling, databases, pgbouncer, postgreSQL
#Text=The Stack Overflow Podcast is a weekly conversation about working in software development, learning to code, and the art and culture of computer programming.
108-1	14250-14254	Tags	
108-2	14254-14255	:	
108-3	14256-14266	connection	
108-4	14267-14274	pooling	
108-5	14274-14275	,	
108-6	14276-14285	databases	
108-7	14285-14286	,	
108-8	14287-14296	pgbouncer	
108-9	14296-14297	,	
108-10	14298-14308	postgreSQL	
108-11	14309-14312	The	
108-12	14313-14318	Stack	
108-13	14319-14327	Overflow	
108-14	14328-14335	Podcast	
108-15	14336-14338	is	
108-16	14339-14340	a	
108-17	14341-14347	weekly	
108-18	14348-14360	conversation	
108-19	14361-14366	about	
108-20	14367-14374	working	
108-21	14375-14377	in	
108-22	14378-14386	software	
108-23	14387-14398	development	
108-24	14398-14399	,	
108-25	14400-14408	learning	
108-26	14409-14411	to	
108-27	14412-14416	code	
108-28	14416-14417	,	
108-29	14418-14421	and	
108-30	14422-14425	the	
108-31	14426-14429	art	
108-32	14430-14433	and	
108-33	14434-14441	culture	
108-34	14442-14444	of	
108-35	14445-14453	computer	
108-36	14454-14465	programming	
108-37	14465-14466	.	

#Text=Related
#Text=newsletter
#Text=October 23, 2020
#Text=The Overflow #44: Machine learning in production
#Text=Welcome to ISSUE #44 of the Overflow!
109-1	14467-14474	Related	
109-2	14475-14485	newsletter	
109-3	14486-14493	October	
109-4	14494-14496	23	
109-5	14496-14497	,	
109-6	14498-14502	2020	
109-7	14503-14506	The	
109-8	14507-14515	Overflow	
109-9	14516-14519	#44	
109-10	14519-14520	:	
109-11	14521-14528	Machine	
109-12	14529-14537	learning	
109-13	14538-14540	in	
109-14	14541-14551	production	
109-15	14552-14559	Welcome	
109-16	14560-14562	to	
109-17	14563-14568	ISSUE	
109-18	14569-14572	#44	
109-19	14573-14575	of	
109-20	14576-14579	the	
109-21	14580-14588	Overflow	
109-22	14588-14589	!	

#Text=This newsletter is by developers, for developers, written and curated by the Stack Overflow team and Cassidy Williams at Netlify.
110-1	14590-14594	This	
110-2	14595-14605	newsletter	
110-3	14606-14608	is	
110-4	14609-14611	by	
110-5	14612-14622	developers	
110-6	14622-14623	,	
110-7	14624-14627	for	
110-8	14628-14638	developers	
110-9	14638-14639	,	
110-10	14640-14647	written	
110-11	14648-14651	and	
110-12	14652-14659	curated	
110-13	14660-14662	by	
110-14	14663-14666	the	
110-15	14667-14672	Stack	
110-16	14673-14681	Overflow	
110-17	14682-14686	team	
110-18	14687-14690	and	
110-19	14690-14691	 	
110-20	14691-14698	Cassidy	
110-21	14699-14707	Williams	
110-22	14707-14708	 	
110-23	14708-14710	at	
110-24	14710-14711	 	
110-25	14711-14718	Netlify	
110-26	14718-14719	.	

#Text=This week, get in the fast lane and start pooling your database connections, make a CPU out of electronic components drawn by hand on paper, and learn to toggle multiple property…
#Text=Medi Madelen Gwosdz
#Text=Content Strategist
#Text=code-for-a-living
#Text=January 14, 2021
#Text=Have the tables turned on NoSQL?
111-1	14720-14724	This	
111-2	14725-14729	week	
111-3	14729-14730	,	
111-4	14731-14734	get	
111-5	14735-14737	in	
111-6	14738-14741	the	
111-7	14742-14746	fast	
111-8	14747-14751	lane	
111-9	14752-14755	and	
111-10	14756-14761	start	
111-11	14762-14769	pooling	
111-12	14770-14774	your	
111-13	14775-14783	database	
111-14	14784-14795	connections	
111-15	14795-14796	,	
111-16	14797-14801	make	
111-17	14802-14803	a	
111-18	14804-14807	CPU	
111-19	14808-14811	out	
111-20	14812-14814	of	
111-21	14815-14825	electronic	
111-22	14826-14836	components	
111-23	14837-14842	drawn	
111-24	14843-14845	by	
111-25	14846-14850	hand	
111-26	14851-14853	on	
111-27	14854-14859	paper	
111-28	14859-14860	,	
111-29	14861-14864	and	
111-30	14865-14870	learn	
111-31	14871-14873	to	
111-32	14874-14880	toggle	
111-33	14881-14889	multiple	
111-34	14890-14898	property	
111-35	14898-14899	…	
111-36	14900-14904	Medi	
111-37	14905-14912	Madelen	
111-38	14913-14919	Gwosdz	
111-39	14920-14927	Content	
111-40	14928-14938	Strategist	
111-41	14939-14956	code-for-a-living	
111-42	14957-14964	January	
111-43	14965-14967	14	
111-44	14967-14968	,	
111-45	14969-14973	2021	
111-46	14974-14978	Have	
111-47	14979-14982	the	
111-48	14983-14989	tables	
111-49	14990-14996	turned	
111-50	14997-14999	on	
111-51	15000-15005	NoSQL	
111-52	15005-15006	?	

#Text=NoSQL was the next big thing in system architecture in 2011, but overall interest in it has plateaued recently.
112-1	15007-15012	NoSQL	
112-2	15013-15016	was	
112-3	15017-15020	the	
112-4	15021-15025	next	
112-5	15026-15029	big	
112-6	15030-15035	thing	
112-7	15036-15038	in	
112-8	15039-15045	system	
112-9	15046-15058	architecture	
112-10	15059-15061	in	
112-11	15062-15066	2011	
112-12	15066-15067	,	
112-13	15068-15071	but	
112-14	15072-15079	overall	
112-15	15080-15088	interest	
112-16	15089-15091	in	
112-17	15092-15094	it	
112-18	15095-15098	has	
112-19	15099-15108	plateaued	
112-20	15109-15117	recently	
112-21	15117-15118	.	

#Text=What is NoSQL, what does it have to do with modern development, and is it worth implementing in your project?
113-1	15119-15123	What	
113-2	15124-15126	is	
113-3	15127-15132	NoSQL	
113-4	15132-15133	,	
113-5	15134-15138	what	
113-6	15139-15143	does	
113-7	15144-15146	it	
113-8	15147-15151	have	
113-9	15152-15154	to	
113-10	15155-15157	do	
113-11	15158-15162	with	
113-12	15163-15169	modern	
113-13	15170-15181	development	
113-14	15181-15182	,	
113-15	15183-15186	and	
113-16	15187-15189	is	
113-17	15190-15192	it	
113-18	15193-15198	worth	
113-19	15199-15211	implementing	
113-20	15212-15214	in	
113-21	15215-15219	your	
113-22	15220-15227	project	
113-23	15227-15228	?	

#Text=John Biggs and Ryan Donovan
#Text=code-for-a-living
#Text=March 3, 2021
#Text=Best practices can slow your application down
#Text=In order to get the most performant site possible when building the codebase for our public Stack Overflow site, we didn’t always follow best practices.
114-1	15229-15233	John	
114-2	15234-15239	Biggs	
114-3	15240-15243	and	
114-4	15244-15248	Ryan	
114-5	15249-15256	Donovan	
114-6	15257-15274	code-for-a-living	
114-7	15275-15280	March	
114-8	15281-15282	3	
114-9	15282-15283	,	
114-10	15284-15288	2021	
114-11	15289-15293	Best	
114-12	15294-15303	practices	
114-13	15304-15307	can	
114-14	15308-15312	slow	
114-15	15313-15317	your	
114-16	15318-15329	application	
114-17	15330-15334	down	
114-18	15335-15337	In	
114-19	15338-15343	order	
114-20	15344-15346	to	
114-21	15347-15350	get	
114-22	15351-15354	the	
114-23	15355-15359	most	
114-24	15360-15370	performant	
114-25	15371-15375	site	
114-26	15376-15384	possible	
114-27	15385-15389	when	
114-28	15390-15398	building	
114-29	15399-15402	the	
114-30	15403-15411	codebase	
114-31	15412-15415	for	
114-32	15416-15419	our	
114-33	15420-15426	public	
114-34	15427-15432	Stack	
114-35	15433-15441	Overflow	
114-36	15442-15446	site	
114-37	15446-15447	,	
114-38	15448-15450	we	
114-39	15451-15455	didn	
114-40	15455-15456	’	
114-41	15456-15457	t	
114-42	15458-15464	always	
114-43	15465-15471	follow	
114-44	15472-15476	best	
114-45	15477-15486	practices	
114-46	15486-15487	.	

#Text=Roberta Arcoverde and Ryan Donovan
#Text=code-for-a-living
#Text=February 24, 2021
#Text=What I wish I had known about single page applications
#Text=Single page apps are all the rage today, but they don't always operate the same as traditional web pages.
115-1	15488-15495	Roberta	
115-2	15496-15505	Arcoverde	
115-3	15506-15509	and	
115-4	15510-15514	Ryan	
115-5	15515-15522	Donovan	
115-6	15523-15540	code-for-a-living	
115-7	15541-15549	February	
115-8	15550-15552	24	
115-9	15552-15553	,	
115-10	15554-15558	2021	
115-11	15559-15563	What	
115-12	15564-15565	I	
115-13	15566-15570	wish	
115-14	15571-15572	I	
115-15	15573-15576	had	
115-16	15577-15582	known	
115-17	15583-15588	about	
115-18	15589-15595	single	
115-19	15596-15600	page	
115-20	15601-15613	applications	
115-21	15614-15620	Single	
115-22	15621-15625	page	
115-23	15626-15630	apps	
115-24	15631-15634	are	
115-25	15635-15638	all	
115-26	15639-15642	the	
115-27	15643-15647	rage	
115-28	15648-15653	today	
115-29	15653-15654	,	
115-30	15655-15658	but	
115-31	15659-15663	they	
115-32	15664-15669	don't	
115-33	15670-15676	always	
115-34	15677-15684	operate	
115-35	15685-15688	the	
115-36	15689-15693	same	
115-37	15694-15696	as	
115-38	15697-15708	traditional	
115-39	15709-15712	web	
115-40	15713-15718	pages	
115-41	15718-15719	.	

#Text=Michael Pratt
#Text=11 Comments
#Text=Iwouldliketonotprovidemyname says:
#Text=14 Oct 20 at 11:20
#Text=As you see, transaction throughput increased from 486 transactions per second to 566 transactions per second.
116-1	15720-15727	Michael	
116-2	15728-15733	Pratt	
116-3	15734-15736	11	
116-4	15737-15745	Comments	
116-5	15746-15774	Iwouldliketonotprovidemyname	
116-6	15775-15779	says	
116-7	15779-15780	:	
116-8	15781-15783	14	
116-9	15784-15787	Oct	
116-10	15788-15790	20	
116-11	15791-15793	at	
116-12	15794-15796	11	
116-13	15796-15797	:	
116-14	15797-15799	20	
116-15	15800-15802	As	
116-16	15803-15806	you	
116-17	15807-15810	see	
116-18	15810-15811	,	
116-19	15812-15823	transaction	
116-20	15824-15834	throughput	
116-21	15835-15844	increased	
116-22	15845-15849	from	
116-23	15850-15853	486	
116-24	15854-15866	transactions	
116-25	15867-15870	per	
116-26	15871-15877	second	
116-27	15878-15880	to	
116-28	15881-15884	566	
116-29	15885-15897	transactions	
116-30	15898-15901	per	
116-31	15902-15908	second	
116-32	15908-15909	.	

#Text=With the help of pgbouncer, transaction throughput improved by approximately 60%.
117-1	15910-15914	With	
117-2	15915-15918	the	
117-3	15919-15923	help	
117-4	15924-15926	of	
117-5	15927-15936	pgbouncer	
117-6	15936-15937	,	
117-7	15938-15949	transaction	
117-8	15950-15960	throughput	
117-9	15961-15969	improved	
117-10	15970-15972	by	
117-11	15973-15986	approximately	
117-12	15987-15990	60%	
117-13	15990-15991	.	

#Text=That 60% is a bit huge.
118-1	15992-15996	That	
118-2	15997-16000	60%	
118-3	16001-16003	is	
118-4	16004-16005	a	
118-5	16006-16009	bit	
118-6	16010-16014	huge	
118-7	16014-16015	.	

#Text=The increase of 80 TPS is more like 16% of the initial 486 TPS.
119-1	16016-16019	The	
119-2	16020-16028	increase	
119-3	16029-16031	of	
119-4	16032-16034	80	
119-5	16035-16038	TPS	
119-6	16039-16041	is	
119-7	16042-16046	more	
119-8	16047-16051	like	
119-9	16052-16055	16%	
119-10	16056-16058	of	
119-11	16059-16062	the	
119-12	16063-16070	initial	
119-13	16071-16074	486	
119-14	16075-16078	TPS	
119-15	16078-16079	.	

#Text=The 75% increase for pgpool-II is also a bit large.
120-1	16080-16083	The	
120-2	16084-16087	75%	
120-3	16088-16096	increase	
120-4	16097-16100	for	
120-5	16101-16110	pgpool-II	
120-6	16111-16113	is	
120-7	16114-16118	also	
120-8	16119-16120	a	
120-9	16121-16124	bit	
120-10	16125-16130	large	
120-11	16130-16131	.	

#Text=Reply
#Text=Tien Do says:
#Text=21 Oct 20 at 6:35
#Text=Yeah, how is it 60% and 75%?
121-1	16132-16137	Reply	
121-2	16138-16142	Tien	
121-3	16143-16145	Do	
121-4	16146-16150	says	
121-5	16150-16151	:	
121-6	16152-16154	21	
121-7	16155-16158	Oct	
121-8	16159-16161	20	
121-9	16162-16164	at	
121-10	16165-16166	6	
121-11	16166-16167	:	
121-12	16167-16169	35	
121-13	16170-16174	Yeah	
121-14	16174-16175	,	
121-15	16176-16179	how	
121-16	16180-16182	is	
121-17	16183-16185	it	
121-18	16186-16189	60%	
121-19	16190-16193	and	
121-20	16194-16197	75%	
121-21	16197-16198	?	

#Text=Reply
#Text=CanadianLuke says:
#Text=22 Oct 20 at 6:55
#Text=A week with no reply to simple math… Not looking good…
#Text=Reply
#Text=Travis says:
#Text=14 Oct 20 at 3:49
#Text=It is certainly an interesting technique, although there are a whole host of unintended consequences associated with this approach that would be well to mention.
122-1	16199-16204	Reply	
122-2	16205-16217	CanadianLuke	
122-3	16218-16222	says	
122-4	16222-16223	:	
122-5	16224-16226	22	
122-6	16227-16230	Oct	
122-7	16231-16233	20	
122-8	16234-16236	at	
122-9	16237-16238	6	
122-10	16238-16239	:	
122-11	16239-16241	55	
122-12	16242-16243	A	
122-13	16244-16248	week	
122-14	16249-16253	with	
122-15	16254-16256	no	
122-16	16257-16262	reply	
122-17	16263-16265	to	
122-18	16266-16272	simple	
122-19	16273-16277	math	
122-20	16277-16278	…	
122-21	16279-16282	Not	
122-22	16283-16290	looking	
122-23	16291-16295	good	
122-24	16295-16296	…	
122-25	16297-16302	Reply	
122-26	16303-16309	Travis	
122-27	16310-16314	says	
122-28	16314-16315	:	
122-29	16316-16318	14	
122-30	16319-16322	Oct	
122-31	16323-16325	20	
122-32	16326-16328	at	
122-33	16329-16330	3	
122-34	16330-16331	:	
122-35	16331-16333	49	
122-36	16334-16336	It	
122-37	16337-16339	is	
122-38	16340-16349	certainly	
122-39	16350-16352	an	
122-40	16353-16364	interesting	
122-41	16365-16374	technique	
122-42	16374-16375	,	
122-43	16376-16384	although	
122-44	16385-16390	there	
122-45	16391-16394	are	
122-46	16395-16396	a	
122-47	16397-16402	whole	
122-48	16403-16407	host	
122-49	16408-16410	of	
122-50	16411-16421	unintended	
122-51	16422-16434	consequences	
122-52	16435-16445	associated	
122-53	16446-16450	with	
122-54	16451-16455	this	
122-55	16456-16464	approach	
122-56	16465-16469	that	
122-57	16470-16475	would	
122-58	16476-16478	be	
122-59	16479-16483	well	
122-60	16484-16486	to	
122-61	16487-16494	mention	
122-62	16494-16495	.	

#Text=Pooling transactions to memory prior to pushing them to the database has very serious implications with regards to data integrity, as one main example.
123-1	16496-16503	Pooling	
123-2	16504-16516	transactions	
123-3	16517-16519	to	
123-4	16520-16526	memory	
123-5	16527-16532	prior	
123-6	16533-16535	to	
123-7	16536-16543	pushing	
123-8	16544-16548	them	
123-9	16549-16551	to	
123-10	16552-16555	the	
123-11	16556-16564	database	
123-12	16565-16568	has	
123-13	16569-16573	very	
123-14	16574-16581	serious	
123-15	16582-16594	implications	
123-16	16595-16599	with	
123-17	16600-16607	regards	
123-18	16608-16610	to	
123-19	16611-16615	data	
123-20	16616-16625	integrity	
123-21	16625-16626	,	
123-22	16627-16629	as	
123-23	16630-16633	one	
123-24	16634-16638	main	
123-25	16639-16646	example	
123-26	16646-16647	.	

#Text=This approach also will require a very large amount of server memory to be used; in instances where memory is shared across multiple nodes, this can be problematic if there is a node failure.
124-1	16648-16652	This	
124-2	16653-16661	approach	
124-3	16662-16666	also	
124-4	16667-16671	will	
124-5	16672-16679	require	
124-6	16680-16681	a	
124-7	16682-16686	very	
124-8	16687-16692	large	
124-9	16693-16699	amount	
124-10	16700-16702	of	
124-11	16703-16709	server	
124-12	16710-16716	memory	
124-13	16717-16719	to	
124-14	16720-16722	be	
124-15	16723-16727	used	
124-16	16727-16728	;	
124-17	16729-16731	in	
124-18	16732-16741	instances	
124-19	16742-16747	where	
124-20	16748-16754	memory	
124-21	16755-16757	is	
124-22	16758-16764	shared	
124-23	16765-16771	across	
124-24	16772-16780	multiple	
124-25	16781-16786	nodes	
124-26	16786-16787	,	
124-27	16788-16792	this	
124-28	16793-16796	can	
124-29	16797-16799	be	
124-30	16800-16811	problematic	
124-31	16812-16814	if	
124-32	16815-16820	there	
124-33	16821-16823	is	
124-34	16824-16825	a	
124-35	16826-16830	node	
124-36	16831-16838	failure	
124-37	16838-16839	.	

#Text=So, while it may be the case that more transactions per second occur, the risk seems to outweigh any gains.
125-1	16840-16842	So	
125-2	16842-16843	,	
125-3	16844-16849	while	
125-4	16850-16852	it	
125-5	16853-16856	may	
125-6	16857-16859	be	
125-7	16860-16863	the	
125-8	16864-16868	case	
125-9	16869-16873	that	
125-10	16874-16878	more	
125-11	16879-16891	transactions	
125-12	16892-16895	per	
125-13	16896-16902	second	
125-14	16903-16908	occur	
125-15	16908-16909	,	
125-16	16910-16913	the	
125-17	16914-16918	risk	
125-18	16919-16924	seems	
125-19	16925-16927	to	
125-20	16928-16936	outweigh	
125-21	16937-16940	any	
125-22	16941-16946	gains	
125-23	16946-16947	.	

#Text=Reply
#Text=Michael Aboagye says:
#Text=19 Oct 20 at 7:23
#Text=@Travis, please I referred to pooling connection in this article.
126-1	16948-16953	Reply	
126-2	16954-16961	Michael	
126-3	16962-16969	Aboagye	
126-4	16970-16974	says	
126-5	16974-16975	:	
126-6	16976-16978	19	
126-7	16979-16982	Oct	
126-8	16983-16985	20	
126-9	16986-16988	at	
126-10	16989-16990	7	
126-11	16990-16991	:	
126-12	16991-16993	23	
126-13	16994-16995	@	
126-14	16995-17001	Travis	
126-15	17001-17002	,	
126-16	17003-17009	please	
126-17	17010-17011	I	
126-18	17012-17020	referred	
126-19	17021-17023	to	
126-20	17024-17031	pooling	
126-21	17032-17042	connection	
126-22	17043-17045	in	
126-23	17046-17050	this	
126-24	17051-17058	article	
126-25	17058-17059	.	

#Text=But do you know pgpool supports postgres stream replication?
127-1	17060-17063	But	
127-2	17064-17066	do	
127-3	17067-17070	you	
127-4	17071-17075	know	
127-5	17076-17082	pgpool	
127-6	17083-17091	supports	
127-7	17092-17100	postgres	
127-8	17101-17107	stream	
127-9	17108-17119	replication	
127-10	17119-17120	?	

#Text=In addition, the presence of transaction log ensures data integrity is maintained.
128-1	17121-17123	In	
128-2	17124-17132	addition	
128-3	17132-17133	,	
128-4	17134-17137	the	
128-5	17138-17146	presence	
128-6	17147-17149	of	
128-7	17150-17161	transaction	
128-8	17162-17165	log	
128-9	17166-17173	ensures	
128-10	17174-17178	data	
128-11	17179-17188	integrity	
128-12	17189-17191	is	
128-13	17192-17202	maintained	
128-14	17202-17203	.	

#Text=Even without in the absence
#Text=of pgpool cluster, postgres supports replication concepts such as synchronous and asynchronous replication to prevent data loss.
129-1	17204-17208	Even	
129-2	17209-17216	without	
129-3	17217-17219	in	
129-4	17220-17223	the	
129-5	17224-17231	absence	
129-6	17232-17234	of	
129-7	17235-17241	pgpool	
129-8	17242-17249	cluster	
129-9	17249-17250	,	
129-10	17251-17259	postgres	
129-11	17260-17268	supports	
129-12	17269-17280	replication	
129-13	17281-17289	concepts	
129-14	17290-17294	such	
129-15	17295-17297	as	
129-16	17298-17309	synchronous	
129-17	17310-17313	and	
129-18	17314-17326	asynchronous	
129-19	17327-17338	replication	
129-20	17339-17341	to	
129-21	17342-17349	prevent	
129-22	17350-17354	data	
129-23	17355-17359	loss	
129-24	17359-17360	.	

#Text=Reply
#Text=Galletto says:
#Text=22 Oct 20 at 9:54
#Text=Maybe I’m missing something entirely, but I thought connection pooling has been the default in .NET for many years…
#Text=Correct?
130-1	17361-17366	Reply	
130-2	17367-17375	Galletto	
130-3	17376-17380	says	
130-4	17380-17381	:	
130-5	17382-17384	22	
130-6	17385-17388	Oct	
130-7	17389-17391	20	
130-8	17392-17394	at	
130-9	17395-17396	9	
130-10	17396-17397	:	
130-11	17397-17399	54	
130-12	17400-17405	Maybe	
130-13	17406-17407	I	
130-14	17407-17408	’	
130-15	17408-17409	m	
130-16	17410-17417	missing	
130-17	17418-17427	something	
130-18	17428-17436	entirely	
130-19	17436-17437	,	
130-20	17438-17441	but	
130-21	17442-17443	I	
130-22	17444-17451	thought	
130-23	17452-17462	connection	
130-24	17463-17470	pooling	
130-25	17471-17474	has	
130-26	17475-17479	been	
130-27	17480-17483	the	
130-28	17484-17491	default	
130-29	17492-17494	in	
130-30	17495-17496	.	
130-31	17496-17499	NET	
130-32	17500-17503	for	
130-33	17504-17508	many	
130-34	17509-17514	years	
130-35	17514-17515	…	
130-36	17516-17523	Correct	
130-37	17523-17524	?	

#Text=Reply
#Text=Nilesh says:
#Text=16 Oct 20 at 11:19
#Text=@Travis — The article talks about pooling connections but mentions no such thing as pooling transactions in memory .
131-1	17525-17530	Reply	
131-2	17531-17537	Nilesh	
131-3	17538-17542	says	
131-4	17542-17543	:	
131-5	17544-17546	16	
131-6	17547-17550	Oct	
131-7	17551-17553	20	
131-8	17554-17556	at	
131-9	17557-17559	11	
131-10	17559-17560	:	
131-11	17560-17562	19	
131-12	17563-17564	@	
131-13	17564-17570	Travis	
131-14	17571-17572	—	
131-15	17573-17576	The	
131-16	17577-17584	article	
131-17	17585-17590	talks	
131-18	17591-17596	about	
131-19	17597-17604	pooling	
131-20	17605-17616	connections	
131-21	17617-17620	but	
131-22	17621-17629	mentions	
131-23	17630-17632	no	
131-24	17633-17637	such	
131-25	17638-17643	thing	
131-26	17644-17646	as	
131-27	17647-17654	pooling	
131-28	17655-17667	transactions	
131-29	17668-17670	in	
131-30	17671-17677	memory	
131-31	17678-17679	.	

#Text=I understand the static memory footprint that postgres has on the server would increase but I can’t see how this would lead to data integrity issues.
132-1	17680-17681	I	
132-2	17682-17692	understand	
132-3	17693-17696	the	
132-4	17697-17703	static	
132-5	17704-17710	memory	
132-6	17711-17720	footprint	
132-7	17721-17725	that	
132-8	17726-17734	postgres	
132-9	17735-17738	has	
132-10	17739-17741	on	
132-11	17742-17745	the	
132-12	17746-17752	server	
132-13	17753-17758	would	
132-14	17759-17767	increase	
132-15	17768-17771	but	
132-16	17772-17773	I	
132-17	17774-17777	can	
132-18	17777-17778	’	
132-19	17778-17779	t	
132-20	17780-17783	see	
132-21	17784-17787	how	
132-22	17788-17792	this	
132-23	17793-17798	would	
132-24	17799-17803	lead	
132-25	17804-17806	to	
132-26	17807-17811	data	
132-27	17812-17821	integrity	
132-28	17822-17828	issues	
132-29	17828-17829	.	

#Text=Am I missing anything ?
133-1	17830-17832	Am	
133-2	17833-17834	I	
133-3	17835-17842	missing	
133-4	17843-17851	anything	
133-5	17852-17853	?	

#Text=Reply
#Text=Michael Aboagye says:
#Text=19 Oct 20 at 7:24
#Text=Thanks for your comments, Nilesh.
134-1	17854-17859	Reply	
134-2	17860-17867	Michael	
134-3	17868-17875	Aboagye	
134-4	17876-17880	says	
134-5	17880-17881	:	
134-6	17882-17884	19	
134-7	17885-17888	Oct	
134-8	17889-17891	20	
134-9	17892-17894	at	
134-10	17895-17896	7	
134-11	17896-17897	:	
134-12	17897-17899	24	
134-13	17900-17906	Thanks	
134-14	17907-17910	for	
134-15	17911-17915	your	
134-16	17916-17924	comments	
134-17	17924-17925	,	
134-18	17926-17932	Nilesh	
134-19	17932-17933	.	

#Text=Reply
#Text=Jeff Dafoe says:
#Text=22 Oct 20 at 5:21
#Text=One thing to be aware of with connection pooling, particularly under PG, is that a reused pool connection may not be in the same initial state as a brand new connection from the backend.
135-1	17934-17939	Reply	
135-2	17940-17944	Jeff	
135-3	17945-17950	Dafoe	
135-4	17951-17955	says	
135-5	17955-17956	:	
135-6	17957-17959	22	
135-7	17960-17963	Oct	
135-8	17964-17966	20	
135-9	17967-17969	at	
135-10	17970-17971	5	
135-11	17971-17972	:	
135-12	17972-17974	21	
135-13	17975-17978	One	
135-14	17979-17984	thing	
135-15	17985-17987	to	
135-16	17988-17990	be	
135-17	17991-17996	aware	
135-18	17997-17999	of	
135-19	18000-18004	with	
135-20	18005-18015	connection	
135-21	18016-18023	pooling	
135-22	18023-18024	,	
135-23	18025-18037	particularly	
135-24	18038-18043	under	
135-25	18044-18046	PG	
135-26	18046-18047	,	
135-27	18048-18050	is	
135-28	18051-18055	that	
135-29	18056-18057	a	
135-30	18058-18064	reused	
135-31	18065-18069	pool	
135-32	18070-18080	connection	
135-33	18081-18084	may	
135-34	18085-18088	not	
135-35	18089-18091	be	
135-36	18092-18094	in	
135-37	18095-18098	the	
135-38	18099-18103	same	
135-39	18104-18111	initial	
135-40	18112-18117	state	
135-41	18118-18120	as	
135-42	18121-18122	a	
135-43	18123-18128	brand	
135-44	18129-18132	new	
135-45	18133-18143	connection	
135-46	18144-18148	from	
135-47	18149-18152	the	
135-48	18153-18160	backend	
135-49	18160-18161	.	

#Text=Session variables persist across shared connections, data may not be cleared from temp tables, and some types of errors are not cleared until the backend is recycled.
136-1	18162-18169	Session	
136-2	18170-18179	variables	
136-3	18180-18187	persist	
136-4	18188-18194	across	
136-5	18195-18201	shared	
136-6	18202-18213	connections	
136-7	18213-18214	,	
136-8	18215-18219	data	
136-9	18220-18223	may	
136-10	18224-18227	not	
136-11	18228-18230	be	
136-12	18231-18238	cleared	
136-13	18239-18243	from	
136-14	18244-18248	temp	
136-15	18249-18255	tables	
136-16	18255-18256	,	
136-17	18257-18260	and	
136-18	18261-18265	some	
136-19	18266-18271	types	
136-20	18272-18274	of	
136-21	18275-18281	errors	
136-22	18282-18285	are	
136-23	18286-18289	not	
136-24	18290-18297	cleared	
136-25	18298-18303	until	
136-26	18304-18307	the	
136-27	18308-18315	backend	
136-28	18316-18318	is	
136-29	18319-18327	recycled	
136-30	18327-18328	.	

#Text=It’s important that the code that is establishing the connection be written with this in mind, it must perform initialization that would not be necessary if the backend were fresh and it should also test the connection to make sure it can actually be queried from.
137-1	18329-18331	It	
137-2	18331-18332	’	
137-3	18332-18333	s	
137-4	18334-18343	important	
137-5	18344-18348	that	
137-6	18349-18352	the	
137-7	18353-18357	code	
137-8	18358-18362	that	
137-9	18363-18365	is	
137-10	18366-18378	establishing	
137-11	18379-18382	the	
137-12	18383-18393	connection	
137-13	18394-18396	be	
137-14	18397-18404	written	
137-15	18405-18409	with	
137-16	18410-18414	this	
137-17	18415-18417	in	
137-18	18418-18422	mind	
137-19	18422-18423	,	
137-20	18424-18426	it	
137-21	18427-18431	must	
137-22	18432-18439	perform	
137-23	18440-18454	initialization	
137-24	18455-18459	that	
137-25	18460-18465	would	
137-26	18466-18469	not	
137-27	18470-18472	be	
137-28	18473-18482	necessary	
137-29	18483-18485	if	
137-30	18486-18489	the	
137-31	18490-18497	backend	
137-32	18498-18502	were	
137-33	18503-18508	fresh	
137-34	18509-18512	and	
137-35	18513-18515	it	
137-36	18516-18522	should	
137-37	18523-18527	also	
137-38	18528-18532	test	
137-39	18533-18536	the	
137-40	18537-18547	connection	
137-41	18548-18550	to	
137-42	18551-18555	make	
137-43	18556-18560	sure	
137-44	18561-18563	it	
137-45	18564-18567	can	
137-46	18568-18576	actually	
137-47	18577-18579	be	
137-48	18580-18587	queried	
137-49	18588-18592	from	
137-50	18592-18593	.	

#Text=Reply
#Text=Matthew E says:
#Text=26 Oct 20 at 3:23
#Text=right on, Nilesh and Dafoe.
138-1	18594-18599	Reply	
138-2	18600-18607	Matthew	
138-3	18608-18609	E	
138-4	18610-18614	says	
138-5	18614-18615	:	
138-6	18616-18618	26	
138-7	18619-18622	Oct	
138-8	18623-18625	20	
138-9	18626-18628	at	
138-10	18629-18630	3	
138-11	18630-18631	:	
138-12	18631-18633	23	
138-13	18634-18639	right	
138-14	18640-18642	on	
138-15	18642-18643	,	
138-16	18644-18650	Nilesh	
138-17	18651-18654	and	
138-18	18655-18660	Dafoe	
138-19	18660-18661	.	

#Text=Others:
#Text=#include
#Text=Reply
#Text=Emmanuel Casas says:
#Text=21 Jan 21 at 5:48
#Text=Im concern about the fact PGBENCH is based on http://www.tpc.org/tpcb/ which is obsolete, maybe im missing something here, any thoughts about this guys ?
139-1	18662-18668	Others	
139-2	18668-18669	:	
139-3	18670-18671	#	
139-4	18671-18678	include	
139-5	18679-18684	Reply	
139-6	18685-18693	Emmanuel	
139-7	18694-18699	Casas	
139-8	18700-18704	says	
139-9	18704-18705	:	
139-10	18706-18708	21	
139-11	18709-18712	Jan	
139-12	18713-18715	21	
139-13	18716-18718	at	
139-14	18719-18720	5	
139-15	18720-18721	:	
139-16	18721-18723	48	
139-17	18724-18726	Im	
139-18	18727-18734	concern	
139-19	18735-18740	about	
139-20	18741-18744	the	
139-21	18745-18749	fact	
139-22	18750-18757	PGBENCH	
139-23	18758-18760	is	
139-24	18761-18766	based	
139-25	18767-18769	on	
139-26	18770-18774	http	
139-27	18774-18775	:	
139-28	18775-18776	/	
139-29	18776-18777	/	
139-30	18777-18788	www.tpc.org	
139-31	18788-18789	/	
139-32	18789-18793	tpcb	
139-33	18793-18794	/	
139-34	18795-18800	which	
139-35	18801-18803	is	
139-36	18804-18812	obsolete	
139-37	18812-18813	,	
139-38	18814-18819	maybe	
139-39	18820-18822	im	
139-40	18823-18830	missing	
139-41	18831-18840	something	
139-42	18841-18845	here	
139-43	18845-18846	,	
139-44	18847-18850	any	
139-45	18851-18859	thoughts	
139-46	18860-18865	about	
139-47	18866-18870	this	
139-48	18871-18875	guys	
139-49	18876-18877	?	

#Text=Is there a better way to measure the TPS in postgresql ?
140-1	18878-18880	Is	
140-2	18881-18886	there	
140-3	18887-18888	a	
140-4	18889-18895	better	
140-5	18896-18899	way	
140-6	18900-18902	to	
140-7	18903-18910	measure	
140-8	18911-18914	the	
140-9	18915-18918	TPS	
140-10	18919-18921	in	
140-11	18922-18932	postgresql	
140-12	18933-18934	?	

#Text=Reply
#Text=Leave a Reply Cancel replyYour email address will not be published.
141-1	18935-18940	Reply	
141-2	18941-18946	Leave	
141-3	18947-18948	a	
141-4	18949-18954	Reply	
141-5	18955-18961	Cancel	
141-6	18962-18971	replyYour	
141-7	18972-18977	email	
141-8	18978-18985	address	
141-9	18986-18990	will	
141-10	18991-18994	not	
141-11	18995-18997	be	
141-12	18998-19007	published	
141-13	19007-19008	.	

#Text=Required fields are marked *Comment Name *
#Text=Email *
#Text=Website
#Text=Save my name, email, and website in this browser for the next time I comment.
142-1	19009-19017	Required	
142-2	19018-19024	fields	
142-3	19025-19028	are	
142-4	19029-19035	marked	
142-5	19036-19037	*	
142-6	19037-19044	Comment	
142-7	19045-19049	Name	
142-8	19050-19051	*	
142-9	19052-19057	Email	
142-10	19058-19059	*	
142-11	19060-19067	Website	
142-12	19068-19072	Save	
142-13	19073-19075	my	
142-14	19076-19080	name	
142-15	19080-19081	,	
142-16	19082-19087	email	
142-17	19087-19088	,	
142-18	19089-19092	and	
142-19	19093-19100	website	
142-20	19101-19103	in	
142-21	19104-19108	this	
142-22	19109-19116	browser	
142-23	19117-19120	for	
142-24	19121-19124	the	
142-25	19125-19129	next	
142-26	19130-19134	time	
142-27	19135-19136	I	
142-28	19137-19144	comment	
142-29	19144-19145	.	

#Text=This site uses Akismet to reduce spam.
143-1	19146-19150	This	
143-2	19151-19155	site	
143-3	19156-19160	uses	
143-4	19161-19168	Akismet	
143-5	19169-19171	to	
143-6	19172-19178	reduce	
143-7	19179-19183	spam	
143-8	19183-19184	.	

#Text=Learn how your comment data is processed.
#Text=© 2021 All Rights Reserved.
144-1	19185-19190	Learn	
144-2	19191-19194	how	
144-3	19195-19199	your	
144-4	19200-19207	comment	
144-5	19208-19212	data	
144-6	19213-19215	is	
144-7	19216-19225	processed	
144-8	19225-19226	.	
144-9	19227-19228	©	
144-10	19229-19233	2021	
144-11	19234-19237	All	
144-12	19238-19244	Rights	
144-13	19245-19253	Reserved	
144-14	19253-19254	.	

#Text=Proudly powered by Wordpress
#Text=Stack Overflow
#Text=Questions
#Text=Jobs
#Text=Developer Jobs Directory
#Text=Salary Calculator
#Text=Products
#Text=Teams
#Text=Talent
#Text=Advertising
#Text=Enterprise
#Text=Company
#Text=About
#Text=Press
#Text=Work Here
#Text=Legal
#Text=Privacy Policy
#Text=Contact Us
#Text=Channels
#Text=Podcast
#Text=Newsletter
#Text=Facebook
#Text=Twitter
#Text=LinkedIn
#Text=Instagram
145-1	19255-19262	Proudly	
145-2	19263-19270	powered	
145-3	19271-19273	by	
145-4	19274-19283	Wordpress	
145-5	19284-19289	Stack	
145-6	19290-19298	Overflow	
145-7	19299-19308	Questions	
145-8	19309-19313	Jobs	
145-9	19314-19323	Developer	
145-10	19324-19328	Jobs	
145-11	19329-19338	Directory	
145-12	19339-19345	Salary	
145-13	19346-19356	Calculator	
145-14	19357-19365	Products	
145-15	19366-19371	Teams	
145-16	19372-19378	Talent	
145-17	19379-19390	Advertising	
145-18	19391-19401	Enterprise	
145-19	19402-19409	Company	
145-20	19410-19415	About	
145-21	19416-19421	Press	
145-22	19422-19426	Work	
145-23	19427-19431	Here	
145-24	19432-19437	Legal	
145-25	19438-19445	Privacy	
145-26	19446-19452	Policy	
145-27	19453-19460	Contact	
145-28	19461-19463	Us	
145-29	19464-19472	Channels	
145-30	19473-19480	Podcast	
145-31	19481-19491	Newsletter	
145-32	19492-19500	Facebook	
145-33	19501-19508	Twitter	
145-34	19509-19517	LinkedIn	
145-35	19518-19527	Instagram	
