#FORMAT=WebAnno TSV 3.3
#T_SP=custom.Span|label
#T_RL=custom.Relation|label|BT_custom.Span


#Text=Tips for PostgreSQL Query Optimization: Improve Performance with EXPLAIN ANALYZE | EnterpriseDB Skip to main content Barrio main menu Why EDB? EDB Supercharges PostgreSQL
1-1	0-4	Tips	_	_	_	
1-2	5-8	for	_	_	_	
1-3	9-19	PostgreSQL	_	_	_	
1-4	20-25	Query	_	_	_	
1-5	26-38	Optimization	_	_	_	
1-6	38-39	:	_	_	_	
1-7	40-47	Improve	_	_	_	
1-8	48-59	Performance	_	_	_	
1-9	60-64	with	_	_	_	
1-10	65-72	EXPLAIN	_	_	_	
1-11	73-80	ANALYZE	_	_	_	
1-12	81-82	|	_	_	_	
1-13	83-95	EnterpriseDB	_	_	_	
1-14	96-100	Skip	_	_	_	
1-15	101-103	to	_	_	_	
1-16	104-108	main	_	_	_	
1-17	109-116	content	_	_	_	
1-18	117-123	Barrio	_	_	_	
1-19	124-128	main	_	_	_	
1-20	129-133	menu	_	_	_	
1-21	134-137	Why	_	_	_	
1-22	138-141	EDB	_	_	_	
1-23	141-142	?	_	_	_	
1-24	143-146	EDB	_	_	_	
1-25	147-159	Supercharges	_	_	_	
1-26	160-170	PostgreSQL	_	_	_	

#Text=wrapper Use Cases Oracle Migration Hybrid Cloud High Availability Solutions for IT Professionals Database Architects Developers Database Admins Products Products Overview wrapper Databases EDB Postgres Advanced Server
2-1	171-178	wrapper	_	_	_	
2-2	179-182	Use	_	_	_	
2-3	183-188	Cases	_	_	_	
2-4	189-195	Oracle	_	_	_	
2-5	196-205	Migration	_	_	_	
2-6	206-212	Hybrid	_	_	_	
2-7	213-218	Cloud	_	_	_	
2-8	219-223	High	_	_	_	
2-9	224-236	Availability	_	_	_	
2-10	237-246	Solutions	_	_	_	
2-11	247-250	for	_	_	_	
2-12	251-253	IT	_	_	_	
2-13	254-267	Professionals	_	_	_	
2-14	268-276	Database	_	_	_	
2-15	277-287	Architects	_	_	_	
2-16	288-298	Developers	_	_	_	
2-17	299-307	Database	_	_	_	
2-18	308-314	Admins	_	_	_	
2-19	315-323	Products	_	_	_	
2-20	324-332	Products	_	_	_	
2-21	333-341	Overview	_	_	_	
2-22	342-349	wrapper	_	_	_	
2-23	350-359	Databases	_	_	_	
2-24	360-363	EDB	_	_	_	
2-25	364-372	Postgres	_	_	_	
2-26	373-381	Advanced	_	_	_	
2-27	382-388	Server	_	_	_	

#Text=PostgreSQL wrapper Tools Postgres Enterprise Manager Backup and Recovery Failover Manager Open Source Projects Cloud Native PostgreSQL Migration Portal Migration Toolkit Replication Services Services Overview
3-1	389-399	PostgreSQL	_	_	_	
3-2	400-407	wrapper	_	_	_	
3-3	408-413	Tools	_	_	_	
3-4	414-422	Postgres	_	_	_	
3-5	423-433	Enterprise	_	_	_	
3-6	434-441	Manager	_	_	_	
3-7	442-448	Backup	_	_	_	
3-8	449-452	and	_	_	_	
3-9	453-461	Recovery	_	_	_	
3-10	462-470	Failover	_	_	_	
3-11	471-478	Manager	_	_	_	
3-12	479-483	Open	_	_	_	
3-13	484-490	Source	_	_	_	
3-14	491-499	Projects	_	_	_	
3-15	500-505	Cloud	_	_	_	
3-16	506-512	Native	_	_	_	
3-17	513-523	PostgreSQL	_	_	_	
3-18	524-533	Migration	_	_	_	
3-19	534-540	Portal	_	_	_	
3-20	541-550	Migration	_	_	_	
3-21	551-558	Toolkit	_	_	_	
3-22	559-570	Replication	_	_	_	
3-23	571-579	Services	_	_	_	
3-24	580-588	Services	_	_	_	
3-25	589-597	Overview	_	_	_	

#Text=Training Getting Started PostgreSQL Optimization Enterprise Strategy Custom Services Support Customer Support Portal Support Overview PostgreSQL Technical Support Remote DBA Service Cloud DBA Service Technical Account Management
4-1	598-606	Training	_	_	_	
4-2	607-614	Getting	_	_	_	
4-3	615-622	Started	_	_	_	
4-4	623-633	PostgreSQL	_	_	_	
4-5	634-646	Optimization	_	_	_	
4-6	647-657	Enterprise	_	_	_	
4-7	658-666	Strategy	_	_	_	
4-8	667-673	Custom	_	_	_	
4-9	674-682	Services	_	_	_	
4-10	683-690	Support	_	_	_	
4-11	691-699	Customer	_	_	_	
4-12	700-707	Support	_	_	_	
4-13	708-714	Portal	_	_	_	
4-14	715-722	Support	_	_	_	
4-15	723-731	Overview	_	_	_	
4-16	732-742	PostgreSQL	_	_	_	
4-17	743-752	Technical	_	_	_	
4-18	753-760	Support	_	_	_	
4-19	761-767	Remote	_	_	_	
4-20	768-771	DBA	_	_	_	
4-21	772-779	Service	_	_	_	
4-22	780-785	Cloud	_	_	_	
4-23	786-789	DBA	_	_	_	
4-24	790-797	Service	_	_	_	
4-25	798-807	Technical	_	_	_	
4-26	808-815	Account	_	_	_	
4-27	816-826	Management	_	_	_	

#Text=Resources Docs wrapper Blog Webinars PostgreSQL Tutorials Training Partners White Papers Customer Stories Product Compatibility Plans Barrio utility menu Contact Dashboard
5-1	827-836	Resources	_	_	_	
5-2	837-841	Docs	_	_	_	
5-3	842-849	wrapper	_	_	_	
5-4	850-854	Blog	_	_	_	
5-5	855-863	Webinars	_	_	_	
5-6	864-874	PostgreSQL	_	_	_	
5-7	875-884	Tutorials	_	_	_	
5-8	885-893	Training	_	_	_	
5-9	894-902	Partners	_	_	_	
5-10	903-908	White	_	_	_	
5-11	909-915	Papers	_	_	_	
5-12	916-924	Customer	_	_	_	
5-13	925-932	Stories	_	_	_	
5-14	933-940	Product	_	_	_	
5-15	941-954	Compatibility	_	_	_	
5-16	955-960	Plans	_	_	_	
5-17	961-967	Barrio	_	_	_	
5-18	968-975	utility	_	_	_	
5-19	976-980	menu	_	_	_	
5-20	981-988	Contact	_	_	_	
5-21	989-998	Dashboard	_	_	_	

#Text=Sign In Downloads Barrio Mobile Menu Why EDB? EDB Supercharges PostgreSQL Use Cases Oracle Migration Hybrid Cloud High Availability Solutions for IT Professionals Database Architects
6-1	999-1003	Sign	_	_	_	
6-2	1004-1006	In	_	_	_	
6-3	1007-1016	Downloads	_	_	_	
6-4	1017-1023	Barrio	_	_	_	
6-5	1024-1030	Mobile	_	_	_	
6-6	1031-1035	Menu	_	_	_	
6-7	1036-1039	Why	_	_	_	
6-8	1040-1043	EDB	_	_	_	
6-9	1043-1044	?	_	_	_	
6-10	1045-1048	EDB	_	_	_	
6-11	1049-1061	Supercharges	_	_	_	
6-12	1062-1072	PostgreSQL	_	_	_	
6-13	1073-1076	Use	_	_	_	
6-14	1077-1082	Cases	_	_	_	
6-15	1083-1089	Oracle	_	_	_	
6-16	1090-1099	Migration	_	_	_	
6-17	1100-1106	Hybrid	_	_	_	
6-18	1107-1112	Cloud	_	_	_	
6-19	1113-1117	High	_	_	_	
6-20	1118-1130	Availability	_	_	_	
6-21	1131-1140	Solutions	_	_	_	
6-22	1141-1144	for	_	_	_	
6-23	1145-1147	IT	_	_	_	
6-24	1148-1161	Professionals	_	_	_	
6-25	1162-1170	Database	_	_	_	
6-26	1171-1181	Architects	_	_	_	

#Text=Developers Database Admins Products Products Overview Databases EDB Postgres Advanced Server PostgreSQL Tools Postgres Enterprise Manager Backup and Recovery Failover Manager Open Source Projects
7-1	1182-1192	Developers	_	_	_	
7-2	1193-1201	Database	_	_	_	
7-3	1202-1208	Admins	_	_	_	
7-4	1209-1217	Products	_	_	_	
7-5	1218-1226	Products	_	_	_	
7-6	1227-1235	Overview	_	_	_	
7-7	1236-1245	Databases	_	_	_	
7-8	1246-1249	EDB	_	_	_	
7-9	1250-1258	Postgres	_	_	_	
7-10	1259-1267	Advanced	_	_	_	
7-11	1268-1274	Server	_	_	_	
7-12	1275-1285	PostgreSQL	_	_	_	
7-13	1286-1291	Tools	_	_	_	
7-14	1292-1300	Postgres	_	_	_	
7-15	1301-1311	Enterprise	_	_	_	
7-16	1312-1319	Manager	_	_	_	
7-17	1320-1326	Backup	_	_	_	
7-18	1327-1330	and	_	_	_	
7-19	1331-1339	Recovery	_	_	_	
7-20	1340-1348	Failover	_	_	_	
7-21	1349-1356	Manager	_	_	_	
7-22	1357-1361	Open	_	_	_	
7-23	1362-1368	Source	_	_	_	
7-24	1369-1377	Projects	_	_	_	

#Text=Cloud Native PostgreSQL Migration Portal Migration Toolkit Replication Services Services Overview Training Getting Started Postgres Optimization Enterprise Strategy Custom Services Support Support Overview PostgreSQL Technical Support
8-1	1378-1383	Cloud	_	_	_	
8-2	1384-1390	Native	_	_	_	
8-3	1391-1401	PostgreSQL	_	_	_	
8-4	1402-1411	Migration	_	_	_	
8-5	1412-1418	Portal	_	_	_	
8-6	1419-1428	Migration	_	_	_	
8-7	1429-1436	Toolkit	_	_	_	
8-8	1437-1448	Replication	_	_	_	
8-9	1449-1457	Services	_	_	_	
8-10	1458-1466	Services	_	_	_	
8-11	1467-1475	Overview	_	_	_	
8-12	1476-1484	Training	_	_	_	
8-13	1485-1492	Getting	_	_	_	
8-14	1493-1500	Started	_	_	_	
8-15	1501-1509	Postgres	_	_	_	
8-16	1510-1522	Optimization	_	_	_	
8-17	1523-1533	Enterprise	_	_	_	
8-18	1534-1542	Strategy	_	_	_	
8-19	1543-1549	Custom	_	_	_	
8-20	1550-1558	Services	_	_	_	
8-21	1559-1566	Support	_	_	_	
8-22	1567-1574	Support	_	_	_	
8-23	1575-1583	Overview	_	_	_	
8-24	1584-1594	PostgreSQL	_	_	_	
8-25	1595-1604	Technical	_	_	_	
8-26	1605-1612	Support	_	_	_	

#Text=Remote DBA Service Cloud DBA Service Technical Account Management Resources Docs Blog Webinars Postgres Tutorials Training Partners White Papers Customer Stories Product Compatibility Plans
9-1	1613-1619	Remote	_	_	_	
9-2	1620-1623	DBA	_	_	_	
9-3	1624-1631	Service	_	_	_	
9-4	1632-1637	Cloud	_	_	_	
9-5	1638-1641	DBA	_	_	_	
9-6	1642-1649	Service	_	_	_	
9-7	1650-1659	Technical	_	_	_	
9-8	1660-1667	Account	_	_	_	
9-9	1668-1678	Management	_	_	_	
9-10	1679-1688	Resources	_	_	_	
9-11	1689-1693	Docs	_	_	_	
9-12	1694-1698	Blog	_	_	_	
9-13	1699-1707	Webinars	_	_	_	
9-14	1708-1716	Postgres	_	_	_	
9-15	1717-1726	Tutorials	_	_	_	
9-16	1727-1735	Training	_	_	_	
9-17	1736-1744	Partners	_	_	_	
9-18	1745-1750	White	_	_	_	
9-19	1751-1757	Papers	_	_	_	
9-20	1758-1766	Customer	_	_	_	
9-21	1767-1774	Stories	_	_	_	
9-22	1775-1782	Product	_	_	_	
9-23	1783-1796	Compatibility	_	_	_	
9-24	1797-1802	Plans	_	_	_	

#Text=Downloads Contact Sign In Dashboard The EDB Blog Back How to Use EXPLAIN ANALYZE for Planning and Optimizing Query Performance in PostgreSQL PostgreSQL
10-1	1803-1812	Downloads	_	_	_	
10-2	1813-1820	Contact	_	_	_	
10-3	1821-1825	Sign	_	_	_	
10-4	1826-1828	In	_	_	_	
10-5	1829-1838	Dashboard	_	_	_	
10-6	1839-1842	The	_	_	_	
10-7	1843-1846	EDB	_	_	_	
10-8	1847-1851	Blog	_	_	_	
10-9	1852-1856	Back	_	_	_	
10-10	1857-1860	How	_	_	_	
10-11	1861-1863	to	_	_	_	
10-12	1864-1867	Use	_	_	_	
10-13	1868-1875	EXPLAIN	_	_	_	
10-14	1876-1883	ANALYZE	_	_	_	
10-15	1884-1887	for	_	_	_	
10-16	1888-1896	Planning	_	_	_	
10-17	1897-1900	and	_	_	_	
10-18	1901-1911	Optimizing	_	_	_	
10-19	1912-1917	Query	_	_	_	
10-20	1918-1929	Performance	_	_	_	
10-21	1930-1932	in	_	_	_	
10-22	1933-1943	PostgreSQL	_	_	_	
10-23	1944-1954	PostgreSQL	_	_	_	

#Text=With many people working from home these days because of the coronavirus pandemic, it can be a little challenging to get help from a colleague remotely. Sure, there’s Slack and all manner of collaboration tools, but it’s not quite the same as walking up to someone’s cubicle and getting a second pair of eyes to look at a problem, not to mention that our co-workers might be busy trying to juggle deadlines and unruly kids in the home. When it comes to dealing with poor database and query performance, it’s a daunting task to venture into the dark cavern of query planning and optimization, but fear not! EXPLAIN is our friend in those dark and lonely places. We recently received a request from one of our customers, concerned about a slow query on one of their JSON columns. They were seeing a slow performance in their development environments and were understandably worried about the impact that they’d see if they went to production with poor query performance. We got right to work to help them out, and our first stone to turn over was to have them send us their EXPLAIN ANALYZE output for the query, which yielded:
11-1	1955-1959	With	_	_	_	
11-2	1960-1964	many	_	_	_	
11-3	1965-1971	people	_	_	_	
11-4	1972-1979	working	_	_	_	
11-5	1980-1984	from	_	_	_	
11-6	1985-1989	home	_	_	_	
11-7	1990-1995	these	_	_	_	
11-8	1996-2000	days	_	_	_	
11-9	2001-2008	because	_	_	_	
11-10	2009-2011	of	_	_	_	
11-11	2012-2015	the	_	_	_	
11-12	2016-2027	coronavirus	_	_	_	
11-13	2028-2036	pandemic	_	_	_	
11-14	2036-2037	,	_	_	_	
11-15	2038-2040	it	_	_	_	
11-16	2041-2044	can	_	_	_	
11-17	2045-2047	be	_	_	_	
11-18	2048-2049	a	_	_	_	
11-19	2050-2056	little	_	_	_	
11-20	2057-2068	challenging	_	_	_	
11-21	2069-2071	to	_	_	_	
11-22	2072-2075	get	_	_	_	
11-23	2076-2080	help	_	_	_	
11-24	2081-2085	from	_	_	_	
11-25	2086-2087	a	_	_	_	
11-26	2088-2097	colleague	_	_	_	
11-27	2098-2106	remotely	_	_	_	
11-28	2106-2107	.	_	_	_	
11-29	2108-2112	Sure	_	_	_	
11-30	2112-2113	,	_	_	_	
11-31	2114-2119	there	_	_	_	
11-32	2119-2120	’	_	_	_	
11-33	2120-2121	s	_	_	_	
11-34	2122-2127	Slack	_	_	_	
11-35	2128-2131	and	_	_	_	
11-36	2132-2135	all	_	_	_	
11-37	2136-2142	manner	_	_	_	
11-38	2143-2145	of	_	_	_	
11-39	2146-2159	collaboration	_	_	_	
11-40	2160-2165	tools	_	_	_	
11-41	2165-2166	,	_	_	_	
11-42	2167-2170	but	_	_	_	
11-43	2171-2173	it	_	_	_	
11-44	2173-2174	’	_	_	_	
11-45	2174-2175	s	_	_	_	
11-46	2176-2179	not	_	_	_	
11-47	2180-2185	quite	_	_	_	
11-48	2186-2189	the	_	_	_	
11-49	2190-2194	same	_	_	_	
11-50	2195-2197	as	_	_	_	
11-51	2198-2205	walking	_	_	_	
11-52	2206-2208	up	_	_	_	
11-53	2209-2211	to	_	_	_	
11-54	2212-2219	someone	_	_	_	
11-55	2219-2220	’	_	_	_	
11-56	2220-2221	s	_	_	_	
11-57	2222-2229	cubicle	_	_	_	
11-58	2230-2233	and	_	_	_	
11-59	2234-2241	getting	_	_	_	
11-60	2242-2243	a	_	_	_	
11-61	2244-2250	second	_	_	_	
11-62	2251-2255	pair	_	_	_	
11-63	2256-2258	of	_	_	_	
11-64	2259-2263	eyes	_	_	_	
11-65	2264-2266	to	_	_	_	
11-66	2267-2271	look	_	_	_	
11-67	2272-2274	at	_	_	_	
11-68	2275-2276	a	_	_	_	
11-69	2277-2284	problem	_	_	_	
11-70	2284-2285	,	_	_	_	
11-71	2286-2289	not	_	_	_	
11-72	2290-2292	to	_	_	_	
11-73	2293-2300	mention	_	_	_	
11-74	2301-2305	that	_	_	_	
11-75	2306-2309	our	_	_	_	
11-76	2310-2320	co-workers	_	_	_	
11-77	2321-2326	might	_	_	_	
11-78	2327-2329	be	_	_	_	
11-79	2330-2334	busy	_	_	_	
11-80	2335-2341	trying	_	_	_	
11-81	2342-2344	to	_	_	_	
11-82	2345-2351	juggle	_	_	_	
11-83	2352-2361	deadlines	_	_	_	
11-84	2362-2365	and	_	_	_	
11-85	2366-2372	unruly	_	_	_	
11-86	2373-2377	kids	_	_	_	
11-87	2378-2380	in	_	_	_	
11-88	2381-2384	the	_	_	_	
11-89	2385-2389	home	_	_	_	
11-90	2389-2390	.	_	_	_	
11-91	2391-2395	When	_	_	_	
11-92	2396-2398	it	_	_	_	
11-93	2399-2404	comes	_	_	_	
11-94	2405-2407	to	_	_	_	
11-95	2408-2415	dealing	_	_	_	
11-96	2416-2420	with	_	_	_	
11-97	2421-2425	poor	_	_	_	
11-98	2426-2434	database	_	_	_	
11-99	2435-2438	and	_	_	_	
11-100	2439-2444	query	_	_	_	
11-101	2445-2456	performance	_	_	_	
11-102	2456-2457	,	_	_	_	
11-103	2458-2460	it	_	_	_	
11-104	2460-2461	’	_	_	_	
11-105	2461-2462	s	_	_	_	
11-106	2463-2464	a	_	_	_	
11-107	2465-2473	daunting	_	_	_	
11-108	2474-2478	task	_	_	_	
11-109	2479-2481	to	_	_	_	
11-110	2482-2489	venture	_	_	_	
11-111	2490-2494	into	_	_	_	
11-112	2495-2498	the	_	_	_	
11-113	2499-2503	dark	_	_	_	
11-114	2504-2510	cavern	_	_	_	
11-115	2511-2513	of	_	_	_	
11-116	2514-2519	query	_	_	_	
11-117	2520-2528	planning	_	_	_	
11-118	2529-2532	and	_	_	_	
11-119	2533-2545	optimization	_	_	_	
11-120	2545-2546	,	_	_	_	
11-121	2547-2550	but	_	_	_	
11-122	2551-2555	fear	_	_	_	
11-123	2556-2559	not	_	_	_	
11-124	2559-2560	!	_	_	_	
11-125	2561-2568	EXPLAIN	_	_	_	
11-126	2569-2571	is	_	_	_	
11-127	2572-2575	our	_	_	_	
11-128	2576-2582	friend	_	_	_	
11-129	2583-2585	in	_	_	_	
11-130	2586-2591	those	_	_	_	
11-131	2592-2596	dark	_	_	_	
11-132	2597-2600	and	_	_	_	
11-133	2601-2607	lonely	_	_	_	
11-134	2608-2614	places	_	_	_	
11-135	2614-2615	.	_	_	_	
11-136	2616-2618	We	_	_	_	
11-137	2619-2627	recently	_	_	_	
11-138	2628-2636	received	_	_	_	
11-139	2637-2638	a	_	_	_	
11-140	2639-2646	request	_	_	_	
11-141	2647-2651	from	_	_	_	
11-142	2652-2655	one	_	_	_	
11-143	2656-2658	of	_	_	_	
11-144	2659-2662	our	_	_	_	
11-145	2663-2672	customers	_	_	_	
11-146	2672-2673	,	_	_	_	
11-147	2674-2683	concerned	_	_	_	
11-148	2684-2689	about	_	_	_	
11-149	2690-2691	a	_	_	_	
11-150	2692-2696	slow	_	_	_	
11-151	2697-2702	query	_	_	_	
11-152	2703-2705	on	_	_	_	
11-153	2706-2709	one	_	_	_	
11-154	2710-2712	of	_	_	_	
11-155	2713-2718	their	_	_	_	
11-156	2719-2723	JSON	_	_	_	
11-157	2724-2731	columns	_	_	_	
11-158	2731-2732	.	_	_	_	
11-159	2733-2737	They	_	_	_	
11-160	2738-2742	were	_	_	_	
11-161	2743-2749	seeing	_	_	_	
11-162	2750-2751	a	_	_	_	
11-163	2752-2756	slow	_	_	_	
11-164	2757-2768	performance	_	_	_	
11-165	2769-2771	in	_	_	_	
11-166	2772-2777	their	_	_	_	
11-167	2778-2789	development	_	_	_	
11-168	2790-2802	environments	_	_	_	
11-169	2803-2806	and	_	_	_	
11-170	2807-2811	were	_	_	_	
11-171	2812-2826	understandably	_	_	_	
11-172	2827-2834	worried	_	_	_	
11-173	2835-2840	about	_	_	_	
11-174	2841-2844	the	_	_	_	
11-175	2845-2851	impact	_	_	_	
11-176	2852-2856	that	_	_	_	
11-177	2857-2861	they	_	_	_	
11-178	2861-2862	’	_	_	_	
11-179	2862-2863	d	_	_	_	
11-180	2864-2867	see	_	_	_	
11-181	2868-2870	if	_	_	_	
11-182	2871-2875	they	_	_	_	
11-183	2876-2880	went	_	_	_	
11-184	2881-2883	to	_	_	_	
11-185	2884-2894	production	_	_	_	
11-186	2895-2899	with	_	_	_	
11-187	2900-2904	poor	_	_	_	
11-188	2905-2910	query	_	_	_	
11-189	2911-2922	performance	_	_	_	
11-190	2922-2923	.	_	_	_	
11-191	2924-2926	We	_	_	_	
11-192	2927-2930	got	_	_	_	
11-193	2931-2936	right	_	_	_	
11-194	2937-2939	to	_	_	_	
11-195	2940-2944	work	_	_	_	
11-196	2945-2947	to	_	_	_	
11-197	2948-2952	help	_	_	_	
11-198	2953-2957	them	_	_	_	
11-199	2958-2961	out	_	_	_	
11-200	2961-2962	,	_	_	_	
11-201	2963-2966	and	_	_	_	
11-202	2967-2970	our	_	_	_	
11-203	2971-2976	first	_	_	_	
11-204	2977-2982	stone	_	_	_	
11-205	2983-2985	to	_	_	_	
11-206	2986-2990	turn	_	_	_	
11-207	2991-2995	over	_	_	_	
11-208	2996-2999	was	_	_	_	
11-209	3000-3002	to	_	_	_	
11-210	3003-3007	have	_	_	_	
11-211	3008-3012	them	_	_	_	
11-212	3013-3017	send	_	_	_	
11-213	3018-3020	us	_	_	_	
11-214	3021-3026	their	_	_	_	
11-215	3027-3034	EXPLAIN	_	_	_	
11-216	3035-3042	ANALYZE	_	_	_	
11-217	3043-3049	output	_	_	_	
11-218	3050-3053	for	_	_	_	
11-219	3054-3057	the	_	_	_	
11-220	3058-3063	query	_	_	_	
11-221	3063-3064	,	_	_	_	
11-222	3065-3070	which	_	_	_	
11-223	3071-3078	yielded	_	_	_	
11-224	3078-3079	:	_	_	_	

#Text=postgres=# explain SELECT * FROM org where 'aa'::text IN (SELECT jsonb_array_elements(info -> 'dept') ->> 'name'); QUERY PLAN -------------------------------------------------------------------------
12-1	3080-3088	postgres	_	_	_	
12-2	3088-3089	=	_	_	_	
12-3	3089-3090	#	_	_	_	
12-4	3091-3098	explain	_	_	_	
12-5	3099-3105	SELECT	_	_	_	
12-6	3106-3107	*	_	_	_	
12-7	3108-3112	FROM	_	_	_	
12-8	3113-3116	org	_	_	_	
12-9	3117-3122	where	_	_	_	
12-10	3123-3124	'	_	_	_	
12-11	3124-3126	aa	_	_	_	
12-12	3126-3127	'	_	_	_	
12-13	3127-3128	:	_	_	_	
12-14	3128-3129	:	_	_	_	
12-15	3129-3133	text	_	_	_	
12-16	3134-3136	IN	_	_	_	
12-17	3137-3138	(	_	_	_	
12-18	3138-3144	SELECT	_	_	_	
12-19	3145-3165	jsonb_array_elements	_	_	_	
12-20	3165-3166	(	_	_	_	
12-21	3166-3170	info	_	_	_	
12-22	3171-3172	-	_	_	_	
12-23	3172-3173	>	_	_	_	
12-24	3174-3175	'	_	_	_	
12-25	3175-3179	dept	_	_	_	
12-26	3179-3180	'	_	_	_	
12-27	3180-3181	)	_	_	_	
12-28	3182-3183	-	_	_	_	
12-29	3183-3184	>	_	_	_	
12-30	3184-3185	>	_	_	_	
12-31	3186-3187	'	_	_	_	
12-32	3187-3191	name	_	_	_	
12-33	3191-3192	'	_	_	_	
12-34	3192-3193	)	_	_	_	
12-35	3193-3194	;	_	_	_	
12-36	3195-3200	QUERY	_	_	_	
12-37	3201-3205	PLAN	_	_	_	
12-38	3206-3207	-	_	_	_	
12-39	3207-3208	-	_	_	_	
12-40	3208-3209	-	_	_	_	
12-41	3209-3210	-	_	_	_	
12-42	3210-3211	-	_	_	_	
12-43	3211-3212	-	_	_	_	
12-44	3212-3213	-	_	_	_	
12-45	3213-3214	-	_	_	_	
12-46	3214-3215	-	_	_	_	
12-47	3215-3216	-	_	_	_	
12-48	3216-3217	-	_	_	_	
12-49	3217-3218	-	_	_	_	
12-50	3218-3219	-	_	_	_	
12-51	3219-3220	-	_	_	_	
12-52	3220-3221	-	_	_	_	
12-53	3221-3222	-	_	_	_	
12-54	3222-3223	-	_	_	_	
12-55	3223-3224	-	_	_	_	
12-56	3224-3225	-	_	_	_	
12-57	3225-3226	-	_	_	_	
12-58	3226-3227	-	_	_	_	
12-59	3227-3228	-	_	_	_	
12-60	3228-3229	-	_	_	_	
12-61	3229-3230	-	_	_	_	
12-62	3230-3231	-	_	_	_	
12-63	3231-3232	-	_	_	_	
12-64	3232-3233	-	_	_	_	
12-65	3233-3234	-	_	_	_	
12-66	3234-3235	-	_	_	_	
12-67	3235-3236	-	_	_	_	
12-68	3236-3237	-	_	_	_	
12-69	3237-3238	-	_	_	_	
12-70	3238-3239	-	_	_	_	
12-71	3239-3240	-	_	_	_	
12-72	3240-3241	-	_	_	_	
12-73	3241-3242	-	_	_	_	
12-74	3242-3243	-	_	_	_	
12-75	3243-3244	-	_	_	_	
12-76	3244-3245	-	_	_	_	
12-77	3245-3246	-	_	_	_	
12-78	3246-3247	-	_	_	_	
12-79	3247-3248	-	_	_	_	
12-80	3248-3249	-	_	_	_	
12-81	3249-3250	-	_	_	_	
12-82	3250-3251	-	_	_	_	
12-83	3251-3252	-	_	_	_	
12-84	3252-3253	-	_	_	_	
12-85	3253-3254	-	_	_	_	
12-86	3254-3255	-	_	_	_	
12-87	3255-3256	-	_	_	_	
12-88	3256-3257	-	_	_	_	
12-89	3257-3258	-	_	_	_	
12-90	3258-3259	-	_	_	_	
12-91	3259-3260	-	_	_	_	
12-92	3260-3261	-	_	_	_	
12-93	3261-3262	-	_	_	_	
12-94	3262-3263	-	_	_	_	
12-95	3263-3264	-	_	_	_	
12-96	3264-3265	-	_	_	_	
12-97	3265-3266	-	_	_	_	
12-98	3266-3267	-	_	_	_	
12-99	3267-3268	-	_	_	_	
12-100	3268-3269	-	_	_	_	
12-101	3269-3270	-	_	_	_	
12-102	3270-3271	-	_	_	_	
12-103	3271-3272	-	_	_	_	
12-104	3272-3273	-	_	_	_	
12-105	3273-3274	-	_	_	_	
12-106	3274-3275	-	_	_	_	
12-107	3275-3276	-	_	_	_	
12-108	3276-3277	-	_	_	_	
12-109	3277-3278	-	_	_	_	
12-110	3278-3279	-	_	_	_	

#Text=Seq Scan on org (cost=0.00..719572.55 rows=249996 width=1169) Filter: (SubPlan 1) SubPlan 1 Result (cost=0.00..2.27 rows=100 width=32)
13-1	3280-3283	Seq	_	_	_	
13-2	3284-3288	Scan	_	_	_	
13-3	3289-3291	on	_	_	_	
13-4	3292-3295	org	_	_	_	
13-5	3296-3297	(	_	_	_	
13-6	3297-3301	cost	_	_	_	
13-7	3301-3302	=	_	_	_	
13-8	3302-3306	0.00	_	_	_	
13-9	3306-3307	.	_	_	_	
13-10	3307-3317	.719572.55	_	_	_	
13-11	3318-3322	rows	_	_	_	
13-12	3322-3323	=	_	_	_	
13-13	3323-3329	249996	_	_	_	
13-14	3330-3335	width	_	_	_	
13-15	3335-3336	=	_	_	_	
13-16	3336-3340	1169	_	_	_	
13-17	3340-3341	)	_	_	_	
13-18	3342-3348	Filter	_	_	_	
13-19	3348-3349	:	_	_	_	
13-20	3350-3351	(	_	_	_	
13-21	3351-3358	SubPlan	_	_	_	
13-22	3359-3360	1	_	_	_	
13-23	3360-3361	)	_	_	_	
13-24	3362-3369	SubPlan	_	_	_	
13-25	3370-3371	1	_	_	_	
13-26	3372-3378	Result	_	_	_	
13-27	3379-3380	(	_	_	_	
13-28	3380-3384	cost	_	_	_	
13-29	3384-3385	=	_	_	_	
13-30	3385-3389	0.00	_	_	_	
13-31	3389-3390	.	_	_	_	
13-32	3390-3395	.2.27	_	_	_	
13-33	3396-3400	rows	_	_	_	
13-34	3400-3401	=	_	_	_	
13-35	3401-3404	100	_	_	_	
13-36	3405-3410	width	_	_	_	
13-37	3410-3411	=	_	_	_	
13-38	3411-3413	32	_	_	_	
13-39	3413-3414	)	_	_	_	

#Text=ProjectSet (cost=0.00..0.52 rows=100 width=32) Result (cost=0.00..0.01 rows=1 width=0)
14-1	3415-3425	ProjectSet	_	_	_	
14-2	3426-3427	(	_	_	_	
14-3	3427-3431	cost	_	_	_	
14-4	3431-3432	=	_	_	_	
14-5	3432-3436	0.00	_	_	_	
14-6	3436-3437	.	_	_	_	
14-7	3437-3442	.0.52	_	_	_	
14-8	3443-3447	rows	_	_	_	
14-9	3447-3448	=	_	_	_	
14-10	3448-3451	100	_	_	_	
14-11	3452-3457	width	_	_	_	
14-12	3457-3458	=	_	_	_	
14-13	3458-3460	32	_	_	_	
14-14	3460-3461	)	_	_	_	
14-15	3462-3468	Result	_	_	_	
14-16	3469-3470	(	_	_	_	
14-17	3470-3474	cost	_	_	_	
14-18	3474-3475	=	_	_	_	
14-19	3475-3479	0.00	_	_	_	
14-20	3479-3480	.	_	_	_	
14-21	3480-3485	.0.01	_	_	_	
14-22	3486-3490	rows	_	_	_	
14-23	3490-3491	=	_	_	_	
14-24	3491-3492	1	_	_	_	
14-25	3493-3498	width	_	_	_	
14-26	3498-3499	=	_	_	_	
14-27	3499-3500	0	_	_	_	
14-28	3500-3501	)	_	_	_	

#Text=They knew they had created an index, and were curious as to why the index was not being used. Our next data point to gather was information about the index itself, and it turned out that they had created their index like so:
15-1	3502-3506	They	_	_	_	
15-2	3507-3511	knew	_	_	_	
15-3	3512-3516	they	_	_	_	
15-4	3517-3520	had	_	_	_	
15-5	3521-3528	created	_	_	_	
15-6	3529-3531	an	_	_	_	
15-7	3532-3537	index	_	_	_	
15-8	3537-3538	,	_	_	_	
15-9	3539-3542	and	_	_	_	
15-10	3543-3547	were	_	_	_	
15-11	3548-3555	curious	_	_	_	
15-12	3556-3558	as	_	_	_	
15-13	3559-3561	to	_	_	_	
15-14	3562-3565	why	_	_	_	
15-15	3566-3569	the	_	_	_	
15-16	3570-3575	index	_	_	_	
15-17	3576-3579	was	_	_	_	
15-18	3580-3583	not	_	_	_	
15-19	3584-3589	being	_	_	_	
15-20	3590-3594	used	_	_	_	
15-21	3594-3595	.	_	_	_	
15-22	3595-3596	 	_	_	_	
15-23	3596-3599	Our	_	_	_	
15-24	3600-3604	next	_	_	_	
15-25	3605-3609	data	_	_	_	
15-26	3610-3615	point	_	_	_	
15-27	3616-3618	to	_	_	_	
15-28	3619-3625	gather	_	_	_	
15-29	3626-3629	was	_	_	_	
15-30	3630-3641	information	_	_	_	
15-31	3642-3647	about	_	_	_	
15-32	3648-3651	the	_	_	_	
15-33	3652-3657	index	_	_	_	
15-34	3658-3664	itself	_	_	_	
15-35	3664-3665	,	_	_	_	
15-36	3666-3669	and	_	_	_	
15-37	3670-3672	it	_	_	_	
15-38	3673-3679	turned	_	_	_	
15-39	3680-3683	out	_	_	_	
15-40	3684-3688	that	_	_	_	
15-41	3689-3693	they	_	_	_	
15-42	3694-3697	had	_	_	_	
15-43	3698-3705	created	_	_	_	
15-44	3706-3711	their	_	_	_	
15-45	3712-3717	index	_	_	_	
15-46	3718-3722	like	_	_	_	
15-47	3723-3725	so	_	_	_	
15-48	3725-3726	:	_	_	_	

#Text=CREATE INDEX idx_org_dept ON org ((info -> 'dept'::text) ->> 'name'::text));Notice anything? Their query was wrapping info -> 'dept' in a function called jsonb_array_elements(), which led the query planner to think that it shouldn’t use the index. The fix was simple, and we were able to get the customer back on their way after a rather quick adjustment to their query. Once the customer changed their query to the following, the Index started getting scanned: postgres=# SELECT * FROM org where 'aa'::text IN (info -> 'dept' ->> 'name'); postgres=# explain SELECT * FROM organization where 'aa'::text IN (info -> 'dept' ->> 'name');
16-1	3727-3733	CREATE	_	_	_	
16-2	3734-3739	INDEX	_	_	_	
16-3	3740-3752	idx_org_dept	_	_	_	
16-4	3753-3755	ON	_	_	_	
16-5	3756-3759	org	_	_	_	
16-6	3760-3761	(	_	_	_	
16-7	3761-3762	(	_	_	_	
16-8	3762-3766	info	_	_	_	
16-9	3767-3768	-	_	_	_	
16-10	3768-3769	>	_	_	_	
16-11	3770-3771	'	_	_	_	
16-12	3771-3775	dept	_	_	_	
16-13	3775-3776	'	_	_	_	
16-14	3776-3777	:	_	_	_	
16-15	3777-3778	:	_	_	_	
16-16	3778-3782	text	_	_	_	
16-17	3782-3783	)	_	_	_	
16-18	3784-3785	-	_	_	_	
16-19	3785-3786	>	_	_	_	
16-20	3786-3787	>	_	_	_	
16-21	3788-3789	'	_	_	_	
16-22	3789-3793	name	_	_	_	
16-23	3793-3794	'	_	_	_	
16-24	3794-3795	:	_	_	_	
16-25	3795-3796	:	_	_	_	
16-26	3796-3800	text	_	_	_	
16-27	3800-3801	)	_	_	_	
16-28	3801-3802	)	_	_	_	
16-29	3802-3803	;	_	_	_	
16-30	3803-3809	Notice	_	_	_	
16-31	3810-3818	anything	_	_	_	
16-32	3818-3819	?	_	_	_	
16-33	3820-3825	Their	_	_	_	
16-34	3826-3831	query	_	_	_	
16-35	3832-3835	was	_	_	_	
16-36	3836-3844	wrapping	_	_	_	
16-37	3845-3849	info	_	_	_	
16-38	3850-3851	-	_	_	_	
16-39	3851-3852	>	_	_	_	
16-40	3853-3854	'	_	_	_	
16-41	3854-3858	dept	_	_	_	
16-42	3858-3859	'	_	_	_	
16-43	3860-3862	in	_	_	_	
16-44	3863-3864	a	_	_	_	
16-45	3865-3873	function	_	_	_	
16-46	3874-3880	called	_	_	_	
16-47	3881-3901	jsonb_array_elements	_	_	_	
16-48	3901-3902	(	_	_	_	
16-49	3902-3903	)	_	_	_	
16-50	3903-3904	,	_	_	_	
16-51	3905-3910	which	_	_	_	
16-52	3911-3914	led	_	_	_	
16-53	3915-3918	the	_	_	_	
16-54	3919-3924	query	_	_	_	
16-55	3925-3932	planner	_	_	_	
16-56	3933-3935	to	_	_	_	
16-57	3936-3941	think	_	_	_	
16-58	3942-3946	that	_	_	_	
16-59	3947-3949	it	_	_	_	
16-60	3950-3957	shouldn	_	_	_	
16-61	3957-3958	’	_	_	_	
16-62	3958-3959	t	_	_	_	
16-63	3960-3963	use	_	_	_	
16-64	3964-3967	the	_	_	_	
16-65	3968-3973	index	_	_	_	
16-66	3973-3974	.	_	_	_	
16-67	3975-3978	The	_	_	_	
16-68	3979-3982	fix	_	_	_	
16-69	3983-3986	was	_	_	_	
16-70	3987-3993	simple	_	_	_	
16-71	3993-3994	,	_	_	_	
16-72	3995-3998	and	_	_	_	
16-73	3999-4001	we	_	_	_	
16-74	4002-4006	were	_	_	_	
16-75	4007-4011	able	_	_	_	
16-76	4012-4014	to	_	_	_	
16-77	4015-4018	get	_	_	_	
16-78	4019-4022	the	_	_	_	
16-79	4023-4031	customer	_	_	_	
16-80	4032-4036	back	_	_	_	
16-81	4037-4039	on	_	_	_	
16-82	4040-4045	their	_	_	_	
16-83	4046-4049	way	_	_	_	
16-84	4050-4055	after	_	_	_	
16-85	4056-4057	a	_	_	_	
16-86	4058-4064	rather	_	_	_	
16-87	4065-4070	quick	_	_	_	
16-88	4071-4081	adjustment	_	_	_	
16-89	4082-4084	to	_	_	_	
16-90	4085-4090	their	_	_	_	
16-91	4091-4096	query	_	_	_	
16-92	4096-4097	.	_	_	_	
16-93	4098-4102	Once	_	_	_	
16-94	4103-4106	the	_	_	_	
16-95	4107-4115	customer	_	_	_	
16-96	4116-4123	changed	_	_	_	
16-97	4124-4129	their	_	_	_	
16-98	4130-4135	query	_	_	_	
16-99	4136-4138	to	_	_	_	
16-100	4139-4142	the	_	_	_	
16-101	4143-4152	following	_	_	_	
16-102	4152-4153	,	_	_	_	
16-103	4154-4157	the	_	_	_	
16-104	4158-4163	Index	_	_	_	
16-105	4164-4171	started	_	_	_	
16-106	4172-4179	getting	_	_	_	
16-107	4180-4187	scanned	_	_	_	
16-108	4187-4188	:	_	_	_	
16-109	4189-4197	postgres	_	_	_	
16-110	4197-4198	=	_	_	_	
16-111	4198-4199	#	_	_	_	
16-112	4200-4206	SELECT	_	_	_	
16-113	4207-4208	*	_	_	_	
16-114	4209-4213	FROM	_	_	_	
16-115	4214-4217	org	_	_	_	
16-116	4218-4223	where	_	_	_	
16-117	4224-4225	'	_	_	_	
16-118	4225-4227	aa	_	_	_	
16-119	4227-4228	'	_	_	_	
16-120	4228-4229	:	_	_	_	
16-121	4229-4230	:	_	_	_	
16-122	4230-4234	text	_	_	_	
16-123	4235-4237	IN	_	_	_	
16-124	4238-4239	(	_	_	_	
16-125	4239-4243	info	_	_	_	
16-126	4244-4245	-	_	_	_	
16-127	4245-4246	>	_	_	_	
16-128	4247-4248	'	_	_	_	
16-129	4248-4252	dept	_	_	_	
16-130	4252-4253	'	_	_	_	
16-131	4254-4255	-	_	_	_	
16-132	4255-4256	>	_	_	_	
16-133	4256-4257	>	_	_	_	
16-134	4258-4259	'	_	_	_	
16-135	4259-4263	name	_	_	_	
16-136	4263-4264	'	_	_	_	
16-137	4264-4265	)	_	_	_	
16-138	4265-4266	;	_	_	_	
16-139	4267-4275	postgres	_	_	_	
16-140	4275-4276	=	_	_	_	
16-141	4276-4277	#	_	_	_	
16-142	4278-4285	explain	_	_	_	
16-143	4286-4292	SELECT	_	_	_	
16-144	4293-4294	*	_	_	_	
16-145	4295-4299	FROM	_	_	_	
16-146	4300-4312	organization	_	_	_	
16-147	4313-4318	where	_	_	_	
16-148	4319-4320	'	_	_	_	
16-149	4320-4322	aa	_	_	_	
16-150	4322-4323	'	_	_	_	
16-151	4323-4324	:	_	_	_	
16-152	4324-4325	:	_	_	_	
16-153	4325-4329	text	_	_	_	
16-154	4330-4332	IN	_	_	_	
16-155	4333-4334	(	_	_	_	
16-156	4334-4338	info	_	_	_	
16-157	4339-4340	-	_	_	_	
16-158	4340-4341	>	_	_	_	
16-159	4342-4343	'	_	_	_	
16-160	4343-4347	dept	_	_	_	
16-161	4347-4348	'	_	_	_	
16-162	4349-4350	-	_	_	_	
16-163	4350-4351	>	_	_	_	
16-164	4351-4352	>	_	_	_	
16-165	4353-4354	'	_	_	_	
16-166	4354-4358	name	_	_	_	
16-167	4358-4359	'	_	_	_	
16-168	4359-4360	)	_	_	_	
16-169	4360-4361	;	_	_	_	

#Text=QUERY PLAN ----------------------------------------------------------------------------------------------
17-1	4362-4367	QUERY	_	_	_	
17-2	4368-4372	PLAN	_	_	_	
17-3	4373-4374	-	_	_	_	
17-4	4374-4375	-	_	_	_	
17-5	4375-4376	-	_	_	_	
17-6	4376-4377	-	_	_	_	
17-7	4377-4378	-	_	_	_	
17-8	4378-4379	-	_	_	_	
17-9	4379-4380	-	_	_	_	
17-10	4380-4381	-	_	_	_	
17-11	4381-4382	-	_	_	_	
17-12	4382-4383	-	_	_	_	
17-13	4383-4384	-	_	_	_	
17-14	4384-4385	-	_	_	_	
17-15	4385-4386	-	_	_	_	
17-16	4386-4387	-	_	_	_	
17-17	4387-4388	-	_	_	_	
17-18	4388-4389	-	_	_	_	
17-19	4389-4390	-	_	_	_	
17-20	4390-4391	-	_	_	_	
17-21	4391-4392	-	_	_	_	
17-22	4392-4393	-	_	_	_	
17-23	4393-4394	-	_	_	_	
17-24	4394-4395	-	_	_	_	
17-25	4395-4396	-	_	_	_	
17-26	4396-4397	-	_	_	_	
17-27	4397-4398	-	_	_	_	
17-28	4398-4399	-	_	_	_	
17-29	4399-4400	-	_	_	_	
17-30	4400-4401	-	_	_	_	
17-31	4401-4402	-	_	_	_	
17-32	4402-4403	-	_	_	_	
17-33	4403-4404	-	_	_	_	
17-34	4404-4405	-	_	_	_	
17-35	4405-4406	-	_	_	_	
17-36	4406-4407	-	_	_	_	
17-37	4407-4408	-	_	_	_	
17-38	4408-4409	-	_	_	_	
17-39	4409-4410	-	_	_	_	
17-40	4410-4411	-	_	_	_	
17-41	4411-4412	-	_	_	_	
17-42	4412-4413	-	_	_	_	
17-43	4413-4414	-	_	_	_	
17-44	4414-4415	-	_	_	_	
17-45	4415-4416	-	_	_	_	
17-46	4416-4417	-	_	_	_	
17-47	4417-4418	-	_	_	_	
17-48	4418-4419	-	_	_	_	
17-49	4419-4420	-	_	_	_	
17-50	4420-4421	-	_	_	_	
17-51	4421-4422	-	_	_	_	
17-52	4422-4423	-	_	_	_	
17-53	4423-4424	-	_	_	_	
17-54	4424-4425	-	_	_	_	
17-55	4425-4426	-	_	_	_	
17-56	4426-4427	-	_	_	_	
17-57	4427-4428	-	_	_	_	
17-58	4428-4429	-	_	_	_	
17-59	4429-4430	-	_	_	_	
17-60	4430-4431	-	_	_	_	
17-61	4431-4432	-	_	_	_	
17-62	4432-4433	-	_	_	_	
17-63	4433-4434	-	_	_	_	
17-64	4434-4435	-	_	_	_	
17-65	4435-4436	-	_	_	_	
17-66	4436-4437	-	_	_	_	
17-67	4437-4438	-	_	_	_	
17-68	4438-4439	-	_	_	_	
17-69	4439-4440	-	_	_	_	
17-70	4440-4441	-	_	_	_	
17-71	4441-4442	-	_	_	_	
17-72	4442-4443	-	_	_	_	
17-73	4443-4444	-	_	_	_	
17-74	4444-4445	-	_	_	_	
17-75	4445-4446	-	_	_	_	
17-76	4446-4447	-	_	_	_	
17-77	4447-4448	-	_	_	_	
17-78	4448-4449	-	_	_	_	
17-79	4449-4450	-	_	_	_	
17-80	4450-4451	-	_	_	_	
17-81	4451-4452	-	_	_	_	
17-82	4452-4453	-	_	_	_	
17-83	4453-4454	-	_	_	_	
17-84	4454-4455	-	_	_	_	
17-85	4455-4456	-	_	_	_	
17-86	4456-4457	-	_	_	_	
17-87	4457-4458	-	_	_	_	
17-88	4458-4459	-	_	_	_	
17-89	4459-4460	-	_	_	_	
17-90	4460-4461	-	_	_	_	
17-91	4461-4462	-	_	_	_	
17-92	4462-4463	-	_	_	_	
17-93	4463-4464	-	_	_	_	
17-94	4464-4465	-	_	_	_	
17-95	4465-4466	-	_	_	_	
17-96	4466-4467	-	_	_	_	

#Text=Index Scan using idx_org_dept on org (cost=0.42..8.44 rows=1 width=1169) Index Cond: ('aa'::text = ((info -> 'dept'::text) ->> 'name'::text))
18-1	4468-4473	Index	_	_	_	
18-2	4474-4478	Scan	_	_	_	
18-3	4479-4484	using	_	_	_	
18-4	4485-4497	idx_org_dept	_	_	_	
18-5	4498-4500	on	_	_	_	
18-6	4501-4504	org	_	_	_	
18-7	4505-4506	(	_	_	_	
18-8	4506-4510	cost	_	_	_	
18-9	4510-4511	=	_	_	_	
18-10	4511-4515	0.42	_	_	_	
18-11	4515-4516	.	_	_	_	
18-12	4516-4521	.8.44	_	_	_	
18-13	4522-4526	rows	_	_	_	
18-14	4526-4527	=	_	_	_	
18-15	4527-4528	1	_	_	_	
18-16	4529-4534	width	_	_	_	
18-17	4534-4535	=	_	_	_	
18-18	4535-4539	1169	_	_	_	
18-19	4539-4540	)	_	_	_	
18-20	4541-4546	Index	_	_	_	
18-21	4547-4551	Cond	_	_	_	
18-22	4551-4552	:	_	_	_	
18-23	4553-4554	(	_	_	_	
18-24	4554-4555	'	_	_	_	
18-25	4555-4557	aa	_	_	_	
18-26	4557-4558	'	_	_	_	
18-27	4558-4559	:	_	_	_	
18-28	4559-4560	:	_	_	_	
18-29	4560-4564	text	_	_	_	
18-30	4565-4566	=	_	_	_	
18-31	4567-4568	(	_	_	_	
18-32	4568-4569	(	_	_	_	
18-33	4569-4573	info	_	_	_	
18-34	4574-4575	-	_	_	_	
18-35	4575-4576	>	_	_	_	
18-36	4577-4578	'	_	_	_	
18-37	4578-4582	dept	_	_	_	
18-38	4582-4583	'	_	_	_	
18-39	4583-4584	:	_	_	_	
18-40	4584-4585	:	_	_	_	
18-41	4585-4589	text	_	_	_	
18-42	4589-4590	)	_	_	_	
18-43	4591-4592	-	_	_	_	
18-44	4592-4593	>	_	_	_	
18-45	4593-4594	>	_	_	_	
18-46	4595-4596	'	_	_	_	
18-47	4596-4600	name	_	_	_	
18-48	4600-4601	'	_	_	_	
18-49	4601-4602	:	_	_	_	
18-50	4602-4603	:	_	_	_	
18-51	4603-4607	text	_	_	_	
18-52	4607-4608	)	_	_	_	
18-53	4608-4609	)	_	_	_	

#Text=(2 rows)As we can see, having and using EXPLAIN in your troubleshooting arsenal can be invaluable. What is Explain?
19-1	4610-4611	(	_	_	_	
19-2	4611-4612	2	_	_	_	
19-3	4613-4617	rows	_	_	_	
19-4	4617-4618	)	_	_	_	
19-5	4618-4620	As	_	_	_	
19-6	4621-4623	we	_	_	_	
19-7	4624-4627	can	_	_	_	
19-8	4628-4631	see	_	_	_	
19-9	4631-4632	,	_	_	_	
19-10	4633-4639	having	_	_	_	
19-11	4640-4643	and	_	_	_	
19-12	4644-4649	using	_	_	_	
19-13	4650-4657	EXPLAIN	_	_	_	
19-14	4658-4660	in	_	_	_	
19-15	4661-4665	your	_	_	_	
19-16	4666-4681	troubleshooting	_	_	_	
19-17	4682-4689	arsenal	_	_	_	
19-18	4690-4693	can	_	_	_	
19-19	4694-4696	be	_	_	_	
19-20	4697-4707	invaluable	_	_	_	
19-21	4707-4708	.	_	_	_	
19-22	4709-4713	What	_	_	_	
19-23	4714-4716	is	_	_	_	
19-24	4717-4724	Explain	_	_	_	
19-25	4724-4725	?	_	_	_	

#Text=EXPLAIN is a keyword that gets prepended to a query to show a user how the query planner plans to execute the given query.  Depending on the complexity of the query, it will show the join strategy, method of extracting data from tables, estimated rows involved in executing the query, and a number of other bits of useful information.  Used with ANALYZE, EXPLAIN will also show the time spent on executing the query, sorts, and merges that couldn’t be done in-memory, and more.  This information is invaluable when it comes to identifying query performance bottlenecks and opportunities, and helps us understand what information the query planner is working with as it makes its decisions for us. A Cost-Based Approach
20-1	4726-4733	EXPLAIN	_	_	_	
20-2	4734-4736	is	_	_	_	
20-3	4737-4738	a	_	_	_	
20-4	4739-4746	keyword	_	_	_	
20-5	4747-4751	that	_	_	_	
20-6	4752-4756	gets	_	_	_	
20-7	4757-4766	prepended	_	_	_	
20-8	4767-4769	to	_	_	_	
20-9	4770-4771	a	_	_	_	
20-10	4772-4777	query	_	_	_	
20-11	4778-4780	to	_	_	_	
20-12	4781-4785	show	_	_	_	
20-13	4786-4787	a	_	_	_	
20-14	4788-4792	user	_	_	_	
20-15	4793-4796	how	_	_	_	
20-16	4797-4800	the	_	_	_	
20-17	4801-4806	query	_	_	_	
20-18	4807-4814	planner	_	_	_	
20-19	4815-4820	plans	_	_	_	
20-20	4821-4823	to	_	_	_	
20-21	4824-4831	execute	_	_	_	
20-22	4832-4835	the	_	_	_	
20-23	4836-4841	given	_	_	_	
20-24	4842-4847	query	_	_	_	
20-25	4847-4848	.	_	_	_	
20-26	4849-4850	 	_	_	_	
20-27	4850-4859	Depending	_	_	_	
20-28	4860-4862	on	_	_	_	
20-29	4863-4866	the	_	_	_	
20-30	4867-4877	complexity	_	_	_	
20-31	4878-4880	of	_	_	_	
20-32	4881-4884	the	_	_	_	
20-33	4885-4890	query	_	_	_	
20-34	4890-4891	,	_	_	_	
20-35	4892-4894	it	_	_	_	
20-36	4895-4899	will	_	_	_	
20-37	4900-4904	show	_	_	_	
20-38	4905-4908	the	_	_	_	
20-39	4909-4913	join	_	_	_	
20-40	4914-4922	strategy	_	_	_	
20-41	4922-4923	,	_	_	_	
20-42	4924-4930	method	_	_	_	
20-43	4931-4933	of	_	_	_	
20-44	4934-4944	extracting	_	_	_	
20-45	4945-4949	data	_	_	_	
20-46	4950-4954	from	_	_	_	
20-47	4955-4961	tables	_	_	_	
20-48	4961-4962	,	_	_	_	
20-49	4963-4972	estimated	_	_	_	
20-50	4973-4977	rows	_	_	_	
20-51	4978-4986	involved	_	_	_	
20-52	4987-4989	in	_	_	_	
20-53	4990-4999	executing	_	_	_	
20-54	5000-5003	the	_	_	_	
20-55	5004-5009	query	_	_	_	
20-56	5009-5010	,	_	_	_	
20-57	5011-5014	and	_	_	_	
20-58	5015-5016	a	_	_	_	
20-59	5017-5023	number	_	_	_	
20-60	5024-5026	of	_	_	_	
20-61	5027-5032	other	_	_	_	
20-62	5033-5037	bits	_	_	_	
20-63	5038-5040	of	_	_	_	
20-64	5041-5047	useful	_	_	_	
20-65	5048-5059	information	_	_	_	
20-66	5059-5060	.	_	_	_	
20-67	5061-5062	 	_	_	_	
20-68	5062-5066	Used	_	_	_	
20-69	5067-5071	with	_	_	_	
20-70	5072-5079	ANALYZE	_	_	_	
20-71	5079-5080	,	_	_	_	
20-72	5081-5088	EXPLAIN	_	_	_	
20-73	5089-5093	will	_	_	_	
20-74	5094-5098	also	_	_	_	
20-75	5099-5103	show	_	_	_	
20-76	5104-5107	the	_	_	_	
20-77	5108-5112	time	_	_	_	
20-78	5113-5118	spent	_	_	_	
20-79	5119-5121	on	_	_	_	
20-80	5122-5131	executing	_	_	_	
20-81	5132-5135	the	_	_	_	
20-82	5136-5141	query	_	_	_	
20-83	5141-5142	,	_	_	_	
20-84	5143-5148	sorts	_	_	_	
20-85	5148-5149	,	_	_	_	
20-86	5150-5153	and	_	_	_	
20-87	5154-5160	merges	_	_	_	
20-88	5161-5165	that	_	_	_	
20-89	5166-5172	couldn	_	_	_	
20-90	5172-5173	’	_	_	_	
20-91	5173-5174	t	_	_	_	
20-92	5175-5177	be	_	_	_	
20-93	5178-5182	done	_	_	_	
20-94	5183-5192	in-memory	_	_	_	
20-95	5192-5193	,	_	_	_	
20-96	5194-5197	and	_	_	_	
20-97	5198-5202	more	_	_	_	
20-98	5202-5203	.	_	_	_	
20-99	5204-5205	 	_	_	_	
20-100	5205-5209	This	_	_	_	
20-101	5210-5221	information	_	_	_	
20-102	5222-5224	is	_	_	_	
20-103	5225-5235	invaluable	_	_	_	
20-104	5236-5240	when	_	_	_	
20-105	5241-5243	it	_	_	_	
20-106	5244-5249	comes	_	_	_	
20-107	5250-5252	to	_	_	_	
20-108	5253-5264	identifying	_	_	_	
20-109	5265-5270	query	_	_	_	
20-110	5271-5282	performance	_	_	_	
20-111	5283-5294	bottlenecks	_	_	_	
20-112	5295-5298	and	_	_	_	
20-113	5299-5312	opportunities	_	_	_	
20-114	5312-5313	,	_	_	_	
20-115	5314-5317	and	_	_	_	
20-116	5318-5323	helps	_	_	_	
20-117	5324-5326	us	_	_	_	
20-118	5327-5337	understand	_	_	_	
20-119	5338-5342	what	_	_	_	
20-120	5343-5354	information	_	_	_	
20-121	5355-5358	the	_	_	_	
20-122	5359-5364	query	_	_	_	
20-123	5365-5372	planner	_	_	_	
20-124	5373-5375	is	_	_	_	
20-125	5376-5383	working	_	_	_	
20-126	5384-5388	with	_	_	_	
20-127	5389-5391	as	_	_	_	
20-128	5392-5394	it	_	_	_	
20-129	5395-5400	makes	_	_	_	
20-130	5401-5404	its	_	_	_	
20-131	5405-5414	decisions	_	_	_	
20-132	5415-5418	for	_	_	_	
20-133	5419-5421	us	_	_	_	
20-134	5421-5422	.	_	_	_	
20-135	5423-5424	A	_	_	_	
20-136	5425-5435	Cost-Based	_	_	_	
20-137	5436-5444	Approach	_	_	_	

#Text=To the query planner, all the data on disk is basically the same.  To determine the fastest way to reach a particular piece of data requires some estimation of the amount of time it takes to do a full table scan, a merge of two tables, and other operations to get data back to the user.  PostgreSQL accomplishes this by assigning costs to each execution task, and these values are derived from the postgresql.conf file (see parameters ending in *_cost or beginning with enable_*).  When a query is sent to the database, the query planner calculates the cumulative costs for different execution strategies and selects the most optimal plan (which may not necessarily be the one with the lowest cost). bash $ pgbench -i && psql <...> postgres=# EXPLAIN SELECT * FROM pgbench_accounts a JOIN pgbench_branches b ON (a.bid=b.bid) WHERE a.aid < 100000;
21-1	5445-5447	To	_	_	_	
21-2	5448-5451	the	_	_	_	
21-3	5452-5457	query	_	_	_	
21-4	5458-5465	planner	_	_	_	
21-5	5465-5466	,	_	_	_	
21-6	5467-5470	all	_	_	_	
21-7	5471-5474	the	_	_	_	
21-8	5475-5479	data	_	_	_	
21-9	5480-5482	on	_	_	_	
21-10	5483-5487	disk	_	_	_	
21-11	5488-5490	is	_	_	_	
21-12	5491-5500	basically	_	_	_	
21-13	5501-5504	the	_	_	_	
21-14	5505-5509	same	_	_	_	
21-15	5509-5510	.	_	_	_	
21-16	5511-5512	 	_	_	_	
21-17	5512-5514	To	_	_	_	
21-18	5515-5524	determine	_	_	_	
21-19	5525-5528	the	_	_	_	
21-20	5529-5536	fastest	_	_	_	
21-21	5537-5540	way	_	_	_	
21-22	5541-5543	to	_	_	_	
21-23	5544-5549	reach	_	_	_	
21-24	5550-5551	a	_	_	_	
21-25	5552-5562	particular	_	_	_	
21-26	5563-5568	piece	_	_	_	
21-27	5569-5571	of	_	_	_	
21-28	5572-5576	data	_	_	_	
21-29	5577-5585	requires	_	_	_	
21-30	5586-5590	some	_	_	_	
21-31	5591-5601	estimation	_	_	_	
21-32	5602-5604	of	_	_	_	
21-33	5605-5608	the	_	_	_	
21-34	5609-5615	amount	_	_	_	
21-35	5616-5618	of	_	_	_	
21-36	5619-5623	time	_	_	_	
21-37	5624-5626	it	_	_	_	
21-38	5627-5632	takes	_	_	_	
21-39	5633-5635	to	_	_	_	
21-40	5636-5638	do	_	_	_	
21-41	5639-5640	a	_	_	_	
21-42	5641-5645	full	_	_	_	
21-43	5646-5651	table	_	_	_	
21-44	5652-5656	scan	_	_	_	
21-45	5656-5657	,	_	_	_	
21-46	5658-5659	a	_	_	_	
21-47	5660-5665	merge	_	_	_	
21-48	5666-5668	of	_	_	_	
21-49	5669-5672	two	_	_	_	
21-50	5673-5679	tables	_	_	_	
21-51	5679-5680	,	_	_	_	
21-52	5681-5684	and	_	_	_	
21-53	5685-5690	other	_	_	_	
21-54	5691-5701	operations	_	_	_	
21-55	5702-5704	to	_	_	_	
21-56	5705-5708	get	_	_	_	
21-57	5709-5713	data	_	_	_	
21-58	5714-5718	back	_	_	_	
21-59	5719-5721	to	_	_	_	
21-60	5722-5725	the	_	_	_	
21-61	5726-5730	user	_	_	_	
21-62	5730-5731	.	_	_	_	
21-63	5732-5733	 	_	_	_	
21-64	5733-5743	PostgreSQL	_	_	_	
21-65	5744-5756	accomplishes	_	_	_	
21-66	5757-5761	this	_	_	_	
21-67	5762-5764	by	_	_	_	
21-68	5765-5774	assigning	_	_	_	
21-69	5775-5780	costs	_	_	_	
21-70	5781-5783	to	_	_	_	
21-71	5784-5788	each	_	_	_	
21-72	5789-5798	execution	_	_	_	
21-73	5799-5803	task	_	_	_	
21-74	5803-5804	,	_	_	_	
21-75	5805-5808	and	_	_	_	
21-76	5809-5814	these	_	_	_	
21-77	5815-5821	values	_	_	_	
21-78	5822-5825	are	_	_	_	
21-79	5826-5833	derived	_	_	_	
21-80	5834-5838	from	_	_	_	
21-81	5839-5842	the	_	_	_	
21-82	5843-5858	postgresql.conf	_	_	_	
21-83	5859-5863	file	_	_	_	
21-84	5864-5865	(	_	_	_	
21-85	5865-5868	see	_	_	_	
21-86	5869-5879	parameters	_	_	_	
21-87	5880-5886	ending	_	_	_	
21-88	5887-5889	in	_	_	_	
21-89	5890-5891	*	_	_	_	
21-90	5891-5892	_	_	_	_	
21-91	5892-5896	cost	_	_	_	
21-92	5897-5899	or	_	_	_	
21-93	5900-5909	beginning	_	_	_	
21-94	5910-5914	with	_	_	_	
21-95	5915-5921	enable	_	_	_	
21-96	5921-5922	_	_	_	_	
21-97	5922-5923	*	_	_	_	
21-98	5923-5924	)	_	_	_	
21-99	5924-5925	.	_	_	_	
21-100	5926-5927	 	_	_	_	
21-101	5927-5931	When	_	_	_	
21-102	5932-5933	a	_	_	_	
21-103	5934-5939	query	_	_	_	
21-104	5940-5942	is	_	_	_	
21-105	5943-5947	sent	_	_	_	
21-106	5948-5950	to	_	_	_	
21-107	5951-5954	the	_	_	_	
21-108	5955-5963	database	_	_	_	
21-109	5963-5964	,	_	_	_	
21-110	5965-5968	the	_	_	_	
21-111	5969-5974	query	_	_	_	
21-112	5975-5982	planner	_	_	_	
21-113	5983-5993	calculates	_	_	_	
21-114	5994-5997	the	_	_	_	
21-115	5998-6008	cumulative	_	_	_	
21-116	6009-6014	costs	_	_	_	
21-117	6015-6018	for	_	_	_	
21-118	6019-6028	different	_	_	_	
21-119	6029-6038	execution	_	_	_	
21-120	6039-6049	strategies	_	_	_	
21-121	6050-6053	and	_	_	_	
21-122	6054-6061	selects	_	_	_	
21-123	6062-6065	the	_	_	_	
21-124	6066-6070	most	_	_	_	
21-125	6071-6078	optimal	_	_	_	
21-126	6079-6083	plan	_	_	_	
21-127	6084-6085	(	_	_	_	
21-128	6085-6090	which	_	_	_	
21-129	6091-6094	may	_	_	_	
21-130	6095-6098	not	_	_	_	
21-131	6099-6110	necessarily	_	_	_	
21-132	6111-6113	be	_	_	_	
21-133	6114-6117	the	_	_	_	
21-134	6118-6121	one	_	_	_	
21-135	6122-6126	with	_	_	_	
21-136	6127-6130	the	_	_	_	
21-137	6131-6137	lowest	_	_	_	
21-138	6138-6142	cost	_	_	_	
21-139	6142-6143	)	_	_	_	
21-140	6143-6144	.	_	_	_	
21-141	6145-6149	bash	_	_	_	
21-142	6150-6151	$	_	_	_	
21-143	6152-6159	pgbench	_	_	_	
21-144	6160-6161	-	_	_	_	
21-145	6161-6162	i	_	_	_	
21-146	6163-6164	&	_	_	_	
21-147	6164-6165	&	_	_	_	
21-148	6166-6170	psql	_	_	_	
21-149	6171-6172	<	_	_	_	
21-150	6172-6173	.	_	_	_	
21-151	6173-6174	.	_	_	_	
21-152	6174-6175	.	_	_	_	
21-153	6175-6176	>	_	_	_	
21-154	6177-6185	postgres	_	_	_	
21-155	6185-6186	=	_	_	_	
21-156	6186-6187	#	_	_	_	
21-157	6188-6195	EXPLAIN	_	_	_	
21-158	6196-6202	SELECT	_	_	_	
21-159	6203-6204	*	_	_	_	
21-160	6205-6209	FROM	_	_	_	
21-161	6210-6226	pgbench_accounts	_	_	_	
21-162	6227-6228	a	_	_	_	
21-163	6229-6233	JOIN	_	_	_	
21-164	6234-6250	pgbench_branches	_	_	_	
21-165	6251-6252	b	_	_	_	
21-166	6253-6255	ON	_	_	_	
21-167	6256-6257	(	_	_	_	
21-168	6257-6262	a.bid	_	_	_	
21-169	6262-6263	=	_	_	_	
21-170	6263-6268	b.bid	_	_	_	
21-171	6268-6269	)	_	_	_	
21-172	6270-6275	WHERE	_	_	_	
21-173	6276-6281	a.aid	_	_	_	
21-174	6282-6283	<	_	_	_	
21-175	6284-6290	100000	_	_	_	
21-176	6290-6291	;	_	_	_	

#Text=QUERY PLAN --------------------------------------------------------------------------------
22-1	6292-6297	QUERY	_	_	_	
22-2	6298-6302	PLAN	_	_	_	
22-3	6303-6304	-	_	_	_	
22-4	6304-6305	-	_	_	_	
22-5	6305-6306	-	_	_	_	
22-6	6306-6307	-	_	_	_	
22-7	6307-6308	-	_	_	_	
22-8	6308-6309	-	_	_	_	
22-9	6309-6310	-	_	_	_	
22-10	6310-6311	-	_	_	_	
22-11	6311-6312	-	_	_	_	
22-12	6312-6313	-	_	_	_	
22-13	6313-6314	-	_	_	_	
22-14	6314-6315	-	_	_	_	
22-15	6315-6316	-	_	_	_	
22-16	6316-6317	-	_	_	_	
22-17	6317-6318	-	_	_	_	
22-18	6318-6319	-	_	_	_	
22-19	6319-6320	-	_	_	_	
22-20	6320-6321	-	_	_	_	
22-21	6321-6322	-	_	_	_	
22-22	6322-6323	-	_	_	_	
22-23	6323-6324	-	_	_	_	
22-24	6324-6325	-	_	_	_	
22-25	6325-6326	-	_	_	_	
22-26	6326-6327	-	_	_	_	
22-27	6327-6328	-	_	_	_	
22-28	6328-6329	-	_	_	_	
22-29	6329-6330	-	_	_	_	
22-30	6330-6331	-	_	_	_	
22-31	6331-6332	-	_	_	_	
22-32	6332-6333	-	_	_	_	
22-33	6333-6334	-	_	_	_	
22-34	6334-6335	-	_	_	_	
22-35	6335-6336	-	_	_	_	
22-36	6336-6337	-	_	_	_	
22-37	6337-6338	-	_	_	_	
22-38	6338-6339	-	_	_	_	
22-39	6339-6340	-	_	_	_	
22-40	6340-6341	-	_	_	_	
22-41	6341-6342	-	_	_	_	
22-42	6342-6343	-	_	_	_	
22-43	6343-6344	-	_	_	_	
22-44	6344-6345	-	_	_	_	
22-45	6345-6346	-	_	_	_	
22-46	6346-6347	-	_	_	_	
22-47	6347-6348	-	_	_	_	
22-48	6348-6349	-	_	_	_	
22-49	6349-6350	-	_	_	_	
22-50	6350-6351	-	_	_	_	
22-51	6351-6352	-	_	_	_	
22-52	6352-6353	-	_	_	_	
22-53	6353-6354	-	_	_	_	
22-54	6354-6355	-	_	_	_	
22-55	6355-6356	-	_	_	_	
22-56	6356-6357	-	_	_	_	
22-57	6357-6358	-	_	_	_	
22-58	6358-6359	-	_	_	_	
22-59	6359-6360	-	_	_	_	
22-60	6360-6361	-	_	_	_	
22-61	6361-6362	-	_	_	_	
22-62	6362-6363	-	_	_	_	
22-63	6363-6364	-	_	_	_	
22-64	6364-6365	-	_	_	_	
22-65	6365-6366	-	_	_	_	
22-66	6366-6367	-	_	_	_	
22-67	6367-6368	-	_	_	_	
22-68	6368-6369	-	_	_	_	
22-69	6369-6370	-	_	_	_	
22-70	6370-6371	-	_	_	_	
22-71	6371-6372	-	_	_	_	
22-72	6372-6373	-	_	_	_	
22-73	6373-6374	-	_	_	_	
22-74	6374-6375	-	_	_	_	
22-75	6375-6376	-	_	_	_	
22-76	6376-6377	-	_	_	_	
22-77	6377-6378	-	_	_	_	
22-78	6378-6379	-	_	_	_	
22-79	6379-6380	-	_	_	_	
22-80	6380-6381	-	_	_	_	
22-81	6381-6382	-	_	_	_	
22-82	6382-6383	-	_	_	_	

#Text=Nested Loop (cost=0.00..4141.00 rows=99999 width=461) Join Filter: (a.bid = b.bid) Seq Scan on pgbench_branches b
23-1	6384-6390	Nested	_	_	_	
23-2	6391-6395	Loop	_	_	_	
23-3	6396-6397	(	_	_	_	
23-4	6397-6401	cost	_	_	_	
23-5	6401-6402	=	_	_	_	
23-6	6402-6406	0.00	_	_	_	
23-7	6406-6407	.	_	_	_	
23-8	6407-6415	.4141.00	_	_	_	
23-9	6416-6420	rows	_	_	_	
23-10	6420-6421	=	_	_	_	
23-11	6421-6426	99999	_	_	_	
23-12	6427-6432	width	_	_	_	
23-13	6432-6433	=	_	_	_	
23-14	6433-6436	461	_	_	_	
23-15	6436-6437	)	_	_	_	
23-16	6438-6442	Join	_	_	_	
23-17	6443-6449	Filter	_	_	_	
23-18	6449-6450	:	_	_	_	
23-19	6451-6452	(	_	_	_	
23-20	6452-6457	a.bid	_	_	_	
23-21	6458-6459	=	_	_	_	
23-22	6460-6465	b.bid	_	_	_	
23-23	6465-6466	)	_	_	_	
23-24	6467-6470	Seq	_	_	_	
23-25	6471-6475	Scan	_	_	_	
23-26	6476-6478	on	_	_	_	
23-27	6479-6495	pgbench_branches	_	_	_	
23-28	6496-6497	b	_	_	_	

#Text=(cost=0.00..1.01 rows=1 width=364) Seq Scan on pgbench_accounts a (cost=0.00..2890.00 rows=99999 width=97) Filter: (aid < 100000)
24-1	6498-6499	(	_	_	_	
24-2	6499-6503	cost	_	_	_	
24-3	6503-6504	=	_	_	_	
24-4	6504-6508	0.00	_	_	_	
24-5	6508-6509	.	_	_	_	
24-6	6509-6514	.1.01	_	_	_	
24-7	6515-6519	rows	_	_	_	
24-8	6519-6520	=	_	_	_	
24-9	6520-6521	1	_	_	_	
24-10	6522-6527	width	_	_	_	
24-11	6527-6528	=	_	_	_	
24-12	6528-6531	364	_	_	_	
24-13	6531-6532	)	_	_	_	
24-14	6533-6536	Seq	_	_	_	
24-15	6537-6541	Scan	_	_	_	
24-16	6542-6544	on	_	_	_	
24-17	6545-6561	pgbench_accounts	_	_	_	
24-18	6562-6563	a	_	_	_	
24-19	6564-6565	(	_	_	_	
24-20	6565-6569	cost	_	_	_	
24-21	6569-6570	=	_	_	_	
24-22	6570-6574	0.00	_	_	_	
24-23	6574-6575	.	_	_	_	
24-24	6575-6583	.2890.00	_	_	_	
24-25	6584-6588	rows	_	_	_	
24-26	6588-6589	=	_	_	_	
24-27	6589-6594	99999	_	_	_	
24-28	6595-6600	width	_	_	_	
24-29	6600-6601	=	_	_	_	
24-30	6601-6603	97	_	_	_	
24-31	6603-6604	)	_	_	_	
24-32	6605-6611	Filter	_	_	_	
24-33	6611-6612	:	_	_	_	
24-34	6613-6614	(	_	_	_	
24-35	6614-6617	aid	_	_	_	
24-36	6618-6619	<	_	_	_	
24-37	6620-6626	100000	_	_	_	
24-38	6626-6627	)	_	_	_	

#Text=(5 rows)Here, we see that the Seq Scan on pgbench_accounts has cost 2890 to execute the task.  Where does this value come from?  If we look at some settings and do the calculations, we find: cost = ( #blocks * seq_page_cost ) + ( #records * cpu_tuple_cost ) + ( #records * cpu_filter_cost ) postgres=# select pg_relation_size('pgbench_accounts');
25-1	6628-6629	(	_	_	_	
25-2	6629-6630	5	_	_	_	
25-3	6631-6635	rows	_	_	_	
25-4	6635-6636	)	_	_	_	
25-5	6636-6640	Here	_	_	_	
25-6	6640-6641	,	_	_	_	
25-7	6642-6644	we	_	_	_	
25-8	6645-6648	see	_	_	_	
25-9	6649-6653	that	_	_	_	
25-10	6654-6657	the	_	_	_	
25-11	6658-6661	Seq	_	_	_	
25-12	6662-6666	Scan	_	_	_	
25-13	6667-6669	on	_	_	_	
25-14	6670-6686	pgbench_accounts	_	_	_	
25-15	6687-6690	has	_	_	_	
25-16	6691-6695	cost	_	_	_	
25-17	6696-6700	2890	_	_	_	
25-18	6701-6703	to	_	_	_	
25-19	6704-6711	execute	_	_	_	
25-20	6712-6715	the	_	_	_	
25-21	6716-6720	task	_	_	_	
25-22	6720-6721	.	_	_	_	
25-23	6722-6723	 	_	_	_	
25-24	6723-6728	Where	_	_	_	
25-25	6729-6733	does	_	_	_	
25-26	6734-6738	this	_	_	_	
25-27	6739-6744	value	_	_	_	
25-28	6745-6749	come	_	_	_	
25-29	6750-6754	from	_	_	_	
25-30	6754-6755	?	_	_	_	
25-31	6756-6757	 	_	_	_	
25-32	6757-6759	If	_	_	_	
25-33	6760-6762	we	_	_	_	
25-34	6763-6767	look	_	_	_	
25-35	6768-6770	at	_	_	_	
25-36	6771-6775	some	_	_	_	
25-37	6776-6784	settings	_	_	_	
25-38	6785-6788	and	_	_	_	
25-39	6789-6791	do	_	_	_	
25-40	6792-6795	the	_	_	_	
25-41	6796-6808	calculations	_	_	_	
25-42	6808-6809	,	_	_	_	
25-43	6810-6812	we	_	_	_	
25-44	6813-6817	find	_	_	_	
25-45	6817-6818	:	_	_	_	
25-46	6819-6823	cost	_	_	_	
25-47	6824-6825	=	_	_	_	
25-48	6826-6827	(	_	_	_	
25-49	6828-6829	#	_	_	_	
25-50	6829-6835	blocks	_	_	_	
25-51	6836-6837	*	_	_	_	
25-52	6838-6851	seq_page_cost	_	_	_	
25-53	6852-6853	)	_	_	_	
25-54	6854-6855	+	_	_	_	
25-55	6856-6857	(	_	_	_	
25-56	6858-6859	#	_	_	_	
25-57	6859-6866	records	_	_	_	
25-58	6867-6868	*	_	_	_	
25-59	6869-6883	cpu_tuple_cost	_	_	_	
25-60	6884-6885	)	_	_	_	
25-61	6886-6887	+	_	_	_	
25-62	6888-6889	(	_	_	_	
25-63	6890-6891	#	_	_	_	
25-64	6891-6898	records	_	_	_	
25-65	6899-6900	*	_	_	_	
25-66	6901-6916	cpu_filter_cost	_	_	_	
25-67	6917-6918	)	_	_	_	
25-68	6919-6927	postgres	_	_	_	
25-69	6927-6928	=	_	_	_	
25-70	6928-6929	#	_	_	_	
25-71	6930-6936	select	_	_	_	
25-72	6937-6953	pg_relation_size	_	_	_	
25-73	6953-6954	(	_	_	_	
25-74	6954-6955	'	_	_	_	
25-75	6955-6971	pgbench_accounts	_	_	_	
25-76	6971-6972	'	_	_	_	
25-77	6972-6973	)	_	_	_	
25-78	6973-6974	;	_	_	_	

#Text=pg_relation_size ------------------ 13434880 block_size = 8192 (8kB, typical OS) #blocks = 1640 (relation_size / block_size)
26-1	6975-6991	pg_relation_size	_	_	_	
26-2	6992-6993	-	_	_	_	
26-3	6993-6994	-	_	_	_	
26-4	6994-6995	-	_	_	_	
26-5	6995-6996	-	_	_	_	
26-6	6996-6997	-	_	_	_	
26-7	6997-6998	-	_	_	_	
26-8	6998-6999	-	_	_	_	
26-9	6999-7000	-	_	_	_	
26-10	7000-7001	-	_	_	_	
26-11	7001-7002	-	_	_	_	
26-12	7002-7003	-	_	_	_	
26-13	7003-7004	-	_	_	_	
26-14	7004-7005	-	_	_	_	
26-15	7005-7006	-	_	_	_	
26-16	7006-7007	-	_	_	_	
26-17	7007-7008	-	_	_	_	
26-18	7008-7009	-	_	_	_	
26-19	7009-7010	-	_	_	_	
26-20	7011-7019	13434880	_	_	_	
26-21	7020-7030	block_size	_	_	_	
26-22	7031-7032	=	_	_	_	
26-23	7033-7037	8192	_	_	_	
26-24	7038-7039	(	_	_	_	
26-25	7039-7042	8kB	_	_	_	
26-26	7042-7043	,	_	_	_	
26-27	7044-7051	typical	_	_	_	
26-28	7052-7054	OS	_	_	_	
26-29	7054-7055	)	_	_	_	
26-30	7056-7057	#	_	_	_	
26-31	7057-7063	blocks	_	_	_	
26-32	7064-7065	=	_	_	_	
26-33	7066-7070	1640	_	_	_	
26-34	7071-7072	(	_	_	_	
26-35	7072-7085	relation_size	_	_	_	
26-36	7086-7087	/	_	_	_	
26-37	7088-7098	block_size	_	_	_	
26-38	7098-7099	)	_	_	_	

#Text=#records = 100000 seq_page_cost = 1 (default) cpu_tuple_cost = 0.01 (default) cpu_filter_cost = 0.0025 (default)
27-1	7100-7101	#	_	_	_	
27-2	7101-7108	records	_	_	_	
27-3	7109-7110	=	_	_	_	
27-4	7111-7117	100000	_	_	_	
27-5	7118-7131	seq_page_cost	PARAM	_	_	
27-6	7132-7133	=	_	_	_	
27-7	7134-7135	1	VALUE	Equal to	27-5	
27-8	7136-7137	(	_	_	_	
27-9	7137-7144	default	_	_	_	
27-10	7144-7145	)	_	_	_	
27-11	7146-7160	cpu_tuple_cost	PARAM	_	_	
27-12	7161-7162	=	_	_	_	
27-13	7163-7167	0.01	VALUE	Equal to	27-11	
27-14	7168-7169	(	_	_	_	
27-15	7169-7176	default	_	_	_	
27-16	7176-7177	)	_	_	_	
27-17	7178-7193	cpu_filter_cost	PARAM	_	_	
27-18	7194-7195	=	_	_	_	
27-19	7196-7202	0.0025	VALUE	Equal to	27-17	
27-20	7203-7204	(	_	_	_	
27-21	7204-7211	default	_	_	_	
27-22	7211-7212	)	_	_	_	

#Text=cost = ( 1640 * 1 ) + ( 100000 * 0.01 ) + ( 100000 * 0.0025 ) = 2890 As we can see, the costs are directly based on some internal statistics that the query planner can work with. A Note About Statistics
28-1	7213-7217	cost	_	_	_	
28-2	7218-7219	=	_	_	_	
28-3	7220-7221	(	_	_	_	
28-4	7222-7226	1640	_	_	_	
28-5	7227-7228	*	_	_	_	
28-6	7229-7230	1	_	_	_	
28-7	7231-7232	)	_	_	_	
28-8	7233-7234	+	_	_	_	
28-9	7235-7236	(	_	_	_	
28-10	7237-7243	100000	_	_	_	
28-11	7244-7245	*	_	_	_	
28-12	7246-7250	0.01	_	_	_	
28-13	7251-7252	)	_	_	_	
28-14	7253-7254	+	_	_	_	
28-15	7255-7256	(	_	_	_	
28-16	7257-7263	100000	_	_	_	
28-17	7264-7265	*	_	_	_	
28-18	7266-7272	0.0025	_	_	_	
28-19	7273-7274	)	_	_	_	
28-20	7275-7276	=	_	_	_	
28-21	7277-7281	2890	_	_	_	
28-22	7282-7284	As	_	_	_	
28-23	7285-7287	we	_	_	_	
28-24	7288-7291	can	_	_	_	
28-25	7292-7295	see	_	_	_	
28-26	7295-7296	,	_	_	_	
28-27	7297-7300	the	_	_	_	
28-28	7301-7306	costs	_	_	_	
28-29	7307-7310	are	_	_	_	
28-30	7311-7319	directly	_	_	_	
28-31	7320-7325	based	_	_	_	
28-32	7326-7328	on	_	_	_	
28-33	7329-7333	some	_	_	_	
28-34	7334-7342	internal	_	_	_	
28-35	7343-7353	statistics	_	_	_	
28-36	7354-7358	that	_	_	_	
28-37	7359-7362	the	_	_	_	
28-38	7363-7368	query	_	_	_	
28-39	7369-7376	planner	_	_	_	
28-40	7377-7380	can	_	_	_	
28-41	7381-7385	work	_	_	_	
28-42	7386-7390	with	_	_	_	
28-43	7390-7391	.	_	_	_	
28-44	7392-7393	A	_	_	_	
28-45	7394-7398	Note	_	_	_	
28-46	7399-7404	About	_	_	_	
28-47	7405-7415	Statistics	_	_	_	

#Text=The query planner calculates costs based on statistics stored in pg_statistic (don’t look there--there’s nothing human-readable in there.  If you want to get visibility into the table and row statistics, try looking at pg_stats).  If any of these internal statistics are off (i.e., a bloated table or too many joins that cause the Genetic Query Optimizer to kick in), a sub-optimal plan may be selected, leading to poor query performance.  Having bad statistics isn’t necessarily a problem--the statistics aren’t always updated in real-time, and much of it depends on PostgreSQL’s internal maintenance.  As such, it’s imperative that database maintenance is conducted regularly--this means frequent VACUUM-ing and ANALYZE-ing.  Without good statistics, you could end up with something like this: postgres=# EXPLAIN SELECT * FROM pgbench_history WHERE aid < 100; QUERY PLAN
29-1	7416-7419	The	_	_	_	
29-2	7420-7425	query	_	_	_	
29-3	7426-7433	planner	_	_	_	
29-4	7434-7444	calculates	_	_	_	
29-5	7445-7450	costs	_	_	_	
29-6	7451-7456	based	_	_	_	
29-7	7457-7459	on	_	_	_	
29-8	7460-7470	statistics	_	_	_	
29-9	7471-7477	stored	_	_	_	
29-10	7478-7480	in	_	_	_	
29-11	7481-7493	pg_statistic	_	_	_	
29-12	7494-7495	(	_	_	_	
29-13	7495-7498	don	_	_	_	
29-14	7498-7499	’	_	_	_	
29-15	7499-7500	t	_	_	_	
29-16	7501-7505	look	_	_	_	
29-17	7506-7511	there	_	_	_	
29-18	7511-7512	-	_	_	_	
29-19	7512-7513	-	_	_	_	
29-20	7513-7518	there	_	_	_	
29-21	7518-7519	’	_	_	_	
29-22	7519-7520	s	_	_	_	
29-23	7521-7528	nothing	_	_	_	
29-24	7529-7543	human-readable	_	_	_	
29-25	7544-7546	in	_	_	_	
29-26	7547-7552	there	_	_	_	
29-27	7552-7553	.	_	_	_	
29-28	7554-7555	 	_	_	_	
29-29	7555-7557	If	_	_	_	
29-30	7558-7561	you	_	_	_	
29-31	7562-7566	want	_	_	_	
29-32	7567-7569	to	_	_	_	
29-33	7570-7573	get	_	_	_	
29-34	7574-7584	visibility	_	_	_	
29-35	7585-7589	into	_	_	_	
29-36	7590-7593	the	_	_	_	
29-37	7594-7599	table	_	_	_	
29-38	7600-7603	and	_	_	_	
29-39	7604-7607	row	_	_	_	
29-40	7608-7618	statistics	_	_	_	
29-41	7618-7619	,	_	_	_	
29-42	7620-7623	try	_	_	_	
29-43	7624-7631	looking	_	_	_	
29-44	7632-7634	at	_	_	_	
29-45	7635-7643	pg_stats	_	_	_	
29-46	7643-7644	)	_	_	_	
29-47	7644-7645	.	_	_	_	
29-48	7646-7647	 	_	_	_	
29-49	7647-7649	If	_	_	_	
29-50	7650-7653	any	_	_	_	
29-51	7654-7656	of	_	_	_	
29-52	7657-7662	these	_	_	_	
29-53	7663-7671	internal	_	_	_	
29-54	7672-7682	statistics	_	_	_	
29-55	7683-7686	are	_	_	_	
29-56	7687-7690	off	_	_	_	
29-57	7691-7692	(	_	_	_	
29-58	7692-7695	i.e	_	_	_	
29-59	7695-7696	.	_	_	_	
29-60	7696-7697	,	_	_	_	
29-61	7698-7699	a	_	_	_	
29-62	7700-7707	bloated	_	_	_	
29-63	7708-7713	table	_	_	_	
29-64	7714-7716	or	_	_	_	
29-65	7717-7720	too	_	_	_	
29-66	7721-7725	many	_	_	_	
29-67	7726-7731	joins	_	_	_	
29-68	7732-7736	that	_	_	_	
29-69	7737-7742	cause	_	_	_	
29-70	7743-7746	the	_	_	_	
29-71	7747-7754	Genetic	_	_	_	
29-72	7755-7760	Query	_	_	_	
29-73	7761-7770	Optimizer	_	_	_	
29-74	7771-7773	to	_	_	_	
29-75	7774-7778	kick	_	_	_	
29-76	7779-7781	in	_	_	_	
29-77	7781-7782	)	_	_	_	
29-78	7782-7783	,	_	_	_	
29-79	7784-7785	a	_	_	_	
29-80	7786-7797	sub-optimal	_	_	_	
29-81	7798-7802	plan	_	_	_	
29-82	7803-7806	may	_	_	_	
29-83	7807-7809	be	_	_	_	
29-84	7810-7818	selected	_	_	_	
29-85	7818-7819	,	_	_	_	
29-86	7820-7827	leading	_	_	_	
29-87	7828-7830	to	_	_	_	
29-88	7831-7835	poor	_	_	_	
29-89	7836-7841	query	_	_	_	
29-90	7842-7853	performance	_	_	_	
29-91	7853-7854	.	_	_	_	
29-92	7855-7856	 	_	_	_	
29-93	7856-7862	Having	_	_	_	
29-94	7863-7866	bad	_	_	_	
29-95	7867-7877	statistics	_	_	_	
29-96	7878-7881	isn	_	_	_	
29-97	7881-7882	’	_	_	_	
29-98	7882-7883	t	_	_	_	
29-99	7884-7895	necessarily	_	_	_	
29-100	7896-7897	a	_	_	_	
29-101	7898-7905	problem	_	_	_	
29-102	7905-7906	-	_	_	_	
29-103	7906-7907	-	_	_	_	
29-104	7907-7910	the	_	_	_	
29-105	7911-7921	statistics	_	_	_	
29-106	7922-7926	aren	_	_	_	
29-107	7926-7927	’	_	_	_	
29-108	7927-7928	t	_	_	_	
29-109	7929-7935	always	_	_	_	
29-110	7936-7943	updated	_	_	_	
29-111	7944-7946	in	_	_	_	
29-112	7947-7956	real-time	_	_	_	
29-113	7956-7957	,	_	_	_	
29-114	7958-7961	and	_	_	_	
29-115	7962-7966	much	_	_	_	
29-116	7967-7969	of	_	_	_	
29-117	7970-7972	it	_	_	_	
29-118	7973-7980	depends	_	_	_	
29-119	7981-7983	on	_	_	_	
29-120	7984-7994	PostgreSQL	_	_	_	
29-121	7994-7995	’	_	_	_	
29-122	7995-7996	s	_	_	_	
29-123	7997-8005	internal	_	_	_	
29-124	8006-8017	maintenance	_	_	_	
29-125	8017-8018	.	_	_	_	
29-126	8019-8020	 	_	_	_	
29-127	8020-8022	As	_	_	_	
29-128	8023-8027	such	_	_	_	
29-129	8027-8028	,	_	_	_	
29-130	8029-8031	it	_	_	_	
29-131	8031-8032	’	_	_	_	
29-132	8032-8033	s	_	_	_	
29-133	8034-8044	imperative	_	_	_	
29-134	8045-8049	that	_	_	_	
29-135	8050-8058	database	_	_	_	
29-136	8059-8070	maintenance	_	_	_	
29-137	8071-8073	is	_	_	_	
29-138	8074-8083	conducted	_	_	_	
29-139	8084-8093	regularly	_	_	_	
29-140	8093-8094	-	_	_	_	
29-141	8094-8095	-	_	_	_	
29-142	8095-8099	this	_	_	_	
29-143	8100-8105	means	_	_	_	
29-144	8106-8114	frequent	_	_	_	
29-145	8115-8125	VACUUM-ing	_	_	_	
29-146	8126-8129	and	_	_	_	
29-147	8130-8141	ANALYZE-ing	_	_	_	
29-148	8141-8142	.	_	_	_	
29-149	8143-8144	 	_	_	_	
29-150	8144-8151	Without	_	_	_	
29-151	8152-8156	good	_	_	_	
29-152	8157-8167	statistics	_	_	_	
29-153	8167-8168	,	_	_	_	
29-154	8169-8172	you	_	_	_	
29-155	8173-8178	could	_	_	_	
29-156	8179-8182	end	_	_	_	
29-157	8183-8185	up	_	_	_	
29-158	8186-8190	with	_	_	_	
29-159	8191-8200	something	_	_	_	
29-160	8201-8205	like	_	_	_	
29-161	8206-8210	this	_	_	_	
29-162	8210-8211	:	_	_	_	
29-163	8212-8220	postgres	_	_	_	
29-164	8220-8221	=	_	_	_	
29-165	8221-8222	#	_	_	_	
29-166	8223-8230	EXPLAIN	_	_	_	
29-167	8231-8237	SELECT	_	_	_	
29-168	8238-8239	*	_	_	_	
29-169	8240-8244	FROM	_	_	_	
29-170	8245-8260	pgbench_history	_	_	_	
29-171	8261-8266	WHERE	_	_	_	
29-172	8267-8270	aid	_	_	_	
29-173	8271-8272	<	_	_	_	
29-174	8273-8276	100	_	_	_	
29-175	8276-8277	;	_	_	_	
29-176	8278-8283	QUERY	_	_	_	
29-177	8284-8288	PLAN	_	_	_	

#Text=----------------------------------------------------------------------- Seq Scan on pgbench_history (cost=0.00..2346.00 rows=35360 width=50)
30-1	8289-8290	-	_	_	_	
30-2	8290-8291	-	_	_	_	
30-3	8291-8292	-	_	_	_	
30-4	8292-8293	-	_	_	_	
30-5	8293-8294	-	_	_	_	
30-6	8294-8295	-	_	_	_	
30-7	8295-8296	-	_	_	_	
30-8	8296-8297	-	_	_	_	
30-9	8297-8298	-	_	_	_	
30-10	8298-8299	-	_	_	_	
30-11	8299-8300	-	_	_	_	
30-12	8300-8301	-	_	_	_	
30-13	8301-8302	-	_	_	_	
30-14	8302-8303	-	_	_	_	
30-15	8303-8304	-	_	_	_	
30-16	8304-8305	-	_	_	_	
30-17	8305-8306	-	_	_	_	
30-18	8306-8307	-	_	_	_	
30-19	8307-8308	-	_	_	_	
30-20	8308-8309	-	_	_	_	
30-21	8309-8310	-	_	_	_	
30-22	8310-8311	-	_	_	_	
30-23	8311-8312	-	_	_	_	
30-24	8312-8313	-	_	_	_	
30-25	8313-8314	-	_	_	_	
30-26	8314-8315	-	_	_	_	
30-27	8315-8316	-	_	_	_	
30-28	8316-8317	-	_	_	_	
30-29	8317-8318	-	_	_	_	
30-30	8318-8319	-	_	_	_	
30-31	8319-8320	-	_	_	_	
30-32	8320-8321	-	_	_	_	
30-33	8321-8322	-	_	_	_	
30-34	8322-8323	-	_	_	_	
30-35	8323-8324	-	_	_	_	
30-36	8324-8325	-	_	_	_	
30-37	8325-8326	-	_	_	_	
30-38	8326-8327	-	_	_	_	
30-39	8327-8328	-	_	_	_	
30-40	8328-8329	-	_	_	_	
30-41	8329-8330	-	_	_	_	
30-42	8330-8331	-	_	_	_	
30-43	8331-8332	-	_	_	_	
30-44	8332-8333	-	_	_	_	
30-45	8333-8334	-	_	_	_	
30-46	8334-8335	-	_	_	_	
30-47	8335-8336	-	_	_	_	
30-48	8336-8337	-	_	_	_	
30-49	8337-8338	-	_	_	_	
30-50	8338-8339	-	_	_	_	
30-51	8339-8340	-	_	_	_	
30-52	8340-8341	-	_	_	_	
30-53	8341-8342	-	_	_	_	
30-54	8342-8343	-	_	_	_	
30-55	8343-8344	-	_	_	_	
30-56	8344-8345	-	_	_	_	
30-57	8345-8346	-	_	_	_	
30-58	8346-8347	-	_	_	_	
30-59	8347-8348	-	_	_	_	
30-60	8348-8349	-	_	_	_	
30-61	8349-8350	-	_	_	_	
30-62	8350-8351	-	_	_	_	
30-63	8351-8352	-	_	_	_	
30-64	8352-8353	-	_	_	_	
30-65	8353-8354	-	_	_	_	
30-66	8354-8355	-	_	_	_	
30-67	8355-8356	-	_	_	_	
30-68	8356-8357	-	_	_	_	
30-69	8357-8358	-	_	_	_	
30-70	8358-8359	-	_	_	_	
30-71	8359-8360	-	_	_	_	
30-72	8361-8364	Seq	_	_	_	
30-73	8365-8369	Scan	_	_	_	
30-74	8370-8372	on	_	_	_	
30-75	8373-8388	pgbench_history	_	_	_	
30-76	8389-8390	(	_	_	_	
30-77	8390-8394	cost	_	_	_	
30-78	8394-8395	=	_	_	_	
30-79	8395-8399	0.00	_	_	_	
30-80	8399-8400	.	_	_	_	
30-81	8400-8408	.2346.00	_	_	_	
30-82	8409-8413	rows	_	_	_	
30-83	8413-8414	=	_	_	_	
30-84	8414-8419	35360	_	_	_	
30-85	8420-8425	width	_	_	_	
30-86	8425-8426	=	_	_	_	
30-87	8426-8428	50	_	_	_	
30-88	8428-8429	)	_	_	_	

#Text=Filter: (aid < 100)In the example above, the database had gone through a fair amount of activity, and the statistics were inaccurate.  With an ANALYZE (not VACUUM ANALYZE or EXPLAIN ANALYZE, but just a plain ANALYZE), the statistics are fixed, and the query planner now chooses an Index Scan: postgres=# EXPLAIN SELECT * FROM pgbench_history WHERE aid < 100; QUERY PLAN
31-1	8430-8436	Filter	_	_	_	
31-2	8436-8437	:	_	_	_	
31-3	8438-8439	(	_	_	_	
31-4	8439-8442	aid	_	_	_	
31-5	8443-8444	<	_	_	_	
31-6	8445-8448	100	_	_	_	
31-7	8448-8449	)	_	_	_	
31-8	8449-8451	In	_	_	_	
31-9	8452-8455	the	_	_	_	
31-10	8456-8463	example	_	_	_	
31-11	8464-8469	above	_	_	_	
31-12	8469-8470	,	_	_	_	
31-13	8471-8474	the	_	_	_	
31-14	8475-8483	database	_	_	_	
31-15	8484-8487	had	_	_	_	
31-16	8488-8492	gone	_	_	_	
31-17	8493-8500	through	_	_	_	
31-18	8501-8502	a	_	_	_	
31-19	8503-8507	fair	_	_	_	
31-20	8508-8514	amount	_	_	_	
31-21	8515-8517	of	_	_	_	
31-22	8518-8526	activity	_	_	_	
31-23	8526-8527	,	_	_	_	
31-24	8528-8531	and	_	_	_	
31-25	8532-8535	the	_	_	_	
31-26	8536-8546	statistics	_	_	_	
31-27	8547-8551	were	_	_	_	
31-28	8552-8562	inaccurate	_	_	_	
31-29	8562-8563	.	_	_	_	
31-30	8564-8565	 	_	_	_	
31-31	8565-8569	With	_	_	_	
31-32	8570-8572	an	_	_	_	
31-33	8573-8580	ANALYZE	_	_	_	
31-34	8581-8582	(	_	_	_	
31-35	8582-8585	not	_	_	_	
31-36	8586-8592	VACUUM	_	_	_	
31-37	8593-8600	ANALYZE	_	_	_	
31-38	8601-8603	or	_	_	_	
31-39	8604-8611	EXPLAIN	_	_	_	
31-40	8612-8619	ANALYZE	_	_	_	
31-41	8619-8620	,	_	_	_	
31-42	8621-8624	but	_	_	_	
31-43	8625-8629	just	_	_	_	
31-44	8630-8631	a	_	_	_	
31-45	8632-8637	plain	_	_	_	
31-46	8638-8645	ANALYZE	_	_	_	
31-47	8645-8646	)	_	_	_	
31-48	8646-8647	,	_	_	_	
31-49	8648-8651	the	_	_	_	
31-50	8652-8662	statistics	_	_	_	
31-51	8663-8666	are	_	_	_	
31-52	8667-8672	fixed	_	_	_	
31-53	8672-8673	,	_	_	_	
31-54	8674-8677	and	_	_	_	
31-55	8678-8681	the	_	_	_	
31-56	8682-8687	query	_	_	_	
31-57	8688-8695	planner	_	_	_	
31-58	8696-8699	now	_	_	_	
31-59	8700-8707	chooses	_	_	_	
31-60	8708-8710	an	_	_	_	
31-61	8711-8716	Index	_	_	_	
31-62	8717-8721	Scan	_	_	_	
31-63	8721-8722	:	_	_	_	
31-64	8723-8731	postgres	_	_	_	
31-65	8731-8732	=	_	_	_	
31-66	8732-8733	#	_	_	_	
31-67	8734-8741	EXPLAIN	_	_	_	
31-68	8742-8748	SELECT	_	_	_	
31-69	8749-8750	*	_	_	_	
31-70	8751-8755	FROM	_	_	_	
31-71	8756-8771	pgbench_history	_	_	_	
31-72	8772-8777	WHERE	_	_	_	
31-73	8778-8781	aid	_	_	_	
31-74	8782-8783	<	_	_	_	
31-75	8784-8787	100	_	_	_	
31-76	8787-8788	;	_	_	_	
31-77	8789-8794	QUERY	_	_	_	
31-78	8795-8799	PLAN	_	_	_	

#Text=---------------------------------------------------------------------- Index Scan using foo on pgbench_history (cost=0.42..579.09 rows=153 width=50) Index Cond: (aid < 100) How Does EXPLAIN ANALYZE Help?
32-1	8800-8801	-	_	_	_	
32-2	8801-8802	-	_	_	_	
32-3	8802-8803	-	_	_	_	
32-4	8803-8804	-	_	_	_	
32-5	8804-8805	-	_	_	_	
32-6	8805-8806	-	_	_	_	
32-7	8806-8807	-	_	_	_	
32-8	8807-8808	-	_	_	_	
32-9	8808-8809	-	_	_	_	
32-10	8809-8810	-	_	_	_	
32-11	8810-8811	-	_	_	_	
32-12	8811-8812	-	_	_	_	
32-13	8812-8813	-	_	_	_	
32-14	8813-8814	-	_	_	_	
32-15	8814-8815	-	_	_	_	
32-16	8815-8816	-	_	_	_	
32-17	8816-8817	-	_	_	_	
32-18	8817-8818	-	_	_	_	
32-19	8818-8819	-	_	_	_	
32-20	8819-8820	-	_	_	_	
32-21	8820-8821	-	_	_	_	
32-22	8821-8822	-	_	_	_	
32-23	8822-8823	-	_	_	_	
32-24	8823-8824	-	_	_	_	
32-25	8824-8825	-	_	_	_	
32-26	8825-8826	-	_	_	_	
32-27	8826-8827	-	_	_	_	
32-28	8827-8828	-	_	_	_	
32-29	8828-8829	-	_	_	_	
32-30	8829-8830	-	_	_	_	
32-31	8830-8831	-	_	_	_	
32-32	8831-8832	-	_	_	_	
32-33	8832-8833	-	_	_	_	
32-34	8833-8834	-	_	_	_	
32-35	8834-8835	-	_	_	_	
32-36	8835-8836	-	_	_	_	
32-37	8836-8837	-	_	_	_	
32-38	8837-8838	-	_	_	_	
32-39	8838-8839	-	_	_	_	
32-40	8839-8840	-	_	_	_	
32-41	8840-8841	-	_	_	_	
32-42	8841-8842	-	_	_	_	
32-43	8842-8843	-	_	_	_	
32-44	8843-8844	-	_	_	_	
32-45	8844-8845	-	_	_	_	
32-46	8845-8846	-	_	_	_	
32-47	8846-8847	-	_	_	_	
32-48	8847-8848	-	_	_	_	
32-49	8848-8849	-	_	_	_	
32-50	8849-8850	-	_	_	_	
32-51	8850-8851	-	_	_	_	
32-52	8851-8852	-	_	_	_	
32-53	8852-8853	-	_	_	_	
32-54	8853-8854	-	_	_	_	
32-55	8854-8855	-	_	_	_	
32-56	8855-8856	-	_	_	_	
32-57	8856-8857	-	_	_	_	
32-58	8857-8858	-	_	_	_	
32-59	8858-8859	-	_	_	_	
32-60	8859-8860	-	_	_	_	
32-61	8860-8861	-	_	_	_	
32-62	8861-8862	-	_	_	_	
32-63	8862-8863	-	_	_	_	
32-64	8863-8864	-	_	_	_	
32-65	8864-8865	-	_	_	_	
32-66	8865-8866	-	_	_	_	
32-67	8866-8867	-	_	_	_	
32-68	8867-8868	-	_	_	_	
32-69	8868-8869	-	_	_	_	
32-70	8869-8870	-	_	_	_	
32-71	8871-8876	Index	_	_	_	
32-72	8877-8881	Scan	_	_	_	
32-73	8882-8887	using	_	_	_	
32-74	8888-8891	foo	_	_	_	
32-75	8892-8894	on	_	_	_	
32-76	8895-8910	pgbench_history	_	_	_	
32-77	8911-8912	(	_	_	_	
32-78	8912-8916	cost	_	_	_	
32-79	8916-8917	=	_	_	_	
32-80	8917-8921	0.42	_	_	_	
32-81	8921-8922	.	_	_	_	
32-82	8922-8929	.579.09	_	_	_	
32-83	8930-8934	rows	_	_	_	
32-84	8934-8935	=	_	_	_	
32-85	8935-8938	153	_	_	_	
32-86	8939-8944	width	_	_	_	
32-87	8944-8945	=	_	_	_	
32-88	8945-8947	50	_	_	_	
32-89	8947-8948	)	_	_	_	
32-90	8949-8954	Index	_	_	_	
32-91	8955-8959	Cond	_	_	_	
32-92	8959-8960	:	_	_	_	
32-93	8961-8962	(	_	_	_	
32-94	8962-8965	aid	_	_	_	
32-95	8966-8967	<	_	_	_	
32-96	8968-8971	100	_	_	_	
32-97	8971-8972	)	_	_	_	
32-98	8973-8976	How	_	_	_	
32-99	8977-8981	Does	_	_	_	
32-100	8982-8989	EXPLAIN	_	_	_	
32-101	8990-8997	ANALYZE	_	_	_	
32-102	8998-9002	Help	_	_	_	
32-103	9002-9003	?	_	_	_	

#Text=When an EXPLAIN is prepended to a query, the query plan gets printed, but the query does not get run.  We won’t know whether the statistics stored in the database were correct or not, and we won’t know if some operations required expensive I/O instead of fully running in memory.  When used with ANALYZE, the query is actually run and the query plan, along with some under-the-hood activity is printed out. If we look at the first query above and run EXPLAIN ANALYZE instead of a plain EXPLAIN, we get:
33-1	9004-9008	When	_	_	_	
33-2	9009-9011	an	_	_	_	
33-3	9012-9019	EXPLAIN	_	_	_	
33-4	9020-9022	is	_	_	_	
33-5	9023-9032	prepended	_	_	_	
33-6	9033-9035	to	_	_	_	
33-7	9036-9037	a	_	_	_	
33-8	9038-9043	query	_	_	_	
33-9	9043-9044	,	_	_	_	
33-10	9045-9048	the	_	_	_	
33-11	9049-9054	query	_	_	_	
33-12	9055-9059	plan	_	_	_	
33-13	9060-9064	gets	_	_	_	
33-14	9065-9072	printed	_	_	_	
33-15	9072-9073	,	_	_	_	
33-16	9074-9077	but	_	_	_	
33-17	9078-9081	the	_	_	_	
33-18	9082-9087	query	_	_	_	
33-19	9088-9092	does	_	_	_	
33-20	9093-9096	not	_	_	_	
33-21	9097-9100	get	_	_	_	
33-22	9101-9104	run	_	_	_	
33-23	9104-9105	.	_	_	_	
33-24	9106-9107	 	_	_	_	
33-25	9107-9109	We	_	_	_	
33-26	9110-9113	won	_	_	_	
33-27	9113-9114	’	_	_	_	
33-28	9114-9115	t	_	_	_	
33-29	9116-9120	know	_	_	_	
33-30	9121-9128	whether	_	_	_	
33-31	9129-9132	the	_	_	_	
33-32	9133-9143	statistics	_	_	_	
33-33	9144-9150	stored	_	_	_	
33-34	9151-9153	in	_	_	_	
33-35	9154-9157	the	_	_	_	
33-36	9158-9166	database	_	_	_	
33-37	9167-9171	were	_	_	_	
33-38	9172-9179	correct	_	_	_	
33-39	9180-9182	or	_	_	_	
33-40	9183-9186	not	_	_	_	
33-41	9186-9187	,	_	_	_	
33-42	9188-9191	and	_	_	_	
33-43	9192-9194	we	_	_	_	
33-44	9195-9198	won	_	_	_	
33-45	9198-9199	’	_	_	_	
33-46	9199-9200	t	_	_	_	
33-47	9201-9205	know	_	_	_	
33-48	9206-9208	if	_	_	_	
33-49	9209-9213	some	_	_	_	
33-50	9214-9224	operations	_	_	_	
33-51	9225-9233	required	_	_	_	
33-52	9234-9243	expensive	_	_	_	
33-53	9244-9245	I	_	_	_	
33-54	9245-9246	/	_	_	_	
33-55	9246-9247	O	_	_	_	
33-56	9248-9255	instead	_	_	_	
33-57	9256-9258	of	_	_	_	
33-58	9259-9264	fully	_	_	_	
33-59	9265-9272	running	_	_	_	
33-60	9273-9275	in	_	_	_	
33-61	9276-9282	memory	_	_	_	
33-62	9282-9283	.	_	_	_	
33-63	9284-9285	 	_	_	_	
33-64	9285-9289	When	_	_	_	
33-65	9290-9294	used	_	_	_	
33-66	9295-9299	with	_	_	_	
33-67	9300-9307	ANALYZE	_	_	_	
33-68	9307-9308	,	_	_	_	
33-69	9309-9312	the	_	_	_	
33-70	9313-9318	query	_	_	_	
33-71	9319-9321	is	_	_	_	
33-72	9322-9330	actually	_	_	_	
33-73	9331-9334	run	_	_	_	
33-74	9335-9338	and	_	_	_	
33-75	9339-9342	the	_	_	_	
33-76	9343-9348	query	_	_	_	
33-77	9349-9353	plan	_	_	_	
33-78	9353-9354	,	_	_	_	
33-79	9355-9360	along	_	_	_	
33-80	9361-9365	with	_	_	_	
33-81	9366-9370	some	_	_	_	
33-82	9371-9385	under-the-hood	_	_	_	
33-83	9386-9394	activity	_	_	_	
33-84	9395-9397	is	_	_	_	
33-85	9398-9405	printed	_	_	_	
33-86	9406-9409	out	_	_	_	
33-87	9409-9410	.	_	_	_	
33-88	9411-9413	If	_	_	_	
33-89	9414-9416	we	_	_	_	
33-90	9417-9421	look	_	_	_	
33-91	9422-9424	at	_	_	_	
33-92	9425-9428	the	_	_	_	
33-93	9429-9434	first	_	_	_	
33-94	9435-9440	query	_	_	_	
33-95	9441-9446	above	_	_	_	
33-96	9447-9450	and	_	_	_	
33-97	9451-9454	run	_	_	_	
33-98	9455-9462	EXPLAIN	_	_	_	
33-99	9463-9470	ANALYZE	_	_	_	
33-100	9471-9478	instead	_	_	_	
33-101	9479-9481	of	_	_	_	
33-102	9482-9483	a	_	_	_	
33-103	9484-9489	plain	_	_	_	
33-104	9490-9497	EXPLAIN	_	_	_	
33-105	9497-9498	,	_	_	_	
33-106	9499-9501	we	_	_	_	
33-107	9502-9505	get	_	_	_	
33-108	9505-9506	:	_	_	_	

#Text=postgres=# EXPLAIN ANALYZE SELECT * FROM pgbench_accounts a JOIN pgbench_branches b ON (a.bid=b.bid) WHERE a.aid < 100000; QUERY PLAN
34-1	9507-9515	postgres	_	_	_	
34-2	9515-9516	=	_	_	_	
34-3	9516-9517	#	_	_	_	
34-4	9518-9525	EXPLAIN	_	_	_	
34-5	9526-9533	ANALYZE	_	_	_	
34-6	9534-9540	SELECT	_	_	_	
34-7	9541-9542	*	_	_	_	
34-8	9543-9547	FROM	_	_	_	
34-9	9548-9564	pgbench_accounts	_	_	_	
34-10	9565-9566	a	_	_	_	
34-11	9567-9571	JOIN	_	_	_	
34-12	9572-9588	pgbench_branches	_	_	_	
34-13	9589-9590	b	_	_	_	
34-14	9591-9593	ON	_	_	_	
34-15	9594-9595	(	_	_	_	
34-16	9595-9600	a.bid	_	_	_	
34-17	9600-9601	=	_	_	_	
34-18	9601-9606	b.bid	_	_	_	
34-19	9606-9607	)	_	_	_	
34-20	9608-9613	WHERE	_	_	_	
34-21	9614-9619	a.aid	_	_	_	
34-22	9620-9621	<	_	_	_	
34-23	9622-9628	100000	_	_	_	
34-24	9628-9629	;	_	_	_	
34-25	9630-9635	QUERY	_	_	_	
34-26	9636-9640	PLAN	_	_	_	

#Text=------------------------------------------------------------------------------------------------------------- Nested Loop (cost=0.00..4141.00 rows=99999 width=461) (actual time=0.039..56.582 rows=99999 loops=1) Join Filter: (a.bid = b.bid)
35-1	9641-9642	-	_	_	_	
35-2	9642-9643	-	_	_	_	
35-3	9643-9644	-	_	_	_	
35-4	9644-9645	-	_	_	_	
35-5	9645-9646	-	_	_	_	
35-6	9646-9647	-	_	_	_	
35-7	9647-9648	-	_	_	_	
35-8	9648-9649	-	_	_	_	
35-9	9649-9650	-	_	_	_	
35-10	9650-9651	-	_	_	_	
35-11	9651-9652	-	_	_	_	
35-12	9652-9653	-	_	_	_	
35-13	9653-9654	-	_	_	_	
35-14	9654-9655	-	_	_	_	
35-15	9655-9656	-	_	_	_	
35-16	9656-9657	-	_	_	_	
35-17	9657-9658	-	_	_	_	
35-18	9658-9659	-	_	_	_	
35-19	9659-9660	-	_	_	_	
35-20	9660-9661	-	_	_	_	
35-21	9661-9662	-	_	_	_	
35-22	9662-9663	-	_	_	_	
35-23	9663-9664	-	_	_	_	
35-24	9664-9665	-	_	_	_	
35-25	9665-9666	-	_	_	_	
35-26	9666-9667	-	_	_	_	
35-27	9667-9668	-	_	_	_	
35-28	9668-9669	-	_	_	_	
35-29	9669-9670	-	_	_	_	
35-30	9670-9671	-	_	_	_	
35-31	9671-9672	-	_	_	_	
35-32	9672-9673	-	_	_	_	
35-33	9673-9674	-	_	_	_	
35-34	9674-9675	-	_	_	_	
35-35	9675-9676	-	_	_	_	
35-36	9676-9677	-	_	_	_	
35-37	9677-9678	-	_	_	_	
35-38	9678-9679	-	_	_	_	
35-39	9679-9680	-	_	_	_	
35-40	9680-9681	-	_	_	_	
35-41	9681-9682	-	_	_	_	
35-42	9682-9683	-	_	_	_	
35-43	9683-9684	-	_	_	_	
35-44	9684-9685	-	_	_	_	
35-45	9685-9686	-	_	_	_	
35-46	9686-9687	-	_	_	_	
35-47	9687-9688	-	_	_	_	
35-48	9688-9689	-	_	_	_	
35-49	9689-9690	-	_	_	_	
35-50	9690-9691	-	_	_	_	
35-51	9691-9692	-	_	_	_	
35-52	9692-9693	-	_	_	_	
35-53	9693-9694	-	_	_	_	
35-54	9694-9695	-	_	_	_	
35-55	9695-9696	-	_	_	_	
35-56	9696-9697	-	_	_	_	
35-57	9697-9698	-	_	_	_	
35-58	9698-9699	-	_	_	_	
35-59	9699-9700	-	_	_	_	
35-60	9700-9701	-	_	_	_	
35-61	9701-9702	-	_	_	_	
35-62	9702-9703	-	_	_	_	
35-63	9703-9704	-	_	_	_	
35-64	9704-9705	-	_	_	_	
35-65	9705-9706	-	_	_	_	
35-66	9706-9707	-	_	_	_	
35-67	9707-9708	-	_	_	_	
35-68	9708-9709	-	_	_	_	
35-69	9709-9710	-	_	_	_	
35-70	9710-9711	-	_	_	_	
35-71	9711-9712	-	_	_	_	
35-72	9712-9713	-	_	_	_	
35-73	9713-9714	-	_	_	_	
35-74	9714-9715	-	_	_	_	
35-75	9715-9716	-	_	_	_	
35-76	9716-9717	-	_	_	_	
35-77	9717-9718	-	_	_	_	
35-78	9718-9719	-	_	_	_	
35-79	9719-9720	-	_	_	_	
35-80	9720-9721	-	_	_	_	
35-81	9721-9722	-	_	_	_	
35-82	9722-9723	-	_	_	_	
35-83	9723-9724	-	_	_	_	
35-84	9724-9725	-	_	_	_	
35-85	9725-9726	-	_	_	_	
35-86	9726-9727	-	_	_	_	
35-87	9727-9728	-	_	_	_	
35-88	9728-9729	-	_	_	_	
35-89	9729-9730	-	_	_	_	
35-90	9730-9731	-	_	_	_	
35-91	9731-9732	-	_	_	_	
35-92	9732-9733	-	_	_	_	
35-93	9733-9734	-	_	_	_	
35-94	9734-9735	-	_	_	_	
35-95	9735-9736	-	_	_	_	
35-96	9736-9737	-	_	_	_	
35-97	9737-9738	-	_	_	_	
35-98	9738-9739	-	_	_	_	
35-99	9739-9740	-	_	_	_	
35-100	9740-9741	-	_	_	_	
35-101	9741-9742	-	_	_	_	
35-102	9742-9743	-	_	_	_	
35-103	9743-9744	-	_	_	_	
35-104	9744-9745	-	_	_	_	
35-105	9745-9746	-	_	_	_	
35-106	9746-9747	-	_	_	_	
35-107	9747-9748	-	_	_	_	
35-108	9748-9749	-	_	_	_	
35-109	9749-9750	-	_	_	_	
35-110	9751-9757	Nested	_	_	_	
35-111	9758-9762	Loop	_	_	_	
35-112	9763-9764	(	_	_	_	
35-113	9764-9768	cost	_	_	_	
35-114	9768-9769	=	_	_	_	
35-115	9769-9773	0.00	_	_	_	
35-116	9773-9774	.	_	_	_	
35-117	9774-9782	.4141.00	_	_	_	
35-118	9783-9787	rows	_	_	_	
35-119	9787-9788	=	_	_	_	
35-120	9788-9793	99999	_	_	_	
35-121	9794-9799	width	_	_	_	
35-122	9799-9800	=	_	_	_	
35-123	9800-9803	461	_	_	_	
35-124	9803-9804	)	_	_	_	
35-125	9805-9806	(	_	_	_	
35-126	9806-9812	actual	_	_	_	
35-127	9813-9817	time	_	_	_	
35-128	9817-9818	=	_	_	_	
35-129	9818-9823	0.039	_	_	_	
35-130	9823-9824	.	_	_	_	
35-131	9824-9831	.56.582	_	_	_	
35-132	9832-9836	rows	_	_	_	
35-133	9836-9837	=	_	_	_	
35-134	9837-9842	99999	_	_	_	
35-135	9843-9848	loops	_	_	_	
35-136	9848-9849	=	_	_	_	
35-137	9849-9850	1	_	_	_	
35-138	9850-9851	)	_	_	_	
35-139	9852-9856	Join	_	_	_	
35-140	9857-9863	Filter	_	_	_	
35-141	9863-9864	:	_	_	_	
35-142	9865-9866	(	_	_	_	
35-143	9866-9871	a.bid	_	_	_	
35-144	9872-9873	=	_	_	_	
35-145	9874-9879	b.bid	_	_	_	
35-146	9879-9880	)	_	_	_	

#Text=Seq Scan on pgbench_branches b (cost=0.00..1.01 rows=1 width=364) (actual time=0.025..0.026 rows=1 loops=1) Seq Scan on pgbench_accounts a
36-1	9881-9884	Seq	_	_	_	
36-2	9885-9889	Scan	_	_	_	
36-3	9890-9892	on	_	_	_	
36-4	9893-9909	pgbench_branches	_	_	_	
36-5	9910-9911	b	_	_	_	
36-6	9912-9913	(	_	_	_	
36-7	9913-9917	cost	_	_	_	
36-8	9917-9918	=	_	_	_	
36-9	9918-9922	0.00	_	_	_	
36-10	9922-9923	.	_	_	_	
36-11	9923-9928	.1.01	_	_	_	
36-12	9929-9933	rows	_	_	_	
36-13	9933-9934	=	_	_	_	
36-14	9934-9935	1	_	_	_	
36-15	9936-9941	width	_	_	_	
36-16	9941-9942	=	_	_	_	
36-17	9942-9945	364	_	_	_	
36-18	9945-9946	)	_	_	_	
36-19	9947-9948	(	_	_	_	
36-20	9948-9954	actual	_	_	_	
36-21	9955-9959	time	_	_	_	
36-22	9959-9960	=	_	_	_	
36-23	9960-9965	0.025	_	_	_	
36-24	9965-9966	.	_	_	_	
36-25	9966-9972	.0.026	_	_	_	
36-26	9973-9977	rows	_	_	_	
36-27	9977-9978	=	_	_	_	
36-28	9978-9979	1	_	_	_	
36-29	9980-9985	loops	_	_	_	
36-30	9985-9986	=	_	_	_	
36-31	9986-9987	1	_	_	_	
36-32	9987-9988	)	_	_	_	
36-33	9989-9992	Seq	_	_	_	
36-34	9993-9997	Scan	_	_	_	
36-35	9998-10000	on	_	_	_	
36-36	10001-10017	pgbench_accounts	_	_	_	
36-37	10018-10019	a	_	_	_	

#Text=(cost=0.00..2890.00 rows=99999 width=97) (actual time=0.008..25.752 rows=99999 loops=1) Filter: (aid < 100000) Rows Removed by Filter: 1 Planning Time: 0.306 ms Execution Time: 61.031 ms
37-1	10020-10021	(	_	_	_	
37-2	10021-10025	cost	_	_	_	
37-3	10025-10026	=	_	_	_	
37-4	10026-10030	0.00	_	_	_	
37-5	10030-10031	.	_	_	_	
37-6	10031-10039	.2890.00	_	_	_	
37-7	10040-10044	rows	_	_	_	
37-8	10044-10045	=	_	_	_	
37-9	10045-10050	99999	_	_	_	
37-10	10051-10056	width	_	_	_	
37-11	10056-10057	=	_	_	_	
37-12	10057-10059	97	_	_	_	
37-13	10059-10060	)	_	_	_	
37-14	10061-10062	(	_	_	_	
37-15	10062-10068	actual	_	_	_	
37-16	10069-10073	time	_	_	_	
37-17	10073-10074	=	_	_	_	
37-18	10074-10079	0.008	_	_	_	
37-19	10079-10080	.	_	_	_	
37-20	10080-10087	.25.752	_	_	_	
37-21	10088-10092	rows	_	_	_	
37-22	10092-10093	=	_	_	_	
37-23	10093-10098	99999	_	_	_	
37-24	10099-10104	loops	_	_	_	
37-25	10104-10105	=	_	_	_	
37-26	10105-10106	1	_	_	_	
37-27	10106-10107	)	_	_	_	
37-28	10108-10114	Filter	_	_	_	
37-29	10114-10115	:	_	_	_	
37-30	10116-10117	(	_	_	_	
37-31	10117-10120	aid	_	_	_	
37-32	10121-10122	<	_	_	_	
37-33	10123-10129	100000	_	_	_	
37-34	10129-10130	)	_	_	_	
37-35	10131-10135	Rows	_	_	_	
37-36	10136-10143	Removed	_	_	_	
37-37	10144-10146	by	_	_	_	
37-38	10147-10153	Filter	_	_	_	
37-39	10153-10154	:	_	_	_	
37-40	10155-10156	1	_	_	_	
37-41	10157-10165	Planning	_	_	_	
37-42	10166-10170	Time	_	_	_	
37-43	10170-10171	:	_	_	_	
37-44	10172-10177	0.306	_	_	_	
37-45	10178-10180	ms	_	_	_	
37-46	10181-10190	Execution	_	_	_	
37-47	10191-10195	Time	_	_	_	
37-48	10195-10196	:	_	_	_	
37-49	10197-10203	61.031	_	_	_	
37-50	10204-10206	ms	_	_	_	

#Text=(8 rows)You’ll notice here that there’s more information -- actual time and rows, as well as planning and execution times.  If we add BUFFERS, like EXPLAIN (ANALYZE, BUFFERS), we’ll even get cache hit/miss statistics in the output: postgres=# EXPLAIN (BUFFERS, ANALYZE) SELECT * FROM pgbench_accounts a JOIN pgbench_branches b ON (a.bid=b.bid) WHERE a.aid < 100000;
38-1	10207-10208	(	_	_	_	
38-2	10208-10209	8	_	_	_	
38-3	10210-10214	rows	_	_	_	
38-4	10214-10215	)	_	_	_	
38-5	10215-10218	You	_	_	_	
38-6	10218-10219	’	_	_	_	
38-7	10219-10221	ll	_	_	_	
38-8	10222-10228	notice	_	_	_	
38-9	10229-10233	here	_	_	_	
38-10	10234-10238	that	_	_	_	
38-11	10239-10244	there	_	_	_	
38-12	10244-10245	’	_	_	_	
38-13	10245-10246	s	_	_	_	
38-14	10247-10251	more	_	_	_	
38-15	10252-10263	information	_	_	_	
38-16	10264-10265	-	_	_	_	
38-17	10265-10266	-	_	_	_	
38-18	10267-10273	actual	_	_	_	
38-19	10274-10278	time	_	_	_	
38-20	10279-10282	and	_	_	_	
38-21	10283-10287	rows	_	_	_	
38-22	10287-10288	,	_	_	_	
38-23	10289-10291	as	_	_	_	
38-24	10292-10296	well	_	_	_	
38-25	10297-10299	as	_	_	_	
38-26	10300-10308	planning	_	_	_	
38-27	10309-10312	and	_	_	_	
38-28	10313-10322	execution	_	_	_	
38-29	10323-10328	times	_	_	_	
38-30	10328-10329	.	_	_	_	
38-31	10330-10331	 	_	_	_	
38-32	10331-10333	If	_	_	_	
38-33	10334-10336	we	_	_	_	
38-34	10337-10340	add	_	_	_	
38-35	10341-10348	BUFFERS	_	_	_	
38-36	10348-10349	,	_	_	_	
38-37	10350-10354	like	_	_	_	
38-38	10355-10362	EXPLAIN	_	_	_	
38-39	10363-10364	(	_	_	_	
38-40	10364-10371	ANALYZE	_	_	_	
38-41	10371-10372	,	_	_	_	
38-42	10373-10380	BUFFERS	_	_	_	
38-43	10380-10381	)	_	_	_	
38-44	10381-10382	,	_	_	_	
38-45	10383-10385	we	_	_	_	
38-46	10385-10386	’	_	_	_	
38-47	10386-10388	ll	_	_	_	
38-48	10389-10393	even	_	_	_	
38-49	10394-10397	get	_	_	_	
38-50	10398-10403	cache	_	_	_	
38-51	10404-10407	hit	_	_	_	
38-52	10407-10408	/	_	_	_	
38-53	10408-10412	miss	_	_	_	
38-54	10413-10423	statistics	_	_	_	
38-55	10424-10426	in	_	_	_	
38-56	10427-10430	the	_	_	_	
38-57	10431-10437	output	_	_	_	
38-58	10437-10438	:	_	_	_	
38-59	10439-10447	postgres	_	_	_	
38-60	10447-10448	=	_	_	_	
38-61	10448-10449	#	_	_	_	
38-62	10450-10457	EXPLAIN	_	_	_	
38-63	10458-10459	(	_	_	_	
38-64	10459-10466	BUFFERS	_	_	_	
38-65	10466-10467	,	_	_	_	
38-66	10468-10475	ANALYZE	_	_	_	
38-67	10475-10476	)	_	_	_	
38-68	10477-10483	SELECT	_	_	_	
38-69	10484-10485	*	_	_	_	
38-70	10486-10490	FROM	_	_	_	
38-71	10491-10507	pgbench_accounts	_	_	_	
38-72	10508-10509	a	_	_	_	
38-73	10510-10514	JOIN	_	_	_	
38-74	10515-10531	pgbench_branches	_	_	_	
38-75	10532-10533	b	_	_	_	
38-76	10534-10536	ON	_	_	_	
38-77	10537-10538	(	_	_	_	
38-78	10538-10543	a.bid	_	_	_	
38-79	10543-10544	=	_	_	_	
38-80	10544-10549	b.bid	_	_	_	
38-81	10549-10550	)	_	_	_	
38-82	10551-10556	WHERE	_	_	_	
38-83	10557-10562	a.aid	_	_	_	
38-84	10563-10564	<	_	_	_	
38-85	10565-10571	100000	_	_	_	
38-86	10571-10572	;	_	_	_	

#Text=QUERY PLAN -------------------------------------------------------------------------------------------------------------
39-1	10573-10578	QUERY	_	_	_	
39-2	10579-10583	PLAN	_	_	_	
39-3	10584-10585	-	_	_	_	
39-4	10585-10586	-	_	_	_	
39-5	10586-10587	-	_	_	_	
39-6	10587-10588	-	_	_	_	
39-7	10588-10589	-	_	_	_	
39-8	10589-10590	-	_	_	_	
39-9	10590-10591	-	_	_	_	
39-10	10591-10592	-	_	_	_	
39-11	10592-10593	-	_	_	_	
39-12	10593-10594	-	_	_	_	
39-13	10594-10595	-	_	_	_	
39-14	10595-10596	-	_	_	_	
39-15	10596-10597	-	_	_	_	
39-16	10597-10598	-	_	_	_	
39-17	10598-10599	-	_	_	_	
39-18	10599-10600	-	_	_	_	
39-19	10600-10601	-	_	_	_	
39-20	10601-10602	-	_	_	_	
39-21	10602-10603	-	_	_	_	
39-22	10603-10604	-	_	_	_	
39-23	10604-10605	-	_	_	_	
39-24	10605-10606	-	_	_	_	
39-25	10606-10607	-	_	_	_	
39-26	10607-10608	-	_	_	_	
39-27	10608-10609	-	_	_	_	
39-28	10609-10610	-	_	_	_	
39-29	10610-10611	-	_	_	_	
39-30	10611-10612	-	_	_	_	
39-31	10612-10613	-	_	_	_	
39-32	10613-10614	-	_	_	_	
39-33	10614-10615	-	_	_	_	
39-34	10615-10616	-	_	_	_	
39-35	10616-10617	-	_	_	_	
39-36	10617-10618	-	_	_	_	
39-37	10618-10619	-	_	_	_	
39-38	10619-10620	-	_	_	_	
39-39	10620-10621	-	_	_	_	
39-40	10621-10622	-	_	_	_	
39-41	10622-10623	-	_	_	_	
39-42	10623-10624	-	_	_	_	
39-43	10624-10625	-	_	_	_	
39-44	10625-10626	-	_	_	_	
39-45	10626-10627	-	_	_	_	
39-46	10627-10628	-	_	_	_	
39-47	10628-10629	-	_	_	_	
39-48	10629-10630	-	_	_	_	
39-49	10630-10631	-	_	_	_	
39-50	10631-10632	-	_	_	_	
39-51	10632-10633	-	_	_	_	
39-52	10633-10634	-	_	_	_	
39-53	10634-10635	-	_	_	_	
39-54	10635-10636	-	_	_	_	
39-55	10636-10637	-	_	_	_	
39-56	10637-10638	-	_	_	_	
39-57	10638-10639	-	_	_	_	
39-58	10639-10640	-	_	_	_	
39-59	10640-10641	-	_	_	_	
39-60	10641-10642	-	_	_	_	
39-61	10642-10643	-	_	_	_	
39-62	10643-10644	-	_	_	_	
39-63	10644-10645	-	_	_	_	
39-64	10645-10646	-	_	_	_	
39-65	10646-10647	-	_	_	_	
39-66	10647-10648	-	_	_	_	
39-67	10648-10649	-	_	_	_	
39-68	10649-10650	-	_	_	_	
39-69	10650-10651	-	_	_	_	
39-70	10651-10652	-	_	_	_	
39-71	10652-10653	-	_	_	_	
39-72	10653-10654	-	_	_	_	
39-73	10654-10655	-	_	_	_	
39-74	10655-10656	-	_	_	_	
39-75	10656-10657	-	_	_	_	
39-76	10657-10658	-	_	_	_	
39-77	10658-10659	-	_	_	_	
39-78	10659-10660	-	_	_	_	
39-79	10660-10661	-	_	_	_	
39-80	10661-10662	-	_	_	_	
39-81	10662-10663	-	_	_	_	
39-82	10663-10664	-	_	_	_	
39-83	10664-10665	-	_	_	_	
39-84	10665-10666	-	_	_	_	
39-85	10666-10667	-	_	_	_	
39-86	10667-10668	-	_	_	_	
39-87	10668-10669	-	_	_	_	
39-88	10669-10670	-	_	_	_	
39-89	10670-10671	-	_	_	_	
39-90	10671-10672	-	_	_	_	
39-91	10672-10673	-	_	_	_	
39-92	10673-10674	-	_	_	_	
39-93	10674-10675	-	_	_	_	
39-94	10675-10676	-	_	_	_	
39-95	10676-10677	-	_	_	_	
39-96	10677-10678	-	_	_	_	
39-97	10678-10679	-	_	_	_	
39-98	10679-10680	-	_	_	_	
39-99	10680-10681	-	_	_	_	
39-100	10681-10682	-	_	_	_	
39-101	10682-10683	-	_	_	_	
39-102	10683-10684	-	_	_	_	
39-103	10684-10685	-	_	_	_	
39-104	10685-10686	-	_	_	_	
39-105	10686-10687	-	_	_	_	
39-106	10687-10688	-	_	_	_	
39-107	10688-10689	-	_	_	_	
39-108	10689-10690	-	_	_	_	
39-109	10690-10691	-	_	_	_	
39-110	10691-10692	-	_	_	_	
39-111	10692-10693	-	_	_	_	

#Text=Nested Loop (cost=0.00..4141.00 rows=99999 width=461) (actual time=0.039..56.582 rows=99999 loops=1) Join Filter: (a.bid = b.bid)
40-1	10694-10700	Nested	_	_	_	
40-2	10701-10705	Loop	_	_	_	
40-3	10706-10707	(	_	_	_	
40-4	10707-10711	cost	_	_	_	
40-5	10711-10712	=	_	_	_	
40-6	10712-10716	0.00	_	_	_	
40-7	10716-10717	.	_	_	_	
40-8	10717-10725	.4141.00	_	_	_	
40-9	10726-10730	rows	_	_	_	
40-10	10730-10731	=	_	_	_	
40-11	10731-10736	99999	_	_	_	
40-12	10737-10742	width	_	_	_	
40-13	10742-10743	=	_	_	_	
40-14	10743-10746	461	_	_	_	
40-15	10746-10747	)	_	_	_	
40-16	10748-10749	(	_	_	_	
40-17	10749-10755	actual	_	_	_	
40-18	10756-10760	time	_	_	_	
40-19	10760-10761	=	_	_	_	
40-20	10761-10766	0.039	_	_	_	
40-21	10766-10767	.	_	_	_	
40-22	10767-10774	.56.582	_	_	_	
40-23	10775-10779	rows	_	_	_	
40-24	10779-10780	=	_	_	_	
40-25	10780-10785	99999	_	_	_	
40-26	10786-10791	loops	_	_	_	
40-27	10791-10792	=	_	_	_	
40-28	10792-10793	1	_	_	_	
40-29	10793-10794	)	_	_	_	
40-30	10795-10799	Join	_	_	_	
40-31	10800-10806	Filter	_	_	_	
40-32	10806-10807	:	_	_	_	
40-33	10808-10809	(	_	_	_	
40-34	10809-10814	a.bid	_	_	_	
40-35	10815-10816	=	_	_	_	
40-36	10817-10822	b.bid	_	_	_	
40-37	10822-10823	)	_	_	_	

#Text=Buffers: shared hit=3 read=1638 Seq Scan on pgbench_branches b (cost=0.00..1.01 rows=1 width=364) (actual time=0.025..0.026 rows=1 loops=1) Buffers: shared hit=1
41-1	10824-10831	Buffers	_	_	_	
41-2	10831-10832	:	_	_	_	
41-3	10833-10839	shared	_	_	_	
41-4	10840-10843	hit	_	_	_	
41-5	10843-10844	=	_	_	_	
41-6	10844-10845	3	_	_	_	
41-7	10846-10850	read	_	_	_	
41-8	10850-10851	=	_	_	_	
41-9	10851-10855	1638	_	_	_	
41-10	10856-10859	Seq	_	_	_	
41-11	10860-10864	Scan	_	_	_	
41-12	10865-10867	on	_	_	_	
41-13	10868-10884	pgbench_branches	_	_	_	
41-14	10885-10886	b	_	_	_	
41-15	10887-10888	(	_	_	_	
41-16	10888-10892	cost	_	_	_	
41-17	10892-10893	=	_	_	_	
41-18	10893-10897	0.00	_	_	_	
41-19	10897-10898	.	_	_	_	
41-20	10898-10903	.1.01	_	_	_	
41-21	10904-10908	rows	_	_	_	
41-22	10908-10909	=	_	_	_	
41-23	10909-10910	1	_	_	_	
41-24	10911-10916	width	_	_	_	
41-25	10916-10917	=	_	_	_	
41-26	10917-10920	364	_	_	_	
41-27	10920-10921	)	_	_	_	
41-28	10922-10923	(	_	_	_	
41-29	10923-10929	actual	_	_	_	
41-30	10930-10934	time	_	_	_	
41-31	10934-10935	=	_	_	_	
41-32	10935-10940	0.025	_	_	_	
41-33	10940-10941	.	_	_	_	
41-34	10941-10947	.0.026	_	_	_	
41-35	10948-10952	rows	_	_	_	
41-36	10952-10953	=	_	_	_	
41-37	10953-10954	1	_	_	_	
41-38	10955-10960	loops	_	_	_	
41-39	10960-10961	=	_	_	_	
41-40	10961-10962	1	_	_	_	
41-41	10962-10963	)	_	_	_	
41-42	10964-10971	Buffers	_	_	_	
41-43	10971-10972	:	_	_	_	
41-44	10973-10979	shared	_	_	_	
41-45	10980-10983	hit	_	_	_	
41-46	10983-10984	=	_	_	_	
41-47	10984-10985	1	_	_	_	

#Text=Seq Scan on pgbench_accounts a (cost=0.00..2890.00 rows=99999 width=97) (actual time=0.008..25.752 rows=99999 loops=1) Filter: (aid < 100000)
42-1	10986-10989	Seq	_	_	_	
42-2	10990-10994	Scan	_	_	_	
42-3	10995-10997	on	_	_	_	
42-4	10998-11014	pgbench_accounts	_	_	_	
42-5	11015-11016	a	_	_	_	
42-6	11017-11018	(	_	_	_	
42-7	11018-11022	cost	_	_	_	
42-8	11022-11023	=	_	_	_	
42-9	11023-11027	0.00	_	_	_	
42-10	11027-11028	.	_	_	_	
42-11	11028-11036	.2890.00	_	_	_	
42-12	11037-11041	rows	_	_	_	
42-13	11041-11042	=	_	_	_	
42-14	11042-11047	99999	_	_	_	
42-15	11048-11053	width	_	_	_	
42-16	11053-11054	=	_	_	_	
42-17	11054-11056	97	_	_	_	
42-18	11056-11057	)	_	_	_	
42-19	11058-11059	(	_	_	_	
42-20	11059-11065	actual	_	_	_	
42-21	11066-11070	time	_	_	_	
42-22	11070-11071	=	_	_	_	
42-23	11071-11076	0.008	_	_	_	
42-24	11076-11077	.	_	_	_	
42-25	11077-11084	.25.752	_	_	_	
42-26	11085-11089	rows	_	_	_	
42-27	11089-11090	=	_	_	_	
42-28	11090-11095	99999	_	_	_	
42-29	11096-11101	loops	_	_	_	
42-30	11101-11102	=	_	_	_	
42-31	11102-11103	1	_	_	_	
42-32	11103-11104	)	_	_	_	
42-33	11105-11111	Filter	_	_	_	
42-34	11111-11112	:	_	_	_	
42-35	11113-11114	(	_	_	_	
42-36	11114-11117	aid	_	_	_	
42-37	11118-11119	<	_	_	_	
42-38	11120-11126	100000	_	_	_	
42-39	11126-11127	)	_	_	_	

#Text=Rows Removed by Filter: 1 Buffers: shared hit=2 read=1638 Planning Time: 0.306 ms Execution Time: 61.031 ms (8 rows) Very quickly, you can see that EXPLAIN can be a useful tool for people looking to understand their database performance behaviors.
43-1	11128-11132	Rows	_	_	_	
43-2	11133-11140	Removed	_	_	_	
43-3	11141-11143	by	_	_	_	
43-4	11144-11150	Filter	_	_	_	
43-5	11150-11151	:	_	_	_	
43-6	11152-11153	1	_	_	_	
43-7	11154-11161	Buffers	_	_	_	
43-8	11161-11162	:	_	_	_	
43-9	11163-11169	shared	_	_	_	
43-10	11170-11173	hit	_	_	_	
43-11	11173-11174	=	_	_	_	
43-12	11174-11175	2	_	_	_	
43-13	11176-11180	read	_	_	_	
43-14	11180-11181	=	_	_	_	
43-15	11181-11185	1638	_	_	_	
43-16	11186-11194	Planning	_	_	_	
43-17	11195-11199	Time	_	_	_	
43-18	11199-11200	:	_	_	_	
43-19	11201-11206	0.306	_	_	_	
43-20	11207-11209	ms	_	_	_	
43-21	11210-11219	Execution	_	_	_	
43-22	11220-11224	Time	_	_	_	
43-23	11224-11225	:	_	_	_	
43-24	11226-11232	61.031	_	_	_	
43-25	11233-11235	ms	_	_	_	
43-26	11236-11237	(	_	_	_	
43-27	11237-11238	8	_	_	_	
43-28	11239-11243	rows	_	_	_	
43-29	11243-11244	)	_	_	_	
43-30	11245-11249	Very	_	_	_	
43-31	11250-11257	quickly	_	_	_	
43-32	11257-11258	,	_	_	_	
43-33	11259-11262	you	_	_	_	
43-34	11263-11266	can	_	_	_	
43-35	11267-11270	see	_	_	_	
43-36	11271-11275	that	_	_	_	
43-37	11276-11283	EXPLAIN	_	_	_	
43-38	11284-11287	can	_	_	_	
43-39	11288-11290	be	_	_	_	
43-40	11291-11292	a	_	_	_	
43-41	11293-11299	useful	_	_	_	
43-42	11300-11304	tool	_	_	_	
43-43	11305-11308	for	_	_	_	
43-44	11309-11315	people	_	_	_	
43-45	11316-11323	looking	_	_	_	
43-46	11324-11326	to	_	_	_	
43-47	11327-11337	understand	_	_	_	
43-48	11338-11343	their	_	_	_	
43-49	11344-11352	database	_	_	_	
43-50	11353-11364	performance	_	_	_	
43-51	11365-11374	behaviors	_	_	_	
43-52	11374-11375	.	_	_	_	

#Text=A Quick Review of Scan Types and Joins
44-1	11376-11377	A	_	_	_	
44-2	11378-11383	Quick	_	_	_	
44-3	11384-11390	Review	_	_	_	
44-4	11391-11393	of	_	_	_	
44-5	11394-11398	Scan	_	_	_	
44-6	11399-11404	Types	_	_	_	
44-7	11405-11408	and	_	_	_	
44-8	11409-11414	Joins	_	_	_	

#Text=It’s important to know that every join type and scan type have their time and place.  Some people look for the word “Sequential” scan and immediately jump back in fear, not considering whether it would be worthwhile to access data another.  Take, for example, a table with 2 rows -- it would not make sense to the query planner to scan the index, then go back and retrieve data from the disk when it could just quickly scan the table and pull data out without touching the index.  In this case, and in the case of most other small-ish tables, it would be more efficient to do a sequential scan.  To quickly review the join and scan types that PostgreSQL works with: Scan Types Sequential Scan Basically a brute-force retrieval from disk Scans the whole table Fast for small tables Index Scan Scan all/some rows in an index; look up rows in heap
45-1	11415-11417	It	_	_	_	
45-2	11417-11418	’	_	_	_	
45-3	11418-11419	s	_	_	_	
45-4	11420-11429	important	_	_	_	
45-5	11430-11432	to	_	_	_	
45-6	11433-11437	know	_	_	_	
45-7	11438-11442	that	_	_	_	
45-8	11443-11448	every	_	_	_	
45-9	11449-11453	join	_	_	_	
45-10	11454-11458	type	_	_	_	
45-11	11459-11462	and	_	_	_	
45-12	11463-11467	scan	_	_	_	
45-13	11468-11472	type	_	_	_	
45-14	11473-11477	have	_	_	_	
45-15	11478-11483	their	_	_	_	
45-16	11484-11488	time	_	_	_	
45-17	11489-11492	and	_	_	_	
45-18	11493-11498	place	_	_	_	
45-19	11498-11499	.	_	_	_	
45-20	11500-11501	 	_	_	_	
45-21	11501-11505	Some	_	_	_	
45-22	11506-11512	people	_	_	_	
45-23	11513-11517	look	_	_	_	
45-24	11518-11521	for	_	_	_	
45-25	11522-11525	the	_	_	_	
45-26	11526-11530	word	_	_	_	
45-27	11531-11532	“	_	_	_	
45-28	11532-11542	Sequential	_	_	_	
45-29	11542-11543	”	_	_	_	
45-30	11544-11548	scan	_	_	_	
45-31	11549-11552	and	_	_	_	
45-32	11553-11564	immediately	_	_	_	
45-33	11565-11569	jump	_	_	_	
45-34	11570-11574	back	_	_	_	
45-35	11575-11577	in	_	_	_	
45-36	11578-11582	fear	_	_	_	
45-37	11582-11583	,	_	_	_	
45-38	11584-11587	not	_	_	_	
45-39	11588-11599	considering	_	_	_	
45-40	11600-11607	whether	_	_	_	
45-41	11608-11610	it	_	_	_	
45-42	11611-11616	would	_	_	_	
45-43	11617-11619	be	_	_	_	
45-44	11620-11630	worthwhile	_	_	_	
45-45	11631-11633	to	_	_	_	
45-46	11634-11640	access	_	_	_	
45-47	11641-11645	data	_	_	_	
45-48	11646-11653	another	_	_	_	
45-49	11653-11654	.	_	_	_	
45-50	11655-11656	 	_	_	_	
45-51	11656-11660	Take	_	_	_	
45-52	11660-11661	,	_	_	_	
45-53	11662-11665	for	_	_	_	
45-54	11666-11673	example	_	_	_	
45-55	11673-11674	,	_	_	_	
45-56	11675-11676	a	_	_	_	
45-57	11677-11682	table	_	_	_	
45-58	11683-11687	with	_	_	_	
45-59	11688-11689	2	_	_	_	
45-60	11690-11694	rows	_	_	_	
45-61	11695-11696	-	_	_	_	
45-62	11696-11697	-	_	_	_	
45-63	11698-11700	it	_	_	_	
45-64	11701-11706	would	_	_	_	
45-65	11707-11710	not	_	_	_	
45-66	11711-11715	make	_	_	_	
45-67	11716-11721	sense	_	_	_	
45-68	11722-11724	to	_	_	_	
45-69	11725-11728	the	_	_	_	
45-70	11729-11734	query	_	_	_	
45-71	11735-11742	planner	_	_	_	
45-72	11743-11745	to	_	_	_	
45-73	11746-11750	scan	_	_	_	
45-74	11751-11754	the	_	_	_	
45-75	11755-11760	index	_	_	_	
45-76	11760-11761	,	_	_	_	
45-77	11762-11766	then	_	_	_	
45-78	11767-11769	go	_	_	_	
45-79	11770-11774	back	_	_	_	
45-80	11775-11778	and	_	_	_	
45-81	11779-11787	retrieve	_	_	_	
45-82	11788-11792	data	_	_	_	
45-83	11793-11797	from	_	_	_	
45-84	11798-11801	the	_	_	_	
45-85	11802-11806	disk	_	_	_	
45-86	11807-11811	when	_	_	_	
45-87	11812-11814	it	_	_	_	
45-88	11815-11820	could	_	_	_	
45-89	11821-11825	just	_	_	_	
45-90	11826-11833	quickly	_	_	_	
45-91	11834-11838	scan	_	_	_	
45-92	11839-11842	the	_	_	_	
45-93	11843-11848	table	_	_	_	
45-94	11849-11852	and	_	_	_	
45-95	11853-11857	pull	_	_	_	
45-96	11858-11862	data	_	_	_	
45-97	11863-11866	out	_	_	_	
45-98	11867-11874	without	_	_	_	
45-99	11875-11883	touching	_	_	_	
45-100	11884-11887	the	_	_	_	
45-101	11888-11893	index	_	_	_	
45-102	11893-11894	.	_	_	_	
45-103	11895-11896	 	_	_	_	
45-104	11896-11898	In	_	_	_	
45-105	11899-11903	this	_	_	_	
45-106	11904-11908	case	_	_	_	
45-107	11908-11909	,	_	_	_	
45-108	11910-11913	and	_	_	_	
45-109	11914-11916	in	_	_	_	
45-110	11917-11920	the	_	_	_	
45-111	11921-11925	case	_	_	_	
45-112	11926-11928	of	_	_	_	
45-113	11929-11933	most	_	_	_	
45-114	11934-11939	other	_	_	_	
45-115	11940-11949	small-ish	_	_	_	
45-116	11950-11956	tables	_	_	_	
45-117	11956-11957	,	_	_	_	
45-118	11958-11960	it	_	_	_	
45-119	11961-11966	would	_	_	_	
45-120	11967-11969	be	_	_	_	
45-121	11970-11974	more	_	_	_	
45-122	11975-11984	efficient	_	_	_	
45-123	11985-11987	to	_	_	_	
45-124	11988-11990	do	_	_	_	
45-125	11991-11992	a	_	_	_	
45-126	11993-12003	sequential	_	_	_	
45-127	12004-12008	scan	_	_	_	
45-128	12008-12009	.	_	_	_	
45-129	12010-12011	 	_	_	_	
45-130	12011-12013	To	_	_	_	
45-131	12014-12021	quickly	_	_	_	
45-132	12022-12028	review	_	_	_	
45-133	12029-12032	the	_	_	_	
45-134	12033-12037	join	_	_	_	
45-135	12038-12041	and	_	_	_	
45-136	12042-12046	scan	_	_	_	
45-137	12047-12052	types	_	_	_	
45-138	12053-12057	that	_	_	_	
45-139	12058-12068	PostgreSQL	_	_	_	
45-140	12069-12074	works	_	_	_	
45-141	12075-12079	with	_	_	_	
45-142	12079-12080	:	_	_	_	
45-143	12081-12085	Scan	_	_	_	
45-144	12086-12091	Types	_	_	_	
45-145	12092-12102	Sequential	_	_	_	
45-146	12103-12107	Scan	_	_	_	
45-147	12108-12117	Basically	_	_	_	
45-148	12118-12119	a	_	_	_	
45-149	12120-12131	brute-force	_	_	_	
45-150	12132-12141	retrieval	_	_	_	
45-151	12142-12146	from	_	_	_	
45-152	12147-12151	disk	_	_	_	
45-153	12152-12157	Scans	_	_	_	
45-154	12158-12161	the	_	_	_	
45-155	12162-12167	whole	_	_	_	
45-156	12168-12173	table	_	_	_	
45-157	12174-12178	Fast	_	_	_	
45-158	12179-12182	for	_	_	_	
45-159	12183-12188	small	_	_	_	
45-160	12189-12195	tables	_	_	_	
45-161	12196-12201	Index	_	_	_	
45-162	12202-12206	Scan	_	_	_	
45-163	12207-12211	Scan	_	_	_	
45-164	12212-12215	all	_	_	_	
45-165	12215-12216	/	_	_	_	
45-166	12216-12220	some	_	_	_	
45-167	12221-12225	rows	_	_	_	
45-168	12226-12228	in	_	_	_	
45-169	12229-12231	an	_	_	_	
45-170	12232-12237	index	_	_	_	
45-171	12237-12238	;	_	_	_	
45-172	12239-12243	look	_	_	_	
45-173	12244-12246	up	_	_	_	
45-174	12247-12251	rows	_	_	_	
45-175	12252-12254	in	_	_	_	
45-176	12255-12259	heap	_	_	_	

#Text=Causes random seek, which can be costly for old-school spindle-based disks Faster than a Sequential Scan when extracting a small number of rows for large tables Index Only Scan Scan all/some rows in index No need to lookup rows in the table because the values we want are already stored in the index itself
46-1	12260-12266	Causes	_	_	_	
46-2	12267-12273	random	_	_	_	
46-3	12274-12278	seek	_	_	_	
46-4	12278-12279	,	_	_	_	
46-5	12280-12285	which	_	_	_	
46-6	12286-12289	can	_	_	_	
46-7	12290-12292	be	_	_	_	
46-8	12293-12299	costly	_	_	_	
46-9	12300-12303	for	_	_	_	
46-10	12304-12314	old-school	_	_	_	
46-11	12315-12328	spindle-based	_	_	_	
46-12	12329-12334	disks	_	_	_	
46-13	12335-12341	Faster	_	_	_	
46-14	12342-12346	than	_	_	_	
46-15	12347-12348	a	_	_	_	
46-16	12349-12359	Sequential	_	_	_	
46-17	12360-12364	Scan	_	_	_	
46-18	12365-12369	when	_	_	_	
46-19	12370-12380	extracting	_	_	_	
46-20	12381-12382	a	_	_	_	
46-21	12383-12388	small	_	_	_	
46-22	12389-12395	number	_	_	_	
46-23	12396-12398	of	_	_	_	
46-24	12399-12403	rows	_	_	_	
46-25	12404-12407	for	_	_	_	
46-26	12408-12413	large	_	_	_	
46-27	12414-12420	tables	_	_	_	
46-28	12421-12426	Index	_	_	_	
46-29	12427-12431	Only	_	_	_	
46-30	12432-12436	Scan	_	_	_	
46-31	12437-12441	Scan	_	_	_	
46-32	12442-12445	all	_	_	_	
46-33	12445-12446	/	_	_	_	
46-34	12446-12450	some	_	_	_	
46-35	12451-12455	rows	_	_	_	
46-36	12456-12458	in	_	_	_	
46-37	12459-12464	index	_	_	_	
46-38	12465-12467	No	_	_	_	
46-39	12468-12472	need	_	_	_	
46-40	12473-12475	to	_	_	_	
46-41	12476-12482	lookup	_	_	_	
46-42	12483-12487	rows	_	_	_	
46-43	12488-12490	in	_	_	_	
46-44	12491-12494	the	_	_	_	
46-45	12495-12500	table	_	_	_	
46-46	12501-12508	because	_	_	_	
46-47	12509-12512	the	_	_	_	
46-48	12513-12519	values	_	_	_	
46-49	12520-12522	we	_	_	_	
46-50	12523-12527	want	_	_	_	
46-51	12528-12531	are	_	_	_	
46-52	12532-12539	already	_	_	_	
46-53	12540-12546	stored	_	_	_	
46-54	12547-12549	in	_	_	_	
46-55	12550-12553	the	_	_	_	
46-56	12554-12559	index	_	_	_	
46-57	12560-12566	itself	_	_	_	

#Text=Bitmap Heap Scan Scan index, building a bitmap of pages to visit Then, look up only relevant pages in the table for desired rows Join Types Nested Loops For each row in the outer table, scan for matching rows in the inner table
47-1	12567-12573	Bitmap	_	_	_	
47-2	12574-12578	Heap	_	_	_	
47-3	12579-12583	Scan	_	_	_	
47-4	12584-12588	Scan	_	_	_	
47-5	12589-12594	index	_	_	_	
47-6	12594-12595	,	_	_	_	
47-7	12596-12604	building	_	_	_	
47-8	12605-12606	a	_	_	_	
47-9	12607-12613	bitmap	_	_	_	
47-10	12614-12616	of	_	_	_	
47-11	12617-12622	pages	_	_	_	
47-12	12623-12625	to	_	_	_	
47-13	12626-12631	visit	_	_	_	
47-14	12632-12636	Then	_	_	_	
47-15	12636-12637	,	_	_	_	
47-16	12638-12642	look	_	_	_	
47-17	12643-12645	up	_	_	_	
47-18	12646-12650	only	_	_	_	
47-19	12651-12659	relevant	_	_	_	
47-20	12660-12665	pages	_	_	_	
47-21	12666-12668	in	_	_	_	
47-22	12669-12672	the	_	_	_	
47-23	12673-12678	table	_	_	_	
47-24	12679-12682	for	_	_	_	
47-25	12683-12690	desired	_	_	_	
47-26	12691-12695	rows	_	_	_	
47-27	12696-12700	Join	_	_	_	
47-28	12701-12706	Types	_	_	_	
47-29	12707-12713	Nested	_	_	_	
47-30	12714-12719	Loops	_	_	_	
47-31	12720-12723	For	_	_	_	
47-32	12724-12728	each	_	_	_	
47-33	12729-12732	row	_	_	_	
47-34	12733-12735	in	_	_	_	
47-35	12736-12739	the	_	_	_	
47-36	12740-12745	outer	_	_	_	
47-37	12746-12751	table	_	_	_	
47-38	12751-12752	,	_	_	_	
47-39	12753-12757	scan	_	_	_	
47-40	12758-12761	for	_	_	_	
47-41	12762-12770	matching	_	_	_	
47-42	12771-12775	rows	_	_	_	
47-43	12776-12778	in	_	_	_	
47-44	12779-12782	the	_	_	_	
47-45	12783-12788	inner	_	_	_	
47-46	12789-12794	table	_	_	_	

#Text=Fast to start, best for small tables Merge Join Zipper-operation on _sorted_ data sets Good for large tables High startup cost if an additional sort is required Hash Join Build hash of inner table values, scan outer table for matches Only usable for equality conditions
48-1	12795-12799	Fast	_	_	_	
48-2	12800-12802	to	_	_	_	
48-3	12803-12808	start	_	_	_	
48-4	12808-12809	,	_	_	_	
48-5	12810-12814	best	_	_	_	
48-6	12815-12818	for	_	_	_	
48-7	12819-12824	small	_	_	_	
48-8	12825-12831	tables	_	_	_	
48-9	12832-12837	Merge	_	_	_	
48-10	12838-12842	Join	_	_	_	
48-11	12843-12859	Zipper-operation	_	_	_	
48-12	12860-12862	on	_	_	_	
48-13	12863-12864	_	_	_	_	
48-14	12864-12870	sorted	_	_	_	
48-15	12870-12871	_	_	_	_	
48-16	12872-12876	data	_	_	_	
48-17	12877-12881	sets	_	_	_	
48-18	12882-12886	Good	_	_	_	
48-19	12887-12890	for	_	_	_	
48-20	12891-12896	large	_	_	_	
48-21	12897-12903	tables	_	_	_	
48-22	12904-12908	High	_	_	_	
48-23	12909-12916	startup	_	_	_	
48-24	12917-12921	cost	_	_	_	
48-25	12922-12924	if	_	_	_	
48-26	12925-12927	an	_	_	_	
48-27	12928-12938	additional	_	_	_	
48-28	12939-12943	sort	_	_	_	
48-29	12944-12946	is	_	_	_	
48-30	12947-12955	required	_	_	_	
48-31	12956-12960	Hash	_	_	_	
48-32	12961-12965	Join	_	_	_	
48-33	12966-12971	Build	_	_	_	
48-34	12972-12976	hash	_	_	_	
48-35	12977-12979	of	_	_	_	
48-36	12980-12985	inner	_	_	_	
48-37	12986-12991	table	_	_	_	
48-38	12992-12998	values	_	_	_	
48-39	12998-12999	,	_	_	_	
48-40	13000-13004	scan	_	_	_	
48-41	13005-13010	outer	_	_	_	
48-42	13011-13016	table	_	_	_	
48-43	13017-13020	for	_	_	_	
48-44	13021-13028	matches	_	_	_	
48-45	13029-13033	Only	_	_	_	
48-46	13034-13040	usable	_	_	_	
48-47	13041-13044	for	_	_	_	
48-48	13045-13053	equality	_	_	_	
48-49	13054-13064	conditions	_	_	_	

#Text=High startup cost, but fast execution As we can see, every scan type and join type has its place.  What’s most important is that the query planner has good statistics to work with, as mentioned earlier.
49-1	13065-13069	High	_	_	_	
49-2	13070-13077	startup	_	_	_	
49-3	13078-13082	cost	_	_	_	
49-4	13082-13083	,	_	_	_	
49-5	13084-13087	but	_	_	_	
49-6	13088-13092	fast	_	_	_	
49-7	13093-13102	execution	_	_	_	
49-8	13103-13105	As	_	_	_	
49-9	13106-13108	we	_	_	_	
49-10	13109-13112	can	_	_	_	
49-11	13113-13116	see	_	_	_	
49-12	13116-13117	,	_	_	_	
49-13	13118-13123	every	_	_	_	
49-14	13124-13128	scan	_	_	_	
49-15	13129-13133	type	_	_	_	
49-16	13134-13137	and	_	_	_	
49-17	13138-13142	join	_	_	_	
49-18	13143-13147	type	_	_	_	
49-19	13148-13151	has	_	_	_	
49-20	13152-13155	its	_	_	_	
49-21	13156-13161	place	_	_	_	
49-22	13161-13162	.	_	_	_	
49-23	13163-13164	 	_	_	_	
49-24	13164-13168	What	_	_	_	
49-25	13168-13169	’	_	_	_	
49-26	13169-13170	s	_	_	_	
49-27	13171-13175	most	_	_	_	
49-28	13176-13185	important	_	_	_	
49-29	13186-13188	is	_	_	_	
49-30	13189-13193	that	_	_	_	
49-31	13194-13197	the	_	_	_	
49-32	13198-13203	query	_	_	_	
49-33	13204-13211	planner	_	_	_	
49-34	13212-13215	has	_	_	_	
49-35	13216-13220	good	_	_	_	
49-36	13221-13231	statistics	_	_	_	
49-37	13232-13234	to	_	_	_	
49-38	13235-13239	work	_	_	_	
49-39	13240-13244	with	_	_	_	
49-40	13244-13245	,	_	_	_	
49-41	13246-13248	as	_	_	_	
49-42	13249-13258	mentioned	_	_	_	
49-43	13259-13266	earlier	_	_	_	
49-44	13266-13267	.	_	_	_	

#Text=We’ve only talked about one instance where EXPLAIN helped identify a problem and give an idea of how to solve it.  At EDB Support, we’ve seen many situations where EXPLAIN could help identify things like: Inaccurate statistics leading to poor join/scan choices Maintenance activity (VACUUM and ANALYZE) not aggressive enough Corrupted indexes requiring a REINDEX Index definition v. query mismatch
50-1	13268-13270	We	_	_	_	
50-2	13270-13271	’	_	_	_	
50-3	13271-13273	ve	_	_	_	
50-4	13274-13278	only	_	_	_	
50-5	13279-13285	talked	_	_	_	
50-6	13286-13291	about	_	_	_	
50-7	13292-13295	one	_	_	_	
50-8	13296-13304	instance	_	_	_	
50-9	13305-13310	where	_	_	_	
50-10	13311-13318	EXPLAIN	_	_	_	
50-11	13319-13325	helped	_	_	_	
50-12	13326-13334	identify	_	_	_	
50-13	13335-13336	a	_	_	_	
50-14	13337-13344	problem	_	_	_	
50-15	13345-13348	and	_	_	_	
50-16	13349-13353	give	_	_	_	
50-17	13354-13356	an	_	_	_	
50-18	13357-13361	idea	_	_	_	
50-19	13362-13364	of	_	_	_	
50-20	13365-13368	how	_	_	_	
50-21	13369-13371	to	_	_	_	
50-22	13372-13377	solve	_	_	_	
50-23	13378-13380	it	_	_	_	
50-24	13380-13381	.	_	_	_	
50-25	13382-13383	 	_	_	_	
50-26	13383-13385	At	_	_	_	
50-27	13386-13389	EDB	_	_	_	
50-28	13390-13397	Support	_	_	_	
50-29	13397-13398	,	_	_	_	
50-30	13399-13401	we	_	_	_	
50-31	13401-13402	’	_	_	_	
50-32	13402-13404	ve	_	_	_	
50-33	13405-13409	seen	_	_	_	
50-34	13410-13414	many	_	_	_	
50-35	13415-13425	situations	_	_	_	
50-36	13426-13431	where	_	_	_	
50-37	13432-13439	EXPLAIN	_	_	_	
50-38	13440-13445	could	_	_	_	
50-39	13446-13450	help	_	_	_	
50-40	13451-13459	identify	_	_	_	
50-41	13460-13466	things	_	_	_	
50-42	13467-13471	like	_	_	_	
50-43	13471-13472	:	_	_	_	
50-44	13473-13483	Inaccurate	_	_	_	
50-45	13484-13494	statistics	_	_	_	
50-46	13495-13502	leading	_	_	_	
50-47	13503-13505	to	_	_	_	
50-48	13506-13510	poor	_	_	_	
50-49	13511-13515	join	_	_	_	
50-50	13515-13516	/	_	_	_	
50-51	13516-13520	scan	_	_	_	
50-52	13521-13528	choices	_	_	_	
50-53	13529-13540	Maintenance	_	_	_	
50-54	13541-13549	activity	_	_	_	
50-55	13550-13551	(	_	_	_	
50-56	13551-13557	VACUUM	_	_	_	
50-57	13558-13561	and	_	_	_	
50-58	13562-13569	ANALYZE	_	_	_	
50-59	13569-13570	)	_	_	_	
50-60	13571-13574	not	_	_	_	
50-61	13575-13585	aggressive	_	_	_	
50-62	13586-13592	enough	_	_	_	
50-63	13593-13602	Corrupted	_	_	_	
50-64	13603-13610	indexes	_	_	_	
50-65	13611-13620	requiring	_	_	_	
50-66	13621-13622	a	_	_	_	
50-67	13623-13630	REINDEX	_	_	_	
50-68	13631-13636	Index	_	_	_	
50-69	13637-13647	definition	_	_	_	
50-70	13648-13649	v	_	_	_	
50-71	13649-13650	.	_	_	_	
50-72	13651-13656	query	_	_	_	
50-73	13657-13665	mismatch	_	_	_	

#Text=work_mem being set too low, preventing in-memory sorts and joins Poor performance due to join order listing when writing a query Improper ORM configuration EXPLAIN is certainly one of the most invaluable tools for anyone working with PostgreSQL, and using it well will save you lots of time!
51-1	13666-13674	work_mem	_	_	_	
51-2	13675-13680	being	_	_	_	
51-3	13681-13684	set	_	_	_	
51-4	13685-13688	too	_	_	_	
51-5	13689-13692	low	_	_	_	
51-6	13692-13693	,	_	_	_	
51-7	13694-13704	preventing	_	_	_	
51-8	13705-13714	in-memory	_	_	_	
51-9	13715-13720	sorts	_	_	_	
51-10	13721-13724	and	_	_	_	
51-11	13725-13730	joins	_	_	_	
51-12	13731-13735	Poor	_	_	_	
51-13	13736-13747	performance	_	_	_	
51-14	13748-13751	due	_	_	_	
51-15	13752-13754	to	_	_	_	
51-16	13755-13759	join	_	_	_	
51-17	13760-13765	order	_	_	_	
51-18	13766-13773	listing	_	_	_	
51-19	13774-13778	when	_	_	_	
51-20	13779-13786	writing	_	_	_	
51-21	13787-13788	a	_	_	_	
51-22	13789-13794	query	_	_	_	
51-23	13795-13803	Improper	_	_	_	
51-24	13804-13807	ORM	_	_	_	
51-25	13808-13821	configuration	_	_	_	
51-26	13822-13829	EXPLAIN	_	_	_	
51-27	13830-13832	is	_	_	_	
51-28	13833-13842	certainly	_	_	_	
51-29	13843-13846	one	_	_	_	
51-30	13847-13849	of	_	_	_	
51-31	13850-13853	the	_	_	_	
51-32	13854-13858	most	_	_	_	
51-33	13859-13869	invaluable	_	_	_	
51-34	13870-13875	tools	_	_	_	
51-35	13876-13879	for	_	_	_	
51-36	13880-13886	anyone	_	_	_	
51-37	13887-13894	working	_	_	_	
51-38	13895-13899	with	_	_	_	
51-39	13900-13910	PostgreSQL	_	_	_	
51-40	13910-13911	,	_	_	_	
51-41	13912-13915	and	_	_	_	
51-42	13916-13921	using	_	_	_	
51-43	13922-13924	it	_	_	_	
51-44	13925-13929	well	_	_	_	
51-45	13930-13934	will	_	_	_	
51-46	13935-13939	save	_	_	_	
51-47	13940-13943	you	_	_	_	
51-48	13944-13948	lots	_	_	_	
51-49	13949-13951	of	_	_	_	
51-50	13952-13956	time	_	_	_	
51-51	13956-13957	!	_	_	_	

#Text=Join Postgres Pulse Live! We make use of the problems we solve and the conversations we have in helping people with Postgres, and this was another example of that effort in motion.  EXPLAIN and the query planner doesn’t start and stop with what we’ve outlined here, so if you have other questions, we’re here for you.  You can find all of our blog and YouTube series here, and you can always join us for our next session.
52-1	13958-13962	Join	_	_	_	
52-2	13963-13971	Postgres	_	_	_	
52-3	13972-13977	Pulse	_	_	_	
52-4	13978-13982	Live	_	_	_	
52-5	13982-13983	!	_	_	_	
52-6	13984-13986	We	_	_	_	
52-7	13987-13991	make	_	_	_	
52-8	13992-13995	use	_	_	_	
52-9	13996-13998	of	_	_	_	
52-10	13999-14002	the	_	_	_	
52-11	14003-14011	problems	_	_	_	
52-12	14012-14014	we	_	_	_	
52-13	14015-14020	solve	_	_	_	
52-14	14021-14024	and	_	_	_	
52-15	14025-14028	the	_	_	_	
52-16	14029-14042	conversations	_	_	_	
52-17	14043-14045	we	_	_	_	
52-18	14046-14050	have	_	_	_	
52-19	14051-14053	in	_	_	_	
52-20	14054-14061	helping	_	_	_	
52-21	14062-14068	people	_	_	_	
52-22	14069-14073	with	_	_	_	
52-23	14074-14082	Postgres	_	_	_	
52-24	14082-14083	,	_	_	_	
52-25	14084-14087	and	_	_	_	
52-26	14088-14092	this	_	_	_	
52-27	14093-14096	was	_	_	_	
52-28	14097-14104	another	_	_	_	
52-29	14105-14112	example	_	_	_	
52-30	14113-14115	of	_	_	_	
52-31	14116-14120	that	_	_	_	
52-32	14121-14127	effort	_	_	_	
52-33	14128-14130	in	_	_	_	
52-34	14131-14137	motion	_	_	_	
52-35	14137-14138	.	_	_	_	
52-36	14139-14140	 	_	_	_	
52-37	14140-14147	EXPLAIN	_	_	_	
52-38	14148-14151	and	_	_	_	
52-39	14152-14155	the	_	_	_	
52-40	14156-14161	query	_	_	_	
52-41	14162-14169	planner	_	_	_	
52-42	14170-14175	doesn	_	_	_	
52-43	14175-14176	’	_	_	_	
52-44	14176-14177	t	_	_	_	
52-45	14178-14183	start	_	_	_	
52-46	14184-14187	and	_	_	_	
52-47	14188-14192	stop	_	_	_	
52-48	14193-14197	with	_	_	_	
52-49	14198-14202	what	_	_	_	
52-50	14203-14205	we	_	_	_	
52-51	14205-14206	’	_	_	_	
52-52	14206-14208	ve	_	_	_	
52-53	14209-14217	outlined	_	_	_	
52-54	14218-14222	here	_	_	_	
52-55	14222-14223	,	_	_	_	
52-56	14224-14226	so	_	_	_	
52-57	14227-14229	if	_	_	_	
52-58	14230-14233	you	_	_	_	
52-59	14234-14238	have	_	_	_	
52-60	14239-14244	other	_	_	_	
52-61	14245-14254	questions	_	_	_	
52-62	14254-14255	,	_	_	_	
52-63	14256-14258	we	_	_	_	
52-64	14258-14259	’	_	_	_	
52-65	14259-14261	re	_	_	_	
52-66	14262-14266	here	_	_	_	
52-67	14267-14270	for	_	_	_	
52-68	14271-14274	you	_	_	_	
52-69	14274-14275	.	_	_	_	
52-70	14276-14277	 	_	_	_	
52-71	14277-14280	You	_	_	_	
52-72	14281-14284	can	_	_	_	
52-73	14285-14289	find	_	_	_	
52-74	14290-14293	all	_	_	_	
52-75	14294-14296	of	_	_	_	
52-76	14297-14300	our	_	_	_	
52-77	14301-14305	blog	_	_	_	
52-78	14306-14309	and	_	_	_	
52-79	14310-14317	YouTube	_	_	_	
52-80	14318-14324	series	_	_	_	
52-81	14325-14329	here	_	_	_	
52-82	14329-14330	,	_	_	_	
52-83	14331-14334	and	_	_	_	
52-84	14335-14338	you	_	_	_	
52-85	14339-14342	can	_	_	_	
52-86	14343-14349	always	_	_	_	
52-87	14350-14354	join	_	_	_	
52-88	14355-14357	us	_	_	_	
52-89	14358-14361	for	_	_	_	
52-90	14362-14365	our	_	_	_	
52-91	14366-14370	next	_	_	_	
52-92	14371-14378	session	_	_	_	
52-93	14378-14379	.	_	_	_	

#Text=Join us on Monday, May 4th, for our next Pulse Live Session!  We’ll dive into this week’s questions and quagmires around EXPLAIN use, as well as take questions from anyone who participates.  You can ask your questions via email at postgrespulse@enterprisedb.com, hashtag on Twitter, or live during the event right here. Richard Yen Richard is a Senior Support Engineer at EnterpriseDB and supports the entire suite of EnterpriseDB's products. Prior to joining EnterpriseDB, Richard worked as a database engineer and web developer, functioning primarily in operations with a focus on scalability, performance, and rec ...
53-1	14380-14384	Join	_	_	_	
53-2	14385-14387	us	_	_	_	
53-3	14388-14390	on	_	_	_	
53-4	14391-14397	Monday	_	_	_	
53-5	14397-14398	,	_	_	_	
53-6	14399-14402	May	_	_	_	
53-7	14403-14406	4th	_	_	_	
53-8	14406-14407	,	_	_	_	
53-9	14408-14411	for	_	_	_	
53-10	14412-14415	our	_	_	_	
53-11	14416-14420	next	_	_	_	
53-12	14421-14426	Pulse	_	_	_	
53-13	14427-14431	Live	_	_	_	
53-14	14432-14439	Session	_	_	_	
53-15	14439-14440	!	_	_	_	
53-16	14441-14442	 	_	_	_	
53-17	14442-14444	We	_	_	_	
53-18	14444-14445	’	_	_	_	
53-19	14445-14447	ll	_	_	_	
53-20	14448-14452	dive	_	_	_	
53-21	14453-14457	into	_	_	_	
53-22	14458-14462	this	_	_	_	
53-23	14463-14467	week	_	_	_	
53-24	14467-14468	’	_	_	_	
53-25	14468-14469	s	_	_	_	
53-26	14470-14479	questions	_	_	_	
53-27	14480-14483	and	_	_	_	
53-28	14484-14493	quagmires	_	_	_	
53-29	14494-14500	around	_	_	_	
53-30	14501-14508	EXPLAIN	_	_	_	
53-31	14509-14512	use	_	_	_	
53-32	14512-14513	,	_	_	_	
53-33	14514-14516	as	_	_	_	
53-34	14517-14521	well	_	_	_	
53-35	14522-14524	as	_	_	_	
53-36	14525-14529	take	_	_	_	
53-37	14530-14539	questions	_	_	_	
53-38	14540-14544	from	_	_	_	
53-39	14545-14551	anyone	_	_	_	
53-40	14552-14555	who	_	_	_	
53-41	14556-14568	participates	_	_	_	
53-42	14568-14569	.	_	_	_	
53-43	14570-14571	 	_	_	_	
53-44	14571-14574	You	_	_	_	
53-45	14575-14578	can	_	_	_	
53-46	14579-14582	ask	_	_	_	
53-47	14583-14587	your	_	_	_	
53-48	14588-14597	questions	_	_	_	
53-49	14598-14601	via	_	_	_	
53-50	14602-14607	email	_	_	_	
53-51	14608-14610	at	_	_	_	
53-52	14611-14624	postgrespulse	_	_	_	
53-53	14624-14625	@	_	_	_	
53-54	14625-14641	enterprisedb.com	_	_	_	
53-55	14641-14642	,	_	_	_	
53-56	14643-14650	hashtag	_	_	_	
53-57	14651-14653	on	_	_	_	
53-58	14654-14661	Twitter	_	_	_	
53-59	14661-14662	,	_	_	_	
53-60	14663-14665	or	_	_	_	
53-61	14666-14670	live	_	_	_	
53-62	14671-14677	during	_	_	_	
53-63	14678-14681	the	_	_	_	
53-64	14682-14687	event	_	_	_	
53-65	14688-14693	right	_	_	_	
53-66	14694-14698	here	_	_	_	
53-67	14698-14699	.	_	_	_	
53-68	14700-14707	Richard	_	_	_	
53-69	14708-14711	Yen	_	_	_	
53-70	14712-14719	Richard	_	_	_	
53-71	14720-14722	is	_	_	_	
53-72	14723-14724	a	_	_	_	
53-73	14725-14731	Senior	_	_	_	
53-74	14732-14739	Support	_	_	_	
53-75	14740-14748	Engineer	_	_	_	
53-76	14749-14751	at	_	_	_	
53-77	14752-14764	EnterpriseDB	_	_	_	
53-78	14765-14768	and	_	_	_	
53-79	14769-14777	supports	_	_	_	
53-80	14778-14781	the	_	_	_	
53-81	14782-14788	entire	_	_	_	
53-82	14789-14794	suite	_	_	_	
53-83	14795-14797	of	_	_	_	
53-84	14798-14812	EnterpriseDB's	_	_	_	
53-85	14813-14821	products	_	_	_	
53-86	14821-14822	.	_	_	_	
53-87	14822-14823	 	_	_	_	
53-88	14823-14828	Prior	_	_	_	
53-89	14829-14831	to	_	_	_	
53-90	14832-14839	joining	_	_	_	
53-91	14840-14852	EnterpriseDB	_	_	_	
53-92	14852-14853	,	_	_	_	
53-93	14854-14861	Richard	_	_	_	
53-94	14862-14868	worked	_	_	_	
53-95	14869-14871	as	_	_	_	
53-96	14872-14873	a	_	_	_	
53-97	14874-14882	database	_	_	_	
53-98	14883-14891	engineer	_	_	_	
53-99	14892-14895	and	_	_	_	
53-100	14896-14899	web	_	_	_	
53-101	14900-14909	developer	_	_	_	
53-102	14909-14910	,	_	_	_	
53-103	14911-14922	functioning	_	_	_	
53-104	14923-14932	primarily	_	_	_	
53-105	14933-14935	in	_	_	_	
53-106	14936-14946	operations	_	_	_	
53-107	14947-14951	with	_	_	_	
53-108	14952-14953	a	_	_	_	
53-109	14954-14959	focus	_	_	_	
53-110	14960-14962	on	_	_	_	
53-111	14963-14974	scalability	_	_	_	
53-112	14974-14975	,	_	_	_	
53-113	14976-14987	performance	_	_	_	
53-114	14987-14988	,	_	_	_	
53-115	14989-14992	and	_	_	_	
53-116	14993-14996	rec	_	_	_	
53-117	14997-14998	.	_	_	_	
53-118	14998-14999	.	_	_	_	
53-119	14999-15000	.	_	_	_	

#Text=Popular Posts Connecting PostgreSQL using psql and pgAdmin How to use PostgreSQL with Django Microsoft SQL Server (MSSQL) vs. PostgreSQL Comparison in Details - What are the Differences? [2020]
54-1	15001-15008	Popular	_	_	_	
54-2	15009-15014	Posts	_	_	_	
54-3	15015-15025	Connecting	_	_	_	
54-4	15026-15036	PostgreSQL	_	_	_	
54-5	15037-15042	using	_	_	_	
54-6	15043-15047	psql	_	_	_	
54-7	15048-15051	and	_	_	_	
54-8	15052-15059	pgAdmin	_	_	_	
54-9	15060-15063	How	_	_	_	
54-10	15064-15066	to	_	_	_	
54-11	15067-15070	use	_	_	_	
54-12	15071-15081	PostgreSQL	_	_	_	
54-13	15082-15086	with	_	_	_	
54-14	15087-15093	Django	_	_	_	
54-15	15094-15103	Microsoft	_	_	_	
54-16	15104-15107	SQL	_	_	_	
54-17	15108-15114	Server	_	_	_	
54-18	15115-15116	(	_	_	_	
54-19	15116-15121	MSSQL	_	_	_	
54-20	15121-15122	)	_	_	_	
54-21	15123-15125	vs	_	_	_	
54-22	15125-15126	.	_	_	_	
54-23	15127-15137	PostgreSQL	_	_	_	
54-24	15138-15148	Comparison	_	_	_	
54-25	15149-15151	in	_	_	_	
54-26	15152-15159	Details	_	_	_	
54-27	15160-15161	-	_	_	_	
54-28	15162-15166	What	_	_	_	
54-29	15167-15170	are	_	_	_	
54-30	15171-15174	the	_	_	_	
54-31	15175-15186	Differences	_	_	_	
54-32	15186-15187	?	_	_	_	
54-33	15188-15189	[	_	_	_	
54-34	15189-15193	2020	_	_	_	
54-35	15193-15194	]	_	_	_	

#Text=10 Examples of PostgreSQL Stored Procedures How to Install Postgres on Docker Ready to take the next step with PostgreSQL? Contact Us Barrio main menu Why EDB? Use Cases Oracle Migration Hybrid Cloud High Availability
55-1	15195-15197	10	_	_	_	
55-2	15198-15206	Examples	_	_	_	
55-3	15207-15209	of	_	_	_	
55-4	15210-15220	PostgreSQL	_	_	_	
55-5	15221-15227	Stored	_	_	_	
55-6	15228-15238	Procedures	_	_	_	
55-7	15239-15242	How	_	_	_	
55-8	15243-15245	to	_	_	_	
55-9	15246-15253	Install	_	_	_	
55-10	15254-15262	Postgres	_	_	_	
55-11	15263-15265	on	_	_	_	
55-12	15266-15272	Docker	_	_	_	
55-13	15273-15278	Ready	_	_	_	
55-14	15279-15281	to	_	_	_	
55-15	15282-15286	take	_	_	_	
55-16	15287-15290	the	_	_	_	
55-17	15291-15295	next	_	_	_	
55-18	15296-15300	step	_	_	_	
55-19	15301-15305	with	_	_	_	
55-20	15306-15316	PostgreSQL	_	_	_	
55-21	15316-15317	?	_	_	_	
55-22	15318-15325	Contact	_	_	_	
55-23	15326-15328	Us	_	_	_	
55-24	15329-15335	Barrio	_	_	_	
55-25	15336-15340	main	_	_	_	
55-26	15341-15345	menu	_	_	_	
55-27	15346-15349	Why	_	_	_	
55-28	15350-15353	EDB	_	_	_	
55-29	15353-15354	?	_	_	_	
55-30	15355-15358	Use	_	_	_	
55-31	15359-15364	Cases	_	_	_	
55-32	15365-15371	Oracle	_	_	_	
55-33	15372-15381	Migration	_	_	_	
55-34	15382-15388	Hybrid	_	_	_	
55-35	15389-15394	Cloud	_	_	_	
55-36	15395-15399	High	_	_	_	
55-37	15400-15412	Availability	_	_	_	

#Text=Solutions for IT Professionals Database Architects Developers Database Admins Products Databases EDB Postgres Advanced Server PostgreSQL Tools Postgres Enterprise Manager Backup and Recovery Failover Manager
56-1	15413-15422	Solutions	_	_	_	
56-2	15423-15426	for	_	_	_	
56-3	15427-15429	IT	_	_	_	
56-4	15430-15443	Professionals	_	_	_	
56-5	15444-15452	Database	_	_	_	
56-6	15453-15463	Architects	_	_	_	
56-7	15464-15474	Developers	_	_	_	
56-8	15475-15483	Database	_	_	_	
56-9	15484-15490	Admins	_	_	_	
56-10	15491-15499	Products	_	_	_	
56-11	15500-15509	Databases	_	_	_	
56-12	15510-15513	EDB	_	_	_	
56-13	15514-15522	Postgres	_	_	_	
56-14	15523-15531	Advanced	_	_	_	
56-15	15532-15538	Server	_	_	_	
56-16	15539-15549	PostgreSQL	_	_	_	
56-17	15550-15555	Tools	_	_	_	
56-18	15556-15564	Postgres	_	_	_	
56-19	15565-15575	Enterprise	_	_	_	
56-20	15576-15583	Manager	_	_	_	
56-21	15584-15590	Backup	_	_	_	
56-22	15591-15594	and	_	_	_	
56-23	15595-15603	Recovery	_	_	_	
56-24	15604-15612	Failover	_	_	_	
56-25	15613-15620	Manager	_	_	_	

#Text=Open Source Projects Cloud Native PostgreSQL Migration Portal Migration Toolkit Replication Services Services Overview Training Getting Started PostgreSQL Optimization Enterprise Strategy Custom Services Support
57-1	15621-15625	Open	_	_	_	
57-2	15626-15632	Source	_	_	_	
57-3	15633-15641	Projects	_	_	_	
57-4	15642-15647	Cloud	_	_	_	
57-5	15648-15654	Native	_	_	_	
57-6	15655-15665	PostgreSQL	_	_	_	
57-7	15666-15675	Migration	_	_	_	
57-8	15676-15682	Portal	_	_	_	
57-9	15683-15692	Migration	_	_	_	
57-10	15693-15700	Toolkit	_	_	_	
57-11	15701-15712	Replication	_	_	_	
57-12	15713-15721	Services	_	_	_	
57-13	15722-15730	Services	_	_	_	
57-14	15731-15739	Overview	_	_	_	
57-15	15740-15748	Training	_	_	_	
57-16	15749-15756	Getting	_	_	_	
57-17	15757-15764	Started	_	_	_	
57-18	15765-15775	PostgreSQL	_	_	_	
57-19	15776-15788	Optimization	_	_	_	
57-20	15789-15799	Enterprise	_	_	_	
57-21	15800-15808	Strategy	_	_	_	
57-22	15809-15815	Custom	_	_	_	
57-23	15816-15824	Services	_	_	_	
57-24	15825-15832	Support	_	_	_	

#Text=Customer Support Portal Support Overview PostgreSQL Technical Support Remote DBA Service Cloud DBA Service Technical Account Management Resources Docs Blog Webinars PostgreSQL Tutorials Training
58-1	15833-15841	Customer	_	_	_	
58-2	15842-15849	Support	_	_	_	
58-3	15850-15856	Portal	_	_	_	
58-4	15857-15864	Support	_	_	_	
58-5	15865-15873	Overview	_	_	_	
58-6	15874-15884	PostgreSQL	_	_	_	
58-7	15885-15894	Technical	_	_	_	
58-8	15895-15902	Support	_	_	_	
58-9	15903-15909	Remote	_	_	_	
58-10	15910-15913	DBA	_	_	_	
58-11	15914-15921	Service	_	_	_	
58-12	15922-15927	Cloud	_	_	_	
58-13	15928-15931	DBA	_	_	_	
58-14	15932-15939	Service	_	_	_	
58-15	15940-15949	Technical	_	_	_	
58-16	15950-15957	Account	_	_	_	
58-17	15958-15968	Management	_	_	_	
58-18	15969-15978	Resources	_	_	_	
58-19	15979-15983	Docs	_	_	_	
58-20	15984-15988	Blog	_	_	_	
58-21	15989-15997	Webinars	_	_	_	
58-22	15998-16008	PostgreSQL	_	_	_	
58-23	16009-16018	Tutorials	_	_	_	
58-24	16019-16027	Training	_	_	_	

#Text=Partners White Papers Customer Stories Product Compatibility Plans Company About EDB PostgreSQL Contributions Careers Events Press Releases Media Coverage Customers Follow Us
59-1	16028-16036	Partners	_	_	_	
59-2	16037-16042	White	_	_	_	
59-3	16043-16049	Papers	_	_	_	
59-4	16050-16058	Customer	_	_	_	
59-5	16059-16066	Stories	_	_	_	
59-6	16067-16074	Product	_	_	_	
59-7	16075-16088	Compatibility	_	_	_	
59-8	16089-16094	Plans	_	_	_	
59-9	16095-16102	Company	_	_	_	
59-10	16103-16108	About	_	_	_	
59-11	16109-16112	EDB	_	_	_	
59-12	16113-16123	PostgreSQL	_	_	_	
59-13	16124-16137	Contributions	_	_	_	
59-14	16138-16145	Careers	_	_	_	
59-15	16146-16152	Events	_	_	_	
59-16	16153-16158	Press	_	_	_	
59-17	16159-16167	Releases	_	_	_	
59-18	16168-16173	Media	_	_	_	
59-19	16174-16182	Coverage	_	_	_	
59-20	16183-16192	Customers	_	_	_	
59-21	16193-16199	Follow	_	_	_	
59-22	16200-16202	Us	_	_	_	

#Text=Twitter LinkedIn Facebook YouTube Barrio Footer Secondary Menu © 2020 EDB GDPR Privacy Policy Terms of Use Trademarks
60-1	16203-16210	Twitter	_	_	_	
60-2	16211-16219	LinkedIn	_	_	_	
60-3	16220-16228	Facebook	_	_	_	
60-4	16229-16236	YouTube	_	_	_	
60-5	16237-16243	Barrio	_	_	_	
60-6	16244-16250	Footer	_	_	_	
60-7	16251-16260	Secondary	_	_	_	
60-8	16261-16265	Menu	_	_	_	
60-9	16266-16267	©	_	_	_	
60-10	16268-16272	2020	_	_	_	
60-11	16273-16276	EDB	_	_	_	
60-12	16277-16281	GDPR	_	_	_	
60-13	16282-16289	Privacy	_	_	_	
60-14	16290-16296	Policy	_	_	_	
60-15	16297-16302	Terms	_	_	_	
60-16	16303-16305	of	_	_	_	
60-17	16306-16309	Use	_	_	_	
60-18	16310-16320	Trademarks	_	_	_	
