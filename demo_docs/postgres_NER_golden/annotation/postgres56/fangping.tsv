#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value
#T_RL=webanno.custom.Relation|relation|BT_de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity


#Text=Teaching new Presto performance tricks to the Old-School DBA - Engineering Blog
#Text=Skip to content
#Text=Engineering Blog
#Text=Menu
#Text=Home
#Text=Front-End
#Text=Performance
#Text=Mobile
#Text=Conferences
#Text=Jobs
#Text=Teaching new Presto performance tricks to the Old-School DBA
#Text=Posted on June 29, 2020 by Ed Presz
#Text=Stories You will love
#Text=MySQL High Availability at Eventbrite
#Text=Leveraging AWS “spot” instances to drive down costs
#Text=Open Data: The what, why and how to get started
#Text=Boosting Big Data workloads with Presto Auto Scaling
#Text=I’ve spent much of my career working with relational databases such as Oracle and MySQL, and SQL performance has always been an area of focus for me.
1-1	0-8	Teaching	_	_	_	_	
1-2	9-12	new	_	_	_	_	
1-3	13-19	Presto	_	_	_	_	
1-4	20-31	performance	_	_	_	_	
1-5	32-38	tricks	_	_	_	_	
1-6	39-41	to	_	_	_	_	
1-7	42-45	the	_	_	_	_	
1-8	46-56	Old-School	_	_	_	_	
1-9	57-60	DBA	_	_	_	_	
1-10	61-62	-	_	_	_	_	
1-11	63-74	Engineering	_	_	_	_	
1-12	75-79	Blog	_	_	_	_	
1-13	80-84	Skip	_	_	_	_	
1-14	85-87	to	_	_	_	_	
1-15	88-95	content	_	_	_	_	
1-16	96-107	Engineering	_	_	_	_	
1-17	108-112	Blog	_	_	_	_	
1-18	113-117	Menu	_	_	_	_	
1-19	118-122	Home	_	_	_	_	
1-20	123-132	Front-End	_	_	_	_	
1-21	133-144	Performance	_	_	_	_	
1-22	145-151	Mobile	_	_	_	_	
1-23	152-163	Conferences	_	_	_	_	
1-24	164-168	Jobs	_	_	_	_	
1-25	169-177	Teaching	_	_	_	_	
1-26	178-181	new	_	_	_	_	
1-27	182-188	Presto	_	_	_	_	
1-28	189-200	performance	_	_	_	_	
1-29	201-207	tricks	_	_	_	_	
1-30	208-210	to	_	_	_	_	
1-31	211-214	the	_	_	_	_	
1-32	215-225	Old-School	_	_	_	_	
1-33	226-229	DBA	_	_	_	_	
1-34	230-236	Posted	_	_	_	_	
1-35	237-239	on	_	_	_	_	
1-36	240-244	June	_	_	_	_	
1-37	245-247	29	_	_	_	_	
1-38	247-248	,	_	_	_	_	
1-39	249-253	2020	_	_	_	_	
1-40	254-256	by	_	_	_	_	
1-41	257-259	Ed	_	_	_	_	
1-42	260-265	Presz	_	_	_	_	
1-43	266-273	Stories	_	_	_	_	
1-44	274-277	You	_	_	_	_	
1-45	278-282	will	_	_	_	_	
1-46	283-287	love	_	_	_	_	
1-47	288-293	MySQL	_	_	_	_	
1-48	294-298	High	_	_	_	_	
1-49	299-311	Availability	_	_	_	_	
1-50	312-314	at	_	_	_	_	
1-51	315-325	Eventbrite	_	_	_	_	
1-52	326-336	Leveraging	_	_	_	_	
1-53	337-340	AWS	_	_	_	_	
1-54	341-342	“	_	_	_	_	
1-55	342-346	spot	_	_	_	_	
1-56	346-347	”	_	_	_	_	
1-57	348-357	instances	_	_	_	_	
1-58	358-360	to	_	_	_	_	
1-59	361-366	drive	_	_	_	_	
1-60	367-371	down	_	_	_	_	
1-61	372-377	costs	_	_	_	_	
1-62	378-382	Open	_	_	_	_	
1-63	383-387	Data	_	_	_	_	
1-64	387-388	:	_	_	_	_	
1-65	389-392	The	_	_	_	_	
1-66	393-397	what	_	_	_	_	
1-67	397-398	,	_	_	_	_	
1-68	399-402	why	_	_	_	_	
1-69	403-406	and	_	_	_	_	
1-70	407-410	how	_	_	_	_	
1-71	411-413	to	_	_	_	_	
1-72	414-417	get	_	_	_	_	
1-73	418-425	started	_	_	_	_	
1-74	426-434	Boosting	_	_	_	_	
1-75	435-438	Big	_	_	_	_	
1-76	439-443	Data	_	_	_	_	
1-77	444-453	workloads	_	_	_	_	
1-78	454-458	with	_	_	_	_	
1-79	459-465	Presto	_	_	_	_	
1-80	466-470	Auto	_	_	_	_	
1-81	471-478	Scaling	_	_	_	_	
1-82	479-480	I	_	_	_	_	
1-83	480-481	’	_	_	_	_	
1-84	481-483	ve	_	_	_	_	
1-85	484-489	spent	_	_	_	_	
1-86	490-494	much	_	_	_	_	
1-87	495-497	of	_	_	_	_	
1-88	498-500	my	_	_	_	_	
1-89	501-507	career	_	_	_	_	
1-90	508-515	working	_	_	_	_	
1-91	516-520	with	_	_	_	_	
1-92	521-531	relational	_	_	_	_	
1-93	532-541	databases	_	_	_	_	
1-94	542-546	such	_	_	_	_	
1-95	547-549	as	_	_	_	_	
1-96	550-556	Oracle	_	_	_	_	
1-97	557-560	and	_	_	_	_	
1-98	561-566	MySQL	_	_	_	_	
1-99	566-567	,	_	_	_	_	
1-100	568-571	and	_	_	_	_	
1-101	572-575	SQL	_	_	_	_	
1-102	576-587	performance	_	_	_	_	
1-103	588-591	has	_	_	_	_	
1-104	592-598	always	_	_	_	_	
1-105	599-603	been	_	_	_	_	
1-106	604-606	an	_	_	_	_	
1-107	607-611	area	_	_	_	_	
1-108	612-614	of	_	_	_	_	
1-109	615-620	focus	_	_	_	_	
1-110	621-624	for	_	_	_	_	
1-111	625-627	me	_	_	_	_	
1-112	627-628	.	_	_	_	_	

#Text=I’ve spent countless hours reviewing EXPLAIN plans, rewriting subqueries, adding new indexes, and chasing down table-scans.
2-1	629-630	I	_	_	_	_	
2-2	630-631	’	_	_	_	_	
2-3	631-633	ve	_	_	_	_	
2-4	634-639	spent	_	_	_	_	
2-5	640-649	countless	_	_	_	_	
2-6	650-655	hours	_	_	_	_	
2-7	656-665	reviewing	_	_	_	_	
2-8	666-673	EXPLAIN	_	_	_	_	
2-9	674-679	plans	_	_	_	_	
2-10	679-680	,	_	_	_	_	
2-11	681-690	rewriting	_	_	_	_	
2-12	691-701	subqueries	_	_	_	_	
2-13	701-702	,	_	_	_	_	
2-14	703-709	adding	_	_	_	_	
2-15	710-713	new	_	_	_	_	
2-16	714-721	indexes	_	_	_	_	
2-17	721-722	,	_	_	_	_	
2-18	723-726	and	_	_	_	_	
2-19	727-734	chasing	_	_	_	_	
2-20	735-739	down	_	_	_	_	
2-21	740-751	table-scans	_	_	_	_	
2-22	751-752	.	_	_	_	_	

#Text=I’ve been trained to make performance improvements such as:  only choose columns in a SELECT that are absolutely necessary, stay away from LIKE clauses, review the cardinality of columns before adding indexes, and always JOIN on indexed columns.
3-1	753-754	I	_	_	_	_	
3-2	754-755	’	_	_	_	_	
3-3	755-757	ve	_	_	_	_	
3-4	758-762	been	_	_	_	_	
3-5	763-770	trained	_	_	_	_	
3-6	771-773	to	_	_	_	_	
3-7	774-778	make	_	_	_	_	
3-8	779-790	performance	_	_	_	_	
3-9	791-803	improvements	_	_	_	_	
3-10	804-808	such	_	_	_	_	
3-11	809-811	as	_	_	_	_	
3-12	811-812	:	_	_	_	_	
3-13	812-813	 	_	_	_	_	
3-14	814-818	only	_	_	_	_	
3-15	819-825	choose	_	_	_	_	
3-16	826-833	columns	_	_	_	_	
3-17	834-836	in	_	_	_	_	
3-18	837-838	a	_	_	_	_	
3-19	839-845	SELECT	_	_	_	_	
3-20	846-850	that	_	_	_	_	
3-21	851-854	are	_	_	_	_	
3-22	855-865	absolutely	_	_	_	_	
3-23	866-875	necessary	_	_	_	_	
3-24	875-876	,	_	_	_	_	
3-25	877-881	stay	_	_	_	_	
3-26	882-886	away	_	_	_	_	
3-27	887-891	from	_	_	_	_	
3-28	892-896	LIKE	_	_	_	_	
3-29	897-904	clauses	_	_	_	_	
3-30	904-905	,	_	_	_	_	
3-31	906-912	review	_	_	_	_	
3-32	913-916	the	_	_	_	_	
3-33	917-928	cardinality	_	_	_	_	
3-34	929-931	of	_	_	_	_	
3-35	932-939	columns	_	_	_	_	
3-36	940-946	before	_	_	_	_	
3-37	947-953	adding	_	_	_	_	
3-38	954-961	indexes	_	_	_	_	
3-39	961-962	,	_	_	_	_	
3-40	963-966	and	_	_	_	_	
3-41	967-973	always	_	_	_	_	
3-42	974-978	JOIN	_	_	_	_	
3-43	979-981	on	_	_	_	_	
3-44	982-989	indexed	_	_	_	_	
3-45	990-997	columns	_	_	_	_	
3-46	997-998	.	_	_	_	_	

#Text=It’s been an instinctual part of my life as a Database Administrator who supports OLTP databases that have sold in excess of 20K tickets per minute to your favorite events.
4-1	999-1001	It	_	_	_	_	
4-2	1001-1002	’	_	_	_	_	
4-3	1002-1003	s	_	_	_	_	
4-4	1004-1008	been	_	_	_	_	
4-5	1009-1011	an	_	_	_	_	
4-6	1012-1023	instinctual	_	_	_	_	
4-7	1024-1028	part	_	_	_	_	
4-8	1029-1031	of	_	_	_	_	
4-9	1032-1034	my	_	_	_	_	
4-10	1035-1039	life	_	_	_	_	
4-11	1040-1042	as	_	_	_	_	
4-12	1043-1044	a	_	_	_	_	
4-13	1045-1053	Database	_	_	_	_	
4-14	1054-1067	Administrator	_	_	_	_	
4-15	1068-1071	who	_	_	_	_	
4-16	1072-1080	supports	_	_	_	_	
4-17	1081-1085	OLTP	_	_	_	_	
4-18	1086-1095	databases	_	_	_	_	
4-19	1096-1100	that	_	_	_	_	
4-20	1101-1105	have	_	_	_	_	
4-21	1106-1110	sold	_	_	_	_	
4-22	1111-1113	in	_	_	_	_	
4-23	1114-1120	excess	_	_	_	_	
4-24	1121-1123	of	_	_	_	_	
4-25	1124-1127	20K	_	_	_	_	
4-26	1128-1135	tickets	_	_	_	_	
4-27	1136-1139	per	_	_	_	_	
4-28	1140-1146	minute	_	_	_	_	
4-29	1147-1149	to	_	_	_	_	
4-30	1150-1154	your	_	_	_	_	
4-31	1155-1163	favorite	_	_	_	_	
4-32	1164-1170	events	_	_	_	_	
4-33	1170-1171	.	_	_	_	_	

#Text=I remember a specific situation where a missing index caused our production databases to get flooded with table-scans that brought a world-wide on-sale to an immediate halt.
5-1	1172-1173	I	_	_	_	_	
5-2	1174-1182	remember	_	_	_	_	
5-3	1183-1184	a	_	_	_	_	
5-4	1185-1193	specific	_	_	_	_	
5-5	1194-1203	situation	_	_	_	_	
5-6	1204-1209	where	_	_	_	_	
5-7	1210-1211	a	_	_	_	_	
5-8	1212-1219	missing	_	_	_	_	
5-9	1220-1225	index	_	_	_	_	
5-10	1226-1232	caused	_	_	_	_	
5-11	1233-1236	our	_	_	_	_	
5-12	1237-1247	production	_	_	_	_	
5-13	1248-1257	databases	_	_	_	_	
5-14	1258-1260	to	_	_	_	_	
5-15	1261-1264	get	_	_	_	_	
5-16	1265-1272	flooded	_	_	_	_	
5-17	1273-1277	with	_	_	_	_	
5-18	1278-1289	table-scans	_	_	_	_	
5-19	1290-1294	that	_	_	_	_	
5-20	1295-1302	brought	_	_	_	_	
5-21	1303-1304	a	_	_	_	_	
5-22	1305-1315	world-wide	_	_	_	_	
5-23	1316-1323	on-sale	_	_	_	_	
5-24	1324-1326	to	_	_	_	_	
5-25	1327-1329	an	_	_	_	_	
5-26	1330-1339	immediate	_	_	_	_	
5-27	1340-1344	halt	_	_	_	_	
5-28	1344-1345	.	_	_	_	_	

#Text=I had a lot of explaining to do that day as the missing index made it to QA and Stage but not Production!
6-1	1346-1347	I	_	_	_	_	
6-2	1348-1351	had	_	_	_	_	
6-3	1352-1353	a	_	_	_	_	
6-4	1354-1357	lot	_	_	_	_	
6-5	1358-1360	of	_	_	_	_	
6-6	1361-1371	explaining	_	_	_	_	
6-7	1372-1374	to	_	_	_	_	
6-8	1375-1377	do	_	_	_	_	
6-9	1378-1382	that	_	_	_	_	
6-10	1383-1386	day	_	_	_	_	
6-11	1387-1389	as	_	_	_	_	
6-12	1390-1393	the	_	_	_	_	
6-13	1394-1401	missing	_	_	_	_	
6-14	1402-1407	index	_	_	_	_	
6-15	1408-1412	made	_	_	_	_	
6-16	1413-1415	it	_	_	_	_	
6-17	1416-1418	to	_	_	_	_	
6-18	1419-1421	QA	_	_	_	_	
6-19	1422-1425	and	_	_	_	_	
6-20	1426-1431	Stage	_	_	_	_	
6-21	1432-1435	but	_	_	_	_	
6-22	1436-1439	not	_	_	_	_	
6-23	1440-1450	Production	_	_	_	_	
6-24	1450-1451	!	_	_	_	_	

#Text=In recent years, I’ve transitioned to Data Engineering and began supporting Big Data environments. 
7-1	1452-1454	In	_	_	_	_	
7-2	1455-1461	recent	_	_	_	_	
7-3	1462-1467	years	_	_	_	_	
7-4	1467-1468	,	_	_	_	_	
7-5	1469-1470	I	_	_	_	_	
7-6	1470-1471	’	_	_	_	_	
7-7	1471-1473	ve	_	_	_	_	
7-8	1474-1486	transitioned	_	_	_	_	
7-9	1487-1489	to	_	_	_	_	
7-10	1490-1494	Data	_	_	_	_	
7-11	1495-1506	Engineering	_	_	_	_	
7-12	1507-1510	and	_	_	_	_	
7-13	1511-1516	began	_	_	_	_	
7-14	1517-1527	supporting	_	_	_	_	
7-15	1528-1531	Big	_	_	_	_	
7-16	1532-1536	Data	_	_	_	_	
7-17	1537-1549	environments	_	_	_	_	
7-18	1549-1550	.	_	_	_	_	
7-19	1550-1551	 	_	_	_	_	

#Text=Specifically, I’m supporting Eventbrite’s Data Warehouse which leverages Presto and Apache Hive using the Presto/Hive connector.
8-1	1552-1564	Specifically	_	_	_	_	
8-2	1564-1565	,	_	_	_	_	
8-3	1566-1567	I	_	_	_	_	
8-4	1567-1568	’	_	_	_	_	
8-5	1568-1569	m	_	_	_	_	
8-6	1570-1580	supporting	_	_	_	_	
8-7	1581-1591	Eventbrite	_	_	_	_	
8-8	1591-1592	’	_	_	_	_	
8-9	1592-1593	s	_	_	_	_	
8-10	1594-1598	Data	_	_	_	_	
8-11	1599-1608	Warehouse	_	_	_	_	
8-12	1609-1614	which	_	_	_	_	
8-13	1615-1624	leverages	_	_	_	_	
8-14	1625-1631	Presto	_	_	_	_	
8-15	1632-1635	and	_	_	_	_	
8-16	1636-1642	Apache	_	_	_	_	
8-17	1643-1647	Hive	_	_	_	_	
8-18	1648-1653	using	_	_	_	_	
8-19	1654-1657	the	_	_	_	_	
8-20	1658-1664	Presto	_	_	_	_	
8-21	1664-1665	/	_	_	_	_	
8-22	1665-1669	Hive	_	_	_	_	
8-23	1670-1679	connector	_	_	_	_	
8-24	1679-1680	.	_	_	_	_	

#Text=The data files can be of different formats, but we’re using HDFS and S3. 
9-1	1681-1684	The	_	_	_	_	
9-2	1685-1689	data	_	_	_	_	
9-3	1690-1695	files	_	_	_	_	
9-4	1696-1699	can	_	_	_	_	
9-5	1700-1702	be	_	_	_	_	
9-6	1703-1705	of	_	_	_	_	
9-7	1706-1715	different	_	_	_	_	
9-8	1716-1723	formats	_	_	_	_	
9-9	1723-1724	,	_	_	_	_	
9-10	1725-1728	but	_	_	_	_	
9-11	1729-1731	we	_	_	_	_	
9-12	1731-1732	’	_	_	_	_	
9-13	1732-1734	re	_	_	_	_	
9-14	1735-1740	using	_	_	_	_	
9-15	1741-1745	HDFS	_	_	_	_	
9-16	1746-1749	and	_	_	_	_	
9-17	1750-1752	S3	_	_	_	_	
9-18	1752-1753	.	_	_	_	_	
9-19	1753-1754	 	_	_	_	_	

#Text=The Hive metadata describes how data stored in HDFS/S3 maps to schemas, tables, and columns to be queried via SQL.
10-1	1755-1758	The	_	_	_	_	
10-2	1759-1763	Hive	_	_	_	_	
10-3	1764-1772	metadata	_	_	_	_	
10-4	1773-1782	describes	_	_	_	_	
10-5	1783-1786	how	_	_	_	_	
10-6	1787-1791	data	_	_	_	_	
10-7	1792-1798	stored	_	_	_	_	
10-8	1799-1801	in	_	_	_	_	
10-9	1802-1806	HDFS	_	_	_	_	
10-10	1806-1807	/	_	_	_	_	
10-11	1807-1809	S3	_	_	_	_	
10-12	1810-1814	maps	_	_	_	_	
10-13	1815-1817	to	_	_	_	_	
10-14	1818-1825	schemas	_	_	_	_	
10-15	1825-1826	,	_	_	_	_	
10-16	1827-1833	tables	_	_	_	_	
10-17	1833-1834	,	_	_	_	_	
10-18	1835-1838	and	_	_	_	_	
10-19	1839-1846	columns	_	_	_	_	
10-20	1847-1849	to	_	_	_	_	
10-21	1850-1852	be	_	_	_	_	
10-22	1853-1860	queried	_	_	_	_	
10-23	1861-1864	via	_	_	_	_	
10-24	1865-1868	SQL	_	_	_	_	
10-25	1868-1869	.	_	_	_	_	

#Text=We persist this metadata information in Amazon Aurora and access it through the Presto/Hive connector via the Hive Metastore Service (HMS).
11-1	1870-1872	We	_	_	_	_	
11-2	1873-1880	persist	_	_	_	_	
11-3	1881-1885	this	_	_	_	_	
11-4	1886-1894	metadata	_	_	_	_	
11-5	1895-1906	information	_	_	_	_	
11-6	1907-1909	in	_	_	_	_	
11-7	1910-1916	Amazon	_	_	_	_	
11-8	1917-1923	Aurora	_	_	_	_	
11-9	1924-1927	and	_	_	_	_	
11-10	1928-1934	access	_	_	_	_	
11-11	1935-1937	it	_	_	_	_	
11-12	1938-1945	through	_	_	_	_	
11-13	1946-1949	the	_	_	_	_	
11-14	1950-1956	Presto	_	_	_	_	
11-15	1956-1957	/	_	_	_	_	
11-16	1957-1961	Hive	_	_	_	_	
11-17	1962-1971	connector	_	_	_	_	
11-18	1972-1975	via	_	_	_	_	
11-19	1976-1979	the	_	_	_	_	
11-20	1980-1984	Hive	_	_	_	_	
11-21	1985-1994	Metastore	_	_	_	_	
11-22	1995-2002	Service	_	_	_	_	
11-23	2003-2004	(	_	_	_	_	
11-24	2004-2007	HMS	_	_	_	_	
11-25	2007-2008	)	_	_	_	_	
11-26	2008-2009	.	_	_	_	_	

#Text=The stakes have changed and so have the skill-sets required.
12-1	2010-2013	The	_	_	_	_	
12-2	2014-2020	stakes	_	_	_	_	
12-3	2021-2025	have	_	_	_	_	
12-4	2026-2033	changed	_	_	_	_	
12-5	2034-2037	and	_	_	_	_	
12-6	2038-2040	so	_	_	_	_	
12-7	2041-2045	have	_	_	_	_	
12-8	2046-2049	the	_	_	_	_	
12-9	2050-2060	skill-sets	_	_	_	_	
12-10	2061-2069	required	_	_	_	_	
12-11	2069-2070	.	_	_	_	_	

#Text=I’ve needed to retrain myself in how to write optimal SQL for Presto.
13-1	2071-2072	I	_	_	_	_	
13-2	2072-2073	’	_	_	_	_	
13-3	2073-2075	ve	_	_	_	_	
13-4	2076-2082	needed	_	_	_	_	
13-5	2083-2085	to	_	_	_	_	
13-6	2086-2093	retrain	_	_	_	_	
13-7	2094-2100	myself	_	_	_	_	
13-8	2101-2103	in	_	_	_	_	
13-9	2104-2107	how	_	_	_	_	
13-10	2108-2110	to	_	_	_	_	
13-11	2111-2116	write	_	_	_	_	
13-12	2117-2124	optimal	_	_	_	_	
13-13	2125-2128	SQL	_	_	_	_	
13-14	2129-2132	for	_	_	_	_	
13-15	2133-2139	Presto	_	_	_	_	
13-16	2139-2140	.	_	_	_	_	

#Text=Some of the best practices for Presto are the same as relational databases and others are brand new to me.
14-1	2141-2145	Some	_	_	_	_	
14-2	2146-2148	of	_	_	_	_	
14-3	2149-2152	the	_	_	_	_	
14-4	2153-2157	best	_	_	_	_	
14-5	2158-2167	practices	_	_	_	_	
14-6	2168-2171	for	_	_	_	_	
14-7	2172-2178	Presto	_	_	_	_	
14-8	2179-2182	are	_	_	_	_	
14-9	2183-2186	the	_	_	_	_	
14-10	2187-2191	same	_	_	_	_	
14-11	2192-2194	as	_	_	_	_	
14-12	2195-2205	relational	_	_	_	_	
14-13	2206-2215	databases	_	_	_	_	
14-14	2216-2219	and	_	_	_	_	
14-15	2220-2226	others	_	_	_	_	
14-16	2227-2230	are	_	_	_	_	
14-17	2231-2236	brand	_	_	_	_	
14-18	2237-2240	new	_	_	_	_	
14-19	2241-2243	to	_	_	_	_	
14-20	2244-2246	me	_	_	_	_	
14-21	2246-2247	.	_	_	_	_	

#Text=This blog post summarizes some of the similarities and some of the differences with writing efficient SQL on MySQL vs Presto/Hive.
15-1	2248-2252	This	_	_	_	_	
15-2	2253-2257	blog	_	_	_	_	
15-3	2258-2262	post	_	_	_	_	
15-4	2263-2273	summarizes	_	_	_	_	
15-5	2274-2278	some	_	_	_	_	
15-6	2279-2281	of	_	_	_	_	
15-7	2282-2285	the	_	_	_	_	
15-8	2286-2298	similarities	_	_	_	_	
15-9	2299-2302	and	_	_	_	_	
15-10	2303-2307	some	_	_	_	_	
15-11	2308-2310	of	_	_	_	_	
15-12	2311-2314	the	_	_	_	_	
15-13	2315-2326	differences	_	_	_	_	
15-14	2327-2331	with	_	_	_	_	
15-15	2332-2339	writing	_	_	_	_	
15-16	2340-2349	efficient	_	_	_	_	
15-17	2350-2353	SQL	_	_	_	_	
15-18	2354-2356	on	_	_	_	_	
15-19	2357-2362	MySQL	_	_	_	_	
15-20	2363-2365	vs	_	_	_	_	
15-21	2366-2372	Presto	_	_	_	_	
15-22	2372-2373	/	_	_	_	_	
15-23	2373-2377	Hive	_	_	_	_	
15-24	2377-2378	.	_	_	_	_	

#Text=Along the way I’ve had to learn new terms such as “federated queries”, “broadcast joins”, “reshuffling”, “join reordering”, and “predicate pushdown”.
16-1	2379-2384	Along	_	_	_	_	
16-2	2385-2388	the	_	_	_	_	
16-3	2389-2392	way	_	_	_	_	
16-4	2393-2394	I	_	_	_	_	
16-5	2394-2395	’	_	_	_	_	
16-6	2395-2397	ve	_	_	_	_	
16-7	2398-2401	had	_	_	_	_	
16-8	2402-2404	to	_	_	_	_	
16-9	2405-2410	learn	_	_	_	_	
16-10	2411-2414	new	_	_	_	_	
16-11	2415-2420	terms	_	_	_	_	
16-12	2421-2425	such	_	_	_	_	
16-13	2426-2428	as	_	_	_	_	
16-14	2429-2430	“	_	_	_	_	
16-15	2430-2439	federated	_	_	_	_	
16-16	2440-2447	queries	_	_	_	_	
16-17	2447-2448	”	_	_	_	_	
16-18	2448-2449	,	_	_	_	_	
16-19	2450-2451	“	_	_	_	_	
16-20	2451-2460	broadcast	_	_	_	_	
16-21	2461-2466	joins	_	_	_	_	
16-22	2466-2467	”	_	_	_	_	
16-23	2467-2468	,	_	_	_	_	
16-24	2469-2470	“	_	_	_	_	
16-25	2470-2481	reshuffling	_	_	_	_	
16-26	2481-2482	”	_	_	_	_	
16-27	2482-2483	,	_	_	_	_	
16-28	2484-2485	“	_	_	_	_	
16-29	2485-2489	join	_	_	_	_	
16-30	2490-2500	reordering	_	_	_	_	
16-31	2500-2501	”	_	_	_	_	
16-32	2501-2502	,	_	_	_	_	
16-33	2503-2506	and	_	_	_	_	
16-34	2507-2508	“	_	_	_	_	
16-35	2508-2517	predicate	_	_	_	_	
16-36	2518-2526	pushdown	_	_	_	_	
16-37	2526-2527	”	_	_	_	_	
16-38	2527-2528	.	_	_	_	_	

#Text=Let’s start with the basics:
#Text=What is MySQL?
17-1	2529-2532	Let	_	_	_	_	
17-2	2532-2533	’	_	_	_	_	
17-3	2533-2534	s	_	_	_	_	
17-4	2535-2540	start	_	_	_	_	
17-5	2541-2545	with	_	_	_	_	
17-6	2546-2549	the	_	_	_	_	
17-7	2550-2556	basics	_	_	_	_	
17-8	2556-2557	:	_	_	_	_	
17-9	2558-2562	What	_	_	_	_	
17-10	2563-2565	is	_	_	_	_	
17-11	2566-2571	MySQL	_	_	_	_	
17-12	2571-2572	?	_	_	_	_	

#Text=The world’s most popular open source database.
18-1	2573-2576	The	_	_	_	_	
18-2	2577-2582	world	_	_	_	_	
18-3	2582-2583	’	_	_	_	_	
18-4	2583-2584	s	_	_	_	_	
18-5	2585-2589	most	_	_	_	_	
18-6	2590-2597	popular	_	_	_	_	
18-7	2598-2602	open	_	_	_	_	
18-8	2603-2609	source	_	_	_	_	
18-9	2610-2618	database	_	_	_	_	
18-10	2618-2619	.	_	_	_	_	

#Text=The MySQL software delivers a fast, multi-threaded, multi-user, and robust SQL (Structured Query Language) database server.
19-1	2620-2623	The	_	_	_	_	
19-2	2624-2629	MySQL	_	_	_	_	
19-3	2630-2638	software	_	_	_	_	
19-4	2639-2647	delivers	_	_	_	_	
19-5	2648-2649	a	_	_	_	_	
19-6	2650-2654	fast	_	_	_	_	
19-7	2654-2655	,	_	_	_	_	
19-8	2656-2670	multi-threaded	_	_	_	_	
19-9	2670-2671	,	_	_	_	_	
19-10	2672-2682	multi-user	_	_	_	_	
19-11	2682-2683	,	_	_	_	_	
19-12	2684-2687	and	_	_	_	_	
19-13	2688-2694	robust	_	_	_	_	
19-14	2695-2698	SQL	_	_	_	_	
19-15	2699-2700	(	_	_	_	_	
19-16	2700-2710	Structured	_	_	_	_	
19-17	2711-2716	Query	_	_	_	_	
19-18	2717-2725	Language	_	_	_	_	
19-19	2725-2726	)	_	_	_	_	
19-20	2727-2735	database	_	_	_	_	
19-21	2736-2742	server	_	_	_	_	
19-22	2742-2743	.	_	_	_	_	

#Text=MySQL is intended for mission-critical, heavy-load production database usage.
20-1	2744-2749	MySQL	_	_	_	_	
20-2	2750-2752	is	_	_	_	_	
20-3	2753-2761	intended	_	_	_	_	
20-4	2762-2765	for	_	_	_	_	
20-5	2766-2782	mission-critical	_	_	_	_	
20-6	2782-2783	,	_	_	_	_	
20-7	2784-2794	heavy-load	_	_	_	_	
20-8	2795-2805	production	_	_	_	_	
20-9	2806-2814	database	_	_	_	_	
20-10	2815-2820	usage	_	_	_	_	
20-11	2820-2821	.	_	_	_	_	

#Text=What is Presto?
21-1	2822-2826	What	_	_	_	_	
21-2	2827-2829	is	_	_	_	_	
21-3	2830-2836	Presto	_	_	_	_	
21-4	2836-2837	?	_	_	_	_	

#Text=Presto is an open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes.
22-1	2838-2844	Presto	_	_	_	_	
22-2	2845-2847	is	_	_	_	_	
22-3	2848-2850	an	_	_	_	_	
22-4	2851-2855	open	_	_	_	_	
22-5	2856-2862	source	_	_	_	_	
22-6	2863-2874	distributed	_	_	_	_	
22-7	2875-2878	SQL	_	_	_	_	
22-8	2879-2884	query	_	_	_	_	
22-9	2885-2891	engine	_	_	_	_	
22-10	2892-2895	for	_	_	_	_	
22-11	2896-2903	running	_	_	_	_	
22-12	2904-2915	interactive	_	_	_	_	
22-13	2916-2924	analytic	_	_	_	_	
22-14	2925-2932	queries	_	_	_	_	
22-15	2933-2940	against	_	_	_	_	
22-16	2941-2945	data	_	_	_	_	
22-17	2946-2953	sources	_	_	_	_	
22-18	2954-2956	of	_	_	_	_	
22-19	2957-2960	all	_	_	_	_	
22-20	2961-2966	sizes	_	_	_	_	
22-21	2967-2974	ranging	_	_	_	_	
22-22	2975-2979	from	_	_	_	_	
22-23	2980-2989	gigabytes	_	_	_	_	
22-24	2990-2992	to	_	_	_	_	
22-25	2993-3002	petabytes	_	_	_	_	
22-26	3002-3003	.	_	_	_	_	

#Text=Presto doesn’t use the map reduce framework for its execution.
23-1	3004-3010	Presto	_	_	_	_	
23-2	3011-3016	doesn	_	_	_	_	
23-3	3016-3017	’	_	_	_	_	
23-4	3017-3018	t	_	_	_	_	
23-5	3019-3022	use	_	_	_	_	
23-6	3023-3026	the	_	_	_	_	
23-7	3027-3030	map	_	_	_	_	
23-8	3031-3037	reduce	_	_	_	_	
23-9	3038-3047	framework	_	_	_	_	
23-10	3048-3051	for	_	_	_	_	
23-11	3052-3055	its	_	_	_	_	
23-12	3056-3065	execution	_	_	_	_	
23-13	3065-3066	.	_	_	_	_	

#Text=Instead, Presto directly accesses the data through a specialized distributed query engine that is very similar to those found in commercial parallel relational databases.
24-1	3067-3074	Instead	_	_	_	_	
24-2	3074-3075	,	_	_	_	_	
24-3	3076-3082	Presto	_	_	_	_	
24-4	3083-3091	directly	_	_	_	_	
24-5	3092-3100	accesses	_	_	_	_	
24-6	3101-3104	the	_	_	_	_	
24-7	3105-3109	data	_	_	_	_	
24-8	3110-3117	through	_	_	_	_	
24-9	3118-3119	a	_	_	_	_	
24-10	3120-3131	specialized	_	_	_	_	
24-11	3132-3143	distributed	_	_	_	_	
24-12	3144-3149	query	_	_	_	_	
24-13	3150-3156	engine	_	_	_	_	
24-14	3157-3161	that	_	_	_	_	
24-15	3162-3164	is	_	_	_	_	
24-16	3165-3169	very	_	_	_	_	
24-17	3170-3177	similar	_	_	_	_	
24-18	3178-3180	to	_	_	_	_	
24-19	3181-3186	those	_	_	_	_	
24-20	3187-3192	found	_	_	_	_	
24-21	3193-3195	in	_	_	_	_	
24-22	3196-3206	commercial	_	_	_	_	
24-23	3207-3215	parallel	_	_	_	_	
24-24	3216-3226	relational	_	_	_	_	
24-25	3227-3236	databases	_	_	_	_	
24-26	3236-3237	.	_	_	_	_	

#Text=Presto uses ANSI SQL syntax/semantics to build its queries.
25-1	3238-3244	Presto	_	_	_	_	
25-2	3245-3249	uses	_	_	_	_	
25-3	3250-3254	ANSI	_	_	_	_	
25-4	3255-3258	SQL	_	_	_	_	
25-5	3259-3265	syntax	_	_	_	_	
25-6	3265-3266	/	_	_	_	_	
25-7	3266-3275	semantics	_	_	_	_	
25-8	3276-3278	to	_	_	_	_	
25-9	3279-3284	build	_	_	_	_	
25-10	3285-3288	its	_	_	_	_	
25-11	3289-3296	queries	_	_	_	_	
25-12	3296-3297	.	_	_	_	_	

#Text=The advantage of this is that analysts with experience with relational databases will find it very easy and straightforward to write Presto queries!
26-1	3298-3301	The	_	_	_	_	
26-2	3302-3311	advantage	_	_	_	_	
26-3	3312-3314	of	_	_	_	_	
26-4	3315-3319	this	_	_	_	_	
26-5	3320-3322	is	_	_	_	_	
26-6	3323-3327	that	_	_	_	_	
26-7	3328-3336	analysts	_	_	_	_	
26-8	3337-3341	with	_	_	_	_	
26-9	3342-3352	experience	_	_	_	_	
26-10	3353-3357	with	_	_	_	_	
26-11	3358-3368	relational	_	_	_	_	
26-12	3369-3378	databases	_	_	_	_	
26-13	3379-3383	will	_	_	_	_	
26-14	3384-3388	find	_	_	_	_	
26-15	3389-3391	it	_	_	_	_	
26-16	3392-3396	very	_	_	_	_	
26-17	3397-3401	easy	_	_	_	_	
26-18	3402-3405	and	_	_	_	_	
26-19	3406-3421	straightforward	_	_	_	_	
26-20	3422-3424	to	_	_	_	_	
26-21	3425-3430	write	_	_	_	_	
26-22	3431-3437	Presto	_	_	_	_	
26-23	3438-3445	queries	_	_	_	_	
26-24	3445-3446	!	_	_	_	_	

#Text=That said, the best practices for developing efficient SQL via Presto/Hive are different from those used to query standard RDBMS databases.
27-1	3447-3451	That	_	_	_	_	
27-2	3452-3456	said	_	_	_	_	
27-3	3456-3457	,	_	_	_	_	
27-4	3458-3461	the	_	_	_	_	
27-5	3462-3466	best	_	_	_	_	
27-6	3467-3476	practices	_	_	_	_	
27-7	3477-3480	for	_	_	_	_	
27-8	3481-3491	developing	_	_	_	_	
27-9	3492-3501	efficient	_	_	_	_	
27-10	3502-3505	SQL	_	_	_	_	
27-11	3506-3509	via	_	_	_	_	
27-12	3510-3516	Presto	_	_	_	_	
27-13	3516-3517	/	_	_	_	_	
27-14	3517-3521	Hive	_	_	_	_	
27-15	3522-3525	are	_	_	_	_	
27-16	3526-3535	different	_	_	_	_	
27-17	3536-3540	from	_	_	_	_	
27-18	3541-3546	those	_	_	_	_	
27-19	3547-3551	used	_	_	_	_	
27-20	3552-3554	to	_	_	_	_	
27-21	3555-3560	query	_	_	_	_	
27-22	3561-3569	standard	_	_	_	_	
27-23	3570-3575	RDBMS	_	_	_	_	
27-24	3576-3585	databases	_	_	_	_	
27-25	3585-3586	.	_	_	_	_	

#Text=Let’s transition to Presto performance tuning tips and how they compare to standard best practices with MySQL.
#Text=1.
28-1	3587-3590	Let	_	_	_	_	
28-2	3590-3591	’	_	_	_	_	
28-3	3591-3592	s	_	_	_	_	
28-4	3593-3603	transition	_	_	_	_	
28-5	3604-3606	to	_	_	_	_	
28-6	3607-3613	Presto	_	_	_	_	
28-7	3614-3625	performance	_	_	_	_	
28-8	3626-3632	tuning	_	_	_	_	
28-9	3633-3637	tips	_	_	_	_	
28-10	3638-3641	and	_	_	_	_	
28-11	3642-3645	how	_	_	_	_	
28-12	3646-3650	they	_	_	_	_	
28-13	3651-3658	compare	_	_	_	_	
28-14	3659-3661	to	_	_	_	_	
28-15	3662-3670	standard	_	_	_	_	
28-16	3671-3675	best	_	_	_	_	
28-17	3676-3685	practices	_	_	_	_	
28-18	3686-3690	with	_	_	_	_	
28-19	3691-3696	MySQL	_	_	_	_	
28-20	3696-3697	.	_	_	_	_	
28-21	3698-3699	1	_	_	_	_	
28-22	3699-3700	.	_	_	_	_	

#Text=Only specify the columns you need
#Text=Restricting columns for SELECTs can improve your query performance significantly.
29-1	3701-3705	Only	_	_	_	_	
29-2	3706-3713	specify	_	_	_	_	
29-3	3714-3717	the	_	_	_	_	
29-4	3718-3725	columns	_	_	_	_	
29-5	3726-3729	you	_	_	_	_	
29-6	3730-3734	need	_	_	_	_	
29-7	3735-3746	Restricting	_	_	_	_	
29-8	3747-3754	columns	_	_	_	_	
29-9	3755-3758	for	_	_	_	_	
29-10	3759-3766	SELECTs	_	_	_	_	
29-11	3767-3770	can	_	_	_	_	
29-12	3771-3778	improve	_	_	_	_	
29-13	3779-3783	your	_	_	_	_	
29-14	3784-3789	query	_	_	_	_	
29-15	3790-3801	performance	_	_	_	_	
29-16	3802-3815	significantly	_	_	_	_	
29-17	3815-3816	.	_	_	_	_	

#Text=Specify only needed columns instead of using a wildcard (*).
30-1	3817-3824	Specify	_	_	_	_	
30-2	3825-3829	only	_	_	_	_	
30-3	3830-3836	needed	_	_	_	_	
30-4	3837-3844	columns	_	_	_	_	
30-5	3845-3852	instead	_	_	_	_	
30-6	3853-3855	of	_	_	_	_	
30-7	3856-3861	using	_	_	_	_	
30-8	3862-3863	a	_	_	_	_	
30-9	3864-3872	wildcard	_	_	_	_	
30-10	3873-3874	(	_	_	_	_	
30-11	3874-3875	*	_	_	_	_	
30-12	3875-3876	)	_	_	_	_	
30-13	3876-3877	.	_	_	_	_	

#Text=This applies to Presto as well as MySQL!
31-1	3878-3882	This	_	_	_	_	
31-2	3883-3890	applies	_	_	_	_	
31-3	3891-3893	to	_	_	_	_	
31-4	3894-3900	Presto	_	_	_	_	
31-5	3901-3903	as	_	_	_	_	
31-6	3904-3908	well	_	_	_	_	
31-7	3909-3911	as	_	_	_	_	
31-8	3912-3917	MySQL	_	_	_	_	
31-9	3917-3918	!	_	_	_	_	

#Text=2.
32-1	3919-3920	2	_	_	_	_	
32-2	3920-3921	.	_	_	_	_	

#Text=Consider the cardinality within GROUP BY
#Text=When using GROUP BY, order the columns by the highest cardinality (that is, most number of unique values) to the lowest.
33-1	3922-3930	Consider	_	_	_	_	
33-2	3931-3934	the	_	_	_	_	
33-3	3935-3946	cardinality	_	_	_	_	
33-4	3947-3953	within	_	_	_	_	
33-5	3954-3959	GROUP	_	_	_	_	
33-6	3960-3962	BY	_	_	_	_	
33-7	3963-3967	When	_	_	_	_	
33-8	3968-3973	using	_	_	_	_	
33-9	3974-3979	GROUP	_	_	_	_	
33-10	3980-3982	BY	_	_	_	_	
33-11	3982-3983	,	_	_	_	_	
33-12	3984-3989	order	_	_	_	_	
33-13	3990-3993	the	_	_	_	_	
33-14	3994-4001	columns	_	_	_	_	
33-15	4002-4004	by	_	_	_	_	
33-16	4005-4008	the	_	_	_	_	
33-17	4009-4016	highest	_	_	_	_	
33-18	4017-4028	cardinality	_	_	_	_	
33-19	4029-4030	(	_	_	_	_	
33-20	4030-4034	that	_	_	_	_	
33-21	4035-4037	is	_	_	_	_	
33-22	4037-4038	,	_	_	_	_	
33-23	4039-4043	most	_	_	_	_	
33-24	4044-4050	number	_	_	_	_	
33-25	4051-4053	of	_	_	_	_	
33-26	4054-4060	unique	_	_	_	_	
33-27	4061-4067	values	_	_	_	_	
33-28	4067-4068	)	_	_	_	_	
33-29	4069-4071	to	_	_	_	_	
33-30	4072-4075	the	_	_	_	_	
33-31	4076-4082	lowest	_	_	_	_	
33-32	4082-4083	.	_	_	_	_	

#Text=The GROUP BY operator distributes rows based on the order of the columns to the worker nodes, which hold the GROUP BY values in memory.
34-1	4084-4087	The	_	_	_	_	
34-2	4088-4093	GROUP	_	_	_	_	
34-3	4094-4096	BY	_	_	_	_	
34-4	4097-4105	operator	_	_	_	_	
34-5	4106-4117	distributes	_	_	_	_	
34-6	4118-4122	rows	_	_	_	_	
34-7	4123-4128	based	_	_	_	_	
34-8	4129-4131	on	_	_	_	_	
34-9	4132-4135	the	_	_	_	_	
34-10	4136-4141	order	_	_	_	_	
34-11	4142-4144	of	_	_	_	_	
34-12	4145-4148	the	_	_	_	_	
34-13	4149-4156	columns	_	_	_	_	
34-14	4157-4159	to	_	_	_	_	
34-15	4160-4163	the	_	_	_	_	
34-16	4164-4170	worker	_	_	_	_	
34-17	4171-4176	nodes	_	_	_	_	
34-18	4176-4177	,	_	_	_	_	
34-19	4178-4183	which	_	_	_	_	
34-20	4184-4188	hold	_	_	_	_	
34-21	4189-4192	the	_	_	_	_	
34-22	4193-4198	GROUP	_	_	_	_	
34-23	4199-4201	BY	_	_	_	_	
34-24	4202-4208	values	_	_	_	_	
34-25	4209-4211	in	_	_	_	_	
34-26	4212-4218	memory	_	_	_	_	
34-27	4218-4219	.	_	_	_	_	

#Text=As rows are being ingested, the GROUP BY columns are looked up in memory and the values are compared.
35-1	4220-4222	As	_	_	_	_	
35-2	4223-4227	rows	_	_	_	_	
35-3	4228-4231	are	_	_	_	_	
35-4	4232-4237	being	_	_	_	_	
35-5	4238-4246	ingested	_	_	_	_	
35-6	4246-4247	,	_	_	_	_	
35-7	4248-4251	the	_	_	_	_	
35-8	4252-4257	GROUP	_	_	_	_	
35-9	4258-4260	BY	_	_	_	_	
35-10	4261-4268	columns	_	_	_	_	
35-11	4269-4272	are	_	_	_	_	
35-12	4273-4279	looked	_	_	_	_	
35-13	4280-4282	up	_	_	_	_	
35-14	4283-4285	in	_	_	_	_	
35-15	4286-4292	memory	_	_	_	_	
35-16	4293-4296	and	_	_	_	_	
35-17	4297-4300	the	_	_	_	_	
35-18	4301-4307	values	_	_	_	_	
35-19	4308-4311	are	_	_	_	_	
35-20	4312-4320	compared	_	_	_	_	
35-21	4320-4321	.	_	_	_	_	

#Text=If the GROUP BY columns match, the values are then aggregated together.
#Text=3.
36-1	4322-4324	If	_	_	_	_	
36-2	4325-4328	the	_	_	_	_	
36-3	4329-4334	GROUP	_	_	_	_	
36-4	4335-4337	BY	_	_	_	_	
36-5	4338-4345	columns	_	_	_	_	
36-6	4346-4351	match	_	_	_	_	
36-7	4351-4352	,	_	_	_	_	
36-8	4353-4356	the	_	_	_	_	
36-9	4357-4363	values	_	_	_	_	
36-10	4364-4367	are	_	_	_	_	
36-11	4368-4372	then	_	_	_	_	
36-12	4373-4383	aggregated	_	_	_	_	
36-13	4384-4392	together	_	_	_	_	
36-14	4392-4393	.	_	_	_	_	
36-15	4394-4395	3	_	_	_	_	
36-16	4395-4396	.	_	_	_	_	

#Text=Use LIMIT with ORDER BY
#Text=The ORDER BY clause returns the results of a query in sort order.
37-1	4397-4400	Use	_	_	_	_	
37-2	4401-4406	LIMIT	_	_	_	_	
37-3	4407-4411	with	_	_	_	_	
37-4	4412-4417	ORDER	_	_	_	_	
37-5	4418-4420	BY	_	_	_	_	
37-6	4421-4424	The	_	_	_	_	
37-7	4425-4430	ORDER	_	_	_	_	
37-8	4431-4433	BY	_	_	_	_	
37-9	4434-4440	clause	_	_	_	_	
37-10	4441-4448	returns	_	_	_	_	
37-11	4449-4452	the	_	_	_	_	
37-12	4453-4460	results	_	_	_	_	
37-13	4461-4463	of	_	_	_	_	
37-14	4464-4465	a	_	_	_	_	
37-15	4466-4471	query	_	_	_	_	
37-16	4472-4474	in	_	_	_	_	
37-17	4475-4479	sort	_	_	_	_	
37-18	4480-4485	order	_	_	_	_	
37-19	4485-4486	.	_	_	_	_	

#Text=To  process the sort, Presto must send all rows of data to a single worker and then sort them.
38-1	4487-4489	To	_	_	_	_	
38-2	4489-4490	 	_	_	_	_	
38-3	4491-4498	process	_	_	_	_	
38-4	4499-4502	the	_	_	_	_	
38-5	4503-4507	sort	_	_	_	_	
38-6	4507-4508	,	_	_	_	_	
38-7	4509-4515	Presto	_	_	_	_	
38-8	4516-4520	must	_	_	_	_	
38-9	4521-4525	send	_	_	_	_	
38-10	4526-4529	all	_	_	_	_	
38-11	4530-4534	rows	_	_	_	_	
38-12	4535-4537	of	_	_	_	_	
38-13	4538-4542	data	_	_	_	_	
38-14	4543-4545	to	_	_	_	_	
38-15	4546-4547	a	_	_	_	_	
38-16	4548-4554	single	_	_	_	_	
38-17	4555-4561	worker	_	_	_	_	
38-18	4562-4565	and	_	_	_	_	
38-19	4566-4570	then	_	_	_	_	
38-20	4571-4575	sort	_	_	_	_	
38-21	4576-4580	them	_	_	_	_	
38-22	4580-4581	.	_	_	_	_	

#Text=This sort can be a very memory-intensive operation for large datasets that will put strain on the Presto workers.
39-1	4582-4586	This	_	_	_	_	
39-2	4587-4591	sort	_	_	_	_	
39-3	4592-4595	can	_	_	_	_	
39-4	4596-4598	be	_	_	_	_	
39-5	4599-4600	a	_	_	_	_	
39-6	4601-4605	very	_	_	_	_	
39-7	4606-4622	memory-intensive	_	_	_	_	
39-8	4623-4632	operation	_	_	_	_	
39-9	4633-4636	for	_	_	_	_	
39-10	4637-4642	large	_	_	_	_	
39-11	4643-4651	datasets	_	_	_	_	
39-12	4652-4656	that	_	_	_	_	
39-13	4657-4661	will	_	_	_	_	
39-14	4662-4665	put	_	_	_	_	
39-15	4666-4672	strain	_	_	_	_	
39-16	4673-4675	on	_	_	_	_	
39-17	4676-4679	the	_	_	_	_	
39-18	4680-4686	Presto	_	_	_	_	
39-19	4687-4694	workers	_	_	_	_	
39-20	4694-4695	.	_	_	_	_	

#Text=The end result will be long execution times and/or memory errors.
40-1	4696-4699	The	_	_	_	_	
40-2	4700-4703	end	_	_	_	_	
40-3	4704-4710	result	_	_	_	_	
40-4	4711-4715	will	_	_	_	_	
40-5	4716-4718	be	_	_	_	_	
40-6	4719-4723	long	_	_	_	_	
40-7	4724-4733	execution	_	_	_	_	
40-8	4734-4739	times	_	_	_	_	
40-9	4740-4743	and	_	_	_	_	
40-10	4743-4744	/	_	_	_	_	
40-11	4744-4746	or	_	_	_	_	
40-12	4747-4753	memory	_	_	_	_	
40-13	4754-4760	errors	_	_	_	_	
40-14	4760-4761	.	_	_	_	_	

#Text=If you are using the ORDER BY clause to look at the top N values, then use a LIMIT clause to reduce the cost of the sort significantly by pushing the sorting/limiting to individual workers, rather than the sorting being done by a single worker.
41-1	4762-4764	If	_	_	_	_	
41-2	4765-4768	you	_	_	_	_	
41-3	4769-4772	are	_	_	_	_	
41-4	4773-4778	using	_	_	_	_	
41-5	4779-4782	the	_	_	_	_	
41-6	4783-4788	ORDER	_	_	_	_	
41-7	4789-4791	BY	_	_	_	_	
41-8	4792-4798	clause	_	_	_	_	
41-9	4799-4801	to	_	_	_	_	
41-10	4802-4806	look	_	_	_	_	
41-11	4807-4809	at	_	_	_	_	
41-12	4810-4813	the	_	_	_	_	
41-13	4814-4817	top	_	_	_	_	
41-14	4818-4819	N	_	_	_	_	
41-15	4820-4826	values	_	_	_	_	
41-16	4826-4827	,	_	_	_	_	
41-17	4828-4832	then	_	_	_	_	
41-18	4833-4836	use	_	_	_	_	
41-19	4837-4838	a	_	_	_	_	
41-20	4839-4844	LIMIT	_	_	_	_	
41-21	4845-4851	clause	_	_	_	_	
41-22	4852-4854	to	_	_	_	_	
41-23	4855-4861	reduce	_	_	_	_	
41-24	4862-4865	the	_	_	_	_	
41-25	4866-4870	cost	_	_	_	_	
41-26	4871-4873	of	_	_	_	_	
41-27	4874-4877	the	_	_	_	_	
41-28	4878-4882	sort	_	_	_	_	
41-29	4883-4896	significantly	_	_	_	_	
41-30	4897-4899	by	_	_	_	_	
41-31	4900-4907	pushing	_	_	_	_	
41-32	4908-4911	the	_	_	_	_	
41-33	4912-4919	sorting	_	_	_	_	
41-34	4919-4920	/	_	_	_	_	
41-35	4920-4928	limiting	_	_	_	_	
41-36	4929-4931	to	_	_	_	_	
41-37	4932-4942	individual	_	_	_	_	
41-38	4943-4950	workers	_	_	_	_	
41-39	4950-4951	,	_	_	_	_	
41-40	4952-4958	rather	_	_	_	_	
41-41	4959-4963	than	_	_	_	_	
41-42	4964-4967	the	_	_	_	_	
41-43	4968-4975	sorting	_	_	_	_	
41-44	4976-4981	being	_	_	_	_	
41-45	4982-4986	done	_	_	_	_	
41-46	4987-4989	by	_	_	_	_	
41-47	4990-4991	a	_	_	_	_	
41-48	4992-4998	single	_	_	_	_	
41-49	4999-5005	worker	_	_	_	_	
41-50	5005-5006	.	_	_	_	_	

#Text=I highly recommend you use the LIMIT clause not just for SQL with ORDER BY but in any situation when you’re validating new SQL.
42-1	5007-5008	I	_	_	_	_	
42-2	5009-5015	highly	_	_	_	_	
42-3	5016-5025	recommend	_	_	_	_	
42-4	5026-5029	you	_	_	_	_	
42-5	5030-5033	use	_	_	_	_	
42-6	5034-5037	the	_	_	_	_	
42-7	5038-5043	LIMIT	_	_	_	_	
42-8	5044-5050	clause	_	_	_	_	
42-9	5051-5054	not	_	_	_	_	
42-10	5055-5059	just	_	_	_	_	
42-11	5060-5063	for	_	_	_	_	
42-12	5064-5067	SQL	_	_	_	_	
42-13	5068-5072	with	_	_	_	_	
42-14	5073-5078	ORDER	_	_	_	_	
42-15	5079-5081	BY	_	_	_	_	
42-16	5082-5085	but	_	_	_	_	
42-17	5086-5088	in	_	_	_	_	
42-18	5089-5092	any	_	_	_	_	
42-19	5093-5102	situation	_	_	_	_	
42-20	5103-5107	when	_	_	_	_	
42-21	5108-5111	you	_	_	_	_	
42-22	5111-5112	’	_	_	_	_	
42-23	5112-5114	re	_	_	_	_	
42-24	5115-5125	validating	_	_	_	_	
42-25	5126-5129	new	_	_	_	_	
42-26	5130-5133	SQL	_	_	_	_	
42-27	5133-5134	.	_	_	_	_	

#Text=This is good practice for MySQL as well as Presto!
43-1	5135-5139	This	_	_	_	_	
43-2	5140-5142	is	_	_	_	_	
43-3	5143-5147	good	_	_	_	_	
43-4	5148-5156	practice	_	_	_	_	
43-5	5157-5160	for	_	_	_	_	
43-6	5161-5166	MySQL	_	_	_	_	
43-7	5167-5169	as	_	_	_	_	
43-8	5170-5174	well	_	_	_	_	
43-9	5175-5177	as	_	_	_	_	
43-10	5178-5184	Presto	_	_	_	_	
43-11	5184-5185	!	_	_	_	_	

#Text=4.
44-1	5186-5187	4	_	_	_	_	
44-2	5187-5188	.	_	_	_	_	

#Text=Using approximate aggregate functions
#Text=When exploring large datasets often an approximation (with standard deviation of 2.3%) is more than good enough!
45-1	5189-5194	Using	_	_	_	_	
45-2	5195-5206	approximate	_	_	_	_	
45-3	5207-5216	aggregate	_	_	_	_	
45-4	5217-5226	functions	_	_	_	_	
45-5	5227-5231	When	_	_	_	_	
45-6	5232-5241	exploring	_	_	_	_	
45-7	5242-5247	large	_	_	_	_	
45-8	5248-5256	datasets	_	_	_	_	
45-9	5257-5262	often	_	_	_	_	
45-10	5263-5265	an	_	_	_	_	
45-11	5266-5279	approximation	_	_	_	_	
45-12	5280-5281	(	_	_	_	_	
45-13	5281-5285	with	_	_	_	_	
45-14	5286-5294	standard	_	_	_	_	
45-15	5295-5304	deviation	_	_	_	_	
45-16	5305-5307	of	_	_	_	_	
45-17	5308-5312	2.3%	_	_	_	_	
45-18	5312-5313	)	_	_	_	_	
45-19	5314-5316	is	_	_	_	_	
45-20	5317-5321	more	_	_	_	_	
45-21	5322-5326	than	_	_	_	_	
45-22	5327-5331	good	_	_	_	_	
45-23	5332-5338	enough	_	_	_	_	
45-24	5338-5339	!	_	_	_	_	

#Text=Presto has approximate aggregation functions that give you significant performance improvements.
46-1	5340-5346	Presto	_	_	_	_	
46-2	5347-5350	has	_	_	_	_	
46-3	5351-5362	approximate	_	_	_	_	
46-4	5363-5374	aggregation	_	_	_	_	
46-5	5375-5384	functions	_	_	_	_	
46-6	5385-5389	that	_	_	_	_	
46-7	5390-5394	give	_	_	_	_	
46-8	5395-5398	you	_	_	_	_	
46-9	5399-5410	significant	_	_	_	_	
46-10	5411-5422	performance	_	_	_	_	
46-11	5423-5435	improvements	_	_	_	_	
46-12	5435-5436	.	_	_	_	_	

#Text=Using the approx_distinct(x) function on large data sets vs COUNT(DISTINCT x) will result in performance gains.
47-1	5437-5442	Using	_	_	_	_	
47-2	5443-5446	the	_	_	_	_	
47-3	5447-5462	approx_distinct	_	_	_	_	
47-4	5462-5463	(	_	_	_	_	
47-5	5463-5464	x	_	_	_	_	
47-6	5464-5465	)	_	_	_	_	
47-7	5466-5474	function	_	_	_	_	
47-8	5475-5477	on	_	_	_	_	
47-9	5478-5483	large	_	_	_	_	
47-10	5484-5488	data	_	_	_	_	
47-11	5489-5493	sets	_	_	_	_	
47-12	5494-5496	vs	_	_	_	_	
47-13	5497-5502	COUNT	_	_	_	_	
47-14	5502-5503	(	_	_	_	_	
47-15	5503-5511	DISTINCT	_	_	_	_	
47-16	5512-5513	x	_	_	_	_	
47-17	5513-5514	)	_	_	_	_	
47-18	5515-5519	will	_	_	_	_	
47-19	5520-5526	result	_	_	_	_	
47-20	5527-5529	in	_	_	_	_	
47-21	5530-5541	performance	_	_	_	_	
47-22	5542-5547	gains	_	_	_	_	
47-23	5547-5548	.	_	_	_	_	

#Text=When an exact number may not be required―for instance, if you are looking for a rough estimate of the number of New Years events in the Greater New York area then consider using approx_distinct().
48-1	5549-5553	When	_	_	_	_	
48-2	5554-5556	an	_	_	_	_	
48-3	5557-5562	exact	_	_	_	_	
48-4	5563-5569	number	_	_	_	_	
48-5	5570-5573	may	_	_	_	_	
48-6	5574-5577	not	_	_	_	_	
48-7	5578-5580	be	_	_	_	_	
48-8	5581-5593	required―for	_	_	_	_	
48-9	5594-5602	instance	_	_	_	_	
48-10	5602-5603	,	_	_	_	_	
48-11	5604-5606	if	_	_	_	_	
48-12	5607-5610	you	_	_	_	_	
48-13	5611-5614	are	_	_	_	_	
48-14	5615-5622	looking	_	_	_	_	
48-15	5623-5626	for	_	_	_	_	
48-16	5627-5628	a	_	_	_	_	
48-17	5629-5634	rough	_	_	_	_	
48-18	5635-5643	estimate	_	_	_	_	
48-19	5644-5646	of	_	_	_	_	
48-20	5647-5650	the	_	_	_	_	
48-21	5651-5657	number	_	_	_	_	
48-22	5658-5660	of	_	_	_	_	
48-23	5661-5664	New	_	_	_	_	
48-24	5665-5670	Years	_	_	_	_	
48-25	5671-5677	events	_	_	_	_	
48-26	5678-5680	in	_	_	_	_	
48-27	5681-5684	the	_	_	_	_	
48-28	5685-5692	Greater	_	_	_	_	
48-29	5693-5696	New	_	_	_	_	
48-30	5697-5701	York	_	_	_	_	
48-31	5702-5706	area	_	_	_	_	
48-32	5707-5711	then	_	_	_	_	
48-33	5712-5720	consider	_	_	_	_	
48-34	5721-5726	using	_	_	_	_	
48-35	5727-5742	approx_distinct	_	_	_	_	
48-36	5742-5743	(	_	_	_	_	
48-37	5743-5744	)	_	_	_	_	
48-38	5744-5745	.	_	_	_	_	

#Text=This function minimizes the memory usage by counting unique hashes of values instead of entire strings.
49-1	5746-5750	This	_	_	_	_	
49-2	5751-5759	function	_	_	_	_	
49-3	5760-5769	minimizes	_	_	_	_	
49-4	5770-5773	the	_	_	_	_	
49-5	5774-5780	memory	_	_	_	_	
49-6	5781-5786	usage	_	_	_	_	
49-7	5787-5789	by	_	_	_	_	
49-8	5790-5798	counting	_	_	_	_	
49-9	5799-5805	unique	_	_	_	_	
49-10	5806-5812	hashes	_	_	_	_	
49-11	5813-5815	of	_	_	_	_	
49-12	5816-5822	values	_	_	_	_	
49-13	5823-5830	instead	_	_	_	_	
49-14	5831-5833	of	_	_	_	_	
49-15	5834-5840	entire	_	_	_	_	
49-16	5841-5848	strings	_	_	_	_	
49-17	5848-5849	.	_	_	_	_	

#Text=The drawback is that there is a small standard deviation.
#Text=5.
50-1	5850-5853	The	_	_	_	_	
50-2	5854-5862	drawback	_	_	_	_	
50-3	5863-5865	is	_	_	_	_	
50-4	5866-5870	that	_	_	_	_	
50-5	5871-5876	there	_	_	_	_	
50-6	5877-5879	is	_	_	_	_	
50-7	5880-5881	a	_	_	_	_	
50-8	5882-5887	small	_	_	_	_	
50-9	5888-5896	standard	_	_	_	_	
50-10	5897-5906	deviation	_	_	_	_	
50-11	5906-5907	.	_	_	_	_	
50-12	5908-5909	5	_	_	_	_	
50-13	5909-5910	.	_	_	_	_	

#Text=Aggregating a series of LIKE clauses in one single regexp_like clause
#Text=The LIKE operation is well known to be slow especially when not anchored to the left (i.e. the search text is surrounded by ‘%’ on both sides) or when used with a series of OR conditions.
51-1	5911-5922	Aggregating	_	_	_	_	
51-2	5923-5924	a	_	_	_	_	
51-3	5925-5931	series	_	_	_	_	
51-4	5932-5934	of	_	_	_	_	
51-5	5935-5939	LIKE	_	_	_	_	
51-6	5940-5947	clauses	_	_	_	_	
51-7	5948-5950	in	_	_	_	_	
51-8	5951-5954	one	_	_	_	_	
51-9	5955-5961	single	_	_	_	_	
51-10	5962-5973	regexp_like	_	_	_	_	
51-11	5974-5980	clause	_	_	_	_	
51-12	5981-5984	The	_	_	_	_	
51-13	5985-5989	LIKE	_	_	_	_	
51-14	5990-5999	operation	_	_	_	_	
51-15	6000-6002	is	_	_	_	_	
51-16	6003-6007	well	_	_	_	_	
51-17	6008-6013	known	_	_	_	_	
51-18	6014-6016	to	_	_	_	_	
51-19	6017-6019	be	_	_	_	_	
51-20	6020-6024	slow	_	_	_	_	
51-21	6025-6035	especially	_	_	_	_	
51-22	6036-6040	when	_	_	_	_	
51-23	6041-6044	not	_	_	_	_	
51-24	6045-6053	anchored	_	_	_	_	
51-25	6054-6056	to	_	_	_	_	
51-26	6057-6060	the	_	_	_	_	
51-27	6061-6065	left	_	_	_	_	
51-28	6066-6067	(	_	_	_	_	
51-29	6067-6070	i.e	_	_	_	_	
51-30	6070-6071	.	_	_	_	_	
51-31	6072-6075	the	_	_	_	_	
51-32	6076-6082	search	_	_	_	_	
51-33	6083-6087	text	_	_	_	_	
51-34	6088-6090	is	_	_	_	_	
51-35	6091-6101	surrounded	_	_	_	_	
51-36	6102-6104	by	_	_	_	_	
51-37	6105-6106	‘	_	_	_	_	
51-38	6106-6107	%	_	_	_	_	
51-39	6107-6108	’	_	_	_	_	
51-40	6109-6111	on	_	_	_	_	
51-41	6112-6116	both	_	_	_	_	
51-42	6117-6122	sides	_	_	_	_	
51-43	6122-6123	)	_	_	_	_	
51-44	6124-6126	or	_	_	_	_	
51-45	6127-6131	when	_	_	_	_	
51-46	6132-6136	used	_	_	_	_	
51-47	6137-6141	with	_	_	_	_	
51-48	6142-6143	a	_	_	_	_	
51-49	6144-6150	series	_	_	_	_	
51-50	6151-6153	of	_	_	_	_	
51-51	6154-6156	OR	_	_	_	_	
51-52	6157-6167	conditions	_	_	_	_	
51-53	6167-6168	.	_	_	_	_	

#Text=So it is no surprise that Presto’s query optimizer is unable to improve queries that contain many LIKE clauses.
52-1	6169-6171	So	_	_	_	_	
52-2	6172-6174	it	_	_	_	_	
52-3	6175-6177	is	_	_	_	_	
52-4	6178-6180	no	_	_	_	_	
52-5	6181-6189	surprise	_	_	_	_	
52-6	6190-6194	that	_	_	_	_	
52-7	6195-6201	Presto	_	_	_	_	
52-8	6201-6202	’	_	_	_	_	
52-9	6202-6203	s	_	_	_	_	
52-10	6204-6209	query	_	_	_	_	
52-11	6210-6219	optimizer	_	_	_	_	
52-12	6220-6222	is	_	_	_	_	
52-13	6223-6229	unable	_	_	_	_	
52-14	6230-6232	to	_	_	_	_	
52-15	6233-6240	improve	_	_	_	_	
52-16	6241-6248	queries	_	_	_	_	
52-17	6249-6253	that	_	_	_	_	
52-18	6254-6261	contain	_	_	_	_	
52-19	6262-6266	many	_	_	_	_	
52-20	6267-6271	LIKE	_	_	_	_	
52-21	6272-6279	clauses	_	_	_	_	
52-22	6279-6280	.	_	_	_	_	

#Text=We’ve found improved  LIKE performance on Presto by  substituting the LIKE/OR  combination with a single REGEXP_LIKE clause, which is Presto native.  
53-1	6281-6283	We	_	_	_	_	
53-2	6283-6284	’	_	_	_	_	
53-3	6284-6286	ve	_	_	_	_	
53-4	6287-6292	found	_	_	_	_	
53-5	6293-6301	improved	_	_	_	_	
53-6	6301-6302	 	_	_	_	_	
53-7	6303-6307	LIKE	_	_	_	_	
53-8	6308-6319	performance	_	_	_	_	
53-9	6320-6322	on	_	_	_	_	
53-10	6323-6329	Presto	_	_	_	_	
53-11	6330-6332	by	_	_	_	_	
53-12	6332-6333	 	_	_	_	_	
53-13	6334-6346	substituting	_	_	_	_	
53-14	6347-6350	the	_	_	_	_	
53-15	6351-6355	LIKE	_	_	_	_	
53-16	6355-6356	/	_	_	_	_	
53-17	6356-6358	OR	_	_	_	_	
53-18	6358-6359	 	_	_	_	_	
53-19	6360-6371	combination	_	_	_	_	
53-20	6372-6376	with	_	_	_	_	
53-21	6377-6378	a	_	_	_	_	
53-22	6379-6385	single	_	_	_	_	
53-23	6386-6397	REGEXP_LIKE	_	_	_	_	
53-24	6398-6404	clause	_	_	_	_	
53-25	6404-6405	,	_	_	_	_	
53-26	6406-6411	which	_	_	_	_	
53-27	6412-6414	is	_	_	_	_	
53-28	6415-6421	Presto	_	_	_	_	
53-29	6422-6428	native	_	_	_	_	
53-30	6428-6429	.	_	_	_	_	
53-31	6430-6431	 	_	_	_	_	

#Text=Not only is it easier to read but it’s also more performant.
54-1	6431-6434	Not	_	_	_	_	
54-2	6435-6439	only	_	_	_	_	
54-3	6440-6442	is	_	_	_	_	
54-4	6443-6445	it	_	_	_	_	
54-5	6446-6452	easier	_	_	_	_	
54-6	6453-6455	to	_	_	_	_	
54-7	6456-6460	read	_	_	_	_	
54-8	6461-6464	but	_	_	_	_	
54-9	6465-6467	it	_	_	_	_	
54-10	6467-6468	’	_	_	_	_	
54-11	6468-6469	s	_	_	_	_	
54-12	6470-6474	also	_	_	_	_	
54-13	6475-6479	more	_	_	_	_	
54-14	6480-6490	performant	_	_	_	_	
54-15	6490-6491	.	_	_	_	_	

#Text=Based on some quick performance tests, we see ~30% increase in run-times with REGEXP_LIKE vs comparable LIKE/OR combination.
55-1	6492-6497	Based	_	_	_	_	
55-2	6498-6500	on	_	_	_	_	
55-3	6501-6505	some	_	_	_	_	
55-4	6506-6511	quick	_	_	_	_	
55-5	6512-6523	performance	_	_	_	_	
55-6	6524-6529	tests	_	_	_	_	
55-7	6529-6530	,	_	_	_	_	
55-8	6531-6533	we	_	_	_	_	
55-9	6534-6537	see	_	_	_	_	
55-10	6538-6539	~	_	_	_	_	
55-11	6539-6542	30%	_	_	_	_	
55-12	6543-6551	increase	_	_	_	_	
55-13	6552-6554	in	_	_	_	_	
55-14	6555-6564	run-times	_	_	_	_	
55-15	6565-6569	with	_	_	_	_	
55-16	6570-6581	REGEXP_LIKE	_	_	_	_	
55-17	6582-6584	vs	_	_	_	_	
55-18	6585-6595	comparable	_	_	_	_	
55-19	6596-6600	LIKE	_	_	_	_	
55-20	6600-6601	/	_	_	_	_	
55-21	6601-6603	OR	_	_	_	_	
55-22	6604-6615	combination	_	_	_	_	
55-23	6615-6616	.	_	_	_	_	

#Text=For example:
#Text=SELECT  ...FROM zoo
#Text=WHERE method LIKE '%monkey%' OR
#Text=method LIKE '%hippo%' OR
#Text=method LIKE '%tiger%' OR
#Text=method LIKE '%elephant%'
#Text=can be optimized by replacing the four LIKE clauses with a single REGEXP_LIKE clause:
#Text=SELECT  ...FROM zoo
#Text=WHERE REGEXP_LIKE(method, 'monkey|hippo|tiger|elephant')
#Text=6.
56-1	6617-6620	For	_	_	_	_	
56-2	6621-6628	example	_	_	_	_	
56-3	6628-6629	:	_	_	_	_	
56-4	6630-6636	SELECT	_	_	_	_	
56-5	6636-6637	 	_	_	_	_	
56-6	6638-6639	.	_	_	_	_	
56-7	6639-6640	.	_	_	_	_	
56-8	6640-6641	.	_	_	_	_	
56-9	6641-6645	FROM	_	_	_	_	
56-10	6645-6646	 	_	_	_	_	
56-11	6646-6649	zoo	_	_	_	_	
56-12	6650-6655	WHERE	_	_	_	_	
56-13	6656-6662	method	_	_	_	_	
56-14	6663-6667	LIKE	_	_	_	_	
56-15	6668-6669	'	_	_	_	_	
56-16	6669-6670	%	_	_	_	_	
56-17	6670-6676	monkey	_	_	_	_	
56-18	6676-6677	%	_	_	_	_	
56-19	6677-6678	'	_	_	_	_	
56-20	6679-6681	OR	_	_	_	_	
56-21	6682-6688	method	_	_	_	_	
56-22	6689-6693	LIKE	_	_	_	_	
56-23	6694-6695	'	_	_	_	_	
56-24	6695-6696	%	_	_	_	_	
56-25	6696-6701	hippo	_	_	_	_	
56-26	6701-6702	%	_	_	_	_	
56-27	6702-6703	'	_	_	_	_	
56-28	6704-6706	OR	_	_	_	_	
56-29	6707-6713	method	_	_	_	_	
56-30	6714-6718	LIKE	_	_	_	_	
56-31	6719-6720	'	_	_	_	_	
56-32	6720-6721	%	_	_	_	_	
56-33	6721-6726	tiger	_	_	_	_	
56-34	6726-6727	%	_	_	_	_	
56-35	6727-6728	'	_	_	_	_	
56-36	6729-6731	OR	_	_	_	_	
56-37	6732-6738	method	_	_	_	_	
56-38	6739-6743	LIKE	_	_	_	_	
56-39	6744-6745	'	_	_	_	_	
56-40	6745-6746	%	_	_	_	_	
56-41	6746-6754	elephant	_	_	_	_	
56-42	6754-6755	%	_	_	_	_	
56-43	6755-6756	'	_	_	_	_	
56-44	6757-6760	can	_	_	_	_	
56-45	6761-6763	be	_	_	_	_	
56-46	6764-6773	optimized	_	_	_	_	
56-47	6774-6776	by	_	_	_	_	
56-48	6777-6786	replacing	_	_	_	_	
56-49	6787-6790	the	_	_	_	_	
56-50	6791-6795	four	_	_	_	_	
56-51	6796-6800	LIKE	_	_	_	_	
56-52	6801-6808	clauses	_	_	_	_	
56-53	6809-6813	with	_	_	_	_	
56-54	6814-6815	a	_	_	_	_	
56-55	6816-6822	single	_	_	_	_	
56-56	6823-6834	REGEXP_LIKE	_	_	_	_	
56-57	6835-6841	clause	_	_	_	_	
56-58	6841-6842	:	_	_	_	_	
56-59	6843-6849	SELECT	_	_	_	_	
56-60	6849-6850	 	_	_	_	_	
56-61	6851-6852	.	_	_	_	_	
56-62	6852-6853	.	_	_	_	_	
56-63	6853-6854	.	_	_	_	_	
56-64	6854-6858	FROM	_	_	_	_	
56-65	6858-6859	 	_	_	_	_	
56-66	6859-6862	zoo	_	_	_	_	
56-67	6863-6868	WHERE	_	_	_	_	
56-68	6869-6880	REGEXP_LIKE	_	_	_	_	
56-69	6880-6881	(	_	_	_	_	
56-70	6881-6887	method	_	_	_	_	
56-71	6887-6888	,	_	_	_	_	
56-72	6889-6890	'	_	_	_	_	
56-73	6890-6896	monkey	_	_	_	_	
56-74	6896-6897	|	_	_	_	_	
56-75	6897-6902	hippo	_	_	_	_	
56-76	6902-6903	|	_	_	_	_	
56-77	6903-6908	tiger	_	_	_	_	
56-78	6908-6909	|	_	_	_	_	
56-79	6909-6917	elephant	_	_	_	_	
56-80	6917-6918	'	_	_	_	_	
56-81	6918-6919	)	_	_	_	_	
56-82	6920-6921	6	_	_	_	_	
56-83	6921-6922	.	_	_	_	_	

#Text=Specifying large tables first in join clause
#Text=When joining tables, specify the largest table first in the join.
57-1	6923-6933	Specifying	_	_	_	_	
57-2	6934-6939	large	_	_	_	_	
57-3	6940-6946	tables	_	_	_	_	
57-4	6947-6952	first	_	_	_	_	
57-5	6953-6955	in	_	_	_	_	
57-6	6956-6960	join	_	_	_	_	
57-7	6961-6967	clause	_	_	_	_	
57-8	6968-6972	When	_	_	_	_	
57-9	6973-6980	joining	_	_	_	_	
57-10	6981-6987	tables	_	_	_	_	
57-11	6987-6988	,	_	_	_	_	
57-12	6989-6996	specify	_	_	_	_	
57-13	6997-7000	the	_	_	_	_	
57-14	7001-7008	largest	_	_	_	_	
57-15	7009-7014	table	_	_	_	_	
57-16	7015-7020	first	_	_	_	_	
57-17	7021-7023	in	_	_	_	_	
57-18	7024-7027	the	_	_	_	_	
57-19	7028-7032	join	_	_	_	_	
57-20	7032-7033	.	_	_	_	_	

#Text=The default join algorithm of Presto is broadcast join, which partitions the left-hand side table of a join and sends (broadcasts) a copy of the entire right-hand side table to all of the worker nodes that have the partitions.
58-1	7034-7037	The	_	_	_	_	
58-2	7038-7045	default	_	_	_	_	
58-3	7046-7050	join	_	_	_	_	
58-4	7051-7060	algorithm	_	_	_	_	
58-5	7061-7063	of	_	_	_	_	
58-6	7064-7070	Presto	_	_	_	_	
58-7	7071-7073	is	_	_	_	_	
58-8	7074-7083	broadcast	_	_	_	_	
58-9	7084-7088	join	_	_	_	_	
58-10	7088-7089	,	_	_	_	_	
58-11	7090-7095	which	_	_	_	_	
58-12	7096-7106	partitions	_	_	_	_	
58-13	7107-7110	the	_	_	_	_	
58-14	7111-7120	left-hand	_	_	_	_	
58-15	7121-7125	side	_	_	_	_	
58-16	7126-7131	table	_	_	_	_	
58-17	7132-7134	of	_	_	_	_	
58-18	7135-7136	a	_	_	_	_	
58-19	7137-7141	join	_	_	_	_	
58-20	7142-7145	and	_	_	_	_	
58-21	7146-7151	sends	_	_	_	_	
58-22	7152-7153	(	_	_	_	_	
58-23	7153-7163	broadcasts	_	_	_	_	
58-24	7163-7164	)	_	_	_	_	
58-25	7165-7166	a	_	_	_	_	
58-26	7167-7171	copy	_	_	_	_	
58-27	7172-7174	of	_	_	_	_	
58-28	7175-7178	the	_	_	_	_	
58-29	7179-7185	entire	_	_	_	_	
58-30	7186-7196	right-hand	_	_	_	_	
58-31	7197-7201	side	_	_	_	_	
58-32	7202-7207	table	_	_	_	_	
58-33	7208-7210	to	_	_	_	_	
58-34	7211-7214	all	_	_	_	_	
58-35	7215-7217	of	_	_	_	_	
58-36	7218-7221	the	_	_	_	_	
58-37	7222-7228	worker	_	_	_	_	
58-38	7229-7234	nodes	_	_	_	_	
58-39	7235-7239	that	_	_	_	_	
58-40	7240-7244	have	_	_	_	_	
58-41	7245-7248	the	_	_	_	_	
58-42	7249-7259	partitions	_	_	_	_	
58-43	7259-7260	.	_	_	_	_	

#Text=If the right-hand side table is “small” then it can be replicated to all the join workers which will save CPU and network costs. 
59-1	7261-7263	If	_	_	_	_	
59-2	7264-7267	the	_	_	_	_	
59-3	7268-7278	right-hand	_	_	_	_	
59-4	7279-7283	side	_	_	_	_	
59-5	7284-7289	table	_	_	_	_	
59-6	7290-7292	is	_	_	_	_	
59-7	7293-7294	“	_	_	_	_	
59-8	7294-7299	small	_	_	_	_	
59-9	7299-7300	”	_	_	_	_	
59-10	7301-7305	then	_	_	_	_	
59-11	7306-7308	it	_	_	_	_	
59-12	7309-7312	can	_	_	_	_	
59-13	7313-7315	be	_	_	_	_	
59-14	7316-7326	replicated	_	_	_	_	
59-15	7327-7329	to	_	_	_	_	
59-16	7330-7333	all	_	_	_	_	
59-17	7334-7337	the	_	_	_	_	
59-18	7338-7342	join	_	_	_	_	
59-19	7343-7350	workers	_	_	_	_	
59-20	7351-7356	which	_	_	_	_	
59-21	7357-7361	will	_	_	_	_	
59-22	7362-7366	save	_	_	_	_	
59-23	7367-7370	CPU	_	_	_	_	
59-24	7371-7374	and	_	_	_	_	
59-25	7375-7382	network	_	_	_	_	
59-26	7383-7388	costs	_	_	_	_	
59-27	7388-7389	.	_	_	_	_	
59-28	7389-7390	 	_	_	_	_	

#Text=This type of join will be most efficient when the right-hand side table is small enough to fit within one node.
60-1	7391-7395	This	_	_	_	_	
60-2	7396-7400	type	_	_	_	_	
60-3	7401-7403	of	_	_	_	_	
60-4	7404-7408	join	_	_	_	_	
60-5	7409-7413	will	_	_	_	_	
60-6	7414-7416	be	_	_	_	_	
60-7	7417-7421	most	_	_	_	_	
60-8	7422-7431	efficient	_	_	_	_	
60-9	7432-7436	when	_	_	_	_	
60-10	7437-7440	the	_	_	_	_	
60-11	7441-7451	right-hand	_	_	_	_	
60-12	7452-7456	side	_	_	_	_	
60-13	7457-7462	table	_	_	_	_	
60-14	7463-7465	is	_	_	_	_	
60-15	7466-7471	small	_	_	_	_	
60-16	7472-7478	enough	_	_	_	_	
60-17	7479-7481	to	_	_	_	_	
60-18	7482-7485	fit	_	_	_	_	
60-19	7486-7492	within	_	_	_	_	
60-20	7493-7496	one	_	_	_	_	
60-21	7497-7501	node	_	_	_	_	
60-22	7501-7502	.	_	_	_	_	

#Text=If you receive an ‘Exceeded max memory’ error, then the right-hand side table is too large.
61-1	7503-7505	If	_	_	_	_	
61-2	7506-7509	you	_	_	_	_	
61-3	7510-7517	receive	_	_	_	_	
61-4	7518-7520	an	_	_	_	_	
61-5	7521-7522	‘	_	_	_	_	
61-6	7522-7530	Exceeded	_	_	_	_	
61-7	7531-7534	max	_	_	_	_	
61-8	7535-7541	memory	_	_	_	_	
61-9	7541-7542	’	_	_	_	_	
61-10	7543-7548	error	_	_	_	_	
61-11	7548-7549	,	_	_	_	_	
61-12	7550-7554	then	_	_	_	_	
61-13	7555-7558	the	_	_	_	_	
61-14	7559-7569	right-hand	_	_	_	_	
61-15	7570-7574	side	_	_	_	_	
61-16	7575-7580	table	_	_	_	_	
61-17	7581-7583	is	_	_	_	_	
61-18	7584-7587	too	_	_	_	_	
61-19	7588-7593	large	_	_	_	_	
61-20	7593-7594	.	_	_	_	_	

#Text=Presto does not perform automatic join-reordering, so make sure your largest table is the first table in your sequence of joins.
62-1	7595-7601	Presto	_	_	_	_	
62-2	7602-7606	does	_	_	_	_	
62-3	7607-7610	not	_	_	_	_	
62-4	7611-7618	perform	_	_	_	_	
62-5	7619-7628	automatic	_	_	_	_	
62-6	7629-7644	join-reordering	_	_	_	_	
62-7	7644-7645	,	_	_	_	_	
62-8	7646-7648	so	_	_	_	_	
62-9	7649-7653	make	_	_	_	_	
62-10	7654-7658	sure	_	_	_	_	
62-11	7659-7663	your	_	_	_	_	
62-12	7664-7671	largest	_	_	_	_	
62-13	7672-7677	table	_	_	_	_	
62-14	7678-7680	is	_	_	_	_	
62-15	7681-7684	the	_	_	_	_	
62-16	7685-7690	first	_	_	_	_	
62-17	7691-7696	table	_	_	_	_	
62-18	7697-7699	in	_	_	_	_	
62-19	7700-7704	your	_	_	_	_	
62-20	7705-7713	sequence	_	_	_	_	
62-21	7714-7716	of	_	_	_	_	
62-22	7717-7722	joins	_	_	_	_	
62-23	7722-7723	.	_	_	_	_	

#Text=This was an interesting performance tip for me.
63-1	7724-7728	This	_	_	_	_	
63-2	7729-7732	was	_	_	_	_	
63-3	7733-7735	an	_	_	_	_	
63-4	7736-7747	interesting	_	_	_	_	
63-5	7748-7759	performance	_	_	_	_	
63-6	7760-7763	tip	_	_	_	_	
63-7	7764-7767	for	_	_	_	_	
63-8	7768-7770	me	_	_	_	_	
63-9	7770-7771	.	_	_	_	_	

#Text=As we know, SQL is a declarative language and the ordering of tables used in joins in MySQL, for example,  is *NOT* particularly important.
64-1	7772-7774	As	_	_	_	_	
64-2	7775-7777	we	_	_	_	_	
64-3	7778-7782	know	_	_	_	_	
64-4	7782-7783	,	_	_	_	_	
64-5	7784-7787	SQL	_	_	_	_	
64-6	7788-7790	is	_	_	_	_	
64-7	7791-7792	a	_	_	_	_	
64-8	7793-7804	declarative	_	_	_	_	
64-9	7805-7813	language	_	_	_	_	
64-10	7814-7817	and	_	_	_	_	
64-11	7818-7821	the	_	_	_	_	
64-12	7822-7830	ordering	_	_	_	_	
64-13	7831-7833	of	_	_	_	_	
64-14	7834-7840	tables	_	_	_	_	
64-15	7841-7845	used	_	_	_	_	
64-16	7846-7848	in	_	_	_	_	
64-17	7849-7854	joins	_	_	_	_	
64-18	7855-7857	in	_	_	_	_	
64-19	7858-7863	MySQL	_	_	_	_	
64-20	7863-7864	,	_	_	_	_	
64-21	7865-7868	for	_	_	_	_	
64-22	7869-7876	example	_	_	_	_	
64-23	7876-7877	,	_	_	_	_	
64-24	7877-7878	 	_	_	_	_	
64-25	7879-7881	is	_	_	_	_	
64-26	7882-7883	*	_	_	_	_	
64-27	7883-7886	NOT	_	_	_	_	
64-28	7886-7887	*	_	_	_	_	
64-29	7888-7900	particularly	_	_	_	_	
64-30	7901-7910	important	_	_	_	_	
64-31	7910-7911	.	_	_	_	_	

#Text=The MySQL optimizer will re-order to choose the most efficient path.
65-1	7912-7915	The	_	_	_	_	
65-2	7916-7921	MySQL	_	_	_	_	
65-3	7922-7931	optimizer	_	_	_	_	
65-4	7932-7936	will	_	_	_	_	
65-5	7937-7945	re-order	_	_	_	_	
65-6	7946-7948	to	_	_	_	_	
65-7	7949-7955	choose	_	_	_	_	
65-8	7956-7959	the	_	_	_	_	
65-9	7960-7964	most	_	_	_	_	
65-10	7965-7974	efficient	_	_	_	_	
65-11	7975-7979	path	_	_	_	_	
65-12	7979-7980	.	_	_	_	_	

#Text=With Presto, the join order matters.
66-1	7981-7985	With	_	_	_	_	
66-2	7986-7992	Presto	_	_	_	_	
66-3	7992-7993	,	_	_	_	_	
66-4	7994-7997	the	_	_	_	_	
66-5	7998-8002	join	_	_	_	_	
66-6	8003-8008	order	_	_	_	_	
66-7	8009-8016	matters	_	_	_	_	
66-8	8016-8017	.	_	_	_	_	

#Text=You’ve been WARNED!
67-1	8018-8021	You	_	_	_	_	
67-2	8021-8022	’	_	_	_	_	
67-3	8022-8024	ve	_	_	_	_	
67-4	8025-8029	been	_	_	_	_	
67-5	8030-8036	WARNED	_	_	_	_	
67-6	8036-8037	!	_	_	_	_	

#Text=Presto does not perform automatic join-reordering unless using the Cost Based Optimizer!
68-1	8038-8044	Presto	_	_	_	_	
68-2	8045-8049	does	_	_	_	_	
68-3	8050-8053	not	_	_	_	_	
68-4	8054-8061	perform	_	_	_	_	
68-5	8062-8071	automatic	_	_	_	_	
68-6	8072-8087	join-reordering	_	_	_	_	
68-7	8088-8094	unless	_	_	_	_	
68-8	8095-8100	using	_	_	_	_	
68-9	8101-8104	the	_	_	_	_	
68-10	8105-8109	Cost	_	_	_	_	
68-11	8110-8115	Based	_	_	_	_	
68-12	8116-8125	Optimizer	_	_	_	_	
68-13	8125-8126	!	_	_	_	_	

#Text=7.
69-1	8127-8128	7	_	_	_	_	
69-2	8128-8129	.	_	_	_	_	

#Text=Turning on the distributed hash join
#Text=If you’re battling with memory errors then try a distributed hash join.
70-1	8130-8137	Turning	_	_	_	_	
70-2	8138-8140	on	_	_	_	_	
70-3	8141-8144	the	_	_	_	_	
70-4	8145-8156	distributed	_	_	_	_	
70-5	8157-8161	hash	_	_	_	_	
70-6	8162-8166	join	_	_	_	_	
70-7	8167-8169	If	_	_	_	_	
70-8	8170-8173	you	_	_	_	_	
70-9	8173-8174	’	_	_	_	_	
70-10	8174-8176	re	_	_	_	_	
70-11	8177-8185	battling	_	_	_	_	
70-12	8186-8190	with	_	_	_	_	
70-13	8191-8197	memory	_	_	_	_	
70-14	8198-8204	errors	_	_	_	_	
70-15	8205-8209	then	_	_	_	_	
70-16	8210-8213	try	_	_	_	_	
70-17	8214-8215	a	_	_	_	_	
70-18	8216-8227	distributed	_	_	_	_	
70-19	8228-8232	hash	_	_	_	_	
70-20	8233-8237	join	_	_	_	_	
70-21	8237-8238	.	_	_	_	_	

#Text=This algorithm partitions both the left and right tables using the hash values of the join keys.
71-1	8239-8243	This	_	_	_	_	
71-2	8244-8253	algorithm	_	_	_	_	
71-3	8254-8264	partitions	_	_	_	_	
71-4	8265-8269	both	_	_	_	_	
71-5	8270-8273	the	_	_	_	_	
71-6	8274-8278	left	_	_	_	_	
71-7	8279-8282	and	_	_	_	_	
71-8	8283-8288	right	_	_	_	_	
71-9	8289-8295	tables	_	_	_	_	
71-10	8296-8301	using	_	_	_	_	
71-11	8302-8305	the	_	_	_	_	
71-12	8306-8310	hash	_	_	_	_	
71-13	8311-8317	values	_	_	_	_	
71-14	8318-8320	of	_	_	_	_	
71-15	8321-8324	the	_	_	_	_	
71-16	8325-8329	join	_	_	_	_	
71-17	8330-8334	keys	_	_	_	_	
71-18	8334-8335	.	_	_	_	_	

#Text=So the distributed join works even if the right-hand side table is large, but the performance might be slower because the join increases the number of network data transfers.
72-1	8336-8338	So	_	_	_	_	
72-2	8339-8342	the	_	_	_	_	
72-3	8343-8354	distributed	_	_	_	_	
72-4	8355-8359	join	_	_	_	_	
72-5	8360-8365	works	_	_	_	_	
72-6	8366-8370	even	_	_	_	_	
72-7	8371-8373	if	_	_	_	_	
72-8	8374-8377	the	_	_	_	_	
72-9	8378-8388	right-hand	_	_	_	_	
72-10	8389-8393	side	_	_	_	_	
72-11	8394-8399	table	_	_	_	_	
72-12	8400-8402	is	_	_	_	_	
72-13	8403-8408	large	_	_	_	_	
72-14	8408-8409	,	_	_	_	_	
72-15	8410-8413	but	_	_	_	_	
72-16	8414-8417	the	_	_	_	_	
72-17	8418-8429	performance	_	_	_	_	
72-18	8430-8435	might	_	_	_	_	
72-19	8436-8438	be	_	_	_	_	
72-20	8439-8445	slower	_	_	_	_	
72-21	8446-8453	because	_	_	_	_	
72-22	8454-8457	the	_	_	_	_	
72-23	8458-8462	join	_	_	_	_	
72-24	8463-8472	increases	_	_	_	_	
72-25	8473-8476	the	_	_	_	_	
72-26	8477-8483	number	_	_	_	_	
72-27	8484-8486	of	_	_	_	_	
72-28	8487-8494	network	_	_	_	_	
72-29	8495-8499	data	_	_	_	_	
72-30	8500-8509	transfers	_	_	_	_	
72-31	8509-8510	.	_	_	_	_	

#Text=At Eventbrite we have the distributed_join variable set to ‘true’.
73-1	8511-8513	At	_	_	_	_	
73-2	8514-8524	Eventbrite	_	_	_	_	
73-3	8525-8527	we	_	_	_	_	
73-4	8528-8532	have	_	_	_	_	
73-5	8533-8536	the	_	_	_	_	
73-6	8537-8553	distributed_join	_	_	_	_	
73-7	8554-8562	variable	_	_	_	_	
73-8	8563-8566	set	_	_	_	_	
73-9	8567-8569	to	_	_	_	_	
73-10	8570-8571	‘	_	_	_	_	
73-11	8571-8575	true	_	_	_	_	
73-12	8575-8576	’	_	_	_	_	
73-13	8576-8577	.	_	_	_	_	

#Text=(SHOW SESSION).
74-1	8578-8579	(	_	_	_	_	
74-2	8579-8583	SHOW	_	_	_	_	
74-3	8584-8591	SESSION	_	_	_	_	
74-4	8591-8592	)	_	_	_	_	
74-5	8592-8593	.	_	_	_	_	

#Text=Also it can be enabled by setting a session property (set session distributed_join = ‘true’).
#Text=8.
75-1	8594-8598	Also	_	_	_	_	
75-2	8599-8601	it	_	_	_	_	
75-3	8602-8605	can	_	_	_	_	
75-4	8606-8608	be	_	_	_	_	
75-5	8609-8616	enabled	_	_	_	_	
75-6	8617-8619	by	_	_	_	_	
75-7	8620-8627	setting	_	_	_	_	
75-8	8628-8629	a	_	_	_	_	
75-9	8630-8637	session	_	_	_	_	
75-10	8638-8646	property	_	_	_	_	
75-11	8647-8648	(	_	_	_	_	
75-12	8648-8651	set	_	_	_	_	
75-13	8652-8659	session	_	_	_	_	
75-14	8660-8676	distributed_join	_	_	_	_	
75-15	8677-8678	=	_	_	_	_	
75-16	8679-8680	‘	_	_	_	_	
75-17	8680-8684	true	_	_	_	_	
75-18	8684-8685	’	_	_	_	_	
75-19	8685-8686	)	_	_	_	_	
75-20	8686-8687	.	_	_	_	_	
75-21	8688-8689	8	_	_	_	_	
75-22	8689-8690	.	_	_	_	_	

#Text=Partition your data
#Text=Partitioning divides your table into parts and keeps the related data together based on column values such as date or country. 
76-1	8691-8700	Partition	_	_	_	_	
76-2	8701-8705	your	_	_	_	_	
76-3	8706-8710	data	_	_	_	_	
76-4	8711-8723	Partitioning	_	_	_	_	
76-5	8724-8731	divides	_	_	_	_	
76-6	8732-8736	your	_	_	_	_	
76-7	8737-8742	table	_	_	_	_	
76-8	8743-8747	into	_	_	_	_	
76-9	8748-8753	parts	_	_	_	_	
76-10	8754-8757	and	_	_	_	_	
76-11	8758-8763	keeps	_	_	_	_	
76-12	8764-8767	the	_	_	_	_	
76-13	8768-8775	related	_	_	_	_	
76-14	8776-8780	data	_	_	_	_	
76-15	8781-8789	together	_	_	_	_	
76-16	8790-8795	based	_	_	_	_	
76-17	8796-8798	on	_	_	_	_	
76-18	8799-8805	column	_	_	_	_	
76-19	8806-8812	values	_	_	_	_	
76-20	8813-8817	such	_	_	_	_	
76-21	8818-8820	as	_	_	_	_	
76-22	8821-8825	date	_	_	_	_	
76-23	8826-8828	or	_	_	_	_	
76-24	8829-8836	country	_	_	_	_	
76-25	8836-8837	.	_	_	_	_	
76-26	8837-8838	 	_	_	_	_	

#Text=You define partitions at table creation, and they help reduce the amount of data scanned per query, thereby improving performance.
77-1	8839-8842	You	_	_	_	_	
77-2	8843-8849	define	_	_	_	_	
77-3	8850-8860	partitions	_	_	_	_	
77-4	8861-8863	at	_	_	_	_	
77-5	8864-8869	table	_	_	_	_	
77-6	8870-8878	creation	_	_	_	_	
77-7	8878-8879	,	_	_	_	_	
77-8	8880-8883	and	_	_	_	_	
77-9	8884-8888	they	_	_	_	_	
77-10	8889-8893	help	_	_	_	_	
77-11	8894-8900	reduce	_	_	_	_	
77-12	8901-8904	the	_	_	_	_	
77-13	8905-8911	amount	_	_	_	_	
77-14	8912-8914	of	_	_	_	_	
77-15	8915-8919	data	_	_	_	_	
77-16	8920-8927	scanned	_	_	_	_	
77-17	8928-8931	per	_	_	_	_	
77-18	8932-8937	query	_	_	_	_	
77-19	8937-8938	,	_	_	_	_	
77-20	8939-8946	thereby	_	_	_	_	
77-21	8947-8956	improving	_	_	_	_	
77-22	8957-8968	performance	_	_	_	_	
77-23	8968-8969	.	_	_	_	_	

#Text=Here are some hints on partitioning:
#Text=Columns that are used as WHERE filters are good candidates for partitioning.
78-1	8970-8974	Here	_	_	_	_	
78-2	8975-8978	are	_	_	_	_	
78-3	8979-8983	some	_	_	_	_	
78-4	8984-8989	hints	_	_	_	_	
78-5	8990-8992	on	_	_	_	_	
78-6	8993-9005	partitioning	_	_	_	_	
78-7	9005-9006	:	_	_	_	_	
78-8	9007-9014	Columns	_	_	_	_	
78-9	9015-9019	that	_	_	_	_	
78-10	9020-9023	are	_	_	_	_	
78-11	9024-9028	used	_	_	_	_	
78-12	9029-9031	as	_	_	_	_	
78-13	9032-9037	WHERE	_	_	_	_	
78-14	9038-9045	filters	_	_	_	_	
78-15	9046-9049	are	_	_	_	_	
78-16	9050-9054	good	_	_	_	_	
78-17	9055-9065	candidates	_	_	_	_	
78-18	9066-9069	for	_	_	_	_	
78-19	9070-9082	partitioning	_	_	_	_	
78-20	9082-9083	.	_	_	_	_	

#Text=Partitioning has a cost.
79-1	9084-9096	Partitioning	_	_	_	_	
79-2	9097-9100	has	_	_	_	_	
79-3	9101-9102	a	_	_	_	_	
79-4	9103-9107	cost	_	_	_	_	
79-5	9107-9108	.	_	_	_	_	

#Text=As the number of partitions in your table increases, the higher the overhead of retrieving and processing the partition metadata, and the smaller your files.
80-1	9109-9111	As	_	_	_	_	
80-2	9112-9115	the	_	_	_	_	
80-3	9116-9122	number	_	_	_	_	
80-4	9123-9125	of	_	_	_	_	
80-5	9126-9136	partitions	_	_	_	_	
80-6	9137-9139	in	_	_	_	_	
80-7	9140-9144	your	_	_	_	_	
80-8	9145-9150	table	_	_	_	_	
80-9	9151-9160	increases	_	_	_	_	
80-10	9160-9161	,	_	_	_	_	
80-11	9162-9165	the	_	_	_	_	
80-12	9166-9172	higher	_	_	_	_	
80-13	9173-9176	the	_	_	_	_	
80-14	9177-9185	overhead	_	_	_	_	
80-15	9186-9188	of	_	_	_	_	
80-16	9189-9199	retrieving	_	_	_	_	
80-17	9200-9203	and	_	_	_	_	
80-18	9204-9214	processing	_	_	_	_	
80-19	9215-9218	the	_	_	_	_	
80-20	9219-9228	partition	_	_	_	_	
80-21	9229-9237	metadata	_	_	_	_	
80-22	9237-9238	,	_	_	_	_	
80-23	9239-9242	and	_	_	_	_	
80-24	9243-9246	the	_	_	_	_	
80-25	9247-9254	smaller	_	_	_	_	
80-26	9255-9259	your	_	_	_	_	
80-27	9260-9265	files	_	_	_	_	
80-28	9265-9266	.	_	_	_	_	

#Text=Use caution when partitioning and make sure you don’t partition too finely.
81-1	9267-9270	Use	_	_	_	_	
81-2	9271-9278	caution	_	_	_	_	
81-3	9279-9283	when	_	_	_	_	
81-4	9284-9296	partitioning	_	_	_	_	
81-5	9297-9300	and	_	_	_	_	
81-6	9301-9305	make	_	_	_	_	
81-7	9306-9310	sure	_	_	_	_	
81-8	9311-9314	you	_	_	_	_	
81-9	9315-9318	don	_	_	_	_	
81-10	9318-9319	’	_	_	_	_	
81-11	9319-9320	t	_	_	_	_	
81-12	9321-9330	partition	_	_	_	_	
81-13	9331-9334	too	_	_	_	_	
81-14	9335-9341	finely	_	_	_	_	
81-15	9341-9342	.	_	_	_	_	

#Text=If your data is heavily skewed to one partition value, and most queries use that value, then the overhead may wipe out the initial benefit.
82-1	9343-9345	If	_	_	_	_	
82-2	9346-9350	your	_	_	_	_	
82-3	9351-9355	data	_	_	_	_	
82-4	9356-9358	is	_	_	_	_	
82-5	9359-9366	heavily	_	_	_	_	
82-6	9367-9373	skewed	_	_	_	_	
82-7	9374-9376	to	_	_	_	_	
82-8	9377-9380	one	_	_	_	_	
82-9	9381-9390	partition	_	_	_	_	
82-10	9391-9396	value	_	_	_	_	
82-11	9396-9397	,	_	_	_	_	
82-12	9398-9401	and	_	_	_	_	
82-13	9402-9406	most	_	_	_	_	
82-14	9407-9414	queries	_	_	_	_	
82-15	9415-9418	use	_	_	_	_	
82-16	9419-9423	that	_	_	_	_	
82-17	9424-9429	value	_	_	_	_	
82-18	9429-9430	,	_	_	_	_	
82-19	9431-9435	then	_	_	_	_	
82-20	9436-9439	the	_	_	_	_	
82-21	9440-9448	overhead	_	_	_	_	
82-22	9449-9452	may	_	_	_	_	
82-23	9453-9457	wipe	_	_	_	_	
82-24	9458-9461	out	_	_	_	_	
82-25	9462-9465	the	_	_	_	_	
82-26	9466-9473	initial	_	_	_	_	
82-27	9474-9481	benefit	_	_	_	_	
82-28	9481-9482	.	_	_	_	_	

#Text=A key partition column at Eventbrite is transaction date (txn_date).
83-1	9483-9484	A	_	_	_	_	
83-2	9485-9488	key	_	_	_	_	
83-3	9489-9498	partition	_	_	_	_	
83-4	9499-9505	column	_	_	_	_	
83-5	9506-9508	at	_	_	_	_	
83-6	9509-9519	Eventbrite	_	_	_	_	
83-7	9520-9522	is	_	_	_	_	
83-8	9523-9534	transaction	_	_	_	_	
83-9	9535-9539	date	_	_	_	_	
83-10	9540-9541	(	_	_	_	_	
83-11	9541-9549	txn_date	_	_	_	_	
83-12	9549-9550	)	_	_	_	_	
83-13	9550-9551	.	_	_	_	_	

#Text=CREATE TABLE IF NOT EXISTS fact_ticket_purchase
#Text=ticket_id STRING,
#Text=....
#Text=create_date STRING,
#Text=update_date STRING
#Text=PARTITIONED BY (trx_date STRING)
#Text=STORED AS PARQUET
#Text=TBLPROPERTIES ('parquet.compression'='SNAPPY')
#Text=9.
84-1	9552-9558	CREATE	_	_	_	_	
84-2	9559-9564	TABLE	_	_	_	_	
84-3	9565-9567	IF	_	_	_	_	
84-4	9568-9571	NOT	_	_	_	_	
84-5	9572-9578	EXISTS	_	_	_	_	
84-6	9579-9599	fact_ticket_purchase	_	_	_	_	
84-7	9600-9609	ticket_id	_	_	_	_	
84-8	9610-9616	STRING	_	_	_	_	
84-9	9616-9617	,	_	_	_	_	
84-10	9618-9619	.	_	_	_	_	
84-11	9619-9620	.	_	_	_	_	
84-12	9620-9621	.	_	_	_	_	
84-13	9621-9622	.	_	_	_	_	
84-14	9623-9634	create_date	_	_	_	_	
84-15	9635-9641	STRING	_	_	_	_	
84-16	9641-9642	,	_	_	_	_	
84-17	9643-9654	update_date	_	_	_	_	
84-18	9655-9661	STRING	_	_	_	_	
84-19	9662-9673	PARTITIONED	_	_	_	_	
84-20	9674-9676	BY	_	_	_	_	
84-21	9677-9678	(	_	_	_	_	
84-22	9678-9686	trx_date	_	_	_	_	
84-23	9687-9693	STRING	_	_	_	_	
84-24	9693-9694	)	_	_	_	_	
84-25	9695-9701	STORED	_	_	_	_	
84-26	9702-9704	AS	_	_	_	_	
84-27	9705-9712	PARQUET	_	_	_	_	
84-28	9713-9726	TBLPROPERTIES	_	_	_	_	
84-29	9727-9728	(	_	_	_	_	
84-30	9728-9729	'	_	_	_	_	
84-31	9729-9748	parquet.compression	_	_	_	_	
84-32	9748-9749	'	_	_	_	_	
84-33	9749-9750	=	_	_	_	_	
84-34	9750-9751	'	_	_	_	_	
84-35	9751-9757	SNAPPY	_	_	_	_	
84-36	9757-9758	'	_	_	_	_	
84-37	9758-9759	)	_	_	_	_	
84-38	9760-9761	9	_	_	_	_	
84-39	9761-9762	.	_	_	_	_	

#Text=Optimize columnar data store generation
#Text=Apache Parquet and Apache ORC are popular columnar data stores.
85-1	9763-9771	Optimize	_	_	_	_	
85-2	9772-9780	columnar	_	_	_	_	
85-3	9781-9785	data	_	_	_	_	
85-4	9786-9791	store	_	_	_	_	
85-5	9792-9802	generation	_	_	_	_	
85-6	9803-9809	Apache	_	_	_	_	
85-7	9810-9817	Parquet	_	_	_	_	
85-8	9818-9821	and	_	_	_	_	
85-9	9822-9828	Apache	_	_	_	_	
85-10	9829-9832	ORC	_	_	_	_	
85-11	9833-9836	are	_	_	_	_	
85-12	9837-9844	popular	_	_	_	_	
85-13	9845-9853	columnar	_	_	_	_	
85-14	9854-9858	data	_	_	_	_	
85-15	9859-9865	stores	_	_	_	_	
85-16	9865-9866	.	_	_	_	_	

#Text=They provide features that store data efficiently by using column-wise compression based on data type, special encoding, and predicate pushdown.
86-1	9867-9871	They	_	_	_	_	
86-2	9872-9879	provide	_	_	_	_	
86-3	9880-9888	features	_	_	_	_	
86-4	9889-9893	that	_	_	_	_	
86-5	9894-9899	store	_	_	_	_	
86-6	9900-9904	data	_	_	_	_	
86-7	9905-9916	efficiently	_	_	_	_	
86-8	9917-9919	by	_	_	_	_	
86-9	9920-9925	using	_	_	_	_	
86-10	9926-9937	column-wise	_	_	_	_	
86-11	9938-9949	compression	_	_	_	_	
86-12	9950-9955	based	_	_	_	_	
86-13	9956-9958	on	_	_	_	_	
86-14	9959-9963	data	_	_	_	_	
86-15	9964-9968	type	_	_	_	_	
86-16	9968-9969	,	_	_	_	_	
86-17	9970-9977	special	_	_	_	_	
86-18	9978-9986	encoding	_	_	_	_	
86-19	9986-9987	,	_	_	_	_	
86-20	9988-9991	and	_	_	_	_	
86-21	9992-10001	predicate	_	_	_	_	
86-22	10002-10010	pushdown	_	_	_	_	
86-23	10010-10011	.	_	_	_	_	

#Text=At Eventbrite, we define Hive tables as PARQUET using compression equal to SNAPPY….
87-1	10012-10014	At	_	_	_	_	
87-2	10015-10025	Eventbrite	_	_	_	_	
87-3	10025-10026	,	_	_	_	_	
87-4	10027-10029	we	_	_	_	_	
87-5	10030-10036	define	_	_	_	_	
87-6	10037-10041	Hive	_	_	_	_	
87-7	10042-10048	tables	_	_	_	_	
87-8	10049-10051	as	_	_	_	_	
87-9	10052-10059	PARQUET	_	_	_	_	
87-10	10060-10065	using	_	_	_	_	
87-11	10066-10077	compression	_	_	_	_	
87-12	10078-10083	equal	_	_	_	_	
87-13	10084-10086	to	_	_	_	_	
87-14	10087-10093	SNAPPY	_	_	_	_	
87-15	10093-10094	…	_	_	_	_	
87-16	10094-10095	.	_	_	_	_	

#Text=CREATE TABLE IF NOT EXISTS dim_event
#Text=dim_event_id STRING,
#Text=....
#Text=create_date STRING,
#Text=update_date STRING,
#Text=STORED AS PARQUET
#Text=TBLPROPERTIES ('parquet.compression'='SNAPPY')
#Text=Apache Parquet is an open-source, column-oriented data storage format.
88-1	10096-10102	CREATE	_	_	_	_	
88-2	10103-10108	TABLE	_	_	_	_	
88-3	10109-10111	IF	_	_	_	_	
88-4	10112-10115	NOT	_	_	_	_	
88-5	10116-10122	EXISTS	_	_	_	_	
88-6	10123-10132	dim_event	_	_	_	_	
88-7	10133-10145	dim_event_id	_	_	_	_	
88-8	10146-10152	STRING	_	_	_	_	
88-9	10152-10153	,	_	_	_	_	
88-10	10154-10155	.	_	_	_	_	
88-11	10155-10156	.	_	_	_	_	
88-12	10156-10157	.	_	_	_	_	
88-13	10157-10158	.	_	_	_	_	
88-14	10159-10170	create_date	_	_	_	_	
88-15	10171-10177	STRING	_	_	_	_	
88-16	10177-10178	,	_	_	_	_	
88-17	10179-10190	update_date	_	_	_	_	
88-18	10191-10197	STRING	_	_	_	_	
88-19	10197-10198	,	_	_	_	_	
88-20	10199-10205	STORED	_	_	_	_	
88-21	10206-10208	AS	_	_	_	_	
88-22	10209-10216	PARQUET	_	_	_	_	
88-23	10217-10230	TBLPROPERTIES	_	_	_	_	
88-24	10231-10232	(	_	_	_	_	
88-25	10232-10233	'	_	_	_	_	
88-26	10233-10252	parquet.compression	_	_	_	_	
88-27	10252-10253	'	_	_	_	_	
88-28	10253-10254	=	_	_	_	_	
88-29	10254-10255	'	_	_	_	_	
88-30	10255-10261	SNAPPY	_	_	_	_	
88-31	10261-10262	'	_	_	_	_	
88-32	10262-10263	)	_	_	_	_	
88-33	10264-10270	Apache	_	_	_	_	
88-34	10271-10278	Parquet	_	_	_	_	
88-35	10279-10281	is	_	_	_	_	
88-36	10282-10284	an	_	_	_	_	
88-37	10285-10296	open-source	_	_	_	_	
88-38	10296-10297	,	_	_	_	_	
88-39	10298-10313	column-oriented	_	_	_	_	
88-40	10314-10318	data	_	_	_	_	
88-41	10319-10326	storage	_	_	_	_	
88-42	10327-10333	format	_	_	_	_	
88-43	10333-10334	.	_	_	_	_	

#Text=Snappy is designed for speed and will not overload your CPU cores.
89-1	10335-10341	Snappy	_	_	_	_	
89-2	10342-10344	is	_	_	_	_	
89-3	10345-10353	designed	_	_	_	_	
89-4	10354-10357	for	_	_	_	_	
89-5	10358-10363	speed	_	_	_	_	
89-6	10364-10367	and	_	_	_	_	
89-7	10368-10372	will	_	_	_	_	
89-8	10373-10376	not	_	_	_	_	
89-9	10377-10385	overload	_	_	_	_	
89-10	10386-10390	your	_	_	_	_	
89-11	10391-10394	CPU	_	_	_	_	
89-12	10395-10400	cores	_	_	_	_	
89-13	10400-10401	.	_	_	_	_	

#Text=The downside of course is that it does not compress as well as gzip or bzip2.
#Text=10.
90-1	10402-10405	The	_	_	_	_	
90-2	10406-10414	downside	_	_	_	_	
90-3	10415-10417	of	_	_	_	_	
90-4	10418-10424	course	_	_	_	_	
90-5	10425-10427	is	_	_	_	_	
90-6	10428-10432	that	_	_	_	_	
90-7	10433-10435	it	_	_	_	_	
90-8	10436-10440	does	_	_	_	_	
90-9	10441-10444	not	_	_	_	_	
90-10	10445-10453	compress	_	_	_	_	
90-11	10454-10456	as	_	_	_	_	
90-12	10457-10461	well	_	_	_	_	
90-13	10462-10464	as	_	_	_	_	
90-14	10465-10469	gzip	_	_	_	_	
90-15	10470-10472	or	_	_	_	_	
90-16	10473-10478	bzip2	_	_	_	_	
90-17	10478-10479	.	_	_	_	_	
90-18	10480-10482	10	_	_	_	_	
90-19	10482-10483	.	_	_	_	_	

#Text=Presto’s Cost-Based Optimizer/Join Reordering
#Text=We’re not currently using Presto’s Cost-Based Optimizer (CBO)!
91-1	10484-10490	Presto	_	_	_	_	
91-2	10490-10491	’	_	_	_	_	
91-3	10491-10492	s	_	_	_	_	
91-4	10493-10503	Cost-Based	_	_	_	_	
91-5	10504-10513	Optimizer	_	_	_	_	
91-6	10513-10514	/	_	_	_	_	
91-7	10514-10518	Join	_	_	_	_	
91-8	10519-10529	Reordering	_	_	_	_	
91-9	10530-10532	We	_	_	_	_	
91-10	10532-10533	’	_	_	_	_	
91-11	10533-10535	re	_	_	_	_	
91-12	10536-10539	not	_	_	_	_	
91-13	10540-10549	currently	_	_	_	_	
91-14	10550-10555	using	_	_	_	_	
91-15	10556-10562	Presto	_	_	_	_	
91-16	10562-10563	’	_	_	_	_	
91-17	10563-10564	s	_	_	_	_	
91-18	10565-10575	Cost-Based	_	_	_	_	
91-19	10576-10585	Optimizer	_	_	_	_	
91-20	10586-10587	(	_	_	_	_	
91-21	10587-10590	CBO	_	_	_	_	
91-22	10590-10591	)	_	_	_	_	
91-23	10591-10592	!	_	_	_	_	

#Text=Eventbrite data engineering released Presto 330 in March 2020, but we haven’t tested CBO yet.
92-1	10593-10603	Eventbrite	_	_	_	_	
92-2	10604-10608	data	_	_	_	_	
92-3	10609-10620	engineering	_	_	_	_	
92-4	10621-10629	released	_	_	_	_	
92-5	10630-10636	Presto	_	_	_	_	
92-6	10637-10640	330	_	_	_	_	
92-7	10641-10643	in	_	_	_	_	
92-8	10644-10649	March	_	_	_	_	
92-9	10650-10654	2020	_	_	_	_	
92-10	10654-10655	,	_	_	_	_	
92-11	10656-10659	but	_	_	_	_	
92-12	10660-10662	we	_	_	_	_	
92-13	10663-10668	haven	_	_	_	_	
92-14	10668-10669	’	_	_	_	_	
92-15	10669-10670	t	_	_	_	_	
92-16	10671-10677	tested	_	_	_	_	
92-17	10678-10681	CBO	_	_	_	_	
92-18	10682-10685	yet	_	_	_	_	
92-19	10685-10686	.	_	_	_	_	

#Text=CBO inherently requires the table stats be up-to-date which we only calculate for a small subset of tables!
93-1	10687-10690	CBO	_	_	_	_	
93-2	10691-10701	inherently	_	_	_	_	
93-3	10702-10710	requires	_	_	_	_	
93-4	10711-10714	the	_	_	_	_	
93-5	10715-10720	table	_	_	_	_	
93-6	10721-10726	stats	_	_	_	_	
93-7	10727-10729	be	_	_	_	_	
93-8	10730-10740	up-to-date	_	_	_	_	
93-9	10741-10746	which	_	_	_	_	
93-10	10747-10749	we	_	_	_	_	
93-11	10750-10754	only	_	_	_	_	
93-12	10755-10764	calculate	_	_	_	_	
93-13	10765-10768	for	_	_	_	_	
93-14	10769-10770	a	_	_	_	_	
93-15	10771-10776	small	_	_	_	_	
93-16	10777-10783	subset	_	_	_	_	
93-17	10784-10786	of	_	_	_	_	
93-18	10787-10793	tables	_	_	_	_	
93-19	10793-10794	!	_	_	_	_	

#Text=Using the CBO, Presto will be able to intelligently decide the best sequence based on the statistics stored in the Hive Metastore.
94-1	10795-10800	Using	_	_	_	_	
94-2	10801-10804	the	_	_	_	_	
94-3	10805-10808	CBO	_	_	_	_	
94-4	10808-10809	,	_	_	_	_	
94-5	10810-10816	Presto	_	_	_	_	
94-6	10817-10821	will	_	_	_	_	
94-7	10822-10824	be	_	_	_	_	
94-8	10825-10829	able	_	_	_	_	
94-9	10830-10832	to	_	_	_	_	
94-10	10833-10846	intelligently	_	_	_	_	
94-11	10847-10853	decide	_	_	_	_	
94-12	10854-10857	the	_	_	_	_	
94-13	10858-10862	best	_	_	_	_	
94-14	10863-10871	sequence	_	_	_	_	
94-15	10872-10877	based	_	_	_	_	
94-16	10878-10880	on	_	_	_	_	
94-17	10881-10884	the	_	_	_	_	
94-18	10885-10895	statistics	_	_	_	_	
94-19	10896-10902	stored	_	_	_	_	
94-20	10903-10905	in	_	_	_	_	
94-21	10906-10909	the	_	_	_	_	
94-22	10910-10914	Hive	_	_	_	_	
94-23	10915-10924	Metastore	_	_	_	_	
94-24	10924-10925	.	_	_	_	_	

#Text=As mentioned above, the order in which joins are executed in a query can have a big impact on performance.
95-1	10926-10928	As	_	_	_	_	
95-2	10929-10938	mentioned	_	_	_	_	
95-3	10939-10944	above	_	_	_	_	
95-4	10944-10945	,	_	_	_	_	
95-5	10946-10949	the	_	_	_	_	
95-6	10950-10955	order	_	_	_	_	
95-7	10956-10958	in	_	_	_	_	
95-8	10959-10964	which	_	_	_	_	
95-9	10965-10970	joins	_	_	_	_	
95-10	10971-10974	are	_	_	_	_	
95-11	10975-10983	executed	_	_	_	_	
95-12	10984-10986	in	_	_	_	_	
95-13	10987-10988	a	_	_	_	_	
95-14	10989-10994	query	_	_	_	_	
95-15	10995-10998	can	_	_	_	_	
95-16	10999-11003	have	_	_	_	_	
95-17	11004-11005	a	_	_	_	_	
95-18	11006-11009	big	_	_	_	_	
95-19	11010-11016	impact	_	_	_	_	
95-20	11017-11019	on	_	_	_	_	
95-21	11020-11031	performance	_	_	_	_	
95-22	11031-11032	.	_	_	_	_	

#Text=If we collect table statistics then the CBO can automatically pick the join order with the lowest computed costs.
96-1	11033-11035	If	_	_	_	_	
96-2	11036-11038	we	_	_	_	_	
96-3	11039-11046	collect	_	_	_	_	
96-4	11047-11052	table	_	_	_	_	
96-5	11053-11063	statistics	_	_	_	_	
96-6	11064-11068	then	_	_	_	_	
96-7	11069-11072	the	_	_	_	_	
96-8	11073-11076	CBO	_	_	_	_	
96-9	11077-11080	can	_	_	_	_	
96-10	11081-11094	automatically	_	_	_	_	
96-11	11095-11099	pick	_	_	_	_	
96-12	11100-11103	the	_	_	_	_	
96-13	11104-11108	join	_	_	_	_	
96-14	11109-11114	order	_	_	_	_	
96-15	11115-11119	with	_	_	_	_	
96-16	11120-11123	the	_	_	_	_	
96-17	11124-11130	lowest	_	_	_	_	
96-18	11131-11139	computed	_	_	_	_	
96-19	11140-11145	costs	_	_	_	_	
96-20	11145-11146	.	_	_	_	_	

#Text=This is governed by the join_reordering_strategy (=AUTOMATIC) session property and I’m really excited to see this feature in action.
97-1	11147-11151	This	_	_	_	_	
97-2	11152-11154	is	_	_	_	_	
97-3	11155-11163	governed	_	_	_	_	
97-4	11164-11166	by	_	_	_	_	
97-5	11167-11170	the	_	_	_	_	
97-6	11171-11195	join_reordering_strategy	*	parameter	_	_	
97-7	11196-11197	(	_	_	_	_	
97-8	11197-11198	=	_	_	_	_	
97-9	11198-11207	AUTOMATIC	*	value	Associated-With	97-6	
97-10	11207-11208	)	_	_	_	_	
97-11	11209-11216	session	_	_	_	_	
97-12	11217-11225	property	_	_	_	_	
97-13	11226-11229	and	_	_	_	_	
97-14	11230-11231	I	_	_	_	_	
97-15	11231-11232	’	_	_	_	_	
97-16	11232-11233	m	_	_	_	_	
97-17	11234-11240	really	_	_	_	_	
97-18	11241-11248	excited	_	_	_	_	
97-19	11249-11251	to	_	_	_	_	
97-20	11252-11255	see	_	_	_	_	
97-21	11256-11260	this	_	_	_	_	
97-22	11261-11268	feature	_	_	_	_	
97-23	11269-11271	in	_	_	_	_	
97-24	11272-11278	action	_	_	_	_	
97-25	11278-11279	.	_	_	_	_	

#Text=Another interesting join optimization is dynamic filtering.
98-1	11280-11287	Another	_	_	_	_	
98-2	11288-11299	interesting	_	_	_	_	
98-3	11300-11304	join	_	_	_	_	
98-4	11305-11317	optimization	_	_	_	_	
98-5	11318-11320	is	_	_	_	_	
98-6	11321-11328	dynamic	_	_	_	_	
98-7	11329-11338	filtering	_	_	_	_	
98-8	11338-11339	.	_	_	_	_	

#Text=It relies on the stats estimates of the CBO to correctly convert the join distribution type to “broadcast” join.
99-1	11340-11342	It	_	_	_	_	
99-2	11343-11349	relies	_	_	_	_	
99-3	11350-11352	on	_	_	_	_	
99-4	11353-11356	the	_	_	_	_	
99-5	11357-11362	stats	_	_	_	_	
99-6	11363-11372	estimates	_	_	_	_	
99-7	11373-11375	of	_	_	_	_	
99-8	11376-11379	the	_	_	_	_	
99-9	11380-11383	CBO	_	_	_	_	
99-10	11384-11386	to	_	_	_	_	
99-11	11387-11396	correctly	_	_	_	_	
99-12	11397-11404	convert	_	_	_	_	
99-13	11405-11408	the	_	_	_	_	
99-14	11409-11413	join	_	_	_	_	
99-15	11414-11426	distribution	_	_	_	_	
99-16	11427-11431	type	_	_	_	_	
99-17	11432-11434	to	_	_	_	_	
99-18	11435-11436	“	_	_	_	_	
99-19	11436-11445	broadcast	_	_	_	_	
99-20	11445-11446	”	_	_	_	_	
99-21	11447-11451	join	_	_	_	_	
99-22	11451-11452	.	_	_	_	_	

#Text=By using dynamic filtering via run-time predicate pushdown, we can squeeze out more performance gains for highly-selective inner-joins. 
100-1	11453-11455	By	_	_	_	_	
100-2	11456-11461	using	_	_	_	_	
100-3	11462-11469	dynamic	_	_	_	_	
100-4	11470-11479	filtering	_	_	_	_	
100-5	11480-11483	via	_	_	_	_	
100-6	11484-11492	run-time	_	_	_	_	
100-7	11493-11502	predicate	_	_	_	_	
100-8	11503-11511	pushdown	_	_	_	_	
100-9	11511-11512	,	_	_	_	_	
100-10	11513-11515	we	_	_	_	_	
100-11	11516-11519	can	_	_	_	_	
100-12	11520-11527	squeeze	_	_	_	_	
100-13	11528-11531	out	_	_	_	_	
100-14	11532-11536	more	_	_	_	_	
100-15	11537-11548	performance	_	_	_	_	
100-16	11549-11554	gains	_	_	_	_	
100-17	11555-11558	for	_	_	_	_	
100-18	11559-11575	highly-selective	_	_	_	_	
100-19	11576-11587	inner-joins	_	_	_	_	
100-20	11587-11588	.	_	_	_	_	
100-21	11588-11589	 	_	_	_	_	

#Text=We look forward to using this feature in the near future!
101-1	11590-11592	We	_	_	_	_	
101-2	11593-11597	look	_	_	_	_	
101-3	11598-11605	forward	_	_	_	_	
101-4	11606-11608	to	_	_	_	_	
101-5	11609-11614	using	_	_	_	_	
101-6	11615-11619	this	_	_	_	_	
101-7	11620-11627	feature	_	_	_	_	
101-8	11628-11630	in	_	_	_	_	
101-9	11631-11634	the	_	_	_	_	
101-10	11635-11639	near	_	_	_	_	
101-11	11640-11646	future	_	_	_	_	
101-12	11646-11647	!	_	_	_	_	

#Text=11.
102-1	11648-11650	11	_	_	_	_	
102-2	11650-11651	.	_	_	_	_	

#Text=Using WITH Clause
#Text=The WITH clause is used to define an inline view within a single query. 
103-1	11652-11657	Using	_	_	_	_	
103-2	11658-11662	WITH	_	_	_	_	
103-3	11663-11669	Clause	_	_	_	_	
103-4	11670-11673	The	_	_	_	_	
103-5	11674-11678	WITH	_	_	_	_	
103-6	11679-11685	clause	_	_	_	_	
103-7	11686-11688	is	_	_	_	_	
103-8	11689-11693	used	_	_	_	_	
103-9	11694-11696	to	_	_	_	_	
103-10	11697-11703	define	_	_	_	_	
103-11	11704-11706	an	_	_	_	_	
103-12	11707-11713	inline	_	_	_	_	
103-13	11714-11718	view	_	_	_	_	
103-14	11719-11725	within	_	_	_	_	
103-15	11726-11727	a	_	_	_	_	
103-16	11728-11734	single	_	_	_	_	
103-17	11735-11740	query	_	_	_	_	
103-18	11740-11741	.	_	_	_	_	
103-19	11741-11742	 	_	_	_	_	

#Text=It allows for flattening nested subqueries.
104-1	11743-11745	It	_	_	_	_	
104-2	11746-11752	allows	_	_	_	_	
104-3	11753-11756	for	_	_	_	_	
104-4	11757-11767	flattening	_	_	_	_	
104-5	11768-11774	nested	_	_	_	_	
104-6	11775-11785	subqueries	_	_	_	_	
104-7	11785-11786	.	_	_	_	_	

#Text=I find it hugely helpful for simplifying SQL, and making it more readable and easier to support.
#Text=12.
105-1	11787-11788	I	_	_	_	_	
105-2	11789-11793	find	_	_	_	_	
105-3	11794-11796	it	_	_	_	_	
105-4	11797-11803	hugely	_	_	_	_	
105-5	11804-11811	helpful	_	_	_	_	
105-6	11812-11815	for	_	_	_	_	
105-7	11816-11827	simplifying	_	_	_	_	
105-8	11828-11831	SQL	_	_	_	_	
105-9	11831-11832	,	_	_	_	_	
105-10	11833-11836	and	_	_	_	_	
105-11	11837-11843	making	_	_	_	_	
105-12	11844-11846	it	_	_	_	_	
105-13	11847-11851	more	_	_	_	_	
105-14	11852-11860	readable	_	_	_	_	
105-15	11861-11864	and	_	_	_	_	
105-16	11865-11871	easier	_	_	_	_	
105-17	11872-11874	to	_	_	_	_	
105-18	11875-11882	support	_	_	_	_	
105-19	11882-11883	.	_	_	_	_	
105-20	11884-11886	12	_	_	_	_	
105-21	11886-11887	.	_	_	_	_	

#Text=Use Presto Web Interface
#Text=Presto provides a web interface for monitoring queries (https://prestodb.io/docs/current/admin/web-interface.html).
106-1	11888-11891	Use	_	_	_	_	
106-2	11892-11898	Presto	_	_	_	_	
106-3	11899-11902	Web	_	_	_	_	
106-4	11903-11912	Interface	_	_	_	_	
106-5	11913-11919	Presto	_	_	_	_	
106-6	11920-11928	provides	_	_	_	_	
106-7	11929-11930	a	_	_	_	_	
106-8	11931-11934	web	_	_	_	_	
106-9	11935-11944	interface	_	_	_	_	
106-10	11945-11948	for	_	_	_	_	
106-11	11949-11959	monitoring	_	_	_	_	
106-12	11960-11967	queries	_	_	_	_	
106-13	11968-11969	(	_	_	_	_	
106-14	11969-11974	https	_	_	_	_	
106-15	11974-11975	:	_	_	_	_	
106-16	11975-11976	/	_	_	_	_	
106-17	11976-11977	/	_	_	_	_	
106-18	11977-11988	prestodb.io	_	_	_	_	
106-19	11988-11989	/	_	_	_	_	
106-20	11989-11993	docs	_	_	_	_	
106-21	11993-11994	/	_	_	_	_	
106-22	11994-12001	current	_	_	_	_	
106-23	12001-12002	/	_	_	_	_	
106-24	12002-12007	admin	_	_	_	_	
106-25	12007-12008	/	_	_	_	_	
106-26	12008-12026	web-interface.html	_	_	_	_	
106-27	12026-12027	)	_	_	_	_	
106-28	12027-12028	.	_	_	_	_	

#Text=The main page has a list of queries along with information like unique query ID, query text, query state, percentage completed, username and source from which this query originated.
107-1	12029-12032	The	_	_	_	_	
107-2	12033-12037	main	_	_	_	_	
107-3	12038-12042	page	_	_	_	_	
107-4	12043-12046	has	_	_	_	_	
107-5	12047-12048	a	_	_	_	_	
107-6	12049-12053	list	_	_	_	_	
107-7	12054-12056	of	_	_	_	_	
107-8	12057-12064	queries	_	_	_	_	
107-9	12065-12070	along	_	_	_	_	
107-10	12071-12075	with	_	_	_	_	
107-11	12076-12087	information	_	_	_	_	
107-12	12088-12092	like	_	_	_	_	
107-13	12093-12099	unique	_	_	_	_	
107-14	12100-12105	query	_	_	_	_	
107-15	12106-12108	ID	_	_	_	_	
107-16	12108-12109	,	_	_	_	_	
107-17	12110-12115	query	_	_	_	_	
107-18	12116-12120	text	_	_	_	_	
107-19	12120-12121	,	_	_	_	_	
107-20	12122-12127	query	_	_	_	_	
107-21	12128-12133	state	_	_	_	_	
107-22	12133-12134	,	_	_	_	_	
107-23	12135-12145	percentage	_	_	_	_	
107-24	12146-12155	completed	_	_	_	_	
107-25	12155-12156	,	_	_	_	_	
107-26	12157-12165	username	_	_	_	_	
107-27	12166-12169	and	_	_	_	_	
107-28	12170-12176	source	_	_	_	_	
107-29	12177-12181	from	_	_	_	_	
107-30	12182-12187	which	_	_	_	_	
107-31	12188-12192	this	_	_	_	_	
107-32	12193-12198	query	_	_	_	_	
107-33	12199-12209	originated	_	_	_	_	
107-34	12209-12210	.	_	_	_	_	

#Text=If Presto cluster is having any performance-related issues, this web interface is a good place to go to identify and capture slow running SQL!
108-1	12211-12213	If	_	_	_	_	
108-2	12214-12220	Presto	_	_	_	_	
108-3	12221-12228	cluster	_	_	_	_	
108-4	12229-12231	is	_	_	_	_	
108-5	12232-12238	having	_	_	_	_	
108-6	12239-12242	any	_	_	_	_	
108-7	12243-12262	performance-related	_	_	_	_	
108-8	12263-12269	issues	_	_	_	_	
108-9	12269-12270	,	_	_	_	_	
108-10	12271-12275	this	_	_	_	_	
108-11	12276-12279	web	_	_	_	_	
108-12	12280-12289	interface	_	_	_	_	
108-13	12290-12292	is	_	_	_	_	
108-14	12293-12294	a	_	_	_	_	
108-15	12295-12299	good	_	_	_	_	
108-16	12300-12305	place	_	_	_	_	
108-17	12306-12308	to	_	_	_	_	
108-18	12309-12311	go	_	_	_	_	
108-19	12312-12314	to	_	_	_	_	
108-20	12315-12323	identify	_	_	_	_	
108-21	12324-12327	and	_	_	_	_	
108-22	12328-12335	capture	_	_	_	_	
108-23	12336-12340	slow	_	_	_	_	
108-24	12341-12348	running	_	_	_	_	
108-25	12349-12352	SQL	_	_	_	_	
108-26	12352-12353	!	_	_	_	_	

#Text=13.
109-1	12354-12356	13	_	_	_	_	
109-2	12356-12357	.	_	_	_	_	

#Text=Explain plan with Presto/Hive (Sample)
#Text=EXPLAIN is an invaluable tool for showing the logical or distributed execution plan of a statement and to validate the SQL statements.
#Text=— Logical Plan with Presto
#Text=explain select SUBSTRING(last_modified,1,4) ,count(*)  from hive.df_machine_learning.event_text where lower(name) like ‘%wilbraham%’ or (REGEXP_LIKE(lower(name), ‘.
110-1	12358-12365	Explain	_	_	_	_	
110-2	12366-12370	plan	_	_	_	_	
110-3	12371-12375	with	_	_	_	_	
110-4	12376-12382	Presto	_	_	_	_	
110-5	12382-12383	/	_	_	_	_	
110-6	12383-12387	Hive	_	_	_	_	
110-7	12388-12389	(	_	_	_	_	
110-8	12389-12395	Sample	_	_	_	_	
110-9	12395-12396	)	_	_	_	_	
110-10	12397-12404	EXPLAIN	_	_	_	_	
110-11	12405-12407	is	_	_	_	_	
110-12	12408-12410	an	_	_	_	_	
110-13	12411-12421	invaluable	_	_	_	_	
110-14	12422-12426	tool	_	_	_	_	
110-15	12427-12430	for	_	_	_	_	
110-16	12431-12438	showing	_	_	_	_	
110-17	12439-12442	the	_	_	_	_	
110-18	12443-12450	logical	_	_	_	_	
110-19	12451-12453	or	_	_	_	_	
110-20	12454-12465	distributed	_	_	_	_	
110-21	12466-12475	execution	_	_	_	_	
110-22	12476-12480	plan	_	_	_	_	
110-23	12481-12483	of	_	_	_	_	
110-24	12484-12485	a	_	_	_	_	
110-25	12486-12495	statement	_	_	_	_	
110-26	12496-12499	and	_	_	_	_	
110-27	12500-12502	to	_	_	_	_	
110-28	12503-12511	validate	_	_	_	_	
110-29	12512-12515	the	_	_	_	_	
110-30	12516-12519	SQL	_	_	_	_	
110-31	12520-12530	statements	_	_	_	_	
110-32	12530-12531	.	_	_	_	_	
110-33	12532-12533	—	_	_	_	_	
110-34	12534-12541	Logical	_	_	_	_	
110-35	12542-12546	Plan	_	_	_	_	
110-36	12547-12551	with	_	_	_	_	
110-37	12552-12558	Presto	_	_	_	_	
110-38	12559-12566	explain	_	_	_	_	
110-39	12567-12573	select	_	_	_	_	
110-40	12574-12583	SUBSTRING	_	_	_	_	
110-41	12583-12584	(	_	_	_	_	
110-42	12584-12597	last_modified	_	_	_	_	
110-43	12597-12598	,	_	_	_	_	
110-44	12598-12601	1,4	_	_	_	_	
110-45	12601-12602	)	_	_	_	_	
110-46	12603-12604	,	_	_	_	_	
110-47	12604-12609	count	_	_	_	_	
110-48	12609-12610	(	_	_	_	_	
110-49	12610-12611	*	_	_	_	_	
110-50	12611-12612	)	_	_	_	_	
110-51	12612-12613	 	_	_	_	_	
110-52	12614-12618	from	_	_	_	_	
110-53	12619-12654	hive.df_machine_learning.event_text	_	_	_	_	
110-54	12655-12660	where	_	_	_	_	
110-55	12661-12666	lower	_	_	_	_	
110-56	12666-12667	(	_	_	_	_	
110-57	12667-12671	name	_	_	_	_	
110-58	12671-12672	)	_	_	_	_	
110-59	12673-12677	like	_	_	_	_	
110-60	12678-12679	‘	_	_	_	_	
110-61	12679-12680	%	_	_	_	_	
110-62	12680-12689	wilbraham	_	_	_	_	
110-63	12689-12690	%	_	_	_	_	
110-64	12690-12691	’	_	_	_	_	
110-65	12692-12694	or	_	_	_	_	
110-66	12695-12696	(	_	_	_	_	
110-67	12696-12707	REGEXP_LIKE	_	_	_	_	
110-68	12707-12708	(	_	_	_	_	
110-69	12708-12713	lower	_	_	_	_	
110-70	12713-12714	(	_	_	_	_	
110-71	12714-12718	name	_	_	_	_	
110-72	12718-12719	)	_	_	_	_	
110-73	12719-12720	,	_	_	_	_	
110-74	12721-12722	‘	_	_	_	_	
110-75	12722-12723	.	_	_	_	_	

#Text=*wilbraham.*’)) group by 1 order by 1;
#Text=14.
111-1	12723-12724	*	_	_	_	_	
111-2	12724-12733	wilbraham	_	_	_	_	
111-3	12733-12734	.	_	_	_	_	
111-4	12734-12735	*	_	_	_	_	
111-5	12735-12736	’	_	_	_	_	
111-6	12736-12737	)	_	_	_	_	
111-7	12737-12738	)	_	_	_	_	
111-8	12739-12744	group	_	_	_	_	
111-9	12745-12747	by	_	_	_	_	
111-10	12748-12749	1	_	_	_	_	
111-11	12750-12755	order	_	_	_	_	
111-12	12756-12758	by	_	_	_	_	
111-13	12759-12760	1	_	_	_	_	
111-14	12760-12761	;	_	_	_	_	
111-15	12762-12764	14	_	_	_	_	
111-16	12764-12765	.	_	_	_	_	

#Text=Explain plan with MySQL (Sample)
#Text=In this particular case you can see that the primary key is used on the ‘ejp_events’ table and the non-primary key on the “ejp_orders’ table.
112-1	12766-12773	Explain	_	_	_	_	
112-2	12774-12778	plan	_	_	_	_	
112-3	12779-12783	with	_	_	_	_	
112-4	12784-12789	MySQL	_	_	_	_	
112-5	12790-12791	(	_	_	_	_	
112-6	12791-12797	Sample	_	_	_	_	
112-7	12797-12798	)	_	_	_	_	
112-8	12799-12801	In	_	_	_	_	
112-9	12802-12806	this	_	_	_	_	
112-10	12807-12817	particular	_	_	_	_	
112-11	12818-12822	case	_	_	_	_	
112-12	12823-12826	you	_	_	_	_	
112-13	12827-12830	can	_	_	_	_	
112-14	12831-12834	see	_	_	_	_	
112-15	12835-12839	that	_	_	_	_	
112-16	12840-12843	the	_	_	_	_	
112-17	12844-12851	primary	_	_	_	_	
112-18	12852-12855	key	_	_	_	_	
112-19	12856-12858	is	_	_	_	_	
112-20	12859-12863	used	_	_	_	_	
112-21	12864-12866	on	_	_	_	_	
112-22	12867-12870	the	_	_	_	_	
112-23	12871-12872	‘	_	_	_	_	
112-24	12872-12882	ejp_events	_	_	_	_	
112-25	12882-12883	’	_	_	_	_	
112-26	12884-12889	table	_	_	_	_	
112-27	12890-12893	and	_	_	_	_	
112-28	12894-12897	the	_	_	_	_	
112-29	12898-12909	non-primary	_	_	_	_	
112-30	12910-12913	key	_	_	_	_	
112-31	12914-12916	on	_	_	_	_	
112-32	12917-12920	the	_	_	_	_	
112-33	12921-12922	“	_	_	_	_	
112-34	12922-12932	ejp_orders	_	_	_	_	
112-35	12932-12933	’	_	_	_	_	
112-36	12934-12939	table	_	_	_	_	
112-37	12939-12940	.	_	_	_	_	

#Text=This query is going to be fast!
113-1	12941-12945	This	_	_	_	_	
113-2	12946-12951	query	_	_	_	_	
113-3	12952-12954	is	_	_	_	_	
113-4	12955-12960	going	_	_	_	_	
113-5	12961-12963	to	_	_	_	_	
113-6	12964-12966	be	_	_	_	_	
113-7	12967-12971	fast	_	_	_	_	
113-8	12971-12972	!	_	_	_	_	

#Text=Conclusion
#Text=Presto is the “SQL-on-Anything” solution that powers Eventbrite’s data warehouse.
114-1	12973-12983	Conclusion	_	_	_	_	
114-2	12984-12990	Presto	_	_	_	_	
114-3	12991-12993	is	_	_	_	_	
114-4	12994-12997	the	_	_	_	_	
114-5	12998-12999	“	_	_	_	_	
114-6	12999-13014	SQL-on-Anything	_	_	_	_	
114-7	13014-13015	”	_	_	_	_	
114-8	13016-13024	solution	_	_	_	_	
114-9	13025-13029	that	_	_	_	_	
114-10	13030-13036	powers	_	_	_	_	
114-11	13037-13047	Eventbrite	_	_	_	_	
114-12	13047-13048	’	_	_	_	_	
114-13	13048-13049	s	_	_	_	_	
114-14	13050-13054	data	_	_	_	_	
114-15	13055-13064	warehouse	_	_	_	_	
114-16	13064-13065	.	_	_	_	_	

#Text=It’s been very rewarding for me as the “Old School DBA” to learn new SQL tricks related to a distributed query engine such as Presto.
115-1	13066-13068	It	_	_	_	_	
115-2	13068-13069	’	_	_	_	_	
115-3	13069-13070	s	_	_	_	_	
115-4	13071-13075	been	_	_	_	_	
115-5	13076-13080	very	_	_	_	_	
115-6	13081-13090	rewarding	_	_	_	_	
115-7	13091-13094	for	_	_	_	_	
115-8	13095-13097	me	_	_	_	_	
115-9	13098-13100	as	_	_	_	_	
115-10	13101-13104	the	_	_	_	_	
115-11	13105-13106	“	_	_	_	_	
115-12	13106-13109	Old	_	_	_	_	
115-13	13110-13116	School	_	_	_	_	
115-14	13117-13120	DBA	_	_	_	_	
115-15	13120-13121	”	_	_	_	_	
115-16	13122-13124	to	_	_	_	_	
115-17	13125-13130	learn	_	_	_	_	
115-18	13131-13134	new	_	_	_	_	
115-19	13135-13138	SQL	_	_	_	_	
115-20	13139-13145	tricks	_	_	_	_	
115-21	13146-13153	related	_	_	_	_	
115-22	13154-13156	to	_	_	_	_	
115-23	13157-13158	a	_	_	_	_	
115-24	13159-13170	distributed	_	_	_	_	
115-25	13171-13176	query	_	_	_	_	
115-26	13177-13183	engine	_	_	_	_	
115-27	13184-13188	such	_	_	_	_	
115-28	13189-13191	as	_	_	_	_	
115-29	13192-13198	Presto	_	_	_	_	
115-30	13198-13199	.	_	_	_	_	

#Text=In most cases, my SQL training on MySQL/Oracle has served me well but there are some interesting differences which I’ve attempted to call-out above.
116-1	13200-13202	In	_	_	_	_	
116-2	13203-13207	most	_	_	_	_	
116-3	13208-13213	cases	_	_	_	_	
116-4	13213-13214	,	_	_	_	_	
116-5	13215-13217	my	_	_	_	_	
116-6	13218-13221	SQL	_	_	_	_	
116-7	13222-13230	training	_	_	_	_	
116-8	13231-13233	on	_	_	_	_	
116-9	13234-13239	MySQL	_	_	_	_	
116-10	13239-13240	/	_	_	_	_	
116-11	13240-13246	Oracle	_	_	_	_	
116-12	13247-13250	has	_	_	_	_	
116-13	13251-13257	served	_	_	_	_	
116-14	13258-13260	me	_	_	_	_	
116-15	13261-13265	well	_	_	_	_	
116-16	13266-13269	but	_	_	_	_	
116-17	13270-13275	there	_	_	_	_	
116-18	13276-13279	are	_	_	_	_	
116-19	13280-13284	some	_	_	_	_	
116-20	13285-13296	interesting	_	_	_	_	
116-21	13297-13308	differences	_	_	_	_	
116-22	13309-13314	which	_	_	_	_	
116-23	13315-13316	I	_	_	_	_	
116-24	13316-13317	’	_	_	_	_	
116-25	13317-13319	ve	_	_	_	_	
116-26	13320-13329	attempted	_	_	_	_	
116-27	13330-13332	to	_	_	_	_	
116-28	13333-13341	call-out	_	_	_	_	
116-29	13342-13347	above	_	_	_	_	
116-30	13347-13348	.	_	_	_	_	

#Text=Thanks for reading and making it to the end.
117-1	13349-13355	Thanks	_	_	_	_	
117-2	13356-13359	for	_	_	_	_	
117-3	13360-13367	reading	_	_	_	_	
117-4	13368-13371	and	_	_	_	_	
117-5	13372-13378	making	_	_	_	_	
117-6	13379-13381	it	_	_	_	_	
117-7	13382-13384	to	_	_	_	_	
117-8	13385-13388	the	_	_	_	_	
117-9	13389-13392	end	_	_	_	_	
117-10	13392-13393	.	_	_	_	_	

#Text=I appreciate it!
118-1	13394-13395	I	_	_	_	_	
118-2	13396-13406	appreciate	_	_	_	_	
118-3	13407-13409	it	_	_	_	_	
118-4	13409-13410	!	_	_	_	_	

#Text=We look forward to giving Presto’s Cost-Based Optimizer a test drive and kicking the tires on new features such as dynamic filtering & partition pruning!
119-1	13411-13413	We	_	_	_	_	
119-2	13414-13418	look	_	_	_	_	
119-3	13419-13426	forward	_	_	_	_	
119-4	13427-13429	to	_	_	_	_	
119-5	13430-13436	giving	_	_	_	_	
119-6	13437-13443	Presto	_	_	_	_	
119-7	13443-13444	’	_	_	_	_	
119-8	13444-13445	s	_	_	_	_	
119-9	13446-13456	Cost-Based	_	_	_	_	
119-10	13457-13466	Optimizer	_	_	_	_	
119-11	13467-13468	a	_	_	_	_	
119-12	13469-13473	test	_	_	_	_	
119-13	13474-13479	drive	_	_	_	_	
119-14	13480-13483	and	_	_	_	_	
119-15	13484-13491	kicking	_	_	_	_	
119-16	13492-13495	the	_	_	_	_	
119-17	13496-13501	tires	_	_	_	_	
119-18	13502-13504	on	_	_	_	_	
119-19	13505-13508	new	_	_	_	_	
119-20	13509-13517	features	_	_	_	_	
119-21	13518-13522	such	_	_	_	_	
119-22	13523-13525	as	_	_	_	_	
119-23	13526-13533	dynamic	_	_	_	_	
119-24	13534-13543	filtering	_	_	_	_	
119-25	13544-13545	&	_	_	_	_	
119-26	13546-13555	partition	_	_	_	_	
119-27	13556-13563	pruning	_	_	_	_	
119-28	13563-13564	!	_	_	_	_	

#Text=All comments are welcome, or you can message me at ed@eventbrite.com.
120-1	13565-13568	All	_	_	_	_	
120-2	13569-13577	comments	_	_	_	_	
120-3	13578-13581	are	_	_	_	_	
120-4	13582-13589	welcome	_	_	_	_	
120-5	13589-13590	,	_	_	_	_	
120-6	13591-13593	or	_	_	_	_	
120-7	13594-13597	you	_	_	_	_	
120-8	13598-13601	can	_	_	_	_	
120-9	13602-13609	message	_	_	_	_	
120-10	13610-13612	me	_	_	_	_	
120-11	13613-13615	at	_	_	_	_	
120-12	13616-13618	ed	_	_	_	_	
120-13	13618-13619	@	_	_	_	_	
120-14	13619-13633	eventbrite.com	_	_	_	_	
120-15	13633-13634	.	_	_	_	_	

#Text=You can learn more about Eventbrite’s use of Presto by checking out my previous post at Boosting Big Data workloads with Presto Auto Scaling.
121-1	13635-13638	You	_	_	_	_	
121-2	13639-13642	can	_	_	_	_	
121-3	13643-13648	learn	_	_	_	_	
121-4	13649-13653	more	_	_	_	_	
121-5	13654-13659	about	_	_	_	_	
121-6	13660-13670	Eventbrite	_	_	_	_	
121-7	13670-13671	’	_	_	_	_	
121-8	13671-13672	s	_	_	_	_	
121-9	13673-13676	use	_	_	_	_	
121-10	13677-13679	of	_	_	_	_	
121-11	13680-13686	Presto	_	_	_	_	
121-12	13687-13689	by	_	_	_	_	
121-13	13690-13698	checking	_	_	_	_	
121-14	13699-13702	out	_	_	_	_	
121-15	13703-13705	my	_	_	_	_	
121-16	13706-13714	previous	_	_	_	_	
121-17	13715-13719	post	_	_	_	_	
121-18	13720-13722	at	_	_	_	_	
121-19	13723-13731	Boosting	_	_	_	_	
121-20	13732-13735	Big	_	_	_	_	
121-21	13736-13740	Data	_	_	_	_	
121-22	13741-13750	workloads	_	_	_	_	
121-23	13751-13755	with	_	_	_	_	
121-24	13756-13762	Presto	_	_	_	_	
121-25	13763-13767	Auto	_	_	_	_	
121-26	13768-13775	Scaling	_	_	_	_	
121-27	13775-13776	.	_	_	_	_	

#Text=Special thanks to Eventbrite’s Data Foundry team (Jeremy Bakker,  Alex Meyer, Jasper Groot, Rainu Ittycheriah, Gray Pickney, and Beck Cronin-Dixon) for the world-class Presto support, and Steven Fast for reviewing this blog post.
122-1	13777-13784	Special	_	_	_	_	
122-2	13785-13791	thanks	_	_	_	_	
122-3	13792-13794	to	_	_	_	_	
122-4	13795-13805	Eventbrite	_	_	_	_	
122-5	13805-13806	’	_	_	_	_	
122-6	13806-13807	s	_	_	_	_	
122-7	13808-13812	Data	_	_	_	_	
122-8	13813-13820	Foundry	_	_	_	_	
122-9	13821-13825	team	_	_	_	_	
122-10	13826-13827	(	_	_	_	_	
122-11	13827-13833	Jeremy	_	_	_	_	
122-12	13834-13840	Bakker	_	_	_	_	
122-13	13840-13841	,	_	_	_	_	
122-14	13841-13842	 	_	_	_	_	
122-15	13843-13847	Alex	_	_	_	_	
122-16	13848-13853	Meyer	_	_	_	_	
122-17	13853-13854	,	_	_	_	_	
122-18	13855-13861	Jasper	_	_	_	_	
122-19	13862-13867	Groot	_	_	_	_	
122-20	13867-13868	,	_	_	_	_	
122-21	13869-13874	Rainu	_	_	_	_	
122-22	13875-13886	Ittycheriah	_	_	_	_	
122-23	13886-13887	,	_	_	_	_	
122-24	13888-13892	Gray	_	_	_	_	
122-25	13893-13900	Pickney	_	_	_	_	
122-26	13900-13901	,	_	_	_	_	
122-27	13902-13905	and	_	_	_	_	
122-28	13906-13910	Beck	_	_	_	_	
122-29	13911-13923	Cronin-Dixon	_	_	_	_	
122-30	13923-13924	)	_	_	_	_	
122-31	13925-13928	for	_	_	_	_	
122-32	13929-13932	the	_	_	_	_	
122-33	13933-13944	world-class	_	_	_	_	
122-34	13945-13951	Presto	_	_	_	_	
122-35	13952-13959	support	_	_	_	_	
122-36	13959-13960	,	_	_	_	_	
122-37	13961-13964	and	_	_	_	_	
122-38	13965-13971	Steven	_	_	_	_	
122-39	13972-13976	Fast	_	_	_	_	
122-40	13977-13980	for	_	_	_	_	
122-41	13981-13990	reviewing	_	_	_	_	
122-42	13991-13995	this	_	_	_	_	
122-43	13996-14000	blog	_	_	_	_	
122-44	14001-14005	post	_	_	_	_	
122-45	14005-14006	.	_	_	_	_	

#Text=Eventbrite’s Data Teams rock!
123-1	14007-14017	Eventbrite	_	_	_	_	
123-2	14017-14018	’	_	_	_	_	
123-3	14018-14019	s	_	_	_	_	
123-4	14020-14024	Data	_	_	_	_	
123-5	14025-14030	Teams	_	_	_	_	
123-6	14031-14035	rock	_	_	_	_	
123-7	14035-14036	!	_	_	_	_	

#Text=CategoriesAnalytics, Architecture, Data Stores
#Text=Leave a Reply Cancel reply
#Text=Your email address will not be published.
124-1	14037-14056	CategoriesAnalytics	_	_	_	_	
124-2	14056-14057	,	_	_	_	_	
124-3	14058-14070	Architecture	_	_	_	_	
124-4	14070-14071	,	_	_	_	_	
124-5	14072-14076	Data	_	_	_	_	
124-6	14077-14083	Stores	_	_	_	_	
124-7	14084-14089	Leave	_	_	_	_	
124-8	14090-14091	a	_	_	_	_	
124-9	14092-14097	Reply	_	_	_	_	
124-10	14098-14104	Cancel	_	_	_	_	
124-11	14105-14110	reply	_	_	_	_	
124-12	14111-14115	Your	_	_	_	_	
124-13	14116-14121	email	_	_	_	_	
124-14	14122-14129	address	_	_	_	_	
124-15	14130-14134	will	_	_	_	_	
124-16	14135-14138	not	_	_	_	_	
124-17	14139-14141	be	_	_	_	_	
124-18	14142-14151	published	_	_	_	_	
124-19	14151-14152	.	_	_	_	_	

#Text=Required fields are marked *Comment Name *
#Text=Email *
#Text=Website
#Text=Notify me of follow-up comments by email.
125-1	14153-14161	Required	_	_	_	_	
125-2	14162-14168	fields	_	_	_	_	
125-3	14169-14172	are	_	_	_	_	
125-4	14173-14179	marked	_	_	_	_	
125-5	14180-14181	*	_	_	_	_	
125-6	14181-14188	Comment	_	_	_	_	
125-7	14189-14193	Name	_	_	_	_	
125-8	14194-14195	*	_	_	_	_	
125-9	14196-14201	Email	_	_	_	_	
125-10	14202-14203	*	_	_	_	_	
125-11	14204-14211	Website	_	_	_	_	
125-12	14212-14218	Notify	_	_	_	_	
125-13	14219-14221	me	_	_	_	_	
125-14	14222-14224	of	_	_	_	_	
125-15	14225-14234	follow-up	_	_	_	_	
125-16	14235-14243	comments	_	_	_	_	
125-17	14244-14246	by	_	_	_	_	
125-18	14247-14252	email	_	_	_	_	
125-19	14252-14253	.	_	_	_	_	

#Text=Notify me of new posts by email.
126-1	14254-14260	Notify	_	_	_	_	
126-2	14261-14263	me	_	_	_	_	
126-3	14264-14266	of	_	_	_	_	
126-4	14267-14270	new	_	_	_	_	
126-5	14271-14276	posts	_	_	_	_	
126-6	14277-14279	by	_	_	_	_	
126-7	14280-14285	email	_	_	_	_	
126-8	14285-14286	.	_	_	_	_	

#Text=Post navigation
#Text=Previous PostPrevious
#Text=Create Meaningful (and Fun!)
127-1	14287-14291	Post	_	_	_	_	
127-2	14292-14302	navigation	_	_	_	_	
127-3	14303-14311	Previous	_	_	_	_	
127-4	14312-14324	PostPrevious	_	_	_	_	
127-5	14325-14331	Create	_	_	_	_	
127-6	14332-14342	Meaningful	_	_	_	_	
127-7	14343-14344	(	_	_	_	_	
127-8	14344-14347	and	_	_	_	_	
127-9	14348-14351	Fun	_	_	_	_	
127-10	14351-14352	!	_	_	_	_	
127-11	14352-14353	)	_	_	_	_	

#Text=Remote CommunityNext PostNext How are you building/maintaining team cohesion?
128-1	14354-14360	Remote	_	_	_	_	
128-2	14361-14374	CommunityNext	_	_	_	_	
128-3	14375-14383	PostNext	_	_	_	_	
128-4	14384-14387	How	_	_	_	_	
128-5	14388-14391	are	_	_	_	_	
128-6	14392-14395	you	_	_	_	_	
128-7	14396-14404	building	_	_	_	_	
128-8	14404-14405	/	_	_	_	_	
128-9	14405-14416	maintaining	_	_	_	_	
128-10	14417-14421	team	_	_	_	_	
128-11	14422-14430	cohesion	_	_	_	_	
128-12	14430-14431	?	_	_	_	_	

#Text=Our Writing TeamAndrew Smelser8 Simple Tips for better Communication with Customer-Facing TeamsRethinking quality and the engineers who protect itBartek OgryczakPackaging and Releasing Private Python Code (Pt.2)Packaging and Releasing Private Python Code (Pt.1)Beck Cronin-DixonEventbrite and SEO: How does Google find our pages?
129-1	14432-14435	Our	_	_	_	_	
129-2	14436-14443	Writing	_	_	_	_	
129-3	14444-14454	TeamAndrew	_	_	_	_	
129-4	14455-14463	Smelser8	_	_	_	_	
129-5	14464-14470	Simple	_	_	_	_	
129-6	14471-14475	Tips	_	_	_	_	
129-7	14476-14479	for	_	_	_	_	
129-8	14480-14486	better	_	_	_	_	
129-9	14487-14500	Communication	_	_	_	_	
129-10	14501-14505	with	_	_	_	_	
129-11	14506-14521	Customer-Facing	_	_	_	_	
129-12	14522-14537	TeamsRethinking	_	_	_	_	
129-13	14538-14545	quality	_	_	_	_	
129-14	14546-14549	and	_	_	_	_	
129-15	14550-14553	the	_	_	_	_	
129-16	14554-14563	engineers	_	_	_	_	
129-17	14564-14567	who	_	_	_	_	
129-18	14568-14575	protect	_	_	_	_	
129-19	14576-14584	itBartek	_	_	_	_	
129-20	14585-14602	OgryczakPackaging	_	_	_	_	
129-21	14603-14606	and	_	_	_	_	
129-22	14607-14616	Releasing	_	_	_	_	
129-23	14617-14624	Private	_	_	_	_	
129-24	14625-14631	Python	_	_	_	_	
129-25	14632-14636	Code	_	_	_	_	
129-26	14637-14638	(	_	_	_	_	
129-27	14638-14640	Pt	_	_	_	_	
129-28	14640-14642	.2	_	_	_	_	
129-29	14642-14643	)	_	_	_	_	
129-30	14643-14652	Packaging	_	_	_	_	
129-31	14653-14656	and	_	_	_	_	
129-32	14657-14666	Releasing	_	_	_	_	
129-33	14667-14674	Private	_	_	_	_	
129-34	14675-14681	Python	_	_	_	_	
129-35	14682-14686	Code	_	_	_	_	
129-36	14687-14688	(	_	_	_	_	
129-37	14688-14690	Pt	_	_	_	_	
129-38	14690-14692	.1	_	_	_	_	
129-39	14692-14693	)	_	_	_	_	
129-40	14693-14697	Beck	_	_	_	_	
129-41	14698-14720	Cronin-DixonEventbrite	_	_	_	_	
129-42	14721-14724	and	_	_	_	_	
129-43	14725-14728	SEO	_	_	_	_	
129-44	14728-14729	:	_	_	_	_	
129-45	14730-14733	How	_	_	_	_	
129-46	14734-14738	does	_	_	_	_	
129-47	14739-14745	Google	_	_	_	_	
129-48	14746-14750	find	_	_	_	_	
129-49	14751-14754	our	_	_	_	_	
129-50	14755-14760	pages	_	_	_	_	
129-51	14760-14761	?	_	_	_	_	

#Text=Eventbrite and SEO: The BasicsBen IlegboduWhy Would Webpack Stop Re-compiling?
130-1	14761-14771	Eventbrite	_	_	_	_	
130-2	14772-14775	and	_	_	_	_	
130-3	14776-14779	SEO	_	_	_	_	
130-4	14779-14780	:	_	_	_	_	
130-5	14781-14784	The	_	_	_	_	
130-6	14785-14794	BasicsBen	_	_	_	_	
130-7	14795-14806	IlegboduWhy	_	_	_	_	
130-8	14807-14812	Would	_	_	_	_	
130-9	14813-14820	Webpack	_	_	_	_	
130-10	14821-14825	Stop	_	_	_	_	
130-11	14826-14838	Re-compiling	_	_	_	_	
130-12	14838-14839	?	_	_	_	_	

#Text=(The Quest for Micro-Apps)The Quest for React Micro-Apps: Single App ModeThe Quest for React Micro-Apps: The BeginningLearning ES6: Generators as IteratorsLearning ES6: Iterators & iterablesBryan MayesSoftware Developers to Nashville, “Stop calling us IT”Daniel CarterCreating Flexible and Reusable React File UploadersDelaine WendlingBriteBytes: Maddie CousensBriteBytes: Nam-Chi VanEd PreszMySQL High Availability at EventbriteBuilding a Protest Map: A Behind the Scenes Look!
131-1	14840-14841	(	_	_	_	_	
131-2	14841-14844	The	_	_	_	_	
131-3	14845-14850	Quest	_	_	_	_	
131-4	14851-14854	for	_	_	_	_	
131-5	14855-14865	Micro-Apps	_	_	_	_	
131-6	14865-14866	)	_	_	_	_	
131-7	14866-14869	The	_	_	_	_	
131-8	14870-14875	Quest	_	_	_	_	
131-9	14876-14879	for	_	_	_	_	
131-10	14880-14885	React	_	_	_	_	
131-11	14886-14896	Micro-Apps	_	_	_	_	
131-12	14896-14897	:	_	_	_	_	
131-13	14898-14904	Single	_	_	_	_	
131-14	14905-14908	App	_	_	_	_	
131-15	14909-14916	ModeThe	_	_	_	_	
131-16	14917-14922	Quest	_	_	_	_	
131-17	14923-14926	for	_	_	_	_	
131-18	14927-14932	React	_	_	_	_	
131-19	14933-14943	Micro-Apps	_	_	_	_	
131-20	14943-14944	:	_	_	_	_	
131-21	14945-14948	The	_	_	_	_	
131-22	14949-14966	BeginningLearning	_	_	_	_	
131-23	14967-14970	ES6	_	_	_	_	
131-24	14970-14971	:	_	_	_	_	
131-25	14972-14982	Generators	_	_	_	_	
131-26	14983-14985	as	_	_	_	_	
131-27	14986-15003	IteratorsLearning	_	_	_	_	
131-28	15004-15007	ES6	_	_	_	_	
131-29	15007-15008	:	_	_	_	_	
131-30	15009-15018	Iterators	_	_	_	_	
131-31	15019-15020	&	_	_	_	_	
131-32	15021-15035	iterablesBryan	_	_	_	_	
131-33	15036-15049	MayesSoftware	_	_	_	_	
131-34	15050-15060	Developers	_	_	_	_	
131-35	15061-15063	to	_	_	_	_	
131-36	15064-15073	Nashville	_	_	_	_	
131-37	15073-15074	,	_	_	_	_	
131-38	15075-15076	“	_	_	_	_	
131-39	15076-15080	Stop	_	_	_	_	
131-40	15081-15088	calling	_	_	_	_	
131-41	15089-15091	us	_	_	_	_	
131-42	15092-15094	IT	_	_	_	_	
131-43	15094-15095	”	_	_	_	_	
131-44	15095-15101	Daniel	_	_	_	_	
131-45	15102-15116	CarterCreating	_	_	_	_	
131-46	15117-15125	Flexible	_	_	_	_	
131-47	15126-15129	and	_	_	_	_	
131-48	15130-15138	Reusable	_	_	_	_	
131-49	15139-15144	React	_	_	_	_	
131-50	15145-15149	File	_	_	_	_	
131-51	15150-15166	UploadersDelaine	_	_	_	_	
131-52	15167-15185	WendlingBriteBytes	_	_	_	_	
131-53	15185-15186	:	_	_	_	_	
131-54	15187-15193	Maddie	_	_	_	_	
131-55	15194-15211	CousensBriteBytes	_	_	_	_	
131-56	15211-15212	:	_	_	_	_	
131-57	15213-15220	Nam-Chi	_	_	_	_	
131-58	15221-15226	VanEd	_	_	_	_	
131-59	15227-15237	PreszMySQL	_	_	_	_	
131-60	15238-15242	High	_	_	_	_	
131-61	15243-15255	Availability	_	_	_	_	
131-62	15256-15258	at	_	_	_	_	
131-63	15259-15277	EventbriteBuilding	_	_	_	_	
131-64	15278-15279	a	_	_	_	_	
131-65	15280-15287	Protest	_	_	_	_	
131-66	15288-15291	Map	_	_	_	_	
131-67	15291-15292	:	_	_	_	_	
131-68	15293-15294	A	_	_	_	_	
131-69	15295-15301	Behind	_	_	_	_	
131-70	15302-15305	the	_	_	_	_	
131-71	15306-15312	Scenes	_	_	_	_	
131-72	15313-15317	Look	_	_	_	_	
131-73	15317-15318	!	_	_	_	_	

#Text=Teaching new Presto performance tricks to the Old-School DBALeveraging AWS “spot” instances to drive down costsBoosting Big Data workloads with Presto Auto ScalingElizabeth Viera & Loretta StokesWhat the Top Minds in Tech Communicated at Hopperx1 SeattleeventbriteIsomorphic React Sans NodeReact + ES.next = ❤Engineering + Accounting for Marketplace BusinessesEscapándome de las Software FactoryEventbrite’s Search-Based Approach to RecommendationsEyal ReuveniReplayable Pub/Sub Queues with Cassandra and ZooKeeperSmarter Unit Testing with nose-knowsWatching Metadata Changes in a Distributed Application Using ZooKeeperGagoThe Realistic Code Reviewer, Part IIThe Realistic Code Reviewer, Part ICode Review: The art of writing code for othersDiego Girotti8 Reasons Why Manual Testing is Still ImportantHanahCreate Meaningful (and Fun!)
132-1	15318-15326	Teaching	_	_	_	_	
132-2	15327-15330	new	_	_	_	_	
132-3	15331-15337	Presto	_	_	_	_	
132-4	15338-15349	performance	_	_	_	_	
132-5	15350-15356	tricks	_	_	_	_	
132-6	15357-15359	to	_	_	_	_	
132-7	15360-15363	the	_	_	_	_	
132-8	15364-15374	Old-School	_	_	_	_	
132-9	15375-15388	DBALeveraging	_	_	_	_	
132-10	15389-15392	AWS	_	_	_	_	
132-11	15393-15394	“	_	_	_	_	
132-12	15394-15398	spot	_	_	_	_	
132-13	15398-15399	”	_	_	_	_	
132-14	15400-15409	instances	_	_	_	_	
132-15	15410-15412	to	_	_	_	_	
132-16	15413-15418	drive	_	_	_	_	
132-17	15419-15423	down	_	_	_	_	
132-18	15424-15437	costsBoosting	_	_	_	_	
132-19	15438-15441	Big	_	_	_	_	
132-20	15442-15446	Data	_	_	_	_	
132-21	15447-15456	workloads	_	_	_	_	
132-22	15457-15461	with	_	_	_	_	
132-23	15462-15468	Presto	_	_	_	_	
132-24	15469-15473	Auto	_	_	_	_	
132-25	15474-15490	ScalingElizabeth	_	_	_	_	
132-26	15491-15496	Viera	_	_	_	_	
132-27	15497-15498	&	_	_	_	_	
132-28	15499-15506	Loretta	_	_	_	_	
132-29	15507-15517	StokesWhat	_	_	_	_	
132-30	15518-15521	the	_	_	_	_	
132-31	15522-15525	Top	_	_	_	_	
132-32	15526-15531	Minds	_	_	_	_	
132-33	15532-15534	in	_	_	_	_	
132-34	15535-15539	Tech	_	_	_	_	
132-35	15540-15552	Communicated	_	_	_	_	
132-36	15553-15555	at	_	_	_	_	
132-37	15556-15564	Hopperx1	_	_	_	_	
132-38	15565-15592	SeattleeventbriteIsomorphic	_	_	_	_	
132-39	15593-15598	React	_	_	_	_	
132-40	15599-15603	Sans	_	_	_	_	
132-41	15604-15613	NodeReact	_	_	_	_	
132-42	15614-15615	+	_	_	_	_	
132-43	15616-15623	ES.next	_	_	_	_	
132-44	15624-15625	=	_	_	_	_	
132-45	15626-15627	❤	_	_	_	_	
132-46	15627-15638	Engineering	_	_	_	_	
132-47	15639-15640	+	_	_	_	_	
132-48	15641-15651	Accounting	_	_	_	_	
132-49	15652-15655	for	_	_	_	_	
132-50	15656-15667	Marketplace	_	_	_	_	
132-51	15668-15689	BusinessesEscapándome	_	_	_	_	
132-52	15690-15692	de	_	_	_	_	
132-53	15693-15696	las	_	_	_	_	
132-54	15697-15705	Software	_	_	_	_	
132-55	15706-15723	FactoryEventbrite	_	_	_	_	
132-56	15723-15724	’	_	_	_	_	
132-57	15724-15725	s	_	_	_	_	
132-58	15726-15738	Search-Based	_	_	_	_	
132-59	15739-15747	Approach	_	_	_	_	
132-60	15748-15750	to	_	_	_	_	
132-61	15751-15770	RecommendationsEyal	_	_	_	_	
132-62	15771-15788	ReuveniReplayable	_	_	_	_	
132-63	15789-15792	Pub	_	_	_	_	
132-64	15792-15793	/	_	_	_	_	
132-65	15793-15796	Sub	_	_	_	_	
132-66	15797-15803	Queues	_	_	_	_	
132-67	15804-15808	with	_	_	_	_	
132-68	15809-15818	Cassandra	_	_	_	_	
132-69	15819-15822	and	_	_	_	_	
132-70	15823-15839	ZooKeeperSmarter	_	_	_	_	
132-71	15840-15844	Unit	_	_	_	_	
132-72	15845-15852	Testing	_	_	_	_	
132-73	15853-15857	with	_	_	_	_	
132-74	15858-15876	nose-knowsWatching	_	_	_	_	
132-75	15877-15885	Metadata	_	_	_	_	
132-76	15886-15893	Changes	_	_	_	_	
132-77	15894-15896	in	_	_	_	_	
132-78	15897-15898	a	_	_	_	_	
132-79	15899-15910	Distributed	_	_	_	_	
132-80	15911-15922	Application	_	_	_	_	
132-81	15923-15928	Using	_	_	_	_	
132-82	15929-15945	ZooKeeperGagoThe	_	_	_	_	
132-83	15946-15955	Realistic	_	_	_	_	
132-84	15956-15960	Code	_	_	_	_	
132-85	15961-15969	Reviewer	_	_	_	_	
132-86	15969-15970	,	_	_	_	_	
132-87	15971-15975	Part	_	_	_	_	
132-88	15976-15981	IIThe	_	_	_	_	
132-89	15982-15991	Realistic	_	_	_	_	
132-90	15992-15996	Code	_	_	_	_	
132-91	15997-16005	Reviewer	_	_	_	_	
132-92	16005-16006	,	_	_	_	_	
132-93	16007-16011	Part	_	_	_	_	
132-94	16012-16017	ICode	_	_	_	_	
132-95	16018-16024	Review	_	_	_	_	
132-96	16024-16025	:	_	_	_	_	
132-97	16026-16029	The	_	_	_	_	
132-98	16030-16033	art	_	_	_	_	
132-99	16034-16036	of	_	_	_	_	
132-100	16037-16044	writing	_	_	_	_	
132-101	16045-16049	code	_	_	_	_	
132-102	16050-16053	for	_	_	_	_	
132-103	16054-16065	othersDiego	_	_	_	_	
132-104	16066-16074	Girotti8	_	_	_	_	
132-105	16075-16082	Reasons	_	_	_	_	
132-106	16083-16086	Why	_	_	_	_	
132-107	16087-16093	Manual	_	_	_	_	
132-108	16094-16101	Testing	_	_	_	_	
132-109	16102-16104	is	_	_	_	_	
132-110	16105-16110	Still	_	_	_	_	
132-111	16111-16131	ImportantHanahCreate	_	_	_	_	
132-112	16132-16142	Meaningful	_	_	_	_	
132-113	16143-16144	(	_	_	_	_	
132-114	16144-16147	and	_	_	_	_	
132-115	16148-16151	Fun	_	_	_	_	
132-116	16151-16152	!	_	_	_	_	
132-117	16152-16153	)	_	_	_	_	

#Text=Remote CommunityHow to be a Successful Junior EngineerJay ChanMulti-Index Locality Sensitive Hashing for Fun and ProfitJessica KatzThe Truth about Boundaries, Curiosity, and Requests (Part 2 of 2)The Truth about Boundaries, Curiosity, and Requests (Part 1 of 2)The Lies We Tell OurselvesJiangyue ZhuA Story of a React Re-Rendering BugJohn BerrymanThe Fundamental Problem of SearchCowboys and Consultants Don’t Need Unit TestsSearch Precision and Recall By ExampleBuilding a Marketplace — Search and Recommendation at EventbriteLoretta StokesGrace Hopper 2018: Five Unforgettable ExperiencesMalina WiesenMother May I?
133-1	16154-16160	Remote	_	_	_	_	
133-2	16161-16173	CommunityHow	_	_	_	_	
133-3	16174-16176	to	_	_	_	_	
133-4	16177-16179	be	_	_	_	_	
133-5	16180-16181	a	_	_	_	_	
133-6	16182-16192	Successful	_	_	_	_	
133-7	16193-16199	Junior	_	_	_	_	
133-8	16200-16211	EngineerJay	_	_	_	_	
133-9	16212-16227	ChanMulti-Index	_	_	_	_	
133-10	16228-16236	Locality	_	_	_	_	
133-11	16237-16246	Sensitive	_	_	_	_	
133-12	16247-16254	Hashing	_	_	_	_	
133-13	16255-16258	for	_	_	_	_	
133-14	16259-16262	Fun	_	_	_	_	
133-15	16263-16266	and	_	_	_	_	
133-16	16267-16280	ProfitJessica	_	_	_	_	
133-17	16281-16288	KatzThe	_	_	_	_	
133-18	16289-16294	Truth	_	_	_	_	
133-19	16295-16300	about	_	_	_	_	
133-20	16301-16311	Boundaries	_	_	_	_	
133-21	16311-16312	,	_	_	_	_	
133-22	16313-16322	Curiosity	_	_	_	_	
133-23	16322-16323	,	_	_	_	_	
133-24	16324-16327	and	_	_	_	_	
133-25	16328-16336	Requests	_	_	_	_	
133-26	16337-16338	(	_	_	_	_	
133-27	16338-16342	Part	_	_	_	_	
133-28	16343-16344	2	_	_	_	_	
133-29	16345-16347	of	_	_	_	_	
133-30	16348-16349	2	_	_	_	_	
133-31	16349-16350	)	_	_	_	_	
133-32	16350-16353	The	_	_	_	_	
133-33	16354-16359	Truth	_	_	_	_	
133-34	16360-16365	about	_	_	_	_	
133-35	16366-16376	Boundaries	_	_	_	_	
133-36	16376-16377	,	_	_	_	_	
133-37	16378-16387	Curiosity	_	_	_	_	
133-38	16387-16388	,	_	_	_	_	
133-39	16389-16392	and	_	_	_	_	
133-40	16393-16401	Requests	_	_	_	_	
133-41	16402-16403	(	_	_	_	_	
133-42	16403-16407	Part	_	_	_	_	
133-43	16408-16409	1	_	_	_	_	
133-44	16410-16412	of	_	_	_	_	
133-45	16413-16414	2	_	_	_	_	
133-46	16414-16415	)	_	_	_	_	
133-47	16415-16418	The	_	_	_	_	
133-48	16419-16423	Lies	_	_	_	_	
133-49	16424-16426	We	_	_	_	_	
133-50	16427-16431	Tell	_	_	_	_	
133-51	16432-16449	OurselvesJiangyue	_	_	_	_	
133-52	16450-16454	ZhuA	_	_	_	_	
133-53	16455-16460	Story	_	_	_	_	
133-54	16461-16463	of	_	_	_	_	
133-55	16464-16465	a	_	_	_	_	
133-56	16466-16471	React	_	_	_	_	
133-57	16472-16484	Re-Rendering	_	_	_	_	
133-58	16485-16492	BugJohn	_	_	_	_	
133-59	16493-16504	BerrymanThe	_	_	_	_	
133-60	16505-16516	Fundamental	_	_	_	_	
133-61	16517-16524	Problem	_	_	_	_	
133-62	16525-16527	of	_	_	_	_	
133-63	16528-16541	SearchCowboys	_	_	_	_	
133-64	16542-16545	and	_	_	_	_	
133-65	16546-16557	Consultants	_	_	_	_	
133-66	16558-16561	Don	_	_	_	_	
133-67	16561-16562	’	_	_	_	_	
133-68	16562-16563	t	_	_	_	_	
133-69	16564-16568	Need	_	_	_	_	
133-70	16569-16573	Unit	_	_	_	_	
133-71	16574-16585	TestsSearch	_	_	_	_	
133-72	16586-16595	Precision	_	_	_	_	
133-73	16596-16599	and	_	_	_	_	
133-74	16600-16606	Recall	_	_	_	_	
133-75	16607-16609	By	_	_	_	_	
133-76	16610-16625	ExampleBuilding	_	_	_	_	
133-77	16626-16627	a	_	_	_	_	
133-78	16628-16639	Marketplace	_	_	_	_	
133-79	16640-16641	—	_	_	_	_	
133-80	16642-16648	Search	_	_	_	_	
133-81	16649-16652	and	_	_	_	_	
133-82	16653-16667	Recommendation	_	_	_	_	
133-83	16668-16670	at	_	_	_	_	
133-84	16671-16688	EventbriteLoretta	_	_	_	_	
133-85	16689-16700	StokesGrace	_	_	_	_	
133-86	16701-16707	Hopper	_	_	_	_	
133-87	16708-16712	2018	_	_	_	_	
133-88	16712-16713	:	_	_	_	_	
133-89	16714-16718	Five	_	_	_	_	
133-90	16719-16732	Unforgettable	_	_	_	_	
133-91	16733-16750	ExperiencesMalina	_	_	_	_	
133-92	16751-16763	WiesenMother	_	_	_	_	
133-93	16764-16767	May	_	_	_	_	
133-94	16768-16769	I	_	_	_	_	
133-95	16769-16770	?	_	_	_	_	

#Text=The Lifecycle of an Eventbrite WebhookMarcos IglesiasDiscover “Pro D3.js”, a new book to improve your JavaScript data visualizationsSimple and Easy Mentorship with a Mentoring AgreementBritecharts v2.0 ReleasedIntroducing Britecharts: Eventbrite’s Reusable Charting Library Based on D3Leveling Up D3: Events and RefactoringsMartin BrambatiHow are you building/maintaining team cohesion?
134-1	16770-16773	The	_	_	_	_	
134-2	16774-16783	Lifecycle	_	_	_	_	
134-3	16784-16786	of	_	_	_	_	
134-4	16787-16789	an	_	_	_	_	
134-5	16790-16800	Eventbrite	_	_	_	_	
134-6	16801-16814	WebhookMarcos	_	_	_	_	
134-7	16815-16831	IglesiasDiscover	_	_	_	_	
134-8	16832-16833	“	_	_	_	_	
134-9	16833-16836	Pro	_	_	_	_	
134-10	16837-16839	D3	_	_	_	_	
134-11	16839-16840	.	_	_	_	_	
134-12	16840-16842	js	_	_	_	_	
134-13	16842-16843	”	_	_	_	_	
134-14	16843-16844	,	_	_	_	_	
134-15	16845-16846	a	_	_	_	_	
134-16	16847-16850	new	_	_	_	_	
134-17	16851-16855	book	_	_	_	_	
134-18	16856-16858	to	_	_	_	_	
134-19	16859-16866	improve	_	_	_	_	
134-20	16867-16871	your	_	_	_	_	
134-21	16872-16882	JavaScript	_	_	_	_	
134-22	16883-16887	data	_	_	_	_	
134-23	16888-16908	visualizationsSimple	_	_	_	_	
134-24	16909-16912	and	_	_	_	_	
134-25	16913-16917	Easy	_	_	_	_	
134-26	16918-16928	Mentorship	_	_	_	_	
134-27	16929-16933	with	_	_	_	_	
134-28	16934-16935	a	_	_	_	_	
134-29	16936-16945	Mentoring	_	_	_	_	
134-30	16946-16966	AgreementBritecharts	_	_	_	_	
134-31	16967-16971	v2.0	_	_	_	_	
134-32	16972-16991	ReleasedIntroducing	_	_	_	_	
134-33	16992-17003	Britecharts	_	_	_	_	
134-34	17003-17004	:	_	_	_	_	
134-35	17005-17015	Eventbrite	_	_	_	_	
134-36	17015-17016	’	_	_	_	_	
134-37	17016-17017	s	_	_	_	_	
134-38	17018-17026	Reusable	_	_	_	_	
134-39	17027-17035	Charting	_	_	_	_	
134-40	17036-17043	Library	_	_	_	_	
134-41	17044-17049	Based	_	_	_	_	
134-42	17050-17052	on	_	_	_	_	
134-43	17053-17063	D3Leveling	_	_	_	_	
134-44	17064-17066	Up	_	_	_	_	
134-45	17067-17069	D3	_	_	_	_	
134-46	17069-17070	:	_	_	_	_	
134-47	17071-17077	Events	_	_	_	_	
134-48	17078-17081	and	_	_	_	_	
134-49	17082-17100	RefactoringsMartin	_	_	_	_	
134-50	17101-17112	BrambatiHow	_	_	_	_	
134-51	17113-17116	are	_	_	_	_	
134-52	17117-17120	you	_	_	_	_	
134-53	17121-17129	building	_	_	_	_	
134-54	17129-17130	/	_	_	_	_	
134-55	17130-17141	maintaining	_	_	_	_	
134-56	17142-17146	team	_	_	_	_	
134-57	17147-17155	cohesion	_	_	_	_	
134-58	17155-17156	?	_	_	_	_	

#Text=Matthew HimelsteinThe 63-point Plan for Helping Your Remote Team SucceedHow to Make Your Next Event App Remarkable with these 4 Mobile Navigation GesturesMaria EguiluzDesign System Wednesday: A Supportive Professional CommunityHow to Make Swift Product Changes Using a Design SystemMelisa PiccinettiBe the changeMiguel HernandezEventbrite Engineering at PyConESGetting started with Unit TestsNatalia CorteseOpen Data: The what, why and how to get startedPat PoelsThe “Aha” Moments of Becoming an Engineering ManagerRandall KannaHow Your Company Can Support Junior EngineersRashad Russell6 Unsuspecting Problems in HTML, CSS, and JavaScript – Part 26 Unsuspecting Problems in HTML, CSS, and JavaScript – Part 16 Unsuspecting Problems in HTML, CSS, and JavaScript – Part 3Santiago Hollmann5 Good Practices I Follow When I Code Using GitSahar BalaHow to fix the ugly focus ring and not break accessibility in ReactWhat is the best way to hire QA Engineers?
135-1	17156-17163	Matthew	_	_	_	_	
135-2	17164-17177	HimelsteinThe	_	_	_	_	
135-3	17178-17180	63	_	_	_	_	
135-4	17180-17181	-	_	_	_	_	
135-5	17181-17186	point	_	_	_	_	
135-6	17187-17191	Plan	_	_	_	_	
135-7	17192-17195	for	_	_	_	_	
135-8	17196-17203	Helping	_	_	_	_	
135-9	17204-17208	Your	_	_	_	_	
135-10	17209-17215	Remote	_	_	_	_	
135-11	17216-17220	Team	_	_	_	_	
135-12	17221-17231	SucceedHow	_	_	_	_	
135-13	17232-17234	to	_	_	_	_	
135-14	17235-17239	Make	_	_	_	_	
135-15	17240-17244	Your	_	_	_	_	
135-16	17245-17249	Next	_	_	_	_	
135-17	17250-17255	Event	_	_	_	_	
135-18	17256-17259	App	_	_	_	_	
135-19	17260-17270	Remarkable	_	_	_	_	
135-20	17271-17275	with	_	_	_	_	
135-21	17276-17281	these	_	_	_	_	
135-22	17282-17283	4	_	_	_	_	
135-23	17284-17290	Mobile	_	_	_	_	
135-24	17291-17301	Navigation	_	_	_	_	
135-25	17302-17315	GesturesMaria	_	_	_	_	
135-26	17316-17329	EguiluzDesign	_	_	_	_	
135-27	17330-17336	System	_	_	_	_	
135-28	17337-17346	Wednesday	_	_	_	_	
135-29	17346-17347	:	_	_	_	_	
135-30	17348-17349	A	_	_	_	_	
135-31	17350-17360	Supportive	_	_	_	_	
135-32	17361-17373	Professional	_	_	_	_	
135-33	17374-17386	CommunityHow	_	_	_	_	
135-34	17387-17389	to	_	_	_	_	
135-35	17390-17394	Make	_	_	_	_	
135-36	17395-17400	Swift	_	_	_	_	
135-37	17401-17408	Product	_	_	_	_	
135-38	17409-17416	Changes	_	_	_	_	
135-39	17417-17422	Using	_	_	_	_	
135-40	17423-17424	a	_	_	_	_	
135-41	17425-17431	Design	_	_	_	_	
135-42	17432-17444	SystemMelisa	_	_	_	_	
135-43	17445-17457	PiccinettiBe	_	_	_	_	
135-44	17458-17461	the	_	_	_	_	
135-45	17462-17474	changeMiguel	_	_	_	_	
135-46	17475-17494	HernandezEventbrite	_	_	_	_	
135-47	17495-17506	Engineering	_	_	_	_	
135-48	17507-17509	at	_	_	_	_	
135-49	17510-17524	PyConESGetting	_	_	_	_	
135-50	17525-17532	started	_	_	_	_	
135-51	17533-17537	with	_	_	_	_	
135-52	17538-17542	Unit	_	_	_	_	
135-53	17543-17555	TestsNatalia	_	_	_	_	
135-54	17556-17567	CorteseOpen	_	_	_	_	
135-55	17568-17572	Data	_	_	_	_	
135-56	17572-17573	:	_	_	_	_	
135-57	17574-17577	The	_	_	_	_	
135-58	17578-17582	what	_	_	_	_	
135-59	17582-17583	,	_	_	_	_	
135-60	17584-17587	why	_	_	_	_	
135-61	17588-17591	and	_	_	_	_	
135-62	17592-17595	how	_	_	_	_	
135-63	17596-17598	to	_	_	_	_	
135-64	17599-17602	get	_	_	_	_	
135-65	17603-17613	startedPat	_	_	_	_	
135-66	17614-17622	PoelsThe	_	_	_	_	
135-67	17623-17624	“	_	_	_	_	
135-68	17624-17627	Aha	_	_	_	_	
135-69	17627-17628	”	_	_	_	_	
135-70	17629-17636	Moments	_	_	_	_	
135-71	17637-17639	of	_	_	_	_	
135-72	17640-17648	Becoming	_	_	_	_	
135-73	17649-17651	an	_	_	_	_	
135-74	17652-17663	Engineering	_	_	_	_	
135-75	17664-17678	ManagerRandall	_	_	_	_	
135-76	17679-17687	KannaHow	_	_	_	_	
135-77	17688-17692	Your	_	_	_	_	
135-78	17693-17700	Company	_	_	_	_	
135-79	17701-17704	Can	_	_	_	_	
135-80	17705-17712	Support	_	_	_	_	
135-81	17713-17719	Junior	_	_	_	_	
135-82	17720-17735	EngineersRashad	_	_	_	_	
135-83	17736-17744	Russell6	_	_	_	_	
135-84	17745-17757	Unsuspecting	_	_	_	_	
135-85	17758-17766	Problems	_	_	_	_	
135-86	17767-17769	in	_	_	_	_	
135-87	17770-17774	HTML	_	_	_	_	
135-88	17774-17775	,	_	_	_	_	
135-89	17776-17779	CSS	_	_	_	_	
135-90	17779-17780	,	_	_	_	_	
135-91	17781-17784	and	_	_	_	_	
135-92	17785-17795	JavaScript	_	_	_	_	
135-93	17796-17797	–	_	_	_	_	
135-94	17798-17802	Part	_	_	_	_	
135-95	17803-17805	26	_	_	_	_	
135-96	17806-17818	Unsuspecting	_	_	_	_	
135-97	17819-17827	Problems	_	_	_	_	
135-98	17828-17830	in	_	_	_	_	
135-99	17831-17835	HTML	_	_	_	_	
135-100	17835-17836	,	_	_	_	_	
135-101	17837-17840	CSS	_	_	_	_	
135-102	17840-17841	,	_	_	_	_	
135-103	17842-17845	and	_	_	_	_	
135-104	17846-17856	JavaScript	_	_	_	_	
135-105	17857-17858	–	_	_	_	_	
135-106	17859-17863	Part	_	_	_	_	
135-107	17864-17866	16	_	_	_	_	
135-108	17867-17879	Unsuspecting	_	_	_	_	
135-109	17880-17888	Problems	_	_	_	_	
135-110	17889-17891	in	_	_	_	_	
135-111	17892-17896	HTML	_	_	_	_	
135-112	17896-17897	,	_	_	_	_	
135-113	17898-17901	CSS	_	_	_	_	
135-114	17901-17902	,	_	_	_	_	
135-115	17903-17906	and	_	_	_	_	
135-116	17907-17917	JavaScript	_	_	_	_	
135-117	17918-17919	–	_	_	_	_	
135-118	17920-17924	Part	_	_	_	_	
135-119	17925-17934	3Santiago	_	_	_	_	
135-120	17935-17944	Hollmann5	_	_	_	_	
135-121	17945-17949	Good	_	_	_	_	
135-122	17950-17959	Practices	_	_	_	_	
135-123	17960-17961	I	_	_	_	_	
135-124	17962-17968	Follow	_	_	_	_	
135-125	17969-17973	When	_	_	_	_	
135-126	17974-17975	I	_	_	_	_	
135-127	17976-17980	Code	_	_	_	_	
135-128	17981-17986	Using	_	_	_	_	
135-129	17987-17995	GitSahar	_	_	_	_	
135-130	17996-18003	BalaHow	_	_	_	_	
135-131	18004-18006	to	_	_	_	_	
135-132	18007-18010	fix	_	_	_	_	
135-133	18011-18014	the	_	_	_	_	
135-134	18015-18019	ugly	_	_	_	_	
135-135	18020-18025	focus	_	_	_	_	
135-136	18026-18030	ring	_	_	_	_	
135-137	18031-18034	and	_	_	_	_	
135-138	18035-18038	not	_	_	_	_	
135-139	18039-18044	break	_	_	_	_	
135-140	18045-18058	accessibility	_	_	_	_	
135-141	18059-18061	in	_	_	_	_	
135-142	18062-18071	ReactWhat	_	_	_	_	
135-143	18072-18074	is	_	_	_	_	
135-144	18075-18078	the	_	_	_	_	
135-145	18079-18083	best	_	_	_	_	
135-146	18084-18087	way	_	_	_	_	
135-147	18088-18090	to	_	_	_	_	
135-148	18091-18095	hire	_	_	_	_	
135-149	18096-18098	QA	_	_	_	_	
135-150	18099-18108	Engineers	_	_	_	_	
135-151	18108-18109	?	_	_	_	_	

#Text=How To Move From Customer Support to Engineering in 5 StepsStephanie PiGetting the most out of React AlicanteSteve FrenchHeavy Hitters in RedisTamara ChuBriteBytes: Diego “Kartones” MuñozStyleguide-Driven Development at Eventbrite: IntroductionTom InsamSetting the title of AirDrop shares under iOS 7Toph BurnsHow to Craft a Successful Engineering InterviewVictoria ZhangThe Elevator Pitch from a Data StrategistVincent BudrovichVarnish and A-B Testing: How to Play Nice
#Text=Proudly powered by WordPress
136-1	18109-18112	How	_	_	_	_	
136-2	18113-18115	To	_	_	_	_	
136-3	18116-18120	Move	_	_	_	_	
136-4	18121-18125	From	_	_	_	_	
136-5	18126-18134	Customer	_	_	_	_	
136-6	18135-18142	Support	_	_	_	_	
136-7	18143-18145	to	_	_	_	_	
136-8	18146-18157	Engineering	_	_	_	_	
136-9	18158-18160	in	_	_	_	_	
136-10	18161-18162	5	_	_	_	_	
136-11	18163-18177	StepsStephanie	_	_	_	_	
136-12	18178-18187	PiGetting	_	_	_	_	
136-13	18188-18191	the	_	_	_	_	
136-14	18192-18196	most	_	_	_	_	
136-15	18197-18200	out	_	_	_	_	
136-16	18201-18203	of	_	_	_	_	
136-17	18204-18209	React	_	_	_	_	
136-18	18210-18223	AlicanteSteve	_	_	_	_	
136-19	18224-18235	FrenchHeavy	_	_	_	_	
136-20	18236-18243	Hitters	_	_	_	_	
136-21	18244-18246	in	_	_	_	_	
136-22	18247-18258	RedisTamara	_	_	_	_	
136-23	18259-18272	ChuBriteBytes	_	_	_	_	
136-24	18272-18273	:	_	_	_	_	
136-25	18274-18279	Diego	_	_	_	_	
136-26	18280-18281	“	_	_	_	_	
136-27	18281-18289	Kartones	_	_	_	_	
136-28	18289-18290	”	_	_	_	_	
136-29	18291-18313	MuñozStyleguide-Driven	_	_	_	_	
136-30	18314-18325	Development	_	_	_	_	
136-31	18326-18328	at	_	_	_	_	
136-32	18329-18339	Eventbrite	_	_	_	_	
136-33	18339-18340	:	_	_	_	_	
136-34	18341-18356	IntroductionTom	_	_	_	_	
136-35	18357-18369	InsamSetting	_	_	_	_	
136-36	18370-18373	the	_	_	_	_	
136-37	18374-18379	title	_	_	_	_	
136-38	18380-18382	of	_	_	_	_	
136-39	18383-18390	AirDrop	_	_	_	_	
136-40	18391-18397	shares	_	_	_	_	
136-41	18398-18403	under	_	_	_	_	
136-42	18404-18407	iOS	_	_	_	_	
136-43	18408-18413	7Toph	_	_	_	_	
136-44	18414-18422	BurnsHow	_	_	_	_	
136-45	18423-18425	to	_	_	_	_	
136-46	18426-18431	Craft	_	_	_	_	
136-47	18432-18433	a	_	_	_	_	
136-48	18434-18444	Successful	_	_	_	_	
136-49	18445-18456	Engineering	_	_	_	_	
136-50	18457-18474	InterviewVictoria	_	_	_	_	
136-51	18475-18483	ZhangThe	_	_	_	_	
136-52	18484-18492	Elevator	_	_	_	_	
136-53	18493-18498	Pitch	_	_	_	_	
136-54	18499-18503	from	_	_	_	_	
136-55	18504-18505	a	_	_	_	_	
136-56	18506-18510	Data	_	_	_	_	
136-57	18511-18528	StrategistVincent	_	_	_	_	
136-58	18529-18545	BudrovichVarnish	_	_	_	_	
136-59	18546-18549	and	_	_	_	_	
136-60	18550-18553	A-B	_	_	_	_	
136-61	18554-18561	Testing	_	_	_	_	
136-62	18561-18562	:	_	_	_	_	
136-63	18563-18566	How	_	_	_	_	
136-64	18567-18569	to	_	_	_	_	
136-65	18570-18574	Play	_	_	_	_	
136-66	18575-18579	Nice	_	_	_	_	
136-67	18580-18587	Proudly	_	_	_	_	
136-68	18588-18595	powered	_	_	_	_	
136-69	18596-18598	by	_	_	_	_	
136-70	18599-18608	WordPress	_	_	_	_	
