#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value
#T_RL=webanno.custom.Relation|relation|BT_de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity


#Text=Top 10 performance tuning techniques for Amazon Redshift | AWS Big Data Blog
#Text=Click here to return to Amazon Web Services homepage
#Text=Contact Sales
#Text=Support
#Text=English
#Text=My Account
#Text=Create an AWS Account
#Text=Products
#Text=Solutions
#Text=Pricing
#Text=Documentation
#Text=Learn
#Text=Partner Network
#Text=AWS Marketplace
#Text=Customer Enablement
#Text=Events
#Text=Explore More
#Text=عربي
#Text=Bahasa Indonesia
#Text=Deutsch
#Text=English
#Text=Español
#Text=Français
#Text=Italiano
#Text=Português
#Text=Tiếng Việt
#Text=Türkçe
#Text=Ρусский
#Text=ไทย
#Text=日本語
#Text=한국어
#Text=中文 (简体)
#Text=中文 (繁體)
#Text=AWS Management Console
#Text=Account Settings
#Text=Billing & Cost Management
#Text=Security Credentials
#Text=AWS Personal Health Dashboard
#Text=Support Center
#Text=Knowledge Center
#Text=AWS Support Overview
#Text=Click here to return to Amazon Web Services homepage
#Text=Products
#Text=Solutions
#Text=Pricing
#Text=Introduction to AWS
#Text=Getting Started
#Text=Documentation
#Text=Training and Certification
#Text=Developer Center
#Text=Customer Success
#Text=Partner Network
#Text=AWS Marketplace
#Text=Support
#Text=Log into Console
#Text=Download the Mobile App
#Text=Blog Home
#Text=Category
#Text=Edition
#Text=Follow
#Text=Architecture
#Text=AWS Cost Management
#Text=AWS Partner Network
#Text=AWS Podcast
#Text=AWS Marketplace
#Text=AWS News
#Text=Big Data
#Text=Business Productivity
#Text=Compute
#Text=Contact Center
#Text=Containers
#Text=Database
#Text=Desktop & Application Streaming
#Text=Developer
#Text=DevOps
#Text=Enterprise Strategy
#Text=Front-End Web & Mobile
#Text=Game Tech
#Text=HPC
#Text=Infrastructure & Automation
#Text=Industries
#Text=Internet of Things
#Text=Machine Learning
#Text=Management & Governance
#Text=Media
#Text=Messaging & Targeting
#Text=Modernizing with AWS
#Text=Networking & Content Delivery
#Text=Open Source
#Text=Public Sector
#Text=Quantum Computing
#Text=Robotics
#Text=SAP
#Text=Security, Identity, & Compliance
#Text=Startups
#Text=Storage
#Text=Training & Certification
#Text=中国版
#Text=Édition Française
#Text=Deutsche Edition
#Text=日本版
#Text=한국 에디션
#Text=Edição em Português
#Text=Edición en Español
#Text=English Edition
#Text=Версия на русском
#Text=Edisi Bahasa Indonesia
#Text=Mailing List
#Text=RSS Feed
#Text=AWS Big Data Blog
#Text=Top 10 performance tuning techniques for Amazon Redshift
#Text=Matt Scaer,
#Text=Manish Vazirani, and
#Text=Tarun Chaudhary | on
#Text=28 AUG 2020 | in
#Text=Amazon Redshift, Amazon Redshift, Analytics, AWS Big Data, Database |
#Text=Permalink |
#Text=Comments |
#Text=Share
#Text=Customers use Amazon Redshift for everything from accelerating existing database environments, to ingesting weblogs for big data analytics.
1-1	0-3	Top	_	_	_	_	
1-2	4-6	10	_	_	_	_	
1-3	7-18	performance	_	_	_	_	
1-4	19-25	tuning	_	_	_	_	
1-5	26-36	techniques	_	_	_	_	
1-6	37-40	for	_	_	_	_	
1-7	41-47	Amazon	_	_	_	_	
1-8	48-56	Redshift	_	_	_	_	
1-9	57-58	|	_	_	_	_	
1-10	59-62	AWS	_	_	_	_	
1-11	63-66	Big	_	_	_	_	
1-12	67-71	Data	_	_	_	_	
1-13	72-76	Blog	_	_	_	_	
1-14	77-82	Click	_	_	_	_	
1-15	83-87	here	_	_	_	_	
1-16	88-90	to	_	_	_	_	
1-17	91-97	return	_	_	_	_	
1-18	98-100	to	_	_	_	_	
1-19	101-107	Amazon	_	_	_	_	
1-20	108-111	Web	_	_	_	_	
1-21	112-120	Services	_	_	_	_	
1-22	121-129	homepage	_	_	_	_	
1-23	130-137	Contact	_	_	_	_	
1-24	138-143	Sales	_	_	_	_	
1-25	144-151	Support	_	_	_	_	
1-26	152-159	English	_	_	_	_	
1-27	160-162	My	_	_	_	_	
1-28	163-170	Account	_	_	_	_	
1-29	171-177	Create	_	_	_	_	
1-30	178-180	an	_	_	_	_	
1-31	181-184	AWS	_	_	_	_	
1-32	185-192	Account	_	_	_	_	
1-33	193-201	Products	_	_	_	_	
1-34	202-211	Solutions	_	_	_	_	
1-35	212-219	Pricing	_	_	_	_	
1-36	220-233	Documentation	_	_	_	_	
1-37	234-239	Learn	_	_	_	_	
1-38	240-247	Partner	_	_	_	_	
1-39	248-255	Network	_	_	_	_	
1-40	256-259	AWS	_	_	_	_	
1-41	260-271	Marketplace	_	_	_	_	
1-42	272-280	Customer	_	_	_	_	
1-43	281-291	Enablement	_	_	_	_	
1-44	292-298	Events	_	_	_	_	
1-45	299-306	Explore	_	_	_	_	
1-46	307-311	More	_	_	_	_	
1-47	312-316	عربي	_	_	_	_	
1-48	317-323	Bahasa	_	_	_	_	
1-49	324-333	Indonesia	_	_	_	_	
1-50	334-341	Deutsch	_	_	_	_	
1-51	342-349	English	_	_	_	_	
1-52	350-357	Español	_	_	_	_	
1-53	358-366	Français	_	_	_	_	
1-54	367-375	Italiano	_	_	_	_	
1-55	376-385	Português	_	_	_	_	
1-56	386-391	Tiếng	_	_	_	_	
1-57	392-396	Việt	_	_	_	_	
1-58	397-403	Türkçe	_	_	_	_	
1-59	404-411	Ρусский	_	_	_	_	
1-60	412-415	ไทย	_	_	_	_	
1-61	416-419	日本語	_	_	_	_	
1-62	420-423	한국어	_	_	_	_	
1-63	424-426	中文	_	_	_	_	
1-64	427-428	(	_	_	_	_	
1-65	428-430	简体	_	_	_	_	
1-66	430-431	)	_	_	_	_	
1-67	432-434	中文	_	_	_	_	
1-68	435-436	(	_	_	_	_	
1-69	436-438	繁體	_	_	_	_	
1-70	438-439	)	_	_	_	_	
1-71	440-443	AWS	_	_	_	_	
1-72	444-454	Management	_	_	_	_	
1-73	455-462	Console	_	_	_	_	
1-74	463-470	Account	_	_	_	_	
1-75	471-479	Settings	_	_	_	_	
1-76	480-487	Billing	_	_	_	_	
1-77	488-489	&	_	_	_	_	
1-78	490-494	Cost	_	_	_	_	
1-79	495-505	Management	_	_	_	_	
1-80	506-514	Security	_	_	_	_	
1-81	515-526	Credentials	_	_	_	_	
1-82	527-530	AWS	_	_	_	_	
1-83	531-539	Personal	_	_	_	_	
1-84	540-546	Health	_	_	_	_	
1-85	547-556	Dashboard	_	_	_	_	
1-86	557-564	Support	_	_	_	_	
1-87	565-571	Center	_	_	_	_	
1-88	572-581	Knowledge	_	_	_	_	
1-89	582-588	Center	_	_	_	_	
1-90	589-592	AWS	_	_	_	_	
1-91	593-600	Support	_	_	_	_	
1-92	601-609	Overview	_	_	_	_	
1-93	610-615	Click	_	_	_	_	
1-94	616-620	here	_	_	_	_	
1-95	621-623	to	_	_	_	_	
1-96	624-630	return	_	_	_	_	
1-97	631-633	to	_	_	_	_	
1-98	634-640	Amazon	_	_	_	_	
1-99	641-644	Web	_	_	_	_	
1-100	645-653	Services	_	_	_	_	
1-101	654-662	homepage	_	_	_	_	
1-102	663-671	Products	_	_	_	_	
1-103	672-681	Solutions	_	_	_	_	
1-104	682-689	Pricing	_	_	_	_	
1-105	690-702	Introduction	_	_	_	_	
1-106	703-705	to	_	_	_	_	
1-107	706-709	AWS	_	_	_	_	
1-108	710-717	Getting	_	_	_	_	
1-109	718-725	Started	_	_	_	_	
1-110	726-739	Documentation	_	_	_	_	
1-111	740-748	Training	_	_	_	_	
1-112	749-752	and	_	_	_	_	
1-113	753-766	Certification	_	_	_	_	
1-114	767-776	Developer	_	_	_	_	
1-115	777-783	Center	_	_	_	_	
1-116	784-792	Customer	_	_	_	_	
1-117	793-800	Success	_	_	_	_	
1-118	801-808	Partner	_	_	_	_	
1-119	809-816	Network	_	_	_	_	
1-120	817-820	AWS	_	_	_	_	
1-121	821-832	Marketplace	_	_	_	_	
1-122	833-840	Support	_	_	_	_	
1-123	841-844	Log	_	_	_	_	
1-124	845-849	into	_	_	_	_	
1-125	850-857	Console	_	_	_	_	
1-126	858-866	Download	_	_	_	_	
1-127	867-870	the	_	_	_	_	
1-128	871-877	Mobile	_	_	_	_	
1-129	878-881	App	_	_	_	_	
1-130	882-886	Blog	_	_	_	_	
1-131	887-891	Home	_	_	_	_	
1-132	892-900	Category	_	_	_	_	
1-133	901-908	Edition	_	_	_	_	
1-134	909-915	Follow	_	_	_	_	
1-135	916-928	Architecture	_	_	_	_	
1-136	929-932	AWS	_	_	_	_	
1-137	933-937	Cost	_	_	_	_	
1-138	938-948	Management	_	_	_	_	
1-139	949-952	AWS	_	_	_	_	
1-140	953-960	Partner	_	_	_	_	
1-141	961-968	Network	_	_	_	_	
1-142	969-972	AWS	_	_	_	_	
1-143	973-980	Podcast	_	_	_	_	
1-144	981-984	AWS	_	_	_	_	
1-145	985-996	Marketplace	_	_	_	_	
1-146	997-1000	AWS	_	_	_	_	
1-147	1001-1005	News	_	_	_	_	
1-148	1006-1009	Big	_	_	_	_	
1-149	1010-1014	Data	_	_	_	_	
1-150	1015-1023	Business	_	_	_	_	
1-151	1024-1036	Productivity	_	_	_	_	
1-152	1037-1044	Compute	_	_	_	_	
1-153	1045-1052	Contact	_	_	_	_	
1-154	1053-1059	Center	_	_	_	_	
1-155	1060-1070	Containers	_	_	_	_	
1-156	1071-1079	Database	_	_	_	_	
1-157	1080-1087	Desktop	_	_	_	_	
1-158	1088-1089	&	_	_	_	_	
1-159	1090-1101	Application	_	_	_	_	
1-160	1102-1111	Streaming	_	_	_	_	
1-161	1112-1121	Developer	_	_	_	_	
1-162	1122-1128	DevOps	_	_	_	_	
1-163	1129-1139	Enterprise	_	_	_	_	
1-164	1140-1148	Strategy	_	_	_	_	
1-165	1149-1158	Front-End	_	_	_	_	
1-166	1159-1162	Web	_	_	_	_	
1-167	1163-1164	&	_	_	_	_	
1-168	1165-1171	Mobile	_	_	_	_	
1-169	1172-1176	Game	_	_	_	_	
1-170	1177-1181	Tech	_	_	_	_	
1-171	1182-1185	HPC	_	_	_	_	
1-172	1186-1200	Infrastructure	_	_	_	_	
1-173	1201-1202	&	_	_	_	_	
1-174	1203-1213	Automation	_	_	_	_	
1-175	1214-1224	Industries	_	_	_	_	
1-176	1225-1233	Internet	_	_	_	_	
1-177	1234-1236	of	_	_	_	_	
1-178	1237-1243	Things	_	_	_	_	
1-179	1244-1251	Machine	_	_	_	_	
1-180	1252-1260	Learning	_	_	_	_	
1-181	1261-1271	Management	_	_	_	_	
1-182	1272-1273	&	_	_	_	_	
1-183	1274-1284	Governance	_	_	_	_	
1-184	1285-1290	Media	_	_	_	_	
1-185	1291-1300	Messaging	_	_	_	_	
1-186	1301-1302	&	_	_	_	_	
1-187	1303-1312	Targeting	_	_	_	_	
1-188	1313-1324	Modernizing	_	_	_	_	
1-189	1325-1329	with	_	_	_	_	
1-190	1330-1333	AWS	_	_	_	_	
1-191	1334-1344	Networking	_	_	_	_	
1-192	1345-1346	&	_	_	_	_	
1-193	1347-1354	Content	_	_	_	_	
1-194	1355-1363	Delivery	_	_	_	_	
1-195	1364-1368	Open	_	_	_	_	
1-196	1369-1375	Source	_	_	_	_	
1-197	1376-1382	Public	_	_	_	_	
1-198	1383-1389	Sector	_	_	_	_	
1-199	1390-1397	Quantum	_	_	_	_	
1-200	1398-1407	Computing	_	_	_	_	
1-201	1408-1416	Robotics	_	_	_	_	
1-202	1417-1420	SAP	_	_	_	_	
1-203	1421-1429	Security	_	_	_	_	
1-204	1429-1430	,	_	_	_	_	
1-205	1431-1439	Identity	_	_	_	_	
1-206	1439-1440	,	_	_	_	_	
1-207	1441-1442	&	_	_	_	_	
1-208	1443-1453	Compliance	_	_	_	_	
1-209	1454-1462	Startups	_	_	_	_	
1-210	1463-1470	Storage	_	_	_	_	
1-211	1471-1479	Training	_	_	_	_	
1-212	1480-1481	&	_	_	_	_	
1-213	1482-1495	Certification	_	_	_	_	
1-214	1496-1499	中国版	_	_	_	_	
1-215	1500-1507	Édition	_	_	_	_	
1-216	1508-1517	Française	_	_	_	_	
1-217	1518-1526	Deutsche	_	_	_	_	
1-218	1527-1534	Edition	_	_	_	_	
1-219	1535-1538	日本版	_	_	_	_	
1-220	1539-1541	한국	_	_	_	_	
1-221	1542-1545	에디션	_	_	_	_	
1-222	1546-1552	Edição	_	_	_	_	
1-223	1553-1555	em	_	_	_	_	
1-224	1556-1565	Português	_	_	_	_	
1-225	1566-1573	Edición	_	_	_	_	
1-226	1574-1576	en	_	_	_	_	
1-227	1577-1584	Español	_	_	_	_	
1-228	1585-1592	English	_	_	_	_	
1-229	1593-1600	Edition	_	_	_	_	
1-230	1601-1607	Версия	_	_	_	_	
1-231	1608-1610	на	_	_	_	_	
1-232	1611-1618	русском	_	_	_	_	
1-233	1619-1624	Edisi	_	_	_	_	
1-234	1625-1631	Bahasa	_	_	_	_	
1-235	1632-1641	Indonesia	_	_	_	_	
1-236	1642-1649	Mailing	_	_	_	_	
1-237	1650-1654	List	_	_	_	_	
1-238	1655-1658	RSS	_	_	_	_	
1-239	1659-1663	Feed	_	_	_	_	
1-240	1664-1667	AWS	_	_	_	_	
1-241	1668-1671	Big	_	_	_	_	
1-242	1672-1676	Data	_	_	_	_	
1-243	1677-1681	Blog	_	_	_	_	
1-244	1682-1685	Top	_	_	_	_	
1-245	1686-1688	10	_	_	_	_	
1-246	1689-1700	performance	_	_	_	_	
1-247	1701-1707	tuning	_	_	_	_	
1-248	1708-1718	techniques	_	_	_	_	
1-249	1719-1722	for	_	_	_	_	
1-250	1723-1729	Amazon	_	_	_	_	
1-251	1730-1738	Redshift	_	_	_	_	
1-252	1739-1743	Matt	_	_	_	_	
1-253	1744-1749	Scaer	_	_	_	_	
1-254	1749-1750	,	_	_	_	_	
1-255	1751-1757	Manish	_	_	_	_	
1-256	1758-1766	Vazirani	_	_	_	_	
1-257	1766-1767	,	_	_	_	_	
1-258	1768-1771	and	_	_	_	_	
1-259	1772-1777	Tarun	_	_	_	_	
1-260	1778-1787	Chaudhary	_	_	_	_	
1-261	1788-1789	|	_	_	_	_	
1-262	1790-1792	on	_	_	_	_	
1-263	1793-1795	28	_	_	_	_	
1-264	1796-1799	AUG	_	_	_	_	
1-265	1800-1804	2020	_	_	_	_	
1-266	1805-1806	|	_	_	_	_	
1-267	1807-1809	in	_	_	_	_	
1-268	1810-1816	Amazon	_	_	_	_	
1-269	1817-1825	Redshift	_	_	_	_	
1-270	1825-1826	,	_	_	_	_	
1-271	1827-1833	Amazon	_	_	_	_	
1-272	1834-1842	Redshift	_	_	_	_	
1-273	1842-1843	,	_	_	_	_	
1-274	1844-1853	Analytics	_	_	_	_	
1-275	1853-1854	,	_	_	_	_	
1-276	1855-1858	AWS	_	_	_	_	
1-277	1859-1862	Big	_	_	_	_	
1-278	1863-1867	Data	_	_	_	_	
1-279	1867-1868	,	_	_	_	_	
1-280	1869-1877	Database	_	_	_	_	
1-281	1878-1879	|	_	_	_	_	
1-282	1880-1889	Permalink	_	_	_	_	
1-283	1890-1891	|	_	_	_	_	
1-284	1892-1900	Comments	_	_	_	_	
1-285	1901-1902	|	_	_	_	_	
1-286	1903-1908	Share	_	_	_	_	
1-287	1909-1918	Customers	_	_	_	_	
1-288	1919-1922	use	_	_	_	_	
1-289	1923-1929	Amazon	_	_	_	_	
1-290	1930-1938	Redshift	_	_	_	_	
1-291	1939-1942	for	_	_	_	_	
1-292	1943-1953	everything	_	_	_	_	
1-293	1954-1958	from	_	_	_	_	
1-294	1959-1971	accelerating	_	_	_	_	
1-295	1972-1980	existing	_	_	_	_	
1-296	1981-1989	database	_	_	_	_	
1-297	1990-2002	environments	_	_	_	_	
1-298	2002-2003	,	_	_	_	_	
1-299	2004-2006	to	_	_	_	_	
1-300	2007-2016	ingesting	_	_	_	_	
1-301	2017-2024	weblogs	_	_	_	_	
1-302	2025-2028	for	_	_	_	_	
1-303	2029-2032	big	_	_	_	_	
1-304	2033-2037	data	_	_	_	_	
1-305	2038-2047	analytics	_	_	_	_	
1-306	2047-2048	.	_	_	_	_	

#Text=Amazon Redshift is a fully managed, petabyte-scale, massively parallel data warehouse that offers simple operations and high performance.
2-1	2049-2055	Amazon	_	_	_	_	
2-2	2056-2064	Redshift	_	_	_	_	
2-3	2065-2067	is	_	_	_	_	
2-4	2068-2069	a	_	_	_	_	
2-5	2070-2075	fully	_	_	_	_	
2-6	2076-2083	managed	_	_	_	_	
2-7	2083-2084	,	_	_	_	_	
2-8	2085-2099	petabyte-scale	_	_	_	_	
2-9	2099-2100	,	_	_	_	_	
2-10	2101-2110	massively	_	_	_	_	
2-11	2111-2119	parallel	_	_	_	_	
2-12	2120-2124	data	_	_	_	_	
2-13	2125-2134	warehouse	_	_	_	_	
2-14	2135-2139	that	_	_	_	_	
2-15	2140-2146	offers	_	_	_	_	
2-16	2147-2153	simple	_	_	_	_	
2-17	2154-2164	operations	_	_	_	_	
2-18	2165-2168	and	_	_	_	_	
2-19	2169-2173	high	_	_	_	_	
2-20	2174-2185	performance	_	_	_	_	
2-21	2185-2186	.	_	_	_	_	

#Text=Amazon Redshift provides an open standard JDBC/ODBC driver interface, which allows you to connect your existing business intelligence (BI) tools and reuse existing analytics queries.
3-1	2187-2193	Amazon	_	_	_	_	
3-2	2194-2202	Redshift	_	_	_	_	
3-3	2203-2211	provides	_	_	_	_	
3-4	2212-2214	an	_	_	_	_	
3-5	2215-2219	open	_	_	_	_	
3-6	2220-2228	standard	_	_	_	_	
3-7	2229-2233	JDBC	_	_	_	_	
3-8	2233-2234	/	_	_	_	_	
3-9	2234-2238	ODBC	_	_	_	_	
3-10	2239-2245	driver	_	_	_	_	
3-11	2246-2255	interface	_	_	_	_	
3-12	2255-2256	,	_	_	_	_	
3-13	2257-2262	which	_	_	_	_	
3-14	2263-2269	allows	_	_	_	_	
3-15	2270-2273	you	_	_	_	_	
3-16	2274-2276	to	_	_	_	_	
3-17	2277-2284	connect	_	_	_	_	
3-18	2285-2289	your	_	_	_	_	
3-19	2290-2298	existing	_	_	_	_	
3-20	2299-2307	business	_	_	_	_	
3-21	2308-2320	intelligence	_	_	_	_	
3-22	2321-2322	(	_	_	_	_	
3-23	2322-2324	BI	_	_	_	_	
3-24	2324-2325	)	_	_	_	_	
3-25	2326-2331	tools	_	_	_	_	
3-26	2332-2335	and	_	_	_	_	
3-27	2336-2341	reuse	_	_	_	_	
3-28	2342-2350	existing	_	_	_	_	
3-29	2351-2360	analytics	_	_	_	_	
3-30	2361-2368	queries	_	_	_	_	
3-31	2368-2369	.	_	_	_	_	

#Text=Amazon Redshift can run any type of data model, from a production transaction system third-normal-form model to star and snowflake schemas, data vault, or simple flat tables.
4-1	2370-2376	Amazon	_	_	_	_	
4-2	2377-2385	Redshift	_	_	_	_	
4-3	2386-2389	can	_	_	_	_	
4-4	2390-2393	run	_	_	_	_	
4-5	2394-2397	any	_	_	_	_	
4-6	2398-2402	type	_	_	_	_	
4-7	2403-2405	of	_	_	_	_	
4-8	2406-2410	data	_	_	_	_	
4-9	2411-2416	model	_	_	_	_	
4-10	2416-2417	,	_	_	_	_	
4-11	2418-2422	from	_	_	_	_	
4-12	2423-2424	a	_	_	_	_	
4-13	2425-2435	production	_	_	_	_	
4-14	2436-2447	transaction	_	_	_	_	
4-15	2448-2454	system	_	_	_	_	
4-16	2455-2472	third-normal-form	_	_	_	_	
4-17	2473-2478	model	_	_	_	_	
4-18	2479-2481	to	_	_	_	_	
4-19	2482-2486	star	_	_	_	_	
4-20	2487-2490	and	_	_	_	_	
4-21	2491-2500	snowflake	_	_	_	_	
4-22	2501-2508	schemas	_	_	_	_	
4-23	2508-2509	,	_	_	_	_	
4-24	2510-2514	data	_	_	_	_	
4-25	2515-2520	vault	_	_	_	_	
4-26	2520-2521	,	_	_	_	_	
4-27	2522-2524	or	_	_	_	_	
4-28	2525-2531	simple	_	_	_	_	
4-29	2532-2536	flat	_	_	_	_	
4-30	2537-2543	tables	_	_	_	_	
4-31	2543-2544	.	_	_	_	_	

#Text=This post takes you through the most common performance-related opportunities when adopting Amazon Redshift and gives you concrete guidance on how to optimize each one.
5-1	2545-2549	This	_	_	_	_	
5-2	2550-2554	post	_	_	_	_	
5-3	2555-2560	takes	_	_	_	_	
5-4	2561-2564	you	_	_	_	_	
5-5	2565-2572	through	_	_	_	_	
5-6	2573-2576	the	_	_	_	_	
5-7	2577-2581	most	_	_	_	_	
5-8	2582-2588	common	_	_	_	_	
5-9	2589-2608	performance-related	_	_	_	_	
5-10	2609-2622	opportunities	_	_	_	_	
5-11	2623-2627	when	_	_	_	_	
5-12	2628-2636	adopting	_	_	_	_	
5-13	2637-2643	Amazon	_	_	_	_	
5-14	2644-2652	Redshift	_	_	_	_	
5-15	2653-2656	and	_	_	_	_	
5-16	2657-2662	gives	_	_	_	_	
5-17	2663-2666	you	_	_	_	_	
5-18	2667-2675	concrete	_	_	_	_	
5-19	2676-2684	guidance	_	_	_	_	
5-20	2685-2687	on	_	_	_	_	
5-21	2688-2691	how	_	_	_	_	
5-22	2692-2694	to	_	_	_	_	
5-23	2695-2703	optimize	_	_	_	_	
5-24	2704-2708	each	_	_	_	_	
5-25	2709-2712	one	_	_	_	_	
5-26	2712-2713	.	_	_	_	_	

#Text=What’s new
#Text=This post refreshes the Top 10 post from early 2019.
6-1	2714-2718	What	_	_	_	_	
6-2	2718-2719	’	_	_	_	_	
6-3	2719-2720	s	_	_	_	_	
6-4	2721-2724	new	_	_	_	_	
6-5	2725-2729	This	_	_	_	_	
6-6	2730-2734	post	_	_	_	_	
6-7	2735-2744	refreshes	_	_	_	_	
6-8	2745-2748	the	_	_	_	_	
6-9	2749-2752	Top	_	_	_	_	
6-10	2753-2755	10	_	_	_	_	
6-11	2756-2760	post	_	_	_	_	
6-12	2761-2765	from	_	_	_	_	
6-13	2766-2771	early	_	_	_	_	
6-14	2772-2776	2019	_	_	_	_	
6-15	2776-2777	.	_	_	_	_	

#Text=We’re pleased to share the advances we’ve made since then, and want to highlight a few key points.
7-1	2778-2780	We	_	_	_	_	
7-2	2780-2781	’	_	_	_	_	
7-3	2781-2783	re	_	_	_	_	
7-4	2784-2791	pleased	_	_	_	_	
7-5	2792-2794	to	_	_	_	_	
7-6	2795-2800	share	_	_	_	_	
7-7	2801-2804	the	_	_	_	_	
7-8	2805-2813	advances	_	_	_	_	
7-9	2814-2816	we	_	_	_	_	
7-10	2816-2817	’	_	_	_	_	
7-11	2817-2819	ve	_	_	_	_	
7-12	2820-2824	made	_	_	_	_	
7-13	2825-2830	since	_	_	_	_	
7-14	2831-2835	then	_	_	_	_	
7-15	2835-2836	,	_	_	_	_	
7-16	2837-2840	and	_	_	_	_	
7-17	2841-2845	want	_	_	_	_	
7-18	2846-2848	to	_	_	_	_	
7-19	2849-2858	highlight	_	_	_	_	
7-20	2859-2860	a	_	_	_	_	
7-21	2861-2864	few	_	_	_	_	
7-22	2865-2868	key	_	_	_	_	
7-23	2869-2875	points	_	_	_	_	
7-24	2875-2876	.	_	_	_	_	

#Text=Query throughput is more important than query concurrency.
8-1	2877-2882	Query	_	_	_	_	
8-2	2883-2893	throughput	_	_	_	_	
8-3	2894-2896	is	_	_	_	_	
8-4	2897-2901	more	_	_	_	_	
8-5	2902-2911	important	_	_	_	_	
8-6	2912-2916	than	_	_	_	_	
8-7	2917-2922	query	_	_	_	_	
8-8	2923-2934	concurrency	_	_	_	_	
8-9	2934-2935	.	_	_	_	_	

#Text=Configuring concurrency, like memory management, can be relegated to Amazon Redshift’s internal ML models through Automatic WLM with Query Priorities.
9-1	2936-2947	Configuring	_	_	_	_	
9-2	2948-2959	concurrency	_	_	_	_	
9-3	2959-2960	,	_	_	_	_	
9-4	2961-2965	like	_	_	_	_	
9-5	2966-2972	memory	_	_	_	_	
9-6	2973-2983	management	_	_	_	_	
9-7	2983-2984	,	_	_	_	_	
9-8	2985-2988	can	_	_	_	_	
9-9	2989-2991	be	_	_	_	_	
9-10	2992-3001	relegated	_	_	_	_	
9-11	3002-3004	to	_	_	_	_	
9-12	3005-3011	Amazon	_	_	_	_	
9-13	3012-3020	Redshift	_	_	_	_	
9-14	3020-3021	’	_	_	_	_	
9-15	3021-3022	s	_	_	_	_	
9-16	3023-3031	internal	_	_	_	_	
9-17	3032-3034	ML	_	_	_	_	
9-18	3035-3041	models	_	_	_	_	
9-19	3042-3049	through	_	_	_	_	
9-20	3050-3059	Automatic	_	_	_	_	
9-21	3060-3063	WLM	_	_	_	_	
9-22	3064-3068	with	_	_	_	_	
9-23	3069-3074	Query	_	_	_	_	
9-24	3075-3085	Priorities	_	_	_	_	
9-25	3085-3086	.	_	_	_	_	

#Text=On production clusters across the fleet, we see the automated process assigning a much higher number of active statements for certain workloads, while a lower number for other types of use-cases.
10-1	3087-3089	On	_	_	_	_	
10-2	3090-3100	production	_	_	_	_	
10-3	3101-3109	clusters	_	_	_	_	
10-4	3110-3116	across	_	_	_	_	
10-5	3117-3120	the	_	_	_	_	
10-6	3121-3126	fleet	_	_	_	_	
10-7	3126-3127	,	_	_	_	_	
10-8	3128-3130	we	_	_	_	_	
10-9	3131-3134	see	_	_	_	_	
10-10	3135-3138	the	_	_	_	_	
10-11	3139-3148	automated	_	_	_	_	
10-12	3149-3156	process	_	_	_	_	
10-13	3157-3166	assigning	_	_	_	_	
10-14	3167-3168	a	_	_	_	_	
10-15	3169-3173	much	_	_	_	_	
10-16	3174-3180	higher	_	_	_	_	
10-17	3181-3187	number	_	_	_	_	
10-18	3188-3190	of	_	_	_	_	
10-19	3191-3197	active	_	_	_	_	
10-20	3198-3208	statements	_	_	_	_	
10-21	3209-3212	for	_	_	_	_	
10-22	3213-3220	certain	_	_	_	_	
10-23	3221-3230	workloads	_	_	_	_	
10-24	3230-3231	,	_	_	_	_	
10-25	3232-3237	while	_	_	_	_	
10-26	3238-3239	a	_	_	_	_	
10-27	3240-3245	lower	_	_	_	_	
10-28	3246-3252	number	_	_	_	_	
10-29	3253-3256	for	_	_	_	_	
10-30	3257-3262	other	_	_	_	_	
10-31	3263-3268	types	_	_	_	_	
10-32	3269-3271	of	_	_	_	_	
10-33	3272-3281	use-cases	_	_	_	_	
10-34	3281-3282	.	_	_	_	_	

#Text=This is done to maximize throughput, a measure of how much work the Amazon Redshift cluster can do over a period of time.
11-1	3283-3287	This	_	_	_	_	
11-2	3288-3290	is	_	_	_	_	
11-3	3291-3295	done	_	_	_	_	
11-4	3296-3298	to	_	_	_	_	
11-5	3299-3307	maximize	_	_	_	_	
11-6	3308-3318	throughput	_	_	_	_	
11-7	3318-3319	,	_	_	_	_	
11-8	3320-3321	a	_	_	_	_	
11-9	3322-3329	measure	_	_	_	_	
11-10	3330-3332	of	_	_	_	_	
11-11	3333-3336	how	_	_	_	_	
11-12	3337-3341	much	_	_	_	_	
11-13	3342-3346	work	_	_	_	_	
11-14	3347-3350	the	_	_	_	_	
11-15	3351-3357	Amazon	_	_	_	_	
11-16	3358-3366	Redshift	_	_	_	_	
11-17	3367-3374	cluster	_	_	_	_	
11-18	3375-3378	can	_	_	_	_	
11-19	3379-3381	do	_	_	_	_	
11-20	3382-3386	over	_	_	_	_	
11-21	3387-3388	a	_	_	_	_	
11-22	3389-3395	period	_	_	_	_	
11-23	3396-3398	of	_	_	_	_	
11-24	3399-3403	time	_	_	_	_	
11-25	3403-3404	.	_	_	_	_	

#Text=Examples are 300 queries a minute, or 1,500 SQL statements an hour.
12-1	3405-3413	Examples	_	_	_	_	
12-2	3414-3417	are	_	_	_	_	
12-3	3418-3421	300	_	_	_	_	
12-4	3422-3429	queries	_	_	_	_	
12-5	3430-3431	a	_	_	_	_	
12-6	3432-3438	minute	_	_	_	_	
12-7	3438-3439	,	_	_	_	_	
12-8	3440-3442	or	_	_	_	_	
12-9	3443-3448	1,500	_	_	_	_	
12-10	3449-3452	SQL	_	_	_	_	
12-11	3453-3463	statements	_	_	_	_	
12-12	3464-3466	an	_	_	_	_	
12-13	3467-3471	hour	_	_	_	_	
12-14	3471-3472	.	_	_	_	_	

#Text=It’s recommended to focus on increasing throughput over concurrency, because throughput is the metric with much more direct impact on the cluster’s users.
13-1	3473-3475	It	_	_	_	_	
13-2	3475-3476	’	_	_	_	_	
13-3	3476-3477	s	_	_	_	_	
13-4	3478-3489	recommended	_	_	_	_	
13-5	3490-3492	to	_	_	_	_	
13-6	3493-3498	focus	_	_	_	_	
13-7	3499-3501	on	_	_	_	_	
13-8	3502-3512	increasing	_	_	_	_	
13-9	3513-3523	throughput	_	_	_	_	
13-10	3524-3528	over	_	_	_	_	
13-11	3529-3540	concurrency	_	_	_	_	
13-12	3540-3541	,	_	_	_	_	
13-13	3542-3549	because	_	_	_	_	
13-14	3549-3550	 	_	_	_	_	
13-15	3550-3560	throughput	_	_	_	_	
13-16	3561-3563	is	_	_	_	_	
13-17	3564-3567	the	_	_	_	_	
13-18	3568-3574	metric	_	_	_	_	
13-19	3575-3579	with	_	_	_	_	
13-20	3580-3584	much	_	_	_	_	
13-21	3585-3589	more	_	_	_	_	
13-22	3590-3596	direct	_	_	_	_	
13-23	3597-3603	impact	_	_	_	_	
13-24	3604-3606	on	_	_	_	_	
13-25	3607-3610	the	_	_	_	_	
13-26	3611-3618	cluster	_	_	_	_	
13-27	3618-3619	’	_	_	_	_	
13-28	3619-3620	s	_	_	_	_	
13-29	3621-3626	users	_	_	_	_	
13-30	3626-3627	.	_	_	_	_	

#Text=In addition to the optimized Automatic WLM settings to maximize throughput, the concurrency scaling functionality in Amazon Redshift extends the throughput capability of the cluster to up to 10 times greater than what’s delivered with the original cluster.
14-1	3628-3630	In	_	_	_	_	
14-2	3631-3639	addition	_	_	_	_	
14-3	3640-3642	to	_	_	_	_	
14-4	3643-3646	the	_	_	_	_	
14-5	3647-3656	optimized	_	_	_	_	
14-6	3657-3666	Automatic	_	_	_	_	
14-7	3667-3670	WLM	_	_	_	_	
14-8	3671-3679	settings	_	_	_	_	
14-9	3680-3682	to	_	_	_	_	
14-10	3683-3691	maximize	_	_	_	_	
14-11	3692-3702	throughput	_	_	_	_	
14-12	3702-3703	,	_	_	_	_	
14-13	3704-3707	the	_	_	_	_	
14-14	3708-3719	concurrency	_	_	_	_	
14-15	3720-3727	scaling	_	_	_	_	
14-16	3728-3741	functionality	_	_	_	_	
14-17	3742-3744	in	_	_	_	_	
14-18	3745-3751	Amazon	_	_	_	_	
14-19	3752-3760	Redshift	_	_	_	_	
14-20	3761-3768	extends	_	_	_	_	
14-21	3769-3772	the	_	_	_	_	
14-22	3773-3783	throughput	_	_	_	_	
14-23	3784-3794	capability	_	_	_	_	
14-24	3795-3797	of	_	_	_	_	
14-25	3798-3801	the	_	_	_	_	
14-26	3802-3809	cluster	_	_	_	_	
14-27	3810-3812	to	_	_	_	_	
14-28	3813-3815	up	_	_	_	_	
14-29	3816-3818	to	_	_	_	_	
14-30	3819-3821	10	_	_	_	_	
14-31	3822-3827	times	_	_	_	_	
14-32	3828-3835	greater	_	_	_	_	
14-33	3836-3840	than	_	_	_	_	
14-34	3841-3845	what	_	_	_	_	
14-35	3845-3846	’	_	_	_	_	
14-36	3846-3847	s	_	_	_	_	
14-37	3848-3857	delivered	_	_	_	_	
14-38	3858-3862	with	_	_	_	_	
14-39	3863-3866	the	_	_	_	_	
14-40	3867-3875	original	_	_	_	_	
14-41	3876-3883	cluster	_	_	_	_	
14-42	3883-3884	.	_	_	_	_	

#Text=The tenfold increase is a current soft limit, you can reach out to your account team to increase it.
15-1	3885-3888	The	_	_	_	_	
15-2	3889-3896	tenfold	_	_	_	_	
15-3	3897-3905	increase	_	_	_	_	
15-4	3906-3908	is	_	_	_	_	
15-5	3909-3910	a	_	_	_	_	
15-6	3911-3918	current	_	_	_	_	
15-7	3919-3923	soft	_	_	_	_	
15-8	3924-3929	limit	_	_	_	_	
15-9	3929-3930	,	_	_	_	_	
15-10	3931-3934	you	_	_	_	_	
15-11	3935-3938	can	_	_	_	_	
15-12	3939-3944	reach	_	_	_	_	
15-13	3945-3948	out	_	_	_	_	
15-14	3949-3951	to	_	_	_	_	
15-15	3952-3956	your	_	_	_	_	
15-16	3957-3964	account	_	_	_	_	
15-17	3965-3969	team	_	_	_	_	
15-18	3970-3972	to	_	_	_	_	
15-19	3973-3981	increase	_	_	_	_	
15-20	3982-3984	it	_	_	_	_	
15-21	3984-3985	.	_	_	_	_	

#Text=Investing in the Amazon Redshift driver.
16-1	3986-3995	Investing	_	_	_	_	
16-2	3996-3998	in	_	_	_	_	
16-3	3999-4002	the	_	_	_	_	
16-4	4003-4009	Amazon	_	_	_	_	
16-5	4010-4018	Redshift	_	_	_	_	
16-6	4019-4025	driver	_	_	_	_	
16-7	4025-4026	.	_	_	_	_	

#Text=AWS now recommends the Amazon Redshift JDBC or ODBC driver for improved performance.
17-1	4027-4030	AWS	_	_	_	_	
17-2	4031-4034	now	_	_	_	_	
17-3	4035-4045	recommends	_	_	_	_	
17-4	4046-4049	the	_	_	_	_	
17-5	4050-4056	Amazon	_	_	_	_	
17-6	4057-4065	Redshift	_	_	_	_	
17-7	4066-4070	JDBC	_	_	_	_	
17-8	4071-4073	or	_	_	_	_	
17-9	4074-4078	ODBC	_	_	_	_	
17-10	4079-4085	driver	_	_	_	_	
17-11	4086-4089	for	_	_	_	_	
17-12	4090-4098	improved	_	_	_	_	
17-13	4099-4110	performance	_	_	_	_	
17-14	4110-4111	.	_	_	_	_	

#Text=Each driver has optional configurations to further tune it for higher or lower number of statements, with either fewer or greater row counts in the result set.
18-1	4112-4116	Each	_	_	_	_	
18-2	4117-4123	driver	_	_	_	_	
18-3	4124-4127	has	_	_	_	_	
18-4	4128-4136	optional	_	_	_	_	
18-5	4137-4151	configurations	_	_	_	_	
18-6	4152-4154	to	_	_	_	_	
18-7	4155-4162	further	_	_	_	_	
18-8	4163-4167	tune	_	_	_	_	
18-9	4168-4170	it	_	_	_	_	
18-10	4171-4174	for	_	_	_	_	
18-11	4175-4181	higher	_	_	_	_	
18-12	4182-4184	or	_	_	_	_	
18-13	4185-4190	lower	_	_	_	_	
18-14	4191-4197	number	_	_	_	_	
18-15	4198-4200	of	_	_	_	_	
18-16	4201-4211	statements	_	_	_	_	
18-17	4211-4212	,	_	_	_	_	
18-18	4213-4217	with	_	_	_	_	
18-19	4218-4224	either	_	_	_	_	
18-20	4225-4230	fewer	_	_	_	_	
18-21	4231-4233	or	_	_	_	_	
18-22	4234-4241	greater	_	_	_	_	
18-23	4242-4245	row	_	_	_	_	
18-24	4246-4252	counts	_	_	_	_	
18-25	4253-4255	in	_	_	_	_	
18-26	4256-4259	the	_	_	_	_	
18-27	4260-4266	result	_	_	_	_	
18-28	4267-4270	set	_	_	_	_	
18-29	4270-4271	.	_	_	_	_	

#Text=Ease of use by automating all the common DBA tasks.
19-1	4272-4276	Ease	_	_	_	_	
19-2	4277-4279	of	_	_	_	_	
19-3	4280-4283	use	_	_	_	_	
19-4	4284-4286	by	_	_	_	_	
19-5	4287-4297	automating	_	_	_	_	
19-6	4298-4301	all	_	_	_	_	
19-7	4302-4305	the	_	_	_	_	
19-8	4306-4312	common	_	_	_	_	
19-9	4313-4316	DBA	_	_	_	_	
19-10	4317-4322	tasks	_	_	_	_	
19-11	4322-4323	.	_	_	_	_	

#Text=In 2018, the SET DW “backronym” summarized the key considerations to drive performance (sort key, encoding, table maintenance, distribution, and workload management).
20-1	4324-4326	In	_	_	_	_	
20-2	4327-4331	2018	_	_	_	_	
20-3	4331-4332	,	_	_	_	_	
20-4	4333-4336	the	_	_	_	_	
20-5	4337-4340	SET	_	_	_	_	
20-6	4341-4343	DW	_	_	_	_	
20-7	4344-4345	“	_	_	_	_	
20-8	4345-4354	backronym	_	_	_	_	
20-9	4354-4355	”	_	_	_	_	
20-10	4356-4366	summarized	_	_	_	_	
20-11	4367-4370	the	_	_	_	_	
20-12	4371-4374	key	_	_	_	_	
20-13	4375-4389	considerations	_	_	_	_	
20-14	4390-4392	to	_	_	_	_	
20-15	4393-4398	drive	_	_	_	_	
20-16	4399-4410	performance	_	_	_	_	
20-17	4411-4412	(	_	_	_	_	
20-18	4412-4416	sort	_	_	_	_	
20-19	4417-4420	key	_	_	_	_	
20-20	4420-4421	,	_	_	_	_	
20-21	4422-4430	encoding	_	_	_	_	
20-22	4430-4431	,	_	_	_	_	
20-23	4432-4437	table	_	_	_	_	
20-24	4438-4449	maintenance	_	_	_	_	
20-25	4449-4450	,	_	_	_	_	
20-26	4451-4463	distribution	_	_	_	_	
20-27	4463-4464	,	_	_	_	_	
20-28	4465-4468	and	_	_	_	_	
20-29	4469-4477	workload	_	_	_	_	
20-30	4478-4488	management	_	_	_	_	
20-31	4488-4489	)	_	_	_	_	
20-32	4489-4490	.	_	_	_	_	

#Text=Since then, Amazon Redshift has added automation to inform 100% of SET DW, absorbed table maintenance into the service’s (and no longer the user’s) responsibility, and enhanced out-of-the-box performance with smarter default settings.
21-1	4491-4496	Since	_	_	_	_	
21-2	4497-4501	then	_	_	_	_	
21-3	4501-4502	,	_	_	_	_	
21-4	4503-4509	Amazon	_	_	_	_	
21-5	4510-4518	Redshift	_	_	_	_	
21-6	4519-4522	has	_	_	_	_	
21-7	4523-4528	added	_	_	_	_	
21-8	4529-4539	automation	_	_	_	_	
21-9	4540-4542	to	_	_	_	_	
21-10	4543-4549	inform	_	_	_	_	
21-11	4550-4554	100%	_	_	_	_	
21-12	4555-4557	of	_	_	_	_	
21-13	4558-4561	SET	_	_	_	_	
21-14	4562-4564	DW	_	_	_	_	
21-15	4564-4565	,	_	_	_	_	
21-16	4566-4574	absorbed	_	_	_	_	
21-17	4575-4580	table	_	_	_	_	
21-18	4581-4592	maintenance	_	_	_	_	
21-19	4593-4597	into	_	_	_	_	
21-20	4598-4601	the	_	_	_	_	
21-21	4602-4609	service	_	_	_	_	
21-22	4609-4610	’	_	_	_	_	
21-23	4610-4611	s	_	_	_	_	
21-24	4612-4613	(	_	_	_	_	
21-25	4613-4616	and	_	_	_	_	
21-26	4617-4619	no	_	_	_	_	
21-27	4620-4626	longer	_	_	_	_	
21-28	4627-4630	the	_	_	_	_	
21-29	4631-4635	user	_	_	_	_	
21-30	4635-4636	’	_	_	_	_	
21-31	4636-4637	s	_	_	_	_	
21-32	4637-4638	)	_	_	_	_	
21-33	4639-4653	responsibility	_	_	_	_	
21-34	4653-4654	,	_	_	_	_	
21-35	4655-4658	and	_	_	_	_	
21-36	4659-4667	enhanced	_	_	_	_	
21-37	4668-4682	out-of-the-box	_	_	_	_	
21-38	4683-4694	performance	_	_	_	_	
21-39	4695-4699	with	_	_	_	_	
21-40	4700-4707	smarter	_	_	_	_	
21-41	4708-4715	default	_	_	_	_	
21-42	4716-4724	settings	_	_	_	_	
21-43	4724-4725	.	_	_	_	_	

#Text=Amazon Redshift Advisor continuously monitors the cluster for additional optimization opportunities, even if the mission of a table changes over time.
22-1	4726-4732	Amazon	_	_	_	_	
22-2	4733-4741	Redshift	_	_	_	_	
22-3	4742-4749	Advisor	_	_	_	_	
22-4	4750-4762	continuously	_	_	_	_	
22-5	4763-4771	monitors	_	_	_	_	
22-6	4772-4775	the	_	_	_	_	
22-7	4776-4783	cluster	_	_	_	_	
22-8	4784-4787	for	_	_	_	_	
22-9	4788-4798	additional	_	_	_	_	
22-10	4799-4811	optimization	_	_	_	_	
22-11	4812-4825	opportunities	_	_	_	_	
22-12	4825-4826	,	_	_	_	_	
22-13	4827-4831	even	_	_	_	_	
22-14	4832-4834	if	_	_	_	_	
22-15	4835-4838	the	_	_	_	_	
22-16	4839-4846	mission	_	_	_	_	
22-17	4847-4849	of	_	_	_	_	
22-18	4850-4851	a	_	_	_	_	
22-19	4852-4857	table	_	_	_	_	
22-20	4858-4865	changes	_	_	_	_	
22-21	4866-4870	over	_	_	_	_	
22-22	4871-4875	time	_	_	_	_	
22-23	4875-4876	.	_	_	_	_	

#Text=AWS publishes the benchmark used to quantify Amazon Redshift performance, so anyone can reproduce the results.
23-1	4877-4880	AWS	_	_	_	_	
23-2	4881-4890	publishes	_	_	_	_	
23-3	4891-4894	the	_	_	_	_	
23-4	4895-4904	benchmark	_	_	_	_	
23-5	4905-4909	used	_	_	_	_	
23-6	4910-4912	to	_	_	_	_	
23-7	4913-4921	quantify	_	_	_	_	
23-8	4922-4928	Amazon	_	_	_	_	
23-9	4929-4937	Redshift	_	_	_	_	
23-10	4938-4949	performance	_	_	_	_	
23-11	4949-4950	,	_	_	_	_	
23-12	4951-4953	so	_	_	_	_	
23-13	4954-4960	anyone	_	_	_	_	
23-14	4961-4964	can	_	_	_	_	
23-15	4965-4974	reproduce	_	_	_	_	
23-16	4975-4978	the	_	_	_	_	
23-17	4979-4986	results	_	_	_	_	
23-18	4986-4987	.	_	_	_	_	

#Text=Scaling compute separately from storage with RA3 nodes and Amazon Redshift Spectrum.
24-1	4988-4995	Scaling	_	_	_	_	
24-2	4996-5003	compute	_	_	_	_	
24-3	5004-5014	separately	_	_	_	_	
24-4	5015-5019	from	_	_	_	_	
24-5	5020-5027	storage	_	_	_	_	
24-6	5028-5032	with	_	_	_	_	
24-7	5033-5036	RA3	_	_	_	_	
24-8	5037-5042	nodes	_	_	_	_	
24-9	5043-5046	and	_	_	_	_	
24-10	5047-5053	Amazon	_	_	_	_	
24-11	5054-5062	Redshift	_	_	_	_	
24-12	5063-5071	Spectrum	_	_	_	_	
24-13	5071-5072	.	_	_	_	_	

#Text=Although the convenient cluster building blocks of the Dense Compute and Dense Storage nodes continue to be available, you now have a variety of tools to further scale compute and storage separately.
25-1	5073-5081	Although	_	_	_	_	
25-2	5082-5085	the	_	_	_	_	
25-3	5086-5096	convenient	_	_	_	_	
25-4	5097-5104	cluster	_	_	_	_	
25-5	5105-5113	building	_	_	_	_	
25-6	5114-5120	blocks	_	_	_	_	
25-7	5121-5123	of	_	_	_	_	
25-8	5124-5127	the	_	_	_	_	
25-9	5128-5133	Dense	_	_	_	_	
25-10	5134-5141	Compute	_	_	_	_	
25-11	5142-5145	and	_	_	_	_	
25-12	5146-5151	Dense	_	_	_	_	
25-13	5152-5159	Storage	_	_	_	_	
25-14	5160-5165	nodes	_	_	_	_	
25-15	5166-5174	continue	_	_	_	_	
25-16	5175-5177	to	_	_	_	_	
25-17	5178-5180	be	_	_	_	_	
25-18	5181-5190	available	_	_	_	_	
25-19	5190-5191	,	_	_	_	_	
25-20	5192-5195	you	_	_	_	_	
25-21	5196-5199	now	_	_	_	_	
25-22	5200-5204	have	_	_	_	_	
25-23	5205-5206	a	_	_	_	_	
25-24	5207-5214	variety	_	_	_	_	
25-25	5215-5217	of	_	_	_	_	
25-26	5218-5223	tools	_	_	_	_	
25-27	5224-5226	to	_	_	_	_	
25-28	5227-5234	further	_	_	_	_	
25-29	5235-5240	scale	_	_	_	_	
25-30	5241-5248	compute	_	_	_	_	
25-31	5249-5252	and	_	_	_	_	
25-32	5253-5260	storage	_	_	_	_	
25-33	5261-5271	separately	_	_	_	_	
25-34	5271-5272	.	_	_	_	_	

#Text=Amazon Redshift Managed Storage (the RA3 node family) allows for focusing on using the right amount of compute, without worrying about sizing for storage.
26-1	5273-5279	Amazon	_	_	_	_	
26-2	5280-5288	Redshift	_	_	_	_	
26-3	5289-5296	Managed	_	_	_	_	
26-4	5297-5304	Storage	_	_	_	_	
26-5	5305-5306	(	_	_	_	_	
26-6	5306-5309	the	_	_	_	_	
26-7	5310-5313	RA3	_	_	_	_	
26-8	5314-5318	node	_	_	_	_	
26-9	5319-5325	family	_	_	_	_	
26-10	5325-5326	)	_	_	_	_	
26-11	5327-5333	allows	_	_	_	_	
26-12	5334-5337	for	_	_	_	_	
26-13	5338-5346	focusing	_	_	_	_	
26-14	5347-5349	on	_	_	_	_	
26-15	5350-5355	using	_	_	_	_	
26-16	5356-5359	the	_	_	_	_	
26-17	5360-5365	right	_	_	_	_	
26-18	5366-5372	amount	_	_	_	_	
26-19	5373-5375	of	_	_	_	_	
26-20	5376-5383	compute	_	_	_	_	
26-21	5383-5384	,	_	_	_	_	
26-22	5385-5392	without	_	_	_	_	
26-23	5393-5401	worrying	_	_	_	_	
26-24	5402-5407	about	_	_	_	_	
26-25	5408-5414	sizing	_	_	_	_	
26-26	5415-5418	for	_	_	_	_	
26-27	5419-5426	storage	_	_	_	_	
26-28	5426-5427	.	_	_	_	_	

#Text=Concurrency scaling lets you specify entire additional clusters of compute to be applied dynamically as-needed.
27-1	5428-5439	Concurrency	_	_	_	_	
27-2	5440-5447	scaling	_	_	_	_	
27-3	5448-5452	lets	_	_	_	_	
27-4	5453-5456	you	_	_	_	_	
27-5	5457-5464	specify	_	_	_	_	
27-6	5465-5471	entire	_	_	_	_	
27-7	5472-5482	additional	_	_	_	_	
27-8	5483-5491	clusters	_	_	_	_	
27-9	5492-5494	of	_	_	_	_	
27-10	5495-5502	compute	_	_	_	_	
27-11	5503-5505	to	_	_	_	_	
27-12	5506-5508	be	_	_	_	_	
27-13	5509-5516	applied	_	_	_	_	
27-14	5517-5528	dynamically	_	_	_	_	
27-15	5529-5538	as-needed	_	_	_	_	
27-16	5538-5539	.	_	_	_	_	

#Text=Amazon Redshift Spectrum uses the functionally-infinite capacity of Amazon Simple Storage Service (Amazon S3) to support an on-demand compute layer up to 10 times the power of the main cluster, and is now bolstered with materialized view support.
28-1	5540-5546	Amazon	_	_	_	_	
28-2	5547-5555	Redshift	_	_	_	_	
28-3	5556-5564	Spectrum	_	_	_	_	
28-4	5565-5569	uses	_	_	_	_	
28-5	5570-5573	the	_	_	_	_	
28-6	5574-5595	functionally-infinite	_	_	_	_	
28-7	5596-5604	capacity	_	_	_	_	
28-8	5605-5607	of	_	_	_	_	
28-9	5608-5614	Amazon	_	_	_	_	
28-10	5615-5621	Simple	_	_	_	_	
28-11	5622-5629	Storage	_	_	_	_	
28-12	5630-5637	Service	_	_	_	_	
28-13	5638-5639	(	_	_	_	_	
28-14	5639-5645	Amazon	_	_	_	_	
28-15	5646-5648	S3	_	_	_	_	
28-16	5648-5649	)	_	_	_	_	
28-17	5650-5652	to	_	_	_	_	
28-18	5653-5660	support	_	_	_	_	
28-19	5661-5663	an	_	_	_	_	
28-20	5664-5673	on-demand	_	_	_	_	
28-21	5674-5681	compute	_	_	_	_	
28-22	5682-5687	layer	_	_	_	_	
28-23	5688-5690	up	_	_	_	_	
28-24	5691-5693	to	_	_	_	_	
28-25	5694-5696	10	_	_	_	_	
28-26	5697-5702	times	_	_	_	_	
28-27	5703-5706	the	_	_	_	_	
28-28	5707-5712	power	_	_	_	_	
28-29	5713-5715	of	_	_	_	_	
28-30	5716-5719	the	_	_	_	_	
28-31	5720-5724	main	_	_	_	_	
28-32	5725-5732	cluster	_	_	_	_	
28-33	5732-5733	,	_	_	_	_	
28-34	5734-5737	and	_	_	_	_	
28-35	5738-5740	is	_	_	_	_	
28-36	5741-5744	now	_	_	_	_	
28-37	5745-5754	bolstered	_	_	_	_	
28-38	5755-5759	with	_	_	_	_	
28-39	5760-5772	materialized	_	_	_	_	
28-40	5773-5777	view	_	_	_	_	
28-41	5778-5785	support	_	_	_	_	
28-42	5785-5786	.	_	_	_	_	

#Text=Pause and resume feature to optimize cost of environments
#Text=All Amazon Redshift clusters can use the pause and resume feature.
29-1	5787-5792	Pause	_	_	_	_	
29-2	5793-5796	and	_	_	_	_	
29-3	5797-5803	resume	_	_	_	_	
29-4	5804-5811	feature	_	_	_	_	
29-5	5812-5814	to	_	_	_	_	
29-6	5815-5823	optimize	_	_	_	_	
29-7	5824-5828	cost	_	_	_	_	
29-8	5829-5831	of	_	_	_	_	
29-9	5832-5844	environments	_	_	_	_	
29-10	5845-5848	All	_	_	_	_	
29-11	5849-5855	Amazon	_	_	_	_	
29-12	5856-5864	Redshift	_	_	_	_	
29-13	5865-5873	clusters	_	_	_	_	
29-14	5874-5877	can	_	_	_	_	
29-15	5878-5881	use	_	_	_	_	
29-16	5882-5885	the	_	_	_	_	
29-17	5886-5891	pause	_	_	_	_	
29-18	5892-5895	and	_	_	_	_	
29-19	5896-5902	resume	_	_	_	_	
29-20	5903-5910	feature	_	_	_	_	
29-21	5910-5911	.	_	_	_	_	

#Text=For clusters created using On Demand, the per-second grain billing is stopped when the cluster is paused.
30-1	5912-5915	For	_	_	_	_	
30-2	5916-5924	clusters	_	_	_	_	
30-3	5925-5932	created	_	_	_	_	
30-4	5933-5938	using	_	_	_	_	
30-5	5939-5941	On	_	_	_	_	
30-6	5942-5948	Demand	_	_	_	_	
30-7	5948-5949	,	_	_	_	_	
30-8	5950-5953	the	_	_	_	_	
30-9	5954-5964	per-second	_	_	_	_	
30-10	5965-5970	grain	_	_	_	_	
30-11	5971-5978	billing	_	_	_	_	
30-12	5979-5981	is	_	_	_	_	
30-13	5982-5989	stopped	_	_	_	_	
30-14	5990-5994	when	_	_	_	_	
30-15	5995-5998	the	_	_	_	_	
30-16	5999-6006	cluster	_	_	_	_	
30-17	6007-6009	is	_	_	_	_	
30-18	6010-6016	paused	_	_	_	_	
30-19	6016-6017	.	_	_	_	_	

#Text=Reserved Instance clusters can use the pause and resume feature to define access times or freeze a dataset at a point in time.
31-1	6018-6026	Reserved	_	_	_	_	
31-2	6027-6035	Instance	_	_	_	_	
31-3	6036-6044	clusters	_	_	_	_	
31-4	6045-6048	can	_	_	_	_	
31-5	6049-6052	use	_	_	_	_	
31-6	6053-6056	the	_	_	_	_	
31-7	6057-6062	pause	_	_	_	_	
31-8	6063-6066	and	_	_	_	_	
31-9	6067-6073	resume	_	_	_	_	
31-10	6074-6081	feature	_	_	_	_	
31-11	6082-6084	to	_	_	_	_	
31-12	6085-6091	define	_	_	_	_	
31-13	6092-6098	access	_	_	_	_	
31-14	6099-6104	times	_	_	_	_	
31-15	6105-6107	or	_	_	_	_	
31-16	6108-6114	freeze	_	_	_	_	
31-17	6115-6116	a	_	_	_	_	
31-18	6117-6124	dataset	_	_	_	_	
31-19	6125-6127	at	_	_	_	_	
31-20	6128-6129	a	_	_	_	_	
31-21	6130-6135	point	_	_	_	_	
31-22	6136-6138	in	_	_	_	_	
31-23	6139-6143	time	_	_	_	_	
31-24	6143-6144	.	_	_	_	_	

#Text=Tip #1: Precomputing results with Amazon Redshift materialized views
#Text=Materialized views can significantly boost query performance for repeated and predictable analytical workloads such as dash-boarding, queries from BI tools, and extract, load, transform (ELT) data processing.
32-1	6145-6148	Tip	_	_	_	_	
32-2	6149-6151	#1	_	_	_	_	
32-3	6151-6152	:	_	_	_	_	
32-4	6153-6165	Precomputing	_	_	_	_	
32-5	6166-6173	results	_	_	_	_	
32-6	6174-6178	with	_	_	_	_	
32-7	6179-6185	Amazon	_	_	_	_	
32-8	6186-6194	Redshift	_	_	_	_	
32-9	6195-6207	materialized	_	_	_	_	
32-10	6208-6213	views	_	_	_	_	
32-11	6214-6226	Materialized	_	_	_	_	
32-12	6227-6232	views	_	_	_	_	
32-13	6233-6236	can	_	_	_	_	
32-14	6237-6250	significantly	_	_	_	_	
32-15	6251-6256	boost	_	_	_	_	
32-16	6257-6262	query	_	_	_	_	
32-17	6263-6274	performance	_	_	_	_	
32-18	6275-6278	for	_	_	_	_	
32-19	6279-6287	repeated	_	_	_	_	
32-20	6288-6291	and	_	_	_	_	
32-21	6292-6303	predictable	_	_	_	_	
32-22	6304-6314	analytical	_	_	_	_	
32-23	6315-6324	workloads	_	_	_	_	
32-24	6325-6329	such	_	_	_	_	
32-25	6330-6332	as	_	_	_	_	
32-26	6333-6346	dash-boarding	_	_	_	_	
32-27	6346-6347	,	_	_	_	_	
32-28	6348-6355	queries	_	_	_	_	
32-29	6356-6360	from	_	_	_	_	
32-30	6361-6363	BI	_	_	_	_	
32-31	6364-6369	tools	_	_	_	_	
32-32	6369-6370	,	_	_	_	_	
32-33	6371-6374	and	_	_	_	_	
32-34	6375-6382	extract	_	_	_	_	
32-35	6382-6383	,	_	_	_	_	
32-36	6384-6388	load	_	_	_	_	
32-37	6388-6389	,	_	_	_	_	
32-38	6390-6399	transform	_	_	_	_	
32-39	6400-6401	(	_	_	_	_	
32-40	6401-6404	ELT	_	_	_	_	
32-41	6404-6405	)	_	_	_	_	
32-42	6406-6410	data	_	_	_	_	
32-43	6411-6421	processing	_	_	_	_	
32-44	6421-6422	.	_	_	_	_	

#Text=Data engineers can easily create and maintain efficient data-processing pipelines with materialized views while seamlessly extending the performance benefits to data analysts and BI tools.
33-1	6423-6427	Data	_	_	_	_	
33-2	6428-6437	engineers	_	_	_	_	
33-3	6438-6441	can	_	_	_	_	
33-4	6442-6448	easily	_	_	_	_	
33-5	6449-6455	create	_	_	_	_	
33-6	6456-6459	and	_	_	_	_	
33-7	6460-6468	maintain	_	_	_	_	
33-8	6469-6478	efficient	_	_	_	_	
33-9	6479-6494	data-processing	_	_	_	_	
33-10	6495-6504	pipelines	_	_	_	_	
33-11	6505-6509	with	_	_	_	_	
33-12	6510-6522	materialized	_	_	_	_	
33-13	6523-6528	views	_	_	_	_	
33-14	6529-6534	while	_	_	_	_	
33-15	6535-6545	seamlessly	_	_	_	_	
33-16	6546-6555	extending	_	_	_	_	
33-17	6556-6559	the	_	_	_	_	
33-18	6560-6571	performance	_	_	_	_	
33-19	6572-6580	benefits	_	_	_	_	
33-20	6581-6583	to	_	_	_	_	
33-21	6584-6588	data	_	_	_	_	
33-22	6589-6597	analysts	_	_	_	_	
33-23	6598-6601	and	_	_	_	_	
33-24	6602-6604	BI	_	_	_	_	
33-25	6605-6610	tools	_	_	_	_	
33-26	6610-6611	.	_	_	_	_	

#Text=Materialized views are especially useful for queries that are predictable and repeated over and over.
34-1	6612-6624	Materialized	_	_	_	_	
34-2	6625-6630	views	_	_	_	_	
34-3	6631-6634	are	_	_	_	_	
34-4	6635-6645	especially	_	_	_	_	
34-5	6646-6652	useful	_	_	_	_	
34-6	6653-6656	for	_	_	_	_	
34-7	6657-6664	queries	_	_	_	_	
34-8	6665-6669	that	_	_	_	_	
34-9	6670-6673	are	_	_	_	_	
34-10	6674-6685	predictable	_	_	_	_	
34-11	6686-6689	and	_	_	_	_	
34-12	6690-6698	repeated	_	_	_	_	
34-13	6699-6703	over	_	_	_	_	
34-14	6704-6707	and	_	_	_	_	
34-15	6708-6712	over	_	_	_	_	
34-16	6712-6713	.	_	_	_	_	

#Text=Instead of performing resource-intensive queries on large tables, applications can query the pre-computed data stored in the materialized view.
35-1	6714-6721	Instead	_	_	_	_	
35-2	6722-6724	of	_	_	_	_	
35-3	6725-6735	performing	_	_	_	_	
35-4	6736-6754	resource-intensive	_	_	_	_	
35-5	6755-6762	queries	_	_	_	_	
35-6	6763-6765	on	_	_	_	_	
35-7	6766-6771	large	_	_	_	_	
35-8	6772-6778	tables	_	_	_	_	
35-9	6778-6779	,	_	_	_	_	
35-10	6780-6792	applications	_	_	_	_	
35-11	6793-6796	can	_	_	_	_	
35-12	6797-6802	query	_	_	_	_	
35-13	6803-6806	the	_	_	_	_	
35-14	6807-6819	pre-computed	_	_	_	_	
35-15	6820-6824	data	_	_	_	_	
35-16	6825-6831	stored	_	_	_	_	
35-17	6832-6834	in	_	_	_	_	
35-18	6835-6838	the	_	_	_	_	
35-19	6839-6851	materialized	_	_	_	_	
35-20	6852-6856	view	_	_	_	_	
35-21	6856-6857	.	_	_	_	_	

#Text=When the data in the base tables changes, you refresh the materialized view by issuing the Amazon Redshift SQL statement “refresh materialized view“.
36-1	6858-6862	When	_	_	_	_	
36-2	6863-6866	the	_	_	_	_	
36-3	6867-6871	data	_	_	_	_	
36-4	6872-6874	in	_	_	_	_	
36-5	6875-6878	the	_	_	_	_	
36-6	6879-6883	base	_	_	_	_	
36-7	6884-6890	tables	_	_	_	_	
36-8	6891-6898	changes	_	_	_	_	
36-9	6898-6899	,	_	_	_	_	
36-10	6900-6903	you	_	_	_	_	
36-11	6904-6911	refresh	_	_	_	_	
36-12	6912-6915	the	_	_	_	_	
36-13	6916-6928	materialized	_	_	_	_	
36-14	6929-6933	view	_	_	_	_	
36-15	6934-6936	by	_	_	_	_	
36-16	6937-6944	issuing	_	_	_	_	
36-17	6945-6948	the	_	_	_	_	
36-18	6949-6955	Amazon	_	_	_	_	
36-19	6955-6956	 	_	_	_	_	
36-20	6956-6964	Redshift	_	_	_	_	
36-21	6964-6965	 	_	_	_	_	
36-22	6965-6968	SQL	_	_	_	_	
36-23	6969-6978	statement	_	_	_	_	
36-24	6979-6980	“	_	_	_	_	
36-25	6980-6987	refresh	_	_	_	_	
36-26	6988-7000	materialized	_	_	_	_	
36-27	7001-7005	view	_	_	_	_	
36-28	7005-7006	“	_	_	_	_	
36-29	7006-7007	.	_	_	_	_	

#Text=After issuing a refresh statement, your materialized view contains the same data as a regular view.
37-1	7008-7013	After	_	_	_	_	
37-2	7014-7021	issuing	_	_	_	_	
37-3	7022-7023	a	_	_	_	_	
37-4	7024-7031	refresh	_	_	_	_	
37-5	7032-7041	statement	_	_	_	_	
37-6	7041-7042	,	_	_	_	_	
37-7	7043-7047	your	_	_	_	_	
37-8	7048-7060	materialized	_	_	_	_	
37-9	7061-7065	view	_	_	_	_	
37-10	7066-7074	contains	_	_	_	_	
37-11	7075-7078	the	_	_	_	_	
37-12	7079-7083	same	_	_	_	_	
37-13	7084-7088	data	_	_	_	_	
37-14	7089-7091	as	_	_	_	_	
37-15	7092-7093	a	_	_	_	_	
37-16	7094-7101	regular	_	_	_	_	
37-17	7102-7106	view	_	_	_	_	
37-18	7106-7107	.	_	_	_	_	

#Text=Refreshes can be incremental or full refreshes (recompute).
38-1	7108-7117	Refreshes	_	_	_	_	
38-2	7118-7121	can	_	_	_	_	
38-3	7122-7124	be	_	_	_	_	
38-4	7125-7136	incremental	_	_	_	_	
38-5	7137-7139	or	_	_	_	_	
38-6	7140-7144	full	_	_	_	_	
38-7	7145-7154	refreshes	_	_	_	_	
38-8	7155-7156	(	_	_	_	_	
38-9	7156-7165	recompute	_	_	_	_	
38-10	7165-7166	)	_	_	_	_	
38-11	7166-7167	.	_	_	_	_	

#Text=When possible, Amazon Redshift incrementally refreshes data that changed in the base tables since the materialized view was last refreshed.
39-1	7168-7172	When	_	_	_	_	
39-2	7173-7181	possible	_	_	_	_	
39-3	7181-7182	,	_	_	_	_	
39-4	7183-7189	Amazon	_	_	_	_	
39-5	7190-7198	Redshift	_	_	_	_	
39-6	7198-7199	 	_	_	_	_	
39-7	7199-7212	incrementally	_	_	_	_	
39-8	7213-7222	refreshes	_	_	_	_	
39-9	7223-7227	data	_	_	_	_	
39-10	7228-7232	that	_	_	_	_	
39-11	7233-7240	changed	_	_	_	_	
39-12	7241-7243	in	_	_	_	_	
39-13	7244-7247	the	_	_	_	_	
39-14	7248-7252	base	_	_	_	_	
39-15	7253-7259	tables	_	_	_	_	
39-16	7260-7265	since	_	_	_	_	
39-17	7266-7269	the	_	_	_	_	
39-18	7270-7282	materialized	_	_	_	_	
39-19	7283-7287	view	_	_	_	_	
39-20	7288-7291	was	_	_	_	_	
39-21	7292-7296	last	_	_	_	_	
39-22	7297-7306	refreshed	_	_	_	_	
39-23	7306-7307	.	_	_	_	_	

#Text=To demonstrate how it works, we can create an example schema to store sales information, each sale transaction and details about the store where the sales took place.
40-1	7308-7310	To	_	_	_	_	
40-2	7311-7322	demonstrate	_	_	_	_	
40-3	7323-7326	how	_	_	_	_	
40-4	7327-7329	it	_	_	_	_	
40-5	7330-7335	works	_	_	_	_	
40-6	7335-7336	,	_	_	_	_	
40-7	7337-7339	we	_	_	_	_	
40-8	7340-7343	can	_	_	_	_	
40-9	7344-7350	create	_	_	_	_	
40-10	7351-7353	an	_	_	_	_	
40-11	7354-7361	example	_	_	_	_	
40-12	7362-7368	schema	_	_	_	_	
40-13	7369-7371	to	_	_	_	_	
40-14	7372-7377	store	_	_	_	_	
40-15	7378-7383	sales	_	_	_	_	
40-16	7384-7395	information	_	_	_	_	
40-17	7395-7396	,	_	_	_	_	
40-18	7397-7401	each	_	_	_	_	
40-19	7402-7406	sale	_	_	_	_	
40-20	7407-7418	transaction	_	_	_	_	
40-21	7419-7422	and	_	_	_	_	
40-22	7423-7430	details	_	_	_	_	
40-23	7431-7436	about	_	_	_	_	
40-24	7437-7440	the	_	_	_	_	
40-25	7441-7446	store	_	_	_	_	
40-26	7447-7452	where	_	_	_	_	
40-27	7453-7456	the	_	_	_	_	
40-28	7457-7462	sales	_	_	_	_	
40-29	7463-7467	took	_	_	_	_	
40-30	7468-7473	place	_	_	_	_	
40-31	7473-7474	.	_	_	_	_	

#Text=To view the total amount of sales per city, we create a materialized view with the create materialized view SQL statement (city_sales) joining records from two tables and aggregating sales amount (sum(sales.amount)) per city (group by city):
#Text=CREATE MATERIALIZED VIEW city_sales AS
#Text=SELECT st.city, SUM(sa.amount) as total_sales
#Text=FROM sales sa, store st
#Text=WHERE sa.store_id = st.id
#Text=GROUP BY st.city
#Text=Now we can query the materialized view just like a regular view or table and issue statements like “SELECT city, total_sales FROM city_sales” to get the following results.
41-1	7475-7477	To	_	_	_	_	
41-2	7478-7482	view	_	_	_	_	
41-3	7483-7486	the	_	_	_	_	
41-4	7487-7492	total	_	_	_	_	
41-5	7493-7499	amount	_	_	_	_	
41-6	7500-7502	of	_	_	_	_	
41-7	7503-7508	sales	_	_	_	_	
41-8	7509-7512	per	_	_	_	_	
41-9	7513-7517	city	_	_	_	_	
41-10	7517-7518	,	_	_	_	_	
41-11	7519-7521	we	_	_	_	_	
41-12	7522-7528	create	_	_	_	_	
41-13	7529-7530	a	_	_	_	_	
41-14	7531-7543	materialized	_	_	_	_	
41-15	7544-7548	view	_	_	_	_	
41-16	7549-7553	with	_	_	_	_	
41-17	7554-7557	the	_	_	_	_	
41-18	7558-7564	create	_	_	_	_	
41-19	7565-7577	materialized	_	_	_	_	
41-20	7578-7582	view	_	_	_	_	
41-21	7583-7586	SQL	_	_	_	_	
41-22	7587-7596	statement	_	_	_	_	
41-23	7597-7598	(	_	_	_	_	
41-24	7598-7608	city_sales	_	_	_	_	
41-25	7608-7609	)	_	_	_	_	
41-26	7610-7617	joining	_	_	_	_	
41-27	7618-7625	records	_	_	_	_	
41-28	7626-7630	from	_	_	_	_	
41-29	7631-7634	two	_	_	_	_	
41-30	7635-7641	tables	_	_	_	_	
41-31	7642-7645	and	_	_	_	_	
41-32	7646-7657	aggregating	_	_	_	_	
41-33	7658-7663	sales	_	_	_	_	
41-34	7664-7670	amount	_	_	_	_	
41-35	7671-7672	(	_	_	_	_	
41-36	7672-7675	sum	_	_	_	_	
41-37	7675-7676	(	_	_	_	_	
41-38	7676-7688	sales.amount	_	_	_	_	
41-39	7688-7689	)	_	_	_	_	
41-40	7689-7690	)	_	_	_	_	
41-41	7691-7694	per	_	_	_	_	
41-42	7695-7699	city	_	_	_	_	
41-43	7700-7701	(	_	_	_	_	
41-44	7701-7706	group	_	_	_	_	
41-45	7707-7709	by	_	_	_	_	
41-46	7710-7714	city	_	_	_	_	
41-47	7714-7715	)	_	_	_	_	
41-48	7715-7716	:	_	_	_	_	
41-49	7717-7723	CREATE	_	_	_	_	
41-50	7724-7736	MATERIALIZED	_	_	_	_	
41-51	7737-7741	VIEW	_	_	_	_	
41-52	7742-7752	city_sales	_	_	_	_	
41-53	7753-7755	AS	_	_	_	_	
41-54	7756-7762	SELECT	_	_	_	_	
41-55	7763-7770	st.city	_	_	_	_	
41-56	7770-7771	,	_	_	_	_	
41-57	7772-7775	SUM	_	_	_	_	
41-58	7775-7776	(	_	_	_	_	
41-59	7776-7785	sa.amount	_	_	_	_	
41-60	7785-7786	)	_	_	_	_	
41-61	7787-7789	as	_	_	_	_	
41-62	7790-7801	total_sales	_	_	_	_	
41-63	7802-7806	FROM	_	_	_	_	
41-64	7807-7812	sales	_	_	_	_	
41-65	7813-7815	sa	_	_	_	_	
41-66	7815-7816	,	_	_	_	_	
41-67	7817-7822	store	_	_	_	_	
41-68	7823-7825	st	_	_	_	_	
41-69	7826-7831	WHERE	_	_	_	_	
41-70	7832-7843	sa.store_id	_	_	_	_	
41-71	7844-7845	=	_	_	_	_	
41-72	7846-7851	st.id	_	_	_	_	
41-73	7852-7857	GROUP	_	_	_	_	
41-74	7858-7860	BY	_	_	_	_	
41-75	7861-7868	st.city	_	_	_	_	
41-76	7869-7872	Now	_	_	_	_	
41-77	7873-7875	we	_	_	_	_	
41-78	7876-7879	can	_	_	_	_	
41-79	7880-7885	query	_	_	_	_	
41-80	7886-7889	the	_	_	_	_	
41-81	7890-7902	materialized	_	_	_	_	
41-82	7903-7907	view	_	_	_	_	
41-83	7908-7912	just	_	_	_	_	
41-84	7913-7917	like	_	_	_	_	
41-85	7918-7919	a	_	_	_	_	
41-86	7920-7927	regular	_	_	_	_	
41-87	7928-7932	view	_	_	_	_	
41-88	7933-7935	or	_	_	_	_	
41-89	7936-7941	table	_	_	_	_	
41-90	7942-7945	and	_	_	_	_	
41-91	7946-7951	issue	_	_	_	_	
41-92	7952-7962	statements	_	_	_	_	
41-93	7963-7967	like	_	_	_	_	
41-94	7968-7969	“	_	_	_	_	
41-95	7969-7975	SELECT	_	_	_	_	
41-96	7976-7980	city	_	_	_	_	
41-97	7980-7981	,	_	_	_	_	
41-98	7982-7993	total_sales	_	_	_	_	
41-99	7994-7998	FROM	_	_	_	_	
41-100	7999-8009	city_sales	_	_	_	_	
41-101	8009-8010	”	_	_	_	_	
41-102	8011-8013	to	_	_	_	_	
41-103	8014-8017	get	_	_	_	_	
41-104	8018-8021	the	_	_	_	_	
41-105	8022-8031	following	_	_	_	_	
41-106	8032-8039	results	_	_	_	_	
41-107	8039-8040	.	_	_	_	_	

#Text=The join between the two tables and the aggregate (sum and group by) are already computed, resulting in significantly less data to scan.
42-1	8041-8044	The	_	_	_	_	
42-2	8045-8049	join	_	_	_	_	
42-3	8050-8057	between	_	_	_	_	
42-4	8058-8061	the	_	_	_	_	
42-5	8062-8065	two	_	_	_	_	
42-6	8066-8072	tables	_	_	_	_	
42-7	8073-8076	and	_	_	_	_	
42-8	8077-8080	the	_	_	_	_	
42-9	8081-8090	aggregate	_	_	_	_	
42-10	8091-8092	(	_	_	_	_	
42-11	8092-8095	sum	_	_	_	_	
42-12	8096-8099	and	_	_	_	_	
42-13	8100-8105	group	_	_	_	_	
42-14	8106-8108	by	_	_	_	_	
42-15	8108-8109	)	_	_	_	_	
42-16	8110-8113	are	_	_	_	_	
42-17	8114-8121	already	_	_	_	_	
42-18	8122-8130	computed	_	_	_	_	
42-19	8130-8131	,	_	_	_	_	
42-20	8132-8141	resulting	_	_	_	_	
42-21	8142-8144	in	_	_	_	_	
42-22	8145-8158	significantly	_	_	_	_	
42-23	8159-8163	less	_	_	_	_	
42-24	8164-8168	data	_	_	_	_	
42-25	8169-8171	to	_	_	_	_	
42-26	8172-8176	scan	_	_	_	_	
42-27	8176-8177	.	_	_	_	_	

#Text=When the data in the underlying base tables changes, the materialized view doesn’t automatically reflect those changes.
43-1	8178-8182	When	_	_	_	_	
43-2	8183-8186	the	_	_	_	_	
43-3	8187-8191	data	_	_	_	_	
43-4	8192-8194	in	_	_	_	_	
43-5	8195-8198	the	_	_	_	_	
43-6	8199-8209	underlying	_	_	_	_	
43-7	8210-8214	base	_	_	_	_	
43-8	8215-8221	tables	_	_	_	_	
43-9	8222-8229	changes	_	_	_	_	
43-10	8229-8230	,	_	_	_	_	
43-11	8231-8234	the	_	_	_	_	
43-12	8235-8247	materialized	_	_	_	_	
43-13	8248-8252	view	_	_	_	_	
43-14	8253-8258	doesn	_	_	_	_	
43-15	8258-8259	’	_	_	_	_	
43-16	8259-8260	t	_	_	_	_	
43-17	8261-8274	automatically	_	_	_	_	
43-18	8275-8282	reflect	_	_	_	_	
43-19	8283-8288	those	_	_	_	_	
43-20	8289-8296	changes	_	_	_	_	
43-21	8296-8297	.	_	_	_	_	

#Text=You can refresh the data stored in the materialized view on demand with the latest changes from the base tables using the SQL refresh materialized view command.
44-1	8298-8301	You	_	_	_	_	
44-2	8302-8305	can	_	_	_	_	
44-3	8306-8313	refresh	_	_	_	_	
44-4	8314-8317	the	_	_	_	_	
44-5	8318-8322	data	_	_	_	_	
44-6	8323-8329	stored	_	_	_	_	
44-7	8330-8332	in	_	_	_	_	
44-8	8333-8336	the	_	_	_	_	
44-9	8337-8349	materialized	_	_	_	_	
44-10	8350-8354	view	_	_	_	_	
44-11	8355-8357	on	_	_	_	_	
44-12	8358-8364	demand	_	_	_	_	
44-13	8365-8369	with	_	_	_	_	
44-14	8370-8373	the	_	_	_	_	
44-15	8374-8380	latest	_	_	_	_	
44-16	8381-8388	changes	_	_	_	_	
44-17	8389-8393	from	_	_	_	_	
44-18	8394-8397	the	_	_	_	_	
44-19	8398-8402	base	_	_	_	_	
44-20	8403-8409	tables	_	_	_	_	
44-21	8410-8415	using	_	_	_	_	
44-22	8416-8419	the	_	_	_	_	
44-23	8420-8423	SQL	_	_	_	_	
44-24	8424-8431	refresh	_	_	_	_	
44-25	8431-8432	 	_	_	_	_	
44-26	8432-8444	materialized	_	_	_	_	
44-27	8445-8449	view	_	_	_	_	
44-28	8450-8457	command	_	_	_	_	
44-29	8457-8458	.	_	_	_	_	

#Text=For example, see the following code:
#Text=!
45-1	8459-8462	For	_	_	_	_	
45-2	8463-8470	example	_	_	_	_	
45-3	8470-8471	,	_	_	_	_	
45-4	8472-8475	see	_	_	_	_	
45-5	8476-8479	the	_	_	_	_	
45-6	8480-8489	following	_	_	_	_	
45-7	8490-8494	code	_	_	_	_	
45-8	8494-8495	:	_	_	_	_	
45-9	8496-8497	!	_	_	_	_	

#Text=-- let's add a row in the sales base table
#Text=INSERT INTO sales (id, item, store_id, customer_id, amount)
#Text=VALUES(8, 'Gaming PC Super ProXXL', 1, 1, 3000);
#Text=SELECT city, total_sales FROM city_sales WHERE city = 'Paris'
#Text=|city |total_sales|
#Text=|-----|-----------|
#Text=|Paris|
#Text=690|
#Text=!
46-1	8497-8498	-	_	_	_	_	
46-2	8498-8499	-	_	_	_	_	
46-3	8500-8505	let's	_	_	_	_	
46-4	8506-8509	add	_	_	_	_	
46-5	8510-8511	a	_	_	_	_	
46-6	8512-8515	row	_	_	_	_	
46-7	8516-8518	in	_	_	_	_	
46-8	8519-8522	the	_	_	_	_	
46-9	8523-8528	sales	_	_	_	_	
46-10	8529-8533	base	_	_	_	_	
46-11	8534-8539	table	_	_	_	_	
46-12	8540-8546	INSERT	_	_	_	_	
46-13	8547-8551	INTO	_	_	_	_	
46-14	8552-8557	sales	_	_	_	_	
46-15	8558-8559	(	_	_	_	_	
46-16	8559-8561	id	_	_	_	_	
46-17	8561-8562	,	_	_	_	_	
46-18	8563-8567	item	_	_	_	_	
46-19	8567-8568	,	_	_	_	_	
46-20	8569-8577	store_id	_	_	_	_	
46-21	8577-8578	,	_	_	_	_	
46-22	8579-8590	customer_id	_	_	_	_	
46-23	8590-8591	,	_	_	_	_	
46-24	8592-8598	amount	_	_	_	_	
46-25	8598-8599	)	_	_	_	_	
46-26	8600-8606	VALUES	_	_	_	_	
46-27	8606-8607	(	_	_	_	_	
46-28	8607-8608	8	_	_	_	_	
46-29	8608-8609	,	_	_	_	_	
46-30	8610-8611	'	_	_	_	_	
46-31	8611-8617	Gaming	_	_	_	_	
46-32	8618-8620	PC	_	_	_	_	
46-33	8621-8626	Super	_	_	_	_	
46-34	8627-8633	ProXXL	_	_	_	_	
46-35	8633-8634	'	_	_	_	_	
46-36	8634-8635	,	_	_	_	_	
46-37	8636-8637	1	_	_	_	_	
46-38	8637-8638	,	_	_	_	_	
46-39	8639-8640	1	_	_	_	_	
46-40	8640-8641	,	_	_	_	_	
46-41	8642-8646	3000	_	_	_	_	
46-42	8646-8647	)	_	_	_	_	
46-43	8647-8648	;	_	_	_	_	
46-44	8649-8655	SELECT	_	_	_	_	
46-45	8656-8660	city	_	_	_	_	
46-46	8660-8661	,	_	_	_	_	
46-47	8662-8673	total_sales	_	_	_	_	
46-48	8674-8678	FROM	_	_	_	_	
46-49	8679-8689	city_sales	_	_	_	_	
46-50	8690-8695	WHERE	_	_	_	_	
46-51	8696-8700	city	_	_	_	_	
46-52	8701-8702	=	_	_	_	_	
46-53	8703-8704	'	_	_	_	_	
46-54	8704-8709	Paris	_	_	_	_	
46-55	8709-8710	'	_	_	_	_	
46-56	8711-8712	|	_	_	_	_	
46-57	8712-8716	city	_	_	_	_	
46-58	8717-8718	|	_	_	_	_	
46-59	8718-8729	total_sales	_	_	_	_	
46-60	8729-8730	|	_	_	_	_	
46-61	8731-8732	|	_	_	_	_	
46-62	8732-8733	-	_	_	_	_	
46-63	8733-8734	-	_	_	_	_	
46-64	8734-8735	-	_	_	_	_	
46-65	8735-8736	-	_	_	_	_	
46-66	8736-8737	-	_	_	_	_	
46-67	8737-8738	|	_	_	_	_	
46-68	8738-8739	-	_	_	_	_	
46-69	8739-8740	-	_	_	_	_	
46-70	8740-8741	-	_	_	_	_	
46-71	8741-8742	-	_	_	_	_	
46-72	8742-8743	-	_	_	_	_	
46-73	8743-8744	-	_	_	_	_	
46-74	8744-8745	-	_	_	_	_	
46-75	8745-8746	-	_	_	_	_	
46-76	8746-8747	-	_	_	_	_	
46-77	8747-8748	-	_	_	_	_	
46-78	8748-8749	-	_	_	_	_	
46-79	8749-8750	|	_	_	_	_	
46-80	8751-8752	|	_	_	_	_	
46-81	8752-8757	Paris	_	_	_	_	
46-82	8757-8758	|	_	_	_	_	
46-83	8759-8762	690	_	_	_	_	
46-84	8762-8763	|	_	_	_	_	
46-85	8764-8765	!	_	_	_	_	

#Text=-- the new sale is not taken into account !!
47-1	8765-8766	-	_	_	_	_	
47-2	8766-8767	-	_	_	_	_	
47-3	8768-8771	the	_	_	_	_	
47-4	8772-8775	new	_	_	_	_	
47-5	8776-8780	sale	_	_	_	_	
47-6	8781-8783	is	_	_	_	_	
47-7	8784-8787	not	_	_	_	_	
47-8	8788-8793	taken	_	_	_	_	
47-9	8794-8798	into	_	_	_	_	
47-10	8799-8806	account	_	_	_	_	
47-11	8807-8808	!	_	_	_	_	
47-12	8808-8809	!	_	_	_	_	

#Text=-- let's refresh the materialized view
#Text=REFRESH MATERIALIZED VIEW city_sales;
#Text=SELECT city, total_sales FROM city_sales WHERE city = 'Paris'
#Text=|city |total_sales|
#Text=|-----|-----------|
#Text=|Paris|
#Text=3690|
#Text=!
48-1	8810-8811	-	_	_	_	_	
48-2	8811-8812	-	_	_	_	_	
48-3	8813-8818	let's	_	_	_	_	
48-4	8819-8826	refresh	_	_	_	_	
48-5	8827-8830	the	_	_	_	_	
48-6	8831-8843	materialized	_	_	_	_	
48-7	8844-8848	view	_	_	_	_	
48-8	8849-8856	REFRESH	_	_	_	_	
48-9	8857-8869	MATERIALIZED	_	_	_	_	
48-10	8870-8874	VIEW	_	_	_	_	
48-11	8875-8885	city_sales	_	_	_	_	
48-12	8885-8886	;	_	_	_	_	
48-13	8887-8893	SELECT	_	_	_	_	
48-14	8894-8898	city	_	_	_	_	
48-15	8898-8899	,	_	_	_	_	
48-16	8900-8911	total_sales	_	_	_	_	
48-17	8912-8916	FROM	_	_	_	_	
48-18	8917-8927	city_sales	_	_	_	_	
48-19	8928-8933	WHERE	_	_	_	_	
48-20	8934-8938	city	_	_	_	_	
48-21	8939-8940	=	_	_	_	_	
48-22	8941-8942	'	_	_	_	_	
48-23	8942-8947	Paris	_	_	_	_	
48-24	8947-8948	'	_	_	_	_	
48-25	8949-8950	|	_	_	_	_	
48-26	8950-8954	city	_	_	_	_	
48-27	8955-8956	|	_	_	_	_	
48-28	8956-8967	total_sales	_	_	_	_	
48-29	8967-8968	|	_	_	_	_	
48-30	8969-8970	|	_	_	_	_	
48-31	8970-8971	-	_	_	_	_	
48-32	8971-8972	-	_	_	_	_	
48-33	8972-8973	-	_	_	_	_	
48-34	8973-8974	-	_	_	_	_	
48-35	8974-8975	-	_	_	_	_	
48-36	8975-8976	|	_	_	_	_	
48-37	8976-8977	-	_	_	_	_	
48-38	8977-8978	-	_	_	_	_	
48-39	8978-8979	-	_	_	_	_	
48-40	8979-8980	-	_	_	_	_	
48-41	8980-8981	-	_	_	_	_	
48-42	8981-8982	-	_	_	_	_	
48-43	8982-8983	-	_	_	_	_	
48-44	8983-8984	-	_	_	_	_	
48-45	8984-8985	-	_	_	_	_	
48-46	8985-8986	-	_	_	_	_	
48-47	8986-8987	-	_	_	_	_	
48-48	8987-8988	|	_	_	_	_	
48-49	8989-8990	|	_	_	_	_	
48-50	8990-8995	Paris	_	_	_	_	
48-51	8995-8996	|	_	_	_	_	
48-52	8997-9001	3690	_	_	_	_	
48-53	9001-9002	|	_	_	_	_	
48-54	9003-9004	!	_	_	_	_	

#Text=-- now the view has the latest sales data
#Text=The full code for this use case is available as a gist in GitHub.
49-1	9004-9005	-	_	_	_	_	
49-2	9005-9006	-	_	_	_	_	
49-3	9007-9010	now	_	_	_	_	
49-4	9011-9014	the	_	_	_	_	
49-5	9015-9019	view	_	_	_	_	
49-6	9020-9023	has	_	_	_	_	
49-7	9024-9027	the	_	_	_	_	
49-8	9028-9034	latest	_	_	_	_	
49-9	9035-9040	sales	_	_	_	_	
49-10	9041-9045	data	_	_	_	_	
49-11	9046-9049	The	_	_	_	_	
49-12	9050-9054	full	_	_	_	_	
49-13	9055-9059	code	_	_	_	_	
49-14	9060-9063	for	_	_	_	_	
49-15	9064-9068	this	_	_	_	_	
49-16	9069-9072	use	_	_	_	_	
49-17	9073-9077	case	_	_	_	_	
49-18	9078-9080	is	_	_	_	_	
49-19	9081-9090	available	_	_	_	_	
49-20	9091-9093	as	_	_	_	_	
49-21	9094-9095	a	_	_	_	_	
49-22	9096-9100	gist	_	_	_	_	
49-23	9101-9103	in	_	_	_	_	
49-24	9104-9110	GitHub	_	_	_	_	
49-25	9110-9111	.	_	_	_	_	

#Text=You can also extend the benefits of materialized views to external data in your Amazon S3 data lake and federated data sources.
50-1	9112-9115	You	_	_	_	_	
50-2	9116-9119	can	_	_	_	_	
50-3	9120-9124	also	_	_	_	_	
50-4	9125-9131	extend	_	_	_	_	
50-5	9132-9135	the	_	_	_	_	
50-6	9136-9144	benefits	_	_	_	_	
50-7	9145-9147	of	_	_	_	_	
50-8	9148-9160	materialized	_	_	_	_	
50-9	9161-9166	views	_	_	_	_	
50-10	9167-9169	to	_	_	_	_	
50-11	9170-9178	external	_	_	_	_	
50-12	9179-9183	data	_	_	_	_	
50-13	9184-9186	in	_	_	_	_	
50-14	9187-9191	your	_	_	_	_	
50-15	9192-9198	Amazon	_	_	_	_	
50-16	9199-9201	S3	_	_	_	_	
50-17	9202-9206	data	_	_	_	_	
50-18	9207-9211	lake	_	_	_	_	
50-19	9212-9215	and	_	_	_	_	
50-20	9216-9225	federated	_	_	_	_	
50-21	9226-9230	data	_	_	_	_	
50-22	9231-9238	sources	_	_	_	_	
50-23	9238-9239	.	_	_	_	_	

#Text=With materialized views, you can easily store and manage the pre-computed results of a SELECT statement referencing both external tables and Amazon Redshift tables.
51-1	9240-9244	With	_	_	_	_	
51-2	9245-9257	materialized	_	_	_	_	
51-3	9258-9263	views	_	_	_	_	
51-4	9263-9264	,	_	_	_	_	
51-5	9265-9268	you	_	_	_	_	
51-6	9269-9272	can	_	_	_	_	
51-7	9273-9279	easily	_	_	_	_	
51-8	9280-9285	store	_	_	_	_	
51-9	9286-9289	and	_	_	_	_	
51-10	9290-9296	manage	_	_	_	_	
51-11	9297-9300	the	_	_	_	_	
51-12	9301-9313	pre-computed	_	_	_	_	
51-13	9314-9321	results	_	_	_	_	
51-14	9322-9324	of	_	_	_	_	
51-15	9325-9326	a	_	_	_	_	
51-16	9327-9333	SELECT	_	_	_	_	
51-17	9334-9343	statement	_	_	_	_	
51-18	9344-9355	referencing	_	_	_	_	
51-19	9356-9360	both	_	_	_	_	
51-20	9361-9369	external	_	_	_	_	
51-21	9370-9376	tables	_	_	_	_	
51-22	9377-9380	and	_	_	_	_	
51-23	9381-9387	Amazon	_	_	_	_	
51-24	9388-9396	Redshift	_	_	_	_	
51-25	9397-9403	tables	_	_	_	_	
51-26	9403-9404	.	_	_	_	_	

#Text=Subsequent queries referencing the materialized views run much faster because they use the pre-computed results stored in Amazon Redshift, instead of accessing the external tables.
52-1	9405-9415	Subsequent	_	_	_	_	
52-2	9416-9423	queries	_	_	_	_	
52-3	9424-9435	referencing	_	_	_	_	
52-4	9436-9439	the	_	_	_	_	
52-5	9440-9452	materialized	_	_	_	_	
52-6	9453-9458	views	_	_	_	_	
52-7	9459-9462	run	_	_	_	_	
52-8	9463-9467	much	_	_	_	_	
52-9	9468-9474	faster	_	_	_	_	
52-10	9475-9482	because	_	_	_	_	
52-11	9483-9487	they	_	_	_	_	
52-12	9488-9491	use	_	_	_	_	
52-13	9492-9495	the	_	_	_	_	
52-14	9496-9508	pre-computed	_	_	_	_	
52-15	9509-9516	results	_	_	_	_	
52-16	9517-9523	stored	_	_	_	_	
52-17	9524-9526	in	_	_	_	_	
52-18	9527-9533	Amazon	_	_	_	_	
52-19	9534-9542	Redshift	_	_	_	_	
52-20	9542-9543	,	_	_	_	_	
52-21	9544-9551	instead	_	_	_	_	
52-22	9552-9554	of	_	_	_	_	
52-23	9555-9564	accessing	_	_	_	_	
52-24	9565-9568	the	_	_	_	_	
52-25	9569-9577	external	_	_	_	_	
52-26	9578-9584	tables	_	_	_	_	
52-27	9584-9585	.	_	_	_	_	

#Text=This also helps you reduce the associated costs of repeatedly accessing the external data sources, because you can only access them when you explicitly refresh the materialized views.
53-1	9586-9590	This	_	_	_	_	
53-2	9591-9595	also	_	_	_	_	
53-3	9596-9601	helps	_	_	_	_	
53-4	9602-9605	you	_	_	_	_	
53-5	9606-9612	reduce	_	_	_	_	
53-6	9613-9616	the	_	_	_	_	
53-7	9617-9627	associated	_	_	_	_	
53-8	9628-9633	costs	_	_	_	_	
53-9	9634-9636	of	_	_	_	_	
53-10	9637-9647	repeatedly	_	_	_	_	
53-11	9648-9657	accessing	_	_	_	_	
53-12	9658-9661	the	_	_	_	_	
53-13	9662-9670	external	_	_	_	_	
53-14	9671-9675	data	_	_	_	_	
53-15	9676-9683	sources	_	_	_	_	
53-16	9683-9684	,	_	_	_	_	
53-17	9685-9692	because	_	_	_	_	
53-18	9693-9696	you	_	_	_	_	
53-19	9697-9700	can	_	_	_	_	
53-20	9701-9705	only	_	_	_	_	
53-21	9706-9712	access	_	_	_	_	
53-22	9713-9717	them	_	_	_	_	
53-23	9718-9722	when	_	_	_	_	
53-24	9723-9726	you	_	_	_	_	
53-25	9727-9737	explicitly	_	_	_	_	
53-26	9738-9745	refresh	_	_	_	_	
53-27	9746-9749	the	_	_	_	_	
53-28	9750-9762	materialized	_	_	_	_	
53-29	9763-9768	views	_	_	_	_	
53-30	9768-9769	.	_	_	_	_	

#Text=Tip #2: Handling bursts of workload with concurrency scaling and elastic resize
#Text=The legacy, on-premises model requires you to estimate what the system will need 3-4 years in the future to make sure you’re leasing enough horsepower at the time of purchase.
54-1	9770-9773	Tip	_	_	_	_	
54-2	9774-9776	#2	_	_	_	_	
54-3	9776-9777	:	_	_	_	_	
54-4	9777-9778	 	_	_	_	_	
54-5	9778-9786	Handling	_	_	_	_	
54-6	9787-9793	bursts	_	_	_	_	
54-7	9794-9796	of	_	_	_	_	
54-8	9797-9805	workload	_	_	_	_	
54-9	9806-9810	with	_	_	_	_	
54-10	9811-9822	concurrency	_	_	_	_	
54-11	9823-9830	scaling	_	_	_	_	
54-12	9831-9834	and	_	_	_	_	
54-13	9835-9842	elastic	_	_	_	_	
54-14	9843-9849	resize	_	_	_	_	
54-15	9850-9853	The	_	_	_	_	
54-16	9854-9860	legacy	_	_	_	_	
54-17	9860-9861	,	_	_	_	_	
54-18	9862-9873	on-premises	_	_	_	_	
54-19	9874-9879	model	_	_	_	_	
54-20	9880-9888	requires	_	_	_	_	
54-21	9889-9892	you	_	_	_	_	
54-22	9893-9895	to	_	_	_	_	
54-23	9896-9904	estimate	_	_	_	_	
54-24	9905-9909	what	_	_	_	_	
54-25	9910-9913	the	_	_	_	_	
54-26	9914-9920	system	_	_	_	_	
54-27	9921-9925	will	_	_	_	_	
54-28	9926-9930	need	_	_	_	_	
54-29	9931-9932	3	_	_	_	_	
54-30	9932-9933	-	_	_	_	_	
54-31	9933-9934	4	_	_	_	_	
54-32	9935-9940	years	_	_	_	_	
54-33	9941-9943	in	_	_	_	_	
54-34	9944-9947	the	_	_	_	_	
54-35	9948-9954	future	_	_	_	_	
54-36	9955-9957	to	_	_	_	_	
54-37	9958-9962	make	_	_	_	_	
54-38	9963-9967	sure	_	_	_	_	
54-39	9968-9971	you	_	_	_	_	
54-40	9971-9972	’	_	_	_	_	
54-41	9972-9974	re	_	_	_	_	
54-42	9975-9982	leasing	_	_	_	_	
54-43	9983-9989	enough	_	_	_	_	
54-44	9990-10000	horsepower	_	_	_	_	
54-45	10001-10003	at	_	_	_	_	
54-46	10004-10007	the	_	_	_	_	
54-47	10008-10012	time	_	_	_	_	
54-48	10013-10015	of	_	_	_	_	
54-49	10016-10024	purchase	_	_	_	_	
54-50	10024-10025	.	_	_	_	_	

#Text=But the ability to resize a cluster allows for right-sizing your resources as you go.
55-1	10026-10029	But	_	_	_	_	
55-2	10030-10033	the	_	_	_	_	
55-3	10034-10041	ability	_	_	_	_	
55-4	10042-10044	to	_	_	_	_	
55-5	10045-10051	resize	_	_	_	_	
55-6	10052-10053	a	_	_	_	_	
55-7	10054-10061	cluster	_	_	_	_	
55-8	10062-10068	allows	_	_	_	_	
55-9	10069-10072	for	_	_	_	_	
55-10	10073-10085	right-sizing	_	_	_	_	
55-11	10086-10090	your	_	_	_	_	
55-12	10091-10100	resources	_	_	_	_	
55-13	10101-10103	as	_	_	_	_	
55-14	10104-10107	you	_	_	_	_	
55-15	10108-10110	go	_	_	_	_	
55-16	10110-10111	.	_	_	_	_	

#Text=Amazon Redshift extends this ability with elastic resize and concurrency scaling.
56-1	10112-10118	Amazon	_	_	_	_	
56-2	10119-10127	Redshift	_	_	_	_	
56-3	10128-10135	extends	_	_	_	_	
56-4	10136-10140	this	_	_	_	_	
56-5	10141-10148	ability	_	_	_	_	
56-6	10149-10153	with	_	_	_	_	
56-7	10154-10161	elastic	_	_	_	_	
56-8	10162-10168	resize	_	_	_	_	
56-9	10169-10172	and	_	_	_	_	
56-10	10173-10184	concurrency	_	_	_	_	
56-11	10185-10192	scaling	_	_	_	_	
56-12	10192-10193	.	_	_	_	_	

#Text=Elastic resize lets you quickly increase or decrease the number of compute nodes, doubling or halving the original cluster’s node count, or even change the node type. 
57-1	10194-10201	Elastic	_	_	_	_	
57-2	10202-10208	resize	_	_	_	_	
57-3	10209-10213	lets	_	_	_	_	
57-4	10214-10217	you	_	_	_	_	
57-5	10218-10225	quickly	_	_	_	_	
57-6	10226-10234	increase	_	_	_	_	
57-7	10235-10237	or	_	_	_	_	
57-8	10238-10246	decrease	_	_	_	_	
57-9	10247-10250	the	_	_	_	_	
57-10	10251-10257	number	_	_	_	_	
57-11	10258-10260	of	_	_	_	_	
57-12	10261-10268	compute	_	_	_	_	
57-13	10269-10274	nodes	_	_	_	_	
57-14	10274-10275	,	_	_	_	_	
57-15	10276-10284	doubling	_	_	_	_	
57-16	10285-10287	or	_	_	_	_	
57-17	10288-10295	halving	_	_	_	_	
57-18	10296-10299	the	_	_	_	_	
57-19	10300-10308	original	_	_	_	_	
57-20	10309-10316	cluster	_	_	_	_	
57-21	10316-10317	’	_	_	_	_	
57-22	10317-10318	s	_	_	_	_	
57-23	10319-10323	node	_	_	_	_	
57-24	10324-10329	count	_	_	_	_	
57-25	10329-10330	,	_	_	_	_	
57-26	10331-10333	or	_	_	_	_	
57-27	10334-10338	even	_	_	_	_	
57-28	10338-10339	 	_	_	_	_	
57-29	10339-10345	change	_	_	_	_	
57-30	10346-10349	the	_	_	_	_	
57-31	10350-10354	node	_	_	_	_	
57-32	10355-10359	type	_	_	_	_	
57-33	10359-10360	.	_	_	_	_	
57-34	10360-10361	 	_	_	_	_	

#Text=You can expand the cluster to provide additional processing power to accommodate an expected increase in workload, such as Black Friday for internet shopping, or a championship game for a team’s web business. 
58-1	10361-10364	You	_	_	_	_	
58-2	10365-10368	can	_	_	_	_	
58-3	10369-10375	expand	_	_	_	_	
58-4	10376-10379	the	_	_	_	_	
58-5	10380-10387	cluster	_	_	_	_	
58-6	10388-10390	to	_	_	_	_	
58-7	10391-10398	provide	_	_	_	_	
58-8	10399-10409	additional	_	_	_	_	
58-9	10410-10420	processing	_	_	_	_	
58-10	10421-10426	power	_	_	_	_	
58-11	10427-10429	to	_	_	_	_	
58-12	10430-10441	accommodate	_	_	_	_	
58-13	10442-10444	an	_	_	_	_	
58-14	10445-10453	expected	_	_	_	_	
58-15	10454-10462	increase	_	_	_	_	
58-16	10463-10465	in	_	_	_	_	
58-17	10466-10474	workload	_	_	_	_	
58-18	10474-10475	,	_	_	_	_	
58-19	10476-10480	such	_	_	_	_	
58-20	10481-10483	as	_	_	_	_	
58-21	10484-10489	Black	_	_	_	_	
58-22	10490-10496	Friday	_	_	_	_	
58-23	10497-10500	for	_	_	_	_	
58-24	10501-10509	internet	_	_	_	_	
58-25	10510-10518	shopping	_	_	_	_	
58-26	10518-10519	,	_	_	_	_	
58-27	10520-10522	or	_	_	_	_	
58-28	10523-10524	a	_	_	_	_	
58-29	10525-10537	championship	_	_	_	_	
58-30	10538-10542	game	_	_	_	_	
58-31	10543-10546	for	_	_	_	_	
58-32	10547-10548	a	_	_	_	_	
58-33	10549-10553	team	_	_	_	_	
58-34	10553-10554	’	_	_	_	_	
58-35	10554-10555	s	_	_	_	_	
58-36	10556-10559	web	_	_	_	_	
58-37	10560-10568	business	_	_	_	_	
58-38	10568-10569	.	_	_	_	_	
58-39	10569-10570	 	_	_	_	_	

#Text=Choose classic resize when you’re resizing to a configuration that isn’t available through elastic resize.
59-1	10570-10576	Choose	_	_	_	_	
59-2	10577-10584	classic	_	_	_	_	
59-3	10585-10591	resize	_	_	_	_	
59-4	10592-10596	when	_	_	_	_	
59-5	10597-10600	you	_	_	_	_	
59-6	10600-10601	’	_	_	_	_	
59-7	10601-10603	re	_	_	_	_	
59-8	10604-10612	resizing	_	_	_	_	
59-9	10613-10615	to	_	_	_	_	
59-10	10616-10617	a	_	_	_	_	
59-11	10618-10631	configuration	_	_	_	_	
59-12	10632-10636	that	_	_	_	_	
59-13	10637-10640	isn	_	_	_	_	
59-14	10640-10641	’	_	_	_	_	
59-15	10641-10642	t	_	_	_	_	
59-16	10643-10652	available	_	_	_	_	
59-17	10653-10660	through	_	_	_	_	
59-18	10661-10668	elastic	_	_	_	_	
59-19	10669-10675	resize	_	_	_	_	
59-20	10675-10676	.	_	_	_	_	

#Text=Classic resize is slower but allows you to change the node type or expand beyond the doubling or halving size limitations of an elastic resize.
60-1	10677-10684	Classic	_	_	_	_	
60-2	10685-10691	resize	_	_	_	_	
60-3	10692-10694	is	_	_	_	_	
60-4	10695-10701	slower	_	_	_	_	
60-5	10702-10705	but	_	_	_	_	
60-6	10706-10712	allows	_	_	_	_	
60-7	10713-10716	you	_	_	_	_	
60-8	10717-10719	to	_	_	_	_	
60-9	10720-10726	change	_	_	_	_	
60-10	10727-10730	the	_	_	_	_	
60-11	10731-10735	node	_	_	_	_	
60-12	10736-10740	type	_	_	_	_	
60-13	10741-10743	or	_	_	_	_	
60-14	10744-10750	expand	_	_	_	_	
60-15	10751-10757	beyond	_	_	_	_	
60-16	10758-10761	the	_	_	_	_	
60-17	10762-10770	doubling	_	_	_	_	
60-18	10771-10773	or	_	_	_	_	
60-19	10774-10781	halving	_	_	_	_	
60-20	10782-10786	size	_	_	_	_	
60-21	10787-10798	limitations	_	_	_	_	
60-22	10799-10801	of	_	_	_	_	
60-23	10802-10804	an	_	_	_	_	
60-24	10805-10812	elastic	_	_	_	_	
60-25	10813-10819	resize	_	_	_	_	
60-26	10819-10820	.	_	_	_	_	

#Text=Elastic resize completes in minutes and doesn’t require a cluster restart.
61-1	10821-10828	Elastic	_	_	_	_	
61-2	10829-10835	resize	_	_	_	_	
61-3	10836-10845	completes	_	_	_	_	
61-4	10846-10848	in	_	_	_	_	
61-5	10849-10856	minutes	_	_	_	_	
61-6	10857-10860	and	_	_	_	_	
61-7	10861-10866	doesn	_	_	_	_	
61-8	10866-10867	’	_	_	_	_	
61-9	10867-10868	t	_	_	_	_	
61-10	10869-10876	require	_	_	_	_	
61-11	10877-10878	a	_	_	_	_	
61-12	10879-10886	cluster	_	_	_	_	
61-13	10887-10894	restart	_	_	_	_	
61-14	10894-10895	.	_	_	_	_	

#Text=For anticipated workload spikes that occur on a predictable schedule, you can automate the resize operation using the elastic resize scheduler feature on the Amazon Redshift console, the AWS Command Line Interface (AWS CLI), or API.
62-1	10896-10899	For	_	_	_	_	
62-2	10900-10911	anticipated	_	_	_	_	
62-3	10912-10920	workload	_	_	_	_	
62-4	10921-10927	spikes	_	_	_	_	
62-5	10928-10932	that	_	_	_	_	
62-6	10933-10938	occur	_	_	_	_	
62-7	10939-10941	on	_	_	_	_	
62-8	10942-10943	a	_	_	_	_	
62-9	10944-10955	predictable	_	_	_	_	
62-10	10956-10964	schedule	_	_	_	_	
62-11	10964-10965	,	_	_	_	_	
62-12	10966-10969	you	_	_	_	_	
62-13	10970-10973	can	_	_	_	_	
62-14	10974-10982	automate	_	_	_	_	
62-15	10983-10986	the	_	_	_	_	
62-16	10987-10993	resize	_	_	_	_	
62-17	10994-11003	operation	_	_	_	_	
62-18	11004-11009	using	_	_	_	_	
62-19	11010-11013	the	_	_	_	_	
62-20	11014-11021	elastic	_	_	_	_	
62-21	11022-11028	resize	_	_	_	_	
62-22	11029-11038	scheduler	_	_	_	_	
62-23	11039-11046	feature	_	_	_	_	
62-24	11047-11049	on	_	_	_	_	
62-25	11050-11053	the	_	_	_	_	
62-26	11054-11060	Amazon	_	_	_	_	
62-27	11061-11069	Redshift	_	_	_	_	
62-28	11070-11077	console	_	_	_	_	
62-29	11077-11078	,	_	_	_	_	
62-30	11079-11082	the	_	_	_	_	
62-31	11083-11086	AWS	_	_	_	_	
62-32	11087-11094	Command	_	_	_	_	
62-33	11095-11099	Line	_	_	_	_	
62-34	11100-11109	Interface	_	_	_	_	
62-35	11110-11111	(	_	_	_	_	
62-36	11111-11114	AWS	_	_	_	_	
62-37	11115-11118	CLI	_	_	_	_	
62-38	11118-11119	)	_	_	_	_	
62-39	11119-11120	,	_	_	_	_	
62-40	11121-11123	or	_	_	_	_	
62-41	11124-11127	API	_	_	_	_	
62-42	11127-11128	.	_	_	_	_	

#Text=Concurrency scaling allows your Amazon Redshift cluster to add capacity dynamically in response to the workload arriving at the cluster.
63-1	11129-11140	Concurrency	_	_	_	_	
63-2	11141-11148	scaling	_	_	_	_	
63-3	11149-11155	allows	_	_	_	_	
63-4	11156-11160	your	_	_	_	_	
63-5	11161-11167	Amazon	_	_	_	_	
63-6	11168-11176	Redshift	_	_	_	_	
63-7	11177-11184	cluster	_	_	_	_	
63-8	11185-11187	to	_	_	_	_	
63-9	11188-11191	add	_	_	_	_	
63-10	11192-11200	capacity	_	_	_	_	
63-11	11201-11212	dynamically	_	_	_	_	
63-12	11213-11215	in	_	_	_	_	
63-13	11216-11224	response	_	_	_	_	
63-14	11225-11227	to	_	_	_	_	
63-15	11228-11231	the	_	_	_	_	
63-16	11232-11240	workload	_	_	_	_	
63-17	11241-11249	arriving	_	_	_	_	
63-18	11250-11252	at	_	_	_	_	
63-19	11253-11256	the	_	_	_	_	
63-20	11257-11264	cluster	_	_	_	_	
63-21	11264-11265	.	_	_	_	_	

#Text=By default, concurrency scaling is disabled, and you can enable it for any workload management (WLM) queue to scale to a virtually unlimited number of concurrent queries, with consistently fast query performance.
64-1	11266-11268	By	_	_	_	_	
64-2	11269-11276	default	_	_	_	_	
64-3	11276-11277	,	_	_	_	_	
64-4	11278-11289	concurrency	_	_	_	_	
64-5	11290-11297	scaling	_	_	_	_	
64-6	11298-11300	is	_	_	_	_	
64-7	11301-11309	disabled	_	_	_	_	
64-8	11309-11310	,	_	_	_	_	
64-9	11311-11314	and	_	_	_	_	
64-10	11315-11318	you	_	_	_	_	
64-11	11319-11322	can	_	_	_	_	
64-12	11323-11329	enable	_	_	_	_	
64-13	11330-11332	it	_	_	_	_	
64-14	11333-11336	for	_	_	_	_	
64-15	11337-11340	any	_	_	_	_	
64-16	11341-11349	workload	_	_	_	_	
64-17	11350-11360	management	_	_	_	_	
64-18	11361-11362	(	_	_	_	_	
64-19	11362-11365	WLM	_	_	_	_	
64-20	11365-11366	)	_	_	_	_	
64-21	11367-11372	queue	_	_	_	_	
64-22	11373-11375	to	_	_	_	_	
64-23	11376-11381	scale	_	_	_	_	
64-24	11382-11384	to	_	_	_	_	
64-25	11385-11386	a	_	_	_	_	
64-26	11387-11396	virtually	_	_	_	_	
64-27	11397-11406	unlimited	_	_	_	_	
64-28	11407-11413	number	_	_	_	_	
64-29	11414-11416	of	_	_	_	_	
64-30	11417-11427	concurrent	_	_	_	_	
64-31	11428-11435	queries	_	_	_	_	
64-32	11435-11436	,	_	_	_	_	
64-33	11437-11441	with	_	_	_	_	
64-34	11442-11454	consistently	_	_	_	_	
64-35	11455-11459	fast	_	_	_	_	
64-36	11460-11465	query	_	_	_	_	
64-37	11466-11477	performance	_	_	_	_	
64-38	11477-11478	.	_	_	_	_	

#Text=You can control the maximum number of concurrency scaling clusters allowed by setting the “max_concurrency_scaling_clusters” parameter value from 1 (default) to 10 (contact support to raise this soft limit).
65-1	11479-11482	You	_	_	_	_	
65-2	11483-11486	can	_	_	_	_	
65-3	11487-11494	control	_	_	_	_	
65-4	11495-11498	the	_	_	_	_	
65-5	11499-11506	maximum	_	_	_	_	
65-6	11507-11513	number	_	_	_	_	
65-7	11514-11516	of	_	_	_	_	
65-8	11517-11528	concurrency	_	_	_	_	
65-9	11529-11536	scaling	_	_	_	_	
65-10	11537-11545	clusters	_	_	_	_	
65-11	11546-11553	allowed	_	_	_	_	
65-12	11554-11556	by	_	_	_	_	
65-13	11557-11564	setting	_	_	_	_	
65-14	11565-11568	the	_	_	_	_	
65-15	11569-11570	“	_	_	_	_	
65-16	11570-11602	max_concurrency_scaling_clusters	*	parameter	_	_	
65-17	11602-11603	”	_	_	_	_	
65-18	11604-11613	parameter	_	_	_	_	
65-19	11614-11619	value	_	_	_	_	
65-20	11620-11624	from	_	_	_	_	
65-21	11625-11626	1	*	value	Associated-With	65-16	
65-22	11627-11628	(	_	_	_	_	
65-23	11628-11635	default	_	_	_	_	
65-24	11635-11636	)	_	_	_	_	
65-25	11637-11639	to	_	_	_	_	
65-26	11640-11642	10	*	value	Associated-With	65-16	
65-27	11643-11644	(	_	_	_	_	
65-28	11644-11651	contact	_	_	_	_	
65-29	11652-11659	support	_	_	_	_	
65-30	11660-11662	to	_	_	_	_	
65-31	11663-11668	raise	_	_	_	_	
65-32	11669-11673	this	_	_	_	_	
65-33	11674-11678	soft	_	_	_	_	
65-34	11679-11684	limit	_	_	_	_	
65-35	11684-11685	)	_	_	_	_	
65-36	11685-11686	.	_	_	_	_	

#Text=The free billing credits provided for concurrency scaling is often enough and the majority of customers using this feature don’t end up paying extra for it.
66-1	11687-11690	The	_	_	_	_	
66-2	11691-11695	free	_	_	_	_	
66-3	11696-11703	billing	_	_	_	_	
66-4	11704-11711	credits	_	_	_	_	
66-5	11712-11720	provided	_	_	_	_	
66-6	11721-11724	for	_	_	_	_	
66-7	11725-11736	concurrency	_	_	_	_	
66-8	11737-11744	scaling	_	_	_	_	
66-9	11745-11747	is	_	_	_	_	
66-10	11748-11753	often	_	_	_	_	
66-11	11754-11760	enough	_	_	_	_	
66-12	11761-11764	and	_	_	_	_	
66-13	11765-11768	the	_	_	_	_	
66-14	11769-11777	majority	_	_	_	_	
66-15	11778-11780	of	_	_	_	_	
66-16	11781-11790	customers	_	_	_	_	
66-17	11791-11796	using	_	_	_	_	
66-18	11797-11801	this	_	_	_	_	
66-19	11802-11809	feature	_	_	_	_	
66-20	11810-11813	don	_	_	_	_	
66-21	11813-11814	’	_	_	_	_	
66-22	11814-11815	t	_	_	_	_	
66-23	11816-11819	end	_	_	_	_	
66-24	11820-11822	up	_	_	_	_	
66-25	11823-11829	paying	_	_	_	_	
66-26	11830-11835	extra	_	_	_	_	
66-27	11836-11839	for	_	_	_	_	
66-28	11840-11842	it	_	_	_	_	
66-29	11842-11843	.	_	_	_	_	

#Text=For more information about the concurrency scaling billing model see Concurrency Scaling pricing.
67-1	11844-11847	For	_	_	_	_	
67-2	11848-11852	more	_	_	_	_	
67-3	11853-11864	information	_	_	_	_	
67-4	11865-11870	about	_	_	_	_	
67-5	11871-11874	the	_	_	_	_	
67-6	11875-11886	concurrency	_	_	_	_	
67-7	11887-11894	scaling	_	_	_	_	
67-8	11895-11902	billing	_	_	_	_	
67-9	11903-11908	model	_	_	_	_	
67-10	11909-11912	see	_	_	_	_	
67-11	11913-11924	Concurrency	_	_	_	_	
67-12	11925-11932	Scaling	_	_	_	_	
67-13	11933-11940	pricing	_	_	_	_	
67-14	11940-11941	.	_	_	_	_	

#Text=You can monitor and control the concurrency scaling usage and cost by creating daily, weekly, or monthly usage limits and instruct Amazon Redshift to automatically take action (such as logging, alerting or disabling further usage) if those limits are reached.
68-1	11942-11945	You	_	_	_	_	
68-2	11946-11949	can	_	_	_	_	
68-3	11950-11957	monitor	_	_	_	_	
68-4	11958-11961	and	_	_	_	_	
68-5	11962-11969	control	_	_	_	_	
68-6	11970-11973	the	_	_	_	_	
68-7	11974-11985	concurrency	_	_	_	_	
68-8	11986-11993	scaling	_	_	_	_	
68-9	11994-11999	usage	_	_	_	_	
68-10	12000-12003	and	_	_	_	_	
68-11	12004-12008	cost	_	_	_	_	
68-12	12009-12011	by	_	_	_	_	
68-13	12012-12020	creating	_	_	_	_	
68-14	12021-12026	daily	_	_	_	_	
68-15	12026-12027	,	_	_	_	_	
68-16	12028-12034	weekly	_	_	_	_	
68-17	12034-12035	,	_	_	_	_	
68-18	12036-12038	or	_	_	_	_	
68-19	12039-12046	monthly	_	_	_	_	
68-20	12047-12052	usage	_	_	_	_	
68-21	12053-12059	limits	_	_	_	_	
68-22	12060-12063	and	_	_	_	_	
68-23	12064-12072	instruct	_	_	_	_	
68-24	12073-12079	Amazon	_	_	_	_	
68-25	12080-12088	Redshift	_	_	_	_	
68-26	12089-12091	to	_	_	_	_	
68-27	12092-12105	automatically	_	_	_	_	
68-28	12106-12110	take	_	_	_	_	
68-29	12111-12117	action	_	_	_	_	
68-30	12118-12119	(	_	_	_	_	
68-31	12119-12123	such	_	_	_	_	
68-32	12124-12126	as	_	_	_	_	
68-33	12127-12134	logging	_	_	_	_	
68-34	12134-12135	,	_	_	_	_	
68-35	12136-12144	alerting	_	_	_	_	
68-36	12145-12147	or	_	_	_	_	
68-37	12148-12157	disabling	_	_	_	_	
68-38	12158-12165	further	_	_	_	_	
68-39	12166-12171	usage	_	_	_	_	
68-40	12171-12172	)	_	_	_	_	
68-41	12173-12175	if	_	_	_	_	
68-42	12176-12181	those	_	_	_	_	
68-43	12182-12188	limits	_	_	_	_	
68-44	12189-12192	are	_	_	_	_	
68-45	12193-12200	reached	_	_	_	_	
68-46	12200-12201	.	_	_	_	_	

#Text=For more information, see Managing usage limits in Amazon Redshift.
69-1	12202-12205	For	_	_	_	_	
69-2	12206-12210	more	_	_	_	_	
69-3	12211-12222	information	_	_	_	_	
69-4	12222-12223	,	_	_	_	_	
69-5	12224-12227	see	_	_	_	_	
69-6	12228-12236	Managing	_	_	_	_	
69-7	12237-12242	usage	_	_	_	_	
69-8	12243-12249	limits	_	_	_	_	
69-9	12250-12252	in	_	_	_	_	
69-10	12253-12259	Amazon	_	_	_	_	
69-11	12260-12268	Redshift	_	_	_	_	
69-12	12268-12269	.	_	_	_	_	

#Text=Together, these options open up new ways to right-size the platform to meet demand.
70-1	12270-12278	Together	_	_	_	_	
70-2	12278-12279	,	_	_	_	_	
70-3	12280-12285	these	_	_	_	_	
70-4	12286-12293	options	_	_	_	_	
70-5	12294-12298	open	_	_	_	_	
70-6	12299-12301	up	_	_	_	_	
70-7	12302-12305	new	_	_	_	_	
70-8	12306-12310	ways	_	_	_	_	
70-9	12311-12313	to	_	_	_	_	
70-10	12314-12324	right-size	_	_	_	_	
70-11	12325-12328	the	_	_	_	_	
70-12	12329-12337	platform	_	_	_	_	
70-13	12338-12340	to	_	_	_	_	
70-14	12341-12345	meet	_	_	_	_	
70-15	12346-12352	demand	_	_	_	_	
70-16	12352-12353	.	_	_	_	_	

#Text=Before these options, you needed to size your WLM queue, or even an entire Amazon Redshift cluster, beforehand in anticipation of upcoming peaks.
71-1	12354-12360	Before	_	_	_	_	
71-2	12361-12366	these	_	_	_	_	
71-3	12367-12374	options	_	_	_	_	
71-4	12374-12375	,	_	_	_	_	
71-5	12376-12379	you	_	_	_	_	
71-6	12380-12386	needed	_	_	_	_	
71-7	12387-12389	to	_	_	_	_	
71-8	12390-12394	size	_	_	_	_	
71-9	12395-12399	your	_	_	_	_	
71-10	12400-12403	WLM	_	_	_	_	
71-11	12404-12409	queue	_	_	_	_	
71-12	12409-12410	,	_	_	_	_	
71-13	12411-12413	or	_	_	_	_	
71-14	12414-12418	even	_	_	_	_	
71-15	12419-12421	an	_	_	_	_	
71-16	12422-12428	entire	_	_	_	_	
71-17	12429-12435	Amazon	_	_	_	_	
71-18	12436-12444	Redshift	_	_	_	_	
71-19	12445-12452	cluster	_	_	_	_	
71-20	12452-12453	,	_	_	_	_	
71-21	12454-12464	beforehand	_	_	_	_	
71-22	12465-12467	in	_	_	_	_	
71-23	12468-12480	anticipation	_	_	_	_	
71-24	12481-12483	of	_	_	_	_	
71-25	12484-12492	upcoming	_	_	_	_	
71-26	12493-12498	peaks	_	_	_	_	
71-27	12498-12499	.	_	_	_	_	

#Text=Tip #3: Using the Amazon Redshift Advisor to minimize administrative work
#Text=Amazon Redshift Advisor offers recommendations specific to your Amazon Redshift cluster to help you improve its performance and decrease operating costs.
72-1	12500-12503	Tip	_	_	_	_	
72-2	12504-12506	#3	_	_	_	_	
72-3	12506-12507	:	_	_	_	_	
72-4	12508-12513	Using	_	_	_	_	
72-5	12514-12517	the	_	_	_	_	
72-6	12518-12524	Amazon	_	_	_	_	
72-7	12525-12533	Redshift	_	_	_	_	
72-8	12534-12541	Advisor	_	_	_	_	
72-9	12542-12544	to	_	_	_	_	
72-10	12545-12553	minimize	_	_	_	_	
72-11	12554-12568	administrative	_	_	_	_	
72-12	12569-12573	work	_	_	_	_	
72-13	12574-12580	Amazon	_	_	_	_	
72-14	12581-12589	Redshift	_	_	_	_	
72-15	12590-12597	Advisor	_	_	_	_	
72-16	12598-12604	offers	_	_	_	_	
72-17	12605-12620	recommendations	_	_	_	_	
72-18	12621-12629	specific	_	_	_	_	
72-19	12630-12632	to	_	_	_	_	
72-20	12633-12637	your	_	_	_	_	
72-21	12638-12644	Amazon	_	_	_	_	
72-22	12645-12653	Redshift	_	_	_	_	
72-23	12654-12661	cluster	_	_	_	_	
72-24	12662-12664	to	_	_	_	_	
72-25	12665-12669	help	_	_	_	_	
72-26	12670-12673	you	_	_	_	_	
72-27	12674-12681	improve	_	_	_	_	
72-28	12682-12685	its	_	_	_	_	
72-29	12686-12697	performance	_	_	_	_	
72-30	12698-12701	and	_	_	_	_	
72-31	12702-12710	decrease	_	_	_	_	
72-32	12711-12720	operating	_	_	_	_	
72-33	12721-12726	costs	_	_	_	_	
72-34	12726-12727	.	_	_	_	_	

#Text=Advisor bases its recommendations on observations regarding performance statistics or operations data.
73-1	12728-12735	Advisor	_	_	_	_	
73-2	12736-12741	bases	_	_	_	_	
73-3	12742-12745	its	_	_	_	_	
73-4	12746-12761	recommendations	_	_	_	_	
73-5	12762-12764	on	_	_	_	_	
73-6	12765-12777	observations	_	_	_	_	
73-7	12778-12787	regarding	_	_	_	_	
73-8	12788-12799	performance	_	_	_	_	
73-9	12800-12810	statistics	_	_	_	_	
73-10	12811-12813	or	_	_	_	_	
73-11	12814-12824	operations	_	_	_	_	
73-12	12825-12829	data	_	_	_	_	
73-13	12829-12830	.	_	_	_	_	

#Text=Advisor develops observations by running tests on your clusters to determine if a test value is within a specified range.
74-1	12831-12838	Advisor	_	_	_	_	
74-2	12839-12847	develops	_	_	_	_	
74-3	12848-12860	observations	_	_	_	_	
74-4	12861-12863	by	_	_	_	_	
74-5	12864-12871	running	_	_	_	_	
74-6	12872-12877	tests	_	_	_	_	
74-7	12878-12880	on	_	_	_	_	
74-8	12881-12885	your	_	_	_	_	
74-9	12886-12894	clusters	_	_	_	_	
74-10	12895-12897	to	_	_	_	_	
74-11	12898-12907	determine	_	_	_	_	
74-12	12908-12910	if	_	_	_	_	
74-13	12911-12912	a	_	_	_	_	
74-14	12913-12917	test	_	_	_	_	
74-15	12918-12923	value	_	_	_	_	
74-16	12924-12926	is	_	_	_	_	
74-17	12927-12933	within	_	_	_	_	
74-18	12934-12935	a	_	_	_	_	
74-19	12936-12945	specified	_	_	_	_	
74-20	12946-12951	range	_	_	_	_	
74-21	12951-12952	.	_	_	_	_	

#Text=If the test result is outside of that range, Advisor generates an observation for your cluster.
75-1	12953-12955	If	_	_	_	_	
75-2	12956-12959	the	_	_	_	_	
75-3	12960-12964	test	_	_	_	_	
75-4	12965-12971	result	_	_	_	_	
75-5	12972-12974	is	_	_	_	_	
75-6	12975-12982	outside	_	_	_	_	
75-7	12983-12985	of	_	_	_	_	
75-8	12986-12990	that	_	_	_	_	
75-9	12991-12996	range	_	_	_	_	
75-10	12996-12997	,	_	_	_	_	
75-11	12998-13005	Advisor	_	_	_	_	
75-12	13006-13015	generates	_	_	_	_	
75-13	13016-13018	an	_	_	_	_	
75-14	13019-13030	observation	_	_	_	_	
75-15	13031-13034	for	_	_	_	_	
75-16	13035-13039	your	_	_	_	_	
75-17	13040-13047	cluster	_	_	_	_	
75-18	13047-13048	.	_	_	_	_	

#Text=At the same time, Advisor creates a recommendation about how to bring the observed value back into the best-practice range.
76-1	13049-13051	At	_	_	_	_	
76-2	13052-13055	the	_	_	_	_	
76-3	13056-13060	same	_	_	_	_	
76-4	13061-13065	time	_	_	_	_	
76-5	13065-13066	,	_	_	_	_	
76-6	13067-13074	Advisor	_	_	_	_	
76-7	13075-13082	creates	_	_	_	_	
76-8	13083-13084	a	_	_	_	_	
76-9	13085-13099	recommendation	_	_	_	_	
76-10	13100-13105	about	_	_	_	_	
76-11	13106-13109	how	_	_	_	_	
76-12	13110-13112	to	_	_	_	_	
76-13	13113-13118	bring	_	_	_	_	
76-14	13119-13122	the	_	_	_	_	
76-15	13123-13131	observed	_	_	_	_	
76-16	13132-13137	value	_	_	_	_	
76-17	13138-13142	back	_	_	_	_	
76-18	13143-13147	into	_	_	_	_	
76-19	13148-13151	the	_	_	_	_	
76-20	13152-13165	best-practice	_	_	_	_	
76-21	13166-13171	range	_	_	_	_	
76-22	13171-13172	.	_	_	_	_	

#Text=Advisor only displays recommendations that can have a significant impact on performance and operations.
77-1	13173-13180	Advisor	_	_	_	_	
77-2	13181-13185	only	_	_	_	_	
77-3	13186-13194	displays	_	_	_	_	
77-4	13195-13210	recommendations	_	_	_	_	
77-5	13211-13215	that	_	_	_	_	
77-6	13215-13216	 	_	_	_	_	
77-7	13216-13219	can	_	_	_	_	
77-8	13220-13224	have	_	_	_	_	
77-9	13225-13226	a	_	_	_	_	
77-10	13227-13238	significant	_	_	_	_	
77-11	13239-13245	impact	_	_	_	_	
77-12	13246-13248	on	_	_	_	_	
77-13	13249-13260	performance	_	_	_	_	
77-14	13261-13264	and	_	_	_	_	
77-15	13265-13275	operations	_	_	_	_	
77-16	13275-13276	.	_	_	_	_	

#Text=When Advisor determines that a recommendation has been addressed, it removes it from your recommendation list.
78-1	13277-13281	When	_	_	_	_	
78-2	13282-13289	Advisor	_	_	_	_	
78-3	13290-13300	determines	_	_	_	_	
78-4	13301-13305	that	_	_	_	_	
78-5	13306-13307	a	_	_	_	_	
78-6	13308-13322	recommendation	_	_	_	_	
78-7	13323-13326	has	_	_	_	_	
78-8	13327-13331	been	_	_	_	_	
78-9	13332-13341	addressed	_	_	_	_	
78-10	13341-13342	,	_	_	_	_	
78-11	13343-13345	it	_	_	_	_	
78-12	13346-13353	removes	_	_	_	_	
78-13	13354-13356	it	_	_	_	_	
78-14	13357-13361	from	_	_	_	_	
78-15	13362-13366	your	_	_	_	_	
78-16	13367-13381	recommendation	_	_	_	_	
78-17	13382-13386	list	_	_	_	_	
78-18	13386-13387	.	_	_	_	_	

#Text=In this section, we share some examples of Advisor recommendations:
#Text=Distribution key recommendation
#Text=Advisor analyzes your cluster’s workload to identify the most appropriate distribution key for the tables that can significantly benefit from a KEY distribution style. 
79-1	13388-13390	In	_	_	_	_	
79-2	13391-13395	this	_	_	_	_	
79-3	13396-13403	section	_	_	_	_	
79-4	13403-13404	,	_	_	_	_	
79-5	13405-13407	we	_	_	_	_	
79-6	13408-13413	share	_	_	_	_	
79-7	13414-13418	some	_	_	_	_	
79-8	13419-13427	examples	_	_	_	_	
79-9	13428-13430	of	_	_	_	_	
79-10	13431-13438	Advisor	_	_	_	_	
79-11	13439-13454	recommendations	_	_	_	_	
79-12	13454-13455	:	_	_	_	_	
79-13	13456-13468	Distribution	_	_	_	_	
79-14	13469-13472	key	_	_	_	_	
79-15	13473-13487	recommendation	_	_	_	_	
79-16	13488-13495	Advisor	_	_	_	_	
79-17	13496-13504	analyzes	_	_	_	_	
79-18	13505-13509	your	_	_	_	_	
79-19	13510-13517	cluster	_	_	_	_	
79-20	13517-13518	’	_	_	_	_	
79-21	13518-13519	s	_	_	_	_	
79-22	13520-13528	workload	_	_	_	_	
79-23	13529-13531	to	_	_	_	_	
79-24	13532-13540	identify	_	_	_	_	
79-25	13541-13544	the	_	_	_	_	
79-26	13545-13549	most	_	_	_	_	
79-27	13550-13561	appropriate	_	_	_	_	
79-28	13562-13574	distribution	_	_	_	_	
79-29	13575-13578	key	_	_	_	_	
79-30	13579-13582	for	_	_	_	_	
79-31	13583-13586	the	_	_	_	_	
79-32	13587-13593	tables	_	_	_	_	
79-33	13594-13598	that	_	_	_	_	
79-34	13599-13602	can	_	_	_	_	
79-35	13603-13616	significantly	_	_	_	_	
79-36	13617-13624	benefit	_	_	_	_	
79-37	13625-13629	from	_	_	_	_	
79-38	13630-13631	a	_	_	_	_	
79-39	13632-13635	KEY	_	_	_	_	
79-40	13636-13648	distribution	_	_	_	_	
79-41	13649-13654	style	_	_	_	_	
79-42	13654-13655	.	_	_	_	_	
79-43	13655-13656	 	_	_	_	_	

#Text=Advisor provides ALTER TABLE statements that alter the DISTSTYLE and DISTKEY of a table based on its analysis.
80-1	13656-13663	Advisor	_	_	_	_	
80-2	13664-13672	provides	_	_	_	_	
80-3	13673-13678	ALTER	_	_	_	_	
80-4	13679-13684	TABLE	_	_	_	_	
80-5	13685-13695	statements	_	_	_	_	
80-6	13696-13700	that	_	_	_	_	
80-7	13701-13706	alter	_	_	_	_	
80-8	13707-13710	the	_	_	_	_	
80-9	13711-13720	DISTSTYLE	_	_	_	_	
80-10	13721-13724	and	_	_	_	_	
80-11	13725-13732	DISTKEY	_	_	_	_	
80-12	13733-13735	of	_	_	_	_	
80-13	13736-13737	a	_	_	_	_	
80-14	13738-13743	table	_	_	_	_	
80-15	13744-13749	based	_	_	_	_	
80-16	13750-13752	on	_	_	_	_	
80-17	13753-13756	its	_	_	_	_	
80-18	13757-13765	analysis	_	_	_	_	
80-19	13765-13766	.	_	_	_	_	

#Text=To realize a significant performance benefit, make sure to implement all SQL statements within a recommendation group.
81-1	13767-13769	To	_	_	_	_	
81-2	13770-13777	realize	_	_	_	_	
81-3	13778-13779	a	_	_	_	_	
81-4	13780-13791	significant	_	_	_	_	
81-5	13792-13803	performance	_	_	_	_	
81-6	13804-13811	benefit	_	_	_	_	
81-7	13811-13812	,	_	_	_	_	
81-8	13813-13817	make	_	_	_	_	
81-9	13818-13822	sure	_	_	_	_	
81-10	13823-13825	to	_	_	_	_	
81-11	13826-13835	implement	_	_	_	_	
81-12	13836-13839	all	_	_	_	_	
81-13	13840-13843	SQL	_	_	_	_	
81-14	13844-13854	statements	_	_	_	_	
81-15	13855-13861	within	_	_	_	_	
81-16	13862-13863	a	_	_	_	_	
81-17	13864-13878	recommendation	_	_	_	_	
81-18	13879-13884	group	_	_	_	_	
81-19	13884-13885	.	_	_	_	_	

#Text=The following screenshot shows recommendations regarding distribution keys.
82-1	13886-13889	The	_	_	_	_	
82-2	13890-13899	following	_	_	_	_	
82-3	13900-13910	screenshot	_	_	_	_	
82-4	13911-13916	shows	_	_	_	_	
82-5	13917-13932	recommendations	_	_	_	_	
82-6	13933-13942	regarding	_	_	_	_	
82-7	13943-13955	distribution	_	_	_	_	
82-8	13956-13960	keys	_	_	_	_	
82-9	13960-13961	.	_	_	_	_	

#Text=If you don’t see a recommendation, that doesn’t necessarily mean that the current distribution styles are the most appropriate.
83-1	13962-13964	If	_	_	_	_	
83-2	13965-13968	you	_	_	_	_	
83-3	13969-13972	don	_	_	_	_	
83-4	13972-13973	’	_	_	_	_	
83-5	13973-13974	t	_	_	_	_	
83-6	13975-13978	see	_	_	_	_	
83-7	13979-13980	a	_	_	_	_	
83-8	13981-13995	recommendation	_	_	_	_	
83-9	13995-13996	,	_	_	_	_	
83-10	13997-14001	that	_	_	_	_	
83-11	14002-14007	doesn	_	_	_	_	
83-12	14007-14008	’	_	_	_	_	
83-13	14008-14009	t	_	_	_	_	
83-14	14010-14021	necessarily	_	_	_	_	
83-15	14022-14026	mean	_	_	_	_	
83-16	14027-14031	that	_	_	_	_	
83-17	14032-14035	the	_	_	_	_	
83-18	14036-14043	current	_	_	_	_	
83-19	14044-14056	distribution	_	_	_	_	
83-20	14057-14063	styles	_	_	_	_	
83-21	14064-14067	are	_	_	_	_	
83-22	14068-14071	the	_	_	_	_	
83-23	14072-14076	most	_	_	_	_	
83-24	14077-14088	appropriate	_	_	_	_	
83-25	14088-14089	.	_	_	_	_	

#Text=Advisor doesn’t provide recommendations when there isn’t enough data or the expected benefit of redistribution is small.
84-1	14090-14097	Advisor	_	_	_	_	
84-2	14098-14103	doesn	_	_	_	_	
84-3	14103-14104	’	_	_	_	_	
84-4	14104-14105	t	_	_	_	_	
84-5	14106-14113	provide	_	_	_	_	
84-6	14114-14129	recommendations	_	_	_	_	
84-7	14130-14134	when	_	_	_	_	
84-8	14135-14140	there	_	_	_	_	
84-9	14141-14144	isn	_	_	_	_	
84-10	14144-14145	’	_	_	_	_	
84-11	14145-14146	t	_	_	_	_	
84-12	14147-14153	enough	_	_	_	_	
84-13	14154-14158	data	_	_	_	_	
84-14	14159-14161	or	_	_	_	_	
84-15	14162-14165	the	_	_	_	_	
84-16	14166-14174	expected	_	_	_	_	
84-17	14175-14182	benefit	_	_	_	_	
84-18	14183-14185	of	_	_	_	_	
84-19	14186-14200	redistribution	_	_	_	_	
84-20	14201-14203	is	_	_	_	_	
84-21	14204-14209	small	_	_	_	_	
84-22	14209-14210	.	_	_	_	_	

#Text=Sort key recommendation
#Text=Sorting a table on an appropriate sort key can accelerate query performance, especially queries with range-restricted predicates, by requiring fewer table blocks to be read from disk.
85-1	14211-14215	Sort	_	_	_	_	
85-2	14216-14219	key	_	_	_	_	
85-3	14220-14234	recommendation	_	_	_	_	
85-4	14235-14242	Sorting	_	_	_	_	
85-5	14243-14244	a	_	_	_	_	
85-6	14245-14250	table	_	_	_	_	
85-7	14251-14253	on	_	_	_	_	
85-8	14254-14256	an	_	_	_	_	
85-9	14257-14268	appropriate	_	_	_	_	
85-10	14269-14273	sort	_	_	_	_	
85-11	14274-14277	key	_	_	_	_	
85-12	14278-14281	can	_	_	_	_	
85-13	14282-14292	accelerate	_	_	_	_	
85-14	14293-14298	query	_	_	_	_	
85-15	14299-14310	performance	_	_	_	_	
85-16	14310-14311	,	_	_	_	_	
85-17	14312-14322	especially	_	_	_	_	
85-18	14323-14330	queries	_	_	_	_	
85-19	14331-14335	with	_	_	_	_	
85-20	14336-14352	range-restricted	_	_	_	_	
85-21	14353-14363	predicates	_	_	_	_	
85-22	14363-14364	,	_	_	_	_	
85-23	14365-14367	by	_	_	_	_	
85-24	14368-14377	requiring	_	_	_	_	
85-25	14378-14383	fewer	_	_	_	_	
85-26	14384-14389	table	_	_	_	_	
85-27	14390-14396	blocks	_	_	_	_	
85-28	14397-14399	to	_	_	_	_	
85-29	14400-14402	be	_	_	_	_	
85-30	14403-14407	read	_	_	_	_	
85-31	14408-14412	from	_	_	_	_	
85-32	14413-14417	disk	_	_	_	_	
85-33	14417-14418	.	_	_	_	_	

#Text=Advisor analyzes your cluster’s workload over several days to identify a beneficial sort key for your tables.
86-1	14419-14426	Advisor	_	_	_	_	
86-2	14427-14435	analyzes	_	_	_	_	
86-3	14436-14440	your	_	_	_	_	
86-4	14441-14448	cluster	_	_	_	_	
86-5	14448-14449	’	_	_	_	_	
86-6	14449-14450	s	_	_	_	_	
86-7	14451-14459	workload	_	_	_	_	
86-8	14460-14464	over	_	_	_	_	
86-9	14465-14472	several	_	_	_	_	
86-10	14473-14477	days	_	_	_	_	
86-11	14478-14480	to	_	_	_	_	
86-12	14481-14489	identify	_	_	_	_	
86-13	14490-14491	a	_	_	_	_	
86-14	14492-14502	beneficial	_	_	_	_	
86-15	14503-14507	sort	_	_	_	_	
86-16	14508-14511	key	_	_	_	_	
86-17	14512-14515	for	_	_	_	_	
86-18	14516-14520	your	_	_	_	_	
86-19	14521-14527	tables	_	_	_	_	
86-20	14527-14528	.	_	_	_	_	

#Text=See the following screenshot.
87-1	14529-14532	See	_	_	_	_	
87-2	14533-14536	the	_	_	_	_	
87-3	14537-14546	following	_	_	_	_	
87-4	14547-14557	screenshot	_	_	_	_	
87-5	14557-14558	.	_	_	_	_	

#Text=If you don’t see a recommendation for a table, that doesn’t necessarily mean that the current configuration is the best.
88-1	14559-14561	If	_	_	_	_	
88-2	14562-14565	you	_	_	_	_	
88-3	14566-14569	don	_	_	_	_	
88-4	14569-14570	’	_	_	_	_	
88-5	14570-14571	t	_	_	_	_	
88-6	14572-14575	see	_	_	_	_	
88-7	14576-14577	a	_	_	_	_	
88-8	14578-14592	recommendation	_	_	_	_	
88-9	14593-14596	for	_	_	_	_	
88-10	14597-14598	a	_	_	_	_	
88-11	14599-14604	table	_	_	_	_	
88-12	14604-14605	,	_	_	_	_	
88-13	14606-14610	that	_	_	_	_	
88-14	14611-14616	doesn	_	_	_	_	
88-15	14616-14617	’	_	_	_	_	
88-16	14617-14618	t	_	_	_	_	
88-17	14619-14630	necessarily	_	_	_	_	
88-18	14631-14635	mean	_	_	_	_	
88-19	14636-14640	that	_	_	_	_	
88-20	14641-14644	the	_	_	_	_	
88-21	14645-14652	current	_	_	_	_	
88-22	14653-14666	configuration	_	_	_	_	
88-23	14667-14669	is	_	_	_	_	
88-24	14670-14673	the	_	_	_	_	
88-25	14674-14678	best	_	_	_	_	
88-26	14678-14679	.	_	_	_	_	

#Text=Advisor doesn’t provide recommendations when there isn’t enough data or the expected benefit of sorting is small.
89-1	14680-14687	Advisor	_	_	_	_	
89-2	14688-14693	doesn	_	_	_	_	
89-3	14693-14694	’	_	_	_	_	
89-4	14694-14695	t	_	_	_	_	
89-5	14696-14703	provide	_	_	_	_	
89-6	14704-14719	recommendations	_	_	_	_	
89-7	14720-14724	when	_	_	_	_	
89-8	14725-14730	there	_	_	_	_	
89-9	14731-14734	isn	_	_	_	_	
89-10	14734-14735	’	_	_	_	_	
89-11	14735-14736	t	_	_	_	_	
89-12	14737-14743	enough	_	_	_	_	
89-13	14744-14748	data	_	_	_	_	
89-14	14749-14751	or	_	_	_	_	
89-15	14752-14755	the	_	_	_	_	
89-16	14756-14764	expected	_	_	_	_	
89-17	14765-14772	benefit	_	_	_	_	
89-18	14773-14775	of	_	_	_	_	
89-19	14776-14783	sorting	_	_	_	_	
89-20	14784-14786	is	_	_	_	_	
89-21	14787-14792	small	_	_	_	_	
89-22	14792-14793	.	_	_	_	_	

#Text=Table compression recommendation
#Text=Amazon Redshift is optimized to reduce your storage footprint and improve query performance by using compression encodings.
90-1	14794-14799	Table	_	_	_	_	
90-2	14800-14811	compression	_	_	_	_	
90-3	14812-14826	recommendation	_	_	_	_	
90-4	14827-14833	Amazon	_	_	_	_	
90-5	14834-14842	Redshift	_	_	_	_	
90-6	14843-14845	is	_	_	_	_	
90-7	14846-14855	optimized	_	_	_	_	
90-8	14856-14858	to	_	_	_	_	
90-9	14859-14865	reduce	_	_	_	_	
90-10	14866-14870	your	_	_	_	_	
90-11	14871-14878	storage	_	_	_	_	
90-12	14879-14888	footprint	_	_	_	_	
90-13	14889-14892	and	_	_	_	_	
90-14	14893-14900	improve	_	_	_	_	
90-15	14901-14906	query	_	_	_	_	
90-16	14907-14918	performance	_	_	_	_	
90-17	14919-14921	by	_	_	_	_	
90-18	14922-14927	using	_	_	_	_	
90-19	14928-14939	compression	_	_	_	_	
90-20	14940-14949	encodings	_	_	_	_	
90-21	14949-14950	.	_	_	_	_	

#Text=When you don’t use compression, data consumes additional space and requires additional disk I/O.
91-1	14951-14955	When	_	_	_	_	
91-2	14956-14959	you	_	_	_	_	
91-3	14960-14963	don	_	_	_	_	
91-4	14963-14964	’	_	_	_	_	
91-5	14964-14965	t	_	_	_	_	
91-6	14966-14969	use	_	_	_	_	
91-7	14970-14981	compression	_	_	_	_	
91-8	14981-14982	,	_	_	_	_	
91-9	14983-14987	data	_	_	_	_	
91-10	14988-14996	consumes	_	_	_	_	
91-11	14997-15007	additional	_	_	_	_	
91-12	15008-15013	space	_	_	_	_	
91-13	15014-15017	and	_	_	_	_	
91-14	15018-15026	requires	_	_	_	_	
91-15	15027-15037	additional	_	_	_	_	
91-16	15038-15042	disk	_	_	_	_	
91-17	15043-15044	I	_	_	_	_	
91-18	15044-15045	/	_	_	_	_	
91-19	15045-15046	O	_	_	_	_	
91-20	15046-15047	.	_	_	_	_	

#Text=Applying compression to large uncompressed columns can have a big impact on your cluster.
92-1	15048-15056	Applying	_	_	_	_	
92-2	15057-15068	compression	_	_	_	_	
92-3	15069-15071	to	_	_	_	_	
92-4	15072-15077	large	_	_	_	_	
92-5	15078-15090	uncompressed	_	_	_	_	
92-6	15091-15098	columns	_	_	_	_	
92-7	15099-15102	can	_	_	_	_	
92-8	15103-15107	have	_	_	_	_	
92-9	15108-15109	a	_	_	_	_	
92-10	15110-15113	big	_	_	_	_	
92-11	15114-15120	impact	_	_	_	_	
92-12	15121-15123	on	_	_	_	_	
92-13	15124-15128	your	_	_	_	_	
92-14	15129-15136	cluster	_	_	_	_	
92-15	15136-15137	.	_	_	_	_	

#Text=The compression analysis in Advisor tracks uncompressed storage allocated to permanent user tables.
93-1	15138-15141	The	_	_	_	_	
93-2	15142-15153	compression	_	_	_	_	
93-3	15154-15162	analysis	_	_	_	_	
93-4	15163-15165	in	_	_	_	_	
93-5	15166-15173	Advisor	_	_	_	_	
93-6	15174-15180	tracks	_	_	_	_	
93-7	15181-15193	uncompressed	_	_	_	_	
93-8	15194-15201	storage	_	_	_	_	
93-9	15202-15211	allocated	_	_	_	_	
93-10	15212-15214	to	_	_	_	_	
93-11	15215-15224	permanent	_	_	_	_	
93-12	15225-15229	user	_	_	_	_	
93-13	15230-15236	tables	_	_	_	_	
93-14	15236-15237	.	_	_	_	_	

#Text=It reviews storage metadata associated with large uncompressed columns that aren’t sort key columns.
94-1	15238-15240	It	_	_	_	_	
94-2	15241-15248	reviews	_	_	_	_	
94-3	15249-15256	storage	_	_	_	_	
94-4	15257-15265	metadata	_	_	_	_	
94-5	15266-15276	associated	_	_	_	_	
94-6	15277-15281	with	_	_	_	_	
94-7	15282-15287	large	_	_	_	_	
94-8	15288-15300	uncompressed	_	_	_	_	
94-9	15301-15308	columns	_	_	_	_	
94-10	15309-15313	that	_	_	_	_	
94-11	15314-15318	aren	_	_	_	_	
94-12	15318-15319	’	_	_	_	_	
94-13	15319-15320	t	_	_	_	_	
94-14	15321-15325	sort	_	_	_	_	
94-15	15326-15329	key	_	_	_	_	
94-16	15330-15337	columns	_	_	_	_	
94-17	15337-15338	.	_	_	_	_	

#Text=The following screenshot shows an example of table compression recommendation.
95-1	15339-15342	The	_	_	_	_	
95-2	15343-15352	following	_	_	_	_	
95-3	15353-15363	screenshot	_	_	_	_	
95-4	15364-15369	shows	_	_	_	_	
95-5	15370-15372	an	_	_	_	_	
95-6	15373-15380	example	_	_	_	_	
95-7	15381-15383	of	_	_	_	_	
95-8	15384-15389	table	_	_	_	_	
95-9	15390-15401	compression	_	_	_	_	
95-10	15402-15416	recommendation	_	_	_	_	
95-11	15416-15417	.	_	_	_	_	

#Text=Table statistics recommendation
#Text=Maintaining current statistics helps complex queries run in the shortest possible time.
96-1	15418-15423	Table	_	_	_	_	
96-2	15424-15434	statistics	_	_	_	_	
96-3	15435-15449	recommendation	_	_	_	_	
96-4	15450-15461	Maintaining	_	_	_	_	
96-5	15462-15469	current	_	_	_	_	
96-6	15470-15480	statistics	_	_	_	_	
96-7	15481-15486	helps	_	_	_	_	
96-8	15487-15494	complex	_	_	_	_	
96-9	15495-15502	queries	_	_	_	_	
96-10	15503-15506	run	_	_	_	_	
96-11	15507-15509	in	_	_	_	_	
96-12	15510-15513	the	_	_	_	_	
96-13	15514-15522	shortest	_	_	_	_	
96-14	15523-15531	possible	_	_	_	_	
96-15	15532-15536	time	_	_	_	_	
96-16	15536-15537	.	_	_	_	_	

#Text=The Advisor analysis tracks tables whose statistics are out-of-date or missing.
97-1	15538-15541	The	_	_	_	_	
97-2	15542-15549	Advisor	_	_	_	_	
97-3	15550-15558	analysis	_	_	_	_	
97-4	15559-15565	tracks	_	_	_	_	
97-5	15566-15572	tables	_	_	_	_	
97-6	15573-15578	whose	_	_	_	_	
97-7	15579-15589	statistics	_	_	_	_	
97-8	15590-15593	are	_	_	_	_	
97-9	15594-15605	out-of-date	_	_	_	_	
97-10	15606-15608	or	_	_	_	_	
97-11	15609-15616	missing	_	_	_	_	
97-12	15616-15617	.	_	_	_	_	

#Text=It reviews table access metadata associated with complex queries.
98-1	15618-15620	It	_	_	_	_	
98-2	15621-15628	reviews	_	_	_	_	
98-3	15629-15634	table	_	_	_	_	
98-4	15635-15641	access	_	_	_	_	
98-5	15642-15650	metadata	_	_	_	_	
98-6	15651-15661	associated	_	_	_	_	
98-7	15662-15666	with	_	_	_	_	
98-8	15667-15674	complex	_	_	_	_	
98-9	15675-15682	queries	_	_	_	_	
98-10	15682-15683	.	_	_	_	_	

#Text=If tables that are frequently accessed with complex patterns are missing statistics, Amazon Redshift Advisor creates a critical recommendation to run ANALYZE.
99-1	15684-15686	If	_	_	_	_	
99-2	15687-15693	tables	_	_	_	_	
99-3	15694-15698	that	_	_	_	_	
99-4	15699-15702	are	_	_	_	_	
99-5	15703-15713	frequently	_	_	_	_	
99-6	15714-15722	accessed	_	_	_	_	
99-7	15723-15727	with	_	_	_	_	
99-8	15728-15735	complex	_	_	_	_	
99-9	15736-15744	patterns	_	_	_	_	
99-10	15745-15748	are	_	_	_	_	
99-11	15749-15756	missing	_	_	_	_	
99-12	15757-15767	statistics	_	_	_	_	
99-13	15767-15768	,	_	_	_	_	
99-14	15769-15775	Amazon	_	_	_	_	
99-15	15776-15784	Redshift	_	_	_	_	
99-16	15785-15792	Advisor	_	_	_	_	
99-17	15793-15800	creates	_	_	_	_	
99-18	15801-15802	a	_	_	_	_	
99-19	15803-15811	critical	_	_	_	_	
99-20	15812-15826	recommendation	_	_	_	_	
99-21	15827-15829	to	_	_	_	_	
99-22	15830-15833	run	_	_	_	_	
99-23	15834-15841	ANALYZE	_	_	_	_	
99-24	15841-15842	.	_	_	_	_	

#Text=If tables that are frequently accessed with complex patterns have out-of-date statistics, Advisor creates a suggested recommendation to run ANALYZE.
100-1	15843-15845	If	_	_	_	_	
100-2	15846-15852	tables	_	_	_	_	
100-3	15853-15857	that	_	_	_	_	
100-4	15858-15861	are	_	_	_	_	
100-5	15862-15872	frequently	_	_	_	_	
100-6	15873-15881	accessed	_	_	_	_	
100-7	15882-15886	with	_	_	_	_	
100-8	15887-15894	complex	_	_	_	_	
100-9	15895-15903	patterns	_	_	_	_	
100-10	15904-15908	have	_	_	_	_	
100-11	15909-15920	out-of-date	_	_	_	_	
100-12	15921-15931	statistics	_	_	_	_	
100-13	15931-15932	,	_	_	_	_	
100-14	15933-15940	Advisor	_	_	_	_	
100-15	15941-15948	creates	_	_	_	_	
100-16	15949-15950	a	_	_	_	_	
100-17	15951-15960	suggested	_	_	_	_	
100-18	15961-15975	recommendation	_	_	_	_	
100-19	15976-15978	to	_	_	_	_	
100-20	15979-15982	run	_	_	_	_	
100-21	15983-15990	ANALYZE	_	_	_	_	
100-22	15990-15991	.	_	_	_	_	

#Text=The following screenshot shows a table statistics recommendation.
101-1	15992-15995	The	_	_	_	_	
101-2	15996-16005	following	_	_	_	_	
101-3	16006-16016	screenshot	_	_	_	_	
101-4	16017-16022	shows	_	_	_	_	
101-5	16023-16024	a	_	_	_	_	
101-6	16025-16030	table	_	_	_	_	
101-7	16031-16041	statistics	_	_	_	_	
101-8	16042-16056	recommendation	_	_	_	_	
101-9	16056-16057	.	_	_	_	_	

#Text=Tip #4: Using Auto WLM with priorities to increase throughput
#Text=Auto WLM simplifies workload management and maximizes query throughput by using ML to dynamically manage memory and concurrency, which ensures optimal utilization of the cluster resources
#Text=Amazon Redshift runs queries using the queuing system (WLM).
102-1	16058-16061	Tip	_	_	_	_	
102-2	16062-16064	#4	_	_	_	_	
102-3	16064-16065	:	_	_	_	_	
102-4	16066-16071	Using	_	_	_	_	
102-5	16072-16076	Auto	_	_	_	_	
102-6	16077-16080	WLM	_	_	_	_	
102-7	16081-16085	with	_	_	_	_	
102-8	16086-16096	priorities	_	_	_	_	
102-9	16097-16099	to	_	_	_	_	
102-10	16100-16108	increase	_	_	_	_	
102-11	16109-16119	throughput	_	_	_	_	
102-12	16120-16124	Auto	_	_	_	_	
102-13	16125-16128	WLM	_	_	_	_	
102-14	16129-16139	simplifies	_	_	_	_	
102-15	16140-16148	workload	_	_	_	_	
102-16	16149-16159	management	_	_	_	_	
102-17	16160-16163	and	_	_	_	_	
102-18	16164-16173	maximizes	_	_	_	_	
102-19	16174-16179	query	_	_	_	_	
102-20	16180-16190	throughput	_	_	_	_	
102-21	16191-16193	by	_	_	_	_	
102-22	16194-16199	using	_	_	_	_	
102-23	16200-16202	ML	_	_	_	_	
102-24	16203-16205	to	_	_	_	_	
102-25	16206-16217	dynamically	_	_	_	_	
102-26	16218-16224	manage	_	_	_	_	
102-27	16225-16231	memory	_	_	_	_	
102-28	16232-16235	and	_	_	_	_	
102-29	16236-16247	concurrency	_	_	_	_	
102-30	16247-16248	,	_	_	_	_	
102-31	16249-16254	which	_	_	_	_	
102-32	16255-16262	ensures	_	_	_	_	
102-33	16263-16270	optimal	_	_	_	_	
102-34	16271-16282	utilization	_	_	_	_	
102-35	16283-16285	of	_	_	_	_	
102-36	16286-16289	the	_	_	_	_	
102-37	16290-16297	cluster	_	_	_	_	
102-38	16298-16307	resources	_	_	_	_	
102-39	16308-16314	Amazon	_	_	_	_	
102-40	16315-16323	Redshift	_	_	_	_	
102-41	16324-16328	runs	_	_	_	_	
102-42	16329-16336	queries	_	_	_	_	
102-43	16337-16342	using	_	_	_	_	
102-44	16343-16346	the	_	_	_	_	
102-45	16347-16354	queuing	_	_	_	_	
102-46	16355-16361	system	_	_	_	_	
102-47	16362-16363	(	_	_	_	_	
102-48	16363-16366	WLM	_	_	_	_	
102-49	16366-16367	)	_	_	_	_	
102-50	16367-16368	.	_	_	_	_	

#Text=You can define up to eight queues to separate workloads from each other.
103-1	16369-16372	You	_	_	_	_	
103-2	16373-16376	can	_	_	_	_	
103-3	16377-16383	define	_	_	_	_	
103-4	16384-16386	up	_	_	_	_	
103-5	16387-16389	to	_	_	_	_	
103-6	16390-16395	eight	_	_	_	_	
103-7	16396-16402	queues	_	_	_	_	
103-8	16403-16405	to	_	_	_	_	
103-9	16406-16414	separate	_	_	_	_	
103-10	16415-16424	workloads	_	_	_	_	
103-11	16425-16429	from	_	_	_	_	
103-12	16430-16434	each	_	_	_	_	
103-13	16435-16440	other	_	_	_	_	
103-14	16440-16441	.	_	_	_	_	

#Text=Amazon Redshift Advisor automatically analyzes the current WLM usage and can make recommendations to get more throughput from your cluster.
104-1	16442-16448	Amazon	_	_	_	_	
104-2	16449-16457	Redshift	_	_	_	_	
104-3	16458-16465	Advisor	_	_	_	_	
104-4	16466-16479	automatically	_	_	_	_	
104-5	16480-16488	analyzes	_	_	_	_	
104-6	16489-16492	the	_	_	_	_	
104-7	16493-16500	current	_	_	_	_	
104-8	16501-16504	WLM	_	_	_	_	
104-9	16505-16510	usage	_	_	_	_	
104-10	16511-16514	and	_	_	_	_	
104-11	16515-16518	can	_	_	_	_	
104-12	16519-16523	make	_	_	_	_	
104-13	16524-16539	recommendations	_	_	_	_	
104-14	16540-16542	to	_	_	_	_	
104-15	16543-16546	get	_	_	_	_	
104-16	16547-16551	more	_	_	_	_	
104-17	16552-16562	throughput	_	_	_	_	
104-18	16563-16567	from	_	_	_	_	
104-19	16568-16572	your	_	_	_	_	
104-20	16573-16580	cluster	_	_	_	_	
104-21	16580-16581	.	_	_	_	_	

#Text=Periodically reviewing the suggestions from Advisor helps you get the best performance.
105-1	16582-16594	Periodically	_	_	_	_	
105-2	16595-16604	reviewing	_	_	_	_	
105-3	16605-16608	the	_	_	_	_	
105-4	16609-16620	suggestions	_	_	_	_	
105-5	16621-16625	from	_	_	_	_	
105-6	16626-16633	Advisor	_	_	_	_	
105-7	16634-16639	helps	_	_	_	_	
105-8	16640-16643	you	_	_	_	_	
105-9	16644-16647	get	_	_	_	_	
105-10	16648-16651	the	_	_	_	_	
105-11	16652-16656	best	_	_	_	_	
105-12	16657-16668	performance	_	_	_	_	
105-13	16668-16669	.	_	_	_	_	

#Text=Query priorities is a feature of Auto WLM that lets you assign priority ranks to different user groups or query groups, to ensure that higher priority workloads get more resources for consistent query performance, even during busy times.
106-1	16670-16675	Query	_	_	_	_	
106-2	16676-16686	priorities	_	_	_	_	
106-3	16687-16689	is	_	_	_	_	
106-4	16690-16691	a	_	_	_	_	
106-5	16692-16699	feature	_	_	_	_	
106-6	16700-16702	of	_	_	_	_	
106-7	16703-16707	Auto	_	_	_	_	
106-8	16708-16711	WLM	_	_	_	_	
106-9	16712-16716	that	_	_	_	_	
106-10	16717-16721	lets	_	_	_	_	
106-11	16722-16725	you	_	_	_	_	
106-12	16726-16732	assign	_	_	_	_	
106-13	16733-16741	priority	_	_	_	_	
106-14	16742-16747	ranks	_	_	_	_	
106-15	16748-16750	to	_	_	_	_	
106-16	16751-16760	different	_	_	_	_	
106-17	16761-16765	user	_	_	_	_	
106-18	16766-16772	groups	_	_	_	_	
106-19	16773-16775	or	_	_	_	_	
106-20	16776-16781	query	_	_	_	_	
106-21	16782-16788	groups	_	_	_	_	
106-22	16788-16789	,	_	_	_	_	
106-23	16790-16792	to	_	_	_	_	
106-24	16793-16799	ensure	_	_	_	_	
106-25	16800-16804	that	_	_	_	_	
106-26	16805-16811	higher	_	_	_	_	
106-27	16812-16820	priority	_	_	_	_	
106-28	16821-16830	workloads	_	_	_	_	
106-29	16831-16834	get	_	_	_	_	
106-30	16835-16839	more	_	_	_	_	
106-31	16840-16849	resources	_	_	_	_	
106-32	16850-16853	for	_	_	_	_	
106-33	16854-16864	consistent	_	_	_	_	
106-34	16865-16870	query	_	_	_	_	
106-35	16871-16882	performance	_	_	_	_	
106-36	16882-16883	,	_	_	_	_	
106-37	16884-16888	even	_	_	_	_	
106-38	16889-16895	during	_	_	_	_	
106-39	16896-16900	busy	_	_	_	_	
106-40	16901-16906	times	_	_	_	_	
106-41	16906-16907	.	_	_	_	_	

#Text=It is a good practice to set up query monitoring rules (QMR) to monitor and manage resource intensive or runaway queries.
107-1	16908-16910	It	_	_	_	_	
107-2	16911-16913	is	_	_	_	_	
107-3	16914-16915	a	_	_	_	_	
107-4	16916-16920	good	_	_	_	_	
107-5	16921-16929	practice	_	_	_	_	
107-6	16930-16932	to	_	_	_	_	
107-7	16933-16936	set	_	_	_	_	
107-8	16937-16939	up	_	_	_	_	
107-9	16939-16940	 	_	_	_	_	
107-10	16940-16945	query	_	_	_	_	
107-11	16946-16956	monitoring	_	_	_	_	
107-12	16957-16962	rules	_	_	_	_	
107-13	16963-16964	(	_	_	_	_	
107-14	16964-16967	QMR	_	_	_	_	
107-15	16967-16968	)	_	_	_	_	
107-16	16969-16971	to	_	_	_	_	
107-17	16972-16979	monitor	_	_	_	_	
107-18	16980-16983	and	_	_	_	_	
107-19	16984-16990	manage	_	_	_	_	
107-20	16991-16999	resource	_	_	_	_	
107-21	17000-17009	intensive	_	_	_	_	
107-22	17010-17012	or	_	_	_	_	
107-23	17013-17020	runaway	_	_	_	_	
107-24	17021-17028	queries	_	_	_	_	
107-25	17028-17029	.	_	_	_	_	

#Text=QMR also enables you to dynamically change a query’s priority based on its runtime performance and metrics-based rules you define.
108-1	17030-17033	QMR	_	_	_	_	
108-2	17034-17038	also	_	_	_	_	
108-3	17039-17046	enables	_	_	_	_	
108-4	17047-17050	you	_	_	_	_	
108-5	17051-17053	to	_	_	_	_	
108-6	17054-17065	dynamically	_	_	_	_	
108-7	17066-17072	change	_	_	_	_	
108-8	17073-17074	a	_	_	_	_	
108-9	17075-17080	query	_	_	_	_	
108-10	17080-17081	’	_	_	_	_	
108-11	17081-17082	s	_	_	_	_	
108-12	17083-17091	priority	_	_	_	_	
108-13	17092-17097	based	_	_	_	_	
108-14	17098-17100	on	_	_	_	_	
108-15	17101-17104	its	_	_	_	_	
108-16	17105-17112	runtime	_	_	_	_	
108-17	17113-17124	performance	_	_	_	_	
108-18	17125-17128	and	_	_	_	_	
108-19	17129-17142	metrics-based	_	_	_	_	
108-20	17143-17148	rules	_	_	_	_	
108-21	17149-17152	you	_	_	_	_	
108-22	17153-17159	define	_	_	_	_	
108-23	17159-17160	.	_	_	_	_	

#Text=For more information on migrating from manual to automatic WLM with query priorities, see Modifying the WLM configuration.
109-1	17161-17164	For	_	_	_	_	
109-2	17165-17169	more	_	_	_	_	
109-3	17170-17181	information	_	_	_	_	
109-4	17182-17184	on	_	_	_	_	
109-5	17185-17194	migrating	_	_	_	_	
109-6	17195-17199	from	_	_	_	_	
109-7	17200-17206	manual	_	_	_	_	
109-8	17207-17209	to	_	_	_	_	
109-9	17210-17219	automatic	_	_	_	_	
109-10	17220-17223	WLM	_	_	_	_	
109-11	17224-17228	with	_	_	_	_	
109-12	17229-17234	query	_	_	_	_	
109-13	17235-17245	priorities	_	_	_	_	
109-14	17245-17246	,	_	_	_	_	
109-15	17247-17250	see	_	_	_	_	
109-16	17251-17260	Modifying	_	_	_	_	
109-17	17261-17264	the	_	_	_	_	
109-18	17265-17268	WLM	_	_	_	_	
109-19	17269-17282	configuration	_	_	_	_	
109-20	17282-17283	.	_	_	_	_	

#Text=It’s recommended to take advantage of Amazon Redshift’s short query acceleration (SQA).
110-1	17284-17286	It	_	_	_	_	
110-2	17286-17287	’	_	_	_	_	
110-3	17287-17288	s	_	_	_	_	
110-4	17289-17300	recommended	_	_	_	_	
110-5	17301-17303	to	_	_	_	_	
110-6	17304-17308	take	_	_	_	_	
110-7	17309-17318	advantage	_	_	_	_	
110-8	17319-17321	of	_	_	_	_	
110-9	17322-17328	Amazon	_	_	_	_	
110-10	17329-17337	Redshift	_	_	_	_	
110-11	17337-17338	’	_	_	_	_	
110-12	17338-17339	s	_	_	_	_	
110-13	17340-17345	short	_	_	_	_	
110-14	17346-17351	query	_	_	_	_	
110-15	17352-17364	acceleration	_	_	_	_	
110-16	17365-17366	(	_	_	_	_	
110-17	17366-17369	SQA	_	_	_	_	
110-18	17369-17370	)	_	_	_	_	
110-19	17370-17371	.	_	_	_	_	

#Text=SQA uses ML to run short-running jobs in their own queue.
111-1	17372-17375	SQA	_	_	_	_	
111-2	17376-17380	uses	_	_	_	_	
111-3	17381-17383	ML	_	_	_	_	
111-4	17384-17386	to	_	_	_	_	
111-5	17387-17390	run	_	_	_	_	
111-6	17391-17404	short-running	_	_	_	_	
111-7	17405-17409	jobs	_	_	_	_	
111-8	17410-17412	in	_	_	_	_	
111-9	17413-17418	their	_	_	_	_	
111-10	17419-17422	own	_	_	_	_	
111-11	17423-17428	queue	_	_	_	_	
111-12	17428-17429	.	_	_	_	_	

#Text=This keeps small jobs processing, rather than waiting behind longer-running SQL statements.
112-1	17430-17434	This	_	_	_	_	
112-2	17435-17440	keeps	_	_	_	_	
112-3	17441-17446	small	_	_	_	_	
112-4	17447-17451	jobs	_	_	_	_	
112-5	17452-17462	processing	_	_	_	_	
112-6	17462-17463	,	_	_	_	_	
112-7	17464-17470	rather	_	_	_	_	
112-8	17471-17475	than	_	_	_	_	
112-9	17476-17483	waiting	_	_	_	_	
112-10	17484-17490	behind	_	_	_	_	
112-11	17491-17505	longer-running	_	_	_	_	
112-12	17506-17509	SQL	_	_	_	_	
112-13	17510-17520	statements	_	_	_	_	
112-14	17520-17521	.	_	_	_	_	

#Text=SQA is enabled by default in the default parameter group and for all new parameter groups. 
113-1	17522-17525	SQA	_	_	_	_	
113-2	17526-17528	is	_	_	_	_	
113-3	17529-17536	enabled	_	_	_	_	
113-4	17537-17539	by	_	_	_	_	
113-5	17540-17547	default	_	_	_	_	
113-6	17548-17550	in	_	_	_	_	
113-7	17551-17554	the	_	_	_	_	
113-8	17555-17562	default	_	_	_	_	
113-9	17563-17572	parameter	_	_	_	_	
113-10	17573-17578	group	_	_	_	_	
113-11	17579-17582	and	_	_	_	_	
113-12	17583-17586	for	_	_	_	_	
113-13	17587-17590	all	_	_	_	_	
113-14	17591-17594	new	_	_	_	_	
113-15	17595-17604	parameter	_	_	_	_	
113-16	17605-17611	groups	_	_	_	_	
113-17	17611-17612	.	_	_	_	_	
113-18	17612-17613	 	_	_	_	_	

#Text=You can enable and disable SQA via a check box on the Amazon Redshift console, or by using the Amazon Redshift CLI.
114-1	17613-17616	You	_	_	_	_	
114-2	17617-17620	can	_	_	_	_	
114-3	17621-17627	enable	_	_	_	_	
114-4	17628-17631	and	_	_	_	_	
114-5	17632-17639	disable	_	_	_	_	
114-6	17640-17643	SQA	_	_	_	_	
114-7	17644-17647	via	_	_	_	_	
114-8	17648-17649	a	_	_	_	_	
114-9	17650-17655	check	_	_	_	_	
114-10	17656-17659	box	_	_	_	_	
114-11	17660-17662	on	_	_	_	_	
114-12	17663-17666	the	_	_	_	_	
114-13	17667-17673	Amazon	_	_	_	_	
114-14	17674-17682	Redshift	_	_	_	_	
114-15	17683-17690	console	_	_	_	_	
114-16	17690-17691	,	_	_	_	_	
114-17	17692-17694	or	_	_	_	_	
114-18	17695-17697	by	_	_	_	_	
114-19	17698-17703	using	_	_	_	_	
114-20	17704-17707	the	_	_	_	_	
114-21	17708-17714	Amazon	_	_	_	_	
114-22	17715-17723	Redshift	_	_	_	_	
114-23	17724-17727	CLI	_	_	_	_	
114-24	17727-17728	.	_	_	_	_	

#Text=If you enable concurrency scaling, Amazon Redshift can automatically and quickly provision additional clusters should your workload begin to back up.
115-1	17729-17731	If	_	_	_	_	
115-2	17732-17735	you	_	_	_	_	
115-3	17736-17742	enable	_	_	_	_	
115-4	17743-17754	concurrency	_	_	_	_	
115-5	17755-17762	scaling	_	_	_	_	
115-6	17762-17763	,	_	_	_	_	
115-7	17764-17770	Amazon	_	_	_	_	
115-8	17771-17779	Redshift	_	_	_	_	
115-9	17780-17783	can	_	_	_	_	
115-10	17784-17797	automatically	_	_	_	_	
115-11	17798-17801	and	_	_	_	_	
115-12	17802-17809	quickly	_	_	_	_	
115-13	17810-17819	provision	_	_	_	_	
115-14	17820-17830	additional	_	_	_	_	
115-15	17831-17839	clusters	_	_	_	_	
115-16	17840-17846	should	_	_	_	_	
115-17	17847-17851	your	_	_	_	_	
115-18	17852-17860	workload	_	_	_	_	
115-19	17861-17866	begin	_	_	_	_	
115-20	17867-17869	to	_	_	_	_	
115-21	17870-17874	back	_	_	_	_	
115-22	17875-17877	up	_	_	_	_	
115-23	17877-17878	.	_	_	_	_	

#Text=This is an important consideration when deciding the cluster’s WLM configuration.
116-1	17879-17883	This	_	_	_	_	
116-2	17884-17886	is	_	_	_	_	
116-3	17887-17889	an	_	_	_	_	
116-4	17890-17899	important	_	_	_	_	
116-5	17900-17913	consideration	_	_	_	_	
116-6	17914-17918	when	_	_	_	_	
116-7	17919-17927	deciding	_	_	_	_	
116-8	17928-17931	the	_	_	_	_	
116-9	17932-17939	cluster	_	_	_	_	
116-10	17939-17940	’	_	_	_	_	
116-11	17940-17941	s	_	_	_	_	
116-12	17942-17945	WLM	_	_	_	_	
116-13	17946-17959	configuration	_	_	_	_	
116-14	17959-17960	.	_	_	_	_	

#Text=A common pattern is to optimize the WLM configuration to run most SQL statements without the assistance of supplemental memory, reserving additional processing power for short jobs.
117-1	17961-17962	A	_	_	_	_	
117-2	17963-17969	common	_	_	_	_	
117-3	17970-17977	pattern	_	_	_	_	
117-4	17978-17980	is	_	_	_	_	
117-5	17981-17983	to	_	_	_	_	
117-6	17984-17992	optimize	_	_	_	_	
117-7	17993-17996	the	_	_	_	_	
117-8	17997-18000	WLM	_	_	_	_	
117-9	18001-18014	configuration	_	_	_	_	
117-10	18015-18017	to	_	_	_	_	
117-11	18018-18021	run	_	_	_	_	
117-12	18022-18026	most	_	_	_	_	
117-13	18027-18030	SQL	_	_	_	_	
117-14	18031-18041	statements	_	_	_	_	
117-15	18042-18049	without	_	_	_	_	
117-16	18050-18053	the	_	_	_	_	
117-17	18054-18064	assistance	_	_	_	_	
117-18	18065-18067	of	_	_	_	_	
117-19	18068-18080	supplemental	_	_	_	_	
117-20	18081-18087	memory	_	_	_	_	
117-21	18087-18088	,	_	_	_	_	
117-22	18089-18098	reserving	_	_	_	_	
117-23	18099-18109	additional	_	_	_	_	
117-24	18110-18120	processing	_	_	_	_	
117-25	18121-18126	power	_	_	_	_	
117-26	18127-18130	for	_	_	_	_	
117-27	18131-18136	short	_	_	_	_	
117-28	18137-18141	jobs	_	_	_	_	
117-29	18141-18142	.	_	_	_	_	

#Text=Some queueing is acceptable because additional clusters spin up if your needs suddenly expand.
118-1	18143-18147	Some	_	_	_	_	
118-2	18148-18156	queueing	_	_	_	_	
118-3	18157-18159	is	_	_	_	_	
118-4	18160-18170	acceptable	_	_	_	_	
118-5	18171-18178	because	_	_	_	_	
118-6	18179-18189	additional	_	_	_	_	
118-7	18190-18198	clusters	_	_	_	_	
118-8	18199-18203	spin	_	_	_	_	
118-9	18204-18206	up	_	_	_	_	
118-10	18207-18209	if	_	_	_	_	
118-11	18210-18214	your	_	_	_	_	
118-12	18215-18220	needs	_	_	_	_	
118-13	18221-18229	suddenly	_	_	_	_	
118-14	18230-18236	expand	_	_	_	_	
118-15	18236-18237	.	_	_	_	_	

#Text=To enable concurrency scaling on a WLM queue, set the concurrency scaling mode value to AUTO.
119-1	18238-18240	To	_	_	_	_	
119-2	18241-18247	enable	_	_	_	_	
119-3	18248-18259	concurrency	_	_	_	_	
119-4	18260-18267	scaling	_	_	_	_	
119-5	18268-18270	on	_	_	_	_	
119-6	18271-18272	a	_	_	_	_	
119-7	18273-18276	WLM	_	_	_	_	
119-8	18277-18282	queue	_	_	_	_	
119-9	18282-18283	,	_	_	_	_	
119-10	18284-18287	set	_	_	_	_	
119-11	18288-18291	the	_	_	_	_	
119-12	18292-18303	concurrency	_	_	_	_	
119-13	18304-18311	scaling	_	_	_	_	
119-14	18312-18316	mode	_	_	_	_	
119-15	18317-18322	value	_	_	_	_	
119-16	18323-18325	to	_	_	_	_	
119-17	18326-18330	AUTO	_	_	_	_	
119-18	18330-18331	.	_	_	_	_	

#Text=You can best inform your decisions by reviewing the concurrency scaling billing model. 
120-1	18332-18335	You	_	_	_	_	
120-2	18336-18339	can	_	_	_	_	
120-3	18340-18344	best	_	_	_	_	
120-4	18345-18351	inform	_	_	_	_	
120-5	18352-18356	your	_	_	_	_	
120-6	18357-18366	decisions	_	_	_	_	
120-7	18367-18369	by	_	_	_	_	
120-8	18370-18379	reviewing	_	_	_	_	
120-9	18380-18383	the	_	_	_	_	
120-10	18384-18395	concurrency	_	_	_	_	
120-11	18396-18403	scaling	_	_	_	_	
120-12	18404-18411	billing	_	_	_	_	
120-13	18412-18417	model	_	_	_	_	
120-14	18417-18418	.	_	_	_	_	
120-15	18418-18419	 	_	_	_	_	

#Text=You can also monitor and control the concurrency scaling usage and cost by using the Amazon Redshift usage limit feature.
121-1	18419-18422	You	_	_	_	_	
121-2	18423-18426	can	_	_	_	_	
121-3	18427-18431	also	_	_	_	_	
121-4	18432-18439	monitor	_	_	_	_	
121-5	18440-18443	and	_	_	_	_	
121-6	18444-18451	control	_	_	_	_	
121-7	18452-18455	the	_	_	_	_	
121-8	18456-18467	concurrency	_	_	_	_	
121-9	18468-18475	scaling	_	_	_	_	
121-10	18476-18481	usage	_	_	_	_	
121-11	18482-18485	and	_	_	_	_	
121-12	18486-18490	cost	_	_	_	_	
121-13	18491-18493	by	_	_	_	_	
121-14	18494-18499	using	_	_	_	_	
121-15	18500-18503	the	_	_	_	_	
121-16	18504-18510	Amazon	_	_	_	_	
121-17	18511-18519	Redshift	_	_	_	_	
121-18	18520-18525	usage	_	_	_	_	
121-19	18526-18531	limit	_	_	_	_	
121-20	18532-18539	feature	_	_	_	_	
121-21	18539-18540	.	_	_	_	_	

#Text=In some cases, unless you enable concurrency scaling for the queue, the user or query’s assigned queue may be busy, and you must wait for a queue slot to open.
122-1	18541-18543	In	_	_	_	_	
122-2	18544-18548	some	_	_	_	_	
122-3	18549-18554	cases	_	_	_	_	
122-4	18554-18555	,	_	_	_	_	
122-5	18556-18562	unless	_	_	_	_	
122-6	18563-18566	you	_	_	_	_	
122-7	18567-18573	enable	_	_	_	_	
122-8	18574-18585	concurrency	_	_	_	_	
122-9	18586-18593	scaling	_	_	_	_	
122-10	18594-18597	for	_	_	_	_	
122-11	18598-18601	the	_	_	_	_	
122-12	18602-18607	queue	_	_	_	_	
122-13	18607-18608	,	_	_	_	_	
122-14	18609-18612	the	_	_	_	_	
122-15	18613-18617	user	_	_	_	_	
122-16	18618-18620	or	_	_	_	_	
122-17	18621-18626	query	_	_	_	_	
122-18	18626-18627	’	_	_	_	_	
122-19	18627-18628	s	_	_	_	_	
122-20	18629-18637	assigned	_	_	_	_	
122-21	18638-18643	queue	_	_	_	_	
122-22	18644-18647	may	_	_	_	_	
122-23	18648-18650	be	_	_	_	_	
122-24	18651-18655	busy	_	_	_	_	
122-25	18655-18656	,	_	_	_	_	
122-26	18657-18660	and	_	_	_	_	
122-27	18661-18664	you	_	_	_	_	
122-28	18665-18669	must	_	_	_	_	
122-29	18670-18674	wait	_	_	_	_	
122-30	18675-18678	for	_	_	_	_	
122-31	18679-18680	a	_	_	_	_	
122-32	18681-18686	queue	_	_	_	_	
122-33	18687-18691	slot	_	_	_	_	
122-34	18692-18694	to	_	_	_	_	
122-35	18695-18699	open	_	_	_	_	
122-36	18699-18700	.	_	_	_	_	

#Text=During this time, the system isn’t running the query at all.
123-1	18701-18707	During	_	_	_	_	
123-2	18708-18712	this	_	_	_	_	
123-3	18713-18717	time	_	_	_	_	
123-4	18717-18718	,	_	_	_	_	
123-5	18719-18722	the	_	_	_	_	
123-6	18723-18729	system	_	_	_	_	
123-7	18730-18733	isn	_	_	_	_	
123-8	18733-18734	’	_	_	_	_	
123-9	18734-18735	t	_	_	_	_	
123-10	18736-18743	running	_	_	_	_	
123-11	18744-18747	the	_	_	_	_	
123-12	18748-18753	query	_	_	_	_	
123-13	18754-18756	at	_	_	_	_	
123-14	18757-18760	all	_	_	_	_	
123-15	18760-18761	.	_	_	_	_	

#Text=If this becomes a frequent problem, you may have to increase concurrency.
124-1	18762-18764	If	_	_	_	_	
124-2	18765-18769	this	_	_	_	_	
124-3	18770-18777	becomes	_	_	_	_	
124-4	18778-18779	a	_	_	_	_	
124-5	18780-18788	frequent	_	_	_	_	
124-6	18789-18796	problem	_	_	_	_	
124-7	18796-18797	,	_	_	_	_	
124-8	18798-18801	you	_	_	_	_	
124-9	18802-18805	may	_	_	_	_	
124-10	18806-18810	have	_	_	_	_	
124-11	18811-18813	to	_	_	_	_	
124-12	18814-18822	increase	_	_	_	_	
124-13	18823-18834	concurrency	_	_	_	_	
124-14	18834-18835	.	_	_	_	_	

#Text=First, determine if any queries are queuing, using the queuing_queries.sql admin script.
125-1	18836-18841	First	_	_	_	_	
125-2	18841-18842	,	_	_	_	_	
125-3	18843-18852	determine	_	_	_	_	
125-4	18853-18855	if	_	_	_	_	
125-5	18856-18859	any	_	_	_	_	
125-6	18860-18867	queries	_	_	_	_	
125-7	18868-18871	are	_	_	_	_	
125-8	18872-18879	queuing	_	_	_	_	
125-9	18879-18880	,	_	_	_	_	
125-10	18881-18886	using	_	_	_	_	
125-11	18887-18890	the	_	_	_	_	
125-12	18891-18910	queuing_queries.sql	_	_	_	_	
125-13	18911-18916	admin	_	_	_	_	
125-14	18917-18923	script	_	_	_	_	
125-15	18923-18924	.	_	_	_	_	

#Text=Review the maximum concurrency that your cluster needed in the past with wlm_apex.sql, or get an hour-by-hour historical analysis with wlm_apex_hourly.sql.
126-1	18925-18931	Review	_	_	_	_	
126-2	18932-18935	the	_	_	_	_	
126-3	18936-18943	maximum	_	_	_	_	
126-4	18944-18955	concurrency	_	_	_	_	
126-5	18956-18960	that	_	_	_	_	
126-6	18961-18965	your	_	_	_	_	
126-7	18966-18973	cluster	_	_	_	_	
126-8	18974-18980	needed	_	_	_	_	
126-9	18981-18983	in	_	_	_	_	
126-10	18984-18987	the	_	_	_	_	
126-11	18988-18992	past	_	_	_	_	
126-12	18993-18997	with	_	_	_	_	
126-13	18998-19010	wlm_apex.sql	_	_	_	_	
126-14	19010-19011	,	_	_	_	_	
126-15	19012-19014	or	_	_	_	_	
126-16	19015-19018	get	_	_	_	_	
126-17	19019-19021	an	_	_	_	_	
126-18	19022-19034	hour-by-hour	_	_	_	_	
126-19	19035-19045	historical	_	_	_	_	
126-20	19046-19054	analysis	_	_	_	_	
126-21	19055-19059	with	_	_	_	_	
126-22	19060-19079	wlm_apex_hourly.sql	_	_	_	_	
126-23	19079-19080	.	_	_	_	_	

#Text=Keep in mind that increasing concurrency allows more queries to run, but each query gets a smaller share of the memory.
127-1	19081-19085	Keep	_	_	_	_	
127-2	19086-19088	in	_	_	_	_	
127-3	19089-19093	mind	_	_	_	_	
127-4	19094-19098	that	_	_	_	_	
127-5	19099-19109	increasing	_	_	_	_	
127-6	19110-19121	concurrency	_	_	_	_	
127-7	19122-19128	allows	_	_	_	_	
127-8	19129-19133	more	_	_	_	_	
127-9	19134-19141	queries	_	_	_	_	
127-10	19142-19144	to	_	_	_	_	
127-11	19145-19148	run	_	_	_	_	
127-12	19148-19149	,	_	_	_	_	
127-13	19150-19153	but	_	_	_	_	
127-14	19154-19158	each	_	_	_	_	
127-15	19159-19164	query	_	_	_	_	
127-16	19165-19169	gets	_	_	_	_	
127-17	19170-19171	a	_	_	_	_	
127-18	19172-19179	smaller	_	_	_	_	
127-19	19180-19185	share	_	_	_	_	
127-20	19186-19188	of	_	_	_	_	
127-21	19189-19192	the	_	_	_	_	
127-22	19193-19199	memory	_	_	_	_	
127-23	19199-19200	.	_	_	_	_	

#Text=You may find that by increasing concurrency, some queries must use temporary disk storage to complete, which is also sub-optimal.
128-1	19201-19204	You	_	_	_	_	
128-2	19205-19208	may	_	_	_	_	
128-3	19209-19213	find	_	_	_	_	
128-4	19214-19218	that	_	_	_	_	
128-5	19219-19221	by	_	_	_	_	
128-6	19222-19232	increasing	_	_	_	_	
128-7	19233-19244	concurrency	_	_	_	_	
128-8	19244-19245	,	_	_	_	_	
128-9	19246-19250	some	_	_	_	_	
128-10	19251-19258	queries	_	_	_	_	
128-11	19259-19263	must	_	_	_	_	
128-12	19264-19267	use	_	_	_	_	
128-13	19268-19277	temporary	_	_	_	_	
128-14	19278-19282	disk	_	_	_	_	
128-15	19283-19290	storage	_	_	_	_	
128-16	19291-19293	to	_	_	_	_	
128-17	19294-19302	complete	_	_	_	_	
128-18	19302-19303	,	_	_	_	_	
128-19	19304-19309	which	_	_	_	_	
128-20	19310-19312	is	_	_	_	_	
128-21	19313-19317	also	_	_	_	_	
128-22	19318-19329	sub-optimal	_	_	_	_	
128-23	19329-19330	.	_	_	_	_	

#Text=Tip #5: Taking advantage of Amazon Redshift data lake integration
#Text=Amazon Redshift is tightly integrated with other AWS-native services such as Amazon S3 which let’s the Amazon Redshift cluster interact with the data lake in several useful ways.
129-1	19331-19334	Tip	_	_	_	_	
129-2	19335-19337	#5	_	_	_	_	
129-3	19337-19338	:	_	_	_	_	
129-4	19339-19345	Taking	_	_	_	_	
129-5	19346-19355	advantage	_	_	_	_	
129-6	19356-19358	of	_	_	_	_	
129-7	19359-19365	Amazon	_	_	_	_	
129-8	19366-19374	Redshift	_	_	_	_	
129-9	19375-19379	data	_	_	_	_	
129-10	19380-19384	lake	_	_	_	_	
129-11	19385-19396	integration	_	_	_	_	
129-12	19397-19403	Amazon	_	_	_	_	
129-13	19404-19412	Redshift	_	_	_	_	
129-14	19413-19415	is	_	_	_	_	
129-15	19416-19423	tightly	_	_	_	_	
129-16	19424-19434	integrated	_	_	_	_	
129-17	19435-19439	with	_	_	_	_	
129-18	19440-19445	other	_	_	_	_	
129-19	19446-19456	AWS-native	_	_	_	_	
129-20	19457-19465	services	_	_	_	_	
129-21	19466-19470	such	_	_	_	_	
129-22	19471-19473	as	_	_	_	_	
129-23	19474-19480	Amazon	_	_	_	_	
129-24	19481-19483	S3	_	_	_	_	
129-25	19484-19489	which	_	_	_	_	
129-26	19490-19493	let	_	_	_	_	
129-27	19493-19494	’	_	_	_	_	
129-28	19494-19495	s	_	_	_	_	
129-29	19496-19499	the	_	_	_	_	
129-30	19500-19506	Amazon	_	_	_	_	
129-31	19507-19515	Redshift	_	_	_	_	
129-32	19516-19523	cluster	_	_	_	_	
129-33	19524-19532	interact	_	_	_	_	
129-34	19533-19537	with	_	_	_	_	
129-35	19538-19541	the	_	_	_	_	
129-36	19542-19546	data	_	_	_	_	
129-37	19547-19551	lake	_	_	_	_	
129-38	19552-19554	in	_	_	_	_	
129-39	19555-19562	several	_	_	_	_	
129-40	19563-19569	useful	_	_	_	_	
129-41	19570-19574	ways	_	_	_	_	
129-42	19574-19575	.	_	_	_	_	

#Text=Amazon Redshift Spectrum lets you query data directly from files on Amazon S3 through an independent, elastically sized compute layer.
130-1	19576-19582	Amazon	_	_	_	_	
130-2	19583-19591	Redshift	_	_	_	_	
130-3	19592-19600	Spectrum	_	_	_	_	
130-4	19601-19605	lets	_	_	_	_	
130-5	19606-19609	you	_	_	_	_	
130-6	19610-19615	query	_	_	_	_	
130-7	19616-19620	data	_	_	_	_	
130-8	19621-19629	directly	_	_	_	_	
130-9	19630-19634	from	_	_	_	_	
130-10	19635-19640	files	_	_	_	_	
130-11	19641-19643	on	_	_	_	_	
130-12	19644-19650	Amazon	_	_	_	_	
130-13	19651-19653	S3	_	_	_	_	
130-14	19654-19661	through	_	_	_	_	
130-15	19662-19664	an	_	_	_	_	
130-16	19665-19676	independent	_	_	_	_	
130-17	19676-19677	,	_	_	_	_	
130-18	19678-19689	elastically	_	_	_	_	
130-19	19690-19695	sized	_	_	_	_	
130-20	19696-19703	compute	_	_	_	_	
130-21	19704-19709	layer	_	_	_	_	
130-22	19709-19710	.	_	_	_	_	

#Text=Use these patterns independently or apply them together to offload work to the Amazon Redshift Spectrum compute layer, quickly create a transformed or aggregated dataset, or eliminate entire steps in a traditional ETL process.
131-1	19711-19714	Use	_	_	_	_	
131-2	19715-19720	these	_	_	_	_	
131-3	19721-19729	patterns	_	_	_	_	
131-4	19730-19743	independently	_	_	_	_	
131-5	19744-19746	or	_	_	_	_	
131-6	19747-19752	apply	_	_	_	_	
131-7	19753-19757	them	_	_	_	_	
131-8	19758-19766	together	_	_	_	_	
131-9	19767-19769	to	_	_	_	_	
131-10	19770-19777	offload	_	_	_	_	
131-11	19778-19782	work	_	_	_	_	
131-12	19783-19785	to	_	_	_	_	
131-13	19786-19789	the	_	_	_	_	
131-14	19790-19796	Amazon	_	_	_	_	
131-15	19797-19805	Redshift	_	_	_	_	
131-16	19806-19814	Spectrum	_	_	_	_	
131-17	19815-19822	compute	_	_	_	_	
131-18	19823-19828	layer	_	_	_	_	
131-19	19828-19829	,	_	_	_	_	
131-20	19830-19837	quickly	_	_	_	_	
131-21	19838-19844	create	_	_	_	_	
131-22	19845-19846	a	_	_	_	_	
131-23	19847-19858	transformed	_	_	_	_	
131-24	19859-19861	or	_	_	_	_	
131-25	19862-19872	aggregated	_	_	_	_	
131-26	19873-19880	dataset	_	_	_	_	
131-27	19880-19881	,	_	_	_	_	
131-28	19882-19884	or	_	_	_	_	
131-29	19885-19894	eliminate	_	_	_	_	
131-30	19895-19901	entire	_	_	_	_	
131-31	19902-19907	steps	_	_	_	_	
131-32	19908-19910	in	_	_	_	_	
131-33	19911-19912	a	_	_	_	_	
131-34	19913-19924	traditional	_	_	_	_	
131-35	19925-19928	ETL	_	_	_	_	
131-36	19929-19936	process	_	_	_	_	
131-37	19936-19937	.	_	_	_	_	

#Text=Use the Amazon Redshift Spectrum compute layer to offload workloads from the main cluster, and apply more processing power to the specific SQL statement.
132-1	19938-19941	Use	_	_	_	_	
132-2	19942-19945	the	_	_	_	_	
132-3	19946-19952	Amazon	_	_	_	_	
132-4	19953-19961	Redshift	_	_	_	_	
132-5	19962-19970	Spectrum	_	_	_	_	
132-6	19971-19978	compute	_	_	_	_	
132-7	19979-19984	layer	_	_	_	_	
132-8	19985-19987	to	_	_	_	_	
132-9	19988-19995	offload	_	_	_	_	
132-10	19996-20005	workloads	_	_	_	_	
132-11	20006-20010	from	_	_	_	_	
132-12	20011-20014	the	_	_	_	_	
132-13	20015-20019	main	_	_	_	_	
132-14	20020-20027	cluster	_	_	_	_	
132-15	20027-20028	,	_	_	_	_	
132-16	20029-20032	and	_	_	_	_	
132-17	20033-20038	apply	_	_	_	_	
132-18	20039-20043	more	_	_	_	_	
132-19	20044-20054	processing	_	_	_	_	
132-20	20055-20060	power	_	_	_	_	
132-21	20061-20063	to	_	_	_	_	
132-22	20064-20067	the	_	_	_	_	
132-23	20068-20076	specific	_	_	_	_	
132-24	20077-20080	SQL	_	_	_	_	
132-25	20081-20090	statement	_	_	_	_	
132-26	20090-20091	.	_	_	_	_	

#Text=Amazon Redshift Spectrum automatically assigns compute power up to approximately 10 times the processing power of the main cluster.
133-1	20092-20098	Amazon	_	_	_	_	
133-2	20099-20107	Redshift	_	_	_	_	
133-3	20108-20116	Spectrum	_	_	_	_	
133-4	20117-20130	automatically	_	_	_	_	
133-5	20131-20138	assigns	_	_	_	_	
133-6	20139-20146	compute	_	_	_	_	
133-7	20147-20152	power	_	_	_	_	
133-8	20153-20155	up	_	_	_	_	
133-9	20156-20158	to	_	_	_	_	
133-10	20159-20172	approximately	_	_	_	_	
133-11	20173-20175	10	_	_	_	_	
133-12	20176-20181	times	_	_	_	_	
133-13	20182-20185	the	_	_	_	_	
133-14	20186-20196	processing	_	_	_	_	
133-15	20197-20202	power	_	_	_	_	
133-16	20203-20205	of	_	_	_	_	
133-17	20206-20209	the	_	_	_	_	
133-18	20210-20214	main	_	_	_	_	
133-19	20215-20222	cluster	_	_	_	_	
133-20	20222-20223	.	_	_	_	_	

#Text=This may be an effective way to quickly process large transform or aggregate jobs.
134-1	20224-20228	This	_	_	_	_	
134-2	20229-20232	may	_	_	_	_	
134-3	20233-20235	be	_	_	_	_	
134-4	20236-20238	an	_	_	_	_	
134-5	20239-20248	effective	_	_	_	_	
134-6	20249-20252	way	_	_	_	_	
134-7	20253-20255	to	_	_	_	_	
134-8	20256-20263	quickly	_	_	_	_	
134-9	20264-20271	process	_	_	_	_	
134-10	20272-20277	large	_	_	_	_	
134-11	20278-20287	transform	_	_	_	_	
134-12	20288-20290	or	_	_	_	_	
134-13	20291-20300	aggregate	_	_	_	_	
134-14	20301-20305	jobs	_	_	_	_	
134-15	20305-20306	.	_	_	_	_	

#Text=Skip the load in an ELT process and run the transform directly against data on Amazon S3.
135-1	20307-20311	Skip	_	_	_	_	
135-2	20312-20315	the	_	_	_	_	
135-3	20316-20320	load	_	_	_	_	
135-4	20321-20323	in	_	_	_	_	
135-5	20324-20326	an	_	_	_	_	
135-6	20327-20330	ELT	_	_	_	_	
135-7	20331-20338	process	_	_	_	_	
135-8	20339-20342	and	_	_	_	_	
135-9	20343-20346	run	_	_	_	_	
135-10	20347-20350	the	_	_	_	_	
135-11	20351-20360	transform	_	_	_	_	
135-12	20361-20369	directly	_	_	_	_	
135-13	20370-20377	against	_	_	_	_	
135-14	20378-20382	data	_	_	_	_	
135-15	20383-20385	on	_	_	_	_	
135-16	20386-20392	Amazon	_	_	_	_	
135-17	20393-20395	S3	_	_	_	_	
135-18	20395-20396	.	_	_	_	_	

#Text=You can run transform logic against partitioned, columnar data on Amazon S3 with an INSERT … SELECT statement.
136-1	20397-20400	You	_	_	_	_	
136-2	20401-20404	can	_	_	_	_	
136-3	20405-20408	run	_	_	_	_	
136-4	20409-20418	transform	_	_	_	_	
136-5	20419-20424	logic	_	_	_	_	
136-6	20425-20432	against	_	_	_	_	
136-7	20433-20444	partitioned	_	_	_	_	
136-8	20444-20445	,	_	_	_	_	
136-9	20446-20454	columnar	_	_	_	_	
136-10	20455-20459	data	_	_	_	_	
136-11	20460-20462	on	_	_	_	_	
136-12	20463-20469	Amazon	_	_	_	_	
136-13	20470-20472	S3	_	_	_	_	
136-14	20473-20477	with	_	_	_	_	
136-15	20478-20480	an	_	_	_	_	
136-16	20481-20487	INSERT	_	_	_	_	
136-17	20488-20489	…	_	_	_	_	
136-18	20490-20496	SELECT	_	_	_	_	
136-19	20497-20506	statement	_	_	_	_	
136-20	20506-20507	.	_	_	_	_	

#Text=It’s easier than going through the extra work of loading a staging dataset, joining it to other tables, and running a transform against it.
137-1	20508-20510	It	_	_	_	_	
137-2	20510-20511	’	_	_	_	_	
137-3	20511-20512	s	_	_	_	_	
137-4	20513-20519	easier	_	_	_	_	
137-5	20520-20524	than	_	_	_	_	
137-6	20525-20530	going	_	_	_	_	
137-7	20531-20538	through	_	_	_	_	
137-8	20539-20542	the	_	_	_	_	
137-9	20543-20548	extra	_	_	_	_	
137-10	20549-20553	work	_	_	_	_	
137-11	20554-20556	of	_	_	_	_	
137-12	20557-20564	loading	_	_	_	_	
137-13	20565-20566	a	_	_	_	_	
137-14	20567-20574	staging	_	_	_	_	
137-15	20575-20582	dataset	_	_	_	_	
137-16	20582-20583	,	_	_	_	_	
137-17	20584-20591	joining	_	_	_	_	
137-18	20592-20594	it	_	_	_	_	
137-19	20595-20597	to	_	_	_	_	
137-20	20598-20603	other	_	_	_	_	
137-21	20604-20610	tables	_	_	_	_	
137-22	20610-20611	,	_	_	_	_	
137-23	20612-20615	and	_	_	_	_	
137-24	20616-20623	running	_	_	_	_	
137-25	20624-20625	a	_	_	_	_	
137-26	20626-20635	transform	_	_	_	_	
137-27	20636-20643	against	_	_	_	_	
137-28	20644-20646	it	_	_	_	_	
137-29	20646-20647	.	_	_	_	_	

#Text=Use Amazon Redshift Spectrum to run queries as the data lands in Amazon S3, rather than adding a step to load the data onto the main cluster.
138-1	20648-20651	Use	_	_	_	_	
138-2	20652-20658	Amazon	_	_	_	_	
138-3	20659-20667	Redshift	_	_	_	_	
138-4	20668-20676	Spectrum	_	_	_	_	
138-5	20677-20679	to	_	_	_	_	
138-6	20680-20683	run	_	_	_	_	
138-7	20684-20691	queries	_	_	_	_	
138-8	20692-20694	as	_	_	_	_	
138-9	20695-20698	the	_	_	_	_	
138-10	20699-20703	data	_	_	_	_	
138-11	20704-20709	lands	_	_	_	_	
138-12	20710-20712	in	_	_	_	_	
138-13	20713-20719	Amazon	_	_	_	_	
138-14	20720-20722	S3	_	_	_	_	
138-15	20722-20723	,	_	_	_	_	
138-16	20724-20730	rather	_	_	_	_	
138-17	20731-20735	than	_	_	_	_	
138-18	20736-20742	adding	_	_	_	_	
138-19	20743-20744	a	_	_	_	_	
138-20	20745-20749	step	_	_	_	_	
138-21	20750-20752	to	_	_	_	_	
138-22	20753-20757	load	_	_	_	_	
138-23	20758-20761	the	_	_	_	_	
138-24	20762-20766	data	_	_	_	_	
138-25	20767-20771	onto	_	_	_	_	
138-26	20772-20775	the	_	_	_	_	
138-27	20776-20780	main	_	_	_	_	
138-28	20781-20788	cluster	_	_	_	_	
138-29	20788-20789	.	_	_	_	_	

#Text=This allows for real-time analytics.
139-1	20790-20794	This	_	_	_	_	
139-2	20795-20801	allows	_	_	_	_	
139-3	20802-20805	for	_	_	_	_	
139-4	20806-20815	real-time	_	_	_	_	
139-5	20816-20825	analytics	_	_	_	_	
139-6	20825-20826	.	_	_	_	_	

#Text=Land the output of a staging or transformation cluster on Amazon S3 in a partitioned, columnar format.
140-1	20827-20831	Land	_	_	_	_	
140-2	20832-20835	the	_	_	_	_	
140-3	20836-20842	output	_	_	_	_	
140-4	20843-20845	of	_	_	_	_	
140-5	20846-20847	a	_	_	_	_	
140-6	20848-20855	staging	_	_	_	_	
140-7	20856-20858	or	_	_	_	_	
140-8	20859-20873	transformation	_	_	_	_	
140-9	20874-20881	cluster	_	_	_	_	
140-10	20882-20884	on	_	_	_	_	
140-11	20885-20891	Amazon	_	_	_	_	
140-12	20892-20894	S3	_	_	_	_	
140-13	20895-20897	in	_	_	_	_	
140-14	20898-20899	a	_	_	_	_	
140-15	20900-20911	partitioned	_	_	_	_	
140-16	20911-20912	,	_	_	_	_	
140-17	20913-20921	columnar	_	_	_	_	
140-18	20922-20928	format	_	_	_	_	
140-19	20928-20929	.	_	_	_	_	

#Text=The main or reporting cluster can either query from that Amazon S3 dataset directly or load it via an INSERT … SELECT statement.
141-1	20930-20933	The	_	_	_	_	
141-2	20934-20938	main	_	_	_	_	
141-3	20939-20941	or	_	_	_	_	
141-4	20942-20951	reporting	_	_	_	_	
141-5	20952-20959	cluster	_	_	_	_	
141-6	20960-20963	can	_	_	_	_	
141-7	20964-20970	either	_	_	_	_	
141-8	20971-20976	query	_	_	_	_	
141-9	20977-20981	from	_	_	_	_	
141-10	20982-20986	that	_	_	_	_	
141-11	20987-20993	Amazon	_	_	_	_	
141-12	20994-20996	S3	_	_	_	_	
141-13	20997-21004	dataset	_	_	_	_	
141-14	21005-21013	directly	_	_	_	_	
141-15	21014-21016	or	_	_	_	_	
141-16	21017-21021	load	_	_	_	_	
141-17	21022-21024	it	_	_	_	_	
141-18	21025-21028	via	_	_	_	_	
141-19	21029-21031	an	_	_	_	_	
141-20	21032-21038	INSERT	_	_	_	_	
141-21	21039-21040	…	_	_	_	_	
141-22	21041-21047	SELECT	_	_	_	_	
141-23	21048-21057	statement	_	_	_	_	
141-24	21057-21058	.	_	_	_	_	

#Text=Within Amazon Redshift itself, you can export the data into the data lake with the UNLOAD command, or by writing to external tables.
142-1	21059-21065	Within	_	_	_	_	
142-2	21066-21072	Amazon	_	_	_	_	
142-3	21073-21081	Redshift	_	_	_	_	
142-4	21082-21088	itself	_	_	_	_	
142-5	21088-21089	,	_	_	_	_	
142-6	21090-21093	you	_	_	_	_	
142-7	21094-21097	can	_	_	_	_	
142-8	21098-21104	export	_	_	_	_	
142-9	21105-21108	the	_	_	_	_	
142-10	21109-21113	data	_	_	_	_	
142-11	21114-21118	into	_	_	_	_	
142-12	21119-21122	the	_	_	_	_	
142-13	21123-21127	data	_	_	_	_	
142-14	21128-21132	lake	_	_	_	_	
142-15	21133-21137	with	_	_	_	_	
142-16	21138-21141	the	_	_	_	_	
142-17	21141-21142	 	_	_	_	_	
142-18	21142-21148	UNLOAD	_	_	_	_	
142-19	21149-21156	command	_	_	_	_	
142-20	21156-21157	,	_	_	_	_	
142-21	21158-21160	or	_	_	_	_	
142-22	21161-21163	by	_	_	_	_	
142-23	21164-21171	writing	_	_	_	_	
142-24	21172-21174	to	_	_	_	_	
142-25	21175-21183	external	_	_	_	_	
142-26	21184-21190	tables	_	_	_	_	
142-27	21190-21191	.	_	_	_	_	

#Text=Both options export SQL statement output to Amazon S3 in a massively parallel fashion.
143-1	21192-21196	Both	_	_	_	_	
143-2	21197-21204	options	_	_	_	_	
143-3	21204-21205	 	_	_	_	_	
143-4	21205-21211	export	_	_	_	_	
143-5	21212-21215	SQL	_	_	_	_	
143-6	21216-21225	statement	_	_	_	_	
143-7	21226-21232	output	_	_	_	_	
143-8	21233-21235	to	_	_	_	_	
143-9	21236-21242	Amazon	_	_	_	_	
143-10	21243-21245	S3	_	_	_	_	
143-11	21246-21248	in	_	_	_	_	
143-12	21249-21250	a	_	_	_	_	
143-13	21251-21260	massively	_	_	_	_	
143-14	21261-21269	parallel	_	_	_	_	
143-15	21270-21277	fashion	_	_	_	_	
143-16	21277-21278	.	_	_	_	_	

#Text=You can do the following:
#Text=Using familiar CREATE EXTERNAL TABLE AS SELECT and INSERT INTO SQL commands, create and populate external tables on Amazon S3 for subsequent use by Amazon Redshift or other services participating in the data lake without the need to manually maintain partitions.
144-1	21279-21282	You	_	_	_	_	
144-2	21283-21286	can	_	_	_	_	
144-3	21287-21289	do	_	_	_	_	
144-4	21290-21293	the	_	_	_	_	
144-5	21294-21303	following	_	_	_	_	
144-6	21303-21304	:	_	_	_	_	
144-7	21305-21310	Using	_	_	_	_	
144-8	21311-21319	familiar	_	_	_	_	
144-9	21320-21326	CREATE	_	_	_	_	
144-10	21327-21335	EXTERNAL	_	_	_	_	
144-11	21336-21341	TABLE	_	_	_	_	
144-12	21342-21344	AS	_	_	_	_	
144-13	21345-21351	SELECT	_	_	_	_	
144-14	21352-21355	and	_	_	_	_	
144-15	21356-21362	INSERT	_	_	_	_	
144-16	21363-21367	INTO	_	_	_	_	
144-17	21368-21371	SQL	_	_	_	_	
144-18	21372-21380	commands	_	_	_	_	
144-19	21380-21381	,	_	_	_	_	
144-20	21382-21388	create	_	_	_	_	
144-21	21389-21392	and	_	_	_	_	
144-22	21393-21401	populate	_	_	_	_	
144-23	21402-21410	external	_	_	_	_	
144-24	21411-21417	tables	_	_	_	_	
144-25	21418-21420	on	_	_	_	_	
144-26	21421-21427	Amazon	_	_	_	_	
144-27	21428-21430	S3	_	_	_	_	
144-28	21431-21434	for	_	_	_	_	
144-29	21435-21445	subsequent	_	_	_	_	
144-30	21446-21449	use	_	_	_	_	
144-31	21450-21452	by	_	_	_	_	
144-32	21453-21459	Amazon	_	_	_	_	
144-33	21460-21468	Redshift	_	_	_	_	
144-34	21469-21471	or	_	_	_	_	
144-35	21472-21477	other	_	_	_	_	
144-36	21478-21486	services	_	_	_	_	
144-37	21487-21500	participating	_	_	_	_	
144-38	21501-21503	in	_	_	_	_	
144-39	21504-21507	the	_	_	_	_	
144-40	21508-21512	data	_	_	_	_	
144-41	21513-21517	lake	_	_	_	_	
144-42	21518-21525	without	_	_	_	_	
144-43	21526-21529	the	_	_	_	_	
144-44	21530-21534	need	_	_	_	_	
144-45	21535-21537	to	_	_	_	_	
144-46	21538-21546	manually	_	_	_	_	
144-47	21547-21555	maintain	_	_	_	_	
144-48	21556-21566	partitions	_	_	_	_	
144-49	21566-21567	.	_	_	_	_	

#Text=Materialized views can also cover external tables, further enhancing the accessibility and utility of the data lake.
145-1	21568-21580	Materialized	_	_	_	_	
145-2	21581-21586	views	_	_	_	_	
145-3	21587-21590	can	_	_	_	_	
145-4	21591-21595	also	_	_	_	_	
145-5	21596-21601	cover	_	_	_	_	
145-6	21602-21610	external	_	_	_	_	
145-7	21611-21617	tables	_	_	_	_	
145-8	21617-21618	,	_	_	_	_	
145-9	21619-21626	further	_	_	_	_	
145-10	21627-21636	enhancing	_	_	_	_	
145-11	21637-21640	the	_	_	_	_	
145-12	21641-21654	accessibility	_	_	_	_	
145-13	21655-21658	and	_	_	_	_	
145-14	21659-21666	utility	_	_	_	_	
145-15	21667-21669	of	_	_	_	_	
145-16	21670-21673	the	_	_	_	_	
145-17	21674-21678	data	_	_	_	_	
145-18	21679-21683	lake	_	_	_	_	
145-19	21683-21684	.	_	_	_	_	

#Text=Using the UNLOAD command, Amazon Redshift can export SQL statement output to Amazon S3 in a massively parallel fashion.
146-1	21685-21690	Using	_	_	_	_	
146-2	21691-21694	the	_	_	_	_	
146-3	21695-21701	UNLOAD	_	_	_	_	
146-4	21702-21709	command	_	_	_	_	
146-5	21709-21710	,	_	_	_	_	
146-6	21711-21717	Amazon	_	_	_	_	
146-7	21718-21726	Redshift	_	_	_	_	
146-8	21727-21730	can	_	_	_	_	
146-9	21731-21737	export	_	_	_	_	
146-10	21738-21741	SQL	_	_	_	_	
146-11	21742-21751	statement	_	_	_	_	
146-12	21752-21758	output	_	_	_	_	
146-13	21759-21761	to	_	_	_	_	
146-14	21762-21768	Amazon	_	_	_	_	
146-15	21769-21771	S3	_	_	_	_	
146-16	21772-21774	in	_	_	_	_	
146-17	21775-21776	a	_	_	_	_	
146-18	21777-21786	massively	_	_	_	_	
146-19	21787-21795	parallel	_	_	_	_	
146-20	21796-21803	fashion	_	_	_	_	
146-21	21803-21804	.	_	_	_	_	

#Text=This technique greatly improves the export performance and lessens the impact of running the data through the leader node.
147-1	21805-21809	This	_	_	_	_	
147-2	21810-21819	technique	_	_	_	_	
147-3	21820-21827	greatly	_	_	_	_	
147-4	21828-21836	improves	_	_	_	_	
147-5	21837-21840	the	_	_	_	_	
147-6	21841-21847	export	_	_	_	_	
147-7	21848-21859	performance	_	_	_	_	
147-8	21860-21863	and	_	_	_	_	
147-9	21864-21871	lessens	_	_	_	_	
147-10	21872-21875	the	_	_	_	_	
147-11	21876-21882	impact	_	_	_	_	
147-12	21883-21885	of	_	_	_	_	
147-13	21886-21893	running	_	_	_	_	
147-14	21894-21897	the	_	_	_	_	
147-15	21898-21902	data	_	_	_	_	
147-16	21903-21910	through	_	_	_	_	
147-17	21911-21914	the	_	_	_	_	
147-18	21915-21921	leader	_	_	_	_	
147-19	21922-21926	node	_	_	_	_	
147-20	21926-21927	.	_	_	_	_	

#Text=You can compress the exported data on its way off the Amazon Redshift cluster.
148-1	21928-21931	You	_	_	_	_	
148-2	21932-21935	can	_	_	_	_	
148-3	21936-21944	compress	_	_	_	_	
148-4	21945-21948	the	_	_	_	_	
148-5	21949-21957	exported	_	_	_	_	
148-6	21958-21962	data	_	_	_	_	
148-7	21963-21965	on	_	_	_	_	
148-8	21966-21969	its	_	_	_	_	
148-9	21970-21973	way	_	_	_	_	
148-10	21974-21977	off	_	_	_	_	
148-11	21978-21981	the	_	_	_	_	
148-12	21982-21988	Amazon	_	_	_	_	
148-13	21989-21997	Redshift	_	_	_	_	
148-14	21998-22005	cluster	_	_	_	_	
148-15	22005-22006	.	_	_	_	_	

#Text=As the size of the output grows, so does the benefit of using this feature.
149-1	22007-22009	As	_	_	_	_	
149-2	22010-22013	the	_	_	_	_	
149-3	22014-22018	size	_	_	_	_	
149-4	22019-22021	of	_	_	_	_	
149-5	22022-22025	the	_	_	_	_	
149-6	22026-22032	output	_	_	_	_	
149-7	22033-22038	grows	_	_	_	_	
149-8	22038-22039	,	_	_	_	_	
149-9	22040-22042	so	_	_	_	_	
149-10	22043-22047	does	_	_	_	_	
149-11	22048-22051	the	_	_	_	_	
149-12	22052-22059	benefit	_	_	_	_	
149-13	22060-22062	of	_	_	_	_	
149-14	22063-22068	using	_	_	_	_	
149-15	22069-22073	this	_	_	_	_	
149-16	22074-22081	feature	_	_	_	_	
149-17	22081-22082	.	_	_	_	_	

#Text=For writing columnar data to the data lake, UNLOAD can write partition-aware Parquet data.
150-1	22083-22086	For	_	_	_	_	
150-2	22087-22094	writing	_	_	_	_	
150-3	22095-22103	columnar	_	_	_	_	
150-4	22104-22108	data	_	_	_	_	
150-5	22109-22111	to	_	_	_	_	
150-6	22112-22115	the	_	_	_	_	
150-7	22116-22120	data	_	_	_	_	
150-8	22121-22125	lake	_	_	_	_	
150-9	22125-22126	,	_	_	_	_	
150-10	22127-22133	UNLOAD	_	_	_	_	
150-11	22134-22137	can	_	_	_	_	
150-12	22138-22143	write	_	_	_	_	
150-13	22144-22159	partition-aware	_	_	_	_	
150-14	22160-22167	Parquet	_	_	_	_	
150-15	22168-22172	data	_	_	_	_	
150-16	22172-22173	.	_	_	_	_	

#Text=Tip #6: Improving the efficiency of temporary tables
#Text=Amazon Redshift provides temporary tables, which act like normal tables but have a lifetime of a single SQL session.
151-1	22174-22177	Tip	_	_	_	_	
151-2	22178-22180	#6	_	_	_	_	
151-3	22180-22181	:	_	_	_	_	
151-4	22182-22191	Improving	_	_	_	_	
151-5	22192-22195	the	_	_	_	_	
151-6	22196-22206	efficiency	_	_	_	_	
151-7	22207-22209	of	_	_	_	_	
151-8	22210-22219	temporary	_	_	_	_	
151-9	22220-22226	tables	_	_	_	_	
151-10	22227-22233	Amazon	_	_	_	_	
151-11	22234-22242	Redshift	_	_	_	_	
151-12	22243-22251	provides	_	_	_	_	
151-13	22252-22261	temporary	_	_	_	_	
151-14	22262-22268	tables	_	_	_	_	
151-15	22268-22269	,	_	_	_	_	
151-16	22270-22275	which	_	_	_	_	
151-17	22276-22279	act	_	_	_	_	
151-18	22280-22284	like	_	_	_	_	
151-19	22285-22291	normal	_	_	_	_	
151-20	22292-22298	tables	_	_	_	_	
151-21	22299-22302	but	_	_	_	_	
151-22	22303-22307	have	_	_	_	_	
151-23	22308-22309	a	_	_	_	_	
151-24	22310-22318	lifetime	_	_	_	_	
151-25	22319-22321	of	_	_	_	_	
151-26	22322-22323	a	_	_	_	_	
151-27	22324-22330	single	_	_	_	_	
151-28	22331-22334	SQL	_	_	_	_	
151-29	22335-22342	session	_	_	_	_	
151-30	22342-22343	.	_	_	_	_	

#Text=The proper use of temporary tables can significantly improve performance of some ETL operations.
152-1	22344-22347	The	_	_	_	_	
152-2	22348-22354	proper	_	_	_	_	
152-3	22355-22358	use	_	_	_	_	
152-4	22359-22361	of	_	_	_	_	
152-5	22362-22371	temporary	_	_	_	_	
152-6	22372-22378	tables	_	_	_	_	
152-7	22379-22382	can	_	_	_	_	
152-8	22383-22396	significantly	_	_	_	_	
152-9	22397-22404	improve	_	_	_	_	
152-10	22405-22416	performance	_	_	_	_	
152-11	22417-22419	of	_	_	_	_	
152-12	22420-22424	some	_	_	_	_	
152-13	22425-22428	ETL	_	_	_	_	
152-14	22429-22439	operations	_	_	_	_	
152-15	22439-22440	.	_	_	_	_	

#Text=Unlike regular permanent tables, data changes made to temporary tables don’t trigger automatic incremental backups to Amazon S3, and they don’t require synchronous block mirroring to store a redundant copy of data on a different compute node.
153-1	22441-22447	Unlike	_	_	_	_	
153-2	22448-22455	regular	_	_	_	_	
153-3	22456-22465	permanent	_	_	_	_	
153-4	22466-22472	tables	_	_	_	_	
153-5	22472-22473	,	_	_	_	_	
153-6	22474-22478	data	_	_	_	_	
153-7	22479-22486	changes	_	_	_	_	
153-8	22487-22491	made	_	_	_	_	
153-9	22492-22494	to	_	_	_	_	
153-10	22495-22504	temporary	_	_	_	_	
153-11	22505-22511	tables	_	_	_	_	
153-12	22512-22515	don	_	_	_	_	
153-13	22515-22516	’	_	_	_	_	
153-14	22516-22517	t	_	_	_	_	
153-15	22518-22525	trigger	_	_	_	_	
153-16	22526-22535	automatic	_	_	_	_	
153-17	22536-22547	incremental	_	_	_	_	
153-18	22548-22555	backups	_	_	_	_	
153-19	22556-22558	to	_	_	_	_	
153-20	22559-22565	Amazon	_	_	_	_	
153-21	22566-22568	S3	_	_	_	_	
153-22	22568-22569	,	_	_	_	_	
153-23	22570-22573	and	_	_	_	_	
153-24	22574-22578	they	_	_	_	_	
153-25	22579-22582	don	_	_	_	_	
153-26	22582-22583	’	_	_	_	_	
153-27	22583-22584	t	_	_	_	_	
153-28	22585-22592	require	_	_	_	_	
153-29	22593-22604	synchronous	_	_	_	_	
153-30	22605-22610	block	_	_	_	_	
153-31	22611-22620	mirroring	_	_	_	_	
153-32	22621-22623	to	_	_	_	_	
153-33	22624-22629	store	_	_	_	_	
153-34	22630-22631	a	_	_	_	_	
153-35	22632-22641	redundant	_	_	_	_	
153-36	22642-22646	copy	_	_	_	_	
153-37	22647-22649	of	_	_	_	_	
153-38	22650-22654	data	_	_	_	_	
153-39	22655-22657	on	_	_	_	_	
153-40	22658-22659	a	_	_	_	_	
153-41	22660-22669	different	_	_	_	_	
153-42	22670-22677	compute	_	_	_	_	
153-43	22678-22682	node	_	_	_	_	
153-44	22682-22683	.	_	_	_	_	

#Text=Due to these reasons, data ingestion on temporary tables involves reduced overhead and performs much faster.
154-1	22684-22687	Due	_	_	_	_	
154-2	22688-22690	to	_	_	_	_	
154-3	22691-22696	these	_	_	_	_	
154-4	22697-22704	reasons	_	_	_	_	
154-5	22704-22705	,	_	_	_	_	
154-6	22706-22710	data	_	_	_	_	
154-7	22711-22720	ingestion	_	_	_	_	
154-8	22721-22723	on	_	_	_	_	
154-9	22724-22733	temporary	_	_	_	_	
154-10	22734-22740	tables	_	_	_	_	
154-11	22741-22749	involves	_	_	_	_	
154-12	22750-22757	reduced	_	_	_	_	
154-13	22758-22766	overhead	_	_	_	_	
154-14	22767-22770	and	_	_	_	_	
154-15	22771-22779	performs	_	_	_	_	
154-16	22780-22784	much	_	_	_	_	
154-17	22785-22791	faster	_	_	_	_	
154-18	22791-22792	.	_	_	_	_	

#Text=For transient storage needs like staging tables, temporary tables are ideal.
155-1	22793-22796	For	_	_	_	_	
155-2	22797-22806	transient	_	_	_	_	
155-3	22807-22814	storage	_	_	_	_	
155-4	22815-22820	needs	_	_	_	_	
155-5	22821-22825	like	_	_	_	_	
155-6	22826-22833	staging	_	_	_	_	
155-7	22834-22840	tables	_	_	_	_	
155-8	22840-22841	,	_	_	_	_	
155-9	22842-22851	temporary	_	_	_	_	
155-10	22852-22858	tables	_	_	_	_	
155-11	22859-22862	are	_	_	_	_	
155-12	22863-22868	ideal	_	_	_	_	
155-13	22868-22869	.	_	_	_	_	

#Text=You can create temporary tables using the CREATE TEMPORARY TABLE syntax, or by issuing a SELECT … INTO #TEMP_TABLE query.
156-1	22870-22873	You	_	_	_	_	
156-2	22874-22877	can	_	_	_	_	
156-3	22878-22884	create	_	_	_	_	
156-4	22885-22894	temporary	_	_	_	_	
156-5	22895-22901	tables	_	_	_	_	
156-6	22902-22907	using	_	_	_	_	
156-7	22908-22911	the	_	_	_	_	
156-8	22912-22918	CREATE	_	_	_	_	
156-9	22919-22928	TEMPORARY	_	_	_	_	
156-10	22929-22934	TABLE	_	_	_	_	
156-11	22935-22941	syntax	_	_	_	_	
156-12	22941-22942	,	_	_	_	_	
156-13	22943-22945	or	_	_	_	_	
156-14	22946-22948	by	_	_	_	_	
156-15	22949-22956	issuing	_	_	_	_	
156-16	22957-22958	a	_	_	_	_	
156-17	22959-22965	SELECT	_	_	_	_	
156-18	22966-22967	…	_	_	_	_	
156-19	22968-22972	INTO	_	_	_	_	
156-20	22973-22974	#	_	_	_	_	
156-21	22974-22984	TEMP_TABLE	_	_	_	_	
156-22	22985-22990	query	_	_	_	_	
156-23	22990-22991	.	_	_	_	_	

#Text=The CREATE TABLE statement gives you complete control over the definition of the temporary table.
157-1	22992-22995	The	_	_	_	_	
157-2	22996-23002	CREATE	_	_	_	_	
157-3	23003-23008	TABLE	_	_	_	_	
157-4	23009-23018	statement	_	_	_	_	
157-5	23019-23024	gives	_	_	_	_	
157-6	23025-23028	you	_	_	_	_	
157-7	23029-23037	complete	_	_	_	_	
157-8	23038-23045	control	_	_	_	_	
157-9	23046-23050	over	_	_	_	_	
157-10	23051-23054	the	_	_	_	_	
157-11	23055-23065	definition	_	_	_	_	
157-12	23066-23068	of	_	_	_	_	
157-13	23069-23072	the	_	_	_	_	
157-14	23073-23082	temporary	_	_	_	_	
157-15	23083-23088	table	_	_	_	_	
157-16	23088-23089	.	_	_	_	_	

#Text=The SELECT … INTO and C(T)TAS commands use the input data to determine column names, sizes and data types, and use default storage properties.
158-1	23090-23093	The	_	_	_	_	
158-2	23094-23100	SELECT	_	_	_	_	
158-3	23101-23102	…	_	_	_	_	
158-4	23103-23107	INTO	_	_	_	_	
158-5	23108-23111	and	_	_	_	_	
158-6	23112-23113	C	_	_	_	_	
158-7	23113-23114	(	_	_	_	_	
158-8	23114-23115	T	_	_	_	_	
158-9	23115-23116	)	_	_	_	_	
158-10	23116-23119	TAS	_	_	_	_	
158-11	23120-23128	commands	_	_	_	_	
158-12	23129-23132	use	_	_	_	_	
158-13	23133-23136	the	_	_	_	_	
158-14	23137-23142	input	_	_	_	_	
158-15	23143-23147	data	_	_	_	_	
158-16	23148-23150	to	_	_	_	_	
158-17	23151-23160	determine	_	_	_	_	
158-18	23161-23167	column	_	_	_	_	
158-19	23168-23173	names	_	_	_	_	
158-20	23173-23174	,	_	_	_	_	
158-21	23175-23180	sizes	_	_	_	_	
158-22	23181-23184	and	_	_	_	_	
158-23	23185-23189	data	_	_	_	_	
158-24	23190-23195	types	_	_	_	_	
158-25	23195-23196	,	_	_	_	_	
158-26	23197-23200	and	_	_	_	_	
158-27	23201-23204	use	_	_	_	_	
158-28	23205-23212	default	_	_	_	_	
158-29	23213-23220	storage	_	_	_	_	
158-30	23221-23231	properties	_	_	_	_	
158-31	23231-23232	.	_	_	_	_	

#Text=Consider default storage properties carefully, because they may cause problems.
159-1	23233-23241	Consider	_	_	_	_	
159-2	23242-23249	default	_	_	_	_	
159-3	23250-23257	storage	_	_	_	_	
159-4	23258-23268	properties	_	_	_	_	
159-5	23269-23278	carefully	_	_	_	_	
159-6	23278-23279	,	_	_	_	_	
159-7	23280-23287	because	_	_	_	_	
159-8	23288-23292	they	_	_	_	_	
159-9	23293-23296	may	_	_	_	_	
159-10	23297-23302	cause	_	_	_	_	
159-11	23303-23311	problems	_	_	_	_	
159-12	23311-23312	.	_	_	_	_	

#Text=By default, for temporary tables, Amazon Redshift applies EVEN table distribution with no column encoding (such as RAW compression) for all columns.
160-1	23313-23315	By	_	_	_	_	
160-2	23316-23323	default	_	_	_	_	
160-3	23323-23324	,	_	_	_	_	
160-4	23325-23328	for	_	_	_	_	
160-5	23329-23338	temporary	_	_	_	_	
160-6	23339-23345	tables	_	_	_	_	
160-7	23345-23346	,	_	_	_	_	
160-8	23347-23353	Amazon	_	_	_	_	
160-9	23354-23362	Redshift	_	_	_	_	
160-10	23363-23370	applies	_	_	_	_	
160-11	23371-23375	EVEN	_	_	_	_	
160-12	23376-23381	table	_	_	_	_	
160-13	23382-23394	distribution	_	_	_	_	
160-14	23395-23399	with	_	_	_	_	
160-15	23400-23402	no	_	_	_	_	
160-16	23403-23409	column	_	_	_	_	
160-17	23410-23418	encoding	_	_	_	_	
160-18	23419-23420	(	_	_	_	_	
160-19	23420-23424	such	_	_	_	_	
160-20	23425-23427	as	_	_	_	_	
160-21	23428-23431	RAW	_	_	_	_	
160-22	23432-23443	compression	_	_	_	_	
160-23	23443-23444	)	_	_	_	_	
160-24	23445-23448	for	_	_	_	_	
160-25	23449-23452	all	_	_	_	_	
160-26	23453-23460	columns	_	_	_	_	
160-27	23460-23461	.	_	_	_	_	

#Text=This data structure is sub-optimal for many types of queries.
161-1	23462-23466	This	_	_	_	_	
161-2	23467-23471	data	_	_	_	_	
161-3	23472-23481	structure	_	_	_	_	
161-4	23482-23484	is	_	_	_	_	
161-5	23485-23496	sub-optimal	_	_	_	_	
161-6	23497-23500	for	_	_	_	_	
161-7	23501-23505	many	_	_	_	_	
161-8	23506-23511	types	_	_	_	_	
161-9	23512-23514	of	_	_	_	_	
161-10	23515-23522	queries	_	_	_	_	
161-11	23522-23523	.	_	_	_	_	

#Text=If you employ the SELECT…INTO syntax, you can’t set the column encoding, column distribution, or sort keys.
162-1	23524-23526	If	_	_	_	_	
162-2	23527-23530	you	_	_	_	_	
162-3	23531-23537	employ	_	_	_	_	
162-4	23538-23541	the	_	_	_	_	
162-5	23542-23548	SELECT	_	_	_	_	
162-6	23548-23549	…	_	_	_	_	
162-7	23549-23553	INTO	_	_	_	_	
162-8	23554-23560	syntax	_	_	_	_	
162-9	23560-23561	,	_	_	_	_	
162-10	23562-23565	you	_	_	_	_	
162-11	23566-23569	can	_	_	_	_	
162-12	23569-23570	’	_	_	_	_	
162-13	23570-23571	t	_	_	_	_	
162-14	23572-23575	set	_	_	_	_	
162-15	23576-23579	the	_	_	_	_	
162-16	23580-23586	column	_	_	_	_	
162-17	23587-23595	encoding	_	_	_	_	
162-18	23595-23596	,	_	_	_	_	
162-19	23597-23603	column	_	_	_	_	
162-20	23604-23616	distribution	_	_	_	_	
162-21	23616-23617	,	_	_	_	_	
162-22	23618-23620	or	_	_	_	_	
162-23	23621-23625	sort	_	_	_	_	
162-24	23626-23630	keys	_	_	_	_	
162-25	23630-23631	.	_	_	_	_	

#Text=The CREATE TABLE AS (CTAS) syntax instead lets you specify a distribution style and sort keys, and Amazon Redshift automatically applies LZO encoding for everything other than sort keys, Booleans, reals, and doubles.
163-1	23632-23635	The	_	_	_	_	
163-2	23636-23642	CREATE	_	_	_	_	
163-3	23643-23648	TABLE	_	_	_	_	
163-4	23649-23651	AS	_	_	_	_	
163-5	23652-23653	(	_	_	_	_	
163-6	23653-23657	CTAS	_	_	_	_	
163-7	23657-23658	)	_	_	_	_	
163-8	23659-23665	syntax	_	_	_	_	
163-9	23666-23673	instead	_	_	_	_	
163-10	23674-23678	lets	_	_	_	_	
163-11	23679-23682	you	_	_	_	_	
163-12	23683-23690	specify	_	_	_	_	
163-13	23691-23692	a	_	_	_	_	
163-14	23693-23705	distribution	_	_	_	_	
163-15	23706-23711	style	_	_	_	_	
163-16	23712-23715	and	_	_	_	_	
163-17	23716-23720	sort	_	_	_	_	
163-18	23721-23725	keys	_	_	_	_	
163-19	23725-23726	,	_	_	_	_	
163-20	23727-23730	and	_	_	_	_	
163-21	23731-23737	Amazon	_	_	_	_	
163-22	23738-23746	Redshift	_	_	_	_	
163-23	23747-23760	automatically	_	_	_	_	
163-24	23761-23768	applies	_	_	_	_	
163-25	23769-23772	LZO	_	_	_	_	
163-26	23773-23781	encoding	_	_	_	_	
163-27	23782-23785	for	_	_	_	_	
163-28	23786-23796	everything	_	_	_	_	
163-29	23797-23802	other	_	_	_	_	
163-30	23803-23807	than	_	_	_	_	
163-31	23808-23812	sort	_	_	_	_	
163-32	23813-23817	keys	_	_	_	_	
163-33	23817-23818	,	_	_	_	_	
163-34	23819-23827	Booleans	_	_	_	_	
163-35	23827-23828	,	_	_	_	_	
163-36	23829-23834	reals	_	_	_	_	
163-37	23834-23835	,	_	_	_	_	
163-38	23836-23839	and	_	_	_	_	
163-39	23840-23847	doubles	_	_	_	_	
163-40	23847-23848	.	_	_	_	_	

#Text=You can exert additional control by using the CREATE TABLE syntax rather than CTAS.
164-1	23849-23852	You	_	_	_	_	
164-2	23853-23856	can	_	_	_	_	
164-3	23857-23862	exert	_	_	_	_	
164-4	23863-23873	additional	_	_	_	_	
164-5	23874-23881	control	_	_	_	_	
164-6	23882-23884	by	_	_	_	_	
164-7	23885-23890	using	_	_	_	_	
164-8	23891-23894	the	_	_	_	_	
164-9	23895-23901	CREATE	_	_	_	_	
164-10	23902-23907	TABLE	_	_	_	_	
164-11	23908-23914	syntax	_	_	_	_	
164-12	23915-23921	rather	_	_	_	_	
164-13	23922-23926	than	_	_	_	_	
164-14	23927-23931	CTAS	_	_	_	_	
164-15	23931-23932	.	_	_	_	_	

#Text=If you create temporary tables, remember to convert all SELECT…INTO syntax into the CREATE statement.
165-1	23933-23935	If	_	_	_	_	
165-2	23936-23939	you	_	_	_	_	
165-3	23940-23946	create	_	_	_	_	
165-4	23947-23956	temporary	_	_	_	_	
165-5	23957-23963	tables	_	_	_	_	
165-6	23963-23964	,	_	_	_	_	
165-7	23965-23973	remember	_	_	_	_	
165-8	23974-23976	to	_	_	_	_	
165-9	23977-23984	convert	_	_	_	_	
165-10	23985-23988	all	_	_	_	_	
165-11	23989-23995	SELECT	_	_	_	_	
165-12	23995-23996	…	_	_	_	_	
165-13	23996-24000	INTO	_	_	_	_	
165-14	24001-24007	syntax	_	_	_	_	
165-15	24008-24012	into	_	_	_	_	
165-16	24013-24016	the	_	_	_	_	
165-17	24017-24023	CREATE	_	_	_	_	
165-18	24024-24033	statement	_	_	_	_	
165-19	24033-24034	.	_	_	_	_	

#Text=This ensures that your temporary tables have column encodings and don’t cause distribution errors within your workflow.
166-1	24035-24039	This	_	_	_	_	
166-2	24040-24047	ensures	_	_	_	_	
166-3	24048-24052	that	_	_	_	_	
166-4	24053-24057	your	_	_	_	_	
166-5	24058-24067	temporary	_	_	_	_	
166-6	24068-24074	tables	_	_	_	_	
166-7	24075-24079	have	_	_	_	_	
166-8	24080-24086	column	_	_	_	_	
166-9	24087-24096	encodings	_	_	_	_	
166-10	24097-24100	and	_	_	_	_	
166-11	24101-24104	don	_	_	_	_	
166-12	24104-24105	’	_	_	_	_	
166-13	24105-24106	t	_	_	_	_	
166-14	24107-24112	cause	_	_	_	_	
166-15	24113-24125	distribution	_	_	_	_	
166-16	24126-24132	errors	_	_	_	_	
166-17	24133-24139	within	_	_	_	_	
166-18	24140-24144	your	_	_	_	_	
166-19	24145-24153	workflow	_	_	_	_	
166-20	24153-24154	.	_	_	_	_	

#Text=For example, you may want to convert a statement using this syntax:
#Text=SELECT column_a, column_b INTO #my_temp_table FROM my_table;
#Text=You need to analyze the temporary table for optimal column encoding:
#Text=Master=# analyze compression #my_temp_table;
#Text=Table | Column | Encoding
#Text=----------------+----------+---------
#Text=#my_temp_table | columb_a | lzo
#Text=#my_temp_table | columb_b | bytedict
#Text=(2 rows)
#Text=You can then convert the SELECT INTO a statement to the following:
#Text=BEGIN;
#Text=CREATE TEMPORARY TABLE my_temp_table(
#Text=column_a varchar(128) encode lzo,
#Text=column_b char(4) encode bytedict)
#Text=distkey (column_a) -- Assuming you intend to join this table on column_a
#Text=sortkey (column_b) -- Assuming you are sorting or grouping by column_b
#Text=INSERT INTO my_temp_table SELECT column_a, column_b FROM my_table;
#Text=COMMIT;
#Text=If you create a temporary staging table by using a CREATE TABLE LIKE statement, the staging table inherits the distribution key, sort keys, and column encodings from the parent target table.
167-1	24155-24158	For	_	_	_	_	
167-2	24159-24166	example	_	_	_	_	
167-3	24166-24167	,	_	_	_	_	
167-4	24168-24171	you	_	_	_	_	
167-5	24172-24175	may	_	_	_	_	
167-6	24176-24180	want	_	_	_	_	
167-7	24181-24183	to	_	_	_	_	
167-8	24184-24191	convert	_	_	_	_	
167-9	24192-24193	a	_	_	_	_	
167-10	24194-24203	statement	_	_	_	_	
167-11	24204-24209	using	_	_	_	_	
167-12	24210-24214	this	_	_	_	_	
167-13	24215-24221	syntax	_	_	_	_	
167-14	24221-24222	:	_	_	_	_	
167-15	24223-24229	SELECT	_	_	_	_	
167-16	24230-24238	column_a	_	_	_	_	
167-17	24238-24239	,	_	_	_	_	
167-18	24240-24248	column_b	_	_	_	_	
167-19	24249-24253	INTO	_	_	_	_	
167-20	24254-24255	#	_	_	_	_	
167-21	24255-24268	my_temp_table	_	_	_	_	
167-22	24269-24273	FROM	_	_	_	_	
167-23	24274-24282	my_table	_	_	_	_	
167-24	24282-24283	;	_	_	_	_	
167-25	24284-24287	You	_	_	_	_	
167-26	24288-24292	need	_	_	_	_	
167-27	24293-24295	to	_	_	_	_	
167-28	24296-24303	analyze	_	_	_	_	
167-29	24304-24307	the	_	_	_	_	
167-30	24308-24317	temporary	_	_	_	_	
167-31	24318-24323	table	_	_	_	_	
167-32	24324-24327	for	_	_	_	_	
167-33	24328-24335	optimal	_	_	_	_	
167-34	24336-24342	column	_	_	_	_	
167-35	24343-24351	encoding	_	_	_	_	
167-36	24351-24352	:	_	_	_	_	
167-37	24353-24359	Master	_	_	_	_	
167-38	24359-24360	=	_	_	_	_	
167-39	24360-24361	#	_	_	_	_	
167-40	24362-24369	analyze	_	_	_	_	
167-41	24370-24381	compression	_	_	_	_	
167-42	24382-24383	#	_	_	_	_	
167-43	24383-24396	my_temp_table	_	_	_	_	
167-44	24396-24397	;	_	_	_	_	
167-45	24398-24403	Table	_	_	_	_	
167-46	24404-24405	|	_	_	_	_	
167-47	24406-24412	Column	_	_	_	_	
167-48	24413-24414	|	_	_	_	_	
167-49	24415-24423	Encoding	_	_	_	_	
167-50	24424-24425	-	_	_	_	_	
167-51	24425-24426	-	_	_	_	_	
167-52	24426-24427	-	_	_	_	_	
167-53	24427-24428	-	_	_	_	_	
167-54	24428-24429	-	_	_	_	_	
167-55	24429-24430	-	_	_	_	_	
167-56	24430-24431	-	_	_	_	_	
167-57	24431-24432	-	_	_	_	_	
167-58	24432-24433	-	_	_	_	_	
167-59	24433-24434	-	_	_	_	_	
167-60	24434-24435	-	_	_	_	_	
167-61	24435-24436	-	_	_	_	_	
167-62	24436-24437	-	_	_	_	_	
167-63	24437-24438	-	_	_	_	_	
167-64	24438-24439	-	_	_	_	_	
167-65	24439-24440	-	_	_	_	_	
167-66	24440-24441	+	_	_	_	_	
167-67	24441-24442	-	_	_	_	_	
167-68	24442-24443	-	_	_	_	_	
167-69	24443-24444	-	_	_	_	_	
167-70	24444-24445	-	_	_	_	_	
167-71	24445-24446	-	_	_	_	_	
167-72	24446-24447	-	_	_	_	_	
167-73	24447-24448	-	_	_	_	_	
167-74	24448-24449	-	_	_	_	_	
167-75	24449-24450	-	_	_	_	_	
167-76	24450-24451	-	_	_	_	_	
167-77	24451-24452	+	_	_	_	_	
167-78	24452-24453	-	_	_	_	_	
167-79	24453-24454	-	_	_	_	_	
167-80	24454-24455	-	_	_	_	_	
167-81	24455-24456	-	_	_	_	_	
167-82	24456-24457	-	_	_	_	_	
167-83	24457-24458	-	_	_	_	_	
167-84	24458-24459	-	_	_	_	_	
167-85	24459-24460	-	_	_	_	_	
167-86	24460-24461	-	_	_	_	_	
167-87	24462-24463	#	_	_	_	_	
167-88	24463-24476	my_temp_table	_	_	_	_	
167-89	24477-24478	|	_	_	_	_	
167-90	24479-24487	columb_a	_	_	_	_	
167-91	24488-24489	|	_	_	_	_	
167-92	24490-24493	lzo	_	_	_	_	
167-93	24494-24495	#	_	_	_	_	
167-94	24495-24508	my_temp_table	_	_	_	_	
167-95	24509-24510	|	_	_	_	_	
167-96	24511-24519	columb_b	_	_	_	_	
167-97	24520-24521	|	_	_	_	_	
167-98	24522-24530	bytedict	_	_	_	_	
167-99	24531-24532	(	_	_	_	_	
167-100	24532-24533	2	_	_	_	_	
167-101	24534-24538	rows	_	_	_	_	
167-102	24538-24539	)	_	_	_	_	
167-103	24540-24543	You	_	_	_	_	
167-104	24544-24547	can	_	_	_	_	
167-105	24548-24552	then	_	_	_	_	
167-106	24553-24560	convert	_	_	_	_	
167-107	24561-24564	the	_	_	_	_	
167-108	24565-24571	SELECT	_	_	_	_	
167-109	24572-24576	INTO	_	_	_	_	
167-110	24577-24578	a	_	_	_	_	
167-111	24579-24588	statement	_	_	_	_	
167-112	24589-24591	to	_	_	_	_	
167-113	24592-24595	the	_	_	_	_	
167-114	24596-24605	following	_	_	_	_	
167-115	24605-24606	:	_	_	_	_	
167-116	24607-24612	BEGIN	_	_	_	_	
167-117	24612-24613	;	_	_	_	_	
167-118	24614-24620	CREATE	_	_	_	_	
167-119	24621-24630	TEMPORARY	_	_	_	_	
167-120	24631-24636	TABLE	_	_	_	_	
167-121	24637-24650	my_temp_table	_	_	_	_	
167-122	24650-24651	(	_	_	_	_	
167-123	24652-24660	column_a	_	_	_	_	
167-124	24661-24668	varchar	_	_	_	_	
167-125	24668-24669	(	_	_	_	_	
167-126	24669-24672	128	_	_	_	_	
167-127	24672-24673	)	_	_	_	_	
167-128	24674-24680	encode	_	_	_	_	
167-129	24681-24684	lzo	_	_	_	_	
167-130	24684-24685	,	_	_	_	_	
167-131	24686-24694	column_b	_	_	_	_	
167-132	24695-24699	char	_	_	_	_	
167-133	24699-24700	(	_	_	_	_	
167-134	24700-24701	4	_	_	_	_	
167-135	24701-24702	)	_	_	_	_	
167-136	24703-24709	encode	_	_	_	_	
167-137	24710-24718	bytedict	_	_	_	_	
167-138	24718-24719	)	_	_	_	_	
167-139	24720-24727	distkey	_	_	_	_	
167-140	24728-24729	(	_	_	_	_	
167-141	24729-24737	column_a	_	_	_	_	
167-142	24737-24738	)	_	_	_	_	
167-143	24739-24740	-	_	_	_	_	
167-144	24740-24741	-	_	_	_	_	
167-145	24742-24750	Assuming	_	_	_	_	
167-146	24751-24754	you	_	_	_	_	
167-147	24755-24761	intend	_	_	_	_	
167-148	24762-24764	to	_	_	_	_	
167-149	24765-24769	join	_	_	_	_	
167-150	24770-24774	this	_	_	_	_	
167-151	24775-24780	table	_	_	_	_	
167-152	24781-24783	on	_	_	_	_	
167-153	24784-24792	column_a	_	_	_	_	
167-154	24793-24800	sortkey	_	_	_	_	
167-155	24801-24802	(	_	_	_	_	
167-156	24802-24810	column_b	_	_	_	_	
167-157	24810-24811	)	_	_	_	_	
167-158	24812-24813	-	_	_	_	_	
167-159	24813-24814	-	_	_	_	_	
167-160	24815-24823	Assuming	_	_	_	_	
167-161	24824-24827	you	_	_	_	_	
167-162	24828-24831	are	_	_	_	_	
167-163	24832-24839	sorting	_	_	_	_	
167-164	24840-24842	or	_	_	_	_	
167-165	24843-24851	grouping	_	_	_	_	
167-166	24852-24854	by	_	_	_	_	
167-167	24855-24863	column_b	_	_	_	_	
167-168	24864-24870	INSERT	_	_	_	_	
167-169	24871-24875	INTO	_	_	_	_	
167-170	24876-24889	my_temp_table	_	_	_	_	
167-171	24890-24896	SELECT	_	_	_	_	
167-172	24897-24905	column_a	_	_	_	_	
167-173	24905-24906	,	_	_	_	_	
167-174	24907-24915	column_b	_	_	_	_	
167-175	24916-24920	FROM	_	_	_	_	
167-176	24921-24929	my_table	_	_	_	_	
167-177	24929-24930	;	_	_	_	_	
167-178	24931-24937	COMMIT	_	_	_	_	
167-179	24937-24938	;	_	_	_	_	
167-180	24939-24941	If	_	_	_	_	
167-181	24942-24945	you	_	_	_	_	
167-182	24946-24952	create	_	_	_	_	
167-183	24953-24954	a	_	_	_	_	
167-184	24955-24964	temporary	_	_	_	_	
167-185	24965-24972	staging	_	_	_	_	
167-186	24973-24978	table	_	_	_	_	
167-187	24979-24981	by	_	_	_	_	
167-188	24982-24987	using	_	_	_	_	
167-189	24988-24989	a	_	_	_	_	
167-190	24990-24996	CREATE	_	_	_	_	
167-191	24997-25002	TABLE	_	_	_	_	
167-192	25003-25007	LIKE	_	_	_	_	
167-193	25008-25017	statement	_	_	_	_	
167-194	25017-25018	,	_	_	_	_	
167-195	25019-25022	the	_	_	_	_	
167-196	25023-25030	staging	_	_	_	_	
167-197	25031-25036	table	_	_	_	_	
167-198	25037-25045	inherits	_	_	_	_	
167-199	25046-25049	the	_	_	_	_	
167-200	25050-25062	distribution	_	_	_	_	
167-201	25063-25066	key	_	_	_	_	
167-202	25066-25067	,	_	_	_	_	
167-203	25068-25072	sort	_	_	_	_	
167-204	25073-25077	keys	_	_	_	_	
167-205	25077-25078	,	_	_	_	_	
167-206	25079-25082	and	_	_	_	_	
167-207	25083-25089	column	_	_	_	_	
167-208	25090-25099	encodings	_	_	_	_	
167-209	25100-25104	from	_	_	_	_	
167-210	25105-25108	the	_	_	_	_	
167-211	25109-25115	parent	_	_	_	_	
167-212	25116-25122	target	_	_	_	_	
167-213	25123-25128	table	_	_	_	_	
167-214	25128-25129	.	_	_	_	_	

#Text=In this case, merge operations that join the staging and target tables on the same distribution key performs faster because the joining rows are collocated.
168-1	25130-25132	In	_	_	_	_	
168-2	25133-25137	this	_	_	_	_	
168-3	25138-25142	case	_	_	_	_	
168-4	25142-25143	,	_	_	_	_	
168-5	25144-25149	merge	_	_	_	_	
168-6	25150-25160	operations	_	_	_	_	
168-7	25161-25165	that	_	_	_	_	
168-8	25166-25170	join	_	_	_	_	
168-9	25171-25174	the	_	_	_	_	
168-10	25175-25182	staging	_	_	_	_	
168-11	25183-25186	and	_	_	_	_	
168-12	25187-25193	target	_	_	_	_	
168-13	25194-25200	tables	_	_	_	_	
168-14	25201-25203	on	_	_	_	_	
168-15	25204-25207	the	_	_	_	_	
168-16	25208-25212	same	_	_	_	_	
168-17	25213-25225	distribution	_	_	_	_	
168-18	25226-25229	key	_	_	_	_	
168-19	25230-25238	performs	_	_	_	_	
168-20	25239-25245	faster	_	_	_	_	
168-21	25246-25253	because	_	_	_	_	
168-22	25254-25257	the	_	_	_	_	
168-23	25258-25265	joining	_	_	_	_	
168-24	25266-25270	rows	_	_	_	_	
168-25	25271-25274	are	_	_	_	_	
168-26	25275-25285	collocated	_	_	_	_	
168-27	25285-25286	.	_	_	_	_	

#Text=To verify that the query uses a collocated join, run the query with EXPLAIN and check for DS_DIST_NONE on all the joins.
169-1	25287-25289	To	_	_	_	_	
169-2	25290-25296	verify	_	_	_	_	
169-3	25297-25301	that	_	_	_	_	
169-4	25302-25305	the	_	_	_	_	
169-5	25306-25311	query	_	_	_	_	
169-6	25312-25316	uses	_	_	_	_	
169-7	25317-25318	a	_	_	_	_	
169-8	25319-25329	collocated	_	_	_	_	
169-9	25330-25334	join	_	_	_	_	
169-10	25334-25335	,	_	_	_	_	
169-11	25336-25339	run	_	_	_	_	
169-12	25340-25343	the	_	_	_	_	
169-13	25344-25349	query	_	_	_	_	
169-14	25350-25354	with	_	_	_	_	
169-15	25355-25362	EXPLAIN	_	_	_	_	
169-16	25363-25366	and	_	_	_	_	
169-17	25367-25372	check	_	_	_	_	
169-18	25373-25376	for	_	_	_	_	
169-19	25377-25389	DS_DIST_NONE	_	_	_	_	
169-20	25390-25392	on	_	_	_	_	
169-21	25393-25396	all	_	_	_	_	
169-22	25397-25400	the	_	_	_	_	
169-23	25401-25406	joins	_	_	_	_	
169-24	25406-25407	.	_	_	_	_	

#Text=You may also want to analyze statistics on the temporary table, especially when you use it as a join table for subsequent queries.
170-1	25408-25411	You	_	_	_	_	
170-2	25412-25415	may	_	_	_	_	
170-3	25416-25420	also	_	_	_	_	
170-4	25421-25425	want	_	_	_	_	
170-5	25426-25428	to	_	_	_	_	
170-6	25429-25436	analyze	_	_	_	_	
170-7	25437-25447	statistics	_	_	_	_	
170-8	25448-25450	on	_	_	_	_	
170-9	25451-25454	the	_	_	_	_	
170-10	25455-25464	temporary	_	_	_	_	
170-11	25465-25470	table	_	_	_	_	
170-12	25470-25471	,	_	_	_	_	
170-13	25472-25482	especially	_	_	_	_	
170-14	25483-25487	when	_	_	_	_	
170-15	25488-25491	you	_	_	_	_	
170-16	25492-25495	use	_	_	_	_	
170-17	25496-25498	it	_	_	_	_	
170-18	25499-25501	as	_	_	_	_	
170-19	25502-25503	a	_	_	_	_	
170-20	25504-25508	join	_	_	_	_	
170-21	25509-25514	table	_	_	_	_	
170-22	25515-25518	for	_	_	_	_	
170-23	25519-25529	subsequent	_	_	_	_	
170-24	25530-25537	queries	_	_	_	_	
170-25	25537-25538	.	_	_	_	_	

#Text=See the following code:
#Text=ANALYZE my_temp_table;
#Text=With this trick, you retain the functionality of temporary tables but control data placement on the cluster through distribution key assignment.
171-1	25539-25542	See	_	_	_	_	
171-2	25543-25546	the	_	_	_	_	
171-3	25547-25556	following	_	_	_	_	
171-4	25557-25561	code	_	_	_	_	
171-5	25561-25562	:	_	_	_	_	
171-6	25563-25570	ANALYZE	_	_	_	_	
171-7	25571-25584	my_temp_table	_	_	_	_	
171-8	25584-25585	;	_	_	_	_	
171-9	25586-25590	With	_	_	_	_	
171-10	25591-25595	this	_	_	_	_	
171-11	25596-25601	trick	_	_	_	_	
171-12	25601-25602	,	_	_	_	_	
171-13	25603-25606	you	_	_	_	_	
171-14	25607-25613	retain	_	_	_	_	
171-15	25614-25617	the	_	_	_	_	
171-16	25618-25631	functionality	_	_	_	_	
171-17	25632-25634	of	_	_	_	_	
171-18	25635-25644	temporary	_	_	_	_	
171-19	25645-25651	tables	_	_	_	_	
171-20	25652-25655	but	_	_	_	_	
171-21	25656-25663	control	_	_	_	_	
171-22	25664-25668	data	_	_	_	_	
171-23	25669-25678	placement	_	_	_	_	
171-24	25679-25681	on	_	_	_	_	
171-25	25682-25685	the	_	_	_	_	
171-26	25686-25693	cluster	_	_	_	_	
171-27	25694-25701	through	_	_	_	_	
171-28	25702-25714	distribution	_	_	_	_	
171-29	25715-25718	key	_	_	_	_	
171-30	25719-25729	assignment	_	_	_	_	
171-31	25729-25730	.	_	_	_	_	

#Text=You also take advantage of the columnar nature of Amazon Redshift by using column encoding.
172-1	25731-25734	You	_	_	_	_	
172-2	25735-25739	also	_	_	_	_	
172-3	25740-25744	take	_	_	_	_	
172-4	25745-25754	advantage	_	_	_	_	
172-5	25755-25757	of	_	_	_	_	
172-6	25758-25761	the	_	_	_	_	
172-7	25762-25770	columnar	_	_	_	_	
172-8	25771-25777	nature	_	_	_	_	
172-9	25778-25780	of	_	_	_	_	
172-10	25781-25787	Amazon	_	_	_	_	
172-11	25788-25796	Redshift	_	_	_	_	
172-12	25797-25799	by	_	_	_	_	
172-13	25800-25805	using	_	_	_	_	
172-14	25806-25812	column	_	_	_	_	
172-15	25813-25821	encoding	_	_	_	_	
172-16	25821-25822	.	_	_	_	_	

#Text=Tip #7: Using QMR and Amazon CloudWatch metrics to drive additional performance improvements
#Text=In addition to the Amazon Redshift Advisor recommendations, you can get performance insights through other channels.
173-1	25823-25826	Tip	_	_	_	_	
173-2	25827-25829	#7	_	_	_	_	
173-3	25829-25830	:	_	_	_	_	
173-4	25830-25831	 	_	_	_	_	
173-5	25831-25836	Using	_	_	_	_	
173-6	25837-25840	QMR	_	_	_	_	
173-7	25841-25844	and	_	_	_	_	
173-8	25845-25851	Amazon	_	_	_	_	
173-9	25852-25862	CloudWatch	_	_	_	_	
173-10	25863-25870	metrics	_	_	_	_	
173-11	25871-25873	to	_	_	_	_	
173-12	25874-25879	drive	_	_	_	_	
173-13	25880-25890	additional	_	_	_	_	
173-14	25891-25902	performance	_	_	_	_	
173-15	25903-25915	improvements	_	_	_	_	
173-16	25916-25918	In	_	_	_	_	
173-17	25919-25927	addition	_	_	_	_	
173-18	25928-25930	to	_	_	_	_	
173-19	25931-25934	the	_	_	_	_	
173-20	25935-25941	Amazon	_	_	_	_	
173-21	25942-25950	Redshift	_	_	_	_	
173-22	25951-25958	Advisor	_	_	_	_	
173-23	25959-25974	recommendations	_	_	_	_	
173-24	25974-25975	,	_	_	_	_	
173-25	25976-25979	you	_	_	_	_	
173-26	25980-25983	can	_	_	_	_	
173-27	25984-25987	get	_	_	_	_	
173-28	25988-25999	performance	_	_	_	_	
173-29	26000-26008	insights	_	_	_	_	
173-30	26009-26016	through	_	_	_	_	
173-31	26017-26022	other	_	_	_	_	
173-32	26023-26031	channels	_	_	_	_	
173-33	26031-26032	.	_	_	_	_	

#Text=The Amazon Redshift cluster continuously and automatically collects query monitoring rules metrics, whether you institute any rules on the cluster or not.
174-1	26033-26036	The	_	_	_	_	
174-2	26037-26043	Amazon	_	_	_	_	
174-3	26044-26052	Redshift	_	_	_	_	
174-4	26053-26060	cluster	_	_	_	_	
174-5	26061-26073	continuously	_	_	_	_	
174-6	26074-26077	and	_	_	_	_	
174-7	26078-26091	automatically	_	_	_	_	
174-8	26092-26100	collects	_	_	_	_	
174-9	26101-26106	query	_	_	_	_	
174-10	26107-26117	monitoring	_	_	_	_	
174-11	26118-26123	rules	_	_	_	_	
174-12	26124-26131	metrics	_	_	_	_	
174-13	26131-26132	,	_	_	_	_	
174-14	26133-26140	whether	_	_	_	_	
174-15	26141-26144	you	_	_	_	_	
174-16	26145-26154	institute	_	_	_	_	
174-17	26155-26158	any	_	_	_	_	
174-18	26159-26164	rules	_	_	_	_	
174-19	26165-26167	on	_	_	_	_	
174-20	26168-26171	the	_	_	_	_	
174-21	26172-26179	cluster	_	_	_	_	
174-22	26180-26182	or	_	_	_	_	
174-23	26183-26186	not	_	_	_	_	
174-24	26186-26187	.	_	_	_	_	

#Text=This convenient mechanism lets you view attributes like the following:
#Text=The CPU time for a SQL statement (query_cpu_time)
#Text=The amount of temporary space a job might ‘spill to disk’ (query_temp_blocks_to_disk)
#Text=The ratio of the highest number of blocks read over the average (io_skew)
#Text=It also makes Amazon Redshift Spectrum metrics available, such as the number of Amazon Redshift Spectrum rows and MBs scanned by a query (spectrum_scan_row_count and spectrum_scan_size_mb, respectively).
175-1	26188-26192	This	_	_	_	_	
175-2	26193-26203	convenient	_	_	_	_	
175-3	26204-26213	mechanism	_	_	_	_	
175-4	26214-26218	lets	_	_	_	_	
175-5	26219-26222	you	_	_	_	_	
175-6	26223-26227	view	_	_	_	_	
175-7	26228-26238	attributes	_	_	_	_	
175-8	26239-26243	like	_	_	_	_	
175-9	26244-26247	the	_	_	_	_	
175-10	26248-26257	following	_	_	_	_	
175-11	26257-26258	:	_	_	_	_	
175-12	26259-26262	The	_	_	_	_	
175-13	26263-26266	CPU	_	_	_	_	
175-14	26267-26271	time	_	_	_	_	
175-15	26272-26275	for	_	_	_	_	
175-16	26276-26277	a	_	_	_	_	
175-17	26278-26281	SQL	_	_	_	_	
175-18	26282-26291	statement	_	_	_	_	
175-19	26292-26293	(	_	_	_	_	
175-20	26293-26307	query_cpu_time	_	_	_	_	
175-21	26307-26308	)	_	_	_	_	
175-22	26309-26312	The	_	_	_	_	
175-23	26313-26319	amount	_	_	_	_	
175-24	26320-26322	of	_	_	_	_	
175-25	26323-26332	temporary	_	_	_	_	
175-26	26333-26338	space	_	_	_	_	
175-27	26339-26340	a	_	_	_	_	
175-28	26341-26344	job	_	_	_	_	
175-29	26345-26350	might	_	_	_	_	
175-30	26351-26352	‘	_	_	_	_	
175-31	26352-26357	spill	_	_	_	_	
175-32	26358-26360	to	_	_	_	_	
175-33	26361-26365	disk	_	_	_	_	
175-34	26365-26366	’	_	_	_	_	
175-35	26367-26368	(	_	_	_	_	
175-36	26368-26393	query_temp_blocks_to_disk	_	_	_	_	
175-37	26393-26394	)	_	_	_	_	
175-38	26395-26398	The	_	_	_	_	
175-39	26399-26404	ratio	_	_	_	_	
175-40	26405-26407	of	_	_	_	_	
175-41	26408-26411	the	_	_	_	_	
175-42	26412-26419	highest	_	_	_	_	
175-43	26420-26426	number	_	_	_	_	
175-44	26427-26429	of	_	_	_	_	
175-45	26430-26436	blocks	_	_	_	_	
175-46	26437-26441	read	_	_	_	_	
175-47	26442-26446	over	_	_	_	_	
175-48	26447-26450	the	_	_	_	_	
175-49	26451-26458	average	_	_	_	_	
175-50	26459-26460	(	_	_	_	_	
175-51	26460-26467	io_skew	_	_	_	_	
175-52	26467-26468	)	_	_	_	_	
175-53	26469-26471	It	_	_	_	_	
175-54	26472-26476	also	_	_	_	_	
175-55	26477-26482	makes	_	_	_	_	
175-56	26483-26489	Amazon	_	_	_	_	
175-57	26490-26498	Redshift	_	_	_	_	
175-58	26499-26507	Spectrum	_	_	_	_	
175-59	26508-26515	metrics	_	_	_	_	
175-60	26516-26525	available	_	_	_	_	
175-61	26525-26526	,	_	_	_	_	
175-62	26527-26531	such	_	_	_	_	
175-63	26532-26534	as	_	_	_	_	
175-64	26535-26538	the	_	_	_	_	
175-65	26539-26545	number	_	_	_	_	
175-66	26546-26548	of	_	_	_	_	
175-67	26549-26555	Amazon	_	_	_	_	
175-68	26556-26564	Redshift	_	_	_	_	
175-69	26565-26573	Spectrum	_	_	_	_	
175-70	26574-26578	rows	_	_	_	_	
175-71	26579-26582	and	_	_	_	_	
175-72	26583-26586	MBs	_	_	_	_	
175-73	26587-26594	scanned	_	_	_	_	
175-74	26595-26597	by	_	_	_	_	
175-75	26598-26599	a	_	_	_	_	
175-76	26600-26605	query	_	_	_	_	
175-77	26606-26607	(	_	_	_	_	
175-78	26607-26630	spectrum_scan_row_count	_	_	_	_	
175-79	26631-26634	and	_	_	_	_	
175-80	26635-26656	spectrum_scan_size_mb	_	_	_	_	
175-81	26656-26657	,	_	_	_	_	
175-82	26658-26670	respectively	_	_	_	_	
175-83	26670-26671	)	_	_	_	_	
175-84	26671-26672	.	_	_	_	_	

#Text=The Amazon Redshift system view SVL_QUERY_METRICS_SUMMARY shows the maximum values of metrics for completed queries, and STL_QUERY_METRICS and STV_QUERY_METRICS carry the information at 1-second intervals for the completed and running queries respectively.
176-1	26673-26676	The	_	_	_	_	
176-2	26677-26683	Amazon	_	_	_	_	
176-3	26684-26692	Redshift	_	_	_	_	
176-4	26693-26699	system	_	_	_	_	
176-5	26700-26704	view	_	_	_	_	
176-6	26705-26730	SVL_QUERY_METRICS_SUMMARY	_	_	_	_	
176-7	26731-26736	shows	_	_	_	_	
176-8	26737-26740	the	_	_	_	_	
176-9	26741-26748	maximum	_	_	_	_	
176-10	26749-26755	values	_	_	_	_	
176-11	26756-26758	of	_	_	_	_	
176-12	26759-26766	metrics	_	_	_	_	
176-13	26767-26770	for	_	_	_	_	
176-14	26771-26780	completed	_	_	_	_	
176-15	26781-26788	queries	_	_	_	_	
176-16	26788-26789	,	_	_	_	_	
176-17	26790-26793	and	_	_	_	_	
176-18	26794-26811	STL_QUERY_METRICS	_	_	_	_	
176-19	26812-26815	and	_	_	_	_	
176-20	26816-26833	STV_QUERY_METRICS	_	_	_	_	
176-21	26834-26839	carry	_	_	_	_	
176-22	26840-26843	the	_	_	_	_	
176-23	26844-26855	information	_	_	_	_	
176-24	26856-26858	at	_	_	_	_	
176-25	26859-26860	1	_	_	_	_	
176-26	26860-26861	-	_	_	_	_	
176-27	26861-26867	second	_	_	_	_	
176-28	26868-26877	intervals	_	_	_	_	
176-29	26878-26881	for	_	_	_	_	
176-30	26882-26885	the	_	_	_	_	
176-31	26886-26895	completed	_	_	_	_	
176-32	26896-26899	and	_	_	_	_	
176-33	26900-26907	running	_	_	_	_	
176-34	26908-26915	queries	_	_	_	_	
176-35	26916-26928	respectively	_	_	_	_	
176-36	26928-26929	.	_	_	_	_	

#Text=The Amazon Redshift CloudWatch metrics are data points for use with Amazon CloudWatch monitoring.
177-1	26930-26933	The	_	_	_	_	
177-2	26934-26940	Amazon	_	_	_	_	
177-3	26941-26949	Redshift	_	_	_	_	
177-4	26950-26960	CloudWatch	_	_	_	_	
177-5	26961-26968	metrics	_	_	_	_	
177-6	26969-26972	are	_	_	_	_	
177-7	26973-26977	data	_	_	_	_	
177-8	26978-26984	points	_	_	_	_	
177-9	26985-26988	for	_	_	_	_	
177-10	26989-26992	use	_	_	_	_	
177-11	26993-26997	with	_	_	_	_	
177-12	26998-27004	Amazon	_	_	_	_	
177-13	27005-27015	CloudWatch	_	_	_	_	
177-14	27016-27026	monitoring	_	_	_	_	
177-15	27026-27027	.	_	_	_	_	

#Text=These can be cluster-wide metrics, such as health status or read/write, IOPS, latency, or throughput.
178-1	27028-27033	These	_	_	_	_	
178-2	27034-27037	can	_	_	_	_	
178-3	27038-27040	be	_	_	_	_	
178-4	27041-27053	cluster-wide	_	_	_	_	
178-5	27054-27061	metrics	_	_	_	_	
178-6	27061-27062	,	_	_	_	_	
178-7	27063-27067	such	_	_	_	_	
178-8	27068-27070	as	_	_	_	_	
178-9	27071-27077	health	_	_	_	_	
178-10	27078-27084	status	_	_	_	_	
178-11	27085-27087	or	_	_	_	_	
178-12	27088-27092	read	_	_	_	_	
178-13	27092-27093	/	_	_	_	_	
178-14	27093-27098	write	_	_	_	_	
178-15	27098-27099	,	_	_	_	_	
178-16	27100-27104	IOPS	_	_	_	_	
178-17	27104-27105	,	_	_	_	_	
178-18	27106-27113	latency	_	_	_	_	
178-19	27113-27114	,	_	_	_	_	
178-20	27115-27117	or	_	_	_	_	
178-21	27118-27128	throughput	_	_	_	_	
178-22	27128-27129	.	_	_	_	_	

#Text=It also offers compute node–level data, such as network transmit/receive throughput and read/write latency.
179-1	27130-27132	It	_	_	_	_	
179-2	27133-27137	also	_	_	_	_	
179-3	27138-27144	offers	_	_	_	_	
179-4	27145-27152	compute	_	_	_	_	
179-5	27153-27163	node–level	_	_	_	_	
179-6	27164-27168	data	_	_	_	_	
179-7	27168-27169	,	_	_	_	_	
179-8	27170-27174	such	_	_	_	_	
179-9	27175-27177	as	_	_	_	_	
179-10	27178-27185	network	_	_	_	_	
179-11	27186-27194	transmit	_	_	_	_	
179-12	27194-27195	/	_	_	_	_	
179-13	27195-27202	receive	_	_	_	_	
179-14	27203-27213	throughput	_	_	_	_	
179-15	27214-27217	and	_	_	_	_	
179-16	27218-27222	read	_	_	_	_	
179-17	27222-27223	/	_	_	_	_	
179-18	27223-27228	write	_	_	_	_	
179-19	27229-27236	latency	_	_	_	_	
179-20	27236-27237	.	_	_	_	_	

#Text=At the WLM queue grain, there are the number of queries completed per second, queue length, and others.
180-1	27238-27240	At	_	_	_	_	
180-2	27241-27244	the	_	_	_	_	
180-3	27245-27248	WLM	_	_	_	_	
180-4	27249-27254	queue	_	_	_	_	
180-5	27255-27260	grain	_	_	_	_	
180-6	27260-27261	,	_	_	_	_	
180-7	27262-27267	there	_	_	_	_	
180-8	27268-27271	are	_	_	_	_	
180-9	27272-27275	the	_	_	_	_	
180-10	27276-27282	number	_	_	_	_	
180-11	27283-27285	of	_	_	_	_	
180-12	27286-27293	queries	_	_	_	_	
180-13	27294-27303	completed	_	_	_	_	
180-14	27304-27307	per	_	_	_	_	
180-15	27308-27314	second	_	_	_	_	
180-16	27314-27315	,	_	_	_	_	
180-17	27316-27321	queue	_	_	_	_	
180-18	27322-27328	length	_	_	_	_	
180-19	27328-27329	,	_	_	_	_	
180-20	27330-27333	and	_	_	_	_	
180-21	27334-27340	others	_	_	_	_	
180-22	27340-27341	.	_	_	_	_	

#Text=CloudWatch facilitates monitoring concurrency scaling usage with the metrics ConcurrencyScalingSeconds and ConcurrencyScalingActiveClusters.
181-1	27342-27352	CloudWatch	_	_	_	_	
181-2	27353-27364	facilitates	_	_	_	_	
181-3	27365-27375	monitoring	_	_	_	_	
181-4	27376-27387	concurrency	_	_	_	_	
181-5	27388-27395	scaling	_	_	_	_	
181-6	27396-27401	usage	_	_	_	_	
181-7	27402-27406	with	_	_	_	_	
181-8	27407-27410	the	_	_	_	_	
181-9	27411-27418	metrics	_	_	_	_	
181-10	27418-27419	 	_	_	_	_	
181-11	27419-27444	ConcurrencyScalingSeconds	_	_	_	_	
181-12	27445-27448	and	_	_	_	_	
181-13	27448-27449	 	_	_	_	_	
181-14	27449-27481	ConcurrencyScalingActiveClusters	_	_	_	_	
181-15	27481-27482	.	_	_	_	_	

#Text=It’s recommended to consider the CloudWatch metrics (and the existing notification infrastructure built around them) before investing time in creating something new.
182-1	27483-27485	It	_	_	_	_	
182-2	27485-27486	’	_	_	_	_	
182-3	27486-27487	s	_	_	_	_	
182-4	27488-27499	recommended	_	_	_	_	
182-5	27500-27502	to	_	_	_	_	
182-6	27503-27511	consider	_	_	_	_	
182-7	27512-27515	the	_	_	_	_	
182-8	27516-27526	CloudWatch	_	_	_	_	
182-9	27527-27534	metrics	_	_	_	_	
182-10	27535-27536	(	_	_	_	_	
182-11	27536-27539	and	_	_	_	_	
182-12	27540-27543	the	_	_	_	_	
182-13	27544-27552	existing	_	_	_	_	
182-14	27553-27565	notification	_	_	_	_	
182-15	27566-27580	infrastructure	_	_	_	_	
182-16	27581-27586	built	_	_	_	_	
182-17	27587-27593	around	_	_	_	_	
182-18	27594-27598	them	_	_	_	_	
182-19	27598-27599	)	_	_	_	_	
182-20	27600-27606	before	_	_	_	_	
182-21	27607-27616	investing	_	_	_	_	
182-22	27617-27621	time	_	_	_	_	
182-23	27622-27624	in	_	_	_	_	
182-24	27625-27633	creating	_	_	_	_	
182-25	27634-27643	something	_	_	_	_	
182-26	27644-27647	new	_	_	_	_	
182-27	27647-27648	.	_	_	_	_	

#Text=Similarly, the QMR metrics cover most metric use cases and likely eliminate the need to write custom metrics.
183-1	27649-27658	Similarly	_	_	_	_	
183-2	27658-27659	,	_	_	_	_	
183-3	27660-27663	the	_	_	_	_	
183-4	27664-27667	QMR	_	_	_	_	
183-5	27668-27675	metrics	_	_	_	_	
183-6	27676-27681	cover	_	_	_	_	
183-7	27682-27686	most	_	_	_	_	
183-8	27687-27693	metric	_	_	_	_	
183-9	27694-27697	use	_	_	_	_	
183-10	27698-27703	cases	_	_	_	_	
183-11	27704-27707	and	_	_	_	_	
183-12	27708-27714	likely	_	_	_	_	
183-13	27715-27724	eliminate	_	_	_	_	
183-14	27725-27728	the	_	_	_	_	
183-15	27729-27733	need	_	_	_	_	
183-16	27734-27736	to	_	_	_	_	
183-17	27737-27742	write	_	_	_	_	
183-18	27743-27749	custom	_	_	_	_	
183-19	27750-27757	metrics	_	_	_	_	
183-20	27757-27758	.	_	_	_	_	

#Text=Tip #8: Federated queries connect the OLAP, OLTP and data lake worlds
#Text=The new Federated Query feature in Amazon Redshift allows you to run analytics directly against live data residing on your OLTP source system databases and Amazon S3 data lake, without the overhead of performing ETL and ingesting source data into Amazon Redshift tables.
184-1	27759-27762	Tip	_	_	_	_	
184-2	27763-27765	#8	_	_	_	_	
184-3	27765-27766	:	_	_	_	_	
184-4	27766-27767	 	_	_	_	_	
184-5	27767-27776	Federated	_	_	_	_	
184-6	27777-27784	queries	_	_	_	_	
184-7	27785-27792	connect	_	_	_	_	
184-8	27793-27796	the	_	_	_	_	
184-9	27797-27801	OLAP	_	_	_	_	
184-10	27801-27802	,	_	_	_	_	
184-11	27803-27807	OLTP	_	_	_	_	
184-12	27808-27811	and	_	_	_	_	
184-13	27812-27816	data	_	_	_	_	
184-14	27817-27821	lake	_	_	_	_	
184-15	27822-27828	worlds	_	_	_	_	
184-16	27829-27832	The	_	_	_	_	
184-17	27833-27836	new	_	_	_	_	
184-18	27837-27846	Federated	_	_	_	_	
184-19	27847-27852	Query	_	_	_	_	
184-20	27853-27860	feature	_	_	_	_	
184-21	27861-27863	in	_	_	_	_	
184-22	27864-27870	Amazon	_	_	_	_	
184-23	27871-27879	Redshift	_	_	_	_	
184-24	27880-27886	allows	_	_	_	_	
184-25	27887-27890	you	_	_	_	_	
184-26	27891-27893	to	_	_	_	_	
184-27	27894-27897	run	_	_	_	_	
184-28	27898-27907	analytics	_	_	_	_	
184-29	27908-27916	directly	_	_	_	_	
184-30	27917-27924	against	_	_	_	_	
184-31	27925-27929	live	_	_	_	_	
184-32	27930-27934	data	_	_	_	_	
184-33	27935-27943	residing	_	_	_	_	
184-34	27944-27946	on	_	_	_	_	
184-35	27947-27951	your	_	_	_	_	
184-36	27952-27956	OLTP	_	_	_	_	
184-37	27957-27963	source	_	_	_	_	
184-38	27964-27970	system	_	_	_	_	
184-39	27971-27980	databases	_	_	_	_	
184-40	27981-27984	and	_	_	_	_	
184-41	27985-27991	Amazon	_	_	_	_	
184-42	27992-27994	S3	_	_	_	_	
184-43	27995-27999	data	_	_	_	_	
184-44	28000-28004	lake	_	_	_	_	
184-45	28004-28005	,	_	_	_	_	
184-46	28006-28013	without	_	_	_	_	
184-47	28014-28017	the	_	_	_	_	
184-48	28018-28026	overhead	_	_	_	_	
184-49	28027-28029	of	_	_	_	_	
184-50	28030-28040	performing	_	_	_	_	
184-51	28041-28044	ETL	_	_	_	_	
184-52	28045-28048	and	_	_	_	_	
184-53	28049-28058	ingesting	_	_	_	_	
184-54	28059-28065	source	_	_	_	_	
184-55	28066-28070	data	_	_	_	_	
184-56	28071-28075	into	_	_	_	_	
184-57	28076-28082	Amazon	_	_	_	_	
184-58	28083-28091	Redshift	_	_	_	_	
184-59	28092-28098	tables	_	_	_	_	
184-60	28098-28099	.	_	_	_	_	

#Text=This feature gives you a convenient and efficient option for providing realtime data visibility on operational reports, as an alternative to micro-ETL batch ingestion of realtime data into the data warehouse.
185-1	28100-28104	This	_	_	_	_	
185-2	28105-28112	feature	_	_	_	_	
185-3	28113-28118	gives	_	_	_	_	
185-4	28119-28122	you	_	_	_	_	
185-5	28123-28124	a	_	_	_	_	
185-6	28125-28135	convenient	_	_	_	_	
185-7	28136-28139	and	_	_	_	_	
185-8	28140-28149	efficient	_	_	_	_	
185-9	28150-28156	option	_	_	_	_	
185-10	28157-28160	for	_	_	_	_	
185-11	28161-28170	providing	_	_	_	_	
185-12	28171-28179	realtime	_	_	_	_	
185-13	28180-28184	data	_	_	_	_	
185-14	28185-28195	visibility	_	_	_	_	
185-15	28196-28198	on	_	_	_	_	
185-16	28199-28210	operational	_	_	_	_	
185-17	28211-28218	reports	_	_	_	_	
185-18	28218-28219	,	_	_	_	_	
185-19	28220-28222	as	_	_	_	_	
185-20	28223-28225	an	_	_	_	_	
185-21	28226-28237	alternative	_	_	_	_	
185-22	28238-28240	to	_	_	_	_	
185-23	28241-28250	micro-ETL	_	_	_	_	
185-24	28251-28256	batch	_	_	_	_	
185-25	28257-28266	ingestion	_	_	_	_	
185-26	28267-28269	of	_	_	_	_	
185-27	28270-28278	realtime	_	_	_	_	
185-28	28279-28283	data	_	_	_	_	
185-29	28284-28288	into	_	_	_	_	
185-30	28289-28292	the	_	_	_	_	
185-31	28293-28297	data	_	_	_	_	
185-32	28298-28307	warehouse	_	_	_	_	
185-33	28307-28308	.	_	_	_	_	

#Text=By combining historical trend data from the data warehouse with live developing trends from the source systems, you can gather valuable insights to drive real-time business decision making.
186-1	28309-28311	By	_	_	_	_	
186-2	28312-28321	combining	_	_	_	_	
186-3	28322-28332	historical	_	_	_	_	
186-4	28333-28338	trend	_	_	_	_	
186-5	28339-28343	data	_	_	_	_	
186-6	28344-28348	from	_	_	_	_	
186-7	28349-28352	the	_	_	_	_	
186-8	28353-28357	data	_	_	_	_	
186-9	28358-28367	warehouse	_	_	_	_	
186-10	28368-28372	with	_	_	_	_	
186-11	28373-28377	live	_	_	_	_	
186-12	28378-28388	developing	_	_	_	_	
186-13	28389-28395	trends	_	_	_	_	
186-14	28396-28400	from	_	_	_	_	
186-15	28401-28404	the	_	_	_	_	
186-16	28405-28411	source	_	_	_	_	
186-17	28412-28419	systems	_	_	_	_	
186-18	28419-28420	,	_	_	_	_	
186-19	28421-28424	you	_	_	_	_	
186-20	28425-28428	can	_	_	_	_	
186-21	28429-28435	gather	_	_	_	_	
186-22	28436-28444	valuable	_	_	_	_	
186-23	28445-28453	insights	_	_	_	_	
186-24	28454-28456	to	_	_	_	_	
186-25	28457-28462	drive	_	_	_	_	
186-26	28463-28472	real-time	_	_	_	_	
186-27	28473-28481	business	_	_	_	_	
186-28	28482-28490	decision	_	_	_	_	
186-29	28491-28497	making	_	_	_	_	
186-30	28497-28498	.	_	_	_	_	

#Text=For example, consider sales data residing in three different data stores:
#Text=Live sales order data stored on an Amazon RDS for PostgreSQL database (represented as “ext_postgres” in the following external schema)
#Text=Historical sales data warehoused in a local Amazon Redshift database (represented as “local_dwh”)
#Text=Archived, “cold” sales data older than 5 years stored on Amazon S3 (represented as “ext_spectrum”)
#Text=We can create a late binding view in Amazon Redshift that allows you to merge and query data from all three sources.
187-1	28499-28502	For	_	_	_	_	
187-2	28503-28510	example	_	_	_	_	
187-3	28510-28511	,	_	_	_	_	
187-4	28512-28520	consider	_	_	_	_	
187-5	28521-28526	sales	_	_	_	_	
187-6	28527-28531	data	_	_	_	_	
187-7	28532-28540	residing	_	_	_	_	
187-8	28541-28543	in	_	_	_	_	
187-9	28544-28549	three	_	_	_	_	
187-10	28550-28559	different	_	_	_	_	
187-11	28560-28564	data	_	_	_	_	
187-12	28565-28571	stores	_	_	_	_	
187-13	28571-28572	:	_	_	_	_	
187-14	28573-28577	Live	_	_	_	_	
187-15	28578-28583	sales	_	_	_	_	
187-16	28584-28589	order	_	_	_	_	
187-17	28590-28594	data	_	_	_	_	
187-18	28595-28601	stored	_	_	_	_	
187-19	28602-28604	on	_	_	_	_	
187-20	28605-28607	an	_	_	_	_	
187-21	28608-28614	Amazon	_	_	_	_	
187-22	28615-28618	RDS	_	_	_	_	
187-23	28619-28622	for	_	_	_	_	
187-24	28623-28633	PostgreSQL	_	_	_	_	
187-25	28634-28642	database	_	_	_	_	
187-26	28643-28644	(	_	_	_	_	
187-27	28644-28655	represented	_	_	_	_	
187-28	28656-28658	as	_	_	_	_	
187-29	28659-28660	“	_	_	_	_	
187-30	28660-28672	ext_postgres	_	_	_	_	
187-31	28672-28673	”	_	_	_	_	
187-32	28674-28676	in	_	_	_	_	
187-33	28677-28680	the	_	_	_	_	
187-34	28681-28690	following	_	_	_	_	
187-35	28691-28699	external	_	_	_	_	
187-36	28700-28706	schema	_	_	_	_	
187-37	28706-28707	)	_	_	_	_	
187-38	28708-28718	Historical	_	_	_	_	
187-39	28719-28724	sales	_	_	_	_	
187-40	28725-28729	data	_	_	_	_	
187-41	28730-28740	warehoused	_	_	_	_	
187-42	28741-28743	in	_	_	_	_	
187-43	28744-28745	a	_	_	_	_	
187-44	28746-28751	local	_	_	_	_	
187-45	28752-28758	Amazon	_	_	_	_	
187-46	28759-28767	Redshift	_	_	_	_	
187-47	28768-28776	database	_	_	_	_	
187-48	28777-28778	(	_	_	_	_	
187-49	28778-28789	represented	_	_	_	_	
187-50	28790-28792	as	_	_	_	_	
187-51	28793-28794	“	_	_	_	_	
187-52	28794-28803	local_dwh	_	_	_	_	
187-53	28803-28804	”	_	_	_	_	
187-54	28804-28805	)	_	_	_	_	
187-55	28806-28814	Archived	_	_	_	_	
187-56	28814-28815	,	_	_	_	_	
187-57	28816-28817	“	_	_	_	_	
187-58	28817-28821	cold	_	_	_	_	
187-59	28821-28822	”	_	_	_	_	
187-60	28823-28828	sales	_	_	_	_	
187-61	28829-28833	data	_	_	_	_	
187-62	28834-28839	older	_	_	_	_	
187-63	28840-28844	than	_	_	_	_	
187-64	28845-28846	5	_	_	_	_	
187-65	28847-28852	years	_	_	_	_	
187-66	28853-28859	stored	_	_	_	_	
187-67	28860-28862	on	_	_	_	_	
187-68	28863-28869	Amazon	_	_	_	_	
187-69	28870-28872	S3	_	_	_	_	
187-70	28872-28873	 	_	_	_	_	
187-71	28873-28874	(	_	_	_	_	
187-72	28874-28885	represented	_	_	_	_	
187-73	28886-28888	as	_	_	_	_	
187-74	28889-28890	“	_	_	_	_	
187-75	28890-28902	ext_spectrum	_	_	_	_	
187-76	28902-28903	”	_	_	_	_	
187-77	28903-28904	)	_	_	_	_	
187-78	28905-28907	We	_	_	_	_	
187-79	28908-28911	can	_	_	_	_	
187-80	28912-28918	create	_	_	_	_	
187-81	28919-28920	a	_	_	_	_	
187-82	28921-28925	late	_	_	_	_	
187-83	28926-28933	binding	_	_	_	_	
187-84	28934-28938	view	_	_	_	_	
187-85	28939-28941	in	_	_	_	_	
187-86	28942-28948	Amazon	_	_	_	_	
187-87	28949-28957	Redshift	_	_	_	_	
187-88	28958-28962	that	_	_	_	_	
187-89	28963-28969	allows	_	_	_	_	
187-90	28970-28973	you	_	_	_	_	
187-91	28974-28976	to	_	_	_	_	
187-92	28977-28982	merge	_	_	_	_	
187-93	28983-28986	and	_	_	_	_	
187-94	28987-28992	query	_	_	_	_	
187-95	28993-28997	data	_	_	_	_	
187-96	28998-29002	from	_	_	_	_	
187-97	29003-29006	all	_	_	_	_	
187-98	29007-29012	three	_	_	_	_	
187-99	29013-29020	sources	_	_	_	_	
187-100	29020-29021	.	_	_	_	_	

#Text=See the following code:
#Text=CREATE VIEW store_sales_integrated AS
#Text=SELECT * FROM ext_postgres.store_sales_live
#Text=UNION ALL
#Text=SELECT * FROM local_dwh.store_sales_current
#Text=UNION ALL
#Text=SELECT ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk,
#Text=ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_quantity,
#Text=ss_wholesale_cost, ss_list_price, ss_sales_price, ss_ext_discount_amt,
#Text=ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, ss_ext_tax,
#Text=ss_coupon_amt, ss_net_paid, ss_net_paid_inc_tax, ss_net_profit
#Text=FROM ext_spectrum.store_sales_historical
#Text=WITH NO SCHEMA BINDING
#Text=Currently, direct federated querying is supported for data stored in Amazon Aurora PostgreSQL and Amazon RDS for PostgreSQL databases, with support for other major RDS engines coming soon.
188-1	29022-29025	See	_	_	_	_	
188-2	29026-29029	the	_	_	_	_	
188-3	29030-29039	following	_	_	_	_	
188-4	29040-29044	code	_	_	_	_	
188-5	29044-29045	:	_	_	_	_	
188-6	29046-29052	CREATE	_	_	_	_	
188-7	29053-29057	VIEW	_	_	_	_	
188-8	29058-29080	store_sales_integrated	_	_	_	_	
188-9	29081-29083	AS	_	_	_	_	
188-10	29084-29090	SELECT	_	_	_	_	
188-11	29091-29092	*	_	_	_	_	
188-12	29093-29097	FROM	_	_	_	_	
188-13	29098-29127	ext_postgres.store_sales_live	_	_	_	_	
188-14	29128-29133	UNION	_	_	_	_	
188-15	29134-29137	ALL	_	_	_	_	
188-16	29138-29144	SELECT	_	_	_	_	
188-17	29145-29146	*	_	_	_	_	
188-18	29147-29151	FROM	_	_	_	_	
188-19	29152-29181	local_dwh.store_sales_current	_	_	_	_	
188-20	29182-29187	UNION	_	_	_	_	
188-21	29188-29191	ALL	_	_	_	_	
188-22	29192-29198	SELECT	_	_	_	_	
188-23	29199-29214	ss_sold_date_sk	_	_	_	_	
188-24	29214-29215	,	_	_	_	_	
188-25	29216-29231	ss_sold_time_sk	_	_	_	_	
188-26	29231-29232	,	_	_	_	_	
188-27	29233-29243	ss_item_sk	_	_	_	_	
188-28	29243-29244	,	_	_	_	_	
188-29	29245-29259	ss_customer_sk	_	_	_	_	
188-30	29259-29260	,	_	_	_	_	
188-31	29261-29272	ss_cdemo_sk	_	_	_	_	
188-32	29272-29273	,	_	_	_	_	
188-33	29274-29285	ss_hdemo_sk	_	_	_	_	
188-34	29285-29286	,	_	_	_	_	
188-35	29287-29297	ss_addr_sk	_	_	_	_	
188-36	29297-29298	,	_	_	_	_	
188-37	29299-29310	ss_store_sk	_	_	_	_	
188-38	29310-29311	,	_	_	_	_	
188-39	29312-29323	ss_promo_sk	_	_	_	_	
188-40	29323-29324	,	_	_	_	_	
188-41	29325-29341	ss_ticket_number	_	_	_	_	
188-42	29341-29342	,	_	_	_	_	
188-43	29343-29354	ss_quantity	_	_	_	_	
188-44	29354-29355	,	_	_	_	_	
188-45	29356-29373	ss_wholesale_cost	_	_	_	_	
188-46	29373-29374	,	_	_	_	_	
188-47	29375-29388	ss_list_price	_	_	_	_	
188-48	29388-29389	,	_	_	_	_	
188-49	29390-29404	ss_sales_price	_	_	_	_	
188-50	29404-29405	,	_	_	_	_	
188-51	29406-29425	ss_ext_discount_amt	_	_	_	_	
188-52	29425-29426	,	_	_	_	_	
188-53	29427-29445	ss_ext_sales_price	_	_	_	_	
188-54	29445-29446	,	_	_	_	_	
188-55	29447-29468	ss_ext_wholesale_cost	_	_	_	_	
188-56	29468-29469	,	_	_	_	_	
188-57	29470-29487	ss_ext_list_price	_	_	_	_	
188-58	29487-29488	,	_	_	_	_	
188-59	29489-29499	ss_ext_tax	_	_	_	_	
188-60	29499-29500	,	_	_	_	_	
188-61	29501-29514	ss_coupon_amt	_	_	_	_	
188-62	29514-29515	,	_	_	_	_	
188-63	29516-29527	ss_net_paid	_	_	_	_	
188-64	29527-29528	,	_	_	_	_	
188-65	29529-29548	ss_net_paid_inc_tax	_	_	_	_	
188-66	29548-29549	,	_	_	_	_	
188-67	29550-29563	ss_net_profit	_	_	_	_	
188-68	29564-29568	FROM	_	_	_	_	
188-69	29569-29604	ext_spectrum.store_sales_historical	_	_	_	_	
188-70	29605-29609	WITH	_	_	_	_	
188-71	29610-29612	NO	_	_	_	_	
188-72	29613-29619	SCHEMA	_	_	_	_	
188-73	29620-29627	BINDING	_	_	_	_	
188-74	29628-29637	Currently	_	_	_	_	
188-75	29637-29638	,	_	_	_	_	
188-76	29639-29645	direct	_	_	_	_	
188-77	29646-29655	federated	_	_	_	_	
188-78	29656-29664	querying	_	_	_	_	
188-79	29665-29667	is	_	_	_	_	
188-80	29668-29677	supported	_	_	_	_	
188-81	29678-29681	for	_	_	_	_	
188-82	29682-29686	data	_	_	_	_	
188-83	29687-29693	stored	_	_	_	_	
188-84	29694-29696	in	_	_	_	_	
188-85	29697-29703	Amazon	_	_	_	_	
188-86	29704-29710	Aurora	_	_	_	_	
188-87	29711-29721	PostgreSQL	_	_	_	_	
188-88	29722-29725	and	_	_	_	_	
188-89	29726-29732	Amazon	_	_	_	_	
188-90	29733-29736	RDS	_	_	_	_	
188-91	29737-29740	for	_	_	_	_	
188-92	29741-29751	PostgreSQL	_	_	_	_	
188-93	29752-29761	databases	_	_	_	_	
188-94	29761-29762	,	_	_	_	_	
188-95	29763-29767	with	_	_	_	_	
188-96	29768-29775	support	_	_	_	_	
188-97	29776-29779	for	_	_	_	_	
188-98	29780-29785	other	_	_	_	_	
188-99	29786-29791	major	_	_	_	_	
188-100	29792-29795	RDS	_	_	_	_	
188-101	29796-29803	engines	_	_	_	_	
188-102	29804-29810	coming	_	_	_	_	
188-103	29811-29815	soon	_	_	_	_	
188-104	29815-29816	.	_	_	_	_	

#Text=You can also use the federated query feature to simplify the ETL and data-ingestion process.
189-1	29817-29820	You	_	_	_	_	
189-2	29821-29824	can	_	_	_	_	
189-3	29825-29829	also	_	_	_	_	
189-4	29830-29833	use	_	_	_	_	
189-5	29834-29837	the	_	_	_	_	
189-6	29838-29847	federated	_	_	_	_	
189-7	29848-29853	query	_	_	_	_	
189-8	29854-29861	feature	_	_	_	_	
189-9	29862-29864	to	_	_	_	_	
189-10	29865-29873	simplify	_	_	_	_	
189-11	29874-29877	the	_	_	_	_	
189-12	29878-29881	ETL	_	_	_	_	
189-13	29882-29885	and	_	_	_	_	
189-14	29886-29900	data-ingestion	_	_	_	_	
189-15	29901-29908	process	_	_	_	_	
189-16	29908-29909	.	_	_	_	_	

#Text=Instead of staging data on Amazon S3, and performing a COPY operation, federated queries allow you to ingest data directly into an Amazon Redshift table in one step, as part of a federated CTAS/INSERT SQL query.
190-1	29910-29917	Instead	_	_	_	_	
190-2	29918-29920	of	_	_	_	_	
190-3	29921-29928	staging	_	_	_	_	
190-4	29929-29933	data	_	_	_	_	
190-5	29934-29936	on	_	_	_	_	
190-6	29937-29943	Amazon	_	_	_	_	
190-7	29944-29946	S3	_	_	_	_	
190-8	29946-29947	,	_	_	_	_	
190-9	29948-29951	and	_	_	_	_	
190-10	29952-29962	performing	_	_	_	_	
190-11	29963-29964	a	_	_	_	_	
190-12	29965-29969	COPY	_	_	_	_	
190-13	29970-29979	operation	_	_	_	_	
190-14	29979-29980	,	_	_	_	_	
190-15	29981-29990	federated	_	_	_	_	
190-16	29991-29998	queries	_	_	_	_	
190-17	29999-30004	allow	_	_	_	_	
190-18	30005-30008	you	_	_	_	_	
190-19	30009-30011	to	_	_	_	_	
190-20	30012-30018	ingest	_	_	_	_	
190-21	30019-30023	data	_	_	_	_	
190-22	30024-30032	directly	_	_	_	_	
190-23	30033-30037	into	_	_	_	_	
190-24	30038-30040	an	_	_	_	_	
190-25	30041-30047	Amazon	_	_	_	_	
190-26	30048-30056	Redshift	_	_	_	_	
190-27	30057-30062	table	_	_	_	_	
190-28	30063-30065	in	_	_	_	_	
190-29	30066-30069	one	_	_	_	_	
190-30	30070-30074	step	_	_	_	_	
190-31	30074-30075	,	_	_	_	_	
190-32	30076-30078	as	_	_	_	_	
190-33	30079-30083	part	_	_	_	_	
190-34	30084-30086	of	_	_	_	_	
190-35	30087-30088	a	_	_	_	_	
190-36	30089-30098	federated	_	_	_	_	
190-37	30099-30103	CTAS	_	_	_	_	
190-38	30103-30104	/	_	_	_	_	
190-39	30104-30110	INSERT	_	_	_	_	
190-40	30111-30114	SQL	_	_	_	_	
190-41	30115-30120	query	_	_	_	_	
190-42	30120-30121	.	_	_	_	_	

#Text=For example, the following code shows an upsert/merge operation in which the COPY operation from Amazon S3 to Amazon Redshift is replaced with a federated query sourced directly from PostgreSQL:
#Text=BEGIN;
#Text=CREATE TEMP TABLE staging (LIKE ods.store_sales);
#Text=-- replace the following COPY from S3:
#Text=/*COPY staging FROM 's3://yourETLbucket/daily_store_sales/'
#Text=IAM_ROLE 'arn:aws:iam::<account_id>:role/<s3_reader_role>'
#Text=DELIMITER '|' COMPUPDATE OFF; */
#Text=-- with this federated query to load staging data directly from PostgreSQL source
#Text=INSERT INTO staging SELECT * FROM pg.store_sales p
#Text=WHERE p.last_updated_date > (SELECT MAX(last_updated_date) FROM ods.store_sales);
#Text=DELETE FROM ods.store_sales USING staging s WHERE ods.store_sales.id = s.id;
#Text=INSERT INTO ods.store_sales SELECT * FROM staging;
#Text=DROP TABLE staging;
#Text=COMMIT;
#Text=For more information about setting up the preceding federated queries, see Build a Simplified ETL and Live Data Query Solution using Redshift Federated Query.
191-1	30122-30125	For	_	_	_	_	
191-2	30126-30133	example	_	_	_	_	
191-3	30133-30134	,	_	_	_	_	
191-4	30135-30138	the	_	_	_	_	
191-5	30139-30148	following	_	_	_	_	
191-6	30149-30153	code	_	_	_	_	
191-7	30154-30159	shows	_	_	_	_	
191-8	30160-30162	an	_	_	_	_	
191-9	30163-30169	upsert	_	_	_	_	
191-10	30169-30170	/	_	_	_	_	
191-11	30170-30175	merge	_	_	_	_	
191-12	30176-30185	operation	_	_	_	_	
191-13	30186-30188	in	_	_	_	_	
191-14	30189-30194	which	_	_	_	_	
191-15	30195-30198	the	_	_	_	_	
191-16	30199-30203	COPY	_	_	_	_	
191-17	30204-30213	operation	_	_	_	_	
191-18	30214-30218	from	_	_	_	_	
191-19	30219-30225	Amazon	_	_	_	_	
191-20	30226-30228	S3	_	_	_	_	
191-21	30229-30231	to	_	_	_	_	
191-22	30232-30238	Amazon	_	_	_	_	
191-23	30239-30247	Redshift	_	_	_	_	
191-24	30248-30250	is	_	_	_	_	
191-25	30251-30259	replaced	_	_	_	_	
191-26	30260-30264	with	_	_	_	_	
191-27	30265-30266	a	_	_	_	_	
191-28	30267-30276	federated	_	_	_	_	
191-29	30277-30282	query	_	_	_	_	
191-30	30283-30290	sourced	_	_	_	_	
191-31	30291-30299	directly	_	_	_	_	
191-32	30300-30304	from	_	_	_	_	
191-33	30305-30315	PostgreSQL	_	_	_	_	
191-34	30315-30316	:	_	_	_	_	
191-35	30317-30322	BEGIN	_	_	_	_	
191-36	30322-30323	;	_	_	_	_	
191-37	30324-30330	CREATE	_	_	_	_	
191-38	30331-30335	TEMP	_	_	_	_	
191-39	30336-30341	TABLE	_	_	_	_	
191-40	30342-30349	staging	_	_	_	_	
191-41	30350-30351	(	_	_	_	_	
191-42	30351-30355	LIKE	_	_	_	_	
191-43	30356-30371	ods.store_sales	_	_	_	_	
191-44	30371-30372	)	_	_	_	_	
191-45	30372-30373	;	_	_	_	_	
191-46	30374-30375	-	_	_	_	_	
191-47	30375-30376	-	_	_	_	_	
191-48	30377-30384	replace	_	_	_	_	
191-49	30385-30388	the	_	_	_	_	
191-50	30389-30398	following	_	_	_	_	
191-51	30399-30403	COPY	_	_	_	_	
191-52	30404-30408	from	_	_	_	_	
191-53	30409-30411	S3	_	_	_	_	
191-54	30411-30412	:	_	_	_	_	
191-55	30413-30414	/	_	_	_	_	
191-56	30414-30415	*	_	_	_	_	
191-57	30415-30419	COPY	_	_	_	_	
191-58	30420-30427	staging	_	_	_	_	
191-59	30428-30432	FROM	_	_	_	_	
191-60	30433-30434	'	_	_	_	_	
191-61	30434-30436	s3	_	_	_	_	
191-62	30436-30437	:	_	_	_	_	
191-63	30437-30438	/	_	_	_	_	
191-64	30438-30439	/	_	_	_	_	
191-65	30439-30452	yourETLbucket	_	_	_	_	
191-66	30452-30453	/	_	_	_	_	
191-67	30453-30470	daily_store_sales	_	_	_	_	
191-68	30470-30471	/	_	_	_	_	
191-69	30471-30472	'	_	_	_	_	
191-70	30473-30481	IAM_ROLE	_	_	_	_	
191-71	30482-30483	'	_	_	_	_	
191-72	30483-30486	arn	_	_	_	_	
191-73	30486-30487	:	_	_	_	_	
191-74	30487-30490	aws	_	_	_	_	
191-75	30490-30491	:	_	_	_	_	
191-76	30491-30494	iam	_	_	_	_	
191-77	30494-30495	:	_	_	_	_	
191-78	30495-30496	:	_	_	_	_	
191-79	30496-30497	<	_	_	_	_	
191-80	30497-30507	account_id	_	_	_	_	
191-81	30507-30508	>	_	_	_	_	
191-82	30508-30509	:	_	_	_	_	
191-83	30509-30513	role	_	_	_	_	
191-84	30513-30514	/	_	_	_	_	
191-85	30514-30515	<	_	_	_	_	
191-86	30515-30517	s3	_	_	_	_	
191-87	30517-30518	_	_	_	_	_	
191-88	30518-30529	reader_role	_	_	_	_	
191-89	30529-30530	>	_	_	_	_	
191-90	30530-30531	'	_	_	_	_	
191-91	30532-30541	DELIMITER	_	_	_	_	
191-92	30542-30543	'	_	_	_	_	
191-93	30543-30544	|	_	_	_	_	
191-94	30544-30545	'	_	_	_	_	
191-95	30546-30556	COMPUPDATE	_	_	_	_	
191-96	30557-30560	OFF	_	_	_	_	
191-97	30560-30561	;	_	_	_	_	
191-98	30562-30563	*	_	_	_	_	
191-99	30563-30564	/	_	_	_	_	
191-100	30565-30566	-	_	_	_	_	
191-101	30566-30567	-	_	_	_	_	
191-102	30568-30572	with	_	_	_	_	
191-103	30573-30577	this	_	_	_	_	
191-104	30578-30587	federated	_	_	_	_	
191-105	30588-30593	query	_	_	_	_	
191-106	30594-30596	to	_	_	_	_	
191-107	30597-30601	load	_	_	_	_	
191-108	30602-30609	staging	_	_	_	_	
191-109	30610-30614	data	_	_	_	_	
191-110	30615-30623	directly	_	_	_	_	
191-111	30624-30628	from	_	_	_	_	
191-112	30629-30639	PostgreSQL	_	_	_	_	
191-113	30640-30646	source	_	_	_	_	
191-114	30647-30653	INSERT	_	_	_	_	
191-115	30654-30658	INTO	_	_	_	_	
191-116	30659-30666	staging	_	_	_	_	
191-117	30667-30673	SELECT	_	_	_	_	
191-118	30674-30675	*	_	_	_	_	
191-119	30676-30680	FROM	_	_	_	_	
191-120	30681-30695	pg.store_sales	_	_	_	_	
191-121	30696-30697	p	_	_	_	_	
191-122	30698-30703	WHERE	_	_	_	_	
191-123	30704-30723	p.last_updated_date	_	_	_	_	
191-124	30724-30725	>	_	_	_	_	
191-125	30726-30727	(	_	_	_	_	
191-126	30727-30733	SELECT	_	_	_	_	
191-127	30734-30737	MAX	_	_	_	_	
191-128	30737-30738	(	_	_	_	_	
191-129	30738-30755	last_updated_date	_	_	_	_	
191-130	30755-30756	)	_	_	_	_	
191-131	30757-30761	FROM	_	_	_	_	
191-132	30762-30777	ods.store_sales	_	_	_	_	
191-133	30777-30778	)	_	_	_	_	
191-134	30778-30779	;	_	_	_	_	
191-135	30780-30786	DELETE	_	_	_	_	
191-136	30787-30791	FROM	_	_	_	_	
191-137	30792-30807	ods.store_sales	_	_	_	_	
191-138	30808-30813	USING	_	_	_	_	
191-139	30814-30821	staging	_	_	_	_	
191-140	30822-30823	s	_	_	_	_	
191-141	30824-30829	WHERE	_	_	_	_	
191-142	30830-30848	ods.store_sales.id	_	_	_	_	
191-143	30849-30850	=	_	_	_	_	
191-144	30851-30855	s.id	_	_	_	_	
191-145	30855-30856	;	_	_	_	_	
191-146	30857-30863	INSERT	_	_	_	_	
191-147	30864-30868	INTO	_	_	_	_	
191-148	30869-30884	ods.store_sales	_	_	_	_	
191-149	30885-30891	SELECT	_	_	_	_	
191-150	30892-30893	*	_	_	_	_	
191-151	30894-30898	FROM	_	_	_	_	
191-152	30899-30906	staging	_	_	_	_	
191-153	30906-30907	;	_	_	_	_	
191-154	30908-30912	DROP	_	_	_	_	
191-155	30913-30918	TABLE	_	_	_	_	
191-156	30919-30926	staging	_	_	_	_	
191-157	30926-30927	;	_	_	_	_	
191-158	30928-30934	COMMIT	_	_	_	_	
191-159	30934-30935	;	_	_	_	_	
191-160	30936-30939	For	_	_	_	_	
191-161	30940-30944	more	_	_	_	_	
191-162	30945-30956	information	_	_	_	_	
191-163	30957-30962	about	_	_	_	_	
191-164	30963-30970	setting	_	_	_	_	
191-165	30971-30973	up	_	_	_	_	
191-166	30974-30977	the	_	_	_	_	
191-167	30978-30987	preceding	_	_	_	_	
191-168	30988-30997	federated	_	_	_	_	
191-169	30998-31005	queries	_	_	_	_	
191-170	31005-31006	,	_	_	_	_	
191-171	31007-31010	see	_	_	_	_	
191-172	31011-31016	Build	_	_	_	_	
191-173	31017-31018	a	_	_	_	_	
191-174	31019-31029	Simplified	_	_	_	_	
191-175	31030-31033	ETL	_	_	_	_	
191-176	31034-31037	and	_	_	_	_	
191-177	31038-31042	Live	_	_	_	_	
191-178	31043-31047	Data	_	_	_	_	
191-179	31048-31053	Query	_	_	_	_	
191-180	31054-31062	Solution	_	_	_	_	
191-181	31063-31068	using	_	_	_	_	
191-182	31069-31077	Redshift	_	_	_	_	
191-183	31078-31087	Federated	_	_	_	_	
191-184	31088-31093	Query	_	_	_	_	
191-185	31093-31094	.	_	_	_	_	

#Text=For additional tips and best practices on federated queries, see Best practices for Amazon Redshift Federated Query.
192-1	31095-31098	For	_	_	_	_	
192-2	31099-31109	additional	_	_	_	_	
192-3	31110-31114	tips	_	_	_	_	
192-4	31115-31118	and	_	_	_	_	
192-5	31119-31123	best	_	_	_	_	
192-6	31124-31133	practices	_	_	_	_	
192-7	31134-31136	on	_	_	_	_	
192-8	31137-31146	federated	_	_	_	_	
192-9	31147-31154	queries	_	_	_	_	
192-10	31154-31155	,	_	_	_	_	
192-11	31156-31159	see	_	_	_	_	
192-12	31160-31164	Best	_	_	_	_	
192-13	31165-31174	practices	_	_	_	_	
192-14	31175-31178	for	_	_	_	_	
192-15	31179-31185	Amazon	_	_	_	_	
192-16	31186-31194	Redshift	_	_	_	_	
192-17	31195-31204	Federated	_	_	_	_	
192-18	31205-31210	Query	_	_	_	_	
192-19	31210-31211	.	_	_	_	_	

#Text=Tip #9: Maintaining efficient data loads
#Text=Amazon Redshift best practices suggest using the COPY command to perform data loads of file-based data.
193-1	31212-31215	Tip	_	_	_	_	
193-2	31216-31218	#9	_	_	_	_	
193-3	31218-31219	:	_	_	_	_	
193-4	31220-31231	Maintaining	_	_	_	_	
193-5	31232-31241	efficient	_	_	_	_	
193-6	31242-31246	data	_	_	_	_	
193-7	31247-31252	loads	_	_	_	_	
193-8	31253-31259	Amazon	_	_	_	_	
193-9	31260-31268	Redshift	_	_	_	_	
193-10	31269-31273	best	_	_	_	_	
193-11	31274-31283	practices	_	_	_	_	
193-12	31284-31291	suggest	_	_	_	_	
193-13	31292-31297	using	_	_	_	_	
193-14	31298-31301	the	_	_	_	_	
193-15	31302-31306	COPY	_	_	_	_	
193-16	31307-31314	command	_	_	_	_	
193-17	31315-31317	to	_	_	_	_	
193-18	31318-31325	perform	_	_	_	_	
193-19	31326-31330	data	_	_	_	_	
193-20	31331-31336	loads	_	_	_	_	
193-21	31337-31339	of	_	_	_	_	
193-22	31340-31350	file-based	_	_	_	_	
193-23	31351-31355	data	_	_	_	_	
193-24	31355-31356	.	_	_	_	_	

#Text=Single-row INSERTs are an anti-pattern.
194-1	31357-31367	Single-row	_	_	_	_	
194-2	31368-31375	INSERTs	_	_	_	_	
194-3	31376-31379	are	_	_	_	_	
194-4	31380-31382	an	_	_	_	_	
194-5	31383-31395	anti-pattern	_	_	_	_	
194-6	31395-31396	.	_	_	_	_	

#Text=The COPY operation uses all the compute nodes in your cluster to load data in parallel, from sources such as Amazon S3, Amazon DynamoDB, Amazon EMR HDFS file systems, or any SSH connection.
195-1	31397-31400	The	_	_	_	_	
195-2	31401-31405	COPY	_	_	_	_	
195-3	31406-31415	operation	_	_	_	_	
195-4	31416-31420	uses	_	_	_	_	
195-5	31421-31424	all	_	_	_	_	
195-6	31425-31428	the	_	_	_	_	
195-7	31429-31436	compute	_	_	_	_	
195-8	31437-31442	nodes	_	_	_	_	
195-9	31443-31445	in	_	_	_	_	
195-10	31446-31450	your	_	_	_	_	
195-11	31451-31458	cluster	_	_	_	_	
195-12	31459-31461	to	_	_	_	_	
195-13	31462-31466	load	_	_	_	_	
195-14	31467-31471	data	_	_	_	_	
195-15	31472-31474	in	_	_	_	_	
195-16	31475-31483	parallel	_	_	_	_	
195-17	31483-31484	,	_	_	_	_	
195-18	31485-31489	from	_	_	_	_	
195-19	31490-31497	sources	_	_	_	_	
195-20	31498-31502	such	_	_	_	_	
195-21	31503-31505	as	_	_	_	_	
195-22	31506-31512	Amazon	_	_	_	_	
195-23	31513-31515	S3	_	_	_	_	
195-24	31515-31516	,	_	_	_	_	
195-25	31517-31523	Amazon	_	_	_	_	
195-26	31524-31532	DynamoDB	_	_	_	_	
195-27	31532-31533	,	_	_	_	_	
195-28	31534-31540	Amazon	_	_	_	_	
195-29	31541-31544	EMR	_	_	_	_	
195-30	31545-31549	HDFS	_	_	_	_	
195-31	31550-31554	file	_	_	_	_	
195-32	31555-31562	systems	_	_	_	_	
195-33	31562-31563	,	_	_	_	_	
195-34	31564-31566	or	_	_	_	_	
195-35	31567-31570	any	_	_	_	_	
195-36	31571-31574	SSH	_	_	_	_	
195-37	31575-31585	connection	_	_	_	_	
195-38	31585-31586	.	_	_	_	_	

#Text=When performing data loads, compress the data files whenever possible.
196-1	31587-31591	When	_	_	_	_	
196-2	31592-31602	performing	_	_	_	_	
196-3	31603-31607	data	_	_	_	_	
196-4	31608-31613	loads	_	_	_	_	
196-5	31613-31614	,	_	_	_	_	
196-6	31615-31623	compress	_	_	_	_	
196-7	31624-31627	the	_	_	_	_	
196-8	31628-31632	data	_	_	_	_	
196-9	31633-31638	files	_	_	_	_	
196-10	31639-31647	whenever	_	_	_	_	
196-11	31648-31656	possible	_	_	_	_	
196-12	31656-31657	.	_	_	_	_	

#Text=For row-oriented (CSV) data, Amazon Redshift supports both GZIP and LZO compression.
197-1	31658-31661	For	_	_	_	_	
197-2	31662-31674	row-oriented	_	_	_	_	
197-3	31675-31676	(	_	_	_	_	
197-4	31676-31679	CSV	_	_	_	_	
197-5	31679-31680	)	_	_	_	_	
197-6	31681-31685	data	_	_	_	_	
197-7	31685-31686	,	_	_	_	_	
197-8	31687-31693	Amazon	_	_	_	_	
197-9	31694-31702	Redshift	_	_	_	_	
197-10	31703-31711	supports	_	_	_	_	
197-11	31712-31716	both	_	_	_	_	
197-12	31717-31721	GZIP	_	_	_	_	
197-13	31722-31725	and	_	_	_	_	
197-14	31726-31729	LZO	_	_	_	_	
197-15	31730-31741	compression	_	_	_	_	
197-16	31741-31742	.	_	_	_	_	

#Text=It’s more efficient to load a large number of small files than one large one, and the ideal file count is a multiple of the cluster’s total slice count.
198-1	31743-31745	It	_	_	_	_	
198-2	31745-31746	’	_	_	_	_	
198-3	31746-31747	s	_	_	_	_	
198-4	31748-31752	more	_	_	_	_	
198-5	31753-31762	efficient	_	_	_	_	
198-6	31763-31765	to	_	_	_	_	
198-7	31766-31770	load	_	_	_	_	
198-8	31771-31772	a	_	_	_	_	
198-9	31773-31778	large	_	_	_	_	
198-10	31779-31785	number	_	_	_	_	
198-11	31786-31788	of	_	_	_	_	
198-12	31789-31794	small	_	_	_	_	
198-13	31795-31800	files	_	_	_	_	
198-14	31801-31805	than	_	_	_	_	
198-15	31806-31809	one	_	_	_	_	
198-16	31810-31815	large	_	_	_	_	
198-17	31816-31819	one	_	_	_	_	
198-18	31819-31820	,	_	_	_	_	
198-19	31821-31824	and	_	_	_	_	
198-20	31825-31828	the	_	_	_	_	
198-21	31829-31834	ideal	_	_	_	_	
198-22	31835-31839	file	_	_	_	_	
198-23	31840-31845	count	_	_	_	_	
198-24	31846-31848	is	_	_	_	_	
198-25	31849-31850	a	_	_	_	_	
198-26	31851-31859	multiple	_	_	_	_	
198-27	31860-31862	of	_	_	_	_	
198-28	31863-31866	the	_	_	_	_	
198-29	31867-31874	cluster	_	_	_	_	
198-30	31874-31875	’	_	_	_	_	
198-31	31875-31876	s	_	_	_	_	
198-32	31877-31882	total	_	_	_	_	
198-33	31883-31888	slice	_	_	_	_	
198-34	31889-31894	count	_	_	_	_	
198-35	31894-31895	.	_	_	_	_	

#Text=Columnar data, such as Parquet and ORC, is also supported.
199-1	31896-31904	Columnar	_	_	_	_	
199-2	31905-31909	data	_	_	_	_	
199-3	31909-31910	,	_	_	_	_	
199-4	31911-31915	such	_	_	_	_	
199-5	31916-31918	as	_	_	_	_	
199-6	31919-31926	Parquet	_	_	_	_	
199-7	31927-31930	and	_	_	_	_	
199-8	31931-31934	ORC	_	_	_	_	
199-9	31934-31935	,	_	_	_	_	
199-10	31936-31938	is	_	_	_	_	
199-11	31939-31943	also	_	_	_	_	
199-12	31944-31953	supported	_	_	_	_	
199-13	31953-31954	.	_	_	_	_	

#Text=You can achieve best performance when the compressed files are between 1MB-1GB each.
200-1	31955-31958	You	_	_	_	_	
200-2	31959-31962	can	_	_	_	_	
200-3	31963-31970	achieve	_	_	_	_	
200-4	31971-31975	best	_	_	_	_	
200-5	31976-31987	performance	_	_	_	_	
200-6	31988-31992	when	_	_	_	_	
200-7	31993-31996	the	_	_	_	_	
200-8	31997-32007	compressed	_	_	_	_	
200-9	32008-32013	files	_	_	_	_	
200-10	32014-32017	are	_	_	_	_	
200-11	32018-32025	between	_	_	_	_	
200-12	32026-32029	1MB	_	_	_	_	
200-13	32029-32030	-	_	_	_	_	
200-14	32030-32033	1GB	_	_	_	_	
200-15	32034-32038	each	_	_	_	_	
200-16	32038-32039	.	_	_	_	_	

#Text=The number of slices per node depends on the cluster’s node size (and potentially elastic resize history).
201-1	32040-32043	The	_	_	_	_	
201-2	32044-32050	number	_	_	_	_	
201-3	32051-32053	of	_	_	_	_	
201-4	32054-32060	slices	_	_	_	_	
201-5	32061-32064	per	_	_	_	_	
201-6	32065-32069	node	_	_	_	_	
201-7	32070-32077	depends	_	_	_	_	
201-8	32078-32080	on	_	_	_	_	
201-9	32081-32084	the	_	_	_	_	
201-10	32085-32092	cluster	_	_	_	_	
201-11	32092-32093	’	_	_	_	_	
201-12	32093-32094	s	_	_	_	_	
201-13	32095-32099	node	_	_	_	_	
201-14	32100-32104	size	_	_	_	_	
201-15	32105-32106	(	_	_	_	_	
201-16	32106-32109	and	_	_	_	_	
201-17	32110-32121	potentially	_	_	_	_	
201-18	32122-32129	elastic	_	_	_	_	
201-19	32130-32136	resize	_	_	_	_	
201-20	32137-32144	history	_	_	_	_	
201-21	32144-32145	)	_	_	_	_	
201-22	32145-32146	.	_	_	_	_	

#Text=By ensuring an equal number of files per slice, you know that the COPY command evenly uses cluster resources and complete as quickly as possible.
202-1	32147-32149	By	_	_	_	_	
202-2	32150-32158	ensuring	_	_	_	_	
202-3	32159-32161	an	_	_	_	_	
202-4	32162-32167	equal	_	_	_	_	
202-5	32168-32174	number	_	_	_	_	
202-6	32175-32177	of	_	_	_	_	
202-7	32178-32183	files	_	_	_	_	
202-8	32184-32187	per	_	_	_	_	
202-9	32188-32193	slice	_	_	_	_	
202-10	32193-32194	,	_	_	_	_	
202-11	32195-32198	you	_	_	_	_	
202-12	32199-32203	know	_	_	_	_	
202-13	32204-32208	that	_	_	_	_	
202-14	32209-32212	the	_	_	_	_	
202-15	32213-32217	COPY	_	_	_	_	
202-16	32218-32225	command	_	_	_	_	
202-17	32226-32232	evenly	_	_	_	_	
202-18	32233-32237	uses	_	_	_	_	
202-19	32238-32245	cluster	_	_	_	_	
202-20	32246-32255	resources	_	_	_	_	
202-21	32256-32259	and	_	_	_	_	
202-22	32260-32268	complete	_	_	_	_	
202-23	32269-32271	as	_	_	_	_	
202-24	32272-32279	quickly	_	_	_	_	
202-25	32280-32282	as	_	_	_	_	
202-26	32283-32291	possible	_	_	_	_	
202-27	32291-32292	.	_	_	_	_	

#Text=Query for the cluster’s current slice count with SELECT COUNT(*) AS number_of_slices FROM stv_slices;.
203-1	32293-32298	Query	_	_	_	_	
203-2	32299-32302	for	_	_	_	_	
203-3	32303-32306	the	_	_	_	_	
203-4	32307-32314	cluster	_	_	_	_	
203-5	32314-32315	’	_	_	_	_	
203-6	32315-32316	s	_	_	_	_	
203-7	32317-32324	current	_	_	_	_	
203-8	32325-32330	slice	_	_	_	_	
203-9	32331-32336	count	_	_	_	_	
203-10	32337-32341	with	_	_	_	_	
203-11	32342-32348	SELECT	_	_	_	_	
203-12	32349-32354	COUNT	_	_	_	_	
203-13	32354-32355	(	_	_	_	_	
203-14	32355-32356	*	_	_	_	_	
203-15	32356-32357	)	_	_	_	_	
203-16	32358-32360	AS	_	_	_	_	
203-17	32361-32377	number_of_slices	_	_	_	_	
203-18	32378-32382	FROM	_	_	_	_	
203-19	32383-32393	stv_slices	_	_	_	_	
203-20	32393-32394	;	_	_	_	_	
203-21	32394-32395	.	_	_	_	_	

#Text=Another script in the amazon-redshift-utils GitHub repo, CopyPerformance, calculates statistics for each load.
204-1	32396-32403	Another	_	_	_	_	
204-2	32404-32410	script	_	_	_	_	
204-3	32411-32413	in	_	_	_	_	
204-4	32414-32417	the	_	_	_	_	
204-5	32418-32439	amazon-redshift-utils	_	_	_	_	
204-6	32440-32446	GitHub	_	_	_	_	
204-7	32447-32451	repo	_	_	_	_	
204-8	32451-32452	,	_	_	_	_	
204-9	32453-32468	CopyPerformance	_	_	_	_	
204-10	32468-32469	,	_	_	_	_	
204-11	32469-32470	 	_	_	_	_	
204-12	32470-32480	calculates	_	_	_	_	
204-13	32481-32491	statistics	_	_	_	_	
204-14	32492-32495	for	_	_	_	_	
204-15	32496-32500	each	_	_	_	_	
204-16	32501-32505	load	_	_	_	_	
204-17	32505-32506	.	_	_	_	_	

#Text=Amazon Redshift Advisor also warns of missing compression or too few files based on the number of slices (see the following screenshot):
#Text=Conducting COPY operations efficiently reduces the time to results for downstream users, and minimizes the cluster resources utilized to perform the load.
205-1	32507-32513	Amazon	_	_	_	_	
205-2	32514-32522	Redshift	_	_	_	_	
205-3	32523-32530	Advisor	_	_	_	_	
205-4	32531-32535	also	_	_	_	_	
205-5	32536-32541	warns	_	_	_	_	
205-6	32542-32544	of	_	_	_	_	
205-7	32545-32552	missing	_	_	_	_	
205-8	32553-32564	compression	_	_	_	_	
205-9	32565-32567	or	_	_	_	_	
205-10	32568-32571	too	_	_	_	_	
205-11	32572-32575	few	_	_	_	_	
205-12	32576-32581	files	_	_	_	_	
205-13	32582-32587	based	_	_	_	_	
205-14	32588-32590	on	_	_	_	_	
205-15	32591-32594	the	_	_	_	_	
205-16	32595-32601	number	_	_	_	_	
205-17	32602-32604	of	_	_	_	_	
205-18	32605-32611	slices	_	_	_	_	
205-19	32612-32613	(	_	_	_	_	
205-20	32613-32616	see	_	_	_	_	
205-21	32617-32620	the	_	_	_	_	
205-22	32621-32630	following	_	_	_	_	
205-23	32631-32641	screenshot	_	_	_	_	
205-24	32641-32642	)	_	_	_	_	
205-25	32642-32643	:	_	_	_	_	
205-26	32644-32654	Conducting	_	_	_	_	
205-27	32655-32659	COPY	_	_	_	_	
205-28	32660-32670	operations	_	_	_	_	
205-29	32671-32682	efficiently	_	_	_	_	
205-30	32683-32690	reduces	_	_	_	_	
205-31	32691-32694	the	_	_	_	_	
205-32	32695-32699	time	_	_	_	_	
205-33	32700-32702	to	_	_	_	_	
205-34	32703-32710	results	_	_	_	_	
205-35	32711-32714	for	_	_	_	_	
205-36	32715-32725	downstream	_	_	_	_	
205-37	32726-32731	users	_	_	_	_	
205-38	32731-32732	,	_	_	_	_	
205-39	32733-32736	and	_	_	_	_	
205-40	32737-32746	minimizes	_	_	_	_	
205-41	32747-32750	the	_	_	_	_	
205-42	32751-32758	cluster	_	_	_	_	
205-43	32759-32768	resources	_	_	_	_	
205-44	32769-32777	utilized	_	_	_	_	
205-45	32778-32780	to	_	_	_	_	
205-46	32781-32788	perform	_	_	_	_	
205-47	32789-32792	the	_	_	_	_	
205-48	32793-32797	load	_	_	_	_	
205-49	32797-32798	.	_	_	_	_	

#Text=Tip #10: Using the latest Amazon Redshift drivers from AWS
#Text=Because Amazon Redshift is based on PostgreSQL, we previously recommended using JDBC4 PostgreSQL driver version 8.4.703 and psql ODBC version 9.x drivers.
206-1	32799-32802	Tip	_	_	_	_	
206-2	32803-32806	#10	_	_	_	_	
206-3	32806-32807	:	_	_	_	_	
206-4	32808-32813	Using	_	_	_	_	
206-5	32814-32817	the	_	_	_	_	
206-6	32818-32824	latest	_	_	_	_	
206-7	32825-32831	Amazon	_	_	_	_	
206-8	32832-32840	Redshift	_	_	_	_	
206-9	32841-32848	drivers	_	_	_	_	
206-10	32849-32853	from	_	_	_	_	
206-11	32854-32857	AWS	_	_	_	_	
206-12	32858-32865	Because	_	_	_	_	
206-13	32866-32872	Amazon	_	_	_	_	
206-14	32873-32881	Redshift	_	_	_	_	
206-15	32882-32884	is	_	_	_	_	
206-16	32885-32890	based	_	_	_	_	
206-17	32891-32893	on	_	_	_	_	
206-18	32894-32904	PostgreSQL	_	_	_	_	
206-19	32904-32905	,	_	_	_	_	
206-20	32906-32908	we	_	_	_	_	
206-21	32909-32919	previously	_	_	_	_	
206-22	32920-32931	recommended	_	_	_	_	
206-23	32932-32937	using	_	_	_	_	
206-24	32938-32943	JDBC4	_	_	_	_	
206-25	32944-32954	PostgreSQL	_	_	_	_	
206-26	32955-32961	driver	_	_	_	_	
206-27	32962-32969	version	_	_	_	_	
206-28	32970-32977	8.4.703	_	_	_	_	
206-29	32978-32981	and	_	_	_	_	
206-30	32982-32986	psql	_	_	_	_	
206-31	32987-32991	ODBC	_	_	_	_	
206-32	32992-32999	version	_	_	_	_	
206-33	33000-33001	9	_	_	_	_	
206-34	33001-33002	.	_	_	_	_	
206-35	33002-33003	x	_	_	_	_	
206-36	33004-33011	drivers	_	_	_	_	
206-37	33011-33012	.	_	_	_	_	

#Text=If you’re currently using those drivers, we recommend moving to the new Amazon Redshift–specific drivers.
207-1	33013-33015	If	_	_	_	_	
207-2	33016-33019	you	_	_	_	_	
207-3	33019-33020	’	_	_	_	_	
207-4	33020-33022	re	_	_	_	_	
207-5	33023-33032	currently	_	_	_	_	
207-6	33033-33038	using	_	_	_	_	
207-7	33039-33044	those	_	_	_	_	
207-8	33045-33052	drivers	_	_	_	_	
207-9	33052-33053	,	_	_	_	_	
207-10	33054-33056	we	_	_	_	_	
207-11	33057-33066	recommend	_	_	_	_	
207-12	33067-33073	moving	_	_	_	_	
207-13	33074-33076	to	_	_	_	_	
207-14	33077-33080	the	_	_	_	_	
207-15	33081-33084	new	_	_	_	_	
207-16	33085-33091	Amazon	_	_	_	_	
207-17	33092-33109	Redshift–specific	_	_	_	_	
207-18	33110-33117	drivers	_	_	_	_	
207-19	33117-33118	.	_	_	_	_	

#Text=For more information about drivers and configuring connections, see JDBC and ODBC drivers for Amazon Redshift in the Amazon Redshift Cluster Management Guide.
208-1	33119-33122	For	_	_	_	_	
208-2	33123-33127	more	_	_	_	_	
208-3	33128-33139	information	_	_	_	_	
208-4	33140-33145	about	_	_	_	_	
208-5	33146-33153	drivers	_	_	_	_	
208-6	33154-33157	and	_	_	_	_	
208-7	33158-33169	configuring	_	_	_	_	
208-8	33170-33181	connections	_	_	_	_	
208-9	33181-33182	,	_	_	_	_	
208-10	33183-33186	see	_	_	_	_	
208-11	33187-33191	JDBC	_	_	_	_	
208-12	33192-33195	and	_	_	_	_	
208-13	33196-33200	ODBC	_	_	_	_	
208-14	33201-33208	drivers	_	_	_	_	
208-15	33209-33212	for	_	_	_	_	
208-16	33213-33219	Amazon	_	_	_	_	
208-17	33220-33228	Redshift	_	_	_	_	
208-18	33229-33231	in	_	_	_	_	
208-19	33232-33235	the	_	_	_	_	
208-20	33236-33242	Amazon	_	_	_	_	
208-21	33243-33251	Redshift	_	_	_	_	
208-22	33252-33259	Cluster	_	_	_	_	
208-23	33260-33270	Management	_	_	_	_	
208-24	33271-33276	Guide	_	_	_	_	
208-25	33276-33277	.	_	_	_	_	

#Text=While rarely necessary, the Amazon Redshift drivers do permit some parameter tuning that may be useful in some circumstances.
209-1	33278-33283	While	_	_	_	_	
209-2	33284-33290	rarely	_	_	_	_	
209-3	33291-33300	necessary	_	_	_	_	
209-4	33300-33301	,	_	_	_	_	
209-5	33302-33305	the	_	_	_	_	
209-6	33306-33312	Amazon	_	_	_	_	
209-7	33313-33321	Redshift	_	_	_	_	
209-8	33322-33329	drivers	_	_	_	_	
209-9	33330-33332	do	_	_	_	_	
209-10	33333-33339	permit	_	_	_	_	
209-11	33340-33344	some	_	_	_	_	
209-12	33345-33354	parameter	_	_	_	_	
209-13	33355-33361	tuning	_	_	_	_	
209-14	33362-33366	that	_	_	_	_	
209-15	33367-33370	may	_	_	_	_	
209-16	33371-33373	be	_	_	_	_	
209-17	33374-33380	useful	_	_	_	_	
209-18	33381-33383	in	_	_	_	_	
209-19	33384-33388	some	_	_	_	_	
209-20	33389-33402	circumstances	_	_	_	_	
209-21	33402-33403	.	_	_	_	_	

#Text=Downstream third-party applications often have their own best practices for driver tuning that may lead to additional performance gains.
210-1	33404-33414	Downstream	_	_	_	_	
210-2	33415-33426	third-party	_	_	_	_	
210-3	33427-33439	applications	_	_	_	_	
210-4	33440-33445	often	_	_	_	_	
210-5	33446-33450	have	_	_	_	_	
210-6	33451-33456	their	_	_	_	_	
210-7	33457-33460	own	_	_	_	_	
210-8	33461-33465	best	_	_	_	_	
210-9	33466-33475	practices	_	_	_	_	
210-10	33476-33479	for	_	_	_	_	
210-11	33480-33486	driver	_	_	_	_	
210-12	33487-33493	tuning	_	_	_	_	
210-13	33494-33498	that	_	_	_	_	
210-14	33499-33502	may	_	_	_	_	
210-15	33503-33507	lead	_	_	_	_	
210-16	33508-33510	to	_	_	_	_	
210-17	33511-33521	additional	_	_	_	_	
210-18	33522-33533	performance	_	_	_	_	
210-19	33534-33539	gains	_	_	_	_	
210-20	33539-33540	.	_	_	_	_	

#Text=For JDBC, consider the following:
#Text=To avoid client-side out-of-memory errors when retrieving large data sets using JDBC, you can enable your client to fetch data in batches by setting the JDBC fetch size parameter or BlockingRowsMode.
211-1	33541-33544	For	_	_	_	_	
211-2	33545-33549	JDBC	_	_	_	_	
211-3	33549-33550	,	_	_	_	_	
211-4	33551-33559	consider	_	_	_	_	
211-5	33560-33563	the	_	_	_	_	
211-6	33564-33573	following	_	_	_	_	
211-7	33573-33574	:	_	_	_	_	
211-8	33575-33577	To	_	_	_	_	
211-9	33578-33583	avoid	_	_	_	_	
211-10	33584-33595	client-side	_	_	_	_	
211-11	33596-33609	out-of-memory	_	_	_	_	
211-12	33610-33616	errors	_	_	_	_	
211-13	33617-33621	when	_	_	_	_	
211-14	33622-33632	retrieving	_	_	_	_	
211-15	33633-33638	large	_	_	_	_	
211-16	33639-33643	data	_	_	_	_	
211-17	33644-33648	sets	_	_	_	_	
211-18	33649-33654	using	_	_	_	_	
211-19	33655-33659	JDBC	_	_	_	_	
211-20	33659-33660	,	_	_	_	_	
211-21	33661-33664	you	_	_	_	_	
211-22	33665-33668	can	_	_	_	_	
211-23	33669-33675	enable	_	_	_	_	
211-24	33676-33680	your	_	_	_	_	
211-25	33681-33687	client	_	_	_	_	
211-26	33688-33690	to	_	_	_	_	
211-27	33691-33696	fetch	_	_	_	_	
211-28	33697-33701	data	_	_	_	_	
211-29	33702-33704	in	_	_	_	_	
211-30	33705-33712	batches	_	_	_	_	
211-31	33713-33715	by	_	_	_	_	
211-32	33716-33723	setting	_	_	_	_	
211-33	33724-33727	the	_	_	_	_	
211-34	33728-33732	JDBC	_	_	_	_	
211-35	33733-33738	fetch	_	_	_	_	
211-36	33739-33743	size	_	_	_	_	
211-37	33744-33753	parameter	_	_	_	_	
211-38	33754-33756	or	_	_	_	_	
211-39	33757-33773	BlockingRowsMode	_	_	_	_	
211-40	33773-33774	.	_	_	_	_	

#Text=Amazon Redshift doesn’t recognize the JDBC maxRows parameter.
212-1	33775-33781	Amazon	_	_	_	_	
212-2	33782-33790	Redshift	_	_	_	_	
212-3	33791-33796	doesn	_	_	_	_	
212-4	33796-33797	’	_	_	_	_	
212-5	33797-33798	t	_	_	_	_	
212-6	33799-33808	recognize	_	_	_	_	
212-7	33809-33812	the	_	_	_	_	
212-8	33813-33817	JDBC	_	_	_	_	
212-9	33818-33825	maxRows	_	_	_	_	
212-10	33826-33835	parameter	_	_	_	_	
212-11	33835-33836	.	_	_	_	_	

#Text=Instead, specify a LIMIT clause to restrict the result set.
213-1	33837-33844	Instead	_	_	_	_	
213-2	33844-33845	,	_	_	_	_	
213-3	33846-33853	specify	_	_	_	_	
213-4	33854-33855	a	_	_	_	_	
213-5	33856-33861	LIMIT	_	_	_	_	
213-6	33862-33868	clause	_	_	_	_	
213-7	33869-33871	to	_	_	_	_	
213-8	33872-33880	restrict	_	_	_	_	
213-9	33881-33884	the	_	_	_	_	
213-10	33885-33891	result	_	_	_	_	
213-11	33892-33895	set	_	_	_	_	
213-12	33895-33896	.	_	_	_	_	

#Text=You can also use an OFFSET clause to skip to a specific starting point in the result set.
214-1	33897-33900	You	_	_	_	_	
214-2	33901-33904	can	_	_	_	_	
214-3	33905-33909	also	_	_	_	_	
214-4	33910-33913	use	_	_	_	_	
214-5	33914-33916	an	_	_	_	_	
214-6	33917-33923	OFFSET	_	_	_	_	
214-7	33924-33930	clause	_	_	_	_	
214-8	33931-33933	to	_	_	_	_	
214-9	33934-33938	skip	_	_	_	_	
214-10	33939-33941	to	_	_	_	_	
214-11	33942-33943	a	_	_	_	_	
214-12	33944-33952	specific	_	_	_	_	
214-13	33953-33961	starting	_	_	_	_	
214-14	33962-33967	point	_	_	_	_	
214-15	33968-33970	in	_	_	_	_	
214-16	33971-33974	the	_	_	_	_	
214-17	33975-33981	result	_	_	_	_	
214-18	33982-33985	set	_	_	_	_	
214-19	33985-33986	.	_	_	_	_	

#Text=For ODBC, consider the following:
#Text=A cursor is enabled on the cluster’s leader node when useDelareFecth is enabled.
215-1	33987-33990	For	_	_	_	_	
215-2	33991-33995	ODBC	_	_	_	_	
215-3	33995-33996	,	_	_	_	_	
215-4	33997-34005	consider	_	_	_	_	
215-5	34006-34009	the	_	_	_	_	
215-6	34010-34019	following	_	_	_	_	
215-7	34019-34020	:	_	_	_	_	
215-8	34021-34022	A	_	_	_	_	
215-9	34023-34029	cursor	_	_	_	_	
215-10	34030-34032	is	_	_	_	_	
215-11	34033-34040	enabled	_	_	_	_	
215-12	34041-34043	on	_	_	_	_	
215-13	34044-34047	the	_	_	_	_	
215-14	34048-34055	cluster	_	_	_	_	
215-15	34055-34056	’	_	_	_	_	
215-16	34056-34057	s	_	_	_	_	
215-17	34058-34064	leader	_	_	_	_	
215-18	34065-34069	node	_	_	_	_	
215-19	34070-34074	when	_	_	_	_	
215-20	34075-34089	useDelareFecth	_	_	_	_	
215-21	34090-34092	is	_	_	_	_	
215-22	34093-34100	enabled	_	_	_	_	
215-23	34100-34101	.	_	_	_	_	

#Text=The cursor fetches up to fetchsize/cursorsize and then waits to fetch more rows when the application request more rows.
216-1	34102-34105	The	_	_	_	_	
216-2	34106-34112	cursor	_	_	_	_	
216-3	34113-34120	fetches	_	_	_	_	
216-4	34121-34123	up	_	_	_	_	
216-5	34124-34126	to	_	_	_	_	
216-6	34127-34136	fetchsize	_	_	_	_	
216-7	34136-34137	/	_	_	_	_	
216-8	34137-34147	cursorsize	_	_	_	_	
216-9	34148-34151	and	_	_	_	_	
216-10	34152-34156	then	_	_	_	_	
216-11	34157-34162	waits	_	_	_	_	
216-12	34163-34165	to	_	_	_	_	
216-13	34166-34171	fetch	_	_	_	_	
216-14	34172-34176	more	_	_	_	_	
216-15	34177-34181	rows	_	_	_	_	
216-16	34182-34186	when	_	_	_	_	
216-17	34187-34190	the	_	_	_	_	
216-18	34190-34191	 	_	_	_	_	
216-19	34191-34202	application	_	_	_	_	
216-20	34203-34210	request	_	_	_	_	
216-21	34211-34215	more	_	_	_	_	
216-22	34216-34220	rows	_	_	_	_	
216-23	34220-34221	.	_	_	_	_	

#Text=The CURSOR command is an explicit directive that the application uses to manipulate cursor behavior on the leader node.
217-1	34222-34225	The	_	_	_	_	
217-2	34226-34232	CURSOR	_	_	_	_	
217-3	34233-34240	command	_	_	_	_	
217-4	34241-34243	is	_	_	_	_	
217-5	34244-34246	an	_	_	_	_	
217-6	34247-34255	explicit	_	_	_	_	
217-7	34256-34265	directive	_	_	_	_	
217-8	34266-34270	that	_	_	_	_	
217-9	34271-34274	the	_	_	_	_	
217-10	34275-34286	application	_	_	_	_	
217-11	34287-34291	uses	_	_	_	_	
217-12	34292-34294	to	_	_	_	_	
217-13	34295-34305	manipulate	_	_	_	_	
217-14	34306-34312	cursor	_	_	_	_	
217-15	34313-34321	behavior	_	_	_	_	
217-16	34322-34324	on	_	_	_	_	
217-17	34325-34328	the	_	_	_	_	
217-18	34329-34335	leader	_	_	_	_	
217-19	34336-34340	node	_	_	_	_	
217-20	34340-34341	.	_	_	_	_	

#Text=Unlike the JDBC driver, the ODBC driver doesn’t have a BlockingRowsMode mechanism.
218-1	34342-34348	Unlike	_	_	_	_	
218-2	34349-34352	the	_	_	_	_	
218-3	34353-34357	JDBC	_	_	_	_	
218-4	34358-34364	driver	_	_	_	_	
218-5	34364-34365	,	_	_	_	_	
218-6	34366-34369	the	_	_	_	_	
218-7	34370-34374	ODBC	_	_	_	_	
218-8	34375-34381	driver	_	_	_	_	
218-9	34382-34387	doesn	_	_	_	_	
218-10	34387-34388	’	_	_	_	_	
218-11	34388-34389	t	_	_	_	_	
218-12	34390-34394	have	_	_	_	_	
218-13	34395-34396	a	_	_	_	_	
218-14	34397-34413	BlockingRowsMode	_	_	_	_	
218-15	34414-34423	mechanism	_	_	_	_	
218-16	34423-34424	.	_	_	_	_	

#Text=It’s recommended that you do not undertake driver tuning unless you have a clear need.
219-1	34425-34427	It	_	_	_	_	
219-2	34427-34428	’	_	_	_	_	
219-3	34428-34429	s	_	_	_	_	
219-4	34430-34441	recommended	_	_	_	_	
219-5	34442-34446	that	_	_	_	_	
219-6	34447-34450	you	_	_	_	_	
219-7	34451-34453	do	_	_	_	_	
219-8	34454-34457	not	_	_	_	_	
219-9	34458-34467	undertake	_	_	_	_	
219-10	34468-34474	driver	_	_	_	_	
219-11	34475-34481	tuning	_	_	_	_	
219-12	34482-34488	unless	_	_	_	_	
219-13	34489-34492	you	_	_	_	_	
219-14	34493-34497	have	_	_	_	_	
219-15	34498-34499	a	_	_	_	_	
219-16	34500-34505	clear	_	_	_	_	
219-17	34506-34510	need	_	_	_	_	
219-18	34510-34511	.	_	_	_	_	

#Text=AWS Support is available to help on this topic as well.
220-1	34512-34515	AWS	_	_	_	_	
220-2	34516-34523	Support	_	_	_	_	
220-3	34524-34526	is	_	_	_	_	
220-4	34527-34536	available	_	_	_	_	
220-5	34537-34539	to	_	_	_	_	
220-6	34540-34544	help	_	_	_	_	
220-7	34545-34547	on	_	_	_	_	
220-8	34548-34552	this	_	_	_	_	
220-9	34553-34558	topic	_	_	_	_	
220-10	34559-34561	as	_	_	_	_	
220-11	34562-34566	well	_	_	_	_	
220-12	34566-34567	.	_	_	_	_	

#Text=Conclusion
#Text=Amazon Redshift is a powerful, fully managed data warehouse that can offer increased performance and lower cost in the cloud.
221-1	34568-34578	Conclusion	_	_	_	_	
221-2	34579-34585	Amazon	_	_	_	_	
221-3	34586-34594	Redshift	_	_	_	_	
221-4	34595-34597	is	_	_	_	_	
221-5	34598-34599	a	_	_	_	_	
221-6	34600-34608	powerful	_	_	_	_	
221-7	34608-34609	,	_	_	_	_	
221-8	34610-34615	fully	_	_	_	_	
221-9	34616-34623	managed	_	_	_	_	
221-10	34624-34628	data	_	_	_	_	
221-11	34629-34638	warehouse	_	_	_	_	
221-12	34639-34643	that	_	_	_	_	
221-13	34644-34647	can	_	_	_	_	
221-14	34648-34653	offer	_	_	_	_	
221-15	34654-34663	increased	_	_	_	_	
221-16	34664-34675	performance	_	_	_	_	
221-17	34676-34679	and	_	_	_	_	
221-18	34680-34685	lower	_	_	_	_	
221-19	34686-34690	cost	_	_	_	_	
221-20	34691-34693	in	_	_	_	_	
221-21	34694-34697	the	_	_	_	_	
221-22	34698-34703	cloud	_	_	_	_	
221-23	34703-34704	.	_	_	_	_	

#Text=As Amazon Redshift grows based on the feedback from its tens of thousands of active customers world-wide, it continues to become easier to use and extend its price-for-performance value proposition.
222-1	34705-34707	As	_	_	_	_	
222-2	34708-34714	Amazon	_	_	_	_	
222-3	34715-34723	Redshift	_	_	_	_	
222-4	34724-34729	grows	_	_	_	_	
222-5	34730-34735	based	_	_	_	_	
222-6	34736-34738	on	_	_	_	_	
222-7	34739-34742	the	_	_	_	_	
222-8	34743-34751	feedback	_	_	_	_	
222-9	34752-34756	from	_	_	_	_	
222-10	34757-34760	its	_	_	_	_	
222-11	34761-34765	tens	_	_	_	_	
222-12	34766-34768	of	_	_	_	_	
222-13	34769-34778	thousands	_	_	_	_	
222-14	34779-34781	of	_	_	_	_	
222-15	34782-34788	active	_	_	_	_	
222-16	34789-34798	customers	_	_	_	_	
222-17	34799-34809	world-wide	_	_	_	_	
222-18	34809-34810	,	_	_	_	_	
222-19	34811-34813	it	_	_	_	_	
222-20	34814-34823	continues	_	_	_	_	
222-21	34824-34826	to	_	_	_	_	
222-22	34827-34833	become	_	_	_	_	
222-23	34834-34840	easier	_	_	_	_	
222-24	34841-34843	to	_	_	_	_	
222-25	34844-34847	use	_	_	_	_	
222-26	34848-34851	and	_	_	_	_	
222-27	34852-34858	extend	_	_	_	_	
222-28	34859-34862	its	_	_	_	_	
222-29	34863-34884	price-for-performance	_	_	_	_	
222-30	34885-34890	value	_	_	_	_	
222-31	34891-34902	proposition	_	_	_	_	
222-32	34902-34903	.	_	_	_	_	

#Text=Staying abreast of these improvements can help you get more value (with less effort) from this core AWS service.
223-1	34904-34911	Staying	_	_	_	_	
223-2	34912-34919	abreast	_	_	_	_	
223-3	34920-34922	of	_	_	_	_	
223-4	34923-34928	these	_	_	_	_	
223-5	34929-34941	improvements	_	_	_	_	
223-6	34942-34945	can	_	_	_	_	
223-7	34946-34950	help	_	_	_	_	
223-8	34951-34954	you	_	_	_	_	
223-9	34955-34958	get	_	_	_	_	
223-10	34959-34963	more	_	_	_	_	
223-11	34964-34969	value	_	_	_	_	
223-12	34970-34971	(	_	_	_	_	
223-13	34971-34975	with	_	_	_	_	
223-14	34976-34980	less	_	_	_	_	
223-15	34981-34987	effort	_	_	_	_	
223-16	34987-34988	)	_	_	_	_	
223-17	34989-34993	from	_	_	_	_	
223-18	34994-34998	this	_	_	_	_	
223-19	34999-35003	core	_	_	_	_	
223-20	35004-35007	AWS	_	_	_	_	
223-21	35008-35015	service	_	_	_	_	
223-22	35015-35016	.	_	_	_	_	

#Text=We hope you learned a great deal about making the most of your Amazon Redshift account with the resources in this post.
224-1	35017-35019	We	_	_	_	_	
224-2	35020-35024	hope	_	_	_	_	
224-3	35025-35028	you	_	_	_	_	
224-4	35029-35036	learned	_	_	_	_	
224-5	35037-35038	a	_	_	_	_	
224-6	35039-35044	great	_	_	_	_	
224-7	35045-35049	deal	_	_	_	_	
224-8	35050-35055	about	_	_	_	_	
224-9	35056-35062	making	_	_	_	_	
224-10	35063-35066	the	_	_	_	_	
224-11	35067-35071	most	_	_	_	_	
224-12	35072-35074	of	_	_	_	_	
224-13	35075-35079	your	_	_	_	_	
224-14	35080-35086	Amazon	_	_	_	_	
224-15	35087-35095	Redshift	_	_	_	_	
224-16	35096-35103	account	_	_	_	_	
224-17	35104-35108	with	_	_	_	_	
224-18	35109-35112	the	_	_	_	_	
224-19	35113-35122	resources	_	_	_	_	
224-20	35123-35125	in	_	_	_	_	
224-21	35126-35130	this	_	_	_	_	
224-22	35131-35135	post	_	_	_	_	
224-23	35135-35136	.	_	_	_	_	

#Text=If you have questions or suggestions, please leave a comment.
225-1	35137-35139	If	_	_	_	_	
225-2	35140-35143	you	_	_	_	_	
225-3	35144-35148	have	_	_	_	_	
225-4	35149-35158	questions	_	_	_	_	
225-5	35159-35161	or	_	_	_	_	
225-6	35162-35173	suggestions	_	_	_	_	
225-7	35173-35174	,	_	_	_	_	
225-8	35175-35181	please	_	_	_	_	
225-9	35182-35187	leave	_	_	_	_	
225-10	35188-35189	a	_	_	_	_	
225-11	35190-35197	comment	_	_	_	_	
225-12	35197-35198	.	_	_	_	_	

#Text=About the Authors
#Text=Matt Scaer is a Principal Data Warehousing Specialist Solution Architect, with over 20 years of data warehousing experience, with 11+ years at both AWS and Amazon.com.
226-1	35199-35204	About	_	_	_	_	
226-2	35205-35208	the	_	_	_	_	
226-3	35209-35216	Authors	_	_	_	_	
226-4	35217-35221	Matt	_	_	_	_	
226-5	35222-35227	Scaer	_	_	_	_	
226-6	35228-35230	is	_	_	_	_	
226-7	35231-35232	a	_	_	_	_	
226-8	35233-35242	Principal	_	_	_	_	
226-9	35243-35247	Data	_	_	_	_	
226-10	35248-35259	Warehousing	_	_	_	_	
226-11	35260-35270	Specialist	_	_	_	_	
226-12	35271-35279	Solution	_	_	_	_	
226-13	35280-35289	Architect	_	_	_	_	
226-14	35289-35290	,	_	_	_	_	
226-15	35291-35295	with	_	_	_	_	
226-16	35296-35300	over	_	_	_	_	
226-17	35301-35303	20	_	_	_	_	
226-18	35304-35309	years	_	_	_	_	
226-19	35310-35312	of	_	_	_	_	
226-20	35313-35317	data	_	_	_	_	
226-21	35318-35329	warehousing	_	_	_	_	
226-22	35330-35340	experience	_	_	_	_	
226-23	35340-35341	,	_	_	_	_	
226-24	35342-35346	with	_	_	_	_	
226-25	35347-35349	11	_	_	_	_	
226-26	35349-35350	+	_	_	_	_	
226-27	35351-35356	years	_	_	_	_	
226-28	35357-35359	at	_	_	_	_	
226-29	35360-35364	both	_	_	_	_	
226-30	35365-35368	AWS	_	_	_	_	
226-31	35369-35372	and	_	_	_	_	
226-32	35373-35383	Amazon.com	_	_	_	_	
226-33	35383-35384	.	_	_	_	_	

#Text=Manish Vazirani is an Analytics Specialist Solutions Architect at Amazon Web Services.
227-1	35385-35391	Manish	_	_	_	_	
227-2	35392-35400	Vazirani	_	_	_	_	
227-3	35401-35403	is	_	_	_	_	
227-4	35404-35406	an	_	_	_	_	
227-5	35407-35416	Analytics	_	_	_	_	
227-6	35417-35427	Specialist	_	_	_	_	
227-7	35428-35437	Solutions	_	_	_	_	
227-8	35438-35447	Architect	_	_	_	_	
227-9	35448-35450	at	_	_	_	_	
227-10	35451-35457	Amazon	_	_	_	_	
227-11	35458-35461	Web	_	_	_	_	
227-12	35462-35470	Services	_	_	_	_	
227-13	35470-35471	.	_	_	_	_	

#Text=Tarun Chaudhary is an Analytics Specialist Solutions Architect at AWS.
228-1	35472-35477	Tarun	_	_	_	_	
228-2	35478-35487	Chaudhary	_	_	_	_	
228-3	35488-35490	is	_	_	_	_	
228-4	35491-35493	an	_	_	_	_	
228-5	35494-35503	Analytics	_	_	_	_	
228-6	35504-35514	Specialist	_	_	_	_	
228-7	35515-35524	Solutions	_	_	_	_	
228-8	35525-35534	Architect	_	_	_	_	
228-9	35535-35537	at	_	_	_	_	
228-10	35538-35541	AWS	_	_	_	_	
228-11	35541-35542	.	_	_	_	_	

#Text=TAGS:
#Text=Amazon Redshift
#Text=View Comments
#Text=Resources
#Text=Amazon Athena
#Text=Amazon EMR
#Text=Amazon Kinesis
#Text=Amazon MSK
#Text=Amazon QuickSight
#Text=Amazon Redshift
#Text=AWS Glue
#Text=Follow
#Text=Twitter
#Text=Facebook
#Text=LinkedIn
#Text=Twitch
#Text=Email Updates
#Text=Sign In to the Console
#Text=Learn About AWS
#Text=What Is AWS?
229-1	35543-35547	TAGS	_	_	_	_	
229-2	35547-35548	:	_	_	_	_	
229-3	35549-35555	Amazon	_	_	_	_	
229-4	35556-35564	Redshift	_	_	_	_	
229-5	35565-35569	View	_	_	_	_	
229-6	35570-35578	Comments	_	_	_	_	
229-7	35579-35588	Resources	_	_	_	_	
229-8	35589-35595	Amazon	_	_	_	_	
229-9	35596-35602	Athena	_	_	_	_	
229-10	35603-35609	Amazon	_	_	_	_	
229-11	35610-35613	EMR	_	_	_	_	
229-12	35614-35620	Amazon	_	_	_	_	
229-13	35621-35628	Kinesis	_	_	_	_	
229-14	35629-35635	Amazon	_	_	_	_	
229-15	35636-35639	MSK	_	_	_	_	
229-16	35640-35646	Amazon	_	_	_	_	
229-17	35647-35657	QuickSight	_	_	_	_	
229-18	35658-35664	Amazon	_	_	_	_	
229-19	35665-35673	Redshift	_	_	_	_	
229-20	35674-35677	AWS	_	_	_	_	
229-21	35678-35682	Glue	_	_	_	_	
229-22	35683-35689	Follow	_	_	_	_	
229-23	35690-35697	Twitter	_	_	_	_	
229-24	35698-35706	Facebook	_	_	_	_	
229-25	35707-35715	LinkedIn	_	_	_	_	
229-26	35716-35722	Twitch	_	_	_	_	
229-27	35723-35728	Email	_	_	_	_	
229-28	35729-35736	Updates	_	_	_	_	
229-29	35737-35741	Sign	_	_	_	_	
229-30	35742-35744	In	_	_	_	_	
229-31	35745-35747	to	_	_	_	_	
229-32	35748-35751	the	_	_	_	_	
229-33	35752-35759	Console	_	_	_	_	
229-34	35760-35765	Learn	_	_	_	_	
229-35	35766-35771	About	_	_	_	_	
229-36	35772-35775	AWS	_	_	_	_	
229-37	35776-35780	What	_	_	_	_	
229-38	35781-35783	Is	_	_	_	_	
229-39	35784-35787	AWS	_	_	_	_	
229-40	35787-35788	?	_	_	_	_	

#Text=What Is Cloud Computing?
230-1	35789-35793	What	_	_	_	_	
230-2	35794-35796	Is	_	_	_	_	
230-3	35797-35802	Cloud	_	_	_	_	
230-4	35803-35812	Computing	_	_	_	_	
230-5	35812-35813	?	_	_	_	_	

#Text=AWS Inclusion, Diversity & Equity
#Text=What Is DevOps?
231-1	35814-35817	AWS	_	_	_	_	
231-2	35818-35827	Inclusion	_	_	_	_	
231-3	35827-35828	,	_	_	_	_	
231-4	35829-35838	Diversity	_	_	_	_	
231-5	35839-35840	&	_	_	_	_	
231-6	35841-35847	Equity	_	_	_	_	
231-7	35848-35852	What	_	_	_	_	
231-8	35853-35855	Is	_	_	_	_	
231-9	35856-35862	DevOps	_	_	_	_	
231-10	35862-35863	?	_	_	_	_	

#Text=What Is a Container?
232-1	35864-35868	What	_	_	_	_	
232-2	35869-35871	Is	_	_	_	_	
232-3	35872-35873	a	_	_	_	_	
232-4	35874-35883	Container	_	_	_	_	
232-5	35883-35884	?	_	_	_	_	

#Text=What Is a Data Lake?
233-1	35885-35889	What	_	_	_	_	
233-2	35890-35892	Is	_	_	_	_	
233-3	35893-35894	a	_	_	_	_	
233-4	35895-35899	Data	_	_	_	_	
233-5	35900-35904	Lake	_	_	_	_	
233-6	35904-35905	?	_	_	_	_	

#Text=AWS Cloud Security
#Text=What's New
#Text=Blogs
#Text=Press Releases
#Text=Resources for AWS
#Text=Getting Started
#Text=Training and Certification
#Text=AWS Solutions Portfolio
#Text=Architecture Center
#Text=Product and Technical FAQs
#Text=Analyst Reports
#Text=AWS Partner Network
#Text=Developers on AWS
#Text=Developer Center
#Text=SDKs & Tools
#Text=.NET on AWS
#Text=Python on AWS
#Text=Java on AWS
#Text=PHP on AWS
#Text=Javascript on AWS
#Text=Help
#Text=Contact Us
#Text=AWS Careers
#Text=File a Support Ticket
#Text=Knowledge Center
#Text=AWS Support Overview
#Text=Legal
#Text=Create an AWS Account
#Text=Amazon is an Equal Opportunity Employer:
#Text=Minority / Women / Disability / Veteran / Gender Identity / Sexual Orientation / Age.
234-1	35906-35909	AWS	_	_	_	_	
234-2	35910-35915	Cloud	_	_	_	_	
234-3	35916-35924	Security	_	_	_	_	
234-4	35925-35931	What's	_	_	_	_	
234-5	35932-35935	New	_	_	_	_	
234-6	35936-35941	Blogs	_	_	_	_	
234-7	35942-35947	Press	_	_	_	_	
234-8	35948-35956	Releases	_	_	_	_	
234-9	35957-35966	Resources	_	_	_	_	
234-10	35967-35970	for	_	_	_	_	
234-11	35971-35974	AWS	_	_	_	_	
234-12	35975-35982	Getting	_	_	_	_	
234-13	35983-35990	Started	_	_	_	_	
234-14	35991-35999	Training	_	_	_	_	
234-15	36000-36003	and	_	_	_	_	
234-16	36004-36017	Certification	_	_	_	_	
234-17	36018-36021	AWS	_	_	_	_	
234-18	36022-36031	Solutions	_	_	_	_	
234-19	36032-36041	Portfolio	_	_	_	_	
234-20	36042-36054	Architecture	_	_	_	_	
234-21	36055-36061	Center	_	_	_	_	
234-22	36062-36069	Product	_	_	_	_	
234-23	36070-36073	and	_	_	_	_	
234-24	36074-36083	Technical	_	_	_	_	
234-25	36084-36088	FAQs	_	_	_	_	
234-26	36089-36096	Analyst	_	_	_	_	
234-27	36097-36104	Reports	_	_	_	_	
234-28	36105-36108	AWS	_	_	_	_	
234-29	36109-36116	Partner	_	_	_	_	
234-30	36117-36124	Network	_	_	_	_	
234-31	36125-36135	Developers	_	_	_	_	
234-32	36136-36138	on	_	_	_	_	
234-33	36139-36142	AWS	_	_	_	_	
234-34	36143-36152	Developer	_	_	_	_	
234-35	36153-36159	Center	_	_	_	_	
234-36	36160-36164	SDKs	_	_	_	_	
234-37	36165-36166	&	_	_	_	_	
234-38	36167-36172	Tools	_	_	_	_	
234-39	36173-36174	.	_	_	_	_	
234-40	36174-36177	NET	_	_	_	_	
234-41	36178-36180	on	_	_	_	_	
234-42	36181-36184	AWS	_	_	_	_	
234-43	36185-36191	Python	_	_	_	_	
234-44	36192-36194	on	_	_	_	_	
234-45	36195-36198	AWS	_	_	_	_	
234-46	36199-36203	Java	_	_	_	_	
234-47	36204-36206	on	_	_	_	_	
234-48	36207-36210	AWS	_	_	_	_	
234-49	36211-36214	PHP	_	_	_	_	
234-50	36215-36217	on	_	_	_	_	
234-51	36218-36221	AWS	_	_	_	_	
234-52	36222-36232	Javascript	_	_	_	_	
234-53	36233-36235	on	_	_	_	_	
234-54	36236-36239	AWS	_	_	_	_	
234-55	36240-36244	Help	_	_	_	_	
234-56	36245-36252	Contact	_	_	_	_	
234-57	36253-36255	Us	_	_	_	_	
234-58	36256-36259	AWS	_	_	_	_	
234-59	36260-36267	Careers	_	_	_	_	
234-60	36268-36272	File	_	_	_	_	
234-61	36273-36274	a	_	_	_	_	
234-62	36275-36282	Support	_	_	_	_	
234-63	36283-36289	Ticket	_	_	_	_	
234-64	36290-36299	Knowledge	_	_	_	_	
234-65	36300-36306	Center	_	_	_	_	
234-66	36307-36310	AWS	_	_	_	_	
234-67	36311-36318	Support	_	_	_	_	
234-68	36319-36327	Overview	_	_	_	_	
234-69	36328-36333	Legal	_	_	_	_	
234-70	36334-36340	Create	_	_	_	_	
234-71	36341-36343	an	_	_	_	_	
234-72	36344-36347	AWS	_	_	_	_	
234-73	36348-36355	Account	_	_	_	_	
234-74	36356-36362	Amazon	_	_	_	_	
234-75	36363-36365	is	_	_	_	_	
234-76	36366-36368	an	_	_	_	_	
234-77	36369-36374	Equal	_	_	_	_	
234-78	36375-36386	Opportunity	_	_	_	_	
234-79	36387-36395	Employer	_	_	_	_	
234-80	36395-36396	:	_	_	_	_	
234-81	36397-36405	Minority	_	_	_	_	
234-82	36406-36407	/	_	_	_	_	
234-83	36408-36413	Women	_	_	_	_	
234-84	36414-36415	/	_	_	_	_	
234-85	36416-36426	Disability	_	_	_	_	
234-86	36427-36428	/	_	_	_	_	
234-87	36429-36436	Veteran	_	_	_	_	
234-88	36437-36438	/	_	_	_	_	
234-89	36439-36445	Gender	_	_	_	_	
234-90	36446-36454	Identity	_	_	_	_	
234-91	36455-36456	/	_	_	_	_	
234-92	36457-36463	Sexual	_	_	_	_	
234-93	36464-36475	Orientation	_	_	_	_	
234-94	36476-36477	/	_	_	_	_	
234-95	36478-36481	Age	_	_	_	_	
234-96	36481-36482	.	_	_	_	_	

#Text=Language
#Text=عربي
#Text=Bahasa Indonesia
#Text=Deutsch
#Text=English
#Text=Español
#Text=Français
#Text=Italiano
#Text=Português
#Text=Tiếng Việt
#Text=Türkçe
#Text=Ρусский
#Text=ไทย
#Text=日本語
#Text=한국어
#Text=中文 (简体)
#Text=中文 (繁體)
#Text=Privacy
#Text=Site Terms
#Text=Cookie Preferences
#Text=© 2021, Amazon Web Services, Inc. or its affiliates.
235-1	36483-36491	Language	_	_	_	_	
235-2	36492-36496	عربي	_	_	_	_	
235-3	36497-36503	Bahasa	_	_	_	_	
235-4	36504-36513	Indonesia	_	_	_	_	
235-5	36514-36521	Deutsch	_	_	_	_	
235-6	36522-36529	English	_	_	_	_	
235-7	36530-36537	Español	_	_	_	_	
235-8	36538-36546	Français	_	_	_	_	
235-9	36547-36555	Italiano	_	_	_	_	
235-10	36556-36565	Português	_	_	_	_	
235-11	36566-36571	Tiếng	_	_	_	_	
235-12	36572-36576	Việt	_	_	_	_	
235-13	36577-36583	Türkçe	_	_	_	_	
235-14	36584-36591	Ρусский	_	_	_	_	
235-15	36592-36595	ไทย	_	_	_	_	
235-16	36596-36599	日本語	_	_	_	_	
235-17	36600-36603	한국어	_	_	_	_	
235-18	36604-36606	中文	_	_	_	_	
235-19	36607-36608	(	_	_	_	_	
235-20	36608-36610	简体	_	_	_	_	
235-21	36610-36611	)	_	_	_	_	
235-22	36612-36614	中文	_	_	_	_	
235-23	36615-36616	(	_	_	_	_	
235-24	36616-36618	繁體	_	_	_	_	
235-25	36618-36619	)	_	_	_	_	
235-26	36620-36627	Privacy	_	_	_	_	
235-27	36628-36632	Site	_	_	_	_	
235-28	36633-36638	Terms	_	_	_	_	
235-29	36639-36645	Cookie	_	_	_	_	
235-30	36646-36657	Preferences	_	_	_	_	
235-31	36658-36659	©	_	_	_	_	
235-32	36660-36664	2021	_	_	_	_	
235-33	36664-36665	,	_	_	_	_	
235-34	36666-36672	Amazon	_	_	_	_	
235-35	36673-36676	Web	_	_	_	_	
235-36	36677-36685	Services	_	_	_	_	
235-37	36685-36686	,	_	_	_	_	
235-38	36687-36690	Inc	_	_	_	_	
235-39	36690-36691	.	_	_	_	_	
235-40	36692-36694	or	_	_	_	_	
235-41	36695-36698	its	_	_	_	_	
235-42	36699-36709	affiliates	_	_	_	_	
235-43	36709-36710	.	_	_	_	_	

#Text=All rights reserved.
236-1	36711-36714	All	_	_	_	_	
236-2	36715-36721	rights	_	_	_	_	
236-3	36722-36730	reserved	_	_	_	_	
236-4	36730-36731	.	_	_	_	_	
