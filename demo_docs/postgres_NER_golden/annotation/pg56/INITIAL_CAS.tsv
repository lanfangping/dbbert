#FORMAT=WebAnno TSV 3.3


#Text=Teaching new Presto performance tricks to the Old-School DBA - Engineering Blog Skip to content Engineering Blog Menu Home Front-End Performance Mobile Conferences Jobs Teaching new Presto performance tricks to the Old-School DBA
1-1	0-8	Teaching	
1-2	9-12	new	
1-3	13-19	Presto	
1-4	20-31	performance	
1-5	32-38	tricks	
1-6	39-41	to	
1-7	42-45	the	
1-8	46-56	Old-School	
1-9	57-60	DBA	
1-10	61-62	-	
1-11	63-74	Engineering	
1-12	75-79	Blog	
1-13	80-84	Skip	
1-14	85-87	to	
1-15	88-95	content	
1-16	96-107	Engineering	
1-17	108-112	Blog	
1-18	113-117	Menu	
1-19	118-122	Home	
1-20	123-132	Front-End	
1-21	133-144	Performance	
1-22	145-151	Mobile	
1-23	152-163	Conferences	
1-24	164-168	Jobs	
1-25	169-177	Teaching	
1-26	178-181	new	
1-27	182-188	Presto	
1-28	189-200	performance	
1-29	201-207	tricks	
1-30	208-210	to	
1-31	211-214	the	
1-32	215-225	Old-School	
1-33	226-229	DBA	

#Text=Posted on June 29, 2020 by Ed Presz Stories You will love MySQL High Availability at Eventbrite Leveraging AWS “spot” instances to drive down costs Open Data: The what, why and how to get started Boosting Big Data workloads with Presto Auto Scaling
2-1	230-236	Posted	
2-2	237-239	on	
2-3	240-244	June	
2-4	245-247	29	
2-5	247-248	,	
2-6	249-253	2020	
2-7	254-256	by	
2-8	257-259	Ed	
2-9	260-265	Presz	
2-10	266-273	Stories	
2-11	274-277	You	
2-12	278-282	will	
2-13	283-287	love	
2-14	288-293	MySQL	
2-15	294-298	High	
2-16	299-311	Availability	
2-17	312-314	at	
2-18	315-325	Eventbrite	
2-19	326-336	Leveraging	
2-20	337-340	AWS	
2-21	341-342	“	
2-22	342-346	spot	
2-23	346-347	”	
2-24	348-357	instances	
2-25	358-360	to	
2-26	361-366	drive	
2-27	367-371	down	
2-28	372-377	costs	
2-29	378-382	Open	
2-30	383-387	Data	
2-31	387-388	:	
2-32	389-392	The	
2-33	393-397	what	
2-34	397-398	,	
2-35	399-402	why	
2-36	403-406	and	
2-37	407-410	how	
2-38	411-413	to	
2-39	414-417	get	
2-40	418-425	started	
2-41	426-434	Boosting	
2-42	435-438	Big	
2-43	439-443	Data	
2-44	444-453	workloads	
2-45	454-458	with	
2-46	459-465	Presto	
2-47	466-470	Auto	
2-48	471-478	Scaling	

#Text=I’ve spent much of my career working with relational databases such as Oracle and MySQL, and SQL performance has always been an area of focus for me. I’ve spent countless hours reviewing EXPLAIN plans, rewriting subqueries, adding new indexes, and chasing down table-scans. I’ve been trained to make performance improvements such as:  only choose columns in a SELECT that are absolutely necessary, stay away from LIKE clauses, review the cardinality of columns before adding indexes, and always JOIN on indexed columns. It’s been an instinctual part of my life as a Database Administrator who supports OLTP databases that have sold in excess of 20K tickets per minute to your favorite events. I remember a specific situation where a missing index caused our production databases to get flooded with table-scans that brought a world-wide on-sale to an immediate halt. I had a lot of explaining to do that day as the missing index made it to QA and Stage but not Production!
3-1	479-480	I	
3-2	480-481	’	
3-3	481-483	ve	
3-4	484-489	spent	
3-5	490-494	much	
3-6	495-497	of	
3-7	498-500	my	
3-8	501-507	career	
3-9	508-515	working	
3-10	516-520	with	
3-11	521-531	relational	
3-12	532-541	databases	
3-13	542-546	such	
3-14	547-549	as	
3-15	550-556	Oracle	
3-16	557-560	and	
3-17	561-566	MySQL	
3-18	566-567	,	
3-19	568-571	and	
3-20	572-575	SQL	
3-21	576-587	performance	
3-22	588-591	has	
3-23	592-598	always	
3-24	599-603	been	
3-25	604-606	an	
3-26	607-611	area	
3-27	612-614	of	
3-28	615-620	focus	
3-29	621-624	for	
3-30	625-627	me	
3-31	627-628	.	
3-32	629-630	I	
3-33	630-631	’	
3-34	631-633	ve	
3-35	634-639	spent	
3-36	640-649	countless	
3-37	650-655	hours	
3-38	656-665	reviewing	
3-39	666-673	EXPLAIN	
3-40	674-679	plans	
3-41	679-680	,	
3-42	681-690	rewriting	
3-43	691-701	subqueries	
3-44	701-702	,	
3-45	703-709	adding	
3-46	710-713	new	
3-47	714-721	indexes	
3-48	721-722	,	
3-49	723-726	and	
3-50	727-734	chasing	
3-51	735-739	down	
3-52	740-751	table-scans	
3-53	751-752	.	
3-54	753-754	I	
3-55	754-755	’	
3-56	755-757	ve	
3-57	758-762	been	
3-58	763-770	trained	
3-59	771-773	to	
3-60	774-778	make	
3-61	779-790	performance	
3-62	791-803	improvements	
3-63	804-808	such	
3-64	809-811	as	
3-65	811-812	:	
3-66	812-813	 	
3-67	814-818	only	
3-68	819-825	choose	
3-69	826-833	columns	
3-70	834-836	in	
3-71	837-838	a	
3-72	839-845	SELECT	
3-73	846-850	that	
3-74	851-854	are	
3-75	855-865	absolutely	
3-76	866-875	necessary	
3-77	875-876	,	
3-78	877-881	stay	
3-79	882-886	away	
3-80	887-891	from	
3-81	892-896	LIKE	
3-82	897-904	clauses	
3-83	904-905	,	
3-84	906-912	review	
3-85	913-916	the	
3-86	917-928	cardinality	
3-87	929-931	of	
3-88	932-939	columns	
3-89	940-946	before	
3-90	947-953	adding	
3-91	954-961	indexes	
3-92	961-962	,	
3-93	963-966	and	
3-94	967-973	always	
3-95	974-978	JOIN	
3-96	979-981	on	
3-97	982-989	indexed	
3-98	990-997	columns	
3-99	997-998	.	
3-100	999-1001	It	
3-101	1001-1002	’	
3-102	1002-1003	s	
3-103	1004-1008	been	
3-104	1009-1011	an	
3-105	1012-1023	instinctual	
3-106	1024-1028	part	
3-107	1029-1031	of	
3-108	1032-1034	my	
3-109	1035-1039	life	
3-110	1040-1042	as	
3-111	1043-1044	a	
3-112	1045-1053	Database	
3-113	1054-1067	Administrator	
3-114	1068-1071	who	
3-115	1072-1080	supports	
3-116	1081-1085	OLTP	
3-117	1086-1095	databases	
3-118	1096-1100	that	
3-119	1101-1105	have	
3-120	1106-1110	sold	
3-121	1111-1113	in	
3-122	1114-1120	excess	
3-123	1121-1123	of	
3-124	1124-1127	20K	
3-125	1128-1135	tickets	
3-126	1136-1139	per	
3-127	1140-1146	minute	
3-128	1147-1149	to	
3-129	1150-1154	your	
3-130	1155-1163	favorite	
3-131	1164-1170	events	
3-132	1170-1171	.	
3-133	1172-1173	I	
3-134	1174-1182	remember	
3-135	1183-1184	a	
3-136	1185-1193	specific	
3-137	1194-1203	situation	
3-138	1204-1209	where	
3-139	1210-1211	a	
3-140	1212-1219	missing	
3-141	1220-1225	index	
3-142	1226-1232	caused	
3-143	1233-1236	our	
3-144	1237-1247	production	
3-145	1248-1257	databases	
3-146	1258-1260	to	
3-147	1261-1264	get	
3-148	1265-1272	flooded	
3-149	1273-1277	with	
3-150	1278-1289	table-scans	
3-151	1290-1294	that	
3-152	1295-1302	brought	
3-153	1303-1304	a	
3-154	1305-1315	world-wide	
3-155	1316-1323	on-sale	
3-156	1324-1326	to	
3-157	1327-1329	an	
3-158	1330-1339	immediate	
3-159	1340-1344	halt	
3-160	1344-1345	.	
3-161	1346-1347	I	
3-162	1348-1351	had	
3-163	1352-1353	a	
3-164	1354-1357	lot	
3-165	1358-1360	of	
3-166	1361-1371	explaining	
3-167	1372-1374	to	
3-168	1375-1377	do	
3-169	1378-1382	that	
3-170	1383-1386	day	
3-171	1387-1389	as	
3-172	1390-1393	the	
3-173	1394-1401	missing	
3-174	1402-1407	index	
3-175	1408-1412	made	
3-176	1413-1415	it	
3-177	1416-1418	to	
3-178	1419-1421	QA	
3-179	1422-1425	and	
3-180	1426-1431	Stage	
3-181	1432-1435	but	
3-182	1436-1439	not	
3-183	1440-1450	Production	
3-184	1450-1451	!	

#Text=In recent years, I’ve transitioned to Data Engineering and began supporting Big Data environments.  Specifically, I’m supporting Eventbrite’s Data Warehouse which leverages Presto and Apache Hive using the Presto/Hive connector. The data files can be of different formats, but we’re using HDFS and S3.  The Hive metadata describes how data stored in HDFS/S3 maps to schemas, tables, and columns to be queried via SQL. We persist this metadata information in Amazon Aurora and access it through the Presto/Hive connector via the Hive Metastore Service (HMS).
4-1	1452-1454	In	
4-2	1455-1461	recent	
4-3	1462-1467	years	
4-4	1467-1468	,	
4-5	1469-1470	I	
4-6	1470-1471	’	
4-7	1471-1473	ve	
4-8	1474-1486	transitioned	
4-9	1487-1489	to	
4-10	1490-1494	Data	
4-11	1495-1506	Engineering	
4-12	1507-1510	and	
4-13	1511-1516	began	
4-14	1517-1527	supporting	
4-15	1528-1531	Big	
4-16	1532-1536	Data	
4-17	1537-1549	environments	
4-18	1549-1550	.	
4-19	1550-1551	 	
4-20	1552-1564	Specifically	
4-21	1564-1565	,	
4-22	1566-1567	I	
4-23	1567-1568	’	
4-24	1568-1569	m	
4-25	1570-1580	supporting	
4-26	1581-1591	Eventbrite	
4-27	1591-1592	’	
4-28	1592-1593	s	
4-29	1594-1598	Data	
4-30	1599-1608	Warehouse	
4-31	1609-1614	which	
4-32	1615-1624	leverages	
4-33	1625-1631	Presto	
4-34	1632-1635	and	
4-35	1636-1642	Apache	
4-36	1643-1647	Hive	
4-37	1648-1653	using	
4-38	1654-1657	the	
4-39	1658-1664	Presto	
4-40	1664-1665	/	
4-41	1665-1669	Hive	
4-42	1670-1679	connector	
4-43	1679-1680	.	
4-44	1681-1684	The	
4-45	1685-1689	data	
4-46	1690-1695	files	
4-47	1696-1699	can	
4-48	1700-1702	be	
4-49	1703-1705	of	
4-50	1706-1715	different	
4-51	1716-1723	formats	
4-52	1723-1724	,	
4-53	1725-1728	but	
4-54	1729-1731	we	
4-55	1731-1732	’	
4-56	1732-1734	re	
4-57	1735-1740	using	
4-58	1741-1745	HDFS	
4-59	1746-1749	and	
4-60	1750-1752	S3	
4-61	1752-1753	.	
4-62	1753-1754	 	
4-63	1755-1758	The	
4-64	1759-1763	Hive	
4-65	1764-1772	metadata	
4-66	1773-1782	describes	
4-67	1783-1786	how	
4-68	1787-1791	data	
4-69	1792-1798	stored	
4-70	1799-1801	in	
4-71	1802-1806	HDFS	
4-72	1806-1807	/	
4-73	1807-1809	S3	
4-74	1810-1814	maps	
4-75	1815-1817	to	
4-76	1818-1825	schemas	
4-77	1825-1826	,	
4-78	1827-1833	tables	
4-79	1833-1834	,	
4-80	1835-1838	and	
4-81	1839-1846	columns	
4-82	1847-1849	to	
4-83	1850-1852	be	
4-84	1853-1860	queried	
4-85	1861-1864	via	
4-86	1865-1868	SQL	
4-87	1868-1869	.	
4-88	1870-1872	We	
4-89	1873-1880	persist	
4-90	1881-1885	this	
4-91	1886-1894	metadata	
4-92	1895-1906	information	
4-93	1907-1909	in	
4-94	1910-1916	Amazon	
4-95	1917-1923	Aurora	
4-96	1924-1927	and	
4-97	1928-1934	access	
4-98	1935-1937	it	
4-99	1938-1945	through	
4-100	1946-1949	the	
4-101	1950-1956	Presto	
4-102	1956-1957	/	
4-103	1957-1961	Hive	
4-104	1962-1971	connector	
4-105	1972-1975	via	
4-106	1976-1979	the	
4-107	1980-1984	Hive	
4-108	1985-1994	Metastore	
4-109	1995-2002	Service	
4-110	2003-2004	(	
4-111	2004-2007	HMS	
4-112	2007-2008	)	
4-113	2008-2009	.	

#Text=The stakes have changed and so have the skill-sets required. I’ve needed to retrain myself in how to write optimal SQL for Presto. Some of the best practices for Presto are the same as relational databases and others are brand new to me. This blog post summarizes some of the similarities and some of the differences with writing efficient SQL on MySQL vs Presto/Hive. Along the way I’ve had to learn new terms such as “federated queries”, “broadcast joins”, “reshuffling”, “join reordering”, and “predicate pushdown”. Let’s start with the basics: What is MySQL? The world’s most popular open source database. The MySQL software delivers a fast, multi-threaded, multi-user, and robust SQL (Structured Query Language) database server. MySQL is intended for mission-critical, heavy-load production database usage.
5-1	2010-2013	The	
5-2	2014-2020	stakes	
5-3	2021-2025	have	
5-4	2026-2033	changed	
5-5	2034-2037	and	
5-6	2038-2040	so	
5-7	2041-2045	have	
5-8	2046-2049	the	
5-9	2050-2060	skill-sets	
5-10	2061-2069	required	
5-11	2069-2070	.	
5-12	2071-2072	I	
5-13	2072-2073	’	
5-14	2073-2075	ve	
5-15	2076-2082	needed	
5-16	2083-2085	to	
5-17	2086-2093	retrain	
5-18	2094-2100	myself	
5-19	2101-2103	in	
5-20	2104-2107	how	
5-21	2108-2110	to	
5-22	2111-2116	write	
5-23	2117-2124	optimal	
5-24	2125-2128	SQL	
5-25	2129-2132	for	
5-26	2133-2139	Presto	
5-27	2139-2140	.	
5-28	2141-2145	Some	
5-29	2146-2148	of	
5-30	2149-2152	the	
5-31	2153-2157	best	
5-32	2158-2167	practices	
5-33	2168-2171	for	
5-34	2172-2178	Presto	
5-35	2179-2182	are	
5-36	2183-2186	the	
5-37	2187-2191	same	
5-38	2192-2194	as	
5-39	2195-2205	relational	
5-40	2206-2215	databases	
5-41	2216-2219	and	
5-42	2220-2226	others	
5-43	2227-2230	are	
5-44	2231-2236	brand	
5-45	2237-2240	new	
5-46	2241-2243	to	
5-47	2244-2246	me	
5-48	2246-2247	.	
5-49	2248-2252	This	
5-50	2253-2257	blog	
5-51	2258-2262	post	
5-52	2263-2273	summarizes	
5-53	2274-2278	some	
5-54	2279-2281	of	
5-55	2282-2285	the	
5-56	2286-2298	similarities	
5-57	2299-2302	and	
5-58	2303-2307	some	
5-59	2308-2310	of	
5-60	2311-2314	the	
5-61	2315-2326	differences	
5-62	2327-2331	with	
5-63	2332-2339	writing	
5-64	2340-2349	efficient	
5-65	2350-2353	SQL	
5-66	2354-2356	on	
5-67	2357-2362	MySQL	
5-68	2363-2365	vs	
5-69	2366-2372	Presto	
5-70	2372-2373	/	
5-71	2373-2377	Hive	
5-72	2377-2378	.	
5-73	2379-2384	Along	
5-74	2385-2388	the	
5-75	2389-2392	way	
5-76	2393-2394	I	
5-77	2394-2395	’	
5-78	2395-2397	ve	
5-79	2398-2401	had	
5-80	2402-2404	to	
5-81	2405-2410	learn	
5-82	2411-2414	new	
5-83	2415-2420	terms	
5-84	2421-2425	such	
5-85	2426-2428	as	
5-86	2429-2430	“	
5-87	2430-2439	federated	
5-88	2440-2447	queries	
5-89	2447-2448	”	
5-90	2448-2449	,	
5-91	2450-2451	“	
5-92	2451-2460	broadcast	
5-93	2461-2466	joins	
5-94	2466-2467	”	
5-95	2467-2468	,	
5-96	2469-2470	“	
5-97	2470-2481	reshuffling	
5-98	2481-2482	”	
5-99	2482-2483	,	
5-100	2484-2485	“	
5-101	2485-2489	join	
5-102	2490-2500	reordering	
5-103	2500-2501	”	
5-104	2501-2502	,	
5-105	2503-2506	and	
5-106	2507-2508	“	
5-107	2508-2517	predicate	
5-108	2518-2526	pushdown	
5-109	2526-2527	”	
5-110	2527-2528	.	
5-111	2529-2532	Let	
5-112	2532-2533	’	
5-113	2533-2534	s	
5-114	2535-2540	start	
5-115	2541-2545	with	
5-116	2546-2549	the	
5-117	2550-2556	basics	
5-118	2556-2557	:	
5-119	2558-2562	What	
5-120	2563-2565	is	
5-121	2566-2571	MySQL	
5-122	2571-2572	?	
5-123	2573-2576	The	
5-124	2577-2582	world	
5-125	2582-2583	’	
5-126	2583-2584	s	
5-127	2585-2589	most	
5-128	2590-2597	popular	
5-129	2598-2602	open	
5-130	2603-2609	source	
5-131	2610-2618	database	
5-132	2618-2619	.	
5-133	2620-2623	The	
5-134	2624-2629	MySQL	
5-135	2630-2638	software	
5-136	2639-2647	delivers	
5-137	2648-2649	a	
5-138	2650-2654	fast	
5-139	2654-2655	,	
5-140	2656-2670	multi-threaded	
5-141	2670-2671	,	
5-142	2672-2682	multi-user	
5-143	2682-2683	,	
5-144	2684-2687	and	
5-145	2688-2694	robust	
5-146	2695-2698	SQL	
5-147	2699-2700	(	
5-148	2700-2710	Structured	
5-149	2711-2716	Query	
5-150	2717-2725	Language	
5-151	2725-2726	)	
5-152	2727-2735	database	
5-153	2736-2742	server	
5-154	2742-2743	.	
5-155	2744-2749	MySQL	
5-156	2750-2752	is	
5-157	2753-2761	intended	
5-158	2762-2765	for	
5-159	2766-2782	mission-critical	
5-160	2782-2783	,	
5-161	2784-2794	heavy-load	
5-162	2795-2805	production	
5-163	2806-2814	database	
5-164	2815-2820	usage	
5-165	2820-2821	.	

#Text=What is Presto? Presto is an open source distributed SQL query engine for running interactive analytic queries against data sources of all sizes ranging from gigabytes to petabytes. Presto doesn’t use the map reduce framework for its execution. Instead, Presto directly accesses the data through a specialized distributed query engine that is very similar to those found in commercial parallel relational databases. Presto uses ANSI SQL syntax/semantics to build its queries. The advantage of this is that analysts with experience with relational databases will find it very easy and straightforward to write Presto queries! That said, the best practices for developing efficient SQL via Presto/Hive are different from those used to query standard RDBMS databases.
6-1	2822-2826	What	
6-2	2827-2829	is	
6-3	2830-2836	Presto	
6-4	2836-2837	?	
6-5	2838-2844	Presto	
6-6	2845-2847	is	
6-7	2848-2850	an	
6-8	2851-2855	open	
6-9	2856-2862	source	
6-10	2863-2874	distributed	
6-11	2875-2878	SQL	
6-12	2879-2884	query	
6-13	2885-2891	engine	
6-14	2892-2895	for	
6-15	2896-2903	running	
6-16	2904-2915	interactive	
6-17	2916-2924	analytic	
6-18	2925-2932	queries	
6-19	2933-2940	against	
6-20	2941-2945	data	
6-21	2946-2953	sources	
6-22	2954-2956	of	
6-23	2957-2960	all	
6-24	2961-2966	sizes	
6-25	2967-2974	ranging	
6-26	2975-2979	from	
6-27	2980-2989	gigabytes	
6-28	2990-2992	to	
6-29	2993-3002	petabytes	
6-30	3002-3003	.	
6-31	3004-3010	Presto	
6-32	3011-3016	doesn	
6-33	3016-3017	’	
6-34	3017-3018	t	
6-35	3019-3022	use	
6-36	3023-3026	the	
6-37	3027-3030	map	
6-38	3031-3037	reduce	
6-39	3038-3047	framework	
6-40	3048-3051	for	
6-41	3052-3055	its	
6-42	3056-3065	execution	
6-43	3065-3066	.	
6-44	3067-3074	Instead	
6-45	3074-3075	,	
6-46	3076-3082	Presto	
6-47	3083-3091	directly	
6-48	3092-3100	accesses	
6-49	3101-3104	the	
6-50	3105-3109	data	
6-51	3110-3117	through	
6-52	3118-3119	a	
6-53	3120-3131	specialized	
6-54	3132-3143	distributed	
6-55	3144-3149	query	
6-56	3150-3156	engine	
6-57	3157-3161	that	
6-58	3162-3164	is	
6-59	3165-3169	very	
6-60	3170-3177	similar	
6-61	3178-3180	to	
6-62	3181-3186	those	
6-63	3187-3192	found	
6-64	3193-3195	in	
6-65	3196-3206	commercial	
6-66	3207-3215	parallel	
6-67	3216-3226	relational	
6-68	3227-3236	databases	
6-69	3236-3237	.	
6-70	3238-3244	Presto	
6-71	3245-3249	uses	
6-72	3250-3254	ANSI	
6-73	3255-3258	SQL	
6-74	3259-3265	syntax	
6-75	3265-3266	/	
6-76	3266-3275	semantics	
6-77	3276-3278	to	
6-78	3279-3284	build	
6-79	3285-3288	its	
6-80	3289-3296	queries	
6-81	3296-3297	.	
6-82	3298-3301	The	
6-83	3302-3311	advantage	
6-84	3312-3314	of	
6-85	3315-3319	this	
6-86	3320-3322	is	
6-87	3323-3327	that	
6-88	3328-3336	analysts	
6-89	3337-3341	with	
6-90	3342-3352	experience	
6-91	3353-3357	with	
6-92	3358-3368	relational	
6-93	3369-3378	databases	
6-94	3379-3383	will	
6-95	3384-3388	find	
6-96	3389-3391	it	
6-97	3392-3396	very	
6-98	3397-3401	easy	
6-99	3402-3405	and	
6-100	3406-3421	straightforward	
6-101	3422-3424	to	
6-102	3425-3430	write	
6-103	3431-3437	Presto	
6-104	3438-3445	queries	
6-105	3445-3446	!	
6-106	3447-3451	That	
6-107	3452-3456	said	
6-108	3456-3457	,	
6-109	3458-3461	the	
6-110	3462-3466	best	
6-111	3467-3476	practices	
6-112	3477-3480	for	
6-113	3481-3491	developing	
6-114	3492-3501	efficient	
6-115	3502-3505	SQL	
6-116	3506-3509	via	
6-117	3510-3516	Presto	
6-118	3516-3517	/	
6-119	3517-3521	Hive	
6-120	3522-3525	are	
6-121	3526-3535	different	
6-122	3536-3540	from	
6-123	3541-3546	those	
6-124	3547-3551	used	
6-125	3552-3554	to	
6-126	3555-3560	query	
6-127	3561-3569	standard	
6-128	3570-3575	RDBMS	
6-129	3576-3585	databases	
6-130	3585-3586	.	

#Text=Let’s transition to Presto performance tuning tips and how they compare to standard best practices with MySQL. 1. Only specify the columns you need Restricting columns for SELECTs can improve your query performance significantly. Specify only needed columns instead of using a wildcard (*). This applies to Presto as well as MySQL! 2. Consider the cardinality within GROUP BY
7-1	3587-3590	Let	
7-2	3590-3591	’	
7-3	3591-3592	s	
7-4	3593-3603	transition	
7-5	3604-3606	to	
7-6	3607-3613	Presto	
7-7	3614-3625	performance	
7-8	3626-3632	tuning	
7-9	3633-3637	tips	
7-10	3638-3641	and	
7-11	3642-3645	how	
7-12	3646-3650	they	
7-13	3651-3658	compare	
7-14	3659-3661	to	
7-15	3662-3670	standard	
7-16	3671-3675	best	
7-17	3676-3685	practices	
7-18	3686-3690	with	
7-19	3691-3696	MySQL	
7-20	3696-3697	.	
7-21	3698-3699	1	
7-22	3699-3700	.	
7-23	3701-3705	Only	
7-24	3706-3713	specify	
7-25	3714-3717	the	
7-26	3718-3725	columns	
7-27	3726-3729	you	
7-28	3730-3734	need	
7-29	3735-3746	Restricting	
7-30	3747-3754	columns	
7-31	3755-3758	for	
7-32	3759-3766	SELECTs	
7-33	3767-3770	can	
7-34	3771-3778	improve	
7-35	3779-3783	your	
7-36	3784-3789	query	
7-37	3790-3801	performance	
7-38	3802-3815	significantly	
7-39	3815-3816	.	
7-40	3817-3824	Specify	
7-41	3825-3829	only	
7-42	3830-3836	needed	
7-43	3837-3844	columns	
7-44	3845-3852	instead	
7-45	3853-3855	of	
7-46	3856-3861	using	
7-47	3862-3863	a	
7-48	3864-3872	wildcard	
7-49	3873-3874	(	
7-50	3874-3875	*	
7-51	3875-3876	)	
7-52	3876-3877	.	
7-53	3878-3882	This	
7-54	3883-3890	applies	
7-55	3891-3893	to	
7-56	3894-3900	Presto	
7-57	3901-3903	as	
7-58	3904-3908	well	
7-59	3909-3911	as	
7-60	3912-3917	MySQL	
7-61	3917-3918	!	
7-62	3919-3920	2	
7-63	3920-3921	.	
7-64	3922-3930	Consider	
7-65	3931-3934	the	
7-66	3935-3946	cardinality	
7-67	3947-3953	within	
7-68	3954-3959	GROUP	
7-69	3960-3962	BY	

#Text=When using GROUP BY, order the columns by the highest cardinality (that is, most number of unique values) to the lowest. The GROUP BY operator distributes rows based on the order of the columns to the worker nodes, which hold the GROUP BY values in memory. As rows are being ingested, the GROUP BY columns are looked up in memory and the values are compared. If the GROUP BY columns match, the values are then aggregated together.
8-1	3963-3967	When	
8-2	3968-3973	using	
8-3	3974-3979	GROUP	
8-4	3980-3982	BY	
8-5	3982-3983	,	
8-6	3984-3989	order	
8-7	3990-3993	the	
8-8	3994-4001	columns	
8-9	4002-4004	by	
8-10	4005-4008	the	
8-11	4009-4016	highest	
8-12	4017-4028	cardinality	
8-13	4029-4030	(	
8-14	4030-4034	that	
8-15	4035-4037	is	
8-16	4037-4038	,	
8-17	4039-4043	most	
8-18	4044-4050	number	
8-19	4051-4053	of	
8-20	4054-4060	unique	
8-21	4061-4067	values	
8-22	4067-4068	)	
8-23	4069-4071	to	
8-24	4072-4075	the	
8-25	4076-4082	lowest	
8-26	4082-4083	.	
8-27	4084-4087	The	
8-28	4088-4093	GROUP	
8-29	4094-4096	BY	
8-30	4097-4105	operator	
8-31	4106-4117	distributes	
8-32	4118-4122	rows	
8-33	4123-4128	based	
8-34	4129-4131	on	
8-35	4132-4135	the	
8-36	4136-4141	order	
8-37	4142-4144	of	
8-38	4145-4148	the	
8-39	4149-4156	columns	
8-40	4157-4159	to	
8-41	4160-4163	the	
8-42	4164-4170	worker	
8-43	4171-4176	nodes	
8-44	4176-4177	,	
8-45	4178-4183	which	
8-46	4184-4188	hold	
8-47	4189-4192	the	
8-48	4193-4198	GROUP	
8-49	4199-4201	BY	
8-50	4202-4208	values	
8-51	4209-4211	in	
8-52	4212-4218	memory	
8-53	4218-4219	.	
8-54	4220-4222	As	
8-55	4223-4227	rows	
8-56	4228-4231	are	
8-57	4232-4237	being	
8-58	4238-4246	ingested	
8-59	4246-4247	,	
8-60	4248-4251	the	
8-61	4252-4257	GROUP	
8-62	4258-4260	BY	
8-63	4261-4268	columns	
8-64	4269-4272	are	
8-65	4273-4279	looked	
8-66	4280-4282	up	
8-67	4283-4285	in	
8-68	4286-4292	memory	
8-69	4293-4296	and	
8-70	4297-4300	the	
8-71	4301-4307	values	
8-72	4308-4311	are	
8-73	4312-4320	compared	
8-74	4320-4321	.	
8-75	4322-4324	If	
8-76	4325-4328	the	
8-77	4329-4334	GROUP	
8-78	4335-4337	BY	
8-79	4338-4345	columns	
8-80	4346-4351	match	
8-81	4351-4352	,	
8-82	4353-4356	the	
8-83	4357-4363	values	
8-84	4364-4367	are	
8-85	4368-4372	then	
8-86	4373-4383	aggregated	
8-87	4384-4392	together	
8-88	4392-4393	.	

#Text=3. Use LIMIT with ORDER BY The ORDER BY clause returns the results of a query in sort order. To  process the sort, Presto must send all rows of data to a single worker and then sort them. This sort can be a very memory-intensive operation for large datasets that will put strain on the Presto workers. The end result will be long execution times and/or memory errors.
9-1	4394-4395	3	
9-2	4395-4396	.	
9-3	4397-4400	Use	
9-4	4401-4406	LIMIT	
9-5	4407-4411	with	
9-6	4412-4417	ORDER	
9-7	4418-4420	BY	
9-8	4421-4424	The	
9-9	4425-4430	ORDER	
9-10	4431-4433	BY	
9-11	4434-4440	clause	
9-12	4441-4448	returns	
9-13	4449-4452	the	
9-14	4453-4460	results	
9-15	4461-4463	of	
9-16	4464-4465	a	
9-17	4466-4471	query	
9-18	4472-4474	in	
9-19	4475-4479	sort	
9-20	4480-4485	order	
9-21	4485-4486	.	
9-22	4487-4489	To	
9-23	4489-4490	 	
9-24	4491-4498	process	
9-25	4499-4502	the	
9-26	4503-4507	sort	
9-27	4507-4508	,	
9-28	4509-4515	Presto	
9-29	4516-4520	must	
9-30	4521-4525	send	
9-31	4526-4529	all	
9-32	4530-4534	rows	
9-33	4535-4537	of	
9-34	4538-4542	data	
9-35	4543-4545	to	
9-36	4546-4547	a	
9-37	4548-4554	single	
9-38	4555-4561	worker	
9-39	4562-4565	and	
9-40	4566-4570	then	
9-41	4571-4575	sort	
9-42	4576-4580	them	
9-43	4580-4581	.	
9-44	4582-4586	This	
9-45	4587-4591	sort	
9-46	4592-4595	can	
9-47	4596-4598	be	
9-48	4599-4600	a	
9-49	4601-4605	very	
9-50	4606-4622	memory-intensive	
9-51	4623-4632	operation	
9-52	4633-4636	for	
9-53	4637-4642	large	
9-54	4643-4651	datasets	
9-55	4652-4656	that	
9-56	4657-4661	will	
9-57	4662-4665	put	
9-58	4666-4672	strain	
9-59	4673-4675	on	
9-60	4676-4679	the	
9-61	4680-4686	Presto	
9-62	4687-4694	workers	
9-63	4694-4695	.	
9-64	4696-4699	The	
9-65	4700-4703	end	
9-66	4704-4710	result	
9-67	4711-4715	will	
9-68	4716-4718	be	
9-69	4719-4723	long	
9-70	4724-4733	execution	
9-71	4734-4739	times	
9-72	4740-4743	and	
9-73	4743-4744	/	
9-74	4744-4746	or	
9-75	4747-4753	memory	
9-76	4754-4760	errors	
9-77	4760-4761	.	

#Text=If you are using the ORDER BY clause to look at the top N values, then use a LIMIT clause to reduce the cost of the sort significantly by pushing the sorting/limiting to individual workers, rather than the sorting being done by a single worker. I highly recommend you use the LIMIT clause not just for SQL with ORDER BY but in any situation when you’re validating new SQL. This is good practice for MySQL as well as Presto! 4. Using approximate aggregate functions
10-1	4762-4764	If	
10-2	4765-4768	you	
10-3	4769-4772	are	
10-4	4773-4778	using	
10-5	4779-4782	the	
10-6	4783-4788	ORDER	
10-7	4789-4791	BY	
10-8	4792-4798	clause	
10-9	4799-4801	to	
10-10	4802-4806	look	
10-11	4807-4809	at	
10-12	4810-4813	the	
10-13	4814-4817	top	
10-14	4818-4819	N	
10-15	4820-4826	values	
10-16	4826-4827	,	
10-17	4828-4832	then	
10-18	4833-4836	use	
10-19	4837-4838	a	
10-20	4839-4844	LIMIT	
10-21	4845-4851	clause	
10-22	4852-4854	to	
10-23	4855-4861	reduce	
10-24	4862-4865	the	
10-25	4866-4870	cost	
10-26	4871-4873	of	
10-27	4874-4877	the	
10-28	4878-4882	sort	
10-29	4883-4896	significantly	
10-30	4897-4899	by	
10-31	4900-4907	pushing	
10-32	4908-4911	the	
10-33	4912-4919	sorting	
10-34	4919-4920	/	
10-35	4920-4928	limiting	
10-36	4929-4931	to	
10-37	4932-4942	individual	
10-38	4943-4950	workers	
10-39	4950-4951	,	
10-40	4952-4958	rather	
10-41	4959-4963	than	
10-42	4964-4967	the	
10-43	4968-4975	sorting	
10-44	4976-4981	being	
10-45	4982-4986	done	
10-46	4987-4989	by	
10-47	4990-4991	a	
10-48	4992-4998	single	
10-49	4999-5005	worker	
10-50	5005-5006	.	
10-51	5007-5008	I	
10-52	5009-5015	highly	
10-53	5016-5025	recommend	
10-54	5026-5029	you	
10-55	5030-5033	use	
10-56	5034-5037	the	
10-57	5038-5043	LIMIT	
10-58	5044-5050	clause	
10-59	5051-5054	not	
10-60	5055-5059	just	
10-61	5060-5063	for	
10-62	5064-5067	SQL	
10-63	5068-5072	with	
10-64	5073-5078	ORDER	
10-65	5079-5081	BY	
10-66	5082-5085	but	
10-67	5086-5088	in	
10-68	5089-5092	any	
10-69	5093-5102	situation	
10-70	5103-5107	when	
10-71	5108-5111	you	
10-72	5111-5112	’	
10-73	5112-5114	re	
10-74	5115-5125	validating	
10-75	5126-5129	new	
10-76	5130-5133	SQL	
10-77	5133-5134	.	
10-78	5135-5139	This	
10-79	5140-5142	is	
10-80	5143-5147	good	
10-81	5148-5156	practice	
10-82	5157-5160	for	
10-83	5161-5166	MySQL	
10-84	5167-5169	as	
10-85	5170-5174	well	
10-86	5175-5177	as	
10-87	5178-5184	Presto	
10-88	5184-5185	!	
10-89	5186-5187	4	
10-90	5187-5188	.	
10-91	5189-5194	Using	
10-92	5195-5206	approximate	
10-93	5207-5216	aggregate	
10-94	5217-5226	functions	

#Text=When exploring large datasets often an approximation (with standard deviation of 2.3%) is more than good enough! Presto has approximate aggregation functions that give you significant performance improvements. Using the approx_distinct(x) function on large data sets vs COUNT(DISTINCT x) will result in performance gains. When an exact number may not be required―for instance, if you are looking for a rough estimate of the number of New Years events in the Greater New York area then consider using approx_distinct(). This function minimizes the memory usage by counting unique hashes of values instead of entire strings. The drawback is that there is a small standard deviation.
11-1	5227-5231	When	
11-2	5232-5241	exploring	
11-3	5242-5247	large	
11-4	5248-5256	datasets	
11-5	5257-5262	often	
11-6	5263-5265	an	
11-7	5266-5279	approximation	
11-8	5280-5281	(	
11-9	5281-5285	with	
11-10	5286-5294	standard	
11-11	5295-5304	deviation	
11-12	5305-5307	of	
11-13	5308-5312	2.3%	
11-14	5312-5313	)	
11-15	5314-5316	is	
11-16	5317-5321	more	
11-17	5322-5326	than	
11-18	5327-5331	good	
11-19	5332-5338	enough	
11-20	5338-5339	!	
11-21	5340-5346	Presto	
11-22	5347-5350	has	
11-23	5351-5362	approximate	
11-24	5363-5374	aggregation	
11-25	5375-5384	functions	
11-26	5385-5389	that	
11-27	5390-5394	give	
11-28	5395-5398	you	
11-29	5399-5410	significant	
11-30	5411-5422	performance	
11-31	5423-5435	improvements	
11-32	5435-5436	.	
11-33	5437-5442	Using	
11-34	5443-5446	the	
11-35	5447-5462	approx_distinct	
11-36	5462-5463	(	
11-37	5463-5464	x	
11-38	5464-5465	)	
11-39	5466-5474	function	
11-40	5475-5477	on	
11-41	5478-5483	large	
11-42	5484-5488	data	
11-43	5489-5493	sets	
11-44	5494-5496	vs	
11-45	5497-5502	COUNT	
11-46	5502-5503	(	
11-47	5503-5511	DISTINCT	
11-48	5512-5513	x	
11-49	5513-5514	)	
11-50	5515-5519	will	
11-51	5520-5526	result	
11-52	5527-5529	in	
11-53	5530-5541	performance	
11-54	5542-5547	gains	
11-55	5547-5548	.	
11-56	5549-5553	When	
11-57	5554-5556	an	
11-58	5557-5562	exact	
11-59	5563-5569	number	
11-60	5570-5573	may	
11-61	5574-5577	not	
11-62	5578-5580	be	
11-63	5581-5593	required―for	
11-64	5594-5602	instance	
11-65	5602-5603	,	
11-66	5604-5606	if	
11-67	5607-5610	you	
11-68	5611-5614	are	
11-69	5615-5622	looking	
11-70	5623-5626	for	
11-71	5627-5628	a	
11-72	5629-5634	rough	
11-73	5635-5643	estimate	
11-74	5644-5646	of	
11-75	5647-5650	the	
11-76	5651-5657	number	
11-77	5658-5660	of	
11-78	5661-5664	New	
11-79	5665-5670	Years	
11-80	5671-5677	events	
11-81	5678-5680	in	
11-82	5681-5684	the	
11-83	5685-5692	Greater	
11-84	5693-5696	New	
11-85	5697-5701	York	
11-86	5702-5706	area	
11-87	5707-5711	then	
11-88	5712-5720	consider	
11-89	5721-5726	using	
11-90	5727-5742	approx_distinct	
11-91	5742-5743	(	
11-92	5743-5744	)	
11-93	5744-5745	.	
11-94	5746-5750	This	
11-95	5751-5759	function	
11-96	5760-5769	minimizes	
11-97	5770-5773	the	
11-98	5774-5780	memory	
11-99	5781-5786	usage	
11-100	5787-5789	by	
11-101	5790-5798	counting	
11-102	5799-5805	unique	
11-103	5806-5812	hashes	
11-104	5813-5815	of	
11-105	5816-5822	values	
11-106	5823-5830	instead	
11-107	5831-5833	of	
11-108	5834-5840	entire	
11-109	5841-5848	strings	
11-110	5848-5849	.	
11-111	5850-5853	The	
11-112	5854-5862	drawback	
11-113	5863-5865	is	
11-114	5866-5870	that	
11-115	5871-5876	there	
11-116	5877-5879	is	
11-117	5880-5881	a	
11-118	5882-5887	small	
11-119	5888-5896	standard	
11-120	5897-5906	deviation	
11-121	5906-5907	.	

#Text=5. Aggregating a series of LIKE clauses in one single regexp_like clause The LIKE operation is well known to be slow especially when not anchored to the left (i.e. the search text is surrounded by ‘%’ on both sides) or when used with a series of OR conditions. So it is no surprise that Presto’s query optimizer is unable to improve queries that contain many LIKE clauses.
12-1	5908-5909	5	
12-2	5909-5910	.	
12-3	5911-5922	Aggregating	
12-4	5923-5924	a	
12-5	5925-5931	series	
12-6	5932-5934	of	
12-7	5935-5939	LIKE	
12-8	5940-5947	clauses	
12-9	5948-5950	in	
12-10	5951-5954	one	
12-11	5955-5961	single	
12-12	5962-5973	regexp_like	
12-13	5974-5980	clause	
12-14	5981-5984	The	
12-15	5985-5989	LIKE	
12-16	5990-5999	operation	
12-17	6000-6002	is	
12-18	6003-6007	well	
12-19	6008-6013	known	
12-20	6014-6016	to	
12-21	6017-6019	be	
12-22	6020-6024	slow	
12-23	6025-6035	especially	
12-24	6036-6040	when	
12-25	6041-6044	not	
12-26	6045-6053	anchored	
12-27	6054-6056	to	
12-28	6057-6060	the	
12-29	6061-6065	left	
12-30	6066-6067	(	
12-31	6067-6070	i.e	
12-32	6070-6071	.	
12-33	6072-6075	the	
12-34	6076-6082	search	
12-35	6083-6087	text	
12-36	6088-6090	is	
12-37	6091-6101	surrounded	
12-38	6102-6104	by	
12-39	6105-6106	‘	
12-40	6106-6107	%	
12-41	6107-6108	’	
12-42	6109-6111	on	
12-43	6112-6116	both	
12-44	6117-6122	sides	
12-45	6122-6123	)	
12-46	6124-6126	or	
12-47	6127-6131	when	
12-48	6132-6136	used	
12-49	6137-6141	with	
12-50	6142-6143	a	
12-51	6144-6150	series	
12-52	6151-6153	of	
12-53	6154-6156	OR	
12-54	6157-6167	conditions	
12-55	6167-6168	.	
12-56	6169-6171	So	
12-57	6172-6174	it	
12-58	6175-6177	is	
12-59	6178-6180	no	
12-60	6181-6189	surprise	
12-61	6190-6194	that	
12-62	6195-6201	Presto	
12-63	6201-6202	’	
12-64	6202-6203	s	
12-65	6204-6209	query	
12-66	6210-6219	optimizer	
12-67	6220-6222	is	
12-68	6223-6229	unable	
12-69	6230-6232	to	
12-70	6233-6240	improve	
12-71	6241-6248	queries	
12-72	6249-6253	that	
12-73	6254-6261	contain	
12-74	6262-6266	many	
12-75	6267-6271	LIKE	
12-76	6272-6279	clauses	
12-77	6279-6280	.	

#Text=We’ve found improved  LIKE performance on Presto by  substituting the LIKE/OR  combination with a single REGEXP_LIKE clause, which is Presto native.  Not only is it easier to read but it’s also more performant. Based on some quick performance tests, we see ~30% increase in run-times with REGEXP_LIKE vs comparable LIKE/OR combination. For example: SELECT  ...FROM zoo WHERE method LIKE '%monkey%' OR method LIKE '%hippo%' OR method LIKE '%tiger%' OR method LIKE '%elephant%'
13-1	6281-6283	We	
13-2	6283-6284	’	
13-3	6284-6286	ve	
13-4	6287-6292	found	
13-5	6293-6301	improved	
13-6	6301-6302	 	
13-7	6303-6307	LIKE	
13-8	6308-6319	performance	
13-9	6320-6322	on	
13-10	6323-6329	Presto	
13-11	6330-6332	by	
13-12	6332-6333	 	
13-13	6334-6346	substituting	
13-14	6347-6350	the	
13-15	6351-6355	LIKE	
13-16	6355-6356	/	
13-17	6356-6358	OR	
13-18	6358-6359	 	
13-19	6360-6371	combination	
13-20	6372-6376	with	
13-21	6377-6378	a	
13-22	6379-6385	single	
13-23	6386-6397	REGEXP_LIKE	
13-24	6398-6404	clause	
13-25	6404-6405	,	
13-26	6406-6411	which	
13-27	6412-6414	is	
13-28	6415-6421	Presto	
13-29	6422-6428	native	
13-30	6428-6429	.	
13-31	6430-6431	 	
13-32	6431-6434	Not	
13-33	6435-6439	only	
13-34	6440-6442	is	
13-35	6443-6445	it	
13-36	6446-6452	easier	
13-37	6453-6455	to	
13-38	6456-6460	read	
13-39	6461-6464	but	
13-40	6465-6467	it	
13-41	6467-6468	’	
13-42	6468-6469	s	
13-43	6470-6474	also	
13-44	6475-6479	more	
13-45	6480-6490	performant	
13-46	6490-6491	.	
13-47	6492-6497	Based	
13-48	6498-6500	on	
13-49	6501-6505	some	
13-50	6506-6511	quick	
13-51	6512-6523	performance	
13-52	6524-6529	tests	
13-53	6529-6530	,	
13-54	6531-6533	we	
13-55	6534-6537	see	
13-56	6538-6539	~	
13-57	6539-6542	30%	
13-58	6543-6551	increase	
13-59	6552-6554	in	
13-60	6555-6564	run-times	
13-61	6565-6569	with	
13-62	6570-6581	REGEXP_LIKE	
13-63	6582-6584	vs	
13-64	6585-6595	comparable	
13-65	6596-6600	LIKE	
13-66	6600-6601	/	
13-67	6601-6603	OR	
13-68	6604-6615	combination	
13-69	6615-6616	.	
13-70	6617-6620	For	
13-71	6621-6628	example	
13-72	6628-6629	:	
13-73	6630-6636	SELECT	
13-74	6636-6637	 	
13-75	6638-6639	.	
13-76	6639-6640	.	
13-77	6640-6641	.	
13-78	6641-6645	FROM	
13-79	6645-6646	 	
13-80	6646-6649	zoo	
13-81	6650-6655	WHERE	
13-82	6656-6662	method	
13-83	6663-6667	LIKE	
13-84	6668-6669	'	
13-85	6669-6670	%	
13-86	6670-6676	monkey	
13-87	6676-6677	%	
13-88	6677-6678	'	
13-89	6679-6681	OR	
13-90	6682-6688	method	
13-91	6689-6693	LIKE	
13-92	6694-6695	'	
13-93	6695-6696	%	
13-94	6696-6701	hippo	
13-95	6701-6702	%	
13-96	6702-6703	'	
13-97	6704-6706	OR	
13-98	6707-6713	method	
13-99	6714-6718	LIKE	
13-100	6719-6720	'	
13-101	6720-6721	%	
13-102	6721-6726	tiger	
13-103	6726-6727	%	
13-104	6727-6728	'	
13-105	6729-6731	OR	
13-106	6732-6738	method	
13-107	6739-6743	LIKE	
13-108	6744-6745	'	
13-109	6745-6746	%	
13-110	6746-6754	elephant	
13-111	6754-6755	%	
13-112	6755-6756	'	

#Text=can be optimized by replacing the four LIKE clauses with a single REGEXP_LIKE clause: SELECT  ...FROM zoo WHERE REGEXP_LIKE(method, 'monkey|hippo|tiger|elephant') 6. Specifying large tables first in join clause
14-1	6757-6760	can	
14-2	6761-6763	be	
14-3	6764-6773	optimized	
14-4	6774-6776	by	
14-5	6777-6786	replacing	
14-6	6787-6790	the	
14-7	6791-6795	four	
14-8	6796-6800	LIKE	
14-9	6801-6808	clauses	
14-10	6809-6813	with	
14-11	6814-6815	a	
14-12	6816-6822	single	
14-13	6823-6834	REGEXP_LIKE	
14-14	6835-6841	clause	
14-15	6841-6842	:	
14-16	6843-6849	SELECT	
14-17	6849-6850	 	
14-18	6851-6852	.	
14-19	6852-6853	.	
14-20	6853-6854	.	
14-21	6854-6858	FROM	
14-22	6858-6859	 	
14-23	6859-6862	zoo	
14-24	6863-6868	WHERE	
14-25	6869-6880	REGEXP_LIKE	
14-26	6880-6881	(	
14-27	6881-6887	method	
14-28	6887-6888	,	
14-29	6889-6890	'	
14-30	6890-6896	monkey	
14-31	6896-6897	|	
14-32	6897-6902	hippo	
14-33	6902-6903	|	
14-34	6903-6908	tiger	
14-35	6908-6909	|	
14-36	6909-6917	elephant	
14-37	6917-6918	'	
14-38	6918-6919	)	
14-39	6920-6921	6	
14-40	6921-6922	.	
14-41	6923-6933	Specifying	
14-42	6934-6939	large	
14-43	6940-6946	tables	
14-44	6947-6952	first	
14-45	6953-6955	in	
14-46	6956-6960	join	
14-47	6961-6967	clause	

#Text=When joining tables, specify the largest table first in the join. The default join algorithm of Presto is broadcast join, which partitions the left-hand side table of a join and sends (broadcasts) a copy of the entire right-hand side table to all of the worker nodes that have the partitions. If the right-hand side table is “small” then it can be replicated to all the join workers which will save CPU and network costs.  This type of join will be most efficient when the right-hand side table is small enough to fit within one node. If you receive an ‘Exceeded max memory’ error, then the right-hand side table is too large. Presto does not perform automatic join-reordering, so make sure your largest table is the first table in your sequence of joins.
15-1	6968-6972	When	
15-2	6973-6980	joining	
15-3	6981-6987	tables	
15-4	6987-6988	,	
15-5	6989-6996	specify	
15-6	6997-7000	the	
15-7	7001-7008	largest	
15-8	7009-7014	table	
15-9	7015-7020	first	
15-10	7021-7023	in	
15-11	7024-7027	the	
15-12	7028-7032	join	
15-13	7032-7033	.	
15-14	7034-7037	The	
15-15	7038-7045	default	
15-16	7046-7050	join	
15-17	7051-7060	algorithm	
15-18	7061-7063	of	
15-19	7064-7070	Presto	
15-20	7071-7073	is	
15-21	7074-7083	broadcast	
15-22	7084-7088	join	
15-23	7088-7089	,	
15-24	7090-7095	which	
15-25	7096-7106	partitions	
15-26	7107-7110	the	
15-27	7111-7120	left-hand	
15-28	7121-7125	side	
15-29	7126-7131	table	
15-30	7132-7134	of	
15-31	7135-7136	a	
15-32	7137-7141	join	
15-33	7142-7145	and	
15-34	7146-7151	sends	
15-35	7152-7153	(	
15-36	7153-7163	broadcasts	
15-37	7163-7164	)	
15-38	7165-7166	a	
15-39	7167-7171	copy	
15-40	7172-7174	of	
15-41	7175-7178	the	
15-42	7179-7185	entire	
15-43	7186-7196	right-hand	
15-44	7197-7201	side	
15-45	7202-7207	table	
15-46	7208-7210	to	
15-47	7211-7214	all	
15-48	7215-7217	of	
15-49	7218-7221	the	
15-50	7222-7228	worker	
15-51	7229-7234	nodes	
15-52	7235-7239	that	
15-53	7240-7244	have	
15-54	7245-7248	the	
15-55	7249-7259	partitions	
15-56	7259-7260	.	
15-57	7261-7263	If	
15-58	7264-7267	the	
15-59	7268-7278	right-hand	
15-60	7279-7283	side	
15-61	7284-7289	table	
15-62	7290-7292	is	
15-63	7293-7294	“	
15-64	7294-7299	small	
15-65	7299-7300	”	
15-66	7301-7305	then	
15-67	7306-7308	it	
15-68	7309-7312	can	
15-69	7313-7315	be	
15-70	7316-7326	replicated	
15-71	7327-7329	to	
15-72	7330-7333	all	
15-73	7334-7337	the	
15-74	7338-7342	join	
15-75	7343-7350	workers	
15-76	7351-7356	which	
15-77	7357-7361	will	
15-78	7362-7366	save	
15-79	7367-7370	CPU	
15-80	7371-7374	and	
15-81	7375-7382	network	
15-82	7383-7388	costs	
15-83	7388-7389	.	
15-84	7389-7390	 	
15-85	7391-7395	This	
15-86	7396-7400	type	
15-87	7401-7403	of	
15-88	7404-7408	join	
15-89	7409-7413	will	
15-90	7414-7416	be	
15-91	7417-7421	most	
15-92	7422-7431	efficient	
15-93	7432-7436	when	
15-94	7437-7440	the	
15-95	7441-7451	right-hand	
15-96	7452-7456	side	
15-97	7457-7462	table	
15-98	7463-7465	is	
15-99	7466-7471	small	
15-100	7472-7478	enough	
15-101	7479-7481	to	
15-102	7482-7485	fit	
15-103	7486-7492	within	
15-104	7493-7496	one	
15-105	7497-7501	node	
15-106	7501-7502	.	
15-107	7503-7505	If	
15-108	7506-7509	you	
15-109	7510-7517	receive	
15-110	7518-7520	an	
15-111	7521-7522	‘	
15-112	7522-7530	Exceeded	
15-113	7531-7534	max	
15-114	7535-7541	memory	
15-115	7541-7542	’	
15-116	7543-7548	error	
15-117	7548-7549	,	
15-118	7550-7554	then	
15-119	7555-7558	the	
15-120	7559-7569	right-hand	
15-121	7570-7574	side	
15-122	7575-7580	table	
15-123	7581-7583	is	
15-124	7584-7587	too	
15-125	7588-7593	large	
15-126	7593-7594	.	
15-127	7595-7601	Presto	
15-128	7602-7606	does	
15-129	7607-7610	not	
15-130	7611-7618	perform	
15-131	7619-7628	automatic	
15-132	7629-7644	join-reordering	
15-133	7644-7645	,	
15-134	7646-7648	so	
15-135	7649-7653	make	
15-136	7654-7658	sure	
15-137	7659-7663	your	
15-138	7664-7671	largest	
15-139	7672-7677	table	
15-140	7678-7680	is	
15-141	7681-7684	the	
15-142	7685-7690	first	
15-143	7691-7696	table	
15-144	7697-7699	in	
15-145	7700-7704	your	
15-146	7705-7713	sequence	
15-147	7714-7716	of	
15-148	7717-7722	joins	
15-149	7722-7723	.	

#Text=This was an interesting performance tip for me. As we know, SQL is a declarative language and the ordering of tables used in joins in MySQL, for example,  is *NOT* particularly important. The MySQL optimizer will re-order to choose the most efficient path. With Presto, the join order matters. You’ve been WARNED! Presto does not perform automatic join-reordering unless using the Cost Based Optimizer! 7. Turning on the distributed hash join If you’re battling with memory errors then try a distributed hash join. This algorithm partitions both the left and right tables using the hash values of the join keys. So the distributed join works even if the right-hand side table is large, but the performance might be slower because the join increases the number of network data transfers.
16-1	7724-7728	This	
16-2	7729-7732	was	
16-3	7733-7735	an	
16-4	7736-7747	interesting	
16-5	7748-7759	performance	
16-6	7760-7763	tip	
16-7	7764-7767	for	
16-8	7768-7770	me	
16-9	7770-7771	.	
16-10	7772-7774	As	
16-11	7775-7777	we	
16-12	7778-7782	know	
16-13	7782-7783	,	
16-14	7784-7787	SQL	
16-15	7788-7790	is	
16-16	7791-7792	a	
16-17	7793-7804	declarative	
16-18	7805-7813	language	
16-19	7814-7817	and	
16-20	7818-7821	the	
16-21	7822-7830	ordering	
16-22	7831-7833	of	
16-23	7834-7840	tables	
16-24	7841-7845	used	
16-25	7846-7848	in	
16-26	7849-7854	joins	
16-27	7855-7857	in	
16-28	7858-7863	MySQL	
16-29	7863-7864	,	
16-30	7865-7868	for	
16-31	7869-7876	example	
16-32	7876-7877	,	
16-33	7877-7878	 	
16-34	7879-7881	is	
16-35	7882-7883	*	
16-36	7883-7886	NOT	
16-37	7886-7887	*	
16-38	7888-7900	particularly	
16-39	7901-7910	important	
16-40	7910-7911	.	
16-41	7912-7915	The	
16-42	7916-7921	MySQL	
16-43	7922-7931	optimizer	
16-44	7932-7936	will	
16-45	7937-7945	re-order	
16-46	7946-7948	to	
16-47	7949-7955	choose	
16-48	7956-7959	the	
16-49	7960-7964	most	
16-50	7965-7974	efficient	
16-51	7975-7979	path	
16-52	7979-7980	.	
16-53	7981-7985	With	
16-54	7986-7992	Presto	
16-55	7992-7993	,	
16-56	7994-7997	the	
16-57	7998-8002	join	
16-58	8003-8008	order	
16-59	8009-8016	matters	
16-60	8016-8017	.	
16-61	8018-8021	You	
16-62	8021-8022	’	
16-63	8022-8024	ve	
16-64	8025-8029	been	
16-65	8030-8036	WARNED	
16-66	8036-8037	!	
16-67	8038-8044	Presto	
16-68	8045-8049	does	
16-69	8050-8053	not	
16-70	8054-8061	perform	
16-71	8062-8071	automatic	
16-72	8072-8087	join-reordering	
16-73	8088-8094	unless	
16-74	8095-8100	using	
16-75	8101-8104	the	
16-76	8105-8109	Cost	
16-77	8110-8115	Based	
16-78	8116-8125	Optimizer	
16-79	8125-8126	!	
16-80	8127-8128	7	
16-81	8128-8129	.	
16-82	8130-8137	Turning	
16-83	8138-8140	on	
16-84	8141-8144	the	
16-85	8145-8156	distributed	
16-86	8157-8161	hash	
16-87	8162-8166	join	
16-88	8167-8169	If	
16-89	8170-8173	you	
16-90	8173-8174	’	
16-91	8174-8176	re	
16-92	8177-8185	battling	
16-93	8186-8190	with	
16-94	8191-8197	memory	
16-95	8198-8204	errors	
16-96	8205-8209	then	
16-97	8210-8213	try	
16-98	8214-8215	a	
16-99	8216-8227	distributed	
16-100	8228-8232	hash	
16-101	8233-8237	join	
16-102	8237-8238	.	
16-103	8239-8243	This	
16-104	8244-8253	algorithm	
16-105	8254-8264	partitions	
16-106	8265-8269	both	
16-107	8270-8273	the	
16-108	8274-8278	left	
16-109	8279-8282	and	
16-110	8283-8288	right	
16-111	8289-8295	tables	
16-112	8296-8301	using	
16-113	8302-8305	the	
16-114	8306-8310	hash	
16-115	8311-8317	values	
16-116	8318-8320	of	
16-117	8321-8324	the	
16-118	8325-8329	join	
16-119	8330-8334	keys	
16-120	8334-8335	.	
16-121	8336-8338	So	
16-122	8339-8342	the	
16-123	8343-8354	distributed	
16-124	8355-8359	join	
16-125	8360-8365	works	
16-126	8366-8370	even	
16-127	8371-8373	if	
16-128	8374-8377	the	
16-129	8378-8388	right-hand	
16-130	8389-8393	side	
16-131	8394-8399	table	
16-132	8400-8402	is	
16-133	8403-8408	large	
16-134	8408-8409	,	
16-135	8410-8413	but	
16-136	8414-8417	the	
16-137	8418-8429	performance	
16-138	8430-8435	might	
16-139	8436-8438	be	
16-140	8439-8445	slower	
16-141	8446-8453	because	
16-142	8454-8457	the	
16-143	8458-8462	join	
16-144	8463-8472	increases	
16-145	8473-8476	the	
16-146	8477-8483	number	
16-147	8484-8486	of	
16-148	8487-8494	network	
16-149	8495-8499	data	
16-150	8500-8509	transfers	
16-151	8509-8510	.	

#Text=At Eventbrite we have the distributed_join variable set to ‘true’. (SHOW SESSION). Also it can be enabled by setting a session property (set session distributed_join = ‘true’). 8. Partition your data Partitioning divides your table into parts and keeps the related data together based on column values such as date or country.  You define partitions at table creation, and they help reduce the amount of data scanned per query, thereby improving performance. Here are some hints on partitioning:
17-1	8511-8513	At	
17-2	8514-8524	Eventbrite	
17-3	8525-8527	we	
17-4	8528-8532	have	
17-5	8533-8536	the	
17-6	8537-8553	distributed_join	
17-7	8554-8562	variable	
17-8	8563-8566	set	
17-9	8567-8569	to	
17-10	8570-8571	‘	
17-11	8571-8575	true	
17-12	8575-8576	’	
17-13	8576-8577	.	
17-14	8578-8579	(	
17-15	8579-8583	SHOW	
17-16	8584-8591	SESSION	
17-17	8591-8592	)	
17-18	8592-8593	.	
17-19	8594-8598	Also	
17-20	8599-8601	it	
17-21	8602-8605	can	
17-22	8606-8608	be	
17-23	8609-8616	enabled	
17-24	8617-8619	by	
17-25	8620-8627	setting	
17-26	8628-8629	a	
17-27	8630-8637	session	
17-28	8638-8646	property	
17-29	8647-8648	(	
17-30	8648-8651	set	
17-31	8652-8659	session	
17-32	8660-8676	distributed_join	
17-33	8677-8678	=	
17-34	8679-8680	‘	
17-35	8680-8684	true	
17-36	8684-8685	’	
17-37	8685-8686	)	
17-38	8686-8687	.	
17-39	8688-8689	8	
17-40	8689-8690	.	
17-41	8691-8700	Partition	
17-42	8701-8705	your	
17-43	8706-8710	data	
17-44	8711-8723	Partitioning	
17-45	8724-8731	divides	
17-46	8732-8736	your	
17-47	8737-8742	table	
17-48	8743-8747	into	
17-49	8748-8753	parts	
17-50	8754-8757	and	
17-51	8758-8763	keeps	
17-52	8764-8767	the	
17-53	8768-8775	related	
17-54	8776-8780	data	
17-55	8781-8789	together	
17-56	8790-8795	based	
17-57	8796-8798	on	
17-58	8799-8805	column	
17-59	8806-8812	values	
17-60	8813-8817	such	
17-61	8818-8820	as	
17-62	8821-8825	date	
17-63	8826-8828	or	
17-64	8829-8836	country	
17-65	8836-8837	.	
17-66	8837-8838	 	
17-67	8839-8842	You	
17-68	8843-8849	define	
17-69	8850-8860	partitions	
17-70	8861-8863	at	
17-71	8864-8869	table	
17-72	8870-8878	creation	
17-73	8878-8879	,	
17-74	8880-8883	and	
17-75	8884-8888	they	
17-76	8889-8893	help	
17-77	8894-8900	reduce	
17-78	8901-8904	the	
17-79	8905-8911	amount	
17-80	8912-8914	of	
17-81	8915-8919	data	
17-82	8920-8927	scanned	
17-83	8928-8931	per	
17-84	8932-8937	query	
17-85	8937-8938	,	
17-86	8939-8946	thereby	
17-87	8947-8956	improving	
17-88	8957-8968	performance	
17-89	8968-8969	.	
17-90	8970-8974	Here	
17-91	8975-8978	are	
17-92	8979-8983	some	
17-93	8984-8989	hints	
17-94	8990-8992	on	
17-95	8993-9005	partitioning	
17-96	9005-9006	:	

#Text=Columns that are used as WHERE filters are good candidates for partitioning. Partitioning has a cost. As the number of partitions in your table increases, the higher the overhead of retrieving and processing the partition metadata, and the smaller your files. Use caution when partitioning and make sure you don’t partition too finely.
18-1	9007-9014	Columns	
18-2	9015-9019	that	
18-3	9020-9023	are	
18-4	9024-9028	used	
18-5	9029-9031	as	
18-6	9032-9037	WHERE	
18-7	9038-9045	filters	
18-8	9046-9049	are	
18-9	9050-9054	good	
18-10	9055-9065	candidates	
18-11	9066-9069	for	
18-12	9070-9082	partitioning	
18-13	9082-9083	.	
18-14	9084-9096	Partitioning	
18-15	9097-9100	has	
18-16	9101-9102	a	
18-17	9103-9107	cost	
18-18	9107-9108	.	
18-19	9109-9111	As	
18-20	9112-9115	the	
18-21	9116-9122	number	
18-22	9123-9125	of	
18-23	9126-9136	partitions	
18-24	9137-9139	in	
18-25	9140-9144	your	
18-26	9145-9150	table	
18-27	9151-9160	increases	
18-28	9160-9161	,	
18-29	9162-9165	the	
18-30	9166-9172	higher	
18-31	9173-9176	the	
18-32	9177-9185	overhead	
18-33	9186-9188	of	
18-34	9189-9199	retrieving	
18-35	9200-9203	and	
18-36	9204-9214	processing	
18-37	9215-9218	the	
18-38	9219-9228	partition	
18-39	9229-9237	metadata	
18-40	9237-9238	,	
18-41	9239-9242	and	
18-42	9243-9246	the	
18-43	9247-9254	smaller	
18-44	9255-9259	your	
18-45	9260-9265	files	
18-46	9265-9266	.	
18-47	9267-9270	Use	
18-48	9271-9278	caution	
18-49	9279-9283	when	
18-50	9284-9296	partitioning	
18-51	9297-9300	and	
18-52	9301-9305	make	
18-53	9306-9310	sure	
18-54	9311-9314	you	
18-55	9315-9318	don	
18-56	9318-9319	’	
18-57	9319-9320	t	
18-58	9321-9330	partition	
18-59	9331-9334	too	
18-60	9335-9341	finely	
18-61	9341-9342	.	

#Text=If your data is heavily skewed to one partition value, and most queries use that value, then the overhead may wipe out the initial benefit. A key partition column at Eventbrite is transaction date (txn_date). CREATE TABLE IF NOT EXISTS fact_ticket_purchase ticket_id STRING, .... create_date STRING,
19-1	9343-9345	If	
19-2	9346-9350	your	
19-3	9351-9355	data	
19-4	9356-9358	is	
19-5	9359-9366	heavily	
19-6	9367-9373	skewed	
19-7	9374-9376	to	
19-8	9377-9380	one	
19-9	9381-9390	partition	
19-10	9391-9396	value	
19-11	9396-9397	,	
19-12	9398-9401	and	
19-13	9402-9406	most	
19-14	9407-9414	queries	
19-15	9415-9418	use	
19-16	9419-9423	that	
19-17	9424-9429	value	
19-18	9429-9430	,	
19-19	9431-9435	then	
19-20	9436-9439	the	
19-21	9440-9448	overhead	
19-22	9449-9452	may	
19-23	9453-9457	wipe	
19-24	9458-9461	out	
19-25	9462-9465	the	
19-26	9466-9473	initial	
19-27	9474-9481	benefit	
19-28	9481-9482	.	
19-29	9483-9484	A	
19-30	9485-9488	key	
19-31	9489-9498	partition	
19-32	9499-9505	column	
19-33	9506-9508	at	
19-34	9509-9519	Eventbrite	
19-35	9520-9522	is	
19-36	9523-9534	transaction	
19-37	9535-9539	date	
19-38	9540-9541	(	
19-39	9541-9549	txn_date	
19-40	9549-9550	)	
19-41	9550-9551	.	
19-42	9552-9558	CREATE	
19-43	9559-9564	TABLE	
19-44	9565-9567	IF	
19-45	9568-9571	NOT	
19-46	9572-9578	EXISTS	
19-47	9579-9599	fact_ticket_purchase	
19-48	9600-9609	ticket_id	
19-49	9610-9616	STRING	
19-50	9616-9617	,	
19-51	9618-9619	.	
19-52	9619-9620	.	
19-53	9620-9621	.	
19-54	9621-9622	.	
19-55	9623-9634	create_date	
19-56	9635-9641	STRING	
19-57	9641-9642	,	

#Text=update_date STRING PARTITIONED BY (trx_date STRING) STORED AS PARQUET TBLPROPERTIES ('parquet.compression'='SNAPPY') 9. Optimize columnar data store generation
20-1	9643-9654	update_date	
20-2	9655-9661	STRING	
20-3	9662-9673	PARTITIONED	
20-4	9674-9676	BY	
20-5	9677-9678	(	
20-6	9678-9686	trx_date	
20-7	9687-9693	STRING	
20-8	9693-9694	)	
20-9	9695-9701	STORED	
20-10	9702-9704	AS	
20-11	9705-9712	PARQUET	
20-12	9713-9726	TBLPROPERTIES	
20-13	9727-9728	(	
20-14	9728-9729	'	
20-15	9729-9748	parquet.compression	
20-16	9748-9749	'	
20-17	9749-9750	=	
20-18	9750-9751	'	
20-19	9751-9757	SNAPPY	
20-20	9757-9758	'	
20-21	9758-9759	)	
20-22	9760-9761	9	
20-23	9761-9762	.	
20-24	9763-9771	Optimize	
20-25	9772-9780	columnar	
20-26	9781-9785	data	
20-27	9786-9791	store	
20-28	9792-9802	generation	

#Text=Apache Parquet and Apache ORC are popular columnar data stores. They provide features that store data efficiently by using column-wise compression based on data type, special encoding, and predicate pushdown. At Eventbrite, we define Hive tables as PARQUET using compression equal to SNAPPY…. CREATE TABLE IF NOT EXISTS dim_event dim_event_id STRING, .... create_date STRING, update_date STRING, STORED AS PARQUET
21-1	9803-9809	Apache	
21-2	9810-9817	Parquet	
21-3	9818-9821	and	
21-4	9822-9828	Apache	
21-5	9829-9832	ORC	
21-6	9833-9836	are	
21-7	9837-9844	popular	
21-8	9845-9853	columnar	
21-9	9854-9858	data	
21-10	9859-9865	stores	
21-11	9865-9866	.	
21-12	9867-9871	They	
21-13	9872-9879	provide	
21-14	9880-9888	features	
21-15	9889-9893	that	
21-16	9894-9899	store	
21-17	9900-9904	data	
21-18	9905-9916	efficiently	
21-19	9917-9919	by	
21-20	9920-9925	using	
21-21	9926-9937	column-wise	
21-22	9938-9949	compression	
21-23	9950-9955	based	
21-24	9956-9958	on	
21-25	9959-9963	data	
21-26	9964-9968	type	
21-27	9968-9969	,	
21-28	9970-9977	special	
21-29	9978-9986	encoding	
21-30	9986-9987	,	
21-31	9988-9991	and	
21-32	9992-10001	predicate	
21-33	10002-10010	pushdown	
21-34	10010-10011	.	
21-35	10012-10014	At	
21-36	10015-10025	Eventbrite	
21-37	10025-10026	,	
21-38	10027-10029	we	
21-39	10030-10036	define	
21-40	10037-10041	Hive	
21-41	10042-10048	tables	
21-42	10049-10051	as	
21-43	10052-10059	PARQUET	
21-44	10060-10065	using	
21-45	10066-10077	compression	
21-46	10078-10083	equal	
21-47	10084-10086	to	
21-48	10087-10093	SNAPPY	
21-49	10093-10094	…	
21-50	10094-10095	.	
21-51	10096-10102	CREATE	
21-52	10103-10108	TABLE	
21-53	10109-10111	IF	
21-54	10112-10115	NOT	
21-55	10116-10122	EXISTS	
21-56	10123-10132	dim_event	
21-57	10133-10145	dim_event_id	
21-58	10146-10152	STRING	
21-59	10152-10153	,	
21-60	10154-10155	.	
21-61	10155-10156	.	
21-62	10156-10157	.	
21-63	10157-10158	.	
21-64	10159-10170	create_date	
21-65	10171-10177	STRING	
21-66	10177-10178	,	
21-67	10179-10190	update_date	
21-68	10191-10197	STRING	
21-69	10197-10198	,	
21-70	10199-10205	STORED	
21-71	10206-10208	AS	
21-72	10209-10216	PARQUET	

#Text=TBLPROPERTIES ('parquet.compression'='SNAPPY') Apache Parquet is an open-source, column-oriented data storage format. Snappy is designed for speed and will not overload your CPU cores. The downside of course is that it does not compress as well as gzip or bzip2.
22-1	10217-10230	TBLPROPERTIES	
22-2	10231-10232	(	
22-3	10232-10233	'	
22-4	10233-10252	parquet.compression	
22-5	10252-10253	'	
22-6	10253-10254	=	
22-7	10254-10255	'	
22-8	10255-10261	SNAPPY	
22-9	10261-10262	'	
22-10	10262-10263	)	
22-11	10264-10270	Apache	
22-12	10271-10278	Parquet	
22-13	10279-10281	is	
22-14	10282-10284	an	
22-15	10285-10296	open-source	
22-16	10296-10297	,	
22-17	10298-10313	column-oriented	
22-18	10314-10318	data	
22-19	10319-10326	storage	
22-20	10327-10333	format	
22-21	10333-10334	.	
22-22	10335-10341	Snappy	
22-23	10342-10344	is	
22-24	10345-10353	designed	
22-25	10354-10357	for	
22-26	10358-10363	speed	
22-27	10364-10367	and	
22-28	10368-10372	will	
22-29	10373-10376	not	
22-30	10377-10385	overload	
22-31	10386-10390	your	
22-32	10391-10394	CPU	
22-33	10395-10400	cores	
22-34	10400-10401	.	
22-35	10402-10405	The	
22-36	10406-10414	downside	
22-37	10415-10417	of	
22-38	10418-10424	course	
22-39	10425-10427	is	
22-40	10428-10432	that	
22-41	10433-10435	it	
22-42	10436-10440	does	
22-43	10441-10444	not	
22-44	10445-10453	compress	
22-45	10454-10456	as	
22-46	10457-10461	well	
22-47	10462-10464	as	
22-48	10465-10469	gzip	
22-49	10470-10472	or	
22-50	10473-10478	bzip2	
22-51	10478-10479	.	

#Text=10. Presto’s Cost-Based Optimizer/Join Reordering We’re not currently using Presto’s Cost-Based Optimizer (CBO)! Eventbrite data engineering released Presto 330 in March 2020, but we haven’t tested CBO yet.
23-1	10480-10482	10	
23-2	10482-10483	.	
23-3	10484-10490	Presto	
23-4	10490-10491	’	
23-5	10491-10492	s	
23-6	10493-10503	Cost-Based	
23-7	10504-10513	Optimizer	
23-8	10513-10514	/	
23-9	10514-10518	Join	
23-10	10519-10529	Reordering	
23-11	10530-10532	We	
23-12	10532-10533	’	
23-13	10533-10535	re	
23-14	10536-10539	not	
23-15	10540-10549	currently	
23-16	10550-10555	using	
23-17	10556-10562	Presto	
23-18	10562-10563	’	
23-19	10563-10564	s	
23-20	10565-10575	Cost-Based	
23-21	10576-10585	Optimizer	
23-22	10586-10587	(	
23-23	10587-10590	CBO	
23-24	10590-10591	)	
23-25	10591-10592	!	
23-26	10593-10603	Eventbrite	
23-27	10604-10608	data	
23-28	10609-10620	engineering	
23-29	10621-10629	released	
23-30	10630-10636	Presto	
23-31	10637-10640	330	
23-32	10641-10643	in	
23-33	10644-10649	March	
23-34	10650-10654	2020	
23-35	10654-10655	,	
23-36	10656-10659	but	
23-37	10660-10662	we	
23-38	10663-10668	haven	
23-39	10668-10669	’	
23-40	10669-10670	t	
23-41	10671-10677	tested	
23-42	10678-10681	CBO	
23-43	10682-10685	yet	
23-44	10685-10686	.	

#Text=CBO inherently requires the table stats be up-to-date which we only calculate for a small subset of tables! Using the CBO, Presto will be able to intelligently decide the best sequence based on the statistics stored in the Hive Metastore. As mentioned above, the order in which joins are executed in a query can have a big impact on performance. If we collect table statistics then the CBO can automatically pick the join order with the lowest computed costs. This is governed by the join_reordering_strategy (=AUTOMATIC) session property and I’m really excited to see this feature in action.
24-1	10687-10690	CBO	
24-2	10691-10701	inherently	
24-3	10702-10710	requires	
24-4	10711-10714	the	
24-5	10715-10720	table	
24-6	10721-10726	stats	
24-7	10727-10729	be	
24-8	10730-10740	up-to-date	
24-9	10741-10746	which	
24-10	10747-10749	we	
24-11	10750-10754	only	
24-12	10755-10764	calculate	
24-13	10765-10768	for	
24-14	10769-10770	a	
24-15	10771-10776	small	
24-16	10777-10783	subset	
24-17	10784-10786	of	
24-18	10787-10793	tables	
24-19	10793-10794	!	
24-20	10795-10800	Using	
24-21	10801-10804	the	
24-22	10805-10808	CBO	
24-23	10808-10809	,	
24-24	10810-10816	Presto	
24-25	10817-10821	will	
24-26	10822-10824	be	
24-27	10825-10829	able	
24-28	10830-10832	to	
24-29	10833-10846	intelligently	
24-30	10847-10853	decide	
24-31	10854-10857	the	
24-32	10858-10862	best	
24-33	10863-10871	sequence	
24-34	10872-10877	based	
24-35	10878-10880	on	
24-36	10881-10884	the	
24-37	10885-10895	statistics	
24-38	10896-10902	stored	
24-39	10903-10905	in	
24-40	10906-10909	the	
24-41	10910-10914	Hive	
24-42	10915-10924	Metastore	
24-43	10924-10925	.	
24-44	10926-10928	As	
24-45	10929-10938	mentioned	
24-46	10939-10944	above	
24-47	10944-10945	,	
24-48	10946-10949	the	
24-49	10950-10955	order	
24-50	10956-10958	in	
24-51	10959-10964	which	
24-52	10965-10970	joins	
24-53	10971-10974	are	
24-54	10975-10983	executed	
24-55	10984-10986	in	
24-56	10987-10988	a	
24-57	10989-10994	query	
24-58	10995-10998	can	
24-59	10999-11003	have	
24-60	11004-11005	a	
24-61	11006-11009	big	
24-62	11010-11016	impact	
24-63	11017-11019	on	
24-64	11020-11031	performance	
24-65	11031-11032	.	
24-66	11033-11035	If	
24-67	11036-11038	we	
24-68	11039-11046	collect	
24-69	11047-11052	table	
24-70	11053-11063	statistics	
24-71	11064-11068	then	
24-72	11069-11072	the	
24-73	11073-11076	CBO	
24-74	11077-11080	can	
24-75	11081-11094	automatically	
24-76	11095-11099	pick	
24-77	11100-11103	the	
24-78	11104-11108	join	
24-79	11109-11114	order	
24-80	11115-11119	with	
24-81	11120-11123	the	
24-82	11124-11130	lowest	
24-83	11131-11139	computed	
24-84	11140-11145	costs	
24-85	11145-11146	.	
24-86	11147-11151	This	
24-87	11152-11154	is	
24-88	11155-11163	governed	
24-89	11164-11166	by	
24-90	11167-11170	the	
24-91	11171-11195	join_reordering_strategy	
24-92	11196-11197	(	
24-93	11197-11198	=	
24-94	11198-11207	AUTOMATIC	
24-95	11207-11208	)	
24-96	11209-11216	session	
24-97	11217-11225	property	
24-98	11226-11229	and	
24-99	11230-11231	I	
24-100	11231-11232	’	
24-101	11232-11233	m	
24-102	11234-11240	really	
24-103	11241-11248	excited	
24-104	11249-11251	to	
24-105	11252-11255	see	
24-106	11256-11260	this	
24-107	11261-11268	feature	
24-108	11269-11271	in	
24-109	11272-11278	action	
24-110	11278-11279	.	

#Text=Another interesting join optimization is dynamic filtering. It relies on the stats estimates of the CBO to correctly convert the join distribution type to “broadcast” join. By using dynamic filtering via run-time predicate pushdown, we can squeeze out more performance gains for highly-selective inner-joins.  We look forward to using this feature in the near future! 11. Using WITH Clause The WITH clause is used to define an inline view within a single query.  It allows for flattening nested subqueries. I find it hugely helpful for simplifying SQL, and making it more readable and easier to support.
25-1	11280-11287	Another	
25-2	11288-11299	interesting	
25-3	11300-11304	join	
25-4	11305-11317	optimization	
25-5	11318-11320	is	
25-6	11321-11328	dynamic	
25-7	11329-11338	filtering	
25-8	11338-11339	.	
25-9	11340-11342	It	
25-10	11343-11349	relies	
25-11	11350-11352	on	
25-12	11353-11356	the	
25-13	11357-11362	stats	
25-14	11363-11372	estimates	
25-15	11373-11375	of	
25-16	11376-11379	the	
25-17	11380-11383	CBO	
25-18	11384-11386	to	
25-19	11387-11396	correctly	
25-20	11397-11404	convert	
25-21	11405-11408	the	
25-22	11409-11413	join	
25-23	11414-11426	distribution	
25-24	11427-11431	type	
25-25	11432-11434	to	
25-26	11435-11436	“	
25-27	11436-11445	broadcast	
25-28	11445-11446	”	
25-29	11447-11451	join	
25-30	11451-11452	.	
25-31	11453-11455	By	
25-32	11456-11461	using	
25-33	11462-11469	dynamic	
25-34	11470-11479	filtering	
25-35	11480-11483	via	
25-36	11484-11492	run-time	
25-37	11493-11502	predicate	
25-38	11503-11511	pushdown	
25-39	11511-11512	,	
25-40	11513-11515	we	
25-41	11516-11519	can	
25-42	11520-11527	squeeze	
25-43	11528-11531	out	
25-44	11532-11536	more	
25-45	11537-11548	performance	
25-46	11549-11554	gains	
25-47	11555-11558	for	
25-48	11559-11575	highly-selective	
25-49	11576-11587	inner-joins	
25-50	11587-11588	.	
25-51	11588-11589	 	
25-52	11590-11592	We	
25-53	11593-11597	look	
25-54	11598-11605	forward	
25-55	11606-11608	to	
25-56	11609-11614	using	
25-57	11615-11619	this	
25-58	11620-11627	feature	
25-59	11628-11630	in	
25-60	11631-11634	the	
25-61	11635-11639	near	
25-62	11640-11646	future	
25-63	11646-11647	!	
25-64	11648-11650	11	
25-65	11650-11651	.	
25-66	11652-11657	Using	
25-67	11658-11662	WITH	
25-68	11663-11669	Clause	
25-69	11670-11673	The	
25-70	11674-11678	WITH	
25-71	11679-11685	clause	
25-72	11686-11688	is	
25-73	11689-11693	used	
25-74	11694-11696	to	
25-75	11697-11703	define	
25-76	11704-11706	an	
25-77	11707-11713	inline	
25-78	11714-11718	view	
25-79	11719-11725	within	
25-80	11726-11727	a	
25-81	11728-11734	single	
25-82	11735-11740	query	
25-83	11740-11741	.	
25-84	11741-11742	 	
25-85	11743-11745	It	
25-86	11746-11752	allows	
25-87	11753-11756	for	
25-88	11757-11767	flattening	
25-89	11768-11774	nested	
25-90	11775-11785	subqueries	
25-91	11785-11786	.	
25-92	11787-11788	I	
25-93	11789-11793	find	
25-94	11794-11796	it	
25-95	11797-11803	hugely	
25-96	11804-11811	helpful	
25-97	11812-11815	for	
25-98	11816-11827	simplifying	
25-99	11828-11831	SQL	
25-100	11831-11832	,	
25-101	11833-11836	and	
25-102	11837-11843	making	
25-103	11844-11846	it	
25-104	11847-11851	more	
25-105	11852-11860	readable	
25-106	11861-11864	and	
25-107	11865-11871	easier	
25-108	11872-11874	to	
25-109	11875-11882	support	
25-110	11882-11883	.	

#Text=12. Use Presto Web Interface Presto provides a web interface for monitoring queries (https://prestodb.io/docs/current/admin/web-interface.html).
26-1	11884-11886	12	
26-2	11886-11887	.	
26-3	11888-11891	Use	
26-4	11892-11898	Presto	
26-5	11899-11902	Web	
26-6	11903-11912	Interface	
26-7	11913-11919	Presto	
26-8	11920-11928	provides	
26-9	11929-11930	a	
26-10	11931-11934	web	
26-11	11935-11944	interface	
26-12	11945-11948	for	
26-13	11949-11959	monitoring	
26-14	11960-11967	queries	
26-15	11968-11969	(	
26-16	11969-11974	https	
26-17	11974-11975	:	
26-18	11975-11976	/	
26-19	11976-11977	/	
26-20	11977-11988	prestodb.io	
26-21	11988-11989	/	
26-22	11989-11993	docs	
26-23	11993-11994	/	
26-24	11994-12001	current	
26-25	12001-12002	/	
26-26	12002-12007	admin	
26-27	12007-12008	/	
26-28	12008-12026	web-interface.html	
26-29	12026-12027	)	
26-30	12027-12028	.	

#Text=The main page has a list of queries along with information like unique query ID, query text, query state, percentage completed, username and source from which this query originated. If Presto cluster is having any performance-related issues, this web interface is a good place to go to identify and capture slow running SQL! 13. Explain plan with Presto/Hive (Sample) EXPLAIN is an invaluable tool for showing the logical or distributed execution plan of a statement and to validate the SQL statements. — Logical Plan with Presto
27-1	12029-12032	The	
27-2	12033-12037	main	
27-3	12038-12042	page	
27-4	12043-12046	has	
27-5	12047-12048	a	
27-6	12049-12053	list	
27-7	12054-12056	of	
27-8	12057-12064	queries	
27-9	12065-12070	along	
27-10	12071-12075	with	
27-11	12076-12087	information	
27-12	12088-12092	like	
27-13	12093-12099	unique	
27-14	12100-12105	query	
27-15	12106-12108	ID	
27-16	12108-12109	,	
27-17	12110-12115	query	
27-18	12116-12120	text	
27-19	12120-12121	,	
27-20	12122-12127	query	
27-21	12128-12133	state	
27-22	12133-12134	,	
27-23	12135-12145	percentage	
27-24	12146-12155	completed	
27-25	12155-12156	,	
27-26	12157-12165	username	
27-27	12166-12169	and	
27-28	12170-12176	source	
27-29	12177-12181	from	
27-30	12182-12187	which	
27-31	12188-12192	this	
27-32	12193-12198	query	
27-33	12199-12209	originated	
27-34	12209-12210	.	
27-35	12211-12213	If	
27-36	12214-12220	Presto	
27-37	12221-12228	cluster	
27-38	12229-12231	is	
27-39	12232-12238	having	
27-40	12239-12242	any	
27-41	12243-12262	performance-related	
27-42	12263-12269	issues	
27-43	12269-12270	,	
27-44	12271-12275	this	
27-45	12276-12279	web	
27-46	12280-12289	interface	
27-47	12290-12292	is	
27-48	12293-12294	a	
27-49	12295-12299	good	
27-50	12300-12305	place	
27-51	12306-12308	to	
27-52	12309-12311	go	
27-53	12312-12314	to	
27-54	12315-12323	identify	
27-55	12324-12327	and	
27-56	12328-12335	capture	
27-57	12336-12340	slow	
27-58	12341-12348	running	
27-59	12349-12352	SQL	
27-60	12352-12353	!	
27-61	12354-12356	13	
27-62	12356-12357	.	
27-63	12358-12365	Explain	
27-64	12366-12370	plan	
27-65	12371-12375	with	
27-66	12376-12382	Presto	
27-67	12382-12383	/	
27-68	12383-12387	Hive	
27-69	12388-12389	(	
27-70	12389-12395	Sample	
27-71	12395-12396	)	
27-72	12397-12404	EXPLAIN	
27-73	12405-12407	is	
27-74	12408-12410	an	
27-75	12411-12421	invaluable	
27-76	12422-12426	tool	
27-77	12427-12430	for	
27-78	12431-12438	showing	
27-79	12439-12442	the	
27-80	12443-12450	logical	
27-81	12451-12453	or	
27-82	12454-12465	distributed	
27-83	12466-12475	execution	
27-84	12476-12480	plan	
27-85	12481-12483	of	
27-86	12484-12485	a	
27-87	12486-12495	statement	
27-88	12496-12499	and	
27-89	12500-12502	to	
27-90	12503-12511	validate	
27-91	12512-12515	the	
27-92	12516-12519	SQL	
27-93	12520-12530	statements	
27-94	12530-12531	.	
27-95	12532-12533	—	
27-96	12534-12541	Logical	
27-97	12542-12546	Plan	
27-98	12547-12551	with	
27-99	12552-12558	Presto	

#Text=explain select SUBSTRING(last_modified,1,4) ,count(*)  from hive.df_machine_learning.event_text where lower(name) like ‘%wilbraham%’ or (REGEXP_LIKE(lower(name), ‘.*wilbraham.*’)) group by 1 order by 1; 14. Explain plan with MySQL (Sample) In this particular case you can see that the primary key is used on the ‘ejp_events’ table and the non-primary key on the “ejp_orders’ table. This query is going to be fast!
28-1	12559-12566	explain	
28-2	12567-12573	select	
28-3	12574-12583	SUBSTRING	
28-4	12583-12584	(	
28-5	12584-12597	last_modified	
28-6	12597-12598	,	
28-7	12598-12601	1,4	
28-8	12601-12602	)	
28-9	12603-12604	,	
28-10	12604-12609	count	
28-11	12609-12610	(	
28-12	12610-12611	*	
28-13	12611-12612	)	
28-14	12612-12613	 	
28-15	12614-12618	from	
28-16	12619-12654	hive.df_machine_learning.event_text	
28-17	12655-12660	where	
28-18	12661-12666	lower	
28-19	12666-12667	(	
28-20	12667-12671	name	
28-21	12671-12672	)	
28-22	12673-12677	like	
28-23	12678-12679	‘	
28-24	12679-12680	%	
28-25	12680-12689	wilbraham	
28-26	12689-12690	%	
28-27	12690-12691	’	
28-28	12692-12694	or	
28-29	12695-12696	(	
28-30	12696-12707	REGEXP_LIKE	
28-31	12707-12708	(	
28-32	12708-12713	lower	
28-33	12713-12714	(	
28-34	12714-12718	name	
28-35	12718-12719	)	
28-36	12719-12720	,	
28-37	12721-12722	‘	
28-38	12722-12723	.	
28-39	12723-12724	*	
28-40	12724-12733	wilbraham	
28-41	12733-12734	.	
28-42	12734-12735	*	
28-43	12735-12736	’	
28-44	12736-12737	)	
28-45	12737-12738	)	
28-46	12739-12744	group	
28-47	12745-12747	by	
28-48	12748-12749	1	
28-49	12750-12755	order	
28-50	12756-12758	by	
28-51	12759-12760	1	
28-52	12760-12761	;	
28-53	12762-12764	14	
28-54	12764-12765	.	
28-55	12766-12773	Explain	
28-56	12774-12778	plan	
28-57	12779-12783	with	
28-58	12784-12789	MySQL	
28-59	12790-12791	(	
28-60	12791-12797	Sample	
28-61	12797-12798	)	
28-62	12799-12801	In	
28-63	12802-12806	this	
28-64	12807-12817	particular	
28-65	12818-12822	case	
28-66	12823-12826	you	
28-67	12827-12830	can	
28-68	12831-12834	see	
28-69	12835-12839	that	
28-70	12840-12843	the	
28-71	12844-12851	primary	
28-72	12852-12855	key	
28-73	12856-12858	is	
28-74	12859-12863	used	
28-75	12864-12866	on	
28-76	12867-12870	the	
28-77	12871-12872	‘	
28-78	12872-12882	ejp_events	
28-79	12882-12883	’	
28-80	12884-12889	table	
28-81	12890-12893	and	
28-82	12894-12897	the	
28-83	12898-12909	non-primary	
28-84	12910-12913	key	
28-85	12914-12916	on	
28-86	12917-12920	the	
28-87	12921-12922	“	
28-88	12922-12932	ejp_orders	
28-89	12932-12933	’	
28-90	12934-12939	table	
28-91	12939-12940	.	
28-92	12941-12945	This	
28-93	12946-12951	query	
28-94	12952-12954	is	
28-95	12955-12960	going	
28-96	12961-12963	to	
28-97	12964-12966	be	
28-98	12967-12971	fast	
28-99	12971-12972	!	

#Text=Conclusion Presto is the “SQL-on-Anything” solution that powers Eventbrite’s data warehouse. It’s been very rewarding for me as the “Old School DBA” to learn new SQL tricks related to a distributed query engine such as Presto. In most cases, my SQL training on MySQL/Oracle has served me well but there are some interesting differences which I’ve attempted to call-out above. Thanks for reading and making it to the end. I appreciate it!
29-1	12973-12983	Conclusion	
29-2	12984-12990	Presto	
29-3	12991-12993	is	
29-4	12994-12997	the	
29-5	12998-12999	“	
29-6	12999-13014	SQL-on-Anything	
29-7	13014-13015	”	
29-8	13016-13024	solution	
29-9	13025-13029	that	
29-10	13030-13036	powers	
29-11	13037-13047	Eventbrite	
29-12	13047-13048	’	
29-13	13048-13049	s	
29-14	13050-13054	data	
29-15	13055-13064	warehouse	
29-16	13064-13065	.	
29-17	13066-13068	It	
29-18	13068-13069	’	
29-19	13069-13070	s	
29-20	13071-13075	been	
29-21	13076-13080	very	
29-22	13081-13090	rewarding	
29-23	13091-13094	for	
29-24	13095-13097	me	
29-25	13098-13100	as	
29-26	13101-13104	the	
29-27	13105-13106	“	
29-28	13106-13109	Old	
29-29	13110-13116	School	
29-30	13117-13120	DBA	
29-31	13120-13121	”	
29-32	13122-13124	to	
29-33	13125-13130	learn	
29-34	13131-13134	new	
29-35	13135-13138	SQL	
29-36	13139-13145	tricks	
29-37	13146-13153	related	
29-38	13154-13156	to	
29-39	13157-13158	a	
29-40	13159-13170	distributed	
29-41	13171-13176	query	
29-42	13177-13183	engine	
29-43	13184-13188	such	
29-44	13189-13191	as	
29-45	13192-13198	Presto	
29-46	13198-13199	.	
29-47	13200-13202	In	
29-48	13203-13207	most	
29-49	13208-13213	cases	
29-50	13213-13214	,	
29-51	13215-13217	my	
29-52	13218-13221	SQL	
29-53	13222-13230	training	
29-54	13231-13233	on	
29-55	13234-13239	MySQL	
29-56	13239-13240	/	
29-57	13240-13246	Oracle	
29-58	13247-13250	has	
29-59	13251-13257	served	
29-60	13258-13260	me	
29-61	13261-13265	well	
29-62	13266-13269	but	
29-63	13270-13275	there	
29-64	13276-13279	are	
29-65	13280-13284	some	
29-66	13285-13296	interesting	
29-67	13297-13308	differences	
29-68	13309-13314	which	
29-69	13315-13316	I	
29-70	13316-13317	’	
29-71	13317-13319	ve	
29-72	13320-13329	attempted	
29-73	13330-13332	to	
29-74	13333-13341	call-out	
29-75	13342-13347	above	
29-76	13347-13348	.	
29-77	13349-13355	Thanks	
29-78	13356-13359	for	
29-79	13360-13367	reading	
29-80	13368-13371	and	
29-81	13372-13378	making	
29-82	13379-13381	it	
29-83	13382-13384	to	
29-84	13385-13388	the	
29-85	13389-13392	end	
29-86	13392-13393	.	
29-87	13394-13395	I	
29-88	13396-13406	appreciate	
29-89	13407-13409	it	
29-90	13409-13410	!	

#Text=We look forward to giving Presto’s Cost-Based Optimizer a test drive and kicking the tires on new features such as dynamic filtering & partition pruning! All comments are welcome, or you can message me at ed@eventbrite.com. You can learn more about Eventbrite’s use of Presto by checking out my previous post at Boosting Big Data workloads with Presto Auto Scaling.
30-1	13411-13413	We	
30-2	13414-13418	look	
30-3	13419-13426	forward	
30-4	13427-13429	to	
30-5	13430-13436	giving	
30-6	13437-13443	Presto	
30-7	13443-13444	’	
30-8	13444-13445	s	
30-9	13446-13456	Cost-Based	
30-10	13457-13466	Optimizer	
30-11	13467-13468	a	
30-12	13469-13473	test	
30-13	13474-13479	drive	
30-14	13480-13483	and	
30-15	13484-13491	kicking	
30-16	13492-13495	the	
30-17	13496-13501	tires	
30-18	13502-13504	on	
30-19	13505-13508	new	
30-20	13509-13517	features	
30-21	13518-13522	such	
30-22	13523-13525	as	
30-23	13526-13533	dynamic	
30-24	13534-13543	filtering	
30-25	13544-13545	&	
30-26	13546-13555	partition	
30-27	13556-13563	pruning	
30-28	13563-13564	!	
30-29	13565-13568	All	
30-30	13569-13577	comments	
30-31	13578-13581	are	
30-32	13582-13589	welcome	
30-33	13589-13590	,	
30-34	13591-13593	or	
30-35	13594-13597	you	
30-36	13598-13601	can	
30-37	13602-13609	message	
30-38	13610-13612	me	
30-39	13613-13615	at	
30-40	13616-13618	ed	
30-41	13618-13619	@	
30-42	13619-13633	eventbrite.com	
30-43	13633-13634	.	
30-44	13635-13638	You	
30-45	13639-13642	can	
30-46	13643-13648	learn	
30-47	13649-13653	more	
30-48	13654-13659	about	
30-49	13660-13670	Eventbrite	
30-50	13670-13671	’	
30-51	13671-13672	s	
30-52	13673-13676	use	
30-53	13677-13679	of	
30-54	13680-13686	Presto	
30-55	13687-13689	by	
30-56	13690-13698	checking	
30-57	13699-13702	out	
30-58	13703-13705	my	
30-59	13706-13714	previous	
30-60	13715-13719	post	
30-61	13720-13722	at	
30-62	13723-13731	Boosting	
30-63	13732-13735	Big	
30-64	13736-13740	Data	
30-65	13741-13750	workloads	
30-66	13751-13755	with	
30-67	13756-13762	Presto	
30-68	13763-13767	Auto	
30-69	13768-13775	Scaling	
30-70	13775-13776	.	

#Text=Special thanks to Eventbrite’s Data Foundry team (Jeremy Bakker,  Alex Meyer, Jasper Groot, Rainu Ittycheriah, Gray Pickney, and Beck Cronin-Dixon) for the world-class Presto support, and Steven Fast for reviewing this blog post. Eventbrite’s Data Teams rock! CategoriesAnalytics, Architecture, Data Stores Leave a Reply Cancel reply Your email address will not be published. Required fields are marked *Comment Name * Email * Website
31-1	13777-13784	Special	
31-2	13785-13791	thanks	
31-3	13792-13794	to	
31-4	13795-13805	Eventbrite	
31-5	13805-13806	’	
31-6	13806-13807	s	
31-7	13808-13812	Data	
31-8	13813-13820	Foundry	
31-9	13821-13825	team	
31-10	13826-13827	(	
31-11	13827-13833	Jeremy	
31-12	13834-13840	Bakker	
31-13	13840-13841	,	
31-14	13841-13842	 	
31-15	13843-13847	Alex	
31-16	13848-13853	Meyer	
31-17	13853-13854	,	
31-18	13855-13861	Jasper	
31-19	13862-13867	Groot	
31-20	13867-13868	,	
31-21	13869-13874	Rainu	
31-22	13875-13886	Ittycheriah	
31-23	13886-13887	,	
31-24	13888-13892	Gray	
31-25	13893-13900	Pickney	
31-26	13900-13901	,	
31-27	13902-13905	and	
31-28	13906-13910	Beck	
31-29	13911-13923	Cronin-Dixon	
31-30	13923-13924	)	
31-31	13925-13928	for	
31-32	13929-13932	the	
31-33	13933-13944	world-class	
31-34	13945-13951	Presto	
31-35	13952-13959	support	
31-36	13959-13960	,	
31-37	13961-13964	and	
31-38	13965-13971	Steven	
31-39	13972-13976	Fast	
31-40	13977-13980	for	
31-41	13981-13990	reviewing	
31-42	13991-13995	this	
31-43	13996-14000	blog	
31-44	14001-14005	post	
31-45	14005-14006	.	
31-46	14007-14017	Eventbrite	
31-47	14017-14018	’	
31-48	14018-14019	s	
31-49	14020-14024	Data	
31-50	14025-14030	Teams	
31-51	14031-14035	rock	
31-52	14035-14036	!	
31-53	14037-14056	CategoriesAnalytics	
31-54	14056-14057	,	
31-55	14058-14070	Architecture	
31-56	14070-14071	,	
31-57	14072-14076	Data	
31-58	14077-14083	Stores	
31-59	14084-14089	Leave	
31-60	14090-14091	a	
31-61	14092-14097	Reply	
31-62	14098-14104	Cancel	
31-63	14105-14110	reply	
31-64	14111-14115	Your	
31-65	14116-14121	email	
31-66	14122-14129	address	
31-67	14130-14134	will	
31-68	14135-14138	not	
31-69	14139-14141	be	
31-70	14142-14151	published	
31-71	14151-14152	.	
31-72	14153-14161	Required	
31-73	14162-14168	fields	
31-74	14169-14172	are	
31-75	14173-14179	marked	
31-76	14180-14181	*	
31-77	14181-14188	Comment	
31-78	14189-14193	Name	
31-79	14194-14195	*	
31-80	14196-14201	Email	
31-81	14202-14203	*	
31-82	14204-14211	Website	

#Text=Notify me of follow-up comments by email. Notify me of new posts by email. Post navigation Previous PostPrevious Create Meaningful (and Fun!) Remote CommunityNext PostNext How are you building/maintaining team cohesion?
32-1	14212-14218	Notify	
32-2	14219-14221	me	
32-3	14222-14224	of	
32-4	14225-14234	follow-up	
32-5	14235-14243	comments	
32-6	14244-14246	by	
32-7	14247-14252	email	
32-8	14252-14253	.	
32-9	14254-14260	Notify	
32-10	14261-14263	me	
32-11	14264-14266	of	
32-12	14267-14270	new	
32-13	14271-14276	posts	
32-14	14277-14279	by	
32-15	14280-14285	email	
32-16	14285-14286	.	
32-17	14287-14291	Post	
32-18	14292-14302	navigation	
32-19	14303-14311	Previous	
32-20	14312-14324	PostPrevious	
32-21	14325-14331	Create	
32-22	14332-14342	Meaningful	
32-23	14343-14344	(	
32-24	14344-14347	and	
32-25	14348-14351	Fun	
32-26	14351-14352	!	
32-27	14352-14353	)	
32-28	14354-14360	Remote	
32-29	14361-14374	CommunityNext	
32-30	14375-14383	PostNext	
32-31	14384-14387	How	
32-32	14388-14391	are	
32-33	14392-14395	you	
32-34	14396-14404	building	
32-35	14404-14405	/	
32-36	14405-14416	maintaining	
32-37	14417-14421	team	
32-38	14422-14430	cohesion	
32-39	14430-14431	?	
