#FORMAT=WebAnno TSV 3.3


#Text=Some SQL Tricks of an Application DBA | Haki Benita
#Text=Haki Benita
#Text=About
#Text=Subscribe
#Text=27 July 2020
#Text=SQL,
#Text=Performance
#Text=Some SQL Tricks of an Application DBA
#Text=Non-trivial tips for database development
#Text=When I started my career in development, my first job was a DBA.
1-1	0-4	Some	
1-2	5-8	SQL	
1-3	9-15	Tricks	
1-4	16-18	of	
1-5	19-21	an	
1-6	22-33	Application	
1-7	34-37	DBA	
1-8	38-39	|	
1-9	40-44	Haki	
1-10	45-51	Benita	
1-11	52-56	Haki	
1-12	57-63	Benita	
1-13	64-69	About	
1-14	70-79	Subscribe	
1-15	80-82	27	
1-16	83-87	July	
1-17	88-92	2020	
1-18	93-96	SQL	
1-19	96-97	,	
1-20	98-109	Performance	
1-21	110-114	Some	
1-22	115-118	SQL	
1-23	119-125	Tricks	
1-24	126-128	of	
1-25	129-131	an	
1-26	132-143	Application	
1-27	144-147	DBA	
1-28	148-159	Non-trivial	
1-29	160-164	tips	
1-30	165-168	for	
1-31	169-177	database	
1-32	178-189	development	
1-33	190-194	When	
1-34	195-196	I	
1-35	197-204	started	
1-36	205-207	my	
1-37	208-214	career	
1-38	215-217	in	
1-39	218-229	development	
1-40	229-230	,	
1-41	231-233	my	
1-42	234-239	first	
1-43	240-243	job	
1-44	244-247	was	
1-45	248-249	a	
1-46	250-253	DBA	
1-47	253-254	.	

#Text=Back then, before AWS RDS, Azure, Google Cloud and the rest of them cloud services, there were two types of DBAs:
#Text=The Infrastructure DBA was in charge of setting up the database, configuring the storage and taking care of backups and replication.
2-1	255-259	Back	
2-2	260-264	then	
2-3	264-265	,	
2-4	266-272	before	
2-5	273-276	AWS	
2-6	277-280	RDS	
2-7	280-281	,	
2-8	282-287	Azure	
2-9	287-288	,	
2-10	289-295	Google	
2-11	296-301	Cloud	
2-12	302-305	and	
2-13	306-309	the	
2-14	310-314	rest	
2-15	315-317	of	
2-16	318-322	them	
2-17	323-328	cloud	
2-18	329-337	services	
2-19	337-338	,	
2-20	339-344	there	
2-21	345-349	were	
2-22	350-353	two	
2-23	354-359	types	
2-24	360-362	of	
2-25	363-367	DBAs	
2-26	367-368	:	
2-27	369-372	The	
2-28	373-387	Infrastructure	
2-29	388-391	DBA	
2-30	392-395	was	
2-31	396-398	in	
2-32	399-405	charge	
2-33	406-408	of	
2-34	409-416	setting	
2-35	417-419	up	
2-36	420-423	the	
2-37	424-432	database	
2-38	432-433	,	
2-39	434-445	configuring	
2-40	446-449	the	
2-41	450-457	storage	
2-42	458-461	and	
2-43	462-468	taking	
2-44	469-473	care	
2-45	474-476	of	
2-46	477-484	backups	
2-47	485-488	and	
2-48	489-500	replication	
2-49	500-501	.	

#Text=After setting up the database, the infrastructure DBA would pop up from time to time and do some "instance tuning", things like sizing caches.
3-1	502-507	After	
3-2	508-515	setting	
3-3	516-518	up	
3-4	519-522	the	
3-5	523-531	database	
3-6	531-532	,	
3-7	533-536	the	
3-8	537-551	infrastructure	
3-9	552-555	DBA	
3-10	556-561	would	
3-11	562-565	pop	
3-12	566-568	up	
3-13	569-573	from	
3-14	574-578	time	
3-15	579-581	to	
3-16	582-586	time	
3-17	587-590	and	
3-18	591-593	do	
3-19	594-598	some	
3-20	599-600	"	
3-21	600-608	instance	
3-22	609-615	tuning	
3-23	615-616	"	
3-24	616-617	,	
3-25	618-624	things	
3-26	625-629	like	
3-27	630-636	sizing	
3-28	637-643	caches	
3-29	643-644	.	

#Text=The Application DBA got a clean database from the infrastructure DBA, and was in charge of schema design: creating tables, indexes, constraints, and tuning SQL.
4-1	645-648	The	
4-2	649-660	Application	
4-3	661-664	DBA	
4-4	665-668	got	
4-5	669-670	a	
4-6	671-676	clean	
4-7	677-685	database	
4-8	686-690	from	
4-9	691-694	the	
4-10	695-709	infrastructure	
4-11	710-713	DBA	
4-12	713-714	,	
4-13	715-718	and	
4-14	719-722	was	
4-15	723-725	in	
4-16	726-732	charge	
4-17	733-735	of	
4-18	736-742	schema	
4-19	743-749	design	
4-20	749-750	:	
4-21	751-759	creating	
4-22	760-766	tables	
4-23	766-767	,	
4-24	768-775	indexes	
4-25	775-776	,	
4-26	777-788	constraints	
4-27	788-789	,	
4-28	790-793	and	
4-29	794-800	tuning	
4-30	801-804	SQL	
4-31	804-805	.	

#Text=The application DBA was also the one who implemented ETL processes and data migrations.
5-1	806-809	The	
5-2	810-821	application	
5-3	822-825	DBA	
5-4	826-829	was	
5-5	830-834	also	
5-6	835-838	the	
5-7	839-842	one	
5-8	843-846	who	
5-9	847-858	implemented	
5-10	859-862	ETL	
5-11	863-872	processes	
5-12	873-876	and	
5-13	877-881	data	
5-14	882-892	migrations	
5-15	892-893	.	

#Text=In teams that used stored procedures, the application DBA would maintain those as well.
6-1	894-896	In	
6-2	897-902	teams	
6-3	903-907	that	
6-4	908-912	used	
6-5	913-919	stored	
6-6	920-930	procedures	
6-7	930-931	,	
6-8	932-935	the	
6-9	936-947	application	
6-10	948-951	DBA	
6-11	952-957	would	
6-12	958-966	maintain	
6-13	967-972	those	
6-14	973-975	as	
6-15	976-980	well	
6-16	980-981	.	

#Text=Application DBAs were usually part of the development team.
7-1	982-993	Application	
7-2	994-998	DBAs	
7-3	999-1003	were	
7-4	1004-1011	usually	
7-5	1012-1016	part	
7-6	1017-1019	of	
7-7	1020-1023	the	
7-8	1024-1035	development	
7-9	1036-1040	team	
7-10	1040-1041	.	

#Text=They would possess deep domain knowledge so normally they would work on just one or two projects.
8-1	1042-1046	They	
8-2	1047-1052	would	
8-3	1053-1060	possess	
8-4	1061-1065	deep	
8-5	1066-1072	domain	
8-6	1073-1082	knowledge	
8-7	1083-1085	so	
8-8	1086-1094	normally	
8-9	1095-1099	they	
8-10	1100-1105	would	
8-11	1106-1110	work	
8-12	1111-1113	on	
8-13	1114-1118	just	
8-14	1119-1122	one	
8-15	1123-1125	or	
8-16	1126-1129	two	
8-17	1130-1138	projects	
8-18	1138-1139	.	

#Text=Infrastructure DBAs would usually be part of some IT team, and would work on many projects simultaneously.
9-1	1140-1154	Infrastructure	
9-2	1155-1159	DBAs	
9-3	1160-1165	would	
9-4	1166-1173	usually	
9-5	1174-1176	be	
9-6	1177-1181	part	
9-7	1182-1184	of	
9-8	1185-1189	some	
9-9	1190-1192	IT	
9-10	1193-1197	team	
9-11	1197-1198	,	
9-12	1199-1202	and	
9-13	1203-1208	would	
9-14	1209-1213	work	
9-15	1214-1216	on	
9-16	1217-1221	many	
9-17	1222-1230	projects	
9-18	1231-1245	simultaneously	
9-19	1245-1246	.	

#Text=I'm an Application DBA
#Text=I never had any desire to fiddle with backups or tune storage (I'm sure it's fascinating!).
10-1	1247-1250	I'm	
10-2	1251-1253	an	
10-3	1254-1265	Application	
10-4	1266-1269	DBA	
10-5	1270-1271	I	
10-6	1272-1277	never	
10-7	1278-1281	had	
10-8	1282-1285	any	
10-9	1286-1292	desire	
10-10	1293-1295	to	
10-11	1296-1302	fiddle	
10-12	1303-1307	with	
10-13	1308-1315	backups	
10-14	1316-1318	or	
10-15	1319-1323	tune	
10-16	1324-1331	storage	
10-17	1332-1333	(	
10-18	1333-1336	I'm	
10-19	1337-1341	sure	
10-20	1342-1346	it's	
10-21	1347-1358	fascinating	
10-22	1358-1359	!	
10-23	1359-1360	)	
10-24	1360-1361	.	

#Text=Until this day I like to say I'm a DBA that knows how to develop applications, and not a developer that knows his way around the database.
11-1	1362-1367	Until	
11-2	1368-1372	this	
11-3	1373-1376	day	
11-4	1377-1378	I	
11-5	1379-1383	like	
11-6	1384-1386	to	
11-7	1387-1390	say	
11-8	1391-1394	I'm	
11-9	1395-1396	a	
11-10	1397-1400	DBA	
11-11	1401-1405	that	
11-12	1406-1411	knows	
11-13	1412-1415	how	
11-14	1416-1418	to	
11-15	1419-1426	develop	
11-16	1427-1439	applications	
11-17	1439-1440	,	
11-18	1441-1444	and	
11-19	1445-1448	not	
11-20	1449-1450	a	
11-21	1451-1460	developer	
11-22	1461-1465	that	
11-23	1466-1471	knows	
11-24	1472-1475	his	
11-25	1476-1479	way	
11-26	1480-1486	around	
11-27	1487-1490	the	
11-28	1491-1499	database	
11-29	1499-1500	.	

#Text=In this article I share some non-trivial tips about database development I gathered along the way.
12-1	1501-1503	In	
12-2	1504-1508	this	
12-3	1509-1516	article	
12-4	1517-1518	I	
12-5	1519-1524	share	
12-6	1525-1529	some	
12-7	1530-1541	non-trivial	
12-8	1542-1546	tips	
12-9	1547-1552	about	
12-10	1553-1561	database	
12-11	1562-1573	development	
12-12	1574-1575	I	
12-13	1576-1584	gathered	
12-14	1585-1590	along	
12-15	1591-1594	the	
12-16	1595-1598	way	
12-17	1598-1599	.	

#Text=Be that guy...Image by CommitStrip
#Text=Table of Contents
#Text=Update Only What Needs Updating
#Text=Disable Constraints and Indexes During Bulk Loads
#Text=Use UNLOGGED Tables for Intermediate Data
#Text=Implement Complete Processes Using WITH and RETURNING
#Text=Avoid Indexes on Columns With Low Selectivity
#Text=Use Partial Indexes
#Text=Always Load Sorted Data
#Text=Index Columns With High Correlation Using BRIN
#Text=Make Indexes "Invisible"
#Text=Don't Schedule Long Running Processes at Round Hours
#Text=Conclusion
#Text=Update Only What Needs Updating
#Text=UPDATE is a relatively expensive operation.
13-1	1600-1602	Be	
13-2	1603-1607	that	
13-3	1608-1611	guy	
13-4	1611-1612	.	
13-5	1612-1613	.	
13-6	1613-1614	.	
13-7	1614-1619	Image	
13-8	1620-1622	by	
13-9	1623-1634	CommitStrip	
13-10	1635-1640	Table	
13-11	1641-1643	of	
13-12	1644-1652	Contents	
13-13	1653-1659	Update	
13-14	1660-1664	Only	
13-15	1665-1669	What	
13-16	1670-1675	Needs	
13-17	1676-1684	Updating	
13-18	1685-1692	Disable	
13-19	1693-1704	Constraints	
13-20	1705-1708	and	
13-21	1709-1716	Indexes	
13-22	1717-1723	During	
13-23	1724-1728	Bulk	
13-24	1729-1734	Loads	
13-25	1735-1738	Use	
13-26	1739-1747	UNLOGGED	
13-27	1748-1754	Tables	
13-28	1755-1758	for	
13-29	1759-1771	Intermediate	
13-30	1772-1776	Data	
13-31	1777-1786	Implement	
13-32	1787-1795	Complete	
13-33	1796-1805	Processes	
13-34	1806-1811	Using	
13-35	1812-1816	WITH	
13-36	1817-1820	and	
13-37	1821-1830	RETURNING	
13-38	1831-1836	Avoid	
13-39	1837-1844	Indexes	
13-40	1845-1847	on	
13-41	1848-1855	Columns	
13-42	1856-1860	With	
13-43	1861-1864	Low	
13-44	1865-1876	Selectivity	
13-45	1877-1880	Use	
13-46	1881-1888	Partial	
13-47	1889-1896	Indexes	
13-48	1897-1903	Always	
13-49	1904-1908	Load	
13-50	1909-1915	Sorted	
13-51	1916-1920	Data	
13-52	1921-1926	Index	
13-53	1927-1934	Columns	
13-54	1935-1939	With	
13-55	1940-1944	High	
13-56	1945-1956	Correlation	
13-57	1957-1962	Using	
13-58	1963-1967	BRIN	
13-59	1968-1972	Make	
13-60	1973-1980	Indexes	
13-61	1981-1982	"	
13-62	1982-1991	Invisible	
13-63	1991-1992	"	
13-64	1993-1998	Don't	
13-65	1999-2007	Schedule	
13-66	2008-2012	Long	
13-67	2013-2020	Running	
13-68	2021-2030	Processes	
13-69	2031-2033	at	
13-70	2034-2039	Round	
13-71	2040-2045	Hours	
13-72	2046-2056	Conclusion	
13-73	2057-2063	Update	
13-74	2064-2068	Only	
13-75	2069-2073	What	
13-76	2074-2079	Needs	
13-77	2080-2088	Updating	
13-78	2089-2095	UPDATE	
13-79	2096-2098	is	
13-80	2099-2100	a	
13-81	2101-2111	relatively	
13-82	2112-2121	expensive	
13-83	2122-2131	operation	
13-84	2131-2132	.	

#Text=To speed up an UPDATE command it's best to make sure you only update what needs updating.
14-1	2133-2135	To	
14-2	2136-2141	speed	
14-3	2142-2144	up	
14-4	2145-2147	an	
14-5	2148-2154	UPDATE	
14-6	2155-2162	command	
14-7	2163-2167	it's	
14-8	2168-2172	best	
14-9	2173-2175	to	
14-10	2176-2180	make	
14-11	2181-2185	sure	
14-12	2186-2189	you	
14-13	2190-2194	only	
14-14	2195-2201	update	
14-15	2202-2206	what	
14-16	2207-2212	needs	
14-17	2213-2221	updating	
14-18	2221-2222	.	

#Text=Take this query for example that normalizes an email column:
#Text=db=# UPDATE users SET email = lower(email);
#Text=UPDATE 1010000
#Text=Time: 1583.935 ms (00:01.584)
#Text=Looks innocent, right?
15-1	2223-2227	Take	
15-2	2228-2232	this	
15-3	2233-2238	query	
15-4	2239-2242	for	
15-5	2243-2250	example	
15-6	2251-2255	that	
15-7	2256-2266	normalizes	
15-8	2267-2269	an	
15-9	2270-2275	email	
15-10	2276-2282	column	
15-11	2282-2283	:	
15-12	2284-2286	db	
15-13	2286-2287	=	
15-14	2287-2288	#	
15-15	2289-2295	UPDATE	
15-16	2296-2301	users	
15-17	2302-2305	SET	
15-18	2306-2311	email	
15-19	2312-2313	=	
15-20	2314-2319	lower	
15-21	2319-2320	(	
15-22	2320-2325	email	
15-23	2325-2326	)	
15-24	2326-2327	;	
15-25	2328-2334	UPDATE	
15-26	2335-2342	1010000	
15-27	2343-2347	Time	
15-28	2347-2348	:	
15-29	2349-2357	1583.935	
15-30	2358-2360	ms	
15-31	2361-2362	(	
15-32	2362-2364	00	
15-33	2364-2365	:	
15-34	2365-2371	01.584	
15-35	2371-2372	)	
15-36	2373-2378	Looks	
15-37	2379-2387	innocent	
15-38	2387-2388	,	
15-39	2389-2394	right	
15-40	2394-2395	?	

#Text=the query updated emails of 1,010,000 users.
16-1	2396-2399	the	
16-2	2400-2405	query	
16-3	2406-2413	updated	
16-4	2414-2420	emails	
16-5	2421-2423	of	
16-6	2424-2433	1,010,000	
16-7	2434-2439	users	
16-8	2439-2440	.	

#Text=But, did all rows really needed to update?
17-1	2441-2444	But	
17-2	2444-2445	,	
17-3	2446-2449	did	
17-4	2450-2453	all	
17-5	2454-2458	rows	
17-6	2459-2465	really	
17-7	2466-2472	needed	
17-8	2473-2475	to	
17-9	2476-2482	update	
17-10	2482-2483	?	

#Text=db=# UPDATE users SET email = lower(email)
#Text=db-# WHERE email !
18-1	2484-2486	db	
18-2	2486-2487	=	
18-3	2487-2488	#	
18-4	2489-2495	UPDATE	
18-5	2496-2501	users	
18-6	2502-2505	SET	
18-7	2506-2511	email	
18-8	2512-2513	=	
18-9	2514-2519	lower	
18-10	2519-2520	(	
18-11	2520-2525	email	
18-12	2525-2526	)	
18-13	2527-2529	db	
18-14	2529-2530	-	
18-15	2530-2531	#	
18-16	2532-2537	WHERE	
18-17	2538-2543	email	
18-18	2544-2545	!	

#Text== lower(email);
#Text=UPDATE 10000
#Text=Time: 299.470 ms
#Text=Only 10,000 rows needed to update.
19-1	2545-2546	=	
19-2	2547-2552	lower	
19-3	2552-2553	(	
19-4	2553-2558	email	
19-5	2558-2559	)	
19-6	2559-2560	;	
19-7	2561-2567	UPDATE	
19-8	2568-2573	10000	
19-9	2574-2578	Time	
19-10	2578-2579	:	
19-11	2580-2587	299.470	
19-12	2588-2590	ms	
19-13	2591-2595	Only	
19-14	2596-2602	10,000	
19-15	2603-2607	rows	
19-16	2608-2614	needed	
19-17	2615-2617	to	
19-18	2618-2624	update	
19-19	2624-2625	.	

#Text=By reducing the amount of affected rows, the execution time went down from 1.5 seconds to just less than 300ms.
20-1	2626-2628	By	
20-2	2629-2637	reducing	
20-3	2638-2641	the	
20-4	2642-2648	amount	
20-5	2649-2651	of	
20-6	2652-2660	affected	
20-7	2661-2665	rows	
20-8	2665-2666	,	
20-9	2667-2670	the	
20-10	2671-2680	execution	
20-11	2681-2685	time	
20-12	2686-2690	went	
20-13	2691-2695	down	
20-14	2696-2700	from	
20-15	2701-2704	1.5	
20-16	2705-2712	seconds	
20-17	2713-2715	to	
20-18	2716-2720	just	
20-19	2721-2725	less	
20-20	2726-2730	than	
20-21	2731-2736	300ms	
20-22	2736-2737	.	

#Text=Updating fewer rows also saves the database maintenance later on.
21-1	2738-2746	Updating	
21-2	2747-2752	fewer	
21-3	2753-2757	rows	
21-4	2758-2762	also	
21-5	2763-2768	saves	
21-6	2769-2772	the	
21-7	2773-2781	database	
21-8	2782-2793	maintenance	
21-9	2794-2799	later	
21-10	2800-2802	on	
21-11	2802-2803	.	

#Text=Update Only What Needs Updating
#Text=This type of large updates are very common in data migration scripts.
22-1	2804-2810	Update	
22-2	2811-2815	Only	
22-3	2816-2820	What	
22-4	2821-2826	Needs	
22-5	2827-2835	Updating	
22-6	2836-2840	This	
22-7	2841-2845	type	
22-8	2846-2848	of	
22-9	2849-2854	large	
22-10	2855-2862	updates	
22-11	2863-2866	are	
22-12	2867-2871	very	
22-13	2872-2878	common	
22-14	2879-2881	in	
22-15	2882-2886	data	
22-16	2887-2896	migration	
22-17	2897-2904	scripts	
22-18	2904-2905	.	

#Text=So the next time you write a migration script, make sure to only update what needs updating.
23-1	2906-2908	So	
23-2	2909-2912	the	
23-3	2913-2917	next	
23-4	2918-2922	time	
23-5	2923-2926	you	
23-6	2927-2932	write	
23-7	2933-2934	a	
23-8	2935-2944	migration	
23-9	2945-2951	script	
23-10	2951-2952	,	
23-11	2953-2957	make	
23-12	2958-2962	sure	
23-13	2963-2965	to	
23-14	2966-2970	only	
23-15	2971-2977	update	
23-16	2978-2982	what	
23-17	2983-2988	needs	
23-18	2989-2997	updating	
23-19	2997-2998	.	

#Text=Disable Constraints and Indexes During Bulk Loads
#Text=Constraints are an important part of relational databases: they keep the data consistent and reliable.
24-1	2999-3006	Disable	
24-2	3007-3018	Constraints	
24-3	3019-3022	and	
24-4	3023-3030	Indexes	
24-5	3031-3037	During	
24-6	3038-3042	Bulk	
24-7	3043-3048	Loads	
24-8	3049-3060	Constraints	
24-9	3061-3064	are	
24-10	3065-3067	an	
24-11	3068-3077	important	
24-12	3078-3082	part	
24-13	3083-3085	of	
24-14	3086-3096	relational	
24-15	3097-3106	databases	
24-16	3106-3107	:	
24-17	3108-3112	they	
24-18	3113-3117	keep	
24-19	3118-3121	the	
24-20	3122-3126	data	
24-21	3127-3137	consistent	
24-22	3138-3141	and	
24-23	3142-3150	reliable	
24-24	3150-3151	.	

#Text=Their benefits come at a cost though, and it's most noticeable when loading or updating a lot of rows.
25-1	3152-3157	Their	
25-2	3158-3166	benefits	
25-3	3167-3171	come	
25-4	3172-3174	at	
25-5	3175-3176	a	
25-6	3177-3181	cost	
25-7	3182-3188	though	
25-8	3188-3189	,	
25-9	3190-3193	and	
25-10	3194-3198	it's	
25-11	3199-3203	most	
25-12	3204-3214	noticeable	
25-13	3215-3219	when	
25-14	3220-3227	loading	
25-15	3228-3230	or	
25-16	3231-3239	updating	
25-17	3240-3241	a	
25-18	3242-3245	lot	
25-19	3246-3248	of	
25-20	3249-3253	rows	
25-21	3253-3254	.	

#Text=To demonstrate, set up a small schema for a store:
#Text=DROP TABLE IF EXISTS product CASCADE;
#Text=CREATE TABLE product (
#Text=id serial PRIMARY KEY,
#Text=name TEXT NOT NULL,
#Text=price INT NOT NULL
#Text=INSERT INTO product (name, price)
#Text=SELECT random()::text, (random() * 1000)::int
#Text=FROM generate_series(0, 10000);
#Text=DROP TABLE IF EXISTS customer CASCADE;
#Text=CREATE TABLE customer (
#Text=id serial PRIMARY KEY,
#Text=name TEXT NOT NULL
#Text=INSERT INTO customer (name)
#Text=SELECT random()::text
#Text=FROM generate_series(0, 100000);
#Text=DROP TABLE IF EXISTS sale;
#Text=CREATE TABLE sale (
#Text=id serial PRIMARY KEY,
#Text=created timestamptz NOT NULL,
#Text=product_id int NOT NULL,
#Text=customer_id int NOT NULL
#Text=The schema defines different types of constraints such as "not null" and unique constraints.
26-1	3255-3257	To	
26-2	3258-3269	demonstrate	
26-3	3269-3270	,	
26-4	3271-3274	set	
26-5	3275-3277	up	
26-6	3278-3279	a	
26-7	3280-3285	small	
26-8	3286-3292	schema	
26-9	3293-3296	for	
26-10	3297-3298	a	
26-11	3299-3304	store	
26-12	3304-3305	:	
26-13	3306-3310	DROP	
26-14	3311-3316	TABLE	
26-15	3317-3319	IF	
26-16	3320-3326	EXISTS	
26-17	3327-3334	product	
26-18	3335-3342	CASCADE	
26-19	3342-3343	;	
26-20	3344-3350	CREATE	
26-21	3351-3356	TABLE	
26-22	3357-3364	product	
26-23	3365-3366	(	
26-24	3367-3369	id	
26-25	3370-3376	serial	
26-26	3377-3384	PRIMARY	
26-27	3385-3388	KEY	
26-28	3388-3389	,	
26-29	3390-3394	name	
26-30	3395-3399	TEXT	
26-31	3400-3403	NOT	
26-32	3404-3408	NULL	
26-33	3408-3409	,	
26-34	3410-3415	price	
26-35	3416-3419	INT	
26-36	3420-3423	NOT	
26-37	3424-3428	NULL	
26-38	3429-3435	INSERT	
26-39	3436-3440	INTO	
26-40	3441-3448	product	
26-41	3449-3450	(	
26-42	3450-3454	name	
26-43	3454-3455	,	
26-44	3456-3461	price	
26-45	3461-3462	)	
26-46	3463-3469	SELECT	
26-47	3470-3476	random	
26-48	3476-3477	(	
26-49	3477-3478	)	
26-50	3478-3479	:	
26-51	3479-3480	:	
26-52	3480-3484	text	
26-53	3484-3485	,	
26-54	3486-3487	(	
26-55	3487-3493	random	
26-56	3493-3494	(	
26-57	3494-3495	)	
26-58	3496-3497	*	
26-59	3498-3502	1000	
26-60	3502-3503	)	
26-61	3503-3504	:	
26-62	3504-3505	:	
26-63	3505-3508	int	
26-64	3509-3513	FROM	
26-65	3514-3529	generate_series	
26-66	3529-3530	(	
26-67	3530-3531	0	
26-68	3531-3532	,	
26-69	3533-3538	10000	
26-70	3538-3539	)	
26-71	3539-3540	;	
26-72	3541-3545	DROP	
26-73	3546-3551	TABLE	
26-74	3552-3554	IF	
26-75	3555-3561	EXISTS	
26-76	3562-3570	customer	
26-77	3571-3578	CASCADE	
26-78	3578-3579	;	
26-79	3580-3586	CREATE	
26-80	3587-3592	TABLE	
26-81	3593-3601	customer	
26-82	3602-3603	(	
26-83	3604-3606	id	
26-84	3607-3613	serial	
26-85	3614-3621	PRIMARY	
26-86	3622-3625	KEY	
26-87	3625-3626	,	
26-88	3627-3631	name	
26-89	3632-3636	TEXT	
26-90	3637-3640	NOT	
26-91	3641-3645	NULL	
26-92	3646-3652	INSERT	
26-93	3653-3657	INTO	
26-94	3658-3666	customer	
26-95	3667-3668	(	
26-96	3668-3672	name	
26-97	3672-3673	)	
26-98	3674-3680	SELECT	
26-99	3681-3687	random	
26-100	3687-3688	(	
26-101	3688-3689	)	
26-102	3689-3690	:	
26-103	3690-3691	:	
26-104	3691-3695	text	
26-105	3696-3700	FROM	
26-106	3701-3716	generate_series	
26-107	3716-3717	(	
26-108	3717-3718	0	
26-109	3718-3719	,	
26-110	3720-3726	100000	
26-111	3726-3727	)	
26-112	3727-3728	;	
26-113	3729-3733	DROP	
26-114	3734-3739	TABLE	
26-115	3740-3742	IF	
26-116	3743-3749	EXISTS	
26-117	3750-3754	sale	
26-118	3754-3755	;	
26-119	3756-3762	CREATE	
26-120	3763-3768	TABLE	
26-121	3769-3773	sale	
26-122	3774-3775	(	
26-123	3776-3778	id	
26-124	3779-3785	serial	
26-125	3786-3793	PRIMARY	
26-126	3794-3797	KEY	
26-127	3797-3798	,	
26-128	3799-3806	created	
26-129	3807-3818	timestamptz	
26-130	3819-3822	NOT	
26-131	3823-3827	NULL	
26-132	3827-3828	,	
26-133	3829-3839	product_id	
26-134	3840-3843	int	
26-135	3844-3847	NOT	
26-136	3848-3852	NULL	
26-137	3852-3853	,	
26-138	3854-3865	customer_id	
26-139	3866-3869	int	
26-140	3870-3873	NOT	
26-141	3874-3878	NULL	
26-142	3879-3882	The	
26-143	3883-3889	schema	
26-144	3890-3897	defines	
26-145	3898-3907	different	
26-146	3908-3913	types	
26-147	3914-3916	of	
26-148	3917-3928	constraints	
26-149	3929-3933	such	
26-150	3934-3936	as	
26-151	3937-3938	"	
26-152	3938-3941	not	
26-153	3942-3946	null	
26-154	3946-3947	"	
26-155	3948-3951	and	
26-156	3952-3958	unique	
26-157	3959-3970	constraints	
26-158	3970-3971	.	

#Text=To set a baseline, start by adding foreign keys to the sale table, and then load some data into it:
#Text=db=# ALTER TABLE sale ADD CONSTRAINT sale_product_fk
#Text=db-# FOREIGN KEY (product_id) REFERENCES product(id);
#Text=ALTER TABLE
#Text=Time: 18.413 ms
#Text=db=# ALTER TABLE sale ADD CONSTRAINT sale_customer_fk
#Text=db-# FOREIGN KEY (customer_id) REFERENCES customer(id);
#Text=ALTER TABLE
#Text=Time: 5.464 ms
#Text=db=# CREATE INDEX sale_created_ix ON sale(created);
#Text=CREATE INDEX
#Text=Time: 12.605 ms
#Text=db=# INSERT INTO SALE (created, product_id, customer_id)
#Text=db-# SELECT
#Text=db-#
#Text=now() - interval '1 hour' * random() * 1000,
#Text=db-#
#Text=(random() * 10000)::int + 1,
#Text=db-#
#Text=(random() * 100000)::int + 1
#Text=db-# FROM generate_series(1, 1000000);
#Text=INSERT 0 1000000
#Text=Time: 15410.234 ms (00:15.410)
#Text=After defining constraints and indexes, loading a million rows to the table took ~15.4s.
27-1	3972-3974	To	
27-2	3975-3978	set	
27-3	3979-3980	a	
27-4	3981-3989	baseline	
27-5	3989-3990	,	
27-6	3991-3996	start	
27-7	3997-3999	by	
27-8	4000-4006	adding	
27-9	4007-4014	foreign	
27-10	4015-4019	keys	
27-11	4020-4022	to	
27-12	4023-4026	the	
27-13	4027-4031	sale	
27-14	4032-4037	table	
27-15	4037-4038	,	
27-16	4039-4042	and	
27-17	4043-4047	then	
27-18	4048-4052	load	
27-19	4053-4057	some	
27-20	4058-4062	data	
27-21	4063-4067	into	
27-22	4068-4070	it	
27-23	4070-4071	:	
27-24	4072-4074	db	
27-25	4074-4075	=	
27-26	4075-4076	#	
27-27	4077-4082	ALTER	
27-28	4083-4088	TABLE	
27-29	4089-4093	sale	
27-30	4094-4097	ADD	
27-31	4098-4108	CONSTRAINT	
27-32	4109-4124	sale_product_fk	
27-33	4125-4127	db	
27-34	4127-4128	-	
27-35	4128-4129	#	
27-36	4130-4137	FOREIGN	
27-37	4138-4141	KEY	
27-38	4142-4143	(	
27-39	4143-4153	product_id	
27-40	4153-4154	)	
27-41	4155-4165	REFERENCES	
27-42	4166-4173	product	
27-43	4173-4174	(	
27-44	4174-4176	id	
27-45	4176-4177	)	
27-46	4177-4178	;	
27-47	4179-4184	ALTER	
27-48	4185-4190	TABLE	
27-49	4191-4195	Time	
27-50	4195-4196	:	
27-51	4197-4203	18.413	
27-52	4204-4206	ms	
27-53	4207-4209	db	
27-54	4209-4210	=	
27-55	4210-4211	#	
27-56	4212-4217	ALTER	
27-57	4218-4223	TABLE	
27-58	4224-4228	sale	
27-59	4229-4232	ADD	
27-60	4233-4243	CONSTRAINT	
27-61	4244-4260	sale_customer_fk	
27-62	4261-4263	db	
27-63	4263-4264	-	
27-64	4264-4265	#	
27-65	4266-4273	FOREIGN	
27-66	4274-4277	KEY	
27-67	4278-4279	(	
27-68	4279-4290	customer_id	
27-69	4290-4291	)	
27-70	4292-4302	REFERENCES	
27-71	4303-4311	customer	
27-72	4311-4312	(	
27-73	4312-4314	id	
27-74	4314-4315	)	
27-75	4315-4316	;	
27-76	4317-4322	ALTER	
27-77	4323-4328	TABLE	
27-78	4329-4333	Time	
27-79	4333-4334	:	
27-80	4335-4340	5.464	
27-81	4341-4343	ms	
27-82	4344-4346	db	
27-83	4346-4347	=	
27-84	4347-4348	#	
27-85	4349-4355	CREATE	
27-86	4356-4361	INDEX	
27-87	4362-4377	sale_created_ix	
27-88	4378-4380	ON	
27-89	4381-4385	sale	
27-90	4385-4386	(	
27-91	4386-4393	created	
27-92	4393-4394	)	
27-93	4394-4395	;	
27-94	4396-4402	CREATE	
27-95	4403-4408	INDEX	
27-96	4409-4413	Time	
27-97	4413-4414	:	
27-98	4415-4421	12.605	
27-99	4422-4424	ms	
27-100	4425-4427	db	
27-101	4427-4428	=	
27-102	4428-4429	#	
27-103	4430-4436	INSERT	
27-104	4437-4441	INTO	
27-105	4442-4446	SALE	
27-106	4447-4448	(	
27-107	4448-4455	created	
27-108	4455-4456	,	
27-109	4457-4467	product_id	
27-110	4467-4468	,	
27-111	4469-4480	customer_id	
27-112	4480-4481	)	
27-113	4482-4484	db	
27-114	4484-4485	-	
27-115	4485-4486	#	
27-116	4487-4493	SELECT	
27-117	4494-4496	db	
27-118	4496-4497	-	
27-119	4497-4498	#	
27-120	4499-4502	now	
27-121	4502-4503	(	
27-122	4503-4504	)	
27-123	4505-4506	-	
27-124	4507-4515	interval	
27-125	4516-4517	'	
27-126	4517-4518	1	
27-127	4519-4523	hour	
27-128	4523-4524	'	
27-129	4525-4526	*	
27-130	4527-4533	random	
27-131	4533-4534	(	
27-132	4534-4535	)	
27-133	4536-4537	*	
27-134	4538-4542	1000	
27-135	4542-4543	,	
27-136	4544-4546	db	
27-137	4546-4547	-	
27-138	4547-4548	#	
27-139	4549-4550	(	
27-140	4550-4556	random	
27-141	4556-4557	(	
27-142	4557-4558	)	
27-143	4559-4560	*	
27-144	4561-4566	10000	
27-145	4566-4567	)	
27-146	4567-4568	:	
27-147	4568-4569	:	
27-148	4569-4572	int	
27-149	4573-4574	+	
27-150	4575-4576	1	
27-151	4576-4577	,	
27-152	4578-4580	db	
27-153	4580-4581	-	
27-154	4581-4582	#	
27-155	4583-4584	(	
27-156	4584-4590	random	
27-157	4590-4591	(	
27-158	4591-4592	)	
27-159	4593-4594	*	
27-160	4595-4601	100000	
27-161	4601-4602	)	
27-162	4602-4603	:	
27-163	4603-4604	:	
27-164	4604-4607	int	
27-165	4608-4609	+	
27-166	4610-4611	1	
27-167	4612-4614	db	
27-168	4614-4615	-	
27-169	4615-4616	#	
27-170	4617-4621	FROM	
27-171	4622-4637	generate_series	
27-172	4637-4638	(	
27-173	4638-4639	1	
27-174	4639-4640	,	
27-175	4641-4648	1000000	
27-176	4648-4649	)	
27-177	4649-4650	;	
27-178	4651-4657	INSERT	
27-179	4658-4659	0	
27-180	4660-4667	1000000	
27-181	4668-4672	Time	
27-182	4672-4673	:	
27-183	4674-4683	15410.234	
27-184	4684-4686	ms	
27-185	4687-4688	(	
27-186	4688-4690	00	
27-187	4690-4691	:	
27-188	4691-4697	15.410	
27-189	4697-4698	)	
27-190	4699-4704	After	
27-191	4705-4713	defining	
27-192	4714-4725	constraints	
27-193	4726-4729	and	
27-194	4730-4737	indexes	
27-195	4737-4738	,	
27-196	4739-4746	loading	
27-197	4747-4748	a	
27-198	4749-4756	million	
27-199	4757-4761	rows	
27-200	4762-4764	to	
27-201	4765-4768	the	
27-202	4769-4774	table	
27-203	4775-4779	took	
27-204	4780-4781	~	
27-205	4781-4786	15.4s	
27-206	4786-4787	.	

#Text=Next, try to load the data into the table first, and only then add constraints and indexes:
#Text=db=# INSERT INTO SALE (created, product_id, customer_id)
#Text=db-# SELECT
#Text=db-#
#Text=now() - interval '1 hour' * random() * 1000,
#Text=db-#
#Text=(random() * 10000)::int + 1,
#Text=db-#
#Text=(random() * 100000)::int + 1
#Text=db-# FROM generate_series(1, 1000000);
#Text=INSERT 0 1000000
#Text=Time: 2277.824 ms (00:02.278)
#Text=db=# ALTER TABLE sale ADD CONSTRAINT sale_product_fk
#Text=db-# FOREIGN KEY (product_id) REFERENCES product(id);
#Text=ALTER TABLE
#Text=Time: 169.193 ms
#Text=db=# ALTER TABLE sale ADD CONSTRAINT sale_customer_fk
#Text=db-# FOREIGN KEY (customer_id) REFERENCES customer(id);
#Text=ALTER TABLE
#Text=Time: 185.633 ms
#Text=db=# CREATE INDEX sale_created_ix ON sale(created);
#Text=CREATE INDEX
#Text=Time: 484.244 ms
#Text=Loading data into a table without indexes and constraints was much faster, 2.27s compared to 15.4s before.
28-1	4788-4792	Next	
28-2	4792-4793	,	
28-3	4794-4797	try	
28-4	4798-4800	to	
28-5	4801-4805	load	
28-6	4806-4809	the	
28-7	4810-4814	data	
28-8	4815-4819	into	
28-9	4820-4823	the	
28-10	4824-4829	table	
28-11	4830-4835	first	
28-12	4835-4836	,	
28-13	4837-4840	and	
28-14	4841-4845	only	
28-15	4846-4850	then	
28-16	4851-4854	add	
28-17	4855-4866	constraints	
28-18	4867-4870	and	
28-19	4871-4878	indexes	
28-20	4878-4879	:	
28-21	4880-4882	db	
28-22	4882-4883	=	
28-23	4883-4884	#	
28-24	4885-4891	INSERT	
28-25	4892-4896	INTO	
28-26	4897-4901	SALE	
28-27	4902-4903	(	
28-28	4903-4910	created	
28-29	4910-4911	,	
28-30	4912-4922	product_id	
28-31	4922-4923	,	
28-32	4924-4935	customer_id	
28-33	4935-4936	)	
28-34	4937-4939	db	
28-35	4939-4940	-	
28-36	4940-4941	#	
28-37	4942-4948	SELECT	
28-38	4949-4951	db	
28-39	4951-4952	-	
28-40	4952-4953	#	
28-41	4954-4957	now	
28-42	4957-4958	(	
28-43	4958-4959	)	
28-44	4960-4961	-	
28-45	4962-4970	interval	
28-46	4971-4972	'	
28-47	4972-4973	1	
28-48	4974-4978	hour	
28-49	4978-4979	'	
28-50	4980-4981	*	
28-51	4982-4988	random	
28-52	4988-4989	(	
28-53	4989-4990	)	
28-54	4991-4992	*	
28-55	4993-4997	1000	
28-56	4997-4998	,	
28-57	4999-5001	db	
28-58	5001-5002	-	
28-59	5002-5003	#	
28-60	5004-5005	(	
28-61	5005-5011	random	
28-62	5011-5012	(	
28-63	5012-5013	)	
28-64	5014-5015	*	
28-65	5016-5021	10000	
28-66	5021-5022	)	
28-67	5022-5023	:	
28-68	5023-5024	:	
28-69	5024-5027	int	
28-70	5028-5029	+	
28-71	5030-5031	1	
28-72	5031-5032	,	
28-73	5033-5035	db	
28-74	5035-5036	-	
28-75	5036-5037	#	
28-76	5038-5039	(	
28-77	5039-5045	random	
28-78	5045-5046	(	
28-79	5046-5047	)	
28-80	5048-5049	*	
28-81	5050-5056	100000	
28-82	5056-5057	)	
28-83	5057-5058	:	
28-84	5058-5059	:	
28-85	5059-5062	int	
28-86	5063-5064	+	
28-87	5065-5066	1	
28-88	5067-5069	db	
28-89	5069-5070	-	
28-90	5070-5071	#	
28-91	5072-5076	FROM	
28-92	5077-5092	generate_series	
28-93	5092-5093	(	
28-94	5093-5094	1	
28-95	5094-5095	,	
28-96	5096-5103	1000000	
28-97	5103-5104	)	
28-98	5104-5105	;	
28-99	5106-5112	INSERT	
28-100	5113-5114	0	
28-101	5115-5122	1000000	
28-102	5123-5127	Time	
28-103	5127-5128	:	
28-104	5129-5137	2277.824	
28-105	5138-5140	ms	
28-106	5141-5142	(	
28-107	5142-5144	00	
28-108	5144-5145	:	
28-109	5145-5151	02.278	
28-110	5151-5152	)	
28-111	5153-5155	db	
28-112	5155-5156	=	
28-113	5156-5157	#	
28-114	5158-5163	ALTER	
28-115	5164-5169	TABLE	
28-116	5170-5174	sale	
28-117	5175-5178	ADD	
28-118	5179-5189	CONSTRAINT	
28-119	5190-5205	sale_product_fk	
28-120	5206-5208	db	
28-121	5208-5209	-	
28-122	5209-5210	#	
28-123	5211-5218	FOREIGN	
28-124	5219-5222	KEY	
28-125	5223-5224	(	
28-126	5224-5234	product_id	
28-127	5234-5235	)	
28-128	5236-5246	REFERENCES	
28-129	5247-5254	product	
28-130	5254-5255	(	
28-131	5255-5257	id	
28-132	5257-5258	)	
28-133	5258-5259	;	
28-134	5260-5265	ALTER	
28-135	5266-5271	TABLE	
28-136	5272-5276	Time	
28-137	5276-5277	:	
28-138	5278-5285	169.193	
28-139	5286-5288	ms	
28-140	5289-5291	db	
28-141	5291-5292	=	
28-142	5292-5293	#	
28-143	5294-5299	ALTER	
28-144	5300-5305	TABLE	
28-145	5306-5310	sale	
28-146	5311-5314	ADD	
28-147	5315-5325	CONSTRAINT	
28-148	5326-5342	sale_customer_fk	
28-149	5343-5345	db	
28-150	5345-5346	-	
28-151	5346-5347	#	
28-152	5348-5355	FOREIGN	
28-153	5356-5359	KEY	
28-154	5360-5361	(	
28-155	5361-5372	customer_id	
28-156	5372-5373	)	
28-157	5374-5384	REFERENCES	
28-158	5385-5393	customer	
28-159	5393-5394	(	
28-160	5394-5396	id	
28-161	5396-5397	)	
28-162	5397-5398	;	
28-163	5399-5404	ALTER	
28-164	5405-5410	TABLE	
28-165	5411-5415	Time	
28-166	5415-5416	:	
28-167	5417-5424	185.633	
28-168	5425-5427	ms	
28-169	5428-5430	db	
28-170	5430-5431	=	
28-171	5431-5432	#	
28-172	5433-5439	CREATE	
28-173	5440-5445	INDEX	
28-174	5446-5461	sale_created_ix	
28-175	5462-5464	ON	
28-176	5465-5469	sale	
28-177	5469-5470	(	
28-178	5470-5477	created	
28-179	5477-5478	)	
28-180	5478-5479	;	
28-181	5480-5486	CREATE	
28-182	5487-5492	INDEX	
28-183	5493-5497	Time	
28-184	5497-5498	:	
28-185	5499-5506	484.244	
28-186	5507-5509	ms	
28-187	5510-5517	Loading	
28-188	5518-5522	data	
28-189	5523-5527	into	
28-190	5528-5529	a	
28-191	5530-5535	table	
28-192	5536-5543	without	
28-193	5544-5551	indexes	
28-194	5552-5555	and	
28-195	5556-5567	constraints	
28-196	5568-5571	was	
28-197	5572-5576	much	
28-198	5577-5583	faster	
28-199	5583-5584	,	
28-200	5585-5590	2.27s	
28-201	5591-5599	compared	
28-202	5600-5602	to	
28-203	5603-5608	15.4s	
28-204	5609-5615	before	
28-205	5615-5616	.	

#Text=Creating the indexes and constraints after the data was loaded into the table took a bit longer, but overall the entire process was much faster, 3.1s compared to 15.4s.
29-1	5617-5625	Creating	
29-2	5626-5629	the	
29-3	5630-5637	indexes	
29-4	5638-5641	and	
29-5	5642-5653	constraints	
29-6	5654-5659	after	
29-7	5660-5663	the	
29-8	5664-5668	data	
29-9	5669-5672	was	
29-10	5673-5679	loaded	
29-11	5680-5684	into	
29-12	5685-5688	the	
29-13	5689-5694	table	
29-14	5695-5699	took	
29-15	5700-5701	a	
29-16	5702-5705	bit	
29-17	5706-5712	longer	
29-18	5712-5713	,	
29-19	5714-5717	but	
29-20	5718-5725	overall	
29-21	5726-5729	the	
29-22	5730-5736	entire	
29-23	5737-5744	process	
29-24	5745-5748	was	
29-25	5749-5753	much	
29-26	5754-5760	faster	
29-27	5760-5761	,	
29-28	5762-5766	3.1s	
29-29	5767-5775	compared	
29-30	5776-5778	to	
29-31	5779-5784	15.4s	
29-32	5784-5785	.	

#Text=Unfortunately, for indexes PostgreSQL does not provide an easy way of doing this other than dropping and re-creating the indexes.
30-1	5786-5799	Unfortunately	
30-2	5799-5800	,	
30-3	5801-5804	for	
30-4	5805-5812	indexes	
30-5	5813-5823	PostgreSQL	
30-6	5824-5828	does	
30-7	5829-5832	not	
30-8	5833-5840	provide	
30-9	5841-5843	an	
30-10	5844-5848	easy	
30-11	5849-5852	way	
30-12	5853-5855	of	
30-13	5856-5861	doing	
30-14	5862-5866	this	
30-15	5867-5872	other	
30-16	5873-5877	than	
30-17	5878-5886	dropping	
30-18	5887-5890	and	
30-19	5891-5902	re-creating	
30-20	5903-5906	the	
30-21	5907-5914	indexes	
30-22	5914-5915	.	

#Text=In other databases such as Oracle, you can disable and enable indexes without having to re-create them.
31-1	5916-5918	In	
31-2	5919-5924	other	
31-3	5925-5934	databases	
31-4	5935-5939	such	
31-5	5940-5942	as	
31-6	5943-5949	Oracle	
31-7	5949-5950	,	
31-8	5951-5954	you	
31-9	5955-5958	can	
31-10	5959-5966	disable	
31-11	5967-5970	and	
31-12	5971-5977	enable	
31-13	5978-5985	indexes	
31-14	5986-5993	without	
31-15	5994-6000	having	
31-16	6001-6003	to	
31-17	6004-6013	re-create	
31-18	6014-6018	them	
31-19	6018-6019	.	

#Text=Use UNLOGGED Tables for Intermediate Data
#Text=When you modify data in PostgreSQL, the changes are written to the write ahead log (WAL).
32-1	6020-6023	Use	
32-2	6024-6032	UNLOGGED	
32-3	6033-6039	Tables	
32-4	6040-6043	for	
32-5	6044-6056	Intermediate	
32-6	6057-6061	Data	
32-7	6062-6066	When	
32-8	6067-6070	you	
32-9	6071-6077	modify	
32-10	6078-6082	data	
32-11	6083-6085	in	
32-12	6086-6096	PostgreSQL	
32-13	6096-6097	,	
32-14	6098-6101	the	
32-15	6102-6109	changes	
32-16	6110-6113	are	
32-17	6114-6121	written	
32-18	6122-6124	to	
32-19	6125-6128	the	
32-20	6129-6134	write	
32-21	6135-6140	ahead	
32-22	6141-6144	log	
32-23	6145-6146	(	
32-24	6146-6149	WAL	
32-25	6149-6150	)	
32-26	6150-6151	.	

#Text=The WAL is used to maintain integrity, to fast forward the database during recovery and to maintain replication.
33-1	6152-6155	The	
33-2	6156-6159	WAL	
33-3	6160-6162	is	
33-4	6163-6167	used	
33-5	6168-6170	to	
33-6	6171-6179	maintain	
33-7	6180-6189	integrity	
33-8	6189-6190	,	
33-9	6191-6193	to	
33-10	6194-6198	fast	
33-11	6199-6206	forward	
33-12	6207-6210	the	
33-13	6211-6219	database	
33-14	6220-6226	during	
33-15	6227-6235	recovery	
33-16	6236-6239	and	
33-17	6240-6242	to	
33-18	6243-6251	maintain	
33-19	6252-6263	replication	
33-20	6263-6264	.	

#Text=Writing to the WAL is often needed, but there are some circumstances where you might be willing to give up some of its uses to make things a bit faster.
34-1	6265-6272	Writing	
34-2	6273-6275	to	
34-3	6276-6279	the	
34-4	6280-6283	WAL	
34-5	6284-6286	is	
34-6	6287-6292	often	
34-7	6293-6299	needed	
34-8	6299-6300	,	
34-9	6301-6304	but	
34-10	6305-6310	there	
34-11	6311-6314	are	
34-12	6315-6319	some	
34-13	6320-6333	circumstances	
34-14	6334-6339	where	
34-15	6340-6343	you	
34-16	6344-6349	might	
34-17	6350-6352	be	
34-18	6353-6360	willing	
34-19	6361-6363	to	
34-20	6364-6368	give	
34-21	6369-6371	up	
34-22	6372-6376	some	
34-23	6377-6379	of	
34-24	6380-6383	its	
34-25	6384-6388	uses	
34-26	6389-6391	to	
34-27	6392-6396	make	
34-28	6397-6403	things	
34-29	6404-6405	a	
34-30	6406-6409	bit	
34-31	6410-6416	faster	
34-32	6416-6417	.	

#Text=One example is intermediate tables.
35-1	6418-6421	One	
35-2	6422-6429	example	
35-3	6430-6432	is	
35-4	6433-6445	intermediate	
35-5	6446-6452	tables	
35-6	6452-6453	.	

#Text=Intermediate tables are disposable tables that stores temporary data used to implement some process.
36-1	6454-6466	Intermediate	
36-2	6467-6473	tables	
36-3	6474-6477	are	
36-4	6478-6488	disposable	
36-5	6489-6495	tables	
36-6	6496-6500	that	
36-7	6501-6507	stores	
36-8	6508-6517	temporary	
36-9	6518-6522	data	
36-10	6523-6527	used	
36-11	6528-6530	to	
36-12	6531-6540	implement	
36-13	6541-6545	some	
36-14	6546-6553	process	
36-15	6553-6554	.	

#Text=For example, a very common pattern in ETL processes is to load data from a CSV file to an intermediate table, clean the data, and then load it to the target table.
37-1	6555-6558	For	
37-2	6559-6566	example	
37-3	6566-6567	,	
37-4	6568-6569	a	
37-5	6570-6574	very	
37-6	6575-6581	common	
37-7	6582-6589	pattern	
37-8	6590-6592	in	
37-9	6593-6596	ETL	
37-10	6597-6606	processes	
37-11	6607-6609	is	
37-12	6610-6612	to	
37-13	6613-6617	load	
37-14	6618-6622	data	
37-15	6623-6627	from	
37-16	6628-6629	a	
37-17	6630-6633	CSV	
37-18	6634-6638	file	
37-19	6639-6641	to	
37-20	6642-6644	an	
37-21	6645-6657	intermediate	
37-22	6658-6663	table	
37-23	6663-6664	,	
37-24	6665-6670	clean	
37-25	6671-6674	the	
37-26	6675-6679	data	
37-27	6679-6680	,	
37-28	6681-6684	and	
37-29	6685-6689	then	
37-30	6690-6694	load	
37-31	6695-6697	it	
37-32	6698-6700	to	
37-33	6701-6704	the	
37-34	6705-6711	target	
37-35	6712-6717	table	
37-36	6717-6718	.	

#Text=In this use-case, the intermediate table is disposable and there is no use for it in backups or replicas.
38-1	6719-6721	In	
38-2	6722-6726	this	
38-3	6727-6735	use-case	
38-4	6735-6736	,	
38-5	6737-6740	the	
38-6	6741-6753	intermediate	
38-7	6754-6759	table	
38-8	6760-6762	is	
38-9	6763-6773	disposable	
38-10	6774-6777	and	
38-11	6778-6783	there	
38-12	6784-6786	is	
38-13	6787-6789	no	
38-14	6790-6793	use	
38-15	6794-6797	for	
38-16	6798-6800	it	
38-17	6801-6803	in	
38-18	6804-6811	backups	
38-19	6812-6814	or	
38-20	6815-6823	replicas	
38-21	6823-6824	.	

#Text=UNLOGGED table
#Text=Intermediate tables that don't need to be restored in case of disaster, and are not needed in replicas, can be set as UNLOGGED:
#Text=CREATE UNLOGGED TABLE staging_table ( /* table definition */ );
#Text=BEWARE: Before using UNLOGGED make sure you understand its full implications.
39-1	6825-6833	UNLOGGED	
39-2	6834-6839	table	
39-3	6840-6852	Intermediate	
39-4	6853-6859	tables	
39-5	6860-6864	that	
39-6	6865-6870	don't	
39-7	6871-6875	need	
39-8	6876-6878	to	
39-9	6879-6881	be	
39-10	6882-6890	restored	
39-11	6891-6893	in	
39-12	6894-6898	case	
39-13	6899-6901	of	
39-14	6902-6910	disaster	
39-15	6910-6911	,	
39-16	6912-6915	and	
39-17	6916-6919	are	
39-18	6920-6923	not	
39-19	6924-6930	needed	
39-20	6931-6933	in	
39-21	6934-6942	replicas	
39-22	6942-6943	,	
39-23	6944-6947	can	
39-24	6948-6950	be	
39-25	6951-6954	set	
39-26	6955-6957	as	
39-27	6958-6966	UNLOGGED	
39-28	6966-6967	:	
39-29	6968-6974	CREATE	
39-30	6975-6983	UNLOGGED	
39-31	6984-6989	TABLE	
39-32	6990-7003	staging_table	
39-33	7004-7005	(	
39-34	7006-7007	/	
39-35	7007-7008	*	
39-36	7009-7014	table	
39-37	7015-7025	definition	
39-38	7026-7027	*	
39-39	7027-7028	/	
39-40	7029-7030	)	
39-41	7030-7031	;	
39-42	7032-7038	BEWARE	
39-43	7038-7039	:	
39-44	7040-7046	Before	
39-45	7047-7052	using	
39-46	7053-7061	UNLOGGED	
39-47	7062-7066	make	
39-48	7067-7071	sure	
39-49	7072-7075	you	
39-50	7076-7086	understand	
39-51	7087-7090	its	
39-52	7091-7095	full	
39-53	7096-7108	implications	
39-54	7108-7109	.	

#Text=Implement Complete Processes Using WITH and RETURNING
#Text=Say you have a users table, and you find that you have some duplicates in the table:
#Text=Table setup
#Text=CREATE TABLE users (
#Text=id SERIAL PRIMARY KEY,
#Text=email TEXT UNIQUE
#Text=CREATE TABLE orders (
#Text=id SERIAL PRIMARY KEY,
#Text=user_id INT,
#Text=CONSTRAINT orders_user_fk
#Text=FOREIGN KEY (user_id)
#Text=REFERENCES USERS(id)
#Text=INSERT INTO users (email) VALUES
#Text=('foo@bar.baz'),
#Text=('me@hakibenita.com'),
#Text=('ME@hakibenita.com');
#Text=INSERT INTO orders (user_id) VALUES
#Text=(1),
#Text=(1),
#Text=(2),
#Text=(3),
#Text=(3);
#Text=db=# SELECT u.id, u.email, o.id as order_id
#Text=FROM orders o JOIN users u ON o.user_id = u.id;
#Text=id |
#Text=email
#Text=| order_id
#Text=----+-------------------+----------
#Text=1 | foo@bar.baz
#Text=1 | foo@bar.baz
#Text=2 | me@hakibenita.com |
#Text=3 | ME@hakibenita.com |
#Text=3 | ME@hakibenita.com |
#Text=The user haki benita registered twice, once with the email ME@hakibenita.com and again with me@hakibenita.com.
40-1	7110-7119	Implement	
40-2	7120-7128	Complete	
40-3	7129-7138	Processes	
40-4	7139-7144	Using	
40-5	7145-7149	WITH	
40-6	7150-7153	and	
40-7	7154-7163	RETURNING	
40-8	7164-7167	Say	
40-9	7168-7171	you	
40-10	7172-7176	have	
40-11	7177-7178	a	
40-12	7179-7184	users	
40-13	7185-7190	table	
40-14	7190-7191	,	
40-15	7192-7195	and	
40-16	7196-7199	you	
40-17	7200-7204	find	
40-18	7205-7209	that	
40-19	7210-7213	you	
40-20	7214-7218	have	
40-21	7219-7223	some	
40-22	7224-7234	duplicates	
40-23	7235-7237	in	
40-24	7238-7241	the	
40-25	7242-7247	table	
40-26	7247-7248	:	
40-27	7249-7254	Table	
40-28	7255-7260	setup	
40-29	7261-7267	CREATE	
40-30	7268-7273	TABLE	
40-31	7274-7279	users	
40-32	7280-7281	(	
40-33	7282-7284	id	
40-34	7285-7291	SERIAL	
40-35	7292-7299	PRIMARY	
40-36	7300-7303	KEY	
40-37	7303-7304	,	
40-38	7305-7310	email	
40-39	7311-7315	TEXT	
40-40	7316-7322	UNIQUE	
40-41	7323-7329	CREATE	
40-42	7330-7335	TABLE	
40-43	7336-7342	orders	
40-44	7343-7344	(	
40-45	7345-7347	id	
40-46	7348-7354	SERIAL	
40-47	7355-7362	PRIMARY	
40-48	7363-7366	KEY	
40-49	7366-7367	,	
40-50	7368-7375	user_id	
40-51	7376-7379	INT	
40-52	7379-7380	,	
40-53	7381-7391	CONSTRAINT	
40-54	7392-7406	orders_user_fk	
40-55	7407-7414	FOREIGN	
40-56	7415-7418	KEY	
40-57	7419-7420	(	
40-58	7420-7427	user_id	
40-59	7427-7428	)	
40-60	7429-7439	REFERENCES	
40-61	7440-7445	USERS	
40-62	7445-7446	(	
40-63	7446-7448	id	
40-64	7448-7449	)	
40-65	7450-7456	INSERT	
40-66	7457-7461	INTO	
40-67	7462-7467	users	
40-68	7468-7469	(	
40-69	7469-7474	email	
40-70	7474-7475	)	
40-71	7476-7482	VALUES	
40-72	7483-7484	(	
40-73	7484-7485	'	
40-74	7485-7488	foo	
40-75	7488-7489	@	
40-76	7489-7496	bar.baz	
40-77	7496-7497	'	
40-78	7497-7498	)	
40-79	7498-7499	,	
40-80	7500-7501	(	
40-81	7501-7502	'	
40-82	7502-7504	me	
40-83	7504-7505	@	
40-84	7505-7519	hakibenita.com	
40-85	7519-7520	'	
40-86	7520-7521	)	
40-87	7521-7522	,	
40-88	7523-7524	(	
40-89	7524-7525	'	
40-90	7525-7527	ME	
40-91	7527-7528	@	
40-92	7528-7542	hakibenita.com	
40-93	7542-7543	'	
40-94	7543-7544	)	
40-95	7544-7545	;	
40-96	7546-7552	INSERT	
40-97	7553-7557	INTO	
40-98	7558-7564	orders	
40-99	7565-7566	(	
40-100	7566-7573	user_id	
40-101	7573-7574	)	
40-102	7575-7581	VALUES	
40-103	7582-7583	(	
40-104	7583-7584	1	
40-105	7584-7585	)	
40-106	7585-7586	,	
40-107	7587-7588	(	
40-108	7588-7589	1	
40-109	7589-7590	)	
40-110	7590-7591	,	
40-111	7592-7593	(	
40-112	7593-7594	2	
40-113	7594-7595	)	
40-114	7595-7596	,	
40-115	7597-7598	(	
40-116	7598-7599	3	
40-117	7599-7600	)	
40-118	7600-7601	,	
40-119	7602-7603	(	
40-120	7603-7604	3	
40-121	7604-7605	)	
40-122	7605-7606	;	
40-123	7607-7609	db	
40-124	7609-7610	=	
40-125	7610-7611	#	
40-126	7612-7618	SELECT	
40-127	7619-7623	u.id	
40-128	7623-7624	,	
40-129	7625-7632	u.email	
40-130	7632-7633	,	
40-131	7634-7638	o.id	
40-132	7639-7641	as	
40-133	7642-7650	order_id	
40-134	7651-7655	FROM	
40-135	7656-7662	orders	
40-136	7663-7664	o	
40-137	7665-7669	JOIN	
40-138	7670-7675	users	
40-139	7676-7677	u	
40-140	7678-7680	ON	
40-141	7681-7690	o.user_id	
40-142	7691-7692	=	
40-143	7693-7697	u.id	
40-144	7697-7698	;	
40-145	7699-7701	id	
40-146	7702-7703	|	
40-147	7704-7709	email	
40-148	7710-7711	|	
40-149	7712-7720	order_id	
40-150	7721-7722	-	
40-151	7722-7723	-	
40-152	7723-7724	-	
40-153	7724-7725	-	
40-154	7725-7726	+	
40-155	7726-7727	-	
40-156	7727-7728	-	
40-157	7728-7729	-	
40-158	7729-7730	-	
40-159	7730-7731	-	
40-160	7731-7732	-	
40-161	7732-7733	-	
40-162	7733-7734	-	
40-163	7734-7735	-	
40-164	7735-7736	-	
40-165	7736-7737	-	
40-166	7737-7738	-	
40-167	7738-7739	-	
40-168	7739-7740	-	
40-169	7740-7741	-	
40-170	7741-7742	-	
40-171	7742-7743	-	
40-172	7743-7744	-	
40-173	7744-7745	-	
40-174	7745-7746	+	
40-175	7746-7747	-	
40-176	7747-7748	-	
40-177	7748-7749	-	
40-178	7749-7750	-	
40-179	7750-7751	-	
40-180	7751-7752	-	
40-181	7752-7753	-	
40-182	7753-7754	-	
40-183	7754-7755	-	
40-184	7755-7756	-	
40-185	7757-7758	1	
40-186	7759-7760	|	
40-187	7761-7764	foo	
40-188	7764-7765	@	
40-189	7765-7772	bar.baz	
40-190	7773-7774	1	
40-191	7775-7776	|	
40-192	7777-7780	foo	
40-193	7780-7781	@	
40-194	7781-7788	bar.baz	
40-195	7789-7790	2	
40-196	7791-7792	|	
40-197	7793-7795	me	
40-198	7795-7796	@	
40-199	7796-7810	hakibenita.com	
40-200	7811-7812	|	
40-201	7813-7814	3	
40-202	7815-7816	|	
40-203	7817-7819	ME	
40-204	7819-7820	@	
40-205	7820-7834	hakibenita.com	
40-206	7835-7836	|	
40-207	7837-7838	3	
40-208	7839-7840	|	
40-209	7841-7843	ME	
40-210	7843-7844	@	
40-211	7844-7858	hakibenita.com	
40-212	7859-7860	|	
40-213	7861-7864	The	
40-214	7865-7869	user	
40-215	7870-7874	haki	
40-216	7875-7881	benita	
40-217	7882-7892	registered	
40-218	7893-7898	twice	
40-219	7898-7899	,	
40-220	7900-7904	once	
40-221	7905-7909	with	
40-222	7910-7913	the	
40-223	7914-7919	email	
40-224	7920-7922	ME	
40-225	7922-7923	@	
40-226	7923-7937	hakibenita.com	
40-227	7938-7941	and	
40-228	7942-7947	again	
40-229	7948-7952	with	
40-230	7953-7955	me	
40-231	7955-7956	@	
40-232	7956-7970	hakibenita.com	
40-233	7970-7971	.	

#Text=Because we didn't normalize the emails when we inserted them into the table, we now have to deal with duplication.
41-1	7972-7979	Because	
41-2	7980-7982	we	
41-3	7983-7989	didn't	
41-4	7990-7999	normalize	
41-5	8000-8003	the	
41-6	8004-8010	emails	
41-7	8011-8015	when	
41-8	8016-8018	we	
41-9	8019-8027	inserted	
41-10	8028-8032	them	
41-11	8033-8037	into	
41-12	8038-8041	the	
41-13	8042-8047	table	
41-14	8047-8048	,	
41-15	8049-8051	we	
41-16	8052-8055	now	
41-17	8056-8060	have	
41-18	8061-8063	to	
41-19	8064-8068	deal	
41-20	8069-8073	with	
41-21	8074-8085	duplication	
41-22	8085-8086	.	

#Text=To consolidate the duplicate users, we want to:
#Text=Identify duplicate users by lower case email
#Text=Update orders to reference one of the duplicate users
#Text=Remove the duplicate users from the users table
#Text=One way to consolidate duplicate users is to use an intermediate table:
#Text=db=# CREATE UNLOGGED TABLE duplicate_users AS
#Text=db-#
#Text=SELECT
#Text=db-#
#Text=lower(email) AS normalized_email,
#Text=db-#
#Text=min(id) AS convert_to_user,
#Text=db-#
#Text=array_remove(ARRAY_AGG(id), min(id)) as convert_from_users
#Text=db-#
#Text=FROM
#Text=db-#
#Text=users
#Text=db-#
#Text=GROUP BY
#Text=db-#
#Text=normalized_email
#Text=db-#
#Text=HAVING
#Text=db-#
#Text=count(*) > 1;
#Text=CREATE TABLE
#Text=db=# SELECT * FROM duplicate_users;
#Text=normalized_email
#Text=| convert_to_user | convert_from_users
#Text=-------------------+-----------------+--------------------
#Text=me@hakibenita.com |
#Text=2 | {3}
#Text=The intermediate table holds a mapping of duplicate users.
42-1	8087-8089	To	
42-2	8090-8101	consolidate	
42-3	8102-8105	the	
42-4	8106-8115	duplicate	
42-5	8116-8121	users	
42-6	8121-8122	,	
42-7	8123-8125	we	
42-8	8126-8130	want	
42-9	8131-8133	to	
42-10	8133-8134	:	
42-11	8135-8143	Identify	
42-12	8144-8153	duplicate	
42-13	8154-8159	users	
42-14	8160-8162	by	
42-15	8163-8168	lower	
42-16	8169-8173	case	
42-17	8174-8179	email	
42-18	8180-8186	Update	
42-19	8187-8193	orders	
42-20	8194-8196	to	
42-21	8197-8206	reference	
42-22	8207-8210	one	
42-23	8211-8213	of	
42-24	8214-8217	the	
42-25	8218-8227	duplicate	
42-26	8228-8233	users	
42-27	8234-8240	Remove	
42-28	8241-8244	the	
42-29	8245-8254	duplicate	
42-30	8255-8260	users	
42-31	8261-8265	from	
42-32	8266-8269	the	
42-33	8270-8275	users	
42-34	8276-8281	table	
42-35	8282-8285	One	
42-36	8286-8289	way	
42-37	8290-8292	to	
42-38	8293-8304	consolidate	
42-39	8305-8314	duplicate	
42-40	8315-8320	users	
42-41	8321-8323	is	
42-42	8324-8326	to	
42-43	8327-8330	use	
42-44	8331-8333	an	
42-45	8334-8346	intermediate	
42-46	8347-8352	table	
42-47	8352-8353	:	
42-48	8354-8356	db	
42-49	8356-8357	=	
42-50	8357-8358	#	
42-51	8359-8365	CREATE	
42-52	8366-8374	UNLOGGED	
42-53	8375-8380	TABLE	
42-54	8381-8396	duplicate_users	
42-55	8397-8399	AS	
42-56	8400-8402	db	
42-57	8402-8403	-	
42-58	8403-8404	#	
42-59	8405-8411	SELECT	
42-60	8412-8414	db	
42-61	8414-8415	-	
42-62	8415-8416	#	
42-63	8417-8422	lower	
42-64	8422-8423	(	
42-65	8423-8428	email	
42-66	8428-8429	)	
42-67	8430-8432	AS	
42-68	8433-8449	normalized_email	
42-69	8449-8450	,	
42-70	8451-8453	db	
42-71	8453-8454	-	
42-72	8454-8455	#	
42-73	8456-8459	min	
42-74	8459-8460	(	
42-75	8460-8462	id	
42-76	8462-8463	)	
42-77	8464-8466	AS	
42-78	8467-8482	convert_to_user	
42-79	8482-8483	,	
42-80	8484-8486	db	
42-81	8486-8487	-	
42-82	8487-8488	#	
42-83	8489-8501	array_remove	
42-84	8501-8502	(	
42-85	8502-8511	ARRAY_AGG	
42-86	8511-8512	(	
42-87	8512-8514	id	
42-88	8514-8515	)	
42-89	8515-8516	,	
42-90	8517-8520	min	
42-91	8520-8521	(	
42-92	8521-8523	id	
42-93	8523-8524	)	
42-94	8524-8525	)	
42-95	8526-8528	as	
42-96	8529-8547	convert_from_users	
42-97	8548-8550	db	
42-98	8550-8551	-	
42-99	8551-8552	#	
42-100	8553-8557	FROM	
42-101	8558-8560	db	
42-102	8560-8561	-	
42-103	8561-8562	#	
42-104	8563-8568	users	
42-105	8569-8571	db	
42-106	8571-8572	-	
42-107	8572-8573	#	
42-108	8574-8579	GROUP	
42-109	8580-8582	BY	
42-110	8583-8585	db	
42-111	8585-8586	-	
42-112	8586-8587	#	
42-113	8588-8604	normalized_email	
42-114	8605-8607	db	
42-115	8607-8608	-	
42-116	8608-8609	#	
42-117	8610-8616	HAVING	
42-118	8617-8619	db	
42-119	8619-8620	-	
42-120	8620-8621	#	
42-121	8622-8627	count	
42-122	8627-8628	(	
42-123	8628-8629	*	
42-124	8629-8630	)	
42-125	8631-8632	>	
42-126	8633-8634	1	
42-127	8634-8635	;	
42-128	8636-8642	CREATE	
42-129	8643-8648	TABLE	
42-130	8649-8651	db	
42-131	8651-8652	=	
42-132	8652-8653	#	
42-133	8654-8660	SELECT	
42-134	8661-8662	*	
42-135	8663-8667	FROM	
42-136	8668-8683	duplicate_users	
42-137	8683-8684	;	
42-138	8685-8701	normalized_email	
42-139	8702-8703	|	
42-140	8704-8719	convert_to_user	
42-141	8720-8721	|	
42-142	8722-8740	convert_from_users	
42-143	8741-8742	-	
42-144	8742-8743	-	
42-145	8743-8744	-	
42-146	8744-8745	-	
42-147	8745-8746	-	
42-148	8746-8747	-	
42-149	8747-8748	-	
42-150	8748-8749	-	
42-151	8749-8750	-	
42-152	8750-8751	-	
42-153	8751-8752	-	
42-154	8752-8753	-	
42-155	8753-8754	-	
42-156	8754-8755	-	
42-157	8755-8756	-	
42-158	8756-8757	-	
42-159	8757-8758	-	
42-160	8758-8759	-	
42-161	8759-8760	-	
42-162	8760-8761	+	
42-163	8761-8762	-	
42-164	8762-8763	-	
42-165	8763-8764	-	
42-166	8764-8765	-	
42-167	8765-8766	-	
42-168	8766-8767	-	
42-169	8767-8768	-	
42-170	8768-8769	-	
42-171	8769-8770	-	
42-172	8770-8771	-	
42-173	8771-8772	-	
42-174	8772-8773	-	
42-175	8773-8774	-	
42-176	8774-8775	-	
42-177	8775-8776	-	
42-178	8776-8777	-	
42-179	8777-8778	-	
42-180	8778-8779	+	
42-181	8779-8780	-	
42-182	8780-8781	-	
42-183	8781-8782	-	
42-184	8782-8783	-	
42-185	8783-8784	-	
42-186	8784-8785	-	
42-187	8785-8786	-	
42-188	8786-8787	-	
42-189	8787-8788	-	
42-190	8788-8789	-	
42-191	8789-8790	-	
42-192	8790-8791	-	
42-193	8791-8792	-	
42-194	8792-8793	-	
42-195	8793-8794	-	
42-196	8794-8795	-	
42-197	8795-8796	-	
42-198	8796-8797	-	
42-199	8797-8798	-	
42-200	8798-8799	-	
42-201	8800-8802	me	
42-202	8802-8803	@	
42-203	8803-8817	hakibenita.com	
42-204	8818-8819	|	
42-205	8820-8821	2	
42-206	8822-8823	|	
42-207	8824-8825	{	
42-208	8825-8826	3	
42-209	8826-8827	}	
42-210	8828-8831	The	
42-211	8832-8844	intermediate	
42-212	8845-8850	table	
42-213	8851-8856	holds	
42-214	8857-8858	a	
42-215	8859-8866	mapping	
42-216	8867-8869	of	
42-217	8870-8879	duplicate	
42-218	8880-8885	users	
42-219	8885-8886	.	

#Text=For each user that appears more than once with the same normalized email address, we define the user with the min ID as the user we convert all duplicates to.
43-1	8887-8890	For	
43-2	8891-8895	each	
43-3	8896-8900	user	
43-4	8901-8905	that	
43-5	8906-8913	appears	
43-6	8914-8918	more	
43-7	8919-8923	than	
43-8	8924-8928	once	
43-9	8929-8933	with	
43-10	8934-8937	the	
43-11	8938-8942	same	
43-12	8943-8953	normalized	
43-13	8954-8959	email	
43-14	8960-8967	address	
43-15	8967-8968	,	
43-16	8969-8971	we	
43-17	8972-8978	define	
43-18	8979-8982	the	
43-19	8983-8987	user	
43-20	8988-8992	with	
43-21	8993-8996	the	
43-22	8997-9000	min	
43-23	9001-9003	ID	
43-24	9004-9006	as	
43-25	9007-9010	the	
43-26	9011-9015	user	
43-27	9016-9018	we	
43-28	9019-9026	convert	
43-29	9027-9030	all	
43-30	9031-9041	duplicates	
43-31	9042-9044	to	
43-32	9044-9045	.	

#Text=The other users are kept in an array column, and all the references to these users will be updated.
44-1	9046-9049	The	
44-2	9050-9055	other	
44-3	9056-9061	users	
44-4	9062-9065	are	
44-5	9066-9070	kept	
44-6	9071-9073	in	
44-7	9074-9076	an	
44-8	9077-9082	array	
44-9	9083-9089	column	
44-10	9089-9090	,	
44-11	9091-9094	and	
44-12	9095-9098	all	
44-13	9099-9102	the	
44-14	9103-9113	references	
44-15	9114-9116	to	
44-16	9117-9122	these	
44-17	9123-9128	users	
44-18	9129-9133	will	
44-19	9134-9136	be	
44-20	9137-9144	updated	
44-21	9144-9145	.	

#Text=Using the intermediate table, we update references of duplicate users in the orders table:
#Text=db=# UPDATE
#Text=db-#
#Text=orders o
#Text=db-# SET
#Text=db-#
#Text=user_id = du.convert_to_user
#Text=db-# FROM
#Text=db-#
#Text=duplicate_users du
#Text=db-# WHERE
#Text=db-#
#Text=o.user_id = ANY(du.convert_from_users);
#Text=UPDATE 2
#Text=Now that there are no more references, we can safely delete the duplicate users from the users table:
#Text=db=# DELETE FROM
#Text=db-#
#Text=users
#Text=db-# WHERE
#Text=db-#
#Text=id IN (
#Text=db(#
#Text=SELECT unnest(convert_from_users)
#Text=db(#
#Text=FROM duplicate_users
#Text=db(#
#Text=DELETE 1
#Text=Notice that we used the function unnest to "transpose" the array, that is, turn each array element into a row.
45-1	9146-9151	Using	
45-2	9152-9155	the	
45-3	9156-9168	intermediate	
45-4	9169-9174	table	
45-5	9174-9175	,	
45-6	9176-9178	we	
45-7	9179-9185	update	
45-8	9186-9196	references	
45-9	9197-9199	of	
45-10	9200-9209	duplicate	
45-11	9210-9215	users	
45-12	9216-9218	in	
45-13	9219-9222	the	
45-14	9223-9229	orders	
45-15	9230-9235	table	
45-16	9235-9236	:	
45-17	9237-9239	db	
45-18	9239-9240	=	
45-19	9240-9241	#	
45-20	9242-9248	UPDATE	
45-21	9249-9251	db	
45-22	9251-9252	-	
45-23	9252-9253	#	
45-24	9254-9260	orders	
45-25	9261-9262	o	
45-26	9263-9265	db	
45-27	9265-9266	-	
45-28	9266-9267	#	
45-29	9268-9271	SET	
45-30	9272-9274	db	
45-31	9274-9275	-	
45-32	9275-9276	#	
45-33	9277-9284	user_id	
45-34	9285-9286	=	
45-35	9287-9305	du.convert_to_user	
45-36	9306-9308	db	
45-37	9308-9309	-	
45-38	9309-9310	#	
45-39	9311-9315	FROM	
45-40	9316-9318	db	
45-41	9318-9319	-	
45-42	9319-9320	#	
45-43	9321-9336	duplicate_users	
45-44	9337-9339	du	
45-45	9340-9342	db	
45-46	9342-9343	-	
45-47	9343-9344	#	
45-48	9345-9350	WHERE	
45-49	9351-9353	db	
45-50	9353-9354	-	
45-51	9354-9355	#	
45-52	9356-9365	o.user_id	
45-53	9366-9367	=	
45-54	9368-9371	ANY	
45-55	9371-9372	(	
45-56	9372-9393	du.convert_from_users	
45-57	9393-9394	)	
45-58	9394-9395	;	
45-59	9396-9402	UPDATE	
45-60	9403-9404	2	
45-61	9405-9408	Now	
45-62	9409-9413	that	
45-63	9414-9419	there	
45-64	9420-9423	are	
45-65	9424-9426	no	
45-66	9427-9431	more	
45-67	9432-9442	references	
45-68	9442-9443	,	
45-69	9444-9446	we	
45-70	9447-9450	can	
45-71	9451-9457	safely	
45-72	9458-9464	delete	
45-73	9465-9468	the	
45-74	9469-9478	duplicate	
45-75	9479-9484	users	
45-76	9485-9489	from	
45-77	9490-9493	the	
45-78	9494-9499	users	
45-79	9500-9505	table	
45-80	9505-9506	:	
45-81	9507-9509	db	
45-82	9509-9510	=	
45-83	9510-9511	#	
45-84	9512-9518	DELETE	
45-85	9519-9523	FROM	
45-86	9524-9526	db	
45-87	9526-9527	-	
45-88	9527-9528	#	
45-89	9529-9534	users	
45-90	9535-9537	db	
45-91	9537-9538	-	
45-92	9538-9539	#	
45-93	9540-9545	WHERE	
45-94	9546-9548	db	
45-95	9548-9549	-	
45-96	9549-9550	#	
45-97	9551-9553	id	
45-98	9554-9556	IN	
45-99	9557-9558	(	
45-100	9559-9561	db	
45-101	9561-9562	(	
45-102	9562-9563	#	
45-103	9564-9570	SELECT	
45-104	9571-9577	unnest	
45-105	9577-9578	(	
45-106	9578-9596	convert_from_users	
45-107	9596-9597	)	
45-108	9598-9600	db	
45-109	9600-9601	(	
45-110	9601-9602	#	
45-111	9603-9607	FROM	
45-112	9608-9623	duplicate_users	
45-113	9624-9626	db	
45-114	9626-9627	(	
45-115	9627-9628	#	
45-116	9629-9635	DELETE	
45-117	9636-9637	1	
45-118	9638-9644	Notice	
45-119	9645-9649	that	
45-120	9650-9652	we	
45-121	9653-9657	used	
45-122	9658-9661	the	
45-123	9662-9670	function	
45-124	9671-9677	unnest	
45-125	9678-9680	to	
45-126	9681-9682	"	
45-127	9682-9691	transpose	
45-128	9691-9692	"	
45-129	9693-9696	the	
45-130	9697-9702	array	
45-131	9702-9703	,	
45-132	9704-9708	that	
45-133	9709-9711	is	
45-134	9711-9712	,	
45-135	9713-9717	turn	
45-136	9718-9722	each	
45-137	9723-9728	array	
45-138	9729-9736	element	
45-139	9737-9741	into	
45-140	9742-9743	a	
45-141	9744-9747	row	
45-142	9747-9748	.	

#Text=This is the result:
#Text=db=# SELECT u.id, u.email, o.id as order_id
#Text=db-# FROM orders o JOIN users u ON o.user_id = u.id;
#Text=id |
#Text=email
#Text=| order_id
#Text=----+-------------------+----------
#Text=1 | foo@bar.baz
#Text=1 | foo@bar.baz
#Text=2 | me@hakibenita.com |
#Text=2 | me@hakibenita.com |
#Text=2 | me@hakibenita.com |
#Text=Nice, all occurrences of user 3 (ME@hakibenita.com) are converted to user 2 (me@hakibenita.com).
46-1	9749-9753	This	
46-2	9754-9756	is	
46-3	9757-9760	the	
46-4	9761-9767	result	
46-5	9767-9768	:	
46-6	9769-9771	db	
46-7	9771-9772	=	
46-8	9772-9773	#	
46-9	9774-9780	SELECT	
46-10	9781-9785	u.id	
46-11	9785-9786	,	
46-12	9787-9794	u.email	
46-13	9794-9795	,	
46-14	9796-9800	o.id	
46-15	9801-9803	as	
46-16	9804-9812	order_id	
46-17	9813-9815	db	
46-18	9815-9816	-	
46-19	9816-9817	#	
46-20	9818-9822	FROM	
46-21	9823-9829	orders	
46-22	9830-9831	o	
46-23	9832-9836	JOIN	
46-24	9837-9842	users	
46-25	9843-9844	u	
46-26	9845-9847	ON	
46-27	9848-9857	o.user_id	
46-28	9858-9859	=	
46-29	9860-9864	u.id	
46-30	9864-9865	;	
46-31	9866-9868	id	
46-32	9869-9870	|	
46-33	9871-9876	email	
46-34	9877-9878	|	
46-35	9879-9887	order_id	
46-36	9888-9889	-	
46-37	9889-9890	-	
46-38	9890-9891	-	
46-39	9891-9892	-	
46-40	9892-9893	+	
46-41	9893-9894	-	
46-42	9894-9895	-	
46-43	9895-9896	-	
46-44	9896-9897	-	
46-45	9897-9898	-	
46-46	9898-9899	-	
46-47	9899-9900	-	
46-48	9900-9901	-	
46-49	9901-9902	-	
46-50	9902-9903	-	
46-51	9903-9904	-	
46-52	9904-9905	-	
46-53	9905-9906	-	
46-54	9906-9907	-	
46-55	9907-9908	-	
46-56	9908-9909	-	
46-57	9909-9910	-	
46-58	9910-9911	-	
46-59	9911-9912	-	
46-60	9912-9913	+	
46-61	9913-9914	-	
46-62	9914-9915	-	
46-63	9915-9916	-	
46-64	9916-9917	-	
46-65	9917-9918	-	
46-66	9918-9919	-	
46-67	9919-9920	-	
46-68	9920-9921	-	
46-69	9921-9922	-	
46-70	9922-9923	-	
46-71	9924-9925	1	
46-72	9926-9927	|	
46-73	9928-9931	foo	
46-74	9931-9932	@	
46-75	9932-9939	bar.baz	
46-76	9940-9941	1	
46-77	9942-9943	|	
46-78	9944-9947	foo	
46-79	9947-9948	@	
46-80	9948-9955	bar.baz	
46-81	9956-9957	2	
46-82	9958-9959	|	
46-83	9960-9962	me	
46-84	9962-9963	@	
46-85	9963-9977	hakibenita.com	
46-86	9978-9979	|	
46-87	9980-9981	2	
46-88	9982-9983	|	
46-89	9984-9986	me	
46-90	9986-9987	@	
46-91	9987-10001	hakibenita.com	
46-92	10002-10003	|	
46-93	10004-10005	2	
46-94	10006-10007	|	
46-95	10008-10010	me	
46-96	10010-10011	@	
46-97	10011-10025	hakibenita.com	
46-98	10026-10027	|	
46-99	10028-10032	Nice	
46-100	10032-10033	,	
46-101	10034-10037	all	
46-102	10038-10049	occurrences	
46-103	10050-10052	of	
46-104	10053-10057	user	
46-105	10058-10059	3	
46-106	10060-10061	(	
46-107	10061-10063	ME	
46-108	10063-10064	@	
46-109	10064-10078	hakibenita.com	
46-110	10078-10079	)	
46-111	10080-10083	are	
46-112	10084-10093	converted	
46-113	10094-10096	to	
46-114	10097-10101	user	
46-115	10102-10103	2	
46-116	10104-10105	(	
46-117	10105-10107	me	
46-118	10107-10108	@	
46-119	10108-10122	hakibenita.com	
46-120	10122-10123	)	
46-121	10123-10124	.	

#Text=We can also verify that the duplicate users were deleted from the users table:
#Text=db=# SELECT * FROM users;
#Text=id |
#Text=email
#Text=----+-------------------
#Text=1 | foo@bar.baz
#Text=2 | me@hakibenita.com
#Text=Now we can get rid of the intermediate table:
#Text=db=# DROP TABLE duplicate_users;
#Text=DROP TABLE
#Text=This is fine, but very long and needs cleaning up!
47-1	10125-10127	We	
47-2	10128-10131	can	
47-3	10132-10136	also	
47-4	10137-10143	verify	
47-5	10144-10148	that	
47-6	10149-10152	the	
47-7	10153-10162	duplicate	
47-8	10163-10168	users	
47-9	10169-10173	were	
47-10	10174-10181	deleted	
47-11	10182-10186	from	
47-12	10187-10190	the	
47-13	10191-10196	users	
47-14	10197-10202	table	
47-15	10202-10203	:	
47-16	10204-10206	db	
47-17	10206-10207	=	
47-18	10207-10208	#	
47-19	10209-10215	SELECT	
47-20	10216-10217	*	
47-21	10218-10222	FROM	
47-22	10223-10228	users	
47-23	10228-10229	;	
47-24	10230-10232	id	
47-25	10233-10234	|	
47-26	10235-10240	email	
47-27	10241-10242	-	
47-28	10242-10243	-	
47-29	10243-10244	-	
47-30	10244-10245	-	
47-31	10245-10246	+	
47-32	10246-10247	-	
47-33	10247-10248	-	
47-34	10248-10249	-	
47-35	10249-10250	-	
47-36	10250-10251	-	
47-37	10251-10252	-	
47-38	10252-10253	-	
47-39	10253-10254	-	
47-40	10254-10255	-	
47-41	10255-10256	-	
47-42	10256-10257	-	
47-43	10257-10258	-	
47-44	10258-10259	-	
47-45	10259-10260	-	
47-46	10260-10261	-	
47-47	10261-10262	-	
47-48	10262-10263	-	
47-49	10263-10264	-	
47-50	10264-10265	-	
47-51	10266-10267	1	
47-52	10268-10269	|	
47-53	10270-10273	foo	
47-54	10273-10274	@	
47-55	10274-10281	bar.baz	
47-56	10282-10283	2	
47-57	10284-10285	|	
47-58	10286-10288	me	
47-59	10288-10289	@	
47-60	10289-10303	hakibenita.com	
47-61	10304-10307	Now	
47-62	10308-10310	we	
47-63	10311-10314	can	
47-64	10315-10318	get	
47-65	10319-10322	rid	
47-66	10323-10325	of	
47-67	10326-10329	the	
47-68	10330-10342	intermediate	
47-69	10343-10348	table	
47-70	10348-10349	:	
47-71	10350-10352	db	
47-72	10352-10353	=	
47-73	10353-10354	#	
47-74	10355-10359	DROP	
47-75	10360-10365	TABLE	
47-76	10366-10381	duplicate_users	
47-77	10381-10382	;	
47-78	10383-10387	DROP	
47-79	10388-10393	TABLE	
47-80	10394-10398	This	
47-81	10399-10401	is	
47-82	10402-10406	fine	
47-83	10406-10407	,	
47-84	10408-10411	but	
47-85	10412-10416	very	
47-86	10417-10421	long	
47-87	10422-10425	and	
47-88	10426-10431	needs	
47-89	10432-10440	cleaning	
47-90	10441-10443	up	
47-91	10443-10444	!	

#Text=Is there a better way?
48-1	10445-10447	Is	
48-2	10448-10453	there	
48-3	10454-10455	a	
48-4	10456-10462	better	
48-5	10463-10466	way	
48-6	10466-10467	?	

#Text=Using Common Table Expressions (CTE)
#Text=Using Common Table Expressions, also known as the WITH clause, we can perform the entire process with just one SQL statement:
#Text=WITH duplicate_users AS (
#Text=SELECT
#Text=min(id) AS convert_to_user,
#Text=array_remove(ARRAY_AGG(id), min(id)) as convert_from_users
#Text=FROM
#Text=users
#Text=GROUP BY
#Text=lower(email)
#Text=HAVING
#Text=count(*) > 1
#Text=update_orders_of_duplicate_users AS (
#Text=UPDATE
#Text=orders o
#Text=SET
#Text=user_id = du.convert_to_user
#Text=FROM
#Text=duplicate_users du
#Text=WHERE
#Text=o.user_id = ANY(du.convert_from_users)
#Text=DELETE FROM
#Text=users
#Text=WHERE
#Text=id IN (
#Text=SELECT
#Text=unnest(convert_from_users)
#Text=FROM
#Text=duplicate_users
#Text=Instead of creating the intermediate table, we create a common table expression and reuse it multiple times.
49-1	10468-10473	Using	
49-2	10474-10480	Common	
49-3	10481-10486	Table	
49-4	10487-10498	Expressions	
49-5	10499-10500	(	
49-6	10500-10503	CTE	
49-7	10503-10504	)	
49-8	10505-10510	Using	
49-9	10511-10517	Common	
49-10	10518-10523	Table	
49-11	10524-10535	Expressions	
49-12	10535-10536	,	
49-13	10537-10541	also	
49-14	10542-10547	known	
49-15	10548-10550	as	
49-16	10551-10554	the	
49-17	10555-10559	WITH	
49-18	10560-10566	clause	
49-19	10566-10567	,	
49-20	10568-10570	we	
49-21	10571-10574	can	
49-22	10575-10582	perform	
49-23	10583-10586	the	
49-24	10587-10593	entire	
49-25	10594-10601	process	
49-26	10602-10606	with	
49-27	10607-10611	just	
49-28	10612-10615	one	
49-29	10616-10619	SQL	
49-30	10620-10629	statement	
49-31	10629-10630	:	
49-32	10631-10635	WITH	
49-33	10636-10651	duplicate_users	
49-34	10652-10654	AS	
49-35	10655-10656	(	
49-36	10657-10663	SELECT	
49-37	10664-10667	min	
49-38	10667-10668	(	
49-39	10668-10670	id	
49-40	10670-10671	)	
49-41	10672-10674	AS	
49-42	10675-10690	convert_to_user	
49-43	10690-10691	,	
49-44	10692-10704	array_remove	
49-45	10704-10705	(	
49-46	10705-10714	ARRAY_AGG	
49-47	10714-10715	(	
49-48	10715-10717	id	
49-49	10717-10718	)	
49-50	10718-10719	,	
49-51	10720-10723	min	
49-52	10723-10724	(	
49-53	10724-10726	id	
49-54	10726-10727	)	
49-55	10727-10728	)	
49-56	10729-10731	as	
49-57	10732-10750	convert_from_users	
49-58	10751-10755	FROM	
49-59	10756-10761	users	
49-60	10762-10767	GROUP	
49-61	10768-10770	BY	
49-62	10771-10776	lower	
49-63	10776-10777	(	
49-64	10777-10782	email	
49-65	10782-10783	)	
49-66	10784-10790	HAVING	
49-67	10791-10796	count	
49-68	10796-10797	(	
49-69	10797-10798	*	
49-70	10798-10799	)	
49-71	10800-10801	>	
49-72	10802-10803	1	
49-73	10804-10836	update_orders_of_duplicate_users	
49-74	10837-10839	AS	
49-75	10840-10841	(	
49-76	10842-10848	UPDATE	
49-77	10849-10855	orders	
49-78	10856-10857	o	
49-79	10858-10861	SET	
49-80	10862-10869	user_id	
49-81	10870-10871	=	
49-82	10872-10890	du.convert_to_user	
49-83	10891-10895	FROM	
49-84	10896-10911	duplicate_users	
49-85	10912-10914	du	
49-86	10915-10920	WHERE	
49-87	10921-10930	o.user_id	
49-88	10931-10932	=	
49-89	10933-10936	ANY	
49-90	10936-10937	(	
49-91	10937-10958	du.convert_from_users	
49-92	10958-10959	)	
49-93	10960-10966	DELETE	
49-94	10967-10971	FROM	
49-95	10972-10977	users	
49-96	10978-10983	WHERE	
49-97	10984-10986	id	
49-98	10987-10989	IN	
49-99	10990-10991	(	
49-100	10992-10998	SELECT	
49-101	10999-11005	unnest	
49-102	11005-11006	(	
49-103	11006-11024	convert_from_users	
49-104	11024-11025	)	
49-105	11026-11030	FROM	
49-106	11031-11046	duplicate_users	
49-107	11047-11054	Instead	
49-108	11055-11057	of	
49-109	11058-11066	creating	
49-110	11067-11070	the	
49-111	11071-11083	intermediate	
49-112	11084-11089	table	
49-113	11089-11090	,	
49-114	11091-11093	we	
49-115	11094-11100	create	
49-116	11101-11102	a	
49-117	11103-11109	common	
49-118	11110-11115	table	
49-119	11116-11126	expression	
49-120	11127-11130	and	
49-121	11131-11136	reuse	
49-122	11137-11139	it	
49-123	11140-11148	multiple	
49-124	11149-11154	times	
49-125	11154-11155	.	

#Text=Returning Results From CTE
#Text=A nice feature of executing DML inside a WITH clause, is that you can return data from it using the RETURNING keyword.
50-1	11156-11165	Returning	
50-2	11166-11173	Results	
50-3	11174-11178	From	
50-4	11179-11182	CTE	
50-5	11183-11184	A	
50-6	11185-11189	nice	
50-7	11190-11197	feature	
50-8	11198-11200	of	
50-9	11201-11210	executing	
50-10	11211-11214	DML	
50-11	11215-11221	inside	
50-12	11222-11223	a	
50-13	11224-11228	WITH	
50-14	11229-11235	clause	
50-15	11235-11236	,	
50-16	11237-11239	is	
50-17	11240-11244	that	
50-18	11245-11248	you	
50-19	11249-11252	can	
50-20	11253-11259	return	
50-21	11260-11264	data	
50-22	11265-11269	from	
50-23	11270-11272	it	
50-24	11273-11278	using	
50-25	11279-11282	the	
50-26	11283-11292	RETURNING	
50-27	11293-11300	keyword	
50-28	11300-11301	.	

#Text=For example, let's report the number of updated and deleted rows:
#Text=WITH duplicate_users AS (
#Text=SELECT
#Text=min(id) AS convert_to_user,
#Text=array_remove(ARRAY_AGG(id), min(id)) as convert_from_users
#Text=FROM
#Text=users
#Text=GROUP BY
#Text=lower(email)
#Text=HAVING
#Text=count(*) > 1
#Text=update_orders_of_duplicate_users AS (
#Text=UPDATE
#Text=orders o
#Text=SET
#Text=user_id = du.convert_to_user
#Text=FROM
#Text=duplicate_users du
#Text=WHERE
#Text=o.user_id = ANY(du.convert_from_users)
#Text=RETURNING o.id
#Text=delete_duplicate_user AS (
#Text=DELETE FROM
#Text=users
#Text=WHERE
#Text=id IN (
#Text=SELECT unnest(convert_from_users)
#Text=FROM duplicate_users
#Text=RETURNING id
#Text=SELECT
#Text=(SELECT count(*) FROM update_orders_of_duplicate_users) AS orders_updated,
#Text=(SELECT count(*) FROM delete_duplicate_user) AS users_deleted
#Text=This is the result:
#Text=orders_updated | users_deleted
#Text=----------------+---------------
#Text=2 |
#Text=The main appeal of this approach is that the entire process is executed in a single command, so no need to manage a transaction or worry about cleaning up the intermediate table if the process fails.
51-1	11302-11305	For	
51-2	11306-11313	example	
51-3	11313-11314	,	
51-4	11315-11320	let's	
51-5	11321-11327	report	
51-6	11328-11331	the	
51-7	11332-11338	number	
51-8	11339-11341	of	
51-9	11342-11349	updated	
51-10	11350-11353	and	
51-11	11354-11361	deleted	
51-12	11362-11366	rows	
51-13	11366-11367	:	
51-14	11368-11372	WITH	
51-15	11373-11388	duplicate_users	
51-16	11389-11391	AS	
51-17	11392-11393	(	
51-18	11394-11400	SELECT	
51-19	11401-11404	min	
51-20	11404-11405	(	
51-21	11405-11407	id	
51-22	11407-11408	)	
51-23	11409-11411	AS	
51-24	11412-11427	convert_to_user	
51-25	11427-11428	,	
51-26	11429-11441	array_remove	
51-27	11441-11442	(	
51-28	11442-11451	ARRAY_AGG	
51-29	11451-11452	(	
51-30	11452-11454	id	
51-31	11454-11455	)	
51-32	11455-11456	,	
51-33	11457-11460	min	
51-34	11460-11461	(	
51-35	11461-11463	id	
51-36	11463-11464	)	
51-37	11464-11465	)	
51-38	11466-11468	as	
51-39	11469-11487	convert_from_users	
51-40	11488-11492	FROM	
51-41	11493-11498	users	
51-42	11499-11504	GROUP	
51-43	11505-11507	BY	
51-44	11508-11513	lower	
51-45	11513-11514	(	
51-46	11514-11519	email	
51-47	11519-11520	)	
51-48	11521-11527	HAVING	
51-49	11528-11533	count	
51-50	11533-11534	(	
51-51	11534-11535	*	
51-52	11535-11536	)	
51-53	11537-11538	>	
51-54	11539-11540	1	
51-55	11541-11573	update_orders_of_duplicate_users	
51-56	11574-11576	AS	
51-57	11577-11578	(	
51-58	11579-11585	UPDATE	
51-59	11586-11592	orders	
51-60	11593-11594	o	
51-61	11595-11598	SET	
51-62	11599-11606	user_id	
51-63	11607-11608	=	
51-64	11609-11627	du.convert_to_user	
51-65	11628-11632	FROM	
51-66	11633-11648	duplicate_users	
51-67	11649-11651	du	
51-68	11652-11657	WHERE	
51-69	11658-11667	o.user_id	
51-70	11668-11669	=	
51-71	11670-11673	ANY	
51-72	11673-11674	(	
51-73	11674-11695	du.convert_from_users	
51-74	11695-11696	)	
51-75	11697-11706	RETURNING	
51-76	11707-11711	o.id	
51-77	11712-11733	delete_duplicate_user	
51-78	11734-11736	AS	
51-79	11737-11738	(	
51-80	11739-11745	DELETE	
51-81	11746-11750	FROM	
51-82	11751-11756	users	
51-83	11757-11762	WHERE	
51-84	11763-11765	id	
51-85	11766-11768	IN	
51-86	11769-11770	(	
51-87	11771-11777	SELECT	
51-88	11778-11784	unnest	
51-89	11784-11785	(	
51-90	11785-11803	convert_from_users	
51-91	11803-11804	)	
51-92	11805-11809	FROM	
51-93	11810-11825	duplicate_users	
51-94	11826-11835	RETURNING	
51-95	11836-11838	id	
51-96	11839-11845	SELECT	
51-97	11846-11847	(	
51-98	11847-11853	SELECT	
51-99	11854-11859	count	
51-100	11859-11860	(	
51-101	11860-11861	*	
51-102	11861-11862	)	
51-103	11863-11867	FROM	
51-104	11868-11900	update_orders_of_duplicate_users	
51-105	11900-11901	)	
51-106	11902-11904	AS	
51-107	11905-11919	orders_updated	
51-108	11919-11920	,	
51-109	11921-11922	(	
51-110	11922-11928	SELECT	
51-111	11929-11934	count	
51-112	11934-11935	(	
51-113	11935-11936	*	
51-114	11936-11937	)	
51-115	11938-11942	FROM	
51-116	11943-11964	delete_duplicate_user	
51-117	11964-11965	)	
51-118	11966-11968	AS	
51-119	11969-11982	users_deleted	
51-120	11983-11987	This	
51-121	11988-11990	is	
51-122	11991-11994	the	
51-123	11995-12001	result	
51-124	12001-12002	:	
51-125	12003-12017	orders_updated	
51-126	12018-12019	|	
51-127	12020-12033	users_deleted	
51-128	12034-12035	-	
51-129	12035-12036	-	
51-130	12036-12037	-	
51-131	12037-12038	-	
51-132	12038-12039	-	
51-133	12039-12040	-	
51-134	12040-12041	-	
51-135	12041-12042	-	
51-136	12042-12043	-	
51-137	12043-12044	-	
51-138	12044-12045	-	
51-139	12045-12046	-	
51-140	12046-12047	-	
51-141	12047-12048	-	
51-142	12048-12049	-	
51-143	12049-12050	-	
51-144	12050-12051	+	
51-145	12051-12052	-	
51-146	12052-12053	-	
51-147	12053-12054	-	
51-148	12054-12055	-	
51-149	12055-12056	-	
51-150	12056-12057	-	
51-151	12057-12058	-	
51-152	12058-12059	-	
51-153	12059-12060	-	
51-154	12060-12061	-	
51-155	12061-12062	-	
51-156	12062-12063	-	
51-157	12063-12064	-	
51-158	12064-12065	-	
51-159	12065-12066	-	
51-160	12067-12068	2	
51-161	12069-12070	|	
51-162	12071-12074	The	
51-163	12075-12079	main	
51-164	12080-12086	appeal	
51-165	12087-12089	of	
51-166	12090-12094	this	
51-167	12095-12103	approach	
51-168	12104-12106	is	
51-169	12107-12111	that	
51-170	12112-12115	the	
51-171	12116-12122	entire	
51-172	12123-12130	process	
51-173	12131-12133	is	
51-174	12134-12142	executed	
51-175	12143-12145	in	
51-176	12146-12147	a	
51-177	12148-12154	single	
51-178	12155-12162	command	
51-179	12162-12163	,	
51-180	12164-12166	so	
51-181	12167-12169	no	
51-182	12170-12174	need	
51-183	12175-12177	to	
51-184	12178-12184	manage	
51-185	12185-12186	a	
51-186	12187-12198	transaction	
51-187	12199-12201	or	
51-188	12202-12207	worry	
51-189	12208-12213	about	
51-190	12214-12222	cleaning	
51-191	12223-12225	up	
51-192	12226-12229	the	
51-193	12230-12242	intermediate	
51-194	12243-12248	table	
51-195	12249-12251	if	
51-196	12252-12255	the	
51-197	12256-12263	process	
51-198	12264-12269	fails	
51-199	12269-12270	.	

#Text=CAUTION: A reader on Reddit pointed me to a possibly unpredictable behavior of executing DML in common table expressions:
#Text=The sub-statements in WITH are executed concurrently with each other and with the main query.
52-1	12271-12278	CAUTION	
52-2	12278-12279	:	
52-3	12280-12281	A	
52-4	12282-12288	reader	
52-5	12289-12291	on	
52-6	12292-12298	Reddit	
52-7	12299-12306	pointed	
52-8	12307-12309	me	
52-9	12310-12312	to	
52-10	12313-12314	a	
52-11	12315-12323	possibly	
52-12	12324-12337	unpredictable	
52-13	12338-12346	behavior	
52-14	12347-12349	of	
52-15	12350-12359	executing	
52-16	12360-12363	DML	
52-17	12364-12366	in	
52-18	12367-12373	common	
52-19	12374-12379	table	
52-20	12380-12391	expressions	
52-21	12391-12392	:	
52-22	12393-12396	The	
52-23	12397-12411	sub-statements	
52-24	12412-12414	in	
52-25	12415-12419	WITH	
52-26	12420-12423	are	
52-27	12424-12432	executed	
52-28	12433-12445	concurrently	
52-29	12446-12450	with	
52-30	12451-12455	each	
52-31	12456-12461	other	
52-32	12462-12465	and	
52-33	12466-12470	with	
52-34	12471-12474	the	
52-35	12475-12479	main	
52-36	12480-12485	query	
52-37	12485-12486	.	

#Text=Therefore, when using data-modifying statements in WITH, the order in which the specified updates actually happen is unpredictable
#Text=This means you cannot rely on the order in which independent sub-statements are executed.
53-1	12487-12496	Therefore	
53-2	12496-12497	,	
53-3	12498-12502	when	
53-4	12503-12508	using	
53-5	12509-12523	data-modifying	
53-6	12524-12534	statements	
53-7	12535-12537	in	
53-8	12538-12542	WITH	
53-9	12542-12543	,	
53-10	12544-12547	the	
53-11	12548-12553	order	
53-12	12554-12556	in	
53-13	12557-12562	which	
53-14	12563-12566	the	
53-15	12567-12576	specified	
53-16	12577-12584	updates	
53-17	12585-12593	actually	
53-18	12594-12600	happen	
53-19	12601-12603	is	
53-20	12604-12617	unpredictable	
53-21	12618-12622	This	
53-22	12623-12628	means	
53-23	12629-12632	you	
53-24	12633-12639	cannot	
53-25	12640-12644	rely	
53-26	12645-12647	on	
53-27	12648-12651	the	
53-28	12652-12657	order	
53-29	12658-12660	in	
53-30	12661-12666	which	
53-31	12667-12678	independent	
53-32	12679-12693	sub-statements	
53-33	12694-12697	are	
53-34	12698-12706	executed	
53-35	12706-12707	.	

#Text=It seems that when there is a dependency between sub-statements, like in the example above, you can rely on a dependent sub-statement to execute before it is being used.
54-1	12708-12710	It	
54-2	12711-12716	seems	
54-3	12717-12721	that	
54-4	12722-12726	when	
54-5	12727-12732	there	
54-6	12733-12735	is	
54-7	12736-12737	a	
54-8	12738-12748	dependency	
54-9	12749-12756	between	
54-10	12757-12771	sub-statements	
54-11	12771-12772	,	
54-12	12773-12777	like	
54-13	12778-12780	in	
54-14	12781-12784	the	
54-15	12785-12792	example	
54-16	12793-12798	above	
54-17	12798-12799	,	
54-18	12800-12803	you	
54-19	12804-12807	can	
54-20	12808-12812	rely	
54-21	12813-12815	on	
54-22	12816-12817	a	
54-23	12818-12827	dependent	
54-24	12828-12841	sub-statement	
54-25	12842-12844	to	
54-26	12845-12852	execute	
54-27	12853-12859	before	
54-28	12860-12862	it	
54-29	12863-12865	is	
54-30	12866-12871	being	
54-31	12872-12876	used	
54-32	12876-12877	.	

#Text=Avoid Indexes on Columns With Low Selectivity
#Text=Say you have a registration process where users sign up with an email address.
55-1	12878-12883	Avoid	
55-2	12884-12891	Indexes	
55-3	12892-12894	on	
55-4	12895-12902	Columns	
55-5	12903-12907	With	
55-6	12908-12911	Low	
55-7	12912-12923	Selectivity	
55-8	12924-12927	Say	
55-9	12928-12931	you	
55-10	12932-12936	have	
55-11	12937-12938	a	
55-12	12939-12951	registration	
55-13	12952-12959	process	
55-14	12960-12965	where	
55-15	12966-12971	users	
55-16	12972-12976	sign	
55-17	12977-12979	up	
55-18	12980-12984	with	
55-19	12985-12987	an	
55-20	12988-12993	email	
55-21	12994-13001	address	
55-22	13001-13002	.	

#Text=To activate the account, they have to verify their email.
56-1	13003-13005	To	
56-2	13006-13014	activate	
56-3	13015-13018	the	
56-4	13019-13026	account	
56-5	13026-13027	,	
56-6	13028-13032	they	
56-7	13033-13037	have	
56-8	13038-13040	to	
56-9	13041-13047	verify	
56-10	13048-13053	their	
56-11	13054-13059	email	
56-12	13059-13060	.	

#Text=Your table can look like this:
#Text=db=# CREATE TABLE users (
#Text=db-#
#Text=id serial,
#Text=db-#
#Text=username text,
#Text=db-#
#Text=activated boolean
#Text=db-#);
#Text=CREATE TABLE
#Text=Most of your users are good citizens, they sign up with a valid email and immediately activate the account.
57-1	13061-13065	Your	
57-2	13066-13071	table	
57-3	13072-13075	can	
57-4	13076-13080	look	
57-5	13081-13085	like	
57-6	13086-13090	this	
57-7	13090-13091	:	
57-8	13092-13094	db	
57-9	13094-13095	=	
57-10	13095-13096	#	
57-11	13097-13103	CREATE	
57-12	13104-13109	TABLE	
57-13	13110-13115	users	
57-14	13116-13117	(	
57-15	13118-13120	db	
57-16	13120-13121	-	
57-17	13121-13122	#	
57-18	13123-13125	id	
57-19	13126-13132	serial	
57-20	13132-13133	,	
57-21	13134-13136	db	
57-22	13136-13137	-	
57-23	13137-13138	#	
57-24	13139-13147	username	
57-25	13148-13152	text	
57-26	13152-13153	,	
57-27	13154-13156	db	
57-28	13156-13157	-	
57-29	13157-13158	#	
57-30	13159-13168	activated	
57-31	13169-13176	boolean	
57-32	13177-13179	db	
57-33	13179-13180	-	
57-34	13180-13181	#	
57-35	13181-13182	)	
57-36	13182-13183	;	
57-37	13184-13190	CREATE	
57-38	13191-13196	TABLE	
57-39	13197-13201	Most	
57-40	13202-13204	of	
57-41	13205-13209	your	
57-42	13210-13215	users	
57-43	13216-13219	are	
57-44	13220-13224	good	
57-45	13225-13233	citizens	
57-46	13233-13234	,	
57-47	13235-13239	they	
57-48	13240-13244	sign	
57-49	13245-13247	up	
57-50	13248-13252	with	
57-51	13253-13254	a	
57-52	13255-13260	valid	
57-53	13261-13266	email	
57-54	13267-13270	and	
57-55	13271-13282	immediately	
57-56	13283-13291	activate	
57-57	13292-13295	the	
57-58	13296-13303	account	
57-59	13303-13304	.	

#Text=Let's populate the table with user data, where roughly 90% of the users are activated:
#Text=db=# INSERT INTO users (username, activated)
#Text=db-# SELECT
#Text=db-#
#Text=md5(random()::text) AS username,
#Text=db-#
#Text=random() < 0.9 AS activated
#Text=db-# FROM
#Text=db-#
#Text=generate_series(1, 1000000);
#Text=INSERT 0 1000000
#Text=db=# SELECT activated, count(*) FROM users GROUP BY activated;
#Text=activated | count
#Text=-----------+--------
#Text=| 102567
#Text=| 897433
#Text=db=# VACUUM ANALYZE users;
#Text=VACUUM
#Text=To query for activated and unactivated users, you might be tempted to create an index on the column activated:
#Text=db=# CREATE INDEX users_activated_ix ON users(activated);
#Text=CREATE INDEX
#Text=When you try to query unactivated users, the database is using the index:
#Text=db=# EXPLAIN SELECT * FROM users WHERE NOT activated;
#Text=QUERY PLAN
#Text=--------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on users
#Text=(cost=1923.32..11282.99 rows=102567 width=38)
#Text=Filter: (NOT activated)
#Text=Bitmap Index Scan on users_activated_ix
#Text=(cost=0.00..1897.68 rows=102567 width=0)
#Text=Index Cond: (activated = false)
#Text=The database estimated that the filter will result in 102,567 which are roughly 10% of the table.
58-1	13305-13310	Let's	
58-2	13311-13319	populate	
58-3	13320-13323	the	
58-4	13324-13329	table	
58-5	13330-13334	with	
58-6	13335-13339	user	
58-7	13340-13344	data	
58-8	13344-13345	,	
58-9	13346-13351	where	
58-10	13352-13359	roughly	
58-11	13360-13363	90%	
58-12	13364-13366	of	
58-13	13367-13370	the	
58-14	13371-13376	users	
58-15	13377-13380	are	
58-16	13381-13390	activated	
58-17	13390-13391	:	
58-18	13392-13394	db	
58-19	13394-13395	=	
58-20	13395-13396	#	
58-21	13397-13403	INSERT	
58-22	13404-13408	INTO	
58-23	13409-13414	users	
58-24	13415-13416	(	
58-25	13416-13424	username	
58-26	13424-13425	,	
58-27	13426-13435	activated	
58-28	13435-13436	)	
58-29	13437-13439	db	
58-30	13439-13440	-	
58-31	13440-13441	#	
58-32	13442-13448	SELECT	
58-33	13449-13451	db	
58-34	13451-13452	-	
58-35	13452-13453	#	
58-36	13454-13457	md5	
58-37	13457-13458	(	
58-38	13458-13464	random	
58-39	13464-13465	(	
58-40	13465-13466	)	
58-41	13466-13467	:	
58-42	13467-13468	:	
58-43	13468-13472	text	
58-44	13472-13473	)	
58-45	13474-13476	AS	
58-46	13477-13485	username	
58-47	13485-13486	,	
58-48	13487-13489	db	
58-49	13489-13490	-	
58-50	13490-13491	#	
58-51	13492-13498	random	
58-52	13498-13499	(	
58-53	13499-13500	)	
58-54	13501-13502	<	
58-55	13503-13506	0.9	
58-56	13507-13509	AS	
58-57	13510-13519	activated	
58-58	13520-13522	db	
58-59	13522-13523	-	
58-60	13523-13524	#	
58-61	13525-13529	FROM	
58-62	13530-13532	db	
58-63	13532-13533	-	
58-64	13533-13534	#	
58-65	13535-13550	generate_series	
58-66	13550-13551	(	
58-67	13551-13552	1	
58-68	13552-13553	,	
58-69	13554-13561	1000000	
58-70	13561-13562	)	
58-71	13562-13563	;	
58-72	13564-13570	INSERT	
58-73	13571-13572	0	
58-74	13573-13580	1000000	
58-75	13581-13583	db	
58-76	13583-13584	=	
58-77	13584-13585	#	
58-78	13586-13592	SELECT	
58-79	13593-13602	activated	
58-80	13602-13603	,	
58-81	13604-13609	count	
58-82	13609-13610	(	
58-83	13610-13611	*	
58-84	13611-13612	)	
58-85	13613-13617	FROM	
58-86	13618-13623	users	
58-87	13624-13629	GROUP	
58-88	13630-13632	BY	
58-89	13633-13642	activated	
58-90	13642-13643	;	
58-91	13644-13653	activated	
58-92	13654-13655	|	
58-93	13656-13661	count	
58-94	13662-13663	-	
58-95	13663-13664	-	
58-96	13664-13665	-	
58-97	13665-13666	-	
58-98	13666-13667	-	
58-99	13667-13668	-	
58-100	13668-13669	-	
58-101	13669-13670	-	
58-102	13670-13671	-	
58-103	13671-13672	-	
58-104	13672-13673	-	
58-105	13673-13674	+	
58-106	13674-13675	-	
58-107	13675-13676	-	
58-108	13676-13677	-	
58-109	13677-13678	-	
58-110	13678-13679	-	
58-111	13679-13680	-	
58-112	13680-13681	-	
58-113	13681-13682	-	
58-114	13683-13684	|	
58-115	13685-13691	102567	
58-116	13692-13693	|	
58-117	13694-13700	897433	
58-118	13701-13703	db	
58-119	13703-13704	=	
58-120	13704-13705	#	
58-121	13706-13712	VACUUM	
58-122	13713-13720	ANALYZE	
58-123	13721-13726	users	
58-124	13726-13727	;	
58-125	13728-13734	VACUUM	
58-126	13735-13737	To	
58-127	13738-13743	query	
58-128	13744-13747	for	
58-129	13748-13757	activated	
58-130	13758-13761	and	
58-131	13762-13773	unactivated	
58-132	13774-13779	users	
58-133	13779-13780	,	
58-134	13781-13784	you	
58-135	13785-13790	might	
58-136	13791-13793	be	
58-137	13794-13801	tempted	
58-138	13802-13804	to	
58-139	13805-13811	create	
58-140	13812-13814	an	
58-141	13815-13820	index	
58-142	13821-13823	on	
58-143	13824-13827	the	
58-144	13828-13834	column	
58-145	13835-13844	activated	
58-146	13844-13845	:	
58-147	13846-13848	db	
58-148	13848-13849	=	
58-149	13849-13850	#	
58-150	13851-13857	CREATE	
58-151	13858-13863	INDEX	
58-152	13864-13882	users_activated_ix	
58-153	13883-13885	ON	
58-154	13886-13891	users	
58-155	13891-13892	(	
58-156	13892-13901	activated	
58-157	13901-13902	)	
58-158	13902-13903	;	
58-159	13904-13910	CREATE	
58-160	13911-13916	INDEX	
58-161	13917-13921	When	
58-162	13922-13925	you	
58-163	13926-13929	try	
58-164	13930-13932	to	
58-165	13933-13938	query	
58-166	13939-13950	unactivated	
58-167	13951-13956	users	
58-168	13956-13957	,	
58-169	13958-13961	the	
58-170	13962-13970	database	
58-171	13971-13973	is	
58-172	13974-13979	using	
58-173	13980-13983	the	
58-174	13984-13989	index	
58-175	13989-13990	:	
58-176	13991-13993	db	
58-177	13993-13994	=	
58-178	13994-13995	#	
58-179	13996-14003	EXPLAIN	
58-180	14004-14010	SELECT	
58-181	14011-14012	*	
58-182	14013-14017	FROM	
58-183	14018-14023	users	
58-184	14024-14029	WHERE	
58-185	14030-14033	NOT	
58-186	14034-14043	activated	
58-187	14043-14044	;	
58-188	14045-14050	QUERY	
58-189	14051-14055	PLAN	
58-190	14056-14057	-	
58-191	14057-14058	-	
58-192	14058-14059	-	
58-193	14059-14060	-	
58-194	14060-14061	-	
58-195	14061-14062	-	
58-196	14062-14063	-	
58-197	14063-14064	-	
58-198	14064-14065	-	
58-199	14065-14066	-	
58-200	14066-14067	-	
58-201	14067-14068	-	
58-202	14068-14069	-	
58-203	14069-14070	-	
58-204	14070-14071	-	
58-205	14071-14072	-	
58-206	14072-14073	-	
58-207	14073-14074	-	
58-208	14074-14075	-	
58-209	14075-14076	-	
58-210	14076-14077	-	
58-211	14077-14078	-	
58-212	14078-14079	-	
58-213	14079-14080	-	
58-214	14080-14081	-	
58-215	14081-14082	-	
58-216	14082-14083	-	
58-217	14083-14084	-	
58-218	14084-14085	-	
58-219	14085-14086	-	
58-220	14086-14087	-	
58-221	14087-14088	-	
58-222	14088-14089	-	
58-223	14089-14090	-	
58-224	14090-14091	-	
58-225	14091-14092	-	
58-226	14092-14093	-	
58-227	14093-14094	-	
58-228	14094-14095	-	
58-229	14095-14096	-	
58-230	14096-14097	-	
58-231	14097-14098	-	
58-232	14098-14099	-	
58-233	14099-14100	-	
58-234	14100-14101	-	
58-235	14101-14102	-	
58-236	14102-14103	-	
58-237	14103-14104	-	
58-238	14104-14105	-	
58-239	14105-14106	-	
58-240	14106-14107	-	
58-241	14107-14108	-	
58-242	14108-14109	-	
58-243	14109-14110	-	
58-244	14110-14111	-	
58-245	14111-14112	-	
58-246	14112-14113	-	
58-247	14113-14114	-	
58-248	14114-14115	-	
58-249	14115-14116	-	
58-250	14116-14117	-	
58-251	14117-14118	-	
58-252	14118-14119	-	
58-253	14119-14120	-	
58-254	14120-14121	-	
58-255	14121-14122	-	
58-256	14122-14123	-	
58-257	14123-14124	-	
58-258	14124-14125	-	
58-259	14125-14126	-	
58-260	14126-14127	-	
58-261	14127-14128	-	
58-262	14128-14129	-	
58-263	14129-14130	-	
58-264	14130-14131	-	
58-265	14131-14132	-	
58-266	14132-14133	-	
58-267	14133-14134	-	
58-268	14134-14135	-	
58-269	14135-14136	-	
58-270	14136-14137	-	
58-271	14137-14138	-	
58-272	14138-14139	-	
58-273	14139-14140	-	
58-274	14140-14141	-	
58-275	14141-14142	-	
58-276	14143-14149	Bitmap	
58-277	14150-14154	Heap	
58-278	14155-14159	Scan	
58-279	14160-14162	on	
58-280	14163-14168	users	
58-281	14169-14170	(	
58-282	14170-14174	cost	
58-283	14174-14175	=	
58-284	14175-14182	1923.32	
58-285	14182-14183	.	
58-286	14183-14192	.11282.99	
58-287	14193-14197	rows	
58-288	14197-14198	=	
58-289	14198-14204	102567	
58-290	14205-14210	width	
58-291	14210-14211	=	
58-292	14211-14213	38	
58-293	14213-14214	)	
58-294	14215-14221	Filter	
58-295	14221-14222	:	
58-296	14223-14224	(	
58-297	14224-14227	NOT	
58-298	14228-14237	activated	
58-299	14237-14238	)	
58-300	14239-14245	Bitmap	
58-301	14246-14251	Index	
58-302	14252-14256	Scan	
58-303	14257-14259	on	
58-304	14260-14278	users_activated_ix	
58-305	14279-14280	(	
58-306	14280-14284	cost	
58-307	14284-14285	=	
58-308	14285-14289	0.00	
58-309	14289-14290	.	
58-310	14290-14298	.1897.68	
58-311	14299-14303	rows	
58-312	14303-14304	=	
58-313	14304-14310	102567	
58-314	14311-14316	width	
58-315	14316-14317	=	
58-316	14317-14318	0	
58-317	14318-14319	)	
58-318	14320-14325	Index	
58-319	14326-14330	Cond	
58-320	14330-14331	:	
58-321	14332-14333	(	
58-322	14333-14342	activated	
58-323	14343-14344	=	
58-324	14345-14350	false	
58-325	14350-14351	)	
58-326	14352-14355	The	
58-327	14356-14364	database	
58-328	14365-14374	estimated	
58-329	14375-14379	that	
58-330	14380-14383	the	
58-331	14384-14390	filter	
58-332	14391-14395	will	
58-333	14396-14402	result	
58-334	14403-14405	in	
58-335	14406-14413	102,567	
58-336	14414-14419	which	
58-337	14420-14423	are	
58-338	14424-14431	roughly	
58-339	14432-14435	10%	
58-340	14436-14438	of	
58-341	14439-14442	the	
58-342	14443-14448	table	
58-343	14448-14449	.	

#Text=This is consistent with the data we populated, so the database has a good sense of the data.
59-1	14450-14454	This	
59-2	14455-14457	is	
59-3	14458-14468	consistent	
59-4	14469-14473	with	
59-5	14474-14477	the	
59-6	14478-14482	data	
59-7	14483-14485	we	
59-8	14486-14495	populated	
59-9	14495-14496	,	
59-10	14497-14499	so	
59-11	14500-14503	the	
59-12	14504-14512	database	
59-13	14513-14516	has	
59-14	14517-14518	a	
59-15	14519-14523	good	
59-16	14524-14529	sense	
59-17	14530-14532	of	
59-18	14533-14536	the	
59-19	14537-14541	data	
59-20	14541-14542	.	

#Text=However, when you try to query for activated users you find that the database decided not to use the index:
#Text=db=# EXPLAIN SELECT * FROM users WHERE activated;
#Text=QUERY PLAN
#Text=---------------------------------------------------------------
#Text=Seq Scan on users
#Text=(cost=0.00..18334.00 rows=897433 width=38)
#Text=Filter: activated
#Text=Many developers are often baffled when they the database is not using an index.
60-1	14543-14550	However	
60-2	14550-14551	,	
60-3	14552-14556	when	
60-4	14557-14560	you	
60-5	14561-14564	try	
60-6	14565-14567	to	
60-7	14568-14573	query	
60-8	14574-14577	for	
60-9	14578-14587	activated	
60-10	14588-14593	users	
60-11	14594-14597	you	
60-12	14598-14602	find	
60-13	14603-14607	that	
60-14	14608-14611	the	
60-15	14612-14620	database	
60-16	14621-14628	decided	
60-17	14629-14632	not	
60-18	14633-14635	to	
60-19	14636-14639	use	
60-20	14640-14643	the	
60-21	14644-14649	index	
60-22	14649-14650	:	
60-23	14651-14653	db	
60-24	14653-14654	=	
60-25	14654-14655	#	
60-26	14656-14663	EXPLAIN	
60-27	14664-14670	SELECT	
60-28	14671-14672	*	
60-29	14673-14677	FROM	
60-30	14678-14683	users	
60-31	14684-14689	WHERE	
60-32	14690-14699	activated	
60-33	14699-14700	;	
60-34	14701-14706	QUERY	
60-35	14707-14711	PLAN	
60-36	14712-14713	-	
60-37	14713-14714	-	
60-38	14714-14715	-	
60-39	14715-14716	-	
60-40	14716-14717	-	
60-41	14717-14718	-	
60-42	14718-14719	-	
60-43	14719-14720	-	
60-44	14720-14721	-	
60-45	14721-14722	-	
60-46	14722-14723	-	
60-47	14723-14724	-	
60-48	14724-14725	-	
60-49	14725-14726	-	
60-50	14726-14727	-	
60-51	14727-14728	-	
60-52	14728-14729	-	
60-53	14729-14730	-	
60-54	14730-14731	-	
60-55	14731-14732	-	
60-56	14732-14733	-	
60-57	14733-14734	-	
60-58	14734-14735	-	
60-59	14735-14736	-	
60-60	14736-14737	-	
60-61	14737-14738	-	
60-62	14738-14739	-	
60-63	14739-14740	-	
60-64	14740-14741	-	
60-65	14741-14742	-	
60-66	14742-14743	-	
60-67	14743-14744	-	
60-68	14744-14745	-	
60-69	14745-14746	-	
60-70	14746-14747	-	
60-71	14747-14748	-	
60-72	14748-14749	-	
60-73	14749-14750	-	
60-74	14750-14751	-	
60-75	14751-14752	-	
60-76	14752-14753	-	
60-77	14753-14754	-	
60-78	14754-14755	-	
60-79	14755-14756	-	
60-80	14756-14757	-	
60-81	14757-14758	-	
60-82	14758-14759	-	
60-83	14759-14760	-	
60-84	14760-14761	-	
60-85	14761-14762	-	
60-86	14762-14763	-	
60-87	14763-14764	-	
60-88	14764-14765	-	
60-89	14765-14766	-	
60-90	14766-14767	-	
60-91	14767-14768	-	
60-92	14768-14769	-	
60-93	14769-14770	-	
60-94	14770-14771	-	
60-95	14771-14772	-	
60-96	14772-14773	-	
60-97	14773-14774	-	
60-98	14774-14775	-	
60-99	14776-14779	Seq	
60-100	14780-14784	Scan	
60-101	14785-14787	on	
60-102	14788-14793	users	
60-103	14794-14795	(	
60-104	14795-14799	cost	
60-105	14799-14800	=	
60-106	14800-14804	0.00	
60-107	14804-14805	.	
60-108	14805-14814	.18334.00	
60-109	14815-14819	rows	
60-110	14819-14820	=	
60-111	14820-14826	897433	
60-112	14827-14832	width	
60-113	14832-14833	=	
60-114	14833-14835	38	
60-115	14835-14836	)	
60-116	14837-14843	Filter	
60-117	14843-14844	:	
60-118	14845-14854	activated	
60-119	14855-14859	Many	
60-120	14860-14870	developers	
60-121	14871-14874	are	
60-122	14875-14880	often	
60-123	14881-14888	baffled	
60-124	14889-14893	when	
60-125	14894-14898	they	
60-126	14899-14902	the	
60-127	14903-14911	database	
60-128	14912-14914	is	
60-129	14915-14918	not	
60-130	14919-14924	using	
60-131	14925-14927	an	
60-132	14928-14933	index	
60-133	14933-14934	.	

#Text=One way of explaining why an index is not always the best choice is this: if you had to read the entire table, would you use the index?
61-1	14935-14938	One	
61-2	14939-14942	way	
61-3	14943-14945	of	
61-4	14946-14956	explaining	
61-5	14957-14960	why	
61-6	14961-14963	an	
61-7	14964-14969	index	
61-8	14970-14972	is	
61-9	14973-14976	not	
61-10	14977-14983	always	
61-11	14984-14987	the	
61-12	14988-14992	best	
61-13	14993-14999	choice	
61-14	15000-15002	is	
61-15	15003-15007	this	
61-16	15007-15008	:	
61-17	15009-15011	if	
61-18	15012-15015	you	
61-19	15016-15019	had	
61-20	15020-15022	to	
61-21	15023-15027	read	
61-22	15028-15031	the	
61-23	15032-15038	entire	
61-24	15039-15044	table	
61-25	15044-15045	,	
61-26	15046-15051	would	
61-27	15052-15055	you	
61-28	15056-15059	use	
61-29	15060-15063	the	
61-30	15064-15069	index	
61-31	15069-15070	?	

#Text=The answer is probably no, because why would you?
62-1	15071-15074	The	
62-2	15075-15081	answer	
62-3	15082-15084	is	
62-4	15085-15093	probably	
62-5	15094-15096	no	
62-6	15096-15097	,	
62-7	15098-15105	because	
62-8	15106-15109	why	
62-9	15110-15115	would	
62-10	15116-15119	you	
62-11	15119-15120	?	

#Text=Reading from disk is expensive and you want to read as little as possible.
63-1	15121-15128	Reading	
63-2	15129-15133	from	
63-3	15134-15138	disk	
63-4	15139-15141	is	
63-5	15142-15151	expensive	
63-6	15152-15155	and	
63-7	15156-15159	you	
63-8	15160-15164	want	
63-9	15165-15167	to	
63-10	15168-15172	read	
63-11	15173-15175	as	
63-12	15176-15182	little	
63-13	15183-15185	as	
63-14	15186-15194	possible	
63-15	15194-15195	.	

#Text=If for example, a table is 10MB and the index is 1MB, to read the entire table you would have to read 10MB from disk.
64-1	15196-15198	If	
64-2	15199-15202	for	
64-3	15203-15210	example	
64-4	15210-15211	,	
64-5	15212-15213	a	
64-6	15214-15219	table	
64-7	15220-15222	is	
64-8	15223-15227	10MB	
64-9	15228-15231	and	
64-10	15232-15235	the	
64-11	15236-15241	index	
64-12	15242-15244	is	
64-13	15245-15248	1MB	
64-14	15248-15249	,	
64-15	15250-15252	to	
64-16	15253-15257	read	
64-17	15258-15261	the	
64-18	15262-15268	entire	
64-19	15269-15274	table	
64-20	15275-15278	you	
64-21	15279-15284	would	
64-22	15285-15289	have	
64-23	15290-15292	to	
64-24	15293-15297	read	
64-25	15298-15302	10MB	
64-26	15303-15307	from	
64-27	15308-15312	disk	
64-28	15312-15313	.	

#Text=To read the table using the index you would have to read 11MB from disk.
65-1	15314-15316	To	
65-2	15317-15321	read	
65-3	15322-15325	the	
65-4	15326-15331	table	
65-5	15332-15337	using	
65-6	15338-15341	the	
65-7	15342-15347	index	
65-8	15348-15351	you	
65-9	15352-15357	would	
65-10	15358-15362	have	
65-11	15363-15365	to	
65-12	15366-15370	read	
65-13	15371-15375	11MB	
65-14	15376-15380	from	
65-15	15381-15385	disk	
65-16	15385-15386	.	

#Text=This is wasteful.
66-1	15387-15391	This	
66-2	15392-15394	is	
66-3	15395-15403	wasteful	
66-4	15403-15404	.	

#Text=With this understanding, let's have a look at the statistics PostgreSQL gather on the table:
#Text=db=# SELECT attname, n_distinct, most_common_vals, most_common_freqs
#Text=db-# FROM pg_stats
#Text=db-# WHERE tablename = 'users' AND attname='activated';
#Text=------------------+------------------------
#Text=attname
#Text=| activated
#Text=n_distinct
#Text=| 2
#Text=most_common_vals
#Text=| {t,f}
#Text=most_common_freqs | {0.89743334,0.10256667}
#Text=When PostgreSQL analyzed the table it found that the column activated has two distinct values.
67-1	15405-15409	With	
67-2	15410-15414	this	
67-3	15415-15428	understanding	
67-4	15428-15429	,	
67-5	15430-15435	let's	
67-6	15436-15440	have	
67-7	15441-15442	a	
67-8	15443-15447	look	
67-9	15448-15450	at	
67-10	15451-15454	the	
67-11	15455-15465	statistics	
67-12	15466-15476	PostgreSQL	
67-13	15477-15483	gather	
67-14	15484-15486	on	
67-15	15487-15490	the	
67-16	15491-15496	table	
67-17	15496-15497	:	
67-18	15498-15500	db	
67-19	15500-15501	=	
67-20	15501-15502	#	
67-21	15503-15509	SELECT	
67-22	15510-15517	attname	
67-23	15517-15518	,	
67-24	15519-15529	n_distinct	
67-25	15529-15530	,	
67-26	15531-15547	most_common_vals	
67-27	15547-15548	,	
67-28	15549-15566	most_common_freqs	
67-29	15567-15569	db	
67-30	15569-15570	-	
67-31	15570-15571	#	
67-32	15572-15576	FROM	
67-33	15577-15585	pg_stats	
67-34	15586-15588	db	
67-35	15588-15589	-	
67-36	15589-15590	#	
67-37	15591-15596	WHERE	
67-38	15597-15606	tablename	
67-39	15607-15608	=	
67-40	15609-15610	'	
67-41	15610-15615	users	
67-42	15615-15616	'	
67-43	15617-15620	AND	
67-44	15621-15628	attname	
67-45	15628-15629	=	
67-46	15629-15630	'	
67-47	15630-15639	activated	
67-48	15639-15640	'	
67-49	15640-15641	;	
67-50	15642-15643	-	
67-51	15643-15644	-	
67-52	15644-15645	-	
67-53	15645-15646	-	
67-54	15646-15647	-	
67-55	15647-15648	-	
67-56	15648-15649	-	
67-57	15649-15650	-	
67-58	15650-15651	-	
67-59	15651-15652	-	
67-60	15652-15653	-	
67-61	15653-15654	-	
67-62	15654-15655	-	
67-63	15655-15656	-	
67-64	15656-15657	-	
67-65	15657-15658	-	
67-66	15658-15659	-	
67-67	15659-15660	-	
67-68	15660-15661	+	
67-69	15661-15662	-	
67-70	15662-15663	-	
67-71	15663-15664	-	
67-72	15664-15665	-	
67-73	15665-15666	-	
67-74	15666-15667	-	
67-75	15667-15668	-	
67-76	15668-15669	-	
67-77	15669-15670	-	
67-78	15670-15671	-	
67-79	15671-15672	-	
67-80	15672-15673	-	
67-81	15673-15674	-	
67-82	15674-15675	-	
67-83	15675-15676	-	
67-84	15676-15677	-	
67-85	15677-15678	-	
67-86	15678-15679	-	
67-87	15679-15680	-	
67-88	15680-15681	-	
67-89	15681-15682	-	
67-90	15682-15683	-	
67-91	15683-15684	-	
67-92	15684-15685	-	
67-93	15686-15693	attname	
67-94	15694-15695	|	
67-95	15696-15705	activated	
67-96	15706-15716	n_distinct	
67-97	15717-15718	|	
67-98	15719-15720	2	
67-99	15721-15737	most_common_vals	
67-100	15738-15739	|	
67-101	15740-15741	{	
67-102	15741-15742	t	
67-103	15742-15743	,	
67-104	15743-15744	f	
67-105	15744-15745	}	
67-106	15746-15763	most_common_freqs	
67-107	15764-15765	|	
67-108	15766-15767	{	
67-109	15767-15788	0.89743334,0.10256667	
67-110	15788-15789	}	
67-111	15790-15794	When	
67-112	15795-15805	PostgreSQL	
67-113	15806-15814	analyzed	
67-114	15815-15818	the	
67-115	15819-15824	table	
67-116	15825-15827	it	
67-117	15828-15833	found	
67-118	15834-15838	that	
67-119	15839-15842	the	
67-120	15843-15849	column	
67-121	15850-15859	activated	
67-122	15860-15863	has	
67-123	15864-15867	two	
67-124	15868-15876	distinct	
67-125	15877-15883	values	
67-126	15883-15884	.	

#Text=The value t in the most_common_vals column corresponds to the frequency 0.89743334 in the column most_common_freqs, and the value f corresponds to the frequency 0.10256667.
68-1	15885-15888	The	
68-2	15889-15894	value	
68-3	15895-15896	t	
68-4	15897-15899	in	
68-5	15900-15903	the	
68-6	15904-15920	most_common_vals	
68-7	15921-15927	column	
68-8	15928-15939	corresponds	
68-9	15940-15942	to	
68-10	15943-15946	the	
68-11	15947-15956	frequency	
68-12	15957-15967	0.89743334	
68-13	15968-15970	in	
68-14	15971-15974	the	
68-15	15975-15981	column	
68-16	15982-15999	most_common_freqs	
68-17	15999-16000	,	
68-18	16001-16004	and	
68-19	16005-16008	the	
68-20	16009-16014	value	
68-21	16015-16016	f	
68-22	16017-16028	corresponds	
68-23	16029-16031	to	
68-24	16032-16035	the	
68-25	16036-16045	frequency	
68-26	16046-16056	0.10256667	
68-27	16056-16057	.	

#Text=This means that after analyzing the table, the database estimates that 89.74% of the table are activated users, and the rest 10.26% are unactivated users.
69-1	16058-16062	This	
69-2	16063-16068	means	
69-3	16069-16073	that	
69-4	16074-16079	after	
69-5	16080-16089	analyzing	
69-6	16090-16093	the	
69-7	16094-16099	table	
69-8	16099-16100	,	
69-9	16101-16104	the	
69-10	16105-16113	database	
69-11	16114-16123	estimates	
69-12	16124-16128	that	
69-13	16129-16135	89.74%	
69-14	16136-16138	of	
69-15	16139-16142	the	
69-16	16143-16148	table	
69-17	16149-16152	are	
69-18	16153-16162	activated	
69-19	16163-16168	users	
69-20	16168-16169	,	
69-21	16170-16173	and	
69-22	16174-16177	the	
69-23	16178-16182	rest	
69-24	16183-16189	10.26%	
69-25	16190-16193	are	
69-26	16194-16205	unactivated	
69-27	16206-16211	users	
69-28	16211-16212	.	

#Text=With these stats, PostgreSQL decided it's best to scan the entire table if it expects 90% of the rows to satisfy the condition.
70-1	16213-16217	With	
70-2	16218-16223	these	
70-3	16224-16229	stats	
70-4	16229-16230	,	
70-5	16231-16241	PostgreSQL	
70-6	16242-16249	decided	
70-7	16250-16254	it's	
70-8	16255-16259	best	
70-9	16260-16262	to	
70-10	16263-16267	scan	
70-11	16268-16271	the	
70-12	16272-16278	entire	
70-13	16279-16284	table	
70-14	16285-16287	if	
70-15	16288-16290	it	
70-16	16291-16298	expects	
70-17	16299-16302	90%	
70-18	16303-16305	of	
70-19	16306-16309	the	
70-20	16310-16314	rows	
70-21	16315-16317	to	
70-22	16318-16325	satisfy	
70-23	16326-16329	the	
70-24	16330-16339	condition	
70-25	16339-16340	.	

#Text=The threshold after which the database may decide to use or not to use the index depends on many factors, and there is no rule of thumb you can use.
71-1	16341-16344	The	
71-2	16345-16354	threshold	
71-3	16355-16360	after	
71-4	16361-16366	which	
71-5	16367-16370	the	
71-6	16371-16379	database	
71-7	16380-16383	may	
71-8	16384-16390	decide	
71-9	16391-16393	to	
71-10	16394-16397	use	
71-11	16398-16400	or	
71-12	16401-16404	not	
71-13	16405-16407	to	
71-14	16408-16411	use	
71-15	16412-16415	the	
71-16	16416-16421	index	
71-17	16422-16429	depends	
71-18	16430-16432	on	
71-19	16433-16437	many	
71-20	16438-16445	factors	
71-21	16445-16446	,	
71-22	16447-16450	and	
71-23	16451-16456	there	
71-24	16457-16459	is	
71-25	16460-16462	no	
71-26	16463-16467	rule	
71-27	16468-16470	of	
71-28	16471-16476	thumb	
71-29	16477-16480	you	
71-30	16481-16484	can	
71-31	16485-16488	use	
71-32	16488-16489	.	

#Text=Index for a column with low selectivity vs. high selectivity
#Text=Use Partial Indexes
#Text=In the previous section we created an index on a boolean column where ~90% of the of the values were true (activated user).
72-1	16490-16495	Index	
72-2	16496-16499	for	
72-3	16500-16501	a	
72-4	16502-16508	column	
72-5	16509-16513	with	
72-6	16514-16517	low	
72-7	16518-16529	selectivity	
72-8	16530-16532	vs	
72-9	16532-16533	.	
72-10	16534-16538	high	
72-11	16539-16550	selectivity	
72-12	16551-16554	Use	
72-13	16555-16562	Partial	
72-14	16563-16570	Indexes	
72-15	16571-16573	In	
72-16	16574-16577	the	
72-17	16578-16586	previous	
72-18	16587-16594	section	
72-19	16595-16597	we	
72-20	16598-16605	created	
72-21	16606-16608	an	
72-22	16609-16614	index	
72-23	16615-16617	on	
72-24	16618-16619	a	
72-25	16620-16627	boolean	
72-26	16628-16634	column	
72-27	16635-16640	where	
72-28	16641-16642	~	
72-29	16642-16645	90%	
72-30	16646-16648	of	
72-31	16649-16652	the	
72-32	16653-16655	of	
72-33	16656-16659	the	
72-34	16660-16666	values	
72-35	16667-16671	were	
72-36	16672-16676	true	
72-37	16677-16678	(	
72-38	16678-16687	activated	
72-39	16688-16692	user	
72-40	16692-16693	)	
72-41	16693-16694	.	

#Text=When we tried to query for active users, the database did not use the index.
73-1	16695-16699	When	
73-2	16700-16702	we	
73-3	16703-16708	tried	
73-4	16709-16711	to	
73-5	16712-16717	query	
73-6	16718-16721	for	
73-7	16722-16728	active	
73-8	16729-16734	users	
73-9	16734-16735	,	
73-10	16736-16739	the	
73-11	16740-16748	database	
73-12	16749-16752	did	
73-13	16753-16756	not	
73-14	16757-16760	use	
73-15	16761-16764	the	
73-16	16765-16770	index	
73-17	16770-16771	.	

#Text=However, when we queried unactivated users the database did use the index.
74-1	16772-16779	However	
74-2	16779-16780	,	
74-3	16781-16785	when	
74-4	16786-16788	we	
74-5	16789-16796	queried	
74-6	16797-16808	unactivated	
74-7	16809-16814	users	
74-8	16815-16818	the	
74-9	16819-16827	database	
74-10	16828-16831	did	
74-11	16832-16835	use	
74-12	16836-16839	the	
74-13	16840-16845	index	
74-14	16845-16846	.	

#Text=This brings us to the next question.... if the database is not going to use the index to filter active users, why should we index them in the first place?
75-1	16847-16851	This	
75-2	16852-16858	brings	
75-3	16859-16861	us	
75-4	16862-16864	to	
75-5	16865-16868	the	
75-6	16869-16873	next	
75-7	16874-16882	question	
75-8	16882-16883	.	
75-9	16883-16884	.	
75-10	16884-16885	.	
75-11	16885-16886	.	
75-12	16887-16889	if	
75-13	16890-16893	the	
75-14	16894-16902	database	
75-15	16903-16905	is	
75-16	16906-16909	not	
75-17	16910-16915	going	
75-18	16916-16918	to	
75-19	16919-16922	use	
75-20	16923-16926	the	
75-21	16927-16932	index	
75-22	16933-16935	to	
75-23	16936-16942	filter	
75-24	16943-16949	active	
75-25	16950-16955	users	
75-26	16955-16956	,	
75-27	16957-16960	why	
75-28	16961-16967	should	
75-29	16968-16970	we	
75-30	16971-16976	index	
75-31	16977-16981	them	
75-32	16982-16984	in	
75-33	16985-16988	the	
75-34	16989-16994	first	
75-35	16995-17000	place	
75-36	17000-17001	?	

#Text=Before we answer this question let's look at how much the full index on the activated column weighs:
#Text=db=# \\di+ users_activated_ix
#Text=Schema |
#Text=Name
#Text=| Type
#Text=| Owner | Table | Size
#Text=--------+--------------------+-------+-------+-------+------
#Text=public | users_activated_ix | index | haki
#Text=| users | 21 MB
#Text=The index is 21MB.
76-1	17002-17008	Before	
76-2	17009-17011	we	
76-3	17012-17018	answer	
76-4	17019-17023	this	
76-5	17024-17032	question	
76-6	17033-17038	let's	
76-7	17039-17043	look	
76-8	17044-17046	at	
76-9	17047-17050	how	
76-10	17051-17055	much	
76-11	17056-17059	the	
76-12	17060-17064	full	
76-13	17065-17070	index	
76-14	17071-17073	on	
76-15	17074-17077	the	
76-16	17078-17087	activated	
76-17	17088-17094	column	
76-18	17095-17101	weighs	
76-19	17101-17102	:	
76-20	17103-17105	db	
76-21	17105-17106	=	
76-22	17106-17107	#	
76-23	17108-17109	\	
76-24	17109-17111	di	
76-25	17111-17112	+	
76-26	17113-17131	users_activated_ix	
76-27	17132-17138	Schema	
76-28	17139-17140	|	
76-29	17141-17145	Name	
76-30	17146-17147	|	
76-31	17148-17152	Type	
76-32	17153-17154	|	
76-33	17155-17160	Owner	
76-34	17161-17162	|	
76-35	17163-17168	Table	
76-36	17169-17170	|	
76-37	17171-17175	Size	
76-38	17176-17177	-	
76-39	17177-17178	-	
76-40	17178-17179	-	
76-41	17179-17180	-	
76-42	17180-17181	-	
76-43	17181-17182	-	
76-44	17182-17183	-	
76-45	17183-17184	-	
76-46	17184-17185	+	
76-47	17185-17186	-	
76-48	17186-17187	-	
76-49	17187-17188	-	
76-50	17188-17189	-	
76-51	17189-17190	-	
76-52	17190-17191	-	
76-53	17191-17192	-	
76-54	17192-17193	-	
76-55	17193-17194	-	
76-56	17194-17195	-	
76-57	17195-17196	-	
76-58	17196-17197	-	
76-59	17197-17198	-	
76-60	17198-17199	-	
76-61	17199-17200	-	
76-62	17200-17201	-	
76-63	17201-17202	-	
76-64	17202-17203	-	
76-65	17203-17204	-	
76-66	17204-17205	-	
76-67	17205-17206	+	
76-68	17206-17207	-	
76-69	17207-17208	-	
76-70	17208-17209	-	
76-71	17209-17210	-	
76-72	17210-17211	-	
76-73	17211-17212	-	
76-74	17212-17213	-	
76-75	17213-17214	+	
76-76	17214-17215	-	
76-77	17215-17216	-	
76-78	17216-17217	-	
76-79	17217-17218	-	
76-80	17218-17219	-	
76-81	17219-17220	-	
76-82	17220-17221	-	
76-83	17221-17222	+	
76-84	17222-17223	-	
76-85	17223-17224	-	
76-86	17224-17225	-	
76-87	17225-17226	-	
76-88	17226-17227	-	
76-89	17227-17228	-	
76-90	17228-17229	-	
76-91	17229-17230	+	
76-92	17230-17231	-	
76-93	17231-17232	-	
76-94	17232-17233	-	
76-95	17233-17234	-	
76-96	17234-17235	-	
76-97	17235-17236	-	
76-98	17237-17243	public	
76-99	17244-17245	|	
76-100	17246-17264	users_activated_ix	
76-101	17265-17266	|	
76-102	17267-17272	index	
76-103	17273-17274	|	
76-104	17275-17279	haki	
76-105	17280-17281	|	
76-106	17282-17287	users	
76-107	17288-17289	|	
76-108	17290-17292	21	
76-109	17293-17295	MB	
76-110	17296-17299	The	
76-111	17300-17305	index	
76-112	17306-17308	is	
76-113	17309-17313	21MB	
76-114	17313-17314	.	

#Text=Just for reference, the users table is 65MB.
77-1	17315-17319	Just	
77-2	17320-17323	for	
77-3	17324-17333	reference	
77-4	17333-17334	,	
77-5	17335-17338	the	
77-6	17339-17344	users	
77-7	17345-17350	table	
77-8	17351-17353	is	
77-9	17354-17358	65MB	
77-10	17358-17359	.	

#Text=This means the index weighs ~32% the size of the table.
78-1	17360-17364	This	
78-2	17365-17370	means	
78-3	17371-17374	the	
78-4	17375-17380	index	
78-5	17381-17387	weighs	
78-6	17388-17389	~	
78-7	17389-17392	32%	
78-8	17393-17396	the	
78-9	17397-17401	size	
78-10	17402-17404	of	
78-11	17405-17408	the	
78-12	17409-17414	table	
78-13	17414-17415	.	

#Text=We also know that ~90% of the index is likely not going to be used.
79-1	17416-17418	We	
79-2	17419-17423	also	
79-3	17424-17428	know	
79-4	17429-17433	that	
79-5	17434-17435	~	
79-6	17435-17438	90%	
79-7	17439-17441	of	
79-8	17442-17445	the	
79-9	17446-17451	index	
79-10	17452-17454	is	
79-11	17455-17461	likely	
79-12	17462-17465	not	
79-13	17466-17471	going	
79-14	17472-17474	to	
79-15	17475-17477	be	
79-16	17478-17482	used	
79-17	17482-17483	.	

#Text=In PostgreSQL, there is a way to create an index on only a part of the table, using whats called a partial index:
#Text=db=# CREATE INDEX users_unactivated_partial_ix ON users(id)
#Text=db-# WHERE not activated;
#Text=CREATE INDEX
#Text=Using a WHERE clause, we restrict the rows indexed by the index.
80-1	17484-17486	In	
80-2	17487-17497	PostgreSQL	
80-3	17497-17498	,	
80-4	17499-17504	there	
80-5	17505-17507	is	
80-6	17508-17509	a	
80-7	17510-17513	way	
80-8	17514-17516	to	
80-9	17517-17523	create	
80-10	17524-17526	an	
80-11	17527-17532	index	
80-12	17533-17535	on	
80-13	17536-17540	only	
80-14	17541-17542	a	
80-15	17543-17547	part	
80-16	17548-17550	of	
80-17	17551-17554	the	
80-18	17555-17560	table	
80-19	17560-17561	,	
80-20	17562-17567	using	
80-21	17568-17573	whats	
80-22	17574-17580	called	
80-23	17581-17582	a	
80-24	17583-17590	partial	
80-25	17591-17596	index	
80-26	17596-17597	:	
80-27	17598-17600	db	
80-28	17600-17601	=	
80-29	17601-17602	#	
80-30	17603-17609	CREATE	
80-31	17610-17615	INDEX	
80-32	17616-17644	users_unactivated_partial_ix	
80-33	17645-17647	ON	
80-34	17648-17653	users	
80-35	17653-17654	(	
80-36	17654-17656	id	
80-37	17656-17657	)	
80-38	17658-17660	db	
80-39	17660-17661	-	
80-40	17661-17662	#	
80-41	17663-17668	WHERE	
80-42	17669-17672	not	
80-43	17673-17682	activated	
80-44	17682-17683	;	
80-45	17684-17690	CREATE	
80-46	17691-17696	INDEX	
80-47	17697-17702	Using	
80-48	17703-17704	a	
80-49	17705-17710	WHERE	
80-50	17711-17717	clause	
80-51	17717-17718	,	
80-52	17719-17721	we	
80-53	17722-17730	restrict	
80-54	17731-17734	the	
80-55	17735-17739	rows	
80-56	17740-17747	indexed	
80-57	17748-17750	by	
80-58	17751-17754	the	
80-59	17755-17760	index	
80-60	17760-17761	.	

#Text=Let's first make sure it works:
#Text=db=# EXPLAIN SELECT * FROM users WHERE not activated;
#Text=QUERY PLAN
#Text=------------------------------------------------------------------------------------------------
#Text=Index Scan using users_unactivated_partial_ix on users
#Text=(cost=0.29..3493.60 rows=102567 width=38)
#Text=Amazing, the database was smart enough to understand that the predicate we used in the query can be satisfied by the partial index.
81-1	17762-17767	Let's	
81-2	17768-17773	first	
81-3	17774-17778	make	
81-4	17779-17783	sure	
81-5	17784-17786	it	
81-6	17787-17792	works	
81-7	17792-17793	:	
81-8	17794-17796	db	
81-9	17796-17797	=	
81-10	17797-17798	#	
81-11	17799-17806	EXPLAIN	
81-12	17807-17813	SELECT	
81-13	17814-17815	*	
81-14	17816-17820	FROM	
81-15	17821-17826	users	
81-16	17827-17832	WHERE	
81-17	17833-17836	not	
81-18	17837-17846	activated	
81-19	17846-17847	;	
81-20	17848-17853	QUERY	
81-21	17854-17858	PLAN	
81-22	17859-17860	-	
81-23	17860-17861	-	
81-24	17861-17862	-	
81-25	17862-17863	-	
81-26	17863-17864	-	
81-27	17864-17865	-	
81-28	17865-17866	-	
81-29	17866-17867	-	
81-30	17867-17868	-	
81-31	17868-17869	-	
81-32	17869-17870	-	
81-33	17870-17871	-	
81-34	17871-17872	-	
81-35	17872-17873	-	
81-36	17873-17874	-	
81-37	17874-17875	-	
81-38	17875-17876	-	
81-39	17876-17877	-	
81-40	17877-17878	-	
81-41	17878-17879	-	
81-42	17879-17880	-	
81-43	17880-17881	-	
81-44	17881-17882	-	
81-45	17882-17883	-	
81-46	17883-17884	-	
81-47	17884-17885	-	
81-48	17885-17886	-	
81-49	17886-17887	-	
81-50	17887-17888	-	
81-51	17888-17889	-	
81-52	17889-17890	-	
81-53	17890-17891	-	
81-54	17891-17892	-	
81-55	17892-17893	-	
81-56	17893-17894	-	
81-57	17894-17895	-	
81-58	17895-17896	-	
81-59	17896-17897	-	
81-60	17897-17898	-	
81-61	17898-17899	-	
81-62	17899-17900	-	
81-63	17900-17901	-	
81-64	17901-17902	-	
81-65	17902-17903	-	
81-66	17903-17904	-	
81-67	17904-17905	-	
81-68	17905-17906	-	
81-69	17906-17907	-	
81-70	17907-17908	-	
81-71	17908-17909	-	
81-72	17909-17910	-	
81-73	17910-17911	-	
81-74	17911-17912	-	
81-75	17912-17913	-	
81-76	17913-17914	-	
81-77	17914-17915	-	
81-78	17915-17916	-	
81-79	17916-17917	-	
81-80	17917-17918	-	
81-81	17918-17919	-	
81-82	17919-17920	-	
81-83	17920-17921	-	
81-84	17921-17922	-	
81-85	17922-17923	-	
81-86	17923-17924	-	
81-87	17924-17925	-	
81-88	17925-17926	-	
81-89	17926-17927	-	
81-90	17927-17928	-	
81-91	17928-17929	-	
81-92	17929-17930	-	
81-93	17930-17931	-	
81-94	17931-17932	-	
81-95	17932-17933	-	
81-96	17933-17934	-	
81-97	17934-17935	-	
81-98	17935-17936	-	
81-99	17936-17937	-	
81-100	17937-17938	-	
81-101	17938-17939	-	
81-102	17939-17940	-	
81-103	17940-17941	-	
81-104	17941-17942	-	
81-105	17942-17943	-	
81-106	17943-17944	-	
81-107	17944-17945	-	
81-108	17945-17946	-	
81-109	17946-17947	-	
81-110	17947-17948	-	
81-111	17948-17949	-	
81-112	17949-17950	-	
81-113	17950-17951	-	
81-114	17951-17952	-	
81-115	17952-17953	-	
81-116	17953-17954	-	
81-117	17954-17955	-	
81-118	17956-17961	Index	
81-119	17962-17966	Scan	
81-120	17967-17972	using	
81-121	17973-18001	users_unactivated_partial_ix	
81-122	18002-18004	on	
81-123	18005-18010	users	
81-124	18011-18012	(	
81-125	18012-18016	cost	
81-126	18016-18017	=	
81-127	18017-18021	0.29	
81-128	18021-18022	.	
81-129	18022-18030	.3493.60	
81-130	18031-18035	rows	
81-131	18035-18036	=	
81-132	18036-18042	102567	
81-133	18043-18048	width	
81-134	18048-18049	=	
81-135	18049-18051	38	
81-136	18051-18052	)	
81-137	18053-18060	Amazing	
81-138	18060-18061	,	
81-139	18062-18065	the	
81-140	18066-18074	database	
81-141	18075-18078	was	
81-142	18079-18084	smart	
81-143	18085-18091	enough	
81-144	18092-18094	to	
81-145	18095-18105	understand	
81-146	18106-18110	that	
81-147	18111-18114	the	
81-148	18115-18124	predicate	
81-149	18125-18127	we	
81-150	18128-18132	used	
81-151	18133-18135	in	
81-152	18136-18139	the	
81-153	18140-18145	query	
81-154	18146-18149	can	
81-155	18150-18152	be	
81-156	18153-18162	satisfied	
81-157	18163-18165	by	
81-158	18166-18169	the	
81-159	18170-18177	partial	
81-160	18178-18183	index	
81-161	18183-18184	.	

#Text=There is another benefit to using partial indexes:
#Text=db=# \\di+ users_unactivated_partial_ix
#Text=List of relations
#Text=Schema |
#Text=Name
#Text=| Type
#Text=| Owner | Table |
#Text=Size
#Text=--------+------------------------------+-------+-------+-------+---------
#Text=public | users_unactivated_partial_ix | index | haki
#Text=| users | 2216 kB
#Text=The partial index weighs only 2.2MB.
82-1	18185-18190	There	
82-2	18191-18193	is	
82-3	18194-18201	another	
82-4	18202-18209	benefit	
82-5	18210-18212	to	
82-6	18213-18218	using	
82-7	18219-18226	partial	
82-8	18227-18234	indexes	
82-9	18234-18235	:	
82-10	18236-18238	db	
82-11	18238-18239	=	
82-12	18239-18240	#	
82-13	18241-18242	\	
82-14	18242-18244	di	
82-15	18244-18245	+	
82-16	18246-18274	users_unactivated_partial_ix	
82-17	18275-18279	List	
82-18	18280-18282	of	
82-19	18283-18292	relations	
82-20	18293-18299	Schema	
82-21	18300-18301	|	
82-22	18302-18306	Name	
82-23	18307-18308	|	
82-24	18309-18313	Type	
82-25	18314-18315	|	
82-26	18316-18321	Owner	
82-27	18322-18323	|	
82-28	18324-18329	Table	
82-29	18330-18331	|	
82-30	18332-18336	Size	
82-31	18337-18338	-	
82-32	18338-18339	-	
82-33	18339-18340	-	
82-34	18340-18341	-	
82-35	18341-18342	-	
82-36	18342-18343	-	
82-37	18343-18344	-	
82-38	18344-18345	-	
82-39	18345-18346	+	
82-40	18346-18347	-	
82-41	18347-18348	-	
82-42	18348-18349	-	
82-43	18349-18350	-	
82-44	18350-18351	-	
82-45	18351-18352	-	
82-46	18352-18353	-	
82-47	18353-18354	-	
82-48	18354-18355	-	
82-49	18355-18356	-	
82-50	18356-18357	-	
82-51	18357-18358	-	
82-52	18358-18359	-	
82-53	18359-18360	-	
82-54	18360-18361	-	
82-55	18361-18362	-	
82-56	18362-18363	-	
82-57	18363-18364	-	
82-58	18364-18365	-	
82-59	18365-18366	-	
82-60	18366-18367	-	
82-61	18367-18368	-	
82-62	18368-18369	-	
82-63	18369-18370	-	
82-64	18370-18371	-	
82-65	18371-18372	-	
82-66	18372-18373	-	
82-67	18373-18374	-	
82-68	18374-18375	-	
82-69	18375-18376	-	
82-70	18376-18377	+	
82-71	18377-18378	-	
82-72	18378-18379	-	
82-73	18379-18380	-	
82-74	18380-18381	-	
82-75	18381-18382	-	
82-76	18382-18383	-	
82-77	18383-18384	-	
82-78	18384-18385	+	
82-79	18385-18386	-	
82-80	18386-18387	-	
82-81	18387-18388	-	
82-82	18388-18389	-	
82-83	18389-18390	-	
82-84	18390-18391	-	
82-85	18391-18392	-	
82-86	18392-18393	+	
82-87	18393-18394	-	
82-88	18394-18395	-	
82-89	18395-18396	-	
82-90	18396-18397	-	
82-91	18397-18398	-	
82-92	18398-18399	-	
82-93	18399-18400	-	
82-94	18400-18401	+	
82-95	18401-18402	-	
82-96	18402-18403	-	
82-97	18403-18404	-	
82-98	18404-18405	-	
82-99	18405-18406	-	
82-100	18406-18407	-	
82-101	18407-18408	-	
82-102	18408-18409	-	
82-103	18409-18410	-	
82-104	18411-18417	public	
82-105	18418-18419	|	
82-106	18420-18448	users_unactivated_partial_ix	
82-107	18449-18450	|	
82-108	18451-18456	index	
82-109	18457-18458	|	
82-110	18459-18463	haki	
82-111	18464-18465	|	
82-112	18466-18471	users	
82-113	18472-18473	|	
82-114	18474-18478	2216	
82-115	18479-18481	kB	
82-116	18482-18485	The	
82-117	18486-18493	partial	
82-118	18494-18499	index	
82-119	18500-18506	weighs	
82-120	18507-18511	only	
82-121	18512-18517	2.2MB	
82-122	18517-18518	.	

#Text=The full index on the column weighed 21MB.
83-1	18519-18522	The	
83-2	18523-18527	full	
83-3	18528-18533	index	
83-4	18534-18536	on	
83-5	18537-18540	the	
83-6	18541-18547	column	
83-7	18548-18555	weighed	
83-8	18556-18560	21MB	
83-9	18560-18561	.	

#Text=The partial index is exactly 10% the size of the full index, which matches the ratio of inactive users in the table.
84-1	18562-18565	The	
84-2	18566-18573	partial	
84-3	18574-18579	index	
84-4	18580-18582	is	
84-5	18583-18590	exactly	
84-6	18591-18594	10%	
84-7	18595-18598	the	
84-8	18599-18603	size	
84-9	18604-18606	of	
84-10	18607-18610	the	
84-11	18611-18615	full	
84-12	18616-18621	index	
84-13	18621-18622	,	
84-14	18623-18628	which	
84-15	18629-18636	matches	
84-16	18637-18640	the	
84-17	18641-18646	ratio	
84-18	18647-18649	of	
84-19	18650-18658	inactive	
84-20	18659-18664	users	
84-21	18665-18667	in	
84-22	18668-18671	the	
84-23	18672-18677	table	
84-24	18677-18678	.	

#Text=Always Load Sorted Data
#Text=This is one of the things I comment most about in code reviews.
85-1	18679-18685	Always	
85-2	18686-18690	Load	
85-3	18691-18697	Sorted	
85-4	18698-18702	Data	
85-5	18703-18707	This	
85-6	18708-18710	is	
85-7	18711-18714	one	
85-8	18715-18717	of	
85-9	18718-18721	the	
85-10	18722-18728	things	
85-11	18729-18730	I	
85-12	18731-18738	comment	
85-13	18739-18743	most	
85-14	18744-18749	about	
85-15	18750-18752	in	
85-16	18753-18757	code	
85-17	18758-18765	reviews	
85-18	18765-18766	.	

#Text=It's not as intuitive as the other tips and it can have a huge impact on performance.
86-1	18767-18771	It's	
86-2	18772-18775	not	
86-3	18776-18778	as	
86-4	18779-18788	intuitive	
86-5	18789-18791	as	
86-6	18792-18795	the	
86-7	18796-18801	other	
86-8	18802-18806	tips	
86-9	18807-18810	and	
86-10	18811-18813	it	
86-11	18814-18817	can	
86-12	18818-18822	have	
86-13	18823-18824	a	
86-14	18825-18829	huge	
86-15	18830-18836	impact	
86-16	18837-18839	on	
86-17	18840-18851	performance	
86-18	18851-18852	.	

#Text=Say you have a large sales fact table:
#Text=db=# CREATE TABLE sale_fact (id serial, username text, sold_at date);
#Text=CREATE TABLE
#Text=Every night, during some ETL process, you load data into the table:
#Text=db=# INSERT INTO sale_fact (username, sold_at)
#Text=db-# SELECT
#Text=db-#
#Text=md5(random()::text) AS username,
#Text=db-#
#Text='2020-01-01'::date + (interval '1 day') * round(random() * 365 * 2) AS sold_at
#Text=db-# FROM
#Text=db-#
#Text=generate_series(1, 100000);
#Text=INSERT 0 100000
#Text=db=# VACUUM ANALYZE sale_fact;
#Text=VACUUM
#Text=To fake a loading process we used random data.
87-1	18853-18856	Say	
87-2	18857-18860	you	
87-3	18861-18865	have	
87-4	18866-18867	a	
87-5	18868-18873	large	
87-6	18874-18879	sales	
87-7	18880-18884	fact	
87-8	18885-18890	table	
87-9	18890-18891	:	
87-10	18892-18894	db	
87-11	18894-18895	=	
87-12	18895-18896	#	
87-13	18897-18903	CREATE	
87-14	18904-18909	TABLE	
87-15	18910-18919	sale_fact	
87-16	18920-18921	(	
87-17	18921-18923	id	
87-18	18924-18930	serial	
87-19	18930-18931	,	
87-20	18932-18940	username	
87-21	18941-18945	text	
87-22	18945-18946	,	
87-23	18947-18954	sold_at	
87-24	18955-18959	date	
87-25	18959-18960	)	
87-26	18960-18961	;	
87-27	18962-18968	CREATE	
87-28	18969-18974	TABLE	
87-29	18975-18980	Every	
87-30	18981-18986	night	
87-31	18986-18987	,	
87-32	18988-18994	during	
87-33	18995-18999	some	
87-34	19000-19003	ETL	
87-35	19004-19011	process	
87-36	19011-19012	,	
87-37	19013-19016	you	
87-38	19017-19021	load	
87-39	19022-19026	data	
87-40	19027-19031	into	
87-41	19032-19035	the	
87-42	19036-19041	table	
87-43	19041-19042	:	
87-44	19043-19045	db	
87-45	19045-19046	=	
87-46	19046-19047	#	
87-47	19048-19054	INSERT	
87-48	19055-19059	INTO	
87-49	19060-19069	sale_fact	
87-50	19070-19071	(	
87-51	19071-19079	username	
87-52	19079-19080	,	
87-53	19081-19088	sold_at	
87-54	19088-19089	)	
87-55	19090-19092	db	
87-56	19092-19093	-	
87-57	19093-19094	#	
87-58	19095-19101	SELECT	
87-59	19102-19104	db	
87-60	19104-19105	-	
87-61	19105-19106	#	
87-62	19107-19110	md5	
87-63	19110-19111	(	
87-64	19111-19117	random	
87-65	19117-19118	(	
87-66	19118-19119	)	
87-67	19119-19120	:	
87-68	19120-19121	:	
87-69	19121-19125	text	
87-70	19125-19126	)	
87-71	19127-19129	AS	
87-72	19130-19138	username	
87-73	19138-19139	,	
87-74	19140-19142	db	
87-75	19142-19143	-	
87-76	19143-19144	#	
87-77	19145-19146	'	
87-78	19146-19150	2020	
87-79	19150-19151	-	
87-80	19151-19153	01	
87-81	19153-19154	-	
87-82	19154-19156	01	
87-83	19156-19157	'	
87-84	19157-19158	:	
87-85	19158-19159	:	
87-86	19159-19163	date	
87-87	19164-19165	+	
87-88	19166-19167	(	
87-89	19167-19175	interval	
87-90	19176-19177	'	
87-91	19177-19178	1	
87-92	19179-19182	day	
87-93	19182-19183	'	
87-94	19183-19184	)	
87-95	19185-19186	*	
87-96	19187-19192	round	
87-97	19192-19193	(	
87-98	19193-19199	random	
87-99	19199-19200	(	
87-100	19200-19201	)	
87-101	19202-19203	*	
87-102	19204-19207	365	
87-103	19208-19209	*	
87-104	19210-19211	2	
87-105	19211-19212	)	
87-106	19213-19215	AS	
87-107	19216-19223	sold_at	
87-108	19224-19226	db	
87-109	19226-19227	-	
87-110	19227-19228	#	
87-111	19229-19233	FROM	
87-112	19234-19236	db	
87-113	19236-19237	-	
87-114	19237-19238	#	
87-115	19239-19254	generate_series	
87-116	19254-19255	(	
87-117	19255-19256	1	
87-118	19256-19257	,	
87-119	19258-19264	100000	
87-120	19264-19265	)	
87-121	19265-19266	;	
87-122	19267-19273	INSERT	
87-123	19274-19275	0	
87-124	19276-19282	100000	
87-125	19283-19285	db	
87-126	19285-19286	=	
87-127	19286-19287	#	
87-128	19288-19294	VACUUM	
87-129	19295-19302	ANALYZE	
87-130	19303-19312	sale_fact	
87-131	19312-19313	;	
87-132	19314-19320	VACUUM	
87-133	19321-19323	To	
87-134	19324-19328	fake	
87-135	19329-19330	a	
87-136	19331-19338	loading	
87-137	19339-19346	process	
87-138	19347-19349	we	
87-139	19350-19354	used	
87-140	19355-19361	random	
87-141	19362-19366	data	
87-142	19366-19367	.	

#Text=We inserted 100K rows with random username, and sale dates from 2020-01-01 to two years forward.
88-1	19368-19370	We	
88-2	19371-19379	inserted	
88-3	19380-19384	100K	
88-4	19385-19389	rows	
88-5	19390-19394	with	
88-6	19395-19401	random	
88-7	19402-19410	username	
88-8	19410-19411	,	
88-9	19412-19415	and	
88-10	19416-19420	sale	
88-11	19421-19426	dates	
88-12	19427-19431	from	
88-13	19432-19436	2020	
88-14	19436-19437	-	
88-15	19437-19439	01	
88-16	19439-19440	-	
88-17	19440-19442	01	
88-18	19443-19445	to	
88-19	19446-19449	two	
88-20	19450-19455	years	
88-21	19456-19463	forward	
88-22	19463-19464	.	

#Text=The table is used mostly to produce summary sales reports.
89-1	19465-19468	The	
89-2	19469-19474	table	
89-3	19475-19477	is	
89-4	19478-19482	used	
89-5	19483-19489	mostly	
89-6	19490-19492	to	
89-7	19493-19500	produce	
89-8	19501-19508	summary	
89-9	19509-19514	sales	
89-10	19515-19522	reports	
89-11	19522-19523	.	

#Text=Most reports filter by date to get the sales at a specific period.
90-1	19524-19528	Most	
90-2	19529-19536	reports	
90-3	19537-19543	filter	
90-4	19544-19546	by	
90-5	19547-19551	date	
90-6	19552-19554	to	
90-7	19555-19558	get	
90-8	19559-19562	the	
90-9	19563-19568	sales	
90-10	19569-19571	at	
90-11	19572-19573	a	
90-12	19574-19582	specific	
90-13	19583-19589	period	
90-14	19589-19590	.	

#Text=To speed up range scans you create an index on sold_at:
#Text=db=# CREATE INDEX sale_fact_sold_at_ix ON sale_fact(sold_at);
#Text=CREATE INDEX
#Text=Let's look at the execution plan of a query to fetch all sales made in June 2020:
#Text=db=# EXPLAIN (ANALYZE)
#Text=db-# SELECT *
#Text=db-# FROM sale_fact
#Text=db-# WHERE sold_at BETWEEN '2020-07-01' AND '2020-07-31';
#Text=QUERY PLAN
#Text=-----------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on sale_fact
#Text=(cost=108.30..1107.69 rows=4293 width=41)
#Text=Recheck Cond: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))
#Text=Heap Blocks: exact=927
#Text=Bitmap Index Scan on sale_fact_sold_at_ix
#Text=(cost=0.00..107.22 rows=4293 width=0)
#Text=Index Cond: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))
#Text=Planning Time: 0.191 ms
#Text=Execution Time: 5.906 ms
#Text=After executing the query several times to warm up the cache, the timing settled at ~6ms.
91-1	19591-19593	To	
91-2	19594-19599	speed	
91-3	19600-19602	up	
91-4	19603-19608	range	
91-5	19609-19614	scans	
91-6	19615-19618	you	
91-7	19619-19625	create	
91-8	19626-19628	an	
91-9	19629-19634	index	
91-10	19635-19637	on	
91-11	19638-19645	sold_at	
91-12	19645-19646	:	
91-13	19647-19649	db	
91-14	19649-19650	=	
91-15	19650-19651	#	
91-16	19652-19658	CREATE	
91-17	19659-19664	INDEX	
91-18	19665-19685	sale_fact_sold_at_ix	
91-19	19686-19688	ON	
91-20	19689-19698	sale_fact	
91-21	19698-19699	(	
91-22	19699-19706	sold_at	
91-23	19706-19707	)	
91-24	19707-19708	;	
91-25	19709-19715	CREATE	
91-26	19716-19721	INDEX	
91-27	19722-19727	Let's	
91-28	19728-19732	look	
91-29	19733-19735	at	
91-30	19736-19739	the	
91-31	19740-19749	execution	
91-32	19750-19754	plan	
91-33	19755-19757	of	
91-34	19758-19759	a	
91-35	19760-19765	query	
91-36	19766-19768	to	
91-37	19769-19774	fetch	
91-38	19775-19778	all	
91-39	19779-19784	sales	
91-40	19785-19789	made	
91-41	19790-19792	in	
91-42	19793-19797	June	
91-43	19798-19802	2020	
91-44	19802-19803	:	
91-45	19804-19806	db	
91-46	19806-19807	=	
91-47	19807-19808	#	
91-48	19809-19816	EXPLAIN	
91-49	19817-19818	(	
91-50	19818-19825	ANALYZE	
91-51	19825-19826	)	
91-52	19827-19829	db	
91-53	19829-19830	-	
91-54	19830-19831	#	
91-55	19832-19838	SELECT	
91-56	19839-19840	*	
91-57	19841-19843	db	
91-58	19843-19844	-	
91-59	19844-19845	#	
91-60	19846-19850	FROM	
91-61	19851-19860	sale_fact	
91-62	19861-19863	db	
91-63	19863-19864	-	
91-64	19864-19865	#	
91-65	19866-19871	WHERE	
91-66	19872-19879	sold_at	
91-67	19880-19887	BETWEEN	
91-68	19888-19889	'	
91-69	19889-19893	2020	
91-70	19893-19894	-	
91-71	19894-19896	07	
91-72	19896-19897	-	
91-73	19897-19899	01	
91-74	19899-19900	'	
91-75	19901-19904	AND	
91-76	19905-19906	'	
91-77	19906-19910	2020	
91-78	19910-19911	-	
91-79	19911-19913	07	
91-80	19913-19914	-	
91-81	19914-19916	31	
91-82	19916-19917	'	
91-83	19917-19918	;	
91-84	19919-19924	QUERY	
91-85	19925-19929	PLAN	
91-86	19930-19931	-	
91-87	19931-19932	-	
91-88	19932-19933	-	
91-89	19933-19934	-	
91-90	19934-19935	-	
91-91	19935-19936	-	
91-92	19936-19937	-	
91-93	19937-19938	-	
91-94	19938-19939	-	
91-95	19939-19940	-	
91-96	19940-19941	-	
91-97	19941-19942	-	
91-98	19942-19943	-	
91-99	19943-19944	-	
91-100	19944-19945	-	
91-101	19945-19946	-	
91-102	19946-19947	-	
91-103	19947-19948	-	
91-104	19948-19949	-	
91-105	19949-19950	-	
91-106	19950-19951	-	
91-107	19951-19952	-	
91-108	19952-19953	-	
91-109	19953-19954	-	
91-110	19954-19955	-	
91-111	19955-19956	-	
91-112	19956-19957	-	
91-113	19957-19958	-	
91-114	19958-19959	-	
91-115	19959-19960	-	
91-116	19960-19961	-	
91-117	19961-19962	-	
91-118	19962-19963	-	
91-119	19963-19964	-	
91-120	19964-19965	-	
91-121	19965-19966	-	
91-122	19966-19967	-	
91-123	19967-19968	-	
91-124	19968-19969	-	
91-125	19969-19970	-	
91-126	19970-19971	-	
91-127	19971-19972	-	
91-128	19972-19973	-	
91-129	19973-19974	-	
91-130	19974-19975	-	
91-131	19975-19976	-	
91-132	19976-19977	-	
91-133	19977-19978	-	
91-134	19978-19979	-	
91-135	19979-19980	-	
91-136	19980-19981	-	
91-137	19981-19982	-	
91-138	19982-19983	-	
91-139	19983-19984	-	
91-140	19984-19985	-	
91-141	19985-19986	-	
91-142	19986-19987	-	
91-143	19987-19988	-	
91-144	19988-19989	-	
91-145	19989-19990	-	
91-146	19990-19991	-	
91-147	19991-19992	-	
91-148	19992-19993	-	
91-149	19993-19994	-	
91-150	19994-19995	-	
91-151	19995-19996	-	
91-152	19996-19997	-	
91-153	19997-19998	-	
91-154	19998-19999	-	
91-155	19999-20000	-	
91-156	20000-20001	-	
91-157	20001-20002	-	
91-158	20002-20003	-	
91-159	20003-20004	-	
91-160	20004-20005	-	
91-161	20005-20006	-	
91-162	20006-20007	-	
91-163	20007-20008	-	
91-164	20008-20009	-	
91-165	20009-20010	-	
91-166	20010-20011	-	
91-167	20011-20012	-	
91-168	20012-20013	-	
91-169	20013-20014	-	
91-170	20014-20015	-	
91-171	20015-20016	-	
91-172	20016-20017	-	
91-173	20017-20018	-	
91-174	20018-20019	-	
91-175	20019-20020	-	
91-176	20020-20021	-	
91-177	20021-20022	-	
91-178	20022-20023	-	
91-179	20023-20024	-	
91-180	20024-20025	-	
91-181	20026-20032	Bitmap	
91-182	20033-20037	Heap	
91-183	20038-20042	Scan	
91-184	20043-20045	on	
91-185	20046-20055	sale_fact	
91-186	20056-20057	(	
91-187	20057-20061	cost	
91-188	20061-20062	=	
91-189	20062-20068	108.30	
91-190	20068-20069	.	
91-191	20069-20077	.1107.69	
91-192	20078-20082	rows	
91-193	20082-20083	=	
91-194	20083-20087	4293	
91-195	20088-20093	width	
91-196	20093-20094	=	
91-197	20094-20096	41	
91-198	20096-20097	)	
91-199	20098-20105	Recheck	
91-200	20106-20110	Cond	
91-201	20110-20111	:	
91-202	20112-20113	(	
91-203	20113-20114	(	
91-204	20114-20121	sold_at	
91-205	20122-20123	>	
91-206	20123-20124	=	
91-207	20125-20126	'	
91-208	20126-20130	2020	
91-209	20130-20131	-	
91-210	20131-20133	07	
91-211	20133-20134	-	
91-212	20134-20136	01	
91-213	20136-20137	'	
91-214	20137-20138	:	
91-215	20138-20139	:	
91-216	20139-20143	date	
91-217	20143-20144	)	
91-218	20145-20148	AND	
91-219	20149-20150	(	
91-220	20150-20157	sold_at	
91-221	20158-20159	<	
91-222	20159-20160	=	
91-223	20161-20162	'	
91-224	20162-20166	2020	
91-225	20166-20167	-	
91-226	20167-20169	07	
91-227	20169-20170	-	
91-228	20170-20172	31	
91-229	20172-20173	'	
91-230	20173-20174	:	
91-231	20174-20175	:	
91-232	20175-20179	date	
91-233	20179-20180	)	
91-234	20180-20181	)	
91-235	20182-20186	Heap	
91-236	20187-20193	Blocks	
91-237	20193-20194	:	
91-238	20195-20200	exact	
91-239	20200-20201	=	
91-240	20201-20204	927	
91-241	20205-20211	Bitmap	
91-242	20212-20217	Index	
91-243	20218-20222	Scan	
91-244	20223-20225	on	
91-245	20226-20246	sale_fact_sold_at_ix	
91-246	20247-20248	(	
91-247	20248-20252	cost	
91-248	20252-20253	=	
91-249	20253-20257	0.00	
91-250	20257-20258	.	
91-251	20258-20265	.107.22	
91-252	20266-20270	rows	
91-253	20270-20271	=	
91-254	20271-20275	4293	
91-255	20276-20281	width	
91-256	20281-20282	=	
91-257	20282-20283	0	
91-258	20283-20284	)	
91-259	20285-20290	Index	
91-260	20291-20295	Cond	
91-261	20295-20296	:	
91-262	20297-20298	(	
91-263	20298-20299	(	
91-264	20299-20306	sold_at	
91-265	20307-20308	>	
91-266	20308-20309	=	
91-267	20310-20311	'	
91-268	20311-20315	2020	
91-269	20315-20316	-	
91-270	20316-20318	07	
91-271	20318-20319	-	
91-272	20319-20321	01	
91-273	20321-20322	'	
91-274	20322-20323	:	
91-275	20323-20324	:	
91-276	20324-20328	date	
91-277	20328-20329	)	
91-278	20330-20333	AND	
91-279	20334-20335	(	
91-280	20335-20342	sold_at	
91-281	20343-20344	<	
91-282	20344-20345	=	
91-283	20346-20347	'	
91-284	20347-20351	2020	
91-285	20351-20352	-	
91-286	20352-20354	07	
91-287	20354-20355	-	
91-288	20355-20357	31	
91-289	20357-20358	'	
91-290	20358-20359	:	
91-291	20359-20360	:	
91-292	20360-20364	date	
91-293	20364-20365	)	
91-294	20365-20366	)	
91-295	20367-20375	Planning	
91-296	20376-20380	Time	
91-297	20380-20381	:	
91-298	20382-20387	0.191	
91-299	20388-20390	ms	
91-300	20391-20400	Execution	
91-301	20401-20405	Time	
91-302	20405-20406	:	
91-303	20407-20412	5.906	
91-304	20413-20415	ms	
91-305	20416-20421	After	
91-306	20422-20431	executing	
91-307	20432-20435	the	
91-308	20436-20441	query	
91-309	20442-20449	several	
91-310	20450-20455	times	
91-311	20456-20458	to	
91-312	20459-20463	warm	
91-313	20464-20466	up	
91-314	20467-20470	the	
91-315	20471-20476	cache	
91-316	20476-20477	,	
91-317	20478-20481	the	
91-318	20482-20488	timing	
91-319	20489-20496	settled	
91-320	20497-20499	at	
91-321	20500-20501	~	
91-322	20501-20504	6ms	
91-323	20504-20505	.	

#Text=Bitmap Scan
#Text=Looking at the execution plan, we can see that the database used a bitmap scan.
92-1	20506-20512	Bitmap	
92-2	20513-20517	Scan	
92-3	20518-20525	Looking	
92-4	20526-20528	at	
92-5	20529-20532	the	
92-6	20533-20542	execution	
92-7	20543-20547	plan	
92-8	20547-20548	,	
92-9	20549-20551	we	
92-10	20552-20555	can	
92-11	20556-20559	see	
92-12	20560-20564	that	
92-13	20565-20568	the	
92-14	20569-20577	database	
92-15	20578-20582	used	
92-16	20583-20584	a	
92-17	20585-20591	bitmap	
92-18	20592-20596	scan	
92-19	20596-20597	.	

#Text=A bitmap scan works in two stages:
#Text=Bitmap Index Scan: Go through the entire index sale_fact_sold_at_ix and map all the table pages that contain relevant rows.
93-1	20598-20599	A	
93-2	20600-20606	bitmap	
93-3	20607-20611	scan	
93-4	20612-20617	works	
93-5	20618-20620	in	
93-6	20621-20624	two	
93-7	20625-20631	stages	
93-8	20631-20632	:	
93-9	20633-20639	Bitmap	
93-10	20640-20645	Index	
93-11	20646-20650	Scan	
93-12	20650-20651	:	
93-13	20652-20654	Go	
93-14	20655-20662	through	
93-15	20663-20666	the	
93-16	20667-20673	entire	
93-17	20674-20679	index	
93-18	20680-20700	sale_fact_sold_at_ix	
93-19	20701-20704	and	
93-20	20705-20708	map	
93-21	20709-20712	all	
93-22	20713-20716	the	
93-23	20717-20722	table	
93-24	20723-20728	pages	
93-25	20729-20733	that	
93-26	20734-20741	contain	
93-27	20742-20750	relevant	
93-28	20751-20755	rows	
93-29	20755-20756	.	

#Text=Bitmap Heap Scan: Read the pages that contain relevant rows, and find the rows inside these pages that satisfy the condition.
94-1	20757-20763	Bitmap	
94-2	20764-20768	Heap	
94-3	20769-20773	Scan	
94-4	20773-20774	:	
94-5	20775-20779	Read	
94-6	20780-20783	the	
94-7	20784-20789	pages	
94-8	20790-20794	that	
94-9	20795-20802	contain	
94-10	20803-20811	relevant	
94-11	20812-20816	rows	
94-12	20816-20817	,	
94-13	20818-20821	and	
94-14	20822-20826	find	
94-15	20827-20830	the	
94-16	20831-20835	rows	
94-17	20836-20842	inside	
94-18	20843-20848	these	
94-19	20849-20854	pages	
94-20	20855-20859	that	
94-21	20860-20867	satisfy	
94-22	20868-20871	the	
94-23	20872-20881	condition	
94-24	20881-20882	.	

#Text=Pages can contain multiple rows.
95-1	20883-20888	Pages	
95-2	20889-20892	can	
95-3	20893-20900	contain	
95-4	20901-20909	multiple	
95-5	20910-20914	rows	
95-6	20914-20915	.	

#Text=The first step uses the index to find pages.
96-1	20916-20919	The	
96-2	20920-20925	first	
96-3	20926-20930	step	
96-4	20931-20935	uses	
96-5	20936-20939	the	
96-6	20940-20945	index	
96-7	20946-20948	to	
96-8	20949-20953	find	
96-9	20954-20959	pages	
96-10	20959-20960	.	

#Text=The second step check for rows inside these pages, hence the "Recheck Cond" operation in the execution plan.
97-1	20961-20964	The	
97-2	20965-20971	second	
97-3	20972-20976	step	
97-4	20977-20982	check	
97-5	20983-20986	for	
97-6	20987-20991	rows	
97-7	20992-20998	inside	
97-8	20999-21004	these	
97-9	21005-21010	pages	
97-10	21010-21011	,	
97-11	21012-21017	hence	
97-12	21018-21021	the	
97-13	21022-21023	"	
97-14	21023-21030	Recheck	
97-15	21031-21035	Cond	
97-16	21035-21036	"	
97-17	21037-21046	operation	
97-18	21047-21049	in	
97-19	21050-21053	the	
97-20	21054-21063	execution	
97-21	21064-21068	plan	
97-22	21068-21069	.	

#Text=At this point many DBAs and developers will call it a day and move on to the next query.
98-1	21070-21072	At	
98-2	21073-21077	this	
98-3	21078-21083	point	
98-4	21084-21088	many	
98-5	21089-21093	DBAs	
98-6	21094-21097	and	
98-7	21098-21108	developers	
98-8	21109-21113	will	
98-9	21114-21118	call	
98-10	21119-21121	it	
98-11	21122-21123	a	
98-12	21124-21127	day	
98-13	21128-21131	and	
98-14	21132-21136	move	
98-15	21137-21139	on	
98-16	21140-21142	to	
98-17	21143-21146	the	
98-18	21147-21151	next	
98-19	21152-21157	query	
98-20	21157-21158	.	

#Text=BUT, there's a way to make this query better.
99-1	21159-21162	BUT	
99-2	21162-21163	,	
99-3	21164-21171	there's	
99-4	21172-21173	a	
99-5	21174-21177	way	
99-6	21178-21180	to	
99-7	21181-21185	make	
99-8	21186-21190	this	
99-9	21191-21196	query	
99-10	21197-21203	better	
99-11	21203-21204	.	

#Text=Index Scan
#Text=To make things better, we'll make a small change in how we load the data.
#Text=db=# TRUNCATE sale_fact;
#Text=TRUNCATE TABLE
#Text=db=# INSERT INTO sale_fact (username, sold_at)
#Text=db-# SELECT
#Text=db-#
#Text=md5(random()::text) AS username,
#Text=db-#
#Text='2020-01-01'::date + (interval '1 day') * round(random() * 365 * 2) AS sold_at
#Text=db-# FROM
#Text=db-#
#Text=generate_series(1, 100000)
#Text=db-# ORDER BY sold_at;
#Text=INSERT 0 100000
#Text=db=# VACUUM ANALYZE sale_fact;
#Text=VACUUM
#Text=This time, we loaded the data sorted by the sold_at.
100-1	21205-21210	Index	
100-2	21211-21215	Scan	
100-3	21216-21218	To	
100-4	21219-21223	make	
100-5	21224-21230	things	
100-6	21231-21237	better	
100-7	21237-21238	,	
100-8	21239-21244	we'll	
100-9	21245-21249	make	
100-10	21250-21251	a	
100-11	21252-21257	small	
100-12	21258-21264	change	
100-13	21265-21267	in	
100-14	21268-21271	how	
100-15	21272-21274	we	
100-16	21275-21279	load	
100-17	21280-21283	the	
100-18	21284-21288	data	
100-19	21288-21289	.	
100-20	21290-21292	db	
100-21	21292-21293	=	
100-22	21293-21294	#	
100-23	21295-21303	TRUNCATE	
100-24	21304-21313	sale_fact	
100-25	21313-21314	;	
100-26	21315-21323	TRUNCATE	
100-27	21324-21329	TABLE	
100-28	21330-21332	db	
100-29	21332-21333	=	
100-30	21333-21334	#	
100-31	21335-21341	INSERT	
100-32	21342-21346	INTO	
100-33	21347-21356	sale_fact	
100-34	21357-21358	(	
100-35	21358-21366	username	
100-36	21366-21367	,	
100-37	21368-21375	sold_at	
100-38	21375-21376	)	
100-39	21377-21379	db	
100-40	21379-21380	-	
100-41	21380-21381	#	
100-42	21382-21388	SELECT	
100-43	21389-21391	db	
100-44	21391-21392	-	
100-45	21392-21393	#	
100-46	21394-21397	md5	
100-47	21397-21398	(	
100-48	21398-21404	random	
100-49	21404-21405	(	
100-50	21405-21406	)	
100-51	21406-21407	:	
100-52	21407-21408	:	
100-53	21408-21412	text	
100-54	21412-21413	)	
100-55	21414-21416	AS	
100-56	21417-21425	username	
100-57	21425-21426	,	
100-58	21427-21429	db	
100-59	21429-21430	-	
100-60	21430-21431	#	
100-61	21432-21433	'	
100-62	21433-21437	2020	
100-63	21437-21438	-	
100-64	21438-21440	01	
100-65	21440-21441	-	
100-66	21441-21443	01	
100-67	21443-21444	'	
100-68	21444-21445	:	
100-69	21445-21446	:	
100-70	21446-21450	date	
100-71	21451-21452	+	
100-72	21453-21454	(	
100-73	21454-21462	interval	
100-74	21463-21464	'	
100-75	21464-21465	1	
100-76	21466-21469	day	
100-77	21469-21470	'	
100-78	21470-21471	)	
100-79	21472-21473	*	
100-80	21474-21479	round	
100-81	21479-21480	(	
100-82	21480-21486	random	
100-83	21486-21487	(	
100-84	21487-21488	)	
100-85	21489-21490	*	
100-86	21491-21494	365	
100-87	21495-21496	*	
100-88	21497-21498	2	
100-89	21498-21499	)	
100-90	21500-21502	AS	
100-91	21503-21510	sold_at	
100-92	21511-21513	db	
100-93	21513-21514	-	
100-94	21514-21515	#	
100-95	21516-21520	FROM	
100-96	21521-21523	db	
100-97	21523-21524	-	
100-98	21524-21525	#	
100-99	21526-21541	generate_series	
100-100	21541-21542	(	
100-101	21542-21543	1	
100-102	21543-21544	,	
100-103	21545-21551	100000	
100-104	21551-21552	)	
100-105	21553-21555	db	
100-106	21555-21556	-	
100-107	21556-21557	#	
100-108	21558-21563	ORDER	
100-109	21564-21566	BY	
100-110	21567-21574	sold_at	
100-111	21574-21575	;	
100-112	21576-21582	INSERT	
100-113	21583-21584	0	
100-114	21585-21591	100000	
100-115	21592-21594	db	
100-116	21594-21595	=	
100-117	21595-21596	#	
100-118	21597-21603	VACUUM	
100-119	21604-21611	ANALYZE	
100-120	21612-21621	sale_fact	
100-121	21621-21622	;	
100-122	21623-21629	VACUUM	
100-123	21630-21634	This	
100-124	21635-21639	time	
100-125	21639-21640	,	
100-126	21641-21643	we	
100-127	21644-21650	loaded	
100-128	21651-21654	the	
100-129	21655-21659	data	
100-130	21660-21666	sorted	
100-131	21667-21669	by	
100-132	21670-21673	the	
100-133	21674-21681	sold_at	
100-134	21681-21682	.	

#Text=Let's see what the execution plan for the exact same query looks like now:
#Text=db=# EXPLAIN (ANALYZE)
#Text=db-# SELECT *
#Text=db-# FROM sale_fact
#Text=db-# WHERE sold_at BETWEEN '2020-07-01' AND '2020-07-31';
#Text=QUERY PLAN
#Text=---------------------------------------------------------------------------------------------
#Text=Index Scan using sale_fact_sold_at_ix on sale_fact (cost=0.29..184.73 rows=4272 width=41)
#Text=Index Cond: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))
#Text=Planning Time: 0.145 ms
#Text=Execution Time: 2.294 ms
#Text=After running the query several times we get a stable timing at round 2.3ms.
101-1	21683-21688	Let's	
101-2	21689-21692	see	
101-3	21693-21697	what	
101-4	21698-21701	the	
101-5	21702-21711	execution	
101-6	21712-21716	plan	
101-7	21717-21720	for	
101-8	21721-21724	the	
101-9	21725-21730	exact	
101-10	21731-21735	same	
101-11	21736-21741	query	
101-12	21742-21747	looks	
101-13	21748-21752	like	
101-14	21753-21756	now	
101-15	21756-21757	:	
101-16	21758-21760	db	
101-17	21760-21761	=	
101-18	21761-21762	#	
101-19	21763-21770	EXPLAIN	
101-20	21771-21772	(	
101-21	21772-21779	ANALYZE	
101-22	21779-21780	)	
101-23	21781-21783	db	
101-24	21783-21784	-	
101-25	21784-21785	#	
101-26	21786-21792	SELECT	
101-27	21793-21794	*	
101-28	21795-21797	db	
101-29	21797-21798	-	
101-30	21798-21799	#	
101-31	21800-21804	FROM	
101-32	21805-21814	sale_fact	
101-33	21815-21817	db	
101-34	21817-21818	-	
101-35	21818-21819	#	
101-36	21820-21825	WHERE	
101-37	21826-21833	sold_at	
101-38	21834-21841	BETWEEN	
101-39	21842-21843	'	
101-40	21843-21847	2020	
101-41	21847-21848	-	
101-42	21848-21850	07	
101-43	21850-21851	-	
101-44	21851-21853	01	
101-45	21853-21854	'	
101-46	21855-21858	AND	
101-47	21859-21860	'	
101-48	21860-21864	2020	
101-49	21864-21865	-	
101-50	21865-21867	07	
101-51	21867-21868	-	
101-52	21868-21870	31	
101-53	21870-21871	'	
101-54	21871-21872	;	
101-55	21873-21878	QUERY	
101-56	21879-21883	PLAN	
101-57	21884-21885	-	
101-58	21885-21886	-	
101-59	21886-21887	-	
101-60	21887-21888	-	
101-61	21888-21889	-	
101-62	21889-21890	-	
101-63	21890-21891	-	
101-64	21891-21892	-	
101-65	21892-21893	-	
101-66	21893-21894	-	
101-67	21894-21895	-	
101-68	21895-21896	-	
101-69	21896-21897	-	
101-70	21897-21898	-	
101-71	21898-21899	-	
101-72	21899-21900	-	
101-73	21900-21901	-	
101-74	21901-21902	-	
101-75	21902-21903	-	
101-76	21903-21904	-	
101-77	21904-21905	-	
101-78	21905-21906	-	
101-79	21906-21907	-	
101-80	21907-21908	-	
101-81	21908-21909	-	
101-82	21909-21910	-	
101-83	21910-21911	-	
101-84	21911-21912	-	
101-85	21912-21913	-	
101-86	21913-21914	-	
101-87	21914-21915	-	
101-88	21915-21916	-	
101-89	21916-21917	-	
101-90	21917-21918	-	
101-91	21918-21919	-	
101-92	21919-21920	-	
101-93	21920-21921	-	
101-94	21921-21922	-	
101-95	21922-21923	-	
101-96	21923-21924	-	
101-97	21924-21925	-	
101-98	21925-21926	-	
101-99	21926-21927	-	
101-100	21927-21928	-	
101-101	21928-21929	-	
101-102	21929-21930	-	
101-103	21930-21931	-	
101-104	21931-21932	-	
101-105	21932-21933	-	
101-106	21933-21934	-	
101-107	21934-21935	-	
101-108	21935-21936	-	
101-109	21936-21937	-	
101-110	21937-21938	-	
101-111	21938-21939	-	
101-112	21939-21940	-	
101-113	21940-21941	-	
101-114	21941-21942	-	
101-115	21942-21943	-	
101-116	21943-21944	-	
101-117	21944-21945	-	
101-118	21945-21946	-	
101-119	21946-21947	-	
101-120	21947-21948	-	
101-121	21948-21949	-	
101-122	21949-21950	-	
101-123	21950-21951	-	
101-124	21951-21952	-	
101-125	21952-21953	-	
101-126	21953-21954	-	
101-127	21954-21955	-	
101-128	21955-21956	-	
101-129	21956-21957	-	
101-130	21957-21958	-	
101-131	21958-21959	-	
101-132	21959-21960	-	
101-133	21960-21961	-	
101-134	21961-21962	-	
101-135	21962-21963	-	
101-136	21963-21964	-	
101-137	21964-21965	-	
101-138	21965-21966	-	
101-139	21966-21967	-	
101-140	21967-21968	-	
101-141	21968-21969	-	
101-142	21969-21970	-	
101-143	21970-21971	-	
101-144	21971-21972	-	
101-145	21972-21973	-	
101-146	21973-21974	-	
101-147	21974-21975	-	
101-148	21975-21976	-	
101-149	21976-21977	-	
101-150	21978-21983	Index	
101-151	21984-21988	Scan	
101-152	21989-21994	using	
101-153	21995-22015	sale_fact_sold_at_ix	
101-154	22016-22018	on	
101-155	22019-22028	sale_fact	
101-156	22029-22030	(	
101-157	22030-22034	cost	
101-158	22034-22035	=	
101-159	22035-22039	0.29	
101-160	22039-22040	.	
101-161	22040-22047	.184.73	
101-162	22048-22052	rows	
101-163	22052-22053	=	
101-164	22053-22057	4272	
101-165	22058-22063	width	
101-166	22063-22064	=	
101-167	22064-22066	41	
101-168	22066-22067	)	
101-169	22068-22073	Index	
101-170	22074-22078	Cond	
101-171	22078-22079	:	
101-172	22080-22081	(	
101-173	22081-22082	(	
101-174	22082-22089	sold_at	
101-175	22090-22091	>	
101-176	22091-22092	=	
101-177	22093-22094	'	
101-178	22094-22098	2020	
101-179	22098-22099	-	
101-180	22099-22101	07	
101-181	22101-22102	-	
101-182	22102-22104	01	
101-183	22104-22105	'	
101-184	22105-22106	:	
101-185	22106-22107	:	
101-186	22107-22111	date	
101-187	22111-22112	)	
101-188	22113-22116	AND	
101-189	22117-22118	(	
101-190	22118-22125	sold_at	
101-191	22126-22127	<	
101-192	22127-22128	=	
101-193	22129-22130	'	
101-194	22130-22134	2020	
101-195	22134-22135	-	
101-196	22135-22137	07	
101-197	22137-22138	-	
101-198	22138-22140	31	
101-199	22140-22141	'	
101-200	22141-22142	:	
101-201	22142-22143	:	
101-202	22143-22147	date	
101-203	22147-22148	)	
101-204	22148-22149	)	
101-205	22150-22158	Planning	
101-206	22159-22163	Time	
101-207	22163-22164	:	
101-208	22165-22170	0.145	
101-209	22171-22173	ms	
101-210	22174-22183	Execution	
101-211	22184-22188	Time	
101-212	22188-22189	:	
101-213	22190-22195	2.294	
101-214	22196-22198	ms	
101-215	22199-22204	After	
101-216	22205-22212	running	
101-217	22213-22216	the	
101-218	22217-22222	query	
101-219	22223-22230	several	
101-220	22231-22236	times	
101-221	22237-22239	we	
101-222	22240-22243	get	
101-223	22244-22245	a	
101-224	22246-22252	stable	
101-225	22253-22259	timing	
101-226	22260-22262	at	
101-227	22263-22268	round	
101-228	22269-22274	2.3ms	
101-229	22274-22275	.	

#Text=Compared to the previous query that took ~6ms, we get a consistent saving of ~60%.
102-1	22276-22284	Compared	
102-2	22285-22287	to	
102-3	22288-22291	the	
102-4	22292-22300	previous	
102-5	22301-22306	query	
102-6	22307-22311	that	
102-7	22312-22316	took	
102-8	22317-22318	~	
102-9	22318-22321	6ms	
102-10	22321-22322	,	
102-11	22323-22325	we	
102-12	22326-22329	get	
102-13	22330-22331	a	
102-14	22332-22342	consistent	
102-15	22343-22349	saving	
102-16	22350-22352	of	
102-17	22353-22354	~	
102-18	22354-22357	60%	
102-19	22357-22358	.	

#Text=Another thing we can see right away, is that the database did not use a bitmap scan this time, but a "regular" index scan.
103-1	22359-22366	Another	
103-2	22367-22372	thing	
103-3	22373-22375	we	
103-4	22376-22379	can	
103-5	22380-22383	see	
103-6	22384-22389	right	
103-7	22390-22394	away	
103-8	22394-22395	,	
103-9	22396-22398	is	
103-10	22399-22403	that	
103-11	22404-22407	the	
103-12	22408-22416	database	
103-13	22417-22420	did	
103-14	22421-22424	not	
103-15	22425-22428	use	
103-16	22429-22430	a	
103-17	22431-22437	bitmap	
103-18	22438-22442	scan	
103-19	22443-22447	this	
103-20	22448-22452	time	
103-21	22452-22453	,	
103-22	22454-22457	but	
103-23	22458-22459	a	
103-24	22460-22461	"	
103-25	22461-22468	regular	
103-26	22468-22469	"	
103-27	22470-22475	index	
103-28	22476-22480	scan	
103-29	22480-22481	.	

#Text=Why is that?
104-1	22482-22485	Why	
104-2	22486-22488	is	
104-3	22489-22493	that	
104-4	22493-22494	?	

#Text=Correlation
#Text=When the database is analyzing a table it collects all sort of statistics.
105-1	22495-22506	Correlation	
105-2	22507-22511	When	
105-3	22512-22515	the	
105-4	22516-22524	database	
105-5	22525-22527	is	
105-6	22528-22537	analyzing	
105-7	22538-22539	a	
105-8	22540-22545	table	
105-9	22546-22548	it	
105-10	22549-22557	collects	
105-11	22558-22561	all	
105-12	22562-22566	sort	
105-13	22567-22569	of	
105-14	22570-22580	statistics	
105-15	22580-22581	.	

#Text=One of those statistics is correlation:
#Text=Statistical correlation between physical row ordering and logical ordering of the column values.
106-1	22582-22585	One	
106-2	22586-22588	of	
106-3	22589-22594	those	
106-4	22595-22605	statistics	
106-5	22606-22608	is	
106-6	22609-22620	correlation	
106-7	22620-22621	:	
106-8	22622-22633	Statistical	
106-9	22634-22645	correlation	
106-10	22646-22653	between	
106-11	22654-22662	physical	
106-12	22663-22666	row	
106-13	22667-22675	ordering	
106-14	22676-22679	and	
106-15	22680-22687	logical	
106-16	22688-22696	ordering	
106-17	22697-22699	of	
106-18	22700-22703	the	
106-19	22704-22710	column	
106-20	22711-22717	values	
106-21	22717-22718	.	

#Text=This ranges from -1 to +1.
107-1	22719-22723	This	
107-2	22724-22730	ranges	
107-3	22731-22735	from	
107-4	22736-22737	-	
107-5	22737-22738	1	
107-6	22739-22741	to	
107-7	22742-22743	+	
107-8	22743-22744	1	
107-9	22744-22745	.	

#Text=When the value is near -1 or +1, an index scan on the column will be estimated to be cheaper than when it is near zero, due to reduction of random access to the disk.
108-1	22746-22750	When	
108-2	22751-22754	the	
108-3	22755-22760	value	
108-4	22761-22763	is	
108-5	22764-22768	near	
108-6	22769-22770	-	
108-7	22770-22771	1	
108-8	22772-22774	or	
108-9	22775-22776	+	
108-10	22776-22777	1	
108-11	22777-22778	,	
108-12	22779-22781	an	
108-13	22782-22787	index	
108-14	22788-22792	scan	
108-15	22793-22795	on	
108-16	22796-22799	the	
108-17	22800-22806	column	
108-18	22807-22811	will	
108-19	22812-22814	be	
108-20	22815-22824	estimated	
108-21	22825-22827	to	
108-22	22828-22830	be	
108-23	22831-22838	cheaper	
108-24	22839-22843	than	
108-25	22844-22848	when	
108-26	22849-22851	it	
108-27	22852-22854	is	
108-28	22855-22859	near	
108-29	22860-22864	zero	
108-30	22864-22865	,	
108-31	22866-22869	due	
108-32	22870-22872	to	
108-33	22873-22882	reduction	
108-34	22883-22885	of	
108-35	22886-22892	random	
108-36	22893-22899	access	
108-37	22900-22902	to	
108-38	22903-22906	the	
108-39	22907-22911	disk	
108-40	22911-22912	.	

#Text=As the official documentation explains, the correlation measures how "sorted" values of a specific column are on disk.
#Text=correlation = 1
#Text=When the correlation is 1, or close to 1, it means the pages in the tables are stored on disk in roughly the same order as the rows in the table.
109-1	22913-22915	As	
109-2	22916-22919	the	
109-3	22920-22928	official	
109-4	22929-22942	documentation	
109-5	22943-22951	explains	
109-6	22951-22952	,	
109-7	22953-22956	the	
109-8	22957-22968	correlation	
109-9	22969-22977	measures	
109-10	22978-22981	how	
109-11	22982-22983	"	
109-12	22983-22989	sorted	
109-13	22989-22990	"	
109-14	22991-22997	values	
109-15	22998-23000	of	
109-16	23001-23002	a	
109-17	23003-23011	specific	
109-18	23012-23018	column	
109-19	23019-23022	are	
109-20	23023-23025	on	
109-21	23026-23030	disk	
109-22	23030-23031	.	
109-23	23032-23043	correlation	
109-24	23044-23045	=	
109-25	23046-23047	1	
109-26	23048-23052	When	
109-27	23053-23056	the	
109-28	23057-23068	correlation	
109-29	23069-23071	is	
109-30	23072-23073	1	
109-31	23073-23074	,	
109-32	23075-23077	or	
109-33	23078-23083	close	
109-34	23084-23086	to	
109-35	23087-23088	1	
109-36	23088-23089	,	
109-37	23090-23092	it	
109-38	23093-23098	means	
109-39	23099-23102	the	
109-40	23103-23108	pages	
109-41	23109-23111	in	
109-42	23112-23115	the	
109-43	23116-23122	tables	
109-44	23123-23126	are	
109-45	23127-23133	stored	
109-46	23134-23136	on	
109-47	23137-23141	disk	
109-48	23142-23144	in	
109-49	23145-23152	roughly	
109-50	23153-23156	the	
109-51	23157-23161	same	
109-52	23162-23167	order	
109-53	23168-23170	as	
109-54	23171-23174	the	
109-55	23175-23179	rows	
109-56	23180-23182	in	
109-57	23183-23186	the	
109-58	23187-23192	table	
109-59	23192-23193	.	

#Text=This is actually very common.
110-1	23194-23198	This	
110-2	23199-23201	is	
110-3	23202-23210	actually	
110-4	23211-23215	very	
110-5	23216-23222	common	
110-6	23222-23223	.	

#Text=For example, auto incrementing ID's will usually have a correlation close to 1.
111-1	23224-23227	For	
111-2	23228-23235	example	
111-3	23235-23236	,	
111-4	23237-23241	auto	
111-5	23242-23254	incrementing	
111-6	23255-23259	ID's	
111-7	23260-23264	will	
111-8	23265-23272	usually	
111-9	23273-23277	have	
111-10	23278-23279	a	
111-11	23280-23291	correlation	
111-12	23292-23297	close	
111-13	23298-23300	to	
111-14	23301-23302	1	
111-15	23302-23303	.	

#Text=Date and timestamp columns that keeps track of when rows were created will also usually have a correlation close to 1.
112-1	23304-23308	Date	
112-2	23309-23312	and	
112-3	23313-23322	timestamp	
112-4	23323-23330	columns	
112-5	23331-23335	that	
112-6	23336-23341	keeps	
112-7	23342-23347	track	
112-8	23348-23350	of	
112-9	23351-23355	when	
112-10	23356-23360	rows	
112-11	23361-23365	were	
112-12	23366-23373	created	
112-13	23374-23378	will	
112-14	23379-23383	also	
112-15	23384-23391	usually	
112-16	23392-23396	have	
112-17	23397-23398	a	
112-18	23399-23410	correlation	
112-19	23411-23416	close	
112-20	23417-23419	to	
112-21	23420-23421	1	
112-22	23421-23422	.	

#Text=When the correlation is -1, the pages of the table are sorted in reverse order relative to the column.
#Text=correlation ~ 0
#Text=When the correlation is close to 0, it mean the values in the column have no or very little correlation to how the pages of the table are stored.
113-1	23423-23427	When	
113-2	23428-23431	the	
113-3	23432-23443	correlation	
113-4	23444-23446	is	
113-5	23447-23448	-	
113-6	23448-23449	1	
113-7	23449-23450	,	
113-8	23451-23454	the	
113-9	23455-23460	pages	
113-10	23461-23463	of	
113-11	23464-23467	the	
113-12	23468-23473	table	
113-13	23474-23477	are	
113-14	23478-23484	sorted	
113-15	23485-23487	in	
113-16	23488-23495	reverse	
113-17	23496-23501	order	
113-18	23502-23510	relative	
113-19	23511-23513	to	
113-20	23514-23517	the	
113-21	23518-23524	column	
113-22	23524-23525	.	
113-23	23526-23537	correlation	
113-24	23538-23539	~	
113-25	23540-23541	0	
113-26	23542-23546	When	
113-27	23547-23550	the	
113-28	23551-23562	correlation	
113-29	23563-23565	is	
113-30	23566-23571	close	
113-31	23572-23574	to	
113-32	23575-23576	0	
113-33	23576-23577	,	
113-34	23578-23580	it	
113-35	23581-23585	mean	
113-36	23586-23589	the	
113-37	23590-23596	values	
113-38	23597-23599	in	
113-39	23600-23603	the	
113-40	23604-23610	column	
113-41	23611-23615	have	
113-42	23616-23618	no	
113-43	23619-23621	or	
113-44	23622-23626	very	
113-45	23627-23633	little	
113-46	23634-23645	correlation	
113-47	23646-23648	to	
113-48	23649-23652	how	
113-49	23653-23656	the	
113-50	23657-23662	pages	
113-51	23663-23665	of	
113-52	23666-23669	the	
113-53	23670-23675	table	
113-54	23676-23679	are	
113-55	23680-23686	stored	
113-56	23686-23687	.	

#Text=Going back to our sale_fact table, when we loaded the data into the table without sorting it first, these were the correlations:
#Text=db=# SELECT tablename, attname, correlation
#Text=db-# FROM pg_stats
#Text=db=# WHERE tablename = 'sale_fact';
#Text=tablename | attname
#Text=| correlation
#Text=-----------+----------+--------------
#Text=sale
#Text=| id
#Text=sale
#Text=| username | -0.005344716
#Text=sale
#Text=| sold_at
#Text=| -0.011389783
#Text=The auto generated column id has a correlation of 1.
114-1	23688-23693	Going	
114-2	23694-23698	back	
114-3	23699-23701	to	
114-4	23702-23705	our	
114-5	23706-23715	sale_fact	
114-6	23716-23721	table	
114-7	23721-23722	,	
114-8	23723-23727	when	
114-9	23728-23730	we	
114-10	23731-23737	loaded	
114-11	23738-23741	the	
114-12	23742-23746	data	
114-13	23747-23751	into	
114-14	23752-23755	the	
114-15	23756-23761	table	
114-16	23762-23769	without	
114-17	23770-23777	sorting	
114-18	23778-23780	it	
114-19	23781-23786	first	
114-20	23786-23787	,	
114-21	23788-23793	these	
114-22	23794-23798	were	
114-23	23799-23802	the	
114-24	23803-23815	correlations	
114-25	23815-23816	:	
114-26	23817-23819	db	
114-27	23819-23820	=	
114-28	23820-23821	#	
114-29	23822-23828	SELECT	
114-30	23829-23838	tablename	
114-31	23838-23839	,	
114-32	23840-23847	attname	
114-33	23847-23848	,	
114-34	23849-23860	correlation	
114-35	23861-23863	db	
114-36	23863-23864	-	
114-37	23864-23865	#	
114-38	23866-23870	FROM	
114-39	23871-23879	pg_stats	
114-40	23880-23882	db	
114-41	23882-23883	=	
114-42	23883-23884	#	
114-43	23885-23890	WHERE	
114-44	23891-23900	tablename	
114-45	23901-23902	=	
114-46	23903-23904	'	
114-47	23904-23913	sale_fact	
114-48	23913-23914	'	
114-49	23914-23915	;	
114-50	23916-23925	tablename	
114-51	23926-23927	|	
114-52	23928-23935	attname	
114-53	23936-23937	|	
114-54	23938-23949	correlation	
114-55	23950-23951	-	
114-56	23951-23952	-	
114-57	23952-23953	-	
114-58	23953-23954	-	
114-59	23954-23955	-	
114-60	23955-23956	-	
114-61	23956-23957	-	
114-62	23957-23958	-	
114-63	23958-23959	-	
114-64	23959-23960	-	
114-65	23960-23961	-	
114-66	23961-23962	+	
114-67	23962-23963	-	
114-68	23963-23964	-	
114-69	23964-23965	-	
114-70	23965-23966	-	
114-71	23966-23967	-	
114-72	23967-23968	-	
114-73	23968-23969	-	
114-74	23969-23970	-	
114-75	23970-23971	-	
114-76	23971-23972	-	
114-77	23972-23973	+	
114-78	23973-23974	-	
114-79	23974-23975	-	
114-80	23975-23976	-	
114-81	23976-23977	-	
114-82	23977-23978	-	
114-83	23978-23979	-	
114-84	23979-23980	-	
114-85	23980-23981	-	
114-86	23981-23982	-	
114-87	23982-23983	-	
114-88	23983-23984	-	
114-89	23984-23985	-	
114-90	23985-23986	-	
114-91	23986-23987	-	
114-92	23988-23992	sale	
114-93	23993-23994	|	
114-94	23995-23997	id	
114-95	23998-24002	sale	
114-96	24003-24004	|	
114-97	24005-24013	username	
114-98	24014-24015	|	
114-99	24016-24017	-	
114-100	24017-24028	0.005344716	
114-101	24029-24033	sale	
114-102	24034-24035	|	
114-103	24036-24043	sold_at	
114-104	24044-24045	|	
114-105	24046-24047	-	
114-106	24047-24058	0.011389783	
114-107	24059-24062	The	
114-108	24063-24067	auto	
114-109	24068-24077	generated	
114-110	24078-24084	column	
114-111	24085-24087	id	
114-112	24088-24091	has	
114-113	24092-24093	a	
114-114	24094-24105	correlation	
114-115	24106-24108	of	
114-116	24109-24110	1	
114-117	24110-24111	.	

#Text=The sold_at column has a very low correlation: consecutive values are scattered across the entire table.
115-1	24112-24115	The	
115-2	24116-24123	sold_at	
115-3	24124-24130	column	
115-4	24131-24134	has	
115-5	24135-24136	a	
115-6	24137-24141	very	
115-7	24142-24145	low	
115-8	24146-24157	correlation	
115-9	24157-24158	:	
115-10	24159-24170	consecutive	
115-11	24171-24177	values	
115-12	24178-24181	are	
115-13	24182-24191	scattered	
115-14	24192-24198	across	
115-15	24199-24202	the	
115-16	24203-24209	entire	
115-17	24210-24215	table	
115-18	24215-24216	.	

#Text=When we loaded sorted data into the table, these were the correlations calculated by the database:
#Text=tablename | attname
#Text=correlation
#Text=-----------+----------+----------------
#Text=sale_fact | id
#Text=sale_fact | username | -0.00041992788
#Text=sale_fact | sold_at
#Text=The correlation for sold_at is now 1.
116-1	24217-24221	When	
116-2	24222-24224	we	
116-3	24225-24231	loaded	
116-4	24232-24238	sorted	
116-5	24239-24243	data	
116-6	24244-24248	into	
116-7	24249-24252	the	
116-8	24253-24258	table	
116-9	24258-24259	,	
116-10	24260-24265	these	
116-11	24266-24270	were	
116-12	24271-24274	the	
116-13	24275-24287	correlations	
116-14	24288-24298	calculated	
116-15	24299-24301	by	
116-16	24302-24305	the	
116-17	24306-24314	database	
116-18	24314-24315	:	
116-19	24316-24325	tablename	
116-20	24326-24327	|	
116-21	24328-24335	attname	
116-22	24336-24347	correlation	
116-23	24348-24349	-	
116-24	24349-24350	-	
116-25	24350-24351	-	
116-26	24351-24352	-	
116-27	24352-24353	-	
116-28	24353-24354	-	
116-29	24354-24355	-	
116-30	24355-24356	-	
116-31	24356-24357	-	
116-32	24357-24358	-	
116-33	24358-24359	-	
116-34	24359-24360	+	
116-35	24360-24361	-	
116-36	24361-24362	-	
116-37	24362-24363	-	
116-38	24363-24364	-	
116-39	24364-24365	-	
116-40	24365-24366	-	
116-41	24366-24367	-	
116-42	24367-24368	-	
116-43	24368-24369	-	
116-44	24369-24370	-	
116-45	24370-24371	+	
116-46	24371-24372	-	
116-47	24372-24373	-	
116-48	24373-24374	-	
116-49	24374-24375	-	
116-50	24375-24376	-	
116-51	24376-24377	-	
116-52	24377-24378	-	
116-53	24378-24379	-	
116-54	24379-24380	-	
116-55	24380-24381	-	
116-56	24381-24382	-	
116-57	24382-24383	-	
116-58	24383-24384	-	
116-59	24384-24385	-	
116-60	24385-24386	-	
116-61	24386-24387	-	
116-62	24388-24397	sale_fact	
116-63	24398-24399	|	
116-64	24400-24402	id	
116-65	24403-24412	sale_fact	
116-66	24413-24414	|	
116-67	24415-24423	username	
116-68	24424-24425	|	
116-69	24426-24427	-	
116-70	24427-24440	0.00041992788	
116-71	24441-24450	sale_fact	
116-72	24451-24452	|	
116-73	24453-24460	sold_at	
116-74	24461-24464	The	
116-75	24465-24476	correlation	
116-76	24477-24480	for	
116-77	24481-24488	sold_at	
116-78	24489-24491	is	
116-79	24492-24495	now	
116-80	24496-24497	1	
116-81	24497-24498	.	

#Text=So why did the database use a bitmap scan when the correlation was low, and an index scan when the correlation was close to 1?
117-1	24499-24501	So	
117-2	24502-24505	why	
117-3	24506-24509	did	
117-4	24510-24513	the	
117-5	24514-24522	database	
117-6	24523-24526	use	
117-7	24527-24528	a	
117-8	24529-24535	bitmap	
117-9	24536-24540	scan	
117-10	24541-24545	when	
117-11	24546-24549	the	
117-12	24550-24561	correlation	
117-13	24562-24565	was	
117-14	24566-24569	low	
117-15	24569-24570	,	
117-16	24571-24574	and	
117-17	24575-24577	an	
117-18	24578-24583	index	
117-19	24584-24588	scan	
117-20	24589-24593	when	
117-21	24594-24597	the	
117-22	24598-24609	correlation	
117-23	24610-24613	was	
117-24	24614-24619	close	
117-25	24620-24622	to	
117-26	24623-24624	1	
117-27	24624-24625	?	

#Text=When the correlation was 1, the database estimated that rows in the requested range are likely to be in consecutive pages.
118-1	24626-24630	When	
118-2	24631-24634	the	
118-3	24635-24646	correlation	
118-4	24647-24650	was	
118-5	24651-24652	1	
118-6	24652-24653	,	
118-7	24654-24657	the	
118-8	24658-24666	database	
118-9	24667-24676	estimated	
118-10	24677-24681	that	
118-11	24682-24686	rows	
118-12	24687-24689	in	
118-13	24690-24693	the	
118-14	24694-24703	requested	
118-15	24704-24709	range	
118-16	24710-24713	are	
118-17	24714-24720	likely	
118-18	24721-24723	to	
118-19	24724-24726	be	
118-20	24727-24729	in	
118-21	24730-24741	consecutive	
118-22	24742-24747	pages	
118-23	24747-24748	.	

#Text=In this case, an index scan is likely to read very few pages.
119-1	24749-24751	In	
119-2	24752-24756	this	
119-3	24757-24761	case	
119-4	24761-24762	,	
119-5	24763-24765	an	
119-6	24766-24771	index	
119-7	24772-24776	scan	
119-8	24777-24779	is	
119-9	24780-24786	likely	
119-10	24787-24789	to	
119-11	24790-24794	read	
119-12	24795-24799	very	
119-13	24800-24803	few	
119-14	24804-24809	pages	
119-15	24809-24810	.	

#Text=When the correlation was close to 0, the database estimated that rows in the requested range are likely to be scattered across the entire table.
120-1	24811-24815	When	
120-2	24816-24819	the	
120-3	24820-24831	correlation	
120-4	24832-24835	was	
120-5	24836-24841	close	
120-6	24842-24844	to	
120-7	24845-24846	0	
120-8	24846-24847	,	
120-9	24848-24851	the	
120-10	24852-24860	database	
120-11	24861-24870	estimated	
120-12	24871-24875	that	
120-13	24876-24880	rows	
120-14	24881-24883	in	
120-15	24884-24887	the	
120-16	24888-24897	requested	
120-17	24898-24903	range	
120-18	24904-24907	are	
120-19	24908-24914	likely	
120-20	24915-24917	to	
120-21	24918-24920	be	
120-22	24921-24930	scattered	
120-23	24931-24937	across	
120-24	24938-24941	the	
120-25	24942-24948	entire	
120-26	24949-24954	table	
120-27	24954-24955	.	

#Text=In this case, it makes sense to use a bitmap scan to map the table pages in which rows exist, and only then fetch them and apply the condition.
121-1	24956-24958	In	
121-2	24959-24963	this	
121-3	24964-24968	case	
121-4	24968-24969	,	
121-5	24970-24972	it	
121-6	24973-24978	makes	
121-7	24979-24984	sense	
121-8	24985-24987	to	
121-9	24988-24991	use	
121-10	24992-24993	a	
121-11	24994-25000	bitmap	
121-12	25001-25005	scan	
121-13	25006-25008	to	
121-14	25009-25012	map	
121-15	25013-25016	the	
121-16	25017-25022	table	
121-17	25023-25028	pages	
121-18	25029-25031	in	
121-19	25032-25037	which	
121-20	25038-25042	rows	
121-21	25043-25048	exist	
121-22	25048-25049	,	
121-23	25050-25053	and	
121-24	25054-25058	only	
121-25	25059-25063	then	
121-26	25064-25069	fetch	
121-27	25070-25074	them	
121-28	25075-25078	and	
121-29	25079-25084	apply	
121-30	25085-25088	the	
121-31	25089-25098	condition	
121-32	25098-25099	.	

#Text=The next time you load data into a table, think about how the data is going to be queried, and make sure you sort it in a way that indexes used for range scan can benefit from.
122-1	25100-25103	The	
122-2	25104-25108	next	
122-3	25109-25113	time	
122-4	25114-25117	you	
122-5	25118-25122	load	
122-6	25123-25127	data	
122-7	25128-25132	into	
122-8	25133-25134	a	
122-9	25135-25140	table	
122-10	25140-25141	,	
122-11	25142-25147	think	
122-12	25148-25153	about	
122-13	25154-25157	how	
122-14	25158-25161	the	
122-15	25162-25166	data	
122-16	25167-25169	is	
122-17	25170-25175	going	
122-18	25176-25178	to	
122-19	25179-25181	be	
122-20	25182-25189	queried	
122-21	25189-25190	,	
122-22	25191-25194	and	
122-23	25195-25199	make	
122-24	25200-25204	sure	
122-25	25205-25208	you	
122-26	25209-25213	sort	
122-27	25214-25216	it	
122-28	25217-25219	in	
122-29	25220-25221	a	
122-30	25222-25225	way	
122-31	25226-25230	that	
122-32	25231-25238	indexes	
122-33	25239-25243	used	
122-34	25244-25247	for	
122-35	25248-25253	range	
122-36	25254-25258	scan	
122-37	25259-25262	can	
122-38	25263-25270	benefit	
122-39	25271-25275	from	
122-40	25275-25276	.	

#Text=CLUSTER Command
#Text=Another way of "sorting a table on disk" by a specific index is to use the CLUSTER command.
123-1	25277-25284	CLUSTER	
123-2	25285-25292	Command	
123-3	25293-25300	Another	
123-4	25301-25304	way	
123-5	25305-25307	of	
123-6	25308-25309	"	
123-7	25309-25316	sorting	
123-8	25317-25318	a	
123-9	25319-25324	table	
123-10	25325-25327	on	
123-11	25328-25332	disk	
123-12	25332-25333	"	
123-13	25334-25336	by	
123-14	25337-25338	a	
123-15	25339-25347	specific	
123-16	25348-25353	index	
123-17	25354-25356	is	
123-18	25357-25359	to	
123-19	25360-25363	use	
123-20	25364-25367	the	
123-21	25368-25375	CLUSTER	
123-22	25376-25383	command	
123-23	25383-25384	.	

#Text=For example:
#Text=db=# TRUNCATE sale_fact;
#Text=TRUNCATE TABLE
#Text=-- Insert rows without sorting
#Text=db=# INSERT INTO sale_fact (username, sold_at)
#Text=db-# SELECT
#Text=db-#
#Text=md5(random()::text) AS username,
#Text=db-#
#Text='2020-01-01'::date + (interval '1 day') * round(random() * 365 * 2) AS sold_at
#Text=db-# FROM
#Text=db-#
#Text=generate_series(1, 100000)
#Text=INSERT 0 100000
#Text=db=# ANALYZE sale_fact;
#Text=ANALYZE
#Text=db=# SELECT tablename, attname, correlation
#Text=db-# FROM pg_stats
#Text=db-# WHERE tablename = 'sale_fact';
#Text=tablename | attname
#Text=correlation
#Text=-----------+-----------+----------------
#Text=sale_fact | sold_at
#Text=| -5.9702674e-05
#Text=sale_fact | id
#Text=sale_fact | username
#Text=0.010033822
#Text=We loaded data into the table in random order and as a result the correlation of sold_at is close to zero.
124-1	25385-25388	For	
124-2	25389-25396	example	
124-3	25396-25397	:	
124-4	25398-25400	db	
124-5	25400-25401	=	
124-6	25401-25402	#	
124-7	25403-25411	TRUNCATE	
124-8	25412-25421	sale_fact	
124-9	25421-25422	;	
124-10	25423-25431	TRUNCATE	
124-11	25432-25437	TABLE	
124-12	25438-25439	-	
124-13	25439-25440	-	
124-14	25441-25447	Insert	
124-15	25448-25452	rows	
124-16	25453-25460	without	
124-17	25461-25468	sorting	
124-18	25469-25471	db	
124-19	25471-25472	=	
124-20	25472-25473	#	
124-21	25474-25480	INSERT	
124-22	25481-25485	INTO	
124-23	25486-25495	sale_fact	
124-24	25496-25497	(	
124-25	25497-25505	username	
124-26	25505-25506	,	
124-27	25507-25514	sold_at	
124-28	25514-25515	)	
124-29	25516-25518	db	
124-30	25518-25519	-	
124-31	25519-25520	#	
124-32	25521-25527	SELECT	
124-33	25528-25530	db	
124-34	25530-25531	-	
124-35	25531-25532	#	
124-36	25533-25536	md5	
124-37	25536-25537	(	
124-38	25537-25543	random	
124-39	25543-25544	(	
124-40	25544-25545	)	
124-41	25545-25546	:	
124-42	25546-25547	:	
124-43	25547-25551	text	
124-44	25551-25552	)	
124-45	25553-25555	AS	
124-46	25556-25564	username	
124-47	25564-25565	,	
124-48	25566-25568	db	
124-49	25568-25569	-	
124-50	25569-25570	#	
124-51	25571-25572	'	
124-52	25572-25576	2020	
124-53	25576-25577	-	
124-54	25577-25579	01	
124-55	25579-25580	-	
124-56	25580-25582	01	
124-57	25582-25583	'	
124-58	25583-25584	:	
124-59	25584-25585	:	
124-60	25585-25589	date	
124-61	25590-25591	+	
124-62	25592-25593	(	
124-63	25593-25601	interval	
124-64	25602-25603	'	
124-65	25603-25604	1	
124-66	25605-25608	day	
124-67	25608-25609	'	
124-68	25609-25610	)	
124-69	25611-25612	*	
124-70	25613-25618	round	
124-71	25618-25619	(	
124-72	25619-25625	random	
124-73	25625-25626	(	
124-74	25626-25627	)	
124-75	25628-25629	*	
124-76	25630-25633	365	
124-77	25634-25635	*	
124-78	25636-25637	2	
124-79	25637-25638	)	
124-80	25639-25641	AS	
124-81	25642-25649	sold_at	
124-82	25650-25652	db	
124-83	25652-25653	-	
124-84	25653-25654	#	
124-85	25655-25659	FROM	
124-86	25660-25662	db	
124-87	25662-25663	-	
124-88	25663-25664	#	
124-89	25665-25680	generate_series	
124-90	25680-25681	(	
124-91	25681-25682	1	
124-92	25682-25683	,	
124-93	25684-25690	100000	
124-94	25690-25691	)	
124-95	25692-25698	INSERT	
124-96	25699-25700	0	
124-97	25701-25707	100000	
124-98	25708-25710	db	
124-99	25710-25711	=	
124-100	25711-25712	#	
124-101	25713-25720	ANALYZE	
124-102	25721-25730	sale_fact	
124-103	25730-25731	;	
124-104	25732-25739	ANALYZE	
124-105	25740-25742	db	
124-106	25742-25743	=	
124-107	25743-25744	#	
124-108	25745-25751	SELECT	
124-109	25752-25761	tablename	
124-110	25761-25762	,	
124-111	25763-25770	attname	
124-112	25770-25771	,	
124-113	25772-25783	correlation	
124-114	25784-25786	db	
124-115	25786-25787	-	
124-116	25787-25788	#	
124-117	25789-25793	FROM	
124-118	25794-25802	pg_stats	
124-119	25803-25805	db	
124-120	25805-25806	-	
124-121	25806-25807	#	
124-122	25808-25813	WHERE	
124-123	25814-25823	tablename	
124-124	25824-25825	=	
124-125	25826-25827	'	
124-126	25827-25836	sale_fact	
124-127	25836-25837	'	
124-128	25837-25838	;	
124-129	25839-25848	tablename	
124-130	25849-25850	|	
124-131	25851-25858	attname	
124-132	25859-25870	correlation	
124-133	25871-25872	-	
124-134	25872-25873	-	
124-135	25873-25874	-	
124-136	25874-25875	-	
124-137	25875-25876	-	
124-138	25876-25877	-	
124-139	25877-25878	-	
124-140	25878-25879	-	
124-141	25879-25880	-	
124-142	25880-25881	-	
124-143	25881-25882	-	
124-144	25882-25883	+	
124-145	25883-25884	-	
124-146	25884-25885	-	
124-147	25885-25886	-	
124-148	25886-25887	-	
124-149	25887-25888	-	
124-150	25888-25889	-	
124-151	25889-25890	-	
124-152	25890-25891	-	
124-153	25891-25892	-	
124-154	25892-25893	-	
124-155	25893-25894	-	
124-156	25894-25895	+	
124-157	25895-25896	-	
124-158	25896-25897	-	
124-159	25897-25898	-	
124-160	25898-25899	-	
124-161	25899-25900	-	
124-162	25900-25901	-	
124-163	25901-25902	-	
124-164	25902-25903	-	
124-165	25903-25904	-	
124-166	25904-25905	-	
124-167	25905-25906	-	
124-168	25906-25907	-	
124-169	25907-25908	-	
124-170	25908-25909	-	
124-171	25909-25910	-	
124-172	25910-25911	-	
124-173	25912-25921	sale_fact	
124-174	25922-25923	|	
124-175	25924-25931	sold_at	
124-176	25932-25933	|	
124-177	25934-25935	-	
124-178	25935-25945	5.9702674e	
124-179	25945-25946	-	
124-180	25946-25948	05	
124-181	25949-25958	sale_fact	
124-182	25959-25960	|	
124-183	25961-25963	id	
124-184	25964-25973	sale_fact	
124-185	25974-25975	|	
124-186	25976-25984	username	
124-187	25985-25996	0.010033822	
124-188	25997-25999	We	
124-189	26000-26006	loaded	
124-190	26007-26011	data	
124-191	26012-26016	into	
124-192	26017-26020	the	
124-193	26021-26026	table	
124-194	26027-26029	in	
124-195	26030-26036	random	
124-196	26037-26042	order	
124-197	26043-26046	and	
124-198	26047-26049	as	
124-199	26050-26051	a	
124-200	26052-26058	result	
124-201	26059-26062	the	
124-202	26063-26074	correlation	
124-203	26075-26077	of	
124-204	26078-26085	sold_at	
124-205	26086-26088	is	
124-206	26089-26094	close	
124-207	26095-26097	to	
124-208	26098-26102	zero	
124-209	26102-26103	.	

#Text=To "rearrange" the table by sold_at, we used the CLUSTER command to sort the table on disk according to the index sale_fact_sold_at_ix:
#Text=db=# CLUSTER sale_fact USING sale_fact_sold_at_ix;
#Text=CLUSTER
#Text=db=# ANALYZE sale_fact;
#Text=ANALYZE
#Text=db=# SELECT tablename, attname, correlation
#Text=db-# FROM pg_stats
#Text=db-# WHERE tablename = 'sale_fact';
#Text=tablename | attname
#Text=| correlation
#Text=-----------+----------+--------------
#Text=sale_fact | sold_at
#Text=sale_fact | id
#Text=| -0.002239401
#Text=sale_fact | username |
#Text=0.013389298
#Text=After the table was clustered we can see that the correlation for sold_at is 1.
125-1	26104-26106	To	
125-2	26107-26108	"	
125-3	26108-26117	rearrange	
125-4	26117-26118	"	
125-5	26119-26122	the	
125-6	26123-26128	table	
125-7	26129-26131	by	
125-8	26132-26139	sold_at	
125-9	26139-26140	,	
125-10	26141-26143	we	
125-11	26144-26148	used	
125-12	26149-26152	the	
125-13	26153-26160	CLUSTER	
125-14	26161-26168	command	
125-15	26169-26171	to	
125-16	26172-26176	sort	
125-17	26177-26180	the	
125-18	26181-26186	table	
125-19	26187-26189	on	
125-20	26190-26194	disk	
125-21	26195-26204	according	
125-22	26205-26207	to	
125-23	26208-26211	the	
125-24	26212-26217	index	
125-25	26218-26238	sale_fact_sold_at_ix	
125-26	26238-26239	:	
125-27	26240-26242	db	
125-28	26242-26243	=	
125-29	26243-26244	#	
125-30	26245-26252	CLUSTER	
125-31	26253-26262	sale_fact	
125-32	26263-26268	USING	
125-33	26269-26289	sale_fact_sold_at_ix	
125-34	26289-26290	;	
125-35	26291-26298	CLUSTER	
125-36	26299-26301	db	
125-37	26301-26302	=	
125-38	26302-26303	#	
125-39	26304-26311	ANALYZE	
125-40	26312-26321	sale_fact	
125-41	26321-26322	;	
125-42	26323-26330	ANALYZE	
125-43	26331-26333	db	
125-44	26333-26334	=	
125-45	26334-26335	#	
125-46	26336-26342	SELECT	
125-47	26343-26352	tablename	
125-48	26352-26353	,	
125-49	26354-26361	attname	
125-50	26361-26362	,	
125-51	26363-26374	correlation	
125-52	26375-26377	db	
125-53	26377-26378	-	
125-54	26378-26379	#	
125-55	26380-26384	FROM	
125-56	26385-26393	pg_stats	
125-57	26394-26396	db	
125-58	26396-26397	-	
125-59	26397-26398	#	
125-60	26399-26404	WHERE	
125-61	26405-26414	tablename	
125-62	26415-26416	=	
125-63	26417-26418	'	
125-64	26418-26427	sale_fact	
125-65	26427-26428	'	
125-66	26428-26429	;	
125-67	26430-26439	tablename	
125-68	26440-26441	|	
125-69	26442-26449	attname	
125-70	26450-26451	|	
125-71	26452-26463	correlation	
125-72	26464-26465	-	
125-73	26465-26466	-	
125-74	26466-26467	-	
125-75	26467-26468	-	
125-76	26468-26469	-	
125-77	26469-26470	-	
125-78	26470-26471	-	
125-79	26471-26472	-	
125-80	26472-26473	-	
125-81	26473-26474	-	
125-82	26474-26475	-	
125-83	26475-26476	+	
125-84	26476-26477	-	
125-85	26477-26478	-	
125-86	26478-26479	-	
125-87	26479-26480	-	
125-88	26480-26481	-	
125-89	26481-26482	-	
125-90	26482-26483	-	
125-91	26483-26484	-	
125-92	26484-26485	-	
125-93	26485-26486	-	
125-94	26486-26487	+	
125-95	26487-26488	-	
125-96	26488-26489	-	
125-97	26489-26490	-	
125-98	26490-26491	-	
125-99	26491-26492	-	
125-100	26492-26493	-	
125-101	26493-26494	-	
125-102	26494-26495	-	
125-103	26495-26496	-	
125-104	26496-26497	-	
125-105	26497-26498	-	
125-106	26498-26499	-	
125-107	26499-26500	-	
125-108	26500-26501	-	
125-109	26502-26511	sale_fact	
125-110	26512-26513	|	
125-111	26514-26521	sold_at	
125-112	26522-26531	sale_fact	
125-113	26532-26533	|	
125-114	26534-26536	id	
125-115	26537-26538	|	
125-116	26539-26540	-	
125-117	26540-26551	0.002239401	
125-118	26552-26561	sale_fact	
125-119	26562-26563	|	
125-120	26564-26572	username	
125-121	26573-26574	|	
125-122	26575-26586	0.013389298	
125-123	26587-26592	After	
125-124	26593-26596	the	
125-125	26597-26602	table	
125-126	26603-26606	was	
125-127	26607-26616	clustered	
125-128	26617-26619	we	
125-129	26620-26623	can	
125-130	26624-26627	see	
125-131	26628-26632	that	
125-132	26633-26636	the	
125-133	26637-26648	correlation	
125-134	26649-26652	for	
125-135	26653-26660	sold_at	
125-136	26661-26663	is	
125-137	26664-26665	1	
125-138	26665-26666	.	

#Text=CLUSTER command
#Text=Some things to note about the CLUSTER command:
#Text=Clustering the table by a specific column may affect the correlation of other column.
126-1	26667-26674	CLUSTER	
126-2	26675-26682	command	
126-3	26683-26687	Some	
126-4	26688-26694	things	
126-5	26695-26697	to	
126-6	26698-26702	note	
126-7	26703-26708	about	
126-8	26709-26712	the	
126-9	26713-26720	CLUSTER	
126-10	26721-26728	command	
126-11	26728-26729	:	
126-12	26730-26740	Clustering	
126-13	26741-26744	the	
126-14	26745-26750	table	
126-15	26751-26753	by	
126-16	26754-26755	a	
126-17	26756-26764	specific	
126-18	26765-26771	column	
126-19	26772-26775	may	
126-20	26776-26782	affect	
126-21	26783-26786	the	
126-22	26787-26798	correlation	
126-23	26799-26801	of	
126-24	26802-26807	other	
126-25	26808-26814	column	
126-26	26814-26815	.	

#Text=See for example the correlation of the column id after we clustered the table by sold_at.
127-1	26816-26819	See	
127-2	26820-26823	for	
127-3	26824-26831	example	
127-4	26832-26835	the	
127-5	26836-26847	correlation	
127-6	26848-26850	of	
127-7	26851-26854	the	
127-8	26855-26861	column	
127-9	26862-26864	id	
127-10	26865-26870	after	
127-11	26871-26873	we	
127-12	26874-26883	clustered	
127-13	26884-26887	the	
127-14	26888-26893	table	
127-15	26894-26896	by	
127-16	26897-26904	sold_at	
127-17	26904-26905	.	

#Text=CLUSTER is a heavy, blocking operation, so make sure you don't execute it on a live table.
128-1	26906-26913	CLUSTER	
128-2	26914-26916	is	
128-3	26917-26918	a	
128-4	26919-26924	heavy	
128-5	26924-26925	,	
128-6	26926-26934	blocking	
128-7	26935-26944	operation	
128-8	26944-26945	,	
128-9	26946-26948	so	
128-10	26949-26953	make	
128-11	26954-26958	sure	
128-12	26959-26962	you	
128-13	26963-26968	don't	
128-14	26969-26976	execute	
128-15	26977-26979	it	
128-16	26980-26982	on	
128-17	26983-26984	a	
128-18	26985-26989	live	
128-19	26990-26995	table	
128-20	26995-26996	.	

#Text=For these two reason it's best to insert the data sorted and not rely on CLUSTER.
129-1	26997-27000	For	
129-2	27001-27006	these	
129-3	27007-27010	two	
129-4	27011-27017	reason	
129-5	27018-27022	it's	
129-6	27023-27027	best	
129-7	27028-27030	to	
129-8	27031-27037	insert	
129-9	27038-27041	the	
129-10	27042-27046	data	
129-11	27047-27053	sorted	
129-12	27054-27057	and	
129-13	27058-27061	not	
129-14	27062-27066	rely	
129-15	27067-27069	on	
129-16	27070-27077	CLUSTER	
129-17	27077-27078	.	

#Text=Index Columns With High Correlation Using BRIN
#Text=When talking about indexes, most developers will think about B-Tree indexes.
130-1	27079-27084	Index	
130-2	27085-27092	Columns	
130-3	27093-27097	With	
130-4	27098-27102	High	
130-5	27103-27114	Correlation	
130-6	27115-27120	Using	
130-7	27121-27125	BRIN	
130-8	27126-27130	When	
130-9	27131-27138	talking	
130-10	27139-27144	about	
130-11	27145-27152	indexes	
130-12	27152-27153	,	
130-13	27154-27158	most	
130-14	27159-27169	developers	
130-15	27170-27174	will	
130-16	27175-27180	think	
130-17	27181-27186	about	
130-18	27187-27193	B-Tree	
130-19	27194-27201	indexes	
130-20	27201-27202	.	

#Text=But, PostgreSQL provides other types of indexes such as BRIN:
#Text=BRIN is designed for handling very large tables in which certain columns have some natural correlation with their physical location within the table
#Text=BRIN stands for Block Range Index.
131-1	27203-27206	But	
131-2	27206-27207	,	
131-3	27208-27218	PostgreSQL	
131-4	27219-27227	provides	
131-5	27228-27233	other	
131-6	27234-27239	types	
131-7	27240-27242	of	
131-8	27243-27250	indexes	
131-9	27251-27255	such	
131-10	27256-27258	as	
131-11	27259-27263	BRIN	
131-12	27263-27264	:	
131-13	27265-27269	BRIN	
131-14	27270-27272	is	
131-15	27273-27281	designed	
131-16	27282-27285	for	
131-17	27286-27294	handling	
131-18	27295-27299	very	
131-19	27300-27305	large	
131-20	27306-27312	tables	
131-21	27313-27315	in	
131-22	27316-27321	which	
131-23	27322-27329	certain	
131-24	27330-27337	columns	
131-25	27338-27342	have	
131-26	27343-27347	some	
131-27	27348-27355	natural	
131-28	27356-27367	correlation	
131-29	27368-27372	with	
131-30	27373-27378	their	
131-31	27379-27387	physical	
131-32	27388-27396	location	
131-33	27397-27403	within	
131-34	27404-27407	the	
131-35	27408-27413	table	
131-36	27414-27418	BRIN	
131-37	27419-27425	stands	
131-38	27426-27429	for	
131-39	27430-27435	Block	
131-40	27436-27441	Range	
131-41	27442-27447	Index	
131-42	27447-27448	.	

#Text=According to the documentation, a BRIN index works best for columns with high correlation.
132-1	27449-27458	According	
132-2	27459-27461	to	
132-3	27462-27465	the	
132-4	27466-27479	documentation	
132-5	27479-27480	,	
132-6	27481-27482	a	
132-7	27483-27487	BRIN	
132-8	27488-27493	index	
132-9	27494-27499	works	
132-10	27500-27504	best	
132-11	27505-27508	for	
132-12	27509-27516	columns	
132-13	27517-27521	with	
132-14	27522-27526	high	
132-15	27527-27538	correlation	
132-16	27538-27539	.	

#Text=As we've already seen in previous sections, some fields such as auto incrementing IDs and timestamps are naturally correlated with the physical structure of the table, hence they are good candidates for a BRIN index.
133-1	27540-27542	As	
133-2	27543-27548	we've	
133-3	27549-27556	already	
133-4	27557-27561	seen	
133-5	27562-27564	in	
133-6	27565-27573	previous	
133-7	27574-27582	sections	
133-8	27582-27583	,	
133-9	27584-27588	some	
133-10	27589-27595	fields	
133-11	27596-27600	such	
133-12	27601-27603	as	
133-13	27604-27608	auto	
133-14	27609-27621	incrementing	
133-15	27622-27625	IDs	
133-16	27626-27629	and	
133-17	27630-27640	timestamps	
133-18	27641-27644	are	
133-19	27645-27654	naturally	
133-20	27655-27665	correlated	
133-21	27666-27670	with	
133-22	27671-27674	the	
133-23	27675-27683	physical	
133-24	27684-27693	structure	
133-25	27694-27696	of	
133-26	27697-27700	the	
133-27	27701-27706	table	
133-28	27706-27707	,	
133-29	27708-27713	hence	
133-30	27714-27718	they	
133-31	27719-27722	are	
133-32	27723-27727	good	
133-33	27728-27738	candidates	
133-34	27739-27742	for	
133-35	27743-27744	a	
133-36	27745-27749	BRIN	
133-37	27750-27755	index	
133-38	27755-27756	.	

#Text=Under some circumstances, a BRIN index can provide a better "value for money" in terms of size and performance compared to a similar B-Tree index.
134-1	27757-27762	Under	
134-2	27763-27767	some	
134-3	27768-27781	circumstances	
134-4	27781-27782	,	
134-5	27783-27784	a	
134-6	27785-27789	BRIN	
134-7	27790-27795	index	
134-8	27796-27799	can	
134-9	27800-27807	provide	
134-10	27808-27809	a	
134-11	27810-27816	better	
134-12	27817-27818	"	
134-13	27818-27823	value	
134-14	27824-27827	for	
134-15	27828-27833	money	
134-16	27833-27834	"	
134-17	27835-27837	in	
134-18	27838-27843	terms	
134-19	27844-27846	of	
134-20	27847-27851	size	
134-21	27852-27855	and	
134-22	27856-27867	performance	
134-23	27868-27876	compared	
134-24	27877-27879	to	
134-25	27880-27881	a	
134-26	27882-27889	similar	
134-27	27890-27896	B-Tree	
134-28	27897-27902	index	
134-29	27902-27903	.	

#Text=BRIN Index
#Text=A BRIN index works by keeping the range of values within a number of adjacent pages in the table.
135-1	27904-27908	BRIN	
135-2	27909-27914	Index	
135-3	27915-27916	A	
135-4	27917-27921	BRIN	
135-5	27922-27927	index	
135-6	27928-27933	works	
135-7	27934-27936	by	
135-8	27937-27944	keeping	
135-9	27945-27948	the	
135-10	27949-27954	range	
135-11	27955-27957	of	
135-12	27958-27964	values	
135-13	27965-27971	within	
135-14	27972-27973	a	
135-15	27974-27980	number	
135-16	27981-27983	of	
135-17	27984-27992	adjacent	
135-18	27993-27998	pages	
135-19	27999-28001	in	
135-20	28002-28005	the	
135-21	28006-28011	table	
135-22	28011-28012	.	

#Text=Say we have these values in a column, each is single table page:
#Text=1, 2, 3, 4, 5, 6, 7, 8, 9
#Text=A BRIN index works on ranges of adjacent pages in the table.
136-1	28013-28016	Say	
136-2	28017-28019	we	
136-3	28020-28024	have	
136-4	28025-28030	these	
136-5	28031-28037	values	
136-6	28038-28040	in	
136-7	28041-28042	a	
136-8	28043-28049	column	
136-9	28049-28050	,	
136-10	28051-28055	each	
136-11	28056-28058	is	
136-12	28059-28065	single	
136-13	28066-28071	table	
136-14	28072-28076	page	
136-15	28076-28077	:	
136-16	28078-28079	1	
136-17	28079-28080	,	
136-18	28081-28082	2	
136-19	28082-28083	,	
136-20	28084-28085	3	
136-21	28085-28086	,	
136-22	28087-28088	4	
136-23	28088-28089	,	
136-24	28090-28091	5	
136-25	28091-28092	,	
136-26	28093-28094	6	
136-27	28094-28095	,	
136-28	28096-28097	7	
136-29	28097-28098	,	
136-30	28099-28100	8	
136-31	28100-28101	,	
136-32	28102-28103	9	
136-33	28104-28105	A	
136-34	28106-28110	BRIN	
136-35	28111-28116	index	
136-36	28117-28122	works	
136-37	28123-28125	on	
136-38	28126-28132	ranges	
136-39	28133-28135	of	
136-40	28136-28144	adjacent	
136-41	28145-28150	pages	
136-42	28151-28153	in	
136-43	28154-28157	the	
136-44	28158-28163	table	
136-45	28163-28164	.	

#Text=If the number of adjacent pages is set to 3, the index will divide the table into the following ranges:
#Text=[1,2,3], [4,5,6], [7,8,9]
#Text=For each range, the BRIN index keeps the minimum and maximum value:
#Text=[1–3], [4–6], [7–9]
#Text=Using the index above, try to search for the value 5:
#Text=[1–3] - Definitely not here
#Text=[4–6] - Might be here
#Text=[7–9] - Definitely not here
#Text=Using the BRIN index we managed to limit our search to blocks 4–6.
137-1	28165-28167	If	
137-2	28168-28171	the	
137-3	28172-28178	number	
137-4	28179-28181	of	
137-5	28182-28190	adjacent	
137-6	28191-28196	pages	
137-7	28197-28199	is	
137-8	28200-28203	set	
137-9	28204-28206	to	
137-10	28207-28208	3	
137-11	28208-28209	,	
137-12	28210-28213	the	
137-13	28214-28219	index	
137-14	28220-28224	will	
137-15	28225-28231	divide	
137-16	28232-28235	the	
137-17	28236-28241	table	
137-18	28242-28246	into	
137-19	28247-28250	the	
137-20	28251-28260	following	
137-21	28261-28267	ranges	
137-22	28267-28268	:	
137-23	28269-28270	[	
137-24	28270-28275	1,2,3	
137-25	28275-28276	]	
137-26	28276-28277	,	
137-27	28278-28279	[	
137-28	28279-28284	4,5,6	
137-29	28284-28285	]	
137-30	28285-28286	,	
137-31	28287-28288	[	
137-32	28288-28293	7,8,9	
137-33	28293-28294	]	
137-34	28295-28298	For	
137-35	28299-28303	each	
137-36	28304-28309	range	
137-37	28309-28310	,	
137-38	28311-28314	the	
137-39	28315-28319	BRIN	
137-40	28320-28325	index	
137-41	28326-28331	keeps	
137-42	28332-28335	the	
137-43	28336-28343	minimum	
137-44	28344-28347	and	
137-45	28348-28355	maximum	
137-46	28356-28361	value	
137-47	28361-28362	:	
137-48	28363-28364	[	
137-49	28364-28365	1	
137-50	28365-28366	–	
137-51	28366-28367	3	
137-52	28367-28368	]	
137-53	28368-28369	,	
137-54	28370-28371	[	
137-55	28371-28372	4	
137-56	28372-28373	–	
137-57	28373-28374	6	
137-58	28374-28375	]	
137-59	28375-28376	,	
137-60	28377-28378	[	
137-61	28378-28379	7	
137-62	28379-28380	–	
137-63	28380-28381	9	
137-64	28381-28382	]	
137-65	28383-28388	Using	
137-66	28389-28392	the	
137-67	28393-28398	index	
137-68	28399-28404	above	
137-69	28404-28405	,	
137-70	28406-28409	try	
137-71	28410-28412	to	
137-72	28413-28419	search	
137-73	28420-28423	for	
137-74	28424-28427	the	
137-75	28428-28433	value	
137-76	28434-28435	5	
137-77	28435-28436	:	
137-78	28437-28438	[	
137-79	28438-28439	1	
137-80	28439-28440	–	
137-81	28440-28441	3	
137-82	28441-28442	]	
137-83	28443-28444	-	
137-84	28445-28455	Definitely	
137-85	28456-28459	not	
137-86	28460-28464	here	
137-87	28465-28466	[	
137-88	28466-28467	4	
137-89	28467-28468	–	
137-90	28468-28469	6	
137-91	28469-28470	]	
137-92	28471-28472	-	
137-93	28473-28478	Might	
137-94	28479-28481	be	
137-95	28482-28486	here	
137-96	28487-28488	[	
137-97	28488-28489	7	
137-98	28489-28490	–	
137-99	28490-28491	9	
137-100	28491-28492	]	
137-101	28493-28494	-	
137-102	28495-28505	Definitely	
137-103	28506-28509	not	
137-104	28510-28514	here	
137-105	28515-28520	Using	
137-106	28521-28524	the	
137-107	28525-28529	BRIN	
137-108	28530-28535	index	
137-109	28536-28538	we	
137-110	28539-28546	managed	
137-111	28547-28549	to	
137-112	28550-28555	limit	
137-113	28556-28559	our	
137-114	28560-28566	search	
137-115	28567-28569	to	
137-116	28570-28576	blocks	
137-117	28577-28578	4	
137-118	28578-28579	–	
137-119	28579-28580	6	
137-120	28580-28581	.	

#Text=Let's take another example, this time the values in the column will have a correlation close to zero, meaning they are not sorted:
#Text=[2,9,5], [1,4,7], [3,8,6]
#Text=Indexing 3 adjacent blocks produces the following ranges:
#Text=[2–9], [1–7], [3–8]
#Text=Let's try to search for the value 5:
#Text=[2–9] - Might be here
#Text=[1–7] - Might be here
#Text=[3–8] - Might be here
#Text=In this case the index is not limiting the search at all, hence it is useless.
138-1	28582-28587	Let's	
138-2	28588-28592	take	
138-3	28593-28600	another	
138-4	28601-28608	example	
138-5	28608-28609	,	
138-6	28610-28614	this	
138-7	28615-28619	time	
138-8	28620-28623	the	
138-9	28624-28630	values	
138-10	28631-28633	in	
138-11	28634-28637	the	
138-12	28638-28644	column	
138-13	28645-28649	will	
138-14	28650-28654	have	
138-15	28655-28656	a	
138-16	28657-28668	correlation	
138-17	28669-28674	close	
138-18	28675-28677	to	
138-19	28678-28682	zero	
138-20	28682-28683	,	
138-21	28684-28691	meaning	
138-22	28692-28696	they	
138-23	28697-28700	are	
138-24	28701-28704	not	
138-25	28705-28711	sorted	
138-26	28711-28712	:	
138-27	28713-28714	[	
138-28	28714-28719	2,9,5	
138-29	28719-28720	]	
138-30	28720-28721	,	
138-31	28722-28723	[	
138-32	28723-28728	1,4,7	
138-33	28728-28729	]	
138-34	28729-28730	,	
138-35	28731-28732	[	
138-36	28732-28737	3,8,6	
138-37	28737-28738	]	
138-38	28739-28747	Indexing	
138-39	28748-28749	3	
138-40	28750-28758	adjacent	
138-41	28759-28765	blocks	
138-42	28766-28774	produces	
138-43	28775-28778	the	
138-44	28779-28788	following	
138-45	28789-28795	ranges	
138-46	28795-28796	:	
138-47	28797-28798	[	
138-48	28798-28799	2	
138-49	28799-28800	–	
138-50	28800-28801	9	
138-51	28801-28802	]	
138-52	28802-28803	,	
138-53	28804-28805	[	
138-54	28805-28806	1	
138-55	28806-28807	–	
138-56	28807-28808	7	
138-57	28808-28809	]	
138-58	28809-28810	,	
138-59	28811-28812	[	
138-60	28812-28813	3	
138-61	28813-28814	–	
138-62	28814-28815	8	
138-63	28815-28816	]	
138-64	28817-28822	Let's	
138-65	28823-28826	try	
138-66	28827-28829	to	
138-67	28830-28836	search	
138-68	28837-28840	for	
138-69	28841-28844	the	
138-70	28845-28850	value	
138-71	28851-28852	5	
138-72	28852-28853	:	
138-73	28854-28855	[	
138-74	28855-28856	2	
138-75	28856-28857	–	
138-76	28857-28858	9	
138-77	28858-28859	]	
138-78	28860-28861	-	
138-79	28862-28867	Might	
138-80	28868-28870	be	
138-81	28871-28875	here	
138-82	28876-28877	[	
138-83	28877-28878	1	
138-84	28878-28879	–	
138-85	28879-28880	7	
138-86	28880-28881	]	
138-87	28882-28883	-	
138-88	28884-28889	Might	
138-89	28890-28892	be	
138-90	28893-28897	here	
138-91	28898-28899	[	
138-92	28899-28900	3	
138-93	28900-28901	–	
138-94	28901-28902	8	
138-95	28902-28903	]	
138-96	28904-28905	-	
138-97	28906-28911	Might	
138-98	28912-28914	be	
138-99	28915-28919	here	
138-100	28920-28922	In	
138-101	28923-28927	this	
138-102	28928-28932	case	
138-103	28933-28936	the	
138-104	28937-28942	index	
138-105	28943-28945	is	
138-106	28946-28949	not	
138-107	28950-28958	limiting	
138-108	28959-28962	the	
138-109	28963-28969	search	
138-110	28970-28972	at	
138-111	28973-28976	all	
138-112	28976-28977	,	
138-113	28978-28983	hence	
138-114	28984-28986	it	
138-115	28987-28989	is	
138-116	28990-28997	useless	
138-117	28997-28998	.	

#Text=Understanding pages_per_range
#Text=The number of adjacent pages is determined by the parameter pages_per_range.
139-1	28999-29012	Understanding	
139-2	29013-29028	pages_per_range	
139-3	29029-29032	The	
139-4	29033-29039	number	
139-5	29040-29042	of	
139-6	29043-29051	adjacent	
139-7	29052-29057	pages	
139-8	29058-29060	is	
139-9	29061-29071	determined	
139-10	29072-29074	by	
139-11	29075-29078	the	
139-12	29079-29088	parameter	
139-13	29089-29104	pages_per_range	
139-14	29104-29105	.	

#Text=The number of pages per range effects the size and accuracy of the BRIN index:
#Text=A large pages_per_range will produce a small and less accurate index
#Text=A small pages_per_range will produce a bigger and more accurate index
#Text=The default pages_per_range is 128.
140-1	29106-29109	The	
140-2	29110-29116	number	
140-3	29117-29119	of	
140-4	29120-29125	pages	
140-5	29126-29129	per	
140-6	29130-29135	range	
140-7	29136-29143	effects	
140-8	29144-29147	the	
140-9	29148-29152	size	
140-10	29153-29156	and	
140-11	29157-29165	accuracy	
140-12	29166-29168	of	
140-13	29169-29172	the	
140-14	29173-29177	BRIN	
140-15	29178-29183	index	
140-16	29183-29184	:	
140-17	29185-29186	A	
140-18	29187-29192	large	
140-19	29193-29208	pages_per_range	
140-20	29209-29213	will	
140-21	29214-29221	produce	
140-22	29222-29223	a	
140-23	29224-29229	small	
140-24	29230-29233	and	
140-25	29234-29238	less	
140-26	29239-29247	accurate	
140-27	29248-29253	index	
140-28	29254-29255	A	
140-29	29256-29261	small	
140-30	29262-29277	pages_per_range	
140-31	29278-29282	will	
140-32	29283-29290	produce	
140-33	29291-29292	a	
140-34	29293-29299	bigger	
140-35	29300-29303	and	
140-36	29304-29308	more	
140-37	29309-29317	accurate	
140-38	29318-29323	index	
140-39	29324-29327	The	
140-40	29328-29335	default	
140-41	29336-29351	pages_per_range	
140-42	29352-29354	is	
140-43	29355-29358	128	
140-44	29358-29359	.	

#Text=BRIN index with lower `pages_per_range`
#Text=To demonstrate, let's create a BRIN index on ranges of 2 adjacent pages and search for the value 5:
#Text=[1–2] - Definitely not here
#Text=[3–4] - Definitely not here
#Text=[5–6] - Might be here
#Text=[7–8] - Definitely not here
#Text=[9] - Definitely not here
#Text=Using the index with 2 pages per range we were able to limit the search to blocks 5 and 6.
141-1	29360-29364	BRIN	
141-2	29365-29370	index	
141-3	29371-29375	with	
141-4	29376-29381	lower	
141-5	29382-29383	`	
141-6	29383-29398	pages_per_range	
141-7	29398-29399	`	
141-8	29400-29402	To	
141-9	29403-29414	demonstrate	
141-10	29414-29415	,	
141-11	29416-29421	let's	
141-12	29422-29428	create	
141-13	29429-29430	a	
141-14	29431-29435	BRIN	
141-15	29436-29441	index	
141-16	29442-29444	on	
141-17	29445-29451	ranges	
141-18	29452-29454	of	
141-19	29455-29456	2	
141-20	29457-29465	adjacent	
141-21	29466-29471	pages	
141-22	29472-29475	and	
141-23	29476-29482	search	
141-24	29483-29486	for	
141-25	29487-29490	the	
141-26	29491-29496	value	
141-27	29497-29498	5	
141-28	29498-29499	:	
141-29	29500-29501	[	
141-30	29501-29502	1	
141-31	29502-29503	–	
141-32	29503-29504	2	
141-33	29504-29505	]	
141-34	29506-29507	-	
141-35	29508-29518	Definitely	
141-36	29519-29522	not	
141-37	29523-29527	here	
141-38	29528-29529	[	
141-39	29529-29530	3	
141-40	29530-29531	–	
141-41	29531-29532	4	
141-42	29532-29533	]	
141-43	29534-29535	-	
141-44	29536-29546	Definitely	
141-45	29547-29550	not	
141-46	29551-29555	here	
141-47	29556-29557	[	
141-48	29557-29558	5	
141-49	29558-29559	–	
141-50	29559-29560	6	
141-51	29560-29561	]	
141-52	29562-29563	-	
141-53	29564-29569	Might	
141-54	29570-29572	be	
141-55	29573-29577	here	
141-56	29578-29579	[	
141-57	29579-29580	7	
141-58	29580-29581	–	
141-59	29581-29582	8	
141-60	29582-29583	]	
141-61	29584-29585	-	
141-62	29586-29596	Definitely	
141-63	29597-29600	not	
141-64	29601-29605	here	
141-65	29606-29607	[	
141-66	29607-29608	9	
141-67	29608-29609	]	
141-68	29610-29611	-	
141-69	29612-29622	Definitely	
141-70	29623-29626	not	
141-71	29627-29631	here	
141-72	29632-29637	Using	
141-73	29638-29641	the	
141-74	29642-29647	index	
141-75	29648-29652	with	
141-76	29653-29654	2	
141-77	29655-29660	pages	
141-78	29661-29664	per	
141-79	29665-29670	range	
141-80	29671-29673	we	
141-81	29674-29678	were	
141-82	29679-29683	able	
141-83	29684-29686	to	
141-84	29687-29692	limit	
141-85	29693-29696	the	
141-86	29697-29703	search	
141-87	29704-29706	to	
141-88	29707-29713	blocks	
141-89	29714-29715	5	
141-90	29716-29719	and	
141-91	29720-29721	6	
141-92	29721-29722	.	

#Text=When the range was 3 pages, the index limited the search to blocks 4,5 and 6.
142-1	29723-29727	When	
142-2	29728-29731	the	
142-3	29732-29737	range	
142-4	29738-29741	was	
142-5	29742-29743	3	
142-6	29744-29749	pages	
142-7	29749-29750	,	
142-8	29751-29754	the	
142-9	29755-29760	index	
142-10	29761-29768	limited	
142-11	29769-29772	the	
142-12	29773-29779	search	
142-13	29780-29782	to	
142-14	29783-29789	blocks	
142-15	29790-29793	4,5	
142-16	29794-29797	and	
142-17	29798-29799	6	
142-18	29799-29800	.	

#Text=Another difference between the two indexes is that when the range was 3 we only had to keep 3 ranges.
143-1	29801-29808	Another	
143-2	29809-29819	difference	
143-3	29820-29827	between	
143-4	29828-29831	the	
143-5	29832-29835	two	
143-6	29836-29843	indexes	
143-7	29844-29846	is	
143-8	29847-29851	that	
143-9	29852-29856	when	
143-10	29857-29860	the	
143-11	29861-29866	range	
143-12	29867-29870	was	
143-13	29871-29872	3	
143-14	29873-29875	we	
143-15	29876-29880	only	
143-16	29881-29884	had	
143-17	29885-29887	to	
143-18	29888-29892	keep	
143-19	29893-29894	3	
143-20	29895-29901	ranges	
143-21	29901-29902	.	

#Text=When the range was 2 we had to keep 5 ranges so the index was bigger.
144-1	29903-29907	When	
144-2	29908-29911	the	
144-3	29912-29917	range	
144-4	29918-29921	was	
144-5	29922-29923	2	
144-6	29924-29926	we	
144-7	29927-29930	had	
144-8	29931-29933	to	
144-9	29934-29938	keep	
144-10	29939-29940	5	
144-11	29941-29947	ranges	
144-12	29948-29950	so	
144-13	29951-29954	the	
144-14	29955-29960	index	
144-15	29961-29964	was	
144-16	29965-29971	bigger	
144-17	29971-29972	.	

#Text=Creating a BRIN Index
#Text=Using the sales_fact from before, let's create a BRIN index on the column sold_at:
#Text=db=# CREATE INDEX sale_fact_sold_at_bix ON sale_fact
#Text=db-# USING BRIN(sold_at) WITH (pages_per_range = 128);
#Text=CREATE INDEX
#Text=This creates a BRIN index with the default pages_per_range = 128.
145-1	29973-29981	Creating	
145-2	29982-29983	a	
145-3	29984-29988	BRIN	
145-4	29989-29994	Index	
145-5	29995-30000	Using	
145-6	30001-30004	the	
145-7	30005-30015	sales_fact	
145-8	30016-30020	from	
145-9	30021-30027	before	
145-10	30027-30028	,	
145-11	30029-30034	let's	
145-12	30035-30041	create	
145-13	30042-30043	a	
145-14	30044-30048	BRIN	
145-15	30049-30054	index	
145-16	30055-30057	on	
145-17	30058-30061	the	
145-18	30062-30068	column	
145-19	30069-30076	sold_at	
145-20	30076-30077	:	
145-21	30078-30080	db	
145-22	30080-30081	=	
145-23	30081-30082	#	
145-24	30083-30089	CREATE	
145-25	30090-30095	INDEX	
145-26	30096-30117	sale_fact_sold_at_bix	
145-27	30118-30120	ON	
145-28	30121-30130	sale_fact	
145-29	30131-30133	db	
145-30	30133-30134	-	
145-31	30134-30135	#	
145-32	30136-30141	USING	
145-33	30142-30146	BRIN	
145-34	30146-30147	(	
145-35	30147-30154	sold_at	
145-36	30154-30155	)	
145-37	30156-30160	WITH	
145-38	30161-30162	(	
145-39	30162-30177	pages_per_range	
145-40	30178-30179	=	
145-41	30180-30183	128	
145-42	30183-30184	)	
145-43	30184-30185	;	
145-44	30186-30192	CREATE	
145-45	30193-30198	INDEX	
145-46	30199-30203	This	
145-47	30204-30211	creates	
145-48	30212-30213	a	
145-49	30214-30218	BRIN	
145-50	30219-30224	index	
145-51	30225-30229	with	
145-52	30230-30233	the	
145-53	30234-30241	default	
145-54	30242-30257	pages_per_range	
145-55	30258-30259	=	
145-56	30260-30263	128	
145-57	30263-30264	.	

#Text=Let's try to query for a range of sale dates:
#Text=db=# EXPLAIN (ANALYZE)
#Text=db-# SELECT *
#Text=db-# FROM sale_fact
#Text=db-# WHERE sold_at BETWEEN '2020-07-01' AND '2020-07-31';
#Text=QUERY PLAN
#Text=--------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on sale_fact
#Text=(cost=13.11..1135.61 rows=4319 width=41)
#Text=Recheck Cond: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))
#Text=Rows Removed by Index Recheck: 23130
#Text=Heap Blocks: lossy=256
#Text=Bitmap Index Scan on sale_fact_sold_at_bix
#Text=(cost=0.00..12.03 rows=12500 width=0)
#Text=Index Cond: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))
#Text=Execution Time: 8.877 ms
#Text=The database used our BRIN index to get a range of sale dates, but that's not the interesting part...
146-1	30265-30270	Let's	
146-2	30271-30274	try	
146-3	30275-30277	to	
146-4	30278-30283	query	
146-5	30284-30287	for	
146-6	30288-30289	a	
146-7	30290-30295	range	
146-8	30296-30298	of	
146-9	30299-30303	sale	
146-10	30304-30309	dates	
146-11	30309-30310	:	
146-12	30311-30313	db	
146-13	30313-30314	=	
146-14	30314-30315	#	
146-15	30316-30323	EXPLAIN	
146-16	30324-30325	(	
146-17	30325-30332	ANALYZE	
146-18	30332-30333	)	
146-19	30334-30336	db	
146-20	30336-30337	-	
146-21	30337-30338	#	
146-22	30339-30345	SELECT	
146-23	30346-30347	*	
146-24	30348-30350	db	
146-25	30350-30351	-	
146-26	30351-30352	#	
146-27	30353-30357	FROM	
146-28	30358-30367	sale_fact	
146-29	30368-30370	db	
146-30	30370-30371	-	
146-31	30371-30372	#	
146-32	30373-30378	WHERE	
146-33	30379-30386	sold_at	
146-34	30387-30394	BETWEEN	
146-35	30395-30396	'	
146-36	30396-30400	2020	
146-37	30400-30401	-	
146-38	30401-30403	07	
146-39	30403-30404	-	
146-40	30404-30406	01	
146-41	30406-30407	'	
146-42	30408-30411	AND	
146-43	30412-30413	'	
146-44	30413-30417	2020	
146-45	30417-30418	-	
146-46	30418-30420	07	
146-47	30420-30421	-	
146-48	30421-30423	31	
146-49	30423-30424	'	
146-50	30424-30425	;	
146-51	30426-30431	QUERY	
146-52	30432-30436	PLAN	
146-53	30437-30438	-	
146-54	30438-30439	-	
146-55	30439-30440	-	
146-56	30440-30441	-	
146-57	30441-30442	-	
146-58	30442-30443	-	
146-59	30443-30444	-	
146-60	30444-30445	-	
146-61	30445-30446	-	
146-62	30446-30447	-	
146-63	30447-30448	-	
146-64	30448-30449	-	
146-65	30449-30450	-	
146-66	30450-30451	-	
146-67	30451-30452	-	
146-68	30452-30453	-	
146-69	30453-30454	-	
146-70	30454-30455	-	
146-71	30455-30456	-	
146-72	30456-30457	-	
146-73	30457-30458	-	
146-74	30458-30459	-	
146-75	30459-30460	-	
146-76	30460-30461	-	
146-77	30461-30462	-	
146-78	30462-30463	-	
146-79	30463-30464	-	
146-80	30464-30465	-	
146-81	30465-30466	-	
146-82	30466-30467	-	
146-83	30467-30468	-	
146-84	30468-30469	-	
146-85	30469-30470	-	
146-86	30470-30471	-	
146-87	30471-30472	-	
146-88	30472-30473	-	
146-89	30473-30474	-	
146-90	30474-30475	-	
146-91	30475-30476	-	
146-92	30476-30477	-	
146-93	30477-30478	-	
146-94	30478-30479	-	
146-95	30479-30480	-	
146-96	30480-30481	-	
146-97	30481-30482	-	
146-98	30482-30483	-	
146-99	30483-30484	-	
146-100	30484-30485	-	
146-101	30485-30486	-	
146-102	30486-30487	-	
146-103	30487-30488	-	
146-104	30488-30489	-	
146-105	30489-30490	-	
146-106	30490-30491	-	
146-107	30491-30492	-	
146-108	30492-30493	-	
146-109	30493-30494	-	
146-110	30494-30495	-	
146-111	30495-30496	-	
146-112	30496-30497	-	
146-113	30497-30498	-	
146-114	30498-30499	-	
146-115	30499-30500	-	
146-116	30500-30501	-	
146-117	30501-30502	-	
146-118	30502-30503	-	
146-119	30503-30504	-	
146-120	30504-30505	-	
146-121	30505-30506	-	
146-122	30506-30507	-	
146-123	30507-30508	-	
146-124	30508-30509	-	
146-125	30509-30510	-	
146-126	30510-30511	-	
146-127	30511-30512	-	
146-128	30512-30513	-	
146-129	30513-30514	-	
146-130	30514-30515	-	
146-131	30515-30516	-	
146-132	30516-30517	-	
146-133	30517-30518	-	
146-134	30518-30519	-	
146-135	30519-30520	-	
146-136	30520-30521	-	
146-137	30521-30522	-	
146-138	30522-30523	-	
146-139	30523-30524	-	
146-140	30524-30525	-	
146-141	30525-30526	-	
146-142	30526-30527	-	
146-143	30527-30528	-	
146-144	30528-30529	-	
146-145	30530-30536	Bitmap	
146-146	30537-30541	Heap	
146-147	30542-30546	Scan	
146-148	30547-30549	on	
146-149	30550-30559	sale_fact	
146-150	30560-30561	(	
146-151	30561-30565	cost	
146-152	30565-30566	=	
146-153	30566-30571	13.11	
146-154	30571-30572	.	
146-155	30572-30580	.1135.61	
146-156	30581-30585	rows	
146-157	30585-30586	=	
146-158	30586-30590	4319	
146-159	30591-30596	width	
146-160	30596-30597	=	
146-161	30597-30599	41	
146-162	30599-30600	)	
146-163	30601-30608	Recheck	
146-164	30609-30613	Cond	
146-165	30613-30614	:	
146-166	30615-30616	(	
146-167	30616-30617	(	
146-168	30617-30624	sold_at	
146-169	30625-30626	>	
146-170	30626-30627	=	
146-171	30628-30629	'	
146-172	30629-30633	2020	
146-173	30633-30634	-	
146-174	30634-30636	07	
146-175	30636-30637	-	
146-176	30637-30639	01	
146-177	30639-30640	'	
146-178	30640-30641	:	
146-179	30641-30642	:	
146-180	30642-30646	date	
146-181	30646-30647	)	
146-182	30648-30651	AND	
146-183	30652-30653	(	
146-184	30653-30660	sold_at	
146-185	30661-30662	<	
146-186	30662-30663	=	
146-187	30664-30665	'	
146-188	30665-30669	2020	
146-189	30669-30670	-	
146-190	30670-30672	07	
146-191	30672-30673	-	
146-192	30673-30675	31	
146-193	30675-30676	'	
146-194	30676-30677	:	
146-195	30677-30678	:	
146-196	30678-30682	date	
146-197	30682-30683	)	
146-198	30683-30684	)	
146-199	30685-30689	Rows	
146-200	30690-30697	Removed	
146-201	30698-30700	by	
146-202	30701-30706	Index	
146-203	30707-30714	Recheck	
146-204	30714-30715	:	
146-205	30716-30721	23130	
146-206	30722-30726	Heap	
146-207	30727-30733	Blocks	
146-208	30733-30734	:	
146-209	30735-30740	lossy	
146-210	30740-30741	=	
146-211	30741-30744	256	
146-212	30745-30751	Bitmap	
146-213	30752-30757	Index	
146-214	30758-30762	Scan	
146-215	30763-30765	on	
146-216	30766-30787	sale_fact_sold_at_bix	
146-217	30788-30789	(	
146-218	30789-30793	cost	
146-219	30793-30794	=	
146-220	30794-30798	0.00	
146-221	30798-30799	.	
146-222	30799-30805	.12.03	
146-223	30806-30810	rows	
146-224	30810-30811	=	
146-225	30811-30816	12500	
146-226	30817-30822	width	
146-227	30822-30823	=	
146-228	30823-30824	0	
146-229	30824-30825	)	
146-230	30826-30831	Index	
146-231	30832-30836	Cond	
146-232	30836-30837	:	
146-233	30838-30839	(	
146-234	30839-30840	(	
146-235	30840-30847	sold_at	
146-236	30848-30849	>	
146-237	30849-30850	=	
146-238	30851-30852	'	
146-239	30852-30856	2020	
146-240	30856-30857	-	
146-241	30857-30859	07	
146-242	30859-30860	-	
146-243	30860-30862	01	
146-244	30862-30863	'	
146-245	30863-30864	:	
146-246	30864-30865	:	
146-247	30865-30869	date	
146-248	30869-30870	)	
146-249	30871-30874	AND	
146-250	30875-30876	(	
146-251	30876-30883	sold_at	
146-252	30884-30885	<	
146-253	30885-30886	=	
146-254	30887-30888	'	
146-255	30888-30892	2020	
146-256	30892-30893	-	
146-257	30893-30895	07	
146-258	30895-30896	-	
146-259	30896-30898	31	
146-260	30898-30899	'	
146-261	30899-30900	:	
146-262	30900-30901	:	
146-263	30901-30905	date	
146-264	30905-30906	)	
146-265	30906-30907	)	
146-266	30908-30917	Execution	
146-267	30918-30922	Time	
146-268	30922-30923	:	
146-269	30924-30929	8.877	
146-270	30930-30932	ms	
146-271	30933-30936	The	
146-272	30937-30945	database	
146-273	30946-30950	used	
146-274	30951-30954	our	
146-275	30955-30959	BRIN	
146-276	30960-30965	index	
146-277	30966-30968	to	
146-278	30969-30972	get	
146-279	30973-30974	a	
146-280	30975-30980	range	
146-281	30981-30983	of	
146-282	30984-30988	sale	
146-283	30989-30994	dates	
146-284	30994-30995	,	
146-285	30996-30999	but	
146-286	31000-31006	that's	
146-287	31007-31010	not	
146-288	31011-31014	the	
146-289	31015-31026	interesting	
146-290	31027-31031	part	
146-291	31031-31032	.	
146-292	31032-31033	.	
146-293	31033-31034	.	

#Text=Optimizing pages_per_range
#Text=According to the execution plan, the database removed 23,130 rows from the pages it found using the index.
147-1	31035-31045	Optimizing	
147-2	31046-31061	pages_per_range	
147-3	31062-31071	According	
147-4	31072-31074	to	
147-5	31075-31078	the	
147-6	31079-31088	execution	
147-7	31089-31093	plan	
147-8	31093-31094	,	
147-9	31095-31098	the	
147-10	31099-31107	database	
147-11	31108-31115	removed	
147-12	31116-31122	23,130	
147-13	31123-31127	rows	
147-14	31128-31132	from	
147-15	31133-31136	the	
147-16	31137-31142	pages	
147-17	31143-31145	it	
147-18	31146-31151	found	
147-19	31152-31157	using	
147-20	31158-31161	the	
147-21	31162-31167	index	
147-22	31167-31168	.	

#Text=This may indicate that the range we set for the index it too large for this particular query.
148-1	31169-31173	This	
148-2	31174-31177	may	
148-3	31178-31186	indicate	
148-4	31187-31191	that	
148-5	31192-31195	the	
148-6	31196-31201	range	
148-7	31202-31204	we	
148-8	31205-31208	set	
148-9	31209-31212	for	
148-10	31213-31216	the	
148-11	31217-31222	index	
148-12	31223-31225	it	
148-13	31226-31229	too	
148-14	31230-31235	large	
148-15	31236-31239	for	
148-16	31240-31244	this	
148-17	31245-31255	particular	
148-18	31256-31261	query	
148-19	31261-31262	.	

#Text=Let's try to create an index with less pages per range:
#Text=db=# CREATE INDEX sale_fact_sold_at_bix64 ON sale_fact
#Text=db-# USING BRIN(sold_at) WITH (pages_per_range = 64);
#Text=CREATE INDEX
#Text=db=# EXPLAIN (ANALYZE)
#Text=db- SELECT *
#Text=db- FROM sale_fact
#Text=db- WHERE sold_at BETWEEN '2020-07-01' AND '2020-07-31';
#Text=QUERY PLAN
#Text=---------------------------------------------------------------------------------------------
#Text=Bitmap Heap Scan on sale_fact
#Text=(cost=13.10..1048.10 rows=4319 width=41)
#Text=Recheck Cond: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))
#Text=Rows Removed by Index Recheck: 9434
#Text=Heap Blocks: lossy=128
#Text=Bitmap Index Scan on sale_fact_sold_at_bix64
#Text=(cost=0.00..12.02 rows=6667 width=0)
#Text=Index Cond: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))
#Text=Execution Time: 5.491 ms
#Text=With 64 pages per range the database removed less rows from the pages it found using the the index, only 9,434 were removed compared with 23,130 when the the range was 128 pages.
149-1	31263-31268	Let's	
149-2	31269-31272	try	
149-3	31273-31275	to	
149-4	31276-31282	create	
149-5	31283-31285	an	
149-6	31286-31291	index	
149-7	31292-31296	with	
149-8	31297-31301	less	
149-9	31302-31307	pages	
149-10	31308-31311	per	
149-11	31312-31317	range	
149-12	31317-31318	:	
149-13	31319-31321	db	
149-14	31321-31322	=	
149-15	31322-31323	#	
149-16	31324-31330	CREATE	
149-17	31331-31336	INDEX	
149-18	31337-31360	sale_fact_sold_at_bix64	
149-19	31361-31363	ON	
149-20	31364-31373	sale_fact	
149-21	31374-31376	db	
149-22	31376-31377	-	
149-23	31377-31378	#	
149-24	31379-31384	USING	
149-25	31385-31389	BRIN	
149-26	31389-31390	(	
149-27	31390-31397	sold_at	
149-28	31397-31398	)	
149-29	31399-31403	WITH	
149-30	31404-31405	(	
149-31	31405-31420	pages_per_range	
149-32	31421-31422	=	
149-33	31423-31425	64	
149-34	31425-31426	)	
149-35	31426-31427	;	
149-36	31428-31434	CREATE	
149-37	31435-31440	INDEX	
149-38	31441-31443	db	
149-39	31443-31444	=	
149-40	31444-31445	#	
149-41	31446-31453	EXPLAIN	
149-42	31454-31455	(	
149-43	31455-31462	ANALYZE	
149-44	31462-31463	)	
149-45	31464-31466	db	
149-46	31466-31467	-	
149-47	31468-31474	SELECT	
149-48	31475-31476	*	
149-49	31477-31479	db	
149-50	31479-31480	-	
149-51	31481-31485	FROM	
149-52	31486-31495	sale_fact	
149-53	31496-31498	db	
149-54	31498-31499	-	
149-55	31500-31505	WHERE	
149-56	31506-31513	sold_at	
149-57	31514-31521	BETWEEN	
149-58	31522-31523	'	
149-59	31523-31527	2020	
149-60	31527-31528	-	
149-61	31528-31530	07	
149-62	31530-31531	-	
149-63	31531-31533	01	
149-64	31533-31534	'	
149-65	31535-31538	AND	
149-66	31539-31540	'	
149-67	31540-31544	2020	
149-68	31544-31545	-	
149-69	31545-31547	07	
149-70	31547-31548	-	
149-71	31548-31550	31	
149-72	31550-31551	'	
149-73	31551-31552	;	
149-74	31553-31558	QUERY	
149-75	31559-31563	PLAN	
149-76	31564-31565	-	
149-77	31565-31566	-	
149-78	31566-31567	-	
149-79	31567-31568	-	
149-80	31568-31569	-	
149-81	31569-31570	-	
149-82	31570-31571	-	
149-83	31571-31572	-	
149-84	31572-31573	-	
149-85	31573-31574	-	
149-86	31574-31575	-	
149-87	31575-31576	-	
149-88	31576-31577	-	
149-89	31577-31578	-	
149-90	31578-31579	-	
149-91	31579-31580	-	
149-92	31580-31581	-	
149-93	31581-31582	-	
149-94	31582-31583	-	
149-95	31583-31584	-	
149-96	31584-31585	-	
149-97	31585-31586	-	
149-98	31586-31587	-	
149-99	31587-31588	-	
149-100	31588-31589	-	
149-101	31589-31590	-	
149-102	31590-31591	-	
149-103	31591-31592	-	
149-104	31592-31593	-	
149-105	31593-31594	-	
149-106	31594-31595	-	
149-107	31595-31596	-	
149-108	31596-31597	-	
149-109	31597-31598	-	
149-110	31598-31599	-	
149-111	31599-31600	-	
149-112	31600-31601	-	
149-113	31601-31602	-	
149-114	31602-31603	-	
149-115	31603-31604	-	
149-116	31604-31605	-	
149-117	31605-31606	-	
149-118	31606-31607	-	
149-119	31607-31608	-	
149-120	31608-31609	-	
149-121	31609-31610	-	
149-122	31610-31611	-	
149-123	31611-31612	-	
149-124	31612-31613	-	
149-125	31613-31614	-	
149-126	31614-31615	-	
149-127	31615-31616	-	
149-128	31616-31617	-	
149-129	31617-31618	-	
149-130	31618-31619	-	
149-131	31619-31620	-	
149-132	31620-31621	-	
149-133	31621-31622	-	
149-134	31622-31623	-	
149-135	31623-31624	-	
149-136	31624-31625	-	
149-137	31625-31626	-	
149-138	31626-31627	-	
149-139	31627-31628	-	
149-140	31628-31629	-	
149-141	31629-31630	-	
149-142	31630-31631	-	
149-143	31631-31632	-	
149-144	31632-31633	-	
149-145	31633-31634	-	
149-146	31634-31635	-	
149-147	31635-31636	-	
149-148	31636-31637	-	
149-149	31637-31638	-	
149-150	31638-31639	-	
149-151	31639-31640	-	
149-152	31640-31641	-	
149-153	31641-31642	-	
149-154	31642-31643	-	
149-155	31643-31644	-	
149-156	31644-31645	-	
149-157	31645-31646	-	
149-158	31646-31647	-	
149-159	31647-31648	-	
149-160	31648-31649	-	
149-161	31649-31650	-	
149-162	31650-31651	-	
149-163	31651-31652	-	
149-164	31652-31653	-	
149-165	31653-31654	-	
149-166	31654-31655	-	
149-167	31655-31656	-	
149-168	31656-31657	-	
149-169	31658-31664	Bitmap	
149-170	31665-31669	Heap	
149-171	31670-31674	Scan	
149-172	31675-31677	on	
149-173	31678-31687	sale_fact	
149-174	31688-31689	(	
149-175	31689-31693	cost	
149-176	31693-31694	=	
149-177	31694-31699	13.10	
149-178	31699-31700	.	
149-179	31700-31708	.1048.10	
149-180	31709-31713	rows	
149-181	31713-31714	=	
149-182	31714-31718	4319	
149-183	31719-31724	width	
149-184	31724-31725	=	
149-185	31725-31727	41	
149-186	31727-31728	)	
149-187	31729-31736	Recheck	
149-188	31737-31741	Cond	
149-189	31741-31742	:	
149-190	31743-31744	(	
149-191	31744-31745	(	
149-192	31745-31752	sold_at	
149-193	31753-31754	>	
149-194	31754-31755	=	
149-195	31756-31757	'	
149-196	31757-31761	2020	
149-197	31761-31762	-	
149-198	31762-31764	07	
149-199	31764-31765	-	
149-200	31765-31767	01	
149-201	31767-31768	'	
149-202	31768-31769	:	
149-203	31769-31770	:	
149-204	31770-31774	date	
149-205	31774-31775	)	
149-206	31776-31779	AND	
149-207	31780-31781	(	
149-208	31781-31788	sold_at	
149-209	31789-31790	<	
149-210	31790-31791	=	
149-211	31792-31793	'	
149-212	31793-31797	2020	
149-213	31797-31798	-	
149-214	31798-31800	07	
149-215	31800-31801	-	
149-216	31801-31803	31	
149-217	31803-31804	'	
149-218	31804-31805	:	
149-219	31805-31806	:	
149-220	31806-31810	date	
149-221	31810-31811	)	
149-222	31811-31812	)	
149-223	31813-31817	Rows	
149-224	31818-31825	Removed	
149-225	31826-31828	by	
149-226	31829-31834	Index	
149-227	31835-31842	Recheck	
149-228	31842-31843	:	
149-229	31844-31848	9434	
149-230	31849-31853	Heap	
149-231	31854-31860	Blocks	
149-232	31860-31861	:	
149-233	31862-31867	lossy	
149-234	31867-31868	=	
149-235	31868-31871	128	
149-236	31872-31878	Bitmap	
149-237	31879-31884	Index	
149-238	31885-31889	Scan	
149-239	31890-31892	on	
149-240	31893-31916	sale_fact_sold_at_bix64	
149-241	31917-31918	(	
149-242	31918-31922	cost	
149-243	31922-31923	=	
149-244	31923-31927	0.00	
149-245	31927-31928	.	
149-246	31928-31934	.12.02	
149-247	31935-31939	rows	
149-248	31939-31940	=	
149-249	31940-31944	6667	
149-250	31945-31950	width	
149-251	31950-31951	=	
149-252	31951-31952	0	
149-253	31952-31953	)	
149-254	31954-31959	Index	
149-255	31960-31964	Cond	
149-256	31964-31965	:	
149-257	31966-31967	(	
149-258	31967-31968	(	
149-259	31968-31975	sold_at	
149-260	31976-31977	>	
149-261	31977-31978	=	
149-262	31979-31980	'	
149-263	31980-31984	2020	
149-264	31984-31985	-	
149-265	31985-31987	07	
149-266	31987-31988	-	
149-267	31988-31990	01	
149-268	31990-31991	'	
149-269	31991-31992	:	
149-270	31992-31993	:	
149-271	31993-31997	date	
149-272	31997-31998	)	
149-273	31999-32002	AND	
149-274	32003-32004	(	
149-275	32004-32011	sold_at	
149-276	32012-32013	<	
149-277	32013-32014	=	
149-278	32015-32016	'	
149-279	32016-32020	2020	
149-280	32020-32021	-	
149-281	32021-32023	07	
149-282	32023-32024	-	
149-283	32024-32026	31	
149-284	32026-32027	'	
149-285	32027-32028	:	
149-286	32028-32029	:	
149-287	32029-32033	date	
149-288	32033-32034	)	
149-289	32034-32035	)	
149-290	32036-32045	Execution	
149-291	32046-32050	Time	
149-292	32050-32051	:	
149-293	32052-32057	5.491	
149-294	32058-32060	ms	
149-295	32061-32065	With	
149-296	32066-32068	64	
149-297	32069-32074	pages	
149-298	32075-32078	per	
149-299	32079-32084	range	
149-300	32085-32088	the	
149-301	32089-32097	database	
149-302	32098-32105	removed	
149-303	32106-32110	less	
149-304	32111-32115	rows	
149-305	32116-32120	from	
149-306	32121-32124	the	
149-307	32125-32130	pages	
149-308	32131-32133	it	
149-309	32134-32139	found	
149-310	32140-32145	using	
149-311	32146-32149	the	
149-312	32150-32153	the	
149-313	32154-32159	index	
149-314	32159-32160	,	
149-315	32161-32165	only	
149-316	32166-32171	9,434	
149-317	32172-32176	were	
149-318	32177-32184	removed	
149-319	32185-32193	compared	
149-320	32194-32198	with	
149-321	32199-32205	23,130	
149-322	32206-32210	when	
149-323	32211-32214	the	
149-324	32215-32218	the	
149-325	32219-32224	range	
149-326	32225-32228	was	
149-327	32229-32232	128	
149-328	32233-32238	pages	
149-329	32238-32239	.	

#Text=This means the database had to do less IO and the query was slightly faster, ~5.5ms compared to ~8.9ms.
150-1	32240-32244	This	
150-2	32245-32250	means	
150-3	32251-32254	the	
150-4	32255-32263	database	
150-5	32264-32267	had	
150-6	32268-32270	to	
150-7	32271-32273	do	
150-8	32274-32278	less	
150-9	32279-32281	IO	
150-10	32282-32285	and	
150-11	32286-32289	the	
150-12	32290-32295	query	
150-13	32296-32299	was	
150-14	32300-32308	slightly	
150-15	32309-32315	faster	
150-16	32315-32316	,	
150-17	32317-32318	~	
150-18	32318-32323	5.5ms	
150-19	32324-32332	compared	
150-20	32333-32335	to	
150-21	32336-32337	~	
150-22	32337-32342	8.9ms	
150-23	32342-32343	.	

#Text=Testing the index with different values for pages_per_range produced the following results:
#Text=pages_per_range
#Text=Rows Removed by Index Recheck
#Text=128
#Text=23,130
#Text=9,434
#Text=874
#Text=446
#Text=446
#Text=We can see that as we decrease pages_per_range, the index is more accurate and less rows are removed from the pages found using the index.
151-1	32344-32351	Testing	
151-2	32352-32355	the	
151-3	32356-32361	index	
151-4	32362-32366	with	
151-5	32367-32376	different	
151-6	32377-32383	values	
151-7	32384-32387	for	
151-8	32388-32403	pages_per_range	
151-9	32404-32412	produced	
151-10	32413-32416	the	
151-11	32417-32426	following	
151-12	32427-32434	results	
151-13	32434-32435	:	
151-14	32436-32451	pages_per_range	
151-15	32452-32456	Rows	
151-16	32457-32464	Removed	
151-17	32465-32467	by	
151-18	32468-32473	Index	
151-19	32474-32481	Recheck	
151-20	32482-32485	128	
151-21	32486-32492	23,130	
151-22	32493-32498	9,434	
151-23	32499-32502	874	
151-24	32503-32506	446	
151-25	32507-32510	446	
151-26	32511-32513	We	
151-27	32514-32517	can	
151-28	32518-32521	see	
151-29	32522-32526	that	
151-30	32527-32529	as	
151-31	32530-32532	we	
151-32	32533-32541	decrease	
151-33	32542-32557	pages_per_range	
151-34	32557-32558	,	
151-35	32559-32562	the	
151-36	32563-32568	index	
151-37	32569-32571	is	
151-38	32572-32576	more	
151-39	32577-32585	accurate	
151-40	32586-32589	and	
151-41	32590-32594	less	
151-42	32595-32599	rows	
151-43	32600-32603	are	
151-44	32604-32611	removed	
151-45	32612-32616	from	
151-46	32617-32620	the	
151-47	32621-32626	pages	
151-48	32627-32632	found	
151-49	32633-32638	using	
151-50	32639-32642	the	
151-51	32643-32648	index	
151-52	32648-32649	.	

#Text=Note that we optimized the query for a very specific query.
152-1	32650-32654	Note	
152-2	32655-32659	that	
152-3	32660-32662	we	
152-4	32663-32672	optimized	
152-5	32673-32676	the	
152-6	32677-32682	query	
152-7	32683-32686	for	
152-8	32687-32688	a	
152-9	32689-32693	very	
152-10	32694-32702	specific	
152-11	32703-32708	query	
152-12	32708-32709	.	

#Text=This is fine for demonstration purposes, but in real life it's best to use values that meet the needs of most queries.
153-1	32710-32714	This	
153-2	32715-32717	is	
153-3	32718-32722	fine	
153-4	32723-32726	for	
153-5	32727-32740	demonstration	
153-6	32741-32749	purposes	
153-7	32749-32750	,	
153-8	32751-32754	but	
153-9	32755-32757	in	
153-10	32758-32762	real	
153-11	32763-32767	life	
153-12	32768-32772	it's	
153-13	32773-32777	best	
153-14	32778-32780	to	
153-15	32781-32784	use	
153-16	32785-32791	values	
153-17	32792-32796	that	
153-18	32797-32801	meet	
153-19	32802-32805	the	
153-20	32806-32811	needs	
153-21	32812-32814	of	
153-22	32815-32819	most	
153-23	32820-32827	queries	
153-24	32827-32828	.	

#Text=Evaluating Index Size
#Text=Another big selling point for BRIN indexes is their size.
154-1	32829-32839	Evaluating	
154-2	32840-32845	Index	
154-3	32846-32850	Size	
154-4	32851-32858	Another	
154-5	32859-32862	big	
154-6	32863-32870	selling	
154-7	32871-32876	point	
154-8	32877-32880	for	
154-9	32881-32885	BRIN	
154-10	32886-32893	indexes	
154-11	32894-32896	is	
154-12	32897-32902	their	
154-13	32903-32907	size	
154-14	32907-32908	.	

#Text=In previous sections we created a B-Tree index on the sold_at field.
155-1	32909-32911	In	
155-2	32912-32920	previous	
155-3	32921-32929	sections	
155-4	32930-32932	we	
155-5	32933-32940	created	
155-6	32941-32942	a	
155-7	32943-32949	B-Tree	
155-8	32950-32955	index	
155-9	32956-32958	on	
155-10	32959-32962	the	
155-11	32963-32970	sold_at	
155-12	32971-32976	field	
155-13	32976-32977	.	

#Text=The size of the index was 2224kB.
156-1	32978-32981	The	
156-2	32982-32986	size	
156-3	32987-32989	of	
156-4	32990-32993	the	
156-5	32994-32999	index	
156-6	33000-33003	was	
156-7	33004-33010	2224kB	
156-8	33010-33011	.	

#Text=The size a BRIN index with pages_per_range=128 is only 48kb.
157-1	33012-33015	The	
157-2	33016-33020	size	
157-3	33021-33022	a	
157-4	33023-33027	BRIN	
157-5	33028-33033	index	
157-6	33034-33038	with	
157-7	33039-33054	pages_per_range	
157-8	33054-33055	=	
157-9	33055-33058	128	
157-10	33059-33061	is	
157-11	33062-33066	only	
157-12	33067-33071	48kb	
157-13	33071-33072	.	

#Text=That's 46 times smaller than the B-Tree index.
158-1	33073-33079	That's	
158-2	33080-33082	46	
158-3	33083-33088	times	
158-4	33089-33096	smaller	
158-5	33097-33101	than	
158-6	33102-33105	the	
158-7	33106-33112	B-Tree	
158-8	33113-33118	index	
158-9	33118-33119	.	

#Text=Schema |
#Text=Name
#Text=| Type
#Text=| Owner |
#Text=Table
#Text=| Size
#Text=--------+-----------------------+-------+-------+-----------+-------
#Text=public | sale_fact_sold_at_bix | index | haki
#Text=| sale_fact | 48 kB
#Text=public | sale_fact_sold_at_ix
#Text=| index | haki
#Text=| sale_fact | 2224 kB
#Text=The size of a BRIN index is also affected by pages_per_range.
159-1	33120-33126	Schema	
159-2	33127-33128	|	
159-3	33129-33133	Name	
159-4	33134-33135	|	
159-5	33136-33140	Type	
159-6	33141-33142	|	
159-7	33143-33148	Owner	
159-8	33149-33150	|	
159-9	33151-33156	Table	
159-10	33157-33158	|	
159-11	33159-33163	Size	
159-12	33164-33165	-	
159-13	33165-33166	-	
159-14	33166-33167	-	
159-15	33167-33168	-	
159-16	33168-33169	-	
159-17	33169-33170	-	
159-18	33170-33171	-	
159-19	33171-33172	-	
159-20	33172-33173	+	
159-21	33173-33174	-	
159-22	33174-33175	-	
159-23	33175-33176	-	
159-24	33176-33177	-	
159-25	33177-33178	-	
159-26	33178-33179	-	
159-27	33179-33180	-	
159-28	33180-33181	-	
159-29	33181-33182	-	
159-30	33182-33183	-	
159-31	33183-33184	-	
159-32	33184-33185	-	
159-33	33185-33186	-	
159-34	33186-33187	-	
159-35	33187-33188	-	
159-36	33188-33189	-	
159-37	33189-33190	-	
159-38	33190-33191	-	
159-39	33191-33192	-	
159-40	33192-33193	-	
159-41	33193-33194	-	
159-42	33194-33195	-	
159-43	33195-33196	-	
159-44	33196-33197	+	
159-45	33197-33198	-	
159-46	33198-33199	-	
159-47	33199-33200	-	
159-48	33200-33201	-	
159-49	33201-33202	-	
159-50	33202-33203	-	
159-51	33203-33204	-	
159-52	33204-33205	+	
159-53	33205-33206	-	
159-54	33206-33207	-	
159-55	33207-33208	-	
159-56	33208-33209	-	
159-57	33209-33210	-	
159-58	33210-33211	-	
159-59	33211-33212	-	
159-60	33212-33213	+	
159-61	33213-33214	-	
159-62	33214-33215	-	
159-63	33215-33216	-	
159-64	33216-33217	-	
159-65	33217-33218	-	
159-66	33218-33219	-	
159-67	33219-33220	-	
159-68	33220-33221	-	
159-69	33221-33222	-	
159-70	33222-33223	-	
159-71	33223-33224	-	
159-72	33224-33225	+	
159-73	33225-33226	-	
159-74	33226-33227	-	
159-75	33227-33228	-	
159-76	33228-33229	-	
159-77	33229-33230	-	
159-78	33230-33231	-	
159-79	33231-33232	-	
159-80	33233-33239	public	
159-81	33240-33241	|	
159-82	33242-33263	sale_fact_sold_at_bix	
159-83	33264-33265	|	
159-84	33266-33271	index	
159-85	33272-33273	|	
159-86	33274-33278	haki	
159-87	33279-33280	|	
159-88	33281-33290	sale_fact	
159-89	33291-33292	|	
159-90	33293-33295	48	
159-91	33296-33298	kB	
159-92	33299-33305	public	
159-93	33306-33307	|	
159-94	33308-33328	sale_fact_sold_at_ix	
159-95	33329-33330	|	
159-96	33331-33336	index	
159-97	33337-33338	|	
159-98	33339-33343	haki	
159-99	33344-33345	|	
159-100	33346-33355	sale_fact	
159-101	33356-33357	|	
159-102	33358-33362	2224	
159-103	33363-33365	kB	
159-104	33366-33369	The	
159-105	33370-33374	size	
159-106	33375-33377	of	
159-107	33378-33379	a	
159-108	33380-33384	BRIN	
159-109	33385-33390	index	
159-110	33391-33393	is	
159-111	33394-33398	also	
159-112	33399-33407	affected	
159-113	33408-33410	by	
159-114	33411-33426	pages_per_range	
159-115	33426-33427	.	

#Text=For example, a BRIN index with pages_per_range=2 weighs 56kb, which is only slightly bigger than 48kb.
160-1	33428-33431	For	
160-2	33432-33439	example	
160-3	33439-33440	,	
160-4	33441-33442	a	
160-5	33443-33447	BRIN	
160-6	33448-33453	index	
160-7	33454-33458	with	
160-8	33459-33474	pages_per_range	
160-9	33474-33475	=	
160-10	33475-33476	2	
160-11	33477-33483	weighs	
160-12	33484-33488	56kb	
160-13	33488-33489	,	
160-14	33490-33495	which	
160-15	33496-33498	is	
160-16	33499-33503	only	
160-17	33504-33512	slightly	
160-18	33513-33519	bigger	
160-19	33520-33524	than	
160-20	33525-33529	48kb	
160-21	33529-33530	.	

#Text=Make Indexes "Invisible"
#Text=PostgreSQL has a nice feature called transactional DDL.
161-1	33531-33535	Make	
161-2	33536-33543	Indexes	
161-3	33544-33545	"	
161-4	33545-33554	Invisible	
161-5	33554-33555	"	
161-6	33556-33566	PostgreSQL	
161-7	33567-33570	has	
161-8	33571-33572	a	
161-9	33573-33577	nice	
161-10	33578-33585	feature	
161-11	33586-33592	called	
161-12	33593-33606	transactional	
161-13	33607-33610	DDL	
161-14	33610-33611	.	

#Text=After years of using Oracle, I got used to DDL commands such as CREATE, DROP and ALTER ending a transaction.
162-1	33612-33617	After	
162-2	33618-33623	years	
162-3	33624-33626	of	
162-4	33627-33632	using	
162-5	33633-33639	Oracle	
162-6	33639-33640	,	
162-7	33641-33642	I	
162-8	33643-33646	got	
162-9	33647-33651	used	
162-10	33652-33654	to	
162-11	33655-33658	DDL	
162-12	33659-33667	commands	
162-13	33668-33672	such	
162-14	33673-33675	as	
162-15	33676-33682	CREATE	
162-16	33682-33683	,	
162-17	33684-33688	DROP	
162-18	33689-33692	and	
162-19	33693-33698	ALTER	
162-20	33699-33705	ending	
162-21	33706-33707	a	
162-22	33708-33719	transaction	
162-23	33719-33720	.	

#Text=However, in PostgreSQL you can perform DDL commands inside a transaction, and changes will take effect only when the transaction is committed.
163-1	33721-33728	However	
163-2	33728-33729	,	
163-3	33730-33732	in	
163-4	33733-33743	PostgreSQL	
163-5	33744-33747	you	
163-6	33748-33751	can	
163-7	33752-33759	perform	
163-8	33760-33763	DDL	
163-9	33764-33772	commands	
163-10	33773-33779	inside	
163-11	33780-33781	a	
163-12	33782-33793	transaction	
163-13	33793-33794	,	
163-14	33795-33798	and	
163-15	33799-33806	changes	
163-16	33807-33811	will	
163-17	33812-33816	take	
163-18	33817-33823	effect	
163-19	33824-33828	only	
163-20	33829-33833	when	
163-21	33834-33837	the	
163-22	33838-33849	transaction	
163-23	33850-33852	is	
163-24	33853-33862	committed	
163-25	33862-33863	.	

#Text=As I recently discovered, using transactional DDL you can make indexes invisible!
164-1	33864-33866	As	
164-2	33867-33868	I	
164-3	33869-33877	recently	
164-4	33878-33888	discovered	
164-5	33888-33889	,	
164-6	33890-33895	using	
164-7	33896-33909	transactional	
164-8	33910-33913	DDL	
164-9	33914-33917	you	
164-10	33918-33921	can	
164-11	33922-33926	make	
164-12	33927-33934	indexes	
164-13	33935-33944	invisible	
164-14	33944-33945	!	

#Text=This comes in handy when you want to see what an execution plan looks like without some index.
165-1	33946-33950	This	
165-2	33951-33956	comes	
165-3	33957-33959	in	
165-4	33960-33965	handy	
165-5	33966-33970	when	
165-6	33971-33974	you	
165-7	33975-33979	want	
165-8	33980-33982	to	
165-9	33983-33986	see	
165-10	33987-33991	what	
165-11	33992-33994	an	
165-12	33995-34004	execution	
165-13	34005-34009	plan	
165-14	34010-34015	looks	
165-15	34016-34020	like	
165-16	34021-34028	without	
165-17	34029-34033	some	
165-18	34034-34039	index	
165-19	34039-34040	.	

#Text=For example, in the sale_fact table from the previous section we created an index on sold_at.
166-1	34041-34044	For	
166-2	34045-34052	example	
166-3	34052-34053	,	
166-4	34054-34056	in	
166-5	34057-34060	the	
166-6	34061-34070	sale_fact	
166-7	34071-34076	table	
166-8	34077-34081	from	
166-9	34082-34085	the	
166-10	34086-34094	previous	
166-11	34095-34102	section	
166-12	34103-34105	we	
166-13	34106-34113	created	
166-14	34114-34116	an	
166-15	34117-34122	index	
166-16	34123-34125	on	
166-17	34126-34133	sold_at	
166-18	34133-34134	.	

#Text=The execution plan for fetching sales made in July looked like this:
#Text=db=# EXPLAIN
#Text=db-# SELECT *
#Text=db-# FROM sale_fact
#Text=db-# WHERE sold_at BETWEEN '2020-07-01' AND '2020-07-31';
#Text=QUERY PLAN
#Text=--------------------------------------------------------------------------------------------
#Text=Index Scan using sale_fact_sold_at_ix on sale_fact
#Text=(cost=0.42..182.80 rows=4319 width=41)
#Text=Index Cond: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))P
#Text=To see what the execution plan would be if the index sale_fact_sold_at_ix did not exist, we can drop the index inside a transaction and immediately rollback:
#Text=db=# BEGIN;
#Text=BEGIN
#Text=db=# DROP INDEX sale_fact_sold_at_ix;
#Text=DROP INDEX
#Text=db=# EXPLAIN
#Text=db-# SELECT *
#Text=db-# FROM sale_fact
#Text=db-# WHERE sold_at BETWEEN '2020-07-01' AND '2020-07-31';
#Text=QUERY PLAN
#Text=---------------------------------------------------------------------------------
#Text=Seq Scan on sale_fact
#Text=(cost=0.00..2435.00 rows=4319 width=41)
#Text=Filter: ((sold_at >= '2020-07-01'::date) AND (sold_at <= '2020-07-31'::date))
#Text=db=# ROLLBACK;
#Text=ROLLBACK
#Text=We first start a transaction using BEGIN.
167-1	34135-34138	The	
167-2	34139-34148	execution	
167-3	34149-34153	plan	
167-4	34154-34157	for	
167-5	34158-34166	fetching	
167-6	34167-34172	sales	
167-7	34173-34177	made	
167-8	34178-34180	in	
167-9	34181-34185	July	
167-10	34186-34192	looked	
167-11	34193-34197	like	
167-12	34198-34202	this	
167-13	34202-34203	:	
167-14	34204-34206	db	
167-15	34206-34207	=	
167-16	34207-34208	#	
167-17	34209-34216	EXPLAIN	
167-18	34217-34219	db	
167-19	34219-34220	-	
167-20	34220-34221	#	
167-21	34222-34228	SELECT	
167-22	34229-34230	*	
167-23	34231-34233	db	
167-24	34233-34234	-	
167-25	34234-34235	#	
167-26	34236-34240	FROM	
167-27	34241-34250	sale_fact	
167-28	34251-34253	db	
167-29	34253-34254	-	
167-30	34254-34255	#	
167-31	34256-34261	WHERE	
167-32	34262-34269	sold_at	
167-33	34270-34277	BETWEEN	
167-34	34278-34279	'	
167-35	34279-34283	2020	
167-36	34283-34284	-	
167-37	34284-34286	07	
167-38	34286-34287	-	
167-39	34287-34289	01	
167-40	34289-34290	'	
167-41	34291-34294	AND	
167-42	34295-34296	'	
167-43	34296-34300	2020	
167-44	34300-34301	-	
167-45	34301-34303	07	
167-46	34303-34304	-	
167-47	34304-34306	31	
167-48	34306-34307	'	
167-49	34307-34308	;	
167-50	34309-34314	QUERY	
167-51	34315-34319	PLAN	
167-52	34320-34321	-	
167-53	34321-34322	-	
167-54	34322-34323	-	
167-55	34323-34324	-	
167-56	34324-34325	-	
167-57	34325-34326	-	
167-58	34326-34327	-	
167-59	34327-34328	-	
167-60	34328-34329	-	
167-61	34329-34330	-	
167-62	34330-34331	-	
167-63	34331-34332	-	
167-64	34332-34333	-	
167-65	34333-34334	-	
167-66	34334-34335	-	
167-67	34335-34336	-	
167-68	34336-34337	-	
167-69	34337-34338	-	
167-70	34338-34339	-	
167-71	34339-34340	-	
167-72	34340-34341	-	
167-73	34341-34342	-	
167-74	34342-34343	-	
167-75	34343-34344	-	
167-76	34344-34345	-	
167-77	34345-34346	-	
167-78	34346-34347	-	
167-79	34347-34348	-	
167-80	34348-34349	-	
167-81	34349-34350	-	
167-82	34350-34351	-	
167-83	34351-34352	-	
167-84	34352-34353	-	
167-85	34353-34354	-	
167-86	34354-34355	-	
167-87	34355-34356	-	
167-88	34356-34357	-	
167-89	34357-34358	-	
167-90	34358-34359	-	
167-91	34359-34360	-	
167-92	34360-34361	-	
167-93	34361-34362	-	
167-94	34362-34363	-	
167-95	34363-34364	-	
167-96	34364-34365	-	
167-97	34365-34366	-	
167-98	34366-34367	-	
167-99	34367-34368	-	
167-100	34368-34369	-	
167-101	34369-34370	-	
167-102	34370-34371	-	
167-103	34371-34372	-	
167-104	34372-34373	-	
167-105	34373-34374	-	
167-106	34374-34375	-	
167-107	34375-34376	-	
167-108	34376-34377	-	
167-109	34377-34378	-	
167-110	34378-34379	-	
167-111	34379-34380	-	
167-112	34380-34381	-	
167-113	34381-34382	-	
167-114	34382-34383	-	
167-115	34383-34384	-	
167-116	34384-34385	-	
167-117	34385-34386	-	
167-118	34386-34387	-	
167-119	34387-34388	-	
167-120	34388-34389	-	
167-121	34389-34390	-	
167-122	34390-34391	-	
167-123	34391-34392	-	
167-124	34392-34393	-	
167-125	34393-34394	-	
167-126	34394-34395	-	
167-127	34395-34396	-	
167-128	34396-34397	-	
167-129	34397-34398	-	
167-130	34398-34399	-	
167-131	34399-34400	-	
167-132	34400-34401	-	
167-133	34401-34402	-	
167-134	34402-34403	-	
167-135	34403-34404	-	
167-136	34404-34405	-	
167-137	34405-34406	-	
167-138	34406-34407	-	
167-139	34407-34408	-	
167-140	34408-34409	-	
167-141	34409-34410	-	
167-142	34410-34411	-	
167-143	34411-34412	-	
167-144	34413-34418	Index	
167-145	34419-34423	Scan	
167-146	34424-34429	using	
167-147	34430-34450	sale_fact_sold_at_ix	
167-148	34451-34453	on	
167-149	34454-34463	sale_fact	
167-150	34464-34465	(	
167-151	34465-34469	cost	
167-152	34469-34470	=	
167-153	34470-34474	0.42	
167-154	34474-34475	.	
167-155	34475-34482	.182.80	
167-156	34483-34487	rows	
167-157	34487-34488	=	
167-158	34488-34492	4319	
167-159	34493-34498	width	
167-160	34498-34499	=	
167-161	34499-34501	41	
167-162	34501-34502	)	
167-163	34503-34508	Index	
167-164	34509-34513	Cond	
167-165	34513-34514	:	
167-166	34515-34516	(	
167-167	34516-34517	(	
167-168	34517-34524	sold_at	
167-169	34525-34526	>	
167-170	34526-34527	=	
167-171	34528-34529	'	
167-172	34529-34533	2020	
167-173	34533-34534	-	
167-174	34534-34536	07	
167-175	34536-34537	-	
167-176	34537-34539	01	
167-177	34539-34540	'	
167-178	34540-34541	:	
167-179	34541-34542	:	
167-180	34542-34546	date	
167-181	34546-34547	)	
167-182	34548-34551	AND	
167-183	34552-34553	(	
167-184	34553-34560	sold_at	
167-185	34561-34562	<	
167-186	34562-34563	=	
167-187	34564-34565	'	
167-188	34565-34569	2020	
167-189	34569-34570	-	
167-190	34570-34572	07	
167-191	34572-34573	-	
167-192	34573-34575	31	
167-193	34575-34576	'	
167-194	34576-34577	:	
167-195	34577-34578	:	
167-196	34578-34582	date	
167-197	34582-34583	)	
167-198	34583-34584	)	
167-199	34584-34585	P	
167-200	34586-34588	To	
167-201	34589-34592	see	
167-202	34593-34597	what	
167-203	34598-34601	the	
167-204	34602-34611	execution	
167-205	34612-34616	plan	
167-206	34617-34622	would	
167-207	34623-34625	be	
167-208	34626-34628	if	
167-209	34629-34632	the	
167-210	34633-34638	index	
167-211	34639-34659	sale_fact_sold_at_ix	
167-212	34660-34663	did	
167-213	34664-34667	not	
167-214	34668-34673	exist	
167-215	34673-34674	,	
167-216	34675-34677	we	
167-217	34678-34681	can	
167-218	34682-34686	drop	
167-219	34687-34690	the	
167-220	34691-34696	index	
167-221	34697-34703	inside	
167-222	34704-34705	a	
167-223	34706-34717	transaction	
167-224	34718-34721	and	
167-225	34722-34733	immediately	
167-226	34734-34742	rollback	
167-227	34742-34743	:	
167-228	34744-34746	db	
167-229	34746-34747	=	
167-230	34747-34748	#	
167-231	34749-34754	BEGIN	
167-232	34754-34755	;	
167-233	34756-34761	BEGIN	
167-234	34762-34764	db	
167-235	34764-34765	=	
167-236	34765-34766	#	
167-237	34767-34771	DROP	
167-238	34772-34777	INDEX	
167-239	34778-34798	sale_fact_sold_at_ix	
167-240	34798-34799	;	
167-241	34800-34804	DROP	
167-242	34805-34810	INDEX	
167-243	34811-34813	db	
167-244	34813-34814	=	
167-245	34814-34815	#	
167-246	34816-34823	EXPLAIN	
167-247	34824-34826	db	
167-248	34826-34827	-	
167-249	34827-34828	#	
167-250	34829-34835	SELECT	
167-251	34836-34837	*	
167-252	34838-34840	db	
167-253	34840-34841	-	
167-254	34841-34842	#	
167-255	34843-34847	FROM	
167-256	34848-34857	sale_fact	
167-257	34858-34860	db	
167-258	34860-34861	-	
167-259	34861-34862	#	
167-260	34863-34868	WHERE	
167-261	34869-34876	sold_at	
167-262	34877-34884	BETWEEN	
167-263	34885-34886	'	
167-264	34886-34890	2020	
167-265	34890-34891	-	
167-266	34891-34893	07	
167-267	34893-34894	-	
167-268	34894-34896	01	
167-269	34896-34897	'	
167-270	34898-34901	AND	
167-271	34902-34903	'	
167-272	34903-34907	2020	
167-273	34907-34908	-	
167-274	34908-34910	07	
167-275	34910-34911	-	
167-276	34911-34913	31	
167-277	34913-34914	'	
167-278	34914-34915	;	
167-279	34916-34921	QUERY	
167-280	34922-34926	PLAN	
167-281	34927-34928	-	
167-282	34928-34929	-	
167-283	34929-34930	-	
167-284	34930-34931	-	
167-285	34931-34932	-	
167-286	34932-34933	-	
167-287	34933-34934	-	
167-288	34934-34935	-	
167-289	34935-34936	-	
167-290	34936-34937	-	
167-291	34937-34938	-	
167-292	34938-34939	-	
167-293	34939-34940	-	
167-294	34940-34941	-	
167-295	34941-34942	-	
167-296	34942-34943	-	
167-297	34943-34944	-	
167-298	34944-34945	-	
167-299	34945-34946	-	
167-300	34946-34947	-	
167-301	34947-34948	-	
167-302	34948-34949	-	
167-303	34949-34950	-	
167-304	34950-34951	-	
167-305	34951-34952	-	
167-306	34952-34953	-	
167-307	34953-34954	-	
167-308	34954-34955	-	
167-309	34955-34956	-	
167-310	34956-34957	-	
167-311	34957-34958	-	
167-312	34958-34959	-	
167-313	34959-34960	-	
167-314	34960-34961	-	
167-315	34961-34962	-	
167-316	34962-34963	-	
167-317	34963-34964	-	
167-318	34964-34965	-	
167-319	34965-34966	-	
167-320	34966-34967	-	
167-321	34967-34968	-	
167-322	34968-34969	-	
167-323	34969-34970	-	
167-324	34970-34971	-	
167-325	34971-34972	-	
167-326	34972-34973	-	
167-327	34973-34974	-	
167-328	34974-34975	-	
167-329	34975-34976	-	
167-330	34976-34977	-	
167-331	34977-34978	-	
167-332	34978-34979	-	
167-333	34979-34980	-	
167-334	34980-34981	-	
167-335	34981-34982	-	
167-336	34982-34983	-	
167-337	34983-34984	-	
167-338	34984-34985	-	
167-339	34985-34986	-	
167-340	34986-34987	-	
167-341	34987-34988	-	
167-342	34988-34989	-	
167-343	34989-34990	-	
167-344	34990-34991	-	
167-345	34991-34992	-	
167-346	34992-34993	-	
167-347	34993-34994	-	
167-348	34994-34995	-	
167-349	34995-34996	-	
167-350	34996-34997	-	
167-351	34997-34998	-	
167-352	34998-34999	-	
167-353	34999-35000	-	
167-354	35000-35001	-	
167-355	35001-35002	-	
167-356	35002-35003	-	
167-357	35003-35004	-	
167-358	35004-35005	-	
167-359	35005-35006	-	
167-360	35006-35007	-	
167-361	35007-35008	-	
167-362	35009-35012	Seq	
167-363	35013-35017	Scan	
167-364	35018-35020	on	
167-365	35021-35030	sale_fact	
167-366	35031-35032	(	
167-367	35032-35036	cost	
167-368	35036-35037	=	
167-369	35037-35041	0.00	
167-370	35041-35042	.	
167-371	35042-35050	.2435.00	
167-372	35051-35055	rows	
167-373	35055-35056	=	
167-374	35056-35060	4319	
167-375	35061-35066	width	
167-376	35066-35067	=	
167-377	35067-35069	41	
167-378	35069-35070	)	
167-379	35071-35077	Filter	
167-380	35077-35078	:	
167-381	35079-35080	(	
167-382	35080-35081	(	
167-383	35081-35088	sold_at	
167-384	35089-35090	>	
167-385	35090-35091	=	
167-386	35092-35093	'	
167-387	35093-35097	2020	
167-388	35097-35098	-	
167-389	35098-35100	07	
167-390	35100-35101	-	
167-391	35101-35103	01	
167-392	35103-35104	'	
167-393	35104-35105	:	
167-394	35105-35106	:	
167-395	35106-35110	date	
167-396	35110-35111	)	
167-397	35112-35115	AND	
167-398	35116-35117	(	
167-399	35117-35124	sold_at	
167-400	35125-35126	<	
167-401	35126-35127	=	
167-402	35128-35129	'	
167-403	35129-35133	2020	
167-404	35133-35134	-	
167-405	35134-35136	07	
167-406	35136-35137	-	
167-407	35137-35139	31	
167-408	35139-35140	'	
167-409	35140-35141	:	
167-410	35141-35142	:	
167-411	35142-35146	date	
167-412	35146-35147	)	
167-413	35147-35148	)	
167-414	35149-35151	db	
167-415	35151-35152	=	
167-416	35152-35153	#	
167-417	35154-35162	ROLLBACK	
167-418	35162-35163	;	
167-419	35164-35172	ROLLBACK	
167-420	35173-35175	We	
167-421	35176-35181	first	
167-422	35182-35187	start	
167-423	35188-35189	a	
167-424	35190-35201	transaction	
167-425	35202-35207	using	
167-426	35208-35213	BEGIN	
167-427	35213-35214	.	

#Text=Then we drop the index and generate an execution plan.
168-1	35215-35219	Then	
168-2	35220-35222	we	
168-3	35223-35227	drop	
168-4	35228-35231	the	
168-5	35232-35237	index	
168-6	35238-35241	and	
168-7	35242-35250	generate	
168-8	35251-35253	an	
168-9	35254-35263	execution	
168-10	35264-35268	plan	
168-11	35268-35269	.	

#Text=Notice that the execution plan now uses a full table scan, as if the index does not exist.
169-1	35270-35276	Notice	
169-2	35277-35281	that	
169-3	35282-35285	the	
169-4	35286-35295	execution	
169-5	35296-35300	plan	
169-6	35301-35304	now	
169-7	35305-35309	uses	
169-8	35310-35311	a	
169-9	35312-35316	full	
169-10	35317-35322	table	
169-11	35323-35327	scan	
169-12	35327-35328	,	
169-13	35329-35331	as	
169-14	35332-35334	if	
169-15	35335-35338	the	
169-16	35339-35344	index	
169-17	35345-35349	does	
169-18	35350-35353	not	
169-19	35354-35359	exist	
169-20	35359-35360	.	

#Text=At this point the transaction is still in progress, so the index is not dropped yet.
170-1	35361-35363	At	
170-2	35364-35368	this	
170-3	35369-35374	point	
170-4	35375-35378	the	
170-5	35379-35390	transaction	
170-6	35391-35393	is	
170-7	35394-35399	still	
170-8	35400-35402	in	
170-9	35403-35411	progress	
170-10	35411-35412	,	
170-11	35413-35415	so	
170-12	35416-35419	the	
170-13	35420-35425	index	
170-14	35426-35428	is	
170-15	35429-35432	not	
170-16	35433-35440	dropped	
170-17	35441-35444	yet	
170-18	35444-35445	.	

#Text=To finish the transaction without dropping the index we rollback the transaction using the ROLLBACK command.
171-1	35446-35448	To	
171-2	35449-35455	finish	
171-3	35456-35459	the	
171-4	35460-35471	transaction	
171-5	35472-35479	without	
171-6	35480-35488	dropping	
171-7	35489-35492	the	
171-8	35493-35498	index	
171-9	35499-35501	we	
171-10	35502-35510	rollback	
171-11	35511-35514	the	
171-12	35515-35526	transaction	
171-13	35527-35532	using	
171-14	35533-35536	the	
171-15	35537-35545	ROLLBACK	
171-16	35546-35553	command	
171-17	35553-35554	.	

#Text=Now, make sure the index still exists:
#Text=db=# \\di+ sale_fact_sold_at_ix
#Text=List of relations
#Text=Schema |
#Text=Name
#Text=| Type
#Text=| Owner |
#Text=Table
#Text=Size
#Text=--------+----------------------+-------+-------+-----------+---------
#Text=public | sale_fact_sold_at_ix | index | haki
#Text=| sale_fact | 2224 kB
#Text=Other database that don't support transactional DDL provide other ways to achieve the same goal.
172-1	35555-35558	Now	
172-2	35558-35559	,	
172-3	35560-35564	make	
172-4	35565-35569	sure	
172-5	35570-35573	the	
172-6	35574-35579	index	
172-7	35580-35585	still	
172-8	35586-35592	exists	
172-9	35592-35593	:	
172-10	35594-35596	db	
172-11	35596-35597	=	
172-12	35597-35598	#	
172-13	35599-35600	\	
172-14	35600-35602	di	
172-15	35602-35603	+	
172-16	35604-35624	sale_fact_sold_at_ix	
172-17	35625-35629	List	
172-18	35630-35632	of	
172-19	35633-35642	relations	
172-20	35643-35649	Schema	
172-21	35650-35651	|	
172-22	35652-35656	Name	
172-23	35657-35658	|	
172-24	35659-35663	Type	
172-25	35664-35665	|	
172-26	35666-35671	Owner	
172-27	35672-35673	|	
172-28	35674-35679	Table	
172-29	35680-35684	Size	
172-30	35685-35686	-	
172-31	35686-35687	-	
172-32	35687-35688	-	
172-33	35688-35689	-	
172-34	35689-35690	-	
172-35	35690-35691	-	
172-36	35691-35692	-	
172-37	35692-35693	-	
172-38	35693-35694	+	
172-39	35694-35695	-	
172-40	35695-35696	-	
172-41	35696-35697	-	
172-42	35697-35698	-	
172-43	35698-35699	-	
172-44	35699-35700	-	
172-45	35700-35701	-	
172-46	35701-35702	-	
172-47	35702-35703	-	
172-48	35703-35704	-	
172-49	35704-35705	-	
172-50	35705-35706	-	
172-51	35706-35707	-	
172-52	35707-35708	-	
172-53	35708-35709	-	
172-54	35709-35710	-	
172-55	35710-35711	-	
172-56	35711-35712	-	
172-57	35712-35713	-	
172-58	35713-35714	-	
172-59	35714-35715	-	
172-60	35715-35716	-	
172-61	35716-35717	+	
172-62	35717-35718	-	
172-63	35718-35719	-	
172-64	35719-35720	-	
172-65	35720-35721	-	
172-66	35721-35722	-	
172-67	35722-35723	-	
172-68	35723-35724	-	
172-69	35724-35725	+	
172-70	35725-35726	-	
172-71	35726-35727	-	
172-72	35727-35728	-	
172-73	35728-35729	-	
172-74	35729-35730	-	
172-75	35730-35731	-	
172-76	35731-35732	-	
172-77	35732-35733	+	
172-78	35733-35734	-	
172-79	35734-35735	-	
172-80	35735-35736	-	
172-81	35736-35737	-	
172-82	35737-35738	-	
172-83	35738-35739	-	
172-84	35739-35740	-	
172-85	35740-35741	-	
172-86	35741-35742	-	
172-87	35742-35743	-	
172-88	35743-35744	-	
172-89	35744-35745	+	
172-90	35745-35746	-	
172-91	35746-35747	-	
172-92	35747-35748	-	
172-93	35748-35749	-	
172-94	35749-35750	-	
172-95	35750-35751	-	
172-96	35751-35752	-	
172-97	35752-35753	-	
172-98	35753-35754	-	
172-99	35755-35761	public	
172-100	35762-35763	|	
172-101	35764-35784	sale_fact_sold_at_ix	
172-102	35785-35786	|	
172-103	35787-35792	index	
172-104	35793-35794	|	
172-105	35795-35799	haki	
172-106	35800-35801	|	
172-107	35802-35811	sale_fact	
172-108	35812-35813	|	
172-109	35814-35818	2224	
172-110	35819-35821	kB	
172-111	35822-35827	Other	
172-112	35828-35836	database	
172-113	35837-35841	that	
172-114	35842-35847	don't	
172-115	35848-35855	support	
172-116	35856-35869	transactional	
172-117	35870-35873	DDL	
172-118	35874-35881	provide	
172-119	35882-35887	other	
172-120	35888-35892	ways	
172-121	35893-35895	to	
172-122	35896-35903	achieve	
172-123	35904-35907	the	
172-124	35908-35912	same	
172-125	35913-35917	goal	
172-126	35917-35918	.	

#Text=For example, Oracle let's you mark an index as invisible, which will cause the optimizer to ignore it.
173-1	35919-35922	For	
173-2	35923-35930	example	
173-3	35930-35931	,	
173-4	35932-35938	Oracle	
173-5	35939-35944	let's	
173-6	35945-35948	you	
173-7	35949-35953	mark	
173-8	35954-35956	an	
173-9	35957-35962	index	
173-10	35963-35965	as	
173-11	35966-35975	invisible	
173-12	35975-35976	,	
173-13	35977-35982	which	
173-14	35983-35987	will	
173-15	35988-35993	cause	
173-16	35994-35997	the	
173-17	35998-36007	optimizer	
173-18	36008-36010	to	
173-19	36011-36017	ignore	
173-20	36018-36020	it	
173-21	36020-36021	.	

#Text=CAUTION: Dropping an index inside a transaction will lock out concurrent selects, inserts, updates, and deletes on the table while the transaction is active.
174-1	36022-36029	CAUTION	
174-2	36029-36030	:	
174-3	36031-36039	Dropping	
174-4	36040-36042	an	
174-5	36043-36048	index	
174-6	36049-36055	inside	
174-7	36056-36057	a	
174-8	36058-36069	transaction	
174-9	36070-36074	will	
174-10	36075-36079	lock	
174-11	36080-36083	out	
174-12	36084-36094	concurrent	
174-13	36095-36102	selects	
174-14	36102-36103	,	
174-15	36104-36111	inserts	
174-16	36111-36112	,	
174-17	36113-36120	updates	
174-18	36120-36121	,	
174-19	36122-36125	and	
174-20	36126-36133	deletes	
174-21	36134-36136	on	
174-22	36137-36140	the	
174-23	36141-36146	table	
174-24	36147-36152	while	
174-25	36153-36156	the	
174-26	36157-36168	transaction	
174-27	36169-36171	is	
174-28	36172-36178	active	
174-29	36178-36179	.	

#Text=Use with caution in test environments, and avoid on production databases.
175-1	36180-36183	Use	
175-2	36184-36188	with	
175-3	36189-36196	caution	
175-4	36197-36199	in	
175-5	36200-36204	test	
175-6	36205-36217	environments	
175-7	36217-36218	,	
175-8	36219-36222	and	
175-9	36223-36228	avoid	
175-10	36229-36231	on	
175-11	36232-36242	production	
175-12	36243-36252	databases	
175-13	36252-36253	.	

#Text=Don't Schedule Long Running Processes at Round Hours
#Text=It's a known fact among investors that weird things can happen when a stock's price reaches a nice round number such as 10$, 100$, 1000$.
176-1	36254-36259	Don't	
176-2	36260-36268	Schedule	
176-3	36269-36273	Long	
176-4	36274-36281	Running	
176-5	36282-36291	Processes	
176-6	36292-36294	at	
176-7	36295-36300	Round	
176-8	36301-36306	Hours	
176-9	36307-36311	It's	
176-10	36312-36313	a	
176-11	36314-36319	known	
176-12	36320-36324	fact	
176-13	36325-36330	among	
176-14	36331-36340	investors	
176-15	36341-36345	that	
176-16	36346-36351	weird	
176-17	36352-36358	things	
176-18	36359-36362	can	
176-19	36363-36369	happen	
176-20	36370-36374	when	
176-21	36375-36376	a	
176-22	36377-36384	stock's	
176-23	36385-36390	price	
176-24	36391-36398	reaches	
176-25	36399-36400	a	
176-26	36401-36405	nice	
176-27	36406-36411	round	
176-28	36412-36418	number	
176-29	36419-36423	such	
176-30	36424-36426	as	
176-31	36427-36429	10	
176-32	36429-36430	$	
176-33	36430-36431	,	
176-34	36432-36435	100	
176-35	36435-36436	$	
176-36	36436-36437	,	
176-37	36438-36442	1000	
176-38	36442-36443	$	
176-39	36443-36444	.	

#Text=As the following article explains:
#Text=[...] asset's price may have a difficult time moving beyond a round number, such as $50 or $100 per share.
177-1	36445-36447	As	
177-2	36448-36451	the	
177-3	36452-36461	following	
177-4	36462-36469	article	
177-5	36470-36478	explains	
177-6	36478-36479	:	
177-7	36480-36481	[	
177-8	36481-36482	.	
177-9	36482-36483	.	
177-10	36483-36484	.	
177-11	36484-36485	]	
177-12	36486-36493	asset's	
177-13	36494-36499	price	
177-14	36500-36503	may	
177-15	36504-36508	have	
177-16	36509-36510	a	
177-17	36511-36520	difficult	
177-18	36521-36525	time	
177-19	36526-36532	moving	
177-20	36533-36539	beyond	
177-21	36540-36541	a	
177-22	36542-36547	round	
177-23	36548-36554	number	
177-24	36554-36555	,	
177-25	36556-36560	such	
177-26	36561-36563	as	
177-27	36564-36567	$50	
177-28	36568-36570	or	
177-29	36571-36575	$100	
177-30	36576-36579	per	
177-31	36580-36585	share	
177-32	36585-36586	.	

#Text=Most inexperienced traders tend to buy or sell assets when the price is at a whole number because they are more likely to feel that a stock is fairly valued at such levels.
178-1	36587-36591	Most	
178-2	36592-36605	inexperienced	
178-3	36606-36613	traders	
178-4	36614-36618	tend	
178-5	36619-36621	to	
178-6	36622-36625	buy	
178-7	36626-36628	or	
178-8	36629-36633	sell	
178-9	36634-36640	assets	
178-10	36641-36645	when	
178-11	36646-36649	the	
178-12	36650-36655	price	
178-13	36656-36658	is	
178-14	36659-36661	at	
178-15	36662-36663	a	
178-16	36664-36669	whole	
178-17	36670-36676	number	
178-18	36677-36684	because	
178-19	36685-36689	they	
178-20	36690-36693	are	
178-21	36694-36698	more	
178-22	36699-36705	likely	
178-23	36706-36708	to	
178-24	36709-36713	feel	
178-25	36714-36718	that	
178-26	36719-36720	a	
178-27	36721-36726	stock	
178-28	36727-36729	is	
178-29	36730-36736	fairly	
178-30	36737-36743	valued	
178-31	36744-36746	at	
178-32	36747-36751	such	
178-33	36752-36758	levels	
178-34	36758-36759	.	

#Text=Developers in this sense are not all that different than the investors.
179-1	36760-36770	Developers	
179-2	36771-36773	in	
179-3	36774-36778	this	
179-4	36779-36784	sense	
179-5	36785-36788	are	
179-6	36789-36792	not	
179-7	36793-36796	all	
179-8	36797-36801	that	
179-9	36802-36811	different	
179-10	36812-36816	than	
179-11	36817-36820	the	
179-12	36821-36830	investors	
179-13	36830-36831	.	

#Text=When they need to schedule a long running process, they will usually schedule it at a round hour.
180-1	36832-36836	When	
180-2	36837-36841	they	
180-3	36842-36846	need	
180-4	36847-36849	to	
180-5	36850-36858	schedule	
180-6	36859-36860	a	
180-7	36861-36865	long	
180-8	36866-36873	running	
180-9	36874-36881	process	
180-10	36881-36882	,	
180-11	36883-36887	they	
180-12	36888-36892	will	
180-13	36893-36900	usually	
180-14	36901-36909	schedule	
180-15	36910-36912	it	
180-16	36913-36915	at	
180-17	36916-36917	a	
180-18	36918-36923	round	
180-19	36924-36928	hour	
180-20	36928-36929	.	

#Text=Typical load on a system during the night
#Text=This tendency to schedule tasks at round hours can cause some unusual loads during these times.
181-1	36930-36937	Typical	
181-2	36938-36942	load	
181-3	36943-36945	on	
181-4	36946-36947	a	
181-5	36948-36954	system	
181-6	36955-36961	during	
181-7	36962-36965	the	
181-8	36966-36971	night	
181-9	36972-36976	This	
181-10	36977-36985	tendency	
181-11	36986-36988	to	
181-12	36989-36997	schedule	
181-13	36998-37003	tasks	
181-14	37004-37006	at	
181-15	37007-37012	round	
181-16	37013-37018	hours	
181-17	37019-37022	can	
181-18	37023-37028	cause	
181-19	37029-37033	some	
181-20	37034-37041	unusual	
181-21	37042-37047	loads	
181-22	37048-37054	during	
181-23	37055-37060	these	
181-24	37061-37066	times	
181-25	37066-37067	.	

#Text=So, if you need to schedule some long running process, you have a better chance of finding a system at rest if you schedule at another time.
182-1	37068-37070	So	
182-2	37070-37071	,	
182-3	37072-37074	if	
182-4	37075-37078	you	
182-5	37079-37083	need	
182-6	37084-37086	to	
182-7	37087-37095	schedule	
182-8	37096-37100	some	
182-9	37101-37105	long	
182-10	37106-37113	running	
182-11	37114-37121	process	
182-12	37121-37122	,	
182-13	37123-37126	you	
182-14	37127-37131	have	
182-15	37132-37133	a	
182-16	37134-37140	better	
182-17	37141-37147	chance	
182-18	37148-37150	of	
182-19	37151-37158	finding	
182-20	37159-37160	a	
182-21	37161-37167	system	
182-22	37168-37170	at	
182-23	37171-37175	rest	
182-24	37176-37178	if	
182-25	37179-37182	you	
182-26	37183-37191	schedule	
182-27	37192-37194	at	
182-28	37195-37202	another	
182-29	37203-37207	time	
182-30	37207-37208	.	

#Text=Another good idea is to apply a random delay to the task's schedule, so it doesn't run at the same time every time.
183-1	37209-37216	Another	
183-2	37217-37221	good	
183-3	37222-37226	idea	
183-4	37227-37229	is	
183-5	37230-37232	to	
183-6	37233-37238	apply	
183-7	37239-37240	a	
183-8	37241-37247	random	
183-9	37248-37253	delay	
183-10	37254-37256	to	
183-11	37257-37260	the	
183-12	37261-37267	task's	
183-13	37268-37276	schedule	
183-14	37276-37277	,	
183-15	37278-37280	so	
183-16	37281-37283	it	
183-17	37284-37291	doesn't	
183-18	37292-37295	run	
183-19	37296-37298	at	
183-20	37299-37302	the	
183-21	37303-37307	same	
183-22	37308-37312	time	
183-23	37313-37318	every	
183-24	37319-37323	time	
183-25	37323-37324	.	

#Text=This way, even if another task is scheduled to run at the same time, it won't be a big problem.
184-1	37325-37329	This	
184-2	37330-37333	way	
184-3	37333-37334	,	
184-4	37335-37339	even	
184-5	37340-37342	if	
184-6	37343-37350	another	
184-7	37351-37355	task	
184-8	37356-37358	is	
184-9	37359-37368	scheduled	
184-10	37369-37371	to	
184-11	37372-37375	run	
184-12	37376-37378	at	
184-13	37379-37382	the	
184-14	37383-37387	same	
184-15	37388-37392	time	
184-16	37392-37393	,	
184-17	37394-37396	it	
184-18	37397-37402	won't	
184-19	37403-37405	be	
184-20	37406-37407	a	
184-21	37408-37411	big	
184-22	37412-37419	problem	
184-23	37419-37420	.	

#Text=If you use systemd timer units to schedule your tasks, you can use the RandomizedDelaySec option for this.
185-1	37421-37423	If	
185-2	37424-37427	you	
185-3	37428-37431	use	
185-4	37432-37439	systemd	
185-5	37440-37445	timer	
185-6	37446-37451	units	
185-7	37452-37454	to	
185-8	37455-37463	schedule	
185-9	37464-37468	your	
185-10	37469-37474	tasks	
185-11	37474-37475	,	
185-12	37476-37479	you	
185-13	37480-37483	can	
185-14	37484-37487	use	
185-15	37488-37491	the	
185-16	37492-37510	RandomizedDelaySec	
185-17	37511-37517	option	
185-18	37518-37521	for	
185-19	37522-37526	this	
185-20	37526-37527	.	

#Text=Conclusion
#Text=This article covers some trivial and non-trivial tips from my own experience.
186-1	37528-37538	Conclusion	
186-2	37539-37543	This	
186-3	37544-37551	article	
186-4	37552-37558	covers	
186-5	37559-37563	some	
186-6	37564-37571	trivial	
186-7	37572-37575	and	
186-8	37576-37587	non-trivial	
186-9	37588-37592	tips	
186-10	37593-37597	from	
186-11	37598-37600	my	
186-12	37601-37604	own	
186-13	37605-37615	experience	
186-14	37615-37616	.	

#Text=Some of these tips are easy to implement, and some require a deeper understanding of how the database works.
187-1	37617-37621	Some	
187-2	37622-37624	of	
187-3	37625-37630	these	
187-4	37631-37635	tips	
187-5	37636-37639	are	
187-6	37640-37644	easy	
187-7	37645-37647	to	
187-8	37648-37657	implement	
187-9	37657-37658	,	
187-10	37659-37662	and	
187-11	37663-37667	some	
187-12	37668-37675	require	
187-13	37676-37677	a	
187-14	37678-37684	deeper	
187-15	37685-37698	understanding	
187-16	37699-37701	of	
187-17	37702-37705	how	
187-18	37706-37709	the	
187-19	37710-37718	database	
187-20	37719-37724	works	
187-21	37724-37725	.	

#Text=Databases are the backbone of most modern systems, so taking some time to understand how they work is a good investment for any developer!
188-1	37726-37735	Databases	
188-2	37736-37739	are	
188-3	37740-37743	the	
188-4	37744-37752	backbone	
188-5	37753-37755	of	
188-6	37756-37760	most	
188-7	37761-37767	modern	
188-8	37768-37775	systems	
188-9	37775-37776	,	
188-10	37777-37779	so	
188-11	37780-37786	taking	
188-12	37787-37791	some	
188-13	37792-37796	time	
188-14	37797-37799	to	
188-15	37800-37810	understand	
188-16	37811-37814	how	
188-17	37815-37819	they	
188-18	37820-37824	work	
188-19	37825-37827	is	
188-20	37828-37829	a	
188-21	37830-37834	good	
188-22	37835-37845	investment	
188-23	37846-37849	for	
188-24	37850-37853	any	
188-25	37854-37863	developer	
188-26	37863-37864	!	

#Text=This article was reviewed by the great team at pgMustard
#Text=Want me to send you an email
#Text=when I publish something new?
189-1	37865-37869	This	
189-2	37870-37877	article	
189-3	37878-37881	was	
189-4	37882-37890	reviewed	
189-5	37891-37893	by	
189-6	37894-37897	the	
189-7	37898-37903	great	
189-8	37904-37908	team	
189-9	37909-37911	at	
189-10	37912-37921	pgMustard	
189-11	37922-37926	Want	
189-12	37927-37929	me	
189-13	37930-37932	to	
189-14	37933-37937	send	
189-15	37938-37941	you	
189-16	37942-37944	an	
189-17	37945-37950	email	
189-18	37951-37955	when	
189-19	37956-37957	I	
189-20	37958-37965	publish	
189-21	37966-37975	something	
189-22	37976-37979	new	
189-23	37979-37980	?	

#Text=Share to show you care
#Text=Email
#Text=Twitter
#Text=Facebook
#Text=Reddit
#Text=Share
#Text=Similar articles
#Text=11 January 2021
#Text=PostgreSQL,
#Text=Performance,
#Text=SQL
#Text=Re-Introducing Hash Indexes in PostgreSQL
#Text=The Ugly Duckling of index types
#Text=20 October 2020
#Text=SQL,
#Text=Performance,
#Text=PostgreSQL
#Text=The Surprising Impact of Medium-Size Texts on PostgreSQL Performance
#Text=Why TOAST is the best thing since sliced bread
#Text=21 November 2019
#Text=PostgreSQL,
#Text=SQL,
#Text=Performance
#Text=12 Common Mistakes and Missed Optimization Opportunities in SQL
#Text=Made by Developers and Non-Developers
#Text=22 December 2018
#Text=PostgreSQL,
#Text=SQL,
#Text=Performance
#Text=How We Solved a Storage Problem in PostgreSQL Without Adding a Single Byte of Storage
#Text=A short story about a storage-heavy query and the silver bullet that solved the issue
#Text=17 September 2018
#Text=PostgreSQL,
#Text=SQL,
#Text=Performance
#Text=Be Careful With CTE in PostgreSQL
#Text=How to avoid common pitfalls with common table expressions in PostgreSQL
#Text=© Haki Benita 2016-2021
#Text=Credits
#Text=Appreciate
190-1	37981-37986	Share	
190-2	37987-37989	to	
190-3	37990-37994	show	
190-4	37995-37998	you	
190-5	37999-38003	care	
190-6	38004-38009	Email	
190-7	38010-38017	Twitter	
190-8	38018-38026	Facebook	
190-9	38027-38033	Reddit	
190-10	38034-38039	Share	
190-11	38040-38047	Similar	
190-12	38048-38056	articles	
190-13	38057-38059	11	
190-14	38060-38067	January	
190-15	38068-38072	2021	
190-16	38073-38083	PostgreSQL	
190-17	38083-38084	,	
190-18	38085-38096	Performance	
190-19	38096-38097	,	
190-20	38098-38101	SQL	
190-21	38102-38116	Re-Introducing	
190-22	38117-38121	Hash	
190-23	38122-38129	Indexes	
190-24	38130-38132	in	
190-25	38133-38143	PostgreSQL	
190-26	38144-38147	The	
190-27	38148-38152	Ugly	
190-28	38153-38161	Duckling	
190-29	38162-38164	of	
190-30	38165-38170	index	
190-31	38171-38176	types	
190-32	38177-38179	20	
190-33	38180-38187	October	
190-34	38188-38192	2020	
190-35	38193-38196	SQL	
190-36	38196-38197	,	
190-37	38198-38209	Performance	
190-38	38209-38210	,	
190-39	38211-38221	PostgreSQL	
190-40	38222-38225	The	
190-41	38226-38236	Surprising	
190-42	38237-38243	Impact	
190-43	38244-38246	of	
190-44	38247-38258	Medium-Size	
190-45	38259-38264	Texts	
190-46	38265-38267	on	
190-47	38268-38278	PostgreSQL	
190-48	38279-38290	Performance	
190-49	38291-38294	Why	
190-50	38295-38300	TOAST	
190-51	38301-38303	is	
190-52	38304-38307	the	
190-53	38308-38312	best	
190-54	38313-38318	thing	
190-55	38319-38324	since	
190-56	38325-38331	sliced	
190-57	38332-38337	bread	
190-58	38338-38340	21	
190-59	38341-38349	November	
190-60	38350-38354	2019	
190-61	38355-38365	PostgreSQL	
190-62	38365-38366	,	
190-63	38367-38370	SQL	
190-64	38370-38371	,	
190-65	38372-38383	Performance	
190-66	38384-38386	12	
190-67	38387-38393	Common	
190-68	38394-38402	Mistakes	
190-69	38403-38406	and	
190-70	38407-38413	Missed	
190-71	38414-38426	Optimization	
190-72	38427-38440	Opportunities	
190-73	38441-38443	in	
190-74	38444-38447	SQL	
190-75	38448-38452	Made	
190-76	38453-38455	by	
190-77	38456-38466	Developers	
190-78	38467-38470	and	
190-79	38471-38485	Non-Developers	
190-80	38486-38488	22	
190-81	38489-38497	December	
190-82	38498-38502	2018	
190-83	38503-38513	PostgreSQL	
190-84	38513-38514	,	
190-85	38515-38518	SQL	
190-86	38518-38519	,	
190-87	38520-38531	Performance	
190-88	38532-38535	How	
190-89	38536-38538	We	
190-90	38539-38545	Solved	
190-91	38546-38547	a	
190-92	38548-38555	Storage	
190-93	38556-38563	Problem	
190-94	38564-38566	in	
190-95	38567-38577	PostgreSQL	
190-96	38578-38585	Without	
190-97	38586-38592	Adding	
190-98	38593-38594	a	
190-99	38595-38601	Single	
190-100	38602-38606	Byte	
190-101	38607-38609	of	
190-102	38610-38617	Storage	
190-103	38618-38619	A	
190-104	38620-38625	short	
190-105	38626-38631	story	
190-106	38632-38637	about	
190-107	38638-38639	a	
190-108	38640-38653	storage-heavy	
190-109	38654-38659	query	
190-110	38660-38663	and	
190-111	38664-38667	the	
190-112	38668-38674	silver	
190-113	38675-38681	bullet	
190-114	38682-38686	that	
190-115	38687-38693	solved	
190-116	38694-38697	the	
190-117	38698-38703	issue	
190-118	38704-38706	17	
190-119	38707-38716	September	
190-120	38717-38721	2018	
190-121	38722-38732	PostgreSQL	
190-122	38732-38733	,	
190-123	38734-38737	SQL	
190-124	38737-38738	,	
190-125	38739-38750	Performance	
190-126	38751-38753	Be	
190-127	38754-38761	Careful	
190-128	38762-38766	With	
190-129	38767-38770	CTE	
190-130	38771-38773	in	
190-131	38774-38784	PostgreSQL	
190-132	38785-38788	How	
190-133	38789-38791	to	
190-134	38792-38797	avoid	
190-135	38798-38804	common	
190-136	38805-38813	pitfalls	
190-137	38814-38818	with	
190-138	38819-38825	common	
190-139	38826-38831	table	
190-140	38832-38843	expressions	
190-141	38844-38846	in	
190-142	38847-38857	PostgreSQL	
190-143	38858-38859	©	
190-144	38860-38864	Haki	
190-145	38865-38871	Benita	
190-146	38872-38876	2016	
190-147	38876-38877	-	
190-148	38877-38881	2021	
190-149	38882-38889	Credits	
190-150	38890-38900	Appreciate	
